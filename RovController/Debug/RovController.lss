
RovController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e4  00800200  00002766  000027fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002766  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000575  008002e4  008002e4  000028de  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000028de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002910  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000760  00000000  00000000  00002950  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00012e98  00000000  00000000  000030b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004a05  00000000  00000000  00015f48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004afe  00000000  00000000  0001a94d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001794  00000000  00000000  0001f44c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000576e  00000000  00000000  00020be0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000831e  00000000  00000000  0002634e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006e8  00000000  00000000  0002e66c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	db c0       	rjmp	.+438    	; 0x1b8 <__ctors_end>
       2:	00 00       	nop
       4:	0a c1       	rjmp	.+532    	; 0x21a <__bad_interrupt>
       6:	00 00       	nop
       8:	08 c1       	rjmp	.+528    	; 0x21a <__bad_interrupt>
       a:	00 00       	nop
       c:	06 c1       	rjmp	.+524    	; 0x21a <__bad_interrupt>
       e:	00 00       	nop
      10:	04 c1       	rjmp	.+520    	; 0x21a <__bad_interrupt>
      12:	00 00       	nop
      14:	02 c1       	rjmp	.+516    	; 0x21a <__bad_interrupt>
      16:	00 00       	nop
      18:	00 c1       	rjmp	.+512    	; 0x21a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	fe c0       	rjmp	.+508    	; 0x21a <__bad_interrupt>
      1e:	00 00       	nop
      20:	fc c0       	rjmp	.+504    	; 0x21a <__bad_interrupt>
      22:	00 00       	nop
      24:	fa c0       	rjmp	.+500    	; 0x21a <__bad_interrupt>
      26:	00 00       	nop
      28:	f8 c0       	rjmp	.+496    	; 0x21a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f6 c0       	rjmp	.+492    	; 0x21a <__bad_interrupt>
      2e:	00 00       	nop
      30:	f4 c0       	rjmp	.+488    	; 0x21a <__bad_interrupt>
      32:	00 00       	nop
      34:	f2 c0       	rjmp	.+484    	; 0x21a <__bad_interrupt>
      36:	00 00       	nop
      38:	f0 c0       	rjmp	.+480    	; 0x21a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	ee c0       	rjmp	.+476    	; 0x21a <__bad_interrupt>
      3e:	00 00       	nop
      40:	ec c0       	rjmp	.+472    	; 0x21a <__bad_interrupt>
      42:	00 00       	nop
      44:	ea c0       	rjmp	.+468    	; 0x21a <__bad_interrupt>
      46:	00 00       	nop
      48:	e8 c0       	rjmp	.+464    	; 0x21a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e6 c0       	rjmp	.+460    	; 0x21a <__bad_interrupt>
      4e:	00 00       	nop
      50:	e4 c0       	rjmp	.+456    	; 0x21a <__bad_interrupt>
      52:	00 00       	nop
      54:	e2 c0       	rjmp	.+452    	; 0x21a <__bad_interrupt>
      56:	00 00       	nop
      58:	e0 c0       	rjmp	.+448    	; 0x21a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	de c0       	rjmp	.+444    	; 0x21a <__bad_interrupt>
      5e:	00 00       	nop
      60:	dc c0       	rjmp	.+440    	; 0x21a <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 e3 0c 	jmp	0x19c6	; 0x19c6 <__vector_25>
      68:	0c 94 1f 0d 	jmp	0x1a3e	; 0x1a3e <__vector_26>
      6c:	d6 c0       	rjmp	.+428    	; 0x21a <__bad_interrupt>
      6e:	00 00       	nop
      70:	d4 c0       	rjmp	.+424    	; 0x21a <__bad_interrupt>
      72:	00 00       	nop
      74:	d2 c0       	rjmp	.+420    	; 0x21a <__bad_interrupt>
      76:	00 00       	nop
      78:	d0 c0       	rjmp	.+416    	; 0x21a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ce c0       	rjmp	.+412    	; 0x21a <__bad_interrupt>
      7e:	00 00       	nop
      80:	cc c0       	rjmp	.+408    	; 0x21a <__bad_interrupt>
      82:	00 00       	nop
      84:	ca c0       	rjmp	.+404    	; 0x21a <__bad_interrupt>
      86:	00 00       	nop
      88:	c8 c0       	rjmp	.+400    	; 0x21a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c6 c0       	rjmp	.+396    	; 0x21a <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 6b 0d 	jmp	0x1ad6	; 0x1ad6 <__vector_36>
      94:	0c 94 a7 0d 	jmp	0x1b4e	; 0x1b4e <__vector_37>
      98:	c0 c0       	rjmp	.+384    	; 0x21a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 ef 0f 	jmp	0x1fde	; 0x1fde <__vector_39>
      a0:	bc c0       	rjmp	.+376    	; 0x21a <__bad_interrupt>
      a2:	00 00       	nop
      a4:	ba c0       	rjmp	.+372    	; 0x21a <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b8 c0       	rjmp	.+368    	; 0x21a <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b6 c0       	rjmp	.+364    	; 0x21a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	b4 c0       	rjmp	.+360    	; 0x21a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	b2 c0       	rjmp	.+356    	; 0x21a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	b0 c0       	rjmp	.+352    	; 0x21a <__bad_interrupt>
      ba:	00 00       	nop
      bc:	ae c0       	rjmp	.+348    	; 0x21a <__bad_interrupt>
      be:	00 00       	nop
      c0:	ac c0       	rjmp	.+344    	; 0x21a <__bad_interrupt>
      c2:	00 00       	nop
      c4:	aa c0       	rjmp	.+340    	; 0x21a <__bad_interrupt>
      c6:	00 00       	nop
      c8:	a8 c0       	rjmp	.+336    	; 0x21a <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 f3 0d 	jmp	0x1be6	; 0x1be6 <__vector_51>
      d0:	0c 94 2f 0e 	jmp	0x1c5e	; 0x1c5e <__vector_52>
      d4:	a2 c0       	rjmp	.+324    	; 0x21a <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 7b 0e 	jmp	0x1cf6	; 0x1cf6 <__vector_54>
      dc:	0c 94 b7 0e 	jmp	0x1d6e	; 0x1d6e <__vector_55>
      e0:	9c c0       	rjmp	.+312    	; 0x21a <__bad_interrupt>
      e2:	00 00       	nop
      e4:	b1 10       	cpse	r11, r1
      e6:	b4 10       	cpse	r11, r4
      e8:	b4 10       	cpse	r11, r4
      ea:	b4 10       	cpse	r11, r4
      ec:	b4 10       	cpse	r11, r4
      ee:	b4 10       	cpse	r11, r4
      f0:	b4 10       	cpse	r11, r4
      f2:	b4 10       	cpse	r11, r4
      f4:	10 10       	cpse	r1, r0
      f6:	b4 10       	cpse	r11, r4
      f8:	b4 10       	cpse	r11, r4
      fa:	b4 10       	cpse	r11, r4
      fc:	b4 10       	cpse	r11, r4
      fe:	b4 10       	cpse	r11, r4
     100:	b4 10       	cpse	r11, r4
     102:	b4 10       	cpse	r11, r4
     104:	10 10       	cpse	r1, r0
     106:	b4 10       	cpse	r11, r4
     108:	b4 10       	cpse	r11, r4
     10a:	b4 10       	cpse	r11, r4
     10c:	b4 10       	cpse	r11, r4
     10e:	b4 10       	cpse	r11, r4
     110:	b4 10       	cpse	r11, r4
     112:	b4 10       	cpse	r11, r4
     114:	18 10       	cpse	r1, r8
     116:	b4 10       	cpse	r11, r4
     118:	b4 10       	cpse	r11, r4
     11a:	b4 10       	cpse	r11, r4
     11c:	b4 10       	cpse	r11, r4
     11e:	b4 10       	cpse	r11, r4
     120:	b4 10       	cpse	r11, r4
     122:	b4 10       	cpse	r11, r4
     124:	5b 10       	cpse	r5, r11
     126:	b4 10       	cpse	r11, r4
     128:	b4 10       	cpse	r11, r4
     12a:	b4 10       	cpse	r11, r4
     12c:	b4 10       	cpse	r11, r4
     12e:	b4 10       	cpse	r11, r4
     130:	b4 10       	cpse	r11, r4
     132:	b4 10       	cpse	r11, r4
     134:	18 10       	cpse	r1, r8
     136:	b4 10       	cpse	r11, r4
     138:	b4 10       	cpse	r11, r4
     13a:	b4 10       	cpse	r11, r4
     13c:	b4 10       	cpse	r11, r4
     13e:	b4 10       	cpse	r11, r4
     140:	b4 10       	cpse	r11, r4
     142:	b4 10       	cpse	r11, r4
     144:	62 10       	cpse	r6, r2
     146:	b4 10       	cpse	r11, r4
     148:	b4 10       	cpse	r11, r4
     14a:	b4 10       	cpse	r11, r4
     14c:	b4 10       	cpse	r11, r4
     14e:	b4 10       	cpse	r11, r4
     150:	b4 10       	cpse	r11, r4
     152:	b4 10       	cpse	r11, r4
     154:	69 10       	cpse	r6, r9
     156:	b4 10       	cpse	r11, r4
     158:	b4 10       	cpse	r11, r4
     15a:	b4 10       	cpse	r11, r4
     15c:	b4 10       	cpse	r11, r4
     15e:	b4 10       	cpse	r11, r4
     160:	b4 10       	cpse	r11, r4
     162:	b4 10       	cpse	r11, r4
     164:	7f 10       	cpse	r7, r15
     166:	b4 10       	cpse	r11, r4
     168:	b4 10       	cpse	r11, r4
     16a:	b4 10       	cpse	r11, r4
     16c:	b4 10       	cpse	r11, r4
     16e:	b4 10       	cpse	r11, r4
     170:	b4 10       	cpse	r11, r4
     172:	b4 10       	cpse	r11, r4
     174:	ad 10       	cpse	r10, r13
     176:	b4 10       	cpse	r11, r4
     178:	b4 10       	cpse	r11, r4
     17a:	b4 10       	cpse	r11, r4
     17c:	b4 10       	cpse	r11, r4
     17e:	b4 10       	cpse	r11, r4
     180:	b4 10       	cpse	r11, r4
     182:	b4 10       	cpse	r11, r4
     184:	70 10       	cpse	r7, r0
     186:	b4 10       	cpse	r11, r4
     188:	b4 10       	cpse	r11, r4
     18a:	b4 10       	cpse	r11, r4
     18c:	b4 10       	cpse	r11, r4
     18e:	b4 10       	cpse	r11, r4
     190:	b4 10       	cpse	r11, r4
     192:	b4 10       	cpse	r11, r4
     194:	8d 10       	cpse	r8, r13

00000196 <__trampolines_end>:
     196:	45 00       	.word	0x0045	; ????
     198:	00 82       	st	Z, r0
     19a:	00 00       	nop
     19c:	40 00       	.word	0x0040	; ????
     19e:	20 00       	Address 0x0000019e is out of bounds.
.word	0xffff	; ????

0000019f <_ZL9arpreqhdr>:
     19f:	00 01 08 00 06 04 00 01 00                          .........

000001a8 <__ctors_start>:
     1a8:	a2 04       	cpc	r10, r2
     1aa:	48 0d       	add	r20, r8
     1ac:	d0 0d       	add	r29, r0
     1ae:	58 0e       	add	r5, r24
     1b0:	e0 0e       	add	r14, r16
     1b2:	35 11       	cpse	r19, r5
     1b4:	90 11       	cpse	r25, r0
     1b6:	98 11       	cpse	r25, r8

000001b8 <__ctors_end>:
     1b8:	11 24       	eor	r1, r1
     1ba:	1f be       	out	0x3f, r1	; 63
     1bc:	cf ef       	ldi	r28, 0xFF	; 255
     1be:	d1 e2       	ldi	r29, 0x21	; 33
     1c0:	de bf       	out	0x3e, r29	; 62
     1c2:	cd bf       	out	0x3d, r28	; 61
     1c4:	00 e0       	ldi	r16, 0x00	; 0
     1c6:	0c bf       	out	0x3c, r16	; 60

000001c8 <__do_copy_data>:
     1c8:	12 e0       	ldi	r17, 0x02	; 2
     1ca:	a0 e0       	ldi	r26, 0x00	; 0
     1cc:	b2 e0       	ldi	r27, 0x02	; 2
     1ce:	e6 e6       	ldi	r30, 0x66	; 102
     1d0:	f7 e2       	ldi	r31, 0x27	; 39
     1d2:	00 e0       	ldi	r16, 0x00	; 0
     1d4:	0b bf       	out	0x3b, r16	; 59
     1d6:	02 c0       	rjmp	.+4      	; 0x1dc <__do_copy_data+0x14>
     1d8:	07 90       	elpm	r0, Z+
     1da:	0d 92       	st	X+, r0
     1dc:	a4 3e       	cpi	r26, 0xE4	; 228
     1de:	b1 07       	cpc	r27, r17
     1e0:	d9 f7       	brne	.-10     	; 0x1d8 <__do_copy_data+0x10>

000001e2 <__do_clear_bss>:
     1e2:	28 e0       	ldi	r18, 0x08	; 8
     1e4:	a4 ee       	ldi	r26, 0xE4	; 228
     1e6:	b2 e0       	ldi	r27, 0x02	; 2
     1e8:	01 c0       	rjmp	.+2      	; 0x1ec <.do_clear_bss_start>

000001ea <.do_clear_bss_loop>:
     1ea:	1d 92       	st	X+, r1

000001ec <.do_clear_bss_start>:
     1ec:	a9 35       	cpi	r26, 0x59	; 89
     1ee:	b2 07       	cpc	r27, r18
     1f0:	e1 f7       	brne	.-8      	; 0x1ea <.do_clear_bss_loop>

000001f2 <__do_global_ctors>:
     1f2:	10 e0       	ldi	r17, 0x00	; 0
     1f4:	cc ed       	ldi	r28, 0xDC	; 220
     1f6:	d0 e0       	ldi	r29, 0x00	; 0
     1f8:	00 e0       	ldi	r16, 0x00	; 0
     1fa:	06 c0       	rjmp	.+12     	; 0x208 <__do_global_ctors+0x16>
     1fc:	21 97       	sbiw	r28, 0x01	; 1
     1fe:	01 09       	sbc	r16, r1
     200:	80 2f       	mov	r24, r16
     202:	fe 01       	movw	r30, r28
     204:	0e 94 84 13 	call	0x2708	; 0x2708 <__tablejump2__>
     208:	c4 3d       	cpi	r28, 0xD4	; 212
     20a:	d1 07       	cpc	r29, r17
     20c:	80 e0       	ldi	r24, 0x00	; 0
     20e:	08 07       	cpc	r16, r24
     210:	a9 f7       	brne	.-22     	; 0x1fc <__do_global_ctors+0xa>
     212:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <main>
     216:	0c 94 b1 13 	jmp	0x2762	; 0x2762 <_exit>

0000021a <__bad_interrupt>:
     21a:	f2 ce       	rjmp	.-540    	; 0x0 <__vectors>

0000021c <_ZN15Adafruit_Sensor15enableAutoRangeEb>:

    setMode(lastMode);
    return true;
  }
  return false;
}
     21c:	08 95       	ret

0000021e <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>:
     21e:	0f 93       	push	r16
     220:	1f 93       	push	r17
     222:	cf 93       	push	r28
     224:	df 93       	push	r29
     226:	8c 01       	movw	r16, r24
     228:	eb 01       	movw	r28, r22
     22a:	88 e2       	ldi	r24, 0x28	; 40
     22c:	fb 01       	movw	r30, r22
     22e:	11 92       	st	Z+, r1
     230:	8a 95       	dec	r24
     232:	e9 f7       	brne	.-6      	; 0x22e <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x10>
     234:	4b e0       	ldi	r20, 0x0B	; 11
     236:	50 e0       	ldi	r21, 0x00	; 0
     238:	64 e1       	ldi	r22, 0x14	; 20
     23a:	72 e0       	ldi	r23, 0x02	; 2
     23c:	ce 01       	movw	r24, r28
     23e:	0e 94 a2 13 	call	0x2744	; 0x2744 <strncpy>
     242:	1b 86       	std	Y+11, r1	; 0x0b
     244:	81 e0       	ldi	r24, 0x01	; 1
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	a0 e0       	ldi	r26, 0x00	; 0
     24a:	b0 e0       	ldi	r27, 0x00	; 0
     24c:	8c 87       	std	Y+12, r24	; 0x0c
     24e:	9d 87       	std	Y+13, r25	; 0x0d
     250:	ae 87       	std	Y+14, r26	; 0x0e
     252:	bf 87       	std	Y+15, r27	; 0x0f
     254:	f8 01       	movw	r30, r16
     256:	86 81       	ldd	r24, Z+6	; 0x06
     258:	97 81       	ldd	r25, Z+7	; 0x07
     25a:	a0 85       	ldd	r26, Z+8	; 0x08
     25c:	b1 85       	ldd	r27, Z+9	; 0x09
     25e:	88 8b       	std	Y+16, r24	; 0x10
     260:	99 8b       	std	Y+17, r25	; 0x11
     262:	aa 8b       	std	Y+18, r26	; 0x12
     264:	bb 8b       	std	Y+19, r27	; 0x13
     266:	83 e0       	ldi	r24, 0x03	; 3
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	a0 e0       	ldi	r26, 0x00	; 0
     26c:	b0 e0       	ldi	r27, 0x00	; 0
     26e:	8c 8b       	std	Y+20, r24	; 0x14
     270:	9d 8b       	std	Y+21, r25	; 0x15
     272:	ae 8b       	std	Y+22, r26	; 0x16
     274:	bf 8b       	std	Y+23, r27	; 0x17
     276:	1c a2       	std	Y+36, r1	; 0x24
     278:	1d a2       	std	Y+37, r1	; 0x25
     27a:	1e a2       	std	Y+38, r1	; 0x26
     27c:	1f a2       	std	Y+39, r1	; 0x27
     27e:	18 8e       	std	Y+24, r1	; 0x18
     280:	19 8e       	std	Y+25, r1	; 0x19
     282:	1a 8e       	std	Y+26, r1	; 0x1a
     284:	1b 8e       	std	Y+27, r1	; 0x1b
     286:	1c 8e       	std	Y+28, r1	; 0x1c
     288:	1d 8e       	std	Y+29, r1	; 0x1d
     28a:	1e 8e       	std	Y+30, r1	; 0x1e
     28c:	1f 8e       	std	Y+31, r1	; 0x1f
     28e:	8a e0       	ldi	r24, 0x0A	; 10
     290:	97 ed       	ldi	r25, 0xD7	; 215
     292:	a3 e2       	ldi	r26, 0x23	; 35
     294:	bc e3       	ldi	r27, 0x3C	; 60
     296:	88 a3       	std	Y+32, r24	; 0x20
     298:	99 a3       	std	Y+33, r25	; 0x21
     29a:	aa a3       	std	Y+34, r26	; 0x22
     29c:	bb a3       	std	Y+35, r27	; 0x23
     29e:	df 91       	pop	r29
     2a0:	cf 91       	pop	r28
     2a2:	1f 91       	pop	r17
     2a4:	0f 91       	pop	r16
     2a6:	08 95       	ret

000002a8 <_ZN15Adafruit_BNO055C1ElhP3TWI>:
     2a8:	0f 93       	push	r16
     2aa:	1f 93       	push	r17
     2ac:	fc 01       	movw	r30, r24
     2ae:	8f e1       	ldi	r24, 0x1F	; 31
     2b0:	92 e0       	ldi	r25, 0x02	; 2
     2b2:	91 83       	std	Z+1, r25	; 0x01
     2b4:	80 83       	st	Z, r24
     2b6:	46 83       	std	Z+6, r20	; 0x06
     2b8:	57 83       	std	Z+7, r21	; 0x07
     2ba:	60 87       	std	Z+8, r22	; 0x08
     2bc:	71 87       	std	Z+9, r23	; 0x09
     2be:	23 83       	std	Z+3, r18	; 0x03
     2c0:	15 83       	std	Z+5, r17	; 0x05
     2c2:	04 83       	std	Z+4, r16	; 0x04
     2c4:	1f 91       	pop	r17
     2c6:	0f 91       	pop	r16
     2c8:	08 95       	ret

000002ca <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>:
     2ca:	af 92       	push	r10
     2cc:	bf 92       	push	r11
     2ce:	cf 92       	push	r12
     2d0:	ef 92       	push	r14
     2d2:	0f 93       	push	r16
     2d4:	1f 93       	push	r17
     2d6:	cf 93       	push	r28
     2d8:	df 93       	push	r29
     2da:	1f 92       	push	r1
     2dc:	cd b7       	in	r28, 0x3d	; 61
     2de:	de b7       	in	r29, 0x3e	; 62
     2e0:	5c 01       	movw	r10, r24
     2e2:	49 83       	std	Y+1, r20	; 0x01
     2e4:	60 93 e4 02 	sts	0x02E4, r22	; 0x8002e4 <__data_end>
     2e8:	cc 24       	eor	r12, r12
     2ea:	c3 94       	inc	r12
     2ec:	ee 24       	eor	r14, r14
     2ee:	e3 94       	inc	r14
     2f0:	04 ee       	ldi	r16, 0xE4	; 228
     2f2:	12 e0       	ldi	r17, 0x02	; 2
     2f4:	21 e0       	ldi	r18, 0x01	; 1
     2f6:	ae 01       	movw	r20, r28
     2f8:	4f 5f       	subi	r20, 0xFF	; 255
     2fa:	5f 4f       	sbci	r21, 0xFF	; 255
     2fc:	f5 01       	movw	r30, r10
     2fe:	63 81       	ldd	r22, Z+3	; 0x03
     300:	84 81       	ldd	r24, Z+4	; 0x04
     302:	95 81       	ldd	r25, Z+5	; 0x05
     304:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <_ZN3TWI10writeAsyncEhPhhS0_hb>
     308:	88 23       	and	r24, r24
     30a:	71 f3       	breq	.-36     	; 0x2e8 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh+0x1e>
     30c:	f5 01       	movw	r30, r10
     30e:	84 81       	ldd	r24, Z+4	; 0x04
     310:	95 81       	ldd	r25, Z+5	; 0x05
     312:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <_ZN3TWI9availableEv>
     316:	88 23       	and	r24, r24
     318:	c9 f3       	breq	.-14     	; 0x30c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh+0x42>
     31a:	81 e0       	ldi	r24, 0x01	; 1
     31c:	0f 90       	pop	r0
     31e:	df 91       	pop	r29
     320:	cf 91       	pop	r28
     322:	1f 91       	pop	r17
     324:	0f 91       	pop	r16
     326:	ef 90       	pop	r14
     328:	cf 90       	pop	r12
     32a:	bf 90       	pop	r11
     32c:	af 90       	pop	r10
     32e:	08 95       	ret

00000330 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>:
     330:	46 2f       	mov	r20, r22
     332:	fc 01       	movw	r30, r24
     334:	62 87       	std	Z+10, r22	; 0x0a
     336:	6d e3       	ldi	r22, 0x3D	; 61
     338:	c8 df       	rcall	.-112    	; 0x2ca <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     33a:	ff ef       	ldi	r31, 0xFF	; 255
     33c:	26 e7       	ldi	r18, 0x76	; 118
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	f1 50       	subi	r31, 0x01	; 1
     342:	20 40       	sbci	r18, 0x00	; 0
     344:	80 40       	sbci	r24, 0x00	; 0
     346:	e1 f7       	brne	.-8      	; 0x340 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE+0x10>
     348:	00 c0       	rjmp	.+0      	; 0x34a <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE+0x1a>
     34a:	00 00       	nop
     34c:	08 95       	ret

0000034e <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>:
     34e:	af 92       	push	r10
     350:	bf 92       	push	r11
     352:	cf 92       	push	r12
     354:	ef 92       	push	r14
     356:	ff 92       	push	r15
     358:	0f 93       	push	r16
     35a:	1f 93       	push	r17
     35c:	cf 93       	push	r28
     35e:	df 93       	push	r29
     360:	ec 01       	movw	r28, r24
     362:	5a 01       	movw	r10, r20
     364:	f2 2e       	mov	r15, r18
     366:	60 93 e4 02 	sts	0x02E4, r22	; 0x8002e4 <__data_end>
     36a:	cc 24       	eor	r12, r12
     36c:	c3 94       	inc	r12
     36e:	ee 24       	eor	r14, r14
     370:	e3 94       	inc	r14
     372:	04 ee       	ldi	r16, 0xE4	; 228
     374:	12 e0       	ldi	r17, 0x02	; 2
     376:	2f 2d       	mov	r18, r15
     378:	4b 81       	ldd	r20, Y+3	; 0x03
     37a:	b5 01       	movw	r22, r10
     37c:	8c 81       	ldd	r24, Y+4	; 0x04
     37e:	9d 81       	ldd	r25, Y+5	; 0x05
     380:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <_ZN3TWI9readAsyncEPhhhS0_hb>
     384:	88 23       	and	r24, r24
     386:	89 f3       	breq	.-30     	; 0x36a <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh+0x1c>
     388:	8c 81       	ldd	r24, Y+4	; 0x04
     38a:	9d 81       	ldd	r25, Y+5	; 0x05
     38c:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <_ZN3TWI9availableEv>
     390:	88 23       	and	r24, r24
     392:	d1 f3       	breq	.-12     	; 0x388 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh+0x3a>
     394:	81 e0       	ldi	r24, 0x01	; 1
     396:	df 91       	pop	r29
     398:	cf 91       	pop	r28
     39a:	1f 91       	pop	r17
     39c:	0f 91       	pop	r16
     39e:	ff 90       	pop	r15
     3a0:	ef 90       	pop	r14
     3a2:	cf 90       	pop	r12
     3a4:	bf 90       	pop	r11
     3a6:	af 90       	pop	r10
     3a8:	08 95       	ret

000003aa <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>:
     3aa:	cf 93       	push	r28
     3ac:	df 93       	push	r29
     3ae:	1f 92       	push	r1
     3b0:	cd b7       	in	r28, 0x3d	; 61
     3b2:	de b7       	in	r29, 0x3e	; 62
     3b4:	19 82       	std	Y+1, r1	; 0x01
     3b6:	21 e0       	ldi	r18, 0x01	; 1
     3b8:	ae 01       	movw	r20, r28
     3ba:	4f 5f       	subi	r20, 0xFF	; 255
     3bc:	5f 4f       	sbci	r21, 0xFF	; 255
     3be:	c7 df       	rcall	.-114    	; 0x34e <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>
     3c0:	89 81       	ldd	r24, Y+1	; 0x01
     3c2:	0f 90       	pop	r0
     3c4:	df 91       	pop	r29
     3c6:	cf 91       	pop	r28
     3c8:	08 95       	ret

000003ca <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>:
     3ca:	1f 93       	push	r17
     3cc:	cf 93       	push	r28
     3ce:	df 93       	push	r29
     3d0:	ec 01       	movw	r28, r24
     3d2:	16 2f       	mov	r17, r22
     3d4:	8c 81       	ldd	r24, Y+4	; 0x04
     3d6:	9d 81       	ldd	r25, Y+5	; 0x05
     3d8:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <_ZN3TWI5beginEv>
     3dc:	60 e0       	ldi	r22, 0x00	; 0
     3de:	ce 01       	movw	r24, r28
     3e0:	e4 df       	rcall	.-56     	; 0x3aa <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
     3e2:	80 3a       	cpi	r24, 0xA0	; 160
     3e4:	79 f0       	breq	.+30     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     3e6:	2f ef       	ldi	r18, 0xFF	; 255
     3e8:	83 ed       	ldi	r24, 0xD3	; 211
     3ea:	90 e3       	ldi	r25, 0x30	; 48
     3ec:	21 50       	subi	r18, 0x01	; 1
     3ee:	80 40       	sbci	r24, 0x00	; 0
     3f0:	90 40       	sbci	r25, 0x00	; 0
     3f2:	e1 f7       	brne	.-8      	; 0x3ec <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x22>
     3f4:	00 c0       	rjmp	.+0      	; 0x3f6 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x2c>
     3f6:	00 00       	nop
     3f8:	60 e0       	ldi	r22, 0x00	; 0
     3fa:	ce 01       	movw	r24, r28
     3fc:	d6 df       	rcall	.-84     	; 0x3aa <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
     3fe:	80 3a       	cpi	r24, 0xA0	; 160
     400:	09 f0       	breq	.+2      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     402:	4b c0       	rjmp	.+150    	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
     404:	60 e0       	ldi	r22, 0x00	; 0
     406:	ce 01       	movw	r24, r28
     408:	93 df       	rcall	.-218    	; 0x330 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
     40a:	40 e2       	ldi	r20, 0x20	; 32
     40c:	6f e3       	ldi	r22, 0x3F	; 63
     40e:	ce 01       	movw	r24, r28
     410:	5c df       	rcall	.-328    	; 0x2ca <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     412:	2f ef       	ldi	r18, 0xFF	; 255
     414:	86 e7       	ldi	r24, 0x76	; 118
     416:	91 e0       	ldi	r25, 0x01	; 1
     418:	21 50       	subi	r18, 0x01	; 1
     41a:	80 40       	sbci	r24, 0x00	; 0
     41c:	90 40       	sbci	r25, 0x00	; 0
     41e:	e1 f7       	brne	.-8      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     420:	00 c0       	rjmp	.+0      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     422:	00 00       	nop
     424:	60 e0       	ldi	r22, 0x00	; 0
     426:	ce 01       	movw	r24, r28
     428:	c0 df       	rcall	.-128    	; 0x3aa <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
     42a:	80 3a       	cpi	r24, 0xA0	; 160
     42c:	39 f0       	breq	.+14     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     42e:	8f e3       	ldi	r24, 0x3F	; 63
     430:	9c e9       	ldi	r25, 0x9C	; 156
     432:	01 97       	sbiw	r24, 0x01	; 1
     434:	f1 f7       	brne	.-4      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     436:	00 c0       	rjmp	.+0      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     438:	00 00       	nop
     43a:	f4 cf       	rjmp	.-24     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     43c:	9f ef       	ldi	r25, 0xFF	; 255
     43e:	20 e7       	ldi	r18, 0x70	; 112
     440:	82 e0       	ldi	r24, 0x02	; 2
     442:	91 50       	subi	r25, 0x01	; 1
     444:	20 40       	sbci	r18, 0x00	; 0
     446:	80 40       	sbci	r24, 0x00	; 0
     448:	e1 f7       	brne	.-8      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     44a:	00 c0       	rjmp	.+0      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     44c:	00 00       	nop
     44e:	40 e0       	ldi	r20, 0x00	; 0
     450:	6e e3       	ldi	r22, 0x3E	; 62
     452:	ce 01       	movw	r24, r28
     454:	3a df       	rcall	.-396    	; 0x2ca <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     456:	8f e3       	ldi	r24, 0x3F	; 63
     458:	9c e9       	ldi	r25, 0x9C	; 156
     45a:	01 97       	sbiw	r24, 0x01	; 1
     45c:	f1 f7       	brne	.-4      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     45e:	00 c0       	rjmp	.+0      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     460:	00 00       	nop
     462:	40 e0       	ldi	r20, 0x00	; 0
     464:	67 e0       	ldi	r22, 0x07	; 7
     466:	ce 01       	movw	r24, r28
     468:	30 df       	rcall	.-416    	; 0x2ca <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     46a:	40 e0       	ldi	r20, 0x00	; 0
     46c:	6f e3       	ldi	r22, 0x3F	; 63
     46e:	ce 01       	movw	r24, r28
     470:	2c df       	rcall	.-424    	; 0x2ca <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     472:	8f e3       	ldi	r24, 0x3F	; 63
     474:	9c e9       	ldi	r25, 0x9C	; 156
     476:	01 97       	sbiw	r24, 0x01	; 1
     478:	f1 f7       	brne	.-4      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
     47a:	00 c0       	rjmp	.+0      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
     47c:	00 00       	nop
     47e:	61 2f       	mov	r22, r17
     480:	ce 01       	movw	r24, r28
     482:	56 df       	rcall	.-340    	; 0x330 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
     484:	9f ef       	ldi	r25, 0xFF	; 255
     486:	29 ef       	ldi	r18, 0xF9	; 249
     488:	80 e0       	ldi	r24, 0x00	; 0
     48a:	91 50       	subi	r25, 0x01	; 1
     48c:	20 40       	sbci	r18, 0x00	; 0
     48e:	80 40       	sbci	r24, 0x00	; 0
     490:	e1 f7       	brne	.-8      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
     492:	00 c0       	rjmp	.+0      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
     494:	00 00       	nop
     496:	81 e0       	ldi	r24, 0x01	; 1
     498:	01 c0       	rjmp	.+2      	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
     49a:	80 e0       	ldi	r24, 0x00	; 0
     49c:	df 91       	pop	r29
     49e:	cf 91       	pop	r28
     4a0:	1f 91       	pop	r17
     4a2:	08 95       	ret

000004a4 <_ZN15Adafruit_BNO0557getTempEv>:
     4a4:	64 e3       	ldi	r22, 0x34	; 52
     4a6:	81 cf       	rjmp	.-254    	; 0x3aa <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
     4a8:	08 95       	ret

000004aa <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>:
 *            VECTOR_EULER
 *            VECTOR_LINEARACCEL
 *            VECTOR_GRAVITY]
 *  @return  vector from specified source
 */
AdafruitImu::Vector<3> Adafruit_BNO055::getVector(adafruit_vector_type_t vector_type) {
     4aa:	af 92       	push	r10
     4ac:	bf 92       	push	r11
     4ae:	cf 92       	push	r12
     4b0:	df 92       	push	r13
     4b2:	ff 92       	push	r15
     4b4:	0f 93       	push	r16
     4b6:	1f 93       	push	r17
     4b8:	cf 93       	push	r28
     4ba:	df 93       	push	r29
     4bc:	00 d0       	rcall	.+0      	; 0x4be <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x14>
     4be:	00 d0       	rcall	.+0      	; 0x4c0 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x16>
     4c0:	cd b7       	in	r28, 0x3d	; 61
     4c2:	de b7       	in	r29, 0x3e	; 62
     4c4:	8c 01       	movw	r16, r24
     4c6:	cb 01       	movw	r24, r22
     4c8:	f4 2e       	mov	r15, r20
	template <uint8_t N> class Vector
	{
		public:
		Vector()
		{
			memset(p_vec, 0, sizeof(double)*N);
     4ca:	2c e0       	ldi	r18, 0x0C	; 12
     4cc:	f8 01       	movw	r30, r16
     4ce:	11 92       	st	Z+, r1
     4d0:	2a 95       	dec	r18
     4d2:	e9 f7       	brne	.-6      	; 0x4ce <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x24>
  AdafruitImu::Vector<3> xyz;
  uint8_t buffer[6];
  memset(buffer, 0, 6);
     4d4:	ae 01       	movw	r20, r28
     4d6:	4f 5f       	subi	r20, 0xFF	; 255
     4d8:	5f 4f       	sbci	r21, 0xFF	; 255
     4da:	26 e0       	ldi	r18, 0x06	; 6
     4dc:	fa 01       	movw	r30, r20
     4de:	11 92       	st	Z+, r1
     4e0:	2a 95       	dec	r18
     4e2:	e9 f7       	brne	.-6      	; 0x4de <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x34>

  int16_t x, y, z;
  x = y = z = 0;

  /* Read vector data (6 bytes) */
  readLen((adafruit_bno055_reg_t)vector_type, buffer, 6);
     4e4:	26 e0       	ldi	r18, 0x06	; 6
     4e6:	6f 2d       	mov	r22, r15
     4e8:	32 df       	rcall	.-412    	; 0x34e <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>

  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
     4ea:	6a 81       	ldd	r22, Y+2	; 0x02
     4ec:	70 e0       	ldi	r23, 0x00	; 0
     4ee:	76 2f       	mov	r23, r22
     4f0:	66 27       	eor	r22, r22
     4f2:	89 81       	ldd	r24, Y+1	; 0x01
     4f4:	68 2b       	or	r22, r24
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
     4f6:	8c 81       	ldd	r24, Y+4	; 0x04
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	98 2f       	mov	r25, r24
     4fc:	88 27       	eor	r24, r24
     4fe:	2b 81       	ldd	r18, Y+3	; 0x03
     500:	6c 01       	movw	r12, r24
     502:	c2 2a       	or	r12, r18
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
     504:	8e 81       	ldd	r24, Y+6	; 0x06
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	98 2f       	mov	r25, r24
     50a:	88 27       	eor	r24, r24
     50c:	2d 81       	ldd	r18, Y+5	; 0x05
     50e:	5c 01       	movw	r10, r24
     510:	a2 2a       	or	r10, r18

  /*!
   * Convert the value to an appropriate range (section 3.6.4)
   * and assign the value to the Vector type
   */
  switch (vector_type) {
     512:	f4 e1       	ldi	r31, 0x14	; 20
     514:	ff 16       	cp	r15, r31
     516:	09 f4       	brne	.+2      	; 0x51a <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x70>
     518:	4a c0       	rjmp	.+148    	; 0x5ae <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x104>
     51a:	ff 15       	cp	r31, r15
     51c:	40 f0       	brcs	.+16     	; 0x52e <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x84>
     51e:	88 e0       	ldi	r24, 0x08	; 8
     520:	f8 16       	cp	r15, r24
     522:	09 f4       	brne	.+2      	; 0x526 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x7c>
     524:	ac c0       	rjmp	.+344    	; 0x67e <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x1d4>
     526:	ee e0       	ldi	r30, 0x0E	; 14
     528:	fe 16       	cp	r15, r30
     52a:	69 f0       	breq	.+26     	; 0x546 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x9c>
     52c:	43 c1       	rjmp	.+646    	; 0x7b4 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
     52e:	f8 e2       	ldi	r31, 0x28	; 40
     530:	ff 16       	cp	r15, r31
     532:	09 f4       	brne	.+2      	; 0x536 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x8c>
     534:	d8 c0       	rjmp	.+432    	; 0x6e6 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x23c>
     536:	8e e2       	ldi	r24, 0x2E	; 46
     538:	f8 16       	cp	r15, r24
     53a:	09 f4       	brne	.+2      	; 0x53e <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x94>
     53c:	08 c1       	rjmp	.+528    	; 0x74e <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x2a4>
     53e:	ea e1       	ldi	r30, 0x1A	; 26
     540:	fe 12       	cpse	r15, r30
     542:	38 c1       	rjmp	.+624    	; 0x7b4 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
     544:	68 c0       	rjmp	.+208    	; 0x616 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x16c>
  case VECTOR_MAGNETOMETER:
    /* 1uT = 16 LSB */
    xyz[0] = ((double)x) / 16.0;
     546:	07 2e       	mov	r0, r23
     548:	00 0c       	add	r0, r0
     54a:	88 0b       	sbc	r24, r24
     54c:	99 0b       	sbc	r25, r25
     54e:	0e 94 73 12 	call	0x24e6	; 0x24e6 <__floatsisf>
     552:	20 e0       	ldi	r18, 0x00	; 0
     554:	30 e0       	ldi	r19, 0x00	; 0
     556:	40 e8       	ldi	r20, 0x80	; 128
     558:	5d e3       	ldi	r21, 0x3D	; 61
     55a:	0e 94 ff 12 	call	0x25fe	; 0x25fe <__mulsf3>
     55e:	f8 01       	movw	r30, r16
     560:	60 83       	st	Z, r22
     562:	71 83       	std	Z+1, r23	; 0x01
     564:	82 83       	std	Z+2, r24	; 0x02
     566:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 16.0;
     568:	b6 01       	movw	r22, r12
     56a:	dd 0c       	add	r13, r13
     56c:	88 0b       	sbc	r24, r24
     56e:	99 0b       	sbc	r25, r25
     570:	0e 94 73 12 	call	0x24e6	; 0x24e6 <__floatsisf>
     574:	20 e0       	ldi	r18, 0x00	; 0
     576:	30 e0       	ldi	r19, 0x00	; 0
     578:	40 e8       	ldi	r20, 0x80	; 128
     57a:	5d e3       	ldi	r21, 0x3D	; 61
     57c:	0e 94 ff 12 	call	0x25fe	; 0x25fe <__mulsf3>
     580:	f8 01       	movw	r30, r16
     582:	64 83       	std	Z+4, r22	; 0x04
     584:	75 83       	std	Z+5, r23	; 0x05
     586:	86 83       	std	Z+6, r24	; 0x06
     588:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 16.0;
     58a:	b5 01       	movw	r22, r10
     58c:	bb 0c       	add	r11, r11
     58e:	88 0b       	sbc	r24, r24
     590:	99 0b       	sbc	r25, r25
     592:	0e 94 73 12 	call	0x24e6	; 0x24e6 <__floatsisf>
     596:	20 e0       	ldi	r18, 0x00	; 0
     598:	30 e0       	ldi	r19, 0x00	; 0
     59a:	40 e8       	ldi	r20, 0x80	; 128
     59c:	5d e3       	ldi	r21, 0x3D	; 61
     59e:	0e 94 ff 12 	call	0x25fe	; 0x25fe <__mulsf3>
     5a2:	f8 01       	movw	r30, r16
     5a4:	60 87       	std	Z+8, r22	; 0x08
     5a6:	71 87       	std	Z+9, r23	; 0x09
     5a8:	82 87       	std	Z+10, r24	; 0x0a
     5aa:	93 87       	std	Z+11, r25	; 0x0b
    break;
     5ac:	03 c1       	rjmp	.+518    	; 0x7b4 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_GYROSCOPE:
    /* 1dps = 16 LSB */
    xyz[0] = ((double)x) / 16.0;
     5ae:	07 2e       	mov	r0, r23
     5b0:	00 0c       	add	r0, r0
     5b2:	88 0b       	sbc	r24, r24
     5b4:	99 0b       	sbc	r25, r25
     5b6:	0e 94 73 12 	call	0x24e6	; 0x24e6 <__floatsisf>
     5ba:	20 e0       	ldi	r18, 0x00	; 0
     5bc:	30 e0       	ldi	r19, 0x00	; 0
     5be:	40 e8       	ldi	r20, 0x80	; 128
     5c0:	5d e3       	ldi	r21, 0x3D	; 61
     5c2:	0e 94 ff 12 	call	0x25fe	; 0x25fe <__mulsf3>
     5c6:	f8 01       	movw	r30, r16
     5c8:	60 83       	st	Z, r22
     5ca:	71 83       	std	Z+1, r23	; 0x01
     5cc:	82 83       	std	Z+2, r24	; 0x02
     5ce:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 16.0;
     5d0:	b6 01       	movw	r22, r12
     5d2:	dd 0c       	add	r13, r13
     5d4:	88 0b       	sbc	r24, r24
     5d6:	99 0b       	sbc	r25, r25
     5d8:	0e 94 73 12 	call	0x24e6	; 0x24e6 <__floatsisf>
     5dc:	20 e0       	ldi	r18, 0x00	; 0
     5de:	30 e0       	ldi	r19, 0x00	; 0
     5e0:	40 e8       	ldi	r20, 0x80	; 128
     5e2:	5d e3       	ldi	r21, 0x3D	; 61
     5e4:	0e 94 ff 12 	call	0x25fe	; 0x25fe <__mulsf3>
     5e8:	f8 01       	movw	r30, r16
     5ea:	64 83       	std	Z+4, r22	; 0x04
     5ec:	75 83       	std	Z+5, r23	; 0x05
     5ee:	86 83       	std	Z+6, r24	; 0x06
     5f0:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 16.0;
     5f2:	b5 01       	movw	r22, r10
     5f4:	bb 0c       	add	r11, r11
     5f6:	88 0b       	sbc	r24, r24
     5f8:	99 0b       	sbc	r25, r25
     5fa:	0e 94 73 12 	call	0x24e6	; 0x24e6 <__floatsisf>
     5fe:	20 e0       	ldi	r18, 0x00	; 0
     600:	30 e0       	ldi	r19, 0x00	; 0
     602:	40 e8       	ldi	r20, 0x80	; 128
     604:	5d e3       	ldi	r21, 0x3D	; 61
     606:	0e 94 ff 12 	call	0x25fe	; 0x25fe <__mulsf3>
     60a:	f8 01       	movw	r30, r16
     60c:	60 87       	std	Z+8, r22	; 0x08
     60e:	71 87       	std	Z+9, r23	; 0x09
     610:	82 87       	std	Z+10, r24	; 0x0a
     612:	93 87       	std	Z+11, r25	; 0x0b
    break;
     614:	cf c0       	rjmp	.+414    	; 0x7b4 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_EULER:
    /* 1 degree = 16 LSB */
    xyz[0] = ((double)x) / 16.0;
     616:	07 2e       	mov	r0, r23
     618:	00 0c       	add	r0, r0
     61a:	88 0b       	sbc	r24, r24
     61c:	99 0b       	sbc	r25, r25
     61e:	0e 94 73 12 	call	0x24e6	; 0x24e6 <__floatsisf>
     622:	20 e0       	ldi	r18, 0x00	; 0
     624:	30 e0       	ldi	r19, 0x00	; 0
     626:	40 e8       	ldi	r20, 0x80	; 128
     628:	5d e3       	ldi	r21, 0x3D	; 61
     62a:	0e 94 ff 12 	call	0x25fe	; 0x25fe <__mulsf3>
     62e:	f8 01       	movw	r30, r16
     630:	60 83       	st	Z, r22
     632:	71 83       	std	Z+1, r23	; 0x01
     634:	82 83       	std	Z+2, r24	; 0x02
     636:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 16.0;
     638:	b6 01       	movw	r22, r12
     63a:	dd 0c       	add	r13, r13
     63c:	88 0b       	sbc	r24, r24
     63e:	99 0b       	sbc	r25, r25
     640:	0e 94 73 12 	call	0x24e6	; 0x24e6 <__floatsisf>
     644:	20 e0       	ldi	r18, 0x00	; 0
     646:	30 e0       	ldi	r19, 0x00	; 0
     648:	40 e8       	ldi	r20, 0x80	; 128
     64a:	5d e3       	ldi	r21, 0x3D	; 61
     64c:	0e 94 ff 12 	call	0x25fe	; 0x25fe <__mulsf3>
     650:	f8 01       	movw	r30, r16
     652:	64 83       	std	Z+4, r22	; 0x04
     654:	75 83       	std	Z+5, r23	; 0x05
     656:	86 83       	std	Z+6, r24	; 0x06
     658:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 16.0;
     65a:	b5 01       	movw	r22, r10
     65c:	bb 0c       	add	r11, r11
     65e:	88 0b       	sbc	r24, r24
     660:	99 0b       	sbc	r25, r25
     662:	0e 94 73 12 	call	0x24e6	; 0x24e6 <__floatsisf>
     666:	20 e0       	ldi	r18, 0x00	; 0
     668:	30 e0       	ldi	r19, 0x00	; 0
     66a:	40 e8       	ldi	r20, 0x80	; 128
     66c:	5d e3       	ldi	r21, 0x3D	; 61
     66e:	0e 94 ff 12 	call	0x25fe	; 0x25fe <__mulsf3>
     672:	f8 01       	movw	r30, r16
     674:	60 87       	std	Z+8, r22	; 0x08
     676:	71 87       	std	Z+9, r23	; 0x09
     678:	82 87       	std	Z+10, r24	; 0x0a
     67a:	93 87       	std	Z+11, r25	; 0x0b
    break;
     67c:	9b c0       	rjmp	.+310    	; 0x7b4 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_ACCELEROMETER:
    /* 1m/s^2 = 100 LSB */
    xyz[0] = ((double)x) / 100.0;
     67e:	07 2e       	mov	r0, r23
     680:	00 0c       	add	r0, r0
     682:	88 0b       	sbc	r24, r24
     684:	99 0b       	sbc	r25, r25
     686:	0e 94 73 12 	call	0x24e6	; 0x24e6 <__floatsisf>
     68a:	20 e0       	ldi	r18, 0x00	; 0
     68c:	30 e0       	ldi	r19, 0x00	; 0
     68e:	48 ec       	ldi	r20, 0xC8	; 200
     690:	52 e4       	ldi	r21, 0x42	; 66
     692:	0e 94 09 12 	call	0x2412	; 0x2412 <__divsf3>
     696:	f8 01       	movw	r30, r16
     698:	60 83       	st	Z, r22
     69a:	71 83       	std	Z+1, r23	; 0x01
     69c:	82 83       	std	Z+2, r24	; 0x02
     69e:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 100.0;
     6a0:	b6 01       	movw	r22, r12
     6a2:	dd 0c       	add	r13, r13
     6a4:	88 0b       	sbc	r24, r24
     6a6:	99 0b       	sbc	r25, r25
     6a8:	0e 94 73 12 	call	0x24e6	; 0x24e6 <__floatsisf>
     6ac:	20 e0       	ldi	r18, 0x00	; 0
     6ae:	30 e0       	ldi	r19, 0x00	; 0
     6b0:	48 ec       	ldi	r20, 0xC8	; 200
     6b2:	52 e4       	ldi	r21, 0x42	; 66
     6b4:	0e 94 09 12 	call	0x2412	; 0x2412 <__divsf3>
     6b8:	f8 01       	movw	r30, r16
     6ba:	64 83       	std	Z+4, r22	; 0x04
     6bc:	75 83       	std	Z+5, r23	; 0x05
     6be:	86 83       	std	Z+6, r24	; 0x06
     6c0:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 100.0;
     6c2:	b5 01       	movw	r22, r10
     6c4:	bb 0c       	add	r11, r11
     6c6:	88 0b       	sbc	r24, r24
     6c8:	99 0b       	sbc	r25, r25
     6ca:	0e 94 73 12 	call	0x24e6	; 0x24e6 <__floatsisf>
     6ce:	20 e0       	ldi	r18, 0x00	; 0
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	48 ec       	ldi	r20, 0xC8	; 200
     6d4:	52 e4       	ldi	r21, 0x42	; 66
     6d6:	0e 94 09 12 	call	0x2412	; 0x2412 <__divsf3>
     6da:	f8 01       	movw	r30, r16
     6dc:	60 87       	std	Z+8, r22	; 0x08
     6de:	71 87       	std	Z+9, r23	; 0x09
     6e0:	82 87       	std	Z+10, r24	; 0x0a
     6e2:	93 87       	std	Z+11, r25	; 0x0b
    break;
     6e4:	67 c0       	rjmp	.+206    	; 0x7b4 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_LINEARACCEL:
    /* 1m/s^2 = 100 LSB */
    xyz[0] = ((double)x) / 100.0;
     6e6:	07 2e       	mov	r0, r23
     6e8:	00 0c       	add	r0, r0
     6ea:	88 0b       	sbc	r24, r24
     6ec:	99 0b       	sbc	r25, r25
     6ee:	0e 94 73 12 	call	0x24e6	; 0x24e6 <__floatsisf>
     6f2:	20 e0       	ldi	r18, 0x00	; 0
     6f4:	30 e0       	ldi	r19, 0x00	; 0
     6f6:	48 ec       	ldi	r20, 0xC8	; 200
     6f8:	52 e4       	ldi	r21, 0x42	; 66
     6fa:	0e 94 09 12 	call	0x2412	; 0x2412 <__divsf3>
     6fe:	f8 01       	movw	r30, r16
     700:	60 83       	st	Z, r22
     702:	71 83       	std	Z+1, r23	; 0x01
     704:	82 83       	std	Z+2, r24	; 0x02
     706:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 100.0;
     708:	b6 01       	movw	r22, r12
     70a:	dd 0c       	add	r13, r13
     70c:	88 0b       	sbc	r24, r24
     70e:	99 0b       	sbc	r25, r25
     710:	0e 94 73 12 	call	0x24e6	; 0x24e6 <__floatsisf>
     714:	20 e0       	ldi	r18, 0x00	; 0
     716:	30 e0       	ldi	r19, 0x00	; 0
     718:	48 ec       	ldi	r20, 0xC8	; 200
     71a:	52 e4       	ldi	r21, 0x42	; 66
     71c:	0e 94 09 12 	call	0x2412	; 0x2412 <__divsf3>
     720:	f8 01       	movw	r30, r16
     722:	64 83       	std	Z+4, r22	; 0x04
     724:	75 83       	std	Z+5, r23	; 0x05
     726:	86 83       	std	Z+6, r24	; 0x06
     728:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 100.0;
     72a:	b5 01       	movw	r22, r10
     72c:	bb 0c       	add	r11, r11
     72e:	88 0b       	sbc	r24, r24
     730:	99 0b       	sbc	r25, r25
     732:	0e 94 73 12 	call	0x24e6	; 0x24e6 <__floatsisf>
     736:	20 e0       	ldi	r18, 0x00	; 0
     738:	30 e0       	ldi	r19, 0x00	; 0
     73a:	48 ec       	ldi	r20, 0xC8	; 200
     73c:	52 e4       	ldi	r21, 0x42	; 66
     73e:	0e 94 09 12 	call	0x2412	; 0x2412 <__divsf3>
     742:	f8 01       	movw	r30, r16
     744:	60 87       	std	Z+8, r22	; 0x08
     746:	71 87       	std	Z+9, r23	; 0x09
     748:	82 87       	std	Z+10, r24	; 0x0a
     74a:	93 87       	std	Z+11, r25	; 0x0b
    break;
     74c:	33 c0       	rjmp	.+102    	; 0x7b4 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_GRAVITY:
    /* 1m/s^2 = 100 LSB */
    xyz[0] = ((double)x) / 100.0;
     74e:	07 2e       	mov	r0, r23
     750:	00 0c       	add	r0, r0
     752:	88 0b       	sbc	r24, r24
     754:	99 0b       	sbc	r25, r25
     756:	0e 94 73 12 	call	0x24e6	; 0x24e6 <__floatsisf>
     75a:	20 e0       	ldi	r18, 0x00	; 0
     75c:	30 e0       	ldi	r19, 0x00	; 0
     75e:	48 ec       	ldi	r20, 0xC8	; 200
     760:	52 e4       	ldi	r21, 0x42	; 66
     762:	0e 94 09 12 	call	0x2412	; 0x2412 <__divsf3>
     766:	f8 01       	movw	r30, r16
     768:	60 83       	st	Z, r22
     76a:	71 83       	std	Z+1, r23	; 0x01
     76c:	82 83       	std	Z+2, r24	; 0x02
     76e:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 100.0;
     770:	b6 01       	movw	r22, r12
     772:	dd 0c       	add	r13, r13
     774:	88 0b       	sbc	r24, r24
     776:	99 0b       	sbc	r25, r25
     778:	0e 94 73 12 	call	0x24e6	; 0x24e6 <__floatsisf>
     77c:	20 e0       	ldi	r18, 0x00	; 0
     77e:	30 e0       	ldi	r19, 0x00	; 0
     780:	48 ec       	ldi	r20, 0xC8	; 200
     782:	52 e4       	ldi	r21, 0x42	; 66
     784:	0e 94 09 12 	call	0x2412	; 0x2412 <__divsf3>
     788:	f8 01       	movw	r30, r16
     78a:	64 83       	std	Z+4, r22	; 0x04
     78c:	75 83       	std	Z+5, r23	; 0x05
     78e:	86 83       	std	Z+6, r24	; 0x06
     790:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 100.0;
     792:	b5 01       	movw	r22, r10
     794:	bb 0c       	add	r11, r11
     796:	88 0b       	sbc	r24, r24
     798:	99 0b       	sbc	r25, r25
     79a:	0e 94 73 12 	call	0x24e6	; 0x24e6 <__floatsisf>
     79e:	20 e0       	ldi	r18, 0x00	; 0
     7a0:	30 e0       	ldi	r19, 0x00	; 0
     7a2:	48 ec       	ldi	r20, 0xC8	; 200
     7a4:	52 e4       	ldi	r21, 0x42	; 66
     7a6:	0e 94 09 12 	call	0x2412	; 0x2412 <__divsf3>
     7aa:	f8 01       	movw	r30, r16
     7ac:	60 87       	std	Z+8, r22	; 0x08
     7ae:	71 87       	std	Z+9, r23	; 0x09
     7b0:	82 87       	std	Z+10, r24	; 0x0a
     7b2:	93 87       	std	Z+11, r25	; 0x0b
    break;
  }

  return xyz;
}
     7b4:	c8 01       	movw	r24, r16
     7b6:	26 96       	adiw	r28, 0x06	; 6
     7b8:	0f b6       	in	r0, 0x3f	; 63
     7ba:	f8 94       	cli
     7bc:	de bf       	out	0x3e, r29	; 62
     7be:	0f be       	out	0x3f, r0	; 63
     7c0:	cd bf       	out	0x3d, r28	; 61
     7c2:	df 91       	pop	r29
     7c4:	cf 91       	pop	r28
     7c6:	1f 91       	pop	r17
     7c8:	0f 91       	pop	r16
     7ca:	ff 90       	pop	r15
     7cc:	df 90       	pop	r13
     7ce:	cf 90       	pop	r12
     7d0:	bf 90       	pop	r11
     7d2:	af 90       	pop	r10
     7d4:	08 95       	ret

000007d6 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>:
/*!
 *  @brief  Reads the sensor and returns the data as a sensors_event_t
 *  @param  event
 *  @return always returns true
 */
bool Adafruit_BNO055::getEvent(sensors_event_t *event) {
     7d6:	0f 93       	push	r16
     7d8:	1f 93       	push	r17
     7da:	cf 93       	push	r28
     7dc:	df 93       	push	r29
     7de:	cd b7       	in	r28, 0x3d	; 61
     7e0:	de b7       	in	r29, 0x3e	; 62
     7e2:	2c 97       	sbiw	r28, 0x0c	; 12
     7e4:	0f b6       	in	r0, 0x3f	; 63
     7e6:	f8 94       	cli
     7e8:	de bf       	out	0x3e, r29	; 62
     7ea:	0f be       	out	0x3f, r0	; 63
     7ec:	cd bf       	out	0x3d, r28	; 61
     7ee:	8b 01       	movw	r16, r22
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
     7f0:	20 e2       	ldi	r18, 0x20	; 32
     7f2:	fb 01       	movw	r30, r22
     7f4:	11 92       	st	Z+, r1
     7f6:	2a 95       	dec	r18
     7f8:	e9 f7       	brne	.-6      	; 0x7f4 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t+0x1e>

  event->version = sizeof(sensors_event_t);
     7fa:	40 e2       	ldi	r20, 0x20	; 32
     7fc:	50 e0       	ldi	r21, 0x00	; 0
     7fe:	60 e0       	ldi	r22, 0x00	; 0
     800:	70 e0       	ldi	r23, 0x00	; 0
     802:	f8 01       	movw	r30, r16
     804:	40 83       	st	Z, r20
     806:	51 83       	std	Z+1, r21	; 0x01
     808:	62 83       	std	Z+2, r22	; 0x02
     80a:	73 83       	std	Z+3, r23	; 0x03
  event->sensor_id = _sensorID;
     80c:	fc 01       	movw	r30, r24
     80e:	46 81       	ldd	r20, Z+6	; 0x06
     810:	57 81       	ldd	r21, Z+7	; 0x07
     812:	60 85       	ldd	r22, Z+8	; 0x08
     814:	71 85       	ldd	r23, Z+9	; 0x09
     816:	f8 01       	movw	r30, r16
     818:	44 83       	std	Z+4, r20	; 0x04
     81a:	55 83       	std	Z+5, r21	; 0x05
     81c:	66 83       	std	Z+6, r22	; 0x06
     81e:	77 83       	std	Z+7, r23	; 0x07
  event->type = SENSOR_TYPE_ORIENTATION;
     820:	43 e0       	ldi	r20, 0x03	; 3
     822:	50 e0       	ldi	r21, 0x00	; 0
     824:	60 e0       	ldi	r22, 0x00	; 0
     826:	70 e0       	ldi	r23, 0x00	; 0
     828:	40 87       	std	Z+8, r20	; 0x08
     82a:	51 87       	std	Z+9, r21	; 0x09
     82c:	62 87       	std	Z+10, r22	; 0x0a
     82e:	73 87       	std	Z+11, r23	; 0x0b
  //event->timestamp = millis();

  /* Get a Euler angle sample for orientation */
  AdafruitImu::Vector<3> euler = getVector(Adafruit_BNO055::VECTOR_EULER);
     830:	4a e1       	ldi	r20, 0x1A	; 26
     832:	bc 01       	movw	r22, r24
     834:	ce 01       	movw	r24, r28
     836:	01 96       	adiw	r24, 0x01	; 1
     838:	38 de       	rcall	.-912    	; 0x4aa <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
  event->orientation.x = euler.x();
     83a:	89 81       	ldd	r24, Y+1	; 0x01
     83c:	9a 81       	ldd	r25, Y+2	; 0x02
     83e:	ab 81       	ldd	r26, Y+3	; 0x03
     840:	bc 81       	ldd	r27, Y+4	; 0x04
     842:	f8 01       	movw	r30, r16
     844:	80 8b       	std	Z+16, r24	; 0x10
     846:	91 8b       	std	Z+17, r25	; 0x11
     848:	a2 8b       	std	Z+18, r26	; 0x12
     84a:	b3 8b       	std	Z+19, r27	; 0x13
  event->orientation.y = euler.y();
     84c:	8d 81       	ldd	r24, Y+5	; 0x05
     84e:	9e 81       	ldd	r25, Y+6	; 0x06
     850:	af 81       	ldd	r26, Y+7	; 0x07
     852:	b8 85       	ldd	r27, Y+8	; 0x08
     854:	84 8b       	std	Z+20, r24	; 0x14
     856:	95 8b       	std	Z+21, r25	; 0x15
     858:	a6 8b       	std	Z+22, r26	; 0x16
     85a:	b7 8b       	std	Z+23, r27	; 0x17
  event->orientation.z = euler.z();
     85c:	89 85       	ldd	r24, Y+9	; 0x09
     85e:	9a 85       	ldd	r25, Y+10	; 0x0a
     860:	ab 85       	ldd	r26, Y+11	; 0x0b
     862:	bc 85       	ldd	r27, Y+12	; 0x0c
     864:	80 8f       	std	Z+24, r24	; 0x18
     866:	91 8f       	std	Z+25, r25	; 0x19
     868:	a2 8f       	std	Z+26, r26	; 0x1a
     86a:	b3 8f       	std	Z+27, r27	; 0x1b

  return true;
}
     86c:	81 e0       	ldi	r24, 0x01	; 1
     86e:	2c 96       	adiw	r28, 0x0c	; 12
     870:	0f b6       	in	r0, 0x3f	; 63
     872:	f8 94       	cli
     874:	de bf       	out	0x3e, r29	; 62
     876:	0f be       	out	0x3f, r0	; 63
     878:	cd bf       	out	0x3d, r28	; 61
     87a:	df 91       	pop	r29
     87c:	cf 91       	pop	r28
     87e:	1f 91       	pop	r17
     880:	0f 91       	pop	r16
     882:	08 95       	ret

00000884 <_Z14RunPingCommandPKhh>:
#include <stddef.h>

uint8_t* const SendDataBuffer = (uint8_t*)(&EtherComm::buffer[2]);

void RunPingCommand(const uint8_t* data, uint8_t len){
  if(len == 1){
     884:	61 30       	cpi	r22, 0x01	; 1
     886:	49 f4       	brne	.+18     	; 0x89a <_Z14RunPingCommandPKhh+0x16>
     888:	fc 01       	movw	r30, r24
    SendDataBuffer[0] = data[0];
     88a:	80 81       	ld	r24, Z
     88c:	e0 91 e5 02 	lds	r30, 0x02E5	; 0x8002e5 <_ZL14SendDataBuffer>
     890:	f0 91 e6 02 	lds	r31, 0x02E6	; 0x8002e6 <_ZL14SendDataBuffer+0x1>
     894:	80 83       	st	Z, r24
    EtherComm::SendCommand(CMD_Ping, 1);
     896:	80 e0       	ldi	r24, 0x00	; 0
     898:	d9 c6       	rjmp	.+3506   	; 0x164c <_ZN9EtherComm11SendCommandEhh>
     89a:	08 95       	ret

0000089c <_Z14RunEchoCommandPKhh>:
  }
}

void RunEchoCommand(const uint8_t* data, uint8_t len){
  uint8_t* index = SendDataBuffer;
     89c:	40 91 e5 02 	lds	r20, 0x02E5	; 0x8002e5 <_ZL14SendDataBuffer>
     8a0:	30 91 e6 02 	lds	r19, 0x02E6	; 0x8002e6 <_ZL14SendDataBuffer+0x1>
  uint8_t dataLen = len;
  while(len-- > 0){
     8a4:	2f ef       	ldi	r18, 0xFF	; 255
     8a6:	26 0f       	add	r18, r22
     8a8:	66 23       	and	r22, r22
     8aa:	41 f0       	breq	.+16     	; 0x8bc <_Z14RunEchoCommandPKhh+0x20>
     8ac:	a8 2f       	mov	r26, r24
     8ae:	b9 2f       	mov	r27, r25
     8b0:	e4 2f       	mov	r30, r20
     8b2:	f3 2f       	mov	r31, r19
    *(index++) = *(data++);
     8b4:	8d 91       	ld	r24, X+
     8b6:	81 93       	st	Z+, r24
}

void RunEchoCommand(const uint8_t* data, uint8_t len){
  uint8_t* index = SendDataBuffer;
  uint8_t dataLen = len;
  while(len-- > 0){
     8b8:	21 50       	subi	r18, 0x01	; 1
     8ba:	e0 f7       	brcc	.-8      	; 0x8b4 <_Z14RunEchoCommandPKhh+0x18>
    *(index++) = *(data++);
  }
  
  EtherComm::SendCommand(CMD_Echo, dataLen);
     8bc:	81 e0       	ldi	r24, 0x01	; 1
     8be:	c6 c6       	rjmp	.+3468   	; 0x164c <_ZN9EtherComm11SendCommandEhh>
     8c0:	08 95       	ret

000008c2 <_Z13RunLedCommandPKhh>:
}

void RunLedCommand(const uint8_t* data, uint8_t len){
	if(len == 1){
     8c2:	61 30       	cpi	r22, 0x01	; 1
     8c4:	51 f4       	brne	.+20     	; 0x8da <_Z13RunLedCommandPKhh+0x18>
		uint8_t state = *data;
     8c6:	fc 01       	movw	r30, r24
     8c8:	90 81       	ld	r25, Z
		if(state <= 1){
     8ca:	92 30       	cpi	r25, 0x02	; 2
     8cc:	30 f4       	brcc	.+12     	; 0x8da <_Z13RunLedCommandPKhh+0x18>
			rov.SetLed(state > 0);
     8ce:	81 e0       	ldi	r24, 0x01	; 1
     8d0:	91 11       	cpse	r25, r1
     8d2:	01 c0       	rjmp	.+2      	; 0x8d6 <_Z13RunLedCommandPKhh+0x14>
     8d4:	80 e0       	ldi	r24, 0x00	; 0
     8d6:	0c 94 fe 10 	jmp	0x21fc	; 0x21fc <_ZN5Robot6SetLedEb>
     8da:	08 95       	ret

000008dc <_Z22RunUpdateDeviceCommandPKhh>:
		}
	}
}

void RunUpdateDeviceCommand(const uint8_t* data, uint8_t len){
	if(len > 0){
     8dc:	66 23       	and	r22, r22
     8de:	c1 f0       	breq	.+48     	; 0x910 <_Z22RunUpdateDeviceCommandPKhh+0x34>
		if(Robot::devices[data[0]] != NULL){
     8e0:	dc 01       	movw	r26, r24
     8e2:	ec 91       	ld	r30, X
     8e4:	f0 e0       	ldi	r31, 0x00	; 0
     8e6:	ee 0f       	add	r30, r30
     8e8:	ff 1f       	adc	r31, r31
     8ea:	ee 5b       	subi	r30, 0xBE	; 190
     8ec:	f9 4f       	sbci	r31, 0xF9	; 249
     8ee:	a0 81       	ld	r26, Z
     8f0:	b1 81       	ldd	r27, Z+1	; 0x01
     8f2:	10 97       	sbiw	r26, 0x00	; 0
     8f4:	69 f0       	breq	.+26     	; 0x910 <_Z22RunUpdateDeviceCommandPKhh+0x34>
     8f6:	46 2f       	mov	r20, r22
     8f8:	bc 01       	movw	r22, r24
			Robot::devices[data[0]]->Update(data + 1, len - 1);
     8fa:	41 50       	subi	r20, 0x01	; 1
     8fc:	6f 5f       	subi	r22, 0xFF	; 255
     8fe:	7f 4f       	sbci	r23, 0xFF	; 255
     900:	ed 91       	ld	r30, X+
     902:	fc 91       	ld	r31, X
     904:	11 97       	sbiw	r26, 0x01	; 1
     906:	01 90       	ld	r0, Z+
     908:	f0 81       	ld	r31, Z
     90a:	e0 2d       	mov	r30, r0
     90c:	cd 01       	movw	r24, r26
     90e:	19 95       	eicall
     910:	08 95       	ret

00000912 <_ZN9EtherComm15CommandReceivedEhPKhh>:
		}
	}
}

void EtherComm::CommandReceived(uint8_t command, const uint8_t* data, uint8_t len){
     912:	9b 01       	movw	r18, r22
  switch(command){
     914:	81 30       	cpi	r24, 0x01	; 1
     916:	51 f0       	breq	.+20     	; 0x92c <_ZN9EtherComm15CommandReceivedEhPKhh+0x1a>
     918:	28 f0       	brcs	.+10     	; 0x924 <_ZN9EtherComm15CommandReceivedEhPKhh+0x12>
     91a:	82 30       	cpi	r24, 0x02	; 2
     91c:	59 f0       	breq	.+22     	; 0x934 <_ZN9EtherComm15CommandReceivedEhPKhh+0x22>
     91e:	83 30       	cpi	r24, 0x03	; 3
     920:	69 f0       	breq	.+26     	; 0x93c <_ZN9EtherComm15CommandReceivedEhPKhh+0x2a>
     922:	08 95       	ret
    case CMD_Ping: RunPingCommand(data, len); break;
     924:	64 2f       	mov	r22, r20
     926:	c9 01       	movw	r24, r18
     928:	ad cf       	rjmp	.-166    	; 0x884 <_Z14RunPingCommandPKhh>
     92a:	08 95       	ret
    case CMD_Echo: RunEchoCommand(data, len); break;
     92c:	64 2f       	mov	r22, r20
     92e:	c9 01       	movw	r24, r18
     930:	b5 cf       	rjmp	.-150    	; 0x89c <_Z14RunEchoCommandPKhh>
     932:	08 95       	ret
	case CMD_Led: RunLedCommand(data, len); break;
     934:	64 2f       	mov	r22, r20
     936:	c9 01       	movw	r24, r18
     938:	c4 cf       	rjmp	.-120    	; 0x8c2 <_Z13RunLedCommandPKhh>
     93a:	08 95       	ret
	case CMD_UpdateDevice: RunUpdateDeviceCommand(data, len); break;
     93c:	64 2f       	mov	r22, r20
     93e:	c9 01       	movw	r24, r18
     940:	cd cf       	rjmp	.-102    	; 0x8dc <_Z22RunUpdateDeviceCommandPKhh>
     942:	08 95       	ret

00000944 <_GLOBAL__sub_I__Z14RunPingCommandPKhh>:
     944:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
#include "EtherComm.h"
#include "Robot.h"
#include "Commands.h"
#include <stddef.h>

uint8_t* const SendDataBuffer = (uint8_t*)(&EtherComm::buffer[2]);
     948:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
     94c:	02 96       	adiw	r24, 0x02	; 2
     94e:	90 93 e6 02 	sts	0x02E6, r25	; 0x8002e6 <_ZL14SendDataBuffer+0x1>
     952:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <_ZL14SendDataBuffer>
     956:	08 95       	ret

00000958 <_ZL10enableChipv>:
static Register* selectPort;
static uint8_t selectPin;

static void enableChip () {
	//cli();
	SetLow(*selectPort, selectPin); //digitalWrite(selectPin, LOW);
     958:	e0 91 eb 02 	lds	r30, 0x02EB	; 0x8002eb <_ZL10selectPort>
     95c:	f0 91 ec 02 	lds	r31, 0x02EC	; 0x8002ec <_ZL10selectPort+0x1>
     960:	90 81       	ld	r25, Z
     962:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <_ZL9selectPin>
     966:	80 95       	com	r24
     968:	89 23       	and	r24, r25
     96a:	80 83       	st	Z, r24
     96c:	08 95       	ret

0000096e <_ZL11disableChipv>:
}

static void disableChip () {
	SetHigh(*selectPort, selectPin); //digitalWrite(selectPin, HIGH);
     96e:	e0 91 eb 02 	lds	r30, 0x02EB	; 0x8002eb <_ZL10selectPort>
     972:	f0 91 ec 02 	lds	r31, 0x02EC	; 0x8002ec <_ZL10selectPort+0x1>
     976:	90 81       	ld	r25, Z
     978:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <_ZL9selectPin>
     97c:	89 2b       	or	r24, r25
     97e:	80 83       	st	Z, r24
     980:	08 95       	ret

00000982 <_ZL6readOphh>:

	SetOutput(csDDR, selectPin);
	disableChip();
}

static uint8_t readOp (uint8_t op, uint8_t address) {
     982:	cf 93       	push	r28
     984:	df 93       	push	r29
     986:	d8 2f       	mov	r29, r24
     988:	c6 2f       	mov	r28, r22
    enableChip();
     98a:	e6 df       	rcall	.-52     	; 0x958 <_ZL10enableChipv>
    SPI.write8(op | (address & ADDR_MASK));
     98c:	8c 2f       	mov	r24, r28
     98e:	cf 71       	andi	r28, 0x1F	; 31
     990:	cd 2b       	or	r28, r29
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     992:	ce bd       	out	0x2e, r28	; 46
		asm volatile("nop");
     994:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     996:	0d b4       	in	r0, 0x2d	; 45
     998:	07 fe       	sbrs	r0, 7
     99a:	fd cf       	rjmp	.-6      	; 0x996 <_ZL6readOphh+0x14>
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     99c:	1e bc       	out	0x2e, r1	; 46
		asm volatile("nop");
     99e:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     9a0:	0d b4       	in	r0, 0x2d	; 45
     9a2:	07 fe       	sbrs	r0, 7
     9a4:	fd cf       	rjmp	.-6      	; 0x9a0 <_ZL6readOphh+0x1e>
	}

	//write8, excepts also returns the received byte
	static uint8_t read_write8(uint8_t data){
		write8(data);
		return SPDR;
     9a6:	ce b5       	in	r28, 0x2e	; 46
    uint8_t result = SPI.read_write8(0x00);
    if (address & 0x80)
     9a8:	88 23       	and	r24, r24
     9aa:	34 f4       	brge	.+12     	; 0x9b8 <_ZL6readOphh+0x36>
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     9ac:	1e bc       	out	0x2e, r1	; 46
		asm volatile("nop");
     9ae:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     9b0:	0d b4       	in	r0, 0x2d	; 45
     9b2:	07 fe       	sbrs	r0, 7
     9b4:	fd cf       	rjmp	.-6      	; 0x9b0 <_ZL6readOphh+0x2e>
        result = SPI.read_write8(0x00);
    disableChip();
     9b6:	ce b5       	in	r28, 0x2e	; 46
     9b8:	da df       	rcall	.-76     	; 0x96e <_ZL11disableChipv>
    return result;
}
     9ba:	8c 2f       	mov	r24, r28
     9bc:	df 91       	pop	r29
     9be:	cf 91       	pop	r28
     9c0:	08 95       	ret

000009c2 <_ZL7writeOphhh>:

static void writeOp (uint8_t op, uint8_t address, uint8_t data) {
     9c2:	1f 93       	push	r17
     9c4:	cf 93       	push	r28
     9c6:	df 93       	push	r29
     9c8:	c8 2f       	mov	r28, r24
     9ca:	d6 2f       	mov	r29, r22
     9cc:	14 2f       	mov	r17, r20
    enableChip();
     9ce:	c4 df       	rcall	.-120    	; 0x958 <_ZL10enableChipv>
    SPI.write8(op | (address & ADDR_MASK));
     9d0:	df 71       	andi	r29, 0x1F	; 31
     9d2:	cd 2b       	or	r28, r29
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     9d4:	ce bd       	out	0x2e, r28	; 46
		asm volatile("nop");
     9d6:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     9d8:	0d b4       	in	r0, 0x2d	; 45
     9da:	07 fe       	sbrs	r0, 7
     9dc:	fd cf       	rjmp	.-6      	; 0x9d8 <_ZL7writeOphhh+0x16>
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     9de:	1e bd       	out	0x2e, r17	; 46
		asm volatile("nop");
     9e0:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     9e2:	0d b4       	in	r0, 0x2d	; 45
     9e4:	07 fe       	sbrs	r0, 7
    SPI.write8(data);
    disableChip();
     9e6:	fd cf       	rjmp	.-6      	; 0x9e2 <_ZL7writeOphhh+0x20>
     9e8:	c2 df       	rcall	.-124    	; 0x96e <_ZL11disableChipv>
}
     9ea:	df 91       	pop	r29
     9ec:	cf 91       	pop	r28
     9ee:	1f 91       	pop	r17
     9f0:	08 95       	ret

000009f2 <_ZL7readBufjPh>:

static void readBuf(uint16_t len, uint8_t* data) {
     9f2:	0f 93       	push	r16
     9f4:	1f 93       	push	r17
     9f6:	cf 93       	push	r28
     9f8:	df 93       	push	r29
     9fa:	ec 01       	movw	r28, r24
     9fc:	8b 01       	movw	r16, r22
    enableChip();
     9fe:	ac df       	rcall	.-168    	; 0x958 <_ZL10enableChipv>
    if (len != 0) {
     a00:	20 97       	sbiw	r28, 0x00	; 0
     a02:	99 f0       	breq	.+38     	; 0xa2a <_ZL7readBufjPh+0x38>
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     a04:	8a e3       	ldi	r24, 0x3A	; 58
     a06:	8e bd       	out	0x2e, r24	; 46
		asm volatile("nop");
     a08:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     a0a:	0d b4       	in	r0, 0x2d	; 45
     a0c:	07 fe       	sbrs	r0, 7
     a0e:	fd cf       	rjmp	.-6      	; 0xa0a <_ZL7readBufjPh+0x18>
     a10:	f8 01       	movw	r30, r16
     a12:	b8 01       	movw	r22, r16
     a14:	6c 0f       	add	r22, r28
     a16:	7d 1f       	adc	r23, r29
	static void read(void *buf, uint16_t nbyte, uint8_t dataSend = 0){
		if(nbyte == 0) return;
		
		uint8_t* buff = (uint8_t*)buf;
		while(nbyte--){
			SPDR = dataSend;
     a18:	1e bc       	out	0x2e, r1	; 46
			//asm volatile("nop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\n");
			while(!(SPSR & _BV(SPIF)));
     a1a:	0d b4       	in	r0, 0x2d	; 45
     a1c:	07 fe       	sbrs	r0, 7
     a1e:	fd cf       	rjmp	.-6      	; 0xa1a <_ZL7readBufjPh+0x28>
			*buff++ = SPDR;
     a20:	9e b5       	in	r25, 0x2e	; 46
     a22:	91 93       	st	Z+, r25
		
	static void read(void *buf, uint16_t nbyte, uint8_t dataSend = 0){
		if(nbyte == 0) return;
		
		uint8_t* buff = (uint8_t*)buf;
		while(nbyte--){
     a24:	6e 17       	cp	r22, r30
     a26:	7f 07       	cpc	r23, r31
        SPI.write8(ENC28J60_READ_BUF_MEM);
		SPI.read(data, len);
    }
    disableChip();
     a28:	b9 f7       	brne	.-18     	; 0xa18 <_ZL7readBufjPh+0x26>
     a2a:	a1 df       	rcall	.-190    	; 0x96e <_ZL11disableChipv>
}
     a2c:	df 91       	pop	r29
     a2e:	cf 91       	pop	r28
     a30:	1f 91       	pop	r17
     a32:	0f 91       	pop	r16
     a34:	08 95       	ret

00000a36 <_ZL7SetBankh>:
        SPI.write(data, len);
    }
    disableChip();
}

static void SetBank (uint8_t address) {
     a36:	1f 93       	push	r17
     a38:	cf 93       	push	r28
     a3a:	df 93       	push	r29
     a3c:	18 2f       	mov	r17, r24
     a3e:	10 76       	andi	r17, 0x60	; 96
    if ((address & BANK_MASK) != Enc28j60Bank) {
     a40:	c1 2f       	mov	r28, r17
     a42:	d0 e0       	ldi	r29, 0x00	; 0
     a44:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <_ZL12Enc28j60Bank>
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	c8 17       	cp	r28, r24
     a4c:	d9 07       	cpc	r29, r25
     a4e:	a1 f0       	breq	.+40     	; 0xa78 <_ZL7SetBankh+0x42>
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_BSEL1|ECON1_BSEL0);
     a50:	43 e0       	ldi	r20, 0x03	; 3
     a52:	6f e1       	ldi	r22, 0x1F	; 31
     a54:	80 ea       	ldi	r24, 0xA0	; 160
     a56:	b5 df       	rcall	.-150    	; 0x9c2 <_ZL7writeOphhh>
        Enc28j60Bank = address & BANK_MASK;
     a58:	10 93 ed 02 	sts	0x02ED, r17	; 0x8002ed <_ZL12Enc28j60Bank>
        writeOp(ENC28J60_BIT_FIELD_SET, ECON1, Enc28j60Bank>>5);
     a5c:	ae 01       	movw	r20, r28
     a5e:	55 95       	asr	r21
     a60:	47 95       	ror	r20
     a62:	55 95       	asr	r21
     a64:	47 95       	ror	r20
     a66:	55 95       	asr	r21
     a68:	47 95       	ror	r20
     a6a:	55 95       	asr	r21
     a6c:	47 95       	ror	r20
     a6e:	55 95       	asr	r21
     a70:	47 95       	ror	r20
     a72:	6f e1       	ldi	r22, 0x1F	; 31
     a74:	80 e8       	ldi	r24, 0x80	; 128
     a76:	a5 df       	rcall	.-182    	; 0x9c2 <_ZL7writeOphhh>
    }
}
     a78:	df 91       	pop	r29
     a7a:	cf 91       	pop	r28
     a7c:	1f 91       	pop	r17
     a7e:	08 95       	ret

00000a80 <_ZL11readRegByteh>:

static uint8_t readRegByte (uint8_t address) {
     a80:	cf 93       	push	r28
     a82:	c8 2f       	mov	r28, r24
    SetBank(address);
     a84:	d8 df       	rcall	.-80     	; 0xa36 <_ZL7SetBankh>
    return readOp(ENC28J60_READ_CTRL_REG, address);
     a86:	6c 2f       	mov	r22, r28
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	7b df       	rcall	.-266    	; 0x982 <_ZL6readOphh>
}
     a8c:	cf 91       	pop	r28
     a8e:	08 95       	ret

00000a90 <_ZL12writeRegBytehh>:

static void writeRegByte (uint8_t address, uint8_t data) {
     a90:	cf 93       	push	r28
     a92:	df 93       	push	r29
     a94:	c8 2f       	mov	r28, r24
     a96:	d6 2f       	mov	r29, r22
    SetBank(address);
     a98:	ce df       	rcall	.-100    	; 0xa36 <_ZL7SetBankh>
    writeOp(ENC28J60_WRITE_CTRL_REG, address, data);
     a9a:	4d 2f       	mov	r20, r29
     a9c:	6c 2f       	mov	r22, r28
     a9e:	80 e4       	ldi	r24, 0x40	; 64
     aa0:	90 df       	rcall	.-224    	; 0x9c2 <_ZL7writeOphhh>
}
     aa2:	df 91       	pop	r29
     aa4:	cf 91       	pop	r28
     aa6:	08 95       	ret

00000aa8 <_ZL8writeReghj>:

static void writeReg(uint8_t address, uint16_t data) {
     aa8:	cf 93       	push	r28
     aaa:	df 93       	push	r29
     aac:	c8 2f       	mov	r28, r24
     aae:	d7 2f       	mov	r29, r23
    writeRegByte(address, data);
     ab0:	ef df       	rcall	.-34     	; 0xa90 <_ZL12writeRegBytehh>
    writeRegByte(address + 1, data >> 8);
     ab2:	6d 2f       	mov	r22, r29
     ab4:	81 e0       	ldi	r24, 0x01	; 1
     ab6:	8c 0f       	add	r24, r28
     ab8:	eb df       	rcall	.-42     	; 0xa90 <_ZL12writeRegBytehh>
}
     aba:	df 91       	pop	r29
     abc:	cf 91       	pop	r28
     abe:	08 95       	ret

00000ac0 <_ZN8ENC28J607initSPIERVh>:
static void disableChip () {
	SetHigh(*selectPort, selectPin); //digitalWrite(selectPin, HIGH);
	//sei();
}

void ENC28J60::initSPI (Register& csDDR) {
     ac0:	fc 01       	movw	r30, r24

class SPI{
public:
	static void begin(uint8_t clock = SPI_CLOCK_DIV2){
		//SPI_DIR |= SS;
		SPI_DIR |= SPI_MOSI | SPI_SCK | SPI_SS; //Not sure why, but SS pin requires to be set as output even when not being used.
     ac2:	94 b1       	in	r25, 0x04	; 4
     ac4:	97 60       	ori	r25, 0x07	; 7
     ac6:	94 b9       	out	0x04, r25	; 4
		SPI_DIR &= ~(SPI_MISO);
     ac8:	23 98       	cbi	0x04, 3	; 4
		//disableCS();

		SPSR |= (clock >> 2);
     aca:	9d b5       	in	r25, 0x2d	; 45
     acc:	91 60       	ori	r25, 0x01	; 1
     ace:	9d bd       	out	0x2d, r25	; 45
		SPCR |= _BV(MSTR) | _BV(SPE) | (clock & 0x03);
     ad0:	9c b5       	in	r25, 0x2c	; 44
     ad2:	90 65       	ori	r25, 0x50	; 80
     ad4:	9c bd       	out	0x2c, r25	; 44
	SPI.begin(SPI_CLOCK_DIV2);

	SetOutput(csDDR, selectPin);
     ad6:	80 81       	ld	r24, Z
     ad8:	90 91 ea 02 	lds	r25, 0x02EA	; 0x8002ea <_ZL9selectPin>
     adc:	98 2b       	or	r25, r24
     ade:	90 83       	st	Z, r25
	disableChip();
     ae0:	46 cf       	rjmp	.-372    	; 0x96e <_ZL11disableChipv>
     ae2:	08 95       	ret

00000ae4 <_ZN8ENC28J6010initializeEjPKhRVhS3_h>:
    writeReg(MIWR, data);
    while (readRegByte(MISTAT) & MISTAT_BUSY)
        ;
}

uint8_t ENC28J60::initialize (uint16_t size, const uint8_t* macaddr, Register& csDDR, Register& csPort, uint8_t csPin) {
     ae4:	0f 93       	push	r16
     ae6:	cf 93       	push	r28
     ae8:	df 93       	push	r29
     aea:	eb 01       	movw	r28, r22
    bufferSize = size;
     aec:	90 93 ef 02 	sts	0x02EF, r25	; 0x8002ef <_ZN8ENC28J6010bufferSizeE+0x1>
     af0:	80 93 ee 02 	sts	0x02EE, r24	; 0x8002ee <_ZN8ENC28J6010bufferSizeE>
	selectPin = csPin;
     af4:	00 93 ea 02 	sts	0x02EA, r16	; 0x8002ea <_ZL9selectPin>
	selectPort = &csPort;
     af8:	30 93 ec 02 	sts	0x02EC, r19	; 0x8002ec <_ZL10selectPort+0x1>
     afc:	20 93 eb 02 	sts	0x02EB, r18	; 0x8002eb <_ZL10selectPort>
    initSPI(csDDR);
     b00:	ca 01       	movw	r24, r20
     b02:	de df       	rcall	.-68     	; 0xac0 <_ZN8ENC28J607initSPIERVh>

    writeOp(ENC28J60_SOFT_RESET, 0, ENC28J60_SOFT_RESET);
     b04:	4f ef       	ldi	r20, 0xFF	; 255
     b06:	60 e0       	ldi	r22, 0x00	; 0
     b08:	8f ef       	ldi	r24, 0xFF	; 255
     b0a:	5b df       	rcall	.-330    	; 0x9c2 <_ZL7writeOphhh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b0c:	8f e3       	ldi	r24, 0x3F	; 63
     b0e:	9f e1       	ldi	r25, 0x1F	; 31
     b10:	01 97       	sbiw	r24, 0x01	; 1
     b12:	f1 f7       	brne	.-4      	; 0xb10 <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0x2c>
     b14:	00 c0       	rjmp	.+0      	; 0xb16 <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0x32>
     b16:	00 00       	nop
	_delay_ms(2);
    while (!readOp(ENC28J60_READ_CTRL_REG, ESTAT) & ESTAT_CLKRDY)
     b18:	6d e1       	ldi	r22, 0x1D	; 29
     b1a:	80 e0       	ldi	r24, 0x00	; 0
     b1c:	32 df       	rcall	.-412    	; 0x982 <_ZL6readOphh>
     b1e:	88 23       	and	r24, r24
     b20:	d9 f3       	breq	.-10     	; 0xb18 <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0x34>
        ;

    writeReg(ERXST, RXSTART_INIT);
     b22:	60 e0       	ldi	r22, 0x00	; 0
     b24:	70 e0       	ldi	r23, 0x00	; 0
     b26:	88 e0       	ldi	r24, 0x08	; 8
     b28:	bf df       	rcall	.-130    	; 0xaa8 <_ZL8writeReghj>
    writeReg(ERXRDPT, RXSTART_INIT);
     b2a:	60 e0       	ldi	r22, 0x00	; 0
     b2c:	70 e0       	ldi	r23, 0x00	; 0
     b2e:	8c e0       	ldi	r24, 0x0C	; 12
     b30:	bb df       	rcall	.-138    	; 0xaa8 <_ZL8writeReghj>
    writeReg(ERXND, RXSTOP_INIT);
     b32:	6f ef       	ldi	r22, 0xFF	; 255
     b34:	7b e0       	ldi	r23, 0x0B	; 11
     b36:	8a e0       	ldi	r24, 0x0A	; 10
     b38:	b7 df       	rcall	.-146    	; 0xaa8 <_ZL8writeReghj>
    writeReg(ETXST, TXSTART_INIT);
     b3a:	60 e0       	ldi	r22, 0x00	; 0
     b3c:	7c e0       	ldi	r23, 0x0C	; 12
     b3e:	84 e0       	ldi	r24, 0x04	; 4
     b40:	b3 df       	rcall	.-154    	; 0xaa8 <_ZL8writeReghj>
    writeReg(ETXND, TXSTOP_INIT);
     b42:	6f ef       	ldi	r22, 0xFF	; 255
     b44:	71 e1       	ldi	r23, 0x11	; 17
     b46:	86 e0       	ldi	r24, 0x06	; 6
     b48:	af df       	rcall	.-162    	; 0xaa8 <_ZL8writeReghj>

    writeRegByte(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN|ERXFCON_PMEN|ERXFCON_BCEN);
     b4a:	61 eb       	ldi	r22, 0xB1	; 177
     b4c:	88 e3       	ldi	r24, 0x38	; 56
     b4e:	a0 df       	rcall	.-192    	; 0xa90 <_ZL12writeRegBytehh>
    writeReg(EPMM0, 0x303f);
     b50:	6f e3       	ldi	r22, 0x3F	; 63
     b52:	70 e3       	ldi	r23, 0x30	; 48
     b54:	88 e2       	ldi	r24, 0x28	; 40
     b56:	a8 df       	rcall	.-176    	; 0xaa8 <_ZL8writeReghj>
    writeReg(EPMCS, 0xf7f9);
     b58:	69 ef       	ldi	r22, 0xF9	; 249
     b5a:	77 ef       	ldi	r23, 0xF7	; 247
     b5c:	80 e3       	ldi	r24, 0x30	; 48
     b5e:	a4 df       	rcall	.-184    	; 0xaa8 <_ZL8writeReghj>
    writeRegByte(MACON1, MACON1_MARXEN);
     b60:	61 e0       	ldi	r22, 0x01	; 1
     b62:	80 ec       	ldi	r24, 0xC0	; 192
     b64:	95 df       	rcall	.-214    	; 0xa90 <_ZL12writeRegBytehh>
    writeOp(ENC28J60_BIT_FIELD_SET, MACON3,
            MACON3_PADCFG0|MACON3_TXCRCEN|MACON3_FRMLNEN);
     b66:	42 e3       	ldi	r20, 0x32	; 50
     b68:	62 ec       	ldi	r22, 0xC2	; 194
     b6a:	80 e8       	ldi	r24, 0x80	; 128
     b6c:	2a df       	rcall	.-428    	; 0x9c2 <_ZL7writeOphhh>
    writeReg(MAIPG, 0x0C12);
     b6e:	62 e1       	ldi	r22, 0x12	; 18
     b70:	7c e0       	ldi	r23, 0x0C	; 12
     b72:	86 ec       	ldi	r24, 0xC6	; 198
    writeRegByte(MABBIPG, 0x12);
     b74:	99 df       	rcall	.-206    	; 0xaa8 <_ZL8writeReghj>
     b76:	62 e1       	ldi	r22, 0x12	; 18
     b78:	84 ec       	ldi	r24, 0xC4	; 196
    writeReg(MAMXFL, MAX_FRAMELEN);
     b7a:	8a df       	rcall	.-236    	; 0xa90 <_ZL12writeRegBytehh>
     b7c:	6c ed       	ldi	r22, 0xDC	; 220
     b7e:	75 e0       	ldi	r23, 0x05	; 5
    writeRegByte(MAADR5, macaddr[0]);
     b80:	8a ec       	ldi	r24, 0xCA	; 202
     b82:	92 df       	rcall	.-220    	; 0xaa8 <_ZL8writeReghj>
     b84:	68 81       	ld	r22, Y
    writeRegByte(MAADR4, macaddr[1]);
     b86:	84 ee       	ldi	r24, 0xE4	; 228
     b88:	83 df       	rcall	.-250    	; 0xa90 <_ZL12writeRegBytehh>
     b8a:	69 81       	ldd	r22, Y+1	; 0x01
    writeRegByte(MAADR3, macaddr[2]);
     b8c:	85 ee       	ldi	r24, 0xE5	; 229
     b8e:	80 df       	rcall	.-256    	; 0xa90 <_ZL12writeRegBytehh>
    writeRegByte(MAADR2, macaddr[3]);
     b90:	6a 81       	ldd	r22, Y+2	; 0x02
     b92:	82 ee       	ldi	r24, 0xE2	; 226
     b94:	7d df       	rcall	.-262    	; 0xa90 <_ZL12writeRegBytehh>
    writeRegByte(MAADR1, macaddr[4]);
     b96:	6b 81       	ldd	r22, Y+3	; 0x03
     b98:	83 ee       	ldi	r24, 0xE3	; 227
     b9a:	7a df       	rcall	.-268    	; 0xa90 <_ZL12writeRegBytehh>
    writeRegByte(MAADR0, macaddr[5]);
     b9c:	6c 81       	ldd	r22, Y+4	; 0x04
     b9e:	80 ee       	ldi	r24, 0xE0	; 224
     ba0:	77 df       	rcall	.-274    	; 0xa90 <_ZL12writeRegBytehh>
    writeRegByte(MICMD, 0x00);
    return readRegByte(MIRD+1);
}

static void writePhy (uint8_t address, uint16_t data) {
    writeRegByte(MIREGADR, address);
     ba2:	6d 81       	ldd	r22, Y+5	; 0x05
     ba4:	81 ee       	ldi	r24, 0xE1	; 225
     ba6:	74 df       	rcall	.-280    	; 0xa90 <_ZL12writeRegBytehh>
    writeReg(MIWR, data);
     ba8:	60 e1       	ldi	r22, 0x10	; 16
     baa:	84 ed       	ldi	r24, 0xD4	; 212
     bac:	71 df       	rcall	.-286    	; 0xa90 <_ZL12writeRegBytehh>
     bae:	60 e0       	ldi	r22, 0x00	; 0
     bb0:	71 e0       	ldi	r23, 0x01	; 1
    while (readRegByte(MISTAT) & MISTAT_BUSY)
     bb2:	86 ed       	ldi	r24, 0xD6	; 214
     bb4:	79 df       	rcall	.-270    	; 0xaa8 <_ZL8writeReghj>
     bb6:	8a ee       	ldi	r24, 0xEA	; 234
     bb8:	63 df       	rcall	.-314    	; 0xa80 <_ZL11readRegByteh>
     bba:	80 fd       	sbrc	r24, 0
    writeRegByte(MAADR3, macaddr[2]);
    writeRegByte(MAADR2, macaddr[3]);
    writeRegByte(MAADR1, macaddr[4]);
    writeRegByte(MAADR0, macaddr[5]);
    writePhy(PHCON2, PHCON2_HDLDIS);
    SetBank(ECON1);
     bbc:	fc cf       	rjmp	.-8      	; 0xbb6 <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0xd2>
     bbe:	8f e1       	ldi	r24, 0x1F	; 31
     bc0:	3a df       	rcall	.-396    	; 0xa36 <_ZL7SetBankh>
    writeOp(ENC28J60_BIT_FIELD_SET, EIE, EIE_INTIE|EIE_PKTIE);
     bc2:	40 ec       	ldi	r20, 0xC0	; 192
     bc4:	6b e1       	ldi	r22, 0x1B	; 27
     bc6:	80 e8       	ldi	r24, 0x80	; 128
     bc8:	fc de       	rcall	.-520    	; 0x9c2 <_ZL7writeOphhh>
     bca:	44 e0       	ldi	r20, 0x04	; 4
    writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN);
     bcc:	6f e1       	ldi	r22, 0x1F	; 31
     bce:	80 e8       	ldi	r24, 0x80	; 128
     bd0:	f8 de       	rcall	.-528    	; 0x9c2 <_ZL7writeOphhh>
     bd2:	82 e7       	ldi	r24, 0x72	; 114
     bd4:	55 df       	rcall	.-342    	; 0xa80 <_ZL11readRegByteh>

    uint8_t rev = readRegByte(EREVID);
     bd6:	86 30       	cpi	r24, 0x06	; 6
     bd8:	08 f0       	brcs	.+2      	; 0xbdc <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0xf8>
     bda:	8f 5f       	subi	r24, 0xFF	; 255
    // microchip forgot to step the number on the silicon when they
    // released the revision B7. 6 is now rev B7. We still have
    // to see what they do when they release B8. At the moment
    // there is no B8 out yet
    if (rev > 5) ++rev;
     bdc:	df 91       	pop	r29
     bde:	cf 91       	pop	r28
     be0:	0f 91       	pop	r16
    return rev;
}
     be2:	08 95       	ret

00000be4 <_ZN8ENC28J608isLinkUpEv>:
     be4:	61 e1       	ldi	r22, 0x11	; 17
     be6:	84 ed       	ldi	r24, 0xD4	; 212
     be8:	53 df       	rcall	.-346    	; 0xa90 <_ZL12writeRegBytehh>
    writeRegByte(address + 1, data >> 8);
}

static uint16_t readPhyByte (uint8_t address) {
    writeRegByte(MIREGADR, address);
    writeRegByte(MICMD, MICMD_MIIRD);
     bea:	61 e0       	ldi	r22, 0x01	; 1
     bec:	82 ed       	ldi	r24, 0xD2	; 210
     bee:	50 df       	rcall	.-352    	; 0xa90 <_ZL12writeRegBytehh>
    while (readRegByte(MISTAT) & MISTAT_BUSY)
     bf0:	8a ee       	ldi	r24, 0xEA	; 234
     bf2:	46 df       	rcall	.-372    	; 0xa80 <_ZL11readRegByteh>
     bf4:	80 fd       	sbrc	r24, 0
     bf6:	fc cf       	rjmp	.-8      	; 0xbf0 <_ZN8ENC28J608isLinkUpEv+0xc>
        ;
    writeRegByte(MICMD, 0x00);
     bf8:	60 e0       	ldi	r22, 0x00	; 0
     bfa:	82 ed       	ldi	r24, 0xD2	; 210
     bfc:	49 df       	rcall	.-366    	; 0xa90 <_ZL12writeRegBytehh>
    return readRegByte(MIRD+1);
     bfe:	89 ed       	ldi	r24, 0xD9	; 217
     c00:	3f df       	rcall	.-386    	; 0xa80 <_ZL11readRegByteh>
     c02:	82 fb       	bst	r24, 2
    return rev;
}

bool ENC28J60::isLinkUp() {
    return (readPhyByte(PHSTAT2) >> 2) & 1;
}
     c04:	88 27       	eor	r24, r24
     c06:	80 f9       	bld	r24, 0
     c08:	08 95       	ret

00000c0a <_ZN8ENC28J6010packetSendEj>:
     c0a:	af 92       	push	r10

struct transmit_status_vector {
    uint8_t bytes[7];
};

void ENC28J60::packetSend(uint16_t len) {
     c0c:	bf 92       	push	r11
     c0e:	cf 92       	push	r12
     c10:	df 92       	push	r13
     c12:	ef 92       	push	r14
     c14:	ff 92       	push	r15
     c16:	0f 93       	push	r16
     c18:	1f 93       	push	r17
     c1a:	cf 93       	push	r28
     c1c:	df 93       	push	r29
     c1e:	7c 01       	movw	r14, r24
        writeOp(ENC28J60_BIT_FIELD_CLR, EIR, EIR_TXERIF|EIR_TXIF);

        // prepare new transmission
        if (retry == 0) {
            writeReg(EWRPT, TXSTART_INIT);
            writeReg(ETXND, TXSTART_INIT+len);
     c20:	6c 01       	movw	r12, r24
     c22:	84 ef       	ldi	r24, 0xF4	; 244
     c24:	d8 1a       	sub	r13, r24

	static void write(const void *buf, uint16_t nbyte){
		if(nbyte == 0) return;
		
		const uint8_t* buff = (const uint8_t*)(buf);
		SPDR = *buff;
     c26:	0f 2e       	mov	r0, r31
     c28:	f0 ef       	ldi	r31, 0xF0	; 240
     c2a:	af 2e       	mov	r10, r31
     c2c:	f2 e0       	ldi	r31, 0x02	; 2
     c2e:	bf 2e       	mov	r11, r31
     c30:	f0 2d       	mov	r31, r0
     c32:	87 01       	movw	r16, r14
     c34:	00 51       	subi	r16, 0x10	; 16
     c36:	1d 4f       	sbci	r17, 0xFD	; 253
        // the Microchip TCP/IP stack implementation used to first check
        // whether TXERIF is set and only then reset the transmit logic
        // but this has been changed in later versions; possibly they
        // have a reason for this; they don't mention this in the errata
        // sheet
        writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRST);
     c38:	40 e8       	ldi	r20, 0x80	; 128
     c3a:	6f e1       	ldi	r22, 0x1F	; 31
     c3c:	80 e8       	ldi	r24, 0x80	; 128
     c3e:	c1 de       	rcall	.-638    	; 0x9c2 <_ZL7writeOphhh>
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRST);
     c40:	40 e8       	ldi	r20, 0x80	; 128
     c42:	6f e1       	ldi	r22, 0x1F	; 31
     c44:	80 ea       	ldi	r24, 0xA0	; 160
     c46:	bd de       	rcall	.-646    	; 0x9c2 <_ZL7writeOphhh>
        writeOp(ENC28J60_BIT_FIELD_CLR, EIR, EIR_TXERIF|EIR_TXIF);
     c48:	4a e0       	ldi	r20, 0x0A	; 10
     c4a:	6c e1       	ldi	r22, 0x1C	; 28
     c4c:	80 ea       	ldi	r24, 0xA0	; 160
     c4e:	b9 de       	rcall	.-654    	; 0x9c2 <_ZL7writeOphhh>

        // prepare new transmission
        if (retry == 0) {
            writeReg(EWRPT, TXSTART_INIT);
     c50:	60 e0       	ldi	r22, 0x00	; 0
     c52:	7c e0       	ldi	r23, 0x0C	; 12
     c54:	82 e0       	ldi	r24, 0x02	; 2
            writeReg(ETXND, TXSTART_INIT+len);
     c56:	28 df       	rcall	.-432    	; 0xaa8 <_ZL8writeReghj>
     c58:	b6 01       	movw	r22, r12
     c5a:	86 e0       	ldi	r24, 0x06	; 6
            writeOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
     c5c:	25 df       	rcall	.-438    	; 0xaa8 <_ZL8writeReghj>
     c5e:	40 e0       	ldi	r20, 0x00	; 0
     c60:	60 e0       	ldi	r22, 0x00	; 0
     c62:	8a e7       	ldi	r24, 0x7A	; 122
     c64:	ae de       	rcall	.-676    	; 0x9c2 <_ZL7writeOphhh>
    }
    disableChip();
}

static void writeBuf(uint16_t len, const uint8_t* data) {
    enableChip();
     c66:	78 de       	rcall	.-784    	; 0x958 <_ZL10enableChipv>
     c68:	e1 14       	cp	r14, r1
    if (len != 0) {
     c6a:	f1 04       	cpc	r15, r1
     c6c:	e1 f0       	breq	.+56     	; 0xca6 <_ZN8ENC28J6010packetSendEj+0x9c>
     c6e:	8a e7       	ldi	r24, 0x7A	; 122
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     c70:	8e bd       	out	0x2e, r24	; 46
     c72:	00 00       	nop
		asm volatile("nop");
     c74:	0d b4       	in	r0, 0x2d	; 45
		while(!(SPSR & _BV(SPIF)));
     c76:	07 fe       	sbrs	r0, 7
     c78:	fd cf       	rjmp	.-6      	; 0xc74 <_ZN8ENC28J6010packetSendEj+0x6a>
     c7a:	f5 01       	movw	r30, r10

	static void write(const void *buf, uint16_t nbyte){
		if(nbyte == 0) return;
		
		const uint8_t* buff = (const uint8_t*)(buf);
		SPDR = *buff;
     c7c:	80 81       	ld	r24, Z
     c7e:	8e bd       	out	0x2e, r24	; 46
     c80:	f1 e0       	ldi	r31, 0x01	; 1
		while(--nbyte){
     c82:	ef 16       	cp	r14, r31
     c84:	f1 04       	cpc	r15, r1
     c86:	59 f0       	breq	.+22     	; 0xc9e <_ZN8ENC28J6010packetSendEj+0x94>
     c88:	e1 ef       	ldi	r30, 0xF1	; 241
     c8a:	f2 e0       	ldi	r31, 0x02	; 2
     c8c:	00 00       	nop
			asm volatile("nop");
     c8e:	0d b4       	in	r0, 0x2d	; 45
			while (!(SPSR & _BV(SPIF))) ;
     c90:	07 fe       	sbrs	r0, 7
     c92:	fd cf       	rjmp	.-6      	; 0xc8e <_ZN8ENC28J6010packetSendEj+0x84>
     c94:	81 91       	ld	r24, Z+
			SPDR = *++buff;
     c96:	8e bd       	out	0x2e, r24	; 46
     c98:	e0 17       	cp	r30, r16
	static void write(const void *buf, uint16_t nbyte){
		if(nbyte == 0) return;
		
		const uint8_t* buff = (const uint8_t*)(buf);
		SPDR = *buff;
		while(--nbyte){
     c9a:	f1 07       	cpc	r31, r17
     c9c:	b9 f7       	brne	.-18     	; 0xc8c <_ZN8ENC28J6010packetSendEj+0x82>
			asm volatile("nop");
			while (!(SPSR & _BV(SPIF))) ;
			SPDR = *++buff;
		}
		asm volatile("nop");
     c9e:	00 00       	nop
		while (!(SPSR & _BV(SPIF))) ;
     ca0:	0d b4       	in	r0, 0x2d	; 45
     ca2:	07 fe       	sbrs	r0, 7
        SPI.write8(ENC28J60_WRITE_BUF_MEM);

        SPI.write(data, len);
    }
    disableChip();
     ca4:	fd cf       	rjmp	.-6      	; 0xca0 <_ZN8ENC28J6010packetSendEj+0x96>
            writeOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
            writeBuf(len, buffer);
        }

        // initiate transmission
        writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
     ca6:	63 de       	rcall	.-826    	; 0x96e <_ZL11disableChipv>
     ca8:	48 e0       	ldi	r20, 0x08	; 8
     caa:	6f e1       	ldi	r22, 0x1F	; 31
     cac:	80 e8       	ldi	r24, 0x80	; 128
     cae:	89 de       	rcall	.-750    	; 0x9c2 <_ZL7writeOphhh>
        // wait until transmission has finished; referring to the data sheet and
        // to the errata (Errata Issue 13; Example 1) you only need to wait until either
        // TXIF or TXERIF gets set; however this leads to hangs; apparently Microchip
        // realized this and in later implementations of their tcp/ip stack they introduced
        // a counter to avoid hangs; of course they didn't update the errata sheet
        uint16_t count = 0;
     cb0:	c0 e0       	ldi	r28, 0x00	; 0
     cb2:	d0 e0       	ldi	r29, 0x00	; 0
        while ((readRegByte(EIR) & (EIR_TXIF | EIR_TXERIF)) == 0 && ++count < 1000U)
     cb4:	8c e1       	ldi	r24, 0x1C	; 28
     cb6:	e4 de       	rcall	.-568    	; 0xa80 <_ZL11readRegByteh>
     cb8:	8a 70       	andi	r24, 0x0A	; 10
     cba:	31 f4       	brne	.+12     	; 0xcc8 <_ZN8ENC28J6010packetSendEj+0xbe>
     cbc:	21 96       	adiw	r28, 0x01	; 1
     cbe:	c8 3e       	cpi	r28, 0xE8	; 232
     cc0:	83 e0       	ldi	r24, 0x03	; 3
     cc2:	d8 07       	cpc	r29, r24
     cc4:	b9 f7       	brne	.-18     	; 0xcb4 <_ZN8ENC28J6010packetSendEj+0xaa>
     cc6:	0c c0       	rjmp	.+24     	; 0xce0 <_ZN8ENC28J6010packetSendEj+0xd6>
            ;

        if (!(readRegByte(EIR) & EIR_TXERIF) && count < 1000U) {
     cc8:	8c e1       	ldi	r24, 0x1C	; 28
     cca:	da de       	rcall	.-588    	; 0xa80 <_ZL11readRegByteh>
     ccc:	81 fd       	sbrc	r24, 1
     cce:	03 c0       	rjmp	.+6      	; 0xcd6 <_ZN8ENC28J6010packetSendEj+0xcc>
     cd0:	c8 3e       	cpi	r28, 0xE8	; 232
     cd2:	d3 40       	sbci	r29, 0x03	; 3
            // no error; start new transmission
            break;
        }

        // cancel previous transmission if stuck
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRTS);
     cd4:	40 f0       	brcs	.+16     	; 0xce6 <_ZN8ENC28J6010packetSendEj+0xdc>
     cd6:	48 e0       	ldi	r20, 0x08	; 8
     cd8:	6f e1       	ldi	r22, 0x1F	; 31
     cda:	80 ea       	ldi	r24, 0xA0	; 160
     cdc:	72 de       	rcall	.-796    	; 0x9c2 <_ZL7writeOphhh>
};

void ENC28J60::packetSend(uint16_t len) {
    uint8_t retry = 0;

    while (1) {
     cde:	ac cf       	rjmp	.-168    	; 0xc38 <_ZN8ENC28J6010packetSendEj+0x2e>
        // a counter to avoid hangs; of course they didn't update the errata sheet
        uint16_t count = 0;
        while ((readRegByte(EIR) & (EIR_TXIF | EIR_TXERIF)) == 0 && ++count < 1000U)
            ;

        if (!(readRegByte(EIR) & EIR_TXERIF) && count < 1000U) {
     ce0:	8c e1       	ldi	r24, 0x1C	; 28
     ce2:	ce de       	rcall	.-612    	; 0xa80 <_ZL11readRegByteh>
     ce4:	f8 cf       	rjmp	.-16     	; 0xcd6 <_ZN8ENC28J6010packetSendEj+0xcc>
     ce6:	df 91       	pop	r29
        }

        // cancel previous transmission if stuck
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRTS);
    }
}
     ce8:	cf 91       	pop	r28
     cea:	1f 91       	pop	r17
     cec:	0f 91       	pop	r16
     cee:	ff 90       	pop	r15
     cf0:	ef 90       	pop	r14
     cf2:	df 90       	pop	r13
     cf4:	cf 90       	pop	r12
     cf6:	bf 90       	pop	r11
     cf8:	af 90       	pop	r10
     cfa:	08 95       	ret

00000cfc <_ZN8ENC28J6013packetReceiveEv>:
     cfc:	0f 93       	push	r16


uint16_t ENC28J60::packetReceive() {
     cfe:	1f 93       	push	r17
     d00:	cf 93       	push	r28
     d02:	df 93       	push	r29
     d04:	00 d0       	rcall	.+0      	; 0xd06 <_ZN8ENC28J6013packetReceiveEv+0xa>
     d06:	00 d0       	rcall	.+0      	; 0xd08 <_ZN8ENC28J6013packetReceiveEv+0xc>
     d08:	cd b7       	in	r28, 0x3d	; 61
     d0a:	de b7       	in	r29, 0x3e	; 62
    static uint16_t gNextPacketPtr = RXSTART_INIT;
    static bool     unreleasedPacket = false;
    uint16_t len = 0;

    if (unreleasedPacket) {
     d0c:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <_ZZN8ENC28J6013packetReceiveEvE16unreleasedPacket>
     d10:	88 23       	and	r24, r24
     d12:	91 f0       	breq	.+36     	; 0xd38 <_ZN8ENC28J6013packetReceiveEv+0x3c>
        if (gNextPacketPtr == 0)
     d14:	60 91 e7 02 	lds	r22, 0x02E7	; 0x8002e7 <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr>
     d18:	70 91 e8 02 	lds	r23, 0x02E8	; 0x8002e8 <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr+0x1>
     d1c:	61 15       	cp	r22, r1
     d1e:	71 05       	cpc	r23, r1
     d20:	29 f4       	brne	.+10     	; 0xd2c <_ZN8ENC28J6013packetReceiveEv+0x30>
            writeReg(ERXRDPT, RXSTOP_INIT);
     d22:	6f ef       	ldi	r22, 0xFF	; 255
     d24:	7b e0       	ldi	r23, 0x0B	; 11
     d26:	8c e0       	ldi	r24, 0x0C	; 12
     d28:	bf de       	rcall	.-642    	; 0xaa8 <_ZL8writeReghj>
     d2a:	04 c0       	rjmp	.+8      	; 0xd34 <_ZN8ENC28J6013packetReceiveEv+0x38>
        else
            writeReg(ERXRDPT, gNextPacketPtr - 1);
     d2c:	61 50       	subi	r22, 0x01	; 1
     d2e:	71 09       	sbc	r23, r1
     d30:	8c e0       	ldi	r24, 0x0C	; 12
     d32:	ba de       	rcall	.-652    	; 0xaa8 <_ZL8writeReghj>
        unreleasedPacket = false;
     d34:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <_ZZN8ENC28J6013packetReceiveEvE16unreleasedPacket>
    }

    if (readRegByte(EPKTCNT) > 0) {
     d38:	89 e3       	ldi	r24, 0x39	; 57
     d3a:	a2 de       	rcall	.-700    	; 0xa80 <_ZL11readRegByteh>
     d3c:	88 23       	and	r24, r24
     d3e:	a9 f1       	breq	.+106    	; 0xdaa <_ZN8ENC28J6013packetReceiveEv+0xae>
        writeReg(ERDPT, gNextPacketPtr);
     d40:	60 91 e7 02 	lds	r22, 0x02E7	; 0x8002e7 <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr>
     d44:	70 91 e8 02 	lds	r23, 0x02E8	; 0x8002e8 <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr+0x1>
     d48:	80 e0       	ldi	r24, 0x00	; 0
     d4a:	ae de       	rcall	.-676    	; 0xaa8 <_ZL8writeReghj>
            uint16_t nextPacket;
            uint16_t byteCount;
            uint16_t status;
        } header;

        readBuf(sizeof header, (uint8_t*) &header);
     d4c:	be 01       	movw	r22, r28
     d4e:	6f 5f       	subi	r22, 0xFF	; 255
     d50:	7f 4f       	sbci	r23, 0xFF	; 255
     d52:	86 e0       	ldi	r24, 0x06	; 6
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	4d de       	rcall	.-870    	; 0x9f2 <_ZL7readBufjPh>

        gNextPacketPtr  = header.nextPacket;
     d58:	89 81       	ldd	r24, Y+1	; 0x01
     d5a:	9a 81       	ldd	r25, Y+2	; 0x02
     d5c:	90 93 e8 02 	sts	0x02E8, r25	; 0x8002e8 <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr+0x1>
     d60:	80 93 e7 02 	sts	0x02E7, r24	; 0x8002e7 <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr>
        len = header.byteCount - 4; //remove the CRC count
        if (len>bufferSize-1)
            len=bufferSize-1;
        if ((header.status & 0x80)==0)
     d64:	8d 81       	ldd	r24, Y+5	; 0x05
     d66:	87 ff       	sbrs	r24, 7
     d68:	12 c0       	rjmp	.+36     	; 0xd8e <_ZN8ENC28J6013packetReceiveEv+0x92>

        readBuf(sizeof header, (uint8_t*) &header);

        gNextPacketPtr  = header.nextPacket;
        len = header.byteCount - 4; //remove the CRC count
        if (len>bufferSize-1)
     d6a:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <_ZN8ENC28J6010bufferSizeE>
     d6e:	90 91 ef 02 	lds	r25, 0x02EF	; 0x8002ef <_ZN8ENC28J6010bufferSizeE+0x1>
     d72:	01 97       	sbiw	r24, 0x01	; 1
        } header;

        readBuf(sizeof header, (uint8_t*) &header);

        gNextPacketPtr  = header.nextPacket;
        len = header.byteCount - 4; //remove the CRC count
     d74:	0b 81       	ldd	r16, Y+3	; 0x03
     d76:	1c 81       	ldd	r17, Y+4	; 0x04
     d78:	04 50       	subi	r16, 0x04	; 4
     d7a:	11 09       	sbc	r17, r1
     d7c:	80 17       	cp	r24, r16
     d7e:	91 07       	cpc	r25, r17
     d80:	08 f4       	brcc	.+2      	; 0xd84 <_ZN8ENC28J6013packetReceiveEv+0x88>
        if (len>bufferSize-1)
            len=bufferSize-1;
        if ((header.status & 0x80)==0)
            len = 0;
        else
            readBuf(len, buffer);
     d82:	8c 01       	movw	r16, r24
     d84:	60 ef       	ldi	r22, 0xF0	; 240
     d86:	72 e0       	ldi	r23, 0x02	; 2
     d88:	c8 01       	movw	r24, r16
     d8a:	33 de       	rcall	.-922    	; 0x9f2 <_ZL7readBufjPh>
     d8c:	02 c0       	rjmp	.+4      	; 0xd92 <_ZN8ENC28J6013packetReceiveEv+0x96>
        gNextPacketPtr  = header.nextPacket;
        len = header.byteCount - 4; //remove the CRC count
        if (len>bufferSize-1)
            len=bufferSize-1;
        if ((header.status & 0x80)==0)
            len = 0;
     d8e:	00 e0       	ldi	r16, 0x00	; 0
     d90:	10 e0       	ldi	r17, 0x00	; 0
        else
            readBuf(len, buffer);
        buffer[len] = 0;
     d92:	f8 01       	movw	r30, r16
     d94:	e0 51       	subi	r30, 0x10	; 16
     d96:	fd 4f       	sbci	r31, 0xFD	; 253
     d98:	10 82       	st	Z, r1
        unreleasedPacket = true;
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <_ZZN8ENC28J6013packetReceiveEvE16unreleasedPacket>

        writeOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
     da0:	40 e4       	ldi	r20, 0x40	; 64
     da2:	6e e1       	ldi	r22, 0x1E	; 30
     da4:	80 e8       	ldi	r24, 0x80	; 128
     da6:	0d de       	rcall	.-998    	; 0x9c2 <_ZL7writeOphhh>
     da8:	02 c0       	rjmp	.+4      	; 0xdae <_ZN8ENC28J6013packetReceiveEv+0xb2>


uint16_t ENC28J60::packetReceive() {
    static uint16_t gNextPacketPtr = RXSTART_INIT;
    static bool     unreleasedPacket = false;
    uint16_t len = 0;
     daa:	00 e0       	ldi	r16, 0x00	; 0
     dac:	10 e0       	ldi	r17, 0x00	; 0
        unreleasedPacket = true;

        writeOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
    }
    return len;
}
     dae:	c8 01       	movw	r24, r16
     db0:	26 96       	adiw	r28, 0x06	; 6
     db2:	0f b6       	in	r0, 0x3f	; 63
     db4:	f8 94       	cli
     db6:	de bf       	out	0x3e, r29	; 62
     db8:	0f be       	out	0x3f, r0	; 63
     dba:	cd bf       	out	0x3d, r28	; 61
     dbc:	df 91       	pop	r29
     dbe:	cf 91       	pop	r28
     dc0:	1f 91       	pop	r17
     dc2:	0f 91       	pop	r16
     dc4:	08 95       	ret

00000dc6 <_ZN9EtherCard5beginEPKhRVhS3_h>:
uint16_t EtherCard::delaycnt = 0; //request gateway ARP lookup

uint8_t Ethernet::buffer[ETHER_CARD_BUFFER_SIZE]; // tcp/ip send and receive buffer

uint8_t EtherCard::begin (const uint8_t* macaddr,
                          Register& csDDR, Register& csPort, uint8_t csPin) {
     dc6:	ef 92       	push	r14
     dc8:	ff 92       	push	r15
     dca:	0f 93       	push	r16
     dcc:	cf 93       	push	r28
     dce:	df 93       	push	r29
     dd0:	eb 01       	movw	r28, r22
     dd2:	7a 01       	movw	r14, r20
     dd4:	02 2f       	mov	r16, r18

    copyMac(mymac, macaddr);
     dd6:	bc 01       	movw	r22, r24
     dd8:	8a e0       	ldi	r24, 0x0A	; 10
     dda:	95 e0       	ldi	r25, 0x05	; 5
     ddc:	c9 d3       	rcall	.+1938   	; 0x1570 <_ZN9EtherCard7copyMacEPhPKh>
    return initialize(ETHER_CARD_BUFFER_SIZE, mymac, csDDR, csPort, csPin);
     dde:	97 01       	movw	r18, r14
     de0:	ae 01       	movw	r20, r28
     de2:	6a e0       	ldi	r22, 0x0A	; 10
     de4:	75 e0       	ldi	r23, 0x05	; 5
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	92 e0       	ldi	r25, 0x02	; 2
     dea:	7c de       	rcall	.-776    	; 0xae4 <_ZN8ENC28J6010initializeEjPKhRVhS3_h>
}
     dec:	df 91       	pop	r29
     dee:	cf 91       	pop	r28
     df0:	0f 91       	pop	r16
     df2:	ff 90       	pop	r15
     df4:	ef 90       	pop	r14
     df6:	08 95       	ret

00000df8 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_>:

bool EtherCard::staticSetup (const uint8_t* my_ip,
                             const uint8_t* gw_ip,
                             const uint8_t* dns_ip,
                             const uint8_t* mask) {
     df8:	ef 92       	push	r14
     dfa:	ff 92       	push	r15
     dfc:	0f 93       	push	r16
     dfe:	1f 93       	push	r17
     e00:	cf 93       	push	r28
     e02:	df 93       	push	r29
     e04:	7b 01       	movw	r14, r22
     e06:	8a 01       	movw	r16, r20
     e08:	e9 01       	movw	r28, r18

    if (my_ip != 0)
     e0a:	00 97       	sbiw	r24, 0x00	; 0
     e0c:	21 f0       	breq	.+8      	; 0xe16 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x1e>
        copyIp(myip, my_ip);
     e0e:	bc 01       	movw	r22, r24
     e10:	86 e0       	ldi	r24, 0x06	; 6
     e12:	95 e0       	ldi	r25, 0x05	; 5
     e14:	a0 d3       	rcall	.+1856   	; 0x1556 <_ZN9EtherCard6copyIpEPhPKh>
    if (gw_ip != 0)
     e16:	e1 14       	cp	r14, r1
     e18:	f1 04       	cpc	r15, r1
     e1a:	11 f0       	breq	.+4      	; 0xe20 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x28>
        setGwIp(gw_ip);
     e1c:	c7 01       	movw	r24, r14
     e1e:	bd d1       	rcall	.+890    	; 0x119a <_ZN9EtherCard7setGwIpEPKh>
    if (dns_ip != 0)
     e20:	01 15       	cp	r16, r1
     e22:	11 05       	cpc	r17, r1
     e24:	21 f0       	breq	.+8      	; 0xe2e <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x36>
        copyIp(dnsip, dns_ip);
     e26:	b8 01       	movw	r22, r16
     e28:	86 ef       	ldi	r24, 0xF6	; 246
     e2a:	94 e0       	ldi	r25, 0x04	; 4
     e2c:	94 d3       	rcall	.+1832   	; 0x1556 <_ZN9EtherCard6copyIpEPhPKh>
    if(mask != 0)
     e2e:	20 97       	sbiw	r28, 0x00	; 0
     e30:	21 f0       	breq	.+8      	; 0xe3a <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x42>
        copyIp(netmask, mask);
     e32:	be 01       	movw	r22, r28
     e34:	82 e0       	ldi	r24, 0x02	; 2
     e36:	95 e0       	ldi	r25, 0x05	; 5
    updateBroadcastAddress();
     e38:	8e d3       	rcall	.+1820   	; 0x1556 <_ZN9EtherCard6copyIpEPhPKh>
     e3a:	bb d1       	rcall	.+886    	; 0x11b2 <_ZN9EtherCard22updateBroadcastAddressEv>
    delaycnt = 0; //request gateway ARP lookup
     e3c:	10 92 f1 04 	sts	0x04F1, r1	; 0x8004f1 <_ZN9EtherCard8delaycntE+0x1>
     e40:	10 92 f0 04 	sts	0x04F0, r1	; 0x8004f0 <_ZN9EtherCard8delaycntE>
    return true;
}
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	df 91       	pop	r29
     e48:	cf 91       	pop	r28
     e4a:	1f 91       	pop	r17
     e4c:	0f 91       	pop	r16
     e4e:	ff 90       	pop	r15
     e50:	ef 90       	pop	r14
     e52:	08 95       	ret

00000e54 <_ZL13fill_checksumhhjh>:
    for(uint8_t i=0; i<IP_LEN; i++)
        broadcastip[i] = myip[i] | ~netmask[i];
}

void EtherCard::registerPingCallback (void (*callback)(uint8_t *srcip)) {
    icmp_cb = callback;
     e54:	cf 92       	push	r12
     e56:	df 92       	push	r13
     e58:	ef 92       	push	r14
     e5a:	ff 92       	push	r15
     e5c:	cf 93       	push	r28
     e5e:	df 93       	push	r29
     e60:	c6 2f       	mov	r28, r22
     e62:	d0 e0       	ldi	r29, 0x00	; 0
     e64:	c0 51       	subi	r28, 0x10	; 16
     e66:	dd 4f       	sbci	r29, 0xFD	; 253
     e68:	21 30       	cpi	r18, 0x01	; 1
     e6a:	81 f4       	brne	.+32     	; 0xe8c <_ZL13fill_checksumhhjh+0x38>
     e6c:	6a 01       	movw	r12, r20
     e6e:	99 e0       	ldi	r25, 0x09	; 9
     e70:	c9 0e       	add	r12, r25
     e72:	d1 1c       	adc	r13, r1
     e74:	e1 2c       	mov	r14, r1
     e76:	f1 2c       	mov	r15, r1
     e78:	03 c0       	rjmp	.+6      	; 0xe80 <_ZL13fill_checksumhhjh+0x2c>
     e7a:	c1 2c       	mov	r12, r1
     e7c:	d1 2c       	mov	r13, r1
     e7e:	76 01       	movw	r14, r12
     e80:	42 30       	cpi	r20, 0x02	; 2
     e82:	51 05       	cpc	r21, r1
     e84:	28 f1       	brcs	.+74     	; 0xed0 <_ZL13fill_checksumhhjh+0x7c>
     e86:	fe 01       	movw	r30, r28
     e88:	da 01       	movw	r26, r20
     e8a:	09 c0       	rjmp	.+18     	; 0xe9e <_ZL13fill_checksumhhjh+0x4a>
     e8c:	22 30       	cpi	r18, 0x02	; 2
     e8e:	a9 f7       	brne	.-22     	; 0xe7a <_ZL13fill_checksumhhjh+0x26>
     e90:	6a 01       	movw	r12, r20
     e92:	92 e0       	ldi	r25, 0x02	; 2
     e94:	c9 1a       	sub	r12, r25
     e96:	d1 08       	sbc	r13, r1
     e98:	e1 2c       	mov	r14, r1
     e9a:	f1 2c       	mov	r15, r1
     e9c:	f1 cf       	rjmp	.-30     	; 0xe80 <_ZL13fill_checksumhhjh+0x2c>
     e9e:	20 81       	ld	r18, Z
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	32 2f       	mov	r19, r18
     ea4:	22 27       	eor	r18, r18
     ea6:	91 81       	ldd	r25, Z+1	; 0x01
     ea8:	29 2b       	or	r18, r25
     eaa:	c2 0e       	add	r12, r18
     eac:	d3 1e       	adc	r13, r19
     eae:	e1 1c       	adc	r14, r1
     eb0:	f1 1c       	adc	r15, r1
     eb2:	32 96       	adiw	r30, 0x02	; 2
     eb4:	12 97       	sbiw	r26, 0x02	; 2
     eb6:	a2 30       	cpi	r26, 0x02	; 2
     eb8:	b1 05       	cpc	r27, r1
     eba:	88 f7       	brcc	.-30     	; 0xe9e <_ZL13fill_checksumhhjh+0x4a>
     ebc:	9a 01       	movw	r18, r20
     ebe:	22 50       	subi	r18, 0x02	; 2
     ec0:	31 09       	sbc	r19, r1
     ec2:	2e 7f       	andi	r18, 0xFE	; 254
     ec4:	2e 5f       	subi	r18, 0xFE	; 254
     ec6:	3f 4f       	sbci	r19, 0xFF	; 255
     ec8:	c2 0f       	add	r28, r18
     eca:	d3 1f       	adc	r29, r19
     ecc:	41 70       	andi	r20, 0x01	; 1
     ece:	55 27       	eor	r21, r21
     ed0:	45 2b       	or	r20, r21
     ed2:	61 f0       	breq	.+24     	; 0xeec <_ZL13fill_checksumhhjh+0x98>
     ed4:	48 81       	ld	r20, Y
     ed6:	50 e0       	ldi	r21, 0x00	; 0
     ed8:	60 e0       	ldi	r22, 0x00	; 0
     eda:	70 e0       	ldi	r23, 0x00	; 0
     edc:	76 2f       	mov	r23, r22
     ede:	65 2f       	mov	r22, r21
     ee0:	54 2f       	mov	r21, r20
     ee2:	44 27       	eor	r20, r20
     ee4:	c4 0e       	add	r12, r20
     ee6:	d5 1e       	adc	r13, r21
     ee8:	e6 1e       	adc	r14, r22
     eea:	f7 1e       	adc	r15, r23
     eec:	a7 01       	movw	r20, r14
     eee:	66 27       	eor	r22, r22
     ef0:	77 27       	eor	r23, r23
     ef2:	41 15       	cp	r20, r1
     ef4:	51 05       	cpc	r21, r1
     ef6:	61 05       	cpc	r22, r1
     ef8:	71 05       	cpc	r23, r1
     efa:	71 f0       	breq	.+28     	; 0xf18 <_ZL13fill_checksumhhjh+0xc4>
     efc:	ee 24       	eor	r14, r14
     efe:	ff 24       	eor	r15, r15
     f00:	c4 0e       	add	r12, r20
     f02:	d5 1e       	adc	r13, r21
     f04:	e6 1e       	adc	r14, r22
     f06:	f7 1e       	adc	r15, r23
     f08:	a7 01       	movw	r20, r14
     f0a:	66 27       	eor	r22, r22
     f0c:	77 27       	eor	r23, r23
     f0e:	41 15       	cp	r20, r1
     f10:	51 05       	cpc	r21, r1
     f12:	61 05       	cpc	r22, r1
     f14:	71 05       	cpc	r23, r1
     f16:	91 f7       	brne	.-28     	; 0xefc <_ZL13fill_checksumhhjh+0xa8>
     f18:	c0 94       	com	r12
     f1a:	d0 94       	com	r13
     f1c:	e8 2f       	mov	r30, r24
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	e0 51       	subi	r30, 0x10	; 16
     f22:	fd 4f       	sbci	r31, 0xFD	; 253
     f24:	d0 82       	st	Z, r13
     f26:	c1 82       	std	Z+1, r12	; 0x01
     f28:	df 91       	pop	r29
     f2a:	cf 91       	pop	r28
     f2c:	ff 90       	pop	r15
     f2e:	ef 90       	pop	r14
     f30:	df 90       	pop	r13
     f32:	cf 90       	pop	r12
     f34:	08 95       	ret

00000f36 <_ZL6is_lanPKhS0_>:
     f36:	cf 93       	push	r28
     f38:	df 93       	push	r29
     f3a:	fc 01       	movw	r30, r24
     f3c:	20 81       	ld	r18, Z
     f3e:	22 23       	and	r18, r18
     f40:	d1 f0       	breq	.+52     	; 0xf76 <_ZL6is_lanPKhS0_+0x40>
     f42:	fb 01       	movw	r30, r22
     f44:	30 81       	ld	r19, Z
     f46:	33 23       	and	r19, r19
     f48:	c1 f0       	breq	.+48     	; 0xf7a <_ZL6is_lanPKhS0_+0x44>
     f4a:	23 27       	eor	r18, r19
     f4c:	30 91 02 05 	lds	r19, 0x0502	; 0x800502 <_ZN9EtherCard7netmaskE>
     f50:	23 23       	and	r18, r19
     f52:	a9 f4       	brne	.+42     	; 0xf7e <_ZL6is_lanPKhS0_+0x48>
     f54:	dc 01       	movw	r26, r24
     f56:	11 96       	adiw	r26, 0x01	; 1
     f58:	31 96       	adiw	r30, 0x01	; 1
     f5a:	c3 e0       	ldi	r28, 0x03	; 3
     f5c:	d5 e0       	ldi	r29, 0x05	; 5
     f5e:	04 96       	adiw	r24, 0x04	; 4
     f60:	4d 91       	ld	r20, X+
     f62:	21 91       	ld	r18, Z+
     f64:	39 91       	ld	r19, Y+
     f66:	24 27       	eor	r18, r20
     f68:	23 23       	and	r18, r19
     f6a:	59 f4       	brne	.+22     	; 0xf82 <_ZL6is_lanPKhS0_+0x4c>
     f6c:	a8 17       	cp	r26, r24
     f6e:	b9 07       	cpc	r27, r25
     f70:	b9 f7       	brne	.-18     	; 0xf60 <_ZL6is_lanPKhS0_+0x2a>
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	07 c0       	rjmp	.+14     	; 0xf84 <_ZL6is_lanPKhS0_+0x4e>
     f76:	80 e0       	ldi	r24, 0x00	; 0
     f78:	05 c0       	rjmp	.+10     	; 0xf84 <_ZL6is_lanPKhS0_+0x4e>
     f7a:	80 e0       	ldi	r24, 0x00	; 0
     f7c:	03 c0       	rjmp	.+6      	; 0xf84 <_ZL6is_lanPKhS0_+0x4e>
     f7e:	80 e0       	ldi	r24, 0x00	; 0
     f80:	01 c0       	rjmp	.+2      	; 0xf84 <_ZL6is_lanPKhS0_+0x4e>
     f82:	80 e0       	ldi	r24, 0x00	; 0
     f84:	df 91       	pop	r29
     f86:	cf 91       	pop	r28
     f88:	08 95       	ret

00000f8a <_ZL20fill_ip_hdr_checksumv>:
     f8a:	e0 ef       	ldi	r30, 0xF0	; 240
     f8c:	f2 e0       	ldi	r31, 0x02	; 2
     f8e:	10 8e       	std	Z+24, r1	; 0x18
     f90:	11 8e       	std	Z+25, r1	; 0x19
     f92:	80 e4       	ldi	r24, 0x40	; 64
     f94:	84 8b       	std	Z+20, r24	; 0x14
     f96:	15 8a       	std	Z+21, r1	; 0x15
     f98:	86 8b       	std	Z+22, r24	; 0x16
     f9a:	20 e0       	ldi	r18, 0x00	; 0
     f9c:	44 e1       	ldi	r20, 0x14	; 20
     f9e:	50 e0       	ldi	r21, 0x00	; 0
     fa0:	6e e0       	ldi	r22, 0x0E	; 14
     fa2:	88 e1       	ldi	r24, 0x18	; 24
     fa4:	57 cf       	rjmp	.-338    	; 0xe54 <_ZL13fill_checksumhhjh>
     fa6:	08 95       	ret

00000fa8 <_ZL7setMACsPKh>:
     fa8:	bc 01       	movw	r22, r24
     faa:	80 ef       	ldi	r24, 0xF0	; 240
     fac:	92 e0       	ldi	r25, 0x02	; 2
     fae:	e0 d2       	rcall	.+1472   	; 0x1570 <_ZN9EtherCard7copyMacEPhPKh>
     fb0:	6a e0       	ldi	r22, 0x0A	; 10
     fb2:	75 e0       	ldi	r23, 0x05	; 5
     fb4:	86 ef       	ldi	r24, 0xF6	; 246
     fb6:	92 e0       	ldi	r25, 0x02	; 2
     fb8:	db c2       	rjmp	.+1462   	; 0x1570 <_ZN9EtherCard7copyMacEPhPKh>
     fba:	08 95       	ret

00000fbc <_ZL11make_eth_ipv>:
     fbc:	86 ef       	ldi	r24, 0xF6	; 246
     fbe:	92 e0       	ldi	r25, 0x02	; 2
     fc0:	f3 df       	rcall	.-26     	; 0xfa8 <_ZL7setMACsPKh>
     fc2:	6a e0       	ldi	r22, 0x0A	; 10
     fc4:	73 e0       	ldi	r23, 0x03	; 3
     fc6:	8e e0       	ldi	r24, 0x0E	; 14
     fc8:	93 e0       	ldi	r25, 0x03	; 3
     fca:	c5 d2       	rcall	.+1418   	; 0x1556 <_ZN9EtherCard6copyIpEPhPKh>
     fcc:	66 e0       	ldi	r22, 0x06	; 6
     fce:	75 e0       	ldi	r23, 0x05	; 5
     fd0:	8a e0       	ldi	r24, 0x0A	; 10
     fd2:	93 e0       	ldi	r25, 0x03	; 3
     fd4:	c0 d2       	rcall	.+1408   	; 0x1556 <_ZN9EtherCard6copyIpEPhPKh>
     fd6:	d9 cf       	rjmp	.-78     	; 0xf8a <_ZL20fill_ip_hdr_checksumv>
     fd8:	08 95       	ret

00000fda <_ZL12setMACandIPsPKhS0_>:
     fda:	cf 93       	push	r28
     fdc:	df 93       	push	r29
     fde:	eb 01       	movw	r28, r22
     fe0:	e3 df       	rcall	.-58     	; 0xfa8 <_ZL7setMACsPKh>
     fe2:	be 01       	movw	r22, r28
     fe4:	8e e0       	ldi	r24, 0x0E	; 14
     fe6:	93 e0       	ldi	r25, 0x03	; 3
     fe8:	b6 d2       	rcall	.+1388   	; 0x1556 <_ZN9EtherCard6copyIpEPhPKh>
     fea:	66 e0       	ldi	r22, 0x06	; 6
     fec:	75 e0       	ldi	r23, 0x05	; 5
     fee:	8a e0       	ldi	r24, 0x0A	; 10
     ff0:	93 e0       	ldi	r25, 0x03	; 3
     ff2:	b1 d2       	rcall	.+1378   	; 0x1556 <_ZN9EtherCard6copyIpEPhPKh>
     ff4:	df 91       	pop	r29
     ff6:	cf 91       	pop	r28
     ff8:	08 95       	ret

00000ffa <_ZL16client_store_macPhS_>:
     ffa:	cf 93       	push	r28
     ffc:	df 93       	push	r29
     ffe:	eb 01       	movw	r28, r22
    1000:	44 e0       	ldi	r20, 0x04	; 4
    1002:	50 e0       	ldi	r21, 0x00	; 0
    1004:	bc 01       	movw	r22, r24
    1006:	8c e0       	ldi	r24, 0x0C	; 12
    1008:	93 e0       	ldi	r25, 0x03	; 3
    100a:	0e 94 95 13 	call	0x272a	; 0x272a <memcmp>
    100e:	89 2b       	or	r24, r25
    1010:	31 f4       	brne	.+12     	; 0x101e <_ZL16client_store_macPhS_+0x24>
    1012:	66 e0       	ldi	r22, 0x06	; 6
    1014:	73 e0       	ldi	r23, 0x03	; 3
    1016:	ce 01       	movw	r24, r28
    1018:	ab d2       	rcall	.+1366   	; 0x1570 <_ZN9EtherCard7copyMacEPhPKh>
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	01 c0       	rjmp	.+2      	; 0x1020 <_ZL16client_store_macPhS_+0x26>
    101e:	80 e0       	ldi	r24, 0x00	; 0
    1020:	df 91       	pop	r29
    1022:	cf 91       	pop	r28
    1024:	08 95       	ret

00001026 <_ZL17client_arp_whohasPh>:
    1026:	0f 93       	push	r16
    1028:	1f 93       	push	r17
    102a:	cf 93       	push	r28
    102c:	8c 01       	movw	r16, r24
    102e:	85 e2       	ldi	r24, 0x25	; 37
    1030:	92 e0       	ldi	r25, 0x02	; 2
    1032:	ba df       	rcall	.-140    	; 0xfa8 <_ZL7setMACsPKh>
    1034:	e0 ef       	ldi	r30, 0xF0	; 240
    1036:	f2 e0       	ldi	r31, 0x02	; 2
    1038:	88 e0       	ldi	r24, 0x08	; 8
    103a:	84 87       	std	Z+12, r24	; 0x0c
    103c:	c6 e0       	ldi	r28, 0x06	; 6
    103e:	c5 87       	std	Z+13, r28	; 0x0d
    1040:	48 e0       	ldi	r20, 0x08	; 8
    1042:	50 e0       	ldi	r21, 0x00	; 0
    1044:	6f e9       	ldi	r22, 0x9F	; 159
    1046:	71 e0       	ldi	r23, 0x01	; 1
    1048:	8e ef       	ldi	r24, 0xFE	; 254
    104a:	92 e0       	ldi	r25, 0x02	; 2
    104c:	0e 94 8c 13 	call	0x2718	; 0x2718 <memcpy_P>
    1050:	e0 e1       	ldi	r30, 0x10	; 16
    1052:	f3 e0       	ldi	r31, 0x03	; 3
    1054:	df 01       	movw	r26, r30
    1056:	1d 92       	st	X+, r1
    1058:	ca 95       	dec	r28
    105a:	e9 f7       	brne	.-6      	; 0x1056 <_ZL17client_arp_whohasPh+0x30>
    105c:	6a e0       	ldi	r22, 0x0A	; 10
    105e:	75 e0       	ldi	r23, 0x05	; 5
    1060:	86 e0       	ldi	r24, 0x06	; 6
    1062:	93 e0       	ldi	r25, 0x03	; 3
    1064:	85 d2       	rcall	.+1290   	; 0x1570 <_ZN9EtherCard7copyMacEPhPKh>
    1066:	b8 01       	movw	r22, r16
    1068:	86 e1       	ldi	r24, 0x16	; 22
    106a:	93 e0       	ldi	r25, 0x03	; 3
    106c:	74 d2       	rcall	.+1256   	; 0x1556 <_ZN9EtherCard6copyIpEPhPKh>
    106e:	66 e0       	ldi	r22, 0x06	; 6
    1070:	75 e0       	ldi	r23, 0x05	; 5
    1072:	8c e0       	ldi	r24, 0x0C	; 12
    1074:	93 e0       	ldi	r25, 0x03	; 3
    1076:	6f d2       	rcall	.+1246   	; 0x1556 <_ZN9EtherCard6copyIpEPhPKh>
    1078:	8a e2       	ldi	r24, 0x2A	; 42
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	c6 dd       	rcall	.-1140   	; 0xc0a <_ZN8ENC28J6010packetSendEj>
    107e:	cf 91       	pop	r28
    1080:	1f 91       	pop	r17
    1082:	0f 91       	pop	r16
    1084:	08 95       	ret

00001086 <_ZN9EtherCard10udpPrepareEjPKhj>:
    1086:	ef 92       	push	r14
    1088:	ff 92       	push	r15
    108a:	0f 93       	push	r16
    108c:	1f 93       	push	r17
    108e:	cf 93       	push	r28
    1090:	df 93       	push	r29
    1092:	18 2f       	mov	r17, r24
    1094:	09 2f       	mov	r16, r25
    1096:	eb 01       	movw	r28, r22
    1098:	f4 2e       	mov	r15, r20
    109a:	e5 2e       	mov	r14, r21
    109c:	86 e0       	ldi	r24, 0x06	; 6
    109e:	95 e0       	ldi	r25, 0x05	; 5
    10a0:	4a df       	rcall	.-364    	; 0xf36 <_ZL6is_lanPKhS0_>
    10a2:	88 23       	and	r24, r24
    10a4:	29 f0       	breq	.+10     	; 0x10b0 <_ZN9EtherCard10udpPrepareEjPKhj+0x2a>
    10a6:	be 01       	movw	r22, r28
    10a8:	8b e1       	ldi	r24, 0x1B	; 27
    10aa:	95 e0       	ldi	r25, 0x05	; 5
    10ac:	96 df       	rcall	.-212    	; 0xfda <_ZL12setMACandIPsPKhS0_>
    10ae:	04 c0       	rjmp	.+8      	; 0x10b8 <_ZN9EtherCard10udpPrepareEjPKhj+0x32>
    10b0:	be 01       	movw	r22, r28
    10b2:	81 e1       	ldi	r24, 0x11	; 17
    10b4:	95 e0       	ldi	r25, 0x05	; 5
    10b6:	91 df       	rcall	.-222    	; 0xfda <_ZL12setMACandIPsPKhS0_>
    10b8:	88 81       	ld	r24, Y
    10ba:	80 7f       	andi	r24, 0xF0	; 240
    10bc:	80 3e       	cpi	r24, 0xE0	; 224
    10be:	91 f0       	breq	.+36     	; 0x10e4 <_ZN9EtherCard10udpPrepareEjPKhj+0x5e>
    10c0:	88 81       	ld	r24, Y
    10c2:	99 81       	ldd	r25, Y+1	; 0x01
    10c4:	aa 81       	ldd	r26, Y+2	; 0x02
    10c6:	bb 81       	ldd	r27, Y+3	; 0x03
    10c8:	8f 3f       	cpi	r24, 0xFF	; 255
    10ca:	9f 4f       	sbci	r25, 0xFF	; 255
    10cc:	af 4f       	sbci	r26, 0xFF	; 255
    10ce:	bf 4f       	sbci	r27, 0xFF	; 255
    10d0:	49 f0       	breq	.+18     	; 0x10e4 <_ZN9EtherCard10udpPrepareEjPKhj+0x5e>
    10d2:	44 e0       	ldi	r20, 0x04	; 4
    10d4:	50 e0       	ldi	r21, 0x00	; 0
    10d6:	be 01       	movw	r22, r28
    10d8:	8e ef       	ldi	r24, 0xFE	; 254
    10da:	94 e0       	ldi	r25, 0x04	; 4
    10dc:	0e 94 95 13 	call	0x272a	; 0x272a <memcmp>
    10e0:	89 2b       	or	r24, r25
    10e2:	29 f4       	brne	.+10     	; 0x10ee <_ZN9EtherCard10udpPrepareEjPKhj+0x68>
    10e4:	65 e2       	ldi	r22, 0x25	; 37
    10e6:	72 e0       	ldi	r23, 0x02	; 2
    10e8:	80 ef       	ldi	r24, 0xF0	; 240
    10ea:	92 e0       	ldi	r25, 0x02	; 2
    10ec:	41 d2       	rcall	.+1154   	; 0x1570 <_ZN9EtherCard7copyMacEPhPKh>
    10ee:	c0 ef       	ldi	r28, 0xF0	; 240
    10f0:	d2 e0       	ldi	r29, 0x02	; 2
    10f2:	88 e0       	ldi	r24, 0x08	; 8
    10f4:	8c 87       	std	Y+12, r24	; 0x0c
    10f6:	1d 86       	std	Y+13, r1	; 0x0d
    10f8:	49 e0       	ldi	r20, 0x09	; 9
    10fa:	50 e0       	ldi	r21, 0x00	; 0
    10fc:	66 e9       	ldi	r22, 0x96	; 150
    10fe:	71 e0       	ldi	r23, 0x01	; 1
    1100:	8e ef       	ldi	r24, 0xFE	; 254
    1102:	92 e0       	ldi	r25, 0x02	; 2
    1104:	0e 94 8c 13 	call	0x2718	; 0x2718 <memcpy_P>
    1108:	18 8a       	std	Y+16, r1	; 0x10
    110a:	81 e1       	ldi	r24, 0x11	; 17
    110c:	8f 8b       	std	Y+23, r24	; 0x17
    110e:	ec a2       	std	Y+36, r14	; 0x24
    1110:	fd a2       	std	Y+37, r15	; 0x25
    1112:	0a a3       	std	Y+34, r16	; 0x22
    1114:	1b a3       	std	Y+35, r17	; 0x23
    1116:	1e a2       	std	Y+38, r1	; 0x26
    1118:	18 a6       	std	Y+40, r1	; 0x28
    111a:	19 a6       	std	Y+41, r1	; 0x29
    111c:	df 91       	pop	r29
    111e:	cf 91       	pop	r28
    1120:	1f 91       	pop	r17
    1122:	0f 91       	pop	r16
    1124:	ff 90       	pop	r15
    1126:	ef 90       	pop	r14
    1128:	08 95       	ret

0000112a <_ZN9EtherCard11udpTransmitEj>:
    112a:	0f 93       	push	r16
    112c:	1f 93       	push	r17
    112e:	cf 93       	push	r28
    1130:	df 93       	push	r29
    1132:	ec 01       	movw	r28, r24
    1134:	00 ef       	ldi	r16, 0xF0	; 240
    1136:	12 e0       	ldi	r17, 0x02	; 2
    1138:	4c 96       	adiw	r24, 0x1c	; 28
    113a:	f8 01       	movw	r30, r16
    113c:	90 8b       	std	Z+16, r25	; 0x10
    113e:	81 8b       	std	Z+17, r24	; 0x11
    1140:	24 df       	rcall	.-440    	; 0xf8a <_ZL20fill_ip_hdr_checksumv>
    1142:	ce 01       	movw	r24, r28
    1144:	08 96       	adiw	r24, 0x08	; 8
    1146:	f8 01       	movw	r30, r16
    1148:	96 a3       	std	Z+38, r25	; 0x26
    114a:	87 a3       	std	Z+39, r24	; 0x27
    114c:	ae 01       	movw	r20, r28
    114e:	40 5f       	subi	r20, 0xF0	; 240
    1150:	5f 4f       	sbci	r21, 0xFF	; 255
    1152:	21 e0       	ldi	r18, 0x01	; 1
    1154:	6a e1       	ldi	r22, 0x1A	; 26
    1156:	88 e2       	ldi	r24, 0x28	; 40
    1158:	7d de       	rcall	.-774    	; 0xe54 <_ZL13fill_checksumhhjh>
    115a:	ce 01       	movw	r24, r28
    115c:	8a 96       	adiw	r24, 0x2a	; 42
    115e:	55 dd       	rcall	.-1366   	; 0xc0a <_ZN8ENC28J6010packetSendEj>
    1160:	df 91       	pop	r29
    1162:	cf 91       	pop	r28
    1164:	1f 91       	pop	r17
    1166:	0f 91       	pop	r16
    1168:	08 95       	ret

0000116a <_ZN9EtherCard7sendUdpEPKhjjS1_j>:
    116a:	0f 93       	push	r16
    116c:	1f 93       	push	r17
    116e:	cf 93       	push	r28
    1170:	df 93       	push	r29
    1172:	d6 2f       	mov	r29, r22
    1174:	c7 2f       	mov	r28, r23
    1176:	ca 01       	movw	r24, r20
    1178:	a8 01       	movw	r20, r16
    117a:	b9 01       	movw	r22, r18
    117c:	84 df       	rcall	.-248    	; 0x1086 <_ZN9EtherCard10udpPrepareEjPKhj>
    117e:	8d 2f       	mov	r24, r29
    1180:	9c 2f       	mov	r25, r28
    1182:	81 30       	cpi	r24, 0x01	; 1
    1184:	22 e0       	ldi	r18, 0x02	; 2
    1186:	92 07       	cpc	r25, r18
    1188:	10 f0       	brcs	.+4      	; 0x118e <_ZN9EtherCard7sendUdpEPKhjjS1_j+0x24>
    118a:	80 e0       	ldi	r24, 0x00	; 0
    118c:	92 e0       	ldi	r25, 0x02	; 2
    118e:	cd df       	rcall	.-102    	; 0x112a <_ZN9EtherCard11udpTransmitEj>
    1190:	df 91       	pop	r29
    1192:	cf 91       	pop	r28
    1194:	1f 91       	pop	r17
    1196:	0f 91       	pop	r16
    1198:	08 95       	ret

0000119a <_ZN9EtherCard7setGwIpEPKh>:
    119a:	10 92 f1 04 	sts	0x04F1, r1	; 0x8004f1 <_ZN9EtherCard8delaycntE+0x1>
    119e:	10 92 f0 04 	sts	0x04F0, r1	; 0x8004f0 <_ZN9EtherCard8delaycntE>
    11a2:	21 e0       	ldi	r18, 0x01	; 1
    11a4:	20 93 10 05 	sts	0x0510, r18	; 0x800510 <_ZL9waitgwmac>
    11a8:	bc 01       	movw	r22, r24
    11aa:	8a ef       	ldi	r24, 0xFA	; 250
    11ac:	94 e0       	ldi	r25, 0x04	; 4
    11ae:	d3 c1       	rjmp	.+934    	; 0x1556 <_ZN9EtherCard6copyIpEPhPKh>
    11b0:	08 95       	ret

000011b2 <_ZN9EtherCard22updateBroadcastAddressEv>:
    11b2:	cf 93       	push	r28
    11b4:	df 93       	push	r29
    11b6:	e6 e0       	ldi	r30, 0x06	; 6
    11b8:	f5 e0       	ldi	r31, 0x05	; 5
    11ba:	c2 e0       	ldi	r28, 0x02	; 2
    11bc:	d5 e0       	ldi	r29, 0x05	; 5
    11be:	ae ef       	ldi	r26, 0xFE	; 254
    11c0:	b4 e0       	ldi	r27, 0x04	; 4
    11c2:	2a e0       	ldi	r18, 0x0A	; 10
    11c4:	35 e0       	ldi	r19, 0x05	; 5
    11c6:	91 91       	ld	r25, Z+
    11c8:	89 91       	ld	r24, Y+
    11ca:	80 95       	com	r24
    11cc:	89 2b       	or	r24, r25
    11ce:	8d 93       	st	X+, r24
    11d0:	e2 17       	cp	r30, r18
    11d2:	f3 07       	cpc	r31, r19
    11d4:	c1 f7       	brne	.-16     	; 0x11c6 <_ZN9EtherCard22updateBroadcastAddressEv+0x14>
    11d6:	df 91       	pop	r29
    11d8:	cf 91       	pop	r28
    11da:	08 95       	ret

000011dc <_ZN9EtherCard10packetLoopEj>:
	gPB[ICMP_CHECKSUM_P+1]++;
	gPB[ICMP_CHECKSUM_P] += 0x08;
	EtherCard::packetSend(len);
}

uint16_t EtherCard::packetLoop (uint16_t plen) {
    11dc:	cf 93       	push	r28
    11de:	df 93       	push	r29
    11e0:	ec 01       	movw	r28, r24
    if (plen==0) {
    11e2:	00 97       	sbiw	r24, 0x00	; 0
    11e4:	09 f0       	breq	.+2      	; 0x11e8 <_ZN9EtherCard10packetLoopEj+0xc>
    11e6:	3f c0       	rjmp	.+126    	; 0x1266 <_ZN9EtherCard10packetLoopEj+0x8a>
        //Check every 65536 (no-packet) cycles whether we need to retry ARP request for gateway
        if ((waitgwmac & WGW_INITIAL_ARP || waitgwmac & WGW_REFRESHING) &&
    11e8:	80 91 10 05 	lds	r24, 0x0510	; 0x800510 <_ZL9waitgwmac>
    11ec:	85 70       	andi	r24, 0x05	; 5
    11ee:	89 f0       	breq	.+34     	; 0x1212 <_ZN9EtherCard10packetLoopEj+0x36>
    11f0:	80 91 f0 04 	lds	r24, 0x04F0	; 0x8004f0 <_ZN9EtherCard8delaycntE>
    11f4:	90 91 f1 04 	lds	r25, 0x04F1	; 0x8004f1 <_ZN9EtherCard8delaycntE+0x1>
    11f8:	89 2b       	or	r24, r25
    11fa:	59 f4       	brne	.+22     	; 0x1212 <_ZN9EtherCard10packetLoopEj+0x36>
                delaycnt==0 && isLinkUp()) {
    11fc:	f3 dc       	rcall	.-1562   	; 0xbe4 <_ZN8ENC28J608isLinkUpEv>
}

uint16_t EtherCard::packetLoop (uint16_t plen) {
    if (plen==0) {
        //Check every 65536 (no-packet) cycles whether we need to retry ARP request for gateway
        if ((waitgwmac & WGW_INITIAL_ARP || waitgwmac & WGW_REFRESHING) &&
    11fe:	88 23       	and	r24, r24
    1200:	41 f0       	breq	.+16     	; 0x1212 <_ZN9EtherCard10packetLoopEj+0x36>
                delaycnt==0 && isLinkUp()) {
            client_arp_whohas(gwip);
    1202:	8a ef       	ldi	r24, 0xFA	; 250
    1204:	94 e0       	ldi	r25, 0x04	; 4
    1206:	0f df       	rcall	.-482    	; 0x1026 <_ZL17client_arp_whohasPh>
            waitgwmac |= WGW_ACCEPT_ARP_REPLY;
    1208:	80 91 10 05 	lds	r24, 0x0510	; 0x800510 <_ZL9waitgwmac>
    120c:	88 60       	ori	r24, 0x08	; 8
    120e:	80 93 10 05 	sts	0x0510, r24	; 0x800510 <_ZL9waitgwmac>
        }
        delaycnt++;
    1212:	80 91 f0 04 	lds	r24, 0x04F0	; 0x8004f0 <_ZN9EtherCard8delaycntE>
    1216:	90 91 f1 04 	lds	r25, 0x04F1	; 0x8004f1 <_ZN9EtherCard8delaycntE+0x1>
    121a:	01 96       	adiw	r24, 0x01	; 1
    121c:	90 93 f1 04 	sts	0x04F1, r25	; 0x8004f1 <_ZN9EtherCard8delaycntE+0x1>
    1220:	80 93 f0 04 	sts	0x04F0, r24	; 0x8004f0 <_ZN9EtherCard8delaycntE>

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, dnsip) && !has_dns_mac && !waiting_for_dns_mac) {
    1224:	66 ef       	ldi	r22, 0xF6	; 246
    1226:	74 e0       	ldi	r23, 0x04	; 4
    1228:	86 e0       	ldi	r24, 0x06	; 6
    122a:	95 e0       	ldi	r25, 0x05	; 5
    122c:	84 de       	rcall	.-760    	; 0xf36 <_ZL6is_lanPKhS0_>
    122e:	88 23       	and	r24, r24
    1230:	49 f0       	breq	.+18     	; 0x1244 <_ZN9EtherCard10packetLoopEj+0x68>
    1232:	80 91 19 05 	lds	r24, 0x0519	; 0x800519 <_ZL11has_dns_mac>
    1236:	81 11       	cpse	r24, r1
    1238:	05 c0       	rjmp	.+10     	; 0x1244 <_ZN9EtherCard10packetLoopEj+0x68>
    123a:	80 91 1a 05 	lds	r24, 0x051A	; 0x80051a <_ZL19waiting_for_dns_mac>
    123e:	88 23       	and	r24, r24
    1240:	09 f4       	brne	.+2      	; 0x1244 <_ZN9EtherCard10packetLoopEj+0x68>
    1242:	dc c0       	rjmp	.+440    	; 0x13fc <_ZN9EtherCard10packetLoopEj+0x220>
            client_arp_whohas(dnsip);
            waiting_for_dns_mac = true;
        }

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, hisip) && !has_dest_mac && !waiting_for_dest_mac) {
    1244:	62 ef       	ldi	r22, 0xF2	; 242
    1246:	74 e0       	ldi	r23, 0x04	; 4
    1248:	86 e0       	ldi	r24, 0x06	; 6
    124a:	95 e0       	ldi	r25, 0x05	; 5
    124c:	74 de       	rcall	.-792    	; 0xf36 <_ZL6is_lanPKhS0_>
    124e:	88 23       	and	r24, r24
    1250:	09 f4       	brne	.+2      	; 0x1254 <_ZN9EtherCard10packetLoopEj+0x78>
    1252:	f8 c0       	rjmp	.+496    	; 0x1444 <_ZN9EtherCard10packetLoopEj+0x268>
    1254:	80 91 17 05 	lds	r24, 0x0517	; 0x800517 <_ZL12has_dest_mac>
    1258:	81 11       	cpse	r24, r1
    125a:	f4 c0       	rjmp	.+488    	; 0x1444 <_ZN9EtherCard10packetLoopEj+0x268>
    125c:	80 91 18 05 	lds	r24, 0x0518	; 0x800518 <_ZL20waiting_for_dest_mac>
    1260:	81 11       	cpse	r24, r1
    1262:	f0 c0       	rjmp	.+480    	; 0x1444 <_ZN9EtherCard10packetLoopEj+0x268>
    1264:	d2 c0       	rjmp	.+420    	; 0x140a <_ZN9EtherCard10packetLoopEj+0x22e>
    return true;
}

static uint8_t eth_type_is_arp_and_my_ip(uint16_t len) {
    return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
    1266:	89 32       	cpi	r24, 0x29	; 41
    1268:	91 05       	cpc	r25, r1
    126a:	08 f4       	brcc	.+2      	; 0x126e <_ZN9EtherCard10packetLoopEj+0x92>
    126c:	d5 c0       	rjmp	.+426    	; 0x1418 <_ZN9EtherCard10packetLoopEj+0x23c>
        }
    return true;
}

static uint8_t eth_type_is_arp_and_my_ip(uint16_t len) {
    return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
    126e:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <_ZN8ENC28J606bufferE+0xc>
    1272:	88 30       	cpi	r24, 0x08	; 8
    1274:	09 f0       	breq	.+2      	; 0x1278 <_ZN9EtherCard10packetLoopEj+0x9c>
    1276:	e6 c0       	rjmp	.+460    	; 0x1444 <_ZN9EtherCard10packetLoopEj+0x268>
    1278:	80 91 fd 02 	lds	r24, 0x02FD	; 0x8002fd <_ZN8ENC28J606bufferE+0xd>
    127c:	86 30       	cpi	r24, 0x06	; 6
    127e:	09 f0       	breq	.+2      	; 0x1282 <_ZN9EtherCard10packetLoopEj+0xa6>
    1280:	dd c0       	rjmp	.+442    	; 0x143c <_ZN9EtherCard10packetLoopEj+0x260>
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
           memcmp(gPB + ETH_ARP_DST_IP_P, EtherCard::myip, IP_LEN) == 0;
    1282:	44 e0       	ldi	r20, 0x04	; 4
    1284:	50 e0       	ldi	r21, 0x00	; 0
    1286:	66 e0       	ldi	r22, 0x06	; 6
    1288:	75 e0       	ldi	r23, 0x05	; 5
    128a:	86 e1       	ldi	r24, 0x16	; 22
    128c:	93 e0       	ldi	r25, 0x03	; 3
    128e:	0e 94 95 13 	call	0x272a	; 0x272a <memcmp>
    return true;
}

static uint8_t eth_type_is_arp_and_my_ip(uint16_t len) {
    return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
    1292:	89 2b       	or	r24, r25
    1294:	09 f0       	breq	.+2      	; 0x1298 <_ZN9EtherCard10packetLoopEj+0xbc>
    1296:	d2 c0       	rjmp	.+420    	; 0x143c <_ZN9EtherCard10packetLoopEj+0x260>
    EtherCard::copyIp(gPB + IP_SRC_P, EtherCard::myip);
    fill_ip_hdr_checksum();
}

static void make_arp_answer_from_request() {
    setMACs(gPB + ETH_SRC_MAC);
    1298:	c3 c0       	rjmp	.+390    	; 0x1420 <_ZN9EtherCard10packetLoopEj+0x244>
    129a:	86 ef       	ldi	r24, 0xF6	; 246
    129c:	92 e0       	ldi	r25, 0x02	; 2
    129e:	84 de       	rcall	.-760    	; 0xfa8 <_ZL7setMACsPKh>
    gPB[ETH_ARP_OPCODE_H_P] = ETH_ARP_OPCODE_REPLY_H_V;
    12a0:	e0 ef       	ldi	r30, 0xF0	; 240
    12a2:	f2 e0       	ldi	r31, 0x02	; 2
    12a4:	14 8a       	std	Z+20, r1	; 0x14
    gPB[ETH_ARP_OPCODE_L_P] = ETH_ARP_OPCODE_REPLY_L_V;
    12a6:	82 e0       	ldi	r24, 0x02	; 2
    EtherCard::copyMac(gPB + ETH_ARP_DST_MAC_P, gPB + ETH_ARP_SRC_MAC_P);
    12a8:	85 8b       	std	Z+21, r24	; 0x15
    12aa:	66 e0       	ldi	r22, 0x06	; 6
    12ac:	73 e0       	ldi	r23, 0x03	; 3
    12ae:	80 e1       	ldi	r24, 0x10	; 16
    12b0:	93 e0       	ldi	r25, 0x03	; 3
    EtherCard::copyMac(gPB + ETH_ARP_SRC_MAC_P, EtherCard::mymac);
    12b2:	5e d1       	rcall	.+700    	; 0x1570 <_ZN9EtherCard7copyMacEPhPKh>
    12b4:	6a e0       	ldi	r22, 0x0A	; 10
    12b6:	75 e0       	ldi	r23, 0x05	; 5
    12b8:	86 e0       	ldi	r24, 0x06	; 6
    12ba:	93 e0       	ldi	r25, 0x03	; 3
    EtherCard::copyIp(gPB + ETH_ARP_DST_IP_P, gPB + ETH_ARP_SRC_IP_P);
    12bc:	59 d1       	rcall	.+690    	; 0x1570 <_ZN9EtherCard7copyMacEPhPKh>
    12be:	6c e0       	ldi	r22, 0x0C	; 12
    12c0:	73 e0       	ldi	r23, 0x03	; 3
    12c2:	86 e1       	ldi	r24, 0x16	; 22
    12c4:	93 e0       	ldi	r25, 0x03	; 3
    EtherCard::copyIp(gPB + ETH_ARP_SRC_IP_P, EtherCard::myip);
    12c6:	47 d1       	rcall	.+654    	; 0x1556 <_ZN9EtherCard6copyIpEPhPKh>
    12c8:	66 e0       	ldi	r22, 0x06	; 6
    12ca:	75 e0       	ldi	r23, 0x05	; 5
    12cc:	8c e0       	ldi	r24, 0x0C	; 12
    12ce:	93 e0       	ldi	r25, 0x03	; 3
    12d0:	42 d1       	rcall	.+644    	; 0x1556 <_ZN9EtherCard6copyIpEPhPKh>
    EtherCard::packetSend(42);
    12d2:	8a e2       	ldi	r24, 0x2A	; 42
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	99 dc       	rcall	.-1742   	; 0xc0a <_ZN8ENC28J6010packetSendEj>
    12d8:	80 91 10 05 	lds	r24, 0x0510	; 0x800510 <_ZL9waitgwmac>

    if (eth_type_is_arp_and_my_ip(plen))
    {   //Service ARP request
        if (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REQ_L_V)
            make_arp_answer_from_request();
        if (waitgwmac & WGW_ACCEPT_ARP_REPLY && (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REPLY_L_V) && client_store_mac(gwip, gwmacaddr))
    12dc:	83 ff       	sbrs	r24, 3
    12de:	0e c0       	rjmp	.+28     	; 0x12fc <_ZN9EtherCard10packetLoopEj+0x120>
    12e0:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <_ZN8ENC28J606bufferE+0x15>
    12e4:	82 30       	cpi	r24, 0x02	; 2
    12e6:	51 f4       	brne	.+20     	; 0x12fc <_ZN9EtherCard10packetLoopEj+0x120>
    12e8:	61 e1       	ldi	r22, 0x11	; 17
    12ea:	75 e0       	ldi	r23, 0x05	; 5
    12ec:	8a ef       	ldi	r24, 0xFA	; 250
    12ee:	94 e0       	ldi	r25, 0x04	; 4
    12f0:	84 de       	rcall	.-760    	; 0xffa <_ZL16client_store_macPhS_>
    12f2:	88 23       	and	r24, r24
    12f4:	19 f0       	breq	.+6      	; 0x12fc <_ZN9EtherCard10packetLoopEj+0x120>
    12f6:	82 e0       	ldi	r24, 0x02	; 2
            waitgwmac = WGW_HAVE_GW_MAC;
    12f8:	80 93 10 05 	sts	0x0510, r24	; 0x800510 <_ZL9waitgwmac>
    12fc:	80 91 19 05 	lds	r24, 0x0519	; 0x800519 <_ZL11has_dns_mac>
        if (!has_dns_mac && waiting_for_dns_mac && client_store_mac(dnsip, destmacaddr)) {
    1300:	81 11       	cpse	r24, r1
    1302:	10 c0       	rjmp	.+32     	; 0x1324 <_ZN9EtherCard10packetLoopEj+0x148>
    1304:	80 91 1a 05 	lds	r24, 0x051A	; 0x80051a <_ZL19waiting_for_dns_mac>
    1308:	88 23       	and	r24, r24
    130a:	61 f0       	breq	.+24     	; 0x1324 <_ZN9EtherCard10packetLoopEj+0x148>
    130c:	6b e1       	ldi	r22, 0x1B	; 27
    130e:	75 e0       	ldi	r23, 0x05	; 5
    1310:	86 ef       	ldi	r24, 0xF6	; 246
    1312:	94 e0       	ldi	r25, 0x04	; 4
    1314:	72 de       	rcall	.-796    	; 0xffa <_ZL16client_store_macPhS_>
    1316:	88 23       	and	r24, r24
    1318:	29 f0       	breq	.+10     	; 0x1324 <_ZN9EtherCard10packetLoopEj+0x148>
    131a:	81 e0       	ldi	r24, 0x01	; 1
            has_dns_mac = true;
    131c:	80 93 19 05 	sts	0x0519, r24	; 0x800519 <_ZL11has_dns_mac>
    1320:	10 92 1a 05 	sts	0x051A, r1	; 0x80051a <_ZL19waiting_for_dns_mac>
            waiting_for_dns_mac = false;
    1324:	80 91 17 05 	lds	r24, 0x0517	; 0x800517 <_ZL12has_dest_mac>
        }
        if (!has_dest_mac && waiting_for_dest_mac && client_store_mac(hisip, destmacaddr)) {
    1328:	81 11       	cpse	r24, r1
    132a:	8c c0       	rjmp	.+280    	; 0x1444 <_ZN9EtherCard10packetLoopEj+0x268>
    132c:	80 91 18 05 	lds	r24, 0x0518	; 0x800518 <_ZL20waiting_for_dest_mac>
    1330:	88 23       	and	r24, r24
    1332:	09 f4       	brne	.+2      	; 0x1336 <_ZN9EtherCard10packetLoopEj+0x15a>
    1334:	87 c0       	rjmp	.+270    	; 0x1444 <_ZN9EtherCard10packetLoopEj+0x268>
    1336:	6b e1       	ldi	r22, 0x1B	; 27
    1338:	75 e0       	ldi	r23, 0x05	; 5
    133a:	82 ef       	ldi	r24, 0xF2	; 242
    133c:	94 e0       	ldi	r25, 0x04	; 4
    133e:	5d de       	rcall	.-838    	; 0xffa <_ZL16client_store_macPhS_>
    1340:	88 23       	and	r24, r24
    1342:	09 f4       	brne	.+2      	; 0x1346 <_ZN9EtherCard10packetLoopEj+0x16a>
    1344:	7f c0       	rjmp	.+254    	; 0x1444 <_ZN9EtherCard10packetLoopEj+0x268>
    1346:	81 e0       	ldi	r24, 0x01	; 1
            has_dest_mac = true;
    1348:	80 93 17 05 	sts	0x0517, r24	; 0x800517 <_ZL12has_dest_mac>
    134c:	10 92 18 05 	sts	0x0518, r1	; 0x800518 <_ZL20waiting_for_dest_mac>
            waiting_for_dest_mac = false;
    1350:	79 c0       	rjmp	.+242    	; 0x1444 <_ZN9EtherCard10packetLoopEj+0x268>
    1352:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <_ZN8ENC28J606bufferE+0xc>
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
           memcmp(gPB + ETH_ARP_DST_IP_P, EtherCard::myip, IP_LEN) == 0;
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
    1356:	88 30       	cpi	r24, 0x08	; 8
    1358:	09 f0       	breq	.+2      	; 0x135c <_ZN9EtherCard10packetLoopEj+0x180>
    135a:	74 c0       	rjmp	.+232    	; 0x1444 <_ZN9EtherCard10packetLoopEj+0x268>
    135c:	80 91 fd 02 	lds	r24, 0x02FD	; 0x8002fd <_ZN8ENC28J606bufferE+0xd>
    1360:	81 11       	cpse	r24, r1
    1362:	70 c0       	rjmp	.+224    	; 0x1444 <_ZN9EtherCard10packetLoopEj+0x268>
    1364:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <_ZN8ENC28J606bufferE+0xe>
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
    1368:	85 34       	cpi	r24, 0x45	; 69
    136a:	09 f0       	breq	.+2      	; 0x136e <_ZN9EtherCard10packetLoopEj+0x192>
    136c:	6b c0       	rjmp	.+214    	; 0x1444 <_ZN9EtherCard10packetLoopEj+0x268>
    136e:	44 e0       	ldi	r20, 0x04	; 4
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
           (memcmp(gPB + IP_DST_P, EtherCard::myip, IP_LEN) == 0  //not my IP
    1370:	50 e0       	ldi	r21, 0x00	; 0
    1372:	66 e0       	ldi	r22, 0x06	; 6
    1374:	75 e0       	ldi	r23, 0x05	; 5
    1376:	8e e0       	ldi	r24, 0x0E	; 14
    1378:	93 e0       	ldi	r25, 0x03	; 3
    137a:	0e 94 95 13 	call	0x272a	; 0x272a <memcmp>
    137e:	89 2b       	or	r24, r25
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
    1380:	09 f4       	brne	.+2      	; 0x1384 <_ZN9EtherCard10packetLoopEj+0x1a8>
    1382:	54 c0       	rjmp	.+168    	; 0x142c <_ZN9EtherCard10packetLoopEj+0x250>
    1384:	44 e0       	ldi	r20, 0x04	; 4
           (memcmp(gPB + IP_DST_P, EtherCard::myip, IP_LEN) == 0  //not my IP
            || (memcmp(gPB + IP_DST_P, EtherCard::broadcastip, IP_LEN) == 0) //not subnet broadcast
    1386:	50 e0       	ldi	r21, 0x00	; 0
    1388:	6e ef       	ldi	r22, 0xFE	; 254
    138a:	74 e0       	ldi	r23, 0x04	; 4
    138c:	8e e0       	ldi	r24, 0x0E	; 14
    138e:	93 e0       	ldi	r25, 0x03	; 3
    1390:	0e 94 95 13 	call	0x272a	; 0x272a <memcmp>
    1394:	89 2b       	or	r24, r25
    1396:	09 f4       	brne	.+2      	; 0x139a <_ZN9EtherCard10packetLoopEj+0x1be>
    1398:	49 c0       	rjmp	.+146    	; 0x142c <_ZN9EtherCard10packetLoopEj+0x250>
    139a:	44 e0       	ldi	r20, 0x04	; 4
            || (memcmp(gPB + IP_DST_P, allOnes, IP_LEN) == 0)); //not global broadcasts
    139c:	50 e0       	ldi	r21, 0x00	; 0
    139e:	65 e2       	ldi	r22, 0x25	; 37
    13a0:	72 e0       	ldi	r23, 0x02	; 2
    13a2:	8e e0       	ldi	r24, 0x0E	; 14
    13a4:	93 e0       	ldi	r25, 0x03	; 3
    13a6:	0e 94 95 13 	call	0x272a	; 0x272a <memcmp>
    13aa:	89 2b       	or	r24, r25
    13ac:	09 f0       	breq	.+2      	; 0x13b0 <_ZN9EtherCard10packetLoopEj+0x1d4>
    13ae:	4a c0       	rjmp	.+148    	; 0x1444 <_ZN9EtherCard10packetLoopEj+0x268>
    13b0:	3d c0       	rjmp	.+122    	; 0x142c <_ZN9EtherCard10packetLoopEj+0x250>
    13b2:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <_ZN8ENC28J606bufferE+0x22>
        //!@todo Add other protocols (and make each optional at compile time)
        return 0;
    }
	
	//To handle pinging
	if (gPB[IP_PROTO_P]==IP_PROTO_ICMP_V && gPB[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V)
    13b6:	88 30       	cpi	r24, 0x08	; 8
    13b8:	c9 f4       	brne	.+50     	; 0x13ec <_ZN9EtherCard10packetLoopEj+0x210>
	{   //Service ICMP echo request (ping)
		if (icmp_cb)
    13ba:	e0 91 21 05 	lds	r30, 0x0521	; 0x800521 <_ZL7icmp_cb>
    13be:	f0 91 22 05 	lds	r31, 0x0522	; 0x800522 <_ZL7icmp_cb+0x1>
    13c2:	30 97       	sbiw	r30, 0x00	; 0
    13c4:	19 f0       	breq	.+6      	; 0x13cc <_ZN9EtherCard10packetLoopEj+0x1f0>
		(*icmp_cb)(&(gPB[IP_SRC_P]));
    13c6:	8a e0       	ldi	r24, 0x0A	; 10
    13c8:	93 e0       	ldi	r25, 0x03	; 3
    13ca:	19 95       	eicall
void EtherCard::registerPingCallback (void (*callback)(uint8_t *srcip)) {
    icmp_cb = callback;
}

static void make_echo_reply_from_request(uint16_t len) {
	make_eth_ip();
    13cc:	f7 dd       	rcall	.-1042   	; 0xfbc <_ZL11make_eth_ipv>
	gPB[ICMP_TYPE_P] = ICMP_TYPE_ECHOREPLY_V;
    13ce:	e0 ef       	ldi	r30, 0xF0	; 240
    13d0:	f2 e0       	ldi	r31, 0x02	; 2
	if (gPB[ICMP_CHECKSUM_P] > (0xFF-0x08))
    13d2:	12 a2       	std	Z+34, r1	; 0x22
    13d4:	84 a1       	ldd	r24, Z+36	; 0x24
    13d6:	88 3f       	cpi	r24, 0xF8	; 248
	gPB[ICMP_CHECKSUM_P+1]++;
    13d8:	18 f0       	brcs	.+6      	; 0x13e0 <_ZN9EtherCard10packetLoopEj+0x204>
    13da:	95 a1       	ldd	r25, Z+37	; 0x25
    13dc:	9f 5f       	subi	r25, 0xFF	; 255
	gPB[ICMP_CHECKSUM_P] += 0x08;
    13de:	95 a3       	std	Z+37, r25	; 0x25
    13e0:	88 5f       	subi	r24, 0xF8	; 248
	EtherCard::packetSend(len);
    13e2:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <_ZN8ENC28J606bufferE+0x24>
    13e6:	ce 01       	movw	r24, r28
    13e8:	10 dc       	rcall	.-2016   	; 0xc0a <_ZN8ENC28J6010packetSendEj>
		make_echo_reply_from_request(plen);
		return 0;
	}

#if ETHERCARD_UDPSERVER
    if (ether.udpServerListening() && gPB[IP_PROTO_P]==IP_PROTO_UDP_V)
    13ea:	2c c0       	rjmp	.+88     	; 0x1444 <_ZN9EtherCard10packetLoopEj+0x268>
    13ec:	4a d0       	rcall	.+148    	; 0x1482 <_ZN9EtherCard18udpServerListeningEv>
    13ee:	88 23       	and	r24, r24
    13f0:	49 f1       	breq	.+82     	; 0x1444 <_ZN9EtherCard10packetLoopEj+0x268>
    13f2:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <_ZN8ENC28J606bufferE+0x17>
    13f6:	81 31       	cpi	r24, 0x11	; 17
    13f8:	29 f5       	brne	.+74     	; 0x1444 <_ZN9EtherCard10packetLoopEj+0x268>
        }
        delaycnt++;

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, dnsip) && !has_dns_mac && !waiting_for_dns_mac) {
            client_arp_whohas(dnsip);
    13fa:	1d c0       	rjmp	.+58     	; 0x1436 <_ZN9EtherCard10packetLoopEj+0x25a>
    13fc:	86 ef       	ldi	r24, 0xF6	; 246
    13fe:	94 e0       	ldi	r25, 0x04	; 4
    1400:	12 de       	rcall	.-988    	; 0x1026 <_ZL17client_arp_whohasPh>
            waiting_for_dns_mac = true;
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	80 93 1a 05 	sts	0x051A, r24	; 0x80051a <_ZL19waiting_for_dns_mac>
    1408:	1d cf       	rjmp	.-454    	; 0x1244 <_ZN9EtherCard10packetLoopEj+0x68>
        }

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, hisip) && !has_dest_mac && !waiting_for_dest_mac) {
            client_arp_whohas(hisip);
    140a:	82 ef       	ldi	r24, 0xF2	; 242
    140c:	94 e0       	ldi	r25, 0x04	; 4
    140e:	0b de       	rcall	.-1002   	; 0x1026 <_ZL17client_arp_whohasPh>
    1410:	81 e0       	ldi	r24, 0x01	; 1
            waiting_for_dest_mac = true;
    1412:	80 93 18 05 	sts	0x0518, r24	; 0x800518 <_ZL20waiting_for_dest_mac>
    1416:	16 c0       	rjmp	.+44     	; 0x1444 <_ZN9EtherCard10packetLoopEj+0x268>
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
    1418:	8a 97       	sbiw	r24, 0x2a	; 42
    141a:	08 f0       	brcs	.+2      	; 0x141e <_ZN9EtherCard10packetLoopEj+0x242>
    141c:	9a cf       	rjmp	.-204    	; 0x1352 <_ZN9EtherCard10packetLoopEj+0x176>
    141e:	12 c0       	rjmp	.+36     	; 0x1444 <_ZN9EtherCard10packetLoopEj+0x268>
        return 0;
    }

    if (eth_type_is_arp_and_my_ip(plen))
    {   //Service ARP request
        if (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REQ_L_V)
    1420:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <_ZN8ENC28J606bufferE+0x15>
    1424:	81 30       	cpi	r24, 0x01	; 1
    1426:	09 f0       	breq	.+2      	; 0x142a <_ZN9EtherCard10packetLoopEj+0x24e>
    1428:	57 cf       	rjmp	.-338    	; 0x12d8 <_ZN9EtherCard10packetLoopEj+0xfc>
    142a:	37 cf       	rjmp	.-402    	; 0x129a <_ZN9EtherCard10packetLoopEj+0xbe>
        //!@todo Add other protocols (and make each optional at compile time)
        return 0;
    }
	
	//To handle pinging
	if (gPB[IP_PROTO_P]==IP_PROTO_ICMP_V && gPB[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V)
    142c:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <_ZN8ENC28J606bufferE+0x17>
    1430:	81 30       	cpi	r24, 0x01	; 1
    1432:	e1 f6       	brne	.-72     	; 0x13ec <_ZN9EtherCard10packetLoopEj+0x210>
    1434:	be cf       	rjmp	.-132    	; 0x13b2 <_ZN9EtherCard10packetLoopEj+0x1d6>
	}

#if ETHERCARD_UDPSERVER
    if (ether.udpServerListening() && gPB[IP_PROTO_P]==IP_PROTO_UDP_V)
    {   //Call UDP server handler (callback) if one is defined for this packet
        if(ether.udpServerHasProcessedPacket(plen))
    1436:	ce 01       	movw	r24, r28
    1438:	2b d0       	rcall	.+86     	; 0x1490 <_ZN9EtherCard27udpServerHasProcessedPacketEj>
    143a:	04 c0       	rjmp	.+8      	; 0x1444 <_ZN9EtherCard10packetLoopEj+0x268>
    143c:	ca 32       	cpi	r28, 0x2A	; 42
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
    143e:	d1 05       	cpc	r29, r1
    1440:	08 f0       	brcs	.+2      	; 0x1444 <_ZN9EtherCard10packetLoopEj+0x268>
    1442:	8c cf       	rjmp	.-232    	; 0x135c <_ZN9EtherCard10packetLoopEj+0x180>
    1444:	80 e0       	ldi	r24, 0x00	; 0

    if (plen<54 || gPB[IP_PROTO_P]!=IP_PROTO_TCP_V )
        return 0; //from here on we are only interested in TCP-packets; these are longer than 54 bytes
		
	return 0;
}
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	df 91       	pop	r29
    144a:	cf 91       	pop	r28
    144c:	08 95       	ret

0000144e <_ZN9EtherCard21udpServerListenOnPortEPFvjPhjPKcjEj>:
    144e:	9c 01       	movw	r18, r24
    {
        if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((uint8_t) listeners[i].port)) {
            listeners[i].listening = true;
        }
    }
}
    1450:	90 91 23 05 	lds	r25, 0x0523	; 0x800523 <numListeners>
    1454:	98 30       	cpi	r25, 0x08	; 8
    1456:	a0 f4       	brcc	.+40     	; 0x1480 <_ZN9EtherCard21udpServerListenOnPortEPFvjPhjPKcjEj+0x32>
    1458:	e9 2f       	mov	r30, r25
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	af 01       	movw	r20, r30
    145e:	44 0f       	add	r20, r20
    1460:	55 1f       	adc	r21, r21
    1462:	44 0f       	add	r20, r20
    1464:	55 1f       	adc	r21, r21
    1466:	e4 0f       	add	r30, r20
    1468:	f5 1f       	adc	r31, r21
    146a:	ec 5d       	subi	r30, 0xDC	; 220
    146c:	fa 4f       	sbci	r31, 0xFA	; 250
    146e:	31 83       	std	Z+1, r19	; 0x01
    1470:	20 83       	st	Z, r18
    1472:	73 83       	std	Z+3, r23	; 0x03
    1474:	62 83       	std	Z+2, r22	; 0x02
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	84 83       	std	Z+4, r24	; 0x04
    147a:	9f 5f       	subi	r25, 0xFF	; 255
    147c:	90 93 23 05 	sts	0x0523, r25	; 0x800523 <numListeners>
    1480:	08 95       	ret

00001482 <_ZN9EtherCard18udpServerListeningEv>:

bool EtherCard::udpServerListening() {
    return numListeners > 0;
    1482:	81 e0       	ldi	r24, 0x01	; 1
    1484:	90 91 23 05 	lds	r25, 0x0523	; 0x800523 <numListeners>
    1488:	91 11       	cpse	r25, r1
    148a:	01 c0       	rjmp	.+2      	; 0x148e <_ZN9EtherCard18udpServerListeningEv+0xc>
    148c:	80 e0       	ldi	r24, 0x00	; 0
}
    148e:	08 95       	ret

00001490 <_ZN9EtherCard27udpServerHasProcessedPacketEj>:

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    1490:	8f 92       	push	r8
    1492:	9f 92       	push	r9
    1494:	bf 92       	push	r11
    1496:	cf 92       	push	r12
    1498:	df 92       	push	r13
    149a:	ef 92       	push	r14
    149c:	ff 92       	push	r15
    149e:	0f 93       	push	r16
    14a0:	1f 93       	push	r17
    14a2:	cf 93       	push	r28
    14a4:	df 93       	push	r29
    bool packetProcessed = false;
    for(int i = 0; i < numListeners; i++)
    14a6:	80 91 23 05 	lds	r24, 0x0523	; 0x800523 <numListeners>
    14aa:	88 23       	and	r24, r24
    14ac:	09 f4       	brne	.+2      	; 0x14b0 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x20>
    14ae:	46 c0       	rjmp	.+140    	; 0x153c <_ZN9EtherCard27udpServerHasProcessedPacketEj+0xac>
    14b0:	c4 e2       	ldi	r28, 0x24	; 36
    14b2:	d5 e0       	ldi	r29, 0x05	; 5
    14b4:	e1 2c       	mov	r14, r1
    14b6:	f1 2c       	mov	r15, r1
    14b8:	80 e0       	ldi	r24, 0x00	; 0
    {
        if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((uint8_t) listeners[i].port) && listeners[i].listening)
    14ba:	0f 2e       	mov	r0, r31
    14bc:	f0 ef       	ldi	r31, 0xF0	; 240
    14be:	cf 2e       	mov	r12, r31
    14c0:	f2 e0       	ldi	r31, 0x02	; 2
    14c2:	df 2e       	mov	r13, r31
    14c4:	f0 2d       	mov	r31, r0
                listeners[i].port,
                gPB + IP_SRC_P,
                (gPB[UDP_SRC_PORT_H_P] << 8) | gPB[UDP_SRC_PORT_L_P],
                (const char *) (gPB + UDP_DATA_P),
                datalen);
            packetProcessed = true;
    14c6:	bb 24       	eor	r11, r11
    14c8:	b3 94       	inc	r11

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    bool packetProcessed = false;
    for(int i = 0; i < numListeners; i++)
    {
        if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((uint8_t) listeners[i].port) && listeners[i].listening)
    14ca:	aa 81       	ldd	r26, Y+2	; 0x02
    14cc:	bb 81       	ldd	r27, Y+3	; 0x03
    14ce:	f6 01       	movw	r30, r12
    14d0:	24 a1       	ldd	r18, Z+36	; 0x24
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	4b 2f       	mov	r20, r27
    14d6:	55 27       	eor	r21, r21
    14d8:	24 17       	cp	r18, r20
    14da:	35 07       	cpc	r19, r21
    14dc:	21 f5       	brne	.+72     	; 0x1526 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x96>
    14de:	25 a1       	ldd	r18, Z+37	; 0x25
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	ad 01       	movw	r20, r26
    14e4:	55 27       	eor	r21, r21
    14e6:	24 17       	cp	r18, r20
    14e8:	35 07       	cpc	r19, r21
    14ea:	e9 f4       	brne	.+58     	; 0x1526 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x96>
    14ec:	9c 81       	ldd	r25, Y+4	; 0x04
    14ee:	99 23       	and	r25, r25
    14f0:	d1 f0       	breq	.+52     	; 0x1526 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x96>
            listeners[i].callback(
                listeners[i].port,
                gPB + IP_SRC_P,
                (gPB[UDP_SRC_PORT_H_P] << 8) | gPB[UDP_SRC_PORT_L_P],
                (const char *) (gPB + UDP_DATA_P),
                datalen);
    14f2:	07 a1       	ldd	r16, Z+39	; 0x27
    14f4:	10 e0       	ldi	r17, 0x00	; 0
    14f6:	08 50       	subi	r16, 0x08	; 8
    14f8:	11 09       	sbc	r17, r1
    14fa:	86 a1       	ldd	r24, Z+38	; 0x26
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	98 2f       	mov	r25, r24
    1500:	88 27       	eor	r24, r24
    1502:	08 0f       	add	r16, r24
    1504:	19 1f       	adc	r17, r25
    1506:	42 a1       	ldd	r20, Z+34	; 0x22
    1508:	50 e0       	ldi	r21, 0x00	; 0
    150a:	54 2f       	mov	r21, r20
    150c:	44 27       	eor	r20, r20
    150e:	83 a1       	ldd	r24, Z+35	; 0x23
    1510:	48 2b       	or	r20, r24
    1512:	88 80       	ld	r8, Y
    1514:	99 80       	ldd	r9, Y+1	; 0x01
    1516:	2a e1       	ldi	r18, 0x1A	; 26
    1518:	33 e0       	ldi	r19, 0x03	; 3
    151a:	6a e0       	ldi	r22, 0x0A	; 10
    151c:	73 e0       	ldi	r23, 0x03	; 3
    151e:	cd 01       	movw	r24, r26
    1520:	f4 01       	movw	r30, r8
    1522:	19 95       	eicall
            packetProcessed = true;
    1524:	8b 2d       	mov	r24, r11
    return numListeners > 0;
}

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    bool packetProcessed = false;
    for(int i = 0; i < numListeners; i++)
    1526:	ff ef       	ldi	r31, 0xFF	; 255
    1528:	ef 1a       	sub	r14, r31
    152a:	ff 0a       	sbc	r15, r31
    152c:	25 96       	adiw	r28, 0x05	; 5
    152e:	20 91 23 05 	lds	r18, 0x0523	; 0x800523 <numListeners>
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	e2 16       	cp	r14, r18
    1536:	f3 06       	cpc	r15, r19
    1538:	44 f2       	brlt	.-112    	; 0x14ca <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x3a>
    153a:	01 c0       	rjmp	.+2      	; 0x153e <_ZN9EtherCard27udpServerHasProcessedPacketEj+0xae>
bool EtherCard::udpServerListening() {
    return numListeners > 0;
}

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    bool packetProcessed = false;
    153c:	80 e0       	ldi	r24, 0x00	; 0
                datalen);
            packetProcessed = true;
        }
    }
    return packetProcessed;
}
    153e:	df 91       	pop	r29
    1540:	cf 91       	pop	r28
    1542:	1f 91       	pop	r17
    1544:	0f 91       	pop	r16
    1546:	ff 90       	pop	r15
    1548:	ef 90       	pop	r14
    154a:	df 90       	pop	r13
    154c:	cf 90       	pop	r12
    154e:	bf 90       	pop	r11
    1550:	9f 90       	pop	r9
    1552:	8f 90       	pop	r8
    1554:	08 95       	ret

00001556 <_ZN9EtherCard6copyIpEPhPKh>:
#include "../Peripherals/HardwareSerial.h"
#include <stdlib.h>
#include <ctype.h>

void EtherCard::copyIp (uint8_t *dst, const uint8_t *src) {
    memcpy(dst, src, IP_LEN);
    1556:	fb 01       	movw	r30, r22
    1558:	20 81       	ld	r18, Z
    155a:	31 81       	ldd	r19, Z+1	; 0x01
    155c:	fc 01       	movw	r30, r24
    155e:	31 83       	std	Z+1, r19	; 0x01
    1560:	20 83       	st	Z, r18
    1562:	fb 01       	movw	r30, r22
    1564:	22 81       	ldd	r18, Z+2	; 0x02
    1566:	33 81       	ldd	r19, Z+3	; 0x03
    1568:	fc 01       	movw	r30, r24
    156a:	33 83       	std	Z+3, r19	; 0x03
    156c:	22 83       	std	Z+2, r18	; 0x02
    156e:	08 95       	ret

00001570 <_ZN9EtherCard7copyMacEPhPKh>:
}

void EtherCard::copyMac (uint8_t *dst, const uint8_t *src) {
    1570:	dc 01       	movw	r26, r24
    memcpy(dst, src, ETH_LEN);
    1572:	96 e0       	ldi	r25, 0x06	; 6
    1574:	fb 01       	movw	r30, r22
    1576:	01 90       	ld	r0, Z+
    1578:	0d 92       	st	X+, r0
    157a:	9a 95       	dec	r25
    157c:	e1 f7       	brne	.-8      	; 0x1576 <_ZN9EtherCard7copyMacEPhPKh+0x6>
    157e:	08 95       	ret

00001580 <_ZN9EtherComm13CheckChecksumEPKch>:
	}
}

bool EtherComm::CheckChecksum(const char *data, uint8_t len){
  //data++; //Ignore first byte, the start byte.
  uint8_t checksum = (uint8_t)(*(data++)); //Start by 'adding' the command to the checksum
    1580:	fc 01       	movw	r30, r24
    1582:	20 81       	ld	r18, Z
  checksum += (uint8_t)(*(data++));
    1584:	dc 01       	movw	r26, r24
    1586:	12 96       	adiw	r26, 0x02	; 2
    1588:	81 81       	ldd	r24, Z+1	; 0x01
    158a:	92 2f       	mov	r25, r18
    158c:	98 0f       	add	r25, r24
  while(len-- > 0){
    158e:	3f ef       	ldi	r19, 0xFF	; 255
    1590:	36 0f       	add	r19, r22
    1592:	66 23       	and	r22, r22
    1594:	61 f0       	breq	.+24     	; 0x15ae <_ZN9EtherComm13CheckChecksumEPKch+0x2e>
    1596:	fd 01       	movw	r30, r26
    1598:	83 2f       	mov	r24, r19
    checksum += (uint8_t)(*(data++));
    159a:	21 91       	ld	r18, Z+
    159c:	92 0f       	add	r25, r18

bool EtherComm::CheckChecksum(const char *data, uint8_t len){
  //data++; //Ignore first byte, the start byte.
  uint8_t checksum = (uint8_t)(*(data++)); //Start by 'adding' the command to the checksum
  checksum += (uint8_t)(*(data++));
  while(len-- > 0){
    159e:	81 50       	subi	r24, 0x01	; 1
    15a0:	e0 f7       	brcc	.-8      	; 0x159a <_ZN9EtherComm13CheckChecksumEPKch+0x1a>
    15a2:	23 2f       	mov	r18, r19
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	2f 5f       	subi	r18, 0xFF	; 255
    15a8:	3f 4f       	sbci	r19, 0xFF	; 255
    15aa:	a2 0f       	add	r26, r18
    15ac:	b3 1f       	adc	r27, r19
    checksum += (uint8_t)(*(data++));
  }
//  Serial.println((uint8_t)(checksum & CHECKSUM_MASK));
  return (checksum & CHECKSUM_MASK) == (uint8_t)(*data);
    15ae:	81 e0       	ldi	r24, 0x01	; 1
    15b0:	2c 91       	ld	r18, X
    15b2:	29 13       	cpse	r18, r25
    15b4:	80 e0       	ldi	r24, 0x00	; 0
}
    15b6:	08 95       	ret

000015b8 <_Z10udpReceivejPhjPKcj>:

//char EtherComm::buffer[BUFFER_SIZE];
uint8_t* EtherComm::buffer = ether.buffer + UDP_DATA_P;

//callback that prints received packets to the serial port
void udpReceive(uint16_t dest_port, uint8_t src_ip[IP_LEN], uint16_t src_port, const char *data, uint16_t packetLen){
    15b8:	0f 93       	push	r16
    15ba:	1f 93       	push	r17
    15bc:	cf 93       	push	r28
    15be:	df 93       	push	r29
	}
	Serial.println();
	Serial.print("Checksum: ");
	Serial.println((uint8_t)(*index));
*/	
	if(packetLen >= 3){ //At minimum, start byte, command, and checksum.
    15c0:	a8 01       	movw	r20, r16
    15c2:	43 50       	subi	r20, 0x03	; 3
    15c4:	51 09       	sbc	r21, r1
    15c6:	4f 3f       	cpi	r20, 0xFF	; 255
    15c8:	51 05       	cpc	r21, r1
    15ca:	09 f0       	breq	.+2      	; 0x15ce <_Z10udpReceivejPhjPKcj+0x16>
    15cc:	88 f4       	brcc	.+34     	; 0x15f0 <_Z10udpReceivejPhjPKcj+0x38>
		if(packetLen <= 258){
			uint8_t dataLen = (uint8_t)(packetLen - 3);
			if((uint8_t)data[0] == START_BYTE){
    15ce:	f9 01       	movw	r30, r18
    15d0:	80 81       	ld	r24, Z
    15d2:	8f 3f       	cpi	r24, 0xFF	; 255
    15d4:	69 f4       	brne	.+26     	; 0x15f0 <_Z10udpReceivejPhjPKcj+0x38>
    15d6:	e9 01       	movw	r28, r18
	Serial.print("Checksum: ");
	Serial.println((uint8_t)(*index));
*/	
	if(packetLen >= 3){ //At minimum, start byte, command, and checksum.
		if(packetLen <= 258){
			uint8_t dataLen = (uint8_t)(packetLen - 3);
    15d8:	03 50       	subi	r16, 0x03	; 3
			if((uint8_t)data[0] == START_BYTE){
			//		Serial.print("Computed Checksum: ");
				if(EtherComm::CheckChecksum(data, dataLen)){
    15da:	60 2f       	mov	r22, r16
    15dc:	c9 01       	movw	r24, r18
    15de:	d0 df       	rcall	.-96     	; 0x1580 <_ZN9EtherComm13CheckChecksumEPKch>
    15e0:	88 23       	and	r24, r24
    15e2:	31 f0       	breq	.+12     	; 0x15f0 <_Z10udpReceivejPhjPKcj+0x38>
					EtherComm::CommandReceived((uint8_t)data[1], (const uint8_t*)(data + 2), dataLen);
    15e4:	be 01       	movw	r22, r28
    15e6:	6e 5f       	subi	r22, 0xFE	; 254
    15e8:	7f 4f       	sbci	r23, 0xFF	; 255
    15ea:	40 2f       	mov	r20, r16
    15ec:	89 81       	ldd	r24, Y+1	; 0x01
    15ee:	91 d9       	rcall	.-3294   	; 0x912 <_ZN9EtherComm15CommandReceivedEhPKhh>
				}
			}
		}
	}
}
    15f0:	df 91       	pop	r29
    15f2:	cf 91       	pop	r28
    15f4:	1f 91       	pop	r17
    15f6:	0f 91       	pop	r16
    15f8:	08 95       	ret

000015fa <_ZN9EtherComm5beginEjjRVhS1_h>:
  }
//  Serial.println((uint8_t)(checksum & CHECKSUM_MASK));
  return (checksum & CHECKSUM_MASK) == (uint8_t)(*data);
}

bool EtherComm::begin(uint16_t recvPort, uint16_t destPort, Register& csDDR, Register& csPort, uint8_t csPin){
    15fa:	0f 93       	push	r16
    15fc:	cf 93       	push	r28
    15fe:	df 93       	push	r29
    1600:	ec 01       	movw	r28, r24
    1602:	ca 01       	movw	r24, r20
    1604:	a9 01       	movw	r20, r18
    1606:	20 2f       	mov	r18, r16
  EtherComm::_recvPort = recvPort;
    1608:	d0 93 4f 05 	sts	0x054F, r29	; 0x80054f <_ZN9EtherComm9_recvPortE+0x1>
    160c:	c0 93 4e 05 	sts	0x054E, r28	; 0x80054e <_ZN9EtherComm9_recvPortE>
  EtherComm::_destPort = destPort;
    1610:	70 93 4d 05 	sts	0x054D, r23	; 0x80054d <_ZN9EtherComm9_destPortE+0x1>
    1614:	60 93 4c 05 	sts	0x054C, r22	; 0x80054c <_ZN9EtherComm9_destPortE>
  
  if (ether.begin(EtherComm::_mymac, csDDR, csPort, csPin) == 0) return false;
    1618:	bc 01       	movw	r22, r24
    161a:	86 e0       	ldi	r24, 0x06	; 6
    161c:	92 e0       	ldi	r25, 0x02	; 2
    161e:	d3 db       	rcall	.-2138   	; 0xdc6 <_ZN9EtherCard5beginEPKhRVhS3_h>
    1620:	88 23       	and	r24, r24
    1622:	79 f0       	breq	.+30     	; 0x1642 <_ZN9EtherComm5beginEjjRVhS1_h+0x48>
  ether.staticSetup(EtherComm::_myip, EtherComm::_gwip);
    1624:	20 e0       	ldi	r18, 0x00	; 0
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	40 e0       	ldi	r20, 0x00	; 0
    162a:	50 e0       	ldi	r21, 0x00	; 0
    162c:	6c e0       	ldi	r22, 0x0C	; 12
    162e:	72 e0       	ldi	r23, 0x02	; 2
    1630:	80 e1       	ldi	r24, 0x10	; 16
    1632:	92 e0       	ldi	r25, 0x02	; 2
    1634:	e1 db       	rcall	.-2110   	; 0xdf8 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_>
  ether.printIp("GW:  ", ether.gwip);
  ether.printIp("DNS: ", ether.dnsip);
  */
  
  //Register the udpSerialPrint() method to listen to port the receive port.
  ether.udpServerListenOnPort(&udpReceive, recvPort);
    1636:	be 01       	movw	r22, r28
    1638:	8c ed       	ldi	r24, 0xDC	; 220
    163a:	9a e0       	ldi	r25, 0x0A	; 10
    163c:	08 df       	rcall	.-496    	; 0x144e <_ZN9EtherCard21udpServerListenOnPortEPFvjPhjPKcjEj>
  
  return true;
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	01 c0       	rjmp	.+2      	; 0x1644 <_ZN9EtherComm5beginEjjRVhS1_h+0x4a>

bool EtherComm::begin(uint16_t recvPort, uint16_t destPort, Register& csDDR, Register& csPort, uint8_t csPin){
  EtherComm::_recvPort = recvPort;
  EtherComm::_destPort = destPort;
  
  if (ether.begin(EtherComm::_mymac, csDDR, csPort, csPin) == 0) return false;
    1642:	80 e0       	ldi	r24, 0x00	; 0
  
  //Register the udpSerialPrint() method to listen to port the receive port.
  ether.udpServerListenOnPort(&udpReceive, recvPort);
  
  return true;
}
    1644:	df 91       	pop	r29
    1646:	cf 91       	pop	r28
    1648:	0f 91       	pop	r16
    164a:	08 95       	ret

0000164c <_ZN9EtherComm11SendCommandEhh>:

void EtherComm::SendCommand(uint8_t cmd, uint8_t len){
    164c:	0f 93       	push	r16
    164e:	1f 93       	push	r17
    1650:	cf 93       	push	r28
    1652:	df 93       	push	r29
  EtherComm::buffer[0] = START_BYTE;
    1654:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    1658:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    165c:	9f ef       	ldi	r25, 0xFF	; 255
    165e:	90 83       	st	Z, r25
  EtherComm::buffer[1] = cmd;
    1660:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    1664:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    1668:	81 83       	std	Z+1, r24	; 0x01
  //EtherComm::buffer[2] = len;
  
  uint8_t checksum = START_BYTE + cmd;
    166a:	81 50       	subi	r24, 0x01	; 1
  uint8_t* index = &EtherComm::buffer[2]; //TODO why is char* being used? convert ot uint8_t*!!
    166c:	c0 91 00 02 	lds	r28, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    1670:	d0 91 01 02 	lds	r29, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    1674:	de 01       	movw	r26, r28
    1676:	12 96       	adiw	r26, 0x02	; 2
  uint8_t bytes = len;
  while(bytes-- > 0){
    1678:	4f ef       	ldi	r20, 0xFF	; 255
    167a:	46 0f       	add	r20, r22
    167c:	66 23       	and	r22, r22
    167e:	81 f0       	breq	.+32     	; 0x16a0 <_ZN9EtherComm11SendCommandEhh+0x54>
    1680:	fd 01       	movw	r30, r26
    1682:	50 e0       	ldi	r21, 0x00	; 0
    1684:	9a 01       	movw	r18, r20
    1686:	2d 5f       	subi	r18, 0xFD	; 253
    1688:	3f 4f       	sbci	r19, 0xFF	; 255
    168a:	2c 0f       	add	r18, r28
    168c:	3d 1f       	adc	r19, r29
    checksum += (uint8_t)(*(index++));  
    168e:	91 91       	ld	r25, Z+
    1690:	89 0f       	add	r24, r25
  //EtherComm::buffer[2] = len;
  
  uint8_t checksum = START_BYTE + cmd;
  uint8_t* index = &EtherComm::buffer[2]; //TODO why is char* being used? convert ot uint8_t*!!
  uint8_t bytes = len;
  while(bytes-- > 0){
    1692:	e2 17       	cp	r30, r18
    1694:	f3 07       	cpc	r31, r19
    1696:	d9 f7       	brne	.-10     	; 0x168e <_ZN9EtherComm11SendCommandEhh+0x42>
    1698:	4f 5f       	subi	r20, 0xFF	; 255
    169a:	5f 4f       	sbci	r21, 0xFF	; 255
    169c:	a4 0f       	add	r26, r20
    169e:	b5 1f       	adc	r27, r21
    checksum += (uint8_t)(*(index++));  
  }
  (*index) = (uint8_t)(checksum & CHECKSUM_MASK);
    16a0:	8c 93       	st	X, r24

  //Serial.print("Send: ");
  //Serial.println(len);
  ether.sendUdp(EtherComm::buffer, (uint16_t)len + (uint16_t)3, _recvPort, _destIP, _destPort);
    16a2:	00 91 4c 05 	lds	r16, 0x054C	; 0x80054c <_ZN9EtherComm9_destPortE>
    16a6:	10 91 4d 05 	lds	r17, 0x054D	; 0x80054d <_ZN9EtherComm9_destPortE+0x1>
    16aa:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <_ZN9EtherComm9_recvPortE>
    16ae:	50 91 4f 05 	lds	r21, 0x054F	; 0x80054f <_ZN9EtherComm9_recvPortE+0x1>
    16b2:	70 e0       	ldi	r23, 0x00	; 0
    16b4:	6d 5f       	subi	r22, 0xFD	; 253
    16b6:	7f 4f       	sbci	r23, 0xFF	; 255
    16b8:	22 e0       	ldi	r18, 0x02	; 2
    16ba:	32 e0       	ldi	r19, 0x02	; 2
    16bc:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    16c0:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    16c4:	52 dd       	rcall	.-1372   	; 0x116a <_ZN9EtherCard7sendUdpEPKhjjS1_j>
}
    16c6:	df 91       	pop	r29
    16c8:	cf 91       	pop	r28
    16ca:	1f 91       	pop	r17
    16cc:	0f 91       	pop	r16
    16ce:	08 95       	ret

000016d0 <main>:
#include "TestIMU.h"
#include <avr/interrupt.h>

int main(void){
	//TestIMU();
	sei(); //Enable global interrupts
    16d0:	78 94       	sei
	public:
	inline HardwareSerial(
	volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
	volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
	volatile uint8_t *ucsrc, volatile uint8_t *udr);
	void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    16d2:	26 e0       	ldi	r18, 0x06	; 6
    16d4:	40 e8       	ldi	r20, 0x80	; 128
    16d6:	55 e2       	ldi	r21, 0x25	; 37
    16d8:	60 e0       	ldi	r22, 0x00	; 0
    16da:	70 e0       	ldi	r23, 0x00	; 0
    16dc:	80 e5       	ldi	r24, 0x50	; 80
    16de:	95 e0       	ldi	r25, 0x05	; 5
    16e0:	0f d1       	rcall	.+542    	; 0x1900 <_ZN14HardwareSerial5beginEmh>
	Serial.begin(9600);
	Serial.println("\nInitializing...");
    16e2:	6b e2       	ldi	r22, 0x2B	; 43
    16e4:	72 e0       	ldi	r23, 0x02	; 2
    16e6:	80 e5       	ldi	r24, 0x50	; 80
    16e8:	95 e0       	ldi	r25, 0x05	; 5
	
	if(!rov.begin()){
    16ea:	83 d6       	rcall	.+3334   	; 0x23f2 <_ZN5Print7printlnEPKc>
    16ec:	bb d5       	rcall	.+2934   	; 0x2264 <_ZN5Robot5beginEv>
    16ee:	81 11       	cpse	r24, r1
    16f0:	06 c0       	rjmp	.+12     	; 0x16fe <main+0x2e>
		Serial.println("Failed to initialize robot.");
    16f2:	6c e3       	ldi	r22, 0x3C	; 60
    16f4:	72 e0       	ldi	r23, 0x02	; 2
    16f6:	80 e5       	ldi	r24, 0x50	; 80
    16f8:	95 e0       	ldi	r25, 0x05	; 5
    16fa:	7b d6       	rcall	.+3318   	; 0x23f2 <_ZN5Print7printlnEPKc>
    16fc:	ff cf       	rjmp	.-2      	; 0x16fc <main+0x2c>
		while(1);
	}
	Serial.println("Robot initialized.");
    16fe:	68 e5       	ldi	r22, 0x58	; 88
    1700:	72 e0       	ldi	r23, 0x02	; 2
    1702:	80 e5       	ldi	r24, 0x50	; 80
    1704:	95 e0       	ldi	r25, 0x05	; 5
    1706:	75 d6       	rcall	.+3306   	; 0x23f2 <_ZN5Print7printlnEPKc>
	
	if(!EtherComm::begin((uint16_t)6001, (uint16_t)6002, EthernetDDR, EthernetPort, EthernetPin_CS)){
    1708:	00 e2       	ldi	r16, 0x20	; 32
    170a:	22 e0       	ldi	r18, 0x02	; 2
    170c:	31 e0       	ldi	r19, 0x01	; 1
    170e:	41 e0       	ldi	r20, 0x01	; 1
    1710:	51 e0       	ldi	r21, 0x01	; 1
    1712:	62 e7       	ldi	r22, 0x72	; 114
    1714:	77 e1       	ldi	r23, 0x17	; 23
    1716:	81 e7       	ldi	r24, 0x71	; 113
    1718:	97 e1       	ldi	r25, 0x17	; 23
    171a:	6f df       	rcall	.-290    	; 0x15fa <_ZN9EtherComm5beginEjjRVhS1_h>
    171c:	81 11       	cpse	r24, r1
		Serial.println("Failed to access Ethernet controller.");
    171e:	06 c0       	rjmp	.+12     	; 0x172c <main+0x5c>
    1720:	6b e6       	ldi	r22, 0x6B	; 107
    1722:	72 e0       	ldi	r23, 0x02	; 2
    1724:	80 e5       	ldi	r24, 0x50	; 80
    1726:	95 e0       	ldi	r25, 0x05	; 5
		while(1);
	}
	Serial.println("Connected to controller.");
    1728:	64 d6       	rcall	.+3272   	; 0x23f2 <_ZN5Print7printlnEPKc>
    172a:	ff cf       	rjmp	.-2      	; 0x172a <main+0x5a>
    172c:	61 e9       	ldi	r22, 0x91	; 145
    172e:	72 e0       	ldi	r23, 0x02	; 2
    1730:	80 e5       	ldi	r24, 0x50	; 80
    1732:	95 e0       	ldi	r25, 0x05	; 5
  static bool begin(uint16_t recvPort, uint16_t destPort, Register& csDDR, Register& csPort, uint8_t csPin);

  friend void udpReceive(uint16_t dest_port, uint8_t src_ip[IP_LEN], uint16_t src_port, const char *data, uint16_t len);

  static void Loop(){
    ether.packetLoop(ether.packetReceive());
    1734:	5e d6       	rcall	.+3260   	; 0x23f2 <_ZN5Print7printlnEPKc>
    1736:	e2 da       	rcall	.-2620   	; 0xcfc <_ZN8ENC28J6013packetReceiveEv>
    1738:	51 dd       	rcall	.-1374   	; 0x11dc <_ZN9EtherCard10packetLoopEj>
    173a:	fd cf       	rjmp	.-6      	; 0x1736 <main+0x66>

0000173c <_ZN14HardwareSerial9availableEv>:
    173c:	fc 01       	movw	r30, r24
	#endif
	#if defined(HAVE_HWSERIAL2)
	if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
	#endif
	#if defined(HAVE_HWSERIAL3)
	if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    173e:	97 85       	ldd	r25, Z+15	; 0x0f
    1740:	20 89       	ldd	r18, Z+16	; 0x10
    1742:	89 2f       	mov	r24, r25
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	80 5c       	subi	r24, 0xC0	; 192
    1748:	9f 4f       	sbci	r25, 0xFF	; 255
    174a:	82 1b       	sub	r24, r18
    174c:	91 09       	sbc	r25, r1
    174e:	8f 73       	andi	r24, 0x3F	; 63
    1750:	99 27       	eor	r25, r25
    1752:	08 95       	ret

00001754 <_ZN14HardwareSerial4peekEv>:
    1754:	fc 01       	movw	r30, r24
    1756:	97 85       	ldd	r25, Z+15	; 0x0f
    1758:	80 89       	ldd	r24, Z+16	; 0x10
    175a:	98 17       	cp	r25, r24
    175c:	31 f0       	breq	.+12     	; 0x176a <_ZN14HardwareSerial4peekEv+0x16>
    175e:	80 89       	ldd	r24, Z+16	; 0x10
    1760:	e8 0f       	add	r30, r24
    1762:	f1 1d       	adc	r31, r1
    1764:	83 89       	ldd	r24, Z+19	; 0x13
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	08 95       	ret
    176a:	8f ef       	ldi	r24, 0xFF	; 255
    176c:	9f ef       	ldi	r25, 0xFF	; 255
    176e:	08 95       	ret

00001770 <_ZN14HardwareSerial4readEv>:
    1770:	fc 01       	movw	r30, r24
    1772:	97 85       	ldd	r25, Z+15	; 0x0f
    1774:	80 89       	ldd	r24, Z+16	; 0x10
    1776:	98 17       	cp	r25, r24
    1778:	61 f0       	breq	.+24     	; 0x1792 <_ZN14HardwareSerial4readEv+0x22>
    177a:	80 89       	ldd	r24, Z+16	; 0x10
    177c:	df 01       	movw	r26, r30
    177e:	a8 0f       	add	r26, r24
    1780:	b1 1d       	adc	r27, r1
    1782:	53 96       	adiw	r26, 0x13	; 19
    1784:	8c 91       	ld	r24, X
    1786:	90 89       	ldd	r25, Z+16	; 0x10
    1788:	9f 5f       	subi	r25, 0xFF	; 255
    178a:	9f 73       	andi	r25, 0x3F	; 63
    178c:	90 8b       	std	Z+16, r25	; 0x10
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	08 95       	ret
    1792:	8f ef       	ldi	r24, 0xFF	; 255
    1794:	9f ef       	ldi	r25, 0xFF	; 255
    1796:	08 95       	ret

00001798 <_ZN14HardwareSerial17availableForWriteEv>:
    1798:	fc 01       	movw	r30, r24
    179a:	21 89       	ldd	r18, Z+17	; 0x11
    179c:	32 89       	ldd	r19, Z+18	; 0x12
    179e:	23 17       	cp	r18, r19
    17a0:	38 f0       	brcs	.+14     	; 0x17b0 <_ZN14HardwareSerial17availableForWriteEv+0x18>
    17a2:	8f e3       	ldi	r24, 0x3F	; 63
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	82 1b       	sub	r24, r18
    17a8:	91 09       	sbc	r25, r1
    17aa:	83 0f       	add	r24, r19
    17ac:	91 1d       	adc	r25, r1
    17ae:	08 95       	ret
    17b0:	83 2f       	mov	r24, r19
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	82 1b       	sub	r24, r18
    17b6:	91 09       	sbc	r25, r1
    17b8:	01 97       	sbiw	r24, 0x01	; 1
    17ba:	08 95       	ret

000017bc <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    17bc:	fc 01       	movw	r30, r24
	// If interrupts are enabled, there must be more data in the output
	// buffer. Send the next byte
	unsigned char c = _tx_buffer[_tx_buffer_tail];
    17be:	82 89       	ldd	r24, Z+18	; 0x12
    17c0:	df 01       	movw	r26, r30
    17c2:	a8 0f       	add	r26, r24
    17c4:	b1 1d       	adc	r27, r1
    17c6:	ad 5a       	subi	r26, 0xAD	; 173
    17c8:	bf 4f       	sbci	r27, 0xFF	; 255
    17ca:	8c 91       	ld	r24, X
	_tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    17cc:	22 89       	ldd	r18, Z+18	; 0x12
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	2f 5f       	subi	r18, 0xFF	; 255
    17d2:	3f 4f       	sbci	r19, 0xFF	; 255
    17d4:	2f 73       	andi	r18, 0x3F	; 63
    17d6:	30 78       	andi	r19, 0x80	; 128
    17d8:	33 23       	and	r19, r19
    17da:	34 f4       	brge	.+12     	; 0x17e8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x2c>
    17dc:	21 50       	subi	r18, 0x01	; 1
    17de:	31 09       	sbc	r19, r1
    17e0:	20 6c       	ori	r18, 0xC0	; 192
    17e2:	3f 6f       	ori	r19, 0xFF	; 255
    17e4:	2f 5f       	subi	r18, 0xFF	; 255
    17e6:	3f 4f       	sbci	r19, 0xFF	; 255
    17e8:	22 8b       	std	Z+18, r18	; 0x12

	*_udr = c;
    17ea:	a4 85       	ldd	r26, Z+12	; 0x0c
    17ec:	b5 85       	ldd	r27, Z+13	; 0x0d
    17ee:	8c 93       	st	X, r24
	// location". This makes sure flush() won't return until the bytes
	// actually got written. Other r/w bits are preserved, and zeroes
	// written to the rest.

	#ifdef MPCM0
	*_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    17f0:	a6 81       	ldd	r26, Z+6	; 0x06
    17f2:	b7 81       	ldd	r27, Z+7	; 0x07
    17f4:	8c 91       	ld	r24, X
    17f6:	83 70       	andi	r24, 0x03	; 3
    17f8:	80 64       	ori	r24, 0x40	; 64
    17fa:	8c 93       	st	X, r24
	#else
	*_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
	#endif

	if (_tx_buffer_head == _tx_buffer_tail) {
    17fc:	91 89       	ldd	r25, Z+17	; 0x11
    17fe:	82 89       	ldd	r24, Z+18	; 0x12
    1800:	98 13       	cpse	r25, r24
    1802:	06 c0       	rjmp	.+12     	; 0x1810 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x54>
		// Buffer empty, so disable interrupts
		cbi(*_ucsrb, UDRIE0);
    1804:	00 84       	ldd	r0, Z+8	; 0x08
    1806:	f1 85       	ldd	r31, Z+9	; 0x09
    1808:	e0 2d       	mov	r30, r0
    180a:	80 81       	ld	r24, Z
    180c:	8f 7d       	andi	r24, 0xDF	; 223
    180e:	80 83       	st	Z, r24
    1810:	08 95       	ret

00001812 <_ZN14HardwareSerial5flushEv>:
	if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
	return tail - head - 1;
}

void HardwareSerial::flush()
{
    1812:	cf 93       	push	r28
    1814:	df 93       	push	r29
    1816:	ec 01       	movw	r28, r24
	// If we have never written a byte, no need to flush. This special
	// case is needed since there is no way to force the TXC (transmit
	// complete) bit to 1 during initialization
	if (!_written)
    1818:	8e 85       	ldd	r24, Y+14	; 0x0e
    181a:	88 23       	and	r24, r24
    181c:	d1 f0       	breq	.+52     	; 0x1852 <_ZN14HardwareSerial5flushEv+0x40>
	return;

	while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    181e:	e8 85       	ldd	r30, Y+8	; 0x08
    1820:	f9 85       	ldd	r31, Y+9	; 0x09
    1822:	80 81       	ld	r24, Z
    1824:	85 fd       	sbrc	r24, 5
    1826:	05 c0       	rjmp	.+10     	; 0x1832 <_ZN14HardwareSerial5flushEv+0x20>
    1828:	ae 81       	ldd	r26, Y+6	; 0x06
    182a:	bf 81       	ldd	r27, Y+7	; 0x07
    182c:	8c 91       	ld	r24, X
    182e:	86 fd       	sbrc	r24, 6
    1830:	10 c0       	rjmp	.+32     	; 0x1852 <_ZN14HardwareSerial5flushEv+0x40>
		if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1832:	0f b6       	in	r0, 0x3f	; 63
    1834:	07 fc       	sbrc	r0, 7
    1836:	f5 cf       	rjmp	.-22     	; 0x1822 <_ZN14HardwareSerial5flushEv+0x10>
    1838:	80 81       	ld	r24, Z
    183a:	85 ff       	sbrs	r24, 5
    183c:	f2 cf       	rjmp	.-28     	; 0x1822 <_ZN14HardwareSerial5flushEv+0x10>
    183e:	03 c0       	rjmp	.+6      	; 0x1846 <_ZN14HardwareSerial5flushEv+0x34>
		// Interrupts are globally disabled, but the DR empty
		// interrupt should be enabled, so poll the DR empty flag to
		// prevent deadlock
		if (bit_is_set(*_ucsra, UDRE0))
		_tx_udr_empty_irq();
    1840:	ce 01       	movw	r24, r28
    1842:	bc df       	rcall	.-136    	; 0x17bc <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1844:	ec cf       	rjmp	.-40     	; 0x181e <_ZN14HardwareSerial5flushEv+0xc>
	while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
		if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
		// Interrupts are globally disabled, but the DR empty
		// interrupt should be enabled, so poll the DR empty flag to
		// prevent deadlock
		if (bit_is_set(*_ucsra, UDRE0))
    1846:	ae 81       	ldd	r26, Y+6	; 0x06
    1848:	bf 81       	ldd	r27, Y+7	; 0x07
    184a:	8c 91       	ld	r24, X
    184c:	85 ff       	sbrs	r24, 5
    184e:	e9 cf       	rjmp	.-46     	; 0x1822 <_ZN14HardwareSerial5flushEv+0x10>
    1850:	f7 cf       	rjmp	.-18     	; 0x1840 <_ZN14HardwareSerial5flushEv+0x2e>
		_tx_udr_empty_irq();
	}
	// If we get here, nothing is queued anymore (DRIE is disabled) and
	// the hardware finished tranmission (TXC is set).
}
    1852:	df 91       	pop	r29
    1854:	cf 91       	pop	r28
    1856:	08 95       	ret

00001858 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    1858:	0f 93       	push	r16
    185a:	1f 93       	push	r17
    185c:	cf 93       	push	r28
    185e:	df 93       	push	r29
    1860:	ec 01       	movw	r28, r24
	_written = true;
    1862:	81 e0       	ldi	r24, 0x01	; 1
    1864:	8e 87       	std	Y+14, r24	; 0x0e
	// If the buffer and the data register is empty, just write the byte
	// to the data register and be done. This shortcut helps
	// significantly improve the effective datarate at high (>
	// 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
	if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1866:	99 89       	ldd	r25, Y+17	; 0x11
    1868:	8a 89       	ldd	r24, Y+18	; 0x12
    186a:	98 13       	cpse	r25, r24
    186c:	25 c0       	rjmp	.+74     	; 0x18b8 <_ZN14HardwareSerial5writeEh+0x60>
    186e:	ee 81       	ldd	r30, Y+6	; 0x06
    1870:	ff 81       	ldd	r31, Y+7	; 0x07
    1872:	80 81       	ld	r24, Z
    1874:	85 fd       	sbrc	r24, 5
    1876:	31 c0       	rjmp	.+98     	; 0x18da <_ZN14HardwareSerial5writeEh+0x82>
    1878:	1f c0       	rjmp	.+62     	; 0x18b8 <_ZN14HardwareSerial5writeEh+0x60>
	}
	tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
	// If the output buffer is full, there's nothing for it other than to
	// wait for the interrupt handler to empty it a bit
	while (i == _tx_buffer_tail) {
    187a:	8a 89       	ldd	r24, Y+18	; 0x12
    187c:	18 13       	cpse	r17, r24
    187e:	0b c0       	rjmp	.+22     	; 0x1896 <_ZN14HardwareSerial5writeEh+0x3e>
		if (bit_is_clear(SREG, SREG_I)) {
    1880:	0f b6       	in	r0, 0x3f	; 63
    1882:	07 fc       	sbrc	r0, 7
    1884:	fa cf       	rjmp	.-12     	; 0x187a <_ZN14HardwareSerial5writeEh+0x22>
			// Interrupts are disabled, so we'll have to poll the data
			// register empty flag ourselves. If it is set, pretend an
			// interrupt has happened and call the handler to free up
			// space for us.
			if(bit_is_set(*_ucsra, UDRE0))
    1886:	ee 81       	ldd	r30, Y+6	; 0x06
    1888:	ff 81       	ldd	r31, Y+7	; 0x07
    188a:	80 81       	ld	r24, Z
    188c:	85 ff       	sbrs	r24, 5
    188e:	f5 cf       	rjmp	.-22     	; 0x187a <_ZN14HardwareSerial5writeEh+0x22>
			_tx_udr_empty_irq();
    1890:	ce 01       	movw	r24, r28
    1892:	94 df       	rcall	.-216    	; 0x17bc <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1894:	f2 cf       	rjmp	.-28     	; 0x187a <_ZN14HardwareSerial5writeEh+0x22>
			} else {
			// nop, the interrupt handler will free up space for us
		}
	}

	_tx_buffer[_tx_buffer_head] = c;
    1896:	89 89       	ldd	r24, Y+17	; 0x11
    1898:	fe 01       	movw	r30, r28
    189a:	e8 0f       	add	r30, r24
    189c:	f1 1d       	adc	r31, r1
    189e:	ed 5a       	subi	r30, 0xAD	; 173
    18a0:	ff 4f       	sbci	r31, 0xFF	; 255
    18a2:	00 83       	st	Z, r16

	// make atomic to prevent execution of ISR between setting the
	// head pointer and setting the interrupt flag resulting in buffer
	// retransmission
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    18a4:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    18a6:	f8 94       	cli
		_tx_buffer_head = i;
    18a8:	19 8b       	std	Y+17, r17	; 0x11
		sbi(*_ucsrb, UDRIE0);
    18aa:	e8 85       	ldd	r30, Y+8	; 0x08
    18ac:	f9 85       	ldd	r31, Y+9	; 0x09
    18ae:	80 81       	ld	r24, Z
    18b0:	80 62       	ori	r24, 0x20	; 32
    18b2:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    18b4:	9f bf       	out	0x3f, r25	; 63
	}
	
	return 1;
    18b6:	1d c0       	rjmp	.+58     	; 0x18f2 <_ZN14HardwareSerial5writeEh+0x9a>
			*_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
			#endif
		}
		return 1;
	}
	tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    18b8:	29 89       	ldd	r18, Y+17	; 0x11
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	2f 5f       	subi	r18, 0xFF	; 255
    18be:	3f 4f       	sbci	r19, 0xFF	; 255
    18c0:	2f 73       	andi	r18, 0x3F	; 63
    18c2:	30 78       	andi	r19, 0x80	; 128
    18c4:	33 23       	and	r19, r19
    18c6:	34 f4       	brge	.+12     	; 0x18d4 <_ZN14HardwareSerial5writeEh+0x7c>
    18c8:	21 50       	subi	r18, 0x01	; 1
    18ca:	31 09       	sbc	r19, r1
    18cc:	20 6c       	ori	r18, 0xC0	; 192
    18ce:	3f 6f       	ori	r19, 0xFF	; 255
    18d0:	2f 5f       	subi	r18, 0xFF	; 255
    18d2:	3f 4f       	sbci	r19, 0xFF	; 255
    18d4:	06 2f       	mov	r16, r22
    18d6:	12 2f       	mov	r17, r18
    18d8:	d0 cf       	rjmp	.-96     	; 0x187a <_ZN14HardwareSerial5writeEh+0x22>
		// So writing UDR must happen first.
		// Writing UDR and clearing TC must be done atomically, otherwise
		// interrupts might delay the TXC clear so the byte written to UDR
		// is transmitted (setting TXC) before clearing TXC. Then TXC will
		// be cleared when no bytes are left, causing flush() to hang
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    18da:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    18dc:	f8 94       	cli
			*_udr = c;
    18de:	ec 85       	ldd	r30, Y+12	; 0x0c
    18e0:	fd 85       	ldd	r31, Y+13	; 0x0d
    18e2:	60 83       	st	Z, r22
			#ifdef MPCM0
			*_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    18e4:	ee 81       	ldd	r30, Y+6	; 0x06
    18e6:	ff 81       	ldd	r31, Y+7	; 0x07
    18e8:	80 81       	ld	r24, Z
    18ea:	83 70       	andi	r24, 0x03	; 3
    18ec:	80 64       	ori	r24, 0x40	; 64
    18ee:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    18f0:	9f bf       	out	0x3f, r25	; 63
		_tx_buffer_head = i;
		sbi(*_ucsrb, UDRIE0);
	}
	
	return 1;
}
    18f2:	81 e0       	ldi	r24, 0x01	; 1
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	df 91       	pop	r29
    18f8:	cf 91       	pop	r28
    18fa:	1f 91       	pop	r17
    18fc:	0f 91       	pop	r16
    18fe:	08 95       	ret

00001900 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, uint8_t config)
{
    1900:	cf 92       	push	r12
    1902:	df 92       	push	r13
    1904:	ef 92       	push	r14
    1906:	ff 92       	push	r15
    1908:	1f 93       	push	r17
    190a:	cf 93       	push	r28
    190c:	df 93       	push	r29
    190e:	ec 01       	movw	r28, r24
    1910:	6a 01       	movw	r12, r20
    1912:	7b 01       	movw	r14, r22
    1914:	12 2f       	mov	r17, r18
	// Try u2x mode first
	uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
	*_ucsra = 1 << U2X0;
    1916:	ee 81       	ldd	r30, Y+6	; 0x06
    1918:	ff 81       	ldd	r31, Y+7	; 0x07
    191a:	82 e0       	ldi	r24, 0x02	; 2
    191c:	80 83       	st	Z, r24
	// hardcoded exception for 57600 for compatibility with the bootloader
	// shipped with the Duemilanove and previous boards and the firmware
	// on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
	// be > 4095, so switch back to non-u2x mode if the baud rate is too
	// low.
	if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    191e:	41 15       	cp	r20, r1
    1920:	51 4e       	sbci	r21, 0xE1	; 225
    1922:	61 05       	cpc	r22, r1
    1924:	71 05       	cpc	r23, r1
    1926:	a9 f0       	breq	.+42     	; 0x1952 <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, uint8_t config)
{
	// Try u2x mode first
	uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1928:	60 e0       	ldi	r22, 0x00	; 0
    192a:	79 e0       	ldi	r23, 0x09	; 9
    192c:	8d e3       	ldi	r24, 0x3D	; 61
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	a7 01       	movw	r20, r14
    1932:	96 01       	movw	r18, r12
    1934:	c7 d6       	rcall	.+3470   	; 0x26c4 <__udivmodsi4>
    1936:	da 01       	movw	r26, r20
    1938:	c9 01       	movw	r24, r18
    193a:	01 97       	sbiw	r24, 0x01	; 1
    193c:	a1 09       	sbc	r26, r1
    193e:	b1 09       	sbc	r27, r1
    1940:	b6 95       	lsr	r27
    1942:	a7 95       	ror	r26
    1944:	97 95       	ror	r25
    1946:	87 95       	ror	r24
    1948:	9c 01       	movw	r18, r24
	// hardcoded exception for 57600 for compatibility with the bootloader
	// shipped with the Duemilanove and previous boards and the firmware
	// on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
	// be > 4095, so switch back to non-u2x mode if the baud rate is too
	// low.
	if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    194a:	21 15       	cp	r18, r1
    194c:	80 e1       	ldi	r24, 0x10	; 16
    194e:	38 07       	cpc	r19, r24
    1950:	a0 f0       	brcs	.+40     	; 0x197a <_ZN14HardwareSerial5beginEmh+0x7a>
	{
		*_ucsra = 0;
    1952:	ee 81       	ldd	r30, Y+6	; 0x06
    1954:	ff 81       	ldd	r31, Y+7	; 0x07
    1956:	10 82       	st	Z, r1
		baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1958:	60 e8       	ldi	r22, 0x80	; 128
    195a:	74 e8       	ldi	r23, 0x84	; 132
    195c:	8e e1       	ldi	r24, 0x1E	; 30
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	a7 01       	movw	r20, r14
    1962:	96 01       	movw	r18, r12
    1964:	af d6       	rcall	.+3422   	; 0x26c4 <__udivmodsi4>
    1966:	da 01       	movw	r26, r20
    1968:	c9 01       	movw	r24, r18
    196a:	01 97       	sbiw	r24, 0x01	; 1
    196c:	a1 09       	sbc	r26, r1
    196e:	b1 09       	sbc	r27, r1
    1970:	b6 95       	lsr	r27
    1972:	a7 95       	ror	r26
    1974:	97 95       	ror	r25
    1976:	87 95       	ror	r24
    1978:	9c 01       	movw	r18, r24
	}

	// assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
	*_ubrrh = baud_setting >> 8;
    197a:	ea 81       	ldd	r30, Y+2	; 0x02
    197c:	fb 81       	ldd	r31, Y+3	; 0x03
    197e:	30 83       	st	Z, r19
	*_ubrrl = baud_setting;
    1980:	ec 81       	ldd	r30, Y+4	; 0x04
    1982:	fd 81       	ldd	r31, Y+5	; 0x05
    1984:	20 83       	st	Z, r18

	_written = false;
    1986:	1e 86       	std	Y+14, r1	; 0x0e

	//set the data bits, parity, and stop bits
	#if defined(__AVR_ATmega8__)
	config |= 0x80; // select UCSRC register (shared with UBRRH)
	#endif
	*_ucsrc = config;
    1988:	ea 85       	ldd	r30, Y+10	; 0x0a
    198a:	fb 85       	ldd	r31, Y+11	; 0x0b
    198c:	10 83       	st	Z, r17
	
	sbi(*_ucsrb, RXEN0);
    198e:	e8 85       	ldd	r30, Y+8	; 0x08
    1990:	f9 85       	ldd	r31, Y+9	; 0x09
    1992:	80 81       	ld	r24, Z
    1994:	80 61       	ori	r24, 0x10	; 16
    1996:	80 83       	st	Z, r24
	sbi(*_ucsrb, TXEN0);
    1998:	e8 85       	ldd	r30, Y+8	; 0x08
    199a:	f9 85       	ldd	r31, Y+9	; 0x09
    199c:	80 81       	ld	r24, Z
    199e:	88 60       	ori	r24, 0x08	; 8
    19a0:	80 83       	st	Z, r24
	sbi(*_ucsrb, RXCIE0);
    19a2:	e8 85       	ldd	r30, Y+8	; 0x08
    19a4:	f9 85       	ldd	r31, Y+9	; 0x09
    19a6:	80 81       	ld	r24, Z
    19a8:	80 68       	ori	r24, 0x80	; 128
    19aa:	80 83       	st	Z, r24
	cbi(*_ucsrb, UDRIE0);
    19ac:	e8 85       	ldd	r30, Y+8	; 0x08
    19ae:	f9 85       	ldd	r31, Y+9	; 0x09
    19b0:	80 81       	ld	r24, Z
    19b2:	8f 7d       	andi	r24, 0xDF	; 223
    19b4:	80 83       	st	Z, r24
}
    19b6:	df 91       	pop	r29
    19b8:	cf 91       	pop	r28
    19ba:	1f 91       	pop	r17
    19bc:	ff 90       	pop	r15
    19be:	ef 90       	pop	r14
    19c0:	df 90       	pop	r13
    19c2:	cf 90       	pop	r12
    19c4:	08 95       	ret

000019c6 <__vector_25>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
}
    19c6:	1f 92       	push	r1
    19c8:	0f 92       	push	r0
    19ca:	0f b6       	in	r0, 0x3f	; 63
    19cc:	0f 92       	push	r0
    19ce:	11 24       	eor	r1, r1
    19d0:	0b b6       	in	r0, 0x3b	; 59
    19d2:	0f 92       	push	r0
    19d4:	2f 93       	push	r18
    19d6:	8f 93       	push	r24
    19d8:	9f 93       	push	r25
    19da:	af 93       	push	r26
    19dc:	bf 93       	push	r27
    19de:	ef 93       	push	r30
    19e0:	ff 93       	push	r31
    19e2:	e0 91 56 05 	lds	r30, 0x0556	; 0x800556 <Serial+0x6>
    19e6:	f0 91 57 05 	lds	r31, 0x0557	; 0x800557 <Serial+0x7>
    19ea:	80 81       	ld	r24, Z
    19ec:	82 fd       	sbrc	r24, 2
    19ee:	14 c0       	rjmp	.+40     	; 0x1a18 <__vector_25+0x52>
    19f0:	e0 e5       	ldi	r30, 0x50	; 80
    19f2:	f5 e0       	ldi	r31, 0x05	; 5
    19f4:	a4 85       	ldd	r26, Z+12	; 0x0c
    19f6:	b5 85       	ldd	r27, Z+13	; 0x0d
    19f8:	2c 91       	ld	r18, X
    19fa:	87 85       	ldd	r24, Z+15	; 0x0f
    19fc:	8f 5f       	subi	r24, 0xFF	; 255
    19fe:	8f 70       	andi	r24, 0x0F	; 15
    1a00:	90 89       	ldd	r25, Z+16	; 0x10
    1a02:	89 17       	cp	r24, r25
    1a04:	71 f0       	breq	.+28     	; 0x1a22 <__vector_25+0x5c>
    1a06:	df 01       	movw	r26, r30
    1a08:	e7 85       	ldd	r30, Z+15	; 0x0f
    1a0a:	f0 e0       	ldi	r31, 0x00	; 0
    1a0c:	e0 5b       	subi	r30, 0xB0	; 176
    1a0e:	fa 4f       	sbci	r31, 0xFA	; 250
    1a10:	23 8b       	std	Z+19, r18	; 0x13
    1a12:	1f 96       	adiw	r26, 0x0f	; 15
    1a14:	8c 93       	st	X, r24
    1a16:	05 c0       	rjmp	.+10     	; 0x1a22 <__vector_25+0x5c>
    1a18:	e0 91 5c 05 	lds	r30, 0x055C	; 0x80055c <Serial+0xc>
    1a1c:	f0 91 5d 05 	lds	r31, 0x055D	; 0x80055d <Serial+0xd>
    1a20:	80 81       	ld	r24, Z
    1a22:	ff 91       	pop	r31
    1a24:	ef 91       	pop	r30
    1a26:	bf 91       	pop	r27
    1a28:	af 91       	pop	r26
    1a2a:	9f 91       	pop	r25
    1a2c:	8f 91       	pop	r24
    1a2e:	2f 91       	pop	r18
    1a30:	0f 90       	pop	r0
    1a32:	0b be       	out	0x3b, r0	; 59
    1a34:	0f 90       	pop	r0
    1a36:	0f be       	out	0x3f, r0	; 63
    1a38:	0f 90       	pop	r0
    1a3a:	1f 90       	pop	r1
    1a3c:	18 95       	reti

00001a3e <__vector_26>:
    1a3e:	1f 92       	push	r1
    1a40:	0f 92       	push	r0
    1a42:	0f b6       	in	r0, 0x3f	; 63
    1a44:	0f 92       	push	r0
    1a46:	11 24       	eor	r1, r1
    1a48:	0b b6       	in	r0, 0x3b	; 59
    1a4a:	0f 92       	push	r0
    1a4c:	2f 93       	push	r18
    1a4e:	3f 93       	push	r19
    1a50:	4f 93       	push	r20
    1a52:	5f 93       	push	r21
    1a54:	6f 93       	push	r22
    1a56:	7f 93       	push	r23
    1a58:	8f 93       	push	r24
    1a5a:	9f 93       	push	r25
    1a5c:	af 93       	push	r26
    1a5e:	bf 93       	push	r27
    1a60:	ef 93       	push	r30
    1a62:	ff 93       	push	r31
    1a64:	80 e5       	ldi	r24, 0x50	; 80
    1a66:	95 e0       	ldi	r25, 0x05	; 5
    1a68:	a9 de       	rcall	.-686    	; 0x17bc <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1a6a:	ff 91       	pop	r31
    1a6c:	ef 91       	pop	r30
    1a6e:	bf 91       	pop	r27
    1a70:	af 91       	pop	r26
    1a72:	9f 91       	pop	r25
    1a74:	8f 91       	pop	r24
    1a76:	7f 91       	pop	r23
    1a78:	6f 91       	pop	r22
    1a7a:	5f 91       	pop	r21
    1a7c:	4f 91       	pop	r20
    1a7e:	3f 91       	pop	r19
    1a80:	2f 91       	pop	r18
    1a82:	0f 90       	pop	r0
    1a84:	0b be       	out	0x3b, r0	; 59
    1a86:	0f 90       	pop	r0
    1a88:	0f be       	out	0x3f, r0	; 63
    1a8a:	0f 90       	pop	r0
    1a8c:	1f 90       	pop	r1
    1a8e:	18 95       	reti

00001a90 <_GLOBAL__sub_I___vector_25>:
volatile uint8_t *ucsrc, volatile uint8_t *udr) :
_ubrrh(ubrrh), _ubrrl(ubrrl),
_ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
_udr(udr),
_rx_buffer_head(0), _rx_buffer_tail(0),
_tx_buffer_head(0), _tx_buffer_tail(0)
    1a90:	e0 e5       	ldi	r30, 0x50	; 80
    1a92:	f5 e0       	ldi	r31, 0x05	; 5
    1a94:	8e ea       	ldi	r24, 0xAE	; 174
    1a96:	92 e0       	ldi	r25, 0x02	; 2
    1a98:	91 83       	std	Z+1, r25	; 0x01
    1a9a:	80 83       	st	Z, r24
    1a9c:	85 ec       	ldi	r24, 0xC5	; 197
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	93 83       	std	Z+3, r25	; 0x03
    1aa2:	82 83       	std	Z+2, r24	; 0x02
    1aa4:	84 ec       	ldi	r24, 0xC4	; 196
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	95 83       	std	Z+5, r25	; 0x05
    1aaa:	84 83       	std	Z+4, r24	; 0x04
    1aac:	80 ec       	ldi	r24, 0xC0	; 192
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	97 83       	std	Z+7, r25	; 0x07
    1ab2:	86 83       	std	Z+6, r24	; 0x06
    1ab4:	81 ec       	ldi	r24, 0xC1	; 193
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	91 87       	std	Z+9, r25	; 0x09
    1aba:	80 87       	std	Z+8, r24	; 0x08
    1abc:	82 ec       	ldi	r24, 0xC2	; 194
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	93 87       	std	Z+11, r25	; 0x0b
    1ac2:	82 87       	std	Z+10, r24	; 0x0a
    1ac4:	86 ec       	ldi	r24, 0xC6	; 198
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	95 87       	std	Z+13, r25	; 0x0d
    1aca:	84 87       	std	Z+12, r24	; 0x0c
    1acc:	17 86       	std	Z+15, r1	; 0x0f
    1ace:	10 8a       	std	Z+16, r1	; 0x10
    1ad0:	11 8a       	std	Z+17, r1	; 0x11
    1ad2:	12 8a       	std	Z+18, r1	; 0x12
    1ad4:	08 95       	ret

00001ad6 <__vector_36>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
}
    1ad6:	1f 92       	push	r1
    1ad8:	0f 92       	push	r0
    1ada:	0f b6       	in	r0, 0x3f	; 63
    1adc:	0f 92       	push	r0
    1ade:	11 24       	eor	r1, r1
    1ae0:	0b b6       	in	r0, 0x3b	; 59
    1ae2:	0f 92       	push	r0
    1ae4:	2f 93       	push	r18
    1ae6:	8f 93       	push	r24
    1ae8:	9f 93       	push	r25
    1aea:	af 93       	push	r26
    1aec:	bf 93       	push	r27
    1aee:	ef 93       	push	r30
    1af0:	ff 93       	push	r31
    1af2:	e0 91 89 05 	lds	r30, 0x0589	; 0x800589 <Serial1+0x6>
    1af6:	f0 91 8a 05 	lds	r31, 0x058A	; 0x80058a <Serial1+0x7>
    1afa:	80 81       	ld	r24, Z
    1afc:	82 fd       	sbrc	r24, 2
    1afe:	14 c0       	rjmp	.+40     	; 0x1b28 <__vector_36+0x52>
    1b00:	e3 e8       	ldi	r30, 0x83	; 131
    1b02:	f5 e0       	ldi	r31, 0x05	; 5
    1b04:	a4 85       	ldd	r26, Z+12	; 0x0c
    1b06:	b5 85       	ldd	r27, Z+13	; 0x0d
    1b08:	2c 91       	ld	r18, X
    1b0a:	87 85       	ldd	r24, Z+15	; 0x0f
    1b0c:	8f 5f       	subi	r24, 0xFF	; 255
    1b0e:	8f 70       	andi	r24, 0x0F	; 15
    1b10:	90 89       	ldd	r25, Z+16	; 0x10
    1b12:	89 17       	cp	r24, r25
    1b14:	71 f0       	breq	.+28     	; 0x1b32 <__vector_36+0x5c>
    1b16:	df 01       	movw	r26, r30
    1b18:	e7 85       	ldd	r30, Z+15	; 0x0f
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	ed 57       	subi	r30, 0x7D	; 125
    1b1e:	fa 4f       	sbci	r31, 0xFA	; 250
    1b20:	23 8b       	std	Z+19, r18	; 0x13
    1b22:	1f 96       	adiw	r26, 0x0f	; 15
    1b24:	8c 93       	st	X, r24
    1b26:	05 c0       	rjmp	.+10     	; 0x1b32 <__vector_36+0x5c>
    1b28:	e0 91 8f 05 	lds	r30, 0x058F	; 0x80058f <Serial1+0xc>
    1b2c:	f0 91 90 05 	lds	r31, 0x0590	; 0x800590 <Serial1+0xd>
    1b30:	80 81       	ld	r24, Z
    1b32:	ff 91       	pop	r31
    1b34:	ef 91       	pop	r30
    1b36:	bf 91       	pop	r27
    1b38:	af 91       	pop	r26
    1b3a:	9f 91       	pop	r25
    1b3c:	8f 91       	pop	r24
    1b3e:	2f 91       	pop	r18
    1b40:	0f 90       	pop	r0
    1b42:	0b be       	out	0x3b, r0	; 59
    1b44:	0f 90       	pop	r0
    1b46:	0f be       	out	0x3f, r0	; 63
    1b48:	0f 90       	pop	r0
    1b4a:	1f 90       	pop	r1
    1b4c:	18 95       	reti

00001b4e <__vector_37>:
    1b4e:	1f 92       	push	r1
    1b50:	0f 92       	push	r0
    1b52:	0f b6       	in	r0, 0x3f	; 63
    1b54:	0f 92       	push	r0
    1b56:	11 24       	eor	r1, r1
    1b58:	0b b6       	in	r0, 0x3b	; 59
    1b5a:	0f 92       	push	r0
    1b5c:	2f 93       	push	r18
    1b5e:	3f 93       	push	r19
    1b60:	4f 93       	push	r20
    1b62:	5f 93       	push	r21
    1b64:	6f 93       	push	r22
    1b66:	7f 93       	push	r23
    1b68:	8f 93       	push	r24
    1b6a:	9f 93       	push	r25
    1b6c:	af 93       	push	r26
    1b6e:	bf 93       	push	r27
    1b70:	ef 93       	push	r30
    1b72:	ff 93       	push	r31
    1b74:	83 e8       	ldi	r24, 0x83	; 131
    1b76:	95 e0       	ldi	r25, 0x05	; 5
    1b78:	21 de       	rcall	.-958    	; 0x17bc <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1b7a:	ff 91       	pop	r31
    1b7c:	ef 91       	pop	r30
    1b7e:	bf 91       	pop	r27
    1b80:	af 91       	pop	r26
    1b82:	9f 91       	pop	r25
    1b84:	8f 91       	pop	r24
    1b86:	7f 91       	pop	r23
    1b88:	6f 91       	pop	r22
    1b8a:	5f 91       	pop	r21
    1b8c:	4f 91       	pop	r20
    1b8e:	3f 91       	pop	r19
    1b90:	2f 91       	pop	r18
    1b92:	0f 90       	pop	r0
    1b94:	0b be       	out	0x3b, r0	; 59
    1b96:	0f 90       	pop	r0
    1b98:	0f be       	out	0x3f, r0	; 63
    1b9a:	0f 90       	pop	r0
    1b9c:	1f 90       	pop	r1
    1b9e:	18 95       	reti

00001ba0 <_GLOBAL__sub_I___vector_36>:
    1ba0:	e3 e8       	ldi	r30, 0x83	; 131
    1ba2:	f5 e0       	ldi	r31, 0x05	; 5
    1ba4:	8e ea       	ldi	r24, 0xAE	; 174
    1ba6:	92 e0       	ldi	r25, 0x02	; 2
    1ba8:	91 83       	std	Z+1, r25	; 0x01
    1baa:	80 83       	st	Z, r24
    1bac:	8d ec       	ldi	r24, 0xCD	; 205
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	93 83       	std	Z+3, r25	; 0x03
    1bb2:	82 83       	std	Z+2, r24	; 0x02
    1bb4:	8c ec       	ldi	r24, 0xCC	; 204
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	95 83       	std	Z+5, r25	; 0x05
    1bba:	84 83       	std	Z+4, r24	; 0x04
    1bbc:	88 ec       	ldi	r24, 0xC8	; 200
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	97 83       	std	Z+7, r25	; 0x07
    1bc2:	86 83       	std	Z+6, r24	; 0x06
    1bc4:	89 ec       	ldi	r24, 0xC9	; 201
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	91 87       	std	Z+9, r25	; 0x09
    1bca:	80 87       	std	Z+8, r24	; 0x08
    1bcc:	8a ec       	ldi	r24, 0xCA	; 202
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	93 87       	std	Z+11, r25	; 0x0b
    1bd2:	82 87       	std	Z+10, r24	; 0x0a
    1bd4:	8e ec       	ldi	r24, 0xCE	; 206
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	95 87       	std	Z+13, r25	; 0x0d
    1bda:	84 87       	std	Z+12, r24	; 0x0c
    1bdc:	17 86       	std	Z+15, r1	; 0x0f
    1bde:	10 8a       	std	Z+16, r1	; 0x10
    1be0:	11 8a       	std	Z+17, r1	; 0x11
    1be2:	12 8a       	std	Z+18, r1	; 0x12
    1be4:	08 95       	ret

00001be6 <__vector_51>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial2_available() {
  return Serial2.available();
}
    1be6:	1f 92       	push	r1
    1be8:	0f 92       	push	r0
    1bea:	0f b6       	in	r0, 0x3f	; 63
    1bec:	0f 92       	push	r0
    1bee:	11 24       	eor	r1, r1
    1bf0:	0b b6       	in	r0, 0x3b	; 59
    1bf2:	0f 92       	push	r0
    1bf4:	2f 93       	push	r18
    1bf6:	8f 93       	push	r24
    1bf8:	9f 93       	push	r25
    1bfa:	af 93       	push	r26
    1bfc:	bf 93       	push	r27
    1bfe:	ef 93       	push	r30
    1c00:	ff 93       	push	r31
    1c02:	e0 91 bc 05 	lds	r30, 0x05BC	; 0x8005bc <Serial2+0x6>
    1c06:	f0 91 bd 05 	lds	r31, 0x05BD	; 0x8005bd <Serial2+0x7>
    1c0a:	80 81       	ld	r24, Z
    1c0c:	82 fd       	sbrc	r24, 2
    1c0e:	14 c0       	rjmp	.+40     	; 0x1c38 <__vector_51+0x52>
    1c10:	e6 eb       	ldi	r30, 0xB6	; 182
    1c12:	f5 e0       	ldi	r31, 0x05	; 5
    1c14:	a4 85       	ldd	r26, Z+12	; 0x0c
    1c16:	b5 85       	ldd	r27, Z+13	; 0x0d
    1c18:	2c 91       	ld	r18, X
    1c1a:	87 85       	ldd	r24, Z+15	; 0x0f
    1c1c:	8f 5f       	subi	r24, 0xFF	; 255
    1c1e:	8f 70       	andi	r24, 0x0F	; 15
    1c20:	90 89       	ldd	r25, Z+16	; 0x10
    1c22:	89 17       	cp	r24, r25
    1c24:	71 f0       	breq	.+28     	; 0x1c42 <__vector_51+0x5c>
    1c26:	df 01       	movw	r26, r30
    1c28:	e7 85       	ldd	r30, Z+15	; 0x0f
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	ea 54       	subi	r30, 0x4A	; 74
    1c2e:	fa 4f       	sbci	r31, 0xFA	; 250
    1c30:	23 8b       	std	Z+19, r18	; 0x13
    1c32:	1f 96       	adiw	r26, 0x0f	; 15
    1c34:	8c 93       	st	X, r24
    1c36:	05 c0       	rjmp	.+10     	; 0x1c42 <__vector_51+0x5c>
    1c38:	e0 91 c2 05 	lds	r30, 0x05C2	; 0x8005c2 <Serial2+0xc>
    1c3c:	f0 91 c3 05 	lds	r31, 0x05C3	; 0x8005c3 <Serial2+0xd>
    1c40:	80 81       	ld	r24, Z
    1c42:	ff 91       	pop	r31
    1c44:	ef 91       	pop	r30
    1c46:	bf 91       	pop	r27
    1c48:	af 91       	pop	r26
    1c4a:	9f 91       	pop	r25
    1c4c:	8f 91       	pop	r24
    1c4e:	2f 91       	pop	r18
    1c50:	0f 90       	pop	r0
    1c52:	0b be       	out	0x3b, r0	; 59
    1c54:	0f 90       	pop	r0
    1c56:	0f be       	out	0x3f, r0	; 63
    1c58:	0f 90       	pop	r0
    1c5a:	1f 90       	pop	r1
    1c5c:	18 95       	reti

00001c5e <__vector_52>:
    1c5e:	1f 92       	push	r1
    1c60:	0f 92       	push	r0
    1c62:	0f b6       	in	r0, 0x3f	; 63
    1c64:	0f 92       	push	r0
    1c66:	11 24       	eor	r1, r1
    1c68:	0b b6       	in	r0, 0x3b	; 59
    1c6a:	0f 92       	push	r0
    1c6c:	2f 93       	push	r18
    1c6e:	3f 93       	push	r19
    1c70:	4f 93       	push	r20
    1c72:	5f 93       	push	r21
    1c74:	6f 93       	push	r22
    1c76:	7f 93       	push	r23
    1c78:	8f 93       	push	r24
    1c7a:	9f 93       	push	r25
    1c7c:	af 93       	push	r26
    1c7e:	bf 93       	push	r27
    1c80:	ef 93       	push	r30
    1c82:	ff 93       	push	r31
    1c84:	86 eb       	ldi	r24, 0xB6	; 182
    1c86:	95 e0       	ldi	r25, 0x05	; 5
    1c88:	99 dd       	rcall	.-1230   	; 0x17bc <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1c8a:	ff 91       	pop	r31
    1c8c:	ef 91       	pop	r30
    1c8e:	bf 91       	pop	r27
    1c90:	af 91       	pop	r26
    1c92:	9f 91       	pop	r25
    1c94:	8f 91       	pop	r24
    1c96:	7f 91       	pop	r23
    1c98:	6f 91       	pop	r22
    1c9a:	5f 91       	pop	r21
    1c9c:	4f 91       	pop	r20
    1c9e:	3f 91       	pop	r19
    1ca0:	2f 91       	pop	r18
    1ca2:	0f 90       	pop	r0
    1ca4:	0b be       	out	0x3b, r0	; 59
    1ca6:	0f 90       	pop	r0
    1ca8:	0f be       	out	0x3f, r0	; 63
    1caa:	0f 90       	pop	r0
    1cac:	1f 90       	pop	r1
    1cae:	18 95       	reti

00001cb0 <_GLOBAL__sub_I___vector_51>:
    1cb0:	e6 eb       	ldi	r30, 0xB6	; 182
    1cb2:	f5 e0       	ldi	r31, 0x05	; 5
    1cb4:	8e ea       	ldi	r24, 0xAE	; 174
    1cb6:	92 e0       	ldi	r25, 0x02	; 2
    1cb8:	91 83       	std	Z+1, r25	; 0x01
    1cba:	80 83       	st	Z, r24
    1cbc:	85 ed       	ldi	r24, 0xD5	; 213
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	93 83       	std	Z+3, r25	; 0x03
    1cc2:	82 83       	std	Z+2, r24	; 0x02
    1cc4:	84 ed       	ldi	r24, 0xD4	; 212
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	95 83       	std	Z+5, r25	; 0x05
    1cca:	84 83       	std	Z+4, r24	; 0x04
    1ccc:	80 ed       	ldi	r24, 0xD0	; 208
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	97 83       	std	Z+7, r25	; 0x07
    1cd2:	86 83       	std	Z+6, r24	; 0x06
    1cd4:	81 ed       	ldi	r24, 0xD1	; 209
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	91 87       	std	Z+9, r25	; 0x09
    1cda:	80 87       	std	Z+8, r24	; 0x08
    1cdc:	82 ed       	ldi	r24, 0xD2	; 210
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	93 87       	std	Z+11, r25	; 0x0b
    1ce2:	82 87       	std	Z+10, r24	; 0x0a
    1ce4:	86 ed       	ldi	r24, 0xD6	; 214
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	95 87       	std	Z+13, r25	; 0x0d
    1cea:	84 87       	std	Z+12, r24	; 0x0c
    1cec:	17 86       	std	Z+15, r1	; 0x0f
    1cee:	10 8a       	std	Z+16, r1	; 0x10
    1cf0:	11 8a       	std	Z+17, r1	; 0x11
    1cf2:	12 8a       	std	Z+18, r1	; 0x12
    1cf4:	08 95       	ret

00001cf6 <__vector_54>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial3_available() {
  return Serial3.available();
}
    1cf6:	1f 92       	push	r1
    1cf8:	0f 92       	push	r0
    1cfa:	0f b6       	in	r0, 0x3f	; 63
    1cfc:	0f 92       	push	r0
    1cfe:	11 24       	eor	r1, r1
    1d00:	0b b6       	in	r0, 0x3b	; 59
    1d02:	0f 92       	push	r0
    1d04:	2f 93       	push	r18
    1d06:	8f 93       	push	r24
    1d08:	9f 93       	push	r25
    1d0a:	af 93       	push	r26
    1d0c:	bf 93       	push	r27
    1d0e:	ef 93       	push	r30
    1d10:	ff 93       	push	r31
    1d12:	e0 91 ef 05 	lds	r30, 0x05EF	; 0x8005ef <Serial3+0x6>
    1d16:	f0 91 f0 05 	lds	r31, 0x05F0	; 0x8005f0 <Serial3+0x7>
    1d1a:	80 81       	ld	r24, Z
    1d1c:	82 fd       	sbrc	r24, 2
    1d1e:	14 c0       	rjmp	.+40     	; 0x1d48 <__vector_54+0x52>
    1d20:	e9 ee       	ldi	r30, 0xE9	; 233
    1d22:	f5 e0       	ldi	r31, 0x05	; 5
    1d24:	a4 85       	ldd	r26, Z+12	; 0x0c
    1d26:	b5 85       	ldd	r27, Z+13	; 0x0d
    1d28:	2c 91       	ld	r18, X
    1d2a:	87 85       	ldd	r24, Z+15	; 0x0f
    1d2c:	8f 5f       	subi	r24, 0xFF	; 255
    1d2e:	8f 70       	andi	r24, 0x0F	; 15
    1d30:	90 89       	ldd	r25, Z+16	; 0x10
    1d32:	89 17       	cp	r24, r25
    1d34:	71 f0       	breq	.+28     	; 0x1d52 <__vector_54+0x5c>
    1d36:	df 01       	movw	r26, r30
    1d38:	e7 85       	ldd	r30, Z+15	; 0x0f
    1d3a:	f0 e0       	ldi	r31, 0x00	; 0
    1d3c:	e7 51       	subi	r30, 0x17	; 23
    1d3e:	fa 4f       	sbci	r31, 0xFA	; 250
    1d40:	23 8b       	std	Z+19, r18	; 0x13
    1d42:	1f 96       	adiw	r26, 0x0f	; 15
    1d44:	8c 93       	st	X, r24
    1d46:	05 c0       	rjmp	.+10     	; 0x1d52 <__vector_54+0x5c>
    1d48:	e0 91 f5 05 	lds	r30, 0x05F5	; 0x8005f5 <Serial3+0xc>
    1d4c:	f0 91 f6 05 	lds	r31, 0x05F6	; 0x8005f6 <Serial3+0xd>
    1d50:	80 81       	ld	r24, Z
    1d52:	ff 91       	pop	r31
    1d54:	ef 91       	pop	r30
    1d56:	bf 91       	pop	r27
    1d58:	af 91       	pop	r26
    1d5a:	9f 91       	pop	r25
    1d5c:	8f 91       	pop	r24
    1d5e:	2f 91       	pop	r18
    1d60:	0f 90       	pop	r0
    1d62:	0b be       	out	0x3b, r0	; 59
    1d64:	0f 90       	pop	r0
    1d66:	0f be       	out	0x3f, r0	; 63
    1d68:	0f 90       	pop	r0
    1d6a:	1f 90       	pop	r1
    1d6c:	18 95       	reti

00001d6e <__vector_55>:
    1d6e:	1f 92       	push	r1
    1d70:	0f 92       	push	r0
    1d72:	0f b6       	in	r0, 0x3f	; 63
    1d74:	0f 92       	push	r0
    1d76:	11 24       	eor	r1, r1
    1d78:	0b b6       	in	r0, 0x3b	; 59
    1d7a:	0f 92       	push	r0
    1d7c:	2f 93       	push	r18
    1d7e:	3f 93       	push	r19
    1d80:	4f 93       	push	r20
    1d82:	5f 93       	push	r21
    1d84:	6f 93       	push	r22
    1d86:	7f 93       	push	r23
    1d88:	8f 93       	push	r24
    1d8a:	9f 93       	push	r25
    1d8c:	af 93       	push	r26
    1d8e:	bf 93       	push	r27
    1d90:	ef 93       	push	r30
    1d92:	ff 93       	push	r31
    1d94:	89 ee       	ldi	r24, 0xE9	; 233
    1d96:	95 e0       	ldi	r25, 0x05	; 5
    1d98:	11 dd       	rcall	.-1502   	; 0x17bc <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1d9a:	ff 91       	pop	r31
    1d9c:	ef 91       	pop	r30
    1d9e:	bf 91       	pop	r27
    1da0:	af 91       	pop	r26
    1da2:	9f 91       	pop	r25
    1da4:	8f 91       	pop	r24
    1da6:	7f 91       	pop	r23
    1da8:	6f 91       	pop	r22
    1daa:	5f 91       	pop	r21
    1dac:	4f 91       	pop	r20
    1dae:	3f 91       	pop	r19
    1db0:	2f 91       	pop	r18
    1db2:	0f 90       	pop	r0
    1db4:	0b be       	out	0x3b, r0	; 59
    1db6:	0f 90       	pop	r0
    1db8:	0f be       	out	0x3f, r0	; 63
    1dba:	0f 90       	pop	r0
    1dbc:	1f 90       	pop	r1
    1dbe:	18 95       	reti

00001dc0 <_GLOBAL__sub_I___vector_54>:
    1dc0:	e9 ee       	ldi	r30, 0xE9	; 233
    1dc2:	f5 e0       	ldi	r31, 0x05	; 5
    1dc4:	8e ea       	ldi	r24, 0xAE	; 174
    1dc6:	92 e0       	ldi	r25, 0x02	; 2
    1dc8:	91 83       	std	Z+1, r25	; 0x01
    1dca:	80 83       	st	Z, r24
    1dcc:	85 e3       	ldi	r24, 0x35	; 53
    1dce:	91 e0       	ldi	r25, 0x01	; 1
    1dd0:	93 83       	std	Z+3, r25	; 0x03
    1dd2:	82 83       	std	Z+2, r24	; 0x02
    1dd4:	84 e3       	ldi	r24, 0x34	; 52
    1dd6:	91 e0       	ldi	r25, 0x01	; 1
    1dd8:	95 83       	std	Z+5, r25	; 0x05
    1dda:	84 83       	std	Z+4, r24	; 0x04
    1ddc:	80 e3       	ldi	r24, 0x30	; 48
    1dde:	91 e0       	ldi	r25, 0x01	; 1
    1de0:	97 83       	std	Z+7, r25	; 0x07
    1de2:	86 83       	std	Z+6, r24	; 0x06
    1de4:	81 e3       	ldi	r24, 0x31	; 49
    1de6:	91 e0       	ldi	r25, 0x01	; 1
    1de8:	91 87       	std	Z+9, r25	; 0x09
    1dea:	80 87       	std	Z+8, r24	; 0x08
    1dec:	82 e3       	ldi	r24, 0x32	; 50
    1dee:	91 e0       	ldi	r25, 0x01	; 1
    1df0:	93 87       	std	Z+11, r25	; 0x0b
    1df2:	82 87       	std	Z+10, r24	; 0x0a
    1df4:	86 e3       	ldi	r24, 0x36	; 54
    1df6:	91 e0       	ldi	r25, 0x01	; 1
    1df8:	95 87       	std	Z+13, r25	; 0x0d
    1dfa:	84 87       	std	Z+12, r24	; 0x0c
    1dfc:	17 86       	std	Z+15, r1	; 0x0f
    1dfe:	10 8a       	std	Z+16, r1	; 0x10
    1e00:	11 8a       	std	Z+17, r1	; 0x11
    1e02:	12 8a       	std	Z+18, r1	; 0x12
    1e04:	08 95       	ret

00001e06 <_ZN3TWI5beginEv>:

void reply(bool ack) {
	if(ack){ // transmit master read ready signal, with or without ack
		TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
	}else{
		TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1e06:	10 92 29 06 	sts	0x0629, r1	; 0x800629 <_ZL9twi_state>
    1e0a:	81 e0       	ldi	r24, 0x01	; 1
    1e0c:	80 93 27 06 	sts	0x0627, r24	; 0x800627 <_ZL12twi_sendStop>
    1e10:	10 92 26 06 	sts	0x0626, r1	; 0x800626 <_ZL14twi_inRepStart>
    1e14:	8b b1       	in	r24, 0x0b	; 11
    1e16:	83 60       	ori	r24, 0x03	; 3
    1e18:	8b b9       	out	0x0b, r24	; 11
    1e1a:	e9 eb       	ldi	r30, 0xB9	; 185
    1e1c:	f0 e0       	ldi	r31, 0x00	; 0
    1e1e:	80 81       	ld	r24, Z
    1e20:	8e 7f       	andi	r24, 0xFE	; 254
    1e22:	80 83       	st	Z, r24
    1e24:	88 e4       	ldi	r24, 0x48	; 72
    1e26:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    1e2a:	85 e4       	ldi	r24, 0x45	; 69
    1e2c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1e30:	08 95       	ret

00001e32 <_Z8readFromhPhhS_hb>:
    1e32:	ef 92       	push	r14
    1e34:	0f 93       	push	r16
    1e36:	90 91 29 06 	lds	r25, 0x0629	; 0x800629 <_ZL9twi_state>
    1e3a:	91 11       	cpse	r25, r1
    1e3c:	fc cf       	rjmp	.-8      	; 0x1e36 <_Z8readFromhPhhS_hb+0x4>
    1e3e:	91 e0       	ldi	r25, 0x01	; 1
    1e40:	90 93 29 06 	sts	0x0629, r25	; 0x800629 <_ZL9twi_state>
    1e44:	e0 92 27 06 	sts	0x0627, r14	; 0x800627 <_ZL12twi_sendStop>
    1e48:	9f ef       	ldi	r25, 0xFF	; 255
    1e4a:	90 93 1d 06 	sts	0x061D, r25	; 0x80061d <_ZL9twi_error>
    1e4e:	00 23       	and	r16, r16
    1e50:	21 f0       	breq	.+8      	; 0x1e5a <_Z8readFromhPhhS_hb+0x28>
    1e52:	30 93 21 06 	sts	0x0621, r19	; 0x800621 <_ZL13twi_regBuffer+0x1>
    1e56:	20 93 20 06 	sts	0x0620, r18	; 0x800620 <_ZL13twi_regBuffer>
    1e5a:	10 92 1f 06 	sts	0x061F, r1	; 0x80061f <_ZL18twi_regBufferIndex>
    1e5e:	00 93 1e 06 	sts	0x061E, r16	; 0x80061e <_ZL19twi_regBufferLength>
    1e62:	70 93 25 06 	sts	0x0625, r23	; 0x800625 <_ZL16twi_masterBuffer+0x1>
    1e66:	60 93 24 06 	sts	0x0624, r22	; 0x800624 <_ZL16twi_masterBuffer>
    1e6a:	10 92 23 06 	sts	0x0623, r1	; 0x800623 <_ZL21twi_masterBufferIndex>
    1e6e:	41 50       	subi	r20, 0x01	; 1
    1e70:	40 93 22 06 	sts	0x0622, r20	; 0x800622 <_ZL22twi_masterBufferLength>
    1e74:	91 e0       	ldi	r25, 0x01	; 1
    1e76:	90 93 28 06 	sts	0x0628, r25	; 0x800628 <_ZL9twi_slarw>
    1e7a:	90 91 28 06 	lds	r25, 0x0628	; 0x800628 <_ZL9twi_slarw>
    1e7e:	88 0f       	add	r24, r24
    1e80:	89 2b       	or	r24, r25
    1e82:	80 93 28 06 	sts	0x0628, r24	; 0x800628 <_ZL9twi_slarw>
    1e86:	80 91 26 06 	lds	r24, 0x0626	; 0x800626 <_ZL14twi_inRepStart>
    1e8a:	81 30       	cpi	r24, 0x01	; 1
    1e8c:	81 f4       	brne	.+32     	; 0x1eae <_Z8readFromhPhhS_hb+0x7c>
    1e8e:	10 92 26 06 	sts	0x0626, r1	; 0x800626 <_ZL14twi_inRepStart>
    1e92:	ab eb       	ldi	r26, 0xBB	; 187
    1e94:	b0 e0       	ldi	r27, 0x00	; 0
    1e96:	ec eb       	ldi	r30, 0xBC	; 188
    1e98:	f0 e0       	ldi	r31, 0x00	; 0
    1e9a:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <_ZL9twi_slarw>
    1e9e:	8c 93       	st	X, r24
    1ea0:	80 81       	ld	r24, Z
    1ea2:	83 fd       	sbrc	r24, 3
    1ea4:	fa cf       	rjmp	.-12     	; 0x1e9a <_Z8readFromhPhhS_hb+0x68>
    1ea6:	85 ec       	ldi	r24, 0xC5	; 197
    1ea8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1eac:	03 c0       	rjmp	.+6      	; 0x1eb4 <_Z8readFromhPhhS_hb+0x82>
    1eae:	85 ee       	ldi	r24, 0xE5	; 229
    1eb0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1eb4:	0f 91       	pop	r16
    1eb6:	ef 90       	pop	r14
    1eb8:	08 95       	ret

00001eba <_ZN3TWI9readAsyncEPhhhS0_hb>:
    1eba:	cf 92       	push	r12
    1ebc:	ef 92       	push	r14
    1ebe:	0f 93       	push	r16
    1ec0:	1f 93       	push	r17
    1ec2:	80 91 2a 06 	lds	r24, 0x062A	; 0x80062a <_ZL12transmitting>
    1ec6:	81 11       	cpse	r24, r1
    1ec8:	0e c0       	rjmp	.+28     	; 0x1ee6 <_ZN3TWI9readAsyncEPhhhS0_hb+0x2c>
    1eca:	3e 2d       	mov	r19, r14
    1ecc:	f8 01       	movw	r30, r16
    1ece:	92 2f       	mov	r25, r18
    1ed0:	84 2f       	mov	r24, r20
    1ed2:	21 e0       	ldi	r18, 0x01	; 1
    1ed4:	20 93 2a 06 	sts	0x062A, r18	; 0x80062a <_ZL12transmitting>
    1ed8:	ec 2c       	mov	r14, r12
    1eda:	03 2f       	mov	r16, r19
    1edc:	9f 01       	movw	r18, r30
    1ede:	49 2f       	mov	r20, r25
    1ee0:	a8 df       	rcall	.-176    	; 0x1e32 <_Z8readFromhPhhS_hb>
    1ee2:	81 e0       	ldi	r24, 0x01	; 1
    1ee4:	01 c0       	rjmp	.+2      	; 0x1ee8 <_ZN3TWI9readAsyncEPhhhS0_hb+0x2e>
    1ee6:	80 e0       	ldi	r24, 0x00	; 0
    1ee8:	1f 91       	pop	r17
    1eea:	0f 91       	pop	r16
    1eec:	ef 90       	pop	r14
    1eee:	cf 90       	pop	r12
    1ef0:	08 95       	ret

00001ef2 <_Z7writeTohPhhS_hb>:
    1ef2:	ef 92       	push	r14
    1ef4:	0f 93       	push	r16
    1ef6:	90 91 29 06 	lds	r25, 0x0629	; 0x800629 <_ZL9twi_state>
    1efa:	91 11       	cpse	r25, r1
    1efc:	fc cf       	rjmp	.-8      	; 0x1ef6 <_Z7writeTohPhhS_hb+0x4>
    1efe:	92 e0       	ldi	r25, 0x02	; 2
    1f00:	90 93 29 06 	sts	0x0629, r25	; 0x800629 <_ZL9twi_state>
    1f04:	e0 92 27 06 	sts	0x0627, r14	; 0x800627 <_ZL12twi_sendStop>
    1f08:	9f ef       	ldi	r25, 0xFF	; 255
    1f0a:	90 93 1d 06 	sts	0x061D, r25	; 0x80061d <_ZL9twi_error>
    1f0e:	00 23       	and	r16, r16
    1f10:	21 f0       	breq	.+8      	; 0x1f1a <_Z7writeTohPhhS_hb+0x28>
    1f12:	30 93 21 06 	sts	0x0621, r19	; 0x800621 <_ZL13twi_regBuffer+0x1>
    1f16:	20 93 20 06 	sts	0x0620, r18	; 0x800620 <_ZL13twi_regBuffer>
    1f1a:	10 92 1f 06 	sts	0x061F, r1	; 0x80061f <_ZL18twi_regBufferIndex>
    1f1e:	00 93 1e 06 	sts	0x061E, r16	; 0x80061e <_ZL19twi_regBufferLength>
    1f22:	70 93 25 06 	sts	0x0625, r23	; 0x800625 <_ZL16twi_masterBuffer+0x1>
    1f26:	60 93 24 06 	sts	0x0624, r22	; 0x800624 <_ZL16twi_masterBuffer>
    1f2a:	10 92 23 06 	sts	0x0623, r1	; 0x800623 <_ZL21twi_masterBufferIndex>
    1f2e:	40 93 22 06 	sts	0x0622, r20	; 0x800622 <_ZL22twi_masterBufferLength>
    1f32:	10 92 28 06 	sts	0x0628, r1	; 0x800628 <_ZL9twi_slarw>
    1f36:	90 91 28 06 	lds	r25, 0x0628	; 0x800628 <_ZL9twi_slarw>
    1f3a:	88 0f       	add	r24, r24
    1f3c:	89 2b       	or	r24, r25
    1f3e:	80 93 28 06 	sts	0x0628, r24	; 0x800628 <_ZL9twi_slarw>
    1f42:	80 91 26 06 	lds	r24, 0x0626	; 0x800626 <_ZL14twi_inRepStart>
    1f46:	81 30       	cpi	r24, 0x01	; 1
    1f48:	81 f4       	brne	.+32     	; 0x1f6a <_Z7writeTohPhhS_hb+0x78>
    1f4a:	10 92 26 06 	sts	0x0626, r1	; 0x800626 <_ZL14twi_inRepStart>
    1f4e:	ab eb       	ldi	r26, 0xBB	; 187
    1f50:	b0 e0       	ldi	r27, 0x00	; 0
    1f52:	ec eb       	ldi	r30, 0xBC	; 188
    1f54:	f0 e0       	ldi	r31, 0x00	; 0
    1f56:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <_ZL9twi_slarw>
    1f5a:	8c 93       	st	X, r24
    1f5c:	80 81       	ld	r24, Z
    1f5e:	83 fd       	sbrc	r24, 3
    1f60:	fa cf       	rjmp	.-12     	; 0x1f56 <_Z7writeTohPhhS_hb+0x64>
    1f62:	85 ec       	ldi	r24, 0xC5	; 197
    1f64:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1f68:	03 c0       	rjmp	.+6      	; 0x1f70 <_Z7writeTohPhhS_hb+0x7e>
    1f6a:	85 ee       	ldi	r24, 0xE5	; 229
    1f6c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1f70:	0f 91       	pop	r16
    1f72:	ef 90       	pop	r14
    1f74:	08 95       	ret

00001f76 <_ZN3TWI10writeAsyncEhPhhS0_hb>:
    1f76:	cf 92       	push	r12
    1f78:	ef 92       	push	r14
    1f7a:	0f 93       	push	r16
    1f7c:	1f 93       	push	r17
    1f7e:	80 91 2a 06 	lds	r24, 0x062A	; 0x80062a <_ZL12transmitting>
    1f82:	81 11       	cpse	r24, r1
    1f84:	10 c0       	rjmp	.+32     	; 0x1fa6 <_ZN3TWI10writeAsyncEhPhhS0_hb+0x30>
    1f86:	3e 2d       	mov	r19, r14
    1f88:	d8 01       	movw	r26, r16
    1f8a:	92 2f       	mov	r25, r18
    1f8c:	fa 01       	movw	r30, r20
    1f8e:	86 2f       	mov	r24, r22
    1f90:	21 e0       	ldi	r18, 0x01	; 1
    1f92:	20 93 2a 06 	sts	0x062A, r18	; 0x80062a <_ZL12transmitting>
    1f96:	ec 2c       	mov	r14, r12
    1f98:	03 2f       	mov	r16, r19
    1f9a:	9d 01       	movw	r18, r26
    1f9c:	49 2f       	mov	r20, r25
    1f9e:	bf 01       	movw	r22, r30
    1fa0:	a8 df       	rcall	.-176    	; 0x1ef2 <_Z7writeTohPhhS_hb>
    1fa2:	81 e0       	ldi	r24, 0x01	; 1
    1fa4:	01 c0       	rjmp	.+2      	; 0x1fa8 <_ZN3TWI10writeAsyncEhPhhS0_hb+0x32>
    1fa6:	80 e0       	ldi	r24, 0x00	; 0
    1fa8:	1f 91       	pop	r17
    1faa:	0f 91       	pop	r16
    1fac:	ef 90       	pop	r14
    1fae:	cf 90       	pop	r12
    1fb0:	08 95       	ret

00001fb2 <_ZN3TWI9availableEv>:
    1fb2:	90 91 2a 06 	lds	r25, 0x062A	; 0x80062a <_ZL12transmitting>
    1fb6:	81 e0       	ldi	r24, 0x01	; 1
    1fb8:	89 27       	eor	r24, r25
    1fba:	08 95       	ret

00001fbc <_Z4stopv>:
	}
}

void stop(void){
	TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);// send stop condition
    1fbc:	85 ed       	ldi	r24, 0xD5	; 213
    1fbe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

	// wait for stop condition to be exectued on bus. TWINT is not set after a stop condition!
	while(TWCR & _BV(TWSTO)){
    1fc2:	ec eb       	ldi	r30, 0xBC	; 188
    1fc4:	f0 e0       	ldi	r31, 0x00	; 0
    1fc6:	80 81       	ld	r24, Z
    1fc8:	84 fd       	sbrc	r24, 4
    1fca:	fd cf       	rjmp	.-6      	; 0x1fc6 <_Z4stopv+0xa>
		continue;
	}

	twi_state = TWI_READY; //update twi state
    1fcc:	10 92 29 06 	sts	0x0629, r1	; 0x800629 <_ZL9twi_state>
    1fd0:	08 95       	ret

00001fd2 <_Z10releaseBusv>:
}

void releaseBus(void) {
	TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT); //release bus
    1fd2:	85 ec       	ldi	r24, 0xC5	; 197
    1fd4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	twi_state = TWI_READY;// update twi state
    1fd8:	10 92 29 06 	sts	0x0629, r1	; 0x800629 <_ZL9twi_state>
    1fdc:	08 95       	ret

00001fde <__vector_39>:
}

ISR(TWI_vect){
    1fde:	1f 92       	push	r1
    1fe0:	0f 92       	push	r0
    1fe2:	0f b6       	in	r0, 0x3f	; 63
    1fe4:	0f 92       	push	r0
    1fe6:	11 24       	eor	r1, r1
    1fe8:	0b b6       	in	r0, 0x3b	; 59
    1fea:	0f 92       	push	r0
    1fec:	2f 93       	push	r18
    1fee:	3f 93       	push	r19
    1ff0:	4f 93       	push	r20
    1ff2:	5f 93       	push	r21
    1ff4:	6f 93       	push	r22
    1ff6:	7f 93       	push	r23
    1ff8:	8f 93       	push	r24
    1ffa:	9f 93       	push	r25
    1ffc:	af 93       	push	r26
    1ffe:	bf 93       	push	r27
    2000:	ef 93       	push	r30
    2002:	ff 93       	push	r31
	switch(TW_STATUS){
    2004:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    2008:	88 7f       	andi	r24, 0xF8	; 248
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	89 35       	cpi	r24, 0x59	; 89
    200e:	91 05       	cpc	r25, r1
    2010:	08 f0       	brcs	.+2      	; 0x2014 <__vector_39+0x36>
    2012:	aa c0       	rjmp	.+340    	; 0x2168 <__vector_39+0x18a>
    2014:	fc 01       	movw	r30, r24
    2016:	88 27       	eor	r24, r24
    2018:	ee 58       	subi	r30, 0x8E	; 142
    201a:	ff 4f       	sbci	r31, 0xFF	; 255
    201c:	8f 4f       	sbci	r24, 0xFF	; 255
    201e:	74 c3       	rjmp	.+1768   	; 0x2708 <__tablejump2__>
		// All Master
		case TW_START:     // sent start condition
		case TW_REP_START: // sent repeated start condition
			// copy device address and r/w bit to output register and ack
			TWDR = twi_slarw;
    2020:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <_ZL9twi_slarw>
    2024:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>

//=======================Interrupt Functions=========================//

void reply(bool ack) {
	if(ack){ // transmit master read ready signal, with or without ack
		TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2028:	85 ec       	ldi	r24, 0xC5	; 197
    202a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    202e:	9c c0       	rjmp	.+312    	; 0x2168 <__vector_39+0x18a>

		// Master Transmitter
		case TW_MT_SLA_ACK:  // slave receiver acked address
		case TW_MT_DATA_ACK: // slave receiver acked data
			// if there is data to send, send it, otherwise stop
			if(twi_regBufferIndex < twi_regBufferLength){
    2030:	90 91 1f 06 	lds	r25, 0x061F	; 0x80061f <_ZL18twi_regBufferIndex>
    2034:	80 91 1e 06 	lds	r24, 0x061E	; 0x80061e <_ZL19twi_regBufferLength>
    2038:	98 17       	cp	r25, r24
    203a:	98 f4       	brcc	.+38     	; 0x2062 <__vector_39+0x84>
				TWDR = twi_regBuffer[twi_regBufferIndex++];
    203c:	e0 91 20 06 	lds	r30, 0x0620	; 0x800620 <_ZL13twi_regBuffer>
    2040:	f0 91 21 06 	lds	r31, 0x0621	; 0x800621 <_ZL13twi_regBuffer+0x1>
    2044:	80 91 1f 06 	lds	r24, 0x061F	; 0x80061f <_ZL18twi_regBufferIndex>
    2048:	91 e0       	ldi	r25, 0x01	; 1
    204a:	98 0f       	add	r25, r24
    204c:	90 93 1f 06 	sts	0x061F, r25	; 0x80061f <_ZL18twi_regBufferIndex>
    2050:	e8 0f       	add	r30, r24
    2052:	f1 1d       	adc	r31, r1
    2054:	80 81       	ld	r24, Z
    2056:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>

//=======================Interrupt Functions=========================//

void reply(bool ack) {
	if(ack){ // transmit master read ready signal, with or without ack
		TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    205a:	85 ec       	ldi	r24, 0xC5	; 197
    205c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2060:	83 c0       	rjmp	.+262    	; 0x2168 <__vector_39+0x18a>
		case TW_MT_DATA_ACK: // slave receiver acked data
			// if there is data to send, send it, otherwise stop
			if(twi_regBufferIndex < twi_regBufferLength){
				TWDR = twi_regBuffer[twi_regBufferIndex++];
				reply(true);
			}else if(twi_masterBufferIndex < twi_masterBufferLength){
    2062:	90 91 23 06 	lds	r25, 0x0623	; 0x800623 <_ZL21twi_masterBufferIndex>
    2066:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <_ZL22twi_masterBufferLength>
    206a:	98 17       	cp	r25, r24
    206c:	98 f4       	brcc	.+38     	; 0x2094 <__vector_39+0xb6>
				// copy data to output register and ack
				TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    206e:	e0 91 24 06 	lds	r30, 0x0624	; 0x800624 <_ZL16twi_masterBuffer>
    2072:	f0 91 25 06 	lds	r31, 0x0625	; 0x800625 <_ZL16twi_masterBuffer+0x1>
    2076:	80 91 23 06 	lds	r24, 0x0623	; 0x800623 <_ZL21twi_masterBufferIndex>
    207a:	91 e0       	ldi	r25, 0x01	; 1
    207c:	98 0f       	add	r25, r24
    207e:	90 93 23 06 	sts	0x0623, r25	; 0x800623 <_ZL21twi_masterBufferIndex>
    2082:	e8 0f       	add	r30, r24
    2084:	f1 1d       	adc	r31, r1
    2086:	80 81       	ld	r24, Z
    2088:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>

//=======================Interrupt Functions=========================//

void reply(bool ack) {
	if(ack){ // transmit master read ready signal, with or without ack
		TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    208c:	85 ec       	ldi	r24, 0xC5	; 197
    208e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2092:	6a c0       	rjmp	.+212    	; 0x2168 <__vector_39+0x18a>
			}else if(twi_masterBufferIndex < twi_masterBufferLength){
				// copy data to output register and ack
				TWDR = twi_masterBuffer[twi_masterBufferIndex++];
				reply(true);
			}else{
				if (twi_sendStop){
    2094:	80 91 27 06 	lds	r24, 0x0627	; 0x800627 <_ZL12twi_sendStop>
    2098:	88 23       	and	r24, r24
					stop();
    209a:	21 f0       	breq	.+8      	; 0x20a4 <__vector_39+0xc6>
    209c:	8f df       	rcall	.-226    	; 0x1fbc <_Z4stopv>
					transmitting = false; //TODO can this go inside of stop()?
    209e:	10 92 2a 06 	sts	0x062A, r1	; 0x80062a <_ZL12transmitting>
    20a2:	62 c0       	rjmp	.+196    	; 0x2168 <__vector_39+0x18a>
				}else {
					twi_inRepStart = true;	// we're gonna send the START
    20a4:	81 e0       	ldi	r24, 0x01	; 1
    20a6:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <_ZL14twi_inRepStart>
					// don't enable the interrupt. We'll generate the start, but we
					// avoid handling the interrupt until we're in the next transaction,
					// at the point where we would normally issue the start.
					TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    20aa:	84 ea       	ldi	r24, 0xA4	; 164
    20ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
					twi_state = TWI_READY;
    20b0:	10 92 29 06 	sts	0x0629, r1	; 0x800629 <_ZL9twi_state>
    20b4:	59 c0       	rjmp	.+178    	; 0x2168 <__vector_39+0x18a>
				}
			}
			break;
		case TW_MT_SLA_NACK:  // address sent, nack received
			twi_error = TW_MT_SLA_NACK;
    20b6:	80 e2       	ldi	r24, 0x20	; 32
    20b8:	80 93 1d 06 	sts	0x061D, r24	; 0x80061d <_ZL9twi_error>
			stop();
    20bc:	7f df       	rcall	.-258    	; 0x1fbc <_Z4stopv>
			transmitting = false;
    20be:	10 92 2a 06 	sts	0x062A, r1	; 0x80062a <_ZL12transmitting>
			break;
    20c2:	52 c0       	rjmp	.+164    	; 0x2168 <__vector_39+0x18a>
		case TW_MT_DATA_NACK: // data sent, nack received
			twi_error = TW_MT_DATA_NACK;
    20c4:	80 e3       	ldi	r24, 0x30	; 48
    20c6:	80 93 1d 06 	sts	0x061D, r24	; 0x80061d <_ZL9twi_error>
			stop();
    20ca:	78 df       	rcall	.-272    	; 0x1fbc <_Z4stopv>
			transmitting = false;
    20cc:	10 92 2a 06 	sts	0x062A, r1	; 0x80062a <_ZL12transmitting>
			break;
		case TW_MT_ARB_LOST: // lost bus arbitration
			twi_error = TW_MT_ARB_LOST;
    20d0:	4b c0       	rjmp	.+150    	; 0x2168 <__vector_39+0x18a>
    20d2:	88 e3       	ldi	r24, 0x38	; 56
    20d4:	80 93 1d 06 	sts	0x061D, r24	; 0x80061d <_ZL9twi_error>
			releaseBus();
    20d8:	7c df       	rcall	.-264    	; 0x1fd2 <_Z10releaseBusv>
			transmitting = false;
    20da:	10 92 2a 06 	sts	0x062A, r1	; 0x80062a <_ZL12transmitting>
			break;
    20de:	44 c0       	rjmp	.+136    	; 0x2168 <__vector_39+0x18a>

		// Master Receiver
		case TW_MR_DATA_ACK: // data received, ack sent
			// put byte into buffer
			twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    20e0:	e0 91 24 06 	lds	r30, 0x0624	; 0x800624 <_ZL16twi_masterBuffer>
    20e4:	f0 91 25 06 	lds	r31, 0x0625	; 0x800625 <_ZL16twi_masterBuffer+0x1>
    20e8:	80 91 23 06 	lds	r24, 0x0623	; 0x800623 <_ZL21twi_masterBufferIndex>
    20ec:	91 e0       	ldi	r25, 0x01	; 1
    20ee:	98 0f       	add	r25, r24
    20f0:	90 93 23 06 	sts	0x0623, r25	; 0x800623 <_ZL21twi_masterBufferIndex>
    20f4:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    20f8:	e8 0f       	add	r30, r24
    20fa:	f1 1d       	adc	r31, r1
    20fc:	90 83       	st	Z, r25
		case TW_MR_SLA_ACK:  // address sent, ack received
			// ack if more bytes are expected, otherwise nack
			if(twi_masterBufferIndex < twi_masterBufferLength){
    20fe:	90 91 23 06 	lds	r25, 0x0623	; 0x800623 <_ZL21twi_masterBufferIndex>
    2102:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <_ZL22twi_masterBufferLength>
    2106:	98 17       	cp	r25, r24
    2108:	20 f4       	brcc	.+8      	; 0x2112 <__vector_39+0x134>

//=======================Interrupt Functions=========================//

void reply(bool ack) {
	if(ack){ // transmit master read ready signal, with or without ack
		TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    210a:	85 ec       	ldi	r24, 0xC5	; 197
    210c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2110:	2b c0       	rjmp	.+86     	; 0x2168 <__vector_39+0x18a>
	}else{
		TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2112:	85 e8       	ldi	r24, 0x85	; 133
    2114:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2118:	27 c0       	rjmp	.+78     	; 0x2168 <__vector_39+0x18a>
				reply(false);
			}
			break;
		case TW_MR_DATA_NACK: // data received, nack sent
			// put final byte into buffer
			twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    211a:	e0 91 24 06 	lds	r30, 0x0624	; 0x800624 <_ZL16twi_masterBuffer>
    211e:	f0 91 25 06 	lds	r31, 0x0625	; 0x800625 <_ZL16twi_masterBuffer+0x1>
    2122:	80 91 23 06 	lds	r24, 0x0623	; 0x800623 <_ZL21twi_masterBufferIndex>
    2126:	91 e0       	ldi	r25, 0x01	; 1
    2128:	98 0f       	add	r25, r24
    212a:	90 93 23 06 	sts	0x0623, r25	; 0x800623 <_ZL21twi_masterBufferIndex>
    212e:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2132:	e8 0f       	add	r30, r24
    2134:	f1 1d       	adc	r31, r1
			if (twi_sendStop){
    2136:	90 83       	st	Z, r25
    2138:	80 91 27 06 	lds	r24, 0x0627	; 0x800627 <_ZL12twi_sendStop>
    213c:	88 23       	and	r24, r24
				stop();
    213e:	21 f0       	breq	.+8      	; 0x2148 <__vector_39+0x16a>
    2140:	3d df       	rcall	.-390    	; 0x1fbc <_Z4stopv>
				transmitting = false;
    2142:	10 92 2a 06 	sts	0x062A, r1	; 0x80062a <_ZL12transmitting>
    2146:	10 c0       	rjmp	.+32     	; 0x2168 <__vector_39+0x18a>
			}else {
				twi_inRepStart = true;	// we're gonna send the START
    2148:	81 e0       	ldi	r24, 0x01	; 1
    214a:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <_ZL14twi_inRepStart>
				// don't enable the interrupt. We'll generate the start, but we
				// avoid handling the interrupt until we're in the next transaction,
				// at the point where we would normally issue the start.
				TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    214e:	84 ea       	ldi	r24, 0xA4	; 164
    2150:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
				twi_state = TWI_READY;
    2154:	10 92 29 06 	sts	0x0629, r1	; 0x800629 <_ZL9twi_state>
			}
			break;
		case TW_MR_SLA_NACK: // address sent, nack received
			stop();
    2158:	07 c0       	rjmp	.+14     	; 0x2168 <__vector_39+0x18a>
			transmitting = false;
    215a:	30 df       	rcall	.-416    	; 0x1fbc <_Z4stopv>
    215c:	10 92 2a 06 	sts	0x062A, r1	; 0x80062a <_ZL12transmitting>
*/
		// All
		case TW_NO_INFO:   // no state information
			break;
		case TW_BUS_ERROR: // bus error, illegal stop/start
			twi_error = TW_BUS_ERROR;
    2160:	03 c0       	rjmp	.+6      	; 0x2168 <__vector_39+0x18a>
    2162:	10 92 1d 06 	sts	0x061D, r1	; 0x80061d <_ZL9twi_error>
			stop();
    2166:	2a df       	rcall	.-428    	; 0x1fbc <_Z4stopv>
			break;
	}
}
    2168:	ff 91       	pop	r31
    216a:	ef 91       	pop	r30
    216c:	bf 91       	pop	r27
    216e:	af 91       	pop	r26
    2170:	9f 91       	pop	r25
    2172:	8f 91       	pop	r24
    2174:	7f 91       	pop	r23
    2176:	6f 91       	pop	r22
    2178:	5f 91       	pop	r21
    217a:	4f 91       	pop	r20
    217c:	3f 91       	pop	r19
    217e:	2f 91       	pop	r18
    2180:	0f 90       	pop	r0
    2182:	0b be       	out	0x3b, r0	; 59
    2184:	0f 90       	pop	r0
    2186:	0f be       	out	0x3f, r0	; 63
    2188:	0f 90       	pop	r0
    218a:	1f 90       	pop	r1
    218c:	18 95       	reti

0000218e <_ZN13DigitalSensor5beginEv>:
	else LedPort &= ~LedPin;
}

bool Robot::ReadTestBtn(){
	return !((TestBtnPinPort & TestBtnPin) > 0);
}
    218e:	81 e0       	ldi	r24, 0x01	; 1
    2190:	08 95       	ret

00002192 <_ZN13DigitalSensor14IsValidRequestEPKhh>:
    2192:	81 e0       	ldi	r24, 0x01	; 1
    2194:	41 11       	cpse	r20, r1
    2196:	80 e0       	ldi	r24, 0x00	; 0
    2198:	08 95       	ret

0000219a <_ZN13DigitalSensor15UpdateRequestedEPh>:
    219a:	fc 01       	movw	r30, r24
    219c:	a5 81       	ldd	r26, Z+5	; 0x05
    219e:	b6 81       	ldd	r27, Z+6	; 0x06
    21a0:	9c 91       	ld	r25, X
    21a2:	84 81       	ldd	r24, Z+4	; 0x04
    21a4:	98 23       	and	r25, r24
    21a6:	21 e0       	ldi	r18, 0x01	; 1
    21a8:	09 f4       	brne	.+2      	; 0x21ac <_ZN13DigitalSensor15UpdateRequestedEPh+0x12>
    21aa:	20 e0       	ldi	r18, 0x00	; 0
    21ac:	87 81       	ldd	r24, Z+7	; 0x07
    21ae:	82 27       	eor	r24, r18
    21b0:	fb 01       	movw	r30, r22
    21b2:	80 83       	st	Z, r24
    21b4:	81 e0       	ldi	r24, 0x01	; 1
    21b6:	08 95       	ret

000021b8 <_ZN7ISensor6UpdateEPKhh>:
    21b8:	cf 93       	push	r28
    21ba:	df 93       	push	r29
    21bc:	ec 01       	movw	r28, r24
    21be:	e8 81       	ld	r30, Y
    21c0:	f9 81       	ldd	r31, Y+1	; 0x01
    21c2:	04 80       	ldd	r0, Z+4	; 0x04
    21c4:	f5 81       	ldd	r31, Z+5	; 0x05
    21c6:	e0 2d       	mov	r30, r0
    21c8:	19 95       	eicall
    21ca:	88 23       	and	r24, r24
    21cc:	a1 f0       	breq	.+40     	; 0x21f6 <_ZN7ISensor6UpdateEPKhh+0x3e>
    21ce:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    21d2:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    21d6:	8a 81       	ldd	r24, Y+2	; 0x02
    21d8:	82 83       	std	Z+2, r24	; 0x02
    21da:	bf 01       	movw	r22, r30
    21dc:	6d 5f       	subi	r22, 0xFD	; 253
    21de:	7f 4f       	sbci	r23, 0xFF	; 255
    21e0:	e8 81       	ld	r30, Y
    21e2:	f9 81       	ldd	r31, Y+1	; 0x01
    21e4:	06 80       	ldd	r0, Z+6	; 0x06
    21e6:	f7 81       	ldd	r31, Z+7	; 0x07
    21e8:	e0 2d       	mov	r30, r0
    21ea:	ce 01       	movw	r24, r28
    21ec:	19 95       	eicall
    21ee:	61 e0       	ldi	r22, 0x01	; 1
    21f0:	68 0f       	add	r22, r24
    21f2:	83 e0       	ldi	r24, 0x03	; 3
    21f4:	2b da       	rcall	.-2986   	; 0x164c <_ZN9EtherComm11SendCommandEhh>
    21f6:	df 91       	pop	r29
    21f8:	cf 91       	pop	r28
    21fa:	08 95       	ret

000021fc <_ZN5Robot6SetLedEb>:
    21fc:	88 23       	and	r24, r24
    21fe:	11 f0       	breq	.+4      	; 0x2204 <__stack+0x5>
    2200:	2f 9a       	sbi	0x05, 7	; 5
    2202:	08 95       	ret
    2204:	2f 98       	cbi	0x05, 7	; 5
    2206:	08 95       	ret

00002208 <_ZN5Robot14RegisterDeviceER7ISensor>:
bool Robot::begin(){
	LedDDR |= LedPin;
	return RegisterDevices();
}

void Robot::RegisterDevice(ISensor& sensor){
    2208:	0f 93       	push	r16
    220a:	1f 93       	push	r17
    220c:	cf 93       	push	r28
    220e:	df 93       	push	r29
	uint8_t id = sensor.getId();
	if(devices[id] == NULL){
    2210:	dc 01       	movw	r26, r24
    2212:	12 96       	adiw	r26, 0x02	; 2
    2214:	cc 91       	ld	r28, X
    2216:	12 97       	sbiw	r26, 0x02	; 2
    2218:	d0 e0       	ldi	r29, 0x00	; 0
    221a:	fe 01       	movw	r30, r28
    221c:	ee 0f       	add	r30, r30
    221e:	ff 1f       	adc	r31, r31
    2220:	ee 5b       	subi	r30, 0xBE	; 190
    2222:	f9 4f       	sbci	r31, 0xF9	; 249
    2224:	20 81       	ld	r18, Z
    2226:	31 81       	ldd	r19, Z+1	; 0x01
    2228:	23 2b       	or	r18, r19
    222a:	79 f4       	brne	.+30     	; 0x224a <_ZN5Robot14RegisterDeviceER7ISensor+0x42>
    222c:	8c 01       	movw	r16, r24
		if(sensor.begin()){
    222e:	ed 91       	ld	r30, X+
    2230:	fc 91       	ld	r31, X
    2232:	02 80       	ldd	r0, Z+2	; 0x02
    2234:	f3 81       	ldd	r31, Z+3	; 0x03
    2236:	e0 2d       	mov	r30, r0
    2238:	19 95       	eicall
    223a:	88 23       	and	r24, r24
    223c:	31 f0       	breq	.+12     	; 0x224a <_ZN5Robot14RegisterDeviceER7ISensor+0x42>
			devices[id] = &sensor; //TODO error handling
    223e:	cc 0f       	add	r28, r28
    2240:	dd 1f       	adc	r29, r29
    2242:	ce 5b       	subi	r28, 0xBE	; 190
    2244:	d9 4f       	sbci	r29, 0xF9	; 249
    2246:	19 83       	std	Y+1, r17	; 0x01
    2248:	08 83       	st	Y, r16
		}
	}else{
		//TODO id collisions
	}
}
    224a:	df 91       	pop	r29
    224c:	cf 91       	pop	r28
    224e:	1f 91       	pop	r17
    2250:	0f 91       	pop	r16
    2252:	08 95       	ret

00002254 <_ZN5Robot15RegisterDevicesEv>:

DigitalSensor BtnTest(0, TestBtnDDR, TestBtnPort, TestBtnPinPort, TestBtnPin);
ImuSensor Imu(1);

bool Robot::RegisterDevices(){
	RegisterDevice(BtnTest); //TODO return if successful
    2254:	8a e3       	ldi	r24, 0x3A	; 58
    2256:	96 e0       	ldi	r25, 0x06	; 6
    2258:	d7 df       	rcall	.-82     	; 0x2208 <_ZN5Robot14RegisterDeviceER7ISensor>
	RegisterDevice(Imu);
    225a:	8b e2       	ldi	r24, 0x2B	; 43
    225c:	96 e0       	ldi	r25, 0x06	; 6
    225e:	d4 df       	rcall	.-88     	; 0x2208 <_ZN5Robot14RegisterDeviceER7ISensor>
	
	return true;
}
    2260:	81 e0       	ldi	r24, 0x01	; 1
    2262:	08 95       	ret

00002264 <_ZN5Robot5beginEv>:
bool Robot::ReadTestBtn(){
	return !((TestBtnPinPort & TestBtnPin) > 0);
}

bool Robot::begin(){
	LedDDR |= LedPin;
    2264:	27 9a       	sbi	0x04, 7	; 4
	return RegisterDevices();
    2266:	f6 cf       	rjmp	.-20     	; 0x2254 <_ZN5Robot15RegisterDevicesEv>
}
    2268:	08 95       	ret

0000226a <_GLOBAL__sub_I__ZN5Robot7devicesE>:
	
	virtual void Update(const uint8_t* data, uint8_t len) = 0;
	virtual bool begin() = 0;
	
protected:
	IDevice(uint8_t ID) : id(ID){
    226a:	ea e3       	ldi	r30, 0x3A	; 58
    226c:	f6 e0       	ldi	r31, 0x06	; 6
    226e:	12 82       	std	Z+2, r1	; 0x02
				//}
			}
		}
	
	protected:
		ISensor(uint8_t ID, uint8_t type) : IDevice(ID), sensorType(type) {
    2270:	81 e0       	ldi	r24, 0x01	; 1
    2272:	83 83       	std	Z+3, r24	; 0x03

#include "../ISensor.h"

class DigitalSensor : public ISensor{
public:
	DigitalSensor(uint8_t ID, Register& DDRPort, Register& PortPort, Register& PinPort, uint8_t Pin, bool Inversed = true) : ISensor(ID, SENSOR_TYPE_DIGITAL), pin(Pin), pinPort(&PinPort), inversed(Inversed) {
    2274:	20 ec       	ldi	r18, 0xC0	; 192
    2276:	32 e0       	ldi	r19, 0x02	; 2
    2278:	31 83       	std	Z+1, r19	; 0x01
    227a:	20 83       	st	Z, r18
    227c:	84 83       	std	Z+4, r24	; 0x04
    227e:	2f e2       	ldi	r18, 0x2F	; 47
    2280:	30 e0       	ldi	r19, 0x00	; 0
    2282:	36 83       	std	Z+6, r19	; 0x06
    2284:	25 83       	std	Z+5, r18	; 0x05
    2286:	87 83       	std	Z+7, r24	; 0x07
		DDRPort &= ~pin; //Enable input
    2288:	80 98       	cbi	0x10, 0	; 16
		PortPort |= pin; //Enable pullup
    228a:	88 9a       	sbi	0x11, 0	; 17
#include <stddef.h>

IDevice* Robot::devices[NUM_DEVICES];

DigitalSensor BtnTest(0, TestBtnDDR, TestBtnPort, TestBtnPinPort, TestBtnPin);
ImuSensor Imu(1);
    228c:	61 e0       	ldi	r22, 0x01	; 1
    228e:	8b e2       	ldi	r24, 0x2B	; 43
    2290:	96 e0       	ldi	r25, 0x06	; 6
    2292:	2f c0       	rjmp	.+94     	; 0x22f2 <_ZN9ImuSensorC1Eh>
    2294:	08 95       	ret

00002296 <_ZN9ImuSensor14IsValidRequestEPKhh>:
						len = UpdateRequested(EtherComm::buffer + /*4*/3);
						EtherComm::SendCommand(CMD_UpdateDevice, len +  /*2*/1);
					}
				//}
			}
		}
    2296:	81 e0       	ldi	r24, 0x01	; 1
    2298:	41 11       	cpse	r20, r1
    229a:	80 e0       	ldi	r24, 0x00	; 0
    229c:	08 95       	ret

0000229e <_ZN9ImuSensor5beginEv>:
ImuSensor::ImuSensor(uint8_t ID) : ISensor(ID, SENSOR_TYPE_DIGITAL), imu(55, 0x28) {
	
}

bool ImuSensor::begin(){
	return imu.begin();
    229e:	6c e0       	ldi	r22, 0x0C	; 12
    22a0:	04 96       	adiw	r24, 0x04	; 4
    22a2:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>
}
    22a6:	08 95       	ret

000022a8 <_ZN9ImuSensor15UpdateRequestedEPh>:
	*buffer++ = *val++;
}

AdafruitImu::Vector<3> vector;

uint8_t ImuSensor::UpdateRequested(uint8_t* buffer){
    22a8:	cf 93       	push	r28
    22aa:	df 93       	push	r29
    22ac:	eb 01       	movw	r28, r22
	buffer[0] = 0b01111111;
    22ae:	2f e7       	ldi	r18, 0x7F	; 127
    22b0:	28 83       	st	Y, r18
	buffer[1] = imu.getTemp();
    22b2:	04 96       	adiw	r24, 0x04	; 4
    22b4:	0e 94 52 02 	call	0x4a4	; 0x4a4 <_ZN15Adafruit_BNO0557getTempEv>
    22b8:	89 83       	std	Y+1, r24	; 0x01
	return imu.begin();
}

static void saveFloat(float f, uint8_t* buffer){
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    22ba:	1a 82       	std	Y+2, r1	; 0x02
	*buffer++ = *val++;
    22bc:	1b 82       	std	Y+3, r1	; 0x03
	*buffer++ = *val++;
    22be:	1c 82       	std	Y+4, r1	; 0x04
	*buffer++ = *val++;
    22c0:	1d 82       	std	Y+5, r1	; 0x05
	return imu.begin();
}

static void saveFloat(float f, uint8_t* buffer){
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    22c2:	1e 82       	std	Y+6, r1	; 0x06
	*buffer++ = *val++;
    22c4:	1f 82       	std	Y+7, r1	; 0x07
	*buffer++ = *val++;
    22c6:	18 86       	std	Y+8, r1	; 0x08
	*buffer++ = *val++;
    22c8:	19 86       	std	Y+9, r1	; 0x09
	return imu.begin();
}

static void saveFloat(float f, uint8_t* buffer){
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    22ca:	1a 86       	std	Y+10, r1	; 0x0a
	*buffer++ = *val++;
    22cc:	1b 86       	std	Y+11, r1	; 0x0b
	*buffer++ = *val++;
    22ce:	1c 86       	std	Y+12, r1	; 0x0c
	*buffer++ = *val++;
    22d0:	1d 86       	std	Y+13, r1	; 0x0d
	return imu.begin();
}

static void saveFloat(float f, uint8_t* buffer){
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    22d2:	1e 86       	std	Y+14, r1	; 0x0e
	*buffer++ = *val++;
    22d4:	1f 86       	std	Y+15, r1	; 0x0f
	*buffer++ = *val++;
    22d6:	18 8a       	std	Y+16, r1	; 0x10
	*buffer++ = *val++;
    22d8:	19 8a       	std	Y+17, r1	; 0x11
	return imu.begin();
}

static void saveFloat(float f, uint8_t* buffer){
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    22da:	1a 8a       	std	Y+18, r1	; 0x12
	*buffer++ = *val++;
    22dc:	1b 8a       	std	Y+19, r1	; 0x13
	*buffer++ = *val++;
    22de:	1c 8a       	std	Y+20, r1	; 0x14
	*buffer++ = *val++;
    22e0:	1d 8a       	std	Y+21, r1	; 0x15
	return imu.begin();
}

static void saveFloat(float f, uint8_t* buffer){
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    22e2:	1e 8a       	std	Y+22, r1	; 0x16
	*buffer++ = *val++;
    22e4:	1f 8a       	std	Y+23, r1	; 0x17
	*buffer++ = *val++;
    22e6:	18 8e       	std	Y+24, r1	; 0x18
	*buffer++ = *val++;
    22e8:	19 8e       	std	Y+25, r1	; 0x19
	saveFloat(/*vector.x()*/0.0, buffer + 14);
	saveFloat(/*vector.y()*/0.0, buffer + 18);
	saveFloat(/*vector.z()*/0.0, buffer + 22);
	
	return 1 + 1 + 6*4;
    22ea:	8a e1       	ldi	r24, 0x1A	; 26
    22ec:	df 91       	pop	r29
    22ee:	cf 91       	pop	r28
    22f0:	08 95       	ret

000022f2 <_ZN9ImuSensorC1Eh>:

#include "ImuSensor.h"
//#include "../BNO055/utility/vector.h"
//Adafruit_BNO055 ImuSensor::imu;

ImuSensor::ImuSensor(uint8_t ID) : ISensor(ID, SENSOR_TYPE_DIGITAL), imu(55, 0x28) {
    22f2:	0f 93       	push	r16
    22f4:	1f 93       	push	r17
	
	virtual void Update(const uint8_t* data, uint8_t len) = 0;
	virtual bool begin() = 0;
	
protected:
	IDevice(uint8_t ID) : id(ID){
    22f6:	fc 01       	movw	r30, r24
    22f8:	62 83       	std	Z+2, r22	; 0x02
	
	protected:
		ISensor(uint8_t ID, uint8_t type) : IDevice(ID), sensorType(type) {
    22fa:	21 e0       	ldi	r18, 0x01	; 1
    22fc:	23 83       	std	Z+3, r18	; 0x03
    22fe:	2c ec       	ldi	r18, 0xCC	; 204
    2300:	32 e0       	ldi	r19, 0x02	; 2
    2302:	31 83       	std	Z+1, r19	; 0x01
    2304:	20 83       	st	Z, r18
    2306:	0c e1       	ldi	r16, 0x1C	; 28
    2308:	16 e0       	ldi	r17, 0x06	; 6
    230a:	28 e2       	ldi	r18, 0x28	; 40
    230c:	47 e3       	ldi	r20, 0x37	; 55
    230e:	50 e0       	ldi	r21, 0x00	; 0
    2310:	60 e0       	ldi	r22, 0x00	; 0
    2312:	70 e0       	ldi	r23, 0x00	; 0
    2314:	04 96       	adiw	r24, 0x04	; 4
    2316:	0e 94 54 01 	call	0x2a8	; 0x2a8 <_ZN15Adafruit_BNO055C1ElhP3TWI>
	
}
    231a:	1f 91       	pop	r17
    231c:	0f 91       	pop	r16
    231e:	08 95       	ret

00002320 <_GLOBAL__sub_I__ZN9ImuSensorC2Eh>:
	template <uint8_t N> class Vector
	{
		public:
		Vector()
		{
			memset(p_vec, 0, sizeof(double)*N);
    2320:	8c e0       	ldi	r24, 0x0C	; 12
    2322:	e2 e4       	ldi	r30, 0x42	; 66
    2324:	f8 e0       	ldi	r31, 0x08	; 8
    2326:	df 01       	movw	r26, r30
    2328:	1d 92       	st	X+, r1
    232a:	8a 95       	dec	r24
    232c:	e9 f7       	brne	.-6      	; 0x2328 <_GLOBAL__sub_I__ZN9ImuSensorC2Eh+0x8>
    232e:	08 95       	ret

00002330 <_GLOBAL__sub_I_bno>:
	setup();
	
	while(true){
		loop();
	}
    2330:	0f 93       	push	r16
    2332:	1f 93       	push	r17
/* Set the delay between fresh samples */
#define BNO055_SAMPLERATE_DELAY_MS 100

// Check I2C device address and correct line below (by default address is 0x29 or 0x28)
//                                   id, address
Adafruit_BNO055 bno = Adafruit_BNO055(55, 0x28);
    2334:	0c e1       	ldi	r16, 0x1C	; 28
    2336:	16 e0       	ldi	r17, 0x06	; 6
    2338:	28 e2       	ldi	r18, 0x28	; 40
    233a:	47 e3       	ldi	r20, 0x37	; 55
    233c:	50 e0       	ldi	r21, 0x00	; 0
    233e:	60 e0       	ldi	r22, 0x00	; 0
    2340:	70 e0       	ldi	r23, 0x00	; 0
    2342:	8e e4       	ldi	r24, 0x4E	; 78
    2344:	98 e0       	ldi	r25, 0x08	; 8
    2346:	0e 94 54 01 	call	0x2a8	; 0x2a8 <_ZN15Adafruit_BNO055C1ElhP3TWI>
	setup();
	
	while(true){
		loop();
	}
    234a:	1f 91       	pop	r17
    234c:	0f 91       	pop	r16
    234e:	08 95       	ret

00002350 <_ZN5Print5writeEPKhj>:
}

uint16_t Print::print(char c)
{
  return write(c);
}
    2350:	cf 92       	push	r12
    2352:	df 92       	push	r13
    2354:	ef 92       	push	r14
    2356:	ff 92       	push	r15
    2358:	0f 93       	push	r16
    235a:	1f 93       	push	r17
    235c:	cf 93       	push	r28
    235e:	df 93       	push	r29
    2360:	41 15       	cp	r20, r1
    2362:	51 05       	cpc	r21, r1
    2364:	c1 f0       	breq	.+48     	; 0x2396 <_ZN5Print5writeEPKhj+0x46>
    2366:	6a 01       	movw	r12, r20
    2368:	8c 01       	movw	r16, r24
    236a:	e6 2e       	mov	r14, r22
    236c:	f7 2e       	mov	r15, r23
    236e:	c0 e0       	ldi	r28, 0x00	; 0
    2370:	d0 e0       	ldi	r29, 0x00	; 0
    2372:	d7 01       	movw	r26, r14
    2374:	6d 91       	ld	r22, X+
    2376:	7d 01       	movw	r14, r26
    2378:	d8 01       	movw	r26, r16
    237a:	ed 91       	ld	r30, X+
    237c:	fc 91       	ld	r31, X
    237e:	01 90       	ld	r0, Z+
    2380:	f0 81       	ld	r31, Z
    2382:	e0 2d       	mov	r30, r0
    2384:	c8 01       	movw	r24, r16
    2386:	19 95       	eicall
    2388:	89 2b       	or	r24, r25
    238a:	39 f0       	breq	.+14     	; 0x239a <_ZN5Print5writeEPKhj+0x4a>
    238c:	21 96       	adiw	r28, 0x01	; 1
    238e:	cc 16       	cp	r12, r28
    2390:	dd 06       	cpc	r13, r29
    2392:	79 f7       	brne	.-34     	; 0x2372 <_ZN5Print5writeEPKhj+0x22>
    2394:	02 c0       	rjmp	.+4      	; 0x239a <_ZN5Print5writeEPKhj+0x4a>
    2396:	c0 e0       	ldi	r28, 0x00	; 0
    2398:	d0 e0       	ldi	r29, 0x00	; 0
    239a:	ce 01       	movw	r24, r28
    239c:	df 91       	pop	r29
    239e:	cf 91       	pop	r28
    23a0:	1f 91       	pop	r17
    23a2:	0f 91       	pop	r16
    23a4:	ff 90       	pop	r15
    23a6:	ef 90       	pop	r14
    23a8:	df 90       	pop	r13
    23aa:	cf 90       	pop	r12
    23ac:	08 95       	ret

000023ae <_ZN5Print5printEPKc>:
    23ae:	61 15       	cp	r22, r1
    23b0:	71 05       	cpc	r23, r1
    23b2:	81 f0       	breq	.+32     	; 0x23d4 <_ZN5Print5printEPKc+0x26>
    23b4:	fb 01       	movw	r30, r22
    23b6:	01 90       	ld	r0, Z+
    23b8:	00 20       	and	r0, r0
    23ba:	e9 f7       	brne	.-6      	; 0x23b6 <_ZN5Print5printEPKc+0x8>
    23bc:	31 97       	sbiw	r30, 0x01	; 1
    23be:	af 01       	movw	r20, r30
    23c0:	46 1b       	sub	r20, r22
    23c2:	57 0b       	sbc	r21, r23
    23c4:	dc 01       	movw	r26, r24
    23c6:	ed 91       	ld	r30, X+
    23c8:	fc 91       	ld	r31, X
    23ca:	02 80       	ldd	r0, Z+2	; 0x02
    23cc:	f3 81       	ldd	r31, Z+3	; 0x03
    23ce:	e0 2d       	mov	r30, r0
    23d0:	19 95       	eicall
    23d2:	08 95       	ret
    23d4:	80 e0       	ldi	r24, 0x00	; 0
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	08 95       	ret

000023da <_ZN5Print7printlnEv>:
  //void clearWriteError() { setWriteError(0); }
  
  virtual uint16_t write(uint8_t) = 0;
  uint16_t write(const char *str) {
	  if (str == NULL) return 0;
	  return write((const uint8_t *)str, strlen(str));
    23da:	dc 01       	movw	r26, r24
    23dc:	ed 91       	ld	r30, X+
    23de:	fc 91       	ld	r31, X
    23e0:	02 80       	ldd	r0, Z+2	; 0x02
    23e2:	f3 81       	ldd	r31, Z+3	; 0x03
    23e4:	e0 2d       	mov	r30, r0
    23e6:	42 e0       	ldi	r20, 0x02	; 2
    23e8:	50 e0       	ldi	r21, 0x00	; 0
    23ea:	64 ed       	ldi	r22, 0xD4	; 212
    23ec:	72 e0       	ldi	r23, 0x02	; 2
    23ee:	19 95       	eicall
}
*/
uint16_t Print::println(void)
{
  return write("\r\n");
}
    23f0:	08 95       	ret

000023f2 <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}
*/
uint16_t Print::println(const char c[])
{
    23f2:	0f 93       	push	r16
    23f4:	1f 93       	push	r17
    23f6:	cf 93       	push	r28
    23f8:	df 93       	push	r29
    23fa:	ec 01       	movw	r28, r24
  uint16_t n = print(c);
    23fc:	d8 df       	rcall	.-80     	; 0x23ae <_ZN5Print5printEPKc>
    23fe:	8c 01       	movw	r16, r24
  n += println();
    2400:	ce 01       	movw	r24, r28
    2402:	eb df       	rcall	.-42     	; 0x23da <_ZN5Print7printlnEv>
  return n;
}
    2404:	80 0f       	add	r24, r16
    2406:	91 1f       	adc	r25, r17
    2408:	df 91       	pop	r29
    240a:	cf 91       	pop	r28
    240c:	1f 91       	pop	r17
    240e:	0f 91       	pop	r16
    2410:	08 95       	ret

00002412 <__divsf3>:
    2412:	0c d0       	rcall	.+24     	; 0x242c <__divsf3x>
    2414:	ba c0       	rjmp	.+372    	; 0x258a <__fp_round>
    2416:	b2 d0       	rcall	.+356    	; 0x257c <__fp_pscB>
    2418:	40 f0       	brcs	.+16     	; 0x242a <__divsf3+0x18>
    241a:	a9 d0       	rcall	.+338    	; 0x256e <__fp_pscA>
    241c:	30 f0       	brcs	.+12     	; 0x242a <__divsf3+0x18>
    241e:	21 f4       	brne	.+8      	; 0x2428 <__divsf3+0x16>
    2420:	5f 3f       	cpi	r21, 0xFF	; 255
    2422:	19 f0       	breq	.+6      	; 0x242a <__divsf3+0x18>
    2424:	9b c0       	rjmp	.+310    	; 0x255c <__fp_inf>
    2426:	51 11       	cpse	r21, r1
    2428:	e4 c0       	rjmp	.+456    	; 0x25f2 <__fp_szero>
    242a:	9e c0       	rjmp	.+316    	; 0x2568 <__fp_nan>

0000242c <__divsf3x>:
    242c:	bf d0       	rcall	.+382    	; 0x25ac <__fp_split3>
    242e:	98 f3       	brcs	.-26     	; 0x2416 <__divsf3+0x4>

00002430 <__divsf3_pse>:
    2430:	99 23       	and	r25, r25
    2432:	c9 f3       	breq	.-14     	; 0x2426 <__divsf3+0x14>
    2434:	55 23       	and	r21, r21
    2436:	b1 f3       	breq	.-20     	; 0x2424 <__divsf3+0x12>
    2438:	95 1b       	sub	r25, r21
    243a:	55 0b       	sbc	r21, r21
    243c:	bb 27       	eor	r27, r27
    243e:	aa 27       	eor	r26, r26
    2440:	62 17       	cp	r22, r18
    2442:	73 07       	cpc	r23, r19
    2444:	84 07       	cpc	r24, r20
    2446:	38 f0       	brcs	.+14     	; 0x2456 <__divsf3_pse+0x26>
    2448:	9f 5f       	subi	r25, 0xFF	; 255
    244a:	5f 4f       	sbci	r21, 0xFF	; 255
    244c:	22 0f       	add	r18, r18
    244e:	33 1f       	adc	r19, r19
    2450:	44 1f       	adc	r20, r20
    2452:	aa 1f       	adc	r26, r26
    2454:	a9 f3       	breq	.-22     	; 0x2440 <__divsf3_pse+0x10>
    2456:	33 d0       	rcall	.+102    	; 0x24be <__divsf3_pse+0x8e>
    2458:	0e 2e       	mov	r0, r30
    245a:	3a f0       	brmi	.+14     	; 0x246a <__divsf3_pse+0x3a>
    245c:	e0 e8       	ldi	r30, 0x80	; 128
    245e:	30 d0       	rcall	.+96     	; 0x24c0 <__divsf3_pse+0x90>
    2460:	91 50       	subi	r25, 0x01	; 1
    2462:	50 40       	sbci	r21, 0x00	; 0
    2464:	e6 95       	lsr	r30
    2466:	00 1c       	adc	r0, r0
    2468:	ca f7       	brpl	.-14     	; 0x245c <__divsf3_pse+0x2c>
    246a:	29 d0       	rcall	.+82     	; 0x24be <__divsf3_pse+0x8e>
    246c:	fe 2f       	mov	r31, r30
    246e:	27 d0       	rcall	.+78     	; 0x24be <__divsf3_pse+0x8e>
    2470:	66 0f       	add	r22, r22
    2472:	77 1f       	adc	r23, r23
    2474:	88 1f       	adc	r24, r24
    2476:	bb 1f       	adc	r27, r27
    2478:	26 17       	cp	r18, r22
    247a:	37 07       	cpc	r19, r23
    247c:	48 07       	cpc	r20, r24
    247e:	ab 07       	cpc	r26, r27
    2480:	b0 e8       	ldi	r27, 0x80	; 128
    2482:	09 f0       	breq	.+2      	; 0x2486 <__divsf3_pse+0x56>
    2484:	bb 0b       	sbc	r27, r27
    2486:	80 2d       	mov	r24, r0
    2488:	bf 01       	movw	r22, r30
    248a:	ff 27       	eor	r31, r31
    248c:	93 58       	subi	r25, 0x83	; 131
    248e:	5f 4f       	sbci	r21, 0xFF	; 255
    2490:	2a f0       	brmi	.+10     	; 0x249c <__divsf3_pse+0x6c>
    2492:	9e 3f       	cpi	r25, 0xFE	; 254
    2494:	51 05       	cpc	r21, r1
    2496:	68 f0       	brcs	.+26     	; 0x24b2 <__divsf3_pse+0x82>
    2498:	61 c0       	rjmp	.+194    	; 0x255c <__fp_inf>
    249a:	ab c0       	rjmp	.+342    	; 0x25f2 <__fp_szero>
    249c:	5f 3f       	cpi	r21, 0xFF	; 255
    249e:	ec f3       	brlt	.-6      	; 0x249a <__divsf3_pse+0x6a>
    24a0:	98 3e       	cpi	r25, 0xE8	; 232
    24a2:	dc f3       	brlt	.-10     	; 0x249a <__divsf3_pse+0x6a>
    24a4:	86 95       	lsr	r24
    24a6:	77 95       	ror	r23
    24a8:	67 95       	ror	r22
    24aa:	b7 95       	ror	r27
    24ac:	f7 95       	ror	r31
    24ae:	9f 5f       	subi	r25, 0xFF	; 255
    24b0:	c9 f7       	brne	.-14     	; 0x24a4 <__divsf3_pse+0x74>
    24b2:	88 0f       	add	r24, r24
    24b4:	91 1d       	adc	r25, r1
    24b6:	96 95       	lsr	r25
    24b8:	87 95       	ror	r24
    24ba:	97 f9       	bld	r25, 7
    24bc:	08 95       	ret
    24be:	e1 e0       	ldi	r30, 0x01	; 1
    24c0:	66 0f       	add	r22, r22
    24c2:	77 1f       	adc	r23, r23
    24c4:	88 1f       	adc	r24, r24
    24c6:	bb 1f       	adc	r27, r27
    24c8:	62 17       	cp	r22, r18
    24ca:	73 07       	cpc	r23, r19
    24cc:	84 07       	cpc	r24, r20
    24ce:	ba 07       	cpc	r27, r26
    24d0:	20 f0       	brcs	.+8      	; 0x24da <__divsf3_pse+0xaa>
    24d2:	62 1b       	sub	r22, r18
    24d4:	73 0b       	sbc	r23, r19
    24d6:	84 0b       	sbc	r24, r20
    24d8:	ba 0b       	sbc	r27, r26
    24da:	ee 1f       	adc	r30, r30
    24dc:	88 f7       	brcc	.-30     	; 0x24c0 <__divsf3_pse+0x90>
    24de:	e0 95       	com	r30
    24e0:	08 95       	ret

000024e2 <__floatunsisf>:
    24e2:	e8 94       	clt
    24e4:	09 c0       	rjmp	.+18     	; 0x24f8 <__floatsisf+0x12>

000024e6 <__floatsisf>:
    24e6:	97 fb       	bst	r25, 7
    24e8:	3e f4       	brtc	.+14     	; 0x24f8 <__floatsisf+0x12>
    24ea:	90 95       	com	r25
    24ec:	80 95       	com	r24
    24ee:	70 95       	com	r23
    24f0:	61 95       	neg	r22
    24f2:	7f 4f       	sbci	r23, 0xFF	; 255
    24f4:	8f 4f       	sbci	r24, 0xFF	; 255
    24f6:	9f 4f       	sbci	r25, 0xFF	; 255
    24f8:	99 23       	and	r25, r25
    24fa:	a9 f0       	breq	.+42     	; 0x2526 <__floatsisf+0x40>
    24fc:	f9 2f       	mov	r31, r25
    24fe:	96 e9       	ldi	r25, 0x96	; 150
    2500:	bb 27       	eor	r27, r27
    2502:	93 95       	inc	r25
    2504:	f6 95       	lsr	r31
    2506:	87 95       	ror	r24
    2508:	77 95       	ror	r23
    250a:	67 95       	ror	r22
    250c:	b7 95       	ror	r27
    250e:	f1 11       	cpse	r31, r1
    2510:	f8 cf       	rjmp	.-16     	; 0x2502 <__floatsisf+0x1c>
    2512:	fa f4       	brpl	.+62     	; 0x2552 <__floatsisf+0x6c>
    2514:	bb 0f       	add	r27, r27
    2516:	11 f4       	brne	.+4      	; 0x251c <__floatsisf+0x36>
    2518:	60 ff       	sbrs	r22, 0
    251a:	1b c0       	rjmp	.+54     	; 0x2552 <__floatsisf+0x6c>
    251c:	6f 5f       	subi	r22, 0xFF	; 255
    251e:	7f 4f       	sbci	r23, 0xFF	; 255
    2520:	8f 4f       	sbci	r24, 0xFF	; 255
    2522:	9f 4f       	sbci	r25, 0xFF	; 255
    2524:	16 c0       	rjmp	.+44     	; 0x2552 <__floatsisf+0x6c>
    2526:	88 23       	and	r24, r24
    2528:	11 f0       	breq	.+4      	; 0x252e <__floatsisf+0x48>
    252a:	96 e9       	ldi	r25, 0x96	; 150
    252c:	11 c0       	rjmp	.+34     	; 0x2550 <__floatsisf+0x6a>
    252e:	77 23       	and	r23, r23
    2530:	21 f0       	breq	.+8      	; 0x253a <__floatsisf+0x54>
    2532:	9e e8       	ldi	r25, 0x8E	; 142
    2534:	87 2f       	mov	r24, r23
    2536:	76 2f       	mov	r23, r22
    2538:	05 c0       	rjmp	.+10     	; 0x2544 <__floatsisf+0x5e>
    253a:	66 23       	and	r22, r22
    253c:	71 f0       	breq	.+28     	; 0x255a <__floatsisf+0x74>
    253e:	96 e8       	ldi	r25, 0x86	; 134
    2540:	86 2f       	mov	r24, r22
    2542:	70 e0       	ldi	r23, 0x00	; 0
    2544:	60 e0       	ldi	r22, 0x00	; 0
    2546:	2a f0       	brmi	.+10     	; 0x2552 <__floatsisf+0x6c>
    2548:	9a 95       	dec	r25
    254a:	66 0f       	add	r22, r22
    254c:	77 1f       	adc	r23, r23
    254e:	88 1f       	adc	r24, r24
    2550:	da f7       	brpl	.-10     	; 0x2548 <__floatsisf+0x62>
    2552:	88 0f       	add	r24, r24
    2554:	96 95       	lsr	r25
    2556:	87 95       	ror	r24
    2558:	97 f9       	bld	r25, 7
    255a:	08 95       	ret

0000255c <__fp_inf>:
    255c:	97 f9       	bld	r25, 7
    255e:	9f 67       	ori	r25, 0x7F	; 127
    2560:	80 e8       	ldi	r24, 0x80	; 128
    2562:	70 e0       	ldi	r23, 0x00	; 0
    2564:	60 e0       	ldi	r22, 0x00	; 0
    2566:	08 95       	ret

00002568 <__fp_nan>:
    2568:	9f ef       	ldi	r25, 0xFF	; 255
    256a:	80 ec       	ldi	r24, 0xC0	; 192
    256c:	08 95       	ret

0000256e <__fp_pscA>:
    256e:	00 24       	eor	r0, r0
    2570:	0a 94       	dec	r0
    2572:	16 16       	cp	r1, r22
    2574:	17 06       	cpc	r1, r23
    2576:	18 06       	cpc	r1, r24
    2578:	09 06       	cpc	r0, r25
    257a:	08 95       	ret

0000257c <__fp_pscB>:
    257c:	00 24       	eor	r0, r0
    257e:	0a 94       	dec	r0
    2580:	12 16       	cp	r1, r18
    2582:	13 06       	cpc	r1, r19
    2584:	14 06       	cpc	r1, r20
    2586:	05 06       	cpc	r0, r21
    2588:	08 95       	ret

0000258a <__fp_round>:
    258a:	09 2e       	mov	r0, r25
    258c:	03 94       	inc	r0
    258e:	00 0c       	add	r0, r0
    2590:	11 f4       	brne	.+4      	; 0x2596 <__fp_round+0xc>
    2592:	88 23       	and	r24, r24
    2594:	52 f0       	brmi	.+20     	; 0x25aa <__fp_round+0x20>
    2596:	bb 0f       	add	r27, r27
    2598:	40 f4       	brcc	.+16     	; 0x25aa <__fp_round+0x20>
    259a:	bf 2b       	or	r27, r31
    259c:	11 f4       	brne	.+4      	; 0x25a2 <__fp_round+0x18>
    259e:	60 ff       	sbrs	r22, 0
    25a0:	04 c0       	rjmp	.+8      	; 0x25aa <__fp_round+0x20>
    25a2:	6f 5f       	subi	r22, 0xFF	; 255
    25a4:	7f 4f       	sbci	r23, 0xFF	; 255
    25a6:	8f 4f       	sbci	r24, 0xFF	; 255
    25a8:	9f 4f       	sbci	r25, 0xFF	; 255
    25aa:	08 95       	ret

000025ac <__fp_split3>:
    25ac:	57 fd       	sbrc	r21, 7
    25ae:	90 58       	subi	r25, 0x80	; 128
    25b0:	44 0f       	add	r20, r20
    25b2:	55 1f       	adc	r21, r21
    25b4:	59 f0       	breq	.+22     	; 0x25cc <__fp_splitA+0x10>
    25b6:	5f 3f       	cpi	r21, 0xFF	; 255
    25b8:	71 f0       	breq	.+28     	; 0x25d6 <__fp_splitA+0x1a>
    25ba:	47 95       	ror	r20

000025bc <__fp_splitA>:
    25bc:	88 0f       	add	r24, r24
    25be:	97 fb       	bst	r25, 7
    25c0:	99 1f       	adc	r25, r25
    25c2:	61 f0       	breq	.+24     	; 0x25dc <__fp_splitA+0x20>
    25c4:	9f 3f       	cpi	r25, 0xFF	; 255
    25c6:	79 f0       	breq	.+30     	; 0x25e6 <__fp_splitA+0x2a>
    25c8:	87 95       	ror	r24
    25ca:	08 95       	ret
    25cc:	12 16       	cp	r1, r18
    25ce:	13 06       	cpc	r1, r19
    25d0:	14 06       	cpc	r1, r20
    25d2:	55 1f       	adc	r21, r21
    25d4:	f2 cf       	rjmp	.-28     	; 0x25ba <__fp_split3+0xe>
    25d6:	46 95       	lsr	r20
    25d8:	f1 df       	rcall	.-30     	; 0x25bc <__fp_splitA>
    25da:	08 c0       	rjmp	.+16     	; 0x25ec <__fp_splitA+0x30>
    25dc:	16 16       	cp	r1, r22
    25de:	17 06       	cpc	r1, r23
    25e0:	18 06       	cpc	r1, r24
    25e2:	99 1f       	adc	r25, r25
    25e4:	f1 cf       	rjmp	.-30     	; 0x25c8 <__fp_splitA+0xc>
    25e6:	86 95       	lsr	r24
    25e8:	71 05       	cpc	r23, r1
    25ea:	61 05       	cpc	r22, r1
    25ec:	08 94       	sec
    25ee:	08 95       	ret

000025f0 <__fp_zero>:
    25f0:	e8 94       	clt

000025f2 <__fp_szero>:
    25f2:	bb 27       	eor	r27, r27
    25f4:	66 27       	eor	r22, r22
    25f6:	77 27       	eor	r23, r23
    25f8:	cb 01       	movw	r24, r22
    25fa:	97 f9       	bld	r25, 7
    25fc:	08 95       	ret

000025fe <__mulsf3>:
    25fe:	0b d0       	rcall	.+22     	; 0x2616 <__mulsf3x>
    2600:	c4 cf       	rjmp	.-120    	; 0x258a <__fp_round>
    2602:	b5 df       	rcall	.-150    	; 0x256e <__fp_pscA>
    2604:	28 f0       	brcs	.+10     	; 0x2610 <__mulsf3+0x12>
    2606:	ba df       	rcall	.-140    	; 0x257c <__fp_pscB>
    2608:	18 f0       	brcs	.+6      	; 0x2610 <__mulsf3+0x12>
    260a:	95 23       	and	r25, r21
    260c:	09 f0       	breq	.+2      	; 0x2610 <__mulsf3+0x12>
    260e:	a6 cf       	rjmp	.-180    	; 0x255c <__fp_inf>
    2610:	ab cf       	rjmp	.-170    	; 0x2568 <__fp_nan>
    2612:	11 24       	eor	r1, r1
    2614:	ee cf       	rjmp	.-36     	; 0x25f2 <__fp_szero>

00002616 <__mulsf3x>:
    2616:	ca df       	rcall	.-108    	; 0x25ac <__fp_split3>
    2618:	a0 f3       	brcs	.-24     	; 0x2602 <__mulsf3+0x4>

0000261a <__mulsf3_pse>:
    261a:	95 9f       	mul	r25, r21
    261c:	d1 f3       	breq	.-12     	; 0x2612 <__mulsf3+0x14>
    261e:	95 0f       	add	r25, r21
    2620:	50 e0       	ldi	r21, 0x00	; 0
    2622:	55 1f       	adc	r21, r21
    2624:	62 9f       	mul	r22, r18
    2626:	f0 01       	movw	r30, r0
    2628:	72 9f       	mul	r23, r18
    262a:	bb 27       	eor	r27, r27
    262c:	f0 0d       	add	r31, r0
    262e:	b1 1d       	adc	r27, r1
    2630:	63 9f       	mul	r22, r19
    2632:	aa 27       	eor	r26, r26
    2634:	f0 0d       	add	r31, r0
    2636:	b1 1d       	adc	r27, r1
    2638:	aa 1f       	adc	r26, r26
    263a:	64 9f       	mul	r22, r20
    263c:	66 27       	eor	r22, r22
    263e:	b0 0d       	add	r27, r0
    2640:	a1 1d       	adc	r26, r1
    2642:	66 1f       	adc	r22, r22
    2644:	82 9f       	mul	r24, r18
    2646:	22 27       	eor	r18, r18
    2648:	b0 0d       	add	r27, r0
    264a:	a1 1d       	adc	r26, r1
    264c:	62 1f       	adc	r22, r18
    264e:	73 9f       	mul	r23, r19
    2650:	b0 0d       	add	r27, r0
    2652:	a1 1d       	adc	r26, r1
    2654:	62 1f       	adc	r22, r18
    2656:	83 9f       	mul	r24, r19
    2658:	a0 0d       	add	r26, r0
    265a:	61 1d       	adc	r22, r1
    265c:	22 1f       	adc	r18, r18
    265e:	74 9f       	mul	r23, r20
    2660:	33 27       	eor	r19, r19
    2662:	a0 0d       	add	r26, r0
    2664:	61 1d       	adc	r22, r1
    2666:	23 1f       	adc	r18, r19
    2668:	84 9f       	mul	r24, r20
    266a:	60 0d       	add	r22, r0
    266c:	21 1d       	adc	r18, r1
    266e:	82 2f       	mov	r24, r18
    2670:	76 2f       	mov	r23, r22
    2672:	6a 2f       	mov	r22, r26
    2674:	11 24       	eor	r1, r1
    2676:	9f 57       	subi	r25, 0x7F	; 127
    2678:	50 40       	sbci	r21, 0x00	; 0
    267a:	8a f0       	brmi	.+34     	; 0x269e <__mulsf3_pse+0x84>
    267c:	e1 f0       	breq	.+56     	; 0x26b6 <__mulsf3_pse+0x9c>
    267e:	88 23       	and	r24, r24
    2680:	4a f0       	brmi	.+18     	; 0x2694 <__mulsf3_pse+0x7a>
    2682:	ee 0f       	add	r30, r30
    2684:	ff 1f       	adc	r31, r31
    2686:	bb 1f       	adc	r27, r27
    2688:	66 1f       	adc	r22, r22
    268a:	77 1f       	adc	r23, r23
    268c:	88 1f       	adc	r24, r24
    268e:	91 50       	subi	r25, 0x01	; 1
    2690:	50 40       	sbci	r21, 0x00	; 0
    2692:	a9 f7       	brne	.-22     	; 0x267e <__mulsf3_pse+0x64>
    2694:	9e 3f       	cpi	r25, 0xFE	; 254
    2696:	51 05       	cpc	r21, r1
    2698:	70 f0       	brcs	.+28     	; 0x26b6 <__mulsf3_pse+0x9c>
    269a:	60 cf       	rjmp	.-320    	; 0x255c <__fp_inf>
    269c:	aa cf       	rjmp	.-172    	; 0x25f2 <__fp_szero>
    269e:	5f 3f       	cpi	r21, 0xFF	; 255
    26a0:	ec f3       	brlt	.-6      	; 0x269c <__mulsf3_pse+0x82>
    26a2:	98 3e       	cpi	r25, 0xE8	; 232
    26a4:	dc f3       	brlt	.-10     	; 0x269c <__mulsf3_pse+0x82>
    26a6:	86 95       	lsr	r24
    26a8:	77 95       	ror	r23
    26aa:	67 95       	ror	r22
    26ac:	b7 95       	ror	r27
    26ae:	f7 95       	ror	r31
    26b0:	e7 95       	ror	r30
    26b2:	9f 5f       	subi	r25, 0xFF	; 255
    26b4:	c1 f7       	brne	.-16     	; 0x26a6 <__mulsf3_pse+0x8c>
    26b6:	fe 2b       	or	r31, r30
    26b8:	88 0f       	add	r24, r24
    26ba:	91 1d       	adc	r25, r1
    26bc:	96 95       	lsr	r25
    26be:	87 95       	ror	r24
    26c0:	97 f9       	bld	r25, 7
    26c2:	08 95       	ret

000026c4 <__udivmodsi4>:
    26c4:	a1 e2       	ldi	r26, 0x21	; 33
    26c6:	1a 2e       	mov	r1, r26
    26c8:	aa 1b       	sub	r26, r26
    26ca:	bb 1b       	sub	r27, r27
    26cc:	fd 01       	movw	r30, r26
    26ce:	0d c0       	rjmp	.+26     	; 0x26ea <__udivmodsi4_ep>

000026d0 <__udivmodsi4_loop>:
    26d0:	aa 1f       	adc	r26, r26
    26d2:	bb 1f       	adc	r27, r27
    26d4:	ee 1f       	adc	r30, r30
    26d6:	ff 1f       	adc	r31, r31
    26d8:	a2 17       	cp	r26, r18
    26da:	b3 07       	cpc	r27, r19
    26dc:	e4 07       	cpc	r30, r20
    26de:	f5 07       	cpc	r31, r21
    26e0:	20 f0       	brcs	.+8      	; 0x26ea <__udivmodsi4_ep>
    26e2:	a2 1b       	sub	r26, r18
    26e4:	b3 0b       	sbc	r27, r19
    26e6:	e4 0b       	sbc	r30, r20
    26e8:	f5 0b       	sbc	r31, r21

000026ea <__udivmodsi4_ep>:
    26ea:	66 1f       	adc	r22, r22
    26ec:	77 1f       	adc	r23, r23
    26ee:	88 1f       	adc	r24, r24
    26f0:	99 1f       	adc	r25, r25
    26f2:	1a 94       	dec	r1
    26f4:	69 f7       	brne	.-38     	; 0x26d0 <__udivmodsi4_loop>
    26f6:	60 95       	com	r22
    26f8:	70 95       	com	r23
    26fa:	80 95       	com	r24
    26fc:	90 95       	com	r25
    26fe:	9b 01       	movw	r18, r22
    2700:	ac 01       	movw	r20, r24
    2702:	bd 01       	movw	r22, r26
    2704:	cf 01       	movw	r24, r30
    2706:	08 95       	ret

00002708 <__tablejump2__>:
    2708:	ee 0f       	add	r30, r30
    270a:	ff 1f       	adc	r31, r31
    270c:	88 1f       	adc	r24, r24
    270e:	8b bf       	out	0x3b, r24	; 59
    2710:	07 90       	elpm	r0, Z+
    2712:	f6 91       	elpm	r31, Z
    2714:	e0 2d       	mov	r30, r0
    2716:	19 94       	eijmp

00002718 <memcpy_P>:
    2718:	fb 01       	movw	r30, r22
    271a:	dc 01       	movw	r26, r24
    271c:	02 c0       	rjmp	.+4      	; 0x2722 <memcpy_P+0xa>
    271e:	05 90       	lpm	r0, Z+
    2720:	0d 92       	st	X+, r0
    2722:	41 50       	subi	r20, 0x01	; 1
    2724:	50 40       	sbci	r21, 0x00	; 0
    2726:	d8 f7       	brcc	.-10     	; 0x271e <memcpy_P+0x6>
    2728:	08 95       	ret

0000272a <memcmp>:
    272a:	fb 01       	movw	r30, r22
    272c:	dc 01       	movw	r26, r24
    272e:	04 c0       	rjmp	.+8      	; 0x2738 <memcmp+0xe>
    2730:	8d 91       	ld	r24, X+
    2732:	01 90       	ld	r0, Z+
    2734:	80 19       	sub	r24, r0
    2736:	21 f4       	brne	.+8      	; 0x2740 <memcmp+0x16>
    2738:	41 50       	subi	r20, 0x01	; 1
    273a:	50 40       	sbci	r21, 0x00	; 0
    273c:	c8 f7       	brcc	.-14     	; 0x2730 <memcmp+0x6>
    273e:	88 1b       	sub	r24, r24
    2740:	99 0b       	sbc	r25, r25
    2742:	08 95       	ret

00002744 <strncpy>:
    2744:	fb 01       	movw	r30, r22
    2746:	dc 01       	movw	r26, r24
    2748:	41 50       	subi	r20, 0x01	; 1
    274a:	50 40       	sbci	r21, 0x00	; 0
    274c:	48 f0       	brcs	.+18     	; 0x2760 <strncpy+0x1c>
    274e:	01 90       	ld	r0, Z+
    2750:	0d 92       	st	X+, r0
    2752:	00 20       	and	r0, r0
    2754:	c9 f7       	brne	.-14     	; 0x2748 <strncpy+0x4>
    2756:	01 c0       	rjmp	.+2      	; 0x275a <strncpy+0x16>
    2758:	1d 92       	st	X+, r1
    275a:	41 50       	subi	r20, 0x01	; 1
    275c:	50 40       	sbci	r21, 0x00	; 0
    275e:	e0 f7       	brcc	.-8      	; 0x2758 <strncpy+0x14>
    2760:	08 95       	ret

00002762 <_exit>:
    2762:	f8 94       	cli

00002764 <__stop_program>:
    2764:	ff cf       	rjmp	.-2      	; 0x2764 <__stop_program>
