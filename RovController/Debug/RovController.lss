
RovController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000188  00800200  00004c98  00004d2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004c98  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000006c2  00800388  00800388  00004eb4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004eb4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004ee4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000b28  00000000  00000000  00004f24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000196f3  00000000  00000000  00005a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005f24  00000000  00000000  0001f13f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006cca  00000000  00000000  00025063  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002264  00000000  00000000  0002bd30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00006a7c  00000000  00000000  0002df94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c3ac  00000000  00000000  00034a10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a38  00000000  00000000  00040dbc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	74 c1       	rjmp	.+744    	; 0x2ea <__ctors_end>
       2:	00 00       	nop
       4:	a3 c1       	rjmp	.+838    	; 0x34c <__bad_interrupt>
       6:	00 00       	nop
       8:	a1 c1       	rjmp	.+834    	; 0x34c <__bad_interrupt>
       a:	00 00       	nop
       c:	9f c1       	rjmp	.+830    	; 0x34c <__bad_interrupt>
       e:	00 00       	nop
      10:	9d c1       	rjmp	.+826    	; 0x34c <__bad_interrupt>
      12:	00 00       	nop
      14:	9b c1       	rjmp	.+822    	; 0x34c <__bad_interrupt>
      16:	00 00       	nop
      18:	99 c1       	rjmp	.+818    	; 0x34c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	97 c1       	rjmp	.+814    	; 0x34c <__bad_interrupt>
      1e:	00 00       	nop
      20:	95 c1       	rjmp	.+810    	; 0x34c <__bad_interrupt>
      22:	00 00       	nop
      24:	93 c1       	rjmp	.+806    	; 0x34c <__bad_interrupt>
      26:	00 00       	nop
      28:	91 c1       	rjmp	.+802    	; 0x34c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	8f c1       	rjmp	.+798    	; 0x34c <__bad_interrupt>
      2e:	00 00       	nop
      30:	8d c1       	rjmp	.+794    	; 0x34c <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 bc 1a 	jmp	0x3578	; 0x3578 <__vector_13>
      38:	89 c1       	rjmp	.+786    	; 0x34c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	87 c1       	rjmp	.+782    	; 0x34c <__bad_interrupt>
      3e:	00 00       	nop
      40:	85 c1       	rjmp	.+778    	; 0x34c <__bad_interrupt>
      42:	00 00       	nop
      44:	83 c1       	rjmp	.+774    	; 0x34c <__bad_interrupt>
      46:	00 00       	nop
      48:	81 c1       	rjmp	.+770    	; 0x34c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	7f c1       	rjmp	.+766    	; 0x34c <__bad_interrupt>
      4e:	00 00       	nop
      50:	7d c1       	rjmp	.+762    	; 0x34c <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 93 1a 	jmp	0x3526	; 0x3526 <__vector_21>
      58:	79 c1       	rjmp	.+754    	; 0x34c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	77 c1       	rjmp	.+750    	; 0x34c <__bad_interrupt>
      5e:	00 00       	nop
      60:	75 c1       	rjmp	.+746    	; 0x34c <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 63 16 	jmp	0x2cc6	; 0x2cc6 <__vector_25>
      68:	0c 94 9f 16 	jmp	0x2d3e	; 0x2d3e <__vector_26>
      6c:	6f c1       	rjmp	.+734    	; 0x34c <__bad_interrupt>
      6e:	00 00       	nop
      70:	6d c1       	rjmp	.+730    	; 0x34c <__bad_interrupt>
      72:	00 00       	nop
      74:	6b c1       	rjmp	.+726    	; 0x34c <__bad_interrupt>
      76:	00 00       	nop
      78:	69 c1       	rjmp	.+722    	; 0x34c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	67 c1       	rjmp	.+718    	; 0x34c <__bad_interrupt>
      7e:	00 00       	nop
      80:	65 c1       	rjmp	.+714    	; 0x34c <__bad_interrupt>
      82:	00 00       	nop
      84:	63 c1       	rjmp	.+710    	; 0x34c <__bad_interrupt>
      86:	00 00       	nop
      88:	61 c1       	rjmp	.+706    	; 0x34c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	5f c1       	rjmp	.+702    	; 0x34c <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 eb 16 	jmp	0x2dd6	; 0x2dd6 <__vector_36>
      94:	0c 94 27 17 	jmp	0x2e4e	; 0x2e4e <__vector_37>
      98:	59 c1       	rjmp	.+690    	; 0x34c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 25 1c 	jmp	0x384a	; 0x384a <__vector_39>
      a0:	55 c1       	rjmp	.+682    	; 0x34c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	53 c1       	rjmp	.+678    	; 0x34c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	51 c1       	rjmp	.+674    	; 0x34c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	4f c1       	rjmp	.+670    	; 0x34c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	4d c1       	rjmp	.+666    	; 0x34c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	4b c1       	rjmp	.+662    	; 0x34c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	49 c1       	rjmp	.+658    	; 0x34c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	47 c1       	rjmp	.+654    	; 0x34c <__bad_interrupt>
      be:	00 00       	nop
      c0:	45 c1       	rjmp	.+650    	; 0x34c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	43 c1       	rjmp	.+646    	; 0x34c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	41 c1       	rjmp	.+642    	; 0x34c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 73 17 	jmp	0x2ee6	; 0x2ee6 <__vector_51>
      d0:	0c 94 af 17 	jmp	0x2f5e	; 0x2f5e <__vector_52>
      d4:	3b c1       	rjmp	.+630    	; 0x34c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 fb 17 	jmp	0x2ff6	; 0x2ff6 <__vector_54>
      dc:	0c 94 37 18 	jmp	0x306e	; 0x306e <__vector_55>
      e0:	35 c1       	rjmp	.+618    	; 0x34c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	2c 1d       	adc	r18, r12
      e6:	2f 1d       	adc	r18, r15
      e8:	2f 1d       	adc	r18, r15
      ea:	2f 1d       	adc	r18, r15
      ec:	2f 1d       	adc	r18, r15
      ee:	2f 1d       	adc	r18, r15
      f0:	2f 1d       	adc	r18, r15
      f2:	2f 1d       	adc	r18, r15
      f4:	47 1c       	adc	r4, r7
      f6:	2f 1d       	adc	r18, r15
      f8:	2f 1d       	adc	r18, r15
      fa:	2f 1d       	adc	r18, r15
      fc:	2f 1d       	adc	r18, r15
      fe:	2f 1d       	adc	r18, r15
     100:	2f 1d       	adc	r18, r15
     102:	2f 1d       	adc	r18, r15
     104:	47 1c       	adc	r4, r7
     106:	2f 1d       	adc	r18, r15
     108:	2f 1d       	adc	r18, r15
     10a:	2f 1d       	adc	r18, r15
     10c:	2f 1d       	adc	r18, r15
     10e:	2f 1d       	adc	r18, r15
     110:	2f 1d       	adc	r18, r15
     112:	2f 1d       	adc	r18, r15
     114:	4f 1c       	adc	r4, r15
     116:	2f 1d       	adc	r18, r15
     118:	2f 1d       	adc	r18, r15
     11a:	2f 1d       	adc	r18, r15
     11c:	2f 1d       	adc	r18, r15
     11e:	2f 1d       	adc	r18, r15
     120:	2f 1d       	adc	r18, r15
     122:	2f 1d       	adc	r18, r15
     124:	74 1c       	adc	r7, r4
     126:	2f 1d       	adc	r18, r15
     128:	2f 1d       	adc	r18, r15
     12a:	2f 1d       	adc	r18, r15
     12c:	2f 1d       	adc	r18, r15
     12e:	2f 1d       	adc	r18, r15
     130:	2f 1d       	adc	r18, r15
     132:	2f 1d       	adc	r18, r15
     134:	4f 1c       	adc	r4, r15
     136:	2f 1d       	adc	r18, r15
     138:	2f 1d       	adc	r18, r15
     13a:	2f 1d       	adc	r18, r15
     13c:	2f 1d       	adc	r18, r15
     13e:	2f 1d       	adc	r18, r15
     140:	2f 1d       	adc	r18, r15
     142:	2f 1d       	adc	r18, r15
     144:	79 1c       	adc	r7, r9
     146:	2f 1d       	adc	r18, r15
     148:	2f 1d       	adc	r18, r15
     14a:	2f 1d       	adc	r18, r15
     14c:	2f 1d       	adc	r18, r15
     14e:	2f 1d       	adc	r18, r15
     150:	2f 1d       	adc	r18, r15
     152:	2f 1d       	adc	r18, r15
     154:	7e 1c       	adc	r7, r14
     156:	2f 1d       	adc	r18, r15
     158:	2f 1d       	adc	r18, r15
     15a:	2f 1d       	adc	r18, r15
     15c:	2f 1d       	adc	r18, r15
     15e:	2f 1d       	adc	r18, r15
     160:	2f 1d       	adc	r18, r15
     162:	2f 1d       	adc	r18, r15
     164:	8f 1c       	adc	r8, r15
     166:	2f 1d       	adc	r18, r15
     168:	2f 1d       	adc	r18, r15
     16a:	2f 1d       	adc	r18, r15
     16c:	2f 1d       	adc	r18, r15
     16e:	2f 1d       	adc	r18, r15
     170:	2f 1d       	adc	r18, r15
     172:	2f 1d       	adc	r18, r15
     174:	b8 1c       	adc	r11, r8
     176:	2f 1d       	adc	r18, r15
     178:	2f 1d       	adc	r18, r15
     17a:	2f 1d       	adc	r18, r15
     17c:	2f 1d       	adc	r18, r15
     17e:	2f 1d       	adc	r18, r15
     180:	2f 1d       	adc	r18, r15
     182:	2f 1d       	adc	r18, r15
     184:	83 1c       	adc	r8, r3
     186:	2f 1d       	adc	r18, r15
     188:	2f 1d       	adc	r18, r15
     18a:	2f 1d       	adc	r18, r15
     18c:	2f 1d       	adc	r18, r15
     18e:	2f 1d       	adc	r18, r15
     190:	2f 1d       	adc	r18, r15
     192:	2f 1d       	adc	r18, r15
     194:	9d 1c       	adc	r9, r13
     196:	2f 1d       	adc	r18, r15
     198:	2f 1d       	adc	r18, r15
     19a:	2f 1d       	adc	r18, r15
     19c:	2f 1d       	adc	r18, r15
     19e:	2f 1d       	adc	r18, r15
     1a0:	2f 1d       	adc	r18, r15
     1a2:	2f 1d       	adc	r18, r15
     1a4:	ba 1c       	adc	r11, r10
     1a6:	2f 1d       	adc	r18, r15
     1a8:	2f 1d       	adc	r18, r15
     1aa:	2f 1d       	adc	r18, r15
     1ac:	2f 1d       	adc	r18, r15
     1ae:	2f 1d       	adc	r18, r15
     1b0:	2f 1d       	adc	r18, r15
     1b2:	2f 1d       	adc	r18, r15
     1b4:	ba 1c       	adc	r11, r10
     1b6:	2f 1d       	adc	r18, r15
     1b8:	2f 1d       	adc	r18, r15
     1ba:	2f 1d       	adc	r18, r15
     1bc:	2f 1d       	adc	r18, r15
     1be:	2f 1d       	adc	r18, r15
     1c0:	2f 1d       	adc	r18, r15
     1c2:	2f 1d       	adc	r18, r15
     1c4:	ba 1c       	adc	r11, r10
     1c6:	2f 1d       	adc	r18, r15
     1c8:	2f 1d       	adc	r18, r15
     1ca:	2f 1d       	adc	r18, r15
     1cc:	2f 1d       	adc	r18, r15
     1ce:	2f 1d       	adc	r18, r15
     1d0:	2f 1d       	adc	r18, r15
     1d2:	2f 1d       	adc	r18, r15
     1d4:	ba 1c       	adc	r11, r10
     1d6:	2f 1d       	adc	r18, r15
     1d8:	2f 1d       	adc	r18, r15
     1da:	2f 1d       	adc	r18, r15
     1dc:	2f 1d       	adc	r18, r15
     1de:	2f 1d       	adc	r18, r15
     1e0:	2f 1d       	adc	r18, r15
     1e2:	2f 1d       	adc	r18, r15
     1e4:	c3 1c       	adc	r12, r3
     1e6:	2f 1d       	adc	r18, r15
     1e8:	2f 1d       	adc	r18, r15
     1ea:	2f 1d       	adc	r18, r15
     1ec:	2f 1d       	adc	r18, r15
     1ee:	2f 1d       	adc	r18, r15
     1f0:	2f 1d       	adc	r18, r15
     1f2:	2f 1d       	adc	r18, r15
     1f4:	f3 1c       	adc	r15, r3
     1f6:	2f 1d       	adc	r18, r15
     1f8:	2f 1d       	adc	r18, r15
     1fa:	2f 1d       	adc	r18, r15
     1fc:	2f 1d       	adc	r18, r15
     1fe:	2f 1d       	adc	r18, r15
     200:	2f 1d       	adc	r18, r15
     202:	2f 1d       	adc	r18, r15
     204:	c3 1c       	adc	r12, r3
     206:	2f 1d       	adc	r18, r15
     208:	2f 1d       	adc	r18, r15
     20a:	2f 1d       	adc	r18, r15
     20c:	2f 1d       	adc	r18, r15
     20e:	2f 1d       	adc	r18, r15
     210:	2f 1d       	adc	r18, r15
     212:	2f 1d       	adc	r18, r15
     214:	f3 1c       	adc	r15, r3
     216:	2f 1d       	adc	r18, r15
     218:	2f 1d       	adc	r18, r15
     21a:	2f 1d       	adc	r18, r15
     21c:	2f 1d       	adc	r18, r15
     21e:	2f 1d       	adc	r18, r15
     220:	2f 1d       	adc	r18, r15
     222:	2f 1d       	adc	r18, r15
     224:	db 1c       	adc	r13, r11
     226:	2f 1d       	adc	r18, r15
     228:	2f 1d       	adc	r18, r15
     22a:	2f 1d       	adc	r18, r15
     22c:	2f 1d       	adc	r18, r15
     22e:	2f 1d       	adc	r18, r15
     230:	2f 1d       	adc	r18, r15
     232:	2f 1d       	adc	r18, r15
     234:	f7 1c       	adc	r15, r7
     236:	2f 1d       	adc	r18, r15
     238:	2f 1d       	adc	r18, r15
     23a:	2f 1d       	adc	r18, r15
     23c:	2f 1d       	adc	r18, r15
     23e:	2f 1d       	adc	r18, r15
     240:	2f 1d       	adc	r18, r15
     242:	2f 1d       	adc	r18, r15
     244:	f7 1c       	adc	r15, r7
     246:	2f 1d       	adc	r18, r15
     248:	2f 1d       	adc	r18, r15
     24a:	2f 1d       	adc	r18, r15
     24c:	2f 1d       	adc	r18, r15
     24e:	2f 1d       	adc	r18, r15
     250:	2f 1d       	adc	r18, r15
     252:	2f 1d       	adc	r18, r15
     254:	0c 1d       	adc	r16, r12
     256:	2f 1d       	adc	r18, r15
     258:	2f 1d       	adc	r18, r15
     25a:	2f 1d       	adc	r18, r15
     25c:	2f 1d       	adc	r18, r15
     25e:	2f 1d       	adc	r18, r15
     260:	2f 1d       	adc	r18, r15
     262:	2f 1d       	adc	r18, r15
     264:	26 1d       	adc	r18, r6
     266:	2f 1d       	adc	r18, r15
     268:	2f 1d       	adc	r18, r15
     26a:	2f 1d       	adc	r18, r15
     26c:	2f 1d       	adc	r18, r15
     26e:	2f 1d       	adc	r18, r15
     270:	2f 1d       	adc	r18, r15
     272:	2f 1d       	adc	r18, r15
     274:	26 1d       	adc	r18, r6
     276:	b1 1e       	adc	r11, r17
     278:	b1 1e       	adc	r11, r17
     27a:	b1 1e       	adc	r11, r17
     27c:	b5 1e       	adc	r11, r21
     27e:	b5 1e       	adc	r11, r21
     280:	b5 1e       	adc	r11, r21
     282:	b9 1e       	adc	r11, r25
     284:	b9 1e       	adc	r11, r25
     286:	b9 1e       	adc	r11, r25
     288:	bd 1e       	adc	r11, r29
     28a:	bd 1e       	adc	r11, r29
     28c:	bd 1e       	adc	r11, r29
     28e:	ce 1e       	adc	r12, r30
     290:	d2 1e       	adc	r13, r18
     292:	d6 1e       	adc	r13, r22
     294:	da 1e       	adc	r13, r26
     296:	de 1e       	adc	r13, r30
     298:	e2 1e       	adc	r14, r18
     29a:	e6 1e       	adc	r14, r22
     29c:	ea 1e       	adc	r14, r26
     29e:	ee 1e       	adc	r14, r30
     2a0:	f2 1e       	adc	r15, r18
     2a2:	f6 1e       	adc	r15, r22
     2a4:	fa 1e       	adc	r15, r26
     2a6:	0b 1f       	adc	r16, r27
     2a8:	15 1f       	adc	r17, r21
     2aa:	1f 1f       	adc	r17, r31
     2ac:	29 1f       	adc	r18, r25
     2ae:	33 1f       	adc	r19, r19
     2b0:	3d 1f       	adc	r19, r29
     2b2:	47 1f       	adc	r20, r23
     2b4:	51 1f       	adc	r21, r17
     2b6:	5b 1f       	adc	r21, r27
     2b8:	65 1f       	adc	r22, r21
     2ba:	6f 1f       	adc	r22, r31
     2bc:	79 1f       	adc	r23, r25

000002be <__trampolines_end>:
     2be:	45 00       	.word	0x0045	; ????
     2c0:	00 82       	st	Z, r0
     2c2:	00 00       	nop
     2c4:	40 00       	.word	0x0040	; ????
     2c6:	20 00       	Address 0x000002c6 is out of bounds.
.word	0xffff	; ????

000002c7 <_ZL9arpreqhdr>:
     2c7:	00 01 08 00 06 04 00 01 00                          .........

000002d0 <__ctors_start>:
     2d0:	45 05       	cpc	r20, r5
     2d2:	4a 0c       	add	r4, r10
     2d4:	c8 16       	cp	r12, r24
     2d6:	50 17       	cp	r21, r16
     2d8:	d8 17       	cp	r29, r24
     2da:	60 18       	sub	r6, r0
     2dc:	03 19       	sub	r16, r3
     2de:	e5 1a       	sub	r14, r21
     2e0:	9b 1e       	adc	r9, r27
     2e2:	83 1f       	adc	r24, r19
     2e4:	75 20       	and	r7, r5
     2e6:	eb 21       	and	r30, r11
     2e8:	9a 22       	and	r9, r26

000002ea <__ctors_end>:
     2ea:	11 24       	eor	r1, r1
     2ec:	1f be       	out	0x3f, r1	; 63
     2ee:	cf ef       	ldi	r28, 0xFF	; 255
     2f0:	d1 e2       	ldi	r29, 0x21	; 33
     2f2:	de bf       	out	0x3e, r29	; 62
     2f4:	cd bf       	out	0x3d, r28	; 61
     2f6:	00 e0       	ldi	r16, 0x00	; 0
     2f8:	0c bf       	out	0x3c, r16	; 60

000002fa <__do_copy_data>:
     2fa:	13 e0       	ldi	r17, 0x03	; 3
     2fc:	a0 e0       	ldi	r26, 0x00	; 0
     2fe:	b2 e0       	ldi	r27, 0x02	; 2
     300:	e8 e9       	ldi	r30, 0x98	; 152
     302:	fc e4       	ldi	r31, 0x4C	; 76
     304:	00 e0       	ldi	r16, 0x00	; 0
     306:	0b bf       	out	0x3b, r16	; 59
     308:	02 c0       	rjmp	.+4      	; 0x30e <__do_copy_data+0x14>
     30a:	07 90       	elpm	r0, Z+
     30c:	0d 92       	st	X+, r0
     30e:	a8 38       	cpi	r26, 0x88	; 136
     310:	b1 07       	cpc	r27, r17
     312:	d9 f7       	brne	.-10     	; 0x30a <__do_copy_data+0x10>

00000314 <__do_clear_bss>:
     314:	2a e0       	ldi	r18, 0x0A	; 10
     316:	a8 e8       	ldi	r26, 0x88	; 136
     318:	b3 e0       	ldi	r27, 0x03	; 3
     31a:	01 c0       	rjmp	.+2      	; 0x31e <.do_clear_bss_start>

0000031c <.do_clear_bss_loop>:
     31c:	1d 92       	st	X+, r1

0000031e <.do_clear_bss_start>:
     31e:	aa 34       	cpi	r26, 0x4A	; 74
     320:	b2 07       	cpc	r27, r18
     322:	e1 f7       	brne	.-8      	; 0x31c <.do_clear_bss_loop>

00000324 <__do_global_ctors>:
     324:	11 e0       	ldi	r17, 0x01	; 1
     326:	c5 e7       	ldi	r28, 0x75	; 117
     328:	d1 e0       	ldi	r29, 0x01	; 1
     32a:	00 e0       	ldi	r16, 0x00	; 0
     32c:	06 c0       	rjmp	.+12     	; 0x33a <__do_global_ctors+0x16>
     32e:	21 97       	sbiw	r28, 0x01	; 1
     330:	01 09       	sbc	r16, r1
     332:	80 2f       	mov	r24, r16
     334:	fe 01       	movw	r30, r28
     336:	0e 94 52 25 	call	0x4aa4	; 0x4aa4 <__tablejump2__>
     33a:	c8 36       	cpi	r28, 0x68	; 104
     33c:	d1 07       	cpc	r29, r17
     33e:	80 e0       	ldi	r24, 0x00	; 0
     340:	08 07       	cpc	r16, r24
     342:	a9 f7       	brne	.-22     	; 0x32e <__do_global_ctors+0xa>
     344:	0e 94 0b 0c 	call	0x1816	; 0x1816 <main>
     348:	0c 94 4a 26 	jmp	0x4c94	; 0x4c94 <_exit>

0000034c <__bad_interrupt>:
     34c:	59 ce       	rjmp	.-846    	; 0x0 <__vectors>

0000034e <_ZN15Adafruit_Sensor15enableAutoRangeEb>:

    setMode(lastMode);
    return true;
  }
  return false;
}
     34e:	08 95       	ret

00000350 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>:
     350:	0f 93       	push	r16
     352:	1f 93       	push	r17
     354:	cf 93       	push	r28
     356:	df 93       	push	r29
     358:	8c 01       	movw	r16, r24
     35a:	eb 01       	movw	r28, r22
     35c:	88 e2       	ldi	r24, 0x28	; 40
     35e:	fb 01       	movw	r30, r22
     360:	11 92       	st	Z+, r1
     362:	8a 95       	dec	r24
     364:	e9 f7       	brne	.-6      	; 0x360 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x10>
     366:	4b e0       	ldi	r20, 0x0B	; 11
     368:	50 e0       	ldi	r21, 0x00	; 0
     36a:	64 e1       	ldi	r22, 0x14	; 20
     36c:	72 e0       	ldi	r23, 0x02	; 2
     36e:	ce 01       	movw	r24, r28
     370:	0e 94 3b 26 	call	0x4c76	; 0x4c76 <strncpy>
     374:	1b 86       	std	Y+11, r1	; 0x0b
     376:	81 e0       	ldi	r24, 0x01	; 1
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	a0 e0       	ldi	r26, 0x00	; 0
     37c:	b0 e0       	ldi	r27, 0x00	; 0
     37e:	8c 87       	std	Y+12, r24	; 0x0c
     380:	9d 87       	std	Y+13, r25	; 0x0d
     382:	ae 87       	std	Y+14, r26	; 0x0e
     384:	bf 87       	std	Y+15, r27	; 0x0f
     386:	f8 01       	movw	r30, r16
     388:	86 81       	ldd	r24, Z+6	; 0x06
     38a:	97 81       	ldd	r25, Z+7	; 0x07
     38c:	a0 85       	ldd	r26, Z+8	; 0x08
     38e:	b1 85       	ldd	r27, Z+9	; 0x09
     390:	88 8b       	std	Y+16, r24	; 0x10
     392:	99 8b       	std	Y+17, r25	; 0x11
     394:	aa 8b       	std	Y+18, r26	; 0x12
     396:	bb 8b       	std	Y+19, r27	; 0x13
     398:	83 e0       	ldi	r24, 0x03	; 3
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	a0 e0       	ldi	r26, 0x00	; 0
     39e:	b0 e0       	ldi	r27, 0x00	; 0
     3a0:	8c 8b       	std	Y+20, r24	; 0x14
     3a2:	9d 8b       	std	Y+21, r25	; 0x15
     3a4:	ae 8b       	std	Y+22, r26	; 0x16
     3a6:	bf 8b       	std	Y+23, r27	; 0x17
     3a8:	1c a2       	std	Y+36, r1	; 0x24
     3aa:	1d a2       	std	Y+37, r1	; 0x25
     3ac:	1e a2       	std	Y+38, r1	; 0x26
     3ae:	1f a2       	std	Y+39, r1	; 0x27
     3b0:	18 8e       	std	Y+24, r1	; 0x18
     3b2:	19 8e       	std	Y+25, r1	; 0x19
     3b4:	1a 8e       	std	Y+26, r1	; 0x1a
     3b6:	1b 8e       	std	Y+27, r1	; 0x1b
     3b8:	1c 8e       	std	Y+28, r1	; 0x1c
     3ba:	1d 8e       	std	Y+29, r1	; 0x1d
     3bc:	1e 8e       	std	Y+30, r1	; 0x1e
     3be:	1f 8e       	std	Y+31, r1	; 0x1f
     3c0:	8a e0       	ldi	r24, 0x0A	; 10
     3c2:	97 ed       	ldi	r25, 0xD7	; 215
     3c4:	a3 e2       	ldi	r26, 0x23	; 35
     3c6:	bc e3       	ldi	r27, 0x3C	; 60
     3c8:	88 a3       	std	Y+32, r24	; 0x20
     3ca:	99 a3       	std	Y+33, r25	; 0x21
     3cc:	aa a3       	std	Y+34, r26	; 0x22
     3ce:	bb a3       	std	Y+35, r27	; 0x23
     3d0:	df 91       	pop	r29
     3d2:	cf 91       	pop	r28
     3d4:	1f 91       	pop	r17
     3d6:	0f 91       	pop	r16
     3d8:	08 95       	ret

000003da <_ZN15Adafruit_BNO055C1ElhP7TwoWire>:
     3da:	0f 93       	push	r16
     3dc:	1f 93       	push	r17
     3de:	fc 01       	movw	r30, r24
     3e0:	8f e1       	ldi	r24, 0x1F	; 31
     3e2:	92 e0       	ldi	r25, 0x02	; 2
     3e4:	91 83       	std	Z+1, r25	; 0x01
     3e6:	80 83       	st	Z, r24
     3e8:	46 83       	std	Z+6, r20	; 0x06
     3ea:	57 83       	std	Z+7, r21	; 0x07
     3ec:	60 87       	std	Z+8, r22	; 0x08
     3ee:	71 87       	std	Z+9, r23	; 0x09
     3f0:	23 83       	std	Z+3, r18	; 0x03
     3f2:	15 83       	std	Z+5, r17	; 0x05
     3f4:	04 83       	std	Z+4, r16	; 0x04
     3f6:	1f 91       	pop	r17
     3f8:	0f 91       	pop	r16
     3fa:	08 95       	ret

000003fc <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>:
     3fc:	0f 93       	push	r16
     3fe:	1f 93       	push	r17
     400:	cf 93       	push	r28
     402:	df 93       	push	r29
     404:	ec 01       	movw	r28, r24
     406:	06 2f       	mov	r16, r22
     408:	14 2f       	mov	r17, r20
     40a:	6b 81       	ldd	r22, Y+3	; 0x03
     40c:	8c 81       	ldd	r24, Y+4	; 0x04
     40e:	9d 81       	ldd	r25, Y+5	; 0x05
     410:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <_ZN7TwoWire17beginTransmissionEh>
     414:	8c 81       	ldd	r24, Y+4	; 0x04
     416:	9d 81       	ldd	r25, Y+5	; 0x05
     418:	dc 01       	movw	r26, r24
     41a:	ed 91       	ld	r30, X+
     41c:	fc 91       	ld	r31, X
     41e:	01 90       	ld	r0, Z+
     420:	f0 81       	ld	r31, Z
     422:	e0 2d       	mov	r30, r0
     424:	60 2f       	mov	r22, r16
     426:	19 95       	eicall
     428:	8c 81       	ldd	r24, Y+4	; 0x04
     42a:	9d 81       	ldd	r25, Y+5	; 0x05
     42c:	dc 01       	movw	r26, r24
     42e:	ed 91       	ld	r30, X+
     430:	fc 91       	ld	r31, X
     432:	01 90       	ld	r0, Z+
     434:	f0 81       	ld	r31, Z
     436:	e0 2d       	mov	r30, r0
     438:	61 2f       	mov	r22, r17
     43a:	19 95       	eicall
     43c:	8c 81       	ldd	r24, Y+4	; 0x04
     43e:	9d 81       	ldd	r25, Y+5	; 0x05
     440:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <_ZN7TwoWire15endTransmissionEv>
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	df 91       	pop	r29
     448:	cf 91       	pop	r28
     44a:	1f 91       	pop	r17
     44c:	0f 91       	pop	r16
     44e:	08 95       	ret

00000450 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>:
     450:	46 2f       	mov	r20, r22
     452:	fc 01       	movw	r30, r24
     454:	62 87       	std	Z+10, r22	; 0x0a
     456:	6d e3       	ldi	r22, 0x3D	; 61
     458:	d1 df       	rcall	.-94     	; 0x3fc <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     45a:	ff ef       	ldi	r31, 0xFF	; 255
     45c:	26 e7       	ldi	r18, 0x76	; 118
     45e:	81 e0       	ldi	r24, 0x01	; 1
     460:	f1 50       	subi	r31, 0x01	; 1
     462:	20 40       	sbci	r18, 0x00	; 0
     464:	80 40       	sbci	r24, 0x00	; 0
     466:	e1 f7       	brne	.-8      	; 0x460 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE+0x10>
     468:	00 c0       	rjmp	.+0      	; 0x46a <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE+0x1a>
     46a:	00 00       	nop
     46c:	08 95       	ret

0000046e <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>:
     46e:	1f 93       	push	r17
     470:	cf 93       	push	r28
     472:	df 93       	push	r29
     474:	ec 01       	movw	r28, r24
     476:	16 2f       	mov	r17, r22
     478:	6b 81       	ldd	r22, Y+3	; 0x03
     47a:	8c 81       	ldd	r24, Y+4	; 0x04
     47c:	9d 81       	ldd	r25, Y+5	; 0x05
     47e:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <_ZN7TwoWire17beginTransmissionEh>
     482:	8c 81       	ldd	r24, Y+4	; 0x04
     484:	9d 81       	ldd	r25, Y+5	; 0x05
     486:	dc 01       	movw	r26, r24
     488:	ed 91       	ld	r30, X+
     48a:	fc 91       	ld	r31, X
     48c:	01 90       	ld	r0, Z+
     48e:	f0 81       	ld	r31, Z
     490:	e0 2d       	mov	r30, r0
     492:	61 2f       	mov	r22, r17
     494:	19 95       	eicall
     496:	8c 81       	ldd	r24, Y+4	; 0x04
     498:	9d 81       	ldd	r25, Y+5	; 0x05
     49a:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <_ZN7TwoWire15endTransmissionEv>
     49e:	41 e0       	ldi	r20, 0x01	; 1
     4a0:	6b 81       	ldd	r22, Y+3	; 0x03
     4a2:	8c 81       	ldd	r24, Y+4	; 0x04
     4a4:	9d 81       	ldd	r25, Y+5	; 0x05
     4a6:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <_ZN7TwoWire11requestFromEhh>
     4aa:	8c 81       	ldd	r24, Y+4	; 0x04
     4ac:	9d 81       	ldd	r25, Y+5	; 0x05
     4ae:	dc 01       	movw	r26, r24
     4b0:	ed 91       	ld	r30, X+
     4b2:	fc 91       	ld	r31, X
     4b4:	02 84       	ldd	r0, Z+10	; 0x0a
     4b6:	f3 85       	ldd	r31, Z+11	; 0x0b
     4b8:	e0 2d       	mov	r30, r0
     4ba:	19 95       	eicall
     4bc:	df 91       	pop	r29
     4be:	cf 91       	pop	r28
     4c0:	1f 91       	pop	r17
     4c2:	08 95       	ret

000004c4 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>:
     4c4:	1f 93       	push	r17
     4c6:	cf 93       	push	r28
     4c8:	df 93       	push	r29
     4ca:	ec 01       	movw	r28, r24
     4cc:	16 2f       	mov	r17, r22
     4ce:	8c 81       	ldd	r24, Y+4	; 0x04
     4d0:	9d 81       	ldd	r25, Y+5	; 0x05
     4d2:	0e 94 ff 1d 	call	0x3bfe	; 0x3bfe <_ZN7TwoWire5beginEv>
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	ce 01       	movw	r24, r28
     4da:	c9 df       	rcall	.-110    	; 0x46e <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
     4dc:	80 3a       	cpi	r24, 0xA0	; 160
     4de:	79 f0       	breq	.+30     	; 0x4fe <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x3a>
     4e0:	2f ef       	ldi	r18, 0xFF	; 255
     4e2:	83 ed       	ldi	r24, 0xD3	; 211
     4e4:	90 e3       	ldi	r25, 0x30	; 48
     4e6:	21 50       	subi	r18, 0x01	; 1
     4e8:	80 40       	sbci	r24, 0x00	; 0
     4ea:	90 40       	sbci	r25, 0x00	; 0
     4ec:	e1 f7       	brne	.-8      	; 0x4e6 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x22>
     4ee:	00 c0       	rjmp	.+0      	; 0x4f0 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x2c>
     4f0:	00 00       	nop
     4f2:	60 e0       	ldi	r22, 0x00	; 0
     4f4:	ce 01       	movw	r24, r28
     4f6:	bb df       	rcall	.-138    	; 0x46e <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
     4f8:	80 3a       	cpi	r24, 0xA0	; 160
     4fa:	09 f0       	breq	.+2      	; 0x4fe <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x3a>
     4fc:	4b c0       	rjmp	.+150    	; 0x594 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xd0>
     4fe:	60 e0       	ldi	r22, 0x00	; 0
     500:	ce 01       	movw	r24, r28
     502:	a6 df       	rcall	.-180    	; 0x450 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
     504:	40 e2       	ldi	r20, 0x20	; 32
     506:	6f e3       	ldi	r22, 0x3F	; 63
     508:	ce 01       	movw	r24, r28
     50a:	78 df       	rcall	.-272    	; 0x3fc <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     50c:	2f ef       	ldi	r18, 0xFF	; 255
     50e:	86 e7       	ldi	r24, 0x76	; 118
     510:	91 e0       	ldi	r25, 0x01	; 1
     512:	21 50       	subi	r18, 0x01	; 1
     514:	80 40       	sbci	r24, 0x00	; 0
     516:	90 40       	sbci	r25, 0x00	; 0
     518:	e1 f7       	brne	.-8      	; 0x512 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x4e>
     51a:	00 c0       	rjmp	.+0      	; 0x51c <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x58>
     51c:	00 00       	nop
     51e:	60 e0       	ldi	r22, 0x00	; 0
     520:	ce 01       	movw	r24, r28
     522:	a5 df       	rcall	.-182    	; 0x46e <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
     524:	80 3a       	cpi	r24, 0xA0	; 160
     526:	39 f0       	breq	.+14     	; 0x536 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x72>
     528:	8f e3       	ldi	r24, 0x3F	; 63
     52a:	9c e9       	ldi	r25, 0x9C	; 156
     52c:	01 97       	sbiw	r24, 0x01	; 1
     52e:	f1 f7       	brne	.-4      	; 0x52c <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x68>
     530:	00 c0       	rjmp	.+0      	; 0x532 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x6e>
     532:	00 00       	nop
     534:	f4 cf       	rjmp	.-24     	; 0x51e <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x5a>
     536:	9f ef       	ldi	r25, 0xFF	; 255
     538:	20 e7       	ldi	r18, 0x70	; 112
     53a:	82 e0       	ldi	r24, 0x02	; 2
     53c:	91 50       	subi	r25, 0x01	; 1
     53e:	20 40       	sbci	r18, 0x00	; 0
     540:	80 40       	sbci	r24, 0x00	; 0
     542:	e1 f7       	brne	.-8      	; 0x53c <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x78>
     544:	00 c0       	rjmp	.+0      	; 0x546 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x82>
     546:	00 00       	nop
     548:	40 e0       	ldi	r20, 0x00	; 0
     54a:	6e e3       	ldi	r22, 0x3E	; 62
     54c:	ce 01       	movw	r24, r28
     54e:	56 df       	rcall	.-340    	; 0x3fc <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     550:	8f e3       	ldi	r24, 0x3F	; 63
     552:	9c e9       	ldi	r25, 0x9C	; 156
     554:	01 97       	sbiw	r24, 0x01	; 1
     556:	f1 f7       	brne	.-4      	; 0x554 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x90>
     558:	00 c0       	rjmp	.+0      	; 0x55a <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x96>
     55a:	00 00       	nop
     55c:	40 e0       	ldi	r20, 0x00	; 0
     55e:	67 e0       	ldi	r22, 0x07	; 7
     560:	ce 01       	movw	r24, r28
     562:	4c df       	rcall	.-360    	; 0x3fc <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     564:	40 e0       	ldi	r20, 0x00	; 0
     566:	6f e3       	ldi	r22, 0x3F	; 63
     568:	ce 01       	movw	r24, r28
     56a:	48 df       	rcall	.-368    	; 0x3fc <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     56c:	8f e3       	ldi	r24, 0x3F	; 63
     56e:	9c e9       	ldi	r25, 0x9C	; 156
     570:	01 97       	sbiw	r24, 0x01	; 1
     572:	f1 f7       	brne	.-4      	; 0x570 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xac>
     574:	00 c0       	rjmp	.+0      	; 0x576 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xb2>
     576:	00 00       	nop
     578:	61 2f       	mov	r22, r17
     57a:	ce 01       	movw	r24, r28
     57c:	69 df       	rcall	.-302    	; 0x450 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
     57e:	9f ef       	ldi	r25, 0xFF	; 255
     580:	29 ef       	ldi	r18, 0xF9	; 249
     582:	80 e0       	ldi	r24, 0x00	; 0
     584:	91 50       	subi	r25, 0x01	; 1
     586:	20 40       	sbci	r18, 0x00	; 0
     588:	80 40       	sbci	r24, 0x00	; 0
     58a:	e1 f7       	brne	.-8      	; 0x584 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xc0>
     58c:	00 c0       	rjmp	.+0      	; 0x58e <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xca>
     58e:	00 00       	nop
     590:	81 e0       	ldi	r24, 0x01	; 1
     592:	01 c0       	rjmp	.+2      	; 0x596 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xd2>
     594:	80 e0       	ldi	r24, 0x00	; 0
     596:	df 91       	pop	r29
     598:	cf 91       	pop	r28
     59a:	1f 91       	pop	r17
     59c:	08 95       	ret

0000059e <_ZN15Adafruit_BNO0557getTempEv>:
     59e:	64 e3       	ldi	r22, 0x34	; 52
     5a0:	66 cf       	rjmp	.-308    	; 0x46e <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
     5a2:	08 95       	ret

000005a4 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>:
     5a4:	cf 92       	push	r12
     5a6:	df 92       	push	r13
     5a8:	ef 92       	push	r14
     5aa:	ff 92       	push	r15
     5ac:	0f 93       	push	r16
     5ae:	1f 93       	push	r17
     5b0:	cf 93       	push	r28
     5b2:	df 93       	push	r29
     5b4:	7c 01       	movw	r14, r24
     5b6:	c6 2f       	mov	r28, r22
     5b8:	6a 01       	movw	r12, r20
     5ba:	12 2f       	mov	r17, r18
     5bc:	dc 01       	movw	r26, r24
     5be:	13 96       	adiw	r26, 0x03	; 3
     5c0:	6c 91       	ld	r22, X
     5c2:	13 97       	sbiw	r26, 0x03	; 3
     5c4:	14 96       	adiw	r26, 0x04	; 4
     5c6:	8d 91       	ld	r24, X+
     5c8:	9c 91       	ld	r25, X
     5ca:	15 97       	sbiw	r26, 0x05	; 5
     5cc:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <_ZN7TwoWire17beginTransmissionEh>
     5d0:	f7 01       	movw	r30, r14
     5d2:	84 81       	ldd	r24, Z+4	; 0x04
     5d4:	95 81       	ldd	r25, Z+5	; 0x05
     5d6:	dc 01       	movw	r26, r24
     5d8:	ed 91       	ld	r30, X+
     5da:	fc 91       	ld	r31, X
     5dc:	01 90       	ld	r0, Z+
     5de:	f0 81       	ld	r31, Z
     5e0:	e0 2d       	mov	r30, r0
     5e2:	6c 2f       	mov	r22, r28
     5e4:	19 95       	eicall
     5e6:	f7 01       	movw	r30, r14
     5e8:	84 81       	ldd	r24, Z+4	; 0x04
     5ea:	95 81       	ldd	r25, Z+5	; 0x05
     5ec:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <_ZN7TwoWire15endTransmissionEv>
     5f0:	41 2f       	mov	r20, r17
     5f2:	d7 01       	movw	r26, r14
     5f4:	13 96       	adiw	r26, 0x03	; 3
     5f6:	6c 91       	ld	r22, X
     5f8:	13 97       	sbiw	r26, 0x03	; 3
     5fa:	14 96       	adiw	r26, 0x04	; 4
     5fc:	8d 91       	ld	r24, X+
     5fe:	9c 91       	ld	r25, X
     600:	15 97       	sbiw	r26, 0x05	; 5
     602:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <_ZN7TwoWire11requestFromEhh>
     606:	11 23       	and	r17, r17
     608:	b1 f0       	breq	.+44     	; 0x636 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh+0x92>
     60a:	e6 01       	movw	r28, r12
     60c:	11 50       	subi	r17, 0x01	; 1
     60e:	01 2f       	mov	r16, r17
     610:	10 e0       	ldi	r17, 0x00	; 0
     612:	0f 5f       	subi	r16, 0xFF	; 255
     614:	1f 4f       	sbci	r17, 0xFF	; 255
     616:	0c 0d       	add	r16, r12
     618:	1d 1d       	adc	r17, r13
     61a:	f7 01       	movw	r30, r14
     61c:	84 81       	ldd	r24, Z+4	; 0x04
     61e:	95 81       	ldd	r25, Z+5	; 0x05
     620:	dc 01       	movw	r26, r24
     622:	ed 91       	ld	r30, X+
     624:	fc 91       	ld	r31, X
     626:	02 84       	ldd	r0, Z+10	; 0x0a
     628:	f3 85       	ldd	r31, Z+11	; 0x0b
     62a:	e0 2d       	mov	r30, r0
     62c:	19 95       	eicall
     62e:	89 93       	st	Y+, r24
     630:	c0 17       	cp	r28, r16
     632:	d1 07       	cpc	r29, r17
     634:	91 f7       	brne	.-28     	; 0x61a <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh+0x76>
     636:	81 e0       	ldi	r24, 0x01	; 1
     638:	df 91       	pop	r29
     63a:	cf 91       	pop	r28
     63c:	1f 91       	pop	r17
     63e:	0f 91       	pop	r16
     640:	ff 90       	pop	r15
     642:	ef 90       	pop	r14
     644:	df 90       	pop	r13
     646:	cf 90       	pop	r12
     648:	08 95       	ret

0000064a <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>:
 *            VECTOR_EULER
 *            VECTOR_LINEARACCEL
 *            VECTOR_GRAVITY]
 *  @return  vector from specified source
 */
AdafruitImu::Vector<3> Adafruit_BNO055::getVector(adafruit_vector_type_t vector_type) {
     64a:	af 92       	push	r10
     64c:	bf 92       	push	r11
     64e:	cf 92       	push	r12
     650:	df 92       	push	r13
     652:	ff 92       	push	r15
     654:	0f 93       	push	r16
     656:	1f 93       	push	r17
     658:	cf 93       	push	r28
     65a:	df 93       	push	r29
     65c:	00 d0       	rcall	.+0      	; 0x65e <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x14>
     65e:	00 d0       	rcall	.+0      	; 0x660 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x16>
     660:	cd b7       	in	r28, 0x3d	; 61
     662:	de b7       	in	r29, 0x3e	; 62
     664:	8c 01       	movw	r16, r24
     666:	cb 01       	movw	r24, r22
     668:	f4 2e       	mov	r15, r20
	template <uint8_t N> class Vector
	{
		public:
		Vector()
		{
			memset(p_vec, 0, sizeof(double)*N);
     66a:	2c e0       	ldi	r18, 0x0C	; 12
     66c:	f8 01       	movw	r30, r16
     66e:	11 92       	st	Z+, r1
     670:	2a 95       	dec	r18
     672:	e9 f7       	brne	.-6      	; 0x66e <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x24>
  AdafruitImu::Vector<3> xyz;
  uint8_t buffer[6];
  memset(buffer, 0, 6);
     674:	ae 01       	movw	r20, r28
     676:	4f 5f       	subi	r20, 0xFF	; 255
     678:	5f 4f       	sbci	r21, 0xFF	; 255
     67a:	26 e0       	ldi	r18, 0x06	; 6
     67c:	fa 01       	movw	r30, r20
     67e:	11 92       	st	Z+, r1
     680:	2a 95       	dec	r18
     682:	e9 f7       	brne	.-6      	; 0x67e <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x34>

  int16_t x, y, z;
  x = y = z = 0;

  /* Read vector data (6 bytes) */
  readLen((adafruit_bno055_reg_t)vector_type, buffer, 6);
     684:	26 e0       	ldi	r18, 0x06	; 6
     686:	6f 2d       	mov	r22, r15
     688:	8d df       	rcall	.-230    	; 0x5a4 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>

  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
     68a:	6a 81       	ldd	r22, Y+2	; 0x02
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	76 2f       	mov	r23, r22
     690:	66 27       	eor	r22, r22
     692:	89 81       	ldd	r24, Y+1	; 0x01
     694:	68 2b       	or	r22, r24
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
     696:	8c 81       	ldd	r24, Y+4	; 0x04
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	98 2f       	mov	r25, r24
     69c:	88 27       	eor	r24, r24
     69e:	2b 81       	ldd	r18, Y+3	; 0x03
     6a0:	6c 01       	movw	r12, r24
     6a2:	c2 2a       	or	r12, r18
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
     6a4:	8e 81       	ldd	r24, Y+6	; 0x06
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	98 2f       	mov	r25, r24
     6aa:	88 27       	eor	r24, r24
     6ac:	2d 81       	ldd	r18, Y+5	; 0x05
     6ae:	5c 01       	movw	r10, r24
     6b0:	a2 2a       	or	r10, r18

  /*!
   * Convert the value to an appropriate range (section 3.6.4)
   * and assign the value to the Vector type
   */
  switch (vector_type) {
     6b2:	f4 e1       	ldi	r31, 0x14	; 20
     6b4:	ff 16       	cp	r15, r31
     6b6:	09 f4       	brne	.+2      	; 0x6ba <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x70>
     6b8:	4a c0       	rjmp	.+148    	; 0x74e <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x104>
     6ba:	ff 15       	cp	r31, r15
     6bc:	40 f0       	brcs	.+16     	; 0x6ce <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x84>
     6be:	88 e0       	ldi	r24, 0x08	; 8
     6c0:	f8 16       	cp	r15, r24
     6c2:	09 f4       	brne	.+2      	; 0x6c6 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x7c>
     6c4:	ac c0       	rjmp	.+344    	; 0x81e <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x1d4>
     6c6:	ee e0       	ldi	r30, 0x0E	; 14
     6c8:	fe 16       	cp	r15, r30
     6ca:	69 f0       	breq	.+26     	; 0x6e6 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x9c>
     6cc:	43 c1       	rjmp	.+646    	; 0x954 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
     6ce:	f8 e2       	ldi	r31, 0x28	; 40
     6d0:	ff 16       	cp	r15, r31
     6d2:	09 f4       	brne	.+2      	; 0x6d6 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x8c>
     6d4:	d8 c0       	rjmp	.+432    	; 0x886 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x23c>
     6d6:	8e e2       	ldi	r24, 0x2E	; 46
     6d8:	f8 16       	cp	r15, r24
     6da:	09 f4       	brne	.+2      	; 0x6de <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x94>
     6dc:	08 c1       	rjmp	.+528    	; 0x8ee <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x2a4>
     6de:	ea e1       	ldi	r30, 0x1A	; 26
     6e0:	fe 12       	cpse	r15, r30
     6e2:	38 c1       	rjmp	.+624    	; 0x954 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
     6e4:	68 c0       	rjmp	.+208    	; 0x7b6 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x16c>
  case VECTOR_MAGNETOMETER:
    /* 1uT = 16 LSB */
    xyz[0] = ((double)x) / 16.0;
     6e6:	07 2e       	mov	r0, r23
     6e8:	00 0c       	add	r0, r0
     6ea:	88 0b       	sbc	r24, r24
     6ec:	99 0b       	sbc	r25, r25
     6ee:	0e 94 0a 24 	call	0x4814	; 0x4814 <__floatsisf>
     6f2:	20 e0       	ldi	r18, 0x00	; 0
     6f4:	30 e0       	ldi	r19, 0x00	; 0
     6f6:	40 e8       	ldi	r20, 0x80	; 128
     6f8:	5d e3       	ldi	r21, 0x3D	; 61
     6fa:	0e 94 be 24 	call	0x497c	; 0x497c <__mulsf3>
     6fe:	f8 01       	movw	r30, r16
     700:	60 83       	st	Z, r22
     702:	71 83       	std	Z+1, r23	; 0x01
     704:	82 83       	std	Z+2, r24	; 0x02
     706:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 16.0;
     708:	b6 01       	movw	r22, r12
     70a:	dd 0c       	add	r13, r13
     70c:	88 0b       	sbc	r24, r24
     70e:	99 0b       	sbc	r25, r25
     710:	0e 94 0a 24 	call	0x4814	; 0x4814 <__floatsisf>
     714:	20 e0       	ldi	r18, 0x00	; 0
     716:	30 e0       	ldi	r19, 0x00	; 0
     718:	40 e8       	ldi	r20, 0x80	; 128
     71a:	5d e3       	ldi	r21, 0x3D	; 61
     71c:	0e 94 be 24 	call	0x497c	; 0x497c <__mulsf3>
     720:	f8 01       	movw	r30, r16
     722:	64 83       	std	Z+4, r22	; 0x04
     724:	75 83       	std	Z+5, r23	; 0x05
     726:	86 83       	std	Z+6, r24	; 0x06
     728:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 16.0;
     72a:	b5 01       	movw	r22, r10
     72c:	bb 0c       	add	r11, r11
     72e:	88 0b       	sbc	r24, r24
     730:	99 0b       	sbc	r25, r25
     732:	0e 94 0a 24 	call	0x4814	; 0x4814 <__floatsisf>
     736:	20 e0       	ldi	r18, 0x00	; 0
     738:	30 e0       	ldi	r19, 0x00	; 0
     73a:	40 e8       	ldi	r20, 0x80	; 128
     73c:	5d e3       	ldi	r21, 0x3D	; 61
     73e:	0e 94 be 24 	call	0x497c	; 0x497c <__mulsf3>
     742:	f8 01       	movw	r30, r16
     744:	60 87       	std	Z+8, r22	; 0x08
     746:	71 87       	std	Z+9, r23	; 0x09
     748:	82 87       	std	Z+10, r24	; 0x0a
     74a:	93 87       	std	Z+11, r25	; 0x0b
    break;
     74c:	03 c1       	rjmp	.+518    	; 0x954 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_GYROSCOPE:
    /* 1dps = 16 LSB */
    xyz[0] = ((double)x) / 16.0;
     74e:	07 2e       	mov	r0, r23
     750:	00 0c       	add	r0, r0
     752:	88 0b       	sbc	r24, r24
     754:	99 0b       	sbc	r25, r25
     756:	0e 94 0a 24 	call	0x4814	; 0x4814 <__floatsisf>
     75a:	20 e0       	ldi	r18, 0x00	; 0
     75c:	30 e0       	ldi	r19, 0x00	; 0
     75e:	40 e8       	ldi	r20, 0x80	; 128
     760:	5d e3       	ldi	r21, 0x3D	; 61
     762:	0e 94 be 24 	call	0x497c	; 0x497c <__mulsf3>
     766:	f8 01       	movw	r30, r16
     768:	60 83       	st	Z, r22
     76a:	71 83       	std	Z+1, r23	; 0x01
     76c:	82 83       	std	Z+2, r24	; 0x02
     76e:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 16.0;
     770:	b6 01       	movw	r22, r12
     772:	dd 0c       	add	r13, r13
     774:	88 0b       	sbc	r24, r24
     776:	99 0b       	sbc	r25, r25
     778:	0e 94 0a 24 	call	0x4814	; 0x4814 <__floatsisf>
     77c:	20 e0       	ldi	r18, 0x00	; 0
     77e:	30 e0       	ldi	r19, 0x00	; 0
     780:	40 e8       	ldi	r20, 0x80	; 128
     782:	5d e3       	ldi	r21, 0x3D	; 61
     784:	0e 94 be 24 	call	0x497c	; 0x497c <__mulsf3>
     788:	f8 01       	movw	r30, r16
     78a:	64 83       	std	Z+4, r22	; 0x04
     78c:	75 83       	std	Z+5, r23	; 0x05
     78e:	86 83       	std	Z+6, r24	; 0x06
     790:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 16.0;
     792:	b5 01       	movw	r22, r10
     794:	bb 0c       	add	r11, r11
     796:	88 0b       	sbc	r24, r24
     798:	99 0b       	sbc	r25, r25
     79a:	0e 94 0a 24 	call	0x4814	; 0x4814 <__floatsisf>
     79e:	20 e0       	ldi	r18, 0x00	; 0
     7a0:	30 e0       	ldi	r19, 0x00	; 0
     7a2:	40 e8       	ldi	r20, 0x80	; 128
     7a4:	5d e3       	ldi	r21, 0x3D	; 61
     7a6:	0e 94 be 24 	call	0x497c	; 0x497c <__mulsf3>
     7aa:	f8 01       	movw	r30, r16
     7ac:	60 87       	std	Z+8, r22	; 0x08
     7ae:	71 87       	std	Z+9, r23	; 0x09
     7b0:	82 87       	std	Z+10, r24	; 0x0a
     7b2:	93 87       	std	Z+11, r25	; 0x0b
    break;
     7b4:	cf c0       	rjmp	.+414    	; 0x954 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_EULER:
    /* 1 degree = 16 LSB */
    xyz[0] = ((double)x) / 16.0;
     7b6:	07 2e       	mov	r0, r23
     7b8:	00 0c       	add	r0, r0
     7ba:	88 0b       	sbc	r24, r24
     7bc:	99 0b       	sbc	r25, r25
     7be:	0e 94 0a 24 	call	0x4814	; 0x4814 <__floatsisf>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e8       	ldi	r20, 0x80	; 128
     7c8:	5d e3       	ldi	r21, 0x3D	; 61
     7ca:	0e 94 be 24 	call	0x497c	; 0x497c <__mulsf3>
     7ce:	f8 01       	movw	r30, r16
     7d0:	60 83       	st	Z, r22
     7d2:	71 83       	std	Z+1, r23	; 0x01
     7d4:	82 83       	std	Z+2, r24	; 0x02
     7d6:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 16.0;
     7d8:	b6 01       	movw	r22, r12
     7da:	dd 0c       	add	r13, r13
     7dc:	88 0b       	sbc	r24, r24
     7de:	99 0b       	sbc	r25, r25
     7e0:	0e 94 0a 24 	call	0x4814	; 0x4814 <__floatsisf>
     7e4:	20 e0       	ldi	r18, 0x00	; 0
     7e6:	30 e0       	ldi	r19, 0x00	; 0
     7e8:	40 e8       	ldi	r20, 0x80	; 128
     7ea:	5d e3       	ldi	r21, 0x3D	; 61
     7ec:	0e 94 be 24 	call	0x497c	; 0x497c <__mulsf3>
     7f0:	f8 01       	movw	r30, r16
     7f2:	64 83       	std	Z+4, r22	; 0x04
     7f4:	75 83       	std	Z+5, r23	; 0x05
     7f6:	86 83       	std	Z+6, r24	; 0x06
     7f8:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 16.0;
     7fa:	b5 01       	movw	r22, r10
     7fc:	bb 0c       	add	r11, r11
     7fe:	88 0b       	sbc	r24, r24
     800:	99 0b       	sbc	r25, r25
     802:	0e 94 0a 24 	call	0x4814	; 0x4814 <__floatsisf>
     806:	20 e0       	ldi	r18, 0x00	; 0
     808:	30 e0       	ldi	r19, 0x00	; 0
     80a:	40 e8       	ldi	r20, 0x80	; 128
     80c:	5d e3       	ldi	r21, 0x3D	; 61
     80e:	0e 94 be 24 	call	0x497c	; 0x497c <__mulsf3>
     812:	f8 01       	movw	r30, r16
     814:	60 87       	std	Z+8, r22	; 0x08
     816:	71 87       	std	Z+9, r23	; 0x09
     818:	82 87       	std	Z+10, r24	; 0x0a
     81a:	93 87       	std	Z+11, r25	; 0x0b
    break;
     81c:	9b c0       	rjmp	.+310    	; 0x954 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_ACCELEROMETER:
    /* 1m/s^2 = 100 LSB */
    xyz[0] = ((double)x) / 100.0;
     81e:	07 2e       	mov	r0, r23
     820:	00 0c       	add	r0, r0
     822:	88 0b       	sbc	r24, r24
     824:	99 0b       	sbc	r25, r25
     826:	0e 94 0a 24 	call	0x4814	; 0x4814 <__floatsisf>
     82a:	20 e0       	ldi	r18, 0x00	; 0
     82c:	30 e0       	ldi	r19, 0x00	; 0
     82e:	48 ec       	ldi	r20, 0xC8	; 200
     830:	52 e4       	ldi	r21, 0x42	; 66
     832:	0e 94 74 23 	call	0x46e8	; 0x46e8 <__divsf3>
     836:	f8 01       	movw	r30, r16
     838:	60 83       	st	Z, r22
     83a:	71 83       	std	Z+1, r23	; 0x01
     83c:	82 83       	std	Z+2, r24	; 0x02
     83e:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 100.0;
     840:	b6 01       	movw	r22, r12
     842:	dd 0c       	add	r13, r13
     844:	88 0b       	sbc	r24, r24
     846:	99 0b       	sbc	r25, r25
     848:	0e 94 0a 24 	call	0x4814	; 0x4814 <__floatsisf>
     84c:	20 e0       	ldi	r18, 0x00	; 0
     84e:	30 e0       	ldi	r19, 0x00	; 0
     850:	48 ec       	ldi	r20, 0xC8	; 200
     852:	52 e4       	ldi	r21, 0x42	; 66
     854:	0e 94 74 23 	call	0x46e8	; 0x46e8 <__divsf3>
     858:	f8 01       	movw	r30, r16
     85a:	64 83       	std	Z+4, r22	; 0x04
     85c:	75 83       	std	Z+5, r23	; 0x05
     85e:	86 83       	std	Z+6, r24	; 0x06
     860:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 100.0;
     862:	b5 01       	movw	r22, r10
     864:	bb 0c       	add	r11, r11
     866:	88 0b       	sbc	r24, r24
     868:	99 0b       	sbc	r25, r25
     86a:	0e 94 0a 24 	call	0x4814	; 0x4814 <__floatsisf>
     86e:	20 e0       	ldi	r18, 0x00	; 0
     870:	30 e0       	ldi	r19, 0x00	; 0
     872:	48 ec       	ldi	r20, 0xC8	; 200
     874:	52 e4       	ldi	r21, 0x42	; 66
     876:	0e 94 74 23 	call	0x46e8	; 0x46e8 <__divsf3>
     87a:	f8 01       	movw	r30, r16
     87c:	60 87       	std	Z+8, r22	; 0x08
     87e:	71 87       	std	Z+9, r23	; 0x09
     880:	82 87       	std	Z+10, r24	; 0x0a
     882:	93 87       	std	Z+11, r25	; 0x0b
    break;
     884:	67 c0       	rjmp	.+206    	; 0x954 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_LINEARACCEL:
    /* 1m/s^2 = 100 LSB */
    xyz[0] = ((double)x) / 100.0;
     886:	07 2e       	mov	r0, r23
     888:	00 0c       	add	r0, r0
     88a:	88 0b       	sbc	r24, r24
     88c:	99 0b       	sbc	r25, r25
     88e:	0e 94 0a 24 	call	0x4814	; 0x4814 <__floatsisf>
     892:	20 e0       	ldi	r18, 0x00	; 0
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	48 ec       	ldi	r20, 0xC8	; 200
     898:	52 e4       	ldi	r21, 0x42	; 66
     89a:	0e 94 74 23 	call	0x46e8	; 0x46e8 <__divsf3>
     89e:	f8 01       	movw	r30, r16
     8a0:	60 83       	st	Z, r22
     8a2:	71 83       	std	Z+1, r23	; 0x01
     8a4:	82 83       	std	Z+2, r24	; 0x02
     8a6:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 100.0;
     8a8:	b6 01       	movw	r22, r12
     8aa:	dd 0c       	add	r13, r13
     8ac:	88 0b       	sbc	r24, r24
     8ae:	99 0b       	sbc	r25, r25
     8b0:	0e 94 0a 24 	call	0x4814	; 0x4814 <__floatsisf>
     8b4:	20 e0       	ldi	r18, 0x00	; 0
     8b6:	30 e0       	ldi	r19, 0x00	; 0
     8b8:	48 ec       	ldi	r20, 0xC8	; 200
     8ba:	52 e4       	ldi	r21, 0x42	; 66
     8bc:	0e 94 74 23 	call	0x46e8	; 0x46e8 <__divsf3>
     8c0:	f8 01       	movw	r30, r16
     8c2:	64 83       	std	Z+4, r22	; 0x04
     8c4:	75 83       	std	Z+5, r23	; 0x05
     8c6:	86 83       	std	Z+6, r24	; 0x06
     8c8:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 100.0;
     8ca:	b5 01       	movw	r22, r10
     8cc:	bb 0c       	add	r11, r11
     8ce:	88 0b       	sbc	r24, r24
     8d0:	99 0b       	sbc	r25, r25
     8d2:	0e 94 0a 24 	call	0x4814	; 0x4814 <__floatsisf>
     8d6:	20 e0       	ldi	r18, 0x00	; 0
     8d8:	30 e0       	ldi	r19, 0x00	; 0
     8da:	48 ec       	ldi	r20, 0xC8	; 200
     8dc:	52 e4       	ldi	r21, 0x42	; 66
     8de:	0e 94 74 23 	call	0x46e8	; 0x46e8 <__divsf3>
     8e2:	f8 01       	movw	r30, r16
     8e4:	60 87       	std	Z+8, r22	; 0x08
     8e6:	71 87       	std	Z+9, r23	; 0x09
     8e8:	82 87       	std	Z+10, r24	; 0x0a
     8ea:	93 87       	std	Z+11, r25	; 0x0b
    break;
     8ec:	33 c0       	rjmp	.+102    	; 0x954 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_GRAVITY:
    /* 1m/s^2 = 100 LSB */
    xyz[0] = ((double)x) / 100.0;
     8ee:	07 2e       	mov	r0, r23
     8f0:	00 0c       	add	r0, r0
     8f2:	88 0b       	sbc	r24, r24
     8f4:	99 0b       	sbc	r25, r25
     8f6:	0e 94 0a 24 	call	0x4814	; 0x4814 <__floatsisf>
     8fa:	20 e0       	ldi	r18, 0x00	; 0
     8fc:	30 e0       	ldi	r19, 0x00	; 0
     8fe:	48 ec       	ldi	r20, 0xC8	; 200
     900:	52 e4       	ldi	r21, 0x42	; 66
     902:	0e 94 74 23 	call	0x46e8	; 0x46e8 <__divsf3>
     906:	f8 01       	movw	r30, r16
     908:	60 83       	st	Z, r22
     90a:	71 83       	std	Z+1, r23	; 0x01
     90c:	82 83       	std	Z+2, r24	; 0x02
     90e:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 100.0;
     910:	b6 01       	movw	r22, r12
     912:	dd 0c       	add	r13, r13
     914:	88 0b       	sbc	r24, r24
     916:	99 0b       	sbc	r25, r25
     918:	0e 94 0a 24 	call	0x4814	; 0x4814 <__floatsisf>
     91c:	20 e0       	ldi	r18, 0x00	; 0
     91e:	30 e0       	ldi	r19, 0x00	; 0
     920:	48 ec       	ldi	r20, 0xC8	; 200
     922:	52 e4       	ldi	r21, 0x42	; 66
     924:	0e 94 74 23 	call	0x46e8	; 0x46e8 <__divsf3>
     928:	f8 01       	movw	r30, r16
     92a:	64 83       	std	Z+4, r22	; 0x04
     92c:	75 83       	std	Z+5, r23	; 0x05
     92e:	86 83       	std	Z+6, r24	; 0x06
     930:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 100.0;
     932:	b5 01       	movw	r22, r10
     934:	bb 0c       	add	r11, r11
     936:	88 0b       	sbc	r24, r24
     938:	99 0b       	sbc	r25, r25
     93a:	0e 94 0a 24 	call	0x4814	; 0x4814 <__floatsisf>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	48 ec       	ldi	r20, 0xC8	; 200
     944:	52 e4       	ldi	r21, 0x42	; 66
     946:	0e 94 74 23 	call	0x46e8	; 0x46e8 <__divsf3>
     94a:	f8 01       	movw	r30, r16
     94c:	60 87       	std	Z+8, r22	; 0x08
     94e:	71 87       	std	Z+9, r23	; 0x09
     950:	82 87       	std	Z+10, r24	; 0x0a
     952:	93 87       	std	Z+11, r25	; 0x0b
    break;
  }

  return xyz;
}
     954:	c8 01       	movw	r24, r16
     956:	26 96       	adiw	r28, 0x06	; 6
     958:	0f b6       	in	r0, 0x3f	; 63
     95a:	f8 94       	cli
     95c:	de bf       	out	0x3e, r29	; 62
     95e:	0f be       	out	0x3f, r0	; 63
     960:	cd bf       	out	0x3d, r28	; 61
     962:	df 91       	pop	r29
     964:	cf 91       	pop	r28
     966:	1f 91       	pop	r17
     968:	0f 91       	pop	r16
     96a:	ff 90       	pop	r15
     96c:	df 90       	pop	r13
     96e:	cf 90       	pop	r12
     970:	bf 90       	pop	r11
     972:	af 90       	pop	r10
     974:	08 95       	ret

00000976 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>:
/*!
 *  @brief  Reads the sensor and returns the data as a sensors_event_t
 *  @param  event
 *  @return always returns true
 */
bool Adafruit_BNO055::getEvent(sensors_event_t *event) {
     976:	0f 93       	push	r16
     978:	1f 93       	push	r17
     97a:	cf 93       	push	r28
     97c:	df 93       	push	r29
     97e:	cd b7       	in	r28, 0x3d	; 61
     980:	de b7       	in	r29, 0x3e	; 62
     982:	2c 97       	sbiw	r28, 0x0c	; 12
     984:	0f b6       	in	r0, 0x3f	; 63
     986:	f8 94       	cli
     988:	de bf       	out	0x3e, r29	; 62
     98a:	0f be       	out	0x3f, r0	; 63
     98c:	cd bf       	out	0x3d, r28	; 61
     98e:	8b 01       	movw	r16, r22
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
     990:	20 e2       	ldi	r18, 0x20	; 32
     992:	fb 01       	movw	r30, r22
     994:	11 92       	st	Z+, r1
     996:	2a 95       	dec	r18
     998:	e9 f7       	brne	.-6      	; 0x994 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t+0x1e>

  event->version = sizeof(sensors_event_t);
     99a:	40 e2       	ldi	r20, 0x20	; 32
     99c:	50 e0       	ldi	r21, 0x00	; 0
     99e:	60 e0       	ldi	r22, 0x00	; 0
     9a0:	70 e0       	ldi	r23, 0x00	; 0
     9a2:	f8 01       	movw	r30, r16
     9a4:	40 83       	st	Z, r20
     9a6:	51 83       	std	Z+1, r21	; 0x01
     9a8:	62 83       	std	Z+2, r22	; 0x02
     9aa:	73 83       	std	Z+3, r23	; 0x03
  event->sensor_id = _sensorID;
     9ac:	fc 01       	movw	r30, r24
     9ae:	46 81       	ldd	r20, Z+6	; 0x06
     9b0:	57 81       	ldd	r21, Z+7	; 0x07
     9b2:	60 85       	ldd	r22, Z+8	; 0x08
     9b4:	71 85       	ldd	r23, Z+9	; 0x09
     9b6:	f8 01       	movw	r30, r16
     9b8:	44 83       	std	Z+4, r20	; 0x04
     9ba:	55 83       	std	Z+5, r21	; 0x05
     9bc:	66 83       	std	Z+6, r22	; 0x06
     9be:	77 83       	std	Z+7, r23	; 0x07
  event->type = SENSOR_TYPE_ORIENTATION;
     9c0:	43 e0       	ldi	r20, 0x03	; 3
     9c2:	50 e0       	ldi	r21, 0x00	; 0
     9c4:	60 e0       	ldi	r22, 0x00	; 0
     9c6:	70 e0       	ldi	r23, 0x00	; 0
     9c8:	40 87       	std	Z+8, r20	; 0x08
     9ca:	51 87       	std	Z+9, r21	; 0x09
     9cc:	62 87       	std	Z+10, r22	; 0x0a
     9ce:	73 87       	std	Z+11, r23	; 0x0b
  //event->timestamp = millis();

  /* Get a Euler angle sample for orientation */
  AdafruitImu::Vector<3> euler = getVector(Adafruit_BNO055::VECTOR_EULER);
     9d0:	4a e1       	ldi	r20, 0x1A	; 26
     9d2:	bc 01       	movw	r22, r24
     9d4:	ce 01       	movw	r24, r28
     9d6:	01 96       	adiw	r24, 0x01	; 1
     9d8:	38 de       	rcall	.-912    	; 0x64a <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
  event->orientation.x = euler.x();
     9da:	89 81       	ldd	r24, Y+1	; 0x01
     9dc:	9a 81       	ldd	r25, Y+2	; 0x02
     9de:	ab 81       	ldd	r26, Y+3	; 0x03
     9e0:	bc 81       	ldd	r27, Y+4	; 0x04
     9e2:	f8 01       	movw	r30, r16
     9e4:	80 8b       	std	Z+16, r24	; 0x10
     9e6:	91 8b       	std	Z+17, r25	; 0x11
     9e8:	a2 8b       	std	Z+18, r26	; 0x12
     9ea:	b3 8b       	std	Z+19, r27	; 0x13
  event->orientation.y = euler.y();
     9ec:	8d 81       	ldd	r24, Y+5	; 0x05
     9ee:	9e 81       	ldd	r25, Y+6	; 0x06
     9f0:	af 81       	ldd	r26, Y+7	; 0x07
     9f2:	b8 85       	ldd	r27, Y+8	; 0x08
     9f4:	84 8b       	std	Z+20, r24	; 0x14
     9f6:	95 8b       	std	Z+21, r25	; 0x15
     9f8:	a6 8b       	std	Z+22, r26	; 0x16
     9fa:	b7 8b       	std	Z+23, r27	; 0x17
  event->orientation.z = euler.z();
     9fc:	89 85       	ldd	r24, Y+9	; 0x09
     9fe:	9a 85       	ldd	r25, Y+10	; 0x0a
     a00:	ab 85       	ldd	r26, Y+11	; 0x0b
     a02:	bc 85       	ldd	r27, Y+12	; 0x0c
     a04:	80 8f       	std	Z+24, r24	; 0x18
     a06:	91 8f       	std	Z+25, r25	; 0x19
     a08:	a2 8f       	std	Z+26, r26	; 0x1a
     a0a:	b3 8f       	std	Z+27, r27	; 0x1b

  return true;
}
     a0c:	81 e0       	ldi	r24, 0x01	; 1
     a0e:	2c 96       	adiw	r28, 0x0c	; 12
     a10:	0f b6       	in	r0, 0x3f	; 63
     a12:	f8 94       	cli
     a14:	de bf       	out	0x3e, r29	; 62
     a16:	0f be       	out	0x3f, r0	; 63
     a18:	cd bf       	out	0x3d, r28	; 61
     a1a:	df 91       	pop	r29
     a1c:	cf 91       	pop	r28
     a1e:	1f 91       	pop	r17
     a20:	0f 91       	pop	r16
     a22:	08 95       	ret

00000a24 <_Z14RunPingCommandPKhh>:
  }
  
  EtherComm::SendCommand(CMD_Echo, dataLen);
}
//TODO remove this command from both devices
void RunLedCommand(const uint8_t* data, uint8_t len){
     a24:	61 30       	cpi	r22, 0x01	; 1
     a26:	49 f4       	brne	.+18     	; 0xa3a <_Z14RunPingCommandPKhh+0x16>
     a28:	fc 01       	movw	r30, r24
     a2a:	80 81       	ld	r24, Z
     a2c:	e0 91 88 03 	lds	r30, 0x0388	; 0x800388 <__data_end>
     a30:	f0 91 89 03 	lds	r31, 0x0389	; 0x800389 <__data_end+0x1>
     a34:	80 83       	st	Z, r24
     a36:	80 e0       	ldi	r24, 0x00	; 0
     a38:	ac c6       	rjmp	.+3416   	; 0x1792 <_ZN9EtherComm11SendCommandEhh>
     a3a:	08 95       	ret

00000a3c <_Z14RunEchoCommandPKhh>:
     a3c:	40 91 88 03 	lds	r20, 0x0388	; 0x800388 <__data_end>
     a40:	30 91 89 03 	lds	r19, 0x0389	; 0x800389 <__data_end+0x1>
     a44:	2f ef       	ldi	r18, 0xFF	; 255
     a46:	26 0f       	add	r18, r22
     a48:	66 23       	and	r22, r22
     a4a:	41 f0       	breq	.+16     	; 0xa5c <_Z14RunEchoCommandPKhh+0x20>
     a4c:	a8 2f       	mov	r26, r24
     a4e:	b9 2f       	mov	r27, r25
     a50:	e4 2f       	mov	r30, r20
     a52:	f3 2f       	mov	r31, r19
     a54:	8d 91       	ld	r24, X+
     a56:	81 93       	st	Z+, r24
     a58:	21 50       	subi	r18, 0x01	; 1
     a5a:	e0 f7       	brcc	.-8      	; 0xa54 <_Z14RunEchoCommandPKhh+0x18>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	99 c6       	rjmp	.+3378   	; 0x1792 <_ZN9EtherComm11SendCommandEhh>
     a60:	08 95       	ret

00000a62 <_ZN9EtherComm15CommandReceivedEhPKhh>:
			//todo REMOVE COMMAND
		}
	}
}

void EtherComm::CommandReceived(uint8_t command, const uint8_t* data, uint8_t len){
     a62:	9b 01       	movw	r18, r22
  switch(command){
     a64:	81 30       	cpi	r24, 0x01	; 1
     a66:	41 f0       	breq	.+16     	; 0xa78 <_ZN9EtherComm15CommandReceivedEhPKhh+0x16>
     a68:	18 f0       	brcs	.+6      	; 0xa70 <_ZN9EtherComm15CommandReceivedEhPKhh+0xe>
     a6a:	83 30       	cpi	r24, 0x03	; 3
     a6c:	49 f0       	breq	.+18     	; 0xa80 <_ZN9EtherComm15CommandReceivedEhPKhh+0x1e>
     a6e:	08 95       	ret
    case CMD_Ping: RunPingCommand(data, len); break;
     a70:	64 2f       	mov	r22, r20
     a72:	c9 01       	movw	r24, r18
     a74:	d7 cf       	rjmp	.-82     	; 0xa24 <_Z14RunPingCommandPKhh>
     a76:	08 95       	ret
    case CMD_Echo: RunEchoCommand(data, len); break;
     a78:	64 2f       	mov	r22, r20
     a7a:	c9 01       	movw	r24, r18
     a7c:	df cf       	rjmp	.-66     	; 0xa3c <_Z14RunEchoCommandPKhh>
     a7e:	08 95       	ret
	case CMD_Led: RunLedCommand(data, len); break;
	case CMD_UpdateDevice: rov.CommandReceived(data, len); break;
     a80:	64 2f       	mov	r22, r20
     a82:	c9 01       	movw	r24, r18
     a84:	0c 94 58 20 	jmp	0x40b0	; 0x40b0 <_ZN5Robot15CommandReceivedEPKhh>
     a88:	08 95       	ret

00000a8a <_GLOBAL__sub_I__Z14RunPingCommandPKhh>:
#include "EtherComm.h"
#include "Robot.h"
#include "Commands.h"
#include <stddef.h>

uint8_t* const SendDataBuffer = (uint8_t*)(&EtherComm::buffer[2]);
     a8a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
     a8e:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
     a92:	02 96       	adiw	r24, 0x02	; 2
     a94:	90 93 89 03 	sts	0x0389, r25	; 0x800389 <__data_end+0x1>
     a98:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <__data_end>
     a9c:	08 95       	ret

00000a9e <_ZL10enableChipv>:
static Register* selectPort;
static uint8_t selectPin;

static void enableChip () {
	//cli();
	SetLow(*selectPort, selectPin); //digitalWrite(selectPin, LOW);
     a9e:	e0 91 8e 03 	lds	r30, 0x038E	; 0x80038e <_ZL10selectPort>
     aa2:	f0 91 8f 03 	lds	r31, 0x038F	; 0x80038f <_ZL10selectPort+0x1>
     aa6:	90 81       	ld	r25, Z
     aa8:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <_ZL9selectPin>
     aac:	80 95       	com	r24
     aae:	89 23       	and	r24, r25
     ab0:	80 83       	st	Z, r24
     ab2:	08 95       	ret

00000ab4 <_ZL11disableChipv>:
}

static void disableChip () {
	SetHigh(*selectPort, selectPin); //digitalWrite(selectPin, HIGH);
     ab4:	e0 91 8e 03 	lds	r30, 0x038E	; 0x80038e <_ZL10selectPort>
     ab8:	f0 91 8f 03 	lds	r31, 0x038F	; 0x80038f <_ZL10selectPort+0x1>
     abc:	90 81       	ld	r25, Z
     abe:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <_ZL9selectPin>
     ac2:	89 2b       	or	r24, r25
     ac4:	80 83       	st	Z, r24
     ac6:	08 95       	ret

00000ac8 <_ZL6readOphh>:

	SetOutput(csDDR, selectPin);
	disableChip();
}

static uint8_t readOp (uint8_t op, uint8_t address) {
     ac8:	cf 93       	push	r28
     aca:	df 93       	push	r29
     acc:	d8 2f       	mov	r29, r24
     ace:	c6 2f       	mov	r28, r22
    enableChip();
     ad0:	e6 df       	rcall	.-52     	; 0xa9e <_ZL10enableChipv>
    SPI.write8(op | (address & ADDR_MASK));
     ad2:	8c 2f       	mov	r24, r28
     ad4:	cf 71       	andi	r28, 0x1F	; 31
     ad6:	cd 2b       	or	r28, r29
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     ad8:	ce bd       	out	0x2e, r28	; 46
		asm volatile("nop");
     ada:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     adc:	0d b4       	in	r0, 0x2d	; 45
     ade:	07 fe       	sbrs	r0, 7
     ae0:	fd cf       	rjmp	.-6      	; 0xadc <_ZL6readOphh+0x14>
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     ae2:	1e bc       	out	0x2e, r1	; 46
		asm volatile("nop");
     ae4:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     ae6:	0d b4       	in	r0, 0x2d	; 45
     ae8:	07 fe       	sbrs	r0, 7
     aea:	fd cf       	rjmp	.-6      	; 0xae6 <_ZL6readOphh+0x1e>
	}

	//write8, excepts also returns the received byte
	static uint8_t read_write8(uint8_t data){
		write8(data);
		return SPDR;
     aec:	ce b5       	in	r28, 0x2e	; 46
    uint8_t result = SPI.read_write8(0x00);
    if (address & 0x80)
     aee:	88 23       	and	r24, r24
     af0:	34 f4       	brge	.+12     	; 0xafe <_ZL6readOphh+0x36>
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     af2:	1e bc       	out	0x2e, r1	; 46
		asm volatile("nop");
     af4:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     af6:	0d b4       	in	r0, 0x2d	; 45
     af8:	07 fe       	sbrs	r0, 7
     afa:	fd cf       	rjmp	.-6      	; 0xaf6 <_ZL6readOphh+0x2e>
        result = SPI.read_write8(0x00);
    disableChip();
     afc:	ce b5       	in	r28, 0x2e	; 46
     afe:	da df       	rcall	.-76     	; 0xab4 <_ZL11disableChipv>
    return result;
}
     b00:	8c 2f       	mov	r24, r28
     b02:	df 91       	pop	r29
     b04:	cf 91       	pop	r28
     b06:	08 95       	ret

00000b08 <_ZL7writeOphhh>:

static void writeOp (uint8_t op, uint8_t address, uint8_t data) {
     b08:	1f 93       	push	r17
     b0a:	cf 93       	push	r28
     b0c:	df 93       	push	r29
     b0e:	c8 2f       	mov	r28, r24
     b10:	d6 2f       	mov	r29, r22
     b12:	14 2f       	mov	r17, r20
    enableChip();
     b14:	c4 df       	rcall	.-120    	; 0xa9e <_ZL10enableChipv>
    SPI.write8(op | (address & ADDR_MASK));
     b16:	df 71       	andi	r29, 0x1F	; 31
     b18:	cd 2b       	or	r28, r29
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     b1a:	ce bd       	out	0x2e, r28	; 46
		asm volatile("nop");
     b1c:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     b1e:	0d b4       	in	r0, 0x2d	; 45
     b20:	07 fe       	sbrs	r0, 7
     b22:	fd cf       	rjmp	.-6      	; 0xb1e <_ZL7writeOphhh+0x16>
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     b24:	1e bd       	out	0x2e, r17	; 46
		asm volatile("nop");
     b26:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     b28:	0d b4       	in	r0, 0x2d	; 45
     b2a:	07 fe       	sbrs	r0, 7
    SPI.write8(data);
    disableChip();
     b2c:	fd cf       	rjmp	.-6      	; 0xb28 <_ZL7writeOphhh+0x20>
     b2e:	c2 df       	rcall	.-124    	; 0xab4 <_ZL11disableChipv>
}
     b30:	df 91       	pop	r29
     b32:	cf 91       	pop	r28
     b34:	1f 91       	pop	r17
     b36:	08 95       	ret

00000b38 <_ZL7readBufjPh>:

static void readBuf(uint16_t len, uint8_t* data) {
     b38:	0f 93       	push	r16
     b3a:	1f 93       	push	r17
     b3c:	cf 93       	push	r28
     b3e:	df 93       	push	r29
     b40:	ec 01       	movw	r28, r24
     b42:	8b 01       	movw	r16, r22
    enableChip();
     b44:	ac df       	rcall	.-168    	; 0xa9e <_ZL10enableChipv>
    if (len != 0) {
     b46:	20 97       	sbiw	r28, 0x00	; 0
     b48:	99 f0       	breq	.+38     	; 0xb70 <_ZL7readBufjPh+0x38>
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     b4a:	8a e3       	ldi	r24, 0x3A	; 58
     b4c:	8e bd       	out	0x2e, r24	; 46
		asm volatile("nop");
     b4e:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     b50:	0d b4       	in	r0, 0x2d	; 45
     b52:	07 fe       	sbrs	r0, 7
     b54:	fd cf       	rjmp	.-6      	; 0xb50 <_ZL7readBufjPh+0x18>
     b56:	f8 01       	movw	r30, r16
     b58:	b8 01       	movw	r22, r16
     b5a:	6c 0f       	add	r22, r28
     b5c:	7d 1f       	adc	r23, r29
	static void read(void *buf, uint16_t nbyte, uint8_t dataSend = 0){
		if(nbyte == 0) return;
		
		uint8_t* buff = (uint8_t*)buf;
		while(nbyte--){
			SPDR = dataSend;
     b5e:	1e bc       	out	0x2e, r1	; 46
			//asm volatile("nop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\n");
			while(!(SPSR & _BV(SPIF)));
     b60:	0d b4       	in	r0, 0x2d	; 45
     b62:	07 fe       	sbrs	r0, 7
     b64:	fd cf       	rjmp	.-6      	; 0xb60 <_ZL7readBufjPh+0x28>
			*buff++ = SPDR;
     b66:	9e b5       	in	r25, 0x2e	; 46
     b68:	91 93       	st	Z+, r25
		
	static void read(void *buf, uint16_t nbyte, uint8_t dataSend = 0){
		if(nbyte == 0) return;
		
		uint8_t* buff = (uint8_t*)buf;
		while(nbyte--){
     b6a:	6e 17       	cp	r22, r30
     b6c:	7f 07       	cpc	r23, r31
        SPI.write8(ENC28J60_READ_BUF_MEM);
		SPI.read(data, len);
    }
    disableChip();
     b6e:	b9 f7       	brne	.-18     	; 0xb5e <_ZL7readBufjPh+0x26>
     b70:	a1 df       	rcall	.-190    	; 0xab4 <_ZL11disableChipv>
}
     b72:	df 91       	pop	r29
     b74:	cf 91       	pop	r28
     b76:	1f 91       	pop	r17
     b78:	0f 91       	pop	r16
     b7a:	08 95       	ret

00000b7c <_ZL7SetBankh>:
        SPI.write(data, len);
    }
    disableChip();
}

static void SetBank (uint8_t address) {
     b7c:	1f 93       	push	r17
     b7e:	cf 93       	push	r28
     b80:	df 93       	push	r29
     b82:	18 2f       	mov	r17, r24
     b84:	10 76       	andi	r17, 0x60	; 96
    if ((address & BANK_MASK) != Enc28j60Bank) {
     b86:	c1 2f       	mov	r28, r17
     b88:	d0 e0       	ldi	r29, 0x00	; 0
     b8a:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <_ZL12Enc28j60Bank>
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	c8 17       	cp	r28, r24
     b92:	d9 07       	cpc	r29, r25
     b94:	a1 f0       	breq	.+40     	; 0xbbe <_ZL7SetBankh+0x42>
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_BSEL1|ECON1_BSEL0);
     b96:	43 e0       	ldi	r20, 0x03	; 3
     b98:	6f e1       	ldi	r22, 0x1F	; 31
     b9a:	80 ea       	ldi	r24, 0xA0	; 160
     b9c:	b5 df       	rcall	.-150    	; 0xb08 <_ZL7writeOphhh>
        Enc28j60Bank = address & BANK_MASK;
     b9e:	10 93 90 03 	sts	0x0390, r17	; 0x800390 <_ZL12Enc28j60Bank>
        writeOp(ENC28J60_BIT_FIELD_SET, ECON1, Enc28j60Bank>>5);
     ba2:	ae 01       	movw	r20, r28
     ba4:	55 95       	asr	r21
     ba6:	47 95       	ror	r20
     ba8:	55 95       	asr	r21
     baa:	47 95       	ror	r20
     bac:	55 95       	asr	r21
     bae:	47 95       	ror	r20
     bb0:	55 95       	asr	r21
     bb2:	47 95       	ror	r20
     bb4:	55 95       	asr	r21
     bb6:	47 95       	ror	r20
     bb8:	6f e1       	ldi	r22, 0x1F	; 31
     bba:	80 e8       	ldi	r24, 0x80	; 128
     bbc:	a5 df       	rcall	.-182    	; 0xb08 <_ZL7writeOphhh>
    }
}
     bbe:	df 91       	pop	r29
     bc0:	cf 91       	pop	r28
     bc2:	1f 91       	pop	r17
     bc4:	08 95       	ret

00000bc6 <_ZL11readRegByteh>:

static uint8_t readRegByte (uint8_t address) {
     bc6:	cf 93       	push	r28
     bc8:	c8 2f       	mov	r28, r24
    SetBank(address);
     bca:	d8 df       	rcall	.-80     	; 0xb7c <_ZL7SetBankh>
    return readOp(ENC28J60_READ_CTRL_REG, address);
     bcc:	6c 2f       	mov	r22, r28
     bce:	80 e0       	ldi	r24, 0x00	; 0
     bd0:	7b df       	rcall	.-266    	; 0xac8 <_ZL6readOphh>
}
     bd2:	cf 91       	pop	r28
     bd4:	08 95       	ret

00000bd6 <_ZL12writeRegBytehh>:

static void writeRegByte (uint8_t address, uint8_t data) {
     bd6:	cf 93       	push	r28
     bd8:	df 93       	push	r29
     bda:	c8 2f       	mov	r28, r24
     bdc:	d6 2f       	mov	r29, r22
    SetBank(address);
     bde:	ce df       	rcall	.-100    	; 0xb7c <_ZL7SetBankh>
    writeOp(ENC28J60_WRITE_CTRL_REG, address, data);
     be0:	4d 2f       	mov	r20, r29
     be2:	6c 2f       	mov	r22, r28
     be4:	80 e4       	ldi	r24, 0x40	; 64
     be6:	90 df       	rcall	.-224    	; 0xb08 <_ZL7writeOphhh>
}
     be8:	df 91       	pop	r29
     bea:	cf 91       	pop	r28
     bec:	08 95       	ret

00000bee <_ZL8writeReghj>:

static void writeReg(uint8_t address, uint16_t data) {
     bee:	cf 93       	push	r28
     bf0:	df 93       	push	r29
     bf2:	c8 2f       	mov	r28, r24
     bf4:	d7 2f       	mov	r29, r23
    writeRegByte(address, data);
     bf6:	ef df       	rcall	.-34     	; 0xbd6 <_ZL12writeRegBytehh>
    writeRegByte(address + 1, data >> 8);
     bf8:	6d 2f       	mov	r22, r29
     bfa:	81 e0       	ldi	r24, 0x01	; 1
     bfc:	8c 0f       	add	r24, r28
     bfe:	eb df       	rcall	.-42     	; 0xbd6 <_ZL12writeRegBytehh>
}
     c00:	df 91       	pop	r29
     c02:	cf 91       	pop	r28
     c04:	08 95       	ret

00000c06 <_ZN8ENC28J607initSPIERVh>:
static void disableChip () {
	SetHigh(*selectPort, selectPin); //digitalWrite(selectPin, HIGH);
	//sei();
}

void ENC28J60::initSPI (Register& csDDR) {
     c06:	fc 01       	movw	r30, r24

class SPI{
public:
	static void begin(uint8_t clock = SPI_CLOCK_DIV2){
		//SPI_DIR |= SS;
		DDR_SPI |= MASK_MOSI | MASK_SCK | MASK_SS; //Not sure why, but SS pin requires to be set as output even when not being used.
     c08:	94 b1       	in	r25, 0x04	; 4
     c0a:	97 60       	ori	r25, 0x07	; 7
     c0c:	94 b9       	out	0x04, r25	; 4
		DDR_SPI &= ~(MASK_MISO);
     c0e:	23 98       	cbi	0x04, 3	; 4
		//disableCS();

		SPSR |= (clock >> 2);
     c10:	9d b5       	in	r25, 0x2d	; 45
     c12:	91 60       	ori	r25, 0x01	; 1
     c14:	9d bd       	out	0x2d, r25	; 45
		SPCR |= _BV(MSTR) | _BV(SPE) | (clock & 0x03);
     c16:	9c b5       	in	r25, 0x2c	; 44
     c18:	90 65       	ori	r25, 0x50	; 80
     c1a:	9c bd       	out	0x2c, r25	; 44
	SPI.begin(SPI_CLOCK_DIV2);

	SetOutput(csDDR, selectPin);
     c1c:	80 81       	ld	r24, Z
     c1e:	90 91 8d 03 	lds	r25, 0x038D	; 0x80038d <_ZL9selectPin>
     c22:	98 2b       	or	r25, r24
     c24:	90 83       	st	Z, r25
	disableChip();
     c26:	46 cf       	rjmp	.-372    	; 0xab4 <_ZL11disableChipv>
     c28:	08 95       	ret

00000c2a <_ZN8ENC28J6010initializeEjPKhRVhS3_h>:
    writeReg(MIWR, data);
    while (readRegByte(MISTAT) & MISTAT_BUSY)
        ;
}

uint8_t ENC28J60::initialize (uint16_t size, const uint8_t* macaddr, Register& csDDR, Register& csPort, uint8_t csPin) {
     c2a:	0f 93       	push	r16
     c2c:	cf 93       	push	r28
     c2e:	df 93       	push	r29
     c30:	eb 01       	movw	r28, r22
    bufferSize = size;
     c32:	90 93 92 03 	sts	0x0392, r25	; 0x800392 <_ZN8ENC28J6010bufferSizeE+0x1>
     c36:	80 93 91 03 	sts	0x0391, r24	; 0x800391 <_ZN8ENC28J6010bufferSizeE>
	selectPin = csPin;
     c3a:	00 93 8d 03 	sts	0x038D, r16	; 0x80038d <_ZL9selectPin>
	selectPort = &csPort;
     c3e:	30 93 8f 03 	sts	0x038F, r19	; 0x80038f <_ZL10selectPort+0x1>
     c42:	20 93 8e 03 	sts	0x038E, r18	; 0x80038e <_ZL10selectPort>
    initSPI(csDDR);
     c46:	ca 01       	movw	r24, r20
     c48:	de df       	rcall	.-68     	; 0xc06 <_ZN8ENC28J607initSPIERVh>

    writeOp(ENC28J60_SOFT_RESET, 0, ENC28J60_SOFT_RESET);
     c4a:	4f ef       	ldi	r20, 0xFF	; 255
     c4c:	60 e0       	ldi	r22, 0x00	; 0
     c4e:	8f ef       	ldi	r24, 0xFF	; 255
     c50:	5b df       	rcall	.-330    	; 0xb08 <_ZL7writeOphhh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c52:	8f e3       	ldi	r24, 0x3F	; 63
     c54:	9f e1       	ldi	r25, 0x1F	; 31
     c56:	01 97       	sbiw	r24, 0x01	; 1
     c58:	f1 f7       	brne	.-4      	; 0xc56 <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0x2c>
     c5a:	00 c0       	rjmp	.+0      	; 0xc5c <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0x32>
     c5c:	00 00       	nop
	_delay_ms(2);
    while (!readOp(ENC28J60_READ_CTRL_REG, ESTAT) & ESTAT_CLKRDY)
     c5e:	6d e1       	ldi	r22, 0x1D	; 29
     c60:	80 e0       	ldi	r24, 0x00	; 0
     c62:	32 df       	rcall	.-412    	; 0xac8 <_ZL6readOphh>
     c64:	88 23       	and	r24, r24
     c66:	d9 f3       	breq	.-10     	; 0xc5e <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0x34>
        ;

    writeReg(ERXST, RXSTART_INIT);
     c68:	60 e0       	ldi	r22, 0x00	; 0
     c6a:	70 e0       	ldi	r23, 0x00	; 0
     c6c:	88 e0       	ldi	r24, 0x08	; 8
     c6e:	bf df       	rcall	.-130    	; 0xbee <_ZL8writeReghj>
    writeReg(ERXRDPT, RXSTART_INIT);
     c70:	60 e0       	ldi	r22, 0x00	; 0
     c72:	70 e0       	ldi	r23, 0x00	; 0
     c74:	8c e0       	ldi	r24, 0x0C	; 12
     c76:	bb df       	rcall	.-138    	; 0xbee <_ZL8writeReghj>
    writeReg(ERXND, RXSTOP_INIT);
     c78:	6f ef       	ldi	r22, 0xFF	; 255
     c7a:	7b e0       	ldi	r23, 0x0B	; 11
     c7c:	8a e0       	ldi	r24, 0x0A	; 10
     c7e:	b7 df       	rcall	.-146    	; 0xbee <_ZL8writeReghj>
    writeReg(ETXST, TXSTART_INIT);
     c80:	60 e0       	ldi	r22, 0x00	; 0
     c82:	7c e0       	ldi	r23, 0x0C	; 12
     c84:	84 e0       	ldi	r24, 0x04	; 4
     c86:	b3 df       	rcall	.-154    	; 0xbee <_ZL8writeReghj>
    writeReg(ETXND, TXSTOP_INIT);
     c88:	6f ef       	ldi	r22, 0xFF	; 255
     c8a:	71 e1       	ldi	r23, 0x11	; 17
     c8c:	86 e0       	ldi	r24, 0x06	; 6
     c8e:	af df       	rcall	.-162    	; 0xbee <_ZL8writeReghj>

    writeRegByte(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN|ERXFCON_PMEN|ERXFCON_BCEN);
     c90:	61 eb       	ldi	r22, 0xB1	; 177
     c92:	88 e3       	ldi	r24, 0x38	; 56
     c94:	a0 df       	rcall	.-192    	; 0xbd6 <_ZL12writeRegBytehh>
    writeReg(EPMM0, 0x303f);
     c96:	6f e3       	ldi	r22, 0x3F	; 63
     c98:	70 e3       	ldi	r23, 0x30	; 48
     c9a:	88 e2       	ldi	r24, 0x28	; 40
     c9c:	a8 df       	rcall	.-176    	; 0xbee <_ZL8writeReghj>
    writeReg(EPMCS, 0xf7f9);
     c9e:	69 ef       	ldi	r22, 0xF9	; 249
     ca0:	77 ef       	ldi	r23, 0xF7	; 247
     ca2:	80 e3       	ldi	r24, 0x30	; 48
     ca4:	a4 df       	rcall	.-184    	; 0xbee <_ZL8writeReghj>
    writeRegByte(MACON1, MACON1_MARXEN);
     ca6:	61 e0       	ldi	r22, 0x01	; 1
     ca8:	80 ec       	ldi	r24, 0xC0	; 192
     caa:	95 df       	rcall	.-214    	; 0xbd6 <_ZL12writeRegBytehh>
    writeOp(ENC28J60_BIT_FIELD_SET, MACON3,
            MACON3_PADCFG0|MACON3_TXCRCEN|MACON3_FRMLNEN);
     cac:	42 e3       	ldi	r20, 0x32	; 50
     cae:	62 ec       	ldi	r22, 0xC2	; 194
     cb0:	80 e8       	ldi	r24, 0x80	; 128
     cb2:	2a df       	rcall	.-428    	; 0xb08 <_ZL7writeOphhh>
    writeReg(MAIPG, 0x0C12);
     cb4:	62 e1       	ldi	r22, 0x12	; 18
     cb6:	7c e0       	ldi	r23, 0x0C	; 12
     cb8:	86 ec       	ldi	r24, 0xC6	; 198
    writeRegByte(MABBIPG, 0x12);
     cba:	99 df       	rcall	.-206    	; 0xbee <_ZL8writeReghj>
     cbc:	62 e1       	ldi	r22, 0x12	; 18
     cbe:	84 ec       	ldi	r24, 0xC4	; 196
    writeReg(MAMXFL, MAX_FRAMELEN);
     cc0:	8a df       	rcall	.-236    	; 0xbd6 <_ZL12writeRegBytehh>
     cc2:	6c ed       	ldi	r22, 0xDC	; 220
     cc4:	75 e0       	ldi	r23, 0x05	; 5
    writeRegByte(MAADR5, macaddr[0]);
     cc6:	8a ec       	ldi	r24, 0xCA	; 202
     cc8:	92 df       	rcall	.-220    	; 0xbee <_ZL8writeReghj>
     cca:	68 81       	ld	r22, Y
    writeRegByte(MAADR4, macaddr[1]);
     ccc:	84 ee       	ldi	r24, 0xE4	; 228
     cce:	83 df       	rcall	.-250    	; 0xbd6 <_ZL12writeRegBytehh>
     cd0:	69 81       	ldd	r22, Y+1	; 0x01
    writeRegByte(MAADR3, macaddr[2]);
     cd2:	85 ee       	ldi	r24, 0xE5	; 229
     cd4:	80 df       	rcall	.-256    	; 0xbd6 <_ZL12writeRegBytehh>
    writeRegByte(MAADR2, macaddr[3]);
     cd6:	6a 81       	ldd	r22, Y+2	; 0x02
     cd8:	82 ee       	ldi	r24, 0xE2	; 226
     cda:	7d df       	rcall	.-262    	; 0xbd6 <_ZL12writeRegBytehh>
    writeRegByte(MAADR1, macaddr[4]);
     cdc:	6b 81       	ldd	r22, Y+3	; 0x03
     cde:	83 ee       	ldi	r24, 0xE3	; 227
     ce0:	7a df       	rcall	.-268    	; 0xbd6 <_ZL12writeRegBytehh>
    writeRegByte(MAADR0, macaddr[5]);
     ce2:	6c 81       	ldd	r22, Y+4	; 0x04
     ce4:	80 ee       	ldi	r24, 0xE0	; 224
     ce6:	77 df       	rcall	.-274    	; 0xbd6 <_ZL12writeRegBytehh>
    writeRegByte(MICMD, 0x00);
    return readRegByte(MIRD+1);
}

static void writePhy (uint8_t address, uint16_t data) {
    writeRegByte(MIREGADR, address);
     ce8:	6d 81       	ldd	r22, Y+5	; 0x05
     cea:	81 ee       	ldi	r24, 0xE1	; 225
     cec:	74 df       	rcall	.-280    	; 0xbd6 <_ZL12writeRegBytehh>
    writeReg(MIWR, data);
     cee:	60 e1       	ldi	r22, 0x10	; 16
     cf0:	84 ed       	ldi	r24, 0xD4	; 212
     cf2:	71 df       	rcall	.-286    	; 0xbd6 <_ZL12writeRegBytehh>
     cf4:	60 e0       	ldi	r22, 0x00	; 0
     cf6:	71 e0       	ldi	r23, 0x01	; 1
    while (readRegByte(MISTAT) & MISTAT_BUSY)
     cf8:	86 ed       	ldi	r24, 0xD6	; 214
     cfa:	79 df       	rcall	.-270    	; 0xbee <_ZL8writeReghj>
     cfc:	8a ee       	ldi	r24, 0xEA	; 234
     cfe:	63 df       	rcall	.-314    	; 0xbc6 <_ZL11readRegByteh>
     d00:	80 fd       	sbrc	r24, 0
    writeRegByte(MAADR3, macaddr[2]);
    writeRegByte(MAADR2, macaddr[3]);
    writeRegByte(MAADR1, macaddr[4]);
    writeRegByte(MAADR0, macaddr[5]);
    writePhy(PHCON2, PHCON2_HDLDIS);
    SetBank(ECON1);
     d02:	fc cf       	rjmp	.-8      	; 0xcfc <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0xd2>
     d04:	8f e1       	ldi	r24, 0x1F	; 31
     d06:	3a df       	rcall	.-396    	; 0xb7c <_ZL7SetBankh>
    writeOp(ENC28J60_BIT_FIELD_SET, EIE, EIE_INTIE|EIE_PKTIE);
     d08:	40 ec       	ldi	r20, 0xC0	; 192
     d0a:	6b e1       	ldi	r22, 0x1B	; 27
     d0c:	80 e8       	ldi	r24, 0x80	; 128
     d0e:	fc de       	rcall	.-520    	; 0xb08 <_ZL7writeOphhh>
     d10:	44 e0       	ldi	r20, 0x04	; 4
    writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN);
     d12:	6f e1       	ldi	r22, 0x1F	; 31
     d14:	80 e8       	ldi	r24, 0x80	; 128
     d16:	f8 de       	rcall	.-528    	; 0xb08 <_ZL7writeOphhh>
     d18:	82 e7       	ldi	r24, 0x72	; 114
     d1a:	55 df       	rcall	.-342    	; 0xbc6 <_ZL11readRegByteh>

    uint8_t rev = readRegByte(EREVID);
     d1c:	86 30       	cpi	r24, 0x06	; 6
     d1e:	08 f0       	brcs	.+2      	; 0xd22 <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0xf8>
     d20:	8f 5f       	subi	r24, 0xFF	; 255
    // microchip forgot to step the number on the silicon when they
    // released the revision B7. 6 is now rev B7. We still have
    // to see what they do when they release B8. At the moment
    // there is no B8 out yet
    if (rev > 5) ++rev;
     d22:	df 91       	pop	r29
     d24:	cf 91       	pop	r28
     d26:	0f 91       	pop	r16
    return rev;
}
     d28:	08 95       	ret

00000d2a <_ZN8ENC28J608isLinkUpEv>:
     d2a:	61 e1       	ldi	r22, 0x11	; 17
     d2c:	84 ed       	ldi	r24, 0xD4	; 212
     d2e:	53 df       	rcall	.-346    	; 0xbd6 <_ZL12writeRegBytehh>
    writeRegByte(address + 1, data >> 8);
}

static uint16_t readPhyByte (uint8_t address) {
    writeRegByte(MIREGADR, address);
    writeRegByte(MICMD, MICMD_MIIRD);
     d30:	61 e0       	ldi	r22, 0x01	; 1
     d32:	82 ed       	ldi	r24, 0xD2	; 210
     d34:	50 df       	rcall	.-352    	; 0xbd6 <_ZL12writeRegBytehh>
    while (readRegByte(MISTAT) & MISTAT_BUSY)
     d36:	8a ee       	ldi	r24, 0xEA	; 234
     d38:	46 df       	rcall	.-372    	; 0xbc6 <_ZL11readRegByteh>
     d3a:	80 fd       	sbrc	r24, 0
     d3c:	fc cf       	rjmp	.-8      	; 0xd36 <_ZN8ENC28J608isLinkUpEv+0xc>
        ;
    writeRegByte(MICMD, 0x00);
     d3e:	60 e0       	ldi	r22, 0x00	; 0
     d40:	82 ed       	ldi	r24, 0xD2	; 210
     d42:	49 df       	rcall	.-366    	; 0xbd6 <_ZL12writeRegBytehh>
    return readRegByte(MIRD+1);
     d44:	89 ed       	ldi	r24, 0xD9	; 217
     d46:	3f df       	rcall	.-386    	; 0xbc6 <_ZL11readRegByteh>
     d48:	82 fb       	bst	r24, 2
    return rev;
}

bool ENC28J60::isLinkUp() {
    return (readPhyByte(PHSTAT2) >> 2) & 1;
}
     d4a:	88 27       	eor	r24, r24
     d4c:	80 f9       	bld	r24, 0
     d4e:	08 95       	ret

00000d50 <_ZN8ENC28J6010packetSendEj>:
     d50:	af 92       	push	r10

struct transmit_status_vector {
    uint8_t bytes[7];
};

void ENC28J60::packetSend(uint16_t len) {
     d52:	bf 92       	push	r11
     d54:	cf 92       	push	r12
     d56:	df 92       	push	r13
     d58:	ef 92       	push	r14
     d5a:	ff 92       	push	r15
     d5c:	0f 93       	push	r16
     d5e:	1f 93       	push	r17
     d60:	cf 93       	push	r28
     d62:	df 93       	push	r29
     d64:	7c 01       	movw	r14, r24
        writeOp(ENC28J60_BIT_FIELD_CLR, EIR, EIR_TXERIF|EIR_TXIF);

        // prepare new transmission
        if (retry == 0) {
            writeReg(EWRPT, TXSTART_INIT);
            writeReg(ETXND, TXSTART_INIT+len);
     d66:	6c 01       	movw	r12, r24
     d68:	84 ef       	ldi	r24, 0xF4	; 244
     d6a:	d8 1a       	sub	r13, r24

	static void write(const void *buf, uint16_t nbyte){
		if(nbyte == 0) return;
		
		const uint8_t* buff = (const uint8_t*)(buf);
		SPDR = *buff;
     d6c:	0f 2e       	mov	r0, r31
     d6e:	f3 e9       	ldi	r31, 0x93	; 147
     d70:	af 2e       	mov	r10, r31
     d72:	f3 e0       	ldi	r31, 0x03	; 3
     d74:	bf 2e       	mov	r11, r31
     d76:	f0 2d       	mov	r31, r0
     d78:	87 01       	movw	r16, r14
     d7a:	0d 56       	subi	r16, 0x6D	; 109
     d7c:	1c 4f       	sbci	r17, 0xFC	; 252
        // the Microchip TCP/IP stack implementation used to first check
        // whether TXERIF is set and only then reset the transmit logic
        // but this has been changed in later versions; possibly they
        // have a reason for this; they don't mention this in the errata
        // sheet
        writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRST);
     d7e:	40 e8       	ldi	r20, 0x80	; 128
     d80:	6f e1       	ldi	r22, 0x1F	; 31
     d82:	80 e8       	ldi	r24, 0x80	; 128
     d84:	c1 de       	rcall	.-638    	; 0xb08 <_ZL7writeOphhh>
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRST);
     d86:	40 e8       	ldi	r20, 0x80	; 128
     d88:	6f e1       	ldi	r22, 0x1F	; 31
     d8a:	80 ea       	ldi	r24, 0xA0	; 160
     d8c:	bd de       	rcall	.-646    	; 0xb08 <_ZL7writeOphhh>
        writeOp(ENC28J60_BIT_FIELD_CLR, EIR, EIR_TXERIF|EIR_TXIF);
     d8e:	4a e0       	ldi	r20, 0x0A	; 10
     d90:	6c e1       	ldi	r22, 0x1C	; 28
     d92:	80 ea       	ldi	r24, 0xA0	; 160
     d94:	b9 de       	rcall	.-654    	; 0xb08 <_ZL7writeOphhh>

        // prepare new transmission
        if (retry == 0) {
            writeReg(EWRPT, TXSTART_INIT);
     d96:	60 e0       	ldi	r22, 0x00	; 0
     d98:	7c e0       	ldi	r23, 0x0C	; 12
     d9a:	82 e0       	ldi	r24, 0x02	; 2
            writeReg(ETXND, TXSTART_INIT+len);
     d9c:	28 df       	rcall	.-432    	; 0xbee <_ZL8writeReghj>
     d9e:	b6 01       	movw	r22, r12
     da0:	86 e0       	ldi	r24, 0x06	; 6
            writeOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
     da2:	25 df       	rcall	.-438    	; 0xbee <_ZL8writeReghj>
     da4:	40 e0       	ldi	r20, 0x00	; 0
     da6:	60 e0       	ldi	r22, 0x00	; 0
     da8:	8a e7       	ldi	r24, 0x7A	; 122
     daa:	ae de       	rcall	.-676    	; 0xb08 <_ZL7writeOphhh>
    }
    disableChip();
}

static void writeBuf(uint16_t len, const uint8_t* data) {
    enableChip();
     dac:	78 de       	rcall	.-784    	; 0xa9e <_ZL10enableChipv>
     dae:	e1 14       	cp	r14, r1
    if (len != 0) {
     db0:	f1 04       	cpc	r15, r1
     db2:	e1 f0       	breq	.+56     	; 0xdec <_ZN8ENC28J6010packetSendEj+0x9c>
     db4:	8a e7       	ldi	r24, 0x7A	; 122
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     db6:	8e bd       	out	0x2e, r24	; 46
     db8:	00 00       	nop
		asm volatile("nop");
     dba:	0d b4       	in	r0, 0x2d	; 45
		while(!(SPSR & _BV(SPIF)));
     dbc:	07 fe       	sbrs	r0, 7
     dbe:	fd cf       	rjmp	.-6      	; 0xdba <_ZN8ENC28J6010packetSendEj+0x6a>
     dc0:	f5 01       	movw	r30, r10

	static void write(const void *buf, uint16_t nbyte){
		if(nbyte == 0) return;
		
		const uint8_t* buff = (const uint8_t*)(buf);
		SPDR = *buff;
     dc2:	80 81       	ld	r24, Z
     dc4:	8e bd       	out	0x2e, r24	; 46
     dc6:	f1 e0       	ldi	r31, 0x01	; 1
		while(--nbyte){
     dc8:	ef 16       	cp	r14, r31
     dca:	f1 04       	cpc	r15, r1
     dcc:	59 f0       	breq	.+22     	; 0xde4 <_ZN8ENC28J6010packetSendEj+0x94>
     dce:	e4 e9       	ldi	r30, 0x94	; 148
     dd0:	f3 e0       	ldi	r31, 0x03	; 3
     dd2:	00 00       	nop
			asm volatile("nop");
     dd4:	0d b4       	in	r0, 0x2d	; 45
			while (!(SPSR & _BV(SPIF))) ;
     dd6:	07 fe       	sbrs	r0, 7
     dd8:	fd cf       	rjmp	.-6      	; 0xdd4 <_ZN8ENC28J6010packetSendEj+0x84>
     dda:	81 91       	ld	r24, Z+
			SPDR = *++buff;
     ddc:	8e bd       	out	0x2e, r24	; 46
     dde:	e0 17       	cp	r30, r16
	static void write(const void *buf, uint16_t nbyte){
		if(nbyte == 0) return;
		
		const uint8_t* buff = (const uint8_t*)(buf);
		SPDR = *buff;
		while(--nbyte){
     de0:	f1 07       	cpc	r31, r17
     de2:	b9 f7       	brne	.-18     	; 0xdd2 <_ZN8ENC28J6010packetSendEj+0x82>
			asm volatile("nop");
			while (!(SPSR & _BV(SPIF))) ;
			SPDR = *++buff;
		}
		asm volatile("nop");
     de4:	00 00       	nop
		while (!(SPSR & _BV(SPIF))) ;
     de6:	0d b4       	in	r0, 0x2d	; 45
     de8:	07 fe       	sbrs	r0, 7
        SPI.write8(ENC28J60_WRITE_BUF_MEM);

        SPI.write(data, len);
    }
    disableChip();
     dea:	fd cf       	rjmp	.-6      	; 0xde6 <_ZN8ENC28J6010packetSendEj+0x96>
            writeOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
            writeBuf(len, buffer);
        }

        // initiate transmission
        writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
     dec:	63 de       	rcall	.-826    	; 0xab4 <_ZL11disableChipv>
     dee:	48 e0       	ldi	r20, 0x08	; 8
     df0:	6f e1       	ldi	r22, 0x1F	; 31
     df2:	80 e8       	ldi	r24, 0x80	; 128
     df4:	89 de       	rcall	.-750    	; 0xb08 <_ZL7writeOphhh>
        // wait until transmission has finished; referring to the data sheet and
        // to the errata (Errata Issue 13; Example 1) you only need to wait until either
        // TXIF or TXERIF gets set; however this leads to hangs; apparently Microchip
        // realized this and in later implementations of their tcp/ip stack they introduced
        // a counter to avoid hangs; of course they didn't update the errata sheet
        uint16_t count = 0;
     df6:	c0 e0       	ldi	r28, 0x00	; 0
     df8:	d0 e0       	ldi	r29, 0x00	; 0
        while ((readRegByte(EIR) & (EIR_TXIF | EIR_TXERIF)) == 0 && ++count < 1000U)
     dfa:	8c e1       	ldi	r24, 0x1C	; 28
     dfc:	e4 de       	rcall	.-568    	; 0xbc6 <_ZL11readRegByteh>
     dfe:	8a 70       	andi	r24, 0x0A	; 10
     e00:	31 f4       	brne	.+12     	; 0xe0e <_ZN8ENC28J6010packetSendEj+0xbe>
     e02:	21 96       	adiw	r28, 0x01	; 1
     e04:	c8 3e       	cpi	r28, 0xE8	; 232
     e06:	83 e0       	ldi	r24, 0x03	; 3
     e08:	d8 07       	cpc	r29, r24
     e0a:	b9 f7       	brne	.-18     	; 0xdfa <_ZN8ENC28J6010packetSendEj+0xaa>
     e0c:	0c c0       	rjmp	.+24     	; 0xe26 <_ZN8ENC28J6010packetSendEj+0xd6>
            ;

        if (!(readRegByte(EIR) & EIR_TXERIF) && count < 1000U) {
     e0e:	8c e1       	ldi	r24, 0x1C	; 28
     e10:	da de       	rcall	.-588    	; 0xbc6 <_ZL11readRegByteh>
     e12:	81 fd       	sbrc	r24, 1
     e14:	03 c0       	rjmp	.+6      	; 0xe1c <_ZN8ENC28J6010packetSendEj+0xcc>
     e16:	c8 3e       	cpi	r28, 0xE8	; 232
     e18:	d3 40       	sbci	r29, 0x03	; 3
            // no error; start new transmission
            break;
        }

        // cancel previous transmission if stuck
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRTS);
     e1a:	40 f0       	brcs	.+16     	; 0xe2c <_ZN8ENC28J6010packetSendEj+0xdc>
     e1c:	48 e0       	ldi	r20, 0x08	; 8
     e1e:	6f e1       	ldi	r22, 0x1F	; 31
     e20:	80 ea       	ldi	r24, 0xA0	; 160
     e22:	72 de       	rcall	.-796    	; 0xb08 <_ZL7writeOphhh>
};

void ENC28J60::packetSend(uint16_t len) {
    uint8_t retry = 0;

    while (1) {
     e24:	ac cf       	rjmp	.-168    	; 0xd7e <_ZN8ENC28J6010packetSendEj+0x2e>
        // a counter to avoid hangs; of course they didn't update the errata sheet
        uint16_t count = 0;
        while ((readRegByte(EIR) & (EIR_TXIF | EIR_TXERIF)) == 0 && ++count < 1000U)
            ;

        if (!(readRegByte(EIR) & EIR_TXERIF) && count < 1000U) {
     e26:	8c e1       	ldi	r24, 0x1C	; 28
     e28:	ce de       	rcall	.-612    	; 0xbc6 <_ZL11readRegByteh>
     e2a:	f8 cf       	rjmp	.-16     	; 0xe1c <_ZN8ENC28J6010packetSendEj+0xcc>
     e2c:	df 91       	pop	r29
        }

        // cancel previous transmission if stuck
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRTS);
    }
}
     e2e:	cf 91       	pop	r28
     e30:	1f 91       	pop	r17
     e32:	0f 91       	pop	r16
     e34:	ff 90       	pop	r15
     e36:	ef 90       	pop	r14
     e38:	df 90       	pop	r13
     e3a:	cf 90       	pop	r12
     e3c:	bf 90       	pop	r11
     e3e:	af 90       	pop	r10
     e40:	08 95       	ret

00000e42 <_ZN8ENC28J6013packetReceiveEv>:
     e42:	0f 93       	push	r16


uint16_t ENC28J60::packetReceive() {
     e44:	1f 93       	push	r17
     e46:	cf 93       	push	r28
     e48:	df 93       	push	r29
     e4a:	00 d0       	rcall	.+0      	; 0xe4c <_ZN8ENC28J6013packetReceiveEv+0xa>
     e4c:	00 d0       	rcall	.+0      	; 0xe4e <_ZN8ENC28J6013packetReceiveEv+0xc>
     e4e:	cd b7       	in	r28, 0x3d	; 61
     e50:	de b7       	in	r29, 0x3e	; 62
    static uint16_t gNextPacketPtr = RXSTART_INIT;
    static bool     unreleasedPacket = false;
    uint16_t len = 0;

    if (unreleasedPacket) {
     e52:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <_ZZN8ENC28J6013packetReceiveEvE16unreleasedPacket>
     e56:	88 23       	and	r24, r24
     e58:	91 f0       	breq	.+36     	; 0xe7e <_ZN8ENC28J6013packetReceiveEv+0x3c>
        if (gNextPacketPtr == 0)
     e5a:	60 91 8a 03 	lds	r22, 0x038A	; 0x80038a <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr>
     e5e:	70 91 8b 03 	lds	r23, 0x038B	; 0x80038b <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr+0x1>
     e62:	61 15       	cp	r22, r1
     e64:	71 05       	cpc	r23, r1
     e66:	29 f4       	brne	.+10     	; 0xe72 <_ZN8ENC28J6013packetReceiveEv+0x30>
            writeReg(ERXRDPT, RXSTOP_INIT);
     e68:	6f ef       	ldi	r22, 0xFF	; 255
     e6a:	7b e0       	ldi	r23, 0x0B	; 11
     e6c:	8c e0       	ldi	r24, 0x0C	; 12
     e6e:	bf de       	rcall	.-642    	; 0xbee <_ZL8writeReghj>
     e70:	04 c0       	rjmp	.+8      	; 0xe7a <_ZN8ENC28J6013packetReceiveEv+0x38>
        else
            writeReg(ERXRDPT, gNextPacketPtr - 1);
     e72:	61 50       	subi	r22, 0x01	; 1
     e74:	71 09       	sbc	r23, r1
     e76:	8c e0       	ldi	r24, 0x0C	; 12
     e78:	ba de       	rcall	.-652    	; 0xbee <_ZL8writeReghj>
        unreleasedPacket = false;
     e7a:	10 92 8c 03 	sts	0x038C, r1	; 0x80038c <_ZZN8ENC28J6013packetReceiveEvE16unreleasedPacket>
    }

    if (readRegByte(EPKTCNT) > 0) {
     e7e:	89 e3       	ldi	r24, 0x39	; 57
     e80:	a2 de       	rcall	.-700    	; 0xbc6 <_ZL11readRegByteh>
     e82:	88 23       	and	r24, r24
     e84:	a9 f1       	breq	.+106    	; 0xef0 <_ZN8ENC28J6013packetReceiveEv+0xae>
        writeReg(ERDPT, gNextPacketPtr);
     e86:	60 91 8a 03 	lds	r22, 0x038A	; 0x80038a <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr>
     e8a:	70 91 8b 03 	lds	r23, 0x038B	; 0x80038b <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr+0x1>
     e8e:	80 e0       	ldi	r24, 0x00	; 0
     e90:	ae de       	rcall	.-676    	; 0xbee <_ZL8writeReghj>
            uint16_t nextPacket;
            uint16_t byteCount;
            uint16_t status;
        } header;

        readBuf(sizeof header, (uint8_t*) &header);
     e92:	be 01       	movw	r22, r28
     e94:	6f 5f       	subi	r22, 0xFF	; 255
     e96:	7f 4f       	sbci	r23, 0xFF	; 255
     e98:	86 e0       	ldi	r24, 0x06	; 6
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	4d de       	rcall	.-870    	; 0xb38 <_ZL7readBufjPh>

        gNextPacketPtr  = header.nextPacket;
     e9e:	89 81       	ldd	r24, Y+1	; 0x01
     ea0:	9a 81       	ldd	r25, Y+2	; 0x02
     ea2:	90 93 8b 03 	sts	0x038B, r25	; 0x80038b <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr+0x1>
     ea6:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr>
        len = header.byteCount - 4; //remove the CRC count
        if (len>bufferSize-1)
            len=bufferSize-1;
        if ((header.status & 0x80)==0)
     eaa:	8d 81       	ldd	r24, Y+5	; 0x05
     eac:	87 ff       	sbrs	r24, 7
     eae:	12 c0       	rjmp	.+36     	; 0xed4 <_ZN8ENC28J6013packetReceiveEv+0x92>

        readBuf(sizeof header, (uint8_t*) &header);

        gNextPacketPtr  = header.nextPacket;
        len = header.byteCount - 4; //remove the CRC count
        if (len>bufferSize-1)
     eb0:	80 91 91 03 	lds	r24, 0x0391	; 0x800391 <_ZN8ENC28J6010bufferSizeE>
     eb4:	90 91 92 03 	lds	r25, 0x0392	; 0x800392 <_ZN8ENC28J6010bufferSizeE+0x1>
     eb8:	01 97       	sbiw	r24, 0x01	; 1
        } header;

        readBuf(sizeof header, (uint8_t*) &header);

        gNextPacketPtr  = header.nextPacket;
        len = header.byteCount - 4; //remove the CRC count
     eba:	0b 81       	ldd	r16, Y+3	; 0x03
     ebc:	1c 81       	ldd	r17, Y+4	; 0x04
     ebe:	04 50       	subi	r16, 0x04	; 4
     ec0:	11 09       	sbc	r17, r1
     ec2:	80 17       	cp	r24, r16
     ec4:	91 07       	cpc	r25, r17
     ec6:	08 f4       	brcc	.+2      	; 0xeca <_ZN8ENC28J6013packetReceiveEv+0x88>
        if (len>bufferSize-1)
            len=bufferSize-1;
        if ((header.status & 0x80)==0)
            len = 0;
        else
            readBuf(len, buffer);
     ec8:	8c 01       	movw	r16, r24
     eca:	63 e9       	ldi	r22, 0x93	; 147
     ecc:	73 e0       	ldi	r23, 0x03	; 3
     ece:	c8 01       	movw	r24, r16
     ed0:	33 de       	rcall	.-922    	; 0xb38 <_ZL7readBufjPh>
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <_ZN8ENC28J6013packetReceiveEv+0x96>
        gNextPacketPtr  = header.nextPacket;
        len = header.byteCount - 4; //remove the CRC count
        if (len>bufferSize-1)
            len=bufferSize-1;
        if ((header.status & 0x80)==0)
            len = 0;
     ed4:	00 e0       	ldi	r16, 0x00	; 0
     ed6:	10 e0       	ldi	r17, 0x00	; 0
        else
            readBuf(len, buffer);
        buffer[len] = 0;
     ed8:	f8 01       	movw	r30, r16
     eda:	ed 56       	subi	r30, 0x6D	; 109
     edc:	fc 4f       	sbci	r31, 0xFC	; 252
     ede:	10 82       	st	Z, r1
        unreleasedPacket = true;
     ee0:	81 e0       	ldi	r24, 0x01	; 1
     ee2:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <_ZZN8ENC28J6013packetReceiveEvE16unreleasedPacket>

        writeOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
     ee6:	40 e4       	ldi	r20, 0x40	; 64
     ee8:	6e e1       	ldi	r22, 0x1E	; 30
     eea:	80 e8       	ldi	r24, 0x80	; 128
     eec:	0d de       	rcall	.-998    	; 0xb08 <_ZL7writeOphhh>
     eee:	02 c0       	rjmp	.+4      	; 0xef4 <_ZN8ENC28J6013packetReceiveEv+0xb2>


uint16_t ENC28J60::packetReceive() {
    static uint16_t gNextPacketPtr = RXSTART_INIT;
    static bool     unreleasedPacket = false;
    uint16_t len = 0;
     ef0:	00 e0       	ldi	r16, 0x00	; 0
     ef2:	10 e0       	ldi	r17, 0x00	; 0
        unreleasedPacket = true;

        writeOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
    }
    return len;
}
     ef4:	c8 01       	movw	r24, r16
     ef6:	26 96       	adiw	r28, 0x06	; 6
     ef8:	0f b6       	in	r0, 0x3f	; 63
     efa:	f8 94       	cli
     efc:	de bf       	out	0x3e, r29	; 62
     efe:	0f be       	out	0x3f, r0	; 63
     f00:	cd bf       	out	0x3d, r28	; 61
     f02:	df 91       	pop	r29
     f04:	cf 91       	pop	r28
     f06:	1f 91       	pop	r17
     f08:	0f 91       	pop	r16
     f0a:	08 95       	ret

00000f0c <_ZN9EtherCard5beginEPKhRVhS3_h>:
uint16_t EtherCard::delaycnt = 0; //request gateway ARP lookup

uint8_t Ethernet::buffer[ETHER_CARD_BUFFER_SIZE]; // tcp/ip send and receive buffer

uint8_t EtherCard::begin (const uint8_t* macaddr,
                          Register& csDDR, Register& csPort, uint8_t csPin) {
     f0c:	ef 92       	push	r14
     f0e:	ff 92       	push	r15
     f10:	0f 93       	push	r16
     f12:	cf 93       	push	r28
     f14:	df 93       	push	r29
     f16:	eb 01       	movw	r28, r22
     f18:	7a 01       	movw	r14, r20
     f1a:	02 2f       	mov	r16, r18

    copyMac(mymac, macaddr);
     f1c:	bc 01       	movw	r22, r24
     f1e:	8d ea       	ldi	r24, 0xAD	; 173
     f20:	95 e0       	ldi	r25, 0x05	; 5
     f22:	c9 d3       	rcall	.+1938   	; 0x16b6 <_ZN9EtherCard7copyMacEPhPKh>
    return initialize(ETHER_CARD_BUFFER_SIZE, mymac, csDDR, csPort, csPin);
     f24:	97 01       	movw	r18, r14
     f26:	ae 01       	movw	r20, r28
     f28:	6d ea       	ldi	r22, 0xAD	; 173
     f2a:	75 e0       	ldi	r23, 0x05	; 5
     f2c:	80 e0       	ldi	r24, 0x00	; 0
     f2e:	92 e0       	ldi	r25, 0x02	; 2
     f30:	7c de       	rcall	.-776    	; 0xc2a <_ZN8ENC28J6010initializeEjPKhRVhS3_h>
}
     f32:	df 91       	pop	r29
     f34:	cf 91       	pop	r28
     f36:	0f 91       	pop	r16
     f38:	ff 90       	pop	r15
     f3a:	ef 90       	pop	r14
     f3c:	08 95       	ret

00000f3e <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_>:

bool EtherCard::staticSetup (const uint8_t* my_ip,
                             const uint8_t* gw_ip,
                             const uint8_t* dns_ip,
                             const uint8_t* mask) {
     f3e:	ef 92       	push	r14
     f40:	ff 92       	push	r15
     f42:	0f 93       	push	r16
     f44:	1f 93       	push	r17
     f46:	cf 93       	push	r28
     f48:	df 93       	push	r29
     f4a:	7b 01       	movw	r14, r22
     f4c:	8a 01       	movw	r16, r20
     f4e:	e9 01       	movw	r28, r18

    if (my_ip != 0)
     f50:	00 97       	sbiw	r24, 0x00	; 0
     f52:	21 f0       	breq	.+8      	; 0xf5c <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x1e>
        copyIp(myip, my_ip);
     f54:	bc 01       	movw	r22, r24
     f56:	89 ea       	ldi	r24, 0xA9	; 169
     f58:	95 e0       	ldi	r25, 0x05	; 5
     f5a:	a0 d3       	rcall	.+1856   	; 0x169c <_ZN9EtherCard6copyIpEPhPKh>
    if (gw_ip != 0)
     f5c:	e1 14       	cp	r14, r1
     f5e:	f1 04       	cpc	r15, r1
     f60:	11 f0       	breq	.+4      	; 0xf66 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x28>
        setGwIp(gw_ip);
     f62:	c7 01       	movw	r24, r14
     f64:	bd d1       	rcall	.+890    	; 0x12e0 <_ZN9EtherCard7setGwIpEPKh>
    if (dns_ip != 0)
     f66:	01 15       	cp	r16, r1
     f68:	11 05       	cpc	r17, r1
     f6a:	21 f0       	breq	.+8      	; 0xf74 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x36>
        copyIp(dnsip, dns_ip);
     f6c:	b8 01       	movw	r22, r16
     f6e:	89 e9       	ldi	r24, 0x99	; 153
     f70:	95 e0       	ldi	r25, 0x05	; 5
     f72:	94 d3       	rcall	.+1832   	; 0x169c <_ZN9EtherCard6copyIpEPhPKh>
    if(mask != 0)
     f74:	20 97       	sbiw	r28, 0x00	; 0
     f76:	21 f0       	breq	.+8      	; 0xf80 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x42>
        copyIp(netmask, mask);
     f78:	be 01       	movw	r22, r28
     f7a:	85 ea       	ldi	r24, 0xA5	; 165
     f7c:	95 e0       	ldi	r25, 0x05	; 5
    updateBroadcastAddress();
     f7e:	8e d3       	rcall	.+1820   	; 0x169c <_ZN9EtherCard6copyIpEPhPKh>
     f80:	bb d1       	rcall	.+886    	; 0x12f8 <_ZN9EtherCard22updateBroadcastAddressEv>
    delaycnt = 0; //request gateway ARP lookup
     f82:	10 92 94 05 	sts	0x0594, r1	; 0x800594 <_ZN9EtherCard8delaycntE+0x1>
     f86:	10 92 93 05 	sts	0x0593, r1	; 0x800593 <_ZN9EtherCard8delaycntE>
    return true;
}
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	df 91       	pop	r29
     f8e:	cf 91       	pop	r28
     f90:	1f 91       	pop	r17
     f92:	0f 91       	pop	r16
     f94:	ff 90       	pop	r15
     f96:	ef 90       	pop	r14
     f98:	08 95       	ret

00000f9a <_ZL13fill_checksumhhjh>:
    for(uint8_t i=0; i<IP_LEN; i++)
        broadcastip[i] = myip[i] | ~netmask[i];
}

void EtherCard::registerPingCallback (void (*callback)(uint8_t *srcip)) {
    icmp_cb = callback;
     f9a:	cf 92       	push	r12
     f9c:	df 92       	push	r13
     f9e:	ef 92       	push	r14
     fa0:	ff 92       	push	r15
     fa2:	cf 93       	push	r28
     fa4:	df 93       	push	r29
     fa6:	c6 2f       	mov	r28, r22
     fa8:	d0 e0       	ldi	r29, 0x00	; 0
     faa:	cd 56       	subi	r28, 0x6D	; 109
     fac:	dc 4f       	sbci	r29, 0xFC	; 252
     fae:	21 30       	cpi	r18, 0x01	; 1
     fb0:	81 f4       	brne	.+32     	; 0xfd2 <_ZL13fill_checksumhhjh+0x38>
     fb2:	6a 01       	movw	r12, r20
     fb4:	99 e0       	ldi	r25, 0x09	; 9
     fb6:	c9 0e       	add	r12, r25
     fb8:	d1 1c       	adc	r13, r1
     fba:	e1 2c       	mov	r14, r1
     fbc:	f1 2c       	mov	r15, r1
     fbe:	03 c0       	rjmp	.+6      	; 0xfc6 <_ZL13fill_checksumhhjh+0x2c>
     fc0:	c1 2c       	mov	r12, r1
     fc2:	d1 2c       	mov	r13, r1
     fc4:	76 01       	movw	r14, r12
     fc6:	42 30       	cpi	r20, 0x02	; 2
     fc8:	51 05       	cpc	r21, r1
     fca:	28 f1       	brcs	.+74     	; 0x1016 <_ZL13fill_checksumhhjh+0x7c>
     fcc:	fe 01       	movw	r30, r28
     fce:	da 01       	movw	r26, r20
     fd0:	09 c0       	rjmp	.+18     	; 0xfe4 <_ZL13fill_checksumhhjh+0x4a>
     fd2:	22 30       	cpi	r18, 0x02	; 2
     fd4:	a9 f7       	brne	.-22     	; 0xfc0 <_ZL13fill_checksumhhjh+0x26>
     fd6:	6a 01       	movw	r12, r20
     fd8:	92 e0       	ldi	r25, 0x02	; 2
     fda:	c9 1a       	sub	r12, r25
     fdc:	d1 08       	sbc	r13, r1
     fde:	e1 2c       	mov	r14, r1
     fe0:	f1 2c       	mov	r15, r1
     fe2:	f1 cf       	rjmp	.-30     	; 0xfc6 <_ZL13fill_checksumhhjh+0x2c>
     fe4:	20 81       	ld	r18, Z
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	32 2f       	mov	r19, r18
     fea:	22 27       	eor	r18, r18
     fec:	91 81       	ldd	r25, Z+1	; 0x01
     fee:	29 2b       	or	r18, r25
     ff0:	c2 0e       	add	r12, r18
     ff2:	d3 1e       	adc	r13, r19
     ff4:	e1 1c       	adc	r14, r1
     ff6:	f1 1c       	adc	r15, r1
     ff8:	32 96       	adiw	r30, 0x02	; 2
     ffa:	12 97       	sbiw	r26, 0x02	; 2
     ffc:	a2 30       	cpi	r26, 0x02	; 2
     ffe:	b1 05       	cpc	r27, r1
    1000:	88 f7       	brcc	.-30     	; 0xfe4 <_ZL13fill_checksumhhjh+0x4a>
    1002:	9a 01       	movw	r18, r20
    1004:	22 50       	subi	r18, 0x02	; 2
    1006:	31 09       	sbc	r19, r1
    1008:	2e 7f       	andi	r18, 0xFE	; 254
    100a:	2e 5f       	subi	r18, 0xFE	; 254
    100c:	3f 4f       	sbci	r19, 0xFF	; 255
    100e:	c2 0f       	add	r28, r18
    1010:	d3 1f       	adc	r29, r19
    1012:	41 70       	andi	r20, 0x01	; 1
    1014:	55 27       	eor	r21, r21
    1016:	45 2b       	or	r20, r21
    1018:	61 f0       	breq	.+24     	; 0x1032 <_ZL13fill_checksumhhjh+0x98>
    101a:	48 81       	ld	r20, Y
    101c:	50 e0       	ldi	r21, 0x00	; 0
    101e:	60 e0       	ldi	r22, 0x00	; 0
    1020:	70 e0       	ldi	r23, 0x00	; 0
    1022:	76 2f       	mov	r23, r22
    1024:	65 2f       	mov	r22, r21
    1026:	54 2f       	mov	r21, r20
    1028:	44 27       	eor	r20, r20
    102a:	c4 0e       	add	r12, r20
    102c:	d5 1e       	adc	r13, r21
    102e:	e6 1e       	adc	r14, r22
    1030:	f7 1e       	adc	r15, r23
    1032:	a7 01       	movw	r20, r14
    1034:	66 27       	eor	r22, r22
    1036:	77 27       	eor	r23, r23
    1038:	41 15       	cp	r20, r1
    103a:	51 05       	cpc	r21, r1
    103c:	61 05       	cpc	r22, r1
    103e:	71 05       	cpc	r23, r1
    1040:	71 f0       	breq	.+28     	; 0x105e <_ZL13fill_checksumhhjh+0xc4>
    1042:	ee 24       	eor	r14, r14
    1044:	ff 24       	eor	r15, r15
    1046:	c4 0e       	add	r12, r20
    1048:	d5 1e       	adc	r13, r21
    104a:	e6 1e       	adc	r14, r22
    104c:	f7 1e       	adc	r15, r23
    104e:	a7 01       	movw	r20, r14
    1050:	66 27       	eor	r22, r22
    1052:	77 27       	eor	r23, r23
    1054:	41 15       	cp	r20, r1
    1056:	51 05       	cpc	r21, r1
    1058:	61 05       	cpc	r22, r1
    105a:	71 05       	cpc	r23, r1
    105c:	91 f7       	brne	.-28     	; 0x1042 <_ZL13fill_checksumhhjh+0xa8>
    105e:	c0 94       	com	r12
    1060:	d0 94       	com	r13
    1062:	e8 2f       	mov	r30, r24
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	ed 56       	subi	r30, 0x6D	; 109
    1068:	fc 4f       	sbci	r31, 0xFC	; 252
    106a:	d0 82       	st	Z, r13
    106c:	c1 82       	std	Z+1, r12	; 0x01
    106e:	df 91       	pop	r29
    1070:	cf 91       	pop	r28
    1072:	ff 90       	pop	r15
    1074:	ef 90       	pop	r14
    1076:	df 90       	pop	r13
    1078:	cf 90       	pop	r12
    107a:	08 95       	ret

0000107c <_ZL6is_lanPKhS0_>:
    107c:	cf 93       	push	r28
    107e:	df 93       	push	r29
    1080:	fc 01       	movw	r30, r24
    1082:	20 81       	ld	r18, Z
    1084:	22 23       	and	r18, r18
    1086:	d1 f0       	breq	.+52     	; 0x10bc <_ZL6is_lanPKhS0_+0x40>
    1088:	fb 01       	movw	r30, r22
    108a:	30 81       	ld	r19, Z
    108c:	33 23       	and	r19, r19
    108e:	c1 f0       	breq	.+48     	; 0x10c0 <_ZL6is_lanPKhS0_+0x44>
    1090:	23 27       	eor	r18, r19
    1092:	30 91 a5 05 	lds	r19, 0x05A5	; 0x8005a5 <_ZN9EtherCard7netmaskE>
    1096:	23 23       	and	r18, r19
    1098:	a9 f4       	brne	.+42     	; 0x10c4 <_ZL6is_lanPKhS0_+0x48>
    109a:	dc 01       	movw	r26, r24
    109c:	11 96       	adiw	r26, 0x01	; 1
    109e:	31 96       	adiw	r30, 0x01	; 1
    10a0:	c6 ea       	ldi	r28, 0xA6	; 166
    10a2:	d5 e0       	ldi	r29, 0x05	; 5
    10a4:	04 96       	adiw	r24, 0x04	; 4
    10a6:	4d 91       	ld	r20, X+
    10a8:	21 91       	ld	r18, Z+
    10aa:	39 91       	ld	r19, Y+
    10ac:	24 27       	eor	r18, r20
    10ae:	23 23       	and	r18, r19
    10b0:	59 f4       	brne	.+22     	; 0x10c8 <_ZL6is_lanPKhS0_+0x4c>
    10b2:	a8 17       	cp	r26, r24
    10b4:	b9 07       	cpc	r27, r25
    10b6:	b9 f7       	brne	.-18     	; 0x10a6 <_ZL6is_lanPKhS0_+0x2a>
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	07 c0       	rjmp	.+14     	; 0x10ca <_ZL6is_lanPKhS0_+0x4e>
    10bc:	80 e0       	ldi	r24, 0x00	; 0
    10be:	05 c0       	rjmp	.+10     	; 0x10ca <_ZL6is_lanPKhS0_+0x4e>
    10c0:	80 e0       	ldi	r24, 0x00	; 0
    10c2:	03 c0       	rjmp	.+6      	; 0x10ca <_ZL6is_lanPKhS0_+0x4e>
    10c4:	80 e0       	ldi	r24, 0x00	; 0
    10c6:	01 c0       	rjmp	.+2      	; 0x10ca <_ZL6is_lanPKhS0_+0x4e>
    10c8:	80 e0       	ldi	r24, 0x00	; 0
    10ca:	df 91       	pop	r29
    10cc:	cf 91       	pop	r28
    10ce:	08 95       	ret

000010d0 <_ZL20fill_ip_hdr_checksumv>:
    10d0:	e3 e9       	ldi	r30, 0x93	; 147
    10d2:	f3 e0       	ldi	r31, 0x03	; 3
    10d4:	10 8e       	std	Z+24, r1	; 0x18
    10d6:	11 8e       	std	Z+25, r1	; 0x19
    10d8:	80 e4       	ldi	r24, 0x40	; 64
    10da:	84 8b       	std	Z+20, r24	; 0x14
    10dc:	15 8a       	std	Z+21, r1	; 0x15
    10de:	86 8b       	std	Z+22, r24	; 0x16
    10e0:	20 e0       	ldi	r18, 0x00	; 0
    10e2:	44 e1       	ldi	r20, 0x14	; 20
    10e4:	50 e0       	ldi	r21, 0x00	; 0
    10e6:	6e e0       	ldi	r22, 0x0E	; 14
    10e8:	88 e1       	ldi	r24, 0x18	; 24
    10ea:	57 cf       	rjmp	.-338    	; 0xf9a <_ZL13fill_checksumhhjh>
    10ec:	08 95       	ret

000010ee <_ZL7setMACsPKh>:
    10ee:	bc 01       	movw	r22, r24
    10f0:	83 e9       	ldi	r24, 0x93	; 147
    10f2:	93 e0       	ldi	r25, 0x03	; 3
    10f4:	e0 d2       	rcall	.+1472   	; 0x16b6 <_ZN9EtherCard7copyMacEPhPKh>
    10f6:	6d ea       	ldi	r22, 0xAD	; 173
    10f8:	75 e0       	ldi	r23, 0x05	; 5
    10fa:	89 e9       	ldi	r24, 0x99	; 153
    10fc:	93 e0       	ldi	r25, 0x03	; 3
    10fe:	db c2       	rjmp	.+1462   	; 0x16b6 <_ZN9EtherCard7copyMacEPhPKh>
    1100:	08 95       	ret

00001102 <_ZL11make_eth_ipv>:
    1102:	89 e9       	ldi	r24, 0x99	; 153
    1104:	93 e0       	ldi	r25, 0x03	; 3
    1106:	f3 df       	rcall	.-26     	; 0x10ee <_ZL7setMACsPKh>
    1108:	6d ea       	ldi	r22, 0xAD	; 173
    110a:	73 e0       	ldi	r23, 0x03	; 3
    110c:	81 eb       	ldi	r24, 0xB1	; 177
    110e:	93 e0       	ldi	r25, 0x03	; 3
    1110:	c5 d2       	rcall	.+1418   	; 0x169c <_ZN9EtherCard6copyIpEPhPKh>
    1112:	69 ea       	ldi	r22, 0xA9	; 169
    1114:	75 e0       	ldi	r23, 0x05	; 5
    1116:	8d ea       	ldi	r24, 0xAD	; 173
    1118:	93 e0       	ldi	r25, 0x03	; 3
    111a:	c0 d2       	rcall	.+1408   	; 0x169c <_ZN9EtherCard6copyIpEPhPKh>
    111c:	d9 cf       	rjmp	.-78     	; 0x10d0 <_ZL20fill_ip_hdr_checksumv>
    111e:	08 95       	ret

00001120 <_ZL12setMACandIPsPKhS0_>:
    1120:	cf 93       	push	r28
    1122:	df 93       	push	r29
    1124:	eb 01       	movw	r28, r22
    1126:	e3 df       	rcall	.-58     	; 0x10ee <_ZL7setMACsPKh>
    1128:	be 01       	movw	r22, r28
    112a:	81 eb       	ldi	r24, 0xB1	; 177
    112c:	93 e0       	ldi	r25, 0x03	; 3
    112e:	b6 d2       	rcall	.+1388   	; 0x169c <_ZN9EtherCard6copyIpEPhPKh>
    1130:	69 ea       	ldi	r22, 0xA9	; 169
    1132:	75 e0       	ldi	r23, 0x05	; 5
    1134:	8d ea       	ldi	r24, 0xAD	; 173
    1136:	93 e0       	ldi	r25, 0x03	; 3
    1138:	b1 d2       	rcall	.+1378   	; 0x169c <_ZN9EtherCard6copyIpEPhPKh>
    113a:	df 91       	pop	r29
    113c:	cf 91       	pop	r28
    113e:	08 95       	ret

00001140 <_ZL16client_store_macPhS_>:
    1140:	cf 93       	push	r28
    1142:	df 93       	push	r29
    1144:	eb 01       	movw	r28, r22
    1146:	44 e0       	ldi	r20, 0x04	; 4
    1148:	50 e0       	ldi	r21, 0x00	; 0
    114a:	bc 01       	movw	r22, r24
    114c:	8f ea       	ldi	r24, 0xAF	; 175
    114e:	93 e0       	ldi	r25, 0x03	; 3
    1150:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <memcmp>
    1154:	89 2b       	or	r24, r25
    1156:	31 f4       	brne	.+12     	; 0x1164 <_ZL16client_store_macPhS_+0x24>
    1158:	69 ea       	ldi	r22, 0xA9	; 169
    115a:	73 e0       	ldi	r23, 0x03	; 3
    115c:	ce 01       	movw	r24, r28
    115e:	ab d2       	rcall	.+1366   	; 0x16b6 <_ZN9EtherCard7copyMacEPhPKh>
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	01 c0       	rjmp	.+2      	; 0x1166 <_ZL16client_store_macPhS_+0x26>
    1164:	80 e0       	ldi	r24, 0x00	; 0
    1166:	df 91       	pop	r29
    1168:	cf 91       	pop	r28
    116a:	08 95       	ret

0000116c <_ZL17client_arp_whohasPh>:
    116c:	0f 93       	push	r16
    116e:	1f 93       	push	r17
    1170:	cf 93       	push	r28
    1172:	8c 01       	movw	r16, r24
    1174:	85 e2       	ldi	r24, 0x25	; 37
    1176:	92 e0       	ldi	r25, 0x02	; 2
    1178:	ba df       	rcall	.-140    	; 0x10ee <_ZL7setMACsPKh>
    117a:	e3 e9       	ldi	r30, 0x93	; 147
    117c:	f3 e0       	ldi	r31, 0x03	; 3
    117e:	88 e0       	ldi	r24, 0x08	; 8
    1180:	84 87       	std	Z+12, r24	; 0x0c
    1182:	c6 e0       	ldi	r28, 0x06	; 6
    1184:	c5 87       	std	Z+13, r28	; 0x0d
    1186:	48 e0       	ldi	r20, 0x08	; 8
    1188:	50 e0       	ldi	r21, 0x00	; 0
    118a:	67 ec       	ldi	r22, 0xC7	; 199
    118c:	72 e0       	ldi	r23, 0x02	; 2
    118e:	81 ea       	ldi	r24, 0xA1	; 161
    1190:	93 e0       	ldi	r25, 0x03	; 3
    1192:	0e 94 25 26 	call	0x4c4a	; 0x4c4a <memcpy_P>
    1196:	e3 eb       	ldi	r30, 0xB3	; 179
    1198:	f3 e0       	ldi	r31, 0x03	; 3
    119a:	df 01       	movw	r26, r30
    119c:	1d 92       	st	X+, r1
    119e:	ca 95       	dec	r28
    11a0:	e9 f7       	brne	.-6      	; 0x119c <_ZL17client_arp_whohasPh+0x30>
    11a2:	6d ea       	ldi	r22, 0xAD	; 173
    11a4:	75 e0       	ldi	r23, 0x05	; 5
    11a6:	89 ea       	ldi	r24, 0xA9	; 169
    11a8:	93 e0       	ldi	r25, 0x03	; 3
    11aa:	85 d2       	rcall	.+1290   	; 0x16b6 <_ZN9EtherCard7copyMacEPhPKh>
    11ac:	b8 01       	movw	r22, r16
    11ae:	89 eb       	ldi	r24, 0xB9	; 185
    11b0:	93 e0       	ldi	r25, 0x03	; 3
    11b2:	74 d2       	rcall	.+1256   	; 0x169c <_ZN9EtherCard6copyIpEPhPKh>
    11b4:	69 ea       	ldi	r22, 0xA9	; 169
    11b6:	75 e0       	ldi	r23, 0x05	; 5
    11b8:	8f ea       	ldi	r24, 0xAF	; 175
    11ba:	93 e0       	ldi	r25, 0x03	; 3
    11bc:	6f d2       	rcall	.+1246   	; 0x169c <_ZN9EtherCard6copyIpEPhPKh>
    11be:	8a e2       	ldi	r24, 0x2A	; 42
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	c6 dd       	rcall	.-1140   	; 0xd50 <_ZN8ENC28J6010packetSendEj>
    11c4:	cf 91       	pop	r28
    11c6:	1f 91       	pop	r17
    11c8:	0f 91       	pop	r16
    11ca:	08 95       	ret

000011cc <_ZN9EtherCard10udpPrepareEjPKhj>:
    11cc:	ef 92       	push	r14
    11ce:	ff 92       	push	r15
    11d0:	0f 93       	push	r16
    11d2:	1f 93       	push	r17
    11d4:	cf 93       	push	r28
    11d6:	df 93       	push	r29
    11d8:	18 2f       	mov	r17, r24
    11da:	09 2f       	mov	r16, r25
    11dc:	eb 01       	movw	r28, r22
    11de:	f4 2e       	mov	r15, r20
    11e0:	e5 2e       	mov	r14, r21
    11e2:	89 ea       	ldi	r24, 0xA9	; 169
    11e4:	95 e0       	ldi	r25, 0x05	; 5
    11e6:	4a df       	rcall	.-364    	; 0x107c <_ZL6is_lanPKhS0_>
    11e8:	88 23       	and	r24, r24
    11ea:	29 f0       	breq	.+10     	; 0x11f6 <_ZN9EtherCard10udpPrepareEjPKhj+0x2a>
    11ec:	be 01       	movw	r22, r28
    11ee:	8e eb       	ldi	r24, 0xBE	; 190
    11f0:	95 e0       	ldi	r25, 0x05	; 5
    11f2:	96 df       	rcall	.-212    	; 0x1120 <_ZL12setMACandIPsPKhS0_>
    11f4:	04 c0       	rjmp	.+8      	; 0x11fe <_ZN9EtherCard10udpPrepareEjPKhj+0x32>
    11f6:	be 01       	movw	r22, r28
    11f8:	84 eb       	ldi	r24, 0xB4	; 180
    11fa:	95 e0       	ldi	r25, 0x05	; 5
    11fc:	91 df       	rcall	.-222    	; 0x1120 <_ZL12setMACandIPsPKhS0_>
    11fe:	88 81       	ld	r24, Y
    1200:	80 7f       	andi	r24, 0xF0	; 240
    1202:	80 3e       	cpi	r24, 0xE0	; 224
    1204:	91 f0       	breq	.+36     	; 0x122a <_ZN9EtherCard10udpPrepareEjPKhj+0x5e>
    1206:	88 81       	ld	r24, Y
    1208:	99 81       	ldd	r25, Y+1	; 0x01
    120a:	aa 81       	ldd	r26, Y+2	; 0x02
    120c:	bb 81       	ldd	r27, Y+3	; 0x03
    120e:	8f 3f       	cpi	r24, 0xFF	; 255
    1210:	9f 4f       	sbci	r25, 0xFF	; 255
    1212:	af 4f       	sbci	r26, 0xFF	; 255
    1214:	bf 4f       	sbci	r27, 0xFF	; 255
    1216:	49 f0       	breq	.+18     	; 0x122a <_ZN9EtherCard10udpPrepareEjPKhj+0x5e>
    1218:	44 e0       	ldi	r20, 0x04	; 4
    121a:	50 e0       	ldi	r21, 0x00	; 0
    121c:	be 01       	movw	r22, r28
    121e:	81 ea       	ldi	r24, 0xA1	; 161
    1220:	95 e0       	ldi	r25, 0x05	; 5
    1222:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <memcmp>
    1226:	89 2b       	or	r24, r25
    1228:	29 f4       	brne	.+10     	; 0x1234 <_ZN9EtherCard10udpPrepareEjPKhj+0x68>
    122a:	65 e2       	ldi	r22, 0x25	; 37
    122c:	72 e0       	ldi	r23, 0x02	; 2
    122e:	83 e9       	ldi	r24, 0x93	; 147
    1230:	93 e0       	ldi	r25, 0x03	; 3
    1232:	41 d2       	rcall	.+1154   	; 0x16b6 <_ZN9EtherCard7copyMacEPhPKh>
    1234:	c3 e9       	ldi	r28, 0x93	; 147
    1236:	d3 e0       	ldi	r29, 0x03	; 3
    1238:	88 e0       	ldi	r24, 0x08	; 8
    123a:	8c 87       	std	Y+12, r24	; 0x0c
    123c:	1d 86       	std	Y+13, r1	; 0x0d
    123e:	49 e0       	ldi	r20, 0x09	; 9
    1240:	50 e0       	ldi	r21, 0x00	; 0
    1242:	6e eb       	ldi	r22, 0xBE	; 190
    1244:	72 e0       	ldi	r23, 0x02	; 2
    1246:	81 ea       	ldi	r24, 0xA1	; 161
    1248:	93 e0       	ldi	r25, 0x03	; 3
    124a:	0e 94 25 26 	call	0x4c4a	; 0x4c4a <memcpy_P>
    124e:	18 8a       	std	Y+16, r1	; 0x10
    1250:	81 e1       	ldi	r24, 0x11	; 17
    1252:	8f 8b       	std	Y+23, r24	; 0x17
    1254:	ec a2       	std	Y+36, r14	; 0x24
    1256:	fd a2       	std	Y+37, r15	; 0x25
    1258:	0a a3       	std	Y+34, r16	; 0x22
    125a:	1b a3       	std	Y+35, r17	; 0x23
    125c:	1e a2       	std	Y+38, r1	; 0x26
    125e:	18 a6       	std	Y+40, r1	; 0x28
    1260:	19 a6       	std	Y+41, r1	; 0x29
    1262:	df 91       	pop	r29
    1264:	cf 91       	pop	r28
    1266:	1f 91       	pop	r17
    1268:	0f 91       	pop	r16
    126a:	ff 90       	pop	r15
    126c:	ef 90       	pop	r14
    126e:	08 95       	ret

00001270 <_ZN9EtherCard11udpTransmitEj>:
    1270:	0f 93       	push	r16
    1272:	1f 93       	push	r17
    1274:	cf 93       	push	r28
    1276:	df 93       	push	r29
    1278:	ec 01       	movw	r28, r24
    127a:	03 e9       	ldi	r16, 0x93	; 147
    127c:	13 e0       	ldi	r17, 0x03	; 3
    127e:	4c 96       	adiw	r24, 0x1c	; 28
    1280:	f8 01       	movw	r30, r16
    1282:	90 8b       	std	Z+16, r25	; 0x10
    1284:	81 8b       	std	Z+17, r24	; 0x11
    1286:	24 df       	rcall	.-440    	; 0x10d0 <_ZL20fill_ip_hdr_checksumv>
    1288:	ce 01       	movw	r24, r28
    128a:	08 96       	adiw	r24, 0x08	; 8
    128c:	f8 01       	movw	r30, r16
    128e:	96 a3       	std	Z+38, r25	; 0x26
    1290:	87 a3       	std	Z+39, r24	; 0x27
    1292:	ae 01       	movw	r20, r28
    1294:	40 5f       	subi	r20, 0xF0	; 240
    1296:	5f 4f       	sbci	r21, 0xFF	; 255
    1298:	21 e0       	ldi	r18, 0x01	; 1
    129a:	6a e1       	ldi	r22, 0x1A	; 26
    129c:	88 e2       	ldi	r24, 0x28	; 40
    129e:	7d de       	rcall	.-774    	; 0xf9a <_ZL13fill_checksumhhjh>
    12a0:	ce 01       	movw	r24, r28
    12a2:	8a 96       	adiw	r24, 0x2a	; 42
    12a4:	55 dd       	rcall	.-1366   	; 0xd50 <_ZN8ENC28J6010packetSendEj>
    12a6:	df 91       	pop	r29
    12a8:	cf 91       	pop	r28
    12aa:	1f 91       	pop	r17
    12ac:	0f 91       	pop	r16
    12ae:	08 95       	ret

000012b0 <_ZN9EtherCard7sendUdpEPKhjjS1_j>:
    12b0:	0f 93       	push	r16
    12b2:	1f 93       	push	r17
    12b4:	cf 93       	push	r28
    12b6:	df 93       	push	r29
    12b8:	d6 2f       	mov	r29, r22
    12ba:	c7 2f       	mov	r28, r23
    12bc:	ca 01       	movw	r24, r20
    12be:	a8 01       	movw	r20, r16
    12c0:	b9 01       	movw	r22, r18
    12c2:	84 df       	rcall	.-248    	; 0x11cc <_ZN9EtherCard10udpPrepareEjPKhj>
    12c4:	8d 2f       	mov	r24, r29
    12c6:	9c 2f       	mov	r25, r28
    12c8:	81 30       	cpi	r24, 0x01	; 1
    12ca:	22 e0       	ldi	r18, 0x02	; 2
    12cc:	92 07       	cpc	r25, r18
    12ce:	10 f0       	brcs	.+4      	; 0x12d4 <_ZN9EtherCard7sendUdpEPKhjjS1_j+0x24>
    12d0:	80 e0       	ldi	r24, 0x00	; 0
    12d2:	92 e0       	ldi	r25, 0x02	; 2
    12d4:	cd df       	rcall	.-102    	; 0x1270 <_ZN9EtherCard11udpTransmitEj>
    12d6:	df 91       	pop	r29
    12d8:	cf 91       	pop	r28
    12da:	1f 91       	pop	r17
    12dc:	0f 91       	pop	r16
    12de:	08 95       	ret

000012e0 <_ZN9EtherCard7setGwIpEPKh>:
    12e0:	10 92 94 05 	sts	0x0594, r1	; 0x800594 <_ZN9EtherCard8delaycntE+0x1>
    12e4:	10 92 93 05 	sts	0x0593, r1	; 0x800593 <_ZN9EtherCard8delaycntE>
    12e8:	21 e0       	ldi	r18, 0x01	; 1
    12ea:	20 93 b3 05 	sts	0x05B3, r18	; 0x8005b3 <_ZL9waitgwmac>
    12ee:	bc 01       	movw	r22, r24
    12f0:	8d e9       	ldi	r24, 0x9D	; 157
    12f2:	95 e0       	ldi	r25, 0x05	; 5
    12f4:	d3 c1       	rjmp	.+934    	; 0x169c <_ZN9EtherCard6copyIpEPhPKh>
    12f6:	08 95       	ret

000012f8 <_ZN9EtherCard22updateBroadcastAddressEv>:
    12f8:	cf 93       	push	r28
    12fa:	df 93       	push	r29
    12fc:	e9 ea       	ldi	r30, 0xA9	; 169
    12fe:	f5 e0       	ldi	r31, 0x05	; 5
    1300:	c5 ea       	ldi	r28, 0xA5	; 165
    1302:	d5 e0       	ldi	r29, 0x05	; 5
    1304:	a1 ea       	ldi	r26, 0xA1	; 161
    1306:	b5 e0       	ldi	r27, 0x05	; 5
    1308:	2d ea       	ldi	r18, 0xAD	; 173
    130a:	35 e0       	ldi	r19, 0x05	; 5
    130c:	91 91       	ld	r25, Z+
    130e:	89 91       	ld	r24, Y+
    1310:	80 95       	com	r24
    1312:	89 2b       	or	r24, r25
    1314:	8d 93       	st	X+, r24
    1316:	e2 17       	cp	r30, r18
    1318:	f3 07       	cpc	r31, r19
    131a:	c1 f7       	brne	.-16     	; 0x130c <_ZN9EtherCard22updateBroadcastAddressEv+0x14>
    131c:	df 91       	pop	r29
    131e:	cf 91       	pop	r28
    1320:	08 95       	ret

00001322 <_ZN9EtherCard10packetLoopEj>:
	gPB[ICMP_CHECKSUM_P+1]++;
	gPB[ICMP_CHECKSUM_P] += 0x08;
	EtherCard::packetSend(len);
}

uint16_t EtherCard::packetLoop (uint16_t plen) {
    1322:	cf 93       	push	r28
    1324:	df 93       	push	r29
    1326:	ec 01       	movw	r28, r24
    if (plen==0) {
    1328:	00 97       	sbiw	r24, 0x00	; 0
    132a:	09 f0       	breq	.+2      	; 0x132e <_ZN9EtherCard10packetLoopEj+0xc>
    132c:	3f c0       	rjmp	.+126    	; 0x13ac <_ZN9EtherCard10packetLoopEj+0x8a>
        //Check every 65536 (no-packet) cycles whether we need to retry ARP request for gateway
        if ((waitgwmac & WGW_INITIAL_ARP || waitgwmac & WGW_REFRESHING) &&
    132e:	80 91 b3 05 	lds	r24, 0x05B3	; 0x8005b3 <_ZL9waitgwmac>
    1332:	85 70       	andi	r24, 0x05	; 5
    1334:	89 f0       	breq	.+34     	; 0x1358 <_ZN9EtherCard10packetLoopEj+0x36>
    1336:	80 91 93 05 	lds	r24, 0x0593	; 0x800593 <_ZN9EtherCard8delaycntE>
    133a:	90 91 94 05 	lds	r25, 0x0594	; 0x800594 <_ZN9EtherCard8delaycntE+0x1>
    133e:	89 2b       	or	r24, r25
    1340:	59 f4       	brne	.+22     	; 0x1358 <_ZN9EtherCard10packetLoopEj+0x36>
                delaycnt==0 && isLinkUp()) {
    1342:	f3 dc       	rcall	.-1562   	; 0xd2a <_ZN8ENC28J608isLinkUpEv>
}

uint16_t EtherCard::packetLoop (uint16_t plen) {
    if (plen==0) {
        //Check every 65536 (no-packet) cycles whether we need to retry ARP request for gateway
        if ((waitgwmac & WGW_INITIAL_ARP || waitgwmac & WGW_REFRESHING) &&
    1344:	88 23       	and	r24, r24
    1346:	41 f0       	breq	.+16     	; 0x1358 <_ZN9EtherCard10packetLoopEj+0x36>
                delaycnt==0 && isLinkUp()) {
            client_arp_whohas(gwip);
    1348:	8d e9       	ldi	r24, 0x9D	; 157
    134a:	95 e0       	ldi	r25, 0x05	; 5
    134c:	0f df       	rcall	.-482    	; 0x116c <_ZL17client_arp_whohasPh>
            waitgwmac |= WGW_ACCEPT_ARP_REPLY;
    134e:	80 91 b3 05 	lds	r24, 0x05B3	; 0x8005b3 <_ZL9waitgwmac>
    1352:	88 60       	ori	r24, 0x08	; 8
    1354:	80 93 b3 05 	sts	0x05B3, r24	; 0x8005b3 <_ZL9waitgwmac>
        }
        delaycnt++;
    1358:	80 91 93 05 	lds	r24, 0x0593	; 0x800593 <_ZN9EtherCard8delaycntE>
    135c:	90 91 94 05 	lds	r25, 0x0594	; 0x800594 <_ZN9EtherCard8delaycntE+0x1>
    1360:	01 96       	adiw	r24, 0x01	; 1
    1362:	90 93 94 05 	sts	0x0594, r25	; 0x800594 <_ZN9EtherCard8delaycntE+0x1>
    1366:	80 93 93 05 	sts	0x0593, r24	; 0x800593 <_ZN9EtherCard8delaycntE>

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, dnsip) && !has_dns_mac && !waiting_for_dns_mac) {
    136a:	69 e9       	ldi	r22, 0x99	; 153
    136c:	75 e0       	ldi	r23, 0x05	; 5
    136e:	89 ea       	ldi	r24, 0xA9	; 169
    1370:	95 e0       	ldi	r25, 0x05	; 5
    1372:	84 de       	rcall	.-760    	; 0x107c <_ZL6is_lanPKhS0_>
    1374:	88 23       	and	r24, r24
    1376:	49 f0       	breq	.+18     	; 0x138a <_ZN9EtherCard10packetLoopEj+0x68>
    1378:	80 91 bc 05 	lds	r24, 0x05BC	; 0x8005bc <_ZL11has_dns_mac>
    137c:	81 11       	cpse	r24, r1
    137e:	05 c0       	rjmp	.+10     	; 0x138a <_ZN9EtherCard10packetLoopEj+0x68>
    1380:	80 91 bd 05 	lds	r24, 0x05BD	; 0x8005bd <_ZL19waiting_for_dns_mac>
    1384:	88 23       	and	r24, r24
    1386:	09 f4       	brne	.+2      	; 0x138a <_ZN9EtherCard10packetLoopEj+0x68>
    1388:	dc c0       	rjmp	.+440    	; 0x1542 <_ZN9EtherCard10packetLoopEj+0x220>
            client_arp_whohas(dnsip);
            waiting_for_dns_mac = true;
        }

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, hisip) && !has_dest_mac && !waiting_for_dest_mac) {
    138a:	65 e9       	ldi	r22, 0x95	; 149
    138c:	75 e0       	ldi	r23, 0x05	; 5
    138e:	89 ea       	ldi	r24, 0xA9	; 169
    1390:	95 e0       	ldi	r25, 0x05	; 5
    1392:	74 de       	rcall	.-792    	; 0x107c <_ZL6is_lanPKhS0_>
    1394:	88 23       	and	r24, r24
    1396:	09 f4       	brne	.+2      	; 0x139a <_ZN9EtherCard10packetLoopEj+0x78>
    1398:	f8 c0       	rjmp	.+496    	; 0x158a <_ZN9EtherCard10packetLoopEj+0x268>
    139a:	80 91 ba 05 	lds	r24, 0x05BA	; 0x8005ba <_ZL12has_dest_mac>
    139e:	81 11       	cpse	r24, r1
    13a0:	f4 c0       	rjmp	.+488    	; 0x158a <_ZN9EtherCard10packetLoopEj+0x268>
    13a2:	80 91 bb 05 	lds	r24, 0x05BB	; 0x8005bb <_ZL20waiting_for_dest_mac>
    13a6:	81 11       	cpse	r24, r1
    13a8:	f0 c0       	rjmp	.+480    	; 0x158a <_ZN9EtherCard10packetLoopEj+0x268>
    13aa:	d2 c0       	rjmp	.+420    	; 0x1550 <_ZN9EtherCard10packetLoopEj+0x22e>
    return true;
}

static uint8_t eth_type_is_arp_and_my_ip(uint16_t len) {
    return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
    13ac:	89 32       	cpi	r24, 0x29	; 41
    13ae:	91 05       	cpc	r25, r1
    13b0:	08 f4       	brcc	.+2      	; 0x13b4 <_ZN9EtherCard10packetLoopEj+0x92>
    13b2:	d5 c0       	rjmp	.+426    	; 0x155e <_ZN9EtherCard10packetLoopEj+0x23c>
        }
    return true;
}

static uint8_t eth_type_is_arp_and_my_ip(uint16_t len) {
    return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
    13b4:	80 91 9f 03 	lds	r24, 0x039F	; 0x80039f <_ZN8ENC28J606bufferE+0xc>
    13b8:	88 30       	cpi	r24, 0x08	; 8
    13ba:	09 f0       	breq	.+2      	; 0x13be <_ZN9EtherCard10packetLoopEj+0x9c>
    13bc:	e6 c0       	rjmp	.+460    	; 0x158a <_ZN9EtherCard10packetLoopEj+0x268>
    13be:	80 91 a0 03 	lds	r24, 0x03A0	; 0x8003a0 <_ZN8ENC28J606bufferE+0xd>
    13c2:	86 30       	cpi	r24, 0x06	; 6
    13c4:	09 f0       	breq	.+2      	; 0x13c8 <_ZN9EtherCard10packetLoopEj+0xa6>
    13c6:	dd c0       	rjmp	.+442    	; 0x1582 <_ZN9EtherCard10packetLoopEj+0x260>
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
           memcmp(gPB + ETH_ARP_DST_IP_P, EtherCard::myip, IP_LEN) == 0;
    13c8:	44 e0       	ldi	r20, 0x04	; 4
    13ca:	50 e0       	ldi	r21, 0x00	; 0
    13cc:	69 ea       	ldi	r22, 0xA9	; 169
    13ce:	75 e0       	ldi	r23, 0x05	; 5
    13d0:	89 eb       	ldi	r24, 0xB9	; 185
    13d2:	93 e0       	ldi	r25, 0x03	; 3
    13d4:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <memcmp>
    return true;
}

static uint8_t eth_type_is_arp_and_my_ip(uint16_t len) {
    return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
    13d8:	89 2b       	or	r24, r25
    13da:	09 f0       	breq	.+2      	; 0x13de <_ZN9EtherCard10packetLoopEj+0xbc>
    13dc:	d2 c0       	rjmp	.+420    	; 0x1582 <_ZN9EtherCard10packetLoopEj+0x260>
    EtherCard::copyIp(gPB + IP_SRC_P, EtherCard::myip);
    fill_ip_hdr_checksum();
}

static void make_arp_answer_from_request() {
    setMACs(gPB + ETH_SRC_MAC);
    13de:	c3 c0       	rjmp	.+390    	; 0x1566 <_ZN9EtherCard10packetLoopEj+0x244>
    13e0:	89 e9       	ldi	r24, 0x99	; 153
    13e2:	93 e0       	ldi	r25, 0x03	; 3
    13e4:	84 de       	rcall	.-760    	; 0x10ee <_ZL7setMACsPKh>
    gPB[ETH_ARP_OPCODE_H_P] = ETH_ARP_OPCODE_REPLY_H_V;
    13e6:	e3 e9       	ldi	r30, 0x93	; 147
    13e8:	f3 e0       	ldi	r31, 0x03	; 3
    13ea:	14 8a       	std	Z+20, r1	; 0x14
    gPB[ETH_ARP_OPCODE_L_P] = ETH_ARP_OPCODE_REPLY_L_V;
    13ec:	82 e0       	ldi	r24, 0x02	; 2
    EtherCard::copyMac(gPB + ETH_ARP_DST_MAC_P, gPB + ETH_ARP_SRC_MAC_P);
    13ee:	85 8b       	std	Z+21, r24	; 0x15
    13f0:	69 ea       	ldi	r22, 0xA9	; 169
    13f2:	73 e0       	ldi	r23, 0x03	; 3
    13f4:	83 eb       	ldi	r24, 0xB3	; 179
    13f6:	93 e0       	ldi	r25, 0x03	; 3
    EtherCard::copyMac(gPB + ETH_ARP_SRC_MAC_P, EtherCard::mymac);
    13f8:	5e d1       	rcall	.+700    	; 0x16b6 <_ZN9EtherCard7copyMacEPhPKh>
    13fa:	6d ea       	ldi	r22, 0xAD	; 173
    13fc:	75 e0       	ldi	r23, 0x05	; 5
    13fe:	89 ea       	ldi	r24, 0xA9	; 169
    1400:	93 e0       	ldi	r25, 0x03	; 3
    EtherCard::copyIp(gPB + ETH_ARP_DST_IP_P, gPB + ETH_ARP_SRC_IP_P);
    1402:	59 d1       	rcall	.+690    	; 0x16b6 <_ZN9EtherCard7copyMacEPhPKh>
    1404:	6f ea       	ldi	r22, 0xAF	; 175
    1406:	73 e0       	ldi	r23, 0x03	; 3
    1408:	89 eb       	ldi	r24, 0xB9	; 185
    140a:	93 e0       	ldi	r25, 0x03	; 3
    EtherCard::copyIp(gPB + ETH_ARP_SRC_IP_P, EtherCard::myip);
    140c:	47 d1       	rcall	.+654    	; 0x169c <_ZN9EtherCard6copyIpEPhPKh>
    140e:	69 ea       	ldi	r22, 0xA9	; 169
    1410:	75 e0       	ldi	r23, 0x05	; 5
    1412:	8f ea       	ldi	r24, 0xAF	; 175
    1414:	93 e0       	ldi	r25, 0x03	; 3
    1416:	42 d1       	rcall	.+644    	; 0x169c <_ZN9EtherCard6copyIpEPhPKh>
    EtherCard::packetSend(42);
    1418:	8a e2       	ldi	r24, 0x2A	; 42
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	99 dc       	rcall	.-1742   	; 0xd50 <_ZN8ENC28J6010packetSendEj>
    141e:	80 91 b3 05 	lds	r24, 0x05B3	; 0x8005b3 <_ZL9waitgwmac>

    if (eth_type_is_arp_and_my_ip(plen))
    {   //Service ARP request
        if (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REQ_L_V)
            make_arp_answer_from_request();
        if (waitgwmac & WGW_ACCEPT_ARP_REPLY && (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REPLY_L_V) && client_store_mac(gwip, gwmacaddr))
    1422:	83 ff       	sbrs	r24, 3
    1424:	0e c0       	rjmp	.+28     	; 0x1442 <_ZN9EtherCard10packetLoopEj+0x120>
    1426:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <_ZN8ENC28J606bufferE+0x15>
    142a:	82 30       	cpi	r24, 0x02	; 2
    142c:	51 f4       	brne	.+20     	; 0x1442 <_ZN9EtherCard10packetLoopEj+0x120>
    142e:	64 eb       	ldi	r22, 0xB4	; 180
    1430:	75 e0       	ldi	r23, 0x05	; 5
    1432:	8d e9       	ldi	r24, 0x9D	; 157
    1434:	95 e0       	ldi	r25, 0x05	; 5
    1436:	84 de       	rcall	.-760    	; 0x1140 <_ZL16client_store_macPhS_>
    1438:	88 23       	and	r24, r24
    143a:	19 f0       	breq	.+6      	; 0x1442 <_ZN9EtherCard10packetLoopEj+0x120>
    143c:	82 e0       	ldi	r24, 0x02	; 2
            waitgwmac = WGW_HAVE_GW_MAC;
    143e:	80 93 b3 05 	sts	0x05B3, r24	; 0x8005b3 <_ZL9waitgwmac>
    1442:	80 91 bc 05 	lds	r24, 0x05BC	; 0x8005bc <_ZL11has_dns_mac>
        if (!has_dns_mac && waiting_for_dns_mac && client_store_mac(dnsip, destmacaddr)) {
    1446:	81 11       	cpse	r24, r1
    1448:	10 c0       	rjmp	.+32     	; 0x146a <_ZN9EtherCard10packetLoopEj+0x148>
    144a:	80 91 bd 05 	lds	r24, 0x05BD	; 0x8005bd <_ZL19waiting_for_dns_mac>
    144e:	88 23       	and	r24, r24
    1450:	61 f0       	breq	.+24     	; 0x146a <_ZN9EtherCard10packetLoopEj+0x148>
    1452:	6e eb       	ldi	r22, 0xBE	; 190
    1454:	75 e0       	ldi	r23, 0x05	; 5
    1456:	89 e9       	ldi	r24, 0x99	; 153
    1458:	95 e0       	ldi	r25, 0x05	; 5
    145a:	72 de       	rcall	.-796    	; 0x1140 <_ZL16client_store_macPhS_>
    145c:	88 23       	and	r24, r24
    145e:	29 f0       	breq	.+10     	; 0x146a <_ZN9EtherCard10packetLoopEj+0x148>
    1460:	81 e0       	ldi	r24, 0x01	; 1
            has_dns_mac = true;
    1462:	80 93 bc 05 	sts	0x05BC, r24	; 0x8005bc <_ZL11has_dns_mac>
    1466:	10 92 bd 05 	sts	0x05BD, r1	; 0x8005bd <_ZL19waiting_for_dns_mac>
            waiting_for_dns_mac = false;
    146a:	80 91 ba 05 	lds	r24, 0x05BA	; 0x8005ba <_ZL12has_dest_mac>
        }
        if (!has_dest_mac && waiting_for_dest_mac && client_store_mac(hisip, destmacaddr)) {
    146e:	81 11       	cpse	r24, r1
    1470:	8c c0       	rjmp	.+280    	; 0x158a <_ZN9EtherCard10packetLoopEj+0x268>
    1472:	80 91 bb 05 	lds	r24, 0x05BB	; 0x8005bb <_ZL20waiting_for_dest_mac>
    1476:	88 23       	and	r24, r24
    1478:	09 f4       	brne	.+2      	; 0x147c <_ZN9EtherCard10packetLoopEj+0x15a>
    147a:	87 c0       	rjmp	.+270    	; 0x158a <_ZN9EtherCard10packetLoopEj+0x268>
    147c:	6e eb       	ldi	r22, 0xBE	; 190
    147e:	75 e0       	ldi	r23, 0x05	; 5
    1480:	85 e9       	ldi	r24, 0x95	; 149
    1482:	95 e0       	ldi	r25, 0x05	; 5
    1484:	5d de       	rcall	.-838    	; 0x1140 <_ZL16client_store_macPhS_>
    1486:	88 23       	and	r24, r24
    1488:	09 f4       	brne	.+2      	; 0x148c <_ZN9EtherCard10packetLoopEj+0x16a>
    148a:	7f c0       	rjmp	.+254    	; 0x158a <_ZN9EtherCard10packetLoopEj+0x268>
    148c:	81 e0       	ldi	r24, 0x01	; 1
            has_dest_mac = true;
    148e:	80 93 ba 05 	sts	0x05BA, r24	; 0x8005ba <_ZL12has_dest_mac>
    1492:	10 92 bb 05 	sts	0x05BB, r1	; 0x8005bb <_ZL20waiting_for_dest_mac>
            waiting_for_dest_mac = false;
    1496:	79 c0       	rjmp	.+242    	; 0x158a <_ZN9EtherCard10packetLoopEj+0x268>
    1498:	80 91 9f 03 	lds	r24, 0x039F	; 0x80039f <_ZN8ENC28J606bufferE+0xc>
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
           memcmp(gPB + ETH_ARP_DST_IP_P, EtherCard::myip, IP_LEN) == 0;
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
    149c:	88 30       	cpi	r24, 0x08	; 8
    149e:	09 f0       	breq	.+2      	; 0x14a2 <_ZN9EtherCard10packetLoopEj+0x180>
    14a0:	74 c0       	rjmp	.+232    	; 0x158a <_ZN9EtherCard10packetLoopEj+0x268>
    14a2:	80 91 a0 03 	lds	r24, 0x03A0	; 0x8003a0 <_ZN8ENC28J606bufferE+0xd>
    14a6:	81 11       	cpse	r24, r1
    14a8:	70 c0       	rjmp	.+224    	; 0x158a <_ZN9EtherCard10packetLoopEj+0x268>
    14aa:	80 91 a1 03 	lds	r24, 0x03A1	; 0x8003a1 <_ZN8ENC28J606bufferE+0xe>
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
    14ae:	85 34       	cpi	r24, 0x45	; 69
    14b0:	09 f0       	breq	.+2      	; 0x14b4 <_ZN9EtherCard10packetLoopEj+0x192>
    14b2:	6b c0       	rjmp	.+214    	; 0x158a <_ZN9EtherCard10packetLoopEj+0x268>
    14b4:	44 e0       	ldi	r20, 0x04	; 4
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
           (memcmp(gPB + IP_DST_P, EtherCard::myip, IP_LEN) == 0  //not my IP
    14b6:	50 e0       	ldi	r21, 0x00	; 0
    14b8:	69 ea       	ldi	r22, 0xA9	; 169
    14ba:	75 e0       	ldi	r23, 0x05	; 5
    14bc:	81 eb       	ldi	r24, 0xB1	; 177
    14be:	93 e0       	ldi	r25, 0x03	; 3
    14c0:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <memcmp>
    14c4:	89 2b       	or	r24, r25
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
    14c6:	09 f4       	brne	.+2      	; 0x14ca <_ZN9EtherCard10packetLoopEj+0x1a8>
    14c8:	54 c0       	rjmp	.+168    	; 0x1572 <_ZN9EtherCard10packetLoopEj+0x250>
    14ca:	44 e0       	ldi	r20, 0x04	; 4
           (memcmp(gPB + IP_DST_P, EtherCard::myip, IP_LEN) == 0  //not my IP
            || (memcmp(gPB + IP_DST_P, EtherCard::broadcastip, IP_LEN) == 0) //not subnet broadcast
    14cc:	50 e0       	ldi	r21, 0x00	; 0
    14ce:	61 ea       	ldi	r22, 0xA1	; 161
    14d0:	75 e0       	ldi	r23, 0x05	; 5
    14d2:	81 eb       	ldi	r24, 0xB1	; 177
    14d4:	93 e0       	ldi	r25, 0x03	; 3
    14d6:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <memcmp>
    14da:	89 2b       	or	r24, r25
    14dc:	09 f4       	brne	.+2      	; 0x14e0 <_ZN9EtherCard10packetLoopEj+0x1be>
    14de:	49 c0       	rjmp	.+146    	; 0x1572 <_ZN9EtherCard10packetLoopEj+0x250>
    14e0:	44 e0       	ldi	r20, 0x04	; 4
            || (memcmp(gPB + IP_DST_P, allOnes, IP_LEN) == 0)); //not global broadcasts
    14e2:	50 e0       	ldi	r21, 0x00	; 0
    14e4:	65 e2       	ldi	r22, 0x25	; 37
    14e6:	72 e0       	ldi	r23, 0x02	; 2
    14e8:	81 eb       	ldi	r24, 0xB1	; 177
    14ea:	93 e0       	ldi	r25, 0x03	; 3
    14ec:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <memcmp>
    14f0:	89 2b       	or	r24, r25
    14f2:	09 f0       	breq	.+2      	; 0x14f6 <_ZN9EtherCard10packetLoopEj+0x1d4>
    14f4:	4a c0       	rjmp	.+148    	; 0x158a <_ZN9EtherCard10packetLoopEj+0x268>
    14f6:	3d c0       	rjmp	.+122    	; 0x1572 <_ZN9EtherCard10packetLoopEj+0x250>
    14f8:	80 91 b5 03 	lds	r24, 0x03B5	; 0x8003b5 <_ZN8ENC28J606bufferE+0x22>
        //!@todo Add other protocols (and make each optional at compile time)
        return 0;
    }
	
	//To handle pinging
	if (gPB[IP_PROTO_P]==IP_PROTO_ICMP_V && gPB[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V)
    14fc:	88 30       	cpi	r24, 0x08	; 8
    14fe:	c9 f4       	brne	.+50     	; 0x1532 <_ZN9EtherCard10packetLoopEj+0x210>
	{   //Service ICMP echo request (ping)
		if (icmp_cb)
    1500:	e0 91 c4 05 	lds	r30, 0x05C4	; 0x8005c4 <_ZL7icmp_cb>
    1504:	f0 91 c5 05 	lds	r31, 0x05C5	; 0x8005c5 <_ZL7icmp_cb+0x1>
    1508:	30 97       	sbiw	r30, 0x00	; 0
    150a:	19 f0       	breq	.+6      	; 0x1512 <_ZN9EtherCard10packetLoopEj+0x1f0>
		(*icmp_cb)(&(gPB[IP_SRC_P]));
    150c:	8d ea       	ldi	r24, 0xAD	; 173
    150e:	93 e0       	ldi	r25, 0x03	; 3
    1510:	19 95       	eicall
void EtherCard::registerPingCallback (void (*callback)(uint8_t *srcip)) {
    icmp_cb = callback;
}

static void make_echo_reply_from_request(uint16_t len) {
	make_eth_ip();
    1512:	f7 dd       	rcall	.-1042   	; 0x1102 <_ZL11make_eth_ipv>
	gPB[ICMP_TYPE_P] = ICMP_TYPE_ECHOREPLY_V;
    1514:	e3 e9       	ldi	r30, 0x93	; 147
    1516:	f3 e0       	ldi	r31, 0x03	; 3
	if (gPB[ICMP_CHECKSUM_P] > (0xFF-0x08))
    1518:	12 a2       	std	Z+34, r1	; 0x22
    151a:	84 a1       	ldd	r24, Z+36	; 0x24
    151c:	88 3f       	cpi	r24, 0xF8	; 248
	gPB[ICMP_CHECKSUM_P+1]++;
    151e:	18 f0       	brcs	.+6      	; 0x1526 <_ZN9EtherCard10packetLoopEj+0x204>
    1520:	95 a1       	ldd	r25, Z+37	; 0x25
    1522:	9f 5f       	subi	r25, 0xFF	; 255
	gPB[ICMP_CHECKSUM_P] += 0x08;
    1524:	95 a3       	std	Z+37, r25	; 0x25
    1526:	88 5f       	subi	r24, 0xF8	; 248
	EtherCard::packetSend(len);
    1528:	80 93 b7 03 	sts	0x03B7, r24	; 0x8003b7 <_ZN8ENC28J606bufferE+0x24>
    152c:	ce 01       	movw	r24, r28
    152e:	10 dc       	rcall	.-2016   	; 0xd50 <_ZN8ENC28J6010packetSendEj>
		make_echo_reply_from_request(plen);
		return 0;
	}

#if ETHERCARD_UDPSERVER
    if (ether.udpServerListening() && gPB[IP_PROTO_P]==IP_PROTO_UDP_V)
    1530:	2c c0       	rjmp	.+88     	; 0x158a <_ZN9EtherCard10packetLoopEj+0x268>
    1532:	4a d0       	rcall	.+148    	; 0x15c8 <_ZN9EtherCard18udpServerListeningEv>
    1534:	88 23       	and	r24, r24
    1536:	49 f1       	breq	.+82     	; 0x158a <_ZN9EtherCard10packetLoopEj+0x268>
    1538:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <_ZN8ENC28J606bufferE+0x17>
    153c:	81 31       	cpi	r24, 0x11	; 17
    153e:	29 f5       	brne	.+74     	; 0x158a <_ZN9EtherCard10packetLoopEj+0x268>
        }
        delaycnt++;

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, dnsip) && !has_dns_mac && !waiting_for_dns_mac) {
            client_arp_whohas(dnsip);
    1540:	1d c0       	rjmp	.+58     	; 0x157c <_ZN9EtherCard10packetLoopEj+0x25a>
    1542:	89 e9       	ldi	r24, 0x99	; 153
    1544:	95 e0       	ldi	r25, 0x05	; 5
    1546:	12 de       	rcall	.-988    	; 0x116c <_ZL17client_arp_whohasPh>
            waiting_for_dns_mac = true;
    1548:	81 e0       	ldi	r24, 0x01	; 1
    154a:	80 93 bd 05 	sts	0x05BD, r24	; 0x8005bd <_ZL19waiting_for_dns_mac>
    154e:	1d cf       	rjmp	.-454    	; 0x138a <_ZN9EtherCard10packetLoopEj+0x68>
        }

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, hisip) && !has_dest_mac && !waiting_for_dest_mac) {
            client_arp_whohas(hisip);
    1550:	85 e9       	ldi	r24, 0x95	; 149
    1552:	95 e0       	ldi	r25, 0x05	; 5
    1554:	0b de       	rcall	.-1002   	; 0x116c <_ZL17client_arp_whohasPh>
    1556:	81 e0       	ldi	r24, 0x01	; 1
            waiting_for_dest_mac = true;
    1558:	80 93 bb 05 	sts	0x05BB, r24	; 0x8005bb <_ZL20waiting_for_dest_mac>
    155c:	16 c0       	rjmp	.+44     	; 0x158a <_ZN9EtherCard10packetLoopEj+0x268>
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
    155e:	8a 97       	sbiw	r24, 0x2a	; 42
    1560:	08 f0       	brcs	.+2      	; 0x1564 <_ZN9EtherCard10packetLoopEj+0x242>
    1562:	9a cf       	rjmp	.-204    	; 0x1498 <_ZN9EtherCard10packetLoopEj+0x176>
    1564:	12 c0       	rjmp	.+36     	; 0x158a <_ZN9EtherCard10packetLoopEj+0x268>
        return 0;
    }

    if (eth_type_is_arp_and_my_ip(plen))
    {   //Service ARP request
        if (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REQ_L_V)
    1566:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <_ZN8ENC28J606bufferE+0x15>
    156a:	81 30       	cpi	r24, 0x01	; 1
    156c:	09 f0       	breq	.+2      	; 0x1570 <_ZN9EtherCard10packetLoopEj+0x24e>
    156e:	57 cf       	rjmp	.-338    	; 0x141e <_ZN9EtherCard10packetLoopEj+0xfc>
    1570:	37 cf       	rjmp	.-402    	; 0x13e0 <_ZN9EtherCard10packetLoopEj+0xbe>
        //!@todo Add other protocols (and make each optional at compile time)
        return 0;
    }
	
	//To handle pinging
	if (gPB[IP_PROTO_P]==IP_PROTO_ICMP_V && gPB[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V)
    1572:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <_ZN8ENC28J606bufferE+0x17>
    1576:	81 30       	cpi	r24, 0x01	; 1
    1578:	e1 f6       	brne	.-72     	; 0x1532 <_ZN9EtherCard10packetLoopEj+0x210>
    157a:	be cf       	rjmp	.-132    	; 0x14f8 <_ZN9EtherCard10packetLoopEj+0x1d6>
	}

#if ETHERCARD_UDPSERVER
    if (ether.udpServerListening() && gPB[IP_PROTO_P]==IP_PROTO_UDP_V)
    {   //Call UDP server handler (callback) if one is defined for this packet
        if(ether.udpServerHasProcessedPacket(plen))
    157c:	ce 01       	movw	r24, r28
    157e:	2b d0       	rcall	.+86     	; 0x15d6 <_ZN9EtherCard27udpServerHasProcessedPacketEj>
    1580:	04 c0       	rjmp	.+8      	; 0x158a <_ZN9EtherCard10packetLoopEj+0x268>
    1582:	ca 32       	cpi	r28, 0x2A	; 42
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
    1584:	d1 05       	cpc	r29, r1
    1586:	08 f0       	brcs	.+2      	; 0x158a <_ZN9EtherCard10packetLoopEj+0x268>
    1588:	8c cf       	rjmp	.-232    	; 0x14a2 <_ZN9EtherCard10packetLoopEj+0x180>
    158a:	80 e0       	ldi	r24, 0x00	; 0

    if (plen<54 || gPB[IP_PROTO_P]!=IP_PROTO_TCP_V )
        return 0; //from here on we are only interested in TCP-packets; these are longer than 54 bytes
		
	return 0;
}
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	df 91       	pop	r29
    1590:	cf 91       	pop	r28
    1592:	08 95       	ret

00001594 <_ZN9EtherCard21udpServerListenOnPortEPFvjPhjPKcjEj>:
    1594:	9c 01       	movw	r18, r24
    {
        if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((uint8_t) listeners[i].port)) {
            listeners[i].listening = true;
        }
    }
}
    1596:	90 91 c6 05 	lds	r25, 0x05C6	; 0x8005c6 <numListeners>
    159a:	98 30       	cpi	r25, 0x08	; 8
    159c:	a0 f4       	brcc	.+40     	; 0x15c6 <_ZN9EtherCard21udpServerListenOnPortEPFvjPhjPKcjEj+0x32>
    159e:	e9 2f       	mov	r30, r25
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	af 01       	movw	r20, r30
    15a4:	44 0f       	add	r20, r20
    15a6:	55 1f       	adc	r21, r21
    15a8:	44 0f       	add	r20, r20
    15aa:	55 1f       	adc	r21, r21
    15ac:	e4 0f       	add	r30, r20
    15ae:	f5 1f       	adc	r31, r21
    15b0:	e9 53       	subi	r30, 0x39	; 57
    15b2:	fa 4f       	sbci	r31, 0xFA	; 250
    15b4:	31 83       	std	Z+1, r19	; 0x01
    15b6:	20 83       	st	Z, r18
    15b8:	73 83       	std	Z+3, r23	; 0x03
    15ba:	62 83       	std	Z+2, r22	; 0x02
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	84 83       	std	Z+4, r24	; 0x04
    15c0:	9f 5f       	subi	r25, 0xFF	; 255
    15c2:	90 93 c6 05 	sts	0x05C6, r25	; 0x8005c6 <numListeners>
    15c6:	08 95       	ret

000015c8 <_ZN9EtherCard18udpServerListeningEv>:

bool EtherCard::udpServerListening() {
    return numListeners > 0;
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	90 91 c6 05 	lds	r25, 0x05C6	; 0x8005c6 <numListeners>
    15ce:	91 11       	cpse	r25, r1
    15d0:	01 c0       	rjmp	.+2      	; 0x15d4 <_ZN9EtherCard18udpServerListeningEv+0xc>
    15d2:	80 e0       	ldi	r24, 0x00	; 0
}
    15d4:	08 95       	ret

000015d6 <_ZN9EtherCard27udpServerHasProcessedPacketEj>:

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    15d6:	8f 92       	push	r8
    15d8:	9f 92       	push	r9
    15da:	bf 92       	push	r11
    15dc:	cf 92       	push	r12
    15de:	df 92       	push	r13
    15e0:	ef 92       	push	r14
    15e2:	ff 92       	push	r15
    15e4:	0f 93       	push	r16
    15e6:	1f 93       	push	r17
    15e8:	cf 93       	push	r28
    15ea:	df 93       	push	r29
    bool packetProcessed = false;
    for(int i = 0; i < numListeners; i++)
    15ec:	80 91 c6 05 	lds	r24, 0x05C6	; 0x8005c6 <numListeners>
    15f0:	88 23       	and	r24, r24
    15f2:	09 f4       	brne	.+2      	; 0x15f6 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x20>
    15f4:	46 c0       	rjmp	.+140    	; 0x1682 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0xac>
    15f6:	c7 ec       	ldi	r28, 0xC7	; 199
    15f8:	d5 e0       	ldi	r29, 0x05	; 5
    15fa:	e1 2c       	mov	r14, r1
    15fc:	f1 2c       	mov	r15, r1
    15fe:	80 e0       	ldi	r24, 0x00	; 0
    {
        if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((uint8_t) listeners[i].port) && listeners[i].listening)
    1600:	0f 2e       	mov	r0, r31
    1602:	f3 e9       	ldi	r31, 0x93	; 147
    1604:	cf 2e       	mov	r12, r31
    1606:	f3 e0       	ldi	r31, 0x03	; 3
    1608:	df 2e       	mov	r13, r31
    160a:	f0 2d       	mov	r31, r0
                listeners[i].port,
                gPB + IP_SRC_P,
                (gPB[UDP_SRC_PORT_H_P] << 8) | gPB[UDP_SRC_PORT_L_P],
                (const char *) (gPB + UDP_DATA_P),
                datalen);
            packetProcessed = true;
    160c:	bb 24       	eor	r11, r11
    160e:	b3 94       	inc	r11

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    bool packetProcessed = false;
    for(int i = 0; i < numListeners; i++)
    {
        if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((uint8_t) listeners[i].port) && listeners[i].listening)
    1610:	aa 81       	ldd	r26, Y+2	; 0x02
    1612:	bb 81       	ldd	r27, Y+3	; 0x03
    1614:	f6 01       	movw	r30, r12
    1616:	24 a1       	ldd	r18, Z+36	; 0x24
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	4b 2f       	mov	r20, r27
    161c:	55 27       	eor	r21, r21
    161e:	24 17       	cp	r18, r20
    1620:	35 07       	cpc	r19, r21
    1622:	21 f5       	brne	.+72     	; 0x166c <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x96>
    1624:	25 a1       	ldd	r18, Z+37	; 0x25
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	ad 01       	movw	r20, r26
    162a:	55 27       	eor	r21, r21
    162c:	24 17       	cp	r18, r20
    162e:	35 07       	cpc	r19, r21
    1630:	e9 f4       	brne	.+58     	; 0x166c <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x96>
    1632:	9c 81       	ldd	r25, Y+4	; 0x04
    1634:	99 23       	and	r25, r25
    1636:	d1 f0       	breq	.+52     	; 0x166c <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x96>
            listeners[i].callback(
                listeners[i].port,
                gPB + IP_SRC_P,
                (gPB[UDP_SRC_PORT_H_P] << 8) | gPB[UDP_SRC_PORT_L_P],
                (const char *) (gPB + UDP_DATA_P),
                datalen);
    1638:	07 a1       	ldd	r16, Z+39	; 0x27
    163a:	10 e0       	ldi	r17, 0x00	; 0
    163c:	08 50       	subi	r16, 0x08	; 8
    163e:	11 09       	sbc	r17, r1
    1640:	86 a1       	ldd	r24, Z+38	; 0x26
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	98 2f       	mov	r25, r24
    1646:	88 27       	eor	r24, r24
    1648:	08 0f       	add	r16, r24
    164a:	19 1f       	adc	r17, r25
    164c:	42 a1       	ldd	r20, Z+34	; 0x22
    164e:	50 e0       	ldi	r21, 0x00	; 0
    1650:	54 2f       	mov	r21, r20
    1652:	44 27       	eor	r20, r20
    1654:	83 a1       	ldd	r24, Z+35	; 0x23
    1656:	48 2b       	or	r20, r24
    1658:	88 80       	ld	r8, Y
    165a:	99 80       	ldd	r9, Y+1	; 0x01
    165c:	2d eb       	ldi	r18, 0xBD	; 189
    165e:	33 e0       	ldi	r19, 0x03	; 3
    1660:	6d ea       	ldi	r22, 0xAD	; 173
    1662:	73 e0       	ldi	r23, 0x03	; 3
    1664:	cd 01       	movw	r24, r26
    1666:	f4 01       	movw	r30, r8
    1668:	19 95       	eicall
            packetProcessed = true;
    166a:	8b 2d       	mov	r24, r11
    return numListeners > 0;
}

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    bool packetProcessed = false;
    for(int i = 0; i < numListeners; i++)
    166c:	ff ef       	ldi	r31, 0xFF	; 255
    166e:	ef 1a       	sub	r14, r31
    1670:	ff 0a       	sbc	r15, r31
    1672:	25 96       	adiw	r28, 0x05	; 5
    1674:	20 91 c6 05 	lds	r18, 0x05C6	; 0x8005c6 <numListeners>
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	e2 16       	cp	r14, r18
    167c:	f3 06       	cpc	r15, r19
    167e:	44 f2       	brlt	.-112    	; 0x1610 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x3a>
    1680:	01 c0       	rjmp	.+2      	; 0x1684 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0xae>
bool EtherCard::udpServerListening() {
    return numListeners > 0;
}

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    bool packetProcessed = false;
    1682:	80 e0       	ldi	r24, 0x00	; 0
                datalen);
            packetProcessed = true;
        }
    }
    return packetProcessed;
}
    1684:	df 91       	pop	r29
    1686:	cf 91       	pop	r28
    1688:	1f 91       	pop	r17
    168a:	0f 91       	pop	r16
    168c:	ff 90       	pop	r15
    168e:	ef 90       	pop	r14
    1690:	df 90       	pop	r13
    1692:	cf 90       	pop	r12
    1694:	bf 90       	pop	r11
    1696:	9f 90       	pop	r9
    1698:	8f 90       	pop	r8
    169a:	08 95       	ret

0000169c <_ZN9EtherCard6copyIpEPhPKh>:
#include "../Peripherals/HardwareSerial.h"
#include <stdlib.h>
#include <ctype.h>

void EtherCard::copyIp (uint8_t *dst, const uint8_t *src) {
    memcpy(dst, src, IP_LEN);
    169c:	fb 01       	movw	r30, r22
    169e:	20 81       	ld	r18, Z
    16a0:	31 81       	ldd	r19, Z+1	; 0x01
    16a2:	fc 01       	movw	r30, r24
    16a4:	31 83       	std	Z+1, r19	; 0x01
    16a6:	20 83       	st	Z, r18
    16a8:	fb 01       	movw	r30, r22
    16aa:	22 81       	ldd	r18, Z+2	; 0x02
    16ac:	33 81       	ldd	r19, Z+3	; 0x03
    16ae:	fc 01       	movw	r30, r24
    16b0:	33 83       	std	Z+3, r19	; 0x03
    16b2:	22 83       	std	Z+2, r18	; 0x02
    16b4:	08 95       	ret

000016b6 <_ZN9EtherCard7copyMacEPhPKh>:
}

void EtherCard::copyMac (uint8_t *dst, const uint8_t *src) {
    16b6:	dc 01       	movw	r26, r24
    memcpy(dst, src, ETH_LEN);
    16b8:	96 e0       	ldi	r25, 0x06	; 6
    16ba:	fb 01       	movw	r30, r22
    16bc:	01 90       	ld	r0, Z+
    16be:	0d 92       	st	X+, r0
    16c0:	9a 95       	dec	r25
    16c2:	e1 f7       	brne	.-8      	; 0x16bc <_ZN9EtherCard7copyMacEPhPKh+0x6>
    16c4:	08 95       	ret

000016c6 <_ZN9EtherComm13CheckChecksumEPKch>:
	}
}

bool EtherComm::CheckChecksum(const char *data, uint8_t len){
  //data++; //Ignore first byte, the start byte.
  uint8_t checksum = (uint8_t)(*(data++)); //Start by 'adding' the command to the checksum
    16c6:	fc 01       	movw	r30, r24
    16c8:	20 81       	ld	r18, Z
  checksum += (uint8_t)(*(data++));
    16ca:	dc 01       	movw	r26, r24
    16cc:	12 96       	adiw	r26, 0x02	; 2
    16ce:	81 81       	ldd	r24, Z+1	; 0x01
    16d0:	92 2f       	mov	r25, r18
    16d2:	98 0f       	add	r25, r24
  while(len-- > 0){
    16d4:	3f ef       	ldi	r19, 0xFF	; 255
    16d6:	36 0f       	add	r19, r22
    16d8:	66 23       	and	r22, r22
    16da:	61 f0       	breq	.+24     	; 0x16f4 <_ZN9EtherComm13CheckChecksumEPKch+0x2e>
    16dc:	fd 01       	movw	r30, r26
    16de:	83 2f       	mov	r24, r19
    checksum += (uint8_t)(*(data++));
    16e0:	21 91       	ld	r18, Z+
    16e2:	92 0f       	add	r25, r18

bool EtherComm::CheckChecksum(const char *data, uint8_t len){
  //data++; //Ignore first byte, the start byte.
  uint8_t checksum = (uint8_t)(*(data++)); //Start by 'adding' the command to the checksum
  checksum += (uint8_t)(*(data++));
  while(len-- > 0){
    16e4:	81 50       	subi	r24, 0x01	; 1
    16e6:	e0 f7       	brcc	.-8      	; 0x16e0 <_ZN9EtherComm13CheckChecksumEPKch+0x1a>
    16e8:	23 2f       	mov	r18, r19
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	2f 5f       	subi	r18, 0xFF	; 255
    16ee:	3f 4f       	sbci	r19, 0xFF	; 255
    16f0:	a2 0f       	add	r26, r18
    16f2:	b3 1f       	adc	r27, r19
    checksum += (uint8_t)(*(data++));
  }
//  Serial.println((uint8_t)(checksum & CHECKSUM_MASK));
  return (checksum & CHECKSUM_MASK) == (uint8_t)(*data);
    16f4:	81 e0       	ldi	r24, 0x01	; 1
    16f6:	2c 91       	ld	r18, X
    16f8:	29 13       	cpse	r18, r25
    16fa:	80 e0       	ldi	r24, 0x00	; 0
}
    16fc:	08 95       	ret

000016fe <_Z10udpReceivejPhjPKcj>:

//char EtherComm::buffer[BUFFER_SIZE];
uint8_t* EtherComm::buffer = ether.buffer + UDP_DATA_P;

//callback that prints received packets to the serial port
void udpReceive(uint16_t dest_port, uint8_t src_ip[IP_LEN], uint16_t src_port, const char *data, uint16_t packetLen){
    16fe:	0f 93       	push	r16
    1700:	1f 93       	push	r17
    1702:	cf 93       	push	r28
    1704:	df 93       	push	r29
	}
	Serial.println();
	Serial.print("Checksum: ");
	Serial.println((uint8_t)(*index));
*/	
	if(packetLen >= 3){ //At minimum, start byte, command, and checksum.
    1706:	a8 01       	movw	r20, r16
    1708:	43 50       	subi	r20, 0x03	; 3
    170a:	51 09       	sbc	r21, r1
    170c:	4f 3f       	cpi	r20, 0xFF	; 255
    170e:	51 05       	cpc	r21, r1
    1710:	09 f0       	breq	.+2      	; 0x1714 <_Z10udpReceivejPhjPKcj+0x16>
    1712:	88 f4       	brcc	.+34     	; 0x1736 <_Z10udpReceivejPhjPKcj+0x38>
		if(packetLen <= 258){
			uint8_t dataLen = (uint8_t)(packetLen - 3);
			if((uint8_t)data[0] == START_BYTE){
    1714:	f9 01       	movw	r30, r18
    1716:	80 81       	ld	r24, Z
    1718:	8f 3f       	cpi	r24, 0xFF	; 255
    171a:	69 f4       	brne	.+26     	; 0x1736 <_Z10udpReceivejPhjPKcj+0x38>
    171c:	e9 01       	movw	r28, r18
	Serial.print("Checksum: ");
	Serial.println((uint8_t)(*index));
*/	
	if(packetLen >= 3){ //At minimum, start byte, command, and checksum.
		if(packetLen <= 258){
			uint8_t dataLen = (uint8_t)(packetLen - 3);
    171e:	03 50       	subi	r16, 0x03	; 3
			if((uint8_t)data[0] == START_BYTE){
			//		Serial.print("Computed Checksum: ");
				if(EtherComm::CheckChecksum(data, dataLen)){
    1720:	60 2f       	mov	r22, r16
    1722:	c9 01       	movw	r24, r18
    1724:	d0 df       	rcall	.-96     	; 0x16c6 <_ZN9EtherComm13CheckChecksumEPKch>
    1726:	88 23       	and	r24, r24
    1728:	31 f0       	breq	.+12     	; 0x1736 <_Z10udpReceivejPhjPKcj+0x38>
					EtherComm::CommandReceived((uint8_t)data[1], (const uint8_t*)(data + 2), dataLen);
    172a:	be 01       	movw	r22, r28
    172c:	6e 5f       	subi	r22, 0xFE	; 254
    172e:	7f 4f       	sbci	r23, 0xFF	; 255
    1730:	40 2f       	mov	r20, r16
    1732:	89 81       	ldd	r24, Y+1	; 0x01
    1734:	96 d9       	rcall	.-3284   	; 0xa62 <_ZN9EtherComm15CommandReceivedEhPKhh>
				}
			}
		}
	}
}
    1736:	df 91       	pop	r29
    1738:	cf 91       	pop	r28
    173a:	1f 91       	pop	r17
    173c:	0f 91       	pop	r16
    173e:	08 95       	ret

00001740 <_ZN9EtherComm5beginEjjRVhS1_h>:
  }
//  Serial.println((uint8_t)(checksum & CHECKSUM_MASK));
  return (checksum & CHECKSUM_MASK) == (uint8_t)(*data);
}

bool EtherComm::begin(uint16_t recvPort, uint16_t destPort, Register& csDDR, Register& csPort, uint8_t csPin){
    1740:	0f 93       	push	r16
    1742:	cf 93       	push	r28
    1744:	df 93       	push	r29
    1746:	ec 01       	movw	r28, r24
    1748:	ca 01       	movw	r24, r20
    174a:	a9 01       	movw	r20, r18
    174c:	20 2f       	mov	r18, r16
  EtherComm::_recvPort = recvPort;
    174e:	d0 93 f2 05 	sts	0x05F2, r29	; 0x8005f2 <_ZN9EtherComm9_recvPortE+0x1>
    1752:	c0 93 f1 05 	sts	0x05F1, r28	; 0x8005f1 <_ZN9EtherComm9_recvPortE>
  EtherComm::_destPort = destPort;
    1756:	70 93 f0 05 	sts	0x05F0, r23	; 0x8005f0 <_ZN9EtherComm9_destPortE+0x1>
    175a:	60 93 ef 05 	sts	0x05EF, r22	; 0x8005ef <_ZN9EtherComm9_destPortE>
  
  if (ether.begin(EtherComm::_mymac, csDDR, csPort, csPin) == 0) return false;
    175e:	bc 01       	movw	r22, r24
    1760:	86 e0       	ldi	r24, 0x06	; 6
    1762:	92 e0       	ldi	r25, 0x02	; 2
    1764:	d3 db       	rcall	.-2138   	; 0xf0c <_ZN9EtherCard5beginEPKhRVhS3_h>
    1766:	88 23       	and	r24, r24
    1768:	79 f0       	breq	.+30     	; 0x1788 <_ZN9EtherComm5beginEjjRVhS1_h+0x48>
  ether.staticSetup(EtherComm::_myip, EtherComm::_gwip);
    176a:	20 e0       	ldi	r18, 0x00	; 0
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	40 e0       	ldi	r20, 0x00	; 0
    1770:	50 e0       	ldi	r21, 0x00	; 0
    1772:	6c e0       	ldi	r22, 0x0C	; 12
    1774:	72 e0       	ldi	r23, 0x02	; 2
    1776:	80 e1       	ldi	r24, 0x10	; 16
    1778:	92 e0       	ldi	r25, 0x02	; 2
    177a:	e1 db       	rcall	.-2110   	; 0xf3e <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_>
  ether.printIp("GW:  ", ether.gwip);
  ether.printIp("DNS: ", ether.dnsip);
  */
  
  //Register the udpSerialPrint() method to listen to port the receive port.
  ether.udpServerListenOnPort(&udpReceive, recvPort);
    177c:	be 01       	movw	r22, r28
    177e:	8f e7       	ldi	r24, 0x7F	; 127
    1780:	9b e0       	ldi	r25, 0x0B	; 11
    1782:	08 df       	rcall	.-496    	; 0x1594 <_ZN9EtherCard21udpServerListenOnPortEPFvjPhjPKcjEj>
  
  return true;
    1784:	81 e0       	ldi	r24, 0x01	; 1
    1786:	01 c0       	rjmp	.+2      	; 0x178a <_ZN9EtherComm5beginEjjRVhS1_h+0x4a>

bool EtherComm::begin(uint16_t recvPort, uint16_t destPort, Register& csDDR, Register& csPort, uint8_t csPin){
  EtherComm::_recvPort = recvPort;
  EtherComm::_destPort = destPort;
  
  if (ether.begin(EtherComm::_mymac, csDDR, csPort, csPin) == 0) return false;
    1788:	80 e0       	ldi	r24, 0x00	; 0
  
  //Register the udpSerialPrint() method to listen to port the receive port.
  ether.udpServerListenOnPort(&udpReceive, recvPort);
  
  return true;
}
    178a:	df 91       	pop	r29
    178c:	cf 91       	pop	r28
    178e:	0f 91       	pop	r16
    1790:	08 95       	ret

00001792 <_ZN9EtherComm11SendCommandEhh>:

void EtherComm::SendCommand(uint8_t cmd, uint8_t len){
    1792:	0f 93       	push	r16
    1794:	1f 93       	push	r17
    1796:	cf 93       	push	r28
    1798:	df 93       	push	r29
  EtherComm::buffer[0] = START_BYTE;
    179a:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    179e:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    17a2:	9f ef       	ldi	r25, 0xFF	; 255
    17a4:	90 83       	st	Z, r25
  EtherComm::buffer[1] = cmd;
    17a6:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    17aa:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    17ae:	81 83       	std	Z+1, r24	; 0x01
  //EtherComm::buffer[2] = len;
  
  uint8_t checksum = START_BYTE + cmd;
    17b0:	81 50       	subi	r24, 0x01	; 1
  uint8_t* index = &EtherComm::buffer[2]; //TODO why is char* being used? convert ot uint8_t*!!
    17b2:	c0 91 00 02 	lds	r28, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    17b6:	d0 91 01 02 	lds	r29, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    17ba:	de 01       	movw	r26, r28
    17bc:	12 96       	adiw	r26, 0x02	; 2
  uint8_t bytes = len;
  while(bytes-- > 0){
    17be:	4f ef       	ldi	r20, 0xFF	; 255
    17c0:	46 0f       	add	r20, r22
    17c2:	66 23       	and	r22, r22
    17c4:	81 f0       	breq	.+32     	; 0x17e6 <_ZN9EtherComm11SendCommandEhh+0x54>
    17c6:	fd 01       	movw	r30, r26
    17c8:	50 e0       	ldi	r21, 0x00	; 0
    17ca:	9a 01       	movw	r18, r20
    17cc:	2d 5f       	subi	r18, 0xFD	; 253
    17ce:	3f 4f       	sbci	r19, 0xFF	; 255
    17d0:	2c 0f       	add	r18, r28
    17d2:	3d 1f       	adc	r19, r29
    checksum += (uint8_t)(*(index++));  
    17d4:	91 91       	ld	r25, Z+
    17d6:	89 0f       	add	r24, r25
  //EtherComm::buffer[2] = len;
  
  uint8_t checksum = START_BYTE + cmd;
  uint8_t* index = &EtherComm::buffer[2]; //TODO why is char* being used? convert ot uint8_t*!!
  uint8_t bytes = len;
  while(bytes-- > 0){
    17d8:	e2 17       	cp	r30, r18
    17da:	f3 07       	cpc	r31, r19
    17dc:	d9 f7       	brne	.-10     	; 0x17d4 <_ZN9EtherComm11SendCommandEhh+0x42>
    17de:	4f 5f       	subi	r20, 0xFF	; 255
    17e0:	5f 4f       	sbci	r21, 0xFF	; 255
    17e2:	a4 0f       	add	r26, r20
    17e4:	b5 1f       	adc	r27, r21
    checksum += (uint8_t)(*(index++));  
  }
  (*index) = (uint8_t)(checksum & CHECKSUM_MASK);
    17e6:	8c 93       	st	X, r24

  //Serial.print("Send: ");
  //Serial.println(len);
  ether.sendUdp(EtherComm::buffer, (uint16_t)len + (uint16_t)3, _recvPort, _destIP, _destPort);
    17e8:	00 91 ef 05 	lds	r16, 0x05EF	; 0x8005ef <_ZN9EtherComm9_destPortE>
    17ec:	10 91 f0 05 	lds	r17, 0x05F0	; 0x8005f0 <_ZN9EtherComm9_destPortE+0x1>
    17f0:	40 91 f1 05 	lds	r20, 0x05F1	; 0x8005f1 <_ZN9EtherComm9_recvPortE>
    17f4:	50 91 f2 05 	lds	r21, 0x05F2	; 0x8005f2 <_ZN9EtherComm9_recvPortE+0x1>
    17f8:	70 e0       	ldi	r23, 0x00	; 0
    17fa:	6d 5f       	subi	r22, 0xFD	; 253
    17fc:	7f 4f       	sbci	r23, 0xFF	; 255
    17fe:	22 e0       	ldi	r18, 0x02	; 2
    1800:	32 e0       	ldi	r19, 0x02	; 2
    1802:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    1806:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    180a:	52 dd       	rcall	.-1372   	; 0x12b0 <_ZN9EtherCard7sendUdpEPKhjjS1_j>
}
    180c:	df 91       	pop	r29
    180e:	cf 91       	pop	r28
    1810:	1f 91       	pop	r17
    1812:	0f 91       	pop	r16
    1814:	08 95       	ret

00001816 <main>:
#define MIN 550
#define MAX 2400

int main(void){
	//TestIMU();
	sei(); //Enable global interrupts
    1816:	78 94       	sei
	public:
	inline HardwareSerial(
	volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
	volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
	volatile uint8_t *ucsrc, volatile uint8_t *udr);
	void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    1818:	26 e0       	ldi	r18, 0x06	; 6
    181a:	40 e8       	ldi	r20, 0x80	; 128
    181c:	55 e2       	ldi	r21, 0x25	; 37
    181e:	60 e0       	ldi	r22, 0x00	; 0
    1820:	70 e0       	ldi	r23, 0x00	; 0
    1822:	88 ef       	ldi	r24, 0xF8	; 248
    1824:	95 e0       	ldi	r25, 0x05	; 5
    1826:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <_ZN14HardwareSerial5beginEmh>
	Serial.begin(9600);
	Serial.println("\nInitializing...");
    182a:	6b e2       	ldi	r22, 0x2B	; 43
    182c:	72 e0       	ldi	r23, 0x02	; 2
    182e:	88 ef       	ldi	r24, 0xF8	; 248
    1830:	95 e0       	ldi	r25, 0x05	; 5
    1832:	0e 94 fb 22 	call	0x45f6	; 0x45f6 <_ZN5Print7printlnEPKc>
	
	if(!rov.begin()){
    1836:	0e 94 9e 20 	call	0x413c	; 0x413c <_ZN5Robot5beginEv>
    183a:	81 11       	cpse	r24, r1
    183c:	07 c0       	rjmp	.+14     	; 0x184c <main+0x36>
		Serial.println("Failed to initialize robot.");
    183e:	6c e3       	ldi	r22, 0x3C	; 60
    1840:	72 e0       	ldi	r23, 0x02	; 2
    1842:	88 ef       	ldi	r24, 0xF8	; 248
    1844:	95 e0       	ldi	r25, 0x05	; 5
    1846:	0e 94 fb 22 	call	0x45f6	; 0x45f6 <_ZN5Print7printlnEPKc>
    184a:	ff cf       	rjmp	.-2      	; 0x184a <main+0x34>
		while(1);
	}
	Serial.println("Robot initialized.");
    184c:	68 e5       	ldi	r22, 0x58	; 88
    184e:	72 e0       	ldi	r23, 0x02	; 2
    1850:	88 ef       	ldi	r24, 0xF8	; 248
    1852:	95 e0       	ldi	r25, 0x05	; 5
    1854:	0e 94 fb 22 	call	0x45f6	; 0x45f6 <_ZN5Print7printlnEPKc>
		while(1);
	}*/ //TODO send error codes for intialization debugging
	
	//Serial.println("Initialized pressure sensor.");
	
	if(!EtherComm::begin((uint16_t)6001, (uint16_t)6002, DDR_ENC, PORT_ENC, MASK_ENC_CS)){
    1858:	01 e0       	ldi	r16, 0x01	; 1
    185a:	28 e0       	ldi	r18, 0x08	; 8
    185c:	31 e0       	ldi	r19, 0x01	; 1
    185e:	47 e0       	ldi	r20, 0x07	; 7
    1860:	51 e0       	ldi	r21, 0x01	; 1
    1862:	62 e7       	ldi	r22, 0x72	; 114
    1864:	77 e1       	ldi	r23, 0x17	; 23
    1866:	81 e7       	ldi	r24, 0x71	; 113
    1868:	97 e1       	ldi	r25, 0x17	; 23
    186a:	6a df       	rcall	.-300    	; 0x1740 <_ZN9EtherComm5beginEjjRVhS1_h>
    186c:	81 11       	cpse	r24, r1
    186e:	07 c0       	rjmp	.+14     	; 0x187e <main+0x68>
		Serial.println("Failed to access Ethernet controller.");
    1870:	6b e6       	ldi	r22, 0x6B	; 107
    1872:	72 e0       	ldi	r23, 0x02	; 2
    1874:	88 ef       	ldi	r24, 0xF8	; 248
    1876:	95 e0       	ldi	r25, 0x05	; 5
    1878:	0e 94 fb 22 	call	0x45f6	; 0x45f6 <_ZN5Print7printlnEPKc>
    187c:	ff cf       	rjmp	.-2      	; 0x187c <main+0x66>
		while(1);
	}
	Serial.println("Connected to controller.");
    187e:	61 e9       	ldi	r22, 0x91	; 145
    1880:	72 e0       	ldi	r23, 0x02	; 2
    1882:	88 ef       	ldi	r24, 0xF8	; 248
    1884:	95 e0       	ldi	r25, 0x05	; 5
    1886:	0e 94 fb 22 	call	0x45f6	; 0x45f6 <_ZN5Print7printlnEPKc>
  static bool begin(uint16_t recvPort, uint16_t destPort, Register& csDDR, Register& csPort, uint8_t csPin);

  friend void udpReceive(uint16_t dest_port, uint8_t src_ip[IP_LEN], uint16_t src_port, const char *data, uint16_t len);

  static void Loop(){
    ether.packetLoop(ether.packetReceive());
    188a:	db da       	rcall	.-2634   	; 0xe42 <_ZN8ENC28J6013packetReceiveEv>
    188c:	4a dd       	rcall	.-1388   	; 0x1322 <_ZN9EtherCard10packetLoopEj>
	*/
    /* Replace with your application code */
	//TwiServo.begin();
    while (1) {
		EtherComm::Loop();
		rov.Loop();
    188e:	0e 94 ff 20 	call	0x41fe	; 0x41fe <_ZN5Robot4LoopEv>
    1892:	fb cf       	rjmp	.-10     	; 0x188a <main+0x74>

00001894 <_GLOBAL__sub_I_dir>:
int8_t dir = 1;
uint8_t pos = 128;
#include "Utils/CpuFreq.h"
#include <util/delay.h>

TwiServoController TwiServo(0x40);
    1894:	60 e4       	ldi	r22, 0x40	; 64
    1896:	83 ef       	ldi	r24, 0xF3	; 243
    1898:	95 e0       	ldi	r25, 0x05	; 5
    189a:	0c 94 17 15 	jmp	0x2a2e	; 0x2a2e <_ZN18TwiServoControllerC1Eh>
    189e:	08 95       	ret

000018a0 <_ZN6MS5837C1ER13HardwareTimer>:
const float MS5837::mbar = 1.0f;
*/
const uint8_t MS5837::MS5837_30BA = 0;
const uint8_t MS5837::MS5837_02BA = 1;

MS5837::MS5837(HardwareTimer &timer) : _timer(&timer) {
    18a0:	fc 01       	movw	r30, r24
    18a2:	73 a3       	std	Z+35, r23	; 0x23
    18a4:	62 a3       	std	Z+34, r22	; 0x22
	fluidDensity = 1029;
    18a6:	40 e0       	ldi	r20, 0x00	; 0
    18a8:	50 ea       	ldi	r21, 0xA0	; 160
    18aa:	60 e8       	ldi	r22, 0x80	; 128
    18ac:	74 e4       	ldi	r23, 0x44	; 68
    18ae:	44 a3       	std	Z+36, r20	; 0x24
    18b0:	55 a3       	std	Z+37, r21	; 0x25
    18b2:	66 a3       	std	Z+38, r22	; 0x26
    18b4:	77 a3       	std	Z+39, r23	; 0x27
    18b6:	08 95       	ret

000018b8 <_ZN6MS58378setModelEh>:

	return false; // CRC fail
}

void MS5837::setModel(uint8_t model) {
	_model = model;
    18b8:	fc 01       	movw	r30, r24
    18ba:	60 a3       	std	Z+32, r22	; 0x20
    18bc:	08 95       	ret

000018be <_ZN6MS58379startReadEv>:
	D2 = (D2 << 8) | Wire.read();

	calculate();
}*/

bool MS5837::startRead(){
    18be:	cf 93       	push	r28
    18c0:	df 93       	push	r29
	if(_state == STATE_FINISHED){
    18c2:	fc 01       	movw	r30, r24
    18c4:	21 a1       	ldd	r18, Z+33	; 0x21
    18c6:	21 11       	cpse	r18, r1
    18c8:	1f c0       	rjmp	.+62     	; 0x1908 <_ZN6MS58379startReadEv+0x4a>
    18ca:	ec 01       	movw	r28, r24
		_state = STATE_READ_D1; // Request D1 conversion
    18cc:	81 e0       	ldi	r24, 0x01	; 1
    18ce:	81 a3       	std	Z+33, r24	; 0x21
		
		Wire.beginTransmission(MS5837_ADDR);
    18d0:	66 e7       	ldi	r22, 0x76	; 118
    18d2:	70 e0       	ldi	r23, 0x00	; 0
    18d4:	86 e9       	ldi	r24, 0x96	; 150
    18d6:	97 e0       	ldi	r25, 0x07	; 7
    18d8:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <_ZN7TwoWire17beginTransmissionEi>
	void onRequest( void (*)(void) );

	inline size_t write(unsigned long n) { return write((uint8_t)n); }
	inline size_t write(long n) { return write((uint8_t)n); }
	inline size_t write(unsigned int n) { return write((uint8_t)n); }
	inline size_t write(int n) { return write((uint8_t)n); }
    18dc:	e0 91 96 07 	lds	r30, 0x0796	; 0x800796 <Wire>
    18e0:	f0 91 97 07 	lds	r31, 0x0797	; 0x800797 <Wire+0x1>
    18e4:	01 90       	ld	r0, Z+
    18e6:	f0 81       	ld	r31, Z
    18e8:	e0 2d       	mov	r30, r0
    18ea:	6a e4       	ldi	r22, 0x4A	; 74
    18ec:	86 e9       	ldi	r24, 0x96	; 150
    18ee:	97 e0       	ldi	r25, 0x07	; 7
    18f0:	19 95       	eicall
		Wire.write(MS5837_CONVERT_D1_8192);
		Wire.endTransmission();
    18f2:	86 e9       	ldi	r24, 0x96	; 150
    18f4:	97 e0       	ldi	r25, 0x07	; 7
    18f6:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <_ZN7TwoWire15endTransmissionEv>

		_timer->start(2); // Max conversion time, 20ms per datasheet
    18fa:	62 e0       	ldi	r22, 0x02	; 2
    18fc:	8a a1       	ldd	r24, Y+34	; 0x22
    18fe:	9b a1       	ldd	r25, Y+35	; 0x23
    1900:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <_ZN13HardwareTimer5startEh>
		return true;
    1904:	81 e0       	ldi	r24, 0x01	; 1
    1906:	01 c0       	rjmp	.+2      	; 0x190a <_ZN6MS58379startReadEv+0x4c>
	}else{
		return false;
    1908:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    190a:	df 91       	pop	r29
    190c:	cf 91       	pop	r28
    190e:	08 95       	ret

00001910 <_ZN6MS58378finishedEv>:
		}
	}
}

bool MS5837::finished(){
	return _state == STATE_FINISHED;
    1910:	21 e0       	ldi	r18, 0x01	; 1
    1912:	fc 01       	movw	r30, r24
    1914:	81 a1       	ldd	r24, Z+33	; 0x21
    1916:	81 11       	cpse	r24, r1
    1918:	20 e0       	ldi	r18, 0x00	; 0
}
    191a:	82 2f       	mov	r24, r18
    191c:	08 95       	ret

0000191e <_ZN6MS58379calculateEv>:

void MS5837::calculate() {
    191e:	2f 92       	push	r2
    1920:	3f 92       	push	r3
    1922:	4f 92       	push	r4
    1924:	5f 92       	push	r5
    1926:	6f 92       	push	r6
    1928:	7f 92       	push	r7
    192a:	8f 92       	push	r8
    192c:	9f 92       	push	r9
    192e:	af 92       	push	r10
    1930:	bf 92       	push	r11
    1932:	cf 92       	push	r12
    1934:	df 92       	push	r13
    1936:	ef 92       	push	r14
    1938:	ff 92       	push	r15
    193a:	0f 93       	push	r16
    193c:	1f 93       	push	r17
    193e:	cf 93       	push	r28
    1940:	df 93       	push	r29
    1942:	cd b7       	in	r28, 0x3d	; 61
    1944:	de b7       	in	r29, 0x3e	; 62
    1946:	a5 97       	sbiw	r28, 0x25	; 37
    1948:	0f b6       	in	r0, 0x3f	; 63
    194a:	f8 94       	cli
    194c:	de bf       	out	0x3e, r29	; 62
    194e:	0f be       	out	0x3f, r0	; 63
    1950:	cd bf       	out	0x3d, r28	; 61
    1952:	1c 01       	movw	r2, r24
	int32_t Ti = 0;
	int64_t OFF2 = 0;
	int64_t SENS2 = 0;
	
	// Terms called
	dT = D2-uint32_t(C[5])*256l;
    1954:	dc 01       	movw	r26, r24
    1956:	1a 96       	adiw	r26, 0x0a	; 10
    1958:	8d 91       	ld	r24, X+
    195a:	9c 91       	ld	r25, X
    195c:	1b 97       	sbiw	r26, 0x0b	; 11
    195e:	a0 e0       	ldi	r26, 0x00	; 0
    1960:	b0 e0       	ldi	r27, 0x00	; 0
    1962:	ba 2f       	mov	r27, r26
    1964:	a9 2f       	mov	r26, r25
    1966:	98 2f       	mov	r25, r24
    1968:	88 27       	eor	r24, r24
    196a:	f1 01       	movw	r30, r2
    196c:	44 89       	ldd	r20, Z+20	; 0x14
    196e:	55 89       	ldd	r21, Z+21	; 0x15
    1970:	66 89       	ldd	r22, Z+22	; 0x16
    1972:	77 89       	ldd	r23, Z+23	; 0x17
    1974:	3a 01       	movw	r6, r20
    1976:	4b 01       	movw	r8, r22
    1978:	68 1a       	sub	r6, r24
    197a:	79 0a       	sbc	r7, r25
    197c:	8a 0a       	sbc	r8, r26
    197e:	9b 0a       	sbc	r9, r27
    1980:	69 82       	std	Y+1, r6	; 0x01
    1982:	7a 82       	std	Y+2, r7	; 0x02
    1984:	8b 82       	std	Y+3, r8	; 0x03
    1986:	9c 82       	std	Y+4, r9	; 0x04
	if ( _model == MS5837_02BA ) {
    1988:	80 a1       	ldd	r24, Z+32	; 0x20
    198a:	81 30       	cpi	r24, 0x01	; 1
    198c:	09 f0       	breq	.+2      	; 0x1990 <_ZN6MS58379calculateEv+0x72>
    198e:	58 c1       	rjmp	.+688    	; 0x1c40 <_ZN6MS58379calculateEv+0x322>
		SENS = int64_t(C[1])*65536l+(int64_t(C[3])*dT)/128l;
    1990:	99 0c       	add	r9, r9
    1992:	66 08       	sbc	r6, r6
    1994:	76 2c       	mov	r7, r6
    1996:	43 01       	movw	r8, r6
    1998:	6d 82       	std	Y+5, r6	; 0x05
    199a:	7e 82       	std	Y+6, r7	; 0x06
    199c:	8f 82       	std	Y+7, r8	; 0x07
    199e:	98 86       	std	Y+8, r9	; 0x08
    19a0:	86 81       	ldd	r24, Z+6	; 0x06
    19a2:	97 81       	ldd	r25, Z+7	; 0x07
    19a4:	3c 01       	movw	r6, r24
    19a6:	81 2c       	mov	r8, r1
    19a8:	91 2c       	mov	r9, r1
    19aa:	a1 2c       	mov	r10, r1
    19ac:	b1 2c       	mov	r11, r1
    19ae:	65 01       	movw	r12, r10
    19b0:	8d 8f       	std	Y+29, r24	; 0x1d
    19b2:	7e 8e       	std	Y+30, r7	; 0x1e
    19b4:	8f 8e       	std	Y+31, r8	; 0x1f
    19b6:	98 a2       	std	Y+32, r9	; 0x20
    19b8:	a9 a2       	std	Y+33, r10	; 0x21
    19ba:	ba a2       	std	Y+34, r11	; 0x22
    19bc:	cb a2       	std	Y+35, r12	; 0x23
    19be:	dc a2       	std	Y+36, r13	; 0x24
    19c0:	a9 80       	ldd	r10, Y+1	; 0x01
    19c2:	ba 80       	ldd	r11, Y+2	; 0x02
    19c4:	cb 80       	ldd	r12, Y+3	; 0x03
    19c6:	dc 80       	ldd	r13, Y+4	; 0x04
    19c8:	ed 80       	ldd	r14, Y+5	; 0x05
    19ca:	fe 2c       	mov	r15, r14
    19cc:	0e 2d       	mov	r16, r14
    19ce:	1e 2d       	mov	r17, r14
    19d0:	28 2f       	mov	r18, r24
    19d2:	37 2d       	mov	r19, r7
    19d4:	40 e0       	ldi	r20, 0x00	; 0
    19d6:	50 e0       	ldi	r21, 0x00	; 0
    19d8:	60 e0       	ldi	r22, 0x00	; 0
    19da:	70 e0       	ldi	r23, 0x00	; 0
    19dc:	80 e0       	ldi	r24, 0x00	; 0
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	0e 94 64 25 	call	0x4ac8	; 0x4ac8 <__muldi3>
    19e4:	12 2f       	mov	r17, r18
    19e6:	3e 87       	std	Y+14, r19	; 0x0e
    19e8:	4d 87       	std	Y+13, r20	; 0x0d
    19ea:	b5 2f       	mov	r27, r21
    19ec:	f6 2f       	mov	r31, r22
    19ee:	e7 2f       	mov	r30, r23
    19f0:	78 2e       	mov	r7, r24
    19f2:	89 2e       	mov	r8, r25
    19f4:	a0 e0       	ldi	r26, 0x00	; 0
    19f6:	0e 94 0a 26 	call	0x4c14	; 0x4c14 <__cmpdi2_s8>
    19fa:	5c f4       	brge	.+22     	; 0x1a12 <_ZN6MS58379calculateEv+0xf4>
    19fc:	af e7       	ldi	r26, 0x7F	; 127
    19fe:	0e 94 f5 25 	call	0x4bea	; 0x4bea <__adddi3_s8>
    1a02:	12 2f       	mov	r17, r18
    1a04:	3e 87       	std	Y+14, r19	; 0x0e
    1a06:	4d 87       	std	Y+13, r20	; 0x0d
    1a08:	b5 2f       	mov	r27, r21
    1a0a:	f6 2f       	mov	r31, r22
    1a0c:	e7 2f       	mov	r30, r23
    1a0e:	78 2e       	mov	r7, r24
    1a10:	89 2e       	mov	r8, r25
    1a12:	21 2f       	mov	r18, r17
    1a14:	3e 85       	ldd	r19, Y+14	; 0x0e
    1a16:	4d 85       	ldd	r20, Y+13	; 0x0d
    1a18:	5b 2f       	mov	r21, r27
    1a1a:	6f 2f       	mov	r22, r31
    1a1c:	7e 2f       	mov	r23, r30
    1a1e:	87 2d       	mov	r24, r7
    1a20:	98 2d       	mov	r25, r8
    1a22:	07 e0       	ldi	r16, 0x07	; 7
    1a24:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <__ashrdi3>
    1a28:	82 2e       	mov	r8, r18
    1a2a:	93 2e       	mov	r9, r19
    1a2c:	74 2e       	mov	r7, r20
    1a2e:	65 2e       	mov	r6, r21
    1a30:	b6 2f       	mov	r27, r22
    1a32:	a7 2f       	mov	r26, r23
    1a34:	58 2e       	mov	r5, r24
    1a36:	49 2e       	mov	r4, r25
    1a38:	f1 01       	movw	r30, r2
    1a3a:	a2 80       	ldd	r10, Z+2	; 0x02
    1a3c:	b3 80       	ldd	r11, Z+3	; 0x03
    1a3e:	2a 2d       	mov	r18, r10
    1a40:	3b 2d       	mov	r19, r11
    1a42:	40 e0       	ldi	r20, 0x00	; 0
    1a44:	50 e0       	ldi	r21, 0x00	; 0
    1a46:	60 e0       	ldi	r22, 0x00	; 0
    1a48:	70 e0       	ldi	r23, 0x00	; 0
    1a4a:	80 e0       	ldi	r24, 0x00	; 0
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	00 e1       	ldi	r16, 0x10	; 16
    1a50:	0e 94 b5 25 	call	0x4b6a	; 0x4b6a <__ashldi3>
    1a54:	a2 2e       	mov	r10, r18
    1a56:	b3 2e       	mov	r11, r19
    1a58:	c4 2e       	mov	r12, r20
    1a5a:	d5 2e       	mov	r13, r21
    1a5c:	e6 2e       	mov	r14, r22
    1a5e:	f7 2e       	mov	r15, r23
    1a60:	08 2f       	mov	r16, r24
    1a62:	19 2f       	mov	r17, r25
    1a64:	28 2d       	mov	r18, r8
    1a66:	39 2d       	mov	r19, r9
    1a68:	47 2d       	mov	r20, r7
    1a6a:	56 2d       	mov	r21, r6
    1a6c:	6b 2f       	mov	r22, r27
    1a6e:	7a 2f       	mov	r23, r26
    1a70:	85 2d       	mov	r24, r5
    1a72:	94 2d       	mov	r25, r4
    1a74:	0e 94 ec 25 	call	0x4bd8	; 0x4bd8 <__adddi3>
    1a78:	2d 87       	std	Y+13, r18	; 0x0d
    1a7a:	3e 87       	std	Y+14, r19	; 0x0e
    1a7c:	4f 87       	std	Y+15, r20	; 0x0f
    1a7e:	58 8b       	std	Y+16, r21	; 0x10
    1a80:	69 8b       	std	Y+17, r22	; 0x11
    1a82:	7a 8b       	std	Y+18, r23	; 0x12
    1a84:	8b 8b       	std	Y+19, r24	; 0x13
    1a86:	9c 8b       	std	Y+20, r25	; 0x14
		OFF = int64_t(C[2])*131072l+(int64_t(C[4])*dT)/64l;
    1a88:	80 85       	ldd	r24, Z+8	; 0x08
    1a8a:	91 85       	ldd	r25, Z+9	; 0x09
    1a8c:	3c 01       	movw	r6, r24
    1a8e:	81 2c       	mov	r8, r1
    1a90:	91 2c       	mov	r9, r1
    1a92:	a1 2c       	mov	r10, r1
    1a94:	b1 2c       	mov	r11, r1
    1a96:	65 01       	movw	r12, r10
    1a98:	8d 8f       	std	Y+29, r24	; 0x1d
    1a9a:	7e 8e       	std	Y+30, r7	; 0x1e
    1a9c:	8f 8e       	std	Y+31, r8	; 0x1f
    1a9e:	98 a2       	std	Y+32, r9	; 0x20
    1aa0:	a9 a2       	std	Y+33, r10	; 0x21
    1aa2:	ba a2       	std	Y+34, r11	; 0x22
    1aa4:	cb a2       	std	Y+35, r12	; 0x23
    1aa6:	dc a2       	std	Y+36, r13	; 0x24
    1aa8:	a9 80       	ldd	r10, Y+1	; 0x01
    1aaa:	ba 80       	ldd	r11, Y+2	; 0x02
    1aac:	cb 80       	ldd	r12, Y+3	; 0x03
    1aae:	dc 80       	ldd	r13, Y+4	; 0x04
    1ab0:	ed 80       	ldd	r14, Y+5	; 0x05
    1ab2:	fe 2c       	mov	r15, r14
    1ab4:	0e 2d       	mov	r16, r14
    1ab6:	1e 2d       	mov	r17, r14
    1ab8:	28 2f       	mov	r18, r24
    1aba:	37 2d       	mov	r19, r7
    1abc:	40 e0       	ldi	r20, 0x00	; 0
    1abe:	50 e0       	ldi	r21, 0x00	; 0
    1ac0:	60 e0       	ldi	r22, 0x00	; 0
    1ac2:	70 e0       	ldi	r23, 0x00	; 0
    1ac4:	80 e0       	ldi	r24, 0x00	; 0
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	0e 94 64 25 	call	0x4ac8	; 0x4ac8 <__muldi3>
    1acc:	12 2f       	mov	r17, r18
    1ace:	3e 8b       	std	Y+22, r19	; 0x16
    1ad0:	4d 8b       	std	Y+21, r20	; 0x15
    1ad2:	b5 2f       	mov	r27, r21
    1ad4:	f6 2f       	mov	r31, r22
    1ad6:	e7 2f       	mov	r30, r23
    1ad8:	78 2e       	mov	r7, r24
    1ada:	89 2e       	mov	r8, r25
    1adc:	a0 e0       	ldi	r26, 0x00	; 0
    1ade:	0e 94 0a 26 	call	0x4c14	; 0x4c14 <__cmpdi2_s8>
    1ae2:	5c f4       	brge	.+22     	; 0x1afa <_ZN6MS58379calculateEv+0x1dc>
    1ae4:	af e3       	ldi	r26, 0x3F	; 63
    1ae6:	0e 94 f5 25 	call	0x4bea	; 0x4bea <__adddi3_s8>
    1aea:	12 2f       	mov	r17, r18
    1aec:	3e 8b       	std	Y+22, r19	; 0x16
    1aee:	4d 8b       	std	Y+21, r20	; 0x15
    1af0:	b5 2f       	mov	r27, r21
    1af2:	f6 2f       	mov	r31, r22
    1af4:	e7 2f       	mov	r30, r23
    1af6:	78 2e       	mov	r7, r24
    1af8:	89 2e       	mov	r8, r25
    1afa:	21 2f       	mov	r18, r17
    1afc:	3e 89       	ldd	r19, Y+22	; 0x16
    1afe:	4d 89       	ldd	r20, Y+21	; 0x15
    1b00:	5b 2f       	mov	r21, r27
    1b02:	6f 2f       	mov	r22, r31
    1b04:	7e 2f       	mov	r23, r30
    1b06:	87 2d       	mov	r24, r7
    1b08:	98 2d       	mov	r25, r8
    1b0a:	06 e0       	ldi	r16, 0x06	; 6
    1b0c:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <__ashrdi3>
    1b10:	82 2e       	mov	r8, r18
    1b12:	93 2e       	mov	r9, r19
    1b14:	74 2e       	mov	r7, r20
    1b16:	65 2e       	mov	r6, r21
    1b18:	b6 2f       	mov	r27, r22
    1b1a:	a7 2f       	mov	r26, r23
    1b1c:	58 2e       	mov	r5, r24
    1b1e:	49 2e       	mov	r4, r25
    1b20:	f1 01       	movw	r30, r2
    1b22:	24 81       	ldd	r18, Z+4	; 0x04
    1b24:	35 81       	ldd	r19, Z+5	; 0x05
    1b26:	59 01       	movw	r10, r18
    1b28:	3b 2d       	mov	r19, r11
    1b2a:	40 e0       	ldi	r20, 0x00	; 0
    1b2c:	50 e0       	ldi	r21, 0x00	; 0
    1b2e:	60 e0       	ldi	r22, 0x00	; 0
    1b30:	70 e0       	ldi	r23, 0x00	; 0
    1b32:	80 e0       	ldi	r24, 0x00	; 0
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	01 e1       	ldi	r16, 0x11	; 17
    1b38:	0e 94 b5 25 	call	0x4b6a	; 0x4b6a <__ashldi3>
    1b3c:	a2 2e       	mov	r10, r18
    1b3e:	b3 2e       	mov	r11, r19
    1b40:	c4 2e       	mov	r12, r20
    1b42:	d5 2e       	mov	r13, r21
    1b44:	e6 2e       	mov	r14, r22
    1b46:	f7 2e       	mov	r15, r23
    1b48:	08 2f       	mov	r16, r24
    1b4a:	19 2f       	mov	r17, r25
    1b4c:	28 2d       	mov	r18, r8
    1b4e:	39 2d       	mov	r19, r9
    1b50:	47 2d       	mov	r20, r7
    1b52:	56 2d       	mov	r21, r6
    1b54:	6b 2f       	mov	r22, r27
    1b56:	7a 2f       	mov	r23, r26
    1b58:	85 2d       	mov	r24, r5
    1b5a:	94 2d       	mov	r25, r4
    1b5c:	0e 94 ec 25 	call	0x4bd8	; 0x4bd8 <__adddi3>
    1b60:	2d 8b       	std	Y+21, r18	; 0x15
    1b62:	3e 8b       	std	Y+22, r19	; 0x16
    1b64:	4f 8b       	std	Y+23, r20	; 0x17
    1b66:	58 8f       	std	Y+24, r21	; 0x18
    1b68:	69 8f       	std	Y+25, r22	; 0x19
    1b6a:	7a 8f       	std	Y+26, r23	; 0x1a
    1b6c:	8b 8f       	std	Y+27, r24	; 0x1b
    1b6e:	9c 8f       	std	Y+28, r25	; 0x1c
		OFF = int64_t(C[2])*65536l+(int64_t(C[4])*dT)/128l;
		P = (D1*SENS/(2097152l)-OFF)/(8192l);
	}
	
	// Temp conversion
	TEMP = 2000l+int64_t(dT)*C[6]/8388608LL;
    1b70:	84 85       	ldd	r24, Z+12	; 0x0c
    1b72:	95 85       	ldd	r25, Z+13	; 0x0d
    1b74:	3c 01       	movw	r6, r24
    1b76:	81 2c       	mov	r8, r1
    1b78:	91 2c       	mov	r9, r1
    1b7a:	a1 2c       	mov	r10, r1
    1b7c:	b1 2c       	mov	r11, r1
    1b7e:	65 01       	movw	r12, r10
    1b80:	8d 8f       	std	Y+29, r24	; 0x1d
    1b82:	7e 8e       	std	Y+30, r7	; 0x1e
    1b84:	8f 8e       	std	Y+31, r8	; 0x1f
    1b86:	98 a2       	std	Y+32, r9	; 0x20
    1b88:	a9 a2       	std	Y+33, r10	; 0x21
    1b8a:	ba a2       	std	Y+34, r11	; 0x22
    1b8c:	cb a2       	std	Y+35, r12	; 0x23
    1b8e:	dc a2       	std	Y+36, r13	; 0x24
    1b90:	a9 80       	ldd	r10, Y+1	; 0x01
    1b92:	ba 80       	ldd	r11, Y+2	; 0x02
    1b94:	cb 80       	ldd	r12, Y+3	; 0x03
    1b96:	dc 80       	ldd	r13, Y+4	; 0x04
    1b98:	ed 80       	ldd	r14, Y+5	; 0x05
    1b9a:	fe 2c       	mov	r15, r14
    1b9c:	0e 2d       	mov	r16, r14
    1b9e:	1e 2d       	mov	r17, r14
    1ba0:	28 2f       	mov	r18, r24
    1ba2:	37 2d       	mov	r19, r7
    1ba4:	40 e0       	ldi	r20, 0x00	; 0
    1ba6:	50 e0       	ldi	r21, 0x00	; 0
    1ba8:	60 e0       	ldi	r22, 0x00	; 0
    1baa:	70 e0       	ldi	r23, 0x00	; 0
    1bac:	80 e0       	ldi	r24, 0x00	; 0
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	0e 94 64 25 	call	0x4ac8	; 0x4ac8 <__muldi3>
    1bb4:	12 2f       	mov	r17, r18
    1bb6:	3d a3       	std	Y+37, r19	; 0x25
    1bb8:	4d 8f       	std	Y+29, r20	; 0x1d
    1bba:	b5 2f       	mov	r27, r21
    1bbc:	f6 2f       	mov	r31, r22
    1bbe:	e7 2f       	mov	r30, r23
    1bc0:	78 2e       	mov	r7, r24
    1bc2:	89 2e       	mov	r8, r25
    1bc4:	a0 e0       	ldi	r26, 0x00	; 0
    1bc6:	0e 94 0a 26 	call	0x4c14	; 0x4c14 <__cmpdi2_s8>
    1bca:	84 f4       	brge	.+32     	; 0x1bec <_ZN6MS58379calculateEv+0x2ce>
    1bcc:	21 50       	subi	r18, 0x01	; 1
    1bce:	31 09       	sbc	r19, r1
    1bd0:	40 48       	sbci	r20, 0x80	; 128
    1bd2:	5f 4f       	sbci	r21, 0xFF	; 255
    1bd4:	6f 4f       	sbci	r22, 0xFF	; 255
    1bd6:	7f 4f       	sbci	r23, 0xFF	; 255
    1bd8:	8f 4f       	sbci	r24, 0xFF	; 255
    1bda:	9f 4f       	sbci	r25, 0xFF	; 255
    1bdc:	12 2f       	mov	r17, r18
    1bde:	3d a3       	std	Y+37, r19	; 0x25
    1be0:	4d 8f       	std	Y+29, r20	; 0x1d
    1be2:	b5 2f       	mov	r27, r21
    1be4:	f6 2f       	mov	r31, r22
    1be6:	e7 2f       	mov	r30, r23
    1be8:	78 2e       	mov	r7, r24
    1bea:	89 2e       	mov	r8, r25
    1bec:	21 2f       	mov	r18, r17
    1bee:	3d a1       	ldd	r19, Y+37	; 0x25
    1bf0:	4d 8d       	ldd	r20, Y+29	; 0x1d
    1bf2:	5b 2f       	mov	r21, r27
    1bf4:	6f 2f       	mov	r22, r31
    1bf6:	7e 2f       	mov	r23, r30
    1bf8:	87 2d       	mov	r24, r7
    1bfa:	98 2d       	mov	r25, r8
    1bfc:	07 e1       	ldi	r16, 0x17	; 23
    1bfe:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <__ashrdi3>
    1c02:	82 2e       	mov	r8, r18
    1c04:	93 2e       	mov	r9, r19
    1c06:	a4 2e       	mov	r10, r20
    1c08:	b5 2e       	mov	r11, r21
    1c0a:	24 01       	movw	r4, r8
    1c0c:	35 01       	movw	r6, r10
    1c0e:	00 ed       	ldi	r16, 0xD0	; 208
    1c10:	40 0e       	add	r4, r16
    1c12:	07 e0       	ldi	r16, 0x07	; 7
    1c14:	50 1e       	adc	r5, r16
    1c16:	61 1c       	adc	r6, r1
    1c18:	71 1c       	adc	r7, r1
	
	//Second order compensation
	if ( _model == MS5837_02BA ) {
		if((TEMP/100)<20){         //Low temp
    1c1a:	10 ed       	ldi	r17, 0xD0	; 208
    1c1c:	41 16       	cp	r4, r17
    1c1e:	17 e0       	ldi	r17, 0x07	; 7
    1c20:	51 06       	cpc	r5, r17
    1c22:	61 04       	cpc	r6, r1
    1c24:	71 04       	cpc	r7, r1
    1c26:	0c f4       	brge	.+2      	; 0x1c2a <_ZN6MS58379calculateEv+0x30c>
    1c28:	62 c1       	rjmp	.+708    	; 0x1eee <_ZN6MS58379calculateEv+0x5d0>
	int32_t dT = 0;
	int64_t SENS = 0;
	int64_t OFF = 0;
	int32_t SENSi = 0;
	int32_t OFFi = 0;
	int32_t Ti = 0;
    1c2a:	81 2c       	mov	r8, r1
    1c2c:	91 2c       	mov	r9, r1
    1c2e:	54 01       	movw	r10, r8
	
	int32_t dT = 0;
	int64_t SENS = 0;
	int64_t OFF = 0;
	int32_t SENSi = 0;
	int32_t OFFi = 0;
    1c30:	19 82       	std	Y+1, r1	; 0x01
    1c32:	1a 82       	std	Y+2, r1	; 0x02
    1c34:	1b 82       	std	Y+3, r1	; 0x03
    1c36:	1c 82       	std	Y+4, r1	; 0x04
	// Do conversion first and then second order temp compensation
	
	int32_t dT = 0;
	int64_t SENS = 0;
	int64_t OFF = 0;
	int32_t SENSi = 0;
    1c38:	e1 2c       	mov	r14, r1
    1c3a:	f1 2c       	mov	r15, r1
    1c3c:	87 01       	movw	r16, r14
    1c3e:	4c c3       	rjmp	.+1688   	; 0x22d8 <__stack+0xd9>
	if ( _model == MS5837_02BA ) {
		SENS = int64_t(C[1])*65536l+(int64_t(C[3])*dT)/128l;
		OFF = int64_t(C[2])*131072l+(int64_t(C[4])*dT)/64l;
		P = (D1*SENS/(2097152l)-OFF)/(32768l);
	} else {
		SENS = int64_t(C[1])*32768l+(int64_t(C[3])*dT)/256l;
    1c40:	69 80       	ldd	r6, Y+1	; 0x01
    1c42:	7a 80       	ldd	r7, Y+2	; 0x02
    1c44:	8b 80       	ldd	r8, Y+3	; 0x03
    1c46:	9c 80       	ldd	r9, Y+4	; 0x04
    1c48:	99 0c       	add	r9, r9
    1c4a:	66 08       	sbc	r6, r6
    1c4c:	76 2c       	mov	r7, r6
    1c4e:	43 01       	movw	r8, r6
    1c50:	6d 82       	std	Y+5, r6	; 0x05
    1c52:	7e 82       	std	Y+6, r7	; 0x06
    1c54:	8f 82       	std	Y+7, r8	; 0x07
    1c56:	98 86       	std	Y+8, r9	; 0x08
    1c58:	86 81       	ldd	r24, Z+6	; 0x06
    1c5a:	97 81       	ldd	r25, Z+7	; 0x07
    1c5c:	3c 01       	movw	r6, r24
    1c5e:	81 2c       	mov	r8, r1
    1c60:	91 2c       	mov	r9, r1
    1c62:	a1 2c       	mov	r10, r1
    1c64:	b1 2c       	mov	r11, r1
    1c66:	65 01       	movw	r12, r10
    1c68:	8d 8f       	std	Y+29, r24	; 0x1d
    1c6a:	7e 8e       	std	Y+30, r7	; 0x1e
    1c6c:	8f 8e       	std	Y+31, r8	; 0x1f
    1c6e:	98 a2       	std	Y+32, r9	; 0x20
    1c70:	a9 a2       	std	Y+33, r10	; 0x21
    1c72:	ba a2       	std	Y+34, r11	; 0x22
    1c74:	cb a2       	std	Y+35, r12	; 0x23
    1c76:	dc a2       	std	Y+36, r13	; 0x24
    1c78:	a9 80       	ldd	r10, Y+1	; 0x01
    1c7a:	ba 80       	ldd	r11, Y+2	; 0x02
    1c7c:	cb 80       	ldd	r12, Y+3	; 0x03
    1c7e:	dc 80       	ldd	r13, Y+4	; 0x04
    1c80:	ed 80       	ldd	r14, Y+5	; 0x05
    1c82:	fe 2c       	mov	r15, r14
    1c84:	0e 2d       	mov	r16, r14
    1c86:	1e 2d       	mov	r17, r14
    1c88:	28 2f       	mov	r18, r24
    1c8a:	37 2d       	mov	r19, r7
    1c8c:	40 e0       	ldi	r20, 0x00	; 0
    1c8e:	50 e0       	ldi	r21, 0x00	; 0
    1c90:	60 e0       	ldi	r22, 0x00	; 0
    1c92:	70 e0       	ldi	r23, 0x00	; 0
    1c94:	80 e0       	ldi	r24, 0x00	; 0
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	0e 94 64 25 	call	0x4ac8	; 0x4ac8 <__muldi3>
    1c9c:	12 2f       	mov	r17, r18
    1c9e:	3e 87       	std	Y+14, r19	; 0x0e
    1ca0:	4d 87       	std	Y+13, r20	; 0x0d
    1ca2:	b5 2f       	mov	r27, r21
    1ca4:	f6 2f       	mov	r31, r22
    1ca6:	e7 2f       	mov	r30, r23
    1ca8:	78 2e       	mov	r7, r24
    1caa:	89 2e       	mov	r8, r25
    1cac:	a0 e0       	ldi	r26, 0x00	; 0
    1cae:	0e 94 0a 26 	call	0x4c14	; 0x4c14 <__cmpdi2_s8>
    1cb2:	84 f4       	brge	.+32     	; 0x1cd4 <_ZN6MS58379calculateEv+0x3b6>
    1cb4:	21 50       	subi	r18, 0x01	; 1
    1cb6:	3f 4f       	sbci	r19, 0xFF	; 255
    1cb8:	4f 4f       	sbci	r20, 0xFF	; 255
    1cba:	5f 4f       	sbci	r21, 0xFF	; 255
    1cbc:	6f 4f       	sbci	r22, 0xFF	; 255
    1cbe:	7f 4f       	sbci	r23, 0xFF	; 255
    1cc0:	8f 4f       	sbci	r24, 0xFF	; 255
    1cc2:	9f 4f       	sbci	r25, 0xFF	; 255
    1cc4:	12 2f       	mov	r17, r18
    1cc6:	3e 87       	std	Y+14, r19	; 0x0e
    1cc8:	4d 87       	std	Y+13, r20	; 0x0d
    1cca:	b5 2f       	mov	r27, r21
    1ccc:	f6 2f       	mov	r31, r22
    1cce:	e7 2f       	mov	r30, r23
    1cd0:	78 2e       	mov	r7, r24
    1cd2:	89 2e       	mov	r8, r25
    1cd4:	21 2f       	mov	r18, r17
    1cd6:	3e 85       	ldd	r19, Y+14	; 0x0e
    1cd8:	4d 85       	ldd	r20, Y+13	; 0x0d
    1cda:	5b 2f       	mov	r21, r27
    1cdc:	6f 2f       	mov	r22, r31
    1cde:	7e 2f       	mov	r23, r30
    1ce0:	87 2d       	mov	r24, r7
    1ce2:	98 2d       	mov	r25, r8
    1ce4:	08 e0       	ldi	r16, 0x08	; 8
    1ce6:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <__ashrdi3>
    1cea:	82 2e       	mov	r8, r18
    1cec:	93 2e       	mov	r9, r19
    1cee:	74 2e       	mov	r7, r20
    1cf0:	65 2e       	mov	r6, r21
    1cf2:	b6 2f       	mov	r27, r22
    1cf4:	a7 2f       	mov	r26, r23
    1cf6:	58 2e       	mov	r5, r24
    1cf8:	49 2e       	mov	r4, r25
    1cfa:	f1 01       	movw	r30, r2
    1cfc:	a2 80       	ldd	r10, Z+2	; 0x02
    1cfe:	b3 80       	ldd	r11, Z+3	; 0x03
    1d00:	2a 2d       	mov	r18, r10
    1d02:	3b 2d       	mov	r19, r11
    1d04:	40 e0       	ldi	r20, 0x00	; 0
    1d06:	50 e0       	ldi	r21, 0x00	; 0
    1d08:	60 e0       	ldi	r22, 0x00	; 0
    1d0a:	70 e0       	ldi	r23, 0x00	; 0
    1d0c:	80 e0       	ldi	r24, 0x00	; 0
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	0f e0       	ldi	r16, 0x0F	; 15
    1d12:	0e 94 b5 25 	call	0x4b6a	; 0x4b6a <__ashldi3>
    1d16:	a2 2e       	mov	r10, r18
    1d18:	b3 2e       	mov	r11, r19
    1d1a:	c4 2e       	mov	r12, r20
    1d1c:	d5 2e       	mov	r13, r21
    1d1e:	e6 2e       	mov	r14, r22
    1d20:	f7 2e       	mov	r15, r23
    1d22:	08 2f       	mov	r16, r24
    1d24:	19 2f       	mov	r17, r25
    1d26:	28 2d       	mov	r18, r8
    1d28:	39 2d       	mov	r19, r9
    1d2a:	47 2d       	mov	r20, r7
    1d2c:	56 2d       	mov	r21, r6
    1d2e:	6b 2f       	mov	r22, r27
    1d30:	7a 2f       	mov	r23, r26
    1d32:	85 2d       	mov	r24, r5
    1d34:	94 2d       	mov	r25, r4
    1d36:	0e 94 ec 25 	call	0x4bd8	; 0x4bd8 <__adddi3>
    1d3a:	2d 8b       	std	Y+21, r18	; 0x15
    1d3c:	3e 8b       	std	Y+22, r19	; 0x16
    1d3e:	4f 8b       	std	Y+23, r20	; 0x17
    1d40:	58 8f       	std	Y+24, r21	; 0x18
    1d42:	69 8f       	std	Y+25, r22	; 0x19
    1d44:	7a 8f       	std	Y+26, r23	; 0x1a
    1d46:	8b 8f       	std	Y+27, r24	; 0x1b
    1d48:	9c 8f       	std	Y+28, r25	; 0x1c
		OFF = int64_t(C[2])*65536l+(int64_t(C[4])*dT)/128l;
    1d4a:	80 85       	ldd	r24, Z+8	; 0x08
    1d4c:	91 85       	ldd	r25, Z+9	; 0x09
    1d4e:	3c 01       	movw	r6, r24
    1d50:	81 2c       	mov	r8, r1
    1d52:	91 2c       	mov	r9, r1
    1d54:	a1 2c       	mov	r10, r1
    1d56:	b1 2c       	mov	r11, r1
    1d58:	65 01       	movw	r12, r10
    1d5a:	8d 8f       	std	Y+29, r24	; 0x1d
    1d5c:	7e 8e       	std	Y+30, r7	; 0x1e
    1d5e:	8f 8e       	std	Y+31, r8	; 0x1f
    1d60:	98 a2       	std	Y+32, r9	; 0x20
    1d62:	a9 a2       	std	Y+33, r10	; 0x21
    1d64:	ba a2       	std	Y+34, r11	; 0x22
    1d66:	cb a2       	std	Y+35, r12	; 0x23
    1d68:	dc a2       	std	Y+36, r13	; 0x24
    1d6a:	a9 80       	ldd	r10, Y+1	; 0x01
    1d6c:	ba 80       	ldd	r11, Y+2	; 0x02
    1d6e:	cb 80       	ldd	r12, Y+3	; 0x03
    1d70:	dc 80       	ldd	r13, Y+4	; 0x04
    1d72:	ed 80       	ldd	r14, Y+5	; 0x05
    1d74:	fe 2c       	mov	r15, r14
    1d76:	0e 2d       	mov	r16, r14
    1d78:	1e 2d       	mov	r17, r14
    1d7a:	28 2f       	mov	r18, r24
    1d7c:	37 2d       	mov	r19, r7
    1d7e:	40 e0       	ldi	r20, 0x00	; 0
    1d80:	50 e0       	ldi	r21, 0x00	; 0
    1d82:	60 e0       	ldi	r22, 0x00	; 0
    1d84:	70 e0       	ldi	r23, 0x00	; 0
    1d86:	80 e0       	ldi	r24, 0x00	; 0
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	0e 94 64 25 	call	0x4ac8	; 0x4ac8 <__muldi3>
    1d8e:	12 2f       	mov	r17, r18
    1d90:	3e 87       	std	Y+14, r19	; 0x0e
    1d92:	4d 87       	std	Y+13, r20	; 0x0d
    1d94:	b5 2f       	mov	r27, r21
    1d96:	f6 2f       	mov	r31, r22
    1d98:	e7 2f       	mov	r30, r23
    1d9a:	78 2e       	mov	r7, r24
    1d9c:	89 2e       	mov	r8, r25
    1d9e:	a0 e0       	ldi	r26, 0x00	; 0
    1da0:	0e 94 0a 26 	call	0x4c14	; 0x4c14 <__cmpdi2_s8>
    1da4:	5c f4       	brge	.+22     	; 0x1dbc <_ZN6MS58379calculateEv+0x49e>
    1da6:	af e7       	ldi	r26, 0x7F	; 127
    1da8:	0e 94 f5 25 	call	0x4bea	; 0x4bea <__adddi3_s8>
    1dac:	12 2f       	mov	r17, r18
    1dae:	3e 87       	std	Y+14, r19	; 0x0e
    1db0:	4d 87       	std	Y+13, r20	; 0x0d
    1db2:	b5 2f       	mov	r27, r21
    1db4:	f6 2f       	mov	r31, r22
    1db6:	e7 2f       	mov	r30, r23
    1db8:	78 2e       	mov	r7, r24
    1dba:	89 2e       	mov	r8, r25
    1dbc:	21 2f       	mov	r18, r17
    1dbe:	3e 85       	ldd	r19, Y+14	; 0x0e
    1dc0:	4d 85       	ldd	r20, Y+13	; 0x0d
    1dc2:	5b 2f       	mov	r21, r27
    1dc4:	6f 2f       	mov	r22, r31
    1dc6:	7e 2f       	mov	r23, r30
    1dc8:	87 2d       	mov	r24, r7
    1dca:	98 2d       	mov	r25, r8
    1dcc:	07 e0       	ldi	r16, 0x07	; 7
    1dce:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <__ashrdi3>
    1dd2:	82 2e       	mov	r8, r18
    1dd4:	93 2e       	mov	r9, r19
    1dd6:	74 2e       	mov	r7, r20
    1dd8:	65 2e       	mov	r6, r21
    1dda:	b6 2f       	mov	r27, r22
    1ddc:	a7 2f       	mov	r26, r23
    1dde:	58 2e       	mov	r5, r24
    1de0:	49 2e       	mov	r4, r25
    1de2:	f1 01       	movw	r30, r2
    1de4:	24 81       	ldd	r18, Z+4	; 0x04
    1de6:	35 81       	ldd	r19, Z+5	; 0x05
    1de8:	59 01       	movw	r10, r18
    1dea:	3b 2d       	mov	r19, r11
    1dec:	40 e0       	ldi	r20, 0x00	; 0
    1dee:	50 e0       	ldi	r21, 0x00	; 0
    1df0:	60 e0       	ldi	r22, 0x00	; 0
    1df2:	70 e0       	ldi	r23, 0x00	; 0
    1df4:	80 e0       	ldi	r24, 0x00	; 0
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	00 e1       	ldi	r16, 0x10	; 16
    1dfa:	0e 94 b5 25 	call	0x4b6a	; 0x4b6a <__ashldi3>
    1dfe:	a2 2e       	mov	r10, r18
    1e00:	b3 2e       	mov	r11, r19
    1e02:	c4 2e       	mov	r12, r20
    1e04:	d5 2e       	mov	r13, r21
    1e06:	e6 2e       	mov	r14, r22
    1e08:	f7 2e       	mov	r15, r23
    1e0a:	08 2f       	mov	r16, r24
    1e0c:	19 2f       	mov	r17, r25
    1e0e:	28 2d       	mov	r18, r8
    1e10:	39 2d       	mov	r19, r9
    1e12:	47 2d       	mov	r20, r7
    1e14:	56 2d       	mov	r21, r6
    1e16:	6b 2f       	mov	r22, r27
    1e18:	7a 2f       	mov	r23, r26
    1e1a:	85 2d       	mov	r24, r5
    1e1c:	94 2d       	mov	r25, r4
    1e1e:	0e 94 ec 25 	call	0x4bd8	; 0x4bd8 <__adddi3>
    1e22:	2d 87       	std	Y+13, r18	; 0x0d
    1e24:	3e 87       	std	Y+14, r19	; 0x0e
    1e26:	4f 87       	std	Y+15, r20	; 0x0f
    1e28:	58 8b       	std	Y+16, r21	; 0x10
    1e2a:	69 8b       	std	Y+17, r22	; 0x11
    1e2c:	7a 8b       	std	Y+18, r23	; 0x12
    1e2e:	8b 8b       	std	Y+19, r24	; 0x13
    1e30:	9c 8b       	std	Y+20, r25	; 0x14
		P = (D1*SENS/(2097152l)-OFF)/(8192l);
	}
	
	// Temp conversion
	TEMP = 2000l+int64_t(dT)*C[6]/8388608LL;
    1e32:	84 85       	ldd	r24, Z+12	; 0x0c
    1e34:	95 85       	ldd	r25, Z+13	; 0x0d
    1e36:	3c 01       	movw	r6, r24
    1e38:	81 2c       	mov	r8, r1
    1e3a:	91 2c       	mov	r9, r1
    1e3c:	a1 2c       	mov	r10, r1
    1e3e:	b1 2c       	mov	r11, r1
    1e40:	65 01       	movw	r12, r10
    1e42:	8d 8f       	std	Y+29, r24	; 0x1d
    1e44:	7e 8e       	std	Y+30, r7	; 0x1e
    1e46:	8f 8e       	std	Y+31, r8	; 0x1f
    1e48:	98 a2       	std	Y+32, r9	; 0x20
    1e4a:	a9 a2       	std	Y+33, r10	; 0x21
    1e4c:	ba a2       	std	Y+34, r11	; 0x22
    1e4e:	cb a2       	std	Y+35, r12	; 0x23
    1e50:	dc a2       	std	Y+36, r13	; 0x24
    1e52:	a9 80       	ldd	r10, Y+1	; 0x01
    1e54:	ba 80       	ldd	r11, Y+2	; 0x02
    1e56:	cb 80       	ldd	r12, Y+3	; 0x03
    1e58:	dc 80       	ldd	r13, Y+4	; 0x04
    1e5a:	ed 80       	ldd	r14, Y+5	; 0x05
    1e5c:	fe 2c       	mov	r15, r14
    1e5e:	0e 2d       	mov	r16, r14
    1e60:	1e 2d       	mov	r17, r14
    1e62:	28 2f       	mov	r18, r24
    1e64:	37 2d       	mov	r19, r7
    1e66:	40 e0       	ldi	r20, 0x00	; 0
    1e68:	50 e0       	ldi	r21, 0x00	; 0
    1e6a:	60 e0       	ldi	r22, 0x00	; 0
    1e6c:	70 e0       	ldi	r23, 0x00	; 0
    1e6e:	80 e0       	ldi	r24, 0x00	; 0
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	0e 94 64 25 	call	0x4ac8	; 0x4ac8 <__muldi3>
    1e76:	12 2f       	mov	r17, r18
    1e78:	3d a3       	std	Y+37, r19	; 0x25
    1e7a:	4d 8f       	std	Y+29, r20	; 0x1d
    1e7c:	b5 2f       	mov	r27, r21
    1e7e:	f6 2f       	mov	r31, r22
    1e80:	e7 2f       	mov	r30, r23
    1e82:	78 2e       	mov	r7, r24
    1e84:	89 2e       	mov	r8, r25
    1e86:	a0 e0       	ldi	r26, 0x00	; 0
    1e88:	0e 94 0a 26 	call	0x4c14	; 0x4c14 <__cmpdi2_s8>
    1e8c:	84 f4       	brge	.+32     	; 0x1eae <_ZN6MS58379calculateEv+0x590>
    1e8e:	21 50       	subi	r18, 0x01	; 1
    1e90:	31 09       	sbc	r19, r1
    1e92:	40 48       	sbci	r20, 0x80	; 128
    1e94:	5f 4f       	sbci	r21, 0xFF	; 255
    1e96:	6f 4f       	sbci	r22, 0xFF	; 255
    1e98:	7f 4f       	sbci	r23, 0xFF	; 255
    1e9a:	8f 4f       	sbci	r24, 0xFF	; 255
    1e9c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e9e:	12 2f       	mov	r17, r18
    1ea0:	3d a3       	std	Y+37, r19	; 0x25
    1ea2:	4d 8f       	std	Y+29, r20	; 0x1d
    1ea4:	b5 2f       	mov	r27, r21
    1ea6:	f6 2f       	mov	r31, r22
    1ea8:	e7 2f       	mov	r30, r23
    1eaa:	78 2e       	mov	r7, r24
    1eac:	89 2e       	mov	r8, r25
    1eae:	21 2f       	mov	r18, r17
    1eb0:	3d a1       	ldd	r19, Y+37	; 0x25
    1eb2:	4d 8d       	ldd	r20, Y+29	; 0x1d
    1eb4:	5b 2f       	mov	r21, r27
    1eb6:	6f 2f       	mov	r22, r31
    1eb8:	7e 2f       	mov	r23, r30
    1eba:	87 2d       	mov	r24, r7
    1ebc:	98 2d       	mov	r25, r8
    1ebe:	07 e1       	ldi	r16, 0x17	; 23
    1ec0:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <__ashrdi3>
    1ec4:	82 2e       	mov	r8, r18
    1ec6:	93 2e       	mov	r9, r19
    1ec8:	a4 2e       	mov	r10, r20
    1eca:	b5 2e       	mov	r11, r21
    1ecc:	24 01       	movw	r4, r8
    1ece:	35 01       	movw	r6, r10
    1ed0:	00 ed       	ldi	r16, 0xD0	; 208
    1ed2:	40 0e       	add	r4, r16
    1ed4:	07 e0       	ldi	r16, 0x07	; 7
    1ed6:	50 1e       	adc	r5, r16
    1ed8:	61 1c       	adc	r6, r1
    1eda:	71 1c       	adc	r7, r1
			Ti = (11*int64_t(dT)*int64_t(dT))/(34359738368LL);
			OFFi = (31*(TEMP-2000)*(TEMP-2000))/8;
			SENSi = (63*(TEMP-2000)*(TEMP-2000))/32;
		}
		} else {
		if((TEMP/100)<20){         //Low temp
    1edc:	10 ed       	ldi	r17, 0xD0	; 208
    1ede:	41 16       	cp	r4, r17
    1ee0:	17 e0       	ldi	r17, 0x07	; 7
    1ee2:	51 06       	cpc	r5, r17
    1ee4:	61 04       	cpc	r6, r1
    1ee6:	71 04       	cpc	r7, r1
    1ee8:	0c f4       	brge	.+2      	; 0x1eec <_ZN6MS58379calculateEv+0x5ce>
    1eea:	af c0       	rjmp	.+350    	; 0x204a <_ZN6MS58379calculateEv+0x72c>
    1eec:	8a c1       	rjmp	.+788    	; 0x2202 <__stack+0x3>
	TEMP = 2000l+int64_t(dT)*C[6]/8388608LL;
	
	//Second order compensation
	if ( _model == MS5837_02BA ) {
		if((TEMP/100)<20){         //Low temp
			Ti = (11*int64_t(dT)*int64_t(dT))/(34359738368LL);
    1eee:	29 81       	ldd	r18, Y+1	; 0x01
    1ef0:	3a 81       	ldd	r19, Y+2	; 0x02
    1ef2:	4b 81       	ldd	r20, Y+3	; 0x03
    1ef4:	5c 81       	ldd	r21, Y+4	; 0x04
    1ef6:	6d 81       	ldd	r22, Y+5	; 0x05
    1ef8:	76 2f       	mov	r23, r22
    1efa:	86 2f       	mov	r24, r22
    1efc:	96 2f       	mov	r25, r22
    1efe:	02 e0       	ldi	r16, 0x02	; 2
    1f00:	0e 94 b5 25 	call	0x4b6a	; 0x4b6a <__ashldi3>
    1f04:	a2 2e       	mov	r10, r18
    1f06:	b3 2e       	mov	r11, r19
    1f08:	c4 2e       	mov	r12, r20
    1f0a:	d5 2e       	mov	r13, r21
    1f0c:	e6 2e       	mov	r14, r22
    1f0e:	f7 2e       	mov	r15, r23
    1f10:	e8 2f       	mov	r30, r24
    1f12:	19 2f       	mov	r17, r25
    1f14:	0e 94 b5 25 	call	0x4b6a	; 0x4b6a <__ashldi3>
    1f18:	0e 2f       	mov	r16, r30
    1f1a:	0e 94 01 26 	call	0x4c02	; 0x4c02 <__subdi3>
    1f1e:	a9 80       	ldd	r10, Y+1	; 0x01
    1f20:	ba 80       	ldd	r11, Y+2	; 0x02
    1f22:	cb 80       	ldd	r12, Y+3	; 0x03
    1f24:	dc 80       	ldd	r13, Y+4	; 0x04
    1f26:	ed 80       	ldd	r14, Y+5	; 0x05
    1f28:	fe 2c       	mov	r15, r14
    1f2a:	0e 2d       	mov	r16, r14
    1f2c:	1e 2d       	mov	r17, r14
    1f2e:	0e 94 01 26 	call	0x4c02	; 0x4c02 <__subdi3>
    1f32:	e0 2e       	mov	r14, r16
    1f34:	0f 2d       	mov	r16, r15
    1f36:	0e 94 64 25 	call	0x4ac8	; 0x4ac8 <__muldi3>
    1f3a:	12 2f       	mov	r17, r18
    1f3c:	3d 8f       	std	Y+29, r19	; 0x1d
    1f3e:	4d 83       	std	Y+5, r20	; 0x05
    1f40:	b5 2f       	mov	r27, r21
    1f42:	f6 2f       	mov	r31, r22
    1f44:	e7 2f       	mov	r30, r23
    1f46:	89 83       	std	Y+1, r24	; 0x01
    1f48:	89 2e       	mov	r8, r25
    1f4a:	a0 e0       	ldi	r26, 0x00	; 0
    1f4c:	0e 94 0a 26 	call	0x4c14	; 0x4c14 <__cmpdi2_s8>
    1f50:	84 f4       	brge	.+32     	; 0x1f72 <_ZN6MS58379calculateEv+0x654>
    1f52:	21 50       	subi	r18, 0x01	; 1
    1f54:	31 09       	sbc	r19, r1
    1f56:	41 09       	sbc	r20, r1
    1f58:	51 09       	sbc	r21, r1
    1f5a:	68 4f       	sbci	r22, 0xF8	; 248
    1f5c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f5e:	8f 4f       	sbci	r24, 0xFF	; 255
    1f60:	9f 4f       	sbci	r25, 0xFF	; 255
    1f62:	12 2f       	mov	r17, r18
    1f64:	3d 8f       	std	Y+29, r19	; 0x1d
    1f66:	4d 83       	std	Y+5, r20	; 0x05
    1f68:	b5 2f       	mov	r27, r21
    1f6a:	f6 2f       	mov	r31, r22
    1f6c:	e7 2f       	mov	r30, r23
    1f6e:	89 83       	std	Y+1, r24	; 0x01
    1f70:	89 2e       	mov	r8, r25
    1f72:	21 2f       	mov	r18, r17
    1f74:	3d 8d       	ldd	r19, Y+29	; 0x1d
    1f76:	4d 81       	ldd	r20, Y+5	; 0x05
    1f78:	5b 2f       	mov	r21, r27
    1f7a:	6f 2f       	mov	r22, r31
    1f7c:	7e 2f       	mov	r23, r30
    1f7e:	89 81       	ldd	r24, Y+1	; 0x01
    1f80:	98 2d       	mov	r25, r8
    1f82:	03 e2       	ldi	r16, 0x23	; 35
    1f84:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <__ashrdi3>
    1f88:	82 2e       	mov	r8, r18
    1f8a:	93 2e       	mov	r9, r19
    1f8c:	a4 2e       	mov	r10, r20
    1f8e:	b5 2e       	mov	r11, r21
			OFFi = (31*(TEMP-2000)*(TEMP-2000))/8;
    1f90:	73 01       	movw	r14, r6
    1f92:	62 01       	movw	r12, r4
    1f94:	20 ed       	ldi	r18, 0xD0	; 208
    1f96:	c2 1a       	sub	r12, r18
    1f98:	27 e0       	ldi	r18, 0x07	; 7
    1f9a:	d2 0a       	sbc	r13, r18
    1f9c:	e1 08       	sbc	r14, r1
    1f9e:	f1 08       	sbc	r15, r1
    1fa0:	d7 01       	movw	r26, r14
    1fa2:	c6 01       	movw	r24, r12
    1fa4:	88 0f       	add	r24, r24
    1fa6:	99 1f       	adc	r25, r25
    1fa8:	aa 1f       	adc	r26, r26
    1faa:	bb 1f       	adc	r27, r27
    1fac:	88 0f       	add	r24, r24
    1fae:	99 1f       	adc	r25, r25
    1fb0:	aa 1f       	adc	r26, r26
    1fb2:	bb 1f       	adc	r27, r27
    1fb4:	88 0f       	add	r24, r24
    1fb6:	99 1f       	adc	r25, r25
    1fb8:	aa 1f       	adc	r26, r26
    1fba:	bb 1f       	adc	r27, r27
    1fbc:	88 0f       	add	r24, r24
    1fbe:	99 1f       	adc	r25, r25
    1fc0:	aa 1f       	adc	r26, r26
    1fc2:	bb 1f       	adc	r27, r27
    1fc4:	88 0f       	add	r24, r24
    1fc6:	99 1f       	adc	r25, r25
    1fc8:	aa 1f       	adc	r26, r26
    1fca:	bb 1f       	adc	r27, r27
    1fcc:	9c 01       	movw	r18, r24
    1fce:	ad 01       	movw	r20, r26
    1fd0:	2c 19       	sub	r18, r12
    1fd2:	3d 09       	sbc	r19, r13
    1fd4:	4e 09       	sbc	r20, r14
    1fd6:	5f 09       	sbc	r21, r15
    1fd8:	c7 01       	movw	r24, r14
    1fda:	b6 01       	movw	r22, r12
    1fdc:	0e 94 21 25 	call	0x4a42	; 0x4a42 <__mulsi3>
    1fe0:	8b 01       	movw	r16, r22
    1fe2:	9c 01       	movw	r18, r24
    1fe4:	99 23       	and	r25, r25
    1fe6:	24 f4       	brge	.+8      	; 0x1ff0 <_ZN6MS58379calculateEv+0x6d2>
    1fe8:	09 5f       	subi	r16, 0xF9	; 249
    1fea:	1f 4f       	sbci	r17, 0xFF	; 255
    1fec:	2f 4f       	sbci	r18, 0xFF	; 255
    1fee:	3f 4f       	sbci	r19, 0xFF	; 255
    1ff0:	b9 01       	movw	r22, r18
    1ff2:	a8 01       	movw	r20, r16
    1ff4:	68 94       	set
    1ff6:	12 f8       	bld	r1, 2
    1ff8:	75 95       	asr	r23
    1ffa:	67 95       	ror	r22
    1ffc:	57 95       	ror	r21
    1ffe:	47 95       	ror	r20
    2000:	16 94       	lsr	r1
    2002:	d1 f7       	brne	.-12     	; 0x1ff8 <_ZN6MS58379calculateEv+0x6da>
    2004:	49 83       	std	Y+1, r20	; 0x01
    2006:	5a 83       	std	Y+2, r21	; 0x02
    2008:	6b 83       	std	Y+3, r22	; 0x03
    200a:	7c 83       	std	Y+4, r23	; 0x04
			SENSi = (63*(TEMP-2000)*(TEMP-2000))/32;
    200c:	af e3       	ldi	r26, 0x3F	; 63
    200e:	b0 e0       	ldi	r27, 0x00	; 0
    2010:	a7 01       	movw	r20, r14
    2012:	96 01       	movw	r18, r12
    2014:	0e 94 5a 25 	call	0x4ab4	; 0x4ab4 <__muluhisi3>
    2018:	9b 01       	movw	r18, r22
    201a:	ac 01       	movw	r20, r24
    201c:	c7 01       	movw	r24, r14
    201e:	b6 01       	movw	r22, r12
    2020:	0e 94 21 25 	call	0x4a42	; 0x4a42 <__mulsi3>
    2024:	8b 01       	movw	r16, r22
    2026:	9c 01       	movw	r18, r24
    2028:	99 23       	and	r25, r25
    202a:	24 f4       	brge	.+8      	; 0x2034 <_ZN6MS58379calculateEv+0x716>
    202c:	01 5e       	subi	r16, 0xE1	; 225
    202e:	1f 4f       	sbci	r17, 0xFF	; 255
    2030:	2f 4f       	sbci	r18, 0xFF	; 255
    2032:	3f 4f       	sbci	r19, 0xFF	; 255
    2034:	78 01       	movw	r14, r16
    2036:	89 01       	movw	r16, r18
    2038:	68 94       	set
    203a:	14 f8       	bld	r1, 4
    203c:	15 95       	asr	r17
    203e:	07 95       	ror	r16
    2040:	f7 94       	ror	r15
    2042:	e7 94       	ror	r14
    2044:	16 94       	lsr	r1
    2046:	d1 f7       	brne	.-12     	; 0x203c <_ZN6MS58379calculateEv+0x71e>
    2048:	47 c1       	rjmp	.+654    	; 0x22d8 <__stack+0xd9>
		}
		} else {
		if((TEMP/100)<20){         //Low temp
			Ti = (3*int64_t(dT)*int64_t(dT))/(8589934592LL);
    204a:	29 81       	ldd	r18, Y+1	; 0x01
    204c:	3a 81       	ldd	r19, Y+2	; 0x02
    204e:	4b 81       	ldd	r20, Y+3	; 0x03
    2050:	5c 81       	ldd	r21, Y+4	; 0x04
    2052:	6d 81       	ldd	r22, Y+5	; 0x05
    2054:	76 2f       	mov	r23, r22
    2056:	86 2f       	mov	r24, r22
    2058:	96 2f       	mov	r25, r22
    205a:	01 e0       	ldi	r16, 0x01	; 1
    205c:	0e 94 b5 25 	call	0x4b6a	; 0x4b6a <__ashldi3>
    2060:	a9 80       	ldd	r10, Y+1	; 0x01
    2062:	ba 80       	ldd	r11, Y+2	; 0x02
    2064:	cb 80       	ldd	r12, Y+3	; 0x03
    2066:	dc 80       	ldd	r13, Y+4	; 0x04
    2068:	ed 80       	ldd	r14, Y+5	; 0x05
    206a:	fe 2c       	mov	r15, r14
    206c:	0e 2d       	mov	r16, r14
    206e:	1e 2d       	mov	r17, r14
    2070:	0e 94 ec 25 	call	0x4bd8	; 0x4bd8 <__adddi3>
    2074:	e0 2e       	mov	r14, r16
    2076:	0f 2d       	mov	r16, r15
    2078:	0e 94 64 25 	call	0x4ac8	; 0x4ac8 <__muldi3>
    207c:	12 2f       	mov	r17, r18
    207e:	3d 8f       	std	Y+29, r19	; 0x1d
    2080:	4d 83       	std	Y+5, r20	; 0x05
    2082:	b5 2f       	mov	r27, r21
    2084:	f6 2f       	mov	r31, r22
    2086:	e7 2f       	mov	r30, r23
    2088:	89 83       	std	Y+1, r24	; 0x01
    208a:	89 2e       	mov	r8, r25
    208c:	a0 e0       	ldi	r26, 0x00	; 0
    208e:	0e 94 0a 26 	call	0x4c14	; 0x4c14 <__cmpdi2_s8>
    2092:	84 f4       	brge	.+32     	; 0x20b4 <_ZN6MS58379calculateEv+0x796>
    2094:	21 50       	subi	r18, 0x01	; 1
    2096:	31 09       	sbc	r19, r1
    2098:	41 09       	sbc	r20, r1
    209a:	51 09       	sbc	r21, r1
    209c:	6e 4f       	sbci	r22, 0xFE	; 254
    209e:	7f 4f       	sbci	r23, 0xFF	; 255
    20a0:	8f 4f       	sbci	r24, 0xFF	; 255
    20a2:	9f 4f       	sbci	r25, 0xFF	; 255
    20a4:	12 2f       	mov	r17, r18
    20a6:	3d 8f       	std	Y+29, r19	; 0x1d
    20a8:	4d 83       	std	Y+5, r20	; 0x05
    20aa:	b5 2f       	mov	r27, r21
    20ac:	f6 2f       	mov	r31, r22
    20ae:	e7 2f       	mov	r30, r23
    20b0:	89 83       	std	Y+1, r24	; 0x01
    20b2:	89 2e       	mov	r8, r25
    20b4:	21 2f       	mov	r18, r17
    20b6:	3d 8d       	ldd	r19, Y+29	; 0x1d
    20b8:	4d 81       	ldd	r20, Y+5	; 0x05
    20ba:	5b 2f       	mov	r21, r27
    20bc:	6f 2f       	mov	r22, r31
    20be:	7e 2f       	mov	r23, r30
    20c0:	89 81       	ldd	r24, Y+1	; 0x01
    20c2:	98 2d       	mov	r25, r8
    20c4:	01 e2       	ldi	r16, 0x21	; 33
    20c6:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <__ashrdi3>
    20ca:	2d 83       	std	Y+5, r18	; 0x05
    20cc:	3e 83       	std	Y+6, r19	; 0x06
    20ce:	4f 83       	std	Y+7, r20	; 0x07
    20d0:	58 87       	std	Y+8, r21	; 0x08
			OFFi = (3*(TEMP-2000)*(TEMP-2000))/2;
    20d2:	53 01       	movw	r10, r6
    20d4:	42 01       	movw	r8, r4
    20d6:	50 ed       	ldi	r21, 0xD0	; 208
    20d8:	85 1a       	sub	r8, r21
    20da:	57 e0       	ldi	r21, 0x07	; 7
    20dc:	95 0a       	sbc	r9, r21
    20de:	a1 08       	sbc	r10, r1
    20e0:	b1 08       	sbc	r11, r1
    20e2:	d5 01       	movw	r26, r10
    20e4:	c4 01       	movw	r24, r8
    20e6:	88 0f       	add	r24, r24
    20e8:	99 1f       	adc	r25, r25
    20ea:	aa 1f       	adc	r26, r26
    20ec:	bb 1f       	adc	r27, r27
    20ee:	9c 01       	movw	r18, r24
    20f0:	ad 01       	movw	r20, r26
    20f2:	28 0d       	add	r18, r8
    20f4:	39 1d       	adc	r19, r9
    20f6:	4a 1d       	adc	r20, r10
    20f8:	5b 1d       	adc	r21, r11
    20fa:	c5 01       	movw	r24, r10
    20fc:	b4 01       	movw	r22, r8
    20fe:	0e 94 21 25 	call	0x4a42	; 0x4a42 <__mulsi3>
    2102:	8b 01       	movw	r16, r22
    2104:	9c 01       	movw	r18, r24
    2106:	99 23       	and	r25, r25
    2108:	24 f4       	brge	.+8      	; 0x2112 <_ZN6MS58379calculateEv+0x7f4>
    210a:	0f 5f       	subi	r16, 0xFF	; 255
    210c:	1f 4f       	sbci	r17, 0xFF	; 255
    210e:	2f 4f       	sbci	r18, 0xFF	; 255
    2110:	3f 4f       	sbci	r19, 0xFF	; 255
    2112:	c9 01       	movw	r24, r18
    2114:	b8 01       	movw	r22, r16
    2116:	95 95       	asr	r25
    2118:	87 95       	ror	r24
    211a:	77 95       	ror	r23
    211c:	67 95       	ror	r22
    211e:	69 83       	std	Y+1, r22	; 0x01
    2120:	7a 83       	std	Y+2, r23	; 0x02
    2122:	8b 83       	std	Y+3, r24	; 0x03
    2124:	9c 83       	std	Y+4, r25	; 0x04
			SENSi = (5*(TEMP-2000)*(TEMP-2000))/8;
    2126:	d5 01       	movw	r26, r10
    2128:	c4 01       	movw	r24, r8
    212a:	88 0f       	add	r24, r24
    212c:	99 1f       	adc	r25, r25
    212e:	aa 1f       	adc	r26, r26
    2130:	bb 1f       	adc	r27, r27
    2132:	88 0f       	add	r24, r24
    2134:	99 1f       	adc	r25, r25
    2136:	aa 1f       	adc	r26, r26
    2138:	bb 1f       	adc	r27, r27
    213a:	9c 01       	movw	r18, r24
    213c:	ad 01       	movw	r20, r26
    213e:	28 0d       	add	r18, r8
    2140:	39 1d       	adc	r19, r9
    2142:	4a 1d       	adc	r20, r10
    2144:	5b 1d       	adc	r21, r11
    2146:	c5 01       	movw	r24, r10
    2148:	b4 01       	movw	r22, r8
    214a:	0e 94 21 25 	call	0x4a42	; 0x4a42 <__mulsi3>
    214e:	8b 01       	movw	r16, r22
    2150:	9c 01       	movw	r18, r24
    2152:	99 23       	and	r25, r25
    2154:	24 f4       	brge	.+8      	; 0x215e <_ZN6MS58379calculateEv+0x840>
    2156:	09 5f       	subi	r16, 0xF9	; 249
    2158:	1f 4f       	sbci	r17, 0xFF	; 255
    215a:	2f 4f       	sbci	r18, 0xFF	; 255
    215c:	3f 4f       	sbci	r19, 0xFF	; 255
    215e:	78 01       	movw	r14, r16
    2160:	89 01       	movw	r16, r18
    2162:	68 94       	set
    2164:	12 f8       	bld	r1, 2
    2166:	15 95       	asr	r17
    2168:	07 95       	ror	r16
    216a:	f7 94       	ror	r15
    216c:	e7 94       	ror	r14
    216e:	16 94       	lsr	r1
    2170:	d1 f7       	brne	.-12     	; 0x2166 <_ZN6MS58379calculateEv+0x848>
			if((TEMP/100)<-15){    //Very low temp
    2172:	71 ec       	ldi	r23, 0xC1	; 193
    2174:	47 16       	cp	r4, r23
    2176:	79 ef       	ldi	r23, 0xF9	; 249
    2178:	57 06       	cpc	r5, r23
    217a:	7f ef       	ldi	r23, 0xFF	; 255
    217c:	67 06       	cpc	r6, r23
    217e:	77 06       	cpc	r7, r23
    2180:	0c f0       	brlt	.+2      	; 0x2184 <_ZN6MS58379calculateEv+0x866>
    2182:	7f c1       	rjmp	.+766    	; 0x2482 <__stack+0x283>
				OFFi = OFFi+7*(TEMP+1500l)*(TEMP+1500l);
    2184:	53 01       	movw	r10, r6
    2186:	42 01       	movw	r8, r4
    2188:	8c ed       	ldi	r24, 0xDC	; 220
    218a:	88 0e       	add	r8, r24
    218c:	85 e0       	ldi	r24, 0x05	; 5
    218e:	98 1e       	adc	r9, r24
    2190:	a1 1c       	adc	r10, r1
    2192:	b1 1c       	adc	r11, r1
    2194:	d5 01       	movw	r26, r10
    2196:	c4 01       	movw	r24, r8
    2198:	88 0f       	add	r24, r24
    219a:	99 1f       	adc	r25, r25
    219c:	aa 1f       	adc	r26, r26
    219e:	bb 1f       	adc	r27, r27
    21a0:	88 0f       	add	r24, r24
    21a2:	99 1f       	adc	r25, r25
    21a4:	aa 1f       	adc	r26, r26
    21a6:	bb 1f       	adc	r27, r27
    21a8:	88 0f       	add	r24, r24
    21aa:	99 1f       	adc	r25, r25
    21ac:	aa 1f       	adc	r26, r26
    21ae:	bb 1f       	adc	r27, r27
    21b0:	9c 01       	movw	r18, r24
    21b2:	ad 01       	movw	r20, r26
    21b4:	28 19       	sub	r18, r8
    21b6:	39 09       	sbc	r19, r9
    21b8:	4a 09       	sbc	r20, r10
    21ba:	5b 09       	sbc	r21, r11
    21bc:	c5 01       	movw	r24, r10
    21be:	b4 01       	movw	r22, r8
    21c0:	0e 94 21 25 	call	0x4a42	; 0x4a42 <__mulsi3>
    21c4:	29 81       	ldd	r18, Y+1	; 0x01
    21c6:	3a 81       	ldd	r19, Y+2	; 0x02
    21c8:	4b 81       	ldd	r20, Y+3	; 0x03
    21ca:	5c 81       	ldd	r21, Y+4	; 0x04
    21cc:	26 0f       	add	r18, r22
    21ce:	37 1f       	adc	r19, r23
    21d0:	48 1f       	adc	r20, r24
    21d2:	59 1f       	adc	r21, r25
    21d4:	29 83       	std	Y+1, r18	; 0x01
    21d6:	3a 83       	std	Y+2, r19	; 0x02
    21d8:	4b 83       	std	Y+3, r20	; 0x03
    21da:	5c 83       	std	Y+4, r21	; 0x04
				SENSi = SENSi+4*(TEMP+1500l)*(TEMP+1500l);
    21dc:	a5 01       	movw	r20, r10
    21de:	94 01       	movw	r18, r8
    21e0:	22 0f       	add	r18, r18
    21e2:	33 1f       	adc	r19, r19
    21e4:	44 1f       	adc	r20, r20
    21e6:	55 1f       	adc	r21, r21
    21e8:	22 0f       	add	r18, r18
    21ea:	33 1f       	adc	r19, r19
    21ec:	44 1f       	adc	r20, r20
    21ee:	55 1f       	adc	r21, r21
    21f0:	c5 01       	movw	r24, r10
    21f2:	b4 01       	movw	r22, r8
    21f4:	0e 94 21 25 	call	0x4a42	; 0x4a42 <__mulsi3>
    21f8:	e6 0e       	add	r14, r22
    21fa:	f7 1e       	adc	r15, r23
    21fc:	08 1f       	adc	r16, r24
    21fe:	19 1f       	adc	r17, r25
    2200:	40 c1       	rjmp	.+640    	; 0x2482 <__stack+0x283>
			}
		}
		else if((TEMP/100)>=20){    //High temp
			Ti = 2*(dT*dT)/(137438953472LL);
    2202:	29 81       	ldd	r18, Y+1	; 0x01
    2204:	3a 81       	ldd	r19, Y+2	; 0x02
    2206:	4b 81       	ldd	r20, Y+3	; 0x03
    2208:	5c 81       	ldd	r21, Y+4	; 0x04
    220a:	ca 01       	movw	r24, r20
    220c:	b9 01       	movw	r22, r18
    220e:	0e 94 21 25 	call	0x4a42	; 0x4a42 <__mulsi3>
    2212:	4b 01       	movw	r8, r22
    2214:	5c 01       	movw	r10, r24
    2216:	88 0c       	add	r8, r8
    2218:	99 1c       	adc	r9, r9
    221a:	aa 1c       	adc	r10, r10
    221c:	bb 1c       	adc	r11, r11
    221e:	75 01       	movw	r14, r10
    2220:	64 01       	movw	r12, r8
    2222:	ff 0c       	add	r15, r15
    2224:	cc 08       	sbc	r12, r12
    2226:	dc 2c       	mov	r13, r12
    2228:	76 01       	movw	r14, r12
    222a:	18 2d       	mov	r17, r8
    222c:	9d 8e       	std	Y+29, r9	; 0x1d
    222e:	ad 82       	std	Y+5, r10	; 0x05
    2230:	bb 2d       	mov	r27, r11
    2232:	fc 2d       	mov	r31, r12
    2234:	ec 2d       	mov	r30, r12
    2236:	c9 82       	std	Y+1, r12	; 0x01
    2238:	0c 2d       	mov	r16, r12
    223a:	28 2d       	mov	r18, r8
    223c:	39 2d       	mov	r19, r9
    223e:	4a 2d       	mov	r20, r10
    2240:	5b 2d       	mov	r21, r11
    2242:	6c 2d       	mov	r22, r12
    2244:	7c 2d       	mov	r23, r12
    2246:	8c 2d       	mov	r24, r12
    2248:	9c 2d       	mov	r25, r12
    224a:	a0 e0       	ldi	r26, 0x00	; 0
    224c:	0e 94 0a 26 	call	0x4c14	; 0x4c14 <__cmpdi2_s8>
    2250:	84 f4       	brge	.+32     	; 0x2272 <__stack+0x73>
    2252:	21 50       	subi	r18, 0x01	; 1
    2254:	31 09       	sbc	r19, r1
    2256:	41 09       	sbc	r20, r1
    2258:	51 09       	sbc	r21, r1
    225a:	60 4e       	sbci	r22, 0xE0	; 224
    225c:	7f 4f       	sbci	r23, 0xFF	; 255
    225e:	8f 4f       	sbci	r24, 0xFF	; 255
    2260:	9f 4f       	sbci	r25, 0xFF	; 255
    2262:	12 2f       	mov	r17, r18
    2264:	3d 8f       	std	Y+29, r19	; 0x1d
    2266:	4d 83       	std	Y+5, r20	; 0x05
    2268:	b5 2f       	mov	r27, r21
    226a:	f6 2f       	mov	r31, r22
    226c:	e7 2f       	mov	r30, r23
    226e:	89 83       	std	Y+1, r24	; 0x01
    2270:	09 2f       	mov	r16, r25
    2272:	21 2f       	mov	r18, r17
    2274:	3d 8d       	ldd	r19, Y+29	; 0x1d
    2276:	4d 81       	ldd	r20, Y+5	; 0x05
    2278:	5b 2f       	mov	r21, r27
    227a:	6f 2f       	mov	r22, r31
    227c:	7e 2f       	mov	r23, r30
    227e:	89 81       	ldd	r24, Y+1	; 0x01
    2280:	90 2f       	mov	r25, r16
    2282:	05 e2       	ldi	r16, 0x25	; 37
    2284:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <__ashrdi3>
    2288:	2d 83       	std	Y+5, r18	; 0x05
    228a:	3e 83       	std	Y+6, r19	; 0x06
    228c:	4f 83       	std	Y+7, r20	; 0x07
    228e:	58 87       	std	Y+8, r21	; 0x08
			OFFi = (1*(TEMP-2000)*(TEMP-2000))/16;
    2290:	c3 01       	movw	r24, r6
    2292:	b2 01       	movw	r22, r4
    2294:	60 5d       	subi	r22, 0xD0	; 208
    2296:	77 40       	sbci	r23, 0x07	; 7
    2298:	81 09       	sbc	r24, r1
    229a:	91 09       	sbc	r25, r1
    229c:	9b 01       	movw	r18, r22
    229e:	ac 01       	movw	r20, r24
    22a0:	0e 94 21 25 	call	0x4a42	; 0x4a42 <__mulsi3>
    22a4:	8b 01       	movw	r16, r22
    22a6:	9c 01       	movw	r18, r24
    22a8:	99 23       	and	r25, r25
    22aa:	24 f4       	brge	.+8      	; 0x22b4 <__stack+0xb5>
    22ac:	01 5f       	subi	r16, 0xF1	; 241
    22ae:	1f 4f       	sbci	r17, 0xFF	; 255
    22b0:	2f 4f       	sbci	r18, 0xFF	; 255
    22b2:	3f 4f       	sbci	r19, 0xFF	; 255
    22b4:	48 01       	movw	r8, r16
    22b6:	59 01       	movw	r10, r18
    22b8:	68 94       	set
    22ba:	13 f8       	bld	r1, 3
    22bc:	b5 94       	asr	r11
    22be:	a7 94       	ror	r10
    22c0:	97 94       	ror	r9
    22c2:	87 94       	ror	r8
    22c4:	16 94       	lsr	r1
    22c6:	d1 f7       	brne	.-12     	; 0x22bc <__stack+0xbd>
    22c8:	89 82       	std	Y+1, r8	; 0x01
    22ca:	9a 82       	std	Y+2, r9	; 0x02
    22cc:	ab 82       	std	Y+3, r10	; 0x03
    22ce:	bc 82       	std	Y+4, r11	; 0x04
			SENSi = 0;
    22d0:	e1 2c       	mov	r14, r1
    22d2:	f1 2c       	mov	r15, r1
    22d4:	87 01       	movw	r16, r14
    22d6:	d5 c0       	rjmp	.+426    	; 0x2482 <__stack+0x283>
	}
	
	OFF2 = OFF-OFFi;           //Calculate pressure and temp second order
	SENS2 = SENS-SENSi;
	
	TEMP = (TEMP-Ti);
    22d8:	d3 01       	movw	r26, r6
    22da:	c2 01       	movw	r24, r4
    22dc:	88 19       	sub	r24, r8
    22de:	99 09       	sbc	r25, r9
    22e0:	aa 09       	sbc	r26, r10
    22e2:	bb 09       	sbc	r27, r11
    22e4:	f1 01       	movw	r30, r2
    22e6:	80 8f       	std	Z+24, r24	; 0x18
    22e8:	91 8f       	std	Z+25, r25	; 0x19
    22ea:	a2 8f       	std	Z+26, r26	; 0x1a
    22ec:	b3 8f       	std	Z+27, r27	; 0x1b
	
	if ( _model == MS5837_02BA ) {
		P = (((D1*SENS2)/2097152l-OFF2)/32768l);
    22ee:	80 89       	ldd	r24, Z+16	; 0x10
    22f0:	91 89       	ldd	r25, Z+17	; 0x11
    22f2:	a2 89       	ldd	r26, Z+18	; 0x12
    22f4:	b3 89       	ldd	r27, Z+19	; 0x13
    22f6:	3c 01       	movw	r6, r24
    22f8:	4d 01       	movw	r8, r26
    22fa:	a1 2c       	mov	r10, r1
    22fc:	b1 2c       	mov	r11, r1
    22fe:	65 01       	movw	r12, r10
    2300:	8d 83       	std	Y+5, r24	; 0x05
    2302:	7e 82       	std	Y+6, r7	; 0x06
    2304:	8f 82       	std	Y+7, r8	; 0x07
    2306:	98 86       	std	Y+8, r9	; 0x08
    2308:	a9 86       	std	Y+9, r10	; 0x09
    230a:	ba 86       	std	Y+10, r11	; 0x0a
    230c:	cb 86       	std	Y+11, r12	; 0x0b
    230e:	dc 86       	std	Y+12, r13	; 0x0c
    2310:	27 01       	movw	r4, r14
    2312:	38 01       	movw	r6, r16
    2314:	77 0c       	add	r7, r7
    2316:	44 08       	sbc	r4, r4
    2318:	54 2c       	mov	r5, r4
    231a:	32 01       	movw	r6, r4
    231c:	2d 85       	ldd	r18, Y+13	; 0x0d
    231e:	3e 85       	ldd	r19, Y+14	; 0x0e
    2320:	4f 85       	ldd	r20, Y+15	; 0x0f
    2322:	58 89       	ldd	r21, Y+16	; 0x10
    2324:	69 89       	ldd	r22, Y+17	; 0x11
    2326:	7a 89       	ldd	r23, Y+18	; 0x12
    2328:	8b 89       	ldd	r24, Y+19	; 0x13
    232a:	9c 89       	ldd	r25, Y+20	; 0x14
    232c:	ae 2c       	mov	r10, r14
    232e:	bf 2c       	mov	r11, r15
    2330:	c0 2e       	mov	r12, r16
    2332:	d1 2e       	mov	r13, r17
    2334:	e4 2c       	mov	r14, r4
    2336:	f4 2c       	mov	r15, r4
    2338:	04 2d       	mov	r16, r4
    233a:	14 2d       	mov	r17, r4
    233c:	0e 94 01 26 	call	0x4c02	; 0x4c02 <__subdi3>
    2340:	a2 2e       	mov	r10, r18
    2342:	b3 2e       	mov	r11, r19
    2344:	c4 2e       	mov	r12, r20
    2346:	d5 2e       	mov	r13, r21
    2348:	e6 2e       	mov	r14, r22
    234a:	f7 2e       	mov	r15, r23
    234c:	08 2f       	mov	r16, r24
    234e:	19 2f       	mov	r17, r25
    2350:	2d 81       	ldd	r18, Y+5	; 0x05
    2352:	3e 81       	ldd	r19, Y+6	; 0x06
    2354:	48 2d       	mov	r20, r8
    2356:	59 2d       	mov	r21, r9
    2358:	60 e0       	ldi	r22, 0x00	; 0
    235a:	70 e0       	ldi	r23, 0x00	; 0
    235c:	80 e0       	ldi	r24, 0x00	; 0
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	0e 94 64 25 	call	0x4ac8	; 0x4ac8 <__muldi3>
    2364:	12 2f       	mov	r17, r18
    2366:	3d 87       	std	Y+13, r19	; 0x0d
    2368:	4d 83       	std	Y+5, r20	; 0x05
    236a:	b5 2f       	mov	r27, r21
    236c:	f6 2f       	mov	r31, r22
    236e:	e7 2f       	mov	r30, r23
    2370:	78 2e       	mov	r7, r24
    2372:	89 2e       	mov	r8, r25
    2374:	a0 e0       	ldi	r26, 0x00	; 0
    2376:	0e 94 0a 26 	call	0x4c14	; 0x4c14 <__cmpdi2_s8>
    237a:	84 f4       	brge	.+32     	; 0x239c <__stack+0x19d>
    237c:	21 50       	subi	r18, 0x01	; 1
    237e:	31 09       	sbc	r19, r1
    2380:	40 4e       	sbci	r20, 0xE0	; 224
    2382:	5f 4f       	sbci	r21, 0xFF	; 255
    2384:	6f 4f       	sbci	r22, 0xFF	; 255
    2386:	7f 4f       	sbci	r23, 0xFF	; 255
    2388:	8f 4f       	sbci	r24, 0xFF	; 255
    238a:	9f 4f       	sbci	r25, 0xFF	; 255
    238c:	12 2f       	mov	r17, r18
    238e:	3d 87       	std	Y+13, r19	; 0x0d
    2390:	4d 83       	std	Y+5, r20	; 0x05
    2392:	b5 2f       	mov	r27, r21
    2394:	f6 2f       	mov	r31, r22
    2396:	e7 2f       	mov	r30, r23
    2398:	78 2e       	mov	r7, r24
    239a:	89 2e       	mov	r8, r25
    239c:	21 2f       	mov	r18, r17
    239e:	3d 85       	ldd	r19, Y+13	; 0x0d
    23a0:	4d 81       	ldd	r20, Y+5	; 0x05
    23a2:	5b 2f       	mov	r21, r27
    23a4:	6f 2f       	mov	r22, r31
    23a6:	7e 2f       	mov	r23, r30
    23a8:	87 2d       	mov	r24, r7
    23aa:	98 2d       	mov	r25, r8
    23ac:	05 e1       	ldi	r16, 0x15	; 21
    23ae:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <__ashrdi3>
    23b2:	82 2e       	mov	r8, r18
    23b4:	93 2e       	mov	r9, r19
    23b6:	4d 87       	std	Y+13, r20	; 0x0d
    23b8:	5d 83       	std	Y+5, r21	; 0x05
    23ba:	b6 2f       	mov	r27, r22
    23bc:	a7 2f       	mov	r26, r23
    23be:	f8 2f       	mov	r31, r24
    23c0:	e9 2f       	mov	r30, r25
    23c2:	49 80       	ldd	r4, Y+1	; 0x01
    23c4:	5a 80       	ldd	r5, Y+2	; 0x02
    23c6:	6b 80       	ldd	r6, Y+3	; 0x03
    23c8:	7c 80       	ldd	r7, Y+4	; 0x04
    23ca:	77 0c       	add	r7, r7
    23cc:	44 08       	sbc	r4, r4
    23ce:	54 2c       	mov	r5, r4
    23d0:	32 01       	movw	r6, r4
    23d2:	2d 89       	ldd	r18, Y+21	; 0x15
    23d4:	3e 89       	ldd	r19, Y+22	; 0x16
    23d6:	4f 89       	ldd	r20, Y+23	; 0x17
    23d8:	58 8d       	ldd	r21, Y+24	; 0x18
    23da:	69 8d       	ldd	r22, Y+25	; 0x19
    23dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23e2:	a9 80       	ldd	r10, Y+1	; 0x01
    23e4:	ba 80       	ldd	r11, Y+2	; 0x02
    23e6:	cb 80       	ldd	r12, Y+3	; 0x03
    23e8:	dc 80       	ldd	r13, Y+4	; 0x04
    23ea:	e4 2c       	mov	r14, r4
    23ec:	f4 2c       	mov	r15, r4
    23ee:	04 2d       	mov	r16, r4
    23f0:	14 2d       	mov	r17, r4
    23f2:	0e 94 01 26 	call	0x4c02	; 0x4c02 <__subdi3>
    23f6:	a2 2e       	mov	r10, r18
    23f8:	b3 2e       	mov	r11, r19
    23fa:	c4 2e       	mov	r12, r20
    23fc:	d5 2e       	mov	r13, r21
    23fe:	e6 2e       	mov	r14, r22
    2400:	f7 2e       	mov	r15, r23
    2402:	08 2f       	mov	r16, r24
    2404:	19 2f       	mov	r17, r25
    2406:	28 2d       	mov	r18, r8
    2408:	39 2d       	mov	r19, r9
    240a:	4d 85       	ldd	r20, Y+13	; 0x0d
    240c:	5d 81       	ldd	r21, Y+5	; 0x05
    240e:	6b 2f       	mov	r22, r27
    2410:	7a 2f       	mov	r23, r26
    2412:	8f 2f       	mov	r24, r31
    2414:	9e 2f       	mov	r25, r30
    2416:	0e 94 01 26 	call	0x4c02	; 0x4c02 <__subdi3>
    241a:	12 2f       	mov	r17, r18
    241c:	3d 83       	std	Y+5, r19	; 0x05
    241e:	49 83       	std	Y+1, r20	; 0x01
    2420:	b5 2f       	mov	r27, r21
    2422:	f6 2f       	mov	r31, r22
    2424:	e7 2f       	mov	r30, r23
    2426:	78 2e       	mov	r7, r24
    2428:	89 2e       	mov	r8, r25
    242a:	a0 e0       	ldi	r26, 0x00	; 0
    242c:	0e 94 0a 26 	call	0x4c14	; 0x4c14 <__cmpdi2_s8>
    2430:	84 f4       	brge	.+32     	; 0x2452 <__stack+0x253>
    2432:	21 50       	subi	r18, 0x01	; 1
    2434:	30 48       	sbci	r19, 0x80	; 128
    2436:	4f 4f       	sbci	r20, 0xFF	; 255
    2438:	5f 4f       	sbci	r21, 0xFF	; 255
    243a:	6f 4f       	sbci	r22, 0xFF	; 255
    243c:	7f 4f       	sbci	r23, 0xFF	; 255
    243e:	8f 4f       	sbci	r24, 0xFF	; 255
    2440:	9f 4f       	sbci	r25, 0xFF	; 255
    2442:	12 2f       	mov	r17, r18
    2444:	3d 83       	std	Y+5, r19	; 0x05
    2446:	49 83       	std	Y+1, r20	; 0x01
    2448:	b5 2f       	mov	r27, r21
    244a:	f6 2f       	mov	r31, r22
    244c:	e7 2f       	mov	r30, r23
    244e:	78 2e       	mov	r7, r24
    2450:	89 2e       	mov	r8, r25
    2452:	21 2f       	mov	r18, r17
    2454:	3d 81       	ldd	r19, Y+5	; 0x05
    2456:	49 81       	ldd	r20, Y+1	; 0x01
    2458:	5b 2f       	mov	r21, r27
    245a:	6f 2f       	mov	r22, r31
    245c:	7e 2f       	mov	r23, r30
    245e:	87 2d       	mov	r24, r7
    2460:	98 2d       	mov	r25, r8
    2462:	0f e0       	ldi	r16, 0x0F	; 15
    2464:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <__ashrdi3>
    2468:	d1 01       	movw	r26, r2
    246a:	5c 96       	adiw	r26, 0x1c	; 28
    246c:	2c 93       	st	X, r18
    246e:	5c 97       	sbiw	r26, 0x1c	; 28
    2470:	5d 96       	adiw	r26, 0x1d	; 29
    2472:	3c 93       	st	X, r19
    2474:	5d 97       	sbiw	r26, 0x1d	; 29
    2476:	5e 96       	adiw	r26, 0x1e	; 30
    2478:	4c 93       	st	X, r20
    247a:	5e 97       	sbiw	r26, 0x1e	; 30
    247c:	5f 96       	adiw	r26, 0x1f	; 31
    247e:	5c 93       	st	X, r21
    2480:	da c0       	rjmp	.+436    	; 0x2636 <__stack+0x437>
	}
	
	OFF2 = OFF-OFFi;           //Calculate pressure and temp second order
	SENS2 = SENS-SENSi;
	
	TEMP = (TEMP-Ti);
    2482:	8d 80       	ldd	r8, Y+5	; 0x05
    2484:	9e 80       	ldd	r9, Y+6	; 0x06
    2486:	af 80       	ldd	r10, Y+7	; 0x07
    2488:	b8 84       	ldd	r11, Y+8	; 0x08
    248a:	48 18       	sub	r4, r8
    248c:	59 08       	sbc	r5, r9
    248e:	6a 08       	sbc	r6, r10
    2490:	7b 08       	sbc	r7, r11
    2492:	d1 01       	movw	r26, r2
    2494:	58 96       	adiw	r26, 0x18	; 24
    2496:	4d 92       	st	X+, r4
    2498:	5d 92       	st	X+, r5
    249a:	6d 92       	st	X+, r6
    249c:	7c 92       	st	X, r7
    249e:	5b 97       	sbiw	r26, 0x1b	; 27
	
	if ( _model == MS5837_02BA ) {
		P = (((D1*SENS2)/2097152l-OFF2)/32768l);
	} else {
		P = (((D1*SENS2)/2097152l-OFF2)/8192l);
    24a0:	50 96       	adiw	r26, 0x10	; 16
    24a2:	8d 91       	ld	r24, X+
    24a4:	9d 91       	ld	r25, X+
    24a6:	0d 90       	ld	r0, X+
    24a8:	bc 91       	ld	r27, X
    24aa:	a0 2d       	mov	r26, r0
    24ac:	3c 01       	movw	r6, r24
    24ae:	4d 01       	movw	r8, r26
    24b0:	a1 2c       	mov	r10, r1
    24b2:	b1 2c       	mov	r11, r1
    24b4:	65 01       	movw	r12, r10
    24b6:	8d 83       	std	Y+5, r24	; 0x05
    24b8:	7e 82       	std	Y+6, r7	; 0x06
    24ba:	8f 82       	std	Y+7, r8	; 0x07
    24bc:	98 86       	std	Y+8, r9	; 0x08
    24be:	a9 86       	std	Y+9, r10	; 0x09
    24c0:	ba 86       	std	Y+10, r11	; 0x0a
    24c2:	cb 86       	std	Y+11, r12	; 0x0b
    24c4:	dc 86       	std	Y+12, r13	; 0x0c
    24c6:	27 01       	movw	r4, r14
    24c8:	38 01       	movw	r6, r16
    24ca:	77 0c       	add	r7, r7
    24cc:	44 08       	sbc	r4, r4
    24ce:	54 2c       	mov	r5, r4
    24d0:	32 01       	movw	r6, r4
    24d2:	2d 89       	ldd	r18, Y+21	; 0x15
    24d4:	3e 89       	ldd	r19, Y+22	; 0x16
    24d6:	4f 89       	ldd	r20, Y+23	; 0x17
    24d8:	58 8d       	ldd	r21, Y+24	; 0x18
    24da:	69 8d       	ldd	r22, Y+25	; 0x19
    24dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24e2:	ae 2c       	mov	r10, r14
    24e4:	bf 2c       	mov	r11, r15
    24e6:	c0 2e       	mov	r12, r16
    24e8:	d1 2e       	mov	r13, r17
    24ea:	e4 2c       	mov	r14, r4
    24ec:	f4 2c       	mov	r15, r4
    24ee:	04 2d       	mov	r16, r4
    24f0:	14 2d       	mov	r17, r4
    24f2:	0e 94 01 26 	call	0x4c02	; 0x4c02 <__subdi3>
    24f6:	a2 2e       	mov	r10, r18
    24f8:	b3 2e       	mov	r11, r19
    24fa:	c4 2e       	mov	r12, r20
    24fc:	d5 2e       	mov	r13, r21
    24fe:	e6 2e       	mov	r14, r22
    2500:	f7 2e       	mov	r15, r23
    2502:	08 2f       	mov	r16, r24
    2504:	19 2f       	mov	r17, r25
    2506:	2d 81       	ldd	r18, Y+5	; 0x05
    2508:	3e 81       	ldd	r19, Y+6	; 0x06
    250a:	48 2d       	mov	r20, r8
    250c:	59 2d       	mov	r21, r9
    250e:	60 e0       	ldi	r22, 0x00	; 0
    2510:	70 e0       	ldi	r23, 0x00	; 0
    2512:	80 e0       	ldi	r24, 0x00	; 0
    2514:	90 e0       	ldi	r25, 0x00	; 0
    2516:	0e 94 64 25 	call	0x4ac8	; 0x4ac8 <__muldi3>
    251a:	12 2f       	mov	r17, r18
    251c:	3d 8b       	std	Y+21, r19	; 0x15
    251e:	4d 83       	std	Y+5, r20	; 0x05
    2520:	b5 2f       	mov	r27, r21
    2522:	f6 2f       	mov	r31, r22
    2524:	e7 2f       	mov	r30, r23
    2526:	58 2e       	mov	r5, r24
    2528:	69 2e       	mov	r6, r25
    252a:	a0 e0       	ldi	r26, 0x00	; 0
    252c:	0e 94 0a 26 	call	0x4c14	; 0x4c14 <__cmpdi2_s8>
    2530:	84 f4       	brge	.+32     	; 0x2552 <__stack+0x353>
    2532:	21 50       	subi	r18, 0x01	; 1
    2534:	31 09       	sbc	r19, r1
    2536:	40 4e       	sbci	r20, 0xE0	; 224
    2538:	5f 4f       	sbci	r21, 0xFF	; 255
    253a:	6f 4f       	sbci	r22, 0xFF	; 255
    253c:	7f 4f       	sbci	r23, 0xFF	; 255
    253e:	8f 4f       	sbci	r24, 0xFF	; 255
    2540:	9f 4f       	sbci	r25, 0xFF	; 255
    2542:	12 2f       	mov	r17, r18
    2544:	3d 8b       	std	Y+21, r19	; 0x15
    2546:	4d 83       	std	Y+5, r20	; 0x05
    2548:	b5 2f       	mov	r27, r21
    254a:	f6 2f       	mov	r31, r22
    254c:	e7 2f       	mov	r30, r23
    254e:	58 2e       	mov	r5, r24
    2550:	69 2e       	mov	r6, r25
    2552:	21 2f       	mov	r18, r17
    2554:	3d 89       	ldd	r19, Y+21	; 0x15
    2556:	4d 81       	ldd	r20, Y+5	; 0x05
    2558:	5b 2f       	mov	r21, r27
    255a:	6f 2f       	mov	r22, r31
    255c:	7e 2f       	mov	r23, r30
    255e:	85 2d       	mov	r24, r5
    2560:	96 2d       	mov	r25, r6
    2562:	05 e1       	ldi	r16, 0x15	; 21
    2564:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <__ashrdi3>
    2568:	82 2e       	mov	r8, r18
    256a:	93 2e       	mov	r9, r19
    256c:	4d 8b       	std	Y+21, r20	; 0x15
    256e:	5d 83       	std	Y+5, r21	; 0x05
    2570:	b6 2f       	mov	r27, r22
    2572:	a7 2f       	mov	r26, r23
    2574:	f8 2f       	mov	r31, r24
    2576:	e9 2f       	mov	r30, r25
    2578:	49 80       	ldd	r4, Y+1	; 0x01
    257a:	5a 80       	ldd	r5, Y+2	; 0x02
    257c:	6b 80       	ldd	r6, Y+3	; 0x03
    257e:	7c 80       	ldd	r7, Y+4	; 0x04
    2580:	77 0c       	add	r7, r7
    2582:	44 08       	sbc	r4, r4
    2584:	54 2c       	mov	r5, r4
    2586:	32 01       	movw	r6, r4
    2588:	2d 85       	ldd	r18, Y+13	; 0x0d
    258a:	3e 85       	ldd	r19, Y+14	; 0x0e
    258c:	4f 85       	ldd	r20, Y+15	; 0x0f
    258e:	58 89       	ldd	r21, Y+16	; 0x10
    2590:	69 89       	ldd	r22, Y+17	; 0x11
    2592:	7a 89       	ldd	r23, Y+18	; 0x12
    2594:	8b 89       	ldd	r24, Y+19	; 0x13
    2596:	9c 89       	ldd	r25, Y+20	; 0x14
    2598:	a9 80       	ldd	r10, Y+1	; 0x01
    259a:	ba 80       	ldd	r11, Y+2	; 0x02
    259c:	cb 80       	ldd	r12, Y+3	; 0x03
    259e:	dc 80       	ldd	r13, Y+4	; 0x04
    25a0:	e4 2c       	mov	r14, r4
    25a2:	f4 2c       	mov	r15, r4
    25a4:	04 2d       	mov	r16, r4
    25a6:	14 2d       	mov	r17, r4
    25a8:	0e 94 01 26 	call	0x4c02	; 0x4c02 <__subdi3>
    25ac:	a2 2e       	mov	r10, r18
    25ae:	b3 2e       	mov	r11, r19
    25b0:	c4 2e       	mov	r12, r20
    25b2:	d5 2e       	mov	r13, r21
    25b4:	e6 2e       	mov	r14, r22
    25b6:	f7 2e       	mov	r15, r23
    25b8:	08 2f       	mov	r16, r24
    25ba:	19 2f       	mov	r17, r25
    25bc:	28 2d       	mov	r18, r8
    25be:	39 2d       	mov	r19, r9
    25c0:	4d 89       	ldd	r20, Y+21	; 0x15
    25c2:	5d 81       	ldd	r21, Y+5	; 0x05
    25c4:	6b 2f       	mov	r22, r27
    25c6:	7a 2f       	mov	r23, r26
    25c8:	8f 2f       	mov	r24, r31
    25ca:	9e 2f       	mov	r25, r30
    25cc:	0e 94 01 26 	call	0x4c02	; 0x4c02 <__subdi3>
    25d0:	92 2e       	mov	r9, r18
    25d2:	a3 2e       	mov	r10, r19
    25d4:	b4 2e       	mov	r11, r20
    25d6:	c5 2e       	mov	r12, r21
    25d8:	d6 2e       	mov	r13, r22
    25da:	e7 2e       	mov	r14, r23
    25dc:	78 2e       	mov	r7, r24
    25de:	89 2e       	mov	r8, r25
    25e0:	a0 e0       	ldi	r26, 0x00	; 0
    25e2:	0e 94 0a 26 	call	0x4c14	; 0x4c14 <__cmpdi2_s8>
    25e6:	84 f4       	brge	.+32     	; 0x2608 <__stack+0x409>
    25e8:	21 50       	subi	r18, 0x01	; 1
    25ea:	30 4e       	sbci	r19, 0xE0	; 224
    25ec:	4f 4f       	sbci	r20, 0xFF	; 255
    25ee:	5f 4f       	sbci	r21, 0xFF	; 255
    25f0:	6f 4f       	sbci	r22, 0xFF	; 255
    25f2:	7f 4f       	sbci	r23, 0xFF	; 255
    25f4:	8f 4f       	sbci	r24, 0xFF	; 255
    25f6:	9f 4f       	sbci	r25, 0xFF	; 255
    25f8:	92 2e       	mov	r9, r18
    25fa:	a3 2e       	mov	r10, r19
    25fc:	b4 2e       	mov	r11, r20
    25fe:	c5 2e       	mov	r12, r21
    2600:	d6 2e       	mov	r13, r22
    2602:	e7 2e       	mov	r14, r23
    2604:	78 2e       	mov	r7, r24
    2606:	89 2e       	mov	r8, r25
    2608:	29 2d       	mov	r18, r9
    260a:	3a 2d       	mov	r19, r10
    260c:	4b 2d       	mov	r20, r11
    260e:	5c 2d       	mov	r21, r12
    2610:	6d 2d       	mov	r22, r13
    2612:	7e 2d       	mov	r23, r14
    2614:	87 2d       	mov	r24, r7
    2616:	98 2d       	mov	r25, r8
    2618:	0d e0       	ldi	r16, 0x0D	; 13
    261a:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <__ashrdi3>
    261e:	d1 01       	movw	r26, r2
    2620:	5c 96       	adiw	r26, 0x1c	; 28
    2622:	2c 93       	st	X, r18
    2624:	5c 97       	sbiw	r26, 0x1c	; 28
    2626:	5d 96       	adiw	r26, 0x1d	; 29
    2628:	3c 93       	st	X, r19
    262a:	5d 97       	sbiw	r26, 0x1d	; 29
    262c:	5e 96       	adiw	r26, 0x1e	; 30
    262e:	4c 93       	st	X, r20
    2630:	5e 97       	sbiw	r26, 0x1e	; 30
    2632:	5f 96       	adiw	r26, 0x1f	; 31
    2634:	5c 93       	st	X, r21
	}
}
    2636:	a5 96       	adiw	r28, 0x25	; 37
    2638:	0f b6       	in	r0, 0x3f	; 63
    263a:	f8 94       	cli
    263c:	de bf       	out	0x3e, r29	; 62
    263e:	0f be       	out	0x3f, r0	; 63
    2640:	cd bf       	out	0x3d, r28	; 61
    2642:	df 91       	pop	r29
    2644:	cf 91       	pop	r28
    2646:	1f 91       	pop	r17
    2648:	0f 91       	pop	r16
    264a:	ff 90       	pop	r15
    264c:	ef 90       	pop	r14
    264e:	df 90       	pop	r13
    2650:	cf 90       	pop	r12
    2652:	bf 90       	pop	r11
    2654:	af 90       	pop	r10
    2656:	9f 90       	pop	r9
    2658:	8f 90       	pop	r8
    265a:	7f 90       	pop	r7
    265c:	6f 90       	pop	r6
    265e:	5f 90       	pop	r5
    2660:	4f 90       	pop	r4
    2662:	3f 90       	pop	r3
    2664:	2f 90       	pop	r2
    2666:	08 95       	ret

00002668 <_ZN6MS58378pressureEf>:

float MS5837::pressure(float conversion) {
    2668:	cf 92       	push	r12
    266a:	df 92       	push	r13
    266c:	ef 92       	push	r14
    266e:	ff 92       	push	r15
    2670:	6a 01       	movw	r12, r20
    2672:	7b 01       	movw	r14, r22
	if ( _model == MS5837_02BA ) {
    2674:	fc 01       	movw	r30, r24
    2676:	20 a1       	ldd	r18, Z+32	; 0x20
    2678:	21 30       	cpi	r18, 0x01	; 1
    267a:	89 f4       	brne	.+34     	; 0x269e <_ZN6MS58378pressureEf+0x36>
		return P*conversion/100.0f;
    267c:	64 8d       	ldd	r22, Z+28	; 0x1c
    267e:	75 8d       	ldd	r23, Z+29	; 0x1d
    2680:	86 8d       	ldd	r24, Z+30	; 0x1e
    2682:	97 8d       	ldd	r25, Z+31	; 0x1f
    2684:	0e 94 0a 24 	call	0x4814	; 0x4814 <__floatsisf>
    2688:	a7 01       	movw	r20, r14
    268a:	96 01       	movw	r18, r12
    268c:	0e 94 be 24 	call	0x497c	; 0x497c <__mulsf3>
    2690:	20 e0       	ldi	r18, 0x00	; 0
    2692:	30 e0       	ldi	r19, 0x00	; 0
    2694:	48 ec       	ldi	r20, 0xC8	; 200
    2696:	52 e4       	ldi	r21, 0x42	; 66
    2698:	0e 94 74 23 	call	0x46e8	; 0x46e8 <__divsf3>
    269c:	11 c0       	rjmp	.+34     	; 0x26c0 <_ZN6MS58378pressureEf+0x58>
	}
	else {
		return P*conversion/10.0f;
    269e:	fc 01       	movw	r30, r24
    26a0:	64 8d       	ldd	r22, Z+28	; 0x1c
    26a2:	75 8d       	ldd	r23, Z+29	; 0x1d
    26a4:	86 8d       	ldd	r24, Z+30	; 0x1e
    26a6:	97 8d       	ldd	r25, Z+31	; 0x1f
    26a8:	0e 94 0a 24 	call	0x4814	; 0x4814 <__floatsisf>
    26ac:	a7 01       	movw	r20, r14
    26ae:	96 01       	movw	r18, r12
    26b0:	0e 94 be 24 	call	0x497c	; 0x497c <__mulsf3>
    26b4:	20 e0       	ldi	r18, 0x00	; 0
    26b6:	30 e0       	ldi	r19, 0x00	; 0
    26b8:	40 e2       	ldi	r20, 0x20	; 32
    26ba:	51 e4       	ldi	r21, 0x41	; 65
    26bc:	0e 94 74 23 	call	0x46e8	; 0x46e8 <__divsf3>
	}
}
    26c0:	ff 90       	pop	r15
    26c2:	ef 90       	pop	r14
    26c4:	df 90       	pop	r13
    26c6:	cf 90       	pop	r12
    26c8:	08 95       	ret

000026ca <_ZN6MS583711temperatureEv>:

float MS5837::temperature() {
	return TEMP/100.0f;
    26ca:	fc 01       	movw	r30, r24
    26cc:	60 8d       	ldd	r22, Z+24	; 0x18
    26ce:	71 8d       	ldd	r23, Z+25	; 0x19
    26d0:	82 8d       	ldd	r24, Z+26	; 0x1a
    26d2:	93 8d       	ldd	r25, Z+27	; 0x1b
    26d4:	0e 94 0a 24 	call	0x4814	; 0x4814 <__floatsisf>
    26d8:	20 e0       	ldi	r18, 0x00	; 0
    26da:	30 e0       	ldi	r19, 0x00	; 0
    26dc:	48 ec       	ldi	r20, 0xC8	; 200
    26de:	52 e4       	ldi	r21, 0x42	; 66
    26e0:	0c 94 74 23 	jmp	0x46e8	; 0x46e8 <__divsf3>
}
    26e4:	08 95       	ret

000026e6 <_ZN6MS58374crc4EPj>:
float MS5837::altitude() {
	return (1-pow((pressure()/1013.25),.190284))*145366.45*.3048;
}*/


uint8_t MS5837::crc4(uint16_t n_prom[]) {
    26e6:	cf 93       	push	r28
    26e8:	df 93       	push	r29
    26ea:	eb 01       	movw	r28, r22
	uint16_t n_rem = 0;

	n_prom[0] = ((n_prom[0]) & 0x0FFF);
    26ec:	88 81       	ld	r24, Y
    26ee:	99 81       	ldd	r25, Y+1	; 0x01
    26f0:	9f 70       	andi	r25, 0x0F	; 15
    26f2:	99 83       	std	Y+1, r25	; 0x01
    26f4:	88 83       	st	Y, r24
	n_prom[7] = 0;
    26f6:	1f 86       	std	Y+15, r1	; 0x0f
    26f8:	1e 86       	std	Y+14, r1	; 0x0e
    26fa:	40 e0       	ldi	r20, 0x00	; 0
    26fc:	50 e0       	ldi	r21, 0x00	; 0
	return (1-pow((pressure()/1013.25),.190284))*145366.45*.3048;
}*/


uint8_t MS5837::crc4(uint16_t n_prom[]) {
	uint16_t n_rem = 0;
    26fe:	80 e0       	ldi	r24, 0x00	; 0
    2700:	90 e0       	ldi	r25, 0x00	; 0

	n_prom[0] = ((n_prom[0]) & 0x0FFF);
	n_prom[7] = 0;

	for ( uint8_t i = 0 ; i < 16; i++ ) {
		if ( i%2 == 1 ) {
    2702:	40 ff       	sbrs	r20, 0
    2704:	07 c0       	rjmp	.+14     	; 0x2714 <_ZN6MS58374crc4EPj+0x2e>
			n_rem ^= (uint16_t)((n_prom[i>>1]) & 0x00FF);
    2706:	fa 01       	movw	r30, r20
    2708:	ee 7f       	andi	r30, 0xFE	; 254
    270a:	ec 0f       	add	r30, r28
    270c:	fd 1f       	adc	r31, r29
    270e:	20 81       	ld	r18, Z
    2710:	82 27       	eor	r24, r18
    2712:	1d c0       	rjmp	.+58     	; 0x274e <_ZN6MS58374crc4EPj+0x68>
			} else {
			n_rem ^= (uint16_t)(n_prom[i>>1] >> 8);
    2714:	fa 01       	movw	r30, r20
    2716:	ee 7f       	andi	r30, 0xFE	; 254
    2718:	ec 0f       	add	r30, r28
    271a:	fd 1f       	adc	r31, r29
    271c:	a1 81       	ldd	r26, Z+1	; 0x01
    271e:	b0 e0       	ldi	r27, 0x00	; 0
    2720:	8a 27       	eor	r24, r26
    2722:	9b 27       	eor	r25, r27
    2724:	14 c0       	rjmp	.+40     	; 0x274e <_ZN6MS58374crc4EPj+0x68>
		}
		for ( uint8_t n_bit = 8 ; n_bit > 0 ; n_bit-- ) {
			if ( n_rem & 0x8000 ) {
    2726:	99 23       	and	r25, r25
    2728:	2c f4       	brge	.+10     	; 0x2734 <_ZN6MS58374crc4EPj+0x4e>
				n_rem = (n_rem << 1) ^ 0x3000;
    272a:	88 0f       	add	r24, r24
    272c:	99 1f       	adc	r25, r25
    272e:	30 e3       	ldi	r19, 0x30	; 48
    2730:	93 27       	eor	r25, r19
    2732:	02 c0       	rjmp	.+4      	; 0x2738 <_ZN6MS58374crc4EPj+0x52>
				} else {
				n_rem = (n_rem << 1);
    2734:	88 0f       	add	r24, r24
    2736:	99 1f       	adc	r25, r25
    2738:	21 50       	subi	r18, 0x01	; 1
		if ( i%2 == 1 ) {
			n_rem ^= (uint16_t)((n_prom[i>>1]) & 0x00FF);
			} else {
			n_rem ^= (uint16_t)(n_prom[i>>1] >> 8);
		}
		for ( uint8_t n_bit = 8 ; n_bit > 0 ; n_bit-- ) {
    273a:	a9 f7       	brne	.-22     	; 0x2726 <_ZN6MS58374crc4EPj+0x40>
    273c:	4f 5f       	subi	r20, 0xFF	; 255
    273e:	5f 4f       	sbci	r21, 0xFF	; 255
	uint16_t n_rem = 0;

	n_prom[0] = ((n_prom[0]) & 0x0FFF);
	n_prom[7] = 0;

	for ( uint8_t i = 0 ; i < 16; i++ ) {
    2740:	40 31       	cpi	r20, 0x10	; 16
    2742:	51 05       	cpc	r21, r1
    2744:	f1 f6       	brne	.-68     	; 0x2702 <_ZN6MS58374crc4EPj+0x1c>
		}
	}
	
	n_rem = ((n_rem >> 12) & 0x000F);

	return n_rem ^ 0x00;
    2746:	89 2f       	mov	r24, r25
    2748:	82 95       	swap	r24
    274a:	8f 70       	andi	r24, 0x0F	; 15
    274c:	02 c0       	rjmp	.+4      	; 0x2752 <_ZN6MS58374crc4EPj+0x6c>
	return (1-pow((pressure()/1013.25),.190284))*145366.45*.3048;
}*/


uint8_t MS5837::crc4(uint16_t n_prom[]) {
	uint16_t n_rem = 0;
    274e:	28 e0       	ldi	r18, 0x08	; 8
    2750:	ea cf       	rjmp	.-44     	; 0x2726 <_ZN6MS58374crc4EPj+0x40>
	}
	
	n_rem = ((n_rem >> 12) & 0x000F);

	return n_rem ^ 0x00;
    2752:	df 91       	pop	r29
    2754:	cf 91       	pop	r28
    2756:	08 95       	ret

00002758 <_ZN6MS58375beginEv>:

MS5837::MS5837(HardwareTimer &timer) : _timer(&timer) {
	fluidDensity = 1029;
}

bool MS5837::begin() {
    2758:	cf 92       	push	r12
    275a:	df 92       	push	r13
    275c:	ef 92       	push	r14
    275e:	ff 92       	push	r15
    2760:	0f 93       	push	r16
    2762:	1f 93       	push	r17
    2764:	cf 93       	push	r28
    2766:	df 93       	push	r29
    2768:	6c 01       	movw	r12, r24
	Wire.begin();
    276a:	86 e9       	ldi	r24, 0x96	; 150
    276c:	97 e0       	ldi	r25, 0x07	; 7
    276e:	0e 94 ff 1d 	call	0x3bfe	; 0x3bfe <_ZN7TwoWire5beginEv>
	_timer->beginMs(10);
    2772:	40 e0       	ldi	r20, 0x00	; 0
    2774:	50 e0       	ldi	r21, 0x00	; 0
    2776:	60 e2       	ldi	r22, 0x20	; 32
    2778:	71 e4       	ldi	r23, 0x41	; 65
    277a:	f6 01       	movw	r30, r12
    277c:	82 a1       	ldd	r24, Z+34	; 0x22
    277e:	93 a1       	ldd	r25, Z+35	; 0x23
    2780:	42 d6       	rcall	.+3204   	; 0x3406 <_ZN13HardwareTimer7beginMsEf>
	
	// Reset the MS5837, per datasheet
	Wire.beginTransmission(MS5837_ADDR);
    2782:	66 e7       	ldi	r22, 0x76	; 118
    2784:	70 e0       	ldi	r23, 0x00	; 0
    2786:	86 e9       	ldi	r24, 0x96	; 150
    2788:	97 e0       	ldi	r25, 0x07	; 7
    278a:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <_ZN7TwoWire17beginTransmissionEi>
    278e:	e0 91 96 07 	lds	r30, 0x0796	; 0x800796 <Wire>
    2792:	f0 91 97 07 	lds	r31, 0x0797	; 0x800797 <Wire+0x1>
    2796:	01 90       	ld	r0, Z+
    2798:	f0 81       	ld	r31, Z
    279a:	e0 2d       	mov	r30, r0
    279c:	6e e1       	ldi	r22, 0x1E	; 30
    279e:	86 e9       	ldi	r24, 0x96	; 150
    27a0:	97 e0       	ldi	r25, 0x07	; 7
    27a2:	19 95       	eicall
	Wire.write(MS5837_RESET);
	Wire.endTransmission();
    27a4:	86 e9       	ldi	r24, 0x96	; 150
    27a6:	97 e0       	ldi	r25, 0x07	; 7
    27a8:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <_ZN7TwoWire15endTransmissionEv>

	// Wait for reset to complete
	//_delay_ms(10);
	_timer->start(1);
    27ac:	61 e0       	ldi	r22, 0x01	; 1
    27ae:	f6 01       	movw	r30, r12
    27b0:	82 a1       	ldd	r24, Z+34	; 0x22
    27b2:	93 a1       	ldd	r25, Z+35	; 0x23
    27b4:	97 d6       	rcall	.+3374   	; 0x34e4 <_ZN13HardwareTimer5startEh>
	_timer->waitForFinish();
    27b6:	f6 01       	movw	r30, r12
    27b8:	82 a1       	ldd	r24, Z+34	; 0x22
    27ba:	93 a1       	ldd	r25, Z+35	; 0x23
    27bc:	a7 d6       	rcall	.+3406   	; 0x350c <_ZN13HardwareTimer13waitForFinishEv>
    27be:	76 01       	movw	r14, r12
    27c0:	c0 ea       	ldi	r28, 0xA0	; 160

	// Read calibration values and CRC
	for ( uint8_t i = 0 ; i < 7 ; i++ ) {
		Wire.beginTransmission(MS5837_ADDR);
    27c2:	66 e7       	ldi	r22, 0x76	; 118
    27c4:	70 e0       	ldi	r23, 0x00	; 0
    27c6:	86 e9       	ldi	r24, 0x96	; 150
    27c8:	97 e0       	ldi	r25, 0x07	; 7
    27ca:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <_ZN7TwoWire17beginTransmissionEi>
    27ce:	e0 91 96 07 	lds	r30, 0x0796	; 0x800796 <Wire>
    27d2:	f0 91 97 07 	lds	r31, 0x0797	; 0x800797 <Wire+0x1>
    27d6:	01 90       	ld	r0, Z+
    27d8:	f0 81       	ld	r31, Z
    27da:	e0 2d       	mov	r30, r0
    27dc:	6c 2f       	mov	r22, r28
    27de:	86 e9       	ldi	r24, 0x96	; 150
    27e0:	97 e0       	ldi	r25, 0x07	; 7
    27e2:	19 95       	eicall
		Wire.write(MS5837_PROM_READ+i*2);
		Wire.endTransmission();
    27e4:	86 e9       	ldi	r24, 0x96	; 150
    27e6:	97 e0       	ldi	r25, 0x07	; 7
    27e8:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <_ZN7TwoWire15endTransmissionEv>

		Wire.requestFrom(MS5837_ADDR,2);
    27ec:	42 e0       	ldi	r20, 0x02	; 2
    27ee:	50 e0       	ldi	r21, 0x00	; 0
    27f0:	66 e7       	ldi	r22, 0x76	; 118
    27f2:	70 e0       	ldi	r23, 0x00	; 0
    27f4:	86 e9       	ldi	r24, 0x96	; 150
    27f6:	97 e0       	ldi	r25, 0x07	; 7
    27f8:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <_ZN7TwoWire11requestFromEii>
		C[i] = (Wire.read() << 8) | Wire.read();
    27fc:	86 e9       	ldi	r24, 0x96	; 150
    27fe:	97 e0       	ldi	r25, 0x07	; 7
    2800:	0e 94 4a 1d 	call	0x3a94	; 0x3a94 <_ZN7TwoWire4readEv>
    2804:	d8 2f       	mov	r29, r24
    2806:	86 e9       	ldi	r24, 0x96	; 150
    2808:	97 e0       	ldi	r25, 0x07	; 7
    280a:	0e 94 4a 1d 	call	0x3a94	; 0x3a94 <_ZN7TwoWire4readEv>
    280e:	1d 2f       	mov	r17, r29
    2810:	00 e0       	ldi	r16, 0x00	; 0
    2812:	80 2b       	or	r24, r16
    2814:	91 2b       	or	r25, r17
    2816:	f7 01       	movw	r30, r14
    2818:	81 93       	st	Z+, r24
    281a:	91 93       	st	Z+, r25
    281c:	7f 01       	movw	r14, r30
    281e:	ce 5f       	subi	r28, 0xFE	; 254
	//_delay_ms(10);
	_timer->start(1);
	_timer->waitForFinish();

	// Read calibration values and CRC
	for ( uint8_t i = 0 ; i < 7 ; i++ ) {
    2820:	ce 3a       	cpi	r28, 0xAE	; 174
    2822:	79 f6       	brne	.-98     	; 0x27c2 <_ZN6MS58375beginEv+0x6a>
		Wire.requestFrom(MS5837_ADDR,2);
		C[i] = (Wire.read() << 8) | Wire.read();
	}

	// Verify that data is correct with CRC
	uint8_t crcRead = C[0] >> 12;
    2824:	f6 01       	movw	r30, r12
    2826:	c1 81       	ldd	r28, Z+1	; 0x01
    2828:	c2 95       	swap	r28
	uint8_t crcCalculated = crc4(C);
    282a:	cf 70       	andi	r28, 0x0F	; 15
    282c:	b6 01       	movw	r22, r12
    282e:	c6 01       	movw	r24, r12
    2830:	5a df       	rcall	.-332    	; 0x26e6 <_ZN6MS58374crc4EPj>
    2832:	91 e0       	ldi	r25, 0x01	; 1
    2834:	c8 13       	cpse	r28, r24
    2836:	90 e0       	ldi	r25, 0x00	; 0
	if ( crcCalculated == crcRead ) {
		return true; // Initialization success
	}

	return false; // CRC fail
}
    2838:	89 2f       	mov	r24, r25
    283a:	df 91       	pop	r29
    283c:	cf 91       	pop	r28
    283e:	1f 91       	pop	r17
    2840:	0f 91       	pop	r16
    2842:	ff 90       	pop	r15
    2844:	ef 90       	pop	r14
    2846:	df 90       	pop	r13
    2848:	cf 90       	pop	r12
    284a:	08 95       	ret

0000284c <_ZN6MS58376updateEv>:
	}else{
		return false;
	}
}

void MS5837::update(){
    284c:	8f 92       	push	r8
    284e:	9f 92       	push	r9
    2850:	af 92       	push	r10
    2852:	bf 92       	push	r11
    2854:	cf 92       	push	r12
    2856:	df 92       	push	r13
    2858:	ef 92       	push	r14
    285a:	ff 92       	push	r15
    285c:	0f 93       	push	r16
    285e:	1f 93       	push	r17
    2860:	cf 93       	push	r28
    2862:	df 93       	push	r29
	if(_state != STATE_FINISHED){
    2864:	dc 01       	movw	r26, r24
    2866:	91 96       	adiw	r26, 0x21	; 33
    2868:	2c 91       	ld	r18, X
    286a:	22 23       	and	r18, r18
    286c:	09 f4       	brne	.+2      	; 0x2870 <_ZN6MS58376updateEv+0x24>
    286e:	cf c0       	rjmp	.+414    	; 0x2a0e <_ZN6MS58376updateEv+0x1c2>
    2870:	ec 01       	movw	r28, r24
		if(_timer->finished()){
    2872:	8a a1       	ldd	r24, Y+34	; 0x22
    2874:	9b a1       	ldd	r25, Y+35	; 0x23
    2876:	44 d6       	rcall	.+3208   	; 0x3500 <_ZN13HardwareTimer8finishedEv>
    2878:	88 23       	and	r24, r24
    287a:	09 f4       	brne	.+2      	; 0x287e <_ZN6MS58376updateEv+0x32>
    287c:	c8 c0       	rjmp	.+400    	; 0x2a0e <_ZN6MS58376updateEv+0x1c2>
			if(_state == STATE_READ_D1){
    287e:	89 a1       	ldd	r24, Y+33	; 0x21
    2880:	81 30       	cpi	r24, 0x01	; 1
    2882:	09 f0       	breq	.+2      	; 0x2886 <_ZN6MS58376updateEv+0x3a>
    2884:	68 c0       	rjmp	.+208    	; 0x2956 <_ZN6MS58376updateEv+0x10a>
				//Read D1 conversion and Request D2 conversion
				Wire.beginTransmission(MS5837_ADDR);
    2886:	66 e7       	ldi	r22, 0x76	; 118
    2888:	70 e0       	ldi	r23, 0x00	; 0
    288a:	86 e9       	ldi	r24, 0x96	; 150
    288c:	97 e0       	ldi	r25, 0x07	; 7
    288e:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <_ZN7TwoWire17beginTransmissionEi>
    2892:	06 e9       	ldi	r16, 0x96	; 150
    2894:	17 e0       	ldi	r17, 0x07	; 7
    2896:	d8 01       	movw	r26, r16
    2898:	ed 91       	ld	r30, X+
    289a:	fc 91       	ld	r31, X
    289c:	01 90       	ld	r0, Z+
    289e:	f0 81       	ld	r31, Z
    28a0:	e0 2d       	mov	r30, r0
    28a2:	60 e0       	ldi	r22, 0x00	; 0
    28a4:	c8 01       	movw	r24, r16
    28a6:	19 95       	eicall
				Wire.write(MS5837_ADC_READ);
				Wire.endTransmission();
    28a8:	c8 01       	movw	r24, r16
    28aa:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <_ZN7TwoWire15endTransmissionEv>

				Wire.requestFrom(MS5837_ADDR,3);
    28ae:	43 e0       	ldi	r20, 0x03	; 3
    28b0:	50 e0       	ldi	r21, 0x00	; 0
    28b2:	66 e7       	ldi	r22, 0x76	; 118
    28b4:	70 e0       	ldi	r23, 0x00	; 0
    28b6:	c8 01       	movw	r24, r16
    28b8:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <_ZN7TwoWire11requestFromEii>
				D1 = 0;
    28bc:	18 8a       	std	Y+16, r1	; 0x10
    28be:	19 8a       	std	Y+17, r1	; 0x11
    28c0:	1a 8a       	std	Y+18, r1	; 0x12
    28c2:	1b 8a       	std	Y+19, r1	; 0x13
				D1 = Wire.read();
    28c4:	c8 01       	movw	r24, r16
    28c6:	0e 94 4a 1d 	call	0x3a94	; 0x3a94 <_ZN7TwoWire4readEv>
    28ca:	4c 01       	movw	r8, r24
    28cc:	99 0f       	add	r25, r25
    28ce:	aa 08       	sbc	r10, r10
    28d0:	bb 08       	sbc	r11, r11
    28d2:	88 8a       	std	Y+16, r8	; 0x10
    28d4:	99 8a       	std	Y+17, r9	; 0x11
    28d6:	aa 8a       	std	Y+18, r10	; 0x12
    28d8:	bb 8a       	std	Y+19, r11	; 0x13
				D1 = (D1 << 8) | Wire.read();
    28da:	c8 01       	movw	r24, r16
    28dc:	0e 94 4a 1d 	call	0x3a94	; 0x3a94 <_ZN7TwoWire4readEv>
    28e0:	ba 2c       	mov	r11, r10
    28e2:	a9 2c       	mov	r10, r9
    28e4:	98 2c       	mov	r9, r8
    28e6:	88 24       	eor	r8, r8
    28e8:	6c 01       	movw	r12, r24
    28ea:	99 0f       	add	r25, r25
    28ec:	ee 08       	sbc	r14, r14
    28ee:	ff 08       	sbc	r15, r15
    28f0:	c8 28       	or	r12, r8
    28f2:	d9 28       	or	r13, r9
    28f4:	ea 28       	or	r14, r10
    28f6:	fb 28       	or	r15, r11
    28f8:	c8 8a       	std	Y+16, r12	; 0x10
    28fa:	d9 8a       	std	Y+17, r13	; 0x11
    28fc:	ea 8a       	std	Y+18, r14	; 0x12
    28fe:	fb 8a       	std	Y+19, r15	; 0x13
				D1 = (D1 << 8) | Wire.read();
    2900:	c8 01       	movw	r24, r16
    2902:	0e 94 4a 1d 	call	0x3a94	; 0x3a94 <_ZN7TwoWire4readEv>
    2906:	fe 2c       	mov	r15, r14
    2908:	ed 2c       	mov	r14, r13
    290a:	dc 2c       	mov	r13, r12
    290c:	cc 24       	eor	r12, r12
    290e:	09 2e       	mov	r0, r25
    2910:	00 0c       	add	r0, r0
    2912:	aa 0b       	sbc	r26, r26
    2914:	bb 0b       	sbc	r27, r27
    2916:	c8 2a       	or	r12, r24
    2918:	d9 2a       	or	r13, r25
    291a:	ea 2a       	or	r14, r26
    291c:	fb 2a       	or	r15, r27
    291e:	c8 8a       	std	Y+16, r12	; 0x10
    2920:	d9 8a       	std	Y+17, r13	; 0x11
    2922:	ea 8a       	std	Y+18, r14	; 0x12
    2924:	fb 8a       	std	Y+19, r15	; 0x13
		
				// Request D2 conversion
				Wire.beginTransmission(MS5837_ADDR);
    2926:	66 e7       	ldi	r22, 0x76	; 118
    2928:	70 e0       	ldi	r23, 0x00	; 0
    292a:	c8 01       	movw	r24, r16
    292c:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <_ZN7TwoWire17beginTransmissionEi>
    2930:	d8 01       	movw	r26, r16
    2932:	ed 91       	ld	r30, X+
    2934:	fc 91       	ld	r31, X
    2936:	01 90       	ld	r0, Z+
    2938:	f0 81       	ld	r31, Z
    293a:	e0 2d       	mov	r30, r0
    293c:	6a e5       	ldi	r22, 0x5A	; 90
    293e:	c8 01       	movw	r24, r16
    2940:	19 95       	eicall
				Wire.write(MS5837_CONVERT_D2_8192);
				Wire.endTransmission();
    2942:	c8 01       	movw	r24, r16
    2944:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <_ZN7TwoWire15endTransmissionEv>

				Timer0.start(2);
    2948:	62 e0       	ldi	r22, 0x02	; 2
    294a:	8c e1       	ldi	r24, 0x1C	; 28
    294c:	97 e0       	ldi	r25, 0x07	; 7
    294e:	ca d5       	rcall	.+2964   	; 0x34e4 <_ZN13HardwareTimer5startEh>
				_state = STATE_READ_D2;
    2950:	82 e0       	ldi	r24, 0x02	; 2
    2952:	89 a3       	std	Y+33, r24	; 0x21
    2954:	5c c0       	rjmp	.+184    	; 0x2a0e <_ZN6MS58376updateEv+0x1c2>
			}else if(_state == STATE_READ_D2){
    2956:	82 30       	cpi	r24, 0x02	; 2
    2958:	09 f0       	breq	.+2      	; 0x295c <_ZN6MS58376updateEv+0x110>
    295a:	59 c0       	rjmp	.+178    	; 0x2a0e <_ZN6MS58376updateEv+0x1c2>
				// Read D2 conversion and calculate readings
				Wire.beginTransmission(MS5837_ADDR);
    295c:	66 e7       	ldi	r22, 0x76	; 118
    295e:	70 e0       	ldi	r23, 0x00	; 0
    2960:	86 e9       	ldi	r24, 0x96	; 150
    2962:	97 e0       	ldi	r25, 0x07	; 7
    2964:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <_ZN7TwoWire17beginTransmissionEi>
    2968:	e0 91 96 07 	lds	r30, 0x0796	; 0x800796 <Wire>
    296c:	f0 91 97 07 	lds	r31, 0x0797	; 0x800797 <Wire+0x1>
    2970:	01 90       	ld	r0, Z+
    2972:	f0 81       	ld	r31, Z
    2974:	e0 2d       	mov	r30, r0
    2976:	60 e0       	ldi	r22, 0x00	; 0
    2978:	86 e9       	ldi	r24, 0x96	; 150
    297a:	97 e0       	ldi	r25, 0x07	; 7
    297c:	19 95       	eicall
				Wire.write(MS5837_ADC_READ);
				Wire.endTransmission();
    297e:	86 e9       	ldi	r24, 0x96	; 150
    2980:	97 e0       	ldi	r25, 0x07	; 7
    2982:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <_ZN7TwoWire15endTransmissionEv>

				Wire.requestFrom(MS5837_ADDR,3);
    2986:	43 e0       	ldi	r20, 0x03	; 3
    2988:	50 e0       	ldi	r21, 0x00	; 0
    298a:	66 e7       	ldi	r22, 0x76	; 118
    298c:	70 e0       	ldi	r23, 0x00	; 0
    298e:	86 e9       	ldi	r24, 0x96	; 150
    2990:	97 e0       	ldi	r25, 0x07	; 7
    2992:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <_ZN7TwoWire11requestFromEii>
				D2 = 0;
    2996:	1c 8a       	std	Y+20, r1	; 0x14
    2998:	1d 8a       	std	Y+21, r1	; 0x15
    299a:	1e 8a       	std	Y+22, r1	; 0x16
    299c:	1f 8a       	std	Y+23, r1	; 0x17
				D2 = Wire.read();
    299e:	86 e9       	ldi	r24, 0x96	; 150
    29a0:	97 e0       	ldi	r25, 0x07	; 7
    29a2:	0e 94 4a 1d 	call	0x3a94	; 0x3a94 <_ZN7TwoWire4readEv>
    29a6:	4c 01       	movw	r8, r24
    29a8:	99 0f       	add	r25, r25
    29aa:	aa 08       	sbc	r10, r10
    29ac:	bb 08       	sbc	r11, r11
    29ae:	8c 8a       	std	Y+20, r8	; 0x14
    29b0:	9d 8a       	std	Y+21, r9	; 0x15
    29b2:	ae 8a       	std	Y+22, r10	; 0x16
    29b4:	bf 8a       	std	Y+23, r11	; 0x17
				D2 = (D2 << 8) | Wire.read();
    29b6:	86 e9       	ldi	r24, 0x96	; 150
    29b8:	97 e0       	ldi	r25, 0x07	; 7
    29ba:	0e 94 4a 1d 	call	0x3a94	; 0x3a94 <_ZN7TwoWire4readEv>
    29be:	ba 2c       	mov	r11, r10
    29c0:	a9 2c       	mov	r10, r9
    29c2:	98 2c       	mov	r9, r8
    29c4:	88 24       	eor	r8, r8
    29c6:	6c 01       	movw	r12, r24
    29c8:	99 0f       	add	r25, r25
    29ca:	ee 08       	sbc	r14, r14
    29cc:	ff 08       	sbc	r15, r15
    29ce:	c8 28       	or	r12, r8
    29d0:	d9 28       	or	r13, r9
    29d2:	ea 28       	or	r14, r10
    29d4:	fb 28       	or	r15, r11
    29d6:	cc 8a       	std	Y+20, r12	; 0x14
    29d8:	dd 8a       	std	Y+21, r13	; 0x15
    29da:	ee 8a       	std	Y+22, r14	; 0x16
    29dc:	ff 8a       	std	Y+23, r15	; 0x17
				D2 = (D2 << 8) | Wire.read();
    29de:	86 e9       	ldi	r24, 0x96	; 150
    29e0:	97 e0       	ldi	r25, 0x07	; 7
    29e2:	0e 94 4a 1d 	call	0x3a94	; 0x3a94 <_ZN7TwoWire4readEv>
    29e6:	fe 2c       	mov	r15, r14
    29e8:	ed 2c       	mov	r14, r13
    29ea:	dc 2c       	mov	r13, r12
    29ec:	cc 24       	eor	r12, r12
    29ee:	09 2e       	mov	r0, r25
    29f0:	00 0c       	add	r0, r0
    29f2:	aa 0b       	sbc	r26, r26
    29f4:	bb 0b       	sbc	r27, r27
    29f6:	c8 2a       	or	r12, r24
    29f8:	d9 2a       	or	r13, r25
    29fa:	ea 2a       	or	r14, r26
    29fc:	fb 2a       	or	r15, r27
    29fe:	cc 8a       	std	Y+20, r12	; 0x14
    2a00:	dd 8a       	std	Y+21, r13	; 0x15
    2a02:	ee 8a       	std	Y+22, r14	; 0x16
    2a04:	ff 8a       	std	Y+23, r15	; 0x17

				calculate();
    2a06:	ce 01       	movw	r24, r28
    2a08:	0e 94 8f 0c 	call	0x191e	; 0x191e <_ZN6MS58379calculateEv>
				_state = STATE_FINISHED;
    2a0c:	19 a2       	std	Y+33, r1	; 0x21
			}
		}
	}
}
    2a0e:	df 91       	pop	r29
    2a10:	cf 91       	pop	r28
    2a12:	1f 91       	pop	r17
    2a14:	0f 91       	pop	r16
    2a16:	ff 90       	pop	r15
    2a18:	ef 90       	pop	r14
    2a1a:	df 90       	pop	r13
    2a1c:	cf 90       	pop	r12
    2a1e:	bf 90       	pop	r11
    2a20:	af 90       	pop	r10
    2a22:	9f 90       	pop	r9
    2a24:	8f 90       	pop	r8
    2a26:	08 95       	ret

00002a28 <_ZN7PCA9685C1Eh>:
#define FREQUENCY_OSCILLATOR 25000000 /**< Int. osc. frequency in datasheet */

#define PCA9685_PRESCALE_MIN 3   /**< minimum prescale value */
#define PCA9685_PRESCALE_MAX 255 /**< maximum prescale value */

PCA9685::PCA9685(const uint8_t addr) : _addr(addr){
    2a28:	fc 01       	movw	r30, r24
    2a2a:	60 83       	st	Z, r22
    2a2c:	08 95       	ret

00002a2e <_ZN18TwiServoControllerC1Eh>:

#include "TwiServoController.h"
#include "../Utils/CpuFreq.h"
#include <util/delay.h>

TwiServoController::TwiServoController(const uint8_t addr) : controller(addr){
    2a2e:	fc cf       	rjmp	.-8      	; 0x2a28 <_ZN7PCA9685C1Eh>
    2a30:	08 95       	ret

00002a32 <_ZN14HardwareSerial9availableEv>:
	#endif
	#if defined(HAVE_HWSERIAL2)
	if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
	#endif
	#if defined(HAVE_HWSERIAL3)
	if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    2a32:	fc 01       	movw	r30, r24
    2a34:	97 85       	ldd	r25, Z+15	; 0x0f
    2a36:	20 89       	ldd	r18, Z+16	; 0x10
    2a38:	89 2f       	mov	r24, r25
    2a3a:	90 e0       	ldi	r25, 0x00	; 0
    2a3c:	80 5c       	subi	r24, 0xC0	; 192
    2a3e:	9f 4f       	sbci	r25, 0xFF	; 255
    2a40:	82 1b       	sub	r24, r18
    2a42:	91 09       	sbc	r25, r1
    2a44:	8f 73       	andi	r24, 0x3F	; 63
    2a46:	99 27       	eor	r25, r25
    2a48:	08 95       	ret

00002a4a <_ZN14HardwareSerial4peekEv>:
    2a4a:	fc 01       	movw	r30, r24
    2a4c:	97 85       	ldd	r25, Z+15	; 0x0f
    2a4e:	80 89       	ldd	r24, Z+16	; 0x10
    2a50:	98 17       	cp	r25, r24
    2a52:	31 f0       	breq	.+12     	; 0x2a60 <_ZN14HardwareSerial4peekEv+0x16>
    2a54:	80 89       	ldd	r24, Z+16	; 0x10
    2a56:	e8 0f       	add	r30, r24
    2a58:	f1 1d       	adc	r31, r1
    2a5a:	83 89       	ldd	r24, Z+19	; 0x13
    2a5c:	90 e0       	ldi	r25, 0x00	; 0
    2a5e:	08 95       	ret
    2a60:	8f ef       	ldi	r24, 0xFF	; 255
    2a62:	9f ef       	ldi	r25, 0xFF	; 255
    2a64:	08 95       	ret

00002a66 <_ZN14HardwareSerial4readEv>:
    2a66:	fc 01       	movw	r30, r24
    2a68:	97 85       	ldd	r25, Z+15	; 0x0f
    2a6a:	80 89       	ldd	r24, Z+16	; 0x10
    2a6c:	98 17       	cp	r25, r24
    2a6e:	61 f0       	breq	.+24     	; 0x2a88 <_ZN14HardwareSerial4readEv+0x22>
    2a70:	80 89       	ldd	r24, Z+16	; 0x10
    2a72:	df 01       	movw	r26, r30
    2a74:	a8 0f       	add	r26, r24
    2a76:	b1 1d       	adc	r27, r1
    2a78:	53 96       	adiw	r26, 0x13	; 19
    2a7a:	8c 91       	ld	r24, X
    2a7c:	90 89       	ldd	r25, Z+16	; 0x10
    2a7e:	9f 5f       	subi	r25, 0xFF	; 255
    2a80:	9f 73       	andi	r25, 0x3F	; 63
    2a82:	90 8b       	std	Z+16, r25	; 0x10
    2a84:	90 e0       	ldi	r25, 0x00	; 0
    2a86:	08 95       	ret
    2a88:	8f ef       	ldi	r24, 0xFF	; 255
    2a8a:	9f ef       	ldi	r25, 0xFF	; 255
    2a8c:	08 95       	ret

00002a8e <_ZN14HardwareSerial17availableForWriteEv>:
    2a8e:	fc 01       	movw	r30, r24
    2a90:	21 89       	ldd	r18, Z+17	; 0x11
    2a92:	32 89       	ldd	r19, Z+18	; 0x12
    2a94:	23 17       	cp	r18, r19
    2a96:	38 f0       	brcs	.+14     	; 0x2aa6 <_ZN14HardwareSerial17availableForWriteEv+0x18>
    2a98:	8f e3       	ldi	r24, 0x3F	; 63
    2a9a:	90 e0       	ldi	r25, 0x00	; 0
    2a9c:	82 1b       	sub	r24, r18
    2a9e:	91 09       	sbc	r25, r1
    2aa0:	83 0f       	add	r24, r19
    2aa2:	91 1d       	adc	r25, r1
    2aa4:	08 95       	ret
    2aa6:	83 2f       	mov	r24, r19
    2aa8:	90 e0       	ldi	r25, 0x00	; 0
    2aaa:	82 1b       	sub	r24, r18
    2aac:	91 09       	sbc	r25, r1
    2aae:	01 97       	sbiw	r24, 0x01	; 1
    2ab0:	08 95       	ret

00002ab2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    2ab2:	fc 01       	movw	r30, r24
	// If interrupts are enabled, there must be more data in the output
	// buffer. Send the next byte
	unsigned char c = _tx_buffer[_tx_buffer_tail];
    2ab4:	82 89       	ldd	r24, Z+18	; 0x12
    2ab6:	df 01       	movw	r26, r30
    2ab8:	a8 0f       	add	r26, r24
    2aba:	b1 1d       	adc	r27, r1
    2abc:	ad 5a       	subi	r26, 0xAD	; 173
    2abe:	bf 4f       	sbci	r27, 0xFF	; 255
    2ac0:	8c 91       	ld	r24, X
	_tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    2ac2:	22 89       	ldd	r18, Z+18	; 0x12
    2ac4:	30 e0       	ldi	r19, 0x00	; 0
    2ac6:	2f 5f       	subi	r18, 0xFF	; 255
    2ac8:	3f 4f       	sbci	r19, 0xFF	; 255
    2aca:	2f 73       	andi	r18, 0x3F	; 63
    2acc:	30 78       	andi	r19, 0x80	; 128
    2ace:	33 23       	and	r19, r19
    2ad0:	34 f4       	brge	.+12     	; 0x2ade <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x2c>
    2ad2:	21 50       	subi	r18, 0x01	; 1
    2ad4:	31 09       	sbc	r19, r1
    2ad6:	20 6c       	ori	r18, 0xC0	; 192
    2ad8:	3f 6f       	ori	r19, 0xFF	; 255
    2ada:	2f 5f       	subi	r18, 0xFF	; 255
    2adc:	3f 4f       	sbci	r19, 0xFF	; 255
    2ade:	22 8b       	std	Z+18, r18	; 0x12

	*_udr = c;
    2ae0:	a4 85       	ldd	r26, Z+12	; 0x0c
    2ae2:	b5 85       	ldd	r27, Z+13	; 0x0d
    2ae4:	8c 93       	st	X, r24
	// location". This makes sure flush() won't return until the bytes
	// actually got written. Other r/w bits are preserved, and zeroes
	// written to the rest.

	#ifdef MPCM0
	*_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    2ae6:	a6 81       	ldd	r26, Z+6	; 0x06
    2ae8:	b7 81       	ldd	r27, Z+7	; 0x07
    2aea:	8c 91       	ld	r24, X
    2aec:	83 70       	andi	r24, 0x03	; 3
    2aee:	80 64       	ori	r24, 0x40	; 64
    2af0:	8c 93       	st	X, r24
	#else
	*_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
	#endif

	if (_tx_buffer_head == _tx_buffer_tail) {
    2af2:	91 89       	ldd	r25, Z+17	; 0x11
    2af4:	82 89       	ldd	r24, Z+18	; 0x12
    2af6:	98 13       	cpse	r25, r24
    2af8:	06 c0       	rjmp	.+12     	; 0x2b06 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x54>
		// Buffer empty, so disable interrupts
		cbi(*_ucsrb, UDRIE0);
    2afa:	00 84       	ldd	r0, Z+8	; 0x08
    2afc:	f1 85       	ldd	r31, Z+9	; 0x09
    2afe:	e0 2d       	mov	r30, r0
    2b00:	80 81       	ld	r24, Z
    2b02:	8f 7d       	andi	r24, 0xDF	; 223
    2b04:	80 83       	st	Z, r24
    2b06:	08 95       	ret

00002b08 <_ZN14HardwareSerial5flushEv>:
	if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
	return tail - head - 1;
}

void HardwareSerial::flush()
{
    2b08:	cf 93       	push	r28
    2b0a:	df 93       	push	r29
    2b0c:	ec 01       	movw	r28, r24
	// If we have never written a byte, no need to flush. This special
	// case is needed since there is no way to force the TXC (transmit
	// complete) bit to 1 during initialization
	if (!_written)
    2b0e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b10:	88 23       	and	r24, r24
    2b12:	d1 f0       	breq	.+52     	; 0x2b48 <_ZN14HardwareSerial5flushEv+0x40>
	return;

	while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    2b14:	e8 85       	ldd	r30, Y+8	; 0x08
    2b16:	f9 85       	ldd	r31, Y+9	; 0x09
    2b18:	80 81       	ld	r24, Z
    2b1a:	85 fd       	sbrc	r24, 5
    2b1c:	05 c0       	rjmp	.+10     	; 0x2b28 <_ZN14HardwareSerial5flushEv+0x20>
    2b1e:	ae 81       	ldd	r26, Y+6	; 0x06
    2b20:	bf 81       	ldd	r27, Y+7	; 0x07
    2b22:	8c 91       	ld	r24, X
    2b24:	86 fd       	sbrc	r24, 6
    2b26:	10 c0       	rjmp	.+32     	; 0x2b48 <_ZN14HardwareSerial5flushEv+0x40>
		if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    2b28:	0f b6       	in	r0, 0x3f	; 63
    2b2a:	07 fc       	sbrc	r0, 7
    2b2c:	f5 cf       	rjmp	.-22     	; 0x2b18 <_ZN14HardwareSerial5flushEv+0x10>
    2b2e:	80 81       	ld	r24, Z
    2b30:	85 ff       	sbrs	r24, 5
    2b32:	f2 cf       	rjmp	.-28     	; 0x2b18 <_ZN14HardwareSerial5flushEv+0x10>
    2b34:	03 c0       	rjmp	.+6      	; 0x2b3c <_ZN14HardwareSerial5flushEv+0x34>
		// Interrupts are globally disabled, but the DR empty
		// interrupt should be enabled, so poll the DR empty flag to
		// prevent deadlock
		if (bit_is_set(*_ucsra, UDRE0))
		_tx_udr_empty_irq();
    2b36:	ce 01       	movw	r24, r28
    2b38:	bc df       	rcall	.-136    	; 0x2ab2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    2b3a:	ec cf       	rjmp	.-40     	; 0x2b14 <_ZN14HardwareSerial5flushEv+0xc>
	while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
		if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
		// Interrupts are globally disabled, but the DR empty
		// interrupt should be enabled, so poll the DR empty flag to
		// prevent deadlock
		if (bit_is_set(*_ucsra, UDRE0))
    2b3c:	ae 81       	ldd	r26, Y+6	; 0x06
    2b3e:	bf 81       	ldd	r27, Y+7	; 0x07
    2b40:	8c 91       	ld	r24, X
    2b42:	85 ff       	sbrs	r24, 5
    2b44:	e9 cf       	rjmp	.-46     	; 0x2b18 <_ZN14HardwareSerial5flushEv+0x10>
    2b46:	f7 cf       	rjmp	.-18     	; 0x2b36 <_ZN14HardwareSerial5flushEv+0x2e>
		_tx_udr_empty_irq();
	}
	// If we get here, nothing is queued anymore (DRIE is disabled) and
	// the hardware finished tranmission (TXC is set).
}
    2b48:	df 91       	pop	r29
    2b4a:	cf 91       	pop	r28
    2b4c:	08 95       	ret

00002b4e <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    2b4e:	0f 93       	push	r16
    2b50:	1f 93       	push	r17
    2b52:	cf 93       	push	r28
    2b54:	df 93       	push	r29
    2b56:	ec 01       	movw	r28, r24
	_written = true;
    2b58:	81 e0       	ldi	r24, 0x01	; 1
    2b5a:	8e 87       	std	Y+14, r24	; 0x0e
	// If the buffer and the data register is empty, just write the byte
	// to the data register and be done. This shortcut helps
	// significantly improve the effective datarate at high (>
	// 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
	if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    2b5c:	99 89       	ldd	r25, Y+17	; 0x11
    2b5e:	8a 89       	ldd	r24, Y+18	; 0x12
    2b60:	98 13       	cpse	r25, r24
    2b62:	25 c0       	rjmp	.+74     	; 0x2bae <_ZN14HardwareSerial5writeEh+0x60>
    2b64:	ee 81       	ldd	r30, Y+6	; 0x06
    2b66:	ff 81       	ldd	r31, Y+7	; 0x07
    2b68:	80 81       	ld	r24, Z
    2b6a:	85 fd       	sbrc	r24, 5
    2b6c:	31 c0       	rjmp	.+98     	; 0x2bd0 <_ZN14HardwareSerial5writeEh+0x82>
    2b6e:	1f c0       	rjmp	.+62     	; 0x2bae <_ZN14HardwareSerial5writeEh+0x60>
	}
	tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
	// If the output buffer is full, there's nothing for it other than to
	// wait for the interrupt handler to empty it a bit
	while (i == _tx_buffer_tail) {
    2b70:	8a 89       	ldd	r24, Y+18	; 0x12
    2b72:	18 13       	cpse	r17, r24
    2b74:	0b c0       	rjmp	.+22     	; 0x2b8c <_ZN14HardwareSerial5writeEh+0x3e>
		if (bit_is_clear(SREG, SREG_I)) {
    2b76:	0f b6       	in	r0, 0x3f	; 63
    2b78:	07 fc       	sbrc	r0, 7
    2b7a:	fa cf       	rjmp	.-12     	; 0x2b70 <_ZN14HardwareSerial5writeEh+0x22>
			// Interrupts are disabled, so we'll have to poll the data
			// register empty flag ourselves. If it is set, pretend an
			// interrupt has happened and call the handler to free up
			// space for us.
			if(bit_is_set(*_ucsra, UDRE0))
    2b7c:	ee 81       	ldd	r30, Y+6	; 0x06
    2b7e:	ff 81       	ldd	r31, Y+7	; 0x07
    2b80:	80 81       	ld	r24, Z
    2b82:	85 ff       	sbrs	r24, 5
    2b84:	f5 cf       	rjmp	.-22     	; 0x2b70 <_ZN14HardwareSerial5writeEh+0x22>
			_tx_udr_empty_irq();
    2b86:	ce 01       	movw	r24, r28
    2b88:	94 df       	rcall	.-216    	; 0x2ab2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    2b8a:	f2 cf       	rjmp	.-28     	; 0x2b70 <_ZN14HardwareSerial5writeEh+0x22>
			} else {
			// nop, the interrupt handler will free up space for us
		}
	}

	_tx_buffer[_tx_buffer_head] = c;
    2b8c:	89 89       	ldd	r24, Y+17	; 0x11
    2b8e:	fe 01       	movw	r30, r28
    2b90:	e8 0f       	add	r30, r24
    2b92:	f1 1d       	adc	r31, r1
    2b94:	ed 5a       	subi	r30, 0xAD	; 173
    2b96:	ff 4f       	sbci	r31, 0xFF	; 255
    2b98:	00 83       	st	Z, r16

	// make atomic to prevent execution of ISR between setting the
	// head pointer and setting the interrupt flag resulting in buffer
	// retransmission
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    2b9a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2b9c:	f8 94       	cli
		_tx_buffer_head = i;
    2b9e:	19 8b       	std	Y+17, r17	; 0x11
		sbi(*_ucsrb, UDRIE0);
    2ba0:	e8 85       	ldd	r30, Y+8	; 0x08
    2ba2:	f9 85       	ldd	r31, Y+9	; 0x09
    2ba4:	80 81       	ld	r24, Z
    2ba6:	80 62       	ori	r24, 0x20	; 32
    2ba8:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2baa:	9f bf       	out	0x3f, r25	; 63
	}
	
	return 1;
    2bac:	1d c0       	rjmp	.+58     	; 0x2be8 <_ZN14HardwareSerial5writeEh+0x9a>
			*_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
			#endif
		}
		return 1;
	}
	tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    2bae:	29 89       	ldd	r18, Y+17	; 0x11
    2bb0:	30 e0       	ldi	r19, 0x00	; 0
    2bb2:	2f 5f       	subi	r18, 0xFF	; 255
    2bb4:	3f 4f       	sbci	r19, 0xFF	; 255
    2bb6:	2f 73       	andi	r18, 0x3F	; 63
    2bb8:	30 78       	andi	r19, 0x80	; 128
    2bba:	33 23       	and	r19, r19
    2bbc:	34 f4       	brge	.+12     	; 0x2bca <_ZN14HardwareSerial5writeEh+0x7c>
    2bbe:	21 50       	subi	r18, 0x01	; 1
    2bc0:	31 09       	sbc	r19, r1
    2bc2:	20 6c       	ori	r18, 0xC0	; 192
    2bc4:	3f 6f       	ori	r19, 0xFF	; 255
    2bc6:	2f 5f       	subi	r18, 0xFF	; 255
    2bc8:	3f 4f       	sbci	r19, 0xFF	; 255
    2bca:	06 2f       	mov	r16, r22
    2bcc:	12 2f       	mov	r17, r18
    2bce:	d0 cf       	rjmp	.-96     	; 0x2b70 <_ZN14HardwareSerial5writeEh+0x22>
		// So writing UDR must happen first.
		// Writing UDR and clearing TC must be done atomically, otherwise
		// interrupts might delay the TXC clear so the byte written to UDR
		// is transmitted (setting TXC) before clearing TXC. Then TXC will
		// be cleared when no bytes are left, causing flush() to hang
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    2bd0:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2bd2:	f8 94       	cli
			*_udr = c;
    2bd4:	ec 85       	ldd	r30, Y+12	; 0x0c
    2bd6:	fd 85       	ldd	r31, Y+13	; 0x0d
    2bd8:	60 83       	st	Z, r22
			#ifdef MPCM0
			*_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    2bda:	ee 81       	ldd	r30, Y+6	; 0x06
    2bdc:	ff 81       	ldd	r31, Y+7	; 0x07
    2bde:	80 81       	ld	r24, Z
    2be0:	83 70       	andi	r24, 0x03	; 3
    2be2:	80 64       	ori	r24, 0x40	; 64
    2be4:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2be6:	9f bf       	out	0x3f, r25	; 63
		_tx_buffer_head = i;
		sbi(*_ucsrb, UDRIE0);
	}
	
	return 1;
}
    2be8:	81 e0       	ldi	r24, 0x01	; 1
    2bea:	90 e0       	ldi	r25, 0x00	; 0
    2bec:	df 91       	pop	r29
    2bee:	cf 91       	pop	r28
    2bf0:	1f 91       	pop	r17
    2bf2:	0f 91       	pop	r16
    2bf4:	08 95       	ret

00002bf6 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, uint8_t config)
{
    2bf6:	cf 92       	push	r12
    2bf8:	df 92       	push	r13
    2bfa:	ef 92       	push	r14
    2bfc:	ff 92       	push	r15
    2bfe:	1f 93       	push	r17
    2c00:	cf 93       	push	r28
    2c02:	df 93       	push	r29
    2c04:	ec 01       	movw	r28, r24
    2c06:	6a 01       	movw	r12, r20
    2c08:	7b 01       	movw	r14, r22
    2c0a:	12 2f       	mov	r17, r18
	// Try u2x mode first
	uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
	*_ucsra = 1 << U2X0;
    2c0c:	ee 81       	ldd	r30, Y+6	; 0x06
    2c0e:	ff 81       	ldd	r31, Y+7	; 0x07
    2c10:	82 e0       	ldi	r24, 0x02	; 2
    2c12:	80 83       	st	Z, r24
	// hardcoded exception for 57600 for compatibility with the bootloader
	// shipped with the Duemilanove and previous boards and the firmware
	// on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
	// be > 4095, so switch back to non-u2x mode if the baud rate is too
	// low.
	if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    2c14:	41 15       	cp	r20, r1
    2c16:	51 4e       	sbci	r21, 0xE1	; 225
    2c18:	61 05       	cpc	r22, r1
    2c1a:	71 05       	cpc	r23, r1
    2c1c:	b1 f0       	breq	.+44     	; 0x2c4a <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, uint8_t config)
{
	// Try u2x mode first
	uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    2c1e:	60 e0       	ldi	r22, 0x00	; 0
    2c20:	79 e0       	ldi	r23, 0x09	; 9
    2c22:	8d e3       	ldi	r24, 0x3D	; 61
    2c24:	90 e0       	ldi	r25, 0x00	; 0
    2c26:	a7 01       	movw	r20, r14
    2c28:	96 01       	movw	r18, r12
    2c2a:	0e 94 30 25 	call	0x4a60	; 0x4a60 <__udivmodsi4>
    2c2e:	da 01       	movw	r26, r20
    2c30:	c9 01       	movw	r24, r18
    2c32:	01 97       	sbiw	r24, 0x01	; 1
    2c34:	a1 09       	sbc	r26, r1
    2c36:	b1 09       	sbc	r27, r1
    2c38:	b6 95       	lsr	r27
    2c3a:	a7 95       	ror	r26
    2c3c:	97 95       	ror	r25
    2c3e:	87 95       	ror	r24
    2c40:	9c 01       	movw	r18, r24
	// hardcoded exception for 57600 for compatibility with the bootloader
	// shipped with the Duemilanove and previous boards and the firmware
	// on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
	// be > 4095, so switch back to non-u2x mode if the baud rate is too
	// low.
	if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    2c42:	21 15       	cp	r18, r1
    2c44:	80 e1       	ldi	r24, 0x10	; 16
    2c46:	38 07       	cpc	r19, r24
    2c48:	a8 f0       	brcs	.+42     	; 0x2c74 <_ZN14HardwareSerial5beginEmh+0x7e>
	{
		*_ucsra = 0;
    2c4a:	ee 81       	ldd	r30, Y+6	; 0x06
    2c4c:	ff 81       	ldd	r31, Y+7	; 0x07
    2c4e:	10 82       	st	Z, r1
		baud_setting = (F_CPU / 8 / baud - 1) / 2;
    2c50:	60 e8       	ldi	r22, 0x80	; 128
    2c52:	74 e8       	ldi	r23, 0x84	; 132
    2c54:	8e e1       	ldi	r24, 0x1E	; 30
    2c56:	90 e0       	ldi	r25, 0x00	; 0
    2c58:	a7 01       	movw	r20, r14
    2c5a:	96 01       	movw	r18, r12
    2c5c:	0e 94 30 25 	call	0x4a60	; 0x4a60 <__udivmodsi4>
    2c60:	da 01       	movw	r26, r20
    2c62:	c9 01       	movw	r24, r18
    2c64:	01 97       	sbiw	r24, 0x01	; 1
    2c66:	a1 09       	sbc	r26, r1
    2c68:	b1 09       	sbc	r27, r1
    2c6a:	b6 95       	lsr	r27
    2c6c:	a7 95       	ror	r26
    2c6e:	97 95       	ror	r25
    2c70:	87 95       	ror	r24
    2c72:	9c 01       	movw	r18, r24
	}

	// assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
	*_ubrrh = baud_setting >> 8;
    2c74:	ea 81       	ldd	r30, Y+2	; 0x02
    2c76:	fb 81       	ldd	r31, Y+3	; 0x03
    2c78:	30 83       	st	Z, r19
	*_ubrrl = baud_setting;
    2c7a:	ec 81       	ldd	r30, Y+4	; 0x04
    2c7c:	fd 81       	ldd	r31, Y+5	; 0x05
    2c7e:	20 83       	st	Z, r18

	_written = false;
    2c80:	1e 86       	std	Y+14, r1	; 0x0e

	//set the data bits, parity, and stop bits
	#if defined(__AVR_ATmega8__)
	config |= 0x80; // select UCSRC register (shared with UBRRH)
	#endif
	*_ucsrc = config;
    2c82:	ea 85       	ldd	r30, Y+10	; 0x0a
    2c84:	fb 85       	ldd	r31, Y+11	; 0x0b
    2c86:	10 83       	st	Z, r17
	
	sbi(*_ucsrb, RXEN0);
    2c88:	e8 85       	ldd	r30, Y+8	; 0x08
    2c8a:	f9 85       	ldd	r31, Y+9	; 0x09
    2c8c:	80 81       	ld	r24, Z
    2c8e:	80 61       	ori	r24, 0x10	; 16
    2c90:	80 83       	st	Z, r24
	sbi(*_ucsrb, TXEN0);
    2c92:	e8 85       	ldd	r30, Y+8	; 0x08
    2c94:	f9 85       	ldd	r31, Y+9	; 0x09
    2c96:	80 81       	ld	r24, Z
    2c98:	88 60       	ori	r24, 0x08	; 8
    2c9a:	80 83       	st	Z, r24
	sbi(*_ucsrb, RXCIE0);
    2c9c:	e8 85       	ldd	r30, Y+8	; 0x08
    2c9e:	f9 85       	ldd	r31, Y+9	; 0x09
    2ca0:	80 81       	ld	r24, Z
    2ca2:	80 68       	ori	r24, 0x80	; 128
    2ca4:	80 83       	st	Z, r24
	cbi(*_ucsrb, UDRIE0);
    2ca6:	e8 85       	ldd	r30, Y+8	; 0x08
    2ca8:	f9 85       	ldd	r31, Y+9	; 0x09
    2caa:	80 81       	ld	r24, Z
    2cac:	8f 7d       	andi	r24, 0xDF	; 223
    2cae:	80 83       	st	Z, r24
}
    2cb0:	df 91       	pop	r29
    2cb2:	cf 91       	pop	r28
    2cb4:	1f 91       	pop	r17
    2cb6:	ff 90       	pop	r15
    2cb8:	ef 90       	pop	r14
    2cba:	df 90       	pop	r13
    2cbc:	cf 90       	pop	r12
    2cbe:	08 95       	ret

00002cc0 <_ZN5Print17availableForWriteEv>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
}
    2cc0:	80 e0       	ldi	r24, 0x00	; 0
    2cc2:	90 e0       	ldi	r25, 0x00	; 0
    2cc4:	08 95       	ret

00002cc6 <__vector_25>:
    2cc6:	1f 92       	push	r1
    2cc8:	0f 92       	push	r0
    2cca:	0f b6       	in	r0, 0x3f	; 63
    2ccc:	0f 92       	push	r0
    2cce:	11 24       	eor	r1, r1
    2cd0:	0b b6       	in	r0, 0x3b	; 59
    2cd2:	0f 92       	push	r0
    2cd4:	2f 93       	push	r18
    2cd6:	8f 93       	push	r24
    2cd8:	9f 93       	push	r25
    2cda:	af 93       	push	r26
    2cdc:	bf 93       	push	r27
    2cde:	ef 93       	push	r30
    2ce0:	ff 93       	push	r31
    2ce2:	e0 91 fe 05 	lds	r30, 0x05FE	; 0x8005fe <Serial+0x6>
    2ce6:	f0 91 ff 05 	lds	r31, 0x05FF	; 0x8005ff <Serial+0x7>
    2cea:	80 81       	ld	r24, Z
    2cec:	82 fd       	sbrc	r24, 2
    2cee:	14 c0       	rjmp	.+40     	; 0x2d18 <__vector_25+0x52>
    2cf0:	e8 ef       	ldi	r30, 0xF8	; 248
    2cf2:	f5 e0       	ldi	r31, 0x05	; 5
    2cf4:	a4 85       	ldd	r26, Z+12	; 0x0c
    2cf6:	b5 85       	ldd	r27, Z+13	; 0x0d
    2cf8:	2c 91       	ld	r18, X
    2cfa:	87 85       	ldd	r24, Z+15	; 0x0f
    2cfc:	8f 5f       	subi	r24, 0xFF	; 255
    2cfe:	8f 70       	andi	r24, 0x0F	; 15
    2d00:	90 89       	ldd	r25, Z+16	; 0x10
    2d02:	89 17       	cp	r24, r25
    2d04:	71 f0       	breq	.+28     	; 0x2d22 <__vector_25+0x5c>
    2d06:	df 01       	movw	r26, r30
    2d08:	e7 85       	ldd	r30, Z+15	; 0x0f
    2d0a:	f0 e0       	ldi	r31, 0x00	; 0
    2d0c:	e8 50       	subi	r30, 0x08	; 8
    2d0e:	fa 4f       	sbci	r31, 0xFA	; 250
    2d10:	23 8b       	std	Z+19, r18	; 0x13
    2d12:	1f 96       	adiw	r26, 0x0f	; 15
    2d14:	8c 93       	st	X, r24
    2d16:	05 c0       	rjmp	.+10     	; 0x2d22 <__vector_25+0x5c>
    2d18:	e0 91 04 06 	lds	r30, 0x0604	; 0x800604 <Serial+0xc>
    2d1c:	f0 91 05 06 	lds	r31, 0x0605	; 0x800605 <Serial+0xd>
    2d20:	80 81       	ld	r24, Z
    2d22:	ff 91       	pop	r31
    2d24:	ef 91       	pop	r30
    2d26:	bf 91       	pop	r27
    2d28:	af 91       	pop	r26
    2d2a:	9f 91       	pop	r25
    2d2c:	8f 91       	pop	r24
    2d2e:	2f 91       	pop	r18
    2d30:	0f 90       	pop	r0
    2d32:	0b be       	out	0x3b, r0	; 59
    2d34:	0f 90       	pop	r0
    2d36:	0f be       	out	0x3f, r0	; 63
    2d38:	0f 90       	pop	r0
    2d3a:	1f 90       	pop	r1
    2d3c:	18 95       	reti

00002d3e <__vector_26>:
    2d3e:	1f 92       	push	r1
    2d40:	0f 92       	push	r0
    2d42:	0f b6       	in	r0, 0x3f	; 63
    2d44:	0f 92       	push	r0
    2d46:	11 24       	eor	r1, r1
    2d48:	0b b6       	in	r0, 0x3b	; 59
    2d4a:	0f 92       	push	r0
    2d4c:	2f 93       	push	r18
    2d4e:	3f 93       	push	r19
    2d50:	4f 93       	push	r20
    2d52:	5f 93       	push	r21
    2d54:	6f 93       	push	r22
    2d56:	7f 93       	push	r23
    2d58:	8f 93       	push	r24
    2d5a:	9f 93       	push	r25
    2d5c:	af 93       	push	r26
    2d5e:	bf 93       	push	r27
    2d60:	ef 93       	push	r30
    2d62:	ff 93       	push	r31
    2d64:	88 ef       	ldi	r24, 0xF8	; 248
    2d66:	95 e0       	ldi	r25, 0x05	; 5
    2d68:	a4 de       	rcall	.-696    	; 0x2ab2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    2d6a:	ff 91       	pop	r31
    2d6c:	ef 91       	pop	r30
    2d6e:	bf 91       	pop	r27
    2d70:	af 91       	pop	r26
    2d72:	9f 91       	pop	r25
    2d74:	8f 91       	pop	r24
    2d76:	7f 91       	pop	r23
    2d78:	6f 91       	pop	r22
    2d7a:	5f 91       	pop	r21
    2d7c:	4f 91       	pop	r20
    2d7e:	3f 91       	pop	r19
    2d80:	2f 91       	pop	r18
    2d82:	0f 90       	pop	r0
    2d84:	0b be       	out	0x3b, r0	; 59
    2d86:	0f 90       	pop	r0
    2d88:	0f be       	out	0x3f, r0	; 63
    2d8a:	0f 90       	pop	r0
    2d8c:	1f 90       	pop	r1
    2d8e:	18 95       	reti

00002d90 <_GLOBAL__sub_I___vector_25>:
volatile uint8_t *ucsrc, volatile uint8_t *udr) :
_ubrrh(ubrrh), _ubrrl(ubrrl),
_ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
_udr(udr),
_rx_buffer_head(0), _rx_buffer_tail(0),
_tx_buffer_head(0), _tx_buffer_tail(0)
    2d90:	e8 ef       	ldi	r30, 0xF8	; 248
    2d92:	f5 e0       	ldi	r31, 0x05	; 5
    2d94:	8f ea       	ldi	r24, 0xAF	; 175
    2d96:	92 e0       	ldi	r25, 0x02	; 2
    2d98:	91 83       	std	Z+1, r25	; 0x01
    2d9a:	80 83       	st	Z, r24
    2d9c:	85 ec       	ldi	r24, 0xC5	; 197
    2d9e:	90 e0       	ldi	r25, 0x00	; 0
    2da0:	93 83       	std	Z+3, r25	; 0x03
    2da2:	82 83       	std	Z+2, r24	; 0x02
    2da4:	84 ec       	ldi	r24, 0xC4	; 196
    2da6:	90 e0       	ldi	r25, 0x00	; 0
    2da8:	95 83       	std	Z+5, r25	; 0x05
    2daa:	84 83       	std	Z+4, r24	; 0x04
    2dac:	80 ec       	ldi	r24, 0xC0	; 192
    2dae:	90 e0       	ldi	r25, 0x00	; 0
    2db0:	97 83       	std	Z+7, r25	; 0x07
    2db2:	86 83       	std	Z+6, r24	; 0x06
    2db4:	81 ec       	ldi	r24, 0xC1	; 193
    2db6:	90 e0       	ldi	r25, 0x00	; 0
    2db8:	91 87       	std	Z+9, r25	; 0x09
    2dba:	80 87       	std	Z+8, r24	; 0x08
    2dbc:	82 ec       	ldi	r24, 0xC2	; 194
    2dbe:	90 e0       	ldi	r25, 0x00	; 0
    2dc0:	93 87       	std	Z+11, r25	; 0x0b
    2dc2:	82 87       	std	Z+10, r24	; 0x0a
    2dc4:	86 ec       	ldi	r24, 0xC6	; 198
    2dc6:	90 e0       	ldi	r25, 0x00	; 0
    2dc8:	95 87       	std	Z+13, r25	; 0x0d
    2dca:	84 87       	std	Z+12, r24	; 0x0c
    2dcc:	17 86       	std	Z+15, r1	; 0x0f
    2dce:	10 8a       	std	Z+16, r1	; 0x10
    2dd0:	11 8a       	std	Z+17, r1	; 0x11
    2dd2:	12 8a       	std	Z+18, r1	; 0x12
    2dd4:	08 95       	ret

00002dd6 <__vector_36>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
}
    2dd6:	1f 92       	push	r1
    2dd8:	0f 92       	push	r0
    2dda:	0f b6       	in	r0, 0x3f	; 63
    2ddc:	0f 92       	push	r0
    2dde:	11 24       	eor	r1, r1
    2de0:	0b b6       	in	r0, 0x3b	; 59
    2de2:	0f 92       	push	r0
    2de4:	2f 93       	push	r18
    2de6:	8f 93       	push	r24
    2de8:	9f 93       	push	r25
    2dea:	af 93       	push	r26
    2dec:	bf 93       	push	r27
    2dee:	ef 93       	push	r30
    2df0:	ff 93       	push	r31
    2df2:	e0 91 31 06 	lds	r30, 0x0631	; 0x800631 <Serial1+0x6>
    2df6:	f0 91 32 06 	lds	r31, 0x0632	; 0x800632 <Serial1+0x7>
    2dfa:	80 81       	ld	r24, Z
    2dfc:	82 fd       	sbrc	r24, 2
    2dfe:	14 c0       	rjmp	.+40     	; 0x2e28 <__vector_36+0x52>
    2e00:	eb e2       	ldi	r30, 0x2B	; 43
    2e02:	f6 e0       	ldi	r31, 0x06	; 6
    2e04:	a4 85       	ldd	r26, Z+12	; 0x0c
    2e06:	b5 85       	ldd	r27, Z+13	; 0x0d
    2e08:	2c 91       	ld	r18, X
    2e0a:	87 85       	ldd	r24, Z+15	; 0x0f
    2e0c:	8f 5f       	subi	r24, 0xFF	; 255
    2e0e:	8f 70       	andi	r24, 0x0F	; 15
    2e10:	90 89       	ldd	r25, Z+16	; 0x10
    2e12:	89 17       	cp	r24, r25
    2e14:	71 f0       	breq	.+28     	; 0x2e32 <__vector_36+0x5c>
    2e16:	df 01       	movw	r26, r30
    2e18:	e7 85       	ldd	r30, Z+15	; 0x0f
    2e1a:	f0 e0       	ldi	r31, 0x00	; 0
    2e1c:	e5 5d       	subi	r30, 0xD5	; 213
    2e1e:	f9 4f       	sbci	r31, 0xF9	; 249
    2e20:	23 8b       	std	Z+19, r18	; 0x13
    2e22:	1f 96       	adiw	r26, 0x0f	; 15
    2e24:	8c 93       	st	X, r24
    2e26:	05 c0       	rjmp	.+10     	; 0x2e32 <__vector_36+0x5c>
    2e28:	e0 91 37 06 	lds	r30, 0x0637	; 0x800637 <Serial1+0xc>
    2e2c:	f0 91 38 06 	lds	r31, 0x0638	; 0x800638 <Serial1+0xd>
    2e30:	80 81       	ld	r24, Z
    2e32:	ff 91       	pop	r31
    2e34:	ef 91       	pop	r30
    2e36:	bf 91       	pop	r27
    2e38:	af 91       	pop	r26
    2e3a:	9f 91       	pop	r25
    2e3c:	8f 91       	pop	r24
    2e3e:	2f 91       	pop	r18
    2e40:	0f 90       	pop	r0
    2e42:	0b be       	out	0x3b, r0	; 59
    2e44:	0f 90       	pop	r0
    2e46:	0f be       	out	0x3f, r0	; 63
    2e48:	0f 90       	pop	r0
    2e4a:	1f 90       	pop	r1
    2e4c:	18 95       	reti

00002e4e <__vector_37>:
    2e4e:	1f 92       	push	r1
    2e50:	0f 92       	push	r0
    2e52:	0f b6       	in	r0, 0x3f	; 63
    2e54:	0f 92       	push	r0
    2e56:	11 24       	eor	r1, r1
    2e58:	0b b6       	in	r0, 0x3b	; 59
    2e5a:	0f 92       	push	r0
    2e5c:	2f 93       	push	r18
    2e5e:	3f 93       	push	r19
    2e60:	4f 93       	push	r20
    2e62:	5f 93       	push	r21
    2e64:	6f 93       	push	r22
    2e66:	7f 93       	push	r23
    2e68:	8f 93       	push	r24
    2e6a:	9f 93       	push	r25
    2e6c:	af 93       	push	r26
    2e6e:	bf 93       	push	r27
    2e70:	ef 93       	push	r30
    2e72:	ff 93       	push	r31
    2e74:	8b e2       	ldi	r24, 0x2B	; 43
    2e76:	96 e0       	ldi	r25, 0x06	; 6
    2e78:	1c de       	rcall	.-968    	; 0x2ab2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    2e7a:	ff 91       	pop	r31
    2e7c:	ef 91       	pop	r30
    2e7e:	bf 91       	pop	r27
    2e80:	af 91       	pop	r26
    2e82:	9f 91       	pop	r25
    2e84:	8f 91       	pop	r24
    2e86:	7f 91       	pop	r23
    2e88:	6f 91       	pop	r22
    2e8a:	5f 91       	pop	r21
    2e8c:	4f 91       	pop	r20
    2e8e:	3f 91       	pop	r19
    2e90:	2f 91       	pop	r18
    2e92:	0f 90       	pop	r0
    2e94:	0b be       	out	0x3b, r0	; 59
    2e96:	0f 90       	pop	r0
    2e98:	0f be       	out	0x3f, r0	; 63
    2e9a:	0f 90       	pop	r0
    2e9c:	1f 90       	pop	r1
    2e9e:	18 95       	reti

00002ea0 <_GLOBAL__sub_I___vector_36>:
    2ea0:	eb e2       	ldi	r30, 0x2B	; 43
    2ea2:	f6 e0       	ldi	r31, 0x06	; 6
    2ea4:	8f ea       	ldi	r24, 0xAF	; 175
    2ea6:	92 e0       	ldi	r25, 0x02	; 2
    2ea8:	91 83       	std	Z+1, r25	; 0x01
    2eaa:	80 83       	st	Z, r24
    2eac:	8d ec       	ldi	r24, 0xCD	; 205
    2eae:	90 e0       	ldi	r25, 0x00	; 0
    2eb0:	93 83       	std	Z+3, r25	; 0x03
    2eb2:	82 83       	std	Z+2, r24	; 0x02
    2eb4:	8c ec       	ldi	r24, 0xCC	; 204
    2eb6:	90 e0       	ldi	r25, 0x00	; 0
    2eb8:	95 83       	std	Z+5, r25	; 0x05
    2eba:	84 83       	std	Z+4, r24	; 0x04
    2ebc:	88 ec       	ldi	r24, 0xC8	; 200
    2ebe:	90 e0       	ldi	r25, 0x00	; 0
    2ec0:	97 83       	std	Z+7, r25	; 0x07
    2ec2:	86 83       	std	Z+6, r24	; 0x06
    2ec4:	89 ec       	ldi	r24, 0xC9	; 201
    2ec6:	90 e0       	ldi	r25, 0x00	; 0
    2ec8:	91 87       	std	Z+9, r25	; 0x09
    2eca:	80 87       	std	Z+8, r24	; 0x08
    2ecc:	8a ec       	ldi	r24, 0xCA	; 202
    2ece:	90 e0       	ldi	r25, 0x00	; 0
    2ed0:	93 87       	std	Z+11, r25	; 0x0b
    2ed2:	82 87       	std	Z+10, r24	; 0x0a
    2ed4:	8e ec       	ldi	r24, 0xCE	; 206
    2ed6:	90 e0       	ldi	r25, 0x00	; 0
    2ed8:	95 87       	std	Z+13, r25	; 0x0d
    2eda:	84 87       	std	Z+12, r24	; 0x0c
    2edc:	17 86       	std	Z+15, r1	; 0x0f
    2ede:	10 8a       	std	Z+16, r1	; 0x10
    2ee0:	11 8a       	std	Z+17, r1	; 0x11
    2ee2:	12 8a       	std	Z+18, r1	; 0x12
    2ee4:	08 95       	ret

00002ee6 <__vector_51>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial2_available() {
  return Serial2.available();
}
    2ee6:	1f 92       	push	r1
    2ee8:	0f 92       	push	r0
    2eea:	0f b6       	in	r0, 0x3f	; 63
    2eec:	0f 92       	push	r0
    2eee:	11 24       	eor	r1, r1
    2ef0:	0b b6       	in	r0, 0x3b	; 59
    2ef2:	0f 92       	push	r0
    2ef4:	2f 93       	push	r18
    2ef6:	8f 93       	push	r24
    2ef8:	9f 93       	push	r25
    2efa:	af 93       	push	r26
    2efc:	bf 93       	push	r27
    2efe:	ef 93       	push	r30
    2f00:	ff 93       	push	r31
    2f02:	e0 91 64 06 	lds	r30, 0x0664	; 0x800664 <Serial2+0x6>
    2f06:	f0 91 65 06 	lds	r31, 0x0665	; 0x800665 <Serial2+0x7>
    2f0a:	80 81       	ld	r24, Z
    2f0c:	82 fd       	sbrc	r24, 2
    2f0e:	14 c0       	rjmp	.+40     	; 0x2f38 <__vector_51+0x52>
    2f10:	ee e5       	ldi	r30, 0x5E	; 94
    2f12:	f6 e0       	ldi	r31, 0x06	; 6
    2f14:	a4 85       	ldd	r26, Z+12	; 0x0c
    2f16:	b5 85       	ldd	r27, Z+13	; 0x0d
    2f18:	2c 91       	ld	r18, X
    2f1a:	87 85       	ldd	r24, Z+15	; 0x0f
    2f1c:	8f 5f       	subi	r24, 0xFF	; 255
    2f1e:	8f 70       	andi	r24, 0x0F	; 15
    2f20:	90 89       	ldd	r25, Z+16	; 0x10
    2f22:	89 17       	cp	r24, r25
    2f24:	71 f0       	breq	.+28     	; 0x2f42 <__vector_51+0x5c>
    2f26:	df 01       	movw	r26, r30
    2f28:	e7 85       	ldd	r30, Z+15	; 0x0f
    2f2a:	f0 e0       	ldi	r31, 0x00	; 0
    2f2c:	e2 5a       	subi	r30, 0xA2	; 162
    2f2e:	f9 4f       	sbci	r31, 0xF9	; 249
    2f30:	23 8b       	std	Z+19, r18	; 0x13
    2f32:	1f 96       	adiw	r26, 0x0f	; 15
    2f34:	8c 93       	st	X, r24
    2f36:	05 c0       	rjmp	.+10     	; 0x2f42 <__vector_51+0x5c>
    2f38:	e0 91 6a 06 	lds	r30, 0x066A	; 0x80066a <Serial2+0xc>
    2f3c:	f0 91 6b 06 	lds	r31, 0x066B	; 0x80066b <Serial2+0xd>
    2f40:	80 81       	ld	r24, Z
    2f42:	ff 91       	pop	r31
    2f44:	ef 91       	pop	r30
    2f46:	bf 91       	pop	r27
    2f48:	af 91       	pop	r26
    2f4a:	9f 91       	pop	r25
    2f4c:	8f 91       	pop	r24
    2f4e:	2f 91       	pop	r18
    2f50:	0f 90       	pop	r0
    2f52:	0b be       	out	0x3b, r0	; 59
    2f54:	0f 90       	pop	r0
    2f56:	0f be       	out	0x3f, r0	; 63
    2f58:	0f 90       	pop	r0
    2f5a:	1f 90       	pop	r1
    2f5c:	18 95       	reti

00002f5e <__vector_52>:
    2f5e:	1f 92       	push	r1
    2f60:	0f 92       	push	r0
    2f62:	0f b6       	in	r0, 0x3f	; 63
    2f64:	0f 92       	push	r0
    2f66:	11 24       	eor	r1, r1
    2f68:	0b b6       	in	r0, 0x3b	; 59
    2f6a:	0f 92       	push	r0
    2f6c:	2f 93       	push	r18
    2f6e:	3f 93       	push	r19
    2f70:	4f 93       	push	r20
    2f72:	5f 93       	push	r21
    2f74:	6f 93       	push	r22
    2f76:	7f 93       	push	r23
    2f78:	8f 93       	push	r24
    2f7a:	9f 93       	push	r25
    2f7c:	af 93       	push	r26
    2f7e:	bf 93       	push	r27
    2f80:	ef 93       	push	r30
    2f82:	ff 93       	push	r31
    2f84:	8e e5       	ldi	r24, 0x5E	; 94
    2f86:	96 e0       	ldi	r25, 0x06	; 6
    2f88:	94 dd       	rcall	.-1240   	; 0x2ab2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    2f8a:	ff 91       	pop	r31
    2f8c:	ef 91       	pop	r30
    2f8e:	bf 91       	pop	r27
    2f90:	af 91       	pop	r26
    2f92:	9f 91       	pop	r25
    2f94:	8f 91       	pop	r24
    2f96:	7f 91       	pop	r23
    2f98:	6f 91       	pop	r22
    2f9a:	5f 91       	pop	r21
    2f9c:	4f 91       	pop	r20
    2f9e:	3f 91       	pop	r19
    2fa0:	2f 91       	pop	r18
    2fa2:	0f 90       	pop	r0
    2fa4:	0b be       	out	0x3b, r0	; 59
    2fa6:	0f 90       	pop	r0
    2fa8:	0f be       	out	0x3f, r0	; 63
    2faa:	0f 90       	pop	r0
    2fac:	1f 90       	pop	r1
    2fae:	18 95       	reti

00002fb0 <_GLOBAL__sub_I___vector_51>:
    2fb0:	ee e5       	ldi	r30, 0x5E	; 94
    2fb2:	f6 e0       	ldi	r31, 0x06	; 6
    2fb4:	8f ea       	ldi	r24, 0xAF	; 175
    2fb6:	92 e0       	ldi	r25, 0x02	; 2
    2fb8:	91 83       	std	Z+1, r25	; 0x01
    2fba:	80 83       	st	Z, r24
    2fbc:	85 ed       	ldi	r24, 0xD5	; 213
    2fbe:	90 e0       	ldi	r25, 0x00	; 0
    2fc0:	93 83       	std	Z+3, r25	; 0x03
    2fc2:	82 83       	std	Z+2, r24	; 0x02
    2fc4:	84 ed       	ldi	r24, 0xD4	; 212
    2fc6:	90 e0       	ldi	r25, 0x00	; 0
    2fc8:	95 83       	std	Z+5, r25	; 0x05
    2fca:	84 83       	std	Z+4, r24	; 0x04
    2fcc:	80 ed       	ldi	r24, 0xD0	; 208
    2fce:	90 e0       	ldi	r25, 0x00	; 0
    2fd0:	97 83       	std	Z+7, r25	; 0x07
    2fd2:	86 83       	std	Z+6, r24	; 0x06
    2fd4:	81 ed       	ldi	r24, 0xD1	; 209
    2fd6:	90 e0       	ldi	r25, 0x00	; 0
    2fd8:	91 87       	std	Z+9, r25	; 0x09
    2fda:	80 87       	std	Z+8, r24	; 0x08
    2fdc:	82 ed       	ldi	r24, 0xD2	; 210
    2fde:	90 e0       	ldi	r25, 0x00	; 0
    2fe0:	93 87       	std	Z+11, r25	; 0x0b
    2fe2:	82 87       	std	Z+10, r24	; 0x0a
    2fe4:	86 ed       	ldi	r24, 0xD6	; 214
    2fe6:	90 e0       	ldi	r25, 0x00	; 0
    2fe8:	95 87       	std	Z+13, r25	; 0x0d
    2fea:	84 87       	std	Z+12, r24	; 0x0c
    2fec:	17 86       	std	Z+15, r1	; 0x0f
    2fee:	10 8a       	std	Z+16, r1	; 0x10
    2ff0:	11 8a       	std	Z+17, r1	; 0x11
    2ff2:	12 8a       	std	Z+18, r1	; 0x12
    2ff4:	08 95       	ret

00002ff6 <__vector_54>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial3_available() {
  return Serial3.available();
}
    2ff6:	1f 92       	push	r1
    2ff8:	0f 92       	push	r0
    2ffa:	0f b6       	in	r0, 0x3f	; 63
    2ffc:	0f 92       	push	r0
    2ffe:	11 24       	eor	r1, r1
    3000:	0b b6       	in	r0, 0x3b	; 59
    3002:	0f 92       	push	r0
    3004:	2f 93       	push	r18
    3006:	8f 93       	push	r24
    3008:	9f 93       	push	r25
    300a:	af 93       	push	r26
    300c:	bf 93       	push	r27
    300e:	ef 93       	push	r30
    3010:	ff 93       	push	r31
    3012:	e0 91 97 06 	lds	r30, 0x0697	; 0x800697 <Serial3+0x6>
    3016:	f0 91 98 06 	lds	r31, 0x0698	; 0x800698 <Serial3+0x7>
    301a:	80 81       	ld	r24, Z
    301c:	82 fd       	sbrc	r24, 2
    301e:	14 c0       	rjmp	.+40     	; 0x3048 <__vector_54+0x52>
    3020:	e1 e9       	ldi	r30, 0x91	; 145
    3022:	f6 e0       	ldi	r31, 0x06	; 6
    3024:	a4 85       	ldd	r26, Z+12	; 0x0c
    3026:	b5 85       	ldd	r27, Z+13	; 0x0d
    3028:	2c 91       	ld	r18, X
    302a:	87 85       	ldd	r24, Z+15	; 0x0f
    302c:	8f 5f       	subi	r24, 0xFF	; 255
    302e:	8f 70       	andi	r24, 0x0F	; 15
    3030:	90 89       	ldd	r25, Z+16	; 0x10
    3032:	89 17       	cp	r24, r25
    3034:	71 f0       	breq	.+28     	; 0x3052 <__vector_54+0x5c>
    3036:	df 01       	movw	r26, r30
    3038:	e7 85       	ldd	r30, Z+15	; 0x0f
    303a:	f0 e0       	ldi	r31, 0x00	; 0
    303c:	ef 56       	subi	r30, 0x6F	; 111
    303e:	f9 4f       	sbci	r31, 0xF9	; 249
    3040:	23 8b       	std	Z+19, r18	; 0x13
    3042:	1f 96       	adiw	r26, 0x0f	; 15
    3044:	8c 93       	st	X, r24
    3046:	05 c0       	rjmp	.+10     	; 0x3052 <__vector_54+0x5c>
    3048:	e0 91 9d 06 	lds	r30, 0x069D	; 0x80069d <Serial3+0xc>
    304c:	f0 91 9e 06 	lds	r31, 0x069E	; 0x80069e <Serial3+0xd>
    3050:	80 81       	ld	r24, Z
    3052:	ff 91       	pop	r31
    3054:	ef 91       	pop	r30
    3056:	bf 91       	pop	r27
    3058:	af 91       	pop	r26
    305a:	9f 91       	pop	r25
    305c:	8f 91       	pop	r24
    305e:	2f 91       	pop	r18
    3060:	0f 90       	pop	r0
    3062:	0b be       	out	0x3b, r0	; 59
    3064:	0f 90       	pop	r0
    3066:	0f be       	out	0x3f, r0	; 63
    3068:	0f 90       	pop	r0
    306a:	1f 90       	pop	r1
    306c:	18 95       	reti

0000306e <__vector_55>:
    306e:	1f 92       	push	r1
    3070:	0f 92       	push	r0
    3072:	0f b6       	in	r0, 0x3f	; 63
    3074:	0f 92       	push	r0
    3076:	11 24       	eor	r1, r1
    3078:	0b b6       	in	r0, 0x3b	; 59
    307a:	0f 92       	push	r0
    307c:	2f 93       	push	r18
    307e:	3f 93       	push	r19
    3080:	4f 93       	push	r20
    3082:	5f 93       	push	r21
    3084:	6f 93       	push	r22
    3086:	7f 93       	push	r23
    3088:	8f 93       	push	r24
    308a:	9f 93       	push	r25
    308c:	af 93       	push	r26
    308e:	bf 93       	push	r27
    3090:	ef 93       	push	r30
    3092:	ff 93       	push	r31
    3094:	81 e9       	ldi	r24, 0x91	; 145
    3096:	96 e0       	ldi	r25, 0x06	; 6
    3098:	0c dd       	rcall	.-1512   	; 0x2ab2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    309a:	ff 91       	pop	r31
    309c:	ef 91       	pop	r30
    309e:	bf 91       	pop	r27
    30a0:	af 91       	pop	r26
    30a2:	9f 91       	pop	r25
    30a4:	8f 91       	pop	r24
    30a6:	7f 91       	pop	r23
    30a8:	6f 91       	pop	r22
    30aa:	5f 91       	pop	r21
    30ac:	4f 91       	pop	r20
    30ae:	3f 91       	pop	r19
    30b0:	2f 91       	pop	r18
    30b2:	0f 90       	pop	r0
    30b4:	0b be       	out	0x3b, r0	; 59
    30b6:	0f 90       	pop	r0
    30b8:	0f be       	out	0x3f, r0	; 63
    30ba:	0f 90       	pop	r0
    30bc:	1f 90       	pop	r1
    30be:	18 95       	reti

000030c0 <_GLOBAL__sub_I___vector_54>:
    30c0:	e1 e9       	ldi	r30, 0x91	; 145
    30c2:	f6 e0       	ldi	r31, 0x06	; 6
    30c4:	8f ea       	ldi	r24, 0xAF	; 175
    30c6:	92 e0       	ldi	r25, 0x02	; 2
    30c8:	91 83       	std	Z+1, r25	; 0x01
    30ca:	80 83       	st	Z, r24
    30cc:	85 e3       	ldi	r24, 0x35	; 53
    30ce:	91 e0       	ldi	r25, 0x01	; 1
    30d0:	93 83       	std	Z+3, r25	; 0x03
    30d2:	82 83       	std	Z+2, r24	; 0x02
    30d4:	84 e3       	ldi	r24, 0x34	; 52
    30d6:	91 e0       	ldi	r25, 0x01	; 1
    30d8:	95 83       	std	Z+5, r25	; 0x05
    30da:	84 83       	std	Z+4, r24	; 0x04
    30dc:	80 e3       	ldi	r24, 0x30	; 48
    30de:	91 e0       	ldi	r25, 0x01	; 1
    30e0:	97 83       	std	Z+7, r25	; 0x07
    30e2:	86 83       	std	Z+6, r24	; 0x06
    30e4:	81 e3       	ldi	r24, 0x31	; 49
    30e6:	91 e0       	ldi	r25, 0x01	; 1
    30e8:	91 87       	std	Z+9, r25	; 0x09
    30ea:	80 87       	std	Z+8, r24	; 0x08
    30ec:	82 e3       	ldi	r24, 0x32	; 50
    30ee:	91 e0       	ldi	r25, 0x01	; 1
    30f0:	93 87       	std	Z+11, r25	; 0x0b
    30f2:	82 87       	std	Z+10, r24	; 0x0a
    30f4:	86 e3       	ldi	r24, 0x36	; 54
    30f6:	91 e0       	ldi	r25, 0x01	; 1
    30f8:	95 87       	std	Z+13, r25	; 0x0d
    30fa:	84 87       	std	Z+12, r24	; 0x0c
    30fc:	17 86       	std	Z+15, r1	; 0x0f
    30fe:	10 8a       	std	Z+16, r1	; 0x10
    3100:	11 8a       	std	Z+17, r1	; 0x11
    3102:	12 8a       	std	Z+18, r1	; 0x12
    3104:	08 95       	ret

00003106 <_ZN13HardwareServo5beginEv>:
	*_icr = 40000; //Set period to 20ms
}

void HardwareServo::end(){
	*_tccrA = 0;
	*_tccrB = 0;
    3106:	fc 01       	movw	r30, r24
    3108:	a2 81       	ldd	r26, Z+2	; 0x02
    310a:	b3 81       	ldd	r27, Z+3	; 0x03
    310c:	82 e0       	ldi	r24, 0x02	; 2
    310e:	8c 93       	st	X, r24
    3110:	a4 81       	ldd	r26, Z+4	; 0x04
    3112:	b5 81       	ldd	r27, Z+5	; 0x05
    3114:	8a e1       	ldi	r24, 0x1A	; 26
    3116:	8c 93       	st	X, r24
    3118:	01 90       	ld	r0, Z+
    311a:	f0 81       	ld	r31, Z
    311c:	e0 2d       	mov	r30, r0
    311e:	80 e4       	ldi	r24, 0x40	; 64
    3120:	9c e9       	ldi	r25, 0x9C	; 156
    3122:	91 83       	std	Z+1, r25	; 0x01
    3124:	80 83       	st	Z, r24
    3126:	08 95       	ret

00003128 <_ZN13HardwareServo7EnableAEv>:
}

void HardwareServo::EnableA(){
    3128:	fc 01       	movw	r30, r24
	*_tccrA |= _BV(COM1A1);
    312a:	a2 81       	ldd	r26, Z+2	; 0x02
    312c:	b3 81       	ldd	r27, Z+3	; 0x03
    312e:	8c 91       	ld	r24, X
    3130:	80 68       	ori	r24, 0x80	; 128
    3132:	8c 93       	st	X, r24
	*_DDR |= _PINA;
    3134:	a4 85       	ldd	r26, Z+12	; 0x0c
    3136:	b5 85       	ldd	r27, Z+13	; 0x0d
    3138:	9c 91       	ld	r25, X
    313a:	80 89       	ldd	r24, Z+16	; 0x10
    313c:	89 2b       	or	r24, r25
    313e:	8c 93       	st	X, r24
    3140:	08 95       	ret

00003142 <_ZN13HardwareServo7EnableBEv>:
}

void HardwareServo::EnableB(){
    3142:	fc 01       	movw	r30, r24
	*_tccrA |= _BV(COM1B1);
    3144:	a2 81       	ldd	r26, Z+2	; 0x02
    3146:	b3 81       	ldd	r27, Z+3	; 0x03
    3148:	8c 91       	ld	r24, X
    314a:	80 62       	ori	r24, 0x20	; 32
    314c:	8c 93       	st	X, r24
	*_DDR |= _PINB;
    314e:	a4 85       	ldd	r26, Z+12	; 0x0c
    3150:	b5 85       	ldd	r27, Z+13	; 0x0d
    3152:	9c 91       	ld	r25, X
    3154:	81 89       	ldd	r24, Z+17	; 0x11
    3156:	89 2b       	or	r24, r25
    3158:	8c 93       	st	X, r24
    315a:	08 95       	ret

0000315c <_ZN13HardwareServo7EnableCEv>:
}

void HardwareServo::EnableC(){
    315c:	fc 01       	movw	r30, r24
	*_tccrA |= _BV(COM1C1);
    315e:	a2 81       	ldd	r26, Z+2	; 0x02
    3160:	b3 81       	ldd	r27, Z+3	; 0x03
    3162:	8c 91       	ld	r24, X
    3164:	88 60       	ori	r24, 0x08	; 8
    3166:	8c 93       	st	X, r24
	*_DDR |= _PINC;
    3168:	a4 85       	ldd	r26, Z+12	; 0x0c
    316a:	b5 85       	ldd	r27, Z+13	; 0x0d
    316c:	9c 91       	ld	r25, X
    316e:	82 89       	ldd	r24, Z+18	; 0x12
    3170:	89 2b       	or	r24, r25
    3172:	8c 93       	st	X, r24
    3174:	08 95       	ret

00003176 <_ZN13HardwareServo8DisableAEv>:
}

void HardwareServo::DisableA(){
    3176:	fc 01       	movw	r30, r24
	*_tccrA &= ~_BV(COM1A1);
    3178:	a2 81       	ldd	r26, Z+2	; 0x02
    317a:	b3 81       	ldd	r27, Z+3	; 0x03
    317c:	8c 91       	ld	r24, X
    317e:	8f 77       	andi	r24, 0x7F	; 127
    3180:	8c 93       	st	X, r24
	*_PORT &= ~_PINA;
    3182:	a6 85       	ldd	r26, Z+14	; 0x0e
    3184:	b7 85       	ldd	r27, Z+15	; 0x0f
    3186:	9c 91       	ld	r25, X
    3188:	80 89       	ldd	r24, Z+16	; 0x10
    318a:	80 95       	com	r24
    318c:	89 23       	and	r24, r25
    318e:	8c 93       	st	X, r24
    3190:	08 95       	ret

00003192 <_ZN13HardwareServo8DisableBEv>:
}

void HardwareServo::DisableB(){
    3192:	fc 01       	movw	r30, r24
	*_tccrA &= ~_BV(COM1B1);
    3194:	a2 81       	ldd	r26, Z+2	; 0x02
    3196:	b3 81       	ldd	r27, Z+3	; 0x03
    3198:	8c 91       	ld	r24, X
    319a:	8f 7d       	andi	r24, 0xDF	; 223
    319c:	8c 93       	st	X, r24
	*_PORT &= ~_PINB;
    319e:	a6 85       	ldd	r26, Z+14	; 0x0e
    31a0:	b7 85       	ldd	r27, Z+15	; 0x0f
    31a2:	9c 91       	ld	r25, X
    31a4:	81 89       	ldd	r24, Z+17	; 0x11
    31a6:	80 95       	com	r24
    31a8:	89 23       	and	r24, r25
    31aa:	8c 93       	st	X, r24
    31ac:	08 95       	ret

000031ae <_ZN13HardwareServo8DisableCEv>:
}

void HardwareServo::DisableC(){
    31ae:	fc 01       	movw	r30, r24
	*_tccrA &= ~_BV(COM1C1);
    31b0:	a2 81       	ldd	r26, Z+2	; 0x02
    31b2:	b3 81       	ldd	r27, Z+3	; 0x03
    31b4:	8c 91       	ld	r24, X
    31b6:	87 7f       	andi	r24, 0xF7	; 247
    31b8:	8c 93       	st	X, r24
	*_PORT &= ~_PINC;	
    31ba:	a6 85       	ldd	r26, Z+14	; 0x0e
    31bc:	b7 85       	ldd	r27, Z+15	; 0x0f
    31be:	9c 91       	ld	r25, X
    31c0:	82 89       	ldd	r24, Z+18	; 0x12
    31c2:	80 95       	com	r24
    31c4:	89 23       	and	r24, r25
    31c6:	8c 93       	st	X, r24
    31c8:	08 95       	ret

000031ca <_ZN13HardwareServo9setPulseAEj>:
}

void HardwareServo::setPulseA(uint16_t pulse){
	//*_ocrA = (uint16_t)((((uint32_t)pulse * (_maxA - _minA)) / 255 + _minA) * CPU_CONST);
	*_ocrA = (uint16_t)(pulse * CPU_CONST);
    31ca:	dc 01       	movw	r26, r24
    31cc:	16 96       	adiw	r26, 0x06	; 6
    31ce:	ed 91       	ld	r30, X+
    31d0:	fc 91       	ld	r31, X
    31d2:	17 97       	sbiw	r26, 0x07	; 7
    31d4:	66 0f       	add	r22, r22
    31d6:	77 1f       	adc	r23, r23
    31d8:	71 83       	std	Z+1, r23	; 0x01
    31da:	60 83       	st	Z, r22
    31dc:	08 95       	ret

000031de <_ZN13HardwareServo9setPulseBEj>:
}

void HardwareServo::setPulseB(uint16_t pulse){
	//*_ocrB = (uint16_t)((((uint32_t)pulse * (_maxB - _minB)) / 255 + _minB) * CPU_CONST);	
	*_ocrB = (uint16_t)(pulse * CPU_CONST);	
    31de:	dc 01       	movw	r26, r24
    31e0:	18 96       	adiw	r26, 0x08	; 8
    31e2:	ed 91       	ld	r30, X+
    31e4:	fc 91       	ld	r31, X
    31e6:	19 97       	sbiw	r26, 0x09	; 9
    31e8:	66 0f       	add	r22, r22
    31ea:	77 1f       	adc	r23, r23
    31ec:	71 83       	std	Z+1, r23	; 0x01
    31ee:	60 83       	st	Z, r22
    31f0:	08 95       	ret

000031f2 <_ZN13HardwareServo9setPulseCEj>:
}

void HardwareServo::setPulseC(uint16_t pulse){
	//*_ocrC = (uint16_t)((((uint32_t)pulse * (_maxC - _minC)) / 255 + _minC) * CPU_CONST);	
	*_ocrC = (uint16_t)(pulse * CPU_CONST);
    31f2:	dc 01       	movw	r26, r24
    31f4:	1a 96       	adiw	r26, 0x0a	; 10
    31f6:	ed 91       	ld	r30, X+
    31f8:	fc 91       	ld	r31, X
    31fa:	1b 97       	sbiw	r26, 0x0b	; 11
    31fc:	66 0f       	add	r22, r22
    31fe:	77 1f       	adc	r23, r23
    3200:	71 83       	std	Z+1, r23	; 0x01
    3202:	60 83       	st	Z, r22
    3204:	08 95       	ret

00003206 <_GLOBAL__sub_I__ZN13HardwareServoC2ERVjRVhS3_S1_S1_S1_S3_S3_hhh>:
#define CLK_DIV_256 (_BV(CS02))
#define CLK_DIV_1024 (_B(CS02) | _BV(CS00))

HardwareServo::HardwareServo(Register16 &icr, Register &tccrA, Register &tccrB, Register16 &ocrA, Register16 &ocrB, Register16 &ocrC, Register &ddr, Register &port, const uint8_t pinA, const uint8_t pinB, const uint8_t pinC)
 : _icr(&icr), _tccrA(&tccrA), _tccrB(&tccrB), _ocrA(&ocrA), _ocrB(&ocrB), _ocrC(&ocrC),
  _DDR(&ddr), _PORT(&port), _PINA(pinA), _PINB(pinB), _PINC(pinC)/*,
    3206:	ed ef       	ldi	r30, 0xFD	; 253
    3208:	f6 e0       	ldi	r31, 0x06	; 6
    320a:	86 e8       	ldi	r24, 0x86	; 134
    320c:	90 e0       	ldi	r25, 0x00	; 0
    320e:	91 83       	std	Z+1, r25	; 0x01
    3210:	80 83       	st	Z, r24
    3212:	80 e8       	ldi	r24, 0x80	; 128
    3214:	90 e0       	ldi	r25, 0x00	; 0
    3216:	93 83       	std	Z+3, r25	; 0x03
    3218:	82 83       	std	Z+2, r24	; 0x02
    321a:	81 e8       	ldi	r24, 0x81	; 129
    321c:	90 e0       	ldi	r25, 0x00	; 0
    321e:	95 83       	std	Z+5, r25	; 0x05
    3220:	84 83       	std	Z+4, r24	; 0x04
    3222:	88 e8       	ldi	r24, 0x88	; 136
    3224:	90 e0       	ldi	r25, 0x00	; 0
    3226:	97 83       	std	Z+7, r25	; 0x07
    3228:	86 83       	std	Z+6, r24	; 0x06
    322a:	8a e8       	ldi	r24, 0x8A	; 138
    322c:	90 e0       	ldi	r25, 0x00	; 0
    322e:	91 87       	std	Z+9, r25	; 0x09
    3230:	80 87       	std	Z+8, r24	; 0x08
    3232:	8c e8       	ldi	r24, 0x8C	; 140
    3234:	90 e0       	ldi	r25, 0x00	; 0
    3236:	93 87       	std	Z+11, r25	; 0x0b
    3238:	82 87       	std	Z+10, r24	; 0x0a
    323a:	84 e2       	ldi	r24, 0x24	; 36
    323c:	90 e0       	ldi	r25, 0x00	; 0
    323e:	95 87       	std	Z+13, r25	; 0x0d
    3240:	84 87       	std	Z+12, r24	; 0x0c
    3242:	85 e2       	ldi	r24, 0x25	; 37
    3244:	90 e0       	ldi	r25, 0x00	; 0
    3246:	97 87       	std	Z+15, r25	; 0x0f
    3248:	86 87       	std	Z+14, r24	; 0x0e
    324a:	80 e2       	ldi	r24, 0x20	; 32
    324c:	80 8b       	std	Z+16, r24	; 0x10
    324e:	90 e4       	ldi	r25, 0x40	; 64
    3250:	91 8b       	std	Z+17, r25	; 0x11
    3252:	90 e8       	ldi	r25, 0x80	; 128
    3254:	92 8b       	std	Z+18, r25	; 0x12
    3256:	ea ee       	ldi	r30, 0xEA	; 234
    3258:	f6 e0       	ldi	r31, 0x06	; 6
    325a:	26 e9       	ldi	r18, 0x96	; 150
    325c:	30 e0       	ldi	r19, 0x00	; 0
    325e:	31 83       	std	Z+1, r19	; 0x01
    3260:	20 83       	st	Z, r18
    3262:	20 e9       	ldi	r18, 0x90	; 144
    3264:	30 e0       	ldi	r19, 0x00	; 0
    3266:	33 83       	std	Z+3, r19	; 0x03
    3268:	22 83       	std	Z+2, r18	; 0x02
    326a:	21 e9       	ldi	r18, 0x91	; 145
    326c:	30 e0       	ldi	r19, 0x00	; 0
    326e:	35 83       	std	Z+5, r19	; 0x05
    3270:	24 83       	std	Z+4, r18	; 0x04
    3272:	28 e9       	ldi	r18, 0x98	; 152
    3274:	30 e0       	ldi	r19, 0x00	; 0
    3276:	37 83       	std	Z+7, r19	; 0x07
    3278:	26 83       	std	Z+6, r18	; 0x06
    327a:	2a e9       	ldi	r18, 0x9A	; 154
    327c:	30 e0       	ldi	r19, 0x00	; 0
    327e:	31 87       	std	Z+9, r19	; 0x09
    3280:	20 87       	std	Z+8, r18	; 0x08
    3282:	2c e9       	ldi	r18, 0x9C	; 156
    3284:	30 e0       	ldi	r19, 0x00	; 0
    3286:	33 87       	std	Z+11, r19	; 0x0b
    3288:	22 87       	std	Z+10, r18	; 0x0a
    328a:	2d e2       	ldi	r18, 0x2D	; 45
    328c:	30 e0       	ldi	r19, 0x00	; 0
    328e:	35 87       	std	Z+13, r19	; 0x0d
    3290:	24 87       	std	Z+12, r18	; 0x0c
    3292:	2e e2       	ldi	r18, 0x2E	; 46
    3294:	30 e0       	ldi	r19, 0x00	; 0
    3296:	37 87       	std	Z+15, r19	; 0x0f
    3298:	26 87       	std	Z+14, r18	; 0x0e
    329a:	28 e0       	ldi	r18, 0x08	; 8
    329c:	20 8b       	std	Z+16, r18	; 0x10
    329e:	90 e1       	ldi	r25, 0x10	; 16
    32a0:	91 8b       	std	Z+17, r25	; 0x11
    32a2:	82 8b       	std	Z+18, r24	; 0x12
    32a4:	e7 ed       	ldi	r30, 0xD7	; 215
    32a6:	f6 e0       	ldi	r31, 0x06	; 6
    32a8:	46 ea       	ldi	r20, 0xA6	; 166
    32aa:	50 e0       	ldi	r21, 0x00	; 0
    32ac:	51 83       	std	Z+1, r21	; 0x01
    32ae:	40 83       	st	Z, r20
    32b0:	40 ea       	ldi	r20, 0xA0	; 160
    32b2:	50 e0       	ldi	r21, 0x00	; 0
    32b4:	53 83       	std	Z+3, r21	; 0x03
    32b6:	42 83       	std	Z+2, r20	; 0x02
    32b8:	41 ea       	ldi	r20, 0xA1	; 161
    32ba:	50 e0       	ldi	r21, 0x00	; 0
    32bc:	55 83       	std	Z+5, r21	; 0x05
    32be:	44 83       	std	Z+4, r20	; 0x04
    32c0:	48 ea       	ldi	r20, 0xA8	; 168
    32c2:	50 e0       	ldi	r21, 0x00	; 0
    32c4:	57 83       	std	Z+7, r21	; 0x07
    32c6:	46 83       	std	Z+6, r20	; 0x06
    32c8:	4a ea       	ldi	r20, 0xAA	; 170
    32ca:	50 e0       	ldi	r21, 0x00	; 0
    32cc:	51 87       	std	Z+9, r21	; 0x09
    32ce:	40 87       	std	Z+8, r20	; 0x08
    32d0:	4c ea       	ldi	r20, 0xAC	; 172
    32d2:	50 e0       	ldi	r21, 0x00	; 0
    32d4:	53 87       	std	Z+11, r21	; 0x0b
    32d6:	42 87       	std	Z+10, r20	; 0x0a
    32d8:	41 e0       	ldi	r20, 0x01	; 1
    32da:	51 e0       	ldi	r21, 0x01	; 1
    32dc:	55 87       	std	Z+13, r21	; 0x0d
    32de:	44 87       	std	Z+12, r20	; 0x0c
    32e0:	42 e0       	ldi	r20, 0x02	; 2
    32e2:	51 e0       	ldi	r21, 0x01	; 1
    32e4:	57 87       	std	Z+15, r21	; 0x0f
    32e6:	46 87       	std	Z+14, r20	; 0x0e
    32e8:	20 8b       	std	Z+16, r18	; 0x10
    32ea:	91 8b       	std	Z+17, r25	; 0x11
    32ec:	82 8b       	std	Z+18, r24	; 0x12
    32ee:	e4 ec       	ldi	r30, 0xC4	; 196
    32f0:	f6 e0       	ldi	r31, 0x06	; 6
    32f2:	46 e2       	ldi	r20, 0x26	; 38
    32f4:	51 e0       	ldi	r21, 0x01	; 1
    32f6:	51 83       	std	Z+1, r21	; 0x01
    32f8:	40 83       	st	Z, r20
    32fa:	40 e2       	ldi	r20, 0x20	; 32
    32fc:	51 e0       	ldi	r21, 0x01	; 1
    32fe:	53 83       	std	Z+3, r21	; 0x03
    3300:	42 83       	std	Z+2, r20	; 0x02
    3302:	41 e2       	ldi	r20, 0x21	; 33
    3304:	51 e0       	ldi	r21, 0x01	; 1
    3306:	55 83       	std	Z+5, r21	; 0x05
    3308:	44 83       	std	Z+4, r20	; 0x04
    330a:	48 e2       	ldi	r20, 0x28	; 40
    330c:	51 e0       	ldi	r21, 0x01	; 1
    330e:	57 83       	std	Z+7, r21	; 0x07
    3310:	46 83       	std	Z+6, r20	; 0x06
    3312:	4a e2       	ldi	r20, 0x2A	; 42
    3314:	51 e0       	ldi	r21, 0x01	; 1
    3316:	51 87       	std	Z+9, r21	; 0x09
    3318:	40 87       	std	Z+8, r20	; 0x08
    331a:	4c e2       	ldi	r20, 0x2C	; 44
    331c:	51 e0       	ldi	r21, 0x01	; 1
    331e:	53 87       	std	Z+11, r21	; 0x0b
    3320:	42 87       	std	Z+10, r20	; 0x0a
    3322:	4a e0       	ldi	r20, 0x0A	; 10
    3324:	51 e0       	ldi	r21, 0x01	; 1
    3326:	55 87       	std	Z+13, r21	; 0x0d
    3328:	44 87       	std	Z+12, r20	; 0x0c
    332a:	4b e0       	ldi	r20, 0x0B	; 11
    332c:	51 e0       	ldi	r21, 0x01	; 1
    332e:	57 87       	std	Z+15, r21	; 0x0f
    3330:	46 87       	std	Z+14, r20	; 0x0e
    3332:	20 8b       	std	Z+16, r18	; 0x10
    3334:	91 8b       	std	Z+17, r25	; 0x11
    3336:	82 8b       	std	Z+18, r24	; 0x12
    3338:	08 95       	ret

0000333a <_ZN13HardwareTimer12findPrescaleEf>:
	beginMs(us / 1000.0);
}

void HardwareTimer::beginNs(float ns){
	beginMs(ns / 1000000.0);
}
    333a:	cf 92       	push	r12
    333c:	df 92       	push	r13
    333e:	ef 92       	push	r14
    3340:	ff 92       	push	r15
    3342:	cf 93       	push	r28
    3344:	df 93       	push	r29
    3346:	ec 01       	movw	r28, r24
    3348:	cb 01       	movw	r24, r22
    334a:	ba 01       	movw	r22, r20
    334c:	20 e0       	ldi	r18, 0x00	; 0
    334e:	30 e0       	ldi	r19, 0x00	; 0
    3350:	4a e7       	ldi	r20, 0x7A	; 122
    3352:	56 e4       	ldi	r21, 0x46	; 70
    3354:	0e 94 be 24 	call	0x497c	; 0x497c <__mulsf3>
    3358:	20 e0       	ldi	r18, 0x00	; 0
    335a:	30 e0       	ldi	r19, 0x00	; 0
    335c:	40 e8       	ldi	r20, 0x80	; 128
    335e:	5b e3       	ldi	r21, 0x3B	; 59
    3360:	0e 94 be 24 	call	0x497c	; 0x497c <__mulsf3>
    3364:	6b 01       	movw	r12, r22
    3366:	7c 01       	movw	r14, r24
    3368:	20 e0       	ldi	r18, 0x00	; 0
    336a:	30 e0       	ldi	r19, 0x00	; 0
    336c:	40 e8       	ldi	r20, 0x80	; 128
    336e:	5f e3       	ldi	r21, 0x3F	; 63
    3370:	0e 94 70 23 	call	0x46e0	; 0x46e0 <__cmpsf2>
    3374:	18 16       	cp	r1, r24
    3376:	3c f0       	brlt	.+14     	; 0x3386 <_ZN13HardwareTimer12findPrescaleEf+0x4c>
    3378:	81 e0       	ldi	r24, 0x01	; 1
    337a:	8a 87       	std	Y+10, r24	; 0x0a
    337c:	60 e0       	ldi	r22, 0x00	; 0
    337e:	70 e0       	ldi	r23, 0x00	; 0
    3380:	80 e8       	ldi	r24, 0x80	; 128
    3382:	9f e3       	ldi	r25, 0x3F	; 63
    3384:	39 c0       	rjmp	.+114    	; 0x33f8 <_ZN13HardwareTimer12findPrescaleEf+0xbe>
    3386:	20 e0       	ldi	r18, 0x00	; 0
    3388:	30 e0       	ldi	r19, 0x00	; 0
    338a:	40 e0       	ldi	r20, 0x00	; 0
    338c:	51 e4       	ldi	r21, 0x41	; 65
    338e:	c7 01       	movw	r24, r14
    3390:	b6 01       	movw	r22, r12
    3392:	0e 94 70 23 	call	0x46e0	; 0x46e0 <__cmpsf2>
    3396:	18 16       	cp	r1, r24
    3398:	3c f0       	brlt	.+14     	; 0x33a8 <_ZN13HardwareTimer12findPrescaleEf+0x6e>
    339a:	82 e0       	ldi	r24, 0x02	; 2
    339c:	8a 87       	std	Y+10, r24	; 0x0a
    339e:	60 e0       	ldi	r22, 0x00	; 0
    33a0:	70 e0       	ldi	r23, 0x00	; 0
    33a2:	80 e0       	ldi	r24, 0x00	; 0
    33a4:	91 e4       	ldi	r25, 0x41	; 65
    33a6:	28 c0       	rjmp	.+80     	; 0x33f8 <_ZN13HardwareTimer12findPrescaleEf+0xbe>
    33a8:	20 e0       	ldi	r18, 0x00	; 0
    33aa:	30 e0       	ldi	r19, 0x00	; 0
    33ac:	40 e8       	ldi	r20, 0x80	; 128
    33ae:	52 e4       	ldi	r21, 0x42	; 66
    33b0:	c7 01       	movw	r24, r14
    33b2:	b6 01       	movw	r22, r12
    33b4:	0e 94 70 23 	call	0x46e0	; 0x46e0 <__cmpsf2>
    33b8:	18 16       	cp	r1, r24
    33ba:	3c f0       	brlt	.+14     	; 0x33ca <_ZN13HardwareTimer12findPrescaleEf+0x90>
    33bc:	83 e0       	ldi	r24, 0x03	; 3
    33be:	8a 87       	std	Y+10, r24	; 0x0a
    33c0:	60 e0       	ldi	r22, 0x00	; 0
    33c2:	70 e0       	ldi	r23, 0x00	; 0
    33c4:	80 e8       	ldi	r24, 0x80	; 128
    33c6:	92 e4       	ldi	r25, 0x42	; 66
    33c8:	17 c0       	rjmp	.+46     	; 0x33f8 <_ZN13HardwareTimer12findPrescaleEf+0xbe>
    33ca:	20 e0       	ldi	r18, 0x00	; 0
    33cc:	30 e0       	ldi	r19, 0x00	; 0
    33ce:	40 e8       	ldi	r20, 0x80	; 128
    33d0:	53 e4       	ldi	r21, 0x43	; 67
    33d2:	c7 01       	movw	r24, r14
    33d4:	b6 01       	movw	r22, r12
    33d6:	0e 94 70 23 	call	0x46e0	; 0x46e0 <__cmpsf2>
    33da:	18 16       	cp	r1, r24
    33dc:	3c f0       	brlt	.+14     	; 0x33ec <_ZN13HardwareTimer12findPrescaleEf+0xb2>
    33de:	84 e0       	ldi	r24, 0x04	; 4
    33e0:	8a 87       	std	Y+10, r24	; 0x0a
    33e2:	60 e0       	ldi	r22, 0x00	; 0
    33e4:	70 e0       	ldi	r23, 0x00	; 0
    33e6:	80 e8       	ldi	r24, 0x80	; 128
    33e8:	93 e4       	ldi	r25, 0x43	; 67
    33ea:	06 c0       	rjmp	.+12     	; 0x33f8 <_ZN13HardwareTimer12findPrescaleEf+0xbe>
    33ec:	85 e0       	ldi	r24, 0x05	; 5
    33ee:	8a 87       	std	Y+10, r24	; 0x0a
    33f0:	60 e0       	ldi	r22, 0x00	; 0
    33f2:	70 e0       	ldi	r23, 0x00	; 0
    33f4:	80 e8       	ldi	r24, 0x80	; 128
    33f6:	94 e4       	ldi	r25, 0x44	; 68
    33f8:	df 91       	pop	r29
    33fa:	cf 91       	pop	r28
    33fc:	ff 90       	pop	r15
    33fe:	ef 90       	pop	r14
    3400:	df 90       	pop	r13
    3402:	cf 90       	pop	r12
    3404:	08 95       	ret

00003406 <_ZN13HardwareTimer7beginMsEf>:
    3406:	8f 92       	push	r8
    3408:	9f 92       	push	r9
    340a:	af 92       	push	r10
    340c:	bf 92       	push	r11
    340e:	cf 92       	push	r12
    3410:	df 92       	push	r13
    3412:	ef 92       	push	r14
    3414:	ff 92       	push	r15
    3416:	cf 93       	push	r28
    3418:	df 93       	push	r29
    341a:	ec 01       	movw	r28, r24
    341c:	6a 01       	movw	r12, r20
    341e:	7b 01       	movw	r14, r22
    3420:	e8 81       	ld	r30, Y
    3422:	f9 81       	ldd	r31, Y+1	; 0x01
    3424:	82 e0       	ldi	r24, 0x02	; 2
    3426:	80 83       	st	Z, r24
    3428:	ea 81       	ldd	r30, Y+2	; 0x02
    342a:	fb 81       	ldd	r31, Y+3	; 0x03
    342c:	10 82       	st	Z, r1
    342e:	ec 81       	ldd	r30, Y+4	; 0x04
    3430:	fd 81       	ldd	r31, Y+5	; 0x05
    3432:	80 83       	st	Z, r24
    3434:	78 94       	sei
    3436:	ce 01       	movw	r24, r28
    3438:	80 df       	rcall	.-256    	; 0x333a <_ZN13HardwareTimer12findPrescaleEf>
    343a:	4b 01       	movw	r8, r22
    343c:	5c 01       	movw	r10, r24
    343e:	20 e0       	ldi	r18, 0x00	; 0
    3440:	34 e2       	ldi	r19, 0x24	; 36
    3442:	44 e7       	ldi	r20, 0x74	; 116
    3444:	5b e4       	ldi	r21, 0x4B	; 75
    3446:	c7 01       	movw	r24, r14
    3448:	b6 01       	movw	r22, r12
    344a:	0e 94 be 24 	call	0x497c	; 0x497c <__mulsf3>
    344e:	6b 01       	movw	r12, r22
    3450:	7c 01       	movw	r14, r24
    3452:	20 e0       	ldi	r18, 0x00	; 0
    3454:	30 e0       	ldi	r19, 0x00	; 0
    3456:	4a e7       	ldi	r20, 0x7A	; 122
    3458:	54 e4       	ldi	r21, 0x44	; 68
    345a:	c5 01       	movw	r24, r10
    345c:	b4 01       	movw	r22, r8
    345e:	0e 94 be 24 	call	0x497c	; 0x497c <__mulsf3>
    3462:	9b 01       	movw	r18, r22
    3464:	ac 01       	movw	r20, r24
    3466:	c7 01       	movw	r24, r14
    3468:	b6 01       	movw	r22, r12
    346a:	0e 94 74 23 	call	0x46e8	; 0x46e8 <__divsf3>
    346e:	20 e0       	ldi	r18, 0x00	; 0
    3470:	30 e0       	ldi	r19, 0x00	; 0
    3472:	40 e8       	ldi	r20, 0x80	; 128
    3474:	5f e3       	ldi	r21, 0x3F	; 63
    3476:	0e 94 0b 23 	call	0x4616	; 0x4616 <__subsf3>
    347a:	6b 01       	movw	r12, r22
    347c:	7c 01       	movw	r14, r24
    347e:	20 e0       	ldi	r18, 0x00	; 0
    3480:	30 e0       	ldi	r19, 0x00	; 0
    3482:	4f e7       	ldi	r20, 0x7F	; 127
    3484:	53 e4       	ldi	r21, 0x43	; 67
    3486:	0e 94 ba 24 	call	0x4974	; 0x4974 <__gesf2>
    348a:	18 16       	cp	r1, r24
    348c:	2c f4       	brge	.+10     	; 0x3498 <_ZN13HardwareTimer7beginMsEf+0x92>
    348e:	e8 85       	ldd	r30, Y+8	; 0x08
    3490:	f9 85       	ldd	r31, Y+9	; 0x09
    3492:	8f ef       	ldi	r24, 0xFF	; 255
    3494:	80 83       	st	Z, r24
    3496:	1b c0       	rjmp	.+54     	; 0x34ce <_ZN13HardwareTimer7beginMsEf+0xc8>
    3498:	20 e0       	ldi	r18, 0x00	; 0
    349a:	30 e0       	ldi	r19, 0x00	; 0
    349c:	a9 01       	movw	r20, r18
    349e:	c7 01       	movw	r24, r14
    34a0:	b6 01       	movw	r22, r12
    34a2:	0e 94 70 23 	call	0x46e0	; 0x46e0 <__cmpsf2>
    34a6:	88 23       	and	r24, r24
    34a8:	24 f4       	brge	.+8      	; 0x34b2 <_ZN13HardwareTimer7beginMsEf+0xac>
    34aa:	e8 85       	ldd	r30, Y+8	; 0x08
    34ac:	f9 85       	ldd	r31, Y+9	; 0x09
    34ae:	10 82       	st	Z, r1
    34b0:	0e c0       	rjmp	.+28     	; 0x34ce <_ZN13HardwareTimer7beginMsEf+0xc8>
    34b2:	08 84       	ldd	r0, Y+8	; 0x08
    34b4:	d9 85       	ldd	r29, Y+9	; 0x09
    34b6:	c0 2d       	mov	r28, r0
    34b8:	20 e0       	ldi	r18, 0x00	; 0
    34ba:	30 e0       	ldi	r19, 0x00	; 0
    34bc:	40 e0       	ldi	r20, 0x00	; 0
    34be:	5f e3       	ldi	r21, 0x3F	; 63
    34c0:	c7 01       	movw	r24, r14
    34c2:	b6 01       	movw	r22, r12
    34c4:	0e 94 0c 23 	call	0x4618	; 0x4618 <__addsf3>
    34c8:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <__fixunssfsi>
    34cc:	68 83       	st	Y, r22
    34ce:	df 91       	pop	r29
    34d0:	cf 91       	pop	r28
    34d2:	ff 90       	pop	r15
    34d4:	ef 90       	pop	r14
    34d6:	df 90       	pop	r13
    34d8:	cf 90       	pop	r12
    34da:	bf 90       	pop	r11
    34dc:	af 90       	pop	r10
    34de:	9f 90       	pop	r9
    34e0:	8f 90       	pop	r8
    34e2:	08 95       	ret

000034e4 <_ZN13HardwareTimer5startEh>:

void HardwareTimer::start(uint8_t ticks/*= 1*/){
    34e4:	fc 01       	movw	r30, r24
	*_tccrB = 0; //Disable timer
    34e6:	a2 81       	ldd	r26, Z+2	; 0x02
    34e8:	b3 81       	ldd	r27, Z+3	; 0x03
    34ea:	1c 92       	st	X, r1
	ovfRemaining = ticks;
    34ec:	63 87       	std	Z+11, r22	; 0x0b
	*_tcnt = 0; //Reset timer
    34ee:	a6 81       	ldd	r26, Z+6	; 0x06
    34f0:	b7 81       	ldd	r27, Z+7	; 0x07
    34f2:	1c 92       	st	X, r1
	*_tccrB = CLK_DIV_1024; 
    34f4:	02 80       	ldd	r0, Z+2	; 0x02
    34f6:	f3 81       	ldd	r31, Z+3	; 0x03
    34f8:	e0 2d       	mov	r30, r0
    34fa:	85 e0       	ldi	r24, 0x05	; 5
    34fc:	80 83       	st	Z, r24
    34fe:	08 95       	ret

00003500 <_ZN13HardwareTimer8finishedEv>:
}

bool HardwareTimer::finished(){
	return ovfRemaining == 0;
    3500:	fc 01       	movw	r30, r24
    3502:	93 85       	ldd	r25, Z+11	; 0x0b
    3504:	81 e0       	ldi	r24, 0x01	; 1
    3506:	91 11       	cpse	r25, r1
    3508:	80 e0       	ldi	r24, 0x00	; 0
}
    350a:	08 95       	ret

0000350c <_ZN13HardwareTimer13waitForFinishEv>:

void HardwareTimer::waitForFinish(){
    350c:	fc 01       	movw	r30, r24
	while(ovfRemaining != 0){
    350e:	93 85       	ldd	r25, Z+11	; 0x0b
    3510:	91 11       	cpse	r25, r1
    3512:	fd cf       	rjmp	.-6      	; 0x350e <_ZN13HardwareTimer13waitForFinishEv+0x2>
	}
}
    3514:	08 95       	ret

00003516 <_ZN13HardwareTimer14isr_timer_compEv>:

void HardwareTimer::isr_timer_comp(){
    3516:	fc 01       	movw	r30, r24
	if(ovfRemaining > 0) ovfRemaining--;
    3518:	83 85       	ldd	r24, Z+11	; 0x0b
    351a:	88 23       	and	r24, r24
    351c:	19 f0       	breq	.+6      	; 0x3524 <_ZN13HardwareTimer14isr_timer_compEv+0xe>
    351e:	83 85       	ldd	r24, Z+11	; 0x0b
    3520:	81 50       	subi	r24, 0x01	; 1
    3522:	83 87       	std	Z+11, r24	; 0x0b
    3524:	08 95       	ret

00003526 <__vector_21>:
}

#ifdef USE_TIMER_0
HardwareTimer Timer0(TCCR0A, TCCR0B, TIMSK0, TCNT0, OCR0A);

ISR(TIMER0_COMPA_vect){
    3526:	1f 92       	push	r1
    3528:	0f 92       	push	r0
    352a:	0f b6       	in	r0, 0x3f	; 63
    352c:	0f 92       	push	r0
    352e:	11 24       	eor	r1, r1
    3530:	0b b6       	in	r0, 0x3b	; 59
    3532:	0f 92       	push	r0
    3534:	2f 93       	push	r18
    3536:	3f 93       	push	r19
    3538:	4f 93       	push	r20
    353a:	5f 93       	push	r21
    353c:	6f 93       	push	r22
    353e:	7f 93       	push	r23
    3540:	8f 93       	push	r24
    3542:	9f 93       	push	r25
    3544:	af 93       	push	r26
    3546:	bf 93       	push	r27
    3548:	ef 93       	push	r30
    354a:	ff 93       	push	r31
	Timer0.isr_timer_comp();
    354c:	8c e1       	ldi	r24, 0x1C	; 28
    354e:	97 e0       	ldi	r25, 0x07	; 7
    3550:	e2 df       	rcall	.-60     	; 0x3516 <_ZN13HardwareTimer14isr_timer_compEv>
}
    3552:	ff 91       	pop	r31
    3554:	ef 91       	pop	r30
    3556:	bf 91       	pop	r27
    3558:	af 91       	pop	r26
    355a:	9f 91       	pop	r25
    355c:	8f 91       	pop	r24
    355e:	7f 91       	pop	r23
    3560:	6f 91       	pop	r22
    3562:	5f 91       	pop	r21
    3564:	4f 91       	pop	r20
    3566:	3f 91       	pop	r19
    3568:	2f 91       	pop	r18
    356a:	0f 90       	pop	r0
    356c:	0b be       	out	0x3b, r0	; 59
    356e:	0f 90       	pop	r0
    3570:	0f be       	out	0x3f, r0	; 63
    3572:	0f 90       	pop	r0
    3574:	1f 90       	pop	r1
    3576:	18 95       	reti

00003578 <__vector_13>:
#endif

#ifdef USE_TIMER_2
HardwareTimer Timer2(TCCR2A, TCCR2B, TIMSK2, TCNT2, OCR2A);

ISR(TIMER2_COMPA_vect){
    3578:	1f 92       	push	r1
    357a:	0f 92       	push	r0
    357c:	0f b6       	in	r0, 0x3f	; 63
    357e:	0f 92       	push	r0
    3580:	11 24       	eor	r1, r1
    3582:	0b b6       	in	r0, 0x3b	; 59
    3584:	0f 92       	push	r0
    3586:	2f 93       	push	r18
    3588:	3f 93       	push	r19
    358a:	4f 93       	push	r20
    358c:	5f 93       	push	r21
    358e:	6f 93       	push	r22
    3590:	7f 93       	push	r23
    3592:	8f 93       	push	r24
    3594:	9f 93       	push	r25
    3596:	af 93       	push	r26
    3598:	bf 93       	push	r27
    359a:	ef 93       	push	r30
    359c:	ff 93       	push	r31
	Timer2.isr_timer_comp();
    359e:	80 e1       	ldi	r24, 0x10	; 16
    35a0:	97 e0       	ldi	r25, 0x07	; 7
    35a2:	b9 df       	rcall	.-142    	; 0x3516 <_ZN13HardwareTimer14isr_timer_compEv>
}
    35a4:	ff 91       	pop	r31
    35a6:	ef 91       	pop	r30
    35a8:	bf 91       	pop	r27
    35aa:	af 91       	pop	r26
    35ac:	9f 91       	pop	r25
    35ae:	8f 91       	pop	r24
    35b0:	7f 91       	pop	r23
    35b2:	6f 91       	pop	r22
    35b4:	5f 91       	pop	r21
    35b6:	4f 91       	pop	r20
    35b8:	3f 91       	pop	r19
    35ba:	2f 91       	pop	r18
    35bc:	0f 90       	pop	r0
    35be:	0b be       	out	0x3b, r0	; 59
    35c0:	0f 90       	pop	r0
    35c2:	0f be       	out	0x3f, r0	; 63
    35c4:	0f 90       	pop	r0
    35c6:	1f 90       	pop	r1
    35c8:	18 95       	reti

000035ca <_GLOBAL__sub_I__ZN13HardwareTimerC2ERVhS1_S1_S1_S1_>:
#define CLK_DIV_64 (_BV(CS01) | _BV(CS00))
#define CLK_DIV_256 (_BV(CS02))
#define CLK_DIV_1024 (_BV(CS02) | _BV(CS00))

HardwareTimer::HardwareTimer(Register &tccrA, Register &tccrB, Register &timsk, Register &tcnt, Register &ocra)
: _tccrA(&tccrA), _tccrB(&tccrB), _timsk(&timsk), _tcnt(&tcnt), _ocra(&ocra)
    35ca:	ec e1       	ldi	r30, 0x1C	; 28
    35cc:	f7 e0       	ldi	r31, 0x07	; 7
    35ce:	84 e4       	ldi	r24, 0x44	; 68
    35d0:	90 e0       	ldi	r25, 0x00	; 0
    35d2:	91 83       	std	Z+1, r25	; 0x01
    35d4:	80 83       	st	Z, r24
    35d6:	85 e4       	ldi	r24, 0x45	; 69
    35d8:	90 e0       	ldi	r25, 0x00	; 0
    35da:	93 83       	std	Z+3, r25	; 0x03
    35dc:	82 83       	std	Z+2, r24	; 0x02
    35de:	8e e6       	ldi	r24, 0x6E	; 110
    35e0:	90 e0       	ldi	r25, 0x00	; 0
    35e2:	95 83       	std	Z+5, r25	; 0x05
    35e4:	84 83       	std	Z+4, r24	; 0x04
    35e6:	86 e4       	ldi	r24, 0x46	; 70
    35e8:	90 e0       	ldi	r25, 0x00	; 0
    35ea:	97 83       	std	Z+7, r25	; 0x07
    35ec:	86 83       	std	Z+6, r24	; 0x06
    35ee:	87 e4       	ldi	r24, 0x47	; 71
    35f0:	90 e0       	ldi	r25, 0x00	; 0
    35f2:	91 87       	std	Z+9, r25	; 0x09
    35f4:	80 87       	std	Z+8, r24	; 0x08
    35f6:	e0 e1       	ldi	r30, 0x10	; 16
    35f8:	f7 e0       	ldi	r31, 0x07	; 7
    35fa:	80 eb       	ldi	r24, 0xB0	; 176
    35fc:	90 e0       	ldi	r25, 0x00	; 0
    35fe:	91 83       	std	Z+1, r25	; 0x01
    3600:	80 83       	st	Z, r24
    3602:	81 eb       	ldi	r24, 0xB1	; 177
    3604:	90 e0       	ldi	r25, 0x00	; 0
    3606:	93 83       	std	Z+3, r25	; 0x03
    3608:	82 83       	std	Z+2, r24	; 0x02
    360a:	80 e7       	ldi	r24, 0x70	; 112
    360c:	90 e0       	ldi	r25, 0x00	; 0
    360e:	95 83       	std	Z+5, r25	; 0x05
    3610:	84 83       	std	Z+4, r24	; 0x04
    3612:	82 eb       	ldi	r24, 0xB2	; 178
    3614:	90 e0       	ldi	r25, 0x00	; 0
    3616:	97 83       	std	Z+7, r25	; 0x07
    3618:	86 83       	std	Z+6, r24	; 0x06
    361a:	83 eb       	ldi	r24, 0xB3	; 179
    361c:	90 e0       	ldi	r25, 0x00	; 0
    361e:	91 87       	std	Z+9, r25	; 0x09
    3620:	80 87       	std	Z+8, r24	; 0x08
    3622:	08 95       	ret

00003624 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3624:	10 92 95 07 	sts	0x0795, r1	; 0x800795 <twi_state>
    3628:	81 e0       	ldi	r24, 0x01	; 1
    362a:	80 93 93 07 	sts	0x0793, r24	; 0x800793 <twi_sendStop>
    362e:	10 92 92 07 	sts	0x0792, r1	; 0x800792 <twi_inRepStart>
    3632:	8b b1       	in	r24, 0x0b	; 11
    3634:	83 60       	ori	r24, 0x03	; 3
    3636:	8b b9       	out	0x0b, r24	; 11
    3638:	e9 eb       	ldi	r30, 0xB9	; 185
    363a:	f0 e0       	ldi	r31, 0x00	; 0
    363c:	80 81       	ld	r24, Z
    363e:	8e 7f       	andi	r24, 0xFE	; 254
    3640:	80 83       	st	Z, r24
    3642:	80 81       	ld	r24, Z
    3644:	8d 7f       	andi	r24, 0xFD	; 253
    3646:	80 83       	st	Z, r24
    3648:	88 e4       	ldi	r24, 0x48	; 72
    364a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    364e:	85 e4       	ldi	r24, 0x45	; 69
    3650:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3654:	08 95       	ret

00003656 <twi_readFrom>:
    3656:	41 32       	cpi	r20, 0x21	; 33
    3658:	08 f0       	brcs	.+2      	; 0x365c <twi_readFrom+0x6>
    365a:	4c c0       	rjmp	.+152    	; 0x36f4 <twi_readFrom+0x9e>
    365c:	90 91 95 07 	lds	r25, 0x0795	; 0x800795 <twi_state>
    3660:	91 11       	cpse	r25, r1
    3662:	fc cf       	rjmp	.-8      	; 0x365c <twi_readFrom+0x6>
    3664:	31 e0       	ldi	r19, 0x01	; 1
    3666:	30 93 95 07 	sts	0x0795, r19	; 0x800795 <twi_state>
    366a:	20 93 93 07 	sts	0x0793, r18	; 0x800793 <twi_sendStop>
    366e:	2f ef       	ldi	r18, 0xFF	; 255
    3670:	20 93 28 07 	sts	0x0728, r18	; 0x800728 <twi_error>
    3674:	10 92 6d 07 	sts	0x076D, r1	; 0x80076d <twi_masterBufferIndex>
    3678:	24 0f       	add	r18, r20
    367a:	20 93 6c 07 	sts	0x076C, r18	; 0x80076c <twi_masterBufferLength>
    367e:	30 93 94 07 	sts	0x0794, r19	; 0x800794 <twi_slarw>
    3682:	20 91 94 07 	lds	r18, 0x0794	; 0x800794 <twi_slarw>
    3686:	88 0f       	add	r24, r24
    3688:	82 2b       	or	r24, r18
    368a:	80 93 94 07 	sts	0x0794, r24	; 0x800794 <twi_slarw>
    368e:	80 91 92 07 	lds	r24, 0x0792	; 0x800792 <twi_inRepStart>
    3692:	81 30       	cpi	r24, 0x01	; 1
    3694:	81 f4       	brne	.+32     	; 0x36b6 <twi_readFrom+0x60>
    3696:	10 92 92 07 	sts	0x0792, r1	; 0x800792 <twi_inRepStart>
    369a:	ab eb       	ldi	r26, 0xBB	; 187
    369c:	b0 e0       	ldi	r27, 0x00	; 0
    369e:	ec eb       	ldi	r30, 0xBC	; 188
    36a0:	f0 e0       	ldi	r31, 0x00	; 0
    36a2:	80 91 94 07 	lds	r24, 0x0794	; 0x800794 <twi_slarw>
    36a6:	8c 93       	st	X, r24
    36a8:	80 81       	ld	r24, Z
    36aa:	83 fd       	sbrc	r24, 3
    36ac:	fa cf       	rjmp	.-12     	; 0x36a2 <twi_readFrom+0x4c>
    36ae:	85 ec       	ldi	r24, 0xC5	; 197
    36b0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    36b4:	03 c0       	rjmp	.+6      	; 0x36bc <twi_readFrom+0x66>
    36b6:	85 ee       	ldi	r24, 0xE5	; 229
    36b8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    36bc:	80 91 95 07 	lds	r24, 0x0795	; 0x800795 <twi_state>
    36c0:	81 30       	cpi	r24, 0x01	; 1
    36c2:	e1 f3       	breq	.-8      	; 0x36bc <twi_readFrom+0x66>
    36c4:	80 91 6d 07 	lds	r24, 0x076D	; 0x80076d <twi_masterBufferIndex>
    36c8:	84 17       	cp	r24, r20
    36ca:	10 f4       	brcc	.+4      	; 0x36d0 <twi_readFrom+0x7a>
    36cc:	40 91 6d 07 	lds	r20, 0x076D	; 0x80076d <twi_masterBufferIndex>
    36d0:	44 23       	and	r20, r20
    36d2:	89 f0       	breq	.+34     	; 0x36f6 <twi_readFrom+0xa0>
    36d4:	ee e6       	ldi	r30, 0x6E	; 110
    36d6:	f7 e0       	ldi	r31, 0x07	; 7
    36d8:	a6 2f       	mov	r26, r22
    36da:	b7 2f       	mov	r27, r23
    36dc:	2f ef       	ldi	r18, 0xFF	; 255
    36de:	24 0f       	add	r18, r20
    36e0:	30 e0       	ldi	r19, 0x00	; 0
    36e2:	21 59       	subi	r18, 0x91	; 145
    36e4:	38 4f       	sbci	r19, 0xF8	; 248
    36e6:	81 91       	ld	r24, Z+
    36e8:	8d 93       	st	X+, r24
    36ea:	e2 17       	cp	r30, r18
    36ec:	f3 07       	cpc	r31, r19
    36ee:	d9 f7       	brne	.-10     	; 0x36e6 <twi_readFrom+0x90>
    36f0:	94 2f       	mov	r25, r20
    36f2:	01 c0       	rjmp	.+2      	; 0x36f6 <twi_readFrom+0xa0>
    36f4:	90 e0       	ldi	r25, 0x00	; 0
    36f6:	89 2f       	mov	r24, r25
    36f8:	08 95       	ret

000036fa <twi_writeTo>:
    36fa:	0f 93       	push	r16
    36fc:	41 32       	cpi	r20, 0x21	; 33
    36fe:	08 f0       	brcs	.+2      	; 0x3702 <twi_writeTo+0x8>
    3700:	57 c0       	rjmp	.+174    	; 0x37b0 <twi_writeTo+0xb6>
    3702:	30 91 95 07 	lds	r19, 0x0795	; 0x800795 <twi_state>
    3706:	31 11       	cpse	r19, r1
    3708:	fc cf       	rjmp	.-8      	; 0x3702 <twi_writeTo+0x8>
    370a:	92 e0       	ldi	r25, 0x02	; 2
    370c:	90 93 95 07 	sts	0x0795, r25	; 0x800795 <twi_state>
    3710:	00 93 93 07 	sts	0x0793, r16	; 0x800793 <twi_sendStop>
    3714:	9f ef       	ldi	r25, 0xFF	; 255
    3716:	90 93 28 07 	sts	0x0728, r25	; 0x800728 <twi_error>
    371a:	10 92 6d 07 	sts	0x076D, r1	; 0x80076d <twi_masterBufferIndex>
    371e:	40 93 6c 07 	sts	0x076C, r20	; 0x80076c <twi_masterBufferLength>
    3722:	44 23       	and	r20, r20
    3724:	71 f0       	breq	.+28     	; 0x3742 <twi_writeTo+0x48>
    3726:	fb 01       	movw	r30, r22
    3728:	ae e6       	ldi	r26, 0x6E	; 110
    372a:	b7 e0       	ldi	r27, 0x07	; 7
    372c:	41 50       	subi	r20, 0x01	; 1
    372e:	50 e0       	ldi	r21, 0x00	; 0
    3730:	4f 5f       	subi	r20, 0xFF	; 255
    3732:	5f 4f       	sbci	r21, 0xFF	; 255
    3734:	64 0f       	add	r22, r20
    3736:	75 1f       	adc	r23, r21
    3738:	91 91       	ld	r25, Z+
    373a:	9d 93       	st	X+, r25
    373c:	e6 17       	cp	r30, r22
    373e:	f7 07       	cpc	r31, r23
    3740:	d9 f7       	brne	.-10     	; 0x3738 <twi_writeTo+0x3e>
    3742:	10 92 94 07 	sts	0x0794, r1	; 0x800794 <twi_slarw>
    3746:	90 91 94 07 	lds	r25, 0x0794	; 0x800794 <twi_slarw>
    374a:	88 0f       	add	r24, r24
    374c:	89 2b       	or	r24, r25
    374e:	80 93 94 07 	sts	0x0794, r24	; 0x800794 <twi_slarw>
    3752:	80 91 92 07 	lds	r24, 0x0792	; 0x800792 <twi_inRepStart>
    3756:	81 30       	cpi	r24, 0x01	; 1
    3758:	81 f4       	brne	.+32     	; 0x377a <twi_writeTo+0x80>
    375a:	10 92 92 07 	sts	0x0792, r1	; 0x800792 <twi_inRepStart>
    375e:	ab eb       	ldi	r26, 0xBB	; 187
    3760:	b0 e0       	ldi	r27, 0x00	; 0
    3762:	ec eb       	ldi	r30, 0xBC	; 188
    3764:	f0 e0       	ldi	r31, 0x00	; 0
    3766:	80 91 94 07 	lds	r24, 0x0794	; 0x800794 <twi_slarw>
    376a:	8c 93       	st	X, r24
    376c:	80 81       	ld	r24, Z
    376e:	83 fd       	sbrc	r24, 3
    3770:	fa cf       	rjmp	.-12     	; 0x3766 <twi_writeTo+0x6c>
    3772:	85 ec       	ldi	r24, 0xC5	; 197
    3774:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3778:	03 c0       	rjmp	.+6      	; 0x3780 <twi_writeTo+0x86>
    377a:	85 ee       	ldi	r24, 0xE5	; 229
    377c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3780:	22 23       	and	r18, r18
    3782:	41 f0       	breq	.+16     	; 0x3794 <twi_writeTo+0x9a>
    3784:	80 91 95 07 	lds	r24, 0x0795	; 0x800795 <twi_state>
    3788:	82 30       	cpi	r24, 0x02	; 2
    378a:	21 f4       	brne	.+8      	; 0x3794 <twi_writeTo+0x9a>
    378c:	80 91 95 07 	lds	r24, 0x0795	; 0x800795 <twi_state>
    3790:	82 30       	cpi	r24, 0x02	; 2
    3792:	e1 f3       	breq	.-8      	; 0x378c <twi_writeTo+0x92>
    3794:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <twi_error>
    3798:	8f 3f       	cpi	r24, 0xFF	; 255
    379a:	79 f0       	breq	.+30     	; 0x37ba <twi_writeTo+0xc0>
    379c:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <twi_error>
    37a0:	80 32       	cpi	r24, 0x20	; 32
    37a2:	41 f0       	breq	.+16     	; 0x37b4 <twi_writeTo+0xba>
    37a4:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <twi_error>
    37a8:	80 33       	cpi	r24, 0x30	; 48
    37aa:	31 f0       	breq	.+12     	; 0x37b8 <twi_writeTo+0xbe>
    37ac:	34 e0       	ldi	r19, 0x04	; 4
    37ae:	05 c0       	rjmp	.+10     	; 0x37ba <twi_writeTo+0xc0>
    37b0:	31 e0       	ldi	r19, 0x01	; 1
    37b2:	03 c0       	rjmp	.+6      	; 0x37ba <twi_writeTo+0xc0>
    37b4:	32 e0       	ldi	r19, 0x02	; 2
    37b6:	01 c0       	rjmp	.+2      	; 0x37ba <twi_writeTo+0xc0>
    37b8:	33 e0       	ldi	r19, 0x03	; 3
    37ba:	83 2f       	mov	r24, r19
    37bc:	0f 91       	pop	r16
    37be:	08 95       	ret

000037c0 <twi_transmit>:
    37c0:	40 91 4a 07 	lds	r20, 0x074A	; 0x80074a <twi_txBufferLength>
    37c4:	26 2f       	mov	r18, r22
    37c6:	30 e0       	ldi	r19, 0x00	; 0
    37c8:	24 0f       	add	r18, r20
    37ca:	31 1d       	adc	r19, r1
    37cc:	21 32       	cpi	r18, 0x21	; 33
    37ce:	31 05       	cpc	r19, r1
    37d0:	ec f4       	brge	.+58     	; 0x380c <twi_transmit+0x4c>
    37d2:	20 91 95 07 	lds	r18, 0x0795	; 0x800795 <twi_state>
    37d6:	24 30       	cpi	r18, 0x04	; 4
    37d8:	d9 f4       	brne	.+54     	; 0x3810 <twi_transmit+0x50>
    37da:	66 23       	and	r22, r22
    37dc:	81 f0       	breq	.+32     	; 0x37fe <twi_transmit+0x3e>
    37de:	a8 2f       	mov	r26, r24
    37e0:	b9 2f       	mov	r27, r25
    37e2:	80 e0       	ldi	r24, 0x00	; 0
    37e4:	90 e0       	ldi	r25, 0x00	; 0
    37e6:	30 91 4a 07 	lds	r19, 0x074A	; 0x80074a <twi_txBufferLength>
    37ea:	2d 91       	ld	r18, X+
    37ec:	fc 01       	movw	r30, r24
    37ee:	e4 5b       	subi	r30, 0xB4	; 180
    37f0:	f8 4f       	sbci	r31, 0xF8	; 248
    37f2:	e3 0f       	add	r30, r19
    37f4:	f1 1d       	adc	r31, r1
    37f6:	20 83       	st	Z, r18
    37f8:	01 96       	adiw	r24, 0x01	; 1
    37fa:	86 17       	cp	r24, r22
    37fc:	a0 f3       	brcs	.-24     	; 0x37e6 <twi_transmit+0x26>
    37fe:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <twi_txBufferLength>
    3802:	68 0f       	add	r22, r24
    3804:	60 93 4a 07 	sts	0x074A, r22	; 0x80074a <twi_txBufferLength>
    3808:	80 e0       	ldi	r24, 0x00	; 0
    380a:	08 95       	ret
    380c:	81 e0       	ldi	r24, 0x01	; 1
    380e:	08 95       	ret
    3810:	82 e0       	ldi	r24, 0x02	; 2
    3812:	08 95       	ret

00003814 <twi_attachSlaveRxEvent>:
    3814:	90 93 8f 07 	sts	0x078F, r25	; 0x80078f <twi_onSlaveReceive+0x1>
    3818:	80 93 8e 07 	sts	0x078E, r24	; 0x80078e <twi_onSlaveReceive>
    381c:	08 95       	ret

0000381e <twi_attachSlaveTxEvent>:
    381e:	90 93 91 07 	sts	0x0791, r25	; 0x800791 <twi_onSlaveTransmit+0x1>
    3822:	80 93 90 07 	sts	0x0790, r24	; 0x800790 <twi_onSlaveTransmit>
    3826:	08 95       	ret

00003828 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    3828:	85 ed       	ldi	r24, 0xD5	; 213
    382a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    382e:	ec eb       	ldi	r30, 0xBC	; 188
    3830:	f0 e0       	ldi	r31, 0x00	; 0
    3832:	80 81       	ld	r24, Z
    3834:	84 fd       	sbrc	r24, 4
    3836:	fd cf       	rjmp	.-6      	; 0x3832 <twi_stop+0xa>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    3838:	10 92 95 07 	sts	0x0795, r1	; 0x800795 <twi_state>
    383c:	08 95       	ret

0000383e <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    383e:	85 ec       	ldi	r24, 0xC5	; 197
    3840:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // update twi state
  twi_state = TWI_READY;
    3844:	10 92 95 07 	sts	0x0795, r1	; 0x800795 <twi_state>
    3848:	08 95       	ret

0000384a <__vector_39>:
}

ISR(TWI_vect)
{
    384a:	1f 92       	push	r1
    384c:	0f 92       	push	r0
    384e:	0f b6       	in	r0, 0x3f	; 63
    3850:	0f 92       	push	r0
    3852:	11 24       	eor	r1, r1
    3854:	0b b6       	in	r0, 0x3b	; 59
    3856:	0f 92       	push	r0
    3858:	2f 93       	push	r18
    385a:	3f 93       	push	r19
    385c:	4f 93       	push	r20
    385e:	5f 93       	push	r21
    3860:	6f 93       	push	r22
    3862:	7f 93       	push	r23
    3864:	8f 93       	push	r24
    3866:	9f 93       	push	r25
    3868:	af 93       	push	r26
    386a:	bf 93       	push	r27
    386c:	ef 93       	push	r30
    386e:	ff 93       	push	r31
  switch(TW_STATUS){
    3870:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    3874:	88 7f       	andi	r24, 0xF8	; 248
    3876:	90 e0       	ldi	r25, 0x00	; 0
    3878:	89 3c       	cpi	r24, 0xC9	; 201
    387a:	91 05       	cpc	r25, r1
    387c:	08 f0       	brcs	.+2      	; 0x3880 <__vector_39+0x36>
    387e:	ef c0       	rjmp	.+478    	; 0x3a5e <__vector_39+0x214>
    3880:	fc 01       	movw	r30, r24
    3882:	88 27       	eor	r24, r24
    3884:	ee 58       	subi	r30, 0x8E	; 142
    3886:	ff 4f       	sbci	r31, 0xFF	; 255
    3888:	8f 4f       	sbci	r24, 0xFF	; 255
    388a:	0c 94 52 25 	jmp	0x4aa4	; 0x4aa4 <__tablejump2__>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    388e:	80 91 94 07 	lds	r24, 0x0794	; 0x800794 <twi_slarw>
    3892:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3896:	85 ec       	ldi	r24, 0xC5	; 197
    3898:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    389c:	e0 c0       	rjmp	.+448    	; 0x3a5e <__vector_39+0x214>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    389e:	90 91 6d 07 	lds	r25, 0x076D	; 0x80076d <twi_masterBufferIndex>
    38a2:	80 91 6c 07 	lds	r24, 0x076C	; 0x80076c <twi_masterBufferLength>
    38a6:	98 17       	cp	r25, r24
    38a8:	80 f4       	brcc	.+32     	; 0x38ca <__vector_39+0x80>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    38aa:	e0 91 6d 07 	lds	r30, 0x076D	; 0x80076d <twi_masterBufferIndex>
    38ae:	81 e0       	ldi	r24, 0x01	; 1
    38b0:	8e 0f       	add	r24, r30
    38b2:	80 93 6d 07 	sts	0x076D, r24	; 0x80076d <twi_masterBufferIndex>
    38b6:	f0 e0       	ldi	r31, 0x00	; 0
    38b8:	e2 59       	subi	r30, 0x92	; 146
    38ba:	f8 4f       	sbci	r31, 0xF8	; 248
    38bc:	80 81       	ld	r24, Z
    38be:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    38c2:	85 ec       	ldi	r24, 0xC5	; 197
    38c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    38c8:	ca c0       	rjmp	.+404    	; 0x3a5e <__vector_39+0x214>
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
        twi_reply(1);
      }else{
	if (twi_sendStop)
    38ca:	80 91 93 07 	lds	r24, 0x0793	; 0x800793 <twi_sendStop>
    38ce:	88 23       	and	r24, r24
    38d0:	11 f0       	breq	.+4      	; 0x38d6 <__vector_39+0x8c>
          twi_stop();
    38d2:	aa df       	rcall	.-172    	; 0x3828 <twi_stop>
    38d4:	c4 c0       	rjmp	.+392    	; 0x3a5e <__vector_39+0x214>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    38d6:	81 e0       	ldi	r24, 0x01	; 1
    38d8:	80 93 92 07 	sts	0x0792, r24	; 0x800792 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    38dc:	84 ea       	ldi	r24, 0xA4	; 164
    38de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	  twi_state = TWI_READY;
    38e2:	10 92 95 07 	sts	0x0795, r1	; 0x800795 <twi_state>
    38e6:	bb c0       	rjmp	.+374    	; 0x3a5e <__vector_39+0x214>
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    38e8:	80 e2       	ldi	r24, 0x20	; 32
    38ea:	80 93 28 07 	sts	0x0728, r24	; 0x800728 <twi_error>
      twi_stop();
    38ee:	9c df       	rcall	.-200    	; 0x3828 <twi_stop>
      break;
    38f0:	b6 c0       	rjmp	.+364    	; 0x3a5e <__vector_39+0x214>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    38f2:	80 e3       	ldi	r24, 0x30	; 48
    38f4:	80 93 28 07 	sts	0x0728, r24	; 0x800728 <twi_error>
      twi_stop();
    38f8:	97 df       	rcall	.-210    	; 0x3828 <twi_stop>
      break;
    38fa:	b1 c0       	rjmp	.+354    	; 0x3a5e <__vector_39+0x214>
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    38fc:	88 e3       	ldi	r24, 0x38	; 56
    38fe:	80 93 28 07 	sts	0x0728, r24	; 0x800728 <twi_error>
      twi_releaseBus();
    3902:	9d df       	rcall	.-198    	; 0x383e <twi_releaseBus>
      break;
    3904:	ac c0       	rjmp	.+344    	; 0x3a5e <__vector_39+0x214>

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    3906:	e0 91 6d 07 	lds	r30, 0x076D	; 0x80076d <twi_masterBufferIndex>
    390a:	81 e0       	ldi	r24, 0x01	; 1
    390c:	8e 0f       	add	r24, r30
    390e:	80 93 6d 07 	sts	0x076D, r24	; 0x80076d <twi_masterBufferIndex>
    3912:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    3916:	f0 e0       	ldi	r31, 0x00	; 0
    3918:	e2 59       	subi	r30, 0x92	; 146
    391a:	f8 4f       	sbci	r31, 0xF8	; 248
    391c:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    391e:	90 91 6d 07 	lds	r25, 0x076D	; 0x80076d <twi_masterBufferIndex>
    3922:	80 91 6c 07 	lds	r24, 0x076C	; 0x80076c <twi_masterBufferLength>
    3926:	98 17       	cp	r25, r24
    3928:	20 f4       	brcc	.+8      	; 0x3932 <__vector_39+0xe8>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    392a:	85 ec       	ldi	r24, 0xC5	; 197
    392c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3930:	96 c0       	rjmp	.+300    	; 0x3a5e <__vector_39+0x214>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3932:	85 e8       	ldi	r24, 0x85	; 133
    3934:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3938:	92 c0       	rjmp	.+292    	; 0x3a5e <__vector_39+0x214>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    393a:	e0 91 6d 07 	lds	r30, 0x076D	; 0x80076d <twi_masterBufferIndex>
    393e:	81 e0       	ldi	r24, 0x01	; 1
    3940:	8e 0f       	add	r24, r30
    3942:	80 93 6d 07 	sts	0x076D, r24	; 0x80076d <twi_masterBufferIndex>
    3946:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    394a:	f0 e0       	ldi	r31, 0x00	; 0
    394c:	e2 59       	subi	r30, 0x92	; 146
    394e:	f8 4f       	sbci	r31, 0xF8	; 248
    3950:	80 83       	st	Z, r24
	if (twi_sendStop)
    3952:	80 91 93 07 	lds	r24, 0x0793	; 0x800793 <twi_sendStop>
    3956:	88 23       	and	r24, r24
          twi_stop();
    3958:	11 f0       	breq	.+4      	; 0x395e <__vector_39+0x114>
    395a:	66 df       	rcall	.-308    	; 0x3828 <twi_stop>
    395c:	80 c0       	rjmp	.+256    	; 0x3a5e <__vector_39+0x214>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    395e:	81 e0       	ldi	r24, 0x01	; 1
    3960:	80 93 92 07 	sts	0x0792, r24	; 0x800792 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    3964:	84 ea       	ldi	r24, 0xA4	; 164
    3966:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	  twi_state = TWI_READY;
    396a:	10 92 95 07 	sts	0x0795, r1	; 0x800795 <twi_state>
	}    
	break;
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
    396e:	77 c0       	rjmp	.+238    	; 0x3a5e <__vector_39+0x214>
    3970:	5b df       	rcall	.-330    	; 0x3828 <twi_stop>
      break;
    3972:	75 c0       	rjmp	.+234    	; 0x3a5e <__vector_39+0x214>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    3974:	83 e0       	ldi	r24, 0x03	; 3
    3976:	80 93 95 07 	sts	0x0795, r24	; 0x800795 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    397a:	10 92 29 07 	sts	0x0729, r1	; 0x800729 <twi_rxBufferIndex>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    397e:	85 ec       	ldi	r24, 0xC5	; 197
    3980:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3984:	6c c0       	rjmp	.+216    	; 0x3a5e <__vector_39+0x214>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    3986:	80 91 29 07 	lds	r24, 0x0729	; 0x800729 <twi_rxBufferIndex>
    398a:	80 32       	cpi	r24, 0x20	; 32
    398c:	80 f4       	brcc	.+32     	; 0x39ae <__vector_39+0x164>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    398e:	e0 91 29 07 	lds	r30, 0x0729	; 0x800729 <twi_rxBufferIndex>
    3992:	81 e0       	ldi	r24, 0x01	; 1
    3994:	8e 0f       	add	r24, r30
    3996:	80 93 29 07 	sts	0x0729, r24	; 0x800729 <twi_rxBufferIndex>
    399a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    399e:	f0 e0       	ldi	r31, 0x00	; 0
    39a0:	e6 5d       	subi	r30, 0xD6	; 214
    39a2:	f8 4f       	sbci	r31, 0xF8	; 248
    39a4:	80 83       	st	Z, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    39a6:	85 ec       	ldi	r24, 0xC5	; 197
    39a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    39ac:	58 c0       	rjmp	.+176    	; 0x3a5e <__vector_39+0x214>
    39ae:	85 e8       	ldi	r24, 0x85	; 133
    39b0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    39b4:	54 c0       	rjmp	.+168    	; 0x3a5e <__vector_39+0x214>
    39b6:	43 df       	rcall	.-378    	; 0x383e <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    39b8:	80 91 29 07 	lds	r24, 0x0729	; 0x800729 <twi_rxBufferIndex>
    39bc:	80 32       	cpi	r24, 0x20	; 32
    39be:	30 f4       	brcc	.+12     	; 0x39cc <__vector_39+0x182>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    39c0:	e0 91 29 07 	lds	r30, 0x0729	; 0x800729 <twi_rxBufferIndex>
    39c4:	f0 e0       	ldi	r31, 0x00	; 0
    39c6:	e6 5d       	subi	r30, 0xD6	; 214
    39c8:	f8 4f       	sbci	r31, 0xF8	; 248
    39ca:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    39cc:	60 91 29 07 	lds	r22, 0x0729	; 0x800729 <twi_rxBufferIndex>
    39d0:	70 e0       	ldi	r23, 0x00	; 0
    39d2:	e0 91 8e 07 	lds	r30, 0x078E	; 0x80078e <twi_onSlaveReceive>
    39d6:	f0 91 8f 07 	lds	r31, 0x078F	; 0x80078f <twi_onSlaveReceive+0x1>
    39da:	8a e2       	ldi	r24, 0x2A	; 42
    39dc:	97 e0       	ldi	r25, 0x07	; 7
    39de:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    39e0:	10 92 29 07 	sts	0x0729, r1	; 0x800729 <twi_rxBufferIndex>
      break;
    39e4:	3c c0       	rjmp	.+120    	; 0x3a5e <__vector_39+0x214>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    39e6:	85 e8       	ldi	r24, 0x85	; 133
    39e8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    39ec:	38 c0       	rjmp	.+112    	; 0x3a5e <__vector_39+0x214>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    39ee:	84 e0       	ldi	r24, 0x04	; 4
    39f0:	80 93 95 07 	sts	0x0795, r24	; 0x800795 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    39f4:	10 92 4b 07 	sts	0x074B, r1	; 0x80074b <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    39f8:	10 92 4a 07 	sts	0x074A, r1	; 0x80074a <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    39fc:	e0 91 90 07 	lds	r30, 0x0790	; 0x800790 <twi_onSlaveTransmit>
    3a00:	f0 91 91 07 	lds	r31, 0x0791	; 0x800791 <twi_onSlaveTransmit+0x1>
    3a04:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    3a06:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <twi_txBufferLength>
    3a0a:	81 11       	cpse	r24, r1
    3a0c:	05 c0       	rjmp	.+10     	; 0x3a18 <__vector_39+0x1ce>
        twi_txBufferLength = 1;
    3a0e:	81 e0       	ldi	r24, 0x01	; 1
    3a10:	80 93 4a 07 	sts	0x074A, r24	; 0x80074a <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    3a14:	10 92 4c 07 	sts	0x074C, r1	; 0x80074c <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    3a18:	e0 91 4b 07 	lds	r30, 0x074B	; 0x80074b <twi_txBufferIndex>
    3a1c:	81 e0       	ldi	r24, 0x01	; 1
    3a1e:	8e 0f       	add	r24, r30
    3a20:	80 93 4b 07 	sts	0x074B, r24	; 0x80074b <twi_txBufferIndex>
    3a24:	f0 e0       	ldi	r31, 0x00	; 0
    3a26:	e4 5b       	subi	r30, 0xB4	; 180
    3a28:	f8 4f       	sbci	r31, 0xF8	; 248
    3a2a:	80 81       	ld	r24, Z
    3a2c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    3a30:	90 91 4b 07 	lds	r25, 0x074B	; 0x80074b <twi_txBufferIndex>
    3a34:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <twi_txBufferLength>
    3a38:	98 17       	cp	r25, r24
    3a3a:	20 f4       	brcc	.+8      	; 0x3a44 <__vector_39+0x1fa>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3a3c:	85 ec       	ldi	r24, 0xC5	; 197
    3a3e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3a42:	0d c0       	rjmp	.+26     	; 0x3a5e <__vector_39+0x214>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3a44:	85 e8       	ldi	r24, 0x85	; 133
    3a46:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3a4a:	09 c0       	rjmp	.+18     	; 0x3a5e <__vector_39+0x214>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3a4c:	85 ec       	ldi	r24, 0xC5	; 197
    3a4e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    3a52:	10 92 95 07 	sts	0x0795, r1	; 0x800795 <twi_state>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    3a56:	03 c0       	rjmp	.+6      	; 0x3a5e <__vector_39+0x214>
    3a58:	10 92 28 07 	sts	0x0728, r1	; 0x800728 <twi_error>
      twi_stop();
    3a5c:	e5 de       	rcall	.-566    	; 0x3828 <twi_stop>
      break;
  }
    3a5e:	ff 91       	pop	r31
    3a60:	ef 91       	pop	r30
    3a62:	bf 91       	pop	r27
    3a64:	af 91       	pop	r26
    3a66:	9f 91       	pop	r25
    3a68:	8f 91       	pop	r24
    3a6a:	7f 91       	pop	r23
    3a6c:	6f 91       	pop	r22
    3a6e:	5f 91       	pop	r21
    3a70:	4f 91       	pop	r20
    3a72:	3f 91       	pop	r19
    3a74:	2f 91       	pop	r18
    3a76:	0f 90       	pop	r0
    3a78:	0b be       	out	0x3b, r0	; 59
    3a7a:	0f 90       	pop	r0
    3a7c:	0f be       	out	0x3f, r0	; 63
    3a7e:	0f 90       	pop	r0
    3a80:	1f 90       	pop	r1
    3a82:	18 95       	reti

00003a84 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
	user_onRequest = function;
    3a84:	80 91 c0 07 	lds	r24, 0x07C0	; 0x8007c0 <_ZN7TwoWire14rxBufferLengthE>
    3a88:	90 e0       	ldi	r25, 0x00	; 0
    3a8a:	20 91 c1 07 	lds	r18, 0x07C1	; 0x8007c1 <_ZN7TwoWire13rxBufferIndexE>
    3a8e:	82 1b       	sub	r24, r18
    3a90:	91 09       	sbc	r25, r1
    3a92:	08 95       	ret

00003a94 <_ZN7TwoWire4readEv>:
    3a94:	90 91 c1 07 	lds	r25, 0x07C1	; 0x8007c1 <_ZN7TwoWire13rxBufferIndexE>
    3a98:	80 91 c0 07 	lds	r24, 0x07C0	; 0x8007c0 <_ZN7TwoWire14rxBufferLengthE>
    3a9c:	98 17       	cp	r25, r24
    3a9e:	50 f4       	brcc	.+20     	; 0x3ab4 <_ZN7TwoWire4readEv+0x20>
    3aa0:	e9 2f       	mov	r30, r25
    3aa2:	f0 e0       	ldi	r31, 0x00	; 0
    3aa4:	ee 53       	subi	r30, 0x3E	; 62
    3aa6:	f8 4f       	sbci	r31, 0xF8	; 248
    3aa8:	20 81       	ld	r18, Z
    3aaa:	30 e0       	ldi	r19, 0x00	; 0
    3aac:	9f 5f       	subi	r25, 0xFF	; 255
    3aae:	90 93 c1 07 	sts	0x07C1, r25	; 0x8007c1 <_ZN7TwoWire13rxBufferIndexE>
    3ab2:	02 c0       	rjmp	.+4      	; 0x3ab8 <_ZN7TwoWire4readEv+0x24>
    3ab4:	2f ef       	ldi	r18, 0xFF	; 255
    3ab6:	3f ef       	ldi	r19, 0xFF	; 255
    3ab8:	c9 01       	movw	r24, r18
    3aba:	08 95       	ret

00003abc <_ZN7TwoWire4peekEv>:
    3abc:	e0 91 c1 07 	lds	r30, 0x07C1	; 0x8007c1 <_ZN7TwoWire13rxBufferIndexE>
    3ac0:	80 91 c0 07 	lds	r24, 0x07C0	; 0x8007c0 <_ZN7TwoWire14rxBufferLengthE>
    3ac4:	e8 17       	cp	r30, r24
    3ac6:	30 f4       	brcc	.+12     	; 0x3ad4 <_ZN7TwoWire4peekEv+0x18>
    3ac8:	f0 e0       	ldi	r31, 0x00	; 0
    3aca:	ee 53       	subi	r30, 0x3E	; 62
    3acc:	f8 4f       	sbci	r31, 0xF8	; 248
    3ace:	80 81       	ld	r24, Z
    3ad0:	90 e0       	ldi	r25, 0x00	; 0
    3ad2:	08 95       	ret
    3ad4:	8f ef       	ldi	r24, 0xFF	; 255
    3ad6:	9f ef       	ldi	r25, 0xFF	; 255
    3ad8:	08 95       	ret

00003ada <_ZN7TwoWire5flushEv>:
    3ada:	08 95       	ret

00003adc <_ZN7TwoWire16onReceiveServiceEPhi>:
    3adc:	cf 93       	push	r28
    3ade:	df 93       	push	r29
    3ae0:	ec 01       	movw	r28, r24
    3ae2:	e0 91 98 07 	lds	r30, 0x0798	; 0x800798 <_ZN7TwoWire14user_onReceiveE>
    3ae6:	f0 91 99 07 	lds	r31, 0x0799	; 0x800799 <_ZN7TwoWire14user_onReceiveE+0x1>
    3aea:	30 97       	sbiw	r30, 0x00	; 0
    3aec:	01 f1       	breq	.+64     	; 0x3b2e <_ZN7TwoWire16onReceiveServiceEPhi+0x52>
    3aee:	90 91 c1 07 	lds	r25, 0x07C1	; 0x8007c1 <_ZN7TwoWire13rxBufferIndexE>
    3af2:	80 91 c0 07 	lds	r24, 0x07C0	; 0x8007c0 <_ZN7TwoWire14rxBufferLengthE>
    3af6:	98 17       	cp	r25, r24
    3af8:	d0 f0       	brcs	.+52     	; 0x3b2e <_ZN7TwoWire16onReceiveServiceEPhi+0x52>
    3afa:	16 16       	cp	r1, r22
    3afc:	17 06       	cpc	r1, r23
    3afe:	8c f4       	brge	.+34     	; 0x3b22 <_ZN7TwoWire16onReceiveServiceEPhi+0x46>
    3b00:	20 e0       	ldi	r18, 0x00	; 0
    3b02:	30 e0       	ldi	r19, 0x00	; 0
    3b04:	90 e0       	ldi	r25, 0x00	; 0
    3b06:	de 01       	movw	r26, r28
    3b08:	a9 0f       	add	r26, r25
    3b0a:	b1 1d       	adc	r27, r1
    3b0c:	4c 91       	ld	r20, X
    3b0e:	d9 01       	movw	r26, r18
    3b10:	ae 53       	subi	r26, 0x3E	; 62
    3b12:	b8 4f       	sbci	r27, 0xF8	; 248
    3b14:	4c 93       	st	X, r20
    3b16:	9f 5f       	subi	r25, 0xFF	; 255
    3b18:	29 2f       	mov	r18, r25
    3b1a:	30 e0       	ldi	r19, 0x00	; 0
    3b1c:	26 17       	cp	r18, r22
    3b1e:	37 07       	cpc	r19, r23
    3b20:	94 f3       	brlt	.-28     	; 0x3b06 <_ZN7TwoWire16onReceiveServiceEPhi+0x2a>
    3b22:	cb 01       	movw	r24, r22
    3b24:	10 92 c1 07 	sts	0x07C1, r1	; 0x8007c1 <_ZN7TwoWire13rxBufferIndexE>
    3b28:	60 93 c0 07 	sts	0x07C0, r22	; 0x8007c0 <_ZN7TwoWire14rxBufferLengthE>
    3b2c:	19 95       	eicall
    3b2e:	df 91       	pop	r29
    3b30:	cf 91       	pop	r28
    3b32:	08 95       	ret

00003b34 <_ZN7TwoWire16onRequestServiceEv>:
    3b34:	e0 91 9a 07 	lds	r30, 0x079A	; 0x80079a <_ZN7TwoWire14user_onRequestE>
    3b38:	f0 91 9b 07 	lds	r31, 0x079B	; 0x80079b <_ZN7TwoWire14user_onRequestE+0x1>
    3b3c:	30 97       	sbiw	r30, 0x00	; 0
    3b3e:	29 f0       	breq	.+10     	; 0x3b4a <_ZN7TwoWire16onRequestServiceEv+0x16>
    3b40:	10 92 9e 07 	sts	0x079E, r1	; 0x80079e <_ZN7TwoWire13txBufferIndexE>
    3b44:	10 92 9d 07 	sts	0x079D, r1	; 0x80079d <_ZN7TwoWire14txBufferLengthE>
    3b48:	19 95       	eicall
    3b4a:	08 95       	ret

00003b4c <_ZN7TwoWire5writeEh>:
    3b4c:	cf 93       	push	r28
    3b4e:	df 93       	push	r29
    3b50:	1f 92       	push	r1
    3b52:	cd b7       	in	r28, 0x3d	; 61
    3b54:	de b7       	in	r29, 0x3e	; 62
    3b56:	69 83       	std	Y+1, r22	; 0x01
    3b58:	80 91 9c 07 	lds	r24, 0x079C	; 0x80079c <_ZN7TwoWire12transmittingE>
    3b5c:	88 23       	and	r24, r24
    3b5e:	99 f0       	breq	.+38     	; 0x3b86 <_ZN7TwoWire5writeEh+0x3a>
    3b60:	80 91 9d 07 	lds	r24, 0x079D	; 0x80079d <_ZN7TwoWire14txBufferLengthE>
    3b64:	80 32       	cpi	r24, 0x20	; 32
    3b66:	b0 f4       	brcc	.+44     	; 0x3b94 <_ZN7TwoWire5writeEh+0x48>
    3b68:	80 91 9e 07 	lds	r24, 0x079E	; 0x80079e <_ZN7TwoWire13txBufferIndexE>
    3b6c:	e8 2f       	mov	r30, r24
    3b6e:	f0 e0       	ldi	r31, 0x00	; 0
    3b70:	e1 56       	subi	r30, 0x61	; 97
    3b72:	f8 4f       	sbci	r31, 0xF8	; 248
    3b74:	60 83       	st	Z, r22
    3b76:	8f 5f       	subi	r24, 0xFF	; 255
    3b78:	80 93 9e 07 	sts	0x079E, r24	; 0x80079e <_ZN7TwoWire13txBufferIndexE>
    3b7c:	80 93 9d 07 	sts	0x079D, r24	; 0x80079d <_ZN7TwoWire14txBufferLengthE>
    3b80:	81 e0       	ldi	r24, 0x01	; 1
    3b82:	90 e0       	ldi	r25, 0x00	; 0
    3b84:	09 c0       	rjmp	.+18     	; 0x3b98 <_ZN7TwoWire5writeEh+0x4c>
    3b86:	61 e0       	ldi	r22, 0x01	; 1
    3b88:	ce 01       	movw	r24, r28
    3b8a:	01 96       	adiw	r24, 0x01	; 1
    3b8c:	19 de       	rcall	.-974    	; 0x37c0 <twi_transmit>
    3b8e:	81 e0       	ldi	r24, 0x01	; 1
    3b90:	90 e0       	ldi	r25, 0x00	; 0
    3b92:	02 c0       	rjmp	.+4      	; 0x3b98 <_ZN7TwoWire5writeEh+0x4c>
    3b94:	80 e0       	ldi	r24, 0x00	; 0
    3b96:	90 e0       	ldi	r25, 0x00	; 0
    3b98:	0f 90       	pop	r0
    3b9a:	df 91       	pop	r29
    3b9c:	cf 91       	pop	r28
    3b9e:	08 95       	ret

00003ba0 <_ZN7TwoWire5writeEPKhj>:
    3ba0:	cf 92       	push	r12
    3ba2:	df 92       	push	r13
    3ba4:	ef 92       	push	r14
    3ba6:	ff 92       	push	r15
    3ba8:	0f 93       	push	r16
    3baa:	1f 93       	push	r17
    3bac:	cf 93       	push	r28
    3bae:	df 93       	push	r29
    3bb0:	8c 01       	movw	r16, r24
    3bb2:	cb 01       	movw	r24, r22
    3bb4:	6a 01       	movw	r12, r20
    3bb6:	20 91 9c 07 	lds	r18, 0x079C	; 0x80079c <_ZN7TwoWire12transmittingE>
    3bba:	22 23       	and	r18, r18
    3bbc:	a1 f0       	breq	.+40     	; 0x3be6 <_ZN7TwoWire5writeEPKhj+0x46>
    3bbe:	41 15       	cp	r20, r1
    3bc0:	51 05       	cpc	r21, r1
    3bc2:	99 f0       	breq	.+38     	; 0x3bea <_ZN7TwoWire5writeEPKhj+0x4a>
    3bc4:	eb 01       	movw	r28, r22
    3bc6:	7b 01       	movw	r14, r22
    3bc8:	e4 0e       	add	r14, r20
    3bca:	f5 1e       	adc	r15, r21
    3bcc:	69 91       	ld	r22, Y+
    3bce:	d8 01       	movw	r26, r16
    3bd0:	ed 91       	ld	r30, X+
    3bd2:	fc 91       	ld	r31, X
    3bd4:	01 90       	ld	r0, Z+
    3bd6:	f0 81       	ld	r31, Z
    3bd8:	e0 2d       	mov	r30, r0
    3bda:	c8 01       	movw	r24, r16
    3bdc:	19 95       	eicall
    3bde:	ce 15       	cp	r28, r14
    3be0:	df 05       	cpc	r29, r15
    3be2:	a1 f7       	brne	.-24     	; 0x3bcc <_ZN7TwoWire5writeEPKhj+0x2c>
    3be4:	02 c0       	rjmp	.+4      	; 0x3bea <_ZN7TwoWire5writeEPKhj+0x4a>
    3be6:	64 2f       	mov	r22, r20
    3be8:	eb dd       	rcall	.-1066   	; 0x37c0 <twi_transmit>
    3bea:	c6 01       	movw	r24, r12
    3bec:	df 91       	pop	r29
    3bee:	cf 91       	pop	r28
    3bf0:	1f 91       	pop	r17
    3bf2:	0f 91       	pop	r16
    3bf4:	ff 90       	pop	r15
    3bf6:	ef 90       	pop	r14
    3bf8:	df 90       	pop	r13
    3bfa:	cf 90       	pop	r12
    3bfc:	08 95       	ret

00003bfe <_ZN7TwoWire5beginEv>:
    3bfe:	10 92 c1 07 	sts	0x07C1, r1	; 0x8007c1 <_ZN7TwoWire13rxBufferIndexE>
    3c02:	10 92 c0 07 	sts	0x07C0, r1	; 0x8007c0 <_ZN7TwoWire14rxBufferLengthE>
    3c06:	10 92 9e 07 	sts	0x079E, r1	; 0x80079e <_ZN7TwoWire13txBufferIndexE>
    3c0a:	10 92 9d 07 	sts	0x079D, r1	; 0x80079d <_ZN7TwoWire14txBufferLengthE>
    3c0e:	0a dd       	rcall	.-1516   	; 0x3624 <twi_init>
    3c10:	8a e9       	ldi	r24, 0x9A	; 154
    3c12:	9d e1       	ldi	r25, 0x1D	; 29
    3c14:	04 de       	rcall	.-1016   	; 0x381e <twi_attachSlaveTxEvent>
    3c16:	8e e6       	ldi	r24, 0x6E	; 110
    3c18:	9d e1       	ldi	r25, 0x1D	; 29
    3c1a:	fc cd       	rjmp	.-1032   	; 0x3814 <twi_attachSlaveRxEvent>
    3c1c:	08 95       	ret

00003c1e <_ZN7TwoWire17beginTransmissionEh>:
    3c1e:	81 e0       	ldi	r24, 0x01	; 1
    3c20:	80 93 9c 07 	sts	0x079C, r24	; 0x80079c <_ZN7TwoWire12transmittingE>
    3c24:	60 93 bf 07 	sts	0x07BF, r22	; 0x8007bf <_ZN7TwoWire9txAddressE>
    3c28:	10 92 9e 07 	sts	0x079E, r1	; 0x80079e <_ZN7TwoWire13txBufferIndexE>
    3c2c:	10 92 9d 07 	sts	0x079D, r1	; 0x80079d <_ZN7TwoWire14txBufferLengthE>
    3c30:	08 95       	ret

00003c32 <_ZN7TwoWire17beginTransmissionEi>:
    3c32:	f5 cf       	rjmp	.-22     	; 0x3c1e <_ZN7TwoWire17beginTransmissionEh>
    3c34:	08 95       	ret

00003c36 <_ZN7TwoWire15endTransmissionEh>:
    3c36:	0f 93       	push	r16
    3c38:	06 2f       	mov	r16, r22
    3c3a:	21 e0       	ldi	r18, 0x01	; 1
    3c3c:	40 91 9d 07 	lds	r20, 0x079D	; 0x80079d <_ZN7TwoWire14txBufferLengthE>
    3c40:	6f e9       	ldi	r22, 0x9F	; 159
    3c42:	77 e0       	ldi	r23, 0x07	; 7
    3c44:	80 91 bf 07 	lds	r24, 0x07BF	; 0x8007bf <_ZN7TwoWire9txAddressE>
    3c48:	58 dd       	rcall	.-1360   	; 0x36fa <twi_writeTo>
    3c4a:	10 92 9e 07 	sts	0x079E, r1	; 0x80079e <_ZN7TwoWire13txBufferIndexE>
    3c4e:	10 92 9d 07 	sts	0x079D, r1	; 0x80079d <_ZN7TwoWire14txBufferLengthE>
    3c52:	10 92 9c 07 	sts	0x079C, r1	; 0x80079c <_ZN7TwoWire12transmittingE>
    3c56:	0f 91       	pop	r16
    3c58:	08 95       	ret

00003c5a <_ZN7TwoWire11requestFromEhhmhh>:
    3c5a:	4f 92       	push	r4
    3c5c:	5f 92       	push	r5
    3c5e:	6f 92       	push	r6
    3c60:	7f 92       	push	r7
    3c62:	af 92       	push	r10
    3c64:	bf 92       	push	r11
    3c66:	cf 92       	push	r12
    3c68:	ef 92       	push	r14
    3c6a:	ff 92       	push	r15
    3c6c:	0f 93       	push	r16
    3c6e:	1f 93       	push	r17
    3c70:	cf 93       	push	r28
    3c72:	df 93       	push	r29
    3c74:	5c 01       	movw	r10, r24
    3c76:	f6 2e       	mov	r15, r22
    3c78:	d4 2f       	mov	r29, r20
    3c7a:	28 01       	movw	r4, r16
    3c7c:	39 01       	movw	r6, r18
    3c7e:	ee 20       	and	r14, r14
    3c80:	39 f1       	breq	.+78     	; 0x3cd0 <_ZN7TwoWire11requestFromEhhmhh+0x76>
    3c82:	cd df       	rcall	.-102    	; 0x3c1e <_ZN7TwoWire17beginTransmissionEh>
    3c84:	8e 2d       	mov	r24, r14
    3c86:	84 30       	cpi	r24, 0x04	; 4
    3c88:	08 f0       	brcs	.+2      	; 0x3c8c <_ZN7TwoWire11requestFromEhhmhh+0x32>
    3c8a:	83 e0       	ldi	r24, 0x03	; 3
    3c8c:	cf ef       	ldi	r28, 0xFF	; 255
    3c8e:	c8 0f       	add	r28, r24
    3c90:	88 23       	and	r24, r24
    3c92:	d9 f0       	breq	.+54     	; 0x3cca <_ZN7TwoWire11requestFromEhhmhh+0x70>
    3c94:	8c 2f       	mov	r24, r28
    3c96:	88 0f       	add	r24, r24
    3c98:	88 0f       	add	r24, r24
    3c9a:	88 0f       	add	r24, r24
    3c9c:	a3 01       	movw	r20, r6
    3c9e:	92 01       	movw	r18, r4
    3ca0:	04 c0       	rjmp	.+8      	; 0x3caa <_ZN7TwoWire11requestFromEhhmhh+0x50>
    3ca2:	56 95       	lsr	r21
    3ca4:	47 95       	ror	r20
    3ca6:	37 95       	ror	r19
    3ca8:	27 95       	ror	r18
    3caa:	8a 95       	dec	r24
    3cac:	d2 f7       	brpl	.-12     	; 0x3ca2 <_ZN7TwoWire11requestFromEhhmhh+0x48>
    3cae:	ca 01       	movw	r24, r20
    3cb0:	b9 01       	movw	r22, r18
    3cb2:	d5 01       	movw	r26, r10
    3cb4:	ed 91       	ld	r30, X+
    3cb6:	fc 91       	ld	r31, X
    3cb8:	01 90       	ld	r0, Z+
    3cba:	f0 81       	ld	r31, Z
    3cbc:	e0 2d       	mov	r30, r0
    3cbe:	c5 01       	movw	r24, r10
    3cc0:	19 95       	eicall
    3cc2:	8c 2f       	mov	r24, r28
    3cc4:	c1 50       	subi	r28, 0x01	; 1
    3cc6:	81 11       	cpse	r24, r1
    3cc8:	e5 cf       	rjmp	.-54     	; 0x3c94 <_ZN7TwoWire11requestFromEhhmhh+0x3a>
    3cca:	60 e0       	ldi	r22, 0x00	; 0
    3ccc:	c5 01       	movw	r24, r10
    3cce:	b3 df       	rcall	.-154    	; 0x3c36 <_ZN7TwoWire15endTransmissionEh>
    3cd0:	4d 2f       	mov	r20, r29
    3cd2:	d1 32       	cpi	r29, 0x21	; 33
    3cd4:	08 f0       	brcs	.+2      	; 0x3cd8 <_ZN7TwoWire11requestFromEhhmhh+0x7e>
    3cd6:	40 e2       	ldi	r20, 0x20	; 32
    3cd8:	2c 2d       	mov	r18, r12
    3cda:	62 ec       	ldi	r22, 0xC2	; 194
    3cdc:	77 e0       	ldi	r23, 0x07	; 7
    3cde:	8f 2d       	mov	r24, r15
    3ce0:	ba dc       	rcall	.-1676   	; 0x3656 <twi_readFrom>
    3ce2:	10 92 c1 07 	sts	0x07C1, r1	; 0x8007c1 <_ZN7TwoWire13rxBufferIndexE>
    3ce6:	80 93 c0 07 	sts	0x07C0, r24	; 0x8007c0 <_ZN7TwoWire14rxBufferLengthE>
    3cea:	df 91       	pop	r29
    3cec:	cf 91       	pop	r28
    3cee:	1f 91       	pop	r17
    3cf0:	0f 91       	pop	r16
    3cf2:	ff 90       	pop	r15
    3cf4:	ef 90       	pop	r14
    3cf6:	cf 90       	pop	r12
    3cf8:	bf 90       	pop	r11
    3cfa:	af 90       	pop	r10
    3cfc:	7f 90       	pop	r7
    3cfe:	6f 90       	pop	r6
    3d00:	5f 90       	pop	r5
    3d02:	4f 90       	pop	r4
    3d04:	08 95       	ret

00003d06 <_ZN7TwoWire11requestFromEhhh>:
    3d06:	cf 92       	push	r12
    3d08:	ef 92       	push	r14
    3d0a:	0f 93       	push	r16
    3d0c:	1f 93       	push	r17
    3d0e:	c2 2e       	mov	r12, r18
    3d10:	e1 2c       	mov	r14, r1
    3d12:	00 e0       	ldi	r16, 0x00	; 0
    3d14:	10 e0       	ldi	r17, 0x00	; 0
    3d16:	98 01       	movw	r18, r16
    3d18:	a0 df       	rcall	.-192    	; 0x3c5a <_ZN7TwoWire11requestFromEhhmhh>
    3d1a:	1f 91       	pop	r17
    3d1c:	0f 91       	pop	r16
    3d1e:	ef 90       	pop	r14
    3d20:	cf 90       	pop	r12
    3d22:	08 95       	ret

00003d24 <_ZN7TwoWire11requestFromEhh>:
    3d24:	21 e0       	ldi	r18, 0x01	; 1
    3d26:	ef cf       	rjmp	.-34     	; 0x3d06 <_ZN7TwoWire11requestFromEhhh>
    3d28:	08 95       	ret

00003d2a <_ZN7TwoWire11requestFromEii>:
    3d2a:	21 e0       	ldi	r18, 0x01	; 1
    3d2c:	ec cf       	rjmp	.-40     	; 0x3d06 <_ZN7TwoWire11requestFromEhhh>
    3d2e:	08 95       	ret

00003d30 <_ZN7TwoWire15endTransmissionEv>:
    3d30:	61 e0       	ldi	r22, 0x01	; 1
    3d32:	81 cf       	rjmp	.-254    	; 0x3c36 <_ZN7TwoWire15endTransmissionEh>
    3d34:	08 95       	ret

00003d36 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    3d36:	81 ec       	ldi	r24, 0xC1	; 193
    3d38:	92 e0       	ldi	r25, 0x02	; 2
    3d3a:	90 93 97 07 	sts	0x0797, r25	; 0x800797 <Wire+0x1>
    3d3e:	80 93 96 07 	sts	0x0796, r24	; 0x800796 <Wire>
    3d42:	08 95       	ret

00003d44 <_ZN8PcbServoC1ENS_9ServoId_tE>:
 */ 

#include "PcbServo.h"
#include "../Peripherals/HardwareServo.h"

PcbServo::PcbServo(ServoId_t servo) : _servo(servo) {
    3d44:	fc 01       	movw	r30, r24
    3d46:	60 83       	st	Z, r22
    3d48:	08 95       	ret

00003d4a <_ZN8PcbServo5beginEv>:
	
}

void PcbServo::begin(){
	switch(_servo){
    3d4a:	fc 01       	movw	r30, r24
    3d4c:	80 81       	ld	r24, Z
    3d4e:	90 e0       	ldi	r25, 0x00	; 0
    3d50:	8c 30       	cpi	r24, 0x0C	; 12
    3d52:	91 05       	cpc	r25, r1
    3d54:	a8 f4       	brcc	.+42     	; 0x3d80 <_ZN8PcbServo5beginEv+0x36>
    3d56:	fc 01       	movw	r30, r24
    3d58:	88 27       	eor	r24, r24
    3d5a:	e5 5c       	subi	r30, 0xC5	; 197
    3d5c:	fe 4f       	sbci	r31, 0xFE	; 254
    3d5e:	8f 4f       	sbci	r24, 0xFF	; 255
    3d60:	a1 c6       	rjmp	.+3394   	; 0x4aa4 <__tablejump2__>
		case Servo1A:
		case Servo1B:
		case Servo1C:
			Servo1.begin();
    3d62:	8d ef       	ldi	r24, 0xFD	; 253
    3d64:	96 e0       	ldi	r25, 0x06	; 6
    3d66:	cf c9       	rjmp	.-3170   	; 0x3106 <_ZN13HardwareServo5beginEv>
			break;
    3d68:	08 95       	ret
		case Servo3A:
		case Servo3B:
		case Servo3C:
			Servo3.begin();
    3d6a:	8a ee       	ldi	r24, 0xEA	; 234
    3d6c:	96 e0       	ldi	r25, 0x06	; 6
    3d6e:	cb c9       	rjmp	.-3178   	; 0x3106 <_ZN13HardwareServo5beginEv>
			break;
		 case Servo4A:
		 case Servo4B:
		 case Servo4C:
			Servo4.begin();
    3d70:	08 95       	ret
    3d72:	87 ed       	ldi	r24, 0xD7	; 215
    3d74:	96 e0       	ldi	r25, 0x06	; 6
			break;
    3d76:	c7 c9       	rjmp	.-3186   	; 0x3106 <_ZN13HardwareServo5beginEv>
		case Servo5A:
		case Servo5B:
		case Servo5C:
			Servo5.begin();
    3d78:	08 95       	ret
    3d7a:	84 ec       	ldi	r24, 0xC4	; 196
    3d7c:	96 e0       	ldi	r25, 0x06	; 6
    3d7e:	c3 c9       	rjmp	.-3194   	; 0x3106 <_ZN13HardwareServo5beginEv>
    3d80:	08 95       	ret

00003d82 <_ZN8PcbServo8setPulseEj>:
			break;
	}	
}

void PcbServo::setPulse(uint16_t us){
	switch(_servo){
    3d82:	fc 01       	movw	r30, r24
    3d84:	80 81       	ld	r24, Z
    3d86:	90 e0       	ldi	r25, 0x00	; 0
    3d88:	8c 30       	cpi	r24, 0x0C	; 12
    3d8a:	91 05       	cpc	r25, r1
    3d8c:	08 f0       	brcs	.+2      	; 0x3d90 <_ZN8PcbServo8setPulseEj+0xe>
    3d8e:	35 c0       	rjmp	.+106    	; 0x3dfa <_ZN8PcbServo8setPulseEj+0x78>
    3d90:	fc 01       	movw	r30, r24
    3d92:	88 27       	eor	r24, r24
    3d94:	e9 5b       	subi	r30, 0xB9	; 185
    3d96:	fe 4f       	sbci	r31, 0xFE	; 254
    3d98:	8f 4f       	sbci	r24, 0xFF	; 255
    3d9a:	84 c6       	rjmp	.+3336   	; 0x4aa4 <__tablejump2__>
		case Servo1A:
			Servo1.setPulseA(us);
    3d9c:	8d ef       	ldi	r24, 0xFD	; 253
    3d9e:	96 e0       	ldi	r25, 0x06	; 6
    3da0:	14 ca       	rjmp	.-3032   	; 0x31ca <_ZN13HardwareServo9setPulseAEj>
			break;
    3da2:	08 95       	ret
		case Servo1B:
			Servo1.setPulseB(us);
    3da4:	8d ef       	ldi	r24, 0xFD	; 253
    3da6:	96 e0       	ldi	r25, 0x06	; 6
    3da8:	1a ca       	rjmp	.-3020   	; 0x31de <_ZN13HardwareServo9setPulseBEj>
			break;
		case Servo1C:
			Servo1.setPulseC(us);
    3daa:	08 95       	ret
    3dac:	8d ef       	ldi	r24, 0xFD	; 253
    3dae:	96 e0       	ldi	r25, 0x06	; 6
			break;
    3db0:	20 ca       	rjmp	.-3008   	; 0x31f2 <_ZN13HardwareServo9setPulseCEj>
		case Servo3A:
			Servo3.setPulseA(us);
    3db2:	08 95       	ret
    3db4:	8a ee       	ldi	r24, 0xEA	; 234
    3db6:	96 e0       	ldi	r25, 0x06	; 6
			break;
    3db8:	08 ca       	rjmp	.-3056   	; 0x31ca <_ZN13HardwareServo9setPulseAEj>
		case Servo3B:
			Servo3.setPulseB(us);
    3dba:	08 95       	ret
    3dbc:	8a ee       	ldi	r24, 0xEA	; 234
    3dbe:	96 e0       	ldi	r25, 0x06	; 6
			break;
    3dc0:	0e ca       	rjmp	.-3044   	; 0x31de <_ZN13HardwareServo9setPulseBEj>
		case Servo3C:
			Servo3.setPulseC(us);
    3dc2:	08 95       	ret
    3dc4:	8a ee       	ldi	r24, 0xEA	; 234
    3dc6:	96 e0       	ldi	r25, 0x06	; 6
			break;
		case Servo4A:
			Servo4.setPulseA(us);
    3dc8:	14 ca       	rjmp	.-3032   	; 0x31f2 <_ZN13HardwareServo9setPulseCEj>
    3dca:	08 95       	ret
    3dcc:	87 ed       	ldi	r24, 0xD7	; 215
			break;
    3dce:	96 e0       	ldi	r25, 0x06	; 6
		case Servo4B:
			Servo4.setPulseB(us);
    3dd0:	fc c9       	rjmp	.-3080   	; 0x31ca <_ZN13HardwareServo9setPulseAEj>
    3dd2:	08 95       	ret
    3dd4:	87 ed       	ldi	r24, 0xD7	; 215
			break;
    3dd6:	96 e0       	ldi	r25, 0x06	; 6
		case Servo4C:
			Servo4.setPulseC(us);
    3dd8:	02 ca       	rjmp	.-3068   	; 0x31de <_ZN13HardwareServo9setPulseBEj>
    3dda:	08 95       	ret
    3ddc:	87 ed       	ldi	r24, 0xD7	; 215
			break;
    3dde:	96 e0       	ldi	r25, 0x06	; 6
		case Servo5A:
			Servo5.setPulseA(us);
    3de0:	08 ca       	rjmp	.-3056   	; 0x31f2 <_ZN13HardwareServo9setPulseCEj>
    3de2:	08 95       	ret
    3de4:	84 ec       	ldi	r24, 0xC4	; 196
			break;
    3de6:	96 e0       	ldi	r25, 0x06	; 6
		case Servo5B:
			Servo5.setPulseB(us);
    3de8:	f0 c9       	rjmp	.-3104   	; 0x31ca <_ZN13HardwareServo9setPulseAEj>
    3dea:	08 95       	ret
    3dec:	84 ec       	ldi	r24, 0xC4	; 196
    3dee:	96 e0       	ldi	r25, 0x06	; 6
			break;
    3df0:	f6 c9       	rjmp	.-3092   	; 0x31de <_ZN13HardwareServo9setPulseBEj>
		case Servo5C:
			Servo5.setPulseC(us);
    3df2:	08 95       	ret
    3df4:	84 ec       	ldi	r24, 0xC4	; 196
    3df6:	96 e0       	ldi	r25, 0x06	; 6
    3df8:	fc c9       	rjmp	.-3080   	; 0x31f2 <_ZN13HardwareServo9setPulseCEj>
    3dfa:	08 95       	ret

00003dfc <_ZN8PcbServo6enableEb>:
			break;
	}
}

void PcbServo::enable(bool en /* = true */){
	switch(_servo){
    3dfc:	fc 01       	movw	r30, r24
    3dfe:	80 81       	ld	r24, Z
    3e00:	90 e0       	ldi	r25, 0x00	; 0
    3e02:	8c 30       	cpi	r24, 0x0C	; 12
    3e04:	91 05       	cpc	r25, r1
    3e06:	08 f0       	brcs	.+2      	; 0x3e0a <_ZN8PcbServo6enableEb+0xe>
    3e08:	7d c0       	rjmp	.+250    	; 0x3f04 <_ZN8PcbServo6enableEb+0x108>
    3e0a:	fc 01       	movw	r30, r24
    3e0c:	88 27       	eor	r24, r24
    3e0e:	ed 5a       	subi	r30, 0xAD	; 173
    3e10:	fe 4f       	sbci	r31, 0xFE	; 254
    3e12:	8f 4f       	sbci	r24, 0xFF	; 255
    3e14:	47 c6       	rjmp	.+3214   	; 0x4aa4 <__tablejump2__>
		case Servo1A:
			en ? Servo1.EnableA() : Servo1.DisableA();
    3e16:	66 23       	and	r22, r22
    3e18:	21 f0       	breq	.+8      	; 0x3e22 <_ZN8PcbServo6enableEb+0x26>
    3e1a:	8d ef       	ldi	r24, 0xFD	; 253
    3e1c:	96 e0       	ldi	r25, 0x06	; 6
    3e1e:	84 c9       	rjmp	.-3320   	; 0x3128 <_ZN13HardwareServo7EnableAEv>
    3e20:	08 95       	ret
    3e22:	8d ef       	ldi	r24, 0xFD	; 253
    3e24:	96 e0       	ldi	r25, 0x06	; 6
    3e26:	a7 c9       	rjmp	.-3250   	; 0x3176 <_ZN13HardwareServo8DisableAEv>
    3e28:	08 95       	ret
			break;
		case Servo1B:
			en ? Servo1.EnableB() : Servo1.DisableB();
    3e2a:	66 23       	and	r22, r22
    3e2c:	21 f0       	breq	.+8      	; 0x3e36 <_ZN8PcbServo6enableEb+0x3a>
    3e2e:	8d ef       	ldi	r24, 0xFD	; 253
    3e30:	96 e0       	ldi	r25, 0x06	; 6
    3e32:	87 c9       	rjmp	.-3314   	; 0x3142 <_ZN13HardwareServo7EnableBEv>
    3e34:	08 95       	ret
    3e36:	8d ef       	ldi	r24, 0xFD	; 253
    3e38:	96 e0       	ldi	r25, 0x06	; 6
    3e3a:	ab c9       	rjmp	.-3242   	; 0x3192 <_ZN13HardwareServo8DisableBEv>
    3e3c:	08 95       	ret
    3e3e:	66 23       	and	r22, r22
			break;
		case Servo1C:
			en ? Servo1.EnableC() : Servo1.DisableC();
    3e40:	21 f0       	breq	.+8      	; 0x3e4a <_ZN8PcbServo6enableEb+0x4e>
    3e42:	8d ef       	ldi	r24, 0xFD	; 253
    3e44:	96 e0       	ldi	r25, 0x06	; 6
    3e46:	8a c9       	rjmp	.-3308   	; 0x315c <_ZN13HardwareServo7EnableCEv>
    3e48:	08 95       	ret
    3e4a:	8d ef       	ldi	r24, 0xFD	; 253
    3e4c:	96 e0       	ldi	r25, 0x06	; 6
    3e4e:	af c9       	rjmp	.-3234   	; 0x31ae <_ZN13HardwareServo8DisableCEv>
    3e50:	08 95       	ret
			break;
		case Servo3A:
			en ? Servo3.EnableA() : Servo3.DisableA();
    3e52:	66 23       	and	r22, r22
    3e54:	21 f0       	breq	.+8      	; 0x3e5e <_ZN8PcbServo6enableEb+0x62>
    3e56:	8a ee       	ldi	r24, 0xEA	; 234
    3e58:	96 e0       	ldi	r25, 0x06	; 6
    3e5a:	66 c9       	rjmp	.-3380   	; 0x3128 <_ZN13HardwareServo7EnableAEv>
    3e5c:	08 95       	ret
    3e5e:	8a ee       	ldi	r24, 0xEA	; 234
    3e60:	96 e0       	ldi	r25, 0x06	; 6
    3e62:	89 c9       	rjmp	.-3310   	; 0x3176 <_ZN13HardwareServo8DisableAEv>
    3e64:	08 95       	ret
			break;
		case Servo3B:
			en ? Servo3.EnableB() : Servo3.DisableB();
    3e66:	66 23       	and	r22, r22
    3e68:	21 f0       	breq	.+8      	; 0x3e72 <_ZN8PcbServo6enableEb+0x76>
    3e6a:	8a ee       	ldi	r24, 0xEA	; 234
    3e6c:	96 e0       	ldi	r25, 0x06	; 6
    3e6e:	69 c9       	rjmp	.-3374   	; 0x3142 <_ZN13HardwareServo7EnableBEv>
    3e70:	08 95       	ret
    3e72:	8a ee       	ldi	r24, 0xEA	; 234
    3e74:	96 e0       	ldi	r25, 0x06	; 6
    3e76:	8d c9       	rjmp	.-3302   	; 0x3192 <_ZN13HardwareServo8DisableBEv>
    3e78:	08 95       	ret
			break;
		case Servo3C:
			en ? Servo3.EnableC() : Servo3.DisableC();
    3e7a:	66 23       	and	r22, r22
    3e7c:	21 f0       	breq	.+8      	; 0x3e86 <_ZN8PcbServo6enableEb+0x8a>
    3e7e:	8a ee       	ldi	r24, 0xEA	; 234
    3e80:	96 e0       	ldi	r25, 0x06	; 6
    3e82:	6c c9       	rjmp	.-3368   	; 0x315c <_ZN13HardwareServo7EnableCEv>
    3e84:	08 95       	ret
    3e86:	8a ee       	ldi	r24, 0xEA	; 234
    3e88:	96 e0       	ldi	r25, 0x06	; 6
    3e8a:	91 c9       	rjmp	.-3294   	; 0x31ae <_ZN13HardwareServo8DisableCEv>
			break;
		case Servo4A:
			en ? Servo4.EnableA() : Servo4.DisableA();
    3e8c:	08 95       	ret
    3e8e:	66 23       	and	r22, r22
    3e90:	21 f0       	breq	.+8      	; 0x3e9a <_ZN8PcbServo6enableEb+0x9e>
    3e92:	87 ed       	ldi	r24, 0xD7	; 215
    3e94:	96 e0       	ldi	r25, 0x06	; 6
    3e96:	48 c9       	rjmp	.-3440   	; 0x3128 <_ZN13HardwareServo7EnableAEv>
    3e98:	08 95       	ret
    3e9a:	87 ed       	ldi	r24, 0xD7	; 215
    3e9c:	96 e0       	ldi	r25, 0x06	; 6
			break;
		case Servo4B:
			en ? Servo4.EnableB() : Servo4.DisableB();
    3e9e:	6b c9       	rjmp	.-3370   	; 0x3176 <_ZN13HardwareServo8DisableAEv>
    3ea0:	08 95       	ret
    3ea2:	66 23       	and	r22, r22
    3ea4:	21 f0       	breq	.+8      	; 0x3eae <_ZN8PcbServo6enableEb+0xb2>
    3ea6:	87 ed       	ldi	r24, 0xD7	; 215
    3ea8:	96 e0       	ldi	r25, 0x06	; 6
    3eaa:	4b c9       	rjmp	.-3434   	; 0x3142 <_ZN13HardwareServo7EnableBEv>
    3eac:	08 95       	ret
    3eae:	87 ed       	ldi	r24, 0xD7	; 215
    3eb0:	96 e0       	ldi	r25, 0x06	; 6
			break;
		case Servo4C:
			en ? Servo4.EnableC() : Servo4.DisableC();
    3eb2:	6f c9       	rjmp	.-3362   	; 0x3192 <_ZN13HardwareServo8DisableBEv>
    3eb4:	08 95       	ret
    3eb6:	66 23       	and	r22, r22
    3eb8:	21 f0       	breq	.+8      	; 0x3ec2 <_ZN8PcbServo6enableEb+0xc6>
    3eba:	87 ed       	ldi	r24, 0xD7	; 215
    3ebc:	96 e0       	ldi	r25, 0x06	; 6
    3ebe:	4e c9       	rjmp	.-3428   	; 0x315c <_ZN13HardwareServo7EnableCEv>
    3ec0:	08 95       	ret
    3ec2:	87 ed       	ldi	r24, 0xD7	; 215
    3ec4:	96 e0       	ldi	r25, 0x06	; 6
			break;
		case Servo5A:
			en ? Servo5.EnableA() : Servo5.DisableA();
    3ec6:	73 c9       	rjmp	.-3354   	; 0x31ae <_ZN13HardwareServo8DisableCEv>
    3ec8:	08 95       	ret
    3eca:	66 23       	and	r22, r22
    3ecc:	21 f0       	breq	.+8      	; 0x3ed6 <_ZN8PcbServo6enableEb+0xda>
    3ece:	84 ec       	ldi	r24, 0xC4	; 196
    3ed0:	96 e0       	ldi	r25, 0x06	; 6
    3ed2:	2a c9       	rjmp	.-3500   	; 0x3128 <_ZN13HardwareServo7EnableAEv>
    3ed4:	08 95       	ret
    3ed6:	84 ec       	ldi	r24, 0xC4	; 196
    3ed8:	96 e0       	ldi	r25, 0x06	; 6
			break;
		case Servo5B:
			en ? Servo5.EnableB() : Servo5.DisableB();
    3eda:	4d c9       	rjmp	.-3430   	; 0x3176 <_ZN13HardwareServo8DisableAEv>
    3edc:	08 95       	ret
    3ede:	66 23       	and	r22, r22
    3ee0:	21 f0       	breq	.+8      	; 0x3eea <_ZN8PcbServo6enableEb+0xee>
    3ee2:	84 ec       	ldi	r24, 0xC4	; 196
    3ee4:	96 e0       	ldi	r25, 0x06	; 6
    3ee6:	2d c9       	rjmp	.-3494   	; 0x3142 <_ZN13HardwareServo7EnableBEv>
    3ee8:	08 95       	ret
    3eea:	84 ec       	ldi	r24, 0xC4	; 196
    3eec:	96 e0       	ldi	r25, 0x06	; 6
    3eee:	51 c9       	rjmp	.-3422   	; 0x3192 <_ZN13HardwareServo8DisableBEv>
    3ef0:	08 95       	ret
			break;
		case Servo5C:
			en ? Servo5.EnableC() : Servo5.DisableC();
    3ef2:	66 23       	and	r22, r22
    3ef4:	21 f0       	breq	.+8      	; 0x3efe <_ZN8PcbServo6enableEb+0x102>
    3ef6:	84 ec       	ldi	r24, 0xC4	; 196
    3ef8:	96 e0       	ldi	r25, 0x06	; 6
    3efa:	30 c9       	rjmp	.-3488   	; 0x315c <_ZN13HardwareServo7EnableCEv>
    3efc:	08 95       	ret
    3efe:	84 ec       	ldi	r24, 0xC4	; 196
    3f00:	96 e0       	ldi	r25, 0x06	; 6
    3f02:	55 c9       	rjmp	.-3414   	; 0x31ae <_ZN13HardwareServo8DisableCEv>
    3f04:	08 95       	ret

00003f06 <_GLOBAL__sub_I_ServoA1>:
 *  Author: zcarey
 */ 

#include "PCB_V3.h"

PcbServo ServoA1(PcbServo::Servo5C);
    3f06:	6b e0       	ldi	r22, 0x0B	; 11
    3f08:	8c ee       	ldi	r24, 0xEC	; 236
    3f0a:	97 e0       	ldi	r25, 0x07	; 7
    3f0c:	1b df       	rcall	.-458    	; 0x3d44 <_ZN8PcbServoC1ENS_9ServoId_tE>
PcbServo ServoA2(PcbServo::Servo3B);
    3f0e:	64 e0       	ldi	r22, 0x04	; 4
    3f10:	8b ee       	ldi	r24, 0xEB	; 235
    3f12:	97 e0       	ldi	r25, 0x07	; 7
    3f14:	17 df       	rcall	.-466    	; 0x3d44 <_ZN8PcbServoC1ENS_9ServoId_tE>
PcbServo ServoA3(PcbServo::Servo3A);
    3f16:	63 e0       	ldi	r22, 0x03	; 3
    3f18:	8a ee       	ldi	r24, 0xEA	; 234
    3f1a:	97 e0       	ldi	r25, 0x07	; 7
    3f1c:	13 df       	rcall	.-474    	; 0x3d44 <_ZN8PcbServoC1ENS_9ServoId_tE>
PcbServo ServoA4(PcbServo::Servo4B);
    3f1e:	67 e0       	ldi	r22, 0x07	; 7
    3f20:	89 ee       	ldi	r24, 0xE9	; 233
    3f22:	97 e0       	ldi	r25, 0x07	; 7
    3f24:	0f df       	rcall	.-482    	; 0x3d44 <_ZN8PcbServoC1ENS_9ServoId_tE>
PcbServo ServoA5(PcbServo::Servo4C);
    3f26:	68 e0       	ldi	r22, 0x08	; 8
    3f28:	88 ee       	ldi	r24, 0xE8	; 232
    3f2a:	97 e0       	ldi	r25, 0x07	; 7
    3f2c:	0b df       	rcall	.-490    	; 0x3d44 <_ZN8PcbServoC1ENS_9ServoId_tE>

PcbServo ServoB1(PcbServo::Servo5A);
    3f2e:	69 e0       	ldi	r22, 0x09	; 9
    3f30:	87 ee       	ldi	r24, 0xE7	; 231
    3f32:	97 e0       	ldi	r25, 0x07	; 7
    3f34:	07 df       	rcall	.-498    	; 0x3d44 <_ZN8PcbServoC1ENS_9ServoId_tE>
PcbServo ServoB2(PcbServo::Servo5B);
    3f36:	6a e0       	ldi	r22, 0x0A	; 10
    3f38:	86 ee       	ldi	r24, 0xE6	; 230
    3f3a:	97 e0       	ldi	r25, 0x07	; 7
    3f3c:	03 df       	rcall	.-506    	; 0x3d44 <_ZN8PcbServoC1ENS_9ServoId_tE>
PcbServo ServoB3(PcbServo::Servo3C);
    3f3e:	65 e0       	ldi	r22, 0x05	; 5
    3f40:	85 ee       	ldi	r24, 0xE5	; 229
    3f42:	97 e0       	ldi	r25, 0x07	; 7
    3f44:	ff de       	rcall	.-514    	; 0x3d44 <_ZN8PcbServoC1ENS_9ServoId_tE>
PcbServo ServoB4(PcbServo::Servo4A);
    3f46:	66 e0       	ldi	r22, 0x06	; 6
    3f48:	84 ee       	ldi	r24, 0xE4	; 228
    3f4a:	97 e0       	ldi	r25, 0x07	; 7
    3f4c:	fb de       	rcall	.-522    	; 0x3d44 <_ZN8PcbServoC1ENS_9ServoId_tE>
PcbServo ServoB5(PcbServo::Servo1A);
    3f4e:	60 e0       	ldi	r22, 0x00	; 0
    3f50:	83 ee       	ldi	r24, 0xE3	; 227
    3f52:	97 e0       	ldi	r25, 0x07	; 7
    3f54:	f7 de       	rcall	.-530    	; 0x3d44 <_ZN8PcbServoC1ENS_9ServoId_tE>
    3f56:	61 e0       	ldi	r22, 0x01	; 1
PcbServo ServoB6(PcbServo::Servo1B);
    3f58:	82 ee       	ldi	r24, 0xE2	; 226
    3f5a:	97 e0       	ldi	r25, 0x07	; 7
    3f5c:	f3 ce       	rjmp	.-538    	; 0x3d44 <_ZN8PcbServoC1ENS_9ServoId_tE>
    3f5e:	08 95       	ret

00003f60 <_ZN9IReadable15CommandReceivedEhPKhh>:
#include "EtherComm.h"

class IReadable : public IDevice {
public:
	void CommandReceived(uint8_t id, const uint8_t* data, uint8_t len){
		if(len == 0){
    3f60:	21 11       	cpse	r18, r1
    3f62:	0d c0       	rjmp	.+26     	; 0x3f7e <_ZN9IReadable15CommandReceivedEhPKhh+0x1e>
			ReadRegisterRequested(id, EtherComm::buffer + 3);
    3f64:	40 91 00 02 	lds	r20, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    3f68:	50 91 01 02 	lds	r21, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    3f6c:	4d 5f       	subi	r20, 0xFD	; 253
    3f6e:	5f 4f       	sbci	r21, 0xFF	; 255
    3f70:	dc 01       	movw	r26, r24
    3f72:	ed 91       	ld	r30, X+
    3f74:	fc 91       	ld	r31, X
    3f76:	06 80       	ldd	r0, Z+6	; 0x06
    3f78:	f7 81       	ldd	r31, Z+7	; 0x07
    3f7a:	e0 2d       	mov	r30, r0
    3f7c:	19 95       	eicall
    3f7e:	08 95       	ret

00003f80 <_ZN13DigitalSensor6UpdateEPh>:
	
	bool begin(){ //override
		return rov.RegisterDevice(_id, this);
	}
	
	void Update(uint8_t* buffer) { //override
    3f80:	08 95       	ret

00003f82 <_ZN9IWritable15CommandReceivedEhPKhh>:

class IWritable : public IDevice {
public:
	inline void CommandReceived(uint8_t id, const uint8_t* data, uint8_t len){
		//if(len == 0){
			WriteRegisterRequested(id, data, len);
    3f82:	dc 01       	movw	r26, r24
    3f84:	ed 91       	ld	r30, X+
    3f86:	fc 91       	ld	r31, X
    3f88:	06 80       	ldd	r0, Z+6	; 0x06
    3f8a:	f7 81       	ldd	r31, Z+7	; 0x07
    3f8c:	e0 2d       	mov	r30, r0
    3f8e:	19 95       	eicall
    3f90:	08 95       	ret

00003f92 <_ZN13ServoActuator6UpdateEPh>:
		ServoA1.setPulse(1500);
		
		return true;	
	}
	
	void Update(uint8_t* buffer){ //Override
    3f92:	08 95       	ret

00003f94 <_ZN13DigitalSensor21ReadRegisterRequestedEhPh>:
	void ReadRegisterRequested(uint8_t id, uint8_t* buffer) { //override
		/*Serial.print("My id: ");
		Serial.print(_id);
		Serial.print("    Reg id: ");
		Serial.println(id);*/
		if(id == _id){
    3f94:	dc 01       	movw	r26, r24
    3f96:	12 96       	adiw	r26, 0x02	; 2
    3f98:	2c 91       	ld	r18, X
    3f9a:	12 97       	sbiw	r26, 0x02	; 2
    3f9c:	26 13       	cpse	r18, r22
    3f9e:	1a c0       	rjmp	.+52     	; 0x3fd4 <_ZN13DigitalSensor21ReadRegisterRequestedEhPh+0x40>
			buffer[0] = ((*pinPort & pin) > 0) ^ inversed;
    3fa0:	14 96       	adiw	r26, 0x04	; 4
    3fa2:	ed 91       	ld	r30, X+
    3fa4:	fc 91       	ld	r31, X
    3fa6:	15 97       	sbiw	r26, 0x05	; 5
    3fa8:	60 81       	ld	r22, Z
    3faa:	13 96       	adiw	r26, 0x03	; 3
    3fac:	3c 91       	ld	r19, X
    3fae:	36 23       	and	r19, r22
    3fb0:	61 e0       	ldi	r22, 0x01	; 1
    3fb2:	09 f4       	brne	.+2      	; 0x3fb6 <_ZN13DigitalSensor21ReadRegisterRequestedEhPh+0x22>
    3fb4:	60 e0       	ldi	r22, 0x00	; 0
    3fb6:	fa 01       	movw	r30, r20
    3fb8:	dc 01       	movw	r26, r24
    3fba:	16 96       	adiw	r26, 0x06	; 6
    3fbc:	8c 91       	ld	r24, X
    3fbe:	86 27       	eor	r24, r22
    3fc0:	80 83       	st	Z, r24
	virtual void CommandReceived(uint8_t id, const uint8_t* data, uint8_t len) = 0;
	virtual void Update(uint8_t* buffer) = 0;
	
protected:
	void inline SendCommand(uint8_t id, uint8_t len){
		EtherComm::buffer[2] = id;
    3fc2:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    3fc6:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    3fca:	22 83       	std	Z+2, r18	; 0x02
		EtherComm::SendCommand(CMD_UpdateDevice, len + 1);
    3fcc:	62 e0       	ldi	r22, 0x02	; 2
    3fce:	83 e0       	ldi	r24, 0x03	; 3
    3fd0:	0c 94 c9 0b 	jmp	0x1792	; 0x1792 <_ZN9EtherComm11SendCommandEhh>
    3fd4:	08 95       	ret

00003fd6 <_ZN13ServoActuator22WriteRegisterRequestedEhPKhh>:
		
	}
	
protected:
	void WriteRegisterRequested(uint8_t id, const uint8_t* data, uint8_t len){ //Override
    3fd6:	cf 93       	push	r28
    3fd8:	df 93       	push	r29
    3fda:	c6 2f       	mov	r28, r22
		//Serial.print("Id: ");
		//Serial.println(id);
		if(id == _id){
    3fdc:	fc 01       	movw	r30, r24
    3fde:	d2 81       	ldd	r29, Z+2	; 0x02
    3fe0:	d6 13       	cpse	r29, r22
    3fe2:	12 c0       	rjmp	.+36     	; 0x4008 <_ZN13ServoActuator22WriteRegisterRequestedEhPKhh+0x32>
			//Serial.print("Data Len: ");
			//Serial.println(len);
			if(len == 2){
    3fe4:	22 30       	cpi	r18, 0x02	; 2
    3fe6:	41 f5       	brne	.+80     	; 0x4038 <_ZN13ServoActuator22WriteRegisterRequestedEhPKhh+0x62>
				//Serial.println("Recvd.");
				//lastPos = data[0];
				//Servo_A1_setPulse(data[0]);
				ServoA1.setPulse(*((uint16_t*)data));
    3fe8:	fa 01       	movw	r30, r20
    3fea:	60 81       	ld	r22, Z
    3fec:	71 81       	ldd	r23, Z+1	; 0x01
    3fee:	8c ee       	ldi	r24, 0xEC	; 236
    3ff0:	97 e0       	ldi	r25, 0x07	; 7
    3ff2:	c7 de       	rcall	.-626    	; 0x3d82 <_ZN8PcbServo8setPulseEj>
	}

protected:
	virtual void WriteRegisterRequested(uint8_t id, const uint8_t* data, uint8_t len);
	void SendConfirmation(uint8_t id){
		EtherComm::buffer[2] = id;
    3ff4:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    3ff8:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    3ffc:	d2 83       	std	Z+2, r29	; 0x02
		EtherComm::SendCommand(CMD_UpdateDevice, 1);
    3ffe:	61 e0       	ldi	r22, 0x01	; 1
    4000:	83 e0       	ldi	r24, 0x03	; 3
    4002:	0e 94 c9 0b 	call	0x1792	; 0x1792 <_ZN9EtherComm11SendCommandEhh>
    4006:	18 c0       	rjmp	.+48     	; 0x4038 <_ZN13ServoActuator22WriteRegisterRequestedEhPKhh+0x62>
			if(len == 2){
				Servo_A1_setMax(*((uint16_t*)data));
				Servo_A1_setPulse(lastPos);
				SendConfirmation(id);
			}
		*/}else if(id == _enId){
    4008:	fc 01       	movw	r30, r24
    400a:	83 81       	ldd	r24, Z+3	; 0x03
    400c:	68 13       	cpse	r22, r24
    400e:	14 c0       	rjmp	.+40     	; 0x4038 <_ZN13ServoActuator22WriteRegisterRequestedEhPKhh+0x62>
			if(len == 1){
    4010:	21 30       	cpi	r18, 0x01	; 1
    4012:	91 f4       	brne	.+36     	; 0x4038 <_ZN13ServoActuator22WriteRegisterRequestedEhPKhh+0x62>
				//if(data[0] == 0) Servo_A1_disable();
				//else Servo_A1_enable();
				ServoA1.enable(data[0]);
    4014:	61 e0       	ldi	r22, 0x01	; 1
    4016:	fa 01       	movw	r30, r20
    4018:	80 81       	ld	r24, Z
    401a:	81 11       	cpse	r24, r1
    401c:	01 c0       	rjmp	.+2      	; 0x4020 <_ZN13ServoActuator22WriteRegisterRequestedEhPKhh+0x4a>
    401e:	60 e0       	ldi	r22, 0x00	; 0
    4020:	8c ee       	ldi	r24, 0xEC	; 236
    4022:	97 e0       	ldi	r25, 0x07	; 7
    4024:	eb de       	rcall	.-554    	; 0x3dfc <_ZN8PcbServo6enableEb>
	}

protected:
	virtual void WriteRegisterRequested(uint8_t id, const uint8_t* data, uint8_t len);
	void SendConfirmation(uint8_t id){
		EtherComm::buffer[2] = id;
    4026:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    402a:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    402e:	c2 83       	std	Z+2, r28	; 0x02
		EtherComm::SendCommand(CMD_UpdateDevice, 1);
    4030:	61 e0       	ldi	r22, 0x01	; 1
    4032:	83 e0       	ldi	r24, 0x03	; 3
    4034:	0e 94 c9 0b 	call	0x1792	; 0x1792 <_ZN9EtherComm11SendCommandEhh>
				SendConfirmation(id);
			}
		}
	}
    4038:	df 91       	pop	r29
    403a:	cf 91       	pop	r28
    403c:	08 95       	ret

0000403e <_ZN5Robot14RegisterDeviceEhP7IDevice>:
	return true;
}


bool Robot::RegisterDevice(uint8_t id, IDevice* device){
	if(registers[id] == NULL){
    403e:	90 e0       	ldi	r25, 0x00	; 0
    4040:	fc 01       	movw	r30, r24
    4042:	ee 0f       	add	r30, r30
    4044:	ff 1f       	adc	r31, r31
    4046:	ed 5c       	subi	r30, 0xCD	; 205
    4048:	f7 4f       	sbci	r31, 0xF7	; 247
    404a:	20 81       	ld	r18, Z
    404c:	31 81       	ldd	r19, Z+1	; 0x01
    404e:	23 2b       	or	r18, r19
    4050:	49 f4       	brne	.+18     	; 0x4064 <_ZN5Robot14RegisterDeviceEhP7IDevice+0x26>
		//if(sensor.begin()){
		registers[id] = device; //TODO error handling
    4052:	88 0f       	add	r24, r24
    4054:	99 1f       	adc	r25, r25
    4056:	fc 01       	movw	r30, r24
    4058:	ed 5c       	subi	r30, 0xCD	; 205
    405a:	f7 4f       	sbci	r31, 0xF7	; 247
    405c:	71 83       	std	Z+1, r23	; 0x01
    405e:	60 83       	st	Z, r22
		//}
		return true;
    4060:	81 e0       	ldi	r24, 0x01	; 1
    4062:	08 95       	ret
	}else{
		//TODO id collisions
		return false;
    4064:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    4066:	08 95       	ret

00004068 <_ZN13DigitalSensor5beginEv>:
		rov.RegisterDevice(0, this);
		//TODO move to begin?
	}
	
	bool begin(){ //override
		return rov.RegisterDevice(_id, this);
    4068:	bc 01       	movw	r22, r24
    406a:	fc 01       	movw	r30, r24
    406c:	82 81       	ldd	r24, Z+2	; 0x02
    406e:	e7 cf       	rjmp	.-50     	; 0x403e <_ZN5Robot14RegisterDeviceEhP7IDevice>
	}
    4070:	08 95       	ret

00004072 <_ZN13ServoActuator5beginEv>:
		: _id(id), /*_minId(minId), _maxId(maxId),*/ _enId(enId)
	{
		
	}
	
	bool begin(){ //Override
    4072:	0f 93       	push	r16
    4074:	1f 93       	push	r17
    4076:	cf 93       	push	r28
    4078:	8c 01       	movw	r16, r24
		if(!rov.RegisterDevice(_id, this) || !rov.RegisterDevice(_enId, this)) return false;
    407a:	bc 01       	movw	r22, r24
    407c:	fc 01       	movw	r30, r24
    407e:	82 81       	ldd	r24, Z+2	; 0x02
    4080:	de df       	rcall	.-68     	; 0x403e <_ZN5Robot14RegisterDeviceEhP7IDevice>
    4082:	c8 2f       	mov	r28, r24
    4084:	88 23       	and	r24, r24
    4086:	79 f0       	breq	.+30     	; 0x40a6 <_ZN13ServoActuator5beginEv+0x34>
    4088:	b8 01       	movw	r22, r16
    408a:	f8 01       	movw	r30, r16
    408c:	83 81       	ldd	r24, Z+3	; 0x03
    408e:	d7 df       	rcall	.-82     	; 0x403e <_ZN5Robot14RegisterDeviceEhP7IDevice>
    4090:	c8 2f       	mov	r28, r24
    4092:	88 23       	and	r24, r24
    4094:	41 f0       	breq	.+16     	; 0x40a6 <_ZN13ServoActuator5beginEv+0x34>
		
		//Servo_A1_setMin(550);
		//Servo_A1_setMax(2400);
		//Servo_A1_setPulse(127);
		
		ServoA1.begin();
    4096:	8c ee       	ldi	r24, 0xEC	; 236
    4098:	97 e0       	ldi	r25, 0x07	; 7
    409a:	57 de       	rcall	.-850    	; 0x3d4a <_ZN8PcbServo5beginEv>
		ServoA1.setPulse(1500);
    409c:	6c ed       	ldi	r22, 0xDC	; 220
    409e:	75 e0       	ldi	r23, 0x05	; 5
    40a0:	8c ee       	ldi	r24, 0xEC	; 236
    40a2:	97 e0       	ldi	r25, 0x07	; 7
    40a4:	6e de       	rcall	.-804    	; 0x3d82 <_ZN8PcbServo8setPulseEj>
		
		return true;	
	}
    40a6:	8c 2f       	mov	r24, r28
    40a8:	cf 91       	pop	r28
    40aa:	1f 91       	pop	r17
    40ac:	0f 91       	pop	r16
    40ae:	08 95       	ret

000040b0 <_ZN5Robot15CommandReceivedEPKhh>:
	for(uint8_t i = 0; i < len; i++){
		Serial.print(' ');
		Serial.print(data[i], HEX);
	}
	Serial.println();*/
	if(len >= 1){
    40b0:	66 23       	and	r22, r22
    40b2:	d1 f0       	breq	.+52     	; 0x40e8 <_ZN5Robot15CommandReceivedEPKhh+0x38>
		if(registers[data[0]] != NULL){
    40b4:	fc 01       	movw	r30, r24
    40b6:	30 81       	ld	r19, Z
    40b8:	e3 2f       	mov	r30, r19
    40ba:	f0 e0       	ldi	r31, 0x00	; 0
    40bc:	ee 0f       	add	r30, r30
    40be:	ff 1f       	adc	r31, r31
    40c0:	ed 5c       	subi	r30, 0xCD	; 205
    40c2:	f7 4f       	sbci	r31, 0xF7	; 247
    40c4:	a0 81       	ld	r26, Z
    40c6:	b1 81       	ldd	r27, Z+1	; 0x01
    40c8:	10 97       	sbiw	r26, 0x00	; 0
    40ca:	71 f0       	breq	.+28     	; 0x40e8 <_ZN5Robot15CommandReceivedEPKhh+0x38>
    40cc:	26 2f       	mov	r18, r22
    40ce:	ac 01       	movw	r20, r24
			registers[data[0]]->CommandReceived(data[0], data + 1, len - 1);
    40d0:	21 50       	subi	r18, 0x01	; 1
    40d2:	4f 5f       	subi	r20, 0xFF	; 255
    40d4:	5f 4f       	sbci	r21, 0xFF	; 255
    40d6:	ed 91       	ld	r30, X+
    40d8:	fc 91       	ld	r31, X
    40da:	11 97       	sbiw	r26, 0x01	; 1
    40dc:	02 80       	ldd	r0, Z+2	; 0x02
    40de:	f3 81       	ldd	r31, Z+3	; 0x03
    40e0:	e0 2d       	mov	r30, r0
    40e2:	63 2f       	mov	r22, r19
    40e4:	cd 01       	movw	r24, r26
    40e6:	19 95       	eicall
    40e8:	08 95       	ret

000040ea <_GLOBAL__sub_I__ZN5Robot9registersE>:

#include "../IReadable.h"

class DigitalSensor : public IReadable {
public:
	DigitalSensor(const uint8_t ID, Register& DDRPort, Register& PortPort, Register& PinPort, uint8_t Pin, bool Inversed = true) : _id(ID), pin(Pin), pinPort(&PinPort), inversed(Inversed) {
    40ea:	ec e2       	ldi	r30, 0x2C	; 44
    40ec:	f8 e0       	ldi	r31, 0x08	; 8
    40ee:	8d e4       	ldi	r24, 0x4D	; 77
    40f0:	93 e0       	ldi	r25, 0x03	; 3
    40f2:	91 83       	std	Z+1, r25	; 0x01
    40f4:	80 83       	st	Z, r24
    40f6:	12 82       	std	Z+2, r1	; 0x02
    40f8:	81 e0       	ldi	r24, 0x01	; 1
    40fa:	83 83       	std	Z+3, r24	; 0x03
    40fc:	21 e3       	ldi	r18, 0x31	; 49
    40fe:	30 e0       	ldi	r19, 0x00	; 0
    4100:	35 83       	std	Z+5, r19	; 0x05
    4102:	24 83       	std	Z+4, r18	; 0x04
    4104:	86 83       	std	Z+6, r24	; 0x06
		DDRPort &= ~pin; //Enable input
    4106:	80 98       	cbi	0x10, 0	; 16
		PortPort |= pin; //Enable pullup
    4108:	88 9a       	sbi	0x11, 0	; 17
		rov.RegisterDevice(0, this);
    410a:	bf 01       	movw	r22, r30
    410c:	80 e0       	ldi	r24, 0x00	; 0
    410e:	97 df       	rcall	.-210    	; 0x403e <_ZN5Robot14RegisterDeviceEhP7IDevice>
#define ID_IMU_TEMPERATURE 1
#define ID_IMU_ACCELEROMETER 2
#define ID_PRESSURE_SENSOR 4

DigitalSensor BtnTest(ID_TEST_BUTTON, DDR_BTN0, PORT_BTN0, PIN_BTN0, MASK_BTN0);
ImuSensor Imu(ID_IMU_TEMPERATURE, ID_IMU_ACCELEROMETER);
    4110:	42 e0       	ldi	r20, 0x02	; 2
    4112:	61 e0       	ldi	r22, 0x01	; 1
    4114:	8d e1       	ldi	r24, 0x1D	; 29
    4116:	98 e0       	ldi	r25, 0x08	; 8
    4118:	3d d1       	rcall	.+634    	; 0x4394 <_ZN9ImuSensorC1Ehh>
PressureSensor Pressure(ID_PRESSURE_SENSOR, Timer0);
    411a:	4c e1       	ldi	r20, 0x1C	; 28
    411c:	57 e0       	ldi	r21, 0x07	; 7
    411e:	64 e0       	ldi	r22, 0x04	; 4
    4120:	81 ef       	ldi	r24, 0xF1	; 241
    4122:	97 e0       	ldi	r25, 0x07	; 7
    4124:	f4 d1       	rcall	.+1000   	; 0x450e <_ZN14PressureSensorC1EhR13HardwareTimer>
//#include "../Peripherals/HardwareSerial.h"

class ServoActuator : public IWritable {
public:
	ServoActuator(const uint8_t id, /*const uint8_t minId, const uint8_t maxId,*/ const uint8_t enId)
		: _id(id), /*_minId(minId), _maxId(maxId),*/ _enId(enId)
    4126:	ed ee       	ldi	r30, 0xED	; 237
    4128:	f7 e0       	ldi	r31, 0x07	; 7
    412a:	89 e5       	ldi	r24, 0x59	; 89
    412c:	93 e0       	ldi	r25, 0x03	; 3
    412e:	91 83       	std	Z+1, r25	; 0x01
    4130:	80 83       	st	Z, r24
    4132:	85 e0       	ldi	r24, 0x05	; 5
    4134:	82 83       	std	Z+2, r24	; 0x02
    4136:	86 e0       	ldi	r24, 0x06	; 6
    4138:	83 83       	std	Z+3, r24	; 0x03
    413a:	08 95       	ret

0000413c <_ZN5Robot5beginEv>:
	RegisterDevice(Imu);
	
	return true;
}*/

bool Robot::begin(){
    413c:	cf 93       	push	r28
    413e:	e3 e3       	ldi	r30, 0x33	; 51
    4140:	f8 e0       	ldi	r31, 0x08	; 8
    4142:	83 e3       	ldi	r24, 0x33	; 51
    4144:	9a e0       	ldi	r25, 0x0A	; 10
	for(uint16_t i = 0; i < NUM_DEVICES; i++){
		registers[i] = NULL;
    4146:	11 92       	st	Z+, r1
    4148:	11 92       	st	Z+, r1
	
	return true;
}*/

bool Robot::begin(){
	for(uint16_t i = 0; i < NUM_DEVICES; i++){
    414a:	e8 17       	cp	r30, r24
    414c:	f9 07       	cpc	r31, r25
    414e:	d9 f7       	brne	.-10     	; 0x4146 <_ZN5Robot5beginEv+0xa>
		registers[i] = NULL;
	}
	
	Servo1.begin();
    4150:	8d ef       	ldi	r24, 0xFD	; 253
    4152:	96 e0       	ldi	r25, 0x06	; 6
    4154:	0e 94 83 18 	call	0x3106	; 0x3106 <_ZN13HardwareServo5beginEv>
	Servo3.begin();
    4158:	8a ee       	ldi	r24, 0xEA	; 234
    415a:	96 e0       	ldi	r25, 0x06	; 6
    415c:	0e 94 83 18 	call	0x3106	; 0x3106 <_ZN13HardwareServo5beginEv>
	Servo4.begin();
    4160:	87 ed       	ldi	r24, 0xD7	; 215
    4162:	96 e0       	ldi	r25, 0x06	; 6
    4164:	0e 94 83 18 	call	0x3106	; 0x3106 <_ZN13HardwareServo5beginEv>
	Servo5.begin();
    4168:	84 ec       	ldi	r24, 0xC4	; 196
    416a:	96 e0       	ldi	r25, 0x06	; 6
    416c:	0e 94 83 18 	call	0x3106	; 0x3106 <_ZN13HardwareServo5beginEv>
		//TODO move to begin?
	}
	
	bool begin(){ //override
		return rov.RegisterDevice(_id, this);
    4170:	6c e2       	ldi	r22, 0x2C	; 44
    4172:	78 e0       	ldi	r23, 0x08	; 8
    4174:	80 91 2e 08 	lds	r24, 0x082E	; 0x80082e <BtnTest+0x2>
    4178:	62 df       	rcall	.-316    	; 0x403e <_ZN5Robot14RegisterDeviceEhP7IDevice>
    417a:	c8 2f       	mov	r28, r24
	
	//LedDDR |= LedPin;
	if(!BtnTest.begin()){
    417c:	81 11       	cpse	r24, r1
    417e:	06 c0       	rjmp	.+12     	; 0x418c <_ZN5Robot5beginEv+0x50>
		Serial.println("Unable to initialize BtnTest.");
    4180:	6f ec       	ldi	r22, 0xCF	; 207
    4182:	72 e0       	ldi	r23, 0x02	; 2
    4184:	88 ef       	ldi	r24, 0xF8	; 248
    4186:	95 e0       	ldi	r25, 0x05	; 5
    4188:	36 d2       	rcall	.+1132   	; 0x45f6 <_ZN5Print7printlnEPKc>
		return false;
    418a:	36 c0       	rjmp	.+108    	; 0x41f8 <_ZN5Robot5beginEv+0xbc>
	}
	if(!Imu.begin()){
    418c:	8d e1       	ldi	r24, 0x1D	; 29
    418e:	98 e0       	ldi	r25, 0x08	; 8
    4190:	4a d0       	rcall	.+148    	; 0x4226 <_ZN9ImuSensor5beginEv>
    4192:	c8 2f       	mov	r28, r24
    4194:	81 11       	cpse	r24, r1
    4196:	06 c0       	rjmp	.+12     	; 0x41a4 <_ZN5Robot5beginEv+0x68>
		Serial.println("Unable to initialize IMU.");
    4198:	6d ee       	ldi	r22, 0xED	; 237
    419a:	72 e0       	ldi	r23, 0x02	; 2
    419c:	88 ef       	ldi	r24, 0xF8	; 248
    419e:	95 e0       	ldi	r25, 0x05	; 5
    41a0:	2a d2       	rcall	.+1108   	; 0x45f6 <_ZN5Print7printlnEPKc>
		return false;
    41a2:	2a c0       	rjmp	.+84     	; 0x41f8 <_ZN5Robot5beginEv+0xbc>
	}
	if(!Pressure.begin()){ //TODO automatically?
    41a4:	81 ef       	ldi	r24, 0xF1	; 241
    41a6:	97 e0       	ldi	r25, 0x07	; 7
    41a8:	1e d1       	rcall	.+572    	; 0x43e6 <_ZN14PressureSensor5beginEv>
    41aa:	c8 2f       	mov	r28, r24
    41ac:	81 11       	cpse	r24, r1
    41ae:	06 c0       	rjmp	.+12     	; 0x41bc <_ZN5Robot5beginEv+0x80>
		Serial.println("Unable to initialize Pressure Sensor.");
    41b0:	67 e0       	ldi	r22, 0x07	; 7
    41b2:	73 e0       	ldi	r23, 0x03	; 3
    41b4:	88 ef       	ldi	r24, 0xF8	; 248
    41b6:	95 e0       	ldi	r25, 0x05	; 5
    41b8:	1e d2       	rcall	.+1084   	; 0x45f6 <_ZN5Print7printlnEPKc>
		return false;
    41ba:	1e c0       	rjmp	.+60     	; 0x41f8 <_ZN5Robot5beginEv+0xbc>
	{
		
	}
	
	bool begin(){ //Override
		if(!rov.RegisterDevice(_id, this) || !rov.RegisterDevice(_enId, this)) return false;
    41bc:	6d ee       	ldi	r22, 0xED	; 237
    41be:	77 e0       	ldi	r23, 0x07	; 7
    41c0:	80 91 ef 07 	lds	r24, 0x07EF	; 0x8007ef <TestServo+0x2>
    41c4:	3c df       	rcall	.-392    	; 0x403e <_ZN5Robot14RegisterDeviceEhP7IDevice>
    41c6:	88 23       	and	r24, r24
    41c8:	89 f0       	breq	.+34     	; 0x41ec <_ZN5Robot5beginEv+0xb0>
    41ca:	6d ee       	ldi	r22, 0xED	; 237
    41cc:	77 e0       	ldi	r23, 0x07	; 7
    41ce:	80 91 f0 07 	lds	r24, 0x07F0	; 0x8007f0 <TestServo+0x3>
    41d2:	35 df       	rcall	.-406    	; 0x403e <_ZN5Robot14RegisterDeviceEhP7IDevice>
    41d4:	c8 2f       	mov	r28, r24
    41d6:	88 23       	and	r24, r24
    41d8:	49 f0       	breq	.+18     	; 0x41ec <_ZN5Robot5beginEv+0xb0>
		
		//Servo_A1_setMin(550);
		//Servo_A1_setMax(2400);
		//Servo_A1_setPulse(127);
		
		ServoA1.begin();
    41da:	8c ee       	ldi	r24, 0xEC	; 236
    41dc:	97 e0       	ldi	r25, 0x07	; 7
    41de:	b5 dd       	rcall	.-1174   	; 0x3d4a <_ZN8PcbServo5beginEv>
    41e0:	6c ed       	ldi	r22, 0xDC	; 220
		ServoA1.setPulse(1500);
    41e2:	75 e0       	ldi	r23, 0x05	; 5
    41e4:	8c ee       	ldi	r24, 0xEC	; 236
    41e6:	97 e0       	ldi	r25, 0x07	; 7
    41e8:	cc dd       	rcall	.-1128   	; 0x3d82 <_ZN8PcbServo8setPulseEj>
    41ea:	06 c0       	rjmp	.+12     	; 0x41f8 <_ZN5Robot5beginEv+0xbc>
    41ec:	6d e2       	ldi	r22, 0x2D	; 45
	} 
	if(!TestServo.begin()){
		Serial.println("Unable to initialize Servo.");
    41ee:	73 e0       	ldi	r23, 0x03	; 3
    41f0:	88 ef       	ldi	r24, 0xF8	; 248
    41f2:	95 e0       	ldi	r25, 0x05	; 5
    41f4:	00 d2       	rcall	.+1024   	; 0x45f6 <_ZN5Print7printlnEPKc>
    41f6:	c0 e0       	ldi	r28, 0x00	; 0
    41f8:	8c 2f       	mov	r24, r28
		return false;
    41fa:	cf 91       	pop	r28
	}
	
	return true;
}
    41fc:	08 95       	ret

000041fe <_ZN5Robot4LoopEv>:
    41fe:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
bool Robot::ReadTestBtn(){ //TODO remove
	return !((TestBtnPinPort & TestBtnPin) > 0);
}*/

void Robot::Loop(){
	Imu.Update(EtherComm::buffer + 3);
    4202:	70 91 01 02 	lds	r23, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    4206:	6d 5f       	subi	r22, 0xFD	; 253
    4208:	7f 4f       	sbci	r23, 0xFF	; 255
    420a:	8d e1       	ldi	r24, 0x1D	; 29
    420c:	98 e0       	ldi	r25, 0x08	; 8
    420e:	0a d0       	rcall	.+20     	; 0x4224 <_ZN9ImuSensor6UpdateEPh>
	Pressure.Update(EtherComm::buffer + 3);
    4210:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    4214:	70 91 01 02 	lds	r23, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    4218:	6d 5f       	subi	r22, 0xFD	; 253
    421a:	7f 4f       	sbci	r23, 0xFF	; 255
    421c:	81 ef       	ldi	r24, 0xF1	; 241
    421e:	97 e0       	ldi	r25, 0x07	; 7
    4220:	0b c1       	rjmp	.+534    	; 0x4438 <_ZN14PressureSensor6UpdateEPh>
    4222:	08 95       	ret

00004224 <_ZN9ImuSensor6UpdateEPh>:
		rov.RegisterDevice(tempId, this)
		&& rov.RegisterDevice(accelId, this)
		&& imu.begin();
}

void ImuSensor::Update(uint8_t* buffer){
    4224:	08 95       	ret

00004226 <_ZN9ImuSensor5beginEv>:

ImuSensor::ImuSensor(const uint8_t TempId, const uint8_t AccelId) : imu(55, 0x28), tempId(TempId), accelId(AccelId) {
	
}

bool ImuSensor::begin(){
    4226:	cf 93       	push	r28
    4228:	df 93       	push	r29
    422a:	ec 01       	movw	r28, r24
	return 
		rov.RegisterDevice(tempId, this)
    422c:	bc 01       	movw	r22, r24
    422e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4230:	06 df       	rcall	.-500    	; 0x403e <_ZN5Robot14RegisterDeviceEhP7IDevice>
		&& rov.RegisterDevice(accelId, this)
		&& imu.begin();
    4232:	88 23       	and	r24, r24
    4234:	51 f0       	breq	.+20     	; 0x424a <_ZN9ImuSensor5beginEv+0x24>
}

bool ImuSensor::begin(){
	return 
		rov.RegisterDevice(tempId, this)
		&& rov.RegisterDevice(accelId, this)
    4236:	be 01       	movw	r22, r28
    4238:	8e 85       	ldd	r24, Y+14	; 0x0e
    423a:	01 df       	rcall	.-510    	; 0x403e <_ZN5Robot14RegisterDeviceEhP7IDevice>
    423c:	88 23       	and	r24, r24
    423e:	29 f0       	breq	.+10     	; 0x424a <_ZN9ImuSensor5beginEv+0x24>
		&& imu.begin();
    4240:	6c e0       	ldi	r22, 0x0C	; 12
    4242:	ce 01       	movw	r24, r28
    4244:	02 96       	adiw	r24, 0x02	; 2
    4246:	0e 94 62 02 	call	0x4c4	; 0x4c4 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>
}
    424a:	df 91       	pop	r29
    424c:	cf 91       	pop	r28
    424e:	08 95       	ret

00004250 <_ZN9ImuSensor21ReadRegisterRequestedEhPh>:
	*buffer++ = *val++;
}

AdafruitImu::Vector<3> vector;

void ImuSensor::ReadRegisterRequested(uint8_t id, uint8_t* buffer){
    4250:	ef 92       	push	r14
    4252:	ff 92       	push	r15
    4254:	0f 93       	push	r16
    4256:	1f 93       	push	r17
    4258:	cf 93       	push	r28
    425a:	df 93       	push	r29
    425c:	cd b7       	in	r28, 0x3d	; 61
    425e:	de b7       	in	r29, 0x3e	; 62
    4260:	68 97       	sbiw	r28, 0x18	; 24
    4262:	0f b6       	in	r0, 0x3f	; 63
    4264:	f8 94       	cli
    4266:	de bf       	out	0x3e, r29	; 62
    4268:	0f be       	out	0x3f, r0	; 63
    426a:	cd bf       	out	0x3d, r28	; 61
    426c:	f6 2e       	mov	r15, r22
    426e:	8a 01       	movw	r16, r20
	if(id == tempId){
    4270:	dc 01       	movw	r26, r24
    4272:	1d 96       	adiw	r26, 0x0d	; 13
    4274:	ec 90       	ld	r14, X
    4276:	e6 12       	cpse	r14, r22
    4278:	0f c0       	rjmp	.+30     	; 0x4298 <_ZN9ImuSensor21ReadRegisterRequestedEhPh+0x48>
		buffer[0] = imu.getTemp();
    427a:	02 96       	adiw	r24, 0x02	; 2
    427c:	0e 94 cf 02 	call	0x59e	; 0x59e <_ZN15Adafruit_BNO0557getTempEv>
    4280:	f8 01       	movw	r30, r16
    4282:	80 83       	st	Z, r24
	virtual void CommandReceived(uint8_t id, const uint8_t* data, uint8_t len) = 0;
	virtual void Update(uint8_t* buffer) = 0;
	
protected:
	void inline SendCommand(uint8_t id, uint8_t len){
		EtherComm::buffer[2] = id;
    4284:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    4288:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    428c:	e2 82       	std	Z+2, r14	; 0x02
		EtherComm::SendCommand(CMD_UpdateDevice, len + 1);
    428e:	62 e0       	ldi	r22, 0x02	; 2
    4290:	83 e0       	ldi	r24, 0x03	; 3
    4292:	0e 94 c9 0b 	call	0x1792	; 0x1792 <_ZN9EtherComm11SendCommandEhh>
    4296:	71 c0       	rjmp	.+226    	; 0x437a <_ZN9ImuSensor21ReadRegisterRequestedEhPh+0x12a>
		SendCommand(id, 1);
	}else if(id == accelId){
    4298:	dc 01       	movw	r26, r24
    429a:	1e 96       	adiw	r26, 0x0e	; 14
    429c:	2c 91       	ld	r18, X
    429e:	62 13       	cpse	r22, r18
    42a0:	6c c0       	rjmp	.+216    	; 0x437a <_ZN9ImuSensor21ReadRegisterRequestedEhPh+0x12a>
		vector = imu.getVector(Adafruit_BNO055::VECTOR_ACCELEROMETER );
    42a2:	bc 01       	movw	r22, r24
    42a4:	6e 5f       	subi	r22, 0xFE	; 254
    42a6:	7f 4f       	sbci	r23, 0xFF	; 255
    42a8:	48 e0       	ldi	r20, 0x08	; 8
    42aa:	ce 01       	movw	r24, r28
    42ac:	01 96       	adiw	r24, 0x01	; 1
    42ae:	0e 94 25 03 	call	0x64a	; 0x64a <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
    42b2:	fe 01       	movw	r30, r28
    42b4:	31 96       	adiw	r30, 0x01	; 1
    42b6:	a3 e3       	ldi	r26, 0x33	; 51
    42b8:	ba e0       	ldi	r27, 0x0A	; 10
    42ba:	ce 01       	movw	r24, r28
    42bc:	0d 96       	adiw	r24, 0x0d	; 13
		}

		Vector& operator=(const Vector& v)
		{
			for (int x = 0; x < N; x++ )
			p_vec[x] = v.p_vec[x];
    42be:	41 91       	ld	r20, Z+
    42c0:	51 91       	ld	r21, Z+
    42c2:	61 91       	ld	r22, Z+
    42c4:	71 91       	ld	r23, Z+
    42c6:	4d 93       	st	X+, r20
    42c8:	5d 93       	st	X+, r21
    42ca:	6d 93       	st	X+, r22
    42cc:	7d 93       	st	X+, r23
			return ret;
		}

		Vector& operator=(const Vector& v)
		{
			for (int x = 0; x < N; x++ )
    42ce:	e8 17       	cp	r30, r24
    42d0:	f9 07       	cpc	r31, r25
    42d2:	a9 f7       	brne	.-22     	; 0x42be <_ZN9ImuSensor21ReadRegisterRequestedEhPh+0x6e>
		saveFloat(vector.x(), buffer + 0);
    42d4:	e3 e3       	ldi	r30, 0x33	; 51
    42d6:	fa e0       	ldi	r31, 0x0A	; 10
    42d8:	20 81       	ld	r18, Z
    42da:	51 81       	ldd	r21, Z+1	; 0x01
    42dc:	42 81       	ldd	r20, Z+2	; 0x02
    42de:	33 81       	ldd	r19, Z+3	; 0x03
    42e0:	82 2f       	mov	r24, r18
    42e2:	95 2f       	mov	r25, r21
    42e4:	a4 2f       	mov	r26, r20
    42e6:	b3 2f       	mov	r27, r19
    42e8:	8d 87       	std	Y+13, r24	; 0x0d
    42ea:	9e 87       	std	Y+14, r25	; 0x0e
    42ec:	af 87       	std	Y+15, r26	; 0x0f
    42ee:	b8 8b       	std	Y+16, r27	; 0x10
	
}

static void saveFloat(float f, uint8_t* buffer){ //TODO put in IRegister? Used in PressureSensor too
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    42f0:	d8 01       	movw	r26, r16
    42f2:	2c 93       	st	X, r18
	*buffer++ = *val++;
    42f4:	8e 85       	ldd	r24, Y+14	; 0x0e
    42f6:	11 96       	adiw	r26, 0x01	; 1
    42f8:	8c 93       	st	X, r24
    42fa:	11 97       	sbiw	r26, 0x01	; 1
	*buffer++ = *val++;
    42fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    42fe:	12 96       	adiw	r26, 0x02	; 2
    4300:	8c 93       	st	X, r24
    4302:	12 97       	sbiw	r26, 0x02	; 2
	*buffer++ = *val++;
    4304:	88 89       	ldd	r24, Y+16	; 0x10
    4306:	13 96       	adiw	r26, 0x03	; 3
    4308:	8c 93       	st	X, r24
    430a:	24 81       	ldd	r18, Z+4	; 0x04
    430c:	55 81       	ldd	r21, Z+5	; 0x05
    430e:	46 81       	ldd	r20, Z+6	; 0x06
    4310:	37 81       	ldd	r19, Z+7	; 0x07
    4312:	82 2f       	mov	r24, r18
    4314:	95 2f       	mov	r25, r21
    4316:	a4 2f       	mov	r26, r20
    4318:	b3 2f       	mov	r27, r19
    431a:	89 8b       	std	Y+17, r24	; 0x11
    431c:	9a 8b       	std	Y+18, r25	; 0x12
    431e:	ab 8b       	std	Y+19, r26	; 0x13
    4320:	bc 8b       	std	Y+20, r27	; 0x14
	
}

static void saveFloat(float f, uint8_t* buffer){ //TODO put in IRegister? Used in PressureSensor too
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    4322:	d8 01       	movw	r26, r16
    4324:	14 96       	adiw	r26, 0x04	; 4
    4326:	2c 93       	st	X, r18
    4328:	14 97       	sbiw	r26, 0x04	; 4
	*buffer++ = *val++;
    432a:	8a 89       	ldd	r24, Y+18	; 0x12
    432c:	15 96       	adiw	r26, 0x05	; 5
    432e:	8c 93       	st	X, r24
    4330:	15 97       	sbiw	r26, 0x05	; 5
	*buffer++ = *val++;
    4332:	8b 89       	ldd	r24, Y+19	; 0x13
    4334:	16 96       	adiw	r26, 0x06	; 6
    4336:	8c 93       	st	X, r24
    4338:	16 97       	sbiw	r26, 0x06	; 6
	*buffer++ = *val++;
    433a:	8c 89       	ldd	r24, Y+20	; 0x14
    433c:	17 96       	adiw	r26, 0x07	; 7
    433e:	8c 93       	st	X, r24
    4340:	20 85       	ldd	r18, Z+8	; 0x08
    4342:	51 85       	ldd	r21, Z+9	; 0x09
    4344:	42 85       	ldd	r20, Z+10	; 0x0a
    4346:	33 85       	ldd	r19, Z+11	; 0x0b
    4348:	82 2f       	mov	r24, r18
    434a:	95 2f       	mov	r25, r21
    434c:	a4 2f       	mov	r26, r20
    434e:	b3 2f       	mov	r27, r19
    4350:	8d 8b       	std	Y+21, r24	; 0x15
    4352:	9e 8b       	std	Y+22, r25	; 0x16
    4354:	af 8b       	std	Y+23, r26	; 0x17
    4356:	b8 8f       	std	Y+24, r27	; 0x18
	
}

static void saveFloat(float f, uint8_t* buffer){ //TODO put in IRegister? Used in PressureSensor too
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    4358:	f8 01       	movw	r30, r16
    435a:	20 87       	std	Z+8, r18	; 0x08
	*buffer++ = *val++;
    435c:	8e 89       	ldd	r24, Y+22	; 0x16
    435e:	81 87       	std	Z+9, r24	; 0x09
	*buffer++ = *val++;
    4360:	8f 89       	ldd	r24, Y+23	; 0x17
    4362:	82 87       	std	Z+10, r24	; 0x0a
	*buffer++ = *val++;
    4364:	88 8d       	ldd	r24, Y+24	; 0x18
    4366:	83 87       	std	Z+11, r24	; 0x0b
	virtual void CommandReceived(uint8_t id, const uint8_t* data, uint8_t len) = 0;
	virtual void Update(uint8_t* buffer) = 0;
	
protected:
	void inline SendCommand(uint8_t id, uint8_t len){
		EtherComm::buffer[2] = id;
    4368:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    436c:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    4370:	f2 82       	std	Z+2, r15	; 0x02
		EtherComm::SendCommand(CMD_UpdateDevice, len + 1);
    4372:	6d e0       	ldi	r22, 0x0D	; 13
    4374:	83 e0       	ldi	r24, 0x03	; 3
    4376:	0e 94 c9 0b 	call	0x1792	; 0x1792 <_ZN9EtherComm11SendCommandEhh>
	saveFloat(vector.x(), buffer + 14);
	saveFloat(vector.y(), buffer + 18);
	saveFloat(vector.z(), buffer + 22);
	
	return 1 + 1 + 6*4;*/
    437a:	68 96       	adiw	r28, 0x18	; 24
    437c:	0f b6       	in	r0, 0x3f	; 63
    437e:	f8 94       	cli
    4380:	de bf       	out	0x3e, r29	; 62
    4382:	0f be       	out	0x3f, r0	; 63
    4384:	cd bf       	out	0x3d, r28	; 61
    4386:	df 91       	pop	r29
    4388:	cf 91       	pop	r28
    438a:	1f 91       	pop	r17
    438c:	0f 91       	pop	r16
    438e:	ff 90       	pop	r15
    4390:	ef 90       	pop	r14
    4392:	08 95       	ret

00004394 <_ZN9ImuSensorC1Ehh>:
#define ID_TEMP 1
#define ID_ACCEL 2
//#include "../BNO055/utility/vector.h"
//Adafruit_BNO055 ImuSensor::imu;

ImuSensor::ImuSensor(const uint8_t TempId, const uint8_t AccelId) : imu(55, 0x28), tempId(TempId), accelId(AccelId) {
    4394:	ef 92       	push	r14
    4396:	ff 92       	push	r15
    4398:	0f 93       	push	r16
    439a:	1f 93       	push	r17
    439c:	cf 93       	push	r28
    439e:	df 93       	push	r29
    43a0:	ec 01       	movw	r28, r24
    43a2:	e6 2e       	mov	r14, r22
    43a4:	f4 2e       	mov	r15, r20
    43a6:	25 e6       	ldi	r18, 0x65	; 101
    43a8:	33 e0       	ldi	r19, 0x03	; 3
    43aa:	fc 01       	movw	r30, r24
    43ac:	21 93       	st	Z+, r18
    43ae:	31 93       	st	Z+, r19
    43b0:	cf 01       	movw	r24, r30
    43b2:	06 e9       	ldi	r16, 0x96	; 150
    43b4:	17 e0       	ldi	r17, 0x07	; 7
    43b6:	28 e2       	ldi	r18, 0x28	; 40
    43b8:	47 e3       	ldi	r20, 0x37	; 55
    43ba:	50 e0       	ldi	r21, 0x00	; 0
    43bc:	60 e0       	ldi	r22, 0x00	; 0
    43be:	70 e0       	ldi	r23, 0x00	; 0
    43c0:	0e 94 ed 01 	call	0x3da	; 0x3da <_ZN15Adafruit_BNO055C1ElhP7TwoWire>
    43c4:	ed 86       	std	Y+13, r14	; 0x0d
    43c6:	fe 86       	std	Y+14, r15	; 0x0e
	
}
    43c8:	df 91       	pop	r29
    43ca:	cf 91       	pop	r28
    43cc:	1f 91       	pop	r17
    43ce:	0f 91       	pop	r16
    43d0:	ff 90       	pop	r15
    43d2:	ef 90       	pop	r14
    43d4:	08 95       	ret

000043d6 <_GLOBAL__sub_I__ZN9ImuSensorC2Ehh>:
	template <uint8_t N> class Vector
	{
		public:
		Vector()
		{
			memset(p_vec, 0, sizeof(double)*N);
    43d6:	8c e0       	ldi	r24, 0x0C	; 12
    43d8:	e3 e3       	ldi	r30, 0x33	; 51
    43da:	fa e0       	ldi	r31, 0x0A	; 10
    43dc:	df 01       	movw	r26, r30
    43de:	1d 92       	st	X+, r1
    43e0:	8a 95       	dec	r24
    43e2:	e9 f7       	brne	.-6      	; 0x43de <_GLOBAL__sub_I__ZN9ImuSensorC2Ehh+0x8>
    43e4:	08 95       	ret

000043e6 <_ZN14PressureSensor5beginEv>:

PressureSensor::PressureSensor(const uint8_t id, HardwareTimer &timer) : sensor(timer), _id(id) {
	
}

bool PressureSensor::begin(){
    43e6:	1f 93       	push	r17
    43e8:	cf 93       	push	r28
    43ea:	df 93       	push	r29
    43ec:	ec 01       	movw	r28, r24
	if(!rov.RegisterDevice(_id, this)) return false;
    43ee:	bc 01       	movw	r22, r24
    43f0:	8a a5       	ldd	r24, Y+42	; 0x2a
    43f2:	25 de       	rcall	.-950    	; 0x403e <_ZN5Robot14RegisterDeviceEhP7IDevice>
    43f4:	18 2f       	mov	r17, r24
    43f6:	88 23       	and	r24, r24
    43f8:	61 f0       	breq	.+24     	; 0x4412 <_ZN14PressureSensor5beginEv+0x2c>
	if(sensor.begin()){
    43fa:	22 96       	adiw	r28, 0x02	; 2
    43fc:	ce 01       	movw	r24, r28
    43fe:	0e 94 ac 13 	call	0x2758	; 0x2758 <_ZN6MS58375beginEv>
    4402:	18 2f       	mov	r17, r24
    4404:	88 23       	and	r24, r24
    4406:	29 f0       	breq	.+10     	; 0x4412 <_ZN14PressureSensor5beginEv+0x2c>
		sensor.setModel(MS5837::MS5837_30BA);
    4408:	60 91 aa 02 	lds	r22, 0x02AA	; 0x8002aa <_ZN6MS583711MS5837_30BAE>
    440c:	ce 01       	movw	r24, r28
    440e:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <_ZN6MS58378setModelEh>
		//sensor.setFluidDensity(997); //Freshwater
		return true;
	}
	
	return false;
}
    4412:	81 2f       	mov	r24, r17
    4414:	df 91       	pop	r29
    4416:	cf 91       	pop	r28
    4418:	1f 91       	pop	r17
    441a:	08 95       	ret

0000441c <_ZN14PressureSensor21ReadRegisterRequestedEhPh>:
			reading = false;
		}
	}
}

void PressureSensor::ReadRegisterRequested(uint8_t id, uint8_t* buffer){
    441c:	cf 93       	push	r28
    441e:	df 93       	push	r29
	if(!reading){
    4420:	fc 01       	movw	r30, r24
    4422:	23 a5       	ldd	r18, Z+43	; 0x2b
    4424:	21 11       	cpse	r18, r1
    4426:	05 c0       	rjmp	.+10     	; 0x4432 <_ZN14PressureSensor21ReadRegisterRequestedEhPh+0x16>
    4428:	ec 01       	movw	r28, r24
		reading = sensor.startRead();
    442a:	02 96       	adiw	r24, 0x02	; 2
    442c:	0e 94 5f 0c 	call	0x18be	; 0x18be <_ZN6MS58379startReadEv>
    4430:	8b a7       	std	Y+43, r24	; 0x2b
	}
    4432:	df 91       	pop	r29
    4434:	cf 91       	pop	r28
    4436:	08 95       	ret

00004438 <_ZN14PressureSensor6UpdateEPh>:
	*buffer++ = *val++;
	*buffer++ = *val++;
	*buffer++ = *val++;
}

void PressureSensor::Update(uint8_t* buffer){
    4438:	cf 92       	push	r12
    443a:	df 92       	push	r13
    443c:	ef 92       	push	r14
    443e:	ff 92       	push	r15
    4440:	0f 93       	push	r16
    4442:	1f 93       	push	r17
    4444:	cf 93       	push	r28
    4446:	df 93       	push	r29
    4448:	cd b7       	in	r28, 0x3d	; 61
    444a:	de b7       	in	r29, 0x3e	; 62
    444c:	28 97       	sbiw	r28, 0x08	; 8
    444e:	0f b6       	in	r0, 0x3f	; 63
    4450:	f8 94       	cli
    4452:	de bf       	out	0x3e, r29	; 62
    4454:	0f be       	out	0x3f, r0	; 63
    4456:	cd bf       	out	0x3d, r28	; 61
	if(reading){
    4458:	fc 01       	movw	r30, r24
    445a:	23 a5       	ldd	r18, Z+43	; 0x2b
    445c:	22 23       	and	r18, r18
    445e:	09 f4       	brne	.+2      	; 0x4462 <_ZN14PressureSensor6UpdateEPh+0x2a>
    4460:	47 c0       	rjmp	.+142    	; 0x44f0 <_ZN14PressureSensor6UpdateEPh+0xb8>
    4462:	7b 01       	movw	r14, r22
    4464:	8c 01       	movw	r16, r24
		sensor.update();
    4466:	6c 01       	movw	r12, r24
    4468:	f2 e0       	ldi	r31, 0x02	; 2
    446a:	cf 0e       	add	r12, r31
    446c:	d1 1c       	adc	r13, r1
    446e:	c6 01       	movw	r24, r12
    4470:	0e 94 26 14 	call	0x284c	; 0x284c <_ZN6MS58376updateEv>
		if(sensor.finished()){
    4474:	c6 01       	movw	r24, r12
    4476:	0e 94 88 0c 	call	0x1910	; 0x1910 <_ZN6MS58378finishedEv>
    447a:	88 23       	and	r24, r24
    447c:	c9 f1       	breq	.+114    	; 0x44f0 <_ZN14PressureSensor6UpdateEPh+0xb8>
			saveFloat(sensor.pressure(), buffer);
    447e:	40 e0       	ldi	r20, 0x00	; 0
    4480:	50 e0       	ldi	r21, 0x00	; 0
    4482:	60 e8       	ldi	r22, 0x80	; 128
    4484:	7f e3       	ldi	r23, 0x3F	; 63
    4486:	c6 01       	movw	r24, r12
    4488:	0e 94 34 13 	call	0x2668	; 0x2668 <_ZN6MS58378pressureEf>
    448c:	26 2f       	mov	r18, r22
    448e:	46 2f       	mov	r20, r22
    4490:	57 2f       	mov	r21, r23
    4492:	68 2f       	mov	r22, r24
    4494:	79 2f       	mov	r23, r25
    4496:	49 83       	std	Y+1, r20	; 0x01
    4498:	5a 83       	std	Y+2, r21	; 0x02
    449a:	6b 83       	std	Y+3, r22	; 0x03
    449c:	7c 83       	std	Y+4, r23	; 0x04
	return false;
}

static void saveFloat(float f, uint8_t* buffer){ //TODO put in IRegister? Used in IMU too
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    449e:	f7 01       	movw	r30, r14
    44a0:	20 83       	st	Z, r18
	*buffer++ = *val++;
    44a2:	8a 81       	ldd	r24, Y+2	; 0x02
    44a4:	81 83       	std	Z+1, r24	; 0x01
	*buffer++ = *val++;
    44a6:	8b 81       	ldd	r24, Y+3	; 0x03
    44a8:	82 83       	std	Z+2, r24	; 0x02
	*buffer++ = *val++;
    44aa:	8c 81       	ldd	r24, Y+4	; 0x04
    44ac:	83 83       	std	Z+3, r24	; 0x03
void PressureSensor::Update(uint8_t* buffer){
	if(reading){
		sensor.update();
		if(sensor.finished()){
			saveFloat(sensor.pressure(), buffer);
			saveFloat(sensor.temperature(), buffer + 4);
    44ae:	c6 01       	movw	r24, r12
    44b0:	0e 94 65 13 	call	0x26ca	; 0x26ca <_ZN6MS583711temperatureEv>
    44b4:	26 2f       	mov	r18, r22
    44b6:	46 2f       	mov	r20, r22
    44b8:	57 2f       	mov	r21, r23
    44ba:	68 2f       	mov	r22, r24
    44bc:	79 2f       	mov	r23, r25
    44be:	4d 83       	std	Y+5, r20	; 0x05
    44c0:	5e 83       	std	Y+6, r21	; 0x06
    44c2:	6f 83       	std	Y+7, r22	; 0x07
    44c4:	78 87       	std	Y+8, r23	; 0x08
	return false;
}

static void saveFloat(float f, uint8_t* buffer){ //TODO put in IRegister? Used in IMU too
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    44c6:	f7 01       	movw	r30, r14
    44c8:	24 83       	std	Z+4, r18	; 0x04
	*buffer++ = *val++;
    44ca:	8e 81       	ldd	r24, Y+6	; 0x06
    44cc:	85 83       	std	Z+5, r24	; 0x05
	*buffer++ = *val++;
    44ce:	8f 81       	ldd	r24, Y+7	; 0x07
    44d0:	86 83       	std	Z+6, r24	; 0x06
	*buffer++ = *val++;
    44d2:	88 85       	ldd	r24, Y+8	; 0x08
    44d4:	87 83       	std	Z+7, r24	; 0x07
	if(reading){
		sensor.update();
		if(sensor.finished()){
			saveFloat(sensor.pressure(), buffer);
			saveFloat(sensor.temperature(), buffer + 4);
			SendCommand(_id, 8);
    44d6:	f8 01       	movw	r30, r16
    44d8:	82 a5       	ldd	r24, Z+42	; 0x2a
	virtual void CommandReceived(uint8_t id, const uint8_t* data, uint8_t len) = 0;
	virtual void Update(uint8_t* buffer) = 0;
	
protected:
	void inline SendCommand(uint8_t id, uint8_t len){
		EtherComm::buffer[2] = id;
    44da:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    44de:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    44e2:	82 83       	std	Z+2, r24	; 0x02
		EtherComm::SendCommand(CMD_UpdateDevice, len + 1);
    44e4:	69 e0       	ldi	r22, 0x09	; 9
    44e6:	83 e0       	ldi	r24, 0x03	; 3
    44e8:	0e 94 c9 0b 	call	0x1792	; 0x1792 <_ZN9EtherComm11SendCommandEhh>
			reading = false;
    44ec:	f8 01       	movw	r30, r16
    44ee:	13 a6       	std	Z+43, r1	; 0x2b
		}
	}
}
    44f0:	28 96       	adiw	r28, 0x08	; 8
    44f2:	0f b6       	in	r0, 0x3f	; 63
    44f4:	f8 94       	cli
    44f6:	de bf       	out	0x3e, r29	; 62
    44f8:	0f be       	out	0x3f, r0	; 63
    44fa:	cd bf       	out	0x3d, r28	; 61
    44fc:	df 91       	pop	r29
    44fe:	cf 91       	pop	r28
    4500:	1f 91       	pop	r17
    4502:	0f 91       	pop	r16
    4504:	ff 90       	pop	r15
    4506:	ef 90       	pop	r14
    4508:	df 90       	pop	r13
    450a:	cf 90       	pop	r12
    450c:	08 95       	ret

0000450e <_ZN14PressureSensorC1EhR13HardwareTimer>:
 */ 

#include "PressureSensor.h"
#include "../Robot.h"

PressureSensor::PressureSensor(const uint8_t id, HardwareTimer &timer) : sensor(timer), _id(id) {
    450e:	1f 93       	push	r17
    4510:	cf 93       	push	r28
    4512:	df 93       	push	r29
    4514:	ec 01       	movw	r28, r24
    4516:	16 2f       	mov	r17, r22
    4518:	21 e7       	ldi	r18, 0x71	; 113
    451a:	33 e0       	ldi	r19, 0x03	; 3
    451c:	fc 01       	movw	r30, r24
    451e:	21 93       	st	Z+, r18
    4520:	31 93       	st	Z+, r19
    4522:	cf 01       	movw	r24, r30
    4524:	ba 01       	movw	r22, r20
    4526:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <_ZN6MS5837C1ER13HardwareTimer>
    452a:	1a a7       	std	Y+42, r17	; 0x2a
	
}
    452c:	df 91       	pop	r29
    452e:	cf 91       	pop	r28
    4530:	1f 91       	pop	r17
    4532:	08 95       	ret

00004534 <_GLOBAL__sub_I_bno>:
	setup();
	
	while(true){
		loop();
	}
    4534:	0f 93       	push	r16
    4536:	1f 93       	push	r17
/* Set the delay between fresh samples */
#define BNO055_SAMPLERATE_DELAY_MS 100

// Check I2C device address and correct line below (by default address is 0x29 or 0x28)
//                                   id, address
Adafruit_BNO055 bno = Adafruit_BNO055(55, 0x28);
    4538:	06 e9       	ldi	r16, 0x96	; 150
    453a:	17 e0       	ldi	r17, 0x07	; 7
    453c:	28 e2       	ldi	r18, 0x28	; 40
    453e:	47 e3       	ldi	r20, 0x37	; 55
    4540:	50 e0       	ldi	r21, 0x00	; 0
    4542:	60 e0       	ldi	r22, 0x00	; 0
    4544:	70 e0       	ldi	r23, 0x00	; 0
    4546:	8f e3       	ldi	r24, 0x3F	; 63
    4548:	9a e0       	ldi	r25, 0x0A	; 10
    454a:	0e 94 ed 01 	call	0x3da	; 0x3da <_ZN15Adafruit_BNO055C1ElhP7TwoWire>
	setup();
	
	while(true){
		loop();
	}
    454e:	1f 91       	pop	r17
    4550:	0f 91       	pop	r16
    4552:	08 95       	ret

00004554 <_ZN5Print5writeEPKhj>:
}

uint16_t Print::print(char c)
{
  return write(c);
}
    4554:	cf 92       	push	r12
    4556:	df 92       	push	r13
    4558:	ef 92       	push	r14
    455a:	ff 92       	push	r15
    455c:	0f 93       	push	r16
    455e:	1f 93       	push	r17
    4560:	cf 93       	push	r28
    4562:	df 93       	push	r29
    4564:	41 15       	cp	r20, r1
    4566:	51 05       	cpc	r21, r1
    4568:	c1 f0       	breq	.+48     	; 0x459a <_ZN5Print5writeEPKhj+0x46>
    456a:	6a 01       	movw	r12, r20
    456c:	8c 01       	movw	r16, r24
    456e:	e6 2e       	mov	r14, r22
    4570:	f7 2e       	mov	r15, r23
    4572:	c0 e0       	ldi	r28, 0x00	; 0
    4574:	d0 e0       	ldi	r29, 0x00	; 0
    4576:	d7 01       	movw	r26, r14
    4578:	6d 91       	ld	r22, X+
    457a:	7d 01       	movw	r14, r26
    457c:	d8 01       	movw	r26, r16
    457e:	ed 91       	ld	r30, X+
    4580:	fc 91       	ld	r31, X
    4582:	01 90       	ld	r0, Z+
    4584:	f0 81       	ld	r31, Z
    4586:	e0 2d       	mov	r30, r0
    4588:	c8 01       	movw	r24, r16
    458a:	19 95       	eicall
    458c:	89 2b       	or	r24, r25
    458e:	39 f0       	breq	.+14     	; 0x459e <_ZN5Print5writeEPKhj+0x4a>
    4590:	21 96       	adiw	r28, 0x01	; 1
    4592:	cc 16       	cp	r12, r28
    4594:	dd 06       	cpc	r13, r29
    4596:	79 f7       	brne	.-34     	; 0x4576 <_ZN5Print5writeEPKhj+0x22>
    4598:	02 c0       	rjmp	.+4      	; 0x459e <_ZN5Print5writeEPKhj+0x4a>
    459a:	c0 e0       	ldi	r28, 0x00	; 0
    459c:	d0 e0       	ldi	r29, 0x00	; 0
    459e:	ce 01       	movw	r24, r28
    45a0:	df 91       	pop	r29
    45a2:	cf 91       	pop	r28
    45a4:	1f 91       	pop	r17
    45a6:	0f 91       	pop	r16
    45a8:	ff 90       	pop	r15
    45aa:	ef 90       	pop	r14
    45ac:	df 90       	pop	r13
    45ae:	cf 90       	pop	r12
    45b0:	08 95       	ret

000045b2 <_ZN5Print5printEPKc>:
    45b2:	61 15       	cp	r22, r1
    45b4:	71 05       	cpc	r23, r1
    45b6:	81 f0       	breq	.+32     	; 0x45d8 <_ZN5Print5printEPKc+0x26>
    45b8:	fb 01       	movw	r30, r22
    45ba:	01 90       	ld	r0, Z+
    45bc:	00 20       	and	r0, r0
    45be:	e9 f7       	brne	.-6      	; 0x45ba <_ZN5Print5printEPKc+0x8>
    45c0:	31 97       	sbiw	r30, 0x01	; 1
    45c2:	af 01       	movw	r20, r30
    45c4:	46 1b       	sub	r20, r22
    45c6:	57 0b       	sbc	r21, r23
    45c8:	dc 01       	movw	r26, r24
    45ca:	ed 91       	ld	r30, X+
    45cc:	fc 91       	ld	r31, X
    45ce:	02 80       	ldd	r0, Z+2	; 0x02
    45d0:	f3 81       	ldd	r31, Z+3	; 0x03
    45d2:	e0 2d       	mov	r30, r0
    45d4:	19 95       	eicall
    45d6:	08 95       	ret
    45d8:	80 e0       	ldi	r24, 0x00	; 0
    45da:	90 e0       	ldi	r25, 0x00	; 0
    45dc:	08 95       	ret

000045de <_ZN5Print7printlnEv>:
  //void clearWriteError() { setWriteError(0); }
  
  virtual uint16_t write(uint8_t) = 0;
  uint16_t write(const char *str) {
	  if (str == NULL) return 0;
	  return write((const uint8_t *)str, strlen(str));
    45de:	dc 01       	movw	r26, r24
    45e0:	ed 91       	ld	r30, X+
    45e2:	fc 91       	ld	r31, X
    45e4:	02 80       	ldd	r0, Z+2	; 0x02
    45e6:	f3 81       	ldd	r31, Z+3	; 0x03
    45e8:	e0 2d       	mov	r30, r0
    45ea:	42 e0       	ldi	r20, 0x02	; 2
    45ec:	50 e0       	ldi	r21, 0x00	; 0
    45ee:	69 e7       	ldi	r22, 0x79	; 121
    45f0:	73 e0       	ldi	r23, 0x03	; 3
    45f2:	19 95       	eicall
}
*/
uint16_t Print::println(void)
{
  return write("\r\n");
}
    45f4:	08 95       	ret

000045f6 <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}
*/
uint16_t Print::println(const char c[])
{
    45f6:	0f 93       	push	r16
    45f8:	1f 93       	push	r17
    45fa:	cf 93       	push	r28
    45fc:	df 93       	push	r29
    45fe:	ec 01       	movw	r28, r24
  uint16_t n = print(c);
    4600:	d8 df       	rcall	.-80     	; 0x45b2 <_ZN5Print5printEPKc>
    4602:	8c 01       	movw	r16, r24
  n += println();
    4604:	ce 01       	movw	r24, r28
    4606:	eb df       	rcall	.-42     	; 0x45de <_ZN5Print7printlnEv>
  return n;
}
    4608:	80 0f       	add	r24, r16
    460a:	91 1f       	adc	r25, r17
    460c:	df 91       	pop	r29
    460e:	cf 91       	pop	r28
    4610:	1f 91       	pop	r17
    4612:	0f 91       	pop	r16
    4614:	08 95       	ret

00004616 <__subsf3>:
    4616:	50 58       	subi	r21, 0x80	; 128

00004618 <__addsf3>:
    4618:	bb 27       	eor	r27, r27
    461a:	aa 27       	eor	r26, r26
    461c:	0e d0       	rcall	.+28     	; 0x463a <__addsf3x>
    461e:	70 c1       	rjmp	.+736    	; 0x4900 <__fp_round>
    4620:	61 d1       	rcall	.+706    	; 0x48e4 <__fp_pscA>
    4622:	30 f0       	brcs	.+12     	; 0x4630 <__addsf3+0x18>
    4624:	66 d1       	rcall	.+716    	; 0x48f2 <__fp_pscB>
    4626:	20 f0       	brcs	.+8      	; 0x4630 <__addsf3+0x18>
    4628:	31 f4       	brne	.+12     	; 0x4636 <__addsf3+0x1e>
    462a:	9f 3f       	cpi	r25, 0xFF	; 255
    462c:	11 f4       	brne	.+4      	; 0x4632 <__addsf3+0x1a>
    462e:	1e f4       	brtc	.+6      	; 0x4636 <__addsf3+0x1e>
    4630:	56 c1       	rjmp	.+684    	; 0x48de <__fp_nan>
    4632:	0e f4       	brtc	.+2      	; 0x4636 <__addsf3+0x1e>
    4634:	e0 95       	com	r30
    4636:	e7 fb       	bst	r30, 7
    4638:	4c c1       	rjmp	.+664    	; 0x48d2 <__fp_inf>

0000463a <__addsf3x>:
    463a:	e9 2f       	mov	r30, r25
    463c:	72 d1       	rcall	.+740    	; 0x4922 <__fp_split3>
    463e:	80 f3       	brcs	.-32     	; 0x4620 <__addsf3+0x8>
    4640:	ba 17       	cp	r27, r26
    4642:	62 07       	cpc	r22, r18
    4644:	73 07       	cpc	r23, r19
    4646:	84 07       	cpc	r24, r20
    4648:	95 07       	cpc	r25, r21
    464a:	18 f0       	brcs	.+6      	; 0x4652 <__addsf3x+0x18>
    464c:	71 f4       	brne	.+28     	; 0x466a <__addsf3x+0x30>
    464e:	9e f5       	brtc	.+102    	; 0x46b6 <__addsf3x+0x7c>
    4650:	8a c1       	rjmp	.+788    	; 0x4966 <__fp_zero>
    4652:	0e f4       	brtc	.+2      	; 0x4656 <__addsf3x+0x1c>
    4654:	e0 95       	com	r30
    4656:	0b 2e       	mov	r0, r27
    4658:	ba 2f       	mov	r27, r26
    465a:	a0 2d       	mov	r26, r0
    465c:	0b 01       	movw	r0, r22
    465e:	b9 01       	movw	r22, r18
    4660:	90 01       	movw	r18, r0
    4662:	0c 01       	movw	r0, r24
    4664:	ca 01       	movw	r24, r20
    4666:	a0 01       	movw	r20, r0
    4668:	11 24       	eor	r1, r1
    466a:	ff 27       	eor	r31, r31
    466c:	59 1b       	sub	r21, r25
    466e:	99 f0       	breq	.+38     	; 0x4696 <__addsf3x+0x5c>
    4670:	59 3f       	cpi	r21, 0xF9	; 249
    4672:	50 f4       	brcc	.+20     	; 0x4688 <__addsf3x+0x4e>
    4674:	50 3e       	cpi	r21, 0xE0	; 224
    4676:	68 f1       	brcs	.+90     	; 0x46d2 <__addsf3x+0x98>
    4678:	1a 16       	cp	r1, r26
    467a:	f0 40       	sbci	r31, 0x00	; 0
    467c:	a2 2f       	mov	r26, r18
    467e:	23 2f       	mov	r18, r19
    4680:	34 2f       	mov	r19, r20
    4682:	44 27       	eor	r20, r20
    4684:	58 5f       	subi	r21, 0xF8	; 248
    4686:	f3 cf       	rjmp	.-26     	; 0x466e <__addsf3x+0x34>
    4688:	46 95       	lsr	r20
    468a:	37 95       	ror	r19
    468c:	27 95       	ror	r18
    468e:	a7 95       	ror	r26
    4690:	f0 40       	sbci	r31, 0x00	; 0
    4692:	53 95       	inc	r21
    4694:	c9 f7       	brne	.-14     	; 0x4688 <__addsf3x+0x4e>
    4696:	7e f4       	brtc	.+30     	; 0x46b6 <__addsf3x+0x7c>
    4698:	1f 16       	cp	r1, r31
    469a:	ba 0b       	sbc	r27, r26
    469c:	62 0b       	sbc	r22, r18
    469e:	73 0b       	sbc	r23, r19
    46a0:	84 0b       	sbc	r24, r20
    46a2:	ba f0       	brmi	.+46     	; 0x46d2 <__addsf3x+0x98>
    46a4:	91 50       	subi	r25, 0x01	; 1
    46a6:	a1 f0       	breq	.+40     	; 0x46d0 <__addsf3x+0x96>
    46a8:	ff 0f       	add	r31, r31
    46aa:	bb 1f       	adc	r27, r27
    46ac:	66 1f       	adc	r22, r22
    46ae:	77 1f       	adc	r23, r23
    46b0:	88 1f       	adc	r24, r24
    46b2:	c2 f7       	brpl	.-16     	; 0x46a4 <__addsf3x+0x6a>
    46b4:	0e c0       	rjmp	.+28     	; 0x46d2 <__addsf3x+0x98>
    46b6:	ba 0f       	add	r27, r26
    46b8:	62 1f       	adc	r22, r18
    46ba:	73 1f       	adc	r23, r19
    46bc:	84 1f       	adc	r24, r20
    46be:	48 f4       	brcc	.+18     	; 0x46d2 <__addsf3x+0x98>
    46c0:	87 95       	ror	r24
    46c2:	77 95       	ror	r23
    46c4:	67 95       	ror	r22
    46c6:	b7 95       	ror	r27
    46c8:	f7 95       	ror	r31
    46ca:	9e 3f       	cpi	r25, 0xFE	; 254
    46cc:	08 f0       	brcs	.+2      	; 0x46d0 <__addsf3x+0x96>
    46ce:	b3 cf       	rjmp	.-154    	; 0x4636 <__addsf3+0x1e>
    46d0:	93 95       	inc	r25
    46d2:	88 0f       	add	r24, r24
    46d4:	08 f0       	brcs	.+2      	; 0x46d8 <__addsf3x+0x9e>
    46d6:	99 27       	eor	r25, r25
    46d8:	ee 0f       	add	r30, r30
    46da:	97 95       	ror	r25
    46dc:	87 95       	ror	r24
    46de:	08 95       	ret

000046e0 <__cmpsf2>:
    46e0:	d4 d0       	rcall	.+424    	; 0x488a <__fp_cmp>
    46e2:	08 f4       	brcc	.+2      	; 0x46e6 <__cmpsf2+0x6>
    46e4:	81 e0       	ldi	r24, 0x01	; 1
    46e6:	08 95       	ret

000046e8 <__divsf3>:
    46e8:	0c d0       	rcall	.+24     	; 0x4702 <__divsf3x>
    46ea:	0a c1       	rjmp	.+532    	; 0x4900 <__fp_round>
    46ec:	02 d1       	rcall	.+516    	; 0x48f2 <__fp_pscB>
    46ee:	40 f0       	brcs	.+16     	; 0x4700 <__divsf3+0x18>
    46f0:	f9 d0       	rcall	.+498    	; 0x48e4 <__fp_pscA>
    46f2:	30 f0       	brcs	.+12     	; 0x4700 <__divsf3+0x18>
    46f4:	21 f4       	brne	.+8      	; 0x46fe <__divsf3+0x16>
    46f6:	5f 3f       	cpi	r21, 0xFF	; 255
    46f8:	19 f0       	breq	.+6      	; 0x4700 <__divsf3+0x18>
    46fa:	eb c0       	rjmp	.+470    	; 0x48d2 <__fp_inf>
    46fc:	51 11       	cpse	r21, r1
    46fe:	34 c1       	rjmp	.+616    	; 0x4968 <__fp_szero>
    4700:	ee c0       	rjmp	.+476    	; 0x48de <__fp_nan>

00004702 <__divsf3x>:
    4702:	0f d1       	rcall	.+542    	; 0x4922 <__fp_split3>
    4704:	98 f3       	brcs	.-26     	; 0x46ec <__divsf3+0x4>

00004706 <__divsf3_pse>:
    4706:	99 23       	and	r25, r25
    4708:	c9 f3       	breq	.-14     	; 0x46fc <__divsf3+0x14>
    470a:	55 23       	and	r21, r21
    470c:	b1 f3       	breq	.-20     	; 0x46fa <__divsf3+0x12>
    470e:	95 1b       	sub	r25, r21
    4710:	55 0b       	sbc	r21, r21
    4712:	bb 27       	eor	r27, r27
    4714:	aa 27       	eor	r26, r26
    4716:	62 17       	cp	r22, r18
    4718:	73 07       	cpc	r23, r19
    471a:	84 07       	cpc	r24, r20
    471c:	38 f0       	brcs	.+14     	; 0x472c <__divsf3_pse+0x26>
    471e:	9f 5f       	subi	r25, 0xFF	; 255
    4720:	5f 4f       	sbci	r21, 0xFF	; 255
    4722:	22 0f       	add	r18, r18
    4724:	33 1f       	adc	r19, r19
    4726:	44 1f       	adc	r20, r20
    4728:	aa 1f       	adc	r26, r26
    472a:	a9 f3       	breq	.-22     	; 0x4716 <__divsf3_pse+0x10>
    472c:	33 d0       	rcall	.+102    	; 0x4794 <__divsf3_pse+0x8e>
    472e:	0e 2e       	mov	r0, r30
    4730:	3a f0       	brmi	.+14     	; 0x4740 <__divsf3_pse+0x3a>
    4732:	e0 e8       	ldi	r30, 0x80	; 128
    4734:	30 d0       	rcall	.+96     	; 0x4796 <__divsf3_pse+0x90>
    4736:	91 50       	subi	r25, 0x01	; 1
    4738:	50 40       	sbci	r21, 0x00	; 0
    473a:	e6 95       	lsr	r30
    473c:	00 1c       	adc	r0, r0
    473e:	ca f7       	brpl	.-14     	; 0x4732 <__divsf3_pse+0x2c>
    4740:	29 d0       	rcall	.+82     	; 0x4794 <__divsf3_pse+0x8e>
    4742:	fe 2f       	mov	r31, r30
    4744:	27 d0       	rcall	.+78     	; 0x4794 <__divsf3_pse+0x8e>
    4746:	66 0f       	add	r22, r22
    4748:	77 1f       	adc	r23, r23
    474a:	88 1f       	adc	r24, r24
    474c:	bb 1f       	adc	r27, r27
    474e:	26 17       	cp	r18, r22
    4750:	37 07       	cpc	r19, r23
    4752:	48 07       	cpc	r20, r24
    4754:	ab 07       	cpc	r26, r27
    4756:	b0 e8       	ldi	r27, 0x80	; 128
    4758:	09 f0       	breq	.+2      	; 0x475c <__divsf3_pse+0x56>
    475a:	bb 0b       	sbc	r27, r27
    475c:	80 2d       	mov	r24, r0
    475e:	bf 01       	movw	r22, r30
    4760:	ff 27       	eor	r31, r31
    4762:	93 58       	subi	r25, 0x83	; 131
    4764:	5f 4f       	sbci	r21, 0xFF	; 255
    4766:	2a f0       	brmi	.+10     	; 0x4772 <__divsf3_pse+0x6c>
    4768:	9e 3f       	cpi	r25, 0xFE	; 254
    476a:	51 05       	cpc	r21, r1
    476c:	68 f0       	brcs	.+26     	; 0x4788 <__divsf3_pse+0x82>
    476e:	b1 c0       	rjmp	.+354    	; 0x48d2 <__fp_inf>
    4770:	fb c0       	rjmp	.+502    	; 0x4968 <__fp_szero>
    4772:	5f 3f       	cpi	r21, 0xFF	; 255
    4774:	ec f3       	brlt	.-6      	; 0x4770 <__divsf3_pse+0x6a>
    4776:	98 3e       	cpi	r25, 0xE8	; 232
    4778:	dc f3       	brlt	.-10     	; 0x4770 <__divsf3_pse+0x6a>
    477a:	86 95       	lsr	r24
    477c:	77 95       	ror	r23
    477e:	67 95       	ror	r22
    4780:	b7 95       	ror	r27
    4782:	f7 95       	ror	r31
    4784:	9f 5f       	subi	r25, 0xFF	; 255
    4786:	c9 f7       	brne	.-14     	; 0x477a <__divsf3_pse+0x74>
    4788:	88 0f       	add	r24, r24
    478a:	91 1d       	adc	r25, r1
    478c:	96 95       	lsr	r25
    478e:	87 95       	ror	r24
    4790:	97 f9       	bld	r25, 7
    4792:	08 95       	ret
    4794:	e1 e0       	ldi	r30, 0x01	; 1
    4796:	66 0f       	add	r22, r22
    4798:	77 1f       	adc	r23, r23
    479a:	88 1f       	adc	r24, r24
    479c:	bb 1f       	adc	r27, r27
    479e:	62 17       	cp	r22, r18
    47a0:	73 07       	cpc	r23, r19
    47a2:	84 07       	cpc	r24, r20
    47a4:	ba 07       	cpc	r27, r26
    47a6:	20 f0       	brcs	.+8      	; 0x47b0 <__divsf3_pse+0xaa>
    47a8:	62 1b       	sub	r22, r18
    47aa:	73 0b       	sbc	r23, r19
    47ac:	84 0b       	sbc	r24, r20
    47ae:	ba 0b       	sbc	r27, r26
    47b0:	ee 1f       	adc	r30, r30
    47b2:	88 f7       	brcc	.-30     	; 0x4796 <__divsf3_pse+0x90>
    47b4:	e0 95       	com	r30
    47b6:	08 95       	ret

000047b8 <__fixunssfsi>:
    47b8:	bc d0       	rcall	.+376    	; 0x4932 <__fp_splitA>
    47ba:	88 f0       	brcs	.+34     	; 0x47de <__fixunssfsi+0x26>
    47bc:	9f 57       	subi	r25, 0x7F	; 127
    47be:	90 f0       	brcs	.+36     	; 0x47e4 <__fixunssfsi+0x2c>
    47c0:	b9 2f       	mov	r27, r25
    47c2:	99 27       	eor	r25, r25
    47c4:	b7 51       	subi	r27, 0x17	; 23
    47c6:	a0 f0       	brcs	.+40     	; 0x47f0 <__fixunssfsi+0x38>
    47c8:	d1 f0       	breq	.+52     	; 0x47fe <__fixunssfsi+0x46>
    47ca:	66 0f       	add	r22, r22
    47cc:	77 1f       	adc	r23, r23
    47ce:	88 1f       	adc	r24, r24
    47d0:	99 1f       	adc	r25, r25
    47d2:	1a f0       	brmi	.+6      	; 0x47da <__fixunssfsi+0x22>
    47d4:	ba 95       	dec	r27
    47d6:	c9 f7       	brne	.-14     	; 0x47ca <__fixunssfsi+0x12>
    47d8:	12 c0       	rjmp	.+36     	; 0x47fe <__fixunssfsi+0x46>
    47da:	b1 30       	cpi	r27, 0x01	; 1
    47dc:	81 f0       	breq	.+32     	; 0x47fe <__fixunssfsi+0x46>
    47de:	c3 d0       	rcall	.+390    	; 0x4966 <__fp_zero>
    47e0:	b1 e0       	ldi	r27, 0x01	; 1
    47e2:	08 95       	ret
    47e4:	c0 c0       	rjmp	.+384    	; 0x4966 <__fp_zero>
    47e6:	67 2f       	mov	r22, r23
    47e8:	78 2f       	mov	r23, r24
    47ea:	88 27       	eor	r24, r24
    47ec:	b8 5f       	subi	r27, 0xF8	; 248
    47ee:	39 f0       	breq	.+14     	; 0x47fe <__fixunssfsi+0x46>
    47f0:	b9 3f       	cpi	r27, 0xF9	; 249
    47f2:	cc f3       	brlt	.-14     	; 0x47e6 <__fixunssfsi+0x2e>
    47f4:	86 95       	lsr	r24
    47f6:	77 95       	ror	r23
    47f8:	67 95       	ror	r22
    47fa:	b3 95       	inc	r27
    47fc:	d9 f7       	brne	.-10     	; 0x47f4 <__fixunssfsi+0x3c>
    47fe:	3e f4       	brtc	.+14     	; 0x480e <__fixunssfsi+0x56>
    4800:	90 95       	com	r25
    4802:	80 95       	com	r24
    4804:	70 95       	com	r23
    4806:	61 95       	neg	r22
    4808:	7f 4f       	sbci	r23, 0xFF	; 255
    480a:	8f 4f       	sbci	r24, 0xFF	; 255
    480c:	9f 4f       	sbci	r25, 0xFF	; 255
    480e:	08 95       	ret

00004810 <__floatunsisf>:
    4810:	e8 94       	clt
    4812:	09 c0       	rjmp	.+18     	; 0x4826 <__floatsisf+0x12>

00004814 <__floatsisf>:
    4814:	97 fb       	bst	r25, 7
    4816:	3e f4       	brtc	.+14     	; 0x4826 <__floatsisf+0x12>
    4818:	90 95       	com	r25
    481a:	80 95       	com	r24
    481c:	70 95       	com	r23
    481e:	61 95       	neg	r22
    4820:	7f 4f       	sbci	r23, 0xFF	; 255
    4822:	8f 4f       	sbci	r24, 0xFF	; 255
    4824:	9f 4f       	sbci	r25, 0xFF	; 255
    4826:	99 23       	and	r25, r25
    4828:	a9 f0       	breq	.+42     	; 0x4854 <__floatsisf+0x40>
    482a:	f9 2f       	mov	r31, r25
    482c:	96 e9       	ldi	r25, 0x96	; 150
    482e:	bb 27       	eor	r27, r27
    4830:	93 95       	inc	r25
    4832:	f6 95       	lsr	r31
    4834:	87 95       	ror	r24
    4836:	77 95       	ror	r23
    4838:	67 95       	ror	r22
    483a:	b7 95       	ror	r27
    483c:	f1 11       	cpse	r31, r1
    483e:	f8 cf       	rjmp	.-16     	; 0x4830 <__floatsisf+0x1c>
    4840:	fa f4       	brpl	.+62     	; 0x4880 <__floatsisf+0x6c>
    4842:	bb 0f       	add	r27, r27
    4844:	11 f4       	brne	.+4      	; 0x484a <__floatsisf+0x36>
    4846:	60 ff       	sbrs	r22, 0
    4848:	1b c0       	rjmp	.+54     	; 0x4880 <__floatsisf+0x6c>
    484a:	6f 5f       	subi	r22, 0xFF	; 255
    484c:	7f 4f       	sbci	r23, 0xFF	; 255
    484e:	8f 4f       	sbci	r24, 0xFF	; 255
    4850:	9f 4f       	sbci	r25, 0xFF	; 255
    4852:	16 c0       	rjmp	.+44     	; 0x4880 <__floatsisf+0x6c>
    4854:	88 23       	and	r24, r24
    4856:	11 f0       	breq	.+4      	; 0x485c <__floatsisf+0x48>
    4858:	96 e9       	ldi	r25, 0x96	; 150
    485a:	11 c0       	rjmp	.+34     	; 0x487e <__floatsisf+0x6a>
    485c:	77 23       	and	r23, r23
    485e:	21 f0       	breq	.+8      	; 0x4868 <__floatsisf+0x54>
    4860:	9e e8       	ldi	r25, 0x8E	; 142
    4862:	87 2f       	mov	r24, r23
    4864:	76 2f       	mov	r23, r22
    4866:	05 c0       	rjmp	.+10     	; 0x4872 <__floatsisf+0x5e>
    4868:	66 23       	and	r22, r22
    486a:	71 f0       	breq	.+28     	; 0x4888 <__floatsisf+0x74>
    486c:	96 e8       	ldi	r25, 0x86	; 134
    486e:	86 2f       	mov	r24, r22
    4870:	70 e0       	ldi	r23, 0x00	; 0
    4872:	60 e0       	ldi	r22, 0x00	; 0
    4874:	2a f0       	brmi	.+10     	; 0x4880 <__floatsisf+0x6c>
    4876:	9a 95       	dec	r25
    4878:	66 0f       	add	r22, r22
    487a:	77 1f       	adc	r23, r23
    487c:	88 1f       	adc	r24, r24
    487e:	da f7       	brpl	.-10     	; 0x4876 <__floatsisf+0x62>
    4880:	88 0f       	add	r24, r24
    4882:	96 95       	lsr	r25
    4884:	87 95       	ror	r24
    4886:	97 f9       	bld	r25, 7
    4888:	08 95       	ret

0000488a <__fp_cmp>:
    488a:	99 0f       	add	r25, r25
    488c:	00 08       	sbc	r0, r0
    488e:	55 0f       	add	r21, r21
    4890:	aa 0b       	sbc	r26, r26
    4892:	e0 e8       	ldi	r30, 0x80	; 128
    4894:	fe ef       	ldi	r31, 0xFE	; 254
    4896:	16 16       	cp	r1, r22
    4898:	17 06       	cpc	r1, r23
    489a:	e8 07       	cpc	r30, r24
    489c:	f9 07       	cpc	r31, r25
    489e:	c0 f0       	brcs	.+48     	; 0x48d0 <__fp_cmp+0x46>
    48a0:	12 16       	cp	r1, r18
    48a2:	13 06       	cpc	r1, r19
    48a4:	e4 07       	cpc	r30, r20
    48a6:	f5 07       	cpc	r31, r21
    48a8:	98 f0       	brcs	.+38     	; 0x48d0 <__fp_cmp+0x46>
    48aa:	62 1b       	sub	r22, r18
    48ac:	73 0b       	sbc	r23, r19
    48ae:	84 0b       	sbc	r24, r20
    48b0:	95 0b       	sbc	r25, r21
    48b2:	39 f4       	brne	.+14     	; 0x48c2 <__fp_cmp+0x38>
    48b4:	0a 26       	eor	r0, r26
    48b6:	61 f0       	breq	.+24     	; 0x48d0 <__fp_cmp+0x46>
    48b8:	23 2b       	or	r18, r19
    48ba:	24 2b       	or	r18, r20
    48bc:	25 2b       	or	r18, r21
    48be:	21 f4       	brne	.+8      	; 0x48c8 <__fp_cmp+0x3e>
    48c0:	08 95       	ret
    48c2:	0a 26       	eor	r0, r26
    48c4:	09 f4       	brne	.+2      	; 0x48c8 <__fp_cmp+0x3e>
    48c6:	a1 40       	sbci	r26, 0x01	; 1
    48c8:	a6 95       	lsr	r26
    48ca:	8f ef       	ldi	r24, 0xFF	; 255
    48cc:	81 1d       	adc	r24, r1
    48ce:	81 1d       	adc	r24, r1
    48d0:	08 95       	ret

000048d2 <__fp_inf>:
    48d2:	97 f9       	bld	r25, 7
    48d4:	9f 67       	ori	r25, 0x7F	; 127
    48d6:	80 e8       	ldi	r24, 0x80	; 128
    48d8:	70 e0       	ldi	r23, 0x00	; 0
    48da:	60 e0       	ldi	r22, 0x00	; 0
    48dc:	08 95       	ret

000048de <__fp_nan>:
    48de:	9f ef       	ldi	r25, 0xFF	; 255
    48e0:	80 ec       	ldi	r24, 0xC0	; 192
    48e2:	08 95       	ret

000048e4 <__fp_pscA>:
    48e4:	00 24       	eor	r0, r0
    48e6:	0a 94       	dec	r0
    48e8:	16 16       	cp	r1, r22
    48ea:	17 06       	cpc	r1, r23
    48ec:	18 06       	cpc	r1, r24
    48ee:	09 06       	cpc	r0, r25
    48f0:	08 95       	ret

000048f2 <__fp_pscB>:
    48f2:	00 24       	eor	r0, r0
    48f4:	0a 94       	dec	r0
    48f6:	12 16       	cp	r1, r18
    48f8:	13 06       	cpc	r1, r19
    48fa:	14 06       	cpc	r1, r20
    48fc:	05 06       	cpc	r0, r21
    48fe:	08 95       	ret

00004900 <__fp_round>:
    4900:	09 2e       	mov	r0, r25
    4902:	03 94       	inc	r0
    4904:	00 0c       	add	r0, r0
    4906:	11 f4       	brne	.+4      	; 0x490c <__fp_round+0xc>
    4908:	88 23       	and	r24, r24
    490a:	52 f0       	brmi	.+20     	; 0x4920 <__fp_round+0x20>
    490c:	bb 0f       	add	r27, r27
    490e:	40 f4       	brcc	.+16     	; 0x4920 <__fp_round+0x20>
    4910:	bf 2b       	or	r27, r31
    4912:	11 f4       	brne	.+4      	; 0x4918 <__fp_round+0x18>
    4914:	60 ff       	sbrs	r22, 0
    4916:	04 c0       	rjmp	.+8      	; 0x4920 <__fp_round+0x20>
    4918:	6f 5f       	subi	r22, 0xFF	; 255
    491a:	7f 4f       	sbci	r23, 0xFF	; 255
    491c:	8f 4f       	sbci	r24, 0xFF	; 255
    491e:	9f 4f       	sbci	r25, 0xFF	; 255
    4920:	08 95       	ret

00004922 <__fp_split3>:
    4922:	57 fd       	sbrc	r21, 7
    4924:	90 58       	subi	r25, 0x80	; 128
    4926:	44 0f       	add	r20, r20
    4928:	55 1f       	adc	r21, r21
    492a:	59 f0       	breq	.+22     	; 0x4942 <__fp_splitA+0x10>
    492c:	5f 3f       	cpi	r21, 0xFF	; 255
    492e:	71 f0       	breq	.+28     	; 0x494c <__fp_splitA+0x1a>
    4930:	47 95       	ror	r20

00004932 <__fp_splitA>:
    4932:	88 0f       	add	r24, r24
    4934:	97 fb       	bst	r25, 7
    4936:	99 1f       	adc	r25, r25
    4938:	61 f0       	breq	.+24     	; 0x4952 <__fp_splitA+0x20>
    493a:	9f 3f       	cpi	r25, 0xFF	; 255
    493c:	79 f0       	breq	.+30     	; 0x495c <__fp_splitA+0x2a>
    493e:	87 95       	ror	r24
    4940:	08 95       	ret
    4942:	12 16       	cp	r1, r18
    4944:	13 06       	cpc	r1, r19
    4946:	14 06       	cpc	r1, r20
    4948:	55 1f       	adc	r21, r21
    494a:	f2 cf       	rjmp	.-28     	; 0x4930 <__fp_split3+0xe>
    494c:	46 95       	lsr	r20
    494e:	f1 df       	rcall	.-30     	; 0x4932 <__fp_splitA>
    4950:	08 c0       	rjmp	.+16     	; 0x4962 <__fp_splitA+0x30>
    4952:	16 16       	cp	r1, r22
    4954:	17 06       	cpc	r1, r23
    4956:	18 06       	cpc	r1, r24
    4958:	99 1f       	adc	r25, r25
    495a:	f1 cf       	rjmp	.-30     	; 0x493e <__fp_splitA+0xc>
    495c:	86 95       	lsr	r24
    495e:	71 05       	cpc	r23, r1
    4960:	61 05       	cpc	r22, r1
    4962:	08 94       	sec
    4964:	08 95       	ret

00004966 <__fp_zero>:
    4966:	e8 94       	clt

00004968 <__fp_szero>:
    4968:	bb 27       	eor	r27, r27
    496a:	66 27       	eor	r22, r22
    496c:	77 27       	eor	r23, r23
    496e:	cb 01       	movw	r24, r22
    4970:	97 f9       	bld	r25, 7
    4972:	08 95       	ret

00004974 <__gesf2>:
    4974:	8a df       	rcall	.-236    	; 0x488a <__fp_cmp>
    4976:	08 f4       	brcc	.+2      	; 0x497a <__gesf2+0x6>
    4978:	8f ef       	ldi	r24, 0xFF	; 255
    497a:	08 95       	ret

0000497c <__mulsf3>:
    497c:	0b d0       	rcall	.+22     	; 0x4994 <__mulsf3x>
    497e:	c0 cf       	rjmp	.-128    	; 0x4900 <__fp_round>
    4980:	b1 df       	rcall	.-158    	; 0x48e4 <__fp_pscA>
    4982:	28 f0       	brcs	.+10     	; 0x498e <__mulsf3+0x12>
    4984:	b6 df       	rcall	.-148    	; 0x48f2 <__fp_pscB>
    4986:	18 f0       	brcs	.+6      	; 0x498e <__mulsf3+0x12>
    4988:	95 23       	and	r25, r21
    498a:	09 f0       	breq	.+2      	; 0x498e <__mulsf3+0x12>
    498c:	a2 cf       	rjmp	.-188    	; 0x48d2 <__fp_inf>
    498e:	a7 cf       	rjmp	.-178    	; 0x48de <__fp_nan>
    4990:	11 24       	eor	r1, r1
    4992:	ea cf       	rjmp	.-44     	; 0x4968 <__fp_szero>

00004994 <__mulsf3x>:
    4994:	c6 df       	rcall	.-116    	; 0x4922 <__fp_split3>
    4996:	a0 f3       	brcs	.-24     	; 0x4980 <__mulsf3+0x4>

00004998 <__mulsf3_pse>:
    4998:	95 9f       	mul	r25, r21
    499a:	d1 f3       	breq	.-12     	; 0x4990 <__mulsf3+0x14>
    499c:	95 0f       	add	r25, r21
    499e:	50 e0       	ldi	r21, 0x00	; 0
    49a0:	55 1f       	adc	r21, r21
    49a2:	62 9f       	mul	r22, r18
    49a4:	f0 01       	movw	r30, r0
    49a6:	72 9f       	mul	r23, r18
    49a8:	bb 27       	eor	r27, r27
    49aa:	f0 0d       	add	r31, r0
    49ac:	b1 1d       	adc	r27, r1
    49ae:	63 9f       	mul	r22, r19
    49b0:	aa 27       	eor	r26, r26
    49b2:	f0 0d       	add	r31, r0
    49b4:	b1 1d       	adc	r27, r1
    49b6:	aa 1f       	adc	r26, r26
    49b8:	64 9f       	mul	r22, r20
    49ba:	66 27       	eor	r22, r22
    49bc:	b0 0d       	add	r27, r0
    49be:	a1 1d       	adc	r26, r1
    49c0:	66 1f       	adc	r22, r22
    49c2:	82 9f       	mul	r24, r18
    49c4:	22 27       	eor	r18, r18
    49c6:	b0 0d       	add	r27, r0
    49c8:	a1 1d       	adc	r26, r1
    49ca:	62 1f       	adc	r22, r18
    49cc:	73 9f       	mul	r23, r19
    49ce:	b0 0d       	add	r27, r0
    49d0:	a1 1d       	adc	r26, r1
    49d2:	62 1f       	adc	r22, r18
    49d4:	83 9f       	mul	r24, r19
    49d6:	a0 0d       	add	r26, r0
    49d8:	61 1d       	adc	r22, r1
    49da:	22 1f       	adc	r18, r18
    49dc:	74 9f       	mul	r23, r20
    49de:	33 27       	eor	r19, r19
    49e0:	a0 0d       	add	r26, r0
    49e2:	61 1d       	adc	r22, r1
    49e4:	23 1f       	adc	r18, r19
    49e6:	84 9f       	mul	r24, r20
    49e8:	60 0d       	add	r22, r0
    49ea:	21 1d       	adc	r18, r1
    49ec:	82 2f       	mov	r24, r18
    49ee:	76 2f       	mov	r23, r22
    49f0:	6a 2f       	mov	r22, r26
    49f2:	11 24       	eor	r1, r1
    49f4:	9f 57       	subi	r25, 0x7F	; 127
    49f6:	50 40       	sbci	r21, 0x00	; 0
    49f8:	8a f0       	brmi	.+34     	; 0x4a1c <__mulsf3_pse+0x84>
    49fa:	e1 f0       	breq	.+56     	; 0x4a34 <__mulsf3_pse+0x9c>
    49fc:	88 23       	and	r24, r24
    49fe:	4a f0       	brmi	.+18     	; 0x4a12 <__mulsf3_pse+0x7a>
    4a00:	ee 0f       	add	r30, r30
    4a02:	ff 1f       	adc	r31, r31
    4a04:	bb 1f       	adc	r27, r27
    4a06:	66 1f       	adc	r22, r22
    4a08:	77 1f       	adc	r23, r23
    4a0a:	88 1f       	adc	r24, r24
    4a0c:	91 50       	subi	r25, 0x01	; 1
    4a0e:	50 40       	sbci	r21, 0x00	; 0
    4a10:	a9 f7       	brne	.-22     	; 0x49fc <__mulsf3_pse+0x64>
    4a12:	9e 3f       	cpi	r25, 0xFE	; 254
    4a14:	51 05       	cpc	r21, r1
    4a16:	70 f0       	brcs	.+28     	; 0x4a34 <__mulsf3_pse+0x9c>
    4a18:	5c cf       	rjmp	.-328    	; 0x48d2 <__fp_inf>
    4a1a:	a6 cf       	rjmp	.-180    	; 0x4968 <__fp_szero>
    4a1c:	5f 3f       	cpi	r21, 0xFF	; 255
    4a1e:	ec f3       	brlt	.-6      	; 0x4a1a <__mulsf3_pse+0x82>
    4a20:	98 3e       	cpi	r25, 0xE8	; 232
    4a22:	dc f3       	brlt	.-10     	; 0x4a1a <__mulsf3_pse+0x82>
    4a24:	86 95       	lsr	r24
    4a26:	77 95       	ror	r23
    4a28:	67 95       	ror	r22
    4a2a:	b7 95       	ror	r27
    4a2c:	f7 95       	ror	r31
    4a2e:	e7 95       	ror	r30
    4a30:	9f 5f       	subi	r25, 0xFF	; 255
    4a32:	c1 f7       	brne	.-16     	; 0x4a24 <__mulsf3_pse+0x8c>
    4a34:	fe 2b       	or	r31, r30
    4a36:	88 0f       	add	r24, r24
    4a38:	91 1d       	adc	r25, r1
    4a3a:	96 95       	lsr	r25
    4a3c:	87 95       	ror	r24
    4a3e:	97 f9       	bld	r25, 7
    4a40:	08 95       	ret

00004a42 <__mulsi3>:
    4a42:	db 01       	movw	r26, r22
    4a44:	8f 93       	push	r24
    4a46:	9f 93       	push	r25
    4a48:	35 d0       	rcall	.+106    	; 0x4ab4 <__muluhisi3>
    4a4a:	bf 91       	pop	r27
    4a4c:	af 91       	pop	r26
    4a4e:	a2 9f       	mul	r26, r18
    4a50:	80 0d       	add	r24, r0
    4a52:	91 1d       	adc	r25, r1
    4a54:	a3 9f       	mul	r26, r19
    4a56:	90 0d       	add	r25, r0
    4a58:	b2 9f       	mul	r27, r18
    4a5a:	90 0d       	add	r25, r0
    4a5c:	11 24       	eor	r1, r1
    4a5e:	08 95       	ret

00004a60 <__udivmodsi4>:
    4a60:	a1 e2       	ldi	r26, 0x21	; 33
    4a62:	1a 2e       	mov	r1, r26
    4a64:	aa 1b       	sub	r26, r26
    4a66:	bb 1b       	sub	r27, r27
    4a68:	fd 01       	movw	r30, r26
    4a6a:	0d c0       	rjmp	.+26     	; 0x4a86 <__udivmodsi4_ep>

00004a6c <__udivmodsi4_loop>:
    4a6c:	aa 1f       	adc	r26, r26
    4a6e:	bb 1f       	adc	r27, r27
    4a70:	ee 1f       	adc	r30, r30
    4a72:	ff 1f       	adc	r31, r31
    4a74:	a2 17       	cp	r26, r18
    4a76:	b3 07       	cpc	r27, r19
    4a78:	e4 07       	cpc	r30, r20
    4a7a:	f5 07       	cpc	r31, r21
    4a7c:	20 f0       	brcs	.+8      	; 0x4a86 <__udivmodsi4_ep>
    4a7e:	a2 1b       	sub	r26, r18
    4a80:	b3 0b       	sbc	r27, r19
    4a82:	e4 0b       	sbc	r30, r20
    4a84:	f5 0b       	sbc	r31, r21

00004a86 <__udivmodsi4_ep>:
    4a86:	66 1f       	adc	r22, r22
    4a88:	77 1f       	adc	r23, r23
    4a8a:	88 1f       	adc	r24, r24
    4a8c:	99 1f       	adc	r25, r25
    4a8e:	1a 94       	dec	r1
    4a90:	69 f7       	brne	.-38     	; 0x4a6c <__udivmodsi4_loop>
    4a92:	60 95       	com	r22
    4a94:	70 95       	com	r23
    4a96:	80 95       	com	r24
    4a98:	90 95       	com	r25
    4a9a:	9b 01       	movw	r18, r22
    4a9c:	ac 01       	movw	r20, r24
    4a9e:	bd 01       	movw	r22, r26
    4aa0:	cf 01       	movw	r24, r30
    4aa2:	08 95       	ret

00004aa4 <__tablejump2__>:
    4aa4:	ee 0f       	add	r30, r30
    4aa6:	ff 1f       	adc	r31, r31
    4aa8:	88 1f       	adc	r24, r24
    4aaa:	8b bf       	out	0x3b, r24	; 59
    4aac:	07 90       	elpm	r0, Z+
    4aae:	f6 91       	elpm	r31, Z
    4ab0:	e0 2d       	mov	r30, r0
    4ab2:	19 94       	eijmp

00004ab4 <__muluhisi3>:
    4ab4:	bb d0       	rcall	.+374    	; 0x4c2c <__umulhisi3>
    4ab6:	a5 9f       	mul	r26, r21
    4ab8:	90 0d       	add	r25, r0
    4aba:	b4 9f       	mul	r27, r20
    4abc:	90 0d       	add	r25, r0
    4abe:	a4 9f       	mul	r26, r20
    4ac0:	80 0d       	add	r24, r0
    4ac2:	91 1d       	adc	r25, r1
    4ac4:	11 24       	eor	r1, r1
    4ac6:	08 95       	ret

00004ac8 <__muldi3>:
    4ac8:	df 93       	push	r29
    4aca:	cf 93       	push	r28
    4acc:	1f 93       	push	r17
    4ace:	0f 93       	push	r16
    4ad0:	9a 9d       	mul	r25, r10
    4ad2:	f0 2d       	mov	r31, r0
    4ad4:	21 9f       	mul	r18, r17
    4ad6:	f0 0d       	add	r31, r0
    4ad8:	8b 9d       	mul	r24, r11
    4ada:	f0 0d       	add	r31, r0
    4adc:	8a 9d       	mul	r24, r10
    4ade:	e0 2d       	mov	r30, r0
    4ae0:	f1 0d       	add	r31, r1
    4ae2:	03 9f       	mul	r16, r19
    4ae4:	f0 0d       	add	r31, r0
    4ae6:	02 9f       	mul	r16, r18
    4ae8:	e0 0d       	add	r30, r0
    4aea:	f1 1d       	adc	r31, r1
    4aec:	4e 9d       	mul	r20, r14
    4aee:	e0 0d       	add	r30, r0
    4af0:	f1 1d       	adc	r31, r1
    4af2:	5e 9d       	mul	r21, r14
    4af4:	f0 0d       	add	r31, r0
    4af6:	4f 9d       	mul	r20, r15
    4af8:	f0 0d       	add	r31, r0
    4afa:	7f 93       	push	r23
    4afc:	6f 93       	push	r22
    4afe:	bf 92       	push	r11
    4b00:	af 92       	push	r10
    4b02:	5f 93       	push	r21
    4b04:	4f 93       	push	r20
    4b06:	d5 01       	movw	r26, r10
    4b08:	91 d0       	rcall	.+290    	; 0x4c2c <__umulhisi3>
    4b0a:	8b 01       	movw	r16, r22
    4b0c:	ac 01       	movw	r20, r24
    4b0e:	d7 01       	movw	r26, r14
    4b10:	8d d0       	rcall	.+282    	; 0x4c2c <__umulhisi3>
    4b12:	eb 01       	movw	r28, r22
    4b14:	e8 0f       	add	r30, r24
    4b16:	f9 1f       	adc	r31, r25
    4b18:	d6 01       	movw	r26, r12
    4b1a:	1f d0       	rcall	.+62     	; 0x4b5a <__muldi3_6>
    4b1c:	2f 91       	pop	r18
    4b1e:	3f 91       	pop	r19
    4b20:	d6 01       	movw	r26, r12
    4b22:	84 d0       	rcall	.+264    	; 0x4c2c <__umulhisi3>
    4b24:	c6 0f       	add	r28, r22
    4b26:	d7 1f       	adc	r29, r23
    4b28:	e8 1f       	adc	r30, r24
    4b2a:	f9 1f       	adc	r31, r25
    4b2c:	af 91       	pop	r26
    4b2e:	bf 91       	pop	r27
    4b30:	14 d0       	rcall	.+40     	; 0x4b5a <__muldi3_6>
    4b32:	2f 91       	pop	r18
    4b34:	3f 91       	pop	r19
    4b36:	7a d0       	rcall	.+244    	; 0x4c2c <__umulhisi3>
    4b38:	c6 0f       	add	r28, r22
    4b3a:	d7 1f       	adc	r29, r23
    4b3c:	e8 1f       	adc	r30, r24
    4b3e:	f9 1f       	adc	r31, r25
    4b40:	d6 01       	movw	r26, r12
    4b42:	74 d0       	rcall	.+232    	; 0x4c2c <__umulhisi3>
    4b44:	e6 0f       	add	r30, r22
    4b46:	f7 1f       	adc	r31, r23
    4b48:	98 01       	movw	r18, r16
    4b4a:	be 01       	movw	r22, r28
    4b4c:	cf 01       	movw	r24, r30
    4b4e:	11 24       	eor	r1, r1
    4b50:	0f 91       	pop	r16
    4b52:	1f 91       	pop	r17
    4b54:	cf 91       	pop	r28
    4b56:	df 91       	pop	r29
    4b58:	08 95       	ret

00004b5a <__muldi3_6>:
    4b5a:	68 d0       	rcall	.+208    	; 0x4c2c <__umulhisi3>
    4b5c:	46 0f       	add	r20, r22
    4b5e:	57 1f       	adc	r21, r23
    4b60:	c8 1f       	adc	r28, r24
    4b62:	d9 1f       	adc	r29, r25
    4b64:	08 f4       	brcc	.+2      	; 0x4b68 <__muldi3_6+0xe>
    4b66:	31 96       	adiw	r30, 0x01	; 1
    4b68:	08 95       	ret

00004b6a <__ashldi3>:
    4b6a:	0f 93       	push	r16
    4b6c:	08 30       	cpi	r16, 0x08	; 8
    4b6e:	90 f0       	brcs	.+36     	; 0x4b94 <__ashldi3+0x2a>
    4b70:	98 2f       	mov	r25, r24
    4b72:	87 2f       	mov	r24, r23
    4b74:	76 2f       	mov	r23, r22
    4b76:	65 2f       	mov	r22, r21
    4b78:	54 2f       	mov	r21, r20
    4b7a:	43 2f       	mov	r20, r19
    4b7c:	32 2f       	mov	r19, r18
    4b7e:	22 27       	eor	r18, r18
    4b80:	08 50       	subi	r16, 0x08	; 8
    4b82:	f4 cf       	rjmp	.-24     	; 0x4b6c <__ashldi3+0x2>
    4b84:	22 0f       	add	r18, r18
    4b86:	33 1f       	adc	r19, r19
    4b88:	44 1f       	adc	r20, r20
    4b8a:	55 1f       	adc	r21, r21
    4b8c:	66 1f       	adc	r22, r22
    4b8e:	77 1f       	adc	r23, r23
    4b90:	88 1f       	adc	r24, r24
    4b92:	99 1f       	adc	r25, r25
    4b94:	0a 95       	dec	r16
    4b96:	b2 f7       	brpl	.-20     	; 0x4b84 <__ashldi3+0x1a>
    4b98:	0f 91       	pop	r16
    4b9a:	08 95       	ret

00004b9c <__ashrdi3>:
    4b9c:	97 fb       	bst	r25, 7
    4b9e:	10 f8       	bld	r1, 0

00004ba0 <__lshrdi3>:
    4ba0:	16 94       	lsr	r1
    4ba2:	00 08       	sbc	r0, r0
    4ba4:	0f 93       	push	r16
    4ba6:	08 30       	cpi	r16, 0x08	; 8
    4ba8:	98 f0       	brcs	.+38     	; 0x4bd0 <__lshrdi3+0x30>
    4baa:	08 50       	subi	r16, 0x08	; 8
    4bac:	23 2f       	mov	r18, r19
    4bae:	34 2f       	mov	r19, r20
    4bb0:	45 2f       	mov	r20, r21
    4bb2:	56 2f       	mov	r21, r22
    4bb4:	67 2f       	mov	r22, r23
    4bb6:	78 2f       	mov	r23, r24
    4bb8:	89 2f       	mov	r24, r25
    4bba:	90 2d       	mov	r25, r0
    4bbc:	f4 cf       	rjmp	.-24     	; 0x4ba6 <__lshrdi3+0x6>
    4bbe:	05 94       	asr	r0
    4bc0:	97 95       	ror	r25
    4bc2:	87 95       	ror	r24
    4bc4:	77 95       	ror	r23
    4bc6:	67 95       	ror	r22
    4bc8:	57 95       	ror	r21
    4bca:	47 95       	ror	r20
    4bcc:	37 95       	ror	r19
    4bce:	27 95       	ror	r18
    4bd0:	0a 95       	dec	r16
    4bd2:	aa f7       	brpl	.-22     	; 0x4bbe <__lshrdi3+0x1e>
    4bd4:	0f 91       	pop	r16
    4bd6:	08 95       	ret

00004bd8 <__adddi3>:
    4bd8:	2a 0d       	add	r18, r10
    4bda:	3b 1d       	adc	r19, r11
    4bdc:	4c 1d       	adc	r20, r12
    4bde:	5d 1d       	adc	r21, r13
    4be0:	6e 1d       	adc	r22, r14
    4be2:	7f 1d       	adc	r23, r15
    4be4:	80 1f       	adc	r24, r16
    4be6:	91 1f       	adc	r25, r17
    4be8:	08 95       	ret

00004bea <__adddi3_s8>:
    4bea:	00 24       	eor	r0, r0
    4bec:	a7 fd       	sbrc	r26, 7
    4bee:	00 94       	com	r0
    4bf0:	2a 0f       	add	r18, r26
    4bf2:	30 1d       	adc	r19, r0
    4bf4:	40 1d       	adc	r20, r0
    4bf6:	50 1d       	adc	r21, r0
    4bf8:	60 1d       	adc	r22, r0
    4bfa:	70 1d       	adc	r23, r0
    4bfc:	80 1d       	adc	r24, r0
    4bfe:	90 1d       	adc	r25, r0
    4c00:	08 95       	ret

00004c02 <__subdi3>:
    4c02:	2a 19       	sub	r18, r10
    4c04:	3b 09       	sbc	r19, r11
    4c06:	4c 09       	sbc	r20, r12
    4c08:	5d 09       	sbc	r21, r13
    4c0a:	6e 09       	sbc	r22, r14
    4c0c:	7f 09       	sbc	r23, r15
    4c0e:	80 0b       	sbc	r24, r16
    4c10:	91 0b       	sbc	r25, r17
    4c12:	08 95       	ret

00004c14 <__cmpdi2_s8>:
    4c14:	00 24       	eor	r0, r0
    4c16:	a7 fd       	sbrc	r26, 7
    4c18:	00 94       	com	r0
    4c1a:	2a 17       	cp	r18, r26
    4c1c:	30 05       	cpc	r19, r0
    4c1e:	40 05       	cpc	r20, r0
    4c20:	50 05       	cpc	r21, r0
    4c22:	60 05       	cpc	r22, r0
    4c24:	70 05       	cpc	r23, r0
    4c26:	80 05       	cpc	r24, r0
    4c28:	90 05       	cpc	r25, r0
    4c2a:	08 95       	ret

00004c2c <__umulhisi3>:
    4c2c:	a2 9f       	mul	r26, r18
    4c2e:	b0 01       	movw	r22, r0
    4c30:	b3 9f       	mul	r27, r19
    4c32:	c0 01       	movw	r24, r0
    4c34:	a3 9f       	mul	r26, r19
    4c36:	70 0d       	add	r23, r0
    4c38:	81 1d       	adc	r24, r1
    4c3a:	11 24       	eor	r1, r1
    4c3c:	91 1d       	adc	r25, r1
    4c3e:	b2 9f       	mul	r27, r18
    4c40:	70 0d       	add	r23, r0
    4c42:	81 1d       	adc	r24, r1
    4c44:	11 24       	eor	r1, r1
    4c46:	91 1d       	adc	r25, r1
    4c48:	08 95       	ret

00004c4a <memcpy_P>:
    4c4a:	fb 01       	movw	r30, r22
    4c4c:	dc 01       	movw	r26, r24
    4c4e:	02 c0       	rjmp	.+4      	; 0x4c54 <memcpy_P+0xa>
    4c50:	05 90       	lpm	r0, Z+
    4c52:	0d 92       	st	X+, r0
    4c54:	41 50       	subi	r20, 0x01	; 1
    4c56:	50 40       	sbci	r21, 0x00	; 0
    4c58:	d8 f7       	brcc	.-10     	; 0x4c50 <memcpy_P+0x6>
    4c5a:	08 95       	ret

00004c5c <memcmp>:
    4c5c:	fb 01       	movw	r30, r22
    4c5e:	dc 01       	movw	r26, r24
    4c60:	04 c0       	rjmp	.+8      	; 0x4c6a <memcmp+0xe>
    4c62:	8d 91       	ld	r24, X+
    4c64:	01 90       	ld	r0, Z+
    4c66:	80 19       	sub	r24, r0
    4c68:	21 f4       	brne	.+8      	; 0x4c72 <memcmp+0x16>
    4c6a:	41 50       	subi	r20, 0x01	; 1
    4c6c:	50 40       	sbci	r21, 0x00	; 0
    4c6e:	c8 f7       	brcc	.-14     	; 0x4c62 <memcmp+0x6>
    4c70:	88 1b       	sub	r24, r24
    4c72:	99 0b       	sbc	r25, r25
    4c74:	08 95       	ret

00004c76 <strncpy>:
    4c76:	fb 01       	movw	r30, r22
    4c78:	dc 01       	movw	r26, r24
    4c7a:	41 50       	subi	r20, 0x01	; 1
    4c7c:	50 40       	sbci	r21, 0x00	; 0
    4c7e:	48 f0       	brcs	.+18     	; 0x4c92 <strncpy+0x1c>
    4c80:	01 90       	ld	r0, Z+
    4c82:	0d 92       	st	X+, r0
    4c84:	00 20       	and	r0, r0
    4c86:	c9 f7       	brne	.-14     	; 0x4c7a <strncpy+0x4>
    4c88:	01 c0       	rjmp	.+2      	; 0x4c8c <strncpy+0x16>
    4c8a:	1d 92       	st	X+, r1
    4c8c:	41 50       	subi	r20, 0x01	; 1
    4c8e:	50 40       	sbci	r21, 0x00	; 0
    4c90:	e0 f7       	brcc	.-8      	; 0x4c8a <strncpy+0x14>
    4c92:	08 95       	ret

00004c94 <_exit>:
    4c94:	f8 94       	cli

00004c96 <__stop_program>:
    4c96:	ff cf       	rjmp	.-2      	; 0x4c96 <__stop_program>
