
RovController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e8  00800200  00002338  000023cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002338  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000561  008002e8  008002e8  000024b4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000024b4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000024e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000007d8  00000000  00000000  00002524  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00013879  00000000  00000000  00002cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004a1d  00000000  00000000  00016575  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004f19  00000000  00000000  0001af92  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000188c  00000000  00000000  0001feac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003692  00000000  00000000  00021738  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008453  00000000  00000000  00024dca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000008a0  00000000  00000000  0002d21d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	82 c0       	rjmp	.+260    	; 0x106 <__ctors_end>
       2:	00 00       	nop
       4:	b1 c0       	rjmp	.+354    	; 0x168 <__bad_interrupt>
       6:	00 00       	nop
       8:	af c0       	rjmp	.+350    	; 0x168 <__bad_interrupt>
       a:	00 00       	nop
       c:	ad c0       	rjmp	.+346    	; 0x168 <__bad_interrupt>
       e:	00 00       	nop
      10:	ab c0       	rjmp	.+342    	; 0x168 <__bad_interrupt>
      12:	00 00       	nop
      14:	a9 c0       	rjmp	.+338    	; 0x168 <__bad_interrupt>
      16:	00 00       	nop
      18:	a7 c0       	rjmp	.+334    	; 0x168 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a5 c0       	rjmp	.+330    	; 0x168 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a3 c0       	rjmp	.+326    	; 0x168 <__bad_interrupt>
      22:	00 00       	nop
      24:	a1 c0       	rjmp	.+322    	; 0x168 <__bad_interrupt>
      26:	00 00       	nop
      28:	9f c0       	rjmp	.+318    	; 0x168 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	9d c0       	rjmp	.+314    	; 0x168 <__bad_interrupt>
      2e:	00 00       	nop
      30:	9b c0       	rjmp	.+310    	; 0x168 <__bad_interrupt>
      32:	00 00       	nop
      34:	99 c0       	rjmp	.+306    	; 0x168 <__bad_interrupt>
      36:	00 00       	nop
      38:	97 c0       	rjmp	.+302    	; 0x168 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	95 c0       	rjmp	.+298    	; 0x168 <__bad_interrupt>
      3e:	00 00       	nop
      40:	93 c0       	rjmp	.+294    	; 0x168 <__bad_interrupt>
      42:	00 00       	nop
      44:	91 c0       	rjmp	.+290    	; 0x168 <__bad_interrupt>
      46:	00 00       	nop
      48:	8f c0       	rjmp	.+286    	; 0x168 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8d c0       	rjmp	.+282    	; 0x168 <__bad_interrupt>
      4e:	00 00       	nop
      50:	8b c0       	rjmp	.+278    	; 0x168 <__bad_interrupt>
      52:	00 00       	nop
      54:	89 c0       	rjmp	.+274    	; 0x168 <__bad_interrupt>
      56:	00 00       	nop
      58:	87 c0       	rjmp	.+270    	; 0x168 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	85 c0       	rjmp	.+266    	; 0x168 <__bad_interrupt>
      5e:	00 00       	nop
      60:	83 c0       	rjmp	.+262    	; 0x168 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 59 0e 	jmp	0x1cb2	; 0x1cb2 <__vector_25>
      68:	0c 94 95 0e 	jmp	0x1d2a	; 0x1d2a <__vector_26>
      6c:	7d c0       	rjmp	.+250    	; 0x168 <__bad_interrupt>
      6e:	00 00       	nop
      70:	7b c0       	rjmp	.+246    	; 0x168 <__bad_interrupt>
      72:	00 00       	nop
      74:	79 c0       	rjmp	.+242    	; 0x168 <__bad_interrupt>
      76:	00 00       	nop
      78:	77 c0       	rjmp	.+238    	; 0x168 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	75 c0       	rjmp	.+234    	; 0x168 <__bad_interrupt>
      7e:	00 00       	nop
      80:	73 c0       	rjmp	.+230    	; 0x168 <__bad_interrupt>
      82:	00 00       	nop
      84:	71 c0       	rjmp	.+226    	; 0x168 <__bad_interrupt>
      86:	00 00       	nop
      88:	6f c0       	rjmp	.+222    	; 0x168 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	6d c0       	rjmp	.+218    	; 0x168 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 e1 0e 	jmp	0x1dc2	; 0x1dc2 <__vector_36>
      94:	0c 94 1d 0f 	jmp	0x1e3a	; 0x1e3a <__vector_37>
      98:	67 c0       	rjmp	.+206    	; 0x168 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	65 c0       	rjmp	.+202    	; 0x168 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	63 c0       	rjmp	.+198    	; 0x168 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	61 c0       	rjmp	.+194    	; 0x168 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	5f c0       	rjmp	.+190    	; 0x168 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	5d c0       	rjmp	.+186    	; 0x168 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	5b c0       	rjmp	.+182    	; 0x168 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	59 c0       	rjmp	.+178    	; 0x168 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	57 c0       	rjmp	.+174    	; 0x168 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	55 c0       	rjmp	.+170    	; 0x168 <__bad_interrupt>
      be:	00 00       	nop
      c0:	53 c0       	rjmp	.+166    	; 0x168 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	51 c0       	rjmp	.+162    	; 0x168 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	4f c0       	rjmp	.+158    	; 0x168 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 69 0f 	jmp	0x1ed2	; 0x1ed2 <__vector_51>
      d0:	0c 94 a5 0f 	jmp	0x1f4a	; 0x1f4a <__vector_52>
      d4:	49 c0       	rjmp	.+146    	; 0x168 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 f1 0f 	jmp	0x1fe2	; 0x1fe2 <__vector_54>
      dc:	0c 94 2d 10 	jmp	0x205a	; 0x205a <__vector_55>
      e0:	43 c0       	rjmp	.+134    	; 0x168 <__bad_interrupt>
	...

000000e4 <__trampolines_end>:
      e4:	63 82       	std	Z+3, r6	; 0x03
      e6:	53 63       	ori	r21, 0x33	; 51

000000e8 <_ZL5iphdr>:
      e8:	45 00 00 82 00 00 40 00 20                          E.....@. 

000000f1 <_ZL9arpreqhdr>:
      f1:	00 01 08 00 06 04 00 01 00                          .........

000000fa <__ctors_start>:
      fa:	17 01       	movw	r2, r14
      fc:	be 0e       	add	r11, r30
      fe:	46 0f       	add	r20, r22
     100:	ce 0f       	add	r28, r30
     102:	56 10       	cpse	r5, r6
     104:	ce 10       	cpse	r12, r14

00000106 <__ctors_end>:
     106:	11 24       	eor	r1, r1
     108:	1f be       	out	0x3f, r1	; 63
     10a:	cf ef       	ldi	r28, 0xFF	; 255
     10c:	d1 e2       	ldi	r29, 0x21	; 33
     10e:	de bf       	out	0x3e, r29	; 62
     110:	cd bf       	out	0x3d, r28	; 61
     112:	00 e0       	ldi	r16, 0x00	; 0
     114:	0c bf       	out	0x3c, r16	; 60

00000116 <__do_copy_data>:
     116:	12 e0       	ldi	r17, 0x02	; 2
     118:	a0 e0       	ldi	r26, 0x00	; 0
     11a:	b2 e0       	ldi	r27, 0x02	; 2
     11c:	e8 e3       	ldi	r30, 0x38	; 56
     11e:	f3 e2       	ldi	r31, 0x23	; 35
     120:	00 e0       	ldi	r16, 0x00	; 0
     122:	0b bf       	out	0x3b, r16	; 59
     124:	02 c0       	rjmp	.+4      	; 0x12a <__do_copy_data+0x14>
     126:	07 90       	elpm	r0, Z+
     128:	0d 92       	st	X+, r0
     12a:	a8 3e       	cpi	r26, 0xE8	; 232
     12c:	b1 07       	cpc	r27, r17
     12e:	d9 f7       	brne	.-10     	; 0x126 <__do_copy_data+0x10>

00000130 <__do_clear_bss>:
     130:	28 e0       	ldi	r18, 0x08	; 8
     132:	a8 ee       	ldi	r26, 0xE8	; 232
     134:	b2 e0       	ldi	r27, 0x02	; 2
     136:	01 c0       	rjmp	.+2      	; 0x13a <.do_clear_bss_start>

00000138 <.do_clear_bss_loop>:
     138:	1d 92       	st	X+, r1

0000013a <.do_clear_bss_start>:
     13a:	a9 34       	cpi	r26, 0x49	; 73
     13c:	b2 07       	cpc	r27, r18
     13e:	e1 f7       	brne	.-8      	; 0x138 <.do_clear_bss_loop>

00000140 <__do_global_ctors>:
     140:	10 e0       	ldi	r17, 0x00	; 0
     142:	c3 e8       	ldi	r28, 0x83	; 131
     144:	d0 e0       	ldi	r29, 0x00	; 0
     146:	00 e0       	ldi	r16, 0x00	; 0
     148:	06 c0       	rjmp	.+12     	; 0x156 <__do_global_ctors+0x16>
     14a:	21 97       	sbiw	r28, 0x01	; 1
     14c:	01 09       	sbc	r16, r1
     14e:	80 2f       	mov	r24, r16
     150:	fe 01       	movw	r30, r28
     152:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <__tablejump2__>
     156:	cd 37       	cpi	r28, 0x7D	; 125
     158:	d1 07       	cpc	r29, r17
     15a:	80 e0       	ldi	r24, 0x00	; 0
     15c:	08 07       	cpc	r16, r24
     15e:	a9 f7       	brne	.-22     	; 0x14a <__do_global_ctors+0xa>
     160:	0e 94 df 0c 	call	0x19be	; 0x19be <main>
     164:	0c 94 9a 11 	jmp	0x2334	; 0x2334 <_exit>

00000168 <__bad_interrupt>:
     168:	4b cf       	rjmp	.-362    	; 0x0 <__vectors>

0000016a <_Z14RunPingCommandPKhh>:
#include "Commands.h"

uint8_t* const SendDataBuffer = (uint8_t*)(&EtherComm::buffer[2]);

void RunPingCommand(const uint8_t* data, uint8_t len){
  if(len == 1){
     16a:	61 30       	cpi	r22, 0x01	; 1
     16c:	51 f4       	brne	.+20     	; 0x182 <_Z14RunPingCommandPKhh+0x18>
     16e:	fc 01       	movw	r30, r24
    SendDataBuffer[0] = data[0];
     170:	80 81       	ld	r24, Z
     172:	e0 91 e8 02 	lds	r30, 0x02E8	; 0x8002e8 <__data_end>
     176:	f0 91 e9 02 	lds	r31, 0x02E9	; 0x8002e9 <__data_end+0x1>
     17a:	80 83       	st	Z, r24
    EtherComm::SendCommand(CMD_Ping, 1);
     17c:	80 e0       	ldi	r24, 0x00	; 0
     17e:	0c 94 9d 0c 	jmp	0x193a	; 0x193a <_ZN9EtherComm11SendCommandEhh>
     182:	08 95       	ret

00000184 <_Z14RunEchoCommandPKhh>:
  }
}

void RunEchoCommand(const uint8_t* data, uint8_t len){
  uint8_t* index = SendDataBuffer;
     184:	40 91 e8 02 	lds	r20, 0x02E8	; 0x8002e8 <__data_end>
     188:	30 91 e9 02 	lds	r19, 0x02E9	; 0x8002e9 <__data_end+0x1>
  uint8_t dataLen = len;
  while(len-- > 0){
     18c:	2f ef       	ldi	r18, 0xFF	; 255
     18e:	26 0f       	add	r18, r22
     190:	66 23       	and	r22, r22
     192:	41 f0       	breq	.+16     	; 0x1a4 <_Z14RunEchoCommandPKhh+0x20>
     194:	a8 2f       	mov	r26, r24
     196:	b9 2f       	mov	r27, r25
     198:	e4 2f       	mov	r30, r20
     19a:	f3 2f       	mov	r31, r19
    *(index++) = *(data++);
     19c:	8d 91       	ld	r24, X+
     19e:	81 93       	st	Z+, r24
}

void RunEchoCommand(const uint8_t* data, uint8_t len){
  uint8_t* index = SendDataBuffer;
  uint8_t dataLen = len;
  while(len-- > 0){
     1a0:	21 50       	subi	r18, 0x01	; 1
     1a2:	e0 f7       	brcc	.-8      	; 0x19c <_Z14RunEchoCommandPKhh+0x18>
    *(index++) = *(data++);
  }
  
  EtherComm::SendCommand(CMD_Echo, dataLen);
     1a4:	81 e0       	ldi	r24, 0x01	; 1
     1a6:	0c 94 9d 0c 	jmp	0x193a	; 0x193a <_ZN9EtherComm11SendCommandEhh>
     1aa:	08 95       	ret

000001ac <_Z13RunLedCommandPKhh>:
}

void RunLedCommand(const uint8_t* data, uint8_t len){
	if(len == 1){
     1ac:	61 30       	cpi	r22, 0x01	; 1
     1ae:	51 f4       	brne	.+20     	; 0x1c4 <_Z13RunLedCommandPKhh+0x18>
		uint8_t state = *data;
     1b0:	fc 01       	movw	r30, r24
     1b2:	90 81       	ld	r25, Z
		if(state <= 1){
     1b4:	92 30       	cpi	r25, 0x02	; 2
     1b6:	30 f4       	brcc	.+12     	; 0x1c4 <_Z13RunLedCommandPKhh+0x18>
			rov.SetLed(state > 0);
     1b8:	81 e0       	ldi	r24, 0x01	; 1
     1ba:	91 11       	cpse	r25, r1
     1bc:	01 c0       	rjmp	.+2      	; 0x1c0 <_Z13RunLedCommandPKhh+0x14>
     1be:	80 e0       	ldi	r24, 0x00	; 0
     1c0:	0c 94 ae 10 	jmp	0x215c	; 0x215c <_ZN5Robot6SetLedEb>
     1c4:	08 95       	ret

000001c6 <_Z22RunUpdateDeviceCommandPKhh>:
		}
	}
}

void RunUpdateDeviceCommand(const uint8_t* data, uint8_t len){
	if(len > 0){
     1c6:	66 23       	and	r22, r22
     1c8:	c1 f0       	breq	.+48     	; 0x1fa <_Z22RunUpdateDeviceCommandPKhh+0x34>
		if(Robot::devices[data[0]] != NULL){
     1ca:	dc 01       	movw	r26, r24
     1cc:	ec 91       	ld	r30, X
     1ce:	f0 e0       	ldi	r31, 0x00	; 0
     1d0:	ee 0f       	add	r30, r30
     1d2:	ff 1f       	adc	r31, r31
     1d4:	e7 5b       	subi	r30, 0xB7	; 183
     1d6:	f9 4f       	sbci	r31, 0xF9	; 249
     1d8:	a0 81       	ld	r26, Z
     1da:	b1 81       	ldd	r27, Z+1	; 0x01
     1dc:	10 97       	sbiw	r26, 0x00	; 0
     1de:	69 f0       	breq	.+26     	; 0x1fa <_Z22RunUpdateDeviceCommandPKhh+0x34>
     1e0:	46 2f       	mov	r20, r22
     1e2:	bc 01       	movw	r22, r24
			Robot::devices[data[0]]->Update(data + 1, len - 1);
     1e4:	41 50       	subi	r20, 0x01	; 1
     1e6:	6f 5f       	subi	r22, 0xFF	; 255
     1e8:	7f 4f       	sbci	r23, 0xFF	; 255
     1ea:	ed 91       	ld	r30, X+
     1ec:	fc 91       	ld	r31, X
     1ee:	11 97       	sbiw	r26, 0x01	; 1
     1f0:	01 90       	ld	r0, Z+
     1f2:	f0 81       	ld	r31, Z
     1f4:	e0 2d       	mov	r30, r0
     1f6:	cd 01       	movw	r24, r26
     1f8:	19 95       	eicall
     1fa:	08 95       	ret

000001fc <_ZN9EtherComm15CommandReceivedEhPKhh>:
		}
	}
}

void EtherComm::CommandReceived(uint8_t command, const uint8_t* data, uint8_t len){
     1fc:	9b 01       	movw	r18, r22
  switch(command){
     1fe:	81 30       	cpi	r24, 0x01	; 1
     200:	51 f0       	breq	.+20     	; 0x216 <_ZN9EtherComm15CommandReceivedEhPKhh+0x1a>
     202:	28 f0       	brcs	.+10     	; 0x20e <_ZN9EtherComm15CommandReceivedEhPKhh+0x12>
     204:	82 30       	cpi	r24, 0x02	; 2
     206:	59 f0       	breq	.+22     	; 0x21e <_ZN9EtherComm15CommandReceivedEhPKhh+0x22>
     208:	83 30       	cpi	r24, 0x03	; 3
     20a:	69 f0       	breq	.+26     	; 0x226 <_ZN9EtherComm15CommandReceivedEhPKhh+0x2a>
     20c:	08 95       	ret
    case CMD_Ping: RunPingCommand(data, len); break;
     20e:	64 2f       	mov	r22, r20
     210:	c9 01       	movw	r24, r18
     212:	ab cf       	rjmp	.-170    	; 0x16a <_Z14RunPingCommandPKhh>
     214:	08 95       	ret
    case CMD_Echo: RunEchoCommand(data, len); break;
     216:	64 2f       	mov	r22, r20
     218:	c9 01       	movw	r24, r18
     21a:	b4 cf       	rjmp	.-152    	; 0x184 <_Z14RunEchoCommandPKhh>
     21c:	08 95       	ret
	case CMD_Led: RunLedCommand(data, len); break;
     21e:	64 2f       	mov	r22, r20
     220:	c9 01       	movw	r24, r18
     222:	c4 cf       	rjmp	.-120    	; 0x1ac <_Z13RunLedCommandPKhh>
     224:	08 95       	ret
	case CMD_UpdateDevice: RunUpdateDeviceCommand(data, len); break;
     226:	64 2f       	mov	r22, r20
     228:	c9 01       	movw	r24, r18
     22a:	cd cf       	rjmp	.-102    	; 0x1c6 <_Z22RunUpdateDeviceCommandPKhh>
     22c:	08 95       	ret

0000022e <_GLOBAL__sub_I__Z14RunPingCommandPKhh>:
     22e:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <_ZN9EtherComm6bufferE>
#include "EtherComm.h"
#include "Robot.h"
#include "Commands.h"

uint8_t* const SendDataBuffer = (uint8_t*)(&EtherComm::buffer[2]);
     232:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <_ZN9EtherComm6bufferE+0x1>
     236:	02 96       	adiw	r24, 0x02	; 2
     238:	90 93 e9 02 	sts	0x02E9, r25	; 0x8002e9 <__data_end+0x1>
     23c:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <__data_end>
     240:	08 95       	ret

00000242 <_ZL8addToBufh>:
}

void EtherCard::dhcpAddOptionCallback(uint8_t option, DhcpOptionCallback callback)
{
    dhcpCustomOptionNum = option;
    dhcpCustomOptionCallback = callback;
     242:	e0 91 ed 02 	lds	r30, 0x02ED	; 0x8002ed <_ZL6bufPtr>
     246:	f0 91 ee 02 	lds	r31, 0x02EE	; 0x8002ee <_ZL6bufPtr+0x1>
     24a:	9f 01       	movw	r18, r30
     24c:	2f 5f       	subi	r18, 0xFF	; 255
     24e:	3f 4f       	sbci	r19, 0xFF	; 255
     250:	30 93 ee 02 	sts	0x02EE, r19	; 0x8002ee <_ZL6bufPtr+0x1>
     254:	20 93 ed 02 	sts	0x02ED, r18	; 0x8002ed <_ZL6bufPtr>
     258:	80 83       	st	Z, r24
     25a:	08 95       	ret

0000025c <_ZL8addByteshPKh>:
     25c:	0f 93       	push	r16
     25e:	1f 93       	push	r17
     260:	cf 93       	push	r28
     262:	df 93       	push	r29
     264:	9f ef       	ldi	r25, 0xFF	; 255
     266:	98 0f       	add	r25, r24
     268:	88 23       	and	r24, r24
     26a:	61 f0       	breq	.+24     	; 0x284 <_ZL8addByteshPKh+0x28>
     26c:	eb 01       	movw	r28, r22
     26e:	09 2f       	mov	r16, r25
     270:	10 e0       	ldi	r17, 0x00	; 0
     272:	0f 5f       	subi	r16, 0xFF	; 255
     274:	1f 4f       	sbci	r17, 0xFF	; 255
     276:	06 0f       	add	r16, r22
     278:	17 1f       	adc	r17, r23
     27a:	89 91       	ld	r24, Y+
     27c:	e2 df       	rcall	.-60     	; 0x242 <_ZL8addToBufh>
     27e:	c0 17       	cp	r28, r16
     280:	d1 07       	cpc	r29, r17
     282:	d9 f7       	brne	.-10     	; 0x27a <_ZL8addByteshPKh+0x1e>
     284:	df 91       	pop	r29
     286:	cf 91       	pop	r28
     288:	1f 91       	pop	r17
     28a:	0f 91       	pop	r16
     28c:	08 95       	ret

0000028e <_ZL26dhcp_received_message_typejh>:
     28e:	0f 93       	push	r16
     290:	1f 93       	push	r17
     292:	86 34       	cpi	r24, 0x46	; 70
     294:	91 05       	cpc	r25, r1
     296:	30 f1       	brcs	.+76     	; 0x2e4 <_ZL26dhcp_received_message_typejh+0x56>
     298:	20 91 21 03 	lds	r18, 0x0321	; 0x800321 <_ZN8ENC28J606bufferE+0x23>
     29c:	23 34       	cpi	r18, 0x43	; 67
     29e:	21 f5       	brne	.+72     	; 0x2e8 <_ZL26dhcp_received_message_typejh+0x5a>
     2a0:	00 91 2c 03 	lds	r16, 0x032C	; 0x80032c <_ZN8ENC28J606bufferE+0x2e>
     2a4:	10 91 2d 03 	lds	r17, 0x032D	; 0x80032d <_ZN8ENC28J606bufferE+0x2f>
     2a8:	20 91 2e 03 	lds	r18, 0x032E	; 0x80032e <_ZN8ENC28J606bufferE+0x30>
     2ac:	30 91 2f 03 	lds	r19, 0x032F	; 0x80032f <_ZN8ENC28J606bufferE+0x31>
     2b0:	01 2b       	or	r16, r17
     2b2:	02 2b       	or	r16, r18
     2b4:	03 2b       	or	r16, r19
     2b6:	d1 f4       	brne	.+52     	; 0x2ec <_ZL26dhcp_received_message_typejh+0x5e>
     2b8:	e8 e1       	ldi	r30, 0x18	; 24
     2ba:	f4 e0       	ldi	r31, 0x04	; 4
     2bc:	82 50       	subi	r24, 0x02	; 2
     2be:	9d 4f       	sbci	r25, 0xFD	; 253
     2c0:	af 01       	movw	r20, r30
     2c2:	4e 5f       	subi	r20, 0xFE	; 254
     2c4:	5f 4f       	sbci	r21, 0xFF	; 255
     2c6:	31 81       	ldd	r19, Z+1	; 0x01
     2c8:	20 81       	ld	r18, Z
     2ca:	25 33       	cpi	r18, 0x35	; 53
     2cc:	19 f4       	brne	.+6      	; 0x2d4 <_ZL26dhcp_received_message_typejh+0x46>
     2ce:	22 81       	ldd	r18, Z+2	; 0x02
     2d0:	26 17       	cp	r18, r22
     2d2:	71 f0       	breq	.+28     	; 0x2f0 <_ZL26dhcp_received_message_typejh+0x62>
     2d4:	fa 01       	movw	r30, r20
     2d6:	e3 0f       	add	r30, r19
     2d8:	f1 1d       	adc	r31, r1
     2da:	e8 17       	cp	r30, r24
     2dc:	f9 07       	cpc	r31, r25
     2de:	80 f3       	brcs	.-32     	; 0x2c0 <_ZL26dhcp_received_message_typejh+0x32>
     2e0:	80 e0       	ldi	r24, 0x00	; 0
     2e2:	07 c0       	rjmp	.+14     	; 0x2f2 <_ZL26dhcp_received_message_typejh+0x64>
     2e4:	80 e0       	ldi	r24, 0x00	; 0
     2e6:	05 c0       	rjmp	.+10     	; 0x2f2 <_ZL26dhcp_received_message_typejh+0x64>
     2e8:	80 e0       	ldi	r24, 0x00	; 0
     2ea:	03 c0       	rjmp	.+6      	; 0x2f2 <_ZL26dhcp_received_message_typejh+0x64>
     2ec:	80 e0       	ldi	r24, 0x00	; 0
     2ee:	01 c0       	rjmp	.+2      	; 0x2f2 <_ZL26dhcp_received_message_typejh+0x64>
     2f0:	81 e0       	ldi	r24, 0x01	; 1
     2f2:	1f 91       	pop	r17
     2f4:	0f 91       	pop	r16
     2f6:	08 95       	ret

000002f8 <_ZL17send_dhcp_messagePh>:
     2f8:	ef 92       	push	r14
     2fa:	ff 92       	push	r15
     2fc:	0f 93       	push	r16
     2fe:	1f 93       	push	r17
     300:	cf 93       	push	r28
     302:	df 93       	push	r29
     304:	7c 01       	movw	r14, r24
     306:	86 e1       	ldi	r24, 0x16	; 22
     308:	91 e0       	ldi	r25, 0x01	; 1
     30a:	ee ef       	ldi	r30, 0xFE	; 254
     30c:	f2 e0       	ldi	r31, 0x02	; 2
     30e:	df 01       	movw	r26, r30
     310:	9c 01       	movw	r18, r24
     312:	1d 92       	st	X+, r1
     314:	21 50       	subi	r18, 0x01	; 1
     316:	30 40       	sbci	r19, 0x00	; 0
     318:	e1 f7       	brne	.-8      	; 0x312 <_ZL17send_dhcp_messagePh+0x1a>
     31a:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <_ZL9dhcpState>
     31e:	83 30       	cpi	r24, 0x03	; 3
     320:	19 f0       	breq	.+6      	; 0x328 <_ZL17send_dhcp_messagePh+0x30>
     322:	68 e3       	ldi	r22, 0x38	; 56
     324:	72 e0       	ldi	r23, 0x02	; 2
     326:	02 c0       	rjmp	.+4      	; 0x32c <_ZL17send_dhcp_messagePh+0x34>
     328:	6a e0       	ldi	r22, 0x0A	; 10
     32a:	75 e0       	ldi	r23, 0x05	; 5
     32c:	43 e4       	ldi	r20, 0x43	; 67
     32e:	50 e0       	ldi	r21, 0x00	; 0
     330:	84 e4       	ldi	r24, 0x44	; 68
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	10 d6       	rcall	.+3104   	; 0xf56 <_ZN9EtherCard10udpPrepareEjPKhj>
     336:	68 e3       	ldi	r22, 0x38	; 56
     338:	72 e0       	ldi	r23, 0x02	; 2
     33a:	8e ef       	ldi	r24, 0xFE	; 254
     33c:	92 e0       	ldi	r25, 0x02	; 2
     33e:	0e 94 2e 0c 	call	0x185c	; 0x185c <_ZN9EtherCard7copyMacEPhPKh>
     342:	ee ef       	ldi	r30, 0xFE	; 254
     344:	f2 e0       	ldi	r31, 0x02	; 2
     346:	81 e0       	ldi	r24, 0x01	; 1
     348:	82 a7       	std	Z+42, r24	; 0x2a
     34a:	83 a7       	std	Z+43, r24	; 0x2b
     34c:	86 e0       	ldi	r24, 0x06	; 6
     34e:	84 a7       	std	Z+44, r24	; 0x2c
     350:	16 a6       	std	Z+46, r1	; 0x2e
     352:	17 a6       	std	Z+47, r1	; 0x2f
     354:	10 aa       	std	Z+48, r1	; 0x30
     356:	11 aa       	std	Z+49, r1	; 0x31
     358:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <_ZL9dhcpState>
     35c:	83 30       	cpi	r24, 0x03	; 3
     35e:	31 f4       	brne	.+12     	; 0x36c <_ZL17send_dhcp_messagePh+0x74>
     360:	6a e1       	ldi	r22, 0x1A	; 26
     362:	75 e0       	ldi	r23, 0x05	; 5
     364:	84 e3       	ldi	r24, 0x34	; 52
     366:	93 e0       	ldi	r25, 0x03	; 3
     368:	0e 94 21 0c 	call	0x1842	; 0x1842 <_ZN9EtherCard6copyIpEPhPKh>
     36c:	6e e1       	ldi	r22, 0x1E	; 30
     36e:	75 e0       	ldi	r23, 0x05	; 5
     370:	84 e4       	ldi	r24, 0x44	; 68
     372:	93 e0       	ldi	r25, 0x03	; 3
     374:	0e 94 2e 0c 	call	0x185c	; 0x185c <_ZN9EtherCard7copyMacEPhPKh>
     378:	84 e1       	ldi	r24, 0x14	; 20
     37a:	94 e0       	ldi	r25, 0x04	; 4
     37c:	90 93 ee 02 	sts	0x02EE, r25	; 0x8002ee <_ZL6bufPtr+0x1>
     380:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <_ZL6bufPtr>
     384:	c4 ee       	ldi	r28, 0xE4	; 228
     386:	d0 e0       	ldi	r29, 0x00	; 0
     388:	08 ee       	ldi	r16, 0xE8	; 232
     38a:	10 e0       	ldi	r17, 0x00	; 0
     38c:	fe 01       	movw	r30, r28
     38e:	84 91       	lpm	r24, Z
     390:	58 df       	rcall	.-336    	; 0x242 <_ZL8addToBufh>
     392:	21 96       	adiw	r28, 0x01	; 1
     394:	0c 17       	cp	r16, r28
     396:	1d 07       	cpc	r17, r29
     398:	c9 f7       	brne	.-14     	; 0x38c <_ZL17send_dhcp_messagePh+0x94>
     39a:	85 e3       	ldi	r24, 0x35	; 53
     39c:	52 df       	rcall	.-348    	; 0x242 <_ZL8addToBufh>
     39e:	81 e0       	ldi	r24, 0x01	; 1
     3a0:	50 df       	rcall	.-352    	; 0x242 <_ZL8addToBufh>
     3a2:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <_ZL9dhcpState>
     3a6:	88 23       	and	r24, r24
     3a8:	11 f0       	breq	.+4      	; 0x3ae <_ZL17send_dhcp_messagePh+0xb6>
     3aa:	83 e0       	ldi	r24, 0x03	; 3
     3ac:	01 c0       	rjmp	.+2      	; 0x3b0 <_ZL17send_dhcp_messagePh+0xb8>
     3ae:	81 e0       	ldi	r24, 0x01	; 1
     3b0:	48 df       	rcall	.-368    	; 0x242 <_ZL8addToBufh>
     3b2:	8d e3       	ldi	r24, 0x3D	; 61
     3b4:	46 df       	rcall	.-372    	; 0x242 <_ZL8addToBufh>
     3b6:	87 e0       	ldi	r24, 0x07	; 7
     3b8:	44 df       	rcall	.-376    	; 0x242 <_ZL8addToBufh>
     3ba:	81 e0       	ldi	r24, 0x01	; 1
     3bc:	42 df       	rcall	.-380    	; 0x242 <_ZL8addToBufh>
     3be:	6e e1       	ldi	r22, 0x1E	; 30
     3c0:	75 e0       	ldi	r23, 0x05	; 5
     3c2:	86 e0       	ldi	r24, 0x06	; 6
     3c4:	4b df       	rcall	.-362    	; 0x25c <_ZL8addByteshPKh>
     3c6:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
     3ca:	88 23       	and	r24, r24
     3cc:	89 f0       	breq	.+34     	; 0x3f0 <_ZL17send_dhcp_messagePh+0xf8>
     3ce:	e0 e0       	ldi	r30, 0x00	; 0
     3d0:	f2 e0       	ldi	r31, 0x02	; 2
     3d2:	01 90       	ld	r0, Z+
     3d4:	00 20       	and	r0, r0
     3d6:	e9 f7       	brne	.-6      	; 0x3d2 <_ZL17send_dhcp_messagePh+0xda>
     3d8:	31 97       	sbiw	r30, 0x01	; 1
     3da:	ef 01       	movw	r28, r30
     3dc:	c0 50       	subi	r28, 0x00	; 0
     3de:	d2 40       	sbci	r29, 0x02	; 2
     3e0:	8c e0       	ldi	r24, 0x0C	; 12
     3e2:	2f df       	rcall	.-418    	; 0x242 <_ZL8addToBufh>
     3e4:	8c 2f       	mov	r24, r28
     3e6:	2d df       	rcall	.-422    	; 0x242 <_ZL8addToBufh>
     3e8:	60 e0       	ldi	r22, 0x00	; 0
     3ea:	72 e0       	ldi	r23, 0x02	; 2
     3ec:	8c 2f       	mov	r24, r28
     3ee:	36 df       	rcall	.-404    	; 0x25c <_ZL8addByteshPKh>
     3f0:	e1 14       	cp	r14, r1
     3f2:	f1 04       	cpc	r15, r1
     3f4:	79 f0       	breq	.+30     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     3f6:	82 e3       	ldi	r24, 0x32	; 50
     3f8:	24 df       	rcall	.-440    	; 0x242 <_ZL8addToBufh>
     3fa:	84 e0       	ldi	r24, 0x04	; 4
     3fc:	22 df       	rcall	.-444    	; 0x242 <_ZL8addToBufh>
     3fe:	b7 01       	movw	r22, r14
     400:	84 e0       	ldi	r24, 0x04	; 4
     402:	2c df       	rcall	.-424    	; 0x25c <_ZL8addByteshPKh>
     404:	86 e3       	ldi	r24, 0x36	; 54
     406:	1d df       	rcall	.-454    	; 0x242 <_ZL8addToBufh>
     408:	84 e0       	ldi	r24, 0x04	; 4
     40a:	1b df       	rcall	.-458    	; 0x242 <_ZL8addToBufh>
     40c:	6a e0       	ldi	r22, 0x0A	; 10
     40e:	75 e0       	ldi	r23, 0x05	; 5
     410:	84 e0       	ldi	r24, 0x04	; 4
     412:	24 df       	rcall	.-440    	; 0x25c <_ZL8addByteshPKh>
     414:	c0 91 ec 02 	lds	r28, 0x02EC	; 0x8002ec <_ZL19dhcpCustomOptionNum>
     418:	c1 11       	cpse	r28, r1
     41a:	0b c0       	rjmp	.+22     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     41c:	17 c0       	rjmp	.+46     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     41e:	8f ef       	ldi	r24, 0xFF	; 255
     420:	10 df       	rcall	.-480    	; 0x242 <_ZL8addToBufh>
     422:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <_ZL6bufPtr>
     426:	90 91 ee 02 	lds	r25, 0x02EE	; 0x8002ee <_ZL6bufPtr+0x1>
     42a:	88 52       	subi	r24, 0x28	; 40
     42c:	93 40       	sbci	r25, 0x03	; 3
     42e:	e5 d5       	rcall	.+3018   	; 0xffa <_ZN9EtherCard11udpTransmitEj>
     430:	18 c0       	rjmp	.+48     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     432:	87 e3       	ldi	r24, 0x37	; 55
     434:	06 df       	rcall	.-500    	; 0x242 <_ZL8addToBufh>
     436:	84 e0       	ldi	r24, 0x04	; 4
     438:	04 df       	rcall	.-504    	; 0x242 <_ZL8addToBufh>
     43a:	81 e0       	ldi	r24, 0x01	; 1
     43c:	02 df       	rcall	.-508    	; 0x242 <_ZL8addToBufh>
     43e:	83 e0       	ldi	r24, 0x03	; 3
     440:	00 df       	rcall	.-512    	; 0x242 <_ZL8addToBufh>
     442:	86 e0       	ldi	r24, 0x06	; 6
     444:	fe de       	rcall	.-516    	; 0x242 <_ZL8addToBufh>
     446:	8c 2f       	mov	r24, r28
     448:	fc de       	rcall	.-520    	; 0x242 <_ZL8addToBufh>
     44a:	e9 cf       	rjmp	.-46     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     44c:	87 e3       	ldi	r24, 0x37	; 55
     44e:	f9 de       	rcall	.-526    	; 0x242 <_ZL8addToBufh>
     450:	83 e0       	ldi	r24, 0x03	; 3
     452:	f7 de       	rcall	.-530    	; 0x242 <_ZL8addToBufh>
     454:	81 e0       	ldi	r24, 0x01	; 1
     456:	f5 de       	rcall	.-534    	; 0x242 <_ZL8addToBufh>
     458:	83 e0       	ldi	r24, 0x03	; 3
     45a:	f3 de       	rcall	.-538    	; 0x242 <_ZL8addToBufh>
     45c:	86 e0       	ldi	r24, 0x06	; 6
     45e:	f1 de       	rcall	.-542    	; 0x242 <_ZL8addToBufh>
     460:	de cf       	rjmp	.-68     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     462:	df 91       	pop	r29
     464:	cf 91       	pop	r28
     466:	1f 91       	pop	r17
     468:	0f 91       	pop	r16
     46a:	ff 90       	pop	r15
     46c:	ef 90       	pop	r14
     46e:	08 95       	ret

00000470 <_ZN9EtherCard16DhcpStateMachineEj>:
}

void EtherCard::DhcpStateMachine (uint16_t len)
{
     470:	9f 92       	push	r9
     472:	af 92       	push	r10
     474:	bf 92       	push	r11
     476:	cf 92       	push	r12
     478:	df 92       	push	r13
     47a:	ef 92       	push	r14
     47c:	ff 92       	push	r15
     47e:	0f 93       	push	r16
     480:	1f 93       	push	r17
     482:	cf 93       	push	r28
     484:	df 93       	push	r29
     486:	00 d0       	rcall	.+0      	; 0x488 <_ZN9EtherCard16DhcpStateMachineEj+0x18>
     488:	1f 92       	push	r1
     48a:	cd b7       	in	r28, 0x3d	; 61
     48c:	de b7       	in	r29, 0x3e	; 62
     48e:	8c 01       	movw	r16, r24
        Serial.println("Renew");
        break;
    }
#endif

    switch (dhcpState) {
     490:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <_ZL9dhcpState>
     494:	82 30       	cpi	r24, 0x02	; 2
     496:	09 f4       	brne	.+2      	; 0x49a <_ZN9EtherCard16DhcpStateMachineEj+0x2a>
     498:	5a c0       	rjmp	.+180    	; 0x54e <_ZN9EtherCard16DhcpStateMachineEj+0xde>
     49a:	28 f4       	brcc	.+10     	; 0x4a6 <_ZN9EtherCard16DhcpStateMachineEj+0x36>
     49c:	88 23       	and	r24, r24
     49e:	f1 f0       	breq	.+60     	; 0x4dc <_ZN9EtherCard16DhcpStateMachineEj+0x6c>
     4a0:	81 30       	cpi	r24, 0x01	; 1
     4a2:	61 f1       	breq	.+88     	; 0x4fc <_ZN9EtherCard16DhcpStateMachineEj+0x8c>
     4a4:	e3 c0       	rjmp	.+454    	; 0x66c <_ZN9EtherCard16DhcpStateMachineEj+0x1fc>
     4a6:	83 30       	cpi	r24, 0x03	; 3
     4a8:	21 f0       	breq	.+8      	; 0x4b2 <_ZN9EtherCard16DhcpStateMachineEj+0x42>
     4aa:	84 30       	cpi	r24, 0x04	; 4
     4ac:	09 f4       	brne	.+2      	; 0x4b0 <_ZN9EtherCard16DhcpStateMachineEj+0x40>
     4ae:	4f c0       	rjmp	.+158    	; 0x54e <_ZN9EtherCard16DhcpStateMachineEj+0xde>
     4b0:	dd c0       	rjmp	.+442    	; 0x66c <_ZN9EtherCard16DhcpStateMachineEj+0x1fc>

    case DHCP_STATE_BOUND:
        //!@todo Due to millis() wrap-around, DHCP renewal may not work if leaseTime is larger than 49days
		//TODO replaced millis()
		if (leaseTime != DHCP_INFINITE_LEASE /*&& millis() - leaseStart >= leaseTime*/) {
     4b2:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <_ZL9leaseTime>
     4b6:	90 91 f0 02 	lds	r25, 0x02F0	; 0x8002f0 <_ZL9leaseTime+0x1>
     4ba:	a0 91 f1 02 	lds	r26, 0x02F1	; 0x8002f1 <_ZL9leaseTime+0x2>
     4be:	b0 91 f2 02 	lds	r27, 0x02F2	; 0x8002f2 <_ZL9leaseTime+0x3>
     4c2:	8f 3f       	cpi	r24, 0xFF	; 255
     4c4:	9f 4f       	sbci	r25, 0xFF	; 255
     4c6:	af 4f       	sbci	r26, 0xFF	; 255
     4c8:	bf 4f       	sbci	r27, 0xFF	; 255
     4ca:	09 f4       	brne	.+2      	; 0x4ce <_ZN9EtherCard16DhcpStateMachineEj+0x5e>
     4cc:	cf c0       	rjmp	.+414    	; 0x66c <_ZN9EtherCard16DhcpStateMachineEj+0x1fc>
            send_dhcp_message(myip);
     4ce:	8a e1       	ldi	r24, 0x1A	; 26
     4d0:	95 e0       	ldi	r25, 0x05	; 5
     4d2:	12 df       	rcall	.-476    	; 0x2f8 <_ZL17send_dhcp_messagePh>
            dhcpState = DHCP_STATE_RENEWING;
     4d4:	84 e0       	ldi	r24, 0x04	; 4
     4d6:	80 93 f3 02 	sts	0x02F3, r24	; 0x8002f3 <_ZL9dhcpState>
     4da:	c8 c0       	rjmp	.+400    	; 0x66c <_ZN9EtherCard16DhcpStateMachineEj+0x1fc>
        break;

    case DHCP_STATE_INIT:
		//TODO replaced millis()
        //currentXid = millis();
        memset(myip,0,IP_LEN); // force ip 0.0.0.0
     4dc:	84 e0       	ldi	r24, 0x04	; 4
     4de:	ea e1       	ldi	r30, 0x1A	; 26
     4e0:	f5 e0       	ldi	r31, 0x05	; 5
     4e2:	df 01       	movw	r26, r30
     4e4:	1d 92       	st	X+, r1
     4e6:	8a 95       	dec	r24
     4e8:	e9 f7       	brne	.-6      	; 0x4e4 <_ZN9EtherCard16DhcpStateMachineEj+0x74>
        send_dhcp_message(NULL);
     4ea:	80 e0       	ldi	r24, 0x00	; 0
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	04 df       	rcall	.-504    	; 0x2f8 <_ZL17send_dhcp_messagePh>
        enableBroadcast(true); //Temporarily enable broadcasts
     4f0:	81 e0       	ldi	r24, 0x01	; 1
     4f2:	04 d3       	rcall	.+1544   	; 0xafc <_ZN8ENC28J6015enableBroadcastEb>
     4f4:	81 e0       	ldi	r24, 0x01	; 1
        dhcpState = DHCP_STATE_SELECTING;
     4f6:	80 93 f3 02 	sts	0x02F3, r24	; 0x8002f3 <_ZL9dhcpState>
     4fa:	b8 c0       	rjmp	.+368    	; 0x66c <_ZN9EtherCard16DhcpStateMachineEj+0x1fc>
		//TODO replaced millis()
        //stateTimer = millis();
        break;

    case DHCP_STATE_SELECTING:
        if (dhcp_received_message_type(len, DHCP_OFFER)) {
     4fc:	62 e0       	ldi	r22, 0x02	; 2
     4fe:	c8 01       	movw	r24, r16
     500:	c6 de       	rcall	.-628    	; 0x28e <_ZL26dhcp_received_message_typejh>
     502:	88 23       	and	r24, r24
     504:	09 f4       	brne	.+2      	; 0x508 <_ZN9EtherCard16DhcpStateMachineEj+0x98>
     506:	b2 c0       	rjmp	.+356    	; 0x66c <_ZN9EtherCard16DhcpStateMachineEj+0x1fc>
     508:	68 e3       	ldi	r22, 0x38	; 56
static void process_dhcp_offer(uint16_t len, uint8_t *offeredip) {
    // Map struct onto payload
    DHCPdata *dhcpPtr = (DHCPdata*) (gPB + UDP_DATA_P);

    // Offered IP address is in yiaddr
    EtherCard::copyIp(offeredip, dhcpPtr->yiaddr);
     50a:	73 e0       	ldi	r23, 0x03	; 3
     50c:	ce 01       	movw	r24, r28
     50e:	01 96       	adiw	r24, 0x01	; 1
     510:	0e 94 21 0c 	call	0x1842	; 0x1842 <_ZN9EtherCard6copyIpEPhPKh>
     514:	e8 e1       	ldi	r30, 0x18	; 24

    // Search for the server IP
    uint8_t *ptr = (uint8_t*) (dhcpPtr + 1) + 4;
     516:	f4 e0       	ldi	r31, 0x04	; 4
     518:	02 50       	subi	r16, 0x02	; 2
        if (option == DHCP_OPT_SERVER_IDENTIFIER) {
            EtherCard::copyIp(EtherCard::dhcpip, ptr);
            break;
        }
        ptr += optionLen;
    } while (ptr < gPB + len);
     51a:	1d 4f       	sbci	r17, 0xFD	; 253
     51c:	bf 01       	movw	r22, r30

    // Search for the server IP
    uint8_t *ptr = (uint8_t*) (dhcpPtr + 1) + 4;
    do {
        uint8_t option = *ptr++;
        uint8_t optionLen = *ptr++;
     51e:	6e 5f       	subi	r22, 0xFE	; 254
     520:	7f 4f       	sbci	r23, 0xFF	; 255
     522:	91 81       	ldd	r25, Z+1	; 0x01
     524:	80 81       	ld	r24, Z
        if (option == DHCP_OPT_SERVER_IDENTIFIER) {
     526:	86 33       	cpi	r24, 0x36	; 54
     528:	29 f4       	brne	.+10     	; 0x534 <_ZN9EtherCard16DhcpStateMachineEj+0xc4>
     52a:	8a e0       	ldi	r24, 0x0A	; 10
            EtherCard::copyIp(EtherCard::dhcpip, ptr);
     52c:	95 e0       	ldi	r25, 0x05	; 5
     52e:	0e 94 21 0c 	call	0x1842	; 0x1842 <_ZN9EtherCard6copyIpEPhPKh>
     532:	06 c0       	rjmp	.+12     	; 0x540 <_ZN9EtherCard16DhcpStateMachineEj+0xd0>
     534:	fb 01       	movw	r30, r22
            break;
        }
        ptr += optionLen;
     536:	e9 0f       	add	r30, r25
     538:	f1 1d       	adc	r31, r1
     53a:	e0 17       	cp	r30, r16
    } while (ptr < gPB + len);
     53c:	f1 07       	cpc	r31, r17
     53e:	70 f3       	brcs	.-36     	; 0x51c <_ZN9EtherCard16DhcpStateMachineEj+0xac>

    case DHCP_STATE_SELECTING:
        if (dhcp_received_message_type(len, DHCP_OFFER)) {
            uint8_t offeredip[IP_LEN];
            process_dhcp_offer(len, offeredip);
            send_dhcp_message(offeredip);
     540:	ce 01       	movw	r24, r28
     542:	01 96       	adiw	r24, 0x01	; 1
     544:	d9 de       	rcall	.-590    	; 0x2f8 <_ZL17send_dhcp_messagePh>
     546:	82 e0       	ldi	r24, 0x02	; 2
            dhcpState = DHCP_STATE_REQUESTING;
     548:	80 93 f3 02 	sts	0x02F3, r24	; 0x8002f3 <_ZL9dhcpState>
     54c:	8f c0       	rjmp	.+286    	; 0x66c <_ZN9EtherCard16DhcpStateMachineEj+0x1fc>
        }
        break;

    case DHCP_STATE_REQUESTING:
    case DHCP_STATE_RENEWING:
        if (dhcp_received_message_type(len, DHCP_ACK)) {
     54e:	65 e0       	ldi	r22, 0x05	; 5
     550:	c8 01       	movw	r24, r16
     552:	9d de       	rcall	.-710    	; 0x28e <_ZL26dhcp_received_message_typejh>
     554:	88 23       	and	r24, r24
     556:	09 f4       	brne	.+2      	; 0x55a <_ZN9EtherCard16DhcpStateMachineEj+0xea>
     558:	89 c0       	rjmp	.+274    	; 0x66c <_ZN9EtherCard16DhcpStateMachineEj+0x1fc>
            disableBroadcast(true); //Disable broadcast after temporary enable
     55a:	81 e0       	ldi	r24, 0x01	; 1
     55c:	de d2       	rcall	.+1468   	; 0xb1a <_ZN8ENC28J6016disableBroadcastEb>
     55e:	68 e3       	ldi	r22, 0x38	; 56
static void process_dhcp_ack(uint16_t len) {
    // Map struct onto payload
    DHCPdata *dhcpPtr = (DHCPdata*) (gPB + UDP_DATA_P);

    // Allocated IP address is in yiaddr
    EtherCard::copyIp(EtherCard::myip, dhcpPtr->yiaddr);
     560:	73 e0       	ldi	r23, 0x03	; 3
     562:	8a e1       	ldi	r24, 0x1A	; 26
     564:	95 e0       	ldi	r25, 0x05	; 5
     566:	0e 94 21 0c 	call	0x1842	; 0x1842 <_ZN9EtherCard6copyIpEPhPKh>
     56a:	e8 e1       	ldi	r30, 0x18	; 24

    // Scan through variable length option list identifying options we want
    uint8_t *ptr = (uint8_t*) (dhcpPtr + 1) + 4;
     56c:	f4 e0       	ldi	r31, 0x04	; 4
     56e:	91 2c       	mov	r9, r1
     570:	a1 2c       	mov	r10, r1
     572:	b1 2c       	mov	r11, r1
     574:	c1 2c       	mov	r12, r1
     576:	02 50       	subi	r16, 0x02	; 2
                dhcpCustomOptionCallback(option, ptr, optionLen);
            }
        }
        }
        ptr += optionLen;
    } while (!done && ptr < gPB + len);
     578:	1d 4f       	sbci	r17, 0xFD	; 253
     57a:	80 81       	ld	r24, Z

    // Scan through variable length option list identifying options we want
    uint8_t *ptr = (uint8_t*) (dhcpPtr + 1) + 4;
    bool done = false;
    do {
        uint8_t option = *ptr++;
     57c:	7f 01       	movw	r14, r30
        uint8_t optionLen = *ptr++;
     57e:	b2 e0       	ldi	r27, 0x02	; 2
     580:	eb 0e       	add	r14, r27
     582:	f1 1c       	adc	r15, r1
     584:	d1 80       	ldd	r13, Z+1	; 0x01
     586:	86 30       	cpi	r24, 0x06	; 6
        switch (option) {
     588:	d9 f0       	breq	.+54     	; 0x5c0 <_ZN9EtherCard16DhcpStateMachineEj+0x150>
     58a:	28 f4       	brcc	.+10     	; 0x596 <_ZN9EtherCard16DhcpStateMachineEj+0x126>
     58c:	81 30       	cpi	r24, 0x01	; 1
     58e:	61 f0       	breq	.+24     	; 0x5a8 <_ZN9EtherCard16DhcpStateMachineEj+0x138>
     590:	83 30       	cpi	r24, 0x03	; 3
     592:	81 f0       	breq	.+32     	; 0x5b4 <_ZN9EtherCard16DhcpStateMachineEj+0x144>
     594:	4a c0       	rjmp	.+148    	; 0x62a <_ZN9EtherCard16DhcpStateMachineEj+0x1ba>
     596:	8a 33       	cpi	r24, 0x3A	; 58
     598:	c9 f0       	breq	.+50     	; 0x5cc <_ZN9EtherCard16DhcpStateMachineEj+0x15c>
     59a:	8f 3f       	cpi	r24, 0xFF	; 255
     59c:	09 f4       	brne	.+2      	; 0x5a0 <_ZN9EtherCard16DhcpStateMachineEj+0x130>
     59e:	53 c0       	rjmp	.+166    	; 0x646 <_ZN9EtherCard16DhcpStateMachineEj+0x1d6>
     5a0:	83 33       	cpi	r24, 0x33	; 51
     5a2:	09 f0       	breq	.+2      	; 0x5a6 <_ZN9EtherCard16DhcpStateMachineEj+0x136>
     5a4:	42 c0       	rjmp	.+132    	; 0x62a <_ZN9EtherCard16DhcpStateMachineEj+0x1ba>
     5a6:	12 c0       	rjmp	.+36     	; 0x5cc <_ZN9EtherCard16DhcpStateMachineEj+0x15c>
     5a8:	b7 01       	movw	r22, r14
        case DHCP_OPT_SUBNET_MASK:
            EtherCard::copyIp(EtherCard::netmask, ptr);
     5aa:	86 e1       	ldi	r24, 0x16	; 22
     5ac:	95 e0       	ldi	r25, 0x05	; 5
     5ae:	0e 94 21 0c 	call	0x1842	; 0x1842 <_ZN9EtherCard6copyIpEPhPKh>
     5b2:	54 c0       	rjmp	.+168    	; 0x65c <_ZN9EtherCard16DhcpStateMachineEj+0x1ec>
     5b4:	b7 01       	movw	r22, r14
            break;
        case DHCP_OPT_ROUTERS:
            EtherCard::copyIp(EtherCard::gwip, ptr);
     5b6:	8e e0       	ldi	r24, 0x0E	; 14
     5b8:	95 e0       	ldi	r25, 0x05	; 5
     5ba:	0e 94 21 0c 	call	0x1842	; 0x1842 <_ZN9EtherCard6copyIpEPhPKh>
     5be:	4e c0       	rjmp	.+156    	; 0x65c <_ZN9EtherCard16DhcpStateMachineEj+0x1ec>
     5c0:	b7 01       	movw	r22, r14
            break;
        case DHCP_OPT_DOMAIN_NAME_SERVERS:
            EtherCard::copyIp(EtherCard::dnsip, ptr);
     5c2:	86 e0       	ldi	r24, 0x06	; 6
     5c4:	95 e0       	ldi	r25, 0x05	; 5
     5c6:	0e 94 21 0c 	call	0x1842	; 0x1842 <_ZN9EtherCard6copyIpEPhPKh>
     5ca:	48 c0       	rjmp	.+144    	; 0x65c <_ZN9EtherCard16DhcpStateMachineEj+0x1ec>
     5cc:	d7 01       	movw	r26, r14
     5ce:	36 96       	adiw	r30, 0x06	; 6
     5d0:	29 2d       	mov	r18, r9
     5d2:	3a 2d       	mov	r19, r10
     5d4:	4b 2d       	mov	r20, r11
     5d6:	5c 2d       	mov	r21, r12
     5d8:	8d 91       	ld	r24, X+
            break;
        case DHCP_OPT_LEASE_TIME:
        case DHCP_OPT_RENEWAL_TIME:
            leaseTime = 0;
            for (uint8_t i = 0; i<4; i++)
                leaseTime = (leaseTime << 8) + ptr[i];
     5da:	74 2f       	mov	r23, r20
     5dc:	63 2f       	mov	r22, r19
     5de:	52 2f       	mov	r21, r18
     5e0:	44 27       	eor	r20, r20
     5e2:	9a 01       	movw	r18, r20
     5e4:	ab 01       	movw	r20, r22
     5e6:	28 0f       	add	r18, r24
     5e8:	31 1d       	adc	r19, r1
     5ea:	41 1d       	adc	r20, r1
     5ec:	51 1d       	adc	r21, r1
     5ee:	ae 17       	cp	r26, r30
            EtherCard::copyIp(EtherCard::dnsip, ptr);
            break;
        case DHCP_OPT_LEASE_TIME:
        case DHCP_OPT_RENEWAL_TIME:
            leaseTime = 0;
            for (uint8_t i = 0; i<4; i++)
     5f0:	bf 07       	cpc	r27, r31
     5f2:	91 f7       	brne	.-28     	; 0x5d8 <_ZN9EtherCard16DhcpStateMachineEj+0x168>
     5f4:	20 93 ef 02 	sts	0x02EF, r18	; 0x8002ef <_ZL9leaseTime>
     5f8:	30 93 f0 02 	sts	0x02F0, r19	; 0x8002f0 <_ZL9leaseTime+0x1>
     5fc:	40 93 f1 02 	sts	0x02F1, r20	; 0x8002f1 <_ZL9leaseTime+0x2>
     600:	50 93 f2 02 	sts	0x02F2, r21	; 0x8002f2 <_ZL9leaseTime+0x3>
     604:	2f 3f       	cpi	r18, 0xFF	; 255
                leaseTime = (leaseTime << 8) + ptr[i];
            if (leaseTime != DHCP_INFINITE_LEASE) {
     606:	8f ef       	ldi	r24, 0xFF	; 255
     608:	38 07       	cpc	r19, r24
     60a:	48 07       	cpc	r20, r24
     60c:	58 07       	cpc	r21, r24
     60e:	31 f1       	breq	.+76     	; 0x65c <_ZN9EtherCard16DhcpStateMachineEj+0x1ec>
     610:	a8 ee       	ldi	r26, 0xE8	; 232
                leaseTime *= 1000;      // milliseconds
     612:	b3 e0       	ldi	r27, 0x03	; 3
     614:	0e 94 72 11 	call	0x22e4	; 0x22e4 <__muluhisi3>
     618:	60 93 ef 02 	sts	0x02EF, r22	; 0x8002ef <_ZL9leaseTime>
     61c:	70 93 f0 02 	sts	0x02F0, r23	; 0x8002f0 <_ZL9leaseTime+0x1>
     620:	80 93 f1 02 	sts	0x02F1, r24	; 0x8002f1 <_ZL9leaseTime+0x2>
     624:	90 93 f2 02 	sts	0x02F2, r25	; 0x8002f2 <_ZL9leaseTime+0x3>
     628:	19 c0       	rjmp	.+50     	; 0x65c <_ZN9EtherCard16DhcpStateMachineEj+0x1ec>
     62a:	e0 91 ea 02 	lds	r30, 0x02EA	; 0x8002ea <_ZL24dhcpCustomOptionCallback>
        case DHCP_OPT_END:
            done = true;
            break;
        default: {
            // Is is a custom configured option?
            if (dhcpCustomOptionCallback && option == dhcpCustomOptionNum) {
     62e:	f0 91 eb 02 	lds	r31, 0x02EB	; 0x8002eb <_ZL24dhcpCustomOptionCallback+0x1>
     632:	30 97       	sbiw	r30, 0x00	; 0
     634:	99 f0       	breq	.+38     	; 0x65c <_ZN9EtherCard16DhcpStateMachineEj+0x1ec>
     636:	90 91 ec 02 	lds	r25, 0x02EC	; 0x8002ec <_ZL19dhcpCustomOptionNum>
     63a:	89 13       	cpse	r24, r25
     63c:	0f c0       	rjmp	.+30     	; 0x65c <_ZN9EtherCard16DhcpStateMachineEj+0x1ec>
     63e:	4d 2d       	mov	r20, r13
                dhcpCustomOptionCallback(option, ptr, optionLen);
     640:	b7 01       	movw	r22, r14
     642:	19 95       	eicall
     644:	0b c0       	rjmp	.+22     	; 0x65c <_ZN9EtherCard16DhcpStateMachineEj+0x1ec>
        if (dhcp_received_message_type(len, DHCP_ACK)) {
            disableBroadcast(true); //Disable broadcast after temporary enable
            process_dhcp_ack(len);
			//TODO repalced millis()
            //leaseStart = millis();
            if (gwip[0] != 0) setGwIp(gwip); // why is this? because it initiates an arp request
     646:	80 91 0e 05 	lds	r24, 0x050E	; 0x80050e <_ZN9EtherCard4gwipE>
     64a:	88 23       	and	r24, r24
     64c:	19 f0       	breq	.+6      	; 0x654 <_ZN9EtherCard16DhcpStateMachineEj+0x1e4>
     64e:	8e e0       	ldi	r24, 0x0E	; 14
     650:	95 e0       	ldi	r25, 0x05	; 5
     652:	0b d5       	rcall	.+2582   	; 0x106a <_ZN9EtherCard7setGwIpEPKh>
     654:	83 e0       	ldi	r24, 0x03	; 3
            dhcpState = DHCP_STATE_BOUND;
     656:	80 93 f3 02 	sts	0x02F3, r24	; 0x8002f3 <_ZL9dhcpState>
     65a:	08 c0       	rjmp	.+16     	; 0x66c <_ZN9EtherCard16DhcpStateMachineEj+0x1fc>
            }*/
        }
        break;

    }
}
     65c:	f7 01       	movw	r30, r14
            if (dhcpCustomOptionCallback && option == dhcpCustomOptionNum) {
                dhcpCustomOptionCallback(option, ptr, optionLen);
            }
        }
        }
        ptr += optionLen;
     65e:	ed 0d       	add	r30, r13
     660:	f1 1d       	adc	r31, r1
     662:	e0 17       	cp	r30, r16
    } while (!done && ptr < gPB + len);
     664:	f1 07       	cpc	r31, r17
     666:	08 f4       	brcc	.+2      	; 0x66a <_ZN9EtherCard16DhcpStateMachineEj+0x1fa>
     668:	88 cf       	rjmp	.-240    	; 0x57a <_ZN9EtherCard16DhcpStateMachineEj+0x10a>
     66a:	ed cf       	rjmp	.-38     	; 0x646 <_ZN9EtherCard16DhcpStateMachineEj+0x1d6>
     66c:	0f 90       	pop	r0
            }*/
        }
        break;

    }
}
     66e:	0f 90       	pop	r0
     670:	0f 90       	pop	r0
     672:	0f 90       	pop	r0
     674:	df 91       	pop	r29
     676:	cf 91       	pop	r28
     678:	1f 91       	pop	r17
     67a:	0f 91       	pop	r16
     67c:	ff 90       	pop	r15
     67e:	ef 90       	pop	r14
     680:	df 90       	pop	r13
     682:	cf 90       	pop	r12
     684:	bf 90       	pop	r11
     686:	af 90       	pop	r10
     688:	9f 90       	pop	r9
     68a:	08 95       	ret

0000068c <_ZL10enableChipv>:
     68c:	f8 94       	cli
}

void ENC28J60::powerUp() {
    writeOp(ENC28J60_BIT_FIELD_CLR, ECON2, ECON2_PWRSV);
    while(!readRegByte(ESTAT) & ESTAT_CLKRDY);
    writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN);
     68e:	e0 91 f8 02 	lds	r30, 0x02F8	; 0x8002f8 <_ZL10selectPort>
     692:	f0 91 f9 02 	lds	r31, 0x02F9	; 0x8002f9 <_ZL10selectPort+0x1>
     696:	90 81       	ld	r25, Z
     698:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <_ZL9selectPin>
     69c:	80 95       	com	r24
     69e:	89 23       	and	r24, r25
     6a0:	80 83       	st	Z, r24
     6a2:	08 95       	ret

000006a4 <_ZL11disableChipv>:
     6a4:	e0 91 f8 02 	lds	r30, 0x02F8	; 0x8002f8 <_ZL10selectPort>
     6a8:	f0 91 f9 02 	lds	r31, 0x02F9	; 0x8002f9 <_ZL10selectPort+0x1>
     6ac:	90 81       	ld	r25, Z
     6ae:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <_ZL9selectPin>
     6b2:	89 2b       	or	r24, r25
     6b4:	80 83       	st	Z, r24
     6b6:	78 94       	sei
     6b8:	08 95       	ret

000006ba <_ZL7xferSPIh>:
     6ba:	8e bd       	out	0x2e, r24	; 46
     6bc:	0d b4       	in	r0, 0x2d	; 45
     6be:	07 fe       	sbrs	r0, 7
     6c0:	fd cf       	rjmp	.-6      	; 0x6bc <_ZL7xferSPIh+0x2>
     6c2:	08 95       	ret

000006c4 <_ZL7writeOphhh>:
     6c4:	1f 93       	push	r17
     6c6:	cf 93       	push	r28
     6c8:	df 93       	push	r29
     6ca:	18 2f       	mov	r17, r24
     6cc:	c6 2f       	mov	r28, r22
     6ce:	d4 2f       	mov	r29, r20
     6d0:	dd df       	rcall	.-70     	; 0x68c <_ZL10enableChipv>
     6d2:	8c 2f       	mov	r24, r28
     6d4:	8f 71       	andi	r24, 0x1F	; 31
     6d6:	81 2b       	or	r24, r17
     6d8:	f0 df       	rcall	.-32     	; 0x6ba <_ZL7xferSPIh>
     6da:	8d 2f       	mov	r24, r29
     6dc:	ee df       	rcall	.-36     	; 0x6ba <_ZL7xferSPIh>
     6de:	e2 df       	rcall	.-60     	; 0x6a4 <_ZL11disableChipv>
     6e0:	df 91       	pop	r29
     6e2:	cf 91       	pop	r28
     6e4:	1f 91       	pop	r17
     6e6:	08 95       	ret

000006e8 <_ZL7readBufjPh>:
     6e8:	0f 93       	push	r16
     6ea:	1f 93       	push	r17
     6ec:	cf 93       	push	r28
     6ee:	df 93       	push	r29
     6f0:	ec 01       	movw	r28, r24
     6f2:	8b 01       	movw	r16, r22
     6f4:	cb df       	rcall	.-106    	; 0x68c <_ZL10enableChipv>
     6f6:	20 97       	sbiw	r28, 0x00	; 0
     6f8:	c1 f0       	breq	.+48     	; 0x72a <_ZL7readBufjPh+0x42>
     6fa:	8a e3       	ldi	r24, 0x3A	; 58
     6fc:	de df       	rcall	.-68     	; 0x6ba <_ZL7xferSPIh>
     6fe:	1e bc       	out	0x2e, r1	; 46
     700:	21 97       	sbiw	r28, 0x01	; 1
     702:	69 f0       	breq	.+26     	; 0x71e <_ZL7readBufjPh+0x36>
     704:	f8 01       	movw	r30, r16
     706:	0c 0f       	add	r16, r28
     708:	1d 1f       	adc	r17, r29
     70a:	98 01       	movw	r18, r16
     70c:	0d b4       	in	r0, 0x2d	; 45
     70e:	07 fe       	sbrs	r0, 7
     710:	fd cf       	rjmp	.-6      	; 0x70c <_ZL7readBufjPh+0x24>
     712:	8e b5       	in	r24, 0x2e	; 46
     714:	1e bc       	out	0x2e, r1	; 46
     716:	81 93       	st	Z+, r24
     718:	e2 17       	cp	r30, r18
     71a:	f3 07       	cpc	r31, r19
     71c:	b9 f7       	brne	.-18     	; 0x70c <_ZL7readBufjPh+0x24>
     71e:	0d b4       	in	r0, 0x2d	; 45
     720:	07 fe       	sbrs	r0, 7
     722:	fd cf       	rjmp	.-6      	; 0x71e <_ZL7readBufjPh+0x36>
     724:	8e b5       	in	r24, 0x2e	; 46
     726:	f8 01       	movw	r30, r16
     728:	80 83       	st	Z, r24
     72a:	bc df       	rcall	.-136    	; 0x6a4 <_ZL11disableChipv>
     72c:	df 91       	pop	r29
     72e:	cf 91       	pop	r28
     730:	1f 91       	pop	r17
     732:	0f 91       	pop	r16
     734:	08 95       	ret

00000736 <_ZL8writeBufjPKh>:
     736:	0f 93       	push	r16
     738:	1f 93       	push	r17
     73a:	cf 93       	push	r28
     73c:	df 93       	push	r29
     73e:	ec 01       	movw	r28, r24
     740:	8b 01       	movw	r16, r22
     742:	a4 df       	rcall	.-184    	; 0x68c <_ZL10enableChipv>
     744:	20 97       	sbiw	r28, 0x00	; 0
     746:	c1 f0       	breq	.+48     	; 0x778 <_ZL8writeBufjPKh+0x42>
     748:	8a e7       	ldi	r24, 0x7A	; 122
     74a:	b7 df       	rcall	.-146    	; 0x6ba <_ZL7xferSPIh>
     74c:	f8 01       	movw	r30, r16
     74e:	31 96       	adiw	r30, 0x01	; 1
     750:	d8 01       	movw	r26, r16
     752:	8c 91       	ld	r24, X
     754:	8e bd       	out	0x2e, r24	; 46
     756:	c1 30       	cpi	r28, 0x01	; 1
     758:	d1 05       	cpc	r29, r1
     75a:	59 f0       	breq	.+22     	; 0x772 <_ZL8writeBufjPKh+0x3c>
     75c:	b8 01       	movw	r22, r16
     75e:	6c 0f       	add	r22, r28
     760:	7d 1f       	adc	r23, r29
     762:	91 91       	ld	r25, Z+
     764:	0d b4       	in	r0, 0x2d	; 45
     766:	07 fe       	sbrs	r0, 7
     768:	fd cf       	rjmp	.-6      	; 0x764 <_ZL8writeBufjPKh+0x2e>
     76a:	9e bd       	out	0x2e, r25	; 46
     76c:	e6 17       	cp	r30, r22
     76e:	f7 07       	cpc	r31, r23
     770:	c1 f7       	brne	.-16     	; 0x762 <_ZL8writeBufjPKh+0x2c>
     772:	0d b4       	in	r0, 0x2d	; 45
     774:	07 fe       	sbrs	r0, 7
     776:	fd cf       	rjmp	.-6      	; 0x772 <_ZL8writeBufjPKh+0x3c>
     778:	95 df       	rcall	.-214    	; 0x6a4 <_ZL11disableChipv>
     77a:	df 91       	pop	r29
     77c:	cf 91       	pop	r28
     77e:	1f 91       	pop	r17
     780:	0f 91       	pop	r16
     782:	08 95       	ret

00000784 <_ZL7SetBankh>:
     784:	1f 93       	push	r17
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
     78a:	18 2f       	mov	r17, r24
     78c:	10 76       	andi	r17, 0x60	; 96
     78e:	c1 2f       	mov	r28, r17
     790:	d0 e0       	ldi	r29, 0x00	; 0
     792:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <_ZL12Enc28j60Bank>
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	c8 17       	cp	r28, r24
     79a:	d9 07       	cpc	r29, r25
     79c:	a1 f0       	breq	.+40     	; 0x7c6 <_ZL7SetBankh+0x42>
     79e:	43 e0       	ldi	r20, 0x03	; 3
     7a0:	6f e1       	ldi	r22, 0x1F	; 31
     7a2:	80 ea       	ldi	r24, 0xA0	; 160
     7a4:	8f df       	rcall	.-226    	; 0x6c4 <_ZL7writeOphhh>
     7a6:	10 93 fa 02 	sts	0x02FA, r17	; 0x8002fa <_ZL12Enc28j60Bank>
     7aa:	ae 01       	movw	r20, r28
     7ac:	55 95       	asr	r21
     7ae:	47 95       	ror	r20
     7b0:	55 95       	asr	r21
     7b2:	47 95       	ror	r20
     7b4:	55 95       	asr	r21
     7b6:	47 95       	ror	r20
     7b8:	55 95       	asr	r21
     7ba:	47 95       	ror	r20
     7bc:	55 95       	asr	r21
     7be:	47 95       	ror	r20
     7c0:	6f e1       	ldi	r22, 0x1F	; 31
     7c2:	80 e8       	ldi	r24, 0x80	; 128
     7c4:	7f df       	rcall	.-258    	; 0x6c4 <_ZL7writeOphhh>
     7c6:	df 91       	pop	r29
     7c8:	cf 91       	pop	r28
     7ca:	1f 91       	pop	r17
     7cc:	08 95       	ret

000007ce <_ZL11readRegByteh>:
     7ce:	cf 93       	push	r28
     7d0:	c8 2f       	mov	r28, r24
     7d2:	d8 df       	rcall	.-80     	; 0x784 <_ZL7SetBankh>
     7d4:	5b df       	rcall	.-330    	; 0x68c <_ZL10enableChipv>
     7d6:	8c 2f       	mov	r24, r28
     7d8:	8f 71       	andi	r24, 0x1F	; 31
     7da:	6f df       	rcall	.-290    	; 0x6ba <_ZL7xferSPIh>
     7dc:	80 e0       	ldi	r24, 0x00	; 0
     7de:	6d df       	rcall	.-294    	; 0x6ba <_ZL7xferSPIh>
     7e0:	cc 23       	and	r28, r28
     7e2:	14 f4       	brge	.+4      	; 0x7e8 <_ZL11readRegByteh+0x1a>
     7e4:	80 e0       	ldi	r24, 0x00	; 0
     7e6:	69 df       	rcall	.-302    	; 0x6ba <_ZL7xferSPIh>
     7e8:	ce b5       	in	r28, 0x2e	; 46
     7ea:	5c df       	rcall	.-328    	; 0x6a4 <_ZL11disableChipv>
     7ec:	8c 2f       	mov	r24, r28
     7ee:	cf 91       	pop	r28
     7f0:	08 95       	ret

000007f2 <_ZL12writeRegBytehh>:
     7f2:	cf 93       	push	r28
     7f4:	df 93       	push	r29
     7f6:	c8 2f       	mov	r28, r24
     7f8:	d6 2f       	mov	r29, r22
     7fa:	c4 df       	rcall	.-120    	; 0x784 <_ZL7SetBankh>
     7fc:	4d 2f       	mov	r20, r29
     7fe:	6c 2f       	mov	r22, r28
     800:	80 e4       	ldi	r24, 0x40	; 64
     802:	60 df       	rcall	.-320    	; 0x6c4 <_ZL7writeOphhh>
     804:	df 91       	pop	r29
     806:	cf 91       	pop	r28
     808:	08 95       	ret

0000080a <_ZL8writeReghj>:
     80a:	cf 93       	push	r28
     80c:	df 93       	push	r29
     80e:	c8 2f       	mov	r28, r24
     810:	d7 2f       	mov	r29, r23
     812:	ef df       	rcall	.-34     	; 0x7f2 <_ZL12writeRegBytehh>
     814:	6d 2f       	mov	r22, r29
     816:	81 e0       	ldi	r24, 0x01	; 1
     818:	8c 0f       	add	r24, r28
     81a:	eb df       	rcall	.-42     	; 0x7f2 <_ZL12writeRegBytehh>
     81c:	df 91       	pop	r29
     81e:	cf 91       	pop	r28
     820:	08 95       	ret

00000822 <_ZL8writePhyhj>:
     822:	cf 93       	push	r28
     824:	df 93       	push	r29
     826:	eb 01       	movw	r28, r22
     828:	68 2f       	mov	r22, r24
     82a:	84 ed       	ldi	r24, 0xD4	; 212
     82c:	e2 df       	rcall	.-60     	; 0x7f2 <_ZL12writeRegBytehh>
     82e:	be 01       	movw	r22, r28
     830:	86 ed       	ldi	r24, 0xD6	; 214
     832:	eb df       	rcall	.-42     	; 0x80a <_ZL8writeReghj>
     834:	8a ee       	ldi	r24, 0xEA	; 234
     836:	cb df       	rcall	.-106    	; 0x7ce <_ZL11readRegByteh>
     838:	80 fd       	sbrc	r24, 0
     83a:	fc cf       	rjmp	.-8      	; 0x834 <_ZL8writePhyhj+0x12>
     83c:	df 91       	pop	r29
     83e:	cf 91       	pop	r28
     840:	08 95       	ret

00000842 <_ZN8ENC28J607initSPIEv>:
     842:	20 9a       	sbi	0x04, 0	; 4
     844:	28 9a       	sbi	0x05, 0	; 5
     846:	22 9a       	sbi	0x04, 2	; 4
     848:	21 9a       	sbi	0x04, 1	; 4
     84a:	23 98       	cbi	0x04, 3	; 4
     84c:	2a 9a       	sbi	0x05, 2	; 5
     84e:	2a 98       	cbi	0x05, 2	; 5
     850:	29 98       	cbi	0x05, 1	; 5
     852:	80 e5       	ldi	r24, 0x50	; 80
     854:	8c bd       	out	0x2c, r24	; 44
     856:	8d b5       	in	r24, 0x2d	; 45
     858:	81 60       	ori	r24, 0x01	; 1
     85a:	8d bd       	out	0x2d, r24	; 45
     85c:	08 95       	ret

0000085e <_ZN8ENC28J6010initializeEjPKhRVhS3_h>:
     85e:	cf 92       	push	r12
     860:	df 92       	push	r13
     862:	ef 92       	push	r14
     864:	ff 92       	push	r15
     866:	0f 93       	push	r16
     868:	cf 93       	push	r28
     86a:	df 93       	push	r29
     86c:	7b 01       	movw	r14, r22
     86e:	ea 01       	movw	r28, r20
     870:	69 01       	movw	r12, r18
     872:	90 93 fd 02 	sts	0x02FD, r25	; 0x8002fd <_ZN8ENC28J6010bufferSizeE+0x1>
     876:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <_ZN8ENC28J6010bufferSizeE>
     87a:	0c b4       	in	r0, 0x2c	; 44
     87c:	06 fe       	sbrs	r0, 6
     87e:	e1 df       	rcall	.-62     	; 0x842 <_ZN8ENC28J607initSPIEv>
     880:	00 93 f7 02 	sts	0x02F7, r16	; 0x8002f7 <_ZL9selectPin>
     884:	d0 92 f9 02 	sts	0x02F9, r13	; 0x8002f9 <_ZL10selectPort+0x1>
     888:	c0 92 f8 02 	sts	0x02F8, r12	; 0x8002f8 <_ZL10selectPort>
     88c:	88 81       	ld	r24, Y
     88e:	08 2b       	or	r16, r24
     890:	08 83       	st	Y, r16
     892:	08 df       	rcall	.-496    	; 0x6a4 <_ZL11disableChipv>
     894:	4f ef       	ldi	r20, 0xFF	; 255
     896:	60 e0       	ldi	r22, 0x00	; 0
     898:	8f ef       	ldi	r24, 0xFF	; 255
     89a:	14 df       	rcall	.-472    	; 0x6c4 <_ZL7writeOphhh>
     89c:	83 ef       	ldi	r24, 0xF3	; 243
     89e:	91 e0       	ldi	r25, 0x01	; 1
     8a0:	01 97       	sbiw	r24, 0x01	; 1
     8a2:	f1 f7       	brne	.-4      	; 0x8a0 <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0x42>
     8a4:	00 c0       	rjmp	.+0      	; 0x8a6 <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0x48>
     8a6:	00 00       	nop
     8a8:	f1 de       	rcall	.-542    	; 0x68c <_ZL10enableChipv>
     8aa:	8d e1       	ldi	r24, 0x1D	; 29
     8ac:	06 df       	rcall	.-500    	; 0x6ba <_ZL7xferSPIh>
     8ae:	80 e0       	ldi	r24, 0x00	; 0
     8b0:	04 df       	rcall	.-504    	; 0x6ba <_ZL7xferSPIh>
     8b2:	ce b5       	in	r28, 0x2e	; 46
     8b4:	f7 de       	rcall	.-530    	; 0x6a4 <_ZL11disableChipv>
     8b6:	cc 23       	and	r28, r28
     8b8:	b9 f3       	breq	.-18     	; 0x8a8 <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0x4a>
     8ba:	60 e0       	ldi	r22, 0x00	; 0
     8bc:	70 e0       	ldi	r23, 0x00	; 0
     8be:	88 e0       	ldi	r24, 0x08	; 8
     8c0:	a4 df       	rcall	.-184    	; 0x80a <_ZL8writeReghj>
     8c2:	60 e0       	ldi	r22, 0x00	; 0
     8c4:	70 e0       	ldi	r23, 0x00	; 0
     8c6:	8c e0       	ldi	r24, 0x0C	; 12
     8c8:	a0 df       	rcall	.-192    	; 0x80a <_ZL8writeReghj>
     8ca:	6f ef       	ldi	r22, 0xFF	; 255
     8cc:	7b e0       	ldi	r23, 0x0B	; 11
     8ce:	8a e0       	ldi	r24, 0x0A	; 10
     8d0:	9c df       	rcall	.-200    	; 0x80a <_ZL8writeReghj>
     8d2:	60 e0       	ldi	r22, 0x00	; 0
     8d4:	7c e0       	ldi	r23, 0x0C	; 12
     8d6:	84 e0       	ldi	r24, 0x04	; 4
     8d8:	98 df       	rcall	.-208    	; 0x80a <_ZL8writeReghj>
     8da:	6f ef       	ldi	r22, 0xFF	; 255
     8dc:	71 e1       	ldi	r23, 0x11	; 17
     8de:	86 e0       	ldi	r24, 0x06	; 6
     8e0:	94 df       	rcall	.-216    	; 0x80a <_ZL8writeReghj>
     8e2:	66 e7       	ldi	r22, 0x76	; 118
     8e4:	74 e0       	ldi	r23, 0x04	; 4
     8e6:	84 e1       	ldi	r24, 0x14	; 20
     8e8:	9c df       	rcall	.-200    	; 0x822 <_ZL8writePhyhj>
     8ea:	61 eb       	ldi	r22, 0xB1	; 177
     8ec:	88 e3       	ldi	r24, 0x38	; 56
     8ee:	81 df       	rcall	.-254    	; 0x7f2 <_ZL12writeRegBytehh>
     8f0:	6f e3       	ldi	r22, 0x3F	; 63
     8f2:	70 e3       	ldi	r23, 0x30	; 48
     8f4:	88 e2       	ldi	r24, 0x28	; 40
     8f6:	89 df       	rcall	.-238    	; 0x80a <_ZL8writeReghj>
     8f8:	69 ef       	ldi	r22, 0xF9	; 249
     8fa:	77 ef       	ldi	r23, 0xF7	; 247
     8fc:	80 e3       	ldi	r24, 0x30	; 48
     8fe:	85 df       	rcall	.-246    	; 0x80a <_ZL8writeReghj>
     900:	61 e0       	ldi	r22, 0x01	; 1
     902:	80 ec       	ldi	r24, 0xC0	; 192
     904:	76 df       	rcall	.-276    	; 0x7f2 <_ZL12writeRegBytehh>
     906:	42 e3       	ldi	r20, 0x32	; 50
     908:	62 ec       	ldi	r22, 0xC2	; 194
     90a:	80 e8       	ldi	r24, 0x80	; 128
     90c:	db de       	rcall	.-586    	; 0x6c4 <_ZL7writeOphhh>
     90e:	62 e1       	ldi	r22, 0x12	; 18
     910:	7c e0       	ldi	r23, 0x0C	; 12
     912:	86 ec       	ldi	r24, 0xC6	; 198
     914:	7a df       	rcall	.-268    	; 0x80a <_ZL8writeReghj>
     916:	62 e1       	ldi	r22, 0x12	; 18
     918:	84 ec       	ldi	r24, 0xC4	; 196
     91a:	6b df       	rcall	.-298    	; 0x7f2 <_ZL12writeRegBytehh>
     91c:	6c ed       	ldi	r22, 0xDC	; 220
     91e:	75 e0       	ldi	r23, 0x05	; 5
     920:	8a ec       	ldi	r24, 0xCA	; 202
     922:	73 df       	rcall	.-282    	; 0x80a <_ZL8writeReghj>
     924:	f7 01       	movw	r30, r14
     926:	60 81       	ld	r22, Z
     928:	84 ee       	ldi	r24, 0xE4	; 228
     92a:	63 df       	rcall	.-314    	; 0x7f2 <_ZL12writeRegBytehh>
     92c:	f7 01       	movw	r30, r14
     92e:	61 81       	ldd	r22, Z+1	; 0x01
     930:	85 ee       	ldi	r24, 0xE5	; 229
     932:	5f df       	rcall	.-322    	; 0x7f2 <_ZL12writeRegBytehh>
     934:	f7 01       	movw	r30, r14
     936:	62 81       	ldd	r22, Z+2	; 0x02
     938:	82 ee       	ldi	r24, 0xE2	; 226
     93a:	5b df       	rcall	.-330    	; 0x7f2 <_ZL12writeRegBytehh>
     93c:	f7 01       	movw	r30, r14
     93e:	63 81       	ldd	r22, Z+3	; 0x03
     940:	83 ee       	ldi	r24, 0xE3	; 227
     942:	57 df       	rcall	.-338    	; 0x7f2 <_ZL12writeRegBytehh>
     944:	f7 01       	movw	r30, r14
     946:	64 81       	ldd	r22, Z+4	; 0x04
     948:	80 ee       	ldi	r24, 0xE0	; 224
     94a:	53 df       	rcall	.-346    	; 0x7f2 <_ZL12writeRegBytehh>
     94c:	f7 01       	movw	r30, r14
     94e:	65 81       	ldd	r22, Z+5	; 0x05
     950:	81 ee       	ldi	r24, 0xE1	; 225
     952:	4f df       	rcall	.-354    	; 0x7f2 <_ZL12writeRegBytehh>
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	71 e0       	ldi	r23, 0x01	; 1
     958:	80 e1       	ldi	r24, 0x10	; 16
     95a:	63 df       	rcall	.-314    	; 0x822 <_ZL8writePhyhj>
     95c:	8f e1       	ldi	r24, 0x1F	; 31
     95e:	12 df       	rcall	.-476    	; 0x784 <_ZL7SetBankh>
     960:	40 ec       	ldi	r20, 0xC0	; 192
     962:	6b e1       	ldi	r22, 0x1B	; 27
     964:	80 e8       	ldi	r24, 0x80	; 128
     966:	ae de       	rcall	.-676    	; 0x6c4 <_ZL7writeOphhh>
     968:	44 e0       	ldi	r20, 0x04	; 4
     96a:	6f e1       	ldi	r22, 0x1F	; 31
     96c:	80 e8       	ldi	r24, 0x80	; 128
     96e:	aa de       	rcall	.-684    	; 0x6c4 <_ZL7writeOphhh>
     970:	82 e7       	ldi	r24, 0x72	; 114
     972:	2d df       	rcall	.-422    	; 0x7ce <_ZL11readRegByteh>
     974:	86 30       	cpi	r24, 0x06	; 6
     976:	08 f0       	brcs	.+2      	; 0x97a <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0x11c>
     978:	8f 5f       	subi	r24, 0xFF	; 255
     97a:	df 91       	pop	r29
     97c:	cf 91       	pop	r28
     97e:	0f 91       	pop	r16
     980:	ff 90       	pop	r15
     982:	ef 90       	pop	r14
     984:	df 90       	pop	r13
     986:	cf 90       	pop	r12
     988:	08 95       	ret

0000098a <_ZN8ENC28J608isLinkUpEv>:
     98a:	61 e1       	ldi	r22, 0x11	; 17
     98c:	84 ed       	ldi	r24, 0xD4	; 212
     98e:	31 df       	rcall	.-414    	; 0x7f2 <_ZL12writeRegBytehh>
     990:	61 e0       	ldi	r22, 0x01	; 1
     992:	82 ed       	ldi	r24, 0xD2	; 210
     994:	2e df       	rcall	.-420    	; 0x7f2 <_ZL12writeRegBytehh>
     996:	8a ee       	ldi	r24, 0xEA	; 234
     998:	1a df       	rcall	.-460    	; 0x7ce <_ZL11readRegByteh>
     99a:	80 fd       	sbrc	r24, 0
     99c:	fc cf       	rjmp	.-8      	; 0x996 <_ZN8ENC28J608isLinkUpEv+0xc>
     99e:	60 e0       	ldi	r22, 0x00	; 0
     9a0:	82 ed       	ldi	r24, 0xD2	; 210
     9a2:	27 df       	rcall	.-434    	; 0x7f2 <_ZL12writeRegBytehh>
     9a4:	89 ed       	ldi	r24, 0xD9	; 217
     9a6:	13 df       	rcall	.-474    	; 0x7ce <_ZL11readRegByteh>
     9a8:	82 fb       	bst	r24, 2
     9aa:	88 27       	eor	r24, r24
     9ac:	80 f9       	bld	r24, 0
     9ae:	08 95       	ret

000009b0 <_ZN8ENC28J6010packetSendEj>:
     9b0:	cf 93       	push	r28
     9b2:	df 93       	push	r29
     9b4:	ec 01       	movw	r28, r24
     9b6:	40 e8       	ldi	r20, 0x80	; 128
     9b8:	6f e1       	ldi	r22, 0x1F	; 31
     9ba:	80 e8       	ldi	r24, 0x80	; 128
     9bc:	83 de       	rcall	.-762    	; 0x6c4 <_ZL7writeOphhh>
     9be:	40 e8       	ldi	r20, 0x80	; 128
     9c0:	6f e1       	ldi	r22, 0x1F	; 31
     9c2:	80 ea       	ldi	r24, 0xA0	; 160
     9c4:	7f de       	rcall	.-770    	; 0x6c4 <_ZL7writeOphhh>
     9c6:	4a e0       	ldi	r20, 0x0A	; 10
     9c8:	6c e1       	ldi	r22, 0x1C	; 28
     9ca:	80 ea       	ldi	r24, 0xA0	; 160
     9cc:	7b de       	rcall	.-778    	; 0x6c4 <_ZL7writeOphhh>
     9ce:	60 e0       	ldi	r22, 0x00	; 0
     9d0:	7c e0       	ldi	r23, 0x0C	; 12
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	1a df       	rcall	.-460    	; 0x80a <_ZL8writeReghj>
     9d6:	be 01       	movw	r22, r28
     9d8:	74 5f       	subi	r23, 0xF4	; 244
     9da:	86 e0       	ldi	r24, 0x06	; 6
     9dc:	16 df       	rcall	.-468    	; 0x80a <_ZL8writeReghj>
     9de:	40 e0       	ldi	r20, 0x00	; 0
     9e0:	60 e0       	ldi	r22, 0x00	; 0
     9e2:	8a e7       	ldi	r24, 0x7A	; 122
     9e4:	6f de       	rcall	.-802    	; 0x6c4 <_ZL7writeOphhh>
     9e6:	6e ef       	ldi	r22, 0xFE	; 254
     9e8:	72 e0       	ldi	r23, 0x02	; 2
     9ea:	ce 01       	movw	r24, r28
     9ec:	a4 de       	rcall	.-696    	; 0x736 <_ZL8writeBufjPKh>
     9ee:	48 e0       	ldi	r20, 0x08	; 8
     9f0:	6f e1       	ldi	r22, 0x1F	; 31
     9f2:	80 e8       	ldi	r24, 0x80	; 128
     9f4:	67 de       	rcall	.-818    	; 0x6c4 <_ZL7writeOphhh>
     9f6:	c0 e0       	ldi	r28, 0x00	; 0
     9f8:	d0 e0       	ldi	r29, 0x00	; 0
     9fa:	8c e1       	ldi	r24, 0x1C	; 28
     9fc:	e8 de       	rcall	.-560    	; 0x7ce <_ZL11readRegByteh>
     9fe:	8a 70       	andi	r24, 0x0A	; 10
     a00:	31 f4       	brne	.+12     	; 0xa0e <_ZN8ENC28J6010packetSendEj+0x5e>
     a02:	21 96       	adiw	r28, 0x01	; 1
     a04:	c8 3e       	cpi	r28, 0xE8	; 232
     a06:	83 e0       	ldi	r24, 0x03	; 3
     a08:	d8 07       	cpc	r29, r24
     a0a:	b9 f7       	brne	.-18     	; 0x9fa <_ZN8ENC28J6010packetSendEj+0x4a>
     a0c:	0c c0       	rjmp	.+24     	; 0xa26 <_ZN8ENC28J6010packetSendEj+0x76>
     a0e:	8c e1       	ldi	r24, 0x1C	; 28
     a10:	de de       	rcall	.-580    	; 0x7ce <_ZL11readRegByteh>
     a12:	81 fd       	sbrc	r24, 1
     a14:	03 c0       	rjmp	.+6      	; 0xa1c <_ZN8ENC28J6010packetSendEj+0x6c>
     a16:	c8 3e       	cpi	r28, 0xE8	; 232
     a18:	d3 40       	sbci	r29, 0x03	; 3
     a1a:	40 f0       	brcs	.+16     	; 0xa2c <_ZN8ENC28J6010packetSendEj+0x7c>
     a1c:	48 e0       	ldi	r20, 0x08	; 8
     a1e:	6f e1       	ldi	r22, 0x1F	; 31
     a20:	80 ea       	ldi	r24, 0xA0	; 160
     a22:	50 de       	rcall	.-864    	; 0x6c4 <_ZL7writeOphhh>
     a24:	03 c0       	rjmp	.+6      	; 0xa2c <_ZN8ENC28J6010packetSendEj+0x7c>
     a26:	8c e1       	ldi	r24, 0x1C	; 28
     a28:	d2 de       	rcall	.-604    	; 0x7ce <_ZL11readRegByteh>
     a2a:	f8 cf       	rjmp	.-16     	; 0xa1c <_ZN8ENC28J6010packetSendEj+0x6c>
     a2c:	df 91       	pop	r29
     a2e:	cf 91       	pop	r28
     a30:	08 95       	ret

00000a32 <_ZN8ENC28J6013packetReceiveEv>:
     a32:	0f 93       	push	r16
     a34:	1f 93       	push	r17
     a36:	cf 93       	push	r28
     a38:	df 93       	push	r29
     a3a:	00 d0       	rcall	.+0      	; 0xa3c <_ZN8ENC28J6013packetReceiveEv+0xa>
     a3c:	00 d0       	rcall	.+0      	; 0xa3e <_ZN8ENC28J6013packetReceiveEv+0xc>
     a3e:	cd b7       	in	r28, 0x3d	; 61
     a40:	de b7       	in	r29, 0x3e	; 62
     a42:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <_ZZN8ENC28J6013packetReceiveEvE16unreleasedPacket>
     a46:	88 23       	and	r24, r24
     a48:	91 f0       	breq	.+36     	; 0xa6e <_ZN8ENC28J6013packetReceiveEv+0x3c>
     a4a:	60 91 f4 02 	lds	r22, 0x02F4	; 0x8002f4 <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr>
     a4e:	70 91 f5 02 	lds	r23, 0x02F5	; 0x8002f5 <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr+0x1>
     a52:	61 15       	cp	r22, r1
     a54:	71 05       	cpc	r23, r1
     a56:	29 f4       	brne	.+10     	; 0xa62 <_ZN8ENC28J6013packetReceiveEv+0x30>
     a58:	6f ef       	ldi	r22, 0xFF	; 255
     a5a:	7b e0       	ldi	r23, 0x0B	; 11
     a5c:	8c e0       	ldi	r24, 0x0C	; 12
     a5e:	d5 de       	rcall	.-598    	; 0x80a <_ZL8writeReghj>
     a60:	04 c0       	rjmp	.+8      	; 0xa6a <_ZN8ENC28J6013packetReceiveEv+0x38>
     a62:	61 50       	subi	r22, 0x01	; 1
     a64:	71 09       	sbc	r23, r1
     a66:	8c e0       	ldi	r24, 0x0C	; 12
     a68:	d0 de       	rcall	.-608    	; 0x80a <_ZL8writeReghj>
     a6a:	10 92 f6 02 	sts	0x02F6, r1	; 0x8002f6 <_ZZN8ENC28J6013packetReceiveEvE16unreleasedPacket>
     a6e:	89 e3       	ldi	r24, 0x39	; 57
     a70:	ae de       	rcall	.-676    	; 0x7ce <_ZL11readRegByteh>
     a72:	88 23       	and	r24, r24
     a74:	a9 f1       	breq	.+106    	; 0xae0 <_ZN8ENC28J6013packetReceiveEv+0xae>
     a76:	60 91 f4 02 	lds	r22, 0x02F4	; 0x8002f4 <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr>
     a7a:	70 91 f5 02 	lds	r23, 0x02F5	; 0x8002f5 <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr+0x1>
     a7e:	80 e0       	ldi	r24, 0x00	; 0
     a80:	c4 de       	rcall	.-632    	; 0x80a <_ZL8writeReghj>
     a82:	be 01       	movw	r22, r28
     a84:	6f 5f       	subi	r22, 0xFF	; 255
     a86:	7f 4f       	sbci	r23, 0xFF	; 255
     a88:	86 e0       	ldi	r24, 0x06	; 6
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	2d de       	rcall	.-934    	; 0x6e8 <_ZL7readBufjPh>
     a8e:	89 81       	ldd	r24, Y+1	; 0x01
     a90:	9a 81       	ldd	r25, Y+2	; 0x02
     a92:	90 93 f5 02 	sts	0x02F5, r25	; 0x8002f5 <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr+0x1>
     a96:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr>
     a9a:	8d 81       	ldd	r24, Y+5	; 0x05
     a9c:	87 ff       	sbrs	r24, 7
     a9e:	12 c0       	rjmp	.+36     	; 0xac4 <_ZN8ENC28J6013packetReceiveEv+0x92>
     aa0:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <_ZN8ENC28J6010bufferSizeE>
     aa4:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <_ZN8ENC28J6010bufferSizeE+0x1>
     aa8:	01 97       	sbiw	r24, 0x01	; 1
     aaa:	0b 81       	ldd	r16, Y+3	; 0x03
     aac:	1c 81       	ldd	r17, Y+4	; 0x04
     aae:	04 50       	subi	r16, 0x04	; 4
     ab0:	11 09       	sbc	r17, r1
     ab2:	80 17       	cp	r24, r16
     ab4:	91 07       	cpc	r25, r17
     ab6:	08 f4       	brcc	.+2      	; 0xaba <_ZN8ENC28J6013packetReceiveEv+0x88>
     ab8:	8c 01       	movw	r16, r24
     aba:	6e ef       	ldi	r22, 0xFE	; 254
     abc:	72 e0       	ldi	r23, 0x02	; 2
     abe:	c8 01       	movw	r24, r16
     ac0:	13 de       	rcall	.-986    	; 0x6e8 <_ZL7readBufjPh>
     ac2:	02 c0       	rjmp	.+4      	; 0xac8 <_ZN8ENC28J6013packetReceiveEv+0x96>
     ac4:	00 e0       	ldi	r16, 0x00	; 0
     ac6:	10 e0       	ldi	r17, 0x00	; 0
     ac8:	f8 01       	movw	r30, r16
     aca:	e2 50       	subi	r30, 0x02	; 2
     acc:	fd 4f       	sbci	r31, 0xFD	; 253
     ace:	10 82       	st	Z, r1
     ad0:	81 e0       	ldi	r24, 0x01	; 1
     ad2:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <_ZZN8ENC28J6013packetReceiveEvE16unreleasedPacket>
     ad6:	40 e4       	ldi	r20, 0x40	; 64
     ad8:	6e e1       	ldi	r22, 0x1E	; 30
     ada:	80 e8       	ldi	r24, 0x80	; 128
     adc:	f3 dd       	rcall	.-1050   	; 0x6c4 <_ZL7writeOphhh>
     ade:	02 c0       	rjmp	.+4      	; 0xae4 <_ZN8ENC28J6013packetReceiveEv+0xb2>
     ae0:	00 e0       	ldi	r16, 0x00	; 0
     ae2:	10 e0       	ldi	r17, 0x00	; 0
     ae4:	c8 01       	movw	r24, r16
     ae6:	26 96       	adiw	r28, 0x06	; 6
     ae8:	0f b6       	in	r0, 0x3f	; 63
     aea:	f8 94       	cli
     aec:	de bf       	out	0x3e, r29	; 62
     aee:	0f be       	out	0x3f, r0	; 63
     af0:	cd bf       	out	0x3d, r28	; 61
     af2:	df 91       	pop	r29
     af4:	cf 91       	pop	r28
     af6:	1f 91       	pop	r17
     af8:	0f 91       	pop	r16
     afa:	08 95       	ret

00000afc <_ZN8ENC28J6015enableBroadcastEb>:
}

void ENC28J60::enableBroadcast (bool temporary) {
     afc:	cf 93       	push	r28
     afe:	c8 2f       	mov	r28, r24
    writeRegByte(ERXFCON, readRegByte(ERXFCON) | ERXFCON_BCEN);
     b00:	88 e3       	ldi	r24, 0x38	; 56
     b02:	65 de       	rcall	.-822    	; 0x7ce <_ZL11readRegByteh>
     b04:	68 2f       	mov	r22, r24
     b06:	61 60       	ori	r22, 0x01	; 1
     b08:	88 e3       	ldi	r24, 0x38	; 56
     b0a:	73 de       	rcall	.-794    	; 0x7f2 <_ZL12writeRegBytehh>
    if(!temporary)
     b0c:	c1 11       	cpse	r28, r1
     b0e:	03 c0       	rjmp	.+6      	; 0xb16 <_ZN8ENC28J6015enableBroadcastEb+0x1a>
        broadcast_enabled = true;
     b10:	81 e0       	ldi	r24, 0x01	; 1
     b12:	80 93 fb 02 	sts	0x02FB, r24	; 0x8002fb <_ZN8ENC28J6017broadcast_enabledE>
}
     b16:	cf 91       	pop	r28
     b18:	08 95       	ret

00000b1a <_ZN8ENC28J6016disableBroadcastEb>:

void ENC28J60::disableBroadcast (bool temporary) {
    if(!temporary)
     b1a:	81 11       	cpse	r24, r1
     b1c:	03 c0       	rjmp	.+6      	; 0xb24 <_ZN8ENC28J6016disableBroadcastEb+0xa>
        broadcast_enabled = false;
     b1e:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <_ZN8ENC28J6017broadcast_enabledE>
     b22:	04 c0       	rjmp	.+8      	; 0xb2c <_ZN8ENC28J6016disableBroadcastEb+0x12>
    if(!broadcast_enabled)
     b24:	80 91 fb 02 	lds	r24, 0x02FB	; 0x8002fb <_ZN8ENC28J6017broadcast_enabledE>
     b28:	81 11       	cpse	r24, r1
     b2a:	06 c0       	rjmp	.+12     	; 0xb38 <_ZN8ENC28J6016disableBroadcastEb+0x1e>
        writeRegByte(ERXFCON, readRegByte(ERXFCON) & ~ERXFCON_BCEN);
     b2c:	88 e3       	ldi	r24, 0x38	; 56
     b2e:	4f de       	rcall	.-866    	; 0x7ce <_ZL11readRegByteh>
     b30:	68 2f       	mov	r22, r24
     b32:	6e 7f       	andi	r22, 0xFE	; 254
     b34:	88 e3       	ldi	r24, 0x38	; 56
     b36:	5d ce       	rjmp	.-838    	; 0x7f2 <_ZL12writeRegBytehh>
     b38:	08 95       	ret

00000b3a <_ZN9EtherCard5beginEPKhRVhS3_h>:
uint16_t EtherCard::delaycnt = 0; //request gateway ARP lookup

uint8_t Ethernet::buffer[ETHER_CARD_BUFFER_SIZE]; // tcp/ip send and receive buffer

uint8_t EtherCard::begin (const uint8_t* macaddr,
                          Register& csDDR, Register& csPort, uint8_t csPin) {
     b3a:	cf 92       	push	r12
     b3c:	df 92       	push	r13
     b3e:	ef 92       	push	r14
     b40:	ff 92       	push	r15
     b42:	0f 93       	push	r16
     b44:	cf 93       	push	r28
     b46:	df 93       	push	r29
     b48:	6c 01       	movw	r12, r24
     b4a:	eb 01       	movw	r28, r22
     b4c:	7a 01       	movw	r14, r20
     b4e:	02 2f       	mov	r16, r18
    using_dhcp = false;
     b50:	10 92 01 05 	sts	0x0501, r1	; 0x800501 <_ZN9EtherCard10using_dhcpE>
#if ETHERCARD_STASH
    Stash::initMap();
     b54:	88 e3       	ldi	r24, 0x38	; 56
     b56:	5e d0       	rcall	.+188    	; 0xc14 <_ZN5Stash7initMapEh>
#endif
    copyMac(mymac, macaddr);
     b58:	b6 01       	movw	r22, r12
     b5a:	8e e1       	ldi	r24, 0x1E	; 30
     b5c:	95 e0       	ldi	r25, 0x05	; 5
     b5e:	7e d6       	rcall	.+3324   	; 0x185c <_ZN9EtherCard7copyMacEPhPKh>
    return initialize(ETHER_CARD_BUFFER_SIZE, mymac, csDDR, csPort, csPin);
     b60:	97 01       	movw	r18, r14
     b62:	ae 01       	movw	r20, r28
     b64:	6e e1       	ldi	r22, 0x1E	; 30
     b66:	75 e0       	ldi	r23, 0x05	; 5
     b68:	80 e0       	ldi	r24, 0x00	; 0
     b6a:	92 e0       	ldi	r25, 0x02	; 2
     b6c:	78 de       	rcall	.-784    	; 0x85e <_ZN8ENC28J6010initializeEjPKhRVhS3_h>
}
     b6e:	df 91       	pop	r29
     b70:	cf 91       	pop	r28
     b72:	0f 91       	pop	r16
     b74:	ff 90       	pop	r15
     b76:	ef 90       	pop	r14
     b78:	df 90       	pop	r13
     b7a:	cf 90       	pop	r12
     b7c:	08 95       	ret

00000b7e <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_>:

bool EtherCard::staticSetup (const uint8_t* my_ip,
                             const uint8_t* gw_ip,
                             const uint8_t* dns_ip,
                             const uint8_t* mask) {
     b7e:	ef 92       	push	r14
     b80:	ff 92       	push	r15
     b82:	0f 93       	push	r16
     b84:	1f 93       	push	r17
     b86:	cf 93       	push	r28
     b88:	df 93       	push	r29
     b8a:	7b 01       	movw	r14, r22
     b8c:	8a 01       	movw	r16, r20
     b8e:	e9 01       	movw	r28, r18
    using_dhcp = false;
     b90:	10 92 01 05 	sts	0x0501, r1	; 0x800501 <_ZN9EtherCard10using_dhcpE>

    if (my_ip != 0)
     b94:	00 97       	sbiw	r24, 0x00	; 0
     b96:	21 f0       	breq	.+8      	; 0xba0 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x22>
        copyIp(myip, my_ip);
     b98:	bc 01       	movw	r22, r24
     b9a:	8a e1       	ldi	r24, 0x1A	; 26
     b9c:	95 e0       	ldi	r25, 0x05	; 5
     b9e:	51 d6       	rcall	.+3234   	; 0x1842 <_ZN9EtherCard6copyIpEPhPKh>
    if (gw_ip != 0)
     ba0:	e1 14       	cp	r14, r1
     ba2:	f1 04       	cpc	r15, r1
     ba4:	11 f0       	breq	.+4      	; 0xbaa <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x2c>
        setGwIp(gw_ip);
     ba6:	c7 01       	movw	r24, r14
     ba8:	60 d2       	rcall	.+1216   	; 0x106a <_ZN9EtherCard7setGwIpEPKh>
    if (dns_ip != 0)
     baa:	01 15       	cp	r16, r1
     bac:	11 05       	cpc	r17, r1
     bae:	21 f0       	breq	.+8      	; 0xbb8 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x3a>
        copyIp(dnsip, dns_ip);
     bb0:	b8 01       	movw	r22, r16
     bb2:	86 e0       	ldi	r24, 0x06	; 6
     bb4:	95 e0       	ldi	r25, 0x05	; 5
     bb6:	45 d6       	rcall	.+3210   	; 0x1842 <_ZN9EtherCard6copyIpEPhPKh>
    if(mask != 0)
     bb8:	20 97       	sbiw	r28, 0x00	; 0
     bba:	21 f0       	breq	.+8      	; 0xbc4 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x46>
        copyIp(netmask, mask);
     bbc:	be 01       	movw	r22, r28
     bbe:	86 e1       	ldi	r24, 0x16	; 22
     bc0:	95 e0       	ldi	r25, 0x05	; 5
    updateBroadcastAddress();
     bc2:	3f d6       	rcall	.+3198   	; 0x1842 <_ZN9EtherCard6copyIpEPhPKh>
     bc4:	5e d2       	rcall	.+1212   	; 0x1082 <_ZN9EtherCard22updateBroadcastAddressEv>
    delaycnt = 0; //request gateway ARP lookup
     bc6:	10 92 ff 04 	sts	0x04FF, r1	; 0x8004ff <_ZN9EtherCard8delaycntE+0x1>
     bca:	10 92 fe 04 	sts	0x04FE, r1	; 0x8004fe <_ZN9EtherCard8delaycntE>
    return true;
}
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	df 91       	pop	r29
     bd2:	cf 91       	pop	r28
     bd4:	1f 91       	pop	r17
     bd6:	0f 91       	pop	r16
     bd8:	ff 90       	pop	r15
     bda:	ef 90       	pop	r14
     bdc:	08 95       	ret

00000bde <_ZN5Stash9freeBlockEh>:

uint8_t Stash::fetchByte (uint8_t blk, uint8_t off) {
    return blk == bufs[WRITEBUF].bnum ? bufs[WRITEBUF].bytes[off] :
           blk == bufs[READBUF].bnum ? bufs[READBUF].bytes[off] :
           ether.peekin(blk, off);
}
     bde:	e8 2f       	mov	r30, r24
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	f5 95       	asr	r31
     be4:	e7 95       	ror	r30
     be6:	f5 95       	asr	r31
     be8:	e7 95       	ror	r30
     bea:	f5 95       	asr	r31
     bec:	e7 95       	ror	r30
     bee:	ec 5d       	subi	r30, 0xDC	; 220
     bf0:	fa 4f       	sbci	r31, 0xFA	; 250
     bf2:	28 2f       	mov	r18, r24
     bf4:	27 70       	andi	r18, 0x07	; 7
     bf6:	81 e0       	ldi	r24, 0x01	; 1
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	a0 e0       	ldi	r26, 0x00	; 0
     bfc:	b0 e0       	ldi	r27, 0x00	; 0
     bfe:	04 c0       	rjmp	.+8      	; 0xc08 <_ZN5Stash9freeBlockEh+0x2a>
     c00:	88 0f       	add	r24, r24
     c02:	99 1f       	adc	r25, r25
     c04:	aa 1f       	adc	r26, r26
     c06:	bb 1f       	adc	r27, r27
     c08:	2a 95       	dec	r18
     c0a:	d2 f7       	brpl	.-12     	; 0xc00 <_ZN5Stash9freeBlockEh+0x22>
     c0c:	20 81       	ld	r18, Z
     c0e:	82 2b       	or	r24, r18
     c10:	80 83       	st	Z, r24
     c12:	08 95       	ret

00000c14 <_ZN5Stash7initMapEh>:


// block 0 is special since always occupied
void Stash::initMap (uint8_t last /*=SCRATCH_PAGE_NUM*/) {
     c14:	cf 93       	push	r28
     c16:	c7 e3       	ldi	r28, 0x37	; 55
    last = SCRATCH_PAGE_NUM;
    while (--last > 0)
        freeBlock(last);
     c18:	8c 2f       	mov	r24, r28
     c1a:	e1 df       	rcall	.-62     	; 0xbde <_ZN5Stash9freeBlockEh>


// block 0 is special since always occupied
void Stash::initMap (uint8_t last /*=SCRATCH_PAGE_NUM*/) {
    last = SCRATCH_PAGE_NUM;
    while (--last > 0)
     c1c:	c1 50       	subi	r28, 0x01	; 1
     c1e:	e1 f7       	brne	.-8      	; 0xc18 <_ZN5Stash7initMapEh+0x4>
        freeBlock(last);
}
     c20:	cf 91       	pop	r28
     c22:	08 95       	ret

00000c24 <_ZL13fill_checksumhhjh>:
uint8_t EtherCard::packetLoopIcmpCheckReply (const uint8_t *ip_monitoredhost) {
    return gPB[IP_PROTO_P]==IP_PROTO_ICMP_V &&
           gPB[ICMP_TYPE_P]==ICMP_TYPE_ECHOREPLY_V &&
           gPB[ICMP_DATA_P]== PINGPATTERN &&
           check_ip_message_is_from(ip_monitoredhost);
}
     c24:	cf 92       	push	r12
     c26:	df 92       	push	r13
     c28:	ef 92       	push	r14
     c2a:	ff 92       	push	r15
     c2c:	cf 93       	push	r28
     c2e:	df 93       	push	r29
     c30:	c6 2f       	mov	r28, r22
     c32:	d0 e0       	ldi	r29, 0x00	; 0
     c34:	c2 50       	subi	r28, 0x02	; 2
     c36:	dd 4f       	sbci	r29, 0xFD	; 253
     c38:	21 30       	cpi	r18, 0x01	; 1
     c3a:	81 f4       	brne	.+32     	; 0xc5c <_ZL13fill_checksumhhjh+0x38>
     c3c:	6a 01       	movw	r12, r20
     c3e:	99 e0       	ldi	r25, 0x09	; 9
     c40:	c9 0e       	add	r12, r25
     c42:	d1 1c       	adc	r13, r1
     c44:	e1 2c       	mov	r14, r1
     c46:	f1 2c       	mov	r15, r1
     c48:	03 c0       	rjmp	.+6      	; 0xc50 <_ZL13fill_checksumhhjh+0x2c>
     c4a:	c1 2c       	mov	r12, r1
     c4c:	d1 2c       	mov	r13, r1
     c4e:	76 01       	movw	r14, r12
     c50:	42 30       	cpi	r20, 0x02	; 2
     c52:	51 05       	cpc	r21, r1
     c54:	28 f1       	brcs	.+74     	; 0xca0 <_ZL13fill_checksumhhjh+0x7c>
     c56:	fe 01       	movw	r30, r28
     c58:	da 01       	movw	r26, r20
     c5a:	09 c0       	rjmp	.+18     	; 0xc6e <_ZL13fill_checksumhhjh+0x4a>
     c5c:	22 30       	cpi	r18, 0x02	; 2
     c5e:	a9 f7       	brne	.-22     	; 0xc4a <_ZL13fill_checksumhhjh+0x26>
     c60:	6a 01       	movw	r12, r20
     c62:	92 e0       	ldi	r25, 0x02	; 2
     c64:	c9 1a       	sub	r12, r25
     c66:	d1 08       	sbc	r13, r1
     c68:	e1 2c       	mov	r14, r1
     c6a:	f1 2c       	mov	r15, r1
     c6c:	f1 cf       	rjmp	.-30     	; 0xc50 <_ZL13fill_checksumhhjh+0x2c>
     c6e:	20 81       	ld	r18, Z
     c70:	30 e0       	ldi	r19, 0x00	; 0
     c72:	32 2f       	mov	r19, r18
     c74:	22 27       	eor	r18, r18
     c76:	91 81       	ldd	r25, Z+1	; 0x01
     c78:	29 2b       	or	r18, r25
     c7a:	c2 0e       	add	r12, r18
     c7c:	d3 1e       	adc	r13, r19
     c7e:	e1 1c       	adc	r14, r1
     c80:	f1 1c       	adc	r15, r1
     c82:	32 96       	adiw	r30, 0x02	; 2
     c84:	12 97       	sbiw	r26, 0x02	; 2
     c86:	a2 30       	cpi	r26, 0x02	; 2
     c88:	b1 05       	cpc	r27, r1
     c8a:	88 f7       	brcc	.-30     	; 0xc6e <_ZL13fill_checksumhhjh+0x4a>
     c8c:	9a 01       	movw	r18, r20
     c8e:	22 50       	subi	r18, 0x02	; 2
     c90:	31 09       	sbc	r19, r1
     c92:	2e 7f       	andi	r18, 0xFE	; 254
     c94:	2e 5f       	subi	r18, 0xFE	; 254
     c96:	3f 4f       	sbci	r19, 0xFF	; 255
     c98:	c2 0f       	add	r28, r18
     c9a:	d3 1f       	adc	r29, r19
     c9c:	41 70       	andi	r20, 0x01	; 1
     c9e:	55 27       	eor	r21, r21
     ca0:	45 2b       	or	r20, r21
     ca2:	61 f0       	breq	.+24     	; 0xcbc <_ZL13fill_checksumhhjh+0x98>
     ca4:	48 81       	ld	r20, Y
     ca6:	50 e0       	ldi	r21, 0x00	; 0
     ca8:	60 e0       	ldi	r22, 0x00	; 0
     caa:	70 e0       	ldi	r23, 0x00	; 0
     cac:	76 2f       	mov	r23, r22
     cae:	65 2f       	mov	r22, r21
     cb0:	54 2f       	mov	r21, r20
     cb2:	44 27       	eor	r20, r20
     cb4:	c4 0e       	add	r12, r20
     cb6:	d5 1e       	adc	r13, r21
     cb8:	e6 1e       	adc	r14, r22
     cba:	f7 1e       	adc	r15, r23
     cbc:	a7 01       	movw	r20, r14
     cbe:	66 27       	eor	r22, r22
     cc0:	77 27       	eor	r23, r23
     cc2:	41 15       	cp	r20, r1
     cc4:	51 05       	cpc	r21, r1
     cc6:	61 05       	cpc	r22, r1
     cc8:	71 05       	cpc	r23, r1
     cca:	71 f0       	breq	.+28     	; 0xce8 <_ZL13fill_checksumhhjh+0xc4>
     ccc:	ee 24       	eor	r14, r14
     cce:	ff 24       	eor	r15, r15
     cd0:	c4 0e       	add	r12, r20
     cd2:	d5 1e       	adc	r13, r21
     cd4:	e6 1e       	adc	r14, r22
     cd6:	f7 1e       	adc	r15, r23
     cd8:	a7 01       	movw	r20, r14
     cda:	66 27       	eor	r22, r22
     cdc:	77 27       	eor	r23, r23
     cde:	41 15       	cp	r20, r1
     ce0:	51 05       	cpc	r21, r1
     ce2:	61 05       	cpc	r22, r1
     ce4:	71 05       	cpc	r23, r1
     ce6:	91 f7       	brne	.-28     	; 0xccc <_ZL13fill_checksumhhjh+0xa8>
     ce8:	c0 94       	com	r12
     cea:	d0 94       	com	r13
     cec:	e8 2f       	mov	r30, r24
     cee:	f0 e0       	ldi	r31, 0x00	; 0
     cf0:	e2 50       	subi	r30, 0x02	; 2
     cf2:	fd 4f       	sbci	r31, 0xFD	; 253
     cf4:	d0 82       	st	Z, r13
     cf6:	c1 82       	std	Z+1, r12	; 0x01
     cf8:	df 91       	pop	r29
     cfa:	cf 91       	pop	r28
     cfc:	ff 90       	pop	r15
     cfe:	ef 90       	pop	r14
     d00:	df 90       	pop	r13
     d02:	cf 90       	pop	r12
     d04:	08 95       	ret

00000d06 <_ZL6is_lanPKhS0_>:
     d06:	cf 93       	push	r28
     d08:	df 93       	push	r29
     d0a:	fc 01       	movw	r30, r24
     d0c:	20 81       	ld	r18, Z
     d0e:	22 23       	and	r18, r18
     d10:	d1 f0       	breq	.+52     	; 0xd46 <_ZL6is_lanPKhS0_+0x40>
     d12:	fb 01       	movw	r30, r22
     d14:	30 81       	ld	r19, Z
     d16:	33 23       	and	r19, r19
     d18:	c1 f0       	breq	.+48     	; 0xd4a <_ZL6is_lanPKhS0_+0x44>
     d1a:	23 27       	eor	r18, r19
     d1c:	30 91 16 05 	lds	r19, 0x0516	; 0x800516 <_ZN9EtherCard7netmaskE>
     d20:	23 23       	and	r18, r19
     d22:	a9 f4       	brne	.+42     	; 0xd4e <_ZL6is_lanPKhS0_+0x48>
     d24:	dc 01       	movw	r26, r24
     d26:	11 96       	adiw	r26, 0x01	; 1
     d28:	31 96       	adiw	r30, 0x01	; 1
     d2a:	c7 e1       	ldi	r28, 0x17	; 23
     d2c:	d5 e0       	ldi	r29, 0x05	; 5
     d2e:	04 96       	adiw	r24, 0x04	; 4
     d30:	4d 91       	ld	r20, X+
     d32:	21 91       	ld	r18, Z+
     d34:	39 91       	ld	r19, Y+
     d36:	24 27       	eor	r18, r20
     d38:	23 23       	and	r18, r19
     d3a:	59 f4       	brne	.+22     	; 0xd52 <_ZL6is_lanPKhS0_+0x4c>
     d3c:	a8 17       	cp	r26, r24
     d3e:	b9 07       	cpc	r27, r25
     d40:	b9 f7       	brne	.-18     	; 0xd30 <_ZL6is_lanPKhS0_+0x2a>
     d42:	81 e0       	ldi	r24, 0x01	; 1
     d44:	07 c0       	rjmp	.+14     	; 0xd54 <_ZL6is_lanPKhS0_+0x4e>
     d46:	80 e0       	ldi	r24, 0x00	; 0
     d48:	05 c0       	rjmp	.+10     	; 0xd54 <_ZL6is_lanPKhS0_+0x4e>
     d4a:	80 e0       	ldi	r24, 0x00	; 0
     d4c:	03 c0       	rjmp	.+6      	; 0xd54 <_ZL6is_lanPKhS0_+0x4e>
     d4e:	80 e0       	ldi	r24, 0x00	; 0
     d50:	01 c0       	rjmp	.+2      	; 0xd54 <_ZL6is_lanPKhS0_+0x4e>
     d52:	80 e0       	ldi	r24, 0x00	; 0
     d54:	df 91       	pop	r29
     d56:	cf 91       	pop	r28
     d58:	08 95       	ret

00000d5a <_ZL20fill_ip_hdr_checksumv>:
     d5a:	ee ef       	ldi	r30, 0xFE	; 254
     d5c:	f2 e0       	ldi	r31, 0x02	; 2
     d5e:	10 8e       	std	Z+24, r1	; 0x18
     d60:	11 8e       	std	Z+25, r1	; 0x19
     d62:	80 e4       	ldi	r24, 0x40	; 64
     d64:	84 8b       	std	Z+20, r24	; 0x14
     d66:	15 8a       	std	Z+21, r1	; 0x15
     d68:	86 8b       	std	Z+22, r24	; 0x16
     d6a:	20 e0       	ldi	r18, 0x00	; 0
     d6c:	44 e1       	ldi	r20, 0x14	; 20
     d6e:	50 e0       	ldi	r21, 0x00	; 0
     d70:	6e e0       	ldi	r22, 0x0E	; 14
     d72:	88 e1       	ldi	r24, 0x18	; 24
     d74:	57 cf       	rjmp	.-338    	; 0xc24 <_ZL13fill_checksumhhjh>
     d76:	08 95       	ret

00000d78 <_ZL12make_tcpheadjh>:
     d78:	ee ef       	ldi	r30, 0xFE	; 254
     d7a:	f2 e0       	ldi	r31, 0x02	; 2
     d7c:	24 a1       	ldd	r18, Z+36	; 0x24
     d7e:	32 a1       	ldd	r19, Z+34	; 0x22
     d80:	34 a3       	std	Z+36, r19	; 0x24
     d82:	22 a3       	std	Z+34, r18	; 0x22
     d84:	25 a1       	ldd	r18, Z+37	; 0x25
     d86:	33 a1       	ldd	r19, Z+35	; 0x23
     d88:	35 a3       	std	Z+37, r19	; 0x25
     d8a:	23 a3       	std	Z+35, r18	; 0x23
     d8c:	e8 e2       	ldi	r30, 0x28	; 40
     d8e:	f3 e0       	ldi	r31, 0x03	; 3
     d90:	44 e2       	ldi	r20, 0x24	; 36
     d92:	53 e0       	ldi	r21, 0x03	; 3
     d94:	22 91       	ld	r18, -Z
     d96:	82 0f       	add	r24, r18
     d98:	91 1d       	adc	r25, r1
     d9a:	24 81       	ldd	r18, Z+4	; 0x04
     d9c:	84 83       	std	Z+4, r24	; 0x04
     d9e:	66 23       	and	r22, r22
     da0:	11 f0       	breq	.+4      	; 0xda6 <_ZL12make_tcpheadjh+0x2e>
     da2:	20 83       	st	Z, r18
     da4:	01 c0       	rjmp	.+2      	; 0xda8 <_ZL12make_tcpheadjh+0x30>
     da6:	10 82       	st	Z, r1
     da8:	89 2f       	mov	r24, r25
     daa:	99 27       	eor	r25, r25
     dac:	e4 17       	cp	r30, r20
     dae:	f5 07       	cpc	r31, r21
     db0:	89 f7       	brne	.-30     	; 0xd94 <_ZL12make_tcpheadjh+0x1c>
     db2:	ee ef       	ldi	r30, 0xFE	; 254
     db4:	f2 e0       	ldi	r31, 0x02	; 2
     db6:	12 aa       	std	Z+50, r1	; 0x32
     db8:	13 aa       	std	Z+51, r1	; 0x33
     dba:	80 e5       	ldi	r24, 0x50	; 80
     dbc:	86 a7       	std	Z+46, r24	; 0x2e
     dbe:	08 95       	ret

00000dc0 <_ZL30make_tcp_ack_with_data_noflagsj>:
     dc0:	0f 93       	push	r16
     dc2:	1f 93       	push	r17
     dc4:	cf 93       	push	r28
     dc6:	df 93       	push	r29
     dc8:	8c 01       	movw	r16, r24
     dca:	88 96       	adiw	r24, 0x28	; 40
     dcc:	ce ef       	ldi	r28, 0xFE	; 254
     dce:	d2 e0       	ldi	r29, 0x02	; 2
     dd0:	98 8b       	std	Y+16, r25	; 0x10
     dd2:	89 8b       	std	Y+17, r24	; 0x11
     dd4:	c2 df       	rcall	.-124    	; 0xd5a <_ZL20fill_ip_hdr_checksumv>
     dd6:	1a aa       	std	Y+50, r1	; 0x32
     dd8:	1b aa       	std	Y+51, r1	; 0x33
     dda:	a8 01       	movw	r20, r16
     ddc:	44 5e       	subi	r20, 0xE4	; 228
     dde:	5f 4f       	sbci	r21, 0xFF	; 255
     de0:	22 e0       	ldi	r18, 0x02	; 2
     de2:	6a e1       	ldi	r22, 0x1A	; 26
     de4:	82 e3       	ldi	r24, 0x32	; 50
     de6:	1e df       	rcall	.-452    	; 0xc24 <_ZL13fill_checksumhhjh>
     de8:	c8 01       	movw	r24, r16
     dea:	c6 96       	adiw	r24, 0x36	; 54
     dec:	e1 dd       	rcall	.-1086   	; 0x9b0 <_ZN8ENC28J6010packetSendEj>
     dee:	df 91       	pop	r29
     df0:	cf 91       	pop	r28
     df2:	1f 91       	pop	r17
     df4:	0f 91       	pop	r16
     df6:	08 95       	ret

00000df8 <_ZL7setMACsPKh>:
     df8:	bc 01       	movw	r22, r24
     dfa:	8e ef       	ldi	r24, 0xFE	; 254
     dfc:	92 e0       	ldi	r25, 0x02	; 2
     dfe:	2e d5       	rcall	.+2652   	; 0x185c <_ZN9EtherCard7copyMacEPhPKh>
     e00:	6e e1       	ldi	r22, 0x1E	; 30
     e02:	75 e0       	ldi	r23, 0x05	; 5
     e04:	84 e0       	ldi	r24, 0x04	; 4
     e06:	93 e0       	ldi	r25, 0x03	; 3
     e08:	29 c5       	rjmp	.+2642   	; 0x185c <_ZN9EtherCard7copyMacEPhPKh>
     e0a:	08 95       	ret

00000e0c <_ZL11make_eth_ipv>:
     e0c:	84 e0       	ldi	r24, 0x04	; 4
     e0e:	93 e0       	ldi	r25, 0x03	; 3
     e10:	f3 df       	rcall	.-26     	; 0xdf8 <_ZL7setMACsPKh>
     e12:	68 e1       	ldi	r22, 0x18	; 24
     e14:	73 e0       	ldi	r23, 0x03	; 3
     e16:	8c e1       	ldi	r24, 0x1C	; 28
     e18:	93 e0       	ldi	r25, 0x03	; 3
     e1a:	13 d5       	rcall	.+2598   	; 0x1842 <_ZN9EtherCard6copyIpEPhPKh>
     e1c:	6a e1       	ldi	r22, 0x1A	; 26
     e1e:	75 e0       	ldi	r23, 0x05	; 5
     e20:	88 e1       	ldi	r24, 0x18	; 24
     e22:	93 e0       	ldi	r25, 0x03	; 3
     e24:	0e d5       	rcall	.+2588   	; 0x1842 <_ZN9EtherCard6copyIpEPhPKh>
     e26:	99 cf       	rjmp	.-206    	; 0xd5a <_ZL20fill_ip_hdr_checksumv>
     e28:	08 95       	ret

00000e2a <_ZL21make_tcp_ack_from_anyih>:
     e2a:	cf 93       	push	r28
     e2c:	df 93       	push	r29
     e2e:	26 2f       	mov	r18, r22
     e30:	20 61       	ori	r18, 0x10	; 16
     e32:	20 93 2d 03 	sts	0x032D, r18	; 0x80032d <_ZN8ENC28J606bufferE+0x2f>
     e36:	64 30       	cpi	r22, 0x04	; 4
     e38:	21 f0       	breq	.+8      	; 0xe42 <_ZL21make_tcp_ack_from_anyih+0x18>
     e3a:	00 97       	sbiw	r24, 0x00	; 0
     e3c:	11 f4       	brne	.+4      	; 0xe42 <_ZL21make_tcp_ack_from_anyih+0x18>
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	61 e0       	ldi	r22, 0x01	; 1
     e44:	99 df       	rcall	.-206    	; 0xd78 <_ZL12make_tcpheadjh>
     e46:	ce ef       	ldi	r28, 0xFE	; 254
     e48:	d2 e0       	ldi	r29, 0x02	; 2
     e4a:	18 8a       	std	Y+16, r1	; 0x10
     e4c:	88 e2       	ldi	r24, 0x28	; 40
     e4e:	89 8b       	std	Y+17, r24	; 0x11
     e50:	dd df       	rcall	.-70     	; 0xe0c <_ZL11make_eth_ipv>
     e52:	84 e0       	ldi	r24, 0x04	; 4
     e54:	88 ab       	std	Y+48, r24	; 0x30
     e56:	19 aa       	std	Y+49, r1	; 0x31
     e58:	22 e0       	ldi	r18, 0x02	; 2
     e5a:	4c e1       	ldi	r20, 0x1C	; 28
     e5c:	50 e0       	ldi	r21, 0x00	; 0
     e5e:	6a e1       	ldi	r22, 0x1A	; 26
     e60:	82 e3       	ldi	r24, 0x32	; 50
     e62:	e0 de       	rcall	.-576    	; 0xc24 <_ZL13fill_checksumhhjh>
     e64:	86 e3       	ldi	r24, 0x36	; 54
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	a3 dd       	rcall	.-1210   	; 0x9b0 <_ZN8ENC28J6010packetSendEj>
     e6a:	df 91       	pop	r29
     e6c:	cf 91       	pop	r28
     e6e:	08 95       	ret

00000e70 <_ZL12setMACandIPsPKhS0_>:
     e70:	cf 93       	push	r28
     e72:	df 93       	push	r29
     e74:	eb 01       	movw	r28, r22
     e76:	c0 df       	rcall	.-128    	; 0xdf8 <_ZL7setMACsPKh>
     e78:	be 01       	movw	r22, r28
     e7a:	8c e1       	ldi	r24, 0x1C	; 28
     e7c:	93 e0       	ldi	r25, 0x03	; 3
     e7e:	e1 d4       	rcall	.+2498   	; 0x1842 <_ZN9EtherCard6copyIpEPhPKh>
     e80:	6a e1       	ldi	r22, 0x1A	; 26
     e82:	75 e0       	ldi	r23, 0x05	; 5
     e84:	88 e1       	ldi	r24, 0x18	; 24
     e86:	93 e0       	ldi	r25, 0x03	; 3
     e88:	dc d4       	rcall	.+2488   	; 0x1842 <_ZN9EtherCard6copyIpEPhPKh>
     e8a:	df 91       	pop	r29
     e8c:	cf 91       	pop	r28
     e8e:	08 95       	ret

00000e90 <_ZL17client_arp_whohasPh>:
     e90:	0f 93       	push	r16
     e92:	1f 93       	push	r17
     e94:	cf 93       	push	r28
     e96:	8c 01       	movw	r16, r24
     e98:	88 e3       	ldi	r24, 0x38	; 56
     e9a:	92 e0       	ldi	r25, 0x02	; 2
     e9c:	ad df       	rcall	.-166    	; 0xdf8 <_ZL7setMACsPKh>
     e9e:	ee ef       	ldi	r30, 0xFE	; 254
     ea0:	f2 e0       	ldi	r31, 0x02	; 2
     ea2:	88 e0       	ldi	r24, 0x08	; 8
     ea4:	84 87       	std	Z+12, r24	; 0x0c
     ea6:	c6 e0       	ldi	r28, 0x06	; 6
     ea8:	c5 87       	std	Z+13, r28	; 0x0d
     eaa:	48 e0       	ldi	r20, 0x08	; 8
     eac:	50 e0       	ldi	r21, 0x00	; 0
     eae:	61 ef       	ldi	r22, 0xF1	; 241
     eb0:	70 e0       	ldi	r23, 0x00	; 0
     eb2:	8c e0       	ldi	r24, 0x0C	; 12
     eb4:	93 e0       	ldi	r25, 0x03	; 3
     eb6:	0e 94 84 11 	call	0x2308	; 0x2308 <memcpy_P>
     eba:	ee e1       	ldi	r30, 0x1E	; 30
     ebc:	f3 e0       	ldi	r31, 0x03	; 3
     ebe:	df 01       	movw	r26, r30
     ec0:	1d 92       	st	X+, r1
     ec2:	ca 95       	dec	r28
     ec4:	e9 f7       	brne	.-6      	; 0xec0 <_ZL17client_arp_whohasPh+0x30>
     ec6:	6e e1       	ldi	r22, 0x1E	; 30
     ec8:	75 e0       	ldi	r23, 0x05	; 5
     eca:	84 e1       	ldi	r24, 0x14	; 20
     ecc:	93 e0       	ldi	r25, 0x03	; 3
     ece:	c6 d4       	rcall	.+2444   	; 0x185c <_ZN9EtherCard7copyMacEPhPKh>
     ed0:	b8 01       	movw	r22, r16
     ed2:	84 e2       	ldi	r24, 0x24	; 36
     ed4:	93 e0       	ldi	r25, 0x03	; 3
     ed6:	b5 d4       	rcall	.+2410   	; 0x1842 <_ZN9EtherCard6copyIpEPhPKh>
     ed8:	6a e1       	ldi	r22, 0x1A	; 26
     eda:	75 e0       	ldi	r23, 0x05	; 5
     edc:	8a e1       	ldi	r24, 0x1A	; 26
     ede:	93 e0       	ldi	r25, 0x03	; 3
     ee0:	b0 d4       	rcall	.+2400   	; 0x1842 <_ZN9EtherCard6copyIpEPhPKh>
     ee2:	8a e2       	ldi	r24, 0x2A	; 42
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	64 dd       	rcall	.-1336   	; 0x9b0 <_ZN8ENC28J6010packetSendEj>
     ee8:	cf 91       	pop	r28
     eea:	1f 91       	pop	r17
     eec:	0f 91       	pop	r16
     eee:	08 95       	ret

00000ef0 <_ZL16client_store_macPhS_>:
     ef0:	cf 93       	push	r28
     ef2:	df 93       	push	r29
     ef4:	eb 01       	movw	r28, r22
     ef6:	44 e0       	ldi	r20, 0x04	; 4
     ef8:	50 e0       	ldi	r21, 0x00	; 0
     efa:	bc 01       	movw	r22, r24
     efc:	8a e1       	ldi	r24, 0x1A	; 26
     efe:	93 e0       	ldi	r25, 0x03	; 3
     f00:	0e 94 8d 11 	call	0x231a	; 0x231a <memcmp>
     f04:	89 2b       	or	r24, r25
     f06:	31 f4       	brne	.+12     	; 0xf14 <_ZL16client_store_macPhS_+0x24>
     f08:	64 e1       	ldi	r22, 0x14	; 20
     f0a:	73 e0       	ldi	r23, 0x03	; 3
     f0c:	ce 01       	movw	r24, r28
     f0e:	a6 d4       	rcall	.+2380   	; 0x185c <_ZN9EtherCard7copyMacEPhPKh>
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	01 c0       	rjmp	.+2      	; 0xf16 <_ZL16client_store_macPhS_+0x26>
     f14:	80 e0       	ldi	r24, 0x00	; 0
     f16:	df 91       	pop	r29
     f18:	cf 91       	pop	r28
     f1a:	08 95       	ret

00000f1c <_ZN9EtherCard19getTcpPayloadLengthEv>:
     f1c:	ee ef       	ldi	r30, 0xFE	; 254
     f1e:	f2 e0       	ldi	r31, 0x02	; 2
     f20:	80 89       	ldd	r24, Z+16	; 0x10
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	98 2f       	mov	r25, r24
     f26:	88 27       	eor	r24, r24
     f28:	21 89       	ldd	r18, Z+17	; 0x11
     f2a:	82 2b       	or	r24, r18
     f2c:	44 97       	sbiw	r24, 0x14	; 20
     f2e:	26 a5       	ldd	r18, Z+46	; 0x2e
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	35 95       	asr	r19
     f34:	27 95       	ror	r18
     f36:	35 95       	asr	r19
     f38:	27 95       	ror	r18
     f3a:	35 95       	asr	r19
     f3c:	27 95       	ror	r18
     f3e:	35 95       	asr	r19
     f40:	27 95       	ror	r18
     f42:	22 0f       	add	r18, r18
     f44:	33 1f       	adc	r19, r19
     f46:	22 0f       	add	r18, r18
     f48:	33 1f       	adc	r19, r19
     f4a:	82 1b       	sub	r24, r18
     f4c:	93 0b       	sbc	r25, r19
     f4e:	12 f4       	brpl	.+4      	; 0xf54 <_ZN9EtherCard19getTcpPayloadLengthEv+0x38>
     f50:	80 e0       	ldi	r24, 0x00	; 0
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	08 95       	ret

00000f56 <_ZN9EtherCard10udpPrepareEjPKhj>:
     f56:	ef 92       	push	r14
     f58:	ff 92       	push	r15
     f5a:	0f 93       	push	r16
     f5c:	1f 93       	push	r17
     f5e:	cf 93       	push	r28
     f60:	df 93       	push	r29
     f62:	18 2f       	mov	r17, r24
     f64:	09 2f       	mov	r16, r25
     f66:	eb 01       	movw	r28, r22
     f68:	f4 2e       	mov	r15, r20
     f6a:	e5 2e       	mov	r14, r21
     f6c:	8a e1       	ldi	r24, 0x1A	; 26
     f6e:	95 e0       	ldi	r25, 0x05	; 5
     f70:	ca de       	rcall	.-620    	; 0xd06 <_ZL6is_lanPKhS0_>
     f72:	88 23       	and	r24, r24
     f74:	29 f0       	breq	.+10     	; 0xf80 <_ZN9EtherCard10udpPrepareEjPKhj+0x2a>
     f76:	be 01       	movw	r22, r28
     f78:	88 e3       	ldi	r24, 0x38	; 56
     f7a:	95 e0       	ldi	r25, 0x05	; 5
     f7c:	79 df       	rcall	.-270    	; 0xe70 <_ZL12setMACandIPsPKhS0_>
     f7e:	04 c0       	rjmp	.+8      	; 0xf88 <_ZN9EtherCard10udpPrepareEjPKhj+0x32>
     f80:	be 01       	movw	r22, r28
     f82:	8e e2       	ldi	r24, 0x2E	; 46
     f84:	95 e0       	ldi	r25, 0x05	; 5
     f86:	74 df       	rcall	.-280    	; 0xe70 <_ZL12setMACandIPsPKhS0_>
     f88:	88 81       	ld	r24, Y
     f8a:	80 7f       	andi	r24, 0xF0	; 240
     f8c:	80 3e       	cpi	r24, 0xE0	; 224
     f8e:	91 f0       	breq	.+36     	; 0xfb4 <_ZN9EtherCard10udpPrepareEjPKhj+0x5e>
     f90:	88 81       	ld	r24, Y
     f92:	99 81       	ldd	r25, Y+1	; 0x01
     f94:	aa 81       	ldd	r26, Y+2	; 0x02
     f96:	bb 81       	ldd	r27, Y+3	; 0x03
     f98:	8f 3f       	cpi	r24, 0xFF	; 255
     f9a:	9f 4f       	sbci	r25, 0xFF	; 255
     f9c:	af 4f       	sbci	r26, 0xFF	; 255
     f9e:	bf 4f       	sbci	r27, 0xFF	; 255
     fa0:	49 f0       	breq	.+18     	; 0xfb4 <_ZN9EtherCard10udpPrepareEjPKhj+0x5e>
     fa2:	44 e0       	ldi	r20, 0x04	; 4
     fa4:	50 e0       	ldi	r21, 0x00	; 0
     fa6:	be 01       	movw	r22, r28
     fa8:	82 e1       	ldi	r24, 0x12	; 18
     faa:	95 e0       	ldi	r25, 0x05	; 5
     fac:	0e 94 8d 11 	call	0x231a	; 0x231a <memcmp>
     fb0:	89 2b       	or	r24, r25
     fb2:	29 f4       	brne	.+10     	; 0xfbe <_ZN9EtherCard10udpPrepareEjPKhj+0x68>
     fb4:	68 e3       	ldi	r22, 0x38	; 56
     fb6:	72 e0       	ldi	r23, 0x02	; 2
     fb8:	8e ef       	ldi	r24, 0xFE	; 254
     fba:	92 e0       	ldi	r25, 0x02	; 2
     fbc:	4f d4       	rcall	.+2206   	; 0x185c <_ZN9EtherCard7copyMacEPhPKh>
     fbe:	ce ef       	ldi	r28, 0xFE	; 254
     fc0:	d2 e0       	ldi	r29, 0x02	; 2
     fc2:	88 e0       	ldi	r24, 0x08	; 8
     fc4:	8c 87       	std	Y+12, r24	; 0x0c
     fc6:	1d 86       	std	Y+13, r1	; 0x0d
     fc8:	49 e0       	ldi	r20, 0x09	; 9
     fca:	50 e0       	ldi	r21, 0x00	; 0
     fcc:	68 ee       	ldi	r22, 0xE8	; 232
     fce:	70 e0       	ldi	r23, 0x00	; 0
     fd0:	8c e0       	ldi	r24, 0x0C	; 12
     fd2:	93 e0       	ldi	r25, 0x03	; 3
     fd4:	0e 94 84 11 	call	0x2308	; 0x2308 <memcpy_P>
     fd8:	18 8a       	std	Y+16, r1	; 0x10
     fda:	81 e1       	ldi	r24, 0x11	; 17
     fdc:	8f 8b       	std	Y+23, r24	; 0x17
     fde:	ec a2       	std	Y+36, r14	; 0x24
     fe0:	fd a2       	std	Y+37, r15	; 0x25
     fe2:	0a a3       	std	Y+34, r16	; 0x22
     fe4:	1b a3       	std	Y+35, r17	; 0x23
     fe6:	1e a2       	std	Y+38, r1	; 0x26
     fe8:	18 a6       	std	Y+40, r1	; 0x28
     fea:	19 a6       	std	Y+41, r1	; 0x29
     fec:	df 91       	pop	r29
     fee:	cf 91       	pop	r28
     ff0:	1f 91       	pop	r17
     ff2:	0f 91       	pop	r16
     ff4:	ff 90       	pop	r15
     ff6:	ef 90       	pop	r14
     ff8:	08 95       	ret

00000ffa <_ZN9EtherCard11udpTransmitEj>:
     ffa:	0f 93       	push	r16
     ffc:	1f 93       	push	r17
     ffe:	cf 93       	push	r28
    1000:	df 93       	push	r29
    1002:	ec 01       	movw	r28, r24
    1004:	0e ef       	ldi	r16, 0xFE	; 254
    1006:	12 e0       	ldi	r17, 0x02	; 2
    1008:	4c 96       	adiw	r24, 0x1c	; 28
    100a:	f8 01       	movw	r30, r16
    100c:	90 8b       	std	Z+16, r25	; 0x10
    100e:	81 8b       	std	Z+17, r24	; 0x11
    1010:	a4 de       	rcall	.-696    	; 0xd5a <_ZL20fill_ip_hdr_checksumv>
    1012:	ce 01       	movw	r24, r28
    1014:	08 96       	adiw	r24, 0x08	; 8
    1016:	f8 01       	movw	r30, r16
    1018:	96 a3       	std	Z+38, r25	; 0x26
    101a:	87 a3       	std	Z+39, r24	; 0x27
    101c:	ae 01       	movw	r20, r28
    101e:	40 5f       	subi	r20, 0xF0	; 240
    1020:	5f 4f       	sbci	r21, 0xFF	; 255
    1022:	21 e0       	ldi	r18, 0x01	; 1
    1024:	6a e1       	ldi	r22, 0x1A	; 26
    1026:	88 e2       	ldi	r24, 0x28	; 40
    1028:	fd dd       	rcall	.-1030   	; 0xc24 <_ZL13fill_checksumhhjh>
    102a:	ce 01       	movw	r24, r28
    102c:	8a 96       	adiw	r24, 0x2a	; 42
    102e:	c0 dc       	rcall	.-1664   	; 0x9b0 <_ZN8ENC28J6010packetSendEj>
    1030:	df 91       	pop	r29
    1032:	cf 91       	pop	r28
    1034:	1f 91       	pop	r17
    1036:	0f 91       	pop	r16
    1038:	08 95       	ret

0000103a <_ZN9EtherCard7sendUdpEPKhjjS1_j>:
    103a:	0f 93       	push	r16
    103c:	1f 93       	push	r17
    103e:	cf 93       	push	r28
    1040:	df 93       	push	r29
    1042:	d6 2f       	mov	r29, r22
    1044:	c7 2f       	mov	r28, r23
    1046:	ca 01       	movw	r24, r20
    1048:	a8 01       	movw	r20, r16
    104a:	b9 01       	movw	r22, r18
    104c:	84 df       	rcall	.-248    	; 0xf56 <_ZN9EtherCard10udpPrepareEjPKhj>
    104e:	8d 2f       	mov	r24, r29
    1050:	9c 2f       	mov	r25, r28
    1052:	81 30       	cpi	r24, 0x01	; 1
    1054:	22 e0       	ldi	r18, 0x02	; 2
    1056:	92 07       	cpc	r25, r18
    1058:	10 f0       	brcs	.+4      	; 0x105e <_ZN9EtherCard7sendUdpEPKhjjS1_j+0x24>
    105a:	80 e0       	ldi	r24, 0x00	; 0
    105c:	92 e0       	ldi	r25, 0x02	; 2
    105e:	cd df       	rcall	.-102    	; 0xffa <_ZN9EtherCard11udpTransmitEj>
    1060:	df 91       	pop	r29
    1062:	cf 91       	pop	r28
    1064:	1f 91       	pop	r17
    1066:	0f 91       	pop	r16
    1068:	08 95       	ret

0000106a <_ZN9EtherCard7setGwIpEPKh>:
    106a:	10 92 ff 04 	sts	0x04FF, r1	; 0x8004ff <_ZN9EtherCard8delaycntE+0x1>
    106e:	10 92 fe 04 	sts	0x04FE, r1	; 0x8004fe <_ZN9EtherCard8delaycntE>
    1072:	21 e0       	ldi	r18, 0x01	; 1
    1074:	20 93 2d 05 	sts	0x052D, r18	; 0x80052d <_ZL9waitgwmac>
    1078:	bc 01       	movw	r22, r24
    107a:	8e e0       	ldi	r24, 0x0E	; 14
    107c:	95 e0       	ldi	r25, 0x05	; 5
    107e:	e1 c3       	rjmp	.+1986   	; 0x1842 <_ZN9EtherCard6copyIpEPhPKh>
    1080:	08 95       	ret

00001082 <_ZN9EtherCard22updateBroadcastAddressEv>:
    1082:	cf 93       	push	r28
    1084:	df 93       	push	r29
    1086:	ea e1       	ldi	r30, 0x1A	; 26
    1088:	f5 e0       	ldi	r31, 0x05	; 5
    108a:	c6 e1       	ldi	r28, 0x16	; 22
    108c:	d5 e0       	ldi	r29, 0x05	; 5
    108e:	a2 e1       	ldi	r26, 0x12	; 18
    1090:	b5 e0       	ldi	r27, 0x05	; 5
    1092:	2e e1       	ldi	r18, 0x1E	; 30
    1094:	35 e0       	ldi	r19, 0x05	; 5
    1096:	91 91       	ld	r25, Z+
    1098:	89 91       	ld	r24, Y+
    109a:	80 95       	com	r24
    109c:	89 2b       	or	r24, r25
    109e:	8d 93       	st	X+, r24
    10a0:	e2 17       	cp	r30, r18
    10a2:	f3 07       	cpc	r31, r19
    10a4:	c1 f7       	brne	.-16     	; 0x1096 <_ZN9EtherCard22updateBroadcastAddressEv+0x14>
    10a6:	df 91       	pop	r29
    10a8:	cf 91       	pop	r28
    10aa:	08 95       	ret

000010ac <_ZN9EtherCard6acceptEjj>:

uint16_t EtherCard::accept(const uint16_t port, uint16_t plen) {
    10ac:	ff 92       	push	r15
    10ae:	0f 93       	push	r16
    10b0:	1f 93       	push	r17
    10b2:	cf 93       	push	r28
    10b4:	df 93       	push	r29
    uint16_t pos;

    if (gPB[TCP_DST_PORT_H_P] == (port >> 8) &&
    10b6:	20 91 22 03 	lds	r18, 0x0322	; 0x800322 <_ZN8ENC28J606bufferE+0x24>
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	49 2f       	mov	r20, r25
    10be:	55 27       	eor	r21, r21
    10c0:	24 17       	cp	r18, r20
    10c2:	35 07       	cpc	r19, r21
    10c4:	09 f0       	breq	.+2      	; 0x10c8 <_ZN9EtherCard6acceptEjj+0x1c>
    10c6:	61 c0       	rjmp	.+194    	; 0x118a <_ZN9EtherCard6acceptEjj+0xde>
    10c8:	20 91 23 03 	lds	r18, 0x0323	; 0x800323 <_ZN8ENC28J606bufferE+0x25>
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	99 27       	eor	r25, r25
    10d0:	28 17       	cp	r18, r24
    10d2:	39 07       	cpc	r19, r25
    10d4:	09 f0       	breq	.+2      	; 0x10d8 <_ZN9EtherCard6acceptEjj+0x2c>
    10d6:	5c c0       	rjmp	.+184    	; 0x1190 <_ZN9EtherCard6acceptEjj+0xe4>
    10d8:	8b 01       	movw	r16, r22
            gPB[TCP_DST_PORT_L_P] == ((uint8_t) port))
    {   //Packet targeted at specified port
        if (gPB[TCP_FLAGS_P] & TCP_FLAGS_SYN_V)
    10da:	f0 90 2d 03 	lds	r15, 0x032D	; 0x80032d <_ZN8ENC28J606bufferE+0x2f>
    10de:	f1 fe       	sbrs	r15, 1
    10e0:	2d c0       	rjmp	.+90     	; 0x113c <_ZN9EtherCard6acceptEjj+0x90>
    fill_checksum(UDP_CHECKSUM_H_P, IP_SRC_P, 16 + datalen,1);
    packetSend(UDP_HEADER_LEN+IP_HEADER_LEN+ETH_HEADER_LEN+datalen);
}

static void make_tcp_synack_from_syn() {
    gPB[IP_TOTLEN_H_P] = 0;
    10e2:	ce ef       	ldi	r28, 0xFE	; 254
    10e4:	d2 e0       	ldi	r29, 0x02	; 2
    10e6:	18 8a       	std	Y+16, r1	; 0x10
    gPB[IP_TOTLEN_L_P] = IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+4;
    10e8:	8c e2       	ldi	r24, 0x2C	; 44
    10ea:	89 8b       	std	Y+17, r24	; 0x11
    make_eth_ip();
    10ec:	8f de       	rcall	.-738    	; 0xe0c <_ZL11make_eth_ipv>
    gPB[TCP_FLAGS_P] = TCP_FLAGS_SYNACK_V;
    10ee:	82 e1       	ldi	r24, 0x12	; 18
    10f0:	8f a7       	std	Y+47, r24	; 0x2f
    make_tcphead(1,0);
    10f2:	60 e0       	ldi	r22, 0x00	; 0
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	3f de       	rcall	.-898    	; 0xd78 <_ZL12make_tcpheadjh>
    gPB[TCP_SEQ_H_P+0] = 0;
    10fa:	1e a2       	std	Y+38, r1	; 0x26
    gPB[TCP_SEQ_H_P+1] = 0;
    10fc:	1f a2       	std	Y+39, r1	; 0x27
    gPB[TCP_SEQ_H_P+2] = seqnum;
    10fe:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <_ZL6seqnum>
    1102:	88 a7       	std	Y+40, r24	; 0x28
    gPB[TCP_SEQ_H_P+3] = 0;
    1104:	19 a6       	std	Y+41, r1	; 0x29
    seqnum += 3;
    1106:	8d 5f       	subi	r24, 0xFD	; 253
    1108:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <_ZL6seqnum>
    gPB[TCP_OPTIONS_P] = 2;
    110c:	82 e0       	ldi	r24, 0x02	; 2
    110e:	8e ab       	std	Y+54, r24	; 0x36
    gPB[TCP_OPTIONS_P+1] = 4;
    1110:	84 e0       	ldi	r24, 0x04	; 4
    1112:	8f ab       	std	Y+55, r24	; 0x37
    gPB[TCP_OPTIONS_P+2] = 0x05;
    1114:	85 e0       	ldi	r24, 0x05	; 5
    1116:	88 af       	std	Y+56, r24	; 0x38
    gPB[TCP_OPTIONS_P+3] = 0x0;
    1118:	19 ae       	std	Y+57, r1	; 0x39
    gPB[TCP_HEADER_LEN_P] = 0x60;
    111a:	90 e6       	ldi	r25, 0x60	; 96
    111c:	9e a7       	std	Y+46, r25	; 0x2e
    gPB[TCP_WIN_SIZE] = 0x5; // 1400=0x578
    111e:	88 ab       	std	Y+48, r24	; 0x30
    gPB[TCP_WIN_SIZE+1] = 0x78;
    1120:	88 e7       	ldi	r24, 0x78	; 120
    1122:	89 ab       	std	Y+49, r24	; 0x31
    fill_checksum(TCP_CHECKSUM_H_P, IP_SRC_P, 8+TCP_HEADER_LEN_PLAIN+4,2);
    1124:	22 e0       	ldi	r18, 0x02	; 2
    1126:	40 e2       	ldi	r20, 0x20	; 32
    1128:	50 e0       	ldi	r21, 0x00	; 0
    112a:	6a e1       	ldi	r22, 0x1A	; 26
    112c:	82 e3       	ldi	r24, 0x32	; 50
    112e:	7a dd       	rcall	.-1292   	; 0xc24 <_ZL13fill_checksumhhjh>
    EtherCard::packetSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+4+ETH_HEADER_LEN);
    1130:	8a e3       	ldi	r24, 0x3A	; 58
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	3d dc       	rcall	.-1926   	; 0x9b0 <_ZN8ENC28J6010packetSendEj>
    1136:	c0 e0       	ldi	r28, 0x00	; 0
            }
            else if (gPB[TCP_FLAGS_P] & TCP_FLAGS_FIN_V)
                make_tcp_ack_from_any(0,0); //No data so close connection
        }
    }
    return 0;
    1138:	d0 e0       	ldi	r29, 0x00	; 0
    113a:	2f c0       	rjmp	.+94     	; 0x119a <_ZN9EtherCard6acceptEjj+0xee>
    if (gPB[TCP_DST_PORT_H_P] == (port >> 8) &&
            gPB[TCP_DST_PORT_L_P] == ((uint8_t) port))
    {   //Packet targeted at specified port
        if (gPB[TCP_FLAGS_P] & TCP_FLAGS_SYN_V)
            make_tcp_synack_from_syn(); //send SYN+ACK
        else if (gPB[TCP_FLAGS_P] & TCP_FLAGS_ACK_V)
    113c:	f4 fe       	sbrs	r15, 4
    113e:	2b c0       	rjmp	.+86     	; 0x1196 <_ZN9EtherCard6acceptEjj+0xea>
        {   //This is an acknowledgement to our SYN+ACK so let's start processing that payload
            info_data_len = getTcpPayloadLength();
    1140:	ed de       	rcall	.-550    	; 0xf1c <_ZN9EtherCard19getTcpPayloadLengthEv>
    1142:	ec 01       	movw	r28, r24
    1144:	90 93 2c 05 	sts	0x052C, r25	; 0x80052c <_ZL13info_data_len+0x1>
    1148:	80 93 2b 05 	sts	0x052B, r24	; 0x80052b <_ZL13info_data_len>
    114c:	89 2b       	or	r24, r25
            if (info_data_len > 0)
    114e:	b1 f0       	breq	.+44     	; 0x117c <_ZN9EtherCard6acceptEjj+0xd0>
    1150:	c0 91 2c 03 	lds	r28, 0x032C	; 0x80032c <_ZN8ENC28J606bufferE+0x2e>
            {   //Got some data
                pos = TCP_DATA_START; // TCP_DATA_START is a formula
    1154:	d0 e0       	ldi	r29, 0x00	; 0
    1156:	d5 95       	asr	r29
    1158:	c7 95       	ror	r28
    115a:	d5 95       	asr	r29
    115c:	c7 95       	ror	r28
    115e:	d5 95       	asr	r29
    1160:	c7 95       	ror	r28
    1162:	d5 95       	asr	r29
    1164:	c7 95       	ror	r28
    1166:	cc 0f       	add	r28, r28
    1168:	dd 1f       	adc	r29, r29
    116a:	cc 0f       	add	r28, r28
    116c:	dd 1f       	adc	r29, r29
    116e:	a2 96       	adiw	r28, 0x22	; 34
    1170:	0c 17       	cp	r16, r28
                //!@todo no idea what this check pos<=plen-8 does; changed this to pos<=plen as otw. perfectly valid tcp packets are ignored; still if anybody has any idea please leave a comment
                if (pos <= plen)
    1172:	1d 07       	cpc	r17, r29
    1174:	90 f4       	brcc	.+36     	; 0x119a <_ZN9EtherCard6acceptEjj+0xee>
    1176:	c0 e0       	ldi	r28, 0x00	; 0
            }
            else if (gPB[TCP_FLAGS_P] & TCP_FLAGS_FIN_V)
                make_tcp_ack_from_any(0,0); //No data so close connection
        }
    }
    return 0;
    1178:	d0 e0       	ldi	r29, 0x00	; 0
    117a:	0f c0       	rjmp	.+30     	; 0x119a <_ZN9EtherCard6acceptEjj+0xee>
    117c:	f0 fe       	sbrs	r15, 0
                pos = TCP_DATA_START; // TCP_DATA_START is a formula
                //!@todo no idea what this check pos<=plen-8 does; changed this to pos<=plen as otw. perfectly valid tcp packets are ignored; still if anybody has any idea please leave a comment
                if (pos <= plen)
                    return pos;
            }
            else if (gPB[TCP_FLAGS_P] & TCP_FLAGS_FIN_V)
    117e:	0d c0       	rjmp	.+26     	; 0x119a <_ZN9EtherCard6acceptEjj+0xee>
                make_tcp_ack_from_any(0,0); //No data so close connection
    1180:	60 e0       	ldi	r22, 0x00	; 0
    1182:	80 e0       	ldi	r24, 0x00	; 0
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	51 de       	rcall	.-862    	; 0xe2a <_ZL21make_tcp_ack_from_anyih>
    1188:	08 c0       	rjmp	.+16     	; 0x119a <_ZN9EtherCard6acceptEjj+0xee>
    118a:	c0 e0       	ldi	r28, 0x00	; 0
        }
    }
    return 0;
    118c:	d0 e0       	ldi	r29, 0x00	; 0
    118e:	05 c0       	rjmp	.+10     	; 0x119a <_ZN9EtherCard6acceptEjj+0xee>
    1190:	c0 e0       	ldi	r28, 0x00	; 0
    1192:	d0 e0       	ldi	r29, 0x00	; 0
    1194:	02 c0       	rjmp	.+4      	; 0x119a <_ZN9EtherCard6acceptEjj+0xee>
    1196:	c0 e0       	ldi	r28, 0x00	; 0
    1198:	d0 e0       	ldi	r29, 0x00	; 0
    119a:	ce 01       	movw	r24, r28
}
    119c:	df 91       	pop	r29
    119e:	cf 91       	pop	r28
    11a0:	1f 91       	pop	r17
    11a2:	0f 91       	pop	r16
    11a4:	ff 90       	pop	r15
    11a6:	08 95       	ret

000011a8 <_ZN9EtherCard10packetLoopEj>:
    11a8:	ef 92       	push	r14

uint16_t EtherCard::packetLoop (uint16_t plen) {
    11aa:	ff 92       	push	r15
    11ac:	0f 93       	push	r16
    11ae:	1f 93       	push	r17
    11b0:	cf 93       	push	r28
    11b2:	df 93       	push	r29
    11b4:	ec 01       	movw	r28, r24
    uint16_t len;

#if ETHERCARD_DHCP
    if(using_dhcp) {
    11b6:	80 91 01 05 	lds	r24, 0x0501	; 0x800501 <_ZN9EtherCard10using_dhcpE>
    11ba:	88 23       	and	r24, r24
    11bc:	11 f0       	breq	.+4      	; 0x11c2 <_ZN9EtherCard10packetLoopEj+0x1a>
        ether.DhcpStateMachine(plen);
    11be:	ce 01       	movw	r24, r28
    11c0:	57 d9       	rcall	.-3410   	; 0x470 <_ZN9EtherCard16DhcpStateMachineEj>
    }
#endif

    if (plen==0) {
    11c2:	20 97       	sbiw	r28, 0x00	; 0
    11c4:	09 f0       	breq	.+2      	; 0x11c8 <_ZN9EtherCard10packetLoopEj+0x20>
    11c6:	ac c0       	rjmp	.+344    	; 0x1320 <_ZN9EtherCard10packetLoopEj+0x178>
        //Check every 65536 (no-packet) cycles whether we need to retry ARP request for gateway
        if ((waitgwmac & WGW_INITIAL_ARP || waitgwmac & WGW_REFRESHING) &&
    11c8:	80 91 2d 05 	lds	r24, 0x052D	; 0x80052d <_ZL9waitgwmac>
    11cc:	85 70       	andi	r24, 0x05	; 5
    11ce:	89 f0       	breq	.+34     	; 0x11f2 <_ZN9EtherCard10packetLoopEj+0x4a>
    11d0:	80 91 fe 04 	lds	r24, 0x04FE	; 0x8004fe <_ZN9EtherCard8delaycntE>
    11d4:	90 91 ff 04 	lds	r25, 0x04FF	; 0x8004ff <_ZN9EtherCard8delaycntE+0x1>
    11d8:	89 2b       	or	r24, r25
                delaycnt==0 && isLinkUp()) {
    11da:	59 f4       	brne	.+22     	; 0x11f2 <_ZN9EtherCard10packetLoopEj+0x4a>
    11dc:	d6 db       	rcall	.-2132   	; 0x98a <_ZN8ENC28J608isLinkUpEv>
    }
#endif

    if (plen==0) {
        //Check every 65536 (no-packet) cycles whether we need to retry ARP request for gateway
        if ((waitgwmac & WGW_INITIAL_ARP || waitgwmac & WGW_REFRESHING) &&
    11de:	88 23       	and	r24, r24
    11e0:	41 f0       	breq	.+16     	; 0x11f2 <_ZN9EtherCard10packetLoopEj+0x4a>
                delaycnt==0 && isLinkUp()) {
            client_arp_whohas(gwip);
    11e2:	8e e0       	ldi	r24, 0x0E	; 14
    11e4:	95 e0       	ldi	r25, 0x05	; 5
    11e6:	54 de       	rcall	.-856    	; 0xe90 <_ZL17client_arp_whohasPh>
            waitgwmac |= WGW_ACCEPT_ARP_REPLY;
    11e8:	80 91 2d 05 	lds	r24, 0x052D	; 0x80052d <_ZL9waitgwmac>
    11ec:	88 60       	ori	r24, 0x08	; 8
    11ee:	80 93 2d 05 	sts	0x052D, r24	; 0x80052d <_ZL9waitgwmac>
        }
        delaycnt++;
    11f2:	80 91 fe 04 	lds	r24, 0x04FE	; 0x8004fe <_ZN9EtherCard8delaycntE>
    11f6:	90 91 ff 04 	lds	r25, 0x04FF	; 0x8004ff <_ZN9EtherCard8delaycntE+0x1>
    11fa:	01 96       	adiw	r24, 0x01	; 1
    11fc:	90 93 ff 04 	sts	0x04FF, r25	; 0x8004ff <_ZN9EtherCard8delaycntE+0x1>
    1200:	80 93 fe 04 	sts	0x04FE, r24	; 0x8004fe <_ZN9EtherCard8delaycntE>

#if ETHERCARD_TCPCLIENT
        //Initiate TCP/IP session if pending
        if (tcp_client_state==TCP_STATE_SENDSYN && (waitgwmac & WGW_HAVE_GW_MAC)) { // send a syn
    1204:	80 91 46 05 	lds	r24, 0x0546	; 0x800546 <_ZL16tcp_client_state>
    1208:	81 30       	cpi	r24, 0x01	; 1
    120a:	09 f0       	breq	.+2      	; 0x120e <_ZN9EtherCard10packetLoopEj+0x66>
    120c:	68 c0       	rjmp	.+208    	; 0x12de <_ZN9EtherCard10packetLoopEj+0x136>
    120e:	80 91 2d 05 	lds	r24, 0x052D	; 0x80052d <_ZL9waitgwmac>
    1212:	81 ff       	sbrs	r24, 1
    1214:	64 c0       	rjmp	.+200    	; 0x12de <_ZN9EtherCard10packetLoopEj+0x136>
            tcp_client_state = TCP_STATE_SYNSENT;
    1216:	82 e0       	ldi	r24, 0x02	; 2
    1218:	80 93 46 05 	sts	0x0546, r24	; 0x800546 <_ZL16tcp_client_state>
            tcpclient_src_port_l++; // allocate a new port
    121c:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <_ZL20tcpclient_src_port_l>
    1220:	8f 5f       	subi	r24, 0xFF	; 255
    1222:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <_ZL20tcpclient_src_port_l>
            client_syn(((tcp_fd<<5) | (0x1f & tcpclient_src_port_l)),tcp_client_port_h,tcp_client_port_l);
    1226:	f0 90 44 05 	lds	r15, 0x0544	; 0x800544 <_ZL17tcp_client_port_l>
    122a:	e0 90 45 05 	lds	r14, 0x0545	; 0x800545 <_ZL17tcp_client_port_h>
    122e:	20 91 47 05 	lds	r18, 0x0547	; 0x800547 <_ZL6tcp_fd>
    1232:	90 e2       	ldi	r25, 0x20	; 32
    1234:	29 9f       	mul	r18, r25
    1236:	90 01       	movw	r18, r0
    1238:	11 24       	eor	r1, r1
    123a:	8f 71       	andi	r24, 0x1F	; 31
    123c:	18 2f       	mov	r17, r24
    123e:	12 2b       	or	r17, r18
    for(uint8_t i=0; i<IP_LEN; i++)
        broadcastip[i] = myip[i] | ~netmask[i];
}

static void client_syn(uint8_t srcport,uint8_t dstport_h,uint8_t dstport_l) {
    if(is_lan(EtherCard::myip, EtherCard::hisip)) {
    1240:	62 e0       	ldi	r22, 0x02	; 2
    1242:	75 e0       	ldi	r23, 0x05	; 5
    1244:	8a e1       	ldi	r24, 0x1A	; 26
    1246:	95 e0       	ldi	r25, 0x05	; 5
    1248:	5e dd       	rcall	.-1348   	; 0xd06 <_ZL6is_lanPKhS0_>
    124a:	88 23       	and	r24, r24
    124c:	31 f0       	breq	.+12     	; 0x125a <_ZN9EtherCard10packetLoopEj+0xb2>
        setMACandIPs(destmacaddr, EtherCard::hisip);
    124e:	62 e0       	ldi	r22, 0x02	; 2
    1250:	75 e0       	ldi	r23, 0x05	; 5
    1252:	88 e3       	ldi	r24, 0x38	; 56
    1254:	95 e0       	ldi	r25, 0x05	; 5
    1256:	0c de       	rcall	.-1000   	; 0xe70 <_ZL12setMACandIPsPKhS0_>
    1258:	05 c0       	rjmp	.+10     	; 0x1264 <_ZN9EtherCard10packetLoopEj+0xbc>
    } else {
        setMACandIPs(gwmacaddr, EtherCard::hisip);
    125a:	62 e0       	ldi	r22, 0x02	; 2
    125c:	75 e0       	ldi	r23, 0x05	; 5
    125e:	8e e2       	ldi	r24, 0x2E	; 46
    1260:	95 e0       	ldi	r25, 0x05	; 5
    1262:	06 de       	rcall	.-1012   	; 0xe70 <_ZL12setMACandIPsPKhS0_>
    1264:	ce ef       	ldi	r28, 0xFE	; 254
    }
    gPB[ETH_TYPE_H_P] = ETHTYPE_IP_H_V;
    1266:	d2 e0       	ldi	r29, 0x02	; 2
    1268:	08 e0       	ldi	r16, 0x08	; 8
    126a:	0c 87       	std	Y+12, r16	; 0x0c
    126c:	1d 86       	std	Y+13, r1	; 0x0d
    gPB[ETH_TYPE_L_P] = ETHTYPE_IP_L_V;
    126e:	49 e0       	ldi	r20, 0x09	; 9
    memcpy_P(gPB + IP_P,iphdr,sizeof iphdr);
    1270:	50 e0       	ldi	r21, 0x00	; 0
    1272:	68 ee       	ldi	r22, 0xE8	; 232
    1274:	70 e0       	ldi	r23, 0x00	; 0
    1276:	8c e0       	ldi	r24, 0x0C	; 12
    1278:	93 e0       	ldi	r25, 0x03	; 3
    127a:	0e 94 84 11 	call	0x2308	; 0x2308 <memcpy_P>
    gPB[IP_TOTLEN_L_P] = 44; // good for syn
    127e:	8c e2       	ldi	r24, 0x2C	; 44
    1280:	89 8b       	std	Y+17, r24	; 0x11
    gPB[IP_PROTO_P] = IP_PROTO_TCP_V;
    1282:	86 e0       	ldi	r24, 0x06	; 6
    1284:	8f 8b       	std	Y+23, r24	; 0x17
    fill_ip_hdr_checksum();
    1286:	69 dd       	rcall	.-1326   	; 0xd5a <_ZL20fill_ip_hdr_checksumv>
    1288:	ec a2       	std	Y+36, r14	; 0x24
    gPB[TCP_DST_PORT_H_P] = dstport_h;
    128a:	fd a2       	std	Y+37, r15	; 0x25
    gPB[TCP_DST_PORT_L_P] = dstport_l;
    128c:	8b e0       	ldi	r24, 0x0B	; 11
    gPB[TCP_SRC_PORT_H_P] = TCPCLIENT_SRC_PORT_H;
    128e:	8a a3       	std	Y+34, r24	; 0x22
    1290:	1b a3       	std	Y+35, r17	; 0x23
    gPB[TCP_SRC_PORT_L_P] = srcport; // lower 8 bit of src port
    1292:	e4 e2       	ldi	r30, 0x24	; 36
    memset(gPB + TCP_SEQ_H_P, 0, 8);
    1294:	f3 e0       	ldi	r31, 0x03	; 3
    1296:	df 01       	movw	r26, r30
    1298:	1d 92       	st	X+, r1
    129a:	0a 95       	dec	r16
    129c:	e9 f7       	brne	.-6      	; 0x1298 <_ZN9EtherCard10packetLoopEj+0xf0>
    129e:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <_ZL6seqnum>
    gPB[TCP_SEQ_H_P+2] = seqnum;
    12a2:	88 a7       	std	Y+40, r24	; 0x28
    12a4:	8d 5f       	subi	r24, 0xFD	; 253
    seqnum += 3;
    12a6:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <_ZL6seqnum>
    12aa:	80 e6       	ldi	r24, 0x60	; 96
    gPB[TCP_HEADER_LEN_P] = 0x60; // 0x60=24 len: (0x60>>4) * 4
    12ac:	8e a7       	std	Y+46, r24	; 0x2e
    12ae:	82 e0       	ldi	r24, 0x02	; 2
    gPB[TCP_FLAGS_P] = TCP_FLAGS_SYN_V;
    12b0:	8f a7       	std	Y+47, r24	; 0x2f
    12b2:	93 e0       	ldi	r25, 0x03	; 3
    gPB[TCP_WIN_SIZE] = 0x3; // 1024 = 0x400 768 = 0x300, initial window
    12b4:	98 ab       	std	Y+48, r25	; 0x30
    12b6:	19 aa       	std	Y+49, r1	; 0x31
    gPB[TCP_WIN_SIZE+1] = 0x0;
    12b8:	1a aa       	std	Y+50, r1	; 0x32
    gPB[TCP_CHECKSUM_H_P] = 0;
    12ba:	1b aa       	std	Y+51, r1	; 0x33
    gPB[TCP_CHECKSUM_L_P] = 0;
    12bc:	1c aa       	std	Y+52, r1	; 0x34
    gPB[TCP_CHECKSUM_L_P+1] = 0;
    12be:	1d aa       	std	Y+53, r1	; 0x35
    gPB[TCP_CHECKSUM_L_P+2] = 0;
    12c0:	8e ab       	std	Y+54, r24	; 0x36
    gPB[TCP_OPTIONS_P] = 2;
    12c2:	94 e0       	ldi	r25, 0x04	; 4
    gPB[TCP_OPTIONS_P+1] = 4;
    12c4:	9f ab       	std	Y+55, r25	; 0x37
    12c6:	88 af       	std	Y+56, r24	; 0x38
    gPB[TCP_OPTIONS_P+2] = (CLIENTMSS>>8);
    12c8:	86 e2       	ldi	r24, 0x26	; 38
    gPB[TCP_OPTIONS_P+3] = (uint8_t) CLIENTMSS;
    12ca:	89 af       	std	Y+57, r24	; 0x39
    fill_checksum(TCP_CHECKSUM_H_P, IP_SRC_P, 8 +TCP_HEADER_LEN_PLAIN+4,2);
    12cc:	22 e0       	ldi	r18, 0x02	; 2
    12ce:	40 e2       	ldi	r20, 0x20	; 32
    12d0:	50 e0       	ldi	r21, 0x00	; 0
    12d2:	6a e1       	ldi	r22, 0x1A	; 26
    12d4:	82 e3       	ldi	r24, 0x32	; 50
    12d6:	a6 dc       	rcall	.-1716   	; 0xc24 <_ZL13fill_checksumhhjh>
    // 4 is the tcp mss option:
    EtherCard::packetSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+ETH_HEADER_LEN+4);
    12d8:	8a e3       	ldi	r24, 0x3A	; 58
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	69 db       	rcall	.-2350   	; 0x9b0 <_ZN8ENC28J6010packetSendEj>
    12de:	66 e0       	ldi	r22, 0x06	; 6
            client_syn(((tcp_fd<<5) | (0x1f & tcpclient_src_port_l)),tcp_client_port_h,tcp_client_port_l);
        }
#endif

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, dnsip) && !has_dns_mac && !waiting_for_dns_mac) {
    12e0:	75 e0       	ldi	r23, 0x05	; 5
    12e2:	8a e1       	ldi	r24, 0x1A	; 26
    12e4:	95 e0       	ldi	r25, 0x05	; 5
    12e6:	0f dd       	rcall	.-1506   	; 0xd06 <_ZL6is_lanPKhS0_>
    12e8:	88 23       	and	r24, r24
    12ea:	49 f0       	breq	.+18     	; 0x12fe <_ZN9EtherCard10packetLoopEj+0x156>
    12ec:	80 91 36 05 	lds	r24, 0x0536	; 0x800536 <_ZL11has_dns_mac>
    12f0:	81 11       	cpse	r24, r1
    12f2:	05 c0       	rjmp	.+10     	; 0x12fe <_ZN9EtherCard10packetLoopEj+0x156>
    12f4:	80 91 37 05 	lds	r24, 0x0537	; 0x800537 <_ZL19waiting_for_dns_mac>
    12f8:	88 23       	and	r24, r24
    12fa:	09 f4       	brne	.+2      	; 0x12fe <_ZN9EtherCard10packetLoopEj+0x156>
    12fc:	e2 c1       	rjmp	.+964    	; 0x16c2 <_ZN9EtherCard10packetLoopEj+0x51a>
    12fe:	62 e0       	ldi	r22, 0x02	; 2
            client_arp_whohas(dnsip);
            waiting_for_dns_mac = true;
        }

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, hisip) && !has_dest_mac && !waiting_for_dest_mac) {
    1300:	75 e0       	ldi	r23, 0x05	; 5
    1302:	8a e1       	ldi	r24, 0x1A	; 26
    1304:	95 e0       	ldi	r25, 0x05	; 5
    1306:	ff dc       	rcall	.-1538   	; 0xd06 <_ZL6is_lanPKhS0_>
    1308:	88 23       	and	r24, r24
    130a:	09 f4       	brne	.+2      	; 0x130e <_ZN9EtherCard10packetLoopEj+0x166>
    130c:	aa c1       	rjmp	.+852    	; 0x1662 <_ZN9EtherCard10packetLoopEj+0x4ba>
    130e:	80 91 34 05 	lds	r24, 0x0534	; 0x800534 <_ZL12has_dest_mac>
    1312:	81 11       	cpse	r24, r1
    1314:	a9 c1       	rjmp	.+850    	; 0x1668 <_ZN9EtherCard10packetLoopEj+0x4c0>
    1316:	80 91 35 05 	lds	r24, 0x0535	; 0x800535 <_ZL20waiting_for_dest_mac>
    131a:	81 11       	cpse	r24, r1
    131c:	a8 c1       	rjmp	.+848    	; 0x166e <_ZN9EtherCard10packetLoopEj+0x4c6>
    131e:	d8 c1       	rjmp	.+944    	; 0x16d0 <_ZN9EtherCard10packetLoopEj+0x528>
    1320:	c9 32       	cpi	r28, 0x29	; 41
    1322:	d1 05       	cpc	r29, r1
    return true;
}

static uint8_t eth_type_is_arp_and_my_ip(uint16_t len) {
    return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
    1324:	08 f4       	brcc	.+2      	; 0x1328 <_ZN9EtherCard10packetLoopEj+0x180>
    1326:	dd c1       	rjmp	.+954    	; 0x16e2 <_ZN9EtherCard10packetLoopEj+0x53a>
    1328:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <_ZN8ENC28J606bufferE+0xc>
        }
    return true;
}

static uint8_t eth_type_is_arp_and_my_ip(uint16_t len) {
    return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
    132c:	88 30       	cpi	r24, 0x08	; 8
    132e:	09 f0       	breq	.+2      	; 0x1332 <_ZN9EtherCard10packetLoopEj+0x18a>
    1330:	a1 c1       	rjmp	.+834    	; 0x1674 <_ZN9EtherCard10packetLoopEj+0x4cc>
    1332:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <_ZN8ENC28J606bufferE+0xd>
    1336:	86 30       	cpi	r24, 0x06	; 6
    1338:	09 f0       	breq	.+2      	; 0x133c <_ZN9EtherCard10packetLoopEj+0x194>
    133a:	f2 c1       	rjmp	.+996    	; 0x1720 <_ZN9EtherCard10packetLoopEj+0x578>
    133c:	44 e0       	ldi	r20, 0x04	; 4
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
           memcmp(gPB + ETH_ARP_DST_IP_P, EtherCard::myip, IP_LEN) == 0;
    133e:	50 e0       	ldi	r21, 0x00	; 0
    1340:	6a e1       	ldi	r22, 0x1A	; 26
    1342:	75 e0       	ldi	r23, 0x05	; 5
    1344:	84 e2       	ldi	r24, 0x24	; 36
    1346:	93 e0       	ldi	r25, 0x03	; 3
    1348:	e8 d7       	rcall	.+4048   	; 0x231a <memcmp>
    134a:	89 2b       	or	r24, r25
    return true;
}

static uint8_t eth_type_is_arp_and_my_ip(uint16_t len) {
    return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
    134c:	09 f0       	breq	.+2      	; 0x1350 <_ZN9EtherCard10packetLoopEj+0x1a8>
    134e:	e8 c1       	rjmp	.+976    	; 0x1720 <_ZN9EtherCard10packetLoopEj+0x578>
    1350:	cf c1       	rjmp	.+926    	; 0x16f0 <_ZN9EtherCard10packetLoopEj+0x548>
    1352:	84 e0       	ldi	r24, 0x04	; 4
    gPB[TCP_CHECKSUM_L_P] = 0;
    gPB[TCP_HEADER_LEN_P] = 0x50;
}

static void make_arp_answer_from_request() {
    setMACs(gPB + ETH_SRC_MAC);
    1354:	93 e0       	ldi	r25, 0x03	; 3
    1356:	50 dd       	rcall	.-1376   	; 0xdf8 <_ZL7setMACsPKh>
    1358:	ee ef       	ldi	r30, 0xFE	; 254
    gPB[ETH_ARP_OPCODE_H_P] = ETH_ARP_OPCODE_REPLY_H_V;
    135a:	f2 e0       	ldi	r31, 0x02	; 2
    135c:	14 8a       	std	Z+20, r1	; 0x14
    gPB[ETH_ARP_OPCODE_L_P] = ETH_ARP_OPCODE_REPLY_L_V;
    135e:	82 e0       	ldi	r24, 0x02	; 2
    1360:	85 8b       	std	Z+21, r24	; 0x15
    EtherCard::copyMac(gPB + ETH_ARP_DST_MAC_P, gPB + ETH_ARP_SRC_MAC_P);
    1362:	64 e1       	ldi	r22, 0x14	; 20
    1364:	73 e0       	ldi	r23, 0x03	; 3
    1366:	8e e1       	ldi	r24, 0x1E	; 30
    1368:	93 e0       	ldi	r25, 0x03	; 3
    136a:	78 d2       	rcall	.+1264   	; 0x185c <_ZN9EtherCard7copyMacEPhPKh>
    EtherCard::copyMac(gPB + ETH_ARP_SRC_MAC_P, EtherCard::mymac);
    136c:	6e e1       	ldi	r22, 0x1E	; 30
    136e:	75 e0       	ldi	r23, 0x05	; 5
    1370:	84 e1       	ldi	r24, 0x14	; 20
    1372:	93 e0       	ldi	r25, 0x03	; 3
    EtherCard::copyIp(gPB + ETH_ARP_DST_IP_P, gPB + ETH_ARP_SRC_IP_P);
    1374:	73 d2       	rcall	.+1254   	; 0x185c <_ZN9EtherCard7copyMacEPhPKh>
    1376:	6a e1       	ldi	r22, 0x1A	; 26
    1378:	73 e0       	ldi	r23, 0x03	; 3
    137a:	84 e2       	ldi	r24, 0x24	; 36
    137c:	93 e0       	ldi	r25, 0x03	; 3
    137e:	61 d2       	rcall	.+1218   	; 0x1842 <_ZN9EtherCard6copyIpEPhPKh>
    EtherCard::copyIp(gPB + ETH_ARP_SRC_IP_P, EtherCard::myip);
    1380:	6a e1       	ldi	r22, 0x1A	; 26
    1382:	75 e0       	ldi	r23, 0x05	; 5
    1384:	8a e1       	ldi	r24, 0x1A	; 26
    1386:	93 e0       	ldi	r25, 0x03	; 3
    1388:	5c d2       	rcall	.+1208   	; 0x1842 <_ZN9EtherCard6copyIpEPhPKh>
    EtherCard::packetSend(42);
    138a:	8a e2       	ldi	r24, 0x2A	; 42
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	10 db       	rcall	.-2528   	; 0x9b0 <_ZN8ENC28J6010packetSendEj>
    1390:	80 91 2d 05 	lds	r24, 0x052D	; 0x80052d <_ZL9waitgwmac>

    if (eth_type_is_arp_and_my_ip(plen))
    {   //Service ARP request
        if (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REQ_L_V)
            make_arp_answer_from_request();
        if (waitgwmac & WGW_ACCEPT_ARP_REPLY && (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REPLY_L_V) && client_store_mac(gwip, gwmacaddr))
    1394:	83 ff       	sbrs	r24, 3
    1396:	0e c0       	rjmp	.+28     	; 0x13b4 <_ZN9EtherCard10packetLoopEj+0x20c>
    1398:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <_ZN8ENC28J606bufferE+0x15>
    139c:	82 30       	cpi	r24, 0x02	; 2
    139e:	51 f4       	brne	.+20     	; 0x13b4 <_ZN9EtherCard10packetLoopEj+0x20c>
    13a0:	6e e2       	ldi	r22, 0x2E	; 46
    13a2:	75 e0       	ldi	r23, 0x05	; 5
    13a4:	8e e0       	ldi	r24, 0x0E	; 14
    13a6:	95 e0       	ldi	r25, 0x05	; 5
    13a8:	a3 dd       	rcall	.-1210   	; 0xef0 <_ZL16client_store_macPhS_>
    13aa:	88 23       	and	r24, r24
    13ac:	19 f0       	breq	.+6      	; 0x13b4 <_ZN9EtherCard10packetLoopEj+0x20c>
    13ae:	82 e0       	ldi	r24, 0x02	; 2
            waitgwmac = WGW_HAVE_GW_MAC;
    13b0:	80 93 2d 05 	sts	0x052D, r24	; 0x80052d <_ZL9waitgwmac>
    13b4:	80 91 36 05 	lds	r24, 0x0536	; 0x800536 <_ZL11has_dns_mac>
        if (!has_dns_mac && waiting_for_dns_mac && client_store_mac(dnsip, destmacaddr)) {
    13b8:	81 11       	cpse	r24, r1
    13ba:	10 c0       	rjmp	.+32     	; 0x13dc <_ZN9EtherCard10packetLoopEj+0x234>
    13bc:	80 91 37 05 	lds	r24, 0x0537	; 0x800537 <_ZL19waiting_for_dns_mac>
    13c0:	88 23       	and	r24, r24
    13c2:	61 f0       	breq	.+24     	; 0x13dc <_ZN9EtherCard10packetLoopEj+0x234>
    13c4:	68 e3       	ldi	r22, 0x38	; 56
    13c6:	75 e0       	ldi	r23, 0x05	; 5
    13c8:	86 e0       	ldi	r24, 0x06	; 6
    13ca:	95 e0       	ldi	r25, 0x05	; 5
    13cc:	91 dd       	rcall	.-1246   	; 0xef0 <_ZL16client_store_macPhS_>
    13ce:	88 23       	and	r24, r24
    13d0:	29 f0       	breq	.+10     	; 0x13dc <_ZN9EtherCard10packetLoopEj+0x234>
    13d2:	81 e0       	ldi	r24, 0x01	; 1
            has_dns_mac = true;
    13d4:	80 93 36 05 	sts	0x0536, r24	; 0x800536 <_ZL11has_dns_mac>
    13d8:	10 92 37 05 	sts	0x0537, r1	; 0x800537 <_ZL19waiting_for_dns_mac>
            waiting_for_dns_mac = false;
    13dc:	80 91 34 05 	lds	r24, 0x0534	; 0x800534 <_ZL12has_dest_mac>
        }
        if (!has_dest_mac && waiting_for_dest_mac && client_store_mac(hisip, destmacaddr)) {
    13e0:	81 11       	cpse	r24, r1
    13e2:	4b c1       	rjmp	.+662    	; 0x167a <_ZN9EtherCard10packetLoopEj+0x4d2>
    13e4:	80 91 35 05 	lds	r24, 0x0535	; 0x800535 <_ZL20waiting_for_dest_mac>
    13e8:	88 23       	and	r24, r24
    13ea:	09 f4       	brne	.+2      	; 0x13ee <_ZN9EtherCard10packetLoopEj+0x246>
    13ec:	49 c1       	rjmp	.+658    	; 0x1680 <_ZN9EtherCard10packetLoopEj+0x4d8>
    13ee:	68 e3       	ldi	r22, 0x38	; 56
    13f0:	75 e0       	ldi	r23, 0x05	; 5
    13f2:	82 e0       	ldi	r24, 0x02	; 2
    13f4:	95 e0       	ldi	r25, 0x05	; 5
    13f6:	7c dd       	rcall	.-1288   	; 0xef0 <_ZL16client_store_macPhS_>
    13f8:	88 23       	and	r24, r24
    13fa:	09 f4       	brne	.+2      	; 0x13fe <_ZN9EtherCard10packetLoopEj+0x256>
    13fc:	44 c1       	rjmp	.+648    	; 0x1686 <_ZN9EtherCard10packetLoopEj+0x4de>
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	80 93 34 05 	sts	0x0534, r24	; 0x800534 <_ZL12has_dest_mac>
            has_dest_mac = true;
    1404:	10 92 35 05 	sts	0x0535, r1	; 0x800535 <_ZL20waiting_for_dest_mac>
            waiting_for_dest_mac = false;
    1408:	80 e0       	ldi	r24, 0x00	; 0
    140a:	90 e0       	ldi	r25, 0x00	; 0
        }
        return 0;
    140c:	8f c1       	rjmp	.+798    	; 0x172c <_ZN9EtherCard10packetLoopEj+0x584>
    140e:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <_ZN8ENC28J606bufferE+0xc>
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
           memcmp(gPB + ETH_ARP_DST_IP_P, EtherCard::myip, IP_LEN) == 0;
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
    1412:	88 30       	cpi	r24, 0x08	; 8
    1414:	09 f0       	breq	.+2      	; 0x1418 <_ZN9EtherCard10packetLoopEj+0x270>
    1416:	3a c1       	rjmp	.+628    	; 0x168c <_ZN9EtherCard10packetLoopEj+0x4e4>
    1418:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <_ZN8ENC28J606bufferE+0xd>
    141c:	81 11       	cpse	r24, r1
    141e:	39 c1       	rjmp	.+626    	; 0x1692 <_ZN9EtherCard10packetLoopEj+0x4ea>
    1420:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <_ZN8ENC28J606bufferE+0xe>
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
    1424:	85 34       	cpi	r24, 0x45	; 69
    1426:	09 f0       	breq	.+2      	; 0x142a <_ZN9EtherCard10packetLoopEj+0x282>
    1428:	37 c1       	rjmp	.+622    	; 0x1698 <_ZN9EtherCard10packetLoopEj+0x4f0>
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
           (memcmp(gPB + IP_DST_P, EtherCard::myip, IP_LEN) == 0  //not my IP
    142a:	44 e0       	ldi	r20, 0x04	; 4
    142c:	50 e0       	ldi	r21, 0x00	; 0
    142e:	6a e1       	ldi	r22, 0x1A	; 26
    1430:	75 e0       	ldi	r23, 0x05	; 5
    1432:	8c e1       	ldi	r24, 0x1C	; 28
    1434:	93 e0       	ldi	r25, 0x03	; 3
    1436:	71 d7       	rcall	.+3810   	; 0x231a <memcmp>
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
    1438:	89 2b       	or	r24, r25
    143a:	09 f4       	brne	.+2      	; 0x143e <_ZN9EtherCard10packetLoopEj+0x296>
    143c:	5f c1       	rjmp	.+702    	; 0x16fc <_ZN9EtherCard10packetLoopEj+0x554>
           (memcmp(gPB + IP_DST_P, EtherCard::myip, IP_LEN) == 0  //not my IP
            || (memcmp(gPB + IP_DST_P, EtherCard::broadcastip, IP_LEN) == 0) //not subnet broadcast
    143e:	44 e0       	ldi	r20, 0x04	; 4
    1440:	50 e0       	ldi	r21, 0x00	; 0
    1442:	62 e1       	ldi	r22, 0x12	; 18
    1444:	75 e0       	ldi	r23, 0x05	; 5
    1446:	8c e1       	ldi	r24, 0x1C	; 28
    1448:	93 e0       	ldi	r25, 0x03	; 3
    144a:	67 d7       	rcall	.+3790   	; 0x231a <memcmp>
    144c:	89 2b       	or	r24, r25
    144e:	09 f4       	brne	.+2      	; 0x1452 <_ZN9EtherCard10packetLoopEj+0x2aa>
    1450:	55 c1       	rjmp	.+682    	; 0x16fc <_ZN9EtherCard10packetLoopEj+0x554>
    1452:	44 e0       	ldi	r20, 0x04	; 4
            || (memcmp(gPB + IP_DST_P, allOnes, IP_LEN) == 0)); //not global broadcasts
    1454:	50 e0       	ldi	r21, 0x00	; 0
    1456:	68 e3       	ldi	r22, 0x38	; 56
    1458:	72 e0       	ldi	r23, 0x02	; 2
    145a:	8c e1       	ldi	r24, 0x1C	; 28
    145c:	93 e0       	ldi	r25, 0x03	; 3
    145e:	5d d7       	rcall	.+3770   	; 0x231a <memcmp>
    1460:	89 2b       	or	r24, r25
    1462:	09 f4       	brne	.+2      	; 0x1466 <_ZN9EtherCard10packetLoopEj+0x2be>
    1464:	4b c1       	rjmp	.+662    	; 0x16fc <_ZN9EtherCard10packetLoopEj+0x554>
    1466:	80 e0       	ldi	r24, 0x00	; 0
    }

    if (eth_type_is_ip_and_my_ip(plen)==0)
    {   //Not IP so ignoring
        //!@todo Add other protocols (and make each optional at compile time)
        return 0;
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	60 c1       	rjmp	.+704    	; 0x172c <_ZN9EtherCard10packetLoopEj+0x584>
    146c:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <_ZN8ENC28J606bufferE+0x22>
    }

#if ETHERCARD_ICMP
    if (gPB[IP_PROTO_P]==IP_PROTO_ICMP_V && gPB[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V)
    1470:	88 30       	cpi	r24, 0x08	; 8
    1472:	d9 f4       	brne	.+54     	; 0x14aa <_ZN9EtherCard10packetLoopEj+0x302>
    1474:	e0 91 3e 05 	lds	r30, 0x053E	; 0x80053e <_ZL7icmp_cb>
    {   //Service ICMP echo request (ping)
        if (icmp_cb)
    1478:	f0 91 3f 05 	lds	r31, 0x053F	; 0x80053f <_ZL7icmp_cb+0x1>
    147c:	30 97       	sbiw	r30, 0x00	; 0
            (*icmp_cb)(&(gPB[IP_SRC_P]));
    147e:	19 f0       	breq	.+6      	; 0x1486 <_ZN9EtherCard10packetLoopEj+0x2de>
    1480:	88 e1       	ldi	r24, 0x18	; 24
    1482:	93 e0       	ldi	r25, 0x03	; 3
    EtherCard::copyIp(gPB + ETH_ARP_SRC_IP_P, EtherCard::myip);
    EtherCard::packetSend(42);
}

static void make_echo_reply_from_request(uint16_t len) {
    make_eth_ip();
    1484:	19 95       	eicall
    1486:	c2 dc       	rcall	.-1660   	; 0xe0c <_ZL11make_eth_ipv>
    gPB[ICMP_TYPE_P] = ICMP_TYPE_ECHOREPLY_V;
    1488:	ee ef       	ldi	r30, 0xFE	; 254
    148a:	f2 e0       	ldi	r31, 0x02	; 2
    148c:	12 a2       	std	Z+34, r1	; 0x22
    if (gPB[ICMP_CHECKSUM_P] > (0xFF-0x08))
    148e:	84 a1       	ldd	r24, Z+36	; 0x24
    1490:	88 3f       	cpi	r24, 0xF8	; 248
    1492:	18 f0       	brcs	.+6      	; 0x149a <_ZN9EtherCard10packetLoopEj+0x2f2>
        gPB[ICMP_CHECKSUM_P+1]++;
    1494:	95 a1       	ldd	r25, Z+37	; 0x25
    1496:	9f 5f       	subi	r25, 0xFF	; 255
    1498:	95 a3       	std	Z+37, r25	; 0x25
    gPB[ICMP_CHECKSUM_P] += 0x08;
    149a:	88 5f       	subi	r24, 0xF8	; 248
    149c:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <_ZN8ENC28J606bufferE+0x24>
    EtherCard::packetSend(len);
    14a0:	ce 01       	movw	r24, r28
    14a2:	86 da       	rcall	.-2804   	; 0x9b0 <_ZN8ENC28J6010packetSendEj>
    14a4:	80 e0       	ldi	r24, 0x00	; 0
    if (gPB[IP_PROTO_P]==IP_PROTO_ICMP_V && gPB[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V)
    {   //Service ICMP echo request (ping)
        if (icmp_cb)
            (*icmp_cb)(&(gPB[IP_SRC_P]));
        make_echo_reply_from_request(plen);
        return 0;
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	41 c1       	rjmp	.+642    	; 0x172c <_ZN9EtherCard10packetLoopEj+0x584>
    14aa:	61 d1       	rcall	.+706    	; 0x176e <_ZN9EtherCard18udpServerListeningEv>
    }
#endif
#if ETHERCARD_UDPSERVER
    if (ether.udpServerListening() && gPB[IP_PROTO_P]==IP_PROTO_UDP_V)
    14ac:	88 23       	and	r24, r24
    14ae:	29 f0       	breq	.+10     	; 0x14ba <_ZN9EtherCard10packetLoopEj+0x312>
    14b0:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <_ZN8ENC28J606bufferE+0x17>
    14b4:	81 31       	cpi	r24, 0x11	; 17
    14b6:	09 f4       	brne	.+2      	; 0x14ba <_ZN9EtherCard10packetLoopEj+0x312>
    14b8:	27 c1       	rjmp	.+590    	; 0x1708 <_ZN9EtherCard10packetLoopEj+0x560>
    14ba:	c6 33       	cpi	r28, 0x36	; 54
        if(ether.udpServerHasProcessedPacket(plen))
            return 0; //An UDP server handler (callback) has processed this packet
    }
#endif

    if (plen<54 || gPB[IP_PROTO_P]!=IP_PROTO_TCP_V )
    14bc:	d1 05       	cpc	r29, r1
    14be:	08 f4       	brcc	.+2      	; 0x14c2 <_ZN9EtherCard10packetLoopEj+0x31a>
    14c0:	ee c0       	rjmp	.+476    	; 0x169e <_ZN9EtherCard10packetLoopEj+0x4f6>
    14c2:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <_ZN8ENC28J606bufferE+0x17>
    14c6:	86 30       	cpi	r24, 0x06	; 6
    14c8:	09 f0       	breq	.+2      	; 0x14cc <_ZN9EtherCard10packetLoopEj+0x324>
    14ca:	ec c0       	rjmp	.+472    	; 0x16a4 <_ZN9EtherCard10packetLoopEj+0x4fc>
    14cc:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <_ZN8ENC28J606bufferE+0x24>
        return 0; //from here on we are only interested in TCP-packets; these are longer than 54 bytes

#if ETHERCARD_TCPCLIENT
    if (gPB[TCP_DST_PORT_H_P]==TCPCLIENT_SRC_PORT_H)
    14d0:	8b 30       	cpi	r24, 0x0B	; 11
    14d2:	09 f0       	breq	.+2      	; 0x14d6 <_ZN9EtherCard10packetLoopEj+0x32e>
    14d4:	bf c0       	rjmp	.+382    	; 0x1654 <_ZN9EtherCard10packetLoopEj+0x4ac>
    14d6:	44 e0       	ldi	r20, 0x04	; 4
    EtherCard::copyIp(gPB + IP_DST_P, dst);
    EtherCard::copyIp(gPB + IP_SRC_P, EtherCard::myip);
}

static uint8_t check_ip_message_is_from(const uint8_t *ip) {
    return memcmp(gPB + IP_SRC_P, ip, IP_LEN) == 0;
    14d8:	50 e0       	ldi	r21, 0x00	; 0
    14da:	62 e0       	ldi	r22, 0x02	; 2
    14dc:	75 e0       	ldi	r23, 0x05	; 5
    14de:	88 e1       	ldi	r24, 0x18	; 24
    14e0:	93 e0       	ldi	r25, 0x03	; 3
    14e2:	1b d7       	rcall	.+3638   	; 0x231a <memcmp>
    14e4:	89 2b       	or	r24, r25
    14e6:	09 f0       	breq	.+2      	; 0x14ea <_ZN9EtherCard10packetLoopEj+0x342>
        return 0; //from here on we are only interested in TCP-packets; these are longer than 54 bytes

#if ETHERCARD_TCPCLIENT
    if (gPB[TCP_DST_PORT_H_P]==TCPCLIENT_SRC_PORT_H)
    {   //Source port is in range reserved (by EtherCard) for client TCP/IP connections
        if (check_ip_message_is_from(hisip)==0)
    14e8:	e0 c0       	rjmp	.+448    	; 0x16aa <_ZN9EtherCard10packetLoopEj+0x502>
    14ea:	10 91 2d 03 	lds	r17, 0x032D	; 0x80032d <_ZN8ENC28J606bufferE+0x2f>
            return 0; //Not current TCP/IP connection (only handle one at a time)
        if (gPB[TCP_FLAGS_P] & TCP_FLAGS_RST_V)
    14ee:	12 ff       	sbrs	r17, 2
    14f0:	17 c0       	rjmp	.+46     	; 0x1520 <_ZN9EtherCard10packetLoopEj+0x378>
    14f2:	e0 91 42 05 	lds	r30, 0x0542	; 0x800542 <_ZL20client_tcp_result_cb>
        {   //TCP reset flagged
            if (client_tcp_result_cb)
    14f6:	f0 91 43 05 	lds	r31, 0x0543	; 0x800543 <_ZL20client_tcp_result_cb+0x1>
    14fa:	30 97       	sbiw	r30, 0x00	; 0
    14fc:	59 f0       	breq	.+22     	; 0x1514 <_ZN9EtherCard10packetLoopEj+0x36c>
    14fe:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <_ZN8ENC28J606bufferE+0x25>
                (*client_tcp_result_cb)((gPB[TCP_DST_PORT_L_P]>>5)&0x7,3,0,0);
    1502:	20 e0       	ldi	r18, 0x00	; 0
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	40 e0       	ldi	r20, 0x00	; 0
    1508:	50 e0       	ldi	r21, 0x00	; 0
    150a:	63 e0       	ldi	r22, 0x03	; 3
    150c:	82 95       	swap	r24
    150e:	86 95       	lsr	r24
    1510:	87 70       	andi	r24, 0x07	; 7
    1512:	19 95       	eicall
            tcp_client_state = TCP_STATE_CLOSING;
    1514:	85 e0       	ldi	r24, 0x05	; 5
    1516:	80 93 46 05 	sts	0x0546, r24	; 0x800546 <_ZL16tcp_client_state>
            return 0;
    151a:	80 e0       	ldi	r24, 0x00	; 0
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	06 c1       	rjmp	.+524    	; 0x172c <_ZN9EtherCard10packetLoopEj+0x584>
        }
        len = getTcpPayloadLength();
    1520:	fd dc       	rcall	.-1542   	; 0xf1c <_ZN9EtherCard19getTcpPayloadLengthEv>
    1522:	7c 01       	movw	r14, r24
    1524:	80 91 46 05 	lds	r24, 0x0546	; 0x800546 <_ZL16tcp_client_state>
        if (tcp_client_state==TCP_STATE_SYNSENT)
    1528:	82 30       	cpi	r24, 0x02	; 2
    152a:	89 f5       	brne	.+98     	; 0x158e <_ZN9EtherCard10packetLoopEj+0x3e6>
    152c:	81 2f       	mov	r24, r17
    152e:	80 71       	andi	r24, 0x10	; 16
    1530:	12 71       	andi	r17, 0x12	; 18
        {   //Waiting for SYN-ACK
            if ((gPB[TCP_FLAGS_P] & TCP_FLAGS_SYN_V) && (gPB[TCP_FLAGS_P] &TCP_FLAGS_ACK_V))
    1532:	12 31       	cpi	r17, 0x12	; 18
    1534:	e9 f4       	brne	.+58     	; 0x1570 <_ZN9EtherCard10packetLoopEj+0x3c8>
            {   //SYN and ACK flags set so this is an acknowledgement to our SYN
                make_tcp_ack_from_any(0,0);
    1536:	60 e0       	ldi	r22, 0x00	; 0
    1538:	80 e0       	ldi	r24, 0x00	; 0
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	76 dc       	rcall	.-1812   	; 0xe2a <_ZL21make_tcp_ack_from_anyih>
    153e:	88 e1       	ldi	r24, 0x18	; 24
                gPB[TCP_FLAGS_P] = TCP_FLAGS_ACK_V|TCP_FLAGS_PUSH_V;
    1540:	80 93 2d 03 	sts	0x032D, r24	; 0x80032d <_ZN8ENC28J606bufferE+0x2f>
    1544:	e0 91 40 05 	lds	r30, 0x0540	; 0x800540 <_ZL22client_tcp_datafill_cb>
                if (client_tcp_datafill_cb)
    1548:	f0 91 41 05 	lds	r31, 0x0541	; 0x800541 <_ZL22client_tcp_datafill_cb+0x1>
    154c:	30 97       	sbiw	r30, 0x00	; 0
    154e:	39 f0       	breq	.+14     	; 0x155e <_ZN9EtherCard10packetLoopEj+0x3b6>
                    len = (*client_tcp_datafill_cb)((gPB[TCP_SRC_PORT_L_P]>>5)&0x7);
    1550:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <_ZN8ENC28J606bufferE+0x23>
    1554:	82 95       	swap	r24
    1556:	86 95       	lsr	r24
    1558:	87 70       	andi	r24, 0x07	; 7
    155a:	19 95       	eicall
    155c:	02 c0       	rjmp	.+4      	; 0x1562 <_ZN9EtherCard10packetLoopEj+0x3ba>
                else
                    len = 0;
    155e:	80 e0       	ldi	r24, 0x00	; 0
    1560:	90 e0       	ldi	r25, 0x00	; 0
                tcp_client_state = TCP_STATE_ESTABLISHED;
    1562:	23 e0       	ldi	r18, 0x03	; 3
    1564:	20 93 46 05 	sts	0x0546, r18	; 0x800546 <_ZL16tcp_client_state>
                make_tcp_ack_with_data_noflags(len);
    1568:	2b dc       	rcall	.-1962   	; 0xdc0 <_ZL30make_tcp_ack_with_data_noflagsj>
    156a:	80 e0       	ldi	r24, 0x00	; 0
                len++;
                if (gPB[TCP_FLAGS_P] & TCP_FLAGS_ACK_V)
                    len = 0;
                make_tcp_ack_from_any(len,TCP_FLAGS_RST_V);
            }
            return 0;
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	de c0       	rjmp	.+444    	; 0x172c <_ZN9EtherCard10packetLoopEj+0x584>
                if (client_tcp_datafill_cb)
                    len = (*client_tcp_datafill_cb)((gPB[TCP_SRC_PORT_L_P]>>5)&0x7);
                else
                    len = 0;
                tcp_client_state = TCP_STATE_ESTABLISHED;
                make_tcp_ack_with_data_noflags(len);
    1570:	91 e0       	ldi	r25, 0x01	; 1
            }
            else
            {   //Expecting SYN+ACK so reset and resend SYN
                tcp_client_state = TCP_STATE_SENDSYN; // retry
    1572:	90 93 46 05 	sts	0x0546, r25	; 0x800546 <_ZL16tcp_client_state>
    1576:	81 11       	cpse	r24, r1
                len++;
                if (gPB[TCP_FLAGS_P] & TCP_FLAGS_ACK_V)
    1578:	03 c0       	rjmp	.+6      	; 0x1580 <_ZN9EtherCard10packetLoopEj+0x3d8>
    157a:	c7 01       	movw	r24, r14
                make_tcp_ack_with_data_noflags(len);
            }
            else
            {   //Expecting SYN+ACK so reset and resend SYN
                tcp_client_state = TCP_STATE_SENDSYN; // retry
                len++;
    157c:	01 96       	adiw	r24, 0x01	; 1
    157e:	02 c0       	rjmp	.+4      	; 0x1584 <_ZN9EtherCard10packetLoopEj+0x3dc>
    1580:	80 e0       	ldi	r24, 0x00	; 0
                if (gPB[TCP_FLAGS_P] & TCP_FLAGS_ACK_V)
                    len = 0;
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	64 e0       	ldi	r22, 0x04	; 4
                make_tcp_ack_from_any(len,TCP_FLAGS_RST_V);
    1586:	51 dc       	rcall	.-1886   	; 0xe2a <_ZL21make_tcp_ack_from_anyih>
    1588:	80 e0       	ldi	r24, 0x00	; 0
    158a:	90 e0       	ldi	r25, 0x00	; 0
            }
            return 0;
    158c:	cf c0       	rjmp	.+414    	; 0x172c <_ZN9EtherCard10packetLoopEj+0x584>
    158e:	83 30       	cpi	r24, 0x03	; 3
    1590:	09 f0       	breq	.+2      	; 0x1594 <_ZN9EtherCard10packetLoopEj+0x3ec>
        }
        if (tcp_client_state==TCP_STATE_ESTABLISHED && len>0)
    1592:	47 c0       	rjmp	.+142    	; 0x1622 <_ZN9EtherCard10packetLoopEj+0x47a>
    1594:	e1 14       	cp	r14, r1
    1596:	f1 04       	cpc	r15, r1
    1598:	09 f4       	brne	.+2      	; 0x159c <_ZN9EtherCard10packetLoopEj+0x3f4>
    159a:	bf c0       	rjmp	.+382    	; 0x171a <_ZN9EtherCard10packetLoopEj+0x572>
    159c:	e0 91 42 05 	lds	r30, 0x0542	; 0x800542 <_ZL20client_tcp_result_cb>
        {   //TCP connection established so read data
            if (client_tcp_result_cb) {
    15a0:	f0 91 43 05 	lds	r31, 0x0543	; 0x800543 <_ZL20client_tcp_result_cb+0x1>
    15a4:	30 97       	sbiw	r30, 0x00	; 0
    15a6:	09 f4       	brne	.+2      	; 0x15aa <_ZN9EtherCard10packetLoopEj+0x402>
    15a8:	b8 c0       	rjmp	.+368    	; 0x171a <_ZN9EtherCard10packetLoopEj+0x572>
    15aa:	40 91 2c 03 	lds	r20, 0x032C	; 0x80032c <_ZN8ENC28J606bufferE+0x2e>
                uint16_t tcpstart = TCP_DATA_START; // TCP_DATA_START is a formula
    15ae:	50 e0       	ldi	r21, 0x00	; 0
    15b0:	55 95       	asr	r21
    15b2:	47 95       	ror	r20
    15b4:	55 95       	asr	r21
    15b6:	47 95       	ror	r20
    15b8:	55 95       	asr	r21
    15ba:	47 95       	ror	r20
    15bc:	55 95       	asr	r21
    15be:	47 95       	ror	r20
    15c0:	44 0f       	add	r20, r20
    15c2:	55 1f       	adc	r21, r21
    15c4:	44 0f       	add	r20, r20
    15c6:	55 1f       	adc	r21, r21
    15c8:	ce 01       	movw	r24, r28
    15ca:	08 97       	sbiw	r24, 0x08	; 8
                if (tcpstart>plen-8)
    15cc:	4e 5d       	subi	r20, 0xDE	; 222
    15ce:	5f 4f       	sbci	r21, 0xFF	; 255
    15d0:	84 17       	cp	r24, r20
    15d2:	95 07       	cpc	r25, r21
    15d4:	08 f4       	brcc	.+2      	; 0x15d8 <_ZN9EtherCard10packetLoopEj+0x430>
    15d6:	ac 01       	movw	r20, r24
    15d8:	c7 01       	movw	r24, r14
                    tcpstart = plen-8; // dummy but save
                uint16_t save_len = len;
                if (tcpstart+len>plen)
    15da:	84 0f       	add	r24, r20
    15dc:	95 1f       	adc	r25, r21
    15de:	c8 17       	cp	r28, r24
    15e0:	d9 07       	cpc	r29, r25
    15e2:	20 f4       	brcc	.+8      	; 0x15ec <_ZN9EtherCard10packetLoopEj+0x444>
    15e4:	9e 01       	movw	r18, r28
                    save_len = plen-tcpstart;
    15e6:	24 1b       	sub	r18, r20
    15e8:	35 0b       	sbc	r19, r21
    15ea:	01 c0       	rjmp	.+2      	; 0x15ee <_ZN9EtherCard10packetLoopEj+0x446>
    15ec:	97 01       	movw	r18, r14
        {   //TCP connection established so read data
            if (client_tcp_result_cb) {
                uint16_t tcpstart = TCP_DATA_START; // TCP_DATA_START is a formula
                if (tcpstart>plen-8)
                    tcpstart = plen-8; // dummy but save
                uint16_t save_len = len;
    15ee:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <_ZN8ENC28J606bufferE+0x25>
                if (tcpstart+len>plen)
                    save_len = plen-tcpstart;
                (*client_tcp_result_cb)((gPB[TCP_DST_PORT_L_P]>>5)&0x7,0,tcpstart,save_len); //Call TCP handler (callback) function
    15f2:	60 e0       	ldi	r22, 0x00	; 0
    15f4:	82 95       	swap	r24
    15f6:	86 95       	lsr	r24
    15f8:	87 70       	andi	r24, 0x07	; 7
    15fa:	19 95       	eicall

                if(persist_tcp_connection)
    15fc:	80 91 00 05 	lds	r24, 0x0500	; 0x800500 <_ZN9EtherCard22persist_tcp_connectionE>
    1600:	88 23       	and	r24, r24
    1602:	31 f0       	breq	.+12     	; 0x1610 <_ZN9EtherCard10packetLoopEj+0x468>
                {   //Keep connection alive by sending ACK
                    make_tcp_ack_from_any(len,TCP_FLAGS_PUSH_V);
    1604:	68 e0       	ldi	r22, 0x08	; 8
    1606:	c7 01       	movw	r24, r14
    1608:	10 dc       	rcall	.-2016   	; 0xe2a <_ZL21make_tcp_ack_from_anyih>
    160a:	80 e0       	ldi	r24, 0x00	; 0
                else
                {   //Close connection
                    make_tcp_ack_from_any(len,TCP_FLAGS_PUSH_V|TCP_FLAGS_FIN_V);
                    tcp_client_state = TCP_STATE_CLOSED;
                }
                return 0;
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	8e c0       	rjmp	.+284    	; 0x172c <_ZN9EtherCard10packetLoopEj+0x584>
                {   //Keep connection alive by sending ACK
                    make_tcp_ack_from_any(len,TCP_FLAGS_PUSH_V);
                }
                else
                {   //Close connection
                    make_tcp_ack_from_any(len,TCP_FLAGS_PUSH_V|TCP_FLAGS_FIN_V);
    1610:	69 e0       	ldi	r22, 0x09	; 9
    1612:	c7 01       	movw	r24, r14
    1614:	0a dc       	rcall	.-2028   	; 0xe2a <_ZL21make_tcp_ack_from_anyih>
    1616:	86 e0       	ldi	r24, 0x06	; 6
                    tcp_client_state = TCP_STATE_CLOSED;
    1618:	80 93 46 05 	sts	0x0546, r24	; 0x800546 <_ZL16tcp_client_state>
    161c:	80 e0       	ldi	r24, 0x00	; 0
                }
                return 0;
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	85 c0       	rjmp	.+266    	; 0x172c <_ZN9EtherCard10packetLoopEj+0x584>
            }
        }
        if (tcp_client_state != TCP_STATE_CLOSING)
    1622:	85 30       	cpi	r24, 0x05	; 5
    1624:	09 f0       	breq	.+2      	; 0x1628 <_ZN9EtherCard10packetLoopEj+0x480>
    1626:	76 c0       	rjmp	.+236    	; 0x1714 <_ZN9EtherCard10packetLoopEj+0x56c>
                tcp_client_state = TCP_STATE_CLOSED; // connection terminated
            } else if (len>0) {
                make_tcp_ack_from_any(len,0);
            }
        }
        return 0;
    1628:	80 e0       	ldi	r24, 0x00	; 0
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	7f c0       	rjmp	.+254    	; 0x172c <_ZN9EtherCard10packetLoopEj+0x584>
        {   //
            if (gPB[TCP_FLAGS_P] & TCP_FLAGS_FIN_V) {
                if(tcp_client_state == TCP_STATE_ESTABLISHED) {
                    return 0; // In some instances FIN is received *before* DATA.  If that is the case, we just return here and keep looking for the data packet
                }
                make_tcp_ack_from_any(len+1,TCP_FLAGS_PUSH_V|TCP_FLAGS_FIN_V);
    162e:	69 e0       	ldi	r22, 0x09	; 9
    1630:	c7 01       	movw	r24, r14
    1632:	01 96       	adiw	r24, 0x01	; 1
    1634:	fa db       	rcall	.-2060   	; 0xe2a <_ZL21make_tcp_ack_from_anyih>
    1636:	86 e0       	ldi	r24, 0x06	; 6
                tcp_client_state = TCP_STATE_CLOSED; // connection terminated
    1638:	80 93 46 05 	sts	0x0546, r24	; 0x800546 <_ZL16tcp_client_state>
    163c:	80 e0       	ldi	r24, 0x00	; 0
            } else if (len>0) {
                make_tcp_ack_from_any(len,0);
            }
        }
        return 0;
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	75 c0       	rjmp	.+234    	; 0x172c <_ZN9EtherCard10packetLoopEj+0x584>
    1642:	e1 14       	cp	r14, r1
                if(tcp_client_state == TCP_STATE_ESTABLISHED) {
                    return 0; // In some instances FIN is received *before* DATA.  If that is the case, we just return here and keep looking for the data packet
                }
                make_tcp_ack_from_any(len+1,TCP_FLAGS_PUSH_V|TCP_FLAGS_FIN_V);
                tcp_client_state = TCP_STATE_CLOSED; // connection terminated
            } else if (len>0) {
    1644:	f1 04       	cpc	r15, r1
    1646:	a1 f1       	breq	.+104    	; 0x16b0 <_ZN9EtherCard10packetLoopEj+0x508>
    1648:	60 e0       	ldi	r22, 0x00	; 0
                make_tcp_ack_from_any(len,0);
    164a:	c7 01       	movw	r24, r14
    164c:	ee db       	rcall	.-2084   	; 0xe2a <_ZL21make_tcp_ack_from_anyih>
    164e:	80 e0       	ldi	r24, 0x00	; 0
    1650:	90 e0       	ldi	r25, 0x00	; 0
            }
        }
        return 0;
    1652:	6c c0       	rjmp	.+216    	; 0x172c <_ZN9EtherCard10packetLoopEj+0x584>
    1654:	be 01       	movw	r22, r28
    1656:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <_ZN9EtherCard7hisportE>
    }
#endif

#if ETHERCARD_TCPSERVER
    //If we are here then this is a TCP/IP packet targeted at us and not related to our client connection so accept
    return accept(hisport, plen);
    165a:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <_ZN9EtherCard7hisportE+0x1>
    165e:	26 dd       	rcall	.-1460   	; 0x10ac <_ZN9EtherCard6acceptEjj>
    1660:	65 c0       	rjmp	.+202    	; 0x172c <_ZN9EtherCard10packetLoopEj+0x584>
    1662:	80 e0       	ldi	r24, 0x00	; 0
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	62 c0       	rjmp	.+196    	; 0x172c <_ZN9EtherCard10packetLoopEj+0x584>
        if(is_lan(myip, hisip) && !has_dest_mac && !waiting_for_dest_mac) {
            client_arp_whohas(hisip);
            waiting_for_dest_mac = true;
        }

        return 0;
    1668:	80 e0       	ldi	r24, 0x00	; 0
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	5f c0       	rjmp	.+190    	; 0x172c <_ZN9EtherCard10packetLoopEj+0x584>
    166e:	80 e0       	ldi	r24, 0x00	; 0
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	5c c0       	rjmp	.+184    	; 0x172c <_ZN9EtherCard10packetLoopEj+0x584>
    1674:	80 e0       	ldi	r24, 0x00	; 0
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	59 c0       	rjmp	.+178    	; 0x172c <_ZN9EtherCard10packetLoopEj+0x584>
    }

    if (eth_type_is_ip_and_my_ip(plen)==0)
    {   //Not IP so ignoring
        //!@todo Add other protocols (and make each optional at compile time)
        return 0;
    167a:	80 e0       	ldi	r24, 0x00	; 0
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	56 c0       	rjmp	.+172    	; 0x172c <_ZN9EtherCard10packetLoopEj+0x584>
        }
        if (!has_dest_mac && waiting_for_dest_mac && client_store_mac(hisip, destmacaddr)) {
            has_dest_mac = true;
            waiting_for_dest_mac = false;
        }
        return 0;
    1680:	80 e0       	ldi	r24, 0x00	; 0
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	53 c0       	rjmp	.+166    	; 0x172c <_ZN9EtherCard10packetLoopEj+0x584>
    1686:	80 e0       	ldi	r24, 0x00	; 0
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	50 c0       	rjmp	.+160    	; 0x172c <_ZN9EtherCard10packetLoopEj+0x584>
    168c:	80 e0       	ldi	r24, 0x00	; 0
    168e:	90 e0       	ldi	r25, 0x00	; 0
    }

    if (eth_type_is_ip_and_my_ip(plen)==0)
    {   //Not IP so ignoring
        //!@todo Add other protocols (and make each optional at compile time)
        return 0;
    1690:	4d c0       	rjmp	.+154    	; 0x172c <_ZN9EtherCard10packetLoopEj+0x584>
    1692:	80 e0       	ldi	r24, 0x00	; 0
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	4a c0       	rjmp	.+148    	; 0x172c <_ZN9EtherCard10packetLoopEj+0x584>
    1698:	80 e0       	ldi	r24, 0x00	; 0
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	47 c0       	rjmp	.+142    	; 0x172c <_ZN9EtherCard10packetLoopEj+0x584>
    169e:	80 e0       	ldi	r24, 0x00	; 0
            return 0; //An UDP server handler (callback) has processed this packet
    }
#endif

    if (plen<54 || gPB[IP_PROTO_P]!=IP_PROTO_TCP_V )
        return 0; //from here on we are only interested in TCP-packets; these are longer than 54 bytes
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	44 c0       	rjmp	.+136    	; 0x172c <_ZN9EtherCard10packetLoopEj+0x584>
    16a4:	80 e0       	ldi	r24, 0x00	; 0
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	41 c0       	rjmp	.+130    	; 0x172c <_ZN9EtherCard10packetLoopEj+0x584>
    16aa:	80 e0       	ldi	r24, 0x00	; 0

#if ETHERCARD_TCPCLIENT
    if (gPB[TCP_DST_PORT_H_P]==TCPCLIENT_SRC_PORT_H)
    {   //Source port is in range reserved (by EtherCard) for client TCP/IP connections
        if (check_ip_message_is_from(hisip)==0)
            return 0; //Not current TCP/IP connection (only handle one at a time)
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	3e c0       	rjmp	.+124    	; 0x172c <_ZN9EtherCard10packetLoopEj+0x584>
    16b0:	80 e0       	ldi	r24, 0x00	; 0
                tcp_client_state = TCP_STATE_CLOSED; // connection terminated
            } else if (len>0) {
                make_tcp_ack_from_any(len,0);
            }
        }
        return 0;
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	3b c0       	rjmp	.+118    	; 0x172c <_ZN9EtherCard10packetLoopEj+0x584>
    16b6:	80 e0       	ldi	r24, 0x00	; 0
#endif
#if ETHERCARD_UDPSERVER
    if (ether.udpServerListening() && gPB[IP_PROTO_P]==IP_PROTO_UDP_V)
    {   //Call UDP server handler (callback) if one is defined for this packet
        if(ether.udpServerHasProcessedPacket(plen))
            return 0; //An UDP server handler (callback) has processed this packet
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	38 c0       	rjmp	.+112    	; 0x172c <_ZN9EtherCard10packetLoopEj+0x584>
    16bc:	80 e0       	ldi	r24, 0x00	; 0
        }
        if (tcp_client_state != TCP_STATE_CLOSING)
        {   //
            if (gPB[TCP_FLAGS_P] & TCP_FLAGS_FIN_V) {
                if(tcp_client_state == TCP_STATE_ESTABLISHED) {
                    return 0; // In some instances FIN is received *before* DATA.  If that is the case, we just return here and keep looking for the data packet
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	35 c0       	rjmp	.+106    	; 0x172c <_ZN9EtherCard10packetLoopEj+0x584>
    16c2:	86 e0       	ldi	r24, 0x06	; 6
        }
#endif

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, dnsip) && !has_dns_mac && !waiting_for_dns_mac) {
            client_arp_whohas(dnsip);
    16c4:	95 e0       	ldi	r25, 0x05	; 5
    16c6:	e4 db       	rcall	.-2104   	; 0xe90 <_ZL17client_arp_whohasPh>
    16c8:	81 e0       	ldi	r24, 0x01	; 1
            waiting_for_dns_mac = true;
    16ca:	80 93 37 05 	sts	0x0537, r24	; 0x800537 <_ZL19waiting_for_dns_mac>
    16ce:	17 ce       	rjmp	.-978    	; 0x12fe <_ZN9EtherCard10packetLoopEj+0x156>
    16d0:	82 e0       	ldi	r24, 0x02	; 2
        }

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, hisip) && !has_dest_mac && !waiting_for_dest_mac) {
            client_arp_whohas(hisip);
    16d2:	95 e0       	ldi	r25, 0x05	; 5
    16d4:	dd db       	rcall	.-2118   	; 0xe90 <_ZL17client_arp_whohasPh>
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	80 93 35 05 	sts	0x0535, r24	; 0x800535 <_ZL20waiting_for_dest_mac>
            waiting_for_dest_mac = true;
    16dc:	80 e0       	ldi	r24, 0x00	; 0
    16de:	90 e0       	ldi	r25, 0x00	; 0
        }

        return 0;
    16e0:	25 c0       	rjmp	.+74     	; 0x172c <_ZN9EtherCard10packetLoopEj+0x584>
    16e2:	ca 32       	cpi	r28, 0x2A	; 42
    16e4:	d1 05       	cpc	r29, r1
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
    16e6:	08 f0       	brcs	.+2      	; 0x16ea <_ZN9EtherCard10packetLoopEj+0x542>
    16e8:	92 ce       	rjmp	.-732    	; 0x140e <_ZN9EtherCard10packetLoopEj+0x266>
    16ea:	80 e0       	ldi	r24, 0x00	; 0
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    }

    if (eth_type_is_ip_and_my_ip(plen)==0)
    {   //Not IP so ignoring
        //!@todo Add other protocols (and make each optional at compile time)
        return 0;
    16ee:	1e c0       	rjmp	.+60     	; 0x172c <_ZN9EtherCard10packetLoopEj+0x584>
    16f0:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <_ZN8ENC28J606bufferE+0x15>
        return 0;
    }

    if (eth_type_is_arp_and_my_ip(plen))
    {   //Service ARP request
        if (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REQ_L_V)
    16f4:	81 30       	cpi	r24, 0x01	; 1
    16f6:	09 f0       	breq	.+2      	; 0x16fa <_ZN9EtherCard10packetLoopEj+0x552>
    16f8:	4b ce       	rjmp	.-874    	; 0x1390 <_ZN9EtherCard10packetLoopEj+0x1e8>
    16fa:	2b ce       	rjmp	.-938    	; 0x1352 <_ZN9EtherCard10packetLoopEj+0x1aa>
    16fc:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <_ZN8ENC28J606bufferE+0x17>
        //!@todo Add other protocols (and make each optional at compile time)
        return 0;
    }

#if ETHERCARD_ICMP
    if (gPB[IP_PROTO_P]==IP_PROTO_ICMP_V && gPB[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V)
    1700:	81 30       	cpi	r24, 0x01	; 1
    1702:	09 f0       	breq	.+2      	; 0x1706 <_ZN9EtherCard10packetLoopEj+0x55e>
    1704:	d2 ce       	rjmp	.-604    	; 0x14aa <_ZN9EtherCard10packetLoopEj+0x302>
    1706:	b2 ce       	rjmp	.-668    	; 0x146c <_ZN9EtherCard10packetLoopEj+0x2c4>
    1708:	ce 01       	movw	r24, r28
    170a:	38 d0       	rcall	.+112    	; 0x177c <_ZN9EtherCard27udpServerHasProcessedPacketEj>
    }
#endif
#if ETHERCARD_UDPSERVER
    if (ether.udpServerListening() && gPB[IP_PROTO_P]==IP_PROTO_UDP_V)
    {   //Call UDP server handler (callback) if one is defined for this packet
        if(ether.udpServerHasProcessedPacket(plen))
    170c:	88 23       	and	r24, r24
    170e:	09 f4       	brne	.+2      	; 0x1712 <_ZN9EtherCard10packetLoopEj+0x56a>
    1710:	d4 ce       	rjmp	.-600    	; 0x14ba <_ZN9EtherCard10packetLoopEj+0x312>
    1712:	d1 cf       	rjmp	.-94     	; 0x16b6 <_ZN9EtherCard10packetLoopEj+0x50e>
    1714:	10 ff       	sbrs	r17, 0
    1716:	95 cf       	rjmp	.-214    	; 0x1642 <_ZN9EtherCard10packetLoopEj+0x49a>
    1718:	8a cf       	rjmp	.-236    	; 0x162e <_ZN9EtherCard10packetLoopEj+0x486>
                return 0;
            }
        }
        if (tcp_client_state != TCP_STATE_CLOSING)
        {   //
            if (gPB[TCP_FLAGS_P] & TCP_FLAGS_FIN_V) {
    171a:	10 fd       	sbrc	r17, 0
    171c:	cf cf       	rjmp	.-98     	; 0x16bc <_ZN9EtherCard10packetLoopEj+0x514>
    171e:	91 cf       	rjmp	.-222    	; 0x1642 <_ZN9EtherCard10packetLoopEj+0x49a>
    1720:	ca 32       	cpi	r28, 0x2A	; 42
    1722:	d1 05       	cpc	r29, r1
    1724:	08 f0       	brcs	.+2      	; 0x1728 <_ZN9EtherCard10packetLoopEj+0x580>
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
    1726:	78 ce       	rjmp	.-784    	; 0x1418 <_ZN9EtherCard10packetLoopEj+0x270>
    1728:	80 e0       	ldi	r24, 0x00	; 0
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	df 91       	pop	r29
    }

    if (eth_type_is_ip_and_my_ip(plen)==0)
    {   //Not IP so ignoring
        //!@todo Add other protocols (and make each optional at compile time)
        return 0;
    172e:	cf 91       	pop	r28
    1730:	1f 91       	pop	r17

#if ETHERCARD_TCPSERVER
    //If we are here then this is a TCP/IP packet targeted at us and not related to our client connection so accept
    return accept(hisport, plen);
#endif
}
    1732:	0f 91       	pop	r16
    1734:	ff 90       	pop	r15
    1736:	ef 90       	pop	r14
    1738:	08 95       	ret

0000173a <_ZN9EtherCard21udpServerListenOnPortEPFvjPhjPKcjEj>:
    173a:	9c 01       	movw	r18, r24
    173c:	90 91 48 05 	lds	r25, 0x0548	; 0x800548 <numListeners>
    {
        if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((uint8_t) listeners[i].port)) {
            listeners[i].listening = true;
        }
    }
}
    1740:	98 30       	cpi	r25, 0x08	; 8
    1742:	a0 f4       	brcc	.+40     	; 0x176c <_ZN9EtherCard21udpServerListenOnPortEPFvjPhjPKcjEj+0x32>
    1744:	e9 2f       	mov	r30, r25
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	af 01       	movw	r20, r30
    174a:	44 0f       	add	r20, r20
    174c:	55 1f       	adc	r21, r21
    174e:	44 0f       	add	r20, r20
    1750:	55 1f       	adc	r21, r21
    1752:	e4 0f       	add	r30, r20
    1754:	f5 1f       	adc	r31, r21
    1756:	e7 5b       	subi	r30, 0xB7	; 183
    1758:	fa 4f       	sbci	r31, 0xFA	; 250
    175a:	31 83       	std	Z+1, r19	; 0x01
    175c:	20 83       	st	Z, r18
    175e:	73 83       	std	Z+3, r23	; 0x03
    1760:	62 83       	std	Z+2, r22	; 0x02
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	84 83       	std	Z+4, r24	; 0x04
    1766:	9f 5f       	subi	r25, 0xFF	; 255
    1768:	90 93 48 05 	sts	0x0548, r25	; 0x800548 <numListeners>
    176c:	08 95       	ret

0000176e <_ZN9EtherCard18udpServerListeningEv>:

bool EtherCard::udpServerListening() {
    return numListeners > 0;
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	90 91 48 05 	lds	r25, 0x0548	; 0x800548 <numListeners>
    1774:	91 11       	cpse	r25, r1
    1776:	01 c0       	rjmp	.+2      	; 0x177a <_ZN9EtherCard18udpServerListeningEv+0xc>
    1778:	80 e0       	ldi	r24, 0x00	; 0
}
    177a:	08 95       	ret

0000177c <_ZN9EtherCard27udpServerHasProcessedPacketEj>:

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    177c:	8f 92       	push	r8
    177e:	9f 92       	push	r9
    1780:	bf 92       	push	r11
    1782:	cf 92       	push	r12
    1784:	df 92       	push	r13
    1786:	ef 92       	push	r14
    1788:	ff 92       	push	r15
    178a:	0f 93       	push	r16
    178c:	1f 93       	push	r17
    178e:	cf 93       	push	r28
    1790:	df 93       	push	r29
    bool packetProcessed = false;
    for(int i = 0; i < numListeners; i++)
    1792:	80 91 48 05 	lds	r24, 0x0548	; 0x800548 <numListeners>
    1796:	88 23       	and	r24, r24
    1798:	09 f4       	brne	.+2      	; 0x179c <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x20>
    179a:	46 c0       	rjmp	.+140    	; 0x1828 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0xac>
    179c:	c9 e4       	ldi	r28, 0x49	; 73
    179e:	d5 e0       	ldi	r29, 0x05	; 5
    17a0:	e1 2c       	mov	r14, r1
    17a2:	f1 2c       	mov	r15, r1
    17a4:	80 e0       	ldi	r24, 0x00	; 0
    {
        if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((uint8_t) listeners[i].port) && listeners[i].listening)
    17a6:	0f 2e       	mov	r0, r31
    17a8:	fe ef       	ldi	r31, 0xFE	; 254
    17aa:	cf 2e       	mov	r12, r31
    17ac:	f2 e0       	ldi	r31, 0x02	; 2
    17ae:	df 2e       	mov	r13, r31
    17b0:	f0 2d       	mov	r31, r0
                listeners[i].port,
                gPB + IP_SRC_P,
                (gPB[UDP_SRC_PORT_H_P] << 8) | gPB[UDP_SRC_PORT_L_P],
                (const char *) (gPB + UDP_DATA_P),
                datalen);
            packetProcessed = true;
    17b2:	bb 24       	eor	r11, r11
    17b4:	b3 94       	inc	r11

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    bool packetProcessed = false;
    for(int i = 0; i < numListeners; i++)
    {
        if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((uint8_t) listeners[i].port) && listeners[i].listening)
    17b6:	aa 81       	ldd	r26, Y+2	; 0x02
    17b8:	bb 81       	ldd	r27, Y+3	; 0x03
    17ba:	f6 01       	movw	r30, r12
    17bc:	24 a1       	ldd	r18, Z+36	; 0x24
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	4b 2f       	mov	r20, r27
    17c2:	55 27       	eor	r21, r21
    17c4:	24 17       	cp	r18, r20
    17c6:	35 07       	cpc	r19, r21
    17c8:	21 f5       	brne	.+72     	; 0x1812 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x96>
    17ca:	25 a1       	ldd	r18, Z+37	; 0x25
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	ad 01       	movw	r20, r26
    17d0:	55 27       	eor	r21, r21
    17d2:	24 17       	cp	r18, r20
    17d4:	35 07       	cpc	r19, r21
    17d6:	e9 f4       	brne	.+58     	; 0x1812 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x96>
    17d8:	9c 81       	ldd	r25, Y+4	; 0x04
    17da:	99 23       	and	r25, r25
    17dc:	d1 f0       	breq	.+52     	; 0x1812 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x96>
            listeners[i].callback(
                listeners[i].port,
                gPB + IP_SRC_P,
                (gPB[UDP_SRC_PORT_H_P] << 8) | gPB[UDP_SRC_PORT_L_P],
                (const char *) (gPB + UDP_DATA_P),
                datalen);
    17de:	07 a1       	ldd	r16, Z+39	; 0x27
    17e0:	10 e0       	ldi	r17, 0x00	; 0
    17e2:	08 50       	subi	r16, 0x08	; 8
    17e4:	11 09       	sbc	r17, r1
    17e6:	86 a1       	ldd	r24, Z+38	; 0x26
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	98 2f       	mov	r25, r24
    17ec:	88 27       	eor	r24, r24
    17ee:	08 0f       	add	r16, r24
    17f0:	19 1f       	adc	r17, r25
    17f2:	42 a1       	ldd	r20, Z+34	; 0x22
    17f4:	50 e0       	ldi	r21, 0x00	; 0
    17f6:	54 2f       	mov	r21, r20
    17f8:	44 27       	eor	r20, r20
    17fa:	83 a1       	ldd	r24, Z+35	; 0x23
    17fc:	48 2b       	or	r20, r24
    17fe:	88 80       	ld	r8, Y
    1800:	99 80       	ldd	r9, Y+1	; 0x01
    1802:	28 e2       	ldi	r18, 0x28	; 40
    1804:	33 e0       	ldi	r19, 0x03	; 3
    1806:	68 e1       	ldi	r22, 0x18	; 24
    1808:	73 e0       	ldi	r23, 0x03	; 3
    180a:	cd 01       	movw	r24, r26
    180c:	f4 01       	movw	r30, r8
    180e:	19 95       	eicall
            packetProcessed = true;
    1810:	8b 2d       	mov	r24, r11
    return numListeners > 0;
}

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    bool packetProcessed = false;
    for(int i = 0; i < numListeners; i++)
    1812:	ff ef       	ldi	r31, 0xFF	; 255
    1814:	ef 1a       	sub	r14, r31
    1816:	ff 0a       	sbc	r15, r31
    1818:	25 96       	adiw	r28, 0x05	; 5
    181a:	20 91 48 05 	lds	r18, 0x0548	; 0x800548 <numListeners>
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	e2 16       	cp	r14, r18
    1822:	f3 06       	cpc	r15, r19
    1824:	44 f2       	brlt	.-112    	; 0x17b6 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x3a>
    1826:	01 c0       	rjmp	.+2      	; 0x182a <_ZN9EtherCard27udpServerHasProcessedPacketEj+0xae>
bool EtherCard::udpServerListening() {
    return numListeners > 0;
}

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    bool packetProcessed = false;
    1828:	80 e0       	ldi	r24, 0x00	; 0
                datalen);
            packetProcessed = true;
        }
    }
    return packetProcessed;
}
    182a:	df 91       	pop	r29
    182c:	cf 91       	pop	r28
    182e:	1f 91       	pop	r17
    1830:	0f 91       	pop	r16
    1832:	ff 90       	pop	r15
    1834:	ef 90       	pop	r14
    1836:	df 90       	pop	r13
    1838:	cf 90       	pop	r12
    183a:	bf 90       	pop	r11
    183c:	9f 90       	pop	r9
    183e:	8f 90       	pop	r8
    1840:	08 95       	ret

00001842 <_ZN9EtherCard6copyIpEPhPKh>:
#include "../Peripherals/HardwareSerial.h"
#include <stdlib.h>
#include <ctype.h>

void EtherCard::copyIp (uint8_t *dst, const uint8_t *src) {
    memcpy(dst, src, IP_LEN);
    1842:	fb 01       	movw	r30, r22
    1844:	20 81       	ld	r18, Z
    1846:	31 81       	ldd	r19, Z+1	; 0x01
    1848:	fc 01       	movw	r30, r24
    184a:	31 83       	std	Z+1, r19	; 0x01
    184c:	20 83       	st	Z, r18
    184e:	fb 01       	movw	r30, r22
    1850:	22 81       	ldd	r18, Z+2	; 0x02
    1852:	33 81       	ldd	r19, Z+3	; 0x03
    1854:	fc 01       	movw	r30, r24
    1856:	33 83       	std	Z+3, r19	; 0x03
    1858:	22 83       	std	Z+2, r18	; 0x02
    185a:	08 95       	ret

0000185c <_ZN9EtherCard7copyMacEPhPKh>:
}

void EtherCard::copyMac (uint8_t *dst, const uint8_t *src) {
    185c:	dc 01       	movw	r26, r24
    memcpy(dst, src, ETH_LEN);
    185e:	96 e0       	ldi	r25, 0x06	; 6
    1860:	fb 01       	movw	r30, r22
    1862:	01 90       	ld	r0, Z+
    1864:	0d 92       	st	X+, r0
    1866:	9a 95       	dec	r25
    1868:	e1 f7       	brne	.-8      	; 0x1862 <_ZN9EtherCard7copyMacEPhPKh+0x6>
    186a:	08 95       	ret

0000186c <_ZN9EtherComm13CheckChecksumEPKch>:
	}
}

bool EtherComm::CheckChecksum(const char *data, uint8_t len){
  //data++; //Ignore first byte, the start byte.
  uint8_t checksum = (uint8_t)(*(data++)); //Start by 'adding' the command to the checksum
    186c:	fc 01       	movw	r30, r24
    186e:	20 81       	ld	r18, Z
  checksum += (uint8_t)(*(data++));
    1870:	dc 01       	movw	r26, r24
    1872:	12 96       	adiw	r26, 0x02	; 2
    1874:	81 81       	ldd	r24, Z+1	; 0x01
    1876:	92 2f       	mov	r25, r18
    1878:	98 0f       	add	r25, r24
  while(len-- > 0){
    187a:	3f ef       	ldi	r19, 0xFF	; 255
    187c:	36 0f       	add	r19, r22
    187e:	66 23       	and	r22, r22
    1880:	61 f0       	breq	.+24     	; 0x189a <_ZN9EtherComm13CheckChecksumEPKch+0x2e>
    1882:	fd 01       	movw	r30, r26
    1884:	83 2f       	mov	r24, r19
    checksum += (uint8_t)(*(data++));
    1886:	21 91       	ld	r18, Z+
    1888:	92 0f       	add	r25, r18

bool EtherComm::CheckChecksum(const char *data, uint8_t len){
  //data++; //Ignore first byte, the start byte.
  uint8_t checksum = (uint8_t)(*(data++)); //Start by 'adding' the command to the checksum
  checksum += (uint8_t)(*(data++));
  while(len-- > 0){
    188a:	81 50       	subi	r24, 0x01	; 1
    188c:	e0 f7       	brcc	.-8      	; 0x1886 <_ZN9EtherComm13CheckChecksumEPKch+0x1a>
    188e:	23 2f       	mov	r18, r19
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	2f 5f       	subi	r18, 0xFF	; 255
    1894:	3f 4f       	sbci	r19, 0xFF	; 255
    1896:	a2 0f       	add	r26, r18
    1898:	b3 1f       	adc	r27, r19
    checksum += (uint8_t)(*(data++));
  }
//  Serial.println((uint8_t)(checksum & CHECKSUM_MASK));
  return (checksum & CHECKSUM_MASK) == (uint8_t)(*data);
    189a:	81 e0       	ldi	r24, 0x01	; 1
    189c:	2c 91       	ld	r18, X
    189e:	29 13       	cpse	r18, r25
    18a0:	80 e0       	ldi	r24, 0x00	; 0
}
    18a2:	08 95       	ret

000018a4 <_Z10udpReceivejPhjPKcj>:

//char EtherComm::buffer[BUFFER_SIZE];
uint8_t* EtherComm::buffer = ether.buffer + UDP_DATA_P;

//callback that prints received packets to the serial port
void udpReceive(uint16_t dest_port, uint8_t src_ip[IP_LEN], uint16_t src_port, const char *data, uint16_t packetLen){
    18a4:	0f 93       	push	r16
    18a6:	1f 93       	push	r17
    18a8:	cf 93       	push	r28
    18aa:	df 93       	push	r29
	}
	Serial.println();
	Serial.print("Checksum: ");
	Serial.println((uint8_t)(*index));
*/	
	if(packetLen >= 3){ //At minimum, start byte, command, and checksum.
    18ac:	a8 01       	movw	r20, r16
    18ae:	43 50       	subi	r20, 0x03	; 3
    18b0:	51 09       	sbc	r21, r1
    18b2:	4f 3f       	cpi	r20, 0xFF	; 255
    18b4:	51 05       	cpc	r21, r1
    18b6:	09 f0       	breq	.+2      	; 0x18ba <_Z10udpReceivejPhjPKcj+0x16>
    18b8:	90 f4       	brcc	.+36     	; 0x18de <_Z10udpReceivejPhjPKcj+0x3a>
		if(packetLen <= 258){
			uint8_t dataLen = (uint8_t)(packetLen - 3);
			if((uint8_t)data[0] == START_BYTE){
    18ba:	f9 01       	movw	r30, r18
    18bc:	80 81       	ld	r24, Z
    18be:	8f 3f       	cpi	r24, 0xFF	; 255
    18c0:	71 f4       	brne	.+28     	; 0x18de <_Z10udpReceivejPhjPKcj+0x3a>
    18c2:	e9 01       	movw	r28, r18
	Serial.print("Checksum: ");
	Serial.println((uint8_t)(*index));
*/	
	if(packetLen >= 3){ //At minimum, start byte, command, and checksum.
		if(packetLen <= 258){
			uint8_t dataLen = (uint8_t)(packetLen - 3);
    18c4:	03 50       	subi	r16, 0x03	; 3
			if((uint8_t)data[0] == START_BYTE){
			//		Serial.print("Computed Checksum: ");
				if(EtherComm::CheckChecksum(data, dataLen)){
    18c6:	60 2f       	mov	r22, r16
    18c8:	c9 01       	movw	r24, r18
    18ca:	d0 df       	rcall	.-96     	; 0x186c <_ZN9EtherComm13CheckChecksumEPKch>
    18cc:	88 23       	and	r24, r24
    18ce:	39 f0       	breq	.+14     	; 0x18de <_Z10udpReceivejPhjPKcj+0x3a>
					EtherComm::CommandReceived((uint8_t)data[1], (const uint8_t*)(data + 2), dataLen);
    18d0:	be 01       	movw	r22, r28
    18d2:	6e 5f       	subi	r22, 0xFE	; 254
    18d4:	7f 4f       	sbci	r23, 0xFF	; 255
    18d6:	40 2f       	mov	r20, r16
    18d8:	89 81       	ldd	r24, Y+1	; 0x01
    18da:	0e 94 fe 00 	call	0x1fc	; 0x1fc <_ZN9EtherComm15CommandReceivedEhPKhh>
				}
			}
		}
	}
}
    18de:	df 91       	pop	r29
    18e0:	cf 91       	pop	r28
    18e2:	1f 91       	pop	r17
    18e4:	0f 91       	pop	r16
    18e6:	08 95       	ret

000018e8 <_ZN9EtherComm5beginEjjRVhS1_h>:
  }
//  Serial.println((uint8_t)(checksum & CHECKSUM_MASK));
  return (checksum & CHECKSUM_MASK) == (uint8_t)(*data);
}

bool EtherComm::begin(uint16_t recvPort, uint16_t destPort, Register& csDDR, Register& csPort, uint8_t csPin){
    18e8:	0f 93       	push	r16
    18ea:	cf 93       	push	r28
    18ec:	df 93       	push	r29
    18ee:	ec 01       	movw	r28, r24
    18f0:	ca 01       	movw	r24, r20
    18f2:	a9 01       	movw	r20, r18
    18f4:	20 2f       	mov	r18, r16
  EtherComm::_recvPort = recvPort;
    18f6:	d0 93 74 05 	sts	0x0574, r29	; 0x800574 <_ZN9EtherComm9_recvPortE+0x1>
    18fa:	c0 93 73 05 	sts	0x0573, r28	; 0x800573 <_ZN9EtherComm9_recvPortE>
  EtherComm::_destPort = destPort;
    18fe:	70 93 72 05 	sts	0x0572, r23	; 0x800572 <_ZN9EtherComm9_destPortE+0x1>
    1902:	60 93 71 05 	sts	0x0571, r22	; 0x800571 <_ZN9EtherComm9_destPortE>
  
  if (ether.begin(EtherComm::_mymac, csDDR, csPort, csPin) == 0) return false;
    1906:	bc 01       	movw	r22, r24
    1908:	8a e2       	ldi	r24, 0x2A	; 42
    190a:	92 e0       	ldi	r25, 0x02	; 2
    190c:	16 d9       	rcall	.-3540   	; 0xb3a <_ZN9EtherCard5beginEPKhRVhS3_h>
    190e:	88 23       	and	r24, r24
    1910:	79 f0       	breq	.+30     	; 0x1930 <_ZN9EtherComm5beginEjjRVhS1_h+0x48>
  ether.staticSetup(EtherComm::_myip, EtherComm::_gwip);
    1912:	20 e0       	ldi	r18, 0x00	; 0
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	40 e0       	ldi	r20, 0x00	; 0
    1918:	50 e0       	ldi	r21, 0x00	; 0
    191a:	60 e3       	ldi	r22, 0x30	; 48
    191c:	72 e0       	ldi	r23, 0x02	; 2
    191e:	84 e3       	ldi	r24, 0x34	; 52
    1920:	92 e0       	ldi	r25, 0x02	; 2
    1922:	2d d9       	rcall	.-3494   	; 0xb7e <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_>
  ether.printIp("GW:  ", ether.gwip);
  ether.printIp("DNS: ", ether.dnsip);
  */
  
  //Register the udpSerialPrint() method to listen to port the receive port.
  ether.udpServerListenOnPort(&udpReceive, recvPort);
    1924:	be 01       	movw	r22, r28
    1926:	82 e5       	ldi	r24, 0x52	; 82
    1928:	9c e0       	ldi	r25, 0x0C	; 12
    192a:	07 df       	rcall	.-498    	; 0x173a <_ZN9EtherCard21udpServerListenOnPortEPFvjPhjPKcjEj>
  
  return true;
    192c:	81 e0       	ldi	r24, 0x01	; 1
    192e:	01 c0       	rjmp	.+2      	; 0x1932 <_ZN9EtherComm5beginEjjRVhS1_h+0x4a>

bool EtherComm::begin(uint16_t recvPort, uint16_t destPort, Register& csDDR, Register& csPort, uint8_t csPin){
  EtherComm::_recvPort = recvPort;
  EtherComm::_destPort = destPort;
  
  if (ether.begin(EtherComm::_mymac, csDDR, csPort, csPin) == 0) return false;
    1930:	80 e0       	ldi	r24, 0x00	; 0
  
  //Register the udpSerialPrint() method to listen to port the receive port.
  ether.udpServerListenOnPort(&udpReceive, recvPort);
  
  return true;
}
    1932:	df 91       	pop	r29
    1934:	cf 91       	pop	r28
    1936:	0f 91       	pop	r16
    1938:	08 95       	ret

0000193a <_ZN9EtherComm11SendCommandEhh>:

void EtherComm::SendCommand(uint8_t cmd, uint8_t len){
    193a:	0f 93       	push	r16
    193c:	1f 93       	push	r17
    193e:	cf 93       	push	r28
    1940:	df 93       	push	r29
  EtherComm::buffer[0] = START_BYTE;
    1942:	e0 91 24 02 	lds	r30, 0x0224	; 0x800224 <_ZN9EtherComm6bufferE>
    1946:	f0 91 25 02 	lds	r31, 0x0225	; 0x800225 <_ZN9EtherComm6bufferE+0x1>
    194a:	9f ef       	ldi	r25, 0xFF	; 255
    194c:	90 83       	st	Z, r25
  EtherComm::buffer[1] = cmd;
    194e:	e0 91 24 02 	lds	r30, 0x0224	; 0x800224 <_ZN9EtherComm6bufferE>
    1952:	f0 91 25 02 	lds	r31, 0x0225	; 0x800225 <_ZN9EtherComm6bufferE+0x1>
    1956:	81 83       	std	Z+1, r24	; 0x01
  //EtherComm::buffer[2] = len;
  
  uint8_t checksum = START_BYTE + cmd;
    1958:	81 50       	subi	r24, 0x01	; 1
  uint8_t* index = &EtherComm::buffer[2]; //TODO why is char* being used? convert ot uint8_t*!!
    195a:	c0 91 24 02 	lds	r28, 0x0224	; 0x800224 <_ZN9EtherComm6bufferE>
    195e:	d0 91 25 02 	lds	r29, 0x0225	; 0x800225 <_ZN9EtherComm6bufferE+0x1>
    1962:	de 01       	movw	r26, r28
    1964:	12 96       	adiw	r26, 0x02	; 2
  uint8_t bytes = len;
  while(bytes-- > 0){
    1966:	4f ef       	ldi	r20, 0xFF	; 255
    1968:	46 0f       	add	r20, r22
    196a:	66 23       	and	r22, r22
    196c:	81 f0       	breq	.+32     	; 0x198e <_ZN9EtherComm11SendCommandEhh+0x54>
    196e:	fd 01       	movw	r30, r26
    1970:	50 e0       	ldi	r21, 0x00	; 0
    1972:	9a 01       	movw	r18, r20
    1974:	2d 5f       	subi	r18, 0xFD	; 253
    1976:	3f 4f       	sbci	r19, 0xFF	; 255
    1978:	2c 0f       	add	r18, r28
    197a:	3d 1f       	adc	r19, r29
    checksum += (uint8_t)(*(index++));  
    197c:	91 91       	ld	r25, Z+
    197e:	89 0f       	add	r24, r25
  //EtherComm::buffer[2] = len;
  
  uint8_t checksum = START_BYTE + cmd;
  uint8_t* index = &EtherComm::buffer[2]; //TODO why is char* being used? convert ot uint8_t*!!
  uint8_t bytes = len;
  while(bytes-- > 0){
    1980:	e2 17       	cp	r30, r18
    1982:	f3 07       	cpc	r31, r19
    1984:	d9 f7       	brne	.-10     	; 0x197c <_ZN9EtherComm11SendCommandEhh+0x42>
    1986:	4f 5f       	subi	r20, 0xFF	; 255
    1988:	5f 4f       	sbci	r21, 0xFF	; 255
    198a:	a4 0f       	add	r26, r20
    198c:	b5 1f       	adc	r27, r21
    checksum += (uint8_t)(*(index++));  
  }
  (*index) = (uint8_t)(checksum & CHECKSUM_MASK);
    198e:	8c 93       	st	X, r24

  //Serial.print("Send: ");
  //Serial.println(len);
  ether.sendUdp(EtherComm::buffer, (uint16_t)len + (uint16_t)3, _recvPort, _destIP, _destPort);
    1990:	00 91 71 05 	lds	r16, 0x0571	; 0x800571 <_ZN9EtherComm9_destPortE>
    1994:	10 91 72 05 	lds	r17, 0x0572	; 0x800572 <_ZN9EtherComm9_destPortE+0x1>
    1998:	40 91 73 05 	lds	r20, 0x0573	; 0x800573 <_ZN9EtherComm9_recvPortE>
    199c:	50 91 74 05 	lds	r21, 0x0574	; 0x800574 <_ZN9EtherComm9_recvPortE+0x1>
    19a0:	70 e0       	ldi	r23, 0x00	; 0
    19a2:	6d 5f       	subi	r22, 0xFD	; 253
    19a4:	7f 4f       	sbci	r23, 0xFF	; 255
    19a6:	26 e2       	ldi	r18, 0x26	; 38
    19a8:	32 e0       	ldi	r19, 0x02	; 2
    19aa:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <_ZN9EtherComm6bufferE>
    19ae:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <_ZN9EtherComm6bufferE+0x1>
    19b2:	43 db       	rcall	.-2426   	; 0x103a <_ZN9EtherCard7sendUdpEPKhjjS1_j>
}
    19b4:	df 91       	pop	r29
    19b6:	cf 91       	pop	r28
    19b8:	1f 91       	pop	r17
    19ba:	0f 91       	pop	r16
    19bc:	08 95       	ret

000019be <main>:
	public:
	inline HardwareSerial(
	volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
	volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
	volatile uint8_t *ucsrc, volatile uint8_t *udr);
	void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    19be:	26 e0       	ldi	r18, 0x06	; 6
    19c0:	40 e8       	ldi	r20, 0x80	; 128
    19c2:	55 e2       	ldi	r21, 0x25	; 37
    19c4:	60 e0       	ldi	r22, 0x00	; 0
    19c6:	70 e0       	ldi	r23, 0x00	; 0
    19c8:	85 e7       	ldi	r24, 0x75	; 117
    19ca:	95 e0       	ldi	r25, 0x05	; 5
    19cc:	0f d1       	rcall	.+542    	; 0x1bec <_ZN14HardwareSerial5beginEmh>
#include "Robot.h"


int main(void){
	Serial.begin(9600);
	Serial.println("\nInitializing...");
    19ce:	6e e3       	ldi	r22, 0x3E	; 62
    19d0:	72 e0       	ldi	r23, 0x02	; 2
    19d2:	85 e7       	ldi	r24, 0x75	; 117
    19d4:	95 e0       	ldi	r25, 0x05	; 5
	
	if(!rov.begin()){
    19d6:	45 d4       	rcall	.+2186   	; 0x2262 <_ZN5Print7printlnEPKc>
    19d8:	db d3       	rcall	.+1974   	; 0x2190 <_ZN5Robot5beginEv>
    19da:	81 11       	cpse	r24, r1
    19dc:	06 c0       	rjmp	.+12     	; 0x19ea <main+0x2c>
		Serial.println("Failed to initialize robot.");
    19de:	6f e4       	ldi	r22, 0x4F	; 79
    19e0:	72 e0       	ldi	r23, 0x02	; 2
    19e2:	85 e7       	ldi	r24, 0x75	; 117
    19e4:	95 e0       	ldi	r25, 0x05	; 5
    19e6:	3d d4       	rcall	.+2170   	; 0x2262 <_ZN5Print7printlnEPKc>
    19e8:	ff cf       	rjmp	.-2      	; 0x19e8 <main+0x2a>
		while(1);
	}
	Serial.println("Robot initialized.");
    19ea:	6b e6       	ldi	r22, 0x6B	; 107
    19ec:	72 e0       	ldi	r23, 0x02	; 2
    19ee:	85 e7       	ldi	r24, 0x75	; 117
    19f0:	95 e0       	ldi	r25, 0x05	; 5
    19f2:	37 d4       	rcall	.+2158   	; 0x2262 <_ZN5Print7printlnEPKc>
	
	if(!EtherComm::begin((uint16_t)6001, (uint16_t)6002, EthernetDDR, EthernetPort, EthernetPin_CS)){
    19f4:	00 e2       	ldi	r16, 0x20	; 32
    19f6:	22 e0       	ldi	r18, 0x02	; 2
    19f8:	31 e0       	ldi	r19, 0x01	; 1
    19fa:	41 e0       	ldi	r20, 0x01	; 1
    19fc:	51 e0       	ldi	r21, 0x01	; 1
    19fe:	62 e7       	ldi	r22, 0x72	; 114
    1a00:	77 e1       	ldi	r23, 0x17	; 23
    1a02:	81 e7       	ldi	r24, 0x71	; 113
    1a04:	97 e1       	ldi	r25, 0x17	; 23
    1a06:	70 df       	rcall	.-288    	; 0x18e8 <_ZN9EtherComm5beginEjjRVhS1_h>
    1a08:	81 11       	cpse	r24, r1
		Serial.println("Failed to access Ethernet controller.");
    1a0a:	06 c0       	rjmp	.+12     	; 0x1a18 <main+0x5a>
    1a0c:	6e e7       	ldi	r22, 0x7E	; 126
    1a0e:	72 e0       	ldi	r23, 0x02	; 2
    1a10:	85 e7       	ldi	r24, 0x75	; 117
    1a12:	95 e0       	ldi	r25, 0x05	; 5
		while(1);
	}
	Serial.println("Connected to controller.");
    1a14:	26 d4       	rcall	.+2124   	; 0x2262 <_ZN5Print7printlnEPKc>
    1a16:	ff cf       	rjmp	.-2      	; 0x1a16 <main+0x58>
    1a18:	64 ea       	ldi	r22, 0xA4	; 164
    1a1a:	72 e0       	ldi	r23, 0x02	; 2
    1a1c:	85 e7       	ldi	r24, 0x75	; 117
  static bool begin(uint16_t recvPort, uint16_t destPort, Register& csDDR, Register& csPort, uint8_t csPin);

  friend void udpReceive(uint16_t dest_port, uint8_t src_ip[IP_LEN], uint16_t src_port, const char *data, uint16_t len);

  static void Loop(){
    ether.packetLoop(ether.packetReceive());
    1a1e:	95 e0       	ldi	r25, 0x05	; 5
    1a20:	20 d4       	rcall	.+2112   	; 0x2262 <_ZN5Print7printlnEPKc>
    1a22:	07 d8       	rcall	.-4082   	; 0xa32 <_ZN8ENC28J6013packetReceiveEv>
    1a24:	c1 db       	rcall	.-2174   	; 0x11a8 <_ZN9EtherCard10packetLoopEj>
    1a26:	fd cf       	rjmp	.-6      	; 0x1a22 <main+0x64>

00001a28 <_ZN14HardwareSerial9availableEv>:
	#endif
	#if defined(HAVE_HWSERIAL2)
	if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
	#endif
	#if defined(HAVE_HWSERIAL3)
	if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    1a28:	fc 01       	movw	r30, r24
    1a2a:	97 85       	ldd	r25, Z+15	; 0x0f
    1a2c:	20 89       	ldd	r18, Z+16	; 0x10
    1a2e:	89 2f       	mov	r24, r25
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	80 5c       	subi	r24, 0xC0	; 192
    1a34:	9f 4f       	sbci	r25, 0xFF	; 255
    1a36:	82 1b       	sub	r24, r18
    1a38:	91 09       	sbc	r25, r1
    1a3a:	8f 73       	andi	r24, 0x3F	; 63
    1a3c:	99 27       	eor	r25, r25
    1a3e:	08 95       	ret

00001a40 <_ZN14HardwareSerial4peekEv>:
    1a40:	fc 01       	movw	r30, r24
    1a42:	97 85       	ldd	r25, Z+15	; 0x0f
    1a44:	80 89       	ldd	r24, Z+16	; 0x10
    1a46:	98 17       	cp	r25, r24
    1a48:	31 f0       	breq	.+12     	; 0x1a56 <_ZN14HardwareSerial4peekEv+0x16>
    1a4a:	80 89       	ldd	r24, Z+16	; 0x10
    1a4c:	e8 0f       	add	r30, r24
    1a4e:	f1 1d       	adc	r31, r1
    1a50:	83 89       	ldd	r24, Z+19	; 0x13
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	08 95       	ret
    1a56:	8f ef       	ldi	r24, 0xFF	; 255
    1a58:	9f ef       	ldi	r25, 0xFF	; 255
    1a5a:	08 95       	ret

00001a5c <_ZN14HardwareSerial4readEv>:
    1a5c:	fc 01       	movw	r30, r24
    1a5e:	97 85       	ldd	r25, Z+15	; 0x0f
    1a60:	80 89       	ldd	r24, Z+16	; 0x10
    1a62:	98 17       	cp	r25, r24
    1a64:	61 f0       	breq	.+24     	; 0x1a7e <_ZN14HardwareSerial4readEv+0x22>
    1a66:	80 89       	ldd	r24, Z+16	; 0x10
    1a68:	df 01       	movw	r26, r30
    1a6a:	a8 0f       	add	r26, r24
    1a6c:	b1 1d       	adc	r27, r1
    1a6e:	53 96       	adiw	r26, 0x13	; 19
    1a70:	8c 91       	ld	r24, X
    1a72:	90 89       	ldd	r25, Z+16	; 0x10
    1a74:	9f 5f       	subi	r25, 0xFF	; 255
    1a76:	9f 73       	andi	r25, 0x3F	; 63
    1a78:	90 8b       	std	Z+16, r25	; 0x10
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	08 95       	ret
    1a7e:	8f ef       	ldi	r24, 0xFF	; 255
    1a80:	9f ef       	ldi	r25, 0xFF	; 255
    1a82:	08 95       	ret

00001a84 <_ZN14HardwareSerial17availableForWriteEv>:
    1a84:	fc 01       	movw	r30, r24
    1a86:	21 89       	ldd	r18, Z+17	; 0x11
    1a88:	32 89       	ldd	r19, Z+18	; 0x12
    1a8a:	23 17       	cp	r18, r19
    1a8c:	38 f0       	brcs	.+14     	; 0x1a9c <_ZN14HardwareSerial17availableForWriteEv+0x18>
    1a8e:	8f e3       	ldi	r24, 0x3F	; 63
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	82 1b       	sub	r24, r18
    1a94:	91 09       	sbc	r25, r1
    1a96:	83 0f       	add	r24, r19
    1a98:	91 1d       	adc	r25, r1
    1a9a:	08 95       	ret
    1a9c:	83 2f       	mov	r24, r19
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	82 1b       	sub	r24, r18
    1aa2:	91 09       	sbc	r25, r1
    1aa4:	01 97       	sbiw	r24, 0x01	; 1
    1aa6:	08 95       	ret

00001aa8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1aa8:	fc 01       	movw	r30, r24
	// If interrupts are enabled, there must be more data in the output
	// buffer. Send the next byte
	unsigned char c = _tx_buffer[_tx_buffer_tail];
    1aaa:	82 89       	ldd	r24, Z+18	; 0x12
    1aac:	df 01       	movw	r26, r30
    1aae:	a8 0f       	add	r26, r24
    1ab0:	b1 1d       	adc	r27, r1
    1ab2:	ad 5a       	subi	r26, 0xAD	; 173
    1ab4:	bf 4f       	sbci	r27, 0xFF	; 255
    1ab6:	8c 91       	ld	r24, X
	_tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1ab8:	22 89       	ldd	r18, Z+18	; 0x12
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	2f 5f       	subi	r18, 0xFF	; 255
    1abe:	3f 4f       	sbci	r19, 0xFF	; 255
    1ac0:	2f 73       	andi	r18, 0x3F	; 63
    1ac2:	30 78       	andi	r19, 0x80	; 128
    1ac4:	33 23       	and	r19, r19
    1ac6:	34 f4       	brge	.+12     	; 0x1ad4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x2c>
    1ac8:	21 50       	subi	r18, 0x01	; 1
    1aca:	31 09       	sbc	r19, r1
    1acc:	20 6c       	ori	r18, 0xC0	; 192
    1ace:	3f 6f       	ori	r19, 0xFF	; 255
    1ad0:	2f 5f       	subi	r18, 0xFF	; 255
    1ad2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ad4:	22 8b       	std	Z+18, r18	; 0x12

	*_udr = c;
    1ad6:	a4 85       	ldd	r26, Z+12	; 0x0c
    1ad8:	b5 85       	ldd	r27, Z+13	; 0x0d
    1ada:	8c 93       	st	X, r24
	// location". This makes sure flush() won't return until the bytes
	// actually got written. Other r/w bits are preserved, and zeroes
	// written to the rest.

	#ifdef MPCM0
	*_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1adc:	a6 81       	ldd	r26, Z+6	; 0x06
    1ade:	b7 81       	ldd	r27, Z+7	; 0x07
    1ae0:	8c 91       	ld	r24, X
    1ae2:	83 70       	andi	r24, 0x03	; 3
    1ae4:	80 64       	ori	r24, 0x40	; 64
    1ae6:	8c 93       	st	X, r24
	#else
	*_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
	#endif

	if (_tx_buffer_head == _tx_buffer_tail) {
    1ae8:	91 89       	ldd	r25, Z+17	; 0x11
    1aea:	82 89       	ldd	r24, Z+18	; 0x12
    1aec:	98 13       	cpse	r25, r24
    1aee:	06 c0       	rjmp	.+12     	; 0x1afc <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x54>
		// Buffer empty, so disable interrupts
		cbi(*_ucsrb, UDRIE0);
    1af0:	00 84       	ldd	r0, Z+8	; 0x08
    1af2:	f1 85       	ldd	r31, Z+9	; 0x09
    1af4:	e0 2d       	mov	r30, r0
    1af6:	80 81       	ld	r24, Z
    1af8:	8f 7d       	andi	r24, 0xDF	; 223
    1afa:	80 83       	st	Z, r24
    1afc:	08 95       	ret

00001afe <_ZN14HardwareSerial5flushEv>:
	if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
	return tail - head - 1;
}

void HardwareSerial::flush()
{
    1afe:	cf 93       	push	r28
    1b00:	df 93       	push	r29
    1b02:	ec 01       	movw	r28, r24
	// If we have never written a byte, no need to flush. This special
	// case is needed since there is no way to force the TXC (transmit
	// complete) bit to 1 during initialization
	if (!_written)
    1b04:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b06:	88 23       	and	r24, r24
    1b08:	d1 f0       	breq	.+52     	; 0x1b3e <_ZN14HardwareSerial5flushEv+0x40>
	return;

	while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1b0a:	e8 85       	ldd	r30, Y+8	; 0x08
    1b0c:	f9 85       	ldd	r31, Y+9	; 0x09
    1b0e:	80 81       	ld	r24, Z
    1b10:	85 fd       	sbrc	r24, 5
    1b12:	05 c0       	rjmp	.+10     	; 0x1b1e <_ZN14HardwareSerial5flushEv+0x20>
    1b14:	ae 81       	ldd	r26, Y+6	; 0x06
    1b16:	bf 81       	ldd	r27, Y+7	; 0x07
    1b18:	8c 91       	ld	r24, X
    1b1a:	86 fd       	sbrc	r24, 6
    1b1c:	10 c0       	rjmp	.+32     	; 0x1b3e <_ZN14HardwareSerial5flushEv+0x40>
		if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1b1e:	0f b6       	in	r0, 0x3f	; 63
    1b20:	07 fc       	sbrc	r0, 7
    1b22:	f5 cf       	rjmp	.-22     	; 0x1b0e <_ZN14HardwareSerial5flushEv+0x10>
    1b24:	80 81       	ld	r24, Z
    1b26:	85 ff       	sbrs	r24, 5
    1b28:	f2 cf       	rjmp	.-28     	; 0x1b0e <_ZN14HardwareSerial5flushEv+0x10>
    1b2a:	03 c0       	rjmp	.+6      	; 0x1b32 <_ZN14HardwareSerial5flushEv+0x34>
		// Interrupts are globally disabled, but the DR empty
		// interrupt should be enabled, so poll the DR empty flag to
		// prevent deadlock
		if (bit_is_set(*_ucsra, UDRE0))
		_tx_udr_empty_irq();
    1b2c:	ce 01       	movw	r24, r28
    1b2e:	bc df       	rcall	.-136    	; 0x1aa8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1b30:	ec cf       	rjmp	.-40     	; 0x1b0a <_ZN14HardwareSerial5flushEv+0xc>
	while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
		if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
		// Interrupts are globally disabled, but the DR empty
		// interrupt should be enabled, so poll the DR empty flag to
		// prevent deadlock
		if (bit_is_set(*_ucsra, UDRE0))
    1b32:	ae 81       	ldd	r26, Y+6	; 0x06
    1b34:	bf 81       	ldd	r27, Y+7	; 0x07
    1b36:	8c 91       	ld	r24, X
    1b38:	85 ff       	sbrs	r24, 5
    1b3a:	e9 cf       	rjmp	.-46     	; 0x1b0e <_ZN14HardwareSerial5flushEv+0x10>
    1b3c:	f7 cf       	rjmp	.-18     	; 0x1b2c <_ZN14HardwareSerial5flushEv+0x2e>
		_tx_udr_empty_irq();
	}
	// If we get here, nothing is queued anymore (DRIE is disabled) and
	// the hardware finished tranmission (TXC is set).
}
    1b3e:	df 91       	pop	r29
    1b40:	cf 91       	pop	r28
    1b42:	08 95       	ret

00001b44 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    1b44:	0f 93       	push	r16
    1b46:	1f 93       	push	r17
    1b48:	cf 93       	push	r28
    1b4a:	df 93       	push	r29
    1b4c:	ec 01       	movw	r28, r24
	_written = true;
    1b4e:	81 e0       	ldi	r24, 0x01	; 1
    1b50:	8e 87       	std	Y+14, r24	; 0x0e
	// If the buffer and the data register is empty, just write the byte
	// to the data register and be done. This shortcut helps
	// significantly improve the effective datarate at high (>
	// 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
	if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1b52:	99 89       	ldd	r25, Y+17	; 0x11
    1b54:	8a 89       	ldd	r24, Y+18	; 0x12
    1b56:	98 13       	cpse	r25, r24
    1b58:	25 c0       	rjmp	.+74     	; 0x1ba4 <_ZN14HardwareSerial5writeEh+0x60>
    1b5a:	ee 81       	ldd	r30, Y+6	; 0x06
    1b5c:	ff 81       	ldd	r31, Y+7	; 0x07
    1b5e:	80 81       	ld	r24, Z
    1b60:	85 fd       	sbrc	r24, 5
    1b62:	31 c0       	rjmp	.+98     	; 0x1bc6 <_ZN14HardwareSerial5writeEh+0x82>
    1b64:	1f c0       	rjmp	.+62     	; 0x1ba4 <_ZN14HardwareSerial5writeEh+0x60>
	}
	tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
	// If the output buffer is full, there's nothing for it other than to
	// wait for the interrupt handler to empty it a bit
	while (i == _tx_buffer_tail) {
    1b66:	8a 89       	ldd	r24, Y+18	; 0x12
    1b68:	18 13       	cpse	r17, r24
    1b6a:	0b c0       	rjmp	.+22     	; 0x1b82 <_ZN14HardwareSerial5writeEh+0x3e>
		if (bit_is_clear(SREG, SREG_I)) {
    1b6c:	0f b6       	in	r0, 0x3f	; 63
    1b6e:	07 fc       	sbrc	r0, 7
    1b70:	fa cf       	rjmp	.-12     	; 0x1b66 <_ZN14HardwareSerial5writeEh+0x22>
			// Interrupts are disabled, so we'll have to poll the data
			// register empty flag ourselves. If it is set, pretend an
			// interrupt has happened and call the handler to free up
			// space for us.
			if(bit_is_set(*_ucsra, UDRE0))
    1b72:	ee 81       	ldd	r30, Y+6	; 0x06
    1b74:	ff 81       	ldd	r31, Y+7	; 0x07
    1b76:	80 81       	ld	r24, Z
    1b78:	85 ff       	sbrs	r24, 5
    1b7a:	f5 cf       	rjmp	.-22     	; 0x1b66 <_ZN14HardwareSerial5writeEh+0x22>
			_tx_udr_empty_irq();
    1b7c:	ce 01       	movw	r24, r28
    1b7e:	94 df       	rcall	.-216    	; 0x1aa8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1b80:	f2 cf       	rjmp	.-28     	; 0x1b66 <_ZN14HardwareSerial5writeEh+0x22>
			} else {
			// nop, the interrupt handler will free up space for us
		}
	}

	_tx_buffer[_tx_buffer_head] = c;
    1b82:	89 89       	ldd	r24, Y+17	; 0x11
    1b84:	fe 01       	movw	r30, r28
    1b86:	e8 0f       	add	r30, r24
    1b88:	f1 1d       	adc	r31, r1
    1b8a:	ed 5a       	subi	r30, 0xAD	; 173
    1b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8e:	00 83       	st	Z, r16

	// make atomic to prevent execution of ISR between setting the
	// head pointer and setting the interrupt flag resulting in buffer
	// retransmission
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1b90:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1b92:	f8 94       	cli
		_tx_buffer_head = i;
    1b94:	19 8b       	std	Y+17, r17	; 0x11
		sbi(*_ucsrb, UDRIE0);
    1b96:	e8 85       	ldd	r30, Y+8	; 0x08
    1b98:	f9 85       	ldd	r31, Y+9	; 0x09
    1b9a:	80 81       	ld	r24, Z
    1b9c:	80 62       	ori	r24, 0x20	; 32
    1b9e:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1ba0:	9f bf       	out	0x3f, r25	; 63
	}
	
	return 1;
    1ba2:	1d c0       	rjmp	.+58     	; 0x1bde <_ZN14HardwareSerial5writeEh+0x9a>
			*_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
			#endif
		}
		return 1;
	}
	tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1ba4:	29 89       	ldd	r18, Y+17	; 0x11
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	2f 5f       	subi	r18, 0xFF	; 255
    1baa:	3f 4f       	sbci	r19, 0xFF	; 255
    1bac:	2f 73       	andi	r18, 0x3F	; 63
    1bae:	30 78       	andi	r19, 0x80	; 128
    1bb0:	33 23       	and	r19, r19
    1bb2:	34 f4       	brge	.+12     	; 0x1bc0 <_ZN14HardwareSerial5writeEh+0x7c>
    1bb4:	21 50       	subi	r18, 0x01	; 1
    1bb6:	31 09       	sbc	r19, r1
    1bb8:	20 6c       	ori	r18, 0xC0	; 192
    1bba:	3f 6f       	ori	r19, 0xFF	; 255
    1bbc:	2f 5f       	subi	r18, 0xFF	; 255
    1bbe:	3f 4f       	sbci	r19, 0xFF	; 255
    1bc0:	06 2f       	mov	r16, r22
    1bc2:	12 2f       	mov	r17, r18
    1bc4:	d0 cf       	rjmp	.-96     	; 0x1b66 <_ZN14HardwareSerial5writeEh+0x22>
		// So writing UDR must happen first.
		// Writing UDR and clearing TC must be done atomically, otherwise
		// interrupts might delay the TXC clear so the byte written to UDR
		// is transmitted (setting TXC) before clearing TXC. Then TXC will
		// be cleared when no bytes are left, causing flush() to hang
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1bc6:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1bc8:	f8 94       	cli
			*_udr = c;
    1bca:	ec 85       	ldd	r30, Y+12	; 0x0c
    1bcc:	fd 85       	ldd	r31, Y+13	; 0x0d
    1bce:	60 83       	st	Z, r22
			#ifdef MPCM0
			*_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1bd0:	ee 81       	ldd	r30, Y+6	; 0x06
    1bd2:	ff 81       	ldd	r31, Y+7	; 0x07
    1bd4:	80 81       	ld	r24, Z
    1bd6:	83 70       	andi	r24, 0x03	; 3
    1bd8:	80 64       	ori	r24, 0x40	; 64
    1bda:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1bdc:	9f bf       	out	0x3f, r25	; 63
		_tx_buffer_head = i;
		sbi(*_ucsrb, UDRIE0);
	}
	
	return 1;
}
    1bde:	81 e0       	ldi	r24, 0x01	; 1
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	df 91       	pop	r29
    1be4:	cf 91       	pop	r28
    1be6:	1f 91       	pop	r17
    1be8:	0f 91       	pop	r16
    1bea:	08 95       	ret

00001bec <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, uint8_t config)
{
    1bec:	cf 92       	push	r12
    1bee:	df 92       	push	r13
    1bf0:	ef 92       	push	r14
    1bf2:	ff 92       	push	r15
    1bf4:	1f 93       	push	r17
    1bf6:	cf 93       	push	r28
    1bf8:	df 93       	push	r29
    1bfa:	ec 01       	movw	r28, r24
    1bfc:	6a 01       	movw	r12, r20
    1bfe:	7b 01       	movw	r14, r22
    1c00:	12 2f       	mov	r17, r18
	// Try u2x mode first
	uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
	*_ucsra = 1 << U2X0;
    1c02:	ee 81       	ldd	r30, Y+6	; 0x06
    1c04:	ff 81       	ldd	r31, Y+7	; 0x07
    1c06:	82 e0       	ldi	r24, 0x02	; 2
    1c08:	80 83       	st	Z, r24
	// hardcoded exception for 57600 for compatibility with the bootloader
	// shipped with the Duemilanove and previous boards and the firmware
	// on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
	// be > 4095, so switch back to non-u2x mode if the baud rate is too
	// low.
	if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1c0a:	41 15       	cp	r20, r1
    1c0c:	51 4e       	sbci	r21, 0xE1	; 225
    1c0e:	61 05       	cpc	r22, r1
    1c10:	71 05       	cpc	r23, r1
    1c12:	a9 f0       	breq	.+42     	; 0x1c3e <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, uint8_t config)
{
	// Try u2x mode first
	uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1c14:	60 e0       	ldi	r22, 0x00	; 0
    1c16:	79 e0       	ldi	r23, 0x09	; 9
    1c18:	8d e3       	ldi	r24, 0x3D	; 61
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	a7 01       	movw	r20, r14
    1c1e:	96 01       	movw	r18, r12
    1c20:	30 d3       	rcall	.+1632   	; 0x2282 <__udivmodsi4>
    1c22:	da 01       	movw	r26, r20
    1c24:	c9 01       	movw	r24, r18
    1c26:	01 97       	sbiw	r24, 0x01	; 1
    1c28:	a1 09       	sbc	r26, r1
    1c2a:	b1 09       	sbc	r27, r1
    1c2c:	b6 95       	lsr	r27
    1c2e:	a7 95       	ror	r26
    1c30:	97 95       	ror	r25
    1c32:	87 95       	ror	r24
    1c34:	9c 01       	movw	r18, r24
	// hardcoded exception for 57600 for compatibility with the bootloader
	// shipped with the Duemilanove and previous boards and the firmware
	// on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
	// be > 4095, so switch back to non-u2x mode if the baud rate is too
	// low.
	if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1c36:	21 15       	cp	r18, r1
    1c38:	80 e1       	ldi	r24, 0x10	; 16
    1c3a:	38 07       	cpc	r19, r24
    1c3c:	a0 f0       	brcs	.+40     	; 0x1c66 <_ZN14HardwareSerial5beginEmh+0x7a>
	{
		*_ucsra = 0;
    1c3e:	ee 81       	ldd	r30, Y+6	; 0x06
    1c40:	ff 81       	ldd	r31, Y+7	; 0x07
    1c42:	10 82       	st	Z, r1
		baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1c44:	60 e8       	ldi	r22, 0x80	; 128
    1c46:	74 e8       	ldi	r23, 0x84	; 132
    1c48:	8e e1       	ldi	r24, 0x1E	; 30
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	a7 01       	movw	r20, r14
    1c4e:	96 01       	movw	r18, r12
    1c50:	18 d3       	rcall	.+1584   	; 0x2282 <__udivmodsi4>
    1c52:	da 01       	movw	r26, r20
    1c54:	c9 01       	movw	r24, r18
    1c56:	01 97       	sbiw	r24, 0x01	; 1
    1c58:	a1 09       	sbc	r26, r1
    1c5a:	b1 09       	sbc	r27, r1
    1c5c:	b6 95       	lsr	r27
    1c5e:	a7 95       	ror	r26
    1c60:	97 95       	ror	r25
    1c62:	87 95       	ror	r24
    1c64:	9c 01       	movw	r18, r24
	}

	// assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
	*_ubrrh = baud_setting >> 8;
    1c66:	ea 81       	ldd	r30, Y+2	; 0x02
    1c68:	fb 81       	ldd	r31, Y+3	; 0x03
    1c6a:	30 83       	st	Z, r19
	*_ubrrl = baud_setting;
    1c6c:	ec 81       	ldd	r30, Y+4	; 0x04
    1c6e:	fd 81       	ldd	r31, Y+5	; 0x05
    1c70:	20 83       	st	Z, r18

	_written = false;
    1c72:	1e 86       	std	Y+14, r1	; 0x0e

	//set the data bits, parity, and stop bits
	#if defined(__AVR_ATmega8__)
	config |= 0x80; // select UCSRC register (shared with UBRRH)
	#endif
	*_ucsrc = config;
    1c74:	ea 85       	ldd	r30, Y+10	; 0x0a
    1c76:	fb 85       	ldd	r31, Y+11	; 0x0b
    1c78:	10 83       	st	Z, r17
	
	sbi(*_ucsrb, RXEN0);
    1c7a:	e8 85       	ldd	r30, Y+8	; 0x08
    1c7c:	f9 85       	ldd	r31, Y+9	; 0x09
    1c7e:	80 81       	ld	r24, Z
    1c80:	80 61       	ori	r24, 0x10	; 16
    1c82:	80 83       	st	Z, r24
	sbi(*_ucsrb, TXEN0);
    1c84:	e8 85       	ldd	r30, Y+8	; 0x08
    1c86:	f9 85       	ldd	r31, Y+9	; 0x09
    1c88:	80 81       	ld	r24, Z
    1c8a:	88 60       	ori	r24, 0x08	; 8
    1c8c:	80 83       	st	Z, r24
	sbi(*_ucsrb, RXCIE0);
    1c8e:	e8 85       	ldd	r30, Y+8	; 0x08
    1c90:	f9 85       	ldd	r31, Y+9	; 0x09
    1c92:	80 81       	ld	r24, Z
    1c94:	80 68       	ori	r24, 0x80	; 128
    1c96:	80 83       	st	Z, r24
	cbi(*_ucsrb, UDRIE0);
    1c98:	e8 85       	ldd	r30, Y+8	; 0x08
    1c9a:	f9 85       	ldd	r31, Y+9	; 0x09
    1c9c:	80 81       	ld	r24, Z
    1c9e:	8f 7d       	andi	r24, 0xDF	; 223
    1ca0:	80 83       	st	Z, r24
}
    1ca2:	df 91       	pop	r29
    1ca4:	cf 91       	pop	r28
    1ca6:	1f 91       	pop	r17
    1ca8:	ff 90       	pop	r15
    1caa:	ef 90       	pop	r14
    1cac:	df 90       	pop	r13
    1cae:	cf 90       	pop	r12
    1cb0:	08 95       	ret

00001cb2 <__vector_25>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
}
    1cb2:	1f 92       	push	r1
    1cb4:	0f 92       	push	r0
    1cb6:	0f b6       	in	r0, 0x3f	; 63
    1cb8:	0f 92       	push	r0
    1cba:	11 24       	eor	r1, r1
    1cbc:	0b b6       	in	r0, 0x3b	; 59
    1cbe:	0f 92       	push	r0
    1cc0:	2f 93       	push	r18
    1cc2:	8f 93       	push	r24
    1cc4:	9f 93       	push	r25
    1cc6:	af 93       	push	r26
    1cc8:	bf 93       	push	r27
    1cca:	ef 93       	push	r30
    1ccc:	ff 93       	push	r31
    1cce:	e0 91 7b 05 	lds	r30, 0x057B	; 0x80057b <Serial+0x6>
    1cd2:	f0 91 7c 05 	lds	r31, 0x057C	; 0x80057c <Serial+0x7>
    1cd6:	80 81       	ld	r24, Z
    1cd8:	82 fd       	sbrc	r24, 2
    1cda:	14 c0       	rjmp	.+40     	; 0x1d04 <__vector_25+0x52>
    1cdc:	e5 e7       	ldi	r30, 0x75	; 117
    1cde:	f5 e0       	ldi	r31, 0x05	; 5
    1ce0:	a4 85       	ldd	r26, Z+12	; 0x0c
    1ce2:	b5 85       	ldd	r27, Z+13	; 0x0d
    1ce4:	2c 91       	ld	r18, X
    1ce6:	87 85       	ldd	r24, Z+15	; 0x0f
    1ce8:	8f 5f       	subi	r24, 0xFF	; 255
    1cea:	8f 70       	andi	r24, 0x0F	; 15
    1cec:	90 89       	ldd	r25, Z+16	; 0x10
    1cee:	89 17       	cp	r24, r25
    1cf0:	71 f0       	breq	.+28     	; 0x1d0e <__vector_25+0x5c>
    1cf2:	df 01       	movw	r26, r30
    1cf4:	e7 85       	ldd	r30, Z+15	; 0x0f
    1cf6:	f0 e0       	ldi	r31, 0x00	; 0
    1cf8:	eb 58       	subi	r30, 0x8B	; 139
    1cfa:	fa 4f       	sbci	r31, 0xFA	; 250
    1cfc:	23 8b       	std	Z+19, r18	; 0x13
    1cfe:	1f 96       	adiw	r26, 0x0f	; 15
    1d00:	8c 93       	st	X, r24
    1d02:	05 c0       	rjmp	.+10     	; 0x1d0e <__vector_25+0x5c>
    1d04:	e0 91 81 05 	lds	r30, 0x0581	; 0x800581 <Serial+0xc>
    1d08:	f0 91 82 05 	lds	r31, 0x0582	; 0x800582 <Serial+0xd>
    1d0c:	80 81       	ld	r24, Z
    1d0e:	ff 91       	pop	r31
    1d10:	ef 91       	pop	r30
    1d12:	bf 91       	pop	r27
    1d14:	af 91       	pop	r26
    1d16:	9f 91       	pop	r25
    1d18:	8f 91       	pop	r24
    1d1a:	2f 91       	pop	r18
    1d1c:	0f 90       	pop	r0
    1d1e:	0b be       	out	0x3b, r0	; 59
    1d20:	0f 90       	pop	r0
    1d22:	0f be       	out	0x3f, r0	; 63
    1d24:	0f 90       	pop	r0
    1d26:	1f 90       	pop	r1
    1d28:	18 95       	reti

00001d2a <__vector_26>:
    1d2a:	1f 92       	push	r1
    1d2c:	0f 92       	push	r0
    1d2e:	0f b6       	in	r0, 0x3f	; 63
    1d30:	0f 92       	push	r0
    1d32:	11 24       	eor	r1, r1
    1d34:	0b b6       	in	r0, 0x3b	; 59
    1d36:	0f 92       	push	r0
    1d38:	2f 93       	push	r18
    1d3a:	3f 93       	push	r19
    1d3c:	4f 93       	push	r20
    1d3e:	5f 93       	push	r21
    1d40:	6f 93       	push	r22
    1d42:	7f 93       	push	r23
    1d44:	8f 93       	push	r24
    1d46:	9f 93       	push	r25
    1d48:	af 93       	push	r26
    1d4a:	bf 93       	push	r27
    1d4c:	ef 93       	push	r30
    1d4e:	ff 93       	push	r31
    1d50:	85 e7       	ldi	r24, 0x75	; 117
    1d52:	95 e0       	ldi	r25, 0x05	; 5
    1d54:	a9 de       	rcall	.-686    	; 0x1aa8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1d56:	ff 91       	pop	r31
    1d58:	ef 91       	pop	r30
    1d5a:	bf 91       	pop	r27
    1d5c:	af 91       	pop	r26
    1d5e:	9f 91       	pop	r25
    1d60:	8f 91       	pop	r24
    1d62:	7f 91       	pop	r23
    1d64:	6f 91       	pop	r22
    1d66:	5f 91       	pop	r21
    1d68:	4f 91       	pop	r20
    1d6a:	3f 91       	pop	r19
    1d6c:	2f 91       	pop	r18
    1d6e:	0f 90       	pop	r0
    1d70:	0b be       	out	0x3b, r0	; 59
    1d72:	0f 90       	pop	r0
    1d74:	0f be       	out	0x3f, r0	; 63
    1d76:	0f 90       	pop	r0
    1d78:	1f 90       	pop	r1
    1d7a:	18 95       	reti

00001d7c <_GLOBAL__sub_I___vector_25>:
volatile uint8_t *ucsrc, volatile uint8_t *udr) :
_ubrrh(ubrrh), _ubrrl(ubrrl),
_ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
_udr(udr),
_rx_buffer_head(0), _rx_buffer_tail(0),
_tx_buffer_head(0), _tx_buffer_tail(0)
    1d7c:	e5 e7       	ldi	r30, 0x75	; 117
    1d7e:	f5 e0       	ldi	r31, 0x05	; 5
    1d80:	81 ec       	ldi	r24, 0xC1	; 193
    1d82:	92 e0       	ldi	r25, 0x02	; 2
    1d84:	91 83       	std	Z+1, r25	; 0x01
    1d86:	80 83       	st	Z, r24
    1d88:	85 ec       	ldi	r24, 0xC5	; 197
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	93 83       	std	Z+3, r25	; 0x03
    1d8e:	82 83       	std	Z+2, r24	; 0x02
    1d90:	84 ec       	ldi	r24, 0xC4	; 196
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	95 83       	std	Z+5, r25	; 0x05
    1d96:	84 83       	std	Z+4, r24	; 0x04
    1d98:	80 ec       	ldi	r24, 0xC0	; 192
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	97 83       	std	Z+7, r25	; 0x07
    1d9e:	86 83       	std	Z+6, r24	; 0x06
    1da0:	81 ec       	ldi	r24, 0xC1	; 193
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	91 87       	std	Z+9, r25	; 0x09
    1da6:	80 87       	std	Z+8, r24	; 0x08
    1da8:	82 ec       	ldi	r24, 0xC2	; 194
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	93 87       	std	Z+11, r25	; 0x0b
    1dae:	82 87       	std	Z+10, r24	; 0x0a
    1db0:	86 ec       	ldi	r24, 0xC6	; 198
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	95 87       	std	Z+13, r25	; 0x0d
    1db6:	84 87       	std	Z+12, r24	; 0x0c
    1db8:	17 86       	std	Z+15, r1	; 0x0f
    1dba:	10 8a       	std	Z+16, r1	; 0x10
    1dbc:	11 8a       	std	Z+17, r1	; 0x11
    1dbe:	12 8a       	std	Z+18, r1	; 0x12
    1dc0:	08 95       	ret

00001dc2 <__vector_36>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
}
    1dc2:	1f 92       	push	r1
    1dc4:	0f 92       	push	r0
    1dc6:	0f b6       	in	r0, 0x3f	; 63
    1dc8:	0f 92       	push	r0
    1dca:	11 24       	eor	r1, r1
    1dcc:	0b b6       	in	r0, 0x3b	; 59
    1dce:	0f 92       	push	r0
    1dd0:	2f 93       	push	r18
    1dd2:	8f 93       	push	r24
    1dd4:	9f 93       	push	r25
    1dd6:	af 93       	push	r26
    1dd8:	bf 93       	push	r27
    1dda:	ef 93       	push	r30
    1ddc:	ff 93       	push	r31
    1dde:	e0 91 ae 05 	lds	r30, 0x05AE	; 0x8005ae <Serial1+0x6>
    1de2:	f0 91 af 05 	lds	r31, 0x05AF	; 0x8005af <Serial1+0x7>
    1de6:	80 81       	ld	r24, Z
    1de8:	82 fd       	sbrc	r24, 2
    1dea:	14 c0       	rjmp	.+40     	; 0x1e14 <__vector_36+0x52>
    1dec:	e8 ea       	ldi	r30, 0xA8	; 168
    1dee:	f5 e0       	ldi	r31, 0x05	; 5
    1df0:	a4 85       	ldd	r26, Z+12	; 0x0c
    1df2:	b5 85       	ldd	r27, Z+13	; 0x0d
    1df4:	2c 91       	ld	r18, X
    1df6:	87 85       	ldd	r24, Z+15	; 0x0f
    1df8:	8f 5f       	subi	r24, 0xFF	; 255
    1dfa:	8f 70       	andi	r24, 0x0F	; 15
    1dfc:	90 89       	ldd	r25, Z+16	; 0x10
    1dfe:	89 17       	cp	r24, r25
    1e00:	71 f0       	breq	.+28     	; 0x1e1e <__vector_36+0x5c>
    1e02:	df 01       	movw	r26, r30
    1e04:	e7 85       	ldd	r30, Z+15	; 0x0f
    1e06:	f0 e0       	ldi	r31, 0x00	; 0
    1e08:	e8 55       	subi	r30, 0x58	; 88
    1e0a:	fa 4f       	sbci	r31, 0xFA	; 250
    1e0c:	23 8b       	std	Z+19, r18	; 0x13
    1e0e:	1f 96       	adiw	r26, 0x0f	; 15
    1e10:	8c 93       	st	X, r24
    1e12:	05 c0       	rjmp	.+10     	; 0x1e1e <__vector_36+0x5c>
    1e14:	e0 91 b4 05 	lds	r30, 0x05B4	; 0x8005b4 <Serial1+0xc>
    1e18:	f0 91 b5 05 	lds	r31, 0x05B5	; 0x8005b5 <Serial1+0xd>
    1e1c:	80 81       	ld	r24, Z
    1e1e:	ff 91       	pop	r31
    1e20:	ef 91       	pop	r30
    1e22:	bf 91       	pop	r27
    1e24:	af 91       	pop	r26
    1e26:	9f 91       	pop	r25
    1e28:	8f 91       	pop	r24
    1e2a:	2f 91       	pop	r18
    1e2c:	0f 90       	pop	r0
    1e2e:	0b be       	out	0x3b, r0	; 59
    1e30:	0f 90       	pop	r0
    1e32:	0f be       	out	0x3f, r0	; 63
    1e34:	0f 90       	pop	r0
    1e36:	1f 90       	pop	r1
    1e38:	18 95       	reti

00001e3a <__vector_37>:
    1e3a:	1f 92       	push	r1
    1e3c:	0f 92       	push	r0
    1e3e:	0f b6       	in	r0, 0x3f	; 63
    1e40:	0f 92       	push	r0
    1e42:	11 24       	eor	r1, r1
    1e44:	0b b6       	in	r0, 0x3b	; 59
    1e46:	0f 92       	push	r0
    1e48:	2f 93       	push	r18
    1e4a:	3f 93       	push	r19
    1e4c:	4f 93       	push	r20
    1e4e:	5f 93       	push	r21
    1e50:	6f 93       	push	r22
    1e52:	7f 93       	push	r23
    1e54:	8f 93       	push	r24
    1e56:	9f 93       	push	r25
    1e58:	af 93       	push	r26
    1e5a:	bf 93       	push	r27
    1e5c:	ef 93       	push	r30
    1e5e:	ff 93       	push	r31
    1e60:	88 ea       	ldi	r24, 0xA8	; 168
    1e62:	95 e0       	ldi	r25, 0x05	; 5
    1e64:	21 de       	rcall	.-958    	; 0x1aa8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1e66:	ff 91       	pop	r31
    1e68:	ef 91       	pop	r30
    1e6a:	bf 91       	pop	r27
    1e6c:	af 91       	pop	r26
    1e6e:	9f 91       	pop	r25
    1e70:	8f 91       	pop	r24
    1e72:	7f 91       	pop	r23
    1e74:	6f 91       	pop	r22
    1e76:	5f 91       	pop	r21
    1e78:	4f 91       	pop	r20
    1e7a:	3f 91       	pop	r19
    1e7c:	2f 91       	pop	r18
    1e7e:	0f 90       	pop	r0
    1e80:	0b be       	out	0x3b, r0	; 59
    1e82:	0f 90       	pop	r0
    1e84:	0f be       	out	0x3f, r0	; 63
    1e86:	0f 90       	pop	r0
    1e88:	1f 90       	pop	r1
    1e8a:	18 95       	reti

00001e8c <_GLOBAL__sub_I___vector_36>:
    1e8c:	e8 ea       	ldi	r30, 0xA8	; 168
    1e8e:	f5 e0       	ldi	r31, 0x05	; 5
    1e90:	81 ec       	ldi	r24, 0xC1	; 193
    1e92:	92 e0       	ldi	r25, 0x02	; 2
    1e94:	91 83       	std	Z+1, r25	; 0x01
    1e96:	80 83       	st	Z, r24
    1e98:	8d ec       	ldi	r24, 0xCD	; 205
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	93 83       	std	Z+3, r25	; 0x03
    1e9e:	82 83       	std	Z+2, r24	; 0x02
    1ea0:	8c ec       	ldi	r24, 0xCC	; 204
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	95 83       	std	Z+5, r25	; 0x05
    1ea6:	84 83       	std	Z+4, r24	; 0x04
    1ea8:	88 ec       	ldi	r24, 0xC8	; 200
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	97 83       	std	Z+7, r25	; 0x07
    1eae:	86 83       	std	Z+6, r24	; 0x06
    1eb0:	89 ec       	ldi	r24, 0xC9	; 201
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	91 87       	std	Z+9, r25	; 0x09
    1eb6:	80 87       	std	Z+8, r24	; 0x08
    1eb8:	8a ec       	ldi	r24, 0xCA	; 202
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	93 87       	std	Z+11, r25	; 0x0b
    1ebe:	82 87       	std	Z+10, r24	; 0x0a
    1ec0:	8e ec       	ldi	r24, 0xCE	; 206
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	95 87       	std	Z+13, r25	; 0x0d
    1ec6:	84 87       	std	Z+12, r24	; 0x0c
    1ec8:	17 86       	std	Z+15, r1	; 0x0f
    1eca:	10 8a       	std	Z+16, r1	; 0x10
    1ecc:	11 8a       	std	Z+17, r1	; 0x11
    1ece:	12 8a       	std	Z+18, r1	; 0x12
    1ed0:	08 95       	ret

00001ed2 <__vector_51>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial2_available() {
  return Serial2.available();
}
    1ed2:	1f 92       	push	r1
    1ed4:	0f 92       	push	r0
    1ed6:	0f b6       	in	r0, 0x3f	; 63
    1ed8:	0f 92       	push	r0
    1eda:	11 24       	eor	r1, r1
    1edc:	0b b6       	in	r0, 0x3b	; 59
    1ede:	0f 92       	push	r0
    1ee0:	2f 93       	push	r18
    1ee2:	8f 93       	push	r24
    1ee4:	9f 93       	push	r25
    1ee6:	af 93       	push	r26
    1ee8:	bf 93       	push	r27
    1eea:	ef 93       	push	r30
    1eec:	ff 93       	push	r31
    1eee:	e0 91 e1 05 	lds	r30, 0x05E1	; 0x8005e1 <Serial2+0x6>
    1ef2:	f0 91 e2 05 	lds	r31, 0x05E2	; 0x8005e2 <Serial2+0x7>
    1ef6:	80 81       	ld	r24, Z
    1ef8:	82 fd       	sbrc	r24, 2
    1efa:	14 c0       	rjmp	.+40     	; 0x1f24 <__vector_51+0x52>
    1efc:	eb ed       	ldi	r30, 0xDB	; 219
    1efe:	f5 e0       	ldi	r31, 0x05	; 5
    1f00:	a4 85       	ldd	r26, Z+12	; 0x0c
    1f02:	b5 85       	ldd	r27, Z+13	; 0x0d
    1f04:	2c 91       	ld	r18, X
    1f06:	87 85       	ldd	r24, Z+15	; 0x0f
    1f08:	8f 5f       	subi	r24, 0xFF	; 255
    1f0a:	8f 70       	andi	r24, 0x0F	; 15
    1f0c:	90 89       	ldd	r25, Z+16	; 0x10
    1f0e:	89 17       	cp	r24, r25
    1f10:	71 f0       	breq	.+28     	; 0x1f2e <__vector_51+0x5c>
    1f12:	df 01       	movw	r26, r30
    1f14:	e7 85       	ldd	r30, Z+15	; 0x0f
    1f16:	f0 e0       	ldi	r31, 0x00	; 0
    1f18:	e5 52       	subi	r30, 0x25	; 37
    1f1a:	fa 4f       	sbci	r31, 0xFA	; 250
    1f1c:	23 8b       	std	Z+19, r18	; 0x13
    1f1e:	1f 96       	adiw	r26, 0x0f	; 15
    1f20:	8c 93       	st	X, r24
    1f22:	05 c0       	rjmp	.+10     	; 0x1f2e <__vector_51+0x5c>
    1f24:	e0 91 e7 05 	lds	r30, 0x05E7	; 0x8005e7 <Serial2+0xc>
    1f28:	f0 91 e8 05 	lds	r31, 0x05E8	; 0x8005e8 <Serial2+0xd>
    1f2c:	80 81       	ld	r24, Z
    1f2e:	ff 91       	pop	r31
    1f30:	ef 91       	pop	r30
    1f32:	bf 91       	pop	r27
    1f34:	af 91       	pop	r26
    1f36:	9f 91       	pop	r25
    1f38:	8f 91       	pop	r24
    1f3a:	2f 91       	pop	r18
    1f3c:	0f 90       	pop	r0
    1f3e:	0b be       	out	0x3b, r0	; 59
    1f40:	0f 90       	pop	r0
    1f42:	0f be       	out	0x3f, r0	; 63
    1f44:	0f 90       	pop	r0
    1f46:	1f 90       	pop	r1
    1f48:	18 95       	reti

00001f4a <__vector_52>:
    1f4a:	1f 92       	push	r1
    1f4c:	0f 92       	push	r0
    1f4e:	0f b6       	in	r0, 0x3f	; 63
    1f50:	0f 92       	push	r0
    1f52:	11 24       	eor	r1, r1
    1f54:	0b b6       	in	r0, 0x3b	; 59
    1f56:	0f 92       	push	r0
    1f58:	2f 93       	push	r18
    1f5a:	3f 93       	push	r19
    1f5c:	4f 93       	push	r20
    1f5e:	5f 93       	push	r21
    1f60:	6f 93       	push	r22
    1f62:	7f 93       	push	r23
    1f64:	8f 93       	push	r24
    1f66:	9f 93       	push	r25
    1f68:	af 93       	push	r26
    1f6a:	bf 93       	push	r27
    1f6c:	ef 93       	push	r30
    1f6e:	ff 93       	push	r31
    1f70:	8b ed       	ldi	r24, 0xDB	; 219
    1f72:	95 e0       	ldi	r25, 0x05	; 5
    1f74:	99 dd       	rcall	.-1230   	; 0x1aa8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1f76:	ff 91       	pop	r31
    1f78:	ef 91       	pop	r30
    1f7a:	bf 91       	pop	r27
    1f7c:	af 91       	pop	r26
    1f7e:	9f 91       	pop	r25
    1f80:	8f 91       	pop	r24
    1f82:	7f 91       	pop	r23
    1f84:	6f 91       	pop	r22
    1f86:	5f 91       	pop	r21
    1f88:	4f 91       	pop	r20
    1f8a:	3f 91       	pop	r19
    1f8c:	2f 91       	pop	r18
    1f8e:	0f 90       	pop	r0
    1f90:	0b be       	out	0x3b, r0	; 59
    1f92:	0f 90       	pop	r0
    1f94:	0f be       	out	0x3f, r0	; 63
    1f96:	0f 90       	pop	r0
    1f98:	1f 90       	pop	r1
    1f9a:	18 95       	reti

00001f9c <_GLOBAL__sub_I___vector_51>:
    1f9c:	eb ed       	ldi	r30, 0xDB	; 219
    1f9e:	f5 e0       	ldi	r31, 0x05	; 5
    1fa0:	81 ec       	ldi	r24, 0xC1	; 193
    1fa2:	92 e0       	ldi	r25, 0x02	; 2
    1fa4:	91 83       	std	Z+1, r25	; 0x01
    1fa6:	80 83       	st	Z, r24
    1fa8:	85 ed       	ldi	r24, 0xD5	; 213
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	93 83       	std	Z+3, r25	; 0x03
    1fae:	82 83       	std	Z+2, r24	; 0x02
    1fb0:	84 ed       	ldi	r24, 0xD4	; 212
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	95 83       	std	Z+5, r25	; 0x05
    1fb6:	84 83       	std	Z+4, r24	; 0x04
    1fb8:	80 ed       	ldi	r24, 0xD0	; 208
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	97 83       	std	Z+7, r25	; 0x07
    1fbe:	86 83       	std	Z+6, r24	; 0x06
    1fc0:	81 ed       	ldi	r24, 0xD1	; 209
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	91 87       	std	Z+9, r25	; 0x09
    1fc6:	80 87       	std	Z+8, r24	; 0x08
    1fc8:	82 ed       	ldi	r24, 0xD2	; 210
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	93 87       	std	Z+11, r25	; 0x0b
    1fce:	82 87       	std	Z+10, r24	; 0x0a
    1fd0:	86 ed       	ldi	r24, 0xD6	; 214
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	95 87       	std	Z+13, r25	; 0x0d
    1fd6:	84 87       	std	Z+12, r24	; 0x0c
    1fd8:	17 86       	std	Z+15, r1	; 0x0f
    1fda:	10 8a       	std	Z+16, r1	; 0x10
    1fdc:	11 8a       	std	Z+17, r1	; 0x11
    1fde:	12 8a       	std	Z+18, r1	; 0x12
    1fe0:	08 95       	ret

00001fe2 <__vector_54>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial3_available() {
  return Serial3.available();
}
    1fe2:	1f 92       	push	r1
    1fe4:	0f 92       	push	r0
    1fe6:	0f b6       	in	r0, 0x3f	; 63
    1fe8:	0f 92       	push	r0
    1fea:	11 24       	eor	r1, r1
    1fec:	0b b6       	in	r0, 0x3b	; 59
    1fee:	0f 92       	push	r0
    1ff0:	2f 93       	push	r18
    1ff2:	8f 93       	push	r24
    1ff4:	9f 93       	push	r25
    1ff6:	af 93       	push	r26
    1ff8:	bf 93       	push	r27
    1ffa:	ef 93       	push	r30
    1ffc:	ff 93       	push	r31
    1ffe:	e0 91 14 06 	lds	r30, 0x0614	; 0x800614 <Serial3+0x6>
    2002:	f0 91 15 06 	lds	r31, 0x0615	; 0x800615 <Serial3+0x7>
    2006:	80 81       	ld	r24, Z
    2008:	82 fd       	sbrc	r24, 2
    200a:	14 c0       	rjmp	.+40     	; 0x2034 <__vector_54+0x52>
    200c:	ee e0       	ldi	r30, 0x0E	; 14
    200e:	f6 e0       	ldi	r31, 0x06	; 6
    2010:	a4 85       	ldd	r26, Z+12	; 0x0c
    2012:	b5 85       	ldd	r27, Z+13	; 0x0d
    2014:	2c 91       	ld	r18, X
    2016:	87 85       	ldd	r24, Z+15	; 0x0f
    2018:	8f 5f       	subi	r24, 0xFF	; 255
    201a:	8f 70       	andi	r24, 0x0F	; 15
    201c:	90 89       	ldd	r25, Z+16	; 0x10
    201e:	89 17       	cp	r24, r25
    2020:	71 f0       	breq	.+28     	; 0x203e <__vector_54+0x5c>
    2022:	df 01       	movw	r26, r30
    2024:	e7 85       	ldd	r30, Z+15	; 0x0f
    2026:	f0 e0       	ldi	r31, 0x00	; 0
    2028:	e2 5f       	subi	r30, 0xF2	; 242
    202a:	f9 4f       	sbci	r31, 0xF9	; 249
    202c:	23 8b       	std	Z+19, r18	; 0x13
    202e:	1f 96       	adiw	r26, 0x0f	; 15
    2030:	8c 93       	st	X, r24
    2032:	05 c0       	rjmp	.+10     	; 0x203e <__vector_54+0x5c>
    2034:	e0 91 1a 06 	lds	r30, 0x061A	; 0x80061a <Serial3+0xc>
    2038:	f0 91 1b 06 	lds	r31, 0x061B	; 0x80061b <Serial3+0xd>
    203c:	80 81       	ld	r24, Z
    203e:	ff 91       	pop	r31
    2040:	ef 91       	pop	r30
    2042:	bf 91       	pop	r27
    2044:	af 91       	pop	r26
    2046:	9f 91       	pop	r25
    2048:	8f 91       	pop	r24
    204a:	2f 91       	pop	r18
    204c:	0f 90       	pop	r0
    204e:	0b be       	out	0x3b, r0	; 59
    2050:	0f 90       	pop	r0
    2052:	0f be       	out	0x3f, r0	; 63
    2054:	0f 90       	pop	r0
    2056:	1f 90       	pop	r1
    2058:	18 95       	reti

0000205a <__vector_55>:
    205a:	1f 92       	push	r1
    205c:	0f 92       	push	r0
    205e:	0f b6       	in	r0, 0x3f	; 63
    2060:	0f 92       	push	r0
    2062:	11 24       	eor	r1, r1
    2064:	0b b6       	in	r0, 0x3b	; 59
    2066:	0f 92       	push	r0
    2068:	2f 93       	push	r18
    206a:	3f 93       	push	r19
    206c:	4f 93       	push	r20
    206e:	5f 93       	push	r21
    2070:	6f 93       	push	r22
    2072:	7f 93       	push	r23
    2074:	8f 93       	push	r24
    2076:	9f 93       	push	r25
    2078:	af 93       	push	r26
    207a:	bf 93       	push	r27
    207c:	ef 93       	push	r30
    207e:	ff 93       	push	r31
    2080:	8e e0       	ldi	r24, 0x0E	; 14
    2082:	96 e0       	ldi	r25, 0x06	; 6
    2084:	11 dd       	rcall	.-1502   	; 0x1aa8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    2086:	ff 91       	pop	r31
    2088:	ef 91       	pop	r30
    208a:	bf 91       	pop	r27
    208c:	af 91       	pop	r26
    208e:	9f 91       	pop	r25
    2090:	8f 91       	pop	r24
    2092:	7f 91       	pop	r23
    2094:	6f 91       	pop	r22
    2096:	5f 91       	pop	r21
    2098:	4f 91       	pop	r20
    209a:	3f 91       	pop	r19
    209c:	2f 91       	pop	r18
    209e:	0f 90       	pop	r0
    20a0:	0b be       	out	0x3b, r0	; 59
    20a2:	0f 90       	pop	r0
    20a4:	0f be       	out	0x3f, r0	; 63
    20a6:	0f 90       	pop	r0
    20a8:	1f 90       	pop	r1
    20aa:	18 95       	reti

000020ac <_GLOBAL__sub_I___vector_54>:
    20ac:	ee e0       	ldi	r30, 0x0E	; 14
    20ae:	f6 e0       	ldi	r31, 0x06	; 6
    20b0:	81 ec       	ldi	r24, 0xC1	; 193
    20b2:	92 e0       	ldi	r25, 0x02	; 2
    20b4:	91 83       	std	Z+1, r25	; 0x01
    20b6:	80 83       	st	Z, r24
    20b8:	85 e3       	ldi	r24, 0x35	; 53
    20ba:	91 e0       	ldi	r25, 0x01	; 1
    20bc:	93 83       	std	Z+3, r25	; 0x03
    20be:	82 83       	std	Z+2, r24	; 0x02
    20c0:	84 e3       	ldi	r24, 0x34	; 52
    20c2:	91 e0       	ldi	r25, 0x01	; 1
    20c4:	95 83       	std	Z+5, r25	; 0x05
    20c6:	84 83       	std	Z+4, r24	; 0x04
    20c8:	80 e3       	ldi	r24, 0x30	; 48
    20ca:	91 e0       	ldi	r25, 0x01	; 1
    20cc:	97 83       	std	Z+7, r25	; 0x07
    20ce:	86 83       	std	Z+6, r24	; 0x06
    20d0:	81 e3       	ldi	r24, 0x31	; 49
    20d2:	91 e0       	ldi	r25, 0x01	; 1
    20d4:	91 87       	std	Z+9, r25	; 0x09
    20d6:	80 87       	std	Z+8, r24	; 0x08
    20d8:	82 e3       	ldi	r24, 0x32	; 50
    20da:	91 e0       	ldi	r25, 0x01	; 1
    20dc:	93 87       	std	Z+11, r25	; 0x0b
    20de:	82 87       	std	Z+10, r24	; 0x0a
    20e0:	86 e3       	ldi	r24, 0x36	; 54
    20e2:	91 e0       	ldi	r25, 0x01	; 1
    20e4:	95 87       	std	Z+13, r25	; 0x0d
    20e6:	84 87       	std	Z+12, r24	; 0x0c
    20e8:	17 86       	std	Z+15, r1	; 0x0f
    20ea:	10 8a       	std	Z+16, r1	; 0x10
    20ec:	11 8a       	std	Z+17, r1	; 0x11
    20ee:	12 8a       	std	Z+18, r1	; 0x12
    20f0:	08 95       	ret

000020f2 <_ZN13DigitalSensor14IsValidRequestEPKhh>:

bool Robot::RegisterDevices(){
	RegisterDevice(BtnTest); //TODO return if successful
	
	return true;
}
    20f2:	81 e0       	ldi	r24, 0x01	; 1
    20f4:	41 11       	cpse	r20, r1
    20f6:	80 e0       	ldi	r24, 0x00	; 0
    20f8:	08 95       	ret

000020fa <_ZN13DigitalSensor15UpdateRequestedEPh>:
    20fa:	fc 01       	movw	r30, r24
    20fc:	a5 81       	ldd	r26, Z+5	; 0x05
    20fe:	b6 81       	ldd	r27, Z+6	; 0x06
    2100:	9c 91       	ld	r25, X
    2102:	84 81       	ldd	r24, Z+4	; 0x04
    2104:	98 23       	and	r25, r24
    2106:	21 e0       	ldi	r18, 0x01	; 1
    2108:	09 f4       	brne	.+2      	; 0x210c <_ZN13DigitalSensor15UpdateRequestedEPh+0x12>
    210a:	20 e0       	ldi	r18, 0x00	; 0
    210c:	87 81       	ldd	r24, Z+7	; 0x07
    210e:	82 27       	eor	r24, r18
    2110:	fb 01       	movw	r30, r22
    2112:	80 83       	st	Z, r24
    2114:	81 e0       	ldi	r24, 0x01	; 1
    2116:	08 95       	ret

00002118 <_ZN7ISensor6UpdateEPKhh>:
    2118:	cf 93       	push	r28
    211a:	df 93       	push	r29
    211c:	ec 01       	movw	r28, r24
    211e:	e8 81       	ld	r30, Y
    2120:	f9 81       	ldd	r31, Y+1	; 0x01
    2122:	02 80       	ldd	r0, Z+2	; 0x02
    2124:	f3 81       	ldd	r31, Z+3	; 0x03
    2126:	e0 2d       	mov	r30, r0
    2128:	19 95       	eicall
    212a:	88 23       	and	r24, r24
    212c:	a1 f0       	breq	.+40     	; 0x2156 <_ZN7ISensor6UpdateEPKhh+0x3e>
    212e:	e0 91 24 02 	lds	r30, 0x0224	; 0x800224 <_ZN9EtherComm6bufferE>
    2132:	f0 91 25 02 	lds	r31, 0x0225	; 0x800225 <_ZN9EtherComm6bufferE+0x1>
    2136:	8a 81       	ldd	r24, Y+2	; 0x02
    2138:	82 83       	std	Z+2, r24	; 0x02
    213a:	bf 01       	movw	r22, r30
    213c:	6d 5f       	subi	r22, 0xFD	; 253
    213e:	7f 4f       	sbci	r23, 0xFF	; 255
    2140:	e8 81       	ld	r30, Y
    2142:	f9 81       	ldd	r31, Y+1	; 0x01
    2144:	04 80       	ldd	r0, Z+4	; 0x04
    2146:	f5 81       	ldd	r31, Z+5	; 0x05
    2148:	e0 2d       	mov	r30, r0
    214a:	ce 01       	movw	r24, r28
    214c:	19 95       	eicall
    214e:	61 e0       	ldi	r22, 0x01	; 1
    2150:	68 0f       	add	r22, r24
    2152:	83 e0       	ldi	r24, 0x03	; 3
    2154:	f2 db       	rcall	.-2076   	; 0x193a <_ZN9EtherComm11SendCommandEhh>
    2156:	df 91       	pop	r29
    2158:	cf 91       	pop	r28
    215a:	08 95       	ret

0000215c <_ZN5Robot6SetLedEb>:
    215c:	88 23       	and	r24, r24
    215e:	11 f0       	breq	.+4      	; 0x2164 <_ZN5Robot6SetLedEb+0x8>
    2160:	2f 9a       	sbi	0x05, 7	; 5
    2162:	08 95       	ret
    2164:	2f 98       	cbi	0x05, 7	; 5
    2166:	08 95       	ret

00002168 <_ZN5Robot14RegisterDeviceER7ISensor>:
    2168:	fc 01       	movw	r30, r24
    216a:	22 81       	ldd	r18, Z+2	; 0x02
    216c:	30 e0       	ldi	r19, 0x00	; 0
    216e:	f9 01       	movw	r30, r18
    2170:	ee 0f       	add	r30, r30
    2172:	ff 1f       	adc	r31, r31
    2174:	e7 5b       	subi	r30, 0xB7	; 183
    2176:	f9 4f       	sbci	r31, 0xF9	; 249
    2178:	40 81       	ld	r20, Z
    217a:	51 81       	ldd	r21, Z+1	; 0x01
    217c:	45 2b       	or	r20, r21
    217e:	39 f4       	brne	.+14     	; 0x218e <_ZN5Robot14RegisterDeviceER7ISensor+0x26>
    2180:	22 0f       	add	r18, r18
    2182:	33 1f       	adc	r19, r19
    2184:	f9 01       	movw	r30, r18
    2186:	e7 5b       	subi	r30, 0xB7	; 183
    2188:	f9 4f       	sbci	r31, 0xF9	; 249
    218a:	91 83       	std	Z+1, r25	; 0x01
    218c:	80 83       	st	Z, r24
    218e:	08 95       	ret

00002190 <_ZN5Robot5beginEv>:
bool Robot::ReadTestBtn(){
	return !((TestBtnPinPort & TestBtnPin) > 0);
}

bool Robot::begin(){
	LedDDR |= LedPin;
    2190:	27 9a       	sbi	0x04, 7	; 4
IDevice* Robot::devices[NUM_DEVICES];

DigitalSensor BtnTest(0, TestBtnDDR, TestBtnPort, TestBtnPinPort, TestBtnPin);

bool Robot::RegisterDevices(){
	RegisterDevice(BtnTest); //TODO return if successful
    2192:	81 e4       	ldi	r24, 0x41	; 65
    2194:	96 e0       	ldi	r25, 0x06	; 6
    2196:	e8 df       	rcall	.-48     	; 0x2168 <_ZN5Robot14RegisterDeviceER7ISensor>
}

bool Robot::begin(){
	LedDDR |= LedPin;
	return RegisterDevices();
}
    2198:	81 e0       	ldi	r24, 0x01	; 1
    219a:	08 95       	ret

0000219c <_GLOBAL__sub_I__ZN5Robot7devicesE>:
	}
	
	virtual void Update(const uint8_t* data, uint8_t len) = 0;
	
protected:
	IDevice(uint8_t ID) : id(ID){
    219c:	e1 e4       	ldi	r30, 0x41	; 65
    219e:	f6 e0       	ldi	r31, 0x06	; 6
    21a0:	12 82       	std	Z+2, r1	; 0x02
				//}
			}
		}
	
	protected:
		ISensor(uint8_t ID, uint8_t type) : IDevice(ID), sensorType(type) {
    21a2:	81 e0       	ldi	r24, 0x01	; 1
    21a4:	83 83       	std	Z+3, r24	; 0x03

#include "../ISensor.h"

class DigitalSensor : public ISensor{
public:
	DigitalSensor(uint8_t ID, Register& DDRPort, Register& PortPort, Register& PinPort, uint8_t Pin, bool Inversed = true) : ISensor(ID, SENSOR_TYPE_DIGITAL), pin(Pin), pinPort(&PinPort), inversed(Inversed) {
    21a6:	23 ed       	ldi	r18, 0xD3	; 211
    21a8:	32 e0       	ldi	r19, 0x02	; 2
    21aa:	31 83       	std	Z+1, r19	; 0x01
    21ac:	20 83       	st	Z, r18
    21ae:	84 83       	std	Z+4, r24	; 0x04
    21b0:	2f e2       	ldi	r18, 0x2F	; 47
    21b2:	30 e0       	ldi	r19, 0x00	; 0
    21b4:	36 83       	std	Z+6, r19	; 0x06
    21b6:	25 83       	std	Z+5, r18	; 0x05
    21b8:	87 83       	std	Z+7, r24	; 0x07
		DDRPort &= ~pin; //Enable input
    21ba:	80 98       	cbi	0x10, 0	; 16
		PortPort |= pin; //Enable pullup
    21bc:	88 9a       	sbi	0x11, 0	; 17
    21be:	08 95       	ret

000021c0 <_ZN5Print5writeEPKhj>:
}

uint16_t Print::print(char c)
{
  return write(c);
}
    21c0:	cf 92       	push	r12
    21c2:	df 92       	push	r13
    21c4:	ef 92       	push	r14
    21c6:	ff 92       	push	r15
    21c8:	0f 93       	push	r16
    21ca:	1f 93       	push	r17
    21cc:	cf 93       	push	r28
    21ce:	df 93       	push	r29
    21d0:	41 15       	cp	r20, r1
    21d2:	51 05       	cpc	r21, r1
    21d4:	c1 f0       	breq	.+48     	; 0x2206 <__stack+0x7>
    21d6:	6a 01       	movw	r12, r20
    21d8:	8c 01       	movw	r16, r24
    21da:	e6 2e       	mov	r14, r22
    21dc:	f7 2e       	mov	r15, r23
    21de:	c0 e0       	ldi	r28, 0x00	; 0
    21e0:	d0 e0       	ldi	r29, 0x00	; 0
    21e2:	d7 01       	movw	r26, r14
    21e4:	6d 91       	ld	r22, X+
    21e6:	7d 01       	movw	r14, r26
    21e8:	d8 01       	movw	r26, r16
    21ea:	ed 91       	ld	r30, X+
    21ec:	fc 91       	ld	r31, X
    21ee:	01 90       	ld	r0, Z+
    21f0:	f0 81       	ld	r31, Z
    21f2:	e0 2d       	mov	r30, r0
    21f4:	c8 01       	movw	r24, r16
    21f6:	19 95       	eicall
    21f8:	89 2b       	or	r24, r25
    21fa:	39 f0       	breq	.+14     	; 0x220a <__stack+0xb>
    21fc:	21 96       	adiw	r28, 0x01	; 1
    21fe:	cc 16       	cp	r12, r28
    2200:	dd 06       	cpc	r13, r29
    2202:	79 f7       	brne	.-34     	; 0x21e2 <_ZN5Print5writeEPKhj+0x22>
    2204:	02 c0       	rjmp	.+4      	; 0x220a <__stack+0xb>
    2206:	c0 e0       	ldi	r28, 0x00	; 0
    2208:	d0 e0       	ldi	r29, 0x00	; 0
    220a:	ce 01       	movw	r24, r28
    220c:	df 91       	pop	r29
    220e:	cf 91       	pop	r28
    2210:	1f 91       	pop	r17
    2212:	0f 91       	pop	r16
    2214:	ff 90       	pop	r15
    2216:	ef 90       	pop	r14
    2218:	df 90       	pop	r13
    221a:	cf 90       	pop	r12
    221c:	08 95       	ret

0000221e <_ZN5Print5printEPKc>:
    221e:	61 15       	cp	r22, r1
    2220:	71 05       	cpc	r23, r1
    2222:	81 f0       	breq	.+32     	; 0x2244 <_ZN5Print5printEPKc+0x26>
    2224:	fb 01       	movw	r30, r22
    2226:	01 90       	ld	r0, Z+
    2228:	00 20       	and	r0, r0
    222a:	e9 f7       	brne	.-6      	; 0x2226 <_ZN5Print5printEPKc+0x8>
    222c:	31 97       	sbiw	r30, 0x01	; 1
    222e:	af 01       	movw	r20, r30
    2230:	46 1b       	sub	r20, r22
    2232:	57 0b       	sbc	r21, r23
    2234:	dc 01       	movw	r26, r24
    2236:	ed 91       	ld	r30, X+
    2238:	fc 91       	ld	r31, X
    223a:	02 80       	ldd	r0, Z+2	; 0x02
    223c:	f3 81       	ldd	r31, Z+3	; 0x03
    223e:	e0 2d       	mov	r30, r0
    2240:	19 95       	eicall
    2242:	08 95       	ret
    2244:	80 e0       	ldi	r24, 0x00	; 0
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	08 95       	ret

0000224a <_ZN5Print7printlnEv>:
  //void clearWriteError() { setWriteError(0); }
  
  virtual uint16_t write(uint8_t) = 0;
  uint16_t write(const char *str) {
	  if (str == NULL) return 0;
	  return write((const uint8_t *)str, strlen(str));
    224a:	dc 01       	movw	r26, r24
    224c:	ed 91       	ld	r30, X+
    224e:	fc 91       	ld	r31, X
    2250:	02 80       	ldd	r0, Z+2	; 0x02
    2252:	f3 81       	ldd	r31, Z+3	; 0x03
    2254:	e0 2d       	mov	r30, r0
    2256:	42 e0       	ldi	r20, 0x02	; 2
    2258:	50 e0       	ldi	r21, 0x00	; 0
    225a:	69 ed       	ldi	r22, 0xD9	; 217
    225c:	72 e0       	ldi	r23, 0x02	; 2
    225e:	19 95       	eicall
}
*/
uint16_t Print::println(void)
{
  return write("\r\n");
}
    2260:	08 95       	ret

00002262 <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}
*/
uint16_t Print::println(const char c[])
{
    2262:	0f 93       	push	r16
    2264:	1f 93       	push	r17
    2266:	cf 93       	push	r28
    2268:	df 93       	push	r29
    226a:	ec 01       	movw	r28, r24
  uint16_t n = print(c);
    226c:	d8 df       	rcall	.-80     	; 0x221e <_ZN5Print5printEPKc>
    226e:	8c 01       	movw	r16, r24
  n += println();
    2270:	ce 01       	movw	r24, r28
    2272:	eb df       	rcall	.-42     	; 0x224a <_ZN5Print7printlnEv>
  return n;
}
    2274:	80 0f       	add	r24, r16
    2276:	91 1f       	adc	r25, r17
    2278:	df 91       	pop	r29
    227a:	cf 91       	pop	r28
    227c:	1f 91       	pop	r17
    227e:	0f 91       	pop	r16
    2280:	08 95       	ret

00002282 <__udivmodsi4>:
    2282:	a1 e2       	ldi	r26, 0x21	; 33
    2284:	1a 2e       	mov	r1, r26
    2286:	aa 1b       	sub	r26, r26
    2288:	bb 1b       	sub	r27, r27
    228a:	fd 01       	movw	r30, r26
    228c:	0d c0       	rjmp	.+26     	; 0x22a8 <__udivmodsi4_ep>

0000228e <__udivmodsi4_loop>:
    228e:	aa 1f       	adc	r26, r26
    2290:	bb 1f       	adc	r27, r27
    2292:	ee 1f       	adc	r30, r30
    2294:	ff 1f       	adc	r31, r31
    2296:	a2 17       	cp	r26, r18
    2298:	b3 07       	cpc	r27, r19
    229a:	e4 07       	cpc	r30, r20
    229c:	f5 07       	cpc	r31, r21
    229e:	20 f0       	brcs	.+8      	; 0x22a8 <__udivmodsi4_ep>
    22a0:	a2 1b       	sub	r26, r18
    22a2:	b3 0b       	sbc	r27, r19
    22a4:	e4 0b       	sbc	r30, r20
    22a6:	f5 0b       	sbc	r31, r21

000022a8 <__udivmodsi4_ep>:
    22a8:	66 1f       	adc	r22, r22
    22aa:	77 1f       	adc	r23, r23
    22ac:	88 1f       	adc	r24, r24
    22ae:	99 1f       	adc	r25, r25
    22b0:	1a 94       	dec	r1
    22b2:	69 f7       	brne	.-38     	; 0x228e <__udivmodsi4_loop>
    22b4:	60 95       	com	r22
    22b6:	70 95       	com	r23
    22b8:	80 95       	com	r24
    22ba:	90 95       	com	r25
    22bc:	9b 01       	movw	r18, r22
    22be:	ac 01       	movw	r20, r24
    22c0:	bd 01       	movw	r22, r26
    22c2:	cf 01       	movw	r24, r30
    22c4:	08 95       	ret

000022c6 <__umulhisi3>:
    22c6:	a2 9f       	mul	r26, r18
    22c8:	b0 01       	movw	r22, r0
    22ca:	b3 9f       	mul	r27, r19
    22cc:	c0 01       	movw	r24, r0
    22ce:	a3 9f       	mul	r26, r19
    22d0:	70 0d       	add	r23, r0
    22d2:	81 1d       	adc	r24, r1
    22d4:	11 24       	eor	r1, r1
    22d6:	91 1d       	adc	r25, r1
    22d8:	b2 9f       	mul	r27, r18
    22da:	70 0d       	add	r23, r0
    22dc:	81 1d       	adc	r24, r1
    22de:	11 24       	eor	r1, r1
    22e0:	91 1d       	adc	r25, r1
    22e2:	08 95       	ret

000022e4 <__muluhisi3>:
    22e4:	f0 df       	rcall	.-32     	; 0x22c6 <__umulhisi3>
    22e6:	a5 9f       	mul	r26, r21
    22e8:	90 0d       	add	r25, r0
    22ea:	b4 9f       	mul	r27, r20
    22ec:	90 0d       	add	r25, r0
    22ee:	a4 9f       	mul	r26, r20
    22f0:	80 0d       	add	r24, r0
    22f2:	91 1d       	adc	r25, r1
    22f4:	11 24       	eor	r1, r1
    22f6:	08 95       	ret

000022f8 <__tablejump2__>:
    22f8:	ee 0f       	add	r30, r30
    22fa:	ff 1f       	adc	r31, r31
    22fc:	88 1f       	adc	r24, r24
    22fe:	8b bf       	out	0x3b, r24	; 59
    2300:	07 90       	elpm	r0, Z+
    2302:	f6 91       	elpm	r31, Z
    2304:	e0 2d       	mov	r30, r0
    2306:	19 94       	eijmp

00002308 <memcpy_P>:
    2308:	fb 01       	movw	r30, r22
    230a:	dc 01       	movw	r26, r24
    230c:	02 c0       	rjmp	.+4      	; 0x2312 <memcpy_P+0xa>
    230e:	05 90       	lpm	r0, Z+
    2310:	0d 92       	st	X+, r0
    2312:	41 50       	subi	r20, 0x01	; 1
    2314:	50 40       	sbci	r21, 0x00	; 0
    2316:	d8 f7       	brcc	.-10     	; 0x230e <memcpy_P+0x6>
    2318:	08 95       	ret

0000231a <memcmp>:
    231a:	fb 01       	movw	r30, r22
    231c:	dc 01       	movw	r26, r24
    231e:	04 c0       	rjmp	.+8      	; 0x2328 <memcmp+0xe>
    2320:	8d 91       	ld	r24, X+
    2322:	01 90       	ld	r0, Z+
    2324:	80 19       	sub	r24, r0
    2326:	21 f4       	brne	.+8      	; 0x2330 <memcmp+0x16>
    2328:	41 50       	subi	r20, 0x01	; 1
    232a:	50 40       	sbci	r21, 0x00	; 0
    232c:	c8 f7       	brcc	.-14     	; 0x2320 <memcmp+0x6>
    232e:	88 1b       	sub	r24, r24
    2330:	99 0b       	sbc	r25, r25
    2332:	08 95       	ret

00002334 <_exit>:
    2334:	f8 94       	cli

00002336 <__stop_program>:
    2336:	ff cf       	rjmp	.-2      	; 0x2336 <__stop_program>
