
RovController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f6  00800200  000034a8  0000353c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000034a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000683  008002f6  008002f6  00003632  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003632  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003664  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000a40  00000000  00000000  000036a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001707c  00000000  00000000  000040e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005666  00000000  00000000  0001b160  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005fbb  00000000  00000000  000207c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001ecc  00000000  00000000  00026784  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000063ed  00000000  00000000  00028650  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000a2ea  00000000  00000000  0002ea3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000960  00000000  00000000  00038d27  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	51 c1       	rjmp	.+674    	; 0x2a4 <__ctors_end>
       2:	00 00       	nop
       4:	80 c1       	rjmp	.+768    	; 0x306 <__bad_interrupt>
       6:	00 00       	nop
       8:	7e c1       	rjmp	.+764    	; 0x306 <__bad_interrupt>
       a:	00 00       	nop
       c:	7c c1       	rjmp	.+760    	; 0x306 <__bad_interrupt>
       e:	00 00       	nop
      10:	7a c1       	rjmp	.+756    	; 0x306 <__bad_interrupt>
      12:	00 00       	nop
      14:	78 c1       	rjmp	.+752    	; 0x306 <__bad_interrupt>
      16:	00 00       	nop
      18:	76 c1       	rjmp	.+748    	; 0x306 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	74 c1       	rjmp	.+744    	; 0x306 <__bad_interrupt>
      1e:	00 00       	nop
      20:	72 c1       	rjmp	.+740    	; 0x306 <__bad_interrupt>
      22:	00 00       	nop
      24:	70 c1       	rjmp	.+736    	; 0x306 <__bad_interrupt>
      26:	00 00       	nop
      28:	6e c1       	rjmp	.+732    	; 0x306 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	6c c1       	rjmp	.+728    	; 0x306 <__bad_interrupt>
      2e:	00 00       	nop
      30:	6a c1       	rjmp	.+724    	; 0x306 <__bad_interrupt>
      32:	00 00       	nop
      34:	68 c1       	rjmp	.+720    	; 0x306 <__bad_interrupt>
      36:	00 00       	nop
      38:	66 c1       	rjmp	.+716    	; 0x306 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	64 c1       	rjmp	.+712    	; 0x306 <__bad_interrupt>
      3e:	00 00       	nop
      40:	62 c1       	rjmp	.+708    	; 0x306 <__bad_interrupt>
      42:	00 00       	nop
      44:	60 c1       	rjmp	.+704    	; 0x306 <__bad_interrupt>
      46:	00 00       	nop
      48:	5e c1       	rjmp	.+700    	; 0x306 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	5c c1       	rjmp	.+696    	; 0x306 <__bad_interrupt>
      4e:	00 00       	nop
      50:	5a c1       	rjmp	.+692    	; 0x306 <__bad_interrupt>
      52:	00 00       	nop
      54:	58 c1       	rjmp	.+688    	; 0x306 <__bad_interrupt>
      56:	00 00       	nop
      58:	56 c1       	rjmp	.+684    	; 0x306 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	54 c1       	rjmp	.+680    	; 0x306 <__bad_interrupt>
      5e:	00 00       	nop
      60:	52 c1       	rjmp	.+676    	; 0x306 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 96 0f 	jmp	0x1f2c	; 0x1f2c <__vector_25>
      68:	0c 94 d2 0f 	jmp	0x1fa4	; 0x1fa4 <__vector_26>
      6c:	4c c1       	rjmp	.+664    	; 0x306 <__bad_interrupt>
      6e:	00 00       	nop
      70:	4a c1       	rjmp	.+660    	; 0x306 <__bad_interrupt>
      72:	00 00       	nop
      74:	48 c1       	rjmp	.+656    	; 0x306 <__bad_interrupt>
      76:	00 00       	nop
      78:	46 c1       	rjmp	.+652    	; 0x306 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	44 c1       	rjmp	.+648    	; 0x306 <__bad_interrupt>
      7e:	00 00       	nop
      80:	42 c1       	rjmp	.+644    	; 0x306 <__bad_interrupt>
      82:	00 00       	nop
      84:	40 c1       	rjmp	.+640    	; 0x306 <__bad_interrupt>
      86:	00 00       	nop
      88:	3e c1       	rjmp	.+636    	; 0x306 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	3c c1       	rjmp	.+632    	; 0x306 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 1e 10 	jmp	0x203c	; 0x203c <__vector_36>
      94:	0c 94 5a 10 	jmp	0x20b4	; 0x20b4 <__vector_37>
      98:	36 c1       	rjmp	.+620    	; 0x306 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 7d 13 	jmp	0x26fa	; 0x26fa <__vector_39>
      a0:	32 c1       	rjmp	.+612    	; 0x306 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	30 c1       	rjmp	.+608    	; 0x306 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	2e c1       	rjmp	.+604    	; 0x306 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	2c c1       	rjmp	.+600    	; 0x306 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	2a c1       	rjmp	.+596    	; 0x306 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	28 c1       	rjmp	.+592    	; 0x306 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	26 c1       	rjmp	.+588    	; 0x306 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	24 c1       	rjmp	.+584    	; 0x306 <__bad_interrupt>
      be:	00 00       	nop
      c0:	22 c1       	rjmp	.+580    	; 0x306 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	20 c1       	rjmp	.+576    	; 0x306 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	1e c1       	rjmp	.+572    	; 0x306 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 a6 10 	jmp	0x214c	; 0x214c <__vector_51>
      d0:	0c 94 e2 10 	jmp	0x21c4	; 0x21c4 <__vector_52>
      d4:	18 c1       	rjmp	.+560    	; 0x306 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 2e 11 	jmp	0x225c	; 0x225c <__vector_54>
      dc:	0c 94 6a 11 	jmp	0x22d4	; 0x22d4 <__vector_55>
      e0:	12 c1       	rjmp	.+548    	; 0x306 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	83 14       	cp	r8, r3
      e6:	86 14       	cp	r8, r6
      e8:	86 14       	cp	r8, r6
      ea:	86 14       	cp	r8, r6
      ec:	86 14       	cp	r8, r6
      ee:	86 14       	cp	r8, r6
      f0:	86 14       	cp	r8, r6
      f2:	86 14       	cp	r8, r6
      f4:	9e 13       	cpse	r25, r30
      f6:	86 14       	cp	r8, r6
      f8:	86 14       	cp	r8, r6
      fa:	86 14       	cp	r8, r6
      fc:	86 14       	cp	r8, r6
      fe:	86 14       	cp	r8, r6
     100:	86 14       	cp	r8, r6
     102:	86 14       	cp	r8, r6
     104:	9e 13       	cpse	r25, r30
     106:	86 14       	cp	r8, r6
     108:	86 14       	cp	r8, r6
     10a:	86 14       	cp	r8, r6
     10c:	86 14       	cp	r8, r6
     10e:	86 14       	cp	r8, r6
     110:	86 14       	cp	r8, r6
     112:	86 14       	cp	r8, r6
     114:	a6 13       	cpse	r26, r22
     116:	86 14       	cp	r8, r6
     118:	86 14       	cp	r8, r6
     11a:	86 14       	cp	r8, r6
     11c:	86 14       	cp	r8, r6
     11e:	86 14       	cp	r8, r6
     120:	86 14       	cp	r8, r6
     122:	86 14       	cp	r8, r6
     124:	cb 13       	cpse	r28, r27
     126:	86 14       	cp	r8, r6
     128:	86 14       	cp	r8, r6
     12a:	86 14       	cp	r8, r6
     12c:	86 14       	cp	r8, r6
     12e:	86 14       	cp	r8, r6
     130:	86 14       	cp	r8, r6
     132:	86 14       	cp	r8, r6
     134:	a6 13       	cpse	r26, r22
     136:	86 14       	cp	r8, r6
     138:	86 14       	cp	r8, r6
     13a:	86 14       	cp	r8, r6
     13c:	86 14       	cp	r8, r6
     13e:	86 14       	cp	r8, r6
     140:	86 14       	cp	r8, r6
     142:	86 14       	cp	r8, r6
     144:	d0 13       	cpse	r29, r16
     146:	86 14       	cp	r8, r6
     148:	86 14       	cp	r8, r6
     14a:	86 14       	cp	r8, r6
     14c:	86 14       	cp	r8, r6
     14e:	86 14       	cp	r8, r6
     150:	86 14       	cp	r8, r6
     152:	86 14       	cp	r8, r6
     154:	d5 13       	cpse	r29, r21
     156:	86 14       	cp	r8, r6
     158:	86 14       	cp	r8, r6
     15a:	86 14       	cp	r8, r6
     15c:	86 14       	cp	r8, r6
     15e:	86 14       	cp	r8, r6
     160:	86 14       	cp	r8, r6
     162:	86 14       	cp	r8, r6
     164:	e6 13       	cpse	r30, r22
     166:	86 14       	cp	r8, r6
     168:	86 14       	cp	r8, r6
     16a:	86 14       	cp	r8, r6
     16c:	86 14       	cp	r8, r6
     16e:	86 14       	cp	r8, r6
     170:	86 14       	cp	r8, r6
     172:	86 14       	cp	r8, r6
     174:	0f 14       	cp	r0, r15
     176:	86 14       	cp	r8, r6
     178:	86 14       	cp	r8, r6
     17a:	86 14       	cp	r8, r6
     17c:	86 14       	cp	r8, r6
     17e:	86 14       	cp	r8, r6
     180:	86 14       	cp	r8, r6
     182:	86 14       	cp	r8, r6
     184:	da 13       	cpse	r29, r26
     186:	86 14       	cp	r8, r6
     188:	86 14       	cp	r8, r6
     18a:	86 14       	cp	r8, r6
     18c:	86 14       	cp	r8, r6
     18e:	86 14       	cp	r8, r6
     190:	86 14       	cp	r8, r6
     192:	86 14       	cp	r8, r6
     194:	f4 13       	cpse	r31, r20
     196:	86 14       	cp	r8, r6
     198:	86 14       	cp	r8, r6
     19a:	86 14       	cp	r8, r6
     19c:	86 14       	cp	r8, r6
     19e:	86 14       	cp	r8, r6
     1a0:	86 14       	cp	r8, r6
     1a2:	86 14       	cp	r8, r6
     1a4:	11 14       	cp	r1, r1
     1a6:	86 14       	cp	r8, r6
     1a8:	86 14       	cp	r8, r6
     1aa:	86 14       	cp	r8, r6
     1ac:	86 14       	cp	r8, r6
     1ae:	86 14       	cp	r8, r6
     1b0:	86 14       	cp	r8, r6
     1b2:	86 14       	cp	r8, r6
     1b4:	11 14       	cp	r1, r1
     1b6:	86 14       	cp	r8, r6
     1b8:	86 14       	cp	r8, r6
     1ba:	86 14       	cp	r8, r6
     1bc:	86 14       	cp	r8, r6
     1be:	86 14       	cp	r8, r6
     1c0:	86 14       	cp	r8, r6
     1c2:	86 14       	cp	r8, r6
     1c4:	11 14       	cp	r1, r1
     1c6:	86 14       	cp	r8, r6
     1c8:	86 14       	cp	r8, r6
     1ca:	86 14       	cp	r8, r6
     1cc:	86 14       	cp	r8, r6
     1ce:	86 14       	cp	r8, r6
     1d0:	86 14       	cp	r8, r6
     1d2:	86 14       	cp	r8, r6
     1d4:	11 14       	cp	r1, r1
     1d6:	86 14       	cp	r8, r6
     1d8:	86 14       	cp	r8, r6
     1da:	86 14       	cp	r8, r6
     1dc:	86 14       	cp	r8, r6
     1de:	86 14       	cp	r8, r6
     1e0:	86 14       	cp	r8, r6
     1e2:	86 14       	cp	r8, r6
     1e4:	1a 14       	cp	r1, r10
     1e6:	86 14       	cp	r8, r6
     1e8:	86 14       	cp	r8, r6
     1ea:	86 14       	cp	r8, r6
     1ec:	86 14       	cp	r8, r6
     1ee:	86 14       	cp	r8, r6
     1f0:	86 14       	cp	r8, r6
     1f2:	86 14       	cp	r8, r6
     1f4:	4a 14       	cp	r4, r10
     1f6:	86 14       	cp	r8, r6
     1f8:	86 14       	cp	r8, r6
     1fa:	86 14       	cp	r8, r6
     1fc:	86 14       	cp	r8, r6
     1fe:	86 14       	cp	r8, r6
     200:	86 14       	cp	r8, r6
     202:	86 14       	cp	r8, r6
     204:	1a 14       	cp	r1, r10
     206:	86 14       	cp	r8, r6
     208:	86 14       	cp	r8, r6
     20a:	86 14       	cp	r8, r6
     20c:	86 14       	cp	r8, r6
     20e:	86 14       	cp	r8, r6
     210:	86 14       	cp	r8, r6
     212:	86 14       	cp	r8, r6
     214:	4a 14       	cp	r4, r10
     216:	86 14       	cp	r8, r6
     218:	86 14       	cp	r8, r6
     21a:	86 14       	cp	r8, r6
     21c:	86 14       	cp	r8, r6
     21e:	86 14       	cp	r8, r6
     220:	86 14       	cp	r8, r6
     222:	86 14       	cp	r8, r6
     224:	32 14       	cp	r3, r2
     226:	86 14       	cp	r8, r6
     228:	86 14       	cp	r8, r6
     22a:	86 14       	cp	r8, r6
     22c:	86 14       	cp	r8, r6
     22e:	86 14       	cp	r8, r6
     230:	86 14       	cp	r8, r6
     232:	86 14       	cp	r8, r6
     234:	4e 14       	cp	r4, r14
     236:	86 14       	cp	r8, r6
     238:	86 14       	cp	r8, r6
     23a:	86 14       	cp	r8, r6
     23c:	86 14       	cp	r8, r6
     23e:	86 14       	cp	r8, r6
     240:	86 14       	cp	r8, r6
     242:	86 14       	cp	r8, r6
     244:	4e 14       	cp	r4, r14
     246:	86 14       	cp	r8, r6
     248:	86 14       	cp	r8, r6
     24a:	86 14       	cp	r8, r6
     24c:	86 14       	cp	r8, r6
     24e:	86 14       	cp	r8, r6
     250:	86 14       	cp	r8, r6
     252:	86 14       	cp	r8, r6
     254:	63 14       	cp	r6, r3
     256:	86 14       	cp	r8, r6
     258:	86 14       	cp	r8, r6
     25a:	86 14       	cp	r8, r6
     25c:	86 14       	cp	r8, r6
     25e:	86 14       	cp	r8, r6
     260:	86 14       	cp	r8, r6
     262:	86 14       	cp	r8, r6
     264:	7d 14       	cp	r7, r13
     266:	86 14       	cp	r8, r6
     268:	86 14       	cp	r8, r6
     26a:	86 14       	cp	r8, r6
     26c:	86 14       	cp	r8, r6
     26e:	86 14       	cp	r8, r6
     270:	86 14       	cp	r8, r6
     272:	86 14       	cp	r8, r6
     274:	7d 14       	cp	r7, r13

00000276 <__trampolines_end>:
     276:	45 00       	.word	0x0045	; ????
     278:	00 82       	st	Z, r0
     27a:	00 00       	nop
     27c:	40 00       	.word	0x0040	; ????
     27e:	20 00       	Address 0x0000027e is out of bounds.
.word	0xffff	; ????

0000027f <_ZL9arpreqhdr>:
     27f:	00 01 08 00 06 04 00 01 00                          .........

00000288 <__ctors_start>:
     288:	35 05       	cpc	r19, r5
     28a:	3f 0c       	add	r3, r15
     28c:	fb 0f       	add	r31, r27
     28e:	83 10       	cpse	r8, r3
     290:	0b 11       	cpse	r16, r11
     292:	93 11       	cpse	r25, r3
     294:	e0 11       	cpse	r30, r0
     296:	02 12       	cpse	r0, r18
     298:	24 12       	cpse	r2, r20
     29a:	46 12       	cpse	r4, r22
     29c:	ed 15       	cp	r30, r13
     29e:	63 16       	cp	r6, r19
     2a0:	74 17       	cp	r23, r20
     2a2:	7c 17       	cp	r23, r28

000002a4 <__ctors_end>:
     2a4:	11 24       	eor	r1, r1
     2a6:	1f be       	out	0x3f, r1	; 63
     2a8:	cf ef       	ldi	r28, 0xFF	; 255
     2aa:	d1 e2       	ldi	r29, 0x21	; 33
     2ac:	de bf       	out	0x3e, r29	; 62
     2ae:	cd bf       	out	0x3d, r28	; 61
     2b0:	00 e0       	ldi	r16, 0x00	; 0
     2b2:	0c bf       	out	0x3c, r16	; 60

000002b4 <__do_copy_data>:
     2b4:	12 e0       	ldi	r17, 0x02	; 2
     2b6:	a0 e0       	ldi	r26, 0x00	; 0
     2b8:	b2 e0       	ldi	r27, 0x02	; 2
     2ba:	e8 ea       	ldi	r30, 0xA8	; 168
     2bc:	f4 e3       	ldi	r31, 0x34	; 52
     2be:	00 e0       	ldi	r16, 0x00	; 0
     2c0:	0b bf       	out	0x3b, r16	; 59
     2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <__do_copy_data+0x14>
     2c4:	07 90       	elpm	r0, Z+
     2c6:	0d 92       	st	X+, r0
     2c8:	a6 3f       	cpi	r26, 0xF6	; 246
     2ca:	b1 07       	cpc	r27, r17
     2cc:	d9 f7       	brne	.-10     	; 0x2c4 <__do_copy_data+0x10>

000002ce <__do_clear_bss>:
     2ce:	29 e0       	ldi	r18, 0x09	; 9
     2d0:	a6 ef       	ldi	r26, 0xF6	; 246
     2d2:	b2 e0       	ldi	r27, 0x02	; 2
     2d4:	01 c0       	rjmp	.+2      	; 0x2d8 <.do_clear_bss_start>

000002d6 <.do_clear_bss_loop>:
     2d6:	1d 92       	st	X+, r1

000002d8 <.do_clear_bss_start>:
     2d8:	a9 37       	cpi	r26, 0x79	; 121
     2da:	b2 07       	cpc	r27, r18
     2dc:	e1 f7       	brne	.-8      	; 0x2d6 <.do_clear_bss_loop>

000002de <__do_global_ctors>:
     2de:	11 e0       	ldi	r17, 0x01	; 1
     2e0:	c2 e5       	ldi	r28, 0x52	; 82
     2e2:	d1 e0       	ldi	r29, 0x01	; 1
     2e4:	00 e0       	ldi	r16, 0x00	; 0
     2e6:	06 c0       	rjmp	.+12     	; 0x2f4 <__do_global_ctors+0x16>
     2e8:	21 97       	sbiw	r28, 0x01	; 1
     2ea:	01 09       	sbc	r16, r1
     2ec:	80 2f       	mov	r24, r16
     2ee:	fe 01       	movw	r30, r28
     2f0:	0e 94 25 1a 	call	0x344a	; 0x344a <__tablejump2__>
     2f4:	c4 34       	cpi	r28, 0x44	; 68
     2f6:	d1 07       	cpc	r29, r17
     2f8:	80 e0       	ldi	r24, 0x00	; 0
     2fa:	08 07       	cpc	r16, r24
     2fc:	a9 f7       	brne	.-22     	; 0x2e8 <__do_global_ctors+0xa>
     2fe:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <main>
     302:	0c 94 52 1a 	jmp	0x34a4	; 0x34a4 <_exit>

00000306 <__bad_interrupt>:
     306:	7c ce       	rjmp	.-776    	; 0x0 <__vectors>

00000308 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:

    setMode(lastMode);
    return true;
  }
  return false;
}
     308:	08 95       	ret

0000030a <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>:
     30a:	0f 93       	push	r16
     30c:	1f 93       	push	r17
     30e:	cf 93       	push	r28
     310:	df 93       	push	r29
     312:	8c 01       	movw	r16, r24
     314:	eb 01       	movw	r28, r22
     316:	88 e2       	ldi	r24, 0x28	; 40
     318:	fb 01       	movw	r30, r22
     31a:	11 92       	st	Z+, r1
     31c:	8a 95       	dec	r24
     31e:	e9 f7       	brne	.-6      	; 0x31a <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x10>
     320:	4b e0       	ldi	r20, 0x0B	; 11
     322:	50 e0       	ldi	r21, 0x00	; 0
     324:	64 e1       	ldi	r22, 0x14	; 20
     326:	72 e0       	ldi	r23, 0x02	; 2
     328:	ce 01       	movw	r24, r28
     32a:	0e 94 43 1a 	call	0x3486	; 0x3486 <strncpy>
     32e:	1b 86       	std	Y+11, r1	; 0x0b
     330:	81 e0       	ldi	r24, 0x01	; 1
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	a0 e0       	ldi	r26, 0x00	; 0
     336:	b0 e0       	ldi	r27, 0x00	; 0
     338:	8c 87       	std	Y+12, r24	; 0x0c
     33a:	9d 87       	std	Y+13, r25	; 0x0d
     33c:	ae 87       	std	Y+14, r26	; 0x0e
     33e:	bf 87       	std	Y+15, r27	; 0x0f
     340:	f8 01       	movw	r30, r16
     342:	86 81       	ldd	r24, Z+6	; 0x06
     344:	97 81       	ldd	r25, Z+7	; 0x07
     346:	a0 85       	ldd	r26, Z+8	; 0x08
     348:	b1 85       	ldd	r27, Z+9	; 0x09
     34a:	88 8b       	std	Y+16, r24	; 0x10
     34c:	99 8b       	std	Y+17, r25	; 0x11
     34e:	aa 8b       	std	Y+18, r26	; 0x12
     350:	bb 8b       	std	Y+19, r27	; 0x13
     352:	83 e0       	ldi	r24, 0x03	; 3
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	a0 e0       	ldi	r26, 0x00	; 0
     358:	b0 e0       	ldi	r27, 0x00	; 0
     35a:	8c 8b       	std	Y+20, r24	; 0x14
     35c:	9d 8b       	std	Y+21, r25	; 0x15
     35e:	ae 8b       	std	Y+22, r26	; 0x16
     360:	bf 8b       	std	Y+23, r27	; 0x17
     362:	1c a2       	std	Y+36, r1	; 0x24
     364:	1d a2       	std	Y+37, r1	; 0x25
     366:	1e a2       	std	Y+38, r1	; 0x26
     368:	1f a2       	std	Y+39, r1	; 0x27
     36a:	18 8e       	std	Y+24, r1	; 0x18
     36c:	19 8e       	std	Y+25, r1	; 0x19
     36e:	1a 8e       	std	Y+26, r1	; 0x1a
     370:	1b 8e       	std	Y+27, r1	; 0x1b
     372:	1c 8e       	std	Y+28, r1	; 0x1c
     374:	1d 8e       	std	Y+29, r1	; 0x1d
     376:	1e 8e       	std	Y+30, r1	; 0x1e
     378:	1f 8e       	std	Y+31, r1	; 0x1f
     37a:	8a e0       	ldi	r24, 0x0A	; 10
     37c:	97 ed       	ldi	r25, 0xD7	; 215
     37e:	a3 e2       	ldi	r26, 0x23	; 35
     380:	bc e3       	ldi	r27, 0x3C	; 60
     382:	88 a3       	std	Y+32, r24	; 0x20
     384:	99 a3       	std	Y+33, r25	; 0x21
     386:	aa a3       	std	Y+34, r26	; 0x22
     388:	bb a3       	std	Y+35, r27	; 0x23
     38a:	df 91       	pop	r29
     38c:	cf 91       	pop	r28
     38e:	1f 91       	pop	r17
     390:	0f 91       	pop	r16
     392:	08 95       	ret

00000394 <_ZN15Adafruit_BNO055C1ElhP7TwoWire>:
     394:	0f 93       	push	r16
     396:	1f 93       	push	r17
     398:	fc 01       	movw	r30, r24
     39a:	8f e1       	ldi	r24, 0x1F	; 31
     39c:	92 e0       	ldi	r25, 0x02	; 2
     39e:	91 83       	std	Z+1, r25	; 0x01
     3a0:	80 83       	st	Z, r24
     3a2:	46 83       	std	Z+6, r20	; 0x06
     3a4:	57 83       	std	Z+7, r21	; 0x07
     3a6:	60 87       	std	Z+8, r22	; 0x08
     3a8:	71 87       	std	Z+9, r23	; 0x09
     3aa:	23 83       	std	Z+3, r18	; 0x03
     3ac:	15 83       	std	Z+5, r17	; 0x05
     3ae:	04 83       	std	Z+4, r16	; 0x04
     3b0:	1f 91       	pop	r17
     3b2:	0f 91       	pop	r16
     3b4:	08 95       	ret

000003b6 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>:
     3b6:	0f 93       	push	r16
     3b8:	1f 93       	push	r17
     3ba:	cf 93       	push	r28
     3bc:	df 93       	push	r29
     3be:	ec 01       	movw	r28, r24
     3c0:	06 2f       	mov	r16, r22
     3c2:	14 2f       	mov	r17, r20
     3c4:	6b 81       	ldd	r22, Y+3	; 0x03
     3c6:	8c 81       	ldd	r24, Y+4	; 0x04
     3c8:	9d 81       	ldd	r25, Y+5	; 0x05
     3ca:	0e 94 66 15 	call	0x2acc	; 0x2acc <_ZN7TwoWire17beginTransmissionEh>
     3ce:	8c 81       	ldd	r24, Y+4	; 0x04
     3d0:	9d 81       	ldd	r25, Y+5	; 0x05
     3d2:	dc 01       	movw	r26, r24
     3d4:	ed 91       	ld	r30, X+
     3d6:	fc 91       	ld	r31, X
     3d8:	01 90       	ld	r0, Z+
     3da:	f0 81       	ld	r31, Z
     3dc:	e0 2d       	mov	r30, r0
     3de:	60 2f       	mov	r22, r16
     3e0:	19 95       	eicall
     3e2:	8c 81       	ldd	r24, Y+4	; 0x04
     3e4:	9d 81       	ldd	r25, Y+5	; 0x05
     3e6:	dc 01       	movw	r26, r24
     3e8:	ed 91       	ld	r30, X+
     3ea:	fc 91       	ld	r31, X
     3ec:	01 90       	ld	r0, Z+
     3ee:	f0 81       	ld	r31, Z
     3f0:	e0 2d       	mov	r30, r0
     3f2:	61 2f       	mov	r22, r17
     3f4:	19 95       	eicall
     3f6:	8c 81       	ldd	r24, Y+4	; 0x04
     3f8:	9d 81       	ldd	r25, Y+5	; 0x05
     3fa:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <_ZN7TwoWire15endTransmissionEv>
     3fe:	81 e0       	ldi	r24, 0x01	; 1
     400:	df 91       	pop	r29
     402:	cf 91       	pop	r28
     404:	1f 91       	pop	r17
     406:	0f 91       	pop	r16
     408:	08 95       	ret

0000040a <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>:
     40a:	46 2f       	mov	r20, r22
     40c:	fc 01       	movw	r30, r24
     40e:	62 87       	std	Z+10, r22	; 0x0a
     410:	6d e3       	ldi	r22, 0x3D	; 61
     412:	d1 df       	rcall	.-94     	; 0x3b6 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     414:	ff ef       	ldi	r31, 0xFF	; 255
     416:	26 e7       	ldi	r18, 0x76	; 118
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	f1 50       	subi	r31, 0x01	; 1
     41c:	20 40       	sbci	r18, 0x00	; 0
     41e:	80 40       	sbci	r24, 0x00	; 0
     420:	e1 f7       	brne	.-8      	; 0x41a <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE+0x10>
     422:	00 c0       	rjmp	.+0      	; 0x424 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE+0x1a>
     424:	00 00       	nop
     426:	08 95       	ret

00000428 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>:
     428:	1f 93       	push	r17
     42a:	cf 93       	push	r28
     42c:	df 93       	push	r29
     42e:	ec 01       	movw	r28, r24
     430:	16 2f       	mov	r17, r22
     432:	6b 81       	ldd	r22, Y+3	; 0x03
     434:	8c 81       	ldd	r24, Y+4	; 0x04
     436:	9d 81       	ldd	r25, Y+5	; 0x05
     438:	0e 94 66 15 	call	0x2acc	; 0x2acc <_ZN7TwoWire17beginTransmissionEh>
     43c:	8c 81       	ldd	r24, Y+4	; 0x04
     43e:	9d 81       	ldd	r25, Y+5	; 0x05
     440:	dc 01       	movw	r26, r24
     442:	ed 91       	ld	r30, X+
     444:	fc 91       	ld	r31, X
     446:	01 90       	ld	r0, Z+
     448:	f0 81       	ld	r31, Z
     44a:	e0 2d       	mov	r30, r0
     44c:	61 2f       	mov	r22, r17
     44e:	19 95       	eicall
     450:	8c 81       	ldd	r24, Y+4	; 0x04
     452:	9d 81       	ldd	r25, Y+5	; 0x05
     454:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <_ZN7TwoWire15endTransmissionEv>
     458:	41 e0       	ldi	r20, 0x01	; 1
     45a:	6b 81       	ldd	r22, Y+3	; 0x03
     45c:	8c 81       	ldd	r24, Y+4	; 0x04
     45e:	9d 81       	ldd	r25, Y+5	; 0x05
     460:	0e 94 e7 15 	call	0x2bce	; 0x2bce <_ZN7TwoWire11requestFromEhh>
     464:	8c 81       	ldd	r24, Y+4	; 0x04
     466:	9d 81       	ldd	r25, Y+5	; 0x05
     468:	dc 01       	movw	r26, r24
     46a:	ed 91       	ld	r30, X+
     46c:	fc 91       	ld	r31, X
     46e:	02 84       	ldd	r0, Z+10	; 0x0a
     470:	f3 85       	ldd	r31, Z+11	; 0x0b
     472:	e0 2d       	mov	r30, r0
     474:	19 95       	eicall
     476:	df 91       	pop	r29
     478:	cf 91       	pop	r28
     47a:	1f 91       	pop	r17
     47c:	08 95       	ret

0000047e <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>:
     47e:	1f 93       	push	r17
     480:	cf 93       	push	r28
     482:	df 93       	push	r29
     484:	ec 01       	movw	r28, r24
     486:	16 2f       	mov	r17, r22
     488:	8c 81       	ldd	r24, Y+4	; 0x04
     48a:	9d 81       	ldd	r25, Y+5	; 0x05
     48c:	0e 94 56 15 	call	0x2aac	; 0x2aac <_ZN7TwoWire5beginEv>
     490:	60 e0       	ldi	r22, 0x00	; 0
     492:	ce 01       	movw	r24, r28
     494:	c9 df       	rcall	.-110    	; 0x428 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
     496:	80 3a       	cpi	r24, 0xA0	; 160
     498:	79 f0       	breq	.+30     	; 0x4b8 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x3a>
     49a:	2f ef       	ldi	r18, 0xFF	; 255
     49c:	83 ed       	ldi	r24, 0xD3	; 211
     49e:	90 e3       	ldi	r25, 0x30	; 48
     4a0:	21 50       	subi	r18, 0x01	; 1
     4a2:	80 40       	sbci	r24, 0x00	; 0
     4a4:	90 40       	sbci	r25, 0x00	; 0
     4a6:	e1 f7       	brne	.-8      	; 0x4a0 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x22>
     4a8:	00 c0       	rjmp	.+0      	; 0x4aa <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x2c>
     4aa:	00 00       	nop
     4ac:	60 e0       	ldi	r22, 0x00	; 0
     4ae:	ce 01       	movw	r24, r28
     4b0:	bb df       	rcall	.-138    	; 0x428 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
     4b2:	80 3a       	cpi	r24, 0xA0	; 160
     4b4:	09 f0       	breq	.+2      	; 0x4b8 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x3a>
     4b6:	4b c0       	rjmp	.+150    	; 0x54e <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xd0>
     4b8:	60 e0       	ldi	r22, 0x00	; 0
     4ba:	ce 01       	movw	r24, r28
     4bc:	a6 df       	rcall	.-180    	; 0x40a <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
     4be:	40 e2       	ldi	r20, 0x20	; 32
     4c0:	6f e3       	ldi	r22, 0x3F	; 63
     4c2:	ce 01       	movw	r24, r28
     4c4:	78 df       	rcall	.-272    	; 0x3b6 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     4c6:	2f ef       	ldi	r18, 0xFF	; 255
     4c8:	86 e7       	ldi	r24, 0x76	; 118
     4ca:	91 e0       	ldi	r25, 0x01	; 1
     4cc:	21 50       	subi	r18, 0x01	; 1
     4ce:	80 40       	sbci	r24, 0x00	; 0
     4d0:	90 40       	sbci	r25, 0x00	; 0
     4d2:	e1 f7       	brne	.-8      	; 0x4cc <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x4e>
     4d4:	00 c0       	rjmp	.+0      	; 0x4d6 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x58>
     4d6:	00 00       	nop
     4d8:	60 e0       	ldi	r22, 0x00	; 0
     4da:	ce 01       	movw	r24, r28
     4dc:	a5 df       	rcall	.-182    	; 0x428 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
     4de:	80 3a       	cpi	r24, 0xA0	; 160
     4e0:	39 f0       	breq	.+14     	; 0x4f0 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x72>
     4e2:	8f e3       	ldi	r24, 0x3F	; 63
     4e4:	9c e9       	ldi	r25, 0x9C	; 156
     4e6:	01 97       	sbiw	r24, 0x01	; 1
     4e8:	f1 f7       	brne	.-4      	; 0x4e6 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x68>
     4ea:	00 c0       	rjmp	.+0      	; 0x4ec <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x6e>
     4ec:	00 00       	nop
     4ee:	f4 cf       	rjmp	.-24     	; 0x4d8 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x5a>
     4f0:	9f ef       	ldi	r25, 0xFF	; 255
     4f2:	20 e7       	ldi	r18, 0x70	; 112
     4f4:	82 e0       	ldi	r24, 0x02	; 2
     4f6:	91 50       	subi	r25, 0x01	; 1
     4f8:	20 40       	sbci	r18, 0x00	; 0
     4fa:	80 40       	sbci	r24, 0x00	; 0
     4fc:	e1 f7       	brne	.-8      	; 0x4f6 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x78>
     4fe:	00 c0       	rjmp	.+0      	; 0x500 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x82>
     500:	00 00       	nop
     502:	40 e0       	ldi	r20, 0x00	; 0
     504:	6e e3       	ldi	r22, 0x3E	; 62
     506:	ce 01       	movw	r24, r28
     508:	56 df       	rcall	.-340    	; 0x3b6 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     50a:	8f e3       	ldi	r24, 0x3F	; 63
     50c:	9c e9       	ldi	r25, 0x9C	; 156
     50e:	01 97       	sbiw	r24, 0x01	; 1
     510:	f1 f7       	brne	.-4      	; 0x50e <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x90>
     512:	00 c0       	rjmp	.+0      	; 0x514 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x96>
     514:	00 00       	nop
     516:	40 e0       	ldi	r20, 0x00	; 0
     518:	67 e0       	ldi	r22, 0x07	; 7
     51a:	ce 01       	movw	r24, r28
     51c:	4c df       	rcall	.-360    	; 0x3b6 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     51e:	40 e0       	ldi	r20, 0x00	; 0
     520:	6f e3       	ldi	r22, 0x3F	; 63
     522:	ce 01       	movw	r24, r28
     524:	48 df       	rcall	.-368    	; 0x3b6 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     526:	8f e3       	ldi	r24, 0x3F	; 63
     528:	9c e9       	ldi	r25, 0x9C	; 156
     52a:	01 97       	sbiw	r24, 0x01	; 1
     52c:	f1 f7       	brne	.-4      	; 0x52a <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xac>
     52e:	00 c0       	rjmp	.+0      	; 0x530 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xb2>
     530:	00 00       	nop
     532:	61 2f       	mov	r22, r17
     534:	ce 01       	movw	r24, r28
     536:	69 df       	rcall	.-302    	; 0x40a <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
     538:	9f ef       	ldi	r25, 0xFF	; 255
     53a:	29 ef       	ldi	r18, 0xF9	; 249
     53c:	80 e0       	ldi	r24, 0x00	; 0
     53e:	91 50       	subi	r25, 0x01	; 1
     540:	20 40       	sbci	r18, 0x00	; 0
     542:	80 40       	sbci	r24, 0x00	; 0
     544:	e1 f7       	brne	.-8      	; 0x53e <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xc0>
     546:	00 c0       	rjmp	.+0      	; 0x548 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xca>
     548:	00 00       	nop
     54a:	81 e0       	ldi	r24, 0x01	; 1
     54c:	01 c0       	rjmp	.+2      	; 0x550 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xd2>
     54e:	80 e0       	ldi	r24, 0x00	; 0
     550:	df 91       	pop	r29
     552:	cf 91       	pop	r28
     554:	1f 91       	pop	r17
     556:	08 95       	ret

00000558 <_ZN15Adafruit_BNO0557getTempEv>:
     558:	64 e3       	ldi	r22, 0x34	; 52
     55a:	66 cf       	rjmp	.-308    	; 0x428 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
     55c:	08 95       	ret

0000055e <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>:
     55e:	cf 92       	push	r12
     560:	df 92       	push	r13
     562:	ef 92       	push	r14
     564:	ff 92       	push	r15
     566:	0f 93       	push	r16
     568:	1f 93       	push	r17
     56a:	cf 93       	push	r28
     56c:	df 93       	push	r29
     56e:	7c 01       	movw	r14, r24
     570:	c6 2f       	mov	r28, r22
     572:	6a 01       	movw	r12, r20
     574:	12 2f       	mov	r17, r18
     576:	dc 01       	movw	r26, r24
     578:	13 96       	adiw	r26, 0x03	; 3
     57a:	6c 91       	ld	r22, X
     57c:	13 97       	sbiw	r26, 0x03	; 3
     57e:	14 96       	adiw	r26, 0x04	; 4
     580:	8d 91       	ld	r24, X+
     582:	9c 91       	ld	r25, X
     584:	15 97       	sbiw	r26, 0x05	; 5
     586:	0e 94 66 15 	call	0x2acc	; 0x2acc <_ZN7TwoWire17beginTransmissionEh>
     58a:	f7 01       	movw	r30, r14
     58c:	84 81       	ldd	r24, Z+4	; 0x04
     58e:	95 81       	ldd	r25, Z+5	; 0x05
     590:	dc 01       	movw	r26, r24
     592:	ed 91       	ld	r30, X+
     594:	fc 91       	ld	r31, X
     596:	01 90       	ld	r0, Z+
     598:	f0 81       	ld	r31, Z
     59a:	e0 2d       	mov	r30, r0
     59c:	6c 2f       	mov	r22, r28
     59e:	19 95       	eicall
     5a0:	f7 01       	movw	r30, r14
     5a2:	84 81       	ldd	r24, Z+4	; 0x04
     5a4:	95 81       	ldd	r25, Z+5	; 0x05
     5a6:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <_ZN7TwoWire15endTransmissionEv>
     5aa:	41 2f       	mov	r20, r17
     5ac:	d7 01       	movw	r26, r14
     5ae:	13 96       	adiw	r26, 0x03	; 3
     5b0:	6c 91       	ld	r22, X
     5b2:	13 97       	sbiw	r26, 0x03	; 3
     5b4:	14 96       	adiw	r26, 0x04	; 4
     5b6:	8d 91       	ld	r24, X+
     5b8:	9c 91       	ld	r25, X
     5ba:	15 97       	sbiw	r26, 0x05	; 5
     5bc:	0e 94 e7 15 	call	0x2bce	; 0x2bce <_ZN7TwoWire11requestFromEhh>
     5c0:	11 23       	and	r17, r17
     5c2:	b1 f0       	breq	.+44     	; 0x5f0 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh+0x92>
     5c4:	e6 01       	movw	r28, r12
     5c6:	11 50       	subi	r17, 0x01	; 1
     5c8:	01 2f       	mov	r16, r17
     5ca:	10 e0       	ldi	r17, 0x00	; 0
     5cc:	0f 5f       	subi	r16, 0xFF	; 255
     5ce:	1f 4f       	sbci	r17, 0xFF	; 255
     5d0:	0c 0d       	add	r16, r12
     5d2:	1d 1d       	adc	r17, r13
     5d4:	f7 01       	movw	r30, r14
     5d6:	84 81       	ldd	r24, Z+4	; 0x04
     5d8:	95 81       	ldd	r25, Z+5	; 0x05
     5da:	dc 01       	movw	r26, r24
     5dc:	ed 91       	ld	r30, X+
     5de:	fc 91       	ld	r31, X
     5e0:	02 84       	ldd	r0, Z+10	; 0x0a
     5e2:	f3 85       	ldd	r31, Z+11	; 0x0b
     5e4:	e0 2d       	mov	r30, r0
     5e6:	19 95       	eicall
     5e8:	89 93       	st	Y+, r24
     5ea:	c0 17       	cp	r28, r16
     5ec:	d1 07       	cpc	r29, r17
     5ee:	91 f7       	brne	.-28     	; 0x5d4 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh+0x76>
     5f0:	81 e0       	ldi	r24, 0x01	; 1
     5f2:	df 91       	pop	r29
     5f4:	cf 91       	pop	r28
     5f6:	1f 91       	pop	r17
     5f8:	0f 91       	pop	r16
     5fa:	ff 90       	pop	r15
     5fc:	ef 90       	pop	r14
     5fe:	df 90       	pop	r13
     600:	cf 90       	pop	r12
     602:	08 95       	ret

00000604 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>:
 *            VECTOR_EULER
 *            VECTOR_LINEARACCEL
 *            VECTOR_GRAVITY]
 *  @return  vector from specified source
 */
AdafruitImu::Vector<3> Adafruit_BNO055::getVector(adafruit_vector_type_t vector_type) {
     604:	af 92       	push	r10
     606:	bf 92       	push	r11
     608:	cf 92       	push	r12
     60a:	df 92       	push	r13
     60c:	ff 92       	push	r15
     60e:	0f 93       	push	r16
     610:	1f 93       	push	r17
     612:	cf 93       	push	r28
     614:	df 93       	push	r29
     616:	00 d0       	rcall	.+0      	; 0x618 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x14>
     618:	00 d0       	rcall	.+0      	; 0x61a <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x16>
     61a:	cd b7       	in	r28, 0x3d	; 61
     61c:	de b7       	in	r29, 0x3e	; 62
     61e:	8c 01       	movw	r16, r24
     620:	cb 01       	movw	r24, r22
     622:	f4 2e       	mov	r15, r20
	template <uint8_t N> class Vector
	{
		public:
		Vector()
		{
			memset(p_vec, 0, sizeof(double)*N);
     624:	2c e0       	ldi	r18, 0x0C	; 12
     626:	f8 01       	movw	r30, r16
     628:	11 92       	st	Z+, r1
     62a:	2a 95       	dec	r18
     62c:	e9 f7       	brne	.-6      	; 0x628 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x24>
  AdafruitImu::Vector<3> xyz;
  uint8_t buffer[6];
  memset(buffer, 0, 6);
     62e:	ae 01       	movw	r20, r28
     630:	4f 5f       	subi	r20, 0xFF	; 255
     632:	5f 4f       	sbci	r21, 0xFF	; 255
     634:	26 e0       	ldi	r18, 0x06	; 6
     636:	fa 01       	movw	r30, r20
     638:	11 92       	st	Z+, r1
     63a:	2a 95       	dec	r18
     63c:	e9 f7       	brne	.-6      	; 0x638 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x34>

  int16_t x, y, z;
  x = y = z = 0;

  /* Read vector data (6 bytes) */
  readLen((adafruit_bno055_reg_t)vector_type, buffer, 6);
     63e:	26 e0       	ldi	r18, 0x06	; 6
     640:	6f 2d       	mov	r22, r15
     642:	8d df       	rcall	.-230    	; 0x55e <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>

  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
     644:	6a 81       	ldd	r22, Y+2	; 0x02
     646:	70 e0       	ldi	r23, 0x00	; 0
     648:	76 2f       	mov	r23, r22
     64a:	66 27       	eor	r22, r22
     64c:	89 81       	ldd	r24, Y+1	; 0x01
     64e:	68 2b       	or	r22, r24
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
     650:	8c 81       	ldd	r24, Y+4	; 0x04
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	98 2f       	mov	r25, r24
     656:	88 27       	eor	r24, r24
     658:	2b 81       	ldd	r18, Y+3	; 0x03
     65a:	6c 01       	movw	r12, r24
     65c:	c2 2a       	or	r12, r18
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
     65e:	8e 81       	ldd	r24, Y+6	; 0x06
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	98 2f       	mov	r25, r24
     664:	88 27       	eor	r24, r24
     666:	2d 81       	ldd	r18, Y+5	; 0x05
     668:	5c 01       	movw	r10, r24
     66a:	a2 2a       	or	r10, r18

  /*!
   * Convert the value to an appropriate range (section 3.6.4)
   * and assign the value to the Vector type
   */
  switch (vector_type) {
     66c:	f4 e1       	ldi	r31, 0x14	; 20
     66e:	ff 16       	cp	r15, r31
     670:	09 f4       	brne	.+2      	; 0x674 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x70>
     672:	4a c0       	rjmp	.+148    	; 0x708 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x104>
     674:	ff 15       	cp	r31, r15
     676:	40 f0       	brcs	.+16     	; 0x688 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x84>
     678:	88 e0       	ldi	r24, 0x08	; 8
     67a:	f8 16       	cp	r15, r24
     67c:	09 f4       	brne	.+2      	; 0x680 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x7c>
     67e:	ac c0       	rjmp	.+344    	; 0x7d8 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x1d4>
     680:	ee e0       	ldi	r30, 0x0E	; 14
     682:	fe 16       	cp	r15, r30
     684:	69 f0       	breq	.+26     	; 0x6a0 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x9c>
     686:	43 c1       	rjmp	.+646    	; 0x90e <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
     688:	f8 e2       	ldi	r31, 0x28	; 40
     68a:	ff 16       	cp	r15, r31
     68c:	09 f4       	brne	.+2      	; 0x690 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x8c>
     68e:	d8 c0       	rjmp	.+432    	; 0x840 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x23c>
     690:	8e e2       	ldi	r24, 0x2E	; 46
     692:	f8 16       	cp	r15, r24
     694:	09 f4       	brne	.+2      	; 0x698 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x94>
     696:	08 c1       	rjmp	.+528    	; 0x8a8 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x2a4>
     698:	ea e1       	ldi	r30, 0x1A	; 26
     69a:	fe 12       	cpse	r15, r30
     69c:	38 c1       	rjmp	.+624    	; 0x90e <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
     69e:	68 c0       	rjmp	.+208    	; 0x770 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x16c>
  case VECTOR_MAGNETOMETER:
    /* 1uT = 16 LSB */
    xyz[0] = ((double)x) / 16.0;
     6a0:	07 2e       	mov	r0, r23
     6a2:	00 0c       	add	r0, r0
     6a4:	88 0b       	sbc	r24, r24
     6a6:	99 0b       	sbc	r25, r25
     6a8:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__floatsisf>
     6ac:	20 e0       	ldi	r18, 0x00	; 0
     6ae:	30 e0       	ldi	r19, 0x00	; 0
     6b0:	40 e8       	ldi	r20, 0x80	; 128
     6b2:	5d e3       	ldi	r21, 0x3D	; 61
     6b4:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
     6b8:	f8 01       	movw	r30, r16
     6ba:	60 83       	st	Z, r22
     6bc:	71 83       	std	Z+1, r23	; 0x01
     6be:	82 83       	std	Z+2, r24	; 0x02
     6c0:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 16.0;
     6c2:	b6 01       	movw	r22, r12
     6c4:	dd 0c       	add	r13, r13
     6c6:	88 0b       	sbc	r24, r24
     6c8:	99 0b       	sbc	r25, r25
     6ca:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__floatsisf>
     6ce:	20 e0       	ldi	r18, 0x00	; 0
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	40 e8       	ldi	r20, 0x80	; 128
     6d4:	5d e3       	ldi	r21, 0x3D	; 61
     6d6:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
     6da:	f8 01       	movw	r30, r16
     6dc:	64 83       	std	Z+4, r22	; 0x04
     6de:	75 83       	std	Z+5, r23	; 0x05
     6e0:	86 83       	std	Z+6, r24	; 0x06
     6e2:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 16.0;
     6e4:	b5 01       	movw	r22, r10
     6e6:	bb 0c       	add	r11, r11
     6e8:	88 0b       	sbc	r24, r24
     6ea:	99 0b       	sbc	r25, r25
     6ec:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__floatsisf>
     6f0:	20 e0       	ldi	r18, 0x00	; 0
     6f2:	30 e0       	ldi	r19, 0x00	; 0
     6f4:	40 e8       	ldi	r20, 0x80	; 128
     6f6:	5d e3       	ldi	r21, 0x3D	; 61
     6f8:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
     6fc:	f8 01       	movw	r30, r16
     6fe:	60 87       	std	Z+8, r22	; 0x08
     700:	71 87       	std	Z+9, r23	; 0x09
     702:	82 87       	std	Z+10, r24	; 0x0a
     704:	93 87       	std	Z+11, r25	; 0x0b
    break;
     706:	03 c1       	rjmp	.+518    	; 0x90e <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_GYROSCOPE:
    /* 1dps = 16 LSB */
    xyz[0] = ((double)x) / 16.0;
     708:	07 2e       	mov	r0, r23
     70a:	00 0c       	add	r0, r0
     70c:	88 0b       	sbc	r24, r24
     70e:	99 0b       	sbc	r25, r25
     710:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__floatsisf>
     714:	20 e0       	ldi	r18, 0x00	; 0
     716:	30 e0       	ldi	r19, 0x00	; 0
     718:	40 e8       	ldi	r20, 0x80	; 128
     71a:	5d e3       	ldi	r21, 0x3D	; 61
     71c:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
     720:	f8 01       	movw	r30, r16
     722:	60 83       	st	Z, r22
     724:	71 83       	std	Z+1, r23	; 0x01
     726:	82 83       	std	Z+2, r24	; 0x02
     728:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 16.0;
     72a:	b6 01       	movw	r22, r12
     72c:	dd 0c       	add	r13, r13
     72e:	88 0b       	sbc	r24, r24
     730:	99 0b       	sbc	r25, r25
     732:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__floatsisf>
     736:	20 e0       	ldi	r18, 0x00	; 0
     738:	30 e0       	ldi	r19, 0x00	; 0
     73a:	40 e8       	ldi	r20, 0x80	; 128
     73c:	5d e3       	ldi	r21, 0x3D	; 61
     73e:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
     742:	f8 01       	movw	r30, r16
     744:	64 83       	std	Z+4, r22	; 0x04
     746:	75 83       	std	Z+5, r23	; 0x05
     748:	86 83       	std	Z+6, r24	; 0x06
     74a:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 16.0;
     74c:	b5 01       	movw	r22, r10
     74e:	bb 0c       	add	r11, r11
     750:	88 0b       	sbc	r24, r24
     752:	99 0b       	sbc	r25, r25
     754:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__floatsisf>
     758:	20 e0       	ldi	r18, 0x00	; 0
     75a:	30 e0       	ldi	r19, 0x00	; 0
     75c:	40 e8       	ldi	r20, 0x80	; 128
     75e:	5d e3       	ldi	r21, 0x3D	; 61
     760:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
     764:	f8 01       	movw	r30, r16
     766:	60 87       	std	Z+8, r22	; 0x08
     768:	71 87       	std	Z+9, r23	; 0x09
     76a:	82 87       	std	Z+10, r24	; 0x0a
     76c:	93 87       	std	Z+11, r25	; 0x0b
    break;
     76e:	cf c0       	rjmp	.+414    	; 0x90e <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_EULER:
    /* 1 degree = 16 LSB */
    xyz[0] = ((double)x) / 16.0;
     770:	07 2e       	mov	r0, r23
     772:	00 0c       	add	r0, r0
     774:	88 0b       	sbc	r24, r24
     776:	99 0b       	sbc	r25, r25
     778:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__floatsisf>
     77c:	20 e0       	ldi	r18, 0x00	; 0
     77e:	30 e0       	ldi	r19, 0x00	; 0
     780:	40 e8       	ldi	r20, 0x80	; 128
     782:	5d e3       	ldi	r21, 0x3D	; 61
     784:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
     788:	f8 01       	movw	r30, r16
     78a:	60 83       	st	Z, r22
     78c:	71 83       	std	Z+1, r23	; 0x01
     78e:	82 83       	std	Z+2, r24	; 0x02
     790:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 16.0;
     792:	b6 01       	movw	r22, r12
     794:	dd 0c       	add	r13, r13
     796:	88 0b       	sbc	r24, r24
     798:	99 0b       	sbc	r25, r25
     79a:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__floatsisf>
     79e:	20 e0       	ldi	r18, 0x00	; 0
     7a0:	30 e0       	ldi	r19, 0x00	; 0
     7a2:	40 e8       	ldi	r20, 0x80	; 128
     7a4:	5d e3       	ldi	r21, 0x3D	; 61
     7a6:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
     7aa:	f8 01       	movw	r30, r16
     7ac:	64 83       	std	Z+4, r22	; 0x04
     7ae:	75 83       	std	Z+5, r23	; 0x05
     7b0:	86 83       	std	Z+6, r24	; 0x06
     7b2:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 16.0;
     7b4:	b5 01       	movw	r22, r10
     7b6:	bb 0c       	add	r11, r11
     7b8:	88 0b       	sbc	r24, r24
     7ba:	99 0b       	sbc	r25, r25
     7bc:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__floatsisf>
     7c0:	20 e0       	ldi	r18, 0x00	; 0
     7c2:	30 e0       	ldi	r19, 0x00	; 0
     7c4:	40 e8       	ldi	r20, 0x80	; 128
     7c6:	5d e3       	ldi	r21, 0x3D	; 61
     7c8:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
     7cc:	f8 01       	movw	r30, r16
     7ce:	60 87       	std	Z+8, r22	; 0x08
     7d0:	71 87       	std	Z+9, r23	; 0x09
     7d2:	82 87       	std	Z+10, r24	; 0x0a
     7d4:	93 87       	std	Z+11, r25	; 0x0b
    break;
     7d6:	9b c0       	rjmp	.+310    	; 0x90e <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_ACCELEROMETER:
    /* 1m/s^2 = 100 LSB */
    xyz[0] = ((double)x) / 100.0;
     7d8:	07 2e       	mov	r0, r23
     7da:	00 0c       	add	r0, r0
     7dc:	88 0b       	sbc	r24, r24
     7de:	99 0b       	sbc	r25, r25
     7e0:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__floatsisf>
     7e4:	20 e0       	ldi	r18, 0x00	; 0
     7e6:	30 e0       	ldi	r19, 0x00	; 0
     7e8:	48 ec       	ldi	r20, 0xC8	; 200
     7ea:	52 e4       	ldi	r21, 0x42	; 66
     7ec:	0e 94 56 18 	call	0x30ac	; 0x30ac <__divsf3>
     7f0:	f8 01       	movw	r30, r16
     7f2:	60 83       	st	Z, r22
     7f4:	71 83       	std	Z+1, r23	; 0x01
     7f6:	82 83       	std	Z+2, r24	; 0x02
     7f8:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 100.0;
     7fa:	b6 01       	movw	r22, r12
     7fc:	dd 0c       	add	r13, r13
     7fe:	88 0b       	sbc	r24, r24
     800:	99 0b       	sbc	r25, r25
     802:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__floatsisf>
     806:	20 e0       	ldi	r18, 0x00	; 0
     808:	30 e0       	ldi	r19, 0x00	; 0
     80a:	48 ec       	ldi	r20, 0xC8	; 200
     80c:	52 e4       	ldi	r21, 0x42	; 66
     80e:	0e 94 56 18 	call	0x30ac	; 0x30ac <__divsf3>
     812:	f8 01       	movw	r30, r16
     814:	64 83       	std	Z+4, r22	; 0x04
     816:	75 83       	std	Z+5, r23	; 0x05
     818:	86 83       	std	Z+6, r24	; 0x06
     81a:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 100.0;
     81c:	b5 01       	movw	r22, r10
     81e:	bb 0c       	add	r11, r11
     820:	88 0b       	sbc	r24, r24
     822:	99 0b       	sbc	r25, r25
     824:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__floatsisf>
     828:	20 e0       	ldi	r18, 0x00	; 0
     82a:	30 e0       	ldi	r19, 0x00	; 0
     82c:	48 ec       	ldi	r20, 0xC8	; 200
     82e:	52 e4       	ldi	r21, 0x42	; 66
     830:	0e 94 56 18 	call	0x30ac	; 0x30ac <__divsf3>
     834:	f8 01       	movw	r30, r16
     836:	60 87       	std	Z+8, r22	; 0x08
     838:	71 87       	std	Z+9, r23	; 0x09
     83a:	82 87       	std	Z+10, r24	; 0x0a
     83c:	93 87       	std	Z+11, r25	; 0x0b
    break;
     83e:	67 c0       	rjmp	.+206    	; 0x90e <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_LINEARACCEL:
    /* 1m/s^2 = 100 LSB */
    xyz[0] = ((double)x) / 100.0;
     840:	07 2e       	mov	r0, r23
     842:	00 0c       	add	r0, r0
     844:	88 0b       	sbc	r24, r24
     846:	99 0b       	sbc	r25, r25
     848:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__floatsisf>
     84c:	20 e0       	ldi	r18, 0x00	; 0
     84e:	30 e0       	ldi	r19, 0x00	; 0
     850:	48 ec       	ldi	r20, 0xC8	; 200
     852:	52 e4       	ldi	r21, 0x42	; 66
     854:	0e 94 56 18 	call	0x30ac	; 0x30ac <__divsf3>
     858:	f8 01       	movw	r30, r16
     85a:	60 83       	st	Z, r22
     85c:	71 83       	std	Z+1, r23	; 0x01
     85e:	82 83       	std	Z+2, r24	; 0x02
     860:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 100.0;
     862:	b6 01       	movw	r22, r12
     864:	dd 0c       	add	r13, r13
     866:	88 0b       	sbc	r24, r24
     868:	99 0b       	sbc	r25, r25
     86a:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__floatsisf>
     86e:	20 e0       	ldi	r18, 0x00	; 0
     870:	30 e0       	ldi	r19, 0x00	; 0
     872:	48 ec       	ldi	r20, 0xC8	; 200
     874:	52 e4       	ldi	r21, 0x42	; 66
     876:	0e 94 56 18 	call	0x30ac	; 0x30ac <__divsf3>
     87a:	f8 01       	movw	r30, r16
     87c:	64 83       	std	Z+4, r22	; 0x04
     87e:	75 83       	std	Z+5, r23	; 0x05
     880:	86 83       	std	Z+6, r24	; 0x06
     882:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 100.0;
     884:	b5 01       	movw	r22, r10
     886:	bb 0c       	add	r11, r11
     888:	88 0b       	sbc	r24, r24
     88a:	99 0b       	sbc	r25, r25
     88c:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__floatsisf>
     890:	20 e0       	ldi	r18, 0x00	; 0
     892:	30 e0       	ldi	r19, 0x00	; 0
     894:	48 ec       	ldi	r20, 0xC8	; 200
     896:	52 e4       	ldi	r21, 0x42	; 66
     898:	0e 94 56 18 	call	0x30ac	; 0x30ac <__divsf3>
     89c:	f8 01       	movw	r30, r16
     89e:	60 87       	std	Z+8, r22	; 0x08
     8a0:	71 87       	std	Z+9, r23	; 0x09
     8a2:	82 87       	std	Z+10, r24	; 0x0a
     8a4:	93 87       	std	Z+11, r25	; 0x0b
    break;
     8a6:	33 c0       	rjmp	.+102    	; 0x90e <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_GRAVITY:
    /* 1m/s^2 = 100 LSB */
    xyz[0] = ((double)x) / 100.0;
     8a8:	07 2e       	mov	r0, r23
     8aa:	00 0c       	add	r0, r0
     8ac:	88 0b       	sbc	r24, r24
     8ae:	99 0b       	sbc	r25, r25
     8b0:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__floatsisf>
     8b4:	20 e0       	ldi	r18, 0x00	; 0
     8b6:	30 e0       	ldi	r19, 0x00	; 0
     8b8:	48 ec       	ldi	r20, 0xC8	; 200
     8ba:	52 e4       	ldi	r21, 0x42	; 66
     8bc:	0e 94 56 18 	call	0x30ac	; 0x30ac <__divsf3>
     8c0:	f8 01       	movw	r30, r16
     8c2:	60 83       	st	Z, r22
     8c4:	71 83       	std	Z+1, r23	; 0x01
     8c6:	82 83       	std	Z+2, r24	; 0x02
     8c8:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 100.0;
     8ca:	b6 01       	movw	r22, r12
     8cc:	dd 0c       	add	r13, r13
     8ce:	88 0b       	sbc	r24, r24
     8d0:	99 0b       	sbc	r25, r25
     8d2:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__floatsisf>
     8d6:	20 e0       	ldi	r18, 0x00	; 0
     8d8:	30 e0       	ldi	r19, 0x00	; 0
     8da:	48 ec       	ldi	r20, 0xC8	; 200
     8dc:	52 e4       	ldi	r21, 0x42	; 66
     8de:	0e 94 56 18 	call	0x30ac	; 0x30ac <__divsf3>
     8e2:	f8 01       	movw	r30, r16
     8e4:	64 83       	std	Z+4, r22	; 0x04
     8e6:	75 83       	std	Z+5, r23	; 0x05
     8e8:	86 83       	std	Z+6, r24	; 0x06
     8ea:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 100.0;
     8ec:	b5 01       	movw	r22, r10
     8ee:	bb 0c       	add	r11, r11
     8f0:	88 0b       	sbc	r24, r24
     8f2:	99 0b       	sbc	r25, r25
     8f4:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__floatsisf>
     8f8:	20 e0       	ldi	r18, 0x00	; 0
     8fa:	30 e0       	ldi	r19, 0x00	; 0
     8fc:	48 ec       	ldi	r20, 0xC8	; 200
     8fe:	52 e4       	ldi	r21, 0x42	; 66
     900:	0e 94 56 18 	call	0x30ac	; 0x30ac <__divsf3>
     904:	f8 01       	movw	r30, r16
     906:	60 87       	std	Z+8, r22	; 0x08
     908:	71 87       	std	Z+9, r23	; 0x09
     90a:	82 87       	std	Z+10, r24	; 0x0a
     90c:	93 87       	std	Z+11, r25	; 0x0b
    break;
  }

  return xyz;
}
     90e:	c8 01       	movw	r24, r16
     910:	26 96       	adiw	r28, 0x06	; 6
     912:	0f b6       	in	r0, 0x3f	; 63
     914:	f8 94       	cli
     916:	de bf       	out	0x3e, r29	; 62
     918:	0f be       	out	0x3f, r0	; 63
     91a:	cd bf       	out	0x3d, r28	; 61
     91c:	df 91       	pop	r29
     91e:	cf 91       	pop	r28
     920:	1f 91       	pop	r17
     922:	0f 91       	pop	r16
     924:	ff 90       	pop	r15
     926:	df 90       	pop	r13
     928:	cf 90       	pop	r12
     92a:	bf 90       	pop	r11
     92c:	af 90       	pop	r10
     92e:	08 95       	ret

00000930 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>:
/*!
 *  @brief  Reads the sensor and returns the data as a sensors_event_t
 *  @param  event
 *  @return always returns true
 */
bool Adafruit_BNO055::getEvent(sensors_event_t *event) {
     930:	0f 93       	push	r16
     932:	1f 93       	push	r17
     934:	cf 93       	push	r28
     936:	df 93       	push	r29
     938:	cd b7       	in	r28, 0x3d	; 61
     93a:	de b7       	in	r29, 0x3e	; 62
     93c:	2c 97       	sbiw	r28, 0x0c	; 12
     93e:	0f b6       	in	r0, 0x3f	; 63
     940:	f8 94       	cli
     942:	de bf       	out	0x3e, r29	; 62
     944:	0f be       	out	0x3f, r0	; 63
     946:	cd bf       	out	0x3d, r28	; 61
     948:	8b 01       	movw	r16, r22
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
     94a:	20 e2       	ldi	r18, 0x20	; 32
     94c:	fb 01       	movw	r30, r22
     94e:	11 92       	st	Z+, r1
     950:	2a 95       	dec	r18
     952:	e9 f7       	brne	.-6      	; 0x94e <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t+0x1e>

  event->version = sizeof(sensors_event_t);
     954:	40 e2       	ldi	r20, 0x20	; 32
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	60 e0       	ldi	r22, 0x00	; 0
     95a:	70 e0       	ldi	r23, 0x00	; 0
     95c:	f8 01       	movw	r30, r16
     95e:	40 83       	st	Z, r20
     960:	51 83       	std	Z+1, r21	; 0x01
     962:	62 83       	std	Z+2, r22	; 0x02
     964:	73 83       	std	Z+3, r23	; 0x03
  event->sensor_id = _sensorID;
     966:	fc 01       	movw	r30, r24
     968:	46 81       	ldd	r20, Z+6	; 0x06
     96a:	57 81       	ldd	r21, Z+7	; 0x07
     96c:	60 85       	ldd	r22, Z+8	; 0x08
     96e:	71 85       	ldd	r23, Z+9	; 0x09
     970:	f8 01       	movw	r30, r16
     972:	44 83       	std	Z+4, r20	; 0x04
     974:	55 83       	std	Z+5, r21	; 0x05
     976:	66 83       	std	Z+6, r22	; 0x06
     978:	77 83       	std	Z+7, r23	; 0x07
  event->type = SENSOR_TYPE_ORIENTATION;
     97a:	43 e0       	ldi	r20, 0x03	; 3
     97c:	50 e0       	ldi	r21, 0x00	; 0
     97e:	60 e0       	ldi	r22, 0x00	; 0
     980:	70 e0       	ldi	r23, 0x00	; 0
     982:	40 87       	std	Z+8, r20	; 0x08
     984:	51 87       	std	Z+9, r21	; 0x09
     986:	62 87       	std	Z+10, r22	; 0x0a
     988:	73 87       	std	Z+11, r23	; 0x0b
  //event->timestamp = millis();

  /* Get a Euler angle sample for orientation */
  AdafruitImu::Vector<3> euler = getVector(Adafruit_BNO055::VECTOR_EULER);
     98a:	4a e1       	ldi	r20, 0x1A	; 26
     98c:	bc 01       	movw	r22, r24
     98e:	ce 01       	movw	r24, r28
     990:	01 96       	adiw	r24, 0x01	; 1
     992:	38 de       	rcall	.-912    	; 0x604 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
  event->orientation.x = euler.x();
     994:	89 81       	ldd	r24, Y+1	; 0x01
     996:	9a 81       	ldd	r25, Y+2	; 0x02
     998:	ab 81       	ldd	r26, Y+3	; 0x03
     99a:	bc 81       	ldd	r27, Y+4	; 0x04
     99c:	f8 01       	movw	r30, r16
     99e:	80 8b       	std	Z+16, r24	; 0x10
     9a0:	91 8b       	std	Z+17, r25	; 0x11
     9a2:	a2 8b       	std	Z+18, r26	; 0x12
     9a4:	b3 8b       	std	Z+19, r27	; 0x13
  event->orientation.y = euler.y();
     9a6:	8d 81       	ldd	r24, Y+5	; 0x05
     9a8:	9e 81       	ldd	r25, Y+6	; 0x06
     9aa:	af 81       	ldd	r26, Y+7	; 0x07
     9ac:	b8 85       	ldd	r27, Y+8	; 0x08
     9ae:	84 8b       	std	Z+20, r24	; 0x14
     9b0:	95 8b       	std	Z+21, r25	; 0x15
     9b2:	a6 8b       	std	Z+22, r26	; 0x16
     9b4:	b7 8b       	std	Z+23, r27	; 0x17
  event->orientation.z = euler.z();
     9b6:	89 85       	ldd	r24, Y+9	; 0x09
     9b8:	9a 85       	ldd	r25, Y+10	; 0x0a
     9ba:	ab 85       	ldd	r26, Y+11	; 0x0b
     9bc:	bc 85       	ldd	r27, Y+12	; 0x0c
     9be:	80 8f       	std	Z+24, r24	; 0x18
     9c0:	91 8f       	std	Z+25, r25	; 0x19
     9c2:	a2 8f       	std	Z+26, r26	; 0x1a
     9c4:	b3 8f       	std	Z+27, r27	; 0x1b

  return true;
}
     9c6:	81 e0       	ldi	r24, 0x01	; 1
     9c8:	2c 96       	adiw	r28, 0x0c	; 12
     9ca:	0f b6       	in	r0, 0x3f	; 63
     9cc:	f8 94       	cli
     9ce:	de bf       	out	0x3e, r29	; 62
     9d0:	0f be       	out	0x3f, r0	; 63
     9d2:	cd bf       	out	0x3d, r28	; 61
     9d4:	df 91       	pop	r29
     9d6:	cf 91       	pop	r28
     9d8:	1f 91       	pop	r17
     9da:	0f 91       	pop	r16
     9dc:	08 95       	ret

000009de <_Z14RunPingCommandPKhh>:
#include <stddef.h>

uint8_t* const SendDataBuffer = (uint8_t*)(&EtherComm::buffer[2]);

void RunPingCommand(const uint8_t* data, uint8_t len){
  if(len == 1){
     9de:	61 30       	cpi	r22, 0x01	; 1
     9e0:	49 f4       	brne	.+18     	; 0x9f4 <_Z14RunPingCommandPKhh+0x16>
     9e2:	fc 01       	movw	r30, r24
    SendDataBuffer[0] = data[0];
     9e4:	80 81       	ld	r24, Z
     9e6:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <__data_end>
     9ea:	f0 91 f7 02 	lds	r31, 0x02F7	; 0x8002f7 <__data_end+0x1>
     9ee:	80 83       	st	Z, r24
    EtherComm::SendCommand(CMD_Ping, 1);
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	bf c6       	rjmp	.+3454   	; 0x1772 <_ZN9EtherComm11SendCommandEhh>
     9f4:	08 95       	ret

000009f6 <_Z14RunEchoCommandPKhh>:
  }
}

void RunEchoCommand(const uint8_t* data, uint8_t len){
  uint8_t* index = SendDataBuffer;
     9f6:	40 91 f6 02 	lds	r20, 0x02F6	; 0x8002f6 <__data_end>
     9fa:	30 91 f7 02 	lds	r19, 0x02F7	; 0x8002f7 <__data_end+0x1>
  uint8_t dataLen = len;
  while(len-- > 0){
     9fe:	2f ef       	ldi	r18, 0xFF	; 255
     a00:	26 0f       	add	r18, r22
     a02:	66 23       	and	r22, r22
     a04:	41 f0       	breq	.+16     	; 0xa16 <_Z14RunEchoCommandPKhh+0x20>
     a06:	a8 2f       	mov	r26, r24
     a08:	b9 2f       	mov	r27, r25
     a0a:	e4 2f       	mov	r30, r20
     a0c:	f3 2f       	mov	r31, r19
    *(index++) = *(data++);
     a0e:	8d 91       	ld	r24, X+
     a10:	81 93       	st	Z+, r24
}

void RunEchoCommand(const uint8_t* data, uint8_t len){
  uint8_t* index = SendDataBuffer;
  uint8_t dataLen = len;
  while(len-- > 0){
     a12:	21 50       	subi	r18, 0x01	; 1
     a14:	e0 f7       	brcc	.-8      	; 0xa0e <_Z14RunEchoCommandPKhh+0x18>
    *(index++) = *(data++);
  }
  
  EtherComm::SendCommand(CMD_Echo, dataLen);
     a16:	81 e0       	ldi	r24, 0x01	; 1
     a18:	ac c6       	rjmp	.+3416   	; 0x1772 <_ZN9EtherComm11SendCommandEhh>
     a1a:	08 95       	ret

00000a1c <_Z13RunLedCommandPKhh>:
}
//TODO remove this command from both devices
void RunLedCommand(const uint8_t* data, uint8_t len){
	if(len == 1){
     a1c:	61 30       	cpi	r22, 0x01	; 1
     a1e:	51 f4       	brne	.+20     	; 0xa34 <_Z13RunLedCommandPKhh+0x18>
		uint8_t state = *data;
     a20:	fc 01       	movw	r30, r24
     a22:	90 81       	ld	r25, Z
		if(state <= 1){
     a24:	92 30       	cpi	r25, 0x02	; 2
     a26:	30 f4       	brcc	.+12     	; 0xa34 <_Z13RunLedCommandPKhh+0x18>
			rov.SetLed(state > 0);
     a28:	81 e0       	ldi	r24, 0x01	; 1
     a2a:	91 11       	cpse	r25, r1
     a2c:	01 c0       	rjmp	.+2      	; 0xa30 <_Z13RunLedCommandPKhh+0x14>
     a2e:	80 e0       	ldi	r24, 0x00	; 0
     a30:	0c 94 40 16 	jmp	0x2c80	; 0x2c80 <_ZN5Robot6SetLedEb>
     a34:	08 95       	ret

00000a36 <_ZN9EtherComm15CommandReceivedEhPKhh>:
		}
	}
}

void EtherComm::CommandReceived(uint8_t command, const uint8_t* data, uint8_t len){
     a36:	9b 01       	movw	r18, r22
  switch(command){
     a38:	81 30       	cpi	r24, 0x01	; 1
     a3a:	51 f0       	breq	.+20     	; 0xa50 <_ZN9EtherComm15CommandReceivedEhPKhh+0x1a>
     a3c:	28 f0       	brcs	.+10     	; 0xa48 <_ZN9EtherComm15CommandReceivedEhPKhh+0x12>
     a3e:	82 30       	cpi	r24, 0x02	; 2
     a40:	59 f0       	breq	.+22     	; 0xa58 <_ZN9EtherComm15CommandReceivedEhPKhh+0x22>
     a42:	83 30       	cpi	r24, 0x03	; 3
     a44:	69 f0       	breq	.+26     	; 0xa60 <_ZN9EtherComm15CommandReceivedEhPKhh+0x2a>
     a46:	08 95       	ret
    case CMD_Ping: RunPingCommand(data, len); break;
     a48:	64 2f       	mov	r22, r20
     a4a:	c9 01       	movw	r24, r18
     a4c:	c8 cf       	rjmp	.-112    	; 0x9de <_Z14RunPingCommandPKhh>
     a4e:	08 95       	ret
    case CMD_Echo: RunEchoCommand(data, len); break;
     a50:	64 2f       	mov	r22, r20
     a52:	c9 01       	movw	r24, r18
     a54:	d0 cf       	rjmp	.-96     	; 0x9f6 <_Z14RunEchoCommandPKhh>
     a56:	08 95       	ret
	case CMD_Led: RunLedCommand(data, len); break;
     a58:	64 2f       	mov	r22, r20
     a5a:	c9 01       	movw	r24, r18
     a5c:	df cf       	rjmp	.-66     	; 0xa1c <_Z13RunLedCommandPKhh>
     a5e:	08 95       	ret
	case CMD_UpdateDevice: rov.CommandReceived(data, len); break;
     a60:	64 2f       	mov	r22, r20
     a62:	c9 01       	movw	r24, r18
     a64:	0c 94 46 16 	jmp	0x2c8c	; 0x2c8c <_ZN5Robot15CommandReceivedEPKhh>
     a68:	08 95       	ret

00000a6a <_GLOBAL__sub_I__Z14RunPingCommandPKhh>:
#include "EtherComm.h"
#include "Robot.h"
#include "Commands.h"
#include <stddef.h>

uint8_t* const SendDataBuffer = (uint8_t*)(&EtherComm::buffer[2]);
     a6a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
     a6e:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
     a72:	02 96       	adiw	r24, 0x02	; 2
     a74:	90 93 f7 02 	sts	0x02F7, r25	; 0x8002f7 <__data_end+0x1>
     a78:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <__data_end>
     a7c:	08 95       	ret

00000a7e <_ZL10enableChipv>:
static Register* selectPort;
static uint8_t selectPin;

static void enableChip () {
	//cli();
	SetLow(*selectPort, selectPin); //digitalWrite(selectPin, LOW);
     a7e:	e0 91 fc 02 	lds	r30, 0x02FC	; 0x8002fc <_ZL10selectPort>
     a82:	f0 91 fd 02 	lds	r31, 0x02FD	; 0x8002fd <_ZL10selectPort+0x1>
     a86:	90 81       	ld	r25, Z
     a88:	80 91 fb 02 	lds	r24, 0x02FB	; 0x8002fb <_ZL9selectPin>
     a8c:	80 95       	com	r24
     a8e:	89 23       	and	r24, r25
     a90:	80 83       	st	Z, r24
     a92:	08 95       	ret

00000a94 <_ZL11disableChipv>:
}

static void disableChip () {
	SetHigh(*selectPort, selectPin); //digitalWrite(selectPin, HIGH);
     a94:	e0 91 fc 02 	lds	r30, 0x02FC	; 0x8002fc <_ZL10selectPort>
     a98:	f0 91 fd 02 	lds	r31, 0x02FD	; 0x8002fd <_ZL10selectPort+0x1>
     a9c:	90 81       	ld	r25, Z
     a9e:	80 91 fb 02 	lds	r24, 0x02FB	; 0x8002fb <_ZL9selectPin>
     aa2:	89 2b       	or	r24, r25
     aa4:	80 83       	st	Z, r24
     aa6:	08 95       	ret

00000aa8 <_ZL6readOphh>:

	SetOutput(csDDR, selectPin);
	disableChip();
}

static uint8_t readOp (uint8_t op, uint8_t address) {
     aa8:	cf 93       	push	r28
     aaa:	df 93       	push	r29
     aac:	d8 2f       	mov	r29, r24
     aae:	c6 2f       	mov	r28, r22
    enableChip();
     ab0:	e6 df       	rcall	.-52     	; 0xa7e <_ZL10enableChipv>
    SPI.write8(op | (address & ADDR_MASK));
     ab2:	8c 2f       	mov	r24, r28
     ab4:	cf 71       	andi	r28, 0x1F	; 31
     ab6:	cd 2b       	or	r28, r29
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     ab8:	ce bd       	out	0x2e, r28	; 46
		asm volatile("nop");
     aba:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     abc:	0d b4       	in	r0, 0x2d	; 45
     abe:	07 fe       	sbrs	r0, 7
     ac0:	fd cf       	rjmp	.-6      	; 0xabc <_ZL6readOphh+0x14>
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     ac2:	1e bc       	out	0x2e, r1	; 46
		asm volatile("nop");
     ac4:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     ac6:	0d b4       	in	r0, 0x2d	; 45
     ac8:	07 fe       	sbrs	r0, 7
     aca:	fd cf       	rjmp	.-6      	; 0xac6 <_ZL6readOphh+0x1e>
	}

	//write8, excepts also returns the received byte
	static uint8_t read_write8(uint8_t data){
		write8(data);
		return SPDR;
     acc:	ce b5       	in	r28, 0x2e	; 46
    uint8_t result = SPI.read_write8(0x00);
    if (address & 0x80)
     ace:	88 23       	and	r24, r24
     ad0:	34 f4       	brge	.+12     	; 0xade <_ZL6readOphh+0x36>
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     ad2:	1e bc       	out	0x2e, r1	; 46
		asm volatile("nop");
     ad4:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     ad6:	0d b4       	in	r0, 0x2d	; 45
     ad8:	07 fe       	sbrs	r0, 7
     ada:	fd cf       	rjmp	.-6      	; 0xad6 <_ZL6readOphh+0x2e>
        result = SPI.read_write8(0x00);
    disableChip();
     adc:	ce b5       	in	r28, 0x2e	; 46
     ade:	da df       	rcall	.-76     	; 0xa94 <_ZL11disableChipv>
    return result;
}
     ae0:	8c 2f       	mov	r24, r28
     ae2:	df 91       	pop	r29
     ae4:	cf 91       	pop	r28
     ae6:	08 95       	ret

00000ae8 <_ZL7writeOphhh>:

static void writeOp (uint8_t op, uint8_t address, uint8_t data) {
     ae8:	1f 93       	push	r17
     aea:	cf 93       	push	r28
     aec:	df 93       	push	r29
     aee:	c8 2f       	mov	r28, r24
     af0:	d6 2f       	mov	r29, r22
     af2:	14 2f       	mov	r17, r20
    enableChip();
     af4:	c4 df       	rcall	.-120    	; 0xa7e <_ZL10enableChipv>
    SPI.write8(op | (address & ADDR_MASK));
     af6:	df 71       	andi	r29, 0x1F	; 31
     af8:	cd 2b       	or	r28, r29
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     afa:	ce bd       	out	0x2e, r28	; 46
		asm volatile("nop");
     afc:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     afe:	0d b4       	in	r0, 0x2d	; 45
     b00:	07 fe       	sbrs	r0, 7
     b02:	fd cf       	rjmp	.-6      	; 0xafe <_ZL7writeOphhh+0x16>
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     b04:	1e bd       	out	0x2e, r17	; 46
		asm volatile("nop");
     b06:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     b08:	0d b4       	in	r0, 0x2d	; 45
     b0a:	07 fe       	sbrs	r0, 7
    SPI.write8(data);
    disableChip();
     b0c:	fd cf       	rjmp	.-6      	; 0xb08 <_ZL7writeOphhh+0x20>
     b0e:	c2 df       	rcall	.-124    	; 0xa94 <_ZL11disableChipv>
}
     b10:	df 91       	pop	r29
     b12:	cf 91       	pop	r28
     b14:	1f 91       	pop	r17
     b16:	08 95       	ret

00000b18 <_ZL7readBufjPh>:

static void readBuf(uint16_t len, uint8_t* data) {
     b18:	0f 93       	push	r16
     b1a:	1f 93       	push	r17
     b1c:	cf 93       	push	r28
     b1e:	df 93       	push	r29
     b20:	ec 01       	movw	r28, r24
     b22:	8b 01       	movw	r16, r22
    enableChip();
     b24:	ac df       	rcall	.-168    	; 0xa7e <_ZL10enableChipv>
    if (len != 0) {
     b26:	20 97       	sbiw	r28, 0x00	; 0
     b28:	99 f0       	breq	.+38     	; 0xb50 <_ZL7readBufjPh+0x38>
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     b2a:	8a e3       	ldi	r24, 0x3A	; 58
     b2c:	8e bd       	out	0x2e, r24	; 46
		asm volatile("nop");
     b2e:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     b30:	0d b4       	in	r0, 0x2d	; 45
     b32:	07 fe       	sbrs	r0, 7
     b34:	fd cf       	rjmp	.-6      	; 0xb30 <_ZL7readBufjPh+0x18>
     b36:	f8 01       	movw	r30, r16
     b38:	b8 01       	movw	r22, r16
     b3a:	6c 0f       	add	r22, r28
     b3c:	7d 1f       	adc	r23, r29
	static void read(void *buf, uint16_t nbyte, uint8_t dataSend = 0){
		if(nbyte == 0) return;
		
		uint8_t* buff = (uint8_t*)buf;
		while(nbyte--){
			SPDR = dataSend;
     b3e:	1e bc       	out	0x2e, r1	; 46
			//asm volatile("nop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\n");
			while(!(SPSR & _BV(SPIF)));
     b40:	0d b4       	in	r0, 0x2d	; 45
     b42:	07 fe       	sbrs	r0, 7
     b44:	fd cf       	rjmp	.-6      	; 0xb40 <_ZL7readBufjPh+0x28>
			*buff++ = SPDR;
     b46:	9e b5       	in	r25, 0x2e	; 46
     b48:	91 93       	st	Z+, r25
		
	static void read(void *buf, uint16_t nbyte, uint8_t dataSend = 0){
		if(nbyte == 0) return;
		
		uint8_t* buff = (uint8_t*)buf;
		while(nbyte--){
     b4a:	6e 17       	cp	r22, r30
     b4c:	7f 07       	cpc	r23, r31
        SPI.write8(ENC28J60_READ_BUF_MEM);
		SPI.read(data, len);
    }
    disableChip();
     b4e:	b9 f7       	brne	.-18     	; 0xb3e <_ZL7readBufjPh+0x26>
     b50:	a1 df       	rcall	.-190    	; 0xa94 <_ZL11disableChipv>
}
     b52:	df 91       	pop	r29
     b54:	cf 91       	pop	r28
     b56:	1f 91       	pop	r17
     b58:	0f 91       	pop	r16
     b5a:	08 95       	ret

00000b5c <_ZL7SetBankh>:
        SPI.write(data, len);
    }
    disableChip();
}

static void SetBank (uint8_t address) {
     b5c:	1f 93       	push	r17
     b5e:	cf 93       	push	r28
     b60:	df 93       	push	r29
     b62:	18 2f       	mov	r17, r24
     b64:	10 76       	andi	r17, 0x60	; 96
    if ((address & BANK_MASK) != Enc28j60Bank) {
     b66:	c1 2f       	mov	r28, r17
     b68:	d0 e0       	ldi	r29, 0x00	; 0
     b6a:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <_ZL12Enc28j60Bank>
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	c8 17       	cp	r28, r24
     b72:	d9 07       	cpc	r29, r25
     b74:	a1 f0       	breq	.+40     	; 0xb9e <_ZL7SetBankh+0x42>
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_BSEL1|ECON1_BSEL0);
     b76:	43 e0       	ldi	r20, 0x03	; 3
     b78:	6f e1       	ldi	r22, 0x1F	; 31
     b7a:	80 ea       	ldi	r24, 0xA0	; 160
     b7c:	b5 df       	rcall	.-150    	; 0xae8 <_ZL7writeOphhh>
        Enc28j60Bank = address & BANK_MASK;
     b7e:	10 93 fe 02 	sts	0x02FE, r17	; 0x8002fe <_ZL12Enc28j60Bank>
        writeOp(ENC28J60_BIT_FIELD_SET, ECON1, Enc28j60Bank>>5);
     b82:	ae 01       	movw	r20, r28
     b84:	55 95       	asr	r21
     b86:	47 95       	ror	r20
     b88:	55 95       	asr	r21
     b8a:	47 95       	ror	r20
     b8c:	55 95       	asr	r21
     b8e:	47 95       	ror	r20
     b90:	55 95       	asr	r21
     b92:	47 95       	ror	r20
     b94:	55 95       	asr	r21
     b96:	47 95       	ror	r20
     b98:	6f e1       	ldi	r22, 0x1F	; 31
     b9a:	80 e8       	ldi	r24, 0x80	; 128
     b9c:	a5 df       	rcall	.-182    	; 0xae8 <_ZL7writeOphhh>
    }
}
     b9e:	df 91       	pop	r29
     ba0:	cf 91       	pop	r28
     ba2:	1f 91       	pop	r17
     ba4:	08 95       	ret

00000ba6 <_ZL11readRegByteh>:

static uint8_t readRegByte (uint8_t address) {
     ba6:	cf 93       	push	r28
     ba8:	c8 2f       	mov	r28, r24
    SetBank(address);
     baa:	d8 df       	rcall	.-80     	; 0xb5c <_ZL7SetBankh>
    return readOp(ENC28J60_READ_CTRL_REG, address);
     bac:	6c 2f       	mov	r22, r28
     bae:	80 e0       	ldi	r24, 0x00	; 0
     bb0:	7b df       	rcall	.-266    	; 0xaa8 <_ZL6readOphh>
}
     bb2:	cf 91       	pop	r28
     bb4:	08 95       	ret

00000bb6 <_ZL12writeRegBytehh>:

static void writeRegByte (uint8_t address, uint8_t data) {
     bb6:	cf 93       	push	r28
     bb8:	df 93       	push	r29
     bba:	c8 2f       	mov	r28, r24
     bbc:	d6 2f       	mov	r29, r22
    SetBank(address);
     bbe:	ce df       	rcall	.-100    	; 0xb5c <_ZL7SetBankh>
    writeOp(ENC28J60_WRITE_CTRL_REG, address, data);
     bc0:	4d 2f       	mov	r20, r29
     bc2:	6c 2f       	mov	r22, r28
     bc4:	80 e4       	ldi	r24, 0x40	; 64
     bc6:	90 df       	rcall	.-224    	; 0xae8 <_ZL7writeOphhh>
}
     bc8:	df 91       	pop	r29
     bca:	cf 91       	pop	r28
     bcc:	08 95       	ret

00000bce <_ZL8writeReghj>:

static void writeReg(uint8_t address, uint16_t data) {
     bce:	cf 93       	push	r28
     bd0:	df 93       	push	r29
     bd2:	c8 2f       	mov	r28, r24
     bd4:	d7 2f       	mov	r29, r23
    writeRegByte(address, data);
     bd6:	ef df       	rcall	.-34     	; 0xbb6 <_ZL12writeRegBytehh>
    writeRegByte(address + 1, data >> 8);
     bd8:	6d 2f       	mov	r22, r29
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	8c 0f       	add	r24, r28
     bde:	eb df       	rcall	.-42     	; 0xbb6 <_ZL12writeRegBytehh>
}
     be0:	df 91       	pop	r29
     be2:	cf 91       	pop	r28
     be4:	08 95       	ret

00000be6 <_ZN8ENC28J607initSPIERVh>:
static void disableChip () {
	SetHigh(*selectPort, selectPin); //digitalWrite(selectPin, HIGH);
	//sei();
}

void ENC28J60::initSPI (Register& csDDR) {
     be6:	fc 01       	movw	r30, r24

class SPI{
public:
	static void begin(uint8_t clock = SPI_CLOCK_DIV2){
		//SPI_DIR |= SS;
		SPI_DIR |= SPI_MOSI | SPI_SCK | SPI_SS; //Not sure why, but SS pin requires to be set as output even when not being used.
     be8:	94 b1       	in	r25, 0x04	; 4
     bea:	97 60       	ori	r25, 0x07	; 7
     bec:	94 b9       	out	0x04, r25	; 4
		SPI_DIR &= ~(SPI_MISO);
     bee:	23 98       	cbi	0x04, 3	; 4
		//disableCS();

		SPSR |= (clock >> 2);
     bf0:	9d b5       	in	r25, 0x2d	; 45
     bf2:	91 60       	ori	r25, 0x01	; 1
     bf4:	9d bd       	out	0x2d, r25	; 45
		SPCR |= _BV(MSTR) | _BV(SPE) | (clock & 0x03);
     bf6:	9c b5       	in	r25, 0x2c	; 44
     bf8:	90 65       	ori	r25, 0x50	; 80
     bfa:	9c bd       	out	0x2c, r25	; 44
	SPI.begin(SPI_CLOCK_DIV2);

	SetOutput(csDDR, selectPin);
     bfc:	80 81       	ld	r24, Z
     bfe:	90 91 fb 02 	lds	r25, 0x02FB	; 0x8002fb <_ZL9selectPin>
     c02:	98 2b       	or	r25, r24
     c04:	90 83       	st	Z, r25
	disableChip();
     c06:	46 cf       	rjmp	.-372    	; 0xa94 <_ZL11disableChipv>
     c08:	08 95       	ret

00000c0a <_ZN8ENC28J6010initializeEjPKhRVhS3_h>:
    writeReg(MIWR, data);
    while (readRegByte(MISTAT) & MISTAT_BUSY)
        ;
}

uint8_t ENC28J60::initialize (uint16_t size, const uint8_t* macaddr, Register& csDDR, Register& csPort, uint8_t csPin) {
     c0a:	0f 93       	push	r16
     c0c:	cf 93       	push	r28
     c0e:	df 93       	push	r29
     c10:	eb 01       	movw	r28, r22
    bufferSize = size;
     c12:	90 93 00 03 	sts	0x0300, r25	; 0x800300 <_ZN8ENC28J6010bufferSizeE+0x1>
     c16:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <_ZN8ENC28J6010bufferSizeE>
	selectPin = csPin;
     c1a:	00 93 fb 02 	sts	0x02FB, r16	; 0x8002fb <_ZL9selectPin>
	selectPort = &csPort;
     c1e:	30 93 fd 02 	sts	0x02FD, r19	; 0x8002fd <_ZL10selectPort+0x1>
     c22:	20 93 fc 02 	sts	0x02FC, r18	; 0x8002fc <_ZL10selectPort>
    initSPI(csDDR);
     c26:	ca 01       	movw	r24, r20
     c28:	de df       	rcall	.-68     	; 0xbe6 <_ZN8ENC28J607initSPIERVh>

    writeOp(ENC28J60_SOFT_RESET, 0, ENC28J60_SOFT_RESET);
     c2a:	4f ef       	ldi	r20, 0xFF	; 255
     c2c:	60 e0       	ldi	r22, 0x00	; 0
     c2e:	8f ef       	ldi	r24, 0xFF	; 255
     c30:	5b df       	rcall	.-330    	; 0xae8 <_ZL7writeOphhh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c32:	8f e3       	ldi	r24, 0x3F	; 63
     c34:	9f e1       	ldi	r25, 0x1F	; 31
     c36:	01 97       	sbiw	r24, 0x01	; 1
     c38:	f1 f7       	brne	.-4      	; 0xc36 <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0x2c>
     c3a:	00 c0       	rjmp	.+0      	; 0xc3c <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0x32>
     c3c:	00 00       	nop
	_delay_ms(2);
    while (!readOp(ENC28J60_READ_CTRL_REG, ESTAT) & ESTAT_CLKRDY)
     c3e:	6d e1       	ldi	r22, 0x1D	; 29
     c40:	80 e0       	ldi	r24, 0x00	; 0
     c42:	32 df       	rcall	.-412    	; 0xaa8 <_ZL6readOphh>
     c44:	88 23       	and	r24, r24
     c46:	d9 f3       	breq	.-10     	; 0xc3e <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0x34>
        ;

    writeReg(ERXST, RXSTART_INIT);
     c48:	60 e0       	ldi	r22, 0x00	; 0
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	88 e0       	ldi	r24, 0x08	; 8
     c4e:	bf df       	rcall	.-130    	; 0xbce <_ZL8writeReghj>
    writeReg(ERXRDPT, RXSTART_INIT);
     c50:	60 e0       	ldi	r22, 0x00	; 0
     c52:	70 e0       	ldi	r23, 0x00	; 0
     c54:	8c e0       	ldi	r24, 0x0C	; 12
     c56:	bb df       	rcall	.-138    	; 0xbce <_ZL8writeReghj>
    writeReg(ERXND, RXSTOP_INIT);
     c58:	6f ef       	ldi	r22, 0xFF	; 255
     c5a:	7b e0       	ldi	r23, 0x0B	; 11
     c5c:	8a e0       	ldi	r24, 0x0A	; 10
     c5e:	b7 df       	rcall	.-146    	; 0xbce <_ZL8writeReghj>
    writeReg(ETXST, TXSTART_INIT);
     c60:	60 e0       	ldi	r22, 0x00	; 0
     c62:	7c e0       	ldi	r23, 0x0C	; 12
     c64:	84 e0       	ldi	r24, 0x04	; 4
     c66:	b3 df       	rcall	.-154    	; 0xbce <_ZL8writeReghj>
    writeReg(ETXND, TXSTOP_INIT);
     c68:	6f ef       	ldi	r22, 0xFF	; 255
     c6a:	71 e1       	ldi	r23, 0x11	; 17
     c6c:	86 e0       	ldi	r24, 0x06	; 6
     c6e:	af df       	rcall	.-162    	; 0xbce <_ZL8writeReghj>

    writeRegByte(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN|ERXFCON_PMEN|ERXFCON_BCEN);
     c70:	61 eb       	ldi	r22, 0xB1	; 177
     c72:	88 e3       	ldi	r24, 0x38	; 56
     c74:	a0 df       	rcall	.-192    	; 0xbb6 <_ZL12writeRegBytehh>
    writeReg(EPMM0, 0x303f);
     c76:	6f e3       	ldi	r22, 0x3F	; 63
     c78:	70 e3       	ldi	r23, 0x30	; 48
     c7a:	88 e2       	ldi	r24, 0x28	; 40
     c7c:	a8 df       	rcall	.-176    	; 0xbce <_ZL8writeReghj>
    writeReg(EPMCS, 0xf7f9);
     c7e:	69 ef       	ldi	r22, 0xF9	; 249
     c80:	77 ef       	ldi	r23, 0xF7	; 247
     c82:	80 e3       	ldi	r24, 0x30	; 48
     c84:	a4 df       	rcall	.-184    	; 0xbce <_ZL8writeReghj>
    writeRegByte(MACON1, MACON1_MARXEN);
     c86:	61 e0       	ldi	r22, 0x01	; 1
     c88:	80 ec       	ldi	r24, 0xC0	; 192
     c8a:	95 df       	rcall	.-214    	; 0xbb6 <_ZL12writeRegBytehh>
    writeOp(ENC28J60_BIT_FIELD_SET, MACON3,
            MACON3_PADCFG0|MACON3_TXCRCEN|MACON3_FRMLNEN);
     c8c:	42 e3       	ldi	r20, 0x32	; 50
     c8e:	62 ec       	ldi	r22, 0xC2	; 194
     c90:	80 e8       	ldi	r24, 0x80	; 128
     c92:	2a df       	rcall	.-428    	; 0xae8 <_ZL7writeOphhh>
    writeReg(MAIPG, 0x0C12);
     c94:	62 e1       	ldi	r22, 0x12	; 18
     c96:	7c e0       	ldi	r23, 0x0C	; 12
     c98:	86 ec       	ldi	r24, 0xC6	; 198
    writeRegByte(MABBIPG, 0x12);
     c9a:	99 df       	rcall	.-206    	; 0xbce <_ZL8writeReghj>
     c9c:	62 e1       	ldi	r22, 0x12	; 18
     c9e:	84 ec       	ldi	r24, 0xC4	; 196
    writeReg(MAMXFL, MAX_FRAMELEN);
     ca0:	8a df       	rcall	.-236    	; 0xbb6 <_ZL12writeRegBytehh>
     ca2:	6c ed       	ldi	r22, 0xDC	; 220
     ca4:	75 e0       	ldi	r23, 0x05	; 5
    writeRegByte(MAADR5, macaddr[0]);
     ca6:	8a ec       	ldi	r24, 0xCA	; 202
     ca8:	92 df       	rcall	.-220    	; 0xbce <_ZL8writeReghj>
     caa:	68 81       	ld	r22, Y
    writeRegByte(MAADR4, macaddr[1]);
     cac:	84 ee       	ldi	r24, 0xE4	; 228
     cae:	83 df       	rcall	.-250    	; 0xbb6 <_ZL12writeRegBytehh>
     cb0:	69 81       	ldd	r22, Y+1	; 0x01
    writeRegByte(MAADR3, macaddr[2]);
     cb2:	85 ee       	ldi	r24, 0xE5	; 229
     cb4:	80 df       	rcall	.-256    	; 0xbb6 <_ZL12writeRegBytehh>
    writeRegByte(MAADR2, macaddr[3]);
     cb6:	6a 81       	ldd	r22, Y+2	; 0x02
     cb8:	82 ee       	ldi	r24, 0xE2	; 226
     cba:	7d df       	rcall	.-262    	; 0xbb6 <_ZL12writeRegBytehh>
    writeRegByte(MAADR1, macaddr[4]);
     cbc:	6b 81       	ldd	r22, Y+3	; 0x03
     cbe:	83 ee       	ldi	r24, 0xE3	; 227
     cc0:	7a df       	rcall	.-268    	; 0xbb6 <_ZL12writeRegBytehh>
    writeRegByte(MAADR0, macaddr[5]);
     cc2:	6c 81       	ldd	r22, Y+4	; 0x04
     cc4:	80 ee       	ldi	r24, 0xE0	; 224
     cc6:	77 df       	rcall	.-274    	; 0xbb6 <_ZL12writeRegBytehh>
    writeRegByte(MICMD, 0x00);
    return readRegByte(MIRD+1);
}

static void writePhy (uint8_t address, uint16_t data) {
    writeRegByte(MIREGADR, address);
     cc8:	6d 81       	ldd	r22, Y+5	; 0x05
     cca:	81 ee       	ldi	r24, 0xE1	; 225
     ccc:	74 df       	rcall	.-280    	; 0xbb6 <_ZL12writeRegBytehh>
    writeReg(MIWR, data);
     cce:	60 e1       	ldi	r22, 0x10	; 16
     cd0:	84 ed       	ldi	r24, 0xD4	; 212
     cd2:	71 df       	rcall	.-286    	; 0xbb6 <_ZL12writeRegBytehh>
     cd4:	60 e0       	ldi	r22, 0x00	; 0
     cd6:	71 e0       	ldi	r23, 0x01	; 1
    while (readRegByte(MISTAT) & MISTAT_BUSY)
     cd8:	86 ed       	ldi	r24, 0xD6	; 214
     cda:	79 df       	rcall	.-270    	; 0xbce <_ZL8writeReghj>
     cdc:	8a ee       	ldi	r24, 0xEA	; 234
     cde:	63 df       	rcall	.-314    	; 0xba6 <_ZL11readRegByteh>
     ce0:	80 fd       	sbrc	r24, 0
    writeRegByte(MAADR3, macaddr[2]);
    writeRegByte(MAADR2, macaddr[3]);
    writeRegByte(MAADR1, macaddr[4]);
    writeRegByte(MAADR0, macaddr[5]);
    writePhy(PHCON2, PHCON2_HDLDIS);
    SetBank(ECON1);
     ce2:	fc cf       	rjmp	.-8      	; 0xcdc <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0xd2>
     ce4:	8f e1       	ldi	r24, 0x1F	; 31
     ce6:	3a df       	rcall	.-396    	; 0xb5c <_ZL7SetBankh>
    writeOp(ENC28J60_BIT_FIELD_SET, EIE, EIE_INTIE|EIE_PKTIE);
     ce8:	40 ec       	ldi	r20, 0xC0	; 192
     cea:	6b e1       	ldi	r22, 0x1B	; 27
     cec:	80 e8       	ldi	r24, 0x80	; 128
     cee:	fc de       	rcall	.-520    	; 0xae8 <_ZL7writeOphhh>
     cf0:	44 e0       	ldi	r20, 0x04	; 4
    writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN);
     cf2:	6f e1       	ldi	r22, 0x1F	; 31
     cf4:	80 e8       	ldi	r24, 0x80	; 128
     cf6:	f8 de       	rcall	.-528    	; 0xae8 <_ZL7writeOphhh>
     cf8:	82 e7       	ldi	r24, 0x72	; 114
     cfa:	55 df       	rcall	.-342    	; 0xba6 <_ZL11readRegByteh>

    uint8_t rev = readRegByte(EREVID);
     cfc:	86 30       	cpi	r24, 0x06	; 6
     cfe:	08 f0       	brcs	.+2      	; 0xd02 <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0xf8>
     d00:	8f 5f       	subi	r24, 0xFF	; 255
    // microchip forgot to step the number on the silicon when they
    // released the revision B7. 6 is now rev B7. We still have
    // to see what they do when they release B8. At the moment
    // there is no B8 out yet
    if (rev > 5) ++rev;
     d02:	df 91       	pop	r29
     d04:	cf 91       	pop	r28
     d06:	0f 91       	pop	r16
    return rev;
}
     d08:	08 95       	ret

00000d0a <_ZN8ENC28J608isLinkUpEv>:
     d0a:	61 e1       	ldi	r22, 0x11	; 17
     d0c:	84 ed       	ldi	r24, 0xD4	; 212
     d0e:	53 df       	rcall	.-346    	; 0xbb6 <_ZL12writeRegBytehh>
    writeRegByte(address + 1, data >> 8);
}

static uint16_t readPhyByte (uint8_t address) {
    writeRegByte(MIREGADR, address);
    writeRegByte(MICMD, MICMD_MIIRD);
     d10:	61 e0       	ldi	r22, 0x01	; 1
     d12:	82 ed       	ldi	r24, 0xD2	; 210
     d14:	50 df       	rcall	.-352    	; 0xbb6 <_ZL12writeRegBytehh>
    while (readRegByte(MISTAT) & MISTAT_BUSY)
     d16:	8a ee       	ldi	r24, 0xEA	; 234
     d18:	46 df       	rcall	.-372    	; 0xba6 <_ZL11readRegByteh>
     d1a:	80 fd       	sbrc	r24, 0
     d1c:	fc cf       	rjmp	.-8      	; 0xd16 <_ZN8ENC28J608isLinkUpEv+0xc>
        ;
    writeRegByte(MICMD, 0x00);
     d1e:	60 e0       	ldi	r22, 0x00	; 0
     d20:	82 ed       	ldi	r24, 0xD2	; 210
     d22:	49 df       	rcall	.-366    	; 0xbb6 <_ZL12writeRegBytehh>
    return readRegByte(MIRD+1);
     d24:	89 ed       	ldi	r24, 0xD9	; 217
     d26:	3f df       	rcall	.-386    	; 0xba6 <_ZL11readRegByteh>
     d28:	82 fb       	bst	r24, 2
    return rev;
}

bool ENC28J60::isLinkUp() {
    return (readPhyByte(PHSTAT2) >> 2) & 1;
}
     d2a:	88 27       	eor	r24, r24
     d2c:	80 f9       	bld	r24, 0
     d2e:	08 95       	ret

00000d30 <_ZN8ENC28J6010packetSendEj>:
     d30:	af 92       	push	r10

struct transmit_status_vector {
    uint8_t bytes[7];
};

void ENC28J60::packetSend(uint16_t len) {
     d32:	bf 92       	push	r11
     d34:	cf 92       	push	r12
     d36:	df 92       	push	r13
     d38:	ef 92       	push	r14
     d3a:	ff 92       	push	r15
     d3c:	0f 93       	push	r16
     d3e:	1f 93       	push	r17
     d40:	cf 93       	push	r28
     d42:	df 93       	push	r29
     d44:	7c 01       	movw	r14, r24
        writeOp(ENC28J60_BIT_FIELD_CLR, EIR, EIR_TXERIF|EIR_TXIF);

        // prepare new transmission
        if (retry == 0) {
            writeReg(EWRPT, TXSTART_INIT);
            writeReg(ETXND, TXSTART_INIT+len);
     d46:	6c 01       	movw	r12, r24
     d48:	84 ef       	ldi	r24, 0xF4	; 244
     d4a:	d8 1a       	sub	r13, r24

	static void write(const void *buf, uint16_t nbyte){
		if(nbyte == 0) return;
		
		const uint8_t* buff = (const uint8_t*)(buf);
		SPDR = *buff;
     d4c:	0f 2e       	mov	r0, r31
     d4e:	f1 e0       	ldi	r31, 0x01	; 1
     d50:	af 2e       	mov	r10, r31
     d52:	f3 e0       	ldi	r31, 0x03	; 3
     d54:	bf 2e       	mov	r11, r31
     d56:	f0 2d       	mov	r31, r0
     d58:	87 01       	movw	r16, r14
     d5a:	0f 5f       	subi	r16, 0xFF	; 255
     d5c:	1c 4f       	sbci	r17, 0xFC	; 252
        // the Microchip TCP/IP stack implementation used to first check
        // whether TXERIF is set and only then reset the transmit logic
        // but this has been changed in later versions; possibly they
        // have a reason for this; they don't mention this in the errata
        // sheet
        writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRST);
     d5e:	40 e8       	ldi	r20, 0x80	; 128
     d60:	6f e1       	ldi	r22, 0x1F	; 31
     d62:	80 e8       	ldi	r24, 0x80	; 128
     d64:	c1 de       	rcall	.-638    	; 0xae8 <_ZL7writeOphhh>
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRST);
     d66:	40 e8       	ldi	r20, 0x80	; 128
     d68:	6f e1       	ldi	r22, 0x1F	; 31
     d6a:	80 ea       	ldi	r24, 0xA0	; 160
     d6c:	bd de       	rcall	.-646    	; 0xae8 <_ZL7writeOphhh>
        writeOp(ENC28J60_BIT_FIELD_CLR, EIR, EIR_TXERIF|EIR_TXIF);
     d6e:	4a e0       	ldi	r20, 0x0A	; 10
     d70:	6c e1       	ldi	r22, 0x1C	; 28
     d72:	80 ea       	ldi	r24, 0xA0	; 160
     d74:	b9 de       	rcall	.-654    	; 0xae8 <_ZL7writeOphhh>

        // prepare new transmission
        if (retry == 0) {
            writeReg(EWRPT, TXSTART_INIT);
     d76:	60 e0       	ldi	r22, 0x00	; 0
     d78:	7c e0       	ldi	r23, 0x0C	; 12
     d7a:	82 e0       	ldi	r24, 0x02	; 2
            writeReg(ETXND, TXSTART_INIT+len);
     d7c:	28 df       	rcall	.-432    	; 0xbce <_ZL8writeReghj>
     d7e:	b6 01       	movw	r22, r12
     d80:	86 e0       	ldi	r24, 0x06	; 6
            writeOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
     d82:	25 df       	rcall	.-438    	; 0xbce <_ZL8writeReghj>
     d84:	40 e0       	ldi	r20, 0x00	; 0
     d86:	60 e0       	ldi	r22, 0x00	; 0
     d88:	8a e7       	ldi	r24, 0x7A	; 122
     d8a:	ae de       	rcall	.-676    	; 0xae8 <_ZL7writeOphhh>
    }
    disableChip();
}

static void writeBuf(uint16_t len, const uint8_t* data) {
    enableChip();
     d8c:	78 de       	rcall	.-784    	; 0xa7e <_ZL10enableChipv>
     d8e:	e1 14       	cp	r14, r1
    if (len != 0) {
     d90:	f1 04       	cpc	r15, r1
     d92:	e1 f0       	breq	.+56     	; 0xdcc <_ZN8ENC28J6010packetSendEj+0x9c>
     d94:	8a e7       	ldi	r24, 0x7A	; 122
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     d96:	8e bd       	out	0x2e, r24	; 46
     d98:	00 00       	nop
		asm volatile("nop");
     d9a:	0d b4       	in	r0, 0x2d	; 45
		while(!(SPSR & _BV(SPIF)));
     d9c:	07 fe       	sbrs	r0, 7
     d9e:	fd cf       	rjmp	.-6      	; 0xd9a <_ZN8ENC28J6010packetSendEj+0x6a>
     da0:	f5 01       	movw	r30, r10

	static void write(const void *buf, uint16_t nbyte){
		if(nbyte == 0) return;
		
		const uint8_t* buff = (const uint8_t*)(buf);
		SPDR = *buff;
     da2:	80 81       	ld	r24, Z
     da4:	8e bd       	out	0x2e, r24	; 46
     da6:	f1 e0       	ldi	r31, 0x01	; 1
		while(--nbyte){
     da8:	ef 16       	cp	r14, r31
     daa:	f1 04       	cpc	r15, r1
     dac:	59 f0       	breq	.+22     	; 0xdc4 <_ZN8ENC28J6010packetSendEj+0x94>
     dae:	e2 e0       	ldi	r30, 0x02	; 2
     db0:	f3 e0       	ldi	r31, 0x03	; 3
     db2:	00 00       	nop
			asm volatile("nop");
     db4:	0d b4       	in	r0, 0x2d	; 45
			while (!(SPSR & _BV(SPIF))) ;
     db6:	07 fe       	sbrs	r0, 7
     db8:	fd cf       	rjmp	.-6      	; 0xdb4 <_ZN8ENC28J6010packetSendEj+0x84>
     dba:	81 91       	ld	r24, Z+
			SPDR = *++buff;
     dbc:	8e bd       	out	0x2e, r24	; 46
     dbe:	e0 17       	cp	r30, r16
	static void write(const void *buf, uint16_t nbyte){
		if(nbyte == 0) return;
		
		const uint8_t* buff = (const uint8_t*)(buf);
		SPDR = *buff;
		while(--nbyte){
     dc0:	f1 07       	cpc	r31, r17
     dc2:	b9 f7       	brne	.-18     	; 0xdb2 <_ZN8ENC28J6010packetSendEj+0x82>
			asm volatile("nop");
			while (!(SPSR & _BV(SPIF))) ;
			SPDR = *++buff;
		}
		asm volatile("nop");
     dc4:	00 00       	nop
		while (!(SPSR & _BV(SPIF))) ;
     dc6:	0d b4       	in	r0, 0x2d	; 45
     dc8:	07 fe       	sbrs	r0, 7
        SPI.write8(ENC28J60_WRITE_BUF_MEM);

        SPI.write(data, len);
    }
    disableChip();
     dca:	fd cf       	rjmp	.-6      	; 0xdc6 <_ZN8ENC28J6010packetSendEj+0x96>
            writeOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
            writeBuf(len, buffer);
        }

        // initiate transmission
        writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
     dcc:	63 de       	rcall	.-826    	; 0xa94 <_ZL11disableChipv>
     dce:	48 e0       	ldi	r20, 0x08	; 8
     dd0:	6f e1       	ldi	r22, 0x1F	; 31
     dd2:	80 e8       	ldi	r24, 0x80	; 128
     dd4:	89 de       	rcall	.-750    	; 0xae8 <_ZL7writeOphhh>
        // wait until transmission has finished; referring to the data sheet and
        // to the errata (Errata Issue 13; Example 1) you only need to wait until either
        // TXIF or TXERIF gets set; however this leads to hangs; apparently Microchip
        // realized this and in later implementations of their tcp/ip stack they introduced
        // a counter to avoid hangs; of course they didn't update the errata sheet
        uint16_t count = 0;
     dd6:	c0 e0       	ldi	r28, 0x00	; 0
     dd8:	d0 e0       	ldi	r29, 0x00	; 0
        while ((readRegByte(EIR) & (EIR_TXIF | EIR_TXERIF)) == 0 && ++count < 1000U)
     dda:	8c e1       	ldi	r24, 0x1C	; 28
     ddc:	e4 de       	rcall	.-568    	; 0xba6 <_ZL11readRegByteh>
     dde:	8a 70       	andi	r24, 0x0A	; 10
     de0:	31 f4       	brne	.+12     	; 0xdee <_ZN8ENC28J6010packetSendEj+0xbe>
     de2:	21 96       	adiw	r28, 0x01	; 1
     de4:	c8 3e       	cpi	r28, 0xE8	; 232
     de6:	83 e0       	ldi	r24, 0x03	; 3
     de8:	d8 07       	cpc	r29, r24
     dea:	b9 f7       	brne	.-18     	; 0xdda <_ZN8ENC28J6010packetSendEj+0xaa>
     dec:	0c c0       	rjmp	.+24     	; 0xe06 <_ZN8ENC28J6010packetSendEj+0xd6>
            ;

        if (!(readRegByte(EIR) & EIR_TXERIF) && count < 1000U) {
     dee:	8c e1       	ldi	r24, 0x1C	; 28
     df0:	da de       	rcall	.-588    	; 0xba6 <_ZL11readRegByteh>
     df2:	81 fd       	sbrc	r24, 1
     df4:	03 c0       	rjmp	.+6      	; 0xdfc <_ZN8ENC28J6010packetSendEj+0xcc>
     df6:	c8 3e       	cpi	r28, 0xE8	; 232
     df8:	d3 40       	sbci	r29, 0x03	; 3
            // no error; start new transmission
            break;
        }

        // cancel previous transmission if stuck
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRTS);
     dfa:	40 f0       	brcs	.+16     	; 0xe0c <_ZN8ENC28J6010packetSendEj+0xdc>
     dfc:	48 e0       	ldi	r20, 0x08	; 8
     dfe:	6f e1       	ldi	r22, 0x1F	; 31
     e00:	80 ea       	ldi	r24, 0xA0	; 160
     e02:	72 de       	rcall	.-796    	; 0xae8 <_ZL7writeOphhh>
};

void ENC28J60::packetSend(uint16_t len) {
    uint8_t retry = 0;

    while (1) {
     e04:	ac cf       	rjmp	.-168    	; 0xd5e <_ZN8ENC28J6010packetSendEj+0x2e>
        // a counter to avoid hangs; of course they didn't update the errata sheet
        uint16_t count = 0;
        while ((readRegByte(EIR) & (EIR_TXIF | EIR_TXERIF)) == 0 && ++count < 1000U)
            ;

        if (!(readRegByte(EIR) & EIR_TXERIF) && count < 1000U) {
     e06:	8c e1       	ldi	r24, 0x1C	; 28
     e08:	ce de       	rcall	.-612    	; 0xba6 <_ZL11readRegByteh>
     e0a:	f8 cf       	rjmp	.-16     	; 0xdfc <_ZN8ENC28J6010packetSendEj+0xcc>
     e0c:	df 91       	pop	r29
        }

        // cancel previous transmission if stuck
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRTS);
    }
}
     e0e:	cf 91       	pop	r28
     e10:	1f 91       	pop	r17
     e12:	0f 91       	pop	r16
     e14:	ff 90       	pop	r15
     e16:	ef 90       	pop	r14
     e18:	df 90       	pop	r13
     e1a:	cf 90       	pop	r12
     e1c:	bf 90       	pop	r11
     e1e:	af 90       	pop	r10
     e20:	08 95       	ret

00000e22 <_ZN8ENC28J6013packetReceiveEv>:
     e22:	0f 93       	push	r16


uint16_t ENC28J60::packetReceive() {
     e24:	1f 93       	push	r17
     e26:	cf 93       	push	r28
     e28:	df 93       	push	r29
     e2a:	00 d0       	rcall	.+0      	; 0xe2c <_ZN8ENC28J6013packetReceiveEv+0xa>
     e2c:	00 d0       	rcall	.+0      	; 0xe2e <_ZN8ENC28J6013packetReceiveEv+0xc>
     e2e:	cd b7       	in	r28, 0x3d	; 61
     e30:	de b7       	in	r29, 0x3e	; 62
    static uint16_t gNextPacketPtr = RXSTART_INIT;
    static bool     unreleasedPacket = false;
    uint16_t len = 0;

    if (unreleasedPacket) {
     e32:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <_ZZN8ENC28J6013packetReceiveEvE16unreleasedPacket>
     e36:	88 23       	and	r24, r24
     e38:	91 f0       	breq	.+36     	; 0xe5e <_ZN8ENC28J6013packetReceiveEv+0x3c>
        if (gNextPacketPtr == 0)
     e3a:	60 91 f8 02 	lds	r22, 0x02F8	; 0x8002f8 <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr>
     e3e:	70 91 f9 02 	lds	r23, 0x02F9	; 0x8002f9 <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr+0x1>
     e42:	61 15       	cp	r22, r1
     e44:	71 05       	cpc	r23, r1
     e46:	29 f4       	brne	.+10     	; 0xe52 <_ZN8ENC28J6013packetReceiveEv+0x30>
            writeReg(ERXRDPT, RXSTOP_INIT);
     e48:	6f ef       	ldi	r22, 0xFF	; 255
     e4a:	7b e0       	ldi	r23, 0x0B	; 11
     e4c:	8c e0       	ldi	r24, 0x0C	; 12
     e4e:	bf de       	rcall	.-642    	; 0xbce <_ZL8writeReghj>
     e50:	04 c0       	rjmp	.+8      	; 0xe5a <_ZN8ENC28J6013packetReceiveEv+0x38>
        else
            writeReg(ERXRDPT, gNextPacketPtr - 1);
     e52:	61 50       	subi	r22, 0x01	; 1
     e54:	71 09       	sbc	r23, r1
     e56:	8c e0       	ldi	r24, 0x0C	; 12
     e58:	ba de       	rcall	.-652    	; 0xbce <_ZL8writeReghj>
        unreleasedPacket = false;
     e5a:	10 92 fa 02 	sts	0x02FA, r1	; 0x8002fa <_ZZN8ENC28J6013packetReceiveEvE16unreleasedPacket>
    }

    if (readRegByte(EPKTCNT) > 0) {
     e5e:	89 e3       	ldi	r24, 0x39	; 57
     e60:	a2 de       	rcall	.-700    	; 0xba6 <_ZL11readRegByteh>
     e62:	88 23       	and	r24, r24
     e64:	a9 f1       	breq	.+106    	; 0xed0 <_ZN8ENC28J6013packetReceiveEv+0xae>
        writeReg(ERDPT, gNextPacketPtr);
     e66:	60 91 f8 02 	lds	r22, 0x02F8	; 0x8002f8 <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr>
     e6a:	70 91 f9 02 	lds	r23, 0x02F9	; 0x8002f9 <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr+0x1>
     e6e:	80 e0       	ldi	r24, 0x00	; 0
     e70:	ae de       	rcall	.-676    	; 0xbce <_ZL8writeReghj>
            uint16_t nextPacket;
            uint16_t byteCount;
            uint16_t status;
        } header;

        readBuf(sizeof header, (uint8_t*) &header);
     e72:	be 01       	movw	r22, r28
     e74:	6f 5f       	subi	r22, 0xFF	; 255
     e76:	7f 4f       	sbci	r23, 0xFF	; 255
     e78:	86 e0       	ldi	r24, 0x06	; 6
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	4d de       	rcall	.-870    	; 0xb18 <_ZL7readBufjPh>

        gNextPacketPtr  = header.nextPacket;
     e7e:	89 81       	ldd	r24, Y+1	; 0x01
     e80:	9a 81       	ldd	r25, Y+2	; 0x02
     e82:	90 93 f9 02 	sts	0x02F9, r25	; 0x8002f9 <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr+0x1>
     e86:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr>
        len = header.byteCount - 4; //remove the CRC count
        if (len>bufferSize-1)
            len=bufferSize-1;
        if ((header.status & 0x80)==0)
     e8a:	8d 81       	ldd	r24, Y+5	; 0x05
     e8c:	87 ff       	sbrs	r24, 7
     e8e:	12 c0       	rjmp	.+36     	; 0xeb4 <_ZN8ENC28J6013packetReceiveEv+0x92>

        readBuf(sizeof header, (uint8_t*) &header);

        gNextPacketPtr  = header.nextPacket;
        len = header.byteCount - 4; //remove the CRC count
        if (len>bufferSize-1)
     e90:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <_ZN8ENC28J6010bufferSizeE>
     e94:	90 91 00 03 	lds	r25, 0x0300	; 0x800300 <_ZN8ENC28J6010bufferSizeE+0x1>
     e98:	01 97       	sbiw	r24, 0x01	; 1
        } header;

        readBuf(sizeof header, (uint8_t*) &header);

        gNextPacketPtr  = header.nextPacket;
        len = header.byteCount - 4; //remove the CRC count
     e9a:	0b 81       	ldd	r16, Y+3	; 0x03
     e9c:	1c 81       	ldd	r17, Y+4	; 0x04
     e9e:	04 50       	subi	r16, 0x04	; 4
     ea0:	11 09       	sbc	r17, r1
     ea2:	80 17       	cp	r24, r16
     ea4:	91 07       	cpc	r25, r17
     ea6:	08 f4       	brcc	.+2      	; 0xeaa <_ZN8ENC28J6013packetReceiveEv+0x88>
        if (len>bufferSize-1)
            len=bufferSize-1;
        if ((header.status & 0x80)==0)
            len = 0;
        else
            readBuf(len, buffer);
     ea8:	8c 01       	movw	r16, r24
     eaa:	61 e0       	ldi	r22, 0x01	; 1
     eac:	73 e0       	ldi	r23, 0x03	; 3
     eae:	c8 01       	movw	r24, r16
     eb0:	33 de       	rcall	.-922    	; 0xb18 <_ZL7readBufjPh>
     eb2:	02 c0       	rjmp	.+4      	; 0xeb8 <_ZN8ENC28J6013packetReceiveEv+0x96>
        gNextPacketPtr  = header.nextPacket;
        len = header.byteCount - 4; //remove the CRC count
        if (len>bufferSize-1)
            len=bufferSize-1;
        if ((header.status & 0x80)==0)
            len = 0;
     eb4:	00 e0       	ldi	r16, 0x00	; 0
     eb6:	10 e0       	ldi	r17, 0x00	; 0
        else
            readBuf(len, buffer);
        buffer[len] = 0;
     eb8:	f8 01       	movw	r30, r16
     eba:	ef 5f       	subi	r30, 0xFF	; 255
     ebc:	fc 4f       	sbci	r31, 0xFC	; 252
     ebe:	10 82       	st	Z, r1
        unreleasedPacket = true;
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <_ZZN8ENC28J6013packetReceiveEvE16unreleasedPacket>

        writeOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
     ec6:	40 e4       	ldi	r20, 0x40	; 64
     ec8:	6e e1       	ldi	r22, 0x1E	; 30
     eca:	80 e8       	ldi	r24, 0x80	; 128
     ecc:	0d de       	rcall	.-998    	; 0xae8 <_ZL7writeOphhh>
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <_ZN8ENC28J6013packetReceiveEv+0xb2>


uint16_t ENC28J60::packetReceive() {
    static uint16_t gNextPacketPtr = RXSTART_INIT;
    static bool     unreleasedPacket = false;
    uint16_t len = 0;
     ed0:	00 e0       	ldi	r16, 0x00	; 0
     ed2:	10 e0       	ldi	r17, 0x00	; 0
        unreleasedPacket = true;

        writeOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
    }
    return len;
}
     ed4:	c8 01       	movw	r24, r16
     ed6:	26 96       	adiw	r28, 0x06	; 6
     ed8:	0f b6       	in	r0, 0x3f	; 63
     eda:	f8 94       	cli
     edc:	de bf       	out	0x3e, r29	; 62
     ede:	0f be       	out	0x3f, r0	; 63
     ee0:	cd bf       	out	0x3d, r28	; 61
     ee2:	df 91       	pop	r29
     ee4:	cf 91       	pop	r28
     ee6:	1f 91       	pop	r17
     ee8:	0f 91       	pop	r16
     eea:	08 95       	ret

00000eec <_ZN9EtherCard5beginEPKhRVhS3_h>:
uint16_t EtherCard::delaycnt = 0; //request gateway ARP lookup

uint8_t Ethernet::buffer[ETHER_CARD_BUFFER_SIZE]; // tcp/ip send and receive buffer

uint8_t EtherCard::begin (const uint8_t* macaddr,
                          Register& csDDR, Register& csPort, uint8_t csPin) {
     eec:	ef 92       	push	r14
     eee:	ff 92       	push	r15
     ef0:	0f 93       	push	r16
     ef2:	cf 93       	push	r28
     ef4:	df 93       	push	r29
     ef6:	eb 01       	movw	r28, r22
     ef8:	7a 01       	movw	r14, r20
     efa:	02 2f       	mov	r16, r18

    copyMac(mymac, macaddr);
     efc:	bc 01       	movw	r22, r24
     efe:	8b e1       	ldi	r24, 0x1B	; 27
     f00:	95 e0       	ldi	r25, 0x05	; 5
     f02:	c9 d3       	rcall	.+1938   	; 0x1696 <_ZN9EtherCard7copyMacEPhPKh>
    return initialize(ETHER_CARD_BUFFER_SIZE, mymac, csDDR, csPort, csPin);
     f04:	97 01       	movw	r18, r14
     f06:	ae 01       	movw	r20, r28
     f08:	6b e1       	ldi	r22, 0x1B	; 27
     f0a:	75 e0       	ldi	r23, 0x05	; 5
     f0c:	80 e0       	ldi	r24, 0x00	; 0
     f0e:	92 e0       	ldi	r25, 0x02	; 2
     f10:	7c de       	rcall	.-776    	; 0xc0a <_ZN8ENC28J6010initializeEjPKhRVhS3_h>
}
     f12:	df 91       	pop	r29
     f14:	cf 91       	pop	r28
     f16:	0f 91       	pop	r16
     f18:	ff 90       	pop	r15
     f1a:	ef 90       	pop	r14
     f1c:	08 95       	ret

00000f1e <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_>:

bool EtherCard::staticSetup (const uint8_t* my_ip,
                             const uint8_t* gw_ip,
                             const uint8_t* dns_ip,
                             const uint8_t* mask) {
     f1e:	ef 92       	push	r14
     f20:	ff 92       	push	r15
     f22:	0f 93       	push	r16
     f24:	1f 93       	push	r17
     f26:	cf 93       	push	r28
     f28:	df 93       	push	r29
     f2a:	7b 01       	movw	r14, r22
     f2c:	8a 01       	movw	r16, r20
     f2e:	e9 01       	movw	r28, r18

    if (my_ip != 0)
     f30:	00 97       	sbiw	r24, 0x00	; 0
     f32:	21 f0       	breq	.+8      	; 0xf3c <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x1e>
        copyIp(myip, my_ip);
     f34:	bc 01       	movw	r22, r24
     f36:	87 e1       	ldi	r24, 0x17	; 23
     f38:	95 e0       	ldi	r25, 0x05	; 5
     f3a:	a0 d3       	rcall	.+1856   	; 0x167c <_ZN9EtherCard6copyIpEPhPKh>
    if (gw_ip != 0)
     f3c:	e1 14       	cp	r14, r1
     f3e:	f1 04       	cpc	r15, r1
     f40:	11 f0       	breq	.+4      	; 0xf46 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x28>
        setGwIp(gw_ip);
     f42:	c7 01       	movw	r24, r14
     f44:	bd d1       	rcall	.+890    	; 0x12c0 <_ZN9EtherCard7setGwIpEPKh>
    if (dns_ip != 0)
     f46:	01 15       	cp	r16, r1
     f48:	11 05       	cpc	r17, r1
     f4a:	21 f0       	breq	.+8      	; 0xf54 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x36>
        copyIp(dnsip, dns_ip);
     f4c:	b8 01       	movw	r22, r16
     f4e:	87 e0       	ldi	r24, 0x07	; 7
     f50:	95 e0       	ldi	r25, 0x05	; 5
     f52:	94 d3       	rcall	.+1832   	; 0x167c <_ZN9EtherCard6copyIpEPhPKh>
    if(mask != 0)
     f54:	20 97       	sbiw	r28, 0x00	; 0
     f56:	21 f0       	breq	.+8      	; 0xf60 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x42>
        copyIp(netmask, mask);
     f58:	be 01       	movw	r22, r28
     f5a:	83 e1       	ldi	r24, 0x13	; 19
     f5c:	95 e0       	ldi	r25, 0x05	; 5
    updateBroadcastAddress();
     f5e:	8e d3       	rcall	.+1820   	; 0x167c <_ZN9EtherCard6copyIpEPhPKh>
     f60:	bb d1       	rcall	.+886    	; 0x12d8 <_ZN9EtherCard22updateBroadcastAddressEv>
    delaycnt = 0; //request gateway ARP lookup
     f62:	10 92 02 05 	sts	0x0502, r1	; 0x800502 <_ZN9EtherCard8delaycntE+0x1>
     f66:	10 92 01 05 	sts	0x0501, r1	; 0x800501 <_ZN9EtherCard8delaycntE>
    return true;
}
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	df 91       	pop	r29
     f6e:	cf 91       	pop	r28
     f70:	1f 91       	pop	r17
     f72:	0f 91       	pop	r16
     f74:	ff 90       	pop	r15
     f76:	ef 90       	pop	r14
     f78:	08 95       	ret

00000f7a <_ZL13fill_checksumhhjh>:
    for(uint8_t i=0; i<IP_LEN; i++)
        broadcastip[i] = myip[i] | ~netmask[i];
}

void EtherCard::registerPingCallback (void (*callback)(uint8_t *srcip)) {
    icmp_cb = callback;
     f7a:	cf 92       	push	r12
     f7c:	df 92       	push	r13
     f7e:	ef 92       	push	r14
     f80:	ff 92       	push	r15
     f82:	cf 93       	push	r28
     f84:	df 93       	push	r29
     f86:	c6 2f       	mov	r28, r22
     f88:	d0 e0       	ldi	r29, 0x00	; 0
     f8a:	cf 5f       	subi	r28, 0xFF	; 255
     f8c:	dc 4f       	sbci	r29, 0xFC	; 252
     f8e:	21 30       	cpi	r18, 0x01	; 1
     f90:	81 f4       	brne	.+32     	; 0xfb2 <_ZL13fill_checksumhhjh+0x38>
     f92:	6a 01       	movw	r12, r20
     f94:	99 e0       	ldi	r25, 0x09	; 9
     f96:	c9 0e       	add	r12, r25
     f98:	d1 1c       	adc	r13, r1
     f9a:	e1 2c       	mov	r14, r1
     f9c:	f1 2c       	mov	r15, r1
     f9e:	03 c0       	rjmp	.+6      	; 0xfa6 <_ZL13fill_checksumhhjh+0x2c>
     fa0:	c1 2c       	mov	r12, r1
     fa2:	d1 2c       	mov	r13, r1
     fa4:	76 01       	movw	r14, r12
     fa6:	42 30       	cpi	r20, 0x02	; 2
     fa8:	51 05       	cpc	r21, r1
     faa:	28 f1       	brcs	.+74     	; 0xff6 <_ZL13fill_checksumhhjh+0x7c>
     fac:	fe 01       	movw	r30, r28
     fae:	da 01       	movw	r26, r20
     fb0:	09 c0       	rjmp	.+18     	; 0xfc4 <_ZL13fill_checksumhhjh+0x4a>
     fb2:	22 30       	cpi	r18, 0x02	; 2
     fb4:	a9 f7       	brne	.-22     	; 0xfa0 <_ZL13fill_checksumhhjh+0x26>
     fb6:	6a 01       	movw	r12, r20
     fb8:	92 e0       	ldi	r25, 0x02	; 2
     fba:	c9 1a       	sub	r12, r25
     fbc:	d1 08       	sbc	r13, r1
     fbe:	e1 2c       	mov	r14, r1
     fc0:	f1 2c       	mov	r15, r1
     fc2:	f1 cf       	rjmp	.-30     	; 0xfa6 <_ZL13fill_checksumhhjh+0x2c>
     fc4:	20 81       	ld	r18, Z
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	32 2f       	mov	r19, r18
     fca:	22 27       	eor	r18, r18
     fcc:	91 81       	ldd	r25, Z+1	; 0x01
     fce:	29 2b       	or	r18, r25
     fd0:	c2 0e       	add	r12, r18
     fd2:	d3 1e       	adc	r13, r19
     fd4:	e1 1c       	adc	r14, r1
     fd6:	f1 1c       	adc	r15, r1
     fd8:	32 96       	adiw	r30, 0x02	; 2
     fda:	12 97       	sbiw	r26, 0x02	; 2
     fdc:	a2 30       	cpi	r26, 0x02	; 2
     fde:	b1 05       	cpc	r27, r1
     fe0:	88 f7       	brcc	.-30     	; 0xfc4 <_ZL13fill_checksumhhjh+0x4a>
     fe2:	9a 01       	movw	r18, r20
     fe4:	22 50       	subi	r18, 0x02	; 2
     fe6:	31 09       	sbc	r19, r1
     fe8:	2e 7f       	andi	r18, 0xFE	; 254
     fea:	2e 5f       	subi	r18, 0xFE	; 254
     fec:	3f 4f       	sbci	r19, 0xFF	; 255
     fee:	c2 0f       	add	r28, r18
     ff0:	d3 1f       	adc	r29, r19
     ff2:	41 70       	andi	r20, 0x01	; 1
     ff4:	55 27       	eor	r21, r21
     ff6:	45 2b       	or	r20, r21
     ff8:	61 f0       	breq	.+24     	; 0x1012 <_ZL13fill_checksumhhjh+0x98>
     ffa:	48 81       	ld	r20, Y
     ffc:	50 e0       	ldi	r21, 0x00	; 0
     ffe:	60 e0       	ldi	r22, 0x00	; 0
    1000:	70 e0       	ldi	r23, 0x00	; 0
    1002:	76 2f       	mov	r23, r22
    1004:	65 2f       	mov	r22, r21
    1006:	54 2f       	mov	r21, r20
    1008:	44 27       	eor	r20, r20
    100a:	c4 0e       	add	r12, r20
    100c:	d5 1e       	adc	r13, r21
    100e:	e6 1e       	adc	r14, r22
    1010:	f7 1e       	adc	r15, r23
    1012:	a7 01       	movw	r20, r14
    1014:	66 27       	eor	r22, r22
    1016:	77 27       	eor	r23, r23
    1018:	41 15       	cp	r20, r1
    101a:	51 05       	cpc	r21, r1
    101c:	61 05       	cpc	r22, r1
    101e:	71 05       	cpc	r23, r1
    1020:	71 f0       	breq	.+28     	; 0x103e <_ZL13fill_checksumhhjh+0xc4>
    1022:	ee 24       	eor	r14, r14
    1024:	ff 24       	eor	r15, r15
    1026:	c4 0e       	add	r12, r20
    1028:	d5 1e       	adc	r13, r21
    102a:	e6 1e       	adc	r14, r22
    102c:	f7 1e       	adc	r15, r23
    102e:	a7 01       	movw	r20, r14
    1030:	66 27       	eor	r22, r22
    1032:	77 27       	eor	r23, r23
    1034:	41 15       	cp	r20, r1
    1036:	51 05       	cpc	r21, r1
    1038:	61 05       	cpc	r22, r1
    103a:	71 05       	cpc	r23, r1
    103c:	91 f7       	brne	.-28     	; 0x1022 <_ZL13fill_checksumhhjh+0xa8>
    103e:	c0 94       	com	r12
    1040:	d0 94       	com	r13
    1042:	e8 2f       	mov	r30, r24
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	ef 5f       	subi	r30, 0xFF	; 255
    1048:	fc 4f       	sbci	r31, 0xFC	; 252
    104a:	d0 82       	st	Z, r13
    104c:	c1 82       	std	Z+1, r12	; 0x01
    104e:	df 91       	pop	r29
    1050:	cf 91       	pop	r28
    1052:	ff 90       	pop	r15
    1054:	ef 90       	pop	r14
    1056:	df 90       	pop	r13
    1058:	cf 90       	pop	r12
    105a:	08 95       	ret

0000105c <_ZL6is_lanPKhS0_>:
    105c:	cf 93       	push	r28
    105e:	df 93       	push	r29
    1060:	fc 01       	movw	r30, r24
    1062:	20 81       	ld	r18, Z
    1064:	22 23       	and	r18, r18
    1066:	d1 f0       	breq	.+52     	; 0x109c <_ZL6is_lanPKhS0_+0x40>
    1068:	fb 01       	movw	r30, r22
    106a:	30 81       	ld	r19, Z
    106c:	33 23       	and	r19, r19
    106e:	c1 f0       	breq	.+48     	; 0x10a0 <_ZL6is_lanPKhS0_+0x44>
    1070:	23 27       	eor	r18, r19
    1072:	30 91 13 05 	lds	r19, 0x0513	; 0x800513 <_ZN9EtherCard7netmaskE>
    1076:	23 23       	and	r18, r19
    1078:	a9 f4       	brne	.+42     	; 0x10a4 <_ZL6is_lanPKhS0_+0x48>
    107a:	dc 01       	movw	r26, r24
    107c:	11 96       	adiw	r26, 0x01	; 1
    107e:	31 96       	adiw	r30, 0x01	; 1
    1080:	c4 e1       	ldi	r28, 0x14	; 20
    1082:	d5 e0       	ldi	r29, 0x05	; 5
    1084:	04 96       	adiw	r24, 0x04	; 4
    1086:	4d 91       	ld	r20, X+
    1088:	21 91       	ld	r18, Z+
    108a:	39 91       	ld	r19, Y+
    108c:	24 27       	eor	r18, r20
    108e:	23 23       	and	r18, r19
    1090:	59 f4       	brne	.+22     	; 0x10a8 <_ZL6is_lanPKhS0_+0x4c>
    1092:	a8 17       	cp	r26, r24
    1094:	b9 07       	cpc	r27, r25
    1096:	b9 f7       	brne	.-18     	; 0x1086 <_ZL6is_lanPKhS0_+0x2a>
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	07 c0       	rjmp	.+14     	; 0x10aa <_ZL6is_lanPKhS0_+0x4e>
    109c:	80 e0       	ldi	r24, 0x00	; 0
    109e:	05 c0       	rjmp	.+10     	; 0x10aa <_ZL6is_lanPKhS0_+0x4e>
    10a0:	80 e0       	ldi	r24, 0x00	; 0
    10a2:	03 c0       	rjmp	.+6      	; 0x10aa <_ZL6is_lanPKhS0_+0x4e>
    10a4:	80 e0       	ldi	r24, 0x00	; 0
    10a6:	01 c0       	rjmp	.+2      	; 0x10aa <_ZL6is_lanPKhS0_+0x4e>
    10a8:	80 e0       	ldi	r24, 0x00	; 0
    10aa:	df 91       	pop	r29
    10ac:	cf 91       	pop	r28
    10ae:	08 95       	ret

000010b0 <_ZL20fill_ip_hdr_checksumv>:
    10b0:	e1 e0       	ldi	r30, 0x01	; 1
    10b2:	f3 e0       	ldi	r31, 0x03	; 3
    10b4:	10 8e       	std	Z+24, r1	; 0x18
    10b6:	11 8e       	std	Z+25, r1	; 0x19
    10b8:	80 e4       	ldi	r24, 0x40	; 64
    10ba:	84 8b       	std	Z+20, r24	; 0x14
    10bc:	15 8a       	std	Z+21, r1	; 0x15
    10be:	86 8b       	std	Z+22, r24	; 0x16
    10c0:	20 e0       	ldi	r18, 0x00	; 0
    10c2:	44 e1       	ldi	r20, 0x14	; 20
    10c4:	50 e0       	ldi	r21, 0x00	; 0
    10c6:	6e e0       	ldi	r22, 0x0E	; 14
    10c8:	88 e1       	ldi	r24, 0x18	; 24
    10ca:	57 cf       	rjmp	.-338    	; 0xf7a <_ZL13fill_checksumhhjh>
    10cc:	08 95       	ret

000010ce <_ZL7setMACsPKh>:
    10ce:	bc 01       	movw	r22, r24
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	93 e0       	ldi	r25, 0x03	; 3
    10d4:	e0 d2       	rcall	.+1472   	; 0x1696 <_ZN9EtherCard7copyMacEPhPKh>
    10d6:	6b e1       	ldi	r22, 0x1B	; 27
    10d8:	75 e0       	ldi	r23, 0x05	; 5
    10da:	87 e0       	ldi	r24, 0x07	; 7
    10dc:	93 e0       	ldi	r25, 0x03	; 3
    10de:	db c2       	rjmp	.+1462   	; 0x1696 <_ZN9EtherCard7copyMacEPhPKh>
    10e0:	08 95       	ret

000010e2 <_ZL11make_eth_ipv>:
    10e2:	87 e0       	ldi	r24, 0x07	; 7
    10e4:	93 e0       	ldi	r25, 0x03	; 3
    10e6:	f3 df       	rcall	.-26     	; 0x10ce <_ZL7setMACsPKh>
    10e8:	6b e1       	ldi	r22, 0x1B	; 27
    10ea:	73 e0       	ldi	r23, 0x03	; 3
    10ec:	8f e1       	ldi	r24, 0x1F	; 31
    10ee:	93 e0       	ldi	r25, 0x03	; 3
    10f0:	c5 d2       	rcall	.+1418   	; 0x167c <_ZN9EtherCard6copyIpEPhPKh>
    10f2:	67 e1       	ldi	r22, 0x17	; 23
    10f4:	75 e0       	ldi	r23, 0x05	; 5
    10f6:	8b e1       	ldi	r24, 0x1B	; 27
    10f8:	93 e0       	ldi	r25, 0x03	; 3
    10fa:	c0 d2       	rcall	.+1408   	; 0x167c <_ZN9EtherCard6copyIpEPhPKh>
    10fc:	d9 cf       	rjmp	.-78     	; 0x10b0 <_ZL20fill_ip_hdr_checksumv>
    10fe:	08 95       	ret

00001100 <_ZL12setMACandIPsPKhS0_>:
    1100:	cf 93       	push	r28
    1102:	df 93       	push	r29
    1104:	eb 01       	movw	r28, r22
    1106:	e3 df       	rcall	.-58     	; 0x10ce <_ZL7setMACsPKh>
    1108:	be 01       	movw	r22, r28
    110a:	8f e1       	ldi	r24, 0x1F	; 31
    110c:	93 e0       	ldi	r25, 0x03	; 3
    110e:	b6 d2       	rcall	.+1388   	; 0x167c <_ZN9EtherCard6copyIpEPhPKh>
    1110:	67 e1       	ldi	r22, 0x17	; 23
    1112:	75 e0       	ldi	r23, 0x05	; 5
    1114:	8b e1       	ldi	r24, 0x1B	; 27
    1116:	93 e0       	ldi	r25, 0x03	; 3
    1118:	b1 d2       	rcall	.+1378   	; 0x167c <_ZN9EtherCard6copyIpEPhPKh>
    111a:	df 91       	pop	r29
    111c:	cf 91       	pop	r28
    111e:	08 95       	ret

00001120 <_ZL16client_store_macPhS_>:
    1120:	cf 93       	push	r28
    1122:	df 93       	push	r29
    1124:	eb 01       	movw	r28, r22
    1126:	44 e0       	ldi	r20, 0x04	; 4
    1128:	50 e0       	ldi	r21, 0x00	; 0
    112a:	bc 01       	movw	r22, r24
    112c:	8d e1       	ldi	r24, 0x1D	; 29
    112e:	93 e0       	ldi	r25, 0x03	; 3
    1130:	0e 94 36 1a 	call	0x346c	; 0x346c <memcmp>
    1134:	89 2b       	or	r24, r25
    1136:	31 f4       	brne	.+12     	; 0x1144 <_ZL16client_store_macPhS_+0x24>
    1138:	67 e1       	ldi	r22, 0x17	; 23
    113a:	73 e0       	ldi	r23, 0x03	; 3
    113c:	ce 01       	movw	r24, r28
    113e:	ab d2       	rcall	.+1366   	; 0x1696 <_ZN9EtherCard7copyMacEPhPKh>
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	01 c0       	rjmp	.+2      	; 0x1146 <_ZL16client_store_macPhS_+0x26>
    1144:	80 e0       	ldi	r24, 0x00	; 0
    1146:	df 91       	pop	r29
    1148:	cf 91       	pop	r28
    114a:	08 95       	ret

0000114c <_ZL17client_arp_whohasPh>:
    114c:	0f 93       	push	r16
    114e:	1f 93       	push	r17
    1150:	cf 93       	push	r28
    1152:	8c 01       	movw	r16, r24
    1154:	85 e2       	ldi	r24, 0x25	; 37
    1156:	92 e0       	ldi	r25, 0x02	; 2
    1158:	ba df       	rcall	.-140    	; 0x10ce <_ZL7setMACsPKh>
    115a:	e1 e0       	ldi	r30, 0x01	; 1
    115c:	f3 e0       	ldi	r31, 0x03	; 3
    115e:	88 e0       	ldi	r24, 0x08	; 8
    1160:	84 87       	std	Z+12, r24	; 0x0c
    1162:	c6 e0       	ldi	r28, 0x06	; 6
    1164:	c5 87       	std	Z+13, r28	; 0x0d
    1166:	48 e0       	ldi	r20, 0x08	; 8
    1168:	50 e0       	ldi	r21, 0x00	; 0
    116a:	6f e7       	ldi	r22, 0x7F	; 127
    116c:	72 e0       	ldi	r23, 0x02	; 2
    116e:	8f e0       	ldi	r24, 0x0F	; 15
    1170:	93 e0       	ldi	r25, 0x03	; 3
    1172:	0e 94 2d 1a 	call	0x345a	; 0x345a <memcpy_P>
    1176:	e1 e2       	ldi	r30, 0x21	; 33
    1178:	f3 e0       	ldi	r31, 0x03	; 3
    117a:	df 01       	movw	r26, r30
    117c:	1d 92       	st	X+, r1
    117e:	ca 95       	dec	r28
    1180:	e9 f7       	brne	.-6      	; 0x117c <_ZL17client_arp_whohasPh+0x30>
    1182:	6b e1       	ldi	r22, 0x1B	; 27
    1184:	75 e0       	ldi	r23, 0x05	; 5
    1186:	87 e1       	ldi	r24, 0x17	; 23
    1188:	93 e0       	ldi	r25, 0x03	; 3
    118a:	85 d2       	rcall	.+1290   	; 0x1696 <_ZN9EtherCard7copyMacEPhPKh>
    118c:	b8 01       	movw	r22, r16
    118e:	87 e2       	ldi	r24, 0x27	; 39
    1190:	93 e0       	ldi	r25, 0x03	; 3
    1192:	74 d2       	rcall	.+1256   	; 0x167c <_ZN9EtherCard6copyIpEPhPKh>
    1194:	67 e1       	ldi	r22, 0x17	; 23
    1196:	75 e0       	ldi	r23, 0x05	; 5
    1198:	8d e1       	ldi	r24, 0x1D	; 29
    119a:	93 e0       	ldi	r25, 0x03	; 3
    119c:	6f d2       	rcall	.+1246   	; 0x167c <_ZN9EtherCard6copyIpEPhPKh>
    119e:	8a e2       	ldi	r24, 0x2A	; 42
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	c6 dd       	rcall	.-1140   	; 0xd30 <_ZN8ENC28J6010packetSendEj>
    11a4:	cf 91       	pop	r28
    11a6:	1f 91       	pop	r17
    11a8:	0f 91       	pop	r16
    11aa:	08 95       	ret

000011ac <_ZN9EtherCard10udpPrepareEjPKhj>:
    11ac:	ef 92       	push	r14
    11ae:	ff 92       	push	r15
    11b0:	0f 93       	push	r16
    11b2:	1f 93       	push	r17
    11b4:	cf 93       	push	r28
    11b6:	df 93       	push	r29
    11b8:	18 2f       	mov	r17, r24
    11ba:	09 2f       	mov	r16, r25
    11bc:	eb 01       	movw	r28, r22
    11be:	f4 2e       	mov	r15, r20
    11c0:	e5 2e       	mov	r14, r21
    11c2:	87 e1       	ldi	r24, 0x17	; 23
    11c4:	95 e0       	ldi	r25, 0x05	; 5
    11c6:	4a df       	rcall	.-364    	; 0x105c <_ZL6is_lanPKhS0_>
    11c8:	88 23       	and	r24, r24
    11ca:	29 f0       	breq	.+10     	; 0x11d6 <_ZN9EtherCard10udpPrepareEjPKhj+0x2a>
    11cc:	be 01       	movw	r22, r28
    11ce:	8c e2       	ldi	r24, 0x2C	; 44
    11d0:	95 e0       	ldi	r25, 0x05	; 5
    11d2:	96 df       	rcall	.-212    	; 0x1100 <_ZL12setMACandIPsPKhS0_>
    11d4:	04 c0       	rjmp	.+8      	; 0x11de <_ZN9EtherCard10udpPrepareEjPKhj+0x32>
    11d6:	be 01       	movw	r22, r28
    11d8:	82 e2       	ldi	r24, 0x22	; 34
    11da:	95 e0       	ldi	r25, 0x05	; 5
    11dc:	91 df       	rcall	.-222    	; 0x1100 <_ZL12setMACandIPsPKhS0_>
    11de:	88 81       	ld	r24, Y
    11e0:	80 7f       	andi	r24, 0xF0	; 240
    11e2:	80 3e       	cpi	r24, 0xE0	; 224
    11e4:	91 f0       	breq	.+36     	; 0x120a <_ZN9EtherCard10udpPrepareEjPKhj+0x5e>
    11e6:	88 81       	ld	r24, Y
    11e8:	99 81       	ldd	r25, Y+1	; 0x01
    11ea:	aa 81       	ldd	r26, Y+2	; 0x02
    11ec:	bb 81       	ldd	r27, Y+3	; 0x03
    11ee:	8f 3f       	cpi	r24, 0xFF	; 255
    11f0:	9f 4f       	sbci	r25, 0xFF	; 255
    11f2:	af 4f       	sbci	r26, 0xFF	; 255
    11f4:	bf 4f       	sbci	r27, 0xFF	; 255
    11f6:	49 f0       	breq	.+18     	; 0x120a <_ZN9EtherCard10udpPrepareEjPKhj+0x5e>
    11f8:	44 e0       	ldi	r20, 0x04	; 4
    11fa:	50 e0       	ldi	r21, 0x00	; 0
    11fc:	be 01       	movw	r22, r28
    11fe:	8f e0       	ldi	r24, 0x0F	; 15
    1200:	95 e0       	ldi	r25, 0x05	; 5
    1202:	0e 94 36 1a 	call	0x346c	; 0x346c <memcmp>
    1206:	89 2b       	or	r24, r25
    1208:	29 f4       	brne	.+10     	; 0x1214 <_ZN9EtherCard10udpPrepareEjPKhj+0x68>
    120a:	65 e2       	ldi	r22, 0x25	; 37
    120c:	72 e0       	ldi	r23, 0x02	; 2
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	93 e0       	ldi	r25, 0x03	; 3
    1212:	41 d2       	rcall	.+1154   	; 0x1696 <_ZN9EtherCard7copyMacEPhPKh>
    1214:	c1 e0       	ldi	r28, 0x01	; 1
    1216:	d3 e0       	ldi	r29, 0x03	; 3
    1218:	88 e0       	ldi	r24, 0x08	; 8
    121a:	8c 87       	std	Y+12, r24	; 0x0c
    121c:	1d 86       	std	Y+13, r1	; 0x0d
    121e:	49 e0       	ldi	r20, 0x09	; 9
    1220:	50 e0       	ldi	r21, 0x00	; 0
    1222:	66 e7       	ldi	r22, 0x76	; 118
    1224:	72 e0       	ldi	r23, 0x02	; 2
    1226:	8f e0       	ldi	r24, 0x0F	; 15
    1228:	93 e0       	ldi	r25, 0x03	; 3
    122a:	0e 94 2d 1a 	call	0x345a	; 0x345a <memcpy_P>
    122e:	18 8a       	std	Y+16, r1	; 0x10
    1230:	81 e1       	ldi	r24, 0x11	; 17
    1232:	8f 8b       	std	Y+23, r24	; 0x17
    1234:	ec a2       	std	Y+36, r14	; 0x24
    1236:	fd a2       	std	Y+37, r15	; 0x25
    1238:	0a a3       	std	Y+34, r16	; 0x22
    123a:	1b a3       	std	Y+35, r17	; 0x23
    123c:	1e a2       	std	Y+38, r1	; 0x26
    123e:	18 a6       	std	Y+40, r1	; 0x28
    1240:	19 a6       	std	Y+41, r1	; 0x29
    1242:	df 91       	pop	r29
    1244:	cf 91       	pop	r28
    1246:	1f 91       	pop	r17
    1248:	0f 91       	pop	r16
    124a:	ff 90       	pop	r15
    124c:	ef 90       	pop	r14
    124e:	08 95       	ret

00001250 <_ZN9EtherCard11udpTransmitEj>:
    1250:	0f 93       	push	r16
    1252:	1f 93       	push	r17
    1254:	cf 93       	push	r28
    1256:	df 93       	push	r29
    1258:	ec 01       	movw	r28, r24
    125a:	01 e0       	ldi	r16, 0x01	; 1
    125c:	13 e0       	ldi	r17, 0x03	; 3
    125e:	4c 96       	adiw	r24, 0x1c	; 28
    1260:	f8 01       	movw	r30, r16
    1262:	90 8b       	std	Z+16, r25	; 0x10
    1264:	81 8b       	std	Z+17, r24	; 0x11
    1266:	24 df       	rcall	.-440    	; 0x10b0 <_ZL20fill_ip_hdr_checksumv>
    1268:	ce 01       	movw	r24, r28
    126a:	08 96       	adiw	r24, 0x08	; 8
    126c:	f8 01       	movw	r30, r16
    126e:	96 a3       	std	Z+38, r25	; 0x26
    1270:	87 a3       	std	Z+39, r24	; 0x27
    1272:	ae 01       	movw	r20, r28
    1274:	40 5f       	subi	r20, 0xF0	; 240
    1276:	5f 4f       	sbci	r21, 0xFF	; 255
    1278:	21 e0       	ldi	r18, 0x01	; 1
    127a:	6a e1       	ldi	r22, 0x1A	; 26
    127c:	88 e2       	ldi	r24, 0x28	; 40
    127e:	7d de       	rcall	.-774    	; 0xf7a <_ZL13fill_checksumhhjh>
    1280:	ce 01       	movw	r24, r28
    1282:	8a 96       	adiw	r24, 0x2a	; 42
    1284:	55 dd       	rcall	.-1366   	; 0xd30 <_ZN8ENC28J6010packetSendEj>
    1286:	df 91       	pop	r29
    1288:	cf 91       	pop	r28
    128a:	1f 91       	pop	r17
    128c:	0f 91       	pop	r16
    128e:	08 95       	ret

00001290 <_ZN9EtherCard7sendUdpEPKhjjS1_j>:
    1290:	0f 93       	push	r16
    1292:	1f 93       	push	r17
    1294:	cf 93       	push	r28
    1296:	df 93       	push	r29
    1298:	d6 2f       	mov	r29, r22
    129a:	c7 2f       	mov	r28, r23
    129c:	ca 01       	movw	r24, r20
    129e:	a8 01       	movw	r20, r16
    12a0:	b9 01       	movw	r22, r18
    12a2:	84 df       	rcall	.-248    	; 0x11ac <_ZN9EtherCard10udpPrepareEjPKhj>
    12a4:	8d 2f       	mov	r24, r29
    12a6:	9c 2f       	mov	r25, r28
    12a8:	81 30       	cpi	r24, 0x01	; 1
    12aa:	22 e0       	ldi	r18, 0x02	; 2
    12ac:	92 07       	cpc	r25, r18
    12ae:	10 f0       	brcs	.+4      	; 0x12b4 <_ZN9EtherCard7sendUdpEPKhjjS1_j+0x24>
    12b0:	80 e0       	ldi	r24, 0x00	; 0
    12b2:	92 e0       	ldi	r25, 0x02	; 2
    12b4:	cd df       	rcall	.-102    	; 0x1250 <_ZN9EtherCard11udpTransmitEj>
    12b6:	df 91       	pop	r29
    12b8:	cf 91       	pop	r28
    12ba:	1f 91       	pop	r17
    12bc:	0f 91       	pop	r16
    12be:	08 95       	ret

000012c0 <_ZN9EtherCard7setGwIpEPKh>:
    12c0:	10 92 02 05 	sts	0x0502, r1	; 0x800502 <_ZN9EtherCard8delaycntE+0x1>
    12c4:	10 92 01 05 	sts	0x0501, r1	; 0x800501 <_ZN9EtherCard8delaycntE>
    12c8:	21 e0       	ldi	r18, 0x01	; 1
    12ca:	20 93 21 05 	sts	0x0521, r18	; 0x800521 <_ZL9waitgwmac>
    12ce:	bc 01       	movw	r22, r24
    12d0:	8b e0       	ldi	r24, 0x0B	; 11
    12d2:	95 e0       	ldi	r25, 0x05	; 5
    12d4:	d3 c1       	rjmp	.+934    	; 0x167c <_ZN9EtherCard6copyIpEPhPKh>
    12d6:	08 95       	ret

000012d8 <_ZN9EtherCard22updateBroadcastAddressEv>:
    12d8:	cf 93       	push	r28
    12da:	df 93       	push	r29
    12dc:	e7 e1       	ldi	r30, 0x17	; 23
    12de:	f5 e0       	ldi	r31, 0x05	; 5
    12e0:	c3 e1       	ldi	r28, 0x13	; 19
    12e2:	d5 e0       	ldi	r29, 0x05	; 5
    12e4:	af e0       	ldi	r26, 0x0F	; 15
    12e6:	b5 e0       	ldi	r27, 0x05	; 5
    12e8:	2b e1       	ldi	r18, 0x1B	; 27
    12ea:	35 e0       	ldi	r19, 0x05	; 5
    12ec:	91 91       	ld	r25, Z+
    12ee:	89 91       	ld	r24, Y+
    12f0:	80 95       	com	r24
    12f2:	89 2b       	or	r24, r25
    12f4:	8d 93       	st	X+, r24
    12f6:	e2 17       	cp	r30, r18
    12f8:	f3 07       	cpc	r31, r19
    12fa:	c1 f7       	brne	.-16     	; 0x12ec <_ZN9EtherCard22updateBroadcastAddressEv+0x14>
    12fc:	df 91       	pop	r29
    12fe:	cf 91       	pop	r28
    1300:	08 95       	ret

00001302 <_ZN9EtherCard10packetLoopEj>:
	gPB[ICMP_CHECKSUM_P+1]++;
	gPB[ICMP_CHECKSUM_P] += 0x08;
	EtherCard::packetSend(len);
}

uint16_t EtherCard::packetLoop (uint16_t plen) {
    1302:	cf 93       	push	r28
    1304:	df 93       	push	r29
    1306:	ec 01       	movw	r28, r24
    if (plen==0) {
    1308:	00 97       	sbiw	r24, 0x00	; 0
    130a:	09 f0       	breq	.+2      	; 0x130e <_ZN9EtherCard10packetLoopEj+0xc>
    130c:	3f c0       	rjmp	.+126    	; 0x138c <_ZN9EtherCard10packetLoopEj+0x8a>
        //Check every 65536 (no-packet) cycles whether we need to retry ARP request for gateway
        if ((waitgwmac & WGW_INITIAL_ARP || waitgwmac & WGW_REFRESHING) &&
    130e:	80 91 21 05 	lds	r24, 0x0521	; 0x800521 <_ZL9waitgwmac>
    1312:	85 70       	andi	r24, 0x05	; 5
    1314:	89 f0       	breq	.+34     	; 0x1338 <_ZN9EtherCard10packetLoopEj+0x36>
    1316:	80 91 01 05 	lds	r24, 0x0501	; 0x800501 <_ZN9EtherCard8delaycntE>
    131a:	90 91 02 05 	lds	r25, 0x0502	; 0x800502 <_ZN9EtherCard8delaycntE+0x1>
    131e:	89 2b       	or	r24, r25
    1320:	59 f4       	brne	.+22     	; 0x1338 <_ZN9EtherCard10packetLoopEj+0x36>
                delaycnt==0 && isLinkUp()) {
    1322:	f3 dc       	rcall	.-1562   	; 0xd0a <_ZN8ENC28J608isLinkUpEv>
}

uint16_t EtherCard::packetLoop (uint16_t plen) {
    if (plen==0) {
        //Check every 65536 (no-packet) cycles whether we need to retry ARP request for gateway
        if ((waitgwmac & WGW_INITIAL_ARP || waitgwmac & WGW_REFRESHING) &&
    1324:	88 23       	and	r24, r24
    1326:	41 f0       	breq	.+16     	; 0x1338 <_ZN9EtherCard10packetLoopEj+0x36>
                delaycnt==0 && isLinkUp()) {
            client_arp_whohas(gwip);
    1328:	8b e0       	ldi	r24, 0x0B	; 11
    132a:	95 e0       	ldi	r25, 0x05	; 5
    132c:	0f df       	rcall	.-482    	; 0x114c <_ZL17client_arp_whohasPh>
            waitgwmac |= WGW_ACCEPT_ARP_REPLY;
    132e:	80 91 21 05 	lds	r24, 0x0521	; 0x800521 <_ZL9waitgwmac>
    1332:	88 60       	ori	r24, 0x08	; 8
    1334:	80 93 21 05 	sts	0x0521, r24	; 0x800521 <_ZL9waitgwmac>
        }
        delaycnt++;
    1338:	80 91 01 05 	lds	r24, 0x0501	; 0x800501 <_ZN9EtherCard8delaycntE>
    133c:	90 91 02 05 	lds	r25, 0x0502	; 0x800502 <_ZN9EtherCard8delaycntE+0x1>
    1340:	01 96       	adiw	r24, 0x01	; 1
    1342:	90 93 02 05 	sts	0x0502, r25	; 0x800502 <_ZN9EtherCard8delaycntE+0x1>
    1346:	80 93 01 05 	sts	0x0501, r24	; 0x800501 <_ZN9EtherCard8delaycntE>

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, dnsip) && !has_dns_mac && !waiting_for_dns_mac) {
    134a:	67 e0       	ldi	r22, 0x07	; 7
    134c:	75 e0       	ldi	r23, 0x05	; 5
    134e:	87 e1       	ldi	r24, 0x17	; 23
    1350:	95 e0       	ldi	r25, 0x05	; 5
    1352:	84 de       	rcall	.-760    	; 0x105c <_ZL6is_lanPKhS0_>
    1354:	88 23       	and	r24, r24
    1356:	49 f0       	breq	.+18     	; 0x136a <_ZN9EtherCard10packetLoopEj+0x68>
    1358:	80 91 2a 05 	lds	r24, 0x052A	; 0x80052a <_ZL11has_dns_mac>
    135c:	81 11       	cpse	r24, r1
    135e:	05 c0       	rjmp	.+10     	; 0x136a <_ZN9EtherCard10packetLoopEj+0x68>
    1360:	80 91 2b 05 	lds	r24, 0x052B	; 0x80052b <_ZL19waiting_for_dns_mac>
    1364:	88 23       	and	r24, r24
    1366:	09 f4       	brne	.+2      	; 0x136a <_ZN9EtherCard10packetLoopEj+0x68>
    1368:	dc c0       	rjmp	.+440    	; 0x1522 <_ZN9EtherCard10packetLoopEj+0x220>
            client_arp_whohas(dnsip);
            waiting_for_dns_mac = true;
        }

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, hisip) && !has_dest_mac && !waiting_for_dest_mac) {
    136a:	63 e0       	ldi	r22, 0x03	; 3
    136c:	75 e0       	ldi	r23, 0x05	; 5
    136e:	87 e1       	ldi	r24, 0x17	; 23
    1370:	95 e0       	ldi	r25, 0x05	; 5
    1372:	74 de       	rcall	.-792    	; 0x105c <_ZL6is_lanPKhS0_>
    1374:	88 23       	and	r24, r24
    1376:	09 f4       	brne	.+2      	; 0x137a <_ZN9EtherCard10packetLoopEj+0x78>
    1378:	f8 c0       	rjmp	.+496    	; 0x156a <_ZN9EtherCard10packetLoopEj+0x268>
    137a:	80 91 28 05 	lds	r24, 0x0528	; 0x800528 <_ZL12has_dest_mac>
    137e:	81 11       	cpse	r24, r1
    1380:	f4 c0       	rjmp	.+488    	; 0x156a <_ZN9EtherCard10packetLoopEj+0x268>
    1382:	80 91 29 05 	lds	r24, 0x0529	; 0x800529 <_ZL20waiting_for_dest_mac>
    1386:	81 11       	cpse	r24, r1
    1388:	f0 c0       	rjmp	.+480    	; 0x156a <_ZN9EtherCard10packetLoopEj+0x268>
    138a:	d2 c0       	rjmp	.+420    	; 0x1530 <_ZN9EtherCard10packetLoopEj+0x22e>
    return true;
}

static uint8_t eth_type_is_arp_and_my_ip(uint16_t len) {
    return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
    138c:	89 32       	cpi	r24, 0x29	; 41
    138e:	91 05       	cpc	r25, r1
    1390:	08 f4       	brcc	.+2      	; 0x1394 <_ZN9EtherCard10packetLoopEj+0x92>
    1392:	d5 c0       	rjmp	.+426    	; 0x153e <_ZN9EtherCard10packetLoopEj+0x23c>
        }
    return true;
}

static uint8_t eth_type_is_arp_and_my_ip(uint16_t len) {
    return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
    1394:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <_ZN8ENC28J606bufferE+0xc>
    1398:	88 30       	cpi	r24, 0x08	; 8
    139a:	09 f0       	breq	.+2      	; 0x139e <_ZN9EtherCard10packetLoopEj+0x9c>
    139c:	e6 c0       	rjmp	.+460    	; 0x156a <_ZN9EtherCard10packetLoopEj+0x268>
    139e:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <_ZN8ENC28J606bufferE+0xd>
    13a2:	86 30       	cpi	r24, 0x06	; 6
    13a4:	09 f0       	breq	.+2      	; 0x13a8 <_ZN9EtherCard10packetLoopEj+0xa6>
    13a6:	dd c0       	rjmp	.+442    	; 0x1562 <_ZN9EtherCard10packetLoopEj+0x260>
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
           memcmp(gPB + ETH_ARP_DST_IP_P, EtherCard::myip, IP_LEN) == 0;
    13a8:	44 e0       	ldi	r20, 0x04	; 4
    13aa:	50 e0       	ldi	r21, 0x00	; 0
    13ac:	67 e1       	ldi	r22, 0x17	; 23
    13ae:	75 e0       	ldi	r23, 0x05	; 5
    13b0:	87 e2       	ldi	r24, 0x27	; 39
    13b2:	93 e0       	ldi	r25, 0x03	; 3
    13b4:	0e 94 36 1a 	call	0x346c	; 0x346c <memcmp>
    return true;
}

static uint8_t eth_type_is_arp_and_my_ip(uint16_t len) {
    return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
    13b8:	89 2b       	or	r24, r25
    13ba:	09 f0       	breq	.+2      	; 0x13be <_ZN9EtherCard10packetLoopEj+0xbc>
    13bc:	d2 c0       	rjmp	.+420    	; 0x1562 <_ZN9EtherCard10packetLoopEj+0x260>
    EtherCard::copyIp(gPB + IP_SRC_P, EtherCard::myip);
    fill_ip_hdr_checksum();
}

static void make_arp_answer_from_request() {
    setMACs(gPB + ETH_SRC_MAC);
    13be:	c3 c0       	rjmp	.+390    	; 0x1546 <_ZN9EtherCard10packetLoopEj+0x244>
    13c0:	87 e0       	ldi	r24, 0x07	; 7
    13c2:	93 e0       	ldi	r25, 0x03	; 3
    13c4:	84 de       	rcall	.-760    	; 0x10ce <_ZL7setMACsPKh>
    gPB[ETH_ARP_OPCODE_H_P] = ETH_ARP_OPCODE_REPLY_H_V;
    13c6:	e1 e0       	ldi	r30, 0x01	; 1
    13c8:	f3 e0       	ldi	r31, 0x03	; 3
    13ca:	14 8a       	std	Z+20, r1	; 0x14
    gPB[ETH_ARP_OPCODE_L_P] = ETH_ARP_OPCODE_REPLY_L_V;
    13cc:	82 e0       	ldi	r24, 0x02	; 2
    EtherCard::copyMac(gPB + ETH_ARP_DST_MAC_P, gPB + ETH_ARP_SRC_MAC_P);
    13ce:	85 8b       	std	Z+21, r24	; 0x15
    13d0:	67 e1       	ldi	r22, 0x17	; 23
    13d2:	73 e0       	ldi	r23, 0x03	; 3
    13d4:	81 e2       	ldi	r24, 0x21	; 33
    13d6:	93 e0       	ldi	r25, 0x03	; 3
    EtherCard::copyMac(gPB + ETH_ARP_SRC_MAC_P, EtherCard::mymac);
    13d8:	5e d1       	rcall	.+700    	; 0x1696 <_ZN9EtherCard7copyMacEPhPKh>
    13da:	6b e1       	ldi	r22, 0x1B	; 27
    13dc:	75 e0       	ldi	r23, 0x05	; 5
    13de:	87 e1       	ldi	r24, 0x17	; 23
    13e0:	93 e0       	ldi	r25, 0x03	; 3
    EtherCard::copyIp(gPB + ETH_ARP_DST_IP_P, gPB + ETH_ARP_SRC_IP_P);
    13e2:	59 d1       	rcall	.+690    	; 0x1696 <_ZN9EtherCard7copyMacEPhPKh>
    13e4:	6d e1       	ldi	r22, 0x1D	; 29
    13e6:	73 e0       	ldi	r23, 0x03	; 3
    13e8:	87 e2       	ldi	r24, 0x27	; 39
    13ea:	93 e0       	ldi	r25, 0x03	; 3
    EtherCard::copyIp(gPB + ETH_ARP_SRC_IP_P, EtherCard::myip);
    13ec:	47 d1       	rcall	.+654    	; 0x167c <_ZN9EtherCard6copyIpEPhPKh>
    13ee:	67 e1       	ldi	r22, 0x17	; 23
    13f0:	75 e0       	ldi	r23, 0x05	; 5
    13f2:	8d e1       	ldi	r24, 0x1D	; 29
    13f4:	93 e0       	ldi	r25, 0x03	; 3
    13f6:	42 d1       	rcall	.+644    	; 0x167c <_ZN9EtherCard6copyIpEPhPKh>
    EtherCard::packetSend(42);
    13f8:	8a e2       	ldi	r24, 0x2A	; 42
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	99 dc       	rcall	.-1742   	; 0xd30 <_ZN8ENC28J6010packetSendEj>
    13fe:	80 91 21 05 	lds	r24, 0x0521	; 0x800521 <_ZL9waitgwmac>

    if (eth_type_is_arp_and_my_ip(plen))
    {   //Service ARP request
        if (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REQ_L_V)
            make_arp_answer_from_request();
        if (waitgwmac & WGW_ACCEPT_ARP_REPLY && (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REPLY_L_V) && client_store_mac(gwip, gwmacaddr))
    1402:	83 ff       	sbrs	r24, 3
    1404:	0e c0       	rjmp	.+28     	; 0x1422 <_ZN9EtherCard10packetLoopEj+0x120>
    1406:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <_ZN8ENC28J606bufferE+0x15>
    140a:	82 30       	cpi	r24, 0x02	; 2
    140c:	51 f4       	brne	.+20     	; 0x1422 <_ZN9EtherCard10packetLoopEj+0x120>
    140e:	62 e2       	ldi	r22, 0x22	; 34
    1410:	75 e0       	ldi	r23, 0x05	; 5
    1412:	8b e0       	ldi	r24, 0x0B	; 11
    1414:	95 e0       	ldi	r25, 0x05	; 5
    1416:	84 de       	rcall	.-760    	; 0x1120 <_ZL16client_store_macPhS_>
    1418:	88 23       	and	r24, r24
    141a:	19 f0       	breq	.+6      	; 0x1422 <_ZN9EtherCard10packetLoopEj+0x120>
    141c:	82 e0       	ldi	r24, 0x02	; 2
            waitgwmac = WGW_HAVE_GW_MAC;
    141e:	80 93 21 05 	sts	0x0521, r24	; 0x800521 <_ZL9waitgwmac>
    1422:	80 91 2a 05 	lds	r24, 0x052A	; 0x80052a <_ZL11has_dns_mac>
        if (!has_dns_mac && waiting_for_dns_mac && client_store_mac(dnsip, destmacaddr)) {
    1426:	81 11       	cpse	r24, r1
    1428:	10 c0       	rjmp	.+32     	; 0x144a <_ZN9EtherCard10packetLoopEj+0x148>
    142a:	80 91 2b 05 	lds	r24, 0x052B	; 0x80052b <_ZL19waiting_for_dns_mac>
    142e:	88 23       	and	r24, r24
    1430:	61 f0       	breq	.+24     	; 0x144a <_ZN9EtherCard10packetLoopEj+0x148>
    1432:	6c e2       	ldi	r22, 0x2C	; 44
    1434:	75 e0       	ldi	r23, 0x05	; 5
    1436:	87 e0       	ldi	r24, 0x07	; 7
    1438:	95 e0       	ldi	r25, 0x05	; 5
    143a:	72 de       	rcall	.-796    	; 0x1120 <_ZL16client_store_macPhS_>
    143c:	88 23       	and	r24, r24
    143e:	29 f0       	breq	.+10     	; 0x144a <_ZN9EtherCard10packetLoopEj+0x148>
    1440:	81 e0       	ldi	r24, 0x01	; 1
            has_dns_mac = true;
    1442:	80 93 2a 05 	sts	0x052A, r24	; 0x80052a <_ZL11has_dns_mac>
    1446:	10 92 2b 05 	sts	0x052B, r1	; 0x80052b <_ZL19waiting_for_dns_mac>
            waiting_for_dns_mac = false;
    144a:	80 91 28 05 	lds	r24, 0x0528	; 0x800528 <_ZL12has_dest_mac>
        }
        if (!has_dest_mac && waiting_for_dest_mac && client_store_mac(hisip, destmacaddr)) {
    144e:	81 11       	cpse	r24, r1
    1450:	8c c0       	rjmp	.+280    	; 0x156a <_ZN9EtherCard10packetLoopEj+0x268>
    1452:	80 91 29 05 	lds	r24, 0x0529	; 0x800529 <_ZL20waiting_for_dest_mac>
    1456:	88 23       	and	r24, r24
    1458:	09 f4       	brne	.+2      	; 0x145c <_ZN9EtherCard10packetLoopEj+0x15a>
    145a:	87 c0       	rjmp	.+270    	; 0x156a <_ZN9EtherCard10packetLoopEj+0x268>
    145c:	6c e2       	ldi	r22, 0x2C	; 44
    145e:	75 e0       	ldi	r23, 0x05	; 5
    1460:	83 e0       	ldi	r24, 0x03	; 3
    1462:	95 e0       	ldi	r25, 0x05	; 5
    1464:	5d de       	rcall	.-838    	; 0x1120 <_ZL16client_store_macPhS_>
    1466:	88 23       	and	r24, r24
    1468:	09 f4       	brne	.+2      	; 0x146c <_ZN9EtherCard10packetLoopEj+0x16a>
    146a:	7f c0       	rjmp	.+254    	; 0x156a <_ZN9EtherCard10packetLoopEj+0x268>
    146c:	81 e0       	ldi	r24, 0x01	; 1
            has_dest_mac = true;
    146e:	80 93 28 05 	sts	0x0528, r24	; 0x800528 <_ZL12has_dest_mac>
    1472:	10 92 29 05 	sts	0x0529, r1	; 0x800529 <_ZL20waiting_for_dest_mac>
            waiting_for_dest_mac = false;
    1476:	79 c0       	rjmp	.+242    	; 0x156a <_ZN9EtherCard10packetLoopEj+0x268>
    1478:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <_ZN8ENC28J606bufferE+0xc>
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
           memcmp(gPB + ETH_ARP_DST_IP_P, EtherCard::myip, IP_LEN) == 0;
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
    147c:	88 30       	cpi	r24, 0x08	; 8
    147e:	09 f0       	breq	.+2      	; 0x1482 <_ZN9EtherCard10packetLoopEj+0x180>
    1480:	74 c0       	rjmp	.+232    	; 0x156a <_ZN9EtherCard10packetLoopEj+0x268>
    1482:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <_ZN8ENC28J606bufferE+0xd>
    1486:	81 11       	cpse	r24, r1
    1488:	70 c0       	rjmp	.+224    	; 0x156a <_ZN9EtherCard10packetLoopEj+0x268>
    148a:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <_ZN8ENC28J606bufferE+0xe>
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
    148e:	85 34       	cpi	r24, 0x45	; 69
    1490:	09 f0       	breq	.+2      	; 0x1494 <_ZN9EtherCard10packetLoopEj+0x192>
    1492:	6b c0       	rjmp	.+214    	; 0x156a <_ZN9EtherCard10packetLoopEj+0x268>
    1494:	44 e0       	ldi	r20, 0x04	; 4
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
           (memcmp(gPB + IP_DST_P, EtherCard::myip, IP_LEN) == 0  //not my IP
    1496:	50 e0       	ldi	r21, 0x00	; 0
    1498:	67 e1       	ldi	r22, 0x17	; 23
    149a:	75 e0       	ldi	r23, 0x05	; 5
    149c:	8f e1       	ldi	r24, 0x1F	; 31
    149e:	93 e0       	ldi	r25, 0x03	; 3
    14a0:	0e 94 36 1a 	call	0x346c	; 0x346c <memcmp>
    14a4:	89 2b       	or	r24, r25
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
    14a6:	09 f4       	brne	.+2      	; 0x14aa <_ZN9EtherCard10packetLoopEj+0x1a8>
    14a8:	54 c0       	rjmp	.+168    	; 0x1552 <_ZN9EtherCard10packetLoopEj+0x250>
    14aa:	44 e0       	ldi	r20, 0x04	; 4
           (memcmp(gPB + IP_DST_P, EtherCard::myip, IP_LEN) == 0  //not my IP
            || (memcmp(gPB + IP_DST_P, EtherCard::broadcastip, IP_LEN) == 0) //not subnet broadcast
    14ac:	50 e0       	ldi	r21, 0x00	; 0
    14ae:	6f e0       	ldi	r22, 0x0F	; 15
    14b0:	75 e0       	ldi	r23, 0x05	; 5
    14b2:	8f e1       	ldi	r24, 0x1F	; 31
    14b4:	93 e0       	ldi	r25, 0x03	; 3
    14b6:	0e 94 36 1a 	call	0x346c	; 0x346c <memcmp>
    14ba:	89 2b       	or	r24, r25
    14bc:	09 f4       	brne	.+2      	; 0x14c0 <_ZN9EtherCard10packetLoopEj+0x1be>
    14be:	49 c0       	rjmp	.+146    	; 0x1552 <_ZN9EtherCard10packetLoopEj+0x250>
    14c0:	44 e0       	ldi	r20, 0x04	; 4
            || (memcmp(gPB + IP_DST_P, allOnes, IP_LEN) == 0)); //not global broadcasts
    14c2:	50 e0       	ldi	r21, 0x00	; 0
    14c4:	65 e2       	ldi	r22, 0x25	; 37
    14c6:	72 e0       	ldi	r23, 0x02	; 2
    14c8:	8f e1       	ldi	r24, 0x1F	; 31
    14ca:	93 e0       	ldi	r25, 0x03	; 3
    14cc:	0e 94 36 1a 	call	0x346c	; 0x346c <memcmp>
    14d0:	89 2b       	or	r24, r25
    14d2:	09 f0       	breq	.+2      	; 0x14d6 <_ZN9EtherCard10packetLoopEj+0x1d4>
    14d4:	4a c0       	rjmp	.+148    	; 0x156a <_ZN9EtherCard10packetLoopEj+0x268>
    14d6:	3d c0       	rjmp	.+122    	; 0x1552 <_ZN9EtherCard10packetLoopEj+0x250>
    14d8:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <_ZN8ENC28J606bufferE+0x22>
        //!@todo Add other protocols (and make each optional at compile time)
        return 0;
    }
	
	//To handle pinging
	if (gPB[IP_PROTO_P]==IP_PROTO_ICMP_V && gPB[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V)
    14dc:	88 30       	cpi	r24, 0x08	; 8
    14de:	c9 f4       	brne	.+50     	; 0x1512 <_ZN9EtherCard10packetLoopEj+0x210>
	{   //Service ICMP echo request (ping)
		if (icmp_cb)
    14e0:	e0 91 32 05 	lds	r30, 0x0532	; 0x800532 <_ZL7icmp_cb>
    14e4:	f0 91 33 05 	lds	r31, 0x0533	; 0x800533 <_ZL7icmp_cb+0x1>
    14e8:	30 97       	sbiw	r30, 0x00	; 0
    14ea:	19 f0       	breq	.+6      	; 0x14f2 <_ZN9EtherCard10packetLoopEj+0x1f0>
		(*icmp_cb)(&(gPB[IP_SRC_P]));
    14ec:	8b e1       	ldi	r24, 0x1B	; 27
    14ee:	93 e0       	ldi	r25, 0x03	; 3
    14f0:	19 95       	eicall
void EtherCard::registerPingCallback (void (*callback)(uint8_t *srcip)) {
    icmp_cb = callback;
}

static void make_echo_reply_from_request(uint16_t len) {
	make_eth_ip();
    14f2:	f7 dd       	rcall	.-1042   	; 0x10e2 <_ZL11make_eth_ipv>
	gPB[ICMP_TYPE_P] = ICMP_TYPE_ECHOREPLY_V;
    14f4:	e1 e0       	ldi	r30, 0x01	; 1
    14f6:	f3 e0       	ldi	r31, 0x03	; 3
	if (gPB[ICMP_CHECKSUM_P] > (0xFF-0x08))
    14f8:	12 a2       	std	Z+34, r1	; 0x22
    14fa:	84 a1       	ldd	r24, Z+36	; 0x24
    14fc:	88 3f       	cpi	r24, 0xF8	; 248
	gPB[ICMP_CHECKSUM_P+1]++;
    14fe:	18 f0       	brcs	.+6      	; 0x1506 <_ZN9EtherCard10packetLoopEj+0x204>
    1500:	95 a1       	ldd	r25, Z+37	; 0x25
    1502:	9f 5f       	subi	r25, 0xFF	; 255
	gPB[ICMP_CHECKSUM_P] += 0x08;
    1504:	95 a3       	std	Z+37, r25	; 0x25
    1506:	88 5f       	subi	r24, 0xF8	; 248
	EtherCard::packetSend(len);
    1508:	80 93 25 03 	sts	0x0325, r24	; 0x800325 <_ZN8ENC28J606bufferE+0x24>
    150c:	ce 01       	movw	r24, r28
    150e:	10 dc       	rcall	.-2016   	; 0xd30 <_ZN8ENC28J6010packetSendEj>
		make_echo_reply_from_request(plen);
		return 0;
	}

#if ETHERCARD_UDPSERVER
    if (ether.udpServerListening() && gPB[IP_PROTO_P]==IP_PROTO_UDP_V)
    1510:	2c c0       	rjmp	.+88     	; 0x156a <_ZN9EtherCard10packetLoopEj+0x268>
    1512:	4a d0       	rcall	.+148    	; 0x15a8 <_ZN9EtherCard18udpServerListeningEv>
    1514:	88 23       	and	r24, r24
    1516:	49 f1       	breq	.+82     	; 0x156a <_ZN9EtherCard10packetLoopEj+0x268>
    1518:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <_ZN8ENC28J606bufferE+0x17>
    151c:	81 31       	cpi	r24, 0x11	; 17
    151e:	29 f5       	brne	.+74     	; 0x156a <_ZN9EtherCard10packetLoopEj+0x268>
        }
        delaycnt++;

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, dnsip) && !has_dns_mac && !waiting_for_dns_mac) {
            client_arp_whohas(dnsip);
    1520:	1d c0       	rjmp	.+58     	; 0x155c <_ZN9EtherCard10packetLoopEj+0x25a>
    1522:	87 e0       	ldi	r24, 0x07	; 7
    1524:	95 e0       	ldi	r25, 0x05	; 5
    1526:	12 de       	rcall	.-988    	; 0x114c <_ZL17client_arp_whohasPh>
            waiting_for_dns_mac = true;
    1528:	81 e0       	ldi	r24, 0x01	; 1
    152a:	80 93 2b 05 	sts	0x052B, r24	; 0x80052b <_ZL19waiting_for_dns_mac>
    152e:	1d cf       	rjmp	.-454    	; 0x136a <_ZN9EtherCard10packetLoopEj+0x68>
        }

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, hisip) && !has_dest_mac && !waiting_for_dest_mac) {
            client_arp_whohas(hisip);
    1530:	83 e0       	ldi	r24, 0x03	; 3
    1532:	95 e0       	ldi	r25, 0x05	; 5
    1534:	0b de       	rcall	.-1002   	; 0x114c <_ZL17client_arp_whohasPh>
    1536:	81 e0       	ldi	r24, 0x01	; 1
            waiting_for_dest_mac = true;
    1538:	80 93 29 05 	sts	0x0529, r24	; 0x800529 <_ZL20waiting_for_dest_mac>
    153c:	16 c0       	rjmp	.+44     	; 0x156a <_ZN9EtherCard10packetLoopEj+0x268>
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
    153e:	8a 97       	sbiw	r24, 0x2a	; 42
    1540:	08 f0       	brcs	.+2      	; 0x1544 <_ZN9EtherCard10packetLoopEj+0x242>
    1542:	9a cf       	rjmp	.-204    	; 0x1478 <_ZN9EtherCard10packetLoopEj+0x176>
    1544:	12 c0       	rjmp	.+36     	; 0x156a <_ZN9EtherCard10packetLoopEj+0x268>
        return 0;
    }

    if (eth_type_is_arp_and_my_ip(plen))
    {   //Service ARP request
        if (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REQ_L_V)
    1546:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <_ZN8ENC28J606bufferE+0x15>
    154a:	81 30       	cpi	r24, 0x01	; 1
    154c:	09 f0       	breq	.+2      	; 0x1550 <_ZN9EtherCard10packetLoopEj+0x24e>
    154e:	57 cf       	rjmp	.-338    	; 0x13fe <_ZN9EtherCard10packetLoopEj+0xfc>
    1550:	37 cf       	rjmp	.-402    	; 0x13c0 <_ZN9EtherCard10packetLoopEj+0xbe>
        //!@todo Add other protocols (and make each optional at compile time)
        return 0;
    }
	
	//To handle pinging
	if (gPB[IP_PROTO_P]==IP_PROTO_ICMP_V && gPB[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V)
    1552:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <_ZN8ENC28J606bufferE+0x17>
    1556:	81 30       	cpi	r24, 0x01	; 1
    1558:	e1 f6       	brne	.-72     	; 0x1512 <_ZN9EtherCard10packetLoopEj+0x210>
    155a:	be cf       	rjmp	.-132    	; 0x14d8 <_ZN9EtherCard10packetLoopEj+0x1d6>
	}

#if ETHERCARD_UDPSERVER
    if (ether.udpServerListening() && gPB[IP_PROTO_P]==IP_PROTO_UDP_V)
    {   //Call UDP server handler (callback) if one is defined for this packet
        if(ether.udpServerHasProcessedPacket(plen))
    155c:	ce 01       	movw	r24, r28
    155e:	2b d0       	rcall	.+86     	; 0x15b6 <_ZN9EtherCard27udpServerHasProcessedPacketEj>
    1560:	04 c0       	rjmp	.+8      	; 0x156a <_ZN9EtherCard10packetLoopEj+0x268>
    1562:	ca 32       	cpi	r28, 0x2A	; 42
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
    1564:	d1 05       	cpc	r29, r1
    1566:	08 f0       	brcs	.+2      	; 0x156a <_ZN9EtherCard10packetLoopEj+0x268>
    1568:	8c cf       	rjmp	.-232    	; 0x1482 <_ZN9EtherCard10packetLoopEj+0x180>
    156a:	80 e0       	ldi	r24, 0x00	; 0

    if (plen<54 || gPB[IP_PROTO_P]!=IP_PROTO_TCP_V )
        return 0; //from here on we are only interested in TCP-packets; these are longer than 54 bytes
		
	return 0;
}
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	df 91       	pop	r29
    1570:	cf 91       	pop	r28
    1572:	08 95       	ret

00001574 <_ZN9EtherCard21udpServerListenOnPortEPFvjPhjPKcjEj>:
    1574:	9c 01       	movw	r18, r24
    {
        if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((uint8_t) listeners[i].port)) {
            listeners[i].listening = true;
        }
    }
}
    1576:	90 91 34 05 	lds	r25, 0x0534	; 0x800534 <numListeners>
    157a:	98 30       	cpi	r25, 0x08	; 8
    157c:	a0 f4       	brcc	.+40     	; 0x15a6 <_ZN9EtherCard21udpServerListenOnPortEPFvjPhjPKcjEj+0x32>
    157e:	e9 2f       	mov	r30, r25
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	af 01       	movw	r20, r30
    1584:	44 0f       	add	r20, r20
    1586:	55 1f       	adc	r21, r21
    1588:	44 0f       	add	r20, r20
    158a:	55 1f       	adc	r21, r21
    158c:	e4 0f       	add	r30, r20
    158e:	f5 1f       	adc	r31, r21
    1590:	eb 5c       	subi	r30, 0xCB	; 203
    1592:	fa 4f       	sbci	r31, 0xFA	; 250
    1594:	31 83       	std	Z+1, r19	; 0x01
    1596:	20 83       	st	Z, r18
    1598:	73 83       	std	Z+3, r23	; 0x03
    159a:	62 83       	std	Z+2, r22	; 0x02
    159c:	81 e0       	ldi	r24, 0x01	; 1
    159e:	84 83       	std	Z+4, r24	; 0x04
    15a0:	9f 5f       	subi	r25, 0xFF	; 255
    15a2:	90 93 34 05 	sts	0x0534, r25	; 0x800534 <numListeners>
    15a6:	08 95       	ret

000015a8 <_ZN9EtherCard18udpServerListeningEv>:

bool EtherCard::udpServerListening() {
    return numListeners > 0;
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	90 91 34 05 	lds	r25, 0x0534	; 0x800534 <numListeners>
    15ae:	91 11       	cpse	r25, r1
    15b0:	01 c0       	rjmp	.+2      	; 0x15b4 <_ZN9EtherCard18udpServerListeningEv+0xc>
    15b2:	80 e0       	ldi	r24, 0x00	; 0
}
    15b4:	08 95       	ret

000015b6 <_ZN9EtherCard27udpServerHasProcessedPacketEj>:

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    15b6:	8f 92       	push	r8
    15b8:	9f 92       	push	r9
    15ba:	bf 92       	push	r11
    15bc:	cf 92       	push	r12
    15be:	df 92       	push	r13
    15c0:	ef 92       	push	r14
    15c2:	ff 92       	push	r15
    15c4:	0f 93       	push	r16
    15c6:	1f 93       	push	r17
    15c8:	cf 93       	push	r28
    15ca:	df 93       	push	r29
    bool packetProcessed = false;
    for(int i = 0; i < numListeners; i++)
    15cc:	80 91 34 05 	lds	r24, 0x0534	; 0x800534 <numListeners>
    15d0:	88 23       	and	r24, r24
    15d2:	09 f4       	brne	.+2      	; 0x15d6 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x20>
    15d4:	46 c0       	rjmp	.+140    	; 0x1662 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0xac>
    15d6:	c5 e3       	ldi	r28, 0x35	; 53
    15d8:	d5 e0       	ldi	r29, 0x05	; 5
    15da:	e1 2c       	mov	r14, r1
    15dc:	f1 2c       	mov	r15, r1
    15de:	80 e0       	ldi	r24, 0x00	; 0
    {
        if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((uint8_t) listeners[i].port) && listeners[i].listening)
    15e0:	0f 2e       	mov	r0, r31
    15e2:	f1 e0       	ldi	r31, 0x01	; 1
    15e4:	cf 2e       	mov	r12, r31
    15e6:	f3 e0       	ldi	r31, 0x03	; 3
    15e8:	df 2e       	mov	r13, r31
    15ea:	f0 2d       	mov	r31, r0
                listeners[i].port,
                gPB + IP_SRC_P,
                (gPB[UDP_SRC_PORT_H_P] << 8) | gPB[UDP_SRC_PORT_L_P],
                (const char *) (gPB + UDP_DATA_P),
                datalen);
            packetProcessed = true;
    15ec:	bb 24       	eor	r11, r11
    15ee:	b3 94       	inc	r11

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    bool packetProcessed = false;
    for(int i = 0; i < numListeners; i++)
    {
        if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((uint8_t) listeners[i].port) && listeners[i].listening)
    15f0:	aa 81       	ldd	r26, Y+2	; 0x02
    15f2:	bb 81       	ldd	r27, Y+3	; 0x03
    15f4:	f6 01       	movw	r30, r12
    15f6:	24 a1       	ldd	r18, Z+36	; 0x24
    15f8:	30 e0       	ldi	r19, 0x00	; 0
    15fa:	4b 2f       	mov	r20, r27
    15fc:	55 27       	eor	r21, r21
    15fe:	24 17       	cp	r18, r20
    1600:	35 07       	cpc	r19, r21
    1602:	21 f5       	brne	.+72     	; 0x164c <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x96>
    1604:	25 a1       	ldd	r18, Z+37	; 0x25
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	ad 01       	movw	r20, r26
    160a:	55 27       	eor	r21, r21
    160c:	24 17       	cp	r18, r20
    160e:	35 07       	cpc	r19, r21
    1610:	e9 f4       	brne	.+58     	; 0x164c <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x96>
    1612:	9c 81       	ldd	r25, Y+4	; 0x04
    1614:	99 23       	and	r25, r25
    1616:	d1 f0       	breq	.+52     	; 0x164c <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x96>
            listeners[i].callback(
                listeners[i].port,
                gPB + IP_SRC_P,
                (gPB[UDP_SRC_PORT_H_P] << 8) | gPB[UDP_SRC_PORT_L_P],
                (const char *) (gPB + UDP_DATA_P),
                datalen);
    1618:	07 a1       	ldd	r16, Z+39	; 0x27
    161a:	10 e0       	ldi	r17, 0x00	; 0
    161c:	08 50       	subi	r16, 0x08	; 8
    161e:	11 09       	sbc	r17, r1
    1620:	86 a1       	ldd	r24, Z+38	; 0x26
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	98 2f       	mov	r25, r24
    1626:	88 27       	eor	r24, r24
    1628:	08 0f       	add	r16, r24
    162a:	19 1f       	adc	r17, r25
    162c:	42 a1       	ldd	r20, Z+34	; 0x22
    162e:	50 e0       	ldi	r21, 0x00	; 0
    1630:	54 2f       	mov	r21, r20
    1632:	44 27       	eor	r20, r20
    1634:	83 a1       	ldd	r24, Z+35	; 0x23
    1636:	48 2b       	or	r20, r24
    1638:	88 80       	ld	r8, Y
    163a:	99 80       	ldd	r9, Y+1	; 0x01
    163c:	2b e2       	ldi	r18, 0x2B	; 43
    163e:	33 e0       	ldi	r19, 0x03	; 3
    1640:	6b e1       	ldi	r22, 0x1B	; 27
    1642:	73 e0       	ldi	r23, 0x03	; 3
    1644:	cd 01       	movw	r24, r26
    1646:	f4 01       	movw	r30, r8
    1648:	19 95       	eicall
            packetProcessed = true;
    164a:	8b 2d       	mov	r24, r11
    return numListeners > 0;
}

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    bool packetProcessed = false;
    for(int i = 0; i < numListeners; i++)
    164c:	ff ef       	ldi	r31, 0xFF	; 255
    164e:	ef 1a       	sub	r14, r31
    1650:	ff 0a       	sbc	r15, r31
    1652:	25 96       	adiw	r28, 0x05	; 5
    1654:	20 91 34 05 	lds	r18, 0x0534	; 0x800534 <numListeners>
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	e2 16       	cp	r14, r18
    165c:	f3 06       	cpc	r15, r19
    165e:	44 f2       	brlt	.-112    	; 0x15f0 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x3a>
    1660:	01 c0       	rjmp	.+2      	; 0x1664 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0xae>
bool EtherCard::udpServerListening() {
    return numListeners > 0;
}

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    bool packetProcessed = false;
    1662:	80 e0       	ldi	r24, 0x00	; 0
                datalen);
            packetProcessed = true;
        }
    }
    return packetProcessed;
}
    1664:	df 91       	pop	r29
    1666:	cf 91       	pop	r28
    1668:	1f 91       	pop	r17
    166a:	0f 91       	pop	r16
    166c:	ff 90       	pop	r15
    166e:	ef 90       	pop	r14
    1670:	df 90       	pop	r13
    1672:	cf 90       	pop	r12
    1674:	bf 90       	pop	r11
    1676:	9f 90       	pop	r9
    1678:	8f 90       	pop	r8
    167a:	08 95       	ret

0000167c <_ZN9EtherCard6copyIpEPhPKh>:
#include "../Peripherals/HardwareSerial.h"
#include <stdlib.h>
#include <ctype.h>

void EtherCard::copyIp (uint8_t *dst, const uint8_t *src) {
    memcpy(dst, src, IP_LEN);
    167c:	fb 01       	movw	r30, r22
    167e:	20 81       	ld	r18, Z
    1680:	31 81       	ldd	r19, Z+1	; 0x01
    1682:	fc 01       	movw	r30, r24
    1684:	31 83       	std	Z+1, r19	; 0x01
    1686:	20 83       	st	Z, r18
    1688:	fb 01       	movw	r30, r22
    168a:	22 81       	ldd	r18, Z+2	; 0x02
    168c:	33 81       	ldd	r19, Z+3	; 0x03
    168e:	fc 01       	movw	r30, r24
    1690:	33 83       	std	Z+3, r19	; 0x03
    1692:	22 83       	std	Z+2, r18	; 0x02
    1694:	08 95       	ret

00001696 <_ZN9EtherCard7copyMacEPhPKh>:
}

void EtherCard::copyMac (uint8_t *dst, const uint8_t *src) {
    1696:	dc 01       	movw	r26, r24
    memcpy(dst, src, ETH_LEN);
    1698:	96 e0       	ldi	r25, 0x06	; 6
    169a:	fb 01       	movw	r30, r22
    169c:	01 90       	ld	r0, Z+
    169e:	0d 92       	st	X+, r0
    16a0:	9a 95       	dec	r25
    16a2:	e1 f7       	brne	.-8      	; 0x169c <_ZN9EtherCard7copyMacEPhPKh+0x6>
    16a4:	08 95       	ret

000016a6 <_ZN9EtherComm13CheckChecksumEPKch>:
	}
}

bool EtherComm::CheckChecksum(const char *data, uint8_t len){
  //data++; //Ignore first byte, the start byte.
  uint8_t checksum = (uint8_t)(*(data++)); //Start by 'adding' the command to the checksum
    16a6:	fc 01       	movw	r30, r24
    16a8:	20 81       	ld	r18, Z
  checksum += (uint8_t)(*(data++));
    16aa:	dc 01       	movw	r26, r24
    16ac:	12 96       	adiw	r26, 0x02	; 2
    16ae:	81 81       	ldd	r24, Z+1	; 0x01
    16b0:	92 2f       	mov	r25, r18
    16b2:	98 0f       	add	r25, r24
  while(len-- > 0){
    16b4:	3f ef       	ldi	r19, 0xFF	; 255
    16b6:	36 0f       	add	r19, r22
    16b8:	66 23       	and	r22, r22
    16ba:	61 f0       	breq	.+24     	; 0x16d4 <_ZN9EtherComm13CheckChecksumEPKch+0x2e>
    16bc:	fd 01       	movw	r30, r26
    16be:	83 2f       	mov	r24, r19
    checksum += (uint8_t)(*(data++));
    16c0:	21 91       	ld	r18, Z+
    16c2:	92 0f       	add	r25, r18

bool EtherComm::CheckChecksum(const char *data, uint8_t len){
  //data++; //Ignore first byte, the start byte.
  uint8_t checksum = (uint8_t)(*(data++)); //Start by 'adding' the command to the checksum
  checksum += (uint8_t)(*(data++));
  while(len-- > 0){
    16c4:	81 50       	subi	r24, 0x01	; 1
    16c6:	e0 f7       	brcc	.-8      	; 0x16c0 <_ZN9EtherComm13CheckChecksumEPKch+0x1a>
    16c8:	23 2f       	mov	r18, r19
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	2f 5f       	subi	r18, 0xFF	; 255
    16ce:	3f 4f       	sbci	r19, 0xFF	; 255
    16d0:	a2 0f       	add	r26, r18
    16d2:	b3 1f       	adc	r27, r19
    checksum += (uint8_t)(*(data++));
  }
//  Serial.println((uint8_t)(checksum & CHECKSUM_MASK));
  return (checksum & CHECKSUM_MASK) == (uint8_t)(*data);
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	2c 91       	ld	r18, X
    16d8:	29 13       	cpse	r18, r25
    16da:	80 e0       	ldi	r24, 0x00	; 0
}
    16dc:	08 95       	ret

000016de <_Z10udpReceivejPhjPKcj>:

//char EtherComm::buffer[BUFFER_SIZE];
uint8_t* EtherComm::buffer = ether.buffer + UDP_DATA_P;

//callback that prints received packets to the serial port
void udpReceive(uint16_t dest_port, uint8_t src_ip[IP_LEN], uint16_t src_port, const char *data, uint16_t packetLen){
    16de:	0f 93       	push	r16
    16e0:	1f 93       	push	r17
    16e2:	cf 93       	push	r28
    16e4:	df 93       	push	r29
	}
	Serial.println();
	Serial.print("Checksum: ");
	Serial.println((uint8_t)(*index));
*/	
	if(packetLen >= 3){ //At minimum, start byte, command, and checksum.
    16e6:	a8 01       	movw	r20, r16
    16e8:	43 50       	subi	r20, 0x03	; 3
    16ea:	51 09       	sbc	r21, r1
    16ec:	4f 3f       	cpi	r20, 0xFF	; 255
    16ee:	51 05       	cpc	r21, r1
    16f0:	09 f0       	breq	.+2      	; 0x16f4 <_Z10udpReceivejPhjPKcj+0x16>
    16f2:	88 f4       	brcc	.+34     	; 0x1716 <_Z10udpReceivejPhjPKcj+0x38>
		if(packetLen <= 258){
			uint8_t dataLen = (uint8_t)(packetLen - 3);
			if((uint8_t)data[0] == START_BYTE){
    16f4:	f9 01       	movw	r30, r18
    16f6:	80 81       	ld	r24, Z
    16f8:	8f 3f       	cpi	r24, 0xFF	; 255
    16fa:	69 f4       	brne	.+26     	; 0x1716 <_Z10udpReceivejPhjPKcj+0x38>
    16fc:	e9 01       	movw	r28, r18
	Serial.print("Checksum: ");
	Serial.println((uint8_t)(*index));
*/	
	if(packetLen >= 3){ //At minimum, start byte, command, and checksum.
		if(packetLen <= 258){
			uint8_t dataLen = (uint8_t)(packetLen - 3);
    16fe:	03 50       	subi	r16, 0x03	; 3
			if((uint8_t)data[0] == START_BYTE){
			//		Serial.print("Computed Checksum: ");
				if(EtherComm::CheckChecksum(data, dataLen)){
    1700:	60 2f       	mov	r22, r16
    1702:	c9 01       	movw	r24, r18
    1704:	d0 df       	rcall	.-96     	; 0x16a6 <_ZN9EtherComm13CheckChecksumEPKch>
    1706:	88 23       	and	r24, r24
    1708:	31 f0       	breq	.+12     	; 0x1716 <_Z10udpReceivejPhjPKcj+0x38>
					EtherComm::CommandReceived((uint8_t)data[1], (const uint8_t*)(data + 2), dataLen);
    170a:	be 01       	movw	r22, r28
    170c:	6e 5f       	subi	r22, 0xFE	; 254
    170e:	7f 4f       	sbci	r23, 0xFF	; 255
    1710:	40 2f       	mov	r20, r16
    1712:	89 81       	ldd	r24, Y+1	; 0x01
    1714:	90 d9       	rcall	.-3296   	; 0xa36 <_ZN9EtherComm15CommandReceivedEhPKhh>
				}
			}
		}
	}
}
    1716:	df 91       	pop	r29
    1718:	cf 91       	pop	r28
    171a:	1f 91       	pop	r17
    171c:	0f 91       	pop	r16
    171e:	08 95       	ret

00001720 <_ZN9EtherComm5beginEjjRVhS1_h>:
  }
//  Serial.println((uint8_t)(checksum & CHECKSUM_MASK));
  return (checksum & CHECKSUM_MASK) == (uint8_t)(*data);
}

bool EtherComm::begin(uint16_t recvPort, uint16_t destPort, Register& csDDR, Register& csPort, uint8_t csPin){
    1720:	0f 93       	push	r16
    1722:	cf 93       	push	r28
    1724:	df 93       	push	r29
    1726:	ec 01       	movw	r28, r24
    1728:	ca 01       	movw	r24, r20
    172a:	a9 01       	movw	r20, r18
    172c:	20 2f       	mov	r18, r16
  EtherComm::_recvPort = recvPort;
    172e:	d0 93 60 05 	sts	0x0560, r29	; 0x800560 <_ZN9EtherComm9_recvPortE+0x1>
    1732:	c0 93 5f 05 	sts	0x055F, r28	; 0x80055f <_ZN9EtherComm9_recvPortE>
  EtherComm::_destPort = destPort;
    1736:	70 93 5e 05 	sts	0x055E, r23	; 0x80055e <_ZN9EtherComm9_destPortE+0x1>
    173a:	60 93 5d 05 	sts	0x055D, r22	; 0x80055d <_ZN9EtherComm9_destPortE>
  
  if (ether.begin(EtherComm::_mymac, csDDR, csPort, csPin) == 0) return false;
    173e:	bc 01       	movw	r22, r24
    1740:	86 e0       	ldi	r24, 0x06	; 6
    1742:	92 e0       	ldi	r25, 0x02	; 2
    1744:	d3 db       	rcall	.-2138   	; 0xeec <_ZN9EtherCard5beginEPKhRVhS3_h>
    1746:	88 23       	and	r24, r24
    1748:	79 f0       	breq	.+30     	; 0x1768 <_ZN9EtherComm5beginEjjRVhS1_h+0x48>
  ether.staticSetup(EtherComm::_myip, EtherComm::_gwip);
    174a:	20 e0       	ldi	r18, 0x00	; 0
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	40 e0       	ldi	r20, 0x00	; 0
    1750:	50 e0       	ldi	r21, 0x00	; 0
    1752:	6c e0       	ldi	r22, 0x0C	; 12
    1754:	72 e0       	ldi	r23, 0x02	; 2
    1756:	80 e1       	ldi	r24, 0x10	; 16
    1758:	92 e0       	ldi	r25, 0x02	; 2
    175a:	e1 db       	rcall	.-2110   	; 0xf1e <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_>
  ether.printIp("GW:  ", ether.gwip);
  ether.printIp("DNS: ", ether.dnsip);
  */
  
  //Register the udpSerialPrint() method to listen to port the receive port.
  ether.udpServerListenOnPort(&udpReceive, recvPort);
    175c:	be 01       	movw	r22, r28
    175e:	8f e6       	ldi	r24, 0x6F	; 111
    1760:	9b e0       	ldi	r25, 0x0B	; 11
    1762:	08 df       	rcall	.-496    	; 0x1574 <_ZN9EtherCard21udpServerListenOnPortEPFvjPhjPKcjEj>
  
  return true;
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	01 c0       	rjmp	.+2      	; 0x176a <_ZN9EtherComm5beginEjjRVhS1_h+0x4a>

bool EtherComm::begin(uint16_t recvPort, uint16_t destPort, Register& csDDR, Register& csPort, uint8_t csPin){
  EtherComm::_recvPort = recvPort;
  EtherComm::_destPort = destPort;
  
  if (ether.begin(EtherComm::_mymac, csDDR, csPort, csPin) == 0) return false;
    1768:	80 e0       	ldi	r24, 0x00	; 0
  
  //Register the udpSerialPrint() method to listen to port the receive port.
  ether.udpServerListenOnPort(&udpReceive, recvPort);
  
  return true;
}
    176a:	df 91       	pop	r29
    176c:	cf 91       	pop	r28
    176e:	0f 91       	pop	r16
    1770:	08 95       	ret

00001772 <_ZN9EtherComm11SendCommandEhh>:

void EtherComm::SendCommand(uint8_t cmd, uint8_t len){
    1772:	0f 93       	push	r16
    1774:	1f 93       	push	r17
    1776:	cf 93       	push	r28
    1778:	df 93       	push	r29
  EtherComm::buffer[0] = START_BYTE;
    177a:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    177e:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    1782:	9f ef       	ldi	r25, 0xFF	; 255
    1784:	90 83       	st	Z, r25
  EtherComm::buffer[1] = cmd;
    1786:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    178a:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    178e:	81 83       	std	Z+1, r24	; 0x01
  //EtherComm::buffer[2] = len;
  
  uint8_t checksum = START_BYTE + cmd;
    1790:	81 50       	subi	r24, 0x01	; 1
  uint8_t* index = &EtherComm::buffer[2]; //TODO why is char* being used? convert ot uint8_t*!!
    1792:	c0 91 00 02 	lds	r28, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    1796:	d0 91 01 02 	lds	r29, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    179a:	de 01       	movw	r26, r28
    179c:	12 96       	adiw	r26, 0x02	; 2
  uint8_t bytes = len;
  while(bytes-- > 0){
    179e:	4f ef       	ldi	r20, 0xFF	; 255
    17a0:	46 0f       	add	r20, r22
    17a2:	66 23       	and	r22, r22
    17a4:	81 f0       	breq	.+32     	; 0x17c6 <_ZN9EtherComm11SendCommandEhh+0x54>
    17a6:	fd 01       	movw	r30, r26
    17a8:	50 e0       	ldi	r21, 0x00	; 0
    17aa:	9a 01       	movw	r18, r20
    17ac:	2d 5f       	subi	r18, 0xFD	; 253
    17ae:	3f 4f       	sbci	r19, 0xFF	; 255
    17b0:	2c 0f       	add	r18, r28
    17b2:	3d 1f       	adc	r19, r29
    checksum += (uint8_t)(*(index++));  
    17b4:	91 91       	ld	r25, Z+
    17b6:	89 0f       	add	r24, r25
  //EtherComm::buffer[2] = len;
  
  uint8_t checksum = START_BYTE + cmd;
  uint8_t* index = &EtherComm::buffer[2]; //TODO why is char* being used? convert ot uint8_t*!!
  uint8_t bytes = len;
  while(bytes-- > 0){
    17b8:	e2 17       	cp	r30, r18
    17ba:	f3 07       	cpc	r31, r19
    17bc:	d9 f7       	brne	.-10     	; 0x17b4 <_ZN9EtherComm11SendCommandEhh+0x42>
    17be:	4f 5f       	subi	r20, 0xFF	; 255
    17c0:	5f 4f       	sbci	r21, 0xFF	; 255
    17c2:	a4 0f       	add	r26, r20
    17c4:	b5 1f       	adc	r27, r21
    checksum += (uint8_t)(*(index++));  
  }
  (*index) = (uint8_t)(checksum & CHECKSUM_MASK);
    17c6:	8c 93       	st	X, r24

  //Serial.print("Send: ");
  //Serial.println(len);
  ether.sendUdp(EtherComm::buffer, (uint16_t)len + (uint16_t)3, _recvPort, _destIP, _destPort);
    17c8:	00 91 5d 05 	lds	r16, 0x055D	; 0x80055d <_ZN9EtherComm9_destPortE>
    17cc:	10 91 5e 05 	lds	r17, 0x055E	; 0x80055e <_ZN9EtherComm9_destPortE+0x1>
    17d0:	40 91 5f 05 	lds	r20, 0x055F	; 0x80055f <_ZN9EtherComm9_recvPortE>
    17d4:	50 91 60 05 	lds	r21, 0x0560	; 0x800560 <_ZN9EtherComm9_recvPortE+0x1>
    17d8:	70 e0       	ldi	r23, 0x00	; 0
    17da:	6d 5f       	subi	r22, 0xFD	; 253
    17dc:	7f 4f       	sbci	r23, 0xFF	; 255
    17de:	22 e0       	ldi	r18, 0x02	; 2
    17e0:	32 e0       	ldi	r19, 0x02	; 2
    17e2:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    17e6:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    17ea:	52 dd       	rcall	.-1372   	; 0x1290 <_ZN9EtherCard7sendUdpEPKhjjS1_j>
}
    17ec:	df 91       	pop	r29
    17ee:	cf 91       	pop	r28
    17f0:	1f 91       	pop	r17
    17f2:	0f 91       	pop	r16
    17f4:	08 95       	ret

000017f6 <main>:
#define MIN 550
#define MAX 2400

int main(void){
	//TestIMU();
	sei(); //Enable global interrupts
    17f6:	78 94       	sei
	public:
	inline HardwareSerial(
	volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
	volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
	volatile uint8_t *ucsrc, volatile uint8_t *udr);
	void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    17f8:	26 e0       	ldi	r18, 0x06	; 6
    17fa:	40 e8       	ldi	r20, 0x80	; 128
    17fc:	55 e2       	ldi	r21, 0x25	; 37
    17fe:	60 e0       	ldi	r22, 0x00	; 0
    1800:	70 e0       	ldi	r23, 0x00	; 0
    1802:	86 e6       	ldi	r24, 0x66	; 102
    1804:	95 e0       	ldi	r25, 0x05	; 5
    1806:	2a d3       	rcall	.+1620   	; 0x1e5c <_ZN14HardwareSerial5beginEmh>
	Serial.begin(9600);
	Serial.println("\nInitializing...");
    1808:	6b e2       	ldi	r22, 0x2B	; 43
    180a:	72 e0       	ldi	r23, 0x02	; 2
    180c:	86 e6       	ldi	r24, 0x66	; 102
    180e:	95 e0       	ldi	r25, 0x05	; 5
    1810:	0e 94 dd 17 	call	0x2fba	; 0x2fba <_ZN5Print7printlnEPKc>
	
	if(!rov.begin()){
    1814:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <_ZN5Robot5beginEv>
    1818:	81 11       	cpse	r24, r1
    181a:	07 c0       	rjmp	.+14     	; 0x182a <main+0x34>
		Serial.println("Failed to initialize robot.");
    181c:	6c e3       	ldi	r22, 0x3C	; 60
    181e:	72 e0       	ldi	r23, 0x02	; 2
    1820:	86 e6       	ldi	r24, 0x66	; 102
    1822:	95 e0       	ldi	r25, 0x05	; 5
    1824:	0e 94 dd 17 	call	0x2fba	; 0x2fba <_ZN5Print7printlnEPKc>
    1828:	ff cf       	rjmp	.-2      	; 0x1828 <main+0x32>
		while(1);
	}
	Serial.println("Robot initialized.");
    182a:	68 e5       	ldi	r22, 0x58	; 88
    182c:	72 e0       	ldi	r23, 0x02	; 2
    182e:	86 e6       	ldi	r24, 0x66	; 102
    1830:	95 e0       	ldi	r25, 0x05	; 5
    1832:	0e 94 dd 17 	call	0x2fba	; 0x2fba <_ZN5Print7printlnEPKc>
	
	if(!EtherComm::begin((uint16_t)6001, (uint16_t)6002, EthernetDDR, EthernetPort, EthernetPin_CS)){
    1836:	01 e0       	ldi	r16, 0x01	; 1
    1838:	25 e2       	ldi	r18, 0x25	; 37
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	44 e2       	ldi	r20, 0x24	; 36
    183e:	50 e0       	ldi	r21, 0x00	; 0
    1840:	62 e7       	ldi	r22, 0x72	; 114
    1842:	77 e1       	ldi	r23, 0x17	; 23
    1844:	81 e7       	ldi	r24, 0x71	; 113
    1846:	97 e1       	ldi	r25, 0x17	; 23
    1848:	6b df       	rcall	.-298    	; 0x1720 <_ZN9EtherComm5beginEjjRVhS1_h>
    184a:	81 11       	cpse	r24, r1
    184c:	07 c0       	rjmp	.+14     	; 0x185c <main+0x66>
		Serial.println("Failed to access Ethernet controller.");
    184e:	6b e6       	ldi	r22, 0x6B	; 107
    1850:	72 e0       	ldi	r23, 0x02	; 2
    1852:	86 e6       	ldi	r24, 0x66	; 102
    1854:	95 e0       	ldi	r25, 0x05	; 5
    1856:	0e 94 dd 17 	call	0x2fba	; 0x2fba <_ZN5Print7printlnEPKc>
    185a:	ff cf       	rjmp	.-2      	; 0x185a <main+0x64>
		while(1);
	}
	Serial.println("Connected to controller.");
    185c:	61 e9       	ldi	r22, 0x91	; 145
    185e:	72 e0       	ldi	r23, 0x02	; 2
    1860:	86 e6       	ldi	r24, 0x66	; 102
    1862:	95 e0       	ldi	r25, 0x05	; 5
    1864:	0e 94 dd 17 	call	0x2fba	; 0x2fba <_ZN5Print7printlnEPKc>
	Servo5.EnableA();
	Servo5.EnableB();
	Servo5.EnableC();
	*/
    /* Replace with your application code */
	TwiServo.begin();
    1868:	81 e6       	ldi	r24, 0x61	; 97
    186a:	95 e0       	ldi	r25, 0x05	; 5
  static bool begin(uint16_t recvPort, uint16_t destPort, Register& csDDR, Register& csPort, uint8_t csPin);

  friend void udpReceive(uint16_t dest_port, uint8_t src_ip[IP_LEN], uint16_t src_port, const char *data, uint16_t len);

  static void Loop(){
    ether.packetLoop(ether.packetReceive());
    186c:	9a d1       	rcall	.+820    	; 0x1ba2 <_ZN18TwiServoController5beginEv>
    186e:	d9 da       	rcall	.-2638   	; 0xe22 <_ZN8ENC28J6013packetReceiveEv>
    1870:	48 dd       	rcall	.-1392   	; 0x1302 <_ZN9EtherCard10packetLoopEj>
    while (1) {
		EtherComm::Loop();
		rov.Loop();
    1872:	0e 94 91 16 	call	0x2d22	; 0x2d22 <_ZN5Robot4LoopEv>
		} else if(pos == 0) {
			dir = 1;
			_delay_ms(500);
		}
		_delay_ms(5);*/
		TwiServo.sweep();
    1876:	81 e6       	ldi	r24, 0x61	; 97
    1878:	95 e0       	ldi	r25, 0x05	; 5
    187a:	ad d1       	rcall	.+858    	; 0x1bd6 <_ZN18TwiServoController5sweepEv>
    187c:	f8 cf       	rjmp	.-16     	; 0x186e <main+0x78>

0000187e <_GLOBAL__sub_I_dir>:
    187e:	60 e4       	ldi	r22, 0x40	; 64
int8_t dir = 1;
uint8_t pos = 128;
#include "Utils/CpuFreq.h"
#include <util/delay.h>

TwiServoController TwiServo(0x40);
    1880:	81 e6       	ldi	r24, 0x61	; 97
    1882:	95 e0       	ldi	r25, 0x05	; 5
    1884:	8c c1       	rjmp	.+792    	; 0x1b9e <_ZN18TwiServoControllerC1Eh>
    1886:	08 95       	ret

00001888 <_ZN7PCA9685C1Eh>:
//Wakes board from sleep
void PCA9685::wakeup() {
  uint8_t sleep = read8(PCA9685_MODE1);
  uint8_t wakeup = sleep & ~MODE1_SLEEP; // set sleep bit low
  write8(PCA9685_MODE1, wakeup);
}
    1888:	fc 01       	movw	r30, r24
    188a:	60 83       	st	Z, r22
    188c:	08 95       	ret

0000188e <_ZN7PCA96856setPWMEhjj>:
    188e:	ef 92       	push	r14
    1890:	ff 92       	push	r15
    1892:	0f 93       	push	r16
    1894:	1f 93       	push	r17
    1896:	cf 93       	push	r28
    1898:	df 93       	push	r29
    189a:	c6 2f       	mov	r28, r22
    189c:	e4 2e       	mov	r14, r20
    189e:	f5 2e       	mov	r15, r21
    18a0:	02 2f       	mov	r16, r18
    18a2:	13 2f       	mov	r17, r19
    18a4:	fc 01       	movw	r30, r24
    18a6:	60 81       	ld	r22, Z
    18a8:	80 e0       	ldi	r24, 0x00	; 0
    18aa:	97 e0       	ldi	r25, 0x07	; 7
    18ac:	0e 94 66 15 	call	0x2acc	; 0x2acc <_ZN7TwoWire17beginTransmissionEh>
    18b0:	6c 2f       	mov	r22, r28
    18b2:	70 e0       	ldi	r23, 0x00	; 0
    18b4:	66 0f       	add	r22, r22
    18b6:	77 1f       	adc	r23, r23
    18b8:	66 0f       	add	r22, r22
    18ba:	77 1f       	adc	r23, r23
    18bc:	6a 5f       	subi	r22, 0xFA	; 250
    18be:	7f 4f       	sbci	r23, 0xFF	; 255
    18c0:	c0 e0       	ldi	r28, 0x00	; 0
    18c2:	d7 e0       	ldi	r29, 0x07	; 7
    18c4:	e8 81       	ld	r30, Y
    18c6:	f9 81       	ldd	r31, Y+1	; 0x01
    18c8:	01 90       	ld	r0, Z+
    18ca:	f0 81       	ld	r31, Z
    18cc:	e0 2d       	mov	r30, r0
    18ce:	ce 01       	movw	r24, r28
    18d0:	19 95       	eicall
    18d2:	e8 81       	ld	r30, Y
    18d4:	f9 81       	ldd	r31, Y+1	; 0x01
    18d6:	01 90       	ld	r0, Z+
    18d8:	f0 81       	ld	r31, Z
    18da:	e0 2d       	mov	r30, r0
    18dc:	6e 2d       	mov	r22, r14
    18de:	ce 01       	movw	r24, r28
    18e0:	19 95       	eicall
    18e2:	e8 81       	ld	r30, Y
    18e4:	f9 81       	ldd	r31, Y+1	; 0x01
    18e6:	01 90       	ld	r0, Z+
    18e8:	f0 81       	ld	r31, Z
    18ea:	e0 2d       	mov	r30, r0
    18ec:	6f 2d       	mov	r22, r15
    18ee:	ce 01       	movw	r24, r28
    18f0:	19 95       	eicall
    18f2:	e8 81       	ld	r30, Y
    18f4:	f9 81       	ldd	r31, Y+1	; 0x01
    18f6:	01 90       	ld	r0, Z+
    18f8:	f0 81       	ld	r31, Z
    18fa:	e0 2d       	mov	r30, r0
    18fc:	60 2f       	mov	r22, r16
    18fe:	ce 01       	movw	r24, r28
    1900:	19 95       	eicall
    1902:	e8 81       	ld	r30, Y
    1904:	f9 81       	ldd	r31, Y+1	; 0x01
    1906:	01 90       	ld	r0, Z+
    1908:	f0 81       	ld	r31, Z
    190a:	e0 2d       	mov	r30, r0
    190c:	61 2f       	mov	r22, r17
    190e:	ce 01       	movw	r24, r28
    1910:	19 95       	eicall
    1912:	ce 01       	movw	r24, r28
    1914:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <_ZN7TwoWire15endTransmissionEv>
    1918:	df 91       	pop	r29
    191a:	cf 91       	pop	r28
    191c:	1f 91       	pop	r17
    191e:	0f 91       	pop	r16
    1920:	ff 90       	pop	r15
    1922:	ef 90       	pop	r14
    1924:	08 95       	ret

00001926 <_ZN7PCA968522setOscillatorFrequencyEm>:
    1926:	fc 01       	movw	r30, r24
    1928:	41 83       	std	Z+1, r20	; 0x01
    192a:	52 83       	std	Z+2, r21	; 0x02
    192c:	63 83       	std	Z+3, r22	; 0x03
    192e:	74 83       	std	Z+4, r23	; 0x04
    1930:	08 95       	ret

00001932 <_ZN7PCA96855read8Eh>:
    1932:	1f 93       	push	r17
    1934:	cf 93       	push	r28
    1936:	df 93       	push	r29
    1938:	ec 01       	movw	r28, r24
    193a:	16 2f       	mov	r17, r22
    193c:	68 81       	ld	r22, Y
    193e:	80 e0       	ldi	r24, 0x00	; 0
    1940:	97 e0       	ldi	r25, 0x07	; 7
    1942:	0e 94 66 15 	call	0x2acc	; 0x2acc <_ZN7TwoWire17beginTransmissionEh>
    1946:	61 2f       	mov	r22, r17
    1948:	80 e0       	ldi	r24, 0x00	; 0
    194a:	97 e0       	ldi	r25, 0x07	; 7
    194c:	0e 94 fd 14 	call	0x29fa	; 0x29fa <_ZN7TwoWire5writeEh>
    1950:	80 e0       	ldi	r24, 0x00	; 0
    1952:	97 e0       	ldi	r25, 0x07	; 7
    1954:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <_ZN7TwoWire15endTransmissionEv>
    1958:	41 e0       	ldi	r20, 0x01	; 1
    195a:	68 81       	ld	r22, Y
    195c:	80 e0       	ldi	r24, 0x00	; 0
    195e:	97 e0       	ldi	r25, 0x07	; 7
    1960:	0e 94 e7 15 	call	0x2bce	; 0x2bce <_ZN7TwoWire11requestFromEhh>
    1964:	80 e0       	ldi	r24, 0x00	; 0
    1966:	97 e0       	ldi	r25, 0x07	; 7
    1968:	ec d7       	rcall	.+4056   	; 0x2942 <_ZN7TwoWire4readEv>
    196a:	df 91       	pop	r29
    196c:	cf 91       	pop	r28
    196e:	1f 91       	pop	r17
    1970:	08 95       	ret

00001972 <_ZN7PCA96856write8Ehh>:
    1972:	cf 93       	push	r28
    1974:	df 93       	push	r29
    1976:	d6 2f       	mov	r29, r22
    1978:	c4 2f       	mov	r28, r20
    197a:	fc 01       	movw	r30, r24
    197c:	60 81       	ld	r22, Z
    197e:	80 e0       	ldi	r24, 0x00	; 0
    1980:	97 e0       	ldi	r25, 0x07	; 7
    1982:	0e 94 66 15 	call	0x2acc	; 0x2acc <_ZN7TwoWire17beginTransmissionEh>
    1986:	6d 2f       	mov	r22, r29
    1988:	80 e0       	ldi	r24, 0x00	; 0
    198a:	97 e0       	ldi	r25, 0x07	; 7
    198c:	0e 94 fd 14 	call	0x29fa	; 0x29fa <_ZN7TwoWire5writeEh>
    1990:	6c 2f       	mov	r22, r28
    1992:	80 e0       	ldi	r24, 0x00	; 0
    1994:	97 e0       	ldi	r25, 0x07	; 7
    1996:	0e 94 fd 14 	call	0x29fa	; 0x29fa <_ZN7TwoWire5writeEh>
    199a:	80 e0       	ldi	r24, 0x00	; 0
    199c:	97 e0       	ldi	r25, 0x07	; 7
    199e:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <_ZN7TwoWire15endTransmissionEv>
    19a2:	df 91       	pop	r29
    19a4:	cf 91       	pop	r28
    19a6:	08 95       	ret

000019a8 <_ZN7PCA96855resetEv>:
    19a8:	40 e8       	ldi	r20, 0x80	; 128
    19aa:	60 e0       	ldi	r22, 0x00	; 0
    19ac:	e2 df       	rcall	.-60     	; 0x1972 <_ZN7PCA96856write8Ehh>
    19ae:	8f e3       	ldi	r24, 0x3F	; 63
    19b0:	9c e9       	ldi	r25, 0x9C	; 156
    19b2:	01 97       	sbiw	r24, 0x01	; 1
    19b4:	f1 f7       	brne	.-4      	; 0x19b2 <_ZN7PCA96855resetEv+0xa>
    19b6:	00 c0       	rjmp	.+0      	; 0x19b8 <_ZN7PCA96855resetEv+0x10>
    19b8:	00 00       	nop
    19ba:	08 95       	ret

000019bc <_ZN7PCA96859setExtClkEh>:

//Sets EXTCLK pin to use the external clock
void PCA9685::setExtClk(uint8_t prescale) {
    19bc:	0f 93       	push	r16
    19be:	1f 93       	push	r17
    19c0:	cf 93       	push	r28
    19c2:	df 93       	push	r29
    19c4:	8c 01       	movw	r16, r24
    19c6:	d6 2f       	mov	r29, r22
  uint8_t oldmode = read8(PCA9685_MODE1);
    19c8:	60 e0       	ldi	r22, 0x00	; 0
    19ca:	b3 df       	rcall	.-154    	; 0x1932 <_ZN7PCA96855read8Eh>
  uint8_t newmode = (oldmode & ~MODE1_RESTART) | MODE1_SLEEP; // sleep
    19cc:	c8 2f       	mov	r28, r24
    19ce:	cf 76       	andi	r28, 0x6F	; 111
    19d0:	4c 2f       	mov	r20, r28
    19d2:	40 61       	ori	r20, 0x10	; 16
  write8(PCA9685_MODE1, newmode); // go to sleep, turn off internal oscillator
    19d4:	60 e0       	ldi	r22, 0x00	; 0
    19d6:	c8 01       	movw	r24, r16
    19d8:	cc df       	rcall	.-104    	; 0x1972 <_ZN7PCA96856write8Ehh>

  // This sets both the SLEEP and EXTCLK bits of the MODE1 register to switch to
  // use the external clock.
  write8(PCA9685_MODE1, (newmode |= MODE1_EXTCLK));
    19da:	c0 65       	ori	r28, 0x50	; 80
    19dc:	4c 2f       	mov	r20, r28
    19de:	60 e0       	ldi	r22, 0x00	; 0
    19e0:	c8 01       	movw	r24, r16
    19e2:	c7 df       	rcall	.-114    	; 0x1972 <_ZN7PCA96856write8Ehh>

  write8(PCA9685_PRESCALE, prescale); // set the prescaler
    19e4:	4d 2f       	mov	r20, r29
    19e6:	6e ef       	ldi	r22, 0xFE	; 254
    19e8:	c8 01       	movw	r24, r16
    19ea:	c3 df       	rcall	.-122    	; 0x1972 <_ZN7PCA96856write8Ehh>
    19ec:	8f e1       	ldi	r24, 0x1F	; 31
    19ee:	9e e4       	ldi	r25, 0x4E	; 78
    19f0:	01 97       	sbiw	r24, 0x01	; 1
    19f2:	f1 f7       	brne	.-4      	; 0x19f0 <_ZN7PCA96859setExtClkEh+0x34>
    19f4:	00 c0       	rjmp	.+0      	; 0x19f6 <_ZN7PCA96859setExtClkEh+0x3a>
    19f6:	00 00       	nop

  _delay_ms(5);
  
  write8(PCA9685_MODE1, (newmode & ~MODE1_SLEEP) | MODE1_RESTART | MODE1_AI);// clear the SLEEP bit to start
    19f8:	4c 2f       	mov	r20, r28
    19fa:	4f 74       	andi	r20, 0x4F	; 79
    19fc:	40 6a       	ori	r20, 0xA0	; 160
    19fe:	60 e0       	ldi	r22, 0x00	; 0
    1a00:	c8 01       	movw	r24, r16
    1a02:	b7 df       	rcall	.-146    	; 0x1972 <_ZN7PCA96856write8Ehh>
}
    1a04:	df 91       	pop	r29
    1a06:	cf 91       	pop	r28
    1a08:	1f 91       	pop	r17
    1a0a:	0f 91       	pop	r16
    1a0c:	08 95       	ret

00001a0e <_ZN7PCA968510setPWMFreqEf>:

//Sets the PWM frequency for the entire chip, up to ~1.6 KHz
void PCA9685::setPWMFreq(float freq) {
    1a0e:	8f 92       	push	r8
    1a10:	9f 92       	push	r9
    1a12:	af 92       	push	r10
    1a14:	bf 92       	push	r11
    1a16:	cf 92       	push	r12
    1a18:	df 92       	push	r13
    1a1a:	ef 92       	push	r14
    1a1c:	ff 92       	push	r15
    1a1e:	1f 93       	push	r17
    1a20:	cf 93       	push	r28
    1a22:	df 93       	push	r29
    1a24:	ec 01       	movw	r28, r24
    1a26:	6a 01       	movw	r12, r20
    1a28:	7b 01       	movw	r14, r22
  // Range output modulation frequency is dependant on oscillator
  if (freq < 1)
    1a2a:	20 e0       	ldi	r18, 0x00	; 0
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	40 e8       	ldi	r20, 0x80	; 128
    1a30:	5f e3       	ldi	r21, 0x3F	; 63
    1a32:	c7 01       	movw	r24, r14
    1a34:	b6 01       	movw	r22, r12
    1a36:	0e 94 52 18 	call	0x30a4	; 0x30a4 <__cmpsf2>
    1a3a:	88 23       	and	r24, r24
    1a3c:	a4 f0       	brlt	.+40     	; 0x1a66 <_ZN7PCA968510setPWMFreqEf+0x58>
    freq = 1;
  if (freq > 3500)
    1a3e:	20 e0       	ldi	r18, 0x00	; 0
    1a40:	30 ec       	ldi	r19, 0xC0	; 192
    1a42:	4a e5       	ldi	r20, 0x5A	; 90
    1a44:	55 e4       	ldi	r21, 0x45	; 69
    1a46:	c7 01       	movw	r24, r14
    1a48:	b6 01       	movw	r22, r12
    1a4a:	0e 94 9c 19 	call	0x3338	; 0x3338 <__gesf2>
    1a4e:	18 16       	cp	r1, r24
    1a50:	94 f4       	brge	.+36     	; 0x1a76 <_ZN7PCA968510setPWMFreqEf+0x68>
    freq = 3500; // Datasheet limit is 3052=50MHz/(4*4096)
    1a52:	0f 2e       	mov	r0, r31
    1a54:	c1 2c       	mov	r12, r1
    1a56:	f0 ec       	ldi	r31, 0xC0	; 192
    1a58:	df 2e       	mov	r13, r31
    1a5a:	fa e5       	ldi	r31, 0x5A	; 90
    1a5c:	ef 2e       	mov	r14, r31
    1a5e:	f5 e4       	ldi	r31, 0x45	; 69
    1a60:	ff 2e       	mov	r15, r31
    1a62:	f0 2d       	mov	r31, r0
    1a64:	08 c0       	rjmp	.+16     	; 0x1a76 <_ZN7PCA968510setPWMFreqEf+0x68>

//Sets the PWM frequency for the entire chip, up to ~1.6 KHz
void PCA9685::setPWMFreq(float freq) {
  // Range output modulation frequency is dependant on oscillator
  if (freq < 1)
    freq = 1;
    1a66:	0f 2e       	mov	r0, r31
    1a68:	c1 2c       	mov	r12, r1
    1a6a:	d1 2c       	mov	r13, r1
    1a6c:	f0 e8       	ldi	r31, 0x80	; 128
    1a6e:	ef 2e       	mov	r14, r31
    1a70:	ff e3       	ldi	r31, 0x3F	; 63
    1a72:	ff 2e       	mov	r15, r31
    1a74:	f0 2d       	mov	r31, r0
  if (freq > 3500)
    freq = 3500; // Datasheet limit is 3052=50MHz/(4*4096)

  float prescaleval = ((_oscillator_freq / (freq * 4096.0)) + 0.5) - 1;
    1a76:	69 81       	ldd	r22, Y+1	; 0x01
    1a78:	7a 81       	ldd	r23, Y+2	; 0x02
    1a7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a7e:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <__floatunsisf>
    1a82:	4b 01       	movw	r8, r22
    1a84:	5c 01       	movw	r10, r24
    1a86:	20 e0       	ldi	r18, 0x00	; 0
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	40 e8       	ldi	r20, 0x80	; 128
    1a8c:	55 e4       	ldi	r21, 0x45	; 69
    1a8e:	c7 01       	movw	r24, r14
    1a90:	b6 01       	movw	r22, r12
    1a92:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
    1a96:	9b 01       	movw	r18, r22
    1a98:	ac 01       	movw	r20, r24
    1a9a:	c5 01       	movw	r24, r10
    1a9c:	b4 01       	movw	r22, r8
    1a9e:	0e 94 56 18 	call	0x30ac	; 0x30ac <__divsf3>
    1aa2:	20 e0       	ldi	r18, 0x00	; 0
    1aa4:	30 e0       	ldi	r19, 0x00	; 0
    1aa6:	40 e0       	ldi	r20, 0x00	; 0
    1aa8:	5f e3       	ldi	r21, 0x3F	; 63
    1aaa:	0e 94 ee 17 	call	0x2fdc	; 0x2fdc <__addsf3>
    1aae:	20 e0       	ldi	r18, 0x00	; 0
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	40 e8       	ldi	r20, 0x80	; 128
    1ab4:	5f e3       	ldi	r21, 0x3F	; 63
    1ab6:	0e 94 ed 17 	call	0x2fda	; 0x2fda <__subsf3>
    1aba:	6b 01       	movw	r12, r22
    1abc:	7c 01       	movw	r14, r24
  if (prescaleval < PCA9685_PRESCALE_MIN)
    1abe:	20 e0       	ldi	r18, 0x00	; 0
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	40 e4       	ldi	r20, 0x40	; 64
    1ac4:	50 e4       	ldi	r21, 0x40	; 64
    1ac6:	0e 94 52 18 	call	0x30a4	; 0x30a4 <__cmpsf2>
    1aca:	88 23       	and	r24, r24
    1acc:	9c f0       	brlt	.+38     	; 0x1af4 <_ZN7PCA968510setPWMFreqEf+0xe6>
    prescaleval = PCA9685_PRESCALE_MIN;
  if (prescaleval > PCA9685_PRESCALE_MAX)
    1ace:	20 e0       	ldi	r18, 0x00	; 0
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	4f e7       	ldi	r20, 0x7F	; 127
    1ad4:	53 e4       	ldi	r21, 0x43	; 67
    1ad6:	c7 01       	movw	r24, r14
    1ad8:	b6 01       	movw	r22, r12
    1ada:	0e 94 9c 19 	call	0x3338	; 0x3338 <__gesf2>
    1ade:	18 16       	cp	r1, r24
    1ae0:	7c f4       	brge	.+30     	; 0x1b00 <_ZN7PCA968510setPWMFreqEf+0xf2>
    prescaleval = PCA9685_PRESCALE_MAX;
    1ae2:	0f 2e       	mov	r0, r31
    1ae4:	c1 2c       	mov	r12, r1
    1ae6:	d1 2c       	mov	r13, r1
    1ae8:	ff e7       	ldi	r31, 0x7F	; 127
    1aea:	ef 2e       	mov	r14, r31
    1aec:	f3 e4       	ldi	r31, 0x43	; 67
    1aee:	ff 2e       	mov	r15, r31
    1af0:	f0 2d       	mov	r31, r0
    1af2:	06 c0       	rjmp	.+12     	; 0x1b00 <_ZN7PCA968510setPWMFreqEf+0xf2>
  if (freq > 3500)
    freq = 3500; // Datasheet limit is 3052=50MHz/(4*4096)

  float prescaleval = ((_oscillator_freq / (freq * 4096.0)) + 0.5) - 1;
  if (prescaleval < PCA9685_PRESCALE_MIN)
    prescaleval = PCA9685_PRESCALE_MIN;
    1af4:	c1 2c       	mov	r12, r1
    1af6:	d1 2c       	mov	r13, r1
    1af8:	68 94       	set
    1afa:	ee 24       	eor	r14, r14
    1afc:	e6 f8       	bld	r14, 6
    1afe:	fe 2c       	mov	r15, r14
  if (prescaleval > PCA9685_PRESCALE_MAX)
    prescaleval = PCA9685_PRESCALE_MAX;
  uint8_t prescale = (uint8_t)prescaleval;

  uint8_t oldmode = read8(PCA9685_MODE1);
    1b00:	60 e0       	ldi	r22, 0x00	; 0
    1b02:	ce 01       	movw	r24, r28
    1b04:	16 df       	rcall	.-468    	; 0x1932 <_ZN7PCA96855read8Eh>
    1b06:	18 2f       	mov	r17, r24
  uint8_t newmode = (oldmode & ~MODE1_RESTART) | MODE1_SLEEP; // sleep
  write8(PCA9685_MODE1, newmode);                             // go to sleep
    1b08:	48 2f       	mov	r20, r24
    1b0a:	4f 76       	andi	r20, 0x6F	; 111
    1b0c:	40 61       	ori	r20, 0x10	; 16
    1b0e:	60 e0       	ldi	r22, 0x00	; 0
    1b10:	ce 01       	movw	r24, r28
    1b12:	2f df       	rcall	.-418    	; 0x1972 <_ZN7PCA96856write8Ehh>
  write8(PCA9685_PRESCALE, prescale); // set the prescaler
    1b14:	c7 01       	movw	r24, r14
    1b16:	b6 01       	movw	r22, r12
    1b18:	0e 94 be 18 	call	0x317c	; 0x317c <__fixunssfsi>
    1b1c:	46 2f       	mov	r20, r22
    1b1e:	6e ef       	ldi	r22, 0xFE	; 254
    1b20:	ce 01       	movw	r24, r28
    1b22:	27 df       	rcall	.-434    	; 0x1972 <_ZN7PCA96856write8Ehh>
  write8(PCA9685_MODE1, oldmode);
    1b24:	41 2f       	mov	r20, r17
    1b26:	60 e0       	ldi	r22, 0x00	; 0
    1b28:	ce 01       	movw	r24, r28
    1b2a:	23 df       	rcall	.-442    	; 0x1972 <_ZN7PCA96856write8Ehh>
    1b2c:	8f e1       	ldi	r24, 0x1F	; 31
    1b2e:	9e e4       	ldi	r25, 0x4E	; 78
    1b30:	01 97       	sbiw	r24, 0x01	; 1
    1b32:	f1 f7       	brne	.-4      	; 0x1b30 <_ZN7PCA968510setPWMFreqEf+0x122>
    1b34:	00 c0       	rjmp	.+0      	; 0x1b36 <_ZN7PCA968510setPWMFreqEf+0x128>
    1b36:	00 00       	nop
  _delay_ms(5);
  // This sets the MODE1 register to turn on auto increment.
  write8(PCA9685_MODE1, oldmode | MODE1_RESTART | MODE1_AI);
    1b38:	41 2f       	mov	r20, r17
    1b3a:	40 6a       	ori	r20, 0xA0	; 160
    1b3c:	60 e0       	ldi	r22, 0x00	; 0
    1b3e:	ce 01       	movw	r24, r28
    1b40:	18 df       	rcall	.-464    	; 0x1972 <_ZN7PCA96856write8Ehh>
}
    1b42:	df 91       	pop	r29
    1b44:	cf 91       	pop	r28
    1b46:	1f 91       	pop	r17
    1b48:	ff 90       	pop	r15
    1b4a:	ef 90       	pop	r14
    1b4c:	df 90       	pop	r13
    1b4e:	cf 90       	pop	r12
    1b50:	bf 90       	pop	r11
    1b52:	af 90       	pop	r10
    1b54:	9f 90       	pop	r9
    1b56:	8f 90       	pop	r8
    1b58:	08 95       	ret

00001b5a <_ZN7PCA96855beginEh>:

PCA9685::PCA9685(const uint8_t addr) : _addr(addr){
	
}

void PCA9685::begin(uint8_t prescale) {
    1b5a:	1f 93       	push	r17
    1b5c:	cf 93       	push	r28
    1b5e:	df 93       	push	r29
    1b60:	ec 01       	movw	r28, r24
    1b62:	16 2f       	mov	r17, r22
	Wire.begin();
    1b64:	80 e0       	ldi	r24, 0x00	; 0
    1b66:	97 e0       	ldi	r25, 0x07	; 7
    1b68:	a1 d7       	rcall	.+3906   	; 0x2aac <_ZN7TwoWire5beginEv>
	reset();
    1b6a:	ce 01       	movw	r24, r28
    1b6c:	1d df       	rcall	.-454    	; 0x19a8 <_ZN7PCA96855resetEv>
	if (prescale) {
    1b6e:	11 23       	and	r17, r17
    1b70:	21 f0       	breq	.+8      	; 0x1b7a <_ZN7PCA96855beginEh+0x20>
		setExtClk(prescale);
    1b72:	61 2f       	mov	r22, r17
    1b74:	ce 01       	movw	r24, r28
    1b76:	22 df       	rcall	.-444    	; 0x19bc <_ZN7PCA96859setExtClkEh>
    1b78:	06 c0       	rjmp	.+12     	; 0x1b86 <_ZN7PCA96855beginEh+0x2c>
	} else {  
		setPWMFreq(1000); // set a default frequency
    1b7a:	40 e0       	ldi	r20, 0x00	; 0
    1b7c:	50 e0       	ldi	r21, 0x00	; 0
    1b7e:	6a e7       	ldi	r22, 0x7A	; 122
    1b80:	74 e4       	ldi	r23, 0x44	; 68
    1b82:	ce 01       	movw	r24, r28
    1b84:	44 df       	rcall	.-376    	; 0x1a0e <_ZN7PCA968510setPWMFreqEf>
 *  @brief Setter for the internally tracked oscillator used for freq
 * calculations
 *  @param freq The frequency the PCA9685 should use for frequency calculations
 */
void PCA9685::setOscillatorFrequency(uint32_t freq) {
  _oscillator_freq = freq;
    1b86:	80 e4       	ldi	r24, 0x40	; 64
    1b88:	98 e7       	ldi	r25, 0x78	; 120
    1b8a:	ad e7       	ldi	r26, 0x7D	; 125
    1b8c:	b1 e0       	ldi	r27, 0x01	; 1
    1b8e:	89 83       	std	Y+1, r24	; 0x01
    1b90:	9a 83       	std	Y+2, r25	; 0x02
    1b92:	ab 83       	std	Y+3, r26	; 0x03
    1b94:	bc 83       	std	Y+4, r27	; 0x04
		setExtClk(prescale);
	} else {  
		setPWMFreq(1000); // set a default frequency
	}
	setOscillatorFrequency(FREQUENCY_OSCILLATOR); // set the default internal frequency
}
    1b96:	df 91       	pop	r29
    1b98:	cf 91       	pop	r28
    1b9a:	1f 91       	pop	r17
    1b9c:	08 95       	ret

00001b9e <_ZN18TwiServoControllerC1Eh>:

#include "TwiServoController.h"
#include "../Utils/CpuFreq.h"
#include <util/delay.h>

TwiServoController::TwiServoController(const uint8_t addr) : controller(addr){
    1b9e:	74 ce       	rjmp	.-792    	; 0x1888 <_ZN7PCA9685C1Eh>
    1ba0:	08 95       	ret

00001ba2 <_ZN18TwiServoController5beginEv>:
		
}

void TwiServoController::begin(){
    1ba2:	cf 93       	push	r28
    1ba4:	df 93       	push	r29
    1ba6:	ec 01       	movw	r28, r24
	controller.begin();
    1ba8:	60 e0       	ldi	r22, 0x00	; 0
    1baa:	d7 df       	rcall	.-82     	; 0x1b5a <_ZN7PCA96855beginEh>
	// In theory the internal oscillator is 25MHz but it really isn't
	// that precise. You can 'calibrate' by tweaking this number till
	// you get the frequency you're expecting!
	controller.setOscillatorFrequency(27000000);  // The int.osc. is closer to 27MHz
    1bac:	40 ec       	ldi	r20, 0xC0	; 192
    1bae:	5c ef       	ldi	r21, 0xFC	; 252
    1bb0:	6b e9       	ldi	r22, 0x9B	; 155
    1bb2:	71 e0       	ldi	r23, 0x01	; 1
    1bb4:	ce 01       	movw	r24, r28
    1bb6:	b7 de       	rcall	.-658    	; 0x1926 <_ZN7PCA968522setOscillatorFrequencyEm>
	controller.setPWMFreq(SERVO_FREQ);  // Analog servos run at ~50 Hz updates
    1bb8:	40 e0       	ldi	r20, 0x00	; 0
    1bba:	50 e0       	ldi	r21, 0x00	; 0
    1bbc:	68 e4       	ldi	r22, 0x48	; 72
    1bbe:	72 e4       	ldi	r23, 0x42	; 66
    1bc0:	ce 01       	movw	r24, r28
    1bc2:	25 df       	rcall	.-438    	; 0x1a0e <_ZN7PCA968510setPWMFreqEf>
    1bc4:	8f e3       	ldi	r24, 0x3F	; 63
    1bc6:	9c e9       	ldi	r25, 0x9C	; 156
    1bc8:	01 97       	sbiw	r24, 0x01	; 1
    1bca:	f1 f7       	brne	.-4      	; 0x1bc8 <_ZN18TwiServoController5beginEv+0x26>
    1bcc:	00 c0       	rjmp	.+0      	; 0x1bce <_ZN18TwiServoController5beginEv+0x2c>
    1bce:	00 00       	nop

	_delay_ms(10);
	
	//return controller.getOscillatorFrequency() == 27000000;
}
    1bd0:	df 91       	pop	r29
    1bd2:	cf 91       	pop	r28
    1bd4:	08 95       	ret

00001bd6 <_ZN18TwiServoController5sweepEv>:

void TwiServoController::sweep(){
    1bd6:	cf 92       	push	r12
    1bd8:	df 92       	push	r13
    1bda:	ff 92       	push	r15
    1bdc:	0f 93       	push	r16
    1bde:	1f 93       	push	r17
    1be0:	cf 93       	push	r28
    1be2:	df 93       	push	r29
	for (uint16_t pulselen = SERVOMIN; pulselen < SERVOMAX; pulselen++) {
    1be4:	0f 2e       	mov	r0, r31
    1be6:	f6 e9       	ldi	r31, 0x96	; 150
    1be8:	cf 2e       	mov	r12, r31
    1bea:	d1 2c       	mov	r13, r1
    1bec:	f0 2d       	mov	r31, r0
		for(uint8_t i = 0; i < 16; i++){
			controller.setPWM(i, 0, pulselen);
    1bee:	18 2f       	mov	r17, r24
    1bf0:	d9 2f       	mov	r29, r25
	
	//return controller.getOscillatorFrequency() == 27000000;
}

void TwiServoController::sweep(){
	for (uint16_t pulselen = SERVOMIN; pulselen < SERVOMAX; pulselen++) {
    1bf2:	c0 e0       	ldi	r28, 0x00	; 0
		for(uint8_t i = 0; i < 16; i++){
			controller.setPWM(i, 0, pulselen);
    1bf4:	01 2f       	mov	r16, r17
    1bf6:	fd 2e       	mov	r15, r29
    1bf8:	96 01       	movw	r18, r12
    1bfa:	40 e0       	ldi	r20, 0x00	; 0
    1bfc:	50 e0       	ldi	r21, 0x00	; 0
    1bfe:	6c 2f       	mov	r22, r28
    1c00:	81 2f       	mov	r24, r17
    1c02:	9d 2f       	mov	r25, r29
    1c04:	44 de       	rcall	.-888    	; 0x188e <_ZN7PCA96856setPWMEhjj>
	//return controller.getOscillatorFrequency() == 27000000;
}

void TwiServoController::sweep(){
	for (uint16_t pulselen = SERVOMIN; pulselen < SERVOMAX; pulselen++) {
		for(uint8_t i = 0; i < 16; i++){
    1c06:	cf 5f       	subi	r28, 0xFF	; 255
    1c08:	c0 31       	cpi	r28, 0x10	; 16
    1c0a:	a1 f7       	brne	.-24     	; 0x1bf4 <_ZN18TwiServoController5sweepEv+0x1e>
    1c0c:	8f e1       	ldi	r24, 0x1F	; 31
    1c0e:	9e e4       	ldi	r25, 0x4E	; 78
    1c10:	01 97       	sbiw	r24, 0x01	; 1
    1c12:	f1 f7       	brne	.-4      	; 0x1c10 <_ZN18TwiServoController5sweepEv+0x3a>
    1c14:	00 c0       	rjmp	.+0      	; 0x1c16 <_ZN18TwiServoController5sweepEv+0x40>
    1c16:	00 00       	nop
	
	//return controller.getOscillatorFrequency() == 27000000;
}

void TwiServoController::sweep(){
	for (uint16_t pulselen = SERVOMIN; pulselen < SERVOMAX; pulselen++) {
    1c18:	9f ef       	ldi	r25, 0xFF	; 255
    1c1a:	c9 1a       	sub	r12, r25
    1c1c:	d9 0a       	sbc	r13, r25
    1c1e:	28 e5       	ldi	r18, 0x58	; 88
    1c20:	c2 16       	cp	r12, r18
    1c22:	22 e0       	ldi	r18, 0x02	; 2
    1c24:	d2 06       	cpc	r13, r18
    1c26:	29 f7       	brne	.-54     	; 0x1bf2 <_ZN18TwiServoController5sweepEv+0x1c>
    1c28:	8f ef       	ldi	r24, 0xFF	; 255
    1c2a:	99 e6       	ldi	r25, 0x69	; 105
    1c2c:	28 e1       	ldi	r18, 0x18	; 24
    1c2e:	81 50       	subi	r24, 0x01	; 1
    1c30:	90 40       	sbci	r25, 0x00	; 0
    1c32:	20 40       	sbci	r18, 0x00	; 0
    1c34:	e1 f7       	brne	.-8      	; 0x1c2e <_ZN18TwiServoController5sweepEv+0x58>
    1c36:	00 c0       	rjmp	.+0      	; 0x1c38 <_ZN18TwiServoController5sweepEv+0x62>
    1c38:	00 00       	nop
			controller.setPWM(i, 0, pulselen);
		}
		_delay_ms(5);
	}
	_delay_ms(500);
	for (uint16_t pulselen = SERVOMAX; pulselen > SERVOMIN; pulselen--) {
    1c3a:	0f 2e       	mov	r0, r31
    1c3c:	f8 e5       	ldi	r31, 0x58	; 88
    1c3e:	cf 2e       	mov	r12, r31
    1c40:	f2 e0       	ldi	r31, 0x02	; 2
    1c42:	df 2e       	mov	r13, r31
    1c44:	f0 2d       	mov	r31, r0
    1c46:	c0 e0       	ldi	r28, 0x00	; 0
		for(uint8_t i = 0; i < 16; i++){
			controller.setPWM(i, 0, pulselen);
    1c48:	96 01       	movw	r18, r12
    1c4a:	40 e0       	ldi	r20, 0x00	; 0
    1c4c:	50 e0       	ldi	r21, 0x00	; 0
    1c4e:	6c 2f       	mov	r22, r28
    1c50:	80 2f       	mov	r24, r16
    1c52:	9f 2d       	mov	r25, r15
    1c54:	1c de       	rcall	.-968    	; 0x188e <_ZN7PCA96856setPWMEhjj>
		}
		_delay_ms(5);
	}
	_delay_ms(500);
	for (uint16_t pulselen = SERVOMAX; pulselen > SERVOMIN; pulselen--) {
		for(uint8_t i = 0; i < 16; i++){
    1c56:	cf 5f       	subi	r28, 0xFF	; 255
    1c58:	c0 31       	cpi	r28, 0x10	; 16
    1c5a:	b1 f7       	brne	.-20     	; 0x1c48 <_ZN18TwiServoController5sweepEv+0x72>
    1c5c:	8f e1       	ldi	r24, 0x1F	; 31
    1c5e:	9e e4       	ldi	r25, 0x4E	; 78
    1c60:	01 97       	sbiw	r24, 0x01	; 1
    1c62:	f1 f7       	brne	.-4      	; 0x1c60 <_ZN18TwiServoController5sweepEv+0x8a>
    1c64:	00 c0       	rjmp	.+0      	; 0x1c66 <_ZN18TwiServoController5sweepEv+0x90>
    1c66:	00 00       	nop
			controller.setPWM(i, 0, pulselen);
		}
		_delay_ms(5);
	}
	_delay_ms(500);
	for (uint16_t pulselen = SERVOMAX; pulselen > SERVOMIN; pulselen--) {
    1c68:	91 e0       	ldi	r25, 0x01	; 1
    1c6a:	c9 1a       	sub	r12, r25
    1c6c:	d1 08       	sbc	r13, r1
    1c6e:	26 e9       	ldi	r18, 0x96	; 150
    1c70:	c2 16       	cp	r12, r18
    1c72:	d1 04       	cpc	r13, r1
    1c74:	41 f7       	brne	.-48     	; 0x1c46 <_ZN18TwiServoController5sweepEv+0x70>
    1c76:	8f ef       	ldi	r24, 0xFF	; 255
    1c78:	99 e6       	ldi	r25, 0x69	; 105
    1c7a:	28 e1       	ldi	r18, 0x18	; 24
    1c7c:	81 50       	subi	r24, 0x01	; 1
    1c7e:	90 40       	sbci	r25, 0x00	; 0
    1c80:	20 40       	sbci	r18, 0x00	; 0
    1c82:	e1 f7       	brne	.-8      	; 0x1c7c <_ZN18TwiServoController5sweepEv+0xa6>
    1c84:	00 c0       	rjmp	.+0      	; 0x1c86 <_ZN18TwiServoController5sweepEv+0xb0>
    1c86:	00 00       	nop
			controller.setPWM(i, 0, pulselen);
		}
		_delay_ms(5);
	}
	_delay_ms(500);
}
    1c88:	df 91       	pop	r29
    1c8a:	cf 91       	pop	r28
    1c8c:	1f 91       	pop	r17
    1c8e:	0f 91       	pop	r16
    1c90:	ff 90       	pop	r15
    1c92:	df 90       	pop	r13
    1c94:	cf 90       	pop	r12
    1c96:	08 95       	ret

00001c98 <_ZN14HardwareSerial9availableEv>:
	#endif
	#if defined(HAVE_HWSERIAL2)
	if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
	#endif
	#if defined(HAVE_HWSERIAL3)
	if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    1c98:	fc 01       	movw	r30, r24
    1c9a:	97 85       	ldd	r25, Z+15	; 0x0f
    1c9c:	20 89       	ldd	r18, Z+16	; 0x10
    1c9e:	89 2f       	mov	r24, r25
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	80 5c       	subi	r24, 0xC0	; 192
    1ca4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ca6:	82 1b       	sub	r24, r18
    1ca8:	91 09       	sbc	r25, r1
    1caa:	8f 73       	andi	r24, 0x3F	; 63
    1cac:	99 27       	eor	r25, r25
    1cae:	08 95       	ret

00001cb0 <_ZN14HardwareSerial4peekEv>:
    1cb0:	fc 01       	movw	r30, r24
    1cb2:	97 85       	ldd	r25, Z+15	; 0x0f
    1cb4:	80 89       	ldd	r24, Z+16	; 0x10
    1cb6:	98 17       	cp	r25, r24
    1cb8:	31 f0       	breq	.+12     	; 0x1cc6 <_ZN14HardwareSerial4peekEv+0x16>
    1cba:	80 89       	ldd	r24, Z+16	; 0x10
    1cbc:	e8 0f       	add	r30, r24
    1cbe:	f1 1d       	adc	r31, r1
    1cc0:	83 89       	ldd	r24, Z+19	; 0x13
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	08 95       	ret
    1cc6:	8f ef       	ldi	r24, 0xFF	; 255
    1cc8:	9f ef       	ldi	r25, 0xFF	; 255
    1cca:	08 95       	ret

00001ccc <_ZN14HardwareSerial4readEv>:
    1ccc:	fc 01       	movw	r30, r24
    1cce:	97 85       	ldd	r25, Z+15	; 0x0f
    1cd0:	80 89       	ldd	r24, Z+16	; 0x10
    1cd2:	98 17       	cp	r25, r24
    1cd4:	61 f0       	breq	.+24     	; 0x1cee <_ZN14HardwareSerial4readEv+0x22>
    1cd6:	80 89       	ldd	r24, Z+16	; 0x10
    1cd8:	df 01       	movw	r26, r30
    1cda:	a8 0f       	add	r26, r24
    1cdc:	b1 1d       	adc	r27, r1
    1cde:	53 96       	adiw	r26, 0x13	; 19
    1ce0:	8c 91       	ld	r24, X
    1ce2:	90 89       	ldd	r25, Z+16	; 0x10
    1ce4:	9f 5f       	subi	r25, 0xFF	; 255
    1ce6:	9f 73       	andi	r25, 0x3F	; 63
    1ce8:	90 8b       	std	Z+16, r25	; 0x10
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	08 95       	ret
    1cee:	8f ef       	ldi	r24, 0xFF	; 255
    1cf0:	9f ef       	ldi	r25, 0xFF	; 255
    1cf2:	08 95       	ret

00001cf4 <_ZN14HardwareSerial17availableForWriteEv>:
    1cf4:	fc 01       	movw	r30, r24
    1cf6:	21 89       	ldd	r18, Z+17	; 0x11
    1cf8:	32 89       	ldd	r19, Z+18	; 0x12
    1cfa:	23 17       	cp	r18, r19
    1cfc:	38 f0       	brcs	.+14     	; 0x1d0c <_ZN14HardwareSerial17availableForWriteEv+0x18>
    1cfe:	8f e3       	ldi	r24, 0x3F	; 63
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	82 1b       	sub	r24, r18
    1d04:	91 09       	sbc	r25, r1
    1d06:	83 0f       	add	r24, r19
    1d08:	91 1d       	adc	r25, r1
    1d0a:	08 95       	ret
    1d0c:	83 2f       	mov	r24, r19
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	82 1b       	sub	r24, r18
    1d12:	91 09       	sbc	r25, r1
    1d14:	01 97       	sbiw	r24, 0x01	; 1
    1d16:	08 95       	ret

00001d18 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1d18:	fc 01       	movw	r30, r24
	// If interrupts are enabled, there must be more data in the output
	// buffer. Send the next byte
	unsigned char c = _tx_buffer[_tx_buffer_tail];
    1d1a:	82 89       	ldd	r24, Z+18	; 0x12
    1d1c:	df 01       	movw	r26, r30
    1d1e:	a8 0f       	add	r26, r24
    1d20:	b1 1d       	adc	r27, r1
    1d22:	ad 5a       	subi	r26, 0xAD	; 173
    1d24:	bf 4f       	sbci	r27, 0xFF	; 255
    1d26:	8c 91       	ld	r24, X
	_tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1d28:	22 89       	ldd	r18, Z+18	; 0x12
    1d2a:	30 e0       	ldi	r19, 0x00	; 0
    1d2c:	2f 5f       	subi	r18, 0xFF	; 255
    1d2e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d30:	2f 73       	andi	r18, 0x3F	; 63
    1d32:	30 78       	andi	r19, 0x80	; 128
    1d34:	33 23       	and	r19, r19
    1d36:	34 f4       	brge	.+12     	; 0x1d44 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x2c>
    1d38:	21 50       	subi	r18, 0x01	; 1
    1d3a:	31 09       	sbc	r19, r1
    1d3c:	20 6c       	ori	r18, 0xC0	; 192
    1d3e:	3f 6f       	ori	r19, 0xFF	; 255
    1d40:	2f 5f       	subi	r18, 0xFF	; 255
    1d42:	3f 4f       	sbci	r19, 0xFF	; 255
    1d44:	22 8b       	std	Z+18, r18	; 0x12

	*_udr = c;
    1d46:	a4 85       	ldd	r26, Z+12	; 0x0c
    1d48:	b5 85       	ldd	r27, Z+13	; 0x0d
    1d4a:	8c 93       	st	X, r24
	// location". This makes sure flush() won't return until the bytes
	// actually got written. Other r/w bits are preserved, and zeroes
	// written to the rest.

	#ifdef MPCM0
	*_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1d4c:	a6 81       	ldd	r26, Z+6	; 0x06
    1d4e:	b7 81       	ldd	r27, Z+7	; 0x07
    1d50:	8c 91       	ld	r24, X
    1d52:	83 70       	andi	r24, 0x03	; 3
    1d54:	80 64       	ori	r24, 0x40	; 64
    1d56:	8c 93       	st	X, r24
	#else
	*_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
	#endif

	if (_tx_buffer_head == _tx_buffer_tail) {
    1d58:	91 89       	ldd	r25, Z+17	; 0x11
    1d5a:	82 89       	ldd	r24, Z+18	; 0x12
    1d5c:	98 13       	cpse	r25, r24
    1d5e:	06 c0       	rjmp	.+12     	; 0x1d6c <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x54>
		// Buffer empty, so disable interrupts
		cbi(*_ucsrb, UDRIE0);
    1d60:	00 84       	ldd	r0, Z+8	; 0x08
    1d62:	f1 85       	ldd	r31, Z+9	; 0x09
    1d64:	e0 2d       	mov	r30, r0
    1d66:	80 81       	ld	r24, Z
    1d68:	8f 7d       	andi	r24, 0xDF	; 223
    1d6a:	80 83       	st	Z, r24
    1d6c:	08 95       	ret

00001d6e <_ZN14HardwareSerial5flushEv>:
	if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
	return tail - head - 1;
}

void HardwareSerial::flush()
{
    1d6e:	cf 93       	push	r28
    1d70:	df 93       	push	r29
    1d72:	ec 01       	movw	r28, r24
	// If we have never written a byte, no need to flush. This special
	// case is needed since there is no way to force the TXC (transmit
	// complete) bit to 1 during initialization
	if (!_written)
    1d74:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d76:	88 23       	and	r24, r24
    1d78:	d1 f0       	breq	.+52     	; 0x1dae <_ZN14HardwareSerial5flushEv+0x40>
	return;

	while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1d7a:	e8 85       	ldd	r30, Y+8	; 0x08
    1d7c:	f9 85       	ldd	r31, Y+9	; 0x09
    1d7e:	80 81       	ld	r24, Z
    1d80:	85 fd       	sbrc	r24, 5
    1d82:	05 c0       	rjmp	.+10     	; 0x1d8e <_ZN14HardwareSerial5flushEv+0x20>
    1d84:	ae 81       	ldd	r26, Y+6	; 0x06
    1d86:	bf 81       	ldd	r27, Y+7	; 0x07
    1d88:	8c 91       	ld	r24, X
    1d8a:	86 fd       	sbrc	r24, 6
    1d8c:	10 c0       	rjmp	.+32     	; 0x1dae <_ZN14HardwareSerial5flushEv+0x40>
		if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1d8e:	0f b6       	in	r0, 0x3f	; 63
    1d90:	07 fc       	sbrc	r0, 7
    1d92:	f5 cf       	rjmp	.-22     	; 0x1d7e <_ZN14HardwareSerial5flushEv+0x10>
    1d94:	80 81       	ld	r24, Z
    1d96:	85 ff       	sbrs	r24, 5
    1d98:	f2 cf       	rjmp	.-28     	; 0x1d7e <_ZN14HardwareSerial5flushEv+0x10>
    1d9a:	03 c0       	rjmp	.+6      	; 0x1da2 <_ZN14HardwareSerial5flushEv+0x34>
		// Interrupts are globally disabled, but the DR empty
		// interrupt should be enabled, so poll the DR empty flag to
		// prevent deadlock
		if (bit_is_set(*_ucsra, UDRE0))
		_tx_udr_empty_irq();
    1d9c:	ce 01       	movw	r24, r28
    1d9e:	bc df       	rcall	.-136    	; 0x1d18 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1da0:	ec cf       	rjmp	.-40     	; 0x1d7a <_ZN14HardwareSerial5flushEv+0xc>
	while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
		if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
		// Interrupts are globally disabled, but the DR empty
		// interrupt should be enabled, so poll the DR empty flag to
		// prevent deadlock
		if (bit_is_set(*_ucsra, UDRE0))
    1da2:	ae 81       	ldd	r26, Y+6	; 0x06
    1da4:	bf 81       	ldd	r27, Y+7	; 0x07
    1da6:	8c 91       	ld	r24, X
    1da8:	85 ff       	sbrs	r24, 5
    1daa:	e9 cf       	rjmp	.-46     	; 0x1d7e <_ZN14HardwareSerial5flushEv+0x10>
    1dac:	f7 cf       	rjmp	.-18     	; 0x1d9c <_ZN14HardwareSerial5flushEv+0x2e>
		_tx_udr_empty_irq();
	}
	// If we get here, nothing is queued anymore (DRIE is disabled) and
	// the hardware finished tranmission (TXC is set).
}
    1dae:	df 91       	pop	r29
    1db0:	cf 91       	pop	r28
    1db2:	08 95       	ret

00001db4 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    1db4:	0f 93       	push	r16
    1db6:	1f 93       	push	r17
    1db8:	cf 93       	push	r28
    1dba:	df 93       	push	r29
    1dbc:	ec 01       	movw	r28, r24
	_written = true;
    1dbe:	81 e0       	ldi	r24, 0x01	; 1
    1dc0:	8e 87       	std	Y+14, r24	; 0x0e
	// If the buffer and the data register is empty, just write the byte
	// to the data register and be done. This shortcut helps
	// significantly improve the effective datarate at high (>
	// 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
	if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1dc2:	99 89       	ldd	r25, Y+17	; 0x11
    1dc4:	8a 89       	ldd	r24, Y+18	; 0x12
    1dc6:	98 13       	cpse	r25, r24
    1dc8:	25 c0       	rjmp	.+74     	; 0x1e14 <_ZN14HardwareSerial5writeEh+0x60>
    1dca:	ee 81       	ldd	r30, Y+6	; 0x06
    1dcc:	ff 81       	ldd	r31, Y+7	; 0x07
    1dce:	80 81       	ld	r24, Z
    1dd0:	85 fd       	sbrc	r24, 5
    1dd2:	31 c0       	rjmp	.+98     	; 0x1e36 <_ZN14HardwareSerial5writeEh+0x82>
    1dd4:	1f c0       	rjmp	.+62     	; 0x1e14 <_ZN14HardwareSerial5writeEh+0x60>
	}
	tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
	// If the output buffer is full, there's nothing for it other than to
	// wait for the interrupt handler to empty it a bit
	while (i == _tx_buffer_tail) {
    1dd6:	8a 89       	ldd	r24, Y+18	; 0x12
    1dd8:	18 13       	cpse	r17, r24
    1dda:	0b c0       	rjmp	.+22     	; 0x1df2 <_ZN14HardwareSerial5writeEh+0x3e>
		if (bit_is_clear(SREG, SREG_I)) {
    1ddc:	0f b6       	in	r0, 0x3f	; 63
    1dde:	07 fc       	sbrc	r0, 7
    1de0:	fa cf       	rjmp	.-12     	; 0x1dd6 <_ZN14HardwareSerial5writeEh+0x22>
			// Interrupts are disabled, so we'll have to poll the data
			// register empty flag ourselves. If it is set, pretend an
			// interrupt has happened and call the handler to free up
			// space for us.
			if(bit_is_set(*_ucsra, UDRE0))
    1de2:	ee 81       	ldd	r30, Y+6	; 0x06
    1de4:	ff 81       	ldd	r31, Y+7	; 0x07
    1de6:	80 81       	ld	r24, Z
    1de8:	85 ff       	sbrs	r24, 5
    1dea:	f5 cf       	rjmp	.-22     	; 0x1dd6 <_ZN14HardwareSerial5writeEh+0x22>
			_tx_udr_empty_irq();
    1dec:	ce 01       	movw	r24, r28
    1dee:	94 df       	rcall	.-216    	; 0x1d18 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1df0:	f2 cf       	rjmp	.-28     	; 0x1dd6 <_ZN14HardwareSerial5writeEh+0x22>
			} else {
			// nop, the interrupt handler will free up space for us
		}
	}

	_tx_buffer[_tx_buffer_head] = c;
    1df2:	89 89       	ldd	r24, Y+17	; 0x11
    1df4:	fe 01       	movw	r30, r28
    1df6:	e8 0f       	add	r30, r24
    1df8:	f1 1d       	adc	r31, r1
    1dfa:	ed 5a       	subi	r30, 0xAD	; 173
    1dfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfe:	00 83       	st	Z, r16

	// make atomic to prevent execution of ISR between setting the
	// head pointer and setting the interrupt flag resulting in buffer
	// retransmission
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1e00:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1e02:	f8 94       	cli
		_tx_buffer_head = i;
    1e04:	19 8b       	std	Y+17, r17	; 0x11
		sbi(*_ucsrb, UDRIE0);
    1e06:	e8 85       	ldd	r30, Y+8	; 0x08
    1e08:	f9 85       	ldd	r31, Y+9	; 0x09
    1e0a:	80 81       	ld	r24, Z
    1e0c:	80 62       	ori	r24, 0x20	; 32
    1e0e:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1e10:	9f bf       	out	0x3f, r25	; 63
	}
	
	return 1;
    1e12:	1d c0       	rjmp	.+58     	; 0x1e4e <_ZN14HardwareSerial5writeEh+0x9a>
			*_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
			#endif
		}
		return 1;
	}
	tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1e14:	29 89       	ldd	r18, Y+17	; 0x11
    1e16:	30 e0       	ldi	r19, 0x00	; 0
    1e18:	2f 5f       	subi	r18, 0xFF	; 255
    1e1a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e1c:	2f 73       	andi	r18, 0x3F	; 63
    1e1e:	30 78       	andi	r19, 0x80	; 128
    1e20:	33 23       	and	r19, r19
    1e22:	34 f4       	brge	.+12     	; 0x1e30 <_ZN14HardwareSerial5writeEh+0x7c>
    1e24:	21 50       	subi	r18, 0x01	; 1
    1e26:	31 09       	sbc	r19, r1
    1e28:	20 6c       	ori	r18, 0xC0	; 192
    1e2a:	3f 6f       	ori	r19, 0xFF	; 255
    1e2c:	2f 5f       	subi	r18, 0xFF	; 255
    1e2e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e30:	06 2f       	mov	r16, r22
    1e32:	12 2f       	mov	r17, r18
    1e34:	d0 cf       	rjmp	.-96     	; 0x1dd6 <_ZN14HardwareSerial5writeEh+0x22>
		// So writing UDR must happen first.
		// Writing UDR and clearing TC must be done atomically, otherwise
		// interrupts might delay the TXC clear so the byte written to UDR
		// is transmitted (setting TXC) before clearing TXC. Then TXC will
		// be cleared when no bytes are left, causing flush() to hang
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1e36:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1e38:	f8 94       	cli
			*_udr = c;
    1e3a:	ec 85       	ldd	r30, Y+12	; 0x0c
    1e3c:	fd 85       	ldd	r31, Y+13	; 0x0d
    1e3e:	60 83       	st	Z, r22
			#ifdef MPCM0
			*_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1e40:	ee 81       	ldd	r30, Y+6	; 0x06
    1e42:	ff 81       	ldd	r31, Y+7	; 0x07
    1e44:	80 81       	ld	r24, Z
    1e46:	83 70       	andi	r24, 0x03	; 3
    1e48:	80 64       	ori	r24, 0x40	; 64
    1e4a:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1e4c:	9f bf       	out	0x3f, r25	; 63
		_tx_buffer_head = i;
		sbi(*_ucsrb, UDRIE0);
	}
	
	return 1;
}
    1e4e:	81 e0       	ldi	r24, 0x01	; 1
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	df 91       	pop	r29
    1e54:	cf 91       	pop	r28
    1e56:	1f 91       	pop	r17
    1e58:	0f 91       	pop	r16
    1e5a:	08 95       	ret

00001e5c <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, uint8_t config)
{
    1e5c:	cf 92       	push	r12
    1e5e:	df 92       	push	r13
    1e60:	ef 92       	push	r14
    1e62:	ff 92       	push	r15
    1e64:	1f 93       	push	r17
    1e66:	cf 93       	push	r28
    1e68:	df 93       	push	r29
    1e6a:	ec 01       	movw	r28, r24
    1e6c:	6a 01       	movw	r12, r20
    1e6e:	7b 01       	movw	r14, r22
    1e70:	12 2f       	mov	r17, r18
	// Try u2x mode first
	uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
	*_ucsra = 1 << U2X0;
    1e72:	ee 81       	ldd	r30, Y+6	; 0x06
    1e74:	ff 81       	ldd	r31, Y+7	; 0x07
    1e76:	82 e0       	ldi	r24, 0x02	; 2
    1e78:	80 83       	st	Z, r24
	// hardcoded exception for 57600 for compatibility with the bootloader
	// shipped with the Duemilanove and previous boards and the firmware
	// on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
	// be > 4095, so switch back to non-u2x mode if the baud rate is too
	// low.
	if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1e7a:	41 15       	cp	r20, r1
    1e7c:	51 4e       	sbci	r21, 0xE1	; 225
    1e7e:	61 05       	cpc	r22, r1
    1e80:	71 05       	cpc	r23, r1
    1e82:	b1 f0       	breq	.+44     	; 0x1eb0 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, uint8_t config)
{
	// Try u2x mode first
	uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1e84:	60 e0       	ldi	r22, 0x00	; 0
    1e86:	79 e0       	ldi	r23, 0x09	; 9
    1e88:	8d e3       	ldi	r24, 0x3D	; 61
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	a7 01       	movw	r20, r14
    1e8e:	96 01       	movw	r18, r12
    1e90:	0e 94 03 1a 	call	0x3406	; 0x3406 <__udivmodsi4>
    1e94:	da 01       	movw	r26, r20
    1e96:	c9 01       	movw	r24, r18
    1e98:	01 97       	sbiw	r24, 0x01	; 1
    1e9a:	a1 09       	sbc	r26, r1
    1e9c:	b1 09       	sbc	r27, r1
    1e9e:	b6 95       	lsr	r27
    1ea0:	a7 95       	ror	r26
    1ea2:	97 95       	ror	r25
    1ea4:	87 95       	ror	r24
    1ea6:	9c 01       	movw	r18, r24
	// hardcoded exception for 57600 for compatibility with the bootloader
	// shipped with the Duemilanove and previous boards and the firmware
	// on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
	// be > 4095, so switch back to non-u2x mode if the baud rate is too
	// low.
	if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1ea8:	21 15       	cp	r18, r1
    1eaa:	80 e1       	ldi	r24, 0x10	; 16
    1eac:	38 07       	cpc	r19, r24
    1eae:	a8 f0       	brcs	.+42     	; 0x1eda <_ZN14HardwareSerial5beginEmh+0x7e>
	{
		*_ucsra = 0;
    1eb0:	ee 81       	ldd	r30, Y+6	; 0x06
    1eb2:	ff 81       	ldd	r31, Y+7	; 0x07
    1eb4:	10 82       	st	Z, r1
		baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1eb6:	60 e8       	ldi	r22, 0x80	; 128
    1eb8:	74 e8       	ldi	r23, 0x84	; 132
    1eba:	8e e1       	ldi	r24, 0x1E	; 30
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	a7 01       	movw	r20, r14
    1ec0:	96 01       	movw	r18, r12
    1ec2:	0e 94 03 1a 	call	0x3406	; 0x3406 <__udivmodsi4>
    1ec6:	da 01       	movw	r26, r20
    1ec8:	c9 01       	movw	r24, r18
    1eca:	01 97       	sbiw	r24, 0x01	; 1
    1ecc:	a1 09       	sbc	r26, r1
    1ece:	b1 09       	sbc	r27, r1
    1ed0:	b6 95       	lsr	r27
    1ed2:	a7 95       	ror	r26
    1ed4:	97 95       	ror	r25
    1ed6:	87 95       	ror	r24
    1ed8:	9c 01       	movw	r18, r24
	}

	// assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
	*_ubrrh = baud_setting >> 8;
    1eda:	ea 81       	ldd	r30, Y+2	; 0x02
    1edc:	fb 81       	ldd	r31, Y+3	; 0x03
    1ede:	30 83       	st	Z, r19
	*_ubrrl = baud_setting;
    1ee0:	ec 81       	ldd	r30, Y+4	; 0x04
    1ee2:	fd 81       	ldd	r31, Y+5	; 0x05
    1ee4:	20 83       	st	Z, r18

	_written = false;
    1ee6:	1e 86       	std	Y+14, r1	; 0x0e

	//set the data bits, parity, and stop bits
	#if defined(__AVR_ATmega8__)
	config |= 0x80; // select UCSRC register (shared with UBRRH)
	#endif
	*_ucsrc = config;
    1ee8:	ea 85       	ldd	r30, Y+10	; 0x0a
    1eea:	fb 85       	ldd	r31, Y+11	; 0x0b
    1eec:	10 83       	st	Z, r17
	
	sbi(*_ucsrb, RXEN0);
    1eee:	e8 85       	ldd	r30, Y+8	; 0x08
    1ef0:	f9 85       	ldd	r31, Y+9	; 0x09
    1ef2:	80 81       	ld	r24, Z
    1ef4:	80 61       	ori	r24, 0x10	; 16
    1ef6:	80 83       	st	Z, r24
	sbi(*_ucsrb, TXEN0);
    1ef8:	e8 85       	ldd	r30, Y+8	; 0x08
    1efa:	f9 85       	ldd	r31, Y+9	; 0x09
    1efc:	80 81       	ld	r24, Z
    1efe:	88 60       	ori	r24, 0x08	; 8
    1f00:	80 83       	st	Z, r24
	sbi(*_ucsrb, RXCIE0);
    1f02:	e8 85       	ldd	r30, Y+8	; 0x08
    1f04:	f9 85       	ldd	r31, Y+9	; 0x09
    1f06:	80 81       	ld	r24, Z
    1f08:	80 68       	ori	r24, 0x80	; 128
    1f0a:	80 83       	st	Z, r24
	cbi(*_ucsrb, UDRIE0);
    1f0c:	e8 85       	ldd	r30, Y+8	; 0x08
    1f0e:	f9 85       	ldd	r31, Y+9	; 0x09
    1f10:	80 81       	ld	r24, Z
    1f12:	8f 7d       	andi	r24, 0xDF	; 223
    1f14:	80 83       	st	Z, r24
}
    1f16:	df 91       	pop	r29
    1f18:	cf 91       	pop	r28
    1f1a:	1f 91       	pop	r17
    1f1c:	ff 90       	pop	r15
    1f1e:	ef 90       	pop	r14
    1f20:	df 90       	pop	r13
    1f22:	cf 90       	pop	r12
    1f24:	08 95       	ret

00001f26 <_ZN5Print17availableForWriteEv>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
}
    1f26:	80 e0       	ldi	r24, 0x00	; 0
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	08 95       	ret

00001f2c <__vector_25>:
    1f2c:	1f 92       	push	r1
    1f2e:	0f 92       	push	r0
    1f30:	0f b6       	in	r0, 0x3f	; 63
    1f32:	0f 92       	push	r0
    1f34:	11 24       	eor	r1, r1
    1f36:	0b b6       	in	r0, 0x3b	; 59
    1f38:	0f 92       	push	r0
    1f3a:	2f 93       	push	r18
    1f3c:	8f 93       	push	r24
    1f3e:	9f 93       	push	r25
    1f40:	af 93       	push	r26
    1f42:	bf 93       	push	r27
    1f44:	ef 93       	push	r30
    1f46:	ff 93       	push	r31
    1f48:	e0 91 6c 05 	lds	r30, 0x056C	; 0x80056c <Serial+0x6>
    1f4c:	f0 91 6d 05 	lds	r31, 0x056D	; 0x80056d <Serial+0x7>
    1f50:	80 81       	ld	r24, Z
    1f52:	82 fd       	sbrc	r24, 2
    1f54:	14 c0       	rjmp	.+40     	; 0x1f7e <__vector_25+0x52>
    1f56:	e6 e6       	ldi	r30, 0x66	; 102
    1f58:	f5 e0       	ldi	r31, 0x05	; 5
    1f5a:	a4 85       	ldd	r26, Z+12	; 0x0c
    1f5c:	b5 85       	ldd	r27, Z+13	; 0x0d
    1f5e:	2c 91       	ld	r18, X
    1f60:	87 85       	ldd	r24, Z+15	; 0x0f
    1f62:	8f 5f       	subi	r24, 0xFF	; 255
    1f64:	8f 70       	andi	r24, 0x0F	; 15
    1f66:	90 89       	ldd	r25, Z+16	; 0x10
    1f68:	89 17       	cp	r24, r25
    1f6a:	71 f0       	breq	.+28     	; 0x1f88 <__vector_25+0x5c>
    1f6c:	df 01       	movw	r26, r30
    1f6e:	e7 85       	ldd	r30, Z+15	; 0x0f
    1f70:	f0 e0       	ldi	r31, 0x00	; 0
    1f72:	ea 59       	subi	r30, 0x9A	; 154
    1f74:	fa 4f       	sbci	r31, 0xFA	; 250
    1f76:	23 8b       	std	Z+19, r18	; 0x13
    1f78:	1f 96       	adiw	r26, 0x0f	; 15
    1f7a:	8c 93       	st	X, r24
    1f7c:	05 c0       	rjmp	.+10     	; 0x1f88 <__vector_25+0x5c>
    1f7e:	e0 91 72 05 	lds	r30, 0x0572	; 0x800572 <Serial+0xc>
    1f82:	f0 91 73 05 	lds	r31, 0x0573	; 0x800573 <Serial+0xd>
    1f86:	80 81       	ld	r24, Z
    1f88:	ff 91       	pop	r31
    1f8a:	ef 91       	pop	r30
    1f8c:	bf 91       	pop	r27
    1f8e:	af 91       	pop	r26
    1f90:	9f 91       	pop	r25
    1f92:	8f 91       	pop	r24
    1f94:	2f 91       	pop	r18
    1f96:	0f 90       	pop	r0
    1f98:	0b be       	out	0x3b, r0	; 59
    1f9a:	0f 90       	pop	r0
    1f9c:	0f be       	out	0x3f, r0	; 63
    1f9e:	0f 90       	pop	r0
    1fa0:	1f 90       	pop	r1
    1fa2:	18 95       	reti

00001fa4 <__vector_26>:
    1fa4:	1f 92       	push	r1
    1fa6:	0f 92       	push	r0
    1fa8:	0f b6       	in	r0, 0x3f	; 63
    1faa:	0f 92       	push	r0
    1fac:	11 24       	eor	r1, r1
    1fae:	0b b6       	in	r0, 0x3b	; 59
    1fb0:	0f 92       	push	r0
    1fb2:	2f 93       	push	r18
    1fb4:	3f 93       	push	r19
    1fb6:	4f 93       	push	r20
    1fb8:	5f 93       	push	r21
    1fba:	6f 93       	push	r22
    1fbc:	7f 93       	push	r23
    1fbe:	8f 93       	push	r24
    1fc0:	9f 93       	push	r25
    1fc2:	af 93       	push	r26
    1fc4:	bf 93       	push	r27
    1fc6:	ef 93       	push	r30
    1fc8:	ff 93       	push	r31
    1fca:	86 e6       	ldi	r24, 0x66	; 102
    1fcc:	95 e0       	ldi	r25, 0x05	; 5
    1fce:	a4 de       	rcall	.-696    	; 0x1d18 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1fd0:	ff 91       	pop	r31
    1fd2:	ef 91       	pop	r30
    1fd4:	bf 91       	pop	r27
    1fd6:	af 91       	pop	r26
    1fd8:	9f 91       	pop	r25
    1fda:	8f 91       	pop	r24
    1fdc:	7f 91       	pop	r23
    1fde:	6f 91       	pop	r22
    1fe0:	5f 91       	pop	r21
    1fe2:	4f 91       	pop	r20
    1fe4:	3f 91       	pop	r19
    1fe6:	2f 91       	pop	r18
    1fe8:	0f 90       	pop	r0
    1fea:	0b be       	out	0x3b, r0	; 59
    1fec:	0f 90       	pop	r0
    1fee:	0f be       	out	0x3f, r0	; 63
    1ff0:	0f 90       	pop	r0
    1ff2:	1f 90       	pop	r1
    1ff4:	18 95       	reti

00001ff6 <_GLOBAL__sub_I___vector_25>:
volatile uint8_t *ucsrc, volatile uint8_t *udr) :
_ubrrh(ubrrh), _ubrrl(ubrrl),
_ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
_udr(udr),
_rx_buffer_head(0), _rx_buffer_tail(0),
_tx_buffer_head(0), _tx_buffer_tail(0)
    1ff6:	e6 e6       	ldi	r30, 0x66	; 102
    1ff8:	f5 e0       	ldi	r31, 0x05	; 5
    1ffa:	8e ea       	ldi	r24, 0xAE	; 174
    1ffc:	92 e0       	ldi	r25, 0x02	; 2
    1ffe:	91 83       	std	Z+1, r25	; 0x01
    2000:	80 83       	st	Z, r24
    2002:	85 ec       	ldi	r24, 0xC5	; 197
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	93 83       	std	Z+3, r25	; 0x03
    2008:	82 83       	std	Z+2, r24	; 0x02
    200a:	84 ec       	ldi	r24, 0xC4	; 196
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	95 83       	std	Z+5, r25	; 0x05
    2010:	84 83       	std	Z+4, r24	; 0x04
    2012:	80 ec       	ldi	r24, 0xC0	; 192
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	97 83       	std	Z+7, r25	; 0x07
    2018:	86 83       	std	Z+6, r24	; 0x06
    201a:	81 ec       	ldi	r24, 0xC1	; 193
    201c:	90 e0       	ldi	r25, 0x00	; 0
    201e:	91 87       	std	Z+9, r25	; 0x09
    2020:	80 87       	std	Z+8, r24	; 0x08
    2022:	82 ec       	ldi	r24, 0xC2	; 194
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	93 87       	std	Z+11, r25	; 0x0b
    2028:	82 87       	std	Z+10, r24	; 0x0a
    202a:	86 ec       	ldi	r24, 0xC6	; 198
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	95 87       	std	Z+13, r25	; 0x0d
    2030:	84 87       	std	Z+12, r24	; 0x0c
    2032:	17 86       	std	Z+15, r1	; 0x0f
    2034:	10 8a       	std	Z+16, r1	; 0x10
    2036:	11 8a       	std	Z+17, r1	; 0x11
    2038:	12 8a       	std	Z+18, r1	; 0x12
    203a:	08 95       	ret

0000203c <__vector_36>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
}
    203c:	1f 92       	push	r1
    203e:	0f 92       	push	r0
    2040:	0f b6       	in	r0, 0x3f	; 63
    2042:	0f 92       	push	r0
    2044:	11 24       	eor	r1, r1
    2046:	0b b6       	in	r0, 0x3b	; 59
    2048:	0f 92       	push	r0
    204a:	2f 93       	push	r18
    204c:	8f 93       	push	r24
    204e:	9f 93       	push	r25
    2050:	af 93       	push	r26
    2052:	bf 93       	push	r27
    2054:	ef 93       	push	r30
    2056:	ff 93       	push	r31
    2058:	e0 91 9f 05 	lds	r30, 0x059F	; 0x80059f <Serial1+0x6>
    205c:	f0 91 a0 05 	lds	r31, 0x05A0	; 0x8005a0 <Serial1+0x7>
    2060:	80 81       	ld	r24, Z
    2062:	82 fd       	sbrc	r24, 2
    2064:	14 c0       	rjmp	.+40     	; 0x208e <__vector_36+0x52>
    2066:	e9 e9       	ldi	r30, 0x99	; 153
    2068:	f5 e0       	ldi	r31, 0x05	; 5
    206a:	a4 85       	ldd	r26, Z+12	; 0x0c
    206c:	b5 85       	ldd	r27, Z+13	; 0x0d
    206e:	2c 91       	ld	r18, X
    2070:	87 85       	ldd	r24, Z+15	; 0x0f
    2072:	8f 5f       	subi	r24, 0xFF	; 255
    2074:	8f 70       	andi	r24, 0x0F	; 15
    2076:	90 89       	ldd	r25, Z+16	; 0x10
    2078:	89 17       	cp	r24, r25
    207a:	71 f0       	breq	.+28     	; 0x2098 <__vector_36+0x5c>
    207c:	df 01       	movw	r26, r30
    207e:	e7 85       	ldd	r30, Z+15	; 0x0f
    2080:	f0 e0       	ldi	r31, 0x00	; 0
    2082:	e7 56       	subi	r30, 0x67	; 103
    2084:	fa 4f       	sbci	r31, 0xFA	; 250
    2086:	23 8b       	std	Z+19, r18	; 0x13
    2088:	1f 96       	adiw	r26, 0x0f	; 15
    208a:	8c 93       	st	X, r24
    208c:	05 c0       	rjmp	.+10     	; 0x2098 <__vector_36+0x5c>
    208e:	e0 91 a5 05 	lds	r30, 0x05A5	; 0x8005a5 <Serial1+0xc>
    2092:	f0 91 a6 05 	lds	r31, 0x05A6	; 0x8005a6 <Serial1+0xd>
    2096:	80 81       	ld	r24, Z
    2098:	ff 91       	pop	r31
    209a:	ef 91       	pop	r30
    209c:	bf 91       	pop	r27
    209e:	af 91       	pop	r26
    20a0:	9f 91       	pop	r25
    20a2:	8f 91       	pop	r24
    20a4:	2f 91       	pop	r18
    20a6:	0f 90       	pop	r0
    20a8:	0b be       	out	0x3b, r0	; 59
    20aa:	0f 90       	pop	r0
    20ac:	0f be       	out	0x3f, r0	; 63
    20ae:	0f 90       	pop	r0
    20b0:	1f 90       	pop	r1
    20b2:	18 95       	reti

000020b4 <__vector_37>:
    20b4:	1f 92       	push	r1
    20b6:	0f 92       	push	r0
    20b8:	0f b6       	in	r0, 0x3f	; 63
    20ba:	0f 92       	push	r0
    20bc:	11 24       	eor	r1, r1
    20be:	0b b6       	in	r0, 0x3b	; 59
    20c0:	0f 92       	push	r0
    20c2:	2f 93       	push	r18
    20c4:	3f 93       	push	r19
    20c6:	4f 93       	push	r20
    20c8:	5f 93       	push	r21
    20ca:	6f 93       	push	r22
    20cc:	7f 93       	push	r23
    20ce:	8f 93       	push	r24
    20d0:	9f 93       	push	r25
    20d2:	af 93       	push	r26
    20d4:	bf 93       	push	r27
    20d6:	ef 93       	push	r30
    20d8:	ff 93       	push	r31
    20da:	89 e9       	ldi	r24, 0x99	; 153
    20dc:	95 e0       	ldi	r25, 0x05	; 5
    20de:	1c de       	rcall	.-968    	; 0x1d18 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    20e0:	ff 91       	pop	r31
    20e2:	ef 91       	pop	r30
    20e4:	bf 91       	pop	r27
    20e6:	af 91       	pop	r26
    20e8:	9f 91       	pop	r25
    20ea:	8f 91       	pop	r24
    20ec:	7f 91       	pop	r23
    20ee:	6f 91       	pop	r22
    20f0:	5f 91       	pop	r21
    20f2:	4f 91       	pop	r20
    20f4:	3f 91       	pop	r19
    20f6:	2f 91       	pop	r18
    20f8:	0f 90       	pop	r0
    20fa:	0b be       	out	0x3b, r0	; 59
    20fc:	0f 90       	pop	r0
    20fe:	0f be       	out	0x3f, r0	; 63
    2100:	0f 90       	pop	r0
    2102:	1f 90       	pop	r1
    2104:	18 95       	reti

00002106 <_GLOBAL__sub_I___vector_36>:
    2106:	e9 e9       	ldi	r30, 0x99	; 153
    2108:	f5 e0       	ldi	r31, 0x05	; 5
    210a:	8e ea       	ldi	r24, 0xAE	; 174
    210c:	92 e0       	ldi	r25, 0x02	; 2
    210e:	91 83       	std	Z+1, r25	; 0x01
    2110:	80 83       	st	Z, r24
    2112:	8d ec       	ldi	r24, 0xCD	; 205
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	93 83       	std	Z+3, r25	; 0x03
    2118:	82 83       	std	Z+2, r24	; 0x02
    211a:	8c ec       	ldi	r24, 0xCC	; 204
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	95 83       	std	Z+5, r25	; 0x05
    2120:	84 83       	std	Z+4, r24	; 0x04
    2122:	88 ec       	ldi	r24, 0xC8	; 200
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	97 83       	std	Z+7, r25	; 0x07
    2128:	86 83       	std	Z+6, r24	; 0x06
    212a:	89 ec       	ldi	r24, 0xC9	; 201
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	91 87       	std	Z+9, r25	; 0x09
    2130:	80 87       	std	Z+8, r24	; 0x08
    2132:	8a ec       	ldi	r24, 0xCA	; 202
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	93 87       	std	Z+11, r25	; 0x0b
    2138:	82 87       	std	Z+10, r24	; 0x0a
    213a:	8e ec       	ldi	r24, 0xCE	; 206
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	95 87       	std	Z+13, r25	; 0x0d
    2140:	84 87       	std	Z+12, r24	; 0x0c
    2142:	17 86       	std	Z+15, r1	; 0x0f
    2144:	10 8a       	std	Z+16, r1	; 0x10
    2146:	11 8a       	std	Z+17, r1	; 0x11
    2148:	12 8a       	std	Z+18, r1	; 0x12
    214a:	08 95       	ret

0000214c <__vector_51>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial2_available() {
  return Serial2.available();
}
    214c:	1f 92       	push	r1
    214e:	0f 92       	push	r0
    2150:	0f b6       	in	r0, 0x3f	; 63
    2152:	0f 92       	push	r0
    2154:	11 24       	eor	r1, r1
    2156:	0b b6       	in	r0, 0x3b	; 59
    2158:	0f 92       	push	r0
    215a:	2f 93       	push	r18
    215c:	8f 93       	push	r24
    215e:	9f 93       	push	r25
    2160:	af 93       	push	r26
    2162:	bf 93       	push	r27
    2164:	ef 93       	push	r30
    2166:	ff 93       	push	r31
    2168:	e0 91 d2 05 	lds	r30, 0x05D2	; 0x8005d2 <Serial2+0x6>
    216c:	f0 91 d3 05 	lds	r31, 0x05D3	; 0x8005d3 <Serial2+0x7>
    2170:	80 81       	ld	r24, Z
    2172:	82 fd       	sbrc	r24, 2
    2174:	14 c0       	rjmp	.+40     	; 0x219e <__vector_51+0x52>
    2176:	ec ec       	ldi	r30, 0xCC	; 204
    2178:	f5 e0       	ldi	r31, 0x05	; 5
    217a:	a4 85       	ldd	r26, Z+12	; 0x0c
    217c:	b5 85       	ldd	r27, Z+13	; 0x0d
    217e:	2c 91       	ld	r18, X
    2180:	87 85       	ldd	r24, Z+15	; 0x0f
    2182:	8f 5f       	subi	r24, 0xFF	; 255
    2184:	8f 70       	andi	r24, 0x0F	; 15
    2186:	90 89       	ldd	r25, Z+16	; 0x10
    2188:	89 17       	cp	r24, r25
    218a:	71 f0       	breq	.+28     	; 0x21a8 <__vector_51+0x5c>
    218c:	df 01       	movw	r26, r30
    218e:	e7 85       	ldd	r30, Z+15	; 0x0f
    2190:	f0 e0       	ldi	r31, 0x00	; 0
    2192:	e4 53       	subi	r30, 0x34	; 52
    2194:	fa 4f       	sbci	r31, 0xFA	; 250
    2196:	23 8b       	std	Z+19, r18	; 0x13
    2198:	1f 96       	adiw	r26, 0x0f	; 15
    219a:	8c 93       	st	X, r24
    219c:	05 c0       	rjmp	.+10     	; 0x21a8 <__vector_51+0x5c>
    219e:	e0 91 d8 05 	lds	r30, 0x05D8	; 0x8005d8 <Serial2+0xc>
    21a2:	f0 91 d9 05 	lds	r31, 0x05D9	; 0x8005d9 <Serial2+0xd>
    21a6:	80 81       	ld	r24, Z
    21a8:	ff 91       	pop	r31
    21aa:	ef 91       	pop	r30
    21ac:	bf 91       	pop	r27
    21ae:	af 91       	pop	r26
    21b0:	9f 91       	pop	r25
    21b2:	8f 91       	pop	r24
    21b4:	2f 91       	pop	r18
    21b6:	0f 90       	pop	r0
    21b8:	0b be       	out	0x3b, r0	; 59
    21ba:	0f 90       	pop	r0
    21bc:	0f be       	out	0x3f, r0	; 63
    21be:	0f 90       	pop	r0
    21c0:	1f 90       	pop	r1
    21c2:	18 95       	reti

000021c4 <__vector_52>:
    21c4:	1f 92       	push	r1
    21c6:	0f 92       	push	r0
    21c8:	0f b6       	in	r0, 0x3f	; 63
    21ca:	0f 92       	push	r0
    21cc:	11 24       	eor	r1, r1
    21ce:	0b b6       	in	r0, 0x3b	; 59
    21d0:	0f 92       	push	r0
    21d2:	2f 93       	push	r18
    21d4:	3f 93       	push	r19
    21d6:	4f 93       	push	r20
    21d8:	5f 93       	push	r21
    21da:	6f 93       	push	r22
    21dc:	7f 93       	push	r23
    21de:	8f 93       	push	r24
    21e0:	9f 93       	push	r25
    21e2:	af 93       	push	r26
    21e4:	bf 93       	push	r27
    21e6:	ef 93       	push	r30
    21e8:	ff 93       	push	r31
    21ea:	8c ec       	ldi	r24, 0xCC	; 204
    21ec:	95 e0       	ldi	r25, 0x05	; 5
    21ee:	94 dd       	rcall	.-1240   	; 0x1d18 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    21f0:	ff 91       	pop	r31
    21f2:	ef 91       	pop	r30
    21f4:	bf 91       	pop	r27
    21f6:	af 91       	pop	r26
    21f8:	9f 91       	pop	r25
    21fa:	8f 91       	pop	r24
    21fc:	7f 91       	pop	r23
    21fe:	6f 91       	pop	r22
    2200:	5f 91       	pop	r21
    2202:	4f 91       	pop	r20
    2204:	3f 91       	pop	r19
    2206:	2f 91       	pop	r18
    2208:	0f 90       	pop	r0
    220a:	0b be       	out	0x3b, r0	; 59
    220c:	0f 90       	pop	r0
    220e:	0f be       	out	0x3f, r0	; 63
    2210:	0f 90       	pop	r0
    2212:	1f 90       	pop	r1
    2214:	18 95       	reti

00002216 <_GLOBAL__sub_I___vector_51>:
    2216:	ec ec       	ldi	r30, 0xCC	; 204
    2218:	f5 e0       	ldi	r31, 0x05	; 5
    221a:	8e ea       	ldi	r24, 0xAE	; 174
    221c:	92 e0       	ldi	r25, 0x02	; 2
    221e:	91 83       	std	Z+1, r25	; 0x01
    2220:	80 83       	st	Z, r24
    2222:	85 ed       	ldi	r24, 0xD5	; 213
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	93 83       	std	Z+3, r25	; 0x03
    2228:	82 83       	std	Z+2, r24	; 0x02
    222a:	84 ed       	ldi	r24, 0xD4	; 212
    222c:	90 e0       	ldi	r25, 0x00	; 0
    222e:	95 83       	std	Z+5, r25	; 0x05
    2230:	84 83       	std	Z+4, r24	; 0x04
    2232:	80 ed       	ldi	r24, 0xD0	; 208
    2234:	90 e0       	ldi	r25, 0x00	; 0
    2236:	97 83       	std	Z+7, r25	; 0x07
    2238:	86 83       	std	Z+6, r24	; 0x06
    223a:	81 ed       	ldi	r24, 0xD1	; 209
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	91 87       	std	Z+9, r25	; 0x09
    2240:	80 87       	std	Z+8, r24	; 0x08
    2242:	82 ed       	ldi	r24, 0xD2	; 210
    2244:	90 e0       	ldi	r25, 0x00	; 0
    2246:	93 87       	std	Z+11, r25	; 0x0b
    2248:	82 87       	std	Z+10, r24	; 0x0a
    224a:	86 ed       	ldi	r24, 0xD6	; 214
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	95 87       	std	Z+13, r25	; 0x0d
    2250:	84 87       	std	Z+12, r24	; 0x0c
    2252:	17 86       	std	Z+15, r1	; 0x0f
    2254:	10 8a       	std	Z+16, r1	; 0x10
    2256:	11 8a       	std	Z+17, r1	; 0x11
    2258:	12 8a       	std	Z+18, r1	; 0x12
    225a:	08 95       	ret

0000225c <__vector_54>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial3_available() {
  return Serial3.available();
}
    225c:	1f 92       	push	r1
    225e:	0f 92       	push	r0
    2260:	0f b6       	in	r0, 0x3f	; 63
    2262:	0f 92       	push	r0
    2264:	11 24       	eor	r1, r1
    2266:	0b b6       	in	r0, 0x3b	; 59
    2268:	0f 92       	push	r0
    226a:	2f 93       	push	r18
    226c:	8f 93       	push	r24
    226e:	9f 93       	push	r25
    2270:	af 93       	push	r26
    2272:	bf 93       	push	r27
    2274:	ef 93       	push	r30
    2276:	ff 93       	push	r31
    2278:	e0 91 05 06 	lds	r30, 0x0605	; 0x800605 <Serial3+0x6>
    227c:	f0 91 06 06 	lds	r31, 0x0606	; 0x800606 <Serial3+0x7>
    2280:	80 81       	ld	r24, Z
    2282:	82 fd       	sbrc	r24, 2
    2284:	14 c0       	rjmp	.+40     	; 0x22ae <__vector_54+0x52>
    2286:	ef ef       	ldi	r30, 0xFF	; 255
    2288:	f5 e0       	ldi	r31, 0x05	; 5
    228a:	a4 85       	ldd	r26, Z+12	; 0x0c
    228c:	b5 85       	ldd	r27, Z+13	; 0x0d
    228e:	2c 91       	ld	r18, X
    2290:	87 85       	ldd	r24, Z+15	; 0x0f
    2292:	8f 5f       	subi	r24, 0xFF	; 255
    2294:	8f 70       	andi	r24, 0x0F	; 15
    2296:	90 89       	ldd	r25, Z+16	; 0x10
    2298:	89 17       	cp	r24, r25
    229a:	71 f0       	breq	.+28     	; 0x22b8 <__vector_54+0x5c>
    229c:	df 01       	movw	r26, r30
    229e:	e7 85       	ldd	r30, Z+15	; 0x0f
    22a0:	f0 e0       	ldi	r31, 0x00	; 0
    22a2:	e1 50       	subi	r30, 0x01	; 1
    22a4:	fa 4f       	sbci	r31, 0xFA	; 250
    22a6:	23 8b       	std	Z+19, r18	; 0x13
    22a8:	1f 96       	adiw	r26, 0x0f	; 15
    22aa:	8c 93       	st	X, r24
    22ac:	05 c0       	rjmp	.+10     	; 0x22b8 <__vector_54+0x5c>
    22ae:	e0 91 0b 06 	lds	r30, 0x060B	; 0x80060b <Serial3+0xc>
    22b2:	f0 91 0c 06 	lds	r31, 0x060C	; 0x80060c <Serial3+0xd>
    22b6:	80 81       	ld	r24, Z
    22b8:	ff 91       	pop	r31
    22ba:	ef 91       	pop	r30
    22bc:	bf 91       	pop	r27
    22be:	af 91       	pop	r26
    22c0:	9f 91       	pop	r25
    22c2:	8f 91       	pop	r24
    22c4:	2f 91       	pop	r18
    22c6:	0f 90       	pop	r0
    22c8:	0b be       	out	0x3b, r0	; 59
    22ca:	0f 90       	pop	r0
    22cc:	0f be       	out	0x3f, r0	; 63
    22ce:	0f 90       	pop	r0
    22d0:	1f 90       	pop	r1
    22d2:	18 95       	reti

000022d4 <__vector_55>:
    22d4:	1f 92       	push	r1
    22d6:	0f 92       	push	r0
    22d8:	0f b6       	in	r0, 0x3f	; 63
    22da:	0f 92       	push	r0
    22dc:	11 24       	eor	r1, r1
    22de:	0b b6       	in	r0, 0x3b	; 59
    22e0:	0f 92       	push	r0
    22e2:	2f 93       	push	r18
    22e4:	3f 93       	push	r19
    22e6:	4f 93       	push	r20
    22e8:	5f 93       	push	r21
    22ea:	6f 93       	push	r22
    22ec:	7f 93       	push	r23
    22ee:	8f 93       	push	r24
    22f0:	9f 93       	push	r25
    22f2:	af 93       	push	r26
    22f4:	bf 93       	push	r27
    22f6:	ef 93       	push	r30
    22f8:	ff 93       	push	r31
    22fa:	8f ef       	ldi	r24, 0xFF	; 255
    22fc:	95 e0       	ldi	r25, 0x05	; 5
    22fe:	0c dd       	rcall	.-1512   	; 0x1d18 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    2300:	ff 91       	pop	r31
    2302:	ef 91       	pop	r30
    2304:	bf 91       	pop	r27
    2306:	af 91       	pop	r26
    2308:	9f 91       	pop	r25
    230a:	8f 91       	pop	r24
    230c:	7f 91       	pop	r23
    230e:	6f 91       	pop	r22
    2310:	5f 91       	pop	r21
    2312:	4f 91       	pop	r20
    2314:	3f 91       	pop	r19
    2316:	2f 91       	pop	r18
    2318:	0f 90       	pop	r0
    231a:	0b be       	out	0x3b, r0	; 59
    231c:	0f 90       	pop	r0
    231e:	0f be       	out	0x3f, r0	; 63
    2320:	0f 90       	pop	r0
    2322:	1f 90       	pop	r1
    2324:	18 95       	reti

00002326 <_GLOBAL__sub_I___vector_54>:
    2326:	ef ef       	ldi	r30, 0xFF	; 255
    2328:	f5 e0       	ldi	r31, 0x05	; 5
    232a:	8e ea       	ldi	r24, 0xAE	; 174
    232c:	92 e0       	ldi	r25, 0x02	; 2
    232e:	91 83       	std	Z+1, r25	; 0x01
    2330:	80 83       	st	Z, r24
    2332:	85 e3       	ldi	r24, 0x35	; 53
    2334:	91 e0       	ldi	r25, 0x01	; 1
    2336:	93 83       	std	Z+3, r25	; 0x03
    2338:	82 83       	std	Z+2, r24	; 0x02
    233a:	84 e3       	ldi	r24, 0x34	; 52
    233c:	91 e0       	ldi	r25, 0x01	; 1
    233e:	95 83       	std	Z+5, r25	; 0x05
    2340:	84 83       	std	Z+4, r24	; 0x04
    2342:	80 e3       	ldi	r24, 0x30	; 48
    2344:	91 e0       	ldi	r25, 0x01	; 1
    2346:	97 83       	std	Z+7, r25	; 0x07
    2348:	86 83       	std	Z+6, r24	; 0x06
    234a:	81 e3       	ldi	r24, 0x31	; 49
    234c:	91 e0       	ldi	r25, 0x01	; 1
    234e:	91 87       	std	Z+9, r25	; 0x09
    2350:	80 87       	std	Z+8, r24	; 0x08
    2352:	82 e3       	ldi	r24, 0x32	; 50
    2354:	91 e0       	ldi	r25, 0x01	; 1
    2356:	93 87       	std	Z+11, r25	; 0x0b
    2358:	82 87       	std	Z+10, r24	; 0x0a
    235a:	86 e3       	ldi	r24, 0x36	; 54
    235c:	91 e0       	ldi	r25, 0x01	; 1
    235e:	95 87       	std	Z+13, r25	; 0x0d
    2360:	84 87       	std	Z+12, r24	; 0x0c
    2362:	17 86       	std	Z+15, r1	; 0x0f
    2364:	10 8a       	std	Z+16, r1	; 0x10
    2366:	11 8a       	std	Z+17, r1	; 0x11
    2368:	12 8a       	std	Z+18, r1	; 0x12
    236a:	08 95       	ret

0000236c <_ZN13HardwareServoC1ERVjRVhS3_S1_S1_S1_>:
#define CLK_DIV_8 (_BV(CS01))
#define CLK_DIV_64 (_BV(CS01) | _BV(CS00))
#define CLK_DIV_256 (_BV(CS02))
#define CLK_DIV_1024 (_B(CS02) | _BV(CS00))

HardwareServo::HardwareServo(Register16 &icr, Register &tccrA, Register &tccrB, Register16 &ocrA, Register16 &ocrB, Register16 &ocrC)
    236c:	cf 92       	push	r12
    236e:	df 92       	push	r13
    2370:	ef 92       	push	r14
    2372:	ff 92       	push	r15
    2374:	0f 93       	push	r16
    2376:	1f 93       	push	r17
    2378:	fc 01       	movw	r30, r24
 : _icr(&icr), _tccrA(&tccrA), _tccrB(&tccrB), _ocrA(&ocrA), _ocrB(&ocrB), _ocrC(&ocrC),
  _minA(1000), _minB(1000), _minC(1000), _maxA(2000), _maxB(2000), _maxC(2000)
    237a:	71 83       	std	Z+1, r23	; 0x01
    237c:	60 83       	st	Z, r22
    237e:	53 83       	std	Z+3, r21	; 0x03
    2380:	42 83       	std	Z+2, r20	; 0x02
    2382:	35 83       	std	Z+5, r19	; 0x05
    2384:	24 83       	std	Z+4, r18	; 0x04
    2386:	17 83       	std	Z+7, r17	; 0x07
    2388:	06 83       	std	Z+6, r16	; 0x06
    238a:	f1 86       	std	Z+9, r15	; 0x09
    238c:	e0 86       	std	Z+8, r14	; 0x08
    238e:	d3 86       	std	Z+11, r13	; 0x0b
    2390:	c2 86       	std	Z+10, r12	; 0x0a
    2392:	88 ee       	ldi	r24, 0xE8	; 232
    2394:	93 e0       	ldi	r25, 0x03	; 3
    2396:	95 87       	std	Z+13, r25	; 0x0d
    2398:	84 87       	std	Z+12, r24	; 0x0c
    239a:	97 87       	std	Z+15, r25	; 0x0f
    239c:	86 87       	std	Z+14, r24	; 0x0e
    239e:	91 8b       	std	Z+17, r25	; 0x11
    23a0:	80 8b       	std	Z+16, r24	; 0x10
    23a2:	80 ed       	ldi	r24, 0xD0	; 208
    23a4:	97 e0       	ldi	r25, 0x07	; 7
    23a6:	93 8b       	std	Z+19, r25	; 0x13
    23a8:	82 8b       	std	Z+18, r24	; 0x12
    23aa:	95 8b       	std	Z+21, r25	; 0x15
    23ac:	84 8b       	std	Z+20, r24	; 0x14
    23ae:	97 8b       	std	Z+23, r25	; 0x17
    23b0:	86 8b       	std	Z+22, r24	; 0x16
{
	
}
    23b2:	1f 91       	pop	r17
    23b4:	0f 91       	pop	r16
    23b6:	ff 90       	pop	r15
    23b8:	ef 90       	pop	r14
    23ba:	df 90       	pop	r13
    23bc:	cf 90       	pop	r12
    23be:	08 95       	ret

000023c0 <_GLOBAL__sub_I_Servo1>:
 *  Author: zcarey
 */ 

#include "HardwareServo.h"

    23c0:	cf 92       	push	r12
    23c2:	df 92       	push	r13
    23c4:	ef 92       	push	r14
    23c6:	ff 92       	push	r15
    23c8:	0f 93       	push	r16
    23ca:	1f 93       	push	r17
    23cc:	0f 2e       	mov	r0, r31
    23ce:	fc e8       	ldi	r31, 0x8C	; 140
    23d0:	cf 2e       	mov	r12, r31
    23d2:	d1 2c       	mov	r13, r1
    23d4:	f0 2d       	mov	r31, r0
    23d6:	0f 2e       	mov	r0, r31
    23d8:	fa e8       	ldi	r31, 0x8A	; 138
    23da:	ef 2e       	mov	r14, r31
    23dc:	f1 2c       	mov	r15, r1
    23de:	f0 2d       	mov	r31, r0
    23e0:	08 e8       	ldi	r16, 0x88	; 136
    23e2:	10 e0       	ldi	r17, 0x00	; 0
    23e4:	21 e8       	ldi	r18, 0x81	; 129
    23e6:	30 e0       	ldi	r19, 0x00	; 0
    23e8:	40 e8       	ldi	r20, 0x80	; 128
    23ea:	50 e0       	ldi	r21, 0x00	; 0
    23ec:	66 e8       	ldi	r22, 0x86	; 134
    23ee:	70 e0       	ldi	r23, 0x00	; 0
    23f0:	82 e3       	ldi	r24, 0x32	; 50
    23f2:	96 e0       	ldi	r25, 0x06	; 6
    23f4:	bb df       	rcall	.-138    	; 0x236c <_ZN13HardwareServoC1ERVjRVhS3_S1_S1_S1_>
    23f6:	1f 91       	pop	r17
    23f8:	0f 91       	pop	r16
    23fa:	ff 90       	pop	r15
    23fc:	ef 90       	pop	r14
    23fe:	df 90       	pop	r13
    2400:	cf 90       	pop	r12
    2402:	08 95       	ret

00002404 <_GLOBAL__sub_I_Servo3>:
 *  Author: zcarey
 */ 

#include "HardwareServo.h"

    2404:	cf 92       	push	r12
    2406:	df 92       	push	r13
    2408:	ef 92       	push	r14
    240a:	ff 92       	push	r15
    240c:	0f 93       	push	r16
    240e:	1f 93       	push	r17
    2410:	0f 2e       	mov	r0, r31
    2412:	fc e9       	ldi	r31, 0x9C	; 156
    2414:	cf 2e       	mov	r12, r31
    2416:	d1 2c       	mov	r13, r1
    2418:	f0 2d       	mov	r31, r0
    241a:	0f 2e       	mov	r0, r31
    241c:	fa e9       	ldi	r31, 0x9A	; 154
    241e:	ef 2e       	mov	r14, r31
    2420:	f1 2c       	mov	r15, r1
    2422:	f0 2d       	mov	r31, r0
    2424:	08 e9       	ldi	r16, 0x98	; 152
    2426:	10 e0       	ldi	r17, 0x00	; 0
    2428:	21 e9       	ldi	r18, 0x91	; 145
    242a:	30 e0       	ldi	r19, 0x00	; 0
    242c:	40 e9       	ldi	r20, 0x90	; 144
    242e:	50 e0       	ldi	r21, 0x00	; 0
    2430:	66 e9       	ldi	r22, 0x96	; 150
    2432:	70 e0       	ldi	r23, 0x00	; 0
    2434:	8a e4       	ldi	r24, 0x4A	; 74
    2436:	96 e0       	ldi	r25, 0x06	; 6
    2438:	99 df       	rcall	.-206    	; 0x236c <_ZN13HardwareServoC1ERVjRVhS3_S1_S1_S1_>
    243a:	1f 91       	pop	r17
    243c:	0f 91       	pop	r16
    243e:	ff 90       	pop	r15
    2440:	ef 90       	pop	r14
    2442:	df 90       	pop	r13
    2444:	cf 90       	pop	r12
    2446:	08 95       	ret

00002448 <_GLOBAL__sub_I_Servo4>:
 *  Author: zcarey
 */ 

#include "HardwareServo.h"

HardwareServo Servo4(ICR4, TCCR4A, TCCR4B, OCR4A, OCR4B, OCR4C);
    2448:	cf 92       	push	r12
    244a:	df 92       	push	r13
    244c:	ef 92       	push	r14
    244e:	ff 92       	push	r15
    2450:	0f 93       	push	r16
    2452:	1f 93       	push	r17
    2454:	0f 2e       	mov	r0, r31
    2456:	fc ea       	ldi	r31, 0xAC	; 172
    2458:	cf 2e       	mov	r12, r31
    245a:	d1 2c       	mov	r13, r1
    245c:	f0 2d       	mov	r31, r0
    245e:	0f 2e       	mov	r0, r31
    2460:	fa ea       	ldi	r31, 0xAA	; 170
    2462:	ef 2e       	mov	r14, r31
    2464:	f1 2c       	mov	r15, r1
    2466:	f0 2d       	mov	r31, r0
    2468:	08 ea       	ldi	r16, 0xA8	; 168
    246a:	10 e0       	ldi	r17, 0x00	; 0
    246c:	21 ea       	ldi	r18, 0xA1	; 161
    246e:	30 e0       	ldi	r19, 0x00	; 0
    2470:	40 ea       	ldi	r20, 0xA0	; 160
    2472:	50 e0       	ldi	r21, 0x00	; 0
    2474:	66 ea       	ldi	r22, 0xA6	; 166
    2476:	70 e0       	ldi	r23, 0x00	; 0
    2478:	82 e6       	ldi	r24, 0x62	; 98
    247a:	96 e0       	ldi	r25, 0x06	; 6
    247c:	77 df       	rcall	.-274    	; 0x236c <_ZN13HardwareServoC1ERVjRVhS3_S1_S1_S1_>
    247e:	1f 91       	pop	r17
    2480:	0f 91       	pop	r16
    2482:	ff 90       	pop	r15
    2484:	ef 90       	pop	r14
    2486:	df 90       	pop	r13
    2488:	cf 90       	pop	r12
    248a:	08 95       	ret

0000248c <_GLOBAL__sub_I_Servo5>:
 */ 


#include "HardwareServo.h"

HardwareServo Servo5(ICR5, TCCR5A, TCCR5B, OCR5A, OCR5B, OCR5C);
    248c:	cf 92       	push	r12
    248e:	df 92       	push	r13
    2490:	ef 92       	push	r14
    2492:	ff 92       	push	r15
    2494:	0f 93       	push	r16
    2496:	1f 93       	push	r17
    2498:	0f 2e       	mov	r0, r31
    249a:	fc e2       	ldi	r31, 0x2C	; 44
    249c:	cf 2e       	mov	r12, r31
    249e:	dd 24       	eor	r13, r13
    24a0:	d3 94       	inc	r13
    24a2:	f0 2d       	mov	r31, r0
    24a4:	0f 2e       	mov	r0, r31
    24a6:	fa e2       	ldi	r31, 0x2A	; 42
    24a8:	ef 2e       	mov	r14, r31
    24aa:	ff 24       	eor	r15, r15
    24ac:	f3 94       	inc	r15
    24ae:	f0 2d       	mov	r31, r0
    24b0:	08 e2       	ldi	r16, 0x28	; 40
    24b2:	11 e0       	ldi	r17, 0x01	; 1
    24b4:	21 e2       	ldi	r18, 0x21	; 33
    24b6:	31 e0       	ldi	r19, 0x01	; 1
    24b8:	40 e2       	ldi	r20, 0x20	; 32
    24ba:	51 e0       	ldi	r21, 0x01	; 1
    24bc:	66 e2       	ldi	r22, 0x26	; 38
    24be:	71 e0       	ldi	r23, 0x01	; 1
    24c0:	8a e7       	ldi	r24, 0x7A	; 122
    24c2:	96 e0       	ldi	r25, 0x06	; 6
    24c4:	53 df       	rcall	.-346    	; 0x236c <_ZN13HardwareServoC1ERVjRVhS3_S1_S1_S1_>
    24c6:	1f 91       	pop	r17
    24c8:	0f 91       	pop	r16
    24ca:	ff 90       	pop	r15
    24cc:	ef 90       	pop	r14
    24ce:	df 90       	pop	r13
    24d0:	cf 90       	pop	r12
    24d2:	08 95       	ret

000024d4 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    24d4:	10 92 ff 06 	sts	0x06FF, r1	; 0x8006ff <twi_state>
    24d8:	81 e0       	ldi	r24, 0x01	; 1
    24da:	80 93 fd 06 	sts	0x06FD, r24	; 0x8006fd <twi_sendStop>
    24de:	10 92 fc 06 	sts	0x06FC, r1	; 0x8006fc <twi_inRepStart>
    24e2:	8b b1       	in	r24, 0x0b	; 11
    24e4:	83 60       	ori	r24, 0x03	; 3
    24e6:	8b b9       	out	0x0b, r24	; 11
    24e8:	e9 eb       	ldi	r30, 0xB9	; 185
    24ea:	f0 e0       	ldi	r31, 0x00	; 0
    24ec:	80 81       	ld	r24, Z
    24ee:	8e 7f       	andi	r24, 0xFE	; 254
    24f0:	80 83       	st	Z, r24
    24f2:	80 81       	ld	r24, Z
    24f4:	8d 7f       	andi	r24, 0xFD	; 253
    24f6:	80 83       	st	Z, r24
    24f8:	88 e4       	ldi	r24, 0x48	; 72
    24fa:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    24fe:	85 e4       	ldi	r24, 0x45	; 69
    2500:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2504:	08 95       	ret

00002506 <twi_readFrom>:
    2506:	41 32       	cpi	r20, 0x21	; 33
    2508:	08 f0       	brcs	.+2      	; 0x250c <twi_readFrom+0x6>
    250a:	4c c0       	rjmp	.+152    	; 0x25a4 <twi_readFrom+0x9e>
    250c:	90 91 ff 06 	lds	r25, 0x06FF	; 0x8006ff <twi_state>
    2510:	91 11       	cpse	r25, r1
    2512:	fc cf       	rjmp	.-8      	; 0x250c <twi_readFrom+0x6>
    2514:	31 e0       	ldi	r19, 0x01	; 1
    2516:	30 93 ff 06 	sts	0x06FF, r19	; 0x8006ff <twi_state>
    251a:	20 93 fd 06 	sts	0x06FD, r18	; 0x8006fd <twi_sendStop>
    251e:	2f ef       	ldi	r18, 0xFF	; 255
    2520:	20 93 92 06 	sts	0x0692, r18	; 0x800692 <twi_error>
    2524:	10 92 d7 06 	sts	0x06D7, r1	; 0x8006d7 <twi_masterBufferIndex>
    2528:	24 0f       	add	r18, r20
    252a:	20 93 d6 06 	sts	0x06D6, r18	; 0x8006d6 <twi_masterBufferLength>
    252e:	30 93 fe 06 	sts	0x06FE, r19	; 0x8006fe <twi_slarw>
    2532:	20 91 fe 06 	lds	r18, 0x06FE	; 0x8006fe <twi_slarw>
    2536:	88 0f       	add	r24, r24
    2538:	82 2b       	or	r24, r18
    253a:	80 93 fe 06 	sts	0x06FE, r24	; 0x8006fe <twi_slarw>
    253e:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <twi_inRepStart>
    2542:	81 30       	cpi	r24, 0x01	; 1
    2544:	81 f4       	brne	.+32     	; 0x2566 <twi_readFrom+0x60>
    2546:	10 92 fc 06 	sts	0x06FC, r1	; 0x8006fc <twi_inRepStart>
    254a:	ab eb       	ldi	r26, 0xBB	; 187
    254c:	b0 e0       	ldi	r27, 0x00	; 0
    254e:	ec eb       	ldi	r30, 0xBC	; 188
    2550:	f0 e0       	ldi	r31, 0x00	; 0
    2552:	80 91 fe 06 	lds	r24, 0x06FE	; 0x8006fe <twi_slarw>
    2556:	8c 93       	st	X, r24
    2558:	80 81       	ld	r24, Z
    255a:	83 fd       	sbrc	r24, 3
    255c:	fa cf       	rjmp	.-12     	; 0x2552 <twi_readFrom+0x4c>
    255e:	85 ec       	ldi	r24, 0xC5	; 197
    2560:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2564:	03 c0       	rjmp	.+6      	; 0x256c <twi_readFrom+0x66>
    2566:	85 ee       	ldi	r24, 0xE5	; 229
    2568:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    256c:	80 91 ff 06 	lds	r24, 0x06FF	; 0x8006ff <twi_state>
    2570:	81 30       	cpi	r24, 0x01	; 1
    2572:	e1 f3       	breq	.-8      	; 0x256c <twi_readFrom+0x66>
    2574:	80 91 d7 06 	lds	r24, 0x06D7	; 0x8006d7 <twi_masterBufferIndex>
    2578:	84 17       	cp	r24, r20
    257a:	10 f4       	brcc	.+4      	; 0x2580 <twi_readFrom+0x7a>
    257c:	40 91 d7 06 	lds	r20, 0x06D7	; 0x8006d7 <twi_masterBufferIndex>
    2580:	44 23       	and	r20, r20
    2582:	89 f0       	breq	.+34     	; 0x25a6 <twi_readFrom+0xa0>
    2584:	e8 ed       	ldi	r30, 0xD8	; 216
    2586:	f6 e0       	ldi	r31, 0x06	; 6
    2588:	a6 2f       	mov	r26, r22
    258a:	b7 2f       	mov	r27, r23
    258c:	2f ef       	ldi	r18, 0xFF	; 255
    258e:	24 0f       	add	r18, r20
    2590:	30 e0       	ldi	r19, 0x00	; 0
    2592:	27 52       	subi	r18, 0x27	; 39
    2594:	39 4f       	sbci	r19, 0xF9	; 249
    2596:	81 91       	ld	r24, Z+
    2598:	8d 93       	st	X+, r24
    259a:	e2 17       	cp	r30, r18
    259c:	f3 07       	cpc	r31, r19
    259e:	d9 f7       	brne	.-10     	; 0x2596 <twi_readFrom+0x90>
    25a0:	94 2f       	mov	r25, r20
    25a2:	01 c0       	rjmp	.+2      	; 0x25a6 <twi_readFrom+0xa0>
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	89 2f       	mov	r24, r25
    25a8:	08 95       	ret

000025aa <twi_writeTo>:
    25aa:	0f 93       	push	r16
    25ac:	41 32       	cpi	r20, 0x21	; 33
    25ae:	08 f0       	brcs	.+2      	; 0x25b2 <twi_writeTo+0x8>
    25b0:	57 c0       	rjmp	.+174    	; 0x2660 <twi_writeTo+0xb6>
    25b2:	30 91 ff 06 	lds	r19, 0x06FF	; 0x8006ff <twi_state>
    25b6:	31 11       	cpse	r19, r1
    25b8:	fc cf       	rjmp	.-8      	; 0x25b2 <twi_writeTo+0x8>
    25ba:	92 e0       	ldi	r25, 0x02	; 2
    25bc:	90 93 ff 06 	sts	0x06FF, r25	; 0x8006ff <twi_state>
    25c0:	00 93 fd 06 	sts	0x06FD, r16	; 0x8006fd <twi_sendStop>
    25c4:	9f ef       	ldi	r25, 0xFF	; 255
    25c6:	90 93 92 06 	sts	0x0692, r25	; 0x800692 <twi_error>
    25ca:	10 92 d7 06 	sts	0x06D7, r1	; 0x8006d7 <twi_masterBufferIndex>
    25ce:	40 93 d6 06 	sts	0x06D6, r20	; 0x8006d6 <twi_masterBufferLength>
    25d2:	44 23       	and	r20, r20
    25d4:	71 f0       	breq	.+28     	; 0x25f2 <twi_writeTo+0x48>
    25d6:	fb 01       	movw	r30, r22
    25d8:	a8 ed       	ldi	r26, 0xD8	; 216
    25da:	b6 e0       	ldi	r27, 0x06	; 6
    25dc:	41 50       	subi	r20, 0x01	; 1
    25de:	50 e0       	ldi	r21, 0x00	; 0
    25e0:	4f 5f       	subi	r20, 0xFF	; 255
    25e2:	5f 4f       	sbci	r21, 0xFF	; 255
    25e4:	64 0f       	add	r22, r20
    25e6:	75 1f       	adc	r23, r21
    25e8:	91 91       	ld	r25, Z+
    25ea:	9d 93       	st	X+, r25
    25ec:	e6 17       	cp	r30, r22
    25ee:	f7 07       	cpc	r31, r23
    25f0:	d9 f7       	brne	.-10     	; 0x25e8 <twi_writeTo+0x3e>
    25f2:	10 92 fe 06 	sts	0x06FE, r1	; 0x8006fe <twi_slarw>
    25f6:	90 91 fe 06 	lds	r25, 0x06FE	; 0x8006fe <twi_slarw>
    25fa:	88 0f       	add	r24, r24
    25fc:	89 2b       	or	r24, r25
    25fe:	80 93 fe 06 	sts	0x06FE, r24	; 0x8006fe <twi_slarw>
    2602:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <twi_inRepStart>
    2606:	81 30       	cpi	r24, 0x01	; 1
    2608:	81 f4       	brne	.+32     	; 0x262a <twi_writeTo+0x80>
    260a:	10 92 fc 06 	sts	0x06FC, r1	; 0x8006fc <twi_inRepStart>
    260e:	ab eb       	ldi	r26, 0xBB	; 187
    2610:	b0 e0       	ldi	r27, 0x00	; 0
    2612:	ec eb       	ldi	r30, 0xBC	; 188
    2614:	f0 e0       	ldi	r31, 0x00	; 0
    2616:	80 91 fe 06 	lds	r24, 0x06FE	; 0x8006fe <twi_slarw>
    261a:	8c 93       	st	X, r24
    261c:	80 81       	ld	r24, Z
    261e:	83 fd       	sbrc	r24, 3
    2620:	fa cf       	rjmp	.-12     	; 0x2616 <twi_writeTo+0x6c>
    2622:	85 ec       	ldi	r24, 0xC5	; 197
    2624:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2628:	03 c0       	rjmp	.+6      	; 0x2630 <twi_writeTo+0x86>
    262a:	85 ee       	ldi	r24, 0xE5	; 229
    262c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2630:	22 23       	and	r18, r18
    2632:	41 f0       	breq	.+16     	; 0x2644 <twi_writeTo+0x9a>
    2634:	80 91 ff 06 	lds	r24, 0x06FF	; 0x8006ff <twi_state>
    2638:	82 30       	cpi	r24, 0x02	; 2
    263a:	21 f4       	brne	.+8      	; 0x2644 <twi_writeTo+0x9a>
    263c:	80 91 ff 06 	lds	r24, 0x06FF	; 0x8006ff <twi_state>
    2640:	82 30       	cpi	r24, 0x02	; 2
    2642:	e1 f3       	breq	.-8      	; 0x263c <twi_writeTo+0x92>
    2644:	80 91 92 06 	lds	r24, 0x0692	; 0x800692 <twi_error>
    2648:	8f 3f       	cpi	r24, 0xFF	; 255
    264a:	79 f0       	breq	.+30     	; 0x266a <twi_writeTo+0xc0>
    264c:	80 91 92 06 	lds	r24, 0x0692	; 0x800692 <twi_error>
    2650:	80 32       	cpi	r24, 0x20	; 32
    2652:	41 f0       	breq	.+16     	; 0x2664 <twi_writeTo+0xba>
    2654:	80 91 92 06 	lds	r24, 0x0692	; 0x800692 <twi_error>
    2658:	80 33       	cpi	r24, 0x30	; 48
    265a:	31 f0       	breq	.+12     	; 0x2668 <twi_writeTo+0xbe>
    265c:	34 e0       	ldi	r19, 0x04	; 4
    265e:	05 c0       	rjmp	.+10     	; 0x266a <twi_writeTo+0xc0>
    2660:	31 e0       	ldi	r19, 0x01	; 1
    2662:	03 c0       	rjmp	.+6      	; 0x266a <twi_writeTo+0xc0>
    2664:	32 e0       	ldi	r19, 0x02	; 2
    2666:	01 c0       	rjmp	.+2      	; 0x266a <twi_writeTo+0xc0>
    2668:	33 e0       	ldi	r19, 0x03	; 3
    266a:	83 2f       	mov	r24, r19
    266c:	0f 91       	pop	r16
    266e:	08 95       	ret

00002670 <twi_transmit>:
    2670:	40 91 b4 06 	lds	r20, 0x06B4	; 0x8006b4 <twi_txBufferLength>
    2674:	26 2f       	mov	r18, r22
    2676:	30 e0       	ldi	r19, 0x00	; 0
    2678:	24 0f       	add	r18, r20
    267a:	31 1d       	adc	r19, r1
    267c:	21 32       	cpi	r18, 0x21	; 33
    267e:	31 05       	cpc	r19, r1
    2680:	ec f4       	brge	.+58     	; 0x26bc <twi_transmit+0x4c>
    2682:	20 91 ff 06 	lds	r18, 0x06FF	; 0x8006ff <twi_state>
    2686:	24 30       	cpi	r18, 0x04	; 4
    2688:	d9 f4       	brne	.+54     	; 0x26c0 <twi_transmit+0x50>
    268a:	66 23       	and	r22, r22
    268c:	81 f0       	breq	.+32     	; 0x26ae <twi_transmit+0x3e>
    268e:	a8 2f       	mov	r26, r24
    2690:	b9 2f       	mov	r27, r25
    2692:	80 e0       	ldi	r24, 0x00	; 0
    2694:	90 e0       	ldi	r25, 0x00	; 0
    2696:	30 91 b4 06 	lds	r19, 0x06B4	; 0x8006b4 <twi_txBufferLength>
    269a:	2d 91       	ld	r18, X+
    269c:	fc 01       	movw	r30, r24
    269e:	ea 54       	subi	r30, 0x4A	; 74
    26a0:	f9 4f       	sbci	r31, 0xF9	; 249
    26a2:	e3 0f       	add	r30, r19
    26a4:	f1 1d       	adc	r31, r1
    26a6:	20 83       	st	Z, r18
    26a8:	01 96       	adiw	r24, 0x01	; 1
    26aa:	86 17       	cp	r24, r22
    26ac:	a0 f3       	brcs	.-24     	; 0x2696 <twi_transmit+0x26>
    26ae:	80 91 b4 06 	lds	r24, 0x06B4	; 0x8006b4 <twi_txBufferLength>
    26b2:	68 0f       	add	r22, r24
    26b4:	60 93 b4 06 	sts	0x06B4, r22	; 0x8006b4 <twi_txBufferLength>
    26b8:	80 e0       	ldi	r24, 0x00	; 0
    26ba:	08 95       	ret
    26bc:	81 e0       	ldi	r24, 0x01	; 1
    26be:	08 95       	ret
    26c0:	82 e0       	ldi	r24, 0x02	; 2
    26c2:	08 95       	ret

000026c4 <twi_attachSlaveRxEvent>:
    26c4:	90 93 f9 06 	sts	0x06F9, r25	; 0x8006f9 <twi_onSlaveReceive+0x1>
    26c8:	80 93 f8 06 	sts	0x06F8, r24	; 0x8006f8 <twi_onSlaveReceive>
    26cc:	08 95       	ret

000026ce <twi_attachSlaveTxEvent>:
    26ce:	90 93 fb 06 	sts	0x06FB, r25	; 0x8006fb <twi_onSlaveTransmit+0x1>
    26d2:	80 93 fa 06 	sts	0x06FA, r24	; 0x8006fa <twi_onSlaveTransmit>
    26d6:	08 95       	ret

000026d8 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    26d8:	85 ed       	ldi	r24, 0xD5	; 213
    26da:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    26de:	ec eb       	ldi	r30, 0xBC	; 188
    26e0:	f0 e0       	ldi	r31, 0x00	; 0
    26e2:	80 81       	ld	r24, Z
    26e4:	84 fd       	sbrc	r24, 4
    26e6:	fd cf       	rjmp	.-6      	; 0x26e2 <twi_stop+0xa>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    26e8:	10 92 ff 06 	sts	0x06FF, r1	; 0x8006ff <twi_state>
    26ec:	08 95       	ret

000026ee <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    26ee:	85 ec       	ldi	r24, 0xC5	; 197
    26f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // update twi state
  twi_state = TWI_READY;
    26f4:	10 92 ff 06 	sts	0x06FF, r1	; 0x8006ff <twi_state>
    26f8:	08 95       	ret

000026fa <__vector_39>:
}

ISR(TWI_vect)
{
    26fa:	1f 92       	push	r1
    26fc:	0f 92       	push	r0
    26fe:	0f b6       	in	r0, 0x3f	; 63
    2700:	0f 92       	push	r0
    2702:	11 24       	eor	r1, r1
    2704:	0b b6       	in	r0, 0x3b	; 59
    2706:	0f 92       	push	r0
    2708:	2f 93       	push	r18
    270a:	3f 93       	push	r19
    270c:	4f 93       	push	r20
    270e:	5f 93       	push	r21
    2710:	6f 93       	push	r22
    2712:	7f 93       	push	r23
    2714:	8f 93       	push	r24
    2716:	9f 93       	push	r25
    2718:	af 93       	push	r26
    271a:	bf 93       	push	r27
    271c:	ef 93       	push	r30
    271e:	ff 93       	push	r31
  switch(TW_STATUS){
    2720:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    2724:	88 7f       	andi	r24, 0xF8	; 248
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	89 3c       	cpi	r24, 0xC9	; 201
    272a:	91 05       	cpc	r25, r1
    272c:	08 f0       	brcs	.+2      	; 0x2730 <__vector_39+0x36>
    272e:	ee c0       	rjmp	.+476    	; 0x290c <__vector_39+0x212>
    2730:	fc 01       	movw	r30, r24
    2732:	88 27       	eor	r24, r24
    2734:	ee 58       	subi	r30, 0x8E	; 142
    2736:	ff 4f       	sbci	r31, 0xFF	; 255
    2738:	8f 4f       	sbci	r24, 0xFF	; 255
    273a:	87 c6       	rjmp	.+3342   	; 0x344a <__tablejump2__>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    273c:	80 91 fe 06 	lds	r24, 0x06FE	; 0x8006fe <twi_slarw>
    2740:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2744:	85 ec       	ldi	r24, 0xC5	; 197
    2746:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    274a:	e0 c0       	rjmp	.+448    	; 0x290c <__vector_39+0x212>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    274c:	90 91 d7 06 	lds	r25, 0x06D7	; 0x8006d7 <twi_masterBufferIndex>
    2750:	80 91 d6 06 	lds	r24, 0x06D6	; 0x8006d6 <twi_masterBufferLength>
    2754:	98 17       	cp	r25, r24
    2756:	80 f4       	brcc	.+32     	; 0x2778 <__vector_39+0x7e>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2758:	e0 91 d7 06 	lds	r30, 0x06D7	; 0x8006d7 <twi_masterBufferIndex>
    275c:	81 e0       	ldi	r24, 0x01	; 1
    275e:	8e 0f       	add	r24, r30
    2760:	80 93 d7 06 	sts	0x06D7, r24	; 0x8006d7 <twi_masterBufferIndex>
    2764:	f0 e0       	ldi	r31, 0x00	; 0
    2766:	e8 52       	subi	r30, 0x28	; 40
    2768:	f9 4f       	sbci	r31, 0xF9	; 249
    276a:	80 81       	ld	r24, Z
    276c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2770:	85 ec       	ldi	r24, 0xC5	; 197
    2772:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2776:	ca c0       	rjmp	.+404    	; 0x290c <__vector_39+0x212>
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
        twi_reply(1);
      }else{
	if (twi_sendStop)
    2778:	80 91 fd 06 	lds	r24, 0x06FD	; 0x8006fd <twi_sendStop>
    277c:	88 23       	and	r24, r24
          twi_stop();
    277e:	11 f0       	breq	.+4      	; 0x2784 <__vector_39+0x8a>
    2780:	ab df       	rcall	.-170    	; 0x26d8 <twi_stop>
    2782:	c4 c0       	rjmp	.+392    	; 0x290c <__vector_39+0x212>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    2784:	81 e0       	ldi	r24, 0x01	; 1
    2786:	80 93 fc 06 	sts	0x06FC, r24	; 0x8006fc <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    278a:	84 ea       	ldi	r24, 0xA4	; 164
    278c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	  twi_state = TWI_READY;
    2790:	10 92 ff 06 	sts	0x06FF, r1	; 0x8006ff <twi_state>
    2794:	bb c0       	rjmp	.+374    	; 0x290c <__vector_39+0x212>
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    2796:	80 e2       	ldi	r24, 0x20	; 32
    2798:	80 93 92 06 	sts	0x0692, r24	; 0x800692 <twi_error>
      twi_stop();
    279c:	9d df       	rcall	.-198    	; 0x26d8 <twi_stop>
      break;
    279e:	b6 c0       	rjmp	.+364    	; 0x290c <__vector_39+0x212>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    27a0:	80 e3       	ldi	r24, 0x30	; 48
    27a2:	80 93 92 06 	sts	0x0692, r24	; 0x800692 <twi_error>
      twi_stop();
    27a6:	98 df       	rcall	.-208    	; 0x26d8 <twi_stop>
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    27a8:	b1 c0       	rjmp	.+354    	; 0x290c <__vector_39+0x212>
    27aa:	88 e3       	ldi	r24, 0x38	; 56
    27ac:	80 93 92 06 	sts	0x0692, r24	; 0x800692 <twi_error>
      twi_releaseBus();
    27b0:	9e df       	rcall	.-196    	; 0x26ee <twi_releaseBus>
      break;
    27b2:	ac c0       	rjmp	.+344    	; 0x290c <__vector_39+0x212>

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    27b4:	e0 91 d7 06 	lds	r30, 0x06D7	; 0x8006d7 <twi_masterBufferIndex>
    27b8:	81 e0       	ldi	r24, 0x01	; 1
    27ba:	8e 0f       	add	r24, r30
    27bc:	80 93 d7 06 	sts	0x06D7, r24	; 0x8006d7 <twi_masterBufferIndex>
    27c0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    27c4:	f0 e0       	ldi	r31, 0x00	; 0
    27c6:	e8 52       	subi	r30, 0x28	; 40
    27c8:	f9 4f       	sbci	r31, 0xF9	; 249
    27ca:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    27cc:	90 91 d7 06 	lds	r25, 0x06D7	; 0x8006d7 <twi_masterBufferIndex>
    27d0:	80 91 d6 06 	lds	r24, 0x06D6	; 0x8006d6 <twi_masterBufferLength>
    27d4:	98 17       	cp	r25, r24
    27d6:	20 f4       	brcc	.+8      	; 0x27e0 <__vector_39+0xe6>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    27d8:	85 ec       	ldi	r24, 0xC5	; 197
    27da:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    27de:	96 c0       	rjmp	.+300    	; 0x290c <__vector_39+0x212>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    27e0:	85 e8       	ldi	r24, 0x85	; 133
    27e2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    27e6:	92 c0       	rjmp	.+292    	; 0x290c <__vector_39+0x212>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    27e8:	e0 91 d7 06 	lds	r30, 0x06D7	; 0x8006d7 <twi_masterBufferIndex>
    27ec:	81 e0       	ldi	r24, 0x01	; 1
    27ee:	8e 0f       	add	r24, r30
    27f0:	80 93 d7 06 	sts	0x06D7, r24	; 0x8006d7 <twi_masterBufferIndex>
    27f4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    27f8:	f0 e0       	ldi	r31, 0x00	; 0
    27fa:	e8 52       	subi	r30, 0x28	; 40
    27fc:	f9 4f       	sbci	r31, 0xF9	; 249
	if (twi_sendStop)
    27fe:	80 83       	st	Z, r24
    2800:	80 91 fd 06 	lds	r24, 0x06FD	; 0x8006fd <twi_sendStop>
    2804:	88 23       	and	r24, r24
          twi_stop();
    2806:	11 f0       	breq	.+4      	; 0x280c <__vector_39+0x112>
    2808:	67 df       	rcall	.-306    	; 0x26d8 <twi_stop>
    280a:	80 c0       	rjmp	.+256    	; 0x290c <__vector_39+0x212>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    280c:	81 e0       	ldi	r24, 0x01	; 1
    280e:	80 93 fc 06 	sts	0x06FC, r24	; 0x8006fc <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2812:	84 ea       	ldi	r24, 0xA4	; 164
    2814:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	  twi_state = TWI_READY;
    2818:	10 92 ff 06 	sts	0x06FF, r1	; 0x8006ff <twi_state>
	}    
	break;
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
    281c:	77 c0       	rjmp	.+238    	; 0x290c <__vector_39+0x212>
    281e:	5c df       	rcall	.-328    	; 0x26d8 <twi_stop>
      break;
    2820:	75 c0       	rjmp	.+234    	; 0x290c <__vector_39+0x212>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    2822:	83 e0       	ldi	r24, 0x03	; 3
    2824:	80 93 ff 06 	sts	0x06FF, r24	; 0x8006ff <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    2828:	10 92 93 06 	sts	0x0693, r1	; 0x800693 <twi_rxBufferIndex>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    282c:	85 ec       	ldi	r24, 0xC5	; 197
    282e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2832:	6c c0       	rjmp	.+216    	; 0x290c <__vector_39+0x212>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2834:	80 91 93 06 	lds	r24, 0x0693	; 0x800693 <twi_rxBufferIndex>
    2838:	80 32       	cpi	r24, 0x20	; 32
    283a:	80 f4       	brcc	.+32     	; 0x285c <__vector_39+0x162>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    283c:	e0 91 93 06 	lds	r30, 0x0693	; 0x800693 <twi_rxBufferIndex>
    2840:	81 e0       	ldi	r24, 0x01	; 1
    2842:	8e 0f       	add	r24, r30
    2844:	80 93 93 06 	sts	0x0693, r24	; 0x800693 <twi_rxBufferIndex>
    2848:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    284c:	f0 e0       	ldi	r31, 0x00	; 0
    284e:	ec 56       	subi	r30, 0x6C	; 108
    2850:	f9 4f       	sbci	r31, 0xF9	; 249
    2852:	80 83       	st	Z, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2854:	85 ec       	ldi	r24, 0xC5	; 197
    2856:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    285a:	58 c0       	rjmp	.+176    	; 0x290c <__vector_39+0x212>
    285c:	85 e8       	ldi	r24, 0x85	; 133
    285e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    2862:	54 c0       	rjmp	.+168    	; 0x290c <__vector_39+0x212>
    2864:	44 df       	rcall	.-376    	; 0x26ee <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2866:	80 91 93 06 	lds	r24, 0x0693	; 0x800693 <twi_rxBufferIndex>
    286a:	80 32       	cpi	r24, 0x20	; 32
    286c:	30 f4       	brcc	.+12     	; 0x287a <__vector_39+0x180>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    286e:	e0 91 93 06 	lds	r30, 0x0693	; 0x800693 <twi_rxBufferIndex>
    2872:	f0 e0       	ldi	r31, 0x00	; 0
    2874:	ec 56       	subi	r30, 0x6C	; 108
    2876:	f9 4f       	sbci	r31, 0xF9	; 249
    2878:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    287a:	60 91 93 06 	lds	r22, 0x0693	; 0x800693 <twi_rxBufferIndex>
    287e:	70 e0       	ldi	r23, 0x00	; 0
    2880:	e0 91 f8 06 	lds	r30, 0x06F8	; 0x8006f8 <twi_onSlaveReceive>
    2884:	f0 91 f9 06 	lds	r31, 0x06F9	; 0x8006f9 <twi_onSlaveReceive+0x1>
    2888:	84 e9       	ldi	r24, 0x94	; 148
    288a:	96 e0       	ldi	r25, 0x06	; 6
    288c:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    288e:	10 92 93 06 	sts	0x0693, r1	; 0x800693 <twi_rxBufferIndex>
      break;
    2892:	3c c0       	rjmp	.+120    	; 0x290c <__vector_39+0x212>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2894:	85 e8       	ldi	r24, 0x85	; 133
    2896:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    289a:	38 c0       	rjmp	.+112    	; 0x290c <__vector_39+0x212>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    289c:	84 e0       	ldi	r24, 0x04	; 4
    289e:	80 93 ff 06 	sts	0x06FF, r24	; 0x8006ff <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    28a2:	10 92 b5 06 	sts	0x06B5, r1	; 0x8006b5 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    28a6:	10 92 b4 06 	sts	0x06B4, r1	; 0x8006b4 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    28aa:	e0 91 fa 06 	lds	r30, 0x06FA	; 0x8006fa <twi_onSlaveTransmit>
    28ae:	f0 91 fb 06 	lds	r31, 0x06FB	; 0x8006fb <twi_onSlaveTransmit+0x1>
    28b2:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    28b4:	80 91 b4 06 	lds	r24, 0x06B4	; 0x8006b4 <twi_txBufferLength>
    28b8:	81 11       	cpse	r24, r1
    28ba:	05 c0       	rjmp	.+10     	; 0x28c6 <__vector_39+0x1cc>
        twi_txBufferLength = 1;
    28bc:	81 e0       	ldi	r24, 0x01	; 1
    28be:	80 93 b4 06 	sts	0x06B4, r24	; 0x8006b4 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    28c2:	10 92 b6 06 	sts	0x06B6, r1	; 0x8006b6 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    28c6:	e0 91 b5 06 	lds	r30, 0x06B5	; 0x8006b5 <twi_txBufferIndex>
    28ca:	81 e0       	ldi	r24, 0x01	; 1
    28cc:	8e 0f       	add	r24, r30
    28ce:	80 93 b5 06 	sts	0x06B5, r24	; 0x8006b5 <twi_txBufferIndex>
    28d2:	f0 e0       	ldi	r31, 0x00	; 0
    28d4:	ea 54       	subi	r30, 0x4A	; 74
    28d6:	f9 4f       	sbci	r31, 0xF9	; 249
    28d8:	80 81       	ld	r24, Z
    28da:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    28de:	90 91 b5 06 	lds	r25, 0x06B5	; 0x8006b5 <twi_txBufferIndex>
    28e2:	80 91 b4 06 	lds	r24, 0x06B4	; 0x8006b4 <twi_txBufferLength>
    28e6:	98 17       	cp	r25, r24
    28e8:	20 f4       	brcc	.+8      	; 0x28f2 <__vector_39+0x1f8>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    28ea:	85 ec       	ldi	r24, 0xC5	; 197
    28ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    28f0:	0d c0       	rjmp	.+26     	; 0x290c <__vector_39+0x212>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    28f2:	85 e8       	ldi	r24, 0x85	; 133
    28f4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    28f8:	09 c0       	rjmp	.+18     	; 0x290c <__vector_39+0x212>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    28fa:	85 ec       	ldi	r24, 0xC5	; 197
    28fc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    2900:	10 92 ff 06 	sts	0x06FF, r1	; 0x8006ff <twi_state>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    2904:	03 c0       	rjmp	.+6      	; 0x290c <__vector_39+0x212>
    2906:	10 92 92 06 	sts	0x0692, r1	; 0x800692 <twi_error>
      twi_stop();
    290a:	e6 de       	rcall	.-564    	; 0x26d8 <twi_stop>
      break;
  }
    290c:	ff 91       	pop	r31
    290e:	ef 91       	pop	r30
    2910:	bf 91       	pop	r27
    2912:	af 91       	pop	r26
    2914:	9f 91       	pop	r25
    2916:	8f 91       	pop	r24
    2918:	7f 91       	pop	r23
    291a:	6f 91       	pop	r22
    291c:	5f 91       	pop	r21
    291e:	4f 91       	pop	r20
    2920:	3f 91       	pop	r19
    2922:	2f 91       	pop	r18
    2924:	0f 90       	pop	r0
    2926:	0b be       	out	0x3b, r0	; 59
    2928:	0f 90       	pop	r0
    292a:	0f be       	out	0x3f, r0	; 63
    292c:	0f 90       	pop	r0
    292e:	1f 90       	pop	r1
    2930:	18 95       	reti

00002932 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
	user_onRequest = function;
    2932:	80 91 2a 07 	lds	r24, 0x072A	; 0x80072a <_ZN7TwoWire14rxBufferLengthE>
    2936:	90 e0       	ldi	r25, 0x00	; 0
    2938:	20 91 2b 07 	lds	r18, 0x072B	; 0x80072b <_ZN7TwoWire13rxBufferIndexE>
    293c:	82 1b       	sub	r24, r18
    293e:	91 09       	sbc	r25, r1
    2940:	08 95       	ret

00002942 <_ZN7TwoWire4readEv>:
    2942:	90 91 2b 07 	lds	r25, 0x072B	; 0x80072b <_ZN7TwoWire13rxBufferIndexE>
    2946:	80 91 2a 07 	lds	r24, 0x072A	; 0x80072a <_ZN7TwoWire14rxBufferLengthE>
    294a:	98 17       	cp	r25, r24
    294c:	50 f4       	brcc	.+20     	; 0x2962 <_ZN7TwoWire4readEv+0x20>
    294e:	e9 2f       	mov	r30, r25
    2950:	f0 e0       	ldi	r31, 0x00	; 0
    2952:	e4 5d       	subi	r30, 0xD4	; 212
    2954:	f8 4f       	sbci	r31, 0xF8	; 248
    2956:	20 81       	ld	r18, Z
    2958:	30 e0       	ldi	r19, 0x00	; 0
    295a:	9f 5f       	subi	r25, 0xFF	; 255
    295c:	90 93 2b 07 	sts	0x072B, r25	; 0x80072b <_ZN7TwoWire13rxBufferIndexE>
    2960:	02 c0       	rjmp	.+4      	; 0x2966 <_ZN7TwoWire4readEv+0x24>
    2962:	2f ef       	ldi	r18, 0xFF	; 255
    2964:	3f ef       	ldi	r19, 0xFF	; 255
    2966:	c9 01       	movw	r24, r18
    2968:	08 95       	ret

0000296a <_ZN7TwoWire4peekEv>:
    296a:	e0 91 2b 07 	lds	r30, 0x072B	; 0x80072b <_ZN7TwoWire13rxBufferIndexE>
    296e:	80 91 2a 07 	lds	r24, 0x072A	; 0x80072a <_ZN7TwoWire14rxBufferLengthE>
    2972:	e8 17       	cp	r30, r24
    2974:	30 f4       	brcc	.+12     	; 0x2982 <_ZN7TwoWire4peekEv+0x18>
    2976:	f0 e0       	ldi	r31, 0x00	; 0
    2978:	e4 5d       	subi	r30, 0xD4	; 212
    297a:	f8 4f       	sbci	r31, 0xF8	; 248
    297c:	80 81       	ld	r24, Z
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	08 95       	ret
    2982:	8f ef       	ldi	r24, 0xFF	; 255
    2984:	9f ef       	ldi	r25, 0xFF	; 255
    2986:	08 95       	ret

00002988 <_ZN7TwoWire5flushEv>:
    2988:	08 95       	ret

0000298a <_ZN7TwoWire16onReceiveServiceEPhi>:
    298a:	cf 93       	push	r28
    298c:	df 93       	push	r29
    298e:	ec 01       	movw	r28, r24
    2990:	e0 91 02 07 	lds	r30, 0x0702	; 0x800702 <_ZN7TwoWire14user_onReceiveE>
    2994:	f0 91 03 07 	lds	r31, 0x0703	; 0x800703 <_ZN7TwoWire14user_onReceiveE+0x1>
    2998:	30 97       	sbiw	r30, 0x00	; 0
    299a:	01 f1       	breq	.+64     	; 0x29dc <_ZN7TwoWire16onReceiveServiceEPhi+0x52>
    299c:	90 91 2b 07 	lds	r25, 0x072B	; 0x80072b <_ZN7TwoWire13rxBufferIndexE>
    29a0:	80 91 2a 07 	lds	r24, 0x072A	; 0x80072a <_ZN7TwoWire14rxBufferLengthE>
    29a4:	98 17       	cp	r25, r24
    29a6:	d0 f0       	brcs	.+52     	; 0x29dc <_ZN7TwoWire16onReceiveServiceEPhi+0x52>
    29a8:	16 16       	cp	r1, r22
    29aa:	17 06       	cpc	r1, r23
    29ac:	8c f4       	brge	.+34     	; 0x29d0 <_ZN7TwoWire16onReceiveServiceEPhi+0x46>
    29ae:	20 e0       	ldi	r18, 0x00	; 0
    29b0:	30 e0       	ldi	r19, 0x00	; 0
    29b2:	90 e0       	ldi	r25, 0x00	; 0
    29b4:	de 01       	movw	r26, r28
    29b6:	a9 0f       	add	r26, r25
    29b8:	b1 1d       	adc	r27, r1
    29ba:	4c 91       	ld	r20, X
    29bc:	d9 01       	movw	r26, r18
    29be:	a4 5d       	subi	r26, 0xD4	; 212
    29c0:	b8 4f       	sbci	r27, 0xF8	; 248
    29c2:	4c 93       	st	X, r20
    29c4:	9f 5f       	subi	r25, 0xFF	; 255
    29c6:	29 2f       	mov	r18, r25
    29c8:	30 e0       	ldi	r19, 0x00	; 0
    29ca:	26 17       	cp	r18, r22
    29cc:	37 07       	cpc	r19, r23
    29ce:	94 f3       	brlt	.-28     	; 0x29b4 <_ZN7TwoWire16onReceiveServiceEPhi+0x2a>
    29d0:	cb 01       	movw	r24, r22
    29d2:	10 92 2b 07 	sts	0x072B, r1	; 0x80072b <_ZN7TwoWire13rxBufferIndexE>
    29d6:	60 93 2a 07 	sts	0x072A, r22	; 0x80072a <_ZN7TwoWire14rxBufferLengthE>
    29da:	19 95       	eicall
    29dc:	df 91       	pop	r29
    29de:	cf 91       	pop	r28
    29e0:	08 95       	ret

000029e2 <_ZN7TwoWire16onRequestServiceEv>:
    29e2:	e0 91 04 07 	lds	r30, 0x0704	; 0x800704 <_ZN7TwoWire14user_onRequestE>
    29e6:	f0 91 05 07 	lds	r31, 0x0705	; 0x800705 <_ZN7TwoWire14user_onRequestE+0x1>
    29ea:	30 97       	sbiw	r30, 0x00	; 0
    29ec:	29 f0       	breq	.+10     	; 0x29f8 <_ZN7TwoWire16onRequestServiceEv+0x16>
    29ee:	10 92 08 07 	sts	0x0708, r1	; 0x800708 <_ZN7TwoWire13txBufferIndexE>
    29f2:	10 92 07 07 	sts	0x0707, r1	; 0x800707 <_ZN7TwoWire14txBufferLengthE>
    29f6:	19 95       	eicall
    29f8:	08 95       	ret

000029fa <_ZN7TwoWire5writeEh>:
    29fa:	cf 93       	push	r28
    29fc:	df 93       	push	r29
    29fe:	1f 92       	push	r1
    2a00:	cd b7       	in	r28, 0x3d	; 61
    2a02:	de b7       	in	r29, 0x3e	; 62
    2a04:	69 83       	std	Y+1, r22	; 0x01
    2a06:	80 91 06 07 	lds	r24, 0x0706	; 0x800706 <_ZN7TwoWire12transmittingE>
    2a0a:	88 23       	and	r24, r24
    2a0c:	99 f0       	breq	.+38     	; 0x2a34 <_ZN7TwoWire5writeEh+0x3a>
    2a0e:	80 91 07 07 	lds	r24, 0x0707	; 0x800707 <_ZN7TwoWire14txBufferLengthE>
    2a12:	80 32       	cpi	r24, 0x20	; 32
    2a14:	b0 f4       	brcc	.+44     	; 0x2a42 <_ZN7TwoWire5writeEh+0x48>
    2a16:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <_ZN7TwoWire13txBufferIndexE>
    2a1a:	e8 2f       	mov	r30, r24
    2a1c:	f0 e0       	ldi	r31, 0x00	; 0
    2a1e:	e7 5f       	subi	r30, 0xF7	; 247
    2a20:	f8 4f       	sbci	r31, 0xF8	; 248
    2a22:	60 83       	st	Z, r22
    2a24:	8f 5f       	subi	r24, 0xFF	; 255
    2a26:	80 93 08 07 	sts	0x0708, r24	; 0x800708 <_ZN7TwoWire13txBufferIndexE>
    2a2a:	80 93 07 07 	sts	0x0707, r24	; 0x800707 <_ZN7TwoWire14txBufferLengthE>
    2a2e:	81 e0       	ldi	r24, 0x01	; 1
    2a30:	90 e0       	ldi	r25, 0x00	; 0
    2a32:	09 c0       	rjmp	.+18     	; 0x2a46 <_ZN7TwoWire5writeEh+0x4c>
    2a34:	61 e0       	ldi	r22, 0x01	; 1
    2a36:	ce 01       	movw	r24, r28
    2a38:	01 96       	adiw	r24, 0x01	; 1
    2a3a:	1a de       	rcall	.-972    	; 0x2670 <twi_transmit>
    2a3c:	81 e0       	ldi	r24, 0x01	; 1
    2a3e:	90 e0       	ldi	r25, 0x00	; 0
    2a40:	02 c0       	rjmp	.+4      	; 0x2a46 <_ZN7TwoWire5writeEh+0x4c>
    2a42:	80 e0       	ldi	r24, 0x00	; 0
    2a44:	90 e0       	ldi	r25, 0x00	; 0
    2a46:	0f 90       	pop	r0
    2a48:	df 91       	pop	r29
    2a4a:	cf 91       	pop	r28
    2a4c:	08 95       	ret

00002a4e <_ZN7TwoWire5writeEPKhj>:
    2a4e:	cf 92       	push	r12
    2a50:	df 92       	push	r13
    2a52:	ef 92       	push	r14
    2a54:	ff 92       	push	r15
    2a56:	0f 93       	push	r16
    2a58:	1f 93       	push	r17
    2a5a:	cf 93       	push	r28
    2a5c:	df 93       	push	r29
    2a5e:	8c 01       	movw	r16, r24
    2a60:	cb 01       	movw	r24, r22
    2a62:	6a 01       	movw	r12, r20
    2a64:	20 91 06 07 	lds	r18, 0x0706	; 0x800706 <_ZN7TwoWire12transmittingE>
    2a68:	22 23       	and	r18, r18
    2a6a:	a1 f0       	breq	.+40     	; 0x2a94 <_ZN7TwoWire5writeEPKhj+0x46>
    2a6c:	41 15       	cp	r20, r1
    2a6e:	51 05       	cpc	r21, r1
    2a70:	99 f0       	breq	.+38     	; 0x2a98 <_ZN7TwoWire5writeEPKhj+0x4a>
    2a72:	eb 01       	movw	r28, r22
    2a74:	7b 01       	movw	r14, r22
    2a76:	e4 0e       	add	r14, r20
    2a78:	f5 1e       	adc	r15, r21
    2a7a:	69 91       	ld	r22, Y+
    2a7c:	d8 01       	movw	r26, r16
    2a7e:	ed 91       	ld	r30, X+
    2a80:	fc 91       	ld	r31, X
    2a82:	01 90       	ld	r0, Z+
    2a84:	f0 81       	ld	r31, Z
    2a86:	e0 2d       	mov	r30, r0
    2a88:	c8 01       	movw	r24, r16
    2a8a:	19 95       	eicall
    2a8c:	ce 15       	cp	r28, r14
    2a8e:	df 05       	cpc	r29, r15
    2a90:	a1 f7       	brne	.-24     	; 0x2a7a <_ZN7TwoWire5writeEPKhj+0x2c>
    2a92:	02 c0       	rjmp	.+4      	; 0x2a98 <_ZN7TwoWire5writeEPKhj+0x4a>
    2a94:	64 2f       	mov	r22, r20
    2a96:	ec dd       	rcall	.-1064   	; 0x2670 <twi_transmit>
    2a98:	c6 01       	movw	r24, r12
    2a9a:	df 91       	pop	r29
    2a9c:	cf 91       	pop	r28
    2a9e:	1f 91       	pop	r17
    2aa0:	0f 91       	pop	r16
    2aa2:	ff 90       	pop	r15
    2aa4:	ef 90       	pop	r14
    2aa6:	df 90       	pop	r13
    2aa8:	cf 90       	pop	r12
    2aaa:	08 95       	ret

00002aac <_ZN7TwoWire5beginEv>:
    2aac:	10 92 2b 07 	sts	0x072B, r1	; 0x80072b <_ZN7TwoWire13rxBufferIndexE>
    2ab0:	10 92 2a 07 	sts	0x072A, r1	; 0x80072a <_ZN7TwoWire14rxBufferLengthE>
    2ab4:	10 92 08 07 	sts	0x0708, r1	; 0x800708 <_ZN7TwoWire13txBufferIndexE>
    2ab8:	10 92 07 07 	sts	0x0707, r1	; 0x800707 <_ZN7TwoWire14txBufferLengthE>
    2abc:	0b dd       	rcall	.-1514   	; 0x24d4 <twi_init>
    2abe:	81 ef       	ldi	r24, 0xF1	; 241
    2ac0:	94 e1       	ldi	r25, 0x14	; 20
    2ac2:	05 de       	rcall	.-1014   	; 0x26ce <twi_attachSlaveTxEvent>
    2ac4:	85 ec       	ldi	r24, 0xC5	; 197
    2ac6:	94 e1       	ldi	r25, 0x14	; 20
    2ac8:	fd cd       	rjmp	.-1030   	; 0x26c4 <twi_attachSlaveRxEvent>
    2aca:	08 95       	ret

00002acc <_ZN7TwoWire17beginTransmissionEh>:
    2acc:	81 e0       	ldi	r24, 0x01	; 1
    2ace:	80 93 06 07 	sts	0x0706, r24	; 0x800706 <_ZN7TwoWire12transmittingE>
    2ad2:	60 93 29 07 	sts	0x0729, r22	; 0x800729 <_ZN7TwoWire9txAddressE>
    2ad6:	10 92 08 07 	sts	0x0708, r1	; 0x800708 <_ZN7TwoWire13txBufferIndexE>
    2ada:	10 92 07 07 	sts	0x0707, r1	; 0x800707 <_ZN7TwoWire14txBufferLengthE>
    2ade:	08 95       	ret

00002ae0 <_ZN7TwoWire15endTransmissionEh>:
    2ae0:	0f 93       	push	r16
    2ae2:	06 2f       	mov	r16, r22
    2ae4:	21 e0       	ldi	r18, 0x01	; 1
    2ae6:	40 91 07 07 	lds	r20, 0x0707	; 0x800707 <_ZN7TwoWire14txBufferLengthE>
    2aea:	69 e0       	ldi	r22, 0x09	; 9
    2aec:	77 e0       	ldi	r23, 0x07	; 7
    2aee:	80 91 29 07 	lds	r24, 0x0729	; 0x800729 <_ZN7TwoWire9txAddressE>
    2af2:	5b dd       	rcall	.-1354   	; 0x25aa <twi_writeTo>
    2af4:	10 92 08 07 	sts	0x0708, r1	; 0x800708 <_ZN7TwoWire13txBufferIndexE>
    2af8:	10 92 07 07 	sts	0x0707, r1	; 0x800707 <_ZN7TwoWire14txBufferLengthE>
    2afc:	10 92 06 07 	sts	0x0706, r1	; 0x800706 <_ZN7TwoWire12transmittingE>
    2b00:	0f 91       	pop	r16
    2b02:	08 95       	ret

00002b04 <_ZN7TwoWire11requestFromEhhmhh>:
    2b04:	4f 92       	push	r4
    2b06:	5f 92       	push	r5
    2b08:	6f 92       	push	r6
    2b0a:	7f 92       	push	r7
    2b0c:	af 92       	push	r10
    2b0e:	bf 92       	push	r11
    2b10:	cf 92       	push	r12
    2b12:	ef 92       	push	r14
    2b14:	ff 92       	push	r15
    2b16:	0f 93       	push	r16
    2b18:	1f 93       	push	r17
    2b1a:	cf 93       	push	r28
    2b1c:	df 93       	push	r29
    2b1e:	5c 01       	movw	r10, r24
    2b20:	f6 2e       	mov	r15, r22
    2b22:	d4 2f       	mov	r29, r20
    2b24:	28 01       	movw	r4, r16
    2b26:	39 01       	movw	r6, r18
    2b28:	ee 20       	and	r14, r14
    2b2a:	39 f1       	breq	.+78     	; 0x2b7a <_ZN7TwoWire11requestFromEhhmhh+0x76>
    2b2c:	cf df       	rcall	.-98     	; 0x2acc <_ZN7TwoWire17beginTransmissionEh>
    2b2e:	8e 2d       	mov	r24, r14
    2b30:	84 30       	cpi	r24, 0x04	; 4
    2b32:	08 f0       	brcs	.+2      	; 0x2b36 <_ZN7TwoWire11requestFromEhhmhh+0x32>
    2b34:	83 e0       	ldi	r24, 0x03	; 3
    2b36:	cf ef       	ldi	r28, 0xFF	; 255
    2b38:	c8 0f       	add	r28, r24
    2b3a:	88 23       	and	r24, r24
    2b3c:	d9 f0       	breq	.+54     	; 0x2b74 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    2b3e:	8c 2f       	mov	r24, r28
    2b40:	88 0f       	add	r24, r24
    2b42:	88 0f       	add	r24, r24
    2b44:	88 0f       	add	r24, r24
    2b46:	a3 01       	movw	r20, r6
    2b48:	92 01       	movw	r18, r4
    2b4a:	04 c0       	rjmp	.+8      	; 0x2b54 <_ZN7TwoWire11requestFromEhhmhh+0x50>
    2b4c:	56 95       	lsr	r21
    2b4e:	47 95       	ror	r20
    2b50:	37 95       	ror	r19
    2b52:	27 95       	ror	r18
    2b54:	8a 95       	dec	r24
    2b56:	d2 f7       	brpl	.-12     	; 0x2b4c <_ZN7TwoWire11requestFromEhhmhh+0x48>
    2b58:	ca 01       	movw	r24, r20
    2b5a:	b9 01       	movw	r22, r18
    2b5c:	d5 01       	movw	r26, r10
    2b5e:	ed 91       	ld	r30, X+
    2b60:	fc 91       	ld	r31, X
    2b62:	01 90       	ld	r0, Z+
    2b64:	f0 81       	ld	r31, Z
    2b66:	e0 2d       	mov	r30, r0
    2b68:	c5 01       	movw	r24, r10
    2b6a:	19 95       	eicall
    2b6c:	8c 2f       	mov	r24, r28
    2b6e:	c1 50       	subi	r28, 0x01	; 1
    2b70:	81 11       	cpse	r24, r1
    2b72:	e5 cf       	rjmp	.-54     	; 0x2b3e <_ZN7TwoWire11requestFromEhhmhh+0x3a>
    2b74:	60 e0       	ldi	r22, 0x00	; 0
    2b76:	c5 01       	movw	r24, r10
    2b78:	b3 df       	rcall	.-154    	; 0x2ae0 <_ZN7TwoWire15endTransmissionEh>
    2b7a:	4d 2f       	mov	r20, r29
    2b7c:	d1 32       	cpi	r29, 0x21	; 33
    2b7e:	08 f0       	brcs	.+2      	; 0x2b82 <_ZN7TwoWire11requestFromEhhmhh+0x7e>
    2b80:	40 e2       	ldi	r20, 0x20	; 32
    2b82:	2c 2d       	mov	r18, r12
    2b84:	6c e2       	ldi	r22, 0x2C	; 44
    2b86:	77 e0       	ldi	r23, 0x07	; 7
    2b88:	8f 2d       	mov	r24, r15
    2b8a:	bd dc       	rcall	.-1670   	; 0x2506 <twi_readFrom>
    2b8c:	10 92 2b 07 	sts	0x072B, r1	; 0x80072b <_ZN7TwoWire13rxBufferIndexE>
    2b90:	80 93 2a 07 	sts	0x072A, r24	; 0x80072a <_ZN7TwoWire14rxBufferLengthE>
    2b94:	df 91       	pop	r29
    2b96:	cf 91       	pop	r28
    2b98:	1f 91       	pop	r17
    2b9a:	0f 91       	pop	r16
    2b9c:	ff 90       	pop	r15
    2b9e:	ef 90       	pop	r14
    2ba0:	cf 90       	pop	r12
    2ba2:	bf 90       	pop	r11
    2ba4:	af 90       	pop	r10
    2ba6:	7f 90       	pop	r7
    2ba8:	6f 90       	pop	r6
    2baa:	5f 90       	pop	r5
    2bac:	4f 90       	pop	r4
    2bae:	08 95       	ret

00002bb0 <_ZN7TwoWire11requestFromEhhh>:
    2bb0:	cf 92       	push	r12
    2bb2:	ef 92       	push	r14
    2bb4:	0f 93       	push	r16
    2bb6:	1f 93       	push	r17
    2bb8:	c2 2e       	mov	r12, r18
    2bba:	e1 2c       	mov	r14, r1
    2bbc:	00 e0       	ldi	r16, 0x00	; 0
    2bbe:	10 e0       	ldi	r17, 0x00	; 0
    2bc0:	98 01       	movw	r18, r16
    2bc2:	a0 df       	rcall	.-192    	; 0x2b04 <_ZN7TwoWire11requestFromEhhmhh>
    2bc4:	1f 91       	pop	r17
    2bc6:	0f 91       	pop	r16
    2bc8:	ef 90       	pop	r14
    2bca:	cf 90       	pop	r12
    2bcc:	08 95       	ret

00002bce <_ZN7TwoWire11requestFromEhh>:
    2bce:	21 e0       	ldi	r18, 0x01	; 1
    2bd0:	ef cf       	rjmp	.-34     	; 0x2bb0 <_ZN7TwoWire11requestFromEhhh>
    2bd2:	08 95       	ret

00002bd4 <_ZN7TwoWire15endTransmissionEv>:
    2bd4:	61 e0       	ldi	r22, 0x01	; 1
    2bd6:	84 cf       	rjmp	.-248    	; 0x2ae0 <_ZN7TwoWire15endTransmissionEh>
    2bd8:	08 95       	ret

00002bda <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    2bda:	80 ec       	ldi	r24, 0xC0	; 192
    2bdc:	92 e0       	ldi	r25, 0x02	; 2
    2bde:	90 93 01 07 	sts	0x0701, r25	; 0x800701 <Wire+0x1>
    2be2:	80 93 00 07 	sts	0x0700, r24	; 0x800700 <Wire>
    2be6:	08 95       	ret

00002be8 <_ZN9IReadable15CommandReceivedEhPKhh>:
#include "EtherComm.h"

class IReadable : public IDevice {
public:
	void CommandReceived(uint8_t id, const uint8_t* data, uint8_t len){
		if(len == 0){
    2be8:	21 11       	cpse	r18, r1
    2bea:	0d c0       	rjmp	.+26     	; 0x2c06 <_ZN9IReadable15CommandReceivedEhPKhh+0x1e>
			ReadRegisterRequested(id, EtherComm::buffer + 3);
    2bec:	40 91 00 02 	lds	r20, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    2bf0:	50 91 01 02 	lds	r21, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    2bf4:	4d 5f       	subi	r20, 0xFD	; 253
    2bf6:	5f 4f       	sbci	r21, 0xFF	; 255
    2bf8:	dc 01       	movw	r26, r24
    2bfa:	ed 91       	ld	r30, X+
    2bfc:	fc 91       	ld	r31, X
    2bfe:	06 80       	ldd	r0, Z+6	; 0x06
    2c00:	f7 81       	ldd	r31, Z+7	; 0x07
    2c02:	e0 2d       	mov	r30, r0
    2c04:	19 95       	eicall
    2c06:	08 95       	ret

00002c08 <_ZN13DigitalSensor6UpdateEPh>:
	else LedPort &= ~LedPin;
}

bool Robot::ReadTestBtn(){ //TODO remove
	return !((TestBtnPinPort & TestBtnPin) > 0);
}
    2c08:	08 95       	ret

00002c0a <_ZN13DigitalSensor21ReadRegisterRequestedEhPh>:
    2c0a:	dc 01       	movw	r26, r24
    2c0c:	12 96       	adiw	r26, 0x02	; 2
    2c0e:	2c 91       	ld	r18, X
    2c10:	12 97       	sbiw	r26, 0x02	; 2
    2c12:	26 13       	cpse	r18, r22
    2c14:	1a c0       	rjmp	.+52     	; 0x2c4a <_ZN13DigitalSensor21ReadRegisterRequestedEhPh+0x40>
    2c16:	14 96       	adiw	r26, 0x04	; 4
    2c18:	ed 91       	ld	r30, X+
    2c1a:	fc 91       	ld	r31, X
    2c1c:	15 97       	sbiw	r26, 0x05	; 5
    2c1e:	60 81       	ld	r22, Z
    2c20:	13 96       	adiw	r26, 0x03	; 3
    2c22:	3c 91       	ld	r19, X
    2c24:	36 23       	and	r19, r22
    2c26:	61 e0       	ldi	r22, 0x01	; 1
    2c28:	09 f4       	brne	.+2      	; 0x2c2c <_ZN13DigitalSensor21ReadRegisterRequestedEhPh+0x22>
    2c2a:	60 e0       	ldi	r22, 0x00	; 0
    2c2c:	fa 01       	movw	r30, r20
    2c2e:	dc 01       	movw	r26, r24
    2c30:	16 96       	adiw	r26, 0x06	; 6
    2c32:	8c 91       	ld	r24, X
    2c34:	86 27       	eor	r24, r22
    2c36:	80 83       	st	Z, r24
    2c38:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    2c3c:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    2c40:	22 83       	std	Z+2, r18	; 0x02
    2c42:	62 e0       	ldi	r22, 0x02	; 2
    2c44:	83 e0       	ldi	r24, 0x03	; 3
    2c46:	0c 94 b9 0b 	jmp	0x1772	; 0x1772 <_ZN9EtherComm11SendCommandEhh>
    2c4a:	08 95       	ret

00002c4c <_ZN5Robot14RegisterDeviceEhP7IDevice>:
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	fc 01       	movw	r30, r24
    2c50:	ee 0f       	add	r30, r30
    2c52:	ff 1f       	adc	r31, r31
    2c54:	ee 59       	subi	r30, 0x9E	; 158
    2c56:	f8 4f       	sbci	r31, 0xF8	; 248
    2c58:	20 81       	ld	r18, Z
    2c5a:	31 81       	ldd	r19, Z+1	; 0x01
    2c5c:	23 2b       	or	r18, r19
    2c5e:	49 f4       	brne	.+18     	; 0x2c72 <_ZN5Robot14RegisterDeviceEhP7IDevice+0x26>
    2c60:	88 0f       	add	r24, r24
    2c62:	99 1f       	adc	r25, r25
    2c64:	fc 01       	movw	r30, r24
    2c66:	ee 59       	subi	r30, 0x9E	; 158
    2c68:	f8 4f       	sbci	r31, 0xF8	; 248
    2c6a:	71 83       	std	Z+1, r23	; 0x01
    2c6c:	60 83       	st	Z, r22
    2c6e:	81 e0       	ldi	r24, 0x01	; 1
    2c70:	08 95       	ret
    2c72:	80 e0       	ldi	r24, 0x00	; 0
    2c74:	08 95       	ret

00002c76 <_ZN13DigitalSensor5beginEv>:
    2c76:	bc 01       	movw	r22, r24
    2c78:	fc 01       	movw	r30, r24
    2c7a:	82 81       	ldd	r24, Z+2	; 0x02
    2c7c:	e7 cf       	rjmp	.-50     	; 0x2c4c <_ZN5Robot14RegisterDeviceEhP7IDevice>
    2c7e:	08 95       	ret

00002c80 <_ZN5Robot6SetLedEb>:
    2c80:	88 23       	and	r24, r24
    2c82:	11 f0       	breq	.+4      	; 0x2c88 <_ZN5Robot6SetLedEb+0x8>
    2c84:	2f 9a       	sbi	0x05, 7	; 5
    2c86:	08 95       	ret
    2c88:	2f 98       	cbi	0x05, 7	; 5
    2c8a:	08 95       	ret

00002c8c <_ZN5Robot15CommandReceivedEPKhh>:
	for(uint8_t i = 0; i < len; i++){
		Serial.print(' ');
		Serial.print(data[i], HEX);
	}
	Serial.println();*/
	if(len >= 1){
    2c8c:	66 23       	and	r22, r22
    2c8e:	d1 f0       	breq	.+52     	; 0x2cc4 <_ZN5Robot15CommandReceivedEPKhh+0x38>
		if(registers[data[0]] != NULL){
    2c90:	fc 01       	movw	r30, r24
    2c92:	30 81       	ld	r19, Z
    2c94:	e3 2f       	mov	r30, r19
    2c96:	f0 e0       	ldi	r31, 0x00	; 0
    2c98:	ee 0f       	add	r30, r30
    2c9a:	ff 1f       	adc	r31, r31
    2c9c:	ee 59       	subi	r30, 0x9E	; 158
    2c9e:	f8 4f       	sbci	r31, 0xF8	; 248
    2ca0:	a0 81       	ld	r26, Z
    2ca2:	b1 81       	ldd	r27, Z+1	; 0x01
    2ca4:	10 97       	sbiw	r26, 0x00	; 0
    2ca6:	71 f0       	breq	.+28     	; 0x2cc4 <_ZN5Robot15CommandReceivedEPKhh+0x38>
    2ca8:	26 2f       	mov	r18, r22
    2caa:	ac 01       	movw	r20, r24
			registers[data[0]]->CommandReceived(data[0], data + 1, len - 1);
    2cac:	21 50       	subi	r18, 0x01	; 1
    2cae:	4f 5f       	subi	r20, 0xFF	; 255
    2cb0:	5f 4f       	sbci	r21, 0xFF	; 255
    2cb2:	ed 91       	ld	r30, X+
    2cb4:	fc 91       	ld	r31, X
    2cb6:	11 97       	sbiw	r26, 0x01	; 1
    2cb8:	02 80       	ldd	r0, Z+2	; 0x02
    2cba:	f3 81       	ldd	r31, Z+3	; 0x03
    2cbc:	e0 2d       	mov	r30, r0
    2cbe:	63 2f       	mov	r22, r19
    2cc0:	cd 01       	movw	r24, r26
    2cc2:	19 95       	eicall
    2cc4:	08 95       	ret

00002cc6 <_GLOBAL__sub_I__ZN5Robot9registersE>:

#include "../IReadable.h"

class DigitalSensor : public IReadable {
public:
	DigitalSensor(const uint8_t ID, Register& DDRPort, Register& PortPort, Register& PinPort, uint8_t Pin, bool Inversed = true) : _id(ID), pin(Pin), pinPort(&PinPort), inversed(Inversed) {
    2cc6:	eb e5       	ldi	r30, 0x5B	; 91
    2cc8:	f7 e0       	ldi	r31, 0x07	; 7
    2cca:	82 ed       	ldi	r24, 0xD2	; 210
    2ccc:	92 e0       	ldi	r25, 0x02	; 2
    2cce:	91 83       	std	Z+1, r25	; 0x01
    2cd0:	80 83       	st	Z, r24
    2cd2:	12 82       	std	Z+2, r1	; 0x02
    2cd4:	82 e0       	ldi	r24, 0x02	; 2
    2cd6:	83 83       	std	Z+3, r24	; 0x03
    2cd8:	8f e2       	ldi	r24, 0x2F	; 47
    2cda:	90 e0       	ldi	r25, 0x00	; 0
    2cdc:	95 83       	std	Z+5, r25	; 0x05
    2cde:	84 83       	std	Z+4, r24	; 0x04
    2ce0:	81 e0       	ldi	r24, 0x01	; 1
    2ce2:	86 83       	std	Z+6, r24	; 0x06
		DDRPort &= ~pin; //Enable input
    2ce4:	81 98       	cbi	0x10, 1	; 16
		PortPort |= pin; //Enable pullup
    2ce6:	89 9a       	sbi	0x11, 1	; 17
		rov.RegisterDevice(0, this);
    2ce8:	bf 01       	movw	r22, r30
    2cea:	80 e0       	ldi	r24, 0x00	; 0
    2cec:	af df       	rcall	.-162    	; 0x2c4c <_ZN5Robot14RegisterDeviceEhP7IDevice>
#define ID_TEST_BUTTON 0
#define ID_IMU_TEMPERATURE 1
#define ID_IMU_ACCELEROMETER 2

DigitalSensor BtnTest(0, TestBtnDDR, TestBtnPort, TestBtnPinPort, TestBtnPin);
ImuSensor Imu(1, 2);
    2cee:	42 e0       	ldi	r20, 0x02	; 2
    2cf0:	61 e0       	ldi	r22, 0x01	; 1
    2cf2:	8c e4       	ldi	r24, 0x4C	; 76
    2cf4:	97 e0       	ldi	r25, 0x07	; 7
    2cf6:	d7 c0       	rjmp	.+430    	; 0x2ea6 <_ZN9ImuSensorC1Ehh>
    2cf8:	08 95       	ret

00002cfa <_ZN5Robot5beginEv>:
	RegisterDevice(Imu);
	
	return true;
}*/

bool Robot::begin(){
    2cfa:	e2 e6       	ldi	r30, 0x62	; 98
    2cfc:	f7 e0       	ldi	r31, 0x07	; 7
    2cfe:	82 e6       	ldi	r24, 0x62	; 98
    2d00:	99 e0       	ldi	r25, 0x09	; 9
	for(uint16_t i = 0; i < NUM_DEVICES; i++){
		registers[i] = NULL;
    2d02:	11 92       	st	Z+, r1
    2d04:	11 92       	st	Z+, r1
	
	return true;
}*/

bool Robot::begin(){
	for(uint16_t i = 0; i < NUM_DEVICES; i++){
    2d06:	e8 17       	cp	r30, r24
    2d08:	f9 07       	cpc	r31, r25
    2d0a:	d9 f7       	brne	.-10     	; 0x2d02 <_ZN5Robot5beginEv+0x8>
		registers[i] = NULL;
	}
	
	LedDDR |= LedPin;
    2d0c:	27 9a       	sbi	0x04, 7	; 4
		//TODO move to begin?
	}
	
	bool begin(){ //override
		return rov.RegisterDevice(_id, this);
    2d0e:	6b e5       	ldi	r22, 0x5B	; 91
    2d10:	77 e0       	ldi	r23, 0x07	; 7
    2d12:	80 91 5d 07 	lds	r24, 0x075D	; 0x80075d <BtnTest+0x2>
    2d16:	9a df       	rcall	.-204    	; 0x2c4c <_ZN5Robot14RegisterDeviceEhP7IDevice>
	BtnTest.begin();
	Imu.begin();
    2d18:	8c e4       	ldi	r24, 0x4C	; 76
    2d1a:	97 e0       	ldi	r25, 0x07	; 7
    2d1c:	0d d0       	rcall	.+26     	; 0x2d38 <_ZN9ImuSensor5beginEv>
	return true;
}
    2d1e:	81 e0       	ldi	r24, 0x01	; 1
    2d20:	08 95       	ret

00002d22 <_ZN5Robot4LoopEv>:
bool Robot::ReadTestBtn(){ //TODO remove
	return !((TestBtnPinPort & TestBtnPin) > 0);
}

void Robot::Loop(){
	Imu.Update(EtherComm::buffer + 3);
    2d22:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    2d26:	70 91 01 02 	lds	r23, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    2d2a:	6d 5f       	subi	r22, 0xFD	; 253
    2d2c:	7f 4f       	sbci	r23, 0xFF	; 255
    2d2e:	8c e4       	ldi	r24, 0x4C	; 76
    2d30:	97 e0       	ldi	r25, 0x07	; 7
    2d32:	01 c0       	rjmp	.+2      	; 0x2d36 <_ZN9ImuSensor6UpdateEPh>
    2d34:	08 95       	ret

00002d36 <_ZN9ImuSensor6UpdateEPh>:
		rov.RegisterDevice(tempId, this)
		&& rov.RegisterDevice(accelId, this)
		&& imu.begin();
}

void ImuSensor::Update(uint8_t* buffer){
    2d36:	08 95       	ret

00002d38 <_ZN9ImuSensor5beginEv>:

ImuSensor::ImuSensor(const uint8_t TempId, const uint8_t AccelId) : imu(55, 0x28), tempId(TempId), accelId(AccelId) {
	
}

bool ImuSensor::begin(){
    2d38:	cf 93       	push	r28
    2d3a:	df 93       	push	r29
    2d3c:	ec 01       	movw	r28, r24
	return 
		rov.RegisterDevice(tempId, this)
    2d3e:	bc 01       	movw	r22, r24
    2d40:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d42:	84 df       	rcall	.-248    	; 0x2c4c <_ZN5Robot14RegisterDeviceEhP7IDevice>
		&& rov.RegisterDevice(accelId, this)
		&& imu.begin();
    2d44:	88 23       	and	r24, r24
    2d46:	51 f0       	breq	.+20     	; 0x2d5c <_ZN9ImuSensor5beginEv+0x24>
}

bool ImuSensor::begin(){
	return 
		rov.RegisterDevice(tempId, this)
		&& rov.RegisterDevice(accelId, this)
    2d48:	be 01       	movw	r22, r28
    2d4a:	8e 85       	ldd	r24, Y+14	; 0x0e
    2d4c:	7f df       	rcall	.-258    	; 0x2c4c <_ZN5Robot14RegisterDeviceEhP7IDevice>
    2d4e:	88 23       	and	r24, r24
    2d50:	29 f0       	breq	.+10     	; 0x2d5c <_ZN9ImuSensor5beginEv+0x24>
		&& imu.begin();
    2d52:	6c e0       	ldi	r22, 0x0C	; 12
    2d54:	ce 01       	movw	r24, r28
    2d56:	02 96       	adiw	r24, 0x02	; 2
    2d58:	0e 94 3f 02 	call	0x47e	; 0x47e <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>
}
    2d5c:	df 91       	pop	r29
    2d5e:	cf 91       	pop	r28
    2d60:	08 95       	ret

00002d62 <_ZN9ImuSensor21ReadRegisterRequestedEhPh>:
	*buffer++ = *val++;
}

AdafruitImu::Vector<3> vector;

void ImuSensor::ReadRegisterRequested(uint8_t id, uint8_t* buffer){
    2d62:	ef 92       	push	r14
    2d64:	ff 92       	push	r15
    2d66:	0f 93       	push	r16
    2d68:	1f 93       	push	r17
    2d6a:	cf 93       	push	r28
    2d6c:	df 93       	push	r29
    2d6e:	cd b7       	in	r28, 0x3d	; 61
    2d70:	de b7       	in	r29, 0x3e	; 62
    2d72:	68 97       	sbiw	r28, 0x18	; 24
    2d74:	0f b6       	in	r0, 0x3f	; 63
    2d76:	f8 94       	cli
    2d78:	de bf       	out	0x3e, r29	; 62
    2d7a:	0f be       	out	0x3f, r0	; 63
    2d7c:	cd bf       	out	0x3d, r28	; 61
    2d7e:	f6 2e       	mov	r15, r22
    2d80:	8a 01       	movw	r16, r20
	if(id == tempId){
    2d82:	dc 01       	movw	r26, r24
    2d84:	1d 96       	adiw	r26, 0x0d	; 13
    2d86:	ec 90       	ld	r14, X
    2d88:	e6 12       	cpse	r14, r22
    2d8a:	0f c0       	rjmp	.+30     	; 0x2daa <_ZN9ImuSensor21ReadRegisterRequestedEhPh+0x48>
		buffer[0] = imu.getTemp();
    2d8c:	02 96       	adiw	r24, 0x02	; 2
    2d8e:	0e 94 ac 02 	call	0x558	; 0x558 <_ZN15Adafruit_BNO0557getTempEv>
    2d92:	f8 01       	movw	r30, r16
    2d94:	80 83       	st	Z, r24
	virtual void CommandReceived(uint8_t id, const uint8_t* data, uint8_t len) = 0;
	virtual void Update(uint8_t* buffer) = 0;
	
protected:
	void inline SendCommand(uint8_t id, uint8_t len){
		EtherComm::buffer[2] = id;
    2d96:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    2d9a:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    2d9e:	e2 82       	std	Z+2, r14	; 0x02
		EtherComm::SendCommand(CMD_UpdateDevice, len + 1);
    2da0:	62 e0       	ldi	r22, 0x02	; 2
    2da2:	83 e0       	ldi	r24, 0x03	; 3
    2da4:	0e 94 b9 0b 	call	0x1772	; 0x1772 <_ZN9EtherComm11SendCommandEhh>
    2da8:	71 c0       	rjmp	.+226    	; 0x2e8c <_ZN9ImuSensor21ReadRegisterRequestedEhPh+0x12a>
		SendCommand(id, 1);
	}else if(id == accelId){
    2daa:	dc 01       	movw	r26, r24
    2dac:	1e 96       	adiw	r26, 0x0e	; 14
    2dae:	2c 91       	ld	r18, X
    2db0:	62 13       	cpse	r22, r18
    2db2:	6c c0       	rjmp	.+216    	; 0x2e8c <_ZN9ImuSensor21ReadRegisterRequestedEhPh+0x12a>
		vector = imu.getVector(Adafruit_BNO055::VECTOR_ACCELEROMETER );
    2db4:	bc 01       	movw	r22, r24
    2db6:	6e 5f       	subi	r22, 0xFE	; 254
    2db8:	7f 4f       	sbci	r23, 0xFF	; 255
    2dba:	48 e0       	ldi	r20, 0x08	; 8
    2dbc:	ce 01       	movw	r24, r28
    2dbe:	01 96       	adiw	r24, 0x01	; 1
    2dc0:	0e 94 02 03 	call	0x604	; 0x604 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
    2dc4:	fe 01       	movw	r30, r28
    2dc6:	31 96       	adiw	r30, 0x01	; 1
    2dc8:	a2 e6       	ldi	r26, 0x62	; 98
    2dca:	b9 e0       	ldi	r27, 0x09	; 9
    2dcc:	ce 01       	movw	r24, r28
    2dce:	0d 96       	adiw	r24, 0x0d	; 13
		}

		Vector& operator=(const Vector& v)
		{
			for (int x = 0; x < N; x++ )
			p_vec[x] = v.p_vec[x];
    2dd0:	41 91       	ld	r20, Z+
    2dd2:	51 91       	ld	r21, Z+
    2dd4:	61 91       	ld	r22, Z+
    2dd6:	71 91       	ld	r23, Z+
    2dd8:	4d 93       	st	X+, r20
    2dda:	5d 93       	st	X+, r21
    2ddc:	6d 93       	st	X+, r22
    2dde:	7d 93       	st	X+, r23
			return ret;
		}

		Vector& operator=(const Vector& v)
		{
			for (int x = 0; x < N; x++ )
    2de0:	e8 17       	cp	r30, r24
    2de2:	f9 07       	cpc	r31, r25
    2de4:	a9 f7       	brne	.-22     	; 0x2dd0 <_ZN9ImuSensor21ReadRegisterRequestedEhPh+0x6e>
		saveFloat(vector.x(), buffer + 0);
    2de6:	e2 e6       	ldi	r30, 0x62	; 98
    2de8:	f9 e0       	ldi	r31, 0x09	; 9
    2dea:	20 81       	ld	r18, Z
    2dec:	51 81       	ldd	r21, Z+1	; 0x01
    2dee:	42 81       	ldd	r20, Z+2	; 0x02
    2df0:	33 81       	ldd	r19, Z+3	; 0x03
    2df2:	82 2f       	mov	r24, r18
    2df4:	95 2f       	mov	r25, r21
    2df6:	a4 2f       	mov	r26, r20
    2df8:	b3 2f       	mov	r27, r19
    2dfa:	8d 87       	std	Y+13, r24	; 0x0d
    2dfc:	9e 87       	std	Y+14, r25	; 0x0e
    2dfe:	af 87       	std	Y+15, r26	; 0x0f
    2e00:	b8 8b       	std	Y+16, r27	; 0x10
	
}

static void saveFloat(float f, uint8_t* buffer){
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    2e02:	d8 01       	movw	r26, r16
    2e04:	2c 93       	st	X, r18
	*buffer++ = *val++;
    2e06:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e08:	11 96       	adiw	r26, 0x01	; 1
    2e0a:	8c 93       	st	X, r24
    2e0c:	11 97       	sbiw	r26, 0x01	; 1
	*buffer++ = *val++;
    2e0e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e10:	12 96       	adiw	r26, 0x02	; 2
    2e12:	8c 93       	st	X, r24
    2e14:	12 97       	sbiw	r26, 0x02	; 2
	*buffer++ = *val++;
    2e16:	88 89       	ldd	r24, Y+16	; 0x10
    2e18:	13 96       	adiw	r26, 0x03	; 3
    2e1a:	8c 93       	st	X, r24
    2e1c:	24 81       	ldd	r18, Z+4	; 0x04
    2e1e:	55 81       	ldd	r21, Z+5	; 0x05
    2e20:	46 81       	ldd	r20, Z+6	; 0x06
    2e22:	37 81       	ldd	r19, Z+7	; 0x07
    2e24:	82 2f       	mov	r24, r18
    2e26:	95 2f       	mov	r25, r21
    2e28:	a4 2f       	mov	r26, r20
    2e2a:	b3 2f       	mov	r27, r19
    2e2c:	89 8b       	std	Y+17, r24	; 0x11
    2e2e:	9a 8b       	std	Y+18, r25	; 0x12
    2e30:	ab 8b       	std	Y+19, r26	; 0x13
    2e32:	bc 8b       	std	Y+20, r27	; 0x14
	
}

static void saveFloat(float f, uint8_t* buffer){
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    2e34:	d8 01       	movw	r26, r16
    2e36:	14 96       	adiw	r26, 0x04	; 4
    2e38:	2c 93       	st	X, r18
    2e3a:	14 97       	sbiw	r26, 0x04	; 4
	*buffer++ = *val++;
    2e3c:	8a 89       	ldd	r24, Y+18	; 0x12
    2e3e:	15 96       	adiw	r26, 0x05	; 5
    2e40:	8c 93       	st	X, r24
    2e42:	15 97       	sbiw	r26, 0x05	; 5
	*buffer++ = *val++;
    2e44:	8b 89       	ldd	r24, Y+19	; 0x13
    2e46:	16 96       	adiw	r26, 0x06	; 6
    2e48:	8c 93       	st	X, r24
    2e4a:	16 97       	sbiw	r26, 0x06	; 6
	*buffer++ = *val++;
    2e4c:	8c 89       	ldd	r24, Y+20	; 0x14
    2e4e:	17 96       	adiw	r26, 0x07	; 7
    2e50:	8c 93       	st	X, r24
    2e52:	20 85       	ldd	r18, Z+8	; 0x08
    2e54:	51 85       	ldd	r21, Z+9	; 0x09
    2e56:	42 85       	ldd	r20, Z+10	; 0x0a
    2e58:	33 85       	ldd	r19, Z+11	; 0x0b
    2e5a:	82 2f       	mov	r24, r18
    2e5c:	95 2f       	mov	r25, r21
    2e5e:	a4 2f       	mov	r26, r20
    2e60:	b3 2f       	mov	r27, r19
    2e62:	8d 8b       	std	Y+21, r24	; 0x15
    2e64:	9e 8b       	std	Y+22, r25	; 0x16
    2e66:	af 8b       	std	Y+23, r26	; 0x17
    2e68:	b8 8f       	std	Y+24, r27	; 0x18
	
}

static void saveFloat(float f, uint8_t* buffer){
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    2e6a:	f8 01       	movw	r30, r16
    2e6c:	20 87       	std	Z+8, r18	; 0x08
	*buffer++ = *val++;
    2e6e:	8e 89       	ldd	r24, Y+22	; 0x16
    2e70:	81 87       	std	Z+9, r24	; 0x09
	*buffer++ = *val++;
    2e72:	8f 89       	ldd	r24, Y+23	; 0x17
    2e74:	82 87       	std	Z+10, r24	; 0x0a
	*buffer++ = *val++;
    2e76:	88 8d       	ldd	r24, Y+24	; 0x18
    2e78:	83 87       	std	Z+11, r24	; 0x0b
	virtual void CommandReceived(uint8_t id, const uint8_t* data, uint8_t len) = 0;
	virtual void Update(uint8_t* buffer) = 0;
	
protected:
	void inline SendCommand(uint8_t id, uint8_t len){
		EtherComm::buffer[2] = id;
    2e7a:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    2e7e:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    2e82:	f2 82       	std	Z+2, r15	; 0x02
		EtherComm::SendCommand(CMD_UpdateDevice, len + 1);
    2e84:	6d e0       	ldi	r22, 0x0D	; 13
    2e86:	83 e0       	ldi	r24, 0x03	; 3
    2e88:	0e 94 b9 0b 	call	0x1772	; 0x1772 <_ZN9EtherComm11SendCommandEhh>
	saveFloat(vector.x(), buffer + 14);
	saveFloat(vector.y(), buffer + 18);
	saveFloat(vector.z(), buffer + 22);
	
	return 1 + 1 + 6*4;*/
    2e8c:	68 96       	adiw	r28, 0x18	; 24
    2e8e:	0f b6       	in	r0, 0x3f	; 63
    2e90:	f8 94       	cli
    2e92:	de bf       	out	0x3e, r29	; 62
    2e94:	0f be       	out	0x3f, r0	; 63
    2e96:	cd bf       	out	0x3d, r28	; 61
    2e98:	df 91       	pop	r29
    2e9a:	cf 91       	pop	r28
    2e9c:	1f 91       	pop	r17
    2e9e:	0f 91       	pop	r16
    2ea0:	ff 90       	pop	r15
    2ea2:	ef 90       	pop	r14
    2ea4:	08 95       	ret

00002ea6 <_ZN9ImuSensorC1Ehh>:
#define ID_TEMP 1
#define ID_ACCEL 2
//#include "../BNO055/utility/vector.h"
//Adafruit_BNO055 ImuSensor::imu;

ImuSensor::ImuSensor(const uint8_t TempId, const uint8_t AccelId) : imu(55, 0x28), tempId(TempId), accelId(AccelId) {
    2ea6:	ef 92       	push	r14
    2ea8:	ff 92       	push	r15
    2eaa:	0f 93       	push	r16
    2eac:	1f 93       	push	r17
    2eae:	cf 93       	push	r28
    2eb0:	df 93       	push	r29
    2eb2:	ec 01       	movw	r28, r24
    2eb4:	e6 2e       	mov	r14, r22
    2eb6:	f4 2e       	mov	r15, r20
    2eb8:	2e ed       	ldi	r18, 0xDE	; 222
    2eba:	32 e0       	ldi	r19, 0x02	; 2
    2ebc:	fc 01       	movw	r30, r24
    2ebe:	21 93       	st	Z+, r18
    2ec0:	31 93       	st	Z+, r19
    2ec2:	cf 01       	movw	r24, r30
    2ec4:	00 e0       	ldi	r16, 0x00	; 0
    2ec6:	17 e0       	ldi	r17, 0x07	; 7
    2ec8:	28 e2       	ldi	r18, 0x28	; 40
    2eca:	47 e3       	ldi	r20, 0x37	; 55
    2ecc:	50 e0       	ldi	r21, 0x00	; 0
    2ece:	60 e0       	ldi	r22, 0x00	; 0
    2ed0:	70 e0       	ldi	r23, 0x00	; 0
    2ed2:	0e 94 ca 01 	call	0x394	; 0x394 <_ZN15Adafruit_BNO055C1ElhP7TwoWire>
    2ed6:	ed 86       	std	Y+13, r14	; 0x0d
    2ed8:	fe 86       	std	Y+14, r15	; 0x0e
	
}
    2eda:	df 91       	pop	r29
    2edc:	cf 91       	pop	r28
    2ede:	1f 91       	pop	r17
    2ee0:	0f 91       	pop	r16
    2ee2:	ff 90       	pop	r15
    2ee4:	ef 90       	pop	r14
    2ee6:	08 95       	ret

00002ee8 <_GLOBAL__sub_I__ZN9ImuSensorC2Ehh>:
	template <uint8_t N> class Vector
	{
		public:
		Vector()
		{
			memset(p_vec, 0, sizeof(double)*N);
    2ee8:	8c e0       	ldi	r24, 0x0C	; 12
    2eea:	e2 e6       	ldi	r30, 0x62	; 98
    2eec:	f9 e0       	ldi	r31, 0x09	; 9
    2eee:	df 01       	movw	r26, r30
    2ef0:	1d 92       	st	X+, r1
    2ef2:	8a 95       	dec	r24
    2ef4:	e9 f7       	brne	.-6      	; 0x2ef0 <_GLOBAL__sub_I__ZN9ImuSensorC2Ehh+0x8>
    2ef6:	08 95       	ret

00002ef8 <_GLOBAL__sub_I_bno>:
	setup();
	
	while(true){
		loop();
	}
    2ef8:	0f 93       	push	r16
    2efa:	1f 93       	push	r17
/* Set the delay between fresh samples */
#define BNO055_SAMPLERATE_DELAY_MS 100

// Check I2C device address and correct line below (by default address is 0x29 or 0x28)
//                                   id, address
Adafruit_BNO055 bno = Adafruit_BNO055(55, 0x28);
    2efc:	00 e0       	ldi	r16, 0x00	; 0
    2efe:	17 e0       	ldi	r17, 0x07	; 7
    2f00:	28 e2       	ldi	r18, 0x28	; 40
    2f02:	47 e3       	ldi	r20, 0x37	; 55
    2f04:	50 e0       	ldi	r21, 0x00	; 0
    2f06:	60 e0       	ldi	r22, 0x00	; 0
    2f08:	70 e0       	ldi	r23, 0x00	; 0
    2f0a:	8e e6       	ldi	r24, 0x6E	; 110
    2f0c:	99 e0       	ldi	r25, 0x09	; 9
    2f0e:	0e 94 ca 01 	call	0x394	; 0x394 <_ZN15Adafruit_BNO055C1ElhP7TwoWire>
	setup();
	
	while(true){
		loop();
	}
    2f12:	1f 91       	pop	r17
    2f14:	0f 91       	pop	r16
    2f16:	08 95       	ret

00002f18 <_ZN5Print5writeEPKhj>:
}

uint16_t Print::print(char c)
{
  return write(c);
}
    2f18:	cf 92       	push	r12
    2f1a:	df 92       	push	r13
    2f1c:	ef 92       	push	r14
    2f1e:	ff 92       	push	r15
    2f20:	0f 93       	push	r16
    2f22:	1f 93       	push	r17
    2f24:	cf 93       	push	r28
    2f26:	df 93       	push	r29
    2f28:	41 15       	cp	r20, r1
    2f2a:	51 05       	cpc	r21, r1
    2f2c:	c1 f0       	breq	.+48     	; 0x2f5e <_ZN5Print5writeEPKhj+0x46>
    2f2e:	6a 01       	movw	r12, r20
    2f30:	8c 01       	movw	r16, r24
    2f32:	e6 2e       	mov	r14, r22
    2f34:	f7 2e       	mov	r15, r23
    2f36:	c0 e0       	ldi	r28, 0x00	; 0
    2f38:	d0 e0       	ldi	r29, 0x00	; 0
    2f3a:	d7 01       	movw	r26, r14
    2f3c:	6d 91       	ld	r22, X+
    2f3e:	7d 01       	movw	r14, r26
    2f40:	d8 01       	movw	r26, r16
    2f42:	ed 91       	ld	r30, X+
    2f44:	fc 91       	ld	r31, X
    2f46:	01 90       	ld	r0, Z+
    2f48:	f0 81       	ld	r31, Z
    2f4a:	e0 2d       	mov	r30, r0
    2f4c:	c8 01       	movw	r24, r16
    2f4e:	19 95       	eicall
    2f50:	89 2b       	or	r24, r25
    2f52:	39 f0       	breq	.+14     	; 0x2f62 <_ZN5Print5writeEPKhj+0x4a>
    2f54:	21 96       	adiw	r28, 0x01	; 1
    2f56:	cc 16       	cp	r12, r28
    2f58:	dd 06       	cpc	r13, r29
    2f5a:	79 f7       	brne	.-34     	; 0x2f3a <_ZN5Print5writeEPKhj+0x22>
    2f5c:	02 c0       	rjmp	.+4      	; 0x2f62 <_ZN5Print5writeEPKhj+0x4a>
    2f5e:	c0 e0       	ldi	r28, 0x00	; 0
    2f60:	d0 e0       	ldi	r29, 0x00	; 0
    2f62:	ce 01       	movw	r24, r28
    2f64:	df 91       	pop	r29
    2f66:	cf 91       	pop	r28
    2f68:	1f 91       	pop	r17
    2f6a:	0f 91       	pop	r16
    2f6c:	ff 90       	pop	r15
    2f6e:	ef 90       	pop	r14
    2f70:	df 90       	pop	r13
    2f72:	cf 90       	pop	r12
    2f74:	08 95       	ret

00002f76 <_ZN5Print5printEPKc>:
    2f76:	61 15       	cp	r22, r1
    2f78:	71 05       	cpc	r23, r1
    2f7a:	81 f0       	breq	.+32     	; 0x2f9c <_ZN5Print5printEPKc+0x26>
    2f7c:	fb 01       	movw	r30, r22
    2f7e:	01 90       	ld	r0, Z+
    2f80:	00 20       	and	r0, r0
    2f82:	e9 f7       	brne	.-6      	; 0x2f7e <_ZN5Print5printEPKc+0x8>
    2f84:	31 97       	sbiw	r30, 0x01	; 1
    2f86:	af 01       	movw	r20, r30
    2f88:	46 1b       	sub	r20, r22
    2f8a:	57 0b       	sbc	r21, r23
    2f8c:	dc 01       	movw	r26, r24
    2f8e:	ed 91       	ld	r30, X+
    2f90:	fc 91       	ld	r31, X
    2f92:	02 80       	ldd	r0, Z+2	; 0x02
    2f94:	f3 81       	ldd	r31, Z+3	; 0x03
    2f96:	e0 2d       	mov	r30, r0
    2f98:	19 95       	eicall
    2f9a:	08 95       	ret
    2f9c:	80 e0       	ldi	r24, 0x00	; 0
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
    2fa0:	08 95       	ret

00002fa2 <_ZN5Print7printlnEv>:
  //void clearWriteError() { setWriteError(0); }
  
  virtual uint16_t write(uint8_t) = 0;
  uint16_t write(const char *str) {
	  if (str == NULL) return 0;
	  return write((const uint8_t *)str, strlen(str));
    2fa2:	dc 01       	movw	r26, r24
    2fa4:	ed 91       	ld	r30, X+
    2fa6:	fc 91       	ld	r31, X
    2fa8:	02 80       	ldd	r0, Z+2	; 0x02
    2faa:	f3 81       	ldd	r31, Z+3	; 0x03
    2fac:	e0 2d       	mov	r30, r0
    2fae:	42 e0       	ldi	r20, 0x02	; 2
    2fb0:	50 e0       	ldi	r21, 0x00	; 0
    2fb2:	66 ee       	ldi	r22, 0xE6	; 230
    2fb4:	72 e0       	ldi	r23, 0x02	; 2
    2fb6:	19 95       	eicall
}
*/
uint16_t Print::println(void)
{
  return write("\r\n");
}
    2fb8:	08 95       	ret

00002fba <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}
*/
uint16_t Print::println(const char c[])
{
    2fba:	0f 93       	push	r16
    2fbc:	1f 93       	push	r17
    2fbe:	cf 93       	push	r28
    2fc0:	df 93       	push	r29
    2fc2:	ec 01       	movw	r28, r24
  uint16_t n = print(c);
    2fc4:	d8 df       	rcall	.-80     	; 0x2f76 <_ZN5Print5printEPKc>
    2fc6:	8c 01       	movw	r16, r24
  n += println();
    2fc8:	ce 01       	movw	r24, r28
    2fca:	eb df       	rcall	.-42     	; 0x2fa2 <_ZN5Print7printlnEv>
  return n;
}
    2fcc:	80 0f       	add	r24, r16
    2fce:	91 1f       	adc	r25, r17
    2fd0:	df 91       	pop	r29
    2fd2:	cf 91       	pop	r28
    2fd4:	1f 91       	pop	r17
    2fd6:	0f 91       	pop	r16
    2fd8:	08 95       	ret

00002fda <__subsf3>:
    2fda:	50 58       	subi	r21, 0x80	; 128

00002fdc <__addsf3>:
    2fdc:	bb 27       	eor	r27, r27
    2fde:	aa 27       	eor	r26, r26
    2fe0:	0e d0       	rcall	.+28     	; 0x2ffe <__addsf3x>
    2fe2:	70 c1       	rjmp	.+736    	; 0x32c4 <__fp_round>
    2fe4:	61 d1       	rcall	.+706    	; 0x32a8 <__fp_pscA>
    2fe6:	30 f0       	brcs	.+12     	; 0x2ff4 <__addsf3+0x18>
    2fe8:	66 d1       	rcall	.+716    	; 0x32b6 <__fp_pscB>
    2fea:	20 f0       	brcs	.+8      	; 0x2ff4 <__addsf3+0x18>
    2fec:	31 f4       	brne	.+12     	; 0x2ffa <__addsf3+0x1e>
    2fee:	9f 3f       	cpi	r25, 0xFF	; 255
    2ff0:	11 f4       	brne	.+4      	; 0x2ff6 <__addsf3+0x1a>
    2ff2:	1e f4       	brtc	.+6      	; 0x2ffa <__addsf3+0x1e>
    2ff4:	56 c1       	rjmp	.+684    	; 0x32a2 <__fp_nan>
    2ff6:	0e f4       	brtc	.+2      	; 0x2ffa <__addsf3+0x1e>
    2ff8:	e0 95       	com	r30
    2ffa:	e7 fb       	bst	r30, 7
    2ffc:	4c c1       	rjmp	.+664    	; 0x3296 <__fp_inf>

00002ffe <__addsf3x>:
    2ffe:	e9 2f       	mov	r30, r25
    3000:	72 d1       	rcall	.+740    	; 0x32e6 <__fp_split3>
    3002:	80 f3       	brcs	.-32     	; 0x2fe4 <__addsf3+0x8>
    3004:	ba 17       	cp	r27, r26
    3006:	62 07       	cpc	r22, r18
    3008:	73 07       	cpc	r23, r19
    300a:	84 07       	cpc	r24, r20
    300c:	95 07       	cpc	r25, r21
    300e:	18 f0       	brcs	.+6      	; 0x3016 <__addsf3x+0x18>
    3010:	71 f4       	brne	.+28     	; 0x302e <__addsf3x+0x30>
    3012:	9e f5       	brtc	.+102    	; 0x307a <__addsf3x+0x7c>
    3014:	8a c1       	rjmp	.+788    	; 0x332a <__fp_zero>
    3016:	0e f4       	brtc	.+2      	; 0x301a <__addsf3x+0x1c>
    3018:	e0 95       	com	r30
    301a:	0b 2e       	mov	r0, r27
    301c:	ba 2f       	mov	r27, r26
    301e:	a0 2d       	mov	r26, r0
    3020:	0b 01       	movw	r0, r22
    3022:	b9 01       	movw	r22, r18
    3024:	90 01       	movw	r18, r0
    3026:	0c 01       	movw	r0, r24
    3028:	ca 01       	movw	r24, r20
    302a:	a0 01       	movw	r20, r0
    302c:	11 24       	eor	r1, r1
    302e:	ff 27       	eor	r31, r31
    3030:	59 1b       	sub	r21, r25
    3032:	99 f0       	breq	.+38     	; 0x305a <__addsf3x+0x5c>
    3034:	59 3f       	cpi	r21, 0xF9	; 249
    3036:	50 f4       	brcc	.+20     	; 0x304c <__addsf3x+0x4e>
    3038:	50 3e       	cpi	r21, 0xE0	; 224
    303a:	68 f1       	brcs	.+90     	; 0x3096 <__addsf3x+0x98>
    303c:	1a 16       	cp	r1, r26
    303e:	f0 40       	sbci	r31, 0x00	; 0
    3040:	a2 2f       	mov	r26, r18
    3042:	23 2f       	mov	r18, r19
    3044:	34 2f       	mov	r19, r20
    3046:	44 27       	eor	r20, r20
    3048:	58 5f       	subi	r21, 0xF8	; 248
    304a:	f3 cf       	rjmp	.-26     	; 0x3032 <__addsf3x+0x34>
    304c:	46 95       	lsr	r20
    304e:	37 95       	ror	r19
    3050:	27 95       	ror	r18
    3052:	a7 95       	ror	r26
    3054:	f0 40       	sbci	r31, 0x00	; 0
    3056:	53 95       	inc	r21
    3058:	c9 f7       	brne	.-14     	; 0x304c <__addsf3x+0x4e>
    305a:	7e f4       	brtc	.+30     	; 0x307a <__addsf3x+0x7c>
    305c:	1f 16       	cp	r1, r31
    305e:	ba 0b       	sbc	r27, r26
    3060:	62 0b       	sbc	r22, r18
    3062:	73 0b       	sbc	r23, r19
    3064:	84 0b       	sbc	r24, r20
    3066:	ba f0       	brmi	.+46     	; 0x3096 <__addsf3x+0x98>
    3068:	91 50       	subi	r25, 0x01	; 1
    306a:	a1 f0       	breq	.+40     	; 0x3094 <__addsf3x+0x96>
    306c:	ff 0f       	add	r31, r31
    306e:	bb 1f       	adc	r27, r27
    3070:	66 1f       	adc	r22, r22
    3072:	77 1f       	adc	r23, r23
    3074:	88 1f       	adc	r24, r24
    3076:	c2 f7       	brpl	.-16     	; 0x3068 <__addsf3x+0x6a>
    3078:	0e c0       	rjmp	.+28     	; 0x3096 <__addsf3x+0x98>
    307a:	ba 0f       	add	r27, r26
    307c:	62 1f       	adc	r22, r18
    307e:	73 1f       	adc	r23, r19
    3080:	84 1f       	adc	r24, r20
    3082:	48 f4       	brcc	.+18     	; 0x3096 <__addsf3x+0x98>
    3084:	87 95       	ror	r24
    3086:	77 95       	ror	r23
    3088:	67 95       	ror	r22
    308a:	b7 95       	ror	r27
    308c:	f7 95       	ror	r31
    308e:	9e 3f       	cpi	r25, 0xFE	; 254
    3090:	08 f0       	brcs	.+2      	; 0x3094 <__addsf3x+0x96>
    3092:	b3 cf       	rjmp	.-154    	; 0x2ffa <__addsf3+0x1e>
    3094:	93 95       	inc	r25
    3096:	88 0f       	add	r24, r24
    3098:	08 f0       	brcs	.+2      	; 0x309c <__addsf3x+0x9e>
    309a:	99 27       	eor	r25, r25
    309c:	ee 0f       	add	r30, r30
    309e:	97 95       	ror	r25
    30a0:	87 95       	ror	r24
    30a2:	08 95       	ret

000030a4 <__cmpsf2>:
    30a4:	d4 d0       	rcall	.+424    	; 0x324e <__fp_cmp>
    30a6:	08 f4       	brcc	.+2      	; 0x30aa <__cmpsf2+0x6>
    30a8:	81 e0       	ldi	r24, 0x01	; 1
    30aa:	08 95       	ret

000030ac <__divsf3>:
    30ac:	0c d0       	rcall	.+24     	; 0x30c6 <__divsf3x>
    30ae:	0a c1       	rjmp	.+532    	; 0x32c4 <__fp_round>
    30b0:	02 d1       	rcall	.+516    	; 0x32b6 <__fp_pscB>
    30b2:	40 f0       	brcs	.+16     	; 0x30c4 <__divsf3+0x18>
    30b4:	f9 d0       	rcall	.+498    	; 0x32a8 <__fp_pscA>
    30b6:	30 f0       	brcs	.+12     	; 0x30c4 <__divsf3+0x18>
    30b8:	21 f4       	brne	.+8      	; 0x30c2 <__divsf3+0x16>
    30ba:	5f 3f       	cpi	r21, 0xFF	; 255
    30bc:	19 f0       	breq	.+6      	; 0x30c4 <__divsf3+0x18>
    30be:	eb c0       	rjmp	.+470    	; 0x3296 <__fp_inf>
    30c0:	51 11       	cpse	r21, r1
    30c2:	34 c1       	rjmp	.+616    	; 0x332c <__fp_szero>
    30c4:	ee c0       	rjmp	.+476    	; 0x32a2 <__fp_nan>

000030c6 <__divsf3x>:
    30c6:	0f d1       	rcall	.+542    	; 0x32e6 <__fp_split3>
    30c8:	98 f3       	brcs	.-26     	; 0x30b0 <__divsf3+0x4>

000030ca <__divsf3_pse>:
    30ca:	99 23       	and	r25, r25
    30cc:	c9 f3       	breq	.-14     	; 0x30c0 <__divsf3+0x14>
    30ce:	55 23       	and	r21, r21
    30d0:	b1 f3       	breq	.-20     	; 0x30be <__divsf3+0x12>
    30d2:	95 1b       	sub	r25, r21
    30d4:	55 0b       	sbc	r21, r21
    30d6:	bb 27       	eor	r27, r27
    30d8:	aa 27       	eor	r26, r26
    30da:	62 17       	cp	r22, r18
    30dc:	73 07       	cpc	r23, r19
    30de:	84 07       	cpc	r24, r20
    30e0:	38 f0       	brcs	.+14     	; 0x30f0 <__divsf3_pse+0x26>
    30e2:	9f 5f       	subi	r25, 0xFF	; 255
    30e4:	5f 4f       	sbci	r21, 0xFF	; 255
    30e6:	22 0f       	add	r18, r18
    30e8:	33 1f       	adc	r19, r19
    30ea:	44 1f       	adc	r20, r20
    30ec:	aa 1f       	adc	r26, r26
    30ee:	a9 f3       	breq	.-22     	; 0x30da <__divsf3_pse+0x10>
    30f0:	33 d0       	rcall	.+102    	; 0x3158 <__divsf3_pse+0x8e>
    30f2:	0e 2e       	mov	r0, r30
    30f4:	3a f0       	brmi	.+14     	; 0x3104 <__divsf3_pse+0x3a>
    30f6:	e0 e8       	ldi	r30, 0x80	; 128
    30f8:	30 d0       	rcall	.+96     	; 0x315a <__divsf3_pse+0x90>
    30fa:	91 50       	subi	r25, 0x01	; 1
    30fc:	50 40       	sbci	r21, 0x00	; 0
    30fe:	e6 95       	lsr	r30
    3100:	00 1c       	adc	r0, r0
    3102:	ca f7       	brpl	.-14     	; 0x30f6 <__divsf3_pse+0x2c>
    3104:	29 d0       	rcall	.+82     	; 0x3158 <__divsf3_pse+0x8e>
    3106:	fe 2f       	mov	r31, r30
    3108:	27 d0       	rcall	.+78     	; 0x3158 <__divsf3_pse+0x8e>
    310a:	66 0f       	add	r22, r22
    310c:	77 1f       	adc	r23, r23
    310e:	88 1f       	adc	r24, r24
    3110:	bb 1f       	adc	r27, r27
    3112:	26 17       	cp	r18, r22
    3114:	37 07       	cpc	r19, r23
    3116:	48 07       	cpc	r20, r24
    3118:	ab 07       	cpc	r26, r27
    311a:	b0 e8       	ldi	r27, 0x80	; 128
    311c:	09 f0       	breq	.+2      	; 0x3120 <__divsf3_pse+0x56>
    311e:	bb 0b       	sbc	r27, r27
    3120:	80 2d       	mov	r24, r0
    3122:	bf 01       	movw	r22, r30
    3124:	ff 27       	eor	r31, r31
    3126:	93 58       	subi	r25, 0x83	; 131
    3128:	5f 4f       	sbci	r21, 0xFF	; 255
    312a:	2a f0       	brmi	.+10     	; 0x3136 <__divsf3_pse+0x6c>
    312c:	9e 3f       	cpi	r25, 0xFE	; 254
    312e:	51 05       	cpc	r21, r1
    3130:	68 f0       	brcs	.+26     	; 0x314c <__divsf3_pse+0x82>
    3132:	b1 c0       	rjmp	.+354    	; 0x3296 <__fp_inf>
    3134:	fb c0       	rjmp	.+502    	; 0x332c <__fp_szero>
    3136:	5f 3f       	cpi	r21, 0xFF	; 255
    3138:	ec f3       	brlt	.-6      	; 0x3134 <__divsf3_pse+0x6a>
    313a:	98 3e       	cpi	r25, 0xE8	; 232
    313c:	dc f3       	brlt	.-10     	; 0x3134 <__divsf3_pse+0x6a>
    313e:	86 95       	lsr	r24
    3140:	77 95       	ror	r23
    3142:	67 95       	ror	r22
    3144:	b7 95       	ror	r27
    3146:	f7 95       	ror	r31
    3148:	9f 5f       	subi	r25, 0xFF	; 255
    314a:	c9 f7       	brne	.-14     	; 0x313e <__divsf3_pse+0x74>
    314c:	88 0f       	add	r24, r24
    314e:	91 1d       	adc	r25, r1
    3150:	96 95       	lsr	r25
    3152:	87 95       	ror	r24
    3154:	97 f9       	bld	r25, 7
    3156:	08 95       	ret
    3158:	e1 e0       	ldi	r30, 0x01	; 1
    315a:	66 0f       	add	r22, r22
    315c:	77 1f       	adc	r23, r23
    315e:	88 1f       	adc	r24, r24
    3160:	bb 1f       	adc	r27, r27
    3162:	62 17       	cp	r22, r18
    3164:	73 07       	cpc	r23, r19
    3166:	84 07       	cpc	r24, r20
    3168:	ba 07       	cpc	r27, r26
    316a:	20 f0       	brcs	.+8      	; 0x3174 <__divsf3_pse+0xaa>
    316c:	62 1b       	sub	r22, r18
    316e:	73 0b       	sbc	r23, r19
    3170:	84 0b       	sbc	r24, r20
    3172:	ba 0b       	sbc	r27, r26
    3174:	ee 1f       	adc	r30, r30
    3176:	88 f7       	brcc	.-30     	; 0x315a <__divsf3_pse+0x90>
    3178:	e0 95       	com	r30
    317a:	08 95       	ret

0000317c <__fixunssfsi>:
    317c:	bc d0       	rcall	.+376    	; 0x32f6 <__fp_splitA>
    317e:	88 f0       	brcs	.+34     	; 0x31a2 <__fixunssfsi+0x26>
    3180:	9f 57       	subi	r25, 0x7F	; 127
    3182:	90 f0       	brcs	.+36     	; 0x31a8 <__fixunssfsi+0x2c>
    3184:	b9 2f       	mov	r27, r25
    3186:	99 27       	eor	r25, r25
    3188:	b7 51       	subi	r27, 0x17	; 23
    318a:	a0 f0       	brcs	.+40     	; 0x31b4 <__fixunssfsi+0x38>
    318c:	d1 f0       	breq	.+52     	; 0x31c2 <__fixunssfsi+0x46>
    318e:	66 0f       	add	r22, r22
    3190:	77 1f       	adc	r23, r23
    3192:	88 1f       	adc	r24, r24
    3194:	99 1f       	adc	r25, r25
    3196:	1a f0       	brmi	.+6      	; 0x319e <__fixunssfsi+0x22>
    3198:	ba 95       	dec	r27
    319a:	c9 f7       	brne	.-14     	; 0x318e <__fixunssfsi+0x12>
    319c:	12 c0       	rjmp	.+36     	; 0x31c2 <__fixunssfsi+0x46>
    319e:	b1 30       	cpi	r27, 0x01	; 1
    31a0:	81 f0       	breq	.+32     	; 0x31c2 <__fixunssfsi+0x46>
    31a2:	c3 d0       	rcall	.+390    	; 0x332a <__fp_zero>
    31a4:	b1 e0       	ldi	r27, 0x01	; 1
    31a6:	08 95       	ret
    31a8:	c0 c0       	rjmp	.+384    	; 0x332a <__fp_zero>
    31aa:	67 2f       	mov	r22, r23
    31ac:	78 2f       	mov	r23, r24
    31ae:	88 27       	eor	r24, r24
    31b0:	b8 5f       	subi	r27, 0xF8	; 248
    31b2:	39 f0       	breq	.+14     	; 0x31c2 <__fixunssfsi+0x46>
    31b4:	b9 3f       	cpi	r27, 0xF9	; 249
    31b6:	cc f3       	brlt	.-14     	; 0x31aa <__fixunssfsi+0x2e>
    31b8:	86 95       	lsr	r24
    31ba:	77 95       	ror	r23
    31bc:	67 95       	ror	r22
    31be:	b3 95       	inc	r27
    31c0:	d9 f7       	brne	.-10     	; 0x31b8 <__fixunssfsi+0x3c>
    31c2:	3e f4       	brtc	.+14     	; 0x31d2 <__fixunssfsi+0x56>
    31c4:	90 95       	com	r25
    31c6:	80 95       	com	r24
    31c8:	70 95       	com	r23
    31ca:	61 95       	neg	r22
    31cc:	7f 4f       	sbci	r23, 0xFF	; 255
    31ce:	8f 4f       	sbci	r24, 0xFF	; 255
    31d0:	9f 4f       	sbci	r25, 0xFF	; 255
    31d2:	08 95       	ret

000031d4 <__floatunsisf>:
    31d4:	e8 94       	clt
    31d6:	09 c0       	rjmp	.+18     	; 0x31ea <__floatsisf+0x12>

000031d8 <__floatsisf>:
    31d8:	97 fb       	bst	r25, 7
    31da:	3e f4       	brtc	.+14     	; 0x31ea <__floatsisf+0x12>
    31dc:	90 95       	com	r25
    31de:	80 95       	com	r24
    31e0:	70 95       	com	r23
    31e2:	61 95       	neg	r22
    31e4:	7f 4f       	sbci	r23, 0xFF	; 255
    31e6:	8f 4f       	sbci	r24, 0xFF	; 255
    31e8:	9f 4f       	sbci	r25, 0xFF	; 255
    31ea:	99 23       	and	r25, r25
    31ec:	a9 f0       	breq	.+42     	; 0x3218 <__floatsisf+0x40>
    31ee:	f9 2f       	mov	r31, r25
    31f0:	96 e9       	ldi	r25, 0x96	; 150
    31f2:	bb 27       	eor	r27, r27
    31f4:	93 95       	inc	r25
    31f6:	f6 95       	lsr	r31
    31f8:	87 95       	ror	r24
    31fa:	77 95       	ror	r23
    31fc:	67 95       	ror	r22
    31fe:	b7 95       	ror	r27
    3200:	f1 11       	cpse	r31, r1
    3202:	f8 cf       	rjmp	.-16     	; 0x31f4 <__floatsisf+0x1c>
    3204:	fa f4       	brpl	.+62     	; 0x3244 <__floatsisf+0x6c>
    3206:	bb 0f       	add	r27, r27
    3208:	11 f4       	brne	.+4      	; 0x320e <__floatsisf+0x36>
    320a:	60 ff       	sbrs	r22, 0
    320c:	1b c0       	rjmp	.+54     	; 0x3244 <__floatsisf+0x6c>
    320e:	6f 5f       	subi	r22, 0xFF	; 255
    3210:	7f 4f       	sbci	r23, 0xFF	; 255
    3212:	8f 4f       	sbci	r24, 0xFF	; 255
    3214:	9f 4f       	sbci	r25, 0xFF	; 255
    3216:	16 c0       	rjmp	.+44     	; 0x3244 <__floatsisf+0x6c>
    3218:	88 23       	and	r24, r24
    321a:	11 f0       	breq	.+4      	; 0x3220 <__floatsisf+0x48>
    321c:	96 e9       	ldi	r25, 0x96	; 150
    321e:	11 c0       	rjmp	.+34     	; 0x3242 <__floatsisf+0x6a>
    3220:	77 23       	and	r23, r23
    3222:	21 f0       	breq	.+8      	; 0x322c <__floatsisf+0x54>
    3224:	9e e8       	ldi	r25, 0x8E	; 142
    3226:	87 2f       	mov	r24, r23
    3228:	76 2f       	mov	r23, r22
    322a:	05 c0       	rjmp	.+10     	; 0x3236 <__floatsisf+0x5e>
    322c:	66 23       	and	r22, r22
    322e:	71 f0       	breq	.+28     	; 0x324c <__floatsisf+0x74>
    3230:	96 e8       	ldi	r25, 0x86	; 134
    3232:	86 2f       	mov	r24, r22
    3234:	70 e0       	ldi	r23, 0x00	; 0
    3236:	60 e0       	ldi	r22, 0x00	; 0
    3238:	2a f0       	brmi	.+10     	; 0x3244 <__floatsisf+0x6c>
    323a:	9a 95       	dec	r25
    323c:	66 0f       	add	r22, r22
    323e:	77 1f       	adc	r23, r23
    3240:	88 1f       	adc	r24, r24
    3242:	da f7       	brpl	.-10     	; 0x323a <__floatsisf+0x62>
    3244:	88 0f       	add	r24, r24
    3246:	96 95       	lsr	r25
    3248:	87 95       	ror	r24
    324a:	97 f9       	bld	r25, 7
    324c:	08 95       	ret

0000324e <__fp_cmp>:
    324e:	99 0f       	add	r25, r25
    3250:	00 08       	sbc	r0, r0
    3252:	55 0f       	add	r21, r21
    3254:	aa 0b       	sbc	r26, r26
    3256:	e0 e8       	ldi	r30, 0x80	; 128
    3258:	fe ef       	ldi	r31, 0xFE	; 254
    325a:	16 16       	cp	r1, r22
    325c:	17 06       	cpc	r1, r23
    325e:	e8 07       	cpc	r30, r24
    3260:	f9 07       	cpc	r31, r25
    3262:	c0 f0       	brcs	.+48     	; 0x3294 <__fp_cmp+0x46>
    3264:	12 16       	cp	r1, r18
    3266:	13 06       	cpc	r1, r19
    3268:	e4 07       	cpc	r30, r20
    326a:	f5 07       	cpc	r31, r21
    326c:	98 f0       	brcs	.+38     	; 0x3294 <__fp_cmp+0x46>
    326e:	62 1b       	sub	r22, r18
    3270:	73 0b       	sbc	r23, r19
    3272:	84 0b       	sbc	r24, r20
    3274:	95 0b       	sbc	r25, r21
    3276:	39 f4       	brne	.+14     	; 0x3286 <__fp_cmp+0x38>
    3278:	0a 26       	eor	r0, r26
    327a:	61 f0       	breq	.+24     	; 0x3294 <__fp_cmp+0x46>
    327c:	23 2b       	or	r18, r19
    327e:	24 2b       	or	r18, r20
    3280:	25 2b       	or	r18, r21
    3282:	21 f4       	brne	.+8      	; 0x328c <__fp_cmp+0x3e>
    3284:	08 95       	ret
    3286:	0a 26       	eor	r0, r26
    3288:	09 f4       	brne	.+2      	; 0x328c <__fp_cmp+0x3e>
    328a:	a1 40       	sbci	r26, 0x01	; 1
    328c:	a6 95       	lsr	r26
    328e:	8f ef       	ldi	r24, 0xFF	; 255
    3290:	81 1d       	adc	r24, r1
    3292:	81 1d       	adc	r24, r1
    3294:	08 95       	ret

00003296 <__fp_inf>:
    3296:	97 f9       	bld	r25, 7
    3298:	9f 67       	ori	r25, 0x7F	; 127
    329a:	80 e8       	ldi	r24, 0x80	; 128
    329c:	70 e0       	ldi	r23, 0x00	; 0
    329e:	60 e0       	ldi	r22, 0x00	; 0
    32a0:	08 95       	ret

000032a2 <__fp_nan>:
    32a2:	9f ef       	ldi	r25, 0xFF	; 255
    32a4:	80 ec       	ldi	r24, 0xC0	; 192
    32a6:	08 95       	ret

000032a8 <__fp_pscA>:
    32a8:	00 24       	eor	r0, r0
    32aa:	0a 94       	dec	r0
    32ac:	16 16       	cp	r1, r22
    32ae:	17 06       	cpc	r1, r23
    32b0:	18 06       	cpc	r1, r24
    32b2:	09 06       	cpc	r0, r25
    32b4:	08 95       	ret

000032b6 <__fp_pscB>:
    32b6:	00 24       	eor	r0, r0
    32b8:	0a 94       	dec	r0
    32ba:	12 16       	cp	r1, r18
    32bc:	13 06       	cpc	r1, r19
    32be:	14 06       	cpc	r1, r20
    32c0:	05 06       	cpc	r0, r21
    32c2:	08 95       	ret

000032c4 <__fp_round>:
    32c4:	09 2e       	mov	r0, r25
    32c6:	03 94       	inc	r0
    32c8:	00 0c       	add	r0, r0
    32ca:	11 f4       	brne	.+4      	; 0x32d0 <__fp_round+0xc>
    32cc:	88 23       	and	r24, r24
    32ce:	52 f0       	brmi	.+20     	; 0x32e4 <__fp_round+0x20>
    32d0:	bb 0f       	add	r27, r27
    32d2:	40 f4       	brcc	.+16     	; 0x32e4 <__fp_round+0x20>
    32d4:	bf 2b       	or	r27, r31
    32d6:	11 f4       	brne	.+4      	; 0x32dc <__fp_round+0x18>
    32d8:	60 ff       	sbrs	r22, 0
    32da:	04 c0       	rjmp	.+8      	; 0x32e4 <__fp_round+0x20>
    32dc:	6f 5f       	subi	r22, 0xFF	; 255
    32de:	7f 4f       	sbci	r23, 0xFF	; 255
    32e0:	8f 4f       	sbci	r24, 0xFF	; 255
    32e2:	9f 4f       	sbci	r25, 0xFF	; 255
    32e4:	08 95       	ret

000032e6 <__fp_split3>:
    32e6:	57 fd       	sbrc	r21, 7
    32e8:	90 58       	subi	r25, 0x80	; 128
    32ea:	44 0f       	add	r20, r20
    32ec:	55 1f       	adc	r21, r21
    32ee:	59 f0       	breq	.+22     	; 0x3306 <__fp_splitA+0x10>
    32f0:	5f 3f       	cpi	r21, 0xFF	; 255
    32f2:	71 f0       	breq	.+28     	; 0x3310 <__fp_splitA+0x1a>
    32f4:	47 95       	ror	r20

000032f6 <__fp_splitA>:
    32f6:	88 0f       	add	r24, r24
    32f8:	97 fb       	bst	r25, 7
    32fa:	99 1f       	adc	r25, r25
    32fc:	61 f0       	breq	.+24     	; 0x3316 <__fp_splitA+0x20>
    32fe:	9f 3f       	cpi	r25, 0xFF	; 255
    3300:	79 f0       	breq	.+30     	; 0x3320 <__fp_splitA+0x2a>
    3302:	87 95       	ror	r24
    3304:	08 95       	ret
    3306:	12 16       	cp	r1, r18
    3308:	13 06       	cpc	r1, r19
    330a:	14 06       	cpc	r1, r20
    330c:	55 1f       	adc	r21, r21
    330e:	f2 cf       	rjmp	.-28     	; 0x32f4 <__fp_split3+0xe>
    3310:	46 95       	lsr	r20
    3312:	f1 df       	rcall	.-30     	; 0x32f6 <__fp_splitA>
    3314:	08 c0       	rjmp	.+16     	; 0x3326 <__fp_splitA+0x30>
    3316:	16 16       	cp	r1, r22
    3318:	17 06       	cpc	r1, r23
    331a:	18 06       	cpc	r1, r24
    331c:	99 1f       	adc	r25, r25
    331e:	f1 cf       	rjmp	.-30     	; 0x3302 <__fp_splitA+0xc>
    3320:	86 95       	lsr	r24
    3322:	71 05       	cpc	r23, r1
    3324:	61 05       	cpc	r22, r1
    3326:	08 94       	sec
    3328:	08 95       	ret

0000332a <__fp_zero>:
    332a:	e8 94       	clt

0000332c <__fp_szero>:
    332c:	bb 27       	eor	r27, r27
    332e:	66 27       	eor	r22, r22
    3330:	77 27       	eor	r23, r23
    3332:	cb 01       	movw	r24, r22
    3334:	97 f9       	bld	r25, 7
    3336:	08 95       	ret

00003338 <__gesf2>:
    3338:	8a df       	rcall	.-236    	; 0x324e <__fp_cmp>
    333a:	08 f4       	brcc	.+2      	; 0x333e <__gesf2+0x6>
    333c:	8f ef       	ldi	r24, 0xFF	; 255
    333e:	08 95       	ret

00003340 <__mulsf3>:
    3340:	0b d0       	rcall	.+22     	; 0x3358 <__mulsf3x>
    3342:	c0 cf       	rjmp	.-128    	; 0x32c4 <__fp_round>
    3344:	b1 df       	rcall	.-158    	; 0x32a8 <__fp_pscA>
    3346:	28 f0       	brcs	.+10     	; 0x3352 <__mulsf3+0x12>
    3348:	b6 df       	rcall	.-148    	; 0x32b6 <__fp_pscB>
    334a:	18 f0       	brcs	.+6      	; 0x3352 <__mulsf3+0x12>
    334c:	95 23       	and	r25, r21
    334e:	09 f0       	breq	.+2      	; 0x3352 <__mulsf3+0x12>
    3350:	a2 cf       	rjmp	.-188    	; 0x3296 <__fp_inf>
    3352:	a7 cf       	rjmp	.-178    	; 0x32a2 <__fp_nan>
    3354:	11 24       	eor	r1, r1
    3356:	ea cf       	rjmp	.-44     	; 0x332c <__fp_szero>

00003358 <__mulsf3x>:
    3358:	c6 df       	rcall	.-116    	; 0x32e6 <__fp_split3>
    335a:	a0 f3       	brcs	.-24     	; 0x3344 <__mulsf3+0x4>

0000335c <__mulsf3_pse>:
    335c:	95 9f       	mul	r25, r21
    335e:	d1 f3       	breq	.-12     	; 0x3354 <__mulsf3+0x14>
    3360:	95 0f       	add	r25, r21
    3362:	50 e0       	ldi	r21, 0x00	; 0
    3364:	55 1f       	adc	r21, r21
    3366:	62 9f       	mul	r22, r18
    3368:	f0 01       	movw	r30, r0
    336a:	72 9f       	mul	r23, r18
    336c:	bb 27       	eor	r27, r27
    336e:	f0 0d       	add	r31, r0
    3370:	b1 1d       	adc	r27, r1
    3372:	63 9f       	mul	r22, r19
    3374:	aa 27       	eor	r26, r26
    3376:	f0 0d       	add	r31, r0
    3378:	b1 1d       	adc	r27, r1
    337a:	aa 1f       	adc	r26, r26
    337c:	64 9f       	mul	r22, r20
    337e:	66 27       	eor	r22, r22
    3380:	b0 0d       	add	r27, r0
    3382:	a1 1d       	adc	r26, r1
    3384:	66 1f       	adc	r22, r22
    3386:	82 9f       	mul	r24, r18
    3388:	22 27       	eor	r18, r18
    338a:	b0 0d       	add	r27, r0
    338c:	a1 1d       	adc	r26, r1
    338e:	62 1f       	adc	r22, r18
    3390:	73 9f       	mul	r23, r19
    3392:	b0 0d       	add	r27, r0
    3394:	a1 1d       	adc	r26, r1
    3396:	62 1f       	adc	r22, r18
    3398:	83 9f       	mul	r24, r19
    339a:	a0 0d       	add	r26, r0
    339c:	61 1d       	adc	r22, r1
    339e:	22 1f       	adc	r18, r18
    33a0:	74 9f       	mul	r23, r20
    33a2:	33 27       	eor	r19, r19
    33a4:	a0 0d       	add	r26, r0
    33a6:	61 1d       	adc	r22, r1
    33a8:	23 1f       	adc	r18, r19
    33aa:	84 9f       	mul	r24, r20
    33ac:	60 0d       	add	r22, r0
    33ae:	21 1d       	adc	r18, r1
    33b0:	82 2f       	mov	r24, r18
    33b2:	76 2f       	mov	r23, r22
    33b4:	6a 2f       	mov	r22, r26
    33b6:	11 24       	eor	r1, r1
    33b8:	9f 57       	subi	r25, 0x7F	; 127
    33ba:	50 40       	sbci	r21, 0x00	; 0
    33bc:	8a f0       	brmi	.+34     	; 0x33e0 <__mulsf3_pse+0x84>
    33be:	e1 f0       	breq	.+56     	; 0x33f8 <__mulsf3_pse+0x9c>
    33c0:	88 23       	and	r24, r24
    33c2:	4a f0       	brmi	.+18     	; 0x33d6 <__mulsf3_pse+0x7a>
    33c4:	ee 0f       	add	r30, r30
    33c6:	ff 1f       	adc	r31, r31
    33c8:	bb 1f       	adc	r27, r27
    33ca:	66 1f       	adc	r22, r22
    33cc:	77 1f       	adc	r23, r23
    33ce:	88 1f       	adc	r24, r24
    33d0:	91 50       	subi	r25, 0x01	; 1
    33d2:	50 40       	sbci	r21, 0x00	; 0
    33d4:	a9 f7       	brne	.-22     	; 0x33c0 <__mulsf3_pse+0x64>
    33d6:	9e 3f       	cpi	r25, 0xFE	; 254
    33d8:	51 05       	cpc	r21, r1
    33da:	70 f0       	brcs	.+28     	; 0x33f8 <__mulsf3_pse+0x9c>
    33dc:	5c cf       	rjmp	.-328    	; 0x3296 <__fp_inf>
    33de:	a6 cf       	rjmp	.-180    	; 0x332c <__fp_szero>
    33e0:	5f 3f       	cpi	r21, 0xFF	; 255
    33e2:	ec f3       	brlt	.-6      	; 0x33de <__mulsf3_pse+0x82>
    33e4:	98 3e       	cpi	r25, 0xE8	; 232
    33e6:	dc f3       	brlt	.-10     	; 0x33de <__mulsf3_pse+0x82>
    33e8:	86 95       	lsr	r24
    33ea:	77 95       	ror	r23
    33ec:	67 95       	ror	r22
    33ee:	b7 95       	ror	r27
    33f0:	f7 95       	ror	r31
    33f2:	e7 95       	ror	r30
    33f4:	9f 5f       	subi	r25, 0xFF	; 255
    33f6:	c1 f7       	brne	.-16     	; 0x33e8 <__mulsf3_pse+0x8c>
    33f8:	fe 2b       	or	r31, r30
    33fa:	88 0f       	add	r24, r24
    33fc:	91 1d       	adc	r25, r1
    33fe:	96 95       	lsr	r25
    3400:	87 95       	ror	r24
    3402:	97 f9       	bld	r25, 7
    3404:	08 95       	ret

00003406 <__udivmodsi4>:
    3406:	a1 e2       	ldi	r26, 0x21	; 33
    3408:	1a 2e       	mov	r1, r26
    340a:	aa 1b       	sub	r26, r26
    340c:	bb 1b       	sub	r27, r27
    340e:	fd 01       	movw	r30, r26
    3410:	0d c0       	rjmp	.+26     	; 0x342c <__udivmodsi4_ep>

00003412 <__udivmodsi4_loop>:
    3412:	aa 1f       	adc	r26, r26
    3414:	bb 1f       	adc	r27, r27
    3416:	ee 1f       	adc	r30, r30
    3418:	ff 1f       	adc	r31, r31
    341a:	a2 17       	cp	r26, r18
    341c:	b3 07       	cpc	r27, r19
    341e:	e4 07       	cpc	r30, r20
    3420:	f5 07       	cpc	r31, r21
    3422:	20 f0       	brcs	.+8      	; 0x342c <__udivmodsi4_ep>
    3424:	a2 1b       	sub	r26, r18
    3426:	b3 0b       	sbc	r27, r19
    3428:	e4 0b       	sbc	r30, r20
    342a:	f5 0b       	sbc	r31, r21

0000342c <__udivmodsi4_ep>:
    342c:	66 1f       	adc	r22, r22
    342e:	77 1f       	adc	r23, r23
    3430:	88 1f       	adc	r24, r24
    3432:	99 1f       	adc	r25, r25
    3434:	1a 94       	dec	r1
    3436:	69 f7       	brne	.-38     	; 0x3412 <__udivmodsi4_loop>
    3438:	60 95       	com	r22
    343a:	70 95       	com	r23
    343c:	80 95       	com	r24
    343e:	90 95       	com	r25
    3440:	9b 01       	movw	r18, r22
    3442:	ac 01       	movw	r20, r24
    3444:	bd 01       	movw	r22, r26
    3446:	cf 01       	movw	r24, r30
    3448:	08 95       	ret

0000344a <__tablejump2__>:
    344a:	ee 0f       	add	r30, r30
    344c:	ff 1f       	adc	r31, r31
    344e:	88 1f       	adc	r24, r24
    3450:	8b bf       	out	0x3b, r24	; 59
    3452:	07 90       	elpm	r0, Z+
    3454:	f6 91       	elpm	r31, Z
    3456:	e0 2d       	mov	r30, r0
    3458:	19 94       	eijmp

0000345a <memcpy_P>:
    345a:	fb 01       	movw	r30, r22
    345c:	dc 01       	movw	r26, r24
    345e:	02 c0       	rjmp	.+4      	; 0x3464 <memcpy_P+0xa>
    3460:	05 90       	lpm	r0, Z+
    3462:	0d 92       	st	X+, r0
    3464:	41 50       	subi	r20, 0x01	; 1
    3466:	50 40       	sbci	r21, 0x00	; 0
    3468:	d8 f7       	brcc	.-10     	; 0x3460 <memcpy_P+0x6>
    346a:	08 95       	ret

0000346c <memcmp>:
    346c:	fb 01       	movw	r30, r22
    346e:	dc 01       	movw	r26, r24
    3470:	04 c0       	rjmp	.+8      	; 0x347a <memcmp+0xe>
    3472:	8d 91       	ld	r24, X+
    3474:	01 90       	ld	r0, Z+
    3476:	80 19       	sub	r24, r0
    3478:	21 f4       	brne	.+8      	; 0x3482 <memcmp+0x16>
    347a:	41 50       	subi	r20, 0x01	; 1
    347c:	50 40       	sbci	r21, 0x00	; 0
    347e:	c8 f7       	brcc	.-14     	; 0x3472 <memcmp+0x6>
    3480:	88 1b       	sub	r24, r24
    3482:	99 0b       	sbc	r25, r25
    3484:	08 95       	ret

00003486 <strncpy>:
    3486:	fb 01       	movw	r30, r22
    3488:	dc 01       	movw	r26, r24
    348a:	41 50       	subi	r20, 0x01	; 1
    348c:	50 40       	sbci	r21, 0x00	; 0
    348e:	48 f0       	brcs	.+18     	; 0x34a2 <strncpy+0x1c>
    3490:	01 90       	ld	r0, Z+
    3492:	0d 92       	st	X+, r0
    3494:	00 20       	and	r0, r0
    3496:	c9 f7       	brne	.-14     	; 0x348a <strncpy+0x4>
    3498:	01 c0       	rjmp	.+2      	; 0x349c <strncpy+0x16>
    349a:	1d 92       	st	X+, r1
    349c:	41 50       	subi	r20, 0x01	; 1
    349e:	50 40       	sbci	r21, 0x00	; 0
    34a0:	e0 f7       	brcc	.-8      	; 0x349a <strncpy+0x14>
    34a2:	08 95       	ret

000034a4 <_exit>:
    34a4:	f8 94       	cli

000034a6 <__stop_program>:
    34a6:	ff cf       	rjmp	.-2      	; 0x34a6 <__stop_program>
