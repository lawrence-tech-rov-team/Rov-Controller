
RovController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f6  00800200  00002dee  00002e82  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002dee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000061f  008002f6  008002f6  00002f78  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002f78  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002fa8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000800  00000000  00000000  00002fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00013daf  00000000  00000000  000037e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004c49  00000000  00000000  00017597  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000050fe  00000000  00000000  0001c1e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001940  00000000  00000000  000212e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005b91  00000000  00000000  00022c20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008c64  00000000  00000000  000287b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000788  00000000  00000000  00031415  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4c c1       	rjmp	.+664    	; 0x29a <__ctors_end>
       2:	00 00       	nop
       4:	7b c1       	rjmp	.+758    	; 0x2fc <__bad_interrupt>
       6:	00 00       	nop
       8:	79 c1       	rjmp	.+754    	; 0x2fc <__bad_interrupt>
       a:	00 00       	nop
       c:	77 c1       	rjmp	.+750    	; 0x2fc <__bad_interrupt>
       e:	00 00       	nop
      10:	75 c1       	rjmp	.+746    	; 0x2fc <__bad_interrupt>
      12:	00 00       	nop
      14:	73 c1       	rjmp	.+742    	; 0x2fc <__bad_interrupt>
      16:	00 00       	nop
      18:	71 c1       	rjmp	.+738    	; 0x2fc <__bad_interrupt>
      1a:	00 00       	nop
      1c:	6f c1       	rjmp	.+734    	; 0x2fc <__bad_interrupt>
      1e:	00 00       	nop
      20:	6d c1       	rjmp	.+730    	; 0x2fc <__bad_interrupt>
      22:	00 00       	nop
      24:	6b c1       	rjmp	.+726    	; 0x2fc <__bad_interrupt>
      26:	00 00       	nop
      28:	69 c1       	rjmp	.+722    	; 0x2fc <__bad_interrupt>
      2a:	00 00       	nop
      2c:	67 c1       	rjmp	.+718    	; 0x2fc <__bad_interrupt>
      2e:	00 00       	nop
      30:	65 c1       	rjmp	.+714    	; 0x2fc <__bad_interrupt>
      32:	00 00       	nop
      34:	63 c1       	rjmp	.+710    	; 0x2fc <__bad_interrupt>
      36:	00 00       	nop
      38:	61 c1       	rjmp	.+706    	; 0x2fc <__bad_interrupt>
      3a:	00 00       	nop
      3c:	5f c1       	rjmp	.+702    	; 0x2fc <__bad_interrupt>
      3e:	00 00       	nop
      40:	5d c1       	rjmp	.+698    	; 0x2fc <__bad_interrupt>
      42:	00 00       	nop
      44:	5b c1       	rjmp	.+694    	; 0x2fc <__bad_interrupt>
      46:	00 00       	nop
      48:	59 c1       	rjmp	.+690    	; 0x2fc <__bad_interrupt>
      4a:	00 00       	nop
      4c:	57 c1       	rjmp	.+686    	; 0x2fc <__bad_interrupt>
      4e:	00 00       	nop
      50:	55 c1       	rjmp	.+682    	; 0x2fc <__bad_interrupt>
      52:	00 00       	nop
      54:	53 c1       	rjmp	.+678    	; 0x2fc <__bad_interrupt>
      56:	00 00       	nop
      58:	51 c1       	rjmp	.+674    	; 0x2fc <__bad_interrupt>
      5a:	00 00       	nop
      5c:	4f c1       	rjmp	.+670    	; 0x2fc <__bad_interrupt>
      5e:	00 00       	nop
      60:	4d c1       	rjmp	.+666    	; 0x2fc <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 95 0d 	jmp	0x1b2a	; 0x1b2a <__vector_25>
      68:	0c 94 d1 0d 	jmp	0x1ba2	; 0x1ba2 <__vector_26>
      6c:	47 c1       	rjmp	.+654    	; 0x2fc <__bad_interrupt>
      6e:	00 00       	nop
      70:	45 c1       	rjmp	.+650    	; 0x2fc <__bad_interrupt>
      72:	00 00       	nop
      74:	43 c1       	rjmp	.+646    	; 0x2fc <__bad_interrupt>
      76:	00 00       	nop
      78:	41 c1       	rjmp	.+642    	; 0x2fc <__bad_interrupt>
      7a:	00 00       	nop
      7c:	3f c1       	rjmp	.+638    	; 0x2fc <__bad_interrupt>
      7e:	00 00       	nop
      80:	3d c1       	rjmp	.+634    	; 0x2fc <__bad_interrupt>
      82:	00 00       	nop
      84:	3b c1       	rjmp	.+630    	; 0x2fc <__bad_interrupt>
      86:	00 00       	nop
      88:	39 c1       	rjmp	.+626    	; 0x2fc <__bad_interrupt>
      8a:	00 00       	nop
      8c:	37 c1       	rjmp	.+622    	; 0x2fc <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 1d 0e 	jmp	0x1c3a	; 0x1c3a <__vector_36>
      94:	0c 94 59 0e 	jmp	0x1cb2	; 0x1cb2 <__vector_37>
      98:	31 c1       	rjmp	.+610    	; 0x2fc <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 14 12 	jmp	0x2428	; 0x2428 <__vector_39>
      a0:	2d c1       	rjmp	.+602    	; 0x2fc <__bad_interrupt>
      a2:	00 00       	nop
      a4:	2b c1       	rjmp	.+598    	; 0x2fc <__bad_interrupt>
      a6:	00 00       	nop
      a8:	29 c1       	rjmp	.+594    	; 0x2fc <__bad_interrupt>
      aa:	00 00       	nop
      ac:	27 c1       	rjmp	.+590    	; 0x2fc <__bad_interrupt>
      ae:	00 00       	nop
      b0:	25 c1       	rjmp	.+586    	; 0x2fc <__bad_interrupt>
      b2:	00 00       	nop
      b4:	23 c1       	rjmp	.+582    	; 0x2fc <__bad_interrupt>
      b6:	00 00       	nop
      b8:	21 c1       	rjmp	.+578    	; 0x2fc <__bad_interrupt>
      ba:	00 00       	nop
      bc:	1f c1       	rjmp	.+574    	; 0x2fc <__bad_interrupt>
      be:	00 00       	nop
      c0:	1d c1       	rjmp	.+570    	; 0x2fc <__bad_interrupt>
      c2:	00 00       	nop
      c4:	1b c1       	rjmp	.+566    	; 0x2fc <__bad_interrupt>
      c6:	00 00       	nop
      c8:	19 c1       	rjmp	.+562    	; 0x2fc <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 a5 0e 	jmp	0x1d4a	; 0x1d4a <__vector_51>
      d0:	0c 94 e1 0e 	jmp	0x1dc2	; 0x1dc2 <__vector_52>
      d4:	13 c1       	rjmp	.+550    	; 0x2fc <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 2d 0f 	jmp	0x1e5a	; 0x1e5a <__vector_54>
      dc:	0c 94 69 0f 	jmp	0x1ed2	; 0x1ed2 <__vector_55>
      e0:	0d c1       	rjmp	.+538    	; 0x2fc <__bad_interrupt>
      e2:	00 00       	nop
      e4:	1a 13       	cpse	r17, r26
      e6:	1d 13       	cpse	r17, r29
      e8:	1d 13       	cpse	r17, r29
      ea:	1d 13       	cpse	r17, r29
      ec:	1d 13       	cpse	r17, r29
      ee:	1d 13       	cpse	r17, r29
      f0:	1d 13       	cpse	r17, r29
      f2:	1d 13       	cpse	r17, r29
      f4:	35 12       	cpse	r3, r21
      f6:	1d 13       	cpse	r17, r29
      f8:	1d 13       	cpse	r17, r29
      fa:	1d 13       	cpse	r17, r29
      fc:	1d 13       	cpse	r17, r29
      fe:	1d 13       	cpse	r17, r29
     100:	1d 13       	cpse	r17, r29
     102:	1d 13       	cpse	r17, r29
     104:	35 12       	cpse	r3, r21
     106:	1d 13       	cpse	r17, r29
     108:	1d 13       	cpse	r17, r29
     10a:	1d 13       	cpse	r17, r29
     10c:	1d 13       	cpse	r17, r29
     10e:	1d 13       	cpse	r17, r29
     110:	1d 13       	cpse	r17, r29
     112:	1d 13       	cpse	r17, r29
     114:	3d 12       	cpse	r3, r29
     116:	1d 13       	cpse	r17, r29
     118:	1d 13       	cpse	r17, r29
     11a:	1d 13       	cpse	r17, r29
     11c:	1d 13       	cpse	r17, r29
     11e:	1d 13       	cpse	r17, r29
     120:	1d 13       	cpse	r17, r29
     122:	1d 13       	cpse	r17, r29
     124:	62 12       	cpse	r6, r18
     126:	1d 13       	cpse	r17, r29
     128:	1d 13       	cpse	r17, r29
     12a:	1d 13       	cpse	r17, r29
     12c:	1d 13       	cpse	r17, r29
     12e:	1d 13       	cpse	r17, r29
     130:	1d 13       	cpse	r17, r29
     132:	1d 13       	cpse	r17, r29
     134:	3d 12       	cpse	r3, r29
     136:	1d 13       	cpse	r17, r29
     138:	1d 13       	cpse	r17, r29
     13a:	1d 13       	cpse	r17, r29
     13c:	1d 13       	cpse	r17, r29
     13e:	1d 13       	cpse	r17, r29
     140:	1d 13       	cpse	r17, r29
     142:	1d 13       	cpse	r17, r29
     144:	67 12       	cpse	r6, r23
     146:	1d 13       	cpse	r17, r29
     148:	1d 13       	cpse	r17, r29
     14a:	1d 13       	cpse	r17, r29
     14c:	1d 13       	cpse	r17, r29
     14e:	1d 13       	cpse	r17, r29
     150:	1d 13       	cpse	r17, r29
     152:	1d 13       	cpse	r17, r29
     154:	6c 12       	cpse	r6, r28
     156:	1d 13       	cpse	r17, r29
     158:	1d 13       	cpse	r17, r29
     15a:	1d 13       	cpse	r17, r29
     15c:	1d 13       	cpse	r17, r29
     15e:	1d 13       	cpse	r17, r29
     160:	1d 13       	cpse	r17, r29
     162:	1d 13       	cpse	r17, r29
     164:	7d 12       	cpse	r7, r29
     166:	1d 13       	cpse	r17, r29
     168:	1d 13       	cpse	r17, r29
     16a:	1d 13       	cpse	r17, r29
     16c:	1d 13       	cpse	r17, r29
     16e:	1d 13       	cpse	r17, r29
     170:	1d 13       	cpse	r17, r29
     172:	1d 13       	cpse	r17, r29
     174:	a6 12       	cpse	r10, r22
     176:	1d 13       	cpse	r17, r29
     178:	1d 13       	cpse	r17, r29
     17a:	1d 13       	cpse	r17, r29
     17c:	1d 13       	cpse	r17, r29
     17e:	1d 13       	cpse	r17, r29
     180:	1d 13       	cpse	r17, r29
     182:	1d 13       	cpse	r17, r29
     184:	71 12       	cpse	r7, r17
     186:	1d 13       	cpse	r17, r29
     188:	1d 13       	cpse	r17, r29
     18a:	1d 13       	cpse	r17, r29
     18c:	1d 13       	cpse	r17, r29
     18e:	1d 13       	cpse	r17, r29
     190:	1d 13       	cpse	r17, r29
     192:	1d 13       	cpse	r17, r29
     194:	8b 12       	cpse	r8, r27
     196:	1d 13       	cpse	r17, r29
     198:	1d 13       	cpse	r17, r29
     19a:	1d 13       	cpse	r17, r29
     19c:	1d 13       	cpse	r17, r29
     19e:	1d 13       	cpse	r17, r29
     1a0:	1d 13       	cpse	r17, r29
     1a2:	1d 13       	cpse	r17, r29
     1a4:	a8 12       	cpse	r10, r24
     1a6:	1d 13       	cpse	r17, r29
     1a8:	1d 13       	cpse	r17, r29
     1aa:	1d 13       	cpse	r17, r29
     1ac:	1d 13       	cpse	r17, r29
     1ae:	1d 13       	cpse	r17, r29
     1b0:	1d 13       	cpse	r17, r29
     1b2:	1d 13       	cpse	r17, r29
     1b4:	a8 12       	cpse	r10, r24
     1b6:	1d 13       	cpse	r17, r29
     1b8:	1d 13       	cpse	r17, r29
     1ba:	1d 13       	cpse	r17, r29
     1bc:	1d 13       	cpse	r17, r29
     1be:	1d 13       	cpse	r17, r29
     1c0:	1d 13       	cpse	r17, r29
     1c2:	1d 13       	cpse	r17, r29
     1c4:	a8 12       	cpse	r10, r24
     1c6:	1d 13       	cpse	r17, r29
     1c8:	1d 13       	cpse	r17, r29
     1ca:	1d 13       	cpse	r17, r29
     1cc:	1d 13       	cpse	r17, r29
     1ce:	1d 13       	cpse	r17, r29
     1d0:	1d 13       	cpse	r17, r29
     1d2:	1d 13       	cpse	r17, r29
     1d4:	a8 12       	cpse	r10, r24
     1d6:	1d 13       	cpse	r17, r29
     1d8:	1d 13       	cpse	r17, r29
     1da:	1d 13       	cpse	r17, r29
     1dc:	1d 13       	cpse	r17, r29
     1de:	1d 13       	cpse	r17, r29
     1e0:	1d 13       	cpse	r17, r29
     1e2:	1d 13       	cpse	r17, r29
     1e4:	b1 12       	cpse	r11, r17
     1e6:	1d 13       	cpse	r17, r29
     1e8:	1d 13       	cpse	r17, r29
     1ea:	1d 13       	cpse	r17, r29
     1ec:	1d 13       	cpse	r17, r29
     1ee:	1d 13       	cpse	r17, r29
     1f0:	1d 13       	cpse	r17, r29
     1f2:	1d 13       	cpse	r17, r29
     1f4:	e1 12       	cpse	r14, r17
     1f6:	1d 13       	cpse	r17, r29
     1f8:	1d 13       	cpse	r17, r29
     1fa:	1d 13       	cpse	r17, r29
     1fc:	1d 13       	cpse	r17, r29
     1fe:	1d 13       	cpse	r17, r29
     200:	1d 13       	cpse	r17, r29
     202:	1d 13       	cpse	r17, r29
     204:	b1 12       	cpse	r11, r17
     206:	1d 13       	cpse	r17, r29
     208:	1d 13       	cpse	r17, r29
     20a:	1d 13       	cpse	r17, r29
     20c:	1d 13       	cpse	r17, r29
     20e:	1d 13       	cpse	r17, r29
     210:	1d 13       	cpse	r17, r29
     212:	1d 13       	cpse	r17, r29
     214:	e1 12       	cpse	r14, r17
     216:	1d 13       	cpse	r17, r29
     218:	1d 13       	cpse	r17, r29
     21a:	1d 13       	cpse	r17, r29
     21c:	1d 13       	cpse	r17, r29
     21e:	1d 13       	cpse	r17, r29
     220:	1d 13       	cpse	r17, r29
     222:	1d 13       	cpse	r17, r29
     224:	c9 12       	cpse	r12, r25
     226:	1d 13       	cpse	r17, r29
     228:	1d 13       	cpse	r17, r29
     22a:	1d 13       	cpse	r17, r29
     22c:	1d 13       	cpse	r17, r29
     22e:	1d 13       	cpse	r17, r29
     230:	1d 13       	cpse	r17, r29
     232:	1d 13       	cpse	r17, r29
     234:	e5 12       	cpse	r14, r21
     236:	1d 13       	cpse	r17, r29
     238:	1d 13       	cpse	r17, r29
     23a:	1d 13       	cpse	r17, r29
     23c:	1d 13       	cpse	r17, r29
     23e:	1d 13       	cpse	r17, r29
     240:	1d 13       	cpse	r17, r29
     242:	1d 13       	cpse	r17, r29
     244:	e5 12       	cpse	r14, r21
     246:	1d 13       	cpse	r17, r29
     248:	1d 13       	cpse	r17, r29
     24a:	1d 13       	cpse	r17, r29
     24c:	1d 13       	cpse	r17, r29
     24e:	1d 13       	cpse	r17, r29
     250:	1d 13       	cpse	r17, r29
     252:	1d 13       	cpse	r17, r29
     254:	fa 12       	cpse	r15, r26
     256:	1d 13       	cpse	r17, r29
     258:	1d 13       	cpse	r17, r29
     25a:	1d 13       	cpse	r17, r29
     25c:	1d 13       	cpse	r17, r29
     25e:	1d 13       	cpse	r17, r29
     260:	1d 13       	cpse	r17, r29
     262:	1d 13       	cpse	r17, r29
     264:	14 13       	cpse	r17, r20
     266:	1d 13       	cpse	r17, r29
     268:	1d 13       	cpse	r17, r29
     26a:	1d 13       	cpse	r17, r29
     26c:	1d 13       	cpse	r17, r29
     26e:	1d 13       	cpse	r17, r29
     270:	1d 13       	cpse	r17, r29
     272:	1d 13       	cpse	r17, r29
     274:	14 13       	cpse	r17, r20

00000276 <__trampolines_end>:
     276:	45 00       	.word	0x0045	; ????
     278:	00 82       	st	Z, r0
     27a:	00 00       	nop
     27c:	40 00       	.word	0x0040	; ????
     27e:	20 00       	Address 0x0000027e is out of bounds.
.word	0xffff	; ????

0000027f <_ZL9arpreqhdr>:
     27f:	00 01 08 00 06 04 00 01 00                          .........

00000288 <__ctors_start>:
     288:	4a 05       	cpc	r20, r10
     28a:	fa 0d       	add	r31, r10
     28c:	82 0e       	add	r8, r18
     28e:	0a 0f       	add	r16, r26
     290:	92 0f       	add	r25, r18
     292:	30 13       	cpse	r19, r16
     294:	a5 13       	cpse	r26, r21
     296:	d4 14       	cp	r13, r4
     298:	dc 14       	cp	r13, r12

0000029a <__ctors_end>:
     29a:	11 24       	eor	r1, r1
     29c:	1f be       	out	0x3f, r1	; 63
     29e:	cf ef       	ldi	r28, 0xFF	; 255
     2a0:	d1 e2       	ldi	r29, 0x21	; 33
     2a2:	de bf       	out	0x3e, r29	; 62
     2a4:	cd bf       	out	0x3d, r28	; 61
     2a6:	00 e0       	ldi	r16, 0x00	; 0
     2a8:	0c bf       	out	0x3c, r16	; 60

000002aa <__do_copy_data>:
     2aa:	12 e0       	ldi	r17, 0x02	; 2
     2ac:	a0 e0       	ldi	r26, 0x00	; 0
     2ae:	b2 e0       	ldi	r27, 0x02	; 2
     2b0:	ee ee       	ldi	r30, 0xEE	; 238
     2b2:	fd e2       	ldi	r31, 0x2D	; 45
     2b4:	00 e0       	ldi	r16, 0x00	; 0
     2b6:	0b bf       	out	0x3b, r16	; 59
     2b8:	02 c0       	rjmp	.+4      	; 0x2be <__do_copy_data+0x14>
     2ba:	07 90       	elpm	r0, Z+
     2bc:	0d 92       	st	X+, r0
     2be:	a6 3f       	cpi	r26, 0xF6	; 246
     2c0:	b1 07       	cpc	r27, r17
     2c2:	d9 f7       	brne	.-10     	; 0x2ba <__do_copy_data+0x10>

000002c4 <__do_clear_bss>:
     2c4:	29 e0       	ldi	r18, 0x09	; 9
     2c6:	a6 ef       	ldi	r26, 0xF6	; 246
     2c8:	b2 e0       	ldi	r27, 0x02	; 2
     2ca:	01 c0       	rjmp	.+2      	; 0x2ce <.do_clear_bss_start>

000002cc <.do_clear_bss_loop>:
     2cc:	1d 92       	st	X+, r1

000002ce <.do_clear_bss_start>:
     2ce:	a5 31       	cpi	r26, 0x15	; 21
     2d0:	b2 07       	cpc	r27, r18
     2d2:	e1 f7       	brne	.-8      	; 0x2cc <.do_clear_bss_loop>

000002d4 <__do_global_ctors>:
     2d4:	11 e0       	ldi	r17, 0x01	; 1
     2d6:	cd e4       	ldi	r28, 0x4D	; 77
     2d8:	d1 e0       	ldi	r29, 0x01	; 1
     2da:	00 e0       	ldi	r16, 0x00	; 0
     2dc:	06 c0       	rjmp	.+12     	; 0x2ea <__do_global_ctors+0x16>
     2de:	21 97       	sbiw	r28, 0x01	; 1
     2e0:	01 09       	sbc	r16, r1
     2e2:	80 2f       	mov	r24, r16
     2e4:	fe 01       	movw	r30, r28
     2e6:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <__tablejump2__>
     2ea:	c4 34       	cpi	r28, 0x44	; 68
     2ec:	d1 07       	cpc	r29, r17
     2ee:	80 e0       	ldi	r24, 0x00	; 0
     2f0:	08 07       	cpc	r16, r24
     2f2:	a9 f7       	brne	.-22     	; 0x2de <__do_global_ctors+0xa>
     2f4:	0e 94 10 0c 	call	0x1820	; 0x1820 <main>
     2f8:	0c 94 f5 16 	jmp	0x2dea	; 0x2dea <_exit>

000002fc <__bad_interrupt>:
     2fc:	81 ce       	rjmp	.-766    	; 0x0 <__vectors>

000002fe <_ZN15Adafruit_Sensor15enableAutoRangeEb>:

    setMode(lastMode);
    return true;
  }
  return false;
}
     2fe:	08 95       	ret

00000300 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>:
     300:	0f 93       	push	r16
     302:	1f 93       	push	r17
     304:	cf 93       	push	r28
     306:	df 93       	push	r29
     308:	8c 01       	movw	r16, r24
     30a:	eb 01       	movw	r28, r22
     30c:	88 e2       	ldi	r24, 0x28	; 40
     30e:	fb 01       	movw	r30, r22
     310:	11 92       	st	Z+, r1
     312:	8a 95       	dec	r24
     314:	e9 f7       	brne	.-6      	; 0x310 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x10>
     316:	4b e0       	ldi	r20, 0x0B	; 11
     318:	50 e0       	ldi	r21, 0x00	; 0
     31a:	64 e1       	ldi	r22, 0x14	; 20
     31c:	72 e0       	ldi	r23, 0x02	; 2
     31e:	ce 01       	movw	r24, r28
     320:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <strncpy>
     324:	1b 86       	std	Y+11, r1	; 0x0b
     326:	81 e0       	ldi	r24, 0x01	; 1
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	a0 e0       	ldi	r26, 0x00	; 0
     32c:	b0 e0       	ldi	r27, 0x00	; 0
     32e:	8c 87       	std	Y+12, r24	; 0x0c
     330:	9d 87       	std	Y+13, r25	; 0x0d
     332:	ae 87       	std	Y+14, r26	; 0x0e
     334:	bf 87       	std	Y+15, r27	; 0x0f
     336:	f8 01       	movw	r30, r16
     338:	86 81       	ldd	r24, Z+6	; 0x06
     33a:	97 81       	ldd	r25, Z+7	; 0x07
     33c:	a0 85       	ldd	r26, Z+8	; 0x08
     33e:	b1 85       	ldd	r27, Z+9	; 0x09
     340:	88 8b       	std	Y+16, r24	; 0x10
     342:	99 8b       	std	Y+17, r25	; 0x11
     344:	aa 8b       	std	Y+18, r26	; 0x12
     346:	bb 8b       	std	Y+19, r27	; 0x13
     348:	83 e0       	ldi	r24, 0x03	; 3
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	a0 e0       	ldi	r26, 0x00	; 0
     34e:	b0 e0       	ldi	r27, 0x00	; 0
     350:	8c 8b       	std	Y+20, r24	; 0x14
     352:	9d 8b       	std	Y+21, r25	; 0x15
     354:	ae 8b       	std	Y+22, r26	; 0x16
     356:	bf 8b       	std	Y+23, r27	; 0x17
     358:	1c a2       	std	Y+36, r1	; 0x24
     35a:	1d a2       	std	Y+37, r1	; 0x25
     35c:	1e a2       	std	Y+38, r1	; 0x26
     35e:	1f a2       	std	Y+39, r1	; 0x27
     360:	18 8e       	std	Y+24, r1	; 0x18
     362:	19 8e       	std	Y+25, r1	; 0x19
     364:	1a 8e       	std	Y+26, r1	; 0x1a
     366:	1b 8e       	std	Y+27, r1	; 0x1b
     368:	1c 8e       	std	Y+28, r1	; 0x1c
     36a:	1d 8e       	std	Y+29, r1	; 0x1d
     36c:	1e 8e       	std	Y+30, r1	; 0x1e
     36e:	1f 8e       	std	Y+31, r1	; 0x1f
     370:	8a e0       	ldi	r24, 0x0A	; 10
     372:	97 ed       	ldi	r25, 0xD7	; 215
     374:	a3 e2       	ldi	r26, 0x23	; 35
     376:	bc e3       	ldi	r27, 0x3C	; 60
     378:	88 a3       	std	Y+32, r24	; 0x20
     37a:	99 a3       	std	Y+33, r25	; 0x21
     37c:	aa a3       	std	Y+34, r26	; 0x22
     37e:	bb a3       	std	Y+35, r27	; 0x23
     380:	df 91       	pop	r29
     382:	cf 91       	pop	r28
     384:	1f 91       	pop	r17
     386:	0f 91       	pop	r16
     388:	08 95       	ret

0000038a <_ZN15Adafruit_BNO055C1ElhP7TwoWire>:
     38a:	0f 93       	push	r16
     38c:	1f 93       	push	r17
     38e:	fc 01       	movw	r30, r24
     390:	8f e1       	ldi	r24, 0x1F	; 31
     392:	92 e0       	ldi	r25, 0x02	; 2
     394:	91 83       	std	Z+1, r25	; 0x01
     396:	80 83       	st	Z, r24
     398:	46 83       	std	Z+6, r20	; 0x06
     39a:	57 83       	std	Z+7, r21	; 0x07
     39c:	60 87       	std	Z+8, r22	; 0x08
     39e:	71 87       	std	Z+9, r23	; 0x09
     3a0:	23 83       	std	Z+3, r18	; 0x03
     3a2:	15 83       	std	Z+5, r17	; 0x05
     3a4:	04 83       	std	Z+4, r16	; 0x04
     3a6:	1f 91       	pop	r17
     3a8:	0f 91       	pop	r16
     3aa:	08 95       	ret

000003ac <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>:
     3ac:	0f 93       	push	r16
     3ae:	1f 93       	push	r17
     3b0:	cf 93       	push	r28
     3b2:	df 93       	push	r29
     3b4:	ec 01       	movw	r28, r24
     3b6:	06 2f       	mov	r16, r22
     3b8:	14 2f       	mov	r17, r20
     3ba:	6b 81       	ldd	r22, Y+3	; 0x03
     3bc:	8c 81       	ldd	r24, Y+4	; 0x04
     3be:	9d 81       	ldd	r25, Y+5	; 0x05
     3c0:	0e 94 a9 10 	call	0x2152	; 0x2152 <_ZN7TwoWire17beginTransmissionEh>
     3c4:	8c 81       	ldd	r24, Y+4	; 0x04
     3c6:	9d 81       	ldd	r25, Y+5	; 0x05
     3c8:	dc 01       	movw	r26, r24
     3ca:	ed 91       	ld	r30, X+
     3cc:	fc 91       	ld	r31, X
     3ce:	01 90       	ld	r0, Z+
     3d0:	f0 81       	ld	r31, Z
     3d2:	e0 2d       	mov	r30, r0
     3d4:	60 2f       	mov	r22, r16
     3d6:	19 95       	eicall
     3d8:	8c 81       	ldd	r24, Y+4	; 0x04
     3da:	9d 81       	ldd	r25, Y+5	; 0x05
     3dc:	dc 01       	movw	r26, r24
     3de:	ed 91       	ld	r30, X+
     3e0:	fc 91       	ld	r31, X
     3e2:	01 90       	ld	r0, Z+
     3e4:	f0 81       	ld	r31, Z
     3e6:	e0 2d       	mov	r30, r0
     3e8:	61 2f       	mov	r22, r17
     3ea:	19 95       	eicall
     3ec:	8c 81       	ldd	r24, Y+4	; 0x04
     3ee:	9d 81       	ldd	r25, Y+5	; 0x05
     3f0:	0e 94 8e 11 	call	0x231c	; 0x231c <_ZN7TwoWire15endTransmissionEv>
     3f4:	81 e0       	ldi	r24, 0x01	; 1
     3f6:	df 91       	pop	r29
     3f8:	cf 91       	pop	r28
     3fa:	1f 91       	pop	r17
     3fc:	0f 91       	pop	r16
     3fe:	08 95       	ret

00000400 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>:
     400:	46 2f       	mov	r20, r22
     402:	fc 01       	movw	r30, r24
     404:	62 87       	std	Z+10, r22	; 0x0a
     406:	6d e3       	ldi	r22, 0x3D	; 61
     408:	d1 df       	rcall	.-94     	; 0x3ac <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     40a:	ff ef       	ldi	r31, 0xFF	; 255
     40c:	26 e7       	ldi	r18, 0x76	; 118
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	f1 50       	subi	r31, 0x01	; 1
     412:	20 40       	sbci	r18, 0x00	; 0
     414:	80 40       	sbci	r24, 0x00	; 0
     416:	e1 f7       	brne	.-8      	; 0x410 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE+0x10>
     418:	00 c0       	rjmp	.+0      	; 0x41a <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE+0x1a>
     41a:	00 00       	nop
     41c:	08 95       	ret

0000041e <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>:
     41e:	1f 93       	push	r17
     420:	cf 93       	push	r28
     422:	df 93       	push	r29
     424:	ec 01       	movw	r28, r24
     426:	16 2f       	mov	r17, r22
     428:	6b 81       	ldd	r22, Y+3	; 0x03
     42a:	8c 81       	ldd	r24, Y+4	; 0x04
     42c:	9d 81       	ldd	r25, Y+5	; 0x05
     42e:	0e 94 a9 10 	call	0x2152	; 0x2152 <_ZN7TwoWire17beginTransmissionEh>
     432:	8c 81       	ldd	r24, Y+4	; 0x04
     434:	9d 81       	ldd	r25, Y+5	; 0x05
     436:	dc 01       	movw	r26, r24
     438:	ed 91       	ld	r30, X+
     43a:	fc 91       	ld	r31, X
     43c:	01 90       	ld	r0, Z+
     43e:	f0 81       	ld	r31, Z
     440:	e0 2d       	mov	r30, r0
     442:	61 2f       	mov	r22, r17
     444:	19 95       	eicall
     446:	8c 81       	ldd	r24, Y+4	; 0x04
     448:	9d 81       	ldd	r25, Y+5	; 0x05
     44a:	0e 94 8e 11 	call	0x231c	; 0x231c <_ZN7TwoWire15endTransmissionEv>
     44e:	41 e0       	ldi	r20, 0x01	; 1
     450:	6b 81       	ldd	r22, Y+3	; 0x03
     452:	8c 81       	ldd	r24, Y+4	; 0x04
     454:	9d 81       	ldd	r25, Y+5	; 0x05
     456:	0e 94 8b 11 	call	0x2316	; 0x2316 <_ZN7TwoWire11requestFromEhh>
     45a:	8c 81       	ldd	r24, Y+4	; 0x04
     45c:	9d 81       	ldd	r25, Y+5	; 0x05
     45e:	dc 01       	movw	r26, r24
     460:	ed 91       	ld	r30, X+
     462:	fc 91       	ld	r31, X
     464:	02 84       	ldd	r0, Z+10	; 0x0a
     466:	f3 85       	ldd	r31, Z+11	; 0x0b
     468:	e0 2d       	mov	r30, r0
     46a:	19 95       	eicall
     46c:	df 91       	pop	r29
     46e:	cf 91       	pop	r28
     470:	1f 91       	pop	r17
     472:	08 95       	ret

00000474 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>:
     474:	1f 93       	push	r17
     476:	cf 93       	push	r28
     478:	df 93       	push	r29
     47a:	ec 01       	movw	r28, r24
     47c:	16 2f       	mov	r17, r22
     47e:	8c 81       	ldd	r24, Y+4	; 0x04
     480:	9d 81       	ldd	r25, Y+5	; 0x05
     482:	0e 94 19 10 	call	0x2032	; 0x2032 <_ZN7TwoWire5beginEv>
     486:	60 e0       	ldi	r22, 0x00	; 0
     488:	ce 01       	movw	r24, r28
     48a:	c9 df       	rcall	.-110    	; 0x41e <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
     48c:	80 3a       	cpi	r24, 0xA0	; 160
     48e:	79 f0       	breq	.+30     	; 0x4ae <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x3a>
     490:	2f ef       	ldi	r18, 0xFF	; 255
     492:	83 ed       	ldi	r24, 0xD3	; 211
     494:	90 e3       	ldi	r25, 0x30	; 48
     496:	21 50       	subi	r18, 0x01	; 1
     498:	80 40       	sbci	r24, 0x00	; 0
     49a:	90 40       	sbci	r25, 0x00	; 0
     49c:	e1 f7       	brne	.-8      	; 0x496 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x22>
     49e:	00 c0       	rjmp	.+0      	; 0x4a0 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x2c>
     4a0:	00 00       	nop
     4a2:	60 e0       	ldi	r22, 0x00	; 0
     4a4:	ce 01       	movw	r24, r28
     4a6:	bb df       	rcall	.-138    	; 0x41e <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
     4a8:	80 3a       	cpi	r24, 0xA0	; 160
     4aa:	09 f0       	breq	.+2      	; 0x4ae <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x3a>
     4ac:	4b c0       	rjmp	.+150    	; 0x544 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xd0>
     4ae:	60 e0       	ldi	r22, 0x00	; 0
     4b0:	ce 01       	movw	r24, r28
     4b2:	a6 df       	rcall	.-180    	; 0x400 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
     4b4:	40 e2       	ldi	r20, 0x20	; 32
     4b6:	6f e3       	ldi	r22, 0x3F	; 63
     4b8:	ce 01       	movw	r24, r28
     4ba:	78 df       	rcall	.-272    	; 0x3ac <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     4bc:	2f ef       	ldi	r18, 0xFF	; 255
     4be:	86 e7       	ldi	r24, 0x76	; 118
     4c0:	91 e0       	ldi	r25, 0x01	; 1
     4c2:	21 50       	subi	r18, 0x01	; 1
     4c4:	80 40       	sbci	r24, 0x00	; 0
     4c6:	90 40       	sbci	r25, 0x00	; 0
     4c8:	e1 f7       	brne	.-8      	; 0x4c2 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x4e>
     4ca:	00 c0       	rjmp	.+0      	; 0x4cc <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x58>
     4cc:	00 00       	nop
     4ce:	60 e0       	ldi	r22, 0x00	; 0
     4d0:	ce 01       	movw	r24, r28
     4d2:	a5 df       	rcall	.-182    	; 0x41e <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
     4d4:	80 3a       	cpi	r24, 0xA0	; 160
     4d6:	39 f0       	breq	.+14     	; 0x4e6 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x72>
     4d8:	8f e3       	ldi	r24, 0x3F	; 63
     4da:	9c e9       	ldi	r25, 0x9C	; 156
     4dc:	01 97       	sbiw	r24, 0x01	; 1
     4de:	f1 f7       	brne	.-4      	; 0x4dc <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x68>
     4e0:	00 c0       	rjmp	.+0      	; 0x4e2 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x6e>
     4e2:	00 00       	nop
     4e4:	f4 cf       	rjmp	.-24     	; 0x4ce <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x5a>
     4e6:	9f ef       	ldi	r25, 0xFF	; 255
     4e8:	20 e7       	ldi	r18, 0x70	; 112
     4ea:	82 e0       	ldi	r24, 0x02	; 2
     4ec:	91 50       	subi	r25, 0x01	; 1
     4ee:	20 40       	sbci	r18, 0x00	; 0
     4f0:	80 40       	sbci	r24, 0x00	; 0
     4f2:	e1 f7       	brne	.-8      	; 0x4ec <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x78>
     4f4:	00 c0       	rjmp	.+0      	; 0x4f6 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x82>
     4f6:	00 00       	nop
     4f8:	40 e0       	ldi	r20, 0x00	; 0
     4fa:	6e e3       	ldi	r22, 0x3E	; 62
     4fc:	ce 01       	movw	r24, r28
     4fe:	56 df       	rcall	.-340    	; 0x3ac <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     500:	8f e3       	ldi	r24, 0x3F	; 63
     502:	9c e9       	ldi	r25, 0x9C	; 156
     504:	01 97       	sbiw	r24, 0x01	; 1
     506:	f1 f7       	brne	.-4      	; 0x504 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x90>
     508:	00 c0       	rjmp	.+0      	; 0x50a <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x96>
     50a:	00 00       	nop
     50c:	40 e0       	ldi	r20, 0x00	; 0
     50e:	67 e0       	ldi	r22, 0x07	; 7
     510:	ce 01       	movw	r24, r28
     512:	4c df       	rcall	.-360    	; 0x3ac <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     514:	40 e0       	ldi	r20, 0x00	; 0
     516:	6f e3       	ldi	r22, 0x3F	; 63
     518:	ce 01       	movw	r24, r28
     51a:	48 df       	rcall	.-368    	; 0x3ac <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     51c:	8f e3       	ldi	r24, 0x3F	; 63
     51e:	9c e9       	ldi	r25, 0x9C	; 156
     520:	01 97       	sbiw	r24, 0x01	; 1
     522:	f1 f7       	brne	.-4      	; 0x520 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xac>
     524:	00 c0       	rjmp	.+0      	; 0x526 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xb2>
     526:	00 00       	nop
     528:	61 2f       	mov	r22, r17
     52a:	ce 01       	movw	r24, r28
     52c:	69 df       	rcall	.-302    	; 0x400 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
     52e:	9f ef       	ldi	r25, 0xFF	; 255
     530:	29 ef       	ldi	r18, 0xF9	; 249
     532:	80 e0       	ldi	r24, 0x00	; 0
     534:	91 50       	subi	r25, 0x01	; 1
     536:	20 40       	sbci	r18, 0x00	; 0
     538:	80 40       	sbci	r24, 0x00	; 0
     53a:	e1 f7       	brne	.-8      	; 0x534 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xc0>
     53c:	00 c0       	rjmp	.+0      	; 0x53e <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xca>
     53e:	00 00       	nop
     540:	81 e0       	ldi	r24, 0x01	; 1
     542:	01 c0       	rjmp	.+2      	; 0x546 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xd2>
     544:	80 e0       	ldi	r24, 0x00	; 0
     546:	df 91       	pop	r29
     548:	cf 91       	pop	r28
     54a:	1f 91       	pop	r17
     54c:	08 95       	ret

0000054e <_ZN15Adafruit_BNO0557getTempEv>:
     54e:	64 e3       	ldi	r22, 0x34	; 52
     550:	66 cf       	rjmp	.-308    	; 0x41e <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
     552:	08 95       	ret

00000554 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>:
     554:	cf 92       	push	r12
     556:	df 92       	push	r13
     558:	ef 92       	push	r14
     55a:	ff 92       	push	r15
     55c:	0f 93       	push	r16
     55e:	1f 93       	push	r17
     560:	cf 93       	push	r28
     562:	df 93       	push	r29
     564:	7c 01       	movw	r14, r24
     566:	c6 2f       	mov	r28, r22
     568:	6a 01       	movw	r12, r20
     56a:	12 2f       	mov	r17, r18
     56c:	dc 01       	movw	r26, r24
     56e:	13 96       	adiw	r26, 0x03	; 3
     570:	6c 91       	ld	r22, X
     572:	13 97       	sbiw	r26, 0x03	; 3
     574:	14 96       	adiw	r26, 0x04	; 4
     576:	8d 91       	ld	r24, X+
     578:	9c 91       	ld	r25, X
     57a:	15 97       	sbiw	r26, 0x05	; 5
     57c:	0e 94 a9 10 	call	0x2152	; 0x2152 <_ZN7TwoWire17beginTransmissionEh>
     580:	f7 01       	movw	r30, r14
     582:	84 81       	ldd	r24, Z+4	; 0x04
     584:	95 81       	ldd	r25, Z+5	; 0x05
     586:	dc 01       	movw	r26, r24
     588:	ed 91       	ld	r30, X+
     58a:	fc 91       	ld	r31, X
     58c:	01 90       	ld	r0, Z+
     58e:	f0 81       	ld	r31, Z
     590:	e0 2d       	mov	r30, r0
     592:	6c 2f       	mov	r22, r28
     594:	19 95       	eicall
     596:	f7 01       	movw	r30, r14
     598:	84 81       	ldd	r24, Z+4	; 0x04
     59a:	95 81       	ldd	r25, Z+5	; 0x05
     59c:	0e 94 8e 11 	call	0x231c	; 0x231c <_ZN7TwoWire15endTransmissionEv>
     5a0:	41 2f       	mov	r20, r17
     5a2:	d7 01       	movw	r26, r14
     5a4:	13 96       	adiw	r26, 0x03	; 3
     5a6:	6c 91       	ld	r22, X
     5a8:	13 97       	sbiw	r26, 0x03	; 3
     5aa:	14 96       	adiw	r26, 0x04	; 4
     5ac:	8d 91       	ld	r24, X+
     5ae:	9c 91       	ld	r25, X
     5b0:	15 97       	sbiw	r26, 0x05	; 5
     5b2:	0e 94 8b 11 	call	0x2316	; 0x2316 <_ZN7TwoWire11requestFromEhh>
     5b6:	11 23       	and	r17, r17
     5b8:	b1 f0       	breq	.+44     	; 0x5e6 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh+0x92>
     5ba:	e6 01       	movw	r28, r12
     5bc:	11 50       	subi	r17, 0x01	; 1
     5be:	01 2f       	mov	r16, r17
     5c0:	10 e0       	ldi	r17, 0x00	; 0
     5c2:	0f 5f       	subi	r16, 0xFF	; 255
     5c4:	1f 4f       	sbci	r17, 0xFF	; 255
     5c6:	0c 0d       	add	r16, r12
     5c8:	1d 1d       	adc	r17, r13
     5ca:	f7 01       	movw	r30, r14
     5cc:	84 81       	ldd	r24, Z+4	; 0x04
     5ce:	95 81       	ldd	r25, Z+5	; 0x05
     5d0:	dc 01       	movw	r26, r24
     5d2:	ed 91       	ld	r30, X+
     5d4:	fc 91       	ld	r31, X
     5d6:	02 84       	ldd	r0, Z+10	; 0x0a
     5d8:	f3 85       	ldd	r31, Z+11	; 0x0b
     5da:	e0 2d       	mov	r30, r0
     5dc:	19 95       	eicall
     5de:	89 93       	st	Y+, r24
     5e0:	c0 17       	cp	r28, r16
     5e2:	d1 07       	cpc	r29, r17
     5e4:	91 f7       	brne	.-28     	; 0x5ca <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh+0x76>
     5e6:	81 e0       	ldi	r24, 0x01	; 1
     5e8:	df 91       	pop	r29
     5ea:	cf 91       	pop	r28
     5ec:	1f 91       	pop	r17
     5ee:	0f 91       	pop	r16
     5f0:	ff 90       	pop	r15
     5f2:	ef 90       	pop	r14
     5f4:	df 90       	pop	r13
     5f6:	cf 90       	pop	r12
     5f8:	08 95       	ret

000005fa <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>:
 *            VECTOR_EULER
 *            VECTOR_LINEARACCEL
 *            VECTOR_GRAVITY]
 *  @return  vector from specified source
 */
AdafruitImu::Vector<3> Adafruit_BNO055::getVector(adafruit_vector_type_t vector_type) {
     5fa:	af 92       	push	r10
     5fc:	bf 92       	push	r11
     5fe:	cf 92       	push	r12
     600:	df 92       	push	r13
     602:	ff 92       	push	r15
     604:	0f 93       	push	r16
     606:	1f 93       	push	r17
     608:	cf 93       	push	r28
     60a:	df 93       	push	r29
     60c:	00 d0       	rcall	.+0      	; 0x60e <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x14>
     60e:	00 d0       	rcall	.+0      	; 0x610 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x16>
     610:	cd b7       	in	r28, 0x3d	; 61
     612:	de b7       	in	r29, 0x3e	; 62
     614:	8c 01       	movw	r16, r24
     616:	cb 01       	movw	r24, r22
     618:	f4 2e       	mov	r15, r20
	template <uint8_t N> class Vector
	{
		public:
		Vector()
		{
			memset(p_vec, 0, sizeof(double)*N);
     61a:	2c e0       	ldi	r18, 0x0C	; 12
     61c:	f8 01       	movw	r30, r16
     61e:	11 92       	st	Z+, r1
     620:	2a 95       	dec	r18
     622:	e9 f7       	brne	.-6      	; 0x61e <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x24>
  AdafruitImu::Vector<3> xyz;
  uint8_t buffer[6];
  memset(buffer, 0, 6);
     624:	ae 01       	movw	r20, r28
     626:	4f 5f       	subi	r20, 0xFF	; 255
     628:	5f 4f       	sbci	r21, 0xFF	; 255
     62a:	26 e0       	ldi	r18, 0x06	; 6
     62c:	fa 01       	movw	r30, r20
     62e:	11 92       	st	Z+, r1
     630:	2a 95       	dec	r18
     632:	e9 f7       	brne	.-6      	; 0x62e <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x34>

  int16_t x, y, z;
  x = y = z = 0;

  /* Read vector data (6 bytes) */
  readLen((adafruit_bno055_reg_t)vector_type, buffer, 6);
     634:	26 e0       	ldi	r18, 0x06	; 6
     636:	6f 2d       	mov	r22, r15
     638:	8d df       	rcall	.-230    	; 0x554 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>

  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
     63a:	6a 81       	ldd	r22, Y+2	; 0x02
     63c:	70 e0       	ldi	r23, 0x00	; 0
     63e:	76 2f       	mov	r23, r22
     640:	66 27       	eor	r22, r22
     642:	89 81       	ldd	r24, Y+1	; 0x01
     644:	68 2b       	or	r22, r24
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
     646:	8c 81       	ldd	r24, Y+4	; 0x04
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	98 2f       	mov	r25, r24
     64c:	88 27       	eor	r24, r24
     64e:	2b 81       	ldd	r18, Y+3	; 0x03
     650:	6c 01       	movw	r12, r24
     652:	c2 2a       	or	r12, r18
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
     654:	8e 81       	ldd	r24, Y+6	; 0x06
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	98 2f       	mov	r25, r24
     65a:	88 27       	eor	r24, r24
     65c:	2d 81       	ldd	r18, Y+5	; 0x05
     65e:	5c 01       	movw	r10, r24
     660:	a2 2a       	or	r10, r18

  /*!
   * Convert the value to an appropriate range (section 3.6.4)
   * and assign the value to the Vector type
   */
  switch (vector_type) {
     662:	f4 e1       	ldi	r31, 0x14	; 20
     664:	ff 16       	cp	r15, r31
     666:	09 f4       	brne	.+2      	; 0x66a <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x70>
     668:	4a c0       	rjmp	.+148    	; 0x6fe <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x104>
     66a:	ff 15       	cp	r31, r15
     66c:	40 f0       	brcs	.+16     	; 0x67e <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x84>
     66e:	88 e0       	ldi	r24, 0x08	; 8
     670:	f8 16       	cp	r15, r24
     672:	09 f4       	brne	.+2      	; 0x676 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x7c>
     674:	ac c0       	rjmp	.+344    	; 0x7ce <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x1d4>
     676:	ee e0       	ldi	r30, 0x0E	; 14
     678:	fe 16       	cp	r15, r30
     67a:	69 f0       	breq	.+26     	; 0x696 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x9c>
     67c:	43 c1       	rjmp	.+646    	; 0x904 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
     67e:	f8 e2       	ldi	r31, 0x28	; 40
     680:	ff 16       	cp	r15, r31
     682:	09 f4       	brne	.+2      	; 0x686 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x8c>
     684:	d8 c0       	rjmp	.+432    	; 0x836 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x23c>
     686:	8e e2       	ldi	r24, 0x2E	; 46
     688:	f8 16       	cp	r15, r24
     68a:	09 f4       	brne	.+2      	; 0x68e <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x94>
     68c:	08 c1       	rjmp	.+528    	; 0x89e <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x2a4>
     68e:	ea e1       	ldi	r30, 0x1A	; 26
     690:	fe 12       	cpse	r15, r30
     692:	38 c1       	rjmp	.+624    	; 0x904 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
     694:	68 c0       	rjmp	.+208    	; 0x766 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x16c>
  case VECTOR_MAGNETOMETER:
    /* 1uT = 16 LSB */
    xyz[0] = ((double)x) / 16.0;
     696:	07 2e       	mov	r0, r23
     698:	00 0c       	add	r0, r0
     69a:	88 0b       	sbc	r24, r24
     69c:	99 0b       	sbc	r25, r25
     69e:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <__floatsisf>
     6a2:	20 e0       	ldi	r18, 0x00	; 0
     6a4:	30 e0       	ldi	r19, 0x00	; 0
     6a6:	40 e8       	ldi	r20, 0x80	; 128
     6a8:	5d e3       	ldi	r21, 0x3D	; 61
     6aa:	0e 94 43 16 	call	0x2c86	; 0x2c86 <__mulsf3>
     6ae:	f8 01       	movw	r30, r16
     6b0:	60 83       	st	Z, r22
     6b2:	71 83       	std	Z+1, r23	; 0x01
     6b4:	82 83       	std	Z+2, r24	; 0x02
     6b6:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 16.0;
     6b8:	b6 01       	movw	r22, r12
     6ba:	dd 0c       	add	r13, r13
     6bc:	88 0b       	sbc	r24, r24
     6be:	99 0b       	sbc	r25, r25
     6c0:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <__floatsisf>
     6c4:	20 e0       	ldi	r18, 0x00	; 0
     6c6:	30 e0       	ldi	r19, 0x00	; 0
     6c8:	40 e8       	ldi	r20, 0x80	; 128
     6ca:	5d e3       	ldi	r21, 0x3D	; 61
     6cc:	0e 94 43 16 	call	0x2c86	; 0x2c86 <__mulsf3>
     6d0:	f8 01       	movw	r30, r16
     6d2:	64 83       	std	Z+4, r22	; 0x04
     6d4:	75 83       	std	Z+5, r23	; 0x05
     6d6:	86 83       	std	Z+6, r24	; 0x06
     6d8:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 16.0;
     6da:	b5 01       	movw	r22, r10
     6dc:	bb 0c       	add	r11, r11
     6de:	88 0b       	sbc	r24, r24
     6e0:	99 0b       	sbc	r25, r25
     6e2:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <__floatsisf>
     6e6:	20 e0       	ldi	r18, 0x00	; 0
     6e8:	30 e0       	ldi	r19, 0x00	; 0
     6ea:	40 e8       	ldi	r20, 0x80	; 128
     6ec:	5d e3       	ldi	r21, 0x3D	; 61
     6ee:	0e 94 43 16 	call	0x2c86	; 0x2c86 <__mulsf3>
     6f2:	f8 01       	movw	r30, r16
     6f4:	60 87       	std	Z+8, r22	; 0x08
     6f6:	71 87       	std	Z+9, r23	; 0x09
     6f8:	82 87       	std	Z+10, r24	; 0x0a
     6fa:	93 87       	std	Z+11, r25	; 0x0b
    break;
     6fc:	03 c1       	rjmp	.+518    	; 0x904 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_GYROSCOPE:
    /* 1dps = 16 LSB */
    xyz[0] = ((double)x) / 16.0;
     6fe:	07 2e       	mov	r0, r23
     700:	00 0c       	add	r0, r0
     702:	88 0b       	sbc	r24, r24
     704:	99 0b       	sbc	r25, r25
     706:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <__floatsisf>
     70a:	20 e0       	ldi	r18, 0x00	; 0
     70c:	30 e0       	ldi	r19, 0x00	; 0
     70e:	40 e8       	ldi	r20, 0x80	; 128
     710:	5d e3       	ldi	r21, 0x3D	; 61
     712:	0e 94 43 16 	call	0x2c86	; 0x2c86 <__mulsf3>
     716:	f8 01       	movw	r30, r16
     718:	60 83       	st	Z, r22
     71a:	71 83       	std	Z+1, r23	; 0x01
     71c:	82 83       	std	Z+2, r24	; 0x02
     71e:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 16.0;
     720:	b6 01       	movw	r22, r12
     722:	dd 0c       	add	r13, r13
     724:	88 0b       	sbc	r24, r24
     726:	99 0b       	sbc	r25, r25
     728:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <__floatsisf>
     72c:	20 e0       	ldi	r18, 0x00	; 0
     72e:	30 e0       	ldi	r19, 0x00	; 0
     730:	40 e8       	ldi	r20, 0x80	; 128
     732:	5d e3       	ldi	r21, 0x3D	; 61
     734:	0e 94 43 16 	call	0x2c86	; 0x2c86 <__mulsf3>
     738:	f8 01       	movw	r30, r16
     73a:	64 83       	std	Z+4, r22	; 0x04
     73c:	75 83       	std	Z+5, r23	; 0x05
     73e:	86 83       	std	Z+6, r24	; 0x06
     740:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 16.0;
     742:	b5 01       	movw	r22, r10
     744:	bb 0c       	add	r11, r11
     746:	88 0b       	sbc	r24, r24
     748:	99 0b       	sbc	r25, r25
     74a:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <__floatsisf>
     74e:	20 e0       	ldi	r18, 0x00	; 0
     750:	30 e0       	ldi	r19, 0x00	; 0
     752:	40 e8       	ldi	r20, 0x80	; 128
     754:	5d e3       	ldi	r21, 0x3D	; 61
     756:	0e 94 43 16 	call	0x2c86	; 0x2c86 <__mulsf3>
     75a:	f8 01       	movw	r30, r16
     75c:	60 87       	std	Z+8, r22	; 0x08
     75e:	71 87       	std	Z+9, r23	; 0x09
     760:	82 87       	std	Z+10, r24	; 0x0a
     762:	93 87       	std	Z+11, r25	; 0x0b
    break;
     764:	cf c0       	rjmp	.+414    	; 0x904 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_EULER:
    /* 1 degree = 16 LSB */
    xyz[0] = ((double)x) / 16.0;
     766:	07 2e       	mov	r0, r23
     768:	00 0c       	add	r0, r0
     76a:	88 0b       	sbc	r24, r24
     76c:	99 0b       	sbc	r25, r25
     76e:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <__floatsisf>
     772:	20 e0       	ldi	r18, 0x00	; 0
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	40 e8       	ldi	r20, 0x80	; 128
     778:	5d e3       	ldi	r21, 0x3D	; 61
     77a:	0e 94 43 16 	call	0x2c86	; 0x2c86 <__mulsf3>
     77e:	f8 01       	movw	r30, r16
     780:	60 83       	st	Z, r22
     782:	71 83       	std	Z+1, r23	; 0x01
     784:	82 83       	std	Z+2, r24	; 0x02
     786:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 16.0;
     788:	b6 01       	movw	r22, r12
     78a:	dd 0c       	add	r13, r13
     78c:	88 0b       	sbc	r24, r24
     78e:	99 0b       	sbc	r25, r25
     790:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <__floatsisf>
     794:	20 e0       	ldi	r18, 0x00	; 0
     796:	30 e0       	ldi	r19, 0x00	; 0
     798:	40 e8       	ldi	r20, 0x80	; 128
     79a:	5d e3       	ldi	r21, 0x3D	; 61
     79c:	0e 94 43 16 	call	0x2c86	; 0x2c86 <__mulsf3>
     7a0:	f8 01       	movw	r30, r16
     7a2:	64 83       	std	Z+4, r22	; 0x04
     7a4:	75 83       	std	Z+5, r23	; 0x05
     7a6:	86 83       	std	Z+6, r24	; 0x06
     7a8:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 16.0;
     7aa:	b5 01       	movw	r22, r10
     7ac:	bb 0c       	add	r11, r11
     7ae:	88 0b       	sbc	r24, r24
     7b0:	99 0b       	sbc	r25, r25
     7b2:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <__floatsisf>
     7b6:	20 e0       	ldi	r18, 0x00	; 0
     7b8:	30 e0       	ldi	r19, 0x00	; 0
     7ba:	40 e8       	ldi	r20, 0x80	; 128
     7bc:	5d e3       	ldi	r21, 0x3D	; 61
     7be:	0e 94 43 16 	call	0x2c86	; 0x2c86 <__mulsf3>
     7c2:	f8 01       	movw	r30, r16
     7c4:	60 87       	std	Z+8, r22	; 0x08
     7c6:	71 87       	std	Z+9, r23	; 0x09
     7c8:	82 87       	std	Z+10, r24	; 0x0a
     7ca:	93 87       	std	Z+11, r25	; 0x0b
    break;
     7cc:	9b c0       	rjmp	.+310    	; 0x904 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_ACCELEROMETER:
    /* 1m/s^2 = 100 LSB */
    xyz[0] = ((double)x) / 100.0;
     7ce:	07 2e       	mov	r0, r23
     7d0:	00 0c       	add	r0, r0
     7d2:	88 0b       	sbc	r24, r24
     7d4:	99 0b       	sbc	r25, r25
     7d6:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <__floatsisf>
     7da:	20 e0       	ldi	r18, 0x00	; 0
     7dc:	30 e0       	ldi	r19, 0x00	; 0
     7de:	48 ec       	ldi	r20, 0xC8	; 200
     7e0:	52 e4       	ldi	r21, 0x42	; 66
     7e2:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <__divsf3>
     7e6:	f8 01       	movw	r30, r16
     7e8:	60 83       	st	Z, r22
     7ea:	71 83       	std	Z+1, r23	; 0x01
     7ec:	82 83       	std	Z+2, r24	; 0x02
     7ee:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 100.0;
     7f0:	b6 01       	movw	r22, r12
     7f2:	dd 0c       	add	r13, r13
     7f4:	88 0b       	sbc	r24, r24
     7f6:	99 0b       	sbc	r25, r25
     7f8:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <__floatsisf>
     7fc:	20 e0       	ldi	r18, 0x00	; 0
     7fe:	30 e0       	ldi	r19, 0x00	; 0
     800:	48 ec       	ldi	r20, 0xC8	; 200
     802:	52 e4       	ldi	r21, 0x42	; 66
     804:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <__divsf3>
     808:	f8 01       	movw	r30, r16
     80a:	64 83       	std	Z+4, r22	; 0x04
     80c:	75 83       	std	Z+5, r23	; 0x05
     80e:	86 83       	std	Z+6, r24	; 0x06
     810:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 100.0;
     812:	b5 01       	movw	r22, r10
     814:	bb 0c       	add	r11, r11
     816:	88 0b       	sbc	r24, r24
     818:	99 0b       	sbc	r25, r25
     81a:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <__floatsisf>
     81e:	20 e0       	ldi	r18, 0x00	; 0
     820:	30 e0       	ldi	r19, 0x00	; 0
     822:	48 ec       	ldi	r20, 0xC8	; 200
     824:	52 e4       	ldi	r21, 0x42	; 66
     826:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <__divsf3>
     82a:	f8 01       	movw	r30, r16
     82c:	60 87       	std	Z+8, r22	; 0x08
     82e:	71 87       	std	Z+9, r23	; 0x09
     830:	82 87       	std	Z+10, r24	; 0x0a
     832:	93 87       	std	Z+11, r25	; 0x0b
    break;
     834:	67 c0       	rjmp	.+206    	; 0x904 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_LINEARACCEL:
    /* 1m/s^2 = 100 LSB */
    xyz[0] = ((double)x) / 100.0;
     836:	07 2e       	mov	r0, r23
     838:	00 0c       	add	r0, r0
     83a:	88 0b       	sbc	r24, r24
     83c:	99 0b       	sbc	r25, r25
     83e:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <__floatsisf>
     842:	20 e0       	ldi	r18, 0x00	; 0
     844:	30 e0       	ldi	r19, 0x00	; 0
     846:	48 ec       	ldi	r20, 0xC8	; 200
     848:	52 e4       	ldi	r21, 0x42	; 66
     84a:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <__divsf3>
     84e:	f8 01       	movw	r30, r16
     850:	60 83       	st	Z, r22
     852:	71 83       	std	Z+1, r23	; 0x01
     854:	82 83       	std	Z+2, r24	; 0x02
     856:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 100.0;
     858:	b6 01       	movw	r22, r12
     85a:	dd 0c       	add	r13, r13
     85c:	88 0b       	sbc	r24, r24
     85e:	99 0b       	sbc	r25, r25
     860:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <__floatsisf>
     864:	20 e0       	ldi	r18, 0x00	; 0
     866:	30 e0       	ldi	r19, 0x00	; 0
     868:	48 ec       	ldi	r20, 0xC8	; 200
     86a:	52 e4       	ldi	r21, 0x42	; 66
     86c:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <__divsf3>
     870:	f8 01       	movw	r30, r16
     872:	64 83       	std	Z+4, r22	; 0x04
     874:	75 83       	std	Z+5, r23	; 0x05
     876:	86 83       	std	Z+6, r24	; 0x06
     878:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 100.0;
     87a:	b5 01       	movw	r22, r10
     87c:	bb 0c       	add	r11, r11
     87e:	88 0b       	sbc	r24, r24
     880:	99 0b       	sbc	r25, r25
     882:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <__floatsisf>
     886:	20 e0       	ldi	r18, 0x00	; 0
     888:	30 e0       	ldi	r19, 0x00	; 0
     88a:	48 ec       	ldi	r20, 0xC8	; 200
     88c:	52 e4       	ldi	r21, 0x42	; 66
     88e:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <__divsf3>
     892:	f8 01       	movw	r30, r16
     894:	60 87       	std	Z+8, r22	; 0x08
     896:	71 87       	std	Z+9, r23	; 0x09
     898:	82 87       	std	Z+10, r24	; 0x0a
     89a:	93 87       	std	Z+11, r25	; 0x0b
    break;
     89c:	33 c0       	rjmp	.+102    	; 0x904 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_GRAVITY:
    /* 1m/s^2 = 100 LSB */
    xyz[0] = ((double)x) / 100.0;
     89e:	07 2e       	mov	r0, r23
     8a0:	00 0c       	add	r0, r0
     8a2:	88 0b       	sbc	r24, r24
     8a4:	99 0b       	sbc	r25, r25
     8a6:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <__floatsisf>
     8aa:	20 e0       	ldi	r18, 0x00	; 0
     8ac:	30 e0       	ldi	r19, 0x00	; 0
     8ae:	48 ec       	ldi	r20, 0xC8	; 200
     8b0:	52 e4       	ldi	r21, 0x42	; 66
     8b2:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <__divsf3>
     8b6:	f8 01       	movw	r30, r16
     8b8:	60 83       	st	Z, r22
     8ba:	71 83       	std	Z+1, r23	; 0x01
     8bc:	82 83       	std	Z+2, r24	; 0x02
     8be:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 100.0;
     8c0:	b6 01       	movw	r22, r12
     8c2:	dd 0c       	add	r13, r13
     8c4:	88 0b       	sbc	r24, r24
     8c6:	99 0b       	sbc	r25, r25
     8c8:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <__floatsisf>
     8cc:	20 e0       	ldi	r18, 0x00	; 0
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	48 ec       	ldi	r20, 0xC8	; 200
     8d2:	52 e4       	ldi	r21, 0x42	; 66
     8d4:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <__divsf3>
     8d8:	f8 01       	movw	r30, r16
     8da:	64 83       	std	Z+4, r22	; 0x04
     8dc:	75 83       	std	Z+5, r23	; 0x05
     8de:	86 83       	std	Z+6, r24	; 0x06
     8e0:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 100.0;
     8e2:	b5 01       	movw	r22, r10
     8e4:	bb 0c       	add	r11, r11
     8e6:	88 0b       	sbc	r24, r24
     8e8:	99 0b       	sbc	r25, r25
     8ea:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <__floatsisf>
     8ee:	20 e0       	ldi	r18, 0x00	; 0
     8f0:	30 e0       	ldi	r19, 0x00	; 0
     8f2:	48 ec       	ldi	r20, 0xC8	; 200
     8f4:	52 e4       	ldi	r21, 0x42	; 66
     8f6:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <__divsf3>
     8fa:	f8 01       	movw	r30, r16
     8fc:	60 87       	std	Z+8, r22	; 0x08
     8fe:	71 87       	std	Z+9, r23	; 0x09
     900:	82 87       	std	Z+10, r24	; 0x0a
     902:	93 87       	std	Z+11, r25	; 0x0b
    break;
  }

  return xyz;
}
     904:	c8 01       	movw	r24, r16
     906:	26 96       	adiw	r28, 0x06	; 6
     908:	0f b6       	in	r0, 0x3f	; 63
     90a:	f8 94       	cli
     90c:	de bf       	out	0x3e, r29	; 62
     90e:	0f be       	out	0x3f, r0	; 63
     910:	cd bf       	out	0x3d, r28	; 61
     912:	df 91       	pop	r29
     914:	cf 91       	pop	r28
     916:	1f 91       	pop	r17
     918:	0f 91       	pop	r16
     91a:	ff 90       	pop	r15
     91c:	df 90       	pop	r13
     91e:	cf 90       	pop	r12
     920:	bf 90       	pop	r11
     922:	af 90       	pop	r10
     924:	08 95       	ret

00000926 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>:
/*!
 *  @brief  Reads the sensor and returns the data as a sensors_event_t
 *  @param  event
 *  @return always returns true
 */
bool Adafruit_BNO055::getEvent(sensors_event_t *event) {
     926:	0f 93       	push	r16
     928:	1f 93       	push	r17
     92a:	cf 93       	push	r28
     92c:	df 93       	push	r29
     92e:	cd b7       	in	r28, 0x3d	; 61
     930:	de b7       	in	r29, 0x3e	; 62
     932:	2c 97       	sbiw	r28, 0x0c	; 12
     934:	0f b6       	in	r0, 0x3f	; 63
     936:	f8 94       	cli
     938:	de bf       	out	0x3e, r29	; 62
     93a:	0f be       	out	0x3f, r0	; 63
     93c:	cd bf       	out	0x3d, r28	; 61
     93e:	8b 01       	movw	r16, r22
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
     940:	20 e2       	ldi	r18, 0x20	; 32
     942:	fb 01       	movw	r30, r22
     944:	11 92       	st	Z+, r1
     946:	2a 95       	dec	r18
     948:	e9 f7       	brne	.-6      	; 0x944 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t+0x1e>

  event->version = sizeof(sensors_event_t);
     94a:	40 e2       	ldi	r20, 0x20	; 32
     94c:	50 e0       	ldi	r21, 0x00	; 0
     94e:	60 e0       	ldi	r22, 0x00	; 0
     950:	70 e0       	ldi	r23, 0x00	; 0
     952:	f8 01       	movw	r30, r16
     954:	40 83       	st	Z, r20
     956:	51 83       	std	Z+1, r21	; 0x01
     958:	62 83       	std	Z+2, r22	; 0x02
     95a:	73 83       	std	Z+3, r23	; 0x03
  event->sensor_id = _sensorID;
     95c:	fc 01       	movw	r30, r24
     95e:	46 81       	ldd	r20, Z+6	; 0x06
     960:	57 81       	ldd	r21, Z+7	; 0x07
     962:	60 85       	ldd	r22, Z+8	; 0x08
     964:	71 85       	ldd	r23, Z+9	; 0x09
     966:	f8 01       	movw	r30, r16
     968:	44 83       	std	Z+4, r20	; 0x04
     96a:	55 83       	std	Z+5, r21	; 0x05
     96c:	66 83       	std	Z+6, r22	; 0x06
     96e:	77 83       	std	Z+7, r23	; 0x07
  event->type = SENSOR_TYPE_ORIENTATION;
     970:	43 e0       	ldi	r20, 0x03	; 3
     972:	50 e0       	ldi	r21, 0x00	; 0
     974:	60 e0       	ldi	r22, 0x00	; 0
     976:	70 e0       	ldi	r23, 0x00	; 0
     978:	40 87       	std	Z+8, r20	; 0x08
     97a:	51 87       	std	Z+9, r21	; 0x09
     97c:	62 87       	std	Z+10, r22	; 0x0a
     97e:	73 87       	std	Z+11, r23	; 0x0b
  //event->timestamp = millis();

  /* Get a Euler angle sample for orientation */
  AdafruitImu::Vector<3> euler = getVector(Adafruit_BNO055::VECTOR_EULER);
     980:	4a e1       	ldi	r20, 0x1A	; 26
     982:	bc 01       	movw	r22, r24
     984:	ce 01       	movw	r24, r28
     986:	01 96       	adiw	r24, 0x01	; 1
     988:	38 de       	rcall	.-912    	; 0x5fa <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
  event->orientation.x = euler.x();
     98a:	89 81       	ldd	r24, Y+1	; 0x01
     98c:	9a 81       	ldd	r25, Y+2	; 0x02
     98e:	ab 81       	ldd	r26, Y+3	; 0x03
     990:	bc 81       	ldd	r27, Y+4	; 0x04
     992:	f8 01       	movw	r30, r16
     994:	80 8b       	std	Z+16, r24	; 0x10
     996:	91 8b       	std	Z+17, r25	; 0x11
     998:	a2 8b       	std	Z+18, r26	; 0x12
     99a:	b3 8b       	std	Z+19, r27	; 0x13
  event->orientation.y = euler.y();
     99c:	8d 81       	ldd	r24, Y+5	; 0x05
     99e:	9e 81       	ldd	r25, Y+6	; 0x06
     9a0:	af 81       	ldd	r26, Y+7	; 0x07
     9a2:	b8 85       	ldd	r27, Y+8	; 0x08
     9a4:	84 8b       	std	Z+20, r24	; 0x14
     9a6:	95 8b       	std	Z+21, r25	; 0x15
     9a8:	a6 8b       	std	Z+22, r26	; 0x16
     9aa:	b7 8b       	std	Z+23, r27	; 0x17
  event->orientation.z = euler.z();
     9ac:	89 85       	ldd	r24, Y+9	; 0x09
     9ae:	9a 85       	ldd	r25, Y+10	; 0x0a
     9b0:	ab 85       	ldd	r26, Y+11	; 0x0b
     9b2:	bc 85       	ldd	r27, Y+12	; 0x0c
     9b4:	80 8f       	std	Z+24, r24	; 0x18
     9b6:	91 8f       	std	Z+25, r25	; 0x19
     9b8:	a2 8f       	std	Z+26, r26	; 0x1a
     9ba:	b3 8f       	std	Z+27, r27	; 0x1b

  return true;
}
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	2c 96       	adiw	r28, 0x0c	; 12
     9c0:	0f b6       	in	r0, 0x3f	; 63
     9c2:	f8 94       	cli
     9c4:	de bf       	out	0x3e, r29	; 62
     9c6:	0f be       	out	0x3f, r0	; 63
     9c8:	cd bf       	out	0x3d, r28	; 61
     9ca:	df 91       	pop	r29
     9cc:	cf 91       	pop	r28
     9ce:	1f 91       	pop	r17
     9d0:	0f 91       	pop	r16
     9d2:	08 95       	ret

000009d4 <_Z14RunPingCommandPKhh>:
#include <stddef.h>

uint8_t* const SendDataBuffer = (uint8_t*)(&EtherComm::buffer[2]);

void RunPingCommand(const uint8_t* data, uint8_t len){
  if(len == 1){
     9d4:	61 30       	cpi	r22, 0x01	; 1
     9d6:	49 f4       	brne	.+18     	; 0x9ea <_Z14RunPingCommandPKhh+0x16>
     9d8:	fc 01       	movw	r30, r24
    SendDataBuffer[0] = data[0];
     9da:	80 81       	ld	r24, Z
     9dc:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <__data_end>
     9e0:	f0 91 f7 02 	lds	r31, 0x02F7	; 0x8002f7 <__data_end+0x1>
     9e4:	80 83       	st	Z, r24
    EtherComm::SendCommand(CMD_Ping, 1);
     9e6:	80 e0       	ldi	r24, 0x00	; 0
     9e8:	d9 c6       	rjmp	.+3506   	; 0x179c <_ZN9EtherComm11SendCommandEhh>
     9ea:	08 95       	ret

000009ec <_Z14RunEchoCommandPKhh>:
  }
}

void RunEchoCommand(const uint8_t* data, uint8_t len){
  uint8_t* index = SendDataBuffer;
     9ec:	40 91 f6 02 	lds	r20, 0x02F6	; 0x8002f6 <__data_end>
     9f0:	30 91 f7 02 	lds	r19, 0x02F7	; 0x8002f7 <__data_end+0x1>
  uint8_t dataLen = len;
  while(len-- > 0){
     9f4:	2f ef       	ldi	r18, 0xFF	; 255
     9f6:	26 0f       	add	r18, r22
     9f8:	66 23       	and	r22, r22
     9fa:	41 f0       	breq	.+16     	; 0xa0c <_Z14RunEchoCommandPKhh+0x20>
     9fc:	a8 2f       	mov	r26, r24
     9fe:	b9 2f       	mov	r27, r25
     a00:	e4 2f       	mov	r30, r20
     a02:	f3 2f       	mov	r31, r19
    *(index++) = *(data++);
     a04:	8d 91       	ld	r24, X+
     a06:	81 93       	st	Z+, r24
}

void RunEchoCommand(const uint8_t* data, uint8_t len){
  uint8_t* index = SendDataBuffer;
  uint8_t dataLen = len;
  while(len-- > 0){
     a08:	21 50       	subi	r18, 0x01	; 1
     a0a:	e0 f7       	brcc	.-8      	; 0xa04 <_Z14RunEchoCommandPKhh+0x18>
    *(index++) = *(data++);
  }
  
  EtherComm::SendCommand(CMD_Echo, dataLen);
     a0c:	81 e0       	ldi	r24, 0x01	; 1
     a0e:	c6 c6       	rjmp	.+3468   	; 0x179c <_ZN9EtherComm11SendCommandEhh>
     a10:	08 95       	ret

00000a12 <_Z13RunLedCommandPKhh>:
}

void RunLedCommand(const uint8_t* data, uint8_t len){
	if(len == 1){
     a12:	61 30       	cpi	r22, 0x01	; 1
     a14:	51 f4       	brne	.+20     	; 0xa2a <_Z13RunLedCommandPKhh+0x18>
		uint8_t state = *data;
     a16:	fc 01       	movw	r30, r24
     a18:	90 81       	ld	r25, Z
		if(state <= 1){
     a1a:	92 30       	cpi	r25, 0x02	; 2
     a1c:	30 f4       	brcc	.+12     	; 0xa2a <_Z13RunLedCommandPKhh+0x18>
			rov.SetLed(state > 0);
     a1e:	81 e0       	ldi	r24, 0x01	; 1
     a20:	91 11       	cpse	r25, r1
     a22:	01 c0       	rjmp	.+2      	; 0xa26 <_Z13RunLedCommandPKhh+0x14>
     a24:	80 e0       	ldi	r24, 0x00	; 0
     a26:	0c 94 6e 13 	jmp	0x26dc	; 0x26dc <_ZN5Robot6SetLedEb>
     a2a:	08 95       	ret

00000a2c <_Z22RunUpdateDeviceCommandPKhh>:
		}
	}
}

void RunUpdateDeviceCommand(const uint8_t* data, uint8_t len){
	if(len > 0){
     a2c:	66 23       	and	r22, r22
     a2e:	c1 f0       	breq	.+48     	; 0xa60 <_Z22RunUpdateDeviceCommandPKhh+0x34>
		if(Robot::devices[data[0]] != NULL){
     a30:	dc 01       	movw	r26, r24
     a32:	ec 91       	ld	r30, X
     a34:	f0 e0       	ldi	r31, 0x00	; 0
     a36:	ee 0f       	add	r30, r30
     a38:	ff 1f       	adc	r31, r31
     a3a:	e2 50       	subi	r30, 0x02	; 2
     a3c:	f9 4f       	sbci	r31, 0xF9	; 249
     a3e:	a0 81       	ld	r26, Z
     a40:	b1 81       	ldd	r27, Z+1	; 0x01
     a42:	10 97       	sbiw	r26, 0x00	; 0
     a44:	69 f0       	breq	.+26     	; 0xa60 <_Z22RunUpdateDeviceCommandPKhh+0x34>
     a46:	46 2f       	mov	r20, r22
     a48:	bc 01       	movw	r22, r24
			Robot::devices[data[0]]->Update(data + 1, len - 1);
     a4a:	41 50       	subi	r20, 0x01	; 1
     a4c:	6f 5f       	subi	r22, 0xFF	; 255
     a4e:	7f 4f       	sbci	r23, 0xFF	; 255
     a50:	ed 91       	ld	r30, X+
     a52:	fc 91       	ld	r31, X
     a54:	11 97       	sbiw	r26, 0x01	; 1
     a56:	01 90       	ld	r0, Z+
     a58:	f0 81       	ld	r31, Z
     a5a:	e0 2d       	mov	r30, r0
     a5c:	cd 01       	movw	r24, r26
     a5e:	19 95       	eicall
     a60:	08 95       	ret

00000a62 <_ZN9EtherComm15CommandReceivedEhPKhh>:
		}
	}
}

void EtherComm::CommandReceived(uint8_t command, const uint8_t* data, uint8_t len){
     a62:	9b 01       	movw	r18, r22
  switch(command){
     a64:	81 30       	cpi	r24, 0x01	; 1
     a66:	51 f0       	breq	.+20     	; 0xa7c <_ZN9EtherComm15CommandReceivedEhPKhh+0x1a>
     a68:	28 f0       	brcs	.+10     	; 0xa74 <_ZN9EtherComm15CommandReceivedEhPKhh+0x12>
     a6a:	82 30       	cpi	r24, 0x02	; 2
     a6c:	59 f0       	breq	.+22     	; 0xa84 <_ZN9EtherComm15CommandReceivedEhPKhh+0x22>
     a6e:	83 30       	cpi	r24, 0x03	; 3
     a70:	69 f0       	breq	.+26     	; 0xa8c <_ZN9EtherComm15CommandReceivedEhPKhh+0x2a>
     a72:	08 95       	ret
    case CMD_Ping: RunPingCommand(data, len); break;
     a74:	64 2f       	mov	r22, r20
     a76:	c9 01       	movw	r24, r18
     a78:	ad cf       	rjmp	.-166    	; 0x9d4 <_Z14RunPingCommandPKhh>
     a7a:	08 95       	ret
    case CMD_Echo: RunEchoCommand(data, len); break;
     a7c:	64 2f       	mov	r22, r20
     a7e:	c9 01       	movw	r24, r18
     a80:	b5 cf       	rjmp	.-150    	; 0x9ec <_Z14RunEchoCommandPKhh>
     a82:	08 95       	ret
	case CMD_Led: RunLedCommand(data, len); break;
     a84:	64 2f       	mov	r22, r20
     a86:	c9 01       	movw	r24, r18
     a88:	c4 cf       	rjmp	.-120    	; 0xa12 <_Z13RunLedCommandPKhh>
     a8a:	08 95       	ret
	case CMD_UpdateDevice: RunUpdateDeviceCommand(data, len); break;
     a8c:	64 2f       	mov	r22, r20
     a8e:	c9 01       	movw	r24, r18
     a90:	cd cf       	rjmp	.-102    	; 0xa2c <_Z22RunUpdateDeviceCommandPKhh>
     a92:	08 95       	ret

00000a94 <_GLOBAL__sub_I__Z14RunPingCommandPKhh>:
     a94:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
#include "EtherComm.h"
#include "Robot.h"
#include "Commands.h"
#include <stddef.h>

uint8_t* const SendDataBuffer = (uint8_t*)(&EtherComm::buffer[2]);
     a98:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
     a9c:	02 96       	adiw	r24, 0x02	; 2
     a9e:	90 93 f7 02 	sts	0x02F7, r25	; 0x8002f7 <__data_end+0x1>
     aa2:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <__data_end>
     aa6:	08 95       	ret

00000aa8 <_ZL10enableChipv>:
static Register* selectPort;
static uint8_t selectPin;

static void enableChip () {
	//cli();
	SetLow(*selectPort, selectPin); //digitalWrite(selectPin, LOW);
     aa8:	e0 91 fc 02 	lds	r30, 0x02FC	; 0x8002fc <_ZL10selectPort>
     aac:	f0 91 fd 02 	lds	r31, 0x02FD	; 0x8002fd <_ZL10selectPort+0x1>
     ab0:	90 81       	ld	r25, Z
     ab2:	80 91 fb 02 	lds	r24, 0x02FB	; 0x8002fb <_ZL9selectPin>
     ab6:	80 95       	com	r24
     ab8:	89 23       	and	r24, r25
     aba:	80 83       	st	Z, r24
     abc:	08 95       	ret

00000abe <_ZL11disableChipv>:
}

static void disableChip () {
	SetHigh(*selectPort, selectPin); //digitalWrite(selectPin, HIGH);
     abe:	e0 91 fc 02 	lds	r30, 0x02FC	; 0x8002fc <_ZL10selectPort>
     ac2:	f0 91 fd 02 	lds	r31, 0x02FD	; 0x8002fd <_ZL10selectPort+0x1>
     ac6:	90 81       	ld	r25, Z
     ac8:	80 91 fb 02 	lds	r24, 0x02FB	; 0x8002fb <_ZL9selectPin>
     acc:	89 2b       	or	r24, r25
     ace:	80 83       	st	Z, r24
     ad0:	08 95       	ret

00000ad2 <_ZL6readOphh>:

	SetOutput(csDDR, selectPin);
	disableChip();
}

static uint8_t readOp (uint8_t op, uint8_t address) {
     ad2:	cf 93       	push	r28
     ad4:	df 93       	push	r29
     ad6:	d8 2f       	mov	r29, r24
     ad8:	c6 2f       	mov	r28, r22
    enableChip();
     ada:	e6 df       	rcall	.-52     	; 0xaa8 <_ZL10enableChipv>
    SPI.write8(op | (address & ADDR_MASK));
     adc:	8c 2f       	mov	r24, r28
     ade:	cf 71       	andi	r28, 0x1F	; 31
     ae0:	cd 2b       	or	r28, r29
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     ae2:	ce bd       	out	0x2e, r28	; 46
		asm volatile("nop");
     ae4:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     ae6:	0d b4       	in	r0, 0x2d	; 45
     ae8:	07 fe       	sbrs	r0, 7
     aea:	fd cf       	rjmp	.-6      	; 0xae6 <_ZL6readOphh+0x14>
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     aec:	1e bc       	out	0x2e, r1	; 46
		asm volatile("nop");
     aee:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     af0:	0d b4       	in	r0, 0x2d	; 45
     af2:	07 fe       	sbrs	r0, 7
     af4:	fd cf       	rjmp	.-6      	; 0xaf0 <_ZL6readOphh+0x1e>
	}

	//write8, excepts also returns the received byte
	static uint8_t read_write8(uint8_t data){
		write8(data);
		return SPDR;
     af6:	ce b5       	in	r28, 0x2e	; 46
    uint8_t result = SPI.read_write8(0x00);
    if (address & 0x80)
     af8:	88 23       	and	r24, r24
     afa:	34 f4       	brge	.+12     	; 0xb08 <_ZL6readOphh+0x36>
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     afc:	1e bc       	out	0x2e, r1	; 46
		asm volatile("nop");
     afe:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     b00:	0d b4       	in	r0, 0x2d	; 45
     b02:	07 fe       	sbrs	r0, 7
     b04:	fd cf       	rjmp	.-6      	; 0xb00 <_ZL6readOphh+0x2e>
        result = SPI.read_write8(0x00);
    disableChip();
     b06:	ce b5       	in	r28, 0x2e	; 46
     b08:	da df       	rcall	.-76     	; 0xabe <_ZL11disableChipv>
    return result;
}
     b0a:	8c 2f       	mov	r24, r28
     b0c:	df 91       	pop	r29
     b0e:	cf 91       	pop	r28
     b10:	08 95       	ret

00000b12 <_ZL7writeOphhh>:

static void writeOp (uint8_t op, uint8_t address, uint8_t data) {
     b12:	1f 93       	push	r17
     b14:	cf 93       	push	r28
     b16:	df 93       	push	r29
     b18:	c8 2f       	mov	r28, r24
     b1a:	d6 2f       	mov	r29, r22
     b1c:	14 2f       	mov	r17, r20
    enableChip();
     b1e:	c4 df       	rcall	.-120    	; 0xaa8 <_ZL10enableChipv>
    SPI.write8(op | (address & ADDR_MASK));
     b20:	df 71       	andi	r29, 0x1F	; 31
     b22:	cd 2b       	or	r28, r29
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     b24:	ce bd       	out	0x2e, r28	; 46
		asm volatile("nop");
     b26:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     b28:	0d b4       	in	r0, 0x2d	; 45
     b2a:	07 fe       	sbrs	r0, 7
     b2c:	fd cf       	rjmp	.-6      	; 0xb28 <_ZL7writeOphhh+0x16>
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     b2e:	1e bd       	out	0x2e, r17	; 46
		asm volatile("nop");
     b30:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     b32:	0d b4       	in	r0, 0x2d	; 45
     b34:	07 fe       	sbrs	r0, 7
    SPI.write8(data);
    disableChip();
     b36:	fd cf       	rjmp	.-6      	; 0xb32 <_ZL7writeOphhh+0x20>
     b38:	c2 df       	rcall	.-124    	; 0xabe <_ZL11disableChipv>
}
     b3a:	df 91       	pop	r29
     b3c:	cf 91       	pop	r28
     b3e:	1f 91       	pop	r17
     b40:	08 95       	ret

00000b42 <_ZL7readBufjPh>:

static void readBuf(uint16_t len, uint8_t* data) {
     b42:	0f 93       	push	r16
     b44:	1f 93       	push	r17
     b46:	cf 93       	push	r28
     b48:	df 93       	push	r29
     b4a:	ec 01       	movw	r28, r24
     b4c:	8b 01       	movw	r16, r22
    enableChip();
     b4e:	ac df       	rcall	.-168    	; 0xaa8 <_ZL10enableChipv>
    if (len != 0) {
     b50:	20 97       	sbiw	r28, 0x00	; 0
     b52:	99 f0       	breq	.+38     	; 0xb7a <_ZL7readBufjPh+0x38>
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     b54:	8a e3       	ldi	r24, 0x3A	; 58
     b56:	8e bd       	out	0x2e, r24	; 46
		asm volatile("nop");
     b58:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     b5a:	0d b4       	in	r0, 0x2d	; 45
     b5c:	07 fe       	sbrs	r0, 7
     b5e:	fd cf       	rjmp	.-6      	; 0xb5a <_ZL7readBufjPh+0x18>
     b60:	f8 01       	movw	r30, r16
     b62:	b8 01       	movw	r22, r16
     b64:	6c 0f       	add	r22, r28
     b66:	7d 1f       	adc	r23, r29
	static void read(void *buf, uint16_t nbyte, uint8_t dataSend = 0){
		if(nbyte == 0) return;
		
		uint8_t* buff = (uint8_t*)buf;
		while(nbyte--){
			SPDR = dataSend;
     b68:	1e bc       	out	0x2e, r1	; 46
			//asm volatile("nop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\n");
			while(!(SPSR & _BV(SPIF)));
     b6a:	0d b4       	in	r0, 0x2d	; 45
     b6c:	07 fe       	sbrs	r0, 7
     b6e:	fd cf       	rjmp	.-6      	; 0xb6a <_ZL7readBufjPh+0x28>
			*buff++ = SPDR;
     b70:	9e b5       	in	r25, 0x2e	; 46
     b72:	91 93       	st	Z+, r25
		
	static void read(void *buf, uint16_t nbyte, uint8_t dataSend = 0){
		if(nbyte == 0) return;
		
		uint8_t* buff = (uint8_t*)buf;
		while(nbyte--){
     b74:	6e 17       	cp	r22, r30
     b76:	7f 07       	cpc	r23, r31
        SPI.write8(ENC28J60_READ_BUF_MEM);
		SPI.read(data, len);
    }
    disableChip();
     b78:	b9 f7       	brne	.-18     	; 0xb68 <_ZL7readBufjPh+0x26>
     b7a:	a1 df       	rcall	.-190    	; 0xabe <_ZL11disableChipv>
}
     b7c:	df 91       	pop	r29
     b7e:	cf 91       	pop	r28
     b80:	1f 91       	pop	r17
     b82:	0f 91       	pop	r16
     b84:	08 95       	ret

00000b86 <_ZL7SetBankh>:
        SPI.write(data, len);
    }
    disableChip();
}

static void SetBank (uint8_t address) {
     b86:	1f 93       	push	r17
     b88:	cf 93       	push	r28
     b8a:	df 93       	push	r29
     b8c:	18 2f       	mov	r17, r24
     b8e:	10 76       	andi	r17, 0x60	; 96
    if ((address & BANK_MASK) != Enc28j60Bank) {
     b90:	c1 2f       	mov	r28, r17
     b92:	d0 e0       	ldi	r29, 0x00	; 0
     b94:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <_ZL12Enc28j60Bank>
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	c8 17       	cp	r28, r24
     b9c:	d9 07       	cpc	r29, r25
     b9e:	a1 f0       	breq	.+40     	; 0xbc8 <_ZL7SetBankh+0x42>
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_BSEL1|ECON1_BSEL0);
     ba0:	43 e0       	ldi	r20, 0x03	; 3
     ba2:	6f e1       	ldi	r22, 0x1F	; 31
     ba4:	80 ea       	ldi	r24, 0xA0	; 160
     ba6:	b5 df       	rcall	.-150    	; 0xb12 <_ZL7writeOphhh>
        Enc28j60Bank = address & BANK_MASK;
     ba8:	10 93 fe 02 	sts	0x02FE, r17	; 0x8002fe <_ZL12Enc28j60Bank>
        writeOp(ENC28J60_BIT_FIELD_SET, ECON1, Enc28j60Bank>>5);
     bac:	ae 01       	movw	r20, r28
     bae:	55 95       	asr	r21
     bb0:	47 95       	ror	r20
     bb2:	55 95       	asr	r21
     bb4:	47 95       	ror	r20
     bb6:	55 95       	asr	r21
     bb8:	47 95       	ror	r20
     bba:	55 95       	asr	r21
     bbc:	47 95       	ror	r20
     bbe:	55 95       	asr	r21
     bc0:	47 95       	ror	r20
     bc2:	6f e1       	ldi	r22, 0x1F	; 31
     bc4:	80 e8       	ldi	r24, 0x80	; 128
     bc6:	a5 df       	rcall	.-182    	; 0xb12 <_ZL7writeOphhh>
    }
}
     bc8:	df 91       	pop	r29
     bca:	cf 91       	pop	r28
     bcc:	1f 91       	pop	r17
     bce:	08 95       	ret

00000bd0 <_ZL11readRegByteh>:

static uint8_t readRegByte (uint8_t address) {
     bd0:	cf 93       	push	r28
     bd2:	c8 2f       	mov	r28, r24
    SetBank(address);
     bd4:	d8 df       	rcall	.-80     	; 0xb86 <_ZL7SetBankh>
    return readOp(ENC28J60_READ_CTRL_REG, address);
     bd6:	6c 2f       	mov	r22, r28
     bd8:	80 e0       	ldi	r24, 0x00	; 0
     bda:	7b df       	rcall	.-266    	; 0xad2 <_ZL6readOphh>
}
     bdc:	cf 91       	pop	r28
     bde:	08 95       	ret

00000be0 <_ZL12writeRegBytehh>:

static void writeRegByte (uint8_t address, uint8_t data) {
     be0:	cf 93       	push	r28
     be2:	df 93       	push	r29
     be4:	c8 2f       	mov	r28, r24
     be6:	d6 2f       	mov	r29, r22
    SetBank(address);
     be8:	ce df       	rcall	.-100    	; 0xb86 <_ZL7SetBankh>
    writeOp(ENC28J60_WRITE_CTRL_REG, address, data);
     bea:	4d 2f       	mov	r20, r29
     bec:	6c 2f       	mov	r22, r28
     bee:	80 e4       	ldi	r24, 0x40	; 64
     bf0:	90 df       	rcall	.-224    	; 0xb12 <_ZL7writeOphhh>
}
     bf2:	df 91       	pop	r29
     bf4:	cf 91       	pop	r28
     bf6:	08 95       	ret

00000bf8 <_ZL8writeReghj>:

static void writeReg(uint8_t address, uint16_t data) {
     bf8:	cf 93       	push	r28
     bfa:	df 93       	push	r29
     bfc:	c8 2f       	mov	r28, r24
     bfe:	d7 2f       	mov	r29, r23
    writeRegByte(address, data);
     c00:	ef df       	rcall	.-34     	; 0xbe0 <_ZL12writeRegBytehh>
    writeRegByte(address + 1, data >> 8);
     c02:	6d 2f       	mov	r22, r29
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	8c 0f       	add	r24, r28
     c08:	eb df       	rcall	.-42     	; 0xbe0 <_ZL12writeRegBytehh>
}
     c0a:	df 91       	pop	r29
     c0c:	cf 91       	pop	r28
     c0e:	08 95       	ret

00000c10 <_ZN8ENC28J607initSPIERVh>:
static void disableChip () {
	SetHigh(*selectPort, selectPin); //digitalWrite(selectPin, HIGH);
	//sei();
}

void ENC28J60::initSPI (Register& csDDR) {
     c10:	fc 01       	movw	r30, r24

class SPI{
public:
	static void begin(uint8_t clock = SPI_CLOCK_DIV2){
		//SPI_DIR |= SS;
		SPI_DIR |= SPI_MOSI | SPI_SCK | SPI_SS; //Not sure why, but SS pin requires to be set as output even when not being used.
     c12:	94 b1       	in	r25, 0x04	; 4
     c14:	97 60       	ori	r25, 0x07	; 7
     c16:	94 b9       	out	0x04, r25	; 4
		SPI_DIR &= ~(SPI_MISO);
     c18:	23 98       	cbi	0x04, 3	; 4
		//disableCS();

		SPSR |= (clock >> 2);
     c1a:	9d b5       	in	r25, 0x2d	; 45
     c1c:	91 60       	ori	r25, 0x01	; 1
     c1e:	9d bd       	out	0x2d, r25	; 45
		SPCR |= _BV(MSTR) | _BV(SPE) | (clock & 0x03);
     c20:	9c b5       	in	r25, 0x2c	; 44
     c22:	90 65       	ori	r25, 0x50	; 80
     c24:	9c bd       	out	0x2c, r25	; 44
	SPI.begin(SPI_CLOCK_DIV2);

	SetOutput(csDDR, selectPin);
     c26:	80 81       	ld	r24, Z
     c28:	90 91 fb 02 	lds	r25, 0x02FB	; 0x8002fb <_ZL9selectPin>
     c2c:	98 2b       	or	r25, r24
     c2e:	90 83       	st	Z, r25
	disableChip();
     c30:	46 cf       	rjmp	.-372    	; 0xabe <_ZL11disableChipv>
     c32:	08 95       	ret

00000c34 <_ZN8ENC28J6010initializeEjPKhRVhS3_h>:
    writeReg(MIWR, data);
    while (readRegByte(MISTAT) & MISTAT_BUSY)
        ;
}

uint8_t ENC28J60::initialize (uint16_t size, const uint8_t* macaddr, Register& csDDR, Register& csPort, uint8_t csPin) {
     c34:	0f 93       	push	r16
     c36:	cf 93       	push	r28
     c38:	df 93       	push	r29
     c3a:	eb 01       	movw	r28, r22
    bufferSize = size;
     c3c:	90 93 00 03 	sts	0x0300, r25	; 0x800300 <_ZN8ENC28J6010bufferSizeE+0x1>
     c40:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <_ZN8ENC28J6010bufferSizeE>
	selectPin = csPin;
     c44:	00 93 fb 02 	sts	0x02FB, r16	; 0x8002fb <_ZL9selectPin>
	selectPort = &csPort;
     c48:	30 93 fd 02 	sts	0x02FD, r19	; 0x8002fd <_ZL10selectPort+0x1>
     c4c:	20 93 fc 02 	sts	0x02FC, r18	; 0x8002fc <_ZL10selectPort>
    initSPI(csDDR);
     c50:	ca 01       	movw	r24, r20
     c52:	de df       	rcall	.-68     	; 0xc10 <_ZN8ENC28J607initSPIERVh>

    writeOp(ENC28J60_SOFT_RESET, 0, ENC28J60_SOFT_RESET);
     c54:	4f ef       	ldi	r20, 0xFF	; 255
     c56:	60 e0       	ldi	r22, 0x00	; 0
     c58:	8f ef       	ldi	r24, 0xFF	; 255
     c5a:	5b df       	rcall	.-330    	; 0xb12 <_ZL7writeOphhh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c5c:	8f e3       	ldi	r24, 0x3F	; 63
     c5e:	9f e1       	ldi	r25, 0x1F	; 31
     c60:	01 97       	sbiw	r24, 0x01	; 1
     c62:	f1 f7       	brne	.-4      	; 0xc60 <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0x2c>
     c64:	00 c0       	rjmp	.+0      	; 0xc66 <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0x32>
     c66:	00 00       	nop
	_delay_ms(2);
    while (!readOp(ENC28J60_READ_CTRL_REG, ESTAT) & ESTAT_CLKRDY)
     c68:	6d e1       	ldi	r22, 0x1D	; 29
     c6a:	80 e0       	ldi	r24, 0x00	; 0
     c6c:	32 df       	rcall	.-412    	; 0xad2 <_ZL6readOphh>
     c6e:	88 23       	and	r24, r24
     c70:	d9 f3       	breq	.-10     	; 0xc68 <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0x34>
        ;

    writeReg(ERXST, RXSTART_INIT);
     c72:	60 e0       	ldi	r22, 0x00	; 0
     c74:	70 e0       	ldi	r23, 0x00	; 0
     c76:	88 e0       	ldi	r24, 0x08	; 8
     c78:	bf df       	rcall	.-130    	; 0xbf8 <_ZL8writeReghj>
    writeReg(ERXRDPT, RXSTART_INIT);
     c7a:	60 e0       	ldi	r22, 0x00	; 0
     c7c:	70 e0       	ldi	r23, 0x00	; 0
     c7e:	8c e0       	ldi	r24, 0x0C	; 12
     c80:	bb df       	rcall	.-138    	; 0xbf8 <_ZL8writeReghj>
    writeReg(ERXND, RXSTOP_INIT);
     c82:	6f ef       	ldi	r22, 0xFF	; 255
     c84:	7b e0       	ldi	r23, 0x0B	; 11
     c86:	8a e0       	ldi	r24, 0x0A	; 10
     c88:	b7 df       	rcall	.-146    	; 0xbf8 <_ZL8writeReghj>
    writeReg(ETXST, TXSTART_INIT);
     c8a:	60 e0       	ldi	r22, 0x00	; 0
     c8c:	7c e0       	ldi	r23, 0x0C	; 12
     c8e:	84 e0       	ldi	r24, 0x04	; 4
     c90:	b3 df       	rcall	.-154    	; 0xbf8 <_ZL8writeReghj>
    writeReg(ETXND, TXSTOP_INIT);
     c92:	6f ef       	ldi	r22, 0xFF	; 255
     c94:	71 e1       	ldi	r23, 0x11	; 17
     c96:	86 e0       	ldi	r24, 0x06	; 6
     c98:	af df       	rcall	.-162    	; 0xbf8 <_ZL8writeReghj>

    writeRegByte(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN|ERXFCON_PMEN|ERXFCON_BCEN);
     c9a:	61 eb       	ldi	r22, 0xB1	; 177
     c9c:	88 e3       	ldi	r24, 0x38	; 56
     c9e:	a0 df       	rcall	.-192    	; 0xbe0 <_ZL12writeRegBytehh>
    writeReg(EPMM0, 0x303f);
     ca0:	6f e3       	ldi	r22, 0x3F	; 63
     ca2:	70 e3       	ldi	r23, 0x30	; 48
     ca4:	88 e2       	ldi	r24, 0x28	; 40
     ca6:	a8 df       	rcall	.-176    	; 0xbf8 <_ZL8writeReghj>
    writeReg(EPMCS, 0xf7f9);
     ca8:	69 ef       	ldi	r22, 0xF9	; 249
     caa:	77 ef       	ldi	r23, 0xF7	; 247
     cac:	80 e3       	ldi	r24, 0x30	; 48
     cae:	a4 df       	rcall	.-184    	; 0xbf8 <_ZL8writeReghj>
    writeRegByte(MACON1, MACON1_MARXEN);
     cb0:	61 e0       	ldi	r22, 0x01	; 1
     cb2:	80 ec       	ldi	r24, 0xC0	; 192
     cb4:	95 df       	rcall	.-214    	; 0xbe0 <_ZL12writeRegBytehh>
    writeOp(ENC28J60_BIT_FIELD_SET, MACON3,
            MACON3_PADCFG0|MACON3_TXCRCEN|MACON3_FRMLNEN);
     cb6:	42 e3       	ldi	r20, 0x32	; 50
     cb8:	62 ec       	ldi	r22, 0xC2	; 194
     cba:	80 e8       	ldi	r24, 0x80	; 128
     cbc:	2a df       	rcall	.-428    	; 0xb12 <_ZL7writeOphhh>
    writeReg(MAIPG, 0x0C12);
     cbe:	62 e1       	ldi	r22, 0x12	; 18
     cc0:	7c e0       	ldi	r23, 0x0C	; 12
     cc2:	86 ec       	ldi	r24, 0xC6	; 198
    writeRegByte(MABBIPG, 0x12);
     cc4:	99 df       	rcall	.-206    	; 0xbf8 <_ZL8writeReghj>
     cc6:	62 e1       	ldi	r22, 0x12	; 18
     cc8:	84 ec       	ldi	r24, 0xC4	; 196
    writeReg(MAMXFL, MAX_FRAMELEN);
     cca:	8a df       	rcall	.-236    	; 0xbe0 <_ZL12writeRegBytehh>
     ccc:	6c ed       	ldi	r22, 0xDC	; 220
     cce:	75 e0       	ldi	r23, 0x05	; 5
    writeRegByte(MAADR5, macaddr[0]);
     cd0:	8a ec       	ldi	r24, 0xCA	; 202
     cd2:	92 df       	rcall	.-220    	; 0xbf8 <_ZL8writeReghj>
     cd4:	68 81       	ld	r22, Y
    writeRegByte(MAADR4, macaddr[1]);
     cd6:	84 ee       	ldi	r24, 0xE4	; 228
     cd8:	83 df       	rcall	.-250    	; 0xbe0 <_ZL12writeRegBytehh>
     cda:	69 81       	ldd	r22, Y+1	; 0x01
    writeRegByte(MAADR3, macaddr[2]);
     cdc:	85 ee       	ldi	r24, 0xE5	; 229
     cde:	80 df       	rcall	.-256    	; 0xbe0 <_ZL12writeRegBytehh>
    writeRegByte(MAADR2, macaddr[3]);
     ce0:	6a 81       	ldd	r22, Y+2	; 0x02
     ce2:	82 ee       	ldi	r24, 0xE2	; 226
     ce4:	7d df       	rcall	.-262    	; 0xbe0 <_ZL12writeRegBytehh>
    writeRegByte(MAADR1, macaddr[4]);
     ce6:	6b 81       	ldd	r22, Y+3	; 0x03
     ce8:	83 ee       	ldi	r24, 0xE3	; 227
     cea:	7a df       	rcall	.-268    	; 0xbe0 <_ZL12writeRegBytehh>
    writeRegByte(MAADR0, macaddr[5]);
     cec:	6c 81       	ldd	r22, Y+4	; 0x04
     cee:	80 ee       	ldi	r24, 0xE0	; 224
     cf0:	77 df       	rcall	.-274    	; 0xbe0 <_ZL12writeRegBytehh>
    writeRegByte(MICMD, 0x00);
    return readRegByte(MIRD+1);
}

static void writePhy (uint8_t address, uint16_t data) {
    writeRegByte(MIREGADR, address);
     cf2:	6d 81       	ldd	r22, Y+5	; 0x05
     cf4:	81 ee       	ldi	r24, 0xE1	; 225
     cf6:	74 df       	rcall	.-280    	; 0xbe0 <_ZL12writeRegBytehh>
    writeReg(MIWR, data);
     cf8:	60 e1       	ldi	r22, 0x10	; 16
     cfa:	84 ed       	ldi	r24, 0xD4	; 212
     cfc:	71 df       	rcall	.-286    	; 0xbe0 <_ZL12writeRegBytehh>
     cfe:	60 e0       	ldi	r22, 0x00	; 0
     d00:	71 e0       	ldi	r23, 0x01	; 1
    while (readRegByte(MISTAT) & MISTAT_BUSY)
     d02:	86 ed       	ldi	r24, 0xD6	; 214
     d04:	79 df       	rcall	.-270    	; 0xbf8 <_ZL8writeReghj>
     d06:	8a ee       	ldi	r24, 0xEA	; 234
     d08:	63 df       	rcall	.-314    	; 0xbd0 <_ZL11readRegByteh>
     d0a:	80 fd       	sbrc	r24, 0
    writeRegByte(MAADR3, macaddr[2]);
    writeRegByte(MAADR2, macaddr[3]);
    writeRegByte(MAADR1, macaddr[4]);
    writeRegByte(MAADR0, macaddr[5]);
    writePhy(PHCON2, PHCON2_HDLDIS);
    SetBank(ECON1);
     d0c:	fc cf       	rjmp	.-8      	; 0xd06 <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0xd2>
     d0e:	8f e1       	ldi	r24, 0x1F	; 31
     d10:	3a df       	rcall	.-396    	; 0xb86 <_ZL7SetBankh>
    writeOp(ENC28J60_BIT_FIELD_SET, EIE, EIE_INTIE|EIE_PKTIE);
     d12:	40 ec       	ldi	r20, 0xC0	; 192
     d14:	6b e1       	ldi	r22, 0x1B	; 27
     d16:	80 e8       	ldi	r24, 0x80	; 128
     d18:	fc de       	rcall	.-520    	; 0xb12 <_ZL7writeOphhh>
     d1a:	44 e0       	ldi	r20, 0x04	; 4
    writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN);
     d1c:	6f e1       	ldi	r22, 0x1F	; 31
     d1e:	80 e8       	ldi	r24, 0x80	; 128
     d20:	f8 de       	rcall	.-528    	; 0xb12 <_ZL7writeOphhh>
     d22:	82 e7       	ldi	r24, 0x72	; 114
     d24:	55 df       	rcall	.-342    	; 0xbd0 <_ZL11readRegByteh>

    uint8_t rev = readRegByte(EREVID);
     d26:	86 30       	cpi	r24, 0x06	; 6
     d28:	08 f0       	brcs	.+2      	; 0xd2c <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0xf8>
     d2a:	8f 5f       	subi	r24, 0xFF	; 255
    // microchip forgot to step the number on the silicon when they
    // released the revision B7. 6 is now rev B7. We still have
    // to see what they do when they release B8. At the moment
    // there is no B8 out yet
    if (rev > 5) ++rev;
     d2c:	df 91       	pop	r29
     d2e:	cf 91       	pop	r28
     d30:	0f 91       	pop	r16
    return rev;
}
     d32:	08 95       	ret

00000d34 <_ZN8ENC28J608isLinkUpEv>:
     d34:	61 e1       	ldi	r22, 0x11	; 17
     d36:	84 ed       	ldi	r24, 0xD4	; 212
     d38:	53 df       	rcall	.-346    	; 0xbe0 <_ZL12writeRegBytehh>
    writeRegByte(address + 1, data >> 8);
}

static uint16_t readPhyByte (uint8_t address) {
    writeRegByte(MIREGADR, address);
    writeRegByte(MICMD, MICMD_MIIRD);
     d3a:	61 e0       	ldi	r22, 0x01	; 1
     d3c:	82 ed       	ldi	r24, 0xD2	; 210
     d3e:	50 df       	rcall	.-352    	; 0xbe0 <_ZL12writeRegBytehh>
    while (readRegByte(MISTAT) & MISTAT_BUSY)
     d40:	8a ee       	ldi	r24, 0xEA	; 234
     d42:	46 df       	rcall	.-372    	; 0xbd0 <_ZL11readRegByteh>
     d44:	80 fd       	sbrc	r24, 0
     d46:	fc cf       	rjmp	.-8      	; 0xd40 <_ZN8ENC28J608isLinkUpEv+0xc>
        ;
    writeRegByte(MICMD, 0x00);
     d48:	60 e0       	ldi	r22, 0x00	; 0
     d4a:	82 ed       	ldi	r24, 0xD2	; 210
     d4c:	49 df       	rcall	.-366    	; 0xbe0 <_ZL12writeRegBytehh>
    return readRegByte(MIRD+1);
     d4e:	89 ed       	ldi	r24, 0xD9	; 217
     d50:	3f df       	rcall	.-386    	; 0xbd0 <_ZL11readRegByteh>
     d52:	82 fb       	bst	r24, 2
    return rev;
}

bool ENC28J60::isLinkUp() {
    return (readPhyByte(PHSTAT2) >> 2) & 1;
}
     d54:	88 27       	eor	r24, r24
     d56:	80 f9       	bld	r24, 0
     d58:	08 95       	ret

00000d5a <_ZN8ENC28J6010packetSendEj>:
     d5a:	af 92       	push	r10

struct transmit_status_vector {
    uint8_t bytes[7];
};

void ENC28J60::packetSend(uint16_t len) {
     d5c:	bf 92       	push	r11
     d5e:	cf 92       	push	r12
     d60:	df 92       	push	r13
     d62:	ef 92       	push	r14
     d64:	ff 92       	push	r15
     d66:	0f 93       	push	r16
     d68:	1f 93       	push	r17
     d6a:	cf 93       	push	r28
     d6c:	df 93       	push	r29
     d6e:	7c 01       	movw	r14, r24
        writeOp(ENC28J60_BIT_FIELD_CLR, EIR, EIR_TXERIF|EIR_TXIF);

        // prepare new transmission
        if (retry == 0) {
            writeReg(EWRPT, TXSTART_INIT);
            writeReg(ETXND, TXSTART_INIT+len);
     d70:	6c 01       	movw	r12, r24
     d72:	84 ef       	ldi	r24, 0xF4	; 244
     d74:	d8 1a       	sub	r13, r24

	static void write(const void *buf, uint16_t nbyte){
		if(nbyte == 0) return;
		
		const uint8_t* buff = (const uint8_t*)(buf);
		SPDR = *buff;
     d76:	0f 2e       	mov	r0, r31
     d78:	f1 e0       	ldi	r31, 0x01	; 1
     d7a:	af 2e       	mov	r10, r31
     d7c:	f3 e0       	ldi	r31, 0x03	; 3
     d7e:	bf 2e       	mov	r11, r31
     d80:	f0 2d       	mov	r31, r0
     d82:	87 01       	movw	r16, r14
     d84:	0f 5f       	subi	r16, 0xFF	; 255
     d86:	1c 4f       	sbci	r17, 0xFC	; 252
        // the Microchip TCP/IP stack implementation used to first check
        // whether TXERIF is set and only then reset the transmit logic
        // but this has been changed in later versions; possibly they
        // have a reason for this; they don't mention this in the errata
        // sheet
        writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRST);
     d88:	40 e8       	ldi	r20, 0x80	; 128
     d8a:	6f e1       	ldi	r22, 0x1F	; 31
     d8c:	80 e8       	ldi	r24, 0x80	; 128
     d8e:	c1 de       	rcall	.-638    	; 0xb12 <_ZL7writeOphhh>
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRST);
     d90:	40 e8       	ldi	r20, 0x80	; 128
     d92:	6f e1       	ldi	r22, 0x1F	; 31
     d94:	80 ea       	ldi	r24, 0xA0	; 160
     d96:	bd de       	rcall	.-646    	; 0xb12 <_ZL7writeOphhh>
        writeOp(ENC28J60_BIT_FIELD_CLR, EIR, EIR_TXERIF|EIR_TXIF);
     d98:	4a e0       	ldi	r20, 0x0A	; 10
     d9a:	6c e1       	ldi	r22, 0x1C	; 28
     d9c:	80 ea       	ldi	r24, 0xA0	; 160
     d9e:	b9 de       	rcall	.-654    	; 0xb12 <_ZL7writeOphhh>

        // prepare new transmission
        if (retry == 0) {
            writeReg(EWRPT, TXSTART_INIT);
     da0:	60 e0       	ldi	r22, 0x00	; 0
     da2:	7c e0       	ldi	r23, 0x0C	; 12
     da4:	82 e0       	ldi	r24, 0x02	; 2
            writeReg(ETXND, TXSTART_INIT+len);
     da6:	28 df       	rcall	.-432    	; 0xbf8 <_ZL8writeReghj>
     da8:	b6 01       	movw	r22, r12
     daa:	86 e0       	ldi	r24, 0x06	; 6
            writeOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
     dac:	25 df       	rcall	.-438    	; 0xbf8 <_ZL8writeReghj>
     dae:	40 e0       	ldi	r20, 0x00	; 0
     db0:	60 e0       	ldi	r22, 0x00	; 0
     db2:	8a e7       	ldi	r24, 0x7A	; 122
     db4:	ae de       	rcall	.-676    	; 0xb12 <_ZL7writeOphhh>
    }
    disableChip();
}

static void writeBuf(uint16_t len, const uint8_t* data) {
    enableChip();
     db6:	78 de       	rcall	.-784    	; 0xaa8 <_ZL10enableChipv>
     db8:	e1 14       	cp	r14, r1
    if (len != 0) {
     dba:	f1 04       	cpc	r15, r1
     dbc:	e1 f0       	breq	.+56     	; 0xdf6 <_ZN8ENC28J6010packetSendEj+0x9c>
     dbe:	8a e7       	ldi	r24, 0x7A	; 122
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     dc0:	8e bd       	out	0x2e, r24	; 46
     dc2:	00 00       	nop
		asm volatile("nop");
     dc4:	0d b4       	in	r0, 0x2d	; 45
		while(!(SPSR & _BV(SPIF)));
     dc6:	07 fe       	sbrs	r0, 7
     dc8:	fd cf       	rjmp	.-6      	; 0xdc4 <_ZN8ENC28J6010packetSendEj+0x6a>
     dca:	f5 01       	movw	r30, r10

	static void write(const void *buf, uint16_t nbyte){
		if(nbyte == 0) return;
		
		const uint8_t* buff = (const uint8_t*)(buf);
		SPDR = *buff;
     dcc:	80 81       	ld	r24, Z
     dce:	8e bd       	out	0x2e, r24	; 46
     dd0:	f1 e0       	ldi	r31, 0x01	; 1
		while(--nbyte){
     dd2:	ef 16       	cp	r14, r31
     dd4:	f1 04       	cpc	r15, r1
     dd6:	59 f0       	breq	.+22     	; 0xdee <_ZN8ENC28J6010packetSendEj+0x94>
     dd8:	e2 e0       	ldi	r30, 0x02	; 2
     dda:	f3 e0       	ldi	r31, 0x03	; 3
     ddc:	00 00       	nop
			asm volatile("nop");
     dde:	0d b4       	in	r0, 0x2d	; 45
			while (!(SPSR & _BV(SPIF))) ;
     de0:	07 fe       	sbrs	r0, 7
     de2:	fd cf       	rjmp	.-6      	; 0xdde <_ZN8ENC28J6010packetSendEj+0x84>
     de4:	81 91       	ld	r24, Z+
			SPDR = *++buff;
     de6:	8e bd       	out	0x2e, r24	; 46
     de8:	e0 17       	cp	r30, r16
	static void write(const void *buf, uint16_t nbyte){
		if(nbyte == 0) return;
		
		const uint8_t* buff = (const uint8_t*)(buf);
		SPDR = *buff;
		while(--nbyte){
     dea:	f1 07       	cpc	r31, r17
     dec:	b9 f7       	brne	.-18     	; 0xddc <_ZN8ENC28J6010packetSendEj+0x82>
			asm volatile("nop");
			while (!(SPSR & _BV(SPIF))) ;
			SPDR = *++buff;
		}
		asm volatile("nop");
     dee:	00 00       	nop
		while (!(SPSR & _BV(SPIF))) ;
     df0:	0d b4       	in	r0, 0x2d	; 45
     df2:	07 fe       	sbrs	r0, 7
        SPI.write8(ENC28J60_WRITE_BUF_MEM);

        SPI.write(data, len);
    }
    disableChip();
     df4:	fd cf       	rjmp	.-6      	; 0xdf0 <_ZN8ENC28J6010packetSendEj+0x96>
            writeOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
            writeBuf(len, buffer);
        }

        // initiate transmission
        writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
     df6:	63 de       	rcall	.-826    	; 0xabe <_ZL11disableChipv>
     df8:	48 e0       	ldi	r20, 0x08	; 8
     dfa:	6f e1       	ldi	r22, 0x1F	; 31
     dfc:	80 e8       	ldi	r24, 0x80	; 128
     dfe:	89 de       	rcall	.-750    	; 0xb12 <_ZL7writeOphhh>
        // wait until transmission has finished; referring to the data sheet and
        // to the errata (Errata Issue 13; Example 1) you only need to wait until either
        // TXIF or TXERIF gets set; however this leads to hangs; apparently Microchip
        // realized this and in later implementations of their tcp/ip stack they introduced
        // a counter to avoid hangs; of course they didn't update the errata sheet
        uint16_t count = 0;
     e00:	c0 e0       	ldi	r28, 0x00	; 0
     e02:	d0 e0       	ldi	r29, 0x00	; 0
        while ((readRegByte(EIR) & (EIR_TXIF | EIR_TXERIF)) == 0 && ++count < 1000U)
     e04:	8c e1       	ldi	r24, 0x1C	; 28
     e06:	e4 de       	rcall	.-568    	; 0xbd0 <_ZL11readRegByteh>
     e08:	8a 70       	andi	r24, 0x0A	; 10
     e0a:	31 f4       	brne	.+12     	; 0xe18 <_ZN8ENC28J6010packetSendEj+0xbe>
     e0c:	21 96       	adiw	r28, 0x01	; 1
     e0e:	c8 3e       	cpi	r28, 0xE8	; 232
     e10:	83 e0       	ldi	r24, 0x03	; 3
     e12:	d8 07       	cpc	r29, r24
     e14:	b9 f7       	brne	.-18     	; 0xe04 <_ZN8ENC28J6010packetSendEj+0xaa>
     e16:	0c c0       	rjmp	.+24     	; 0xe30 <_ZN8ENC28J6010packetSendEj+0xd6>
            ;

        if (!(readRegByte(EIR) & EIR_TXERIF) && count < 1000U) {
     e18:	8c e1       	ldi	r24, 0x1C	; 28
     e1a:	da de       	rcall	.-588    	; 0xbd0 <_ZL11readRegByteh>
     e1c:	81 fd       	sbrc	r24, 1
     e1e:	03 c0       	rjmp	.+6      	; 0xe26 <_ZN8ENC28J6010packetSendEj+0xcc>
     e20:	c8 3e       	cpi	r28, 0xE8	; 232
     e22:	d3 40       	sbci	r29, 0x03	; 3
            // no error; start new transmission
            break;
        }

        // cancel previous transmission if stuck
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRTS);
     e24:	40 f0       	brcs	.+16     	; 0xe36 <_ZN8ENC28J6010packetSendEj+0xdc>
     e26:	48 e0       	ldi	r20, 0x08	; 8
     e28:	6f e1       	ldi	r22, 0x1F	; 31
     e2a:	80 ea       	ldi	r24, 0xA0	; 160
     e2c:	72 de       	rcall	.-796    	; 0xb12 <_ZL7writeOphhh>
};

void ENC28J60::packetSend(uint16_t len) {
    uint8_t retry = 0;

    while (1) {
     e2e:	ac cf       	rjmp	.-168    	; 0xd88 <_ZN8ENC28J6010packetSendEj+0x2e>
        // a counter to avoid hangs; of course they didn't update the errata sheet
        uint16_t count = 0;
        while ((readRegByte(EIR) & (EIR_TXIF | EIR_TXERIF)) == 0 && ++count < 1000U)
            ;

        if (!(readRegByte(EIR) & EIR_TXERIF) && count < 1000U) {
     e30:	8c e1       	ldi	r24, 0x1C	; 28
     e32:	ce de       	rcall	.-612    	; 0xbd0 <_ZL11readRegByteh>
     e34:	f8 cf       	rjmp	.-16     	; 0xe26 <_ZN8ENC28J6010packetSendEj+0xcc>
     e36:	df 91       	pop	r29
        }

        // cancel previous transmission if stuck
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRTS);
    }
}
     e38:	cf 91       	pop	r28
     e3a:	1f 91       	pop	r17
     e3c:	0f 91       	pop	r16
     e3e:	ff 90       	pop	r15
     e40:	ef 90       	pop	r14
     e42:	df 90       	pop	r13
     e44:	cf 90       	pop	r12
     e46:	bf 90       	pop	r11
     e48:	af 90       	pop	r10
     e4a:	08 95       	ret

00000e4c <_ZN8ENC28J6013packetReceiveEv>:
     e4c:	0f 93       	push	r16


uint16_t ENC28J60::packetReceive() {
     e4e:	1f 93       	push	r17
     e50:	cf 93       	push	r28
     e52:	df 93       	push	r29
     e54:	00 d0       	rcall	.+0      	; 0xe56 <_ZN8ENC28J6013packetReceiveEv+0xa>
     e56:	00 d0       	rcall	.+0      	; 0xe58 <_ZN8ENC28J6013packetReceiveEv+0xc>
     e58:	cd b7       	in	r28, 0x3d	; 61
     e5a:	de b7       	in	r29, 0x3e	; 62
    static uint16_t gNextPacketPtr = RXSTART_INIT;
    static bool     unreleasedPacket = false;
    uint16_t len = 0;

    if (unreleasedPacket) {
     e5c:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <_ZZN8ENC28J6013packetReceiveEvE16unreleasedPacket>
     e60:	88 23       	and	r24, r24
     e62:	91 f0       	breq	.+36     	; 0xe88 <_ZN8ENC28J6013packetReceiveEv+0x3c>
        if (gNextPacketPtr == 0)
     e64:	60 91 f8 02 	lds	r22, 0x02F8	; 0x8002f8 <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr>
     e68:	70 91 f9 02 	lds	r23, 0x02F9	; 0x8002f9 <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr+0x1>
     e6c:	61 15       	cp	r22, r1
     e6e:	71 05       	cpc	r23, r1
     e70:	29 f4       	brne	.+10     	; 0xe7c <_ZN8ENC28J6013packetReceiveEv+0x30>
            writeReg(ERXRDPT, RXSTOP_INIT);
     e72:	6f ef       	ldi	r22, 0xFF	; 255
     e74:	7b e0       	ldi	r23, 0x0B	; 11
     e76:	8c e0       	ldi	r24, 0x0C	; 12
     e78:	bf de       	rcall	.-642    	; 0xbf8 <_ZL8writeReghj>
     e7a:	04 c0       	rjmp	.+8      	; 0xe84 <_ZN8ENC28J6013packetReceiveEv+0x38>
        else
            writeReg(ERXRDPT, gNextPacketPtr - 1);
     e7c:	61 50       	subi	r22, 0x01	; 1
     e7e:	71 09       	sbc	r23, r1
     e80:	8c e0       	ldi	r24, 0x0C	; 12
     e82:	ba de       	rcall	.-652    	; 0xbf8 <_ZL8writeReghj>
        unreleasedPacket = false;
     e84:	10 92 fa 02 	sts	0x02FA, r1	; 0x8002fa <_ZZN8ENC28J6013packetReceiveEvE16unreleasedPacket>
    }

    if (readRegByte(EPKTCNT) > 0) {
     e88:	89 e3       	ldi	r24, 0x39	; 57
     e8a:	a2 de       	rcall	.-700    	; 0xbd0 <_ZL11readRegByteh>
     e8c:	88 23       	and	r24, r24
     e8e:	a9 f1       	breq	.+106    	; 0xefa <_ZN8ENC28J6013packetReceiveEv+0xae>
        writeReg(ERDPT, gNextPacketPtr);
     e90:	60 91 f8 02 	lds	r22, 0x02F8	; 0x8002f8 <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr>
     e94:	70 91 f9 02 	lds	r23, 0x02F9	; 0x8002f9 <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr+0x1>
     e98:	80 e0       	ldi	r24, 0x00	; 0
     e9a:	ae de       	rcall	.-676    	; 0xbf8 <_ZL8writeReghj>
            uint16_t nextPacket;
            uint16_t byteCount;
            uint16_t status;
        } header;

        readBuf(sizeof header, (uint8_t*) &header);
     e9c:	be 01       	movw	r22, r28
     e9e:	6f 5f       	subi	r22, 0xFF	; 255
     ea0:	7f 4f       	sbci	r23, 0xFF	; 255
     ea2:	86 e0       	ldi	r24, 0x06	; 6
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	4d de       	rcall	.-870    	; 0xb42 <_ZL7readBufjPh>

        gNextPacketPtr  = header.nextPacket;
     ea8:	89 81       	ldd	r24, Y+1	; 0x01
     eaa:	9a 81       	ldd	r25, Y+2	; 0x02
     eac:	90 93 f9 02 	sts	0x02F9, r25	; 0x8002f9 <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr+0x1>
     eb0:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr>
        len = header.byteCount - 4; //remove the CRC count
        if (len>bufferSize-1)
            len=bufferSize-1;
        if ((header.status & 0x80)==0)
     eb4:	8d 81       	ldd	r24, Y+5	; 0x05
     eb6:	87 ff       	sbrs	r24, 7
     eb8:	12 c0       	rjmp	.+36     	; 0xede <_ZN8ENC28J6013packetReceiveEv+0x92>

        readBuf(sizeof header, (uint8_t*) &header);

        gNextPacketPtr  = header.nextPacket;
        len = header.byteCount - 4; //remove the CRC count
        if (len>bufferSize-1)
     eba:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <_ZN8ENC28J6010bufferSizeE>
     ebe:	90 91 00 03 	lds	r25, 0x0300	; 0x800300 <_ZN8ENC28J6010bufferSizeE+0x1>
     ec2:	01 97       	sbiw	r24, 0x01	; 1
        } header;

        readBuf(sizeof header, (uint8_t*) &header);

        gNextPacketPtr  = header.nextPacket;
        len = header.byteCount - 4; //remove the CRC count
     ec4:	0b 81       	ldd	r16, Y+3	; 0x03
     ec6:	1c 81       	ldd	r17, Y+4	; 0x04
     ec8:	04 50       	subi	r16, 0x04	; 4
     eca:	11 09       	sbc	r17, r1
     ecc:	80 17       	cp	r24, r16
     ece:	91 07       	cpc	r25, r17
     ed0:	08 f4       	brcc	.+2      	; 0xed4 <_ZN8ENC28J6013packetReceiveEv+0x88>
        if (len>bufferSize-1)
            len=bufferSize-1;
        if ((header.status & 0x80)==0)
            len = 0;
        else
            readBuf(len, buffer);
     ed2:	8c 01       	movw	r16, r24
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	73 e0       	ldi	r23, 0x03	; 3
     ed8:	c8 01       	movw	r24, r16
     eda:	33 de       	rcall	.-922    	; 0xb42 <_ZL7readBufjPh>
     edc:	02 c0       	rjmp	.+4      	; 0xee2 <_ZN8ENC28J6013packetReceiveEv+0x96>
        gNextPacketPtr  = header.nextPacket;
        len = header.byteCount - 4; //remove the CRC count
        if (len>bufferSize-1)
            len=bufferSize-1;
        if ((header.status & 0x80)==0)
            len = 0;
     ede:	00 e0       	ldi	r16, 0x00	; 0
     ee0:	10 e0       	ldi	r17, 0x00	; 0
        else
            readBuf(len, buffer);
        buffer[len] = 0;
     ee2:	f8 01       	movw	r30, r16
     ee4:	ef 5f       	subi	r30, 0xFF	; 255
     ee6:	fc 4f       	sbci	r31, 0xFC	; 252
     ee8:	10 82       	st	Z, r1
        unreleasedPacket = true;
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <_ZZN8ENC28J6013packetReceiveEvE16unreleasedPacket>

        writeOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
     ef0:	40 e4       	ldi	r20, 0x40	; 64
     ef2:	6e e1       	ldi	r22, 0x1E	; 30
     ef4:	80 e8       	ldi	r24, 0x80	; 128
     ef6:	0d de       	rcall	.-998    	; 0xb12 <_ZL7writeOphhh>
     ef8:	02 c0       	rjmp	.+4      	; 0xefe <_ZN8ENC28J6013packetReceiveEv+0xb2>


uint16_t ENC28J60::packetReceive() {
    static uint16_t gNextPacketPtr = RXSTART_INIT;
    static bool     unreleasedPacket = false;
    uint16_t len = 0;
     efa:	00 e0       	ldi	r16, 0x00	; 0
     efc:	10 e0       	ldi	r17, 0x00	; 0
        unreleasedPacket = true;

        writeOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
    }
    return len;
}
     efe:	c8 01       	movw	r24, r16
     f00:	26 96       	adiw	r28, 0x06	; 6
     f02:	0f b6       	in	r0, 0x3f	; 63
     f04:	f8 94       	cli
     f06:	de bf       	out	0x3e, r29	; 62
     f08:	0f be       	out	0x3f, r0	; 63
     f0a:	cd bf       	out	0x3d, r28	; 61
     f0c:	df 91       	pop	r29
     f0e:	cf 91       	pop	r28
     f10:	1f 91       	pop	r17
     f12:	0f 91       	pop	r16
     f14:	08 95       	ret

00000f16 <_ZN9EtherCard5beginEPKhRVhS3_h>:
uint16_t EtherCard::delaycnt = 0; //request gateway ARP lookup

uint8_t Ethernet::buffer[ETHER_CARD_BUFFER_SIZE]; // tcp/ip send and receive buffer

uint8_t EtherCard::begin (const uint8_t* macaddr,
                          Register& csDDR, Register& csPort, uint8_t csPin) {
     f16:	ef 92       	push	r14
     f18:	ff 92       	push	r15
     f1a:	0f 93       	push	r16
     f1c:	cf 93       	push	r28
     f1e:	df 93       	push	r29
     f20:	eb 01       	movw	r28, r22
     f22:	7a 01       	movw	r14, r20
     f24:	02 2f       	mov	r16, r18

    copyMac(mymac, macaddr);
     f26:	bc 01       	movw	r22, r24
     f28:	8b e1       	ldi	r24, 0x1B	; 27
     f2a:	95 e0       	ldi	r25, 0x05	; 5
     f2c:	c9 d3       	rcall	.+1938   	; 0x16c0 <_ZN9EtherCard7copyMacEPhPKh>
    return initialize(ETHER_CARD_BUFFER_SIZE, mymac, csDDR, csPort, csPin);
     f2e:	97 01       	movw	r18, r14
     f30:	ae 01       	movw	r20, r28
     f32:	6b e1       	ldi	r22, 0x1B	; 27
     f34:	75 e0       	ldi	r23, 0x05	; 5
     f36:	80 e0       	ldi	r24, 0x00	; 0
     f38:	92 e0       	ldi	r25, 0x02	; 2
     f3a:	7c de       	rcall	.-776    	; 0xc34 <_ZN8ENC28J6010initializeEjPKhRVhS3_h>
}
     f3c:	df 91       	pop	r29
     f3e:	cf 91       	pop	r28
     f40:	0f 91       	pop	r16
     f42:	ff 90       	pop	r15
     f44:	ef 90       	pop	r14
     f46:	08 95       	ret

00000f48 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_>:

bool EtherCard::staticSetup (const uint8_t* my_ip,
                             const uint8_t* gw_ip,
                             const uint8_t* dns_ip,
                             const uint8_t* mask) {
     f48:	ef 92       	push	r14
     f4a:	ff 92       	push	r15
     f4c:	0f 93       	push	r16
     f4e:	1f 93       	push	r17
     f50:	cf 93       	push	r28
     f52:	df 93       	push	r29
     f54:	7b 01       	movw	r14, r22
     f56:	8a 01       	movw	r16, r20
     f58:	e9 01       	movw	r28, r18

    if (my_ip != 0)
     f5a:	00 97       	sbiw	r24, 0x00	; 0
     f5c:	21 f0       	breq	.+8      	; 0xf66 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x1e>
        copyIp(myip, my_ip);
     f5e:	bc 01       	movw	r22, r24
     f60:	87 e1       	ldi	r24, 0x17	; 23
     f62:	95 e0       	ldi	r25, 0x05	; 5
     f64:	a0 d3       	rcall	.+1856   	; 0x16a6 <_ZN9EtherCard6copyIpEPhPKh>
    if (gw_ip != 0)
     f66:	e1 14       	cp	r14, r1
     f68:	f1 04       	cpc	r15, r1
     f6a:	11 f0       	breq	.+4      	; 0xf70 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x28>
        setGwIp(gw_ip);
     f6c:	c7 01       	movw	r24, r14
     f6e:	bd d1       	rcall	.+890    	; 0x12ea <_ZN9EtherCard7setGwIpEPKh>
    if (dns_ip != 0)
     f70:	01 15       	cp	r16, r1
     f72:	11 05       	cpc	r17, r1
     f74:	21 f0       	breq	.+8      	; 0xf7e <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x36>
        copyIp(dnsip, dns_ip);
     f76:	b8 01       	movw	r22, r16
     f78:	87 e0       	ldi	r24, 0x07	; 7
     f7a:	95 e0       	ldi	r25, 0x05	; 5
     f7c:	94 d3       	rcall	.+1832   	; 0x16a6 <_ZN9EtherCard6copyIpEPhPKh>
    if(mask != 0)
     f7e:	20 97       	sbiw	r28, 0x00	; 0
     f80:	21 f0       	breq	.+8      	; 0xf8a <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x42>
        copyIp(netmask, mask);
     f82:	be 01       	movw	r22, r28
     f84:	83 e1       	ldi	r24, 0x13	; 19
     f86:	95 e0       	ldi	r25, 0x05	; 5
    updateBroadcastAddress();
     f88:	8e d3       	rcall	.+1820   	; 0x16a6 <_ZN9EtherCard6copyIpEPhPKh>
     f8a:	bb d1       	rcall	.+886    	; 0x1302 <_ZN9EtherCard22updateBroadcastAddressEv>
    delaycnt = 0; //request gateway ARP lookup
     f8c:	10 92 02 05 	sts	0x0502, r1	; 0x800502 <_ZN9EtherCard8delaycntE+0x1>
     f90:	10 92 01 05 	sts	0x0501, r1	; 0x800501 <_ZN9EtherCard8delaycntE>
    return true;
}
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	df 91       	pop	r29
     f98:	cf 91       	pop	r28
     f9a:	1f 91       	pop	r17
     f9c:	0f 91       	pop	r16
     f9e:	ff 90       	pop	r15
     fa0:	ef 90       	pop	r14
     fa2:	08 95       	ret

00000fa4 <_ZL13fill_checksumhhjh>:
    for(uint8_t i=0; i<IP_LEN; i++)
        broadcastip[i] = myip[i] | ~netmask[i];
}

void EtherCard::registerPingCallback (void (*callback)(uint8_t *srcip)) {
    icmp_cb = callback;
     fa4:	cf 92       	push	r12
     fa6:	df 92       	push	r13
     fa8:	ef 92       	push	r14
     faa:	ff 92       	push	r15
     fac:	cf 93       	push	r28
     fae:	df 93       	push	r29
     fb0:	c6 2f       	mov	r28, r22
     fb2:	d0 e0       	ldi	r29, 0x00	; 0
     fb4:	cf 5f       	subi	r28, 0xFF	; 255
     fb6:	dc 4f       	sbci	r29, 0xFC	; 252
     fb8:	21 30       	cpi	r18, 0x01	; 1
     fba:	81 f4       	brne	.+32     	; 0xfdc <_ZL13fill_checksumhhjh+0x38>
     fbc:	6a 01       	movw	r12, r20
     fbe:	99 e0       	ldi	r25, 0x09	; 9
     fc0:	c9 0e       	add	r12, r25
     fc2:	d1 1c       	adc	r13, r1
     fc4:	e1 2c       	mov	r14, r1
     fc6:	f1 2c       	mov	r15, r1
     fc8:	03 c0       	rjmp	.+6      	; 0xfd0 <_ZL13fill_checksumhhjh+0x2c>
     fca:	c1 2c       	mov	r12, r1
     fcc:	d1 2c       	mov	r13, r1
     fce:	76 01       	movw	r14, r12
     fd0:	42 30       	cpi	r20, 0x02	; 2
     fd2:	51 05       	cpc	r21, r1
     fd4:	28 f1       	brcs	.+74     	; 0x1020 <_ZL13fill_checksumhhjh+0x7c>
     fd6:	fe 01       	movw	r30, r28
     fd8:	da 01       	movw	r26, r20
     fda:	09 c0       	rjmp	.+18     	; 0xfee <_ZL13fill_checksumhhjh+0x4a>
     fdc:	22 30       	cpi	r18, 0x02	; 2
     fde:	a9 f7       	brne	.-22     	; 0xfca <_ZL13fill_checksumhhjh+0x26>
     fe0:	6a 01       	movw	r12, r20
     fe2:	92 e0       	ldi	r25, 0x02	; 2
     fe4:	c9 1a       	sub	r12, r25
     fe6:	d1 08       	sbc	r13, r1
     fe8:	e1 2c       	mov	r14, r1
     fea:	f1 2c       	mov	r15, r1
     fec:	f1 cf       	rjmp	.-30     	; 0xfd0 <_ZL13fill_checksumhhjh+0x2c>
     fee:	20 81       	ld	r18, Z
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	32 2f       	mov	r19, r18
     ff4:	22 27       	eor	r18, r18
     ff6:	91 81       	ldd	r25, Z+1	; 0x01
     ff8:	29 2b       	or	r18, r25
     ffa:	c2 0e       	add	r12, r18
     ffc:	d3 1e       	adc	r13, r19
     ffe:	e1 1c       	adc	r14, r1
    1000:	f1 1c       	adc	r15, r1
    1002:	32 96       	adiw	r30, 0x02	; 2
    1004:	12 97       	sbiw	r26, 0x02	; 2
    1006:	a2 30       	cpi	r26, 0x02	; 2
    1008:	b1 05       	cpc	r27, r1
    100a:	88 f7       	brcc	.-30     	; 0xfee <_ZL13fill_checksumhhjh+0x4a>
    100c:	9a 01       	movw	r18, r20
    100e:	22 50       	subi	r18, 0x02	; 2
    1010:	31 09       	sbc	r19, r1
    1012:	2e 7f       	andi	r18, 0xFE	; 254
    1014:	2e 5f       	subi	r18, 0xFE	; 254
    1016:	3f 4f       	sbci	r19, 0xFF	; 255
    1018:	c2 0f       	add	r28, r18
    101a:	d3 1f       	adc	r29, r19
    101c:	41 70       	andi	r20, 0x01	; 1
    101e:	55 27       	eor	r21, r21
    1020:	45 2b       	or	r20, r21
    1022:	61 f0       	breq	.+24     	; 0x103c <_ZL13fill_checksumhhjh+0x98>
    1024:	48 81       	ld	r20, Y
    1026:	50 e0       	ldi	r21, 0x00	; 0
    1028:	60 e0       	ldi	r22, 0x00	; 0
    102a:	70 e0       	ldi	r23, 0x00	; 0
    102c:	76 2f       	mov	r23, r22
    102e:	65 2f       	mov	r22, r21
    1030:	54 2f       	mov	r21, r20
    1032:	44 27       	eor	r20, r20
    1034:	c4 0e       	add	r12, r20
    1036:	d5 1e       	adc	r13, r21
    1038:	e6 1e       	adc	r14, r22
    103a:	f7 1e       	adc	r15, r23
    103c:	a7 01       	movw	r20, r14
    103e:	66 27       	eor	r22, r22
    1040:	77 27       	eor	r23, r23
    1042:	41 15       	cp	r20, r1
    1044:	51 05       	cpc	r21, r1
    1046:	61 05       	cpc	r22, r1
    1048:	71 05       	cpc	r23, r1
    104a:	71 f0       	breq	.+28     	; 0x1068 <_ZL13fill_checksumhhjh+0xc4>
    104c:	ee 24       	eor	r14, r14
    104e:	ff 24       	eor	r15, r15
    1050:	c4 0e       	add	r12, r20
    1052:	d5 1e       	adc	r13, r21
    1054:	e6 1e       	adc	r14, r22
    1056:	f7 1e       	adc	r15, r23
    1058:	a7 01       	movw	r20, r14
    105a:	66 27       	eor	r22, r22
    105c:	77 27       	eor	r23, r23
    105e:	41 15       	cp	r20, r1
    1060:	51 05       	cpc	r21, r1
    1062:	61 05       	cpc	r22, r1
    1064:	71 05       	cpc	r23, r1
    1066:	91 f7       	brne	.-28     	; 0x104c <_ZL13fill_checksumhhjh+0xa8>
    1068:	c0 94       	com	r12
    106a:	d0 94       	com	r13
    106c:	e8 2f       	mov	r30, r24
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	ef 5f       	subi	r30, 0xFF	; 255
    1072:	fc 4f       	sbci	r31, 0xFC	; 252
    1074:	d0 82       	st	Z, r13
    1076:	c1 82       	std	Z+1, r12	; 0x01
    1078:	df 91       	pop	r29
    107a:	cf 91       	pop	r28
    107c:	ff 90       	pop	r15
    107e:	ef 90       	pop	r14
    1080:	df 90       	pop	r13
    1082:	cf 90       	pop	r12
    1084:	08 95       	ret

00001086 <_ZL6is_lanPKhS0_>:
    1086:	cf 93       	push	r28
    1088:	df 93       	push	r29
    108a:	fc 01       	movw	r30, r24
    108c:	20 81       	ld	r18, Z
    108e:	22 23       	and	r18, r18
    1090:	d1 f0       	breq	.+52     	; 0x10c6 <_ZL6is_lanPKhS0_+0x40>
    1092:	fb 01       	movw	r30, r22
    1094:	30 81       	ld	r19, Z
    1096:	33 23       	and	r19, r19
    1098:	c1 f0       	breq	.+48     	; 0x10ca <_ZL6is_lanPKhS0_+0x44>
    109a:	23 27       	eor	r18, r19
    109c:	30 91 13 05 	lds	r19, 0x0513	; 0x800513 <_ZN9EtherCard7netmaskE>
    10a0:	23 23       	and	r18, r19
    10a2:	a9 f4       	brne	.+42     	; 0x10ce <_ZL6is_lanPKhS0_+0x48>
    10a4:	dc 01       	movw	r26, r24
    10a6:	11 96       	adiw	r26, 0x01	; 1
    10a8:	31 96       	adiw	r30, 0x01	; 1
    10aa:	c4 e1       	ldi	r28, 0x14	; 20
    10ac:	d5 e0       	ldi	r29, 0x05	; 5
    10ae:	04 96       	adiw	r24, 0x04	; 4
    10b0:	4d 91       	ld	r20, X+
    10b2:	21 91       	ld	r18, Z+
    10b4:	39 91       	ld	r19, Y+
    10b6:	24 27       	eor	r18, r20
    10b8:	23 23       	and	r18, r19
    10ba:	59 f4       	brne	.+22     	; 0x10d2 <_ZL6is_lanPKhS0_+0x4c>
    10bc:	a8 17       	cp	r26, r24
    10be:	b9 07       	cpc	r27, r25
    10c0:	b9 f7       	brne	.-18     	; 0x10b0 <_ZL6is_lanPKhS0_+0x2a>
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	07 c0       	rjmp	.+14     	; 0x10d4 <_ZL6is_lanPKhS0_+0x4e>
    10c6:	80 e0       	ldi	r24, 0x00	; 0
    10c8:	05 c0       	rjmp	.+10     	; 0x10d4 <_ZL6is_lanPKhS0_+0x4e>
    10ca:	80 e0       	ldi	r24, 0x00	; 0
    10cc:	03 c0       	rjmp	.+6      	; 0x10d4 <_ZL6is_lanPKhS0_+0x4e>
    10ce:	80 e0       	ldi	r24, 0x00	; 0
    10d0:	01 c0       	rjmp	.+2      	; 0x10d4 <_ZL6is_lanPKhS0_+0x4e>
    10d2:	80 e0       	ldi	r24, 0x00	; 0
    10d4:	df 91       	pop	r29
    10d6:	cf 91       	pop	r28
    10d8:	08 95       	ret

000010da <_ZL20fill_ip_hdr_checksumv>:
    10da:	e1 e0       	ldi	r30, 0x01	; 1
    10dc:	f3 e0       	ldi	r31, 0x03	; 3
    10de:	10 8e       	std	Z+24, r1	; 0x18
    10e0:	11 8e       	std	Z+25, r1	; 0x19
    10e2:	80 e4       	ldi	r24, 0x40	; 64
    10e4:	84 8b       	std	Z+20, r24	; 0x14
    10e6:	15 8a       	std	Z+21, r1	; 0x15
    10e8:	86 8b       	std	Z+22, r24	; 0x16
    10ea:	20 e0       	ldi	r18, 0x00	; 0
    10ec:	44 e1       	ldi	r20, 0x14	; 20
    10ee:	50 e0       	ldi	r21, 0x00	; 0
    10f0:	6e e0       	ldi	r22, 0x0E	; 14
    10f2:	88 e1       	ldi	r24, 0x18	; 24
    10f4:	57 cf       	rjmp	.-338    	; 0xfa4 <_ZL13fill_checksumhhjh>
    10f6:	08 95       	ret

000010f8 <_ZL7setMACsPKh>:
    10f8:	bc 01       	movw	r22, r24
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	93 e0       	ldi	r25, 0x03	; 3
    10fe:	e0 d2       	rcall	.+1472   	; 0x16c0 <_ZN9EtherCard7copyMacEPhPKh>
    1100:	6b e1       	ldi	r22, 0x1B	; 27
    1102:	75 e0       	ldi	r23, 0x05	; 5
    1104:	87 e0       	ldi	r24, 0x07	; 7
    1106:	93 e0       	ldi	r25, 0x03	; 3
    1108:	db c2       	rjmp	.+1462   	; 0x16c0 <_ZN9EtherCard7copyMacEPhPKh>
    110a:	08 95       	ret

0000110c <_ZL11make_eth_ipv>:
    110c:	87 e0       	ldi	r24, 0x07	; 7
    110e:	93 e0       	ldi	r25, 0x03	; 3
    1110:	f3 df       	rcall	.-26     	; 0x10f8 <_ZL7setMACsPKh>
    1112:	6b e1       	ldi	r22, 0x1B	; 27
    1114:	73 e0       	ldi	r23, 0x03	; 3
    1116:	8f e1       	ldi	r24, 0x1F	; 31
    1118:	93 e0       	ldi	r25, 0x03	; 3
    111a:	c5 d2       	rcall	.+1418   	; 0x16a6 <_ZN9EtherCard6copyIpEPhPKh>
    111c:	67 e1       	ldi	r22, 0x17	; 23
    111e:	75 e0       	ldi	r23, 0x05	; 5
    1120:	8b e1       	ldi	r24, 0x1B	; 27
    1122:	93 e0       	ldi	r25, 0x03	; 3
    1124:	c0 d2       	rcall	.+1408   	; 0x16a6 <_ZN9EtherCard6copyIpEPhPKh>
    1126:	d9 cf       	rjmp	.-78     	; 0x10da <_ZL20fill_ip_hdr_checksumv>
    1128:	08 95       	ret

0000112a <_ZL12setMACandIPsPKhS0_>:
    112a:	cf 93       	push	r28
    112c:	df 93       	push	r29
    112e:	eb 01       	movw	r28, r22
    1130:	e3 df       	rcall	.-58     	; 0x10f8 <_ZL7setMACsPKh>
    1132:	be 01       	movw	r22, r28
    1134:	8f e1       	ldi	r24, 0x1F	; 31
    1136:	93 e0       	ldi	r25, 0x03	; 3
    1138:	b6 d2       	rcall	.+1388   	; 0x16a6 <_ZN9EtherCard6copyIpEPhPKh>
    113a:	67 e1       	ldi	r22, 0x17	; 23
    113c:	75 e0       	ldi	r23, 0x05	; 5
    113e:	8b e1       	ldi	r24, 0x1B	; 27
    1140:	93 e0       	ldi	r25, 0x03	; 3
    1142:	b1 d2       	rcall	.+1378   	; 0x16a6 <_ZN9EtherCard6copyIpEPhPKh>
    1144:	df 91       	pop	r29
    1146:	cf 91       	pop	r28
    1148:	08 95       	ret

0000114a <_ZL16client_store_macPhS_>:
    114a:	cf 93       	push	r28
    114c:	df 93       	push	r29
    114e:	eb 01       	movw	r28, r22
    1150:	44 e0       	ldi	r20, 0x04	; 4
    1152:	50 e0       	ldi	r21, 0x00	; 0
    1154:	bc 01       	movw	r22, r24
    1156:	8d e1       	ldi	r24, 0x1D	; 29
    1158:	93 e0       	ldi	r25, 0x03	; 3
    115a:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <memcmp>
    115e:	89 2b       	or	r24, r25
    1160:	31 f4       	brne	.+12     	; 0x116e <_ZL16client_store_macPhS_+0x24>
    1162:	67 e1       	ldi	r22, 0x17	; 23
    1164:	73 e0       	ldi	r23, 0x03	; 3
    1166:	ce 01       	movw	r24, r28
    1168:	ab d2       	rcall	.+1366   	; 0x16c0 <_ZN9EtherCard7copyMacEPhPKh>
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	01 c0       	rjmp	.+2      	; 0x1170 <_ZL16client_store_macPhS_+0x26>
    116e:	80 e0       	ldi	r24, 0x00	; 0
    1170:	df 91       	pop	r29
    1172:	cf 91       	pop	r28
    1174:	08 95       	ret

00001176 <_ZL17client_arp_whohasPh>:
    1176:	0f 93       	push	r16
    1178:	1f 93       	push	r17
    117a:	cf 93       	push	r28
    117c:	8c 01       	movw	r16, r24
    117e:	85 e2       	ldi	r24, 0x25	; 37
    1180:	92 e0       	ldi	r25, 0x02	; 2
    1182:	ba df       	rcall	.-140    	; 0x10f8 <_ZL7setMACsPKh>
    1184:	e1 e0       	ldi	r30, 0x01	; 1
    1186:	f3 e0       	ldi	r31, 0x03	; 3
    1188:	88 e0       	ldi	r24, 0x08	; 8
    118a:	84 87       	std	Z+12, r24	; 0x0c
    118c:	c6 e0       	ldi	r28, 0x06	; 6
    118e:	c5 87       	std	Z+13, r28	; 0x0d
    1190:	48 e0       	ldi	r20, 0x08	; 8
    1192:	50 e0       	ldi	r21, 0x00	; 0
    1194:	6f e7       	ldi	r22, 0x7F	; 127
    1196:	72 e0       	ldi	r23, 0x02	; 2
    1198:	8f e0       	ldi	r24, 0x0F	; 15
    119a:	93 e0       	ldi	r25, 0x03	; 3
    119c:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <memcpy_P>
    11a0:	e1 e2       	ldi	r30, 0x21	; 33
    11a2:	f3 e0       	ldi	r31, 0x03	; 3
    11a4:	df 01       	movw	r26, r30
    11a6:	1d 92       	st	X+, r1
    11a8:	ca 95       	dec	r28
    11aa:	e9 f7       	brne	.-6      	; 0x11a6 <_ZL17client_arp_whohasPh+0x30>
    11ac:	6b e1       	ldi	r22, 0x1B	; 27
    11ae:	75 e0       	ldi	r23, 0x05	; 5
    11b0:	87 e1       	ldi	r24, 0x17	; 23
    11b2:	93 e0       	ldi	r25, 0x03	; 3
    11b4:	85 d2       	rcall	.+1290   	; 0x16c0 <_ZN9EtherCard7copyMacEPhPKh>
    11b6:	b8 01       	movw	r22, r16
    11b8:	87 e2       	ldi	r24, 0x27	; 39
    11ba:	93 e0       	ldi	r25, 0x03	; 3
    11bc:	74 d2       	rcall	.+1256   	; 0x16a6 <_ZN9EtherCard6copyIpEPhPKh>
    11be:	67 e1       	ldi	r22, 0x17	; 23
    11c0:	75 e0       	ldi	r23, 0x05	; 5
    11c2:	8d e1       	ldi	r24, 0x1D	; 29
    11c4:	93 e0       	ldi	r25, 0x03	; 3
    11c6:	6f d2       	rcall	.+1246   	; 0x16a6 <_ZN9EtherCard6copyIpEPhPKh>
    11c8:	8a e2       	ldi	r24, 0x2A	; 42
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	c6 dd       	rcall	.-1140   	; 0xd5a <_ZN8ENC28J6010packetSendEj>
    11ce:	cf 91       	pop	r28
    11d0:	1f 91       	pop	r17
    11d2:	0f 91       	pop	r16
    11d4:	08 95       	ret

000011d6 <_ZN9EtherCard10udpPrepareEjPKhj>:
    11d6:	ef 92       	push	r14
    11d8:	ff 92       	push	r15
    11da:	0f 93       	push	r16
    11dc:	1f 93       	push	r17
    11de:	cf 93       	push	r28
    11e0:	df 93       	push	r29
    11e2:	18 2f       	mov	r17, r24
    11e4:	09 2f       	mov	r16, r25
    11e6:	eb 01       	movw	r28, r22
    11e8:	f4 2e       	mov	r15, r20
    11ea:	e5 2e       	mov	r14, r21
    11ec:	87 e1       	ldi	r24, 0x17	; 23
    11ee:	95 e0       	ldi	r25, 0x05	; 5
    11f0:	4a df       	rcall	.-364    	; 0x1086 <_ZL6is_lanPKhS0_>
    11f2:	88 23       	and	r24, r24
    11f4:	29 f0       	breq	.+10     	; 0x1200 <_ZN9EtherCard10udpPrepareEjPKhj+0x2a>
    11f6:	be 01       	movw	r22, r28
    11f8:	8c e2       	ldi	r24, 0x2C	; 44
    11fa:	95 e0       	ldi	r25, 0x05	; 5
    11fc:	96 df       	rcall	.-212    	; 0x112a <_ZL12setMACandIPsPKhS0_>
    11fe:	04 c0       	rjmp	.+8      	; 0x1208 <_ZN9EtherCard10udpPrepareEjPKhj+0x32>
    1200:	be 01       	movw	r22, r28
    1202:	82 e2       	ldi	r24, 0x22	; 34
    1204:	95 e0       	ldi	r25, 0x05	; 5
    1206:	91 df       	rcall	.-222    	; 0x112a <_ZL12setMACandIPsPKhS0_>
    1208:	88 81       	ld	r24, Y
    120a:	80 7f       	andi	r24, 0xF0	; 240
    120c:	80 3e       	cpi	r24, 0xE0	; 224
    120e:	91 f0       	breq	.+36     	; 0x1234 <_ZN9EtherCard10udpPrepareEjPKhj+0x5e>
    1210:	88 81       	ld	r24, Y
    1212:	99 81       	ldd	r25, Y+1	; 0x01
    1214:	aa 81       	ldd	r26, Y+2	; 0x02
    1216:	bb 81       	ldd	r27, Y+3	; 0x03
    1218:	8f 3f       	cpi	r24, 0xFF	; 255
    121a:	9f 4f       	sbci	r25, 0xFF	; 255
    121c:	af 4f       	sbci	r26, 0xFF	; 255
    121e:	bf 4f       	sbci	r27, 0xFF	; 255
    1220:	49 f0       	breq	.+18     	; 0x1234 <_ZN9EtherCard10udpPrepareEjPKhj+0x5e>
    1222:	44 e0       	ldi	r20, 0x04	; 4
    1224:	50 e0       	ldi	r21, 0x00	; 0
    1226:	be 01       	movw	r22, r28
    1228:	8f e0       	ldi	r24, 0x0F	; 15
    122a:	95 e0       	ldi	r25, 0x05	; 5
    122c:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <memcmp>
    1230:	89 2b       	or	r24, r25
    1232:	29 f4       	brne	.+10     	; 0x123e <_ZN9EtherCard10udpPrepareEjPKhj+0x68>
    1234:	65 e2       	ldi	r22, 0x25	; 37
    1236:	72 e0       	ldi	r23, 0x02	; 2
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	93 e0       	ldi	r25, 0x03	; 3
    123c:	41 d2       	rcall	.+1154   	; 0x16c0 <_ZN9EtherCard7copyMacEPhPKh>
    123e:	c1 e0       	ldi	r28, 0x01	; 1
    1240:	d3 e0       	ldi	r29, 0x03	; 3
    1242:	88 e0       	ldi	r24, 0x08	; 8
    1244:	8c 87       	std	Y+12, r24	; 0x0c
    1246:	1d 86       	std	Y+13, r1	; 0x0d
    1248:	49 e0       	ldi	r20, 0x09	; 9
    124a:	50 e0       	ldi	r21, 0x00	; 0
    124c:	66 e7       	ldi	r22, 0x76	; 118
    124e:	72 e0       	ldi	r23, 0x02	; 2
    1250:	8f e0       	ldi	r24, 0x0F	; 15
    1252:	93 e0       	ldi	r25, 0x03	; 3
    1254:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <memcpy_P>
    1258:	18 8a       	std	Y+16, r1	; 0x10
    125a:	81 e1       	ldi	r24, 0x11	; 17
    125c:	8f 8b       	std	Y+23, r24	; 0x17
    125e:	ec a2       	std	Y+36, r14	; 0x24
    1260:	fd a2       	std	Y+37, r15	; 0x25
    1262:	0a a3       	std	Y+34, r16	; 0x22
    1264:	1b a3       	std	Y+35, r17	; 0x23
    1266:	1e a2       	std	Y+38, r1	; 0x26
    1268:	18 a6       	std	Y+40, r1	; 0x28
    126a:	19 a6       	std	Y+41, r1	; 0x29
    126c:	df 91       	pop	r29
    126e:	cf 91       	pop	r28
    1270:	1f 91       	pop	r17
    1272:	0f 91       	pop	r16
    1274:	ff 90       	pop	r15
    1276:	ef 90       	pop	r14
    1278:	08 95       	ret

0000127a <_ZN9EtherCard11udpTransmitEj>:
    127a:	0f 93       	push	r16
    127c:	1f 93       	push	r17
    127e:	cf 93       	push	r28
    1280:	df 93       	push	r29
    1282:	ec 01       	movw	r28, r24
    1284:	01 e0       	ldi	r16, 0x01	; 1
    1286:	13 e0       	ldi	r17, 0x03	; 3
    1288:	4c 96       	adiw	r24, 0x1c	; 28
    128a:	f8 01       	movw	r30, r16
    128c:	90 8b       	std	Z+16, r25	; 0x10
    128e:	81 8b       	std	Z+17, r24	; 0x11
    1290:	24 df       	rcall	.-440    	; 0x10da <_ZL20fill_ip_hdr_checksumv>
    1292:	ce 01       	movw	r24, r28
    1294:	08 96       	adiw	r24, 0x08	; 8
    1296:	f8 01       	movw	r30, r16
    1298:	96 a3       	std	Z+38, r25	; 0x26
    129a:	87 a3       	std	Z+39, r24	; 0x27
    129c:	ae 01       	movw	r20, r28
    129e:	40 5f       	subi	r20, 0xF0	; 240
    12a0:	5f 4f       	sbci	r21, 0xFF	; 255
    12a2:	21 e0       	ldi	r18, 0x01	; 1
    12a4:	6a e1       	ldi	r22, 0x1A	; 26
    12a6:	88 e2       	ldi	r24, 0x28	; 40
    12a8:	7d de       	rcall	.-774    	; 0xfa4 <_ZL13fill_checksumhhjh>
    12aa:	ce 01       	movw	r24, r28
    12ac:	8a 96       	adiw	r24, 0x2a	; 42
    12ae:	55 dd       	rcall	.-1366   	; 0xd5a <_ZN8ENC28J6010packetSendEj>
    12b0:	df 91       	pop	r29
    12b2:	cf 91       	pop	r28
    12b4:	1f 91       	pop	r17
    12b6:	0f 91       	pop	r16
    12b8:	08 95       	ret

000012ba <_ZN9EtherCard7sendUdpEPKhjjS1_j>:
    12ba:	0f 93       	push	r16
    12bc:	1f 93       	push	r17
    12be:	cf 93       	push	r28
    12c0:	df 93       	push	r29
    12c2:	d6 2f       	mov	r29, r22
    12c4:	c7 2f       	mov	r28, r23
    12c6:	ca 01       	movw	r24, r20
    12c8:	a8 01       	movw	r20, r16
    12ca:	b9 01       	movw	r22, r18
    12cc:	84 df       	rcall	.-248    	; 0x11d6 <_ZN9EtherCard10udpPrepareEjPKhj>
    12ce:	8d 2f       	mov	r24, r29
    12d0:	9c 2f       	mov	r25, r28
    12d2:	81 30       	cpi	r24, 0x01	; 1
    12d4:	22 e0       	ldi	r18, 0x02	; 2
    12d6:	92 07       	cpc	r25, r18
    12d8:	10 f0       	brcs	.+4      	; 0x12de <_ZN9EtherCard7sendUdpEPKhjjS1_j+0x24>
    12da:	80 e0       	ldi	r24, 0x00	; 0
    12dc:	92 e0       	ldi	r25, 0x02	; 2
    12de:	cd df       	rcall	.-102    	; 0x127a <_ZN9EtherCard11udpTransmitEj>
    12e0:	df 91       	pop	r29
    12e2:	cf 91       	pop	r28
    12e4:	1f 91       	pop	r17
    12e6:	0f 91       	pop	r16
    12e8:	08 95       	ret

000012ea <_ZN9EtherCard7setGwIpEPKh>:
    12ea:	10 92 02 05 	sts	0x0502, r1	; 0x800502 <_ZN9EtherCard8delaycntE+0x1>
    12ee:	10 92 01 05 	sts	0x0501, r1	; 0x800501 <_ZN9EtherCard8delaycntE>
    12f2:	21 e0       	ldi	r18, 0x01	; 1
    12f4:	20 93 21 05 	sts	0x0521, r18	; 0x800521 <_ZL9waitgwmac>
    12f8:	bc 01       	movw	r22, r24
    12fa:	8b e0       	ldi	r24, 0x0B	; 11
    12fc:	95 e0       	ldi	r25, 0x05	; 5
    12fe:	d3 c1       	rjmp	.+934    	; 0x16a6 <_ZN9EtherCard6copyIpEPhPKh>
    1300:	08 95       	ret

00001302 <_ZN9EtherCard22updateBroadcastAddressEv>:
    1302:	cf 93       	push	r28
    1304:	df 93       	push	r29
    1306:	e7 e1       	ldi	r30, 0x17	; 23
    1308:	f5 e0       	ldi	r31, 0x05	; 5
    130a:	c3 e1       	ldi	r28, 0x13	; 19
    130c:	d5 e0       	ldi	r29, 0x05	; 5
    130e:	af e0       	ldi	r26, 0x0F	; 15
    1310:	b5 e0       	ldi	r27, 0x05	; 5
    1312:	2b e1       	ldi	r18, 0x1B	; 27
    1314:	35 e0       	ldi	r19, 0x05	; 5
    1316:	91 91       	ld	r25, Z+
    1318:	89 91       	ld	r24, Y+
    131a:	80 95       	com	r24
    131c:	89 2b       	or	r24, r25
    131e:	8d 93       	st	X+, r24
    1320:	e2 17       	cp	r30, r18
    1322:	f3 07       	cpc	r31, r19
    1324:	c1 f7       	brne	.-16     	; 0x1316 <_ZN9EtherCard22updateBroadcastAddressEv+0x14>
    1326:	df 91       	pop	r29
    1328:	cf 91       	pop	r28
    132a:	08 95       	ret

0000132c <_ZN9EtherCard10packetLoopEj>:
	gPB[ICMP_CHECKSUM_P+1]++;
	gPB[ICMP_CHECKSUM_P] += 0x08;
	EtherCard::packetSend(len);
}

uint16_t EtherCard::packetLoop (uint16_t plen) {
    132c:	cf 93       	push	r28
    132e:	df 93       	push	r29
    1330:	ec 01       	movw	r28, r24
    if (plen==0) {
    1332:	00 97       	sbiw	r24, 0x00	; 0
    1334:	09 f0       	breq	.+2      	; 0x1338 <_ZN9EtherCard10packetLoopEj+0xc>
    1336:	3f c0       	rjmp	.+126    	; 0x13b6 <_ZN9EtherCard10packetLoopEj+0x8a>
        //Check every 65536 (no-packet) cycles whether we need to retry ARP request for gateway
        if ((waitgwmac & WGW_INITIAL_ARP || waitgwmac & WGW_REFRESHING) &&
    1338:	80 91 21 05 	lds	r24, 0x0521	; 0x800521 <_ZL9waitgwmac>
    133c:	85 70       	andi	r24, 0x05	; 5
    133e:	89 f0       	breq	.+34     	; 0x1362 <_ZN9EtherCard10packetLoopEj+0x36>
    1340:	80 91 01 05 	lds	r24, 0x0501	; 0x800501 <_ZN9EtherCard8delaycntE>
    1344:	90 91 02 05 	lds	r25, 0x0502	; 0x800502 <_ZN9EtherCard8delaycntE+0x1>
    1348:	89 2b       	or	r24, r25
    134a:	59 f4       	brne	.+22     	; 0x1362 <_ZN9EtherCard10packetLoopEj+0x36>
                delaycnt==0 && isLinkUp()) {
    134c:	f3 dc       	rcall	.-1562   	; 0xd34 <_ZN8ENC28J608isLinkUpEv>
}

uint16_t EtherCard::packetLoop (uint16_t plen) {
    if (plen==0) {
        //Check every 65536 (no-packet) cycles whether we need to retry ARP request for gateway
        if ((waitgwmac & WGW_INITIAL_ARP || waitgwmac & WGW_REFRESHING) &&
    134e:	88 23       	and	r24, r24
    1350:	41 f0       	breq	.+16     	; 0x1362 <_ZN9EtherCard10packetLoopEj+0x36>
                delaycnt==0 && isLinkUp()) {
            client_arp_whohas(gwip);
    1352:	8b e0       	ldi	r24, 0x0B	; 11
    1354:	95 e0       	ldi	r25, 0x05	; 5
    1356:	0f df       	rcall	.-482    	; 0x1176 <_ZL17client_arp_whohasPh>
            waitgwmac |= WGW_ACCEPT_ARP_REPLY;
    1358:	80 91 21 05 	lds	r24, 0x0521	; 0x800521 <_ZL9waitgwmac>
    135c:	88 60       	ori	r24, 0x08	; 8
    135e:	80 93 21 05 	sts	0x0521, r24	; 0x800521 <_ZL9waitgwmac>
        }
        delaycnt++;
    1362:	80 91 01 05 	lds	r24, 0x0501	; 0x800501 <_ZN9EtherCard8delaycntE>
    1366:	90 91 02 05 	lds	r25, 0x0502	; 0x800502 <_ZN9EtherCard8delaycntE+0x1>
    136a:	01 96       	adiw	r24, 0x01	; 1
    136c:	90 93 02 05 	sts	0x0502, r25	; 0x800502 <_ZN9EtherCard8delaycntE+0x1>
    1370:	80 93 01 05 	sts	0x0501, r24	; 0x800501 <_ZN9EtherCard8delaycntE>

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, dnsip) && !has_dns_mac && !waiting_for_dns_mac) {
    1374:	67 e0       	ldi	r22, 0x07	; 7
    1376:	75 e0       	ldi	r23, 0x05	; 5
    1378:	87 e1       	ldi	r24, 0x17	; 23
    137a:	95 e0       	ldi	r25, 0x05	; 5
    137c:	84 de       	rcall	.-760    	; 0x1086 <_ZL6is_lanPKhS0_>
    137e:	88 23       	and	r24, r24
    1380:	49 f0       	breq	.+18     	; 0x1394 <_ZN9EtherCard10packetLoopEj+0x68>
    1382:	80 91 2a 05 	lds	r24, 0x052A	; 0x80052a <_ZL11has_dns_mac>
    1386:	81 11       	cpse	r24, r1
    1388:	05 c0       	rjmp	.+10     	; 0x1394 <_ZN9EtherCard10packetLoopEj+0x68>
    138a:	80 91 2b 05 	lds	r24, 0x052B	; 0x80052b <_ZL19waiting_for_dns_mac>
    138e:	88 23       	and	r24, r24
    1390:	09 f4       	brne	.+2      	; 0x1394 <_ZN9EtherCard10packetLoopEj+0x68>
    1392:	dc c0       	rjmp	.+440    	; 0x154c <_ZN9EtherCard10packetLoopEj+0x220>
            client_arp_whohas(dnsip);
            waiting_for_dns_mac = true;
        }

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, hisip) && !has_dest_mac && !waiting_for_dest_mac) {
    1394:	63 e0       	ldi	r22, 0x03	; 3
    1396:	75 e0       	ldi	r23, 0x05	; 5
    1398:	87 e1       	ldi	r24, 0x17	; 23
    139a:	95 e0       	ldi	r25, 0x05	; 5
    139c:	74 de       	rcall	.-792    	; 0x1086 <_ZL6is_lanPKhS0_>
    139e:	88 23       	and	r24, r24
    13a0:	09 f4       	brne	.+2      	; 0x13a4 <_ZN9EtherCard10packetLoopEj+0x78>
    13a2:	f8 c0       	rjmp	.+496    	; 0x1594 <_ZN9EtherCard10packetLoopEj+0x268>
    13a4:	80 91 28 05 	lds	r24, 0x0528	; 0x800528 <_ZL12has_dest_mac>
    13a8:	81 11       	cpse	r24, r1
    13aa:	f4 c0       	rjmp	.+488    	; 0x1594 <_ZN9EtherCard10packetLoopEj+0x268>
    13ac:	80 91 29 05 	lds	r24, 0x0529	; 0x800529 <_ZL20waiting_for_dest_mac>
    13b0:	81 11       	cpse	r24, r1
    13b2:	f0 c0       	rjmp	.+480    	; 0x1594 <_ZN9EtherCard10packetLoopEj+0x268>
    13b4:	d2 c0       	rjmp	.+420    	; 0x155a <_ZN9EtherCard10packetLoopEj+0x22e>
    return true;
}

static uint8_t eth_type_is_arp_and_my_ip(uint16_t len) {
    return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
    13b6:	89 32       	cpi	r24, 0x29	; 41
    13b8:	91 05       	cpc	r25, r1
    13ba:	08 f4       	brcc	.+2      	; 0x13be <_ZN9EtherCard10packetLoopEj+0x92>
    13bc:	d5 c0       	rjmp	.+426    	; 0x1568 <_ZN9EtherCard10packetLoopEj+0x23c>
        }
    return true;
}

static uint8_t eth_type_is_arp_and_my_ip(uint16_t len) {
    return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
    13be:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <_ZN8ENC28J606bufferE+0xc>
    13c2:	88 30       	cpi	r24, 0x08	; 8
    13c4:	09 f0       	breq	.+2      	; 0x13c8 <_ZN9EtherCard10packetLoopEj+0x9c>
    13c6:	e6 c0       	rjmp	.+460    	; 0x1594 <_ZN9EtherCard10packetLoopEj+0x268>
    13c8:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <_ZN8ENC28J606bufferE+0xd>
    13cc:	86 30       	cpi	r24, 0x06	; 6
    13ce:	09 f0       	breq	.+2      	; 0x13d2 <_ZN9EtherCard10packetLoopEj+0xa6>
    13d0:	dd c0       	rjmp	.+442    	; 0x158c <_ZN9EtherCard10packetLoopEj+0x260>
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
           memcmp(gPB + ETH_ARP_DST_IP_P, EtherCard::myip, IP_LEN) == 0;
    13d2:	44 e0       	ldi	r20, 0x04	; 4
    13d4:	50 e0       	ldi	r21, 0x00	; 0
    13d6:	67 e1       	ldi	r22, 0x17	; 23
    13d8:	75 e0       	ldi	r23, 0x05	; 5
    13da:	87 e2       	ldi	r24, 0x27	; 39
    13dc:	93 e0       	ldi	r25, 0x03	; 3
    13de:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <memcmp>
    return true;
}

static uint8_t eth_type_is_arp_and_my_ip(uint16_t len) {
    return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
    13e2:	89 2b       	or	r24, r25
    13e4:	09 f0       	breq	.+2      	; 0x13e8 <_ZN9EtherCard10packetLoopEj+0xbc>
    13e6:	d2 c0       	rjmp	.+420    	; 0x158c <_ZN9EtherCard10packetLoopEj+0x260>
    EtherCard::copyIp(gPB + IP_SRC_P, EtherCard::myip);
    fill_ip_hdr_checksum();
}

static void make_arp_answer_from_request() {
    setMACs(gPB + ETH_SRC_MAC);
    13e8:	c3 c0       	rjmp	.+390    	; 0x1570 <_ZN9EtherCard10packetLoopEj+0x244>
    13ea:	87 e0       	ldi	r24, 0x07	; 7
    13ec:	93 e0       	ldi	r25, 0x03	; 3
    13ee:	84 de       	rcall	.-760    	; 0x10f8 <_ZL7setMACsPKh>
    gPB[ETH_ARP_OPCODE_H_P] = ETH_ARP_OPCODE_REPLY_H_V;
    13f0:	e1 e0       	ldi	r30, 0x01	; 1
    13f2:	f3 e0       	ldi	r31, 0x03	; 3
    13f4:	14 8a       	std	Z+20, r1	; 0x14
    gPB[ETH_ARP_OPCODE_L_P] = ETH_ARP_OPCODE_REPLY_L_V;
    13f6:	82 e0       	ldi	r24, 0x02	; 2
    EtherCard::copyMac(gPB + ETH_ARP_DST_MAC_P, gPB + ETH_ARP_SRC_MAC_P);
    13f8:	85 8b       	std	Z+21, r24	; 0x15
    13fa:	67 e1       	ldi	r22, 0x17	; 23
    13fc:	73 e0       	ldi	r23, 0x03	; 3
    13fe:	81 e2       	ldi	r24, 0x21	; 33
    1400:	93 e0       	ldi	r25, 0x03	; 3
    EtherCard::copyMac(gPB + ETH_ARP_SRC_MAC_P, EtherCard::mymac);
    1402:	5e d1       	rcall	.+700    	; 0x16c0 <_ZN9EtherCard7copyMacEPhPKh>
    1404:	6b e1       	ldi	r22, 0x1B	; 27
    1406:	75 e0       	ldi	r23, 0x05	; 5
    1408:	87 e1       	ldi	r24, 0x17	; 23
    140a:	93 e0       	ldi	r25, 0x03	; 3
    EtherCard::copyIp(gPB + ETH_ARP_DST_IP_P, gPB + ETH_ARP_SRC_IP_P);
    140c:	59 d1       	rcall	.+690    	; 0x16c0 <_ZN9EtherCard7copyMacEPhPKh>
    140e:	6d e1       	ldi	r22, 0x1D	; 29
    1410:	73 e0       	ldi	r23, 0x03	; 3
    1412:	87 e2       	ldi	r24, 0x27	; 39
    1414:	93 e0       	ldi	r25, 0x03	; 3
    EtherCard::copyIp(gPB + ETH_ARP_SRC_IP_P, EtherCard::myip);
    1416:	47 d1       	rcall	.+654    	; 0x16a6 <_ZN9EtherCard6copyIpEPhPKh>
    1418:	67 e1       	ldi	r22, 0x17	; 23
    141a:	75 e0       	ldi	r23, 0x05	; 5
    141c:	8d e1       	ldi	r24, 0x1D	; 29
    141e:	93 e0       	ldi	r25, 0x03	; 3
    1420:	42 d1       	rcall	.+644    	; 0x16a6 <_ZN9EtherCard6copyIpEPhPKh>
    EtherCard::packetSend(42);
    1422:	8a e2       	ldi	r24, 0x2A	; 42
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	99 dc       	rcall	.-1742   	; 0xd5a <_ZN8ENC28J6010packetSendEj>
    1428:	80 91 21 05 	lds	r24, 0x0521	; 0x800521 <_ZL9waitgwmac>

    if (eth_type_is_arp_and_my_ip(plen))
    {   //Service ARP request
        if (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REQ_L_V)
            make_arp_answer_from_request();
        if (waitgwmac & WGW_ACCEPT_ARP_REPLY && (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REPLY_L_V) && client_store_mac(gwip, gwmacaddr))
    142c:	83 ff       	sbrs	r24, 3
    142e:	0e c0       	rjmp	.+28     	; 0x144c <_ZN9EtherCard10packetLoopEj+0x120>
    1430:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <_ZN8ENC28J606bufferE+0x15>
    1434:	82 30       	cpi	r24, 0x02	; 2
    1436:	51 f4       	brne	.+20     	; 0x144c <_ZN9EtherCard10packetLoopEj+0x120>
    1438:	62 e2       	ldi	r22, 0x22	; 34
    143a:	75 e0       	ldi	r23, 0x05	; 5
    143c:	8b e0       	ldi	r24, 0x0B	; 11
    143e:	95 e0       	ldi	r25, 0x05	; 5
    1440:	84 de       	rcall	.-760    	; 0x114a <_ZL16client_store_macPhS_>
    1442:	88 23       	and	r24, r24
    1444:	19 f0       	breq	.+6      	; 0x144c <_ZN9EtherCard10packetLoopEj+0x120>
    1446:	82 e0       	ldi	r24, 0x02	; 2
            waitgwmac = WGW_HAVE_GW_MAC;
    1448:	80 93 21 05 	sts	0x0521, r24	; 0x800521 <_ZL9waitgwmac>
    144c:	80 91 2a 05 	lds	r24, 0x052A	; 0x80052a <_ZL11has_dns_mac>
        if (!has_dns_mac && waiting_for_dns_mac && client_store_mac(dnsip, destmacaddr)) {
    1450:	81 11       	cpse	r24, r1
    1452:	10 c0       	rjmp	.+32     	; 0x1474 <_ZN9EtherCard10packetLoopEj+0x148>
    1454:	80 91 2b 05 	lds	r24, 0x052B	; 0x80052b <_ZL19waiting_for_dns_mac>
    1458:	88 23       	and	r24, r24
    145a:	61 f0       	breq	.+24     	; 0x1474 <_ZN9EtherCard10packetLoopEj+0x148>
    145c:	6c e2       	ldi	r22, 0x2C	; 44
    145e:	75 e0       	ldi	r23, 0x05	; 5
    1460:	87 e0       	ldi	r24, 0x07	; 7
    1462:	95 e0       	ldi	r25, 0x05	; 5
    1464:	72 de       	rcall	.-796    	; 0x114a <_ZL16client_store_macPhS_>
    1466:	88 23       	and	r24, r24
    1468:	29 f0       	breq	.+10     	; 0x1474 <_ZN9EtherCard10packetLoopEj+0x148>
    146a:	81 e0       	ldi	r24, 0x01	; 1
            has_dns_mac = true;
    146c:	80 93 2a 05 	sts	0x052A, r24	; 0x80052a <_ZL11has_dns_mac>
    1470:	10 92 2b 05 	sts	0x052B, r1	; 0x80052b <_ZL19waiting_for_dns_mac>
            waiting_for_dns_mac = false;
    1474:	80 91 28 05 	lds	r24, 0x0528	; 0x800528 <_ZL12has_dest_mac>
        }
        if (!has_dest_mac && waiting_for_dest_mac && client_store_mac(hisip, destmacaddr)) {
    1478:	81 11       	cpse	r24, r1
    147a:	8c c0       	rjmp	.+280    	; 0x1594 <_ZN9EtherCard10packetLoopEj+0x268>
    147c:	80 91 29 05 	lds	r24, 0x0529	; 0x800529 <_ZL20waiting_for_dest_mac>
    1480:	88 23       	and	r24, r24
    1482:	09 f4       	brne	.+2      	; 0x1486 <_ZN9EtherCard10packetLoopEj+0x15a>
    1484:	87 c0       	rjmp	.+270    	; 0x1594 <_ZN9EtherCard10packetLoopEj+0x268>
    1486:	6c e2       	ldi	r22, 0x2C	; 44
    1488:	75 e0       	ldi	r23, 0x05	; 5
    148a:	83 e0       	ldi	r24, 0x03	; 3
    148c:	95 e0       	ldi	r25, 0x05	; 5
    148e:	5d de       	rcall	.-838    	; 0x114a <_ZL16client_store_macPhS_>
    1490:	88 23       	and	r24, r24
    1492:	09 f4       	brne	.+2      	; 0x1496 <_ZN9EtherCard10packetLoopEj+0x16a>
    1494:	7f c0       	rjmp	.+254    	; 0x1594 <_ZN9EtherCard10packetLoopEj+0x268>
    1496:	81 e0       	ldi	r24, 0x01	; 1
            has_dest_mac = true;
    1498:	80 93 28 05 	sts	0x0528, r24	; 0x800528 <_ZL12has_dest_mac>
    149c:	10 92 29 05 	sts	0x0529, r1	; 0x800529 <_ZL20waiting_for_dest_mac>
            waiting_for_dest_mac = false;
    14a0:	79 c0       	rjmp	.+242    	; 0x1594 <_ZN9EtherCard10packetLoopEj+0x268>
    14a2:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <_ZN8ENC28J606bufferE+0xc>
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
           memcmp(gPB + ETH_ARP_DST_IP_P, EtherCard::myip, IP_LEN) == 0;
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
    14a6:	88 30       	cpi	r24, 0x08	; 8
    14a8:	09 f0       	breq	.+2      	; 0x14ac <_ZN9EtherCard10packetLoopEj+0x180>
    14aa:	74 c0       	rjmp	.+232    	; 0x1594 <_ZN9EtherCard10packetLoopEj+0x268>
    14ac:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <_ZN8ENC28J606bufferE+0xd>
    14b0:	81 11       	cpse	r24, r1
    14b2:	70 c0       	rjmp	.+224    	; 0x1594 <_ZN9EtherCard10packetLoopEj+0x268>
    14b4:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <_ZN8ENC28J606bufferE+0xe>
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
    14b8:	85 34       	cpi	r24, 0x45	; 69
    14ba:	09 f0       	breq	.+2      	; 0x14be <_ZN9EtherCard10packetLoopEj+0x192>
    14bc:	6b c0       	rjmp	.+214    	; 0x1594 <_ZN9EtherCard10packetLoopEj+0x268>
    14be:	44 e0       	ldi	r20, 0x04	; 4
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
           (memcmp(gPB + IP_DST_P, EtherCard::myip, IP_LEN) == 0  //not my IP
    14c0:	50 e0       	ldi	r21, 0x00	; 0
    14c2:	67 e1       	ldi	r22, 0x17	; 23
    14c4:	75 e0       	ldi	r23, 0x05	; 5
    14c6:	8f e1       	ldi	r24, 0x1F	; 31
    14c8:	93 e0       	ldi	r25, 0x03	; 3
    14ca:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <memcmp>
    14ce:	89 2b       	or	r24, r25
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
    14d0:	09 f4       	brne	.+2      	; 0x14d4 <_ZN9EtherCard10packetLoopEj+0x1a8>
    14d2:	54 c0       	rjmp	.+168    	; 0x157c <_ZN9EtherCard10packetLoopEj+0x250>
    14d4:	44 e0       	ldi	r20, 0x04	; 4
           (memcmp(gPB + IP_DST_P, EtherCard::myip, IP_LEN) == 0  //not my IP
            || (memcmp(gPB + IP_DST_P, EtherCard::broadcastip, IP_LEN) == 0) //not subnet broadcast
    14d6:	50 e0       	ldi	r21, 0x00	; 0
    14d8:	6f e0       	ldi	r22, 0x0F	; 15
    14da:	75 e0       	ldi	r23, 0x05	; 5
    14dc:	8f e1       	ldi	r24, 0x1F	; 31
    14de:	93 e0       	ldi	r25, 0x03	; 3
    14e0:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <memcmp>
    14e4:	89 2b       	or	r24, r25
    14e6:	09 f4       	brne	.+2      	; 0x14ea <_ZN9EtherCard10packetLoopEj+0x1be>
    14e8:	49 c0       	rjmp	.+146    	; 0x157c <_ZN9EtherCard10packetLoopEj+0x250>
    14ea:	44 e0       	ldi	r20, 0x04	; 4
            || (memcmp(gPB + IP_DST_P, allOnes, IP_LEN) == 0)); //not global broadcasts
    14ec:	50 e0       	ldi	r21, 0x00	; 0
    14ee:	65 e2       	ldi	r22, 0x25	; 37
    14f0:	72 e0       	ldi	r23, 0x02	; 2
    14f2:	8f e1       	ldi	r24, 0x1F	; 31
    14f4:	93 e0       	ldi	r25, 0x03	; 3
    14f6:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <memcmp>
    14fa:	89 2b       	or	r24, r25
    14fc:	09 f0       	breq	.+2      	; 0x1500 <_ZN9EtherCard10packetLoopEj+0x1d4>
    14fe:	4a c0       	rjmp	.+148    	; 0x1594 <_ZN9EtherCard10packetLoopEj+0x268>
    1500:	3d c0       	rjmp	.+122    	; 0x157c <_ZN9EtherCard10packetLoopEj+0x250>
    1502:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <_ZN8ENC28J606bufferE+0x22>
        //!@todo Add other protocols (and make each optional at compile time)
        return 0;
    }
	
	//To handle pinging
	if (gPB[IP_PROTO_P]==IP_PROTO_ICMP_V && gPB[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V)
    1506:	88 30       	cpi	r24, 0x08	; 8
    1508:	c9 f4       	brne	.+50     	; 0x153c <_ZN9EtherCard10packetLoopEj+0x210>
	{   //Service ICMP echo request (ping)
		if (icmp_cb)
    150a:	e0 91 32 05 	lds	r30, 0x0532	; 0x800532 <_ZL7icmp_cb>
    150e:	f0 91 33 05 	lds	r31, 0x0533	; 0x800533 <_ZL7icmp_cb+0x1>
    1512:	30 97       	sbiw	r30, 0x00	; 0
    1514:	19 f0       	breq	.+6      	; 0x151c <_ZN9EtherCard10packetLoopEj+0x1f0>
		(*icmp_cb)(&(gPB[IP_SRC_P]));
    1516:	8b e1       	ldi	r24, 0x1B	; 27
    1518:	93 e0       	ldi	r25, 0x03	; 3
    151a:	19 95       	eicall
void EtherCard::registerPingCallback (void (*callback)(uint8_t *srcip)) {
    icmp_cb = callback;
}

static void make_echo_reply_from_request(uint16_t len) {
	make_eth_ip();
    151c:	f7 dd       	rcall	.-1042   	; 0x110c <_ZL11make_eth_ipv>
	gPB[ICMP_TYPE_P] = ICMP_TYPE_ECHOREPLY_V;
    151e:	e1 e0       	ldi	r30, 0x01	; 1
    1520:	f3 e0       	ldi	r31, 0x03	; 3
	if (gPB[ICMP_CHECKSUM_P] > (0xFF-0x08))
    1522:	12 a2       	std	Z+34, r1	; 0x22
    1524:	84 a1       	ldd	r24, Z+36	; 0x24
    1526:	88 3f       	cpi	r24, 0xF8	; 248
	gPB[ICMP_CHECKSUM_P+1]++;
    1528:	18 f0       	brcs	.+6      	; 0x1530 <_ZN9EtherCard10packetLoopEj+0x204>
    152a:	95 a1       	ldd	r25, Z+37	; 0x25
    152c:	9f 5f       	subi	r25, 0xFF	; 255
	gPB[ICMP_CHECKSUM_P] += 0x08;
    152e:	95 a3       	std	Z+37, r25	; 0x25
    1530:	88 5f       	subi	r24, 0xF8	; 248
	EtherCard::packetSend(len);
    1532:	80 93 25 03 	sts	0x0325, r24	; 0x800325 <_ZN8ENC28J606bufferE+0x24>
    1536:	ce 01       	movw	r24, r28
    1538:	10 dc       	rcall	.-2016   	; 0xd5a <_ZN8ENC28J6010packetSendEj>
		make_echo_reply_from_request(plen);
		return 0;
	}

#if ETHERCARD_UDPSERVER
    if (ether.udpServerListening() && gPB[IP_PROTO_P]==IP_PROTO_UDP_V)
    153a:	2c c0       	rjmp	.+88     	; 0x1594 <_ZN9EtherCard10packetLoopEj+0x268>
    153c:	4a d0       	rcall	.+148    	; 0x15d2 <_ZN9EtherCard18udpServerListeningEv>
    153e:	88 23       	and	r24, r24
    1540:	49 f1       	breq	.+82     	; 0x1594 <_ZN9EtherCard10packetLoopEj+0x268>
    1542:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <_ZN8ENC28J606bufferE+0x17>
    1546:	81 31       	cpi	r24, 0x11	; 17
    1548:	29 f5       	brne	.+74     	; 0x1594 <_ZN9EtherCard10packetLoopEj+0x268>
        }
        delaycnt++;

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, dnsip) && !has_dns_mac && !waiting_for_dns_mac) {
            client_arp_whohas(dnsip);
    154a:	1d c0       	rjmp	.+58     	; 0x1586 <_ZN9EtherCard10packetLoopEj+0x25a>
    154c:	87 e0       	ldi	r24, 0x07	; 7
    154e:	95 e0       	ldi	r25, 0x05	; 5
    1550:	12 de       	rcall	.-988    	; 0x1176 <_ZL17client_arp_whohasPh>
            waiting_for_dns_mac = true;
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	80 93 2b 05 	sts	0x052B, r24	; 0x80052b <_ZL19waiting_for_dns_mac>
    1558:	1d cf       	rjmp	.-454    	; 0x1394 <_ZN9EtherCard10packetLoopEj+0x68>
        }

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, hisip) && !has_dest_mac && !waiting_for_dest_mac) {
            client_arp_whohas(hisip);
    155a:	83 e0       	ldi	r24, 0x03	; 3
    155c:	95 e0       	ldi	r25, 0x05	; 5
    155e:	0b de       	rcall	.-1002   	; 0x1176 <_ZL17client_arp_whohasPh>
    1560:	81 e0       	ldi	r24, 0x01	; 1
            waiting_for_dest_mac = true;
    1562:	80 93 29 05 	sts	0x0529, r24	; 0x800529 <_ZL20waiting_for_dest_mac>
    1566:	16 c0       	rjmp	.+44     	; 0x1594 <_ZN9EtherCard10packetLoopEj+0x268>
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
    1568:	8a 97       	sbiw	r24, 0x2a	; 42
    156a:	08 f0       	brcs	.+2      	; 0x156e <_ZN9EtherCard10packetLoopEj+0x242>
    156c:	9a cf       	rjmp	.-204    	; 0x14a2 <_ZN9EtherCard10packetLoopEj+0x176>
    156e:	12 c0       	rjmp	.+36     	; 0x1594 <_ZN9EtherCard10packetLoopEj+0x268>
        return 0;
    }

    if (eth_type_is_arp_and_my_ip(plen))
    {   //Service ARP request
        if (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REQ_L_V)
    1570:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <_ZN8ENC28J606bufferE+0x15>
    1574:	81 30       	cpi	r24, 0x01	; 1
    1576:	09 f0       	breq	.+2      	; 0x157a <_ZN9EtherCard10packetLoopEj+0x24e>
    1578:	57 cf       	rjmp	.-338    	; 0x1428 <_ZN9EtherCard10packetLoopEj+0xfc>
    157a:	37 cf       	rjmp	.-402    	; 0x13ea <_ZN9EtherCard10packetLoopEj+0xbe>
        //!@todo Add other protocols (and make each optional at compile time)
        return 0;
    }
	
	//To handle pinging
	if (gPB[IP_PROTO_P]==IP_PROTO_ICMP_V && gPB[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V)
    157c:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <_ZN8ENC28J606bufferE+0x17>
    1580:	81 30       	cpi	r24, 0x01	; 1
    1582:	e1 f6       	brne	.-72     	; 0x153c <_ZN9EtherCard10packetLoopEj+0x210>
    1584:	be cf       	rjmp	.-132    	; 0x1502 <_ZN9EtherCard10packetLoopEj+0x1d6>
	}

#if ETHERCARD_UDPSERVER
    if (ether.udpServerListening() && gPB[IP_PROTO_P]==IP_PROTO_UDP_V)
    {   //Call UDP server handler (callback) if one is defined for this packet
        if(ether.udpServerHasProcessedPacket(plen))
    1586:	ce 01       	movw	r24, r28
    1588:	2b d0       	rcall	.+86     	; 0x15e0 <_ZN9EtherCard27udpServerHasProcessedPacketEj>
    158a:	04 c0       	rjmp	.+8      	; 0x1594 <_ZN9EtherCard10packetLoopEj+0x268>
    158c:	ca 32       	cpi	r28, 0x2A	; 42
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
    158e:	d1 05       	cpc	r29, r1
    1590:	08 f0       	brcs	.+2      	; 0x1594 <_ZN9EtherCard10packetLoopEj+0x268>
    1592:	8c cf       	rjmp	.-232    	; 0x14ac <_ZN9EtherCard10packetLoopEj+0x180>
    1594:	80 e0       	ldi	r24, 0x00	; 0

    if (plen<54 || gPB[IP_PROTO_P]!=IP_PROTO_TCP_V )
        return 0; //from here on we are only interested in TCP-packets; these are longer than 54 bytes
		
	return 0;
}
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	df 91       	pop	r29
    159a:	cf 91       	pop	r28
    159c:	08 95       	ret

0000159e <_ZN9EtherCard21udpServerListenOnPortEPFvjPhjPKcjEj>:
    159e:	9c 01       	movw	r18, r24
    {
        if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((uint8_t) listeners[i].port)) {
            listeners[i].listening = true;
        }
    }
}
    15a0:	90 91 34 05 	lds	r25, 0x0534	; 0x800534 <numListeners>
    15a4:	98 30       	cpi	r25, 0x08	; 8
    15a6:	a0 f4       	brcc	.+40     	; 0x15d0 <_ZN9EtherCard21udpServerListenOnPortEPFvjPhjPKcjEj+0x32>
    15a8:	e9 2f       	mov	r30, r25
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	af 01       	movw	r20, r30
    15ae:	44 0f       	add	r20, r20
    15b0:	55 1f       	adc	r21, r21
    15b2:	44 0f       	add	r20, r20
    15b4:	55 1f       	adc	r21, r21
    15b6:	e4 0f       	add	r30, r20
    15b8:	f5 1f       	adc	r31, r21
    15ba:	eb 5c       	subi	r30, 0xCB	; 203
    15bc:	fa 4f       	sbci	r31, 0xFA	; 250
    15be:	31 83       	std	Z+1, r19	; 0x01
    15c0:	20 83       	st	Z, r18
    15c2:	73 83       	std	Z+3, r23	; 0x03
    15c4:	62 83       	std	Z+2, r22	; 0x02
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	84 83       	std	Z+4, r24	; 0x04
    15ca:	9f 5f       	subi	r25, 0xFF	; 255
    15cc:	90 93 34 05 	sts	0x0534, r25	; 0x800534 <numListeners>
    15d0:	08 95       	ret

000015d2 <_ZN9EtherCard18udpServerListeningEv>:

bool EtherCard::udpServerListening() {
    return numListeners > 0;
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	90 91 34 05 	lds	r25, 0x0534	; 0x800534 <numListeners>
    15d8:	91 11       	cpse	r25, r1
    15da:	01 c0       	rjmp	.+2      	; 0x15de <_ZN9EtherCard18udpServerListeningEv+0xc>
    15dc:	80 e0       	ldi	r24, 0x00	; 0
}
    15de:	08 95       	ret

000015e0 <_ZN9EtherCard27udpServerHasProcessedPacketEj>:

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    15e0:	8f 92       	push	r8
    15e2:	9f 92       	push	r9
    15e4:	bf 92       	push	r11
    15e6:	cf 92       	push	r12
    15e8:	df 92       	push	r13
    15ea:	ef 92       	push	r14
    15ec:	ff 92       	push	r15
    15ee:	0f 93       	push	r16
    15f0:	1f 93       	push	r17
    15f2:	cf 93       	push	r28
    15f4:	df 93       	push	r29
    bool packetProcessed = false;
    for(int i = 0; i < numListeners; i++)
    15f6:	80 91 34 05 	lds	r24, 0x0534	; 0x800534 <numListeners>
    15fa:	88 23       	and	r24, r24
    15fc:	09 f4       	brne	.+2      	; 0x1600 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x20>
    15fe:	46 c0       	rjmp	.+140    	; 0x168c <_ZN9EtherCard27udpServerHasProcessedPacketEj+0xac>
    1600:	c5 e3       	ldi	r28, 0x35	; 53
    1602:	d5 e0       	ldi	r29, 0x05	; 5
    1604:	e1 2c       	mov	r14, r1
    1606:	f1 2c       	mov	r15, r1
    1608:	80 e0       	ldi	r24, 0x00	; 0
    {
        if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((uint8_t) listeners[i].port) && listeners[i].listening)
    160a:	0f 2e       	mov	r0, r31
    160c:	f1 e0       	ldi	r31, 0x01	; 1
    160e:	cf 2e       	mov	r12, r31
    1610:	f3 e0       	ldi	r31, 0x03	; 3
    1612:	df 2e       	mov	r13, r31
    1614:	f0 2d       	mov	r31, r0
                listeners[i].port,
                gPB + IP_SRC_P,
                (gPB[UDP_SRC_PORT_H_P] << 8) | gPB[UDP_SRC_PORT_L_P],
                (const char *) (gPB + UDP_DATA_P),
                datalen);
            packetProcessed = true;
    1616:	bb 24       	eor	r11, r11
    1618:	b3 94       	inc	r11

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    bool packetProcessed = false;
    for(int i = 0; i < numListeners; i++)
    {
        if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((uint8_t) listeners[i].port) && listeners[i].listening)
    161a:	aa 81       	ldd	r26, Y+2	; 0x02
    161c:	bb 81       	ldd	r27, Y+3	; 0x03
    161e:	f6 01       	movw	r30, r12
    1620:	24 a1       	ldd	r18, Z+36	; 0x24
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	4b 2f       	mov	r20, r27
    1626:	55 27       	eor	r21, r21
    1628:	24 17       	cp	r18, r20
    162a:	35 07       	cpc	r19, r21
    162c:	21 f5       	brne	.+72     	; 0x1676 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x96>
    162e:	25 a1       	ldd	r18, Z+37	; 0x25
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	ad 01       	movw	r20, r26
    1634:	55 27       	eor	r21, r21
    1636:	24 17       	cp	r18, r20
    1638:	35 07       	cpc	r19, r21
    163a:	e9 f4       	brne	.+58     	; 0x1676 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x96>
    163c:	9c 81       	ldd	r25, Y+4	; 0x04
    163e:	99 23       	and	r25, r25
    1640:	d1 f0       	breq	.+52     	; 0x1676 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x96>
            listeners[i].callback(
                listeners[i].port,
                gPB + IP_SRC_P,
                (gPB[UDP_SRC_PORT_H_P] << 8) | gPB[UDP_SRC_PORT_L_P],
                (const char *) (gPB + UDP_DATA_P),
                datalen);
    1642:	07 a1       	ldd	r16, Z+39	; 0x27
    1644:	10 e0       	ldi	r17, 0x00	; 0
    1646:	08 50       	subi	r16, 0x08	; 8
    1648:	11 09       	sbc	r17, r1
    164a:	86 a1       	ldd	r24, Z+38	; 0x26
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	98 2f       	mov	r25, r24
    1650:	88 27       	eor	r24, r24
    1652:	08 0f       	add	r16, r24
    1654:	19 1f       	adc	r17, r25
    1656:	42 a1       	ldd	r20, Z+34	; 0x22
    1658:	50 e0       	ldi	r21, 0x00	; 0
    165a:	54 2f       	mov	r21, r20
    165c:	44 27       	eor	r20, r20
    165e:	83 a1       	ldd	r24, Z+35	; 0x23
    1660:	48 2b       	or	r20, r24
    1662:	88 80       	ld	r8, Y
    1664:	99 80       	ldd	r9, Y+1	; 0x01
    1666:	2b e2       	ldi	r18, 0x2B	; 43
    1668:	33 e0       	ldi	r19, 0x03	; 3
    166a:	6b e1       	ldi	r22, 0x1B	; 27
    166c:	73 e0       	ldi	r23, 0x03	; 3
    166e:	cd 01       	movw	r24, r26
    1670:	f4 01       	movw	r30, r8
    1672:	19 95       	eicall
            packetProcessed = true;
    1674:	8b 2d       	mov	r24, r11
    return numListeners > 0;
}

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    bool packetProcessed = false;
    for(int i = 0; i < numListeners; i++)
    1676:	ff ef       	ldi	r31, 0xFF	; 255
    1678:	ef 1a       	sub	r14, r31
    167a:	ff 0a       	sbc	r15, r31
    167c:	25 96       	adiw	r28, 0x05	; 5
    167e:	20 91 34 05 	lds	r18, 0x0534	; 0x800534 <numListeners>
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	e2 16       	cp	r14, r18
    1686:	f3 06       	cpc	r15, r19
    1688:	44 f2       	brlt	.-112    	; 0x161a <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x3a>
    168a:	01 c0       	rjmp	.+2      	; 0x168e <_ZN9EtherCard27udpServerHasProcessedPacketEj+0xae>
bool EtherCard::udpServerListening() {
    return numListeners > 0;
}

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    bool packetProcessed = false;
    168c:	80 e0       	ldi	r24, 0x00	; 0
                datalen);
            packetProcessed = true;
        }
    }
    return packetProcessed;
}
    168e:	df 91       	pop	r29
    1690:	cf 91       	pop	r28
    1692:	1f 91       	pop	r17
    1694:	0f 91       	pop	r16
    1696:	ff 90       	pop	r15
    1698:	ef 90       	pop	r14
    169a:	df 90       	pop	r13
    169c:	cf 90       	pop	r12
    169e:	bf 90       	pop	r11
    16a0:	9f 90       	pop	r9
    16a2:	8f 90       	pop	r8
    16a4:	08 95       	ret

000016a6 <_ZN9EtherCard6copyIpEPhPKh>:
#include "../Peripherals/HardwareSerial.h"
#include <stdlib.h>
#include <ctype.h>

void EtherCard::copyIp (uint8_t *dst, const uint8_t *src) {
    memcpy(dst, src, IP_LEN);
    16a6:	fb 01       	movw	r30, r22
    16a8:	20 81       	ld	r18, Z
    16aa:	31 81       	ldd	r19, Z+1	; 0x01
    16ac:	fc 01       	movw	r30, r24
    16ae:	31 83       	std	Z+1, r19	; 0x01
    16b0:	20 83       	st	Z, r18
    16b2:	fb 01       	movw	r30, r22
    16b4:	22 81       	ldd	r18, Z+2	; 0x02
    16b6:	33 81       	ldd	r19, Z+3	; 0x03
    16b8:	fc 01       	movw	r30, r24
    16ba:	33 83       	std	Z+3, r19	; 0x03
    16bc:	22 83       	std	Z+2, r18	; 0x02
    16be:	08 95       	ret

000016c0 <_ZN9EtherCard7copyMacEPhPKh>:
}

void EtherCard::copyMac (uint8_t *dst, const uint8_t *src) {
    16c0:	dc 01       	movw	r26, r24
    memcpy(dst, src, ETH_LEN);
    16c2:	96 e0       	ldi	r25, 0x06	; 6
    16c4:	fb 01       	movw	r30, r22
    16c6:	01 90       	ld	r0, Z+
    16c8:	0d 92       	st	X+, r0
    16ca:	9a 95       	dec	r25
    16cc:	e1 f7       	brne	.-8      	; 0x16c6 <_ZN9EtherCard7copyMacEPhPKh+0x6>
    16ce:	08 95       	ret

000016d0 <_ZN9EtherComm13CheckChecksumEPKch>:
	}
}

bool EtherComm::CheckChecksum(const char *data, uint8_t len){
  //data++; //Ignore first byte, the start byte.
  uint8_t checksum = (uint8_t)(*(data++)); //Start by 'adding' the command to the checksum
    16d0:	fc 01       	movw	r30, r24
    16d2:	20 81       	ld	r18, Z
  checksum += (uint8_t)(*(data++));
    16d4:	dc 01       	movw	r26, r24
    16d6:	12 96       	adiw	r26, 0x02	; 2
    16d8:	81 81       	ldd	r24, Z+1	; 0x01
    16da:	92 2f       	mov	r25, r18
    16dc:	98 0f       	add	r25, r24
  while(len-- > 0){
    16de:	3f ef       	ldi	r19, 0xFF	; 255
    16e0:	36 0f       	add	r19, r22
    16e2:	66 23       	and	r22, r22
    16e4:	61 f0       	breq	.+24     	; 0x16fe <_ZN9EtherComm13CheckChecksumEPKch+0x2e>
    16e6:	fd 01       	movw	r30, r26
    16e8:	83 2f       	mov	r24, r19
    checksum += (uint8_t)(*(data++));
    16ea:	21 91       	ld	r18, Z+
    16ec:	92 0f       	add	r25, r18

bool EtherComm::CheckChecksum(const char *data, uint8_t len){
  //data++; //Ignore first byte, the start byte.
  uint8_t checksum = (uint8_t)(*(data++)); //Start by 'adding' the command to the checksum
  checksum += (uint8_t)(*(data++));
  while(len-- > 0){
    16ee:	81 50       	subi	r24, 0x01	; 1
    16f0:	e0 f7       	brcc	.-8      	; 0x16ea <_ZN9EtherComm13CheckChecksumEPKch+0x1a>
    16f2:	23 2f       	mov	r18, r19
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	2f 5f       	subi	r18, 0xFF	; 255
    16f8:	3f 4f       	sbci	r19, 0xFF	; 255
    16fa:	a2 0f       	add	r26, r18
    16fc:	b3 1f       	adc	r27, r19
    checksum += (uint8_t)(*(data++));
  }
//  Serial.println((uint8_t)(checksum & CHECKSUM_MASK));
  return (checksum & CHECKSUM_MASK) == (uint8_t)(*data);
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	2c 91       	ld	r18, X
    1702:	29 13       	cpse	r18, r25
    1704:	80 e0       	ldi	r24, 0x00	; 0
}
    1706:	08 95       	ret

00001708 <_Z10udpReceivejPhjPKcj>:

//char EtherComm::buffer[BUFFER_SIZE];
uint8_t* EtherComm::buffer = ether.buffer + UDP_DATA_P;

//callback that prints received packets to the serial port
void udpReceive(uint16_t dest_port, uint8_t src_ip[IP_LEN], uint16_t src_port, const char *data, uint16_t packetLen){
    1708:	0f 93       	push	r16
    170a:	1f 93       	push	r17
    170c:	cf 93       	push	r28
    170e:	df 93       	push	r29
	}
	Serial.println();
	Serial.print("Checksum: ");
	Serial.println((uint8_t)(*index));
*/	
	if(packetLen >= 3){ //At minimum, start byte, command, and checksum.
    1710:	a8 01       	movw	r20, r16
    1712:	43 50       	subi	r20, 0x03	; 3
    1714:	51 09       	sbc	r21, r1
    1716:	4f 3f       	cpi	r20, 0xFF	; 255
    1718:	51 05       	cpc	r21, r1
    171a:	09 f0       	breq	.+2      	; 0x171e <_Z10udpReceivejPhjPKcj+0x16>
    171c:	88 f4       	brcc	.+34     	; 0x1740 <_Z10udpReceivejPhjPKcj+0x38>
		if(packetLen <= 258){
			uint8_t dataLen = (uint8_t)(packetLen - 3);
			if((uint8_t)data[0] == START_BYTE){
    171e:	f9 01       	movw	r30, r18
    1720:	80 81       	ld	r24, Z
    1722:	8f 3f       	cpi	r24, 0xFF	; 255
    1724:	69 f4       	brne	.+26     	; 0x1740 <_Z10udpReceivejPhjPKcj+0x38>
    1726:	e9 01       	movw	r28, r18
	Serial.print("Checksum: ");
	Serial.println((uint8_t)(*index));
*/	
	if(packetLen >= 3){ //At minimum, start byte, command, and checksum.
		if(packetLen <= 258){
			uint8_t dataLen = (uint8_t)(packetLen - 3);
    1728:	03 50       	subi	r16, 0x03	; 3
			if((uint8_t)data[0] == START_BYTE){
			//		Serial.print("Computed Checksum: ");
				if(EtherComm::CheckChecksum(data, dataLen)){
    172a:	60 2f       	mov	r22, r16
    172c:	c9 01       	movw	r24, r18
    172e:	d0 df       	rcall	.-96     	; 0x16d0 <_ZN9EtherComm13CheckChecksumEPKch>
    1730:	88 23       	and	r24, r24
    1732:	31 f0       	breq	.+12     	; 0x1740 <_Z10udpReceivejPhjPKcj+0x38>
					EtherComm::CommandReceived((uint8_t)data[1], (const uint8_t*)(data + 2), dataLen);
    1734:	be 01       	movw	r22, r28
    1736:	6e 5f       	subi	r22, 0xFE	; 254
    1738:	7f 4f       	sbci	r23, 0xFF	; 255
    173a:	40 2f       	mov	r20, r16
    173c:	89 81       	ldd	r24, Y+1	; 0x01
    173e:	91 d9       	rcall	.-3294   	; 0xa62 <_ZN9EtherComm15CommandReceivedEhPKhh>
				}
			}
		}
	}
}
    1740:	df 91       	pop	r29
    1742:	cf 91       	pop	r28
    1744:	1f 91       	pop	r17
    1746:	0f 91       	pop	r16
    1748:	08 95       	ret

0000174a <_ZN9EtherComm5beginEjjRVhS1_h>:
  }
//  Serial.println((uint8_t)(checksum & CHECKSUM_MASK));
  return (checksum & CHECKSUM_MASK) == (uint8_t)(*data);
}

bool EtherComm::begin(uint16_t recvPort, uint16_t destPort, Register& csDDR, Register& csPort, uint8_t csPin){
    174a:	0f 93       	push	r16
    174c:	cf 93       	push	r28
    174e:	df 93       	push	r29
    1750:	ec 01       	movw	r28, r24
    1752:	ca 01       	movw	r24, r20
    1754:	a9 01       	movw	r20, r18
    1756:	20 2f       	mov	r18, r16
  EtherComm::_recvPort = recvPort;
    1758:	d0 93 60 05 	sts	0x0560, r29	; 0x800560 <_ZN9EtherComm9_recvPortE+0x1>
    175c:	c0 93 5f 05 	sts	0x055F, r28	; 0x80055f <_ZN9EtherComm9_recvPortE>
  EtherComm::_destPort = destPort;
    1760:	70 93 5e 05 	sts	0x055E, r23	; 0x80055e <_ZN9EtherComm9_destPortE+0x1>
    1764:	60 93 5d 05 	sts	0x055D, r22	; 0x80055d <_ZN9EtherComm9_destPortE>
  
  if (ether.begin(EtherComm::_mymac, csDDR, csPort, csPin) == 0) return false;
    1768:	bc 01       	movw	r22, r24
    176a:	86 e0       	ldi	r24, 0x06	; 6
    176c:	92 e0       	ldi	r25, 0x02	; 2
    176e:	d3 db       	rcall	.-2138   	; 0xf16 <_ZN9EtherCard5beginEPKhRVhS3_h>
    1770:	88 23       	and	r24, r24
    1772:	79 f0       	breq	.+30     	; 0x1792 <_ZN9EtherComm5beginEjjRVhS1_h+0x48>
  ether.staticSetup(EtherComm::_myip, EtherComm::_gwip);
    1774:	20 e0       	ldi	r18, 0x00	; 0
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	40 e0       	ldi	r20, 0x00	; 0
    177a:	50 e0       	ldi	r21, 0x00	; 0
    177c:	6c e0       	ldi	r22, 0x0C	; 12
    177e:	72 e0       	ldi	r23, 0x02	; 2
    1780:	80 e1       	ldi	r24, 0x10	; 16
    1782:	92 e0       	ldi	r25, 0x02	; 2
    1784:	e1 db       	rcall	.-2110   	; 0xf48 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_>
  ether.printIp("GW:  ", ether.gwip);
  ether.printIp("DNS: ", ether.dnsip);
  */
  
  //Register the udpSerialPrint() method to listen to port the receive port.
  ether.udpServerListenOnPort(&udpReceive, recvPort);
    1786:	be 01       	movw	r22, r28
    1788:	84 e8       	ldi	r24, 0x84	; 132
    178a:	9b e0       	ldi	r25, 0x0B	; 11
    178c:	08 df       	rcall	.-496    	; 0x159e <_ZN9EtherCard21udpServerListenOnPortEPFvjPhjPKcjEj>
  
  return true;
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	01 c0       	rjmp	.+2      	; 0x1794 <_ZN9EtherComm5beginEjjRVhS1_h+0x4a>

bool EtherComm::begin(uint16_t recvPort, uint16_t destPort, Register& csDDR, Register& csPort, uint8_t csPin){
  EtherComm::_recvPort = recvPort;
  EtherComm::_destPort = destPort;
  
  if (ether.begin(EtherComm::_mymac, csDDR, csPort, csPin) == 0) return false;
    1792:	80 e0       	ldi	r24, 0x00	; 0
  
  //Register the udpSerialPrint() method to listen to port the receive port.
  ether.udpServerListenOnPort(&udpReceive, recvPort);
  
  return true;
}
    1794:	df 91       	pop	r29
    1796:	cf 91       	pop	r28
    1798:	0f 91       	pop	r16
    179a:	08 95       	ret

0000179c <_ZN9EtherComm11SendCommandEhh>:

void EtherComm::SendCommand(uint8_t cmd, uint8_t len){
    179c:	0f 93       	push	r16
    179e:	1f 93       	push	r17
    17a0:	cf 93       	push	r28
    17a2:	df 93       	push	r29
  EtherComm::buffer[0] = START_BYTE;
    17a4:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    17a8:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    17ac:	9f ef       	ldi	r25, 0xFF	; 255
    17ae:	90 83       	st	Z, r25
  EtherComm::buffer[1] = cmd;
    17b0:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    17b4:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    17b8:	81 83       	std	Z+1, r24	; 0x01
  //EtherComm::buffer[2] = len;
  
  uint8_t checksum = START_BYTE + cmd;
    17ba:	81 50       	subi	r24, 0x01	; 1
  uint8_t* index = &EtherComm::buffer[2]; //TODO why is char* being used? convert ot uint8_t*!!
    17bc:	c0 91 00 02 	lds	r28, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    17c0:	d0 91 01 02 	lds	r29, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    17c4:	de 01       	movw	r26, r28
    17c6:	12 96       	adiw	r26, 0x02	; 2
  uint8_t bytes = len;
  while(bytes-- > 0){
    17c8:	4f ef       	ldi	r20, 0xFF	; 255
    17ca:	46 0f       	add	r20, r22
    17cc:	66 23       	and	r22, r22
    17ce:	81 f0       	breq	.+32     	; 0x17f0 <_ZN9EtherComm11SendCommandEhh+0x54>
    17d0:	fd 01       	movw	r30, r26
    17d2:	50 e0       	ldi	r21, 0x00	; 0
    17d4:	9a 01       	movw	r18, r20
    17d6:	2d 5f       	subi	r18, 0xFD	; 253
    17d8:	3f 4f       	sbci	r19, 0xFF	; 255
    17da:	2c 0f       	add	r18, r28
    17dc:	3d 1f       	adc	r19, r29
    checksum += (uint8_t)(*(index++));  
    17de:	91 91       	ld	r25, Z+
    17e0:	89 0f       	add	r24, r25
  //EtherComm::buffer[2] = len;
  
  uint8_t checksum = START_BYTE + cmd;
  uint8_t* index = &EtherComm::buffer[2]; //TODO why is char* being used? convert ot uint8_t*!!
  uint8_t bytes = len;
  while(bytes-- > 0){
    17e2:	e2 17       	cp	r30, r18
    17e4:	f3 07       	cpc	r31, r19
    17e6:	d9 f7       	brne	.-10     	; 0x17de <_ZN9EtherComm11SendCommandEhh+0x42>
    17e8:	4f 5f       	subi	r20, 0xFF	; 255
    17ea:	5f 4f       	sbci	r21, 0xFF	; 255
    17ec:	a4 0f       	add	r26, r20
    17ee:	b5 1f       	adc	r27, r21
    checksum += (uint8_t)(*(index++));  
  }
  (*index) = (uint8_t)(checksum & CHECKSUM_MASK);
    17f0:	8c 93       	st	X, r24

  //Serial.print("Send: ");
  //Serial.println(len);
  ether.sendUdp(EtherComm::buffer, (uint16_t)len + (uint16_t)3, _recvPort, _destIP, _destPort);
    17f2:	00 91 5d 05 	lds	r16, 0x055D	; 0x80055d <_ZN9EtherComm9_destPortE>
    17f6:	10 91 5e 05 	lds	r17, 0x055E	; 0x80055e <_ZN9EtherComm9_destPortE+0x1>
    17fa:	40 91 5f 05 	lds	r20, 0x055F	; 0x80055f <_ZN9EtherComm9_recvPortE>
    17fe:	50 91 60 05 	lds	r21, 0x0560	; 0x800560 <_ZN9EtherComm9_recvPortE+0x1>
    1802:	70 e0       	ldi	r23, 0x00	; 0
    1804:	6d 5f       	subi	r22, 0xFD	; 253
    1806:	7f 4f       	sbci	r23, 0xFF	; 255
    1808:	22 e0       	ldi	r18, 0x02	; 2
    180a:	32 e0       	ldi	r19, 0x02	; 2
    180c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    1810:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    1814:	52 dd       	rcall	.-1372   	; 0x12ba <_ZN9EtherCard7sendUdpEPKhjjS1_j>
}
    1816:	df 91       	pop	r29
    1818:	cf 91       	pop	r28
    181a:	1f 91       	pop	r17
    181c:	0f 91       	pop	r16
    181e:	08 95       	ret

00001820 <main>:
#include "TestIMU.h"
#include <avr/interrupt.h>

int main(void){
	//TestIMU();
	sei(); //Enable global interrupts
    1820:	78 94       	sei
	public:
	inline HardwareSerial(
	volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
	volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
	volatile uint8_t *ucsrc, volatile uint8_t *udr);
	void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    1822:	26 e0       	ldi	r18, 0x06	; 6
    1824:	40 e8       	ldi	r20, 0x80	; 128
    1826:	55 e2       	ldi	r21, 0x25	; 37
    1828:	60 e0       	ldi	r22, 0x00	; 0
    182a:	70 e0       	ldi	r23, 0x00	; 0
    182c:	81 e6       	ldi	r24, 0x61	; 97
    182e:	95 e0       	ldi	r25, 0x05	; 5
    1830:	14 d1       	rcall	.+552    	; 0x1a5a <_ZN14HardwareSerial5beginEmh>
	Serial.begin(9600);
	Serial.println("\nInitializing...");
    1832:	6b e2       	ldi	r22, 0x2B	; 43
    1834:	72 e0       	ldi	r23, 0x02	; 2
    1836:	81 e6       	ldi	r24, 0x61	; 97
    1838:	95 e0       	ldi	r25, 0x05	; 5
    183a:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <_ZN5Print7printlnEPKc>
	
	if(!rov.begin()){
    183e:	82 d7       	rcall	.+3844   	; 0x2744 <_ZN5Robot5beginEv>
    1840:	81 11       	cpse	r24, r1
    1842:	07 c0       	rjmp	.+14     	; 0x1852 <main+0x32>
		Serial.println("Failed to initialize robot.");
    1844:	6c e3       	ldi	r22, 0x3C	; 60
    1846:	72 e0       	ldi	r23, 0x02	; 2
    1848:	81 e6       	ldi	r24, 0x61	; 97
    184a:	95 e0       	ldi	r25, 0x05	; 5
    184c:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <_ZN5Print7printlnEPKc>
    1850:	ff cf       	rjmp	.-2      	; 0x1850 <main+0x30>
		while(1);
	}
	Serial.println("Robot initialized.");
    1852:	68 e5       	ldi	r22, 0x58	; 88
    1854:	72 e0       	ldi	r23, 0x02	; 2
    1856:	81 e6       	ldi	r24, 0x61	; 97
    1858:	95 e0       	ldi	r25, 0x05	; 5
    185a:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <_ZN5Print7printlnEPKc>
	
	if(!EtherComm::begin((uint16_t)6001, (uint16_t)6002, EthernetDDR, EthernetPort, EthernetPin_CS)){
    185e:	00 e2       	ldi	r16, 0x20	; 32
    1860:	22 e0       	ldi	r18, 0x02	; 2
    1862:	31 e0       	ldi	r19, 0x01	; 1
    1864:	41 e0       	ldi	r20, 0x01	; 1
    1866:	51 e0       	ldi	r21, 0x01	; 1
    1868:	62 e7       	ldi	r22, 0x72	; 114
    186a:	77 e1       	ldi	r23, 0x17	; 23
    186c:	81 e7       	ldi	r24, 0x71	; 113
    186e:	97 e1       	ldi	r25, 0x17	; 23
    1870:	6c df       	rcall	.-296    	; 0x174a <_ZN9EtherComm5beginEjjRVhS1_h>
    1872:	81 11       	cpse	r24, r1
    1874:	07 c0       	rjmp	.+14     	; 0x1884 <main+0x64>
		Serial.println("Failed to access Ethernet controller.");
    1876:	6b e6       	ldi	r22, 0x6B	; 107
    1878:	72 e0       	ldi	r23, 0x02	; 2
    187a:	81 e6       	ldi	r24, 0x61	; 97
    187c:	95 e0       	ldi	r25, 0x05	; 5
    187e:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <_ZN5Print7printlnEPKc>
    1882:	ff cf       	rjmp	.-2      	; 0x1882 <main+0x62>
		while(1);
	}
	Serial.println("Connected to controller.");
    1884:	61 e9       	ldi	r22, 0x91	; 145
    1886:	72 e0       	ldi	r23, 0x02	; 2
    1888:	81 e6       	ldi	r24, 0x61	; 97
    188a:	95 e0       	ldi	r25, 0x05	; 5
  static bool begin(uint16_t recvPort, uint16_t destPort, Register& csDDR, Register& csPort, uint8_t csPin);

  friend void udpReceive(uint16_t dest_port, uint8_t src_ip[IP_LEN], uint16_t src_port, const char *data, uint16_t len);

  static void Loop(){
    ether.packetLoop(ether.packetReceive());
    188c:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <_ZN5Print7printlnEPKc>
    1890:	dd da       	rcall	.-2630   	; 0xe4c <_ZN8ENC28J6013packetReceiveEv>
    1892:	4c dd       	rcall	.-1384   	; 0x132c <_ZN9EtherCard10packetLoopEj>
    1894:	fd cf       	rjmp	.-6      	; 0x1890 <main+0x70>

00001896 <_ZN14HardwareSerial9availableEv>:
	#endif
	#if defined(HAVE_HWSERIAL2)
	if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
	#endif
	#if defined(HAVE_HWSERIAL3)
	if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    1896:	fc 01       	movw	r30, r24
    1898:	97 85       	ldd	r25, Z+15	; 0x0f
    189a:	20 89       	ldd	r18, Z+16	; 0x10
    189c:	89 2f       	mov	r24, r25
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	80 5c       	subi	r24, 0xC0	; 192
    18a2:	9f 4f       	sbci	r25, 0xFF	; 255
    18a4:	82 1b       	sub	r24, r18
    18a6:	91 09       	sbc	r25, r1
    18a8:	8f 73       	andi	r24, 0x3F	; 63
    18aa:	99 27       	eor	r25, r25
    18ac:	08 95       	ret

000018ae <_ZN14HardwareSerial4peekEv>:
    18ae:	fc 01       	movw	r30, r24
    18b0:	97 85       	ldd	r25, Z+15	; 0x0f
    18b2:	80 89       	ldd	r24, Z+16	; 0x10
    18b4:	98 17       	cp	r25, r24
    18b6:	31 f0       	breq	.+12     	; 0x18c4 <_ZN14HardwareSerial4peekEv+0x16>
    18b8:	80 89       	ldd	r24, Z+16	; 0x10
    18ba:	e8 0f       	add	r30, r24
    18bc:	f1 1d       	adc	r31, r1
    18be:	83 89       	ldd	r24, Z+19	; 0x13
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	08 95       	ret
    18c4:	8f ef       	ldi	r24, 0xFF	; 255
    18c6:	9f ef       	ldi	r25, 0xFF	; 255
    18c8:	08 95       	ret

000018ca <_ZN14HardwareSerial4readEv>:
    18ca:	fc 01       	movw	r30, r24
    18cc:	97 85       	ldd	r25, Z+15	; 0x0f
    18ce:	80 89       	ldd	r24, Z+16	; 0x10
    18d0:	98 17       	cp	r25, r24
    18d2:	61 f0       	breq	.+24     	; 0x18ec <_ZN14HardwareSerial4readEv+0x22>
    18d4:	80 89       	ldd	r24, Z+16	; 0x10
    18d6:	df 01       	movw	r26, r30
    18d8:	a8 0f       	add	r26, r24
    18da:	b1 1d       	adc	r27, r1
    18dc:	53 96       	adiw	r26, 0x13	; 19
    18de:	8c 91       	ld	r24, X
    18e0:	90 89       	ldd	r25, Z+16	; 0x10
    18e2:	9f 5f       	subi	r25, 0xFF	; 255
    18e4:	9f 73       	andi	r25, 0x3F	; 63
    18e6:	90 8b       	std	Z+16, r25	; 0x10
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	08 95       	ret
    18ec:	8f ef       	ldi	r24, 0xFF	; 255
    18ee:	9f ef       	ldi	r25, 0xFF	; 255
    18f0:	08 95       	ret

000018f2 <_ZN14HardwareSerial17availableForWriteEv>:
    18f2:	fc 01       	movw	r30, r24
    18f4:	21 89       	ldd	r18, Z+17	; 0x11
    18f6:	32 89       	ldd	r19, Z+18	; 0x12
    18f8:	23 17       	cp	r18, r19
    18fa:	38 f0       	brcs	.+14     	; 0x190a <_ZN14HardwareSerial17availableForWriteEv+0x18>
    18fc:	8f e3       	ldi	r24, 0x3F	; 63
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	82 1b       	sub	r24, r18
    1902:	91 09       	sbc	r25, r1
    1904:	83 0f       	add	r24, r19
    1906:	91 1d       	adc	r25, r1
    1908:	08 95       	ret
    190a:	83 2f       	mov	r24, r19
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	82 1b       	sub	r24, r18
    1910:	91 09       	sbc	r25, r1
    1912:	01 97       	sbiw	r24, 0x01	; 1
    1914:	08 95       	ret

00001916 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1916:	fc 01       	movw	r30, r24
	// If interrupts are enabled, there must be more data in the output
	// buffer. Send the next byte
	unsigned char c = _tx_buffer[_tx_buffer_tail];
    1918:	82 89       	ldd	r24, Z+18	; 0x12
    191a:	df 01       	movw	r26, r30
    191c:	a8 0f       	add	r26, r24
    191e:	b1 1d       	adc	r27, r1
    1920:	ad 5a       	subi	r26, 0xAD	; 173
    1922:	bf 4f       	sbci	r27, 0xFF	; 255
    1924:	8c 91       	ld	r24, X
	_tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1926:	22 89       	ldd	r18, Z+18	; 0x12
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	2f 5f       	subi	r18, 0xFF	; 255
    192c:	3f 4f       	sbci	r19, 0xFF	; 255
    192e:	2f 73       	andi	r18, 0x3F	; 63
    1930:	30 78       	andi	r19, 0x80	; 128
    1932:	33 23       	and	r19, r19
    1934:	34 f4       	brge	.+12     	; 0x1942 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x2c>
    1936:	21 50       	subi	r18, 0x01	; 1
    1938:	31 09       	sbc	r19, r1
    193a:	20 6c       	ori	r18, 0xC0	; 192
    193c:	3f 6f       	ori	r19, 0xFF	; 255
    193e:	2f 5f       	subi	r18, 0xFF	; 255
    1940:	3f 4f       	sbci	r19, 0xFF	; 255
    1942:	22 8b       	std	Z+18, r18	; 0x12

	*_udr = c;
    1944:	a4 85       	ldd	r26, Z+12	; 0x0c
    1946:	b5 85       	ldd	r27, Z+13	; 0x0d
    1948:	8c 93       	st	X, r24
	// location". This makes sure flush() won't return until the bytes
	// actually got written. Other r/w bits are preserved, and zeroes
	// written to the rest.

	#ifdef MPCM0
	*_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    194a:	a6 81       	ldd	r26, Z+6	; 0x06
    194c:	b7 81       	ldd	r27, Z+7	; 0x07
    194e:	8c 91       	ld	r24, X
    1950:	83 70       	andi	r24, 0x03	; 3
    1952:	80 64       	ori	r24, 0x40	; 64
    1954:	8c 93       	st	X, r24
	#else
	*_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
	#endif

	if (_tx_buffer_head == _tx_buffer_tail) {
    1956:	91 89       	ldd	r25, Z+17	; 0x11
    1958:	82 89       	ldd	r24, Z+18	; 0x12
    195a:	98 13       	cpse	r25, r24
    195c:	06 c0       	rjmp	.+12     	; 0x196a <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x54>
		// Buffer empty, so disable interrupts
		cbi(*_ucsrb, UDRIE0);
    195e:	00 84       	ldd	r0, Z+8	; 0x08
    1960:	f1 85       	ldd	r31, Z+9	; 0x09
    1962:	e0 2d       	mov	r30, r0
    1964:	80 81       	ld	r24, Z
    1966:	8f 7d       	andi	r24, 0xDF	; 223
    1968:	80 83       	st	Z, r24
    196a:	08 95       	ret

0000196c <_ZN14HardwareSerial5flushEv>:
	if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
	return tail - head - 1;
}

void HardwareSerial::flush()
{
    196c:	cf 93       	push	r28
    196e:	df 93       	push	r29
    1970:	ec 01       	movw	r28, r24
	// If we have never written a byte, no need to flush. This special
	// case is needed since there is no way to force the TXC (transmit
	// complete) bit to 1 during initialization
	if (!_written)
    1972:	8e 85       	ldd	r24, Y+14	; 0x0e
    1974:	88 23       	and	r24, r24
    1976:	d1 f0       	breq	.+52     	; 0x19ac <_ZN14HardwareSerial5flushEv+0x40>
	return;

	while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1978:	e8 85       	ldd	r30, Y+8	; 0x08
    197a:	f9 85       	ldd	r31, Y+9	; 0x09
    197c:	80 81       	ld	r24, Z
    197e:	85 fd       	sbrc	r24, 5
    1980:	05 c0       	rjmp	.+10     	; 0x198c <_ZN14HardwareSerial5flushEv+0x20>
    1982:	ae 81       	ldd	r26, Y+6	; 0x06
    1984:	bf 81       	ldd	r27, Y+7	; 0x07
    1986:	8c 91       	ld	r24, X
    1988:	86 fd       	sbrc	r24, 6
    198a:	10 c0       	rjmp	.+32     	; 0x19ac <_ZN14HardwareSerial5flushEv+0x40>
		if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    198c:	0f b6       	in	r0, 0x3f	; 63
    198e:	07 fc       	sbrc	r0, 7
    1990:	f5 cf       	rjmp	.-22     	; 0x197c <_ZN14HardwareSerial5flushEv+0x10>
    1992:	80 81       	ld	r24, Z
    1994:	85 ff       	sbrs	r24, 5
    1996:	f2 cf       	rjmp	.-28     	; 0x197c <_ZN14HardwareSerial5flushEv+0x10>
    1998:	03 c0       	rjmp	.+6      	; 0x19a0 <_ZN14HardwareSerial5flushEv+0x34>
		// Interrupts are globally disabled, but the DR empty
		// interrupt should be enabled, so poll the DR empty flag to
		// prevent deadlock
		if (bit_is_set(*_ucsra, UDRE0))
		_tx_udr_empty_irq();
    199a:	ce 01       	movw	r24, r28
    199c:	bc df       	rcall	.-136    	; 0x1916 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    199e:	ec cf       	rjmp	.-40     	; 0x1978 <_ZN14HardwareSerial5flushEv+0xc>
	while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
		if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
		// Interrupts are globally disabled, but the DR empty
		// interrupt should be enabled, so poll the DR empty flag to
		// prevent deadlock
		if (bit_is_set(*_ucsra, UDRE0))
    19a0:	ae 81       	ldd	r26, Y+6	; 0x06
    19a2:	bf 81       	ldd	r27, Y+7	; 0x07
    19a4:	8c 91       	ld	r24, X
    19a6:	85 ff       	sbrs	r24, 5
    19a8:	e9 cf       	rjmp	.-46     	; 0x197c <_ZN14HardwareSerial5flushEv+0x10>
    19aa:	f7 cf       	rjmp	.-18     	; 0x199a <_ZN14HardwareSerial5flushEv+0x2e>
		_tx_udr_empty_irq();
	}
	// If we get here, nothing is queued anymore (DRIE is disabled) and
	// the hardware finished tranmission (TXC is set).
}
    19ac:	df 91       	pop	r29
    19ae:	cf 91       	pop	r28
    19b0:	08 95       	ret

000019b2 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    19b2:	0f 93       	push	r16
    19b4:	1f 93       	push	r17
    19b6:	cf 93       	push	r28
    19b8:	df 93       	push	r29
    19ba:	ec 01       	movw	r28, r24
	_written = true;
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	8e 87       	std	Y+14, r24	; 0x0e
	// If the buffer and the data register is empty, just write the byte
	// to the data register and be done. This shortcut helps
	// significantly improve the effective datarate at high (>
	// 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
	if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    19c0:	99 89       	ldd	r25, Y+17	; 0x11
    19c2:	8a 89       	ldd	r24, Y+18	; 0x12
    19c4:	98 13       	cpse	r25, r24
    19c6:	25 c0       	rjmp	.+74     	; 0x1a12 <_ZN14HardwareSerial5writeEh+0x60>
    19c8:	ee 81       	ldd	r30, Y+6	; 0x06
    19ca:	ff 81       	ldd	r31, Y+7	; 0x07
    19cc:	80 81       	ld	r24, Z
    19ce:	85 fd       	sbrc	r24, 5
    19d0:	31 c0       	rjmp	.+98     	; 0x1a34 <_ZN14HardwareSerial5writeEh+0x82>
    19d2:	1f c0       	rjmp	.+62     	; 0x1a12 <_ZN14HardwareSerial5writeEh+0x60>
	}
	tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
	// If the output buffer is full, there's nothing for it other than to
	// wait for the interrupt handler to empty it a bit
	while (i == _tx_buffer_tail) {
    19d4:	8a 89       	ldd	r24, Y+18	; 0x12
    19d6:	18 13       	cpse	r17, r24
    19d8:	0b c0       	rjmp	.+22     	; 0x19f0 <_ZN14HardwareSerial5writeEh+0x3e>
		if (bit_is_clear(SREG, SREG_I)) {
    19da:	0f b6       	in	r0, 0x3f	; 63
    19dc:	07 fc       	sbrc	r0, 7
    19de:	fa cf       	rjmp	.-12     	; 0x19d4 <_ZN14HardwareSerial5writeEh+0x22>
			// Interrupts are disabled, so we'll have to poll the data
			// register empty flag ourselves. If it is set, pretend an
			// interrupt has happened and call the handler to free up
			// space for us.
			if(bit_is_set(*_ucsra, UDRE0))
    19e0:	ee 81       	ldd	r30, Y+6	; 0x06
    19e2:	ff 81       	ldd	r31, Y+7	; 0x07
    19e4:	80 81       	ld	r24, Z
    19e6:	85 ff       	sbrs	r24, 5
    19e8:	f5 cf       	rjmp	.-22     	; 0x19d4 <_ZN14HardwareSerial5writeEh+0x22>
			_tx_udr_empty_irq();
    19ea:	ce 01       	movw	r24, r28
    19ec:	94 df       	rcall	.-216    	; 0x1916 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    19ee:	f2 cf       	rjmp	.-28     	; 0x19d4 <_ZN14HardwareSerial5writeEh+0x22>
			} else {
			// nop, the interrupt handler will free up space for us
		}
	}

	_tx_buffer[_tx_buffer_head] = c;
    19f0:	89 89       	ldd	r24, Y+17	; 0x11
    19f2:	fe 01       	movw	r30, r28
    19f4:	e8 0f       	add	r30, r24
    19f6:	f1 1d       	adc	r31, r1
    19f8:	ed 5a       	subi	r30, 0xAD	; 173
    19fa:	ff 4f       	sbci	r31, 0xFF	; 255
    19fc:	00 83       	st	Z, r16

	// make atomic to prevent execution of ISR between setting the
	// head pointer and setting the interrupt flag resulting in buffer
	// retransmission
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    19fe:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1a00:	f8 94       	cli
		_tx_buffer_head = i;
    1a02:	19 8b       	std	Y+17, r17	; 0x11
		sbi(*_ucsrb, UDRIE0);
    1a04:	e8 85       	ldd	r30, Y+8	; 0x08
    1a06:	f9 85       	ldd	r31, Y+9	; 0x09
    1a08:	80 81       	ld	r24, Z
    1a0a:	80 62       	ori	r24, 0x20	; 32
    1a0c:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1a0e:	9f bf       	out	0x3f, r25	; 63
	}
	
	return 1;
    1a10:	1d c0       	rjmp	.+58     	; 0x1a4c <_ZN14HardwareSerial5writeEh+0x9a>
			*_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
			#endif
		}
		return 1;
	}
	tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1a12:	29 89       	ldd	r18, Y+17	; 0x11
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	2f 5f       	subi	r18, 0xFF	; 255
    1a18:	3f 4f       	sbci	r19, 0xFF	; 255
    1a1a:	2f 73       	andi	r18, 0x3F	; 63
    1a1c:	30 78       	andi	r19, 0x80	; 128
    1a1e:	33 23       	and	r19, r19
    1a20:	34 f4       	brge	.+12     	; 0x1a2e <_ZN14HardwareSerial5writeEh+0x7c>
    1a22:	21 50       	subi	r18, 0x01	; 1
    1a24:	31 09       	sbc	r19, r1
    1a26:	20 6c       	ori	r18, 0xC0	; 192
    1a28:	3f 6f       	ori	r19, 0xFF	; 255
    1a2a:	2f 5f       	subi	r18, 0xFF	; 255
    1a2c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a2e:	06 2f       	mov	r16, r22
    1a30:	12 2f       	mov	r17, r18
    1a32:	d0 cf       	rjmp	.-96     	; 0x19d4 <_ZN14HardwareSerial5writeEh+0x22>
		// So writing UDR must happen first.
		// Writing UDR and clearing TC must be done atomically, otherwise
		// interrupts might delay the TXC clear so the byte written to UDR
		// is transmitted (setting TXC) before clearing TXC. Then TXC will
		// be cleared when no bytes are left, causing flush() to hang
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1a34:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1a36:	f8 94       	cli
			*_udr = c;
    1a38:	ec 85       	ldd	r30, Y+12	; 0x0c
    1a3a:	fd 85       	ldd	r31, Y+13	; 0x0d
    1a3c:	60 83       	st	Z, r22
			#ifdef MPCM0
			*_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1a3e:	ee 81       	ldd	r30, Y+6	; 0x06
    1a40:	ff 81       	ldd	r31, Y+7	; 0x07
    1a42:	80 81       	ld	r24, Z
    1a44:	83 70       	andi	r24, 0x03	; 3
    1a46:	80 64       	ori	r24, 0x40	; 64
    1a48:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1a4a:	9f bf       	out	0x3f, r25	; 63
		_tx_buffer_head = i;
		sbi(*_ucsrb, UDRIE0);
	}
	
	return 1;
}
    1a4c:	81 e0       	ldi	r24, 0x01	; 1
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	df 91       	pop	r29
    1a52:	cf 91       	pop	r28
    1a54:	1f 91       	pop	r17
    1a56:	0f 91       	pop	r16
    1a58:	08 95       	ret

00001a5a <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, uint8_t config)
{
    1a5a:	cf 92       	push	r12
    1a5c:	df 92       	push	r13
    1a5e:	ef 92       	push	r14
    1a60:	ff 92       	push	r15
    1a62:	1f 93       	push	r17
    1a64:	cf 93       	push	r28
    1a66:	df 93       	push	r29
    1a68:	ec 01       	movw	r28, r24
    1a6a:	6a 01       	movw	r12, r20
    1a6c:	7b 01       	movw	r14, r22
    1a6e:	12 2f       	mov	r17, r18
	// Try u2x mode first
	uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
	*_ucsra = 1 << U2X0;
    1a70:	ee 81       	ldd	r30, Y+6	; 0x06
    1a72:	ff 81       	ldd	r31, Y+7	; 0x07
    1a74:	82 e0       	ldi	r24, 0x02	; 2
    1a76:	80 83       	st	Z, r24
	// hardcoded exception for 57600 for compatibility with the bootloader
	// shipped with the Duemilanove and previous boards and the firmware
	// on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
	// be > 4095, so switch back to non-u2x mode if the baud rate is too
	// low.
	if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1a78:	41 15       	cp	r20, r1
    1a7a:	51 4e       	sbci	r21, 0xE1	; 225
    1a7c:	61 05       	cpc	r22, r1
    1a7e:	71 05       	cpc	r23, r1
    1a80:	b1 f0       	breq	.+44     	; 0x1aae <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, uint8_t config)
{
	// Try u2x mode first
	uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1a82:	60 e0       	ldi	r22, 0x00	; 0
    1a84:	79 e0       	ldi	r23, 0x09	; 9
    1a86:	8d e3       	ldi	r24, 0x3D	; 61
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	a7 01       	movw	r20, r14
    1a8c:	96 01       	movw	r18, r12
    1a8e:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <__udivmodsi4>
    1a92:	da 01       	movw	r26, r20
    1a94:	c9 01       	movw	r24, r18
    1a96:	01 97       	sbiw	r24, 0x01	; 1
    1a98:	a1 09       	sbc	r26, r1
    1a9a:	b1 09       	sbc	r27, r1
    1a9c:	b6 95       	lsr	r27
    1a9e:	a7 95       	ror	r26
    1aa0:	97 95       	ror	r25
    1aa2:	87 95       	ror	r24
    1aa4:	9c 01       	movw	r18, r24
	// hardcoded exception for 57600 for compatibility with the bootloader
	// shipped with the Duemilanove and previous boards and the firmware
	// on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
	// be > 4095, so switch back to non-u2x mode if the baud rate is too
	// low.
	if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1aa6:	21 15       	cp	r18, r1
    1aa8:	80 e1       	ldi	r24, 0x10	; 16
    1aaa:	38 07       	cpc	r19, r24
    1aac:	a8 f0       	brcs	.+42     	; 0x1ad8 <_ZN14HardwareSerial5beginEmh+0x7e>
	{
		*_ucsra = 0;
    1aae:	ee 81       	ldd	r30, Y+6	; 0x06
    1ab0:	ff 81       	ldd	r31, Y+7	; 0x07
    1ab2:	10 82       	st	Z, r1
		baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1ab4:	60 e8       	ldi	r22, 0x80	; 128
    1ab6:	74 e8       	ldi	r23, 0x84	; 132
    1ab8:	8e e1       	ldi	r24, 0x1E	; 30
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	a7 01       	movw	r20, r14
    1abe:	96 01       	movw	r18, r12
    1ac0:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <__udivmodsi4>
    1ac4:	da 01       	movw	r26, r20
    1ac6:	c9 01       	movw	r24, r18
    1ac8:	01 97       	sbiw	r24, 0x01	; 1
    1aca:	a1 09       	sbc	r26, r1
    1acc:	b1 09       	sbc	r27, r1
    1ace:	b6 95       	lsr	r27
    1ad0:	a7 95       	ror	r26
    1ad2:	97 95       	ror	r25
    1ad4:	87 95       	ror	r24
    1ad6:	9c 01       	movw	r18, r24
	}

	// assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
	*_ubrrh = baud_setting >> 8;
    1ad8:	ea 81       	ldd	r30, Y+2	; 0x02
    1ada:	fb 81       	ldd	r31, Y+3	; 0x03
    1adc:	30 83       	st	Z, r19
	*_ubrrl = baud_setting;
    1ade:	ec 81       	ldd	r30, Y+4	; 0x04
    1ae0:	fd 81       	ldd	r31, Y+5	; 0x05
    1ae2:	20 83       	st	Z, r18

	_written = false;
    1ae4:	1e 86       	std	Y+14, r1	; 0x0e

	//set the data bits, parity, and stop bits
	#if defined(__AVR_ATmega8__)
	config |= 0x80; // select UCSRC register (shared with UBRRH)
	#endif
	*_ucsrc = config;
    1ae6:	ea 85       	ldd	r30, Y+10	; 0x0a
    1ae8:	fb 85       	ldd	r31, Y+11	; 0x0b
    1aea:	10 83       	st	Z, r17
	
	sbi(*_ucsrb, RXEN0);
    1aec:	e8 85       	ldd	r30, Y+8	; 0x08
    1aee:	f9 85       	ldd	r31, Y+9	; 0x09
    1af0:	80 81       	ld	r24, Z
    1af2:	80 61       	ori	r24, 0x10	; 16
    1af4:	80 83       	st	Z, r24
	sbi(*_ucsrb, TXEN0);
    1af6:	e8 85       	ldd	r30, Y+8	; 0x08
    1af8:	f9 85       	ldd	r31, Y+9	; 0x09
    1afa:	80 81       	ld	r24, Z
    1afc:	88 60       	ori	r24, 0x08	; 8
    1afe:	80 83       	st	Z, r24
	sbi(*_ucsrb, RXCIE0);
    1b00:	e8 85       	ldd	r30, Y+8	; 0x08
    1b02:	f9 85       	ldd	r31, Y+9	; 0x09
    1b04:	80 81       	ld	r24, Z
    1b06:	80 68       	ori	r24, 0x80	; 128
    1b08:	80 83       	st	Z, r24
	cbi(*_ucsrb, UDRIE0);
    1b0a:	e8 85       	ldd	r30, Y+8	; 0x08
    1b0c:	f9 85       	ldd	r31, Y+9	; 0x09
    1b0e:	80 81       	ld	r24, Z
    1b10:	8f 7d       	andi	r24, 0xDF	; 223
    1b12:	80 83       	st	Z, r24
}
    1b14:	df 91       	pop	r29
    1b16:	cf 91       	pop	r28
    1b18:	1f 91       	pop	r17
    1b1a:	ff 90       	pop	r15
    1b1c:	ef 90       	pop	r14
    1b1e:	df 90       	pop	r13
    1b20:	cf 90       	pop	r12
    1b22:	08 95       	ret

00001b24 <_ZN5Print17availableForWriteEv>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
}
    1b24:	80 e0       	ldi	r24, 0x00	; 0
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	08 95       	ret

00001b2a <__vector_25>:
    1b2a:	1f 92       	push	r1
    1b2c:	0f 92       	push	r0
    1b2e:	0f b6       	in	r0, 0x3f	; 63
    1b30:	0f 92       	push	r0
    1b32:	11 24       	eor	r1, r1
    1b34:	0b b6       	in	r0, 0x3b	; 59
    1b36:	0f 92       	push	r0
    1b38:	2f 93       	push	r18
    1b3a:	8f 93       	push	r24
    1b3c:	9f 93       	push	r25
    1b3e:	af 93       	push	r26
    1b40:	bf 93       	push	r27
    1b42:	ef 93       	push	r30
    1b44:	ff 93       	push	r31
    1b46:	e0 91 67 05 	lds	r30, 0x0567	; 0x800567 <Serial+0x6>
    1b4a:	f0 91 68 05 	lds	r31, 0x0568	; 0x800568 <Serial+0x7>
    1b4e:	80 81       	ld	r24, Z
    1b50:	82 fd       	sbrc	r24, 2
    1b52:	14 c0       	rjmp	.+40     	; 0x1b7c <__vector_25+0x52>
    1b54:	e1 e6       	ldi	r30, 0x61	; 97
    1b56:	f5 e0       	ldi	r31, 0x05	; 5
    1b58:	a4 85       	ldd	r26, Z+12	; 0x0c
    1b5a:	b5 85       	ldd	r27, Z+13	; 0x0d
    1b5c:	2c 91       	ld	r18, X
    1b5e:	87 85       	ldd	r24, Z+15	; 0x0f
    1b60:	8f 5f       	subi	r24, 0xFF	; 255
    1b62:	8f 70       	andi	r24, 0x0F	; 15
    1b64:	90 89       	ldd	r25, Z+16	; 0x10
    1b66:	89 17       	cp	r24, r25
    1b68:	71 f0       	breq	.+28     	; 0x1b86 <__vector_25+0x5c>
    1b6a:	df 01       	movw	r26, r30
    1b6c:	e7 85       	ldd	r30, Z+15	; 0x0f
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	ef 59       	subi	r30, 0x9F	; 159
    1b72:	fa 4f       	sbci	r31, 0xFA	; 250
    1b74:	23 8b       	std	Z+19, r18	; 0x13
    1b76:	1f 96       	adiw	r26, 0x0f	; 15
    1b78:	8c 93       	st	X, r24
    1b7a:	05 c0       	rjmp	.+10     	; 0x1b86 <__vector_25+0x5c>
    1b7c:	e0 91 6d 05 	lds	r30, 0x056D	; 0x80056d <Serial+0xc>
    1b80:	f0 91 6e 05 	lds	r31, 0x056E	; 0x80056e <Serial+0xd>
    1b84:	80 81       	ld	r24, Z
    1b86:	ff 91       	pop	r31
    1b88:	ef 91       	pop	r30
    1b8a:	bf 91       	pop	r27
    1b8c:	af 91       	pop	r26
    1b8e:	9f 91       	pop	r25
    1b90:	8f 91       	pop	r24
    1b92:	2f 91       	pop	r18
    1b94:	0f 90       	pop	r0
    1b96:	0b be       	out	0x3b, r0	; 59
    1b98:	0f 90       	pop	r0
    1b9a:	0f be       	out	0x3f, r0	; 63
    1b9c:	0f 90       	pop	r0
    1b9e:	1f 90       	pop	r1
    1ba0:	18 95       	reti

00001ba2 <__vector_26>:
    1ba2:	1f 92       	push	r1
    1ba4:	0f 92       	push	r0
    1ba6:	0f b6       	in	r0, 0x3f	; 63
    1ba8:	0f 92       	push	r0
    1baa:	11 24       	eor	r1, r1
    1bac:	0b b6       	in	r0, 0x3b	; 59
    1bae:	0f 92       	push	r0
    1bb0:	2f 93       	push	r18
    1bb2:	3f 93       	push	r19
    1bb4:	4f 93       	push	r20
    1bb6:	5f 93       	push	r21
    1bb8:	6f 93       	push	r22
    1bba:	7f 93       	push	r23
    1bbc:	8f 93       	push	r24
    1bbe:	9f 93       	push	r25
    1bc0:	af 93       	push	r26
    1bc2:	bf 93       	push	r27
    1bc4:	ef 93       	push	r30
    1bc6:	ff 93       	push	r31
    1bc8:	81 e6       	ldi	r24, 0x61	; 97
    1bca:	95 e0       	ldi	r25, 0x05	; 5
    1bcc:	a4 de       	rcall	.-696    	; 0x1916 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1bce:	ff 91       	pop	r31
    1bd0:	ef 91       	pop	r30
    1bd2:	bf 91       	pop	r27
    1bd4:	af 91       	pop	r26
    1bd6:	9f 91       	pop	r25
    1bd8:	8f 91       	pop	r24
    1bda:	7f 91       	pop	r23
    1bdc:	6f 91       	pop	r22
    1bde:	5f 91       	pop	r21
    1be0:	4f 91       	pop	r20
    1be2:	3f 91       	pop	r19
    1be4:	2f 91       	pop	r18
    1be6:	0f 90       	pop	r0
    1be8:	0b be       	out	0x3b, r0	; 59
    1bea:	0f 90       	pop	r0
    1bec:	0f be       	out	0x3f, r0	; 63
    1bee:	0f 90       	pop	r0
    1bf0:	1f 90       	pop	r1
    1bf2:	18 95       	reti

00001bf4 <_GLOBAL__sub_I___vector_25>:
volatile uint8_t *ucsrc, volatile uint8_t *udr) :
_ubrrh(ubrrh), _ubrrl(ubrrl),
_ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
_udr(udr),
_rx_buffer_head(0), _rx_buffer_tail(0),
_tx_buffer_head(0), _tx_buffer_tail(0)
    1bf4:	e1 e6       	ldi	r30, 0x61	; 97
    1bf6:	f5 e0       	ldi	r31, 0x05	; 5
    1bf8:	8e ea       	ldi	r24, 0xAE	; 174
    1bfa:	92 e0       	ldi	r25, 0x02	; 2
    1bfc:	91 83       	std	Z+1, r25	; 0x01
    1bfe:	80 83       	st	Z, r24
    1c00:	85 ec       	ldi	r24, 0xC5	; 197
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	93 83       	std	Z+3, r25	; 0x03
    1c06:	82 83       	std	Z+2, r24	; 0x02
    1c08:	84 ec       	ldi	r24, 0xC4	; 196
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	95 83       	std	Z+5, r25	; 0x05
    1c0e:	84 83       	std	Z+4, r24	; 0x04
    1c10:	80 ec       	ldi	r24, 0xC0	; 192
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	97 83       	std	Z+7, r25	; 0x07
    1c16:	86 83       	std	Z+6, r24	; 0x06
    1c18:	81 ec       	ldi	r24, 0xC1	; 193
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	91 87       	std	Z+9, r25	; 0x09
    1c1e:	80 87       	std	Z+8, r24	; 0x08
    1c20:	82 ec       	ldi	r24, 0xC2	; 194
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	93 87       	std	Z+11, r25	; 0x0b
    1c26:	82 87       	std	Z+10, r24	; 0x0a
    1c28:	86 ec       	ldi	r24, 0xC6	; 198
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	95 87       	std	Z+13, r25	; 0x0d
    1c2e:	84 87       	std	Z+12, r24	; 0x0c
    1c30:	17 86       	std	Z+15, r1	; 0x0f
    1c32:	10 8a       	std	Z+16, r1	; 0x10
    1c34:	11 8a       	std	Z+17, r1	; 0x11
    1c36:	12 8a       	std	Z+18, r1	; 0x12
    1c38:	08 95       	ret

00001c3a <__vector_36>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
}
    1c3a:	1f 92       	push	r1
    1c3c:	0f 92       	push	r0
    1c3e:	0f b6       	in	r0, 0x3f	; 63
    1c40:	0f 92       	push	r0
    1c42:	11 24       	eor	r1, r1
    1c44:	0b b6       	in	r0, 0x3b	; 59
    1c46:	0f 92       	push	r0
    1c48:	2f 93       	push	r18
    1c4a:	8f 93       	push	r24
    1c4c:	9f 93       	push	r25
    1c4e:	af 93       	push	r26
    1c50:	bf 93       	push	r27
    1c52:	ef 93       	push	r30
    1c54:	ff 93       	push	r31
    1c56:	e0 91 9a 05 	lds	r30, 0x059A	; 0x80059a <Serial1+0x6>
    1c5a:	f0 91 9b 05 	lds	r31, 0x059B	; 0x80059b <Serial1+0x7>
    1c5e:	80 81       	ld	r24, Z
    1c60:	82 fd       	sbrc	r24, 2
    1c62:	14 c0       	rjmp	.+40     	; 0x1c8c <__vector_36+0x52>
    1c64:	e4 e9       	ldi	r30, 0x94	; 148
    1c66:	f5 e0       	ldi	r31, 0x05	; 5
    1c68:	a4 85       	ldd	r26, Z+12	; 0x0c
    1c6a:	b5 85       	ldd	r27, Z+13	; 0x0d
    1c6c:	2c 91       	ld	r18, X
    1c6e:	87 85       	ldd	r24, Z+15	; 0x0f
    1c70:	8f 5f       	subi	r24, 0xFF	; 255
    1c72:	8f 70       	andi	r24, 0x0F	; 15
    1c74:	90 89       	ldd	r25, Z+16	; 0x10
    1c76:	89 17       	cp	r24, r25
    1c78:	71 f0       	breq	.+28     	; 0x1c96 <__vector_36+0x5c>
    1c7a:	df 01       	movw	r26, r30
    1c7c:	e7 85       	ldd	r30, Z+15	; 0x0f
    1c7e:	f0 e0       	ldi	r31, 0x00	; 0
    1c80:	ec 56       	subi	r30, 0x6C	; 108
    1c82:	fa 4f       	sbci	r31, 0xFA	; 250
    1c84:	23 8b       	std	Z+19, r18	; 0x13
    1c86:	1f 96       	adiw	r26, 0x0f	; 15
    1c88:	8c 93       	st	X, r24
    1c8a:	05 c0       	rjmp	.+10     	; 0x1c96 <__vector_36+0x5c>
    1c8c:	e0 91 a0 05 	lds	r30, 0x05A0	; 0x8005a0 <Serial1+0xc>
    1c90:	f0 91 a1 05 	lds	r31, 0x05A1	; 0x8005a1 <Serial1+0xd>
    1c94:	80 81       	ld	r24, Z
    1c96:	ff 91       	pop	r31
    1c98:	ef 91       	pop	r30
    1c9a:	bf 91       	pop	r27
    1c9c:	af 91       	pop	r26
    1c9e:	9f 91       	pop	r25
    1ca0:	8f 91       	pop	r24
    1ca2:	2f 91       	pop	r18
    1ca4:	0f 90       	pop	r0
    1ca6:	0b be       	out	0x3b, r0	; 59
    1ca8:	0f 90       	pop	r0
    1caa:	0f be       	out	0x3f, r0	; 63
    1cac:	0f 90       	pop	r0
    1cae:	1f 90       	pop	r1
    1cb0:	18 95       	reti

00001cb2 <__vector_37>:
    1cb2:	1f 92       	push	r1
    1cb4:	0f 92       	push	r0
    1cb6:	0f b6       	in	r0, 0x3f	; 63
    1cb8:	0f 92       	push	r0
    1cba:	11 24       	eor	r1, r1
    1cbc:	0b b6       	in	r0, 0x3b	; 59
    1cbe:	0f 92       	push	r0
    1cc0:	2f 93       	push	r18
    1cc2:	3f 93       	push	r19
    1cc4:	4f 93       	push	r20
    1cc6:	5f 93       	push	r21
    1cc8:	6f 93       	push	r22
    1cca:	7f 93       	push	r23
    1ccc:	8f 93       	push	r24
    1cce:	9f 93       	push	r25
    1cd0:	af 93       	push	r26
    1cd2:	bf 93       	push	r27
    1cd4:	ef 93       	push	r30
    1cd6:	ff 93       	push	r31
    1cd8:	84 e9       	ldi	r24, 0x94	; 148
    1cda:	95 e0       	ldi	r25, 0x05	; 5
    1cdc:	1c de       	rcall	.-968    	; 0x1916 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1cde:	ff 91       	pop	r31
    1ce0:	ef 91       	pop	r30
    1ce2:	bf 91       	pop	r27
    1ce4:	af 91       	pop	r26
    1ce6:	9f 91       	pop	r25
    1ce8:	8f 91       	pop	r24
    1cea:	7f 91       	pop	r23
    1cec:	6f 91       	pop	r22
    1cee:	5f 91       	pop	r21
    1cf0:	4f 91       	pop	r20
    1cf2:	3f 91       	pop	r19
    1cf4:	2f 91       	pop	r18
    1cf6:	0f 90       	pop	r0
    1cf8:	0b be       	out	0x3b, r0	; 59
    1cfa:	0f 90       	pop	r0
    1cfc:	0f be       	out	0x3f, r0	; 63
    1cfe:	0f 90       	pop	r0
    1d00:	1f 90       	pop	r1
    1d02:	18 95       	reti

00001d04 <_GLOBAL__sub_I___vector_36>:
    1d04:	e4 e9       	ldi	r30, 0x94	; 148
    1d06:	f5 e0       	ldi	r31, 0x05	; 5
    1d08:	8e ea       	ldi	r24, 0xAE	; 174
    1d0a:	92 e0       	ldi	r25, 0x02	; 2
    1d0c:	91 83       	std	Z+1, r25	; 0x01
    1d0e:	80 83       	st	Z, r24
    1d10:	8d ec       	ldi	r24, 0xCD	; 205
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	93 83       	std	Z+3, r25	; 0x03
    1d16:	82 83       	std	Z+2, r24	; 0x02
    1d18:	8c ec       	ldi	r24, 0xCC	; 204
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	95 83       	std	Z+5, r25	; 0x05
    1d1e:	84 83       	std	Z+4, r24	; 0x04
    1d20:	88 ec       	ldi	r24, 0xC8	; 200
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	97 83       	std	Z+7, r25	; 0x07
    1d26:	86 83       	std	Z+6, r24	; 0x06
    1d28:	89 ec       	ldi	r24, 0xC9	; 201
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	91 87       	std	Z+9, r25	; 0x09
    1d2e:	80 87       	std	Z+8, r24	; 0x08
    1d30:	8a ec       	ldi	r24, 0xCA	; 202
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	93 87       	std	Z+11, r25	; 0x0b
    1d36:	82 87       	std	Z+10, r24	; 0x0a
    1d38:	8e ec       	ldi	r24, 0xCE	; 206
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	95 87       	std	Z+13, r25	; 0x0d
    1d3e:	84 87       	std	Z+12, r24	; 0x0c
    1d40:	17 86       	std	Z+15, r1	; 0x0f
    1d42:	10 8a       	std	Z+16, r1	; 0x10
    1d44:	11 8a       	std	Z+17, r1	; 0x11
    1d46:	12 8a       	std	Z+18, r1	; 0x12
    1d48:	08 95       	ret

00001d4a <__vector_51>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial2_available() {
  return Serial2.available();
}
    1d4a:	1f 92       	push	r1
    1d4c:	0f 92       	push	r0
    1d4e:	0f b6       	in	r0, 0x3f	; 63
    1d50:	0f 92       	push	r0
    1d52:	11 24       	eor	r1, r1
    1d54:	0b b6       	in	r0, 0x3b	; 59
    1d56:	0f 92       	push	r0
    1d58:	2f 93       	push	r18
    1d5a:	8f 93       	push	r24
    1d5c:	9f 93       	push	r25
    1d5e:	af 93       	push	r26
    1d60:	bf 93       	push	r27
    1d62:	ef 93       	push	r30
    1d64:	ff 93       	push	r31
    1d66:	e0 91 cd 05 	lds	r30, 0x05CD	; 0x8005cd <Serial2+0x6>
    1d6a:	f0 91 ce 05 	lds	r31, 0x05CE	; 0x8005ce <Serial2+0x7>
    1d6e:	80 81       	ld	r24, Z
    1d70:	82 fd       	sbrc	r24, 2
    1d72:	14 c0       	rjmp	.+40     	; 0x1d9c <__vector_51+0x52>
    1d74:	e7 ec       	ldi	r30, 0xC7	; 199
    1d76:	f5 e0       	ldi	r31, 0x05	; 5
    1d78:	a4 85       	ldd	r26, Z+12	; 0x0c
    1d7a:	b5 85       	ldd	r27, Z+13	; 0x0d
    1d7c:	2c 91       	ld	r18, X
    1d7e:	87 85       	ldd	r24, Z+15	; 0x0f
    1d80:	8f 5f       	subi	r24, 0xFF	; 255
    1d82:	8f 70       	andi	r24, 0x0F	; 15
    1d84:	90 89       	ldd	r25, Z+16	; 0x10
    1d86:	89 17       	cp	r24, r25
    1d88:	71 f0       	breq	.+28     	; 0x1da6 <__vector_51+0x5c>
    1d8a:	df 01       	movw	r26, r30
    1d8c:	e7 85       	ldd	r30, Z+15	; 0x0f
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	e9 53       	subi	r30, 0x39	; 57
    1d92:	fa 4f       	sbci	r31, 0xFA	; 250
    1d94:	23 8b       	std	Z+19, r18	; 0x13
    1d96:	1f 96       	adiw	r26, 0x0f	; 15
    1d98:	8c 93       	st	X, r24
    1d9a:	05 c0       	rjmp	.+10     	; 0x1da6 <__vector_51+0x5c>
    1d9c:	e0 91 d3 05 	lds	r30, 0x05D3	; 0x8005d3 <Serial2+0xc>
    1da0:	f0 91 d4 05 	lds	r31, 0x05D4	; 0x8005d4 <Serial2+0xd>
    1da4:	80 81       	ld	r24, Z
    1da6:	ff 91       	pop	r31
    1da8:	ef 91       	pop	r30
    1daa:	bf 91       	pop	r27
    1dac:	af 91       	pop	r26
    1dae:	9f 91       	pop	r25
    1db0:	8f 91       	pop	r24
    1db2:	2f 91       	pop	r18
    1db4:	0f 90       	pop	r0
    1db6:	0b be       	out	0x3b, r0	; 59
    1db8:	0f 90       	pop	r0
    1dba:	0f be       	out	0x3f, r0	; 63
    1dbc:	0f 90       	pop	r0
    1dbe:	1f 90       	pop	r1
    1dc0:	18 95       	reti

00001dc2 <__vector_52>:
    1dc2:	1f 92       	push	r1
    1dc4:	0f 92       	push	r0
    1dc6:	0f b6       	in	r0, 0x3f	; 63
    1dc8:	0f 92       	push	r0
    1dca:	11 24       	eor	r1, r1
    1dcc:	0b b6       	in	r0, 0x3b	; 59
    1dce:	0f 92       	push	r0
    1dd0:	2f 93       	push	r18
    1dd2:	3f 93       	push	r19
    1dd4:	4f 93       	push	r20
    1dd6:	5f 93       	push	r21
    1dd8:	6f 93       	push	r22
    1dda:	7f 93       	push	r23
    1ddc:	8f 93       	push	r24
    1dde:	9f 93       	push	r25
    1de0:	af 93       	push	r26
    1de2:	bf 93       	push	r27
    1de4:	ef 93       	push	r30
    1de6:	ff 93       	push	r31
    1de8:	87 ec       	ldi	r24, 0xC7	; 199
    1dea:	95 e0       	ldi	r25, 0x05	; 5
    1dec:	94 dd       	rcall	.-1240   	; 0x1916 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1dee:	ff 91       	pop	r31
    1df0:	ef 91       	pop	r30
    1df2:	bf 91       	pop	r27
    1df4:	af 91       	pop	r26
    1df6:	9f 91       	pop	r25
    1df8:	8f 91       	pop	r24
    1dfa:	7f 91       	pop	r23
    1dfc:	6f 91       	pop	r22
    1dfe:	5f 91       	pop	r21
    1e00:	4f 91       	pop	r20
    1e02:	3f 91       	pop	r19
    1e04:	2f 91       	pop	r18
    1e06:	0f 90       	pop	r0
    1e08:	0b be       	out	0x3b, r0	; 59
    1e0a:	0f 90       	pop	r0
    1e0c:	0f be       	out	0x3f, r0	; 63
    1e0e:	0f 90       	pop	r0
    1e10:	1f 90       	pop	r1
    1e12:	18 95       	reti

00001e14 <_GLOBAL__sub_I___vector_51>:
    1e14:	e7 ec       	ldi	r30, 0xC7	; 199
    1e16:	f5 e0       	ldi	r31, 0x05	; 5
    1e18:	8e ea       	ldi	r24, 0xAE	; 174
    1e1a:	92 e0       	ldi	r25, 0x02	; 2
    1e1c:	91 83       	std	Z+1, r25	; 0x01
    1e1e:	80 83       	st	Z, r24
    1e20:	85 ed       	ldi	r24, 0xD5	; 213
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	93 83       	std	Z+3, r25	; 0x03
    1e26:	82 83       	std	Z+2, r24	; 0x02
    1e28:	84 ed       	ldi	r24, 0xD4	; 212
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	95 83       	std	Z+5, r25	; 0x05
    1e2e:	84 83       	std	Z+4, r24	; 0x04
    1e30:	80 ed       	ldi	r24, 0xD0	; 208
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	97 83       	std	Z+7, r25	; 0x07
    1e36:	86 83       	std	Z+6, r24	; 0x06
    1e38:	81 ed       	ldi	r24, 0xD1	; 209
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	91 87       	std	Z+9, r25	; 0x09
    1e3e:	80 87       	std	Z+8, r24	; 0x08
    1e40:	82 ed       	ldi	r24, 0xD2	; 210
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	93 87       	std	Z+11, r25	; 0x0b
    1e46:	82 87       	std	Z+10, r24	; 0x0a
    1e48:	86 ed       	ldi	r24, 0xD6	; 214
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	95 87       	std	Z+13, r25	; 0x0d
    1e4e:	84 87       	std	Z+12, r24	; 0x0c
    1e50:	17 86       	std	Z+15, r1	; 0x0f
    1e52:	10 8a       	std	Z+16, r1	; 0x10
    1e54:	11 8a       	std	Z+17, r1	; 0x11
    1e56:	12 8a       	std	Z+18, r1	; 0x12
    1e58:	08 95       	ret

00001e5a <__vector_54>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial3_available() {
  return Serial3.available();
}
    1e5a:	1f 92       	push	r1
    1e5c:	0f 92       	push	r0
    1e5e:	0f b6       	in	r0, 0x3f	; 63
    1e60:	0f 92       	push	r0
    1e62:	11 24       	eor	r1, r1
    1e64:	0b b6       	in	r0, 0x3b	; 59
    1e66:	0f 92       	push	r0
    1e68:	2f 93       	push	r18
    1e6a:	8f 93       	push	r24
    1e6c:	9f 93       	push	r25
    1e6e:	af 93       	push	r26
    1e70:	bf 93       	push	r27
    1e72:	ef 93       	push	r30
    1e74:	ff 93       	push	r31
    1e76:	e0 91 00 06 	lds	r30, 0x0600	; 0x800600 <Serial3+0x6>
    1e7a:	f0 91 01 06 	lds	r31, 0x0601	; 0x800601 <Serial3+0x7>
    1e7e:	80 81       	ld	r24, Z
    1e80:	82 fd       	sbrc	r24, 2
    1e82:	14 c0       	rjmp	.+40     	; 0x1eac <__vector_54+0x52>
    1e84:	ea ef       	ldi	r30, 0xFA	; 250
    1e86:	f5 e0       	ldi	r31, 0x05	; 5
    1e88:	a4 85       	ldd	r26, Z+12	; 0x0c
    1e8a:	b5 85       	ldd	r27, Z+13	; 0x0d
    1e8c:	2c 91       	ld	r18, X
    1e8e:	87 85       	ldd	r24, Z+15	; 0x0f
    1e90:	8f 5f       	subi	r24, 0xFF	; 255
    1e92:	8f 70       	andi	r24, 0x0F	; 15
    1e94:	90 89       	ldd	r25, Z+16	; 0x10
    1e96:	89 17       	cp	r24, r25
    1e98:	71 f0       	breq	.+28     	; 0x1eb6 <__vector_54+0x5c>
    1e9a:	df 01       	movw	r26, r30
    1e9c:	e7 85       	ldd	r30, Z+15	; 0x0f
    1e9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ea0:	e6 50       	subi	r30, 0x06	; 6
    1ea2:	fa 4f       	sbci	r31, 0xFA	; 250
    1ea4:	23 8b       	std	Z+19, r18	; 0x13
    1ea6:	1f 96       	adiw	r26, 0x0f	; 15
    1ea8:	8c 93       	st	X, r24
    1eaa:	05 c0       	rjmp	.+10     	; 0x1eb6 <__vector_54+0x5c>
    1eac:	e0 91 06 06 	lds	r30, 0x0606	; 0x800606 <Serial3+0xc>
    1eb0:	f0 91 07 06 	lds	r31, 0x0607	; 0x800607 <Serial3+0xd>
    1eb4:	80 81       	ld	r24, Z
    1eb6:	ff 91       	pop	r31
    1eb8:	ef 91       	pop	r30
    1eba:	bf 91       	pop	r27
    1ebc:	af 91       	pop	r26
    1ebe:	9f 91       	pop	r25
    1ec0:	8f 91       	pop	r24
    1ec2:	2f 91       	pop	r18
    1ec4:	0f 90       	pop	r0
    1ec6:	0b be       	out	0x3b, r0	; 59
    1ec8:	0f 90       	pop	r0
    1eca:	0f be       	out	0x3f, r0	; 63
    1ecc:	0f 90       	pop	r0
    1ece:	1f 90       	pop	r1
    1ed0:	18 95       	reti

00001ed2 <__vector_55>:
    1ed2:	1f 92       	push	r1
    1ed4:	0f 92       	push	r0
    1ed6:	0f b6       	in	r0, 0x3f	; 63
    1ed8:	0f 92       	push	r0
    1eda:	11 24       	eor	r1, r1
    1edc:	0b b6       	in	r0, 0x3b	; 59
    1ede:	0f 92       	push	r0
    1ee0:	2f 93       	push	r18
    1ee2:	3f 93       	push	r19
    1ee4:	4f 93       	push	r20
    1ee6:	5f 93       	push	r21
    1ee8:	6f 93       	push	r22
    1eea:	7f 93       	push	r23
    1eec:	8f 93       	push	r24
    1eee:	9f 93       	push	r25
    1ef0:	af 93       	push	r26
    1ef2:	bf 93       	push	r27
    1ef4:	ef 93       	push	r30
    1ef6:	ff 93       	push	r31
    1ef8:	8a ef       	ldi	r24, 0xFA	; 250
    1efa:	95 e0       	ldi	r25, 0x05	; 5
    1efc:	0c dd       	rcall	.-1512   	; 0x1916 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1efe:	ff 91       	pop	r31
    1f00:	ef 91       	pop	r30
    1f02:	bf 91       	pop	r27
    1f04:	af 91       	pop	r26
    1f06:	9f 91       	pop	r25
    1f08:	8f 91       	pop	r24
    1f0a:	7f 91       	pop	r23
    1f0c:	6f 91       	pop	r22
    1f0e:	5f 91       	pop	r21
    1f10:	4f 91       	pop	r20
    1f12:	3f 91       	pop	r19
    1f14:	2f 91       	pop	r18
    1f16:	0f 90       	pop	r0
    1f18:	0b be       	out	0x3b, r0	; 59
    1f1a:	0f 90       	pop	r0
    1f1c:	0f be       	out	0x3f, r0	; 63
    1f1e:	0f 90       	pop	r0
    1f20:	1f 90       	pop	r1
    1f22:	18 95       	reti

00001f24 <_GLOBAL__sub_I___vector_54>:
    1f24:	ea ef       	ldi	r30, 0xFA	; 250
    1f26:	f5 e0       	ldi	r31, 0x05	; 5
    1f28:	8e ea       	ldi	r24, 0xAE	; 174
    1f2a:	92 e0       	ldi	r25, 0x02	; 2
    1f2c:	91 83       	std	Z+1, r25	; 0x01
    1f2e:	80 83       	st	Z, r24
    1f30:	85 e3       	ldi	r24, 0x35	; 53
    1f32:	91 e0       	ldi	r25, 0x01	; 1
    1f34:	93 83       	std	Z+3, r25	; 0x03
    1f36:	82 83       	std	Z+2, r24	; 0x02
    1f38:	84 e3       	ldi	r24, 0x34	; 52
    1f3a:	91 e0       	ldi	r25, 0x01	; 1
    1f3c:	95 83       	std	Z+5, r25	; 0x05
    1f3e:	84 83       	std	Z+4, r24	; 0x04
    1f40:	80 e3       	ldi	r24, 0x30	; 48
    1f42:	91 e0       	ldi	r25, 0x01	; 1
    1f44:	97 83       	std	Z+7, r25	; 0x07
    1f46:	86 83       	std	Z+6, r24	; 0x06
    1f48:	81 e3       	ldi	r24, 0x31	; 49
    1f4a:	91 e0       	ldi	r25, 0x01	; 1
    1f4c:	91 87       	std	Z+9, r25	; 0x09
    1f4e:	80 87       	std	Z+8, r24	; 0x08
    1f50:	82 e3       	ldi	r24, 0x32	; 50
    1f52:	91 e0       	ldi	r25, 0x01	; 1
    1f54:	93 87       	std	Z+11, r25	; 0x0b
    1f56:	82 87       	std	Z+10, r24	; 0x0a
    1f58:	86 e3       	ldi	r24, 0x36	; 54
    1f5a:	91 e0       	ldi	r25, 0x01	; 1
    1f5c:	95 87       	std	Z+13, r25	; 0x0d
    1f5e:	84 87       	std	Z+12, r24	; 0x0c
    1f60:	17 86       	std	Z+15, r1	; 0x0f
    1f62:	10 8a       	std	Z+16, r1	; 0x10
    1f64:	11 8a       	std	Z+17, r1	; 0x11
    1f66:	12 8a       	std	Z+18, r1	; 0x12
    1f68:	08 95       	ret

00001f6a <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
	user_onRequest = function;
    1f6a:	80 91 c5 06 	lds	r24, 0x06C5	; 0x8006c5 <_ZN7TwoWire14rxBufferLengthE>
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	20 91 c6 06 	lds	r18, 0x06C6	; 0x8006c6 <_ZN7TwoWire13rxBufferIndexE>
    1f74:	82 1b       	sub	r24, r18
    1f76:	91 09       	sbc	r25, r1
    1f78:	08 95       	ret

00001f7a <_ZN7TwoWire4readEv>:
    1f7a:	90 91 c6 06 	lds	r25, 0x06C6	; 0x8006c6 <_ZN7TwoWire13rxBufferIndexE>
    1f7e:	80 91 c5 06 	lds	r24, 0x06C5	; 0x8006c5 <_ZN7TwoWire14rxBufferLengthE>
    1f82:	98 17       	cp	r25, r24
    1f84:	50 f4       	brcc	.+20     	; 0x1f9a <_ZN7TwoWire4readEv+0x20>
    1f86:	e9 2f       	mov	r30, r25
    1f88:	f0 e0       	ldi	r31, 0x00	; 0
    1f8a:	e9 53       	subi	r30, 0x39	; 57
    1f8c:	f9 4f       	sbci	r31, 0xF9	; 249
    1f8e:	20 81       	ld	r18, Z
    1f90:	30 e0       	ldi	r19, 0x00	; 0
    1f92:	9f 5f       	subi	r25, 0xFF	; 255
    1f94:	90 93 c6 06 	sts	0x06C6, r25	; 0x8006c6 <_ZN7TwoWire13rxBufferIndexE>
    1f98:	02 c0       	rjmp	.+4      	; 0x1f9e <_ZN7TwoWire4readEv+0x24>
    1f9a:	2f ef       	ldi	r18, 0xFF	; 255
    1f9c:	3f ef       	ldi	r19, 0xFF	; 255
    1f9e:	c9 01       	movw	r24, r18
    1fa0:	08 95       	ret

00001fa2 <_ZN7TwoWire4peekEv>:
    1fa2:	e0 91 c6 06 	lds	r30, 0x06C6	; 0x8006c6 <_ZN7TwoWire13rxBufferIndexE>
    1fa6:	80 91 c5 06 	lds	r24, 0x06C5	; 0x8006c5 <_ZN7TwoWire14rxBufferLengthE>
    1faa:	e8 17       	cp	r30, r24
    1fac:	30 f4       	brcc	.+12     	; 0x1fba <_ZN7TwoWire4peekEv+0x18>
    1fae:	f0 e0       	ldi	r31, 0x00	; 0
    1fb0:	e9 53       	subi	r30, 0x39	; 57
    1fb2:	f9 4f       	sbci	r31, 0xF9	; 249
    1fb4:	80 81       	ld	r24, Z
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	08 95       	ret
    1fba:	8f ef       	ldi	r24, 0xFF	; 255
    1fbc:	9f ef       	ldi	r25, 0xFF	; 255
    1fbe:	08 95       	ret

00001fc0 <_ZN7TwoWire5flushEv>:
    1fc0:	08 95       	ret

00001fc2 <_ZN7TwoWire16onReceiveServiceEPhi>:
    1fc2:	cf 93       	push	r28
    1fc4:	df 93       	push	r29
    1fc6:	ec 01       	movw	r28, r24
    1fc8:	e0 91 9d 06 	lds	r30, 0x069D	; 0x80069d <_ZN7TwoWire14user_onReceiveE>
    1fcc:	f0 91 9e 06 	lds	r31, 0x069E	; 0x80069e <_ZN7TwoWire14user_onReceiveE+0x1>
    1fd0:	30 97       	sbiw	r30, 0x00	; 0
    1fd2:	01 f1       	breq	.+64     	; 0x2014 <_ZN7TwoWire16onReceiveServiceEPhi+0x52>
    1fd4:	90 91 c6 06 	lds	r25, 0x06C6	; 0x8006c6 <_ZN7TwoWire13rxBufferIndexE>
    1fd8:	80 91 c5 06 	lds	r24, 0x06C5	; 0x8006c5 <_ZN7TwoWire14rxBufferLengthE>
    1fdc:	98 17       	cp	r25, r24
    1fde:	d0 f0       	brcs	.+52     	; 0x2014 <_ZN7TwoWire16onReceiveServiceEPhi+0x52>
    1fe0:	16 16       	cp	r1, r22
    1fe2:	17 06       	cpc	r1, r23
    1fe4:	8c f4       	brge	.+34     	; 0x2008 <_ZN7TwoWire16onReceiveServiceEPhi+0x46>
    1fe6:	20 e0       	ldi	r18, 0x00	; 0
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	de 01       	movw	r26, r28
    1fee:	a9 0f       	add	r26, r25
    1ff0:	b1 1d       	adc	r27, r1
    1ff2:	4c 91       	ld	r20, X
    1ff4:	d9 01       	movw	r26, r18
    1ff6:	a9 53       	subi	r26, 0x39	; 57
    1ff8:	b9 4f       	sbci	r27, 0xF9	; 249
    1ffa:	4c 93       	st	X, r20
    1ffc:	9f 5f       	subi	r25, 0xFF	; 255
    1ffe:	29 2f       	mov	r18, r25
    2000:	30 e0       	ldi	r19, 0x00	; 0
    2002:	26 17       	cp	r18, r22
    2004:	37 07       	cpc	r19, r23
    2006:	94 f3       	brlt	.-28     	; 0x1fec <_ZN7TwoWire16onReceiveServiceEPhi+0x2a>
    2008:	cb 01       	movw	r24, r22
    200a:	10 92 c6 06 	sts	0x06C6, r1	; 0x8006c6 <_ZN7TwoWire13rxBufferIndexE>
    200e:	60 93 c5 06 	sts	0x06C5, r22	; 0x8006c5 <_ZN7TwoWire14rxBufferLengthE>
    2012:	19 95       	eicall
    2014:	df 91       	pop	r29
    2016:	cf 91       	pop	r28
    2018:	08 95       	ret

0000201a <_ZN7TwoWire16onRequestServiceEv>:
    201a:	e0 91 9f 06 	lds	r30, 0x069F	; 0x80069f <_ZN7TwoWire14user_onRequestE>
    201e:	f0 91 a0 06 	lds	r31, 0x06A0	; 0x8006a0 <_ZN7TwoWire14user_onRequestE+0x1>
    2022:	30 97       	sbiw	r30, 0x00	; 0
    2024:	29 f0       	breq	.+10     	; 0x2030 <_ZN7TwoWire16onRequestServiceEv+0x16>
    2026:	10 92 a3 06 	sts	0x06A3, r1	; 0x8006a3 <_ZN7TwoWire13txBufferIndexE>
    202a:	10 92 a2 06 	sts	0x06A2, r1	; 0x8006a2 <_ZN7TwoWire14txBufferLengthE>
    202e:	19 95       	eicall
    2030:	08 95       	ret

00002032 <_ZN7TwoWire5beginEv>:
    2032:	10 92 c6 06 	sts	0x06C6, r1	; 0x8006c6 <_ZN7TwoWire13rxBufferIndexE>
    2036:	10 92 c5 06 	sts	0x06C5, r1	; 0x8006c5 <_ZN7TwoWire14rxBufferLengthE>
    203a:	10 92 a3 06 	sts	0x06A3, r1	; 0x8006a3 <_ZN7TwoWire13txBufferIndexE>
    203e:	10 92 a2 06 	sts	0x06A2, r1	; 0x8006a2 <_ZN7TwoWire14txBufferLengthE>
    2042:	10 92 9c 06 	sts	0x069C, r1	; 0x80069c <_ZL9twi_state>
    2046:	81 e0       	ldi	r24, 0x01	; 1
    2048:	80 93 9a 06 	sts	0x069A, r24	; 0x80069a <_ZL12twi_sendStop>
    204c:	10 92 99 06 	sts	0x0699, r1	; 0x800699 <_ZL14twi_inRepStart>
    2050:	8b b1       	in	r24, 0x0b	; 11
    2052:	83 60       	ori	r24, 0x03	; 3
    2054:	8b b9       	out	0x0b, r24	; 11
    2056:	e9 eb       	ldi	r30, 0xB9	; 185
    2058:	f0 e0       	ldi	r31, 0x00	; 0
    205a:	80 81       	ld	r24, Z
    205c:	8e 7f       	andi	r24, 0xFE	; 254
    205e:	80 83       	st	Z, r24
    2060:	80 81       	ld	r24, Z
    2062:	8d 7f       	andi	r24, 0xFD	; 253
    2064:	80 83       	st	Z, r24
    2066:	88 e4       	ldi	r24, 0x48	; 72
    2068:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    206c:	85 e4       	ldi	r24, 0x45	; 69
    206e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2072:	8d e0       	ldi	r24, 0x0D	; 13
    2074:	90 e1       	ldi	r25, 0x10	; 16
    2076:	90 93 98 06 	sts	0x0698, r25	; 0x800698 <_ZL19twi_onSlaveTransmit+0x1>
    207a:	80 93 97 06 	sts	0x0697, r24	; 0x800697 <_ZL19twi_onSlaveTransmit>
    207e:	81 ee       	ldi	r24, 0xE1	; 225
    2080:	9f e0       	ldi	r25, 0x0F	; 15
    2082:	90 93 96 06 	sts	0x0696, r25	; 0x800696 <_ZL18twi_onSlaveReceive+0x1>
    2086:	80 93 95 06 	sts	0x0695, r24	; 0x800695 <_ZL18twi_onSlaveReceive>
    208a:	08 95       	ret

0000208c <_Z4stopv>:
    208c:	85 ed       	ldi	r24, 0xD5	; 213
    208e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2092:	ec eb       	ldi	r30, 0xBC	; 188
    2094:	f0 e0       	ldi	r31, 0x00	; 0
    2096:	80 81       	ld	r24, Z
    2098:	84 fd       	sbrc	r24, 4
    209a:	fd cf       	rjmp	.-6      	; 0x2096 <_Z4stopv+0xa>
    209c:	10 92 9c 06 	sts	0x069C, r1	; 0x80069c <_ZL9twi_state>
    20a0:	08 95       	ret

000020a2 <_Z10releaseBusv>:
    20a2:	85 ec       	ldi	r24, 0xC5	; 197
    20a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    20a8:	10 92 9c 06 	sts	0x069C, r1	; 0x80069c <_ZL9twi_state>
    20ac:	08 95       	ret

000020ae <_Z8readFromhPhhh>:
    20ae:	41 32       	cpi	r20, 0x21	; 33
    20b0:	08 f0       	brcs	.+2      	; 0x20b4 <_Z8readFromhPhhh+0x6>
    20b2:	4c c0       	rjmp	.+152    	; 0x214c <_Z8readFromhPhhh+0x9e>
    20b4:	90 91 9c 06 	lds	r25, 0x069C	; 0x80069c <_ZL9twi_state>
    20b8:	91 11       	cpse	r25, r1
    20ba:	fc cf       	rjmp	.-8      	; 0x20b4 <_Z8readFromhPhhh+0x6>
    20bc:	31 e0       	ldi	r19, 0x01	; 1
    20be:	30 93 9c 06 	sts	0x069C, r19	; 0x80069c <_ZL9twi_state>
    20c2:	20 93 9a 06 	sts	0x069A, r18	; 0x80069a <_ZL12twi_sendStop>
    20c6:	2f ef       	ldi	r18, 0xFF	; 255
    20c8:	20 93 2f 06 	sts	0x062F, r18	; 0x80062f <_ZL9twi_error>
    20cc:	10 92 74 06 	sts	0x0674, r1	; 0x800674 <_ZL21twi_masterBufferIndex>
    20d0:	24 0f       	add	r18, r20
    20d2:	20 93 73 06 	sts	0x0673, r18	; 0x800673 <_ZL22twi_masterBufferLength>
    20d6:	30 93 9b 06 	sts	0x069B, r19	; 0x80069b <_ZL9twi_slarw>
    20da:	20 91 9b 06 	lds	r18, 0x069B	; 0x80069b <_ZL9twi_slarw>
    20de:	88 0f       	add	r24, r24
    20e0:	82 2b       	or	r24, r18
    20e2:	80 93 9b 06 	sts	0x069B, r24	; 0x80069b <_ZL9twi_slarw>
    20e6:	80 91 99 06 	lds	r24, 0x0699	; 0x800699 <_ZL14twi_inRepStart>
    20ea:	81 30       	cpi	r24, 0x01	; 1
    20ec:	81 f4       	brne	.+32     	; 0x210e <_Z8readFromhPhhh+0x60>
    20ee:	10 92 99 06 	sts	0x0699, r1	; 0x800699 <_ZL14twi_inRepStart>
    20f2:	ab eb       	ldi	r26, 0xBB	; 187
    20f4:	b0 e0       	ldi	r27, 0x00	; 0
    20f6:	ec eb       	ldi	r30, 0xBC	; 188
    20f8:	f0 e0       	ldi	r31, 0x00	; 0
    20fa:	80 91 9b 06 	lds	r24, 0x069B	; 0x80069b <_ZL9twi_slarw>
    20fe:	8c 93       	st	X, r24
    2100:	80 81       	ld	r24, Z
    2102:	83 fd       	sbrc	r24, 3
    2104:	fa cf       	rjmp	.-12     	; 0x20fa <_Z8readFromhPhhh+0x4c>
    2106:	85 ec       	ldi	r24, 0xC5	; 197
    2108:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    210c:	03 c0       	rjmp	.+6      	; 0x2114 <_Z8readFromhPhhh+0x66>
    210e:	85 ee       	ldi	r24, 0xE5	; 229
    2110:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2114:	80 91 9c 06 	lds	r24, 0x069C	; 0x80069c <_ZL9twi_state>
    2118:	81 30       	cpi	r24, 0x01	; 1
    211a:	e1 f3       	breq	.-8      	; 0x2114 <_Z8readFromhPhhh+0x66>
    211c:	80 91 74 06 	lds	r24, 0x0674	; 0x800674 <_ZL21twi_masterBufferIndex>
    2120:	84 17       	cp	r24, r20
    2122:	10 f4       	brcc	.+4      	; 0x2128 <_Z8readFromhPhhh+0x7a>
    2124:	40 91 74 06 	lds	r20, 0x0674	; 0x800674 <_ZL21twi_masterBufferIndex>
    2128:	44 23       	and	r20, r20
    212a:	89 f0       	breq	.+34     	; 0x214e <_Z8readFromhPhhh+0xa0>
    212c:	e5 e7       	ldi	r30, 0x75	; 117
    212e:	f6 e0       	ldi	r31, 0x06	; 6
    2130:	a6 2f       	mov	r26, r22
    2132:	b7 2f       	mov	r27, r23
    2134:	2f ef       	ldi	r18, 0xFF	; 255
    2136:	24 0f       	add	r18, r20
    2138:	30 e0       	ldi	r19, 0x00	; 0
    213a:	2a 58       	subi	r18, 0x8A	; 138
    213c:	39 4f       	sbci	r19, 0xF9	; 249
    213e:	81 91       	ld	r24, Z+
    2140:	8d 93       	st	X+, r24
    2142:	e2 17       	cp	r30, r18
    2144:	f3 07       	cpc	r31, r19
    2146:	d9 f7       	brne	.-10     	; 0x213e <_Z8readFromhPhhh+0x90>
    2148:	94 2f       	mov	r25, r20
    214a:	01 c0       	rjmp	.+2      	; 0x214e <_Z8readFromhPhhh+0xa0>
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	89 2f       	mov	r24, r25
    2150:	08 95       	ret

00002152 <_ZN7TwoWire17beginTransmissionEh>:
    2152:	81 e0       	ldi	r24, 0x01	; 1
    2154:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <_ZN7TwoWire12transmittingE>
    2158:	60 93 c4 06 	sts	0x06C4, r22	; 0x8006c4 <_ZN7TwoWire9txAddressE>
    215c:	10 92 a3 06 	sts	0x06A3, r1	; 0x8006a3 <_ZN7TwoWire13txBufferIndexE>
    2160:	10 92 a2 06 	sts	0x06A2, r1	; 0x8006a2 <_ZN7TwoWire14txBufferLengthE>
    2164:	08 95       	ret

00002166 <_Z7writeTohPhhhh>:
    2166:	0f 93       	push	r16
    2168:	41 32       	cpi	r20, 0x21	; 33
    216a:	08 f0       	brcs	.+2      	; 0x216e <_Z7writeTohPhhhh+0x8>
    216c:	50 c0       	rjmp	.+160    	; 0x220e <__stack+0xf>
    216e:	30 91 9c 06 	lds	r19, 0x069C	; 0x80069c <_ZL9twi_state>
    2172:	31 11       	cpse	r19, r1
    2174:	fc cf       	rjmp	.-8      	; 0x216e <_Z7writeTohPhhhh+0x8>
    2176:	92 e0       	ldi	r25, 0x02	; 2
    2178:	90 93 9c 06 	sts	0x069C, r25	; 0x80069c <_ZL9twi_state>
    217c:	00 93 9a 06 	sts	0x069A, r16	; 0x80069a <_ZL12twi_sendStop>
    2180:	9f ef       	ldi	r25, 0xFF	; 255
    2182:	90 93 2f 06 	sts	0x062F, r25	; 0x80062f <_ZL9twi_error>
    2186:	10 92 74 06 	sts	0x0674, r1	; 0x800674 <_ZL21twi_masterBufferIndex>
    218a:	40 93 73 06 	sts	0x0673, r20	; 0x800673 <_ZL22twi_masterBufferLength>
    218e:	44 23       	and	r20, r20
    2190:	71 f0       	breq	.+28     	; 0x21ae <_Z7writeTohPhhhh+0x48>
    2192:	fb 01       	movw	r30, r22
    2194:	a5 e7       	ldi	r26, 0x75	; 117
    2196:	b6 e0       	ldi	r27, 0x06	; 6
    2198:	41 50       	subi	r20, 0x01	; 1
    219a:	50 e0       	ldi	r21, 0x00	; 0
    219c:	4f 5f       	subi	r20, 0xFF	; 255
    219e:	5f 4f       	sbci	r21, 0xFF	; 255
    21a0:	64 0f       	add	r22, r20
    21a2:	75 1f       	adc	r23, r21
    21a4:	91 91       	ld	r25, Z+
    21a6:	9d 93       	st	X+, r25
    21a8:	e6 17       	cp	r30, r22
    21aa:	f7 07       	cpc	r31, r23
    21ac:	d9 f7       	brne	.-10     	; 0x21a4 <_Z7writeTohPhhhh+0x3e>
    21ae:	10 92 9b 06 	sts	0x069B, r1	; 0x80069b <_ZL9twi_slarw>
    21b2:	90 91 9b 06 	lds	r25, 0x069B	; 0x80069b <_ZL9twi_slarw>
    21b6:	88 0f       	add	r24, r24
    21b8:	89 2b       	or	r24, r25
    21ba:	80 93 9b 06 	sts	0x069B, r24	; 0x80069b <_ZL9twi_slarw>
    21be:	80 91 99 06 	lds	r24, 0x0699	; 0x800699 <_ZL14twi_inRepStart>
    21c2:	81 30       	cpi	r24, 0x01	; 1
    21c4:	81 f4       	brne	.+32     	; 0x21e6 <_Z7writeTohPhhhh+0x80>
    21c6:	10 92 99 06 	sts	0x0699, r1	; 0x800699 <_ZL14twi_inRepStart>
    21ca:	ab eb       	ldi	r26, 0xBB	; 187
    21cc:	b0 e0       	ldi	r27, 0x00	; 0
    21ce:	ec eb       	ldi	r30, 0xBC	; 188
    21d0:	f0 e0       	ldi	r31, 0x00	; 0
    21d2:	80 91 9b 06 	lds	r24, 0x069B	; 0x80069b <_ZL9twi_slarw>
    21d6:	8c 93       	st	X, r24
    21d8:	80 81       	ld	r24, Z
    21da:	83 fd       	sbrc	r24, 3
    21dc:	fa cf       	rjmp	.-12     	; 0x21d2 <_Z7writeTohPhhhh+0x6c>
    21de:	85 ec       	ldi	r24, 0xC5	; 197
    21e0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    21e4:	03 c0       	rjmp	.+6      	; 0x21ec <_Z7writeTohPhhhh+0x86>
    21e6:	85 ee       	ldi	r24, 0xE5	; 229
    21e8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    21ec:	22 23       	and	r18, r18
    21ee:	a9 f0       	breq	.+42     	; 0x221a <__stack+0x1b>
    21f0:	80 91 9c 06 	lds	r24, 0x069C	; 0x80069c <_ZL9twi_state>
    21f4:	82 30       	cpi	r24, 0x02	; 2
    21f6:	89 f4       	brne	.+34     	; 0x221a <__stack+0x1b>
    21f8:	f9 cf       	rjmp	.-14     	; 0x21ec <_Z7writeTohPhhhh+0x86>
    21fa:	80 91 2f 06 	lds	r24, 0x062F	; 0x80062f <_ZL9twi_error>
    21fe:	80 32       	cpi	r24, 0x20	; 32
    2200:	41 f0       	breq	.+16     	; 0x2212 <__stack+0x13>
    2202:	80 91 2f 06 	lds	r24, 0x062F	; 0x80062f <_ZL9twi_error>
    2206:	80 33       	cpi	r24, 0x30	; 48
    2208:	31 f0       	breq	.+12     	; 0x2216 <__stack+0x17>
    220a:	34 e0       	ldi	r19, 0x04	; 4
    220c:	0a c0       	rjmp	.+20     	; 0x2222 <__stack+0x23>
    220e:	31 e0       	ldi	r19, 0x01	; 1
    2210:	08 c0       	rjmp	.+16     	; 0x2222 <__stack+0x23>
    2212:	32 e0       	ldi	r19, 0x02	; 2
    2214:	06 c0       	rjmp	.+12     	; 0x2222 <__stack+0x23>
    2216:	33 e0       	ldi	r19, 0x03	; 3
    2218:	04 c0       	rjmp	.+8      	; 0x2222 <__stack+0x23>
    221a:	80 91 2f 06 	lds	r24, 0x062F	; 0x80062f <_ZL9twi_error>
    221e:	8f 3f       	cpi	r24, 0xFF	; 255
    2220:	61 f7       	brne	.-40     	; 0x21fa <_Z7writeTohPhhhh+0x94>
    2222:	83 2f       	mov	r24, r19
    2224:	0f 91       	pop	r16
    2226:	08 95       	ret

00002228 <_ZN7TwoWire15endTransmissionEh>:
    2228:	0f 93       	push	r16
    222a:	06 2f       	mov	r16, r22
    222c:	21 e0       	ldi	r18, 0x01	; 1
    222e:	40 91 a2 06 	lds	r20, 0x06A2	; 0x8006a2 <_ZN7TwoWire14txBufferLengthE>
    2232:	64 ea       	ldi	r22, 0xA4	; 164
    2234:	76 e0       	ldi	r23, 0x06	; 6
    2236:	80 91 c4 06 	lds	r24, 0x06C4	; 0x8006c4 <_ZN7TwoWire9txAddressE>
    223a:	95 df       	rcall	.-214    	; 0x2166 <_Z7writeTohPhhhh>
    223c:	10 92 a3 06 	sts	0x06A3, r1	; 0x8006a3 <_ZN7TwoWire13txBufferIndexE>
    2240:	10 92 a2 06 	sts	0x06A2, r1	; 0x8006a2 <_ZN7TwoWire14txBufferLengthE>
    2244:	10 92 a1 06 	sts	0x06A1, r1	; 0x8006a1 <_ZN7TwoWire12transmittingE>
    2248:	0f 91       	pop	r16
    224a:	08 95       	ret

0000224c <_ZN7TwoWire11requestFromEhhmhh>:
    224c:	4f 92       	push	r4
    224e:	5f 92       	push	r5
    2250:	6f 92       	push	r6
    2252:	7f 92       	push	r7
    2254:	af 92       	push	r10
    2256:	bf 92       	push	r11
    2258:	cf 92       	push	r12
    225a:	ef 92       	push	r14
    225c:	ff 92       	push	r15
    225e:	0f 93       	push	r16
    2260:	1f 93       	push	r17
    2262:	cf 93       	push	r28
    2264:	df 93       	push	r29
    2266:	5c 01       	movw	r10, r24
    2268:	f6 2e       	mov	r15, r22
    226a:	d4 2f       	mov	r29, r20
    226c:	28 01       	movw	r4, r16
    226e:	39 01       	movw	r6, r18
    2270:	ee 20       	and	r14, r14
    2272:	39 f1       	breq	.+78     	; 0x22c2 <_ZN7TwoWire11requestFromEhhmhh+0x76>
    2274:	6e df       	rcall	.-292    	; 0x2152 <_ZN7TwoWire17beginTransmissionEh>
    2276:	8e 2d       	mov	r24, r14
    2278:	84 30       	cpi	r24, 0x04	; 4
    227a:	08 f0       	brcs	.+2      	; 0x227e <_ZN7TwoWire11requestFromEhhmhh+0x32>
    227c:	83 e0       	ldi	r24, 0x03	; 3
    227e:	cf ef       	ldi	r28, 0xFF	; 255
    2280:	c8 0f       	add	r28, r24
    2282:	88 23       	and	r24, r24
    2284:	d9 f0       	breq	.+54     	; 0x22bc <_ZN7TwoWire11requestFromEhhmhh+0x70>
    2286:	8c 2f       	mov	r24, r28
    2288:	88 0f       	add	r24, r24
    228a:	88 0f       	add	r24, r24
    228c:	88 0f       	add	r24, r24
    228e:	a3 01       	movw	r20, r6
    2290:	92 01       	movw	r18, r4
    2292:	04 c0       	rjmp	.+8      	; 0x229c <_ZN7TwoWire11requestFromEhhmhh+0x50>
    2294:	56 95       	lsr	r21
    2296:	47 95       	ror	r20
    2298:	37 95       	ror	r19
    229a:	27 95       	ror	r18
    229c:	8a 95       	dec	r24
    229e:	d2 f7       	brpl	.-12     	; 0x2294 <_ZN7TwoWire11requestFromEhhmhh+0x48>
    22a0:	ca 01       	movw	r24, r20
    22a2:	b9 01       	movw	r22, r18
    22a4:	d5 01       	movw	r26, r10
    22a6:	ed 91       	ld	r30, X+
    22a8:	fc 91       	ld	r31, X
    22aa:	01 90       	ld	r0, Z+
    22ac:	f0 81       	ld	r31, Z
    22ae:	e0 2d       	mov	r30, r0
    22b0:	c5 01       	movw	r24, r10
    22b2:	19 95       	eicall
    22b4:	8c 2f       	mov	r24, r28
    22b6:	c1 50       	subi	r28, 0x01	; 1
    22b8:	81 11       	cpse	r24, r1
    22ba:	e5 cf       	rjmp	.-54     	; 0x2286 <_ZN7TwoWire11requestFromEhhmhh+0x3a>
    22bc:	60 e0       	ldi	r22, 0x00	; 0
    22be:	c5 01       	movw	r24, r10
    22c0:	b3 df       	rcall	.-154    	; 0x2228 <_ZN7TwoWire15endTransmissionEh>
    22c2:	4d 2f       	mov	r20, r29
    22c4:	d1 32       	cpi	r29, 0x21	; 33
    22c6:	08 f0       	brcs	.+2      	; 0x22ca <_ZN7TwoWire11requestFromEhhmhh+0x7e>
    22c8:	40 e2       	ldi	r20, 0x20	; 32
    22ca:	2c 2d       	mov	r18, r12
    22cc:	67 ec       	ldi	r22, 0xC7	; 199
    22ce:	76 e0       	ldi	r23, 0x06	; 6
    22d0:	8f 2d       	mov	r24, r15
    22d2:	ed de       	rcall	.-550    	; 0x20ae <_Z8readFromhPhhh>
    22d4:	10 92 c6 06 	sts	0x06C6, r1	; 0x8006c6 <_ZN7TwoWire13rxBufferIndexE>
    22d8:	80 93 c5 06 	sts	0x06C5, r24	; 0x8006c5 <_ZN7TwoWire14rxBufferLengthE>
    22dc:	df 91       	pop	r29
    22de:	cf 91       	pop	r28
    22e0:	1f 91       	pop	r17
    22e2:	0f 91       	pop	r16
    22e4:	ff 90       	pop	r15
    22e6:	ef 90       	pop	r14
    22e8:	cf 90       	pop	r12
    22ea:	bf 90       	pop	r11
    22ec:	af 90       	pop	r10
    22ee:	7f 90       	pop	r7
    22f0:	6f 90       	pop	r6
    22f2:	5f 90       	pop	r5
    22f4:	4f 90       	pop	r4
    22f6:	08 95       	ret

000022f8 <_ZN7TwoWire11requestFromEhhh>:
    22f8:	cf 92       	push	r12
    22fa:	ef 92       	push	r14
    22fc:	0f 93       	push	r16
    22fe:	1f 93       	push	r17
    2300:	c2 2e       	mov	r12, r18
    2302:	e1 2c       	mov	r14, r1
    2304:	00 e0       	ldi	r16, 0x00	; 0
    2306:	10 e0       	ldi	r17, 0x00	; 0
    2308:	98 01       	movw	r18, r16
    230a:	a0 df       	rcall	.-192    	; 0x224c <_ZN7TwoWire11requestFromEhhmhh>
    230c:	1f 91       	pop	r17
    230e:	0f 91       	pop	r16
    2310:	ef 90       	pop	r14
    2312:	cf 90       	pop	r12
    2314:	08 95       	ret

00002316 <_ZN7TwoWire11requestFromEhh>:
    2316:	21 e0       	ldi	r18, 0x01	; 1
    2318:	ef cf       	rjmp	.-34     	; 0x22f8 <_ZN7TwoWire11requestFromEhhh>
    231a:	08 95       	ret

0000231c <_ZN7TwoWire15endTransmissionEv>:
    231c:	61 e0       	ldi	r22, 0x01	; 1
    231e:	84 cf       	rjmp	.-248    	; 0x2228 <_ZN7TwoWire15endTransmissionEh>
    2320:	08 95       	ret

00002322 <_Z8transmitPKhh>:
    2322:	40 91 51 06 	lds	r20, 0x0651	; 0x800651 <_ZL18twi_txBufferLength>
    2326:	26 2f       	mov	r18, r22
    2328:	30 e0       	ldi	r19, 0x00	; 0
    232a:	24 0f       	add	r18, r20
    232c:	31 1d       	adc	r19, r1
    232e:	21 32       	cpi	r18, 0x21	; 33
    2330:	31 05       	cpc	r19, r1
    2332:	ec f4       	brge	.+58     	; 0x236e <_Z8transmitPKhh+0x4c>
    2334:	20 91 9c 06 	lds	r18, 0x069C	; 0x80069c <_ZL9twi_state>
    2338:	24 30       	cpi	r18, 0x04	; 4
    233a:	d9 f4       	brne	.+54     	; 0x2372 <_Z8transmitPKhh+0x50>
    233c:	66 23       	and	r22, r22
    233e:	81 f0       	breq	.+32     	; 0x2360 <_Z8transmitPKhh+0x3e>
    2340:	a8 2f       	mov	r26, r24
    2342:	b9 2f       	mov	r27, r25
    2344:	80 e0       	ldi	r24, 0x00	; 0
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	30 91 51 06 	lds	r19, 0x0651	; 0x800651 <_ZL18twi_txBufferLength>
    234c:	2d 91       	ld	r18, X+
    234e:	fc 01       	movw	r30, r24
    2350:	ed 5a       	subi	r30, 0xAD	; 173
    2352:	f9 4f       	sbci	r31, 0xF9	; 249
    2354:	e3 0f       	add	r30, r19
    2356:	f1 1d       	adc	r31, r1
    2358:	20 83       	st	Z, r18
    235a:	01 96       	adiw	r24, 0x01	; 1
    235c:	86 17       	cp	r24, r22
    235e:	a0 f3       	brcs	.-24     	; 0x2348 <_Z8transmitPKhh+0x26>
    2360:	80 91 51 06 	lds	r24, 0x0651	; 0x800651 <_ZL18twi_txBufferLength>
    2364:	68 0f       	add	r22, r24
    2366:	60 93 51 06 	sts	0x0651, r22	; 0x800651 <_ZL18twi_txBufferLength>
    236a:	80 e0       	ldi	r24, 0x00	; 0
    236c:	08 95       	ret
    236e:	81 e0       	ldi	r24, 0x01	; 1
    2370:	08 95       	ret
    2372:	82 e0       	ldi	r24, 0x02	; 2
    2374:	08 95       	ret

00002376 <_ZN7TwoWire5writeEh>:
    2376:	cf 93       	push	r28
    2378:	df 93       	push	r29
    237a:	1f 92       	push	r1
    237c:	cd b7       	in	r28, 0x3d	; 61
    237e:	de b7       	in	r29, 0x3e	; 62
    2380:	69 83       	std	Y+1, r22	; 0x01
    2382:	80 91 a1 06 	lds	r24, 0x06A1	; 0x8006a1 <_ZN7TwoWire12transmittingE>
    2386:	88 23       	and	r24, r24
    2388:	99 f0       	breq	.+38     	; 0x23b0 <_ZN7TwoWire5writeEh+0x3a>
    238a:	80 91 a2 06 	lds	r24, 0x06A2	; 0x8006a2 <_ZN7TwoWire14txBufferLengthE>
    238e:	80 32       	cpi	r24, 0x20	; 32
    2390:	b0 f4       	brcc	.+44     	; 0x23be <_ZN7TwoWire5writeEh+0x48>
    2392:	80 91 a3 06 	lds	r24, 0x06A3	; 0x8006a3 <_ZN7TwoWire13txBufferIndexE>
    2396:	e8 2f       	mov	r30, r24
    2398:	f0 e0       	ldi	r31, 0x00	; 0
    239a:	ec 55       	subi	r30, 0x5C	; 92
    239c:	f9 4f       	sbci	r31, 0xF9	; 249
    239e:	60 83       	st	Z, r22
    23a0:	8f 5f       	subi	r24, 0xFF	; 255
    23a2:	80 93 a3 06 	sts	0x06A3, r24	; 0x8006a3 <_ZN7TwoWire13txBufferIndexE>
    23a6:	80 93 a2 06 	sts	0x06A2, r24	; 0x8006a2 <_ZN7TwoWire14txBufferLengthE>
    23aa:	81 e0       	ldi	r24, 0x01	; 1
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	09 c0       	rjmp	.+18     	; 0x23c2 <_ZN7TwoWire5writeEh+0x4c>
    23b0:	61 e0       	ldi	r22, 0x01	; 1
    23b2:	ce 01       	movw	r24, r28
    23b4:	01 96       	adiw	r24, 0x01	; 1
    23b6:	b5 df       	rcall	.-150    	; 0x2322 <_Z8transmitPKhh>
    23b8:	81 e0       	ldi	r24, 0x01	; 1
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	02 c0       	rjmp	.+4      	; 0x23c2 <_ZN7TwoWire5writeEh+0x4c>
    23be:	80 e0       	ldi	r24, 0x00	; 0
    23c0:	90 e0       	ldi	r25, 0x00	; 0
    23c2:	0f 90       	pop	r0
    23c4:	df 91       	pop	r29
    23c6:	cf 91       	pop	r28
    23c8:	08 95       	ret

000023ca <_ZN7TwoWire5writeEPKhj>:
    23ca:	cf 92       	push	r12
    23cc:	df 92       	push	r13
    23ce:	ef 92       	push	r14
    23d0:	ff 92       	push	r15
    23d2:	0f 93       	push	r16
    23d4:	1f 93       	push	r17
    23d6:	cf 93       	push	r28
    23d8:	df 93       	push	r29
    23da:	8c 01       	movw	r16, r24
    23dc:	cb 01       	movw	r24, r22
    23de:	6a 01       	movw	r12, r20
    23e0:	20 91 a1 06 	lds	r18, 0x06A1	; 0x8006a1 <_ZN7TwoWire12transmittingE>
    23e4:	22 23       	and	r18, r18
    23e6:	a1 f0       	breq	.+40     	; 0x2410 <_ZN7TwoWire5writeEPKhj+0x46>
    23e8:	41 15       	cp	r20, r1
    23ea:	51 05       	cpc	r21, r1
    23ec:	99 f0       	breq	.+38     	; 0x2414 <_ZN7TwoWire5writeEPKhj+0x4a>
    23ee:	eb 01       	movw	r28, r22
    23f0:	7b 01       	movw	r14, r22
    23f2:	e4 0e       	add	r14, r20
    23f4:	f5 1e       	adc	r15, r21
    23f6:	69 91       	ld	r22, Y+
    23f8:	d8 01       	movw	r26, r16
    23fa:	ed 91       	ld	r30, X+
    23fc:	fc 91       	ld	r31, X
    23fe:	01 90       	ld	r0, Z+
    2400:	f0 81       	ld	r31, Z
    2402:	e0 2d       	mov	r30, r0
    2404:	c8 01       	movw	r24, r16
    2406:	19 95       	eicall
    2408:	ce 15       	cp	r28, r14
    240a:	df 05       	cpc	r29, r15
    240c:	a1 f7       	brne	.-24     	; 0x23f6 <_ZN7TwoWire5writeEPKhj+0x2c>
    240e:	02 c0       	rjmp	.+4      	; 0x2414 <_ZN7TwoWire5writeEPKhj+0x4a>
    2410:	64 2f       	mov	r22, r20
    2412:	87 df       	rcall	.-242    	; 0x2322 <_Z8transmitPKhh>
    2414:	c6 01       	movw	r24, r12
    2416:	df 91       	pop	r29
    2418:	cf 91       	pop	r28
    241a:	1f 91       	pop	r17
    241c:	0f 91       	pop	r16
    241e:	ff 90       	pop	r15
    2420:	ef 90       	pop	r14
    2422:	df 90       	pop	r13
    2424:	cf 90       	pop	r12
    2426:	08 95       	ret

00002428 <__vector_39>:
}

ISR(TWI_vect)
{
    2428:	1f 92       	push	r1
    242a:	0f 92       	push	r0
    242c:	0f b6       	in	r0, 0x3f	; 63
    242e:	0f 92       	push	r0
    2430:	11 24       	eor	r1, r1
    2432:	0b b6       	in	r0, 0x3b	; 59
    2434:	0f 92       	push	r0
    2436:	2f 93       	push	r18
    2438:	3f 93       	push	r19
    243a:	4f 93       	push	r20
    243c:	5f 93       	push	r21
    243e:	6f 93       	push	r22
    2440:	7f 93       	push	r23
    2442:	8f 93       	push	r24
    2444:	9f 93       	push	r25
    2446:	af 93       	push	r26
    2448:	bf 93       	push	r27
    244a:	ef 93       	push	r30
    244c:	ff 93       	push	r31
	switch(TW_STATUS){
    244e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    2452:	88 7f       	andi	r24, 0xF8	; 248
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	89 3c       	cpi	r24, 0xC9	; 201
    2458:	91 05       	cpc	r25, r1
    245a:	08 f0       	brcs	.+2      	; 0x245e <__vector_39+0x36>
    245c:	ee c0       	rjmp	.+476    	; 0x263a <__vector_39+0x212>
    245e:	fc 01       	movw	r30, r24
    2460:	88 27       	eor	r24, r24
    2462:	ee 58       	subi	r30, 0x8E	; 142
    2464:	ff 4f       	sbci	r31, 0xFF	; 255
    2466:	8f 4f       	sbci	r24, 0xFF	; 255
    2468:	93 c4       	rjmp	.+2342   	; 0x2d90 <__tablejump2__>
		// All Master
		case TW_START:     // sent start condition
		case TW_REP_START: // sent repeated start condition
		// copy device address and r/w bit to output register and ack
		TWDR = twi_slarw;
    246a:	80 91 9b 06 	lds	r24, 0x069B	; 0x80069b <_ZL9twi_slarw>
    246e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>

void reply(uint8_t ack)
{
	// transmit master read ready signal, with or without ack
	if(ack){
		TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2472:	85 ec       	ldi	r24, 0xC5	; 197
    2474:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2478:	e0 c0       	rjmp	.+448    	; 0x263a <__vector_39+0x212>

		// Master Transmitter
		case TW_MT_SLA_ACK:  // slave receiver acked address
		case TW_MT_DATA_ACK: // slave receiver acked data
		// if there is data to send, send it, otherwise stop
		if(twi_masterBufferIndex < twi_masterBufferLength){
    247a:	90 91 74 06 	lds	r25, 0x0674	; 0x800674 <_ZL21twi_masterBufferIndex>
    247e:	80 91 73 06 	lds	r24, 0x0673	; 0x800673 <_ZL22twi_masterBufferLength>
    2482:	98 17       	cp	r25, r24
    2484:	80 f4       	brcc	.+32     	; 0x24a6 <__vector_39+0x7e>
			// copy data to output register and ack
			TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2486:	e0 91 74 06 	lds	r30, 0x0674	; 0x800674 <_ZL21twi_masterBufferIndex>
    248a:	81 e0       	ldi	r24, 0x01	; 1
    248c:	8e 0f       	add	r24, r30
    248e:	80 93 74 06 	sts	0x0674, r24	; 0x800674 <_ZL21twi_masterBufferIndex>
    2492:	f0 e0       	ldi	r31, 0x00	; 0
    2494:	eb 58       	subi	r30, 0x8B	; 139
    2496:	f9 4f       	sbci	r31, 0xF9	; 249
    2498:	80 81       	ld	r24, Z
    249a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>

void reply(uint8_t ack)
{
	// transmit master read ready signal, with or without ack
	if(ack){
		TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    249e:	85 ec       	ldi	r24, 0xC5	; 197
    24a0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    24a4:	ca c0       	rjmp	.+404    	; 0x263a <__vector_39+0x212>
		if(twi_masterBufferIndex < twi_masterBufferLength){
			// copy data to output register and ack
			TWDR = twi_masterBuffer[twi_masterBufferIndex++];
			reply(1);
			}else{
			if (twi_sendStop)
    24a6:	80 91 9a 06 	lds	r24, 0x069A	; 0x80069a <_ZL12twi_sendStop>
    24aa:	88 23       	and	r24, r24
			stop();
    24ac:	11 f0       	breq	.+4      	; 0x24b2 <__vector_39+0x8a>
    24ae:	ee dd       	rcall	.-1060   	; 0x208c <_Z4stopv>
    24b0:	c4 c0       	rjmp	.+392    	; 0x263a <__vector_39+0x212>
			else {
				twi_inRepStart = true;	// we're gonna send the START
    24b2:	81 e0       	ldi	r24, 0x01	; 1
    24b4:	80 93 99 06 	sts	0x0699, r24	; 0x800699 <_ZL14twi_inRepStart>
				// don't enable the interrupt. We'll generate the start, but we
				// avoid handling the interrupt until we're in the next transaction,
				// at the point where we would normally issue the start.
				TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    24b8:	84 ea       	ldi	r24, 0xA4	; 164
    24ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
				twi_state = TWI_READY;
    24be:	10 92 9c 06 	sts	0x069C, r1	; 0x80069c <_ZL9twi_state>
    24c2:	bb c0       	rjmp	.+374    	; 0x263a <__vector_39+0x212>
			}
		}
		break;
		case TW_MT_SLA_NACK:  // address sent, nack received
		twi_error = TW_MT_SLA_NACK;
    24c4:	80 e2       	ldi	r24, 0x20	; 32
    24c6:	80 93 2f 06 	sts	0x062F, r24	; 0x80062f <_ZL9twi_error>
		stop();
    24ca:	e0 dd       	rcall	.-1088   	; 0x208c <_Z4stopv>
		break;
    24cc:	b6 c0       	rjmp	.+364    	; 0x263a <__vector_39+0x212>
		case TW_MT_DATA_NACK: // data sent, nack received
		twi_error = TW_MT_DATA_NACK;
    24ce:	80 e3       	ldi	r24, 0x30	; 48
    24d0:	80 93 2f 06 	sts	0x062F, r24	; 0x80062f <_ZL9twi_error>
		stop();
    24d4:	db dd       	rcall	.-1098   	; 0x208c <_Z4stopv>
		break;
		case TW_MT_ARB_LOST: // lost bus arbitration
		twi_error = TW_MT_ARB_LOST;
    24d6:	b1 c0       	rjmp	.+354    	; 0x263a <__vector_39+0x212>
    24d8:	88 e3       	ldi	r24, 0x38	; 56
    24da:	80 93 2f 06 	sts	0x062F, r24	; 0x80062f <_ZL9twi_error>
		releaseBus();
    24de:	e1 dd       	rcall	.-1086   	; 0x20a2 <_Z10releaseBusv>
		break;
    24e0:	ac c0       	rjmp	.+344    	; 0x263a <__vector_39+0x212>

		// Master Receiver
		case TW_MR_DATA_ACK: // data received, ack sent
		// put byte into buffer
		twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    24e2:	e0 91 74 06 	lds	r30, 0x0674	; 0x800674 <_ZL21twi_masterBufferIndex>
    24e6:	81 e0       	ldi	r24, 0x01	; 1
    24e8:	8e 0f       	add	r24, r30
    24ea:	80 93 74 06 	sts	0x0674, r24	; 0x800674 <_ZL21twi_masterBufferIndex>
    24ee:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    24f2:	f0 e0       	ldi	r31, 0x00	; 0
    24f4:	eb 58       	subi	r30, 0x8B	; 139
    24f6:	f9 4f       	sbci	r31, 0xF9	; 249
    24f8:	80 83       	st	Z, r24
		case TW_MR_SLA_ACK:  // address sent, ack received
		// ack if more bytes are expected, otherwise nack
		if(twi_masterBufferIndex < twi_masterBufferLength){
    24fa:	90 91 74 06 	lds	r25, 0x0674	; 0x800674 <_ZL21twi_masterBufferIndex>
    24fe:	80 91 73 06 	lds	r24, 0x0673	; 0x800673 <_ZL22twi_masterBufferLength>
    2502:	98 17       	cp	r25, r24
    2504:	20 f4       	brcc	.+8      	; 0x250e <__vector_39+0xe6>

void reply(uint8_t ack)
{
	// transmit master read ready signal, with or without ack
	if(ack){
		TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2506:	85 ec       	ldi	r24, 0xC5	; 197
    2508:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    250c:	96 c0       	rjmp	.+300    	; 0x263a <__vector_39+0x212>
		}else{
		TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    250e:	85 e8       	ldi	r24, 0x85	; 133
    2510:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2514:	92 c0       	rjmp	.+292    	; 0x263a <__vector_39+0x212>
			reply(0);
		}
		break;
		case TW_MR_DATA_NACK: // data received, nack sent
		// put final byte into buffer
		twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2516:	e0 91 74 06 	lds	r30, 0x0674	; 0x800674 <_ZL21twi_masterBufferIndex>
    251a:	81 e0       	ldi	r24, 0x01	; 1
    251c:	8e 0f       	add	r24, r30
    251e:	80 93 74 06 	sts	0x0674, r24	; 0x800674 <_ZL21twi_masterBufferIndex>
    2522:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2526:	f0 e0       	ldi	r31, 0x00	; 0
    2528:	eb 58       	subi	r30, 0x8B	; 139
    252a:	f9 4f       	sbci	r31, 0xF9	; 249
		if (twi_sendStop)
    252c:	80 83       	st	Z, r24
    252e:	80 91 9a 06 	lds	r24, 0x069A	; 0x80069a <_ZL12twi_sendStop>
    2532:	88 23       	and	r24, r24
		stop();
    2534:	11 f0       	breq	.+4      	; 0x253a <__vector_39+0x112>
    2536:	aa dd       	rcall	.-1196   	; 0x208c <_Z4stopv>
    2538:	80 c0       	rjmp	.+256    	; 0x263a <__vector_39+0x212>
		else {
			twi_inRepStart = true;	// we're gonna send the START
    253a:	81 e0       	ldi	r24, 0x01	; 1
    253c:	80 93 99 06 	sts	0x0699, r24	; 0x800699 <_ZL14twi_inRepStart>
			// don't enable the interrupt. We'll generate the start, but we
			// avoid handling the interrupt until we're in the next transaction,
			// at the point where we would normally issue the start.
			TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2540:	84 ea       	ldi	r24, 0xA4	; 164
    2542:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
			twi_state = TWI_READY;
    2546:	10 92 9c 06 	sts	0x069C, r1	; 0x80069c <_ZL9twi_state>
		}
		break;
		case TW_MR_SLA_NACK: // address sent, nack received
		stop();
    254a:	77 c0       	rjmp	.+238    	; 0x263a <__vector_39+0x212>
    254c:	9f dd       	rcall	.-1218   	; 0x208c <_Z4stopv>
		break;
    254e:	75 c0       	rjmp	.+234    	; 0x263a <__vector_39+0x212>
		case TW_SR_SLA_ACK:   // addressed, returned ack
		case TW_SR_GCALL_ACK: // addressed generally, returned ack
		case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
		case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
		// enter slave receiver mode
		twi_state = TWI_SRX;
    2550:	83 e0       	ldi	r24, 0x03	; 3
    2552:	80 93 9c 06 	sts	0x069C, r24	; 0x80069c <_ZL9twi_state>
		// indicate that rx buffer can be overwritten and ack
		twi_rxBufferIndex = 0;
    2556:	10 92 30 06 	sts	0x0630, r1	; 0x800630 <_ZL17twi_rxBufferIndex>

void reply(uint8_t ack)
{
	// transmit master read ready signal, with or without ack
	if(ack){
		TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    255a:	85 ec       	ldi	r24, 0xC5	; 197
    255c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2560:	6c c0       	rjmp	.+216    	; 0x263a <__vector_39+0x212>
		reply(1);
		break;
		case TW_SR_DATA_ACK:       // data received, returned ack
		case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
		// if there is still room in the rx buffer
		if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2562:	80 91 30 06 	lds	r24, 0x0630	; 0x800630 <_ZL17twi_rxBufferIndex>
    2566:	80 32       	cpi	r24, 0x20	; 32
    2568:	80 f4       	brcc	.+32     	; 0x258a <__vector_39+0x162>
			// put byte in buffer and ack
			twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    256a:	e0 91 30 06 	lds	r30, 0x0630	; 0x800630 <_ZL17twi_rxBufferIndex>
    256e:	81 e0       	ldi	r24, 0x01	; 1
    2570:	8e 0f       	add	r24, r30
    2572:	80 93 30 06 	sts	0x0630, r24	; 0x800630 <_ZL17twi_rxBufferIndex>
    2576:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    257a:	f0 e0       	ldi	r31, 0x00	; 0
    257c:	ef 5c       	subi	r30, 0xCF	; 207
    257e:	f9 4f       	sbci	r31, 0xF9	; 249
    2580:	80 83       	st	Z, r24

void reply(uint8_t ack)
{
	// transmit master read ready signal, with or without ack
	if(ack){
		TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2582:	85 ec       	ldi	r24, 0xC5	; 197
    2584:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
		}else{
		TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2588:	58 c0       	rjmp	.+176    	; 0x263a <__vector_39+0x212>
    258a:	85 e8       	ldi	r24, 0x85	; 133
    258c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
			reply(0);
		}
		break;
		case TW_SR_STOP: // stop or repeated start condition received
		// ack future responses and leave slave receiver state
		releaseBus();
    2590:	54 c0       	rjmp	.+168    	; 0x263a <__vector_39+0x212>
    2592:	87 dd       	rcall	.-1266   	; 0x20a2 <_Z10releaseBusv>
		// put a null char after data if there's room
		if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2594:	80 91 30 06 	lds	r24, 0x0630	; 0x800630 <_ZL17twi_rxBufferIndex>
    2598:	80 32       	cpi	r24, 0x20	; 32
    259a:	30 f4       	brcc	.+12     	; 0x25a8 <__vector_39+0x180>
			twi_rxBuffer[twi_rxBufferIndex] = '\0';
    259c:	e0 91 30 06 	lds	r30, 0x0630	; 0x800630 <_ZL17twi_rxBufferIndex>
    25a0:	f0 e0       	ldi	r31, 0x00	; 0
    25a2:	ef 5c       	subi	r30, 0xCF	; 207
    25a4:	f9 4f       	sbci	r31, 0xF9	; 249
    25a6:	10 82       	st	Z, r1
		}
		// callback to user defined callback
		twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    25a8:	60 91 30 06 	lds	r22, 0x0630	; 0x800630 <_ZL17twi_rxBufferIndex>
    25ac:	70 e0       	ldi	r23, 0x00	; 0
    25ae:	e0 91 95 06 	lds	r30, 0x0695	; 0x800695 <_ZL18twi_onSlaveReceive>
    25b2:	f0 91 96 06 	lds	r31, 0x0696	; 0x800696 <_ZL18twi_onSlaveReceive+0x1>
    25b6:	81 e3       	ldi	r24, 0x31	; 49
    25b8:	96 e0       	ldi	r25, 0x06	; 6
    25ba:	19 95       	eicall
		// since we submit rx buffer to "wire" library, we can reset it
		twi_rxBufferIndex = 0;
    25bc:	10 92 30 06 	sts	0x0630, r1	; 0x800630 <_ZL17twi_rxBufferIndex>
		break;
    25c0:	3c c0       	rjmp	.+120    	; 0x263a <__vector_39+0x212>
{
	// transmit master read ready signal, with or without ack
	if(ack){
		TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
		}else{
		TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    25c2:	85 e8       	ldi	r24, 0x85	; 133
    25c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    25c8:	38 c0       	rjmp	.+112    	; 0x263a <__vector_39+0x212>
		
		// Slave Transmitter
		case TW_ST_SLA_ACK:          // addressed, returned ack
		case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
		// enter slave transmitter mode
		twi_state = TWI_STX;
    25ca:	84 e0       	ldi	r24, 0x04	; 4
    25cc:	80 93 9c 06 	sts	0x069C, r24	; 0x80069c <_ZL9twi_state>
		// ready the tx buffer index for iteration
		twi_txBufferIndex = 0;
    25d0:	10 92 52 06 	sts	0x0652, r1	; 0x800652 <_ZL17twi_txBufferIndex>
		// set tx buffer length to be zero, to verify if user changes it
		twi_txBufferLength = 0;
    25d4:	10 92 51 06 	sts	0x0651, r1	; 0x800651 <_ZL18twi_txBufferLength>
		// request for txBuffer to be filled and length to be set
		// note: user must call twi_transmit(bytes, length) to do this
		twi_onSlaveTransmit();
    25d8:	e0 91 97 06 	lds	r30, 0x0697	; 0x800697 <_ZL19twi_onSlaveTransmit>
    25dc:	f0 91 98 06 	lds	r31, 0x0698	; 0x800698 <_ZL19twi_onSlaveTransmit+0x1>
    25e0:	19 95       	eicall
		// if they didn't change buffer & length, initialize it
		if(0 == twi_txBufferLength){
    25e2:	80 91 51 06 	lds	r24, 0x0651	; 0x800651 <_ZL18twi_txBufferLength>
    25e6:	81 11       	cpse	r24, r1
    25e8:	05 c0       	rjmp	.+10     	; 0x25f4 <__vector_39+0x1cc>
			twi_txBufferLength = 1;
    25ea:	81 e0       	ldi	r24, 0x01	; 1
    25ec:	80 93 51 06 	sts	0x0651, r24	; 0x800651 <_ZL18twi_txBufferLength>
			twi_txBuffer[0] = 0x00;
    25f0:	10 92 53 06 	sts	0x0653, r1	; 0x800653 <_ZL12twi_txBuffer>
		}
		// transmit first byte from buffer, fall
		case TW_ST_DATA_ACK: // byte sent, ack returned
		// copy data to output register
		TWDR = twi_txBuffer[twi_txBufferIndex++];
    25f4:	e0 91 52 06 	lds	r30, 0x0652	; 0x800652 <_ZL17twi_txBufferIndex>
    25f8:	81 e0       	ldi	r24, 0x01	; 1
    25fa:	8e 0f       	add	r24, r30
    25fc:	80 93 52 06 	sts	0x0652, r24	; 0x800652 <_ZL17twi_txBufferIndex>
    2600:	f0 e0       	ldi	r31, 0x00	; 0
    2602:	ed 5a       	subi	r30, 0xAD	; 173
    2604:	f9 4f       	sbci	r31, 0xF9	; 249
    2606:	80 81       	ld	r24, Z
    2608:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
		// if there is more to send, ack, otherwise nack
		if(twi_txBufferIndex < twi_txBufferLength){
    260c:	90 91 52 06 	lds	r25, 0x0652	; 0x800652 <_ZL17twi_txBufferIndex>
    2610:	80 91 51 06 	lds	r24, 0x0651	; 0x800651 <_ZL18twi_txBufferLength>
    2614:	98 17       	cp	r25, r24
    2616:	20 f4       	brcc	.+8      	; 0x2620 <__vector_39+0x1f8>

void reply(uint8_t ack)
{
	// transmit master read ready signal, with or without ack
	if(ack){
		TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2618:	85 ec       	ldi	r24, 0xC5	; 197
    261a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    261e:	0d c0       	rjmp	.+26     	; 0x263a <__vector_39+0x212>
		}else{
		TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2620:	85 e8       	ldi	r24, 0x85	; 133
    2622:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2626:	09 c0       	rjmp	.+18     	; 0x263a <__vector_39+0x212>

void reply(uint8_t ack)
{
	// transmit master read ready signal, with or without ack
	if(ack){
		TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2628:	85 ec       	ldi	r24, 0xC5	; 197
    262a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
		case TW_ST_DATA_NACK: // received nack, we are done
		case TW_ST_LAST_DATA: // received ack, but we are done already!
		// ack future responses
		reply(1);
		// leave slave receiver state
		twi_state = TWI_READY;
    262e:	10 92 9c 06 	sts	0x069C, r1	; 0x80069c <_ZL9twi_state>

		// All
		case TW_NO_INFO:   // no state information
		break;
		case TW_BUS_ERROR: // bus error, illegal stop/start
		twi_error = TW_BUS_ERROR;
    2632:	03 c0       	rjmp	.+6      	; 0x263a <__vector_39+0x212>
    2634:	10 92 2f 06 	sts	0x062F, r1	; 0x80062f <_ZL9twi_error>
		stop();
    2638:	29 dd       	rcall	.-1454   	; 0x208c <_Z4stopv>
		break;
	}
}
    263a:	ff 91       	pop	r31
    263c:	ef 91       	pop	r30
    263e:	bf 91       	pop	r27
    2640:	af 91       	pop	r26
    2642:	9f 91       	pop	r25
    2644:	8f 91       	pop	r24
    2646:	7f 91       	pop	r23
    2648:	6f 91       	pop	r22
    264a:	5f 91       	pop	r21
    264c:	4f 91       	pop	r20
    264e:	3f 91       	pop	r19
    2650:	2f 91       	pop	r18
    2652:	0f 90       	pop	r0
    2654:	0b be       	out	0x3b, r0	; 59
    2656:	0f 90       	pop	r0
    2658:	0f be       	out	0x3f, r0	; 63
    265a:	0f 90       	pop	r0
    265c:	1f 90       	pop	r1
    265e:	18 95       	reti

00002660 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:

static volatile uint8_t twi_error;

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    2660:	80 ec       	ldi	r24, 0xC0	; 192
    2662:	92 e0       	ldi	r25, 0x02	; 2
    2664:	90 93 2e 06 	sts	0x062E, r25	; 0x80062e <Wire+0x1>
    2668:	80 93 2d 06 	sts	0x062D, r24	; 0x80062d <Wire>
    266c:	08 95       	ret

0000266e <_ZN13DigitalSensor5beginEv>:
	else LedPort &= ~LedPin;
}

bool Robot::ReadTestBtn(){
	return !((TestBtnPinPort & TestBtnPin) > 0);
}
    266e:	81 e0       	ldi	r24, 0x01	; 1
    2670:	08 95       	ret

00002672 <_ZN13DigitalSensor14IsValidRequestEPKhh>:
    2672:	81 e0       	ldi	r24, 0x01	; 1
    2674:	41 11       	cpse	r20, r1
    2676:	80 e0       	ldi	r24, 0x00	; 0
    2678:	08 95       	ret

0000267a <_ZN13DigitalSensor15UpdateRequestedEPh>:
    267a:	fc 01       	movw	r30, r24
    267c:	a5 81       	ldd	r26, Z+5	; 0x05
    267e:	b6 81       	ldd	r27, Z+6	; 0x06
    2680:	9c 91       	ld	r25, X
    2682:	84 81       	ldd	r24, Z+4	; 0x04
    2684:	98 23       	and	r25, r24
    2686:	21 e0       	ldi	r18, 0x01	; 1
    2688:	09 f4       	brne	.+2      	; 0x268c <_ZN13DigitalSensor15UpdateRequestedEPh+0x12>
    268a:	20 e0       	ldi	r18, 0x00	; 0
    268c:	87 81       	ldd	r24, Z+7	; 0x07
    268e:	82 27       	eor	r24, r18
    2690:	fb 01       	movw	r30, r22
    2692:	80 83       	st	Z, r24
    2694:	81 e0       	ldi	r24, 0x01	; 1
    2696:	08 95       	ret

00002698 <_ZN7ISensor6UpdateEPKhh>:
    2698:	cf 93       	push	r28
    269a:	df 93       	push	r29
    269c:	ec 01       	movw	r28, r24
    269e:	e8 81       	ld	r30, Y
    26a0:	f9 81       	ldd	r31, Y+1	; 0x01
    26a2:	04 80       	ldd	r0, Z+4	; 0x04
    26a4:	f5 81       	ldd	r31, Z+5	; 0x05
    26a6:	e0 2d       	mov	r30, r0
    26a8:	19 95       	eicall
    26aa:	88 23       	and	r24, r24
    26ac:	a1 f0       	breq	.+40     	; 0x26d6 <_ZN7ISensor6UpdateEPKhh+0x3e>
    26ae:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    26b2:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    26b6:	8a 81       	ldd	r24, Y+2	; 0x02
    26b8:	82 83       	std	Z+2, r24	; 0x02
    26ba:	bf 01       	movw	r22, r30
    26bc:	6d 5f       	subi	r22, 0xFD	; 253
    26be:	7f 4f       	sbci	r23, 0xFF	; 255
    26c0:	e8 81       	ld	r30, Y
    26c2:	f9 81       	ldd	r31, Y+1	; 0x01
    26c4:	06 80       	ldd	r0, Z+6	; 0x06
    26c6:	f7 81       	ldd	r31, Z+7	; 0x07
    26c8:	e0 2d       	mov	r30, r0
    26ca:	ce 01       	movw	r24, r28
    26cc:	19 95       	eicall
    26ce:	61 e0       	ldi	r22, 0x01	; 1
    26d0:	68 0f       	add	r22, r24
    26d2:	83 e0       	ldi	r24, 0x03	; 3
    26d4:	63 d8       	rcall	.-3898   	; 0x179c <_ZN9EtherComm11SendCommandEhh>
    26d6:	df 91       	pop	r29
    26d8:	cf 91       	pop	r28
    26da:	08 95       	ret

000026dc <_ZN5Robot6SetLedEb>:
    26dc:	88 23       	and	r24, r24
    26de:	11 f0       	breq	.+4      	; 0x26e4 <_ZN5Robot6SetLedEb+0x8>
    26e0:	2f 9a       	sbi	0x05, 7	; 5
    26e2:	08 95       	ret
    26e4:	2f 98       	cbi	0x05, 7	; 5
    26e6:	08 95       	ret

000026e8 <_ZN5Robot14RegisterDeviceER7ISensor>:
bool Robot::begin(){
	LedDDR |= LedPin;
	return RegisterDevices();
}

void Robot::RegisterDevice(ISensor& sensor){
    26e8:	0f 93       	push	r16
    26ea:	1f 93       	push	r17
    26ec:	cf 93       	push	r28
    26ee:	df 93       	push	r29
	uint8_t id = sensor.getId();
	if(devices[id] == NULL){
    26f0:	dc 01       	movw	r26, r24
    26f2:	12 96       	adiw	r26, 0x02	; 2
    26f4:	cc 91       	ld	r28, X
    26f6:	12 97       	sbiw	r26, 0x02	; 2
    26f8:	d0 e0       	ldi	r29, 0x00	; 0
    26fa:	fe 01       	movw	r30, r28
    26fc:	ee 0f       	add	r30, r30
    26fe:	ff 1f       	adc	r31, r31
    2700:	e2 50       	subi	r30, 0x02	; 2
    2702:	f9 4f       	sbci	r31, 0xF9	; 249
    2704:	20 81       	ld	r18, Z
    2706:	31 81       	ldd	r19, Z+1	; 0x01
    2708:	23 2b       	or	r18, r19
    270a:	79 f4       	brne	.+30     	; 0x272a <_ZN5Robot14RegisterDeviceER7ISensor+0x42>
    270c:	8c 01       	movw	r16, r24
		if(sensor.begin()){
    270e:	ed 91       	ld	r30, X+
    2710:	fc 91       	ld	r31, X
    2712:	02 80       	ldd	r0, Z+2	; 0x02
    2714:	f3 81       	ldd	r31, Z+3	; 0x03
    2716:	e0 2d       	mov	r30, r0
    2718:	19 95       	eicall
    271a:	88 23       	and	r24, r24
    271c:	31 f0       	breq	.+12     	; 0x272a <_ZN5Robot14RegisterDeviceER7ISensor+0x42>
			devices[id] = &sensor; //TODO error handling
    271e:	cc 0f       	add	r28, r28
    2720:	dd 1f       	adc	r29, r29
    2722:	c2 50       	subi	r28, 0x02	; 2
    2724:	d9 4f       	sbci	r29, 0xF9	; 249
    2726:	19 83       	std	Y+1, r17	; 0x01
    2728:	08 83       	st	Y, r16
		}
	}else{
		//TODO id collisions
	}
}
    272a:	df 91       	pop	r29
    272c:	cf 91       	pop	r28
    272e:	1f 91       	pop	r17
    2730:	0f 91       	pop	r16
    2732:	08 95       	ret

00002734 <_ZN5Robot15RegisterDevicesEv>:

DigitalSensor BtnTest(0, TestBtnDDR, TestBtnPort, TestBtnPinPort, TestBtnPin);
ImuSensor Imu(1);

bool Robot::RegisterDevices(){
	RegisterDevice(BtnTest); //TODO return if successful
    2734:	86 ef       	ldi	r24, 0xF6	; 246
    2736:	96 e0       	ldi	r25, 0x06	; 6
    2738:	d7 df       	rcall	.-82     	; 0x26e8 <_ZN5Robot14RegisterDeviceER7ISensor>
	RegisterDevice(Imu);
    273a:	87 ee       	ldi	r24, 0xE7	; 231
    273c:	96 e0       	ldi	r25, 0x06	; 6
    273e:	d4 df       	rcall	.-88     	; 0x26e8 <_ZN5Robot14RegisterDeviceER7ISensor>
	
	return true;
}
    2740:	81 e0       	ldi	r24, 0x01	; 1
    2742:	08 95       	ret

00002744 <_ZN5Robot5beginEv>:
bool Robot::ReadTestBtn(){
	return !((TestBtnPinPort & TestBtnPin) > 0);
}

bool Robot::begin(){
	LedDDR |= LedPin;
    2744:	27 9a       	sbi	0x04, 7	; 4
	return RegisterDevices();
    2746:	f6 cf       	rjmp	.-20     	; 0x2734 <_ZN5Robot15RegisterDevicesEv>
}
    2748:	08 95       	ret

0000274a <_GLOBAL__sub_I__ZN5Robot7devicesE>:
	
	virtual void Update(const uint8_t* data, uint8_t len) = 0;
	virtual bool begin() = 0;
	
protected:
	IDevice(uint8_t ID) : id(ID){
    274a:	e6 ef       	ldi	r30, 0xF6	; 246
    274c:	f6 e0       	ldi	r31, 0x06	; 6
    274e:	12 82       	std	Z+2, r1	; 0x02
				//}
			}
		}
	
	protected:
		ISensor(uint8_t ID, uint8_t type) : IDevice(ID), sensorType(type) {
    2750:	81 e0       	ldi	r24, 0x01	; 1
    2752:	83 83       	std	Z+3, r24	; 0x03

#include "../ISensor.h"

class DigitalSensor : public ISensor{
public:
	DigitalSensor(uint8_t ID, Register& DDRPort, Register& PortPort, Register& PinPort, uint8_t Pin, bool Inversed = true) : ISensor(ID, SENSOR_TYPE_DIGITAL), pin(Pin), pinPort(&PinPort), inversed(Inversed) {
    2754:	22 ed       	ldi	r18, 0xD2	; 210
    2756:	32 e0       	ldi	r19, 0x02	; 2
    2758:	31 83       	std	Z+1, r19	; 0x01
    275a:	20 83       	st	Z, r18
    275c:	84 83       	std	Z+4, r24	; 0x04
    275e:	2f e2       	ldi	r18, 0x2F	; 47
    2760:	30 e0       	ldi	r19, 0x00	; 0
    2762:	36 83       	std	Z+6, r19	; 0x06
    2764:	25 83       	std	Z+5, r18	; 0x05
    2766:	87 83       	std	Z+7, r24	; 0x07
		DDRPort &= ~pin; //Enable input
    2768:	80 98       	cbi	0x10, 0	; 16
		PortPort |= pin; //Enable pullup
    276a:	88 9a       	sbi	0x11, 0	; 17
#include <stddef.h>

IDevice* Robot::devices[NUM_DEVICES];

DigitalSensor BtnTest(0, TestBtnDDR, TestBtnPort, TestBtnPinPort, TestBtnPin);
ImuSensor Imu(1);
    276c:	61 e0       	ldi	r22, 0x01	; 1
    276e:	87 ee       	ldi	r24, 0xE7	; 231
    2770:	96 e0       	ldi	r25, 0x06	; 6
    2772:	03 c1       	rjmp	.+518    	; 0x297a <_ZN9ImuSensorC1Eh>
    2774:	08 95       	ret

00002776 <_ZN9ImuSensor14IsValidRequestEPKhh>:
						len = UpdateRequested(EtherComm::buffer + /*4*/3);
						EtherComm::SendCommand(CMD_UpdateDevice, len +  /*2*/1);
					}
				//}
			}
		}
    2776:	81 e0       	ldi	r24, 0x01	; 1
    2778:	41 11       	cpse	r20, r1
    277a:	80 e0       	ldi	r24, 0x00	; 0
    277c:	08 95       	ret

0000277e <_ZN9ImuSensor5beginEv>:
ImuSensor::ImuSensor(uint8_t ID) : ISensor(ID, SENSOR_TYPE_DIGITAL), imu(55, 0x28) {
	
}

bool ImuSensor::begin(){
	return imu.begin();
    277e:	6c e0       	ldi	r22, 0x0C	; 12
    2780:	04 96       	adiw	r24, 0x04	; 4
    2782:	0c 94 3a 02 	jmp	0x474	; 0x474 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>
}
    2786:	08 95       	ret

00002788 <_ZN9ImuSensor15UpdateRequestedEPh>:
	*buffer++ = *val++;
}

AdafruitImu::Vector<3> vector;

uint8_t ImuSensor::UpdateRequested(uint8_t* buffer){
    2788:	cf 92       	push	r12
    278a:	df 92       	push	r13
    278c:	ef 92       	push	r14
    278e:	ff 92       	push	r15
    2790:	0f 93       	push	r16
    2792:	1f 93       	push	r17
    2794:	cf 93       	push	r28
    2796:	df 93       	push	r29
    2798:	cd b7       	in	r28, 0x3d	; 61
    279a:	de b7       	in	r29, 0x3e	; 62
    279c:	e0 97       	sbiw	r28, 0x30	; 48
    279e:	0f b6       	in	r0, 0x3f	; 63
    27a0:	f8 94       	cli
    27a2:	de bf       	out	0x3e, r29	; 62
    27a4:	0f be       	out	0x3f, r0	; 63
    27a6:	cd bf       	out	0x3d, r28	; 61
    27a8:	8b 01       	movw	r16, r22
	buffer[0] = 0b01111111;
    27aa:	2f e7       	ldi	r18, 0x7F	; 127
    27ac:	db 01       	movw	r26, r22
    27ae:	2c 93       	st	X, r18
	buffer[1] = imu.getTemp();
    27b0:	04 96       	adiw	r24, 0x04	; 4
    27b2:	6c 01       	movw	r12, r24
    27b4:	0e 94 a7 02 	call	0x54e	; 0x54e <_ZN15Adafruit_BNO0557getTempEv>
    27b8:	f8 01       	movw	r30, r16
    27ba:	81 83       	std	Z+1, r24	; 0x01
	
	vector = imu.getVector(Adafruit_BNO055::VECTOR_EULER);
    27bc:	4a e1       	ldi	r20, 0x1A	; 26
    27be:	b6 01       	movw	r22, r12
    27c0:	ce 01       	movw	r24, r28
    27c2:	0d 96       	adiw	r24, 0x0d	; 13
    27c4:	0e 94 fd 02 	call	0x5fa	; 0x5fa <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
    27c8:	fe 01       	movw	r30, r28
    27ca:	3d 96       	adiw	r30, 0x0d	; 13
    27cc:	0f 2e       	mov	r0, r31
    27ce:	fe ef       	ldi	r31, 0xFE	; 254
    27d0:	ef 2e       	mov	r14, r31
    27d2:	f8 e0       	ldi	r31, 0x08	; 8
    27d4:	ff 2e       	mov	r15, r31
    27d6:	f0 2d       	mov	r31, r0
    27d8:	ce 01       	movw	r24, r28
    27da:	49 96       	adiw	r24, 0x19	; 25
    27dc:	d7 01       	movw	r26, r14
		}

		Vector& operator=(const Vector& v)
		{
			for (int x = 0; x < N; x++ )
			p_vec[x] = v.p_vec[x];
    27de:	41 91       	ld	r20, Z+
    27e0:	51 91       	ld	r21, Z+
    27e2:	61 91       	ld	r22, Z+
    27e4:	71 91       	ld	r23, Z+
    27e6:	4d 93       	st	X+, r20
    27e8:	5d 93       	st	X+, r21
    27ea:	6d 93       	st	X+, r22
    27ec:	7d 93       	st	X+, r23
			return ret;
		}

		Vector& operator=(const Vector& v)
		{
			for (int x = 0; x < N; x++ )
    27ee:	e8 17       	cp	r30, r24
    27f0:	f9 07       	cpc	r31, r25
    27f2:	a9 f7       	brne	.-22     	; 0x27de <_ZN9ImuSensor15UpdateRequestedEPh+0x56>
	saveFloat(vector.x(), buffer + 2);
    27f4:	ee ef       	ldi	r30, 0xFE	; 254
    27f6:	f8 e0       	ldi	r31, 0x08	; 8
    27f8:	20 81       	ld	r18, Z
    27fa:	51 81       	ldd	r21, Z+1	; 0x01
    27fc:	42 81       	ldd	r20, Z+2	; 0x02
    27fe:	33 81       	ldd	r19, Z+3	; 0x03
    2800:	82 2f       	mov	r24, r18
    2802:	95 2f       	mov	r25, r21
    2804:	a4 2f       	mov	r26, r20
    2806:	b3 2f       	mov	r27, r19
    2808:	8d a3       	std	Y+37, r24	; 0x25
    280a:	9e a3       	std	Y+38, r25	; 0x26
    280c:	af a3       	std	Y+39, r26	; 0x27
    280e:	b8 a7       	std	Y+40, r27	; 0x28
	return imu.begin();
}

static void saveFloat(float f, uint8_t* buffer){
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    2810:	d8 01       	movw	r26, r16
    2812:	12 96       	adiw	r26, 0x02	; 2
    2814:	2c 93       	st	X, r18
    2816:	12 97       	sbiw	r26, 0x02	; 2
	*buffer++ = *val++;
    2818:	8e a1       	ldd	r24, Y+38	; 0x26
    281a:	13 96       	adiw	r26, 0x03	; 3
    281c:	8c 93       	st	X, r24
    281e:	13 97       	sbiw	r26, 0x03	; 3
	*buffer++ = *val++;
    2820:	8f a1       	ldd	r24, Y+39	; 0x27
    2822:	14 96       	adiw	r26, 0x04	; 4
    2824:	8c 93       	st	X, r24
    2826:	14 97       	sbiw	r26, 0x04	; 4
	*buffer++ = *val++;
    2828:	88 a5       	ldd	r24, Y+40	; 0x28
    282a:	15 96       	adiw	r26, 0x05	; 5
    282c:	8c 93       	st	X, r24
    282e:	24 81       	ldd	r18, Z+4	; 0x04
    2830:	55 81       	ldd	r21, Z+5	; 0x05
    2832:	46 81       	ldd	r20, Z+6	; 0x06
    2834:	37 81       	ldd	r19, Z+7	; 0x07
    2836:	82 2f       	mov	r24, r18
    2838:	95 2f       	mov	r25, r21
    283a:	a4 2f       	mov	r26, r20
    283c:	b3 2f       	mov	r27, r19
    283e:	89 a7       	std	Y+41, r24	; 0x29
    2840:	9a a7       	std	Y+42, r25	; 0x2a
    2842:	ab a7       	std	Y+43, r26	; 0x2b
    2844:	bc a7       	std	Y+44, r27	; 0x2c
	return imu.begin();
}

static void saveFloat(float f, uint8_t* buffer){
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    2846:	d8 01       	movw	r26, r16
    2848:	16 96       	adiw	r26, 0x06	; 6
    284a:	2c 93       	st	X, r18
    284c:	16 97       	sbiw	r26, 0x06	; 6
	*buffer++ = *val++;
    284e:	8a a5       	ldd	r24, Y+42	; 0x2a
    2850:	17 96       	adiw	r26, 0x07	; 7
    2852:	8c 93       	st	X, r24
    2854:	17 97       	sbiw	r26, 0x07	; 7
	*buffer++ = *val++;
    2856:	8b a5       	ldd	r24, Y+43	; 0x2b
    2858:	18 96       	adiw	r26, 0x08	; 8
    285a:	8c 93       	st	X, r24
    285c:	18 97       	sbiw	r26, 0x08	; 8
	*buffer++ = *val++;
    285e:	8c a5       	ldd	r24, Y+44	; 0x2c
    2860:	19 96       	adiw	r26, 0x09	; 9
    2862:	8c 93       	st	X, r24
    2864:	20 85       	ldd	r18, Z+8	; 0x08
    2866:	51 85       	ldd	r21, Z+9	; 0x09
    2868:	42 85       	ldd	r20, Z+10	; 0x0a
    286a:	33 85       	ldd	r19, Z+11	; 0x0b
    286c:	82 2f       	mov	r24, r18
    286e:	95 2f       	mov	r25, r21
    2870:	a4 2f       	mov	r26, r20
    2872:	b3 2f       	mov	r27, r19
    2874:	8d a7       	std	Y+45, r24	; 0x2d
    2876:	9e a7       	std	Y+46, r25	; 0x2e
    2878:	af a7       	std	Y+47, r26	; 0x2f
    287a:	b8 ab       	std	Y+48, r27	; 0x30
	return imu.begin();
}

static void saveFloat(float f, uint8_t* buffer){
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    287c:	f8 01       	movw	r30, r16
    287e:	22 87       	std	Z+10, r18	; 0x0a
	*buffer++ = *val++;
    2880:	8e a5       	ldd	r24, Y+46	; 0x2e
    2882:	83 87       	std	Z+11, r24	; 0x0b
	*buffer++ = *val++;
    2884:	8f a5       	ldd	r24, Y+47	; 0x2f
    2886:	84 87       	std	Z+12, r24	; 0x0c
	*buffer++ = *val++;
    2888:	88 a9       	ldd	r24, Y+48	; 0x30
    288a:	85 87       	std	Z+13, r24	; 0x0d
	vector = imu.getVector(Adafruit_BNO055::VECTOR_EULER);
	saveFloat(vector.x(), buffer + 2);
	saveFloat(vector.y(), buffer + 6);
	saveFloat(vector.z(), buffer + 10);
	
	vector = imu.getVector(Adafruit_BNO055::VECTOR_ACCELEROMETER );
    288c:	48 e0       	ldi	r20, 0x08	; 8
    288e:	b6 01       	movw	r22, r12
    2890:	ce 01       	movw	r24, r28
    2892:	01 96       	adiw	r24, 0x01	; 1
    2894:	0e 94 fd 02 	call	0x5fa	; 0x5fa <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
    2898:	ae 01       	movw	r20, r28
    289a:	4f 5f       	subi	r20, 0xFF	; 255
    289c:	5f 4f       	sbci	r21, 0xFF	; 255
    289e:	9e 01       	movw	r18, r28
    28a0:	23 5f       	subi	r18, 0xF3	; 243
    28a2:	3f 4f       	sbci	r19, 0xFF	; 255
			p_vec[x] = v.p_vec[x];
    28a4:	fa 01       	movw	r30, r20
    28a6:	81 91       	ld	r24, Z+
    28a8:	91 91       	ld	r25, Z+
    28aa:	a1 91       	ld	r26, Z+
    28ac:	b1 91       	ld	r27, Z+
    28ae:	af 01       	movw	r20, r30
    28b0:	f7 01       	movw	r30, r14
    28b2:	81 93       	st	Z+, r24
    28b4:	91 93       	st	Z+, r25
    28b6:	a1 93       	st	Z+, r26
    28b8:	b1 93       	st	Z+, r27
    28ba:	7f 01       	movw	r14, r30
			return ret;
		}

		Vector& operator=(const Vector& v)
		{
			for (int x = 0; x < N; x++ )
    28bc:	42 17       	cp	r20, r18
    28be:	53 07       	cpc	r21, r19
    28c0:	89 f7       	brne	.-30     	; 0x28a4 <_ZN9ImuSensor15UpdateRequestedEPh+0x11c>
	saveFloat(vector.x(), buffer + 14);
    28c2:	ee ef       	ldi	r30, 0xFE	; 254
    28c4:	f8 e0       	ldi	r31, 0x08	; 8
    28c6:	20 81       	ld	r18, Z
    28c8:	51 81       	ldd	r21, Z+1	; 0x01
    28ca:	42 81       	ldd	r20, Z+2	; 0x02
    28cc:	33 81       	ldd	r19, Z+3	; 0x03
    28ce:	82 2f       	mov	r24, r18
    28d0:	95 2f       	mov	r25, r21
    28d2:	a4 2f       	mov	r26, r20
    28d4:	b3 2f       	mov	r27, r19
    28d6:	89 8f       	std	Y+25, r24	; 0x19
    28d8:	9a 8f       	std	Y+26, r25	; 0x1a
    28da:	ab 8f       	std	Y+27, r26	; 0x1b
    28dc:	bc 8f       	std	Y+28, r27	; 0x1c
	return imu.begin();
}

static void saveFloat(float f, uint8_t* buffer){
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    28de:	d8 01       	movw	r26, r16
    28e0:	1e 96       	adiw	r26, 0x0e	; 14
    28e2:	2c 93       	st	X, r18
    28e4:	1e 97       	sbiw	r26, 0x0e	; 14
	*buffer++ = *val++;
    28e6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    28e8:	1f 96       	adiw	r26, 0x0f	; 15
    28ea:	8c 93       	st	X, r24
    28ec:	1f 97       	sbiw	r26, 0x0f	; 15
	*buffer++ = *val++;
    28ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28f0:	50 96       	adiw	r26, 0x10	; 16
    28f2:	8c 93       	st	X, r24
    28f4:	50 97       	sbiw	r26, 0x10	; 16
	*buffer++ = *val++;
    28f6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    28f8:	51 96       	adiw	r26, 0x11	; 17
    28fa:	8c 93       	st	X, r24
    28fc:	24 81       	ldd	r18, Z+4	; 0x04
    28fe:	55 81       	ldd	r21, Z+5	; 0x05
    2900:	46 81       	ldd	r20, Z+6	; 0x06
    2902:	37 81       	ldd	r19, Z+7	; 0x07
    2904:	82 2f       	mov	r24, r18
    2906:	95 2f       	mov	r25, r21
    2908:	a4 2f       	mov	r26, r20
    290a:	b3 2f       	mov	r27, r19
    290c:	8d 8f       	std	Y+29, r24	; 0x1d
    290e:	9e 8f       	std	Y+30, r25	; 0x1e
    2910:	af 8f       	std	Y+31, r26	; 0x1f
    2912:	b8 a3       	std	Y+32, r27	; 0x20
	return imu.begin();
}

static void saveFloat(float f, uint8_t* buffer){
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    2914:	d8 01       	movw	r26, r16
    2916:	52 96       	adiw	r26, 0x12	; 18
    2918:	2c 93       	st	X, r18
    291a:	52 97       	sbiw	r26, 0x12	; 18
	*buffer++ = *val++;
    291c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    291e:	53 96       	adiw	r26, 0x13	; 19
    2920:	8c 93       	st	X, r24
    2922:	53 97       	sbiw	r26, 0x13	; 19
	*buffer++ = *val++;
    2924:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2926:	54 96       	adiw	r26, 0x14	; 20
    2928:	8c 93       	st	X, r24
    292a:	54 97       	sbiw	r26, 0x14	; 20
	*buffer++ = *val++;
    292c:	88 a1       	ldd	r24, Y+32	; 0x20
    292e:	55 96       	adiw	r26, 0x15	; 21
    2930:	8c 93       	st	X, r24
    2932:	20 85       	ldd	r18, Z+8	; 0x08
    2934:	51 85       	ldd	r21, Z+9	; 0x09
    2936:	42 85       	ldd	r20, Z+10	; 0x0a
    2938:	33 85       	ldd	r19, Z+11	; 0x0b
    293a:	82 2f       	mov	r24, r18
    293c:	95 2f       	mov	r25, r21
    293e:	a4 2f       	mov	r26, r20
    2940:	b3 2f       	mov	r27, r19
    2942:	89 a3       	std	Y+33, r24	; 0x21
    2944:	9a a3       	std	Y+34, r25	; 0x22
    2946:	ab a3       	std	Y+35, r26	; 0x23
    2948:	bc a3       	std	Y+36, r27	; 0x24
	return imu.begin();
}

static void saveFloat(float f, uint8_t* buffer){
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    294a:	f8 01       	movw	r30, r16
    294c:	26 8b       	std	Z+22, r18	; 0x16
	*buffer++ = *val++;
    294e:	8a a1       	ldd	r24, Y+34	; 0x22
    2950:	87 8b       	std	Z+23, r24	; 0x17
	*buffer++ = *val++;
    2952:	8b a1       	ldd	r24, Y+35	; 0x23
    2954:	80 8f       	std	Z+24, r24	; 0x18
	*buffer++ = *val++;
    2956:	8c a1       	ldd	r24, Y+36	; 0x24
    2958:	81 8f       	std	Z+25, r24	; 0x19
	saveFloat(vector.x(), buffer + 14);
	saveFloat(vector.y(), buffer + 18);
	saveFloat(vector.z(), buffer + 22);
	
	return 1 + 1 + 6*4;
    295a:	8a e1       	ldi	r24, 0x1A	; 26
    295c:	e0 96       	adiw	r28, 0x30	; 48
    295e:	0f b6       	in	r0, 0x3f	; 63
    2960:	f8 94       	cli
    2962:	de bf       	out	0x3e, r29	; 62
    2964:	0f be       	out	0x3f, r0	; 63
    2966:	cd bf       	out	0x3d, r28	; 61
    2968:	df 91       	pop	r29
    296a:	cf 91       	pop	r28
    296c:	1f 91       	pop	r17
    296e:	0f 91       	pop	r16
    2970:	ff 90       	pop	r15
    2972:	ef 90       	pop	r14
    2974:	df 90       	pop	r13
    2976:	cf 90       	pop	r12
    2978:	08 95       	ret

0000297a <_ZN9ImuSensorC1Eh>:

#include "ImuSensor.h"
//#include "../BNO055/utility/vector.h"
//Adafruit_BNO055 ImuSensor::imu;

ImuSensor::ImuSensor(uint8_t ID) : ISensor(ID, SENSOR_TYPE_DIGITAL), imu(55, 0x28) {
    297a:	0f 93       	push	r16
    297c:	1f 93       	push	r17
	
	virtual void Update(const uint8_t* data, uint8_t len) = 0;
	virtual bool begin() = 0;
	
protected:
	IDevice(uint8_t ID) : id(ID){
    297e:	fc 01       	movw	r30, r24
    2980:	62 83       	std	Z+2, r22	; 0x02
	
	protected:
		ISensor(uint8_t ID, uint8_t type) : IDevice(ID), sensorType(type) {
    2982:	21 e0       	ldi	r18, 0x01	; 1
    2984:	23 83       	std	Z+3, r18	; 0x03
    2986:	2e ed       	ldi	r18, 0xDE	; 222
    2988:	32 e0       	ldi	r19, 0x02	; 2
    298a:	31 83       	std	Z+1, r19	; 0x01
    298c:	20 83       	st	Z, r18
    298e:	0d e2       	ldi	r16, 0x2D	; 45
    2990:	16 e0       	ldi	r17, 0x06	; 6
    2992:	28 e2       	ldi	r18, 0x28	; 40
    2994:	47 e3       	ldi	r20, 0x37	; 55
    2996:	50 e0       	ldi	r21, 0x00	; 0
    2998:	60 e0       	ldi	r22, 0x00	; 0
    299a:	70 e0       	ldi	r23, 0x00	; 0
    299c:	04 96       	adiw	r24, 0x04	; 4
    299e:	0e 94 c5 01 	call	0x38a	; 0x38a <_ZN15Adafruit_BNO055C1ElhP7TwoWire>
	
}
    29a2:	1f 91       	pop	r17
    29a4:	0f 91       	pop	r16
    29a6:	08 95       	ret

000029a8 <_GLOBAL__sub_I__ZN9ImuSensorC2Eh>:
	template <uint8_t N> class Vector
	{
		public:
		Vector()
		{
			memset(p_vec, 0, sizeof(double)*N);
    29a8:	8c e0       	ldi	r24, 0x0C	; 12
    29aa:	ee ef       	ldi	r30, 0xFE	; 254
    29ac:	f8 e0       	ldi	r31, 0x08	; 8
    29ae:	df 01       	movw	r26, r30
    29b0:	1d 92       	st	X+, r1
    29b2:	8a 95       	dec	r24
    29b4:	e9 f7       	brne	.-6      	; 0x29b0 <_GLOBAL__sub_I__ZN9ImuSensorC2Eh+0x8>
    29b6:	08 95       	ret

000029b8 <_GLOBAL__sub_I_bno>:
	setup();
	
	while(true){
		loop();
	}
    29b8:	0f 93       	push	r16
    29ba:	1f 93       	push	r17
/* Set the delay between fresh samples */
#define BNO055_SAMPLERATE_DELAY_MS 100

// Check I2C device address and correct line below (by default address is 0x29 or 0x28)
//                                   id, address
Adafruit_BNO055 bno = Adafruit_BNO055(55, 0x28);
    29bc:	0d e2       	ldi	r16, 0x2D	; 45
    29be:	16 e0       	ldi	r17, 0x06	; 6
    29c0:	28 e2       	ldi	r18, 0x28	; 40
    29c2:	47 e3       	ldi	r20, 0x37	; 55
    29c4:	50 e0       	ldi	r21, 0x00	; 0
    29c6:	60 e0       	ldi	r22, 0x00	; 0
    29c8:	70 e0       	ldi	r23, 0x00	; 0
    29ca:	8a e0       	ldi	r24, 0x0A	; 10
    29cc:	99 e0       	ldi	r25, 0x09	; 9
    29ce:	0e 94 c5 01 	call	0x38a	; 0x38a <_ZN15Adafruit_BNO055C1ElhP7TwoWire>
	setup();
	
	while(true){
		loop();
	}
    29d2:	1f 91       	pop	r17
    29d4:	0f 91       	pop	r16
    29d6:	08 95       	ret

000029d8 <_ZN5Print5writeEPKhj>:
}

uint16_t Print::print(char c)
{
  return write(c);
}
    29d8:	cf 92       	push	r12
    29da:	df 92       	push	r13
    29dc:	ef 92       	push	r14
    29de:	ff 92       	push	r15
    29e0:	0f 93       	push	r16
    29e2:	1f 93       	push	r17
    29e4:	cf 93       	push	r28
    29e6:	df 93       	push	r29
    29e8:	41 15       	cp	r20, r1
    29ea:	51 05       	cpc	r21, r1
    29ec:	c1 f0       	breq	.+48     	; 0x2a1e <_ZN5Print5writeEPKhj+0x46>
    29ee:	6a 01       	movw	r12, r20
    29f0:	8c 01       	movw	r16, r24
    29f2:	e6 2e       	mov	r14, r22
    29f4:	f7 2e       	mov	r15, r23
    29f6:	c0 e0       	ldi	r28, 0x00	; 0
    29f8:	d0 e0       	ldi	r29, 0x00	; 0
    29fa:	d7 01       	movw	r26, r14
    29fc:	6d 91       	ld	r22, X+
    29fe:	7d 01       	movw	r14, r26
    2a00:	d8 01       	movw	r26, r16
    2a02:	ed 91       	ld	r30, X+
    2a04:	fc 91       	ld	r31, X
    2a06:	01 90       	ld	r0, Z+
    2a08:	f0 81       	ld	r31, Z
    2a0a:	e0 2d       	mov	r30, r0
    2a0c:	c8 01       	movw	r24, r16
    2a0e:	19 95       	eicall
    2a10:	89 2b       	or	r24, r25
    2a12:	39 f0       	breq	.+14     	; 0x2a22 <_ZN5Print5writeEPKhj+0x4a>
    2a14:	21 96       	adiw	r28, 0x01	; 1
    2a16:	cc 16       	cp	r12, r28
    2a18:	dd 06       	cpc	r13, r29
    2a1a:	79 f7       	brne	.-34     	; 0x29fa <_ZN5Print5writeEPKhj+0x22>
    2a1c:	02 c0       	rjmp	.+4      	; 0x2a22 <_ZN5Print5writeEPKhj+0x4a>
    2a1e:	c0 e0       	ldi	r28, 0x00	; 0
    2a20:	d0 e0       	ldi	r29, 0x00	; 0
    2a22:	ce 01       	movw	r24, r28
    2a24:	df 91       	pop	r29
    2a26:	cf 91       	pop	r28
    2a28:	1f 91       	pop	r17
    2a2a:	0f 91       	pop	r16
    2a2c:	ff 90       	pop	r15
    2a2e:	ef 90       	pop	r14
    2a30:	df 90       	pop	r13
    2a32:	cf 90       	pop	r12
    2a34:	08 95       	ret

00002a36 <_ZN5Print5printEPKc>:
    2a36:	61 15       	cp	r22, r1
    2a38:	71 05       	cpc	r23, r1
    2a3a:	81 f0       	breq	.+32     	; 0x2a5c <_ZN5Print5printEPKc+0x26>
    2a3c:	fb 01       	movw	r30, r22
    2a3e:	01 90       	ld	r0, Z+
    2a40:	00 20       	and	r0, r0
    2a42:	e9 f7       	brne	.-6      	; 0x2a3e <_ZN5Print5printEPKc+0x8>
    2a44:	31 97       	sbiw	r30, 0x01	; 1
    2a46:	af 01       	movw	r20, r30
    2a48:	46 1b       	sub	r20, r22
    2a4a:	57 0b       	sbc	r21, r23
    2a4c:	dc 01       	movw	r26, r24
    2a4e:	ed 91       	ld	r30, X+
    2a50:	fc 91       	ld	r31, X
    2a52:	02 80       	ldd	r0, Z+2	; 0x02
    2a54:	f3 81       	ldd	r31, Z+3	; 0x03
    2a56:	e0 2d       	mov	r30, r0
    2a58:	19 95       	eicall
    2a5a:	08 95       	ret
    2a5c:	80 e0       	ldi	r24, 0x00	; 0
    2a5e:	90 e0       	ldi	r25, 0x00	; 0
    2a60:	08 95       	ret

00002a62 <_ZN5Print7printlnEv>:
  //void clearWriteError() { setWriteError(0); }
  
  virtual uint16_t write(uint8_t) = 0;
  uint16_t write(const char *str) {
	  if (str == NULL) return 0;
	  return write((const uint8_t *)str, strlen(str));
    2a62:	dc 01       	movw	r26, r24
    2a64:	ed 91       	ld	r30, X+
    2a66:	fc 91       	ld	r31, X
    2a68:	02 80       	ldd	r0, Z+2	; 0x02
    2a6a:	f3 81       	ldd	r31, Z+3	; 0x03
    2a6c:	e0 2d       	mov	r30, r0
    2a6e:	42 e0       	ldi	r20, 0x02	; 2
    2a70:	50 e0       	ldi	r21, 0x00	; 0
    2a72:	66 ee       	ldi	r22, 0xE6	; 230
    2a74:	72 e0       	ldi	r23, 0x02	; 2
    2a76:	19 95       	eicall
}
*/
uint16_t Print::println(void)
{
  return write("\r\n");
}
    2a78:	08 95       	ret

00002a7a <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}
*/
uint16_t Print::println(const char c[])
{
    2a7a:	0f 93       	push	r16
    2a7c:	1f 93       	push	r17
    2a7e:	cf 93       	push	r28
    2a80:	df 93       	push	r29
    2a82:	ec 01       	movw	r28, r24
  uint16_t n = print(c);
    2a84:	d8 df       	rcall	.-80     	; 0x2a36 <_ZN5Print5printEPKc>
    2a86:	8c 01       	movw	r16, r24
  n += println();
    2a88:	ce 01       	movw	r24, r28
    2a8a:	eb df       	rcall	.-42     	; 0x2a62 <_ZN5Print7printlnEv>
  return n;
}
    2a8c:	80 0f       	add	r24, r16
    2a8e:	91 1f       	adc	r25, r17
    2a90:	df 91       	pop	r29
    2a92:	cf 91       	pop	r28
    2a94:	1f 91       	pop	r17
    2a96:	0f 91       	pop	r16
    2a98:	08 95       	ret

00002a9a <__divsf3>:
    2a9a:	0c d0       	rcall	.+24     	; 0x2ab4 <__divsf3x>
    2a9c:	ba c0       	rjmp	.+372    	; 0x2c12 <__fp_round>
    2a9e:	b2 d0       	rcall	.+356    	; 0x2c04 <__fp_pscB>
    2aa0:	40 f0       	brcs	.+16     	; 0x2ab2 <__divsf3+0x18>
    2aa2:	a9 d0       	rcall	.+338    	; 0x2bf6 <__fp_pscA>
    2aa4:	30 f0       	brcs	.+12     	; 0x2ab2 <__divsf3+0x18>
    2aa6:	21 f4       	brne	.+8      	; 0x2ab0 <__divsf3+0x16>
    2aa8:	5f 3f       	cpi	r21, 0xFF	; 255
    2aaa:	19 f0       	breq	.+6      	; 0x2ab2 <__divsf3+0x18>
    2aac:	9b c0       	rjmp	.+310    	; 0x2be4 <__fp_inf>
    2aae:	51 11       	cpse	r21, r1
    2ab0:	e4 c0       	rjmp	.+456    	; 0x2c7a <__fp_szero>
    2ab2:	9e c0       	rjmp	.+316    	; 0x2bf0 <__fp_nan>

00002ab4 <__divsf3x>:
    2ab4:	bf d0       	rcall	.+382    	; 0x2c34 <__fp_split3>
    2ab6:	98 f3       	brcs	.-26     	; 0x2a9e <__divsf3+0x4>

00002ab8 <__divsf3_pse>:
    2ab8:	99 23       	and	r25, r25
    2aba:	c9 f3       	breq	.-14     	; 0x2aae <__divsf3+0x14>
    2abc:	55 23       	and	r21, r21
    2abe:	b1 f3       	breq	.-20     	; 0x2aac <__divsf3+0x12>
    2ac0:	95 1b       	sub	r25, r21
    2ac2:	55 0b       	sbc	r21, r21
    2ac4:	bb 27       	eor	r27, r27
    2ac6:	aa 27       	eor	r26, r26
    2ac8:	62 17       	cp	r22, r18
    2aca:	73 07       	cpc	r23, r19
    2acc:	84 07       	cpc	r24, r20
    2ace:	38 f0       	brcs	.+14     	; 0x2ade <__divsf3_pse+0x26>
    2ad0:	9f 5f       	subi	r25, 0xFF	; 255
    2ad2:	5f 4f       	sbci	r21, 0xFF	; 255
    2ad4:	22 0f       	add	r18, r18
    2ad6:	33 1f       	adc	r19, r19
    2ad8:	44 1f       	adc	r20, r20
    2ada:	aa 1f       	adc	r26, r26
    2adc:	a9 f3       	breq	.-22     	; 0x2ac8 <__divsf3_pse+0x10>
    2ade:	33 d0       	rcall	.+102    	; 0x2b46 <__divsf3_pse+0x8e>
    2ae0:	0e 2e       	mov	r0, r30
    2ae2:	3a f0       	brmi	.+14     	; 0x2af2 <__divsf3_pse+0x3a>
    2ae4:	e0 e8       	ldi	r30, 0x80	; 128
    2ae6:	30 d0       	rcall	.+96     	; 0x2b48 <__divsf3_pse+0x90>
    2ae8:	91 50       	subi	r25, 0x01	; 1
    2aea:	50 40       	sbci	r21, 0x00	; 0
    2aec:	e6 95       	lsr	r30
    2aee:	00 1c       	adc	r0, r0
    2af0:	ca f7       	brpl	.-14     	; 0x2ae4 <__divsf3_pse+0x2c>
    2af2:	29 d0       	rcall	.+82     	; 0x2b46 <__divsf3_pse+0x8e>
    2af4:	fe 2f       	mov	r31, r30
    2af6:	27 d0       	rcall	.+78     	; 0x2b46 <__divsf3_pse+0x8e>
    2af8:	66 0f       	add	r22, r22
    2afa:	77 1f       	adc	r23, r23
    2afc:	88 1f       	adc	r24, r24
    2afe:	bb 1f       	adc	r27, r27
    2b00:	26 17       	cp	r18, r22
    2b02:	37 07       	cpc	r19, r23
    2b04:	48 07       	cpc	r20, r24
    2b06:	ab 07       	cpc	r26, r27
    2b08:	b0 e8       	ldi	r27, 0x80	; 128
    2b0a:	09 f0       	breq	.+2      	; 0x2b0e <__divsf3_pse+0x56>
    2b0c:	bb 0b       	sbc	r27, r27
    2b0e:	80 2d       	mov	r24, r0
    2b10:	bf 01       	movw	r22, r30
    2b12:	ff 27       	eor	r31, r31
    2b14:	93 58       	subi	r25, 0x83	; 131
    2b16:	5f 4f       	sbci	r21, 0xFF	; 255
    2b18:	2a f0       	brmi	.+10     	; 0x2b24 <__divsf3_pse+0x6c>
    2b1a:	9e 3f       	cpi	r25, 0xFE	; 254
    2b1c:	51 05       	cpc	r21, r1
    2b1e:	68 f0       	brcs	.+26     	; 0x2b3a <__divsf3_pse+0x82>
    2b20:	61 c0       	rjmp	.+194    	; 0x2be4 <__fp_inf>
    2b22:	ab c0       	rjmp	.+342    	; 0x2c7a <__fp_szero>
    2b24:	5f 3f       	cpi	r21, 0xFF	; 255
    2b26:	ec f3       	brlt	.-6      	; 0x2b22 <__divsf3_pse+0x6a>
    2b28:	98 3e       	cpi	r25, 0xE8	; 232
    2b2a:	dc f3       	brlt	.-10     	; 0x2b22 <__divsf3_pse+0x6a>
    2b2c:	86 95       	lsr	r24
    2b2e:	77 95       	ror	r23
    2b30:	67 95       	ror	r22
    2b32:	b7 95       	ror	r27
    2b34:	f7 95       	ror	r31
    2b36:	9f 5f       	subi	r25, 0xFF	; 255
    2b38:	c9 f7       	brne	.-14     	; 0x2b2c <__divsf3_pse+0x74>
    2b3a:	88 0f       	add	r24, r24
    2b3c:	91 1d       	adc	r25, r1
    2b3e:	96 95       	lsr	r25
    2b40:	87 95       	ror	r24
    2b42:	97 f9       	bld	r25, 7
    2b44:	08 95       	ret
    2b46:	e1 e0       	ldi	r30, 0x01	; 1
    2b48:	66 0f       	add	r22, r22
    2b4a:	77 1f       	adc	r23, r23
    2b4c:	88 1f       	adc	r24, r24
    2b4e:	bb 1f       	adc	r27, r27
    2b50:	62 17       	cp	r22, r18
    2b52:	73 07       	cpc	r23, r19
    2b54:	84 07       	cpc	r24, r20
    2b56:	ba 07       	cpc	r27, r26
    2b58:	20 f0       	brcs	.+8      	; 0x2b62 <__divsf3_pse+0xaa>
    2b5a:	62 1b       	sub	r22, r18
    2b5c:	73 0b       	sbc	r23, r19
    2b5e:	84 0b       	sbc	r24, r20
    2b60:	ba 0b       	sbc	r27, r26
    2b62:	ee 1f       	adc	r30, r30
    2b64:	88 f7       	brcc	.-30     	; 0x2b48 <__divsf3_pse+0x90>
    2b66:	e0 95       	com	r30
    2b68:	08 95       	ret

00002b6a <__floatunsisf>:
    2b6a:	e8 94       	clt
    2b6c:	09 c0       	rjmp	.+18     	; 0x2b80 <__floatsisf+0x12>

00002b6e <__floatsisf>:
    2b6e:	97 fb       	bst	r25, 7
    2b70:	3e f4       	brtc	.+14     	; 0x2b80 <__floatsisf+0x12>
    2b72:	90 95       	com	r25
    2b74:	80 95       	com	r24
    2b76:	70 95       	com	r23
    2b78:	61 95       	neg	r22
    2b7a:	7f 4f       	sbci	r23, 0xFF	; 255
    2b7c:	8f 4f       	sbci	r24, 0xFF	; 255
    2b7e:	9f 4f       	sbci	r25, 0xFF	; 255
    2b80:	99 23       	and	r25, r25
    2b82:	a9 f0       	breq	.+42     	; 0x2bae <__floatsisf+0x40>
    2b84:	f9 2f       	mov	r31, r25
    2b86:	96 e9       	ldi	r25, 0x96	; 150
    2b88:	bb 27       	eor	r27, r27
    2b8a:	93 95       	inc	r25
    2b8c:	f6 95       	lsr	r31
    2b8e:	87 95       	ror	r24
    2b90:	77 95       	ror	r23
    2b92:	67 95       	ror	r22
    2b94:	b7 95       	ror	r27
    2b96:	f1 11       	cpse	r31, r1
    2b98:	f8 cf       	rjmp	.-16     	; 0x2b8a <__floatsisf+0x1c>
    2b9a:	fa f4       	brpl	.+62     	; 0x2bda <__floatsisf+0x6c>
    2b9c:	bb 0f       	add	r27, r27
    2b9e:	11 f4       	brne	.+4      	; 0x2ba4 <__floatsisf+0x36>
    2ba0:	60 ff       	sbrs	r22, 0
    2ba2:	1b c0       	rjmp	.+54     	; 0x2bda <__floatsisf+0x6c>
    2ba4:	6f 5f       	subi	r22, 0xFF	; 255
    2ba6:	7f 4f       	sbci	r23, 0xFF	; 255
    2ba8:	8f 4f       	sbci	r24, 0xFF	; 255
    2baa:	9f 4f       	sbci	r25, 0xFF	; 255
    2bac:	16 c0       	rjmp	.+44     	; 0x2bda <__floatsisf+0x6c>
    2bae:	88 23       	and	r24, r24
    2bb0:	11 f0       	breq	.+4      	; 0x2bb6 <__floatsisf+0x48>
    2bb2:	96 e9       	ldi	r25, 0x96	; 150
    2bb4:	11 c0       	rjmp	.+34     	; 0x2bd8 <__floatsisf+0x6a>
    2bb6:	77 23       	and	r23, r23
    2bb8:	21 f0       	breq	.+8      	; 0x2bc2 <__floatsisf+0x54>
    2bba:	9e e8       	ldi	r25, 0x8E	; 142
    2bbc:	87 2f       	mov	r24, r23
    2bbe:	76 2f       	mov	r23, r22
    2bc0:	05 c0       	rjmp	.+10     	; 0x2bcc <__floatsisf+0x5e>
    2bc2:	66 23       	and	r22, r22
    2bc4:	71 f0       	breq	.+28     	; 0x2be2 <__floatsisf+0x74>
    2bc6:	96 e8       	ldi	r25, 0x86	; 134
    2bc8:	86 2f       	mov	r24, r22
    2bca:	70 e0       	ldi	r23, 0x00	; 0
    2bcc:	60 e0       	ldi	r22, 0x00	; 0
    2bce:	2a f0       	brmi	.+10     	; 0x2bda <__floatsisf+0x6c>
    2bd0:	9a 95       	dec	r25
    2bd2:	66 0f       	add	r22, r22
    2bd4:	77 1f       	adc	r23, r23
    2bd6:	88 1f       	adc	r24, r24
    2bd8:	da f7       	brpl	.-10     	; 0x2bd0 <__floatsisf+0x62>
    2bda:	88 0f       	add	r24, r24
    2bdc:	96 95       	lsr	r25
    2bde:	87 95       	ror	r24
    2be0:	97 f9       	bld	r25, 7
    2be2:	08 95       	ret

00002be4 <__fp_inf>:
    2be4:	97 f9       	bld	r25, 7
    2be6:	9f 67       	ori	r25, 0x7F	; 127
    2be8:	80 e8       	ldi	r24, 0x80	; 128
    2bea:	70 e0       	ldi	r23, 0x00	; 0
    2bec:	60 e0       	ldi	r22, 0x00	; 0
    2bee:	08 95       	ret

00002bf0 <__fp_nan>:
    2bf0:	9f ef       	ldi	r25, 0xFF	; 255
    2bf2:	80 ec       	ldi	r24, 0xC0	; 192
    2bf4:	08 95       	ret

00002bf6 <__fp_pscA>:
    2bf6:	00 24       	eor	r0, r0
    2bf8:	0a 94       	dec	r0
    2bfa:	16 16       	cp	r1, r22
    2bfc:	17 06       	cpc	r1, r23
    2bfe:	18 06       	cpc	r1, r24
    2c00:	09 06       	cpc	r0, r25
    2c02:	08 95       	ret

00002c04 <__fp_pscB>:
    2c04:	00 24       	eor	r0, r0
    2c06:	0a 94       	dec	r0
    2c08:	12 16       	cp	r1, r18
    2c0a:	13 06       	cpc	r1, r19
    2c0c:	14 06       	cpc	r1, r20
    2c0e:	05 06       	cpc	r0, r21
    2c10:	08 95       	ret

00002c12 <__fp_round>:
    2c12:	09 2e       	mov	r0, r25
    2c14:	03 94       	inc	r0
    2c16:	00 0c       	add	r0, r0
    2c18:	11 f4       	brne	.+4      	; 0x2c1e <__fp_round+0xc>
    2c1a:	88 23       	and	r24, r24
    2c1c:	52 f0       	brmi	.+20     	; 0x2c32 <__fp_round+0x20>
    2c1e:	bb 0f       	add	r27, r27
    2c20:	40 f4       	brcc	.+16     	; 0x2c32 <__fp_round+0x20>
    2c22:	bf 2b       	or	r27, r31
    2c24:	11 f4       	brne	.+4      	; 0x2c2a <__fp_round+0x18>
    2c26:	60 ff       	sbrs	r22, 0
    2c28:	04 c0       	rjmp	.+8      	; 0x2c32 <__fp_round+0x20>
    2c2a:	6f 5f       	subi	r22, 0xFF	; 255
    2c2c:	7f 4f       	sbci	r23, 0xFF	; 255
    2c2e:	8f 4f       	sbci	r24, 0xFF	; 255
    2c30:	9f 4f       	sbci	r25, 0xFF	; 255
    2c32:	08 95       	ret

00002c34 <__fp_split3>:
    2c34:	57 fd       	sbrc	r21, 7
    2c36:	90 58       	subi	r25, 0x80	; 128
    2c38:	44 0f       	add	r20, r20
    2c3a:	55 1f       	adc	r21, r21
    2c3c:	59 f0       	breq	.+22     	; 0x2c54 <__fp_splitA+0x10>
    2c3e:	5f 3f       	cpi	r21, 0xFF	; 255
    2c40:	71 f0       	breq	.+28     	; 0x2c5e <__fp_splitA+0x1a>
    2c42:	47 95       	ror	r20

00002c44 <__fp_splitA>:
    2c44:	88 0f       	add	r24, r24
    2c46:	97 fb       	bst	r25, 7
    2c48:	99 1f       	adc	r25, r25
    2c4a:	61 f0       	breq	.+24     	; 0x2c64 <__fp_splitA+0x20>
    2c4c:	9f 3f       	cpi	r25, 0xFF	; 255
    2c4e:	79 f0       	breq	.+30     	; 0x2c6e <__fp_splitA+0x2a>
    2c50:	87 95       	ror	r24
    2c52:	08 95       	ret
    2c54:	12 16       	cp	r1, r18
    2c56:	13 06       	cpc	r1, r19
    2c58:	14 06       	cpc	r1, r20
    2c5a:	55 1f       	adc	r21, r21
    2c5c:	f2 cf       	rjmp	.-28     	; 0x2c42 <__fp_split3+0xe>
    2c5e:	46 95       	lsr	r20
    2c60:	f1 df       	rcall	.-30     	; 0x2c44 <__fp_splitA>
    2c62:	08 c0       	rjmp	.+16     	; 0x2c74 <__fp_splitA+0x30>
    2c64:	16 16       	cp	r1, r22
    2c66:	17 06       	cpc	r1, r23
    2c68:	18 06       	cpc	r1, r24
    2c6a:	99 1f       	adc	r25, r25
    2c6c:	f1 cf       	rjmp	.-30     	; 0x2c50 <__fp_splitA+0xc>
    2c6e:	86 95       	lsr	r24
    2c70:	71 05       	cpc	r23, r1
    2c72:	61 05       	cpc	r22, r1
    2c74:	08 94       	sec
    2c76:	08 95       	ret

00002c78 <__fp_zero>:
    2c78:	e8 94       	clt

00002c7a <__fp_szero>:
    2c7a:	bb 27       	eor	r27, r27
    2c7c:	66 27       	eor	r22, r22
    2c7e:	77 27       	eor	r23, r23
    2c80:	cb 01       	movw	r24, r22
    2c82:	97 f9       	bld	r25, 7
    2c84:	08 95       	ret

00002c86 <__mulsf3>:
    2c86:	0b d0       	rcall	.+22     	; 0x2c9e <__mulsf3x>
    2c88:	c4 cf       	rjmp	.-120    	; 0x2c12 <__fp_round>
    2c8a:	b5 df       	rcall	.-150    	; 0x2bf6 <__fp_pscA>
    2c8c:	28 f0       	brcs	.+10     	; 0x2c98 <__mulsf3+0x12>
    2c8e:	ba df       	rcall	.-140    	; 0x2c04 <__fp_pscB>
    2c90:	18 f0       	brcs	.+6      	; 0x2c98 <__mulsf3+0x12>
    2c92:	95 23       	and	r25, r21
    2c94:	09 f0       	breq	.+2      	; 0x2c98 <__mulsf3+0x12>
    2c96:	a6 cf       	rjmp	.-180    	; 0x2be4 <__fp_inf>
    2c98:	ab cf       	rjmp	.-170    	; 0x2bf0 <__fp_nan>
    2c9a:	11 24       	eor	r1, r1
    2c9c:	ee cf       	rjmp	.-36     	; 0x2c7a <__fp_szero>

00002c9e <__mulsf3x>:
    2c9e:	ca df       	rcall	.-108    	; 0x2c34 <__fp_split3>
    2ca0:	a0 f3       	brcs	.-24     	; 0x2c8a <__mulsf3+0x4>

00002ca2 <__mulsf3_pse>:
    2ca2:	95 9f       	mul	r25, r21
    2ca4:	d1 f3       	breq	.-12     	; 0x2c9a <__mulsf3+0x14>
    2ca6:	95 0f       	add	r25, r21
    2ca8:	50 e0       	ldi	r21, 0x00	; 0
    2caa:	55 1f       	adc	r21, r21
    2cac:	62 9f       	mul	r22, r18
    2cae:	f0 01       	movw	r30, r0
    2cb0:	72 9f       	mul	r23, r18
    2cb2:	bb 27       	eor	r27, r27
    2cb4:	f0 0d       	add	r31, r0
    2cb6:	b1 1d       	adc	r27, r1
    2cb8:	63 9f       	mul	r22, r19
    2cba:	aa 27       	eor	r26, r26
    2cbc:	f0 0d       	add	r31, r0
    2cbe:	b1 1d       	adc	r27, r1
    2cc0:	aa 1f       	adc	r26, r26
    2cc2:	64 9f       	mul	r22, r20
    2cc4:	66 27       	eor	r22, r22
    2cc6:	b0 0d       	add	r27, r0
    2cc8:	a1 1d       	adc	r26, r1
    2cca:	66 1f       	adc	r22, r22
    2ccc:	82 9f       	mul	r24, r18
    2cce:	22 27       	eor	r18, r18
    2cd0:	b0 0d       	add	r27, r0
    2cd2:	a1 1d       	adc	r26, r1
    2cd4:	62 1f       	adc	r22, r18
    2cd6:	73 9f       	mul	r23, r19
    2cd8:	b0 0d       	add	r27, r0
    2cda:	a1 1d       	adc	r26, r1
    2cdc:	62 1f       	adc	r22, r18
    2cde:	83 9f       	mul	r24, r19
    2ce0:	a0 0d       	add	r26, r0
    2ce2:	61 1d       	adc	r22, r1
    2ce4:	22 1f       	adc	r18, r18
    2ce6:	74 9f       	mul	r23, r20
    2ce8:	33 27       	eor	r19, r19
    2cea:	a0 0d       	add	r26, r0
    2cec:	61 1d       	adc	r22, r1
    2cee:	23 1f       	adc	r18, r19
    2cf0:	84 9f       	mul	r24, r20
    2cf2:	60 0d       	add	r22, r0
    2cf4:	21 1d       	adc	r18, r1
    2cf6:	82 2f       	mov	r24, r18
    2cf8:	76 2f       	mov	r23, r22
    2cfa:	6a 2f       	mov	r22, r26
    2cfc:	11 24       	eor	r1, r1
    2cfe:	9f 57       	subi	r25, 0x7F	; 127
    2d00:	50 40       	sbci	r21, 0x00	; 0
    2d02:	8a f0       	brmi	.+34     	; 0x2d26 <__mulsf3_pse+0x84>
    2d04:	e1 f0       	breq	.+56     	; 0x2d3e <__mulsf3_pse+0x9c>
    2d06:	88 23       	and	r24, r24
    2d08:	4a f0       	brmi	.+18     	; 0x2d1c <__mulsf3_pse+0x7a>
    2d0a:	ee 0f       	add	r30, r30
    2d0c:	ff 1f       	adc	r31, r31
    2d0e:	bb 1f       	adc	r27, r27
    2d10:	66 1f       	adc	r22, r22
    2d12:	77 1f       	adc	r23, r23
    2d14:	88 1f       	adc	r24, r24
    2d16:	91 50       	subi	r25, 0x01	; 1
    2d18:	50 40       	sbci	r21, 0x00	; 0
    2d1a:	a9 f7       	brne	.-22     	; 0x2d06 <__mulsf3_pse+0x64>
    2d1c:	9e 3f       	cpi	r25, 0xFE	; 254
    2d1e:	51 05       	cpc	r21, r1
    2d20:	70 f0       	brcs	.+28     	; 0x2d3e <__mulsf3_pse+0x9c>
    2d22:	60 cf       	rjmp	.-320    	; 0x2be4 <__fp_inf>
    2d24:	aa cf       	rjmp	.-172    	; 0x2c7a <__fp_szero>
    2d26:	5f 3f       	cpi	r21, 0xFF	; 255
    2d28:	ec f3       	brlt	.-6      	; 0x2d24 <__mulsf3_pse+0x82>
    2d2a:	98 3e       	cpi	r25, 0xE8	; 232
    2d2c:	dc f3       	brlt	.-10     	; 0x2d24 <__mulsf3_pse+0x82>
    2d2e:	86 95       	lsr	r24
    2d30:	77 95       	ror	r23
    2d32:	67 95       	ror	r22
    2d34:	b7 95       	ror	r27
    2d36:	f7 95       	ror	r31
    2d38:	e7 95       	ror	r30
    2d3a:	9f 5f       	subi	r25, 0xFF	; 255
    2d3c:	c1 f7       	brne	.-16     	; 0x2d2e <__mulsf3_pse+0x8c>
    2d3e:	fe 2b       	or	r31, r30
    2d40:	88 0f       	add	r24, r24
    2d42:	91 1d       	adc	r25, r1
    2d44:	96 95       	lsr	r25
    2d46:	87 95       	ror	r24
    2d48:	97 f9       	bld	r25, 7
    2d4a:	08 95       	ret

00002d4c <__udivmodsi4>:
    2d4c:	a1 e2       	ldi	r26, 0x21	; 33
    2d4e:	1a 2e       	mov	r1, r26
    2d50:	aa 1b       	sub	r26, r26
    2d52:	bb 1b       	sub	r27, r27
    2d54:	fd 01       	movw	r30, r26
    2d56:	0d c0       	rjmp	.+26     	; 0x2d72 <__udivmodsi4_ep>

00002d58 <__udivmodsi4_loop>:
    2d58:	aa 1f       	adc	r26, r26
    2d5a:	bb 1f       	adc	r27, r27
    2d5c:	ee 1f       	adc	r30, r30
    2d5e:	ff 1f       	adc	r31, r31
    2d60:	a2 17       	cp	r26, r18
    2d62:	b3 07       	cpc	r27, r19
    2d64:	e4 07       	cpc	r30, r20
    2d66:	f5 07       	cpc	r31, r21
    2d68:	20 f0       	brcs	.+8      	; 0x2d72 <__udivmodsi4_ep>
    2d6a:	a2 1b       	sub	r26, r18
    2d6c:	b3 0b       	sbc	r27, r19
    2d6e:	e4 0b       	sbc	r30, r20
    2d70:	f5 0b       	sbc	r31, r21

00002d72 <__udivmodsi4_ep>:
    2d72:	66 1f       	adc	r22, r22
    2d74:	77 1f       	adc	r23, r23
    2d76:	88 1f       	adc	r24, r24
    2d78:	99 1f       	adc	r25, r25
    2d7a:	1a 94       	dec	r1
    2d7c:	69 f7       	brne	.-38     	; 0x2d58 <__udivmodsi4_loop>
    2d7e:	60 95       	com	r22
    2d80:	70 95       	com	r23
    2d82:	80 95       	com	r24
    2d84:	90 95       	com	r25
    2d86:	9b 01       	movw	r18, r22
    2d88:	ac 01       	movw	r20, r24
    2d8a:	bd 01       	movw	r22, r26
    2d8c:	cf 01       	movw	r24, r30
    2d8e:	08 95       	ret

00002d90 <__tablejump2__>:
    2d90:	ee 0f       	add	r30, r30
    2d92:	ff 1f       	adc	r31, r31
    2d94:	88 1f       	adc	r24, r24
    2d96:	8b bf       	out	0x3b, r24	; 59
    2d98:	07 90       	elpm	r0, Z+
    2d9a:	f6 91       	elpm	r31, Z
    2d9c:	e0 2d       	mov	r30, r0
    2d9e:	19 94       	eijmp

00002da0 <memcpy_P>:
    2da0:	fb 01       	movw	r30, r22
    2da2:	dc 01       	movw	r26, r24
    2da4:	02 c0       	rjmp	.+4      	; 0x2daa <memcpy_P+0xa>
    2da6:	05 90       	lpm	r0, Z+
    2da8:	0d 92       	st	X+, r0
    2daa:	41 50       	subi	r20, 0x01	; 1
    2dac:	50 40       	sbci	r21, 0x00	; 0
    2dae:	d8 f7       	brcc	.-10     	; 0x2da6 <memcpy_P+0x6>
    2db0:	08 95       	ret

00002db2 <memcmp>:
    2db2:	fb 01       	movw	r30, r22
    2db4:	dc 01       	movw	r26, r24
    2db6:	04 c0       	rjmp	.+8      	; 0x2dc0 <memcmp+0xe>
    2db8:	8d 91       	ld	r24, X+
    2dba:	01 90       	ld	r0, Z+
    2dbc:	80 19       	sub	r24, r0
    2dbe:	21 f4       	brne	.+8      	; 0x2dc8 <memcmp+0x16>
    2dc0:	41 50       	subi	r20, 0x01	; 1
    2dc2:	50 40       	sbci	r21, 0x00	; 0
    2dc4:	c8 f7       	brcc	.-14     	; 0x2db8 <memcmp+0x6>
    2dc6:	88 1b       	sub	r24, r24
    2dc8:	99 0b       	sbc	r25, r25
    2dca:	08 95       	ret

00002dcc <strncpy>:
    2dcc:	fb 01       	movw	r30, r22
    2dce:	dc 01       	movw	r26, r24
    2dd0:	41 50       	subi	r20, 0x01	; 1
    2dd2:	50 40       	sbci	r21, 0x00	; 0
    2dd4:	48 f0       	brcs	.+18     	; 0x2de8 <strncpy+0x1c>
    2dd6:	01 90       	ld	r0, Z+
    2dd8:	0d 92       	st	X+, r0
    2dda:	00 20       	and	r0, r0
    2ddc:	c9 f7       	brne	.-14     	; 0x2dd0 <strncpy+0x4>
    2dde:	01 c0       	rjmp	.+2      	; 0x2de2 <strncpy+0x16>
    2de0:	1d 92       	st	X+, r1
    2de2:	41 50       	subi	r20, 0x01	; 1
    2de4:	50 40       	sbci	r21, 0x00	; 0
    2de6:	e0 f7       	brcc	.-8      	; 0x2de0 <strncpy+0x14>
    2de8:	08 95       	ret

00002dea <_exit>:
    2dea:	f8 94       	cli

00002dec <__stop_program>:
    2dec:	ff cf       	rjmp	.-2      	; 0x2dec <__stop_program>
