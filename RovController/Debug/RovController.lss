
RovController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e8  00800200  000028f2  00002986  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000028f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000600  008002e8  008002e8  00002a6e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002a6e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002aa0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000007f0  00000000  00000000  00002ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00012555  00000000  00000000  000032d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004759  00000000  00000000  00015825  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004d55  00000000  00000000  00019f7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000018c4  00000000  00000000  0001ecd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000576c  00000000  00000000  00020598  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000847b  00000000  00000000  00025d04  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000778  00000000  00000000  0002e17f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4b c1       	rjmp	.+662    	; 0x298 <__ctors_end>
       2:	00 00       	nop
       4:	7a c1       	rjmp	.+756    	; 0x2fa <__bad_interrupt>
       6:	00 00       	nop
       8:	78 c1       	rjmp	.+752    	; 0x2fa <__bad_interrupt>
       a:	00 00       	nop
       c:	76 c1       	rjmp	.+748    	; 0x2fa <__bad_interrupt>
       e:	00 00       	nop
      10:	74 c1       	rjmp	.+744    	; 0x2fa <__bad_interrupt>
      12:	00 00       	nop
      14:	72 c1       	rjmp	.+740    	; 0x2fa <__bad_interrupt>
      16:	00 00       	nop
      18:	70 c1       	rjmp	.+736    	; 0x2fa <__bad_interrupt>
      1a:	00 00       	nop
      1c:	6e c1       	rjmp	.+732    	; 0x2fa <__bad_interrupt>
      1e:	00 00       	nop
      20:	6c c1       	rjmp	.+728    	; 0x2fa <__bad_interrupt>
      22:	00 00       	nop
      24:	6a c1       	rjmp	.+724    	; 0x2fa <__bad_interrupt>
      26:	00 00       	nop
      28:	68 c1       	rjmp	.+720    	; 0x2fa <__bad_interrupt>
      2a:	00 00       	nop
      2c:	66 c1       	rjmp	.+716    	; 0x2fa <__bad_interrupt>
      2e:	00 00       	nop
      30:	64 c1       	rjmp	.+712    	; 0x2fa <__bad_interrupt>
      32:	00 00       	nop
      34:	62 c1       	rjmp	.+708    	; 0x2fa <__bad_interrupt>
      36:	00 00       	nop
      38:	60 c1       	rjmp	.+704    	; 0x2fa <__bad_interrupt>
      3a:	00 00       	nop
      3c:	5e c1       	rjmp	.+700    	; 0x2fa <__bad_interrupt>
      3e:	00 00       	nop
      40:	5c c1       	rjmp	.+696    	; 0x2fa <__bad_interrupt>
      42:	00 00       	nop
      44:	5a c1       	rjmp	.+692    	; 0x2fa <__bad_interrupt>
      46:	00 00       	nop
      48:	58 c1       	rjmp	.+688    	; 0x2fa <__bad_interrupt>
      4a:	00 00       	nop
      4c:	56 c1       	rjmp	.+684    	; 0x2fa <__bad_interrupt>
      4e:	00 00       	nop
      50:	54 c1       	rjmp	.+680    	; 0x2fa <__bad_interrupt>
      52:	00 00       	nop
      54:	52 c1       	rjmp	.+676    	; 0x2fa <__bad_interrupt>
      56:	00 00       	nop
      58:	50 c1       	rjmp	.+672    	; 0x2fa <__bad_interrupt>
      5a:	00 00       	nop
      5c:	4e c1       	rjmp	.+668    	; 0x2fa <__bad_interrupt>
      5e:	00 00       	nop
      60:	4c c1       	rjmp	.+664    	; 0x2fa <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 b8 0c 	jmp	0x1970	; 0x1970 <__vector_25>
      68:	0c 94 f4 0c 	jmp	0x19e8	; 0x19e8 <__vector_26>
      6c:	46 c1       	rjmp	.+652    	; 0x2fa <__bad_interrupt>
      6e:	00 00       	nop
      70:	44 c1       	rjmp	.+648    	; 0x2fa <__bad_interrupt>
      72:	00 00       	nop
      74:	42 c1       	rjmp	.+644    	; 0x2fa <__bad_interrupt>
      76:	00 00       	nop
      78:	40 c1       	rjmp	.+640    	; 0x2fa <__bad_interrupt>
      7a:	00 00       	nop
      7c:	3e c1       	rjmp	.+636    	; 0x2fa <__bad_interrupt>
      7e:	00 00       	nop
      80:	3c c1       	rjmp	.+632    	; 0x2fa <__bad_interrupt>
      82:	00 00       	nop
      84:	3a c1       	rjmp	.+628    	; 0x2fa <__bad_interrupt>
      86:	00 00       	nop
      88:	38 c1       	rjmp	.+624    	; 0x2fa <__bad_interrupt>
      8a:	00 00       	nop
      8c:	36 c1       	rjmp	.+620    	; 0x2fa <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 40 0d 	jmp	0x1a80	; 0x1a80 <__vector_36>
      94:	0c 94 7c 0d 	jmp	0x1af8	; 0x1af8 <__vector_37>
      98:	30 c1       	rjmp	.+608    	; 0x2fa <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 c8 0f 	jmp	0x1f90	; 0x1f90 <__vector_39>
      a0:	2c c1       	rjmp	.+600    	; 0x2fa <__bad_interrupt>
      a2:	00 00       	nop
      a4:	2a c1       	rjmp	.+596    	; 0x2fa <__bad_interrupt>
      a6:	00 00       	nop
      a8:	28 c1       	rjmp	.+592    	; 0x2fa <__bad_interrupt>
      aa:	00 00       	nop
      ac:	26 c1       	rjmp	.+588    	; 0x2fa <__bad_interrupt>
      ae:	00 00       	nop
      b0:	24 c1       	rjmp	.+584    	; 0x2fa <__bad_interrupt>
      b2:	00 00       	nop
      b4:	22 c1       	rjmp	.+580    	; 0x2fa <__bad_interrupt>
      b6:	00 00       	nop
      b8:	20 c1       	rjmp	.+576    	; 0x2fa <__bad_interrupt>
      ba:	00 00       	nop
      bc:	1e c1       	rjmp	.+572    	; 0x2fa <__bad_interrupt>
      be:	00 00       	nop
      c0:	1c c1       	rjmp	.+568    	; 0x2fa <__bad_interrupt>
      c2:	00 00       	nop
      c4:	1a c1       	rjmp	.+564    	; 0x2fa <__bad_interrupt>
      c6:	00 00       	nop
      c8:	18 c1       	rjmp	.+560    	; 0x2fa <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 c8 0d 	jmp	0x1b90	; 0x1b90 <__vector_51>
      d0:	0c 94 04 0e 	jmp	0x1c08	; 0x1c08 <__vector_52>
      d4:	12 c1       	rjmp	.+548    	; 0x2fa <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__vector_54>
      dc:	0c 94 8c 0e 	jmp	0x1d18	; 0x1d18 <__vector_55>
      e0:	0c c1       	rjmp	.+536    	; 0x2fa <__bad_interrupt>
      e2:	00 00       	nop
      e4:	ce 10       	cpse	r12, r14
      e6:	d1 10       	cpse	r13, r1
      e8:	d1 10       	cpse	r13, r1
      ea:	d1 10       	cpse	r13, r1
      ec:	d1 10       	cpse	r13, r1
      ee:	d1 10       	cpse	r13, r1
      f0:	d1 10       	cpse	r13, r1
      f2:	d1 10       	cpse	r13, r1
      f4:	e9 0f       	add	r30, r25
      f6:	d1 10       	cpse	r13, r1
      f8:	d1 10       	cpse	r13, r1
      fa:	d1 10       	cpse	r13, r1
      fc:	d1 10       	cpse	r13, r1
      fe:	d1 10       	cpse	r13, r1
     100:	d1 10       	cpse	r13, r1
     102:	d1 10       	cpse	r13, r1
     104:	e9 0f       	add	r30, r25
     106:	d1 10       	cpse	r13, r1
     108:	d1 10       	cpse	r13, r1
     10a:	d1 10       	cpse	r13, r1
     10c:	d1 10       	cpse	r13, r1
     10e:	d1 10       	cpse	r13, r1
     110:	d1 10       	cpse	r13, r1
     112:	d1 10       	cpse	r13, r1
     114:	f1 0f       	add	r31, r17
     116:	d1 10       	cpse	r13, r1
     118:	d1 10       	cpse	r13, r1
     11a:	d1 10       	cpse	r13, r1
     11c:	d1 10       	cpse	r13, r1
     11e:	d1 10       	cpse	r13, r1
     120:	d1 10       	cpse	r13, r1
     122:	d1 10       	cpse	r13, r1
     124:	16 10       	cpse	r1, r6
     126:	d1 10       	cpse	r13, r1
     128:	d1 10       	cpse	r13, r1
     12a:	d1 10       	cpse	r13, r1
     12c:	d1 10       	cpse	r13, r1
     12e:	d1 10       	cpse	r13, r1
     130:	d1 10       	cpse	r13, r1
     132:	d1 10       	cpse	r13, r1
     134:	f1 0f       	add	r31, r17
     136:	d1 10       	cpse	r13, r1
     138:	d1 10       	cpse	r13, r1
     13a:	d1 10       	cpse	r13, r1
     13c:	d1 10       	cpse	r13, r1
     13e:	d1 10       	cpse	r13, r1
     140:	d1 10       	cpse	r13, r1
     142:	d1 10       	cpse	r13, r1
     144:	1b 10       	cpse	r1, r11
     146:	d1 10       	cpse	r13, r1
     148:	d1 10       	cpse	r13, r1
     14a:	d1 10       	cpse	r13, r1
     14c:	d1 10       	cpse	r13, r1
     14e:	d1 10       	cpse	r13, r1
     150:	d1 10       	cpse	r13, r1
     152:	d1 10       	cpse	r13, r1
     154:	20 10       	cpse	r2, r0
     156:	d1 10       	cpse	r13, r1
     158:	d1 10       	cpse	r13, r1
     15a:	d1 10       	cpse	r13, r1
     15c:	d1 10       	cpse	r13, r1
     15e:	d1 10       	cpse	r13, r1
     160:	d1 10       	cpse	r13, r1
     162:	d1 10       	cpse	r13, r1
     164:	31 10       	cpse	r3, r1
     166:	d1 10       	cpse	r13, r1
     168:	d1 10       	cpse	r13, r1
     16a:	d1 10       	cpse	r13, r1
     16c:	d1 10       	cpse	r13, r1
     16e:	d1 10       	cpse	r13, r1
     170:	d1 10       	cpse	r13, r1
     172:	d1 10       	cpse	r13, r1
     174:	5a 10       	cpse	r5, r10
     176:	d1 10       	cpse	r13, r1
     178:	d1 10       	cpse	r13, r1
     17a:	d1 10       	cpse	r13, r1
     17c:	d1 10       	cpse	r13, r1
     17e:	d1 10       	cpse	r13, r1
     180:	d1 10       	cpse	r13, r1
     182:	d1 10       	cpse	r13, r1
     184:	25 10       	cpse	r2, r5
     186:	d1 10       	cpse	r13, r1
     188:	d1 10       	cpse	r13, r1
     18a:	d1 10       	cpse	r13, r1
     18c:	d1 10       	cpse	r13, r1
     18e:	d1 10       	cpse	r13, r1
     190:	d1 10       	cpse	r13, r1
     192:	d1 10       	cpse	r13, r1
     194:	3f 10       	cpse	r3, r15
     196:	d1 10       	cpse	r13, r1
     198:	d1 10       	cpse	r13, r1
     19a:	d1 10       	cpse	r13, r1
     19c:	d1 10       	cpse	r13, r1
     19e:	d1 10       	cpse	r13, r1
     1a0:	d1 10       	cpse	r13, r1
     1a2:	d1 10       	cpse	r13, r1
     1a4:	5c 10       	cpse	r5, r12
     1a6:	d1 10       	cpse	r13, r1
     1a8:	d1 10       	cpse	r13, r1
     1aa:	d1 10       	cpse	r13, r1
     1ac:	d1 10       	cpse	r13, r1
     1ae:	d1 10       	cpse	r13, r1
     1b0:	d1 10       	cpse	r13, r1
     1b2:	d1 10       	cpse	r13, r1
     1b4:	5c 10       	cpse	r5, r12
     1b6:	d1 10       	cpse	r13, r1
     1b8:	d1 10       	cpse	r13, r1
     1ba:	d1 10       	cpse	r13, r1
     1bc:	d1 10       	cpse	r13, r1
     1be:	d1 10       	cpse	r13, r1
     1c0:	d1 10       	cpse	r13, r1
     1c2:	d1 10       	cpse	r13, r1
     1c4:	5c 10       	cpse	r5, r12
     1c6:	d1 10       	cpse	r13, r1
     1c8:	d1 10       	cpse	r13, r1
     1ca:	d1 10       	cpse	r13, r1
     1cc:	d1 10       	cpse	r13, r1
     1ce:	d1 10       	cpse	r13, r1
     1d0:	d1 10       	cpse	r13, r1
     1d2:	d1 10       	cpse	r13, r1
     1d4:	5c 10       	cpse	r5, r12
     1d6:	d1 10       	cpse	r13, r1
     1d8:	d1 10       	cpse	r13, r1
     1da:	d1 10       	cpse	r13, r1
     1dc:	d1 10       	cpse	r13, r1
     1de:	d1 10       	cpse	r13, r1
     1e0:	d1 10       	cpse	r13, r1
     1e2:	d1 10       	cpse	r13, r1
     1e4:	65 10       	cpse	r6, r5
     1e6:	d1 10       	cpse	r13, r1
     1e8:	d1 10       	cpse	r13, r1
     1ea:	d1 10       	cpse	r13, r1
     1ec:	d1 10       	cpse	r13, r1
     1ee:	d1 10       	cpse	r13, r1
     1f0:	d1 10       	cpse	r13, r1
     1f2:	d1 10       	cpse	r13, r1
     1f4:	95 10       	cpse	r9, r5
     1f6:	d1 10       	cpse	r13, r1
     1f8:	d1 10       	cpse	r13, r1
     1fa:	d1 10       	cpse	r13, r1
     1fc:	d1 10       	cpse	r13, r1
     1fe:	d1 10       	cpse	r13, r1
     200:	d1 10       	cpse	r13, r1
     202:	d1 10       	cpse	r13, r1
     204:	65 10       	cpse	r6, r5
     206:	d1 10       	cpse	r13, r1
     208:	d1 10       	cpse	r13, r1
     20a:	d1 10       	cpse	r13, r1
     20c:	d1 10       	cpse	r13, r1
     20e:	d1 10       	cpse	r13, r1
     210:	d1 10       	cpse	r13, r1
     212:	d1 10       	cpse	r13, r1
     214:	95 10       	cpse	r9, r5
     216:	d1 10       	cpse	r13, r1
     218:	d1 10       	cpse	r13, r1
     21a:	d1 10       	cpse	r13, r1
     21c:	d1 10       	cpse	r13, r1
     21e:	d1 10       	cpse	r13, r1
     220:	d1 10       	cpse	r13, r1
     222:	d1 10       	cpse	r13, r1
     224:	7d 10       	cpse	r7, r13
     226:	d1 10       	cpse	r13, r1
     228:	d1 10       	cpse	r13, r1
     22a:	d1 10       	cpse	r13, r1
     22c:	d1 10       	cpse	r13, r1
     22e:	d1 10       	cpse	r13, r1
     230:	d1 10       	cpse	r13, r1
     232:	d1 10       	cpse	r13, r1
     234:	99 10       	cpse	r9, r9
     236:	d1 10       	cpse	r13, r1
     238:	d1 10       	cpse	r13, r1
     23a:	d1 10       	cpse	r13, r1
     23c:	d1 10       	cpse	r13, r1
     23e:	d1 10       	cpse	r13, r1
     240:	d1 10       	cpse	r13, r1
     242:	d1 10       	cpse	r13, r1
     244:	99 10       	cpse	r9, r9
     246:	d1 10       	cpse	r13, r1
     248:	d1 10       	cpse	r13, r1
     24a:	d1 10       	cpse	r13, r1
     24c:	d1 10       	cpse	r13, r1
     24e:	d1 10       	cpse	r13, r1
     250:	d1 10       	cpse	r13, r1
     252:	d1 10       	cpse	r13, r1
     254:	ae 10       	cpse	r10, r14
     256:	d1 10       	cpse	r13, r1
     258:	d1 10       	cpse	r13, r1
     25a:	d1 10       	cpse	r13, r1
     25c:	d1 10       	cpse	r13, r1
     25e:	d1 10       	cpse	r13, r1
     260:	d1 10       	cpse	r13, r1
     262:	d1 10       	cpse	r13, r1
     264:	c8 10       	cpse	r12, r8
     266:	d1 10       	cpse	r13, r1
     268:	d1 10       	cpse	r13, r1
     26a:	d1 10       	cpse	r13, r1
     26c:	d1 10       	cpse	r13, r1
     26e:	d1 10       	cpse	r13, r1
     270:	d1 10       	cpse	r13, r1
     272:	d1 10       	cpse	r13, r1
     274:	c8 10       	cpse	r12, r8

00000276 <__trampolines_end>:
     276:	45 00       	.word	0x0045	; ????
     278:	00 82       	st	Z, r0
     27a:	00 00       	nop
     27c:	40 00       	.word	0x0040	; ????
     27e:	20 00       	Address 0x0000027e is out of bounds.
.word	0xffff	; ????

0000027f <_ZL9arpreqhdr>:
     27f:	00 01 08 00 06 04 00 01 00                          .........

00000288 <__ctors_start>:
     288:	75 04       	cpc	r7, r5
     28a:	1d 0d       	add	r17, r13
     28c:	a5 0d       	add	r26, r5
     28e:	2d 0e       	add	r2, r29
     290:	b5 0e       	add	r11, r21
     292:	f0 11       	cpse	r31, r0
     294:	4c 12       	cpse	r4, r28
     296:	5e 12       	cpse	r5, r30

00000298 <__ctors_end>:
     298:	11 24       	eor	r1, r1
     29a:	1f be       	out	0x3f, r1	; 63
     29c:	cf ef       	ldi	r28, 0xFF	; 255
     29e:	d1 e2       	ldi	r29, 0x21	; 33
     2a0:	de bf       	out	0x3e, r29	; 62
     2a2:	cd bf       	out	0x3d, r28	; 61
     2a4:	00 e0       	ldi	r16, 0x00	; 0
     2a6:	0c bf       	out	0x3c, r16	; 60

000002a8 <__do_copy_data>:
     2a8:	12 e0       	ldi	r17, 0x02	; 2
     2aa:	a0 e0       	ldi	r26, 0x00	; 0
     2ac:	b2 e0       	ldi	r27, 0x02	; 2
     2ae:	e2 ef       	ldi	r30, 0xF2	; 242
     2b0:	f8 e2       	ldi	r31, 0x28	; 40
     2b2:	00 e0       	ldi	r16, 0x00	; 0
     2b4:	0b bf       	out	0x3b, r16	; 59
     2b6:	02 c0       	rjmp	.+4      	; 0x2bc <__do_copy_data+0x14>
     2b8:	07 90       	elpm	r0, Z+
     2ba:	0d 92       	st	X+, r0
     2bc:	a8 3e       	cpi	r26, 0xE8	; 232
     2be:	b1 07       	cpc	r27, r17
     2c0:	d9 f7       	brne	.-10     	; 0x2b8 <__do_copy_data+0x10>

000002c2 <__do_clear_bss>:
     2c2:	28 e0       	ldi	r18, 0x08	; 8
     2c4:	a8 ee       	ldi	r26, 0xE8	; 232
     2c6:	b2 e0       	ldi	r27, 0x02	; 2
     2c8:	01 c0       	rjmp	.+2      	; 0x2cc <.do_clear_bss_start>

000002ca <.do_clear_bss_loop>:
     2ca:	1d 92       	st	X+, r1

000002cc <.do_clear_bss_start>:
     2cc:	a8 3e       	cpi	r26, 0xE8	; 232
     2ce:	b2 07       	cpc	r27, r18
     2d0:	e1 f7       	brne	.-8      	; 0x2ca <.do_clear_bss_loop>

000002d2 <__do_global_ctors>:
     2d2:	11 e0       	ldi	r17, 0x01	; 1
     2d4:	cc e4       	ldi	r28, 0x4C	; 76
     2d6:	d1 e0       	ldi	r29, 0x01	; 1
     2d8:	00 e0       	ldi	r16, 0x00	; 0
     2da:	06 c0       	rjmp	.+12     	; 0x2e8 <__do_global_ctors+0x16>
     2dc:	21 97       	sbiw	r28, 0x01	; 1
     2de:	01 09       	sbc	r16, r1
     2e0:	80 2f       	mov	r24, r16
     2e2:	fe 01       	movw	r30, r28
     2e4:	0e 94 4a 14 	call	0x2894	; 0x2894 <__tablejump2__>
     2e8:	c4 34       	cpi	r28, 0x44	; 68
     2ea:	d1 07       	cpc	r29, r17
     2ec:	80 e0       	ldi	r24, 0x00	; 0
     2ee:	08 07       	cpc	r16, r24
     2f0:	a9 f7       	brne	.-22     	; 0x2dc <__do_global_ctors+0xa>
     2f2:	0e 94 3b 0b 	call	0x1676	; 0x1676 <main>
     2f6:	0c 94 77 14 	jmp	0x28ee	; 0x28ee <_exit>

000002fa <__bad_interrupt>:
     2fa:	82 ce       	rjmp	.-764    	; 0x0 <__vectors>

000002fc <_ZN15Adafruit_Sensor15enableAutoRangeEb>:

    setMode(lastMode);
    return true;
  }
  return false;
}
     2fc:	08 95       	ret

000002fe <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>:
     2fe:	0f 93       	push	r16
     300:	1f 93       	push	r17
     302:	cf 93       	push	r28
     304:	df 93       	push	r29
     306:	8c 01       	movw	r16, r24
     308:	eb 01       	movw	r28, r22
     30a:	88 e2       	ldi	r24, 0x28	; 40
     30c:	fb 01       	movw	r30, r22
     30e:	11 92       	st	Z+, r1
     310:	8a 95       	dec	r24
     312:	e9 f7       	brne	.-6      	; 0x30e <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x10>
     314:	4b e0       	ldi	r20, 0x0B	; 11
     316:	50 e0       	ldi	r21, 0x00	; 0
     318:	64 e1       	ldi	r22, 0x14	; 20
     31a:	72 e0       	ldi	r23, 0x02	; 2
     31c:	ce 01       	movw	r24, r28
     31e:	0e 94 68 14 	call	0x28d0	; 0x28d0 <strncpy>
     322:	1b 86       	std	Y+11, r1	; 0x0b
     324:	81 e0       	ldi	r24, 0x01	; 1
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	a0 e0       	ldi	r26, 0x00	; 0
     32a:	b0 e0       	ldi	r27, 0x00	; 0
     32c:	8c 87       	std	Y+12, r24	; 0x0c
     32e:	9d 87       	std	Y+13, r25	; 0x0d
     330:	ae 87       	std	Y+14, r26	; 0x0e
     332:	bf 87       	std	Y+15, r27	; 0x0f
     334:	f8 01       	movw	r30, r16
     336:	86 81       	ldd	r24, Z+6	; 0x06
     338:	97 81       	ldd	r25, Z+7	; 0x07
     33a:	a0 85       	ldd	r26, Z+8	; 0x08
     33c:	b1 85       	ldd	r27, Z+9	; 0x09
     33e:	88 8b       	std	Y+16, r24	; 0x10
     340:	99 8b       	std	Y+17, r25	; 0x11
     342:	aa 8b       	std	Y+18, r26	; 0x12
     344:	bb 8b       	std	Y+19, r27	; 0x13
     346:	83 e0       	ldi	r24, 0x03	; 3
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	a0 e0       	ldi	r26, 0x00	; 0
     34c:	b0 e0       	ldi	r27, 0x00	; 0
     34e:	8c 8b       	std	Y+20, r24	; 0x14
     350:	9d 8b       	std	Y+21, r25	; 0x15
     352:	ae 8b       	std	Y+22, r26	; 0x16
     354:	bf 8b       	std	Y+23, r27	; 0x17
     356:	1c a2       	std	Y+36, r1	; 0x24
     358:	1d a2       	std	Y+37, r1	; 0x25
     35a:	1e a2       	std	Y+38, r1	; 0x26
     35c:	1f a2       	std	Y+39, r1	; 0x27
     35e:	18 8e       	std	Y+24, r1	; 0x18
     360:	19 8e       	std	Y+25, r1	; 0x19
     362:	1a 8e       	std	Y+26, r1	; 0x1a
     364:	1b 8e       	std	Y+27, r1	; 0x1b
     366:	1c 8e       	std	Y+28, r1	; 0x1c
     368:	1d 8e       	std	Y+29, r1	; 0x1d
     36a:	1e 8e       	std	Y+30, r1	; 0x1e
     36c:	1f 8e       	std	Y+31, r1	; 0x1f
     36e:	8a e0       	ldi	r24, 0x0A	; 10
     370:	97 ed       	ldi	r25, 0xD7	; 215
     372:	a3 e2       	ldi	r26, 0x23	; 35
     374:	bc e3       	ldi	r27, 0x3C	; 60
     376:	88 a3       	std	Y+32, r24	; 0x20
     378:	99 a3       	std	Y+33, r25	; 0x21
     37a:	aa a3       	std	Y+34, r26	; 0x22
     37c:	bb a3       	std	Y+35, r27	; 0x23
     37e:	df 91       	pop	r29
     380:	cf 91       	pop	r28
     382:	1f 91       	pop	r17
     384:	0f 91       	pop	r16
     386:	08 95       	ret

00000388 <_ZN15Adafruit_BNO055C1ElhP7TwoWire>:
     388:	0f 93       	push	r16
     38a:	1f 93       	push	r17
     38c:	fc 01       	movw	r30, r24
     38e:	8f e1       	ldi	r24, 0x1F	; 31
     390:	92 e0       	ldi	r25, 0x02	; 2
     392:	91 83       	std	Z+1, r25	; 0x01
     394:	80 83       	st	Z, r24
     396:	46 83       	std	Z+6, r20	; 0x06
     398:	57 83       	std	Z+7, r21	; 0x07
     39a:	60 87       	std	Z+8, r22	; 0x08
     39c:	71 87       	std	Z+9, r23	; 0x09
     39e:	23 83       	std	Z+3, r18	; 0x03
     3a0:	15 83       	std	Z+5, r17	; 0x05
     3a2:	04 83       	std	Z+4, r16	; 0x04
     3a4:	1f 91       	pop	r17
     3a6:	0f 91       	pop	r16
     3a8:	08 95       	ret

000003aa <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>:
     3aa:	cf 92       	push	r12
     3ac:	df 92       	push	r13
     3ae:	ef 92       	push	r14
     3b0:	ff 92       	push	r15
     3b2:	0f 93       	push	r16
     3b4:	1f 93       	push	r17
     3b6:	cf 93       	push	r28
     3b8:	df 93       	push	r29
     3ba:	7c 01       	movw	r14, r24
     3bc:	c6 2f       	mov	r28, r22
     3be:	6a 01       	movw	r12, r20
     3c0:	12 2f       	mov	r17, r18
     3c2:	dc 01       	movw	r26, r24
     3c4:	13 96       	adiw	r26, 0x03	; 3
     3c6:	6c 91       	ld	r22, X
     3c8:	13 97       	sbiw	r26, 0x03	; 3
     3ca:	14 96       	adiw	r26, 0x04	; 4
     3cc:	8d 91       	ld	r24, X+
     3ce:	9c 91       	ld	r25, X
     3d0:	15 97       	sbiw	r26, 0x05	; 5
     3d2:	0e 94 69 11 	call	0x22d2	; 0x22d2 <_ZN7TwoWire17beginTransmissionEh>
     3d6:	f7 01       	movw	r30, r14
     3d8:	84 81       	ldd	r24, Z+4	; 0x04
     3da:	95 81       	ldd	r25, Z+5	; 0x05
     3dc:	dc 01       	movw	r26, r24
     3de:	ed 91       	ld	r30, X+
     3e0:	fc 91       	ld	r31, X
     3e2:	01 90       	ld	r0, Z+
     3e4:	f0 81       	ld	r31, Z
     3e6:	e0 2d       	mov	r30, r0
     3e8:	6c 2f       	mov	r22, r28
     3ea:	19 95       	eicall
     3ec:	f7 01       	movw	r30, r14
     3ee:	84 81       	ldd	r24, Z+4	; 0x04
     3f0:	95 81       	ldd	r25, Z+5	; 0x05
     3f2:	0e 94 ed 11 	call	0x23da	; 0x23da <_ZN7TwoWire15endTransmissionEv>
     3f6:	41 2f       	mov	r20, r17
     3f8:	d7 01       	movw	r26, r14
     3fa:	13 96       	adiw	r26, 0x03	; 3
     3fc:	6c 91       	ld	r22, X
     3fe:	13 97       	sbiw	r26, 0x03	; 3
     400:	14 96       	adiw	r26, 0x04	; 4
     402:	8d 91       	ld	r24, X+
     404:	9c 91       	ld	r25, X
     406:	15 97       	sbiw	r26, 0x05	; 5
     408:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <_ZN7TwoWire11requestFromEhh>
     40c:	11 23       	and	r17, r17
     40e:	b1 f0       	breq	.+44     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     410:	e6 01       	movw	r28, r12
     412:	11 50       	subi	r17, 0x01	; 1
     414:	01 2f       	mov	r16, r17
     416:	10 e0       	ldi	r17, 0x00	; 0
     418:	0f 5f       	subi	r16, 0xFF	; 255
     41a:	1f 4f       	sbci	r17, 0xFF	; 255
     41c:	0c 0d       	add	r16, r12
     41e:	1d 1d       	adc	r17, r13
     420:	f7 01       	movw	r30, r14
     422:	84 81       	ldd	r24, Z+4	; 0x04
     424:	95 81       	ldd	r25, Z+5	; 0x05
     426:	dc 01       	movw	r26, r24
     428:	ed 91       	ld	r30, X+
     42a:	fc 91       	ld	r31, X
     42c:	02 84       	ldd	r0, Z+10	; 0x0a
     42e:	f3 85       	ldd	r31, Z+11	; 0x0b
     430:	e0 2d       	mov	r30, r0
     432:	19 95       	eicall
     434:	89 93       	st	Y+, r24
     436:	c0 17       	cp	r28, r16
     438:	d1 07       	cpc	r29, r17
     43a:	91 f7       	brne	.-28     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     43c:	81 e0       	ldi	r24, 0x01	; 1
     43e:	df 91       	pop	r29
     440:	cf 91       	pop	r28
     442:	1f 91       	pop	r17
     444:	0f 91       	pop	r16
     446:	ff 90       	pop	r15
     448:	ef 90       	pop	r14
     44a:	df 90       	pop	r13
     44c:	cf 90       	pop	r12
     44e:	08 95       	ret

00000450 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>:
 *            VECTOR_EULER
 *            VECTOR_LINEARACCEL
 *            VECTOR_GRAVITY]
 *  @return  vector from specified source
 */
imu::Vector<3> Adafruit_BNO055::getVector(adafruit_vector_type_t vector_type) {
     450:	af 92       	push	r10
     452:	bf 92       	push	r11
     454:	cf 92       	push	r12
     456:	df 92       	push	r13
     458:	ff 92       	push	r15
     45a:	0f 93       	push	r16
     45c:	1f 93       	push	r17
     45e:	cf 93       	push	r28
     460:	df 93       	push	r29
     462:	00 d0       	rcall	.+0      	; 0x464 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x14>
     464:	00 d0       	rcall	.+0      	; 0x466 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x16>
     466:	cd b7       	in	r28, 0x3d	; 61
     468:	de b7       	in	r29, 0x3e	; 62
     46a:	8c 01       	movw	r16, r24
     46c:	cb 01       	movw	r24, r22
     46e:	f4 2e       	mov	r15, r20
	template <uint8_t N> class Vector
	{
		public:
		Vector()
		{
			memset(p_vec, 0, sizeof(double)*N);
     470:	2c e0       	ldi	r18, 0x0C	; 12
     472:	f8 01       	movw	r30, r16
     474:	11 92       	st	Z+, r1
     476:	2a 95       	dec	r18
     478:	e9 f7       	brne	.-6      	; 0x474 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x24>
  imu::Vector<3> xyz;
  uint8_t buffer[6];
  memset(buffer, 0, 6);
     47a:	ae 01       	movw	r20, r28
     47c:	4f 5f       	subi	r20, 0xFF	; 255
     47e:	5f 4f       	sbci	r21, 0xFF	; 255
     480:	26 e0       	ldi	r18, 0x06	; 6
     482:	fa 01       	movw	r30, r20
     484:	11 92       	st	Z+, r1
     486:	2a 95       	dec	r18
     488:	e9 f7       	brne	.-6      	; 0x484 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x34>

  int16_t x, y, z;
  x = y = z = 0;

  /* Read vector data (6 bytes) */
  readLen((adafruit_bno055_reg_t)vector_type, buffer, 6);
     48a:	26 e0       	ldi	r18, 0x06	; 6
     48c:	6f 2d       	mov	r22, r15
     48e:	8d df       	rcall	.-230    	; 0x3aa <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>

  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
     490:	6a 81       	ldd	r22, Y+2	; 0x02
     492:	70 e0       	ldi	r23, 0x00	; 0
     494:	76 2f       	mov	r23, r22
     496:	66 27       	eor	r22, r22
     498:	89 81       	ldd	r24, Y+1	; 0x01
     49a:	68 2b       	or	r22, r24
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
     49c:	8c 81       	ldd	r24, Y+4	; 0x04
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	98 2f       	mov	r25, r24
     4a2:	88 27       	eor	r24, r24
     4a4:	2b 81       	ldd	r18, Y+3	; 0x03
     4a6:	6c 01       	movw	r12, r24
     4a8:	c2 2a       	or	r12, r18
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
     4aa:	8e 81       	ldd	r24, Y+6	; 0x06
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	98 2f       	mov	r25, r24
     4b0:	88 27       	eor	r24, r24
     4b2:	2d 81       	ldd	r18, Y+5	; 0x05
     4b4:	5c 01       	movw	r10, r24
     4b6:	a2 2a       	or	r10, r18

  /*!
   * Convert the value to an appropriate range (section 3.6.4)
   * and assign the value to the Vector type
   */
  switch (vector_type) {
     4b8:	f4 e1       	ldi	r31, 0x14	; 20
     4ba:	ff 16       	cp	r15, r31
     4bc:	09 f4       	brne	.+2      	; 0x4c0 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x70>
     4be:	4a c0       	rjmp	.+148    	; 0x554 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x104>
     4c0:	ff 15       	cp	r31, r15
     4c2:	40 f0       	brcs	.+16     	; 0x4d4 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x84>
     4c4:	88 e0       	ldi	r24, 0x08	; 8
     4c6:	f8 16       	cp	r15, r24
     4c8:	09 f4       	brne	.+2      	; 0x4cc <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x7c>
     4ca:	ac c0       	rjmp	.+344    	; 0x624 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x1d4>
     4cc:	ee e0       	ldi	r30, 0x0E	; 14
     4ce:	fe 16       	cp	r15, r30
     4d0:	69 f0       	breq	.+26     	; 0x4ec <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x9c>
     4d2:	43 c1       	rjmp	.+646    	; 0x75a <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
     4d4:	f8 e2       	ldi	r31, 0x28	; 40
     4d6:	ff 16       	cp	r15, r31
     4d8:	09 f4       	brne	.+2      	; 0x4dc <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x8c>
     4da:	d8 c0       	rjmp	.+432    	; 0x68c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x23c>
     4dc:	8e e2       	ldi	r24, 0x2E	; 46
     4de:	f8 16       	cp	r15, r24
     4e0:	09 f4       	brne	.+2      	; 0x4e4 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x94>
     4e2:	08 c1       	rjmp	.+528    	; 0x6f4 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x2a4>
     4e4:	ea e1       	ldi	r30, 0x1A	; 26
     4e6:	fe 12       	cpse	r15, r30
     4e8:	38 c1       	rjmp	.+624    	; 0x75a <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
     4ea:	68 c0       	rjmp	.+208    	; 0x5bc <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x16c>
  case VECTOR_MAGNETOMETER:
    /* 1uT = 16 LSB */
    xyz[0] = ((double)x) / 16.0;
     4ec:	07 2e       	mov	r0, r23
     4ee:	00 0c       	add	r0, r0
     4f0:	88 0b       	sbc	r24, r24
     4f2:	99 0b       	sbc	r25, r25
     4f4:	0e 94 39 13 	call	0x2672	; 0x2672 <__floatsisf>
     4f8:	20 e0       	ldi	r18, 0x00	; 0
     4fa:	30 e0       	ldi	r19, 0x00	; 0
     4fc:	40 e8       	ldi	r20, 0x80	; 128
     4fe:	5d e3       	ldi	r21, 0x3D	; 61
     500:	0e 94 c5 13 	call	0x278a	; 0x278a <__mulsf3>
     504:	f8 01       	movw	r30, r16
     506:	60 83       	st	Z, r22
     508:	71 83       	std	Z+1, r23	; 0x01
     50a:	82 83       	std	Z+2, r24	; 0x02
     50c:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 16.0;
     50e:	b6 01       	movw	r22, r12
     510:	dd 0c       	add	r13, r13
     512:	88 0b       	sbc	r24, r24
     514:	99 0b       	sbc	r25, r25
     516:	0e 94 39 13 	call	0x2672	; 0x2672 <__floatsisf>
     51a:	20 e0       	ldi	r18, 0x00	; 0
     51c:	30 e0       	ldi	r19, 0x00	; 0
     51e:	40 e8       	ldi	r20, 0x80	; 128
     520:	5d e3       	ldi	r21, 0x3D	; 61
     522:	0e 94 c5 13 	call	0x278a	; 0x278a <__mulsf3>
     526:	f8 01       	movw	r30, r16
     528:	64 83       	std	Z+4, r22	; 0x04
     52a:	75 83       	std	Z+5, r23	; 0x05
     52c:	86 83       	std	Z+6, r24	; 0x06
     52e:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 16.0;
     530:	b5 01       	movw	r22, r10
     532:	bb 0c       	add	r11, r11
     534:	88 0b       	sbc	r24, r24
     536:	99 0b       	sbc	r25, r25
     538:	0e 94 39 13 	call	0x2672	; 0x2672 <__floatsisf>
     53c:	20 e0       	ldi	r18, 0x00	; 0
     53e:	30 e0       	ldi	r19, 0x00	; 0
     540:	40 e8       	ldi	r20, 0x80	; 128
     542:	5d e3       	ldi	r21, 0x3D	; 61
     544:	0e 94 c5 13 	call	0x278a	; 0x278a <__mulsf3>
     548:	f8 01       	movw	r30, r16
     54a:	60 87       	std	Z+8, r22	; 0x08
     54c:	71 87       	std	Z+9, r23	; 0x09
     54e:	82 87       	std	Z+10, r24	; 0x0a
     550:	93 87       	std	Z+11, r25	; 0x0b
    break;
     552:	03 c1       	rjmp	.+518    	; 0x75a <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_GYROSCOPE:
    /* 1dps = 16 LSB */
    xyz[0] = ((double)x) / 16.0;
     554:	07 2e       	mov	r0, r23
     556:	00 0c       	add	r0, r0
     558:	88 0b       	sbc	r24, r24
     55a:	99 0b       	sbc	r25, r25
     55c:	0e 94 39 13 	call	0x2672	; 0x2672 <__floatsisf>
     560:	20 e0       	ldi	r18, 0x00	; 0
     562:	30 e0       	ldi	r19, 0x00	; 0
     564:	40 e8       	ldi	r20, 0x80	; 128
     566:	5d e3       	ldi	r21, 0x3D	; 61
     568:	0e 94 c5 13 	call	0x278a	; 0x278a <__mulsf3>
     56c:	f8 01       	movw	r30, r16
     56e:	60 83       	st	Z, r22
     570:	71 83       	std	Z+1, r23	; 0x01
     572:	82 83       	std	Z+2, r24	; 0x02
     574:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 16.0;
     576:	b6 01       	movw	r22, r12
     578:	dd 0c       	add	r13, r13
     57a:	88 0b       	sbc	r24, r24
     57c:	99 0b       	sbc	r25, r25
     57e:	0e 94 39 13 	call	0x2672	; 0x2672 <__floatsisf>
     582:	20 e0       	ldi	r18, 0x00	; 0
     584:	30 e0       	ldi	r19, 0x00	; 0
     586:	40 e8       	ldi	r20, 0x80	; 128
     588:	5d e3       	ldi	r21, 0x3D	; 61
     58a:	0e 94 c5 13 	call	0x278a	; 0x278a <__mulsf3>
     58e:	f8 01       	movw	r30, r16
     590:	64 83       	std	Z+4, r22	; 0x04
     592:	75 83       	std	Z+5, r23	; 0x05
     594:	86 83       	std	Z+6, r24	; 0x06
     596:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 16.0;
     598:	b5 01       	movw	r22, r10
     59a:	bb 0c       	add	r11, r11
     59c:	88 0b       	sbc	r24, r24
     59e:	99 0b       	sbc	r25, r25
     5a0:	0e 94 39 13 	call	0x2672	; 0x2672 <__floatsisf>
     5a4:	20 e0       	ldi	r18, 0x00	; 0
     5a6:	30 e0       	ldi	r19, 0x00	; 0
     5a8:	40 e8       	ldi	r20, 0x80	; 128
     5aa:	5d e3       	ldi	r21, 0x3D	; 61
     5ac:	0e 94 c5 13 	call	0x278a	; 0x278a <__mulsf3>
     5b0:	f8 01       	movw	r30, r16
     5b2:	60 87       	std	Z+8, r22	; 0x08
     5b4:	71 87       	std	Z+9, r23	; 0x09
     5b6:	82 87       	std	Z+10, r24	; 0x0a
     5b8:	93 87       	std	Z+11, r25	; 0x0b
    break;
     5ba:	cf c0       	rjmp	.+414    	; 0x75a <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_EULER:
    /* 1 degree = 16 LSB */
    xyz[0] = ((double)x) / 16.0;
     5bc:	07 2e       	mov	r0, r23
     5be:	00 0c       	add	r0, r0
     5c0:	88 0b       	sbc	r24, r24
     5c2:	99 0b       	sbc	r25, r25
     5c4:	0e 94 39 13 	call	0x2672	; 0x2672 <__floatsisf>
     5c8:	20 e0       	ldi	r18, 0x00	; 0
     5ca:	30 e0       	ldi	r19, 0x00	; 0
     5cc:	40 e8       	ldi	r20, 0x80	; 128
     5ce:	5d e3       	ldi	r21, 0x3D	; 61
     5d0:	0e 94 c5 13 	call	0x278a	; 0x278a <__mulsf3>
     5d4:	f8 01       	movw	r30, r16
     5d6:	60 83       	st	Z, r22
     5d8:	71 83       	std	Z+1, r23	; 0x01
     5da:	82 83       	std	Z+2, r24	; 0x02
     5dc:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 16.0;
     5de:	b6 01       	movw	r22, r12
     5e0:	dd 0c       	add	r13, r13
     5e2:	88 0b       	sbc	r24, r24
     5e4:	99 0b       	sbc	r25, r25
     5e6:	0e 94 39 13 	call	0x2672	; 0x2672 <__floatsisf>
     5ea:	20 e0       	ldi	r18, 0x00	; 0
     5ec:	30 e0       	ldi	r19, 0x00	; 0
     5ee:	40 e8       	ldi	r20, 0x80	; 128
     5f0:	5d e3       	ldi	r21, 0x3D	; 61
     5f2:	0e 94 c5 13 	call	0x278a	; 0x278a <__mulsf3>
     5f6:	f8 01       	movw	r30, r16
     5f8:	64 83       	std	Z+4, r22	; 0x04
     5fa:	75 83       	std	Z+5, r23	; 0x05
     5fc:	86 83       	std	Z+6, r24	; 0x06
     5fe:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 16.0;
     600:	b5 01       	movw	r22, r10
     602:	bb 0c       	add	r11, r11
     604:	88 0b       	sbc	r24, r24
     606:	99 0b       	sbc	r25, r25
     608:	0e 94 39 13 	call	0x2672	; 0x2672 <__floatsisf>
     60c:	20 e0       	ldi	r18, 0x00	; 0
     60e:	30 e0       	ldi	r19, 0x00	; 0
     610:	40 e8       	ldi	r20, 0x80	; 128
     612:	5d e3       	ldi	r21, 0x3D	; 61
     614:	0e 94 c5 13 	call	0x278a	; 0x278a <__mulsf3>
     618:	f8 01       	movw	r30, r16
     61a:	60 87       	std	Z+8, r22	; 0x08
     61c:	71 87       	std	Z+9, r23	; 0x09
     61e:	82 87       	std	Z+10, r24	; 0x0a
     620:	93 87       	std	Z+11, r25	; 0x0b
    break;
     622:	9b c0       	rjmp	.+310    	; 0x75a <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_ACCELEROMETER:
    /* 1m/s^2 = 100 LSB */
    xyz[0] = ((double)x) / 100.0;
     624:	07 2e       	mov	r0, r23
     626:	00 0c       	add	r0, r0
     628:	88 0b       	sbc	r24, r24
     62a:	99 0b       	sbc	r25, r25
     62c:	0e 94 39 13 	call	0x2672	; 0x2672 <__floatsisf>
     630:	20 e0       	ldi	r18, 0x00	; 0
     632:	30 e0       	ldi	r19, 0x00	; 0
     634:	48 ec       	ldi	r20, 0xC8	; 200
     636:	52 e4       	ldi	r21, 0x42	; 66
     638:	0e 94 cf 12 	call	0x259e	; 0x259e <__divsf3>
     63c:	f8 01       	movw	r30, r16
     63e:	60 83       	st	Z, r22
     640:	71 83       	std	Z+1, r23	; 0x01
     642:	82 83       	std	Z+2, r24	; 0x02
     644:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 100.0;
     646:	b6 01       	movw	r22, r12
     648:	dd 0c       	add	r13, r13
     64a:	88 0b       	sbc	r24, r24
     64c:	99 0b       	sbc	r25, r25
     64e:	0e 94 39 13 	call	0x2672	; 0x2672 <__floatsisf>
     652:	20 e0       	ldi	r18, 0x00	; 0
     654:	30 e0       	ldi	r19, 0x00	; 0
     656:	48 ec       	ldi	r20, 0xC8	; 200
     658:	52 e4       	ldi	r21, 0x42	; 66
     65a:	0e 94 cf 12 	call	0x259e	; 0x259e <__divsf3>
     65e:	f8 01       	movw	r30, r16
     660:	64 83       	std	Z+4, r22	; 0x04
     662:	75 83       	std	Z+5, r23	; 0x05
     664:	86 83       	std	Z+6, r24	; 0x06
     666:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 100.0;
     668:	b5 01       	movw	r22, r10
     66a:	bb 0c       	add	r11, r11
     66c:	88 0b       	sbc	r24, r24
     66e:	99 0b       	sbc	r25, r25
     670:	0e 94 39 13 	call	0x2672	; 0x2672 <__floatsisf>
     674:	20 e0       	ldi	r18, 0x00	; 0
     676:	30 e0       	ldi	r19, 0x00	; 0
     678:	48 ec       	ldi	r20, 0xC8	; 200
     67a:	52 e4       	ldi	r21, 0x42	; 66
     67c:	0e 94 cf 12 	call	0x259e	; 0x259e <__divsf3>
     680:	f8 01       	movw	r30, r16
     682:	60 87       	std	Z+8, r22	; 0x08
     684:	71 87       	std	Z+9, r23	; 0x09
     686:	82 87       	std	Z+10, r24	; 0x0a
     688:	93 87       	std	Z+11, r25	; 0x0b
    break;
     68a:	67 c0       	rjmp	.+206    	; 0x75a <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_LINEARACCEL:
    /* 1m/s^2 = 100 LSB */
    xyz[0] = ((double)x) / 100.0;
     68c:	07 2e       	mov	r0, r23
     68e:	00 0c       	add	r0, r0
     690:	88 0b       	sbc	r24, r24
     692:	99 0b       	sbc	r25, r25
     694:	0e 94 39 13 	call	0x2672	; 0x2672 <__floatsisf>
     698:	20 e0       	ldi	r18, 0x00	; 0
     69a:	30 e0       	ldi	r19, 0x00	; 0
     69c:	48 ec       	ldi	r20, 0xC8	; 200
     69e:	52 e4       	ldi	r21, 0x42	; 66
     6a0:	0e 94 cf 12 	call	0x259e	; 0x259e <__divsf3>
     6a4:	f8 01       	movw	r30, r16
     6a6:	60 83       	st	Z, r22
     6a8:	71 83       	std	Z+1, r23	; 0x01
     6aa:	82 83       	std	Z+2, r24	; 0x02
     6ac:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 100.0;
     6ae:	b6 01       	movw	r22, r12
     6b0:	dd 0c       	add	r13, r13
     6b2:	88 0b       	sbc	r24, r24
     6b4:	99 0b       	sbc	r25, r25
     6b6:	0e 94 39 13 	call	0x2672	; 0x2672 <__floatsisf>
     6ba:	20 e0       	ldi	r18, 0x00	; 0
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	48 ec       	ldi	r20, 0xC8	; 200
     6c0:	52 e4       	ldi	r21, 0x42	; 66
     6c2:	0e 94 cf 12 	call	0x259e	; 0x259e <__divsf3>
     6c6:	f8 01       	movw	r30, r16
     6c8:	64 83       	std	Z+4, r22	; 0x04
     6ca:	75 83       	std	Z+5, r23	; 0x05
     6cc:	86 83       	std	Z+6, r24	; 0x06
     6ce:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 100.0;
     6d0:	b5 01       	movw	r22, r10
     6d2:	bb 0c       	add	r11, r11
     6d4:	88 0b       	sbc	r24, r24
     6d6:	99 0b       	sbc	r25, r25
     6d8:	0e 94 39 13 	call	0x2672	; 0x2672 <__floatsisf>
     6dc:	20 e0       	ldi	r18, 0x00	; 0
     6de:	30 e0       	ldi	r19, 0x00	; 0
     6e0:	48 ec       	ldi	r20, 0xC8	; 200
     6e2:	52 e4       	ldi	r21, 0x42	; 66
     6e4:	0e 94 cf 12 	call	0x259e	; 0x259e <__divsf3>
     6e8:	f8 01       	movw	r30, r16
     6ea:	60 87       	std	Z+8, r22	; 0x08
     6ec:	71 87       	std	Z+9, r23	; 0x09
     6ee:	82 87       	std	Z+10, r24	; 0x0a
     6f0:	93 87       	std	Z+11, r25	; 0x0b
    break;
     6f2:	33 c0       	rjmp	.+102    	; 0x75a <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_GRAVITY:
    /* 1m/s^2 = 100 LSB */
    xyz[0] = ((double)x) / 100.0;
     6f4:	07 2e       	mov	r0, r23
     6f6:	00 0c       	add	r0, r0
     6f8:	88 0b       	sbc	r24, r24
     6fa:	99 0b       	sbc	r25, r25
     6fc:	0e 94 39 13 	call	0x2672	; 0x2672 <__floatsisf>
     700:	20 e0       	ldi	r18, 0x00	; 0
     702:	30 e0       	ldi	r19, 0x00	; 0
     704:	48 ec       	ldi	r20, 0xC8	; 200
     706:	52 e4       	ldi	r21, 0x42	; 66
     708:	0e 94 cf 12 	call	0x259e	; 0x259e <__divsf3>
     70c:	f8 01       	movw	r30, r16
     70e:	60 83       	st	Z, r22
     710:	71 83       	std	Z+1, r23	; 0x01
     712:	82 83       	std	Z+2, r24	; 0x02
     714:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 100.0;
     716:	b6 01       	movw	r22, r12
     718:	dd 0c       	add	r13, r13
     71a:	88 0b       	sbc	r24, r24
     71c:	99 0b       	sbc	r25, r25
     71e:	0e 94 39 13 	call	0x2672	; 0x2672 <__floatsisf>
     722:	20 e0       	ldi	r18, 0x00	; 0
     724:	30 e0       	ldi	r19, 0x00	; 0
     726:	48 ec       	ldi	r20, 0xC8	; 200
     728:	52 e4       	ldi	r21, 0x42	; 66
     72a:	0e 94 cf 12 	call	0x259e	; 0x259e <__divsf3>
     72e:	f8 01       	movw	r30, r16
     730:	64 83       	std	Z+4, r22	; 0x04
     732:	75 83       	std	Z+5, r23	; 0x05
     734:	86 83       	std	Z+6, r24	; 0x06
     736:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 100.0;
     738:	b5 01       	movw	r22, r10
     73a:	bb 0c       	add	r11, r11
     73c:	88 0b       	sbc	r24, r24
     73e:	99 0b       	sbc	r25, r25
     740:	0e 94 39 13 	call	0x2672	; 0x2672 <__floatsisf>
     744:	20 e0       	ldi	r18, 0x00	; 0
     746:	30 e0       	ldi	r19, 0x00	; 0
     748:	48 ec       	ldi	r20, 0xC8	; 200
     74a:	52 e4       	ldi	r21, 0x42	; 66
     74c:	0e 94 cf 12 	call	0x259e	; 0x259e <__divsf3>
     750:	f8 01       	movw	r30, r16
     752:	60 87       	std	Z+8, r22	; 0x08
     754:	71 87       	std	Z+9, r23	; 0x09
     756:	82 87       	std	Z+10, r24	; 0x0a
     758:	93 87       	std	Z+11, r25	; 0x0b
    break;
  }

  return xyz;
}
     75a:	c8 01       	movw	r24, r16
     75c:	26 96       	adiw	r28, 0x06	; 6
     75e:	0f b6       	in	r0, 0x3f	; 63
     760:	f8 94       	cli
     762:	de bf       	out	0x3e, r29	; 62
     764:	0f be       	out	0x3f, r0	; 63
     766:	cd bf       	out	0x3d, r28	; 61
     768:	df 91       	pop	r29
     76a:	cf 91       	pop	r28
     76c:	1f 91       	pop	r17
     76e:	0f 91       	pop	r16
     770:	ff 90       	pop	r15
     772:	df 90       	pop	r13
     774:	cf 90       	pop	r12
     776:	bf 90       	pop	r11
     778:	af 90       	pop	r10
     77a:	08 95       	ret

0000077c <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>:
/*!
 *  @brief  Reads the sensor and returns the data as a sensors_event_t
 *  @param  event
 *  @return always returns true
 */
bool Adafruit_BNO055::getEvent(sensors_event_t *event) {
     77c:	0f 93       	push	r16
     77e:	1f 93       	push	r17
     780:	cf 93       	push	r28
     782:	df 93       	push	r29
     784:	cd b7       	in	r28, 0x3d	; 61
     786:	de b7       	in	r29, 0x3e	; 62
     788:	2c 97       	sbiw	r28, 0x0c	; 12
     78a:	0f b6       	in	r0, 0x3f	; 63
     78c:	f8 94       	cli
     78e:	de bf       	out	0x3e, r29	; 62
     790:	0f be       	out	0x3f, r0	; 63
     792:	cd bf       	out	0x3d, r28	; 61
     794:	8b 01       	movw	r16, r22
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
     796:	20 e2       	ldi	r18, 0x20	; 32
     798:	fb 01       	movw	r30, r22
     79a:	11 92       	st	Z+, r1
     79c:	2a 95       	dec	r18
     79e:	e9 f7       	brne	.-6      	; 0x79a <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t+0x1e>

  event->version = sizeof(sensors_event_t);
     7a0:	40 e2       	ldi	r20, 0x20	; 32
     7a2:	50 e0       	ldi	r21, 0x00	; 0
     7a4:	60 e0       	ldi	r22, 0x00	; 0
     7a6:	70 e0       	ldi	r23, 0x00	; 0
     7a8:	f8 01       	movw	r30, r16
     7aa:	40 83       	st	Z, r20
     7ac:	51 83       	std	Z+1, r21	; 0x01
     7ae:	62 83       	std	Z+2, r22	; 0x02
     7b0:	73 83       	std	Z+3, r23	; 0x03
  event->sensor_id = _sensorID;
     7b2:	fc 01       	movw	r30, r24
     7b4:	46 81       	ldd	r20, Z+6	; 0x06
     7b6:	57 81       	ldd	r21, Z+7	; 0x07
     7b8:	60 85       	ldd	r22, Z+8	; 0x08
     7ba:	71 85       	ldd	r23, Z+9	; 0x09
     7bc:	f8 01       	movw	r30, r16
     7be:	44 83       	std	Z+4, r20	; 0x04
     7c0:	55 83       	std	Z+5, r21	; 0x05
     7c2:	66 83       	std	Z+6, r22	; 0x06
     7c4:	77 83       	std	Z+7, r23	; 0x07
  event->type = SENSOR_TYPE_ORIENTATION;
     7c6:	43 e0       	ldi	r20, 0x03	; 3
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	60 e0       	ldi	r22, 0x00	; 0
     7cc:	70 e0       	ldi	r23, 0x00	; 0
     7ce:	40 87       	std	Z+8, r20	; 0x08
     7d0:	51 87       	std	Z+9, r21	; 0x09
     7d2:	62 87       	std	Z+10, r22	; 0x0a
     7d4:	73 87       	std	Z+11, r23	; 0x0b
  //event->timestamp = millis();

  /* Get a Euler angle sample for orientation */
  imu::Vector<3> euler = getVector(Adafruit_BNO055::VECTOR_EULER);
     7d6:	4a e1       	ldi	r20, 0x1A	; 26
     7d8:	bc 01       	movw	r22, r24
     7da:	ce 01       	movw	r24, r28
     7dc:	01 96       	adiw	r24, 0x01	; 1
     7de:	38 de       	rcall	.-912    	; 0x450 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
  event->orientation.x = euler.x();
     7e0:	89 81       	ldd	r24, Y+1	; 0x01
     7e2:	9a 81       	ldd	r25, Y+2	; 0x02
     7e4:	ab 81       	ldd	r26, Y+3	; 0x03
     7e6:	bc 81       	ldd	r27, Y+4	; 0x04
     7e8:	f8 01       	movw	r30, r16
     7ea:	80 8b       	std	Z+16, r24	; 0x10
     7ec:	91 8b       	std	Z+17, r25	; 0x11
     7ee:	a2 8b       	std	Z+18, r26	; 0x12
     7f0:	b3 8b       	std	Z+19, r27	; 0x13
  event->orientation.y = euler.y();
     7f2:	8d 81       	ldd	r24, Y+5	; 0x05
     7f4:	9e 81       	ldd	r25, Y+6	; 0x06
     7f6:	af 81       	ldd	r26, Y+7	; 0x07
     7f8:	b8 85       	ldd	r27, Y+8	; 0x08
     7fa:	84 8b       	std	Z+20, r24	; 0x14
     7fc:	95 8b       	std	Z+21, r25	; 0x15
     7fe:	a6 8b       	std	Z+22, r26	; 0x16
     800:	b7 8b       	std	Z+23, r27	; 0x17
  event->orientation.z = euler.z();
     802:	89 85       	ldd	r24, Y+9	; 0x09
     804:	9a 85       	ldd	r25, Y+10	; 0x0a
     806:	ab 85       	ldd	r26, Y+11	; 0x0b
     808:	bc 85       	ldd	r27, Y+12	; 0x0c
     80a:	80 8f       	std	Z+24, r24	; 0x18
     80c:	91 8f       	std	Z+25, r25	; 0x19
     80e:	a2 8f       	std	Z+26, r26	; 0x1a
     810:	b3 8f       	std	Z+27, r27	; 0x1b

  return true;
}
     812:	81 e0       	ldi	r24, 0x01	; 1
     814:	2c 96       	adiw	r28, 0x0c	; 12
     816:	0f b6       	in	r0, 0x3f	; 63
     818:	f8 94       	cli
     81a:	de bf       	out	0x3e, r29	; 62
     81c:	0f be       	out	0x3f, r0	; 63
     81e:	cd bf       	out	0x3d, r28	; 61
     820:	df 91       	pop	r29
     822:	cf 91       	pop	r28
     824:	1f 91       	pop	r17
     826:	0f 91       	pop	r16
     828:	08 95       	ret

0000082a <_Z14RunPingCommandPKhh>:
#include <stddef.h>

uint8_t* const SendDataBuffer = (uint8_t*)(&EtherComm::buffer[2]);

void RunPingCommand(const uint8_t* data, uint8_t len){
  if(len == 1){
     82a:	61 30       	cpi	r22, 0x01	; 1
     82c:	49 f4       	brne	.+18     	; 0x840 <_Z14RunPingCommandPKhh+0x16>
     82e:	fc 01       	movw	r30, r24
    SendDataBuffer[0] = data[0];
     830:	80 81       	ld	r24, Z
     832:	e0 91 e8 02 	lds	r30, 0x02E8	; 0x8002e8 <__data_end>
     836:	f0 91 e9 02 	lds	r31, 0x02E9	; 0x8002e9 <__data_end+0x1>
     83a:	80 83       	st	Z, r24
    EtherComm::SendCommand(CMD_Ping, 1);
     83c:	80 e0       	ldi	r24, 0x00	; 0
     83e:	d9 c6       	rjmp	.+3506   	; 0x15f2 <_ZN9EtherComm11SendCommandEhh>
     840:	08 95       	ret

00000842 <_Z14RunEchoCommandPKhh>:
  }
}

void RunEchoCommand(const uint8_t* data, uint8_t len){
  uint8_t* index = SendDataBuffer;
     842:	40 91 e8 02 	lds	r20, 0x02E8	; 0x8002e8 <__data_end>
     846:	30 91 e9 02 	lds	r19, 0x02E9	; 0x8002e9 <__data_end+0x1>
  uint8_t dataLen = len;
  while(len-- > 0){
     84a:	2f ef       	ldi	r18, 0xFF	; 255
     84c:	26 0f       	add	r18, r22
     84e:	66 23       	and	r22, r22
     850:	41 f0       	breq	.+16     	; 0x862 <_Z14RunEchoCommandPKhh+0x20>
     852:	a8 2f       	mov	r26, r24
     854:	b9 2f       	mov	r27, r25
     856:	e4 2f       	mov	r30, r20
     858:	f3 2f       	mov	r31, r19
    *(index++) = *(data++);
     85a:	8d 91       	ld	r24, X+
     85c:	81 93       	st	Z+, r24
}

void RunEchoCommand(const uint8_t* data, uint8_t len){
  uint8_t* index = SendDataBuffer;
  uint8_t dataLen = len;
  while(len-- > 0){
     85e:	21 50       	subi	r18, 0x01	; 1
     860:	e0 f7       	brcc	.-8      	; 0x85a <_Z14RunEchoCommandPKhh+0x18>
    *(index++) = *(data++);
  }
  
  EtherComm::SendCommand(CMD_Echo, dataLen);
     862:	81 e0       	ldi	r24, 0x01	; 1
     864:	c6 c6       	rjmp	.+3468   	; 0x15f2 <_ZN9EtherComm11SendCommandEhh>
     866:	08 95       	ret

00000868 <_Z13RunLedCommandPKhh>:
}

void RunLedCommand(const uint8_t* data, uint8_t len){
	if(len == 1){
     868:	61 30       	cpi	r22, 0x01	; 1
     86a:	51 f4       	brne	.+20     	; 0x880 <_Z13RunLedCommandPKhh+0x18>
		uint8_t state = *data;
     86c:	fc 01       	movw	r30, r24
     86e:	90 81       	ld	r25, Z
		if(state <= 1){
     870:	92 30       	cpi	r25, 0x02	; 2
     872:	30 f4       	brcc	.+12     	; 0x880 <_Z13RunLedCommandPKhh+0x18>
			rov.SetLed(state > 0);
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	91 11       	cpse	r25, r1
     878:	01 c0       	rjmp	.+2      	; 0x87c <_Z13RunLedCommandPKhh+0x14>
     87a:	80 e0       	ldi	r24, 0x00	; 0
     87c:	0c 94 2c 12 	jmp	0x2458	; 0x2458 <_ZN5Robot6SetLedEb>
     880:	08 95       	ret

00000882 <_Z22RunUpdateDeviceCommandPKhh>:
		}
	}
}

void RunUpdateDeviceCommand(const uint8_t* data, uint8_t len){
	if(len > 0){
     882:	66 23       	and	r22, r22
     884:	c1 f0       	breq	.+48     	; 0x8b6 <_Z22RunUpdateDeviceCommandPKhh+0x34>
		if(Robot::devices[data[0]] != NULL){
     886:	dc 01       	movw	r26, r24
     888:	ec 91       	ld	r30, X
     88a:	f0 e0       	ldi	r31, 0x00	; 0
     88c:	ee 0f       	add	r30, r30
     88e:	ff 1f       	adc	r31, r31
     890:	e3 52       	subi	r30, 0x23	; 35
     892:	f9 4f       	sbci	r31, 0xF9	; 249
     894:	a0 81       	ld	r26, Z
     896:	b1 81       	ldd	r27, Z+1	; 0x01
     898:	10 97       	sbiw	r26, 0x00	; 0
     89a:	69 f0       	breq	.+26     	; 0x8b6 <_Z22RunUpdateDeviceCommandPKhh+0x34>
     89c:	46 2f       	mov	r20, r22
     89e:	bc 01       	movw	r22, r24
			Robot::devices[data[0]]->Update(data + 1, len - 1);
     8a0:	41 50       	subi	r20, 0x01	; 1
     8a2:	6f 5f       	subi	r22, 0xFF	; 255
     8a4:	7f 4f       	sbci	r23, 0xFF	; 255
     8a6:	ed 91       	ld	r30, X+
     8a8:	fc 91       	ld	r31, X
     8aa:	11 97       	sbiw	r26, 0x01	; 1
     8ac:	01 90       	ld	r0, Z+
     8ae:	f0 81       	ld	r31, Z
     8b0:	e0 2d       	mov	r30, r0
     8b2:	cd 01       	movw	r24, r26
     8b4:	19 95       	eicall
     8b6:	08 95       	ret

000008b8 <_ZN9EtherComm15CommandReceivedEhPKhh>:
		}
	}
}

void EtherComm::CommandReceived(uint8_t command, const uint8_t* data, uint8_t len){
     8b8:	9b 01       	movw	r18, r22
  switch(command){
     8ba:	81 30       	cpi	r24, 0x01	; 1
     8bc:	51 f0       	breq	.+20     	; 0x8d2 <_ZN9EtherComm15CommandReceivedEhPKhh+0x1a>
     8be:	28 f0       	brcs	.+10     	; 0x8ca <_ZN9EtherComm15CommandReceivedEhPKhh+0x12>
     8c0:	82 30       	cpi	r24, 0x02	; 2
     8c2:	59 f0       	breq	.+22     	; 0x8da <_ZN9EtherComm15CommandReceivedEhPKhh+0x22>
     8c4:	83 30       	cpi	r24, 0x03	; 3
     8c6:	69 f0       	breq	.+26     	; 0x8e2 <_ZN9EtherComm15CommandReceivedEhPKhh+0x2a>
     8c8:	08 95       	ret
    case CMD_Ping: RunPingCommand(data, len); break;
     8ca:	64 2f       	mov	r22, r20
     8cc:	c9 01       	movw	r24, r18
     8ce:	ad cf       	rjmp	.-166    	; 0x82a <_Z14RunPingCommandPKhh>
     8d0:	08 95       	ret
    case CMD_Echo: RunEchoCommand(data, len); break;
     8d2:	64 2f       	mov	r22, r20
     8d4:	c9 01       	movw	r24, r18
     8d6:	b5 cf       	rjmp	.-150    	; 0x842 <_Z14RunEchoCommandPKhh>
     8d8:	08 95       	ret
	case CMD_Led: RunLedCommand(data, len); break;
     8da:	64 2f       	mov	r22, r20
     8dc:	c9 01       	movw	r24, r18
     8de:	c4 cf       	rjmp	.-120    	; 0x868 <_Z13RunLedCommandPKhh>
     8e0:	08 95       	ret
	case CMD_UpdateDevice: RunUpdateDeviceCommand(data, len); break;
     8e2:	64 2f       	mov	r22, r20
     8e4:	c9 01       	movw	r24, r18
     8e6:	cd cf       	rjmp	.-102    	; 0x882 <_Z22RunUpdateDeviceCommandPKhh>
     8e8:	08 95       	ret

000008ea <_GLOBAL__sub_I__Z14RunPingCommandPKhh>:
     8ea:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
#include "EtherComm.h"
#include "Robot.h"
#include "Commands.h"
#include <stddef.h>

uint8_t* const SendDataBuffer = (uint8_t*)(&EtherComm::buffer[2]);
     8ee:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
     8f2:	02 96       	adiw	r24, 0x02	; 2
     8f4:	90 93 e9 02 	sts	0x02E9, r25	; 0x8002e9 <__data_end+0x1>
     8f8:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <__data_end>
     8fc:	08 95       	ret

000008fe <_ZL10enableChipv>:
static Register* selectPort;
static uint8_t selectPin;

static void enableChip () {
	//cli();
	SetLow(*selectPort, selectPin); //digitalWrite(selectPin, LOW);
     8fe:	e0 91 ee 02 	lds	r30, 0x02EE	; 0x8002ee <_ZL10selectPort>
     902:	f0 91 ef 02 	lds	r31, 0x02EF	; 0x8002ef <_ZL10selectPort+0x1>
     906:	90 81       	ld	r25, Z
     908:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <_ZL9selectPin>
     90c:	80 95       	com	r24
     90e:	89 23       	and	r24, r25
     910:	80 83       	st	Z, r24
     912:	08 95       	ret

00000914 <_ZL11disableChipv>:
}

static void disableChip () {
	SetHigh(*selectPort, selectPin); //digitalWrite(selectPin, HIGH);
     914:	e0 91 ee 02 	lds	r30, 0x02EE	; 0x8002ee <_ZL10selectPort>
     918:	f0 91 ef 02 	lds	r31, 0x02EF	; 0x8002ef <_ZL10selectPort+0x1>
     91c:	90 81       	ld	r25, Z
     91e:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <_ZL9selectPin>
     922:	89 2b       	or	r24, r25
     924:	80 83       	st	Z, r24
     926:	08 95       	ret

00000928 <_ZL6readOphh>:

	SetOutput(csDDR, selectPin);
	disableChip();
}

static uint8_t readOp (uint8_t op, uint8_t address) {
     928:	cf 93       	push	r28
     92a:	df 93       	push	r29
     92c:	d8 2f       	mov	r29, r24
     92e:	c6 2f       	mov	r28, r22
    enableChip();
     930:	e6 df       	rcall	.-52     	; 0x8fe <_ZL10enableChipv>
    SPI.write8(op | (address & ADDR_MASK));
     932:	8c 2f       	mov	r24, r28
     934:	cf 71       	andi	r28, 0x1F	; 31
     936:	cd 2b       	or	r28, r29
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     938:	ce bd       	out	0x2e, r28	; 46
		asm volatile("nop");
     93a:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     93c:	0d b4       	in	r0, 0x2d	; 45
     93e:	07 fe       	sbrs	r0, 7
     940:	fd cf       	rjmp	.-6      	; 0x93c <_ZL6readOphh+0x14>
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     942:	1e bc       	out	0x2e, r1	; 46
		asm volatile("nop");
     944:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     946:	0d b4       	in	r0, 0x2d	; 45
     948:	07 fe       	sbrs	r0, 7
     94a:	fd cf       	rjmp	.-6      	; 0x946 <_ZL6readOphh+0x1e>
	}

	//write8, excepts also returns the received byte
	static uint8_t read_write8(uint8_t data){
		write8(data);
		return SPDR;
     94c:	ce b5       	in	r28, 0x2e	; 46
    uint8_t result = SPI.read_write8(0x00);
    if (address & 0x80)
     94e:	88 23       	and	r24, r24
     950:	34 f4       	brge	.+12     	; 0x95e <_ZL6readOphh+0x36>
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     952:	1e bc       	out	0x2e, r1	; 46
		asm volatile("nop");
     954:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     956:	0d b4       	in	r0, 0x2d	; 45
     958:	07 fe       	sbrs	r0, 7
     95a:	fd cf       	rjmp	.-6      	; 0x956 <_ZL6readOphh+0x2e>
        result = SPI.read_write8(0x00);
    disableChip();
     95c:	ce b5       	in	r28, 0x2e	; 46
     95e:	da df       	rcall	.-76     	; 0x914 <_ZL11disableChipv>
    return result;
}
     960:	8c 2f       	mov	r24, r28
     962:	df 91       	pop	r29
     964:	cf 91       	pop	r28
     966:	08 95       	ret

00000968 <_ZL7writeOphhh>:

static void writeOp (uint8_t op, uint8_t address, uint8_t data) {
     968:	1f 93       	push	r17
     96a:	cf 93       	push	r28
     96c:	df 93       	push	r29
     96e:	c8 2f       	mov	r28, r24
     970:	d6 2f       	mov	r29, r22
     972:	14 2f       	mov	r17, r20
    enableChip();
     974:	c4 df       	rcall	.-120    	; 0x8fe <_ZL10enableChipv>
    SPI.write8(op | (address & ADDR_MASK));
     976:	df 71       	andi	r29, 0x1F	; 31
     978:	cd 2b       	or	r28, r29
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     97a:	ce bd       	out	0x2e, r28	; 46
		asm volatile("nop");
     97c:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     97e:	0d b4       	in	r0, 0x2d	; 45
     980:	07 fe       	sbrs	r0, 7
     982:	fd cf       	rjmp	.-6      	; 0x97e <_ZL7writeOphhh+0x16>
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     984:	1e bd       	out	0x2e, r17	; 46
		asm volatile("nop");
     986:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     988:	0d b4       	in	r0, 0x2d	; 45
     98a:	07 fe       	sbrs	r0, 7
    SPI.write8(data);
    disableChip();
     98c:	fd cf       	rjmp	.-6      	; 0x988 <_ZL7writeOphhh+0x20>
     98e:	c2 df       	rcall	.-124    	; 0x914 <_ZL11disableChipv>
}
     990:	df 91       	pop	r29
     992:	cf 91       	pop	r28
     994:	1f 91       	pop	r17
     996:	08 95       	ret

00000998 <_ZL7readBufjPh>:

static void readBuf(uint16_t len, uint8_t* data) {
     998:	0f 93       	push	r16
     99a:	1f 93       	push	r17
     99c:	cf 93       	push	r28
     99e:	df 93       	push	r29
     9a0:	ec 01       	movw	r28, r24
     9a2:	8b 01       	movw	r16, r22
    enableChip();
     9a4:	ac df       	rcall	.-168    	; 0x8fe <_ZL10enableChipv>
    if (len != 0) {
     9a6:	20 97       	sbiw	r28, 0x00	; 0
     9a8:	99 f0       	breq	.+38     	; 0x9d0 <_ZL7readBufjPh+0x38>
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     9aa:	8a e3       	ldi	r24, 0x3A	; 58
     9ac:	8e bd       	out	0x2e, r24	; 46
		asm volatile("nop");
     9ae:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     9b0:	0d b4       	in	r0, 0x2d	; 45
     9b2:	07 fe       	sbrs	r0, 7
     9b4:	fd cf       	rjmp	.-6      	; 0x9b0 <_ZL7readBufjPh+0x18>
     9b6:	f8 01       	movw	r30, r16
     9b8:	b8 01       	movw	r22, r16
     9ba:	6c 0f       	add	r22, r28
     9bc:	7d 1f       	adc	r23, r29
	static void read(void *buf, uint16_t nbyte, uint8_t dataSend = 0){
		if(nbyte == 0) return;
		
		uint8_t* buff = (uint8_t*)buf;
		while(nbyte--){
			SPDR = dataSend;
     9be:	1e bc       	out	0x2e, r1	; 46
			//asm volatile("nop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\n");
			while(!(SPSR & _BV(SPIF)));
     9c0:	0d b4       	in	r0, 0x2d	; 45
     9c2:	07 fe       	sbrs	r0, 7
     9c4:	fd cf       	rjmp	.-6      	; 0x9c0 <_ZL7readBufjPh+0x28>
			*buff++ = SPDR;
     9c6:	9e b5       	in	r25, 0x2e	; 46
     9c8:	91 93       	st	Z+, r25
		
	static void read(void *buf, uint16_t nbyte, uint8_t dataSend = 0){
		if(nbyte == 0) return;
		
		uint8_t* buff = (uint8_t*)buf;
		while(nbyte--){
     9ca:	6e 17       	cp	r22, r30
     9cc:	7f 07       	cpc	r23, r31
        SPI.write8(ENC28J60_READ_BUF_MEM);
		SPI.read(data, len);
    }
    disableChip();
     9ce:	b9 f7       	brne	.-18     	; 0x9be <_ZL7readBufjPh+0x26>
     9d0:	a1 df       	rcall	.-190    	; 0x914 <_ZL11disableChipv>
}
     9d2:	df 91       	pop	r29
     9d4:	cf 91       	pop	r28
     9d6:	1f 91       	pop	r17
     9d8:	0f 91       	pop	r16
     9da:	08 95       	ret

000009dc <_ZL7SetBankh>:
        SPI.write(data, len);
    }
    disableChip();
}

static void SetBank (uint8_t address) {
     9dc:	1f 93       	push	r17
     9de:	cf 93       	push	r28
     9e0:	df 93       	push	r29
     9e2:	18 2f       	mov	r17, r24
     9e4:	10 76       	andi	r17, 0x60	; 96
    if ((address & BANK_MASK) != Enc28j60Bank) {
     9e6:	c1 2f       	mov	r28, r17
     9e8:	d0 e0       	ldi	r29, 0x00	; 0
     9ea:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <_ZL12Enc28j60Bank>
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	c8 17       	cp	r28, r24
     9f2:	d9 07       	cpc	r29, r25
     9f4:	a1 f0       	breq	.+40     	; 0xa1e <_ZL7SetBankh+0x42>
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_BSEL1|ECON1_BSEL0);
     9f6:	43 e0       	ldi	r20, 0x03	; 3
     9f8:	6f e1       	ldi	r22, 0x1F	; 31
     9fa:	80 ea       	ldi	r24, 0xA0	; 160
     9fc:	b5 df       	rcall	.-150    	; 0x968 <_ZL7writeOphhh>
        Enc28j60Bank = address & BANK_MASK;
     9fe:	10 93 f0 02 	sts	0x02F0, r17	; 0x8002f0 <_ZL12Enc28j60Bank>
        writeOp(ENC28J60_BIT_FIELD_SET, ECON1, Enc28j60Bank>>5);
     a02:	ae 01       	movw	r20, r28
     a04:	55 95       	asr	r21
     a06:	47 95       	ror	r20
     a08:	55 95       	asr	r21
     a0a:	47 95       	ror	r20
     a0c:	55 95       	asr	r21
     a0e:	47 95       	ror	r20
     a10:	55 95       	asr	r21
     a12:	47 95       	ror	r20
     a14:	55 95       	asr	r21
     a16:	47 95       	ror	r20
     a18:	6f e1       	ldi	r22, 0x1F	; 31
     a1a:	80 e8       	ldi	r24, 0x80	; 128
     a1c:	a5 df       	rcall	.-182    	; 0x968 <_ZL7writeOphhh>
    }
}
     a1e:	df 91       	pop	r29
     a20:	cf 91       	pop	r28
     a22:	1f 91       	pop	r17
     a24:	08 95       	ret

00000a26 <_ZL11readRegByteh>:

static uint8_t readRegByte (uint8_t address) {
     a26:	cf 93       	push	r28
     a28:	c8 2f       	mov	r28, r24
    SetBank(address);
     a2a:	d8 df       	rcall	.-80     	; 0x9dc <_ZL7SetBankh>
    return readOp(ENC28J60_READ_CTRL_REG, address);
     a2c:	6c 2f       	mov	r22, r28
     a2e:	80 e0       	ldi	r24, 0x00	; 0
     a30:	7b df       	rcall	.-266    	; 0x928 <_ZL6readOphh>
}
     a32:	cf 91       	pop	r28
     a34:	08 95       	ret

00000a36 <_ZL12writeRegBytehh>:

static void writeRegByte (uint8_t address, uint8_t data) {
     a36:	cf 93       	push	r28
     a38:	df 93       	push	r29
     a3a:	c8 2f       	mov	r28, r24
     a3c:	d6 2f       	mov	r29, r22
    SetBank(address);
     a3e:	ce df       	rcall	.-100    	; 0x9dc <_ZL7SetBankh>
    writeOp(ENC28J60_WRITE_CTRL_REG, address, data);
     a40:	4d 2f       	mov	r20, r29
     a42:	6c 2f       	mov	r22, r28
     a44:	80 e4       	ldi	r24, 0x40	; 64
     a46:	90 df       	rcall	.-224    	; 0x968 <_ZL7writeOphhh>
}
     a48:	df 91       	pop	r29
     a4a:	cf 91       	pop	r28
     a4c:	08 95       	ret

00000a4e <_ZL8writeReghj>:

static void writeReg(uint8_t address, uint16_t data) {
     a4e:	cf 93       	push	r28
     a50:	df 93       	push	r29
     a52:	c8 2f       	mov	r28, r24
     a54:	d7 2f       	mov	r29, r23
    writeRegByte(address, data);
     a56:	ef df       	rcall	.-34     	; 0xa36 <_ZL12writeRegBytehh>
    writeRegByte(address + 1, data >> 8);
     a58:	6d 2f       	mov	r22, r29
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	8c 0f       	add	r24, r28
     a5e:	eb df       	rcall	.-42     	; 0xa36 <_ZL12writeRegBytehh>
}
     a60:	df 91       	pop	r29
     a62:	cf 91       	pop	r28
     a64:	08 95       	ret

00000a66 <_ZN8ENC28J607initSPIERVh>:
static void disableChip () {
	SetHigh(*selectPort, selectPin); //digitalWrite(selectPin, HIGH);
	//sei();
}

void ENC28J60::initSPI (Register& csDDR) {
     a66:	fc 01       	movw	r30, r24

class SPI{
public:
	static void begin(uint8_t clock = SPI_CLOCK_DIV2){
		//SPI_DIR |= SS;
		SPI_DIR |= SPI_MOSI | SPI_SCK | SPI_SS; //Not sure why, but SS pin requires to be set as output even when not being used.
     a68:	94 b1       	in	r25, 0x04	; 4
     a6a:	97 60       	ori	r25, 0x07	; 7
     a6c:	94 b9       	out	0x04, r25	; 4
		SPI_DIR &= ~(SPI_MISO);
     a6e:	23 98       	cbi	0x04, 3	; 4
		//disableCS();

		SPSR |= (clock >> 2);
     a70:	9d b5       	in	r25, 0x2d	; 45
     a72:	91 60       	ori	r25, 0x01	; 1
     a74:	9d bd       	out	0x2d, r25	; 45
		SPCR |= _BV(MSTR) | _BV(SPE) | (clock & 0x03);
     a76:	9c b5       	in	r25, 0x2c	; 44
     a78:	90 65       	ori	r25, 0x50	; 80
     a7a:	9c bd       	out	0x2c, r25	; 44
	SPI.begin(SPI_CLOCK_DIV2);

	SetOutput(csDDR, selectPin);
     a7c:	80 81       	ld	r24, Z
     a7e:	90 91 ed 02 	lds	r25, 0x02ED	; 0x8002ed <_ZL9selectPin>
     a82:	98 2b       	or	r25, r24
     a84:	90 83       	st	Z, r25
	disableChip();
     a86:	46 cf       	rjmp	.-372    	; 0x914 <_ZL11disableChipv>
     a88:	08 95       	ret

00000a8a <_ZN8ENC28J6010initializeEjPKhRVhS3_h>:
    writeReg(MIWR, data);
    while (readRegByte(MISTAT) & MISTAT_BUSY)
        ;
}

uint8_t ENC28J60::initialize (uint16_t size, const uint8_t* macaddr, Register& csDDR, Register& csPort, uint8_t csPin) {
     a8a:	0f 93       	push	r16
     a8c:	cf 93       	push	r28
     a8e:	df 93       	push	r29
     a90:	eb 01       	movw	r28, r22
    bufferSize = size;
     a92:	90 93 f2 02 	sts	0x02F2, r25	; 0x8002f2 <_ZN8ENC28J6010bufferSizeE+0x1>
     a96:	80 93 f1 02 	sts	0x02F1, r24	; 0x8002f1 <_ZN8ENC28J6010bufferSizeE>
	selectPin = csPin;
     a9a:	00 93 ed 02 	sts	0x02ED, r16	; 0x8002ed <_ZL9selectPin>
	selectPort = &csPort;
     a9e:	30 93 ef 02 	sts	0x02EF, r19	; 0x8002ef <_ZL10selectPort+0x1>
     aa2:	20 93 ee 02 	sts	0x02EE, r18	; 0x8002ee <_ZL10selectPort>
    initSPI(csDDR);
     aa6:	ca 01       	movw	r24, r20
     aa8:	de df       	rcall	.-68     	; 0xa66 <_ZN8ENC28J607initSPIERVh>

    writeOp(ENC28J60_SOFT_RESET, 0, ENC28J60_SOFT_RESET);
     aaa:	4f ef       	ldi	r20, 0xFF	; 255
     aac:	60 e0       	ldi	r22, 0x00	; 0
     aae:	8f ef       	ldi	r24, 0xFF	; 255
     ab0:	5b df       	rcall	.-330    	; 0x968 <_ZL7writeOphhh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ab2:	8f e3       	ldi	r24, 0x3F	; 63
     ab4:	9f e1       	ldi	r25, 0x1F	; 31
     ab6:	01 97       	sbiw	r24, 0x01	; 1
     ab8:	f1 f7       	brne	.-4      	; 0xab6 <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0x2c>
     aba:	00 c0       	rjmp	.+0      	; 0xabc <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0x32>
     abc:	00 00       	nop
	_delay_ms(2);
    while (!readOp(ENC28J60_READ_CTRL_REG, ESTAT) & ESTAT_CLKRDY)
     abe:	6d e1       	ldi	r22, 0x1D	; 29
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	32 df       	rcall	.-412    	; 0x928 <_ZL6readOphh>
     ac4:	88 23       	and	r24, r24
     ac6:	d9 f3       	breq	.-10     	; 0xabe <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0x34>
        ;

    writeReg(ERXST, RXSTART_INIT);
     ac8:	60 e0       	ldi	r22, 0x00	; 0
     aca:	70 e0       	ldi	r23, 0x00	; 0
     acc:	88 e0       	ldi	r24, 0x08	; 8
     ace:	bf df       	rcall	.-130    	; 0xa4e <_ZL8writeReghj>
    writeReg(ERXRDPT, RXSTART_INIT);
     ad0:	60 e0       	ldi	r22, 0x00	; 0
     ad2:	70 e0       	ldi	r23, 0x00	; 0
     ad4:	8c e0       	ldi	r24, 0x0C	; 12
     ad6:	bb df       	rcall	.-138    	; 0xa4e <_ZL8writeReghj>
    writeReg(ERXND, RXSTOP_INIT);
     ad8:	6f ef       	ldi	r22, 0xFF	; 255
     ada:	7b e0       	ldi	r23, 0x0B	; 11
     adc:	8a e0       	ldi	r24, 0x0A	; 10
     ade:	b7 df       	rcall	.-146    	; 0xa4e <_ZL8writeReghj>
    writeReg(ETXST, TXSTART_INIT);
     ae0:	60 e0       	ldi	r22, 0x00	; 0
     ae2:	7c e0       	ldi	r23, 0x0C	; 12
     ae4:	84 e0       	ldi	r24, 0x04	; 4
     ae6:	b3 df       	rcall	.-154    	; 0xa4e <_ZL8writeReghj>
    writeReg(ETXND, TXSTOP_INIT);
     ae8:	6f ef       	ldi	r22, 0xFF	; 255
     aea:	71 e1       	ldi	r23, 0x11	; 17
     aec:	86 e0       	ldi	r24, 0x06	; 6
     aee:	af df       	rcall	.-162    	; 0xa4e <_ZL8writeReghj>

    writeRegByte(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN|ERXFCON_PMEN|ERXFCON_BCEN);
     af0:	61 eb       	ldi	r22, 0xB1	; 177
     af2:	88 e3       	ldi	r24, 0x38	; 56
     af4:	a0 df       	rcall	.-192    	; 0xa36 <_ZL12writeRegBytehh>
    writeReg(EPMM0, 0x303f);
     af6:	6f e3       	ldi	r22, 0x3F	; 63
     af8:	70 e3       	ldi	r23, 0x30	; 48
     afa:	88 e2       	ldi	r24, 0x28	; 40
     afc:	a8 df       	rcall	.-176    	; 0xa4e <_ZL8writeReghj>
    writeReg(EPMCS, 0xf7f9);
     afe:	69 ef       	ldi	r22, 0xF9	; 249
     b00:	77 ef       	ldi	r23, 0xF7	; 247
     b02:	80 e3       	ldi	r24, 0x30	; 48
     b04:	a4 df       	rcall	.-184    	; 0xa4e <_ZL8writeReghj>
    writeRegByte(MACON1, MACON1_MARXEN);
     b06:	61 e0       	ldi	r22, 0x01	; 1
     b08:	80 ec       	ldi	r24, 0xC0	; 192
     b0a:	95 df       	rcall	.-214    	; 0xa36 <_ZL12writeRegBytehh>
    writeOp(ENC28J60_BIT_FIELD_SET, MACON3,
            MACON3_PADCFG0|MACON3_TXCRCEN|MACON3_FRMLNEN);
     b0c:	42 e3       	ldi	r20, 0x32	; 50
     b0e:	62 ec       	ldi	r22, 0xC2	; 194
     b10:	80 e8       	ldi	r24, 0x80	; 128
     b12:	2a df       	rcall	.-428    	; 0x968 <_ZL7writeOphhh>
    writeReg(MAIPG, 0x0C12);
     b14:	62 e1       	ldi	r22, 0x12	; 18
     b16:	7c e0       	ldi	r23, 0x0C	; 12
     b18:	86 ec       	ldi	r24, 0xC6	; 198
    writeRegByte(MABBIPG, 0x12);
     b1a:	99 df       	rcall	.-206    	; 0xa4e <_ZL8writeReghj>
     b1c:	62 e1       	ldi	r22, 0x12	; 18
     b1e:	84 ec       	ldi	r24, 0xC4	; 196
    writeReg(MAMXFL, MAX_FRAMELEN);
     b20:	8a df       	rcall	.-236    	; 0xa36 <_ZL12writeRegBytehh>
     b22:	6c ed       	ldi	r22, 0xDC	; 220
     b24:	75 e0       	ldi	r23, 0x05	; 5
    writeRegByte(MAADR5, macaddr[0]);
     b26:	8a ec       	ldi	r24, 0xCA	; 202
     b28:	92 df       	rcall	.-220    	; 0xa4e <_ZL8writeReghj>
     b2a:	68 81       	ld	r22, Y
    writeRegByte(MAADR4, macaddr[1]);
     b2c:	84 ee       	ldi	r24, 0xE4	; 228
     b2e:	83 df       	rcall	.-250    	; 0xa36 <_ZL12writeRegBytehh>
     b30:	69 81       	ldd	r22, Y+1	; 0x01
    writeRegByte(MAADR3, macaddr[2]);
     b32:	85 ee       	ldi	r24, 0xE5	; 229
     b34:	80 df       	rcall	.-256    	; 0xa36 <_ZL12writeRegBytehh>
    writeRegByte(MAADR2, macaddr[3]);
     b36:	6a 81       	ldd	r22, Y+2	; 0x02
     b38:	82 ee       	ldi	r24, 0xE2	; 226
     b3a:	7d df       	rcall	.-262    	; 0xa36 <_ZL12writeRegBytehh>
    writeRegByte(MAADR1, macaddr[4]);
     b3c:	6b 81       	ldd	r22, Y+3	; 0x03
     b3e:	83 ee       	ldi	r24, 0xE3	; 227
     b40:	7a df       	rcall	.-268    	; 0xa36 <_ZL12writeRegBytehh>
    writeRegByte(MAADR0, macaddr[5]);
     b42:	6c 81       	ldd	r22, Y+4	; 0x04
     b44:	80 ee       	ldi	r24, 0xE0	; 224
     b46:	77 df       	rcall	.-274    	; 0xa36 <_ZL12writeRegBytehh>
    writeRegByte(MICMD, 0x00);
    return readRegByte(MIRD+1);
}

static void writePhy (uint8_t address, uint16_t data) {
    writeRegByte(MIREGADR, address);
     b48:	6d 81       	ldd	r22, Y+5	; 0x05
     b4a:	81 ee       	ldi	r24, 0xE1	; 225
     b4c:	74 df       	rcall	.-280    	; 0xa36 <_ZL12writeRegBytehh>
    writeReg(MIWR, data);
     b4e:	60 e1       	ldi	r22, 0x10	; 16
     b50:	84 ed       	ldi	r24, 0xD4	; 212
     b52:	71 df       	rcall	.-286    	; 0xa36 <_ZL12writeRegBytehh>
     b54:	60 e0       	ldi	r22, 0x00	; 0
     b56:	71 e0       	ldi	r23, 0x01	; 1
    while (readRegByte(MISTAT) & MISTAT_BUSY)
     b58:	86 ed       	ldi	r24, 0xD6	; 214
     b5a:	79 df       	rcall	.-270    	; 0xa4e <_ZL8writeReghj>
     b5c:	8a ee       	ldi	r24, 0xEA	; 234
     b5e:	63 df       	rcall	.-314    	; 0xa26 <_ZL11readRegByteh>
     b60:	80 fd       	sbrc	r24, 0
    writeRegByte(MAADR3, macaddr[2]);
    writeRegByte(MAADR2, macaddr[3]);
    writeRegByte(MAADR1, macaddr[4]);
    writeRegByte(MAADR0, macaddr[5]);
    writePhy(PHCON2, PHCON2_HDLDIS);
    SetBank(ECON1);
     b62:	fc cf       	rjmp	.-8      	; 0xb5c <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0xd2>
     b64:	8f e1       	ldi	r24, 0x1F	; 31
     b66:	3a df       	rcall	.-396    	; 0x9dc <_ZL7SetBankh>
    writeOp(ENC28J60_BIT_FIELD_SET, EIE, EIE_INTIE|EIE_PKTIE);
     b68:	40 ec       	ldi	r20, 0xC0	; 192
     b6a:	6b e1       	ldi	r22, 0x1B	; 27
     b6c:	80 e8       	ldi	r24, 0x80	; 128
     b6e:	fc de       	rcall	.-520    	; 0x968 <_ZL7writeOphhh>
     b70:	44 e0       	ldi	r20, 0x04	; 4
    writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN);
     b72:	6f e1       	ldi	r22, 0x1F	; 31
     b74:	80 e8       	ldi	r24, 0x80	; 128
     b76:	f8 de       	rcall	.-528    	; 0x968 <_ZL7writeOphhh>
     b78:	82 e7       	ldi	r24, 0x72	; 114
     b7a:	55 df       	rcall	.-342    	; 0xa26 <_ZL11readRegByteh>

    uint8_t rev = readRegByte(EREVID);
     b7c:	86 30       	cpi	r24, 0x06	; 6
     b7e:	08 f0       	brcs	.+2      	; 0xb82 <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0xf8>
     b80:	8f 5f       	subi	r24, 0xFF	; 255
    // microchip forgot to step the number on the silicon when they
    // released the revision B7. 6 is now rev B7. We still have
    // to see what they do when they release B8. At the moment
    // there is no B8 out yet
    if (rev > 5) ++rev;
     b82:	df 91       	pop	r29
     b84:	cf 91       	pop	r28
     b86:	0f 91       	pop	r16
    return rev;
}
     b88:	08 95       	ret

00000b8a <_ZN8ENC28J608isLinkUpEv>:
     b8a:	61 e1       	ldi	r22, 0x11	; 17
     b8c:	84 ed       	ldi	r24, 0xD4	; 212
     b8e:	53 df       	rcall	.-346    	; 0xa36 <_ZL12writeRegBytehh>
    writeRegByte(address + 1, data >> 8);
}

static uint16_t readPhyByte (uint8_t address) {
    writeRegByte(MIREGADR, address);
    writeRegByte(MICMD, MICMD_MIIRD);
     b90:	61 e0       	ldi	r22, 0x01	; 1
     b92:	82 ed       	ldi	r24, 0xD2	; 210
     b94:	50 df       	rcall	.-352    	; 0xa36 <_ZL12writeRegBytehh>
    while (readRegByte(MISTAT) & MISTAT_BUSY)
     b96:	8a ee       	ldi	r24, 0xEA	; 234
     b98:	46 df       	rcall	.-372    	; 0xa26 <_ZL11readRegByteh>
     b9a:	80 fd       	sbrc	r24, 0
     b9c:	fc cf       	rjmp	.-8      	; 0xb96 <_ZN8ENC28J608isLinkUpEv+0xc>
        ;
    writeRegByte(MICMD, 0x00);
     b9e:	60 e0       	ldi	r22, 0x00	; 0
     ba0:	82 ed       	ldi	r24, 0xD2	; 210
     ba2:	49 df       	rcall	.-366    	; 0xa36 <_ZL12writeRegBytehh>
    return readRegByte(MIRD+1);
     ba4:	89 ed       	ldi	r24, 0xD9	; 217
     ba6:	3f df       	rcall	.-386    	; 0xa26 <_ZL11readRegByteh>
     ba8:	82 fb       	bst	r24, 2
    return rev;
}

bool ENC28J60::isLinkUp() {
    return (readPhyByte(PHSTAT2) >> 2) & 1;
}
     baa:	88 27       	eor	r24, r24
     bac:	80 f9       	bld	r24, 0
     bae:	08 95       	ret

00000bb0 <_ZN8ENC28J6010packetSendEj>:
     bb0:	af 92       	push	r10

struct transmit_status_vector {
    uint8_t bytes[7];
};

void ENC28J60::packetSend(uint16_t len) {
     bb2:	bf 92       	push	r11
     bb4:	cf 92       	push	r12
     bb6:	df 92       	push	r13
     bb8:	ef 92       	push	r14
     bba:	ff 92       	push	r15
     bbc:	0f 93       	push	r16
     bbe:	1f 93       	push	r17
     bc0:	cf 93       	push	r28
     bc2:	df 93       	push	r29
     bc4:	7c 01       	movw	r14, r24
        writeOp(ENC28J60_BIT_FIELD_CLR, EIR, EIR_TXERIF|EIR_TXIF);

        // prepare new transmission
        if (retry == 0) {
            writeReg(EWRPT, TXSTART_INIT);
            writeReg(ETXND, TXSTART_INIT+len);
     bc6:	6c 01       	movw	r12, r24
     bc8:	84 ef       	ldi	r24, 0xF4	; 244
     bca:	d8 1a       	sub	r13, r24

	static void write(const void *buf, uint16_t nbyte){
		if(nbyte == 0) return;
		
		const uint8_t* buff = (const uint8_t*)(buf);
		SPDR = *buff;
     bcc:	0f 2e       	mov	r0, r31
     bce:	f3 ef       	ldi	r31, 0xF3	; 243
     bd0:	af 2e       	mov	r10, r31
     bd2:	f2 e0       	ldi	r31, 0x02	; 2
     bd4:	bf 2e       	mov	r11, r31
     bd6:	f0 2d       	mov	r31, r0
     bd8:	87 01       	movw	r16, r14
     bda:	0d 50       	subi	r16, 0x0D	; 13
     bdc:	1d 4f       	sbci	r17, 0xFD	; 253
        // the Microchip TCP/IP stack implementation used to first check
        // whether TXERIF is set and only then reset the transmit logic
        // but this has been changed in later versions; possibly they
        // have a reason for this; they don't mention this in the errata
        // sheet
        writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRST);
     bde:	40 e8       	ldi	r20, 0x80	; 128
     be0:	6f e1       	ldi	r22, 0x1F	; 31
     be2:	80 e8       	ldi	r24, 0x80	; 128
     be4:	c1 de       	rcall	.-638    	; 0x968 <_ZL7writeOphhh>
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRST);
     be6:	40 e8       	ldi	r20, 0x80	; 128
     be8:	6f e1       	ldi	r22, 0x1F	; 31
     bea:	80 ea       	ldi	r24, 0xA0	; 160
     bec:	bd de       	rcall	.-646    	; 0x968 <_ZL7writeOphhh>
        writeOp(ENC28J60_BIT_FIELD_CLR, EIR, EIR_TXERIF|EIR_TXIF);
     bee:	4a e0       	ldi	r20, 0x0A	; 10
     bf0:	6c e1       	ldi	r22, 0x1C	; 28
     bf2:	80 ea       	ldi	r24, 0xA0	; 160
     bf4:	b9 de       	rcall	.-654    	; 0x968 <_ZL7writeOphhh>

        // prepare new transmission
        if (retry == 0) {
            writeReg(EWRPT, TXSTART_INIT);
     bf6:	60 e0       	ldi	r22, 0x00	; 0
     bf8:	7c e0       	ldi	r23, 0x0C	; 12
     bfa:	82 e0       	ldi	r24, 0x02	; 2
            writeReg(ETXND, TXSTART_INIT+len);
     bfc:	28 df       	rcall	.-432    	; 0xa4e <_ZL8writeReghj>
     bfe:	b6 01       	movw	r22, r12
     c00:	86 e0       	ldi	r24, 0x06	; 6
            writeOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
     c02:	25 df       	rcall	.-438    	; 0xa4e <_ZL8writeReghj>
     c04:	40 e0       	ldi	r20, 0x00	; 0
     c06:	60 e0       	ldi	r22, 0x00	; 0
     c08:	8a e7       	ldi	r24, 0x7A	; 122
     c0a:	ae de       	rcall	.-676    	; 0x968 <_ZL7writeOphhh>
    }
    disableChip();
}

static void writeBuf(uint16_t len, const uint8_t* data) {
    enableChip();
     c0c:	78 de       	rcall	.-784    	; 0x8fe <_ZL10enableChipv>
     c0e:	e1 14       	cp	r14, r1
    if (len != 0) {
     c10:	f1 04       	cpc	r15, r1
     c12:	e1 f0       	breq	.+56     	; 0xc4c <_ZN8ENC28J6010packetSendEj+0x9c>
     c14:	8a e7       	ldi	r24, 0x7A	; 122
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     c16:	8e bd       	out	0x2e, r24	; 46
     c18:	00 00       	nop
		asm volatile("nop");
     c1a:	0d b4       	in	r0, 0x2d	; 45
		while(!(SPSR & _BV(SPIF)));
     c1c:	07 fe       	sbrs	r0, 7
     c1e:	fd cf       	rjmp	.-6      	; 0xc1a <_ZN8ENC28J6010packetSendEj+0x6a>
     c20:	f5 01       	movw	r30, r10

	static void write(const void *buf, uint16_t nbyte){
		if(nbyte == 0) return;
		
		const uint8_t* buff = (const uint8_t*)(buf);
		SPDR = *buff;
     c22:	80 81       	ld	r24, Z
     c24:	8e bd       	out	0x2e, r24	; 46
     c26:	f1 e0       	ldi	r31, 0x01	; 1
		while(--nbyte){
     c28:	ef 16       	cp	r14, r31
     c2a:	f1 04       	cpc	r15, r1
     c2c:	59 f0       	breq	.+22     	; 0xc44 <_ZN8ENC28J6010packetSendEj+0x94>
     c2e:	e4 ef       	ldi	r30, 0xF4	; 244
     c30:	f2 e0       	ldi	r31, 0x02	; 2
     c32:	00 00       	nop
			asm volatile("nop");
     c34:	0d b4       	in	r0, 0x2d	; 45
			while (!(SPSR & _BV(SPIF))) ;
     c36:	07 fe       	sbrs	r0, 7
     c38:	fd cf       	rjmp	.-6      	; 0xc34 <_ZN8ENC28J6010packetSendEj+0x84>
     c3a:	81 91       	ld	r24, Z+
			SPDR = *++buff;
     c3c:	8e bd       	out	0x2e, r24	; 46
     c3e:	e0 17       	cp	r30, r16
	static void write(const void *buf, uint16_t nbyte){
		if(nbyte == 0) return;
		
		const uint8_t* buff = (const uint8_t*)(buf);
		SPDR = *buff;
		while(--nbyte){
     c40:	f1 07       	cpc	r31, r17
     c42:	b9 f7       	brne	.-18     	; 0xc32 <_ZN8ENC28J6010packetSendEj+0x82>
			asm volatile("nop");
			while (!(SPSR & _BV(SPIF))) ;
			SPDR = *++buff;
		}
		asm volatile("nop");
     c44:	00 00       	nop
		while (!(SPSR & _BV(SPIF))) ;
     c46:	0d b4       	in	r0, 0x2d	; 45
     c48:	07 fe       	sbrs	r0, 7
        SPI.write8(ENC28J60_WRITE_BUF_MEM);

        SPI.write(data, len);
    }
    disableChip();
     c4a:	fd cf       	rjmp	.-6      	; 0xc46 <_ZN8ENC28J6010packetSendEj+0x96>
            writeOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
            writeBuf(len, buffer);
        }

        // initiate transmission
        writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
     c4c:	63 de       	rcall	.-826    	; 0x914 <_ZL11disableChipv>
     c4e:	48 e0       	ldi	r20, 0x08	; 8
     c50:	6f e1       	ldi	r22, 0x1F	; 31
     c52:	80 e8       	ldi	r24, 0x80	; 128
     c54:	89 de       	rcall	.-750    	; 0x968 <_ZL7writeOphhh>
        // wait until transmission has finished; referring to the data sheet and
        // to the errata (Errata Issue 13; Example 1) you only need to wait until either
        // TXIF or TXERIF gets set; however this leads to hangs; apparently Microchip
        // realized this and in later implementations of their tcp/ip stack they introduced
        // a counter to avoid hangs; of course they didn't update the errata sheet
        uint16_t count = 0;
     c56:	c0 e0       	ldi	r28, 0x00	; 0
     c58:	d0 e0       	ldi	r29, 0x00	; 0
        while ((readRegByte(EIR) & (EIR_TXIF | EIR_TXERIF)) == 0 && ++count < 1000U)
     c5a:	8c e1       	ldi	r24, 0x1C	; 28
     c5c:	e4 de       	rcall	.-568    	; 0xa26 <_ZL11readRegByteh>
     c5e:	8a 70       	andi	r24, 0x0A	; 10
     c60:	31 f4       	brne	.+12     	; 0xc6e <_ZN8ENC28J6010packetSendEj+0xbe>
     c62:	21 96       	adiw	r28, 0x01	; 1
     c64:	c8 3e       	cpi	r28, 0xE8	; 232
     c66:	83 e0       	ldi	r24, 0x03	; 3
     c68:	d8 07       	cpc	r29, r24
     c6a:	b9 f7       	brne	.-18     	; 0xc5a <_ZN8ENC28J6010packetSendEj+0xaa>
     c6c:	0c c0       	rjmp	.+24     	; 0xc86 <_ZN8ENC28J6010packetSendEj+0xd6>
            ;

        if (!(readRegByte(EIR) & EIR_TXERIF) && count < 1000U) {
     c6e:	8c e1       	ldi	r24, 0x1C	; 28
     c70:	da de       	rcall	.-588    	; 0xa26 <_ZL11readRegByteh>
     c72:	81 fd       	sbrc	r24, 1
     c74:	03 c0       	rjmp	.+6      	; 0xc7c <_ZN8ENC28J6010packetSendEj+0xcc>
     c76:	c8 3e       	cpi	r28, 0xE8	; 232
     c78:	d3 40       	sbci	r29, 0x03	; 3
            // no error; start new transmission
            break;
        }

        // cancel previous transmission if stuck
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRTS);
     c7a:	40 f0       	brcs	.+16     	; 0xc8c <_ZN8ENC28J6010packetSendEj+0xdc>
     c7c:	48 e0       	ldi	r20, 0x08	; 8
     c7e:	6f e1       	ldi	r22, 0x1F	; 31
     c80:	80 ea       	ldi	r24, 0xA0	; 160
     c82:	72 de       	rcall	.-796    	; 0x968 <_ZL7writeOphhh>
};

void ENC28J60::packetSend(uint16_t len) {
    uint8_t retry = 0;

    while (1) {
     c84:	ac cf       	rjmp	.-168    	; 0xbde <_ZN8ENC28J6010packetSendEj+0x2e>
        // a counter to avoid hangs; of course they didn't update the errata sheet
        uint16_t count = 0;
        while ((readRegByte(EIR) & (EIR_TXIF | EIR_TXERIF)) == 0 && ++count < 1000U)
            ;

        if (!(readRegByte(EIR) & EIR_TXERIF) && count < 1000U) {
     c86:	8c e1       	ldi	r24, 0x1C	; 28
     c88:	ce de       	rcall	.-612    	; 0xa26 <_ZL11readRegByteh>
     c8a:	f8 cf       	rjmp	.-16     	; 0xc7c <_ZN8ENC28J6010packetSendEj+0xcc>
     c8c:	df 91       	pop	r29
        }

        // cancel previous transmission if stuck
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRTS);
    }
}
     c8e:	cf 91       	pop	r28
     c90:	1f 91       	pop	r17
     c92:	0f 91       	pop	r16
     c94:	ff 90       	pop	r15
     c96:	ef 90       	pop	r14
     c98:	df 90       	pop	r13
     c9a:	cf 90       	pop	r12
     c9c:	bf 90       	pop	r11
     c9e:	af 90       	pop	r10
     ca0:	08 95       	ret

00000ca2 <_ZN8ENC28J6013packetReceiveEv>:
     ca2:	0f 93       	push	r16


uint16_t ENC28J60::packetReceive() {
     ca4:	1f 93       	push	r17
     ca6:	cf 93       	push	r28
     ca8:	df 93       	push	r29
     caa:	00 d0       	rcall	.+0      	; 0xcac <_ZN8ENC28J6013packetReceiveEv+0xa>
     cac:	00 d0       	rcall	.+0      	; 0xcae <_ZN8ENC28J6013packetReceiveEv+0xc>
     cae:	cd b7       	in	r28, 0x3d	; 61
     cb0:	de b7       	in	r29, 0x3e	; 62
    static uint16_t gNextPacketPtr = RXSTART_INIT;
    static bool     unreleasedPacket = false;
    uint16_t len = 0;

    if (unreleasedPacket) {
     cb2:	80 91 ec 02 	lds	r24, 0x02EC	; 0x8002ec <_ZZN8ENC28J6013packetReceiveEvE16unreleasedPacket>
     cb6:	88 23       	and	r24, r24
     cb8:	91 f0       	breq	.+36     	; 0xcde <_ZN8ENC28J6013packetReceiveEv+0x3c>
        if (gNextPacketPtr == 0)
     cba:	60 91 ea 02 	lds	r22, 0x02EA	; 0x8002ea <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr>
     cbe:	70 91 eb 02 	lds	r23, 0x02EB	; 0x8002eb <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr+0x1>
     cc2:	61 15       	cp	r22, r1
     cc4:	71 05       	cpc	r23, r1
     cc6:	29 f4       	brne	.+10     	; 0xcd2 <_ZN8ENC28J6013packetReceiveEv+0x30>
            writeReg(ERXRDPT, RXSTOP_INIT);
     cc8:	6f ef       	ldi	r22, 0xFF	; 255
     cca:	7b e0       	ldi	r23, 0x0B	; 11
     ccc:	8c e0       	ldi	r24, 0x0C	; 12
     cce:	bf de       	rcall	.-642    	; 0xa4e <_ZL8writeReghj>
     cd0:	04 c0       	rjmp	.+8      	; 0xcda <_ZN8ENC28J6013packetReceiveEv+0x38>
        else
            writeReg(ERXRDPT, gNextPacketPtr - 1);
     cd2:	61 50       	subi	r22, 0x01	; 1
     cd4:	71 09       	sbc	r23, r1
     cd6:	8c e0       	ldi	r24, 0x0C	; 12
     cd8:	ba de       	rcall	.-652    	; 0xa4e <_ZL8writeReghj>
        unreleasedPacket = false;
     cda:	10 92 ec 02 	sts	0x02EC, r1	; 0x8002ec <_ZZN8ENC28J6013packetReceiveEvE16unreleasedPacket>
    }

    if (readRegByte(EPKTCNT) > 0) {
     cde:	89 e3       	ldi	r24, 0x39	; 57
     ce0:	a2 de       	rcall	.-700    	; 0xa26 <_ZL11readRegByteh>
     ce2:	88 23       	and	r24, r24
     ce4:	a9 f1       	breq	.+106    	; 0xd50 <_ZN8ENC28J6013packetReceiveEv+0xae>
        writeReg(ERDPT, gNextPacketPtr);
     ce6:	60 91 ea 02 	lds	r22, 0x02EA	; 0x8002ea <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr>
     cea:	70 91 eb 02 	lds	r23, 0x02EB	; 0x8002eb <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr+0x1>
     cee:	80 e0       	ldi	r24, 0x00	; 0
     cf0:	ae de       	rcall	.-676    	; 0xa4e <_ZL8writeReghj>
            uint16_t nextPacket;
            uint16_t byteCount;
            uint16_t status;
        } header;

        readBuf(sizeof header, (uint8_t*) &header);
     cf2:	be 01       	movw	r22, r28
     cf4:	6f 5f       	subi	r22, 0xFF	; 255
     cf6:	7f 4f       	sbci	r23, 0xFF	; 255
     cf8:	86 e0       	ldi	r24, 0x06	; 6
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	4d de       	rcall	.-870    	; 0x998 <_ZL7readBufjPh>

        gNextPacketPtr  = header.nextPacket;
     cfe:	89 81       	ldd	r24, Y+1	; 0x01
     d00:	9a 81       	ldd	r25, Y+2	; 0x02
     d02:	90 93 eb 02 	sts	0x02EB, r25	; 0x8002eb <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr+0x1>
     d06:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr>
        len = header.byteCount - 4; //remove the CRC count
        if (len>bufferSize-1)
            len=bufferSize-1;
        if ((header.status & 0x80)==0)
     d0a:	8d 81       	ldd	r24, Y+5	; 0x05
     d0c:	87 ff       	sbrs	r24, 7
     d0e:	12 c0       	rjmp	.+36     	; 0xd34 <_ZN8ENC28J6013packetReceiveEv+0x92>

        readBuf(sizeof header, (uint8_t*) &header);

        gNextPacketPtr  = header.nextPacket;
        len = header.byteCount - 4; //remove the CRC count
        if (len>bufferSize-1)
     d10:	80 91 f1 02 	lds	r24, 0x02F1	; 0x8002f1 <_ZN8ENC28J6010bufferSizeE>
     d14:	90 91 f2 02 	lds	r25, 0x02F2	; 0x8002f2 <_ZN8ENC28J6010bufferSizeE+0x1>
     d18:	01 97       	sbiw	r24, 0x01	; 1
        } header;

        readBuf(sizeof header, (uint8_t*) &header);

        gNextPacketPtr  = header.nextPacket;
        len = header.byteCount - 4; //remove the CRC count
     d1a:	0b 81       	ldd	r16, Y+3	; 0x03
     d1c:	1c 81       	ldd	r17, Y+4	; 0x04
     d1e:	04 50       	subi	r16, 0x04	; 4
     d20:	11 09       	sbc	r17, r1
     d22:	80 17       	cp	r24, r16
     d24:	91 07       	cpc	r25, r17
     d26:	08 f4       	brcc	.+2      	; 0xd2a <_ZN8ENC28J6013packetReceiveEv+0x88>
        if (len>bufferSize-1)
            len=bufferSize-1;
        if ((header.status & 0x80)==0)
            len = 0;
        else
            readBuf(len, buffer);
     d28:	8c 01       	movw	r16, r24
     d2a:	63 ef       	ldi	r22, 0xF3	; 243
     d2c:	72 e0       	ldi	r23, 0x02	; 2
     d2e:	c8 01       	movw	r24, r16
     d30:	33 de       	rcall	.-922    	; 0x998 <_ZL7readBufjPh>
     d32:	02 c0       	rjmp	.+4      	; 0xd38 <_ZN8ENC28J6013packetReceiveEv+0x96>
        gNextPacketPtr  = header.nextPacket;
        len = header.byteCount - 4; //remove the CRC count
        if (len>bufferSize-1)
            len=bufferSize-1;
        if ((header.status & 0x80)==0)
            len = 0;
     d34:	00 e0       	ldi	r16, 0x00	; 0
     d36:	10 e0       	ldi	r17, 0x00	; 0
        else
            readBuf(len, buffer);
        buffer[len] = 0;
     d38:	f8 01       	movw	r30, r16
     d3a:	ed 50       	subi	r30, 0x0D	; 13
     d3c:	fd 4f       	sbci	r31, 0xFD	; 253
     d3e:	10 82       	st	Z, r1
        unreleasedPacket = true;
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	80 93 ec 02 	sts	0x02EC, r24	; 0x8002ec <_ZZN8ENC28J6013packetReceiveEvE16unreleasedPacket>

        writeOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
     d46:	40 e4       	ldi	r20, 0x40	; 64
     d48:	6e e1       	ldi	r22, 0x1E	; 30
     d4a:	80 e8       	ldi	r24, 0x80	; 128
     d4c:	0d de       	rcall	.-998    	; 0x968 <_ZL7writeOphhh>
     d4e:	02 c0       	rjmp	.+4      	; 0xd54 <_ZN8ENC28J6013packetReceiveEv+0xb2>


uint16_t ENC28J60::packetReceive() {
    static uint16_t gNextPacketPtr = RXSTART_INIT;
    static bool     unreleasedPacket = false;
    uint16_t len = 0;
     d50:	00 e0       	ldi	r16, 0x00	; 0
     d52:	10 e0       	ldi	r17, 0x00	; 0
        unreleasedPacket = true;

        writeOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
    }
    return len;
}
     d54:	c8 01       	movw	r24, r16
     d56:	26 96       	adiw	r28, 0x06	; 6
     d58:	0f b6       	in	r0, 0x3f	; 63
     d5a:	f8 94       	cli
     d5c:	de bf       	out	0x3e, r29	; 62
     d5e:	0f be       	out	0x3f, r0	; 63
     d60:	cd bf       	out	0x3d, r28	; 61
     d62:	df 91       	pop	r29
     d64:	cf 91       	pop	r28
     d66:	1f 91       	pop	r17
     d68:	0f 91       	pop	r16
     d6a:	08 95       	ret

00000d6c <_ZN9EtherCard5beginEPKhRVhS3_h>:
uint16_t EtherCard::delaycnt = 0; //request gateway ARP lookup

uint8_t Ethernet::buffer[ETHER_CARD_BUFFER_SIZE]; // tcp/ip send and receive buffer

uint8_t EtherCard::begin (const uint8_t* macaddr,
                          Register& csDDR, Register& csPort, uint8_t csPin) {
     d6c:	ef 92       	push	r14
     d6e:	ff 92       	push	r15
     d70:	0f 93       	push	r16
     d72:	cf 93       	push	r28
     d74:	df 93       	push	r29
     d76:	eb 01       	movw	r28, r22
     d78:	7a 01       	movw	r14, r20
     d7a:	02 2f       	mov	r16, r18

    copyMac(mymac, macaddr);
     d7c:	bc 01       	movw	r22, r24
     d7e:	8d e0       	ldi	r24, 0x0D	; 13
     d80:	95 e0       	ldi	r25, 0x05	; 5
     d82:	c9 d3       	rcall	.+1938   	; 0x1516 <_ZN9EtherCard7copyMacEPhPKh>
    return initialize(ETHER_CARD_BUFFER_SIZE, mymac, csDDR, csPort, csPin);
     d84:	97 01       	movw	r18, r14
     d86:	ae 01       	movw	r20, r28
     d88:	6d e0       	ldi	r22, 0x0D	; 13
     d8a:	75 e0       	ldi	r23, 0x05	; 5
     d8c:	80 e0       	ldi	r24, 0x00	; 0
     d8e:	92 e0       	ldi	r25, 0x02	; 2
     d90:	7c de       	rcall	.-776    	; 0xa8a <_ZN8ENC28J6010initializeEjPKhRVhS3_h>
}
     d92:	df 91       	pop	r29
     d94:	cf 91       	pop	r28
     d96:	0f 91       	pop	r16
     d98:	ff 90       	pop	r15
     d9a:	ef 90       	pop	r14
     d9c:	08 95       	ret

00000d9e <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_>:

bool EtherCard::staticSetup (const uint8_t* my_ip,
                             const uint8_t* gw_ip,
                             const uint8_t* dns_ip,
                             const uint8_t* mask) {
     d9e:	ef 92       	push	r14
     da0:	ff 92       	push	r15
     da2:	0f 93       	push	r16
     da4:	1f 93       	push	r17
     da6:	cf 93       	push	r28
     da8:	df 93       	push	r29
     daa:	7b 01       	movw	r14, r22
     dac:	8a 01       	movw	r16, r20
     dae:	e9 01       	movw	r28, r18

    if (my_ip != 0)
     db0:	00 97       	sbiw	r24, 0x00	; 0
     db2:	21 f0       	breq	.+8      	; 0xdbc <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x1e>
        copyIp(myip, my_ip);
     db4:	bc 01       	movw	r22, r24
     db6:	89 e0       	ldi	r24, 0x09	; 9
     db8:	95 e0       	ldi	r25, 0x05	; 5
     dba:	a0 d3       	rcall	.+1856   	; 0x14fc <_ZN9EtherCard6copyIpEPhPKh>
    if (gw_ip != 0)
     dbc:	e1 14       	cp	r14, r1
     dbe:	f1 04       	cpc	r15, r1
     dc0:	11 f0       	breq	.+4      	; 0xdc6 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x28>
        setGwIp(gw_ip);
     dc2:	c7 01       	movw	r24, r14
     dc4:	bd d1       	rcall	.+890    	; 0x1140 <_ZN9EtherCard7setGwIpEPKh>
    if (dns_ip != 0)
     dc6:	01 15       	cp	r16, r1
     dc8:	11 05       	cpc	r17, r1
     dca:	21 f0       	breq	.+8      	; 0xdd4 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x36>
        copyIp(dnsip, dns_ip);
     dcc:	b8 01       	movw	r22, r16
     dce:	89 ef       	ldi	r24, 0xF9	; 249
     dd0:	94 e0       	ldi	r25, 0x04	; 4
     dd2:	94 d3       	rcall	.+1832   	; 0x14fc <_ZN9EtherCard6copyIpEPhPKh>
    if(mask != 0)
     dd4:	20 97       	sbiw	r28, 0x00	; 0
     dd6:	21 f0       	breq	.+8      	; 0xde0 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x42>
        copyIp(netmask, mask);
     dd8:	be 01       	movw	r22, r28
     dda:	85 e0       	ldi	r24, 0x05	; 5
     ddc:	95 e0       	ldi	r25, 0x05	; 5
    updateBroadcastAddress();
     dde:	8e d3       	rcall	.+1820   	; 0x14fc <_ZN9EtherCard6copyIpEPhPKh>
     de0:	bb d1       	rcall	.+886    	; 0x1158 <_ZN9EtherCard22updateBroadcastAddressEv>
    delaycnt = 0; //request gateway ARP lookup
     de2:	10 92 f4 04 	sts	0x04F4, r1	; 0x8004f4 <_ZN9EtherCard8delaycntE+0x1>
     de6:	10 92 f3 04 	sts	0x04F3, r1	; 0x8004f3 <_ZN9EtherCard8delaycntE>
    return true;
}
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	df 91       	pop	r29
     dee:	cf 91       	pop	r28
     df0:	1f 91       	pop	r17
     df2:	0f 91       	pop	r16
     df4:	ff 90       	pop	r15
     df6:	ef 90       	pop	r14
     df8:	08 95       	ret

00000dfa <_ZL13fill_checksumhhjh>:
    for(uint8_t i=0; i<IP_LEN; i++)
        broadcastip[i] = myip[i] | ~netmask[i];
}

void EtherCard::registerPingCallback (void (*callback)(uint8_t *srcip)) {
    icmp_cb = callback;
     dfa:	cf 92       	push	r12
     dfc:	df 92       	push	r13
     dfe:	ef 92       	push	r14
     e00:	ff 92       	push	r15
     e02:	cf 93       	push	r28
     e04:	df 93       	push	r29
     e06:	c6 2f       	mov	r28, r22
     e08:	d0 e0       	ldi	r29, 0x00	; 0
     e0a:	cd 50       	subi	r28, 0x0D	; 13
     e0c:	dd 4f       	sbci	r29, 0xFD	; 253
     e0e:	21 30       	cpi	r18, 0x01	; 1
     e10:	81 f4       	brne	.+32     	; 0xe32 <_ZL13fill_checksumhhjh+0x38>
     e12:	6a 01       	movw	r12, r20
     e14:	99 e0       	ldi	r25, 0x09	; 9
     e16:	c9 0e       	add	r12, r25
     e18:	d1 1c       	adc	r13, r1
     e1a:	e1 2c       	mov	r14, r1
     e1c:	f1 2c       	mov	r15, r1
     e1e:	03 c0       	rjmp	.+6      	; 0xe26 <_ZL13fill_checksumhhjh+0x2c>
     e20:	c1 2c       	mov	r12, r1
     e22:	d1 2c       	mov	r13, r1
     e24:	76 01       	movw	r14, r12
     e26:	42 30       	cpi	r20, 0x02	; 2
     e28:	51 05       	cpc	r21, r1
     e2a:	28 f1       	brcs	.+74     	; 0xe76 <_ZL13fill_checksumhhjh+0x7c>
     e2c:	fe 01       	movw	r30, r28
     e2e:	da 01       	movw	r26, r20
     e30:	09 c0       	rjmp	.+18     	; 0xe44 <_ZL13fill_checksumhhjh+0x4a>
     e32:	22 30       	cpi	r18, 0x02	; 2
     e34:	a9 f7       	brne	.-22     	; 0xe20 <_ZL13fill_checksumhhjh+0x26>
     e36:	6a 01       	movw	r12, r20
     e38:	92 e0       	ldi	r25, 0x02	; 2
     e3a:	c9 1a       	sub	r12, r25
     e3c:	d1 08       	sbc	r13, r1
     e3e:	e1 2c       	mov	r14, r1
     e40:	f1 2c       	mov	r15, r1
     e42:	f1 cf       	rjmp	.-30     	; 0xe26 <_ZL13fill_checksumhhjh+0x2c>
     e44:	20 81       	ld	r18, Z
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	32 2f       	mov	r19, r18
     e4a:	22 27       	eor	r18, r18
     e4c:	91 81       	ldd	r25, Z+1	; 0x01
     e4e:	29 2b       	or	r18, r25
     e50:	c2 0e       	add	r12, r18
     e52:	d3 1e       	adc	r13, r19
     e54:	e1 1c       	adc	r14, r1
     e56:	f1 1c       	adc	r15, r1
     e58:	32 96       	adiw	r30, 0x02	; 2
     e5a:	12 97       	sbiw	r26, 0x02	; 2
     e5c:	a2 30       	cpi	r26, 0x02	; 2
     e5e:	b1 05       	cpc	r27, r1
     e60:	88 f7       	brcc	.-30     	; 0xe44 <_ZL13fill_checksumhhjh+0x4a>
     e62:	9a 01       	movw	r18, r20
     e64:	22 50       	subi	r18, 0x02	; 2
     e66:	31 09       	sbc	r19, r1
     e68:	2e 7f       	andi	r18, 0xFE	; 254
     e6a:	2e 5f       	subi	r18, 0xFE	; 254
     e6c:	3f 4f       	sbci	r19, 0xFF	; 255
     e6e:	c2 0f       	add	r28, r18
     e70:	d3 1f       	adc	r29, r19
     e72:	41 70       	andi	r20, 0x01	; 1
     e74:	55 27       	eor	r21, r21
     e76:	45 2b       	or	r20, r21
     e78:	61 f0       	breq	.+24     	; 0xe92 <_ZL13fill_checksumhhjh+0x98>
     e7a:	48 81       	ld	r20, Y
     e7c:	50 e0       	ldi	r21, 0x00	; 0
     e7e:	60 e0       	ldi	r22, 0x00	; 0
     e80:	70 e0       	ldi	r23, 0x00	; 0
     e82:	76 2f       	mov	r23, r22
     e84:	65 2f       	mov	r22, r21
     e86:	54 2f       	mov	r21, r20
     e88:	44 27       	eor	r20, r20
     e8a:	c4 0e       	add	r12, r20
     e8c:	d5 1e       	adc	r13, r21
     e8e:	e6 1e       	adc	r14, r22
     e90:	f7 1e       	adc	r15, r23
     e92:	a7 01       	movw	r20, r14
     e94:	66 27       	eor	r22, r22
     e96:	77 27       	eor	r23, r23
     e98:	41 15       	cp	r20, r1
     e9a:	51 05       	cpc	r21, r1
     e9c:	61 05       	cpc	r22, r1
     e9e:	71 05       	cpc	r23, r1
     ea0:	71 f0       	breq	.+28     	; 0xebe <_ZL13fill_checksumhhjh+0xc4>
     ea2:	ee 24       	eor	r14, r14
     ea4:	ff 24       	eor	r15, r15
     ea6:	c4 0e       	add	r12, r20
     ea8:	d5 1e       	adc	r13, r21
     eaa:	e6 1e       	adc	r14, r22
     eac:	f7 1e       	adc	r15, r23
     eae:	a7 01       	movw	r20, r14
     eb0:	66 27       	eor	r22, r22
     eb2:	77 27       	eor	r23, r23
     eb4:	41 15       	cp	r20, r1
     eb6:	51 05       	cpc	r21, r1
     eb8:	61 05       	cpc	r22, r1
     eba:	71 05       	cpc	r23, r1
     ebc:	91 f7       	brne	.-28     	; 0xea2 <_ZL13fill_checksumhhjh+0xa8>
     ebe:	c0 94       	com	r12
     ec0:	d0 94       	com	r13
     ec2:	e8 2f       	mov	r30, r24
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	ed 50       	subi	r30, 0x0D	; 13
     ec8:	fd 4f       	sbci	r31, 0xFD	; 253
     eca:	d0 82       	st	Z, r13
     ecc:	c1 82       	std	Z+1, r12	; 0x01
     ece:	df 91       	pop	r29
     ed0:	cf 91       	pop	r28
     ed2:	ff 90       	pop	r15
     ed4:	ef 90       	pop	r14
     ed6:	df 90       	pop	r13
     ed8:	cf 90       	pop	r12
     eda:	08 95       	ret

00000edc <_ZL6is_lanPKhS0_>:
     edc:	cf 93       	push	r28
     ede:	df 93       	push	r29
     ee0:	fc 01       	movw	r30, r24
     ee2:	20 81       	ld	r18, Z
     ee4:	22 23       	and	r18, r18
     ee6:	d1 f0       	breq	.+52     	; 0xf1c <_ZL6is_lanPKhS0_+0x40>
     ee8:	fb 01       	movw	r30, r22
     eea:	30 81       	ld	r19, Z
     eec:	33 23       	and	r19, r19
     eee:	c1 f0       	breq	.+48     	; 0xf20 <_ZL6is_lanPKhS0_+0x44>
     ef0:	23 27       	eor	r18, r19
     ef2:	30 91 05 05 	lds	r19, 0x0505	; 0x800505 <_ZN9EtherCard7netmaskE>
     ef6:	23 23       	and	r18, r19
     ef8:	a9 f4       	brne	.+42     	; 0xf24 <_ZL6is_lanPKhS0_+0x48>
     efa:	dc 01       	movw	r26, r24
     efc:	11 96       	adiw	r26, 0x01	; 1
     efe:	31 96       	adiw	r30, 0x01	; 1
     f00:	c6 e0       	ldi	r28, 0x06	; 6
     f02:	d5 e0       	ldi	r29, 0x05	; 5
     f04:	04 96       	adiw	r24, 0x04	; 4
     f06:	4d 91       	ld	r20, X+
     f08:	21 91       	ld	r18, Z+
     f0a:	39 91       	ld	r19, Y+
     f0c:	24 27       	eor	r18, r20
     f0e:	23 23       	and	r18, r19
     f10:	59 f4       	brne	.+22     	; 0xf28 <_ZL6is_lanPKhS0_+0x4c>
     f12:	a8 17       	cp	r26, r24
     f14:	b9 07       	cpc	r27, r25
     f16:	b9 f7       	brne	.-18     	; 0xf06 <_ZL6is_lanPKhS0_+0x2a>
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	07 c0       	rjmp	.+14     	; 0xf2a <_ZL6is_lanPKhS0_+0x4e>
     f1c:	80 e0       	ldi	r24, 0x00	; 0
     f1e:	05 c0       	rjmp	.+10     	; 0xf2a <_ZL6is_lanPKhS0_+0x4e>
     f20:	80 e0       	ldi	r24, 0x00	; 0
     f22:	03 c0       	rjmp	.+6      	; 0xf2a <_ZL6is_lanPKhS0_+0x4e>
     f24:	80 e0       	ldi	r24, 0x00	; 0
     f26:	01 c0       	rjmp	.+2      	; 0xf2a <_ZL6is_lanPKhS0_+0x4e>
     f28:	80 e0       	ldi	r24, 0x00	; 0
     f2a:	df 91       	pop	r29
     f2c:	cf 91       	pop	r28
     f2e:	08 95       	ret

00000f30 <_ZL20fill_ip_hdr_checksumv>:
     f30:	e3 ef       	ldi	r30, 0xF3	; 243
     f32:	f2 e0       	ldi	r31, 0x02	; 2
     f34:	10 8e       	std	Z+24, r1	; 0x18
     f36:	11 8e       	std	Z+25, r1	; 0x19
     f38:	80 e4       	ldi	r24, 0x40	; 64
     f3a:	84 8b       	std	Z+20, r24	; 0x14
     f3c:	15 8a       	std	Z+21, r1	; 0x15
     f3e:	86 8b       	std	Z+22, r24	; 0x16
     f40:	20 e0       	ldi	r18, 0x00	; 0
     f42:	44 e1       	ldi	r20, 0x14	; 20
     f44:	50 e0       	ldi	r21, 0x00	; 0
     f46:	6e e0       	ldi	r22, 0x0E	; 14
     f48:	88 e1       	ldi	r24, 0x18	; 24
     f4a:	57 cf       	rjmp	.-338    	; 0xdfa <_ZL13fill_checksumhhjh>
     f4c:	08 95       	ret

00000f4e <_ZL7setMACsPKh>:
     f4e:	bc 01       	movw	r22, r24
     f50:	83 ef       	ldi	r24, 0xF3	; 243
     f52:	92 e0       	ldi	r25, 0x02	; 2
     f54:	e0 d2       	rcall	.+1472   	; 0x1516 <_ZN9EtherCard7copyMacEPhPKh>
     f56:	6d e0       	ldi	r22, 0x0D	; 13
     f58:	75 e0       	ldi	r23, 0x05	; 5
     f5a:	89 ef       	ldi	r24, 0xF9	; 249
     f5c:	92 e0       	ldi	r25, 0x02	; 2
     f5e:	db c2       	rjmp	.+1462   	; 0x1516 <_ZN9EtherCard7copyMacEPhPKh>
     f60:	08 95       	ret

00000f62 <_ZL11make_eth_ipv>:
     f62:	89 ef       	ldi	r24, 0xF9	; 249
     f64:	92 e0       	ldi	r25, 0x02	; 2
     f66:	f3 df       	rcall	.-26     	; 0xf4e <_ZL7setMACsPKh>
     f68:	6d e0       	ldi	r22, 0x0D	; 13
     f6a:	73 e0       	ldi	r23, 0x03	; 3
     f6c:	81 e1       	ldi	r24, 0x11	; 17
     f6e:	93 e0       	ldi	r25, 0x03	; 3
     f70:	c5 d2       	rcall	.+1418   	; 0x14fc <_ZN9EtherCard6copyIpEPhPKh>
     f72:	69 e0       	ldi	r22, 0x09	; 9
     f74:	75 e0       	ldi	r23, 0x05	; 5
     f76:	8d e0       	ldi	r24, 0x0D	; 13
     f78:	93 e0       	ldi	r25, 0x03	; 3
     f7a:	c0 d2       	rcall	.+1408   	; 0x14fc <_ZN9EtherCard6copyIpEPhPKh>
     f7c:	d9 cf       	rjmp	.-78     	; 0xf30 <_ZL20fill_ip_hdr_checksumv>
     f7e:	08 95       	ret

00000f80 <_ZL12setMACandIPsPKhS0_>:
     f80:	cf 93       	push	r28
     f82:	df 93       	push	r29
     f84:	eb 01       	movw	r28, r22
     f86:	e3 df       	rcall	.-58     	; 0xf4e <_ZL7setMACsPKh>
     f88:	be 01       	movw	r22, r28
     f8a:	81 e1       	ldi	r24, 0x11	; 17
     f8c:	93 e0       	ldi	r25, 0x03	; 3
     f8e:	b6 d2       	rcall	.+1388   	; 0x14fc <_ZN9EtherCard6copyIpEPhPKh>
     f90:	69 e0       	ldi	r22, 0x09	; 9
     f92:	75 e0       	ldi	r23, 0x05	; 5
     f94:	8d e0       	ldi	r24, 0x0D	; 13
     f96:	93 e0       	ldi	r25, 0x03	; 3
     f98:	b1 d2       	rcall	.+1378   	; 0x14fc <_ZN9EtherCard6copyIpEPhPKh>
     f9a:	df 91       	pop	r29
     f9c:	cf 91       	pop	r28
     f9e:	08 95       	ret

00000fa0 <_ZL16client_store_macPhS_>:
     fa0:	cf 93       	push	r28
     fa2:	df 93       	push	r29
     fa4:	eb 01       	movw	r28, r22
     fa6:	44 e0       	ldi	r20, 0x04	; 4
     fa8:	50 e0       	ldi	r21, 0x00	; 0
     faa:	bc 01       	movw	r22, r24
     fac:	8f e0       	ldi	r24, 0x0F	; 15
     fae:	93 e0       	ldi	r25, 0x03	; 3
     fb0:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <memcmp>
     fb4:	89 2b       	or	r24, r25
     fb6:	31 f4       	brne	.+12     	; 0xfc4 <_ZL16client_store_macPhS_+0x24>
     fb8:	69 e0       	ldi	r22, 0x09	; 9
     fba:	73 e0       	ldi	r23, 0x03	; 3
     fbc:	ce 01       	movw	r24, r28
     fbe:	ab d2       	rcall	.+1366   	; 0x1516 <_ZN9EtherCard7copyMacEPhPKh>
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	01 c0       	rjmp	.+2      	; 0xfc6 <_ZL16client_store_macPhS_+0x26>
     fc4:	80 e0       	ldi	r24, 0x00	; 0
     fc6:	df 91       	pop	r29
     fc8:	cf 91       	pop	r28
     fca:	08 95       	ret

00000fcc <_ZL17client_arp_whohasPh>:
     fcc:	0f 93       	push	r16
     fce:	1f 93       	push	r17
     fd0:	cf 93       	push	r28
     fd2:	8c 01       	movw	r16, r24
     fd4:	85 e2       	ldi	r24, 0x25	; 37
     fd6:	92 e0       	ldi	r25, 0x02	; 2
     fd8:	ba df       	rcall	.-140    	; 0xf4e <_ZL7setMACsPKh>
     fda:	e3 ef       	ldi	r30, 0xF3	; 243
     fdc:	f2 e0       	ldi	r31, 0x02	; 2
     fde:	88 e0       	ldi	r24, 0x08	; 8
     fe0:	84 87       	std	Z+12, r24	; 0x0c
     fe2:	c6 e0       	ldi	r28, 0x06	; 6
     fe4:	c5 87       	std	Z+13, r28	; 0x0d
     fe6:	48 e0       	ldi	r20, 0x08	; 8
     fe8:	50 e0       	ldi	r21, 0x00	; 0
     fea:	6f e7       	ldi	r22, 0x7F	; 127
     fec:	72 e0       	ldi	r23, 0x02	; 2
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	93 e0       	ldi	r25, 0x03	; 3
     ff2:	0e 94 52 14 	call	0x28a4	; 0x28a4 <memcpy_P>
     ff6:	e3 e1       	ldi	r30, 0x13	; 19
     ff8:	f3 e0       	ldi	r31, 0x03	; 3
     ffa:	df 01       	movw	r26, r30
     ffc:	1d 92       	st	X+, r1
     ffe:	ca 95       	dec	r28
    1000:	e9 f7       	brne	.-6      	; 0xffc <_ZL17client_arp_whohasPh+0x30>
    1002:	6d e0       	ldi	r22, 0x0D	; 13
    1004:	75 e0       	ldi	r23, 0x05	; 5
    1006:	89 e0       	ldi	r24, 0x09	; 9
    1008:	93 e0       	ldi	r25, 0x03	; 3
    100a:	85 d2       	rcall	.+1290   	; 0x1516 <_ZN9EtherCard7copyMacEPhPKh>
    100c:	b8 01       	movw	r22, r16
    100e:	89 e1       	ldi	r24, 0x19	; 25
    1010:	93 e0       	ldi	r25, 0x03	; 3
    1012:	74 d2       	rcall	.+1256   	; 0x14fc <_ZN9EtherCard6copyIpEPhPKh>
    1014:	69 e0       	ldi	r22, 0x09	; 9
    1016:	75 e0       	ldi	r23, 0x05	; 5
    1018:	8f e0       	ldi	r24, 0x0F	; 15
    101a:	93 e0       	ldi	r25, 0x03	; 3
    101c:	6f d2       	rcall	.+1246   	; 0x14fc <_ZN9EtherCard6copyIpEPhPKh>
    101e:	8a e2       	ldi	r24, 0x2A	; 42
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	c6 dd       	rcall	.-1140   	; 0xbb0 <_ZN8ENC28J6010packetSendEj>
    1024:	cf 91       	pop	r28
    1026:	1f 91       	pop	r17
    1028:	0f 91       	pop	r16
    102a:	08 95       	ret

0000102c <_ZN9EtherCard10udpPrepareEjPKhj>:
    102c:	ef 92       	push	r14
    102e:	ff 92       	push	r15
    1030:	0f 93       	push	r16
    1032:	1f 93       	push	r17
    1034:	cf 93       	push	r28
    1036:	df 93       	push	r29
    1038:	18 2f       	mov	r17, r24
    103a:	09 2f       	mov	r16, r25
    103c:	eb 01       	movw	r28, r22
    103e:	f4 2e       	mov	r15, r20
    1040:	e5 2e       	mov	r14, r21
    1042:	89 e0       	ldi	r24, 0x09	; 9
    1044:	95 e0       	ldi	r25, 0x05	; 5
    1046:	4a df       	rcall	.-364    	; 0xedc <_ZL6is_lanPKhS0_>
    1048:	88 23       	and	r24, r24
    104a:	29 f0       	breq	.+10     	; 0x1056 <_ZN9EtherCard10udpPrepareEjPKhj+0x2a>
    104c:	be 01       	movw	r22, r28
    104e:	8e e1       	ldi	r24, 0x1E	; 30
    1050:	95 e0       	ldi	r25, 0x05	; 5
    1052:	96 df       	rcall	.-212    	; 0xf80 <_ZL12setMACandIPsPKhS0_>
    1054:	04 c0       	rjmp	.+8      	; 0x105e <_ZN9EtherCard10udpPrepareEjPKhj+0x32>
    1056:	be 01       	movw	r22, r28
    1058:	84 e1       	ldi	r24, 0x14	; 20
    105a:	95 e0       	ldi	r25, 0x05	; 5
    105c:	91 df       	rcall	.-222    	; 0xf80 <_ZL12setMACandIPsPKhS0_>
    105e:	88 81       	ld	r24, Y
    1060:	80 7f       	andi	r24, 0xF0	; 240
    1062:	80 3e       	cpi	r24, 0xE0	; 224
    1064:	91 f0       	breq	.+36     	; 0x108a <_ZN9EtherCard10udpPrepareEjPKhj+0x5e>
    1066:	88 81       	ld	r24, Y
    1068:	99 81       	ldd	r25, Y+1	; 0x01
    106a:	aa 81       	ldd	r26, Y+2	; 0x02
    106c:	bb 81       	ldd	r27, Y+3	; 0x03
    106e:	8f 3f       	cpi	r24, 0xFF	; 255
    1070:	9f 4f       	sbci	r25, 0xFF	; 255
    1072:	af 4f       	sbci	r26, 0xFF	; 255
    1074:	bf 4f       	sbci	r27, 0xFF	; 255
    1076:	49 f0       	breq	.+18     	; 0x108a <_ZN9EtherCard10udpPrepareEjPKhj+0x5e>
    1078:	44 e0       	ldi	r20, 0x04	; 4
    107a:	50 e0       	ldi	r21, 0x00	; 0
    107c:	be 01       	movw	r22, r28
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	95 e0       	ldi	r25, 0x05	; 5
    1082:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <memcmp>
    1086:	89 2b       	or	r24, r25
    1088:	29 f4       	brne	.+10     	; 0x1094 <_ZN9EtherCard10udpPrepareEjPKhj+0x68>
    108a:	65 e2       	ldi	r22, 0x25	; 37
    108c:	72 e0       	ldi	r23, 0x02	; 2
    108e:	83 ef       	ldi	r24, 0xF3	; 243
    1090:	92 e0       	ldi	r25, 0x02	; 2
    1092:	41 d2       	rcall	.+1154   	; 0x1516 <_ZN9EtherCard7copyMacEPhPKh>
    1094:	c3 ef       	ldi	r28, 0xF3	; 243
    1096:	d2 e0       	ldi	r29, 0x02	; 2
    1098:	88 e0       	ldi	r24, 0x08	; 8
    109a:	8c 87       	std	Y+12, r24	; 0x0c
    109c:	1d 86       	std	Y+13, r1	; 0x0d
    109e:	49 e0       	ldi	r20, 0x09	; 9
    10a0:	50 e0       	ldi	r21, 0x00	; 0
    10a2:	66 e7       	ldi	r22, 0x76	; 118
    10a4:	72 e0       	ldi	r23, 0x02	; 2
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	93 e0       	ldi	r25, 0x03	; 3
    10aa:	0e 94 52 14 	call	0x28a4	; 0x28a4 <memcpy_P>
    10ae:	18 8a       	std	Y+16, r1	; 0x10
    10b0:	81 e1       	ldi	r24, 0x11	; 17
    10b2:	8f 8b       	std	Y+23, r24	; 0x17
    10b4:	ec a2       	std	Y+36, r14	; 0x24
    10b6:	fd a2       	std	Y+37, r15	; 0x25
    10b8:	0a a3       	std	Y+34, r16	; 0x22
    10ba:	1b a3       	std	Y+35, r17	; 0x23
    10bc:	1e a2       	std	Y+38, r1	; 0x26
    10be:	18 a6       	std	Y+40, r1	; 0x28
    10c0:	19 a6       	std	Y+41, r1	; 0x29
    10c2:	df 91       	pop	r29
    10c4:	cf 91       	pop	r28
    10c6:	1f 91       	pop	r17
    10c8:	0f 91       	pop	r16
    10ca:	ff 90       	pop	r15
    10cc:	ef 90       	pop	r14
    10ce:	08 95       	ret

000010d0 <_ZN9EtherCard11udpTransmitEj>:
    10d0:	0f 93       	push	r16
    10d2:	1f 93       	push	r17
    10d4:	cf 93       	push	r28
    10d6:	df 93       	push	r29
    10d8:	ec 01       	movw	r28, r24
    10da:	03 ef       	ldi	r16, 0xF3	; 243
    10dc:	12 e0       	ldi	r17, 0x02	; 2
    10de:	4c 96       	adiw	r24, 0x1c	; 28
    10e0:	f8 01       	movw	r30, r16
    10e2:	90 8b       	std	Z+16, r25	; 0x10
    10e4:	81 8b       	std	Z+17, r24	; 0x11
    10e6:	24 df       	rcall	.-440    	; 0xf30 <_ZL20fill_ip_hdr_checksumv>
    10e8:	ce 01       	movw	r24, r28
    10ea:	08 96       	adiw	r24, 0x08	; 8
    10ec:	f8 01       	movw	r30, r16
    10ee:	96 a3       	std	Z+38, r25	; 0x26
    10f0:	87 a3       	std	Z+39, r24	; 0x27
    10f2:	ae 01       	movw	r20, r28
    10f4:	40 5f       	subi	r20, 0xF0	; 240
    10f6:	5f 4f       	sbci	r21, 0xFF	; 255
    10f8:	21 e0       	ldi	r18, 0x01	; 1
    10fa:	6a e1       	ldi	r22, 0x1A	; 26
    10fc:	88 e2       	ldi	r24, 0x28	; 40
    10fe:	7d de       	rcall	.-774    	; 0xdfa <_ZL13fill_checksumhhjh>
    1100:	ce 01       	movw	r24, r28
    1102:	8a 96       	adiw	r24, 0x2a	; 42
    1104:	55 dd       	rcall	.-1366   	; 0xbb0 <_ZN8ENC28J6010packetSendEj>
    1106:	df 91       	pop	r29
    1108:	cf 91       	pop	r28
    110a:	1f 91       	pop	r17
    110c:	0f 91       	pop	r16
    110e:	08 95       	ret

00001110 <_ZN9EtherCard7sendUdpEPKhjjS1_j>:
    1110:	0f 93       	push	r16
    1112:	1f 93       	push	r17
    1114:	cf 93       	push	r28
    1116:	df 93       	push	r29
    1118:	d6 2f       	mov	r29, r22
    111a:	c7 2f       	mov	r28, r23
    111c:	ca 01       	movw	r24, r20
    111e:	a8 01       	movw	r20, r16
    1120:	b9 01       	movw	r22, r18
    1122:	84 df       	rcall	.-248    	; 0x102c <_ZN9EtherCard10udpPrepareEjPKhj>
    1124:	8d 2f       	mov	r24, r29
    1126:	9c 2f       	mov	r25, r28
    1128:	81 30       	cpi	r24, 0x01	; 1
    112a:	22 e0       	ldi	r18, 0x02	; 2
    112c:	92 07       	cpc	r25, r18
    112e:	10 f0       	brcs	.+4      	; 0x1134 <_ZN9EtherCard7sendUdpEPKhjjS1_j+0x24>
    1130:	80 e0       	ldi	r24, 0x00	; 0
    1132:	92 e0       	ldi	r25, 0x02	; 2
    1134:	cd df       	rcall	.-102    	; 0x10d0 <_ZN9EtherCard11udpTransmitEj>
    1136:	df 91       	pop	r29
    1138:	cf 91       	pop	r28
    113a:	1f 91       	pop	r17
    113c:	0f 91       	pop	r16
    113e:	08 95       	ret

00001140 <_ZN9EtherCard7setGwIpEPKh>:
    1140:	10 92 f4 04 	sts	0x04F4, r1	; 0x8004f4 <_ZN9EtherCard8delaycntE+0x1>
    1144:	10 92 f3 04 	sts	0x04F3, r1	; 0x8004f3 <_ZN9EtherCard8delaycntE>
    1148:	21 e0       	ldi	r18, 0x01	; 1
    114a:	20 93 13 05 	sts	0x0513, r18	; 0x800513 <_ZL9waitgwmac>
    114e:	bc 01       	movw	r22, r24
    1150:	8d ef       	ldi	r24, 0xFD	; 253
    1152:	94 e0       	ldi	r25, 0x04	; 4
    1154:	d3 c1       	rjmp	.+934    	; 0x14fc <_ZN9EtherCard6copyIpEPhPKh>
    1156:	08 95       	ret

00001158 <_ZN9EtherCard22updateBroadcastAddressEv>:
    1158:	cf 93       	push	r28
    115a:	df 93       	push	r29
    115c:	e9 e0       	ldi	r30, 0x09	; 9
    115e:	f5 e0       	ldi	r31, 0x05	; 5
    1160:	c5 e0       	ldi	r28, 0x05	; 5
    1162:	d5 e0       	ldi	r29, 0x05	; 5
    1164:	a1 e0       	ldi	r26, 0x01	; 1
    1166:	b5 e0       	ldi	r27, 0x05	; 5
    1168:	2d e0       	ldi	r18, 0x0D	; 13
    116a:	35 e0       	ldi	r19, 0x05	; 5
    116c:	91 91       	ld	r25, Z+
    116e:	89 91       	ld	r24, Y+
    1170:	80 95       	com	r24
    1172:	89 2b       	or	r24, r25
    1174:	8d 93       	st	X+, r24
    1176:	e2 17       	cp	r30, r18
    1178:	f3 07       	cpc	r31, r19
    117a:	c1 f7       	brne	.-16     	; 0x116c <_ZN9EtherCard22updateBroadcastAddressEv+0x14>
    117c:	df 91       	pop	r29
    117e:	cf 91       	pop	r28
    1180:	08 95       	ret

00001182 <_ZN9EtherCard10packetLoopEj>:
	gPB[ICMP_CHECKSUM_P+1]++;
	gPB[ICMP_CHECKSUM_P] += 0x08;
	EtherCard::packetSend(len);
}

uint16_t EtherCard::packetLoop (uint16_t plen) {
    1182:	cf 93       	push	r28
    1184:	df 93       	push	r29
    1186:	ec 01       	movw	r28, r24
    if (plen==0) {
    1188:	00 97       	sbiw	r24, 0x00	; 0
    118a:	09 f0       	breq	.+2      	; 0x118e <_ZN9EtherCard10packetLoopEj+0xc>
    118c:	3f c0       	rjmp	.+126    	; 0x120c <_ZN9EtherCard10packetLoopEj+0x8a>
        //Check every 65536 (no-packet) cycles whether we need to retry ARP request for gateway
        if ((waitgwmac & WGW_INITIAL_ARP || waitgwmac & WGW_REFRESHING) &&
    118e:	80 91 13 05 	lds	r24, 0x0513	; 0x800513 <_ZL9waitgwmac>
    1192:	85 70       	andi	r24, 0x05	; 5
    1194:	89 f0       	breq	.+34     	; 0x11b8 <_ZN9EtherCard10packetLoopEj+0x36>
    1196:	80 91 f3 04 	lds	r24, 0x04F3	; 0x8004f3 <_ZN9EtherCard8delaycntE>
    119a:	90 91 f4 04 	lds	r25, 0x04F4	; 0x8004f4 <_ZN9EtherCard8delaycntE+0x1>
    119e:	89 2b       	or	r24, r25
    11a0:	59 f4       	brne	.+22     	; 0x11b8 <_ZN9EtherCard10packetLoopEj+0x36>
                delaycnt==0 && isLinkUp()) {
    11a2:	f3 dc       	rcall	.-1562   	; 0xb8a <_ZN8ENC28J608isLinkUpEv>
}

uint16_t EtherCard::packetLoop (uint16_t plen) {
    if (plen==0) {
        //Check every 65536 (no-packet) cycles whether we need to retry ARP request for gateway
        if ((waitgwmac & WGW_INITIAL_ARP || waitgwmac & WGW_REFRESHING) &&
    11a4:	88 23       	and	r24, r24
    11a6:	41 f0       	breq	.+16     	; 0x11b8 <_ZN9EtherCard10packetLoopEj+0x36>
                delaycnt==0 && isLinkUp()) {
            client_arp_whohas(gwip);
    11a8:	8d ef       	ldi	r24, 0xFD	; 253
    11aa:	94 e0       	ldi	r25, 0x04	; 4
    11ac:	0f df       	rcall	.-482    	; 0xfcc <_ZL17client_arp_whohasPh>
            waitgwmac |= WGW_ACCEPT_ARP_REPLY;
    11ae:	80 91 13 05 	lds	r24, 0x0513	; 0x800513 <_ZL9waitgwmac>
    11b2:	88 60       	ori	r24, 0x08	; 8
    11b4:	80 93 13 05 	sts	0x0513, r24	; 0x800513 <_ZL9waitgwmac>
        }
        delaycnt++;
    11b8:	80 91 f3 04 	lds	r24, 0x04F3	; 0x8004f3 <_ZN9EtherCard8delaycntE>
    11bc:	90 91 f4 04 	lds	r25, 0x04F4	; 0x8004f4 <_ZN9EtherCard8delaycntE+0x1>
    11c0:	01 96       	adiw	r24, 0x01	; 1
    11c2:	90 93 f4 04 	sts	0x04F4, r25	; 0x8004f4 <_ZN9EtherCard8delaycntE+0x1>
    11c6:	80 93 f3 04 	sts	0x04F3, r24	; 0x8004f3 <_ZN9EtherCard8delaycntE>

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, dnsip) && !has_dns_mac && !waiting_for_dns_mac) {
    11ca:	69 ef       	ldi	r22, 0xF9	; 249
    11cc:	74 e0       	ldi	r23, 0x04	; 4
    11ce:	89 e0       	ldi	r24, 0x09	; 9
    11d0:	95 e0       	ldi	r25, 0x05	; 5
    11d2:	84 de       	rcall	.-760    	; 0xedc <_ZL6is_lanPKhS0_>
    11d4:	88 23       	and	r24, r24
    11d6:	49 f0       	breq	.+18     	; 0x11ea <_ZN9EtherCard10packetLoopEj+0x68>
    11d8:	80 91 1c 05 	lds	r24, 0x051C	; 0x80051c <_ZL11has_dns_mac>
    11dc:	81 11       	cpse	r24, r1
    11de:	05 c0       	rjmp	.+10     	; 0x11ea <_ZN9EtherCard10packetLoopEj+0x68>
    11e0:	80 91 1d 05 	lds	r24, 0x051D	; 0x80051d <_ZL19waiting_for_dns_mac>
    11e4:	88 23       	and	r24, r24
    11e6:	09 f4       	brne	.+2      	; 0x11ea <_ZN9EtherCard10packetLoopEj+0x68>
    11e8:	dc c0       	rjmp	.+440    	; 0x13a2 <_ZN9EtherCard10packetLoopEj+0x220>
            client_arp_whohas(dnsip);
            waiting_for_dns_mac = true;
        }

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, hisip) && !has_dest_mac && !waiting_for_dest_mac) {
    11ea:	65 ef       	ldi	r22, 0xF5	; 245
    11ec:	74 e0       	ldi	r23, 0x04	; 4
    11ee:	89 e0       	ldi	r24, 0x09	; 9
    11f0:	95 e0       	ldi	r25, 0x05	; 5
    11f2:	74 de       	rcall	.-792    	; 0xedc <_ZL6is_lanPKhS0_>
    11f4:	88 23       	and	r24, r24
    11f6:	09 f4       	brne	.+2      	; 0x11fa <_ZN9EtherCard10packetLoopEj+0x78>
    11f8:	f8 c0       	rjmp	.+496    	; 0x13ea <_ZN9EtherCard10packetLoopEj+0x268>
    11fa:	80 91 1a 05 	lds	r24, 0x051A	; 0x80051a <_ZL12has_dest_mac>
    11fe:	81 11       	cpse	r24, r1
    1200:	f4 c0       	rjmp	.+488    	; 0x13ea <_ZN9EtherCard10packetLoopEj+0x268>
    1202:	80 91 1b 05 	lds	r24, 0x051B	; 0x80051b <_ZL20waiting_for_dest_mac>
    1206:	81 11       	cpse	r24, r1
    1208:	f0 c0       	rjmp	.+480    	; 0x13ea <_ZN9EtherCard10packetLoopEj+0x268>
    120a:	d2 c0       	rjmp	.+420    	; 0x13b0 <_ZN9EtherCard10packetLoopEj+0x22e>
    return true;
}

static uint8_t eth_type_is_arp_and_my_ip(uint16_t len) {
    return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
    120c:	89 32       	cpi	r24, 0x29	; 41
    120e:	91 05       	cpc	r25, r1
    1210:	08 f4       	brcc	.+2      	; 0x1214 <_ZN9EtherCard10packetLoopEj+0x92>
    1212:	d5 c0       	rjmp	.+426    	; 0x13be <_ZN9EtherCard10packetLoopEj+0x23c>
        }
    return true;
}

static uint8_t eth_type_is_arp_and_my_ip(uint16_t len) {
    return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
    1214:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <_ZN8ENC28J606bufferE+0xc>
    1218:	88 30       	cpi	r24, 0x08	; 8
    121a:	09 f0       	breq	.+2      	; 0x121e <_ZN9EtherCard10packetLoopEj+0x9c>
    121c:	e6 c0       	rjmp	.+460    	; 0x13ea <_ZN9EtherCard10packetLoopEj+0x268>
    121e:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <_ZN8ENC28J606bufferE+0xd>
    1222:	86 30       	cpi	r24, 0x06	; 6
    1224:	09 f0       	breq	.+2      	; 0x1228 <_ZN9EtherCard10packetLoopEj+0xa6>
    1226:	dd c0       	rjmp	.+442    	; 0x13e2 <_ZN9EtherCard10packetLoopEj+0x260>
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
           memcmp(gPB + ETH_ARP_DST_IP_P, EtherCard::myip, IP_LEN) == 0;
    1228:	44 e0       	ldi	r20, 0x04	; 4
    122a:	50 e0       	ldi	r21, 0x00	; 0
    122c:	69 e0       	ldi	r22, 0x09	; 9
    122e:	75 e0       	ldi	r23, 0x05	; 5
    1230:	89 e1       	ldi	r24, 0x19	; 25
    1232:	93 e0       	ldi	r25, 0x03	; 3
    1234:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <memcmp>
    return true;
}

static uint8_t eth_type_is_arp_and_my_ip(uint16_t len) {
    return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
    1238:	89 2b       	or	r24, r25
    123a:	09 f0       	breq	.+2      	; 0x123e <_ZN9EtherCard10packetLoopEj+0xbc>
    123c:	d2 c0       	rjmp	.+420    	; 0x13e2 <_ZN9EtherCard10packetLoopEj+0x260>
    EtherCard::copyIp(gPB + IP_SRC_P, EtherCard::myip);
    fill_ip_hdr_checksum();
}

static void make_arp_answer_from_request() {
    setMACs(gPB + ETH_SRC_MAC);
    123e:	c3 c0       	rjmp	.+390    	; 0x13c6 <_ZN9EtherCard10packetLoopEj+0x244>
    1240:	89 ef       	ldi	r24, 0xF9	; 249
    1242:	92 e0       	ldi	r25, 0x02	; 2
    1244:	84 de       	rcall	.-760    	; 0xf4e <_ZL7setMACsPKh>
    gPB[ETH_ARP_OPCODE_H_P] = ETH_ARP_OPCODE_REPLY_H_V;
    1246:	e3 ef       	ldi	r30, 0xF3	; 243
    1248:	f2 e0       	ldi	r31, 0x02	; 2
    124a:	14 8a       	std	Z+20, r1	; 0x14
    gPB[ETH_ARP_OPCODE_L_P] = ETH_ARP_OPCODE_REPLY_L_V;
    124c:	82 e0       	ldi	r24, 0x02	; 2
    EtherCard::copyMac(gPB + ETH_ARP_DST_MAC_P, gPB + ETH_ARP_SRC_MAC_P);
    124e:	85 8b       	std	Z+21, r24	; 0x15
    1250:	69 e0       	ldi	r22, 0x09	; 9
    1252:	73 e0       	ldi	r23, 0x03	; 3
    1254:	83 e1       	ldi	r24, 0x13	; 19
    1256:	93 e0       	ldi	r25, 0x03	; 3
    EtherCard::copyMac(gPB + ETH_ARP_SRC_MAC_P, EtherCard::mymac);
    1258:	5e d1       	rcall	.+700    	; 0x1516 <_ZN9EtherCard7copyMacEPhPKh>
    125a:	6d e0       	ldi	r22, 0x0D	; 13
    125c:	75 e0       	ldi	r23, 0x05	; 5
    125e:	89 e0       	ldi	r24, 0x09	; 9
    1260:	93 e0       	ldi	r25, 0x03	; 3
    EtherCard::copyIp(gPB + ETH_ARP_DST_IP_P, gPB + ETH_ARP_SRC_IP_P);
    1262:	59 d1       	rcall	.+690    	; 0x1516 <_ZN9EtherCard7copyMacEPhPKh>
    1264:	6f e0       	ldi	r22, 0x0F	; 15
    1266:	73 e0       	ldi	r23, 0x03	; 3
    1268:	89 e1       	ldi	r24, 0x19	; 25
    126a:	93 e0       	ldi	r25, 0x03	; 3
    EtherCard::copyIp(gPB + ETH_ARP_SRC_IP_P, EtherCard::myip);
    126c:	47 d1       	rcall	.+654    	; 0x14fc <_ZN9EtherCard6copyIpEPhPKh>
    126e:	69 e0       	ldi	r22, 0x09	; 9
    1270:	75 e0       	ldi	r23, 0x05	; 5
    1272:	8f e0       	ldi	r24, 0x0F	; 15
    1274:	93 e0       	ldi	r25, 0x03	; 3
    1276:	42 d1       	rcall	.+644    	; 0x14fc <_ZN9EtherCard6copyIpEPhPKh>
    EtherCard::packetSend(42);
    1278:	8a e2       	ldi	r24, 0x2A	; 42
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	99 dc       	rcall	.-1742   	; 0xbb0 <_ZN8ENC28J6010packetSendEj>
    127e:	80 91 13 05 	lds	r24, 0x0513	; 0x800513 <_ZL9waitgwmac>

    if (eth_type_is_arp_and_my_ip(plen))
    {   //Service ARP request
        if (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REQ_L_V)
            make_arp_answer_from_request();
        if (waitgwmac & WGW_ACCEPT_ARP_REPLY && (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REPLY_L_V) && client_store_mac(gwip, gwmacaddr))
    1282:	83 ff       	sbrs	r24, 3
    1284:	0e c0       	rjmp	.+28     	; 0x12a2 <_ZN9EtherCard10packetLoopEj+0x120>
    1286:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <_ZN8ENC28J606bufferE+0x15>
    128a:	82 30       	cpi	r24, 0x02	; 2
    128c:	51 f4       	brne	.+20     	; 0x12a2 <_ZN9EtherCard10packetLoopEj+0x120>
    128e:	64 e1       	ldi	r22, 0x14	; 20
    1290:	75 e0       	ldi	r23, 0x05	; 5
    1292:	8d ef       	ldi	r24, 0xFD	; 253
    1294:	94 e0       	ldi	r25, 0x04	; 4
    1296:	84 de       	rcall	.-760    	; 0xfa0 <_ZL16client_store_macPhS_>
    1298:	88 23       	and	r24, r24
    129a:	19 f0       	breq	.+6      	; 0x12a2 <_ZN9EtherCard10packetLoopEj+0x120>
    129c:	82 e0       	ldi	r24, 0x02	; 2
            waitgwmac = WGW_HAVE_GW_MAC;
    129e:	80 93 13 05 	sts	0x0513, r24	; 0x800513 <_ZL9waitgwmac>
    12a2:	80 91 1c 05 	lds	r24, 0x051C	; 0x80051c <_ZL11has_dns_mac>
        if (!has_dns_mac && waiting_for_dns_mac && client_store_mac(dnsip, destmacaddr)) {
    12a6:	81 11       	cpse	r24, r1
    12a8:	10 c0       	rjmp	.+32     	; 0x12ca <_ZN9EtherCard10packetLoopEj+0x148>
    12aa:	80 91 1d 05 	lds	r24, 0x051D	; 0x80051d <_ZL19waiting_for_dns_mac>
    12ae:	88 23       	and	r24, r24
    12b0:	61 f0       	breq	.+24     	; 0x12ca <_ZN9EtherCard10packetLoopEj+0x148>
    12b2:	6e e1       	ldi	r22, 0x1E	; 30
    12b4:	75 e0       	ldi	r23, 0x05	; 5
    12b6:	89 ef       	ldi	r24, 0xF9	; 249
    12b8:	94 e0       	ldi	r25, 0x04	; 4
    12ba:	72 de       	rcall	.-796    	; 0xfa0 <_ZL16client_store_macPhS_>
    12bc:	88 23       	and	r24, r24
    12be:	29 f0       	breq	.+10     	; 0x12ca <_ZN9EtherCard10packetLoopEj+0x148>
    12c0:	81 e0       	ldi	r24, 0x01	; 1
            has_dns_mac = true;
    12c2:	80 93 1c 05 	sts	0x051C, r24	; 0x80051c <_ZL11has_dns_mac>
    12c6:	10 92 1d 05 	sts	0x051D, r1	; 0x80051d <_ZL19waiting_for_dns_mac>
            waiting_for_dns_mac = false;
    12ca:	80 91 1a 05 	lds	r24, 0x051A	; 0x80051a <_ZL12has_dest_mac>
        }
        if (!has_dest_mac && waiting_for_dest_mac && client_store_mac(hisip, destmacaddr)) {
    12ce:	81 11       	cpse	r24, r1
    12d0:	8c c0       	rjmp	.+280    	; 0x13ea <_ZN9EtherCard10packetLoopEj+0x268>
    12d2:	80 91 1b 05 	lds	r24, 0x051B	; 0x80051b <_ZL20waiting_for_dest_mac>
    12d6:	88 23       	and	r24, r24
    12d8:	09 f4       	brne	.+2      	; 0x12dc <_ZN9EtherCard10packetLoopEj+0x15a>
    12da:	87 c0       	rjmp	.+270    	; 0x13ea <_ZN9EtherCard10packetLoopEj+0x268>
    12dc:	6e e1       	ldi	r22, 0x1E	; 30
    12de:	75 e0       	ldi	r23, 0x05	; 5
    12e0:	85 ef       	ldi	r24, 0xF5	; 245
    12e2:	94 e0       	ldi	r25, 0x04	; 4
    12e4:	5d de       	rcall	.-838    	; 0xfa0 <_ZL16client_store_macPhS_>
    12e6:	88 23       	and	r24, r24
    12e8:	09 f4       	brne	.+2      	; 0x12ec <_ZN9EtherCard10packetLoopEj+0x16a>
    12ea:	7f c0       	rjmp	.+254    	; 0x13ea <_ZN9EtherCard10packetLoopEj+0x268>
    12ec:	81 e0       	ldi	r24, 0x01	; 1
            has_dest_mac = true;
    12ee:	80 93 1a 05 	sts	0x051A, r24	; 0x80051a <_ZL12has_dest_mac>
    12f2:	10 92 1b 05 	sts	0x051B, r1	; 0x80051b <_ZL20waiting_for_dest_mac>
            waiting_for_dest_mac = false;
    12f6:	79 c0       	rjmp	.+242    	; 0x13ea <_ZN9EtherCard10packetLoopEj+0x268>
    12f8:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <_ZN8ENC28J606bufferE+0xc>
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
           memcmp(gPB + ETH_ARP_DST_IP_P, EtherCard::myip, IP_LEN) == 0;
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
    12fc:	88 30       	cpi	r24, 0x08	; 8
    12fe:	09 f0       	breq	.+2      	; 0x1302 <_ZN9EtherCard10packetLoopEj+0x180>
    1300:	74 c0       	rjmp	.+232    	; 0x13ea <_ZN9EtherCard10packetLoopEj+0x268>
    1302:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <_ZN8ENC28J606bufferE+0xd>
    1306:	81 11       	cpse	r24, r1
    1308:	70 c0       	rjmp	.+224    	; 0x13ea <_ZN9EtherCard10packetLoopEj+0x268>
    130a:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <_ZN8ENC28J606bufferE+0xe>
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
    130e:	85 34       	cpi	r24, 0x45	; 69
    1310:	09 f0       	breq	.+2      	; 0x1314 <_ZN9EtherCard10packetLoopEj+0x192>
    1312:	6b c0       	rjmp	.+214    	; 0x13ea <_ZN9EtherCard10packetLoopEj+0x268>
    1314:	44 e0       	ldi	r20, 0x04	; 4
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
           (memcmp(gPB + IP_DST_P, EtherCard::myip, IP_LEN) == 0  //not my IP
    1316:	50 e0       	ldi	r21, 0x00	; 0
    1318:	69 e0       	ldi	r22, 0x09	; 9
    131a:	75 e0       	ldi	r23, 0x05	; 5
    131c:	81 e1       	ldi	r24, 0x11	; 17
    131e:	93 e0       	ldi	r25, 0x03	; 3
    1320:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <memcmp>
    1324:	89 2b       	or	r24, r25
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
    1326:	09 f4       	brne	.+2      	; 0x132a <_ZN9EtherCard10packetLoopEj+0x1a8>
    1328:	54 c0       	rjmp	.+168    	; 0x13d2 <_ZN9EtherCard10packetLoopEj+0x250>
    132a:	44 e0       	ldi	r20, 0x04	; 4
           (memcmp(gPB + IP_DST_P, EtherCard::myip, IP_LEN) == 0  //not my IP
            || (memcmp(gPB + IP_DST_P, EtherCard::broadcastip, IP_LEN) == 0) //not subnet broadcast
    132c:	50 e0       	ldi	r21, 0x00	; 0
    132e:	61 e0       	ldi	r22, 0x01	; 1
    1330:	75 e0       	ldi	r23, 0x05	; 5
    1332:	81 e1       	ldi	r24, 0x11	; 17
    1334:	93 e0       	ldi	r25, 0x03	; 3
    1336:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <memcmp>
    133a:	89 2b       	or	r24, r25
    133c:	09 f4       	brne	.+2      	; 0x1340 <_ZN9EtherCard10packetLoopEj+0x1be>
    133e:	49 c0       	rjmp	.+146    	; 0x13d2 <_ZN9EtherCard10packetLoopEj+0x250>
    1340:	44 e0       	ldi	r20, 0x04	; 4
            || (memcmp(gPB + IP_DST_P, allOnes, IP_LEN) == 0)); //not global broadcasts
    1342:	50 e0       	ldi	r21, 0x00	; 0
    1344:	65 e2       	ldi	r22, 0x25	; 37
    1346:	72 e0       	ldi	r23, 0x02	; 2
    1348:	81 e1       	ldi	r24, 0x11	; 17
    134a:	93 e0       	ldi	r25, 0x03	; 3
    134c:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <memcmp>
    1350:	89 2b       	or	r24, r25
    1352:	09 f0       	breq	.+2      	; 0x1356 <_ZN9EtherCard10packetLoopEj+0x1d4>
    1354:	4a c0       	rjmp	.+148    	; 0x13ea <_ZN9EtherCard10packetLoopEj+0x268>
    1356:	3d c0       	rjmp	.+122    	; 0x13d2 <_ZN9EtherCard10packetLoopEj+0x250>
    1358:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <_ZN8ENC28J606bufferE+0x22>
        //!@todo Add other protocols (and make each optional at compile time)
        return 0;
    }
	
	//To handle pinging
	if (gPB[IP_PROTO_P]==IP_PROTO_ICMP_V && gPB[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V)
    135c:	88 30       	cpi	r24, 0x08	; 8
    135e:	c9 f4       	brne	.+50     	; 0x1392 <_ZN9EtherCard10packetLoopEj+0x210>
	{   //Service ICMP echo request (ping)
		if (icmp_cb)
    1360:	e0 91 24 05 	lds	r30, 0x0524	; 0x800524 <_ZL7icmp_cb>
    1364:	f0 91 25 05 	lds	r31, 0x0525	; 0x800525 <_ZL7icmp_cb+0x1>
    1368:	30 97       	sbiw	r30, 0x00	; 0
    136a:	19 f0       	breq	.+6      	; 0x1372 <_ZN9EtherCard10packetLoopEj+0x1f0>
		(*icmp_cb)(&(gPB[IP_SRC_P]));
    136c:	8d e0       	ldi	r24, 0x0D	; 13
    136e:	93 e0       	ldi	r25, 0x03	; 3
    1370:	19 95       	eicall
void EtherCard::registerPingCallback (void (*callback)(uint8_t *srcip)) {
    icmp_cb = callback;
}

static void make_echo_reply_from_request(uint16_t len) {
	make_eth_ip();
    1372:	f7 dd       	rcall	.-1042   	; 0xf62 <_ZL11make_eth_ipv>
	gPB[ICMP_TYPE_P] = ICMP_TYPE_ECHOREPLY_V;
    1374:	e3 ef       	ldi	r30, 0xF3	; 243
    1376:	f2 e0       	ldi	r31, 0x02	; 2
	if (gPB[ICMP_CHECKSUM_P] > (0xFF-0x08))
    1378:	12 a2       	std	Z+34, r1	; 0x22
    137a:	84 a1       	ldd	r24, Z+36	; 0x24
    137c:	88 3f       	cpi	r24, 0xF8	; 248
	gPB[ICMP_CHECKSUM_P+1]++;
    137e:	18 f0       	brcs	.+6      	; 0x1386 <_ZN9EtherCard10packetLoopEj+0x204>
    1380:	95 a1       	ldd	r25, Z+37	; 0x25
    1382:	9f 5f       	subi	r25, 0xFF	; 255
	gPB[ICMP_CHECKSUM_P] += 0x08;
    1384:	95 a3       	std	Z+37, r25	; 0x25
    1386:	88 5f       	subi	r24, 0xF8	; 248
	EtherCard::packetSend(len);
    1388:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <_ZN8ENC28J606bufferE+0x24>
    138c:	ce 01       	movw	r24, r28
    138e:	10 dc       	rcall	.-2016   	; 0xbb0 <_ZN8ENC28J6010packetSendEj>
		make_echo_reply_from_request(plen);
		return 0;
	}

#if ETHERCARD_UDPSERVER
    if (ether.udpServerListening() && gPB[IP_PROTO_P]==IP_PROTO_UDP_V)
    1390:	2c c0       	rjmp	.+88     	; 0x13ea <_ZN9EtherCard10packetLoopEj+0x268>
    1392:	4a d0       	rcall	.+148    	; 0x1428 <_ZN9EtherCard18udpServerListeningEv>
    1394:	88 23       	and	r24, r24
    1396:	49 f1       	breq	.+82     	; 0x13ea <_ZN9EtherCard10packetLoopEj+0x268>
    1398:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <_ZN8ENC28J606bufferE+0x17>
    139c:	81 31       	cpi	r24, 0x11	; 17
    139e:	29 f5       	brne	.+74     	; 0x13ea <_ZN9EtherCard10packetLoopEj+0x268>
        }
        delaycnt++;

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, dnsip) && !has_dns_mac && !waiting_for_dns_mac) {
            client_arp_whohas(dnsip);
    13a0:	1d c0       	rjmp	.+58     	; 0x13dc <_ZN9EtherCard10packetLoopEj+0x25a>
    13a2:	89 ef       	ldi	r24, 0xF9	; 249
    13a4:	94 e0       	ldi	r25, 0x04	; 4
    13a6:	12 de       	rcall	.-988    	; 0xfcc <_ZL17client_arp_whohasPh>
            waiting_for_dns_mac = true;
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	80 93 1d 05 	sts	0x051D, r24	; 0x80051d <_ZL19waiting_for_dns_mac>
    13ae:	1d cf       	rjmp	.-454    	; 0x11ea <_ZN9EtherCard10packetLoopEj+0x68>
        }

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, hisip) && !has_dest_mac && !waiting_for_dest_mac) {
            client_arp_whohas(hisip);
    13b0:	85 ef       	ldi	r24, 0xF5	; 245
    13b2:	94 e0       	ldi	r25, 0x04	; 4
    13b4:	0b de       	rcall	.-1002   	; 0xfcc <_ZL17client_arp_whohasPh>
    13b6:	81 e0       	ldi	r24, 0x01	; 1
            waiting_for_dest_mac = true;
    13b8:	80 93 1b 05 	sts	0x051B, r24	; 0x80051b <_ZL20waiting_for_dest_mac>
    13bc:	16 c0       	rjmp	.+44     	; 0x13ea <_ZN9EtherCard10packetLoopEj+0x268>
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
    13be:	8a 97       	sbiw	r24, 0x2a	; 42
    13c0:	08 f0       	brcs	.+2      	; 0x13c4 <_ZN9EtherCard10packetLoopEj+0x242>
    13c2:	9a cf       	rjmp	.-204    	; 0x12f8 <_ZN9EtherCard10packetLoopEj+0x176>
    13c4:	12 c0       	rjmp	.+36     	; 0x13ea <_ZN9EtherCard10packetLoopEj+0x268>
        return 0;
    }

    if (eth_type_is_arp_and_my_ip(plen))
    {   //Service ARP request
        if (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REQ_L_V)
    13c6:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <_ZN8ENC28J606bufferE+0x15>
    13ca:	81 30       	cpi	r24, 0x01	; 1
    13cc:	09 f0       	breq	.+2      	; 0x13d0 <_ZN9EtherCard10packetLoopEj+0x24e>
    13ce:	57 cf       	rjmp	.-338    	; 0x127e <_ZN9EtherCard10packetLoopEj+0xfc>
    13d0:	37 cf       	rjmp	.-402    	; 0x1240 <_ZN9EtherCard10packetLoopEj+0xbe>
        //!@todo Add other protocols (and make each optional at compile time)
        return 0;
    }
	
	//To handle pinging
	if (gPB[IP_PROTO_P]==IP_PROTO_ICMP_V && gPB[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V)
    13d2:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <_ZN8ENC28J606bufferE+0x17>
    13d6:	81 30       	cpi	r24, 0x01	; 1
    13d8:	e1 f6       	brne	.-72     	; 0x1392 <_ZN9EtherCard10packetLoopEj+0x210>
    13da:	be cf       	rjmp	.-132    	; 0x1358 <_ZN9EtherCard10packetLoopEj+0x1d6>
	}

#if ETHERCARD_UDPSERVER
    if (ether.udpServerListening() && gPB[IP_PROTO_P]==IP_PROTO_UDP_V)
    {   //Call UDP server handler (callback) if one is defined for this packet
        if(ether.udpServerHasProcessedPacket(plen))
    13dc:	ce 01       	movw	r24, r28
    13de:	2b d0       	rcall	.+86     	; 0x1436 <_ZN9EtherCard27udpServerHasProcessedPacketEj>
    13e0:	04 c0       	rjmp	.+8      	; 0x13ea <_ZN9EtherCard10packetLoopEj+0x268>
    13e2:	ca 32       	cpi	r28, 0x2A	; 42
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
    13e4:	d1 05       	cpc	r29, r1
    13e6:	08 f0       	brcs	.+2      	; 0x13ea <_ZN9EtherCard10packetLoopEj+0x268>
    13e8:	8c cf       	rjmp	.-232    	; 0x1302 <_ZN9EtherCard10packetLoopEj+0x180>
    13ea:	80 e0       	ldi	r24, 0x00	; 0

    if (plen<54 || gPB[IP_PROTO_P]!=IP_PROTO_TCP_V )
        return 0; //from here on we are only interested in TCP-packets; these are longer than 54 bytes
		
	return 0;
}
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	df 91       	pop	r29
    13f0:	cf 91       	pop	r28
    13f2:	08 95       	ret

000013f4 <_ZN9EtherCard21udpServerListenOnPortEPFvjPhjPKcjEj>:
    13f4:	9c 01       	movw	r18, r24
    {
        if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((uint8_t) listeners[i].port)) {
            listeners[i].listening = true;
        }
    }
}
    13f6:	90 91 26 05 	lds	r25, 0x0526	; 0x800526 <numListeners>
    13fa:	98 30       	cpi	r25, 0x08	; 8
    13fc:	a0 f4       	brcc	.+40     	; 0x1426 <_ZN9EtherCard21udpServerListenOnPortEPFvjPhjPKcjEj+0x32>
    13fe:	e9 2f       	mov	r30, r25
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	af 01       	movw	r20, r30
    1404:	44 0f       	add	r20, r20
    1406:	55 1f       	adc	r21, r21
    1408:	44 0f       	add	r20, r20
    140a:	55 1f       	adc	r21, r21
    140c:	e4 0f       	add	r30, r20
    140e:	f5 1f       	adc	r31, r21
    1410:	e9 5d       	subi	r30, 0xD9	; 217
    1412:	fa 4f       	sbci	r31, 0xFA	; 250
    1414:	31 83       	std	Z+1, r19	; 0x01
    1416:	20 83       	st	Z, r18
    1418:	73 83       	std	Z+3, r23	; 0x03
    141a:	62 83       	std	Z+2, r22	; 0x02
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	84 83       	std	Z+4, r24	; 0x04
    1420:	9f 5f       	subi	r25, 0xFF	; 255
    1422:	90 93 26 05 	sts	0x0526, r25	; 0x800526 <numListeners>
    1426:	08 95       	ret

00001428 <_ZN9EtherCard18udpServerListeningEv>:

bool EtherCard::udpServerListening() {
    return numListeners > 0;
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	90 91 26 05 	lds	r25, 0x0526	; 0x800526 <numListeners>
    142e:	91 11       	cpse	r25, r1
    1430:	01 c0       	rjmp	.+2      	; 0x1434 <_ZN9EtherCard18udpServerListeningEv+0xc>
    1432:	80 e0       	ldi	r24, 0x00	; 0
}
    1434:	08 95       	ret

00001436 <_ZN9EtherCard27udpServerHasProcessedPacketEj>:

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    1436:	8f 92       	push	r8
    1438:	9f 92       	push	r9
    143a:	bf 92       	push	r11
    143c:	cf 92       	push	r12
    143e:	df 92       	push	r13
    1440:	ef 92       	push	r14
    1442:	ff 92       	push	r15
    1444:	0f 93       	push	r16
    1446:	1f 93       	push	r17
    1448:	cf 93       	push	r28
    144a:	df 93       	push	r29
    bool packetProcessed = false;
    for(int i = 0; i < numListeners; i++)
    144c:	80 91 26 05 	lds	r24, 0x0526	; 0x800526 <numListeners>
    1450:	88 23       	and	r24, r24
    1452:	09 f4       	brne	.+2      	; 0x1456 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x20>
    1454:	46 c0       	rjmp	.+140    	; 0x14e2 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0xac>
    1456:	c7 e2       	ldi	r28, 0x27	; 39
    1458:	d5 e0       	ldi	r29, 0x05	; 5
    145a:	e1 2c       	mov	r14, r1
    145c:	f1 2c       	mov	r15, r1
    145e:	80 e0       	ldi	r24, 0x00	; 0
    {
        if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((uint8_t) listeners[i].port) && listeners[i].listening)
    1460:	0f 2e       	mov	r0, r31
    1462:	f3 ef       	ldi	r31, 0xF3	; 243
    1464:	cf 2e       	mov	r12, r31
    1466:	f2 e0       	ldi	r31, 0x02	; 2
    1468:	df 2e       	mov	r13, r31
    146a:	f0 2d       	mov	r31, r0
                listeners[i].port,
                gPB + IP_SRC_P,
                (gPB[UDP_SRC_PORT_H_P] << 8) | gPB[UDP_SRC_PORT_L_P],
                (const char *) (gPB + UDP_DATA_P),
                datalen);
            packetProcessed = true;
    146c:	bb 24       	eor	r11, r11
    146e:	b3 94       	inc	r11

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    bool packetProcessed = false;
    for(int i = 0; i < numListeners; i++)
    {
        if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((uint8_t) listeners[i].port) && listeners[i].listening)
    1470:	aa 81       	ldd	r26, Y+2	; 0x02
    1472:	bb 81       	ldd	r27, Y+3	; 0x03
    1474:	f6 01       	movw	r30, r12
    1476:	24 a1       	ldd	r18, Z+36	; 0x24
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	4b 2f       	mov	r20, r27
    147c:	55 27       	eor	r21, r21
    147e:	24 17       	cp	r18, r20
    1480:	35 07       	cpc	r19, r21
    1482:	21 f5       	brne	.+72     	; 0x14cc <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x96>
    1484:	25 a1       	ldd	r18, Z+37	; 0x25
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	ad 01       	movw	r20, r26
    148a:	55 27       	eor	r21, r21
    148c:	24 17       	cp	r18, r20
    148e:	35 07       	cpc	r19, r21
    1490:	e9 f4       	brne	.+58     	; 0x14cc <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x96>
    1492:	9c 81       	ldd	r25, Y+4	; 0x04
    1494:	99 23       	and	r25, r25
    1496:	d1 f0       	breq	.+52     	; 0x14cc <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x96>
            listeners[i].callback(
                listeners[i].port,
                gPB + IP_SRC_P,
                (gPB[UDP_SRC_PORT_H_P] << 8) | gPB[UDP_SRC_PORT_L_P],
                (const char *) (gPB + UDP_DATA_P),
                datalen);
    1498:	07 a1       	ldd	r16, Z+39	; 0x27
    149a:	10 e0       	ldi	r17, 0x00	; 0
    149c:	08 50       	subi	r16, 0x08	; 8
    149e:	11 09       	sbc	r17, r1
    14a0:	86 a1       	ldd	r24, Z+38	; 0x26
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	98 2f       	mov	r25, r24
    14a6:	88 27       	eor	r24, r24
    14a8:	08 0f       	add	r16, r24
    14aa:	19 1f       	adc	r17, r25
    14ac:	42 a1       	ldd	r20, Z+34	; 0x22
    14ae:	50 e0       	ldi	r21, 0x00	; 0
    14b0:	54 2f       	mov	r21, r20
    14b2:	44 27       	eor	r20, r20
    14b4:	83 a1       	ldd	r24, Z+35	; 0x23
    14b6:	48 2b       	or	r20, r24
    14b8:	88 80       	ld	r8, Y
    14ba:	99 80       	ldd	r9, Y+1	; 0x01
    14bc:	2d e1       	ldi	r18, 0x1D	; 29
    14be:	33 e0       	ldi	r19, 0x03	; 3
    14c0:	6d e0       	ldi	r22, 0x0D	; 13
    14c2:	73 e0       	ldi	r23, 0x03	; 3
    14c4:	cd 01       	movw	r24, r26
    14c6:	f4 01       	movw	r30, r8
    14c8:	19 95       	eicall
            packetProcessed = true;
    14ca:	8b 2d       	mov	r24, r11
    return numListeners > 0;
}

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    bool packetProcessed = false;
    for(int i = 0; i < numListeners; i++)
    14cc:	ff ef       	ldi	r31, 0xFF	; 255
    14ce:	ef 1a       	sub	r14, r31
    14d0:	ff 0a       	sbc	r15, r31
    14d2:	25 96       	adiw	r28, 0x05	; 5
    14d4:	20 91 26 05 	lds	r18, 0x0526	; 0x800526 <numListeners>
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	e2 16       	cp	r14, r18
    14dc:	f3 06       	cpc	r15, r19
    14de:	44 f2       	brlt	.-112    	; 0x1470 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x3a>
    14e0:	01 c0       	rjmp	.+2      	; 0x14e4 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0xae>
bool EtherCard::udpServerListening() {
    return numListeners > 0;
}

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    bool packetProcessed = false;
    14e2:	80 e0       	ldi	r24, 0x00	; 0
                datalen);
            packetProcessed = true;
        }
    }
    return packetProcessed;
}
    14e4:	df 91       	pop	r29
    14e6:	cf 91       	pop	r28
    14e8:	1f 91       	pop	r17
    14ea:	0f 91       	pop	r16
    14ec:	ff 90       	pop	r15
    14ee:	ef 90       	pop	r14
    14f0:	df 90       	pop	r13
    14f2:	cf 90       	pop	r12
    14f4:	bf 90       	pop	r11
    14f6:	9f 90       	pop	r9
    14f8:	8f 90       	pop	r8
    14fa:	08 95       	ret

000014fc <_ZN9EtherCard6copyIpEPhPKh>:
#include "../Peripherals/HardwareSerial.h"
#include <stdlib.h>
#include <ctype.h>

void EtherCard::copyIp (uint8_t *dst, const uint8_t *src) {
    memcpy(dst, src, IP_LEN);
    14fc:	fb 01       	movw	r30, r22
    14fe:	20 81       	ld	r18, Z
    1500:	31 81       	ldd	r19, Z+1	; 0x01
    1502:	fc 01       	movw	r30, r24
    1504:	31 83       	std	Z+1, r19	; 0x01
    1506:	20 83       	st	Z, r18
    1508:	fb 01       	movw	r30, r22
    150a:	22 81       	ldd	r18, Z+2	; 0x02
    150c:	33 81       	ldd	r19, Z+3	; 0x03
    150e:	fc 01       	movw	r30, r24
    1510:	33 83       	std	Z+3, r19	; 0x03
    1512:	22 83       	std	Z+2, r18	; 0x02
    1514:	08 95       	ret

00001516 <_ZN9EtherCard7copyMacEPhPKh>:
}

void EtherCard::copyMac (uint8_t *dst, const uint8_t *src) {
    1516:	dc 01       	movw	r26, r24
    memcpy(dst, src, ETH_LEN);
    1518:	96 e0       	ldi	r25, 0x06	; 6
    151a:	fb 01       	movw	r30, r22
    151c:	01 90       	ld	r0, Z+
    151e:	0d 92       	st	X+, r0
    1520:	9a 95       	dec	r25
    1522:	e1 f7       	brne	.-8      	; 0x151c <_ZN9EtherCard7copyMacEPhPKh+0x6>
    1524:	08 95       	ret

00001526 <_ZN9EtherComm13CheckChecksumEPKch>:
	}
}

bool EtherComm::CheckChecksum(const char *data, uint8_t len){
  //data++; //Ignore first byte, the start byte.
  uint8_t checksum = (uint8_t)(*(data++)); //Start by 'adding' the command to the checksum
    1526:	fc 01       	movw	r30, r24
    1528:	20 81       	ld	r18, Z
  checksum += (uint8_t)(*(data++));
    152a:	dc 01       	movw	r26, r24
    152c:	12 96       	adiw	r26, 0x02	; 2
    152e:	81 81       	ldd	r24, Z+1	; 0x01
    1530:	92 2f       	mov	r25, r18
    1532:	98 0f       	add	r25, r24
  while(len-- > 0){
    1534:	3f ef       	ldi	r19, 0xFF	; 255
    1536:	36 0f       	add	r19, r22
    1538:	66 23       	and	r22, r22
    153a:	61 f0       	breq	.+24     	; 0x1554 <_ZN9EtherComm13CheckChecksumEPKch+0x2e>
    153c:	fd 01       	movw	r30, r26
    153e:	83 2f       	mov	r24, r19
    checksum += (uint8_t)(*(data++));
    1540:	21 91       	ld	r18, Z+
    1542:	92 0f       	add	r25, r18

bool EtherComm::CheckChecksum(const char *data, uint8_t len){
  //data++; //Ignore first byte, the start byte.
  uint8_t checksum = (uint8_t)(*(data++)); //Start by 'adding' the command to the checksum
  checksum += (uint8_t)(*(data++));
  while(len-- > 0){
    1544:	81 50       	subi	r24, 0x01	; 1
    1546:	e0 f7       	brcc	.-8      	; 0x1540 <_ZN9EtherComm13CheckChecksumEPKch+0x1a>
    1548:	23 2f       	mov	r18, r19
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	2f 5f       	subi	r18, 0xFF	; 255
    154e:	3f 4f       	sbci	r19, 0xFF	; 255
    1550:	a2 0f       	add	r26, r18
    1552:	b3 1f       	adc	r27, r19
    checksum += (uint8_t)(*(data++));
  }
//  Serial.println((uint8_t)(checksum & CHECKSUM_MASK));
  return (checksum & CHECKSUM_MASK) == (uint8_t)(*data);
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	2c 91       	ld	r18, X
    1558:	29 13       	cpse	r18, r25
    155a:	80 e0       	ldi	r24, 0x00	; 0
}
    155c:	08 95       	ret

0000155e <_Z10udpReceivejPhjPKcj>:

//char EtherComm::buffer[BUFFER_SIZE];
uint8_t* EtherComm::buffer = ether.buffer + UDP_DATA_P;

//callback that prints received packets to the serial port
void udpReceive(uint16_t dest_port, uint8_t src_ip[IP_LEN], uint16_t src_port, const char *data, uint16_t packetLen){
    155e:	0f 93       	push	r16
    1560:	1f 93       	push	r17
    1562:	cf 93       	push	r28
    1564:	df 93       	push	r29
	}
	Serial.println();
	Serial.print("Checksum: ");
	Serial.println((uint8_t)(*index));
*/	
	if(packetLen >= 3){ //At minimum, start byte, command, and checksum.
    1566:	a8 01       	movw	r20, r16
    1568:	43 50       	subi	r20, 0x03	; 3
    156a:	51 09       	sbc	r21, r1
    156c:	4f 3f       	cpi	r20, 0xFF	; 255
    156e:	51 05       	cpc	r21, r1
    1570:	09 f0       	breq	.+2      	; 0x1574 <_Z10udpReceivejPhjPKcj+0x16>
    1572:	88 f4       	brcc	.+34     	; 0x1596 <_Z10udpReceivejPhjPKcj+0x38>
		if(packetLen <= 258){
			uint8_t dataLen = (uint8_t)(packetLen - 3);
			if((uint8_t)data[0] == START_BYTE){
    1574:	f9 01       	movw	r30, r18
    1576:	80 81       	ld	r24, Z
    1578:	8f 3f       	cpi	r24, 0xFF	; 255
    157a:	69 f4       	brne	.+26     	; 0x1596 <_Z10udpReceivejPhjPKcj+0x38>
    157c:	e9 01       	movw	r28, r18
	Serial.print("Checksum: ");
	Serial.println((uint8_t)(*index));
*/	
	if(packetLen >= 3){ //At minimum, start byte, command, and checksum.
		if(packetLen <= 258){
			uint8_t dataLen = (uint8_t)(packetLen - 3);
    157e:	03 50       	subi	r16, 0x03	; 3
			if((uint8_t)data[0] == START_BYTE){
			//		Serial.print("Computed Checksum: ");
				if(EtherComm::CheckChecksum(data, dataLen)){
    1580:	60 2f       	mov	r22, r16
    1582:	c9 01       	movw	r24, r18
    1584:	d0 df       	rcall	.-96     	; 0x1526 <_ZN9EtherComm13CheckChecksumEPKch>
    1586:	88 23       	and	r24, r24
    1588:	31 f0       	breq	.+12     	; 0x1596 <_Z10udpReceivejPhjPKcj+0x38>
					EtherComm::CommandReceived((uint8_t)data[1], (const uint8_t*)(data + 2), dataLen);
    158a:	be 01       	movw	r22, r28
    158c:	6e 5f       	subi	r22, 0xFE	; 254
    158e:	7f 4f       	sbci	r23, 0xFF	; 255
    1590:	40 2f       	mov	r20, r16
    1592:	89 81       	ldd	r24, Y+1	; 0x01
    1594:	91 d9       	rcall	.-3294   	; 0x8b8 <_ZN9EtherComm15CommandReceivedEhPKhh>
				}
			}
		}
	}
}
    1596:	df 91       	pop	r29
    1598:	cf 91       	pop	r28
    159a:	1f 91       	pop	r17
    159c:	0f 91       	pop	r16
    159e:	08 95       	ret

000015a0 <_ZN9EtherComm5beginEjjRVhS1_h>:
  }
//  Serial.println((uint8_t)(checksum & CHECKSUM_MASK));
  return (checksum & CHECKSUM_MASK) == (uint8_t)(*data);
}

bool EtherComm::begin(uint16_t recvPort, uint16_t destPort, Register& csDDR, Register& csPort, uint8_t csPin){
    15a0:	0f 93       	push	r16
    15a2:	cf 93       	push	r28
    15a4:	df 93       	push	r29
    15a6:	ec 01       	movw	r28, r24
    15a8:	ca 01       	movw	r24, r20
    15aa:	a9 01       	movw	r20, r18
    15ac:	20 2f       	mov	r18, r16
  EtherComm::_recvPort = recvPort;
    15ae:	d0 93 52 05 	sts	0x0552, r29	; 0x800552 <_ZN9EtherComm9_recvPortE+0x1>
    15b2:	c0 93 51 05 	sts	0x0551, r28	; 0x800551 <_ZN9EtherComm9_recvPortE>
  EtherComm::_destPort = destPort;
    15b6:	70 93 50 05 	sts	0x0550, r23	; 0x800550 <_ZN9EtherComm9_destPortE+0x1>
    15ba:	60 93 4f 05 	sts	0x054F, r22	; 0x80054f <_ZN9EtherComm9_destPortE>
  
  if (ether.begin(EtherComm::_mymac, csDDR, csPort, csPin) == 0) return false;
    15be:	bc 01       	movw	r22, r24
    15c0:	86 e0       	ldi	r24, 0x06	; 6
    15c2:	92 e0       	ldi	r25, 0x02	; 2
    15c4:	d3 db       	rcall	.-2138   	; 0xd6c <_ZN9EtherCard5beginEPKhRVhS3_h>
    15c6:	88 23       	and	r24, r24
    15c8:	79 f0       	breq	.+30     	; 0x15e8 <_ZN9EtherComm5beginEjjRVhS1_h+0x48>
  ether.staticSetup(EtherComm::_myip, EtherComm::_gwip);
    15ca:	20 e0       	ldi	r18, 0x00	; 0
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	40 e0       	ldi	r20, 0x00	; 0
    15d0:	50 e0       	ldi	r21, 0x00	; 0
    15d2:	6c e0       	ldi	r22, 0x0C	; 12
    15d4:	72 e0       	ldi	r23, 0x02	; 2
    15d6:	80 e1       	ldi	r24, 0x10	; 16
    15d8:	92 e0       	ldi	r25, 0x02	; 2
    15da:	e1 db       	rcall	.-2110   	; 0xd9e <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_>
  ether.printIp("GW:  ", ether.gwip);
  ether.printIp("DNS: ", ether.dnsip);
  */
  
  //Register the udpSerialPrint() method to listen to port the receive port.
  ether.udpServerListenOnPort(&udpReceive, recvPort);
    15dc:	be 01       	movw	r22, r28
    15de:	8f ea       	ldi	r24, 0xAF	; 175
    15e0:	9a e0       	ldi	r25, 0x0A	; 10
    15e2:	08 df       	rcall	.-496    	; 0x13f4 <_ZN9EtherCard21udpServerListenOnPortEPFvjPhjPKcjEj>
  
  return true;
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	01 c0       	rjmp	.+2      	; 0x15ea <_ZN9EtherComm5beginEjjRVhS1_h+0x4a>

bool EtherComm::begin(uint16_t recvPort, uint16_t destPort, Register& csDDR, Register& csPort, uint8_t csPin){
  EtherComm::_recvPort = recvPort;
  EtherComm::_destPort = destPort;
  
  if (ether.begin(EtherComm::_mymac, csDDR, csPort, csPin) == 0) return false;
    15e8:	80 e0       	ldi	r24, 0x00	; 0
  
  //Register the udpSerialPrint() method to listen to port the receive port.
  ether.udpServerListenOnPort(&udpReceive, recvPort);
  
  return true;
}
    15ea:	df 91       	pop	r29
    15ec:	cf 91       	pop	r28
    15ee:	0f 91       	pop	r16
    15f0:	08 95       	ret

000015f2 <_ZN9EtherComm11SendCommandEhh>:

void EtherComm::SendCommand(uint8_t cmd, uint8_t len){
    15f2:	0f 93       	push	r16
    15f4:	1f 93       	push	r17
    15f6:	cf 93       	push	r28
    15f8:	df 93       	push	r29
  EtherComm::buffer[0] = START_BYTE;
    15fa:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    15fe:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    1602:	9f ef       	ldi	r25, 0xFF	; 255
    1604:	90 83       	st	Z, r25
  EtherComm::buffer[1] = cmd;
    1606:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    160a:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    160e:	81 83       	std	Z+1, r24	; 0x01
  //EtherComm::buffer[2] = len;
  
  uint8_t checksum = START_BYTE + cmd;
    1610:	81 50       	subi	r24, 0x01	; 1
  uint8_t* index = &EtherComm::buffer[2]; //TODO why is char* being used? convert ot uint8_t*!!
    1612:	c0 91 00 02 	lds	r28, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    1616:	d0 91 01 02 	lds	r29, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    161a:	de 01       	movw	r26, r28
    161c:	12 96       	adiw	r26, 0x02	; 2
  uint8_t bytes = len;
  while(bytes-- > 0){
    161e:	4f ef       	ldi	r20, 0xFF	; 255
    1620:	46 0f       	add	r20, r22
    1622:	66 23       	and	r22, r22
    1624:	81 f0       	breq	.+32     	; 0x1646 <_ZN9EtherComm11SendCommandEhh+0x54>
    1626:	fd 01       	movw	r30, r26
    1628:	50 e0       	ldi	r21, 0x00	; 0
    162a:	9a 01       	movw	r18, r20
    162c:	2d 5f       	subi	r18, 0xFD	; 253
    162e:	3f 4f       	sbci	r19, 0xFF	; 255
    1630:	2c 0f       	add	r18, r28
    1632:	3d 1f       	adc	r19, r29
    checksum += (uint8_t)(*(index++));  
    1634:	91 91       	ld	r25, Z+
    1636:	89 0f       	add	r24, r25
  //EtherComm::buffer[2] = len;
  
  uint8_t checksum = START_BYTE + cmd;
  uint8_t* index = &EtherComm::buffer[2]; //TODO why is char* being used? convert ot uint8_t*!!
  uint8_t bytes = len;
  while(bytes-- > 0){
    1638:	e2 17       	cp	r30, r18
    163a:	f3 07       	cpc	r31, r19
    163c:	d9 f7       	brne	.-10     	; 0x1634 <_ZN9EtherComm11SendCommandEhh+0x42>
    163e:	4f 5f       	subi	r20, 0xFF	; 255
    1640:	5f 4f       	sbci	r21, 0xFF	; 255
    1642:	a4 0f       	add	r26, r20
    1644:	b5 1f       	adc	r27, r21
    checksum += (uint8_t)(*(index++));  
  }
  (*index) = (uint8_t)(checksum & CHECKSUM_MASK);
    1646:	8c 93       	st	X, r24

  //Serial.print("Send: ");
  //Serial.println(len);
  ether.sendUdp(EtherComm::buffer, (uint16_t)len + (uint16_t)3, _recvPort, _destIP, _destPort);
    1648:	00 91 4f 05 	lds	r16, 0x054F	; 0x80054f <_ZN9EtherComm9_destPortE>
    164c:	10 91 50 05 	lds	r17, 0x0550	; 0x800550 <_ZN9EtherComm9_destPortE+0x1>
    1650:	40 91 51 05 	lds	r20, 0x0551	; 0x800551 <_ZN9EtherComm9_recvPortE>
    1654:	50 91 52 05 	lds	r21, 0x0552	; 0x800552 <_ZN9EtherComm9_recvPortE+0x1>
    1658:	70 e0       	ldi	r23, 0x00	; 0
    165a:	6d 5f       	subi	r22, 0xFD	; 253
    165c:	7f 4f       	sbci	r23, 0xFF	; 255
    165e:	22 e0       	ldi	r18, 0x02	; 2
    1660:	32 e0       	ldi	r19, 0x02	; 2
    1662:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    1666:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    166a:	52 dd       	rcall	.-1372   	; 0x1110 <_ZN9EtherCard7sendUdpEPKhjjS1_j>
}
    166c:	df 91       	pop	r29
    166e:	cf 91       	pop	r28
    1670:	1f 91       	pop	r17
    1672:	0f 91       	pop	r16
    1674:	08 95       	ret

00001676 <main>:
	public:
	inline HardwareSerial(
	volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
	volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
	volatile uint8_t *ucsrc, volatile uint8_t *udr);
	void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    1676:	26 e0       	ldi	r18, 0x06	; 6
    1678:	40 e8       	ldi	r20, 0x80	; 128
    167a:	55 e2       	ldi	r21, 0x25	; 37
    167c:	60 e0       	ldi	r22, 0x00	; 0
    167e:	70 e0       	ldi	r23, 0x00	; 0
    1680:	83 e5       	ldi	r24, 0x53	; 83
    1682:	95 e0       	ldi	r25, 0x05	; 5
    1684:	0f d1       	rcall	.+542    	; 0x18a4 <_ZN14HardwareSerial5beginEmh>
#include "TestIMU.h"

int main(void){
	//TestIMU();
	Serial.begin(9600);
	Serial.println("\nInitializing...");
    1686:	6b e2       	ldi	r22, 0x2B	; 43
    1688:	72 e0       	ldi	r23, 0x02	; 2
    168a:	83 e5       	ldi	r24, 0x53	; 83
    168c:	95 e0       	ldi	r25, 0x05	; 5
	
	if(!rov.begin()){
    168e:	77 d7       	rcall	.+3822   	; 0x257e <_ZN5Print7printlnEPKc>
    1690:	fd d6       	rcall	.+3578   	; 0x248c <_ZN5Robot5beginEv>
    1692:	81 11       	cpse	r24, r1
    1694:	06 c0       	rjmp	.+12     	; 0x16a2 <main+0x2c>
		Serial.println("Failed to initialize robot.");
    1696:	6c e3       	ldi	r22, 0x3C	; 60
    1698:	72 e0       	ldi	r23, 0x02	; 2
    169a:	83 e5       	ldi	r24, 0x53	; 83
    169c:	95 e0       	ldi	r25, 0x05	; 5
    169e:	6f d7       	rcall	.+3806   	; 0x257e <_ZN5Print7printlnEPKc>
    16a0:	ff cf       	rjmp	.-2      	; 0x16a0 <main+0x2a>
		while(1);
	}
	Serial.println("Robot initialized.");
    16a2:	68 e5       	ldi	r22, 0x58	; 88
    16a4:	72 e0       	ldi	r23, 0x02	; 2
    16a6:	83 e5       	ldi	r24, 0x53	; 83
    16a8:	95 e0       	ldi	r25, 0x05	; 5
    16aa:	69 d7       	rcall	.+3794   	; 0x257e <_ZN5Print7printlnEPKc>
	
	if(!EtherComm::begin((uint16_t)6001, (uint16_t)6002, EthernetDDR, EthernetPort, EthernetPin_CS)){
    16ac:	00 e2       	ldi	r16, 0x20	; 32
    16ae:	22 e0       	ldi	r18, 0x02	; 2
    16b0:	31 e0       	ldi	r19, 0x01	; 1
    16b2:	41 e0       	ldi	r20, 0x01	; 1
    16b4:	51 e0       	ldi	r21, 0x01	; 1
    16b6:	62 e7       	ldi	r22, 0x72	; 114
    16b8:	77 e1       	ldi	r23, 0x17	; 23
    16ba:	81 e7       	ldi	r24, 0x71	; 113
    16bc:	97 e1       	ldi	r25, 0x17	; 23
    16be:	70 df       	rcall	.-288    	; 0x15a0 <_ZN9EtherComm5beginEjjRVhS1_h>
    16c0:	81 11       	cpse	r24, r1
		Serial.println("Failed to access Ethernet controller.");
    16c2:	06 c0       	rjmp	.+12     	; 0x16d0 <main+0x5a>
    16c4:	6b e6       	ldi	r22, 0x6B	; 107
    16c6:	72 e0       	ldi	r23, 0x02	; 2
    16c8:	83 e5       	ldi	r24, 0x53	; 83
    16ca:	95 e0       	ldi	r25, 0x05	; 5
		while(1);
	}
	Serial.println("Connected to controller.");
    16cc:	58 d7       	rcall	.+3760   	; 0x257e <_ZN5Print7printlnEPKc>
    16ce:	ff cf       	rjmp	.-2      	; 0x16ce <main+0x58>
    16d0:	61 e9       	ldi	r22, 0x91	; 145
    16d2:	72 e0       	ldi	r23, 0x02	; 2
    16d4:	83 e5       	ldi	r24, 0x53	; 83
    16d6:	95 e0       	ldi	r25, 0x05	; 5
  static bool begin(uint16_t recvPort, uint16_t destPort, Register& csDDR, Register& csPort, uint8_t csPin);

  friend void udpReceive(uint16_t dest_port, uint8_t src_ip[IP_LEN], uint16_t src_port, const char *data, uint16_t len);

  static void Loop(){
    ether.packetLoop(ether.packetReceive());
    16d8:	52 d7       	rcall	.+3748   	; 0x257e <_ZN5Print7printlnEPKc>
    16da:	e3 da       	rcall	.-2618   	; 0xca2 <_ZN8ENC28J6013packetReceiveEv>
    16dc:	52 dd       	rcall	.-1372   	; 0x1182 <_ZN9EtherCard10packetLoopEj>
    16de:	fd cf       	rjmp	.-6      	; 0x16da <main+0x64>

000016e0 <_ZN14HardwareSerial9availableEv>:
    16e0:	fc 01       	movw	r30, r24
	#endif
	#if defined(HAVE_HWSERIAL2)
	if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
	#endif
	#if defined(HAVE_HWSERIAL3)
	if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    16e2:	97 85       	ldd	r25, Z+15	; 0x0f
    16e4:	20 89       	ldd	r18, Z+16	; 0x10
    16e6:	89 2f       	mov	r24, r25
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	80 5c       	subi	r24, 0xC0	; 192
    16ec:	9f 4f       	sbci	r25, 0xFF	; 255
    16ee:	82 1b       	sub	r24, r18
    16f0:	91 09       	sbc	r25, r1
    16f2:	8f 73       	andi	r24, 0x3F	; 63
    16f4:	99 27       	eor	r25, r25
    16f6:	08 95       	ret

000016f8 <_ZN14HardwareSerial4peekEv>:
    16f8:	fc 01       	movw	r30, r24
    16fa:	97 85       	ldd	r25, Z+15	; 0x0f
    16fc:	80 89       	ldd	r24, Z+16	; 0x10
    16fe:	98 17       	cp	r25, r24
    1700:	31 f0       	breq	.+12     	; 0x170e <_ZN14HardwareSerial4peekEv+0x16>
    1702:	80 89       	ldd	r24, Z+16	; 0x10
    1704:	e8 0f       	add	r30, r24
    1706:	f1 1d       	adc	r31, r1
    1708:	83 89       	ldd	r24, Z+19	; 0x13
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	08 95       	ret
    170e:	8f ef       	ldi	r24, 0xFF	; 255
    1710:	9f ef       	ldi	r25, 0xFF	; 255
    1712:	08 95       	ret

00001714 <_ZN14HardwareSerial4readEv>:
    1714:	fc 01       	movw	r30, r24
    1716:	97 85       	ldd	r25, Z+15	; 0x0f
    1718:	80 89       	ldd	r24, Z+16	; 0x10
    171a:	98 17       	cp	r25, r24
    171c:	61 f0       	breq	.+24     	; 0x1736 <_ZN14HardwareSerial4readEv+0x22>
    171e:	80 89       	ldd	r24, Z+16	; 0x10
    1720:	df 01       	movw	r26, r30
    1722:	a8 0f       	add	r26, r24
    1724:	b1 1d       	adc	r27, r1
    1726:	53 96       	adiw	r26, 0x13	; 19
    1728:	8c 91       	ld	r24, X
    172a:	90 89       	ldd	r25, Z+16	; 0x10
    172c:	9f 5f       	subi	r25, 0xFF	; 255
    172e:	9f 73       	andi	r25, 0x3F	; 63
    1730:	90 8b       	std	Z+16, r25	; 0x10
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	08 95       	ret
    1736:	8f ef       	ldi	r24, 0xFF	; 255
    1738:	9f ef       	ldi	r25, 0xFF	; 255
    173a:	08 95       	ret

0000173c <_ZN14HardwareSerial17availableForWriteEv>:
    173c:	fc 01       	movw	r30, r24
    173e:	21 89       	ldd	r18, Z+17	; 0x11
    1740:	32 89       	ldd	r19, Z+18	; 0x12
    1742:	23 17       	cp	r18, r19
    1744:	38 f0       	brcs	.+14     	; 0x1754 <_ZN14HardwareSerial17availableForWriteEv+0x18>
    1746:	8f e3       	ldi	r24, 0x3F	; 63
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	82 1b       	sub	r24, r18
    174c:	91 09       	sbc	r25, r1
    174e:	83 0f       	add	r24, r19
    1750:	91 1d       	adc	r25, r1
    1752:	08 95       	ret
    1754:	83 2f       	mov	r24, r19
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	82 1b       	sub	r24, r18
    175a:	91 09       	sbc	r25, r1
    175c:	01 97       	sbiw	r24, 0x01	; 1
    175e:	08 95       	ret

00001760 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1760:	fc 01       	movw	r30, r24
	// If interrupts are enabled, there must be more data in the output
	// buffer. Send the next byte
	unsigned char c = _tx_buffer[_tx_buffer_tail];
    1762:	82 89       	ldd	r24, Z+18	; 0x12
    1764:	df 01       	movw	r26, r30
    1766:	a8 0f       	add	r26, r24
    1768:	b1 1d       	adc	r27, r1
    176a:	ad 5a       	subi	r26, 0xAD	; 173
    176c:	bf 4f       	sbci	r27, 0xFF	; 255
    176e:	8c 91       	ld	r24, X
	_tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1770:	22 89       	ldd	r18, Z+18	; 0x12
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	2f 5f       	subi	r18, 0xFF	; 255
    1776:	3f 4f       	sbci	r19, 0xFF	; 255
    1778:	2f 73       	andi	r18, 0x3F	; 63
    177a:	30 78       	andi	r19, 0x80	; 128
    177c:	33 23       	and	r19, r19
    177e:	34 f4       	brge	.+12     	; 0x178c <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x2c>
    1780:	21 50       	subi	r18, 0x01	; 1
    1782:	31 09       	sbc	r19, r1
    1784:	20 6c       	ori	r18, 0xC0	; 192
    1786:	3f 6f       	ori	r19, 0xFF	; 255
    1788:	2f 5f       	subi	r18, 0xFF	; 255
    178a:	3f 4f       	sbci	r19, 0xFF	; 255
    178c:	22 8b       	std	Z+18, r18	; 0x12

	*_udr = c;
    178e:	a4 85       	ldd	r26, Z+12	; 0x0c
    1790:	b5 85       	ldd	r27, Z+13	; 0x0d
    1792:	8c 93       	st	X, r24
	// location". This makes sure flush() won't return until the bytes
	// actually got written. Other r/w bits are preserved, and zeroes
	// written to the rest.

	#ifdef MPCM0
	*_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1794:	a6 81       	ldd	r26, Z+6	; 0x06
    1796:	b7 81       	ldd	r27, Z+7	; 0x07
    1798:	8c 91       	ld	r24, X
    179a:	83 70       	andi	r24, 0x03	; 3
    179c:	80 64       	ori	r24, 0x40	; 64
    179e:	8c 93       	st	X, r24
	#else
	*_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
	#endif

	if (_tx_buffer_head == _tx_buffer_tail) {
    17a0:	91 89       	ldd	r25, Z+17	; 0x11
    17a2:	82 89       	ldd	r24, Z+18	; 0x12
    17a4:	98 13       	cpse	r25, r24
    17a6:	06 c0       	rjmp	.+12     	; 0x17b4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x54>
		// Buffer empty, so disable interrupts
		cbi(*_ucsrb, UDRIE0);
    17a8:	00 84       	ldd	r0, Z+8	; 0x08
    17aa:	f1 85       	ldd	r31, Z+9	; 0x09
    17ac:	e0 2d       	mov	r30, r0
    17ae:	80 81       	ld	r24, Z
    17b0:	8f 7d       	andi	r24, 0xDF	; 223
    17b2:	80 83       	st	Z, r24
    17b4:	08 95       	ret

000017b6 <_ZN14HardwareSerial5flushEv>:
	if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
	return tail - head - 1;
}

void HardwareSerial::flush()
{
    17b6:	cf 93       	push	r28
    17b8:	df 93       	push	r29
    17ba:	ec 01       	movw	r28, r24
	// If we have never written a byte, no need to flush. This special
	// case is needed since there is no way to force the TXC (transmit
	// complete) bit to 1 during initialization
	if (!_written)
    17bc:	8e 85       	ldd	r24, Y+14	; 0x0e
    17be:	88 23       	and	r24, r24
    17c0:	d1 f0       	breq	.+52     	; 0x17f6 <_ZN14HardwareSerial5flushEv+0x40>
	return;

	while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    17c2:	e8 85       	ldd	r30, Y+8	; 0x08
    17c4:	f9 85       	ldd	r31, Y+9	; 0x09
    17c6:	80 81       	ld	r24, Z
    17c8:	85 fd       	sbrc	r24, 5
    17ca:	05 c0       	rjmp	.+10     	; 0x17d6 <_ZN14HardwareSerial5flushEv+0x20>
    17cc:	ae 81       	ldd	r26, Y+6	; 0x06
    17ce:	bf 81       	ldd	r27, Y+7	; 0x07
    17d0:	8c 91       	ld	r24, X
    17d2:	86 fd       	sbrc	r24, 6
    17d4:	10 c0       	rjmp	.+32     	; 0x17f6 <_ZN14HardwareSerial5flushEv+0x40>
		if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    17d6:	0f b6       	in	r0, 0x3f	; 63
    17d8:	07 fc       	sbrc	r0, 7
    17da:	f5 cf       	rjmp	.-22     	; 0x17c6 <_ZN14HardwareSerial5flushEv+0x10>
    17dc:	80 81       	ld	r24, Z
    17de:	85 ff       	sbrs	r24, 5
    17e0:	f2 cf       	rjmp	.-28     	; 0x17c6 <_ZN14HardwareSerial5flushEv+0x10>
    17e2:	03 c0       	rjmp	.+6      	; 0x17ea <_ZN14HardwareSerial5flushEv+0x34>
		// Interrupts are globally disabled, but the DR empty
		// interrupt should be enabled, so poll the DR empty flag to
		// prevent deadlock
		if (bit_is_set(*_ucsra, UDRE0))
		_tx_udr_empty_irq();
    17e4:	ce 01       	movw	r24, r28
    17e6:	bc df       	rcall	.-136    	; 0x1760 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    17e8:	ec cf       	rjmp	.-40     	; 0x17c2 <_ZN14HardwareSerial5flushEv+0xc>
	while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
		if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
		// Interrupts are globally disabled, but the DR empty
		// interrupt should be enabled, so poll the DR empty flag to
		// prevent deadlock
		if (bit_is_set(*_ucsra, UDRE0))
    17ea:	ae 81       	ldd	r26, Y+6	; 0x06
    17ec:	bf 81       	ldd	r27, Y+7	; 0x07
    17ee:	8c 91       	ld	r24, X
    17f0:	85 ff       	sbrs	r24, 5
    17f2:	e9 cf       	rjmp	.-46     	; 0x17c6 <_ZN14HardwareSerial5flushEv+0x10>
    17f4:	f7 cf       	rjmp	.-18     	; 0x17e4 <_ZN14HardwareSerial5flushEv+0x2e>
		_tx_udr_empty_irq();
	}
	// If we get here, nothing is queued anymore (DRIE is disabled) and
	// the hardware finished tranmission (TXC is set).
}
    17f6:	df 91       	pop	r29
    17f8:	cf 91       	pop	r28
    17fa:	08 95       	ret

000017fc <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    17fc:	0f 93       	push	r16
    17fe:	1f 93       	push	r17
    1800:	cf 93       	push	r28
    1802:	df 93       	push	r29
    1804:	ec 01       	movw	r28, r24
	_written = true;
    1806:	81 e0       	ldi	r24, 0x01	; 1
    1808:	8e 87       	std	Y+14, r24	; 0x0e
	// If the buffer and the data register is empty, just write the byte
	// to the data register and be done. This shortcut helps
	// significantly improve the effective datarate at high (>
	// 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
	if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    180a:	99 89       	ldd	r25, Y+17	; 0x11
    180c:	8a 89       	ldd	r24, Y+18	; 0x12
    180e:	98 13       	cpse	r25, r24
    1810:	25 c0       	rjmp	.+74     	; 0x185c <_ZN14HardwareSerial5writeEh+0x60>
    1812:	ee 81       	ldd	r30, Y+6	; 0x06
    1814:	ff 81       	ldd	r31, Y+7	; 0x07
    1816:	80 81       	ld	r24, Z
    1818:	85 fd       	sbrc	r24, 5
    181a:	31 c0       	rjmp	.+98     	; 0x187e <_ZN14HardwareSerial5writeEh+0x82>
    181c:	1f c0       	rjmp	.+62     	; 0x185c <_ZN14HardwareSerial5writeEh+0x60>
	}
	tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
	// If the output buffer is full, there's nothing for it other than to
	// wait for the interrupt handler to empty it a bit
	while (i == _tx_buffer_tail) {
    181e:	8a 89       	ldd	r24, Y+18	; 0x12
    1820:	18 13       	cpse	r17, r24
    1822:	0b c0       	rjmp	.+22     	; 0x183a <_ZN14HardwareSerial5writeEh+0x3e>
		if (bit_is_clear(SREG, SREG_I)) {
    1824:	0f b6       	in	r0, 0x3f	; 63
    1826:	07 fc       	sbrc	r0, 7
    1828:	fa cf       	rjmp	.-12     	; 0x181e <_ZN14HardwareSerial5writeEh+0x22>
			// Interrupts are disabled, so we'll have to poll the data
			// register empty flag ourselves. If it is set, pretend an
			// interrupt has happened and call the handler to free up
			// space for us.
			if(bit_is_set(*_ucsra, UDRE0))
    182a:	ee 81       	ldd	r30, Y+6	; 0x06
    182c:	ff 81       	ldd	r31, Y+7	; 0x07
    182e:	80 81       	ld	r24, Z
    1830:	85 ff       	sbrs	r24, 5
    1832:	f5 cf       	rjmp	.-22     	; 0x181e <_ZN14HardwareSerial5writeEh+0x22>
			_tx_udr_empty_irq();
    1834:	ce 01       	movw	r24, r28
    1836:	94 df       	rcall	.-216    	; 0x1760 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1838:	f2 cf       	rjmp	.-28     	; 0x181e <_ZN14HardwareSerial5writeEh+0x22>
			} else {
			// nop, the interrupt handler will free up space for us
		}
	}

	_tx_buffer[_tx_buffer_head] = c;
    183a:	89 89       	ldd	r24, Y+17	; 0x11
    183c:	fe 01       	movw	r30, r28
    183e:	e8 0f       	add	r30, r24
    1840:	f1 1d       	adc	r31, r1
    1842:	ed 5a       	subi	r30, 0xAD	; 173
    1844:	ff 4f       	sbci	r31, 0xFF	; 255
    1846:	00 83       	st	Z, r16

	// make atomic to prevent execution of ISR between setting the
	// head pointer and setting the interrupt flag resulting in buffer
	// retransmission
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1848:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    184a:	f8 94       	cli
		_tx_buffer_head = i;
    184c:	19 8b       	std	Y+17, r17	; 0x11
		sbi(*_ucsrb, UDRIE0);
    184e:	e8 85       	ldd	r30, Y+8	; 0x08
    1850:	f9 85       	ldd	r31, Y+9	; 0x09
    1852:	80 81       	ld	r24, Z
    1854:	80 62       	ori	r24, 0x20	; 32
    1856:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1858:	9f bf       	out	0x3f, r25	; 63
	}
	
	return 1;
    185a:	1d c0       	rjmp	.+58     	; 0x1896 <_ZN14HardwareSerial5writeEh+0x9a>
			*_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
			#endif
		}
		return 1;
	}
	tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    185c:	29 89       	ldd	r18, Y+17	; 0x11
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	2f 5f       	subi	r18, 0xFF	; 255
    1862:	3f 4f       	sbci	r19, 0xFF	; 255
    1864:	2f 73       	andi	r18, 0x3F	; 63
    1866:	30 78       	andi	r19, 0x80	; 128
    1868:	33 23       	and	r19, r19
    186a:	34 f4       	brge	.+12     	; 0x1878 <_ZN14HardwareSerial5writeEh+0x7c>
    186c:	21 50       	subi	r18, 0x01	; 1
    186e:	31 09       	sbc	r19, r1
    1870:	20 6c       	ori	r18, 0xC0	; 192
    1872:	3f 6f       	ori	r19, 0xFF	; 255
    1874:	2f 5f       	subi	r18, 0xFF	; 255
    1876:	3f 4f       	sbci	r19, 0xFF	; 255
    1878:	06 2f       	mov	r16, r22
    187a:	12 2f       	mov	r17, r18
    187c:	d0 cf       	rjmp	.-96     	; 0x181e <_ZN14HardwareSerial5writeEh+0x22>
		// So writing UDR must happen first.
		// Writing UDR and clearing TC must be done atomically, otherwise
		// interrupts might delay the TXC clear so the byte written to UDR
		// is transmitted (setting TXC) before clearing TXC. Then TXC will
		// be cleared when no bytes are left, causing flush() to hang
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    187e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1880:	f8 94       	cli
			*_udr = c;
    1882:	ec 85       	ldd	r30, Y+12	; 0x0c
    1884:	fd 85       	ldd	r31, Y+13	; 0x0d
    1886:	60 83       	st	Z, r22
			#ifdef MPCM0
			*_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1888:	ee 81       	ldd	r30, Y+6	; 0x06
    188a:	ff 81       	ldd	r31, Y+7	; 0x07
    188c:	80 81       	ld	r24, Z
    188e:	83 70       	andi	r24, 0x03	; 3
    1890:	80 64       	ori	r24, 0x40	; 64
    1892:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1894:	9f bf       	out	0x3f, r25	; 63
		_tx_buffer_head = i;
		sbi(*_ucsrb, UDRIE0);
	}
	
	return 1;
}
    1896:	81 e0       	ldi	r24, 0x01	; 1
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	df 91       	pop	r29
    189c:	cf 91       	pop	r28
    189e:	1f 91       	pop	r17
    18a0:	0f 91       	pop	r16
    18a2:	08 95       	ret

000018a4 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, uint8_t config)
{
    18a4:	cf 92       	push	r12
    18a6:	df 92       	push	r13
    18a8:	ef 92       	push	r14
    18aa:	ff 92       	push	r15
    18ac:	1f 93       	push	r17
    18ae:	cf 93       	push	r28
    18b0:	df 93       	push	r29
    18b2:	ec 01       	movw	r28, r24
    18b4:	6a 01       	movw	r12, r20
    18b6:	7b 01       	movw	r14, r22
    18b8:	12 2f       	mov	r17, r18
	// Try u2x mode first
	uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
	*_ucsra = 1 << U2X0;
    18ba:	ee 81       	ldd	r30, Y+6	; 0x06
    18bc:	ff 81       	ldd	r31, Y+7	; 0x07
    18be:	82 e0       	ldi	r24, 0x02	; 2
    18c0:	80 83       	st	Z, r24
	// hardcoded exception for 57600 for compatibility with the bootloader
	// shipped with the Duemilanove and previous boards and the firmware
	// on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
	// be > 4095, so switch back to non-u2x mode if the baud rate is too
	// low.
	if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    18c2:	41 15       	cp	r20, r1
    18c4:	51 4e       	sbci	r21, 0xE1	; 225
    18c6:	61 05       	cpc	r22, r1
    18c8:	71 05       	cpc	r23, r1
    18ca:	a9 f0       	breq	.+42     	; 0x18f6 <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, uint8_t config)
{
	// Try u2x mode first
	uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    18cc:	60 e0       	ldi	r22, 0x00	; 0
    18ce:	79 e0       	ldi	r23, 0x09	; 9
    18d0:	8d e3       	ldi	r24, 0x3D	; 61
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	a7 01       	movw	r20, r14
    18d6:	96 01       	movw	r18, r12
    18d8:	bb d7       	rcall	.+3958   	; 0x2850 <__udivmodsi4>
    18da:	da 01       	movw	r26, r20
    18dc:	c9 01       	movw	r24, r18
    18de:	01 97       	sbiw	r24, 0x01	; 1
    18e0:	a1 09       	sbc	r26, r1
    18e2:	b1 09       	sbc	r27, r1
    18e4:	b6 95       	lsr	r27
    18e6:	a7 95       	ror	r26
    18e8:	97 95       	ror	r25
    18ea:	87 95       	ror	r24
    18ec:	9c 01       	movw	r18, r24
	// hardcoded exception for 57600 for compatibility with the bootloader
	// shipped with the Duemilanove and previous boards and the firmware
	// on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
	// be > 4095, so switch back to non-u2x mode if the baud rate is too
	// low.
	if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    18ee:	21 15       	cp	r18, r1
    18f0:	80 e1       	ldi	r24, 0x10	; 16
    18f2:	38 07       	cpc	r19, r24
    18f4:	a0 f0       	brcs	.+40     	; 0x191e <_ZN14HardwareSerial5beginEmh+0x7a>
	{
		*_ucsra = 0;
    18f6:	ee 81       	ldd	r30, Y+6	; 0x06
    18f8:	ff 81       	ldd	r31, Y+7	; 0x07
    18fa:	10 82       	st	Z, r1
		baud_setting = (F_CPU / 8 / baud - 1) / 2;
    18fc:	60 e8       	ldi	r22, 0x80	; 128
    18fe:	74 e8       	ldi	r23, 0x84	; 132
    1900:	8e e1       	ldi	r24, 0x1E	; 30
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	a7 01       	movw	r20, r14
    1906:	96 01       	movw	r18, r12
    1908:	a3 d7       	rcall	.+3910   	; 0x2850 <__udivmodsi4>
    190a:	da 01       	movw	r26, r20
    190c:	c9 01       	movw	r24, r18
    190e:	01 97       	sbiw	r24, 0x01	; 1
    1910:	a1 09       	sbc	r26, r1
    1912:	b1 09       	sbc	r27, r1
    1914:	b6 95       	lsr	r27
    1916:	a7 95       	ror	r26
    1918:	97 95       	ror	r25
    191a:	87 95       	ror	r24
    191c:	9c 01       	movw	r18, r24
	}

	// assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
	*_ubrrh = baud_setting >> 8;
    191e:	ea 81       	ldd	r30, Y+2	; 0x02
    1920:	fb 81       	ldd	r31, Y+3	; 0x03
    1922:	30 83       	st	Z, r19
	*_ubrrl = baud_setting;
    1924:	ec 81       	ldd	r30, Y+4	; 0x04
    1926:	fd 81       	ldd	r31, Y+5	; 0x05
    1928:	20 83       	st	Z, r18

	_written = false;
    192a:	1e 86       	std	Y+14, r1	; 0x0e

	//set the data bits, parity, and stop bits
	#if defined(__AVR_ATmega8__)
	config |= 0x80; // select UCSRC register (shared with UBRRH)
	#endif
	*_ucsrc = config;
    192c:	ea 85       	ldd	r30, Y+10	; 0x0a
    192e:	fb 85       	ldd	r31, Y+11	; 0x0b
    1930:	10 83       	st	Z, r17
	
	sbi(*_ucsrb, RXEN0);
    1932:	e8 85       	ldd	r30, Y+8	; 0x08
    1934:	f9 85       	ldd	r31, Y+9	; 0x09
    1936:	80 81       	ld	r24, Z
    1938:	80 61       	ori	r24, 0x10	; 16
    193a:	80 83       	st	Z, r24
	sbi(*_ucsrb, TXEN0);
    193c:	e8 85       	ldd	r30, Y+8	; 0x08
    193e:	f9 85       	ldd	r31, Y+9	; 0x09
    1940:	80 81       	ld	r24, Z
    1942:	88 60       	ori	r24, 0x08	; 8
    1944:	80 83       	st	Z, r24
	sbi(*_ucsrb, RXCIE0);
    1946:	e8 85       	ldd	r30, Y+8	; 0x08
    1948:	f9 85       	ldd	r31, Y+9	; 0x09
    194a:	80 81       	ld	r24, Z
    194c:	80 68       	ori	r24, 0x80	; 128
    194e:	80 83       	st	Z, r24
	cbi(*_ucsrb, UDRIE0);
    1950:	e8 85       	ldd	r30, Y+8	; 0x08
    1952:	f9 85       	ldd	r31, Y+9	; 0x09
    1954:	80 81       	ld	r24, Z
    1956:	8f 7d       	andi	r24, 0xDF	; 223
    1958:	80 83       	st	Z, r24
}
    195a:	df 91       	pop	r29
    195c:	cf 91       	pop	r28
    195e:	1f 91       	pop	r17
    1960:	ff 90       	pop	r15
    1962:	ef 90       	pop	r14
    1964:	df 90       	pop	r13
    1966:	cf 90       	pop	r12
    1968:	08 95       	ret

0000196a <_ZN5Print17availableForWriteEv>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
}
    196a:	80 e0       	ldi	r24, 0x00	; 0
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	08 95       	ret

00001970 <__vector_25>:
    1970:	1f 92       	push	r1
    1972:	0f 92       	push	r0
    1974:	0f b6       	in	r0, 0x3f	; 63
    1976:	0f 92       	push	r0
    1978:	11 24       	eor	r1, r1
    197a:	0b b6       	in	r0, 0x3b	; 59
    197c:	0f 92       	push	r0
    197e:	2f 93       	push	r18
    1980:	8f 93       	push	r24
    1982:	9f 93       	push	r25
    1984:	af 93       	push	r26
    1986:	bf 93       	push	r27
    1988:	ef 93       	push	r30
    198a:	ff 93       	push	r31
    198c:	e0 91 59 05 	lds	r30, 0x0559	; 0x800559 <Serial+0x6>
    1990:	f0 91 5a 05 	lds	r31, 0x055A	; 0x80055a <Serial+0x7>
    1994:	80 81       	ld	r24, Z
    1996:	82 fd       	sbrc	r24, 2
    1998:	14 c0       	rjmp	.+40     	; 0x19c2 <__vector_25+0x52>
    199a:	e3 e5       	ldi	r30, 0x53	; 83
    199c:	f5 e0       	ldi	r31, 0x05	; 5
    199e:	a4 85       	ldd	r26, Z+12	; 0x0c
    19a0:	b5 85       	ldd	r27, Z+13	; 0x0d
    19a2:	2c 91       	ld	r18, X
    19a4:	87 85       	ldd	r24, Z+15	; 0x0f
    19a6:	8f 5f       	subi	r24, 0xFF	; 255
    19a8:	8f 70       	andi	r24, 0x0F	; 15
    19aa:	90 89       	ldd	r25, Z+16	; 0x10
    19ac:	89 17       	cp	r24, r25
    19ae:	71 f0       	breq	.+28     	; 0x19cc <__vector_25+0x5c>
    19b0:	df 01       	movw	r26, r30
    19b2:	e7 85       	ldd	r30, Z+15	; 0x0f
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
    19b6:	ed 5a       	subi	r30, 0xAD	; 173
    19b8:	fa 4f       	sbci	r31, 0xFA	; 250
    19ba:	23 8b       	std	Z+19, r18	; 0x13
    19bc:	1f 96       	adiw	r26, 0x0f	; 15
    19be:	8c 93       	st	X, r24
    19c0:	05 c0       	rjmp	.+10     	; 0x19cc <__vector_25+0x5c>
    19c2:	e0 91 5f 05 	lds	r30, 0x055F	; 0x80055f <Serial+0xc>
    19c6:	f0 91 60 05 	lds	r31, 0x0560	; 0x800560 <Serial+0xd>
    19ca:	80 81       	ld	r24, Z
    19cc:	ff 91       	pop	r31
    19ce:	ef 91       	pop	r30
    19d0:	bf 91       	pop	r27
    19d2:	af 91       	pop	r26
    19d4:	9f 91       	pop	r25
    19d6:	8f 91       	pop	r24
    19d8:	2f 91       	pop	r18
    19da:	0f 90       	pop	r0
    19dc:	0b be       	out	0x3b, r0	; 59
    19de:	0f 90       	pop	r0
    19e0:	0f be       	out	0x3f, r0	; 63
    19e2:	0f 90       	pop	r0
    19e4:	1f 90       	pop	r1
    19e6:	18 95       	reti

000019e8 <__vector_26>:
    19e8:	1f 92       	push	r1
    19ea:	0f 92       	push	r0
    19ec:	0f b6       	in	r0, 0x3f	; 63
    19ee:	0f 92       	push	r0
    19f0:	11 24       	eor	r1, r1
    19f2:	0b b6       	in	r0, 0x3b	; 59
    19f4:	0f 92       	push	r0
    19f6:	2f 93       	push	r18
    19f8:	3f 93       	push	r19
    19fa:	4f 93       	push	r20
    19fc:	5f 93       	push	r21
    19fe:	6f 93       	push	r22
    1a00:	7f 93       	push	r23
    1a02:	8f 93       	push	r24
    1a04:	9f 93       	push	r25
    1a06:	af 93       	push	r26
    1a08:	bf 93       	push	r27
    1a0a:	ef 93       	push	r30
    1a0c:	ff 93       	push	r31
    1a0e:	83 e5       	ldi	r24, 0x53	; 83
    1a10:	95 e0       	ldi	r25, 0x05	; 5
    1a12:	a6 de       	rcall	.-692    	; 0x1760 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1a14:	ff 91       	pop	r31
    1a16:	ef 91       	pop	r30
    1a18:	bf 91       	pop	r27
    1a1a:	af 91       	pop	r26
    1a1c:	9f 91       	pop	r25
    1a1e:	8f 91       	pop	r24
    1a20:	7f 91       	pop	r23
    1a22:	6f 91       	pop	r22
    1a24:	5f 91       	pop	r21
    1a26:	4f 91       	pop	r20
    1a28:	3f 91       	pop	r19
    1a2a:	2f 91       	pop	r18
    1a2c:	0f 90       	pop	r0
    1a2e:	0b be       	out	0x3b, r0	; 59
    1a30:	0f 90       	pop	r0
    1a32:	0f be       	out	0x3f, r0	; 63
    1a34:	0f 90       	pop	r0
    1a36:	1f 90       	pop	r1
    1a38:	18 95       	reti

00001a3a <_GLOBAL__sub_I___vector_25>:
volatile uint8_t *ucsrc, volatile uint8_t *udr) :
_ubrrh(ubrrh), _ubrrl(ubrrl),
_ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
_udr(udr),
_rx_buffer_head(0), _rx_buffer_tail(0),
_tx_buffer_head(0), _tx_buffer_tail(0)
    1a3a:	e3 e5       	ldi	r30, 0x53	; 83
    1a3c:	f5 e0       	ldi	r31, 0x05	; 5
    1a3e:	8e ea       	ldi	r24, 0xAE	; 174
    1a40:	92 e0       	ldi	r25, 0x02	; 2
    1a42:	91 83       	std	Z+1, r25	; 0x01
    1a44:	80 83       	st	Z, r24
    1a46:	85 ec       	ldi	r24, 0xC5	; 197
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	93 83       	std	Z+3, r25	; 0x03
    1a4c:	82 83       	std	Z+2, r24	; 0x02
    1a4e:	84 ec       	ldi	r24, 0xC4	; 196
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	95 83       	std	Z+5, r25	; 0x05
    1a54:	84 83       	std	Z+4, r24	; 0x04
    1a56:	80 ec       	ldi	r24, 0xC0	; 192
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	97 83       	std	Z+7, r25	; 0x07
    1a5c:	86 83       	std	Z+6, r24	; 0x06
    1a5e:	81 ec       	ldi	r24, 0xC1	; 193
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	91 87       	std	Z+9, r25	; 0x09
    1a64:	80 87       	std	Z+8, r24	; 0x08
    1a66:	82 ec       	ldi	r24, 0xC2	; 194
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	93 87       	std	Z+11, r25	; 0x0b
    1a6c:	82 87       	std	Z+10, r24	; 0x0a
    1a6e:	86 ec       	ldi	r24, 0xC6	; 198
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	95 87       	std	Z+13, r25	; 0x0d
    1a74:	84 87       	std	Z+12, r24	; 0x0c
    1a76:	17 86       	std	Z+15, r1	; 0x0f
    1a78:	10 8a       	std	Z+16, r1	; 0x10
    1a7a:	11 8a       	std	Z+17, r1	; 0x11
    1a7c:	12 8a       	std	Z+18, r1	; 0x12
    1a7e:	08 95       	ret

00001a80 <__vector_36>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
}
    1a80:	1f 92       	push	r1
    1a82:	0f 92       	push	r0
    1a84:	0f b6       	in	r0, 0x3f	; 63
    1a86:	0f 92       	push	r0
    1a88:	11 24       	eor	r1, r1
    1a8a:	0b b6       	in	r0, 0x3b	; 59
    1a8c:	0f 92       	push	r0
    1a8e:	2f 93       	push	r18
    1a90:	8f 93       	push	r24
    1a92:	9f 93       	push	r25
    1a94:	af 93       	push	r26
    1a96:	bf 93       	push	r27
    1a98:	ef 93       	push	r30
    1a9a:	ff 93       	push	r31
    1a9c:	e0 91 8c 05 	lds	r30, 0x058C	; 0x80058c <Serial1+0x6>
    1aa0:	f0 91 8d 05 	lds	r31, 0x058D	; 0x80058d <Serial1+0x7>
    1aa4:	80 81       	ld	r24, Z
    1aa6:	82 fd       	sbrc	r24, 2
    1aa8:	14 c0       	rjmp	.+40     	; 0x1ad2 <__vector_36+0x52>
    1aaa:	e6 e8       	ldi	r30, 0x86	; 134
    1aac:	f5 e0       	ldi	r31, 0x05	; 5
    1aae:	a4 85       	ldd	r26, Z+12	; 0x0c
    1ab0:	b5 85       	ldd	r27, Z+13	; 0x0d
    1ab2:	2c 91       	ld	r18, X
    1ab4:	87 85       	ldd	r24, Z+15	; 0x0f
    1ab6:	8f 5f       	subi	r24, 0xFF	; 255
    1ab8:	8f 70       	andi	r24, 0x0F	; 15
    1aba:	90 89       	ldd	r25, Z+16	; 0x10
    1abc:	89 17       	cp	r24, r25
    1abe:	71 f0       	breq	.+28     	; 0x1adc <__vector_36+0x5c>
    1ac0:	df 01       	movw	r26, r30
    1ac2:	e7 85       	ldd	r30, Z+15	; 0x0f
    1ac4:	f0 e0       	ldi	r31, 0x00	; 0
    1ac6:	ea 57       	subi	r30, 0x7A	; 122
    1ac8:	fa 4f       	sbci	r31, 0xFA	; 250
    1aca:	23 8b       	std	Z+19, r18	; 0x13
    1acc:	1f 96       	adiw	r26, 0x0f	; 15
    1ace:	8c 93       	st	X, r24
    1ad0:	05 c0       	rjmp	.+10     	; 0x1adc <__vector_36+0x5c>
    1ad2:	e0 91 92 05 	lds	r30, 0x0592	; 0x800592 <Serial1+0xc>
    1ad6:	f0 91 93 05 	lds	r31, 0x0593	; 0x800593 <Serial1+0xd>
    1ada:	80 81       	ld	r24, Z
    1adc:	ff 91       	pop	r31
    1ade:	ef 91       	pop	r30
    1ae0:	bf 91       	pop	r27
    1ae2:	af 91       	pop	r26
    1ae4:	9f 91       	pop	r25
    1ae6:	8f 91       	pop	r24
    1ae8:	2f 91       	pop	r18
    1aea:	0f 90       	pop	r0
    1aec:	0b be       	out	0x3b, r0	; 59
    1aee:	0f 90       	pop	r0
    1af0:	0f be       	out	0x3f, r0	; 63
    1af2:	0f 90       	pop	r0
    1af4:	1f 90       	pop	r1
    1af6:	18 95       	reti

00001af8 <__vector_37>:
    1af8:	1f 92       	push	r1
    1afa:	0f 92       	push	r0
    1afc:	0f b6       	in	r0, 0x3f	; 63
    1afe:	0f 92       	push	r0
    1b00:	11 24       	eor	r1, r1
    1b02:	0b b6       	in	r0, 0x3b	; 59
    1b04:	0f 92       	push	r0
    1b06:	2f 93       	push	r18
    1b08:	3f 93       	push	r19
    1b0a:	4f 93       	push	r20
    1b0c:	5f 93       	push	r21
    1b0e:	6f 93       	push	r22
    1b10:	7f 93       	push	r23
    1b12:	8f 93       	push	r24
    1b14:	9f 93       	push	r25
    1b16:	af 93       	push	r26
    1b18:	bf 93       	push	r27
    1b1a:	ef 93       	push	r30
    1b1c:	ff 93       	push	r31
    1b1e:	86 e8       	ldi	r24, 0x86	; 134
    1b20:	95 e0       	ldi	r25, 0x05	; 5
    1b22:	1e de       	rcall	.-964    	; 0x1760 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1b24:	ff 91       	pop	r31
    1b26:	ef 91       	pop	r30
    1b28:	bf 91       	pop	r27
    1b2a:	af 91       	pop	r26
    1b2c:	9f 91       	pop	r25
    1b2e:	8f 91       	pop	r24
    1b30:	7f 91       	pop	r23
    1b32:	6f 91       	pop	r22
    1b34:	5f 91       	pop	r21
    1b36:	4f 91       	pop	r20
    1b38:	3f 91       	pop	r19
    1b3a:	2f 91       	pop	r18
    1b3c:	0f 90       	pop	r0
    1b3e:	0b be       	out	0x3b, r0	; 59
    1b40:	0f 90       	pop	r0
    1b42:	0f be       	out	0x3f, r0	; 63
    1b44:	0f 90       	pop	r0
    1b46:	1f 90       	pop	r1
    1b48:	18 95       	reti

00001b4a <_GLOBAL__sub_I___vector_36>:
    1b4a:	e6 e8       	ldi	r30, 0x86	; 134
    1b4c:	f5 e0       	ldi	r31, 0x05	; 5
    1b4e:	8e ea       	ldi	r24, 0xAE	; 174
    1b50:	92 e0       	ldi	r25, 0x02	; 2
    1b52:	91 83       	std	Z+1, r25	; 0x01
    1b54:	80 83       	st	Z, r24
    1b56:	8d ec       	ldi	r24, 0xCD	; 205
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	93 83       	std	Z+3, r25	; 0x03
    1b5c:	82 83       	std	Z+2, r24	; 0x02
    1b5e:	8c ec       	ldi	r24, 0xCC	; 204
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	95 83       	std	Z+5, r25	; 0x05
    1b64:	84 83       	std	Z+4, r24	; 0x04
    1b66:	88 ec       	ldi	r24, 0xC8	; 200
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	97 83       	std	Z+7, r25	; 0x07
    1b6c:	86 83       	std	Z+6, r24	; 0x06
    1b6e:	89 ec       	ldi	r24, 0xC9	; 201
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	91 87       	std	Z+9, r25	; 0x09
    1b74:	80 87       	std	Z+8, r24	; 0x08
    1b76:	8a ec       	ldi	r24, 0xCA	; 202
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	93 87       	std	Z+11, r25	; 0x0b
    1b7c:	82 87       	std	Z+10, r24	; 0x0a
    1b7e:	8e ec       	ldi	r24, 0xCE	; 206
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	95 87       	std	Z+13, r25	; 0x0d
    1b84:	84 87       	std	Z+12, r24	; 0x0c
    1b86:	17 86       	std	Z+15, r1	; 0x0f
    1b88:	10 8a       	std	Z+16, r1	; 0x10
    1b8a:	11 8a       	std	Z+17, r1	; 0x11
    1b8c:	12 8a       	std	Z+18, r1	; 0x12
    1b8e:	08 95       	ret

00001b90 <__vector_51>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial2_available() {
  return Serial2.available();
}
    1b90:	1f 92       	push	r1
    1b92:	0f 92       	push	r0
    1b94:	0f b6       	in	r0, 0x3f	; 63
    1b96:	0f 92       	push	r0
    1b98:	11 24       	eor	r1, r1
    1b9a:	0b b6       	in	r0, 0x3b	; 59
    1b9c:	0f 92       	push	r0
    1b9e:	2f 93       	push	r18
    1ba0:	8f 93       	push	r24
    1ba2:	9f 93       	push	r25
    1ba4:	af 93       	push	r26
    1ba6:	bf 93       	push	r27
    1ba8:	ef 93       	push	r30
    1baa:	ff 93       	push	r31
    1bac:	e0 91 bf 05 	lds	r30, 0x05BF	; 0x8005bf <Serial2+0x6>
    1bb0:	f0 91 c0 05 	lds	r31, 0x05C0	; 0x8005c0 <Serial2+0x7>
    1bb4:	80 81       	ld	r24, Z
    1bb6:	82 fd       	sbrc	r24, 2
    1bb8:	14 c0       	rjmp	.+40     	; 0x1be2 <__vector_51+0x52>
    1bba:	e9 eb       	ldi	r30, 0xB9	; 185
    1bbc:	f5 e0       	ldi	r31, 0x05	; 5
    1bbe:	a4 85       	ldd	r26, Z+12	; 0x0c
    1bc0:	b5 85       	ldd	r27, Z+13	; 0x0d
    1bc2:	2c 91       	ld	r18, X
    1bc4:	87 85       	ldd	r24, Z+15	; 0x0f
    1bc6:	8f 5f       	subi	r24, 0xFF	; 255
    1bc8:	8f 70       	andi	r24, 0x0F	; 15
    1bca:	90 89       	ldd	r25, Z+16	; 0x10
    1bcc:	89 17       	cp	r24, r25
    1bce:	71 f0       	breq	.+28     	; 0x1bec <__vector_51+0x5c>
    1bd0:	df 01       	movw	r26, r30
    1bd2:	e7 85       	ldd	r30, Z+15	; 0x0f
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	e7 54       	subi	r30, 0x47	; 71
    1bd8:	fa 4f       	sbci	r31, 0xFA	; 250
    1bda:	23 8b       	std	Z+19, r18	; 0x13
    1bdc:	1f 96       	adiw	r26, 0x0f	; 15
    1bde:	8c 93       	st	X, r24
    1be0:	05 c0       	rjmp	.+10     	; 0x1bec <__vector_51+0x5c>
    1be2:	e0 91 c5 05 	lds	r30, 0x05C5	; 0x8005c5 <Serial2+0xc>
    1be6:	f0 91 c6 05 	lds	r31, 0x05C6	; 0x8005c6 <Serial2+0xd>
    1bea:	80 81       	ld	r24, Z
    1bec:	ff 91       	pop	r31
    1bee:	ef 91       	pop	r30
    1bf0:	bf 91       	pop	r27
    1bf2:	af 91       	pop	r26
    1bf4:	9f 91       	pop	r25
    1bf6:	8f 91       	pop	r24
    1bf8:	2f 91       	pop	r18
    1bfa:	0f 90       	pop	r0
    1bfc:	0b be       	out	0x3b, r0	; 59
    1bfe:	0f 90       	pop	r0
    1c00:	0f be       	out	0x3f, r0	; 63
    1c02:	0f 90       	pop	r0
    1c04:	1f 90       	pop	r1
    1c06:	18 95       	reti

00001c08 <__vector_52>:
    1c08:	1f 92       	push	r1
    1c0a:	0f 92       	push	r0
    1c0c:	0f b6       	in	r0, 0x3f	; 63
    1c0e:	0f 92       	push	r0
    1c10:	11 24       	eor	r1, r1
    1c12:	0b b6       	in	r0, 0x3b	; 59
    1c14:	0f 92       	push	r0
    1c16:	2f 93       	push	r18
    1c18:	3f 93       	push	r19
    1c1a:	4f 93       	push	r20
    1c1c:	5f 93       	push	r21
    1c1e:	6f 93       	push	r22
    1c20:	7f 93       	push	r23
    1c22:	8f 93       	push	r24
    1c24:	9f 93       	push	r25
    1c26:	af 93       	push	r26
    1c28:	bf 93       	push	r27
    1c2a:	ef 93       	push	r30
    1c2c:	ff 93       	push	r31
    1c2e:	89 eb       	ldi	r24, 0xB9	; 185
    1c30:	95 e0       	ldi	r25, 0x05	; 5
    1c32:	96 dd       	rcall	.-1236   	; 0x1760 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1c34:	ff 91       	pop	r31
    1c36:	ef 91       	pop	r30
    1c38:	bf 91       	pop	r27
    1c3a:	af 91       	pop	r26
    1c3c:	9f 91       	pop	r25
    1c3e:	8f 91       	pop	r24
    1c40:	7f 91       	pop	r23
    1c42:	6f 91       	pop	r22
    1c44:	5f 91       	pop	r21
    1c46:	4f 91       	pop	r20
    1c48:	3f 91       	pop	r19
    1c4a:	2f 91       	pop	r18
    1c4c:	0f 90       	pop	r0
    1c4e:	0b be       	out	0x3b, r0	; 59
    1c50:	0f 90       	pop	r0
    1c52:	0f be       	out	0x3f, r0	; 63
    1c54:	0f 90       	pop	r0
    1c56:	1f 90       	pop	r1
    1c58:	18 95       	reti

00001c5a <_GLOBAL__sub_I___vector_51>:
    1c5a:	e9 eb       	ldi	r30, 0xB9	; 185
    1c5c:	f5 e0       	ldi	r31, 0x05	; 5
    1c5e:	8e ea       	ldi	r24, 0xAE	; 174
    1c60:	92 e0       	ldi	r25, 0x02	; 2
    1c62:	91 83       	std	Z+1, r25	; 0x01
    1c64:	80 83       	st	Z, r24
    1c66:	85 ed       	ldi	r24, 0xD5	; 213
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	93 83       	std	Z+3, r25	; 0x03
    1c6c:	82 83       	std	Z+2, r24	; 0x02
    1c6e:	84 ed       	ldi	r24, 0xD4	; 212
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	95 83       	std	Z+5, r25	; 0x05
    1c74:	84 83       	std	Z+4, r24	; 0x04
    1c76:	80 ed       	ldi	r24, 0xD0	; 208
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	97 83       	std	Z+7, r25	; 0x07
    1c7c:	86 83       	std	Z+6, r24	; 0x06
    1c7e:	81 ed       	ldi	r24, 0xD1	; 209
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	91 87       	std	Z+9, r25	; 0x09
    1c84:	80 87       	std	Z+8, r24	; 0x08
    1c86:	82 ed       	ldi	r24, 0xD2	; 210
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	93 87       	std	Z+11, r25	; 0x0b
    1c8c:	82 87       	std	Z+10, r24	; 0x0a
    1c8e:	86 ed       	ldi	r24, 0xD6	; 214
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	95 87       	std	Z+13, r25	; 0x0d
    1c94:	84 87       	std	Z+12, r24	; 0x0c
    1c96:	17 86       	std	Z+15, r1	; 0x0f
    1c98:	10 8a       	std	Z+16, r1	; 0x10
    1c9a:	11 8a       	std	Z+17, r1	; 0x11
    1c9c:	12 8a       	std	Z+18, r1	; 0x12
    1c9e:	08 95       	ret

00001ca0 <__vector_54>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial3_available() {
  return Serial3.available();
}
    1ca0:	1f 92       	push	r1
    1ca2:	0f 92       	push	r0
    1ca4:	0f b6       	in	r0, 0x3f	; 63
    1ca6:	0f 92       	push	r0
    1ca8:	11 24       	eor	r1, r1
    1caa:	0b b6       	in	r0, 0x3b	; 59
    1cac:	0f 92       	push	r0
    1cae:	2f 93       	push	r18
    1cb0:	8f 93       	push	r24
    1cb2:	9f 93       	push	r25
    1cb4:	af 93       	push	r26
    1cb6:	bf 93       	push	r27
    1cb8:	ef 93       	push	r30
    1cba:	ff 93       	push	r31
    1cbc:	e0 91 f2 05 	lds	r30, 0x05F2	; 0x8005f2 <Serial3+0x6>
    1cc0:	f0 91 f3 05 	lds	r31, 0x05F3	; 0x8005f3 <Serial3+0x7>
    1cc4:	80 81       	ld	r24, Z
    1cc6:	82 fd       	sbrc	r24, 2
    1cc8:	14 c0       	rjmp	.+40     	; 0x1cf2 <__vector_54+0x52>
    1cca:	ec ee       	ldi	r30, 0xEC	; 236
    1ccc:	f5 e0       	ldi	r31, 0x05	; 5
    1cce:	a4 85       	ldd	r26, Z+12	; 0x0c
    1cd0:	b5 85       	ldd	r27, Z+13	; 0x0d
    1cd2:	2c 91       	ld	r18, X
    1cd4:	87 85       	ldd	r24, Z+15	; 0x0f
    1cd6:	8f 5f       	subi	r24, 0xFF	; 255
    1cd8:	8f 70       	andi	r24, 0x0F	; 15
    1cda:	90 89       	ldd	r25, Z+16	; 0x10
    1cdc:	89 17       	cp	r24, r25
    1cde:	71 f0       	breq	.+28     	; 0x1cfc <__vector_54+0x5c>
    1ce0:	df 01       	movw	r26, r30
    1ce2:	e7 85       	ldd	r30, Z+15	; 0x0f
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	e4 51       	subi	r30, 0x14	; 20
    1ce8:	fa 4f       	sbci	r31, 0xFA	; 250
    1cea:	23 8b       	std	Z+19, r18	; 0x13
    1cec:	1f 96       	adiw	r26, 0x0f	; 15
    1cee:	8c 93       	st	X, r24
    1cf0:	05 c0       	rjmp	.+10     	; 0x1cfc <__vector_54+0x5c>
    1cf2:	e0 91 f8 05 	lds	r30, 0x05F8	; 0x8005f8 <Serial3+0xc>
    1cf6:	f0 91 f9 05 	lds	r31, 0x05F9	; 0x8005f9 <Serial3+0xd>
    1cfa:	80 81       	ld	r24, Z
    1cfc:	ff 91       	pop	r31
    1cfe:	ef 91       	pop	r30
    1d00:	bf 91       	pop	r27
    1d02:	af 91       	pop	r26
    1d04:	9f 91       	pop	r25
    1d06:	8f 91       	pop	r24
    1d08:	2f 91       	pop	r18
    1d0a:	0f 90       	pop	r0
    1d0c:	0b be       	out	0x3b, r0	; 59
    1d0e:	0f 90       	pop	r0
    1d10:	0f be       	out	0x3f, r0	; 63
    1d12:	0f 90       	pop	r0
    1d14:	1f 90       	pop	r1
    1d16:	18 95       	reti

00001d18 <__vector_55>:
    1d18:	1f 92       	push	r1
    1d1a:	0f 92       	push	r0
    1d1c:	0f b6       	in	r0, 0x3f	; 63
    1d1e:	0f 92       	push	r0
    1d20:	11 24       	eor	r1, r1
    1d22:	0b b6       	in	r0, 0x3b	; 59
    1d24:	0f 92       	push	r0
    1d26:	2f 93       	push	r18
    1d28:	3f 93       	push	r19
    1d2a:	4f 93       	push	r20
    1d2c:	5f 93       	push	r21
    1d2e:	6f 93       	push	r22
    1d30:	7f 93       	push	r23
    1d32:	8f 93       	push	r24
    1d34:	9f 93       	push	r25
    1d36:	af 93       	push	r26
    1d38:	bf 93       	push	r27
    1d3a:	ef 93       	push	r30
    1d3c:	ff 93       	push	r31
    1d3e:	8c ee       	ldi	r24, 0xEC	; 236
    1d40:	95 e0       	ldi	r25, 0x05	; 5
    1d42:	0e dd       	rcall	.-1508   	; 0x1760 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1d44:	ff 91       	pop	r31
    1d46:	ef 91       	pop	r30
    1d48:	bf 91       	pop	r27
    1d4a:	af 91       	pop	r26
    1d4c:	9f 91       	pop	r25
    1d4e:	8f 91       	pop	r24
    1d50:	7f 91       	pop	r23
    1d52:	6f 91       	pop	r22
    1d54:	5f 91       	pop	r21
    1d56:	4f 91       	pop	r20
    1d58:	3f 91       	pop	r19
    1d5a:	2f 91       	pop	r18
    1d5c:	0f 90       	pop	r0
    1d5e:	0b be       	out	0x3b, r0	; 59
    1d60:	0f 90       	pop	r0
    1d62:	0f be       	out	0x3f, r0	; 63
    1d64:	0f 90       	pop	r0
    1d66:	1f 90       	pop	r1
    1d68:	18 95       	reti

00001d6a <_GLOBAL__sub_I___vector_54>:
    1d6a:	ec ee       	ldi	r30, 0xEC	; 236
    1d6c:	f5 e0       	ldi	r31, 0x05	; 5
    1d6e:	8e ea       	ldi	r24, 0xAE	; 174
    1d70:	92 e0       	ldi	r25, 0x02	; 2
    1d72:	91 83       	std	Z+1, r25	; 0x01
    1d74:	80 83       	st	Z, r24
    1d76:	85 e3       	ldi	r24, 0x35	; 53
    1d78:	91 e0       	ldi	r25, 0x01	; 1
    1d7a:	93 83       	std	Z+3, r25	; 0x03
    1d7c:	82 83       	std	Z+2, r24	; 0x02
    1d7e:	84 e3       	ldi	r24, 0x34	; 52
    1d80:	91 e0       	ldi	r25, 0x01	; 1
    1d82:	95 83       	std	Z+5, r25	; 0x05
    1d84:	84 83       	std	Z+4, r24	; 0x04
    1d86:	80 e3       	ldi	r24, 0x30	; 48
    1d88:	91 e0       	ldi	r25, 0x01	; 1
    1d8a:	97 83       	std	Z+7, r25	; 0x07
    1d8c:	86 83       	std	Z+6, r24	; 0x06
    1d8e:	81 e3       	ldi	r24, 0x31	; 49
    1d90:	91 e0       	ldi	r25, 0x01	; 1
    1d92:	91 87       	std	Z+9, r25	; 0x09
    1d94:	80 87       	std	Z+8, r24	; 0x08
    1d96:	82 e3       	ldi	r24, 0x32	; 50
    1d98:	91 e0       	ldi	r25, 0x01	; 1
    1d9a:	93 87       	std	Z+11, r25	; 0x0b
    1d9c:	82 87       	std	Z+10, r24	; 0x0a
    1d9e:	86 e3       	ldi	r24, 0x36	; 54
    1da0:	91 e0       	ldi	r25, 0x01	; 1
    1da2:	95 87       	std	Z+13, r25	; 0x0d
    1da4:	84 87       	std	Z+12, r24	; 0x0c
    1da6:	17 86       	std	Z+15, r1	; 0x0f
    1da8:	10 8a       	std	Z+16, r1	; 0x10
    1daa:	11 8a       	std	Z+17, r1	; 0x11
    1dac:	12 8a       	std	Z+18, r1	; 0x12
    1dae:	08 95       	ret

00001db0 <twi_readFrom>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1db0:	41 32       	cpi	r20, 0x21	; 33
    1db2:	08 f0       	brcs	.+2      	; 0x1db6 <twi_readFrom+0x6>
    1db4:	4c c0       	rjmp	.+152    	; 0x1e4e <twi_readFrom+0x9e>
    1db6:	90 91 8c 06 	lds	r25, 0x068C	; 0x80068c <twi_state>
    1dba:	91 11       	cpse	r25, r1
    1dbc:	fc cf       	rjmp	.-8      	; 0x1db6 <twi_readFrom+0x6>
    1dbe:	31 e0       	ldi	r19, 0x01	; 1
    1dc0:	30 93 8c 06 	sts	0x068C, r19	; 0x80068c <twi_state>
    1dc4:	20 93 8a 06 	sts	0x068A, r18	; 0x80068a <twi_sendStop>
    1dc8:	2f ef       	ldi	r18, 0xFF	; 255
    1dca:	20 93 1f 06 	sts	0x061F, r18	; 0x80061f <twi_error>
    1dce:	10 92 64 06 	sts	0x0664, r1	; 0x800664 <twi_masterBufferIndex>
    1dd2:	24 0f       	add	r18, r20
    1dd4:	20 93 63 06 	sts	0x0663, r18	; 0x800663 <twi_masterBufferLength>
    1dd8:	30 93 8b 06 	sts	0x068B, r19	; 0x80068b <twi_slarw>
    1ddc:	20 91 8b 06 	lds	r18, 0x068B	; 0x80068b <twi_slarw>
    1de0:	88 0f       	add	r24, r24
    1de2:	82 2b       	or	r24, r18
    1de4:	80 93 8b 06 	sts	0x068B, r24	; 0x80068b <twi_slarw>
    1de8:	80 91 89 06 	lds	r24, 0x0689	; 0x800689 <twi_inRepStart>
    1dec:	81 30       	cpi	r24, 0x01	; 1
    1dee:	81 f4       	brne	.+32     	; 0x1e10 <twi_readFrom+0x60>
    1df0:	10 92 89 06 	sts	0x0689, r1	; 0x800689 <twi_inRepStart>
    1df4:	ab eb       	ldi	r26, 0xBB	; 187
    1df6:	b0 e0       	ldi	r27, 0x00	; 0
    1df8:	ec eb       	ldi	r30, 0xBC	; 188
    1dfa:	f0 e0       	ldi	r31, 0x00	; 0
    1dfc:	80 91 8b 06 	lds	r24, 0x068B	; 0x80068b <twi_slarw>
    1e00:	8c 93       	st	X, r24
    1e02:	80 81       	ld	r24, Z
    1e04:	83 fd       	sbrc	r24, 3
    1e06:	fa cf       	rjmp	.-12     	; 0x1dfc <twi_readFrom+0x4c>
    1e08:	85 ec       	ldi	r24, 0xC5	; 197
    1e0a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1e0e:	03 c0       	rjmp	.+6      	; 0x1e16 <twi_readFrom+0x66>
    1e10:	85 ee       	ldi	r24, 0xE5	; 229
    1e12:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1e16:	80 91 8c 06 	lds	r24, 0x068C	; 0x80068c <twi_state>
    1e1a:	81 30       	cpi	r24, 0x01	; 1
    1e1c:	e1 f3       	breq	.-8      	; 0x1e16 <twi_readFrom+0x66>
    1e1e:	80 91 64 06 	lds	r24, 0x0664	; 0x800664 <twi_masterBufferIndex>
    1e22:	84 17       	cp	r24, r20
    1e24:	10 f4       	brcc	.+4      	; 0x1e2a <twi_readFrom+0x7a>
    1e26:	40 91 64 06 	lds	r20, 0x0664	; 0x800664 <twi_masterBufferIndex>
    1e2a:	44 23       	and	r20, r20
    1e2c:	89 f0       	breq	.+34     	; 0x1e50 <twi_readFrom+0xa0>
    1e2e:	e5 e6       	ldi	r30, 0x65	; 101
    1e30:	f6 e0       	ldi	r31, 0x06	; 6
    1e32:	a6 2f       	mov	r26, r22
    1e34:	b7 2f       	mov	r27, r23
    1e36:	2f ef       	ldi	r18, 0xFF	; 255
    1e38:	24 0f       	add	r18, r20
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	2a 59       	subi	r18, 0x9A	; 154
    1e3e:	39 4f       	sbci	r19, 0xF9	; 249
    1e40:	81 91       	ld	r24, Z+
    1e42:	8d 93       	st	X+, r24
    1e44:	e2 17       	cp	r30, r18
    1e46:	f3 07       	cpc	r31, r19
    1e48:	d9 f7       	brne	.-10     	; 0x1e40 <twi_readFrom+0x90>
    1e4a:	94 2f       	mov	r25, r20
    1e4c:	01 c0       	rjmp	.+2      	; 0x1e50 <twi_readFrom+0xa0>
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	89 2f       	mov	r24, r25
    1e52:	08 95       	ret

00001e54 <twi_writeTo>:
    1e54:	0f 93       	push	r16
    1e56:	41 32       	cpi	r20, 0x21	; 33
    1e58:	08 f0       	brcs	.+2      	; 0x1e5c <twi_writeTo+0x8>
    1e5a:	57 c0       	rjmp	.+174    	; 0x1f0a <twi_writeTo+0xb6>
    1e5c:	30 91 8c 06 	lds	r19, 0x068C	; 0x80068c <twi_state>
    1e60:	31 11       	cpse	r19, r1
    1e62:	fc cf       	rjmp	.-8      	; 0x1e5c <twi_writeTo+0x8>
    1e64:	92 e0       	ldi	r25, 0x02	; 2
    1e66:	90 93 8c 06 	sts	0x068C, r25	; 0x80068c <twi_state>
    1e6a:	00 93 8a 06 	sts	0x068A, r16	; 0x80068a <twi_sendStop>
    1e6e:	9f ef       	ldi	r25, 0xFF	; 255
    1e70:	90 93 1f 06 	sts	0x061F, r25	; 0x80061f <twi_error>
    1e74:	10 92 64 06 	sts	0x0664, r1	; 0x800664 <twi_masterBufferIndex>
    1e78:	40 93 63 06 	sts	0x0663, r20	; 0x800663 <twi_masterBufferLength>
    1e7c:	44 23       	and	r20, r20
    1e7e:	71 f0       	breq	.+28     	; 0x1e9c <twi_writeTo+0x48>
    1e80:	fb 01       	movw	r30, r22
    1e82:	a5 e6       	ldi	r26, 0x65	; 101
    1e84:	b6 e0       	ldi	r27, 0x06	; 6
    1e86:	41 50       	subi	r20, 0x01	; 1
    1e88:	50 e0       	ldi	r21, 0x00	; 0
    1e8a:	4f 5f       	subi	r20, 0xFF	; 255
    1e8c:	5f 4f       	sbci	r21, 0xFF	; 255
    1e8e:	64 0f       	add	r22, r20
    1e90:	75 1f       	adc	r23, r21
    1e92:	91 91       	ld	r25, Z+
    1e94:	9d 93       	st	X+, r25
    1e96:	e6 17       	cp	r30, r22
    1e98:	f7 07       	cpc	r31, r23
    1e9a:	d9 f7       	brne	.-10     	; 0x1e92 <twi_writeTo+0x3e>
    1e9c:	10 92 8b 06 	sts	0x068B, r1	; 0x80068b <twi_slarw>
    1ea0:	90 91 8b 06 	lds	r25, 0x068B	; 0x80068b <twi_slarw>
    1ea4:	88 0f       	add	r24, r24
    1ea6:	89 2b       	or	r24, r25
    1ea8:	80 93 8b 06 	sts	0x068B, r24	; 0x80068b <twi_slarw>
    1eac:	80 91 89 06 	lds	r24, 0x0689	; 0x800689 <twi_inRepStart>
    1eb0:	81 30       	cpi	r24, 0x01	; 1
    1eb2:	81 f4       	brne	.+32     	; 0x1ed4 <twi_writeTo+0x80>
    1eb4:	10 92 89 06 	sts	0x0689, r1	; 0x800689 <twi_inRepStart>
    1eb8:	ab eb       	ldi	r26, 0xBB	; 187
    1eba:	b0 e0       	ldi	r27, 0x00	; 0
    1ebc:	ec eb       	ldi	r30, 0xBC	; 188
    1ebe:	f0 e0       	ldi	r31, 0x00	; 0
    1ec0:	80 91 8b 06 	lds	r24, 0x068B	; 0x80068b <twi_slarw>
    1ec4:	8c 93       	st	X, r24
    1ec6:	80 81       	ld	r24, Z
    1ec8:	83 fd       	sbrc	r24, 3
    1eca:	fa cf       	rjmp	.-12     	; 0x1ec0 <twi_writeTo+0x6c>
    1ecc:	85 ec       	ldi	r24, 0xC5	; 197
    1ece:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1ed2:	03 c0       	rjmp	.+6      	; 0x1eda <twi_writeTo+0x86>
    1ed4:	85 ee       	ldi	r24, 0xE5	; 229
    1ed6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1eda:	22 23       	and	r18, r18
    1edc:	41 f0       	breq	.+16     	; 0x1eee <twi_writeTo+0x9a>
    1ede:	80 91 8c 06 	lds	r24, 0x068C	; 0x80068c <twi_state>
    1ee2:	82 30       	cpi	r24, 0x02	; 2
    1ee4:	21 f4       	brne	.+8      	; 0x1eee <twi_writeTo+0x9a>
    1ee6:	80 91 8c 06 	lds	r24, 0x068C	; 0x80068c <twi_state>
    1eea:	82 30       	cpi	r24, 0x02	; 2
    1eec:	e1 f3       	breq	.-8      	; 0x1ee6 <twi_writeTo+0x92>
    1eee:	80 91 1f 06 	lds	r24, 0x061F	; 0x80061f <twi_error>
    1ef2:	8f 3f       	cpi	r24, 0xFF	; 255
    1ef4:	79 f0       	breq	.+30     	; 0x1f14 <twi_writeTo+0xc0>
    1ef6:	80 91 1f 06 	lds	r24, 0x061F	; 0x80061f <twi_error>
    1efa:	80 32       	cpi	r24, 0x20	; 32
    1efc:	41 f0       	breq	.+16     	; 0x1f0e <twi_writeTo+0xba>
    1efe:	80 91 1f 06 	lds	r24, 0x061F	; 0x80061f <twi_error>
    1f02:	80 33       	cpi	r24, 0x30	; 48
    1f04:	31 f0       	breq	.+12     	; 0x1f12 <twi_writeTo+0xbe>
    1f06:	34 e0       	ldi	r19, 0x04	; 4
    1f08:	05 c0       	rjmp	.+10     	; 0x1f14 <twi_writeTo+0xc0>
    1f0a:	31 e0       	ldi	r19, 0x01	; 1
    1f0c:	03 c0       	rjmp	.+6      	; 0x1f14 <twi_writeTo+0xc0>
    1f0e:	32 e0       	ldi	r19, 0x02	; 2
    1f10:	01 c0       	rjmp	.+2      	; 0x1f14 <twi_writeTo+0xc0>
    1f12:	33 e0       	ldi	r19, 0x03	; 3
    1f14:	83 2f       	mov	r24, r19
    1f16:	0f 91       	pop	r16
    1f18:	08 95       	ret

00001f1a <twi_transmit>:
    1f1a:	40 91 41 06 	lds	r20, 0x0641	; 0x800641 <twi_txBufferLength>
    1f1e:	26 2f       	mov	r18, r22
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	24 0f       	add	r18, r20
    1f24:	31 1d       	adc	r19, r1
    1f26:	21 32       	cpi	r18, 0x21	; 33
    1f28:	31 05       	cpc	r19, r1
    1f2a:	ec f4       	brge	.+58     	; 0x1f66 <twi_transmit+0x4c>
    1f2c:	20 91 8c 06 	lds	r18, 0x068C	; 0x80068c <twi_state>
    1f30:	24 30       	cpi	r18, 0x04	; 4
    1f32:	d9 f4       	brne	.+54     	; 0x1f6a <twi_transmit+0x50>
    1f34:	66 23       	and	r22, r22
    1f36:	81 f0       	breq	.+32     	; 0x1f58 <twi_transmit+0x3e>
    1f38:	a8 2f       	mov	r26, r24
    1f3a:	b9 2f       	mov	r27, r25
    1f3c:	80 e0       	ldi	r24, 0x00	; 0
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	30 91 41 06 	lds	r19, 0x0641	; 0x800641 <twi_txBufferLength>
    1f44:	2d 91       	ld	r18, X+
    1f46:	fc 01       	movw	r30, r24
    1f48:	ed 5b       	subi	r30, 0xBD	; 189
    1f4a:	f9 4f       	sbci	r31, 0xF9	; 249
    1f4c:	e3 0f       	add	r30, r19
    1f4e:	f1 1d       	adc	r31, r1
    1f50:	20 83       	st	Z, r18
    1f52:	01 96       	adiw	r24, 0x01	; 1
    1f54:	86 17       	cp	r24, r22
    1f56:	a0 f3       	brcs	.-24     	; 0x1f40 <twi_transmit+0x26>
    1f58:	80 91 41 06 	lds	r24, 0x0641	; 0x800641 <twi_txBufferLength>
    1f5c:	68 0f       	add	r22, r24
    1f5e:	60 93 41 06 	sts	0x0641, r22	; 0x800641 <twi_txBufferLength>
    1f62:	80 e0       	ldi	r24, 0x00	; 0
    1f64:	08 95       	ret
    1f66:	81 e0       	ldi	r24, 0x01	; 1
    1f68:	08 95       	ret
    1f6a:	82 e0       	ldi	r24, 0x02	; 2
    1f6c:	08 95       	ret

00001f6e <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    1f6e:	85 ed       	ldi	r24, 0xD5	; 213
    1f70:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    1f74:	ec eb       	ldi	r30, 0xBC	; 188
    1f76:	f0 e0       	ldi	r31, 0x00	; 0
    1f78:	80 81       	ld	r24, Z
    1f7a:	84 fd       	sbrc	r24, 4
    1f7c:	fd cf       	rjmp	.-6      	; 0x1f78 <twi_stop+0xa>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    1f7e:	10 92 8c 06 	sts	0x068C, r1	; 0x80068c <twi_state>
    1f82:	08 95       	ret

00001f84 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    1f84:	85 ec       	ldi	r24, 0xC5	; 197
    1f86:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // update twi state
  twi_state = TWI_READY;
    1f8a:	10 92 8c 06 	sts	0x068C, r1	; 0x80068c <twi_state>
    1f8e:	08 95       	ret

00001f90 <__vector_39>:
}

ISR(TWI_vect)
{
    1f90:	1f 92       	push	r1
    1f92:	0f 92       	push	r0
    1f94:	0f b6       	in	r0, 0x3f	; 63
    1f96:	0f 92       	push	r0
    1f98:	11 24       	eor	r1, r1
    1f9a:	0b b6       	in	r0, 0x3b	; 59
    1f9c:	0f 92       	push	r0
    1f9e:	2f 93       	push	r18
    1fa0:	3f 93       	push	r19
    1fa2:	4f 93       	push	r20
    1fa4:	5f 93       	push	r21
    1fa6:	6f 93       	push	r22
    1fa8:	7f 93       	push	r23
    1faa:	8f 93       	push	r24
    1fac:	9f 93       	push	r25
    1fae:	af 93       	push	r26
    1fb0:	bf 93       	push	r27
    1fb2:	ef 93       	push	r30
    1fb4:	ff 93       	push	r31
  switch(TW_STATUS){
    1fb6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    1fba:	88 7f       	andi	r24, 0xF8	; 248
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	89 3c       	cpi	r24, 0xC9	; 201
    1fc0:	91 05       	cpc	r25, r1
    1fc2:	08 f0       	brcs	.+2      	; 0x1fc6 <__vector_39+0x36>
    1fc4:	ee c0       	rjmp	.+476    	; 0x21a2 <__vector_39+0x212>
    1fc6:	fc 01       	movw	r30, r24
    1fc8:	88 27       	eor	r24, r24
    1fca:	ee 58       	subi	r30, 0x8E	; 142
    1fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fce:	8f 4f       	sbci	r24, 0xFF	; 255
    1fd0:	61 c4       	rjmp	.+2242   	; 0x2894 <__tablejump2__>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    1fd2:	80 91 8b 06 	lds	r24, 0x068B	; 0x80068b <twi_slarw>
    1fd6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1fda:	85 ec       	ldi	r24, 0xC5	; 197
    1fdc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1fe0:	e0 c0       	rjmp	.+448    	; 0x21a2 <__vector_39+0x212>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1fe2:	90 91 64 06 	lds	r25, 0x0664	; 0x800664 <twi_masterBufferIndex>
    1fe6:	80 91 63 06 	lds	r24, 0x0663	; 0x800663 <twi_masterBufferLength>
    1fea:	98 17       	cp	r25, r24
    1fec:	80 f4       	brcc	.+32     	; 0x200e <__vector_39+0x7e>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    1fee:	e0 91 64 06 	lds	r30, 0x0664	; 0x800664 <twi_masterBufferIndex>
    1ff2:	81 e0       	ldi	r24, 0x01	; 1
    1ff4:	8e 0f       	add	r24, r30
    1ff6:	80 93 64 06 	sts	0x0664, r24	; 0x800664 <twi_masterBufferIndex>
    1ffa:	f0 e0       	ldi	r31, 0x00	; 0
    1ffc:	eb 59       	subi	r30, 0x9B	; 155
    1ffe:	f9 4f       	sbci	r31, 0xF9	; 249
    2000:	80 81       	ld	r24, Z
    2002:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2006:	85 ec       	ldi	r24, 0xC5	; 197
    2008:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    200c:	ca c0       	rjmp	.+404    	; 0x21a2 <__vector_39+0x212>
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
        twi_reply(1);
      }else{
	if (twi_sendStop)
    200e:	80 91 8a 06 	lds	r24, 0x068A	; 0x80068a <twi_sendStop>
    2012:	88 23       	and	r24, r24
          twi_stop();
    2014:	11 f0       	breq	.+4      	; 0x201a <__vector_39+0x8a>
    2016:	ab df       	rcall	.-170    	; 0x1f6e <twi_stop>
    2018:	c4 c0       	rjmp	.+392    	; 0x21a2 <__vector_39+0x212>
	else {
	  twi_inRepStart = 1;	// we're gonna send the START
    201a:	81 e0       	ldi	r24, 0x01	; 1
    201c:	80 93 89 06 	sts	0x0689, r24	; 0x800689 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2020:	84 ea       	ldi	r24, 0xA4	; 164
    2022:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	  twi_state = TWI_READY;
    2026:	10 92 8c 06 	sts	0x068C, r1	; 0x80068c <twi_state>
    202a:	bb c0       	rjmp	.+374    	; 0x21a2 <__vector_39+0x212>
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    202c:	80 e2       	ldi	r24, 0x20	; 32
    202e:	80 93 1f 06 	sts	0x061F, r24	; 0x80061f <twi_error>
      twi_stop();
    2032:	9d df       	rcall	.-198    	; 0x1f6e <twi_stop>
      break;
    2034:	b6 c0       	rjmp	.+364    	; 0x21a2 <__vector_39+0x212>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    2036:	80 e3       	ldi	r24, 0x30	; 48
    2038:	80 93 1f 06 	sts	0x061F, r24	; 0x80061f <twi_error>
      twi_stop();
    203c:	98 df       	rcall	.-208    	; 0x1f6e <twi_stop>
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    203e:	b1 c0       	rjmp	.+354    	; 0x21a2 <__vector_39+0x212>
    2040:	88 e3       	ldi	r24, 0x38	; 56
    2042:	80 93 1f 06 	sts	0x061F, r24	; 0x80061f <twi_error>
      twi_releaseBus();
    2046:	9e df       	rcall	.-196    	; 0x1f84 <twi_releaseBus>
      break;
    2048:	ac c0       	rjmp	.+344    	; 0x21a2 <__vector_39+0x212>

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    204a:	e0 91 64 06 	lds	r30, 0x0664	; 0x800664 <twi_masterBufferIndex>
    204e:	81 e0       	ldi	r24, 0x01	; 1
    2050:	8e 0f       	add	r24, r30
    2052:	80 93 64 06 	sts	0x0664, r24	; 0x800664 <twi_masterBufferIndex>
    2056:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    205a:	f0 e0       	ldi	r31, 0x00	; 0
    205c:	eb 59       	subi	r30, 0x9B	; 155
    205e:	f9 4f       	sbci	r31, 0xF9	; 249
    2060:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2062:	90 91 64 06 	lds	r25, 0x0664	; 0x800664 <twi_masterBufferIndex>
    2066:	80 91 63 06 	lds	r24, 0x0663	; 0x800663 <twi_masterBufferLength>
    206a:	98 17       	cp	r25, r24
    206c:	20 f4       	brcc	.+8      	; 0x2076 <__vector_39+0xe6>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    206e:	85 ec       	ldi	r24, 0xC5	; 197
    2070:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2074:	96 c0       	rjmp	.+300    	; 0x21a2 <__vector_39+0x212>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2076:	85 e8       	ldi	r24, 0x85	; 133
    2078:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    207c:	92 c0       	rjmp	.+292    	; 0x21a2 <__vector_39+0x212>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    207e:	e0 91 64 06 	lds	r30, 0x0664	; 0x800664 <twi_masterBufferIndex>
    2082:	81 e0       	ldi	r24, 0x01	; 1
    2084:	8e 0f       	add	r24, r30
    2086:	80 93 64 06 	sts	0x0664, r24	; 0x800664 <twi_masterBufferIndex>
    208a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    208e:	f0 e0       	ldi	r31, 0x00	; 0
    2090:	eb 59       	subi	r30, 0x9B	; 155
    2092:	f9 4f       	sbci	r31, 0xF9	; 249
	if (twi_sendStop)
    2094:	80 83       	st	Z, r24
    2096:	80 91 8a 06 	lds	r24, 0x068A	; 0x80068a <twi_sendStop>
    209a:	88 23       	and	r24, r24
          twi_stop();
    209c:	11 f0       	breq	.+4      	; 0x20a2 <__vector_39+0x112>
    209e:	67 df       	rcall	.-306    	; 0x1f6e <twi_stop>
    20a0:	80 c0       	rjmp	.+256    	; 0x21a2 <__vector_39+0x212>
	else {
	  twi_inRepStart = 1;	// we're gonna send the START
    20a2:	81 e0       	ldi	r24, 0x01	; 1
    20a4:	80 93 89 06 	sts	0x0689, r24	; 0x800689 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    20a8:	84 ea       	ldi	r24, 0xA4	; 164
    20aa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	  twi_state = TWI_READY;
    20ae:	10 92 8c 06 	sts	0x068C, r1	; 0x80068c <twi_state>
	}    
	break;
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
    20b2:	77 c0       	rjmp	.+238    	; 0x21a2 <__vector_39+0x212>
    20b4:	5c df       	rcall	.-328    	; 0x1f6e <twi_stop>
      break;
    20b6:	75 c0       	rjmp	.+234    	; 0x21a2 <__vector_39+0x212>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    20b8:	83 e0       	ldi	r24, 0x03	; 3
    20ba:	80 93 8c 06 	sts	0x068C, r24	; 0x80068c <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    20be:	10 92 20 06 	sts	0x0620, r1	; 0x800620 <twi_rxBufferIndex>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    20c2:	85 ec       	ldi	r24, 0xC5	; 197
    20c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    20c8:	6c c0       	rjmp	.+216    	; 0x21a2 <__vector_39+0x212>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    20ca:	80 91 20 06 	lds	r24, 0x0620	; 0x800620 <twi_rxBufferIndex>
    20ce:	80 32       	cpi	r24, 0x20	; 32
    20d0:	80 f4       	brcc	.+32     	; 0x20f2 <__vector_39+0x162>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    20d2:	e0 91 20 06 	lds	r30, 0x0620	; 0x800620 <twi_rxBufferIndex>
    20d6:	81 e0       	ldi	r24, 0x01	; 1
    20d8:	8e 0f       	add	r24, r30
    20da:	80 93 20 06 	sts	0x0620, r24	; 0x800620 <twi_rxBufferIndex>
    20de:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    20e2:	f0 e0       	ldi	r31, 0x00	; 0
    20e4:	ef 5d       	subi	r30, 0xDF	; 223
    20e6:	f9 4f       	sbci	r31, 0xF9	; 249
    20e8:	80 83       	st	Z, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    20ea:	85 ec       	ldi	r24, 0xC5	; 197
    20ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    20f0:	58 c0       	rjmp	.+176    	; 0x21a2 <__vector_39+0x212>
    20f2:	85 e8       	ldi	r24, 0x85	; 133
    20f4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    20f8:	54 c0       	rjmp	.+168    	; 0x21a2 <__vector_39+0x212>
    20fa:	44 df       	rcall	.-376    	; 0x1f84 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    20fc:	80 91 20 06 	lds	r24, 0x0620	; 0x800620 <twi_rxBufferIndex>
    2100:	80 32       	cpi	r24, 0x20	; 32
    2102:	30 f4       	brcc	.+12     	; 0x2110 <__vector_39+0x180>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    2104:	e0 91 20 06 	lds	r30, 0x0620	; 0x800620 <twi_rxBufferIndex>
    2108:	f0 e0       	ldi	r31, 0x00	; 0
    210a:	ef 5d       	subi	r30, 0xDF	; 223
    210c:	f9 4f       	sbci	r31, 0xF9	; 249
    210e:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    2110:	60 91 20 06 	lds	r22, 0x0620	; 0x800620 <twi_rxBufferIndex>
    2114:	70 e0       	ldi	r23, 0x00	; 0
    2116:	e0 91 85 06 	lds	r30, 0x0685	; 0x800685 <twi_onSlaveReceive>
    211a:	f0 91 86 06 	lds	r31, 0x0686	; 0x800686 <twi_onSlaveReceive+0x1>
    211e:	81 e2       	ldi	r24, 0x21	; 33
    2120:	96 e0       	ldi	r25, 0x06	; 6
    2122:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    2124:	10 92 20 06 	sts	0x0620, r1	; 0x800620 <twi_rxBufferIndex>
      break;
    2128:	3c c0       	rjmp	.+120    	; 0x21a2 <__vector_39+0x212>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    212a:	85 e8       	ldi	r24, 0x85	; 133
    212c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2130:	38 c0       	rjmp	.+112    	; 0x21a2 <__vector_39+0x212>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    2132:	84 e0       	ldi	r24, 0x04	; 4
    2134:	80 93 8c 06 	sts	0x068C, r24	; 0x80068c <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    2138:	10 92 42 06 	sts	0x0642, r1	; 0x800642 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    213c:	10 92 41 06 	sts	0x0641, r1	; 0x800641 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    2140:	e0 91 87 06 	lds	r30, 0x0687	; 0x800687 <twi_onSlaveTransmit>
    2144:	f0 91 88 06 	lds	r31, 0x0688	; 0x800688 <twi_onSlaveTransmit+0x1>
    2148:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    214a:	80 91 41 06 	lds	r24, 0x0641	; 0x800641 <twi_txBufferLength>
    214e:	81 11       	cpse	r24, r1
    2150:	05 c0       	rjmp	.+10     	; 0x215c <__vector_39+0x1cc>
        twi_txBufferLength = 1;
    2152:	81 e0       	ldi	r24, 0x01	; 1
    2154:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    2158:	10 92 43 06 	sts	0x0643, r1	; 0x800643 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    215c:	e0 91 42 06 	lds	r30, 0x0642	; 0x800642 <twi_txBufferIndex>
    2160:	81 e0       	ldi	r24, 0x01	; 1
    2162:	8e 0f       	add	r24, r30
    2164:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <twi_txBufferIndex>
    2168:	f0 e0       	ldi	r31, 0x00	; 0
    216a:	ed 5b       	subi	r30, 0xBD	; 189
    216c:	f9 4f       	sbci	r31, 0xF9	; 249
    216e:	80 81       	ld	r24, Z
    2170:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2174:	90 91 42 06 	lds	r25, 0x0642	; 0x800642 <twi_txBufferIndex>
    2178:	80 91 41 06 	lds	r24, 0x0641	; 0x800641 <twi_txBufferLength>
    217c:	98 17       	cp	r25, r24
    217e:	20 f4       	brcc	.+8      	; 0x2188 <__vector_39+0x1f8>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2180:	85 ec       	ldi	r24, 0xC5	; 197
    2182:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2186:	0d c0       	rjmp	.+26     	; 0x21a2 <__vector_39+0x212>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2188:	85 e8       	ldi	r24, 0x85	; 133
    218a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    218e:	09 c0       	rjmp	.+18     	; 0x21a2 <__vector_39+0x212>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2190:	85 ec       	ldi	r24, 0xC5	; 197
    2192:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    2196:	10 92 8c 06 	sts	0x068C, r1	; 0x80068c <twi_state>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    219a:	03 c0       	rjmp	.+6      	; 0x21a2 <__vector_39+0x212>
    219c:	10 92 1f 06 	sts	0x061F, r1	; 0x80061f <twi_error>
      twi_stop();
    21a0:	e6 de       	rcall	.-564    	; 0x1f6e <twi_stop>
      break;
  }
}
    21a2:	ff 91       	pop	r31
    21a4:	ef 91       	pop	r30
    21a6:	bf 91       	pop	r27
    21a8:	af 91       	pop	r26
    21aa:	9f 91       	pop	r25
    21ac:	8f 91       	pop	r24
    21ae:	7f 91       	pop	r23
    21b0:	6f 91       	pop	r22
    21b2:	5f 91       	pop	r21
    21b4:	4f 91       	pop	r20
    21b6:	3f 91       	pop	r19
    21b8:	2f 91       	pop	r18
    21ba:	0f 90       	pop	r0
    21bc:	0b be       	out	0x3b, r0	; 59
    21be:	0f 90       	pop	r0
    21c0:	0f be       	out	0x3f, r0	; 63
    21c2:	0f 90       	pop	r0
    21c4:	1f 90       	pop	r1
    21c6:	18 95       	reti

000021c8 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
	user_onRequest = function;
    21c8:	80 91 b3 06 	lds	r24, 0x06B3	; 0x8006b3 <_ZN7TwoWire14rxBufferLengthE>
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	20 91 b4 06 	lds	r18, 0x06B4	; 0x8006b4 <_ZN7TwoWire13rxBufferIndexE>
    21d2:	82 1b       	sub	r24, r18
    21d4:	91 09       	sbc	r25, r1
    21d6:	08 95       	ret

000021d8 <_ZN7TwoWire4readEv>:
    21d8:	90 91 b4 06 	lds	r25, 0x06B4	; 0x8006b4 <_ZN7TwoWire13rxBufferIndexE>
    21dc:	80 91 b3 06 	lds	r24, 0x06B3	; 0x8006b3 <_ZN7TwoWire14rxBufferLengthE>
    21e0:	98 17       	cp	r25, r24
    21e2:	50 f4       	brcc	.+20     	; 0x21f8 <_ZN7TwoWire4readEv+0x20>
    21e4:	e9 2f       	mov	r30, r25
    21e6:	f0 e0       	ldi	r31, 0x00	; 0
    21e8:	eb 54       	subi	r30, 0x4B	; 75
    21ea:	f9 4f       	sbci	r31, 0xF9	; 249
    21ec:	20 81       	ld	r18, Z
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	9f 5f       	subi	r25, 0xFF	; 255
    21f2:	90 93 b4 06 	sts	0x06B4, r25	; 0x8006b4 <_ZN7TwoWire13rxBufferIndexE>
    21f6:	02 c0       	rjmp	.+4      	; 0x21fc <_ZN7TwoWire4readEv+0x24>
    21f8:	2f ef       	ldi	r18, 0xFF	; 255
    21fa:	3f ef       	ldi	r19, 0xFF	; 255
    21fc:	c9 01       	movw	r24, r18
    21fe:	08 95       	ret

00002200 <_ZN7TwoWire4peekEv>:
    2200:	e0 91 b4 06 	lds	r30, 0x06B4	; 0x8006b4 <_ZN7TwoWire13rxBufferIndexE>
    2204:	80 91 b3 06 	lds	r24, 0x06B3	; 0x8006b3 <_ZN7TwoWire14rxBufferLengthE>
    2208:	e8 17       	cp	r30, r24
    220a:	30 f4       	brcc	.+12     	; 0x2218 <_ZN7TwoWire4peekEv+0x18>
    220c:	f0 e0       	ldi	r31, 0x00	; 0
    220e:	eb 54       	subi	r30, 0x4B	; 75
    2210:	f9 4f       	sbci	r31, 0xF9	; 249
    2212:	80 81       	ld	r24, Z
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	08 95       	ret
    2218:	8f ef       	ldi	r24, 0xFF	; 255
    221a:	9f ef       	ldi	r25, 0xFF	; 255
    221c:	08 95       	ret

0000221e <_ZN7TwoWire5flushEv>:
    221e:	08 95       	ret

00002220 <_ZN7TwoWire5writeEh>:
    2220:	cf 93       	push	r28
    2222:	df 93       	push	r29
    2224:	1f 92       	push	r1
    2226:	cd b7       	in	r28, 0x3d	; 61
    2228:	de b7       	in	r29, 0x3e	; 62
    222a:	69 83       	std	Y+1, r22	; 0x01
    222c:	80 91 8f 06 	lds	r24, 0x068F	; 0x80068f <_ZN7TwoWire12transmittingE>
    2230:	88 23       	and	r24, r24
    2232:	99 f0       	breq	.+38     	; 0x225a <_ZN7TwoWire5writeEh+0x3a>
    2234:	80 91 90 06 	lds	r24, 0x0690	; 0x800690 <_ZN7TwoWire14txBufferLengthE>
    2238:	80 32       	cpi	r24, 0x20	; 32
    223a:	b0 f4       	brcc	.+44     	; 0x2268 <_ZN7TwoWire5writeEh+0x48>
    223c:	80 91 91 06 	lds	r24, 0x0691	; 0x800691 <_ZN7TwoWire13txBufferIndexE>
    2240:	e8 2f       	mov	r30, r24
    2242:	f0 e0       	ldi	r31, 0x00	; 0
    2244:	ee 56       	subi	r30, 0x6E	; 110
    2246:	f9 4f       	sbci	r31, 0xF9	; 249
    2248:	60 83       	st	Z, r22
    224a:	8f 5f       	subi	r24, 0xFF	; 255
    224c:	80 93 91 06 	sts	0x0691, r24	; 0x800691 <_ZN7TwoWire13txBufferIndexE>
    2250:	80 93 90 06 	sts	0x0690, r24	; 0x800690 <_ZN7TwoWire14txBufferLengthE>
    2254:	81 e0       	ldi	r24, 0x01	; 1
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	09 c0       	rjmp	.+18     	; 0x226c <_ZN7TwoWire5writeEh+0x4c>
    225a:	61 e0       	ldi	r22, 0x01	; 1
    225c:	ce 01       	movw	r24, r28
    225e:	01 96       	adiw	r24, 0x01	; 1
    2260:	5c de       	rcall	.-840    	; 0x1f1a <twi_transmit>
    2262:	81 e0       	ldi	r24, 0x01	; 1
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	02 c0       	rjmp	.+4      	; 0x226c <_ZN7TwoWire5writeEh+0x4c>
    2268:	80 e0       	ldi	r24, 0x00	; 0
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	0f 90       	pop	r0
    226e:	df 91       	pop	r29
    2270:	cf 91       	pop	r28
    2272:	08 95       	ret

00002274 <_ZN7TwoWire5writeEPKhj>:
    2274:	cf 92       	push	r12
    2276:	df 92       	push	r13
    2278:	ef 92       	push	r14
    227a:	ff 92       	push	r15
    227c:	0f 93       	push	r16
    227e:	1f 93       	push	r17
    2280:	cf 93       	push	r28
    2282:	df 93       	push	r29
    2284:	8c 01       	movw	r16, r24
    2286:	cb 01       	movw	r24, r22
    2288:	6a 01       	movw	r12, r20
    228a:	20 91 8f 06 	lds	r18, 0x068F	; 0x80068f <_ZN7TwoWire12transmittingE>
    228e:	22 23       	and	r18, r18
    2290:	a1 f0       	breq	.+40     	; 0x22ba <_ZN7TwoWire5writeEPKhj+0x46>
    2292:	41 15       	cp	r20, r1
    2294:	51 05       	cpc	r21, r1
    2296:	99 f0       	breq	.+38     	; 0x22be <_ZN7TwoWire5writeEPKhj+0x4a>
    2298:	eb 01       	movw	r28, r22
    229a:	7b 01       	movw	r14, r22
    229c:	e4 0e       	add	r14, r20
    229e:	f5 1e       	adc	r15, r21
    22a0:	69 91       	ld	r22, Y+
    22a2:	d8 01       	movw	r26, r16
    22a4:	ed 91       	ld	r30, X+
    22a6:	fc 91       	ld	r31, X
    22a8:	01 90       	ld	r0, Z+
    22aa:	f0 81       	ld	r31, Z
    22ac:	e0 2d       	mov	r30, r0
    22ae:	c8 01       	movw	r24, r16
    22b0:	19 95       	eicall
    22b2:	ce 15       	cp	r28, r14
    22b4:	df 05       	cpc	r29, r15
    22b6:	a1 f7       	brne	.-24     	; 0x22a0 <_ZN7TwoWire5writeEPKhj+0x2c>
    22b8:	02 c0       	rjmp	.+4      	; 0x22be <_ZN7TwoWire5writeEPKhj+0x4a>
    22ba:	64 2f       	mov	r22, r20
    22bc:	2e de       	rcall	.-932    	; 0x1f1a <twi_transmit>
    22be:	c6 01       	movw	r24, r12
    22c0:	df 91       	pop	r29
    22c2:	cf 91       	pop	r28
    22c4:	1f 91       	pop	r17
    22c6:	0f 91       	pop	r16
    22c8:	ff 90       	pop	r15
    22ca:	ef 90       	pop	r14
    22cc:	df 90       	pop	r13
    22ce:	cf 90       	pop	r12
    22d0:	08 95       	ret

000022d2 <_ZN7TwoWire17beginTransmissionEh>:
    22d2:	81 e0       	ldi	r24, 0x01	; 1
    22d4:	80 93 8f 06 	sts	0x068F, r24	; 0x80068f <_ZN7TwoWire12transmittingE>
    22d8:	60 93 b2 06 	sts	0x06B2, r22	; 0x8006b2 <_ZN7TwoWire9txAddressE>
    22dc:	10 92 91 06 	sts	0x0691, r1	; 0x800691 <_ZN7TwoWire13txBufferIndexE>
    22e0:	10 92 90 06 	sts	0x0690, r1	; 0x800690 <_ZN7TwoWire14txBufferLengthE>
    22e4:	08 95       	ret

000022e6 <_ZN7TwoWire15endTransmissionEh>:
    22e6:	0f 93       	push	r16
    22e8:	06 2f       	mov	r16, r22
    22ea:	21 e0       	ldi	r18, 0x01	; 1
    22ec:	40 91 90 06 	lds	r20, 0x0690	; 0x800690 <_ZN7TwoWire14txBufferLengthE>
    22f0:	62 e9       	ldi	r22, 0x92	; 146
    22f2:	76 e0       	ldi	r23, 0x06	; 6
    22f4:	80 91 b2 06 	lds	r24, 0x06B2	; 0x8006b2 <_ZN7TwoWire9txAddressE>
    22f8:	ad dd       	rcall	.-1190   	; 0x1e54 <twi_writeTo>
    22fa:	10 92 91 06 	sts	0x0691, r1	; 0x800691 <_ZN7TwoWire13txBufferIndexE>
    22fe:	10 92 90 06 	sts	0x0690, r1	; 0x800690 <_ZN7TwoWire14txBufferLengthE>
    2302:	10 92 8f 06 	sts	0x068F, r1	; 0x80068f <_ZN7TwoWire12transmittingE>
    2306:	0f 91       	pop	r16
    2308:	08 95       	ret

0000230a <_ZN7TwoWire11requestFromEhhmhh>:
    230a:	4f 92       	push	r4
    230c:	5f 92       	push	r5
    230e:	6f 92       	push	r6
    2310:	7f 92       	push	r7
    2312:	af 92       	push	r10
    2314:	bf 92       	push	r11
    2316:	cf 92       	push	r12
    2318:	ef 92       	push	r14
    231a:	ff 92       	push	r15
    231c:	0f 93       	push	r16
    231e:	1f 93       	push	r17
    2320:	cf 93       	push	r28
    2322:	df 93       	push	r29
    2324:	5c 01       	movw	r10, r24
    2326:	f6 2e       	mov	r15, r22
    2328:	d4 2f       	mov	r29, r20
    232a:	28 01       	movw	r4, r16
    232c:	39 01       	movw	r6, r18
    232e:	ee 20       	and	r14, r14
    2330:	39 f1       	breq	.+78     	; 0x2380 <_ZN7TwoWire11requestFromEhhmhh+0x76>
    2332:	cf df       	rcall	.-98     	; 0x22d2 <_ZN7TwoWire17beginTransmissionEh>
    2334:	8e 2d       	mov	r24, r14
    2336:	84 30       	cpi	r24, 0x04	; 4
    2338:	08 f0       	brcs	.+2      	; 0x233c <_ZN7TwoWire11requestFromEhhmhh+0x32>
    233a:	83 e0       	ldi	r24, 0x03	; 3
    233c:	cf ef       	ldi	r28, 0xFF	; 255
    233e:	c8 0f       	add	r28, r24
    2340:	88 23       	and	r24, r24
    2342:	d9 f0       	breq	.+54     	; 0x237a <_ZN7TwoWire11requestFromEhhmhh+0x70>
    2344:	8c 2f       	mov	r24, r28
    2346:	88 0f       	add	r24, r24
    2348:	88 0f       	add	r24, r24
    234a:	88 0f       	add	r24, r24
    234c:	a3 01       	movw	r20, r6
    234e:	92 01       	movw	r18, r4
    2350:	04 c0       	rjmp	.+8      	; 0x235a <_ZN7TwoWire11requestFromEhhmhh+0x50>
    2352:	56 95       	lsr	r21
    2354:	47 95       	ror	r20
    2356:	37 95       	ror	r19
    2358:	27 95       	ror	r18
    235a:	8a 95       	dec	r24
    235c:	d2 f7       	brpl	.-12     	; 0x2352 <_ZN7TwoWire11requestFromEhhmhh+0x48>
    235e:	ca 01       	movw	r24, r20
    2360:	b9 01       	movw	r22, r18
    2362:	d5 01       	movw	r26, r10
    2364:	ed 91       	ld	r30, X+
    2366:	fc 91       	ld	r31, X
    2368:	01 90       	ld	r0, Z+
    236a:	f0 81       	ld	r31, Z
    236c:	e0 2d       	mov	r30, r0
    236e:	c5 01       	movw	r24, r10
    2370:	19 95       	eicall
    2372:	8c 2f       	mov	r24, r28
    2374:	c1 50       	subi	r28, 0x01	; 1
    2376:	81 11       	cpse	r24, r1
    2378:	e5 cf       	rjmp	.-54     	; 0x2344 <_ZN7TwoWire11requestFromEhhmhh+0x3a>
    237a:	60 e0       	ldi	r22, 0x00	; 0
    237c:	c5 01       	movw	r24, r10
    237e:	b3 df       	rcall	.-154    	; 0x22e6 <_ZN7TwoWire15endTransmissionEh>
    2380:	4d 2f       	mov	r20, r29
    2382:	d1 32       	cpi	r29, 0x21	; 33
    2384:	08 f0       	brcs	.+2      	; 0x2388 <_ZN7TwoWire11requestFromEhhmhh+0x7e>
    2386:	40 e2       	ldi	r20, 0x20	; 32
    2388:	2c 2d       	mov	r18, r12
    238a:	65 eb       	ldi	r22, 0xB5	; 181
    238c:	76 e0       	ldi	r23, 0x06	; 6
    238e:	8f 2d       	mov	r24, r15
    2390:	0f dd       	rcall	.-1506   	; 0x1db0 <twi_readFrom>
    2392:	10 92 b4 06 	sts	0x06B4, r1	; 0x8006b4 <_ZN7TwoWire13rxBufferIndexE>
    2396:	80 93 b3 06 	sts	0x06B3, r24	; 0x8006b3 <_ZN7TwoWire14rxBufferLengthE>
    239a:	df 91       	pop	r29
    239c:	cf 91       	pop	r28
    239e:	1f 91       	pop	r17
    23a0:	0f 91       	pop	r16
    23a2:	ff 90       	pop	r15
    23a4:	ef 90       	pop	r14
    23a6:	cf 90       	pop	r12
    23a8:	bf 90       	pop	r11
    23aa:	af 90       	pop	r10
    23ac:	7f 90       	pop	r7
    23ae:	6f 90       	pop	r6
    23b0:	5f 90       	pop	r5
    23b2:	4f 90       	pop	r4
    23b4:	08 95       	ret

000023b6 <_ZN7TwoWire11requestFromEhhh>:
    23b6:	cf 92       	push	r12
    23b8:	ef 92       	push	r14
    23ba:	0f 93       	push	r16
    23bc:	1f 93       	push	r17
    23be:	c2 2e       	mov	r12, r18
    23c0:	e1 2c       	mov	r14, r1
    23c2:	00 e0       	ldi	r16, 0x00	; 0
    23c4:	10 e0       	ldi	r17, 0x00	; 0
    23c6:	98 01       	movw	r18, r16
    23c8:	a0 df       	rcall	.-192    	; 0x230a <_ZN7TwoWire11requestFromEhhmhh>
    23ca:	1f 91       	pop	r17
    23cc:	0f 91       	pop	r16
    23ce:	ef 90       	pop	r14
    23d0:	cf 90       	pop	r12
    23d2:	08 95       	ret

000023d4 <_ZN7TwoWire11requestFromEhh>:
    23d4:	21 e0       	ldi	r18, 0x01	; 1
    23d6:	ef cf       	rjmp	.-34     	; 0x23b6 <_ZN7TwoWire11requestFromEhhh>
    23d8:	08 95       	ret

000023da <_ZN7TwoWire15endTransmissionEv>:
    23da:	61 e0       	ldi	r22, 0x01	; 1
    23dc:	84 cf       	rjmp	.-248    	; 0x22e6 <_ZN7TwoWire15endTransmissionEh>
    23de:	08 95       	ret

000023e0 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    23e0:	80 ec       	ldi	r24, 0xC0	; 192
    23e2:	92 e0       	ldi	r25, 0x02	; 2
    23e4:	90 93 8e 06 	sts	0x068E, r25	; 0x80068e <Wire+0x1>
    23e8:	80 93 8d 06 	sts	0x068D, r24	; 0x80068d <Wire>
    23ec:	08 95       	ret

000023ee <_ZN13DigitalSensor14IsValidRequestEPKhh>:

bool Robot::RegisterDevices(){
	RegisterDevice(BtnTest); //TODO return if successful
	
	return true;
}
    23ee:	81 e0       	ldi	r24, 0x01	; 1
    23f0:	41 11       	cpse	r20, r1
    23f2:	80 e0       	ldi	r24, 0x00	; 0
    23f4:	08 95       	ret

000023f6 <_ZN13DigitalSensor15UpdateRequestedEPh>:
    23f6:	fc 01       	movw	r30, r24
    23f8:	a5 81       	ldd	r26, Z+5	; 0x05
    23fa:	b6 81       	ldd	r27, Z+6	; 0x06
    23fc:	9c 91       	ld	r25, X
    23fe:	84 81       	ldd	r24, Z+4	; 0x04
    2400:	98 23       	and	r25, r24
    2402:	21 e0       	ldi	r18, 0x01	; 1
    2404:	09 f4       	brne	.+2      	; 0x2408 <_ZN13DigitalSensor15UpdateRequestedEPh+0x12>
    2406:	20 e0       	ldi	r18, 0x00	; 0
    2408:	87 81       	ldd	r24, Z+7	; 0x07
    240a:	82 27       	eor	r24, r18
    240c:	fb 01       	movw	r30, r22
    240e:	80 83       	st	Z, r24
    2410:	81 e0       	ldi	r24, 0x01	; 1
    2412:	08 95       	ret

00002414 <_ZN7ISensor6UpdateEPKhh>:
    2414:	cf 93       	push	r28
    2416:	df 93       	push	r29
    2418:	ec 01       	movw	r28, r24
    241a:	e8 81       	ld	r30, Y
    241c:	f9 81       	ldd	r31, Y+1	; 0x01
    241e:	02 80       	ldd	r0, Z+2	; 0x02
    2420:	f3 81       	ldd	r31, Z+3	; 0x03
    2422:	e0 2d       	mov	r30, r0
    2424:	19 95       	eicall
    2426:	88 23       	and	r24, r24
    2428:	a1 f0       	breq	.+40     	; 0x2452 <_ZN7ISensor6UpdateEPKhh+0x3e>
    242a:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    242e:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    2432:	8a 81       	ldd	r24, Y+2	; 0x02
    2434:	82 83       	std	Z+2, r24	; 0x02
    2436:	bf 01       	movw	r22, r30
    2438:	6d 5f       	subi	r22, 0xFD	; 253
    243a:	7f 4f       	sbci	r23, 0xFF	; 255
    243c:	e8 81       	ld	r30, Y
    243e:	f9 81       	ldd	r31, Y+1	; 0x01
    2440:	04 80       	ldd	r0, Z+4	; 0x04
    2442:	f5 81       	ldd	r31, Z+5	; 0x05
    2444:	e0 2d       	mov	r30, r0
    2446:	ce 01       	movw	r24, r28
    2448:	19 95       	eicall
    244a:	61 e0       	ldi	r22, 0x01	; 1
    244c:	68 0f       	add	r22, r24
    244e:	83 e0       	ldi	r24, 0x03	; 3
    2450:	d0 d8       	rcall	.-3680   	; 0x15f2 <_ZN9EtherComm11SendCommandEhh>
    2452:	df 91       	pop	r29
    2454:	cf 91       	pop	r28
    2456:	08 95       	ret

00002458 <_ZN5Robot6SetLedEb>:
    2458:	88 23       	and	r24, r24
    245a:	11 f0       	breq	.+4      	; 0x2460 <_ZN5Robot6SetLedEb+0x8>
    245c:	2f 9a       	sbi	0x05, 7	; 5
    245e:	08 95       	ret
    2460:	2f 98       	cbi	0x05, 7	; 5
    2462:	08 95       	ret

00002464 <_ZN5Robot14RegisterDeviceER7ISensor>:
    2464:	fc 01       	movw	r30, r24
    2466:	22 81       	ldd	r18, Z+2	; 0x02
    2468:	30 e0       	ldi	r19, 0x00	; 0
    246a:	f9 01       	movw	r30, r18
    246c:	ee 0f       	add	r30, r30
    246e:	ff 1f       	adc	r31, r31
    2470:	e3 52       	subi	r30, 0x23	; 35
    2472:	f9 4f       	sbci	r31, 0xF9	; 249
    2474:	40 81       	ld	r20, Z
    2476:	51 81       	ldd	r21, Z+1	; 0x01
    2478:	45 2b       	or	r20, r21
    247a:	39 f4       	brne	.+14     	; 0x248a <_ZN5Robot14RegisterDeviceER7ISensor+0x26>
    247c:	22 0f       	add	r18, r18
    247e:	33 1f       	adc	r19, r19
    2480:	f9 01       	movw	r30, r18
    2482:	e3 52       	subi	r30, 0x23	; 35
    2484:	f9 4f       	sbci	r31, 0xF9	; 249
    2486:	91 83       	std	Z+1, r25	; 0x01
    2488:	80 83       	st	Z, r24
    248a:	08 95       	ret

0000248c <_ZN5Robot5beginEv>:
bool Robot::ReadTestBtn(){
	return !((TestBtnPinPort & TestBtnPin) > 0);
}

bool Robot::begin(){
	LedDDR |= LedPin;
    248c:	27 9a       	sbi	0x04, 7	; 4
IDevice* Robot::devices[NUM_DEVICES];

DigitalSensor BtnTest(0, TestBtnDDR, TestBtnPort, TestBtnPinPort, TestBtnPin);

bool Robot::RegisterDevices(){
	RegisterDevice(BtnTest); //TODO return if successful
    248e:	85 ed       	ldi	r24, 0xD5	; 213
    2490:	96 e0       	ldi	r25, 0x06	; 6
    2492:	e8 df       	rcall	.-48     	; 0x2464 <_ZN5Robot14RegisterDeviceER7ISensor>
}

bool Robot::begin(){
	LedDDR |= LedPin;
	return RegisterDevices();
}
    2494:	81 e0       	ldi	r24, 0x01	; 1
    2496:	08 95       	ret

00002498 <_GLOBAL__sub_I__ZN5Robot7devicesE>:
	}
	
	virtual void Update(const uint8_t* data, uint8_t len) = 0;
	
protected:
	IDevice(uint8_t ID) : id(ID){
    2498:	e5 ed       	ldi	r30, 0xD5	; 213
    249a:	f6 e0       	ldi	r31, 0x06	; 6
    249c:	12 82       	std	Z+2, r1	; 0x02
				//}
			}
		}
	
	protected:
		ISensor(uint8_t ID, uint8_t type) : IDevice(ID), sensorType(type) {
    249e:	81 e0       	ldi	r24, 0x01	; 1
    24a0:	83 83       	std	Z+3, r24	; 0x03

#include "../ISensor.h"

class DigitalSensor : public ISensor{
public:
	DigitalSensor(uint8_t ID, Register& DDRPort, Register& PortPort, Register& PinPort, uint8_t Pin, bool Inversed = true) : ISensor(ID, SENSOR_TYPE_DIGITAL), pin(Pin), pinPort(&PinPort), inversed(Inversed) {
    24a2:	22 ed       	ldi	r18, 0xD2	; 210
    24a4:	32 e0       	ldi	r19, 0x02	; 2
    24a6:	31 83       	std	Z+1, r19	; 0x01
    24a8:	20 83       	st	Z, r18
    24aa:	84 83       	std	Z+4, r24	; 0x04
    24ac:	2f e2       	ldi	r18, 0x2F	; 47
    24ae:	30 e0       	ldi	r19, 0x00	; 0
    24b0:	36 83       	std	Z+6, r19	; 0x06
    24b2:	25 83       	std	Z+5, r18	; 0x05
    24b4:	87 83       	std	Z+7, r24	; 0x07
		DDRPort &= ~pin; //Enable input
    24b6:	80 98       	cbi	0x10, 0	; 16
		PortPort |= pin; //Enable pullup
    24b8:	88 9a       	sbi	0x11, 0	; 17
    24ba:	08 95       	ret

000024bc <_GLOBAL__sub_I_bno>:
	setup();
	
	while(true){
		loop();
	}
    24bc:	0f 93       	push	r16
    24be:	1f 93       	push	r17
/* Set the delay between fresh samples */
#define BNO055_SAMPLERATE_DELAY_MS 100

// Check I2C device address and correct line below (by default address is 0x29 or 0x28)
//                                   id, address
Adafruit_BNO055 bno = Adafruit_BNO055(55, 0x28);
    24c0:	0d e8       	ldi	r16, 0x8D	; 141
    24c2:	16 e0       	ldi	r17, 0x06	; 6
    24c4:	28 e2       	ldi	r18, 0x28	; 40
    24c6:	47 e3       	ldi	r20, 0x37	; 55
    24c8:	50 e0       	ldi	r21, 0x00	; 0
    24ca:	60 e0       	ldi	r22, 0x00	; 0
    24cc:	70 e0       	ldi	r23, 0x00	; 0
    24ce:	8d ed       	ldi	r24, 0xDD	; 221
    24d0:	98 e0       	ldi	r25, 0x08	; 8
    24d2:	0e 94 c4 01 	call	0x388	; 0x388 <_ZN15Adafruit_BNO055C1ElhP7TwoWire>
	setup();
	
	while(true){
		loop();
	}
    24d6:	1f 91       	pop	r17
    24d8:	0f 91       	pop	r16
    24da:	08 95       	ret

000024dc <_ZN5Print5writeEPKhj>:
}

uint16_t Print::print(char c)
{
  return write(c);
}
    24dc:	cf 92       	push	r12
    24de:	df 92       	push	r13
    24e0:	ef 92       	push	r14
    24e2:	ff 92       	push	r15
    24e4:	0f 93       	push	r16
    24e6:	1f 93       	push	r17
    24e8:	cf 93       	push	r28
    24ea:	df 93       	push	r29
    24ec:	41 15       	cp	r20, r1
    24ee:	51 05       	cpc	r21, r1
    24f0:	c1 f0       	breq	.+48     	; 0x2522 <_ZN5Print5writeEPKhj+0x46>
    24f2:	6a 01       	movw	r12, r20
    24f4:	8c 01       	movw	r16, r24
    24f6:	e6 2e       	mov	r14, r22
    24f8:	f7 2e       	mov	r15, r23
    24fa:	c0 e0       	ldi	r28, 0x00	; 0
    24fc:	d0 e0       	ldi	r29, 0x00	; 0
    24fe:	d7 01       	movw	r26, r14
    2500:	6d 91       	ld	r22, X+
    2502:	7d 01       	movw	r14, r26
    2504:	d8 01       	movw	r26, r16
    2506:	ed 91       	ld	r30, X+
    2508:	fc 91       	ld	r31, X
    250a:	01 90       	ld	r0, Z+
    250c:	f0 81       	ld	r31, Z
    250e:	e0 2d       	mov	r30, r0
    2510:	c8 01       	movw	r24, r16
    2512:	19 95       	eicall
    2514:	89 2b       	or	r24, r25
    2516:	39 f0       	breq	.+14     	; 0x2526 <_ZN5Print5writeEPKhj+0x4a>
    2518:	21 96       	adiw	r28, 0x01	; 1
    251a:	cc 16       	cp	r12, r28
    251c:	dd 06       	cpc	r13, r29
    251e:	79 f7       	brne	.-34     	; 0x24fe <_ZN5Print5writeEPKhj+0x22>
    2520:	02 c0       	rjmp	.+4      	; 0x2526 <_ZN5Print5writeEPKhj+0x4a>
    2522:	c0 e0       	ldi	r28, 0x00	; 0
    2524:	d0 e0       	ldi	r29, 0x00	; 0
    2526:	ce 01       	movw	r24, r28
    2528:	df 91       	pop	r29
    252a:	cf 91       	pop	r28
    252c:	1f 91       	pop	r17
    252e:	0f 91       	pop	r16
    2530:	ff 90       	pop	r15
    2532:	ef 90       	pop	r14
    2534:	df 90       	pop	r13
    2536:	cf 90       	pop	r12
    2538:	08 95       	ret

0000253a <_ZN5Print5printEPKc>:
    253a:	61 15       	cp	r22, r1
    253c:	71 05       	cpc	r23, r1
    253e:	81 f0       	breq	.+32     	; 0x2560 <_ZN5Print5printEPKc+0x26>
    2540:	fb 01       	movw	r30, r22
    2542:	01 90       	ld	r0, Z+
    2544:	00 20       	and	r0, r0
    2546:	e9 f7       	brne	.-6      	; 0x2542 <_ZN5Print5printEPKc+0x8>
    2548:	31 97       	sbiw	r30, 0x01	; 1
    254a:	af 01       	movw	r20, r30
    254c:	46 1b       	sub	r20, r22
    254e:	57 0b       	sbc	r21, r23
    2550:	dc 01       	movw	r26, r24
    2552:	ed 91       	ld	r30, X+
    2554:	fc 91       	ld	r31, X
    2556:	02 80       	ldd	r0, Z+2	; 0x02
    2558:	f3 81       	ldd	r31, Z+3	; 0x03
    255a:	e0 2d       	mov	r30, r0
    255c:	19 95       	eicall
    255e:	08 95       	ret
    2560:	80 e0       	ldi	r24, 0x00	; 0
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	08 95       	ret

00002566 <_ZN5Print7printlnEv>:
  //void clearWriteError() { setWriteError(0); }
  
  virtual uint16_t write(uint8_t) = 0;
  uint16_t write(const char *str) {
	  if (str == NULL) return 0;
	  return write((const uint8_t *)str, strlen(str));
    2566:	dc 01       	movw	r26, r24
    2568:	ed 91       	ld	r30, X+
    256a:	fc 91       	ld	r31, X
    256c:	02 80       	ldd	r0, Z+2	; 0x02
    256e:	f3 81       	ldd	r31, Z+3	; 0x03
    2570:	e0 2d       	mov	r30, r0
    2572:	42 e0       	ldi	r20, 0x02	; 2
    2574:	50 e0       	ldi	r21, 0x00	; 0
    2576:	68 ed       	ldi	r22, 0xD8	; 216
    2578:	72 e0       	ldi	r23, 0x02	; 2
    257a:	19 95       	eicall
}
*/
uint16_t Print::println(void)
{
  return write("\r\n");
}
    257c:	08 95       	ret

0000257e <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}
*/
uint16_t Print::println(const char c[])
{
    257e:	0f 93       	push	r16
    2580:	1f 93       	push	r17
    2582:	cf 93       	push	r28
    2584:	df 93       	push	r29
    2586:	ec 01       	movw	r28, r24
  uint16_t n = print(c);
    2588:	d8 df       	rcall	.-80     	; 0x253a <_ZN5Print5printEPKc>
    258a:	8c 01       	movw	r16, r24
  n += println();
    258c:	ce 01       	movw	r24, r28
    258e:	eb df       	rcall	.-42     	; 0x2566 <_ZN5Print7printlnEv>
  return n;
}
    2590:	80 0f       	add	r24, r16
    2592:	91 1f       	adc	r25, r17
    2594:	df 91       	pop	r29
    2596:	cf 91       	pop	r28
    2598:	1f 91       	pop	r17
    259a:	0f 91       	pop	r16
    259c:	08 95       	ret

0000259e <__divsf3>:
    259e:	0c d0       	rcall	.+24     	; 0x25b8 <__divsf3x>
    25a0:	ba c0       	rjmp	.+372    	; 0x2716 <__fp_round>
    25a2:	b2 d0       	rcall	.+356    	; 0x2708 <__fp_pscB>
    25a4:	40 f0       	brcs	.+16     	; 0x25b6 <__divsf3+0x18>
    25a6:	a9 d0       	rcall	.+338    	; 0x26fa <__fp_pscA>
    25a8:	30 f0       	brcs	.+12     	; 0x25b6 <__divsf3+0x18>
    25aa:	21 f4       	brne	.+8      	; 0x25b4 <__divsf3+0x16>
    25ac:	5f 3f       	cpi	r21, 0xFF	; 255
    25ae:	19 f0       	breq	.+6      	; 0x25b6 <__divsf3+0x18>
    25b0:	9b c0       	rjmp	.+310    	; 0x26e8 <__fp_inf>
    25b2:	51 11       	cpse	r21, r1
    25b4:	e4 c0       	rjmp	.+456    	; 0x277e <__fp_szero>
    25b6:	9e c0       	rjmp	.+316    	; 0x26f4 <__fp_nan>

000025b8 <__divsf3x>:
    25b8:	bf d0       	rcall	.+382    	; 0x2738 <__fp_split3>
    25ba:	98 f3       	brcs	.-26     	; 0x25a2 <__divsf3+0x4>

000025bc <__divsf3_pse>:
    25bc:	99 23       	and	r25, r25
    25be:	c9 f3       	breq	.-14     	; 0x25b2 <__divsf3+0x14>
    25c0:	55 23       	and	r21, r21
    25c2:	b1 f3       	breq	.-20     	; 0x25b0 <__divsf3+0x12>
    25c4:	95 1b       	sub	r25, r21
    25c6:	55 0b       	sbc	r21, r21
    25c8:	bb 27       	eor	r27, r27
    25ca:	aa 27       	eor	r26, r26
    25cc:	62 17       	cp	r22, r18
    25ce:	73 07       	cpc	r23, r19
    25d0:	84 07       	cpc	r24, r20
    25d2:	38 f0       	brcs	.+14     	; 0x25e2 <__divsf3_pse+0x26>
    25d4:	9f 5f       	subi	r25, 0xFF	; 255
    25d6:	5f 4f       	sbci	r21, 0xFF	; 255
    25d8:	22 0f       	add	r18, r18
    25da:	33 1f       	adc	r19, r19
    25dc:	44 1f       	adc	r20, r20
    25de:	aa 1f       	adc	r26, r26
    25e0:	a9 f3       	breq	.-22     	; 0x25cc <__divsf3_pse+0x10>
    25e2:	33 d0       	rcall	.+102    	; 0x264a <__divsf3_pse+0x8e>
    25e4:	0e 2e       	mov	r0, r30
    25e6:	3a f0       	brmi	.+14     	; 0x25f6 <__divsf3_pse+0x3a>
    25e8:	e0 e8       	ldi	r30, 0x80	; 128
    25ea:	30 d0       	rcall	.+96     	; 0x264c <__divsf3_pse+0x90>
    25ec:	91 50       	subi	r25, 0x01	; 1
    25ee:	50 40       	sbci	r21, 0x00	; 0
    25f0:	e6 95       	lsr	r30
    25f2:	00 1c       	adc	r0, r0
    25f4:	ca f7       	brpl	.-14     	; 0x25e8 <__divsf3_pse+0x2c>
    25f6:	29 d0       	rcall	.+82     	; 0x264a <__divsf3_pse+0x8e>
    25f8:	fe 2f       	mov	r31, r30
    25fa:	27 d0       	rcall	.+78     	; 0x264a <__divsf3_pse+0x8e>
    25fc:	66 0f       	add	r22, r22
    25fe:	77 1f       	adc	r23, r23
    2600:	88 1f       	adc	r24, r24
    2602:	bb 1f       	adc	r27, r27
    2604:	26 17       	cp	r18, r22
    2606:	37 07       	cpc	r19, r23
    2608:	48 07       	cpc	r20, r24
    260a:	ab 07       	cpc	r26, r27
    260c:	b0 e8       	ldi	r27, 0x80	; 128
    260e:	09 f0       	breq	.+2      	; 0x2612 <__divsf3_pse+0x56>
    2610:	bb 0b       	sbc	r27, r27
    2612:	80 2d       	mov	r24, r0
    2614:	bf 01       	movw	r22, r30
    2616:	ff 27       	eor	r31, r31
    2618:	93 58       	subi	r25, 0x83	; 131
    261a:	5f 4f       	sbci	r21, 0xFF	; 255
    261c:	2a f0       	brmi	.+10     	; 0x2628 <__divsf3_pse+0x6c>
    261e:	9e 3f       	cpi	r25, 0xFE	; 254
    2620:	51 05       	cpc	r21, r1
    2622:	68 f0       	brcs	.+26     	; 0x263e <__divsf3_pse+0x82>
    2624:	61 c0       	rjmp	.+194    	; 0x26e8 <__fp_inf>
    2626:	ab c0       	rjmp	.+342    	; 0x277e <__fp_szero>
    2628:	5f 3f       	cpi	r21, 0xFF	; 255
    262a:	ec f3       	brlt	.-6      	; 0x2626 <__divsf3_pse+0x6a>
    262c:	98 3e       	cpi	r25, 0xE8	; 232
    262e:	dc f3       	brlt	.-10     	; 0x2626 <__divsf3_pse+0x6a>
    2630:	86 95       	lsr	r24
    2632:	77 95       	ror	r23
    2634:	67 95       	ror	r22
    2636:	b7 95       	ror	r27
    2638:	f7 95       	ror	r31
    263a:	9f 5f       	subi	r25, 0xFF	; 255
    263c:	c9 f7       	brne	.-14     	; 0x2630 <__divsf3_pse+0x74>
    263e:	88 0f       	add	r24, r24
    2640:	91 1d       	adc	r25, r1
    2642:	96 95       	lsr	r25
    2644:	87 95       	ror	r24
    2646:	97 f9       	bld	r25, 7
    2648:	08 95       	ret
    264a:	e1 e0       	ldi	r30, 0x01	; 1
    264c:	66 0f       	add	r22, r22
    264e:	77 1f       	adc	r23, r23
    2650:	88 1f       	adc	r24, r24
    2652:	bb 1f       	adc	r27, r27
    2654:	62 17       	cp	r22, r18
    2656:	73 07       	cpc	r23, r19
    2658:	84 07       	cpc	r24, r20
    265a:	ba 07       	cpc	r27, r26
    265c:	20 f0       	brcs	.+8      	; 0x2666 <__divsf3_pse+0xaa>
    265e:	62 1b       	sub	r22, r18
    2660:	73 0b       	sbc	r23, r19
    2662:	84 0b       	sbc	r24, r20
    2664:	ba 0b       	sbc	r27, r26
    2666:	ee 1f       	adc	r30, r30
    2668:	88 f7       	brcc	.-30     	; 0x264c <__divsf3_pse+0x90>
    266a:	e0 95       	com	r30
    266c:	08 95       	ret

0000266e <__floatunsisf>:
    266e:	e8 94       	clt
    2670:	09 c0       	rjmp	.+18     	; 0x2684 <__floatsisf+0x12>

00002672 <__floatsisf>:
    2672:	97 fb       	bst	r25, 7
    2674:	3e f4       	brtc	.+14     	; 0x2684 <__floatsisf+0x12>
    2676:	90 95       	com	r25
    2678:	80 95       	com	r24
    267a:	70 95       	com	r23
    267c:	61 95       	neg	r22
    267e:	7f 4f       	sbci	r23, 0xFF	; 255
    2680:	8f 4f       	sbci	r24, 0xFF	; 255
    2682:	9f 4f       	sbci	r25, 0xFF	; 255
    2684:	99 23       	and	r25, r25
    2686:	a9 f0       	breq	.+42     	; 0x26b2 <__floatsisf+0x40>
    2688:	f9 2f       	mov	r31, r25
    268a:	96 e9       	ldi	r25, 0x96	; 150
    268c:	bb 27       	eor	r27, r27
    268e:	93 95       	inc	r25
    2690:	f6 95       	lsr	r31
    2692:	87 95       	ror	r24
    2694:	77 95       	ror	r23
    2696:	67 95       	ror	r22
    2698:	b7 95       	ror	r27
    269a:	f1 11       	cpse	r31, r1
    269c:	f8 cf       	rjmp	.-16     	; 0x268e <__floatsisf+0x1c>
    269e:	fa f4       	brpl	.+62     	; 0x26de <__floatsisf+0x6c>
    26a0:	bb 0f       	add	r27, r27
    26a2:	11 f4       	brne	.+4      	; 0x26a8 <__floatsisf+0x36>
    26a4:	60 ff       	sbrs	r22, 0
    26a6:	1b c0       	rjmp	.+54     	; 0x26de <__floatsisf+0x6c>
    26a8:	6f 5f       	subi	r22, 0xFF	; 255
    26aa:	7f 4f       	sbci	r23, 0xFF	; 255
    26ac:	8f 4f       	sbci	r24, 0xFF	; 255
    26ae:	9f 4f       	sbci	r25, 0xFF	; 255
    26b0:	16 c0       	rjmp	.+44     	; 0x26de <__floatsisf+0x6c>
    26b2:	88 23       	and	r24, r24
    26b4:	11 f0       	breq	.+4      	; 0x26ba <__floatsisf+0x48>
    26b6:	96 e9       	ldi	r25, 0x96	; 150
    26b8:	11 c0       	rjmp	.+34     	; 0x26dc <__floatsisf+0x6a>
    26ba:	77 23       	and	r23, r23
    26bc:	21 f0       	breq	.+8      	; 0x26c6 <__floatsisf+0x54>
    26be:	9e e8       	ldi	r25, 0x8E	; 142
    26c0:	87 2f       	mov	r24, r23
    26c2:	76 2f       	mov	r23, r22
    26c4:	05 c0       	rjmp	.+10     	; 0x26d0 <__floatsisf+0x5e>
    26c6:	66 23       	and	r22, r22
    26c8:	71 f0       	breq	.+28     	; 0x26e6 <__floatsisf+0x74>
    26ca:	96 e8       	ldi	r25, 0x86	; 134
    26cc:	86 2f       	mov	r24, r22
    26ce:	70 e0       	ldi	r23, 0x00	; 0
    26d0:	60 e0       	ldi	r22, 0x00	; 0
    26d2:	2a f0       	brmi	.+10     	; 0x26de <__floatsisf+0x6c>
    26d4:	9a 95       	dec	r25
    26d6:	66 0f       	add	r22, r22
    26d8:	77 1f       	adc	r23, r23
    26da:	88 1f       	adc	r24, r24
    26dc:	da f7       	brpl	.-10     	; 0x26d4 <__floatsisf+0x62>
    26de:	88 0f       	add	r24, r24
    26e0:	96 95       	lsr	r25
    26e2:	87 95       	ror	r24
    26e4:	97 f9       	bld	r25, 7
    26e6:	08 95       	ret

000026e8 <__fp_inf>:
    26e8:	97 f9       	bld	r25, 7
    26ea:	9f 67       	ori	r25, 0x7F	; 127
    26ec:	80 e8       	ldi	r24, 0x80	; 128
    26ee:	70 e0       	ldi	r23, 0x00	; 0
    26f0:	60 e0       	ldi	r22, 0x00	; 0
    26f2:	08 95       	ret

000026f4 <__fp_nan>:
    26f4:	9f ef       	ldi	r25, 0xFF	; 255
    26f6:	80 ec       	ldi	r24, 0xC0	; 192
    26f8:	08 95       	ret

000026fa <__fp_pscA>:
    26fa:	00 24       	eor	r0, r0
    26fc:	0a 94       	dec	r0
    26fe:	16 16       	cp	r1, r22
    2700:	17 06       	cpc	r1, r23
    2702:	18 06       	cpc	r1, r24
    2704:	09 06       	cpc	r0, r25
    2706:	08 95       	ret

00002708 <__fp_pscB>:
    2708:	00 24       	eor	r0, r0
    270a:	0a 94       	dec	r0
    270c:	12 16       	cp	r1, r18
    270e:	13 06       	cpc	r1, r19
    2710:	14 06       	cpc	r1, r20
    2712:	05 06       	cpc	r0, r21
    2714:	08 95       	ret

00002716 <__fp_round>:
    2716:	09 2e       	mov	r0, r25
    2718:	03 94       	inc	r0
    271a:	00 0c       	add	r0, r0
    271c:	11 f4       	brne	.+4      	; 0x2722 <__fp_round+0xc>
    271e:	88 23       	and	r24, r24
    2720:	52 f0       	brmi	.+20     	; 0x2736 <__fp_round+0x20>
    2722:	bb 0f       	add	r27, r27
    2724:	40 f4       	brcc	.+16     	; 0x2736 <__fp_round+0x20>
    2726:	bf 2b       	or	r27, r31
    2728:	11 f4       	brne	.+4      	; 0x272e <__fp_round+0x18>
    272a:	60 ff       	sbrs	r22, 0
    272c:	04 c0       	rjmp	.+8      	; 0x2736 <__fp_round+0x20>
    272e:	6f 5f       	subi	r22, 0xFF	; 255
    2730:	7f 4f       	sbci	r23, 0xFF	; 255
    2732:	8f 4f       	sbci	r24, 0xFF	; 255
    2734:	9f 4f       	sbci	r25, 0xFF	; 255
    2736:	08 95       	ret

00002738 <__fp_split3>:
    2738:	57 fd       	sbrc	r21, 7
    273a:	90 58       	subi	r25, 0x80	; 128
    273c:	44 0f       	add	r20, r20
    273e:	55 1f       	adc	r21, r21
    2740:	59 f0       	breq	.+22     	; 0x2758 <__fp_splitA+0x10>
    2742:	5f 3f       	cpi	r21, 0xFF	; 255
    2744:	71 f0       	breq	.+28     	; 0x2762 <__fp_splitA+0x1a>
    2746:	47 95       	ror	r20

00002748 <__fp_splitA>:
    2748:	88 0f       	add	r24, r24
    274a:	97 fb       	bst	r25, 7
    274c:	99 1f       	adc	r25, r25
    274e:	61 f0       	breq	.+24     	; 0x2768 <__fp_splitA+0x20>
    2750:	9f 3f       	cpi	r25, 0xFF	; 255
    2752:	79 f0       	breq	.+30     	; 0x2772 <__fp_splitA+0x2a>
    2754:	87 95       	ror	r24
    2756:	08 95       	ret
    2758:	12 16       	cp	r1, r18
    275a:	13 06       	cpc	r1, r19
    275c:	14 06       	cpc	r1, r20
    275e:	55 1f       	adc	r21, r21
    2760:	f2 cf       	rjmp	.-28     	; 0x2746 <__fp_split3+0xe>
    2762:	46 95       	lsr	r20
    2764:	f1 df       	rcall	.-30     	; 0x2748 <__fp_splitA>
    2766:	08 c0       	rjmp	.+16     	; 0x2778 <__fp_splitA+0x30>
    2768:	16 16       	cp	r1, r22
    276a:	17 06       	cpc	r1, r23
    276c:	18 06       	cpc	r1, r24
    276e:	99 1f       	adc	r25, r25
    2770:	f1 cf       	rjmp	.-30     	; 0x2754 <__fp_splitA+0xc>
    2772:	86 95       	lsr	r24
    2774:	71 05       	cpc	r23, r1
    2776:	61 05       	cpc	r22, r1
    2778:	08 94       	sec
    277a:	08 95       	ret

0000277c <__fp_zero>:
    277c:	e8 94       	clt

0000277e <__fp_szero>:
    277e:	bb 27       	eor	r27, r27
    2780:	66 27       	eor	r22, r22
    2782:	77 27       	eor	r23, r23
    2784:	cb 01       	movw	r24, r22
    2786:	97 f9       	bld	r25, 7
    2788:	08 95       	ret

0000278a <__mulsf3>:
    278a:	0b d0       	rcall	.+22     	; 0x27a2 <__mulsf3x>
    278c:	c4 cf       	rjmp	.-120    	; 0x2716 <__fp_round>
    278e:	b5 df       	rcall	.-150    	; 0x26fa <__fp_pscA>
    2790:	28 f0       	brcs	.+10     	; 0x279c <__mulsf3+0x12>
    2792:	ba df       	rcall	.-140    	; 0x2708 <__fp_pscB>
    2794:	18 f0       	brcs	.+6      	; 0x279c <__mulsf3+0x12>
    2796:	95 23       	and	r25, r21
    2798:	09 f0       	breq	.+2      	; 0x279c <__mulsf3+0x12>
    279a:	a6 cf       	rjmp	.-180    	; 0x26e8 <__fp_inf>
    279c:	ab cf       	rjmp	.-170    	; 0x26f4 <__fp_nan>
    279e:	11 24       	eor	r1, r1
    27a0:	ee cf       	rjmp	.-36     	; 0x277e <__fp_szero>

000027a2 <__mulsf3x>:
    27a2:	ca df       	rcall	.-108    	; 0x2738 <__fp_split3>
    27a4:	a0 f3       	brcs	.-24     	; 0x278e <__mulsf3+0x4>

000027a6 <__mulsf3_pse>:
    27a6:	95 9f       	mul	r25, r21
    27a8:	d1 f3       	breq	.-12     	; 0x279e <__mulsf3+0x14>
    27aa:	95 0f       	add	r25, r21
    27ac:	50 e0       	ldi	r21, 0x00	; 0
    27ae:	55 1f       	adc	r21, r21
    27b0:	62 9f       	mul	r22, r18
    27b2:	f0 01       	movw	r30, r0
    27b4:	72 9f       	mul	r23, r18
    27b6:	bb 27       	eor	r27, r27
    27b8:	f0 0d       	add	r31, r0
    27ba:	b1 1d       	adc	r27, r1
    27bc:	63 9f       	mul	r22, r19
    27be:	aa 27       	eor	r26, r26
    27c0:	f0 0d       	add	r31, r0
    27c2:	b1 1d       	adc	r27, r1
    27c4:	aa 1f       	adc	r26, r26
    27c6:	64 9f       	mul	r22, r20
    27c8:	66 27       	eor	r22, r22
    27ca:	b0 0d       	add	r27, r0
    27cc:	a1 1d       	adc	r26, r1
    27ce:	66 1f       	adc	r22, r22
    27d0:	82 9f       	mul	r24, r18
    27d2:	22 27       	eor	r18, r18
    27d4:	b0 0d       	add	r27, r0
    27d6:	a1 1d       	adc	r26, r1
    27d8:	62 1f       	adc	r22, r18
    27da:	73 9f       	mul	r23, r19
    27dc:	b0 0d       	add	r27, r0
    27de:	a1 1d       	adc	r26, r1
    27e0:	62 1f       	adc	r22, r18
    27e2:	83 9f       	mul	r24, r19
    27e4:	a0 0d       	add	r26, r0
    27e6:	61 1d       	adc	r22, r1
    27e8:	22 1f       	adc	r18, r18
    27ea:	74 9f       	mul	r23, r20
    27ec:	33 27       	eor	r19, r19
    27ee:	a0 0d       	add	r26, r0
    27f0:	61 1d       	adc	r22, r1
    27f2:	23 1f       	adc	r18, r19
    27f4:	84 9f       	mul	r24, r20
    27f6:	60 0d       	add	r22, r0
    27f8:	21 1d       	adc	r18, r1
    27fa:	82 2f       	mov	r24, r18
    27fc:	76 2f       	mov	r23, r22
    27fe:	6a 2f       	mov	r22, r26
    2800:	11 24       	eor	r1, r1
    2802:	9f 57       	subi	r25, 0x7F	; 127
    2804:	50 40       	sbci	r21, 0x00	; 0
    2806:	8a f0       	brmi	.+34     	; 0x282a <__mulsf3_pse+0x84>
    2808:	e1 f0       	breq	.+56     	; 0x2842 <__mulsf3_pse+0x9c>
    280a:	88 23       	and	r24, r24
    280c:	4a f0       	brmi	.+18     	; 0x2820 <__mulsf3_pse+0x7a>
    280e:	ee 0f       	add	r30, r30
    2810:	ff 1f       	adc	r31, r31
    2812:	bb 1f       	adc	r27, r27
    2814:	66 1f       	adc	r22, r22
    2816:	77 1f       	adc	r23, r23
    2818:	88 1f       	adc	r24, r24
    281a:	91 50       	subi	r25, 0x01	; 1
    281c:	50 40       	sbci	r21, 0x00	; 0
    281e:	a9 f7       	brne	.-22     	; 0x280a <__mulsf3_pse+0x64>
    2820:	9e 3f       	cpi	r25, 0xFE	; 254
    2822:	51 05       	cpc	r21, r1
    2824:	70 f0       	brcs	.+28     	; 0x2842 <__mulsf3_pse+0x9c>
    2826:	60 cf       	rjmp	.-320    	; 0x26e8 <__fp_inf>
    2828:	aa cf       	rjmp	.-172    	; 0x277e <__fp_szero>
    282a:	5f 3f       	cpi	r21, 0xFF	; 255
    282c:	ec f3       	brlt	.-6      	; 0x2828 <__mulsf3_pse+0x82>
    282e:	98 3e       	cpi	r25, 0xE8	; 232
    2830:	dc f3       	brlt	.-10     	; 0x2828 <__mulsf3_pse+0x82>
    2832:	86 95       	lsr	r24
    2834:	77 95       	ror	r23
    2836:	67 95       	ror	r22
    2838:	b7 95       	ror	r27
    283a:	f7 95       	ror	r31
    283c:	e7 95       	ror	r30
    283e:	9f 5f       	subi	r25, 0xFF	; 255
    2840:	c1 f7       	brne	.-16     	; 0x2832 <__mulsf3_pse+0x8c>
    2842:	fe 2b       	or	r31, r30
    2844:	88 0f       	add	r24, r24
    2846:	91 1d       	adc	r25, r1
    2848:	96 95       	lsr	r25
    284a:	87 95       	ror	r24
    284c:	97 f9       	bld	r25, 7
    284e:	08 95       	ret

00002850 <__udivmodsi4>:
    2850:	a1 e2       	ldi	r26, 0x21	; 33
    2852:	1a 2e       	mov	r1, r26
    2854:	aa 1b       	sub	r26, r26
    2856:	bb 1b       	sub	r27, r27
    2858:	fd 01       	movw	r30, r26
    285a:	0d c0       	rjmp	.+26     	; 0x2876 <__udivmodsi4_ep>

0000285c <__udivmodsi4_loop>:
    285c:	aa 1f       	adc	r26, r26
    285e:	bb 1f       	adc	r27, r27
    2860:	ee 1f       	adc	r30, r30
    2862:	ff 1f       	adc	r31, r31
    2864:	a2 17       	cp	r26, r18
    2866:	b3 07       	cpc	r27, r19
    2868:	e4 07       	cpc	r30, r20
    286a:	f5 07       	cpc	r31, r21
    286c:	20 f0       	brcs	.+8      	; 0x2876 <__udivmodsi4_ep>
    286e:	a2 1b       	sub	r26, r18
    2870:	b3 0b       	sbc	r27, r19
    2872:	e4 0b       	sbc	r30, r20
    2874:	f5 0b       	sbc	r31, r21

00002876 <__udivmodsi4_ep>:
    2876:	66 1f       	adc	r22, r22
    2878:	77 1f       	adc	r23, r23
    287a:	88 1f       	adc	r24, r24
    287c:	99 1f       	adc	r25, r25
    287e:	1a 94       	dec	r1
    2880:	69 f7       	brne	.-38     	; 0x285c <__udivmodsi4_loop>
    2882:	60 95       	com	r22
    2884:	70 95       	com	r23
    2886:	80 95       	com	r24
    2888:	90 95       	com	r25
    288a:	9b 01       	movw	r18, r22
    288c:	ac 01       	movw	r20, r24
    288e:	bd 01       	movw	r22, r26
    2890:	cf 01       	movw	r24, r30
    2892:	08 95       	ret

00002894 <__tablejump2__>:
    2894:	ee 0f       	add	r30, r30
    2896:	ff 1f       	adc	r31, r31
    2898:	88 1f       	adc	r24, r24
    289a:	8b bf       	out	0x3b, r24	; 59
    289c:	07 90       	elpm	r0, Z+
    289e:	f6 91       	elpm	r31, Z
    28a0:	e0 2d       	mov	r30, r0
    28a2:	19 94       	eijmp

000028a4 <memcpy_P>:
    28a4:	fb 01       	movw	r30, r22
    28a6:	dc 01       	movw	r26, r24
    28a8:	02 c0       	rjmp	.+4      	; 0x28ae <memcpy_P+0xa>
    28aa:	05 90       	lpm	r0, Z+
    28ac:	0d 92       	st	X+, r0
    28ae:	41 50       	subi	r20, 0x01	; 1
    28b0:	50 40       	sbci	r21, 0x00	; 0
    28b2:	d8 f7       	brcc	.-10     	; 0x28aa <memcpy_P+0x6>
    28b4:	08 95       	ret

000028b6 <memcmp>:
    28b6:	fb 01       	movw	r30, r22
    28b8:	dc 01       	movw	r26, r24
    28ba:	04 c0       	rjmp	.+8      	; 0x28c4 <memcmp+0xe>
    28bc:	8d 91       	ld	r24, X+
    28be:	01 90       	ld	r0, Z+
    28c0:	80 19       	sub	r24, r0
    28c2:	21 f4       	brne	.+8      	; 0x28cc <memcmp+0x16>
    28c4:	41 50       	subi	r20, 0x01	; 1
    28c6:	50 40       	sbci	r21, 0x00	; 0
    28c8:	c8 f7       	brcc	.-14     	; 0x28bc <memcmp+0x6>
    28ca:	88 1b       	sub	r24, r24
    28cc:	99 0b       	sbc	r25, r25
    28ce:	08 95       	ret

000028d0 <strncpy>:
    28d0:	fb 01       	movw	r30, r22
    28d2:	dc 01       	movw	r26, r24
    28d4:	41 50       	subi	r20, 0x01	; 1
    28d6:	50 40       	sbci	r21, 0x00	; 0
    28d8:	48 f0       	brcs	.+18     	; 0x28ec <strncpy+0x1c>
    28da:	01 90       	ld	r0, Z+
    28dc:	0d 92       	st	X+, r0
    28de:	00 20       	and	r0, r0
    28e0:	c9 f7       	brne	.-14     	; 0x28d4 <strncpy+0x4>
    28e2:	01 c0       	rjmp	.+2      	; 0x28e6 <strncpy+0x16>
    28e4:	1d 92       	st	X+, r1
    28e6:	41 50       	subi	r20, 0x01	; 1
    28e8:	50 40       	sbci	r21, 0x00	; 0
    28ea:	e0 f7       	brcc	.-8      	; 0x28e4 <strncpy+0x14>
    28ec:	08 95       	ret

000028ee <_exit>:
    28ee:	f8 94       	cli

000028f0 <__stop_program>:
    28f0:	ff cf       	rjmp	.-2      	; 0x28f0 <__stop_program>
