
RovController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000014a  00800200  00004966  000049fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004966  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000006d4  0080034a  0080034a  00004b44  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004b44  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004b74  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000aa0  00000000  00000000  00004bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00017928  00000000  00000000  00005654  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000057fb  00000000  00000000  0001cf7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000645a  00000000  00000000  00022777  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002174  00000000  00000000  00028bd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00006785  00000000  00000000  0002ad48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b887  00000000  00000000  000314cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000009e0  00000000  00000000  0003cd54  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4f c1       	rjmp	.+670    	; 0x2a0 <__ctors_end>
       2:	00 00       	nop
       4:	7e c1       	rjmp	.+764    	; 0x302 <__bad_interrupt>
       6:	00 00       	nop
       8:	7c c1       	rjmp	.+760    	; 0x302 <__bad_interrupt>
       a:	00 00       	nop
       c:	7a c1       	rjmp	.+756    	; 0x302 <__bad_interrupt>
       e:	00 00       	nop
      10:	78 c1       	rjmp	.+752    	; 0x302 <__bad_interrupt>
      12:	00 00       	nop
      14:	76 c1       	rjmp	.+748    	; 0x302 <__bad_interrupt>
      16:	00 00       	nop
      18:	74 c1       	rjmp	.+744    	; 0x302 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	72 c1       	rjmp	.+740    	; 0x302 <__bad_interrupt>
      1e:	00 00       	nop
      20:	70 c1       	rjmp	.+736    	; 0x302 <__bad_interrupt>
      22:	00 00       	nop
      24:	6e c1       	rjmp	.+732    	; 0x302 <__bad_interrupt>
      26:	00 00       	nop
      28:	6c c1       	rjmp	.+728    	; 0x302 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	6a c1       	rjmp	.+724    	; 0x302 <__bad_interrupt>
      2e:	00 00       	nop
      30:	68 c1       	rjmp	.+720    	; 0x302 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 25 1a 	jmp	0x344a	; 0x344a <__vector_13>
      38:	64 c1       	rjmp	.+712    	; 0x302 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	62 c1       	rjmp	.+708    	; 0x302 <__bad_interrupt>
      3e:	00 00       	nop
      40:	60 c1       	rjmp	.+704    	; 0x302 <__bad_interrupt>
      42:	00 00       	nop
      44:	5e c1       	rjmp	.+700    	; 0x302 <__bad_interrupt>
      46:	00 00       	nop
      48:	5c c1       	rjmp	.+696    	; 0x302 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	5a c1       	rjmp	.+692    	; 0x302 <__bad_interrupt>
      4e:	00 00       	nop
      50:	58 c1       	rjmp	.+688    	; 0x302 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 fc 19 	jmp	0x33f8	; 0x33f8 <__vector_21>
      58:	54 c1       	rjmp	.+680    	; 0x302 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	52 c1       	rjmp	.+676    	; 0x302 <__bad_interrupt>
      5e:	00 00       	nop
      60:	50 c1       	rjmp	.+672    	; 0x302 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 36 16 	jmp	0x2c6c	; 0x2c6c <__vector_25>
      68:	0c 94 72 16 	jmp	0x2ce4	; 0x2ce4 <__vector_26>
      6c:	4a c1       	rjmp	.+660    	; 0x302 <__bad_interrupt>
      6e:	00 00       	nop
      70:	48 c1       	rjmp	.+656    	; 0x302 <__bad_interrupt>
      72:	00 00       	nop
      74:	46 c1       	rjmp	.+652    	; 0x302 <__bad_interrupt>
      76:	00 00       	nop
      78:	44 c1       	rjmp	.+648    	; 0x302 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	42 c1       	rjmp	.+644    	; 0x302 <__bad_interrupt>
      7e:	00 00       	nop
      80:	40 c1       	rjmp	.+640    	; 0x302 <__bad_interrupt>
      82:	00 00       	nop
      84:	3e c1       	rjmp	.+636    	; 0x302 <__bad_interrupt>
      86:	00 00       	nop
      88:	3c c1       	rjmp	.+632    	; 0x302 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	3a c1       	rjmp	.+628    	; 0x302 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 be 16 	jmp	0x2d7c	; 0x2d7c <__vector_36>
      94:	0c 94 fa 16 	jmp	0x2df4	; 0x2df4 <__vector_37>
      98:	34 c1       	rjmp	.+616    	; 0x302 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 8e 1b 	jmp	0x371c	; 0x371c <__vector_39>
      a0:	30 c1       	rjmp	.+608    	; 0x302 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	2e c1       	rjmp	.+604    	; 0x302 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	2c c1       	rjmp	.+600    	; 0x302 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	2a c1       	rjmp	.+596    	; 0x302 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	28 c1       	rjmp	.+592    	; 0x302 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	26 c1       	rjmp	.+588    	; 0x302 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	24 c1       	rjmp	.+584    	; 0x302 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	22 c1       	rjmp	.+580    	; 0x302 <__bad_interrupt>
      be:	00 00       	nop
      c0:	20 c1       	rjmp	.+576    	; 0x302 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	1e c1       	rjmp	.+572    	; 0x302 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	1c c1       	rjmp	.+568    	; 0x302 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 46 17 	jmp	0x2e8c	; 0x2e8c <__vector_51>
      d0:	0c 94 82 17 	jmp	0x2f04	; 0x2f04 <__vector_52>
      d4:	16 c1       	rjmp	.+556    	; 0x302 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 ce 17 	jmp	0x2f9c	; 0x2f9c <__vector_54>
      dc:	0c 94 0a 18 	jmp	0x3014	; 0x3014 <__vector_55>
      e0:	10 c1       	rjmp	.+544    	; 0x302 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	95 1c       	adc	r9, r5
      e6:	98 1c       	adc	r9, r8
      e8:	98 1c       	adc	r9, r8
      ea:	98 1c       	adc	r9, r8
      ec:	98 1c       	adc	r9, r8
      ee:	98 1c       	adc	r9, r8
      f0:	98 1c       	adc	r9, r8
      f2:	98 1c       	adc	r9, r8
      f4:	b0 1b       	sub	r27, r16
      f6:	98 1c       	adc	r9, r8
      f8:	98 1c       	adc	r9, r8
      fa:	98 1c       	adc	r9, r8
      fc:	98 1c       	adc	r9, r8
      fe:	98 1c       	adc	r9, r8
     100:	98 1c       	adc	r9, r8
     102:	98 1c       	adc	r9, r8
     104:	b0 1b       	sub	r27, r16
     106:	98 1c       	adc	r9, r8
     108:	98 1c       	adc	r9, r8
     10a:	98 1c       	adc	r9, r8
     10c:	98 1c       	adc	r9, r8
     10e:	98 1c       	adc	r9, r8
     110:	98 1c       	adc	r9, r8
     112:	98 1c       	adc	r9, r8
     114:	b8 1b       	sub	r27, r24
     116:	98 1c       	adc	r9, r8
     118:	98 1c       	adc	r9, r8
     11a:	98 1c       	adc	r9, r8
     11c:	98 1c       	adc	r9, r8
     11e:	98 1c       	adc	r9, r8
     120:	98 1c       	adc	r9, r8
     122:	98 1c       	adc	r9, r8
     124:	dd 1b       	sub	r29, r29
     126:	98 1c       	adc	r9, r8
     128:	98 1c       	adc	r9, r8
     12a:	98 1c       	adc	r9, r8
     12c:	98 1c       	adc	r9, r8
     12e:	98 1c       	adc	r9, r8
     130:	98 1c       	adc	r9, r8
     132:	98 1c       	adc	r9, r8
     134:	b8 1b       	sub	r27, r24
     136:	98 1c       	adc	r9, r8
     138:	98 1c       	adc	r9, r8
     13a:	98 1c       	adc	r9, r8
     13c:	98 1c       	adc	r9, r8
     13e:	98 1c       	adc	r9, r8
     140:	98 1c       	adc	r9, r8
     142:	98 1c       	adc	r9, r8
     144:	e2 1b       	sub	r30, r18
     146:	98 1c       	adc	r9, r8
     148:	98 1c       	adc	r9, r8
     14a:	98 1c       	adc	r9, r8
     14c:	98 1c       	adc	r9, r8
     14e:	98 1c       	adc	r9, r8
     150:	98 1c       	adc	r9, r8
     152:	98 1c       	adc	r9, r8
     154:	e7 1b       	sub	r30, r23
     156:	98 1c       	adc	r9, r8
     158:	98 1c       	adc	r9, r8
     15a:	98 1c       	adc	r9, r8
     15c:	98 1c       	adc	r9, r8
     15e:	98 1c       	adc	r9, r8
     160:	98 1c       	adc	r9, r8
     162:	98 1c       	adc	r9, r8
     164:	f8 1b       	sub	r31, r24
     166:	98 1c       	adc	r9, r8
     168:	98 1c       	adc	r9, r8
     16a:	98 1c       	adc	r9, r8
     16c:	98 1c       	adc	r9, r8
     16e:	98 1c       	adc	r9, r8
     170:	98 1c       	adc	r9, r8
     172:	98 1c       	adc	r9, r8
     174:	21 1c       	adc	r2, r1
     176:	98 1c       	adc	r9, r8
     178:	98 1c       	adc	r9, r8
     17a:	98 1c       	adc	r9, r8
     17c:	98 1c       	adc	r9, r8
     17e:	98 1c       	adc	r9, r8
     180:	98 1c       	adc	r9, r8
     182:	98 1c       	adc	r9, r8
     184:	ec 1b       	sub	r30, r28
     186:	98 1c       	adc	r9, r8
     188:	98 1c       	adc	r9, r8
     18a:	98 1c       	adc	r9, r8
     18c:	98 1c       	adc	r9, r8
     18e:	98 1c       	adc	r9, r8
     190:	98 1c       	adc	r9, r8
     192:	98 1c       	adc	r9, r8
     194:	06 1c       	adc	r0, r6
     196:	98 1c       	adc	r9, r8
     198:	98 1c       	adc	r9, r8
     19a:	98 1c       	adc	r9, r8
     19c:	98 1c       	adc	r9, r8
     19e:	98 1c       	adc	r9, r8
     1a0:	98 1c       	adc	r9, r8
     1a2:	98 1c       	adc	r9, r8
     1a4:	23 1c       	adc	r2, r3
     1a6:	98 1c       	adc	r9, r8
     1a8:	98 1c       	adc	r9, r8
     1aa:	98 1c       	adc	r9, r8
     1ac:	98 1c       	adc	r9, r8
     1ae:	98 1c       	adc	r9, r8
     1b0:	98 1c       	adc	r9, r8
     1b2:	98 1c       	adc	r9, r8
     1b4:	23 1c       	adc	r2, r3
     1b6:	98 1c       	adc	r9, r8
     1b8:	98 1c       	adc	r9, r8
     1ba:	98 1c       	adc	r9, r8
     1bc:	98 1c       	adc	r9, r8
     1be:	98 1c       	adc	r9, r8
     1c0:	98 1c       	adc	r9, r8
     1c2:	98 1c       	adc	r9, r8
     1c4:	23 1c       	adc	r2, r3
     1c6:	98 1c       	adc	r9, r8
     1c8:	98 1c       	adc	r9, r8
     1ca:	98 1c       	adc	r9, r8
     1cc:	98 1c       	adc	r9, r8
     1ce:	98 1c       	adc	r9, r8
     1d0:	98 1c       	adc	r9, r8
     1d2:	98 1c       	adc	r9, r8
     1d4:	23 1c       	adc	r2, r3
     1d6:	98 1c       	adc	r9, r8
     1d8:	98 1c       	adc	r9, r8
     1da:	98 1c       	adc	r9, r8
     1dc:	98 1c       	adc	r9, r8
     1de:	98 1c       	adc	r9, r8
     1e0:	98 1c       	adc	r9, r8
     1e2:	98 1c       	adc	r9, r8
     1e4:	2c 1c       	adc	r2, r12
     1e6:	98 1c       	adc	r9, r8
     1e8:	98 1c       	adc	r9, r8
     1ea:	98 1c       	adc	r9, r8
     1ec:	98 1c       	adc	r9, r8
     1ee:	98 1c       	adc	r9, r8
     1f0:	98 1c       	adc	r9, r8
     1f2:	98 1c       	adc	r9, r8
     1f4:	5c 1c       	adc	r5, r12
     1f6:	98 1c       	adc	r9, r8
     1f8:	98 1c       	adc	r9, r8
     1fa:	98 1c       	adc	r9, r8
     1fc:	98 1c       	adc	r9, r8
     1fe:	98 1c       	adc	r9, r8
     200:	98 1c       	adc	r9, r8
     202:	98 1c       	adc	r9, r8
     204:	2c 1c       	adc	r2, r12
     206:	98 1c       	adc	r9, r8
     208:	98 1c       	adc	r9, r8
     20a:	98 1c       	adc	r9, r8
     20c:	98 1c       	adc	r9, r8
     20e:	98 1c       	adc	r9, r8
     210:	98 1c       	adc	r9, r8
     212:	98 1c       	adc	r9, r8
     214:	5c 1c       	adc	r5, r12
     216:	98 1c       	adc	r9, r8
     218:	98 1c       	adc	r9, r8
     21a:	98 1c       	adc	r9, r8
     21c:	98 1c       	adc	r9, r8
     21e:	98 1c       	adc	r9, r8
     220:	98 1c       	adc	r9, r8
     222:	98 1c       	adc	r9, r8
     224:	44 1c       	adc	r4, r4
     226:	98 1c       	adc	r9, r8
     228:	98 1c       	adc	r9, r8
     22a:	98 1c       	adc	r9, r8
     22c:	98 1c       	adc	r9, r8
     22e:	98 1c       	adc	r9, r8
     230:	98 1c       	adc	r9, r8
     232:	98 1c       	adc	r9, r8
     234:	60 1c       	adc	r6, r0
     236:	98 1c       	adc	r9, r8
     238:	98 1c       	adc	r9, r8
     23a:	98 1c       	adc	r9, r8
     23c:	98 1c       	adc	r9, r8
     23e:	98 1c       	adc	r9, r8
     240:	98 1c       	adc	r9, r8
     242:	98 1c       	adc	r9, r8
     244:	60 1c       	adc	r6, r0
     246:	98 1c       	adc	r9, r8
     248:	98 1c       	adc	r9, r8
     24a:	98 1c       	adc	r9, r8
     24c:	98 1c       	adc	r9, r8
     24e:	98 1c       	adc	r9, r8
     250:	98 1c       	adc	r9, r8
     252:	98 1c       	adc	r9, r8
     254:	75 1c       	adc	r7, r5
     256:	98 1c       	adc	r9, r8
     258:	98 1c       	adc	r9, r8
     25a:	98 1c       	adc	r9, r8
     25c:	98 1c       	adc	r9, r8
     25e:	98 1c       	adc	r9, r8
     260:	98 1c       	adc	r9, r8
     262:	98 1c       	adc	r9, r8
     264:	8f 1c       	adc	r8, r15
     266:	98 1c       	adc	r9, r8
     268:	98 1c       	adc	r9, r8
     26a:	98 1c       	adc	r9, r8
     26c:	98 1c       	adc	r9, r8
     26e:	98 1c       	adc	r9, r8
     270:	98 1c       	adc	r9, r8
     272:	98 1c       	adc	r9, r8
     274:	8f 1c       	adc	r8, r15

00000276 <__trampolines_end>:
     276:	45 00       	.word	0x0045	; ????
     278:	00 82       	st	Z, r0
     27a:	00 00       	nop
     27c:	40 00       	.word	0x0040	; ????
     27e:	20 00       	Address 0x0000027e is out of bounds.
.word	0xffff	; ????

0000027f <_ZL9arpreqhdr>:
     27f:	00 01 08 00 06 04 00 01 00                          .........

00000288 <__ctors_start>:
     288:	20 05       	cpc	r18, r0
     28a:	61 0c       	add	r6, r1
     28c:	9b 16       	cp	r9, r27
     28e:	23 17       	cp	r18, r19
     290:	ab 17       	cp	r26, r27
     292:	33 18       	sub	r3, r3
     294:	56 18       	sub	r5, r6
     296:	4e 1a       	sub	r4, r30
     298:	04 1e       	adc	r0, r20
     29a:	74 1e       	adc	r7, r20
     29c:	84 1f       	adc	r24, r20
     29e:	8c 1f       	adc	r24, r28

000002a0 <__ctors_end>:
     2a0:	11 24       	eor	r1, r1
     2a2:	1f be       	out	0x3f, r1	; 63
     2a4:	cf ef       	ldi	r28, 0xFF	; 255
     2a6:	d1 e2       	ldi	r29, 0x21	; 33
     2a8:	de bf       	out	0x3e, r29	; 62
     2aa:	cd bf       	out	0x3d, r28	; 61
     2ac:	00 e0       	ldi	r16, 0x00	; 0
     2ae:	0c bf       	out	0x3c, r16	; 60

000002b0 <__do_copy_data>:
     2b0:	13 e0       	ldi	r17, 0x03	; 3
     2b2:	a0 e0       	ldi	r26, 0x00	; 0
     2b4:	b2 e0       	ldi	r27, 0x02	; 2
     2b6:	e6 e6       	ldi	r30, 0x66	; 102
     2b8:	f9 e4       	ldi	r31, 0x49	; 73
     2ba:	00 e0       	ldi	r16, 0x00	; 0
     2bc:	0b bf       	out	0x3b, r16	; 59
     2be:	02 c0       	rjmp	.+4      	; 0x2c4 <__do_copy_data+0x14>
     2c0:	07 90       	elpm	r0, Z+
     2c2:	0d 92       	st	X+, r0
     2c4:	aa 34       	cpi	r26, 0x4A	; 74
     2c6:	b1 07       	cpc	r27, r17
     2c8:	d9 f7       	brne	.-10     	; 0x2c0 <__do_copy_data+0x10>

000002ca <__do_clear_bss>:
     2ca:	2a e0       	ldi	r18, 0x0A	; 10
     2cc:	aa e4       	ldi	r26, 0x4A	; 74
     2ce:	b3 e0       	ldi	r27, 0x03	; 3
     2d0:	01 c0       	rjmp	.+2      	; 0x2d4 <.do_clear_bss_start>

000002d2 <.do_clear_bss_loop>:
     2d2:	1d 92       	st	X+, r1

000002d4 <.do_clear_bss_start>:
     2d4:	ae 31       	cpi	r26, 0x1E	; 30
     2d6:	b2 07       	cpc	r27, r18
     2d8:	e1 f7       	brne	.-8      	; 0x2d2 <.do_clear_bss_loop>

000002da <__do_global_ctors>:
     2da:	11 e0       	ldi	r17, 0x01	; 1
     2dc:	c0 e5       	ldi	r28, 0x50	; 80
     2de:	d1 e0       	ldi	r29, 0x01	; 1
     2e0:	00 e0       	ldi	r16, 0x00	; 0
     2e2:	06 c0       	rjmp	.+12     	; 0x2f0 <__do_global_ctors+0x16>
     2e4:	21 97       	sbiw	r28, 0x01	; 1
     2e6:	01 09       	sbc	r16, r1
     2e8:	80 2f       	mov	r24, r16
     2ea:	fe 01       	movw	r30, r28
     2ec:	0e 94 b9 23 	call	0x4772	; 0x4772 <__tablejump2__>
     2f0:	c4 34       	cpi	r28, 0x44	; 68
     2f2:	d1 07       	cpc	r29, r17
     2f4:	80 e0       	ldi	r24, 0x00	; 0
     2f6:	08 07       	cpc	r16, r24
     2f8:	a9 f7       	brne	.-22     	; 0x2e4 <__do_global_ctors+0xa>
     2fa:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <main>
     2fe:	0c 94 b1 24 	jmp	0x4962	; 0x4962 <_exit>

00000302 <__bad_interrupt>:
     302:	7e ce       	rjmp	.-772    	; 0x0 <__vectors>

00000304 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:

    setMode(lastMode);
    return true;
  }
  return false;
}
     304:	08 95       	ret

00000306 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>:
     306:	0f 93       	push	r16
     308:	1f 93       	push	r17
     30a:	cf 93       	push	r28
     30c:	df 93       	push	r29
     30e:	8c 01       	movw	r16, r24
     310:	eb 01       	movw	r28, r22
     312:	88 e2       	ldi	r24, 0x28	; 40
     314:	fb 01       	movw	r30, r22
     316:	11 92       	st	Z+, r1
     318:	8a 95       	dec	r24
     31a:	e9 f7       	brne	.-6      	; 0x316 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x10>
     31c:	4b e0       	ldi	r20, 0x0B	; 11
     31e:	50 e0       	ldi	r21, 0x00	; 0
     320:	64 e1       	ldi	r22, 0x14	; 20
     322:	72 e0       	ldi	r23, 0x02	; 2
     324:	ce 01       	movw	r24, r28
     326:	0e 94 a2 24 	call	0x4944	; 0x4944 <strncpy>
     32a:	1b 86       	std	Y+11, r1	; 0x0b
     32c:	81 e0       	ldi	r24, 0x01	; 1
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	a0 e0       	ldi	r26, 0x00	; 0
     332:	b0 e0       	ldi	r27, 0x00	; 0
     334:	8c 87       	std	Y+12, r24	; 0x0c
     336:	9d 87       	std	Y+13, r25	; 0x0d
     338:	ae 87       	std	Y+14, r26	; 0x0e
     33a:	bf 87       	std	Y+15, r27	; 0x0f
     33c:	f8 01       	movw	r30, r16
     33e:	86 81       	ldd	r24, Z+6	; 0x06
     340:	97 81       	ldd	r25, Z+7	; 0x07
     342:	a0 85       	ldd	r26, Z+8	; 0x08
     344:	b1 85       	ldd	r27, Z+9	; 0x09
     346:	88 8b       	std	Y+16, r24	; 0x10
     348:	99 8b       	std	Y+17, r25	; 0x11
     34a:	aa 8b       	std	Y+18, r26	; 0x12
     34c:	bb 8b       	std	Y+19, r27	; 0x13
     34e:	83 e0       	ldi	r24, 0x03	; 3
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	a0 e0       	ldi	r26, 0x00	; 0
     354:	b0 e0       	ldi	r27, 0x00	; 0
     356:	8c 8b       	std	Y+20, r24	; 0x14
     358:	9d 8b       	std	Y+21, r25	; 0x15
     35a:	ae 8b       	std	Y+22, r26	; 0x16
     35c:	bf 8b       	std	Y+23, r27	; 0x17
     35e:	1c a2       	std	Y+36, r1	; 0x24
     360:	1d a2       	std	Y+37, r1	; 0x25
     362:	1e a2       	std	Y+38, r1	; 0x26
     364:	1f a2       	std	Y+39, r1	; 0x27
     366:	18 8e       	std	Y+24, r1	; 0x18
     368:	19 8e       	std	Y+25, r1	; 0x19
     36a:	1a 8e       	std	Y+26, r1	; 0x1a
     36c:	1b 8e       	std	Y+27, r1	; 0x1b
     36e:	1c 8e       	std	Y+28, r1	; 0x1c
     370:	1d 8e       	std	Y+29, r1	; 0x1d
     372:	1e 8e       	std	Y+30, r1	; 0x1e
     374:	1f 8e       	std	Y+31, r1	; 0x1f
     376:	8a e0       	ldi	r24, 0x0A	; 10
     378:	97 ed       	ldi	r25, 0xD7	; 215
     37a:	a3 e2       	ldi	r26, 0x23	; 35
     37c:	bc e3       	ldi	r27, 0x3C	; 60
     37e:	88 a3       	std	Y+32, r24	; 0x20
     380:	99 a3       	std	Y+33, r25	; 0x21
     382:	aa a3       	std	Y+34, r26	; 0x22
     384:	bb a3       	std	Y+35, r27	; 0x23
     386:	df 91       	pop	r29
     388:	cf 91       	pop	r28
     38a:	1f 91       	pop	r17
     38c:	0f 91       	pop	r16
     38e:	08 95       	ret

00000390 <_ZN15Adafruit_BNO055C1ElhP7TwoWire>:
     390:	0f 93       	push	r16
     392:	1f 93       	push	r17
     394:	fc 01       	movw	r30, r24
     396:	8f e1       	ldi	r24, 0x1F	; 31
     398:	92 e0       	ldi	r25, 0x02	; 2
     39a:	91 83       	std	Z+1, r25	; 0x01
     39c:	80 83       	st	Z, r24
     39e:	46 83       	std	Z+6, r20	; 0x06
     3a0:	57 83       	std	Z+7, r21	; 0x07
     3a2:	60 87       	std	Z+8, r22	; 0x08
     3a4:	71 87       	std	Z+9, r23	; 0x09
     3a6:	23 83       	std	Z+3, r18	; 0x03
     3a8:	15 83       	std	Z+5, r17	; 0x05
     3aa:	04 83       	std	Z+4, r16	; 0x04
     3ac:	1f 91       	pop	r17
     3ae:	0f 91       	pop	r16
     3b0:	08 95       	ret

000003b2 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>:
     3b2:	0f 93       	push	r16
     3b4:	1f 93       	push	r17
     3b6:	cf 93       	push	r28
     3b8:	df 93       	push	r29
     3ba:	ec 01       	movw	r28, r24
     3bc:	06 2f       	mov	r16, r22
     3be:	14 2f       	mov	r17, r20
     3c0:	6b 81       	ldd	r22, Y+3	; 0x03
     3c2:	8c 81       	ldd	r24, Y+4	; 0x04
     3c4:	9d 81       	ldd	r25, Y+5	; 0x05
     3c6:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <_ZN7TwoWire17beginTransmissionEh>
     3ca:	8c 81       	ldd	r24, Y+4	; 0x04
     3cc:	9d 81       	ldd	r25, Y+5	; 0x05
     3ce:	dc 01       	movw	r26, r24
     3d0:	ed 91       	ld	r30, X+
     3d2:	fc 91       	ld	r31, X
     3d4:	01 90       	ld	r0, Z+
     3d6:	f0 81       	ld	r31, Z
     3d8:	e0 2d       	mov	r30, r0
     3da:	60 2f       	mov	r22, r16
     3dc:	19 95       	eicall
     3de:	8c 81       	ldd	r24, Y+4	; 0x04
     3e0:	9d 81       	ldd	r25, Y+5	; 0x05
     3e2:	dc 01       	movw	r26, r24
     3e4:	ed 91       	ld	r30, X+
     3e6:	fc 91       	ld	r31, X
     3e8:	01 90       	ld	r0, Z+
     3ea:	f0 81       	ld	r31, Z
     3ec:	e0 2d       	mov	r30, r0
     3ee:	61 2f       	mov	r22, r17
     3f0:	19 95       	eicall
     3f2:	8c 81       	ldd	r24, Y+4	; 0x04
     3f4:	9d 81       	ldd	r25, Y+5	; 0x05
     3f6:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <_ZN7TwoWire15endTransmissionEv>
     3fa:	81 e0       	ldi	r24, 0x01	; 1
     3fc:	df 91       	pop	r29
     3fe:	cf 91       	pop	r28
     400:	1f 91       	pop	r17
     402:	0f 91       	pop	r16
     404:	08 95       	ret

00000406 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>:
     406:	46 2f       	mov	r20, r22
     408:	fc 01       	movw	r30, r24
     40a:	62 87       	std	Z+10, r22	; 0x0a
     40c:	6d e3       	ldi	r22, 0x3D	; 61
     40e:	d1 df       	rcall	.-94     	; 0x3b2 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     410:	ff ef       	ldi	r31, 0xFF	; 255
     412:	26 e7       	ldi	r18, 0x76	; 118
     414:	81 e0       	ldi	r24, 0x01	; 1
     416:	f1 50       	subi	r31, 0x01	; 1
     418:	20 40       	sbci	r18, 0x00	; 0
     41a:	80 40       	sbci	r24, 0x00	; 0
     41c:	e1 f7       	brne	.-8      	; 0x416 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE+0x10>
     41e:	00 c0       	rjmp	.+0      	; 0x420 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE+0x1a>
     420:	00 00       	nop
     422:	08 95       	ret

00000424 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>:
     424:	1f 93       	push	r17
     426:	cf 93       	push	r28
     428:	df 93       	push	r29
     42a:	ec 01       	movw	r28, r24
     42c:	16 2f       	mov	r17, r22
     42e:	6b 81       	ldd	r22, Y+3	; 0x03
     430:	8c 81       	ldd	r24, Y+4	; 0x04
     432:	9d 81       	ldd	r25, Y+5	; 0x05
     434:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <_ZN7TwoWire17beginTransmissionEh>
     438:	8c 81       	ldd	r24, Y+4	; 0x04
     43a:	9d 81       	ldd	r25, Y+5	; 0x05
     43c:	dc 01       	movw	r26, r24
     43e:	ed 91       	ld	r30, X+
     440:	fc 91       	ld	r31, X
     442:	01 90       	ld	r0, Z+
     444:	f0 81       	ld	r31, Z
     446:	e0 2d       	mov	r30, r0
     448:	61 2f       	mov	r22, r17
     44a:	19 95       	eicall
     44c:	8c 81       	ldd	r24, Y+4	; 0x04
     44e:	9d 81       	ldd	r25, Y+5	; 0x05
     450:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <_ZN7TwoWire15endTransmissionEv>
     454:	41 e0       	ldi	r20, 0x01	; 1
     456:	6b 81       	ldd	r22, Y+3	; 0x03
     458:	8c 81       	ldd	r24, Y+4	; 0x04
     45a:	9d 81       	ldd	r25, Y+5	; 0x05
     45c:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <_ZN7TwoWire11requestFromEhh>
     460:	8c 81       	ldd	r24, Y+4	; 0x04
     462:	9d 81       	ldd	r25, Y+5	; 0x05
     464:	dc 01       	movw	r26, r24
     466:	ed 91       	ld	r30, X+
     468:	fc 91       	ld	r31, X
     46a:	02 84       	ldd	r0, Z+10	; 0x0a
     46c:	f3 85       	ldd	r31, Z+11	; 0x0b
     46e:	e0 2d       	mov	r30, r0
     470:	19 95       	eicall
     472:	df 91       	pop	r29
     474:	cf 91       	pop	r28
     476:	1f 91       	pop	r17
     478:	08 95       	ret

0000047a <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>:
     47a:	1f 93       	push	r17
     47c:	cf 93       	push	r28
     47e:	df 93       	push	r29
     480:	ec 01       	movw	r28, r24
     482:	16 2f       	mov	r17, r22
     484:	8c 81       	ldd	r24, Y+4	; 0x04
     486:	9d 81       	ldd	r25, Y+5	; 0x05
     488:	0e 94 68 1d 	call	0x3ad0	; 0x3ad0 <_ZN7TwoWire5beginEv>
     48c:	60 e0       	ldi	r22, 0x00	; 0
     48e:	ce 01       	movw	r24, r28
     490:	c9 df       	rcall	.-110    	; 0x424 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
     492:	80 3a       	cpi	r24, 0xA0	; 160
     494:	79 f0       	breq	.+30     	; 0x4b4 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x3a>
     496:	2f ef       	ldi	r18, 0xFF	; 255
     498:	83 ed       	ldi	r24, 0xD3	; 211
     49a:	90 e3       	ldi	r25, 0x30	; 48
     49c:	21 50       	subi	r18, 0x01	; 1
     49e:	80 40       	sbci	r24, 0x00	; 0
     4a0:	90 40       	sbci	r25, 0x00	; 0
     4a2:	e1 f7       	brne	.-8      	; 0x49c <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x22>
     4a4:	00 c0       	rjmp	.+0      	; 0x4a6 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x2c>
     4a6:	00 00       	nop
     4a8:	60 e0       	ldi	r22, 0x00	; 0
     4aa:	ce 01       	movw	r24, r28
     4ac:	bb df       	rcall	.-138    	; 0x424 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
     4ae:	80 3a       	cpi	r24, 0xA0	; 160
     4b0:	09 f0       	breq	.+2      	; 0x4b4 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x3a>
     4b2:	4b c0       	rjmp	.+150    	; 0x54a <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xd0>
     4b4:	60 e0       	ldi	r22, 0x00	; 0
     4b6:	ce 01       	movw	r24, r28
     4b8:	a6 df       	rcall	.-180    	; 0x406 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
     4ba:	40 e2       	ldi	r20, 0x20	; 32
     4bc:	6f e3       	ldi	r22, 0x3F	; 63
     4be:	ce 01       	movw	r24, r28
     4c0:	78 df       	rcall	.-272    	; 0x3b2 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     4c2:	2f ef       	ldi	r18, 0xFF	; 255
     4c4:	86 e7       	ldi	r24, 0x76	; 118
     4c6:	91 e0       	ldi	r25, 0x01	; 1
     4c8:	21 50       	subi	r18, 0x01	; 1
     4ca:	80 40       	sbci	r24, 0x00	; 0
     4cc:	90 40       	sbci	r25, 0x00	; 0
     4ce:	e1 f7       	brne	.-8      	; 0x4c8 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x4e>
     4d0:	00 c0       	rjmp	.+0      	; 0x4d2 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x58>
     4d2:	00 00       	nop
     4d4:	60 e0       	ldi	r22, 0x00	; 0
     4d6:	ce 01       	movw	r24, r28
     4d8:	a5 df       	rcall	.-182    	; 0x424 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
     4da:	80 3a       	cpi	r24, 0xA0	; 160
     4dc:	39 f0       	breq	.+14     	; 0x4ec <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x72>
     4de:	8f e3       	ldi	r24, 0x3F	; 63
     4e0:	9c e9       	ldi	r25, 0x9C	; 156
     4e2:	01 97       	sbiw	r24, 0x01	; 1
     4e4:	f1 f7       	brne	.-4      	; 0x4e2 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x68>
     4e6:	00 c0       	rjmp	.+0      	; 0x4e8 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x6e>
     4e8:	00 00       	nop
     4ea:	f4 cf       	rjmp	.-24     	; 0x4d4 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x5a>
     4ec:	9f ef       	ldi	r25, 0xFF	; 255
     4ee:	20 e7       	ldi	r18, 0x70	; 112
     4f0:	82 e0       	ldi	r24, 0x02	; 2
     4f2:	91 50       	subi	r25, 0x01	; 1
     4f4:	20 40       	sbci	r18, 0x00	; 0
     4f6:	80 40       	sbci	r24, 0x00	; 0
     4f8:	e1 f7       	brne	.-8      	; 0x4f2 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x78>
     4fa:	00 c0       	rjmp	.+0      	; 0x4fc <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x82>
     4fc:	00 00       	nop
     4fe:	40 e0       	ldi	r20, 0x00	; 0
     500:	6e e3       	ldi	r22, 0x3E	; 62
     502:	ce 01       	movw	r24, r28
     504:	56 df       	rcall	.-340    	; 0x3b2 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     506:	8f e3       	ldi	r24, 0x3F	; 63
     508:	9c e9       	ldi	r25, 0x9C	; 156
     50a:	01 97       	sbiw	r24, 0x01	; 1
     50c:	f1 f7       	brne	.-4      	; 0x50a <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x90>
     50e:	00 c0       	rjmp	.+0      	; 0x510 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x96>
     510:	00 00       	nop
     512:	40 e0       	ldi	r20, 0x00	; 0
     514:	67 e0       	ldi	r22, 0x07	; 7
     516:	ce 01       	movw	r24, r28
     518:	4c df       	rcall	.-360    	; 0x3b2 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     51a:	40 e0       	ldi	r20, 0x00	; 0
     51c:	6f e3       	ldi	r22, 0x3F	; 63
     51e:	ce 01       	movw	r24, r28
     520:	48 df       	rcall	.-368    	; 0x3b2 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     522:	8f e3       	ldi	r24, 0x3F	; 63
     524:	9c e9       	ldi	r25, 0x9C	; 156
     526:	01 97       	sbiw	r24, 0x01	; 1
     528:	f1 f7       	brne	.-4      	; 0x526 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xac>
     52a:	00 c0       	rjmp	.+0      	; 0x52c <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xb2>
     52c:	00 00       	nop
     52e:	61 2f       	mov	r22, r17
     530:	ce 01       	movw	r24, r28
     532:	69 df       	rcall	.-302    	; 0x406 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
     534:	9f ef       	ldi	r25, 0xFF	; 255
     536:	29 ef       	ldi	r18, 0xF9	; 249
     538:	80 e0       	ldi	r24, 0x00	; 0
     53a:	91 50       	subi	r25, 0x01	; 1
     53c:	20 40       	sbci	r18, 0x00	; 0
     53e:	80 40       	sbci	r24, 0x00	; 0
     540:	e1 f7       	brne	.-8      	; 0x53a <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xc0>
     542:	00 c0       	rjmp	.+0      	; 0x544 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xca>
     544:	00 00       	nop
     546:	81 e0       	ldi	r24, 0x01	; 1
     548:	01 c0       	rjmp	.+2      	; 0x54c <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xd2>
     54a:	80 e0       	ldi	r24, 0x00	; 0
     54c:	df 91       	pop	r29
     54e:	cf 91       	pop	r28
     550:	1f 91       	pop	r17
     552:	08 95       	ret

00000554 <_ZN15Adafruit_BNO0557getTempEv>:
     554:	64 e3       	ldi	r22, 0x34	; 52
     556:	66 cf       	rjmp	.-308    	; 0x424 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
     558:	08 95       	ret

0000055a <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>:
     55a:	cf 92       	push	r12
     55c:	df 92       	push	r13
     55e:	ef 92       	push	r14
     560:	ff 92       	push	r15
     562:	0f 93       	push	r16
     564:	1f 93       	push	r17
     566:	cf 93       	push	r28
     568:	df 93       	push	r29
     56a:	7c 01       	movw	r14, r24
     56c:	c6 2f       	mov	r28, r22
     56e:	6a 01       	movw	r12, r20
     570:	12 2f       	mov	r17, r18
     572:	dc 01       	movw	r26, r24
     574:	13 96       	adiw	r26, 0x03	; 3
     576:	6c 91       	ld	r22, X
     578:	13 97       	sbiw	r26, 0x03	; 3
     57a:	14 96       	adiw	r26, 0x04	; 4
     57c:	8d 91       	ld	r24, X+
     57e:	9c 91       	ld	r25, X
     580:	15 97       	sbiw	r26, 0x05	; 5
     582:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <_ZN7TwoWire17beginTransmissionEh>
     586:	f7 01       	movw	r30, r14
     588:	84 81       	ldd	r24, Z+4	; 0x04
     58a:	95 81       	ldd	r25, Z+5	; 0x05
     58c:	dc 01       	movw	r26, r24
     58e:	ed 91       	ld	r30, X+
     590:	fc 91       	ld	r31, X
     592:	01 90       	ld	r0, Z+
     594:	f0 81       	ld	r31, Z
     596:	e0 2d       	mov	r30, r0
     598:	6c 2f       	mov	r22, r28
     59a:	19 95       	eicall
     59c:	f7 01       	movw	r30, r14
     59e:	84 81       	ldd	r24, Z+4	; 0x04
     5a0:	95 81       	ldd	r25, Z+5	; 0x05
     5a2:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <_ZN7TwoWire15endTransmissionEv>
     5a6:	41 2f       	mov	r20, r17
     5a8:	d7 01       	movw	r26, r14
     5aa:	13 96       	adiw	r26, 0x03	; 3
     5ac:	6c 91       	ld	r22, X
     5ae:	13 97       	sbiw	r26, 0x03	; 3
     5b0:	14 96       	adiw	r26, 0x04	; 4
     5b2:	8d 91       	ld	r24, X+
     5b4:	9c 91       	ld	r25, X
     5b6:	15 97       	sbiw	r26, 0x05	; 5
     5b8:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <_ZN7TwoWire11requestFromEhh>
     5bc:	11 23       	and	r17, r17
     5be:	b1 f0       	breq	.+44     	; 0x5ec <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh+0x92>
     5c0:	e6 01       	movw	r28, r12
     5c2:	11 50       	subi	r17, 0x01	; 1
     5c4:	01 2f       	mov	r16, r17
     5c6:	10 e0       	ldi	r17, 0x00	; 0
     5c8:	0f 5f       	subi	r16, 0xFF	; 255
     5ca:	1f 4f       	sbci	r17, 0xFF	; 255
     5cc:	0c 0d       	add	r16, r12
     5ce:	1d 1d       	adc	r17, r13
     5d0:	f7 01       	movw	r30, r14
     5d2:	84 81       	ldd	r24, Z+4	; 0x04
     5d4:	95 81       	ldd	r25, Z+5	; 0x05
     5d6:	dc 01       	movw	r26, r24
     5d8:	ed 91       	ld	r30, X+
     5da:	fc 91       	ld	r31, X
     5dc:	02 84       	ldd	r0, Z+10	; 0x0a
     5de:	f3 85       	ldd	r31, Z+11	; 0x0b
     5e0:	e0 2d       	mov	r30, r0
     5e2:	19 95       	eicall
     5e4:	89 93       	st	Y+, r24
     5e6:	c0 17       	cp	r28, r16
     5e8:	d1 07       	cpc	r29, r17
     5ea:	91 f7       	brne	.-28     	; 0x5d0 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh+0x76>
     5ec:	81 e0       	ldi	r24, 0x01	; 1
     5ee:	df 91       	pop	r29
     5f0:	cf 91       	pop	r28
     5f2:	1f 91       	pop	r17
     5f4:	0f 91       	pop	r16
     5f6:	ff 90       	pop	r15
     5f8:	ef 90       	pop	r14
     5fa:	df 90       	pop	r13
     5fc:	cf 90       	pop	r12
     5fe:	08 95       	ret

00000600 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>:
 *            VECTOR_EULER
 *            VECTOR_LINEARACCEL
 *            VECTOR_GRAVITY]
 *  @return  vector from specified source
 */
AdafruitImu::Vector<3> Adafruit_BNO055::getVector(adafruit_vector_type_t vector_type) {
     600:	af 92       	push	r10
     602:	bf 92       	push	r11
     604:	cf 92       	push	r12
     606:	df 92       	push	r13
     608:	ff 92       	push	r15
     60a:	0f 93       	push	r16
     60c:	1f 93       	push	r17
     60e:	cf 93       	push	r28
     610:	df 93       	push	r29
     612:	00 d0       	rcall	.+0      	; 0x614 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x14>
     614:	00 d0       	rcall	.+0      	; 0x616 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x16>
     616:	cd b7       	in	r28, 0x3d	; 61
     618:	de b7       	in	r29, 0x3e	; 62
     61a:	8c 01       	movw	r16, r24
     61c:	cb 01       	movw	r24, r22
     61e:	f4 2e       	mov	r15, r20
	template <uint8_t N> class Vector
	{
		public:
		Vector()
		{
			memset(p_vec, 0, sizeof(double)*N);
     620:	2c e0       	ldi	r18, 0x0C	; 12
     622:	f8 01       	movw	r30, r16
     624:	11 92       	st	Z+, r1
     626:	2a 95       	dec	r18
     628:	e9 f7       	brne	.-6      	; 0x624 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x24>
  AdafruitImu::Vector<3> xyz;
  uint8_t buffer[6];
  memset(buffer, 0, 6);
     62a:	ae 01       	movw	r20, r28
     62c:	4f 5f       	subi	r20, 0xFF	; 255
     62e:	5f 4f       	sbci	r21, 0xFF	; 255
     630:	26 e0       	ldi	r18, 0x06	; 6
     632:	fa 01       	movw	r30, r20
     634:	11 92       	st	Z+, r1
     636:	2a 95       	dec	r18
     638:	e9 f7       	brne	.-6      	; 0x634 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x34>

  int16_t x, y, z;
  x = y = z = 0;

  /* Read vector data (6 bytes) */
  readLen((adafruit_bno055_reg_t)vector_type, buffer, 6);
     63a:	26 e0       	ldi	r18, 0x06	; 6
     63c:	6f 2d       	mov	r22, r15
     63e:	8d df       	rcall	.-230    	; 0x55a <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>

  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
     640:	6a 81       	ldd	r22, Y+2	; 0x02
     642:	70 e0       	ldi	r23, 0x00	; 0
     644:	76 2f       	mov	r23, r22
     646:	66 27       	eor	r22, r22
     648:	89 81       	ldd	r24, Y+1	; 0x01
     64a:	68 2b       	or	r22, r24
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
     64c:	8c 81       	ldd	r24, Y+4	; 0x04
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	98 2f       	mov	r25, r24
     652:	88 27       	eor	r24, r24
     654:	2b 81       	ldd	r18, Y+3	; 0x03
     656:	6c 01       	movw	r12, r24
     658:	c2 2a       	or	r12, r18
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
     65a:	8e 81       	ldd	r24, Y+6	; 0x06
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	98 2f       	mov	r25, r24
     660:	88 27       	eor	r24, r24
     662:	2d 81       	ldd	r18, Y+5	; 0x05
     664:	5c 01       	movw	r10, r24
     666:	a2 2a       	or	r10, r18

  /*!
   * Convert the value to an appropriate range (section 3.6.4)
   * and assign the value to the Vector type
   */
  switch (vector_type) {
     668:	f4 e1       	ldi	r31, 0x14	; 20
     66a:	ff 16       	cp	r15, r31
     66c:	09 f4       	brne	.+2      	; 0x670 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x70>
     66e:	4a c0       	rjmp	.+148    	; 0x704 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x104>
     670:	ff 15       	cp	r31, r15
     672:	40 f0       	brcs	.+16     	; 0x684 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x84>
     674:	88 e0       	ldi	r24, 0x08	; 8
     676:	f8 16       	cp	r15, r24
     678:	09 f4       	brne	.+2      	; 0x67c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x7c>
     67a:	ac c0       	rjmp	.+344    	; 0x7d4 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x1d4>
     67c:	ee e0       	ldi	r30, 0x0E	; 14
     67e:	fe 16       	cp	r15, r30
     680:	69 f0       	breq	.+26     	; 0x69c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x9c>
     682:	43 c1       	rjmp	.+646    	; 0x90a <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
     684:	f8 e2       	ldi	r31, 0x28	; 40
     686:	ff 16       	cp	r15, r31
     688:	09 f4       	brne	.+2      	; 0x68c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x8c>
     68a:	d8 c0       	rjmp	.+432    	; 0x83c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x23c>
     68c:	8e e2       	ldi	r24, 0x2E	; 46
     68e:	f8 16       	cp	r15, r24
     690:	09 f4       	brne	.+2      	; 0x694 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x94>
     692:	08 c1       	rjmp	.+528    	; 0x8a4 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x2a4>
     694:	ea e1       	ldi	r30, 0x1A	; 26
     696:	fe 12       	cpse	r15, r30
     698:	38 c1       	rjmp	.+624    	; 0x90a <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
     69a:	68 c0       	rjmp	.+208    	; 0x76c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x16c>
  case VECTOR_MAGNETOMETER:
    /* 1uT = 16 LSB */
    xyz[0] = ((double)x) / 16.0;
     69c:	07 2e       	mov	r0, r23
     69e:	00 0c       	add	r0, r0
     6a0:	88 0b       	sbc	r24, r24
     6a2:	99 0b       	sbc	r25, r25
     6a4:	0e 94 6d 22 	call	0x44da	; 0x44da <__floatsisf>
     6a8:	20 e0       	ldi	r18, 0x00	; 0
     6aa:	30 e0       	ldi	r19, 0x00	; 0
     6ac:	40 e8       	ldi	r20, 0x80	; 128
     6ae:	5d e3       	ldi	r21, 0x3D	; 61
     6b0:	0e 94 21 23 	call	0x4642	; 0x4642 <__mulsf3>
     6b4:	f8 01       	movw	r30, r16
     6b6:	60 83       	st	Z, r22
     6b8:	71 83       	std	Z+1, r23	; 0x01
     6ba:	82 83       	std	Z+2, r24	; 0x02
     6bc:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 16.0;
     6be:	b6 01       	movw	r22, r12
     6c0:	dd 0c       	add	r13, r13
     6c2:	88 0b       	sbc	r24, r24
     6c4:	99 0b       	sbc	r25, r25
     6c6:	0e 94 6d 22 	call	0x44da	; 0x44da <__floatsisf>
     6ca:	20 e0       	ldi	r18, 0x00	; 0
     6cc:	30 e0       	ldi	r19, 0x00	; 0
     6ce:	40 e8       	ldi	r20, 0x80	; 128
     6d0:	5d e3       	ldi	r21, 0x3D	; 61
     6d2:	0e 94 21 23 	call	0x4642	; 0x4642 <__mulsf3>
     6d6:	f8 01       	movw	r30, r16
     6d8:	64 83       	std	Z+4, r22	; 0x04
     6da:	75 83       	std	Z+5, r23	; 0x05
     6dc:	86 83       	std	Z+6, r24	; 0x06
     6de:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 16.0;
     6e0:	b5 01       	movw	r22, r10
     6e2:	bb 0c       	add	r11, r11
     6e4:	88 0b       	sbc	r24, r24
     6e6:	99 0b       	sbc	r25, r25
     6e8:	0e 94 6d 22 	call	0x44da	; 0x44da <__floatsisf>
     6ec:	20 e0       	ldi	r18, 0x00	; 0
     6ee:	30 e0       	ldi	r19, 0x00	; 0
     6f0:	40 e8       	ldi	r20, 0x80	; 128
     6f2:	5d e3       	ldi	r21, 0x3D	; 61
     6f4:	0e 94 21 23 	call	0x4642	; 0x4642 <__mulsf3>
     6f8:	f8 01       	movw	r30, r16
     6fa:	60 87       	std	Z+8, r22	; 0x08
     6fc:	71 87       	std	Z+9, r23	; 0x09
     6fe:	82 87       	std	Z+10, r24	; 0x0a
     700:	93 87       	std	Z+11, r25	; 0x0b
    break;
     702:	03 c1       	rjmp	.+518    	; 0x90a <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_GYROSCOPE:
    /* 1dps = 16 LSB */
    xyz[0] = ((double)x) / 16.0;
     704:	07 2e       	mov	r0, r23
     706:	00 0c       	add	r0, r0
     708:	88 0b       	sbc	r24, r24
     70a:	99 0b       	sbc	r25, r25
     70c:	0e 94 6d 22 	call	0x44da	; 0x44da <__floatsisf>
     710:	20 e0       	ldi	r18, 0x00	; 0
     712:	30 e0       	ldi	r19, 0x00	; 0
     714:	40 e8       	ldi	r20, 0x80	; 128
     716:	5d e3       	ldi	r21, 0x3D	; 61
     718:	0e 94 21 23 	call	0x4642	; 0x4642 <__mulsf3>
     71c:	f8 01       	movw	r30, r16
     71e:	60 83       	st	Z, r22
     720:	71 83       	std	Z+1, r23	; 0x01
     722:	82 83       	std	Z+2, r24	; 0x02
     724:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 16.0;
     726:	b6 01       	movw	r22, r12
     728:	dd 0c       	add	r13, r13
     72a:	88 0b       	sbc	r24, r24
     72c:	99 0b       	sbc	r25, r25
     72e:	0e 94 6d 22 	call	0x44da	; 0x44da <__floatsisf>
     732:	20 e0       	ldi	r18, 0x00	; 0
     734:	30 e0       	ldi	r19, 0x00	; 0
     736:	40 e8       	ldi	r20, 0x80	; 128
     738:	5d e3       	ldi	r21, 0x3D	; 61
     73a:	0e 94 21 23 	call	0x4642	; 0x4642 <__mulsf3>
     73e:	f8 01       	movw	r30, r16
     740:	64 83       	std	Z+4, r22	; 0x04
     742:	75 83       	std	Z+5, r23	; 0x05
     744:	86 83       	std	Z+6, r24	; 0x06
     746:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 16.0;
     748:	b5 01       	movw	r22, r10
     74a:	bb 0c       	add	r11, r11
     74c:	88 0b       	sbc	r24, r24
     74e:	99 0b       	sbc	r25, r25
     750:	0e 94 6d 22 	call	0x44da	; 0x44da <__floatsisf>
     754:	20 e0       	ldi	r18, 0x00	; 0
     756:	30 e0       	ldi	r19, 0x00	; 0
     758:	40 e8       	ldi	r20, 0x80	; 128
     75a:	5d e3       	ldi	r21, 0x3D	; 61
     75c:	0e 94 21 23 	call	0x4642	; 0x4642 <__mulsf3>
     760:	f8 01       	movw	r30, r16
     762:	60 87       	std	Z+8, r22	; 0x08
     764:	71 87       	std	Z+9, r23	; 0x09
     766:	82 87       	std	Z+10, r24	; 0x0a
     768:	93 87       	std	Z+11, r25	; 0x0b
    break;
     76a:	cf c0       	rjmp	.+414    	; 0x90a <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_EULER:
    /* 1 degree = 16 LSB */
    xyz[0] = ((double)x) / 16.0;
     76c:	07 2e       	mov	r0, r23
     76e:	00 0c       	add	r0, r0
     770:	88 0b       	sbc	r24, r24
     772:	99 0b       	sbc	r25, r25
     774:	0e 94 6d 22 	call	0x44da	; 0x44da <__floatsisf>
     778:	20 e0       	ldi	r18, 0x00	; 0
     77a:	30 e0       	ldi	r19, 0x00	; 0
     77c:	40 e8       	ldi	r20, 0x80	; 128
     77e:	5d e3       	ldi	r21, 0x3D	; 61
     780:	0e 94 21 23 	call	0x4642	; 0x4642 <__mulsf3>
     784:	f8 01       	movw	r30, r16
     786:	60 83       	st	Z, r22
     788:	71 83       	std	Z+1, r23	; 0x01
     78a:	82 83       	std	Z+2, r24	; 0x02
     78c:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 16.0;
     78e:	b6 01       	movw	r22, r12
     790:	dd 0c       	add	r13, r13
     792:	88 0b       	sbc	r24, r24
     794:	99 0b       	sbc	r25, r25
     796:	0e 94 6d 22 	call	0x44da	; 0x44da <__floatsisf>
     79a:	20 e0       	ldi	r18, 0x00	; 0
     79c:	30 e0       	ldi	r19, 0x00	; 0
     79e:	40 e8       	ldi	r20, 0x80	; 128
     7a0:	5d e3       	ldi	r21, 0x3D	; 61
     7a2:	0e 94 21 23 	call	0x4642	; 0x4642 <__mulsf3>
     7a6:	f8 01       	movw	r30, r16
     7a8:	64 83       	std	Z+4, r22	; 0x04
     7aa:	75 83       	std	Z+5, r23	; 0x05
     7ac:	86 83       	std	Z+6, r24	; 0x06
     7ae:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 16.0;
     7b0:	b5 01       	movw	r22, r10
     7b2:	bb 0c       	add	r11, r11
     7b4:	88 0b       	sbc	r24, r24
     7b6:	99 0b       	sbc	r25, r25
     7b8:	0e 94 6d 22 	call	0x44da	; 0x44da <__floatsisf>
     7bc:	20 e0       	ldi	r18, 0x00	; 0
     7be:	30 e0       	ldi	r19, 0x00	; 0
     7c0:	40 e8       	ldi	r20, 0x80	; 128
     7c2:	5d e3       	ldi	r21, 0x3D	; 61
     7c4:	0e 94 21 23 	call	0x4642	; 0x4642 <__mulsf3>
     7c8:	f8 01       	movw	r30, r16
     7ca:	60 87       	std	Z+8, r22	; 0x08
     7cc:	71 87       	std	Z+9, r23	; 0x09
     7ce:	82 87       	std	Z+10, r24	; 0x0a
     7d0:	93 87       	std	Z+11, r25	; 0x0b
    break;
     7d2:	9b c0       	rjmp	.+310    	; 0x90a <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_ACCELEROMETER:
    /* 1m/s^2 = 100 LSB */
    xyz[0] = ((double)x) / 100.0;
     7d4:	07 2e       	mov	r0, r23
     7d6:	00 0c       	add	r0, r0
     7d8:	88 0b       	sbc	r24, r24
     7da:	99 0b       	sbc	r25, r25
     7dc:	0e 94 6d 22 	call	0x44da	; 0x44da <__floatsisf>
     7e0:	20 e0       	ldi	r18, 0x00	; 0
     7e2:	30 e0       	ldi	r19, 0x00	; 0
     7e4:	48 ec       	ldi	r20, 0xC8	; 200
     7e6:	52 e4       	ldi	r21, 0x42	; 66
     7e8:	0e 94 d7 21 	call	0x43ae	; 0x43ae <__divsf3>
     7ec:	f8 01       	movw	r30, r16
     7ee:	60 83       	st	Z, r22
     7f0:	71 83       	std	Z+1, r23	; 0x01
     7f2:	82 83       	std	Z+2, r24	; 0x02
     7f4:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 100.0;
     7f6:	b6 01       	movw	r22, r12
     7f8:	dd 0c       	add	r13, r13
     7fa:	88 0b       	sbc	r24, r24
     7fc:	99 0b       	sbc	r25, r25
     7fe:	0e 94 6d 22 	call	0x44da	; 0x44da <__floatsisf>
     802:	20 e0       	ldi	r18, 0x00	; 0
     804:	30 e0       	ldi	r19, 0x00	; 0
     806:	48 ec       	ldi	r20, 0xC8	; 200
     808:	52 e4       	ldi	r21, 0x42	; 66
     80a:	0e 94 d7 21 	call	0x43ae	; 0x43ae <__divsf3>
     80e:	f8 01       	movw	r30, r16
     810:	64 83       	std	Z+4, r22	; 0x04
     812:	75 83       	std	Z+5, r23	; 0x05
     814:	86 83       	std	Z+6, r24	; 0x06
     816:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 100.0;
     818:	b5 01       	movw	r22, r10
     81a:	bb 0c       	add	r11, r11
     81c:	88 0b       	sbc	r24, r24
     81e:	99 0b       	sbc	r25, r25
     820:	0e 94 6d 22 	call	0x44da	; 0x44da <__floatsisf>
     824:	20 e0       	ldi	r18, 0x00	; 0
     826:	30 e0       	ldi	r19, 0x00	; 0
     828:	48 ec       	ldi	r20, 0xC8	; 200
     82a:	52 e4       	ldi	r21, 0x42	; 66
     82c:	0e 94 d7 21 	call	0x43ae	; 0x43ae <__divsf3>
     830:	f8 01       	movw	r30, r16
     832:	60 87       	std	Z+8, r22	; 0x08
     834:	71 87       	std	Z+9, r23	; 0x09
     836:	82 87       	std	Z+10, r24	; 0x0a
     838:	93 87       	std	Z+11, r25	; 0x0b
    break;
     83a:	67 c0       	rjmp	.+206    	; 0x90a <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_LINEARACCEL:
    /* 1m/s^2 = 100 LSB */
    xyz[0] = ((double)x) / 100.0;
     83c:	07 2e       	mov	r0, r23
     83e:	00 0c       	add	r0, r0
     840:	88 0b       	sbc	r24, r24
     842:	99 0b       	sbc	r25, r25
     844:	0e 94 6d 22 	call	0x44da	; 0x44da <__floatsisf>
     848:	20 e0       	ldi	r18, 0x00	; 0
     84a:	30 e0       	ldi	r19, 0x00	; 0
     84c:	48 ec       	ldi	r20, 0xC8	; 200
     84e:	52 e4       	ldi	r21, 0x42	; 66
     850:	0e 94 d7 21 	call	0x43ae	; 0x43ae <__divsf3>
     854:	f8 01       	movw	r30, r16
     856:	60 83       	st	Z, r22
     858:	71 83       	std	Z+1, r23	; 0x01
     85a:	82 83       	std	Z+2, r24	; 0x02
     85c:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 100.0;
     85e:	b6 01       	movw	r22, r12
     860:	dd 0c       	add	r13, r13
     862:	88 0b       	sbc	r24, r24
     864:	99 0b       	sbc	r25, r25
     866:	0e 94 6d 22 	call	0x44da	; 0x44da <__floatsisf>
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	48 ec       	ldi	r20, 0xC8	; 200
     870:	52 e4       	ldi	r21, 0x42	; 66
     872:	0e 94 d7 21 	call	0x43ae	; 0x43ae <__divsf3>
     876:	f8 01       	movw	r30, r16
     878:	64 83       	std	Z+4, r22	; 0x04
     87a:	75 83       	std	Z+5, r23	; 0x05
     87c:	86 83       	std	Z+6, r24	; 0x06
     87e:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 100.0;
     880:	b5 01       	movw	r22, r10
     882:	bb 0c       	add	r11, r11
     884:	88 0b       	sbc	r24, r24
     886:	99 0b       	sbc	r25, r25
     888:	0e 94 6d 22 	call	0x44da	; 0x44da <__floatsisf>
     88c:	20 e0       	ldi	r18, 0x00	; 0
     88e:	30 e0       	ldi	r19, 0x00	; 0
     890:	48 ec       	ldi	r20, 0xC8	; 200
     892:	52 e4       	ldi	r21, 0x42	; 66
     894:	0e 94 d7 21 	call	0x43ae	; 0x43ae <__divsf3>
     898:	f8 01       	movw	r30, r16
     89a:	60 87       	std	Z+8, r22	; 0x08
     89c:	71 87       	std	Z+9, r23	; 0x09
     89e:	82 87       	std	Z+10, r24	; 0x0a
     8a0:	93 87       	std	Z+11, r25	; 0x0b
    break;
     8a2:	33 c0       	rjmp	.+102    	; 0x90a <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_GRAVITY:
    /* 1m/s^2 = 100 LSB */
    xyz[0] = ((double)x) / 100.0;
     8a4:	07 2e       	mov	r0, r23
     8a6:	00 0c       	add	r0, r0
     8a8:	88 0b       	sbc	r24, r24
     8aa:	99 0b       	sbc	r25, r25
     8ac:	0e 94 6d 22 	call	0x44da	; 0x44da <__floatsisf>
     8b0:	20 e0       	ldi	r18, 0x00	; 0
     8b2:	30 e0       	ldi	r19, 0x00	; 0
     8b4:	48 ec       	ldi	r20, 0xC8	; 200
     8b6:	52 e4       	ldi	r21, 0x42	; 66
     8b8:	0e 94 d7 21 	call	0x43ae	; 0x43ae <__divsf3>
     8bc:	f8 01       	movw	r30, r16
     8be:	60 83       	st	Z, r22
     8c0:	71 83       	std	Z+1, r23	; 0x01
     8c2:	82 83       	std	Z+2, r24	; 0x02
     8c4:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 100.0;
     8c6:	b6 01       	movw	r22, r12
     8c8:	dd 0c       	add	r13, r13
     8ca:	88 0b       	sbc	r24, r24
     8cc:	99 0b       	sbc	r25, r25
     8ce:	0e 94 6d 22 	call	0x44da	; 0x44da <__floatsisf>
     8d2:	20 e0       	ldi	r18, 0x00	; 0
     8d4:	30 e0       	ldi	r19, 0x00	; 0
     8d6:	48 ec       	ldi	r20, 0xC8	; 200
     8d8:	52 e4       	ldi	r21, 0x42	; 66
     8da:	0e 94 d7 21 	call	0x43ae	; 0x43ae <__divsf3>
     8de:	f8 01       	movw	r30, r16
     8e0:	64 83       	std	Z+4, r22	; 0x04
     8e2:	75 83       	std	Z+5, r23	; 0x05
     8e4:	86 83       	std	Z+6, r24	; 0x06
     8e6:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 100.0;
     8e8:	b5 01       	movw	r22, r10
     8ea:	bb 0c       	add	r11, r11
     8ec:	88 0b       	sbc	r24, r24
     8ee:	99 0b       	sbc	r25, r25
     8f0:	0e 94 6d 22 	call	0x44da	; 0x44da <__floatsisf>
     8f4:	20 e0       	ldi	r18, 0x00	; 0
     8f6:	30 e0       	ldi	r19, 0x00	; 0
     8f8:	48 ec       	ldi	r20, 0xC8	; 200
     8fa:	52 e4       	ldi	r21, 0x42	; 66
     8fc:	0e 94 d7 21 	call	0x43ae	; 0x43ae <__divsf3>
     900:	f8 01       	movw	r30, r16
     902:	60 87       	std	Z+8, r22	; 0x08
     904:	71 87       	std	Z+9, r23	; 0x09
     906:	82 87       	std	Z+10, r24	; 0x0a
     908:	93 87       	std	Z+11, r25	; 0x0b
    break;
  }

  return xyz;
}
     90a:	c8 01       	movw	r24, r16
     90c:	26 96       	adiw	r28, 0x06	; 6
     90e:	0f b6       	in	r0, 0x3f	; 63
     910:	f8 94       	cli
     912:	de bf       	out	0x3e, r29	; 62
     914:	0f be       	out	0x3f, r0	; 63
     916:	cd bf       	out	0x3d, r28	; 61
     918:	df 91       	pop	r29
     91a:	cf 91       	pop	r28
     91c:	1f 91       	pop	r17
     91e:	0f 91       	pop	r16
     920:	ff 90       	pop	r15
     922:	df 90       	pop	r13
     924:	cf 90       	pop	r12
     926:	bf 90       	pop	r11
     928:	af 90       	pop	r10
     92a:	08 95       	ret

0000092c <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>:
/*!
 *  @brief  Reads the sensor and returns the data as a sensors_event_t
 *  @param  event
 *  @return always returns true
 */
bool Adafruit_BNO055::getEvent(sensors_event_t *event) {
     92c:	0f 93       	push	r16
     92e:	1f 93       	push	r17
     930:	cf 93       	push	r28
     932:	df 93       	push	r29
     934:	cd b7       	in	r28, 0x3d	; 61
     936:	de b7       	in	r29, 0x3e	; 62
     938:	2c 97       	sbiw	r28, 0x0c	; 12
     93a:	0f b6       	in	r0, 0x3f	; 63
     93c:	f8 94       	cli
     93e:	de bf       	out	0x3e, r29	; 62
     940:	0f be       	out	0x3f, r0	; 63
     942:	cd bf       	out	0x3d, r28	; 61
     944:	8b 01       	movw	r16, r22
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
     946:	20 e2       	ldi	r18, 0x20	; 32
     948:	fb 01       	movw	r30, r22
     94a:	11 92       	st	Z+, r1
     94c:	2a 95       	dec	r18
     94e:	e9 f7       	brne	.-6      	; 0x94a <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t+0x1e>

  event->version = sizeof(sensors_event_t);
     950:	40 e2       	ldi	r20, 0x20	; 32
     952:	50 e0       	ldi	r21, 0x00	; 0
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	f8 01       	movw	r30, r16
     95a:	40 83       	st	Z, r20
     95c:	51 83       	std	Z+1, r21	; 0x01
     95e:	62 83       	std	Z+2, r22	; 0x02
     960:	73 83       	std	Z+3, r23	; 0x03
  event->sensor_id = _sensorID;
     962:	fc 01       	movw	r30, r24
     964:	46 81       	ldd	r20, Z+6	; 0x06
     966:	57 81       	ldd	r21, Z+7	; 0x07
     968:	60 85       	ldd	r22, Z+8	; 0x08
     96a:	71 85       	ldd	r23, Z+9	; 0x09
     96c:	f8 01       	movw	r30, r16
     96e:	44 83       	std	Z+4, r20	; 0x04
     970:	55 83       	std	Z+5, r21	; 0x05
     972:	66 83       	std	Z+6, r22	; 0x06
     974:	77 83       	std	Z+7, r23	; 0x07
  event->type = SENSOR_TYPE_ORIENTATION;
     976:	43 e0       	ldi	r20, 0x03	; 3
     978:	50 e0       	ldi	r21, 0x00	; 0
     97a:	60 e0       	ldi	r22, 0x00	; 0
     97c:	70 e0       	ldi	r23, 0x00	; 0
     97e:	40 87       	std	Z+8, r20	; 0x08
     980:	51 87       	std	Z+9, r21	; 0x09
     982:	62 87       	std	Z+10, r22	; 0x0a
     984:	73 87       	std	Z+11, r23	; 0x0b
  //event->timestamp = millis();

  /* Get a Euler angle sample for orientation */
  AdafruitImu::Vector<3> euler = getVector(Adafruit_BNO055::VECTOR_EULER);
     986:	4a e1       	ldi	r20, 0x1A	; 26
     988:	bc 01       	movw	r22, r24
     98a:	ce 01       	movw	r24, r28
     98c:	01 96       	adiw	r24, 0x01	; 1
     98e:	38 de       	rcall	.-912    	; 0x600 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
  event->orientation.x = euler.x();
     990:	89 81       	ldd	r24, Y+1	; 0x01
     992:	9a 81       	ldd	r25, Y+2	; 0x02
     994:	ab 81       	ldd	r26, Y+3	; 0x03
     996:	bc 81       	ldd	r27, Y+4	; 0x04
     998:	f8 01       	movw	r30, r16
     99a:	80 8b       	std	Z+16, r24	; 0x10
     99c:	91 8b       	std	Z+17, r25	; 0x11
     99e:	a2 8b       	std	Z+18, r26	; 0x12
     9a0:	b3 8b       	std	Z+19, r27	; 0x13
  event->orientation.y = euler.y();
     9a2:	8d 81       	ldd	r24, Y+5	; 0x05
     9a4:	9e 81       	ldd	r25, Y+6	; 0x06
     9a6:	af 81       	ldd	r26, Y+7	; 0x07
     9a8:	b8 85       	ldd	r27, Y+8	; 0x08
     9aa:	84 8b       	std	Z+20, r24	; 0x14
     9ac:	95 8b       	std	Z+21, r25	; 0x15
     9ae:	a6 8b       	std	Z+22, r26	; 0x16
     9b0:	b7 8b       	std	Z+23, r27	; 0x17
  event->orientation.z = euler.z();
     9b2:	89 85       	ldd	r24, Y+9	; 0x09
     9b4:	9a 85       	ldd	r25, Y+10	; 0x0a
     9b6:	ab 85       	ldd	r26, Y+11	; 0x0b
     9b8:	bc 85       	ldd	r27, Y+12	; 0x0c
     9ba:	80 8f       	std	Z+24, r24	; 0x18
     9bc:	91 8f       	std	Z+25, r25	; 0x19
     9be:	a2 8f       	std	Z+26, r26	; 0x1a
     9c0:	b3 8f       	std	Z+27, r27	; 0x1b

  return true;
}
     9c2:	81 e0       	ldi	r24, 0x01	; 1
     9c4:	2c 96       	adiw	r28, 0x0c	; 12
     9c6:	0f b6       	in	r0, 0x3f	; 63
     9c8:	f8 94       	cli
     9ca:	de bf       	out	0x3e, r29	; 62
     9cc:	0f be       	out	0x3f, r0	; 63
     9ce:	cd bf       	out	0x3d, r28	; 61
     9d0:	df 91       	pop	r29
     9d2:	cf 91       	pop	r28
     9d4:	1f 91       	pop	r17
     9d6:	0f 91       	pop	r16
     9d8:	08 95       	ret

000009da <_Z14RunPingCommandPKhh>:
  }
  
  EtherComm::SendCommand(CMD_Echo, dataLen);
}
//TODO remove this command from both devices
void RunLedCommand(const uint8_t* data, uint8_t len){
     9da:	61 30       	cpi	r22, 0x01	; 1
     9dc:	49 f4       	brne	.+18     	; 0x9f0 <_Z14RunPingCommandPKhh+0x16>
     9de:	fc 01       	movw	r30, r24
     9e0:	80 81       	ld	r24, Z
     9e2:	e0 91 4a 03 	lds	r30, 0x034A	; 0x80034a <__data_end>
     9e6:	f0 91 4b 03 	lds	r31, 0x034B	; 0x80034b <__data_end+0x1>
     9ea:	80 83       	st	Z, r24
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	ac c6       	rjmp	.+3416   	; 0x1748 <_ZN9EtherComm11SendCommandEhh>
     9f0:	08 95       	ret

000009f2 <_Z14RunEchoCommandPKhh>:
     9f2:	40 91 4a 03 	lds	r20, 0x034A	; 0x80034a <__data_end>
     9f6:	30 91 4b 03 	lds	r19, 0x034B	; 0x80034b <__data_end+0x1>
     9fa:	2f ef       	ldi	r18, 0xFF	; 255
     9fc:	26 0f       	add	r18, r22
     9fe:	66 23       	and	r22, r22
     a00:	41 f0       	breq	.+16     	; 0xa12 <_Z14RunEchoCommandPKhh+0x20>
     a02:	a8 2f       	mov	r26, r24
     a04:	b9 2f       	mov	r27, r25
     a06:	e4 2f       	mov	r30, r20
     a08:	f3 2f       	mov	r31, r19
     a0a:	8d 91       	ld	r24, X+
     a0c:	81 93       	st	Z+, r24
     a0e:	21 50       	subi	r18, 0x01	; 1
     a10:	e0 f7       	brcc	.-8      	; 0xa0a <_Z14RunEchoCommandPKhh+0x18>
     a12:	81 e0       	ldi	r24, 0x01	; 1
     a14:	99 c6       	rjmp	.+3378   	; 0x1748 <_ZN9EtherComm11SendCommandEhh>
     a16:	08 95       	ret

00000a18 <_ZN9EtherComm15CommandReceivedEhPKhh>:
			//todo REMOVE COMMAND
		}
	}
}

void EtherComm::CommandReceived(uint8_t command, const uint8_t* data, uint8_t len){
     a18:	9b 01       	movw	r18, r22
  switch(command){
     a1a:	81 30       	cpi	r24, 0x01	; 1
     a1c:	41 f0       	breq	.+16     	; 0xa2e <_ZN9EtherComm15CommandReceivedEhPKhh+0x16>
     a1e:	18 f0       	brcs	.+6      	; 0xa26 <_ZN9EtherComm15CommandReceivedEhPKhh+0xe>
     a20:	83 30       	cpi	r24, 0x03	; 3
     a22:	49 f0       	breq	.+18     	; 0xa36 <_ZN9EtherComm15CommandReceivedEhPKhh+0x1e>
     a24:	08 95       	ret
    case CMD_Ping: RunPingCommand(data, len); break;
     a26:	64 2f       	mov	r22, r20
     a28:	c9 01       	movw	r24, r18
     a2a:	d7 cf       	rjmp	.-82     	; 0x9da <_Z14RunPingCommandPKhh>
     a2c:	08 95       	ret
    case CMD_Echo: RunEchoCommand(data, len); break;
     a2e:	64 2f       	mov	r22, r20
     a30:	c9 01       	movw	r24, r18
     a32:	df cf       	rjmp	.-66     	; 0x9f2 <_Z14RunEchoCommandPKhh>
     a34:	08 95       	ret
	case CMD_Led: RunLedCommand(data, len); break;
	case CMD_UpdateDevice: rov.CommandReceived(data, len); break;
     a36:	64 2f       	mov	r22, r20
     a38:	c9 01       	movw	r24, r18
     a3a:	0c 94 57 1e 	jmp	0x3cae	; 0x3cae <_ZN5Robot15CommandReceivedEPKhh>
     a3e:	08 95       	ret

00000a40 <_GLOBAL__sub_I__Z14RunPingCommandPKhh>:
#include "EtherComm.h"
#include "Robot.h"
#include "Commands.h"
#include <stddef.h>

uint8_t* const SendDataBuffer = (uint8_t*)(&EtherComm::buffer[2]);
     a40:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
     a44:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
     a48:	02 96       	adiw	r24, 0x02	; 2
     a4a:	90 93 4b 03 	sts	0x034B, r25	; 0x80034b <__data_end+0x1>
     a4e:	80 93 4a 03 	sts	0x034A, r24	; 0x80034a <__data_end>
     a52:	08 95       	ret

00000a54 <_ZL10enableChipv>:
static Register* selectPort;
static uint8_t selectPin;

static void enableChip () {
	//cli();
	SetLow(*selectPort, selectPin); //digitalWrite(selectPin, LOW);
     a54:	e0 91 50 03 	lds	r30, 0x0350	; 0x800350 <_ZL10selectPort>
     a58:	f0 91 51 03 	lds	r31, 0x0351	; 0x800351 <_ZL10selectPort+0x1>
     a5c:	90 81       	ld	r25, Z
     a5e:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <_ZL9selectPin>
     a62:	80 95       	com	r24
     a64:	89 23       	and	r24, r25
     a66:	80 83       	st	Z, r24
     a68:	08 95       	ret

00000a6a <_ZL11disableChipv>:
}

static void disableChip () {
	SetHigh(*selectPort, selectPin); //digitalWrite(selectPin, HIGH);
     a6a:	e0 91 50 03 	lds	r30, 0x0350	; 0x800350 <_ZL10selectPort>
     a6e:	f0 91 51 03 	lds	r31, 0x0351	; 0x800351 <_ZL10selectPort+0x1>
     a72:	90 81       	ld	r25, Z
     a74:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <_ZL9selectPin>
     a78:	89 2b       	or	r24, r25
     a7a:	80 83       	st	Z, r24
     a7c:	08 95       	ret

00000a7e <_ZL6readOphh>:

	SetOutput(csDDR, selectPin);
	disableChip();
}

static uint8_t readOp (uint8_t op, uint8_t address) {
     a7e:	cf 93       	push	r28
     a80:	df 93       	push	r29
     a82:	d8 2f       	mov	r29, r24
     a84:	c6 2f       	mov	r28, r22
    enableChip();
     a86:	e6 df       	rcall	.-52     	; 0xa54 <_ZL10enableChipv>
    SPI.write8(op | (address & ADDR_MASK));
     a88:	8c 2f       	mov	r24, r28
     a8a:	cf 71       	andi	r28, 0x1F	; 31
     a8c:	cd 2b       	or	r28, r29
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     a8e:	ce bd       	out	0x2e, r28	; 46
		asm volatile("nop");
     a90:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     a92:	0d b4       	in	r0, 0x2d	; 45
     a94:	07 fe       	sbrs	r0, 7
     a96:	fd cf       	rjmp	.-6      	; 0xa92 <_ZL6readOphh+0x14>
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     a98:	1e bc       	out	0x2e, r1	; 46
		asm volatile("nop");
     a9a:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     a9c:	0d b4       	in	r0, 0x2d	; 45
     a9e:	07 fe       	sbrs	r0, 7
     aa0:	fd cf       	rjmp	.-6      	; 0xa9c <_ZL6readOphh+0x1e>
	}

	//write8, excepts also returns the received byte
	static uint8_t read_write8(uint8_t data){
		write8(data);
		return SPDR;
     aa2:	ce b5       	in	r28, 0x2e	; 46
    uint8_t result = SPI.read_write8(0x00);
    if (address & 0x80)
     aa4:	88 23       	and	r24, r24
     aa6:	34 f4       	brge	.+12     	; 0xab4 <_ZL6readOphh+0x36>
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     aa8:	1e bc       	out	0x2e, r1	; 46
		asm volatile("nop");
     aaa:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     aac:	0d b4       	in	r0, 0x2d	; 45
     aae:	07 fe       	sbrs	r0, 7
     ab0:	fd cf       	rjmp	.-6      	; 0xaac <_ZL6readOphh+0x2e>
        result = SPI.read_write8(0x00);
    disableChip();
     ab2:	ce b5       	in	r28, 0x2e	; 46
     ab4:	da df       	rcall	.-76     	; 0xa6a <_ZL11disableChipv>
    return result;
}
     ab6:	8c 2f       	mov	r24, r28
     ab8:	df 91       	pop	r29
     aba:	cf 91       	pop	r28
     abc:	08 95       	ret

00000abe <_ZL7writeOphhh>:

static void writeOp (uint8_t op, uint8_t address, uint8_t data) {
     abe:	1f 93       	push	r17
     ac0:	cf 93       	push	r28
     ac2:	df 93       	push	r29
     ac4:	c8 2f       	mov	r28, r24
     ac6:	d6 2f       	mov	r29, r22
     ac8:	14 2f       	mov	r17, r20
    enableChip();
     aca:	c4 df       	rcall	.-120    	; 0xa54 <_ZL10enableChipv>
    SPI.write8(op | (address & ADDR_MASK));
     acc:	df 71       	andi	r29, 0x1F	; 31
     ace:	cd 2b       	or	r28, r29
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     ad0:	ce bd       	out	0x2e, r28	; 46
		asm volatile("nop");
     ad2:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     ad4:	0d b4       	in	r0, 0x2d	; 45
     ad6:	07 fe       	sbrs	r0, 7
     ad8:	fd cf       	rjmp	.-6      	; 0xad4 <_ZL7writeOphhh+0x16>
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     ada:	1e bd       	out	0x2e, r17	; 46
		asm volatile("nop");
     adc:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     ade:	0d b4       	in	r0, 0x2d	; 45
     ae0:	07 fe       	sbrs	r0, 7
    SPI.write8(data);
    disableChip();
     ae2:	fd cf       	rjmp	.-6      	; 0xade <_ZL7writeOphhh+0x20>
     ae4:	c2 df       	rcall	.-124    	; 0xa6a <_ZL11disableChipv>
}
     ae6:	df 91       	pop	r29
     ae8:	cf 91       	pop	r28
     aea:	1f 91       	pop	r17
     aec:	08 95       	ret

00000aee <_ZL7readBufjPh>:

static void readBuf(uint16_t len, uint8_t* data) {
     aee:	0f 93       	push	r16
     af0:	1f 93       	push	r17
     af2:	cf 93       	push	r28
     af4:	df 93       	push	r29
     af6:	ec 01       	movw	r28, r24
     af8:	8b 01       	movw	r16, r22
    enableChip();
     afa:	ac df       	rcall	.-168    	; 0xa54 <_ZL10enableChipv>
    if (len != 0) {
     afc:	20 97       	sbiw	r28, 0x00	; 0
     afe:	99 f0       	breq	.+38     	; 0xb26 <_ZL7readBufjPh+0x38>
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     b00:	8a e3       	ldi	r24, 0x3A	; 58
     b02:	8e bd       	out	0x2e, r24	; 46
		asm volatile("nop");
     b04:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     b06:	0d b4       	in	r0, 0x2d	; 45
     b08:	07 fe       	sbrs	r0, 7
     b0a:	fd cf       	rjmp	.-6      	; 0xb06 <_ZL7readBufjPh+0x18>
     b0c:	f8 01       	movw	r30, r16
     b0e:	b8 01       	movw	r22, r16
     b10:	6c 0f       	add	r22, r28
     b12:	7d 1f       	adc	r23, r29
	static void read(void *buf, uint16_t nbyte, uint8_t dataSend = 0){
		if(nbyte == 0) return;
		
		uint8_t* buff = (uint8_t*)buf;
		while(nbyte--){
			SPDR = dataSend;
     b14:	1e bc       	out	0x2e, r1	; 46
			//asm volatile("nop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\n");
			while(!(SPSR & _BV(SPIF)));
     b16:	0d b4       	in	r0, 0x2d	; 45
     b18:	07 fe       	sbrs	r0, 7
     b1a:	fd cf       	rjmp	.-6      	; 0xb16 <_ZL7readBufjPh+0x28>
			*buff++ = SPDR;
     b1c:	9e b5       	in	r25, 0x2e	; 46
     b1e:	91 93       	st	Z+, r25
		
	static void read(void *buf, uint16_t nbyte, uint8_t dataSend = 0){
		if(nbyte == 0) return;
		
		uint8_t* buff = (uint8_t*)buf;
		while(nbyte--){
     b20:	6e 17       	cp	r22, r30
     b22:	7f 07       	cpc	r23, r31
        SPI.write8(ENC28J60_READ_BUF_MEM);
		SPI.read(data, len);
    }
    disableChip();
     b24:	b9 f7       	brne	.-18     	; 0xb14 <_ZL7readBufjPh+0x26>
     b26:	a1 df       	rcall	.-190    	; 0xa6a <_ZL11disableChipv>
}
     b28:	df 91       	pop	r29
     b2a:	cf 91       	pop	r28
     b2c:	1f 91       	pop	r17
     b2e:	0f 91       	pop	r16
     b30:	08 95       	ret

00000b32 <_ZL7SetBankh>:
        SPI.write(data, len);
    }
    disableChip();
}

static void SetBank (uint8_t address) {
     b32:	1f 93       	push	r17
     b34:	cf 93       	push	r28
     b36:	df 93       	push	r29
     b38:	18 2f       	mov	r17, r24
     b3a:	10 76       	andi	r17, 0x60	; 96
    if ((address & BANK_MASK) != Enc28j60Bank) {
     b3c:	c1 2f       	mov	r28, r17
     b3e:	d0 e0       	ldi	r29, 0x00	; 0
     b40:	80 91 52 03 	lds	r24, 0x0352	; 0x800352 <_ZL12Enc28j60Bank>
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	c8 17       	cp	r28, r24
     b48:	d9 07       	cpc	r29, r25
     b4a:	a1 f0       	breq	.+40     	; 0xb74 <_ZL7SetBankh+0x42>
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_BSEL1|ECON1_BSEL0);
     b4c:	43 e0       	ldi	r20, 0x03	; 3
     b4e:	6f e1       	ldi	r22, 0x1F	; 31
     b50:	80 ea       	ldi	r24, 0xA0	; 160
     b52:	b5 df       	rcall	.-150    	; 0xabe <_ZL7writeOphhh>
        Enc28j60Bank = address & BANK_MASK;
     b54:	10 93 52 03 	sts	0x0352, r17	; 0x800352 <_ZL12Enc28j60Bank>
        writeOp(ENC28J60_BIT_FIELD_SET, ECON1, Enc28j60Bank>>5);
     b58:	ae 01       	movw	r20, r28
     b5a:	55 95       	asr	r21
     b5c:	47 95       	ror	r20
     b5e:	55 95       	asr	r21
     b60:	47 95       	ror	r20
     b62:	55 95       	asr	r21
     b64:	47 95       	ror	r20
     b66:	55 95       	asr	r21
     b68:	47 95       	ror	r20
     b6a:	55 95       	asr	r21
     b6c:	47 95       	ror	r20
     b6e:	6f e1       	ldi	r22, 0x1F	; 31
     b70:	80 e8       	ldi	r24, 0x80	; 128
     b72:	a5 df       	rcall	.-182    	; 0xabe <_ZL7writeOphhh>
    }
}
     b74:	df 91       	pop	r29
     b76:	cf 91       	pop	r28
     b78:	1f 91       	pop	r17
     b7a:	08 95       	ret

00000b7c <_ZL11readRegByteh>:

static uint8_t readRegByte (uint8_t address) {
     b7c:	cf 93       	push	r28
     b7e:	c8 2f       	mov	r28, r24
    SetBank(address);
     b80:	d8 df       	rcall	.-80     	; 0xb32 <_ZL7SetBankh>
    return readOp(ENC28J60_READ_CTRL_REG, address);
     b82:	6c 2f       	mov	r22, r28
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	7b df       	rcall	.-266    	; 0xa7e <_ZL6readOphh>
}
     b88:	cf 91       	pop	r28
     b8a:	08 95       	ret

00000b8c <_ZL12writeRegBytehh>:

static void writeRegByte (uint8_t address, uint8_t data) {
     b8c:	cf 93       	push	r28
     b8e:	df 93       	push	r29
     b90:	c8 2f       	mov	r28, r24
     b92:	d6 2f       	mov	r29, r22
    SetBank(address);
     b94:	ce df       	rcall	.-100    	; 0xb32 <_ZL7SetBankh>
    writeOp(ENC28J60_WRITE_CTRL_REG, address, data);
     b96:	4d 2f       	mov	r20, r29
     b98:	6c 2f       	mov	r22, r28
     b9a:	80 e4       	ldi	r24, 0x40	; 64
     b9c:	90 df       	rcall	.-224    	; 0xabe <_ZL7writeOphhh>
}
     b9e:	df 91       	pop	r29
     ba0:	cf 91       	pop	r28
     ba2:	08 95       	ret

00000ba4 <_ZL8writeReghj>:

static void writeReg(uint8_t address, uint16_t data) {
     ba4:	cf 93       	push	r28
     ba6:	df 93       	push	r29
     ba8:	c8 2f       	mov	r28, r24
     baa:	d7 2f       	mov	r29, r23
    writeRegByte(address, data);
     bac:	ef df       	rcall	.-34     	; 0xb8c <_ZL12writeRegBytehh>
    writeRegByte(address + 1, data >> 8);
     bae:	6d 2f       	mov	r22, r29
     bb0:	81 e0       	ldi	r24, 0x01	; 1
     bb2:	8c 0f       	add	r24, r28
     bb4:	eb df       	rcall	.-42     	; 0xb8c <_ZL12writeRegBytehh>
}
     bb6:	df 91       	pop	r29
     bb8:	cf 91       	pop	r28
     bba:	08 95       	ret

00000bbc <_ZN8ENC28J607initSPIERVh>:
static void disableChip () {
	SetHigh(*selectPort, selectPin); //digitalWrite(selectPin, HIGH);
	//sei();
}

void ENC28J60::initSPI (Register& csDDR) {
     bbc:	fc 01       	movw	r30, r24

class SPI{
public:
	static void begin(uint8_t clock = SPI_CLOCK_DIV2){
		//SPI_DIR |= SS;
		DDR_SPI |= MASK_MOSI | MASK_SCK | MASK_SS; //Not sure why, but SS pin requires to be set as output even when not being used.
     bbe:	94 b1       	in	r25, 0x04	; 4
     bc0:	97 60       	ori	r25, 0x07	; 7
     bc2:	94 b9       	out	0x04, r25	; 4
		DDR_SPI &= ~(MASK_MISO);
     bc4:	23 98       	cbi	0x04, 3	; 4
		//disableCS();

		SPSR |= (clock >> 2);
     bc6:	9d b5       	in	r25, 0x2d	; 45
     bc8:	91 60       	ori	r25, 0x01	; 1
     bca:	9d bd       	out	0x2d, r25	; 45
		SPCR |= _BV(MSTR) | _BV(SPE) | (clock & 0x03);
     bcc:	9c b5       	in	r25, 0x2c	; 44
     bce:	90 65       	ori	r25, 0x50	; 80
     bd0:	9c bd       	out	0x2c, r25	; 44
	SPI.begin(SPI_CLOCK_DIV2);

	SetOutput(csDDR, selectPin);
     bd2:	80 81       	ld	r24, Z
     bd4:	90 91 4f 03 	lds	r25, 0x034F	; 0x80034f <_ZL9selectPin>
     bd8:	98 2b       	or	r25, r24
     bda:	90 83       	st	Z, r25
	disableChip();
     bdc:	46 cf       	rjmp	.-372    	; 0xa6a <_ZL11disableChipv>
     bde:	08 95       	ret

00000be0 <_ZN8ENC28J6010initializeEjPKhRVhS3_h>:
    writeReg(MIWR, data);
    while (readRegByte(MISTAT) & MISTAT_BUSY)
        ;
}

uint8_t ENC28J60::initialize (uint16_t size, const uint8_t* macaddr, Register& csDDR, Register& csPort, uint8_t csPin) {
     be0:	0f 93       	push	r16
     be2:	cf 93       	push	r28
     be4:	df 93       	push	r29
     be6:	eb 01       	movw	r28, r22
    bufferSize = size;
     be8:	90 93 54 03 	sts	0x0354, r25	; 0x800354 <_ZN8ENC28J6010bufferSizeE+0x1>
     bec:	80 93 53 03 	sts	0x0353, r24	; 0x800353 <_ZN8ENC28J6010bufferSizeE>
	selectPin = csPin;
     bf0:	00 93 4f 03 	sts	0x034F, r16	; 0x80034f <_ZL9selectPin>
	selectPort = &csPort;
     bf4:	30 93 51 03 	sts	0x0351, r19	; 0x800351 <_ZL10selectPort+0x1>
     bf8:	20 93 50 03 	sts	0x0350, r18	; 0x800350 <_ZL10selectPort>
    initSPI(csDDR);
     bfc:	ca 01       	movw	r24, r20
     bfe:	de df       	rcall	.-68     	; 0xbbc <_ZN8ENC28J607initSPIERVh>

    writeOp(ENC28J60_SOFT_RESET, 0, ENC28J60_SOFT_RESET);
     c00:	4f ef       	ldi	r20, 0xFF	; 255
     c02:	60 e0       	ldi	r22, 0x00	; 0
     c04:	8f ef       	ldi	r24, 0xFF	; 255
     c06:	5b df       	rcall	.-330    	; 0xabe <_ZL7writeOphhh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c08:	8f e3       	ldi	r24, 0x3F	; 63
     c0a:	9f e1       	ldi	r25, 0x1F	; 31
     c0c:	01 97       	sbiw	r24, 0x01	; 1
     c0e:	f1 f7       	brne	.-4      	; 0xc0c <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0x2c>
     c10:	00 c0       	rjmp	.+0      	; 0xc12 <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0x32>
     c12:	00 00       	nop
	_delay_ms(2);
    while (!readOp(ENC28J60_READ_CTRL_REG, ESTAT) & ESTAT_CLKRDY)
     c14:	6d e1       	ldi	r22, 0x1D	; 29
     c16:	80 e0       	ldi	r24, 0x00	; 0
     c18:	32 df       	rcall	.-412    	; 0xa7e <_ZL6readOphh>
     c1a:	88 23       	and	r24, r24
     c1c:	d9 f3       	breq	.-10     	; 0xc14 <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0x34>
        ;

    writeReg(ERXST, RXSTART_INIT);
     c1e:	60 e0       	ldi	r22, 0x00	; 0
     c20:	70 e0       	ldi	r23, 0x00	; 0
     c22:	88 e0       	ldi	r24, 0x08	; 8
     c24:	bf df       	rcall	.-130    	; 0xba4 <_ZL8writeReghj>
    writeReg(ERXRDPT, RXSTART_INIT);
     c26:	60 e0       	ldi	r22, 0x00	; 0
     c28:	70 e0       	ldi	r23, 0x00	; 0
     c2a:	8c e0       	ldi	r24, 0x0C	; 12
     c2c:	bb df       	rcall	.-138    	; 0xba4 <_ZL8writeReghj>
    writeReg(ERXND, RXSTOP_INIT);
     c2e:	6f ef       	ldi	r22, 0xFF	; 255
     c30:	7b e0       	ldi	r23, 0x0B	; 11
     c32:	8a e0       	ldi	r24, 0x0A	; 10
     c34:	b7 df       	rcall	.-146    	; 0xba4 <_ZL8writeReghj>
    writeReg(ETXST, TXSTART_INIT);
     c36:	60 e0       	ldi	r22, 0x00	; 0
     c38:	7c e0       	ldi	r23, 0x0C	; 12
     c3a:	84 e0       	ldi	r24, 0x04	; 4
     c3c:	b3 df       	rcall	.-154    	; 0xba4 <_ZL8writeReghj>
    writeReg(ETXND, TXSTOP_INIT);
     c3e:	6f ef       	ldi	r22, 0xFF	; 255
     c40:	71 e1       	ldi	r23, 0x11	; 17
     c42:	86 e0       	ldi	r24, 0x06	; 6
     c44:	af df       	rcall	.-162    	; 0xba4 <_ZL8writeReghj>

    writeRegByte(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN|ERXFCON_PMEN|ERXFCON_BCEN);
     c46:	61 eb       	ldi	r22, 0xB1	; 177
     c48:	88 e3       	ldi	r24, 0x38	; 56
     c4a:	a0 df       	rcall	.-192    	; 0xb8c <_ZL12writeRegBytehh>
    writeReg(EPMM0, 0x303f);
     c4c:	6f e3       	ldi	r22, 0x3F	; 63
     c4e:	70 e3       	ldi	r23, 0x30	; 48
     c50:	88 e2       	ldi	r24, 0x28	; 40
     c52:	a8 df       	rcall	.-176    	; 0xba4 <_ZL8writeReghj>
    writeReg(EPMCS, 0xf7f9);
     c54:	69 ef       	ldi	r22, 0xF9	; 249
     c56:	77 ef       	ldi	r23, 0xF7	; 247
     c58:	80 e3       	ldi	r24, 0x30	; 48
     c5a:	a4 df       	rcall	.-184    	; 0xba4 <_ZL8writeReghj>
    writeRegByte(MACON1, MACON1_MARXEN);
     c5c:	61 e0       	ldi	r22, 0x01	; 1
     c5e:	80 ec       	ldi	r24, 0xC0	; 192
     c60:	95 df       	rcall	.-214    	; 0xb8c <_ZL12writeRegBytehh>
    writeOp(ENC28J60_BIT_FIELD_SET, MACON3,
            MACON3_PADCFG0|MACON3_TXCRCEN|MACON3_FRMLNEN);
     c62:	42 e3       	ldi	r20, 0x32	; 50
     c64:	62 ec       	ldi	r22, 0xC2	; 194
     c66:	80 e8       	ldi	r24, 0x80	; 128
     c68:	2a df       	rcall	.-428    	; 0xabe <_ZL7writeOphhh>
    writeReg(MAIPG, 0x0C12);
     c6a:	62 e1       	ldi	r22, 0x12	; 18
     c6c:	7c e0       	ldi	r23, 0x0C	; 12
     c6e:	86 ec       	ldi	r24, 0xC6	; 198
    writeRegByte(MABBIPG, 0x12);
     c70:	99 df       	rcall	.-206    	; 0xba4 <_ZL8writeReghj>
     c72:	62 e1       	ldi	r22, 0x12	; 18
     c74:	84 ec       	ldi	r24, 0xC4	; 196
    writeReg(MAMXFL, MAX_FRAMELEN);
     c76:	8a df       	rcall	.-236    	; 0xb8c <_ZL12writeRegBytehh>
     c78:	6c ed       	ldi	r22, 0xDC	; 220
     c7a:	75 e0       	ldi	r23, 0x05	; 5
    writeRegByte(MAADR5, macaddr[0]);
     c7c:	8a ec       	ldi	r24, 0xCA	; 202
     c7e:	92 df       	rcall	.-220    	; 0xba4 <_ZL8writeReghj>
     c80:	68 81       	ld	r22, Y
    writeRegByte(MAADR4, macaddr[1]);
     c82:	84 ee       	ldi	r24, 0xE4	; 228
     c84:	83 df       	rcall	.-250    	; 0xb8c <_ZL12writeRegBytehh>
     c86:	69 81       	ldd	r22, Y+1	; 0x01
    writeRegByte(MAADR3, macaddr[2]);
     c88:	85 ee       	ldi	r24, 0xE5	; 229
     c8a:	80 df       	rcall	.-256    	; 0xb8c <_ZL12writeRegBytehh>
    writeRegByte(MAADR2, macaddr[3]);
     c8c:	6a 81       	ldd	r22, Y+2	; 0x02
     c8e:	82 ee       	ldi	r24, 0xE2	; 226
     c90:	7d df       	rcall	.-262    	; 0xb8c <_ZL12writeRegBytehh>
    writeRegByte(MAADR1, macaddr[4]);
     c92:	6b 81       	ldd	r22, Y+3	; 0x03
     c94:	83 ee       	ldi	r24, 0xE3	; 227
     c96:	7a df       	rcall	.-268    	; 0xb8c <_ZL12writeRegBytehh>
    writeRegByte(MAADR0, macaddr[5]);
     c98:	6c 81       	ldd	r22, Y+4	; 0x04
     c9a:	80 ee       	ldi	r24, 0xE0	; 224
     c9c:	77 df       	rcall	.-274    	; 0xb8c <_ZL12writeRegBytehh>
    writeRegByte(MICMD, 0x00);
    return readRegByte(MIRD+1);
}

static void writePhy (uint8_t address, uint16_t data) {
    writeRegByte(MIREGADR, address);
     c9e:	6d 81       	ldd	r22, Y+5	; 0x05
     ca0:	81 ee       	ldi	r24, 0xE1	; 225
     ca2:	74 df       	rcall	.-280    	; 0xb8c <_ZL12writeRegBytehh>
    writeReg(MIWR, data);
     ca4:	60 e1       	ldi	r22, 0x10	; 16
     ca6:	84 ed       	ldi	r24, 0xD4	; 212
     ca8:	71 df       	rcall	.-286    	; 0xb8c <_ZL12writeRegBytehh>
     caa:	60 e0       	ldi	r22, 0x00	; 0
     cac:	71 e0       	ldi	r23, 0x01	; 1
    while (readRegByte(MISTAT) & MISTAT_BUSY)
     cae:	86 ed       	ldi	r24, 0xD6	; 214
     cb0:	79 df       	rcall	.-270    	; 0xba4 <_ZL8writeReghj>
     cb2:	8a ee       	ldi	r24, 0xEA	; 234
     cb4:	63 df       	rcall	.-314    	; 0xb7c <_ZL11readRegByteh>
     cb6:	80 fd       	sbrc	r24, 0
    writeRegByte(MAADR3, macaddr[2]);
    writeRegByte(MAADR2, macaddr[3]);
    writeRegByte(MAADR1, macaddr[4]);
    writeRegByte(MAADR0, macaddr[5]);
    writePhy(PHCON2, PHCON2_HDLDIS);
    SetBank(ECON1);
     cb8:	fc cf       	rjmp	.-8      	; 0xcb2 <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0xd2>
     cba:	8f e1       	ldi	r24, 0x1F	; 31
     cbc:	3a df       	rcall	.-396    	; 0xb32 <_ZL7SetBankh>
    writeOp(ENC28J60_BIT_FIELD_SET, EIE, EIE_INTIE|EIE_PKTIE);
     cbe:	40 ec       	ldi	r20, 0xC0	; 192
     cc0:	6b e1       	ldi	r22, 0x1B	; 27
     cc2:	80 e8       	ldi	r24, 0x80	; 128
     cc4:	fc de       	rcall	.-520    	; 0xabe <_ZL7writeOphhh>
     cc6:	44 e0       	ldi	r20, 0x04	; 4
    writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN);
     cc8:	6f e1       	ldi	r22, 0x1F	; 31
     cca:	80 e8       	ldi	r24, 0x80	; 128
     ccc:	f8 de       	rcall	.-528    	; 0xabe <_ZL7writeOphhh>
     cce:	82 e7       	ldi	r24, 0x72	; 114
     cd0:	55 df       	rcall	.-342    	; 0xb7c <_ZL11readRegByteh>

    uint8_t rev = readRegByte(EREVID);
     cd2:	86 30       	cpi	r24, 0x06	; 6
     cd4:	08 f0       	brcs	.+2      	; 0xcd8 <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0xf8>
     cd6:	8f 5f       	subi	r24, 0xFF	; 255
    // microchip forgot to step the number on the silicon when they
    // released the revision B7. 6 is now rev B7. We still have
    // to see what they do when they release B8. At the moment
    // there is no B8 out yet
    if (rev > 5) ++rev;
     cd8:	df 91       	pop	r29
     cda:	cf 91       	pop	r28
     cdc:	0f 91       	pop	r16
    return rev;
}
     cde:	08 95       	ret

00000ce0 <_ZN8ENC28J608isLinkUpEv>:
     ce0:	61 e1       	ldi	r22, 0x11	; 17
     ce2:	84 ed       	ldi	r24, 0xD4	; 212
     ce4:	53 df       	rcall	.-346    	; 0xb8c <_ZL12writeRegBytehh>
    writeRegByte(address + 1, data >> 8);
}

static uint16_t readPhyByte (uint8_t address) {
    writeRegByte(MIREGADR, address);
    writeRegByte(MICMD, MICMD_MIIRD);
     ce6:	61 e0       	ldi	r22, 0x01	; 1
     ce8:	82 ed       	ldi	r24, 0xD2	; 210
     cea:	50 df       	rcall	.-352    	; 0xb8c <_ZL12writeRegBytehh>
    while (readRegByte(MISTAT) & MISTAT_BUSY)
     cec:	8a ee       	ldi	r24, 0xEA	; 234
     cee:	46 df       	rcall	.-372    	; 0xb7c <_ZL11readRegByteh>
     cf0:	80 fd       	sbrc	r24, 0
     cf2:	fc cf       	rjmp	.-8      	; 0xcec <_ZN8ENC28J608isLinkUpEv+0xc>
        ;
    writeRegByte(MICMD, 0x00);
     cf4:	60 e0       	ldi	r22, 0x00	; 0
     cf6:	82 ed       	ldi	r24, 0xD2	; 210
     cf8:	49 df       	rcall	.-366    	; 0xb8c <_ZL12writeRegBytehh>
    return readRegByte(MIRD+1);
     cfa:	89 ed       	ldi	r24, 0xD9	; 217
     cfc:	3f df       	rcall	.-386    	; 0xb7c <_ZL11readRegByteh>
     cfe:	82 fb       	bst	r24, 2
    return rev;
}

bool ENC28J60::isLinkUp() {
    return (readPhyByte(PHSTAT2) >> 2) & 1;
}
     d00:	88 27       	eor	r24, r24
     d02:	80 f9       	bld	r24, 0
     d04:	08 95       	ret

00000d06 <_ZN8ENC28J6010packetSendEj>:
     d06:	af 92       	push	r10

struct transmit_status_vector {
    uint8_t bytes[7];
};

void ENC28J60::packetSend(uint16_t len) {
     d08:	bf 92       	push	r11
     d0a:	cf 92       	push	r12
     d0c:	df 92       	push	r13
     d0e:	ef 92       	push	r14
     d10:	ff 92       	push	r15
     d12:	0f 93       	push	r16
     d14:	1f 93       	push	r17
     d16:	cf 93       	push	r28
     d18:	df 93       	push	r29
     d1a:	7c 01       	movw	r14, r24
        writeOp(ENC28J60_BIT_FIELD_CLR, EIR, EIR_TXERIF|EIR_TXIF);

        // prepare new transmission
        if (retry == 0) {
            writeReg(EWRPT, TXSTART_INIT);
            writeReg(ETXND, TXSTART_INIT+len);
     d1c:	6c 01       	movw	r12, r24
     d1e:	84 ef       	ldi	r24, 0xF4	; 244
     d20:	d8 1a       	sub	r13, r24

	static void write(const void *buf, uint16_t nbyte){
		if(nbyte == 0) return;
		
		const uint8_t* buff = (const uint8_t*)(buf);
		SPDR = *buff;
     d22:	0f 2e       	mov	r0, r31
     d24:	f5 e5       	ldi	r31, 0x55	; 85
     d26:	af 2e       	mov	r10, r31
     d28:	f3 e0       	ldi	r31, 0x03	; 3
     d2a:	bf 2e       	mov	r11, r31
     d2c:	f0 2d       	mov	r31, r0
     d2e:	87 01       	movw	r16, r14
     d30:	0b 5a       	subi	r16, 0xAB	; 171
     d32:	1c 4f       	sbci	r17, 0xFC	; 252
        // the Microchip TCP/IP stack implementation used to first check
        // whether TXERIF is set and only then reset the transmit logic
        // but this has been changed in later versions; possibly they
        // have a reason for this; they don't mention this in the errata
        // sheet
        writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRST);
     d34:	40 e8       	ldi	r20, 0x80	; 128
     d36:	6f e1       	ldi	r22, 0x1F	; 31
     d38:	80 e8       	ldi	r24, 0x80	; 128
     d3a:	c1 de       	rcall	.-638    	; 0xabe <_ZL7writeOphhh>
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRST);
     d3c:	40 e8       	ldi	r20, 0x80	; 128
     d3e:	6f e1       	ldi	r22, 0x1F	; 31
     d40:	80 ea       	ldi	r24, 0xA0	; 160
     d42:	bd de       	rcall	.-646    	; 0xabe <_ZL7writeOphhh>
        writeOp(ENC28J60_BIT_FIELD_CLR, EIR, EIR_TXERIF|EIR_TXIF);
     d44:	4a e0       	ldi	r20, 0x0A	; 10
     d46:	6c e1       	ldi	r22, 0x1C	; 28
     d48:	80 ea       	ldi	r24, 0xA0	; 160
     d4a:	b9 de       	rcall	.-654    	; 0xabe <_ZL7writeOphhh>

        // prepare new transmission
        if (retry == 0) {
            writeReg(EWRPT, TXSTART_INIT);
     d4c:	60 e0       	ldi	r22, 0x00	; 0
     d4e:	7c e0       	ldi	r23, 0x0C	; 12
     d50:	82 e0       	ldi	r24, 0x02	; 2
            writeReg(ETXND, TXSTART_INIT+len);
     d52:	28 df       	rcall	.-432    	; 0xba4 <_ZL8writeReghj>
     d54:	b6 01       	movw	r22, r12
     d56:	86 e0       	ldi	r24, 0x06	; 6
            writeOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
     d58:	25 df       	rcall	.-438    	; 0xba4 <_ZL8writeReghj>
     d5a:	40 e0       	ldi	r20, 0x00	; 0
     d5c:	60 e0       	ldi	r22, 0x00	; 0
     d5e:	8a e7       	ldi	r24, 0x7A	; 122
     d60:	ae de       	rcall	.-676    	; 0xabe <_ZL7writeOphhh>
    }
    disableChip();
}

static void writeBuf(uint16_t len, const uint8_t* data) {
    enableChip();
     d62:	78 de       	rcall	.-784    	; 0xa54 <_ZL10enableChipv>
     d64:	e1 14       	cp	r14, r1
    if (len != 0) {
     d66:	f1 04       	cpc	r15, r1
     d68:	e1 f0       	breq	.+56     	; 0xda2 <_ZN8ENC28J6010packetSendEj+0x9c>
     d6a:	8a e7       	ldi	r24, 0x7A	; 122
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     d6c:	8e bd       	out	0x2e, r24	; 46
     d6e:	00 00       	nop
		asm volatile("nop");
     d70:	0d b4       	in	r0, 0x2d	; 45
		while(!(SPSR & _BV(SPIF)));
     d72:	07 fe       	sbrs	r0, 7
     d74:	fd cf       	rjmp	.-6      	; 0xd70 <_ZN8ENC28J6010packetSendEj+0x6a>
     d76:	f5 01       	movw	r30, r10

	static void write(const void *buf, uint16_t nbyte){
		if(nbyte == 0) return;
		
		const uint8_t* buff = (const uint8_t*)(buf);
		SPDR = *buff;
     d78:	80 81       	ld	r24, Z
     d7a:	8e bd       	out	0x2e, r24	; 46
     d7c:	f1 e0       	ldi	r31, 0x01	; 1
		while(--nbyte){
     d7e:	ef 16       	cp	r14, r31
     d80:	f1 04       	cpc	r15, r1
     d82:	59 f0       	breq	.+22     	; 0xd9a <_ZN8ENC28J6010packetSendEj+0x94>
     d84:	e6 e5       	ldi	r30, 0x56	; 86
     d86:	f3 e0       	ldi	r31, 0x03	; 3
     d88:	00 00       	nop
			asm volatile("nop");
     d8a:	0d b4       	in	r0, 0x2d	; 45
			while (!(SPSR & _BV(SPIF))) ;
     d8c:	07 fe       	sbrs	r0, 7
     d8e:	fd cf       	rjmp	.-6      	; 0xd8a <_ZN8ENC28J6010packetSendEj+0x84>
     d90:	81 91       	ld	r24, Z+
			SPDR = *++buff;
     d92:	8e bd       	out	0x2e, r24	; 46
     d94:	e0 17       	cp	r30, r16
	static void write(const void *buf, uint16_t nbyte){
		if(nbyte == 0) return;
		
		const uint8_t* buff = (const uint8_t*)(buf);
		SPDR = *buff;
		while(--nbyte){
     d96:	f1 07       	cpc	r31, r17
     d98:	b9 f7       	brne	.-18     	; 0xd88 <_ZN8ENC28J6010packetSendEj+0x82>
			asm volatile("nop");
			while (!(SPSR & _BV(SPIF))) ;
			SPDR = *++buff;
		}
		asm volatile("nop");
     d9a:	00 00       	nop
		while (!(SPSR & _BV(SPIF))) ;
     d9c:	0d b4       	in	r0, 0x2d	; 45
     d9e:	07 fe       	sbrs	r0, 7
        SPI.write8(ENC28J60_WRITE_BUF_MEM);

        SPI.write(data, len);
    }
    disableChip();
     da0:	fd cf       	rjmp	.-6      	; 0xd9c <_ZN8ENC28J6010packetSendEj+0x96>
            writeOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
            writeBuf(len, buffer);
        }

        // initiate transmission
        writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
     da2:	63 de       	rcall	.-826    	; 0xa6a <_ZL11disableChipv>
     da4:	48 e0       	ldi	r20, 0x08	; 8
     da6:	6f e1       	ldi	r22, 0x1F	; 31
     da8:	80 e8       	ldi	r24, 0x80	; 128
     daa:	89 de       	rcall	.-750    	; 0xabe <_ZL7writeOphhh>
        // wait until transmission has finished; referring to the data sheet and
        // to the errata (Errata Issue 13; Example 1) you only need to wait until either
        // TXIF or TXERIF gets set; however this leads to hangs; apparently Microchip
        // realized this and in later implementations of their tcp/ip stack they introduced
        // a counter to avoid hangs; of course they didn't update the errata sheet
        uint16_t count = 0;
     dac:	c0 e0       	ldi	r28, 0x00	; 0
     dae:	d0 e0       	ldi	r29, 0x00	; 0
        while ((readRegByte(EIR) & (EIR_TXIF | EIR_TXERIF)) == 0 && ++count < 1000U)
     db0:	8c e1       	ldi	r24, 0x1C	; 28
     db2:	e4 de       	rcall	.-568    	; 0xb7c <_ZL11readRegByteh>
     db4:	8a 70       	andi	r24, 0x0A	; 10
     db6:	31 f4       	brne	.+12     	; 0xdc4 <_ZN8ENC28J6010packetSendEj+0xbe>
     db8:	21 96       	adiw	r28, 0x01	; 1
     dba:	c8 3e       	cpi	r28, 0xE8	; 232
     dbc:	83 e0       	ldi	r24, 0x03	; 3
     dbe:	d8 07       	cpc	r29, r24
     dc0:	b9 f7       	brne	.-18     	; 0xdb0 <_ZN8ENC28J6010packetSendEj+0xaa>
     dc2:	0c c0       	rjmp	.+24     	; 0xddc <_ZN8ENC28J6010packetSendEj+0xd6>
            ;

        if (!(readRegByte(EIR) & EIR_TXERIF) && count < 1000U) {
     dc4:	8c e1       	ldi	r24, 0x1C	; 28
     dc6:	da de       	rcall	.-588    	; 0xb7c <_ZL11readRegByteh>
     dc8:	81 fd       	sbrc	r24, 1
     dca:	03 c0       	rjmp	.+6      	; 0xdd2 <_ZN8ENC28J6010packetSendEj+0xcc>
     dcc:	c8 3e       	cpi	r28, 0xE8	; 232
     dce:	d3 40       	sbci	r29, 0x03	; 3
            // no error; start new transmission
            break;
        }

        // cancel previous transmission if stuck
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRTS);
     dd0:	40 f0       	brcs	.+16     	; 0xde2 <_ZN8ENC28J6010packetSendEj+0xdc>
     dd2:	48 e0       	ldi	r20, 0x08	; 8
     dd4:	6f e1       	ldi	r22, 0x1F	; 31
     dd6:	80 ea       	ldi	r24, 0xA0	; 160
     dd8:	72 de       	rcall	.-796    	; 0xabe <_ZL7writeOphhh>
};

void ENC28J60::packetSend(uint16_t len) {
    uint8_t retry = 0;

    while (1) {
     dda:	ac cf       	rjmp	.-168    	; 0xd34 <_ZN8ENC28J6010packetSendEj+0x2e>
        // a counter to avoid hangs; of course they didn't update the errata sheet
        uint16_t count = 0;
        while ((readRegByte(EIR) & (EIR_TXIF | EIR_TXERIF)) == 0 && ++count < 1000U)
            ;

        if (!(readRegByte(EIR) & EIR_TXERIF) && count < 1000U) {
     ddc:	8c e1       	ldi	r24, 0x1C	; 28
     dde:	ce de       	rcall	.-612    	; 0xb7c <_ZL11readRegByteh>
     de0:	f8 cf       	rjmp	.-16     	; 0xdd2 <_ZN8ENC28J6010packetSendEj+0xcc>
     de2:	df 91       	pop	r29
        }

        // cancel previous transmission if stuck
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRTS);
    }
}
     de4:	cf 91       	pop	r28
     de6:	1f 91       	pop	r17
     de8:	0f 91       	pop	r16
     dea:	ff 90       	pop	r15
     dec:	ef 90       	pop	r14
     dee:	df 90       	pop	r13
     df0:	cf 90       	pop	r12
     df2:	bf 90       	pop	r11
     df4:	af 90       	pop	r10
     df6:	08 95       	ret

00000df8 <_ZN8ENC28J6013packetReceiveEv>:
     df8:	0f 93       	push	r16


uint16_t ENC28J60::packetReceive() {
     dfa:	1f 93       	push	r17
     dfc:	cf 93       	push	r28
     dfe:	df 93       	push	r29
     e00:	00 d0       	rcall	.+0      	; 0xe02 <_ZN8ENC28J6013packetReceiveEv+0xa>
     e02:	00 d0       	rcall	.+0      	; 0xe04 <_ZN8ENC28J6013packetReceiveEv+0xc>
     e04:	cd b7       	in	r28, 0x3d	; 61
     e06:	de b7       	in	r29, 0x3e	; 62
    static uint16_t gNextPacketPtr = RXSTART_INIT;
    static bool     unreleasedPacket = false;
    uint16_t len = 0;

    if (unreleasedPacket) {
     e08:	80 91 4e 03 	lds	r24, 0x034E	; 0x80034e <_ZZN8ENC28J6013packetReceiveEvE16unreleasedPacket>
     e0c:	88 23       	and	r24, r24
     e0e:	91 f0       	breq	.+36     	; 0xe34 <_ZN8ENC28J6013packetReceiveEv+0x3c>
        if (gNextPacketPtr == 0)
     e10:	60 91 4c 03 	lds	r22, 0x034C	; 0x80034c <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr>
     e14:	70 91 4d 03 	lds	r23, 0x034D	; 0x80034d <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr+0x1>
     e18:	61 15       	cp	r22, r1
     e1a:	71 05       	cpc	r23, r1
     e1c:	29 f4       	brne	.+10     	; 0xe28 <_ZN8ENC28J6013packetReceiveEv+0x30>
            writeReg(ERXRDPT, RXSTOP_INIT);
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7b e0       	ldi	r23, 0x0B	; 11
     e22:	8c e0       	ldi	r24, 0x0C	; 12
     e24:	bf de       	rcall	.-642    	; 0xba4 <_ZL8writeReghj>
     e26:	04 c0       	rjmp	.+8      	; 0xe30 <_ZN8ENC28J6013packetReceiveEv+0x38>
        else
            writeReg(ERXRDPT, gNextPacketPtr - 1);
     e28:	61 50       	subi	r22, 0x01	; 1
     e2a:	71 09       	sbc	r23, r1
     e2c:	8c e0       	ldi	r24, 0x0C	; 12
     e2e:	ba de       	rcall	.-652    	; 0xba4 <_ZL8writeReghj>
        unreleasedPacket = false;
     e30:	10 92 4e 03 	sts	0x034E, r1	; 0x80034e <_ZZN8ENC28J6013packetReceiveEvE16unreleasedPacket>
    }

    if (readRegByte(EPKTCNT) > 0) {
     e34:	89 e3       	ldi	r24, 0x39	; 57
     e36:	a2 de       	rcall	.-700    	; 0xb7c <_ZL11readRegByteh>
     e38:	88 23       	and	r24, r24
     e3a:	a9 f1       	breq	.+106    	; 0xea6 <_ZN8ENC28J6013packetReceiveEv+0xae>
        writeReg(ERDPT, gNextPacketPtr);
     e3c:	60 91 4c 03 	lds	r22, 0x034C	; 0x80034c <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr>
     e40:	70 91 4d 03 	lds	r23, 0x034D	; 0x80034d <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr+0x1>
     e44:	80 e0       	ldi	r24, 0x00	; 0
     e46:	ae de       	rcall	.-676    	; 0xba4 <_ZL8writeReghj>
            uint16_t nextPacket;
            uint16_t byteCount;
            uint16_t status;
        } header;

        readBuf(sizeof header, (uint8_t*) &header);
     e48:	be 01       	movw	r22, r28
     e4a:	6f 5f       	subi	r22, 0xFF	; 255
     e4c:	7f 4f       	sbci	r23, 0xFF	; 255
     e4e:	86 e0       	ldi	r24, 0x06	; 6
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	4d de       	rcall	.-870    	; 0xaee <_ZL7readBufjPh>

        gNextPacketPtr  = header.nextPacket;
     e54:	89 81       	ldd	r24, Y+1	; 0x01
     e56:	9a 81       	ldd	r25, Y+2	; 0x02
     e58:	90 93 4d 03 	sts	0x034D, r25	; 0x80034d <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr+0x1>
     e5c:	80 93 4c 03 	sts	0x034C, r24	; 0x80034c <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr>
        len = header.byteCount - 4; //remove the CRC count
        if (len>bufferSize-1)
            len=bufferSize-1;
        if ((header.status & 0x80)==0)
     e60:	8d 81       	ldd	r24, Y+5	; 0x05
     e62:	87 ff       	sbrs	r24, 7
     e64:	12 c0       	rjmp	.+36     	; 0xe8a <_ZN8ENC28J6013packetReceiveEv+0x92>

        readBuf(sizeof header, (uint8_t*) &header);

        gNextPacketPtr  = header.nextPacket;
        len = header.byteCount - 4; //remove the CRC count
        if (len>bufferSize-1)
     e66:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <_ZN8ENC28J6010bufferSizeE>
     e6a:	90 91 54 03 	lds	r25, 0x0354	; 0x800354 <_ZN8ENC28J6010bufferSizeE+0x1>
     e6e:	01 97       	sbiw	r24, 0x01	; 1
        } header;

        readBuf(sizeof header, (uint8_t*) &header);

        gNextPacketPtr  = header.nextPacket;
        len = header.byteCount - 4; //remove the CRC count
     e70:	0b 81       	ldd	r16, Y+3	; 0x03
     e72:	1c 81       	ldd	r17, Y+4	; 0x04
     e74:	04 50       	subi	r16, 0x04	; 4
     e76:	11 09       	sbc	r17, r1
     e78:	80 17       	cp	r24, r16
     e7a:	91 07       	cpc	r25, r17
     e7c:	08 f4       	brcc	.+2      	; 0xe80 <_ZN8ENC28J6013packetReceiveEv+0x88>
        if (len>bufferSize-1)
            len=bufferSize-1;
        if ((header.status & 0x80)==0)
            len = 0;
        else
            readBuf(len, buffer);
     e7e:	8c 01       	movw	r16, r24
     e80:	65 e5       	ldi	r22, 0x55	; 85
     e82:	73 e0       	ldi	r23, 0x03	; 3
     e84:	c8 01       	movw	r24, r16
     e86:	33 de       	rcall	.-922    	; 0xaee <_ZL7readBufjPh>
     e88:	02 c0       	rjmp	.+4      	; 0xe8e <_ZN8ENC28J6013packetReceiveEv+0x96>
        gNextPacketPtr  = header.nextPacket;
        len = header.byteCount - 4; //remove the CRC count
        if (len>bufferSize-1)
            len=bufferSize-1;
        if ((header.status & 0x80)==0)
            len = 0;
     e8a:	00 e0       	ldi	r16, 0x00	; 0
     e8c:	10 e0       	ldi	r17, 0x00	; 0
        else
            readBuf(len, buffer);
        buffer[len] = 0;
     e8e:	f8 01       	movw	r30, r16
     e90:	eb 5a       	subi	r30, 0xAB	; 171
     e92:	fc 4f       	sbci	r31, 0xFC	; 252
     e94:	10 82       	st	Z, r1
        unreleasedPacket = true;
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <_ZZN8ENC28J6013packetReceiveEvE16unreleasedPacket>

        writeOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
     e9c:	40 e4       	ldi	r20, 0x40	; 64
     e9e:	6e e1       	ldi	r22, 0x1E	; 30
     ea0:	80 e8       	ldi	r24, 0x80	; 128
     ea2:	0d de       	rcall	.-998    	; 0xabe <_ZL7writeOphhh>
     ea4:	02 c0       	rjmp	.+4      	; 0xeaa <_ZN8ENC28J6013packetReceiveEv+0xb2>


uint16_t ENC28J60::packetReceive() {
    static uint16_t gNextPacketPtr = RXSTART_INIT;
    static bool     unreleasedPacket = false;
    uint16_t len = 0;
     ea6:	00 e0       	ldi	r16, 0x00	; 0
     ea8:	10 e0       	ldi	r17, 0x00	; 0
        unreleasedPacket = true;

        writeOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
    }
    return len;
}
     eaa:	c8 01       	movw	r24, r16
     eac:	26 96       	adiw	r28, 0x06	; 6
     eae:	0f b6       	in	r0, 0x3f	; 63
     eb0:	f8 94       	cli
     eb2:	de bf       	out	0x3e, r29	; 62
     eb4:	0f be       	out	0x3f, r0	; 63
     eb6:	cd bf       	out	0x3d, r28	; 61
     eb8:	df 91       	pop	r29
     eba:	cf 91       	pop	r28
     ebc:	1f 91       	pop	r17
     ebe:	0f 91       	pop	r16
     ec0:	08 95       	ret

00000ec2 <_ZN9EtherCard5beginEPKhRVhS3_h>:
uint16_t EtherCard::delaycnt = 0; //request gateway ARP lookup

uint8_t Ethernet::buffer[ETHER_CARD_BUFFER_SIZE]; // tcp/ip send and receive buffer

uint8_t EtherCard::begin (const uint8_t* macaddr,
                          Register& csDDR, Register& csPort, uint8_t csPin) {
     ec2:	ef 92       	push	r14
     ec4:	ff 92       	push	r15
     ec6:	0f 93       	push	r16
     ec8:	cf 93       	push	r28
     eca:	df 93       	push	r29
     ecc:	eb 01       	movw	r28, r22
     ece:	7a 01       	movw	r14, r20
     ed0:	02 2f       	mov	r16, r18

    copyMac(mymac, macaddr);
     ed2:	bc 01       	movw	r22, r24
     ed4:	8f e6       	ldi	r24, 0x6F	; 111
     ed6:	95 e0       	ldi	r25, 0x05	; 5
     ed8:	c9 d3       	rcall	.+1938   	; 0x166c <_ZN9EtherCard7copyMacEPhPKh>
    return initialize(ETHER_CARD_BUFFER_SIZE, mymac, csDDR, csPort, csPin);
     eda:	97 01       	movw	r18, r14
     edc:	ae 01       	movw	r20, r28
     ede:	6f e6       	ldi	r22, 0x6F	; 111
     ee0:	75 e0       	ldi	r23, 0x05	; 5
     ee2:	80 e0       	ldi	r24, 0x00	; 0
     ee4:	92 e0       	ldi	r25, 0x02	; 2
     ee6:	7c de       	rcall	.-776    	; 0xbe0 <_ZN8ENC28J6010initializeEjPKhRVhS3_h>
}
     ee8:	df 91       	pop	r29
     eea:	cf 91       	pop	r28
     eec:	0f 91       	pop	r16
     eee:	ff 90       	pop	r15
     ef0:	ef 90       	pop	r14
     ef2:	08 95       	ret

00000ef4 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_>:

bool EtherCard::staticSetup (const uint8_t* my_ip,
                             const uint8_t* gw_ip,
                             const uint8_t* dns_ip,
                             const uint8_t* mask) {
     ef4:	ef 92       	push	r14
     ef6:	ff 92       	push	r15
     ef8:	0f 93       	push	r16
     efa:	1f 93       	push	r17
     efc:	cf 93       	push	r28
     efe:	df 93       	push	r29
     f00:	7b 01       	movw	r14, r22
     f02:	8a 01       	movw	r16, r20
     f04:	e9 01       	movw	r28, r18

    if (my_ip != 0)
     f06:	00 97       	sbiw	r24, 0x00	; 0
     f08:	21 f0       	breq	.+8      	; 0xf12 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x1e>
        copyIp(myip, my_ip);
     f0a:	bc 01       	movw	r22, r24
     f0c:	8b e6       	ldi	r24, 0x6B	; 107
     f0e:	95 e0       	ldi	r25, 0x05	; 5
     f10:	a0 d3       	rcall	.+1856   	; 0x1652 <_ZN9EtherCard6copyIpEPhPKh>
    if (gw_ip != 0)
     f12:	e1 14       	cp	r14, r1
     f14:	f1 04       	cpc	r15, r1
     f16:	11 f0       	breq	.+4      	; 0xf1c <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x28>
        setGwIp(gw_ip);
     f18:	c7 01       	movw	r24, r14
     f1a:	bd d1       	rcall	.+890    	; 0x1296 <_ZN9EtherCard7setGwIpEPKh>
    if (dns_ip != 0)
     f1c:	01 15       	cp	r16, r1
     f1e:	11 05       	cpc	r17, r1
     f20:	21 f0       	breq	.+8      	; 0xf2a <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x36>
        copyIp(dnsip, dns_ip);
     f22:	b8 01       	movw	r22, r16
     f24:	8b e5       	ldi	r24, 0x5B	; 91
     f26:	95 e0       	ldi	r25, 0x05	; 5
     f28:	94 d3       	rcall	.+1832   	; 0x1652 <_ZN9EtherCard6copyIpEPhPKh>
    if(mask != 0)
     f2a:	20 97       	sbiw	r28, 0x00	; 0
     f2c:	21 f0       	breq	.+8      	; 0xf36 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x42>
        copyIp(netmask, mask);
     f2e:	be 01       	movw	r22, r28
     f30:	87 e6       	ldi	r24, 0x67	; 103
     f32:	95 e0       	ldi	r25, 0x05	; 5
    updateBroadcastAddress();
     f34:	8e d3       	rcall	.+1820   	; 0x1652 <_ZN9EtherCard6copyIpEPhPKh>
     f36:	bb d1       	rcall	.+886    	; 0x12ae <_ZN9EtherCard22updateBroadcastAddressEv>
    delaycnt = 0; //request gateway ARP lookup
     f38:	10 92 56 05 	sts	0x0556, r1	; 0x800556 <_ZN9EtherCard8delaycntE+0x1>
     f3c:	10 92 55 05 	sts	0x0555, r1	; 0x800555 <_ZN9EtherCard8delaycntE>
    return true;
}
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	df 91       	pop	r29
     f44:	cf 91       	pop	r28
     f46:	1f 91       	pop	r17
     f48:	0f 91       	pop	r16
     f4a:	ff 90       	pop	r15
     f4c:	ef 90       	pop	r14
     f4e:	08 95       	ret

00000f50 <_ZL13fill_checksumhhjh>:
    for(uint8_t i=0; i<IP_LEN; i++)
        broadcastip[i] = myip[i] | ~netmask[i];
}

void EtherCard::registerPingCallback (void (*callback)(uint8_t *srcip)) {
    icmp_cb = callback;
     f50:	cf 92       	push	r12
     f52:	df 92       	push	r13
     f54:	ef 92       	push	r14
     f56:	ff 92       	push	r15
     f58:	cf 93       	push	r28
     f5a:	df 93       	push	r29
     f5c:	c6 2f       	mov	r28, r22
     f5e:	d0 e0       	ldi	r29, 0x00	; 0
     f60:	cb 5a       	subi	r28, 0xAB	; 171
     f62:	dc 4f       	sbci	r29, 0xFC	; 252
     f64:	21 30       	cpi	r18, 0x01	; 1
     f66:	81 f4       	brne	.+32     	; 0xf88 <_ZL13fill_checksumhhjh+0x38>
     f68:	6a 01       	movw	r12, r20
     f6a:	99 e0       	ldi	r25, 0x09	; 9
     f6c:	c9 0e       	add	r12, r25
     f6e:	d1 1c       	adc	r13, r1
     f70:	e1 2c       	mov	r14, r1
     f72:	f1 2c       	mov	r15, r1
     f74:	03 c0       	rjmp	.+6      	; 0xf7c <_ZL13fill_checksumhhjh+0x2c>
     f76:	c1 2c       	mov	r12, r1
     f78:	d1 2c       	mov	r13, r1
     f7a:	76 01       	movw	r14, r12
     f7c:	42 30       	cpi	r20, 0x02	; 2
     f7e:	51 05       	cpc	r21, r1
     f80:	28 f1       	brcs	.+74     	; 0xfcc <_ZL13fill_checksumhhjh+0x7c>
     f82:	fe 01       	movw	r30, r28
     f84:	da 01       	movw	r26, r20
     f86:	09 c0       	rjmp	.+18     	; 0xf9a <_ZL13fill_checksumhhjh+0x4a>
     f88:	22 30       	cpi	r18, 0x02	; 2
     f8a:	a9 f7       	brne	.-22     	; 0xf76 <_ZL13fill_checksumhhjh+0x26>
     f8c:	6a 01       	movw	r12, r20
     f8e:	92 e0       	ldi	r25, 0x02	; 2
     f90:	c9 1a       	sub	r12, r25
     f92:	d1 08       	sbc	r13, r1
     f94:	e1 2c       	mov	r14, r1
     f96:	f1 2c       	mov	r15, r1
     f98:	f1 cf       	rjmp	.-30     	; 0xf7c <_ZL13fill_checksumhhjh+0x2c>
     f9a:	20 81       	ld	r18, Z
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	32 2f       	mov	r19, r18
     fa0:	22 27       	eor	r18, r18
     fa2:	91 81       	ldd	r25, Z+1	; 0x01
     fa4:	29 2b       	or	r18, r25
     fa6:	c2 0e       	add	r12, r18
     fa8:	d3 1e       	adc	r13, r19
     faa:	e1 1c       	adc	r14, r1
     fac:	f1 1c       	adc	r15, r1
     fae:	32 96       	adiw	r30, 0x02	; 2
     fb0:	12 97       	sbiw	r26, 0x02	; 2
     fb2:	a2 30       	cpi	r26, 0x02	; 2
     fb4:	b1 05       	cpc	r27, r1
     fb6:	88 f7       	brcc	.-30     	; 0xf9a <_ZL13fill_checksumhhjh+0x4a>
     fb8:	9a 01       	movw	r18, r20
     fba:	22 50       	subi	r18, 0x02	; 2
     fbc:	31 09       	sbc	r19, r1
     fbe:	2e 7f       	andi	r18, 0xFE	; 254
     fc0:	2e 5f       	subi	r18, 0xFE	; 254
     fc2:	3f 4f       	sbci	r19, 0xFF	; 255
     fc4:	c2 0f       	add	r28, r18
     fc6:	d3 1f       	adc	r29, r19
     fc8:	41 70       	andi	r20, 0x01	; 1
     fca:	55 27       	eor	r21, r21
     fcc:	45 2b       	or	r20, r21
     fce:	61 f0       	breq	.+24     	; 0xfe8 <_ZL13fill_checksumhhjh+0x98>
     fd0:	48 81       	ld	r20, Y
     fd2:	50 e0       	ldi	r21, 0x00	; 0
     fd4:	60 e0       	ldi	r22, 0x00	; 0
     fd6:	70 e0       	ldi	r23, 0x00	; 0
     fd8:	76 2f       	mov	r23, r22
     fda:	65 2f       	mov	r22, r21
     fdc:	54 2f       	mov	r21, r20
     fde:	44 27       	eor	r20, r20
     fe0:	c4 0e       	add	r12, r20
     fe2:	d5 1e       	adc	r13, r21
     fe4:	e6 1e       	adc	r14, r22
     fe6:	f7 1e       	adc	r15, r23
     fe8:	a7 01       	movw	r20, r14
     fea:	66 27       	eor	r22, r22
     fec:	77 27       	eor	r23, r23
     fee:	41 15       	cp	r20, r1
     ff0:	51 05       	cpc	r21, r1
     ff2:	61 05       	cpc	r22, r1
     ff4:	71 05       	cpc	r23, r1
     ff6:	71 f0       	breq	.+28     	; 0x1014 <_ZL13fill_checksumhhjh+0xc4>
     ff8:	ee 24       	eor	r14, r14
     ffa:	ff 24       	eor	r15, r15
     ffc:	c4 0e       	add	r12, r20
     ffe:	d5 1e       	adc	r13, r21
    1000:	e6 1e       	adc	r14, r22
    1002:	f7 1e       	adc	r15, r23
    1004:	a7 01       	movw	r20, r14
    1006:	66 27       	eor	r22, r22
    1008:	77 27       	eor	r23, r23
    100a:	41 15       	cp	r20, r1
    100c:	51 05       	cpc	r21, r1
    100e:	61 05       	cpc	r22, r1
    1010:	71 05       	cpc	r23, r1
    1012:	91 f7       	brne	.-28     	; 0xff8 <_ZL13fill_checksumhhjh+0xa8>
    1014:	c0 94       	com	r12
    1016:	d0 94       	com	r13
    1018:	e8 2f       	mov	r30, r24
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	eb 5a       	subi	r30, 0xAB	; 171
    101e:	fc 4f       	sbci	r31, 0xFC	; 252
    1020:	d0 82       	st	Z, r13
    1022:	c1 82       	std	Z+1, r12	; 0x01
    1024:	df 91       	pop	r29
    1026:	cf 91       	pop	r28
    1028:	ff 90       	pop	r15
    102a:	ef 90       	pop	r14
    102c:	df 90       	pop	r13
    102e:	cf 90       	pop	r12
    1030:	08 95       	ret

00001032 <_ZL6is_lanPKhS0_>:
    1032:	cf 93       	push	r28
    1034:	df 93       	push	r29
    1036:	fc 01       	movw	r30, r24
    1038:	20 81       	ld	r18, Z
    103a:	22 23       	and	r18, r18
    103c:	d1 f0       	breq	.+52     	; 0x1072 <_ZL6is_lanPKhS0_+0x40>
    103e:	fb 01       	movw	r30, r22
    1040:	30 81       	ld	r19, Z
    1042:	33 23       	and	r19, r19
    1044:	c1 f0       	breq	.+48     	; 0x1076 <_ZL6is_lanPKhS0_+0x44>
    1046:	23 27       	eor	r18, r19
    1048:	30 91 67 05 	lds	r19, 0x0567	; 0x800567 <_ZN9EtherCard7netmaskE>
    104c:	23 23       	and	r18, r19
    104e:	a9 f4       	brne	.+42     	; 0x107a <_ZL6is_lanPKhS0_+0x48>
    1050:	dc 01       	movw	r26, r24
    1052:	11 96       	adiw	r26, 0x01	; 1
    1054:	31 96       	adiw	r30, 0x01	; 1
    1056:	c8 e6       	ldi	r28, 0x68	; 104
    1058:	d5 e0       	ldi	r29, 0x05	; 5
    105a:	04 96       	adiw	r24, 0x04	; 4
    105c:	4d 91       	ld	r20, X+
    105e:	21 91       	ld	r18, Z+
    1060:	39 91       	ld	r19, Y+
    1062:	24 27       	eor	r18, r20
    1064:	23 23       	and	r18, r19
    1066:	59 f4       	brne	.+22     	; 0x107e <_ZL6is_lanPKhS0_+0x4c>
    1068:	a8 17       	cp	r26, r24
    106a:	b9 07       	cpc	r27, r25
    106c:	b9 f7       	brne	.-18     	; 0x105c <_ZL6is_lanPKhS0_+0x2a>
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	07 c0       	rjmp	.+14     	; 0x1080 <_ZL6is_lanPKhS0_+0x4e>
    1072:	80 e0       	ldi	r24, 0x00	; 0
    1074:	05 c0       	rjmp	.+10     	; 0x1080 <_ZL6is_lanPKhS0_+0x4e>
    1076:	80 e0       	ldi	r24, 0x00	; 0
    1078:	03 c0       	rjmp	.+6      	; 0x1080 <_ZL6is_lanPKhS0_+0x4e>
    107a:	80 e0       	ldi	r24, 0x00	; 0
    107c:	01 c0       	rjmp	.+2      	; 0x1080 <_ZL6is_lanPKhS0_+0x4e>
    107e:	80 e0       	ldi	r24, 0x00	; 0
    1080:	df 91       	pop	r29
    1082:	cf 91       	pop	r28
    1084:	08 95       	ret

00001086 <_ZL20fill_ip_hdr_checksumv>:
    1086:	e5 e5       	ldi	r30, 0x55	; 85
    1088:	f3 e0       	ldi	r31, 0x03	; 3
    108a:	10 8e       	std	Z+24, r1	; 0x18
    108c:	11 8e       	std	Z+25, r1	; 0x19
    108e:	80 e4       	ldi	r24, 0x40	; 64
    1090:	84 8b       	std	Z+20, r24	; 0x14
    1092:	15 8a       	std	Z+21, r1	; 0x15
    1094:	86 8b       	std	Z+22, r24	; 0x16
    1096:	20 e0       	ldi	r18, 0x00	; 0
    1098:	44 e1       	ldi	r20, 0x14	; 20
    109a:	50 e0       	ldi	r21, 0x00	; 0
    109c:	6e e0       	ldi	r22, 0x0E	; 14
    109e:	88 e1       	ldi	r24, 0x18	; 24
    10a0:	57 cf       	rjmp	.-338    	; 0xf50 <_ZL13fill_checksumhhjh>
    10a2:	08 95       	ret

000010a4 <_ZL7setMACsPKh>:
    10a4:	bc 01       	movw	r22, r24
    10a6:	85 e5       	ldi	r24, 0x55	; 85
    10a8:	93 e0       	ldi	r25, 0x03	; 3
    10aa:	e0 d2       	rcall	.+1472   	; 0x166c <_ZN9EtherCard7copyMacEPhPKh>
    10ac:	6f e6       	ldi	r22, 0x6F	; 111
    10ae:	75 e0       	ldi	r23, 0x05	; 5
    10b0:	8b e5       	ldi	r24, 0x5B	; 91
    10b2:	93 e0       	ldi	r25, 0x03	; 3
    10b4:	db c2       	rjmp	.+1462   	; 0x166c <_ZN9EtherCard7copyMacEPhPKh>
    10b6:	08 95       	ret

000010b8 <_ZL11make_eth_ipv>:
    10b8:	8b e5       	ldi	r24, 0x5B	; 91
    10ba:	93 e0       	ldi	r25, 0x03	; 3
    10bc:	f3 df       	rcall	.-26     	; 0x10a4 <_ZL7setMACsPKh>
    10be:	6f e6       	ldi	r22, 0x6F	; 111
    10c0:	73 e0       	ldi	r23, 0x03	; 3
    10c2:	83 e7       	ldi	r24, 0x73	; 115
    10c4:	93 e0       	ldi	r25, 0x03	; 3
    10c6:	c5 d2       	rcall	.+1418   	; 0x1652 <_ZN9EtherCard6copyIpEPhPKh>
    10c8:	6b e6       	ldi	r22, 0x6B	; 107
    10ca:	75 e0       	ldi	r23, 0x05	; 5
    10cc:	8f e6       	ldi	r24, 0x6F	; 111
    10ce:	93 e0       	ldi	r25, 0x03	; 3
    10d0:	c0 d2       	rcall	.+1408   	; 0x1652 <_ZN9EtherCard6copyIpEPhPKh>
    10d2:	d9 cf       	rjmp	.-78     	; 0x1086 <_ZL20fill_ip_hdr_checksumv>
    10d4:	08 95       	ret

000010d6 <_ZL12setMACandIPsPKhS0_>:
    10d6:	cf 93       	push	r28
    10d8:	df 93       	push	r29
    10da:	eb 01       	movw	r28, r22
    10dc:	e3 df       	rcall	.-58     	; 0x10a4 <_ZL7setMACsPKh>
    10de:	be 01       	movw	r22, r28
    10e0:	83 e7       	ldi	r24, 0x73	; 115
    10e2:	93 e0       	ldi	r25, 0x03	; 3
    10e4:	b6 d2       	rcall	.+1388   	; 0x1652 <_ZN9EtherCard6copyIpEPhPKh>
    10e6:	6b e6       	ldi	r22, 0x6B	; 107
    10e8:	75 e0       	ldi	r23, 0x05	; 5
    10ea:	8f e6       	ldi	r24, 0x6F	; 111
    10ec:	93 e0       	ldi	r25, 0x03	; 3
    10ee:	b1 d2       	rcall	.+1378   	; 0x1652 <_ZN9EtherCard6copyIpEPhPKh>
    10f0:	df 91       	pop	r29
    10f2:	cf 91       	pop	r28
    10f4:	08 95       	ret

000010f6 <_ZL16client_store_macPhS_>:
    10f6:	cf 93       	push	r28
    10f8:	df 93       	push	r29
    10fa:	eb 01       	movw	r28, r22
    10fc:	44 e0       	ldi	r20, 0x04	; 4
    10fe:	50 e0       	ldi	r21, 0x00	; 0
    1100:	bc 01       	movw	r22, r24
    1102:	81 e7       	ldi	r24, 0x71	; 113
    1104:	93 e0       	ldi	r25, 0x03	; 3
    1106:	0e 94 95 24 	call	0x492a	; 0x492a <memcmp>
    110a:	89 2b       	or	r24, r25
    110c:	31 f4       	brne	.+12     	; 0x111a <_ZL16client_store_macPhS_+0x24>
    110e:	6b e6       	ldi	r22, 0x6B	; 107
    1110:	73 e0       	ldi	r23, 0x03	; 3
    1112:	ce 01       	movw	r24, r28
    1114:	ab d2       	rcall	.+1366   	; 0x166c <_ZN9EtherCard7copyMacEPhPKh>
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	01 c0       	rjmp	.+2      	; 0x111c <_ZL16client_store_macPhS_+0x26>
    111a:	80 e0       	ldi	r24, 0x00	; 0
    111c:	df 91       	pop	r29
    111e:	cf 91       	pop	r28
    1120:	08 95       	ret

00001122 <_ZL17client_arp_whohasPh>:
    1122:	0f 93       	push	r16
    1124:	1f 93       	push	r17
    1126:	cf 93       	push	r28
    1128:	8c 01       	movw	r16, r24
    112a:	85 e2       	ldi	r24, 0x25	; 37
    112c:	92 e0       	ldi	r25, 0x02	; 2
    112e:	ba df       	rcall	.-140    	; 0x10a4 <_ZL7setMACsPKh>
    1130:	e5 e5       	ldi	r30, 0x55	; 85
    1132:	f3 e0       	ldi	r31, 0x03	; 3
    1134:	88 e0       	ldi	r24, 0x08	; 8
    1136:	84 87       	std	Z+12, r24	; 0x0c
    1138:	c6 e0       	ldi	r28, 0x06	; 6
    113a:	c5 87       	std	Z+13, r28	; 0x0d
    113c:	48 e0       	ldi	r20, 0x08	; 8
    113e:	50 e0       	ldi	r21, 0x00	; 0
    1140:	6f e7       	ldi	r22, 0x7F	; 127
    1142:	72 e0       	ldi	r23, 0x02	; 2
    1144:	83 e6       	ldi	r24, 0x63	; 99
    1146:	93 e0       	ldi	r25, 0x03	; 3
    1148:	0e 94 8c 24 	call	0x4918	; 0x4918 <memcpy_P>
    114c:	e5 e7       	ldi	r30, 0x75	; 117
    114e:	f3 e0       	ldi	r31, 0x03	; 3
    1150:	df 01       	movw	r26, r30
    1152:	1d 92       	st	X+, r1
    1154:	ca 95       	dec	r28
    1156:	e9 f7       	brne	.-6      	; 0x1152 <_ZL17client_arp_whohasPh+0x30>
    1158:	6f e6       	ldi	r22, 0x6F	; 111
    115a:	75 e0       	ldi	r23, 0x05	; 5
    115c:	8b e6       	ldi	r24, 0x6B	; 107
    115e:	93 e0       	ldi	r25, 0x03	; 3
    1160:	85 d2       	rcall	.+1290   	; 0x166c <_ZN9EtherCard7copyMacEPhPKh>
    1162:	b8 01       	movw	r22, r16
    1164:	8b e7       	ldi	r24, 0x7B	; 123
    1166:	93 e0       	ldi	r25, 0x03	; 3
    1168:	74 d2       	rcall	.+1256   	; 0x1652 <_ZN9EtherCard6copyIpEPhPKh>
    116a:	6b e6       	ldi	r22, 0x6B	; 107
    116c:	75 e0       	ldi	r23, 0x05	; 5
    116e:	81 e7       	ldi	r24, 0x71	; 113
    1170:	93 e0       	ldi	r25, 0x03	; 3
    1172:	6f d2       	rcall	.+1246   	; 0x1652 <_ZN9EtherCard6copyIpEPhPKh>
    1174:	8a e2       	ldi	r24, 0x2A	; 42
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	c6 dd       	rcall	.-1140   	; 0xd06 <_ZN8ENC28J6010packetSendEj>
    117a:	cf 91       	pop	r28
    117c:	1f 91       	pop	r17
    117e:	0f 91       	pop	r16
    1180:	08 95       	ret

00001182 <_ZN9EtherCard10udpPrepareEjPKhj>:
    1182:	ef 92       	push	r14
    1184:	ff 92       	push	r15
    1186:	0f 93       	push	r16
    1188:	1f 93       	push	r17
    118a:	cf 93       	push	r28
    118c:	df 93       	push	r29
    118e:	18 2f       	mov	r17, r24
    1190:	09 2f       	mov	r16, r25
    1192:	eb 01       	movw	r28, r22
    1194:	f4 2e       	mov	r15, r20
    1196:	e5 2e       	mov	r14, r21
    1198:	8b e6       	ldi	r24, 0x6B	; 107
    119a:	95 e0       	ldi	r25, 0x05	; 5
    119c:	4a df       	rcall	.-364    	; 0x1032 <_ZL6is_lanPKhS0_>
    119e:	88 23       	and	r24, r24
    11a0:	29 f0       	breq	.+10     	; 0x11ac <_ZN9EtherCard10udpPrepareEjPKhj+0x2a>
    11a2:	be 01       	movw	r22, r28
    11a4:	80 e8       	ldi	r24, 0x80	; 128
    11a6:	95 e0       	ldi	r25, 0x05	; 5
    11a8:	96 df       	rcall	.-212    	; 0x10d6 <_ZL12setMACandIPsPKhS0_>
    11aa:	04 c0       	rjmp	.+8      	; 0x11b4 <_ZN9EtherCard10udpPrepareEjPKhj+0x32>
    11ac:	be 01       	movw	r22, r28
    11ae:	86 e7       	ldi	r24, 0x76	; 118
    11b0:	95 e0       	ldi	r25, 0x05	; 5
    11b2:	91 df       	rcall	.-222    	; 0x10d6 <_ZL12setMACandIPsPKhS0_>
    11b4:	88 81       	ld	r24, Y
    11b6:	80 7f       	andi	r24, 0xF0	; 240
    11b8:	80 3e       	cpi	r24, 0xE0	; 224
    11ba:	91 f0       	breq	.+36     	; 0x11e0 <_ZN9EtherCard10udpPrepareEjPKhj+0x5e>
    11bc:	88 81       	ld	r24, Y
    11be:	99 81       	ldd	r25, Y+1	; 0x01
    11c0:	aa 81       	ldd	r26, Y+2	; 0x02
    11c2:	bb 81       	ldd	r27, Y+3	; 0x03
    11c4:	8f 3f       	cpi	r24, 0xFF	; 255
    11c6:	9f 4f       	sbci	r25, 0xFF	; 255
    11c8:	af 4f       	sbci	r26, 0xFF	; 255
    11ca:	bf 4f       	sbci	r27, 0xFF	; 255
    11cc:	49 f0       	breq	.+18     	; 0x11e0 <_ZN9EtherCard10udpPrepareEjPKhj+0x5e>
    11ce:	44 e0       	ldi	r20, 0x04	; 4
    11d0:	50 e0       	ldi	r21, 0x00	; 0
    11d2:	be 01       	movw	r22, r28
    11d4:	83 e6       	ldi	r24, 0x63	; 99
    11d6:	95 e0       	ldi	r25, 0x05	; 5
    11d8:	0e 94 95 24 	call	0x492a	; 0x492a <memcmp>
    11dc:	89 2b       	or	r24, r25
    11de:	29 f4       	brne	.+10     	; 0x11ea <_ZN9EtherCard10udpPrepareEjPKhj+0x68>
    11e0:	65 e2       	ldi	r22, 0x25	; 37
    11e2:	72 e0       	ldi	r23, 0x02	; 2
    11e4:	85 e5       	ldi	r24, 0x55	; 85
    11e6:	93 e0       	ldi	r25, 0x03	; 3
    11e8:	41 d2       	rcall	.+1154   	; 0x166c <_ZN9EtherCard7copyMacEPhPKh>
    11ea:	c5 e5       	ldi	r28, 0x55	; 85
    11ec:	d3 e0       	ldi	r29, 0x03	; 3
    11ee:	88 e0       	ldi	r24, 0x08	; 8
    11f0:	8c 87       	std	Y+12, r24	; 0x0c
    11f2:	1d 86       	std	Y+13, r1	; 0x0d
    11f4:	49 e0       	ldi	r20, 0x09	; 9
    11f6:	50 e0       	ldi	r21, 0x00	; 0
    11f8:	66 e7       	ldi	r22, 0x76	; 118
    11fa:	72 e0       	ldi	r23, 0x02	; 2
    11fc:	83 e6       	ldi	r24, 0x63	; 99
    11fe:	93 e0       	ldi	r25, 0x03	; 3
    1200:	0e 94 8c 24 	call	0x4918	; 0x4918 <memcpy_P>
    1204:	18 8a       	std	Y+16, r1	; 0x10
    1206:	81 e1       	ldi	r24, 0x11	; 17
    1208:	8f 8b       	std	Y+23, r24	; 0x17
    120a:	ec a2       	std	Y+36, r14	; 0x24
    120c:	fd a2       	std	Y+37, r15	; 0x25
    120e:	0a a3       	std	Y+34, r16	; 0x22
    1210:	1b a3       	std	Y+35, r17	; 0x23
    1212:	1e a2       	std	Y+38, r1	; 0x26
    1214:	18 a6       	std	Y+40, r1	; 0x28
    1216:	19 a6       	std	Y+41, r1	; 0x29
    1218:	df 91       	pop	r29
    121a:	cf 91       	pop	r28
    121c:	1f 91       	pop	r17
    121e:	0f 91       	pop	r16
    1220:	ff 90       	pop	r15
    1222:	ef 90       	pop	r14
    1224:	08 95       	ret

00001226 <_ZN9EtherCard11udpTransmitEj>:
    1226:	0f 93       	push	r16
    1228:	1f 93       	push	r17
    122a:	cf 93       	push	r28
    122c:	df 93       	push	r29
    122e:	ec 01       	movw	r28, r24
    1230:	05 e5       	ldi	r16, 0x55	; 85
    1232:	13 e0       	ldi	r17, 0x03	; 3
    1234:	4c 96       	adiw	r24, 0x1c	; 28
    1236:	f8 01       	movw	r30, r16
    1238:	90 8b       	std	Z+16, r25	; 0x10
    123a:	81 8b       	std	Z+17, r24	; 0x11
    123c:	24 df       	rcall	.-440    	; 0x1086 <_ZL20fill_ip_hdr_checksumv>
    123e:	ce 01       	movw	r24, r28
    1240:	08 96       	adiw	r24, 0x08	; 8
    1242:	f8 01       	movw	r30, r16
    1244:	96 a3       	std	Z+38, r25	; 0x26
    1246:	87 a3       	std	Z+39, r24	; 0x27
    1248:	ae 01       	movw	r20, r28
    124a:	40 5f       	subi	r20, 0xF0	; 240
    124c:	5f 4f       	sbci	r21, 0xFF	; 255
    124e:	21 e0       	ldi	r18, 0x01	; 1
    1250:	6a e1       	ldi	r22, 0x1A	; 26
    1252:	88 e2       	ldi	r24, 0x28	; 40
    1254:	7d de       	rcall	.-774    	; 0xf50 <_ZL13fill_checksumhhjh>
    1256:	ce 01       	movw	r24, r28
    1258:	8a 96       	adiw	r24, 0x2a	; 42
    125a:	55 dd       	rcall	.-1366   	; 0xd06 <_ZN8ENC28J6010packetSendEj>
    125c:	df 91       	pop	r29
    125e:	cf 91       	pop	r28
    1260:	1f 91       	pop	r17
    1262:	0f 91       	pop	r16
    1264:	08 95       	ret

00001266 <_ZN9EtherCard7sendUdpEPKhjjS1_j>:
    1266:	0f 93       	push	r16
    1268:	1f 93       	push	r17
    126a:	cf 93       	push	r28
    126c:	df 93       	push	r29
    126e:	d6 2f       	mov	r29, r22
    1270:	c7 2f       	mov	r28, r23
    1272:	ca 01       	movw	r24, r20
    1274:	a8 01       	movw	r20, r16
    1276:	b9 01       	movw	r22, r18
    1278:	84 df       	rcall	.-248    	; 0x1182 <_ZN9EtherCard10udpPrepareEjPKhj>
    127a:	8d 2f       	mov	r24, r29
    127c:	9c 2f       	mov	r25, r28
    127e:	81 30       	cpi	r24, 0x01	; 1
    1280:	22 e0       	ldi	r18, 0x02	; 2
    1282:	92 07       	cpc	r25, r18
    1284:	10 f0       	brcs	.+4      	; 0x128a <_ZN9EtherCard7sendUdpEPKhjjS1_j+0x24>
    1286:	80 e0       	ldi	r24, 0x00	; 0
    1288:	92 e0       	ldi	r25, 0x02	; 2
    128a:	cd df       	rcall	.-102    	; 0x1226 <_ZN9EtherCard11udpTransmitEj>
    128c:	df 91       	pop	r29
    128e:	cf 91       	pop	r28
    1290:	1f 91       	pop	r17
    1292:	0f 91       	pop	r16
    1294:	08 95       	ret

00001296 <_ZN9EtherCard7setGwIpEPKh>:
    1296:	10 92 56 05 	sts	0x0556, r1	; 0x800556 <_ZN9EtherCard8delaycntE+0x1>
    129a:	10 92 55 05 	sts	0x0555, r1	; 0x800555 <_ZN9EtherCard8delaycntE>
    129e:	21 e0       	ldi	r18, 0x01	; 1
    12a0:	20 93 75 05 	sts	0x0575, r18	; 0x800575 <_ZL9waitgwmac>
    12a4:	bc 01       	movw	r22, r24
    12a6:	8f e5       	ldi	r24, 0x5F	; 95
    12a8:	95 e0       	ldi	r25, 0x05	; 5
    12aa:	d3 c1       	rjmp	.+934    	; 0x1652 <_ZN9EtherCard6copyIpEPhPKh>
    12ac:	08 95       	ret

000012ae <_ZN9EtherCard22updateBroadcastAddressEv>:
    12ae:	cf 93       	push	r28
    12b0:	df 93       	push	r29
    12b2:	eb e6       	ldi	r30, 0x6B	; 107
    12b4:	f5 e0       	ldi	r31, 0x05	; 5
    12b6:	c7 e6       	ldi	r28, 0x67	; 103
    12b8:	d5 e0       	ldi	r29, 0x05	; 5
    12ba:	a3 e6       	ldi	r26, 0x63	; 99
    12bc:	b5 e0       	ldi	r27, 0x05	; 5
    12be:	2f e6       	ldi	r18, 0x6F	; 111
    12c0:	35 e0       	ldi	r19, 0x05	; 5
    12c2:	91 91       	ld	r25, Z+
    12c4:	89 91       	ld	r24, Y+
    12c6:	80 95       	com	r24
    12c8:	89 2b       	or	r24, r25
    12ca:	8d 93       	st	X+, r24
    12cc:	e2 17       	cp	r30, r18
    12ce:	f3 07       	cpc	r31, r19
    12d0:	c1 f7       	brne	.-16     	; 0x12c2 <_ZN9EtherCard22updateBroadcastAddressEv+0x14>
    12d2:	df 91       	pop	r29
    12d4:	cf 91       	pop	r28
    12d6:	08 95       	ret

000012d8 <_ZN9EtherCard10packetLoopEj>:
	gPB[ICMP_CHECKSUM_P+1]++;
	gPB[ICMP_CHECKSUM_P] += 0x08;
	EtherCard::packetSend(len);
}

uint16_t EtherCard::packetLoop (uint16_t plen) {
    12d8:	cf 93       	push	r28
    12da:	df 93       	push	r29
    12dc:	ec 01       	movw	r28, r24
    if (plen==0) {
    12de:	00 97       	sbiw	r24, 0x00	; 0
    12e0:	09 f0       	breq	.+2      	; 0x12e4 <_ZN9EtherCard10packetLoopEj+0xc>
    12e2:	3f c0       	rjmp	.+126    	; 0x1362 <_ZN9EtherCard10packetLoopEj+0x8a>
        //Check every 65536 (no-packet) cycles whether we need to retry ARP request for gateway
        if ((waitgwmac & WGW_INITIAL_ARP || waitgwmac & WGW_REFRESHING) &&
    12e4:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <_ZL9waitgwmac>
    12e8:	85 70       	andi	r24, 0x05	; 5
    12ea:	89 f0       	breq	.+34     	; 0x130e <_ZN9EtherCard10packetLoopEj+0x36>
    12ec:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <_ZN9EtherCard8delaycntE>
    12f0:	90 91 56 05 	lds	r25, 0x0556	; 0x800556 <_ZN9EtherCard8delaycntE+0x1>
    12f4:	89 2b       	or	r24, r25
    12f6:	59 f4       	brne	.+22     	; 0x130e <_ZN9EtherCard10packetLoopEj+0x36>
                delaycnt==0 && isLinkUp()) {
    12f8:	f3 dc       	rcall	.-1562   	; 0xce0 <_ZN8ENC28J608isLinkUpEv>
}

uint16_t EtherCard::packetLoop (uint16_t plen) {
    if (plen==0) {
        //Check every 65536 (no-packet) cycles whether we need to retry ARP request for gateway
        if ((waitgwmac & WGW_INITIAL_ARP || waitgwmac & WGW_REFRESHING) &&
    12fa:	88 23       	and	r24, r24
    12fc:	41 f0       	breq	.+16     	; 0x130e <_ZN9EtherCard10packetLoopEj+0x36>
                delaycnt==0 && isLinkUp()) {
            client_arp_whohas(gwip);
    12fe:	8f e5       	ldi	r24, 0x5F	; 95
    1300:	95 e0       	ldi	r25, 0x05	; 5
    1302:	0f df       	rcall	.-482    	; 0x1122 <_ZL17client_arp_whohasPh>
            waitgwmac |= WGW_ACCEPT_ARP_REPLY;
    1304:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <_ZL9waitgwmac>
    1308:	88 60       	ori	r24, 0x08	; 8
    130a:	80 93 75 05 	sts	0x0575, r24	; 0x800575 <_ZL9waitgwmac>
        }
        delaycnt++;
    130e:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <_ZN9EtherCard8delaycntE>
    1312:	90 91 56 05 	lds	r25, 0x0556	; 0x800556 <_ZN9EtherCard8delaycntE+0x1>
    1316:	01 96       	adiw	r24, 0x01	; 1
    1318:	90 93 56 05 	sts	0x0556, r25	; 0x800556 <_ZN9EtherCard8delaycntE+0x1>
    131c:	80 93 55 05 	sts	0x0555, r24	; 0x800555 <_ZN9EtherCard8delaycntE>

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, dnsip) && !has_dns_mac && !waiting_for_dns_mac) {
    1320:	6b e5       	ldi	r22, 0x5B	; 91
    1322:	75 e0       	ldi	r23, 0x05	; 5
    1324:	8b e6       	ldi	r24, 0x6B	; 107
    1326:	95 e0       	ldi	r25, 0x05	; 5
    1328:	84 de       	rcall	.-760    	; 0x1032 <_ZL6is_lanPKhS0_>
    132a:	88 23       	and	r24, r24
    132c:	49 f0       	breq	.+18     	; 0x1340 <_ZN9EtherCard10packetLoopEj+0x68>
    132e:	80 91 7e 05 	lds	r24, 0x057E	; 0x80057e <_ZL11has_dns_mac>
    1332:	81 11       	cpse	r24, r1
    1334:	05 c0       	rjmp	.+10     	; 0x1340 <_ZN9EtherCard10packetLoopEj+0x68>
    1336:	80 91 7f 05 	lds	r24, 0x057F	; 0x80057f <_ZL19waiting_for_dns_mac>
    133a:	88 23       	and	r24, r24
    133c:	09 f4       	brne	.+2      	; 0x1340 <_ZN9EtherCard10packetLoopEj+0x68>
    133e:	dc c0       	rjmp	.+440    	; 0x14f8 <_ZN9EtherCard10packetLoopEj+0x220>
            client_arp_whohas(dnsip);
            waiting_for_dns_mac = true;
        }

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, hisip) && !has_dest_mac && !waiting_for_dest_mac) {
    1340:	67 e5       	ldi	r22, 0x57	; 87
    1342:	75 e0       	ldi	r23, 0x05	; 5
    1344:	8b e6       	ldi	r24, 0x6B	; 107
    1346:	95 e0       	ldi	r25, 0x05	; 5
    1348:	74 de       	rcall	.-792    	; 0x1032 <_ZL6is_lanPKhS0_>
    134a:	88 23       	and	r24, r24
    134c:	09 f4       	brne	.+2      	; 0x1350 <_ZN9EtherCard10packetLoopEj+0x78>
    134e:	f8 c0       	rjmp	.+496    	; 0x1540 <_ZN9EtherCard10packetLoopEj+0x268>
    1350:	80 91 7c 05 	lds	r24, 0x057C	; 0x80057c <_ZL12has_dest_mac>
    1354:	81 11       	cpse	r24, r1
    1356:	f4 c0       	rjmp	.+488    	; 0x1540 <_ZN9EtherCard10packetLoopEj+0x268>
    1358:	80 91 7d 05 	lds	r24, 0x057D	; 0x80057d <_ZL20waiting_for_dest_mac>
    135c:	81 11       	cpse	r24, r1
    135e:	f0 c0       	rjmp	.+480    	; 0x1540 <_ZN9EtherCard10packetLoopEj+0x268>
    1360:	d2 c0       	rjmp	.+420    	; 0x1506 <_ZN9EtherCard10packetLoopEj+0x22e>
    return true;
}

static uint8_t eth_type_is_arp_and_my_ip(uint16_t len) {
    return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
    1362:	89 32       	cpi	r24, 0x29	; 41
    1364:	91 05       	cpc	r25, r1
    1366:	08 f4       	brcc	.+2      	; 0x136a <_ZN9EtherCard10packetLoopEj+0x92>
    1368:	d5 c0       	rjmp	.+426    	; 0x1514 <_ZN9EtherCard10packetLoopEj+0x23c>
        }
    return true;
}

static uint8_t eth_type_is_arp_and_my_ip(uint16_t len) {
    return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
    136a:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <_ZN8ENC28J606bufferE+0xc>
    136e:	88 30       	cpi	r24, 0x08	; 8
    1370:	09 f0       	breq	.+2      	; 0x1374 <_ZN9EtherCard10packetLoopEj+0x9c>
    1372:	e6 c0       	rjmp	.+460    	; 0x1540 <_ZN9EtherCard10packetLoopEj+0x268>
    1374:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <_ZN8ENC28J606bufferE+0xd>
    1378:	86 30       	cpi	r24, 0x06	; 6
    137a:	09 f0       	breq	.+2      	; 0x137e <_ZN9EtherCard10packetLoopEj+0xa6>
    137c:	dd c0       	rjmp	.+442    	; 0x1538 <_ZN9EtherCard10packetLoopEj+0x260>
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
           memcmp(gPB + ETH_ARP_DST_IP_P, EtherCard::myip, IP_LEN) == 0;
    137e:	44 e0       	ldi	r20, 0x04	; 4
    1380:	50 e0       	ldi	r21, 0x00	; 0
    1382:	6b e6       	ldi	r22, 0x6B	; 107
    1384:	75 e0       	ldi	r23, 0x05	; 5
    1386:	8b e7       	ldi	r24, 0x7B	; 123
    1388:	93 e0       	ldi	r25, 0x03	; 3
    138a:	0e 94 95 24 	call	0x492a	; 0x492a <memcmp>
    return true;
}

static uint8_t eth_type_is_arp_and_my_ip(uint16_t len) {
    return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
    138e:	89 2b       	or	r24, r25
    1390:	09 f0       	breq	.+2      	; 0x1394 <_ZN9EtherCard10packetLoopEj+0xbc>
    1392:	d2 c0       	rjmp	.+420    	; 0x1538 <_ZN9EtherCard10packetLoopEj+0x260>
    EtherCard::copyIp(gPB + IP_SRC_P, EtherCard::myip);
    fill_ip_hdr_checksum();
}

static void make_arp_answer_from_request() {
    setMACs(gPB + ETH_SRC_MAC);
    1394:	c3 c0       	rjmp	.+390    	; 0x151c <_ZN9EtherCard10packetLoopEj+0x244>
    1396:	8b e5       	ldi	r24, 0x5B	; 91
    1398:	93 e0       	ldi	r25, 0x03	; 3
    139a:	84 de       	rcall	.-760    	; 0x10a4 <_ZL7setMACsPKh>
    gPB[ETH_ARP_OPCODE_H_P] = ETH_ARP_OPCODE_REPLY_H_V;
    139c:	e5 e5       	ldi	r30, 0x55	; 85
    139e:	f3 e0       	ldi	r31, 0x03	; 3
    13a0:	14 8a       	std	Z+20, r1	; 0x14
    gPB[ETH_ARP_OPCODE_L_P] = ETH_ARP_OPCODE_REPLY_L_V;
    13a2:	82 e0       	ldi	r24, 0x02	; 2
    EtherCard::copyMac(gPB + ETH_ARP_DST_MAC_P, gPB + ETH_ARP_SRC_MAC_P);
    13a4:	85 8b       	std	Z+21, r24	; 0x15
    13a6:	6b e6       	ldi	r22, 0x6B	; 107
    13a8:	73 e0       	ldi	r23, 0x03	; 3
    13aa:	85 e7       	ldi	r24, 0x75	; 117
    13ac:	93 e0       	ldi	r25, 0x03	; 3
    EtherCard::copyMac(gPB + ETH_ARP_SRC_MAC_P, EtherCard::mymac);
    13ae:	5e d1       	rcall	.+700    	; 0x166c <_ZN9EtherCard7copyMacEPhPKh>
    13b0:	6f e6       	ldi	r22, 0x6F	; 111
    13b2:	75 e0       	ldi	r23, 0x05	; 5
    13b4:	8b e6       	ldi	r24, 0x6B	; 107
    13b6:	93 e0       	ldi	r25, 0x03	; 3
    EtherCard::copyIp(gPB + ETH_ARP_DST_IP_P, gPB + ETH_ARP_SRC_IP_P);
    13b8:	59 d1       	rcall	.+690    	; 0x166c <_ZN9EtherCard7copyMacEPhPKh>
    13ba:	61 e7       	ldi	r22, 0x71	; 113
    13bc:	73 e0       	ldi	r23, 0x03	; 3
    13be:	8b e7       	ldi	r24, 0x7B	; 123
    13c0:	93 e0       	ldi	r25, 0x03	; 3
    EtherCard::copyIp(gPB + ETH_ARP_SRC_IP_P, EtherCard::myip);
    13c2:	47 d1       	rcall	.+654    	; 0x1652 <_ZN9EtherCard6copyIpEPhPKh>
    13c4:	6b e6       	ldi	r22, 0x6B	; 107
    13c6:	75 e0       	ldi	r23, 0x05	; 5
    13c8:	81 e7       	ldi	r24, 0x71	; 113
    13ca:	93 e0       	ldi	r25, 0x03	; 3
    13cc:	42 d1       	rcall	.+644    	; 0x1652 <_ZN9EtherCard6copyIpEPhPKh>
    EtherCard::packetSend(42);
    13ce:	8a e2       	ldi	r24, 0x2A	; 42
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	99 dc       	rcall	.-1742   	; 0xd06 <_ZN8ENC28J6010packetSendEj>
    13d4:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <_ZL9waitgwmac>

    if (eth_type_is_arp_and_my_ip(plen))
    {   //Service ARP request
        if (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REQ_L_V)
            make_arp_answer_from_request();
        if (waitgwmac & WGW_ACCEPT_ARP_REPLY && (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REPLY_L_V) && client_store_mac(gwip, gwmacaddr))
    13d8:	83 ff       	sbrs	r24, 3
    13da:	0e c0       	rjmp	.+28     	; 0x13f8 <_ZN9EtherCard10packetLoopEj+0x120>
    13dc:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <_ZN8ENC28J606bufferE+0x15>
    13e0:	82 30       	cpi	r24, 0x02	; 2
    13e2:	51 f4       	brne	.+20     	; 0x13f8 <_ZN9EtherCard10packetLoopEj+0x120>
    13e4:	66 e7       	ldi	r22, 0x76	; 118
    13e6:	75 e0       	ldi	r23, 0x05	; 5
    13e8:	8f e5       	ldi	r24, 0x5F	; 95
    13ea:	95 e0       	ldi	r25, 0x05	; 5
    13ec:	84 de       	rcall	.-760    	; 0x10f6 <_ZL16client_store_macPhS_>
    13ee:	88 23       	and	r24, r24
    13f0:	19 f0       	breq	.+6      	; 0x13f8 <_ZN9EtherCard10packetLoopEj+0x120>
    13f2:	82 e0       	ldi	r24, 0x02	; 2
            waitgwmac = WGW_HAVE_GW_MAC;
    13f4:	80 93 75 05 	sts	0x0575, r24	; 0x800575 <_ZL9waitgwmac>
    13f8:	80 91 7e 05 	lds	r24, 0x057E	; 0x80057e <_ZL11has_dns_mac>
        if (!has_dns_mac && waiting_for_dns_mac && client_store_mac(dnsip, destmacaddr)) {
    13fc:	81 11       	cpse	r24, r1
    13fe:	10 c0       	rjmp	.+32     	; 0x1420 <_ZN9EtherCard10packetLoopEj+0x148>
    1400:	80 91 7f 05 	lds	r24, 0x057F	; 0x80057f <_ZL19waiting_for_dns_mac>
    1404:	88 23       	and	r24, r24
    1406:	61 f0       	breq	.+24     	; 0x1420 <_ZN9EtherCard10packetLoopEj+0x148>
    1408:	60 e8       	ldi	r22, 0x80	; 128
    140a:	75 e0       	ldi	r23, 0x05	; 5
    140c:	8b e5       	ldi	r24, 0x5B	; 91
    140e:	95 e0       	ldi	r25, 0x05	; 5
    1410:	72 de       	rcall	.-796    	; 0x10f6 <_ZL16client_store_macPhS_>
    1412:	88 23       	and	r24, r24
    1414:	29 f0       	breq	.+10     	; 0x1420 <_ZN9EtherCard10packetLoopEj+0x148>
    1416:	81 e0       	ldi	r24, 0x01	; 1
            has_dns_mac = true;
    1418:	80 93 7e 05 	sts	0x057E, r24	; 0x80057e <_ZL11has_dns_mac>
    141c:	10 92 7f 05 	sts	0x057F, r1	; 0x80057f <_ZL19waiting_for_dns_mac>
            waiting_for_dns_mac = false;
    1420:	80 91 7c 05 	lds	r24, 0x057C	; 0x80057c <_ZL12has_dest_mac>
        }
        if (!has_dest_mac && waiting_for_dest_mac && client_store_mac(hisip, destmacaddr)) {
    1424:	81 11       	cpse	r24, r1
    1426:	8c c0       	rjmp	.+280    	; 0x1540 <_ZN9EtherCard10packetLoopEj+0x268>
    1428:	80 91 7d 05 	lds	r24, 0x057D	; 0x80057d <_ZL20waiting_for_dest_mac>
    142c:	88 23       	and	r24, r24
    142e:	09 f4       	brne	.+2      	; 0x1432 <_ZN9EtherCard10packetLoopEj+0x15a>
    1430:	87 c0       	rjmp	.+270    	; 0x1540 <_ZN9EtherCard10packetLoopEj+0x268>
    1432:	60 e8       	ldi	r22, 0x80	; 128
    1434:	75 e0       	ldi	r23, 0x05	; 5
    1436:	87 e5       	ldi	r24, 0x57	; 87
    1438:	95 e0       	ldi	r25, 0x05	; 5
    143a:	5d de       	rcall	.-838    	; 0x10f6 <_ZL16client_store_macPhS_>
    143c:	88 23       	and	r24, r24
    143e:	09 f4       	brne	.+2      	; 0x1442 <_ZN9EtherCard10packetLoopEj+0x16a>
    1440:	7f c0       	rjmp	.+254    	; 0x1540 <_ZN9EtherCard10packetLoopEj+0x268>
    1442:	81 e0       	ldi	r24, 0x01	; 1
            has_dest_mac = true;
    1444:	80 93 7c 05 	sts	0x057C, r24	; 0x80057c <_ZL12has_dest_mac>
    1448:	10 92 7d 05 	sts	0x057D, r1	; 0x80057d <_ZL20waiting_for_dest_mac>
            waiting_for_dest_mac = false;
    144c:	79 c0       	rjmp	.+242    	; 0x1540 <_ZN9EtherCard10packetLoopEj+0x268>
    144e:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <_ZN8ENC28J606bufferE+0xc>
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
           memcmp(gPB + ETH_ARP_DST_IP_P, EtherCard::myip, IP_LEN) == 0;
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
    1452:	88 30       	cpi	r24, 0x08	; 8
    1454:	09 f0       	breq	.+2      	; 0x1458 <_ZN9EtherCard10packetLoopEj+0x180>
    1456:	74 c0       	rjmp	.+232    	; 0x1540 <_ZN9EtherCard10packetLoopEj+0x268>
    1458:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <_ZN8ENC28J606bufferE+0xd>
    145c:	81 11       	cpse	r24, r1
    145e:	70 c0       	rjmp	.+224    	; 0x1540 <_ZN9EtherCard10packetLoopEj+0x268>
    1460:	80 91 63 03 	lds	r24, 0x0363	; 0x800363 <_ZN8ENC28J606bufferE+0xe>
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
    1464:	85 34       	cpi	r24, 0x45	; 69
    1466:	09 f0       	breq	.+2      	; 0x146a <_ZN9EtherCard10packetLoopEj+0x192>
    1468:	6b c0       	rjmp	.+214    	; 0x1540 <_ZN9EtherCard10packetLoopEj+0x268>
    146a:	44 e0       	ldi	r20, 0x04	; 4
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
           (memcmp(gPB + IP_DST_P, EtherCard::myip, IP_LEN) == 0  //not my IP
    146c:	50 e0       	ldi	r21, 0x00	; 0
    146e:	6b e6       	ldi	r22, 0x6B	; 107
    1470:	75 e0       	ldi	r23, 0x05	; 5
    1472:	83 e7       	ldi	r24, 0x73	; 115
    1474:	93 e0       	ldi	r25, 0x03	; 3
    1476:	0e 94 95 24 	call	0x492a	; 0x492a <memcmp>
    147a:	89 2b       	or	r24, r25
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
    147c:	09 f4       	brne	.+2      	; 0x1480 <_ZN9EtherCard10packetLoopEj+0x1a8>
    147e:	54 c0       	rjmp	.+168    	; 0x1528 <_ZN9EtherCard10packetLoopEj+0x250>
    1480:	44 e0       	ldi	r20, 0x04	; 4
           (memcmp(gPB + IP_DST_P, EtherCard::myip, IP_LEN) == 0  //not my IP
            || (memcmp(gPB + IP_DST_P, EtherCard::broadcastip, IP_LEN) == 0) //not subnet broadcast
    1482:	50 e0       	ldi	r21, 0x00	; 0
    1484:	63 e6       	ldi	r22, 0x63	; 99
    1486:	75 e0       	ldi	r23, 0x05	; 5
    1488:	83 e7       	ldi	r24, 0x73	; 115
    148a:	93 e0       	ldi	r25, 0x03	; 3
    148c:	0e 94 95 24 	call	0x492a	; 0x492a <memcmp>
    1490:	89 2b       	or	r24, r25
    1492:	09 f4       	brne	.+2      	; 0x1496 <_ZN9EtherCard10packetLoopEj+0x1be>
    1494:	49 c0       	rjmp	.+146    	; 0x1528 <_ZN9EtherCard10packetLoopEj+0x250>
    1496:	44 e0       	ldi	r20, 0x04	; 4
            || (memcmp(gPB + IP_DST_P, allOnes, IP_LEN) == 0)); //not global broadcasts
    1498:	50 e0       	ldi	r21, 0x00	; 0
    149a:	65 e2       	ldi	r22, 0x25	; 37
    149c:	72 e0       	ldi	r23, 0x02	; 2
    149e:	83 e7       	ldi	r24, 0x73	; 115
    14a0:	93 e0       	ldi	r25, 0x03	; 3
    14a2:	0e 94 95 24 	call	0x492a	; 0x492a <memcmp>
    14a6:	89 2b       	or	r24, r25
    14a8:	09 f0       	breq	.+2      	; 0x14ac <_ZN9EtherCard10packetLoopEj+0x1d4>
    14aa:	4a c0       	rjmp	.+148    	; 0x1540 <_ZN9EtherCard10packetLoopEj+0x268>
    14ac:	3d c0       	rjmp	.+122    	; 0x1528 <_ZN9EtherCard10packetLoopEj+0x250>
    14ae:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <_ZN8ENC28J606bufferE+0x22>
        //!@todo Add other protocols (and make each optional at compile time)
        return 0;
    }
	
	//To handle pinging
	if (gPB[IP_PROTO_P]==IP_PROTO_ICMP_V && gPB[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V)
    14b2:	88 30       	cpi	r24, 0x08	; 8
    14b4:	c9 f4       	brne	.+50     	; 0x14e8 <_ZN9EtherCard10packetLoopEj+0x210>
	{   //Service ICMP echo request (ping)
		if (icmp_cb)
    14b6:	e0 91 86 05 	lds	r30, 0x0586	; 0x800586 <_ZL7icmp_cb>
    14ba:	f0 91 87 05 	lds	r31, 0x0587	; 0x800587 <_ZL7icmp_cb+0x1>
    14be:	30 97       	sbiw	r30, 0x00	; 0
    14c0:	19 f0       	breq	.+6      	; 0x14c8 <_ZN9EtherCard10packetLoopEj+0x1f0>
		(*icmp_cb)(&(gPB[IP_SRC_P]));
    14c2:	8f e6       	ldi	r24, 0x6F	; 111
    14c4:	93 e0       	ldi	r25, 0x03	; 3
    14c6:	19 95       	eicall
void EtherCard::registerPingCallback (void (*callback)(uint8_t *srcip)) {
    icmp_cb = callback;
}

static void make_echo_reply_from_request(uint16_t len) {
	make_eth_ip();
    14c8:	f7 dd       	rcall	.-1042   	; 0x10b8 <_ZL11make_eth_ipv>
	gPB[ICMP_TYPE_P] = ICMP_TYPE_ECHOREPLY_V;
    14ca:	e5 e5       	ldi	r30, 0x55	; 85
    14cc:	f3 e0       	ldi	r31, 0x03	; 3
	if (gPB[ICMP_CHECKSUM_P] > (0xFF-0x08))
    14ce:	12 a2       	std	Z+34, r1	; 0x22
    14d0:	84 a1       	ldd	r24, Z+36	; 0x24
    14d2:	88 3f       	cpi	r24, 0xF8	; 248
	gPB[ICMP_CHECKSUM_P+1]++;
    14d4:	18 f0       	brcs	.+6      	; 0x14dc <_ZN9EtherCard10packetLoopEj+0x204>
    14d6:	95 a1       	ldd	r25, Z+37	; 0x25
    14d8:	9f 5f       	subi	r25, 0xFF	; 255
	gPB[ICMP_CHECKSUM_P] += 0x08;
    14da:	95 a3       	std	Z+37, r25	; 0x25
    14dc:	88 5f       	subi	r24, 0xF8	; 248
	EtherCard::packetSend(len);
    14de:	80 93 79 03 	sts	0x0379, r24	; 0x800379 <_ZN8ENC28J606bufferE+0x24>
    14e2:	ce 01       	movw	r24, r28
    14e4:	10 dc       	rcall	.-2016   	; 0xd06 <_ZN8ENC28J6010packetSendEj>
		make_echo_reply_from_request(plen);
		return 0;
	}

#if ETHERCARD_UDPSERVER
    if (ether.udpServerListening() && gPB[IP_PROTO_P]==IP_PROTO_UDP_V)
    14e6:	2c c0       	rjmp	.+88     	; 0x1540 <_ZN9EtherCard10packetLoopEj+0x268>
    14e8:	4a d0       	rcall	.+148    	; 0x157e <_ZN9EtherCard18udpServerListeningEv>
    14ea:	88 23       	and	r24, r24
    14ec:	49 f1       	breq	.+82     	; 0x1540 <_ZN9EtherCard10packetLoopEj+0x268>
    14ee:	80 91 6c 03 	lds	r24, 0x036C	; 0x80036c <_ZN8ENC28J606bufferE+0x17>
    14f2:	81 31       	cpi	r24, 0x11	; 17
    14f4:	29 f5       	brne	.+74     	; 0x1540 <_ZN9EtherCard10packetLoopEj+0x268>
        }
        delaycnt++;

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, dnsip) && !has_dns_mac && !waiting_for_dns_mac) {
            client_arp_whohas(dnsip);
    14f6:	1d c0       	rjmp	.+58     	; 0x1532 <_ZN9EtherCard10packetLoopEj+0x25a>
    14f8:	8b e5       	ldi	r24, 0x5B	; 91
    14fa:	95 e0       	ldi	r25, 0x05	; 5
    14fc:	12 de       	rcall	.-988    	; 0x1122 <_ZL17client_arp_whohasPh>
            waiting_for_dns_mac = true;
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	80 93 7f 05 	sts	0x057F, r24	; 0x80057f <_ZL19waiting_for_dns_mac>
    1504:	1d cf       	rjmp	.-454    	; 0x1340 <_ZN9EtherCard10packetLoopEj+0x68>
        }

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, hisip) && !has_dest_mac && !waiting_for_dest_mac) {
            client_arp_whohas(hisip);
    1506:	87 e5       	ldi	r24, 0x57	; 87
    1508:	95 e0       	ldi	r25, 0x05	; 5
    150a:	0b de       	rcall	.-1002   	; 0x1122 <_ZL17client_arp_whohasPh>
    150c:	81 e0       	ldi	r24, 0x01	; 1
            waiting_for_dest_mac = true;
    150e:	80 93 7d 05 	sts	0x057D, r24	; 0x80057d <_ZL20waiting_for_dest_mac>
    1512:	16 c0       	rjmp	.+44     	; 0x1540 <_ZN9EtherCard10packetLoopEj+0x268>
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
    1514:	8a 97       	sbiw	r24, 0x2a	; 42
    1516:	08 f0       	brcs	.+2      	; 0x151a <_ZN9EtherCard10packetLoopEj+0x242>
    1518:	9a cf       	rjmp	.-204    	; 0x144e <_ZN9EtherCard10packetLoopEj+0x176>
    151a:	12 c0       	rjmp	.+36     	; 0x1540 <_ZN9EtherCard10packetLoopEj+0x268>
        return 0;
    }

    if (eth_type_is_arp_and_my_ip(plen))
    {   //Service ARP request
        if (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REQ_L_V)
    151c:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <_ZN8ENC28J606bufferE+0x15>
    1520:	81 30       	cpi	r24, 0x01	; 1
    1522:	09 f0       	breq	.+2      	; 0x1526 <_ZN9EtherCard10packetLoopEj+0x24e>
    1524:	57 cf       	rjmp	.-338    	; 0x13d4 <_ZN9EtherCard10packetLoopEj+0xfc>
    1526:	37 cf       	rjmp	.-402    	; 0x1396 <_ZN9EtherCard10packetLoopEj+0xbe>
        //!@todo Add other protocols (and make each optional at compile time)
        return 0;
    }
	
	//To handle pinging
	if (gPB[IP_PROTO_P]==IP_PROTO_ICMP_V && gPB[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V)
    1528:	80 91 6c 03 	lds	r24, 0x036C	; 0x80036c <_ZN8ENC28J606bufferE+0x17>
    152c:	81 30       	cpi	r24, 0x01	; 1
    152e:	e1 f6       	brne	.-72     	; 0x14e8 <_ZN9EtherCard10packetLoopEj+0x210>
    1530:	be cf       	rjmp	.-132    	; 0x14ae <_ZN9EtherCard10packetLoopEj+0x1d6>
	}

#if ETHERCARD_UDPSERVER
    if (ether.udpServerListening() && gPB[IP_PROTO_P]==IP_PROTO_UDP_V)
    {   //Call UDP server handler (callback) if one is defined for this packet
        if(ether.udpServerHasProcessedPacket(plen))
    1532:	ce 01       	movw	r24, r28
    1534:	2b d0       	rcall	.+86     	; 0x158c <_ZN9EtherCard27udpServerHasProcessedPacketEj>
    1536:	04 c0       	rjmp	.+8      	; 0x1540 <_ZN9EtherCard10packetLoopEj+0x268>
    1538:	ca 32       	cpi	r28, 0x2A	; 42
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
    153a:	d1 05       	cpc	r29, r1
    153c:	08 f0       	brcs	.+2      	; 0x1540 <_ZN9EtherCard10packetLoopEj+0x268>
    153e:	8c cf       	rjmp	.-232    	; 0x1458 <_ZN9EtherCard10packetLoopEj+0x180>
    1540:	80 e0       	ldi	r24, 0x00	; 0

    if (plen<54 || gPB[IP_PROTO_P]!=IP_PROTO_TCP_V )
        return 0; //from here on we are only interested in TCP-packets; these are longer than 54 bytes
		
	return 0;
}
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	df 91       	pop	r29
    1546:	cf 91       	pop	r28
    1548:	08 95       	ret

0000154a <_ZN9EtherCard21udpServerListenOnPortEPFvjPhjPKcjEj>:
    154a:	9c 01       	movw	r18, r24
    {
        if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((uint8_t) listeners[i].port)) {
            listeners[i].listening = true;
        }
    }
}
    154c:	90 91 88 05 	lds	r25, 0x0588	; 0x800588 <numListeners>
    1550:	98 30       	cpi	r25, 0x08	; 8
    1552:	a0 f4       	brcc	.+40     	; 0x157c <_ZN9EtherCard21udpServerListenOnPortEPFvjPhjPKcjEj+0x32>
    1554:	e9 2f       	mov	r30, r25
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	af 01       	movw	r20, r30
    155a:	44 0f       	add	r20, r20
    155c:	55 1f       	adc	r21, r21
    155e:	44 0f       	add	r20, r20
    1560:	55 1f       	adc	r21, r21
    1562:	e4 0f       	add	r30, r20
    1564:	f5 1f       	adc	r31, r21
    1566:	e7 57       	subi	r30, 0x77	; 119
    1568:	fa 4f       	sbci	r31, 0xFA	; 250
    156a:	31 83       	std	Z+1, r19	; 0x01
    156c:	20 83       	st	Z, r18
    156e:	73 83       	std	Z+3, r23	; 0x03
    1570:	62 83       	std	Z+2, r22	; 0x02
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	84 83       	std	Z+4, r24	; 0x04
    1576:	9f 5f       	subi	r25, 0xFF	; 255
    1578:	90 93 88 05 	sts	0x0588, r25	; 0x800588 <numListeners>
    157c:	08 95       	ret

0000157e <_ZN9EtherCard18udpServerListeningEv>:

bool EtherCard::udpServerListening() {
    return numListeners > 0;
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	90 91 88 05 	lds	r25, 0x0588	; 0x800588 <numListeners>
    1584:	91 11       	cpse	r25, r1
    1586:	01 c0       	rjmp	.+2      	; 0x158a <_ZN9EtherCard18udpServerListeningEv+0xc>
    1588:	80 e0       	ldi	r24, 0x00	; 0
}
    158a:	08 95       	ret

0000158c <_ZN9EtherCard27udpServerHasProcessedPacketEj>:

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    158c:	8f 92       	push	r8
    158e:	9f 92       	push	r9
    1590:	bf 92       	push	r11
    1592:	cf 92       	push	r12
    1594:	df 92       	push	r13
    1596:	ef 92       	push	r14
    1598:	ff 92       	push	r15
    159a:	0f 93       	push	r16
    159c:	1f 93       	push	r17
    159e:	cf 93       	push	r28
    15a0:	df 93       	push	r29
    bool packetProcessed = false;
    for(int i = 0; i < numListeners; i++)
    15a2:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <numListeners>
    15a6:	88 23       	and	r24, r24
    15a8:	09 f4       	brne	.+2      	; 0x15ac <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x20>
    15aa:	46 c0       	rjmp	.+140    	; 0x1638 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0xac>
    15ac:	c9 e8       	ldi	r28, 0x89	; 137
    15ae:	d5 e0       	ldi	r29, 0x05	; 5
    15b0:	e1 2c       	mov	r14, r1
    15b2:	f1 2c       	mov	r15, r1
    15b4:	80 e0       	ldi	r24, 0x00	; 0
    {
        if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((uint8_t) listeners[i].port) && listeners[i].listening)
    15b6:	0f 2e       	mov	r0, r31
    15b8:	f5 e5       	ldi	r31, 0x55	; 85
    15ba:	cf 2e       	mov	r12, r31
    15bc:	f3 e0       	ldi	r31, 0x03	; 3
    15be:	df 2e       	mov	r13, r31
    15c0:	f0 2d       	mov	r31, r0
                listeners[i].port,
                gPB + IP_SRC_P,
                (gPB[UDP_SRC_PORT_H_P] << 8) | gPB[UDP_SRC_PORT_L_P],
                (const char *) (gPB + UDP_DATA_P),
                datalen);
            packetProcessed = true;
    15c2:	bb 24       	eor	r11, r11
    15c4:	b3 94       	inc	r11

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    bool packetProcessed = false;
    for(int i = 0; i < numListeners; i++)
    {
        if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((uint8_t) listeners[i].port) && listeners[i].listening)
    15c6:	aa 81       	ldd	r26, Y+2	; 0x02
    15c8:	bb 81       	ldd	r27, Y+3	; 0x03
    15ca:	f6 01       	movw	r30, r12
    15cc:	24 a1       	ldd	r18, Z+36	; 0x24
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	4b 2f       	mov	r20, r27
    15d2:	55 27       	eor	r21, r21
    15d4:	24 17       	cp	r18, r20
    15d6:	35 07       	cpc	r19, r21
    15d8:	21 f5       	brne	.+72     	; 0x1622 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x96>
    15da:	25 a1       	ldd	r18, Z+37	; 0x25
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	ad 01       	movw	r20, r26
    15e0:	55 27       	eor	r21, r21
    15e2:	24 17       	cp	r18, r20
    15e4:	35 07       	cpc	r19, r21
    15e6:	e9 f4       	brne	.+58     	; 0x1622 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x96>
    15e8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ea:	99 23       	and	r25, r25
    15ec:	d1 f0       	breq	.+52     	; 0x1622 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x96>
            listeners[i].callback(
                listeners[i].port,
                gPB + IP_SRC_P,
                (gPB[UDP_SRC_PORT_H_P] << 8) | gPB[UDP_SRC_PORT_L_P],
                (const char *) (gPB + UDP_DATA_P),
                datalen);
    15ee:	07 a1       	ldd	r16, Z+39	; 0x27
    15f0:	10 e0       	ldi	r17, 0x00	; 0
    15f2:	08 50       	subi	r16, 0x08	; 8
    15f4:	11 09       	sbc	r17, r1
    15f6:	86 a1       	ldd	r24, Z+38	; 0x26
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	98 2f       	mov	r25, r24
    15fc:	88 27       	eor	r24, r24
    15fe:	08 0f       	add	r16, r24
    1600:	19 1f       	adc	r17, r25
    1602:	42 a1       	ldd	r20, Z+34	; 0x22
    1604:	50 e0       	ldi	r21, 0x00	; 0
    1606:	54 2f       	mov	r21, r20
    1608:	44 27       	eor	r20, r20
    160a:	83 a1       	ldd	r24, Z+35	; 0x23
    160c:	48 2b       	or	r20, r24
    160e:	88 80       	ld	r8, Y
    1610:	99 80       	ldd	r9, Y+1	; 0x01
    1612:	2f e7       	ldi	r18, 0x7F	; 127
    1614:	33 e0       	ldi	r19, 0x03	; 3
    1616:	6f e6       	ldi	r22, 0x6F	; 111
    1618:	73 e0       	ldi	r23, 0x03	; 3
    161a:	cd 01       	movw	r24, r26
    161c:	f4 01       	movw	r30, r8
    161e:	19 95       	eicall
            packetProcessed = true;
    1620:	8b 2d       	mov	r24, r11
    return numListeners > 0;
}

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    bool packetProcessed = false;
    for(int i = 0; i < numListeners; i++)
    1622:	ff ef       	ldi	r31, 0xFF	; 255
    1624:	ef 1a       	sub	r14, r31
    1626:	ff 0a       	sbc	r15, r31
    1628:	25 96       	adiw	r28, 0x05	; 5
    162a:	20 91 88 05 	lds	r18, 0x0588	; 0x800588 <numListeners>
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	e2 16       	cp	r14, r18
    1632:	f3 06       	cpc	r15, r19
    1634:	44 f2       	brlt	.-112    	; 0x15c6 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x3a>
    1636:	01 c0       	rjmp	.+2      	; 0x163a <_ZN9EtherCard27udpServerHasProcessedPacketEj+0xae>
bool EtherCard::udpServerListening() {
    return numListeners > 0;
}

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    bool packetProcessed = false;
    1638:	80 e0       	ldi	r24, 0x00	; 0
                datalen);
            packetProcessed = true;
        }
    }
    return packetProcessed;
}
    163a:	df 91       	pop	r29
    163c:	cf 91       	pop	r28
    163e:	1f 91       	pop	r17
    1640:	0f 91       	pop	r16
    1642:	ff 90       	pop	r15
    1644:	ef 90       	pop	r14
    1646:	df 90       	pop	r13
    1648:	cf 90       	pop	r12
    164a:	bf 90       	pop	r11
    164c:	9f 90       	pop	r9
    164e:	8f 90       	pop	r8
    1650:	08 95       	ret

00001652 <_ZN9EtherCard6copyIpEPhPKh>:
#include "../Peripherals/HardwareSerial.h"
#include <stdlib.h>
#include <ctype.h>

void EtherCard::copyIp (uint8_t *dst, const uint8_t *src) {
    memcpy(dst, src, IP_LEN);
    1652:	fb 01       	movw	r30, r22
    1654:	20 81       	ld	r18, Z
    1656:	31 81       	ldd	r19, Z+1	; 0x01
    1658:	fc 01       	movw	r30, r24
    165a:	31 83       	std	Z+1, r19	; 0x01
    165c:	20 83       	st	Z, r18
    165e:	fb 01       	movw	r30, r22
    1660:	22 81       	ldd	r18, Z+2	; 0x02
    1662:	33 81       	ldd	r19, Z+3	; 0x03
    1664:	fc 01       	movw	r30, r24
    1666:	33 83       	std	Z+3, r19	; 0x03
    1668:	22 83       	std	Z+2, r18	; 0x02
    166a:	08 95       	ret

0000166c <_ZN9EtherCard7copyMacEPhPKh>:
}

void EtherCard::copyMac (uint8_t *dst, const uint8_t *src) {
    166c:	dc 01       	movw	r26, r24
    memcpy(dst, src, ETH_LEN);
    166e:	96 e0       	ldi	r25, 0x06	; 6
    1670:	fb 01       	movw	r30, r22
    1672:	01 90       	ld	r0, Z+
    1674:	0d 92       	st	X+, r0
    1676:	9a 95       	dec	r25
    1678:	e1 f7       	brne	.-8      	; 0x1672 <_ZN9EtherCard7copyMacEPhPKh+0x6>
    167a:	08 95       	ret

0000167c <_ZN9EtherComm13CheckChecksumEPKch>:
	}
}

bool EtherComm::CheckChecksum(const char *data, uint8_t len){
  //data++; //Ignore first byte, the start byte.
  uint8_t checksum = (uint8_t)(*(data++)); //Start by 'adding' the command to the checksum
    167c:	fc 01       	movw	r30, r24
    167e:	20 81       	ld	r18, Z
  checksum += (uint8_t)(*(data++));
    1680:	dc 01       	movw	r26, r24
    1682:	12 96       	adiw	r26, 0x02	; 2
    1684:	81 81       	ldd	r24, Z+1	; 0x01
    1686:	92 2f       	mov	r25, r18
    1688:	98 0f       	add	r25, r24
  while(len-- > 0){
    168a:	3f ef       	ldi	r19, 0xFF	; 255
    168c:	36 0f       	add	r19, r22
    168e:	66 23       	and	r22, r22
    1690:	61 f0       	breq	.+24     	; 0x16aa <_ZN9EtherComm13CheckChecksumEPKch+0x2e>
    1692:	fd 01       	movw	r30, r26
    1694:	83 2f       	mov	r24, r19
    checksum += (uint8_t)(*(data++));
    1696:	21 91       	ld	r18, Z+
    1698:	92 0f       	add	r25, r18

bool EtherComm::CheckChecksum(const char *data, uint8_t len){
  //data++; //Ignore first byte, the start byte.
  uint8_t checksum = (uint8_t)(*(data++)); //Start by 'adding' the command to the checksum
  checksum += (uint8_t)(*(data++));
  while(len-- > 0){
    169a:	81 50       	subi	r24, 0x01	; 1
    169c:	e0 f7       	brcc	.-8      	; 0x1696 <_ZN9EtherComm13CheckChecksumEPKch+0x1a>
    169e:	23 2f       	mov	r18, r19
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	2f 5f       	subi	r18, 0xFF	; 255
    16a4:	3f 4f       	sbci	r19, 0xFF	; 255
    16a6:	a2 0f       	add	r26, r18
    16a8:	b3 1f       	adc	r27, r19
    checksum += (uint8_t)(*(data++));
  }
//  Serial.println((uint8_t)(checksum & CHECKSUM_MASK));
  return (checksum & CHECKSUM_MASK) == (uint8_t)(*data);
    16aa:	81 e0       	ldi	r24, 0x01	; 1
    16ac:	2c 91       	ld	r18, X
    16ae:	29 13       	cpse	r18, r25
    16b0:	80 e0       	ldi	r24, 0x00	; 0
}
    16b2:	08 95       	ret

000016b4 <_Z10udpReceivejPhjPKcj>:

//char EtherComm::buffer[BUFFER_SIZE];
uint8_t* EtherComm::buffer = ether.buffer + UDP_DATA_P;

//callback that prints received packets to the serial port
void udpReceive(uint16_t dest_port, uint8_t src_ip[IP_LEN], uint16_t src_port, const char *data, uint16_t packetLen){
    16b4:	0f 93       	push	r16
    16b6:	1f 93       	push	r17
    16b8:	cf 93       	push	r28
    16ba:	df 93       	push	r29
	}
	Serial.println();
	Serial.print("Checksum: ");
	Serial.println((uint8_t)(*index));
*/	
	if(packetLen >= 3){ //At minimum, start byte, command, and checksum.
    16bc:	a8 01       	movw	r20, r16
    16be:	43 50       	subi	r20, 0x03	; 3
    16c0:	51 09       	sbc	r21, r1
    16c2:	4f 3f       	cpi	r20, 0xFF	; 255
    16c4:	51 05       	cpc	r21, r1
    16c6:	09 f0       	breq	.+2      	; 0x16ca <_Z10udpReceivejPhjPKcj+0x16>
    16c8:	88 f4       	brcc	.+34     	; 0x16ec <_Z10udpReceivejPhjPKcj+0x38>
		if(packetLen <= 258){
			uint8_t dataLen = (uint8_t)(packetLen - 3);
			if((uint8_t)data[0] == START_BYTE){
    16ca:	f9 01       	movw	r30, r18
    16cc:	80 81       	ld	r24, Z
    16ce:	8f 3f       	cpi	r24, 0xFF	; 255
    16d0:	69 f4       	brne	.+26     	; 0x16ec <_Z10udpReceivejPhjPKcj+0x38>
    16d2:	e9 01       	movw	r28, r18
	Serial.print("Checksum: ");
	Serial.println((uint8_t)(*index));
*/	
	if(packetLen >= 3){ //At minimum, start byte, command, and checksum.
		if(packetLen <= 258){
			uint8_t dataLen = (uint8_t)(packetLen - 3);
    16d4:	03 50       	subi	r16, 0x03	; 3
			if((uint8_t)data[0] == START_BYTE){
			//		Serial.print("Computed Checksum: ");
				if(EtherComm::CheckChecksum(data, dataLen)){
    16d6:	60 2f       	mov	r22, r16
    16d8:	c9 01       	movw	r24, r18
    16da:	d0 df       	rcall	.-96     	; 0x167c <_ZN9EtherComm13CheckChecksumEPKch>
    16dc:	88 23       	and	r24, r24
    16de:	31 f0       	breq	.+12     	; 0x16ec <_Z10udpReceivejPhjPKcj+0x38>
					EtherComm::CommandReceived((uint8_t)data[1], (const uint8_t*)(data + 2), dataLen);
    16e0:	be 01       	movw	r22, r28
    16e2:	6e 5f       	subi	r22, 0xFE	; 254
    16e4:	7f 4f       	sbci	r23, 0xFF	; 255
    16e6:	40 2f       	mov	r20, r16
    16e8:	89 81       	ldd	r24, Y+1	; 0x01
    16ea:	96 d9       	rcall	.-3284   	; 0xa18 <_ZN9EtherComm15CommandReceivedEhPKhh>
				}
			}
		}
	}
}
    16ec:	df 91       	pop	r29
    16ee:	cf 91       	pop	r28
    16f0:	1f 91       	pop	r17
    16f2:	0f 91       	pop	r16
    16f4:	08 95       	ret

000016f6 <_ZN9EtherComm5beginEjjRVhS1_h>:
  }
//  Serial.println((uint8_t)(checksum & CHECKSUM_MASK));
  return (checksum & CHECKSUM_MASK) == (uint8_t)(*data);
}

bool EtherComm::begin(uint16_t recvPort, uint16_t destPort, Register& csDDR, Register& csPort, uint8_t csPin){
    16f6:	0f 93       	push	r16
    16f8:	cf 93       	push	r28
    16fa:	df 93       	push	r29
    16fc:	ec 01       	movw	r28, r24
    16fe:	ca 01       	movw	r24, r20
    1700:	a9 01       	movw	r20, r18
    1702:	20 2f       	mov	r18, r16
  EtherComm::_recvPort = recvPort;
    1704:	d0 93 b4 05 	sts	0x05B4, r29	; 0x8005b4 <_ZN9EtherComm9_recvPortE+0x1>
    1708:	c0 93 b3 05 	sts	0x05B3, r28	; 0x8005b3 <_ZN9EtherComm9_recvPortE>
  EtherComm::_destPort = destPort;
    170c:	70 93 b2 05 	sts	0x05B2, r23	; 0x8005b2 <_ZN9EtherComm9_destPortE+0x1>
    1710:	60 93 b1 05 	sts	0x05B1, r22	; 0x8005b1 <_ZN9EtherComm9_destPortE>
  
  if (ether.begin(EtherComm::_mymac, csDDR, csPort, csPin) == 0) return false;
    1714:	bc 01       	movw	r22, r24
    1716:	86 e0       	ldi	r24, 0x06	; 6
    1718:	92 e0       	ldi	r25, 0x02	; 2
    171a:	d3 db       	rcall	.-2138   	; 0xec2 <_ZN9EtherCard5beginEPKhRVhS3_h>
    171c:	88 23       	and	r24, r24
    171e:	79 f0       	breq	.+30     	; 0x173e <_ZN9EtherComm5beginEjjRVhS1_h+0x48>
  ether.staticSetup(EtherComm::_myip, EtherComm::_gwip);
    1720:	20 e0       	ldi	r18, 0x00	; 0
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	40 e0       	ldi	r20, 0x00	; 0
    1726:	50 e0       	ldi	r21, 0x00	; 0
    1728:	6c e0       	ldi	r22, 0x0C	; 12
    172a:	72 e0       	ldi	r23, 0x02	; 2
    172c:	80 e1       	ldi	r24, 0x10	; 16
    172e:	92 e0       	ldi	r25, 0x02	; 2
    1730:	e1 db       	rcall	.-2110   	; 0xef4 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_>
  ether.printIp("GW:  ", ether.gwip);
  ether.printIp("DNS: ", ether.dnsip);
  */
  
  //Register the udpSerialPrint() method to listen to port the receive port.
  ether.udpServerListenOnPort(&udpReceive, recvPort);
    1732:	be 01       	movw	r22, r28
    1734:	8a e5       	ldi	r24, 0x5A	; 90
    1736:	9b e0       	ldi	r25, 0x0B	; 11
    1738:	08 df       	rcall	.-496    	; 0x154a <_ZN9EtherCard21udpServerListenOnPortEPFvjPhjPKcjEj>
  
  return true;
    173a:	81 e0       	ldi	r24, 0x01	; 1
    173c:	01 c0       	rjmp	.+2      	; 0x1740 <_ZN9EtherComm5beginEjjRVhS1_h+0x4a>

bool EtherComm::begin(uint16_t recvPort, uint16_t destPort, Register& csDDR, Register& csPort, uint8_t csPin){
  EtherComm::_recvPort = recvPort;
  EtherComm::_destPort = destPort;
  
  if (ether.begin(EtherComm::_mymac, csDDR, csPort, csPin) == 0) return false;
    173e:	80 e0       	ldi	r24, 0x00	; 0
  
  //Register the udpSerialPrint() method to listen to port the receive port.
  ether.udpServerListenOnPort(&udpReceive, recvPort);
  
  return true;
}
    1740:	df 91       	pop	r29
    1742:	cf 91       	pop	r28
    1744:	0f 91       	pop	r16
    1746:	08 95       	ret

00001748 <_ZN9EtherComm11SendCommandEhh>:

void EtherComm::SendCommand(uint8_t cmd, uint8_t len){
    1748:	0f 93       	push	r16
    174a:	1f 93       	push	r17
    174c:	cf 93       	push	r28
    174e:	df 93       	push	r29
  EtherComm::buffer[0] = START_BYTE;
    1750:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    1754:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    1758:	9f ef       	ldi	r25, 0xFF	; 255
    175a:	90 83       	st	Z, r25
  EtherComm::buffer[1] = cmd;
    175c:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    1760:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    1764:	81 83       	std	Z+1, r24	; 0x01
  //EtherComm::buffer[2] = len;
  
  uint8_t checksum = START_BYTE + cmd;
    1766:	81 50       	subi	r24, 0x01	; 1
  uint8_t* index = &EtherComm::buffer[2]; //TODO why is char* being used? convert ot uint8_t*!!
    1768:	c0 91 00 02 	lds	r28, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    176c:	d0 91 01 02 	lds	r29, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    1770:	de 01       	movw	r26, r28
    1772:	12 96       	adiw	r26, 0x02	; 2
  uint8_t bytes = len;
  while(bytes-- > 0){
    1774:	4f ef       	ldi	r20, 0xFF	; 255
    1776:	46 0f       	add	r20, r22
    1778:	66 23       	and	r22, r22
    177a:	81 f0       	breq	.+32     	; 0x179c <_ZN9EtherComm11SendCommandEhh+0x54>
    177c:	fd 01       	movw	r30, r26
    177e:	50 e0       	ldi	r21, 0x00	; 0
    1780:	9a 01       	movw	r18, r20
    1782:	2d 5f       	subi	r18, 0xFD	; 253
    1784:	3f 4f       	sbci	r19, 0xFF	; 255
    1786:	2c 0f       	add	r18, r28
    1788:	3d 1f       	adc	r19, r29
    checksum += (uint8_t)(*(index++));  
    178a:	91 91       	ld	r25, Z+
    178c:	89 0f       	add	r24, r25
  //EtherComm::buffer[2] = len;
  
  uint8_t checksum = START_BYTE + cmd;
  uint8_t* index = &EtherComm::buffer[2]; //TODO why is char* being used? convert ot uint8_t*!!
  uint8_t bytes = len;
  while(bytes-- > 0){
    178e:	e2 17       	cp	r30, r18
    1790:	f3 07       	cpc	r31, r19
    1792:	d9 f7       	brne	.-10     	; 0x178a <_ZN9EtherComm11SendCommandEhh+0x42>
    1794:	4f 5f       	subi	r20, 0xFF	; 255
    1796:	5f 4f       	sbci	r21, 0xFF	; 255
    1798:	a4 0f       	add	r26, r20
    179a:	b5 1f       	adc	r27, r21
    checksum += (uint8_t)(*(index++));  
  }
  (*index) = (uint8_t)(checksum & CHECKSUM_MASK);
    179c:	8c 93       	st	X, r24

  //Serial.print("Send: ");
  //Serial.println(len);
  ether.sendUdp(EtherComm::buffer, (uint16_t)len + (uint16_t)3, _recvPort, _destIP, _destPort);
    179e:	00 91 b1 05 	lds	r16, 0x05B1	; 0x8005b1 <_ZN9EtherComm9_destPortE>
    17a2:	10 91 b2 05 	lds	r17, 0x05B2	; 0x8005b2 <_ZN9EtherComm9_destPortE+0x1>
    17a6:	40 91 b3 05 	lds	r20, 0x05B3	; 0x8005b3 <_ZN9EtherComm9_recvPortE>
    17aa:	50 91 b4 05 	lds	r21, 0x05B4	; 0x8005b4 <_ZN9EtherComm9_recvPortE+0x1>
    17ae:	70 e0       	ldi	r23, 0x00	; 0
    17b0:	6d 5f       	subi	r22, 0xFD	; 253
    17b2:	7f 4f       	sbci	r23, 0xFF	; 255
    17b4:	22 e0       	ldi	r18, 0x02	; 2
    17b6:	32 e0       	ldi	r19, 0x02	; 2
    17b8:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    17bc:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    17c0:	52 dd       	rcall	.-1372   	; 0x1266 <_ZN9EtherCard7sendUdpEPKhjjS1_j>
}
    17c2:	df 91       	pop	r29
    17c4:	cf 91       	pop	r28
    17c6:	1f 91       	pop	r17
    17c8:	0f 91       	pop	r16
    17ca:	08 95       	ret

000017cc <main>:
#define MIN 550
#define MAX 2400

int main(void){
	//TestIMU();
	sei(); //Enable global interrupts
    17cc:	78 94       	sei
	public:
	inline HardwareSerial(
	volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
	volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
	volatile uint8_t *ucsrc, volatile uint8_t *udr);
	void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    17ce:	26 e0       	ldi	r18, 0x06	; 6
    17d0:	40 e8       	ldi	r20, 0x80	; 128
    17d2:	55 e2       	ldi	r21, 0x25	; 37
    17d4:	60 e0       	ldi	r22, 0x00	; 0
    17d6:	70 e0       	ldi	r23, 0x00	; 0
    17d8:	8f ed       	ldi	r24, 0xDF	; 223
    17da:	95 e0       	ldi	r25, 0x05	; 5
    17dc:	0e 94 ce 15 	call	0x2b9c	; 0x2b9c <_ZN14HardwareSerial5beginEmh>
	Serial.begin(9600);
	Serial.println("\nInitializing...");
    17e0:	6b e2       	ldi	r22, 0x2B	; 43
    17e2:	72 e0       	ldi	r23, 0x02	; 2
    17e4:	8f ed       	ldi	r24, 0xDF	; 223
    17e6:	95 e0       	ldi	r25, 0x05	; 5
    17e8:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <_ZN5Print7printlnEPKc>
	
	if(!rov.begin()){
    17ec:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <_ZN5Robot5beginEv>
    17f0:	81 11       	cpse	r24, r1
    17f2:	07 c0       	rjmp	.+14     	; 0x1802 <main+0x36>
		Serial.println("Failed to initialize robot.");
    17f4:	6c e3       	ldi	r22, 0x3C	; 60
    17f6:	72 e0       	ldi	r23, 0x02	; 2
    17f8:	8f ed       	ldi	r24, 0xDF	; 223
    17fa:	95 e0       	ldi	r25, 0x05	; 5
    17fc:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <_ZN5Print7printlnEPKc>
    1800:	ff cf       	rjmp	.-2      	; 0x1800 <main+0x34>
		while(1);
	}
	Serial.println("Robot initialized.");
    1802:	68 e5       	ldi	r22, 0x58	; 88
    1804:	72 e0       	ldi	r23, 0x02	; 2
    1806:	8f ed       	ldi	r24, 0xDF	; 223
    1808:	95 e0       	ldi	r25, 0x05	; 5
    180a:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <_ZN5Print7printlnEPKc>
	
	if(!PressureSensor.begin()){
    180e:	8a eb       	ldi	r24, 0xBA	; 186
    1810:	95 e0       	ldi	r25, 0x05	; 5
    1812:	82 d7       	rcall	.+3844   	; 0x2718 <_ZN6MS58375beginEv>
    1814:	81 11       	cpse	r24, r1
    1816:	07 c0       	rjmp	.+14     	; 0x1826 <main+0x5a>
		Serial.println("Failed to initialize pressure sensor.");
    1818:	6b e6       	ldi	r22, 0x6B	; 107
    181a:	72 e0       	ldi	r23, 0x02	; 2
    181c:	8f ed       	ldi	r24, 0xDF	; 223
    181e:	95 e0       	ldi	r25, 0x05	; 5
    1820:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <_ZN5Print7printlnEPKc>
    1824:	ff cf       	rjmp	.-2      	; 0x1824 <main+0x58>
		while(1);
	}
	PressureSensor.setModel(MS5837::MS5837_30BA);
    1826:	60 91 fe 02 	lds	r22, 0x02FE	; 0x8002fe <_ZN6MS583711MS5837_30BAE>
    182a:	8a eb       	ldi	r24, 0xBA	; 186
    182c:	95 e0       	ldi	r25, 0x05	; 5
    182e:	5c d0       	rcall	.+184    	; 0x18e8 <_ZN6MS58378setModelEh>
	PressureSensor.setFluidDensity(997); //Freshwater
    1830:	40 e0       	ldi	r20, 0x00	; 0
    1832:	50 e4       	ldi	r21, 0x40	; 64
    1834:	69 e7       	ldi	r22, 0x79	; 121
    1836:	74 e4       	ldi	r23, 0x44	; 68
    1838:	8a eb       	ldi	r24, 0xBA	; 186
    183a:	95 e0       	ldi	r25, 0x05	; 5
    183c:	58 d0       	rcall	.+176    	; 0x18ee <_ZN6MS583715setFluidDensityEf>
	Serial.println("Initialized pressure sensor.");
    183e:	61 e9       	ldi	r22, 0x91	; 145
    1840:	72 e0       	ldi	r23, 0x02	; 2
    1842:	8f ed       	ldi	r24, 0xDF	; 223
    1844:	95 e0       	ldi	r25, 0x05	; 5
    1846:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <_ZN5Print7printlnEPKc>
	
	if(!EtherComm::begin((uint16_t)6001, (uint16_t)6002, DDR_ENC, PORT_ENC, MASK_ENC_CS)){
    184a:	01 e0       	ldi	r16, 0x01	; 1
    184c:	25 e2       	ldi	r18, 0x25	; 37
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	44 e2       	ldi	r20, 0x24	; 36
    1852:	50 e0       	ldi	r21, 0x00	; 0
    1854:	62 e7       	ldi	r22, 0x72	; 114
    1856:	77 e1       	ldi	r23, 0x17	; 23
    1858:	81 e7       	ldi	r24, 0x71	; 113
    185a:	97 e1       	ldi	r25, 0x17	; 23
    185c:	4c df       	rcall	.-360    	; 0x16f6 <_ZN9EtherComm5beginEjjRVhS1_h>
    185e:	81 11       	cpse	r24, r1
    1860:	07 c0       	rjmp	.+14     	; 0x1870 <main+0xa4>
		Serial.println("Failed to access Ethernet controller.");
    1862:	6e ea       	ldi	r22, 0xAE	; 174
    1864:	72 e0       	ldi	r23, 0x02	; 2
    1866:	8f ed       	ldi	r24, 0xDF	; 223
    1868:	95 e0       	ldi	r25, 0x05	; 5
    186a:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <_ZN5Print7printlnEPKc>
    186e:	ff cf       	rjmp	.-2      	; 0x186e <main+0xa2>
		while(1);
	}
	Serial.println("Connected to controller.");
    1870:	64 ed       	ldi	r22, 0xD4	; 212
    1872:	72 e0       	ldi	r23, 0x02	; 2
    1874:	8f ed       	ldi	r24, 0xDF	; 223
    1876:	95 e0       	ldi	r25, 0x05	; 5
  static bool begin(uint16_t recvPort, uint16_t destPort, Register& csDDR, Register& csPort, uint8_t csPin);

  friend void udpReceive(uint16_t dest_port, uint8_t src_ip[IP_LEN], uint16_t src_port, const char *data, uint16_t len);

  static void Loop(){
    ether.packetLoop(ether.packetReceive());
    1878:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <_ZN5Print7printlnEPKc>
    187c:	bd da       	rcall	.-2694   	; 0xdf8 <_ZN8ENC28J6013packetReceiveEv>
    187e:	2c dd       	rcall	.-1448   	; 0x12d8 <_ZN9EtherCard10packetLoopEj>
	*/
    /* Replace with your application code */
	//TwiServo.begin();
    while (1) {
		EtherComm::Loop();
		rov.Loop();
    1880:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <_ZN5Robot4LoopEv>
			dir = 1;
			_delay_ms(500);
		}
		_delay_ms(5);*/
		//TwiServo.sweep();
		Serial.print("Pressure: ");
    1884:	6d ee       	ldi	r22, 0xED	; 237
    1886:	72 e0       	ldi	r23, 0x02	; 2
    1888:	8f ed       	ldi	r24, 0xDF	; 223
    188a:	95 e0       	ldi	r25, 0x05	; 5
    188c:	0e 94 cb 1f 	call	0x3f96	; 0x3f96 <_ZN5Print5printEPKc>
		PressureSensor.read();
    1890:	8a eb       	ldi	r24, 0xBA	; 186
    1892:	95 e0       	ldi	r25, 0x05	; 5
		Serial.print(PressureSensor.pressure());
    1894:	b4 d7       	rcall	.+3944   	; 0x27fe <_ZN6MS58374readEv>
    1896:	40 e0       	ldi	r20, 0x00	; 0
    1898:	50 e0       	ldi	r21, 0x00	; 0
    189a:	60 e8       	ldi	r22, 0x80	; 128
    189c:	7f e3       	ldi	r23, 0x3F	; 63
    189e:	8a eb       	ldi	r24, 0xBA	; 186
    18a0:	95 e0       	ldi	r25, 0x05	; 5
    18a2:	d0 d6       	rcall	.+3488   	; 0x2644 <_ZN6MS58378pressureEf>
    18a4:	ab 01       	movw	r20, r22
    18a6:	bc 01       	movw	r22, r24
    18a8:	22 e0       	ldi	r18, 0x02	; 2
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	8f ed       	ldi	r24, 0xDF	; 223
    18ae:	95 e0       	ldi	r25, 0x05	; 5
    18b0:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <_ZN5Print5printEdi>
		Serial.println(" mbar");
    18b4:	68 ef       	ldi	r22, 0xF8	; 248
    18b6:	72 e0       	ldi	r23, 0x02	; 2
    18b8:	8f ed       	ldi	r24, 0xDF	; 223
    18ba:	95 e0       	ldi	r25, 0x05	; 5
    18bc:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <_ZN5Print7printlnEPKc>
    18c0:	dd cf       	rjmp	.-70     	; 0x187c <main+0xb0>

000018c2 <_GLOBAL__sub_I_dir>:
int8_t dir = 1;
uint8_t pos = 128;
#include "Utils/CpuFreq.h"
#include <util/delay.h>

MS5837 PressureSensor;
    18c2:	8a eb       	ldi	r24, 0xBA	; 186
    18c4:	95 e0       	ldi	r25, 0x05	; 5
    18c6:	06 d0       	rcall	.+12     	; 0x18d4 <_ZN6MS5837C1Ev>
TwiServoController TwiServo(0x40);
    18c8:	60 e4       	ldi	r22, 0x40	; 64
    18ca:	85 eb       	ldi	r24, 0xB5	; 181
    18cc:	95 e0       	ldi	r25, 0x05	; 5
    18ce:	0c 94 ea 14 	jmp	0x29d4	; 0x29d4 <_ZN18TwiServoControllerC1Eh>
    18d2:	08 95       	ret

000018d4 <_ZN6MS5837C1Ev>:
	return (pressure(MS5837::Pa)-101300)/(fluidDensity*9.80665);
}

float MS5837::altitude() {
	return (1-pow((pressure()/1013.25),.190284))*145366.45*.3048;
}
    18d4:	40 e0       	ldi	r20, 0x00	; 0
    18d6:	50 ea       	ldi	r21, 0xA0	; 160
    18d8:	60 e8       	ldi	r22, 0x80	; 128
    18da:	74 e4       	ldi	r23, 0x44	; 68
    18dc:	fc 01       	movw	r30, r24
    18de:	41 a3       	std	Z+33, r20	; 0x21
    18e0:	52 a3       	std	Z+34, r21	; 0x22
    18e2:	63 a3       	std	Z+35, r22	; 0x23
    18e4:	74 a3       	std	Z+36, r23	; 0x24
    18e6:	08 95       	ret

000018e8 <_ZN6MS58378setModelEh>:
    18e8:	fc 01       	movw	r30, r24
    18ea:	60 a3       	std	Z+32, r22	; 0x20
    18ec:	08 95       	ret

000018ee <_ZN6MS583715setFluidDensityEf>:
    18ee:	fc 01       	movw	r30, r24
    18f0:	41 a3       	std	Z+33, r20	; 0x21
    18f2:	52 a3       	std	Z+34, r21	; 0x22
    18f4:	63 a3       	std	Z+35, r22	; 0x23
    18f6:	74 a3       	std	Z+36, r23	; 0x24
    18f8:	08 95       	ret

000018fa <_ZN6MS58379calculateEv>:
    18fa:	2f 92       	push	r2
    18fc:	3f 92       	push	r3
    18fe:	4f 92       	push	r4
    1900:	5f 92       	push	r5
    1902:	6f 92       	push	r6
    1904:	7f 92       	push	r7
    1906:	8f 92       	push	r8
    1908:	9f 92       	push	r9
    190a:	af 92       	push	r10
    190c:	bf 92       	push	r11
    190e:	cf 92       	push	r12
    1910:	df 92       	push	r13
    1912:	ef 92       	push	r14
    1914:	ff 92       	push	r15
    1916:	0f 93       	push	r16
    1918:	1f 93       	push	r17
    191a:	cf 93       	push	r28
    191c:	df 93       	push	r29
    191e:	cd b7       	in	r28, 0x3d	; 61
    1920:	de b7       	in	r29, 0x3e	; 62
    1922:	a5 97       	sbiw	r28, 0x25	; 37
    1924:	0f b6       	in	r0, 0x3f	; 63
    1926:	f8 94       	cli
    1928:	de bf       	out	0x3e, r29	; 62
    192a:	0f be       	out	0x3f, r0	; 63
    192c:	cd bf       	out	0x3d, r28	; 61
    192e:	1c 01       	movw	r2, r24
    1930:	dc 01       	movw	r26, r24
    1932:	1a 96       	adiw	r26, 0x0a	; 10
    1934:	8d 91       	ld	r24, X+
    1936:	9c 91       	ld	r25, X
    1938:	1b 97       	sbiw	r26, 0x0b	; 11
    193a:	a0 e0       	ldi	r26, 0x00	; 0
    193c:	b0 e0       	ldi	r27, 0x00	; 0
    193e:	ba 2f       	mov	r27, r26
    1940:	a9 2f       	mov	r26, r25
    1942:	98 2f       	mov	r25, r24
    1944:	88 27       	eor	r24, r24
    1946:	f1 01       	movw	r30, r2
    1948:	44 89       	ldd	r20, Z+20	; 0x14
    194a:	55 89       	ldd	r21, Z+21	; 0x15
    194c:	66 89       	ldd	r22, Z+22	; 0x16
    194e:	77 89       	ldd	r23, Z+23	; 0x17
    1950:	3a 01       	movw	r6, r20
    1952:	4b 01       	movw	r8, r22
    1954:	68 1a       	sub	r6, r24
    1956:	79 0a       	sbc	r7, r25
    1958:	8a 0a       	sbc	r8, r26
    195a:	9b 0a       	sbc	r9, r27
    195c:	69 82       	std	Y+1, r6	; 0x01
    195e:	7a 82       	std	Y+2, r7	; 0x02
    1960:	8b 82       	std	Y+3, r8	; 0x03
    1962:	9c 82       	std	Y+4, r9	; 0x04
    1964:	80 a1       	ldd	r24, Z+32	; 0x20
    1966:	81 30       	cpi	r24, 0x01	; 1
    1968:	09 f0       	breq	.+2      	; 0x196c <_ZN6MS58379calculateEv+0x72>
    196a:	58 c1       	rjmp	.+688    	; 0x1c1c <_ZN6MS58379calculateEv+0x322>
    196c:	99 0c       	add	r9, r9
    196e:	66 08       	sbc	r6, r6
    1970:	76 2c       	mov	r7, r6
    1972:	43 01       	movw	r8, r6
    1974:	6d 82       	std	Y+5, r6	; 0x05
    1976:	7e 82       	std	Y+6, r7	; 0x06
    1978:	8f 82       	std	Y+7, r8	; 0x07
    197a:	98 86       	std	Y+8, r9	; 0x08
    197c:	86 81       	ldd	r24, Z+6	; 0x06
    197e:	97 81       	ldd	r25, Z+7	; 0x07
    1980:	3c 01       	movw	r6, r24
    1982:	81 2c       	mov	r8, r1
    1984:	91 2c       	mov	r9, r1
    1986:	a1 2c       	mov	r10, r1
    1988:	b1 2c       	mov	r11, r1
    198a:	65 01       	movw	r12, r10
    198c:	8d 8f       	std	Y+29, r24	; 0x1d
    198e:	7e 8e       	std	Y+30, r7	; 0x1e
    1990:	8f 8e       	std	Y+31, r8	; 0x1f
    1992:	98 a2       	std	Y+32, r9	; 0x20
    1994:	a9 a2       	std	Y+33, r10	; 0x21
    1996:	ba a2       	std	Y+34, r11	; 0x22
    1998:	cb a2       	std	Y+35, r12	; 0x23
    199a:	dc a2       	std	Y+36, r13	; 0x24
    199c:	a9 80       	ldd	r10, Y+1	; 0x01
    199e:	ba 80       	ldd	r11, Y+2	; 0x02
    19a0:	cb 80       	ldd	r12, Y+3	; 0x03
    19a2:	dc 80       	ldd	r13, Y+4	; 0x04
    19a4:	ed 80       	ldd	r14, Y+5	; 0x05
    19a6:	fe 2c       	mov	r15, r14
    19a8:	0e 2d       	mov	r16, r14
    19aa:	1e 2d       	mov	r17, r14
    19ac:	28 2f       	mov	r18, r24
    19ae:	37 2d       	mov	r19, r7
    19b0:	40 e0       	ldi	r20, 0x00	; 0
    19b2:	50 e0       	ldi	r21, 0x00	; 0
    19b4:	60 e0       	ldi	r22, 0x00	; 0
    19b6:	70 e0       	ldi	r23, 0x00	; 0
    19b8:	80 e0       	ldi	r24, 0x00	; 0
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	0e 94 da 23 	call	0x47b4	; 0x47b4 <__muldi3>
    19c0:	12 2f       	mov	r17, r18
    19c2:	3e 87       	std	Y+14, r19	; 0x0e
    19c4:	4d 87       	std	Y+13, r20	; 0x0d
    19c6:	b5 2f       	mov	r27, r21
    19c8:	f6 2f       	mov	r31, r22
    19ca:	e7 2f       	mov	r30, r23
    19cc:	78 2e       	mov	r7, r24
    19ce:	89 2e       	mov	r8, r25
    19d0:	a0 e0       	ldi	r26, 0x00	; 0
    19d2:	0e 94 80 24 	call	0x4900	; 0x4900 <__cmpdi2_s8>
    19d6:	5c f4       	brge	.+22     	; 0x19ee <_ZN6MS58379calculateEv+0xf4>
    19d8:	af e7       	ldi	r26, 0x7F	; 127
    19da:	0e 94 6b 24 	call	0x48d6	; 0x48d6 <__adddi3_s8>
    19de:	12 2f       	mov	r17, r18
    19e0:	3e 87       	std	Y+14, r19	; 0x0e
    19e2:	4d 87       	std	Y+13, r20	; 0x0d
    19e4:	b5 2f       	mov	r27, r21
    19e6:	f6 2f       	mov	r31, r22
    19e8:	e7 2f       	mov	r30, r23
    19ea:	78 2e       	mov	r7, r24
    19ec:	89 2e       	mov	r8, r25
    19ee:	21 2f       	mov	r18, r17
    19f0:	3e 85       	ldd	r19, Y+14	; 0x0e
    19f2:	4d 85       	ldd	r20, Y+13	; 0x0d
    19f4:	5b 2f       	mov	r21, r27
    19f6:	6f 2f       	mov	r22, r31
    19f8:	7e 2f       	mov	r23, r30
    19fa:	87 2d       	mov	r24, r7
    19fc:	98 2d       	mov	r25, r8
    19fe:	07 e0       	ldi	r16, 0x07	; 7
    1a00:	0e 94 44 24 	call	0x4888	; 0x4888 <__ashrdi3>
    1a04:	82 2e       	mov	r8, r18
    1a06:	93 2e       	mov	r9, r19
    1a08:	74 2e       	mov	r7, r20
    1a0a:	65 2e       	mov	r6, r21
    1a0c:	b6 2f       	mov	r27, r22
    1a0e:	a7 2f       	mov	r26, r23
    1a10:	58 2e       	mov	r5, r24
    1a12:	49 2e       	mov	r4, r25
    1a14:	f1 01       	movw	r30, r2
    1a16:	a2 80       	ldd	r10, Z+2	; 0x02
    1a18:	b3 80       	ldd	r11, Z+3	; 0x03
    1a1a:	2a 2d       	mov	r18, r10
    1a1c:	3b 2d       	mov	r19, r11
    1a1e:	40 e0       	ldi	r20, 0x00	; 0
    1a20:	50 e0       	ldi	r21, 0x00	; 0
    1a22:	60 e0       	ldi	r22, 0x00	; 0
    1a24:	70 e0       	ldi	r23, 0x00	; 0
    1a26:	80 e0       	ldi	r24, 0x00	; 0
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	00 e1       	ldi	r16, 0x10	; 16
    1a2c:	0e 94 2b 24 	call	0x4856	; 0x4856 <__ashldi3>
    1a30:	a2 2e       	mov	r10, r18
    1a32:	b3 2e       	mov	r11, r19
    1a34:	c4 2e       	mov	r12, r20
    1a36:	d5 2e       	mov	r13, r21
    1a38:	e6 2e       	mov	r14, r22
    1a3a:	f7 2e       	mov	r15, r23
    1a3c:	08 2f       	mov	r16, r24
    1a3e:	19 2f       	mov	r17, r25
    1a40:	28 2d       	mov	r18, r8
    1a42:	39 2d       	mov	r19, r9
    1a44:	47 2d       	mov	r20, r7
    1a46:	56 2d       	mov	r21, r6
    1a48:	6b 2f       	mov	r22, r27
    1a4a:	7a 2f       	mov	r23, r26
    1a4c:	85 2d       	mov	r24, r5
    1a4e:	94 2d       	mov	r25, r4
    1a50:	0e 94 62 24 	call	0x48c4	; 0x48c4 <__adddi3>
    1a54:	2d 87       	std	Y+13, r18	; 0x0d
    1a56:	3e 87       	std	Y+14, r19	; 0x0e
    1a58:	4f 87       	std	Y+15, r20	; 0x0f
    1a5a:	58 8b       	std	Y+16, r21	; 0x10
    1a5c:	69 8b       	std	Y+17, r22	; 0x11
    1a5e:	7a 8b       	std	Y+18, r23	; 0x12
    1a60:	8b 8b       	std	Y+19, r24	; 0x13
    1a62:	9c 8b       	std	Y+20, r25	; 0x14
    1a64:	80 85       	ldd	r24, Z+8	; 0x08
    1a66:	91 85       	ldd	r25, Z+9	; 0x09
    1a68:	3c 01       	movw	r6, r24
    1a6a:	81 2c       	mov	r8, r1
    1a6c:	91 2c       	mov	r9, r1
    1a6e:	a1 2c       	mov	r10, r1
    1a70:	b1 2c       	mov	r11, r1
    1a72:	65 01       	movw	r12, r10
    1a74:	8d 8f       	std	Y+29, r24	; 0x1d
    1a76:	7e 8e       	std	Y+30, r7	; 0x1e
    1a78:	8f 8e       	std	Y+31, r8	; 0x1f
    1a7a:	98 a2       	std	Y+32, r9	; 0x20
    1a7c:	a9 a2       	std	Y+33, r10	; 0x21
    1a7e:	ba a2       	std	Y+34, r11	; 0x22
    1a80:	cb a2       	std	Y+35, r12	; 0x23
    1a82:	dc a2       	std	Y+36, r13	; 0x24
    1a84:	a9 80       	ldd	r10, Y+1	; 0x01
    1a86:	ba 80       	ldd	r11, Y+2	; 0x02
    1a88:	cb 80       	ldd	r12, Y+3	; 0x03
    1a8a:	dc 80       	ldd	r13, Y+4	; 0x04
    1a8c:	ed 80       	ldd	r14, Y+5	; 0x05
    1a8e:	fe 2c       	mov	r15, r14
    1a90:	0e 2d       	mov	r16, r14
    1a92:	1e 2d       	mov	r17, r14
    1a94:	28 2f       	mov	r18, r24
    1a96:	37 2d       	mov	r19, r7
    1a98:	40 e0       	ldi	r20, 0x00	; 0
    1a9a:	50 e0       	ldi	r21, 0x00	; 0
    1a9c:	60 e0       	ldi	r22, 0x00	; 0
    1a9e:	70 e0       	ldi	r23, 0x00	; 0
    1aa0:	80 e0       	ldi	r24, 0x00	; 0
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	0e 94 da 23 	call	0x47b4	; 0x47b4 <__muldi3>
    1aa8:	12 2f       	mov	r17, r18
    1aaa:	3e 8b       	std	Y+22, r19	; 0x16
    1aac:	4d 8b       	std	Y+21, r20	; 0x15
    1aae:	b5 2f       	mov	r27, r21
    1ab0:	f6 2f       	mov	r31, r22
    1ab2:	e7 2f       	mov	r30, r23
    1ab4:	78 2e       	mov	r7, r24
    1ab6:	89 2e       	mov	r8, r25
    1ab8:	a0 e0       	ldi	r26, 0x00	; 0
    1aba:	0e 94 80 24 	call	0x4900	; 0x4900 <__cmpdi2_s8>
    1abe:	5c f4       	brge	.+22     	; 0x1ad6 <_ZN6MS58379calculateEv+0x1dc>
    1ac0:	af e3       	ldi	r26, 0x3F	; 63
    1ac2:	0e 94 6b 24 	call	0x48d6	; 0x48d6 <__adddi3_s8>
    1ac6:	12 2f       	mov	r17, r18
    1ac8:	3e 8b       	std	Y+22, r19	; 0x16
    1aca:	4d 8b       	std	Y+21, r20	; 0x15
    1acc:	b5 2f       	mov	r27, r21
    1ace:	f6 2f       	mov	r31, r22
    1ad0:	e7 2f       	mov	r30, r23
    1ad2:	78 2e       	mov	r7, r24
    1ad4:	89 2e       	mov	r8, r25
    1ad6:	21 2f       	mov	r18, r17
    1ad8:	3e 89       	ldd	r19, Y+22	; 0x16
    1ada:	4d 89       	ldd	r20, Y+21	; 0x15
    1adc:	5b 2f       	mov	r21, r27
    1ade:	6f 2f       	mov	r22, r31
    1ae0:	7e 2f       	mov	r23, r30
    1ae2:	87 2d       	mov	r24, r7
    1ae4:	98 2d       	mov	r25, r8
    1ae6:	06 e0       	ldi	r16, 0x06	; 6
    1ae8:	0e 94 44 24 	call	0x4888	; 0x4888 <__ashrdi3>
    1aec:	82 2e       	mov	r8, r18
    1aee:	93 2e       	mov	r9, r19
    1af0:	74 2e       	mov	r7, r20
    1af2:	65 2e       	mov	r6, r21
    1af4:	b6 2f       	mov	r27, r22
    1af6:	a7 2f       	mov	r26, r23
    1af8:	58 2e       	mov	r5, r24
    1afa:	49 2e       	mov	r4, r25
    1afc:	f1 01       	movw	r30, r2
    1afe:	24 81       	ldd	r18, Z+4	; 0x04
    1b00:	35 81       	ldd	r19, Z+5	; 0x05
    1b02:	59 01       	movw	r10, r18
    1b04:	3b 2d       	mov	r19, r11
    1b06:	40 e0       	ldi	r20, 0x00	; 0
    1b08:	50 e0       	ldi	r21, 0x00	; 0
    1b0a:	60 e0       	ldi	r22, 0x00	; 0
    1b0c:	70 e0       	ldi	r23, 0x00	; 0
    1b0e:	80 e0       	ldi	r24, 0x00	; 0
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	01 e1       	ldi	r16, 0x11	; 17
    1b14:	0e 94 2b 24 	call	0x4856	; 0x4856 <__ashldi3>
    1b18:	a2 2e       	mov	r10, r18
    1b1a:	b3 2e       	mov	r11, r19
    1b1c:	c4 2e       	mov	r12, r20
    1b1e:	d5 2e       	mov	r13, r21
    1b20:	e6 2e       	mov	r14, r22
    1b22:	f7 2e       	mov	r15, r23
    1b24:	08 2f       	mov	r16, r24
    1b26:	19 2f       	mov	r17, r25
    1b28:	28 2d       	mov	r18, r8
    1b2a:	39 2d       	mov	r19, r9
    1b2c:	47 2d       	mov	r20, r7
    1b2e:	56 2d       	mov	r21, r6
    1b30:	6b 2f       	mov	r22, r27
    1b32:	7a 2f       	mov	r23, r26
    1b34:	85 2d       	mov	r24, r5
    1b36:	94 2d       	mov	r25, r4
    1b38:	0e 94 62 24 	call	0x48c4	; 0x48c4 <__adddi3>
    1b3c:	2d 8b       	std	Y+21, r18	; 0x15
    1b3e:	3e 8b       	std	Y+22, r19	; 0x16
    1b40:	4f 8b       	std	Y+23, r20	; 0x17
    1b42:	58 8f       	std	Y+24, r21	; 0x18
    1b44:	69 8f       	std	Y+25, r22	; 0x19
    1b46:	7a 8f       	std	Y+26, r23	; 0x1a
    1b48:	8b 8f       	std	Y+27, r24	; 0x1b
    1b4a:	9c 8f       	std	Y+28, r25	; 0x1c
    1b4c:	84 85       	ldd	r24, Z+12	; 0x0c
    1b4e:	95 85       	ldd	r25, Z+13	; 0x0d
    1b50:	3c 01       	movw	r6, r24
    1b52:	81 2c       	mov	r8, r1
    1b54:	91 2c       	mov	r9, r1
    1b56:	a1 2c       	mov	r10, r1
    1b58:	b1 2c       	mov	r11, r1
    1b5a:	65 01       	movw	r12, r10
    1b5c:	8d 8f       	std	Y+29, r24	; 0x1d
    1b5e:	7e 8e       	std	Y+30, r7	; 0x1e
    1b60:	8f 8e       	std	Y+31, r8	; 0x1f
    1b62:	98 a2       	std	Y+32, r9	; 0x20
    1b64:	a9 a2       	std	Y+33, r10	; 0x21
    1b66:	ba a2       	std	Y+34, r11	; 0x22
    1b68:	cb a2       	std	Y+35, r12	; 0x23
    1b6a:	dc a2       	std	Y+36, r13	; 0x24
    1b6c:	a9 80       	ldd	r10, Y+1	; 0x01
    1b6e:	ba 80       	ldd	r11, Y+2	; 0x02
    1b70:	cb 80       	ldd	r12, Y+3	; 0x03
    1b72:	dc 80       	ldd	r13, Y+4	; 0x04
    1b74:	ed 80       	ldd	r14, Y+5	; 0x05
    1b76:	fe 2c       	mov	r15, r14
    1b78:	0e 2d       	mov	r16, r14
    1b7a:	1e 2d       	mov	r17, r14
    1b7c:	28 2f       	mov	r18, r24
    1b7e:	37 2d       	mov	r19, r7
    1b80:	40 e0       	ldi	r20, 0x00	; 0
    1b82:	50 e0       	ldi	r21, 0x00	; 0
    1b84:	60 e0       	ldi	r22, 0x00	; 0
    1b86:	70 e0       	ldi	r23, 0x00	; 0
    1b88:	80 e0       	ldi	r24, 0x00	; 0
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	0e 94 da 23 	call	0x47b4	; 0x47b4 <__muldi3>
    1b90:	12 2f       	mov	r17, r18
    1b92:	3d a3       	std	Y+37, r19	; 0x25
    1b94:	4d 8f       	std	Y+29, r20	; 0x1d
    1b96:	b5 2f       	mov	r27, r21
    1b98:	f6 2f       	mov	r31, r22
    1b9a:	e7 2f       	mov	r30, r23
    1b9c:	78 2e       	mov	r7, r24
    1b9e:	89 2e       	mov	r8, r25
    1ba0:	a0 e0       	ldi	r26, 0x00	; 0
    1ba2:	0e 94 80 24 	call	0x4900	; 0x4900 <__cmpdi2_s8>
    1ba6:	84 f4       	brge	.+32     	; 0x1bc8 <_ZN6MS58379calculateEv+0x2ce>
    1ba8:	21 50       	subi	r18, 0x01	; 1
    1baa:	31 09       	sbc	r19, r1
    1bac:	40 48       	sbci	r20, 0x80	; 128
    1bae:	5f 4f       	sbci	r21, 0xFF	; 255
    1bb0:	6f 4f       	sbci	r22, 0xFF	; 255
    1bb2:	7f 4f       	sbci	r23, 0xFF	; 255
    1bb4:	8f 4f       	sbci	r24, 0xFF	; 255
    1bb6:	9f 4f       	sbci	r25, 0xFF	; 255
    1bb8:	12 2f       	mov	r17, r18
    1bba:	3d a3       	std	Y+37, r19	; 0x25
    1bbc:	4d 8f       	std	Y+29, r20	; 0x1d
    1bbe:	b5 2f       	mov	r27, r21
    1bc0:	f6 2f       	mov	r31, r22
    1bc2:	e7 2f       	mov	r30, r23
    1bc4:	78 2e       	mov	r7, r24
    1bc6:	89 2e       	mov	r8, r25
    1bc8:	21 2f       	mov	r18, r17
    1bca:	3d a1       	ldd	r19, Y+37	; 0x25
    1bcc:	4d 8d       	ldd	r20, Y+29	; 0x1d
    1bce:	5b 2f       	mov	r21, r27
    1bd0:	6f 2f       	mov	r22, r31
    1bd2:	7e 2f       	mov	r23, r30
    1bd4:	87 2d       	mov	r24, r7
    1bd6:	98 2d       	mov	r25, r8
    1bd8:	07 e1       	ldi	r16, 0x17	; 23
    1bda:	0e 94 44 24 	call	0x4888	; 0x4888 <__ashrdi3>
    1bde:	82 2e       	mov	r8, r18
    1be0:	93 2e       	mov	r9, r19
    1be2:	a4 2e       	mov	r10, r20
    1be4:	b5 2e       	mov	r11, r21
    1be6:	24 01       	movw	r4, r8
    1be8:	35 01       	movw	r6, r10
    1bea:	00 ed       	ldi	r16, 0xD0	; 208
    1bec:	40 0e       	add	r4, r16
    1bee:	07 e0       	ldi	r16, 0x07	; 7
    1bf0:	50 1e       	adc	r5, r16
    1bf2:	61 1c       	adc	r6, r1
    1bf4:	71 1c       	adc	r7, r1
    1bf6:	10 ed       	ldi	r17, 0xD0	; 208
    1bf8:	41 16       	cp	r4, r17
    1bfa:	17 e0       	ldi	r17, 0x07	; 7
    1bfc:	51 06       	cpc	r5, r17
    1bfe:	61 04       	cpc	r6, r1
    1c00:	71 04       	cpc	r7, r1
    1c02:	0c f4       	brge	.+2      	; 0x1c06 <_ZN6MS58379calculateEv+0x30c>
    1c04:	62 c1       	rjmp	.+708    	; 0x1eca <_ZN6MS58379calculateEv+0x5d0>
    1c06:	81 2c       	mov	r8, r1
    1c08:	91 2c       	mov	r9, r1
    1c0a:	54 01       	movw	r10, r8
    1c0c:	19 82       	std	Y+1, r1	; 0x01
    1c0e:	1a 82       	std	Y+2, r1	; 0x02
    1c10:	1b 82       	std	Y+3, r1	; 0x03
    1c12:	1c 82       	std	Y+4, r1	; 0x04
    1c14:	e1 2c       	mov	r14, r1
    1c16:	f1 2c       	mov	r15, r1
    1c18:	87 01       	movw	r16, r14
    1c1a:	4c c3       	rjmp	.+1688   	; 0x22b4 <__stack+0xb5>
    1c1c:	69 80       	ldd	r6, Y+1	; 0x01
    1c1e:	7a 80       	ldd	r7, Y+2	; 0x02
    1c20:	8b 80       	ldd	r8, Y+3	; 0x03
    1c22:	9c 80       	ldd	r9, Y+4	; 0x04
    1c24:	99 0c       	add	r9, r9
    1c26:	66 08       	sbc	r6, r6
    1c28:	76 2c       	mov	r7, r6
    1c2a:	43 01       	movw	r8, r6
    1c2c:	6d 82       	std	Y+5, r6	; 0x05
    1c2e:	7e 82       	std	Y+6, r7	; 0x06
    1c30:	8f 82       	std	Y+7, r8	; 0x07
    1c32:	98 86       	std	Y+8, r9	; 0x08
    1c34:	86 81       	ldd	r24, Z+6	; 0x06
    1c36:	97 81       	ldd	r25, Z+7	; 0x07
    1c38:	3c 01       	movw	r6, r24
    1c3a:	81 2c       	mov	r8, r1
    1c3c:	91 2c       	mov	r9, r1
    1c3e:	a1 2c       	mov	r10, r1
    1c40:	b1 2c       	mov	r11, r1
    1c42:	65 01       	movw	r12, r10
    1c44:	8d 8f       	std	Y+29, r24	; 0x1d
    1c46:	7e 8e       	std	Y+30, r7	; 0x1e
    1c48:	8f 8e       	std	Y+31, r8	; 0x1f
    1c4a:	98 a2       	std	Y+32, r9	; 0x20
    1c4c:	a9 a2       	std	Y+33, r10	; 0x21
    1c4e:	ba a2       	std	Y+34, r11	; 0x22
    1c50:	cb a2       	std	Y+35, r12	; 0x23
    1c52:	dc a2       	std	Y+36, r13	; 0x24
    1c54:	a9 80       	ldd	r10, Y+1	; 0x01
    1c56:	ba 80       	ldd	r11, Y+2	; 0x02
    1c58:	cb 80       	ldd	r12, Y+3	; 0x03
    1c5a:	dc 80       	ldd	r13, Y+4	; 0x04
    1c5c:	ed 80       	ldd	r14, Y+5	; 0x05
    1c5e:	fe 2c       	mov	r15, r14
    1c60:	0e 2d       	mov	r16, r14
    1c62:	1e 2d       	mov	r17, r14
    1c64:	28 2f       	mov	r18, r24
    1c66:	37 2d       	mov	r19, r7
    1c68:	40 e0       	ldi	r20, 0x00	; 0
    1c6a:	50 e0       	ldi	r21, 0x00	; 0
    1c6c:	60 e0       	ldi	r22, 0x00	; 0
    1c6e:	70 e0       	ldi	r23, 0x00	; 0
    1c70:	80 e0       	ldi	r24, 0x00	; 0
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	0e 94 da 23 	call	0x47b4	; 0x47b4 <__muldi3>
    1c78:	12 2f       	mov	r17, r18
    1c7a:	3e 87       	std	Y+14, r19	; 0x0e
    1c7c:	4d 87       	std	Y+13, r20	; 0x0d
    1c7e:	b5 2f       	mov	r27, r21
    1c80:	f6 2f       	mov	r31, r22
    1c82:	e7 2f       	mov	r30, r23
    1c84:	78 2e       	mov	r7, r24
    1c86:	89 2e       	mov	r8, r25
    1c88:	a0 e0       	ldi	r26, 0x00	; 0
    1c8a:	0e 94 80 24 	call	0x4900	; 0x4900 <__cmpdi2_s8>
    1c8e:	84 f4       	brge	.+32     	; 0x1cb0 <_ZN6MS58379calculateEv+0x3b6>
    1c90:	21 50       	subi	r18, 0x01	; 1
    1c92:	3f 4f       	sbci	r19, 0xFF	; 255
    1c94:	4f 4f       	sbci	r20, 0xFF	; 255
    1c96:	5f 4f       	sbci	r21, 0xFF	; 255
    1c98:	6f 4f       	sbci	r22, 0xFF	; 255
    1c9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c9c:	8f 4f       	sbci	r24, 0xFF	; 255
    1c9e:	9f 4f       	sbci	r25, 0xFF	; 255
    1ca0:	12 2f       	mov	r17, r18
    1ca2:	3e 87       	std	Y+14, r19	; 0x0e
    1ca4:	4d 87       	std	Y+13, r20	; 0x0d
    1ca6:	b5 2f       	mov	r27, r21
    1ca8:	f6 2f       	mov	r31, r22
    1caa:	e7 2f       	mov	r30, r23
    1cac:	78 2e       	mov	r7, r24
    1cae:	89 2e       	mov	r8, r25
    1cb0:	21 2f       	mov	r18, r17
    1cb2:	3e 85       	ldd	r19, Y+14	; 0x0e
    1cb4:	4d 85       	ldd	r20, Y+13	; 0x0d
    1cb6:	5b 2f       	mov	r21, r27
    1cb8:	6f 2f       	mov	r22, r31
    1cba:	7e 2f       	mov	r23, r30
    1cbc:	87 2d       	mov	r24, r7
    1cbe:	98 2d       	mov	r25, r8
    1cc0:	08 e0       	ldi	r16, 0x08	; 8
    1cc2:	0e 94 44 24 	call	0x4888	; 0x4888 <__ashrdi3>
    1cc6:	82 2e       	mov	r8, r18
    1cc8:	93 2e       	mov	r9, r19
    1cca:	74 2e       	mov	r7, r20
    1ccc:	65 2e       	mov	r6, r21
    1cce:	b6 2f       	mov	r27, r22
    1cd0:	a7 2f       	mov	r26, r23
    1cd2:	58 2e       	mov	r5, r24
    1cd4:	49 2e       	mov	r4, r25
    1cd6:	f1 01       	movw	r30, r2
    1cd8:	a2 80       	ldd	r10, Z+2	; 0x02
    1cda:	b3 80       	ldd	r11, Z+3	; 0x03
    1cdc:	2a 2d       	mov	r18, r10
    1cde:	3b 2d       	mov	r19, r11
    1ce0:	40 e0       	ldi	r20, 0x00	; 0
    1ce2:	50 e0       	ldi	r21, 0x00	; 0
    1ce4:	60 e0       	ldi	r22, 0x00	; 0
    1ce6:	70 e0       	ldi	r23, 0x00	; 0
    1ce8:	80 e0       	ldi	r24, 0x00	; 0
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	0f e0       	ldi	r16, 0x0F	; 15
    1cee:	0e 94 2b 24 	call	0x4856	; 0x4856 <__ashldi3>
    1cf2:	a2 2e       	mov	r10, r18
    1cf4:	b3 2e       	mov	r11, r19
    1cf6:	c4 2e       	mov	r12, r20
    1cf8:	d5 2e       	mov	r13, r21
    1cfa:	e6 2e       	mov	r14, r22
    1cfc:	f7 2e       	mov	r15, r23
    1cfe:	08 2f       	mov	r16, r24
    1d00:	19 2f       	mov	r17, r25
    1d02:	28 2d       	mov	r18, r8
    1d04:	39 2d       	mov	r19, r9
    1d06:	47 2d       	mov	r20, r7
    1d08:	56 2d       	mov	r21, r6
    1d0a:	6b 2f       	mov	r22, r27
    1d0c:	7a 2f       	mov	r23, r26
    1d0e:	85 2d       	mov	r24, r5
    1d10:	94 2d       	mov	r25, r4
    1d12:	0e 94 62 24 	call	0x48c4	; 0x48c4 <__adddi3>
    1d16:	2d 8b       	std	Y+21, r18	; 0x15
    1d18:	3e 8b       	std	Y+22, r19	; 0x16
    1d1a:	4f 8b       	std	Y+23, r20	; 0x17
    1d1c:	58 8f       	std	Y+24, r21	; 0x18
    1d1e:	69 8f       	std	Y+25, r22	; 0x19
    1d20:	7a 8f       	std	Y+26, r23	; 0x1a
    1d22:	8b 8f       	std	Y+27, r24	; 0x1b
    1d24:	9c 8f       	std	Y+28, r25	; 0x1c
    1d26:	80 85       	ldd	r24, Z+8	; 0x08
    1d28:	91 85       	ldd	r25, Z+9	; 0x09
    1d2a:	3c 01       	movw	r6, r24
    1d2c:	81 2c       	mov	r8, r1
    1d2e:	91 2c       	mov	r9, r1
    1d30:	a1 2c       	mov	r10, r1
    1d32:	b1 2c       	mov	r11, r1
    1d34:	65 01       	movw	r12, r10
    1d36:	8d 8f       	std	Y+29, r24	; 0x1d
    1d38:	7e 8e       	std	Y+30, r7	; 0x1e
    1d3a:	8f 8e       	std	Y+31, r8	; 0x1f
    1d3c:	98 a2       	std	Y+32, r9	; 0x20
    1d3e:	a9 a2       	std	Y+33, r10	; 0x21
    1d40:	ba a2       	std	Y+34, r11	; 0x22
    1d42:	cb a2       	std	Y+35, r12	; 0x23
    1d44:	dc a2       	std	Y+36, r13	; 0x24
    1d46:	a9 80       	ldd	r10, Y+1	; 0x01
    1d48:	ba 80       	ldd	r11, Y+2	; 0x02
    1d4a:	cb 80       	ldd	r12, Y+3	; 0x03
    1d4c:	dc 80       	ldd	r13, Y+4	; 0x04
    1d4e:	ed 80       	ldd	r14, Y+5	; 0x05
    1d50:	fe 2c       	mov	r15, r14
    1d52:	0e 2d       	mov	r16, r14
    1d54:	1e 2d       	mov	r17, r14
    1d56:	28 2f       	mov	r18, r24
    1d58:	37 2d       	mov	r19, r7
    1d5a:	40 e0       	ldi	r20, 0x00	; 0
    1d5c:	50 e0       	ldi	r21, 0x00	; 0
    1d5e:	60 e0       	ldi	r22, 0x00	; 0
    1d60:	70 e0       	ldi	r23, 0x00	; 0
    1d62:	80 e0       	ldi	r24, 0x00	; 0
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	0e 94 da 23 	call	0x47b4	; 0x47b4 <__muldi3>
    1d6a:	12 2f       	mov	r17, r18
    1d6c:	3e 87       	std	Y+14, r19	; 0x0e
    1d6e:	4d 87       	std	Y+13, r20	; 0x0d
    1d70:	b5 2f       	mov	r27, r21
    1d72:	f6 2f       	mov	r31, r22
    1d74:	e7 2f       	mov	r30, r23
    1d76:	78 2e       	mov	r7, r24
    1d78:	89 2e       	mov	r8, r25
    1d7a:	a0 e0       	ldi	r26, 0x00	; 0
    1d7c:	0e 94 80 24 	call	0x4900	; 0x4900 <__cmpdi2_s8>
    1d80:	5c f4       	brge	.+22     	; 0x1d98 <_ZN6MS58379calculateEv+0x49e>
    1d82:	af e7       	ldi	r26, 0x7F	; 127
    1d84:	0e 94 6b 24 	call	0x48d6	; 0x48d6 <__adddi3_s8>
    1d88:	12 2f       	mov	r17, r18
    1d8a:	3e 87       	std	Y+14, r19	; 0x0e
    1d8c:	4d 87       	std	Y+13, r20	; 0x0d
    1d8e:	b5 2f       	mov	r27, r21
    1d90:	f6 2f       	mov	r31, r22
    1d92:	e7 2f       	mov	r30, r23
    1d94:	78 2e       	mov	r7, r24
    1d96:	89 2e       	mov	r8, r25
    1d98:	21 2f       	mov	r18, r17
    1d9a:	3e 85       	ldd	r19, Y+14	; 0x0e
    1d9c:	4d 85       	ldd	r20, Y+13	; 0x0d
    1d9e:	5b 2f       	mov	r21, r27
    1da0:	6f 2f       	mov	r22, r31
    1da2:	7e 2f       	mov	r23, r30
    1da4:	87 2d       	mov	r24, r7
    1da6:	98 2d       	mov	r25, r8
    1da8:	07 e0       	ldi	r16, 0x07	; 7
    1daa:	0e 94 44 24 	call	0x4888	; 0x4888 <__ashrdi3>
    1dae:	82 2e       	mov	r8, r18
    1db0:	93 2e       	mov	r9, r19
    1db2:	74 2e       	mov	r7, r20
    1db4:	65 2e       	mov	r6, r21
    1db6:	b6 2f       	mov	r27, r22
    1db8:	a7 2f       	mov	r26, r23
    1dba:	58 2e       	mov	r5, r24
    1dbc:	49 2e       	mov	r4, r25
    1dbe:	f1 01       	movw	r30, r2
    1dc0:	24 81       	ldd	r18, Z+4	; 0x04
    1dc2:	35 81       	ldd	r19, Z+5	; 0x05
    1dc4:	59 01       	movw	r10, r18
    1dc6:	3b 2d       	mov	r19, r11
    1dc8:	40 e0       	ldi	r20, 0x00	; 0
    1dca:	50 e0       	ldi	r21, 0x00	; 0
    1dcc:	60 e0       	ldi	r22, 0x00	; 0
    1dce:	70 e0       	ldi	r23, 0x00	; 0
    1dd0:	80 e0       	ldi	r24, 0x00	; 0
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	00 e1       	ldi	r16, 0x10	; 16
    1dd6:	0e 94 2b 24 	call	0x4856	; 0x4856 <__ashldi3>
    1dda:	a2 2e       	mov	r10, r18
    1ddc:	b3 2e       	mov	r11, r19
    1dde:	c4 2e       	mov	r12, r20
    1de0:	d5 2e       	mov	r13, r21
    1de2:	e6 2e       	mov	r14, r22
    1de4:	f7 2e       	mov	r15, r23
    1de6:	08 2f       	mov	r16, r24
    1de8:	19 2f       	mov	r17, r25
    1dea:	28 2d       	mov	r18, r8
    1dec:	39 2d       	mov	r19, r9
    1dee:	47 2d       	mov	r20, r7
    1df0:	56 2d       	mov	r21, r6
    1df2:	6b 2f       	mov	r22, r27
    1df4:	7a 2f       	mov	r23, r26
    1df6:	85 2d       	mov	r24, r5
    1df8:	94 2d       	mov	r25, r4
    1dfa:	0e 94 62 24 	call	0x48c4	; 0x48c4 <__adddi3>
    1dfe:	2d 87       	std	Y+13, r18	; 0x0d
    1e00:	3e 87       	std	Y+14, r19	; 0x0e
    1e02:	4f 87       	std	Y+15, r20	; 0x0f
    1e04:	58 8b       	std	Y+16, r21	; 0x10
    1e06:	69 8b       	std	Y+17, r22	; 0x11
    1e08:	7a 8b       	std	Y+18, r23	; 0x12
    1e0a:	8b 8b       	std	Y+19, r24	; 0x13
    1e0c:	9c 8b       	std	Y+20, r25	; 0x14
    1e0e:	84 85       	ldd	r24, Z+12	; 0x0c
    1e10:	95 85       	ldd	r25, Z+13	; 0x0d
    1e12:	3c 01       	movw	r6, r24
    1e14:	81 2c       	mov	r8, r1
    1e16:	91 2c       	mov	r9, r1
    1e18:	a1 2c       	mov	r10, r1
    1e1a:	b1 2c       	mov	r11, r1
    1e1c:	65 01       	movw	r12, r10
    1e1e:	8d 8f       	std	Y+29, r24	; 0x1d
    1e20:	7e 8e       	std	Y+30, r7	; 0x1e
    1e22:	8f 8e       	std	Y+31, r8	; 0x1f
    1e24:	98 a2       	std	Y+32, r9	; 0x20
    1e26:	a9 a2       	std	Y+33, r10	; 0x21
    1e28:	ba a2       	std	Y+34, r11	; 0x22
    1e2a:	cb a2       	std	Y+35, r12	; 0x23
    1e2c:	dc a2       	std	Y+36, r13	; 0x24
    1e2e:	a9 80       	ldd	r10, Y+1	; 0x01
    1e30:	ba 80       	ldd	r11, Y+2	; 0x02
    1e32:	cb 80       	ldd	r12, Y+3	; 0x03
    1e34:	dc 80       	ldd	r13, Y+4	; 0x04
    1e36:	ed 80       	ldd	r14, Y+5	; 0x05
    1e38:	fe 2c       	mov	r15, r14
    1e3a:	0e 2d       	mov	r16, r14
    1e3c:	1e 2d       	mov	r17, r14
    1e3e:	28 2f       	mov	r18, r24
    1e40:	37 2d       	mov	r19, r7
    1e42:	40 e0       	ldi	r20, 0x00	; 0
    1e44:	50 e0       	ldi	r21, 0x00	; 0
    1e46:	60 e0       	ldi	r22, 0x00	; 0
    1e48:	70 e0       	ldi	r23, 0x00	; 0
    1e4a:	80 e0       	ldi	r24, 0x00	; 0
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	0e 94 da 23 	call	0x47b4	; 0x47b4 <__muldi3>
    1e52:	12 2f       	mov	r17, r18
    1e54:	3d a3       	std	Y+37, r19	; 0x25
    1e56:	4d 8f       	std	Y+29, r20	; 0x1d
    1e58:	b5 2f       	mov	r27, r21
    1e5a:	f6 2f       	mov	r31, r22
    1e5c:	e7 2f       	mov	r30, r23
    1e5e:	78 2e       	mov	r7, r24
    1e60:	89 2e       	mov	r8, r25
    1e62:	a0 e0       	ldi	r26, 0x00	; 0
    1e64:	0e 94 80 24 	call	0x4900	; 0x4900 <__cmpdi2_s8>
    1e68:	84 f4       	brge	.+32     	; 0x1e8a <_ZN6MS58379calculateEv+0x590>
    1e6a:	21 50       	subi	r18, 0x01	; 1
    1e6c:	31 09       	sbc	r19, r1
    1e6e:	40 48       	sbci	r20, 0x80	; 128
    1e70:	5f 4f       	sbci	r21, 0xFF	; 255
    1e72:	6f 4f       	sbci	r22, 0xFF	; 255
    1e74:	7f 4f       	sbci	r23, 0xFF	; 255
    1e76:	8f 4f       	sbci	r24, 0xFF	; 255
    1e78:	9f 4f       	sbci	r25, 0xFF	; 255
    1e7a:	12 2f       	mov	r17, r18
    1e7c:	3d a3       	std	Y+37, r19	; 0x25
    1e7e:	4d 8f       	std	Y+29, r20	; 0x1d
    1e80:	b5 2f       	mov	r27, r21
    1e82:	f6 2f       	mov	r31, r22
    1e84:	e7 2f       	mov	r30, r23
    1e86:	78 2e       	mov	r7, r24
    1e88:	89 2e       	mov	r8, r25
    1e8a:	21 2f       	mov	r18, r17
    1e8c:	3d a1       	ldd	r19, Y+37	; 0x25
    1e8e:	4d 8d       	ldd	r20, Y+29	; 0x1d
    1e90:	5b 2f       	mov	r21, r27
    1e92:	6f 2f       	mov	r22, r31
    1e94:	7e 2f       	mov	r23, r30
    1e96:	87 2d       	mov	r24, r7
    1e98:	98 2d       	mov	r25, r8
    1e9a:	07 e1       	ldi	r16, 0x17	; 23
    1e9c:	0e 94 44 24 	call	0x4888	; 0x4888 <__ashrdi3>
    1ea0:	82 2e       	mov	r8, r18
    1ea2:	93 2e       	mov	r9, r19
    1ea4:	a4 2e       	mov	r10, r20
    1ea6:	b5 2e       	mov	r11, r21
    1ea8:	24 01       	movw	r4, r8
    1eaa:	35 01       	movw	r6, r10
    1eac:	00 ed       	ldi	r16, 0xD0	; 208
    1eae:	40 0e       	add	r4, r16
    1eb0:	07 e0       	ldi	r16, 0x07	; 7
    1eb2:	50 1e       	adc	r5, r16
    1eb4:	61 1c       	adc	r6, r1
    1eb6:	71 1c       	adc	r7, r1
    1eb8:	10 ed       	ldi	r17, 0xD0	; 208
    1eba:	41 16       	cp	r4, r17
    1ebc:	17 e0       	ldi	r17, 0x07	; 7
    1ebe:	51 06       	cpc	r5, r17
    1ec0:	61 04       	cpc	r6, r1
    1ec2:	71 04       	cpc	r7, r1
    1ec4:	0c f4       	brge	.+2      	; 0x1ec8 <_ZN6MS58379calculateEv+0x5ce>
    1ec6:	af c0       	rjmp	.+350    	; 0x2026 <_ZN6MS58379calculateEv+0x72c>
    1ec8:	8a c1       	rjmp	.+788    	; 0x21de <_ZN6MS58379calculateEv+0x8e4>
    1eca:	29 81       	ldd	r18, Y+1	; 0x01
    1ecc:	3a 81       	ldd	r19, Y+2	; 0x02
    1ece:	4b 81       	ldd	r20, Y+3	; 0x03
    1ed0:	5c 81       	ldd	r21, Y+4	; 0x04
    1ed2:	6d 81       	ldd	r22, Y+5	; 0x05
    1ed4:	76 2f       	mov	r23, r22
    1ed6:	86 2f       	mov	r24, r22
    1ed8:	96 2f       	mov	r25, r22
    1eda:	02 e0       	ldi	r16, 0x02	; 2
    1edc:	0e 94 2b 24 	call	0x4856	; 0x4856 <__ashldi3>
    1ee0:	a2 2e       	mov	r10, r18
    1ee2:	b3 2e       	mov	r11, r19
    1ee4:	c4 2e       	mov	r12, r20
    1ee6:	d5 2e       	mov	r13, r21
    1ee8:	e6 2e       	mov	r14, r22
    1eea:	f7 2e       	mov	r15, r23
    1eec:	e8 2f       	mov	r30, r24
    1eee:	19 2f       	mov	r17, r25
    1ef0:	0e 94 2b 24 	call	0x4856	; 0x4856 <__ashldi3>
    1ef4:	0e 2f       	mov	r16, r30
    1ef6:	0e 94 77 24 	call	0x48ee	; 0x48ee <__subdi3>
    1efa:	a9 80       	ldd	r10, Y+1	; 0x01
    1efc:	ba 80       	ldd	r11, Y+2	; 0x02
    1efe:	cb 80       	ldd	r12, Y+3	; 0x03
    1f00:	dc 80       	ldd	r13, Y+4	; 0x04
    1f02:	ed 80       	ldd	r14, Y+5	; 0x05
    1f04:	fe 2c       	mov	r15, r14
    1f06:	0e 2d       	mov	r16, r14
    1f08:	1e 2d       	mov	r17, r14
    1f0a:	0e 94 77 24 	call	0x48ee	; 0x48ee <__subdi3>
    1f0e:	e0 2e       	mov	r14, r16
    1f10:	0f 2d       	mov	r16, r15
    1f12:	0e 94 da 23 	call	0x47b4	; 0x47b4 <__muldi3>
    1f16:	12 2f       	mov	r17, r18
    1f18:	3d 8f       	std	Y+29, r19	; 0x1d
    1f1a:	4d 83       	std	Y+5, r20	; 0x05
    1f1c:	b5 2f       	mov	r27, r21
    1f1e:	f6 2f       	mov	r31, r22
    1f20:	e7 2f       	mov	r30, r23
    1f22:	89 83       	std	Y+1, r24	; 0x01
    1f24:	89 2e       	mov	r8, r25
    1f26:	a0 e0       	ldi	r26, 0x00	; 0
    1f28:	0e 94 80 24 	call	0x4900	; 0x4900 <__cmpdi2_s8>
    1f2c:	84 f4       	brge	.+32     	; 0x1f4e <_ZN6MS58379calculateEv+0x654>
    1f2e:	21 50       	subi	r18, 0x01	; 1
    1f30:	31 09       	sbc	r19, r1
    1f32:	41 09       	sbc	r20, r1
    1f34:	51 09       	sbc	r21, r1
    1f36:	68 4f       	sbci	r22, 0xF8	; 248
    1f38:	7f 4f       	sbci	r23, 0xFF	; 255
    1f3a:	8f 4f       	sbci	r24, 0xFF	; 255
    1f3c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f3e:	12 2f       	mov	r17, r18
    1f40:	3d 8f       	std	Y+29, r19	; 0x1d
    1f42:	4d 83       	std	Y+5, r20	; 0x05
    1f44:	b5 2f       	mov	r27, r21
    1f46:	f6 2f       	mov	r31, r22
    1f48:	e7 2f       	mov	r30, r23
    1f4a:	89 83       	std	Y+1, r24	; 0x01
    1f4c:	89 2e       	mov	r8, r25
    1f4e:	21 2f       	mov	r18, r17
    1f50:	3d 8d       	ldd	r19, Y+29	; 0x1d
    1f52:	4d 81       	ldd	r20, Y+5	; 0x05
    1f54:	5b 2f       	mov	r21, r27
    1f56:	6f 2f       	mov	r22, r31
    1f58:	7e 2f       	mov	r23, r30
    1f5a:	89 81       	ldd	r24, Y+1	; 0x01
    1f5c:	98 2d       	mov	r25, r8
    1f5e:	03 e2       	ldi	r16, 0x23	; 35
    1f60:	0e 94 44 24 	call	0x4888	; 0x4888 <__ashrdi3>
    1f64:	82 2e       	mov	r8, r18
    1f66:	93 2e       	mov	r9, r19
    1f68:	a4 2e       	mov	r10, r20
    1f6a:	b5 2e       	mov	r11, r21
    1f6c:	73 01       	movw	r14, r6
    1f6e:	62 01       	movw	r12, r4
    1f70:	20 ed       	ldi	r18, 0xD0	; 208
    1f72:	c2 1a       	sub	r12, r18
    1f74:	27 e0       	ldi	r18, 0x07	; 7
    1f76:	d2 0a       	sbc	r13, r18
    1f78:	e1 08       	sbc	r14, r1
    1f7a:	f1 08       	sbc	r15, r1
    1f7c:	d7 01       	movw	r26, r14
    1f7e:	c6 01       	movw	r24, r12
    1f80:	88 0f       	add	r24, r24
    1f82:	99 1f       	adc	r25, r25
    1f84:	aa 1f       	adc	r26, r26
    1f86:	bb 1f       	adc	r27, r27
    1f88:	88 0f       	add	r24, r24
    1f8a:	99 1f       	adc	r25, r25
    1f8c:	aa 1f       	adc	r26, r26
    1f8e:	bb 1f       	adc	r27, r27
    1f90:	88 0f       	add	r24, r24
    1f92:	99 1f       	adc	r25, r25
    1f94:	aa 1f       	adc	r26, r26
    1f96:	bb 1f       	adc	r27, r27
    1f98:	88 0f       	add	r24, r24
    1f9a:	99 1f       	adc	r25, r25
    1f9c:	aa 1f       	adc	r26, r26
    1f9e:	bb 1f       	adc	r27, r27
    1fa0:	88 0f       	add	r24, r24
    1fa2:	99 1f       	adc	r25, r25
    1fa4:	aa 1f       	adc	r26, r26
    1fa6:	bb 1f       	adc	r27, r27
    1fa8:	9c 01       	movw	r18, r24
    1faa:	ad 01       	movw	r20, r26
    1fac:	2c 19       	sub	r18, r12
    1fae:	3d 09       	sbc	r19, r13
    1fb0:	4e 09       	sbc	r20, r14
    1fb2:	5f 09       	sbc	r21, r15
    1fb4:	c7 01       	movw	r24, r14
    1fb6:	b6 01       	movw	r22, r12
    1fb8:	0e 94 88 23 	call	0x4710	; 0x4710 <__mulsi3>
    1fbc:	8b 01       	movw	r16, r22
    1fbe:	9c 01       	movw	r18, r24
    1fc0:	99 23       	and	r25, r25
    1fc2:	24 f4       	brge	.+8      	; 0x1fcc <_ZN6MS58379calculateEv+0x6d2>
    1fc4:	09 5f       	subi	r16, 0xF9	; 249
    1fc6:	1f 4f       	sbci	r17, 0xFF	; 255
    1fc8:	2f 4f       	sbci	r18, 0xFF	; 255
    1fca:	3f 4f       	sbci	r19, 0xFF	; 255
    1fcc:	b9 01       	movw	r22, r18
    1fce:	a8 01       	movw	r20, r16
    1fd0:	68 94       	set
    1fd2:	12 f8       	bld	r1, 2
    1fd4:	75 95       	asr	r23
    1fd6:	67 95       	ror	r22
    1fd8:	57 95       	ror	r21
    1fda:	47 95       	ror	r20
    1fdc:	16 94       	lsr	r1
    1fde:	d1 f7       	brne	.-12     	; 0x1fd4 <_ZN6MS58379calculateEv+0x6da>
    1fe0:	49 83       	std	Y+1, r20	; 0x01
    1fe2:	5a 83       	std	Y+2, r21	; 0x02
    1fe4:	6b 83       	std	Y+3, r22	; 0x03
    1fe6:	7c 83       	std	Y+4, r23	; 0x04
    1fe8:	af e3       	ldi	r26, 0x3F	; 63
    1fea:	b0 e0       	ldi	r27, 0x00	; 0
    1fec:	a7 01       	movw	r20, r14
    1fee:	96 01       	movw	r18, r12
    1ff0:	0e 94 d0 23 	call	0x47a0	; 0x47a0 <__muluhisi3>
    1ff4:	9b 01       	movw	r18, r22
    1ff6:	ac 01       	movw	r20, r24
    1ff8:	c7 01       	movw	r24, r14
    1ffa:	b6 01       	movw	r22, r12
    1ffc:	0e 94 88 23 	call	0x4710	; 0x4710 <__mulsi3>
    2000:	8b 01       	movw	r16, r22
    2002:	9c 01       	movw	r18, r24
    2004:	99 23       	and	r25, r25
    2006:	24 f4       	brge	.+8      	; 0x2010 <_ZN6MS58379calculateEv+0x716>
    2008:	01 5e       	subi	r16, 0xE1	; 225
    200a:	1f 4f       	sbci	r17, 0xFF	; 255
    200c:	2f 4f       	sbci	r18, 0xFF	; 255
    200e:	3f 4f       	sbci	r19, 0xFF	; 255
    2010:	78 01       	movw	r14, r16
    2012:	89 01       	movw	r16, r18
    2014:	68 94       	set
    2016:	14 f8       	bld	r1, 4
    2018:	15 95       	asr	r17
    201a:	07 95       	ror	r16
    201c:	f7 94       	ror	r15
    201e:	e7 94       	ror	r14
    2020:	16 94       	lsr	r1
    2022:	d1 f7       	brne	.-12     	; 0x2018 <_ZN6MS58379calculateEv+0x71e>
    2024:	47 c1       	rjmp	.+654    	; 0x22b4 <__stack+0xb5>
    2026:	29 81       	ldd	r18, Y+1	; 0x01
    2028:	3a 81       	ldd	r19, Y+2	; 0x02
    202a:	4b 81       	ldd	r20, Y+3	; 0x03
    202c:	5c 81       	ldd	r21, Y+4	; 0x04
    202e:	6d 81       	ldd	r22, Y+5	; 0x05
    2030:	76 2f       	mov	r23, r22
    2032:	86 2f       	mov	r24, r22
    2034:	96 2f       	mov	r25, r22
    2036:	01 e0       	ldi	r16, 0x01	; 1
    2038:	0e 94 2b 24 	call	0x4856	; 0x4856 <__ashldi3>
    203c:	a9 80       	ldd	r10, Y+1	; 0x01
    203e:	ba 80       	ldd	r11, Y+2	; 0x02
    2040:	cb 80       	ldd	r12, Y+3	; 0x03
    2042:	dc 80       	ldd	r13, Y+4	; 0x04
    2044:	ed 80       	ldd	r14, Y+5	; 0x05
    2046:	fe 2c       	mov	r15, r14
    2048:	0e 2d       	mov	r16, r14
    204a:	1e 2d       	mov	r17, r14
    204c:	0e 94 62 24 	call	0x48c4	; 0x48c4 <__adddi3>
    2050:	e0 2e       	mov	r14, r16
    2052:	0f 2d       	mov	r16, r15
    2054:	0e 94 da 23 	call	0x47b4	; 0x47b4 <__muldi3>
    2058:	12 2f       	mov	r17, r18
    205a:	3d 8f       	std	Y+29, r19	; 0x1d
    205c:	4d 83       	std	Y+5, r20	; 0x05
    205e:	b5 2f       	mov	r27, r21
    2060:	f6 2f       	mov	r31, r22
    2062:	e7 2f       	mov	r30, r23
    2064:	89 83       	std	Y+1, r24	; 0x01
    2066:	89 2e       	mov	r8, r25
    2068:	a0 e0       	ldi	r26, 0x00	; 0
    206a:	0e 94 80 24 	call	0x4900	; 0x4900 <__cmpdi2_s8>
    206e:	84 f4       	brge	.+32     	; 0x2090 <_ZN6MS58379calculateEv+0x796>
    2070:	21 50       	subi	r18, 0x01	; 1
    2072:	31 09       	sbc	r19, r1
    2074:	41 09       	sbc	r20, r1
    2076:	51 09       	sbc	r21, r1
    2078:	6e 4f       	sbci	r22, 0xFE	; 254
    207a:	7f 4f       	sbci	r23, 0xFF	; 255
    207c:	8f 4f       	sbci	r24, 0xFF	; 255
    207e:	9f 4f       	sbci	r25, 0xFF	; 255
    2080:	12 2f       	mov	r17, r18
    2082:	3d 8f       	std	Y+29, r19	; 0x1d
    2084:	4d 83       	std	Y+5, r20	; 0x05
    2086:	b5 2f       	mov	r27, r21
    2088:	f6 2f       	mov	r31, r22
    208a:	e7 2f       	mov	r30, r23
    208c:	89 83       	std	Y+1, r24	; 0x01
    208e:	89 2e       	mov	r8, r25
    2090:	21 2f       	mov	r18, r17
    2092:	3d 8d       	ldd	r19, Y+29	; 0x1d
    2094:	4d 81       	ldd	r20, Y+5	; 0x05
    2096:	5b 2f       	mov	r21, r27
    2098:	6f 2f       	mov	r22, r31
    209a:	7e 2f       	mov	r23, r30
    209c:	89 81       	ldd	r24, Y+1	; 0x01
    209e:	98 2d       	mov	r25, r8
    20a0:	01 e2       	ldi	r16, 0x21	; 33
    20a2:	0e 94 44 24 	call	0x4888	; 0x4888 <__ashrdi3>
    20a6:	2d 83       	std	Y+5, r18	; 0x05
    20a8:	3e 83       	std	Y+6, r19	; 0x06
    20aa:	4f 83       	std	Y+7, r20	; 0x07
    20ac:	58 87       	std	Y+8, r21	; 0x08
    20ae:	53 01       	movw	r10, r6
    20b0:	42 01       	movw	r8, r4
    20b2:	50 ed       	ldi	r21, 0xD0	; 208
    20b4:	85 1a       	sub	r8, r21
    20b6:	57 e0       	ldi	r21, 0x07	; 7
    20b8:	95 0a       	sbc	r9, r21
    20ba:	a1 08       	sbc	r10, r1
    20bc:	b1 08       	sbc	r11, r1
    20be:	d5 01       	movw	r26, r10
    20c0:	c4 01       	movw	r24, r8
    20c2:	88 0f       	add	r24, r24
    20c4:	99 1f       	adc	r25, r25
    20c6:	aa 1f       	adc	r26, r26
    20c8:	bb 1f       	adc	r27, r27
    20ca:	9c 01       	movw	r18, r24
    20cc:	ad 01       	movw	r20, r26
    20ce:	28 0d       	add	r18, r8
    20d0:	39 1d       	adc	r19, r9
    20d2:	4a 1d       	adc	r20, r10
    20d4:	5b 1d       	adc	r21, r11
    20d6:	c5 01       	movw	r24, r10
    20d8:	b4 01       	movw	r22, r8
    20da:	0e 94 88 23 	call	0x4710	; 0x4710 <__mulsi3>
    20de:	8b 01       	movw	r16, r22
    20e0:	9c 01       	movw	r18, r24
    20e2:	99 23       	and	r25, r25
    20e4:	24 f4       	brge	.+8      	; 0x20ee <_ZN6MS58379calculateEv+0x7f4>
    20e6:	0f 5f       	subi	r16, 0xFF	; 255
    20e8:	1f 4f       	sbci	r17, 0xFF	; 255
    20ea:	2f 4f       	sbci	r18, 0xFF	; 255
    20ec:	3f 4f       	sbci	r19, 0xFF	; 255
    20ee:	c9 01       	movw	r24, r18
    20f0:	b8 01       	movw	r22, r16
    20f2:	95 95       	asr	r25
    20f4:	87 95       	ror	r24
    20f6:	77 95       	ror	r23
    20f8:	67 95       	ror	r22
    20fa:	69 83       	std	Y+1, r22	; 0x01
    20fc:	7a 83       	std	Y+2, r23	; 0x02
    20fe:	8b 83       	std	Y+3, r24	; 0x03
    2100:	9c 83       	std	Y+4, r25	; 0x04
    2102:	d5 01       	movw	r26, r10
    2104:	c4 01       	movw	r24, r8
    2106:	88 0f       	add	r24, r24
    2108:	99 1f       	adc	r25, r25
    210a:	aa 1f       	adc	r26, r26
    210c:	bb 1f       	adc	r27, r27
    210e:	88 0f       	add	r24, r24
    2110:	99 1f       	adc	r25, r25
    2112:	aa 1f       	adc	r26, r26
    2114:	bb 1f       	adc	r27, r27
    2116:	9c 01       	movw	r18, r24
    2118:	ad 01       	movw	r20, r26
    211a:	28 0d       	add	r18, r8
    211c:	39 1d       	adc	r19, r9
    211e:	4a 1d       	adc	r20, r10
    2120:	5b 1d       	adc	r21, r11
    2122:	c5 01       	movw	r24, r10
    2124:	b4 01       	movw	r22, r8
    2126:	0e 94 88 23 	call	0x4710	; 0x4710 <__mulsi3>
    212a:	8b 01       	movw	r16, r22
    212c:	9c 01       	movw	r18, r24
    212e:	99 23       	and	r25, r25
    2130:	24 f4       	brge	.+8      	; 0x213a <_ZN6MS58379calculateEv+0x840>
    2132:	09 5f       	subi	r16, 0xF9	; 249
    2134:	1f 4f       	sbci	r17, 0xFF	; 255
    2136:	2f 4f       	sbci	r18, 0xFF	; 255
    2138:	3f 4f       	sbci	r19, 0xFF	; 255
    213a:	78 01       	movw	r14, r16
    213c:	89 01       	movw	r16, r18
    213e:	68 94       	set
    2140:	12 f8       	bld	r1, 2
    2142:	15 95       	asr	r17
    2144:	07 95       	ror	r16
    2146:	f7 94       	ror	r15
    2148:	e7 94       	ror	r14
    214a:	16 94       	lsr	r1
    214c:	d1 f7       	brne	.-12     	; 0x2142 <_ZN6MS58379calculateEv+0x848>
    214e:	71 ec       	ldi	r23, 0xC1	; 193
    2150:	47 16       	cp	r4, r23
    2152:	79 ef       	ldi	r23, 0xF9	; 249
    2154:	57 06       	cpc	r5, r23
    2156:	7f ef       	ldi	r23, 0xFF	; 255
    2158:	67 06       	cpc	r6, r23
    215a:	77 06       	cpc	r7, r23
    215c:	0c f0       	brlt	.+2      	; 0x2160 <_ZN6MS58379calculateEv+0x866>
    215e:	7f c1       	rjmp	.+766    	; 0x245e <__stack+0x25f>
    2160:	53 01       	movw	r10, r6
    2162:	42 01       	movw	r8, r4
    2164:	8c ed       	ldi	r24, 0xDC	; 220
    2166:	88 0e       	add	r8, r24
    2168:	85 e0       	ldi	r24, 0x05	; 5
    216a:	98 1e       	adc	r9, r24
    216c:	a1 1c       	adc	r10, r1
    216e:	b1 1c       	adc	r11, r1
    2170:	d5 01       	movw	r26, r10
    2172:	c4 01       	movw	r24, r8
    2174:	88 0f       	add	r24, r24
    2176:	99 1f       	adc	r25, r25
    2178:	aa 1f       	adc	r26, r26
    217a:	bb 1f       	adc	r27, r27
    217c:	88 0f       	add	r24, r24
    217e:	99 1f       	adc	r25, r25
    2180:	aa 1f       	adc	r26, r26
    2182:	bb 1f       	adc	r27, r27
    2184:	88 0f       	add	r24, r24
    2186:	99 1f       	adc	r25, r25
    2188:	aa 1f       	adc	r26, r26
    218a:	bb 1f       	adc	r27, r27
    218c:	9c 01       	movw	r18, r24
    218e:	ad 01       	movw	r20, r26
    2190:	28 19       	sub	r18, r8
    2192:	39 09       	sbc	r19, r9
    2194:	4a 09       	sbc	r20, r10
    2196:	5b 09       	sbc	r21, r11
    2198:	c5 01       	movw	r24, r10
    219a:	b4 01       	movw	r22, r8
    219c:	0e 94 88 23 	call	0x4710	; 0x4710 <__mulsi3>
    21a0:	29 81       	ldd	r18, Y+1	; 0x01
    21a2:	3a 81       	ldd	r19, Y+2	; 0x02
    21a4:	4b 81       	ldd	r20, Y+3	; 0x03
    21a6:	5c 81       	ldd	r21, Y+4	; 0x04
    21a8:	26 0f       	add	r18, r22
    21aa:	37 1f       	adc	r19, r23
    21ac:	48 1f       	adc	r20, r24
    21ae:	59 1f       	adc	r21, r25
    21b0:	29 83       	std	Y+1, r18	; 0x01
    21b2:	3a 83       	std	Y+2, r19	; 0x02
    21b4:	4b 83       	std	Y+3, r20	; 0x03
    21b6:	5c 83       	std	Y+4, r21	; 0x04
    21b8:	a5 01       	movw	r20, r10
    21ba:	94 01       	movw	r18, r8
    21bc:	22 0f       	add	r18, r18
    21be:	33 1f       	adc	r19, r19
    21c0:	44 1f       	adc	r20, r20
    21c2:	55 1f       	adc	r21, r21
    21c4:	22 0f       	add	r18, r18
    21c6:	33 1f       	adc	r19, r19
    21c8:	44 1f       	adc	r20, r20
    21ca:	55 1f       	adc	r21, r21
    21cc:	c5 01       	movw	r24, r10
    21ce:	b4 01       	movw	r22, r8
    21d0:	0e 94 88 23 	call	0x4710	; 0x4710 <__mulsi3>
    21d4:	e6 0e       	add	r14, r22
    21d6:	f7 1e       	adc	r15, r23
    21d8:	08 1f       	adc	r16, r24
    21da:	19 1f       	adc	r17, r25
    21dc:	40 c1       	rjmp	.+640    	; 0x245e <__stack+0x25f>
    21de:	29 81       	ldd	r18, Y+1	; 0x01
    21e0:	3a 81       	ldd	r19, Y+2	; 0x02
    21e2:	4b 81       	ldd	r20, Y+3	; 0x03
    21e4:	5c 81       	ldd	r21, Y+4	; 0x04
    21e6:	ca 01       	movw	r24, r20
    21e8:	b9 01       	movw	r22, r18
    21ea:	0e 94 88 23 	call	0x4710	; 0x4710 <__mulsi3>
    21ee:	4b 01       	movw	r8, r22
    21f0:	5c 01       	movw	r10, r24
    21f2:	88 0c       	add	r8, r8
    21f4:	99 1c       	adc	r9, r9
    21f6:	aa 1c       	adc	r10, r10
    21f8:	bb 1c       	adc	r11, r11
    21fa:	75 01       	movw	r14, r10
    21fc:	64 01       	movw	r12, r8
    21fe:	ff 0c       	add	r15, r15
    2200:	cc 08       	sbc	r12, r12
    2202:	dc 2c       	mov	r13, r12
    2204:	76 01       	movw	r14, r12
    2206:	18 2d       	mov	r17, r8
    2208:	9d 8e       	std	Y+29, r9	; 0x1d
    220a:	ad 82       	std	Y+5, r10	; 0x05
    220c:	bb 2d       	mov	r27, r11
    220e:	fc 2d       	mov	r31, r12
    2210:	ec 2d       	mov	r30, r12
    2212:	c9 82       	std	Y+1, r12	; 0x01
    2214:	0c 2d       	mov	r16, r12
    2216:	28 2d       	mov	r18, r8
    2218:	39 2d       	mov	r19, r9
    221a:	4a 2d       	mov	r20, r10
    221c:	5b 2d       	mov	r21, r11
    221e:	6c 2d       	mov	r22, r12
    2220:	7c 2d       	mov	r23, r12
    2222:	8c 2d       	mov	r24, r12
    2224:	9c 2d       	mov	r25, r12
    2226:	a0 e0       	ldi	r26, 0x00	; 0
    2228:	0e 94 80 24 	call	0x4900	; 0x4900 <__cmpdi2_s8>
    222c:	84 f4       	brge	.+32     	; 0x224e <__stack+0x4f>
    222e:	21 50       	subi	r18, 0x01	; 1
    2230:	31 09       	sbc	r19, r1
    2232:	41 09       	sbc	r20, r1
    2234:	51 09       	sbc	r21, r1
    2236:	60 4e       	sbci	r22, 0xE0	; 224
    2238:	7f 4f       	sbci	r23, 0xFF	; 255
    223a:	8f 4f       	sbci	r24, 0xFF	; 255
    223c:	9f 4f       	sbci	r25, 0xFF	; 255
    223e:	12 2f       	mov	r17, r18
    2240:	3d 8f       	std	Y+29, r19	; 0x1d
    2242:	4d 83       	std	Y+5, r20	; 0x05
    2244:	b5 2f       	mov	r27, r21
    2246:	f6 2f       	mov	r31, r22
    2248:	e7 2f       	mov	r30, r23
    224a:	89 83       	std	Y+1, r24	; 0x01
    224c:	09 2f       	mov	r16, r25
    224e:	21 2f       	mov	r18, r17
    2250:	3d 8d       	ldd	r19, Y+29	; 0x1d
    2252:	4d 81       	ldd	r20, Y+5	; 0x05
    2254:	5b 2f       	mov	r21, r27
    2256:	6f 2f       	mov	r22, r31
    2258:	7e 2f       	mov	r23, r30
    225a:	89 81       	ldd	r24, Y+1	; 0x01
    225c:	90 2f       	mov	r25, r16
    225e:	05 e2       	ldi	r16, 0x25	; 37
    2260:	0e 94 44 24 	call	0x4888	; 0x4888 <__ashrdi3>
    2264:	2d 83       	std	Y+5, r18	; 0x05
    2266:	3e 83       	std	Y+6, r19	; 0x06
    2268:	4f 83       	std	Y+7, r20	; 0x07
    226a:	58 87       	std	Y+8, r21	; 0x08
    226c:	c3 01       	movw	r24, r6
    226e:	b2 01       	movw	r22, r4
    2270:	60 5d       	subi	r22, 0xD0	; 208
    2272:	77 40       	sbci	r23, 0x07	; 7
    2274:	81 09       	sbc	r24, r1
    2276:	91 09       	sbc	r25, r1
    2278:	9b 01       	movw	r18, r22
    227a:	ac 01       	movw	r20, r24
    227c:	0e 94 88 23 	call	0x4710	; 0x4710 <__mulsi3>
    2280:	8b 01       	movw	r16, r22
    2282:	9c 01       	movw	r18, r24
    2284:	99 23       	and	r25, r25
    2286:	24 f4       	brge	.+8      	; 0x2290 <__stack+0x91>
    2288:	01 5f       	subi	r16, 0xF1	; 241
    228a:	1f 4f       	sbci	r17, 0xFF	; 255
    228c:	2f 4f       	sbci	r18, 0xFF	; 255
    228e:	3f 4f       	sbci	r19, 0xFF	; 255
    2290:	48 01       	movw	r8, r16
    2292:	59 01       	movw	r10, r18
    2294:	68 94       	set
    2296:	13 f8       	bld	r1, 3
    2298:	b5 94       	asr	r11
    229a:	a7 94       	ror	r10
    229c:	97 94       	ror	r9
    229e:	87 94       	ror	r8
    22a0:	16 94       	lsr	r1
    22a2:	d1 f7       	brne	.-12     	; 0x2298 <__stack+0x99>
    22a4:	89 82       	std	Y+1, r8	; 0x01
    22a6:	9a 82       	std	Y+2, r9	; 0x02
    22a8:	ab 82       	std	Y+3, r10	; 0x03
    22aa:	bc 82       	std	Y+4, r11	; 0x04
    22ac:	e1 2c       	mov	r14, r1
    22ae:	f1 2c       	mov	r15, r1
    22b0:	87 01       	movw	r16, r14
    22b2:	d5 c0       	rjmp	.+426    	; 0x245e <__stack+0x25f>
    22b4:	d3 01       	movw	r26, r6
    22b6:	c2 01       	movw	r24, r4
    22b8:	88 19       	sub	r24, r8
    22ba:	99 09       	sbc	r25, r9
    22bc:	aa 09       	sbc	r26, r10
    22be:	bb 09       	sbc	r27, r11
    22c0:	f1 01       	movw	r30, r2
    22c2:	80 8f       	std	Z+24, r24	; 0x18
    22c4:	91 8f       	std	Z+25, r25	; 0x19
    22c6:	a2 8f       	std	Z+26, r26	; 0x1a
    22c8:	b3 8f       	std	Z+27, r27	; 0x1b
    22ca:	80 89       	ldd	r24, Z+16	; 0x10
    22cc:	91 89       	ldd	r25, Z+17	; 0x11
    22ce:	a2 89       	ldd	r26, Z+18	; 0x12
    22d0:	b3 89       	ldd	r27, Z+19	; 0x13
    22d2:	3c 01       	movw	r6, r24
    22d4:	4d 01       	movw	r8, r26
    22d6:	a1 2c       	mov	r10, r1
    22d8:	b1 2c       	mov	r11, r1
    22da:	65 01       	movw	r12, r10
    22dc:	8d 83       	std	Y+5, r24	; 0x05
    22de:	7e 82       	std	Y+6, r7	; 0x06
    22e0:	8f 82       	std	Y+7, r8	; 0x07
    22e2:	98 86       	std	Y+8, r9	; 0x08
    22e4:	a9 86       	std	Y+9, r10	; 0x09
    22e6:	ba 86       	std	Y+10, r11	; 0x0a
    22e8:	cb 86       	std	Y+11, r12	; 0x0b
    22ea:	dc 86       	std	Y+12, r13	; 0x0c
    22ec:	27 01       	movw	r4, r14
    22ee:	38 01       	movw	r6, r16
    22f0:	77 0c       	add	r7, r7
    22f2:	44 08       	sbc	r4, r4
    22f4:	54 2c       	mov	r5, r4
    22f6:	32 01       	movw	r6, r4
    22f8:	2d 85       	ldd	r18, Y+13	; 0x0d
    22fa:	3e 85       	ldd	r19, Y+14	; 0x0e
    22fc:	4f 85       	ldd	r20, Y+15	; 0x0f
    22fe:	58 89       	ldd	r21, Y+16	; 0x10
    2300:	69 89       	ldd	r22, Y+17	; 0x11
    2302:	7a 89       	ldd	r23, Y+18	; 0x12
    2304:	8b 89       	ldd	r24, Y+19	; 0x13
    2306:	9c 89       	ldd	r25, Y+20	; 0x14
    2308:	ae 2c       	mov	r10, r14
    230a:	bf 2c       	mov	r11, r15
    230c:	c0 2e       	mov	r12, r16
    230e:	d1 2e       	mov	r13, r17
    2310:	e4 2c       	mov	r14, r4
    2312:	f4 2c       	mov	r15, r4
    2314:	04 2d       	mov	r16, r4
    2316:	14 2d       	mov	r17, r4
    2318:	0e 94 77 24 	call	0x48ee	; 0x48ee <__subdi3>
    231c:	a2 2e       	mov	r10, r18
    231e:	b3 2e       	mov	r11, r19
    2320:	c4 2e       	mov	r12, r20
    2322:	d5 2e       	mov	r13, r21
    2324:	e6 2e       	mov	r14, r22
    2326:	f7 2e       	mov	r15, r23
    2328:	08 2f       	mov	r16, r24
    232a:	19 2f       	mov	r17, r25
    232c:	2d 81       	ldd	r18, Y+5	; 0x05
    232e:	3e 81       	ldd	r19, Y+6	; 0x06
    2330:	48 2d       	mov	r20, r8
    2332:	59 2d       	mov	r21, r9
    2334:	60 e0       	ldi	r22, 0x00	; 0
    2336:	70 e0       	ldi	r23, 0x00	; 0
    2338:	80 e0       	ldi	r24, 0x00	; 0
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	0e 94 da 23 	call	0x47b4	; 0x47b4 <__muldi3>
    2340:	12 2f       	mov	r17, r18
    2342:	3d 87       	std	Y+13, r19	; 0x0d
    2344:	4d 83       	std	Y+5, r20	; 0x05
    2346:	b5 2f       	mov	r27, r21
    2348:	f6 2f       	mov	r31, r22
    234a:	e7 2f       	mov	r30, r23
    234c:	78 2e       	mov	r7, r24
    234e:	89 2e       	mov	r8, r25
    2350:	a0 e0       	ldi	r26, 0x00	; 0
    2352:	0e 94 80 24 	call	0x4900	; 0x4900 <__cmpdi2_s8>
    2356:	84 f4       	brge	.+32     	; 0x2378 <__stack+0x179>
    2358:	21 50       	subi	r18, 0x01	; 1
    235a:	31 09       	sbc	r19, r1
    235c:	40 4e       	sbci	r20, 0xE0	; 224
    235e:	5f 4f       	sbci	r21, 0xFF	; 255
    2360:	6f 4f       	sbci	r22, 0xFF	; 255
    2362:	7f 4f       	sbci	r23, 0xFF	; 255
    2364:	8f 4f       	sbci	r24, 0xFF	; 255
    2366:	9f 4f       	sbci	r25, 0xFF	; 255
    2368:	12 2f       	mov	r17, r18
    236a:	3d 87       	std	Y+13, r19	; 0x0d
    236c:	4d 83       	std	Y+5, r20	; 0x05
    236e:	b5 2f       	mov	r27, r21
    2370:	f6 2f       	mov	r31, r22
    2372:	e7 2f       	mov	r30, r23
    2374:	78 2e       	mov	r7, r24
    2376:	89 2e       	mov	r8, r25
    2378:	21 2f       	mov	r18, r17
    237a:	3d 85       	ldd	r19, Y+13	; 0x0d
    237c:	4d 81       	ldd	r20, Y+5	; 0x05
    237e:	5b 2f       	mov	r21, r27
    2380:	6f 2f       	mov	r22, r31
    2382:	7e 2f       	mov	r23, r30
    2384:	87 2d       	mov	r24, r7
    2386:	98 2d       	mov	r25, r8
    2388:	05 e1       	ldi	r16, 0x15	; 21
    238a:	0e 94 44 24 	call	0x4888	; 0x4888 <__ashrdi3>
    238e:	82 2e       	mov	r8, r18
    2390:	93 2e       	mov	r9, r19
    2392:	4d 87       	std	Y+13, r20	; 0x0d
    2394:	5d 83       	std	Y+5, r21	; 0x05
    2396:	b6 2f       	mov	r27, r22
    2398:	a7 2f       	mov	r26, r23
    239a:	f8 2f       	mov	r31, r24
    239c:	e9 2f       	mov	r30, r25
    239e:	49 80       	ldd	r4, Y+1	; 0x01
    23a0:	5a 80       	ldd	r5, Y+2	; 0x02
    23a2:	6b 80       	ldd	r6, Y+3	; 0x03
    23a4:	7c 80       	ldd	r7, Y+4	; 0x04
    23a6:	77 0c       	add	r7, r7
    23a8:	44 08       	sbc	r4, r4
    23aa:	54 2c       	mov	r5, r4
    23ac:	32 01       	movw	r6, r4
    23ae:	2d 89       	ldd	r18, Y+21	; 0x15
    23b0:	3e 89       	ldd	r19, Y+22	; 0x16
    23b2:	4f 89       	ldd	r20, Y+23	; 0x17
    23b4:	58 8d       	ldd	r21, Y+24	; 0x18
    23b6:	69 8d       	ldd	r22, Y+25	; 0x19
    23b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23be:	a9 80       	ldd	r10, Y+1	; 0x01
    23c0:	ba 80       	ldd	r11, Y+2	; 0x02
    23c2:	cb 80       	ldd	r12, Y+3	; 0x03
    23c4:	dc 80       	ldd	r13, Y+4	; 0x04
    23c6:	e4 2c       	mov	r14, r4
    23c8:	f4 2c       	mov	r15, r4
    23ca:	04 2d       	mov	r16, r4
    23cc:	14 2d       	mov	r17, r4
    23ce:	0e 94 77 24 	call	0x48ee	; 0x48ee <__subdi3>
    23d2:	a2 2e       	mov	r10, r18
    23d4:	b3 2e       	mov	r11, r19
    23d6:	c4 2e       	mov	r12, r20
    23d8:	d5 2e       	mov	r13, r21
    23da:	e6 2e       	mov	r14, r22
    23dc:	f7 2e       	mov	r15, r23
    23de:	08 2f       	mov	r16, r24
    23e0:	19 2f       	mov	r17, r25
    23e2:	28 2d       	mov	r18, r8
    23e4:	39 2d       	mov	r19, r9
    23e6:	4d 85       	ldd	r20, Y+13	; 0x0d
    23e8:	5d 81       	ldd	r21, Y+5	; 0x05
    23ea:	6b 2f       	mov	r22, r27
    23ec:	7a 2f       	mov	r23, r26
    23ee:	8f 2f       	mov	r24, r31
    23f0:	9e 2f       	mov	r25, r30
    23f2:	0e 94 77 24 	call	0x48ee	; 0x48ee <__subdi3>
    23f6:	12 2f       	mov	r17, r18
    23f8:	3d 83       	std	Y+5, r19	; 0x05
    23fa:	49 83       	std	Y+1, r20	; 0x01
    23fc:	b5 2f       	mov	r27, r21
    23fe:	f6 2f       	mov	r31, r22
    2400:	e7 2f       	mov	r30, r23
    2402:	78 2e       	mov	r7, r24
    2404:	89 2e       	mov	r8, r25
    2406:	a0 e0       	ldi	r26, 0x00	; 0
    2408:	0e 94 80 24 	call	0x4900	; 0x4900 <__cmpdi2_s8>
    240c:	84 f4       	brge	.+32     	; 0x242e <__stack+0x22f>
    240e:	21 50       	subi	r18, 0x01	; 1
    2410:	30 48       	sbci	r19, 0x80	; 128
    2412:	4f 4f       	sbci	r20, 0xFF	; 255
    2414:	5f 4f       	sbci	r21, 0xFF	; 255
    2416:	6f 4f       	sbci	r22, 0xFF	; 255
    2418:	7f 4f       	sbci	r23, 0xFF	; 255
    241a:	8f 4f       	sbci	r24, 0xFF	; 255
    241c:	9f 4f       	sbci	r25, 0xFF	; 255
    241e:	12 2f       	mov	r17, r18
    2420:	3d 83       	std	Y+5, r19	; 0x05
    2422:	49 83       	std	Y+1, r20	; 0x01
    2424:	b5 2f       	mov	r27, r21
    2426:	f6 2f       	mov	r31, r22
    2428:	e7 2f       	mov	r30, r23
    242a:	78 2e       	mov	r7, r24
    242c:	89 2e       	mov	r8, r25
    242e:	21 2f       	mov	r18, r17
    2430:	3d 81       	ldd	r19, Y+5	; 0x05
    2432:	49 81       	ldd	r20, Y+1	; 0x01
    2434:	5b 2f       	mov	r21, r27
    2436:	6f 2f       	mov	r22, r31
    2438:	7e 2f       	mov	r23, r30
    243a:	87 2d       	mov	r24, r7
    243c:	98 2d       	mov	r25, r8
    243e:	0f e0       	ldi	r16, 0x0F	; 15
    2440:	0e 94 44 24 	call	0x4888	; 0x4888 <__ashrdi3>
    2444:	d1 01       	movw	r26, r2
    2446:	5c 96       	adiw	r26, 0x1c	; 28
    2448:	2c 93       	st	X, r18
    244a:	5c 97       	sbiw	r26, 0x1c	; 28
    244c:	5d 96       	adiw	r26, 0x1d	; 29
    244e:	3c 93       	st	X, r19
    2450:	5d 97       	sbiw	r26, 0x1d	; 29
    2452:	5e 96       	adiw	r26, 0x1e	; 30
    2454:	4c 93       	st	X, r20
    2456:	5e 97       	sbiw	r26, 0x1e	; 30
    2458:	5f 96       	adiw	r26, 0x1f	; 31
    245a:	5c 93       	st	X, r21
    245c:	da c0       	rjmp	.+436    	; 0x2612 <__stack+0x413>
    245e:	8d 80       	ldd	r8, Y+5	; 0x05
    2460:	9e 80       	ldd	r9, Y+6	; 0x06
    2462:	af 80       	ldd	r10, Y+7	; 0x07
    2464:	b8 84       	ldd	r11, Y+8	; 0x08
    2466:	48 18       	sub	r4, r8
    2468:	59 08       	sbc	r5, r9
    246a:	6a 08       	sbc	r6, r10
    246c:	7b 08       	sbc	r7, r11
    246e:	d1 01       	movw	r26, r2
    2470:	58 96       	adiw	r26, 0x18	; 24
    2472:	4d 92       	st	X+, r4
    2474:	5d 92       	st	X+, r5
    2476:	6d 92       	st	X+, r6
    2478:	7c 92       	st	X, r7
    247a:	5b 97       	sbiw	r26, 0x1b	; 27
    247c:	50 96       	adiw	r26, 0x10	; 16
    247e:	8d 91       	ld	r24, X+
    2480:	9d 91       	ld	r25, X+
    2482:	0d 90       	ld	r0, X+
    2484:	bc 91       	ld	r27, X
    2486:	a0 2d       	mov	r26, r0
    2488:	3c 01       	movw	r6, r24
    248a:	4d 01       	movw	r8, r26
    248c:	a1 2c       	mov	r10, r1
    248e:	b1 2c       	mov	r11, r1
    2490:	65 01       	movw	r12, r10
    2492:	8d 83       	std	Y+5, r24	; 0x05
    2494:	7e 82       	std	Y+6, r7	; 0x06
    2496:	8f 82       	std	Y+7, r8	; 0x07
    2498:	98 86       	std	Y+8, r9	; 0x08
    249a:	a9 86       	std	Y+9, r10	; 0x09
    249c:	ba 86       	std	Y+10, r11	; 0x0a
    249e:	cb 86       	std	Y+11, r12	; 0x0b
    24a0:	dc 86       	std	Y+12, r13	; 0x0c
    24a2:	27 01       	movw	r4, r14
    24a4:	38 01       	movw	r6, r16
    24a6:	77 0c       	add	r7, r7
    24a8:	44 08       	sbc	r4, r4
    24aa:	54 2c       	mov	r5, r4
    24ac:	32 01       	movw	r6, r4
    24ae:	2d 89       	ldd	r18, Y+21	; 0x15
    24b0:	3e 89       	ldd	r19, Y+22	; 0x16
    24b2:	4f 89       	ldd	r20, Y+23	; 0x17
    24b4:	58 8d       	ldd	r21, Y+24	; 0x18
    24b6:	69 8d       	ldd	r22, Y+25	; 0x19
    24b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24be:	ae 2c       	mov	r10, r14
    24c0:	bf 2c       	mov	r11, r15
    24c2:	c0 2e       	mov	r12, r16
    24c4:	d1 2e       	mov	r13, r17
    24c6:	e4 2c       	mov	r14, r4
    24c8:	f4 2c       	mov	r15, r4
    24ca:	04 2d       	mov	r16, r4
    24cc:	14 2d       	mov	r17, r4
    24ce:	0e 94 77 24 	call	0x48ee	; 0x48ee <__subdi3>
    24d2:	a2 2e       	mov	r10, r18
    24d4:	b3 2e       	mov	r11, r19
    24d6:	c4 2e       	mov	r12, r20
    24d8:	d5 2e       	mov	r13, r21
    24da:	e6 2e       	mov	r14, r22
    24dc:	f7 2e       	mov	r15, r23
    24de:	08 2f       	mov	r16, r24
    24e0:	19 2f       	mov	r17, r25
    24e2:	2d 81       	ldd	r18, Y+5	; 0x05
    24e4:	3e 81       	ldd	r19, Y+6	; 0x06
    24e6:	48 2d       	mov	r20, r8
    24e8:	59 2d       	mov	r21, r9
    24ea:	60 e0       	ldi	r22, 0x00	; 0
    24ec:	70 e0       	ldi	r23, 0x00	; 0
    24ee:	80 e0       	ldi	r24, 0x00	; 0
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	0e 94 da 23 	call	0x47b4	; 0x47b4 <__muldi3>
    24f6:	12 2f       	mov	r17, r18
    24f8:	3d 8b       	std	Y+21, r19	; 0x15
    24fa:	4d 83       	std	Y+5, r20	; 0x05
    24fc:	b5 2f       	mov	r27, r21
    24fe:	f6 2f       	mov	r31, r22
    2500:	e7 2f       	mov	r30, r23
    2502:	58 2e       	mov	r5, r24
    2504:	69 2e       	mov	r6, r25
    2506:	a0 e0       	ldi	r26, 0x00	; 0
    2508:	0e 94 80 24 	call	0x4900	; 0x4900 <__cmpdi2_s8>
    250c:	84 f4       	brge	.+32     	; 0x252e <__stack+0x32f>
    250e:	21 50       	subi	r18, 0x01	; 1
    2510:	31 09       	sbc	r19, r1
    2512:	40 4e       	sbci	r20, 0xE0	; 224
    2514:	5f 4f       	sbci	r21, 0xFF	; 255
    2516:	6f 4f       	sbci	r22, 0xFF	; 255
    2518:	7f 4f       	sbci	r23, 0xFF	; 255
    251a:	8f 4f       	sbci	r24, 0xFF	; 255
    251c:	9f 4f       	sbci	r25, 0xFF	; 255
    251e:	12 2f       	mov	r17, r18
    2520:	3d 8b       	std	Y+21, r19	; 0x15
    2522:	4d 83       	std	Y+5, r20	; 0x05
    2524:	b5 2f       	mov	r27, r21
    2526:	f6 2f       	mov	r31, r22
    2528:	e7 2f       	mov	r30, r23
    252a:	58 2e       	mov	r5, r24
    252c:	69 2e       	mov	r6, r25
    252e:	21 2f       	mov	r18, r17
    2530:	3d 89       	ldd	r19, Y+21	; 0x15
    2532:	4d 81       	ldd	r20, Y+5	; 0x05
    2534:	5b 2f       	mov	r21, r27
    2536:	6f 2f       	mov	r22, r31
    2538:	7e 2f       	mov	r23, r30
    253a:	85 2d       	mov	r24, r5
    253c:	96 2d       	mov	r25, r6
    253e:	05 e1       	ldi	r16, 0x15	; 21
    2540:	0e 94 44 24 	call	0x4888	; 0x4888 <__ashrdi3>
    2544:	82 2e       	mov	r8, r18
    2546:	93 2e       	mov	r9, r19
    2548:	4d 8b       	std	Y+21, r20	; 0x15
    254a:	5d 83       	std	Y+5, r21	; 0x05
    254c:	b6 2f       	mov	r27, r22
    254e:	a7 2f       	mov	r26, r23
    2550:	f8 2f       	mov	r31, r24
    2552:	e9 2f       	mov	r30, r25
    2554:	49 80       	ldd	r4, Y+1	; 0x01
    2556:	5a 80       	ldd	r5, Y+2	; 0x02
    2558:	6b 80       	ldd	r6, Y+3	; 0x03
    255a:	7c 80       	ldd	r7, Y+4	; 0x04
    255c:	77 0c       	add	r7, r7
    255e:	44 08       	sbc	r4, r4
    2560:	54 2c       	mov	r5, r4
    2562:	32 01       	movw	r6, r4
    2564:	2d 85       	ldd	r18, Y+13	; 0x0d
    2566:	3e 85       	ldd	r19, Y+14	; 0x0e
    2568:	4f 85       	ldd	r20, Y+15	; 0x0f
    256a:	58 89       	ldd	r21, Y+16	; 0x10
    256c:	69 89       	ldd	r22, Y+17	; 0x11
    256e:	7a 89       	ldd	r23, Y+18	; 0x12
    2570:	8b 89       	ldd	r24, Y+19	; 0x13
    2572:	9c 89       	ldd	r25, Y+20	; 0x14
    2574:	a9 80       	ldd	r10, Y+1	; 0x01
    2576:	ba 80       	ldd	r11, Y+2	; 0x02
    2578:	cb 80       	ldd	r12, Y+3	; 0x03
    257a:	dc 80       	ldd	r13, Y+4	; 0x04
    257c:	e4 2c       	mov	r14, r4
    257e:	f4 2c       	mov	r15, r4
    2580:	04 2d       	mov	r16, r4
    2582:	14 2d       	mov	r17, r4
    2584:	0e 94 77 24 	call	0x48ee	; 0x48ee <__subdi3>
    2588:	a2 2e       	mov	r10, r18
    258a:	b3 2e       	mov	r11, r19
    258c:	c4 2e       	mov	r12, r20
    258e:	d5 2e       	mov	r13, r21
    2590:	e6 2e       	mov	r14, r22
    2592:	f7 2e       	mov	r15, r23
    2594:	08 2f       	mov	r16, r24
    2596:	19 2f       	mov	r17, r25
    2598:	28 2d       	mov	r18, r8
    259a:	39 2d       	mov	r19, r9
    259c:	4d 89       	ldd	r20, Y+21	; 0x15
    259e:	5d 81       	ldd	r21, Y+5	; 0x05
    25a0:	6b 2f       	mov	r22, r27
    25a2:	7a 2f       	mov	r23, r26
    25a4:	8f 2f       	mov	r24, r31
    25a6:	9e 2f       	mov	r25, r30
    25a8:	0e 94 77 24 	call	0x48ee	; 0x48ee <__subdi3>
    25ac:	92 2e       	mov	r9, r18
    25ae:	a3 2e       	mov	r10, r19
    25b0:	b4 2e       	mov	r11, r20
    25b2:	c5 2e       	mov	r12, r21
    25b4:	d6 2e       	mov	r13, r22
    25b6:	e7 2e       	mov	r14, r23
    25b8:	78 2e       	mov	r7, r24
    25ba:	89 2e       	mov	r8, r25
    25bc:	a0 e0       	ldi	r26, 0x00	; 0
    25be:	0e 94 80 24 	call	0x4900	; 0x4900 <__cmpdi2_s8>
    25c2:	84 f4       	brge	.+32     	; 0x25e4 <__stack+0x3e5>
    25c4:	21 50       	subi	r18, 0x01	; 1
    25c6:	30 4e       	sbci	r19, 0xE0	; 224
    25c8:	4f 4f       	sbci	r20, 0xFF	; 255
    25ca:	5f 4f       	sbci	r21, 0xFF	; 255
    25cc:	6f 4f       	sbci	r22, 0xFF	; 255
    25ce:	7f 4f       	sbci	r23, 0xFF	; 255
    25d0:	8f 4f       	sbci	r24, 0xFF	; 255
    25d2:	9f 4f       	sbci	r25, 0xFF	; 255
    25d4:	92 2e       	mov	r9, r18
    25d6:	a3 2e       	mov	r10, r19
    25d8:	b4 2e       	mov	r11, r20
    25da:	c5 2e       	mov	r12, r21
    25dc:	d6 2e       	mov	r13, r22
    25de:	e7 2e       	mov	r14, r23
    25e0:	78 2e       	mov	r7, r24
    25e2:	89 2e       	mov	r8, r25
    25e4:	29 2d       	mov	r18, r9
    25e6:	3a 2d       	mov	r19, r10
    25e8:	4b 2d       	mov	r20, r11
    25ea:	5c 2d       	mov	r21, r12
    25ec:	6d 2d       	mov	r22, r13
    25ee:	7e 2d       	mov	r23, r14
    25f0:	87 2d       	mov	r24, r7
    25f2:	98 2d       	mov	r25, r8
    25f4:	0d e0       	ldi	r16, 0x0D	; 13
    25f6:	0e 94 44 24 	call	0x4888	; 0x4888 <__ashrdi3>
    25fa:	d1 01       	movw	r26, r2
    25fc:	5c 96       	adiw	r26, 0x1c	; 28
    25fe:	2c 93       	st	X, r18
    2600:	5c 97       	sbiw	r26, 0x1c	; 28
    2602:	5d 96       	adiw	r26, 0x1d	; 29
    2604:	3c 93       	st	X, r19
    2606:	5d 97       	sbiw	r26, 0x1d	; 29
    2608:	5e 96       	adiw	r26, 0x1e	; 30
    260a:	4c 93       	st	X, r20
    260c:	5e 97       	sbiw	r26, 0x1e	; 30
    260e:	5f 96       	adiw	r26, 0x1f	; 31
    2610:	5c 93       	st	X, r21
    2612:	a5 96       	adiw	r28, 0x25	; 37
    2614:	0f b6       	in	r0, 0x3f	; 63
    2616:	f8 94       	cli
    2618:	de bf       	out	0x3e, r29	; 62
    261a:	0f be       	out	0x3f, r0	; 63
    261c:	cd bf       	out	0x3d, r28	; 61
    261e:	df 91       	pop	r29
    2620:	cf 91       	pop	r28
    2622:	1f 91       	pop	r17
    2624:	0f 91       	pop	r16
    2626:	ff 90       	pop	r15
    2628:	ef 90       	pop	r14
    262a:	df 90       	pop	r13
    262c:	cf 90       	pop	r12
    262e:	bf 90       	pop	r11
    2630:	af 90       	pop	r10
    2632:	9f 90       	pop	r9
    2634:	8f 90       	pop	r8
    2636:	7f 90       	pop	r7
    2638:	6f 90       	pop	r6
    263a:	5f 90       	pop	r5
    263c:	4f 90       	pop	r4
    263e:	3f 90       	pop	r3
    2640:	2f 90       	pop	r2
    2642:	08 95       	ret

00002644 <_ZN6MS58378pressureEf>:
    2644:	cf 92       	push	r12
    2646:	df 92       	push	r13
    2648:	ef 92       	push	r14
    264a:	ff 92       	push	r15
    264c:	6a 01       	movw	r12, r20
    264e:	7b 01       	movw	r14, r22
    2650:	fc 01       	movw	r30, r24
    2652:	20 a1       	ldd	r18, Z+32	; 0x20
    2654:	21 30       	cpi	r18, 0x01	; 1
    2656:	89 f4       	brne	.+34     	; 0x267a <_ZN6MS58378pressureEf+0x36>
    2658:	64 8d       	ldd	r22, Z+28	; 0x1c
    265a:	75 8d       	ldd	r23, Z+29	; 0x1d
    265c:	86 8d       	ldd	r24, Z+30	; 0x1e
    265e:	97 8d       	ldd	r25, Z+31	; 0x1f
    2660:	0e 94 6d 22 	call	0x44da	; 0x44da <__floatsisf>
    2664:	a7 01       	movw	r20, r14
    2666:	96 01       	movw	r18, r12
    2668:	0e 94 21 23 	call	0x4642	; 0x4642 <__mulsf3>
    266c:	20 e0       	ldi	r18, 0x00	; 0
    266e:	30 e0       	ldi	r19, 0x00	; 0
    2670:	48 ec       	ldi	r20, 0xC8	; 200
    2672:	52 e4       	ldi	r21, 0x42	; 66
    2674:	0e 94 d7 21 	call	0x43ae	; 0x43ae <__divsf3>
    2678:	11 c0       	rjmp	.+34     	; 0x269c <_ZN6MS58378pressureEf+0x58>
    267a:	fc 01       	movw	r30, r24
    267c:	64 8d       	ldd	r22, Z+28	; 0x1c
    267e:	75 8d       	ldd	r23, Z+29	; 0x1d
    2680:	86 8d       	ldd	r24, Z+30	; 0x1e
    2682:	97 8d       	ldd	r25, Z+31	; 0x1f
    2684:	0e 94 6d 22 	call	0x44da	; 0x44da <__floatsisf>
    2688:	a7 01       	movw	r20, r14
    268a:	96 01       	movw	r18, r12
    268c:	0e 94 21 23 	call	0x4642	; 0x4642 <__mulsf3>
    2690:	20 e0       	ldi	r18, 0x00	; 0
    2692:	30 e0       	ldi	r19, 0x00	; 0
    2694:	40 e2       	ldi	r20, 0x20	; 32
    2696:	51 e4       	ldi	r21, 0x41	; 65
    2698:	0e 94 d7 21 	call	0x43ae	; 0x43ae <__divsf3>
    269c:	ff 90       	pop	r15
    269e:	ef 90       	pop	r14
    26a0:	df 90       	pop	r13
    26a2:	cf 90       	pop	r12
    26a4:	08 95       	ret

000026a6 <_ZN6MS58374crc4EPj>:


uint8_t MS5837::crc4(uint16_t n_prom[]) {
    26a6:	cf 93       	push	r28
    26a8:	df 93       	push	r29
    26aa:	eb 01       	movw	r28, r22
	uint16_t n_rem = 0;

	n_prom[0] = ((n_prom[0]) & 0x0FFF);
    26ac:	88 81       	ld	r24, Y
    26ae:	99 81       	ldd	r25, Y+1	; 0x01
    26b0:	9f 70       	andi	r25, 0x0F	; 15
    26b2:	99 83       	std	Y+1, r25	; 0x01
    26b4:	88 83       	st	Y, r24
	n_prom[7] = 0;
    26b6:	1f 86       	std	Y+15, r1	; 0x0f
    26b8:	1e 86       	std	Y+14, r1	; 0x0e
    26ba:	40 e0       	ldi	r20, 0x00	; 0
    26bc:	50 e0       	ldi	r21, 0x00	; 0
	return (1-pow((pressure()/1013.25),.190284))*145366.45*.3048;
}


uint8_t MS5837::crc4(uint16_t n_prom[]) {
	uint16_t n_rem = 0;
    26be:	80 e0       	ldi	r24, 0x00	; 0
    26c0:	90 e0       	ldi	r25, 0x00	; 0

	n_prom[0] = ((n_prom[0]) & 0x0FFF);
	n_prom[7] = 0;

	for ( uint8_t i = 0 ; i < 16; i++ ) {
		if ( i%2 == 1 ) {
    26c2:	40 ff       	sbrs	r20, 0
    26c4:	07 c0       	rjmp	.+14     	; 0x26d4 <_ZN6MS58374crc4EPj+0x2e>
			n_rem ^= (uint16_t)((n_prom[i>>1]) & 0x00FF);
    26c6:	fa 01       	movw	r30, r20
    26c8:	ee 7f       	andi	r30, 0xFE	; 254
    26ca:	ec 0f       	add	r30, r28
    26cc:	fd 1f       	adc	r31, r29
    26ce:	20 81       	ld	r18, Z
    26d0:	82 27       	eor	r24, r18
    26d2:	1d c0       	rjmp	.+58     	; 0x270e <_ZN6MS58374crc4EPj+0x68>
			} else {
			n_rem ^= (uint16_t)(n_prom[i>>1] >> 8);
    26d4:	fa 01       	movw	r30, r20
    26d6:	ee 7f       	andi	r30, 0xFE	; 254
    26d8:	ec 0f       	add	r30, r28
    26da:	fd 1f       	adc	r31, r29
    26dc:	a1 81       	ldd	r26, Z+1	; 0x01
    26de:	b0 e0       	ldi	r27, 0x00	; 0
    26e0:	8a 27       	eor	r24, r26
    26e2:	9b 27       	eor	r25, r27
    26e4:	14 c0       	rjmp	.+40     	; 0x270e <_ZN6MS58374crc4EPj+0x68>
		}
		for ( uint8_t n_bit = 8 ; n_bit > 0 ; n_bit-- ) {
			if ( n_rem & 0x8000 ) {
    26e6:	99 23       	and	r25, r25
    26e8:	2c f4       	brge	.+10     	; 0x26f4 <_ZN6MS58374crc4EPj+0x4e>
				n_rem = (n_rem << 1) ^ 0x3000;
    26ea:	88 0f       	add	r24, r24
    26ec:	99 1f       	adc	r25, r25
    26ee:	30 e3       	ldi	r19, 0x30	; 48
    26f0:	93 27       	eor	r25, r19
    26f2:	02 c0       	rjmp	.+4      	; 0x26f8 <_ZN6MS58374crc4EPj+0x52>
				} else {
				n_rem = (n_rem << 1);
    26f4:	88 0f       	add	r24, r24
    26f6:	99 1f       	adc	r25, r25
    26f8:	21 50       	subi	r18, 0x01	; 1
		if ( i%2 == 1 ) {
			n_rem ^= (uint16_t)((n_prom[i>>1]) & 0x00FF);
			} else {
			n_rem ^= (uint16_t)(n_prom[i>>1] >> 8);
		}
		for ( uint8_t n_bit = 8 ; n_bit > 0 ; n_bit-- ) {
    26fa:	a9 f7       	brne	.-22     	; 0x26e6 <_ZN6MS58374crc4EPj+0x40>
    26fc:	4f 5f       	subi	r20, 0xFF	; 255
    26fe:	5f 4f       	sbci	r21, 0xFF	; 255
	uint16_t n_rem = 0;

	n_prom[0] = ((n_prom[0]) & 0x0FFF);
	n_prom[7] = 0;

	for ( uint8_t i = 0 ; i < 16; i++ ) {
    2700:	40 31       	cpi	r20, 0x10	; 16
    2702:	51 05       	cpc	r21, r1
    2704:	f1 f6       	brne	.-68     	; 0x26c2 <_ZN6MS58374crc4EPj+0x1c>
		}
	}
	
	n_rem = ((n_rem >> 12) & 0x000F);

	return n_rem ^ 0x00;
    2706:	89 2f       	mov	r24, r25
    2708:	82 95       	swap	r24
    270a:	8f 70       	andi	r24, 0x0F	; 15
    270c:	02 c0       	rjmp	.+4      	; 0x2712 <_ZN6MS58374crc4EPj+0x6c>
	return (1-pow((pressure()/1013.25),.190284))*145366.45*.3048;
}


uint8_t MS5837::crc4(uint16_t n_prom[]) {
	uint16_t n_rem = 0;
    270e:	28 e0       	ldi	r18, 0x08	; 8
    2710:	ea cf       	rjmp	.-44     	; 0x26e6 <_ZN6MS58374crc4EPj+0x40>
	}
	
	n_rem = ((n_rem >> 12) & 0x000F);

	return n_rem ^ 0x00;
    2712:	df 91       	pop	r29
    2714:	cf 91       	pop	r28
    2716:	08 95       	ret

00002718 <_ZN6MS58375beginEv>:

MS5837::MS5837() {
	fluidDensity = 1029;
}

bool MS5837::begin() {
    2718:	cf 92       	push	r12
    271a:	df 92       	push	r13
    271c:	ef 92       	push	r14
    271e:	ff 92       	push	r15
    2720:	0f 93       	push	r16
    2722:	1f 93       	push	r17
    2724:	cf 93       	push	r28
    2726:	df 93       	push	r29
    2728:	6c 01       	movw	r12, r24
	Timer0.beginMs(10);
    272a:	40 e0       	ldi	r20, 0x00	; 0
    272c:	50 e0       	ldi	r21, 0x00	; 0
    272e:	60 e2       	ldi	r22, 0x20	; 32
    2730:	71 e4       	ldi	r23, 0x41	; 65
    2732:	8b e2       	ldi	r24, 0x2B	; 43
    2734:	97 e0       	ldi	r25, 0x07	; 7
    2736:	de d5       	rcall	.+3004   	; 0x32f4 <_ZN13HardwareTimer7beginMsEf>
	
	// Reset the MS5837, per datasheet
	Wire.beginTransmission(MS5837_ADDR);
    2738:	66 e7       	ldi	r22, 0x76	; 118
    273a:	70 e0       	ldi	r23, 0x00	; 0
    273c:	85 ea       	ldi	r24, 0xA5	; 165
    273e:	97 e0       	ldi	r25, 0x07	; 7
    2740:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <_ZN7TwoWire17beginTransmissionEi>
	void onRequest( void (*)(void) );

	inline size_t write(unsigned long n) { return write((uint8_t)n); }
	inline size_t write(long n) { return write((uint8_t)n); }
	inline size_t write(unsigned int n) { return write((uint8_t)n); }
	inline size_t write(int n) { return write((uint8_t)n); }
    2744:	e0 91 a5 07 	lds	r30, 0x07A5	; 0x8007a5 <Wire>
    2748:	f0 91 a6 07 	lds	r31, 0x07A6	; 0x8007a6 <Wire+0x1>
    274c:	01 90       	ld	r0, Z+
    274e:	f0 81       	ld	r31, Z
    2750:	e0 2d       	mov	r30, r0
    2752:	6e e1       	ldi	r22, 0x1E	; 30
    2754:	85 ea       	ldi	r24, 0xA5	; 165
    2756:	97 e0       	ldi	r25, 0x07	; 7
    2758:	19 95       	eicall
	Wire.write(MS5837_RESET);
	Wire.endTransmission();
    275a:	85 ea       	ldi	r24, 0xA5	; 165
    275c:	97 e0       	ldi	r25, 0x07	; 7
    275e:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <_ZN7TwoWire15endTransmissionEv>

	// Wait for reset to complete
	Timer0.start(1);
    2762:	61 e0       	ldi	r22, 0x01	; 1
    2764:	8b e2       	ldi	r24, 0x2B	; 43
    2766:	97 e0       	ldi	r25, 0x07	; 7
    2768:	2d d6       	rcall	.+3162   	; 0x33c4 <_ZN13HardwareTimer5startEh>
	Timer0.waitForFinish();
    276a:	8b e2       	ldi	r24, 0x2B	; 43
    276c:	97 e0       	ldi	r25, 0x07	; 7
    276e:	38 d6       	rcall	.+3184   	; 0x33e0 <_ZN13HardwareTimer13waitForFinishEv>
    2770:	76 01       	movw	r14, r12
    2772:	c0 ea       	ldi	r28, 0xA0	; 160

	// Read calibration values and CRC
	for ( uint8_t i = 0 ; i < 7 ; i++ ) {
		Wire.beginTransmission(MS5837_ADDR);
    2774:	66 e7       	ldi	r22, 0x76	; 118
    2776:	70 e0       	ldi	r23, 0x00	; 0
    2778:	85 ea       	ldi	r24, 0xA5	; 165
    277a:	97 e0       	ldi	r25, 0x07	; 7
    277c:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <_ZN7TwoWire17beginTransmissionEi>
    2780:	e0 91 a5 07 	lds	r30, 0x07A5	; 0x8007a5 <Wire>
    2784:	f0 91 a6 07 	lds	r31, 0x07A6	; 0x8007a6 <Wire+0x1>
    2788:	01 90       	ld	r0, Z+
    278a:	f0 81       	ld	r31, Z
    278c:	e0 2d       	mov	r30, r0
    278e:	6c 2f       	mov	r22, r28
    2790:	85 ea       	ldi	r24, 0xA5	; 165
    2792:	97 e0       	ldi	r25, 0x07	; 7
    2794:	19 95       	eicall
		Wire.write(MS5837_PROM_READ+i*2);
		Wire.endTransmission();
    2796:	85 ea       	ldi	r24, 0xA5	; 165
    2798:	97 e0       	ldi	r25, 0x07	; 7
    279a:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <_ZN7TwoWire15endTransmissionEv>

		Wire.requestFrom(MS5837_ADDR,2);
    279e:	42 e0       	ldi	r20, 0x02	; 2
    27a0:	50 e0       	ldi	r21, 0x00	; 0
    27a2:	66 e7       	ldi	r22, 0x76	; 118
    27a4:	70 e0       	ldi	r23, 0x00	; 0
    27a6:	85 ea       	ldi	r24, 0xA5	; 165
    27a8:	97 e0       	ldi	r25, 0x07	; 7
    27aa:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <_ZN7TwoWire11requestFromEii>
		C[i] = (Wire.read() << 8) | Wire.read();
    27ae:	85 ea       	ldi	r24, 0xA5	; 165
    27b0:	97 e0       	ldi	r25, 0x07	; 7
    27b2:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN7TwoWire4readEv>
    27b6:	d8 2f       	mov	r29, r24
    27b8:	85 ea       	ldi	r24, 0xA5	; 165
    27ba:	97 e0       	ldi	r25, 0x07	; 7
    27bc:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN7TwoWire4readEv>
    27c0:	1d 2f       	mov	r17, r29
    27c2:	00 e0       	ldi	r16, 0x00	; 0
    27c4:	80 2b       	or	r24, r16
    27c6:	91 2b       	or	r25, r17
    27c8:	f7 01       	movw	r30, r14
    27ca:	81 93       	st	Z+, r24
    27cc:	91 93       	st	Z+, r25
    27ce:	7f 01       	movw	r14, r30
    27d0:	ce 5f       	subi	r28, 0xFE	; 254
	// Wait for reset to complete
	Timer0.start(1);
	Timer0.waitForFinish();

	// Read calibration values and CRC
	for ( uint8_t i = 0 ; i < 7 ; i++ ) {
    27d2:	ce 3a       	cpi	r28, 0xAE	; 174
    27d4:	79 f6       	brne	.-98     	; 0x2774 <_ZN6MS58375beginEv+0x5c>
		Wire.requestFrom(MS5837_ADDR,2);
		C[i] = (Wire.read() << 8) | Wire.read();
	}

	// Verify that data is correct with CRC
	uint8_t crcRead = C[0] >> 12;
    27d6:	f6 01       	movw	r30, r12
    27d8:	c1 81       	ldd	r28, Z+1	; 0x01
    27da:	c2 95       	swap	r28
	uint8_t crcCalculated = crc4(C);
    27dc:	cf 70       	andi	r28, 0x0F	; 15
    27de:	b6 01       	movw	r22, r12
    27e0:	c6 01       	movw	r24, r12
    27e2:	61 df       	rcall	.-318    	; 0x26a6 <_ZN6MS58374crc4EPj>
    27e4:	91 e0       	ldi	r25, 0x01	; 1
    27e6:	c8 13       	cpse	r28, r24
    27e8:	90 e0       	ldi	r25, 0x00	; 0
	if ( crcCalculated == crcRead ) {
		return true; // Initialization success
	}

	return false; // CRC fail
}
    27ea:	89 2f       	mov	r24, r25
    27ec:	df 91       	pop	r29
    27ee:	cf 91       	pop	r28
    27f0:	1f 91       	pop	r17
    27f2:	0f 91       	pop	r16
    27f4:	ff 90       	pop	r15
    27f6:	ef 90       	pop	r14
    27f8:	df 90       	pop	r13
    27fa:	cf 90       	pop	r12
    27fc:	08 95       	ret

000027fe <_ZN6MS58374readEv>:

void MS5837::setFluidDensity(float density) {
	fluidDensity = density;
}

void MS5837::read() {
    27fe:	8f 92       	push	r8
    2800:	9f 92       	push	r9
    2802:	af 92       	push	r10
    2804:	bf 92       	push	r11
    2806:	cf 92       	push	r12
    2808:	df 92       	push	r13
    280a:	ef 92       	push	r14
    280c:	ff 92       	push	r15
    280e:	0f 93       	push	r16
    2810:	1f 93       	push	r17
    2812:	cf 93       	push	r28
    2814:	df 93       	push	r29
    2816:	ec 01       	movw	r28, r24
	// Request D1 conversion
	Wire.beginTransmission(MS5837_ADDR);
    2818:	66 e7       	ldi	r22, 0x76	; 118
    281a:	70 e0       	ldi	r23, 0x00	; 0
    281c:	85 ea       	ldi	r24, 0xA5	; 165
    281e:	97 e0       	ldi	r25, 0x07	; 7
    2820:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <_ZN7TwoWire17beginTransmissionEi>
    2824:	05 ea       	ldi	r16, 0xA5	; 165
    2826:	17 e0       	ldi	r17, 0x07	; 7
    2828:	d8 01       	movw	r26, r16
    282a:	ed 91       	ld	r30, X+
    282c:	fc 91       	ld	r31, X
    282e:	01 90       	ld	r0, Z+
    2830:	f0 81       	ld	r31, Z
    2832:	e0 2d       	mov	r30, r0
    2834:	6a e4       	ldi	r22, 0x4A	; 74
    2836:	c8 01       	movw	r24, r16
    2838:	19 95       	eicall
	Wire.write(MS5837_CONVERT_D1_8192);
	Wire.endTransmission();
    283a:	c8 01       	movw	r24, r16
    283c:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <_ZN7TwoWire15endTransmissionEv>

	Timer0.start(2); // Max conversion time, 20ms per datasheet
    2840:	62 e0       	ldi	r22, 0x02	; 2
    2842:	8b e2       	ldi	r24, 0x2B	; 43
    2844:	97 e0       	ldi	r25, 0x07	; 7
    2846:	be d5       	rcall	.+2940   	; 0x33c4 <_ZN13HardwareTimer5startEh>
	Timer0.waitForFinish();
    2848:	8b e2       	ldi	r24, 0x2B	; 43
    284a:	97 e0       	ldi	r25, 0x07	; 7
    284c:	c9 d5       	rcall	.+2962   	; 0x33e0 <_ZN13HardwareTimer13waitForFinishEv>
	//delay(20); 
	
	Wire.beginTransmission(MS5837_ADDR);
    284e:	66 e7       	ldi	r22, 0x76	; 118
    2850:	70 e0       	ldi	r23, 0x00	; 0
    2852:	c8 01       	movw	r24, r16
    2854:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <_ZN7TwoWire17beginTransmissionEi>
    2858:	d8 01       	movw	r26, r16
    285a:	ed 91       	ld	r30, X+
    285c:	fc 91       	ld	r31, X
    285e:	01 90       	ld	r0, Z+
    2860:	f0 81       	ld	r31, Z
    2862:	e0 2d       	mov	r30, r0
    2864:	60 e0       	ldi	r22, 0x00	; 0
    2866:	c8 01       	movw	r24, r16
    2868:	19 95       	eicall
	Wire.write(MS5837_ADC_READ);
	Wire.endTransmission();
    286a:	c8 01       	movw	r24, r16
    286c:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <_ZN7TwoWire15endTransmissionEv>

	Wire.requestFrom(MS5837_ADDR,3);
    2870:	43 e0       	ldi	r20, 0x03	; 3
    2872:	50 e0       	ldi	r21, 0x00	; 0
    2874:	66 e7       	ldi	r22, 0x76	; 118
    2876:	70 e0       	ldi	r23, 0x00	; 0
    2878:	c8 01       	movw	r24, r16
    287a:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <_ZN7TwoWire11requestFromEii>
	D1 = 0;
    287e:	18 8a       	std	Y+16, r1	; 0x10
    2880:	19 8a       	std	Y+17, r1	; 0x11
    2882:	1a 8a       	std	Y+18, r1	; 0x12
    2884:	1b 8a       	std	Y+19, r1	; 0x13
	D1 = Wire.read();
    2886:	c8 01       	movw	r24, r16
    2888:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN7TwoWire4readEv>
    288c:	4c 01       	movw	r8, r24
    288e:	99 0f       	add	r25, r25
    2890:	aa 08       	sbc	r10, r10
    2892:	bb 08       	sbc	r11, r11
    2894:	88 8a       	std	Y+16, r8	; 0x10
    2896:	99 8a       	std	Y+17, r9	; 0x11
    2898:	aa 8a       	std	Y+18, r10	; 0x12
    289a:	bb 8a       	std	Y+19, r11	; 0x13
	D1 = (D1 << 8) | Wire.read();
    289c:	c8 01       	movw	r24, r16
    289e:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN7TwoWire4readEv>
    28a2:	ba 2c       	mov	r11, r10
    28a4:	a9 2c       	mov	r10, r9
    28a6:	98 2c       	mov	r9, r8
    28a8:	88 24       	eor	r8, r8
    28aa:	6c 01       	movw	r12, r24
    28ac:	99 0f       	add	r25, r25
    28ae:	ee 08       	sbc	r14, r14
    28b0:	ff 08       	sbc	r15, r15
    28b2:	c8 28       	or	r12, r8
    28b4:	d9 28       	or	r13, r9
    28b6:	ea 28       	or	r14, r10
    28b8:	fb 28       	or	r15, r11
    28ba:	c8 8a       	std	Y+16, r12	; 0x10
    28bc:	d9 8a       	std	Y+17, r13	; 0x11
    28be:	ea 8a       	std	Y+18, r14	; 0x12
    28c0:	fb 8a       	std	Y+19, r15	; 0x13
	D1 = (D1 << 8) | Wire.read();
    28c2:	c8 01       	movw	r24, r16
    28c4:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN7TwoWire4readEv>
    28c8:	fe 2c       	mov	r15, r14
    28ca:	ed 2c       	mov	r14, r13
    28cc:	dc 2c       	mov	r13, r12
    28ce:	cc 24       	eor	r12, r12
    28d0:	09 2e       	mov	r0, r25
    28d2:	00 0c       	add	r0, r0
    28d4:	aa 0b       	sbc	r26, r26
    28d6:	bb 0b       	sbc	r27, r27
    28d8:	c8 2a       	or	r12, r24
    28da:	d9 2a       	or	r13, r25
    28dc:	ea 2a       	or	r14, r26
    28de:	fb 2a       	or	r15, r27
    28e0:	c8 8a       	std	Y+16, r12	; 0x10
    28e2:	d9 8a       	std	Y+17, r13	; 0x11
    28e4:	ea 8a       	std	Y+18, r14	; 0x12
    28e6:	fb 8a       	std	Y+19, r15	; 0x13
	
	// Request D2 conversion
	Wire.beginTransmission(MS5837_ADDR);
    28e8:	66 e7       	ldi	r22, 0x76	; 118
    28ea:	70 e0       	ldi	r23, 0x00	; 0
    28ec:	c8 01       	movw	r24, r16
    28ee:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <_ZN7TwoWire17beginTransmissionEi>
    28f2:	d8 01       	movw	r26, r16
    28f4:	ed 91       	ld	r30, X+
    28f6:	fc 91       	ld	r31, X
    28f8:	01 90       	ld	r0, Z+
    28fa:	f0 81       	ld	r31, Z
    28fc:	e0 2d       	mov	r30, r0
    28fe:	6a e5       	ldi	r22, 0x5A	; 90
    2900:	c8 01       	movw	r24, r16
    2902:	19 95       	eicall
	Wire.write(MS5837_CONVERT_D2_8192);
	Wire.endTransmission();
    2904:	c8 01       	movw	r24, r16
    2906:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <_ZN7TwoWire15endTransmissionEv>

	Timer0.start(2);
    290a:	62 e0       	ldi	r22, 0x02	; 2
    290c:	8b e2       	ldi	r24, 0x2B	; 43
    290e:	97 e0       	ldi	r25, 0x07	; 7
    2910:	59 d5       	rcall	.+2738   	; 0x33c4 <_ZN13HardwareTimer5startEh>
	Timer0.waitForFinish(); // Max conversion time per datasheet
    2912:	8b e2       	ldi	r24, 0x2B	; 43
    2914:	97 e0       	ldi	r25, 0x07	; 7
    2916:	64 d5       	rcall	.+2760   	; 0x33e0 <_ZN13HardwareTimer13waitForFinishEv>
    2918:	66 e7       	ldi	r22, 0x76	; 118
	//delay(20); 
	
	Wire.beginTransmission(MS5837_ADDR);
    291a:	70 e0       	ldi	r23, 0x00	; 0
    291c:	c8 01       	movw	r24, r16
    291e:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <_ZN7TwoWire17beginTransmissionEi>
    2922:	d8 01       	movw	r26, r16
    2924:	ed 91       	ld	r30, X+
    2926:	fc 91       	ld	r31, X
    2928:	01 90       	ld	r0, Z+
    292a:	f0 81       	ld	r31, Z
    292c:	e0 2d       	mov	r30, r0
    292e:	60 e0       	ldi	r22, 0x00	; 0
    2930:	c8 01       	movw	r24, r16
    2932:	19 95       	eicall
    2934:	c8 01       	movw	r24, r16
	Wire.write(MS5837_ADC_READ);
	Wire.endTransmission();
    2936:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <_ZN7TwoWire15endTransmissionEv>
    293a:	43 e0       	ldi	r20, 0x03	; 3

	Wire.requestFrom(MS5837_ADDR,3);
    293c:	50 e0       	ldi	r21, 0x00	; 0
    293e:	66 e7       	ldi	r22, 0x76	; 118
    2940:	70 e0       	ldi	r23, 0x00	; 0
    2942:	c8 01       	movw	r24, r16
    2944:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <_ZN7TwoWire11requestFromEii>
    2948:	1c 8a       	std	Y+20, r1	; 0x14
	D2 = 0;
    294a:	1d 8a       	std	Y+21, r1	; 0x15
    294c:	1e 8a       	std	Y+22, r1	; 0x16
    294e:	1f 8a       	std	Y+23, r1	; 0x17
    2950:	c8 01       	movw	r24, r16
	D2 = Wire.read();
    2952:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN7TwoWire4readEv>
    2956:	4c 01       	movw	r8, r24
    2958:	99 0f       	add	r25, r25
    295a:	aa 08       	sbc	r10, r10
    295c:	bb 08       	sbc	r11, r11
    295e:	8c 8a       	std	Y+20, r8	; 0x14
    2960:	9d 8a       	std	Y+21, r9	; 0x15
    2962:	ae 8a       	std	Y+22, r10	; 0x16
    2964:	bf 8a       	std	Y+23, r11	; 0x17
	D2 = (D2 << 8) | Wire.read();
    2966:	c8 01       	movw	r24, r16
    2968:	fe d7       	rcall	.+4092   	; 0x3966 <_ZN7TwoWire4readEv>
    296a:	ba 2c       	mov	r11, r10
    296c:	a9 2c       	mov	r10, r9
    296e:	98 2c       	mov	r9, r8
    2970:	88 24       	eor	r8, r8
    2972:	6c 01       	movw	r12, r24
    2974:	99 0f       	add	r25, r25
    2976:	ee 08       	sbc	r14, r14
    2978:	ff 08       	sbc	r15, r15
    297a:	c8 28       	or	r12, r8
    297c:	d9 28       	or	r13, r9
    297e:	ea 28       	or	r14, r10
    2980:	fb 28       	or	r15, r11
    2982:	cc 8a       	std	Y+20, r12	; 0x14
    2984:	dd 8a       	std	Y+21, r13	; 0x15
    2986:	ee 8a       	std	Y+22, r14	; 0x16
    2988:	ff 8a       	std	Y+23, r15	; 0x17
	D2 = (D2 << 8) | Wire.read();
    298a:	c8 01       	movw	r24, r16
    298c:	ec d7       	rcall	.+4056   	; 0x3966 <_ZN7TwoWire4readEv>
    298e:	fe 2c       	mov	r15, r14
    2990:	ed 2c       	mov	r14, r13
    2992:	dc 2c       	mov	r13, r12
    2994:	cc 24       	eor	r12, r12
    2996:	09 2e       	mov	r0, r25
    2998:	00 0c       	add	r0, r0
    299a:	aa 0b       	sbc	r26, r26
    299c:	bb 0b       	sbc	r27, r27
    299e:	c8 2a       	or	r12, r24
    29a0:	d9 2a       	or	r13, r25
    29a2:	ea 2a       	or	r14, r26
    29a4:	fb 2a       	or	r15, r27
    29a6:	cc 8a       	std	Y+20, r12	; 0x14
    29a8:	dd 8a       	std	Y+21, r13	; 0x15
    29aa:	ee 8a       	std	Y+22, r14	; 0x16
    29ac:	ff 8a       	std	Y+23, r15	; 0x17
    29ae:	ce 01       	movw	r24, r28

	calculate();
    29b0:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZN6MS58379calculateEv>
    29b4:	df 91       	pop	r29
}
    29b6:	cf 91       	pop	r28
    29b8:	1f 91       	pop	r17
    29ba:	0f 91       	pop	r16
    29bc:	ff 90       	pop	r15
    29be:	ef 90       	pop	r14
    29c0:	df 90       	pop	r13
    29c2:	cf 90       	pop	r12
    29c4:	bf 90       	pop	r11
    29c6:	af 90       	pop	r10
    29c8:	9f 90       	pop	r9
    29ca:	8f 90       	pop	r8
    29cc:	08 95       	ret

000029ce <_ZN7PCA9685C1Eh>:
#define FREQUENCY_OSCILLATOR 25000000 /**< Int. osc. frequency in datasheet */

#define PCA9685_PRESCALE_MIN 3   /**< minimum prescale value */
#define PCA9685_PRESCALE_MAX 255 /**< maximum prescale value */

PCA9685::PCA9685(const uint8_t addr) : _addr(addr){
    29ce:	fc 01       	movw	r30, r24
    29d0:	60 83       	st	Z, r22
    29d2:	08 95       	ret

000029d4 <_ZN18TwiServoControllerC1Eh>:

#include "TwiServoController.h"
#include "../Utils/CpuFreq.h"
#include <util/delay.h>

TwiServoController::TwiServoController(const uint8_t addr) : controller(addr){
    29d4:	fc cf       	rjmp	.-8      	; 0x29ce <_ZN7PCA9685C1Eh>
    29d6:	08 95       	ret

000029d8 <_ZN14HardwareSerial9availableEv>:
	#endif
	#if defined(HAVE_HWSERIAL2)
	if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
	#endif
	#if defined(HAVE_HWSERIAL3)
	if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    29d8:	fc 01       	movw	r30, r24
    29da:	97 85       	ldd	r25, Z+15	; 0x0f
    29dc:	20 89       	ldd	r18, Z+16	; 0x10
    29de:	89 2f       	mov	r24, r25
    29e0:	90 e0       	ldi	r25, 0x00	; 0
    29e2:	80 5c       	subi	r24, 0xC0	; 192
    29e4:	9f 4f       	sbci	r25, 0xFF	; 255
    29e6:	82 1b       	sub	r24, r18
    29e8:	91 09       	sbc	r25, r1
    29ea:	8f 73       	andi	r24, 0x3F	; 63
    29ec:	99 27       	eor	r25, r25
    29ee:	08 95       	ret

000029f0 <_ZN14HardwareSerial4peekEv>:
    29f0:	fc 01       	movw	r30, r24
    29f2:	97 85       	ldd	r25, Z+15	; 0x0f
    29f4:	80 89       	ldd	r24, Z+16	; 0x10
    29f6:	98 17       	cp	r25, r24
    29f8:	31 f0       	breq	.+12     	; 0x2a06 <_ZN14HardwareSerial4peekEv+0x16>
    29fa:	80 89       	ldd	r24, Z+16	; 0x10
    29fc:	e8 0f       	add	r30, r24
    29fe:	f1 1d       	adc	r31, r1
    2a00:	83 89       	ldd	r24, Z+19	; 0x13
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	08 95       	ret
    2a06:	8f ef       	ldi	r24, 0xFF	; 255
    2a08:	9f ef       	ldi	r25, 0xFF	; 255
    2a0a:	08 95       	ret

00002a0c <_ZN14HardwareSerial4readEv>:
    2a0c:	fc 01       	movw	r30, r24
    2a0e:	97 85       	ldd	r25, Z+15	; 0x0f
    2a10:	80 89       	ldd	r24, Z+16	; 0x10
    2a12:	98 17       	cp	r25, r24
    2a14:	61 f0       	breq	.+24     	; 0x2a2e <_ZN14HardwareSerial4readEv+0x22>
    2a16:	80 89       	ldd	r24, Z+16	; 0x10
    2a18:	df 01       	movw	r26, r30
    2a1a:	a8 0f       	add	r26, r24
    2a1c:	b1 1d       	adc	r27, r1
    2a1e:	53 96       	adiw	r26, 0x13	; 19
    2a20:	8c 91       	ld	r24, X
    2a22:	90 89       	ldd	r25, Z+16	; 0x10
    2a24:	9f 5f       	subi	r25, 0xFF	; 255
    2a26:	9f 73       	andi	r25, 0x3F	; 63
    2a28:	90 8b       	std	Z+16, r25	; 0x10
    2a2a:	90 e0       	ldi	r25, 0x00	; 0
    2a2c:	08 95       	ret
    2a2e:	8f ef       	ldi	r24, 0xFF	; 255
    2a30:	9f ef       	ldi	r25, 0xFF	; 255
    2a32:	08 95       	ret

00002a34 <_ZN14HardwareSerial17availableForWriteEv>:
    2a34:	fc 01       	movw	r30, r24
    2a36:	21 89       	ldd	r18, Z+17	; 0x11
    2a38:	32 89       	ldd	r19, Z+18	; 0x12
    2a3a:	23 17       	cp	r18, r19
    2a3c:	38 f0       	brcs	.+14     	; 0x2a4c <_ZN14HardwareSerial17availableForWriteEv+0x18>
    2a3e:	8f e3       	ldi	r24, 0x3F	; 63
    2a40:	90 e0       	ldi	r25, 0x00	; 0
    2a42:	82 1b       	sub	r24, r18
    2a44:	91 09       	sbc	r25, r1
    2a46:	83 0f       	add	r24, r19
    2a48:	91 1d       	adc	r25, r1
    2a4a:	08 95       	ret
    2a4c:	83 2f       	mov	r24, r19
    2a4e:	90 e0       	ldi	r25, 0x00	; 0
    2a50:	82 1b       	sub	r24, r18
    2a52:	91 09       	sbc	r25, r1
    2a54:	01 97       	sbiw	r24, 0x01	; 1
    2a56:	08 95       	ret

00002a58 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    2a58:	fc 01       	movw	r30, r24
	// If interrupts are enabled, there must be more data in the output
	// buffer. Send the next byte
	unsigned char c = _tx_buffer[_tx_buffer_tail];
    2a5a:	82 89       	ldd	r24, Z+18	; 0x12
    2a5c:	df 01       	movw	r26, r30
    2a5e:	a8 0f       	add	r26, r24
    2a60:	b1 1d       	adc	r27, r1
    2a62:	ad 5a       	subi	r26, 0xAD	; 173
    2a64:	bf 4f       	sbci	r27, 0xFF	; 255
    2a66:	8c 91       	ld	r24, X
	_tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    2a68:	22 89       	ldd	r18, Z+18	; 0x12
    2a6a:	30 e0       	ldi	r19, 0x00	; 0
    2a6c:	2f 5f       	subi	r18, 0xFF	; 255
    2a6e:	3f 4f       	sbci	r19, 0xFF	; 255
    2a70:	2f 73       	andi	r18, 0x3F	; 63
    2a72:	30 78       	andi	r19, 0x80	; 128
    2a74:	33 23       	and	r19, r19
    2a76:	34 f4       	brge	.+12     	; 0x2a84 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x2c>
    2a78:	21 50       	subi	r18, 0x01	; 1
    2a7a:	31 09       	sbc	r19, r1
    2a7c:	20 6c       	ori	r18, 0xC0	; 192
    2a7e:	3f 6f       	ori	r19, 0xFF	; 255
    2a80:	2f 5f       	subi	r18, 0xFF	; 255
    2a82:	3f 4f       	sbci	r19, 0xFF	; 255
    2a84:	22 8b       	std	Z+18, r18	; 0x12

	*_udr = c;
    2a86:	a4 85       	ldd	r26, Z+12	; 0x0c
    2a88:	b5 85       	ldd	r27, Z+13	; 0x0d
    2a8a:	8c 93       	st	X, r24
	// location". This makes sure flush() won't return until the bytes
	// actually got written. Other r/w bits are preserved, and zeroes
	// written to the rest.

	#ifdef MPCM0
	*_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    2a8c:	a6 81       	ldd	r26, Z+6	; 0x06
    2a8e:	b7 81       	ldd	r27, Z+7	; 0x07
    2a90:	8c 91       	ld	r24, X
    2a92:	83 70       	andi	r24, 0x03	; 3
    2a94:	80 64       	ori	r24, 0x40	; 64
    2a96:	8c 93       	st	X, r24
	#else
	*_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
	#endif

	if (_tx_buffer_head == _tx_buffer_tail) {
    2a98:	91 89       	ldd	r25, Z+17	; 0x11
    2a9a:	82 89       	ldd	r24, Z+18	; 0x12
    2a9c:	98 13       	cpse	r25, r24
    2a9e:	06 c0       	rjmp	.+12     	; 0x2aac <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x54>
		// Buffer empty, so disable interrupts
		cbi(*_ucsrb, UDRIE0);
    2aa0:	00 84       	ldd	r0, Z+8	; 0x08
    2aa2:	f1 85       	ldd	r31, Z+9	; 0x09
    2aa4:	e0 2d       	mov	r30, r0
    2aa6:	80 81       	ld	r24, Z
    2aa8:	8f 7d       	andi	r24, 0xDF	; 223
    2aaa:	80 83       	st	Z, r24
    2aac:	08 95       	ret

00002aae <_ZN14HardwareSerial5flushEv>:
	if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
	return tail - head - 1;
}

void HardwareSerial::flush()
{
    2aae:	cf 93       	push	r28
    2ab0:	df 93       	push	r29
    2ab2:	ec 01       	movw	r28, r24
	// If we have never written a byte, no need to flush. This special
	// case is needed since there is no way to force the TXC (transmit
	// complete) bit to 1 during initialization
	if (!_written)
    2ab4:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ab6:	88 23       	and	r24, r24
    2ab8:	d1 f0       	breq	.+52     	; 0x2aee <_ZN14HardwareSerial5flushEv+0x40>
	return;

	while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    2aba:	e8 85       	ldd	r30, Y+8	; 0x08
    2abc:	f9 85       	ldd	r31, Y+9	; 0x09
    2abe:	80 81       	ld	r24, Z
    2ac0:	85 fd       	sbrc	r24, 5
    2ac2:	05 c0       	rjmp	.+10     	; 0x2ace <_ZN14HardwareSerial5flushEv+0x20>
    2ac4:	ae 81       	ldd	r26, Y+6	; 0x06
    2ac6:	bf 81       	ldd	r27, Y+7	; 0x07
    2ac8:	8c 91       	ld	r24, X
    2aca:	86 fd       	sbrc	r24, 6
    2acc:	10 c0       	rjmp	.+32     	; 0x2aee <_ZN14HardwareSerial5flushEv+0x40>
		if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    2ace:	0f b6       	in	r0, 0x3f	; 63
    2ad0:	07 fc       	sbrc	r0, 7
    2ad2:	f5 cf       	rjmp	.-22     	; 0x2abe <_ZN14HardwareSerial5flushEv+0x10>
    2ad4:	80 81       	ld	r24, Z
    2ad6:	85 ff       	sbrs	r24, 5
    2ad8:	f2 cf       	rjmp	.-28     	; 0x2abe <_ZN14HardwareSerial5flushEv+0x10>
    2ada:	03 c0       	rjmp	.+6      	; 0x2ae2 <_ZN14HardwareSerial5flushEv+0x34>
		// Interrupts are globally disabled, but the DR empty
		// interrupt should be enabled, so poll the DR empty flag to
		// prevent deadlock
		if (bit_is_set(*_ucsra, UDRE0))
		_tx_udr_empty_irq();
    2adc:	ce 01       	movw	r24, r28
    2ade:	bc df       	rcall	.-136    	; 0x2a58 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    2ae0:	ec cf       	rjmp	.-40     	; 0x2aba <_ZN14HardwareSerial5flushEv+0xc>
	while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
		if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
		// Interrupts are globally disabled, but the DR empty
		// interrupt should be enabled, so poll the DR empty flag to
		// prevent deadlock
		if (bit_is_set(*_ucsra, UDRE0))
    2ae2:	ae 81       	ldd	r26, Y+6	; 0x06
    2ae4:	bf 81       	ldd	r27, Y+7	; 0x07
    2ae6:	8c 91       	ld	r24, X
    2ae8:	85 ff       	sbrs	r24, 5
    2aea:	e9 cf       	rjmp	.-46     	; 0x2abe <_ZN14HardwareSerial5flushEv+0x10>
    2aec:	f7 cf       	rjmp	.-18     	; 0x2adc <_ZN14HardwareSerial5flushEv+0x2e>
		_tx_udr_empty_irq();
	}
	// If we get here, nothing is queued anymore (DRIE is disabled) and
	// the hardware finished tranmission (TXC is set).
}
    2aee:	df 91       	pop	r29
    2af0:	cf 91       	pop	r28
    2af2:	08 95       	ret

00002af4 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    2af4:	0f 93       	push	r16
    2af6:	1f 93       	push	r17
    2af8:	cf 93       	push	r28
    2afa:	df 93       	push	r29
    2afc:	ec 01       	movw	r28, r24
	_written = true;
    2afe:	81 e0       	ldi	r24, 0x01	; 1
    2b00:	8e 87       	std	Y+14, r24	; 0x0e
	// If the buffer and the data register is empty, just write the byte
	// to the data register and be done. This shortcut helps
	// significantly improve the effective datarate at high (>
	// 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
	if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    2b02:	99 89       	ldd	r25, Y+17	; 0x11
    2b04:	8a 89       	ldd	r24, Y+18	; 0x12
    2b06:	98 13       	cpse	r25, r24
    2b08:	25 c0       	rjmp	.+74     	; 0x2b54 <_ZN14HardwareSerial5writeEh+0x60>
    2b0a:	ee 81       	ldd	r30, Y+6	; 0x06
    2b0c:	ff 81       	ldd	r31, Y+7	; 0x07
    2b0e:	80 81       	ld	r24, Z
    2b10:	85 fd       	sbrc	r24, 5
    2b12:	31 c0       	rjmp	.+98     	; 0x2b76 <_ZN14HardwareSerial5writeEh+0x82>
    2b14:	1f c0       	rjmp	.+62     	; 0x2b54 <_ZN14HardwareSerial5writeEh+0x60>
	}
	tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
	// If the output buffer is full, there's nothing for it other than to
	// wait for the interrupt handler to empty it a bit
	while (i == _tx_buffer_tail) {
    2b16:	8a 89       	ldd	r24, Y+18	; 0x12
    2b18:	18 13       	cpse	r17, r24
    2b1a:	0b c0       	rjmp	.+22     	; 0x2b32 <_ZN14HardwareSerial5writeEh+0x3e>
		if (bit_is_clear(SREG, SREG_I)) {
    2b1c:	0f b6       	in	r0, 0x3f	; 63
    2b1e:	07 fc       	sbrc	r0, 7
    2b20:	fa cf       	rjmp	.-12     	; 0x2b16 <_ZN14HardwareSerial5writeEh+0x22>
			// Interrupts are disabled, so we'll have to poll the data
			// register empty flag ourselves. If it is set, pretend an
			// interrupt has happened and call the handler to free up
			// space for us.
			if(bit_is_set(*_ucsra, UDRE0))
    2b22:	ee 81       	ldd	r30, Y+6	; 0x06
    2b24:	ff 81       	ldd	r31, Y+7	; 0x07
    2b26:	80 81       	ld	r24, Z
    2b28:	85 ff       	sbrs	r24, 5
    2b2a:	f5 cf       	rjmp	.-22     	; 0x2b16 <_ZN14HardwareSerial5writeEh+0x22>
			_tx_udr_empty_irq();
    2b2c:	ce 01       	movw	r24, r28
    2b2e:	94 df       	rcall	.-216    	; 0x2a58 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    2b30:	f2 cf       	rjmp	.-28     	; 0x2b16 <_ZN14HardwareSerial5writeEh+0x22>
			} else {
			// nop, the interrupt handler will free up space for us
		}
	}

	_tx_buffer[_tx_buffer_head] = c;
    2b32:	89 89       	ldd	r24, Y+17	; 0x11
    2b34:	fe 01       	movw	r30, r28
    2b36:	e8 0f       	add	r30, r24
    2b38:	f1 1d       	adc	r31, r1
    2b3a:	ed 5a       	subi	r30, 0xAD	; 173
    2b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3e:	00 83       	st	Z, r16

	// make atomic to prevent execution of ISR between setting the
	// head pointer and setting the interrupt flag resulting in buffer
	// retransmission
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    2b40:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2b42:	f8 94       	cli
		_tx_buffer_head = i;
    2b44:	19 8b       	std	Y+17, r17	; 0x11
		sbi(*_ucsrb, UDRIE0);
    2b46:	e8 85       	ldd	r30, Y+8	; 0x08
    2b48:	f9 85       	ldd	r31, Y+9	; 0x09
    2b4a:	80 81       	ld	r24, Z
    2b4c:	80 62       	ori	r24, 0x20	; 32
    2b4e:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2b50:	9f bf       	out	0x3f, r25	; 63
	}
	
	return 1;
    2b52:	1d c0       	rjmp	.+58     	; 0x2b8e <_ZN14HardwareSerial5writeEh+0x9a>
			*_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
			#endif
		}
		return 1;
	}
	tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    2b54:	29 89       	ldd	r18, Y+17	; 0x11
    2b56:	30 e0       	ldi	r19, 0x00	; 0
    2b58:	2f 5f       	subi	r18, 0xFF	; 255
    2b5a:	3f 4f       	sbci	r19, 0xFF	; 255
    2b5c:	2f 73       	andi	r18, 0x3F	; 63
    2b5e:	30 78       	andi	r19, 0x80	; 128
    2b60:	33 23       	and	r19, r19
    2b62:	34 f4       	brge	.+12     	; 0x2b70 <_ZN14HardwareSerial5writeEh+0x7c>
    2b64:	21 50       	subi	r18, 0x01	; 1
    2b66:	31 09       	sbc	r19, r1
    2b68:	20 6c       	ori	r18, 0xC0	; 192
    2b6a:	3f 6f       	ori	r19, 0xFF	; 255
    2b6c:	2f 5f       	subi	r18, 0xFF	; 255
    2b6e:	3f 4f       	sbci	r19, 0xFF	; 255
    2b70:	06 2f       	mov	r16, r22
    2b72:	12 2f       	mov	r17, r18
    2b74:	d0 cf       	rjmp	.-96     	; 0x2b16 <_ZN14HardwareSerial5writeEh+0x22>
		// So writing UDR must happen first.
		// Writing UDR and clearing TC must be done atomically, otherwise
		// interrupts might delay the TXC clear so the byte written to UDR
		// is transmitted (setting TXC) before clearing TXC. Then TXC will
		// be cleared when no bytes are left, causing flush() to hang
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    2b76:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2b78:	f8 94       	cli
			*_udr = c;
    2b7a:	ec 85       	ldd	r30, Y+12	; 0x0c
    2b7c:	fd 85       	ldd	r31, Y+13	; 0x0d
    2b7e:	60 83       	st	Z, r22
			#ifdef MPCM0
			*_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    2b80:	ee 81       	ldd	r30, Y+6	; 0x06
    2b82:	ff 81       	ldd	r31, Y+7	; 0x07
    2b84:	80 81       	ld	r24, Z
    2b86:	83 70       	andi	r24, 0x03	; 3
    2b88:	80 64       	ori	r24, 0x40	; 64
    2b8a:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2b8c:	9f bf       	out	0x3f, r25	; 63
		_tx_buffer_head = i;
		sbi(*_ucsrb, UDRIE0);
	}
	
	return 1;
}
    2b8e:	81 e0       	ldi	r24, 0x01	; 1
    2b90:	90 e0       	ldi	r25, 0x00	; 0
    2b92:	df 91       	pop	r29
    2b94:	cf 91       	pop	r28
    2b96:	1f 91       	pop	r17
    2b98:	0f 91       	pop	r16
    2b9a:	08 95       	ret

00002b9c <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, uint8_t config)
{
    2b9c:	cf 92       	push	r12
    2b9e:	df 92       	push	r13
    2ba0:	ef 92       	push	r14
    2ba2:	ff 92       	push	r15
    2ba4:	1f 93       	push	r17
    2ba6:	cf 93       	push	r28
    2ba8:	df 93       	push	r29
    2baa:	ec 01       	movw	r28, r24
    2bac:	6a 01       	movw	r12, r20
    2bae:	7b 01       	movw	r14, r22
    2bb0:	12 2f       	mov	r17, r18
	// Try u2x mode first
	uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
	*_ucsra = 1 << U2X0;
    2bb2:	ee 81       	ldd	r30, Y+6	; 0x06
    2bb4:	ff 81       	ldd	r31, Y+7	; 0x07
    2bb6:	82 e0       	ldi	r24, 0x02	; 2
    2bb8:	80 83       	st	Z, r24
	// hardcoded exception for 57600 for compatibility with the bootloader
	// shipped with the Duemilanove and previous boards and the firmware
	// on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
	// be > 4095, so switch back to non-u2x mode if the baud rate is too
	// low.
	if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    2bba:	41 15       	cp	r20, r1
    2bbc:	51 4e       	sbci	r21, 0xE1	; 225
    2bbe:	61 05       	cpc	r22, r1
    2bc0:	71 05       	cpc	r23, r1
    2bc2:	b1 f0       	breq	.+44     	; 0x2bf0 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, uint8_t config)
{
	// Try u2x mode first
	uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    2bc4:	60 e0       	ldi	r22, 0x00	; 0
    2bc6:	79 e0       	ldi	r23, 0x09	; 9
    2bc8:	8d e3       	ldi	r24, 0x3D	; 61
    2bca:	90 e0       	ldi	r25, 0x00	; 0
    2bcc:	a7 01       	movw	r20, r14
    2bce:	96 01       	movw	r18, r12
    2bd0:	0e 94 97 23 	call	0x472e	; 0x472e <__udivmodsi4>
    2bd4:	da 01       	movw	r26, r20
    2bd6:	c9 01       	movw	r24, r18
    2bd8:	01 97       	sbiw	r24, 0x01	; 1
    2bda:	a1 09       	sbc	r26, r1
    2bdc:	b1 09       	sbc	r27, r1
    2bde:	b6 95       	lsr	r27
    2be0:	a7 95       	ror	r26
    2be2:	97 95       	ror	r25
    2be4:	87 95       	ror	r24
    2be6:	9c 01       	movw	r18, r24
	// hardcoded exception for 57600 for compatibility with the bootloader
	// shipped with the Duemilanove and previous boards and the firmware
	// on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
	// be > 4095, so switch back to non-u2x mode if the baud rate is too
	// low.
	if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    2be8:	21 15       	cp	r18, r1
    2bea:	80 e1       	ldi	r24, 0x10	; 16
    2bec:	38 07       	cpc	r19, r24
    2bee:	a8 f0       	brcs	.+42     	; 0x2c1a <_ZN14HardwareSerial5beginEmh+0x7e>
	{
		*_ucsra = 0;
    2bf0:	ee 81       	ldd	r30, Y+6	; 0x06
    2bf2:	ff 81       	ldd	r31, Y+7	; 0x07
    2bf4:	10 82       	st	Z, r1
		baud_setting = (F_CPU / 8 / baud - 1) / 2;
    2bf6:	60 e8       	ldi	r22, 0x80	; 128
    2bf8:	74 e8       	ldi	r23, 0x84	; 132
    2bfa:	8e e1       	ldi	r24, 0x1E	; 30
    2bfc:	90 e0       	ldi	r25, 0x00	; 0
    2bfe:	a7 01       	movw	r20, r14
    2c00:	96 01       	movw	r18, r12
    2c02:	0e 94 97 23 	call	0x472e	; 0x472e <__udivmodsi4>
    2c06:	da 01       	movw	r26, r20
    2c08:	c9 01       	movw	r24, r18
    2c0a:	01 97       	sbiw	r24, 0x01	; 1
    2c0c:	a1 09       	sbc	r26, r1
    2c0e:	b1 09       	sbc	r27, r1
    2c10:	b6 95       	lsr	r27
    2c12:	a7 95       	ror	r26
    2c14:	97 95       	ror	r25
    2c16:	87 95       	ror	r24
    2c18:	9c 01       	movw	r18, r24
	}

	// assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
	*_ubrrh = baud_setting >> 8;
    2c1a:	ea 81       	ldd	r30, Y+2	; 0x02
    2c1c:	fb 81       	ldd	r31, Y+3	; 0x03
    2c1e:	30 83       	st	Z, r19
	*_ubrrl = baud_setting;
    2c20:	ec 81       	ldd	r30, Y+4	; 0x04
    2c22:	fd 81       	ldd	r31, Y+5	; 0x05
    2c24:	20 83       	st	Z, r18

	_written = false;
    2c26:	1e 86       	std	Y+14, r1	; 0x0e

	//set the data bits, parity, and stop bits
	#if defined(__AVR_ATmega8__)
	config |= 0x80; // select UCSRC register (shared with UBRRH)
	#endif
	*_ucsrc = config;
    2c28:	ea 85       	ldd	r30, Y+10	; 0x0a
    2c2a:	fb 85       	ldd	r31, Y+11	; 0x0b
    2c2c:	10 83       	st	Z, r17
	
	sbi(*_ucsrb, RXEN0);
    2c2e:	e8 85       	ldd	r30, Y+8	; 0x08
    2c30:	f9 85       	ldd	r31, Y+9	; 0x09
    2c32:	80 81       	ld	r24, Z
    2c34:	80 61       	ori	r24, 0x10	; 16
    2c36:	80 83       	st	Z, r24
	sbi(*_ucsrb, TXEN0);
    2c38:	e8 85       	ldd	r30, Y+8	; 0x08
    2c3a:	f9 85       	ldd	r31, Y+9	; 0x09
    2c3c:	80 81       	ld	r24, Z
    2c3e:	88 60       	ori	r24, 0x08	; 8
    2c40:	80 83       	st	Z, r24
	sbi(*_ucsrb, RXCIE0);
    2c42:	e8 85       	ldd	r30, Y+8	; 0x08
    2c44:	f9 85       	ldd	r31, Y+9	; 0x09
    2c46:	80 81       	ld	r24, Z
    2c48:	80 68       	ori	r24, 0x80	; 128
    2c4a:	80 83       	st	Z, r24
	cbi(*_ucsrb, UDRIE0);
    2c4c:	e8 85       	ldd	r30, Y+8	; 0x08
    2c4e:	f9 85       	ldd	r31, Y+9	; 0x09
    2c50:	80 81       	ld	r24, Z
    2c52:	8f 7d       	andi	r24, 0xDF	; 223
    2c54:	80 83       	st	Z, r24
}
    2c56:	df 91       	pop	r29
    2c58:	cf 91       	pop	r28
    2c5a:	1f 91       	pop	r17
    2c5c:	ff 90       	pop	r15
    2c5e:	ef 90       	pop	r14
    2c60:	df 90       	pop	r13
    2c62:	cf 90       	pop	r12
    2c64:	08 95       	ret

00002c66 <_ZN5Print17availableForWriteEv>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
}
    2c66:	80 e0       	ldi	r24, 0x00	; 0
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	08 95       	ret

00002c6c <__vector_25>:
    2c6c:	1f 92       	push	r1
    2c6e:	0f 92       	push	r0
    2c70:	0f b6       	in	r0, 0x3f	; 63
    2c72:	0f 92       	push	r0
    2c74:	11 24       	eor	r1, r1
    2c76:	0b b6       	in	r0, 0x3b	; 59
    2c78:	0f 92       	push	r0
    2c7a:	2f 93       	push	r18
    2c7c:	8f 93       	push	r24
    2c7e:	9f 93       	push	r25
    2c80:	af 93       	push	r26
    2c82:	bf 93       	push	r27
    2c84:	ef 93       	push	r30
    2c86:	ff 93       	push	r31
    2c88:	e0 91 e5 05 	lds	r30, 0x05E5	; 0x8005e5 <Serial+0x6>
    2c8c:	f0 91 e6 05 	lds	r31, 0x05E6	; 0x8005e6 <Serial+0x7>
    2c90:	80 81       	ld	r24, Z
    2c92:	82 fd       	sbrc	r24, 2
    2c94:	14 c0       	rjmp	.+40     	; 0x2cbe <__vector_25+0x52>
    2c96:	ef ed       	ldi	r30, 0xDF	; 223
    2c98:	f5 e0       	ldi	r31, 0x05	; 5
    2c9a:	a4 85       	ldd	r26, Z+12	; 0x0c
    2c9c:	b5 85       	ldd	r27, Z+13	; 0x0d
    2c9e:	2c 91       	ld	r18, X
    2ca0:	87 85       	ldd	r24, Z+15	; 0x0f
    2ca2:	8f 5f       	subi	r24, 0xFF	; 255
    2ca4:	8f 70       	andi	r24, 0x0F	; 15
    2ca6:	90 89       	ldd	r25, Z+16	; 0x10
    2ca8:	89 17       	cp	r24, r25
    2caa:	71 f0       	breq	.+28     	; 0x2cc8 <__vector_25+0x5c>
    2cac:	df 01       	movw	r26, r30
    2cae:	e7 85       	ldd	r30, Z+15	; 0x0f
    2cb0:	f0 e0       	ldi	r31, 0x00	; 0
    2cb2:	e1 52       	subi	r30, 0x21	; 33
    2cb4:	fa 4f       	sbci	r31, 0xFA	; 250
    2cb6:	23 8b       	std	Z+19, r18	; 0x13
    2cb8:	1f 96       	adiw	r26, 0x0f	; 15
    2cba:	8c 93       	st	X, r24
    2cbc:	05 c0       	rjmp	.+10     	; 0x2cc8 <__vector_25+0x5c>
    2cbe:	e0 91 eb 05 	lds	r30, 0x05EB	; 0x8005eb <Serial+0xc>
    2cc2:	f0 91 ec 05 	lds	r31, 0x05EC	; 0x8005ec <Serial+0xd>
    2cc6:	80 81       	ld	r24, Z
    2cc8:	ff 91       	pop	r31
    2cca:	ef 91       	pop	r30
    2ccc:	bf 91       	pop	r27
    2cce:	af 91       	pop	r26
    2cd0:	9f 91       	pop	r25
    2cd2:	8f 91       	pop	r24
    2cd4:	2f 91       	pop	r18
    2cd6:	0f 90       	pop	r0
    2cd8:	0b be       	out	0x3b, r0	; 59
    2cda:	0f 90       	pop	r0
    2cdc:	0f be       	out	0x3f, r0	; 63
    2cde:	0f 90       	pop	r0
    2ce0:	1f 90       	pop	r1
    2ce2:	18 95       	reti

00002ce4 <__vector_26>:
    2ce4:	1f 92       	push	r1
    2ce6:	0f 92       	push	r0
    2ce8:	0f b6       	in	r0, 0x3f	; 63
    2cea:	0f 92       	push	r0
    2cec:	11 24       	eor	r1, r1
    2cee:	0b b6       	in	r0, 0x3b	; 59
    2cf0:	0f 92       	push	r0
    2cf2:	2f 93       	push	r18
    2cf4:	3f 93       	push	r19
    2cf6:	4f 93       	push	r20
    2cf8:	5f 93       	push	r21
    2cfa:	6f 93       	push	r22
    2cfc:	7f 93       	push	r23
    2cfe:	8f 93       	push	r24
    2d00:	9f 93       	push	r25
    2d02:	af 93       	push	r26
    2d04:	bf 93       	push	r27
    2d06:	ef 93       	push	r30
    2d08:	ff 93       	push	r31
    2d0a:	8f ed       	ldi	r24, 0xDF	; 223
    2d0c:	95 e0       	ldi	r25, 0x05	; 5
    2d0e:	a4 de       	rcall	.-696    	; 0x2a58 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    2d10:	ff 91       	pop	r31
    2d12:	ef 91       	pop	r30
    2d14:	bf 91       	pop	r27
    2d16:	af 91       	pop	r26
    2d18:	9f 91       	pop	r25
    2d1a:	8f 91       	pop	r24
    2d1c:	7f 91       	pop	r23
    2d1e:	6f 91       	pop	r22
    2d20:	5f 91       	pop	r21
    2d22:	4f 91       	pop	r20
    2d24:	3f 91       	pop	r19
    2d26:	2f 91       	pop	r18
    2d28:	0f 90       	pop	r0
    2d2a:	0b be       	out	0x3b, r0	; 59
    2d2c:	0f 90       	pop	r0
    2d2e:	0f be       	out	0x3f, r0	; 63
    2d30:	0f 90       	pop	r0
    2d32:	1f 90       	pop	r1
    2d34:	18 95       	reti

00002d36 <_GLOBAL__sub_I___vector_25>:
volatile uint8_t *ucsrc, volatile uint8_t *udr) :
_ubrrh(ubrrh), _ubrrl(ubrrl),
_ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
_udr(udr),
_rx_buffer_head(0), _rx_buffer_tail(0),
_tx_buffer_head(0), _tx_buffer_tail(0)
    2d36:	ef ed       	ldi	r30, 0xDF	; 223
    2d38:	f5 e0       	ldi	r31, 0x05	; 5
    2d3a:	83 e0       	ldi	r24, 0x03	; 3
    2d3c:	93 e0       	ldi	r25, 0x03	; 3
    2d3e:	91 83       	std	Z+1, r25	; 0x01
    2d40:	80 83       	st	Z, r24
    2d42:	85 ec       	ldi	r24, 0xC5	; 197
    2d44:	90 e0       	ldi	r25, 0x00	; 0
    2d46:	93 83       	std	Z+3, r25	; 0x03
    2d48:	82 83       	std	Z+2, r24	; 0x02
    2d4a:	84 ec       	ldi	r24, 0xC4	; 196
    2d4c:	90 e0       	ldi	r25, 0x00	; 0
    2d4e:	95 83       	std	Z+5, r25	; 0x05
    2d50:	84 83       	std	Z+4, r24	; 0x04
    2d52:	80 ec       	ldi	r24, 0xC0	; 192
    2d54:	90 e0       	ldi	r25, 0x00	; 0
    2d56:	97 83       	std	Z+7, r25	; 0x07
    2d58:	86 83       	std	Z+6, r24	; 0x06
    2d5a:	81 ec       	ldi	r24, 0xC1	; 193
    2d5c:	90 e0       	ldi	r25, 0x00	; 0
    2d5e:	91 87       	std	Z+9, r25	; 0x09
    2d60:	80 87       	std	Z+8, r24	; 0x08
    2d62:	82 ec       	ldi	r24, 0xC2	; 194
    2d64:	90 e0       	ldi	r25, 0x00	; 0
    2d66:	93 87       	std	Z+11, r25	; 0x0b
    2d68:	82 87       	std	Z+10, r24	; 0x0a
    2d6a:	86 ec       	ldi	r24, 0xC6	; 198
    2d6c:	90 e0       	ldi	r25, 0x00	; 0
    2d6e:	95 87       	std	Z+13, r25	; 0x0d
    2d70:	84 87       	std	Z+12, r24	; 0x0c
    2d72:	17 86       	std	Z+15, r1	; 0x0f
    2d74:	10 8a       	std	Z+16, r1	; 0x10
    2d76:	11 8a       	std	Z+17, r1	; 0x11
    2d78:	12 8a       	std	Z+18, r1	; 0x12
    2d7a:	08 95       	ret

00002d7c <__vector_36>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
}
    2d7c:	1f 92       	push	r1
    2d7e:	0f 92       	push	r0
    2d80:	0f b6       	in	r0, 0x3f	; 63
    2d82:	0f 92       	push	r0
    2d84:	11 24       	eor	r1, r1
    2d86:	0b b6       	in	r0, 0x3b	; 59
    2d88:	0f 92       	push	r0
    2d8a:	2f 93       	push	r18
    2d8c:	8f 93       	push	r24
    2d8e:	9f 93       	push	r25
    2d90:	af 93       	push	r26
    2d92:	bf 93       	push	r27
    2d94:	ef 93       	push	r30
    2d96:	ff 93       	push	r31
    2d98:	e0 91 18 06 	lds	r30, 0x0618	; 0x800618 <Serial1+0x6>
    2d9c:	f0 91 19 06 	lds	r31, 0x0619	; 0x800619 <Serial1+0x7>
    2da0:	80 81       	ld	r24, Z
    2da2:	82 fd       	sbrc	r24, 2
    2da4:	14 c0       	rjmp	.+40     	; 0x2dce <__vector_36+0x52>
    2da6:	e2 e1       	ldi	r30, 0x12	; 18
    2da8:	f6 e0       	ldi	r31, 0x06	; 6
    2daa:	a4 85       	ldd	r26, Z+12	; 0x0c
    2dac:	b5 85       	ldd	r27, Z+13	; 0x0d
    2dae:	2c 91       	ld	r18, X
    2db0:	87 85       	ldd	r24, Z+15	; 0x0f
    2db2:	8f 5f       	subi	r24, 0xFF	; 255
    2db4:	8f 70       	andi	r24, 0x0F	; 15
    2db6:	90 89       	ldd	r25, Z+16	; 0x10
    2db8:	89 17       	cp	r24, r25
    2dba:	71 f0       	breq	.+28     	; 0x2dd8 <__vector_36+0x5c>
    2dbc:	df 01       	movw	r26, r30
    2dbe:	e7 85       	ldd	r30, Z+15	; 0x0f
    2dc0:	f0 e0       	ldi	r31, 0x00	; 0
    2dc2:	ee 5e       	subi	r30, 0xEE	; 238
    2dc4:	f9 4f       	sbci	r31, 0xF9	; 249
    2dc6:	23 8b       	std	Z+19, r18	; 0x13
    2dc8:	1f 96       	adiw	r26, 0x0f	; 15
    2dca:	8c 93       	st	X, r24
    2dcc:	05 c0       	rjmp	.+10     	; 0x2dd8 <__vector_36+0x5c>
    2dce:	e0 91 1e 06 	lds	r30, 0x061E	; 0x80061e <Serial1+0xc>
    2dd2:	f0 91 1f 06 	lds	r31, 0x061F	; 0x80061f <Serial1+0xd>
    2dd6:	80 81       	ld	r24, Z
    2dd8:	ff 91       	pop	r31
    2dda:	ef 91       	pop	r30
    2ddc:	bf 91       	pop	r27
    2dde:	af 91       	pop	r26
    2de0:	9f 91       	pop	r25
    2de2:	8f 91       	pop	r24
    2de4:	2f 91       	pop	r18
    2de6:	0f 90       	pop	r0
    2de8:	0b be       	out	0x3b, r0	; 59
    2dea:	0f 90       	pop	r0
    2dec:	0f be       	out	0x3f, r0	; 63
    2dee:	0f 90       	pop	r0
    2df0:	1f 90       	pop	r1
    2df2:	18 95       	reti

00002df4 <__vector_37>:
    2df4:	1f 92       	push	r1
    2df6:	0f 92       	push	r0
    2df8:	0f b6       	in	r0, 0x3f	; 63
    2dfa:	0f 92       	push	r0
    2dfc:	11 24       	eor	r1, r1
    2dfe:	0b b6       	in	r0, 0x3b	; 59
    2e00:	0f 92       	push	r0
    2e02:	2f 93       	push	r18
    2e04:	3f 93       	push	r19
    2e06:	4f 93       	push	r20
    2e08:	5f 93       	push	r21
    2e0a:	6f 93       	push	r22
    2e0c:	7f 93       	push	r23
    2e0e:	8f 93       	push	r24
    2e10:	9f 93       	push	r25
    2e12:	af 93       	push	r26
    2e14:	bf 93       	push	r27
    2e16:	ef 93       	push	r30
    2e18:	ff 93       	push	r31
    2e1a:	82 e1       	ldi	r24, 0x12	; 18
    2e1c:	96 e0       	ldi	r25, 0x06	; 6
    2e1e:	1c de       	rcall	.-968    	; 0x2a58 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    2e20:	ff 91       	pop	r31
    2e22:	ef 91       	pop	r30
    2e24:	bf 91       	pop	r27
    2e26:	af 91       	pop	r26
    2e28:	9f 91       	pop	r25
    2e2a:	8f 91       	pop	r24
    2e2c:	7f 91       	pop	r23
    2e2e:	6f 91       	pop	r22
    2e30:	5f 91       	pop	r21
    2e32:	4f 91       	pop	r20
    2e34:	3f 91       	pop	r19
    2e36:	2f 91       	pop	r18
    2e38:	0f 90       	pop	r0
    2e3a:	0b be       	out	0x3b, r0	; 59
    2e3c:	0f 90       	pop	r0
    2e3e:	0f be       	out	0x3f, r0	; 63
    2e40:	0f 90       	pop	r0
    2e42:	1f 90       	pop	r1
    2e44:	18 95       	reti

00002e46 <_GLOBAL__sub_I___vector_36>:
    2e46:	e2 e1       	ldi	r30, 0x12	; 18
    2e48:	f6 e0       	ldi	r31, 0x06	; 6
    2e4a:	83 e0       	ldi	r24, 0x03	; 3
    2e4c:	93 e0       	ldi	r25, 0x03	; 3
    2e4e:	91 83       	std	Z+1, r25	; 0x01
    2e50:	80 83       	st	Z, r24
    2e52:	8d ec       	ldi	r24, 0xCD	; 205
    2e54:	90 e0       	ldi	r25, 0x00	; 0
    2e56:	93 83       	std	Z+3, r25	; 0x03
    2e58:	82 83       	std	Z+2, r24	; 0x02
    2e5a:	8c ec       	ldi	r24, 0xCC	; 204
    2e5c:	90 e0       	ldi	r25, 0x00	; 0
    2e5e:	95 83       	std	Z+5, r25	; 0x05
    2e60:	84 83       	std	Z+4, r24	; 0x04
    2e62:	88 ec       	ldi	r24, 0xC8	; 200
    2e64:	90 e0       	ldi	r25, 0x00	; 0
    2e66:	97 83       	std	Z+7, r25	; 0x07
    2e68:	86 83       	std	Z+6, r24	; 0x06
    2e6a:	89 ec       	ldi	r24, 0xC9	; 201
    2e6c:	90 e0       	ldi	r25, 0x00	; 0
    2e6e:	91 87       	std	Z+9, r25	; 0x09
    2e70:	80 87       	std	Z+8, r24	; 0x08
    2e72:	8a ec       	ldi	r24, 0xCA	; 202
    2e74:	90 e0       	ldi	r25, 0x00	; 0
    2e76:	93 87       	std	Z+11, r25	; 0x0b
    2e78:	82 87       	std	Z+10, r24	; 0x0a
    2e7a:	8e ec       	ldi	r24, 0xCE	; 206
    2e7c:	90 e0       	ldi	r25, 0x00	; 0
    2e7e:	95 87       	std	Z+13, r25	; 0x0d
    2e80:	84 87       	std	Z+12, r24	; 0x0c
    2e82:	17 86       	std	Z+15, r1	; 0x0f
    2e84:	10 8a       	std	Z+16, r1	; 0x10
    2e86:	11 8a       	std	Z+17, r1	; 0x11
    2e88:	12 8a       	std	Z+18, r1	; 0x12
    2e8a:	08 95       	ret

00002e8c <__vector_51>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial2_available() {
  return Serial2.available();
}
    2e8c:	1f 92       	push	r1
    2e8e:	0f 92       	push	r0
    2e90:	0f b6       	in	r0, 0x3f	; 63
    2e92:	0f 92       	push	r0
    2e94:	11 24       	eor	r1, r1
    2e96:	0b b6       	in	r0, 0x3b	; 59
    2e98:	0f 92       	push	r0
    2e9a:	2f 93       	push	r18
    2e9c:	8f 93       	push	r24
    2e9e:	9f 93       	push	r25
    2ea0:	af 93       	push	r26
    2ea2:	bf 93       	push	r27
    2ea4:	ef 93       	push	r30
    2ea6:	ff 93       	push	r31
    2ea8:	e0 91 4b 06 	lds	r30, 0x064B	; 0x80064b <Serial2+0x6>
    2eac:	f0 91 4c 06 	lds	r31, 0x064C	; 0x80064c <Serial2+0x7>
    2eb0:	80 81       	ld	r24, Z
    2eb2:	82 fd       	sbrc	r24, 2
    2eb4:	14 c0       	rjmp	.+40     	; 0x2ede <__vector_51+0x52>
    2eb6:	e5 e4       	ldi	r30, 0x45	; 69
    2eb8:	f6 e0       	ldi	r31, 0x06	; 6
    2eba:	a4 85       	ldd	r26, Z+12	; 0x0c
    2ebc:	b5 85       	ldd	r27, Z+13	; 0x0d
    2ebe:	2c 91       	ld	r18, X
    2ec0:	87 85       	ldd	r24, Z+15	; 0x0f
    2ec2:	8f 5f       	subi	r24, 0xFF	; 255
    2ec4:	8f 70       	andi	r24, 0x0F	; 15
    2ec6:	90 89       	ldd	r25, Z+16	; 0x10
    2ec8:	89 17       	cp	r24, r25
    2eca:	71 f0       	breq	.+28     	; 0x2ee8 <__vector_51+0x5c>
    2ecc:	df 01       	movw	r26, r30
    2ece:	e7 85       	ldd	r30, Z+15	; 0x0f
    2ed0:	f0 e0       	ldi	r31, 0x00	; 0
    2ed2:	eb 5b       	subi	r30, 0xBB	; 187
    2ed4:	f9 4f       	sbci	r31, 0xF9	; 249
    2ed6:	23 8b       	std	Z+19, r18	; 0x13
    2ed8:	1f 96       	adiw	r26, 0x0f	; 15
    2eda:	8c 93       	st	X, r24
    2edc:	05 c0       	rjmp	.+10     	; 0x2ee8 <__vector_51+0x5c>
    2ede:	e0 91 51 06 	lds	r30, 0x0651	; 0x800651 <Serial2+0xc>
    2ee2:	f0 91 52 06 	lds	r31, 0x0652	; 0x800652 <Serial2+0xd>
    2ee6:	80 81       	ld	r24, Z
    2ee8:	ff 91       	pop	r31
    2eea:	ef 91       	pop	r30
    2eec:	bf 91       	pop	r27
    2eee:	af 91       	pop	r26
    2ef0:	9f 91       	pop	r25
    2ef2:	8f 91       	pop	r24
    2ef4:	2f 91       	pop	r18
    2ef6:	0f 90       	pop	r0
    2ef8:	0b be       	out	0x3b, r0	; 59
    2efa:	0f 90       	pop	r0
    2efc:	0f be       	out	0x3f, r0	; 63
    2efe:	0f 90       	pop	r0
    2f00:	1f 90       	pop	r1
    2f02:	18 95       	reti

00002f04 <__vector_52>:
    2f04:	1f 92       	push	r1
    2f06:	0f 92       	push	r0
    2f08:	0f b6       	in	r0, 0x3f	; 63
    2f0a:	0f 92       	push	r0
    2f0c:	11 24       	eor	r1, r1
    2f0e:	0b b6       	in	r0, 0x3b	; 59
    2f10:	0f 92       	push	r0
    2f12:	2f 93       	push	r18
    2f14:	3f 93       	push	r19
    2f16:	4f 93       	push	r20
    2f18:	5f 93       	push	r21
    2f1a:	6f 93       	push	r22
    2f1c:	7f 93       	push	r23
    2f1e:	8f 93       	push	r24
    2f20:	9f 93       	push	r25
    2f22:	af 93       	push	r26
    2f24:	bf 93       	push	r27
    2f26:	ef 93       	push	r30
    2f28:	ff 93       	push	r31
    2f2a:	85 e4       	ldi	r24, 0x45	; 69
    2f2c:	96 e0       	ldi	r25, 0x06	; 6
    2f2e:	94 dd       	rcall	.-1240   	; 0x2a58 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    2f30:	ff 91       	pop	r31
    2f32:	ef 91       	pop	r30
    2f34:	bf 91       	pop	r27
    2f36:	af 91       	pop	r26
    2f38:	9f 91       	pop	r25
    2f3a:	8f 91       	pop	r24
    2f3c:	7f 91       	pop	r23
    2f3e:	6f 91       	pop	r22
    2f40:	5f 91       	pop	r21
    2f42:	4f 91       	pop	r20
    2f44:	3f 91       	pop	r19
    2f46:	2f 91       	pop	r18
    2f48:	0f 90       	pop	r0
    2f4a:	0b be       	out	0x3b, r0	; 59
    2f4c:	0f 90       	pop	r0
    2f4e:	0f be       	out	0x3f, r0	; 63
    2f50:	0f 90       	pop	r0
    2f52:	1f 90       	pop	r1
    2f54:	18 95       	reti

00002f56 <_GLOBAL__sub_I___vector_51>:
    2f56:	e5 e4       	ldi	r30, 0x45	; 69
    2f58:	f6 e0       	ldi	r31, 0x06	; 6
    2f5a:	83 e0       	ldi	r24, 0x03	; 3
    2f5c:	93 e0       	ldi	r25, 0x03	; 3
    2f5e:	91 83       	std	Z+1, r25	; 0x01
    2f60:	80 83       	st	Z, r24
    2f62:	85 ed       	ldi	r24, 0xD5	; 213
    2f64:	90 e0       	ldi	r25, 0x00	; 0
    2f66:	93 83       	std	Z+3, r25	; 0x03
    2f68:	82 83       	std	Z+2, r24	; 0x02
    2f6a:	84 ed       	ldi	r24, 0xD4	; 212
    2f6c:	90 e0       	ldi	r25, 0x00	; 0
    2f6e:	95 83       	std	Z+5, r25	; 0x05
    2f70:	84 83       	std	Z+4, r24	; 0x04
    2f72:	80 ed       	ldi	r24, 0xD0	; 208
    2f74:	90 e0       	ldi	r25, 0x00	; 0
    2f76:	97 83       	std	Z+7, r25	; 0x07
    2f78:	86 83       	std	Z+6, r24	; 0x06
    2f7a:	81 ed       	ldi	r24, 0xD1	; 209
    2f7c:	90 e0       	ldi	r25, 0x00	; 0
    2f7e:	91 87       	std	Z+9, r25	; 0x09
    2f80:	80 87       	std	Z+8, r24	; 0x08
    2f82:	82 ed       	ldi	r24, 0xD2	; 210
    2f84:	90 e0       	ldi	r25, 0x00	; 0
    2f86:	93 87       	std	Z+11, r25	; 0x0b
    2f88:	82 87       	std	Z+10, r24	; 0x0a
    2f8a:	86 ed       	ldi	r24, 0xD6	; 214
    2f8c:	90 e0       	ldi	r25, 0x00	; 0
    2f8e:	95 87       	std	Z+13, r25	; 0x0d
    2f90:	84 87       	std	Z+12, r24	; 0x0c
    2f92:	17 86       	std	Z+15, r1	; 0x0f
    2f94:	10 8a       	std	Z+16, r1	; 0x10
    2f96:	11 8a       	std	Z+17, r1	; 0x11
    2f98:	12 8a       	std	Z+18, r1	; 0x12
    2f9a:	08 95       	ret

00002f9c <__vector_54>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial3_available() {
  return Serial3.available();
}
    2f9c:	1f 92       	push	r1
    2f9e:	0f 92       	push	r0
    2fa0:	0f b6       	in	r0, 0x3f	; 63
    2fa2:	0f 92       	push	r0
    2fa4:	11 24       	eor	r1, r1
    2fa6:	0b b6       	in	r0, 0x3b	; 59
    2fa8:	0f 92       	push	r0
    2faa:	2f 93       	push	r18
    2fac:	8f 93       	push	r24
    2fae:	9f 93       	push	r25
    2fb0:	af 93       	push	r26
    2fb2:	bf 93       	push	r27
    2fb4:	ef 93       	push	r30
    2fb6:	ff 93       	push	r31
    2fb8:	e0 91 7e 06 	lds	r30, 0x067E	; 0x80067e <Serial3+0x6>
    2fbc:	f0 91 7f 06 	lds	r31, 0x067F	; 0x80067f <Serial3+0x7>
    2fc0:	80 81       	ld	r24, Z
    2fc2:	82 fd       	sbrc	r24, 2
    2fc4:	14 c0       	rjmp	.+40     	; 0x2fee <__vector_54+0x52>
    2fc6:	e8 e7       	ldi	r30, 0x78	; 120
    2fc8:	f6 e0       	ldi	r31, 0x06	; 6
    2fca:	a4 85       	ldd	r26, Z+12	; 0x0c
    2fcc:	b5 85       	ldd	r27, Z+13	; 0x0d
    2fce:	2c 91       	ld	r18, X
    2fd0:	87 85       	ldd	r24, Z+15	; 0x0f
    2fd2:	8f 5f       	subi	r24, 0xFF	; 255
    2fd4:	8f 70       	andi	r24, 0x0F	; 15
    2fd6:	90 89       	ldd	r25, Z+16	; 0x10
    2fd8:	89 17       	cp	r24, r25
    2fda:	71 f0       	breq	.+28     	; 0x2ff8 <__vector_54+0x5c>
    2fdc:	df 01       	movw	r26, r30
    2fde:	e7 85       	ldd	r30, Z+15	; 0x0f
    2fe0:	f0 e0       	ldi	r31, 0x00	; 0
    2fe2:	e8 58       	subi	r30, 0x88	; 136
    2fe4:	f9 4f       	sbci	r31, 0xF9	; 249
    2fe6:	23 8b       	std	Z+19, r18	; 0x13
    2fe8:	1f 96       	adiw	r26, 0x0f	; 15
    2fea:	8c 93       	st	X, r24
    2fec:	05 c0       	rjmp	.+10     	; 0x2ff8 <__vector_54+0x5c>
    2fee:	e0 91 84 06 	lds	r30, 0x0684	; 0x800684 <Serial3+0xc>
    2ff2:	f0 91 85 06 	lds	r31, 0x0685	; 0x800685 <Serial3+0xd>
    2ff6:	80 81       	ld	r24, Z
    2ff8:	ff 91       	pop	r31
    2ffa:	ef 91       	pop	r30
    2ffc:	bf 91       	pop	r27
    2ffe:	af 91       	pop	r26
    3000:	9f 91       	pop	r25
    3002:	8f 91       	pop	r24
    3004:	2f 91       	pop	r18
    3006:	0f 90       	pop	r0
    3008:	0b be       	out	0x3b, r0	; 59
    300a:	0f 90       	pop	r0
    300c:	0f be       	out	0x3f, r0	; 63
    300e:	0f 90       	pop	r0
    3010:	1f 90       	pop	r1
    3012:	18 95       	reti

00003014 <__vector_55>:
    3014:	1f 92       	push	r1
    3016:	0f 92       	push	r0
    3018:	0f b6       	in	r0, 0x3f	; 63
    301a:	0f 92       	push	r0
    301c:	11 24       	eor	r1, r1
    301e:	0b b6       	in	r0, 0x3b	; 59
    3020:	0f 92       	push	r0
    3022:	2f 93       	push	r18
    3024:	3f 93       	push	r19
    3026:	4f 93       	push	r20
    3028:	5f 93       	push	r21
    302a:	6f 93       	push	r22
    302c:	7f 93       	push	r23
    302e:	8f 93       	push	r24
    3030:	9f 93       	push	r25
    3032:	af 93       	push	r26
    3034:	bf 93       	push	r27
    3036:	ef 93       	push	r30
    3038:	ff 93       	push	r31
    303a:	88 e7       	ldi	r24, 0x78	; 120
    303c:	96 e0       	ldi	r25, 0x06	; 6
    303e:	0c dd       	rcall	.-1512   	; 0x2a58 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3040:	ff 91       	pop	r31
    3042:	ef 91       	pop	r30
    3044:	bf 91       	pop	r27
    3046:	af 91       	pop	r26
    3048:	9f 91       	pop	r25
    304a:	8f 91       	pop	r24
    304c:	7f 91       	pop	r23
    304e:	6f 91       	pop	r22
    3050:	5f 91       	pop	r21
    3052:	4f 91       	pop	r20
    3054:	3f 91       	pop	r19
    3056:	2f 91       	pop	r18
    3058:	0f 90       	pop	r0
    305a:	0b be       	out	0x3b, r0	; 59
    305c:	0f 90       	pop	r0
    305e:	0f be       	out	0x3f, r0	; 63
    3060:	0f 90       	pop	r0
    3062:	1f 90       	pop	r1
    3064:	18 95       	reti

00003066 <_GLOBAL__sub_I___vector_54>:
    3066:	e8 e7       	ldi	r30, 0x78	; 120
    3068:	f6 e0       	ldi	r31, 0x06	; 6
    306a:	83 e0       	ldi	r24, 0x03	; 3
    306c:	93 e0       	ldi	r25, 0x03	; 3
    306e:	91 83       	std	Z+1, r25	; 0x01
    3070:	80 83       	st	Z, r24
    3072:	85 e3       	ldi	r24, 0x35	; 53
    3074:	91 e0       	ldi	r25, 0x01	; 1
    3076:	93 83       	std	Z+3, r25	; 0x03
    3078:	82 83       	std	Z+2, r24	; 0x02
    307a:	84 e3       	ldi	r24, 0x34	; 52
    307c:	91 e0       	ldi	r25, 0x01	; 1
    307e:	95 83       	std	Z+5, r25	; 0x05
    3080:	84 83       	std	Z+4, r24	; 0x04
    3082:	80 e3       	ldi	r24, 0x30	; 48
    3084:	91 e0       	ldi	r25, 0x01	; 1
    3086:	97 83       	std	Z+7, r25	; 0x07
    3088:	86 83       	std	Z+6, r24	; 0x06
    308a:	81 e3       	ldi	r24, 0x31	; 49
    308c:	91 e0       	ldi	r25, 0x01	; 1
    308e:	91 87       	std	Z+9, r25	; 0x09
    3090:	80 87       	std	Z+8, r24	; 0x08
    3092:	82 e3       	ldi	r24, 0x32	; 50
    3094:	91 e0       	ldi	r25, 0x01	; 1
    3096:	93 87       	std	Z+11, r25	; 0x0b
    3098:	82 87       	std	Z+10, r24	; 0x0a
    309a:	86 e3       	ldi	r24, 0x36	; 54
    309c:	91 e0       	ldi	r25, 0x01	; 1
    309e:	95 87       	std	Z+13, r25	; 0x0d
    30a0:	84 87       	std	Z+12, r24	; 0x0c
    30a2:	17 86       	std	Z+15, r1	; 0x0f
    30a4:	10 8a       	std	Z+16, r1	; 0x10
    30a6:	11 8a       	std	Z+17, r1	; 0x11
    30a8:	12 8a       	std	Z+18, r1	; 0x12
    30aa:	08 95       	ret

000030ac <_GLOBAL__sub_I__ZN13HardwareServoC2ERVjRVhS3_S1_S1_S1_S3_hhh>:
#define CLK_DIV_1024 (_B(CS02) | _BV(CS00))

HardwareServo::HardwareServo(Register16 &icr, Register &tccrA, Register &tccrB, Register16 &ocrA, Register16 &ocrB, Register16 &ocrC, Register &ddr, const uint8_t pinA, const uint8_t pinB, const uint8_t pinC)
 : _icr(&icr), _tccrA(&tccrA), _tccrB(&tccrB), _ocrA(&ocrA), _ocrB(&ocrB), _ocrC(&ocrC),
  _DDR(&ddr), _PINA(pinA), _PINB(pinB), _PINC(pinC),
  _minA(1000), _minB(1000), _minC(1000), _maxA(2000), _maxB(2000), _maxC(2000)
    30ac:	e2 e0       	ldi	r30, 0x02	; 2
    30ae:	f7 e0       	ldi	r31, 0x07	; 7
    30b0:	86 e8       	ldi	r24, 0x86	; 134
    30b2:	90 e0       	ldi	r25, 0x00	; 0
    30b4:	91 83       	std	Z+1, r25	; 0x01
    30b6:	80 83       	st	Z, r24
    30b8:	80 e8       	ldi	r24, 0x80	; 128
    30ba:	90 e0       	ldi	r25, 0x00	; 0
    30bc:	93 83       	std	Z+3, r25	; 0x03
    30be:	82 83       	std	Z+2, r24	; 0x02
    30c0:	81 e8       	ldi	r24, 0x81	; 129
    30c2:	90 e0       	ldi	r25, 0x00	; 0
    30c4:	95 83       	std	Z+5, r25	; 0x05
    30c6:	84 83       	std	Z+4, r24	; 0x04
    30c8:	88 e8       	ldi	r24, 0x88	; 136
    30ca:	90 e0       	ldi	r25, 0x00	; 0
    30cc:	97 83       	std	Z+7, r25	; 0x07
    30ce:	86 83       	std	Z+6, r24	; 0x06
    30d0:	8a e8       	ldi	r24, 0x8A	; 138
    30d2:	90 e0       	ldi	r25, 0x00	; 0
    30d4:	91 87       	std	Z+9, r25	; 0x09
    30d6:	80 87       	std	Z+8, r24	; 0x08
    30d8:	8c e8       	ldi	r24, 0x8C	; 140
    30da:	90 e0       	ldi	r25, 0x00	; 0
    30dc:	93 87       	std	Z+11, r25	; 0x0b
    30de:	82 87       	std	Z+10, r24	; 0x0a
    30e0:	84 e2       	ldi	r24, 0x24	; 36
    30e2:	90 e0       	ldi	r25, 0x00	; 0
    30e4:	95 87       	std	Z+13, r25	; 0x0d
    30e6:	84 87       	std	Z+12, r24	; 0x0c
    30e8:	40 e2       	ldi	r20, 0x20	; 32
    30ea:	46 87       	std	Z+14, r20	; 0x0e
    30ec:	80 e4       	ldi	r24, 0x40	; 64
    30ee:	87 87       	std	Z+15, r24	; 0x0f
    30f0:	80 e8       	ldi	r24, 0x80	; 128
    30f2:	80 8b       	std	Z+16, r24	; 0x10
    30f4:	28 ee       	ldi	r18, 0xE8	; 232
    30f6:	33 e0       	ldi	r19, 0x03	; 3
    30f8:	32 8b       	std	Z+18, r19	; 0x12
    30fa:	21 8b       	std	Z+17, r18	; 0x11
    30fc:	34 8b       	std	Z+20, r19	; 0x14
    30fe:	23 8b       	std	Z+19, r18	; 0x13
    3100:	36 8b       	std	Z+22, r19	; 0x16
    3102:	25 8b       	std	Z+21, r18	; 0x15
    3104:	80 ed       	ldi	r24, 0xD0	; 208
    3106:	97 e0       	ldi	r25, 0x07	; 7
    3108:	90 8f       	std	Z+24, r25	; 0x18
    310a:	87 8b       	std	Z+23, r24	; 0x17
    310c:	92 8f       	std	Z+26, r25	; 0x1a
    310e:	81 8f       	std	Z+25, r24	; 0x19
    3110:	94 8f       	std	Z+28, r25	; 0x1c
    3112:	83 8f       	std	Z+27, r24	; 0x1b
    3114:	e5 ee       	ldi	r30, 0xE5	; 229
    3116:	f6 e0       	ldi	r31, 0x06	; 6
    3118:	66 e9       	ldi	r22, 0x96	; 150
    311a:	70 e0       	ldi	r23, 0x00	; 0
    311c:	71 83       	std	Z+1, r23	; 0x01
    311e:	60 83       	st	Z, r22
    3120:	60 e9       	ldi	r22, 0x90	; 144
    3122:	70 e0       	ldi	r23, 0x00	; 0
    3124:	73 83       	std	Z+3, r23	; 0x03
    3126:	62 83       	std	Z+2, r22	; 0x02
    3128:	61 e9       	ldi	r22, 0x91	; 145
    312a:	70 e0       	ldi	r23, 0x00	; 0
    312c:	75 83       	std	Z+5, r23	; 0x05
    312e:	64 83       	std	Z+4, r22	; 0x04
    3130:	68 e9       	ldi	r22, 0x98	; 152
    3132:	70 e0       	ldi	r23, 0x00	; 0
    3134:	77 83       	std	Z+7, r23	; 0x07
    3136:	66 83       	std	Z+6, r22	; 0x06
    3138:	6a e9       	ldi	r22, 0x9A	; 154
    313a:	70 e0       	ldi	r23, 0x00	; 0
    313c:	71 87       	std	Z+9, r23	; 0x09
    313e:	60 87       	std	Z+8, r22	; 0x08
    3140:	6c e9       	ldi	r22, 0x9C	; 156
    3142:	70 e0       	ldi	r23, 0x00	; 0
    3144:	73 87       	std	Z+11, r23	; 0x0b
    3146:	62 87       	std	Z+10, r22	; 0x0a
    3148:	6d e2       	ldi	r22, 0x2D	; 45
    314a:	70 e0       	ldi	r23, 0x00	; 0
    314c:	75 87       	std	Z+13, r23	; 0x0d
    314e:	64 87       	std	Z+12, r22	; 0x0c
    3150:	68 e0       	ldi	r22, 0x08	; 8
    3152:	66 87       	std	Z+14, r22	; 0x0e
    3154:	50 e1       	ldi	r21, 0x10	; 16
    3156:	57 87       	std	Z+15, r21	; 0x0f
    3158:	40 8b       	std	Z+16, r20	; 0x10
    315a:	32 8b       	std	Z+18, r19	; 0x12
    315c:	21 8b       	std	Z+17, r18	; 0x11
    315e:	34 8b       	std	Z+20, r19	; 0x14
    3160:	23 8b       	std	Z+19, r18	; 0x13
    3162:	36 8b       	std	Z+22, r19	; 0x16
    3164:	25 8b       	std	Z+21, r18	; 0x15
    3166:	90 8f       	std	Z+24, r25	; 0x18
    3168:	87 8b       	std	Z+23, r24	; 0x17
    316a:	92 8f       	std	Z+26, r25	; 0x1a
    316c:	81 8f       	std	Z+25, r24	; 0x19
    316e:	94 8f       	std	Z+28, r25	; 0x1c
    3170:	83 8f       	std	Z+27, r24	; 0x1b
    3172:	e8 ec       	ldi	r30, 0xC8	; 200
    3174:	f6 e0       	ldi	r31, 0x06	; 6
    3176:	a6 ea       	ldi	r26, 0xA6	; 166
    3178:	b0 e0       	ldi	r27, 0x00	; 0
    317a:	b1 83       	std	Z+1, r27	; 0x01
    317c:	a0 83       	st	Z, r26
    317e:	a0 ea       	ldi	r26, 0xA0	; 160
    3180:	b0 e0       	ldi	r27, 0x00	; 0
    3182:	b3 83       	std	Z+3, r27	; 0x03
    3184:	a2 83       	std	Z+2, r26	; 0x02
    3186:	a1 ea       	ldi	r26, 0xA1	; 161
    3188:	b0 e0       	ldi	r27, 0x00	; 0
    318a:	b5 83       	std	Z+5, r27	; 0x05
    318c:	a4 83       	std	Z+4, r26	; 0x04
    318e:	a8 ea       	ldi	r26, 0xA8	; 168
    3190:	b0 e0       	ldi	r27, 0x00	; 0
    3192:	b7 83       	std	Z+7, r27	; 0x07
    3194:	a6 83       	std	Z+6, r26	; 0x06
    3196:	aa ea       	ldi	r26, 0xAA	; 170
    3198:	b0 e0       	ldi	r27, 0x00	; 0
    319a:	b1 87       	std	Z+9, r27	; 0x09
    319c:	a0 87       	std	Z+8, r26	; 0x08
    319e:	ac ea       	ldi	r26, 0xAC	; 172
    31a0:	b0 e0       	ldi	r27, 0x00	; 0
    31a2:	b3 87       	std	Z+11, r27	; 0x0b
    31a4:	a2 87       	std	Z+10, r26	; 0x0a
    31a6:	a1 e0       	ldi	r26, 0x01	; 1
    31a8:	b1 e0       	ldi	r27, 0x01	; 1
    31aa:	b5 87       	std	Z+13, r27	; 0x0d
    31ac:	a4 87       	std	Z+12, r26	; 0x0c
    31ae:	66 87       	std	Z+14, r22	; 0x0e
    31b0:	57 87       	std	Z+15, r21	; 0x0f
    31b2:	40 8b       	std	Z+16, r20	; 0x10
    31b4:	32 8b       	std	Z+18, r19	; 0x12
    31b6:	21 8b       	std	Z+17, r18	; 0x11
    31b8:	34 8b       	std	Z+20, r19	; 0x14
    31ba:	23 8b       	std	Z+19, r18	; 0x13
    31bc:	36 8b       	std	Z+22, r19	; 0x16
    31be:	25 8b       	std	Z+21, r18	; 0x15
    31c0:	90 8f       	std	Z+24, r25	; 0x18
    31c2:	87 8b       	std	Z+23, r24	; 0x17
    31c4:	92 8f       	std	Z+26, r25	; 0x1a
    31c6:	81 8f       	std	Z+25, r24	; 0x19
    31c8:	94 8f       	std	Z+28, r25	; 0x1c
    31ca:	83 8f       	std	Z+27, r24	; 0x1b
    31cc:	eb ea       	ldi	r30, 0xAB	; 171
    31ce:	f6 e0       	ldi	r31, 0x06	; 6
    31d0:	a6 e2       	ldi	r26, 0x26	; 38
    31d2:	b1 e0       	ldi	r27, 0x01	; 1
    31d4:	b1 83       	std	Z+1, r27	; 0x01
    31d6:	a0 83       	st	Z, r26
    31d8:	a0 e2       	ldi	r26, 0x20	; 32
    31da:	b1 e0       	ldi	r27, 0x01	; 1
    31dc:	b3 83       	std	Z+3, r27	; 0x03
    31de:	a2 83       	std	Z+2, r26	; 0x02
    31e0:	a1 e2       	ldi	r26, 0x21	; 33
    31e2:	b1 e0       	ldi	r27, 0x01	; 1
    31e4:	b5 83       	std	Z+5, r27	; 0x05
    31e6:	a4 83       	std	Z+4, r26	; 0x04
    31e8:	a8 e2       	ldi	r26, 0x28	; 40
    31ea:	b1 e0       	ldi	r27, 0x01	; 1
    31ec:	b7 83       	std	Z+7, r27	; 0x07
    31ee:	a6 83       	std	Z+6, r26	; 0x06
    31f0:	aa e2       	ldi	r26, 0x2A	; 42
    31f2:	b1 e0       	ldi	r27, 0x01	; 1
    31f4:	b1 87       	std	Z+9, r27	; 0x09
    31f6:	a0 87       	std	Z+8, r26	; 0x08
    31f8:	ac e2       	ldi	r26, 0x2C	; 44
    31fa:	b1 e0       	ldi	r27, 0x01	; 1
    31fc:	b3 87       	std	Z+11, r27	; 0x0b
    31fe:	a2 87       	std	Z+10, r26	; 0x0a
    3200:	aa e0       	ldi	r26, 0x0A	; 10
    3202:	b1 e0       	ldi	r27, 0x01	; 1
    3204:	b5 87       	std	Z+13, r27	; 0x0d
    3206:	a4 87       	std	Z+12, r26	; 0x0c
    3208:	66 87       	std	Z+14, r22	; 0x0e
    320a:	57 87       	std	Z+15, r21	; 0x0f
    320c:	40 8b       	std	Z+16, r20	; 0x10
    320e:	32 8b       	std	Z+18, r19	; 0x12
    3210:	21 8b       	std	Z+17, r18	; 0x11
    3212:	34 8b       	std	Z+20, r19	; 0x14
    3214:	23 8b       	std	Z+19, r18	; 0x13
    3216:	36 8b       	std	Z+22, r19	; 0x16
    3218:	25 8b       	std	Z+21, r18	; 0x15
    321a:	90 8f       	std	Z+24, r25	; 0x18
    321c:	87 8b       	std	Z+23, r24	; 0x17
    321e:	92 8f       	std	Z+26, r25	; 0x1a
    3220:	81 8f       	std	Z+25, r24	; 0x19
    3222:	94 8f       	std	Z+28, r25	; 0x1c
    3224:	83 8f       	std	Z+27, r24	; 0x1b
    3226:	08 95       	ret

00003228 <_ZN13HardwareTimer12findPrescaleEf>:
	*_tccrB = CLK_DIV_1024; 
}

bool HardwareTimer::finished(){
	return ovfRemaining == 0;
}
    3228:	cf 92       	push	r12
    322a:	df 92       	push	r13
    322c:	ef 92       	push	r14
    322e:	ff 92       	push	r15
    3230:	cf 93       	push	r28
    3232:	df 93       	push	r29
    3234:	ec 01       	movw	r28, r24
    3236:	cb 01       	movw	r24, r22
    3238:	ba 01       	movw	r22, r20
    323a:	20 e0       	ldi	r18, 0x00	; 0
    323c:	30 e0       	ldi	r19, 0x00	; 0
    323e:	4a e7       	ldi	r20, 0x7A	; 122
    3240:	56 e4       	ldi	r21, 0x46	; 70
    3242:	0e 94 21 23 	call	0x4642	; 0x4642 <__mulsf3>
    3246:	20 e0       	ldi	r18, 0x00	; 0
    3248:	30 e0       	ldi	r19, 0x00	; 0
    324a:	40 e8       	ldi	r20, 0x80	; 128
    324c:	5b e3       	ldi	r21, 0x3B	; 59
    324e:	0e 94 21 23 	call	0x4642	; 0x4642 <__mulsf3>
    3252:	6b 01       	movw	r12, r22
    3254:	7c 01       	movw	r14, r24
    3256:	20 e0       	ldi	r18, 0x00	; 0
    3258:	30 e0       	ldi	r19, 0x00	; 0
    325a:	40 e8       	ldi	r20, 0x80	; 128
    325c:	5f e3       	ldi	r21, 0x3F	; 63
    325e:	0e 94 d3 21 	call	0x43a6	; 0x43a6 <__cmpsf2>
    3262:	18 16       	cp	r1, r24
    3264:	3c f0       	brlt	.+14     	; 0x3274 <_ZN13HardwareTimer12findPrescaleEf+0x4c>
    3266:	81 e0       	ldi	r24, 0x01	; 1
    3268:	8a 87       	std	Y+10, r24	; 0x0a
    326a:	60 e0       	ldi	r22, 0x00	; 0
    326c:	70 e0       	ldi	r23, 0x00	; 0
    326e:	80 e8       	ldi	r24, 0x80	; 128
    3270:	9f e3       	ldi	r25, 0x3F	; 63
    3272:	39 c0       	rjmp	.+114    	; 0x32e6 <_ZN13HardwareTimer12findPrescaleEf+0xbe>
    3274:	20 e0       	ldi	r18, 0x00	; 0
    3276:	30 e0       	ldi	r19, 0x00	; 0
    3278:	40 e0       	ldi	r20, 0x00	; 0
    327a:	51 e4       	ldi	r21, 0x41	; 65
    327c:	c7 01       	movw	r24, r14
    327e:	b6 01       	movw	r22, r12
    3280:	0e 94 d3 21 	call	0x43a6	; 0x43a6 <__cmpsf2>
    3284:	18 16       	cp	r1, r24
    3286:	3c f0       	brlt	.+14     	; 0x3296 <_ZN13HardwareTimer12findPrescaleEf+0x6e>
    3288:	82 e0       	ldi	r24, 0x02	; 2
    328a:	8a 87       	std	Y+10, r24	; 0x0a
    328c:	60 e0       	ldi	r22, 0x00	; 0
    328e:	70 e0       	ldi	r23, 0x00	; 0
    3290:	80 e0       	ldi	r24, 0x00	; 0
    3292:	91 e4       	ldi	r25, 0x41	; 65
    3294:	28 c0       	rjmp	.+80     	; 0x32e6 <_ZN13HardwareTimer12findPrescaleEf+0xbe>
    3296:	20 e0       	ldi	r18, 0x00	; 0
    3298:	30 e0       	ldi	r19, 0x00	; 0
    329a:	40 e8       	ldi	r20, 0x80	; 128
    329c:	52 e4       	ldi	r21, 0x42	; 66
    329e:	c7 01       	movw	r24, r14
    32a0:	b6 01       	movw	r22, r12
    32a2:	0e 94 d3 21 	call	0x43a6	; 0x43a6 <__cmpsf2>
    32a6:	18 16       	cp	r1, r24
    32a8:	3c f0       	brlt	.+14     	; 0x32b8 <_ZN13HardwareTimer12findPrescaleEf+0x90>
    32aa:	83 e0       	ldi	r24, 0x03	; 3
    32ac:	8a 87       	std	Y+10, r24	; 0x0a
    32ae:	60 e0       	ldi	r22, 0x00	; 0
    32b0:	70 e0       	ldi	r23, 0x00	; 0
    32b2:	80 e8       	ldi	r24, 0x80	; 128
    32b4:	92 e4       	ldi	r25, 0x42	; 66
    32b6:	17 c0       	rjmp	.+46     	; 0x32e6 <_ZN13HardwareTimer12findPrescaleEf+0xbe>
    32b8:	20 e0       	ldi	r18, 0x00	; 0
    32ba:	30 e0       	ldi	r19, 0x00	; 0
    32bc:	40 e8       	ldi	r20, 0x80	; 128
    32be:	53 e4       	ldi	r21, 0x43	; 67
    32c0:	c7 01       	movw	r24, r14
    32c2:	b6 01       	movw	r22, r12
    32c4:	0e 94 d3 21 	call	0x43a6	; 0x43a6 <__cmpsf2>
    32c8:	18 16       	cp	r1, r24
    32ca:	3c f0       	brlt	.+14     	; 0x32da <_ZN13HardwareTimer12findPrescaleEf+0xb2>
    32cc:	84 e0       	ldi	r24, 0x04	; 4
    32ce:	8a 87       	std	Y+10, r24	; 0x0a
    32d0:	60 e0       	ldi	r22, 0x00	; 0
    32d2:	70 e0       	ldi	r23, 0x00	; 0
    32d4:	80 e8       	ldi	r24, 0x80	; 128
    32d6:	93 e4       	ldi	r25, 0x43	; 67
    32d8:	06 c0       	rjmp	.+12     	; 0x32e6 <_ZN13HardwareTimer12findPrescaleEf+0xbe>
    32da:	85 e0       	ldi	r24, 0x05	; 5
    32dc:	8a 87       	std	Y+10, r24	; 0x0a
    32de:	60 e0       	ldi	r22, 0x00	; 0
    32e0:	70 e0       	ldi	r23, 0x00	; 0
    32e2:	80 e8       	ldi	r24, 0x80	; 128
    32e4:	94 e4       	ldi	r25, 0x44	; 68
    32e6:	df 91       	pop	r29
    32e8:	cf 91       	pop	r28
    32ea:	ff 90       	pop	r15
    32ec:	ef 90       	pop	r14
    32ee:	df 90       	pop	r13
    32f0:	cf 90       	pop	r12
    32f2:	08 95       	ret

000032f4 <_ZN13HardwareTimer7beginMsEf>:
    32f4:	8f 92       	push	r8
    32f6:	9f 92       	push	r9
    32f8:	af 92       	push	r10
    32fa:	bf 92       	push	r11
    32fc:	cf 92       	push	r12
    32fe:	df 92       	push	r13
    3300:	ef 92       	push	r14
    3302:	ff 92       	push	r15
    3304:	cf 93       	push	r28
    3306:	df 93       	push	r29
    3308:	ec 01       	movw	r28, r24
    330a:	6a 01       	movw	r12, r20
    330c:	7b 01       	movw	r14, r22
    330e:	e8 81       	ld	r30, Y
    3310:	f9 81       	ldd	r31, Y+1	; 0x01
    3312:	82 e0       	ldi	r24, 0x02	; 2
    3314:	80 83       	st	Z, r24
    3316:	ea 81       	ldd	r30, Y+2	; 0x02
    3318:	fb 81       	ldd	r31, Y+3	; 0x03
    331a:	10 82       	st	Z, r1
    331c:	ec 81       	ldd	r30, Y+4	; 0x04
    331e:	fd 81       	ldd	r31, Y+5	; 0x05
    3320:	80 83       	st	Z, r24
    3322:	78 94       	sei
    3324:	ce 01       	movw	r24, r28
    3326:	80 df       	rcall	.-256    	; 0x3228 <_ZN13HardwareTimer12findPrescaleEf>
    3328:	4b 01       	movw	r8, r22
    332a:	5c 01       	movw	r10, r24
    332c:	20 e0       	ldi	r18, 0x00	; 0
    332e:	34 e2       	ldi	r19, 0x24	; 36
    3330:	44 e7       	ldi	r20, 0x74	; 116
    3332:	5b e4       	ldi	r21, 0x4B	; 75
    3334:	c7 01       	movw	r24, r14
    3336:	b6 01       	movw	r22, r12
    3338:	0e 94 21 23 	call	0x4642	; 0x4642 <__mulsf3>
    333c:	6b 01       	movw	r12, r22
    333e:	7c 01       	movw	r14, r24
    3340:	20 e0       	ldi	r18, 0x00	; 0
    3342:	30 e0       	ldi	r19, 0x00	; 0
    3344:	4a e7       	ldi	r20, 0x7A	; 122
    3346:	54 e4       	ldi	r21, 0x44	; 68
    3348:	c5 01       	movw	r24, r10
    334a:	b4 01       	movw	r22, r8
    334c:	0e 94 21 23 	call	0x4642	; 0x4642 <__mulsf3>
    3350:	9b 01       	movw	r18, r22
    3352:	ac 01       	movw	r20, r24
    3354:	c7 01       	movw	r24, r14
    3356:	b6 01       	movw	r22, r12
    3358:	0e 94 d7 21 	call	0x43ae	; 0x43ae <__divsf3>
    335c:	20 e0       	ldi	r18, 0x00	; 0
    335e:	30 e0       	ldi	r19, 0x00	; 0
    3360:	40 e8       	ldi	r20, 0x80	; 128
    3362:	5f e3       	ldi	r21, 0x3F	; 63
    3364:	bb d7       	rcall	.+3958   	; 0x42dc <__subsf3>
    3366:	6b 01       	movw	r12, r22
    3368:	7c 01       	movw	r14, r24
    336a:	20 e0       	ldi	r18, 0x00	; 0
    336c:	30 e0       	ldi	r19, 0x00	; 0
    336e:	4f e7       	ldi	r20, 0x7F	; 127
    3370:	53 e4       	ldi	r21, 0x43	; 67
    3372:	0e 94 1d 23 	call	0x463a	; 0x463a <__gesf2>
    3376:	18 16       	cp	r1, r24
    3378:	2c f4       	brge	.+10     	; 0x3384 <_ZN13HardwareTimer7beginMsEf+0x90>
    337a:	e8 85       	ldd	r30, Y+8	; 0x08
    337c:	f9 85       	ldd	r31, Y+9	; 0x09
    337e:	8f ef       	ldi	r24, 0xFF	; 255
    3380:	80 83       	st	Z, r24
    3382:	15 c0       	rjmp	.+42     	; 0x33ae <_ZN13HardwareTimer7beginMsEf+0xba>
    3384:	20 e0       	ldi	r18, 0x00	; 0
    3386:	30 e0       	ldi	r19, 0x00	; 0
    3388:	a9 01       	movw	r20, r18
    338a:	c7 01       	movw	r24, r14
    338c:	b6 01       	movw	r22, r12
    338e:	0e 94 d3 21 	call	0x43a6	; 0x43a6 <__cmpsf2>
    3392:	88 23       	and	r24, r24
    3394:	24 f4       	brge	.+8      	; 0x339e <_ZN13HardwareTimer7beginMsEf+0xaa>
    3396:	e8 85       	ldd	r30, Y+8	; 0x08
    3398:	f9 85       	ldd	r31, Y+9	; 0x09
    339a:	10 82       	st	Z, r1
    339c:	08 c0       	rjmp	.+16     	; 0x33ae <_ZN13HardwareTimer7beginMsEf+0xba>
    339e:	08 84       	ldd	r0, Y+8	; 0x08
    33a0:	d9 85       	ldd	r29, Y+9	; 0x09
    33a2:	c0 2d       	mov	r28, r0
    33a4:	c7 01       	movw	r24, r14
    33a6:	b6 01       	movw	r22, r12
    33a8:	0e 94 3f 22 	call	0x447e	; 0x447e <__fixunssfsi>
    33ac:	68 83       	st	Y, r22
    33ae:	df 91       	pop	r29
    33b0:	cf 91       	pop	r28
    33b2:	ff 90       	pop	r15
    33b4:	ef 90       	pop	r14
    33b6:	df 90       	pop	r13
    33b8:	cf 90       	pop	r12
    33ba:	bf 90       	pop	r11
    33bc:	af 90       	pop	r10
    33be:	9f 90       	pop	r9
    33c0:	8f 90       	pop	r8
    33c2:	08 95       	ret

000033c4 <_ZN13HardwareTimer5startEh>:
    33c4:	fc 01       	movw	r30, r24
    33c6:	a2 81       	ldd	r26, Z+2	; 0x02
    33c8:	b3 81       	ldd	r27, Z+3	; 0x03
    33ca:	1c 92       	st	X, r1
    33cc:	63 87       	std	Z+11, r22	; 0x0b
    33ce:	a6 81       	ldd	r26, Z+6	; 0x06
    33d0:	b7 81       	ldd	r27, Z+7	; 0x07
    33d2:	1c 92       	st	X, r1
    33d4:	02 80       	ldd	r0, Z+2	; 0x02
    33d6:	f3 81       	ldd	r31, Z+3	; 0x03
    33d8:	e0 2d       	mov	r30, r0
    33da:	85 e0       	ldi	r24, 0x05	; 5
    33dc:	80 83       	st	Z, r24
    33de:	08 95       	ret

000033e0 <_ZN13HardwareTimer13waitForFinishEv>:

void HardwareTimer::waitForFinish(){
	while(ovfRemaining != 0){
    33e0:	fc 01       	movw	r30, r24
    33e2:	83 85       	ldd	r24, Z+11	; 0x0b
    33e4:	81 11       	cpse	r24, r1
    33e6:	fe cf       	rjmp	.-4      	; 0x33e4 <_ZN13HardwareTimer13waitForFinishEv+0x4>
	}
}
    33e8:	08 95       	ret

000033ea <_ZN13HardwareTimer14isr_timer_compEv>:

void HardwareTimer::isr_timer_comp(){
    33ea:	fc 01       	movw	r30, r24
	if(ovfRemaining > 0) ovfRemaining--;
    33ec:	93 85       	ldd	r25, Z+11	; 0x0b
    33ee:	99 23       	and	r25, r25
    33f0:	11 f0       	breq	.+4      	; 0x33f6 <_ZN13HardwareTimer14isr_timer_compEv+0xc>
    33f2:	91 50       	subi	r25, 0x01	; 1
    33f4:	93 87       	std	Z+11, r25	; 0x0b
    33f6:	08 95       	ret

000033f8 <__vector_21>:
}

#ifdef USE_TIMER_0
HardwareTimer Timer0(TCCR0A, TCCR0B, TIMSK0, TCNT0, OCR0A);

ISR(TIMER0_COMPA_vect){
    33f8:	1f 92       	push	r1
    33fa:	0f 92       	push	r0
    33fc:	0f b6       	in	r0, 0x3f	; 63
    33fe:	0f 92       	push	r0
    3400:	11 24       	eor	r1, r1
    3402:	0b b6       	in	r0, 0x3b	; 59
    3404:	0f 92       	push	r0
    3406:	2f 93       	push	r18
    3408:	3f 93       	push	r19
    340a:	4f 93       	push	r20
    340c:	5f 93       	push	r21
    340e:	6f 93       	push	r22
    3410:	7f 93       	push	r23
    3412:	8f 93       	push	r24
    3414:	9f 93       	push	r25
    3416:	af 93       	push	r26
    3418:	bf 93       	push	r27
    341a:	ef 93       	push	r30
    341c:	ff 93       	push	r31
	Timer0.isr_timer_comp();
    341e:	8b e2       	ldi	r24, 0x2B	; 43
    3420:	97 e0       	ldi	r25, 0x07	; 7
    3422:	e3 df       	rcall	.-58     	; 0x33ea <_ZN13HardwareTimer14isr_timer_compEv>
}
    3424:	ff 91       	pop	r31
    3426:	ef 91       	pop	r30
    3428:	bf 91       	pop	r27
    342a:	af 91       	pop	r26
    342c:	9f 91       	pop	r25
    342e:	8f 91       	pop	r24
    3430:	7f 91       	pop	r23
    3432:	6f 91       	pop	r22
    3434:	5f 91       	pop	r21
    3436:	4f 91       	pop	r20
    3438:	3f 91       	pop	r19
    343a:	2f 91       	pop	r18
    343c:	0f 90       	pop	r0
    343e:	0b be       	out	0x3b, r0	; 59
    3440:	0f 90       	pop	r0
    3442:	0f be       	out	0x3f, r0	; 63
    3444:	0f 90       	pop	r0
    3446:	1f 90       	pop	r1
    3448:	18 95       	reti

0000344a <__vector_13>:
#endif

#ifdef USE_TIMER_2
HardwareTimer Timer2(TCCR2A, TCCR2B, TIMSK2, TCNT2, OCR2A);

ISR(TIMER2_COMPA_vect){
    344a:	1f 92       	push	r1
    344c:	0f 92       	push	r0
    344e:	0f b6       	in	r0, 0x3f	; 63
    3450:	0f 92       	push	r0
    3452:	11 24       	eor	r1, r1
    3454:	0b b6       	in	r0, 0x3b	; 59
    3456:	0f 92       	push	r0
    3458:	2f 93       	push	r18
    345a:	3f 93       	push	r19
    345c:	4f 93       	push	r20
    345e:	5f 93       	push	r21
    3460:	6f 93       	push	r22
    3462:	7f 93       	push	r23
    3464:	8f 93       	push	r24
    3466:	9f 93       	push	r25
    3468:	af 93       	push	r26
    346a:	bf 93       	push	r27
    346c:	ef 93       	push	r30
    346e:	ff 93       	push	r31
	Timer2.isr_timer_comp();
    3470:	8f e1       	ldi	r24, 0x1F	; 31
    3472:	97 e0       	ldi	r25, 0x07	; 7
    3474:	ba df       	rcall	.-140    	; 0x33ea <_ZN13HardwareTimer14isr_timer_compEv>
}
    3476:	ff 91       	pop	r31
    3478:	ef 91       	pop	r30
    347a:	bf 91       	pop	r27
    347c:	af 91       	pop	r26
    347e:	9f 91       	pop	r25
    3480:	8f 91       	pop	r24
    3482:	7f 91       	pop	r23
    3484:	6f 91       	pop	r22
    3486:	5f 91       	pop	r21
    3488:	4f 91       	pop	r20
    348a:	3f 91       	pop	r19
    348c:	2f 91       	pop	r18
    348e:	0f 90       	pop	r0
    3490:	0b be       	out	0x3b, r0	; 59
    3492:	0f 90       	pop	r0
    3494:	0f be       	out	0x3f, r0	; 63
    3496:	0f 90       	pop	r0
    3498:	1f 90       	pop	r1
    349a:	18 95       	reti

0000349c <_GLOBAL__sub_I__ZN13HardwareTimerC2ERVhS1_S1_S1_S1_>:
#define CLK_DIV_64 (_BV(CS01) | _BV(CS00))
#define CLK_DIV_256 (_BV(CS02))
#define CLK_DIV_1024 (_BV(CS02) | _BV(CS00))

HardwareTimer::HardwareTimer(Register &tccrA, Register &tccrB, Register &timsk, Register &tcnt, Register &ocra)
: _tccrA(&tccrA), _tccrB(&tccrB), _timsk(&timsk), _tcnt(&tcnt), _ocra(&ocra)
    349c:	eb e2       	ldi	r30, 0x2B	; 43
    349e:	f7 e0       	ldi	r31, 0x07	; 7
    34a0:	84 e4       	ldi	r24, 0x44	; 68
    34a2:	90 e0       	ldi	r25, 0x00	; 0
    34a4:	91 83       	std	Z+1, r25	; 0x01
    34a6:	80 83       	st	Z, r24
    34a8:	85 e4       	ldi	r24, 0x45	; 69
    34aa:	90 e0       	ldi	r25, 0x00	; 0
    34ac:	93 83       	std	Z+3, r25	; 0x03
    34ae:	82 83       	std	Z+2, r24	; 0x02
    34b0:	8e e6       	ldi	r24, 0x6E	; 110
    34b2:	90 e0       	ldi	r25, 0x00	; 0
    34b4:	95 83       	std	Z+5, r25	; 0x05
    34b6:	84 83       	std	Z+4, r24	; 0x04
    34b8:	86 e4       	ldi	r24, 0x46	; 70
    34ba:	90 e0       	ldi	r25, 0x00	; 0
    34bc:	97 83       	std	Z+7, r25	; 0x07
    34be:	86 83       	std	Z+6, r24	; 0x06
    34c0:	87 e4       	ldi	r24, 0x47	; 71
    34c2:	90 e0       	ldi	r25, 0x00	; 0
    34c4:	91 87       	std	Z+9, r25	; 0x09
    34c6:	80 87       	std	Z+8, r24	; 0x08
    34c8:	ef e1       	ldi	r30, 0x1F	; 31
    34ca:	f7 e0       	ldi	r31, 0x07	; 7
    34cc:	80 eb       	ldi	r24, 0xB0	; 176
    34ce:	90 e0       	ldi	r25, 0x00	; 0
    34d0:	91 83       	std	Z+1, r25	; 0x01
    34d2:	80 83       	st	Z, r24
    34d4:	81 eb       	ldi	r24, 0xB1	; 177
    34d6:	90 e0       	ldi	r25, 0x00	; 0
    34d8:	93 83       	std	Z+3, r25	; 0x03
    34da:	82 83       	std	Z+2, r24	; 0x02
    34dc:	80 e7       	ldi	r24, 0x70	; 112
    34de:	90 e0       	ldi	r25, 0x00	; 0
    34e0:	95 83       	std	Z+5, r25	; 0x05
    34e2:	84 83       	std	Z+4, r24	; 0x04
    34e4:	82 eb       	ldi	r24, 0xB2	; 178
    34e6:	90 e0       	ldi	r25, 0x00	; 0
    34e8:	97 83       	std	Z+7, r25	; 0x07
    34ea:	86 83       	std	Z+6, r24	; 0x06
    34ec:	83 eb       	ldi	r24, 0xB3	; 179
    34ee:	90 e0       	ldi	r25, 0x00	; 0
    34f0:	91 87       	std	Z+9, r25	; 0x09
    34f2:	80 87       	std	Z+8, r24	; 0x08
    34f4:	08 95       	ret

000034f6 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    34f6:	10 92 a4 07 	sts	0x07A4, r1	; 0x8007a4 <twi_state>
    34fa:	81 e0       	ldi	r24, 0x01	; 1
    34fc:	80 93 a2 07 	sts	0x07A2, r24	; 0x8007a2 <twi_sendStop>
    3500:	10 92 a1 07 	sts	0x07A1, r1	; 0x8007a1 <twi_inRepStart>
    3504:	8b b1       	in	r24, 0x0b	; 11
    3506:	83 60       	ori	r24, 0x03	; 3
    3508:	8b b9       	out	0x0b, r24	; 11
    350a:	e9 eb       	ldi	r30, 0xB9	; 185
    350c:	f0 e0       	ldi	r31, 0x00	; 0
    350e:	80 81       	ld	r24, Z
    3510:	8e 7f       	andi	r24, 0xFE	; 254
    3512:	80 83       	st	Z, r24
    3514:	80 81       	ld	r24, Z
    3516:	8d 7f       	andi	r24, 0xFD	; 253
    3518:	80 83       	st	Z, r24
    351a:	88 e4       	ldi	r24, 0x48	; 72
    351c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    3520:	85 e4       	ldi	r24, 0x45	; 69
    3522:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3526:	08 95       	ret

00003528 <twi_readFrom>:
    3528:	41 32       	cpi	r20, 0x21	; 33
    352a:	08 f0       	brcs	.+2      	; 0x352e <twi_readFrom+0x6>
    352c:	4c c0       	rjmp	.+152    	; 0x35c6 <twi_readFrom+0x9e>
    352e:	90 91 a4 07 	lds	r25, 0x07A4	; 0x8007a4 <twi_state>
    3532:	91 11       	cpse	r25, r1
    3534:	fc cf       	rjmp	.-8      	; 0x352e <twi_readFrom+0x6>
    3536:	31 e0       	ldi	r19, 0x01	; 1
    3538:	30 93 a4 07 	sts	0x07A4, r19	; 0x8007a4 <twi_state>
    353c:	20 93 a2 07 	sts	0x07A2, r18	; 0x8007a2 <twi_sendStop>
    3540:	2f ef       	ldi	r18, 0xFF	; 255
    3542:	20 93 37 07 	sts	0x0737, r18	; 0x800737 <twi_error>
    3546:	10 92 7c 07 	sts	0x077C, r1	; 0x80077c <twi_masterBufferIndex>
    354a:	24 0f       	add	r18, r20
    354c:	20 93 7b 07 	sts	0x077B, r18	; 0x80077b <twi_masterBufferLength>
    3550:	30 93 a3 07 	sts	0x07A3, r19	; 0x8007a3 <twi_slarw>
    3554:	20 91 a3 07 	lds	r18, 0x07A3	; 0x8007a3 <twi_slarw>
    3558:	88 0f       	add	r24, r24
    355a:	82 2b       	or	r24, r18
    355c:	80 93 a3 07 	sts	0x07A3, r24	; 0x8007a3 <twi_slarw>
    3560:	80 91 a1 07 	lds	r24, 0x07A1	; 0x8007a1 <twi_inRepStart>
    3564:	81 30       	cpi	r24, 0x01	; 1
    3566:	81 f4       	brne	.+32     	; 0x3588 <twi_readFrom+0x60>
    3568:	10 92 a1 07 	sts	0x07A1, r1	; 0x8007a1 <twi_inRepStart>
    356c:	ab eb       	ldi	r26, 0xBB	; 187
    356e:	b0 e0       	ldi	r27, 0x00	; 0
    3570:	ec eb       	ldi	r30, 0xBC	; 188
    3572:	f0 e0       	ldi	r31, 0x00	; 0
    3574:	80 91 a3 07 	lds	r24, 0x07A3	; 0x8007a3 <twi_slarw>
    3578:	8c 93       	st	X, r24
    357a:	80 81       	ld	r24, Z
    357c:	83 fd       	sbrc	r24, 3
    357e:	fa cf       	rjmp	.-12     	; 0x3574 <twi_readFrom+0x4c>
    3580:	85 ec       	ldi	r24, 0xC5	; 197
    3582:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3586:	03 c0       	rjmp	.+6      	; 0x358e <twi_readFrom+0x66>
    3588:	85 ee       	ldi	r24, 0xE5	; 229
    358a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    358e:	80 91 a4 07 	lds	r24, 0x07A4	; 0x8007a4 <twi_state>
    3592:	81 30       	cpi	r24, 0x01	; 1
    3594:	e1 f3       	breq	.-8      	; 0x358e <twi_readFrom+0x66>
    3596:	80 91 7c 07 	lds	r24, 0x077C	; 0x80077c <twi_masterBufferIndex>
    359a:	84 17       	cp	r24, r20
    359c:	10 f4       	brcc	.+4      	; 0x35a2 <twi_readFrom+0x7a>
    359e:	40 91 7c 07 	lds	r20, 0x077C	; 0x80077c <twi_masterBufferIndex>
    35a2:	44 23       	and	r20, r20
    35a4:	89 f0       	breq	.+34     	; 0x35c8 <twi_readFrom+0xa0>
    35a6:	ed e7       	ldi	r30, 0x7D	; 125
    35a8:	f7 e0       	ldi	r31, 0x07	; 7
    35aa:	a6 2f       	mov	r26, r22
    35ac:	b7 2f       	mov	r27, r23
    35ae:	2f ef       	ldi	r18, 0xFF	; 255
    35b0:	24 0f       	add	r18, r20
    35b2:	30 e0       	ldi	r19, 0x00	; 0
    35b4:	22 58       	subi	r18, 0x82	; 130
    35b6:	38 4f       	sbci	r19, 0xF8	; 248
    35b8:	81 91       	ld	r24, Z+
    35ba:	8d 93       	st	X+, r24
    35bc:	e2 17       	cp	r30, r18
    35be:	f3 07       	cpc	r31, r19
    35c0:	d9 f7       	brne	.-10     	; 0x35b8 <twi_readFrom+0x90>
    35c2:	94 2f       	mov	r25, r20
    35c4:	01 c0       	rjmp	.+2      	; 0x35c8 <twi_readFrom+0xa0>
    35c6:	90 e0       	ldi	r25, 0x00	; 0
    35c8:	89 2f       	mov	r24, r25
    35ca:	08 95       	ret

000035cc <twi_writeTo>:
    35cc:	0f 93       	push	r16
    35ce:	41 32       	cpi	r20, 0x21	; 33
    35d0:	08 f0       	brcs	.+2      	; 0x35d4 <twi_writeTo+0x8>
    35d2:	57 c0       	rjmp	.+174    	; 0x3682 <twi_writeTo+0xb6>
    35d4:	30 91 a4 07 	lds	r19, 0x07A4	; 0x8007a4 <twi_state>
    35d8:	31 11       	cpse	r19, r1
    35da:	fc cf       	rjmp	.-8      	; 0x35d4 <twi_writeTo+0x8>
    35dc:	92 e0       	ldi	r25, 0x02	; 2
    35de:	90 93 a4 07 	sts	0x07A4, r25	; 0x8007a4 <twi_state>
    35e2:	00 93 a2 07 	sts	0x07A2, r16	; 0x8007a2 <twi_sendStop>
    35e6:	9f ef       	ldi	r25, 0xFF	; 255
    35e8:	90 93 37 07 	sts	0x0737, r25	; 0x800737 <twi_error>
    35ec:	10 92 7c 07 	sts	0x077C, r1	; 0x80077c <twi_masterBufferIndex>
    35f0:	40 93 7b 07 	sts	0x077B, r20	; 0x80077b <twi_masterBufferLength>
    35f4:	44 23       	and	r20, r20
    35f6:	71 f0       	breq	.+28     	; 0x3614 <twi_writeTo+0x48>
    35f8:	fb 01       	movw	r30, r22
    35fa:	ad e7       	ldi	r26, 0x7D	; 125
    35fc:	b7 e0       	ldi	r27, 0x07	; 7
    35fe:	41 50       	subi	r20, 0x01	; 1
    3600:	50 e0       	ldi	r21, 0x00	; 0
    3602:	4f 5f       	subi	r20, 0xFF	; 255
    3604:	5f 4f       	sbci	r21, 0xFF	; 255
    3606:	64 0f       	add	r22, r20
    3608:	75 1f       	adc	r23, r21
    360a:	91 91       	ld	r25, Z+
    360c:	9d 93       	st	X+, r25
    360e:	e6 17       	cp	r30, r22
    3610:	f7 07       	cpc	r31, r23
    3612:	d9 f7       	brne	.-10     	; 0x360a <twi_writeTo+0x3e>
    3614:	10 92 a3 07 	sts	0x07A3, r1	; 0x8007a3 <twi_slarw>
    3618:	90 91 a3 07 	lds	r25, 0x07A3	; 0x8007a3 <twi_slarw>
    361c:	88 0f       	add	r24, r24
    361e:	89 2b       	or	r24, r25
    3620:	80 93 a3 07 	sts	0x07A3, r24	; 0x8007a3 <twi_slarw>
    3624:	80 91 a1 07 	lds	r24, 0x07A1	; 0x8007a1 <twi_inRepStart>
    3628:	81 30       	cpi	r24, 0x01	; 1
    362a:	81 f4       	brne	.+32     	; 0x364c <twi_writeTo+0x80>
    362c:	10 92 a1 07 	sts	0x07A1, r1	; 0x8007a1 <twi_inRepStart>
    3630:	ab eb       	ldi	r26, 0xBB	; 187
    3632:	b0 e0       	ldi	r27, 0x00	; 0
    3634:	ec eb       	ldi	r30, 0xBC	; 188
    3636:	f0 e0       	ldi	r31, 0x00	; 0
    3638:	80 91 a3 07 	lds	r24, 0x07A3	; 0x8007a3 <twi_slarw>
    363c:	8c 93       	st	X, r24
    363e:	80 81       	ld	r24, Z
    3640:	83 fd       	sbrc	r24, 3
    3642:	fa cf       	rjmp	.-12     	; 0x3638 <twi_writeTo+0x6c>
    3644:	85 ec       	ldi	r24, 0xC5	; 197
    3646:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    364a:	03 c0       	rjmp	.+6      	; 0x3652 <twi_writeTo+0x86>
    364c:	85 ee       	ldi	r24, 0xE5	; 229
    364e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3652:	22 23       	and	r18, r18
    3654:	41 f0       	breq	.+16     	; 0x3666 <twi_writeTo+0x9a>
    3656:	80 91 a4 07 	lds	r24, 0x07A4	; 0x8007a4 <twi_state>
    365a:	82 30       	cpi	r24, 0x02	; 2
    365c:	21 f4       	brne	.+8      	; 0x3666 <twi_writeTo+0x9a>
    365e:	80 91 a4 07 	lds	r24, 0x07A4	; 0x8007a4 <twi_state>
    3662:	82 30       	cpi	r24, 0x02	; 2
    3664:	e1 f3       	breq	.-8      	; 0x365e <twi_writeTo+0x92>
    3666:	80 91 37 07 	lds	r24, 0x0737	; 0x800737 <twi_error>
    366a:	8f 3f       	cpi	r24, 0xFF	; 255
    366c:	79 f0       	breq	.+30     	; 0x368c <twi_writeTo+0xc0>
    366e:	80 91 37 07 	lds	r24, 0x0737	; 0x800737 <twi_error>
    3672:	80 32       	cpi	r24, 0x20	; 32
    3674:	41 f0       	breq	.+16     	; 0x3686 <twi_writeTo+0xba>
    3676:	80 91 37 07 	lds	r24, 0x0737	; 0x800737 <twi_error>
    367a:	80 33       	cpi	r24, 0x30	; 48
    367c:	31 f0       	breq	.+12     	; 0x368a <twi_writeTo+0xbe>
    367e:	34 e0       	ldi	r19, 0x04	; 4
    3680:	05 c0       	rjmp	.+10     	; 0x368c <twi_writeTo+0xc0>
    3682:	31 e0       	ldi	r19, 0x01	; 1
    3684:	03 c0       	rjmp	.+6      	; 0x368c <twi_writeTo+0xc0>
    3686:	32 e0       	ldi	r19, 0x02	; 2
    3688:	01 c0       	rjmp	.+2      	; 0x368c <twi_writeTo+0xc0>
    368a:	33 e0       	ldi	r19, 0x03	; 3
    368c:	83 2f       	mov	r24, r19
    368e:	0f 91       	pop	r16
    3690:	08 95       	ret

00003692 <twi_transmit>:
    3692:	40 91 59 07 	lds	r20, 0x0759	; 0x800759 <twi_txBufferLength>
    3696:	26 2f       	mov	r18, r22
    3698:	30 e0       	ldi	r19, 0x00	; 0
    369a:	24 0f       	add	r18, r20
    369c:	31 1d       	adc	r19, r1
    369e:	21 32       	cpi	r18, 0x21	; 33
    36a0:	31 05       	cpc	r19, r1
    36a2:	ec f4       	brge	.+58     	; 0x36de <twi_transmit+0x4c>
    36a4:	20 91 a4 07 	lds	r18, 0x07A4	; 0x8007a4 <twi_state>
    36a8:	24 30       	cpi	r18, 0x04	; 4
    36aa:	d9 f4       	brne	.+54     	; 0x36e2 <twi_transmit+0x50>
    36ac:	66 23       	and	r22, r22
    36ae:	81 f0       	breq	.+32     	; 0x36d0 <twi_transmit+0x3e>
    36b0:	a8 2f       	mov	r26, r24
    36b2:	b9 2f       	mov	r27, r25
    36b4:	80 e0       	ldi	r24, 0x00	; 0
    36b6:	90 e0       	ldi	r25, 0x00	; 0
    36b8:	30 91 59 07 	lds	r19, 0x0759	; 0x800759 <twi_txBufferLength>
    36bc:	2d 91       	ld	r18, X+
    36be:	fc 01       	movw	r30, r24
    36c0:	e5 5a       	subi	r30, 0xA5	; 165
    36c2:	f8 4f       	sbci	r31, 0xF8	; 248
    36c4:	e3 0f       	add	r30, r19
    36c6:	f1 1d       	adc	r31, r1
    36c8:	20 83       	st	Z, r18
    36ca:	01 96       	adiw	r24, 0x01	; 1
    36cc:	86 17       	cp	r24, r22
    36ce:	a0 f3       	brcs	.-24     	; 0x36b8 <twi_transmit+0x26>
    36d0:	80 91 59 07 	lds	r24, 0x0759	; 0x800759 <twi_txBufferLength>
    36d4:	68 0f       	add	r22, r24
    36d6:	60 93 59 07 	sts	0x0759, r22	; 0x800759 <twi_txBufferLength>
    36da:	80 e0       	ldi	r24, 0x00	; 0
    36dc:	08 95       	ret
    36de:	81 e0       	ldi	r24, 0x01	; 1
    36e0:	08 95       	ret
    36e2:	82 e0       	ldi	r24, 0x02	; 2
    36e4:	08 95       	ret

000036e6 <twi_attachSlaveRxEvent>:
    36e6:	90 93 9e 07 	sts	0x079E, r25	; 0x80079e <twi_onSlaveReceive+0x1>
    36ea:	80 93 9d 07 	sts	0x079D, r24	; 0x80079d <twi_onSlaveReceive>
    36ee:	08 95       	ret

000036f0 <twi_attachSlaveTxEvent>:
    36f0:	90 93 a0 07 	sts	0x07A0, r25	; 0x8007a0 <twi_onSlaveTransmit+0x1>
    36f4:	80 93 9f 07 	sts	0x079F, r24	; 0x80079f <twi_onSlaveTransmit>
    36f8:	08 95       	ret

000036fa <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    36fa:	85 ed       	ldi	r24, 0xD5	; 213
    36fc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    3700:	ec eb       	ldi	r30, 0xBC	; 188
    3702:	f0 e0       	ldi	r31, 0x00	; 0
    3704:	80 81       	ld	r24, Z
    3706:	84 fd       	sbrc	r24, 4
    3708:	fd cf       	rjmp	.-6      	; 0x3704 <twi_stop+0xa>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    370a:	10 92 a4 07 	sts	0x07A4, r1	; 0x8007a4 <twi_state>
    370e:	08 95       	ret

00003710 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    3710:	85 ec       	ldi	r24, 0xC5	; 197
    3712:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // update twi state
  twi_state = TWI_READY;
    3716:	10 92 a4 07 	sts	0x07A4, r1	; 0x8007a4 <twi_state>
    371a:	08 95       	ret

0000371c <__vector_39>:
}

ISR(TWI_vect)
{
    371c:	1f 92       	push	r1
    371e:	0f 92       	push	r0
    3720:	0f b6       	in	r0, 0x3f	; 63
    3722:	0f 92       	push	r0
    3724:	11 24       	eor	r1, r1
    3726:	0b b6       	in	r0, 0x3b	; 59
    3728:	0f 92       	push	r0
    372a:	2f 93       	push	r18
    372c:	3f 93       	push	r19
    372e:	4f 93       	push	r20
    3730:	5f 93       	push	r21
    3732:	6f 93       	push	r22
    3734:	7f 93       	push	r23
    3736:	8f 93       	push	r24
    3738:	9f 93       	push	r25
    373a:	af 93       	push	r26
    373c:	bf 93       	push	r27
    373e:	ef 93       	push	r30
    3740:	ff 93       	push	r31
  switch(TW_STATUS){
    3742:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    3746:	88 7f       	andi	r24, 0xF8	; 248
    3748:	90 e0       	ldi	r25, 0x00	; 0
    374a:	89 3c       	cpi	r24, 0xC9	; 201
    374c:	91 05       	cpc	r25, r1
    374e:	08 f0       	brcs	.+2      	; 0x3752 <__vector_39+0x36>
    3750:	ef c0       	rjmp	.+478    	; 0x3930 <__vector_39+0x214>
    3752:	fc 01       	movw	r30, r24
    3754:	88 27       	eor	r24, r24
    3756:	ee 58       	subi	r30, 0x8E	; 142
    3758:	ff 4f       	sbci	r31, 0xFF	; 255
    375a:	8f 4f       	sbci	r24, 0xFF	; 255
    375c:	0c 94 b9 23 	jmp	0x4772	; 0x4772 <__tablejump2__>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    3760:	80 91 a3 07 	lds	r24, 0x07A3	; 0x8007a3 <twi_slarw>
    3764:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3768:	85 ec       	ldi	r24, 0xC5	; 197
    376a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    376e:	e0 c0       	rjmp	.+448    	; 0x3930 <__vector_39+0x214>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    3770:	90 91 7c 07 	lds	r25, 0x077C	; 0x80077c <twi_masterBufferIndex>
    3774:	80 91 7b 07 	lds	r24, 0x077B	; 0x80077b <twi_masterBufferLength>
    3778:	98 17       	cp	r25, r24
    377a:	80 f4       	brcc	.+32     	; 0x379c <__vector_39+0x80>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    377c:	e0 91 7c 07 	lds	r30, 0x077C	; 0x80077c <twi_masterBufferIndex>
    3780:	81 e0       	ldi	r24, 0x01	; 1
    3782:	8e 0f       	add	r24, r30
    3784:	80 93 7c 07 	sts	0x077C, r24	; 0x80077c <twi_masterBufferIndex>
    3788:	f0 e0       	ldi	r31, 0x00	; 0
    378a:	e3 58       	subi	r30, 0x83	; 131
    378c:	f8 4f       	sbci	r31, 0xF8	; 248
    378e:	80 81       	ld	r24, Z
    3790:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3794:	85 ec       	ldi	r24, 0xC5	; 197
    3796:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    379a:	ca c0       	rjmp	.+404    	; 0x3930 <__vector_39+0x214>
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
        twi_reply(1);
      }else{
	if (twi_sendStop)
    379c:	80 91 a2 07 	lds	r24, 0x07A2	; 0x8007a2 <twi_sendStop>
    37a0:	88 23       	and	r24, r24
    37a2:	11 f0       	breq	.+4      	; 0x37a8 <__vector_39+0x8c>
          twi_stop();
    37a4:	aa df       	rcall	.-172    	; 0x36fa <twi_stop>
    37a6:	c4 c0       	rjmp	.+392    	; 0x3930 <__vector_39+0x214>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    37a8:	81 e0       	ldi	r24, 0x01	; 1
    37aa:	80 93 a1 07 	sts	0x07A1, r24	; 0x8007a1 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    37ae:	84 ea       	ldi	r24, 0xA4	; 164
    37b0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	  twi_state = TWI_READY;
    37b4:	10 92 a4 07 	sts	0x07A4, r1	; 0x8007a4 <twi_state>
    37b8:	bb c0       	rjmp	.+374    	; 0x3930 <__vector_39+0x214>
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    37ba:	80 e2       	ldi	r24, 0x20	; 32
    37bc:	80 93 37 07 	sts	0x0737, r24	; 0x800737 <twi_error>
      twi_stop();
    37c0:	9c df       	rcall	.-200    	; 0x36fa <twi_stop>
      break;
    37c2:	b6 c0       	rjmp	.+364    	; 0x3930 <__vector_39+0x214>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    37c4:	80 e3       	ldi	r24, 0x30	; 48
    37c6:	80 93 37 07 	sts	0x0737, r24	; 0x800737 <twi_error>
      twi_stop();
    37ca:	97 df       	rcall	.-210    	; 0x36fa <twi_stop>
      break;
    37cc:	b1 c0       	rjmp	.+354    	; 0x3930 <__vector_39+0x214>
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    37ce:	88 e3       	ldi	r24, 0x38	; 56
    37d0:	80 93 37 07 	sts	0x0737, r24	; 0x800737 <twi_error>
      twi_releaseBus();
    37d4:	9d df       	rcall	.-198    	; 0x3710 <twi_releaseBus>
      break;
    37d6:	ac c0       	rjmp	.+344    	; 0x3930 <__vector_39+0x214>

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    37d8:	e0 91 7c 07 	lds	r30, 0x077C	; 0x80077c <twi_masterBufferIndex>
    37dc:	81 e0       	ldi	r24, 0x01	; 1
    37de:	8e 0f       	add	r24, r30
    37e0:	80 93 7c 07 	sts	0x077C, r24	; 0x80077c <twi_masterBufferIndex>
    37e4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    37e8:	f0 e0       	ldi	r31, 0x00	; 0
    37ea:	e3 58       	subi	r30, 0x83	; 131
    37ec:	f8 4f       	sbci	r31, 0xF8	; 248
    37ee:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    37f0:	90 91 7c 07 	lds	r25, 0x077C	; 0x80077c <twi_masterBufferIndex>
    37f4:	80 91 7b 07 	lds	r24, 0x077B	; 0x80077b <twi_masterBufferLength>
    37f8:	98 17       	cp	r25, r24
    37fa:	20 f4       	brcc	.+8      	; 0x3804 <__vector_39+0xe8>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    37fc:	85 ec       	ldi	r24, 0xC5	; 197
    37fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3802:	96 c0       	rjmp	.+300    	; 0x3930 <__vector_39+0x214>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3804:	85 e8       	ldi	r24, 0x85	; 133
    3806:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    380a:	92 c0       	rjmp	.+292    	; 0x3930 <__vector_39+0x214>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    380c:	e0 91 7c 07 	lds	r30, 0x077C	; 0x80077c <twi_masterBufferIndex>
    3810:	81 e0       	ldi	r24, 0x01	; 1
    3812:	8e 0f       	add	r24, r30
    3814:	80 93 7c 07 	sts	0x077C, r24	; 0x80077c <twi_masterBufferIndex>
    3818:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    381c:	f0 e0       	ldi	r31, 0x00	; 0
    381e:	e3 58       	subi	r30, 0x83	; 131
    3820:	f8 4f       	sbci	r31, 0xF8	; 248
    3822:	80 83       	st	Z, r24
	if (twi_sendStop)
    3824:	80 91 a2 07 	lds	r24, 0x07A2	; 0x8007a2 <twi_sendStop>
    3828:	88 23       	and	r24, r24
          twi_stop();
    382a:	11 f0       	breq	.+4      	; 0x3830 <__vector_39+0x114>
    382c:	66 df       	rcall	.-308    	; 0x36fa <twi_stop>
    382e:	80 c0       	rjmp	.+256    	; 0x3930 <__vector_39+0x214>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    3830:	81 e0       	ldi	r24, 0x01	; 1
    3832:	80 93 a1 07 	sts	0x07A1, r24	; 0x8007a1 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    3836:	84 ea       	ldi	r24, 0xA4	; 164
    3838:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	  twi_state = TWI_READY;
    383c:	10 92 a4 07 	sts	0x07A4, r1	; 0x8007a4 <twi_state>
	}    
	break;
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
    3840:	77 c0       	rjmp	.+238    	; 0x3930 <__vector_39+0x214>
    3842:	5b df       	rcall	.-330    	; 0x36fa <twi_stop>
      break;
    3844:	75 c0       	rjmp	.+234    	; 0x3930 <__vector_39+0x214>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    3846:	83 e0       	ldi	r24, 0x03	; 3
    3848:	80 93 a4 07 	sts	0x07A4, r24	; 0x8007a4 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    384c:	10 92 38 07 	sts	0x0738, r1	; 0x800738 <twi_rxBufferIndex>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3850:	85 ec       	ldi	r24, 0xC5	; 197
    3852:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3856:	6c c0       	rjmp	.+216    	; 0x3930 <__vector_39+0x214>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    3858:	80 91 38 07 	lds	r24, 0x0738	; 0x800738 <twi_rxBufferIndex>
    385c:	80 32       	cpi	r24, 0x20	; 32
    385e:	80 f4       	brcc	.+32     	; 0x3880 <__vector_39+0x164>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    3860:	e0 91 38 07 	lds	r30, 0x0738	; 0x800738 <twi_rxBufferIndex>
    3864:	81 e0       	ldi	r24, 0x01	; 1
    3866:	8e 0f       	add	r24, r30
    3868:	80 93 38 07 	sts	0x0738, r24	; 0x800738 <twi_rxBufferIndex>
    386c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    3870:	f0 e0       	ldi	r31, 0x00	; 0
    3872:	e7 5c       	subi	r30, 0xC7	; 199
    3874:	f8 4f       	sbci	r31, 0xF8	; 248
    3876:	80 83       	st	Z, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3878:	85 ec       	ldi	r24, 0xC5	; 197
    387a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    387e:	58 c0       	rjmp	.+176    	; 0x3930 <__vector_39+0x214>
    3880:	85 e8       	ldi	r24, 0x85	; 133
    3882:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    3886:	54 c0       	rjmp	.+168    	; 0x3930 <__vector_39+0x214>
    3888:	43 df       	rcall	.-378    	; 0x3710 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    388a:	80 91 38 07 	lds	r24, 0x0738	; 0x800738 <twi_rxBufferIndex>
    388e:	80 32       	cpi	r24, 0x20	; 32
    3890:	30 f4       	brcc	.+12     	; 0x389e <__vector_39+0x182>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    3892:	e0 91 38 07 	lds	r30, 0x0738	; 0x800738 <twi_rxBufferIndex>
    3896:	f0 e0       	ldi	r31, 0x00	; 0
    3898:	e7 5c       	subi	r30, 0xC7	; 199
    389a:	f8 4f       	sbci	r31, 0xF8	; 248
    389c:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    389e:	60 91 38 07 	lds	r22, 0x0738	; 0x800738 <twi_rxBufferIndex>
    38a2:	70 e0       	ldi	r23, 0x00	; 0
    38a4:	e0 91 9d 07 	lds	r30, 0x079D	; 0x80079d <twi_onSlaveReceive>
    38a8:	f0 91 9e 07 	lds	r31, 0x079E	; 0x80079e <twi_onSlaveReceive+0x1>
    38ac:	89 e3       	ldi	r24, 0x39	; 57
    38ae:	97 e0       	ldi	r25, 0x07	; 7
    38b0:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    38b2:	10 92 38 07 	sts	0x0738, r1	; 0x800738 <twi_rxBufferIndex>
      break;
    38b6:	3c c0       	rjmp	.+120    	; 0x3930 <__vector_39+0x214>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    38b8:	85 e8       	ldi	r24, 0x85	; 133
    38ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    38be:	38 c0       	rjmp	.+112    	; 0x3930 <__vector_39+0x214>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    38c0:	84 e0       	ldi	r24, 0x04	; 4
    38c2:	80 93 a4 07 	sts	0x07A4, r24	; 0x8007a4 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    38c6:	10 92 5a 07 	sts	0x075A, r1	; 0x80075a <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    38ca:	10 92 59 07 	sts	0x0759, r1	; 0x800759 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    38ce:	e0 91 9f 07 	lds	r30, 0x079F	; 0x80079f <twi_onSlaveTransmit>
    38d2:	f0 91 a0 07 	lds	r31, 0x07A0	; 0x8007a0 <twi_onSlaveTransmit+0x1>
    38d6:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    38d8:	80 91 59 07 	lds	r24, 0x0759	; 0x800759 <twi_txBufferLength>
    38dc:	81 11       	cpse	r24, r1
    38de:	05 c0       	rjmp	.+10     	; 0x38ea <__vector_39+0x1ce>
        twi_txBufferLength = 1;
    38e0:	81 e0       	ldi	r24, 0x01	; 1
    38e2:	80 93 59 07 	sts	0x0759, r24	; 0x800759 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    38e6:	10 92 5b 07 	sts	0x075B, r1	; 0x80075b <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    38ea:	e0 91 5a 07 	lds	r30, 0x075A	; 0x80075a <twi_txBufferIndex>
    38ee:	81 e0       	ldi	r24, 0x01	; 1
    38f0:	8e 0f       	add	r24, r30
    38f2:	80 93 5a 07 	sts	0x075A, r24	; 0x80075a <twi_txBufferIndex>
    38f6:	f0 e0       	ldi	r31, 0x00	; 0
    38f8:	e5 5a       	subi	r30, 0xA5	; 165
    38fa:	f8 4f       	sbci	r31, 0xF8	; 248
    38fc:	80 81       	ld	r24, Z
    38fe:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    3902:	90 91 5a 07 	lds	r25, 0x075A	; 0x80075a <twi_txBufferIndex>
    3906:	80 91 59 07 	lds	r24, 0x0759	; 0x800759 <twi_txBufferLength>
    390a:	98 17       	cp	r25, r24
    390c:	20 f4       	brcc	.+8      	; 0x3916 <__vector_39+0x1fa>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    390e:	85 ec       	ldi	r24, 0xC5	; 197
    3910:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3914:	0d c0       	rjmp	.+26     	; 0x3930 <__vector_39+0x214>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3916:	85 e8       	ldi	r24, 0x85	; 133
    3918:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    391c:	09 c0       	rjmp	.+18     	; 0x3930 <__vector_39+0x214>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    391e:	85 ec       	ldi	r24, 0xC5	; 197
    3920:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    3924:	10 92 a4 07 	sts	0x07A4, r1	; 0x8007a4 <twi_state>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    3928:	03 c0       	rjmp	.+6      	; 0x3930 <__vector_39+0x214>
    392a:	10 92 37 07 	sts	0x0737, r1	; 0x800737 <twi_error>
      twi_stop();
    392e:	e5 de       	rcall	.-566    	; 0x36fa <twi_stop>
      break;
  }
    3930:	ff 91       	pop	r31
    3932:	ef 91       	pop	r30
    3934:	bf 91       	pop	r27
    3936:	af 91       	pop	r26
    3938:	9f 91       	pop	r25
    393a:	8f 91       	pop	r24
    393c:	7f 91       	pop	r23
    393e:	6f 91       	pop	r22
    3940:	5f 91       	pop	r21
    3942:	4f 91       	pop	r20
    3944:	3f 91       	pop	r19
    3946:	2f 91       	pop	r18
    3948:	0f 90       	pop	r0
    394a:	0b be       	out	0x3b, r0	; 59
    394c:	0f 90       	pop	r0
    394e:	0f be       	out	0x3f, r0	; 63
    3950:	0f 90       	pop	r0
    3952:	1f 90       	pop	r1
    3954:	18 95       	reti

00003956 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
	user_onRequest = function;
    3956:	80 91 cf 07 	lds	r24, 0x07CF	; 0x8007cf <_ZN7TwoWire14rxBufferLengthE>
    395a:	90 e0       	ldi	r25, 0x00	; 0
    395c:	20 91 d0 07 	lds	r18, 0x07D0	; 0x8007d0 <_ZN7TwoWire13rxBufferIndexE>
    3960:	82 1b       	sub	r24, r18
    3962:	91 09       	sbc	r25, r1
    3964:	08 95       	ret

00003966 <_ZN7TwoWire4readEv>:
    3966:	90 91 d0 07 	lds	r25, 0x07D0	; 0x8007d0 <_ZN7TwoWire13rxBufferIndexE>
    396a:	80 91 cf 07 	lds	r24, 0x07CF	; 0x8007cf <_ZN7TwoWire14rxBufferLengthE>
    396e:	98 17       	cp	r25, r24
    3970:	50 f4       	brcc	.+20     	; 0x3986 <_ZN7TwoWire4readEv+0x20>
    3972:	e9 2f       	mov	r30, r25
    3974:	f0 e0       	ldi	r31, 0x00	; 0
    3976:	ef 52       	subi	r30, 0x2F	; 47
    3978:	f8 4f       	sbci	r31, 0xF8	; 248
    397a:	20 81       	ld	r18, Z
    397c:	30 e0       	ldi	r19, 0x00	; 0
    397e:	9f 5f       	subi	r25, 0xFF	; 255
    3980:	90 93 d0 07 	sts	0x07D0, r25	; 0x8007d0 <_ZN7TwoWire13rxBufferIndexE>
    3984:	02 c0       	rjmp	.+4      	; 0x398a <_ZN7TwoWire4readEv+0x24>
    3986:	2f ef       	ldi	r18, 0xFF	; 255
    3988:	3f ef       	ldi	r19, 0xFF	; 255
    398a:	c9 01       	movw	r24, r18
    398c:	08 95       	ret

0000398e <_ZN7TwoWire4peekEv>:
    398e:	e0 91 d0 07 	lds	r30, 0x07D0	; 0x8007d0 <_ZN7TwoWire13rxBufferIndexE>
    3992:	80 91 cf 07 	lds	r24, 0x07CF	; 0x8007cf <_ZN7TwoWire14rxBufferLengthE>
    3996:	e8 17       	cp	r30, r24
    3998:	30 f4       	brcc	.+12     	; 0x39a6 <_ZN7TwoWire4peekEv+0x18>
    399a:	f0 e0       	ldi	r31, 0x00	; 0
    399c:	ef 52       	subi	r30, 0x2F	; 47
    399e:	f8 4f       	sbci	r31, 0xF8	; 248
    39a0:	80 81       	ld	r24, Z
    39a2:	90 e0       	ldi	r25, 0x00	; 0
    39a4:	08 95       	ret
    39a6:	8f ef       	ldi	r24, 0xFF	; 255
    39a8:	9f ef       	ldi	r25, 0xFF	; 255
    39aa:	08 95       	ret

000039ac <_ZN7TwoWire5flushEv>:
    39ac:	08 95       	ret

000039ae <_ZN7TwoWire16onReceiveServiceEPhi>:
    39ae:	cf 93       	push	r28
    39b0:	df 93       	push	r29
    39b2:	ec 01       	movw	r28, r24
    39b4:	e0 91 a7 07 	lds	r30, 0x07A7	; 0x8007a7 <_ZN7TwoWire14user_onReceiveE>
    39b8:	f0 91 a8 07 	lds	r31, 0x07A8	; 0x8007a8 <_ZN7TwoWire14user_onReceiveE+0x1>
    39bc:	30 97       	sbiw	r30, 0x00	; 0
    39be:	01 f1       	breq	.+64     	; 0x3a00 <_ZN7TwoWire16onReceiveServiceEPhi+0x52>
    39c0:	90 91 d0 07 	lds	r25, 0x07D0	; 0x8007d0 <_ZN7TwoWire13rxBufferIndexE>
    39c4:	80 91 cf 07 	lds	r24, 0x07CF	; 0x8007cf <_ZN7TwoWire14rxBufferLengthE>
    39c8:	98 17       	cp	r25, r24
    39ca:	d0 f0       	brcs	.+52     	; 0x3a00 <_ZN7TwoWire16onReceiveServiceEPhi+0x52>
    39cc:	16 16       	cp	r1, r22
    39ce:	17 06       	cpc	r1, r23
    39d0:	8c f4       	brge	.+34     	; 0x39f4 <_ZN7TwoWire16onReceiveServiceEPhi+0x46>
    39d2:	20 e0       	ldi	r18, 0x00	; 0
    39d4:	30 e0       	ldi	r19, 0x00	; 0
    39d6:	90 e0       	ldi	r25, 0x00	; 0
    39d8:	de 01       	movw	r26, r28
    39da:	a9 0f       	add	r26, r25
    39dc:	b1 1d       	adc	r27, r1
    39de:	4c 91       	ld	r20, X
    39e0:	d9 01       	movw	r26, r18
    39e2:	af 52       	subi	r26, 0x2F	; 47
    39e4:	b8 4f       	sbci	r27, 0xF8	; 248
    39e6:	4c 93       	st	X, r20
    39e8:	9f 5f       	subi	r25, 0xFF	; 255
    39ea:	29 2f       	mov	r18, r25
    39ec:	30 e0       	ldi	r19, 0x00	; 0
    39ee:	26 17       	cp	r18, r22
    39f0:	37 07       	cpc	r19, r23
    39f2:	94 f3       	brlt	.-28     	; 0x39d8 <_ZN7TwoWire16onReceiveServiceEPhi+0x2a>
    39f4:	cb 01       	movw	r24, r22
    39f6:	10 92 d0 07 	sts	0x07D0, r1	; 0x8007d0 <_ZN7TwoWire13rxBufferIndexE>
    39fa:	60 93 cf 07 	sts	0x07CF, r22	; 0x8007cf <_ZN7TwoWire14rxBufferLengthE>
    39fe:	19 95       	eicall
    3a00:	df 91       	pop	r29
    3a02:	cf 91       	pop	r28
    3a04:	08 95       	ret

00003a06 <_ZN7TwoWire16onRequestServiceEv>:
    3a06:	e0 91 a9 07 	lds	r30, 0x07A9	; 0x8007a9 <_ZN7TwoWire14user_onRequestE>
    3a0a:	f0 91 aa 07 	lds	r31, 0x07AA	; 0x8007aa <_ZN7TwoWire14user_onRequestE+0x1>
    3a0e:	30 97       	sbiw	r30, 0x00	; 0
    3a10:	29 f0       	breq	.+10     	; 0x3a1c <_ZN7TwoWire16onRequestServiceEv+0x16>
    3a12:	10 92 ad 07 	sts	0x07AD, r1	; 0x8007ad <_ZN7TwoWire13txBufferIndexE>
    3a16:	10 92 ac 07 	sts	0x07AC, r1	; 0x8007ac <_ZN7TwoWire14txBufferLengthE>
    3a1a:	19 95       	eicall
    3a1c:	08 95       	ret

00003a1e <_ZN7TwoWire5writeEh>:
    3a1e:	cf 93       	push	r28
    3a20:	df 93       	push	r29
    3a22:	1f 92       	push	r1
    3a24:	cd b7       	in	r28, 0x3d	; 61
    3a26:	de b7       	in	r29, 0x3e	; 62
    3a28:	69 83       	std	Y+1, r22	; 0x01
    3a2a:	80 91 ab 07 	lds	r24, 0x07AB	; 0x8007ab <_ZN7TwoWire12transmittingE>
    3a2e:	88 23       	and	r24, r24
    3a30:	99 f0       	breq	.+38     	; 0x3a58 <_ZN7TwoWire5writeEh+0x3a>
    3a32:	80 91 ac 07 	lds	r24, 0x07AC	; 0x8007ac <_ZN7TwoWire14txBufferLengthE>
    3a36:	80 32       	cpi	r24, 0x20	; 32
    3a38:	b0 f4       	brcc	.+44     	; 0x3a66 <_ZN7TwoWire5writeEh+0x48>
    3a3a:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <_ZN7TwoWire13txBufferIndexE>
    3a3e:	e8 2f       	mov	r30, r24
    3a40:	f0 e0       	ldi	r31, 0x00	; 0
    3a42:	e2 55       	subi	r30, 0x52	; 82
    3a44:	f8 4f       	sbci	r31, 0xF8	; 248
    3a46:	60 83       	st	Z, r22
    3a48:	8f 5f       	subi	r24, 0xFF	; 255
    3a4a:	80 93 ad 07 	sts	0x07AD, r24	; 0x8007ad <_ZN7TwoWire13txBufferIndexE>
    3a4e:	80 93 ac 07 	sts	0x07AC, r24	; 0x8007ac <_ZN7TwoWire14txBufferLengthE>
    3a52:	81 e0       	ldi	r24, 0x01	; 1
    3a54:	90 e0       	ldi	r25, 0x00	; 0
    3a56:	09 c0       	rjmp	.+18     	; 0x3a6a <_ZN7TwoWire5writeEh+0x4c>
    3a58:	61 e0       	ldi	r22, 0x01	; 1
    3a5a:	ce 01       	movw	r24, r28
    3a5c:	01 96       	adiw	r24, 0x01	; 1
    3a5e:	19 de       	rcall	.-974    	; 0x3692 <twi_transmit>
    3a60:	81 e0       	ldi	r24, 0x01	; 1
    3a62:	90 e0       	ldi	r25, 0x00	; 0
    3a64:	02 c0       	rjmp	.+4      	; 0x3a6a <_ZN7TwoWire5writeEh+0x4c>
    3a66:	80 e0       	ldi	r24, 0x00	; 0
    3a68:	90 e0       	ldi	r25, 0x00	; 0
    3a6a:	0f 90       	pop	r0
    3a6c:	df 91       	pop	r29
    3a6e:	cf 91       	pop	r28
    3a70:	08 95       	ret

00003a72 <_ZN7TwoWire5writeEPKhj>:
    3a72:	cf 92       	push	r12
    3a74:	df 92       	push	r13
    3a76:	ef 92       	push	r14
    3a78:	ff 92       	push	r15
    3a7a:	0f 93       	push	r16
    3a7c:	1f 93       	push	r17
    3a7e:	cf 93       	push	r28
    3a80:	df 93       	push	r29
    3a82:	8c 01       	movw	r16, r24
    3a84:	cb 01       	movw	r24, r22
    3a86:	6a 01       	movw	r12, r20
    3a88:	20 91 ab 07 	lds	r18, 0x07AB	; 0x8007ab <_ZN7TwoWire12transmittingE>
    3a8c:	22 23       	and	r18, r18
    3a8e:	a1 f0       	breq	.+40     	; 0x3ab8 <_ZN7TwoWire5writeEPKhj+0x46>
    3a90:	41 15       	cp	r20, r1
    3a92:	51 05       	cpc	r21, r1
    3a94:	99 f0       	breq	.+38     	; 0x3abc <_ZN7TwoWire5writeEPKhj+0x4a>
    3a96:	eb 01       	movw	r28, r22
    3a98:	7b 01       	movw	r14, r22
    3a9a:	e4 0e       	add	r14, r20
    3a9c:	f5 1e       	adc	r15, r21
    3a9e:	69 91       	ld	r22, Y+
    3aa0:	d8 01       	movw	r26, r16
    3aa2:	ed 91       	ld	r30, X+
    3aa4:	fc 91       	ld	r31, X
    3aa6:	01 90       	ld	r0, Z+
    3aa8:	f0 81       	ld	r31, Z
    3aaa:	e0 2d       	mov	r30, r0
    3aac:	c8 01       	movw	r24, r16
    3aae:	19 95       	eicall
    3ab0:	ce 15       	cp	r28, r14
    3ab2:	df 05       	cpc	r29, r15
    3ab4:	a1 f7       	brne	.-24     	; 0x3a9e <_ZN7TwoWire5writeEPKhj+0x2c>
    3ab6:	02 c0       	rjmp	.+4      	; 0x3abc <_ZN7TwoWire5writeEPKhj+0x4a>
    3ab8:	64 2f       	mov	r22, r20
    3aba:	eb dd       	rcall	.-1066   	; 0x3692 <twi_transmit>
    3abc:	c6 01       	movw	r24, r12
    3abe:	df 91       	pop	r29
    3ac0:	cf 91       	pop	r28
    3ac2:	1f 91       	pop	r17
    3ac4:	0f 91       	pop	r16
    3ac6:	ff 90       	pop	r15
    3ac8:	ef 90       	pop	r14
    3aca:	df 90       	pop	r13
    3acc:	cf 90       	pop	r12
    3ace:	08 95       	ret

00003ad0 <_ZN7TwoWire5beginEv>:
    3ad0:	10 92 d0 07 	sts	0x07D0, r1	; 0x8007d0 <_ZN7TwoWire13rxBufferIndexE>
    3ad4:	10 92 cf 07 	sts	0x07CF, r1	; 0x8007cf <_ZN7TwoWire14rxBufferLengthE>
    3ad8:	10 92 ad 07 	sts	0x07AD, r1	; 0x8007ad <_ZN7TwoWire13txBufferIndexE>
    3adc:	10 92 ac 07 	sts	0x07AC, r1	; 0x8007ac <_ZN7TwoWire14txBufferLengthE>
    3ae0:	0a dd       	rcall	.-1516   	; 0x34f6 <twi_init>
    3ae2:	83 e0       	ldi	r24, 0x03	; 3
    3ae4:	9d e1       	ldi	r25, 0x1D	; 29
    3ae6:	04 de       	rcall	.-1016   	; 0x36f0 <twi_attachSlaveTxEvent>
    3ae8:	87 ed       	ldi	r24, 0xD7	; 215
    3aea:	9c e1       	ldi	r25, 0x1C	; 28
    3aec:	fc cd       	rjmp	.-1032   	; 0x36e6 <twi_attachSlaveRxEvent>
    3aee:	08 95       	ret

00003af0 <_ZN7TwoWire17beginTransmissionEh>:
    3af0:	81 e0       	ldi	r24, 0x01	; 1
    3af2:	80 93 ab 07 	sts	0x07AB, r24	; 0x8007ab <_ZN7TwoWire12transmittingE>
    3af6:	60 93 ce 07 	sts	0x07CE, r22	; 0x8007ce <_ZN7TwoWire9txAddressE>
    3afa:	10 92 ad 07 	sts	0x07AD, r1	; 0x8007ad <_ZN7TwoWire13txBufferIndexE>
    3afe:	10 92 ac 07 	sts	0x07AC, r1	; 0x8007ac <_ZN7TwoWire14txBufferLengthE>
    3b02:	08 95       	ret

00003b04 <_ZN7TwoWire17beginTransmissionEi>:
    3b04:	f5 cf       	rjmp	.-22     	; 0x3af0 <_ZN7TwoWire17beginTransmissionEh>
    3b06:	08 95       	ret

00003b08 <_ZN7TwoWire15endTransmissionEh>:
    3b08:	0f 93       	push	r16
    3b0a:	06 2f       	mov	r16, r22
    3b0c:	21 e0       	ldi	r18, 0x01	; 1
    3b0e:	40 91 ac 07 	lds	r20, 0x07AC	; 0x8007ac <_ZN7TwoWire14txBufferLengthE>
    3b12:	6e ea       	ldi	r22, 0xAE	; 174
    3b14:	77 e0       	ldi	r23, 0x07	; 7
    3b16:	80 91 ce 07 	lds	r24, 0x07CE	; 0x8007ce <_ZN7TwoWire9txAddressE>
    3b1a:	58 dd       	rcall	.-1360   	; 0x35cc <twi_writeTo>
    3b1c:	10 92 ad 07 	sts	0x07AD, r1	; 0x8007ad <_ZN7TwoWire13txBufferIndexE>
    3b20:	10 92 ac 07 	sts	0x07AC, r1	; 0x8007ac <_ZN7TwoWire14txBufferLengthE>
    3b24:	10 92 ab 07 	sts	0x07AB, r1	; 0x8007ab <_ZN7TwoWire12transmittingE>
    3b28:	0f 91       	pop	r16
    3b2a:	08 95       	ret

00003b2c <_ZN7TwoWire11requestFromEhhmhh>:
    3b2c:	4f 92       	push	r4
    3b2e:	5f 92       	push	r5
    3b30:	6f 92       	push	r6
    3b32:	7f 92       	push	r7
    3b34:	af 92       	push	r10
    3b36:	bf 92       	push	r11
    3b38:	cf 92       	push	r12
    3b3a:	ef 92       	push	r14
    3b3c:	ff 92       	push	r15
    3b3e:	0f 93       	push	r16
    3b40:	1f 93       	push	r17
    3b42:	cf 93       	push	r28
    3b44:	df 93       	push	r29
    3b46:	5c 01       	movw	r10, r24
    3b48:	f6 2e       	mov	r15, r22
    3b4a:	d4 2f       	mov	r29, r20
    3b4c:	28 01       	movw	r4, r16
    3b4e:	39 01       	movw	r6, r18
    3b50:	ee 20       	and	r14, r14
    3b52:	39 f1       	breq	.+78     	; 0x3ba2 <_ZN7TwoWire11requestFromEhhmhh+0x76>
    3b54:	cd df       	rcall	.-102    	; 0x3af0 <_ZN7TwoWire17beginTransmissionEh>
    3b56:	8e 2d       	mov	r24, r14
    3b58:	84 30       	cpi	r24, 0x04	; 4
    3b5a:	08 f0       	brcs	.+2      	; 0x3b5e <_ZN7TwoWire11requestFromEhhmhh+0x32>
    3b5c:	83 e0       	ldi	r24, 0x03	; 3
    3b5e:	cf ef       	ldi	r28, 0xFF	; 255
    3b60:	c8 0f       	add	r28, r24
    3b62:	88 23       	and	r24, r24
    3b64:	d9 f0       	breq	.+54     	; 0x3b9c <_ZN7TwoWire11requestFromEhhmhh+0x70>
    3b66:	8c 2f       	mov	r24, r28
    3b68:	88 0f       	add	r24, r24
    3b6a:	88 0f       	add	r24, r24
    3b6c:	88 0f       	add	r24, r24
    3b6e:	a3 01       	movw	r20, r6
    3b70:	92 01       	movw	r18, r4
    3b72:	04 c0       	rjmp	.+8      	; 0x3b7c <_ZN7TwoWire11requestFromEhhmhh+0x50>
    3b74:	56 95       	lsr	r21
    3b76:	47 95       	ror	r20
    3b78:	37 95       	ror	r19
    3b7a:	27 95       	ror	r18
    3b7c:	8a 95       	dec	r24
    3b7e:	d2 f7       	brpl	.-12     	; 0x3b74 <_ZN7TwoWire11requestFromEhhmhh+0x48>
    3b80:	ca 01       	movw	r24, r20
    3b82:	b9 01       	movw	r22, r18
    3b84:	d5 01       	movw	r26, r10
    3b86:	ed 91       	ld	r30, X+
    3b88:	fc 91       	ld	r31, X
    3b8a:	01 90       	ld	r0, Z+
    3b8c:	f0 81       	ld	r31, Z
    3b8e:	e0 2d       	mov	r30, r0
    3b90:	c5 01       	movw	r24, r10
    3b92:	19 95       	eicall
    3b94:	8c 2f       	mov	r24, r28
    3b96:	c1 50       	subi	r28, 0x01	; 1
    3b98:	81 11       	cpse	r24, r1
    3b9a:	e5 cf       	rjmp	.-54     	; 0x3b66 <_ZN7TwoWire11requestFromEhhmhh+0x3a>
    3b9c:	60 e0       	ldi	r22, 0x00	; 0
    3b9e:	c5 01       	movw	r24, r10
    3ba0:	b3 df       	rcall	.-154    	; 0x3b08 <_ZN7TwoWire15endTransmissionEh>
    3ba2:	4d 2f       	mov	r20, r29
    3ba4:	d1 32       	cpi	r29, 0x21	; 33
    3ba6:	08 f0       	brcs	.+2      	; 0x3baa <_ZN7TwoWire11requestFromEhhmhh+0x7e>
    3ba8:	40 e2       	ldi	r20, 0x20	; 32
    3baa:	2c 2d       	mov	r18, r12
    3bac:	61 ed       	ldi	r22, 0xD1	; 209
    3bae:	77 e0       	ldi	r23, 0x07	; 7
    3bb0:	8f 2d       	mov	r24, r15
    3bb2:	ba dc       	rcall	.-1676   	; 0x3528 <twi_readFrom>
    3bb4:	10 92 d0 07 	sts	0x07D0, r1	; 0x8007d0 <_ZN7TwoWire13rxBufferIndexE>
    3bb8:	80 93 cf 07 	sts	0x07CF, r24	; 0x8007cf <_ZN7TwoWire14rxBufferLengthE>
    3bbc:	df 91       	pop	r29
    3bbe:	cf 91       	pop	r28
    3bc0:	1f 91       	pop	r17
    3bc2:	0f 91       	pop	r16
    3bc4:	ff 90       	pop	r15
    3bc6:	ef 90       	pop	r14
    3bc8:	cf 90       	pop	r12
    3bca:	bf 90       	pop	r11
    3bcc:	af 90       	pop	r10
    3bce:	7f 90       	pop	r7
    3bd0:	6f 90       	pop	r6
    3bd2:	5f 90       	pop	r5
    3bd4:	4f 90       	pop	r4
    3bd6:	08 95       	ret

00003bd8 <_ZN7TwoWire11requestFromEhhh>:
    3bd8:	cf 92       	push	r12
    3bda:	ef 92       	push	r14
    3bdc:	0f 93       	push	r16
    3bde:	1f 93       	push	r17
    3be0:	c2 2e       	mov	r12, r18
    3be2:	e1 2c       	mov	r14, r1
    3be4:	00 e0       	ldi	r16, 0x00	; 0
    3be6:	10 e0       	ldi	r17, 0x00	; 0
    3be8:	98 01       	movw	r18, r16
    3bea:	a0 df       	rcall	.-192    	; 0x3b2c <_ZN7TwoWire11requestFromEhhmhh>
    3bec:	1f 91       	pop	r17
    3bee:	0f 91       	pop	r16
    3bf0:	ef 90       	pop	r14
    3bf2:	cf 90       	pop	r12
    3bf4:	08 95       	ret

00003bf6 <_ZN7TwoWire11requestFromEhh>:
    3bf6:	21 e0       	ldi	r18, 0x01	; 1
    3bf8:	ef cf       	rjmp	.-34     	; 0x3bd8 <_ZN7TwoWire11requestFromEhhh>
    3bfa:	08 95       	ret

00003bfc <_ZN7TwoWire11requestFromEii>:
    3bfc:	21 e0       	ldi	r18, 0x01	; 1
    3bfe:	ec cf       	rjmp	.-40     	; 0x3bd8 <_ZN7TwoWire11requestFromEhhh>
    3c00:	08 95       	ret

00003c02 <_ZN7TwoWire15endTransmissionEv>:
    3c02:	61 e0       	ldi	r22, 0x01	; 1
    3c04:	81 cf       	rjmp	.-254    	; 0x3b08 <_ZN7TwoWire15endTransmissionEh>
    3c06:	08 95       	ret

00003c08 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    3c08:	85 e1       	ldi	r24, 0x15	; 21
    3c0a:	93 e0       	ldi	r25, 0x03	; 3
    3c0c:	90 93 a6 07 	sts	0x07A6, r25	; 0x8007a6 <Wire+0x1>
    3c10:	80 93 a5 07 	sts	0x07A5, r24	; 0x8007a5 <Wire>
    3c14:	08 95       	ret

00003c16 <_ZN9IReadable15CommandReceivedEhPKhh>:
#include "EtherComm.h"

class IReadable : public IDevice {
public:
	void CommandReceived(uint8_t id, const uint8_t* data, uint8_t len){
		if(len == 0){
    3c16:	21 11       	cpse	r18, r1
    3c18:	0d c0       	rjmp	.+26     	; 0x3c34 <_ZN9IReadable15CommandReceivedEhPKhh+0x1e>
			ReadRegisterRequested(id, EtherComm::buffer + 3);
    3c1a:	40 91 00 02 	lds	r20, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    3c1e:	50 91 01 02 	lds	r21, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    3c22:	4d 5f       	subi	r20, 0xFD	; 253
    3c24:	5f 4f       	sbci	r21, 0xFF	; 255
    3c26:	dc 01       	movw	r26, r24
    3c28:	ed 91       	ld	r30, X+
    3c2a:	fc 91       	ld	r31, X
    3c2c:	06 80       	ldd	r0, Z+6	; 0x06
    3c2e:	f7 81       	ldd	r31, Z+7	; 0x07
    3c30:	e0 2d       	mov	r30, r0
    3c32:	19 95       	eicall
    3c34:	08 95       	ret

00003c36 <_ZN13DigitalSensor6UpdateEPh>:
	
	bool begin(){ //override
		return rov.RegisterDevice(_id, this);
	}
	
	void Update(uint8_t* buffer) { //override
    3c36:	08 95       	ret

00003c38 <_ZN13DigitalSensor21ReadRegisterRequestedEhPh>:
	void ReadRegisterRequested(uint8_t id, uint8_t* buffer) { //override
		/*Serial.print("My id: ");
		Serial.print(_id);
		Serial.print("    Reg id: ");
		Serial.println(id);*/
		if(id == _id){
    3c38:	dc 01       	movw	r26, r24
    3c3a:	12 96       	adiw	r26, 0x02	; 2
    3c3c:	2c 91       	ld	r18, X
    3c3e:	12 97       	sbiw	r26, 0x02	; 2
    3c40:	26 13       	cpse	r18, r22
    3c42:	1a c0       	rjmp	.+52     	; 0x3c78 <_ZN13DigitalSensor21ReadRegisterRequestedEhPh+0x40>
			buffer[0] = ((*pinPort & pin) > 0) ^ inversed;
    3c44:	14 96       	adiw	r26, 0x04	; 4
    3c46:	ed 91       	ld	r30, X+
    3c48:	fc 91       	ld	r31, X
    3c4a:	15 97       	sbiw	r26, 0x05	; 5
    3c4c:	60 81       	ld	r22, Z
    3c4e:	13 96       	adiw	r26, 0x03	; 3
    3c50:	3c 91       	ld	r19, X
    3c52:	36 23       	and	r19, r22
    3c54:	61 e0       	ldi	r22, 0x01	; 1
    3c56:	09 f4       	brne	.+2      	; 0x3c5a <_ZN13DigitalSensor21ReadRegisterRequestedEhPh+0x22>
    3c58:	60 e0       	ldi	r22, 0x00	; 0
    3c5a:	fa 01       	movw	r30, r20
    3c5c:	dc 01       	movw	r26, r24
    3c5e:	16 96       	adiw	r26, 0x06	; 6
    3c60:	8c 91       	ld	r24, X
    3c62:	86 27       	eor	r24, r22
    3c64:	80 83       	st	Z, r24
	virtual void CommandReceived(uint8_t id, const uint8_t* data, uint8_t len) = 0;
	virtual void Update(uint8_t* buffer) = 0;
	
protected:
	void inline SendCommand(uint8_t id, uint8_t len){
		EtherComm::buffer[2] = id;
    3c66:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    3c6a:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    3c6e:	22 83       	std	Z+2, r18	; 0x02
		EtherComm::SendCommand(CMD_UpdateDevice, len + 1);
    3c70:	62 e0       	ldi	r22, 0x02	; 2
    3c72:	83 e0       	ldi	r24, 0x03	; 3
    3c74:	0c 94 a4 0b 	jmp	0x1748	; 0x1748 <_ZN9EtherComm11SendCommandEhh>
    3c78:	08 95       	ret

00003c7a <_ZN5Robot14RegisterDeviceEhP7IDevice>:
	return true;
}


bool Robot::RegisterDevice(uint8_t id, IDevice* device){
	if(registers[id] == NULL){
    3c7a:	90 e0       	ldi	r25, 0x00	; 0
    3c7c:	fc 01       	movw	r30, r24
    3c7e:	ee 0f       	add	r30, r30
    3c80:	ff 1f       	adc	r31, r31
    3c82:	e9 5f       	subi	r30, 0xF9	; 249
    3c84:	f7 4f       	sbci	r31, 0xF7	; 247
    3c86:	20 81       	ld	r18, Z
    3c88:	31 81       	ldd	r19, Z+1	; 0x01
    3c8a:	23 2b       	or	r18, r19
    3c8c:	49 f4       	brne	.+18     	; 0x3ca0 <_ZN5Robot14RegisterDeviceEhP7IDevice+0x26>
		//if(sensor.begin()){
		registers[id] = device; //TODO error handling
    3c8e:	88 0f       	add	r24, r24
    3c90:	99 1f       	adc	r25, r25
    3c92:	fc 01       	movw	r30, r24
    3c94:	e9 5f       	subi	r30, 0xF9	; 249
    3c96:	f7 4f       	sbci	r31, 0xF7	; 247
    3c98:	71 83       	std	Z+1, r23	; 0x01
    3c9a:	60 83       	st	Z, r22
		//}
		return true;
    3c9c:	81 e0       	ldi	r24, 0x01	; 1
    3c9e:	08 95       	ret
	}else{
		//TODO id collisions
		return false;
    3ca0:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    3ca2:	08 95       	ret

00003ca4 <_ZN13DigitalSensor5beginEv>:
		rov.RegisterDevice(0, this);
		//TODO move to begin?
	}
	
	bool begin(){ //override
		return rov.RegisterDevice(_id, this);
    3ca4:	bc 01       	movw	r22, r24
    3ca6:	fc 01       	movw	r30, r24
    3ca8:	82 81       	ldd	r24, Z+2	; 0x02
    3caa:	e7 cf       	rjmp	.-50     	; 0x3c7a <_ZN5Robot14RegisterDeviceEhP7IDevice>
	}
    3cac:	08 95       	ret

00003cae <_ZN5Robot15CommandReceivedEPKhh>:
	for(uint8_t i = 0; i < len; i++){
		Serial.print(' ');
		Serial.print(data[i], HEX);
	}
	Serial.println();*/
	if(len >= 1){
    3cae:	66 23       	and	r22, r22
    3cb0:	d1 f0       	breq	.+52     	; 0x3ce6 <_ZN5Robot15CommandReceivedEPKhh+0x38>
		if(registers[data[0]] != NULL){
    3cb2:	fc 01       	movw	r30, r24
    3cb4:	30 81       	ld	r19, Z
    3cb6:	e3 2f       	mov	r30, r19
    3cb8:	f0 e0       	ldi	r31, 0x00	; 0
    3cba:	ee 0f       	add	r30, r30
    3cbc:	ff 1f       	adc	r31, r31
    3cbe:	e9 5f       	subi	r30, 0xF9	; 249
    3cc0:	f7 4f       	sbci	r31, 0xF7	; 247
    3cc2:	a0 81       	ld	r26, Z
    3cc4:	b1 81       	ldd	r27, Z+1	; 0x01
    3cc6:	10 97       	sbiw	r26, 0x00	; 0
    3cc8:	71 f0       	breq	.+28     	; 0x3ce6 <_ZN5Robot15CommandReceivedEPKhh+0x38>
    3cca:	26 2f       	mov	r18, r22
    3ccc:	ac 01       	movw	r20, r24
			registers[data[0]]->CommandReceived(data[0], data + 1, len - 1);
    3cce:	21 50       	subi	r18, 0x01	; 1
    3cd0:	4f 5f       	subi	r20, 0xFF	; 255
    3cd2:	5f 4f       	sbci	r21, 0xFF	; 255
    3cd4:	ed 91       	ld	r30, X+
    3cd6:	fc 91       	ld	r31, X
    3cd8:	11 97       	sbiw	r26, 0x01	; 1
    3cda:	02 80       	ldd	r0, Z+2	; 0x02
    3cdc:	f3 81       	ldd	r31, Z+3	; 0x03
    3cde:	e0 2d       	mov	r30, r0
    3ce0:	63 2f       	mov	r22, r19
    3ce2:	cd 01       	movw	r24, r26
    3ce4:	19 95       	eicall
    3ce6:	08 95       	ret

00003ce8 <_GLOBAL__sub_I__ZN5Robot9registersE>:

#include "../IReadable.h"

class DigitalSensor : public IReadable {
public:
	DigitalSensor(const uint8_t ID, Register& DDRPort, Register& PortPort, Register& PinPort, uint8_t Pin, bool Inversed = true) : _id(ID), pin(Pin), pinPort(&PinPort), inversed(Inversed) {
    3ce8:	e0 e0       	ldi	r30, 0x00	; 0
    3cea:	f8 e0       	ldi	r31, 0x08	; 8
    3cec:	87 e2       	ldi	r24, 0x27	; 39
    3cee:	93 e0       	ldi	r25, 0x03	; 3
    3cf0:	91 83       	std	Z+1, r25	; 0x01
    3cf2:	80 83       	st	Z, r24
    3cf4:	12 82       	std	Z+2, r1	; 0x02
    3cf6:	82 e0       	ldi	r24, 0x02	; 2
    3cf8:	83 83       	std	Z+3, r24	; 0x03
    3cfa:	81 e3       	ldi	r24, 0x31	; 49
    3cfc:	90 e0       	ldi	r25, 0x00	; 0
    3cfe:	95 83       	std	Z+5, r25	; 0x05
    3d00:	84 83       	std	Z+4, r24	; 0x04
    3d02:	81 e0       	ldi	r24, 0x01	; 1
    3d04:	86 83       	std	Z+6, r24	; 0x06
		DDRPort &= ~pin; //Enable input
    3d06:	81 98       	cbi	0x10, 1	; 16
		PortPort |= pin; //Enable pullup
    3d08:	89 9a       	sbi	0x11, 1	; 17
		rov.RegisterDevice(0, this);
    3d0a:	bf 01       	movw	r22, r30
    3d0c:	80 e0       	ldi	r24, 0x00	; 0
    3d0e:	b5 df       	rcall	.-150    	; 0x3c7a <_ZN5Robot14RegisterDeviceEhP7IDevice>
#define ID_TEST_BUTTON 0
#define ID_IMU_TEMPERATURE 1
#define ID_IMU_ACCELEROMETER 2

DigitalSensor BtnTest(0, DDR_BTN0, PORT_BTN0, PIN_BTN0, MASK_BTN0);
ImuSensor Imu(1, 2);
    3d10:	42 e0       	ldi	r20, 0x02	; 2
    3d12:	61 e0       	ldi	r22, 0x01	; 1
    3d14:	81 ef       	ldi	r24, 0xF1	; 241
    3d16:	97 e0       	ldi	r25, 0x07	; 7
    3d18:	d6 c0       	rjmp	.+428    	; 0x3ec6 <_ZN9ImuSensorC1Ehh>
    3d1a:	08 95       	ret

00003d1c <_ZN5Robot5beginEv>:
	RegisterDevice(Imu);
	
	return true;
}*/

bool Robot::begin(){
    3d1c:	e7 e0       	ldi	r30, 0x07	; 7
    3d1e:	f8 e0       	ldi	r31, 0x08	; 8
    3d20:	87 e0       	ldi	r24, 0x07	; 7
    3d22:	9a e0       	ldi	r25, 0x0A	; 10
	for(uint16_t i = 0; i < NUM_DEVICES; i++){
		registers[i] = NULL;
    3d24:	11 92       	st	Z+, r1
    3d26:	11 92       	st	Z+, r1
	
	return true;
}*/

bool Robot::begin(){
	for(uint16_t i = 0; i < NUM_DEVICES; i++){
    3d28:	e8 17       	cp	r30, r24
    3d2a:	f9 07       	cpc	r31, r25
    3d2c:	d9 f7       	brne	.-10     	; 0x3d24 <_ZN5Robot5beginEv+0x8>
		//TODO move to begin?
	}
	
	bool begin(){ //override
		return rov.RegisterDevice(_id, this);
    3d2e:	60 e0       	ldi	r22, 0x00	; 0
    3d30:	78 e0       	ldi	r23, 0x08	; 8
    3d32:	80 91 02 08 	lds	r24, 0x0802	; 0x800802 <BtnTest+0x2>
    3d36:	a1 df       	rcall	.-190    	; 0x3c7a <_ZN5Robot14RegisterDeviceEhP7IDevice>
		registers[i] = NULL;
	}
	
	//LedDDR |= LedPin;
	BtnTest.begin();
	Imu.begin();
    3d38:	81 ef       	ldi	r24, 0xF1	; 241
    3d3a:	97 e0       	ldi	r25, 0x07	; 7
    3d3c:	0d d0       	rcall	.+26     	; 0x3d58 <_ZN9ImuSensor5beginEv>
	return true;
}
    3d3e:	81 e0       	ldi	r24, 0x01	; 1
    3d40:	08 95       	ret

00003d42 <_ZN5Robot4LoopEv>:
bool Robot::ReadTestBtn(){ //TODO remove
	return !((TestBtnPinPort & TestBtnPin) > 0);
}*/

void Robot::Loop(){
	Imu.Update(EtherComm::buffer + 3);
    3d42:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    3d46:	70 91 01 02 	lds	r23, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    3d4a:	6d 5f       	subi	r22, 0xFD	; 253
    3d4c:	7f 4f       	sbci	r23, 0xFF	; 255
    3d4e:	81 ef       	ldi	r24, 0xF1	; 241
    3d50:	97 e0       	ldi	r25, 0x07	; 7
    3d52:	01 c0       	rjmp	.+2      	; 0x3d56 <_ZN9ImuSensor6UpdateEPh>
    3d54:	08 95       	ret

00003d56 <_ZN9ImuSensor6UpdateEPh>:
		rov.RegisterDevice(tempId, this)
		&& rov.RegisterDevice(accelId, this)
		&& imu.begin();
}

void ImuSensor::Update(uint8_t* buffer){
    3d56:	08 95       	ret

00003d58 <_ZN9ImuSensor5beginEv>:

ImuSensor::ImuSensor(const uint8_t TempId, const uint8_t AccelId) : imu(55, 0x28), tempId(TempId), accelId(AccelId) {
	
}

bool ImuSensor::begin(){
    3d58:	cf 93       	push	r28
    3d5a:	df 93       	push	r29
    3d5c:	ec 01       	movw	r28, r24
	return 
		rov.RegisterDevice(tempId, this)
    3d5e:	bc 01       	movw	r22, r24
    3d60:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d62:	8b df       	rcall	.-234    	; 0x3c7a <_ZN5Robot14RegisterDeviceEhP7IDevice>
		&& rov.RegisterDevice(accelId, this)
		&& imu.begin();
    3d64:	88 23       	and	r24, r24
    3d66:	51 f0       	breq	.+20     	; 0x3d7c <_ZN9ImuSensor5beginEv+0x24>
}

bool ImuSensor::begin(){
	return 
		rov.RegisterDevice(tempId, this)
		&& rov.RegisterDevice(accelId, this)
    3d68:	be 01       	movw	r22, r28
    3d6a:	8e 85       	ldd	r24, Y+14	; 0x0e
    3d6c:	86 df       	rcall	.-244    	; 0x3c7a <_ZN5Robot14RegisterDeviceEhP7IDevice>
    3d6e:	88 23       	and	r24, r24
    3d70:	29 f0       	breq	.+10     	; 0x3d7c <_ZN9ImuSensor5beginEv+0x24>
		&& imu.begin();
    3d72:	6c e0       	ldi	r22, 0x0C	; 12
    3d74:	ce 01       	movw	r24, r28
    3d76:	02 96       	adiw	r24, 0x02	; 2
    3d78:	0e 94 3d 02 	call	0x47a	; 0x47a <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>
}
    3d7c:	df 91       	pop	r29
    3d7e:	cf 91       	pop	r28
    3d80:	08 95       	ret

00003d82 <_ZN9ImuSensor21ReadRegisterRequestedEhPh>:
	*buffer++ = *val++;
}

AdafruitImu::Vector<3> vector;

void ImuSensor::ReadRegisterRequested(uint8_t id, uint8_t* buffer){
    3d82:	ef 92       	push	r14
    3d84:	ff 92       	push	r15
    3d86:	0f 93       	push	r16
    3d88:	1f 93       	push	r17
    3d8a:	cf 93       	push	r28
    3d8c:	df 93       	push	r29
    3d8e:	cd b7       	in	r28, 0x3d	; 61
    3d90:	de b7       	in	r29, 0x3e	; 62
    3d92:	68 97       	sbiw	r28, 0x18	; 24
    3d94:	0f b6       	in	r0, 0x3f	; 63
    3d96:	f8 94       	cli
    3d98:	de bf       	out	0x3e, r29	; 62
    3d9a:	0f be       	out	0x3f, r0	; 63
    3d9c:	cd bf       	out	0x3d, r28	; 61
    3d9e:	f6 2e       	mov	r15, r22
    3da0:	8a 01       	movw	r16, r20
	if(id == tempId){
    3da2:	dc 01       	movw	r26, r24
    3da4:	1d 96       	adiw	r26, 0x0d	; 13
    3da6:	ec 90       	ld	r14, X
    3da8:	e6 12       	cpse	r14, r22
    3daa:	0f c0       	rjmp	.+30     	; 0x3dca <_ZN9ImuSensor21ReadRegisterRequestedEhPh+0x48>
		buffer[0] = imu.getTemp();
    3dac:	02 96       	adiw	r24, 0x02	; 2
    3dae:	0e 94 aa 02 	call	0x554	; 0x554 <_ZN15Adafruit_BNO0557getTempEv>
    3db2:	f8 01       	movw	r30, r16
    3db4:	80 83       	st	Z, r24
	virtual void CommandReceived(uint8_t id, const uint8_t* data, uint8_t len) = 0;
	virtual void Update(uint8_t* buffer) = 0;
	
protected:
	void inline SendCommand(uint8_t id, uint8_t len){
		EtherComm::buffer[2] = id;
    3db6:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    3dba:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    3dbe:	e2 82       	std	Z+2, r14	; 0x02
		EtherComm::SendCommand(CMD_UpdateDevice, len + 1);
    3dc0:	62 e0       	ldi	r22, 0x02	; 2
    3dc2:	83 e0       	ldi	r24, 0x03	; 3
    3dc4:	0e 94 a4 0b 	call	0x1748	; 0x1748 <_ZN9EtherComm11SendCommandEhh>
    3dc8:	71 c0       	rjmp	.+226    	; 0x3eac <_ZN9ImuSensor21ReadRegisterRequestedEhPh+0x12a>
		SendCommand(id, 1);
	}else if(id == accelId){
    3dca:	dc 01       	movw	r26, r24
    3dcc:	1e 96       	adiw	r26, 0x0e	; 14
    3dce:	2c 91       	ld	r18, X
    3dd0:	62 13       	cpse	r22, r18
    3dd2:	6c c0       	rjmp	.+216    	; 0x3eac <_ZN9ImuSensor21ReadRegisterRequestedEhPh+0x12a>
		vector = imu.getVector(Adafruit_BNO055::VECTOR_ACCELEROMETER );
    3dd4:	bc 01       	movw	r22, r24
    3dd6:	6e 5f       	subi	r22, 0xFE	; 254
    3dd8:	7f 4f       	sbci	r23, 0xFF	; 255
    3dda:	48 e0       	ldi	r20, 0x08	; 8
    3ddc:	ce 01       	movw	r24, r28
    3dde:	01 96       	adiw	r24, 0x01	; 1
    3de0:	0e 94 00 03 	call	0x600	; 0x600 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
    3de4:	fe 01       	movw	r30, r28
    3de6:	31 96       	adiw	r30, 0x01	; 1
    3de8:	a7 e0       	ldi	r26, 0x07	; 7
    3dea:	ba e0       	ldi	r27, 0x0A	; 10
    3dec:	ce 01       	movw	r24, r28
    3dee:	0d 96       	adiw	r24, 0x0d	; 13
		}

		Vector& operator=(const Vector& v)
		{
			for (int x = 0; x < N; x++ )
			p_vec[x] = v.p_vec[x];
    3df0:	41 91       	ld	r20, Z+
    3df2:	51 91       	ld	r21, Z+
    3df4:	61 91       	ld	r22, Z+
    3df6:	71 91       	ld	r23, Z+
    3df8:	4d 93       	st	X+, r20
    3dfa:	5d 93       	st	X+, r21
    3dfc:	6d 93       	st	X+, r22
    3dfe:	7d 93       	st	X+, r23
			return ret;
		}

		Vector& operator=(const Vector& v)
		{
			for (int x = 0; x < N; x++ )
    3e00:	e8 17       	cp	r30, r24
    3e02:	f9 07       	cpc	r31, r25
    3e04:	a9 f7       	brne	.-22     	; 0x3df0 <_ZN9ImuSensor21ReadRegisterRequestedEhPh+0x6e>
		saveFloat(vector.x(), buffer + 0);
    3e06:	e7 e0       	ldi	r30, 0x07	; 7
    3e08:	fa e0       	ldi	r31, 0x0A	; 10
    3e0a:	20 81       	ld	r18, Z
    3e0c:	51 81       	ldd	r21, Z+1	; 0x01
    3e0e:	42 81       	ldd	r20, Z+2	; 0x02
    3e10:	33 81       	ldd	r19, Z+3	; 0x03
    3e12:	82 2f       	mov	r24, r18
    3e14:	95 2f       	mov	r25, r21
    3e16:	a4 2f       	mov	r26, r20
    3e18:	b3 2f       	mov	r27, r19
    3e1a:	8d 87       	std	Y+13, r24	; 0x0d
    3e1c:	9e 87       	std	Y+14, r25	; 0x0e
    3e1e:	af 87       	std	Y+15, r26	; 0x0f
    3e20:	b8 8b       	std	Y+16, r27	; 0x10
	
}

static void saveFloat(float f, uint8_t* buffer){
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    3e22:	d8 01       	movw	r26, r16
    3e24:	2c 93       	st	X, r18
	*buffer++ = *val++;
    3e26:	8e 85       	ldd	r24, Y+14	; 0x0e
    3e28:	11 96       	adiw	r26, 0x01	; 1
    3e2a:	8c 93       	st	X, r24
    3e2c:	11 97       	sbiw	r26, 0x01	; 1
	*buffer++ = *val++;
    3e2e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e30:	12 96       	adiw	r26, 0x02	; 2
    3e32:	8c 93       	st	X, r24
    3e34:	12 97       	sbiw	r26, 0x02	; 2
	*buffer++ = *val++;
    3e36:	88 89       	ldd	r24, Y+16	; 0x10
    3e38:	13 96       	adiw	r26, 0x03	; 3
    3e3a:	8c 93       	st	X, r24
    3e3c:	24 81       	ldd	r18, Z+4	; 0x04
    3e3e:	55 81       	ldd	r21, Z+5	; 0x05
    3e40:	46 81       	ldd	r20, Z+6	; 0x06
    3e42:	37 81       	ldd	r19, Z+7	; 0x07
    3e44:	82 2f       	mov	r24, r18
    3e46:	95 2f       	mov	r25, r21
    3e48:	a4 2f       	mov	r26, r20
    3e4a:	b3 2f       	mov	r27, r19
    3e4c:	89 8b       	std	Y+17, r24	; 0x11
    3e4e:	9a 8b       	std	Y+18, r25	; 0x12
    3e50:	ab 8b       	std	Y+19, r26	; 0x13
    3e52:	bc 8b       	std	Y+20, r27	; 0x14
	
}

static void saveFloat(float f, uint8_t* buffer){
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    3e54:	d8 01       	movw	r26, r16
    3e56:	14 96       	adiw	r26, 0x04	; 4
    3e58:	2c 93       	st	X, r18
    3e5a:	14 97       	sbiw	r26, 0x04	; 4
	*buffer++ = *val++;
    3e5c:	8a 89       	ldd	r24, Y+18	; 0x12
    3e5e:	15 96       	adiw	r26, 0x05	; 5
    3e60:	8c 93       	st	X, r24
    3e62:	15 97       	sbiw	r26, 0x05	; 5
	*buffer++ = *val++;
    3e64:	8b 89       	ldd	r24, Y+19	; 0x13
    3e66:	16 96       	adiw	r26, 0x06	; 6
    3e68:	8c 93       	st	X, r24
    3e6a:	16 97       	sbiw	r26, 0x06	; 6
	*buffer++ = *val++;
    3e6c:	8c 89       	ldd	r24, Y+20	; 0x14
    3e6e:	17 96       	adiw	r26, 0x07	; 7
    3e70:	8c 93       	st	X, r24
    3e72:	20 85       	ldd	r18, Z+8	; 0x08
    3e74:	51 85       	ldd	r21, Z+9	; 0x09
    3e76:	42 85       	ldd	r20, Z+10	; 0x0a
    3e78:	33 85       	ldd	r19, Z+11	; 0x0b
    3e7a:	82 2f       	mov	r24, r18
    3e7c:	95 2f       	mov	r25, r21
    3e7e:	a4 2f       	mov	r26, r20
    3e80:	b3 2f       	mov	r27, r19
    3e82:	8d 8b       	std	Y+21, r24	; 0x15
    3e84:	9e 8b       	std	Y+22, r25	; 0x16
    3e86:	af 8b       	std	Y+23, r26	; 0x17
    3e88:	b8 8f       	std	Y+24, r27	; 0x18
	
}

static void saveFloat(float f, uint8_t* buffer){
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    3e8a:	f8 01       	movw	r30, r16
    3e8c:	20 87       	std	Z+8, r18	; 0x08
	*buffer++ = *val++;
    3e8e:	8e 89       	ldd	r24, Y+22	; 0x16
    3e90:	81 87       	std	Z+9, r24	; 0x09
	*buffer++ = *val++;
    3e92:	8f 89       	ldd	r24, Y+23	; 0x17
    3e94:	82 87       	std	Z+10, r24	; 0x0a
	*buffer++ = *val++;
    3e96:	88 8d       	ldd	r24, Y+24	; 0x18
    3e98:	83 87       	std	Z+11, r24	; 0x0b
	virtual void CommandReceived(uint8_t id, const uint8_t* data, uint8_t len) = 0;
	virtual void Update(uint8_t* buffer) = 0;
	
protected:
	void inline SendCommand(uint8_t id, uint8_t len){
		EtherComm::buffer[2] = id;
    3e9a:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    3e9e:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    3ea2:	f2 82       	std	Z+2, r15	; 0x02
		EtherComm::SendCommand(CMD_UpdateDevice, len + 1);
    3ea4:	6d e0       	ldi	r22, 0x0D	; 13
    3ea6:	83 e0       	ldi	r24, 0x03	; 3
    3ea8:	0e 94 a4 0b 	call	0x1748	; 0x1748 <_ZN9EtherComm11SendCommandEhh>
	saveFloat(vector.x(), buffer + 14);
	saveFloat(vector.y(), buffer + 18);
	saveFloat(vector.z(), buffer + 22);
	
	return 1 + 1 + 6*4;*/
    3eac:	68 96       	adiw	r28, 0x18	; 24
    3eae:	0f b6       	in	r0, 0x3f	; 63
    3eb0:	f8 94       	cli
    3eb2:	de bf       	out	0x3e, r29	; 62
    3eb4:	0f be       	out	0x3f, r0	; 63
    3eb6:	cd bf       	out	0x3d, r28	; 61
    3eb8:	df 91       	pop	r29
    3eba:	cf 91       	pop	r28
    3ebc:	1f 91       	pop	r17
    3ebe:	0f 91       	pop	r16
    3ec0:	ff 90       	pop	r15
    3ec2:	ef 90       	pop	r14
    3ec4:	08 95       	ret

00003ec6 <_ZN9ImuSensorC1Ehh>:
#define ID_TEMP 1
#define ID_ACCEL 2
//#include "../BNO055/utility/vector.h"
//Adafruit_BNO055 ImuSensor::imu;

ImuSensor::ImuSensor(const uint8_t TempId, const uint8_t AccelId) : imu(55, 0x28), tempId(TempId), accelId(AccelId) {
    3ec6:	ef 92       	push	r14
    3ec8:	ff 92       	push	r15
    3eca:	0f 93       	push	r16
    3ecc:	1f 93       	push	r17
    3ece:	cf 93       	push	r28
    3ed0:	df 93       	push	r29
    3ed2:	ec 01       	movw	r28, r24
    3ed4:	e6 2e       	mov	r14, r22
    3ed6:	f4 2e       	mov	r15, r20
    3ed8:	23 e3       	ldi	r18, 0x33	; 51
    3eda:	33 e0       	ldi	r19, 0x03	; 3
    3edc:	fc 01       	movw	r30, r24
    3ede:	21 93       	st	Z+, r18
    3ee0:	31 93       	st	Z+, r19
    3ee2:	cf 01       	movw	r24, r30
    3ee4:	05 ea       	ldi	r16, 0xA5	; 165
    3ee6:	17 e0       	ldi	r17, 0x07	; 7
    3ee8:	28 e2       	ldi	r18, 0x28	; 40
    3eea:	47 e3       	ldi	r20, 0x37	; 55
    3eec:	50 e0       	ldi	r21, 0x00	; 0
    3eee:	60 e0       	ldi	r22, 0x00	; 0
    3ef0:	70 e0       	ldi	r23, 0x00	; 0
    3ef2:	0e 94 c8 01 	call	0x390	; 0x390 <_ZN15Adafruit_BNO055C1ElhP7TwoWire>
    3ef6:	ed 86       	std	Y+13, r14	; 0x0d
    3ef8:	fe 86       	std	Y+14, r15	; 0x0e
	
}
    3efa:	df 91       	pop	r29
    3efc:	cf 91       	pop	r28
    3efe:	1f 91       	pop	r17
    3f00:	0f 91       	pop	r16
    3f02:	ff 90       	pop	r15
    3f04:	ef 90       	pop	r14
    3f06:	08 95       	ret

00003f08 <_GLOBAL__sub_I__ZN9ImuSensorC2Ehh>:
	template <uint8_t N> class Vector
	{
		public:
		Vector()
		{
			memset(p_vec, 0, sizeof(double)*N);
    3f08:	8c e0       	ldi	r24, 0x0C	; 12
    3f0a:	e7 e0       	ldi	r30, 0x07	; 7
    3f0c:	fa e0       	ldi	r31, 0x0A	; 10
    3f0e:	df 01       	movw	r26, r30
    3f10:	1d 92       	st	X+, r1
    3f12:	8a 95       	dec	r24
    3f14:	e9 f7       	brne	.-6      	; 0x3f10 <_GLOBAL__sub_I__ZN9ImuSensorC2Ehh+0x8>
    3f16:	08 95       	ret

00003f18 <_GLOBAL__sub_I_bno>:
	setup();
	
	while(true){
		loop();
	}
    3f18:	0f 93       	push	r16
    3f1a:	1f 93       	push	r17
/* Set the delay between fresh samples */
#define BNO055_SAMPLERATE_DELAY_MS 100

// Check I2C device address and correct line below (by default address is 0x29 or 0x28)
//                                   id, address
Adafruit_BNO055 bno = Adafruit_BNO055(55, 0x28);
    3f1c:	05 ea       	ldi	r16, 0xA5	; 165
    3f1e:	17 e0       	ldi	r17, 0x07	; 7
    3f20:	28 e2       	ldi	r18, 0x28	; 40
    3f22:	47 e3       	ldi	r20, 0x37	; 55
    3f24:	50 e0       	ldi	r21, 0x00	; 0
    3f26:	60 e0       	ldi	r22, 0x00	; 0
    3f28:	70 e0       	ldi	r23, 0x00	; 0
    3f2a:	83 e1       	ldi	r24, 0x13	; 19
    3f2c:	9a e0       	ldi	r25, 0x0A	; 10
    3f2e:	0e 94 c8 01 	call	0x390	; 0x390 <_ZN15Adafruit_BNO055C1ElhP7TwoWire>
	setup();
	
	while(true){
		loop();
	}
    3f32:	1f 91       	pop	r17
    3f34:	0f 91       	pop	r16
    3f36:	08 95       	ret

00003f38 <_ZN5Print5writeEPKhj>:
uint16_t Print::println(unsigned long num, int base)
{
  uint16_t n = print(num, base);
  n += println();
  return n;
}
    3f38:	cf 92       	push	r12
    3f3a:	df 92       	push	r13
    3f3c:	ef 92       	push	r14
    3f3e:	ff 92       	push	r15
    3f40:	0f 93       	push	r16
    3f42:	1f 93       	push	r17
    3f44:	cf 93       	push	r28
    3f46:	df 93       	push	r29
    3f48:	41 15       	cp	r20, r1
    3f4a:	51 05       	cpc	r21, r1
    3f4c:	c1 f0       	breq	.+48     	; 0x3f7e <_ZN5Print5writeEPKhj+0x46>
    3f4e:	6a 01       	movw	r12, r20
    3f50:	8c 01       	movw	r16, r24
    3f52:	e6 2e       	mov	r14, r22
    3f54:	f7 2e       	mov	r15, r23
    3f56:	c0 e0       	ldi	r28, 0x00	; 0
    3f58:	d0 e0       	ldi	r29, 0x00	; 0
    3f5a:	d7 01       	movw	r26, r14
    3f5c:	6d 91       	ld	r22, X+
    3f5e:	7d 01       	movw	r14, r26
    3f60:	d8 01       	movw	r26, r16
    3f62:	ed 91       	ld	r30, X+
    3f64:	fc 91       	ld	r31, X
    3f66:	01 90       	ld	r0, Z+
    3f68:	f0 81       	ld	r31, Z
    3f6a:	e0 2d       	mov	r30, r0
    3f6c:	c8 01       	movw	r24, r16
    3f6e:	19 95       	eicall
    3f70:	89 2b       	or	r24, r25
    3f72:	39 f0       	breq	.+14     	; 0x3f82 <_ZN5Print5writeEPKhj+0x4a>
    3f74:	21 96       	adiw	r28, 0x01	; 1
    3f76:	cc 16       	cp	r12, r28
    3f78:	dd 06       	cpc	r13, r29
    3f7a:	79 f7       	brne	.-34     	; 0x3f5a <_ZN5Print5writeEPKhj+0x22>
    3f7c:	02 c0       	rjmp	.+4      	; 0x3f82 <_ZN5Print5writeEPKhj+0x4a>
    3f7e:	c0 e0       	ldi	r28, 0x00	; 0
    3f80:	d0 e0       	ldi	r29, 0x00	; 0
    3f82:	ce 01       	movw	r24, r28
    3f84:	df 91       	pop	r29
    3f86:	cf 91       	pop	r28
    3f88:	1f 91       	pop	r17
    3f8a:	0f 91       	pop	r16
    3f8c:	ff 90       	pop	r15
    3f8e:	ef 90       	pop	r14
    3f90:	df 90       	pop	r13
    3f92:	cf 90       	pop	r12
    3f94:	08 95       	ret

00003f96 <_ZN5Print5printEPKc>:
    3f96:	61 15       	cp	r22, r1
    3f98:	71 05       	cpc	r23, r1
    3f9a:	81 f0       	breq	.+32     	; 0x3fbc <_ZN5Print5printEPKc+0x26>
    3f9c:	fb 01       	movw	r30, r22
    3f9e:	01 90       	ld	r0, Z+
    3fa0:	00 20       	and	r0, r0
    3fa2:	e9 f7       	brne	.-6      	; 0x3f9e <_ZN5Print5printEPKc+0x8>
    3fa4:	31 97       	sbiw	r30, 0x01	; 1
    3fa6:	af 01       	movw	r20, r30
    3fa8:	46 1b       	sub	r20, r22
    3faa:	57 0b       	sbc	r21, r23
    3fac:	dc 01       	movw	r26, r24
    3fae:	ed 91       	ld	r30, X+
    3fb0:	fc 91       	ld	r31, X
    3fb2:	02 80       	ldd	r0, Z+2	; 0x02
    3fb4:	f3 81       	ldd	r31, Z+3	; 0x03
    3fb6:	e0 2d       	mov	r30, r0
    3fb8:	19 95       	eicall
    3fba:	08 95       	ret
    3fbc:	80 e0       	ldi	r24, 0x00	; 0
    3fbe:	90 e0       	ldi	r25, 0x00	; 0
    3fc0:	08 95       	ret

00003fc2 <_ZN5Print5printEc>:
    3fc2:	dc 01       	movw	r26, r24
    3fc4:	ed 91       	ld	r30, X+
    3fc6:	fc 91       	ld	r31, X
    3fc8:	01 90       	ld	r0, Z+
    3fca:	f0 81       	ld	r31, Z
    3fcc:	e0 2d       	mov	r30, r0
    3fce:	19 95       	eicall
    3fd0:	08 95       	ret

00003fd2 <_ZN5Print7printlnEv>:
    3fd2:	dc 01       	movw	r26, r24
    3fd4:	ed 91       	ld	r30, X+
    3fd6:	fc 91       	ld	r31, X
    3fd8:	02 80       	ldd	r0, Z+2	; 0x02
    3fda:	f3 81       	ldd	r31, Z+3	; 0x03
    3fdc:	e0 2d       	mov	r30, r0
    3fde:	42 e0       	ldi	r20, 0x02	; 2
    3fe0:	50 e0       	ldi	r21, 0x00	; 0
    3fe2:	6b e3       	ldi	r22, 0x3B	; 59
    3fe4:	73 e0       	ldi	r23, 0x03	; 3
    3fe6:	19 95       	eicall
    3fe8:	08 95       	ret

00003fea <_ZN5Print7printlnEPKc>:
    3fea:	0f 93       	push	r16
    3fec:	1f 93       	push	r17
    3fee:	cf 93       	push	r28
    3ff0:	df 93       	push	r29
    3ff2:	ec 01       	movw	r28, r24
    3ff4:	d0 df       	rcall	.-96     	; 0x3f96 <_ZN5Print5printEPKc>
    3ff6:	8c 01       	movw	r16, r24
    3ff8:	ce 01       	movw	r24, r28
    3ffa:	eb df       	rcall	.-42     	; 0x3fd2 <_ZN5Print7printlnEv>
    3ffc:	80 0f       	add	r24, r16
    3ffe:	91 1f       	adc	r25, r17
    4000:	df 91       	pop	r29
    4002:	cf 91       	pop	r28
    4004:	1f 91       	pop	r17
    4006:	0f 91       	pop	r16
    4008:	08 95       	ret

0000400a <_ZN5Print11printNumberEmh>:
    400a:	8f 92       	push	r8
    400c:	9f 92       	push	r9
    400e:	af 92       	push	r10
    4010:	bf 92       	push	r11
    4012:	ef 92       	push	r14
    4014:	ff 92       	push	r15
    4016:	0f 93       	push	r16
    4018:	1f 93       	push	r17
    401a:	cf 93       	push	r28
    401c:	df 93       	push	r29
    401e:	cd b7       	in	r28, 0x3d	; 61
    4020:	de b7       	in	r29, 0x3e	; 62
    4022:	a1 97       	sbiw	r28, 0x21	; 33
    4024:	0f b6       	in	r0, 0x3f	; 63
    4026:	f8 94       	cli
    4028:	de bf       	out	0x3e, r29	; 62
    402a:	0f be       	out	0x3f, r0	; 63
    402c:	cd bf       	out	0x3d, r28	; 61
    402e:	7c 01       	movw	r14, r24
    4030:	cb 01       	movw	r24, r22
    4032:	ba 01       	movw	r22, r20
    4034:	19 a2       	std	Y+33, r1	; 0x21
    4036:	22 30       	cpi	r18, 0x02	; 2
    4038:	08 f4       	brcc	.+2      	; 0x403c <_ZN5Print11printNumberEmh+0x32>
    403a:	2a e0       	ldi	r18, 0x0A	; 10
    403c:	8e 01       	movw	r16, r28
    403e:	0f 5d       	subi	r16, 0xDF	; 223
    4040:	1f 4f       	sbci	r17, 0xFF	; 255
    4042:	82 2e       	mov	r8, r18
    4044:	91 2c       	mov	r9, r1
    4046:	a1 2c       	mov	r10, r1
    4048:	b1 2c       	mov	r11, r1
    404a:	a5 01       	movw	r20, r10
    404c:	94 01       	movw	r18, r8
    404e:	6f d3       	rcall	.+1758   	; 0x472e <__udivmodsi4>
    4050:	e6 2f       	mov	r30, r22
    4052:	62 2f       	mov	r22, r18
    4054:	73 2f       	mov	r23, r19
    4056:	84 2f       	mov	r24, r20
    4058:	95 2f       	mov	r25, r21
    405a:	01 50       	subi	r16, 0x01	; 1
    405c:	11 09       	sbc	r17, r1
    405e:	ea 30       	cpi	r30, 0x0A	; 10
    4060:	10 f4       	brcc	.+4      	; 0x4066 <_ZN5Print11printNumberEmh+0x5c>
    4062:	e0 5d       	subi	r30, 0xD0	; 208
    4064:	01 c0       	rjmp	.+2      	; 0x4068 <_ZN5Print11printNumberEmh+0x5e>
    4066:	e9 5c       	subi	r30, 0xC9	; 201
    4068:	d8 01       	movw	r26, r16
    406a:	ec 93       	st	X, r30
    406c:	61 15       	cp	r22, r1
    406e:	71 05       	cpc	r23, r1
    4070:	81 05       	cpc	r24, r1
    4072:	91 05       	cpc	r25, r1
    4074:	51 f7       	brne	.-44     	; 0x404a <_ZN5Print11printNumberEmh+0x40>
    4076:	01 15       	cp	r16, r1
    4078:	11 05       	cpc	r17, r1
    407a:	91 f0       	breq	.+36     	; 0x40a0 <_ZN5Print11printNumberEmh+0x96>
    407c:	f8 01       	movw	r30, r16
    407e:	01 90       	ld	r0, Z+
    4080:	00 20       	and	r0, r0
    4082:	e9 f7       	brne	.-6      	; 0x407e <_ZN5Print11printNumberEmh+0x74>
    4084:	31 97       	sbiw	r30, 0x01	; 1
    4086:	af 01       	movw	r20, r30
    4088:	40 1b       	sub	r20, r16
    408a:	51 0b       	sbc	r21, r17
    408c:	d7 01       	movw	r26, r14
    408e:	ed 91       	ld	r30, X+
    4090:	fc 91       	ld	r31, X
    4092:	02 80       	ldd	r0, Z+2	; 0x02
    4094:	f3 81       	ldd	r31, Z+3	; 0x03
    4096:	e0 2d       	mov	r30, r0
    4098:	b8 01       	movw	r22, r16
    409a:	c7 01       	movw	r24, r14
    409c:	19 95       	eicall
    409e:	01 c0       	rjmp	.+2      	; 0x40a2 <_ZN5Print11printNumberEmh+0x98>
    40a0:	80 e0       	ldi	r24, 0x00	; 0
    40a2:	a1 96       	adiw	r28, 0x21	; 33
    40a4:	0f b6       	in	r0, 0x3f	; 63
    40a6:	f8 94       	cli
    40a8:	de bf       	out	0x3e, r29	; 62
    40aa:	0f be       	out	0x3f, r0	; 63
    40ac:	cd bf       	out	0x3d, r28	; 61
    40ae:	df 91       	pop	r29
    40b0:	cf 91       	pop	r28
    40b2:	1f 91       	pop	r17
    40b4:	0f 91       	pop	r16
    40b6:	ff 90       	pop	r15
    40b8:	ef 90       	pop	r14
    40ba:	bf 90       	pop	r11
    40bc:	af 90       	pop	r10
    40be:	9f 90       	pop	r9
    40c0:	8f 90       	pop	r8
    40c2:	08 95       	ret

000040c4 <_ZN5Print5printEmi>:
    40c4:	21 15       	cp	r18, r1
    40c6:	31 05       	cpc	r19, r1
    40c8:	49 f4       	brne	.+18     	; 0x40dc <_ZN5Print5printEmi+0x18>
    40ca:	dc 01       	movw	r26, r24
    40cc:	ed 91       	ld	r30, X+
    40ce:	fc 91       	ld	r31, X
    40d0:	01 90       	ld	r0, Z+
    40d2:	f0 81       	ld	r31, Z
    40d4:	e0 2d       	mov	r30, r0
    40d6:	64 2f       	mov	r22, r20
    40d8:	19 95       	eicall
    40da:	08 95       	ret
    40dc:	96 df       	rcall	.-212    	; 0x400a <_ZN5Print11printNumberEmh>
    40de:	90 e0       	ldi	r25, 0x00	; 0
    40e0:	08 95       	ret

000040e2 <_ZN5Print5printEji>:
    40e2:	9a 01       	movw	r18, r20
    40e4:	ab 01       	movw	r20, r22
    40e6:	60 e0       	ldi	r22, 0x00	; 0
    40e8:	70 e0       	ldi	r23, 0x00	; 0
    40ea:	ec cf       	rjmp	.-40     	; 0x40c4 <_ZN5Print5printEmi>
    40ec:	08 95       	ret

000040ee <_ZN5Print10printFloatEdh>:

  return write(str);
}

uint8_t Print::printFloat(double number, uint8_t digits) 
{ 
    40ee:	7f 92       	push	r7
    40f0:	8f 92       	push	r8
    40f2:	9f 92       	push	r9
    40f4:	af 92       	push	r10
    40f6:	bf 92       	push	r11
    40f8:	cf 92       	push	r12
    40fa:	df 92       	push	r13
    40fc:	ef 92       	push	r14
    40fe:	ff 92       	push	r15
    4100:	0f 93       	push	r16
    4102:	1f 93       	push	r17
    4104:	cf 93       	push	r28
    4106:	df 93       	push	r29
    4108:	00 d0       	rcall	.+0      	; 0x410a <_ZN5Print10printFloatEdh+0x1c>
    410a:	1f 92       	push	r1
    410c:	cd b7       	in	r28, 0x3d	; 61
    410e:	de b7       	in	r29, 0x3e	; 62
    4110:	8c 01       	movw	r16, r24
    4112:	4a 01       	movw	r8, r20
    4114:	5b 01       	movw	r10, r22
    4116:	72 2e       	mov	r7, r18
  uint16_t n = 0;
  
  if (isnan(number)) return print("nan");
    4118:	9a 01       	movw	r18, r20
    411a:	ab 01       	movw	r20, r22
    411c:	c5 01       	movw	r24, r10
    411e:	b4 01       	movw	r22, r8
    4120:	f3 d2       	rcall	.+1510   	; 0x4708 <__unordsf2>
    4122:	88 23       	and	r24, r24
    4124:	29 f0       	breq	.+10     	; 0x4130 <_ZN5Print10printFloatEdh+0x42>
    4126:	6e e3       	ldi	r22, 0x3E	; 62
    4128:	73 e0       	ldi	r23, 0x03	; 3
    412a:	c8 01       	movw	r24, r16
    412c:	34 df       	rcall	.-408    	; 0x3f96 <_ZN5Print5printEPKc>
    412e:	c1 c0       	rjmp	.+386    	; 0x42b2 <_ZN5Print10printFloatEdh+0x1c4>
  if (isinf(number)) return print("inf");
    4130:	75 01       	movw	r14, r10
    4132:	64 01       	movw	r12, r8
    4134:	e8 94       	clt
    4136:	f7 f8       	bld	r15, 7
    4138:	2f ef       	ldi	r18, 0xFF	; 255
    413a:	3f ef       	ldi	r19, 0xFF	; 255
    413c:	4f e7       	ldi	r20, 0x7F	; 127
    413e:	5f e7       	ldi	r21, 0x7F	; 127
    4140:	c7 01       	movw	r24, r14
    4142:	b6 01       	movw	r22, r12
    4144:	e1 d2       	rcall	.+1474   	; 0x4708 <__unordsf2>
    4146:	81 11       	cpse	r24, r1
    4148:	0e c0       	rjmp	.+28     	; 0x4166 <_ZN5Print10printFloatEdh+0x78>
    414a:	2f ef       	ldi	r18, 0xFF	; 255
    414c:	3f ef       	ldi	r19, 0xFF	; 255
    414e:	4f e7       	ldi	r20, 0x7F	; 127
    4150:	5f e7       	ldi	r21, 0x7F	; 127
    4152:	c7 01       	movw	r24, r14
    4154:	b6 01       	movw	r22, r12
    4156:	27 d1       	rcall	.+590    	; 0x43a6 <__cmpsf2>
    4158:	18 16       	cp	r1, r24
    415a:	2c f4       	brge	.+10     	; 0x4166 <_ZN5Print10printFloatEdh+0x78>
    415c:	62 e4       	ldi	r22, 0x42	; 66
    415e:	73 e0       	ldi	r23, 0x03	; 3
    4160:	c8 01       	movw	r24, r16
    4162:	19 df       	rcall	.-462    	; 0x3f96 <_ZN5Print5printEPKc>
    4164:	a6 c0       	rjmp	.+332    	; 0x42b2 <_ZN5Print10printFloatEdh+0x1c4>
    4166:	2f ef       	ldi	r18, 0xFF	; 255
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    4168:	3f ef       	ldi	r19, 0xFF	; 255
    416a:	4f e7       	ldi	r20, 0x7F	; 127
    416c:	5f e4       	ldi	r21, 0x4F	; 79
    416e:	c5 01       	movw	r24, r10
    4170:	b4 01       	movw	r22, r8
    4172:	63 d2       	rcall	.+1222   	; 0x463a <__gesf2>
    4174:	18 16       	cp	r1, r24
    4176:	2c f4       	brge	.+10     	; 0x4182 <_ZN5Print10printFloatEdh+0x94>
    4178:	66 e4       	ldi	r22, 0x46	; 70
    417a:	73 e0       	ldi	r23, 0x03	; 3
    417c:	c8 01       	movw	r24, r16
    417e:	0b df       	rcall	.-490    	; 0x3f96 <_ZN5Print5printEPKc>
    4180:	98 c0       	rjmp	.+304    	; 0x42b2 <_ZN5Print10printFloatEdh+0x1c4>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    4182:	2f ef       	ldi	r18, 0xFF	; 255
    4184:	3f ef       	ldi	r19, 0xFF	; 255
    4186:	4f e7       	ldi	r20, 0x7F	; 127
    4188:	5f ec       	ldi	r21, 0xCF	; 207
    418a:	c5 01       	movw	r24, r10
    418c:	b4 01       	movw	r22, r8
    418e:	0b d1       	rcall	.+534    	; 0x43a6 <__cmpsf2>
    4190:	88 23       	and	r24, r24
    4192:	2c f4       	brge	.+10     	; 0x419e <_ZN5Print10printFloatEdh+0xb0>
    4194:	66 e4       	ldi	r22, 0x46	; 70
    4196:	73 e0       	ldi	r23, 0x03	; 3
    4198:	c8 01       	movw	r24, r16
    419a:	fd de       	rcall	.-518    	; 0x3f96 <_ZN5Print5printEPKc>
    419c:	8a c0       	rjmp	.+276    	; 0x42b2 <_ZN5Print10printFloatEdh+0x1c4>
  
  // Handle negative numbers
  if (number < 0.0)
    419e:	20 e0       	ldi	r18, 0x00	; 0
    41a0:	30 e0       	ldi	r19, 0x00	; 0
    41a2:	a9 01       	movw	r20, r18
    41a4:	c5 01       	movw	r24, r10
    41a6:	b4 01       	movw	r22, r8
    41a8:	fe d0       	rcall	.+508    	; 0x43a6 <__cmpsf2>
    41aa:	88 23       	and	r24, r24
    41ac:	4c f4       	brge	.+18     	; 0x41c0 <_ZN5Print10printFloatEdh+0xd2>
  {
     n += print('-');
    41ae:	6d e2       	ldi	r22, 0x2D	; 45
    41b0:	c8 01       	movw	r24, r16
    41b2:	07 df       	rcall	.-498    	; 0x3fc2 <_ZN5Print5printEc>
    41b4:	7c 01       	movw	r14, r24
    41b6:	b7 fa       	bst	r11, 7
     number = -number;
    41b8:	b0 94       	com	r11
    41ba:	b7 f8       	bld	r11, 7
    41bc:	b0 94       	com	r11
    41be:	02 c0       	rjmp	.+4      	; 0x41c4 <_ZN5Print10printFloatEdh+0xd6>
    41c0:	e1 2c       	mov	r14, r1
  return write(str);
}

uint8_t Print::printFloat(double number, uint8_t digits) 
{ 
  uint16_t n = 0;
    41c2:	f1 2c       	mov	r15, r1
    41c4:	77 20       	and	r7, r7
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    41c6:	09 f4       	brne	.+2      	; 0x41ca <_ZN5Print10printFloatEdh+0xdc>
    41c8:	61 c0       	rjmp	.+194    	; 0x428c <_ZN5Print10printFloatEdh+0x19e>
    41ca:	19 82       	std	Y+1, r1	; 0x01
    41cc:	60 e0       	ldi	r22, 0x00	; 0
    41ce:	70 e0       	ldi	r23, 0x00	; 0
    41d0:	80 e0       	ldi	r24, 0x00	; 0
    41d2:	9f e3       	ldi	r25, 0x3F	; 63
    rounding /= 10.0;
    41d4:	20 e0       	ldi	r18, 0x00	; 0
    41d6:	30 e0       	ldi	r19, 0x00	; 0
    41d8:	40 e2       	ldi	r20, 0x20	; 32
    41da:	51 e4       	ldi	r21, 0x41	; 65
    41dc:	e8 d0       	rcall	.+464    	; 0x43ae <__divsf3>
    41de:	29 81       	ldd	r18, Y+1	; 0x01
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    41e0:	2f 5f       	subi	r18, 0xFF	; 255
    41e2:	29 83       	std	Y+1, r18	; 0x01
    41e4:	72 12       	cpse	r7, r18
    41e6:	f6 cf       	rjmp	.-20     	; 0x41d4 <_ZN5Print10printFloatEdh+0xe6>
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    41e8:	26 c0       	rjmp	.+76     	; 0x4236 <_ZN5Print10printFloatEdh+0x148>
    41ea:	20 e0       	ldi	r18, 0x00	; 0
    41ec:	30 e0       	ldi	r19, 0x00	; 0
    41ee:	40 e2       	ldi	r20, 0x20	; 32
    41f0:	51 e4       	ldi	r21, 0x41	; 65
    41f2:	c5 01       	movw	r24, r10
    41f4:	b4 01       	movw	r22, r8
    41f6:	25 d2       	rcall	.+1098   	; 0x4642 <__mulsf3>
    41f8:	4b 01       	movw	r8, r22
    unsigned int toPrint = (unsigned int)(remainder);
    41fa:	5c 01       	movw	r10, r24
    41fc:	40 d1       	rcall	.+640    	; 0x447e <__fixunssfsi>
    41fe:	6b 01       	movw	r12, r22
    n += print(toPrint);
    4200:	7c 01       	movw	r14, r24
    4202:	4a e0       	ldi	r20, 0x0A	; 10
    4204:	50 e0       	ldi	r21, 0x00	; 0
    4206:	c8 01       	movw	r24, r16
    4208:	6c df       	rcall	.-296    	; 0x40e2 <_ZN5Print5printEji>
    420a:	29 81       	ldd	r18, Y+1	; 0x01
    420c:	3a 81       	ldd	r19, Y+2	; 0x02
    420e:	28 0f       	add	r18, r24
    4210:	39 1f       	adc	r19, r25
    4212:	3a 83       	std	Y+2, r19	; 0x02
    remainder -= toPrint; 
    4214:	29 83       	std	Y+1, r18	; 0x01
    4216:	b6 01       	movw	r22, r12
    4218:	80 e0       	ldi	r24, 0x00	; 0
    421a:	90 e0       	ldi	r25, 0x00	; 0
    421c:	5c d1       	rcall	.+696    	; 0x44d6 <__floatunsisf>
    421e:	9b 01       	movw	r18, r22
    4220:	ac 01       	movw	r20, r24
    4222:	c5 01       	movw	r24, r10
    4224:	b4 01       	movw	r22, r8
    4226:	5a d0       	rcall	.+180    	; 0x42dc <__subsf3>
    4228:	4b 01       	movw	r8, r22
    422a:	5c 01       	movw	r10, r24
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    422c:	7a 94       	dec	r7
    422e:	71 10       	cpse	r7, r1
    unsigned int toPrint = (unsigned int)(remainder);
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
    4230:	dc cf       	rjmp	.-72     	; 0x41ea <_ZN5Print10printFloatEdh+0xfc>
    4232:	89 81       	ldd	r24, Y+1	; 0x01
  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    rounding /= 10.0;
  
  number += rounding;
    4234:	3e c0       	rjmp	.+124    	; 0x42b2 <_ZN5Print10printFloatEdh+0x1c4>
    4236:	9b 01       	movw	r18, r22
    4238:	ac 01       	movw	r20, r24
    423a:	c5 01       	movw	r24, r10
    423c:	b4 01       	movw	r22, r8
    423e:	4f d0       	rcall	.+158    	; 0x42de <__addsf3>
    4240:	4b 01       	movw	r8, r22

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    4242:	5c 01       	movw	r10, r24
    4244:	1c d1       	rcall	.+568    	; 0x447e <__fixunssfsi>
    4246:	69 83       	std	Y+1, r22	; 0x01
    4248:	7a 83       	std	Y+2, r23	; 0x02
    424a:	8b 83       	std	Y+3, r24	; 0x03
  double remainder = number - (double)int_part;
    424c:	9c 83       	std	Y+4, r25	; 0x04
    424e:	43 d1       	rcall	.+646    	; 0x44d6 <__floatunsisf>
    4250:	9b 01       	movw	r18, r22
    4252:	ac 01       	movw	r20, r24
    4254:	c5 01       	movw	r24, r10
    4256:	b4 01       	movw	r22, r8
    4258:	41 d0       	rcall	.+130    	; 0x42dc <__subsf3>
    425a:	4b 01       	movw	r8, r22
    425c:	5c 01       	movw	r10, r24
  n += print(int_part);
    425e:	2a e0       	ldi	r18, 0x0A	; 10
    4260:	30 e0       	ldi	r19, 0x00	; 0
    4262:	49 81       	ldd	r20, Y+1	; 0x01
    4264:	5a 81       	ldd	r21, Y+2	; 0x02
    4266:	6b 81       	ldd	r22, Y+3	; 0x03
    4268:	7c 81       	ldd	r23, Y+4	; 0x04
    426a:	c8 01       	movw	r24, r16
    426c:	2b df       	rcall	.-426    	; 0x40c4 <_ZN5Print5printEmi>
    426e:	9a 83       	std	Y+2, r25	; 0x02

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    4270:	89 83       	std	Y+1, r24	; 0x01
    4272:	6e e2       	ldi	r22, 0x2E	; 46
    4274:	c8 01       	movw	r24, r16
    4276:	a5 de       	rcall	.-694    	; 0x3fc2 <_ZN5Print5printEc>
    4278:	29 81       	ldd	r18, Y+1	; 0x01
    427a:	3a 81       	ldd	r19, Y+2	; 0x02
    427c:	82 0f       	add	r24, r18
    427e:	93 1f       	adc	r25, r19
    4280:	9c 01       	movw	r18, r24
    4282:	2e 0d       	add	r18, r14
    4284:	3f 1d       	adc	r19, r15
    4286:	3a 83       	std	Y+2, r19	; 0x02
    4288:	29 83       	std	Y+1, r18	; 0x01
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    428a:	af cf       	rjmp	.-162    	; 0x41ea <_ZN5Print10printFloatEdh+0xfc>
    428c:	20 e0       	ldi	r18, 0x00	; 0
    428e:	30 e0       	ldi	r19, 0x00	; 0
    4290:	40 e0       	ldi	r20, 0x00	; 0
    4292:	5f e3       	ldi	r21, 0x3F	; 63
    4294:	c5 01       	movw	r24, r10
    4296:	b4 01       	movw	r22, r8
    4298:	22 d0       	rcall	.+68     	; 0x42de <__addsf3>
    429a:	f1 d0       	rcall	.+482    	; 0x447e <__fixunssfsi>
    429c:	ab 01       	movw	r20, r22
    429e:	bc 01       	movw	r22, r24
    42a0:	2a e0       	ldi	r18, 0x0A	; 10
    42a2:	30 e0       	ldi	r19, 0x00	; 0
    42a4:	c8 01       	movw	r24, r16
    42a6:	0e df       	rcall	.-484    	; 0x40c4 <_ZN5Print5printEmi>
    42a8:	8e 0d       	add	r24, r14
    42aa:	9f 1d       	adc	r25, r15
    42ac:	9a 83       	std	Y+2, r25	; 0x02
    42ae:	89 83       	std	Y+1, r24	; 0x01
    42b0:	c0 cf       	rjmp	.-128    	; 0x4232 <_ZN5Print10printFloatEdh+0x144>
    42b2:	0f 90       	pop	r0
    42b4:	0f 90       	pop	r0
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    42b6:	0f 90       	pop	r0
    42b8:	0f 90       	pop	r0
    42ba:	df 91       	pop	r29
    42bc:	cf 91       	pop	r28
    42be:	1f 91       	pop	r17
    42c0:	0f 91       	pop	r16
    42c2:	ff 90       	pop	r15
    42c4:	ef 90       	pop	r14
    42c6:	df 90       	pop	r13
    42c8:	cf 90       	pop	r12
    42ca:	bf 90       	pop	r11
    42cc:	af 90       	pop	r10
    42ce:	9f 90       	pop	r9
    42d0:	8f 90       	pop	r8
    42d2:	7f 90       	pop	r7
    42d4:	08 95       	ret

000042d6 <_ZN5Print5printEdi>:
    42d6:	0b df       	rcall	.-490    	; 0x40ee <_ZN5Print10printFloatEdh>
    42d8:	90 e0       	ldi	r25, 0x00	; 0
}

uint16_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
}
    42da:	08 95       	ret

000042dc <__subsf3>:
    42dc:	50 58       	subi	r21, 0x80	; 128

000042de <__addsf3>:
    42de:	bb 27       	eor	r27, r27
    42e0:	aa 27       	eor	r26, r26
    42e2:	0e d0       	rcall	.+28     	; 0x4300 <__addsf3x>
    42e4:	70 c1       	rjmp	.+736    	; 0x45c6 <__fp_round>
    42e6:	61 d1       	rcall	.+706    	; 0x45aa <__fp_pscA>
    42e8:	30 f0       	brcs	.+12     	; 0x42f6 <__addsf3+0x18>
    42ea:	66 d1       	rcall	.+716    	; 0x45b8 <__fp_pscB>
    42ec:	20 f0       	brcs	.+8      	; 0x42f6 <__addsf3+0x18>
    42ee:	31 f4       	brne	.+12     	; 0x42fc <__addsf3+0x1e>
    42f0:	9f 3f       	cpi	r25, 0xFF	; 255
    42f2:	11 f4       	brne	.+4      	; 0x42f8 <__addsf3+0x1a>
    42f4:	1e f4       	brtc	.+6      	; 0x42fc <__addsf3+0x1e>
    42f6:	56 c1       	rjmp	.+684    	; 0x45a4 <__fp_nan>
    42f8:	0e f4       	brtc	.+2      	; 0x42fc <__addsf3+0x1e>
    42fa:	e0 95       	com	r30
    42fc:	e7 fb       	bst	r30, 7
    42fe:	4c c1       	rjmp	.+664    	; 0x4598 <__fp_inf>

00004300 <__addsf3x>:
    4300:	e9 2f       	mov	r30, r25
    4302:	72 d1       	rcall	.+740    	; 0x45e8 <__fp_split3>
    4304:	80 f3       	brcs	.-32     	; 0x42e6 <__addsf3+0x8>
    4306:	ba 17       	cp	r27, r26
    4308:	62 07       	cpc	r22, r18
    430a:	73 07       	cpc	r23, r19
    430c:	84 07       	cpc	r24, r20
    430e:	95 07       	cpc	r25, r21
    4310:	18 f0       	brcs	.+6      	; 0x4318 <__addsf3x+0x18>
    4312:	71 f4       	brne	.+28     	; 0x4330 <__addsf3x+0x30>
    4314:	9e f5       	brtc	.+102    	; 0x437c <__addsf3x+0x7c>
    4316:	8a c1       	rjmp	.+788    	; 0x462c <__fp_zero>
    4318:	0e f4       	brtc	.+2      	; 0x431c <__addsf3x+0x1c>
    431a:	e0 95       	com	r30
    431c:	0b 2e       	mov	r0, r27
    431e:	ba 2f       	mov	r27, r26
    4320:	a0 2d       	mov	r26, r0
    4322:	0b 01       	movw	r0, r22
    4324:	b9 01       	movw	r22, r18
    4326:	90 01       	movw	r18, r0
    4328:	0c 01       	movw	r0, r24
    432a:	ca 01       	movw	r24, r20
    432c:	a0 01       	movw	r20, r0
    432e:	11 24       	eor	r1, r1
    4330:	ff 27       	eor	r31, r31
    4332:	59 1b       	sub	r21, r25
    4334:	99 f0       	breq	.+38     	; 0x435c <__addsf3x+0x5c>
    4336:	59 3f       	cpi	r21, 0xF9	; 249
    4338:	50 f4       	brcc	.+20     	; 0x434e <__addsf3x+0x4e>
    433a:	50 3e       	cpi	r21, 0xE0	; 224
    433c:	68 f1       	brcs	.+90     	; 0x4398 <__addsf3x+0x98>
    433e:	1a 16       	cp	r1, r26
    4340:	f0 40       	sbci	r31, 0x00	; 0
    4342:	a2 2f       	mov	r26, r18
    4344:	23 2f       	mov	r18, r19
    4346:	34 2f       	mov	r19, r20
    4348:	44 27       	eor	r20, r20
    434a:	58 5f       	subi	r21, 0xF8	; 248
    434c:	f3 cf       	rjmp	.-26     	; 0x4334 <__addsf3x+0x34>
    434e:	46 95       	lsr	r20
    4350:	37 95       	ror	r19
    4352:	27 95       	ror	r18
    4354:	a7 95       	ror	r26
    4356:	f0 40       	sbci	r31, 0x00	; 0
    4358:	53 95       	inc	r21
    435a:	c9 f7       	brne	.-14     	; 0x434e <__addsf3x+0x4e>
    435c:	7e f4       	brtc	.+30     	; 0x437c <__addsf3x+0x7c>
    435e:	1f 16       	cp	r1, r31
    4360:	ba 0b       	sbc	r27, r26
    4362:	62 0b       	sbc	r22, r18
    4364:	73 0b       	sbc	r23, r19
    4366:	84 0b       	sbc	r24, r20
    4368:	ba f0       	brmi	.+46     	; 0x4398 <__addsf3x+0x98>
    436a:	91 50       	subi	r25, 0x01	; 1
    436c:	a1 f0       	breq	.+40     	; 0x4396 <__addsf3x+0x96>
    436e:	ff 0f       	add	r31, r31
    4370:	bb 1f       	adc	r27, r27
    4372:	66 1f       	adc	r22, r22
    4374:	77 1f       	adc	r23, r23
    4376:	88 1f       	adc	r24, r24
    4378:	c2 f7       	brpl	.-16     	; 0x436a <__addsf3x+0x6a>
    437a:	0e c0       	rjmp	.+28     	; 0x4398 <__addsf3x+0x98>
    437c:	ba 0f       	add	r27, r26
    437e:	62 1f       	adc	r22, r18
    4380:	73 1f       	adc	r23, r19
    4382:	84 1f       	adc	r24, r20
    4384:	48 f4       	brcc	.+18     	; 0x4398 <__addsf3x+0x98>
    4386:	87 95       	ror	r24
    4388:	77 95       	ror	r23
    438a:	67 95       	ror	r22
    438c:	b7 95       	ror	r27
    438e:	f7 95       	ror	r31
    4390:	9e 3f       	cpi	r25, 0xFE	; 254
    4392:	08 f0       	brcs	.+2      	; 0x4396 <__addsf3x+0x96>
    4394:	b3 cf       	rjmp	.-154    	; 0x42fc <__addsf3+0x1e>
    4396:	93 95       	inc	r25
    4398:	88 0f       	add	r24, r24
    439a:	08 f0       	brcs	.+2      	; 0x439e <__addsf3x+0x9e>
    439c:	99 27       	eor	r25, r25
    439e:	ee 0f       	add	r30, r30
    43a0:	97 95       	ror	r25
    43a2:	87 95       	ror	r24
    43a4:	08 95       	ret

000043a6 <__cmpsf2>:
    43a6:	d4 d0       	rcall	.+424    	; 0x4550 <__fp_cmp>
    43a8:	08 f4       	brcc	.+2      	; 0x43ac <__cmpsf2+0x6>
    43aa:	81 e0       	ldi	r24, 0x01	; 1
    43ac:	08 95       	ret

000043ae <__divsf3>:
    43ae:	0c d0       	rcall	.+24     	; 0x43c8 <__divsf3x>
    43b0:	0a c1       	rjmp	.+532    	; 0x45c6 <__fp_round>
    43b2:	02 d1       	rcall	.+516    	; 0x45b8 <__fp_pscB>
    43b4:	40 f0       	brcs	.+16     	; 0x43c6 <__divsf3+0x18>
    43b6:	f9 d0       	rcall	.+498    	; 0x45aa <__fp_pscA>
    43b8:	30 f0       	brcs	.+12     	; 0x43c6 <__divsf3+0x18>
    43ba:	21 f4       	brne	.+8      	; 0x43c4 <__divsf3+0x16>
    43bc:	5f 3f       	cpi	r21, 0xFF	; 255
    43be:	19 f0       	breq	.+6      	; 0x43c6 <__divsf3+0x18>
    43c0:	eb c0       	rjmp	.+470    	; 0x4598 <__fp_inf>
    43c2:	51 11       	cpse	r21, r1
    43c4:	34 c1       	rjmp	.+616    	; 0x462e <__fp_szero>
    43c6:	ee c0       	rjmp	.+476    	; 0x45a4 <__fp_nan>

000043c8 <__divsf3x>:
    43c8:	0f d1       	rcall	.+542    	; 0x45e8 <__fp_split3>
    43ca:	98 f3       	brcs	.-26     	; 0x43b2 <__divsf3+0x4>

000043cc <__divsf3_pse>:
    43cc:	99 23       	and	r25, r25
    43ce:	c9 f3       	breq	.-14     	; 0x43c2 <__divsf3+0x14>
    43d0:	55 23       	and	r21, r21
    43d2:	b1 f3       	breq	.-20     	; 0x43c0 <__divsf3+0x12>
    43d4:	95 1b       	sub	r25, r21
    43d6:	55 0b       	sbc	r21, r21
    43d8:	bb 27       	eor	r27, r27
    43da:	aa 27       	eor	r26, r26
    43dc:	62 17       	cp	r22, r18
    43de:	73 07       	cpc	r23, r19
    43e0:	84 07       	cpc	r24, r20
    43e2:	38 f0       	brcs	.+14     	; 0x43f2 <__divsf3_pse+0x26>
    43e4:	9f 5f       	subi	r25, 0xFF	; 255
    43e6:	5f 4f       	sbci	r21, 0xFF	; 255
    43e8:	22 0f       	add	r18, r18
    43ea:	33 1f       	adc	r19, r19
    43ec:	44 1f       	adc	r20, r20
    43ee:	aa 1f       	adc	r26, r26
    43f0:	a9 f3       	breq	.-22     	; 0x43dc <__divsf3_pse+0x10>
    43f2:	33 d0       	rcall	.+102    	; 0x445a <__divsf3_pse+0x8e>
    43f4:	0e 2e       	mov	r0, r30
    43f6:	3a f0       	brmi	.+14     	; 0x4406 <__divsf3_pse+0x3a>
    43f8:	e0 e8       	ldi	r30, 0x80	; 128
    43fa:	30 d0       	rcall	.+96     	; 0x445c <__divsf3_pse+0x90>
    43fc:	91 50       	subi	r25, 0x01	; 1
    43fe:	50 40       	sbci	r21, 0x00	; 0
    4400:	e6 95       	lsr	r30
    4402:	00 1c       	adc	r0, r0
    4404:	ca f7       	brpl	.-14     	; 0x43f8 <__divsf3_pse+0x2c>
    4406:	29 d0       	rcall	.+82     	; 0x445a <__divsf3_pse+0x8e>
    4408:	fe 2f       	mov	r31, r30
    440a:	27 d0       	rcall	.+78     	; 0x445a <__divsf3_pse+0x8e>
    440c:	66 0f       	add	r22, r22
    440e:	77 1f       	adc	r23, r23
    4410:	88 1f       	adc	r24, r24
    4412:	bb 1f       	adc	r27, r27
    4414:	26 17       	cp	r18, r22
    4416:	37 07       	cpc	r19, r23
    4418:	48 07       	cpc	r20, r24
    441a:	ab 07       	cpc	r26, r27
    441c:	b0 e8       	ldi	r27, 0x80	; 128
    441e:	09 f0       	breq	.+2      	; 0x4422 <__divsf3_pse+0x56>
    4420:	bb 0b       	sbc	r27, r27
    4422:	80 2d       	mov	r24, r0
    4424:	bf 01       	movw	r22, r30
    4426:	ff 27       	eor	r31, r31
    4428:	93 58       	subi	r25, 0x83	; 131
    442a:	5f 4f       	sbci	r21, 0xFF	; 255
    442c:	2a f0       	brmi	.+10     	; 0x4438 <__divsf3_pse+0x6c>
    442e:	9e 3f       	cpi	r25, 0xFE	; 254
    4430:	51 05       	cpc	r21, r1
    4432:	68 f0       	brcs	.+26     	; 0x444e <__divsf3_pse+0x82>
    4434:	b1 c0       	rjmp	.+354    	; 0x4598 <__fp_inf>
    4436:	fb c0       	rjmp	.+502    	; 0x462e <__fp_szero>
    4438:	5f 3f       	cpi	r21, 0xFF	; 255
    443a:	ec f3       	brlt	.-6      	; 0x4436 <__divsf3_pse+0x6a>
    443c:	98 3e       	cpi	r25, 0xE8	; 232
    443e:	dc f3       	brlt	.-10     	; 0x4436 <__divsf3_pse+0x6a>
    4440:	86 95       	lsr	r24
    4442:	77 95       	ror	r23
    4444:	67 95       	ror	r22
    4446:	b7 95       	ror	r27
    4448:	f7 95       	ror	r31
    444a:	9f 5f       	subi	r25, 0xFF	; 255
    444c:	c9 f7       	brne	.-14     	; 0x4440 <__divsf3_pse+0x74>
    444e:	88 0f       	add	r24, r24
    4450:	91 1d       	adc	r25, r1
    4452:	96 95       	lsr	r25
    4454:	87 95       	ror	r24
    4456:	97 f9       	bld	r25, 7
    4458:	08 95       	ret
    445a:	e1 e0       	ldi	r30, 0x01	; 1
    445c:	66 0f       	add	r22, r22
    445e:	77 1f       	adc	r23, r23
    4460:	88 1f       	adc	r24, r24
    4462:	bb 1f       	adc	r27, r27
    4464:	62 17       	cp	r22, r18
    4466:	73 07       	cpc	r23, r19
    4468:	84 07       	cpc	r24, r20
    446a:	ba 07       	cpc	r27, r26
    446c:	20 f0       	brcs	.+8      	; 0x4476 <__divsf3_pse+0xaa>
    446e:	62 1b       	sub	r22, r18
    4470:	73 0b       	sbc	r23, r19
    4472:	84 0b       	sbc	r24, r20
    4474:	ba 0b       	sbc	r27, r26
    4476:	ee 1f       	adc	r30, r30
    4478:	88 f7       	brcc	.-30     	; 0x445c <__divsf3_pse+0x90>
    447a:	e0 95       	com	r30
    447c:	08 95       	ret

0000447e <__fixunssfsi>:
    447e:	bc d0       	rcall	.+376    	; 0x45f8 <__fp_splitA>
    4480:	88 f0       	brcs	.+34     	; 0x44a4 <__fixunssfsi+0x26>
    4482:	9f 57       	subi	r25, 0x7F	; 127
    4484:	90 f0       	brcs	.+36     	; 0x44aa <__fixunssfsi+0x2c>
    4486:	b9 2f       	mov	r27, r25
    4488:	99 27       	eor	r25, r25
    448a:	b7 51       	subi	r27, 0x17	; 23
    448c:	a0 f0       	brcs	.+40     	; 0x44b6 <__fixunssfsi+0x38>
    448e:	d1 f0       	breq	.+52     	; 0x44c4 <__fixunssfsi+0x46>
    4490:	66 0f       	add	r22, r22
    4492:	77 1f       	adc	r23, r23
    4494:	88 1f       	adc	r24, r24
    4496:	99 1f       	adc	r25, r25
    4498:	1a f0       	brmi	.+6      	; 0x44a0 <__fixunssfsi+0x22>
    449a:	ba 95       	dec	r27
    449c:	c9 f7       	brne	.-14     	; 0x4490 <__fixunssfsi+0x12>
    449e:	12 c0       	rjmp	.+36     	; 0x44c4 <__fixunssfsi+0x46>
    44a0:	b1 30       	cpi	r27, 0x01	; 1
    44a2:	81 f0       	breq	.+32     	; 0x44c4 <__fixunssfsi+0x46>
    44a4:	c3 d0       	rcall	.+390    	; 0x462c <__fp_zero>
    44a6:	b1 e0       	ldi	r27, 0x01	; 1
    44a8:	08 95       	ret
    44aa:	c0 c0       	rjmp	.+384    	; 0x462c <__fp_zero>
    44ac:	67 2f       	mov	r22, r23
    44ae:	78 2f       	mov	r23, r24
    44b0:	88 27       	eor	r24, r24
    44b2:	b8 5f       	subi	r27, 0xF8	; 248
    44b4:	39 f0       	breq	.+14     	; 0x44c4 <__fixunssfsi+0x46>
    44b6:	b9 3f       	cpi	r27, 0xF9	; 249
    44b8:	cc f3       	brlt	.-14     	; 0x44ac <__fixunssfsi+0x2e>
    44ba:	86 95       	lsr	r24
    44bc:	77 95       	ror	r23
    44be:	67 95       	ror	r22
    44c0:	b3 95       	inc	r27
    44c2:	d9 f7       	brne	.-10     	; 0x44ba <__fixunssfsi+0x3c>
    44c4:	3e f4       	brtc	.+14     	; 0x44d4 <__fixunssfsi+0x56>
    44c6:	90 95       	com	r25
    44c8:	80 95       	com	r24
    44ca:	70 95       	com	r23
    44cc:	61 95       	neg	r22
    44ce:	7f 4f       	sbci	r23, 0xFF	; 255
    44d0:	8f 4f       	sbci	r24, 0xFF	; 255
    44d2:	9f 4f       	sbci	r25, 0xFF	; 255
    44d4:	08 95       	ret

000044d6 <__floatunsisf>:
    44d6:	e8 94       	clt
    44d8:	09 c0       	rjmp	.+18     	; 0x44ec <__floatsisf+0x12>

000044da <__floatsisf>:
    44da:	97 fb       	bst	r25, 7
    44dc:	3e f4       	brtc	.+14     	; 0x44ec <__floatsisf+0x12>
    44de:	90 95       	com	r25
    44e0:	80 95       	com	r24
    44e2:	70 95       	com	r23
    44e4:	61 95       	neg	r22
    44e6:	7f 4f       	sbci	r23, 0xFF	; 255
    44e8:	8f 4f       	sbci	r24, 0xFF	; 255
    44ea:	9f 4f       	sbci	r25, 0xFF	; 255
    44ec:	99 23       	and	r25, r25
    44ee:	a9 f0       	breq	.+42     	; 0x451a <__floatsisf+0x40>
    44f0:	f9 2f       	mov	r31, r25
    44f2:	96 e9       	ldi	r25, 0x96	; 150
    44f4:	bb 27       	eor	r27, r27
    44f6:	93 95       	inc	r25
    44f8:	f6 95       	lsr	r31
    44fa:	87 95       	ror	r24
    44fc:	77 95       	ror	r23
    44fe:	67 95       	ror	r22
    4500:	b7 95       	ror	r27
    4502:	f1 11       	cpse	r31, r1
    4504:	f8 cf       	rjmp	.-16     	; 0x44f6 <__floatsisf+0x1c>
    4506:	fa f4       	brpl	.+62     	; 0x4546 <__floatsisf+0x6c>
    4508:	bb 0f       	add	r27, r27
    450a:	11 f4       	brne	.+4      	; 0x4510 <__floatsisf+0x36>
    450c:	60 ff       	sbrs	r22, 0
    450e:	1b c0       	rjmp	.+54     	; 0x4546 <__floatsisf+0x6c>
    4510:	6f 5f       	subi	r22, 0xFF	; 255
    4512:	7f 4f       	sbci	r23, 0xFF	; 255
    4514:	8f 4f       	sbci	r24, 0xFF	; 255
    4516:	9f 4f       	sbci	r25, 0xFF	; 255
    4518:	16 c0       	rjmp	.+44     	; 0x4546 <__floatsisf+0x6c>
    451a:	88 23       	and	r24, r24
    451c:	11 f0       	breq	.+4      	; 0x4522 <__floatsisf+0x48>
    451e:	96 e9       	ldi	r25, 0x96	; 150
    4520:	11 c0       	rjmp	.+34     	; 0x4544 <__floatsisf+0x6a>
    4522:	77 23       	and	r23, r23
    4524:	21 f0       	breq	.+8      	; 0x452e <__floatsisf+0x54>
    4526:	9e e8       	ldi	r25, 0x8E	; 142
    4528:	87 2f       	mov	r24, r23
    452a:	76 2f       	mov	r23, r22
    452c:	05 c0       	rjmp	.+10     	; 0x4538 <__floatsisf+0x5e>
    452e:	66 23       	and	r22, r22
    4530:	71 f0       	breq	.+28     	; 0x454e <__floatsisf+0x74>
    4532:	96 e8       	ldi	r25, 0x86	; 134
    4534:	86 2f       	mov	r24, r22
    4536:	70 e0       	ldi	r23, 0x00	; 0
    4538:	60 e0       	ldi	r22, 0x00	; 0
    453a:	2a f0       	brmi	.+10     	; 0x4546 <__floatsisf+0x6c>
    453c:	9a 95       	dec	r25
    453e:	66 0f       	add	r22, r22
    4540:	77 1f       	adc	r23, r23
    4542:	88 1f       	adc	r24, r24
    4544:	da f7       	brpl	.-10     	; 0x453c <__floatsisf+0x62>
    4546:	88 0f       	add	r24, r24
    4548:	96 95       	lsr	r25
    454a:	87 95       	ror	r24
    454c:	97 f9       	bld	r25, 7
    454e:	08 95       	ret

00004550 <__fp_cmp>:
    4550:	99 0f       	add	r25, r25
    4552:	00 08       	sbc	r0, r0
    4554:	55 0f       	add	r21, r21
    4556:	aa 0b       	sbc	r26, r26
    4558:	e0 e8       	ldi	r30, 0x80	; 128
    455a:	fe ef       	ldi	r31, 0xFE	; 254
    455c:	16 16       	cp	r1, r22
    455e:	17 06       	cpc	r1, r23
    4560:	e8 07       	cpc	r30, r24
    4562:	f9 07       	cpc	r31, r25
    4564:	c0 f0       	brcs	.+48     	; 0x4596 <__fp_cmp+0x46>
    4566:	12 16       	cp	r1, r18
    4568:	13 06       	cpc	r1, r19
    456a:	e4 07       	cpc	r30, r20
    456c:	f5 07       	cpc	r31, r21
    456e:	98 f0       	brcs	.+38     	; 0x4596 <__fp_cmp+0x46>
    4570:	62 1b       	sub	r22, r18
    4572:	73 0b       	sbc	r23, r19
    4574:	84 0b       	sbc	r24, r20
    4576:	95 0b       	sbc	r25, r21
    4578:	39 f4       	brne	.+14     	; 0x4588 <__fp_cmp+0x38>
    457a:	0a 26       	eor	r0, r26
    457c:	61 f0       	breq	.+24     	; 0x4596 <__fp_cmp+0x46>
    457e:	23 2b       	or	r18, r19
    4580:	24 2b       	or	r18, r20
    4582:	25 2b       	or	r18, r21
    4584:	21 f4       	brne	.+8      	; 0x458e <__fp_cmp+0x3e>
    4586:	08 95       	ret
    4588:	0a 26       	eor	r0, r26
    458a:	09 f4       	brne	.+2      	; 0x458e <__fp_cmp+0x3e>
    458c:	a1 40       	sbci	r26, 0x01	; 1
    458e:	a6 95       	lsr	r26
    4590:	8f ef       	ldi	r24, 0xFF	; 255
    4592:	81 1d       	adc	r24, r1
    4594:	81 1d       	adc	r24, r1
    4596:	08 95       	ret

00004598 <__fp_inf>:
    4598:	97 f9       	bld	r25, 7
    459a:	9f 67       	ori	r25, 0x7F	; 127
    459c:	80 e8       	ldi	r24, 0x80	; 128
    459e:	70 e0       	ldi	r23, 0x00	; 0
    45a0:	60 e0       	ldi	r22, 0x00	; 0
    45a2:	08 95       	ret

000045a4 <__fp_nan>:
    45a4:	9f ef       	ldi	r25, 0xFF	; 255
    45a6:	80 ec       	ldi	r24, 0xC0	; 192
    45a8:	08 95       	ret

000045aa <__fp_pscA>:
    45aa:	00 24       	eor	r0, r0
    45ac:	0a 94       	dec	r0
    45ae:	16 16       	cp	r1, r22
    45b0:	17 06       	cpc	r1, r23
    45b2:	18 06       	cpc	r1, r24
    45b4:	09 06       	cpc	r0, r25
    45b6:	08 95       	ret

000045b8 <__fp_pscB>:
    45b8:	00 24       	eor	r0, r0
    45ba:	0a 94       	dec	r0
    45bc:	12 16       	cp	r1, r18
    45be:	13 06       	cpc	r1, r19
    45c0:	14 06       	cpc	r1, r20
    45c2:	05 06       	cpc	r0, r21
    45c4:	08 95       	ret

000045c6 <__fp_round>:
    45c6:	09 2e       	mov	r0, r25
    45c8:	03 94       	inc	r0
    45ca:	00 0c       	add	r0, r0
    45cc:	11 f4       	brne	.+4      	; 0x45d2 <__fp_round+0xc>
    45ce:	88 23       	and	r24, r24
    45d0:	52 f0       	brmi	.+20     	; 0x45e6 <__fp_round+0x20>
    45d2:	bb 0f       	add	r27, r27
    45d4:	40 f4       	brcc	.+16     	; 0x45e6 <__fp_round+0x20>
    45d6:	bf 2b       	or	r27, r31
    45d8:	11 f4       	brne	.+4      	; 0x45de <__fp_round+0x18>
    45da:	60 ff       	sbrs	r22, 0
    45dc:	04 c0       	rjmp	.+8      	; 0x45e6 <__fp_round+0x20>
    45de:	6f 5f       	subi	r22, 0xFF	; 255
    45e0:	7f 4f       	sbci	r23, 0xFF	; 255
    45e2:	8f 4f       	sbci	r24, 0xFF	; 255
    45e4:	9f 4f       	sbci	r25, 0xFF	; 255
    45e6:	08 95       	ret

000045e8 <__fp_split3>:
    45e8:	57 fd       	sbrc	r21, 7
    45ea:	90 58       	subi	r25, 0x80	; 128
    45ec:	44 0f       	add	r20, r20
    45ee:	55 1f       	adc	r21, r21
    45f0:	59 f0       	breq	.+22     	; 0x4608 <__fp_splitA+0x10>
    45f2:	5f 3f       	cpi	r21, 0xFF	; 255
    45f4:	71 f0       	breq	.+28     	; 0x4612 <__fp_splitA+0x1a>
    45f6:	47 95       	ror	r20

000045f8 <__fp_splitA>:
    45f8:	88 0f       	add	r24, r24
    45fa:	97 fb       	bst	r25, 7
    45fc:	99 1f       	adc	r25, r25
    45fe:	61 f0       	breq	.+24     	; 0x4618 <__fp_splitA+0x20>
    4600:	9f 3f       	cpi	r25, 0xFF	; 255
    4602:	79 f0       	breq	.+30     	; 0x4622 <__fp_splitA+0x2a>
    4604:	87 95       	ror	r24
    4606:	08 95       	ret
    4608:	12 16       	cp	r1, r18
    460a:	13 06       	cpc	r1, r19
    460c:	14 06       	cpc	r1, r20
    460e:	55 1f       	adc	r21, r21
    4610:	f2 cf       	rjmp	.-28     	; 0x45f6 <__fp_split3+0xe>
    4612:	46 95       	lsr	r20
    4614:	f1 df       	rcall	.-30     	; 0x45f8 <__fp_splitA>
    4616:	08 c0       	rjmp	.+16     	; 0x4628 <__fp_splitA+0x30>
    4618:	16 16       	cp	r1, r22
    461a:	17 06       	cpc	r1, r23
    461c:	18 06       	cpc	r1, r24
    461e:	99 1f       	adc	r25, r25
    4620:	f1 cf       	rjmp	.-30     	; 0x4604 <__fp_splitA+0xc>
    4622:	86 95       	lsr	r24
    4624:	71 05       	cpc	r23, r1
    4626:	61 05       	cpc	r22, r1
    4628:	08 94       	sec
    462a:	08 95       	ret

0000462c <__fp_zero>:
    462c:	e8 94       	clt

0000462e <__fp_szero>:
    462e:	bb 27       	eor	r27, r27
    4630:	66 27       	eor	r22, r22
    4632:	77 27       	eor	r23, r23
    4634:	cb 01       	movw	r24, r22
    4636:	97 f9       	bld	r25, 7
    4638:	08 95       	ret

0000463a <__gesf2>:
    463a:	8a df       	rcall	.-236    	; 0x4550 <__fp_cmp>
    463c:	08 f4       	brcc	.+2      	; 0x4640 <__gesf2+0x6>
    463e:	8f ef       	ldi	r24, 0xFF	; 255
    4640:	08 95       	ret

00004642 <__mulsf3>:
    4642:	0b d0       	rcall	.+22     	; 0x465a <__mulsf3x>
    4644:	c0 cf       	rjmp	.-128    	; 0x45c6 <__fp_round>
    4646:	b1 df       	rcall	.-158    	; 0x45aa <__fp_pscA>
    4648:	28 f0       	brcs	.+10     	; 0x4654 <__mulsf3+0x12>
    464a:	b6 df       	rcall	.-148    	; 0x45b8 <__fp_pscB>
    464c:	18 f0       	brcs	.+6      	; 0x4654 <__mulsf3+0x12>
    464e:	95 23       	and	r25, r21
    4650:	09 f0       	breq	.+2      	; 0x4654 <__mulsf3+0x12>
    4652:	a2 cf       	rjmp	.-188    	; 0x4598 <__fp_inf>
    4654:	a7 cf       	rjmp	.-178    	; 0x45a4 <__fp_nan>
    4656:	11 24       	eor	r1, r1
    4658:	ea cf       	rjmp	.-44     	; 0x462e <__fp_szero>

0000465a <__mulsf3x>:
    465a:	c6 df       	rcall	.-116    	; 0x45e8 <__fp_split3>
    465c:	a0 f3       	brcs	.-24     	; 0x4646 <__mulsf3+0x4>

0000465e <__mulsf3_pse>:
    465e:	95 9f       	mul	r25, r21
    4660:	d1 f3       	breq	.-12     	; 0x4656 <__mulsf3+0x14>
    4662:	95 0f       	add	r25, r21
    4664:	50 e0       	ldi	r21, 0x00	; 0
    4666:	55 1f       	adc	r21, r21
    4668:	62 9f       	mul	r22, r18
    466a:	f0 01       	movw	r30, r0
    466c:	72 9f       	mul	r23, r18
    466e:	bb 27       	eor	r27, r27
    4670:	f0 0d       	add	r31, r0
    4672:	b1 1d       	adc	r27, r1
    4674:	63 9f       	mul	r22, r19
    4676:	aa 27       	eor	r26, r26
    4678:	f0 0d       	add	r31, r0
    467a:	b1 1d       	adc	r27, r1
    467c:	aa 1f       	adc	r26, r26
    467e:	64 9f       	mul	r22, r20
    4680:	66 27       	eor	r22, r22
    4682:	b0 0d       	add	r27, r0
    4684:	a1 1d       	adc	r26, r1
    4686:	66 1f       	adc	r22, r22
    4688:	82 9f       	mul	r24, r18
    468a:	22 27       	eor	r18, r18
    468c:	b0 0d       	add	r27, r0
    468e:	a1 1d       	adc	r26, r1
    4690:	62 1f       	adc	r22, r18
    4692:	73 9f       	mul	r23, r19
    4694:	b0 0d       	add	r27, r0
    4696:	a1 1d       	adc	r26, r1
    4698:	62 1f       	adc	r22, r18
    469a:	83 9f       	mul	r24, r19
    469c:	a0 0d       	add	r26, r0
    469e:	61 1d       	adc	r22, r1
    46a0:	22 1f       	adc	r18, r18
    46a2:	74 9f       	mul	r23, r20
    46a4:	33 27       	eor	r19, r19
    46a6:	a0 0d       	add	r26, r0
    46a8:	61 1d       	adc	r22, r1
    46aa:	23 1f       	adc	r18, r19
    46ac:	84 9f       	mul	r24, r20
    46ae:	60 0d       	add	r22, r0
    46b0:	21 1d       	adc	r18, r1
    46b2:	82 2f       	mov	r24, r18
    46b4:	76 2f       	mov	r23, r22
    46b6:	6a 2f       	mov	r22, r26
    46b8:	11 24       	eor	r1, r1
    46ba:	9f 57       	subi	r25, 0x7F	; 127
    46bc:	50 40       	sbci	r21, 0x00	; 0
    46be:	8a f0       	brmi	.+34     	; 0x46e2 <__mulsf3_pse+0x84>
    46c0:	e1 f0       	breq	.+56     	; 0x46fa <__mulsf3_pse+0x9c>
    46c2:	88 23       	and	r24, r24
    46c4:	4a f0       	brmi	.+18     	; 0x46d8 <__mulsf3_pse+0x7a>
    46c6:	ee 0f       	add	r30, r30
    46c8:	ff 1f       	adc	r31, r31
    46ca:	bb 1f       	adc	r27, r27
    46cc:	66 1f       	adc	r22, r22
    46ce:	77 1f       	adc	r23, r23
    46d0:	88 1f       	adc	r24, r24
    46d2:	91 50       	subi	r25, 0x01	; 1
    46d4:	50 40       	sbci	r21, 0x00	; 0
    46d6:	a9 f7       	brne	.-22     	; 0x46c2 <__mulsf3_pse+0x64>
    46d8:	9e 3f       	cpi	r25, 0xFE	; 254
    46da:	51 05       	cpc	r21, r1
    46dc:	70 f0       	brcs	.+28     	; 0x46fa <__mulsf3_pse+0x9c>
    46de:	5c cf       	rjmp	.-328    	; 0x4598 <__fp_inf>
    46e0:	a6 cf       	rjmp	.-180    	; 0x462e <__fp_szero>
    46e2:	5f 3f       	cpi	r21, 0xFF	; 255
    46e4:	ec f3       	brlt	.-6      	; 0x46e0 <__mulsf3_pse+0x82>
    46e6:	98 3e       	cpi	r25, 0xE8	; 232
    46e8:	dc f3       	brlt	.-10     	; 0x46e0 <__mulsf3_pse+0x82>
    46ea:	86 95       	lsr	r24
    46ec:	77 95       	ror	r23
    46ee:	67 95       	ror	r22
    46f0:	b7 95       	ror	r27
    46f2:	f7 95       	ror	r31
    46f4:	e7 95       	ror	r30
    46f6:	9f 5f       	subi	r25, 0xFF	; 255
    46f8:	c1 f7       	brne	.-16     	; 0x46ea <__mulsf3_pse+0x8c>
    46fa:	fe 2b       	or	r31, r30
    46fc:	88 0f       	add	r24, r24
    46fe:	91 1d       	adc	r25, r1
    4700:	96 95       	lsr	r25
    4702:	87 95       	ror	r24
    4704:	97 f9       	bld	r25, 7
    4706:	08 95       	ret

00004708 <__unordsf2>:
    4708:	23 df       	rcall	.-442    	; 0x4550 <__fp_cmp>
    470a:	88 0b       	sbc	r24, r24
    470c:	99 0b       	sbc	r25, r25
    470e:	08 95       	ret

00004710 <__mulsi3>:
    4710:	db 01       	movw	r26, r22
    4712:	8f 93       	push	r24
    4714:	9f 93       	push	r25
    4716:	44 d0       	rcall	.+136    	; 0x47a0 <__muluhisi3>
    4718:	bf 91       	pop	r27
    471a:	af 91       	pop	r26
    471c:	a2 9f       	mul	r26, r18
    471e:	80 0d       	add	r24, r0
    4720:	91 1d       	adc	r25, r1
    4722:	a3 9f       	mul	r26, r19
    4724:	90 0d       	add	r25, r0
    4726:	b2 9f       	mul	r27, r18
    4728:	90 0d       	add	r25, r0
    472a:	11 24       	eor	r1, r1
    472c:	08 95       	ret

0000472e <__udivmodsi4>:
    472e:	a1 e2       	ldi	r26, 0x21	; 33
    4730:	1a 2e       	mov	r1, r26
    4732:	aa 1b       	sub	r26, r26
    4734:	bb 1b       	sub	r27, r27
    4736:	fd 01       	movw	r30, r26
    4738:	0d c0       	rjmp	.+26     	; 0x4754 <__udivmodsi4_ep>

0000473a <__udivmodsi4_loop>:
    473a:	aa 1f       	adc	r26, r26
    473c:	bb 1f       	adc	r27, r27
    473e:	ee 1f       	adc	r30, r30
    4740:	ff 1f       	adc	r31, r31
    4742:	a2 17       	cp	r26, r18
    4744:	b3 07       	cpc	r27, r19
    4746:	e4 07       	cpc	r30, r20
    4748:	f5 07       	cpc	r31, r21
    474a:	20 f0       	brcs	.+8      	; 0x4754 <__udivmodsi4_ep>
    474c:	a2 1b       	sub	r26, r18
    474e:	b3 0b       	sbc	r27, r19
    4750:	e4 0b       	sbc	r30, r20
    4752:	f5 0b       	sbc	r31, r21

00004754 <__udivmodsi4_ep>:
    4754:	66 1f       	adc	r22, r22
    4756:	77 1f       	adc	r23, r23
    4758:	88 1f       	adc	r24, r24
    475a:	99 1f       	adc	r25, r25
    475c:	1a 94       	dec	r1
    475e:	69 f7       	brne	.-38     	; 0x473a <__udivmodsi4_loop>
    4760:	60 95       	com	r22
    4762:	70 95       	com	r23
    4764:	80 95       	com	r24
    4766:	90 95       	com	r25
    4768:	9b 01       	movw	r18, r22
    476a:	ac 01       	movw	r20, r24
    476c:	bd 01       	movw	r22, r26
    476e:	cf 01       	movw	r24, r30
    4770:	08 95       	ret

00004772 <__tablejump2__>:
    4772:	ee 0f       	add	r30, r30
    4774:	ff 1f       	adc	r31, r31
    4776:	88 1f       	adc	r24, r24
    4778:	8b bf       	out	0x3b, r24	; 59
    477a:	07 90       	elpm	r0, Z+
    477c:	f6 91       	elpm	r31, Z
    477e:	e0 2d       	mov	r30, r0
    4780:	19 94       	eijmp

00004782 <__umulhisi3>:
    4782:	a2 9f       	mul	r26, r18
    4784:	b0 01       	movw	r22, r0
    4786:	b3 9f       	mul	r27, r19
    4788:	c0 01       	movw	r24, r0
    478a:	a3 9f       	mul	r26, r19
    478c:	70 0d       	add	r23, r0
    478e:	81 1d       	adc	r24, r1
    4790:	11 24       	eor	r1, r1
    4792:	91 1d       	adc	r25, r1
    4794:	b2 9f       	mul	r27, r18
    4796:	70 0d       	add	r23, r0
    4798:	81 1d       	adc	r24, r1
    479a:	11 24       	eor	r1, r1
    479c:	91 1d       	adc	r25, r1
    479e:	08 95       	ret

000047a0 <__muluhisi3>:
    47a0:	f0 df       	rcall	.-32     	; 0x4782 <__umulhisi3>
    47a2:	a5 9f       	mul	r26, r21
    47a4:	90 0d       	add	r25, r0
    47a6:	b4 9f       	mul	r27, r20
    47a8:	90 0d       	add	r25, r0
    47aa:	a4 9f       	mul	r26, r20
    47ac:	80 0d       	add	r24, r0
    47ae:	91 1d       	adc	r25, r1
    47b0:	11 24       	eor	r1, r1
    47b2:	08 95       	ret

000047b4 <__muldi3>:
    47b4:	df 93       	push	r29
    47b6:	cf 93       	push	r28
    47b8:	1f 93       	push	r17
    47ba:	0f 93       	push	r16
    47bc:	9a 9d       	mul	r25, r10
    47be:	f0 2d       	mov	r31, r0
    47c0:	21 9f       	mul	r18, r17
    47c2:	f0 0d       	add	r31, r0
    47c4:	8b 9d       	mul	r24, r11
    47c6:	f0 0d       	add	r31, r0
    47c8:	8a 9d       	mul	r24, r10
    47ca:	e0 2d       	mov	r30, r0
    47cc:	f1 0d       	add	r31, r1
    47ce:	03 9f       	mul	r16, r19
    47d0:	f0 0d       	add	r31, r0
    47d2:	02 9f       	mul	r16, r18
    47d4:	e0 0d       	add	r30, r0
    47d6:	f1 1d       	adc	r31, r1
    47d8:	4e 9d       	mul	r20, r14
    47da:	e0 0d       	add	r30, r0
    47dc:	f1 1d       	adc	r31, r1
    47de:	5e 9d       	mul	r21, r14
    47e0:	f0 0d       	add	r31, r0
    47e2:	4f 9d       	mul	r20, r15
    47e4:	f0 0d       	add	r31, r0
    47e6:	7f 93       	push	r23
    47e8:	6f 93       	push	r22
    47ea:	bf 92       	push	r11
    47ec:	af 92       	push	r10
    47ee:	5f 93       	push	r21
    47f0:	4f 93       	push	r20
    47f2:	d5 01       	movw	r26, r10
    47f4:	c6 df       	rcall	.-116    	; 0x4782 <__umulhisi3>
    47f6:	8b 01       	movw	r16, r22
    47f8:	ac 01       	movw	r20, r24
    47fa:	d7 01       	movw	r26, r14
    47fc:	c2 df       	rcall	.-124    	; 0x4782 <__umulhisi3>
    47fe:	eb 01       	movw	r28, r22
    4800:	e8 0f       	add	r30, r24
    4802:	f9 1f       	adc	r31, r25
    4804:	d6 01       	movw	r26, r12
    4806:	1f d0       	rcall	.+62     	; 0x4846 <__muldi3_6>
    4808:	2f 91       	pop	r18
    480a:	3f 91       	pop	r19
    480c:	d6 01       	movw	r26, r12
    480e:	b9 df       	rcall	.-142    	; 0x4782 <__umulhisi3>
    4810:	c6 0f       	add	r28, r22
    4812:	d7 1f       	adc	r29, r23
    4814:	e8 1f       	adc	r30, r24
    4816:	f9 1f       	adc	r31, r25
    4818:	af 91       	pop	r26
    481a:	bf 91       	pop	r27
    481c:	14 d0       	rcall	.+40     	; 0x4846 <__muldi3_6>
    481e:	2f 91       	pop	r18
    4820:	3f 91       	pop	r19
    4822:	af df       	rcall	.-162    	; 0x4782 <__umulhisi3>
    4824:	c6 0f       	add	r28, r22
    4826:	d7 1f       	adc	r29, r23
    4828:	e8 1f       	adc	r30, r24
    482a:	f9 1f       	adc	r31, r25
    482c:	d6 01       	movw	r26, r12
    482e:	a9 df       	rcall	.-174    	; 0x4782 <__umulhisi3>
    4830:	e6 0f       	add	r30, r22
    4832:	f7 1f       	adc	r31, r23
    4834:	98 01       	movw	r18, r16
    4836:	be 01       	movw	r22, r28
    4838:	cf 01       	movw	r24, r30
    483a:	11 24       	eor	r1, r1
    483c:	0f 91       	pop	r16
    483e:	1f 91       	pop	r17
    4840:	cf 91       	pop	r28
    4842:	df 91       	pop	r29
    4844:	08 95       	ret

00004846 <__muldi3_6>:
    4846:	9d df       	rcall	.-198    	; 0x4782 <__umulhisi3>
    4848:	46 0f       	add	r20, r22
    484a:	57 1f       	adc	r21, r23
    484c:	c8 1f       	adc	r28, r24
    484e:	d9 1f       	adc	r29, r25
    4850:	08 f4       	brcc	.+2      	; 0x4854 <__muldi3_6+0xe>
    4852:	31 96       	adiw	r30, 0x01	; 1
    4854:	08 95       	ret

00004856 <__ashldi3>:
    4856:	0f 93       	push	r16
    4858:	08 30       	cpi	r16, 0x08	; 8
    485a:	90 f0       	brcs	.+36     	; 0x4880 <__ashldi3+0x2a>
    485c:	98 2f       	mov	r25, r24
    485e:	87 2f       	mov	r24, r23
    4860:	76 2f       	mov	r23, r22
    4862:	65 2f       	mov	r22, r21
    4864:	54 2f       	mov	r21, r20
    4866:	43 2f       	mov	r20, r19
    4868:	32 2f       	mov	r19, r18
    486a:	22 27       	eor	r18, r18
    486c:	08 50       	subi	r16, 0x08	; 8
    486e:	f4 cf       	rjmp	.-24     	; 0x4858 <__ashldi3+0x2>
    4870:	22 0f       	add	r18, r18
    4872:	33 1f       	adc	r19, r19
    4874:	44 1f       	adc	r20, r20
    4876:	55 1f       	adc	r21, r21
    4878:	66 1f       	adc	r22, r22
    487a:	77 1f       	adc	r23, r23
    487c:	88 1f       	adc	r24, r24
    487e:	99 1f       	adc	r25, r25
    4880:	0a 95       	dec	r16
    4882:	b2 f7       	brpl	.-20     	; 0x4870 <__ashldi3+0x1a>
    4884:	0f 91       	pop	r16
    4886:	08 95       	ret

00004888 <__ashrdi3>:
    4888:	97 fb       	bst	r25, 7
    488a:	10 f8       	bld	r1, 0

0000488c <__lshrdi3>:
    488c:	16 94       	lsr	r1
    488e:	00 08       	sbc	r0, r0
    4890:	0f 93       	push	r16
    4892:	08 30       	cpi	r16, 0x08	; 8
    4894:	98 f0       	brcs	.+38     	; 0x48bc <__lshrdi3+0x30>
    4896:	08 50       	subi	r16, 0x08	; 8
    4898:	23 2f       	mov	r18, r19
    489a:	34 2f       	mov	r19, r20
    489c:	45 2f       	mov	r20, r21
    489e:	56 2f       	mov	r21, r22
    48a0:	67 2f       	mov	r22, r23
    48a2:	78 2f       	mov	r23, r24
    48a4:	89 2f       	mov	r24, r25
    48a6:	90 2d       	mov	r25, r0
    48a8:	f4 cf       	rjmp	.-24     	; 0x4892 <__lshrdi3+0x6>
    48aa:	05 94       	asr	r0
    48ac:	97 95       	ror	r25
    48ae:	87 95       	ror	r24
    48b0:	77 95       	ror	r23
    48b2:	67 95       	ror	r22
    48b4:	57 95       	ror	r21
    48b6:	47 95       	ror	r20
    48b8:	37 95       	ror	r19
    48ba:	27 95       	ror	r18
    48bc:	0a 95       	dec	r16
    48be:	aa f7       	brpl	.-22     	; 0x48aa <__lshrdi3+0x1e>
    48c0:	0f 91       	pop	r16
    48c2:	08 95       	ret

000048c4 <__adddi3>:
    48c4:	2a 0d       	add	r18, r10
    48c6:	3b 1d       	adc	r19, r11
    48c8:	4c 1d       	adc	r20, r12
    48ca:	5d 1d       	adc	r21, r13
    48cc:	6e 1d       	adc	r22, r14
    48ce:	7f 1d       	adc	r23, r15
    48d0:	80 1f       	adc	r24, r16
    48d2:	91 1f       	adc	r25, r17
    48d4:	08 95       	ret

000048d6 <__adddi3_s8>:
    48d6:	00 24       	eor	r0, r0
    48d8:	a7 fd       	sbrc	r26, 7
    48da:	00 94       	com	r0
    48dc:	2a 0f       	add	r18, r26
    48de:	30 1d       	adc	r19, r0
    48e0:	40 1d       	adc	r20, r0
    48e2:	50 1d       	adc	r21, r0
    48e4:	60 1d       	adc	r22, r0
    48e6:	70 1d       	adc	r23, r0
    48e8:	80 1d       	adc	r24, r0
    48ea:	90 1d       	adc	r25, r0
    48ec:	08 95       	ret

000048ee <__subdi3>:
    48ee:	2a 19       	sub	r18, r10
    48f0:	3b 09       	sbc	r19, r11
    48f2:	4c 09       	sbc	r20, r12
    48f4:	5d 09       	sbc	r21, r13
    48f6:	6e 09       	sbc	r22, r14
    48f8:	7f 09       	sbc	r23, r15
    48fa:	80 0b       	sbc	r24, r16
    48fc:	91 0b       	sbc	r25, r17
    48fe:	08 95       	ret

00004900 <__cmpdi2_s8>:
    4900:	00 24       	eor	r0, r0
    4902:	a7 fd       	sbrc	r26, 7
    4904:	00 94       	com	r0
    4906:	2a 17       	cp	r18, r26
    4908:	30 05       	cpc	r19, r0
    490a:	40 05       	cpc	r20, r0
    490c:	50 05       	cpc	r21, r0
    490e:	60 05       	cpc	r22, r0
    4910:	70 05       	cpc	r23, r0
    4912:	80 05       	cpc	r24, r0
    4914:	90 05       	cpc	r25, r0
    4916:	08 95       	ret

00004918 <memcpy_P>:
    4918:	fb 01       	movw	r30, r22
    491a:	dc 01       	movw	r26, r24
    491c:	02 c0       	rjmp	.+4      	; 0x4922 <memcpy_P+0xa>
    491e:	05 90       	lpm	r0, Z+
    4920:	0d 92       	st	X+, r0
    4922:	41 50       	subi	r20, 0x01	; 1
    4924:	50 40       	sbci	r21, 0x00	; 0
    4926:	d8 f7       	brcc	.-10     	; 0x491e <memcpy_P+0x6>
    4928:	08 95       	ret

0000492a <memcmp>:
    492a:	fb 01       	movw	r30, r22
    492c:	dc 01       	movw	r26, r24
    492e:	04 c0       	rjmp	.+8      	; 0x4938 <memcmp+0xe>
    4930:	8d 91       	ld	r24, X+
    4932:	01 90       	ld	r0, Z+
    4934:	80 19       	sub	r24, r0
    4936:	21 f4       	brne	.+8      	; 0x4940 <memcmp+0x16>
    4938:	41 50       	subi	r20, 0x01	; 1
    493a:	50 40       	sbci	r21, 0x00	; 0
    493c:	c8 f7       	brcc	.-14     	; 0x4930 <memcmp+0x6>
    493e:	88 1b       	sub	r24, r24
    4940:	99 0b       	sbc	r25, r25
    4942:	08 95       	ret

00004944 <strncpy>:
    4944:	fb 01       	movw	r30, r22
    4946:	dc 01       	movw	r26, r24
    4948:	41 50       	subi	r20, 0x01	; 1
    494a:	50 40       	sbci	r21, 0x00	; 0
    494c:	48 f0       	brcs	.+18     	; 0x4960 <strncpy+0x1c>
    494e:	01 90       	ld	r0, Z+
    4950:	0d 92       	st	X+, r0
    4952:	00 20       	and	r0, r0
    4954:	c9 f7       	brne	.-14     	; 0x4948 <strncpy+0x4>
    4956:	01 c0       	rjmp	.+2      	; 0x495a <strncpy+0x16>
    4958:	1d 92       	st	X+, r1
    495a:	41 50       	subi	r20, 0x01	; 1
    495c:	50 40       	sbci	r21, 0x00	; 0
    495e:	e0 f7       	brcc	.-8      	; 0x4958 <strncpy+0x14>
    4960:	08 95       	ret

00004962 <_exit>:
    4962:	f8 94       	cli

00004964 <__stop_program>:
    4964:	ff cf       	rjmp	.-2      	; 0x4964 <__stop_program>
