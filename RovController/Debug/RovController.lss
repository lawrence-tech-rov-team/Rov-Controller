
RovController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002e8  00800200  00005406  0000549a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005406  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000775  008004e8  008004e8  00005782  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00005782  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000057b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000a48  00000000  00000000  000057f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000187b1  00000000  00000000  0000623c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005204  00000000  00000000  0001e9ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006276  00000000  00000000  00023bf1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001ec4  00000000  00000000  00029e68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00006c91  00000000  00000000  0002bd2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000bfe5  00000000  00000000  000329bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000980  00000000  00000000  0003e9a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4a c1       	rjmp	.+660    	; 0x296 <__ctors_end>
       2:	00 00       	nop
       4:	79 c1       	rjmp	.+754    	; 0x2f8 <__bad_interrupt>
       6:	00 00       	nop
       8:	77 c1       	rjmp	.+750    	; 0x2f8 <__bad_interrupt>
       a:	00 00       	nop
       c:	75 c1       	rjmp	.+746    	; 0x2f8 <__bad_interrupt>
       e:	00 00       	nop
      10:	73 c1       	rjmp	.+742    	; 0x2f8 <__bad_interrupt>
      12:	00 00       	nop
      14:	71 c1       	rjmp	.+738    	; 0x2f8 <__bad_interrupt>
      16:	00 00       	nop
      18:	6f c1       	rjmp	.+734    	; 0x2f8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	6d c1       	rjmp	.+730    	; 0x2f8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	6b c1       	rjmp	.+726    	; 0x2f8 <__bad_interrupt>
      22:	00 00       	nop
      24:	69 c1       	rjmp	.+722    	; 0x2f8 <__bad_interrupt>
      26:	00 00       	nop
      28:	67 c1       	rjmp	.+718    	; 0x2f8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	65 c1       	rjmp	.+714    	; 0x2f8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	63 c1       	rjmp	.+710    	; 0x2f8 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 10 0f 	jmp	0x1e20	; 0x1e20 <__vector_13>
      38:	5f c1       	rjmp	.+702    	; 0x2f8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	5d c1       	rjmp	.+698    	; 0x2f8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	5b c1       	rjmp	.+694    	; 0x2f8 <__bad_interrupt>
      42:	00 00       	nop
      44:	59 c1       	rjmp	.+690    	; 0x2f8 <__bad_interrupt>
      46:	00 00       	nop
      48:	57 c1       	rjmp	.+686    	; 0x2f8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	55 c1       	rjmp	.+682    	; 0x2f8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	53 c1       	rjmp	.+678    	; 0x2f8 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 e7 0e 	jmp	0x1dce	; 0x1dce <__vector_21>
      58:	4f c1       	rjmp	.+670    	; 0x2f8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	4d c1       	rjmp	.+666    	; 0x2f8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	4b c1       	rjmp	.+662    	; 0x2f8 <__bad_interrupt>
      62:	00 00       	nop
      64:	49 c1       	rjmp	.+658    	; 0x2f8 <__bad_interrupt>
      66:	00 00       	nop
      68:	47 c1       	rjmp	.+654    	; 0x2f8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	45 c1       	rjmp	.+650    	; 0x2f8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	43 c1       	rjmp	.+646    	; 0x2f8 <__bad_interrupt>
      72:	00 00       	nop
      74:	41 c1       	rjmp	.+642    	; 0x2f8 <__bad_interrupt>
      76:	00 00       	nop
      78:	3f c1       	rjmp	.+638    	; 0x2f8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	3d c1       	rjmp	.+634    	; 0x2f8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	3b c1       	rjmp	.+630    	; 0x2f8 <__bad_interrupt>
      82:	00 00       	nop
      84:	39 c1       	rjmp	.+626    	; 0x2f8 <__bad_interrupt>
      86:	00 00       	nop
      88:	37 c1       	rjmp	.+622    	; 0x2f8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	35 c1       	rjmp	.+618    	; 0x2f8 <__bad_interrupt>
      8e:	00 00       	nop
      90:	33 c1       	rjmp	.+614    	; 0x2f8 <__bad_interrupt>
      92:	00 00       	nop
      94:	31 c1       	rjmp	.+610    	; 0x2f8 <__bad_interrupt>
      96:	00 00       	nop
      98:	2f c1       	rjmp	.+606    	; 0x2f8 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 8d 10 	jmp	0x211a	; 0x211a <__vector_39>
      a0:	2b c1       	rjmp	.+598    	; 0x2f8 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	29 c1       	rjmp	.+594    	; 0x2f8 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	27 c1       	rjmp	.+590    	; 0x2f8 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	25 c1       	rjmp	.+586    	; 0x2f8 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	23 c1       	rjmp	.+582    	; 0x2f8 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	21 c1       	rjmp	.+578    	; 0x2f8 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	1f c1       	rjmp	.+574    	; 0x2f8 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	1d c1       	rjmp	.+570    	; 0x2f8 <__bad_interrupt>
      be:	00 00       	nop
      c0:	1b c1       	rjmp	.+566    	; 0x2f8 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	19 c1       	rjmp	.+562    	; 0x2f8 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	17 c1       	rjmp	.+558    	; 0x2f8 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	15 c1       	rjmp	.+554    	; 0x2f8 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	13 c1       	rjmp	.+550    	; 0x2f8 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	11 c1       	rjmp	.+546    	; 0x2f8 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0f c1       	rjmp	.+542    	; 0x2f8 <__bad_interrupt>
      da:	00 00       	nop
      dc:	0d c1       	rjmp	.+538    	; 0x2f8 <__bad_interrupt>
      de:	00 00       	nop
      e0:	0b c1       	rjmp	.+534    	; 0x2f8 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	94 11       	cpse	r25, r4
      e6:	97 11       	cpse	r25, r7
      e8:	97 11       	cpse	r25, r7
      ea:	97 11       	cpse	r25, r7
      ec:	97 11       	cpse	r25, r7
      ee:	97 11       	cpse	r25, r7
      f0:	97 11       	cpse	r25, r7
      f2:	97 11       	cpse	r25, r7
      f4:	af 10       	cpse	r10, r15
      f6:	97 11       	cpse	r25, r7
      f8:	97 11       	cpse	r25, r7
      fa:	97 11       	cpse	r25, r7
      fc:	97 11       	cpse	r25, r7
      fe:	97 11       	cpse	r25, r7
     100:	97 11       	cpse	r25, r7
     102:	97 11       	cpse	r25, r7
     104:	af 10       	cpse	r10, r15
     106:	97 11       	cpse	r25, r7
     108:	97 11       	cpse	r25, r7
     10a:	97 11       	cpse	r25, r7
     10c:	97 11       	cpse	r25, r7
     10e:	97 11       	cpse	r25, r7
     110:	97 11       	cpse	r25, r7
     112:	97 11       	cpse	r25, r7
     114:	b7 10       	cpse	r11, r7
     116:	97 11       	cpse	r25, r7
     118:	97 11       	cpse	r25, r7
     11a:	97 11       	cpse	r25, r7
     11c:	97 11       	cpse	r25, r7
     11e:	97 11       	cpse	r25, r7
     120:	97 11       	cpse	r25, r7
     122:	97 11       	cpse	r25, r7
     124:	dc 10       	cpse	r13, r12
     126:	97 11       	cpse	r25, r7
     128:	97 11       	cpse	r25, r7
     12a:	97 11       	cpse	r25, r7
     12c:	97 11       	cpse	r25, r7
     12e:	97 11       	cpse	r25, r7
     130:	97 11       	cpse	r25, r7
     132:	97 11       	cpse	r25, r7
     134:	b7 10       	cpse	r11, r7
     136:	97 11       	cpse	r25, r7
     138:	97 11       	cpse	r25, r7
     13a:	97 11       	cpse	r25, r7
     13c:	97 11       	cpse	r25, r7
     13e:	97 11       	cpse	r25, r7
     140:	97 11       	cpse	r25, r7
     142:	97 11       	cpse	r25, r7
     144:	e1 10       	cpse	r14, r1
     146:	97 11       	cpse	r25, r7
     148:	97 11       	cpse	r25, r7
     14a:	97 11       	cpse	r25, r7
     14c:	97 11       	cpse	r25, r7
     14e:	97 11       	cpse	r25, r7
     150:	97 11       	cpse	r25, r7
     152:	97 11       	cpse	r25, r7
     154:	e6 10       	cpse	r14, r6
     156:	97 11       	cpse	r25, r7
     158:	97 11       	cpse	r25, r7
     15a:	97 11       	cpse	r25, r7
     15c:	97 11       	cpse	r25, r7
     15e:	97 11       	cpse	r25, r7
     160:	97 11       	cpse	r25, r7
     162:	97 11       	cpse	r25, r7
     164:	f7 10       	cpse	r15, r7
     166:	97 11       	cpse	r25, r7
     168:	97 11       	cpse	r25, r7
     16a:	97 11       	cpse	r25, r7
     16c:	97 11       	cpse	r25, r7
     16e:	97 11       	cpse	r25, r7
     170:	97 11       	cpse	r25, r7
     172:	97 11       	cpse	r25, r7
     174:	20 11       	cpse	r18, r0
     176:	97 11       	cpse	r25, r7
     178:	97 11       	cpse	r25, r7
     17a:	97 11       	cpse	r25, r7
     17c:	97 11       	cpse	r25, r7
     17e:	97 11       	cpse	r25, r7
     180:	97 11       	cpse	r25, r7
     182:	97 11       	cpse	r25, r7
     184:	eb 10       	cpse	r14, r11
     186:	97 11       	cpse	r25, r7
     188:	97 11       	cpse	r25, r7
     18a:	97 11       	cpse	r25, r7
     18c:	97 11       	cpse	r25, r7
     18e:	97 11       	cpse	r25, r7
     190:	97 11       	cpse	r25, r7
     192:	97 11       	cpse	r25, r7
     194:	05 11       	cpse	r16, r5
     196:	97 11       	cpse	r25, r7
     198:	97 11       	cpse	r25, r7
     19a:	97 11       	cpse	r25, r7
     19c:	97 11       	cpse	r25, r7
     19e:	97 11       	cpse	r25, r7
     1a0:	97 11       	cpse	r25, r7
     1a2:	97 11       	cpse	r25, r7
     1a4:	22 11       	cpse	r18, r2
     1a6:	97 11       	cpse	r25, r7
     1a8:	97 11       	cpse	r25, r7
     1aa:	97 11       	cpse	r25, r7
     1ac:	97 11       	cpse	r25, r7
     1ae:	97 11       	cpse	r25, r7
     1b0:	97 11       	cpse	r25, r7
     1b2:	97 11       	cpse	r25, r7
     1b4:	22 11       	cpse	r18, r2
     1b6:	97 11       	cpse	r25, r7
     1b8:	97 11       	cpse	r25, r7
     1ba:	97 11       	cpse	r25, r7
     1bc:	97 11       	cpse	r25, r7
     1be:	97 11       	cpse	r25, r7
     1c0:	97 11       	cpse	r25, r7
     1c2:	97 11       	cpse	r25, r7
     1c4:	22 11       	cpse	r18, r2
     1c6:	97 11       	cpse	r25, r7
     1c8:	97 11       	cpse	r25, r7
     1ca:	97 11       	cpse	r25, r7
     1cc:	97 11       	cpse	r25, r7
     1ce:	97 11       	cpse	r25, r7
     1d0:	97 11       	cpse	r25, r7
     1d2:	97 11       	cpse	r25, r7
     1d4:	22 11       	cpse	r18, r2
     1d6:	97 11       	cpse	r25, r7
     1d8:	97 11       	cpse	r25, r7
     1da:	97 11       	cpse	r25, r7
     1dc:	97 11       	cpse	r25, r7
     1de:	97 11       	cpse	r25, r7
     1e0:	97 11       	cpse	r25, r7
     1e2:	97 11       	cpse	r25, r7
     1e4:	2b 11       	cpse	r18, r11
     1e6:	97 11       	cpse	r25, r7
     1e8:	97 11       	cpse	r25, r7
     1ea:	97 11       	cpse	r25, r7
     1ec:	97 11       	cpse	r25, r7
     1ee:	97 11       	cpse	r25, r7
     1f0:	97 11       	cpse	r25, r7
     1f2:	97 11       	cpse	r25, r7
     1f4:	5b 11       	cpse	r21, r11
     1f6:	97 11       	cpse	r25, r7
     1f8:	97 11       	cpse	r25, r7
     1fa:	97 11       	cpse	r25, r7
     1fc:	97 11       	cpse	r25, r7
     1fe:	97 11       	cpse	r25, r7
     200:	97 11       	cpse	r25, r7
     202:	97 11       	cpse	r25, r7
     204:	2b 11       	cpse	r18, r11
     206:	97 11       	cpse	r25, r7
     208:	97 11       	cpse	r25, r7
     20a:	97 11       	cpse	r25, r7
     20c:	97 11       	cpse	r25, r7
     20e:	97 11       	cpse	r25, r7
     210:	97 11       	cpse	r25, r7
     212:	97 11       	cpse	r25, r7
     214:	5b 11       	cpse	r21, r11
     216:	97 11       	cpse	r25, r7
     218:	97 11       	cpse	r25, r7
     21a:	97 11       	cpse	r25, r7
     21c:	97 11       	cpse	r25, r7
     21e:	97 11       	cpse	r25, r7
     220:	97 11       	cpse	r25, r7
     222:	97 11       	cpse	r25, r7
     224:	43 11       	cpse	r20, r3
     226:	97 11       	cpse	r25, r7
     228:	97 11       	cpse	r25, r7
     22a:	97 11       	cpse	r25, r7
     22c:	97 11       	cpse	r25, r7
     22e:	97 11       	cpse	r25, r7
     230:	97 11       	cpse	r25, r7
     232:	97 11       	cpse	r25, r7
     234:	5f 11       	cpse	r21, r15
     236:	97 11       	cpse	r25, r7
     238:	97 11       	cpse	r25, r7
     23a:	97 11       	cpse	r25, r7
     23c:	97 11       	cpse	r25, r7
     23e:	97 11       	cpse	r25, r7
     240:	97 11       	cpse	r25, r7
     242:	97 11       	cpse	r25, r7
     244:	5f 11       	cpse	r21, r15
     246:	97 11       	cpse	r25, r7
     248:	97 11       	cpse	r25, r7
     24a:	97 11       	cpse	r25, r7
     24c:	97 11       	cpse	r25, r7
     24e:	97 11       	cpse	r25, r7
     250:	97 11       	cpse	r25, r7
     252:	97 11       	cpse	r25, r7
     254:	74 11       	cpse	r23, r4
     256:	97 11       	cpse	r25, r7
     258:	97 11       	cpse	r25, r7
     25a:	97 11       	cpse	r25, r7
     25c:	97 11       	cpse	r25, r7
     25e:	97 11       	cpse	r25, r7
     260:	97 11       	cpse	r25, r7
     262:	97 11       	cpse	r25, r7
     264:	8e 11       	cpse	r24, r14
     266:	97 11       	cpse	r25, r7
     268:	97 11       	cpse	r25, r7
     26a:	97 11       	cpse	r25, r7
     26c:	97 11       	cpse	r25, r7
     26e:	97 11       	cpse	r25, r7
     270:	97 11       	cpse	r25, r7
     272:	97 11       	cpse	r25, r7
     274:	8e 11       	cpse	r24, r14

00000276 <__trampolines_end>:
     276:	45 00       	.word	0x0045	; ????
     278:	00 82       	st	Z, r0
     27a:	00 00       	nop
     27c:	40 00       	.word	0x0040	; ????
     27e:	20 00       	Address 0x0000027e is out of bounds.
.word	0xffff	; ????

0000027f <_ZL9arpreqhdr>:
     27f:	00 01 08 00 06 04 00 01 00                          .........

00000288 <__ctors_start>:
     288:	f5 04       	cpc	r15, r5
     28a:	74 0c       	add	r7, r4
     28c:	57 0d       	add	r21, r7
     28e:	39 0f       	add	r19, r25
     290:	08 13       	cpse	r16, r24
     292:	32 1e       	adc	r3, r18
     294:	09 22       	and	r0, r25

00000296 <__ctors_end>:
     296:	11 24       	eor	r1, r1
     298:	1f be       	out	0x3f, r1	; 63
     29a:	cf ef       	ldi	r28, 0xFF	; 255
     29c:	d1 e2       	ldi	r29, 0x21	; 33
     29e:	de bf       	out	0x3e, r29	; 62
     2a0:	cd bf       	out	0x3d, r28	; 61
     2a2:	00 e0       	ldi	r16, 0x00	; 0
     2a4:	0c bf       	out	0x3c, r16	; 60

000002a6 <__do_copy_data>:
     2a6:	14 e0       	ldi	r17, 0x04	; 4
     2a8:	a0 e0       	ldi	r26, 0x00	; 0
     2aa:	b2 e0       	ldi	r27, 0x02	; 2
     2ac:	e6 e0       	ldi	r30, 0x06	; 6
     2ae:	f4 e5       	ldi	r31, 0x54	; 84
     2b0:	00 e0       	ldi	r16, 0x00	; 0
     2b2:	0b bf       	out	0x3b, r16	; 59
     2b4:	02 c0       	rjmp	.+4      	; 0x2ba <__do_copy_data+0x14>
     2b6:	07 90       	elpm	r0, Z+
     2b8:	0d 92       	st	X+, r0
     2ba:	a8 3e       	cpi	r26, 0xE8	; 232
     2bc:	b1 07       	cpc	r27, r17
     2be:	d9 f7       	brne	.-10     	; 0x2b6 <__do_copy_data+0x10>

000002c0 <__do_clear_bss>:
     2c0:	2c e0       	ldi	r18, 0x0C	; 12
     2c2:	a8 ee       	ldi	r26, 0xE8	; 232
     2c4:	b4 e0       	ldi	r27, 0x04	; 4
     2c6:	01 c0       	rjmp	.+2      	; 0x2ca <.do_clear_bss_start>

000002c8 <.do_clear_bss_loop>:
     2c8:	1d 92       	st	X+, r1

000002ca <.do_clear_bss_start>:
     2ca:	ad 35       	cpi	r26, 0x5D	; 93
     2cc:	b2 07       	cpc	r27, r18
     2ce:	e1 f7       	brne	.-8      	; 0x2c8 <.do_clear_bss_loop>

000002d0 <__do_global_ctors>:
     2d0:	11 e0       	ldi	r17, 0x01	; 1
     2d2:	cb e4       	ldi	r28, 0x4B	; 75
     2d4:	d1 e0       	ldi	r29, 0x01	; 1
     2d6:	00 e0       	ldi	r16, 0x00	; 0
     2d8:	06 c0       	rjmp	.+12     	; 0x2e6 <__do_global_ctors+0x16>
     2da:	21 97       	sbiw	r28, 0x01	; 1
     2dc:	01 09       	sbc	r16, r1
     2de:	80 2f       	mov	r24, r16
     2e0:	fe 01       	movw	r30, r28
     2e2:	0e 94 09 29 	call	0x5212	; 0x5212 <__tablejump2__>
     2e6:	c4 34       	cpi	r28, 0x44	; 68
     2e8:	d1 07       	cpc	r29, r17
     2ea:	80 e0       	ldi	r24, 0x00	; 0
     2ec:	08 07       	cpc	r16, r24
     2ee:	a9 f7       	brne	.-22     	; 0x2da <__do_global_ctors+0xa>
     2f0:	0e 94 b6 0b 	call	0x176c	; 0x176c <main>
     2f4:	0c 94 01 2a 	jmp	0x5402	; 0x5402 <_exit>

000002f8 <__bad_interrupt>:
     2f8:	83 ce       	rjmp	.-762    	; 0x0 <__vectors>

000002fa <_ZN15Adafruit_Sensor15enableAutoRangeEb>:

    setMode(lastMode);
    return true;
  }
  return false;
}
     2fa:	08 95       	ret

000002fc <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>:
     2fc:	0f 93       	push	r16
     2fe:	1f 93       	push	r17
     300:	cf 93       	push	r28
     302:	df 93       	push	r29
     304:	8c 01       	movw	r16, r24
     306:	eb 01       	movw	r28, r22
     308:	88 e2       	ldi	r24, 0x28	; 40
     30a:	fb 01       	movw	r30, r22
     30c:	11 92       	st	Z+, r1
     30e:	8a 95       	dec	r24
     310:	e9 f7       	brne	.-6      	; 0x30c <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x10>
     312:	4b e0       	ldi	r20, 0x0B	; 11
     314:	50 e0       	ldi	r21, 0x00	; 0
     316:	64 e1       	ldi	r22, 0x14	; 20
     318:	72 e0       	ldi	r23, 0x02	; 2
     31a:	ce 01       	movw	r24, r28
     31c:	0e 94 f2 29 	call	0x53e4	; 0x53e4 <strncpy>
     320:	1b 86       	std	Y+11, r1	; 0x0b
     322:	81 e0       	ldi	r24, 0x01	; 1
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	a0 e0       	ldi	r26, 0x00	; 0
     328:	b0 e0       	ldi	r27, 0x00	; 0
     32a:	8c 87       	std	Y+12, r24	; 0x0c
     32c:	9d 87       	std	Y+13, r25	; 0x0d
     32e:	ae 87       	std	Y+14, r26	; 0x0e
     330:	bf 87       	std	Y+15, r27	; 0x0f
     332:	f8 01       	movw	r30, r16
     334:	86 81       	ldd	r24, Z+6	; 0x06
     336:	97 81       	ldd	r25, Z+7	; 0x07
     338:	a0 85       	ldd	r26, Z+8	; 0x08
     33a:	b1 85       	ldd	r27, Z+9	; 0x09
     33c:	88 8b       	std	Y+16, r24	; 0x10
     33e:	99 8b       	std	Y+17, r25	; 0x11
     340:	aa 8b       	std	Y+18, r26	; 0x12
     342:	bb 8b       	std	Y+19, r27	; 0x13
     344:	83 e0       	ldi	r24, 0x03	; 3
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	a0 e0       	ldi	r26, 0x00	; 0
     34a:	b0 e0       	ldi	r27, 0x00	; 0
     34c:	8c 8b       	std	Y+20, r24	; 0x14
     34e:	9d 8b       	std	Y+21, r25	; 0x15
     350:	ae 8b       	std	Y+22, r26	; 0x16
     352:	bf 8b       	std	Y+23, r27	; 0x17
     354:	1c a2       	std	Y+36, r1	; 0x24
     356:	1d a2       	std	Y+37, r1	; 0x25
     358:	1e a2       	std	Y+38, r1	; 0x26
     35a:	1f a2       	std	Y+39, r1	; 0x27
     35c:	18 8e       	std	Y+24, r1	; 0x18
     35e:	19 8e       	std	Y+25, r1	; 0x19
     360:	1a 8e       	std	Y+26, r1	; 0x1a
     362:	1b 8e       	std	Y+27, r1	; 0x1b
     364:	1c 8e       	std	Y+28, r1	; 0x1c
     366:	1d 8e       	std	Y+29, r1	; 0x1d
     368:	1e 8e       	std	Y+30, r1	; 0x1e
     36a:	1f 8e       	std	Y+31, r1	; 0x1f
     36c:	8a e0       	ldi	r24, 0x0A	; 10
     36e:	97 ed       	ldi	r25, 0xD7	; 215
     370:	a3 e2       	ldi	r26, 0x23	; 35
     372:	bc e3       	ldi	r27, 0x3C	; 60
     374:	88 a3       	std	Y+32, r24	; 0x20
     376:	99 a3       	std	Y+33, r25	; 0x21
     378:	aa a3       	std	Y+34, r26	; 0x22
     37a:	bb a3       	std	Y+35, r27	; 0x23
     37c:	df 91       	pop	r29
     37e:	cf 91       	pop	r28
     380:	1f 91       	pop	r17
     382:	0f 91       	pop	r16
     384:	08 95       	ret

00000386 <_ZN15Adafruit_BNO055C1ElhP7TwoWire>:
     386:	0f 93       	push	r16
     388:	1f 93       	push	r17
     38a:	fc 01       	movw	r30, r24
     38c:	8f e1       	ldi	r24, 0x1F	; 31
     38e:	92 e0       	ldi	r25, 0x02	; 2
     390:	91 83       	std	Z+1, r25	; 0x01
     392:	80 83       	st	Z, r24
     394:	46 83       	std	Z+6, r20	; 0x06
     396:	57 83       	std	Z+7, r21	; 0x07
     398:	60 87       	std	Z+8, r22	; 0x08
     39a:	71 87       	std	Z+9, r23	; 0x09
     39c:	23 83       	std	Z+3, r18	; 0x03
     39e:	15 83       	std	Z+5, r17	; 0x05
     3a0:	04 83       	std	Z+4, r16	; 0x04
     3a2:	1f 91       	pop	r17
     3a4:	0f 91       	pop	r16
     3a6:	08 95       	ret

000003a8 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>:
     3a8:	0f 93       	push	r16
     3aa:	1f 93       	push	r17
     3ac:	cf 93       	push	r28
     3ae:	df 93       	push	r29
     3b0:	ec 01       	movw	r28, r24
     3b2:	06 2f       	mov	r16, r22
     3b4:	14 2f       	mov	r17, r20
     3b6:	6b 81       	ldd	r22, Y+3	; 0x03
     3b8:	8c 81       	ldd	r24, Y+4	; 0x04
     3ba:	9d 81       	ldd	r25, Y+5	; 0x05
     3bc:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <_ZN7TwoWire17beginTransmissionEh>
     3c0:	8c 81       	ldd	r24, Y+4	; 0x04
     3c2:	9d 81       	ldd	r25, Y+5	; 0x05
     3c4:	dc 01       	movw	r26, r24
     3c6:	ed 91       	ld	r30, X+
     3c8:	fc 91       	ld	r31, X
     3ca:	01 90       	ld	r0, Z+
     3cc:	f0 81       	ld	r31, Z
     3ce:	e0 2d       	mov	r30, r0
     3d0:	60 2f       	mov	r22, r16
     3d2:	19 95       	eicall
     3d4:	8c 81       	ldd	r24, Y+4	; 0x04
     3d6:	9d 81       	ldd	r25, Y+5	; 0x05
     3d8:	dc 01       	movw	r26, r24
     3da:	ed 91       	ld	r30, X+
     3dc:	fc 91       	ld	r31, X
     3de:	01 90       	ld	r0, Z+
     3e0:	f0 81       	ld	r31, Z
     3e2:	e0 2d       	mov	r30, r0
     3e4:	61 2f       	mov	r22, r17
     3e6:	19 95       	eicall
     3e8:	8c 81       	ldd	r24, Y+4	; 0x04
     3ea:	9d 81       	ldd	r25, Y+5	; 0x05
     3ec:	0e 94 05 13 	call	0x260a	; 0x260a <_ZN7TwoWire15endTransmissionEv>
     3f0:	81 e0       	ldi	r24, 0x01	; 1
     3f2:	df 91       	pop	r29
     3f4:	cf 91       	pop	r28
     3f6:	1f 91       	pop	r17
     3f8:	0f 91       	pop	r16
     3fa:	08 95       	ret

000003fc <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>:
     3fc:	46 2f       	mov	r20, r22
     3fe:	fc 01       	movw	r30, r24
     400:	62 87       	std	Z+10, r22	; 0x0a
     402:	6d e3       	ldi	r22, 0x3D	; 61
     404:	d1 df       	rcall	.-94     	; 0x3a8 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     406:	ff ef       	ldi	r31, 0xFF	; 255
     408:	26 e7       	ldi	r18, 0x76	; 118
     40a:	81 e0       	ldi	r24, 0x01	; 1
     40c:	f1 50       	subi	r31, 0x01	; 1
     40e:	20 40       	sbci	r18, 0x00	; 0
     410:	80 40       	sbci	r24, 0x00	; 0
     412:	e1 f7       	brne	.-8      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     414:	00 c0       	rjmp	.+0      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     416:	00 00       	nop
     418:	08 95       	ret

0000041a <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>:
     41a:	1f 93       	push	r17
     41c:	cf 93       	push	r28
     41e:	df 93       	push	r29
     420:	ec 01       	movw	r28, r24
     422:	16 2f       	mov	r17, r22
     424:	6b 81       	ldd	r22, Y+3	; 0x03
     426:	8c 81       	ldd	r24, Y+4	; 0x04
     428:	9d 81       	ldd	r25, Y+5	; 0x05
     42a:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <_ZN7TwoWire17beginTransmissionEh>
     42e:	8c 81       	ldd	r24, Y+4	; 0x04
     430:	9d 81       	ldd	r25, Y+5	; 0x05
     432:	dc 01       	movw	r26, r24
     434:	ed 91       	ld	r30, X+
     436:	fc 91       	ld	r31, X
     438:	01 90       	ld	r0, Z+
     43a:	f0 81       	ld	r31, Z
     43c:	e0 2d       	mov	r30, r0
     43e:	61 2f       	mov	r22, r17
     440:	19 95       	eicall
     442:	8c 81       	ldd	r24, Y+4	; 0x04
     444:	9d 81       	ldd	r25, Y+5	; 0x05
     446:	0e 94 05 13 	call	0x260a	; 0x260a <_ZN7TwoWire15endTransmissionEv>
     44a:	41 e0       	ldi	r20, 0x01	; 1
     44c:	6b 81       	ldd	r22, Y+3	; 0x03
     44e:	8c 81       	ldd	r24, Y+4	; 0x04
     450:	9d 81       	ldd	r25, Y+5	; 0x05
     452:	0e 94 ff 12 	call	0x25fe	; 0x25fe <_ZN7TwoWire11requestFromEhh>
     456:	8c 81       	ldd	r24, Y+4	; 0x04
     458:	9d 81       	ldd	r25, Y+5	; 0x05
     45a:	dc 01       	movw	r26, r24
     45c:	ed 91       	ld	r30, X+
     45e:	fc 91       	ld	r31, X
     460:	02 84       	ldd	r0, Z+10	; 0x0a
     462:	f3 85       	ldd	r31, Z+11	; 0x0b
     464:	e0 2d       	mov	r30, r0
     466:	19 95       	eicall
     468:	df 91       	pop	r29
     46a:	cf 91       	pop	r28
     46c:	1f 91       	pop	r17
     46e:	08 95       	ret

00000470 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>:
     470:	1f 93       	push	r17
     472:	cf 93       	push	r28
     474:	df 93       	push	r29
     476:	ec 01       	movw	r28, r24
     478:	16 2f       	mov	r17, r22
     47a:	8c 81       	ldd	r24, Y+4	; 0x04
     47c:	9d 81       	ldd	r25, Y+5	; 0x05
     47e:	0e 94 67 12 	call	0x24ce	; 0x24ce <_ZN7TwoWire5beginEv>
     482:	60 e0       	ldi	r22, 0x00	; 0
     484:	ce 01       	movw	r24, r28
     486:	c9 df       	rcall	.-110    	; 0x41a <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
     488:	80 3a       	cpi	r24, 0xA0	; 160
     48a:	79 f0       	breq	.+30     	; 0x4aa <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x3a>
     48c:	2f ef       	ldi	r18, 0xFF	; 255
     48e:	83 ed       	ldi	r24, 0xD3	; 211
     490:	90 e3       	ldi	r25, 0x30	; 48
     492:	21 50       	subi	r18, 0x01	; 1
     494:	80 40       	sbci	r24, 0x00	; 0
     496:	90 40       	sbci	r25, 0x00	; 0
     498:	e1 f7       	brne	.-8      	; 0x492 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x22>
     49a:	00 c0       	rjmp	.+0      	; 0x49c <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x2c>
     49c:	00 00       	nop
     49e:	60 e0       	ldi	r22, 0x00	; 0
     4a0:	ce 01       	movw	r24, r28
     4a2:	bb df       	rcall	.-138    	; 0x41a <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
     4a4:	80 3a       	cpi	r24, 0xA0	; 160
     4a6:	09 f0       	breq	.+2      	; 0x4aa <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x3a>
     4a8:	4b c0       	rjmp	.+150    	; 0x540 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xd0>
     4aa:	60 e0       	ldi	r22, 0x00	; 0
     4ac:	ce 01       	movw	r24, r28
     4ae:	a6 df       	rcall	.-180    	; 0x3fc <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
     4b0:	40 e2       	ldi	r20, 0x20	; 32
     4b2:	6f e3       	ldi	r22, 0x3F	; 63
     4b4:	ce 01       	movw	r24, r28
     4b6:	78 df       	rcall	.-272    	; 0x3a8 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     4b8:	2f ef       	ldi	r18, 0xFF	; 255
     4ba:	86 e7       	ldi	r24, 0x76	; 118
     4bc:	91 e0       	ldi	r25, 0x01	; 1
     4be:	21 50       	subi	r18, 0x01	; 1
     4c0:	80 40       	sbci	r24, 0x00	; 0
     4c2:	90 40       	sbci	r25, 0x00	; 0
     4c4:	e1 f7       	brne	.-8      	; 0x4be <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x4e>
     4c6:	00 c0       	rjmp	.+0      	; 0x4c8 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x58>
     4c8:	00 00       	nop
     4ca:	60 e0       	ldi	r22, 0x00	; 0
     4cc:	ce 01       	movw	r24, r28
     4ce:	a5 df       	rcall	.-182    	; 0x41a <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
     4d0:	80 3a       	cpi	r24, 0xA0	; 160
     4d2:	39 f0       	breq	.+14     	; 0x4e2 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x72>
     4d4:	8f e3       	ldi	r24, 0x3F	; 63
     4d6:	9c e9       	ldi	r25, 0x9C	; 156
     4d8:	01 97       	sbiw	r24, 0x01	; 1
     4da:	f1 f7       	brne	.-4      	; 0x4d8 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x68>
     4dc:	00 c0       	rjmp	.+0      	; 0x4de <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x6e>
     4de:	00 00       	nop
     4e0:	f4 cf       	rjmp	.-24     	; 0x4ca <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x5a>
     4e2:	9f ef       	ldi	r25, 0xFF	; 255
     4e4:	20 e7       	ldi	r18, 0x70	; 112
     4e6:	82 e0       	ldi	r24, 0x02	; 2
     4e8:	91 50       	subi	r25, 0x01	; 1
     4ea:	20 40       	sbci	r18, 0x00	; 0
     4ec:	80 40       	sbci	r24, 0x00	; 0
     4ee:	e1 f7       	brne	.-8      	; 0x4e8 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x78>
     4f0:	00 c0       	rjmp	.+0      	; 0x4f2 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x82>
     4f2:	00 00       	nop
     4f4:	40 e0       	ldi	r20, 0x00	; 0
     4f6:	6e e3       	ldi	r22, 0x3E	; 62
     4f8:	ce 01       	movw	r24, r28
     4fa:	56 df       	rcall	.-340    	; 0x3a8 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     4fc:	8f e3       	ldi	r24, 0x3F	; 63
     4fe:	9c e9       	ldi	r25, 0x9C	; 156
     500:	01 97       	sbiw	r24, 0x01	; 1
     502:	f1 f7       	brne	.-4      	; 0x500 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x90>
     504:	00 c0       	rjmp	.+0      	; 0x506 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x96>
     506:	00 00       	nop
     508:	40 e0       	ldi	r20, 0x00	; 0
     50a:	67 e0       	ldi	r22, 0x07	; 7
     50c:	ce 01       	movw	r24, r28
     50e:	4c df       	rcall	.-360    	; 0x3a8 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     510:	40 e0       	ldi	r20, 0x00	; 0
     512:	6f e3       	ldi	r22, 0x3F	; 63
     514:	ce 01       	movw	r24, r28
     516:	48 df       	rcall	.-368    	; 0x3a8 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     518:	8f e3       	ldi	r24, 0x3F	; 63
     51a:	9c e9       	ldi	r25, 0x9C	; 156
     51c:	01 97       	sbiw	r24, 0x01	; 1
     51e:	f1 f7       	brne	.-4      	; 0x51c <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xac>
     520:	00 c0       	rjmp	.+0      	; 0x522 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xb2>
     522:	00 00       	nop
     524:	61 2f       	mov	r22, r17
     526:	ce 01       	movw	r24, r28
     528:	69 df       	rcall	.-302    	; 0x3fc <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
     52a:	9f ef       	ldi	r25, 0xFF	; 255
     52c:	29 ef       	ldi	r18, 0xF9	; 249
     52e:	80 e0       	ldi	r24, 0x00	; 0
     530:	91 50       	subi	r25, 0x01	; 1
     532:	20 40       	sbci	r18, 0x00	; 0
     534:	80 40       	sbci	r24, 0x00	; 0
     536:	e1 f7       	brne	.-8      	; 0x530 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xc0>
     538:	00 c0       	rjmp	.+0      	; 0x53a <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xca>
     53a:	00 00       	nop
     53c:	81 e0       	ldi	r24, 0x01	; 1
     53e:	01 c0       	rjmp	.+2      	; 0x542 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xd2>
     540:	80 e0       	ldi	r24, 0x00	; 0
     542:	df 91       	pop	r29
     544:	cf 91       	pop	r28
     546:	1f 91       	pop	r17
     548:	08 95       	ret

0000054a <_ZN15Adafruit_BNO0557getTempEv>:
     54a:	64 e3       	ldi	r22, 0x34	; 52
     54c:	66 cf       	rjmp	.-308    	; 0x41a <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
     54e:	08 95       	ret

00000550 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>:
     550:	cf 92       	push	r12
     552:	df 92       	push	r13
     554:	ef 92       	push	r14
     556:	ff 92       	push	r15
     558:	0f 93       	push	r16
     55a:	1f 93       	push	r17
     55c:	cf 93       	push	r28
     55e:	df 93       	push	r29
     560:	7c 01       	movw	r14, r24
     562:	c6 2f       	mov	r28, r22
     564:	6a 01       	movw	r12, r20
     566:	12 2f       	mov	r17, r18
     568:	dc 01       	movw	r26, r24
     56a:	13 96       	adiw	r26, 0x03	; 3
     56c:	6c 91       	ld	r22, X
     56e:	13 97       	sbiw	r26, 0x03	; 3
     570:	14 96       	adiw	r26, 0x04	; 4
     572:	8d 91       	ld	r24, X+
     574:	9c 91       	ld	r25, X
     576:	15 97       	sbiw	r26, 0x05	; 5
     578:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <_ZN7TwoWire17beginTransmissionEh>
     57c:	f7 01       	movw	r30, r14
     57e:	84 81       	ldd	r24, Z+4	; 0x04
     580:	95 81       	ldd	r25, Z+5	; 0x05
     582:	dc 01       	movw	r26, r24
     584:	ed 91       	ld	r30, X+
     586:	fc 91       	ld	r31, X
     588:	01 90       	ld	r0, Z+
     58a:	f0 81       	ld	r31, Z
     58c:	e0 2d       	mov	r30, r0
     58e:	6c 2f       	mov	r22, r28
     590:	19 95       	eicall
     592:	f7 01       	movw	r30, r14
     594:	84 81       	ldd	r24, Z+4	; 0x04
     596:	95 81       	ldd	r25, Z+5	; 0x05
     598:	0e 94 05 13 	call	0x260a	; 0x260a <_ZN7TwoWire15endTransmissionEv>
     59c:	41 2f       	mov	r20, r17
     59e:	d7 01       	movw	r26, r14
     5a0:	13 96       	adiw	r26, 0x03	; 3
     5a2:	6c 91       	ld	r22, X
     5a4:	13 97       	sbiw	r26, 0x03	; 3
     5a6:	14 96       	adiw	r26, 0x04	; 4
     5a8:	8d 91       	ld	r24, X+
     5aa:	9c 91       	ld	r25, X
     5ac:	15 97       	sbiw	r26, 0x05	; 5
     5ae:	0e 94 ff 12 	call	0x25fe	; 0x25fe <_ZN7TwoWire11requestFromEhh>
     5b2:	11 23       	and	r17, r17
     5b4:	b1 f0       	breq	.+44     	; 0x5e2 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh+0x92>
     5b6:	e6 01       	movw	r28, r12
     5b8:	11 50       	subi	r17, 0x01	; 1
     5ba:	01 2f       	mov	r16, r17
     5bc:	10 e0       	ldi	r17, 0x00	; 0
     5be:	0f 5f       	subi	r16, 0xFF	; 255
     5c0:	1f 4f       	sbci	r17, 0xFF	; 255
     5c2:	0c 0d       	add	r16, r12
     5c4:	1d 1d       	adc	r17, r13
     5c6:	f7 01       	movw	r30, r14
     5c8:	84 81       	ldd	r24, Z+4	; 0x04
     5ca:	95 81       	ldd	r25, Z+5	; 0x05
     5cc:	dc 01       	movw	r26, r24
     5ce:	ed 91       	ld	r30, X+
     5d0:	fc 91       	ld	r31, X
     5d2:	02 84       	ldd	r0, Z+10	; 0x0a
     5d4:	f3 85       	ldd	r31, Z+11	; 0x0b
     5d6:	e0 2d       	mov	r30, r0
     5d8:	19 95       	eicall
     5da:	89 93       	st	Y+, r24
     5dc:	c0 17       	cp	r28, r16
     5de:	d1 07       	cpc	r29, r17
     5e0:	91 f7       	brne	.-28     	; 0x5c6 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh+0x76>
     5e2:	81 e0       	ldi	r24, 0x01	; 1
     5e4:	df 91       	pop	r29
     5e6:	cf 91       	pop	r28
     5e8:	1f 91       	pop	r17
     5ea:	0f 91       	pop	r16
     5ec:	ff 90       	pop	r15
     5ee:	ef 90       	pop	r14
     5f0:	df 90       	pop	r13
     5f2:	cf 90       	pop	r12
     5f4:	08 95       	ret

000005f6 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tEPh>:
     5f6:	26 e0       	ldi	r18, 0x06	; 6
     5f8:	ab df       	rcall	.-170    	; 0x550 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>
     5fa:	86 e0       	ldi	r24, 0x06	; 6
     5fc:	08 95       	ret

000005fe <_ZN15Adafruit_BNO0557getQuatEPh>:
     5fe:	ab 01       	movw	r20, r22
     600:	28 e0       	ldi	r18, 0x08	; 8
     602:	60 e2       	ldi	r22, 0x20	; 32
     604:	a5 df       	rcall	.-182    	; 0x550 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>
     606:	88 e0       	ldi	r24, 0x08	; 8
     608:	08 95       	ret

0000060a <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>:
 *            VECTOR_EULER
 *            VECTOR_LINEARACCEL
 *            VECTOR_GRAVITY]
 *  @return  vector from specified source
 */
AdafruitImu::Vector<3> Adafruit_BNO055::getVector(adafruit_vector_type_t vector_type) {
     60a:	af 92       	push	r10
     60c:	bf 92       	push	r11
     60e:	cf 92       	push	r12
     610:	df 92       	push	r13
     612:	ff 92       	push	r15
     614:	0f 93       	push	r16
     616:	1f 93       	push	r17
     618:	cf 93       	push	r28
     61a:	df 93       	push	r29
     61c:	00 d0       	rcall	.+0      	; 0x61e <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x14>
     61e:	00 d0       	rcall	.+0      	; 0x620 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x16>
     620:	cd b7       	in	r28, 0x3d	; 61
     622:	de b7       	in	r29, 0x3e	; 62
     624:	8c 01       	movw	r16, r24
     626:	cb 01       	movw	r24, r22
     628:	f4 2e       	mov	r15, r20
	template <uint8_t N> class Vector
	{
		public:
		Vector()
		{
			memset(p_vec, 0, sizeof(double)*N);
     62a:	2c e0       	ldi	r18, 0x0C	; 12
     62c:	f8 01       	movw	r30, r16
     62e:	11 92       	st	Z+, r1
     630:	2a 95       	dec	r18
     632:	e9 f7       	brne	.-6      	; 0x62e <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x24>
  AdafruitImu::Vector<3> xyz;
  uint8_t buffer[6];
  memset(buffer, 0, 6);
     634:	ae 01       	movw	r20, r28
     636:	4f 5f       	subi	r20, 0xFF	; 255
     638:	5f 4f       	sbci	r21, 0xFF	; 255
     63a:	26 e0       	ldi	r18, 0x06	; 6
     63c:	fa 01       	movw	r30, r20
     63e:	11 92       	st	Z+, r1
     640:	2a 95       	dec	r18
     642:	e9 f7       	brne	.-6      	; 0x63e <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x34>

  int16_t x, y, z;
  x = y = z = 0;

  /* Read vector data (6 bytes) */
  readLen((adafruit_bno055_reg_t)vector_type, buffer, 6);
     644:	26 e0       	ldi	r18, 0x06	; 6
     646:	6f 2d       	mov	r22, r15
     648:	83 df       	rcall	.-250    	; 0x550 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>

  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
     64a:	6a 81       	ldd	r22, Y+2	; 0x02
     64c:	70 e0       	ldi	r23, 0x00	; 0
     64e:	76 2f       	mov	r23, r22
     650:	66 27       	eor	r22, r22
     652:	89 81       	ldd	r24, Y+1	; 0x01
     654:	68 2b       	or	r22, r24
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
     656:	8c 81       	ldd	r24, Y+4	; 0x04
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	98 2f       	mov	r25, r24
     65c:	88 27       	eor	r24, r24
     65e:	2b 81       	ldd	r18, Y+3	; 0x03
     660:	6c 01       	movw	r12, r24
     662:	c2 2a       	or	r12, r18
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
     664:	8e 81       	ldd	r24, Y+6	; 0x06
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	98 2f       	mov	r25, r24
     66a:	88 27       	eor	r24, r24
     66c:	2d 81       	ldd	r18, Y+5	; 0x05
     66e:	5c 01       	movw	r10, r24
     670:	a2 2a       	or	r10, r18

  /*!
   * Convert the value to an appropriate range (section 3.6.4)
   * and assign the value to the Vector type
   */
  switch (vector_type) {
     672:	f4 e1       	ldi	r31, 0x14	; 20
     674:	ff 16       	cp	r15, r31
     676:	09 f4       	brne	.+2      	; 0x67a <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x70>
     678:	4a c0       	rjmp	.+148    	; 0x70e <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x104>
     67a:	ff 15       	cp	r31, r15
     67c:	40 f0       	brcs	.+16     	; 0x68e <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x84>
     67e:	88 e0       	ldi	r24, 0x08	; 8
     680:	f8 16       	cp	r15, r24
     682:	09 f4       	brne	.+2      	; 0x686 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x7c>
     684:	ac c0       	rjmp	.+344    	; 0x7de <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x1d4>
     686:	ee e0       	ldi	r30, 0x0E	; 14
     688:	fe 16       	cp	r15, r30
     68a:	69 f0       	breq	.+26     	; 0x6a6 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x9c>
     68c:	43 c1       	rjmp	.+646    	; 0x914 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
     68e:	f8 e2       	ldi	r31, 0x28	; 40
     690:	ff 16       	cp	r15, r31
     692:	09 f4       	brne	.+2      	; 0x696 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x8c>
     694:	d8 c0       	rjmp	.+432    	; 0x846 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x23c>
     696:	8e e2       	ldi	r24, 0x2E	; 46
     698:	f8 16       	cp	r15, r24
     69a:	09 f4       	brne	.+2      	; 0x69e <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x94>
     69c:	08 c1       	rjmp	.+528    	; 0x8ae <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x2a4>
     69e:	ea e1       	ldi	r30, 0x1A	; 26
     6a0:	fe 12       	cpse	r15, r30
     6a2:	38 c1       	rjmp	.+624    	; 0x914 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
     6a4:	68 c0       	rjmp	.+208    	; 0x776 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x16c>
  case VECTOR_MAGNETOMETER:
    /* 1uT = 16 LSB */
    xyz[0] = ((double)x) / 16.0;
     6a6:	07 2e       	mov	r0, r23
     6a8:	00 0c       	add	r0, r0
     6aa:	88 0b       	sbc	r24, r24
     6ac:	99 0b       	sbc	r25, r25
     6ae:	0e 94 c1 27 	call	0x4f82	; 0x4f82 <__floatsisf>
     6b2:	20 e0       	ldi	r18, 0x00	; 0
     6b4:	30 e0       	ldi	r19, 0x00	; 0
     6b6:	40 e8       	ldi	r20, 0x80	; 128
     6b8:	5d e3       	ldi	r21, 0x3D	; 61
     6ba:	0e 94 75 28 	call	0x50ea	; 0x50ea <__mulsf3>
     6be:	f8 01       	movw	r30, r16
     6c0:	60 83       	st	Z, r22
     6c2:	71 83       	std	Z+1, r23	; 0x01
     6c4:	82 83       	std	Z+2, r24	; 0x02
     6c6:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 16.0;
     6c8:	b6 01       	movw	r22, r12
     6ca:	dd 0c       	add	r13, r13
     6cc:	88 0b       	sbc	r24, r24
     6ce:	99 0b       	sbc	r25, r25
     6d0:	0e 94 c1 27 	call	0x4f82	; 0x4f82 <__floatsisf>
     6d4:	20 e0       	ldi	r18, 0x00	; 0
     6d6:	30 e0       	ldi	r19, 0x00	; 0
     6d8:	40 e8       	ldi	r20, 0x80	; 128
     6da:	5d e3       	ldi	r21, 0x3D	; 61
     6dc:	0e 94 75 28 	call	0x50ea	; 0x50ea <__mulsf3>
     6e0:	f8 01       	movw	r30, r16
     6e2:	64 83       	std	Z+4, r22	; 0x04
     6e4:	75 83       	std	Z+5, r23	; 0x05
     6e6:	86 83       	std	Z+6, r24	; 0x06
     6e8:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 16.0;
     6ea:	b5 01       	movw	r22, r10
     6ec:	bb 0c       	add	r11, r11
     6ee:	88 0b       	sbc	r24, r24
     6f0:	99 0b       	sbc	r25, r25
     6f2:	0e 94 c1 27 	call	0x4f82	; 0x4f82 <__floatsisf>
     6f6:	20 e0       	ldi	r18, 0x00	; 0
     6f8:	30 e0       	ldi	r19, 0x00	; 0
     6fa:	40 e8       	ldi	r20, 0x80	; 128
     6fc:	5d e3       	ldi	r21, 0x3D	; 61
     6fe:	0e 94 75 28 	call	0x50ea	; 0x50ea <__mulsf3>
     702:	f8 01       	movw	r30, r16
     704:	60 87       	std	Z+8, r22	; 0x08
     706:	71 87       	std	Z+9, r23	; 0x09
     708:	82 87       	std	Z+10, r24	; 0x0a
     70a:	93 87       	std	Z+11, r25	; 0x0b
    break;
     70c:	03 c1       	rjmp	.+518    	; 0x914 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_GYROSCOPE:
    /* 1dps = 16 LSB */
    xyz[0] = ((double)x) / 16.0;
     70e:	07 2e       	mov	r0, r23
     710:	00 0c       	add	r0, r0
     712:	88 0b       	sbc	r24, r24
     714:	99 0b       	sbc	r25, r25
     716:	0e 94 c1 27 	call	0x4f82	; 0x4f82 <__floatsisf>
     71a:	20 e0       	ldi	r18, 0x00	; 0
     71c:	30 e0       	ldi	r19, 0x00	; 0
     71e:	40 e8       	ldi	r20, 0x80	; 128
     720:	5d e3       	ldi	r21, 0x3D	; 61
     722:	0e 94 75 28 	call	0x50ea	; 0x50ea <__mulsf3>
     726:	f8 01       	movw	r30, r16
     728:	60 83       	st	Z, r22
     72a:	71 83       	std	Z+1, r23	; 0x01
     72c:	82 83       	std	Z+2, r24	; 0x02
     72e:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 16.0;
     730:	b6 01       	movw	r22, r12
     732:	dd 0c       	add	r13, r13
     734:	88 0b       	sbc	r24, r24
     736:	99 0b       	sbc	r25, r25
     738:	0e 94 c1 27 	call	0x4f82	; 0x4f82 <__floatsisf>
     73c:	20 e0       	ldi	r18, 0x00	; 0
     73e:	30 e0       	ldi	r19, 0x00	; 0
     740:	40 e8       	ldi	r20, 0x80	; 128
     742:	5d e3       	ldi	r21, 0x3D	; 61
     744:	0e 94 75 28 	call	0x50ea	; 0x50ea <__mulsf3>
     748:	f8 01       	movw	r30, r16
     74a:	64 83       	std	Z+4, r22	; 0x04
     74c:	75 83       	std	Z+5, r23	; 0x05
     74e:	86 83       	std	Z+6, r24	; 0x06
     750:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 16.0;
     752:	b5 01       	movw	r22, r10
     754:	bb 0c       	add	r11, r11
     756:	88 0b       	sbc	r24, r24
     758:	99 0b       	sbc	r25, r25
     75a:	0e 94 c1 27 	call	0x4f82	; 0x4f82 <__floatsisf>
     75e:	20 e0       	ldi	r18, 0x00	; 0
     760:	30 e0       	ldi	r19, 0x00	; 0
     762:	40 e8       	ldi	r20, 0x80	; 128
     764:	5d e3       	ldi	r21, 0x3D	; 61
     766:	0e 94 75 28 	call	0x50ea	; 0x50ea <__mulsf3>
     76a:	f8 01       	movw	r30, r16
     76c:	60 87       	std	Z+8, r22	; 0x08
     76e:	71 87       	std	Z+9, r23	; 0x09
     770:	82 87       	std	Z+10, r24	; 0x0a
     772:	93 87       	std	Z+11, r25	; 0x0b
    break;
     774:	cf c0       	rjmp	.+414    	; 0x914 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_EULER:
    /* 1 degree = 16 LSB */
    xyz[0] = ((double)x) / 16.0;
     776:	07 2e       	mov	r0, r23
     778:	00 0c       	add	r0, r0
     77a:	88 0b       	sbc	r24, r24
     77c:	99 0b       	sbc	r25, r25
     77e:	0e 94 c1 27 	call	0x4f82	; 0x4f82 <__floatsisf>
     782:	20 e0       	ldi	r18, 0x00	; 0
     784:	30 e0       	ldi	r19, 0x00	; 0
     786:	40 e8       	ldi	r20, 0x80	; 128
     788:	5d e3       	ldi	r21, 0x3D	; 61
     78a:	0e 94 75 28 	call	0x50ea	; 0x50ea <__mulsf3>
     78e:	f8 01       	movw	r30, r16
     790:	60 83       	st	Z, r22
     792:	71 83       	std	Z+1, r23	; 0x01
     794:	82 83       	std	Z+2, r24	; 0x02
     796:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 16.0;
     798:	b6 01       	movw	r22, r12
     79a:	dd 0c       	add	r13, r13
     79c:	88 0b       	sbc	r24, r24
     79e:	99 0b       	sbc	r25, r25
     7a0:	0e 94 c1 27 	call	0x4f82	; 0x4f82 <__floatsisf>
     7a4:	20 e0       	ldi	r18, 0x00	; 0
     7a6:	30 e0       	ldi	r19, 0x00	; 0
     7a8:	40 e8       	ldi	r20, 0x80	; 128
     7aa:	5d e3       	ldi	r21, 0x3D	; 61
     7ac:	0e 94 75 28 	call	0x50ea	; 0x50ea <__mulsf3>
     7b0:	f8 01       	movw	r30, r16
     7b2:	64 83       	std	Z+4, r22	; 0x04
     7b4:	75 83       	std	Z+5, r23	; 0x05
     7b6:	86 83       	std	Z+6, r24	; 0x06
     7b8:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 16.0;
     7ba:	b5 01       	movw	r22, r10
     7bc:	bb 0c       	add	r11, r11
     7be:	88 0b       	sbc	r24, r24
     7c0:	99 0b       	sbc	r25, r25
     7c2:	0e 94 c1 27 	call	0x4f82	; 0x4f82 <__floatsisf>
     7c6:	20 e0       	ldi	r18, 0x00	; 0
     7c8:	30 e0       	ldi	r19, 0x00	; 0
     7ca:	40 e8       	ldi	r20, 0x80	; 128
     7cc:	5d e3       	ldi	r21, 0x3D	; 61
     7ce:	0e 94 75 28 	call	0x50ea	; 0x50ea <__mulsf3>
     7d2:	f8 01       	movw	r30, r16
     7d4:	60 87       	std	Z+8, r22	; 0x08
     7d6:	71 87       	std	Z+9, r23	; 0x09
     7d8:	82 87       	std	Z+10, r24	; 0x0a
     7da:	93 87       	std	Z+11, r25	; 0x0b
    break;
     7dc:	9b c0       	rjmp	.+310    	; 0x914 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_ACCELEROMETER:
    /* 1m/s^2 = 100 LSB */
    xyz[0] = ((double)x) / 100.0;
     7de:	07 2e       	mov	r0, r23
     7e0:	00 0c       	add	r0, r0
     7e2:	88 0b       	sbc	r24, r24
     7e4:	99 0b       	sbc	r25, r25
     7e6:	0e 94 c1 27 	call	0x4f82	; 0x4f82 <__floatsisf>
     7ea:	20 e0       	ldi	r18, 0x00	; 0
     7ec:	30 e0       	ldi	r19, 0x00	; 0
     7ee:	48 ec       	ldi	r20, 0xC8	; 200
     7f0:	52 e4       	ldi	r21, 0x42	; 66
     7f2:	0e 94 2b 27 	call	0x4e56	; 0x4e56 <__divsf3>
     7f6:	f8 01       	movw	r30, r16
     7f8:	60 83       	st	Z, r22
     7fa:	71 83       	std	Z+1, r23	; 0x01
     7fc:	82 83       	std	Z+2, r24	; 0x02
     7fe:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 100.0;
     800:	b6 01       	movw	r22, r12
     802:	dd 0c       	add	r13, r13
     804:	88 0b       	sbc	r24, r24
     806:	99 0b       	sbc	r25, r25
     808:	0e 94 c1 27 	call	0x4f82	; 0x4f82 <__floatsisf>
     80c:	20 e0       	ldi	r18, 0x00	; 0
     80e:	30 e0       	ldi	r19, 0x00	; 0
     810:	48 ec       	ldi	r20, 0xC8	; 200
     812:	52 e4       	ldi	r21, 0x42	; 66
     814:	0e 94 2b 27 	call	0x4e56	; 0x4e56 <__divsf3>
     818:	f8 01       	movw	r30, r16
     81a:	64 83       	std	Z+4, r22	; 0x04
     81c:	75 83       	std	Z+5, r23	; 0x05
     81e:	86 83       	std	Z+6, r24	; 0x06
     820:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 100.0;
     822:	b5 01       	movw	r22, r10
     824:	bb 0c       	add	r11, r11
     826:	88 0b       	sbc	r24, r24
     828:	99 0b       	sbc	r25, r25
     82a:	0e 94 c1 27 	call	0x4f82	; 0x4f82 <__floatsisf>
     82e:	20 e0       	ldi	r18, 0x00	; 0
     830:	30 e0       	ldi	r19, 0x00	; 0
     832:	48 ec       	ldi	r20, 0xC8	; 200
     834:	52 e4       	ldi	r21, 0x42	; 66
     836:	0e 94 2b 27 	call	0x4e56	; 0x4e56 <__divsf3>
     83a:	f8 01       	movw	r30, r16
     83c:	60 87       	std	Z+8, r22	; 0x08
     83e:	71 87       	std	Z+9, r23	; 0x09
     840:	82 87       	std	Z+10, r24	; 0x0a
     842:	93 87       	std	Z+11, r25	; 0x0b
    break;
     844:	67 c0       	rjmp	.+206    	; 0x914 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_LINEARACCEL:
    /* 1m/s^2 = 100 LSB */
    xyz[0] = ((double)x) / 100.0;
     846:	07 2e       	mov	r0, r23
     848:	00 0c       	add	r0, r0
     84a:	88 0b       	sbc	r24, r24
     84c:	99 0b       	sbc	r25, r25
     84e:	0e 94 c1 27 	call	0x4f82	; 0x4f82 <__floatsisf>
     852:	20 e0       	ldi	r18, 0x00	; 0
     854:	30 e0       	ldi	r19, 0x00	; 0
     856:	48 ec       	ldi	r20, 0xC8	; 200
     858:	52 e4       	ldi	r21, 0x42	; 66
     85a:	0e 94 2b 27 	call	0x4e56	; 0x4e56 <__divsf3>
     85e:	f8 01       	movw	r30, r16
     860:	60 83       	st	Z, r22
     862:	71 83       	std	Z+1, r23	; 0x01
     864:	82 83       	std	Z+2, r24	; 0x02
     866:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 100.0;
     868:	b6 01       	movw	r22, r12
     86a:	dd 0c       	add	r13, r13
     86c:	88 0b       	sbc	r24, r24
     86e:	99 0b       	sbc	r25, r25
     870:	0e 94 c1 27 	call	0x4f82	; 0x4f82 <__floatsisf>
     874:	20 e0       	ldi	r18, 0x00	; 0
     876:	30 e0       	ldi	r19, 0x00	; 0
     878:	48 ec       	ldi	r20, 0xC8	; 200
     87a:	52 e4       	ldi	r21, 0x42	; 66
     87c:	0e 94 2b 27 	call	0x4e56	; 0x4e56 <__divsf3>
     880:	f8 01       	movw	r30, r16
     882:	64 83       	std	Z+4, r22	; 0x04
     884:	75 83       	std	Z+5, r23	; 0x05
     886:	86 83       	std	Z+6, r24	; 0x06
     888:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 100.0;
     88a:	b5 01       	movw	r22, r10
     88c:	bb 0c       	add	r11, r11
     88e:	88 0b       	sbc	r24, r24
     890:	99 0b       	sbc	r25, r25
     892:	0e 94 c1 27 	call	0x4f82	; 0x4f82 <__floatsisf>
     896:	20 e0       	ldi	r18, 0x00	; 0
     898:	30 e0       	ldi	r19, 0x00	; 0
     89a:	48 ec       	ldi	r20, 0xC8	; 200
     89c:	52 e4       	ldi	r21, 0x42	; 66
     89e:	0e 94 2b 27 	call	0x4e56	; 0x4e56 <__divsf3>
     8a2:	f8 01       	movw	r30, r16
     8a4:	60 87       	std	Z+8, r22	; 0x08
     8a6:	71 87       	std	Z+9, r23	; 0x09
     8a8:	82 87       	std	Z+10, r24	; 0x0a
     8aa:	93 87       	std	Z+11, r25	; 0x0b
    break;
     8ac:	33 c0       	rjmp	.+102    	; 0x914 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_GRAVITY:
    /* 1m/s^2 = 100 LSB */
    xyz[0] = ((double)x) / 100.0;
     8ae:	07 2e       	mov	r0, r23
     8b0:	00 0c       	add	r0, r0
     8b2:	88 0b       	sbc	r24, r24
     8b4:	99 0b       	sbc	r25, r25
     8b6:	0e 94 c1 27 	call	0x4f82	; 0x4f82 <__floatsisf>
     8ba:	20 e0       	ldi	r18, 0x00	; 0
     8bc:	30 e0       	ldi	r19, 0x00	; 0
     8be:	48 ec       	ldi	r20, 0xC8	; 200
     8c0:	52 e4       	ldi	r21, 0x42	; 66
     8c2:	0e 94 2b 27 	call	0x4e56	; 0x4e56 <__divsf3>
     8c6:	f8 01       	movw	r30, r16
     8c8:	60 83       	st	Z, r22
     8ca:	71 83       	std	Z+1, r23	; 0x01
     8cc:	82 83       	std	Z+2, r24	; 0x02
     8ce:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 100.0;
     8d0:	b6 01       	movw	r22, r12
     8d2:	dd 0c       	add	r13, r13
     8d4:	88 0b       	sbc	r24, r24
     8d6:	99 0b       	sbc	r25, r25
     8d8:	0e 94 c1 27 	call	0x4f82	; 0x4f82 <__floatsisf>
     8dc:	20 e0       	ldi	r18, 0x00	; 0
     8de:	30 e0       	ldi	r19, 0x00	; 0
     8e0:	48 ec       	ldi	r20, 0xC8	; 200
     8e2:	52 e4       	ldi	r21, 0x42	; 66
     8e4:	0e 94 2b 27 	call	0x4e56	; 0x4e56 <__divsf3>
     8e8:	f8 01       	movw	r30, r16
     8ea:	64 83       	std	Z+4, r22	; 0x04
     8ec:	75 83       	std	Z+5, r23	; 0x05
     8ee:	86 83       	std	Z+6, r24	; 0x06
     8f0:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 100.0;
     8f2:	b5 01       	movw	r22, r10
     8f4:	bb 0c       	add	r11, r11
     8f6:	88 0b       	sbc	r24, r24
     8f8:	99 0b       	sbc	r25, r25
     8fa:	0e 94 c1 27 	call	0x4f82	; 0x4f82 <__floatsisf>
     8fe:	20 e0       	ldi	r18, 0x00	; 0
     900:	30 e0       	ldi	r19, 0x00	; 0
     902:	48 ec       	ldi	r20, 0xC8	; 200
     904:	52 e4       	ldi	r21, 0x42	; 66
     906:	0e 94 2b 27 	call	0x4e56	; 0x4e56 <__divsf3>
     90a:	f8 01       	movw	r30, r16
     90c:	60 87       	std	Z+8, r22	; 0x08
     90e:	71 87       	std	Z+9, r23	; 0x09
     910:	82 87       	std	Z+10, r24	; 0x0a
     912:	93 87       	std	Z+11, r25	; 0x0b
    break;
  }

  return xyz;
}
     914:	c8 01       	movw	r24, r16
     916:	26 96       	adiw	r28, 0x06	; 6
     918:	0f b6       	in	r0, 0x3f	; 63
     91a:	f8 94       	cli
     91c:	de bf       	out	0x3e, r29	; 62
     91e:	0f be       	out	0x3f, r0	; 63
     920:	cd bf       	out	0x3d, r28	; 61
     922:	df 91       	pop	r29
     924:	cf 91       	pop	r28
     926:	1f 91       	pop	r17
     928:	0f 91       	pop	r16
     92a:	ff 90       	pop	r15
     92c:	df 90       	pop	r13
     92e:	cf 90       	pop	r12
     930:	bf 90       	pop	r11
     932:	af 90       	pop	r10
     934:	08 95       	ret

00000936 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>:
/*!
 *  @brief  Reads the sensor and returns the data as a sensors_event_t
 *  @param  event
 *  @return always returns true
 */
bool Adafruit_BNO055::getEvent(sensors_event_t *event) {
     936:	0f 93       	push	r16
     938:	1f 93       	push	r17
     93a:	cf 93       	push	r28
     93c:	df 93       	push	r29
     93e:	cd b7       	in	r28, 0x3d	; 61
     940:	de b7       	in	r29, 0x3e	; 62
     942:	2c 97       	sbiw	r28, 0x0c	; 12
     944:	0f b6       	in	r0, 0x3f	; 63
     946:	f8 94       	cli
     948:	de bf       	out	0x3e, r29	; 62
     94a:	0f be       	out	0x3f, r0	; 63
     94c:	cd bf       	out	0x3d, r28	; 61
     94e:	8b 01       	movw	r16, r22
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	fb 01       	movw	r30, r22
     954:	11 92       	st	Z+, r1
     956:	2a 95       	dec	r18
     958:	e9 f7       	brne	.-6      	; 0x954 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t+0x1e>

  event->version = sizeof(sensors_event_t);
     95a:	40 e2       	ldi	r20, 0x20	; 32
     95c:	50 e0       	ldi	r21, 0x00	; 0
     95e:	60 e0       	ldi	r22, 0x00	; 0
     960:	70 e0       	ldi	r23, 0x00	; 0
     962:	f8 01       	movw	r30, r16
     964:	40 83       	st	Z, r20
     966:	51 83       	std	Z+1, r21	; 0x01
     968:	62 83       	std	Z+2, r22	; 0x02
     96a:	73 83       	std	Z+3, r23	; 0x03
  event->sensor_id = _sensorID;
     96c:	fc 01       	movw	r30, r24
     96e:	46 81       	ldd	r20, Z+6	; 0x06
     970:	57 81       	ldd	r21, Z+7	; 0x07
     972:	60 85       	ldd	r22, Z+8	; 0x08
     974:	71 85       	ldd	r23, Z+9	; 0x09
     976:	f8 01       	movw	r30, r16
     978:	44 83       	std	Z+4, r20	; 0x04
     97a:	55 83       	std	Z+5, r21	; 0x05
     97c:	66 83       	std	Z+6, r22	; 0x06
     97e:	77 83       	std	Z+7, r23	; 0x07
  event->type = SENSOR_TYPE_ORIENTATION;
     980:	43 e0       	ldi	r20, 0x03	; 3
     982:	50 e0       	ldi	r21, 0x00	; 0
     984:	60 e0       	ldi	r22, 0x00	; 0
     986:	70 e0       	ldi	r23, 0x00	; 0
     988:	40 87       	std	Z+8, r20	; 0x08
     98a:	51 87       	std	Z+9, r21	; 0x09
     98c:	62 87       	std	Z+10, r22	; 0x0a
     98e:	73 87       	std	Z+11, r23	; 0x0b
  //event->timestamp = millis();

  /* Get a Euler angle sample for orientation */
  AdafruitImu::Vector<3> euler = getVector(Adafruit_BNO055::VECTOR_EULER);
     990:	4a e1       	ldi	r20, 0x1A	; 26
     992:	bc 01       	movw	r22, r24
     994:	ce 01       	movw	r24, r28
     996:	01 96       	adiw	r24, 0x01	; 1
     998:	38 de       	rcall	.-912    	; 0x60a <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
  event->orientation.x = euler.x();
     99a:	89 81       	ldd	r24, Y+1	; 0x01
     99c:	9a 81       	ldd	r25, Y+2	; 0x02
     99e:	ab 81       	ldd	r26, Y+3	; 0x03
     9a0:	bc 81       	ldd	r27, Y+4	; 0x04
     9a2:	f8 01       	movw	r30, r16
     9a4:	80 8b       	std	Z+16, r24	; 0x10
     9a6:	91 8b       	std	Z+17, r25	; 0x11
     9a8:	a2 8b       	std	Z+18, r26	; 0x12
     9aa:	b3 8b       	std	Z+19, r27	; 0x13
  event->orientation.y = euler.y();
     9ac:	8d 81       	ldd	r24, Y+5	; 0x05
     9ae:	9e 81       	ldd	r25, Y+6	; 0x06
     9b0:	af 81       	ldd	r26, Y+7	; 0x07
     9b2:	b8 85       	ldd	r27, Y+8	; 0x08
     9b4:	84 8b       	std	Z+20, r24	; 0x14
     9b6:	95 8b       	std	Z+21, r25	; 0x15
     9b8:	a6 8b       	std	Z+22, r26	; 0x16
     9ba:	b7 8b       	std	Z+23, r27	; 0x17
  event->orientation.z = euler.z();
     9bc:	89 85       	ldd	r24, Y+9	; 0x09
     9be:	9a 85       	ldd	r25, Y+10	; 0x0a
     9c0:	ab 85       	ldd	r26, Y+11	; 0x0b
     9c2:	bc 85       	ldd	r27, Y+12	; 0x0c
     9c4:	80 8f       	std	Z+24, r24	; 0x18
     9c6:	91 8f       	std	Z+25, r25	; 0x19
     9c8:	a2 8f       	std	Z+26, r26	; 0x1a
     9ca:	b3 8f       	std	Z+27, r27	; 0x1b

  return true;
}
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	2c 96       	adiw	r28, 0x0c	; 12
     9d0:	0f b6       	in	r0, 0x3f	; 63
     9d2:	f8 94       	cli
     9d4:	de bf       	out	0x3e, r29	; 62
     9d6:	0f be       	out	0x3f, r0	; 63
     9d8:	cd bf       	out	0x3d, r28	; 61
     9da:	df 91       	pop	r29
     9dc:	cf 91       	pop	r28
     9de:	1f 91       	pop	r17
     9e0:	0f 91       	pop	r16
     9e2:	08 95       	ret

000009e4 <_ZN9EtherComm15CommandReceivedEhPKhh>:
	//TODO remove useless commands
	//switch(command){
		//case CMD_Ping: RunPingCommand(data, len); break;
		//case CMD_Echo: RunEchoCommand(data, len); break;
		//case CMD_Led: RunLedCommand(data, len); break;
		/*case CMD_UpdateDevice:*/ rov.CommandReceived(id, data, len); //break;
     9e4:	0c 94 e8 21 	jmp	0x43d0	; 0x43d0 <_ZN5Robot15CommandReceivedEhPKhh>
     9e8:	08 95       	ret

000009ea <_GLOBAL__sub_I__Z14RunPingCommandPKhh>:
#include "Commands.h"
#include "EtherComm.h"
#include "Robot.h"
#include <stddef.h>

uint8_t* const SendDataBuffer = (uint8_t*)(&EtherComm::buffer[2]);
     9ea:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
     9ee:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
     9f2:	02 96       	adiw	r24, 0x02	; 2
     9f4:	90 93 e9 04 	sts	0x04E9, r25	; 0x8004e9 <__data_end+0x1>
     9f8:	80 93 e8 04 	sts	0x04E8, r24	; 0x8004e8 <__data_end>
     9fc:	08 95       	ret

000009fe <_ZL10enableChipv>:
static Register* selectPort;
static uint8_t selectPin;

static void enableChip () {
	//cli();
	SetLow(*selectPort, selectPin); //digitalWrite(selectPin, LOW);
     9fe:	e0 91 ee 04 	lds	r30, 0x04EE	; 0x8004ee <_ZL10selectPort>
     a02:	f0 91 ef 04 	lds	r31, 0x04EF	; 0x8004ef <_ZL10selectPort+0x1>
     a06:	90 81       	ld	r25, Z
     a08:	80 91 ed 04 	lds	r24, 0x04ED	; 0x8004ed <_ZL9selectPin>
     a0c:	80 95       	com	r24
     a0e:	89 23       	and	r24, r25
     a10:	80 83       	st	Z, r24
     a12:	08 95       	ret

00000a14 <_ZL11disableChipv>:
}

static void disableChip () {
	SetHigh(*selectPort, selectPin); //digitalWrite(selectPin, HIGH);
     a14:	e0 91 ee 04 	lds	r30, 0x04EE	; 0x8004ee <_ZL10selectPort>
     a18:	f0 91 ef 04 	lds	r31, 0x04EF	; 0x8004ef <_ZL10selectPort+0x1>
     a1c:	90 81       	ld	r25, Z
     a1e:	80 91 ed 04 	lds	r24, 0x04ED	; 0x8004ed <_ZL9selectPin>
     a22:	89 2b       	or	r24, r25
     a24:	80 83       	st	Z, r24
     a26:	08 95       	ret

00000a28 <_ZL6readOphh>:

	SetOutput(csDDR, selectPin);
	disableChip();
}

static uint8_t readOp (uint8_t op, uint8_t address) {
     a28:	cf 93       	push	r28
     a2a:	df 93       	push	r29
     a2c:	d8 2f       	mov	r29, r24
     a2e:	c6 2f       	mov	r28, r22
    enableChip();
     a30:	e6 df       	rcall	.-52     	; 0x9fe <_ZL10enableChipv>
    SPI.write8(op | (address & ADDR_MASK));
     a32:	8c 2f       	mov	r24, r28
     a34:	cf 71       	andi	r28, 0x1F	; 31
     a36:	cd 2b       	or	r28, r29
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     a38:	ce bd       	out	0x2e, r28	; 46
		asm volatile("nop");
     a3a:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     a3c:	0d b4       	in	r0, 0x2d	; 45
     a3e:	07 fe       	sbrs	r0, 7
     a40:	fd cf       	rjmp	.-6      	; 0xa3c <_ZL6readOphh+0x14>
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     a42:	1e bc       	out	0x2e, r1	; 46
		asm volatile("nop");
     a44:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     a46:	0d b4       	in	r0, 0x2d	; 45
     a48:	07 fe       	sbrs	r0, 7
     a4a:	fd cf       	rjmp	.-6      	; 0xa46 <_ZL6readOphh+0x1e>
	}

	//write8, excepts also returns the received byte
	static uint8_t read_write8(uint8_t data){
		write8(data);
		return SPDR;
     a4c:	ce b5       	in	r28, 0x2e	; 46
    uint8_t result = SPI.read_write8(0x00);
    if (address & 0x80)
     a4e:	88 23       	and	r24, r24
     a50:	34 f4       	brge	.+12     	; 0xa5e <_ZL6readOphh+0x36>
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     a52:	1e bc       	out	0x2e, r1	; 46
		asm volatile("nop");
     a54:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     a56:	0d b4       	in	r0, 0x2d	; 45
     a58:	07 fe       	sbrs	r0, 7
     a5a:	fd cf       	rjmp	.-6      	; 0xa56 <_ZL6readOphh+0x2e>
        result = SPI.read_write8(0x00);
    disableChip();
     a5c:	ce b5       	in	r28, 0x2e	; 46
     a5e:	da df       	rcall	.-76     	; 0xa14 <_ZL11disableChipv>
    return result;
}
     a60:	8c 2f       	mov	r24, r28
     a62:	df 91       	pop	r29
     a64:	cf 91       	pop	r28
     a66:	08 95       	ret

00000a68 <_ZL7writeOphhh>:

static void writeOp (uint8_t op, uint8_t address, uint8_t data) {
     a68:	1f 93       	push	r17
     a6a:	cf 93       	push	r28
     a6c:	df 93       	push	r29
     a6e:	c8 2f       	mov	r28, r24
     a70:	d6 2f       	mov	r29, r22
     a72:	14 2f       	mov	r17, r20
    enableChip();
     a74:	c4 df       	rcall	.-120    	; 0x9fe <_ZL10enableChipv>
    SPI.write8(op | (address & ADDR_MASK));
     a76:	df 71       	andi	r29, 0x1F	; 31
     a78:	cd 2b       	or	r28, r29
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     a7a:	ce bd       	out	0x2e, r28	; 46
		asm volatile("nop");
     a7c:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     a7e:	0d b4       	in	r0, 0x2d	; 45
     a80:	07 fe       	sbrs	r0, 7
     a82:	fd cf       	rjmp	.-6      	; 0xa7e <_ZL7writeOphhh+0x16>
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     a84:	1e bd       	out	0x2e, r17	; 46
		asm volatile("nop");
     a86:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     a88:	0d b4       	in	r0, 0x2d	; 45
     a8a:	07 fe       	sbrs	r0, 7
    SPI.write8(data);
    disableChip();
     a8c:	fd cf       	rjmp	.-6      	; 0xa88 <_ZL7writeOphhh+0x20>
     a8e:	c2 df       	rcall	.-124    	; 0xa14 <_ZL11disableChipv>
}
     a90:	df 91       	pop	r29
     a92:	cf 91       	pop	r28
     a94:	1f 91       	pop	r17
     a96:	08 95       	ret

00000a98 <_ZL7readBufjPh>:

static void readBuf(uint16_t len, uint8_t* data) {
     a98:	0f 93       	push	r16
     a9a:	1f 93       	push	r17
     a9c:	cf 93       	push	r28
     a9e:	df 93       	push	r29
     aa0:	ec 01       	movw	r28, r24
     aa2:	8b 01       	movw	r16, r22
    enableChip();
     aa4:	ac df       	rcall	.-168    	; 0x9fe <_ZL10enableChipv>
    if (len != 0) {
     aa6:	20 97       	sbiw	r28, 0x00	; 0
     aa8:	99 f0       	breq	.+38     	; 0xad0 <_ZL7readBufjPh+0x38>
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     aaa:	8a e3       	ldi	r24, 0x3A	; 58
     aac:	8e bd       	out	0x2e, r24	; 46
		asm volatile("nop");
     aae:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     ab0:	0d b4       	in	r0, 0x2d	; 45
     ab2:	07 fe       	sbrs	r0, 7
     ab4:	fd cf       	rjmp	.-6      	; 0xab0 <_ZL7readBufjPh+0x18>
     ab6:	f8 01       	movw	r30, r16
     ab8:	b8 01       	movw	r22, r16
     aba:	6c 0f       	add	r22, r28
     abc:	7d 1f       	adc	r23, r29
	static void read(void *buf, uint16_t nbyte, uint8_t dataSend = 0){
		if(nbyte == 0) return;
		
		uint8_t* buff = (uint8_t*)buf;
		while(nbyte--){
			SPDR = dataSend;
     abe:	1e bc       	out	0x2e, r1	; 46
			//asm volatile("nop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\n");
			while(!(SPSR & _BV(SPIF)));
     ac0:	0d b4       	in	r0, 0x2d	; 45
     ac2:	07 fe       	sbrs	r0, 7
     ac4:	fd cf       	rjmp	.-6      	; 0xac0 <_ZL7readBufjPh+0x28>
			*buff++ = SPDR;
     ac6:	9e b5       	in	r25, 0x2e	; 46
     ac8:	91 93       	st	Z+, r25
		
	static void read(void *buf, uint16_t nbyte, uint8_t dataSend = 0){
		if(nbyte == 0) return;
		
		uint8_t* buff = (uint8_t*)buf;
		while(nbyte--){
     aca:	6e 17       	cp	r22, r30
     acc:	7f 07       	cpc	r23, r31
        SPI.write8(ENC28J60_READ_BUF_MEM);
		SPI.read(data, len);
    }
    disableChip();
     ace:	b9 f7       	brne	.-18     	; 0xabe <_ZL7readBufjPh+0x26>
     ad0:	a1 df       	rcall	.-190    	; 0xa14 <_ZL11disableChipv>
}
     ad2:	df 91       	pop	r29
     ad4:	cf 91       	pop	r28
     ad6:	1f 91       	pop	r17
     ad8:	0f 91       	pop	r16
     ada:	08 95       	ret

00000adc <_ZL7SetBankh>:
        SPI.write(data, len);
    }
    disableChip();
}

static void SetBank (uint8_t address) {
     adc:	1f 93       	push	r17
     ade:	cf 93       	push	r28
     ae0:	df 93       	push	r29
     ae2:	18 2f       	mov	r17, r24
     ae4:	10 76       	andi	r17, 0x60	; 96
    if ((address & BANK_MASK) != Enc28j60Bank) {
     ae6:	c1 2f       	mov	r28, r17
     ae8:	d0 e0       	ldi	r29, 0x00	; 0
     aea:	80 91 f0 04 	lds	r24, 0x04F0	; 0x8004f0 <_ZL12Enc28j60Bank>
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	c8 17       	cp	r28, r24
     af2:	d9 07       	cpc	r29, r25
     af4:	a1 f0       	breq	.+40     	; 0xb1e <_ZL7SetBankh+0x42>
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_BSEL1|ECON1_BSEL0);
     af6:	43 e0       	ldi	r20, 0x03	; 3
     af8:	6f e1       	ldi	r22, 0x1F	; 31
     afa:	80 ea       	ldi	r24, 0xA0	; 160
     afc:	b5 df       	rcall	.-150    	; 0xa68 <_ZL7writeOphhh>
        Enc28j60Bank = address & BANK_MASK;
     afe:	10 93 f0 04 	sts	0x04F0, r17	; 0x8004f0 <_ZL12Enc28j60Bank>
        writeOp(ENC28J60_BIT_FIELD_SET, ECON1, Enc28j60Bank>>5);
     b02:	ae 01       	movw	r20, r28
     b04:	55 95       	asr	r21
     b06:	47 95       	ror	r20
     b08:	55 95       	asr	r21
     b0a:	47 95       	ror	r20
     b0c:	55 95       	asr	r21
     b0e:	47 95       	ror	r20
     b10:	55 95       	asr	r21
     b12:	47 95       	ror	r20
     b14:	55 95       	asr	r21
     b16:	47 95       	ror	r20
     b18:	6f e1       	ldi	r22, 0x1F	; 31
     b1a:	80 e8       	ldi	r24, 0x80	; 128
     b1c:	a5 df       	rcall	.-182    	; 0xa68 <_ZL7writeOphhh>
    }
}
     b1e:	df 91       	pop	r29
     b20:	cf 91       	pop	r28
     b22:	1f 91       	pop	r17
     b24:	08 95       	ret

00000b26 <_ZL11readRegByteh>:

static uint8_t readRegByte (uint8_t address) {
     b26:	cf 93       	push	r28
     b28:	c8 2f       	mov	r28, r24
    SetBank(address);
     b2a:	d8 df       	rcall	.-80     	; 0xadc <_ZL7SetBankh>
    return readOp(ENC28J60_READ_CTRL_REG, address);
     b2c:	6c 2f       	mov	r22, r28
     b2e:	80 e0       	ldi	r24, 0x00	; 0
     b30:	7b df       	rcall	.-266    	; 0xa28 <_ZL6readOphh>
}
     b32:	cf 91       	pop	r28
     b34:	08 95       	ret

00000b36 <_ZL12writeRegBytehh>:

static void writeRegByte (uint8_t address, uint8_t data) {
     b36:	cf 93       	push	r28
     b38:	df 93       	push	r29
     b3a:	c8 2f       	mov	r28, r24
     b3c:	d6 2f       	mov	r29, r22
    SetBank(address);
     b3e:	ce df       	rcall	.-100    	; 0xadc <_ZL7SetBankh>
    writeOp(ENC28J60_WRITE_CTRL_REG, address, data);
     b40:	4d 2f       	mov	r20, r29
     b42:	6c 2f       	mov	r22, r28
     b44:	80 e4       	ldi	r24, 0x40	; 64
     b46:	90 df       	rcall	.-224    	; 0xa68 <_ZL7writeOphhh>
}
     b48:	df 91       	pop	r29
     b4a:	cf 91       	pop	r28
     b4c:	08 95       	ret

00000b4e <_ZL8writeReghj>:

static void writeReg(uint8_t address, uint16_t data) {
     b4e:	cf 93       	push	r28
     b50:	df 93       	push	r29
     b52:	c8 2f       	mov	r28, r24
     b54:	d7 2f       	mov	r29, r23
    writeRegByte(address, data);
     b56:	ef df       	rcall	.-34     	; 0xb36 <_ZL12writeRegBytehh>
    writeRegByte(address + 1, data >> 8);
     b58:	6d 2f       	mov	r22, r29
     b5a:	81 e0       	ldi	r24, 0x01	; 1
     b5c:	8c 0f       	add	r24, r28
     b5e:	eb df       	rcall	.-42     	; 0xb36 <_ZL12writeRegBytehh>
}
     b60:	df 91       	pop	r29
     b62:	cf 91       	pop	r28
     b64:	08 95       	ret

00000b66 <_ZN8ENC28J607initSPIERVh>:
static void disableChip () {
	SetHigh(*selectPort, selectPin); //digitalWrite(selectPin, HIGH);
	//sei();
}

void ENC28J60::initSPI (Register& csDDR) {
     b66:	fc 01       	movw	r30, r24

class SPI{
public:
	static void begin(uint8_t clock = SPI_CLOCK_DIV2){
		//SPI_DIR |= SS;
		DDR_SPI |= MASK_MOSI | MASK_SCK | MASK_SS; //Not sure why, but SS pin requires to be set as output even when not being used.
     b68:	94 b1       	in	r25, 0x04	; 4
     b6a:	97 60       	ori	r25, 0x07	; 7
     b6c:	94 b9       	out	0x04, r25	; 4
		DDR_SPI &= ~(MASK_MISO);
     b6e:	23 98       	cbi	0x04, 3	; 4
		//disableCS();

		SPSR |= (clock >> 2);
     b70:	9d b5       	in	r25, 0x2d	; 45
     b72:	91 60       	ori	r25, 0x01	; 1
     b74:	9d bd       	out	0x2d, r25	; 45
		SPCR |= _BV(MSTR) | _BV(SPE) | (clock & 0x03);
     b76:	9c b5       	in	r25, 0x2c	; 44
     b78:	90 65       	ori	r25, 0x50	; 80
     b7a:	9c bd       	out	0x2c, r25	; 44
	SPI.begin(SPI_CLOCK_DIV2);

	SetOutput(csDDR, selectPin);
     b7c:	80 81       	ld	r24, Z
     b7e:	90 91 ed 04 	lds	r25, 0x04ED	; 0x8004ed <_ZL9selectPin>
     b82:	98 2b       	or	r25, r24
     b84:	90 83       	st	Z, r25
	disableChip();
     b86:	46 cf       	rjmp	.-372    	; 0xa14 <_ZL11disableChipv>
     b88:	08 95       	ret

00000b8a <_ZN8ENC28J6010initializeEjPKhRVhS3_h>:
    writeReg(MIWR, data);
    while (readRegByte(MISTAT) & MISTAT_BUSY)
        ;
}

uint8_t ENC28J60::initialize (uint16_t size, const uint8_t* macaddr, Register& csDDR, Register& csPort, uint8_t csPin) {
     b8a:	0f 93       	push	r16
     b8c:	cf 93       	push	r28
     b8e:	df 93       	push	r29
     b90:	eb 01       	movw	r28, r22
    bufferSize = size;
     b92:	90 93 f2 04 	sts	0x04F2, r25	; 0x8004f2 <_ZN8ENC28J6010bufferSizeE+0x1>
     b96:	80 93 f1 04 	sts	0x04F1, r24	; 0x8004f1 <_ZN8ENC28J6010bufferSizeE>
	selectPin = csPin;
     b9a:	00 93 ed 04 	sts	0x04ED, r16	; 0x8004ed <_ZL9selectPin>
	selectPort = &csPort;
     b9e:	30 93 ef 04 	sts	0x04EF, r19	; 0x8004ef <_ZL10selectPort+0x1>
     ba2:	20 93 ee 04 	sts	0x04EE, r18	; 0x8004ee <_ZL10selectPort>
    initSPI(csDDR);
     ba6:	ca 01       	movw	r24, r20
     ba8:	de df       	rcall	.-68     	; 0xb66 <_ZN8ENC28J607initSPIERVh>

    writeOp(ENC28J60_SOFT_RESET, 0, ENC28J60_SOFT_RESET);
     baa:	4f ef       	ldi	r20, 0xFF	; 255
     bac:	60 e0       	ldi	r22, 0x00	; 0
     bae:	8f ef       	ldi	r24, 0xFF	; 255
     bb0:	5b df       	rcall	.-330    	; 0xa68 <_ZL7writeOphhh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     bb2:	8f e3       	ldi	r24, 0x3F	; 63
     bb4:	9f e1       	ldi	r25, 0x1F	; 31
     bb6:	01 97       	sbiw	r24, 0x01	; 1
     bb8:	f1 f7       	brne	.-4      	; 0xbb6 <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0x2c>
     bba:	00 c0       	rjmp	.+0      	; 0xbbc <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0x32>
     bbc:	00 00       	nop
	_delay_ms(2);
    while (!readOp(ENC28J60_READ_CTRL_REG, ESTAT) & ESTAT_CLKRDY)
     bbe:	6d e1       	ldi	r22, 0x1D	; 29
     bc0:	80 e0       	ldi	r24, 0x00	; 0
     bc2:	32 df       	rcall	.-412    	; 0xa28 <_ZL6readOphh>
     bc4:	88 23       	and	r24, r24
     bc6:	d9 f3       	breq	.-10     	; 0xbbe <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0x34>
        ;

    writeReg(ERXST, RXSTART_INIT);
     bc8:	60 e0       	ldi	r22, 0x00	; 0
     bca:	70 e0       	ldi	r23, 0x00	; 0
     bcc:	88 e0       	ldi	r24, 0x08	; 8
     bce:	bf df       	rcall	.-130    	; 0xb4e <_ZL8writeReghj>
    writeReg(ERXRDPT, RXSTART_INIT);
     bd0:	60 e0       	ldi	r22, 0x00	; 0
     bd2:	70 e0       	ldi	r23, 0x00	; 0
     bd4:	8c e0       	ldi	r24, 0x0C	; 12
     bd6:	bb df       	rcall	.-138    	; 0xb4e <_ZL8writeReghj>
    writeReg(ERXND, RXSTOP_INIT);
     bd8:	6f ef       	ldi	r22, 0xFF	; 255
     bda:	7b e0       	ldi	r23, 0x0B	; 11
     bdc:	8a e0       	ldi	r24, 0x0A	; 10
     bde:	b7 df       	rcall	.-146    	; 0xb4e <_ZL8writeReghj>
    writeReg(ETXST, TXSTART_INIT);
     be0:	60 e0       	ldi	r22, 0x00	; 0
     be2:	7c e0       	ldi	r23, 0x0C	; 12
     be4:	84 e0       	ldi	r24, 0x04	; 4
     be6:	b3 df       	rcall	.-154    	; 0xb4e <_ZL8writeReghj>
    writeReg(ETXND, TXSTOP_INIT);
     be8:	6f ef       	ldi	r22, 0xFF	; 255
     bea:	71 e1       	ldi	r23, 0x11	; 17
     bec:	86 e0       	ldi	r24, 0x06	; 6
     bee:	af df       	rcall	.-162    	; 0xb4e <_ZL8writeReghj>

    writeRegByte(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN|ERXFCON_PMEN|ERXFCON_BCEN);
     bf0:	61 eb       	ldi	r22, 0xB1	; 177
     bf2:	88 e3       	ldi	r24, 0x38	; 56
     bf4:	a0 df       	rcall	.-192    	; 0xb36 <_ZL12writeRegBytehh>
    writeReg(EPMM0, 0x303f);
     bf6:	6f e3       	ldi	r22, 0x3F	; 63
     bf8:	70 e3       	ldi	r23, 0x30	; 48
     bfa:	88 e2       	ldi	r24, 0x28	; 40
     bfc:	a8 df       	rcall	.-176    	; 0xb4e <_ZL8writeReghj>
    writeReg(EPMCS, 0xf7f9);
     bfe:	69 ef       	ldi	r22, 0xF9	; 249
     c00:	77 ef       	ldi	r23, 0xF7	; 247
     c02:	80 e3       	ldi	r24, 0x30	; 48
     c04:	a4 df       	rcall	.-184    	; 0xb4e <_ZL8writeReghj>
    writeRegByte(MACON1, MACON1_MARXEN);
     c06:	61 e0       	ldi	r22, 0x01	; 1
     c08:	80 ec       	ldi	r24, 0xC0	; 192
     c0a:	95 df       	rcall	.-214    	; 0xb36 <_ZL12writeRegBytehh>
    writeOp(ENC28J60_BIT_FIELD_SET, MACON3,
            MACON3_PADCFG0|MACON3_TXCRCEN|MACON3_FRMLNEN);
     c0c:	42 e3       	ldi	r20, 0x32	; 50
     c0e:	62 ec       	ldi	r22, 0xC2	; 194
     c10:	80 e8       	ldi	r24, 0x80	; 128
     c12:	2a df       	rcall	.-428    	; 0xa68 <_ZL7writeOphhh>
    writeReg(MAIPG, 0x0C12);
     c14:	62 e1       	ldi	r22, 0x12	; 18
     c16:	7c e0       	ldi	r23, 0x0C	; 12
     c18:	86 ec       	ldi	r24, 0xC6	; 198
    writeRegByte(MABBIPG, 0x12);
     c1a:	99 df       	rcall	.-206    	; 0xb4e <_ZL8writeReghj>
     c1c:	62 e1       	ldi	r22, 0x12	; 18
     c1e:	84 ec       	ldi	r24, 0xC4	; 196
    writeReg(MAMXFL, MAX_FRAMELEN);
     c20:	8a df       	rcall	.-236    	; 0xb36 <_ZL12writeRegBytehh>
     c22:	6c ed       	ldi	r22, 0xDC	; 220
     c24:	75 e0       	ldi	r23, 0x05	; 5
    writeRegByte(MAADR5, macaddr[0]);
     c26:	8a ec       	ldi	r24, 0xCA	; 202
     c28:	92 df       	rcall	.-220    	; 0xb4e <_ZL8writeReghj>
     c2a:	68 81       	ld	r22, Y
    writeRegByte(MAADR4, macaddr[1]);
     c2c:	84 ee       	ldi	r24, 0xE4	; 228
     c2e:	83 df       	rcall	.-250    	; 0xb36 <_ZL12writeRegBytehh>
     c30:	69 81       	ldd	r22, Y+1	; 0x01
    writeRegByte(MAADR3, macaddr[2]);
     c32:	85 ee       	ldi	r24, 0xE5	; 229
     c34:	80 df       	rcall	.-256    	; 0xb36 <_ZL12writeRegBytehh>
    writeRegByte(MAADR2, macaddr[3]);
     c36:	6a 81       	ldd	r22, Y+2	; 0x02
     c38:	82 ee       	ldi	r24, 0xE2	; 226
     c3a:	7d df       	rcall	.-262    	; 0xb36 <_ZL12writeRegBytehh>
    writeRegByte(MAADR1, macaddr[4]);
     c3c:	6b 81       	ldd	r22, Y+3	; 0x03
     c3e:	83 ee       	ldi	r24, 0xE3	; 227
     c40:	7a df       	rcall	.-268    	; 0xb36 <_ZL12writeRegBytehh>
    writeRegByte(MAADR0, macaddr[5]);
     c42:	6c 81       	ldd	r22, Y+4	; 0x04
     c44:	80 ee       	ldi	r24, 0xE0	; 224
     c46:	77 df       	rcall	.-274    	; 0xb36 <_ZL12writeRegBytehh>
    writeRegByte(MICMD, 0x00);
    return readRegByte(MIRD+1);
}

static void writePhy (uint8_t address, uint16_t data) {
    writeRegByte(MIREGADR, address);
     c48:	6d 81       	ldd	r22, Y+5	; 0x05
     c4a:	81 ee       	ldi	r24, 0xE1	; 225
     c4c:	74 df       	rcall	.-280    	; 0xb36 <_ZL12writeRegBytehh>
    writeReg(MIWR, data);
     c4e:	60 e1       	ldi	r22, 0x10	; 16
     c50:	84 ed       	ldi	r24, 0xD4	; 212
     c52:	71 df       	rcall	.-286    	; 0xb36 <_ZL12writeRegBytehh>
     c54:	60 e0       	ldi	r22, 0x00	; 0
     c56:	71 e0       	ldi	r23, 0x01	; 1
    while (readRegByte(MISTAT) & MISTAT_BUSY)
     c58:	86 ed       	ldi	r24, 0xD6	; 214
     c5a:	79 df       	rcall	.-270    	; 0xb4e <_ZL8writeReghj>
     c5c:	8a ee       	ldi	r24, 0xEA	; 234
     c5e:	63 df       	rcall	.-314    	; 0xb26 <_ZL11readRegByteh>
     c60:	80 fd       	sbrc	r24, 0
    writeRegByte(MAADR3, macaddr[2]);
    writeRegByte(MAADR2, macaddr[3]);
    writeRegByte(MAADR1, macaddr[4]);
    writeRegByte(MAADR0, macaddr[5]);
    writePhy(PHCON2, PHCON2_HDLDIS);
    SetBank(ECON1);
     c62:	fc cf       	rjmp	.-8      	; 0xc5c <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0xd2>
     c64:	8f e1       	ldi	r24, 0x1F	; 31
     c66:	3a df       	rcall	.-396    	; 0xadc <_ZL7SetBankh>
    writeOp(ENC28J60_BIT_FIELD_SET, EIE, EIE_INTIE|EIE_PKTIE);
     c68:	40 ec       	ldi	r20, 0xC0	; 192
     c6a:	6b e1       	ldi	r22, 0x1B	; 27
     c6c:	80 e8       	ldi	r24, 0x80	; 128
     c6e:	fc de       	rcall	.-520    	; 0xa68 <_ZL7writeOphhh>
     c70:	44 e0       	ldi	r20, 0x04	; 4
    writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN);
     c72:	6f e1       	ldi	r22, 0x1F	; 31
     c74:	80 e8       	ldi	r24, 0x80	; 128
     c76:	f8 de       	rcall	.-528    	; 0xa68 <_ZL7writeOphhh>
     c78:	82 e7       	ldi	r24, 0x72	; 114
     c7a:	55 df       	rcall	.-342    	; 0xb26 <_ZL11readRegByteh>

    uint8_t rev = readRegByte(EREVID);
     c7c:	86 30       	cpi	r24, 0x06	; 6
     c7e:	08 f0       	brcs	.+2      	; 0xc82 <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0xf8>
     c80:	8f 5f       	subi	r24, 0xFF	; 255
    // microchip forgot to step the number on the silicon when they
    // released the revision B7. 6 is now rev B7. We still have
    // to see what they do when they release B8. At the moment
    // there is no B8 out yet
    if (rev > 5) ++rev;
     c82:	df 91       	pop	r29
     c84:	cf 91       	pop	r28
     c86:	0f 91       	pop	r16
    return rev;
}
     c88:	08 95       	ret

00000c8a <_ZN8ENC28J608isLinkUpEv>:
     c8a:	61 e1       	ldi	r22, 0x11	; 17
     c8c:	84 ed       	ldi	r24, 0xD4	; 212
     c8e:	53 df       	rcall	.-346    	; 0xb36 <_ZL12writeRegBytehh>
    writeRegByte(address + 1, data >> 8);
}

static uint16_t readPhyByte (uint8_t address) {
    writeRegByte(MIREGADR, address);
    writeRegByte(MICMD, MICMD_MIIRD);
     c90:	61 e0       	ldi	r22, 0x01	; 1
     c92:	82 ed       	ldi	r24, 0xD2	; 210
     c94:	50 df       	rcall	.-352    	; 0xb36 <_ZL12writeRegBytehh>
    while (readRegByte(MISTAT) & MISTAT_BUSY)
     c96:	8a ee       	ldi	r24, 0xEA	; 234
     c98:	46 df       	rcall	.-372    	; 0xb26 <_ZL11readRegByteh>
     c9a:	80 fd       	sbrc	r24, 0
     c9c:	fc cf       	rjmp	.-8      	; 0xc96 <_ZN8ENC28J608isLinkUpEv+0xc>
        ;
    writeRegByte(MICMD, 0x00);
     c9e:	60 e0       	ldi	r22, 0x00	; 0
     ca0:	82 ed       	ldi	r24, 0xD2	; 210
     ca2:	49 df       	rcall	.-366    	; 0xb36 <_ZL12writeRegBytehh>
    return readRegByte(MIRD+1);
     ca4:	89 ed       	ldi	r24, 0xD9	; 217
     ca6:	3f df       	rcall	.-386    	; 0xb26 <_ZL11readRegByteh>
     ca8:	82 fb       	bst	r24, 2
    return rev;
}

bool ENC28J60::isLinkUp() {
    return (readPhyByte(PHSTAT2) >> 2) & 1;
}
     caa:	88 27       	eor	r24, r24
     cac:	80 f9       	bld	r24, 0
     cae:	08 95       	ret

00000cb0 <_ZN8ENC28J6010packetSendEj>:
     cb0:	af 92       	push	r10

struct transmit_status_vector {
    uint8_t bytes[7];
};

void ENC28J60::packetSend(uint16_t len) {
     cb2:	bf 92       	push	r11
     cb4:	cf 92       	push	r12
     cb6:	df 92       	push	r13
     cb8:	ef 92       	push	r14
     cba:	ff 92       	push	r15
     cbc:	0f 93       	push	r16
     cbe:	1f 93       	push	r17
     cc0:	cf 93       	push	r28
     cc2:	df 93       	push	r29
     cc4:	7c 01       	movw	r14, r24
        writeOp(ENC28J60_BIT_FIELD_CLR, EIR, EIR_TXERIF|EIR_TXIF);

        // prepare new transmission
        if (retry == 0) {
            writeReg(EWRPT, TXSTART_INIT);
            writeReg(ETXND, TXSTART_INIT+len);
     cc6:	6c 01       	movw	r12, r24
     cc8:	84 ef       	ldi	r24, 0xF4	; 244
     cca:	d8 1a       	sub	r13, r24

	static void write(const void *buf, uint16_t nbyte){
		if(nbyte == 0) return;
		
		const uint8_t* buff = (const uint8_t*)(buf);
		SPDR = *buff;
     ccc:	0f 2e       	mov	r0, r31
     cce:	f3 ef       	ldi	r31, 0xF3	; 243
     cd0:	af 2e       	mov	r10, r31
     cd2:	f4 e0       	ldi	r31, 0x04	; 4
     cd4:	bf 2e       	mov	r11, r31
     cd6:	f0 2d       	mov	r31, r0
     cd8:	87 01       	movw	r16, r14
     cda:	0d 50       	subi	r16, 0x0D	; 13
     cdc:	1b 4f       	sbci	r17, 0xFB	; 251
        // the Microchip TCP/IP stack implementation used to first check
        // whether TXERIF is set and only then reset the transmit logic
        // but this has been changed in later versions; possibly they
        // have a reason for this; they don't mention this in the errata
        // sheet
        writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRST);
     cde:	40 e8       	ldi	r20, 0x80	; 128
     ce0:	6f e1       	ldi	r22, 0x1F	; 31
     ce2:	80 e8       	ldi	r24, 0x80	; 128
     ce4:	c1 de       	rcall	.-638    	; 0xa68 <_ZL7writeOphhh>
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRST);
     ce6:	40 e8       	ldi	r20, 0x80	; 128
     ce8:	6f e1       	ldi	r22, 0x1F	; 31
     cea:	80 ea       	ldi	r24, 0xA0	; 160
     cec:	bd de       	rcall	.-646    	; 0xa68 <_ZL7writeOphhh>
        writeOp(ENC28J60_BIT_FIELD_CLR, EIR, EIR_TXERIF|EIR_TXIF);
     cee:	4a e0       	ldi	r20, 0x0A	; 10
     cf0:	6c e1       	ldi	r22, 0x1C	; 28
     cf2:	80 ea       	ldi	r24, 0xA0	; 160
     cf4:	b9 de       	rcall	.-654    	; 0xa68 <_ZL7writeOphhh>

        // prepare new transmission
        if (retry == 0) {
            writeReg(EWRPT, TXSTART_INIT);
     cf6:	60 e0       	ldi	r22, 0x00	; 0
     cf8:	7c e0       	ldi	r23, 0x0C	; 12
     cfa:	82 e0       	ldi	r24, 0x02	; 2
            writeReg(ETXND, TXSTART_INIT+len);
     cfc:	28 df       	rcall	.-432    	; 0xb4e <_ZL8writeReghj>
     cfe:	b6 01       	movw	r22, r12
     d00:	86 e0       	ldi	r24, 0x06	; 6
            writeOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
     d02:	25 df       	rcall	.-438    	; 0xb4e <_ZL8writeReghj>
     d04:	40 e0       	ldi	r20, 0x00	; 0
     d06:	60 e0       	ldi	r22, 0x00	; 0
     d08:	8a e7       	ldi	r24, 0x7A	; 122
     d0a:	ae de       	rcall	.-676    	; 0xa68 <_ZL7writeOphhh>
    }
    disableChip();
}

static void writeBuf(uint16_t len, const uint8_t* data) {
    enableChip();
     d0c:	78 de       	rcall	.-784    	; 0x9fe <_ZL10enableChipv>
     d0e:	e1 14       	cp	r14, r1
    if (len != 0) {
     d10:	f1 04       	cpc	r15, r1
     d12:	e1 f0       	breq	.+56     	; 0xd4c <_ZN8ENC28J6010packetSendEj+0x9c>
     d14:	8a e7       	ldi	r24, 0x7A	; 122
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     d16:	8e bd       	out	0x2e, r24	; 46
     d18:	00 00       	nop
		asm volatile("nop");
     d1a:	0d b4       	in	r0, 0x2d	; 45
		while(!(SPSR & _BV(SPIF)));
     d1c:	07 fe       	sbrs	r0, 7
     d1e:	fd cf       	rjmp	.-6      	; 0xd1a <_ZN8ENC28J6010packetSendEj+0x6a>
     d20:	f5 01       	movw	r30, r10

	static void write(const void *buf, uint16_t nbyte){
		if(nbyte == 0) return;
		
		const uint8_t* buff = (const uint8_t*)(buf);
		SPDR = *buff;
     d22:	80 81       	ld	r24, Z
     d24:	8e bd       	out	0x2e, r24	; 46
     d26:	f1 e0       	ldi	r31, 0x01	; 1
		while(--nbyte){
     d28:	ef 16       	cp	r14, r31
     d2a:	f1 04       	cpc	r15, r1
     d2c:	59 f0       	breq	.+22     	; 0xd44 <_ZN8ENC28J6010packetSendEj+0x94>
     d2e:	e4 ef       	ldi	r30, 0xF4	; 244
     d30:	f4 e0       	ldi	r31, 0x04	; 4
     d32:	00 00       	nop
			asm volatile("nop");
     d34:	0d b4       	in	r0, 0x2d	; 45
			while (!(SPSR & _BV(SPIF))) ;
     d36:	07 fe       	sbrs	r0, 7
     d38:	fd cf       	rjmp	.-6      	; 0xd34 <_ZN8ENC28J6010packetSendEj+0x84>
     d3a:	81 91       	ld	r24, Z+
			SPDR = *++buff;
     d3c:	8e bd       	out	0x2e, r24	; 46
     d3e:	e0 17       	cp	r30, r16
	static void write(const void *buf, uint16_t nbyte){
		if(nbyte == 0) return;
		
		const uint8_t* buff = (const uint8_t*)(buf);
		SPDR = *buff;
		while(--nbyte){
     d40:	f1 07       	cpc	r31, r17
     d42:	b9 f7       	brne	.-18     	; 0xd32 <_ZN8ENC28J6010packetSendEj+0x82>
			asm volatile("nop");
			while (!(SPSR & _BV(SPIF))) ;
			SPDR = *++buff;
		}
		asm volatile("nop");
     d44:	00 00       	nop
		while (!(SPSR & _BV(SPIF))) ;
     d46:	0d b4       	in	r0, 0x2d	; 45
     d48:	07 fe       	sbrs	r0, 7
        SPI.write8(ENC28J60_WRITE_BUF_MEM);

        SPI.write(data, len);
    }
    disableChip();
     d4a:	fd cf       	rjmp	.-6      	; 0xd46 <_ZN8ENC28J6010packetSendEj+0x96>
            writeOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
            writeBuf(len, buffer);
        }

        // initiate transmission
        writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
     d4c:	63 de       	rcall	.-826    	; 0xa14 <_ZL11disableChipv>
     d4e:	48 e0       	ldi	r20, 0x08	; 8
     d50:	6f e1       	ldi	r22, 0x1F	; 31
     d52:	80 e8       	ldi	r24, 0x80	; 128
     d54:	89 de       	rcall	.-750    	; 0xa68 <_ZL7writeOphhh>
        // wait until transmission has finished; referring to the data sheet and
        // to the errata (Errata Issue 13; Example 1) you only need to wait until either
        // TXIF or TXERIF gets set; however this leads to hangs; apparently Microchip
        // realized this and in later implementations of their tcp/ip stack they introduced
        // a counter to avoid hangs; of course they didn't update the errata sheet
        uint16_t count = 0;
     d56:	c0 e0       	ldi	r28, 0x00	; 0
     d58:	d0 e0       	ldi	r29, 0x00	; 0
        while ((readRegByte(EIR) & (EIR_TXIF | EIR_TXERIF)) == 0 && ++count < 1000U)
     d5a:	8c e1       	ldi	r24, 0x1C	; 28
     d5c:	e4 de       	rcall	.-568    	; 0xb26 <_ZL11readRegByteh>
     d5e:	8a 70       	andi	r24, 0x0A	; 10
     d60:	31 f4       	brne	.+12     	; 0xd6e <_ZN8ENC28J6010packetSendEj+0xbe>
     d62:	21 96       	adiw	r28, 0x01	; 1
     d64:	c8 3e       	cpi	r28, 0xE8	; 232
     d66:	83 e0       	ldi	r24, 0x03	; 3
     d68:	d8 07       	cpc	r29, r24
     d6a:	b9 f7       	brne	.-18     	; 0xd5a <_ZN8ENC28J6010packetSendEj+0xaa>
     d6c:	0c c0       	rjmp	.+24     	; 0xd86 <_ZN8ENC28J6010packetSendEj+0xd6>
            ;

        if (!(readRegByte(EIR) & EIR_TXERIF) && count < 1000U) {
     d6e:	8c e1       	ldi	r24, 0x1C	; 28
     d70:	da de       	rcall	.-588    	; 0xb26 <_ZL11readRegByteh>
     d72:	81 fd       	sbrc	r24, 1
     d74:	03 c0       	rjmp	.+6      	; 0xd7c <_ZN8ENC28J6010packetSendEj+0xcc>
     d76:	c8 3e       	cpi	r28, 0xE8	; 232
     d78:	d3 40       	sbci	r29, 0x03	; 3
            // no error; start new transmission
            break;
        }

        // cancel previous transmission if stuck
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRTS);
     d7a:	40 f0       	brcs	.+16     	; 0xd8c <_ZN8ENC28J6010packetSendEj+0xdc>
     d7c:	48 e0       	ldi	r20, 0x08	; 8
     d7e:	6f e1       	ldi	r22, 0x1F	; 31
     d80:	80 ea       	ldi	r24, 0xA0	; 160
     d82:	72 de       	rcall	.-796    	; 0xa68 <_ZL7writeOphhh>
};

void ENC28J60::packetSend(uint16_t len) {
    uint8_t retry = 0;

    while (1) {
     d84:	ac cf       	rjmp	.-168    	; 0xcde <_ZN8ENC28J6010packetSendEj+0x2e>
        // a counter to avoid hangs; of course they didn't update the errata sheet
        uint16_t count = 0;
        while ((readRegByte(EIR) & (EIR_TXIF | EIR_TXERIF)) == 0 && ++count < 1000U)
            ;

        if (!(readRegByte(EIR) & EIR_TXERIF) && count < 1000U) {
     d86:	8c e1       	ldi	r24, 0x1C	; 28
     d88:	ce de       	rcall	.-612    	; 0xb26 <_ZL11readRegByteh>
     d8a:	f8 cf       	rjmp	.-16     	; 0xd7c <_ZN8ENC28J6010packetSendEj+0xcc>
     d8c:	df 91       	pop	r29
        }

        // cancel previous transmission if stuck
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRTS);
    }
}
     d8e:	cf 91       	pop	r28
     d90:	1f 91       	pop	r17
     d92:	0f 91       	pop	r16
     d94:	ff 90       	pop	r15
     d96:	ef 90       	pop	r14
     d98:	df 90       	pop	r13
     d9a:	cf 90       	pop	r12
     d9c:	bf 90       	pop	r11
     d9e:	af 90       	pop	r10
     da0:	08 95       	ret

00000da2 <_ZN8ENC28J6013packetReceiveEv>:
     da2:	0f 93       	push	r16


uint16_t ENC28J60::packetReceive() {
     da4:	1f 93       	push	r17
     da6:	cf 93       	push	r28
     da8:	df 93       	push	r29
     daa:	00 d0       	rcall	.+0      	; 0xdac <_ZN8ENC28J6013packetReceiveEv+0xa>
     dac:	00 d0       	rcall	.+0      	; 0xdae <_ZN8ENC28J6013packetReceiveEv+0xc>
     dae:	cd b7       	in	r28, 0x3d	; 61
     db0:	de b7       	in	r29, 0x3e	; 62
    static uint16_t gNextPacketPtr = RXSTART_INIT;
    static bool     unreleasedPacket = false;
    uint16_t len = 0;

    if (unreleasedPacket) {
     db2:	80 91 ec 04 	lds	r24, 0x04EC	; 0x8004ec <_ZZN8ENC28J6013packetReceiveEvE16unreleasedPacket>
     db6:	88 23       	and	r24, r24
     db8:	91 f0       	breq	.+36     	; 0xdde <_ZN8ENC28J6013packetReceiveEv+0x3c>
        if (gNextPacketPtr == 0)
     dba:	60 91 ea 04 	lds	r22, 0x04EA	; 0x8004ea <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr>
     dbe:	70 91 eb 04 	lds	r23, 0x04EB	; 0x8004eb <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr+0x1>
     dc2:	61 15       	cp	r22, r1
     dc4:	71 05       	cpc	r23, r1
     dc6:	29 f4       	brne	.+10     	; 0xdd2 <_ZN8ENC28J6013packetReceiveEv+0x30>
            writeReg(ERXRDPT, RXSTOP_INIT);
     dc8:	6f ef       	ldi	r22, 0xFF	; 255
     dca:	7b e0       	ldi	r23, 0x0B	; 11
     dcc:	8c e0       	ldi	r24, 0x0C	; 12
     dce:	bf de       	rcall	.-642    	; 0xb4e <_ZL8writeReghj>
     dd0:	04 c0       	rjmp	.+8      	; 0xdda <_ZN8ENC28J6013packetReceiveEv+0x38>
        else
            writeReg(ERXRDPT, gNextPacketPtr - 1);
     dd2:	61 50       	subi	r22, 0x01	; 1
     dd4:	71 09       	sbc	r23, r1
     dd6:	8c e0       	ldi	r24, 0x0C	; 12
     dd8:	ba de       	rcall	.-652    	; 0xb4e <_ZL8writeReghj>
        unreleasedPacket = false;
     dda:	10 92 ec 04 	sts	0x04EC, r1	; 0x8004ec <_ZZN8ENC28J6013packetReceiveEvE16unreleasedPacket>
    }

    if (readRegByte(EPKTCNT) > 0) {
     dde:	89 e3       	ldi	r24, 0x39	; 57
     de0:	a2 de       	rcall	.-700    	; 0xb26 <_ZL11readRegByteh>
     de2:	88 23       	and	r24, r24
     de4:	a9 f1       	breq	.+106    	; 0xe50 <_ZN8ENC28J6013packetReceiveEv+0xae>
        writeReg(ERDPT, gNextPacketPtr);
     de6:	60 91 ea 04 	lds	r22, 0x04EA	; 0x8004ea <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr>
     dea:	70 91 eb 04 	lds	r23, 0x04EB	; 0x8004eb <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr+0x1>
     dee:	80 e0       	ldi	r24, 0x00	; 0
     df0:	ae de       	rcall	.-676    	; 0xb4e <_ZL8writeReghj>
            uint16_t nextPacket;
            uint16_t byteCount;
            uint16_t status;
        } header;

        readBuf(sizeof header, (uint8_t*) &header);
     df2:	be 01       	movw	r22, r28
     df4:	6f 5f       	subi	r22, 0xFF	; 255
     df6:	7f 4f       	sbci	r23, 0xFF	; 255
     df8:	86 e0       	ldi	r24, 0x06	; 6
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	4d de       	rcall	.-870    	; 0xa98 <_ZL7readBufjPh>

        gNextPacketPtr  = header.nextPacket;
     dfe:	89 81       	ldd	r24, Y+1	; 0x01
     e00:	9a 81       	ldd	r25, Y+2	; 0x02
     e02:	90 93 eb 04 	sts	0x04EB, r25	; 0x8004eb <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr+0x1>
     e06:	80 93 ea 04 	sts	0x04EA, r24	; 0x8004ea <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr>
        len = header.byteCount - 4; //remove the CRC count
        if (len>bufferSize-1)
            len=bufferSize-1;
        if ((header.status & 0x80)==0)
     e0a:	8d 81       	ldd	r24, Y+5	; 0x05
     e0c:	87 ff       	sbrs	r24, 7
     e0e:	12 c0       	rjmp	.+36     	; 0xe34 <_ZN8ENC28J6013packetReceiveEv+0x92>

        readBuf(sizeof header, (uint8_t*) &header);

        gNextPacketPtr  = header.nextPacket;
        len = header.byteCount - 4; //remove the CRC count
        if (len>bufferSize-1)
     e10:	80 91 f1 04 	lds	r24, 0x04F1	; 0x8004f1 <_ZN8ENC28J6010bufferSizeE>
     e14:	90 91 f2 04 	lds	r25, 0x04F2	; 0x8004f2 <_ZN8ENC28J6010bufferSizeE+0x1>
     e18:	01 97       	sbiw	r24, 0x01	; 1
        } header;

        readBuf(sizeof header, (uint8_t*) &header);

        gNextPacketPtr  = header.nextPacket;
        len = header.byteCount - 4; //remove the CRC count
     e1a:	0b 81       	ldd	r16, Y+3	; 0x03
     e1c:	1c 81       	ldd	r17, Y+4	; 0x04
     e1e:	04 50       	subi	r16, 0x04	; 4
     e20:	11 09       	sbc	r17, r1
     e22:	80 17       	cp	r24, r16
     e24:	91 07       	cpc	r25, r17
     e26:	08 f4       	brcc	.+2      	; 0xe2a <_ZN8ENC28J6013packetReceiveEv+0x88>
        if (len>bufferSize-1)
            len=bufferSize-1;
        if ((header.status & 0x80)==0)
            len = 0;
        else
            readBuf(len, buffer);
     e28:	8c 01       	movw	r16, r24
     e2a:	63 ef       	ldi	r22, 0xF3	; 243
     e2c:	74 e0       	ldi	r23, 0x04	; 4
     e2e:	c8 01       	movw	r24, r16
     e30:	33 de       	rcall	.-922    	; 0xa98 <_ZL7readBufjPh>
     e32:	02 c0       	rjmp	.+4      	; 0xe38 <_ZN8ENC28J6013packetReceiveEv+0x96>
        gNextPacketPtr  = header.nextPacket;
        len = header.byteCount - 4; //remove the CRC count
        if (len>bufferSize-1)
            len=bufferSize-1;
        if ((header.status & 0x80)==0)
            len = 0;
     e34:	00 e0       	ldi	r16, 0x00	; 0
     e36:	10 e0       	ldi	r17, 0x00	; 0
        else
            readBuf(len, buffer);
        buffer[len] = 0;
     e38:	f8 01       	movw	r30, r16
     e3a:	ed 50       	subi	r30, 0x0D	; 13
     e3c:	fb 4f       	sbci	r31, 0xFB	; 251
     e3e:	10 82       	st	Z, r1
        unreleasedPacket = true;
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	80 93 ec 04 	sts	0x04EC, r24	; 0x8004ec <_ZZN8ENC28J6013packetReceiveEvE16unreleasedPacket>

        writeOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
     e46:	40 e4       	ldi	r20, 0x40	; 64
     e48:	6e e1       	ldi	r22, 0x1E	; 30
     e4a:	80 e8       	ldi	r24, 0x80	; 128
     e4c:	0d de       	rcall	.-998    	; 0xa68 <_ZL7writeOphhh>
     e4e:	02 c0       	rjmp	.+4      	; 0xe54 <_ZN8ENC28J6013packetReceiveEv+0xb2>


uint16_t ENC28J60::packetReceive() {
    static uint16_t gNextPacketPtr = RXSTART_INIT;
    static bool     unreleasedPacket = false;
    uint16_t len = 0;
     e50:	00 e0       	ldi	r16, 0x00	; 0
     e52:	10 e0       	ldi	r17, 0x00	; 0
        unreleasedPacket = true;

        writeOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
    }
    return len;
}
     e54:	c8 01       	movw	r24, r16
     e56:	26 96       	adiw	r28, 0x06	; 6
     e58:	0f b6       	in	r0, 0x3f	; 63
     e5a:	f8 94       	cli
     e5c:	de bf       	out	0x3e, r29	; 62
     e5e:	0f be       	out	0x3f, r0	; 63
     e60:	cd bf       	out	0x3d, r28	; 61
     e62:	df 91       	pop	r29
     e64:	cf 91       	pop	r28
     e66:	1f 91       	pop	r17
     e68:	0f 91       	pop	r16
     e6a:	08 95       	ret

00000e6c <_ZN9EtherCard5beginEPKhRVhS3_h>:
uint16_t EtherCard::delaycnt = 0; //request gateway ARP lookup

uint8_t Ethernet::buffer[ETHER_CARD_BUFFER_SIZE]; // tcp/ip send and receive buffer

uint8_t EtherCard::begin (const uint8_t* macaddr,
                          Register& csDDR, Register& csPort, uint8_t csPin) {
     e6c:	ef 92       	push	r14
     e6e:	ff 92       	push	r15
     e70:	0f 93       	push	r16
     e72:	cf 93       	push	r28
     e74:	df 93       	push	r29
     e76:	eb 01       	movw	r28, r22
     e78:	7a 01       	movw	r14, r20
     e7a:	02 2f       	mov	r16, r18

    copyMac(mymac, macaddr);
     e7c:	bc 01       	movw	r22, r24
     e7e:	8d e0       	ldi	r24, 0x0D	; 13
     e80:	97 e0       	ldi	r25, 0x07	; 7
     e82:	c9 d3       	rcall	.+1938   	; 0x1616 <_ZN9EtherCard7copyMacEPhPKh>
    return initialize(ETHER_CARD_BUFFER_SIZE, mymac, csDDR, csPort, csPin);
     e84:	97 01       	movw	r18, r14
     e86:	ae 01       	movw	r20, r28
     e88:	6d e0       	ldi	r22, 0x0D	; 13
     e8a:	77 e0       	ldi	r23, 0x07	; 7
     e8c:	80 e0       	ldi	r24, 0x00	; 0
     e8e:	92 e0       	ldi	r25, 0x02	; 2
     e90:	7c de       	rcall	.-776    	; 0xb8a <_ZN8ENC28J6010initializeEjPKhRVhS3_h>
}
     e92:	df 91       	pop	r29
     e94:	cf 91       	pop	r28
     e96:	0f 91       	pop	r16
     e98:	ff 90       	pop	r15
     e9a:	ef 90       	pop	r14
     e9c:	08 95       	ret

00000e9e <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_>:

bool EtherCard::staticSetup (const uint8_t* my_ip,
                             const uint8_t* gw_ip,
                             const uint8_t* dns_ip,
                             const uint8_t* mask) {
     e9e:	ef 92       	push	r14
     ea0:	ff 92       	push	r15
     ea2:	0f 93       	push	r16
     ea4:	1f 93       	push	r17
     ea6:	cf 93       	push	r28
     ea8:	df 93       	push	r29
     eaa:	7b 01       	movw	r14, r22
     eac:	8a 01       	movw	r16, r20
     eae:	e9 01       	movw	r28, r18

    if (my_ip != 0)
     eb0:	00 97       	sbiw	r24, 0x00	; 0
     eb2:	21 f0       	breq	.+8      	; 0xebc <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x1e>
        copyIp(myip, my_ip);
     eb4:	bc 01       	movw	r22, r24
     eb6:	89 e0       	ldi	r24, 0x09	; 9
     eb8:	97 e0       	ldi	r25, 0x07	; 7
     eba:	a0 d3       	rcall	.+1856   	; 0x15fc <_ZN9EtherCard6copyIpEPhPKh>
    if (gw_ip != 0)
     ebc:	e1 14       	cp	r14, r1
     ebe:	f1 04       	cpc	r15, r1
     ec0:	11 f0       	breq	.+4      	; 0xec6 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x28>
        setGwIp(gw_ip);
     ec2:	c7 01       	movw	r24, r14
     ec4:	bd d1       	rcall	.+890    	; 0x1240 <_ZN9EtherCard7setGwIpEPKh>
    if (dns_ip != 0)
     ec6:	01 15       	cp	r16, r1
     ec8:	11 05       	cpc	r17, r1
     eca:	21 f0       	breq	.+8      	; 0xed4 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x36>
        copyIp(dnsip, dns_ip);
     ecc:	b8 01       	movw	r22, r16
     ece:	89 ef       	ldi	r24, 0xF9	; 249
     ed0:	96 e0       	ldi	r25, 0x06	; 6
     ed2:	94 d3       	rcall	.+1832   	; 0x15fc <_ZN9EtherCard6copyIpEPhPKh>
    if(mask != 0)
     ed4:	20 97       	sbiw	r28, 0x00	; 0
     ed6:	21 f0       	breq	.+8      	; 0xee0 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x42>
        copyIp(netmask, mask);
     ed8:	be 01       	movw	r22, r28
     eda:	85 e0       	ldi	r24, 0x05	; 5
     edc:	97 e0       	ldi	r25, 0x07	; 7
    updateBroadcastAddress();
     ede:	8e d3       	rcall	.+1820   	; 0x15fc <_ZN9EtherCard6copyIpEPhPKh>
     ee0:	bb d1       	rcall	.+886    	; 0x1258 <_ZN9EtherCard22updateBroadcastAddressEv>
    delaycnt = 0; //request gateway ARP lookup
     ee2:	10 92 f4 06 	sts	0x06F4, r1	; 0x8006f4 <_ZN9EtherCard8delaycntE+0x1>
     ee6:	10 92 f3 06 	sts	0x06F3, r1	; 0x8006f3 <_ZN9EtherCard8delaycntE>
    return true;
}
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	df 91       	pop	r29
     eee:	cf 91       	pop	r28
     ef0:	1f 91       	pop	r17
     ef2:	0f 91       	pop	r16
     ef4:	ff 90       	pop	r15
     ef6:	ef 90       	pop	r14
     ef8:	08 95       	ret

00000efa <_ZL13fill_checksumhhjh>:
    for(uint8_t i=0; i<IP_LEN; i++)
        broadcastip[i] = myip[i] | ~netmask[i];
}

void EtherCard::registerPingCallback (void (*callback)(uint8_t *srcip)) {
    icmp_cb = callback;
     efa:	cf 92       	push	r12
     efc:	df 92       	push	r13
     efe:	ef 92       	push	r14
     f00:	ff 92       	push	r15
     f02:	cf 93       	push	r28
     f04:	df 93       	push	r29
     f06:	c6 2f       	mov	r28, r22
     f08:	d0 e0       	ldi	r29, 0x00	; 0
     f0a:	cd 50       	subi	r28, 0x0D	; 13
     f0c:	db 4f       	sbci	r29, 0xFB	; 251
     f0e:	21 30       	cpi	r18, 0x01	; 1
     f10:	81 f4       	brne	.+32     	; 0xf32 <_ZL13fill_checksumhhjh+0x38>
     f12:	6a 01       	movw	r12, r20
     f14:	99 e0       	ldi	r25, 0x09	; 9
     f16:	c9 0e       	add	r12, r25
     f18:	d1 1c       	adc	r13, r1
     f1a:	e1 2c       	mov	r14, r1
     f1c:	f1 2c       	mov	r15, r1
     f1e:	03 c0       	rjmp	.+6      	; 0xf26 <_ZL13fill_checksumhhjh+0x2c>
     f20:	c1 2c       	mov	r12, r1
     f22:	d1 2c       	mov	r13, r1
     f24:	76 01       	movw	r14, r12
     f26:	42 30       	cpi	r20, 0x02	; 2
     f28:	51 05       	cpc	r21, r1
     f2a:	28 f1       	brcs	.+74     	; 0xf76 <_ZL13fill_checksumhhjh+0x7c>
     f2c:	fe 01       	movw	r30, r28
     f2e:	da 01       	movw	r26, r20
     f30:	09 c0       	rjmp	.+18     	; 0xf44 <_ZL13fill_checksumhhjh+0x4a>
     f32:	22 30       	cpi	r18, 0x02	; 2
     f34:	a9 f7       	brne	.-22     	; 0xf20 <_ZL13fill_checksumhhjh+0x26>
     f36:	6a 01       	movw	r12, r20
     f38:	92 e0       	ldi	r25, 0x02	; 2
     f3a:	c9 1a       	sub	r12, r25
     f3c:	d1 08       	sbc	r13, r1
     f3e:	e1 2c       	mov	r14, r1
     f40:	f1 2c       	mov	r15, r1
     f42:	f1 cf       	rjmp	.-30     	; 0xf26 <_ZL13fill_checksumhhjh+0x2c>
     f44:	20 81       	ld	r18, Z
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	32 2f       	mov	r19, r18
     f4a:	22 27       	eor	r18, r18
     f4c:	91 81       	ldd	r25, Z+1	; 0x01
     f4e:	29 2b       	or	r18, r25
     f50:	c2 0e       	add	r12, r18
     f52:	d3 1e       	adc	r13, r19
     f54:	e1 1c       	adc	r14, r1
     f56:	f1 1c       	adc	r15, r1
     f58:	32 96       	adiw	r30, 0x02	; 2
     f5a:	12 97       	sbiw	r26, 0x02	; 2
     f5c:	a2 30       	cpi	r26, 0x02	; 2
     f5e:	b1 05       	cpc	r27, r1
     f60:	88 f7       	brcc	.-30     	; 0xf44 <_ZL13fill_checksumhhjh+0x4a>
     f62:	9a 01       	movw	r18, r20
     f64:	22 50       	subi	r18, 0x02	; 2
     f66:	31 09       	sbc	r19, r1
     f68:	2e 7f       	andi	r18, 0xFE	; 254
     f6a:	2e 5f       	subi	r18, 0xFE	; 254
     f6c:	3f 4f       	sbci	r19, 0xFF	; 255
     f6e:	c2 0f       	add	r28, r18
     f70:	d3 1f       	adc	r29, r19
     f72:	41 70       	andi	r20, 0x01	; 1
     f74:	55 27       	eor	r21, r21
     f76:	45 2b       	or	r20, r21
     f78:	61 f0       	breq	.+24     	; 0xf92 <_ZL13fill_checksumhhjh+0x98>
     f7a:	48 81       	ld	r20, Y
     f7c:	50 e0       	ldi	r21, 0x00	; 0
     f7e:	60 e0       	ldi	r22, 0x00	; 0
     f80:	70 e0       	ldi	r23, 0x00	; 0
     f82:	76 2f       	mov	r23, r22
     f84:	65 2f       	mov	r22, r21
     f86:	54 2f       	mov	r21, r20
     f88:	44 27       	eor	r20, r20
     f8a:	c4 0e       	add	r12, r20
     f8c:	d5 1e       	adc	r13, r21
     f8e:	e6 1e       	adc	r14, r22
     f90:	f7 1e       	adc	r15, r23
     f92:	a7 01       	movw	r20, r14
     f94:	66 27       	eor	r22, r22
     f96:	77 27       	eor	r23, r23
     f98:	41 15       	cp	r20, r1
     f9a:	51 05       	cpc	r21, r1
     f9c:	61 05       	cpc	r22, r1
     f9e:	71 05       	cpc	r23, r1
     fa0:	71 f0       	breq	.+28     	; 0xfbe <_ZL13fill_checksumhhjh+0xc4>
     fa2:	ee 24       	eor	r14, r14
     fa4:	ff 24       	eor	r15, r15
     fa6:	c4 0e       	add	r12, r20
     fa8:	d5 1e       	adc	r13, r21
     faa:	e6 1e       	adc	r14, r22
     fac:	f7 1e       	adc	r15, r23
     fae:	a7 01       	movw	r20, r14
     fb0:	66 27       	eor	r22, r22
     fb2:	77 27       	eor	r23, r23
     fb4:	41 15       	cp	r20, r1
     fb6:	51 05       	cpc	r21, r1
     fb8:	61 05       	cpc	r22, r1
     fba:	71 05       	cpc	r23, r1
     fbc:	91 f7       	brne	.-28     	; 0xfa2 <_ZL13fill_checksumhhjh+0xa8>
     fbe:	c0 94       	com	r12
     fc0:	d0 94       	com	r13
     fc2:	e8 2f       	mov	r30, r24
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	ed 50       	subi	r30, 0x0D	; 13
     fc8:	fb 4f       	sbci	r31, 0xFB	; 251
     fca:	d0 82       	st	Z, r13
     fcc:	c1 82       	std	Z+1, r12	; 0x01
     fce:	df 91       	pop	r29
     fd0:	cf 91       	pop	r28
     fd2:	ff 90       	pop	r15
     fd4:	ef 90       	pop	r14
     fd6:	df 90       	pop	r13
     fd8:	cf 90       	pop	r12
     fda:	08 95       	ret

00000fdc <_ZL6is_lanPKhS0_>:
     fdc:	cf 93       	push	r28
     fde:	df 93       	push	r29
     fe0:	fc 01       	movw	r30, r24
     fe2:	20 81       	ld	r18, Z
     fe4:	22 23       	and	r18, r18
     fe6:	d1 f0       	breq	.+52     	; 0x101c <_ZL6is_lanPKhS0_+0x40>
     fe8:	fb 01       	movw	r30, r22
     fea:	30 81       	ld	r19, Z
     fec:	33 23       	and	r19, r19
     fee:	c1 f0       	breq	.+48     	; 0x1020 <_ZL6is_lanPKhS0_+0x44>
     ff0:	23 27       	eor	r18, r19
     ff2:	30 91 05 07 	lds	r19, 0x0705	; 0x800705 <_ZN9EtherCard7netmaskE>
     ff6:	23 23       	and	r18, r19
     ff8:	a9 f4       	brne	.+42     	; 0x1024 <_ZL6is_lanPKhS0_+0x48>
     ffa:	dc 01       	movw	r26, r24
     ffc:	11 96       	adiw	r26, 0x01	; 1
     ffe:	31 96       	adiw	r30, 0x01	; 1
    1000:	c6 e0       	ldi	r28, 0x06	; 6
    1002:	d7 e0       	ldi	r29, 0x07	; 7
    1004:	04 96       	adiw	r24, 0x04	; 4
    1006:	4d 91       	ld	r20, X+
    1008:	21 91       	ld	r18, Z+
    100a:	39 91       	ld	r19, Y+
    100c:	24 27       	eor	r18, r20
    100e:	23 23       	and	r18, r19
    1010:	59 f4       	brne	.+22     	; 0x1028 <_ZL6is_lanPKhS0_+0x4c>
    1012:	a8 17       	cp	r26, r24
    1014:	b9 07       	cpc	r27, r25
    1016:	b9 f7       	brne	.-18     	; 0x1006 <_ZL6is_lanPKhS0_+0x2a>
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	07 c0       	rjmp	.+14     	; 0x102a <_ZL6is_lanPKhS0_+0x4e>
    101c:	80 e0       	ldi	r24, 0x00	; 0
    101e:	05 c0       	rjmp	.+10     	; 0x102a <_ZL6is_lanPKhS0_+0x4e>
    1020:	80 e0       	ldi	r24, 0x00	; 0
    1022:	03 c0       	rjmp	.+6      	; 0x102a <_ZL6is_lanPKhS0_+0x4e>
    1024:	80 e0       	ldi	r24, 0x00	; 0
    1026:	01 c0       	rjmp	.+2      	; 0x102a <_ZL6is_lanPKhS0_+0x4e>
    1028:	80 e0       	ldi	r24, 0x00	; 0
    102a:	df 91       	pop	r29
    102c:	cf 91       	pop	r28
    102e:	08 95       	ret

00001030 <_ZL20fill_ip_hdr_checksumv>:
    1030:	e3 ef       	ldi	r30, 0xF3	; 243
    1032:	f4 e0       	ldi	r31, 0x04	; 4
    1034:	10 8e       	std	Z+24, r1	; 0x18
    1036:	11 8e       	std	Z+25, r1	; 0x19
    1038:	80 e4       	ldi	r24, 0x40	; 64
    103a:	84 8b       	std	Z+20, r24	; 0x14
    103c:	15 8a       	std	Z+21, r1	; 0x15
    103e:	86 8b       	std	Z+22, r24	; 0x16
    1040:	20 e0       	ldi	r18, 0x00	; 0
    1042:	44 e1       	ldi	r20, 0x14	; 20
    1044:	50 e0       	ldi	r21, 0x00	; 0
    1046:	6e e0       	ldi	r22, 0x0E	; 14
    1048:	88 e1       	ldi	r24, 0x18	; 24
    104a:	57 cf       	rjmp	.-338    	; 0xefa <_ZL13fill_checksumhhjh>
    104c:	08 95       	ret

0000104e <_ZL7setMACsPKh>:
    104e:	bc 01       	movw	r22, r24
    1050:	83 ef       	ldi	r24, 0xF3	; 243
    1052:	94 e0       	ldi	r25, 0x04	; 4
    1054:	e0 d2       	rcall	.+1472   	; 0x1616 <_ZN9EtherCard7copyMacEPhPKh>
    1056:	6d e0       	ldi	r22, 0x0D	; 13
    1058:	77 e0       	ldi	r23, 0x07	; 7
    105a:	89 ef       	ldi	r24, 0xF9	; 249
    105c:	94 e0       	ldi	r25, 0x04	; 4
    105e:	db c2       	rjmp	.+1462   	; 0x1616 <_ZN9EtherCard7copyMacEPhPKh>
    1060:	08 95       	ret

00001062 <_ZL11make_eth_ipv>:
    1062:	89 ef       	ldi	r24, 0xF9	; 249
    1064:	94 e0       	ldi	r25, 0x04	; 4
    1066:	f3 df       	rcall	.-26     	; 0x104e <_ZL7setMACsPKh>
    1068:	6d e0       	ldi	r22, 0x0D	; 13
    106a:	75 e0       	ldi	r23, 0x05	; 5
    106c:	81 e1       	ldi	r24, 0x11	; 17
    106e:	95 e0       	ldi	r25, 0x05	; 5
    1070:	c5 d2       	rcall	.+1418   	; 0x15fc <_ZN9EtherCard6copyIpEPhPKh>
    1072:	69 e0       	ldi	r22, 0x09	; 9
    1074:	77 e0       	ldi	r23, 0x07	; 7
    1076:	8d e0       	ldi	r24, 0x0D	; 13
    1078:	95 e0       	ldi	r25, 0x05	; 5
    107a:	c0 d2       	rcall	.+1408   	; 0x15fc <_ZN9EtherCard6copyIpEPhPKh>
    107c:	d9 cf       	rjmp	.-78     	; 0x1030 <_ZL20fill_ip_hdr_checksumv>
    107e:	08 95       	ret

00001080 <_ZL12setMACandIPsPKhS0_>:
    1080:	cf 93       	push	r28
    1082:	df 93       	push	r29
    1084:	eb 01       	movw	r28, r22
    1086:	e3 df       	rcall	.-58     	; 0x104e <_ZL7setMACsPKh>
    1088:	be 01       	movw	r22, r28
    108a:	81 e1       	ldi	r24, 0x11	; 17
    108c:	95 e0       	ldi	r25, 0x05	; 5
    108e:	b6 d2       	rcall	.+1388   	; 0x15fc <_ZN9EtherCard6copyIpEPhPKh>
    1090:	69 e0       	ldi	r22, 0x09	; 9
    1092:	77 e0       	ldi	r23, 0x07	; 7
    1094:	8d e0       	ldi	r24, 0x0D	; 13
    1096:	95 e0       	ldi	r25, 0x05	; 5
    1098:	b1 d2       	rcall	.+1378   	; 0x15fc <_ZN9EtherCard6copyIpEPhPKh>
    109a:	df 91       	pop	r29
    109c:	cf 91       	pop	r28
    109e:	08 95       	ret

000010a0 <_ZL16client_store_macPhS_>:
    10a0:	cf 93       	push	r28
    10a2:	df 93       	push	r29
    10a4:	eb 01       	movw	r28, r22
    10a6:	44 e0       	ldi	r20, 0x04	; 4
    10a8:	50 e0       	ldi	r21, 0x00	; 0
    10aa:	bc 01       	movw	r22, r24
    10ac:	8f e0       	ldi	r24, 0x0F	; 15
    10ae:	95 e0       	ldi	r25, 0x05	; 5
    10b0:	0e 94 e5 29 	call	0x53ca	; 0x53ca <memcmp>
    10b4:	89 2b       	or	r24, r25
    10b6:	31 f4       	brne	.+12     	; 0x10c4 <_ZL16client_store_macPhS_+0x24>
    10b8:	69 e0       	ldi	r22, 0x09	; 9
    10ba:	75 e0       	ldi	r23, 0x05	; 5
    10bc:	ce 01       	movw	r24, r28
    10be:	ab d2       	rcall	.+1366   	; 0x1616 <_ZN9EtherCard7copyMacEPhPKh>
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	01 c0       	rjmp	.+2      	; 0x10c6 <_ZL16client_store_macPhS_+0x26>
    10c4:	80 e0       	ldi	r24, 0x00	; 0
    10c6:	df 91       	pop	r29
    10c8:	cf 91       	pop	r28
    10ca:	08 95       	ret

000010cc <_ZL17client_arp_whohasPh>:
    10cc:	0f 93       	push	r16
    10ce:	1f 93       	push	r17
    10d0:	cf 93       	push	r28
    10d2:	8c 01       	movw	r16, r24
    10d4:	85 e2       	ldi	r24, 0x25	; 37
    10d6:	92 e0       	ldi	r25, 0x02	; 2
    10d8:	ba df       	rcall	.-140    	; 0x104e <_ZL7setMACsPKh>
    10da:	e3 ef       	ldi	r30, 0xF3	; 243
    10dc:	f4 e0       	ldi	r31, 0x04	; 4
    10de:	88 e0       	ldi	r24, 0x08	; 8
    10e0:	84 87       	std	Z+12, r24	; 0x0c
    10e2:	c6 e0       	ldi	r28, 0x06	; 6
    10e4:	c5 87       	std	Z+13, r28	; 0x0d
    10e6:	48 e0       	ldi	r20, 0x08	; 8
    10e8:	50 e0       	ldi	r21, 0x00	; 0
    10ea:	6f e7       	ldi	r22, 0x7F	; 127
    10ec:	72 e0       	ldi	r23, 0x02	; 2
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	95 e0       	ldi	r25, 0x05	; 5
    10f2:	0e 94 dc 29 	call	0x53b8	; 0x53b8 <memcpy_P>
    10f6:	e3 e1       	ldi	r30, 0x13	; 19
    10f8:	f5 e0       	ldi	r31, 0x05	; 5
    10fa:	df 01       	movw	r26, r30
    10fc:	1d 92       	st	X+, r1
    10fe:	ca 95       	dec	r28
    1100:	e9 f7       	brne	.-6      	; 0x10fc <_ZL17client_arp_whohasPh+0x30>
    1102:	6d e0       	ldi	r22, 0x0D	; 13
    1104:	77 e0       	ldi	r23, 0x07	; 7
    1106:	89 e0       	ldi	r24, 0x09	; 9
    1108:	95 e0       	ldi	r25, 0x05	; 5
    110a:	85 d2       	rcall	.+1290   	; 0x1616 <_ZN9EtherCard7copyMacEPhPKh>
    110c:	b8 01       	movw	r22, r16
    110e:	89 e1       	ldi	r24, 0x19	; 25
    1110:	95 e0       	ldi	r25, 0x05	; 5
    1112:	74 d2       	rcall	.+1256   	; 0x15fc <_ZN9EtherCard6copyIpEPhPKh>
    1114:	69 e0       	ldi	r22, 0x09	; 9
    1116:	77 e0       	ldi	r23, 0x07	; 7
    1118:	8f e0       	ldi	r24, 0x0F	; 15
    111a:	95 e0       	ldi	r25, 0x05	; 5
    111c:	6f d2       	rcall	.+1246   	; 0x15fc <_ZN9EtherCard6copyIpEPhPKh>
    111e:	8a e2       	ldi	r24, 0x2A	; 42
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	c6 dd       	rcall	.-1140   	; 0xcb0 <_ZN8ENC28J6010packetSendEj>
    1124:	cf 91       	pop	r28
    1126:	1f 91       	pop	r17
    1128:	0f 91       	pop	r16
    112a:	08 95       	ret

0000112c <_ZN9EtherCard10udpPrepareEjPKhj>:
    112c:	ef 92       	push	r14
    112e:	ff 92       	push	r15
    1130:	0f 93       	push	r16
    1132:	1f 93       	push	r17
    1134:	cf 93       	push	r28
    1136:	df 93       	push	r29
    1138:	18 2f       	mov	r17, r24
    113a:	09 2f       	mov	r16, r25
    113c:	eb 01       	movw	r28, r22
    113e:	f4 2e       	mov	r15, r20
    1140:	e5 2e       	mov	r14, r21
    1142:	89 e0       	ldi	r24, 0x09	; 9
    1144:	97 e0       	ldi	r25, 0x07	; 7
    1146:	4a df       	rcall	.-364    	; 0xfdc <_ZL6is_lanPKhS0_>
    1148:	88 23       	and	r24, r24
    114a:	29 f0       	breq	.+10     	; 0x1156 <_ZN9EtherCard10udpPrepareEjPKhj+0x2a>
    114c:	be 01       	movw	r22, r28
    114e:	8e e1       	ldi	r24, 0x1E	; 30
    1150:	97 e0       	ldi	r25, 0x07	; 7
    1152:	96 df       	rcall	.-212    	; 0x1080 <_ZL12setMACandIPsPKhS0_>
    1154:	04 c0       	rjmp	.+8      	; 0x115e <_ZN9EtherCard10udpPrepareEjPKhj+0x32>
    1156:	be 01       	movw	r22, r28
    1158:	84 e1       	ldi	r24, 0x14	; 20
    115a:	97 e0       	ldi	r25, 0x07	; 7
    115c:	91 df       	rcall	.-222    	; 0x1080 <_ZL12setMACandIPsPKhS0_>
    115e:	88 81       	ld	r24, Y
    1160:	80 7f       	andi	r24, 0xF0	; 240
    1162:	80 3e       	cpi	r24, 0xE0	; 224
    1164:	91 f0       	breq	.+36     	; 0x118a <_ZN9EtherCard10udpPrepareEjPKhj+0x5e>
    1166:	88 81       	ld	r24, Y
    1168:	99 81       	ldd	r25, Y+1	; 0x01
    116a:	aa 81       	ldd	r26, Y+2	; 0x02
    116c:	bb 81       	ldd	r27, Y+3	; 0x03
    116e:	8f 3f       	cpi	r24, 0xFF	; 255
    1170:	9f 4f       	sbci	r25, 0xFF	; 255
    1172:	af 4f       	sbci	r26, 0xFF	; 255
    1174:	bf 4f       	sbci	r27, 0xFF	; 255
    1176:	49 f0       	breq	.+18     	; 0x118a <_ZN9EtherCard10udpPrepareEjPKhj+0x5e>
    1178:	44 e0       	ldi	r20, 0x04	; 4
    117a:	50 e0       	ldi	r21, 0x00	; 0
    117c:	be 01       	movw	r22, r28
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	97 e0       	ldi	r25, 0x07	; 7
    1182:	0e 94 e5 29 	call	0x53ca	; 0x53ca <memcmp>
    1186:	89 2b       	or	r24, r25
    1188:	29 f4       	brne	.+10     	; 0x1194 <_ZN9EtherCard10udpPrepareEjPKhj+0x68>
    118a:	65 e2       	ldi	r22, 0x25	; 37
    118c:	72 e0       	ldi	r23, 0x02	; 2
    118e:	83 ef       	ldi	r24, 0xF3	; 243
    1190:	94 e0       	ldi	r25, 0x04	; 4
    1192:	41 d2       	rcall	.+1154   	; 0x1616 <_ZN9EtherCard7copyMacEPhPKh>
    1194:	c3 ef       	ldi	r28, 0xF3	; 243
    1196:	d4 e0       	ldi	r29, 0x04	; 4
    1198:	88 e0       	ldi	r24, 0x08	; 8
    119a:	8c 87       	std	Y+12, r24	; 0x0c
    119c:	1d 86       	std	Y+13, r1	; 0x0d
    119e:	49 e0       	ldi	r20, 0x09	; 9
    11a0:	50 e0       	ldi	r21, 0x00	; 0
    11a2:	66 e7       	ldi	r22, 0x76	; 118
    11a4:	72 e0       	ldi	r23, 0x02	; 2
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	95 e0       	ldi	r25, 0x05	; 5
    11aa:	0e 94 dc 29 	call	0x53b8	; 0x53b8 <memcpy_P>
    11ae:	18 8a       	std	Y+16, r1	; 0x10
    11b0:	81 e1       	ldi	r24, 0x11	; 17
    11b2:	8f 8b       	std	Y+23, r24	; 0x17
    11b4:	ec a2       	std	Y+36, r14	; 0x24
    11b6:	fd a2       	std	Y+37, r15	; 0x25
    11b8:	0a a3       	std	Y+34, r16	; 0x22
    11ba:	1b a3       	std	Y+35, r17	; 0x23
    11bc:	1e a2       	std	Y+38, r1	; 0x26
    11be:	18 a6       	std	Y+40, r1	; 0x28
    11c0:	19 a6       	std	Y+41, r1	; 0x29
    11c2:	df 91       	pop	r29
    11c4:	cf 91       	pop	r28
    11c6:	1f 91       	pop	r17
    11c8:	0f 91       	pop	r16
    11ca:	ff 90       	pop	r15
    11cc:	ef 90       	pop	r14
    11ce:	08 95       	ret

000011d0 <_ZN9EtherCard11udpTransmitEj>:
    11d0:	0f 93       	push	r16
    11d2:	1f 93       	push	r17
    11d4:	cf 93       	push	r28
    11d6:	df 93       	push	r29
    11d8:	ec 01       	movw	r28, r24
    11da:	03 ef       	ldi	r16, 0xF3	; 243
    11dc:	14 e0       	ldi	r17, 0x04	; 4
    11de:	4c 96       	adiw	r24, 0x1c	; 28
    11e0:	f8 01       	movw	r30, r16
    11e2:	90 8b       	std	Z+16, r25	; 0x10
    11e4:	81 8b       	std	Z+17, r24	; 0x11
    11e6:	24 df       	rcall	.-440    	; 0x1030 <_ZL20fill_ip_hdr_checksumv>
    11e8:	ce 01       	movw	r24, r28
    11ea:	08 96       	adiw	r24, 0x08	; 8
    11ec:	f8 01       	movw	r30, r16
    11ee:	96 a3       	std	Z+38, r25	; 0x26
    11f0:	87 a3       	std	Z+39, r24	; 0x27
    11f2:	ae 01       	movw	r20, r28
    11f4:	40 5f       	subi	r20, 0xF0	; 240
    11f6:	5f 4f       	sbci	r21, 0xFF	; 255
    11f8:	21 e0       	ldi	r18, 0x01	; 1
    11fa:	6a e1       	ldi	r22, 0x1A	; 26
    11fc:	88 e2       	ldi	r24, 0x28	; 40
    11fe:	7d de       	rcall	.-774    	; 0xefa <_ZL13fill_checksumhhjh>
    1200:	ce 01       	movw	r24, r28
    1202:	8a 96       	adiw	r24, 0x2a	; 42
    1204:	55 dd       	rcall	.-1366   	; 0xcb0 <_ZN8ENC28J6010packetSendEj>
    1206:	df 91       	pop	r29
    1208:	cf 91       	pop	r28
    120a:	1f 91       	pop	r17
    120c:	0f 91       	pop	r16
    120e:	08 95       	ret

00001210 <_ZN9EtherCard7sendUdpEPKhjjS1_j>:
    1210:	0f 93       	push	r16
    1212:	1f 93       	push	r17
    1214:	cf 93       	push	r28
    1216:	df 93       	push	r29
    1218:	d6 2f       	mov	r29, r22
    121a:	c7 2f       	mov	r28, r23
    121c:	ca 01       	movw	r24, r20
    121e:	a8 01       	movw	r20, r16
    1220:	b9 01       	movw	r22, r18
    1222:	84 df       	rcall	.-248    	; 0x112c <_ZN9EtherCard10udpPrepareEjPKhj>
    1224:	8d 2f       	mov	r24, r29
    1226:	9c 2f       	mov	r25, r28
    1228:	81 30       	cpi	r24, 0x01	; 1
    122a:	22 e0       	ldi	r18, 0x02	; 2
    122c:	92 07       	cpc	r25, r18
    122e:	10 f0       	brcs	.+4      	; 0x1234 <_ZN9EtherCard7sendUdpEPKhjjS1_j+0x24>
    1230:	80 e0       	ldi	r24, 0x00	; 0
    1232:	92 e0       	ldi	r25, 0x02	; 2
    1234:	cd df       	rcall	.-102    	; 0x11d0 <_ZN9EtherCard11udpTransmitEj>
    1236:	df 91       	pop	r29
    1238:	cf 91       	pop	r28
    123a:	1f 91       	pop	r17
    123c:	0f 91       	pop	r16
    123e:	08 95       	ret

00001240 <_ZN9EtherCard7setGwIpEPKh>:
    1240:	10 92 f4 06 	sts	0x06F4, r1	; 0x8006f4 <_ZN9EtherCard8delaycntE+0x1>
    1244:	10 92 f3 06 	sts	0x06F3, r1	; 0x8006f3 <_ZN9EtherCard8delaycntE>
    1248:	21 e0       	ldi	r18, 0x01	; 1
    124a:	20 93 13 07 	sts	0x0713, r18	; 0x800713 <_ZL9waitgwmac>
    124e:	bc 01       	movw	r22, r24
    1250:	8d ef       	ldi	r24, 0xFD	; 253
    1252:	96 e0       	ldi	r25, 0x06	; 6
    1254:	d3 c1       	rjmp	.+934    	; 0x15fc <_ZN9EtherCard6copyIpEPhPKh>
    1256:	08 95       	ret

00001258 <_ZN9EtherCard22updateBroadcastAddressEv>:
    1258:	cf 93       	push	r28
    125a:	df 93       	push	r29
    125c:	e9 e0       	ldi	r30, 0x09	; 9
    125e:	f7 e0       	ldi	r31, 0x07	; 7
    1260:	c5 e0       	ldi	r28, 0x05	; 5
    1262:	d7 e0       	ldi	r29, 0x07	; 7
    1264:	a1 e0       	ldi	r26, 0x01	; 1
    1266:	b7 e0       	ldi	r27, 0x07	; 7
    1268:	2d e0       	ldi	r18, 0x0D	; 13
    126a:	37 e0       	ldi	r19, 0x07	; 7
    126c:	91 91       	ld	r25, Z+
    126e:	89 91       	ld	r24, Y+
    1270:	80 95       	com	r24
    1272:	89 2b       	or	r24, r25
    1274:	8d 93       	st	X+, r24
    1276:	e2 17       	cp	r30, r18
    1278:	f3 07       	cpc	r31, r19
    127a:	c1 f7       	brne	.-16     	; 0x126c <_ZN9EtherCard22updateBroadcastAddressEv+0x14>
    127c:	df 91       	pop	r29
    127e:	cf 91       	pop	r28
    1280:	08 95       	ret

00001282 <_ZN9EtherCard10packetLoopEj>:
	gPB[ICMP_CHECKSUM_P+1]++;
	gPB[ICMP_CHECKSUM_P] += 0x08;
	EtherCard::packetSend(len);
}

uint16_t EtherCard::packetLoop (uint16_t plen) {
    1282:	cf 93       	push	r28
    1284:	df 93       	push	r29
    1286:	ec 01       	movw	r28, r24
    if (plen==0) {
    1288:	00 97       	sbiw	r24, 0x00	; 0
    128a:	09 f0       	breq	.+2      	; 0x128e <_ZN9EtherCard10packetLoopEj+0xc>
    128c:	3f c0       	rjmp	.+126    	; 0x130c <_ZN9EtherCard10packetLoopEj+0x8a>
        //Check every 65536 (no-packet) cycles whether we need to retry ARP request for gateway
        if ((waitgwmac & WGW_INITIAL_ARP || waitgwmac & WGW_REFRESHING) &&
    128e:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <_ZL9waitgwmac>
    1292:	85 70       	andi	r24, 0x05	; 5
    1294:	89 f0       	breq	.+34     	; 0x12b8 <_ZN9EtherCard10packetLoopEj+0x36>
    1296:	80 91 f3 06 	lds	r24, 0x06F3	; 0x8006f3 <_ZN9EtherCard8delaycntE>
    129a:	90 91 f4 06 	lds	r25, 0x06F4	; 0x8006f4 <_ZN9EtherCard8delaycntE+0x1>
    129e:	89 2b       	or	r24, r25
    12a0:	59 f4       	brne	.+22     	; 0x12b8 <_ZN9EtherCard10packetLoopEj+0x36>
                delaycnt==0 && isLinkUp()) {
    12a2:	f3 dc       	rcall	.-1562   	; 0xc8a <_ZN8ENC28J608isLinkUpEv>
}

uint16_t EtherCard::packetLoop (uint16_t plen) {
    if (plen==0) {
        //Check every 65536 (no-packet) cycles whether we need to retry ARP request for gateway
        if ((waitgwmac & WGW_INITIAL_ARP || waitgwmac & WGW_REFRESHING) &&
    12a4:	88 23       	and	r24, r24
    12a6:	41 f0       	breq	.+16     	; 0x12b8 <_ZN9EtherCard10packetLoopEj+0x36>
                delaycnt==0 && isLinkUp()) {
            client_arp_whohas(gwip);
    12a8:	8d ef       	ldi	r24, 0xFD	; 253
    12aa:	96 e0       	ldi	r25, 0x06	; 6
    12ac:	0f df       	rcall	.-482    	; 0x10cc <_ZL17client_arp_whohasPh>
            waitgwmac |= WGW_ACCEPT_ARP_REPLY;
    12ae:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <_ZL9waitgwmac>
    12b2:	88 60       	ori	r24, 0x08	; 8
    12b4:	80 93 13 07 	sts	0x0713, r24	; 0x800713 <_ZL9waitgwmac>
        }
        delaycnt++;
    12b8:	80 91 f3 06 	lds	r24, 0x06F3	; 0x8006f3 <_ZN9EtherCard8delaycntE>
    12bc:	90 91 f4 06 	lds	r25, 0x06F4	; 0x8006f4 <_ZN9EtherCard8delaycntE+0x1>
    12c0:	01 96       	adiw	r24, 0x01	; 1
    12c2:	90 93 f4 06 	sts	0x06F4, r25	; 0x8006f4 <_ZN9EtherCard8delaycntE+0x1>
    12c6:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <_ZN9EtherCard8delaycntE>

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, dnsip) && !has_dns_mac && !waiting_for_dns_mac) {
    12ca:	69 ef       	ldi	r22, 0xF9	; 249
    12cc:	76 e0       	ldi	r23, 0x06	; 6
    12ce:	89 e0       	ldi	r24, 0x09	; 9
    12d0:	97 e0       	ldi	r25, 0x07	; 7
    12d2:	84 de       	rcall	.-760    	; 0xfdc <_ZL6is_lanPKhS0_>
    12d4:	88 23       	and	r24, r24
    12d6:	49 f0       	breq	.+18     	; 0x12ea <_ZN9EtherCard10packetLoopEj+0x68>
    12d8:	80 91 1c 07 	lds	r24, 0x071C	; 0x80071c <_ZL11has_dns_mac>
    12dc:	81 11       	cpse	r24, r1
    12de:	05 c0       	rjmp	.+10     	; 0x12ea <_ZN9EtherCard10packetLoopEj+0x68>
    12e0:	80 91 1d 07 	lds	r24, 0x071D	; 0x80071d <_ZL19waiting_for_dns_mac>
    12e4:	88 23       	and	r24, r24
    12e6:	09 f4       	brne	.+2      	; 0x12ea <_ZN9EtherCard10packetLoopEj+0x68>
    12e8:	dc c0       	rjmp	.+440    	; 0x14a2 <_ZN9EtherCard10packetLoopEj+0x220>
            client_arp_whohas(dnsip);
            waiting_for_dns_mac = true;
        }

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, hisip) && !has_dest_mac && !waiting_for_dest_mac) {
    12ea:	65 ef       	ldi	r22, 0xF5	; 245
    12ec:	76 e0       	ldi	r23, 0x06	; 6
    12ee:	89 e0       	ldi	r24, 0x09	; 9
    12f0:	97 e0       	ldi	r25, 0x07	; 7
    12f2:	74 de       	rcall	.-792    	; 0xfdc <_ZL6is_lanPKhS0_>
    12f4:	88 23       	and	r24, r24
    12f6:	09 f4       	brne	.+2      	; 0x12fa <_ZN9EtherCard10packetLoopEj+0x78>
    12f8:	f8 c0       	rjmp	.+496    	; 0x14ea <_ZN9EtherCard10packetLoopEj+0x268>
    12fa:	80 91 1a 07 	lds	r24, 0x071A	; 0x80071a <_ZL12has_dest_mac>
    12fe:	81 11       	cpse	r24, r1
    1300:	f4 c0       	rjmp	.+488    	; 0x14ea <_ZN9EtherCard10packetLoopEj+0x268>
    1302:	80 91 1b 07 	lds	r24, 0x071B	; 0x80071b <_ZL20waiting_for_dest_mac>
    1306:	81 11       	cpse	r24, r1
    1308:	f0 c0       	rjmp	.+480    	; 0x14ea <_ZN9EtherCard10packetLoopEj+0x268>
    130a:	d2 c0       	rjmp	.+420    	; 0x14b0 <_ZN9EtherCard10packetLoopEj+0x22e>
    return true;
}

static uint8_t eth_type_is_arp_and_my_ip(uint16_t len) {
    return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
    130c:	89 32       	cpi	r24, 0x29	; 41
    130e:	91 05       	cpc	r25, r1
    1310:	08 f4       	brcc	.+2      	; 0x1314 <_ZN9EtherCard10packetLoopEj+0x92>
    1312:	d5 c0       	rjmp	.+426    	; 0x14be <_ZN9EtherCard10packetLoopEj+0x23c>
        }
    return true;
}

static uint8_t eth_type_is_arp_and_my_ip(uint16_t len) {
    return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
    1314:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <_ZN8ENC28J606bufferE+0xc>
    1318:	88 30       	cpi	r24, 0x08	; 8
    131a:	09 f0       	breq	.+2      	; 0x131e <_ZN9EtherCard10packetLoopEj+0x9c>
    131c:	e6 c0       	rjmp	.+460    	; 0x14ea <_ZN9EtherCard10packetLoopEj+0x268>
    131e:	80 91 00 05 	lds	r24, 0x0500	; 0x800500 <_ZN8ENC28J606bufferE+0xd>
    1322:	86 30       	cpi	r24, 0x06	; 6
    1324:	09 f0       	breq	.+2      	; 0x1328 <_ZN9EtherCard10packetLoopEj+0xa6>
    1326:	dd c0       	rjmp	.+442    	; 0x14e2 <_ZN9EtherCard10packetLoopEj+0x260>
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
           memcmp(gPB + ETH_ARP_DST_IP_P, EtherCard::myip, IP_LEN) == 0;
    1328:	44 e0       	ldi	r20, 0x04	; 4
    132a:	50 e0       	ldi	r21, 0x00	; 0
    132c:	69 e0       	ldi	r22, 0x09	; 9
    132e:	77 e0       	ldi	r23, 0x07	; 7
    1330:	89 e1       	ldi	r24, 0x19	; 25
    1332:	95 e0       	ldi	r25, 0x05	; 5
    1334:	0e 94 e5 29 	call	0x53ca	; 0x53ca <memcmp>
    return true;
}

static uint8_t eth_type_is_arp_and_my_ip(uint16_t len) {
    return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
    1338:	89 2b       	or	r24, r25
    133a:	09 f0       	breq	.+2      	; 0x133e <_ZN9EtherCard10packetLoopEj+0xbc>
    133c:	d2 c0       	rjmp	.+420    	; 0x14e2 <_ZN9EtherCard10packetLoopEj+0x260>
    EtherCard::copyIp(gPB + IP_SRC_P, EtherCard::myip);
    fill_ip_hdr_checksum();
}

static void make_arp_answer_from_request() {
    setMACs(gPB + ETH_SRC_MAC);
    133e:	c3 c0       	rjmp	.+390    	; 0x14c6 <_ZN9EtherCard10packetLoopEj+0x244>
    1340:	89 ef       	ldi	r24, 0xF9	; 249
    1342:	94 e0       	ldi	r25, 0x04	; 4
    1344:	84 de       	rcall	.-760    	; 0x104e <_ZL7setMACsPKh>
    gPB[ETH_ARP_OPCODE_H_P] = ETH_ARP_OPCODE_REPLY_H_V;
    1346:	e3 ef       	ldi	r30, 0xF3	; 243
    1348:	f4 e0       	ldi	r31, 0x04	; 4
    134a:	14 8a       	std	Z+20, r1	; 0x14
    gPB[ETH_ARP_OPCODE_L_P] = ETH_ARP_OPCODE_REPLY_L_V;
    134c:	82 e0       	ldi	r24, 0x02	; 2
    EtherCard::copyMac(gPB + ETH_ARP_DST_MAC_P, gPB + ETH_ARP_SRC_MAC_P);
    134e:	85 8b       	std	Z+21, r24	; 0x15
    1350:	69 e0       	ldi	r22, 0x09	; 9
    1352:	75 e0       	ldi	r23, 0x05	; 5
    1354:	83 e1       	ldi	r24, 0x13	; 19
    1356:	95 e0       	ldi	r25, 0x05	; 5
    EtherCard::copyMac(gPB + ETH_ARP_SRC_MAC_P, EtherCard::mymac);
    1358:	5e d1       	rcall	.+700    	; 0x1616 <_ZN9EtherCard7copyMacEPhPKh>
    135a:	6d e0       	ldi	r22, 0x0D	; 13
    135c:	77 e0       	ldi	r23, 0x07	; 7
    135e:	89 e0       	ldi	r24, 0x09	; 9
    1360:	95 e0       	ldi	r25, 0x05	; 5
    EtherCard::copyIp(gPB + ETH_ARP_DST_IP_P, gPB + ETH_ARP_SRC_IP_P);
    1362:	59 d1       	rcall	.+690    	; 0x1616 <_ZN9EtherCard7copyMacEPhPKh>
    1364:	6f e0       	ldi	r22, 0x0F	; 15
    1366:	75 e0       	ldi	r23, 0x05	; 5
    1368:	89 e1       	ldi	r24, 0x19	; 25
    136a:	95 e0       	ldi	r25, 0x05	; 5
    EtherCard::copyIp(gPB + ETH_ARP_SRC_IP_P, EtherCard::myip);
    136c:	47 d1       	rcall	.+654    	; 0x15fc <_ZN9EtherCard6copyIpEPhPKh>
    136e:	69 e0       	ldi	r22, 0x09	; 9
    1370:	77 e0       	ldi	r23, 0x07	; 7
    1372:	8f e0       	ldi	r24, 0x0F	; 15
    1374:	95 e0       	ldi	r25, 0x05	; 5
    1376:	42 d1       	rcall	.+644    	; 0x15fc <_ZN9EtherCard6copyIpEPhPKh>
    EtherCard::packetSend(42);
    1378:	8a e2       	ldi	r24, 0x2A	; 42
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	99 dc       	rcall	.-1742   	; 0xcb0 <_ZN8ENC28J6010packetSendEj>
    137e:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <_ZL9waitgwmac>

    if (eth_type_is_arp_and_my_ip(plen))
    {   //Service ARP request
        if (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REQ_L_V)
            make_arp_answer_from_request();
        if (waitgwmac & WGW_ACCEPT_ARP_REPLY && (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REPLY_L_V) && client_store_mac(gwip, gwmacaddr))
    1382:	83 ff       	sbrs	r24, 3
    1384:	0e c0       	rjmp	.+28     	; 0x13a2 <_ZN9EtherCard10packetLoopEj+0x120>
    1386:	80 91 08 05 	lds	r24, 0x0508	; 0x800508 <_ZN8ENC28J606bufferE+0x15>
    138a:	82 30       	cpi	r24, 0x02	; 2
    138c:	51 f4       	brne	.+20     	; 0x13a2 <_ZN9EtherCard10packetLoopEj+0x120>
    138e:	64 e1       	ldi	r22, 0x14	; 20
    1390:	77 e0       	ldi	r23, 0x07	; 7
    1392:	8d ef       	ldi	r24, 0xFD	; 253
    1394:	96 e0       	ldi	r25, 0x06	; 6
    1396:	84 de       	rcall	.-760    	; 0x10a0 <_ZL16client_store_macPhS_>
    1398:	88 23       	and	r24, r24
    139a:	19 f0       	breq	.+6      	; 0x13a2 <_ZN9EtherCard10packetLoopEj+0x120>
    139c:	82 e0       	ldi	r24, 0x02	; 2
            waitgwmac = WGW_HAVE_GW_MAC;
    139e:	80 93 13 07 	sts	0x0713, r24	; 0x800713 <_ZL9waitgwmac>
    13a2:	80 91 1c 07 	lds	r24, 0x071C	; 0x80071c <_ZL11has_dns_mac>
        if (!has_dns_mac && waiting_for_dns_mac && client_store_mac(dnsip, destmacaddr)) {
    13a6:	81 11       	cpse	r24, r1
    13a8:	10 c0       	rjmp	.+32     	; 0x13ca <_ZN9EtherCard10packetLoopEj+0x148>
    13aa:	80 91 1d 07 	lds	r24, 0x071D	; 0x80071d <_ZL19waiting_for_dns_mac>
    13ae:	88 23       	and	r24, r24
    13b0:	61 f0       	breq	.+24     	; 0x13ca <_ZN9EtherCard10packetLoopEj+0x148>
    13b2:	6e e1       	ldi	r22, 0x1E	; 30
    13b4:	77 e0       	ldi	r23, 0x07	; 7
    13b6:	89 ef       	ldi	r24, 0xF9	; 249
    13b8:	96 e0       	ldi	r25, 0x06	; 6
    13ba:	72 de       	rcall	.-796    	; 0x10a0 <_ZL16client_store_macPhS_>
    13bc:	88 23       	and	r24, r24
    13be:	29 f0       	breq	.+10     	; 0x13ca <_ZN9EtherCard10packetLoopEj+0x148>
    13c0:	81 e0       	ldi	r24, 0x01	; 1
            has_dns_mac = true;
    13c2:	80 93 1c 07 	sts	0x071C, r24	; 0x80071c <_ZL11has_dns_mac>
    13c6:	10 92 1d 07 	sts	0x071D, r1	; 0x80071d <_ZL19waiting_for_dns_mac>
            waiting_for_dns_mac = false;
    13ca:	80 91 1a 07 	lds	r24, 0x071A	; 0x80071a <_ZL12has_dest_mac>
        }
        if (!has_dest_mac && waiting_for_dest_mac && client_store_mac(hisip, destmacaddr)) {
    13ce:	81 11       	cpse	r24, r1
    13d0:	8c c0       	rjmp	.+280    	; 0x14ea <_ZN9EtherCard10packetLoopEj+0x268>
    13d2:	80 91 1b 07 	lds	r24, 0x071B	; 0x80071b <_ZL20waiting_for_dest_mac>
    13d6:	88 23       	and	r24, r24
    13d8:	09 f4       	brne	.+2      	; 0x13dc <_ZN9EtherCard10packetLoopEj+0x15a>
    13da:	87 c0       	rjmp	.+270    	; 0x14ea <_ZN9EtherCard10packetLoopEj+0x268>
    13dc:	6e e1       	ldi	r22, 0x1E	; 30
    13de:	77 e0       	ldi	r23, 0x07	; 7
    13e0:	85 ef       	ldi	r24, 0xF5	; 245
    13e2:	96 e0       	ldi	r25, 0x06	; 6
    13e4:	5d de       	rcall	.-838    	; 0x10a0 <_ZL16client_store_macPhS_>
    13e6:	88 23       	and	r24, r24
    13e8:	09 f4       	brne	.+2      	; 0x13ec <_ZN9EtherCard10packetLoopEj+0x16a>
    13ea:	7f c0       	rjmp	.+254    	; 0x14ea <_ZN9EtherCard10packetLoopEj+0x268>
    13ec:	81 e0       	ldi	r24, 0x01	; 1
            has_dest_mac = true;
    13ee:	80 93 1a 07 	sts	0x071A, r24	; 0x80071a <_ZL12has_dest_mac>
    13f2:	10 92 1b 07 	sts	0x071B, r1	; 0x80071b <_ZL20waiting_for_dest_mac>
            waiting_for_dest_mac = false;
    13f6:	79 c0       	rjmp	.+242    	; 0x14ea <_ZN9EtherCard10packetLoopEj+0x268>
    13f8:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <_ZN8ENC28J606bufferE+0xc>
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
           memcmp(gPB + ETH_ARP_DST_IP_P, EtherCard::myip, IP_LEN) == 0;
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
    13fc:	88 30       	cpi	r24, 0x08	; 8
    13fe:	09 f0       	breq	.+2      	; 0x1402 <_ZN9EtherCard10packetLoopEj+0x180>
    1400:	74 c0       	rjmp	.+232    	; 0x14ea <_ZN9EtherCard10packetLoopEj+0x268>
    1402:	80 91 00 05 	lds	r24, 0x0500	; 0x800500 <_ZN8ENC28J606bufferE+0xd>
    1406:	81 11       	cpse	r24, r1
    1408:	70 c0       	rjmp	.+224    	; 0x14ea <_ZN9EtherCard10packetLoopEj+0x268>
    140a:	80 91 01 05 	lds	r24, 0x0501	; 0x800501 <_ZN8ENC28J606bufferE+0xe>
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
    140e:	85 34       	cpi	r24, 0x45	; 69
    1410:	09 f0       	breq	.+2      	; 0x1414 <_ZN9EtherCard10packetLoopEj+0x192>
    1412:	6b c0       	rjmp	.+214    	; 0x14ea <_ZN9EtherCard10packetLoopEj+0x268>
    1414:	44 e0       	ldi	r20, 0x04	; 4
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
           (memcmp(gPB + IP_DST_P, EtherCard::myip, IP_LEN) == 0  //not my IP
    1416:	50 e0       	ldi	r21, 0x00	; 0
    1418:	69 e0       	ldi	r22, 0x09	; 9
    141a:	77 e0       	ldi	r23, 0x07	; 7
    141c:	81 e1       	ldi	r24, 0x11	; 17
    141e:	95 e0       	ldi	r25, 0x05	; 5
    1420:	0e 94 e5 29 	call	0x53ca	; 0x53ca <memcmp>
    1424:	89 2b       	or	r24, r25
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
    1426:	09 f4       	brne	.+2      	; 0x142a <_ZN9EtherCard10packetLoopEj+0x1a8>
    1428:	54 c0       	rjmp	.+168    	; 0x14d2 <_ZN9EtherCard10packetLoopEj+0x250>
    142a:	44 e0       	ldi	r20, 0x04	; 4
           (memcmp(gPB + IP_DST_P, EtherCard::myip, IP_LEN) == 0  //not my IP
            || (memcmp(gPB + IP_DST_P, EtherCard::broadcastip, IP_LEN) == 0) //not subnet broadcast
    142c:	50 e0       	ldi	r21, 0x00	; 0
    142e:	61 e0       	ldi	r22, 0x01	; 1
    1430:	77 e0       	ldi	r23, 0x07	; 7
    1432:	81 e1       	ldi	r24, 0x11	; 17
    1434:	95 e0       	ldi	r25, 0x05	; 5
    1436:	0e 94 e5 29 	call	0x53ca	; 0x53ca <memcmp>
    143a:	89 2b       	or	r24, r25
    143c:	09 f4       	brne	.+2      	; 0x1440 <_ZN9EtherCard10packetLoopEj+0x1be>
    143e:	49 c0       	rjmp	.+146    	; 0x14d2 <_ZN9EtherCard10packetLoopEj+0x250>
    1440:	44 e0       	ldi	r20, 0x04	; 4
            || (memcmp(gPB + IP_DST_P, allOnes, IP_LEN) == 0)); //not global broadcasts
    1442:	50 e0       	ldi	r21, 0x00	; 0
    1444:	65 e2       	ldi	r22, 0x25	; 37
    1446:	72 e0       	ldi	r23, 0x02	; 2
    1448:	81 e1       	ldi	r24, 0x11	; 17
    144a:	95 e0       	ldi	r25, 0x05	; 5
    144c:	0e 94 e5 29 	call	0x53ca	; 0x53ca <memcmp>
    1450:	89 2b       	or	r24, r25
    1452:	09 f0       	breq	.+2      	; 0x1456 <_ZN9EtherCard10packetLoopEj+0x1d4>
    1454:	4a c0       	rjmp	.+148    	; 0x14ea <_ZN9EtherCard10packetLoopEj+0x268>
    1456:	3d c0       	rjmp	.+122    	; 0x14d2 <_ZN9EtherCard10packetLoopEj+0x250>
    1458:	80 91 15 05 	lds	r24, 0x0515	; 0x800515 <_ZN8ENC28J606bufferE+0x22>
        //!@todo Add other protocols (and make each optional at compile time)
        return 0;
    }
	
	//To handle pinging
	if (gPB[IP_PROTO_P]==IP_PROTO_ICMP_V && gPB[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V)
    145c:	88 30       	cpi	r24, 0x08	; 8
    145e:	c9 f4       	brne	.+50     	; 0x1492 <_ZN9EtherCard10packetLoopEj+0x210>
	{   //Service ICMP echo request (ping)
		if (icmp_cb)
    1460:	e0 91 24 07 	lds	r30, 0x0724	; 0x800724 <_ZL7icmp_cb>
    1464:	f0 91 25 07 	lds	r31, 0x0725	; 0x800725 <_ZL7icmp_cb+0x1>
    1468:	30 97       	sbiw	r30, 0x00	; 0
    146a:	19 f0       	breq	.+6      	; 0x1472 <_ZN9EtherCard10packetLoopEj+0x1f0>
		(*icmp_cb)(&(gPB[IP_SRC_P]));
    146c:	8d e0       	ldi	r24, 0x0D	; 13
    146e:	95 e0       	ldi	r25, 0x05	; 5
    1470:	19 95       	eicall
void EtherCard::registerPingCallback (void (*callback)(uint8_t *srcip)) {
    icmp_cb = callback;
}

static void make_echo_reply_from_request(uint16_t len) {
	make_eth_ip();
    1472:	f7 dd       	rcall	.-1042   	; 0x1062 <_ZL11make_eth_ipv>
	gPB[ICMP_TYPE_P] = ICMP_TYPE_ECHOREPLY_V;
    1474:	e3 ef       	ldi	r30, 0xF3	; 243
    1476:	f4 e0       	ldi	r31, 0x04	; 4
	if (gPB[ICMP_CHECKSUM_P] > (0xFF-0x08))
    1478:	12 a2       	std	Z+34, r1	; 0x22
    147a:	84 a1       	ldd	r24, Z+36	; 0x24
    147c:	88 3f       	cpi	r24, 0xF8	; 248
	gPB[ICMP_CHECKSUM_P+1]++;
    147e:	18 f0       	brcs	.+6      	; 0x1486 <_ZN9EtherCard10packetLoopEj+0x204>
    1480:	95 a1       	ldd	r25, Z+37	; 0x25
    1482:	9f 5f       	subi	r25, 0xFF	; 255
	gPB[ICMP_CHECKSUM_P] += 0x08;
    1484:	95 a3       	std	Z+37, r25	; 0x25
    1486:	88 5f       	subi	r24, 0xF8	; 248
	EtherCard::packetSend(len);
    1488:	80 93 17 05 	sts	0x0517, r24	; 0x800517 <_ZN8ENC28J606bufferE+0x24>
    148c:	ce 01       	movw	r24, r28
    148e:	10 dc       	rcall	.-2016   	; 0xcb0 <_ZN8ENC28J6010packetSendEj>
		make_echo_reply_from_request(plen);
		return 0;
	}

#if ETHERCARD_UDPSERVER
    if (ether.udpServerListening() && gPB[IP_PROTO_P]==IP_PROTO_UDP_V)
    1490:	2c c0       	rjmp	.+88     	; 0x14ea <_ZN9EtherCard10packetLoopEj+0x268>
    1492:	4a d0       	rcall	.+148    	; 0x1528 <_ZN9EtherCard18udpServerListeningEv>
    1494:	88 23       	and	r24, r24
    1496:	49 f1       	breq	.+82     	; 0x14ea <_ZN9EtherCard10packetLoopEj+0x268>
    1498:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <_ZN8ENC28J606bufferE+0x17>
    149c:	81 31       	cpi	r24, 0x11	; 17
    149e:	29 f5       	brne	.+74     	; 0x14ea <_ZN9EtherCard10packetLoopEj+0x268>
        }
        delaycnt++;

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, dnsip) && !has_dns_mac && !waiting_for_dns_mac) {
            client_arp_whohas(dnsip);
    14a0:	1d c0       	rjmp	.+58     	; 0x14dc <_ZN9EtherCard10packetLoopEj+0x25a>
    14a2:	89 ef       	ldi	r24, 0xF9	; 249
    14a4:	96 e0       	ldi	r25, 0x06	; 6
    14a6:	12 de       	rcall	.-988    	; 0x10cc <_ZL17client_arp_whohasPh>
            waiting_for_dns_mac = true;
    14a8:	81 e0       	ldi	r24, 0x01	; 1
    14aa:	80 93 1d 07 	sts	0x071D, r24	; 0x80071d <_ZL19waiting_for_dns_mac>
    14ae:	1d cf       	rjmp	.-454    	; 0x12ea <_ZN9EtherCard10packetLoopEj+0x68>
        }

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, hisip) && !has_dest_mac && !waiting_for_dest_mac) {
            client_arp_whohas(hisip);
    14b0:	85 ef       	ldi	r24, 0xF5	; 245
    14b2:	96 e0       	ldi	r25, 0x06	; 6
    14b4:	0b de       	rcall	.-1002   	; 0x10cc <_ZL17client_arp_whohasPh>
    14b6:	81 e0       	ldi	r24, 0x01	; 1
            waiting_for_dest_mac = true;
    14b8:	80 93 1b 07 	sts	0x071B, r24	; 0x80071b <_ZL20waiting_for_dest_mac>
    14bc:	16 c0       	rjmp	.+44     	; 0x14ea <_ZN9EtherCard10packetLoopEj+0x268>
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
    14be:	8a 97       	sbiw	r24, 0x2a	; 42
    14c0:	08 f0       	brcs	.+2      	; 0x14c4 <_ZN9EtherCard10packetLoopEj+0x242>
    14c2:	9a cf       	rjmp	.-204    	; 0x13f8 <_ZN9EtherCard10packetLoopEj+0x176>
    14c4:	12 c0       	rjmp	.+36     	; 0x14ea <_ZN9EtherCard10packetLoopEj+0x268>
        return 0;
    }

    if (eth_type_is_arp_and_my_ip(plen))
    {   //Service ARP request
        if (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REQ_L_V)
    14c6:	80 91 08 05 	lds	r24, 0x0508	; 0x800508 <_ZN8ENC28J606bufferE+0x15>
    14ca:	81 30       	cpi	r24, 0x01	; 1
    14cc:	09 f0       	breq	.+2      	; 0x14d0 <_ZN9EtherCard10packetLoopEj+0x24e>
    14ce:	57 cf       	rjmp	.-338    	; 0x137e <_ZN9EtherCard10packetLoopEj+0xfc>
    14d0:	37 cf       	rjmp	.-402    	; 0x1340 <_ZN9EtherCard10packetLoopEj+0xbe>
        //!@todo Add other protocols (and make each optional at compile time)
        return 0;
    }
	
	//To handle pinging
	if (gPB[IP_PROTO_P]==IP_PROTO_ICMP_V && gPB[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V)
    14d2:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <_ZN8ENC28J606bufferE+0x17>
    14d6:	81 30       	cpi	r24, 0x01	; 1
    14d8:	e1 f6       	brne	.-72     	; 0x1492 <_ZN9EtherCard10packetLoopEj+0x210>
    14da:	be cf       	rjmp	.-132    	; 0x1458 <_ZN9EtherCard10packetLoopEj+0x1d6>
	}

#if ETHERCARD_UDPSERVER
    if (ether.udpServerListening() && gPB[IP_PROTO_P]==IP_PROTO_UDP_V)
    {   //Call UDP server handler (callback) if one is defined for this packet
        if(ether.udpServerHasProcessedPacket(plen))
    14dc:	ce 01       	movw	r24, r28
    14de:	2b d0       	rcall	.+86     	; 0x1536 <_ZN9EtherCard27udpServerHasProcessedPacketEj>
    14e0:	04 c0       	rjmp	.+8      	; 0x14ea <_ZN9EtherCard10packetLoopEj+0x268>
    14e2:	ca 32       	cpi	r28, 0x2A	; 42
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
    14e4:	d1 05       	cpc	r29, r1
    14e6:	08 f0       	brcs	.+2      	; 0x14ea <_ZN9EtherCard10packetLoopEj+0x268>
    14e8:	8c cf       	rjmp	.-232    	; 0x1402 <_ZN9EtherCard10packetLoopEj+0x180>
    14ea:	80 e0       	ldi	r24, 0x00	; 0

    if (plen<54 || gPB[IP_PROTO_P]!=IP_PROTO_TCP_V )
        return 0; //from here on we are only interested in TCP-packets; these are longer than 54 bytes
		
	return 0;
}
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	df 91       	pop	r29
    14f0:	cf 91       	pop	r28
    14f2:	08 95       	ret

000014f4 <_ZN9EtherCard21udpServerListenOnPortEPFvjPhjPKcjEj>:
    14f4:	9c 01       	movw	r18, r24
    {
        if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((uint8_t) listeners[i].port)) {
            listeners[i].listening = true;
        }
    }
}
    14f6:	90 91 26 07 	lds	r25, 0x0726	; 0x800726 <numListeners>
    14fa:	98 30       	cpi	r25, 0x08	; 8
    14fc:	a0 f4       	brcc	.+40     	; 0x1526 <_ZN9EtherCard21udpServerListenOnPortEPFvjPhjPKcjEj+0x32>
    14fe:	e9 2f       	mov	r30, r25
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	af 01       	movw	r20, r30
    1504:	44 0f       	add	r20, r20
    1506:	55 1f       	adc	r21, r21
    1508:	44 0f       	add	r20, r20
    150a:	55 1f       	adc	r21, r21
    150c:	e4 0f       	add	r30, r20
    150e:	f5 1f       	adc	r31, r21
    1510:	e9 5d       	subi	r30, 0xD9	; 217
    1512:	f8 4f       	sbci	r31, 0xF8	; 248
    1514:	31 83       	std	Z+1, r19	; 0x01
    1516:	20 83       	st	Z, r18
    1518:	73 83       	std	Z+3, r23	; 0x03
    151a:	62 83       	std	Z+2, r22	; 0x02
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	84 83       	std	Z+4, r24	; 0x04
    1520:	9f 5f       	subi	r25, 0xFF	; 255
    1522:	90 93 26 07 	sts	0x0726, r25	; 0x800726 <numListeners>
    1526:	08 95       	ret

00001528 <_ZN9EtherCard18udpServerListeningEv>:

bool EtherCard::udpServerListening() {
    return numListeners > 0;
    1528:	81 e0       	ldi	r24, 0x01	; 1
    152a:	90 91 26 07 	lds	r25, 0x0726	; 0x800726 <numListeners>
    152e:	91 11       	cpse	r25, r1
    1530:	01 c0       	rjmp	.+2      	; 0x1534 <_ZN9EtherCard18udpServerListeningEv+0xc>
    1532:	80 e0       	ldi	r24, 0x00	; 0
}
    1534:	08 95       	ret

00001536 <_ZN9EtherCard27udpServerHasProcessedPacketEj>:

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    1536:	8f 92       	push	r8
    1538:	9f 92       	push	r9
    153a:	bf 92       	push	r11
    153c:	cf 92       	push	r12
    153e:	df 92       	push	r13
    1540:	ef 92       	push	r14
    1542:	ff 92       	push	r15
    1544:	0f 93       	push	r16
    1546:	1f 93       	push	r17
    1548:	cf 93       	push	r28
    154a:	df 93       	push	r29
    bool packetProcessed = false;
    for(int i = 0; i < numListeners; i++)
    154c:	80 91 26 07 	lds	r24, 0x0726	; 0x800726 <numListeners>
    1550:	88 23       	and	r24, r24
    1552:	09 f4       	brne	.+2      	; 0x1556 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x20>
    1554:	46 c0       	rjmp	.+140    	; 0x15e2 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0xac>
    1556:	c7 e2       	ldi	r28, 0x27	; 39
    1558:	d7 e0       	ldi	r29, 0x07	; 7
    155a:	e1 2c       	mov	r14, r1
    155c:	f1 2c       	mov	r15, r1
    155e:	80 e0       	ldi	r24, 0x00	; 0
    {
        if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((uint8_t) listeners[i].port) && listeners[i].listening)
    1560:	0f 2e       	mov	r0, r31
    1562:	f3 ef       	ldi	r31, 0xF3	; 243
    1564:	cf 2e       	mov	r12, r31
    1566:	f4 e0       	ldi	r31, 0x04	; 4
    1568:	df 2e       	mov	r13, r31
    156a:	f0 2d       	mov	r31, r0
                listeners[i].port,
                gPB + IP_SRC_P,
                (gPB[UDP_SRC_PORT_H_P] << 8) | gPB[UDP_SRC_PORT_L_P],
                (const char *) (gPB + UDP_DATA_P),
                datalen);
            packetProcessed = true;
    156c:	bb 24       	eor	r11, r11
    156e:	b3 94       	inc	r11

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    bool packetProcessed = false;
    for(int i = 0; i < numListeners; i++)
    {
        if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((uint8_t) listeners[i].port) && listeners[i].listening)
    1570:	aa 81       	ldd	r26, Y+2	; 0x02
    1572:	bb 81       	ldd	r27, Y+3	; 0x03
    1574:	f6 01       	movw	r30, r12
    1576:	24 a1       	ldd	r18, Z+36	; 0x24
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	4b 2f       	mov	r20, r27
    157c:	55 27       	eor	r21, r21
    157e:	24 17       	cp	r18, r20
    1580:	35 07       	cpc	r19, r21
    1582:	21 f5       	brne	.+72     	; 0x15cc <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x96>
    1584:	25 a1       	ldd	r18, Z+37	; 0x25
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	ad 01       	movw	r20, r26
    158a:	55 27       	eor	r21, r21
    158c:	24 17       	cp	r18, r20
    158e:	35 07       	cpc	r19, r21
    1590:	e9 f4       	brne	.+58     	; 0x15cc <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x96>
    1592:	9c 81       	ldd	r25, Y+4	; 0x04
    1594:	99 23       	and	r25, r25
    1596:	d1 f0       	breq	.+52     	; 0x15cc <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x96>
            listeners[i].callback(
                listeners[i].port,
                gPB + IP_SRC_P,
                (gPB[UDP_SRC_PORT_H_P] << 8) | gPB[UDP_SRC_PORT_L_P],
                (const char *) (gPB + UDP_DATA_P),
                datalen);
    1598:	07 a1       	ldd	r16, Z+39	; 0x27
    159a:	10 e0       	ldi	r17, 0x00	; 0
    159c:	08 50       	subi	r16, 0x08	; 8
    159e:	11 09       	sbc	r17, r1
    15a0:	86 a1       	ldd	r24, Z+38	; 0x26
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	98 2f       	mov	r25, r24
    15a6:	88 27       	eor	r24, r24
    15a8:	08 0f       	add	r16, r24
    15aa:	19 1f       	adc	r17, r25
    15ac:	42 a1       	ldd	r20, Z+34	; 0x22
    15ae:	50 e0       	ldi	r21, 0x00	; 0
    15b0:	54 2f       	mov	r21, r20
    15b2:	44 27       	eor	r20, r20
    15b4:	83 a1       	ldd	r24, Z+35	; 0x23
    15b6:	48 2b       	or	r20, r24
    15b8:	88 80       	ld	r8, Y
    15ba:	99 80       	ldd	r9, Y+1	; 0x01
    15bc:	2d e1       	ldi	r18, 0x1D	; 29
    15be:	35 e0       	ldi	r19, 0x05	; 5
    15c0:	6d e0       	ldi	r22, 0x0D	; 13
    15c2:	75 e0       	ldi	r23, 0x05	; 5
    15c4:	cd 01       	movw	r24, r26
    15c6:	f4 01       	movw	r30, r8
    15c8:	19 95       	eicall
            packetProcessed = true;
    15ca:	8b 2d       	mov	r24, r11
    return numListeners > 0;
}

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    bool packetProcessed = false;
    for(int i = 0; i < numListeners; i++)
    15cc:	ff ef       	ldi	r31, 0xFF	; 255
    15ce:	ef 1a       	sub	r14, r31
    15d0:	ff 0a       	sbc	r15, r31
    15d2:	25 96       	adiw	r28, 0x05	; 5
    15d4:	20 91 26 07 	lds	r18, 0x0726	; 0x800726 <numListeners>
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	e2 16       	cp	r14, r18
    15dc:	f3 06       	cpc	r15, r19
    15de:	44 f2       	brlt	.-112    	; 0x1570 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x3a>
    15e0:	01 c0       	rjmp	.+2      	; 0x15e4 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0xae>
bool EtherCard::udpServerListening() {
    return numListeners > 0;
}

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    bool packetProcessed = false;
    15e2:	80 e0       	ldi	r24, 0x00	; 0
                datalen);
            packetProcessed = true;
        }
    }
    return packetProcessed;
}
    15e4:	df 91       	pop	r29
    15e6:	cf 91       	pop	r28
    15e8:	1f 91       	pop	r17
    15ea:	0f 91       	pop	r16
    15ec:	ff 90       	pop	r15
    15ee:	ef 90       	pop	r14
    15f0:	df 90       	pop	r13
    15f2:	cf 90       	pop	r12
    15f4:	bf 90       	pop	r11
    15f6:	9f 90       	pop	r9
    15f8:	8f 90       	pop	r8
    15fa:	08 95       	ret

000015fc <_ZN9EtherCard6copyIpEPhPKh>:
#include <stdlib.h>
#include <ctype.h>
#include <string.h>

void EtherCard::copyIp (uint8_t *dst, const uint8_t *src) {
    memcpy(dst, src, IP_LEN);
    15fc:	fb 01       	movw	r30, r22
    15fe:	20 81       	ld	r18, Z
    1600:	31 81       	ldd	r19, Z+1	; 0x01
    1602:	fc 01       	movw	r30, r24
    1604:	31 83       	std	Z+1, r19	; 0x01
    1606:	20 83       	st	Z, r18
    1608:	fb 01       	movw	r30, r22
    160a:	22 81       	ldd	r18, Z+2	; 0x02
    160c:	33 81       	ldd	r19, Z+3	; 0x03
    160e:	fc 01       	movw	r30, r24
    1610:	33 83       	std	Z+3, r19	; 0x03
    1612:	22 83       	std	Z+2, r18	; 0x02
    1614:	08 95       	ret

00001616 <_ZN9EtherCard7copyMacEPhPKh>:
}

void EtherCard::copyMac (uint8_t *dst, const uint8_t *src) {
    1616:	dc 01       	movw	r26, r24
    memcpy(dst, src, ETH_LEN);
    1618:	96 e0       	ldi	r25, 0x06	; 6
    161a:	fb 01       	movw	r30, r22
    161c:	01 90       	ld	r0, Z+
    161e:	0d 92       	st	X+, r0
    1620:	9a 95       	dec	r25
    1622:	e1 f7       	brne	.-8      	; 0x161c <_ZN9EtherCard7copyMacEPhPKh+0x6>
    1624:	08 95       	ret

00001626 <_ZN9EtherComm13CheckChecksumEPKch>:
			}
		}
	}
}

bool EtherComm::CheckChecksum(const char *data, uint8_t len){
    1626:	cf 93       	push	r28
    1628:	df 93       	push	r29
    162a:	ec 01       	movw	r28, r24
  uint8_t checksum = (uint8_t)(*(data++)); //Start by 'adding' the command to the checksum
    162c:	dc 01       	movw	r26, r24
    162e:	11 96       	adiw	r26, 0x01	; 1
    1630:	98 81       	ld	r25, Y
  while(len-- > 0){
    1632:	2f ef       	ldi	r18, 0xFF	; 255
    1634:	26 0f       	add	r18, r22
    1636:	66 23       	and	r22, r22
    1638:	91 f0       	breq	.+36     	; 0x165e <_ZN9EtherComm13CheckChecksumEPKch+0x38>
    163a:	fd 01       	movw	r30, r26
    163c:	62 2f       	mov	r22, r18
    163e:	70 e0       	ldi	r23, 0x00	; 0
    1640:	9b 01       	movw	r18, r22
    1642:	2e 5f       	subi	r18, 0xFE	; 254
    1644:	3f 4f       	sbci	r19, 0xFF	; 255
    1646:	ae 01       	movw	r20, r28
    1648:	42 0f       	add	r20, r18
    164a:	53 1f       	adc	r21, r19
    checksum += (uint8_t)(*(data++));
    164c:	21 91       	ld	r18, Z+
    164e:	92 0f       	add	r25, r18
	}
}

bool EtherComm::CheckChecksum(const char *data, uint8_t len){
  uint8_t checksum = (uint8_t)(*(data++)); //Start by 'adding' the command to the checksum
  while(len-- > 0){
    1650:	e4 17       	cp	r30, r20
    1652:	f5 07       	cpc	r31, r21
    1654:	d9 f7       	brne	.-10     	; 0x164c <_ZN9EtherComm13CheckChecksumEPKch+0x26>
    1656:	6f 5f       	subi	r22, 0xFF	; 255
    1658:	7f 4f       	sbci	r23, 0xFF	; 255
    165a:	a6 0f       	add	r26, r22
    165c:	b7 1f       	adc	r27, r23
    checksum += (uint8_t)(*(data++));
  }
  return (checksum & CHECKSUM_MASK) == (uint8_t)(*data);
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	2c 91       	ld	r18, X
    1662:	29 13       	cpse	r18, r25
    1664:	80 e0       	ldi	r24, 0x00	; 0
}
    1666:	df 91       	pop	r29
    1668:	cf 91       	pop	r28
    166a:	08 95       	ret

0000166c <_Z10udpReceivejPhjPKcj>:

//char EtherComm::buffer[BUFFER_SIZE];
uint8_t* EtherComm::buffer = ether.buffer + UDP_DATA_P;

//callback that prints received packets to the serial port
void udpReceive(uint16_t dest_port, uint8_t src_ip[IP_LEN], uint16_t src_port, const char *data, uint16_t packetLen){
    166c:	0f 93       	push	r16
    166e:	1f 93       	push	r17
    1670:	cf 93       	push	r28
    1672:	df 93       	push	r29
/*  IPAddress src(src_ip[0],src_ip[1],src_ip[2],src_ip[3]);
  ether.printIp(src_ip);*/
	
	if(packetLen >= 2){ //At minimum, register id, and checksum.
    1674:	c8 01       	movw	r24, r16
    1676:	02 97       	sbiw	r24, 0x02	; 2
    1678:	8f 3f       	cpi	r24, 0xFF	; 255
    167a:	91 05       	cpc	r25, r1
    167c:	09 f0       	breq	.+2      	; 0x1680 <_Z10udpReceivejPhjPKcj+0x14>
    167e:	68 f4       	brcc	.+26     	; 0x169a <_Z10udpReceivejPhjPKcj+0x2e>
    1680:	e9 01       	movw	r28, r18
		if(packetLen <= 257){
			uint8_t dataLen = (uint8_t)(packetLen - 2);
    1682:	02 50       	subi	r16, 0x02	; 2
			if(EtherComm::CheckChecksum(data, dataLen)){
    1684:	60 2f       	mov	r22, r16
    1686:	c9 01       	movw	r24, r18
    1688:	ce df       	rcall	.-100    	; 0x1626 <_ZN9EtherComm13CheckChecksumEPKch>
    168a:	88 23       	and	r24, r24
    168c:	31 f0       	breq	.+12     	; 0x169a <_Z10udpReceivejPhjPKcj+0x2e>
				EtherComm::CommandReceived(data[0], (const uint8_t*)(data + 1), dataLen);
    168e:	be 01       	movw	r22, r28
    1690:	6f 5f       	subi	r22, 0xFF	; 255
    1692:	7f 4f       	sbci	r23, 0xFF	; 255
    1694:	40 2f       	mov	r20, r16
    1696:	88 81       	ld	r24, Y
    1698:	a5 d9       	rcall	.-3254   	; 0x9e4 <_ZN9EtherComm15CommandReceivedEhPKhh>
			}
		}
	}
}
    169a:	df 91       	pop	r29
    169c:	cf 91       	pop	r28
    169e:	1f 91       	pop	r17
    16a0:	0f 91       	pop	r16
    16a2:	08 95       	ret

000016a4 <_ZN9EtherComm5beginEjjRVhS1_h>:
    checksum += (uint8_t)(*(data++));
  }
  return (checksum & CHECKSUM_MASK) == (uint8_t)(*data);
}

bool EtherComm::begin(uint16_t recvPort, uint16_t destPort, Register& csDDR, Register& csPort, uint8_t csPin){
    16a4:	0f 93       	push	r16
    16a6:	cf 93       	push	r28
    16a8:	df 93       	push	r29
    16aa:	ec 01       	movw	r28, r24
    16ac:	ca 01       	movw	r24, r20
    16ae:	a9 01       	movw	r20, r18
    16b0:	20 2f       	mov	r18, r16
  EtherComm::_recvPort = recvPort;
    16b2:	d0 93 52 07 	sts	0x0752, r29	; 0x800752 <_ZN9EtherComm9_recvPortE+0x1>
    16b6:	c0 93 51 07 	sts	0x0751, r28	; 0x800751 <_ZN9EtherComm9_recvPortE>
  EtherComm::_destPort = destPort;
    16ba:	70 93 50 07 	sts	0x0750, r23	; 0x800750 <_ZN9EtherComm9_destPortE+0x1>
    16be:	60 93 4f 07 	sts	0x074F, r22	; 0x80074f <_ZN9EtherComm9_destPortE>
  
  if (ether.begin(EtherComm::_mymac, csDDR, csPort, csPin) == 0) return false;
    16c2:	bc 01       	movw	r22, r24
    16c4:	86 e0       	ldi	r24, 0x06	; 6
    16c6:	92 e0       	ldi	r25, 0x02	; 2
    16c8:	d1 db       	rcall	.-2142   	; 0xe6c <_ZN9EtherCard5beginEPKhRVhS3_h>
    16ca:	88 23       	and	r24, r24
    16cc:	79 f0       	breq	.+30     	; 0x16ec <_ZN9EtherComm5beginEjjRVhS1_h+0x48>
  ether.staticSetup(EtherComm::_myip, EtherComm::_gwip);
    16ce:	20 e0       	ldi	r18, 0x00	; 0
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	40 e0       	ldi	r20, 0x00	; 0
    16d4:	50 e0       	ldi	r21, 0x00	; 0
    16d6:	6c e0       	ldi	r22, 0x0C	; 12
    16d8:	72 e0       	ldi	r23, 0x02	; 2
    16da:	80 e1       	ldi	r24, 0x10	; 16
    16dc:	92 e0       	ldi	r25, 0x02	; 2
    16de:	df db       	rcall	.-2114   	; 0xe9e <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_>
  ether.printIp("GW:  ", ether.gwip);
  ether.printIp("DNS: ", ether.dnsip);
  */
  
  //Register the udpSerialPrint() method to listen to port the receive port.
  ether.udpServerListenOnPort(&udpReceive, recvPort);
    16e0:	be 01       	movw	r22, r28
    16e2:	86 e3       	ldi	r24, 0x36	; 54
    16e4:	9b e0       	ldi	r25, 0x0B	; 11
    16e6:	06 df       	rcall	.-500    	; 0x14f4 <_ZN9EtherCard21udpServerListenOnPortEPFvjPhjPKcjEj>
  
  return true;
    16e8:	81 e0       	ldi	r24, 0x01	; 1
    16ea:	01 c0       	rjmp	.+2      	; 0x16ee <_ZN9EtherComm5beginEjjRVhS1_h+0x4a>

bool EtherComm::begin(uint16_t recvPort, uint16_t destPort, Register& csDDR, Register& csPort, uint8_t csPin){
  EtherComm::_recvPort = recvPort;
  EtherComm::_destPort = destPort;
  
  if (ether.begin(EtherComm::_mymac, csDDR, csPort, csPin) == 0) return false;
    16ec:	80 e0       	ldi	r24, 0x00	; 0
  
  //Register the udpSerialPrint() method to listen to port the receive port.
  ether.udpServerListenOnPort(&udpReceive, recvPort);
  
  return true;
}
    16ee:	df 91       	pop	r29
    16f0:	cf 91       	pop	r28
    16f2:	0f 91       	pop	r16
    16f4:	08 95       	ret

000016f6 <_ZN9EtherComm11SendCommandEhh>:

void EtherComm::SendCommand(uint8_t id, uint8_t len){
    16f6:	0f 93       	push	r16
    16f8:	1f 93       	push	r17
    16fa:	cf 93       	push	r28
    16fc:	df 93       	push	r29
  EtherComm::buffer[0] = id; //START_BYTE;
    16fe:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    1702:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    1706:	80 83       	st	Z, r24
  
  uint8_t checksum = id; 
  uint8_t* index = &EtherComm::buffer[1]; 
    1708:	c0 91 00 02 	lds	r28, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    170c:	d0 91 01 02 	lds	r29, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    1710:	de 01       	movw	r26, r28
    1712:	11 96       	adiw	r26, 0x01	; 1
  uint8_t bytes = len;
  while(bytes-- > 0){
    1714:	4f ef       	ldi	r20, 0xFF	; 255
    1716:	46 0f       	add	r20, r22
    1718:	66 23       	and	r22, r22
    171a:	81 f0       	breq	.+32     	; 0x173c <_ZN9EtherComm11SendCommandEhh+0x46>
    171c:	fd 01       	movw	r30, r26
    171e:	50 e0       	ldi	r21, 0x00	; 0
    1720:	9a 01       	movw	r18, r20
    1722:	2e 5f       	subi	r18, 0xFE	; 254
    1724:	3f 4f       	sbci	r19, 0xFF	; 255
    1726:	2c 0f       	add	r18, r28
    1728:	3d 1f       	adc	r19, r29
    checksum += (uint8_t)(*(index++));  
    172a:	91 91       	ld	r25, Z+
    172c:	89 0f       	add	r24, r25
  EtherComm::buffer[0] = id; //START_BYTE;
  
  uint8_t checksum = id; 
  uint8_t* index = &EtherComm::buffer[1]; 
  uint8_t bytes = len;
  while(bytes-- > 0){
    172e:	e2 17       	cp	r30, r18
    1730:	f3 07       	cpc	r31, r19
    1732:	d9 f7       	brne	.-10     	; 0x172a <_ZN9EtherComm11SendCommandEhh+0x34>
    1734:	4f 5f       	subi	r20, 0xFF	; 255
    1736:	5f 4f       	sbci	r21, 0xFF	; 255
    1738:	a4 0f       	add	r26, r20
    173a:	b5 1f       	adc	r27, r21
    checksum += (uint8_t)(*(index++));  
  }
  (*index) = (uint8_t)(checksum & CHECKSUM_MASK);
    173c:	8c 93       	st	X, r24

  ether.sendUdp(EtherComm::buffer, (uint16_t)len + 2, _recvPort, _destIP, _destPort);
    173e:	00 91 4f 07 	lds	r16, 0x074F	; 0x80074f <_ZN9EtherComm9_destPortE>
    1742:	10 91 50 07 	lds	r17, 0x0750	; 0x800750 <_ZN9EtherComm9_destPortE+0x1>
    1746:	40 91 51 07 	lds	r20, 0x0751	; 0x800751 <_ZN9EtherComm9_recvPortE>
    174a:	50 91 52 07 	lds	r21, 0x0752	; 0x800752 <_ZN9EtherComm9_recvPortE+0x1>
    174e:	70 e0       	ldi	r23, 0x00	; 0
    1750:	6e 5f       	subi	r22, 0xFE	; 254
    1752:	7f 4f       	sbci	r23, 0xFF	; 255
    1754:	22 e0       	ldi	r18, 0x02	; 2
    1756:	32 e0       	ldi	r19, 0x02	; 2
    1758:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    175c:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    1760:	57 dd       	rcall	.-1362   	; 0x1210 <_ZN9EtherCard7sendUdpEPKhjjS1_j>
}
    1762:	df 91       	pop	r29
    1764:	cf 91       	pop	r28
    1766:	1f 91       	pop	r17
    1768:	0f 91       	pop	r16
    176a:	08 95       	ret

0000176c <main>:
#include "Micro/Peripherals/HardwareSerial.h"
#include "Robot.h"

int main(void)
{
	Serial.begin(115200);
    176c:	26 e0       	ldi	r18, 0x06	; 6
    176e:	40 e0       	ldi	r20, 0x00	; 0
    1770:	52 ec       	ldi	r21, 0xC2	; 194
    1772:	61 e0       	ldi	r22, 0x01	; 1
    1774:	70 e0       	ldi	r23, 0x00	; 0
    1776:	87 e7       	ldi	r24, 0x77	; 119
    1778:	97 e0       	ldi	r25, 0x07	; 7
    177a:	64 d0       	rcall	.+200    	; 0x1844 <_ZN14HardwareSerial5beginEmh>
	Serial.println("Initializing...");
    177c:	6b e2       	ldi	r22, 0x2B	; 43
    177e:	72 e0       	ldi	r23, 0x02	; 2
    1780:	87 e7       	ldi	r24, 0x77	; 119
    1782:	97 e0       	ldi	r25, 0x07	; 7
    1784:	0e 94 3f 26 	call	0x4c7e	; 0x4c7e <_ZN5Print7printlnEPKc>
	
	if(!rov.begin()){
    1788:	0e 94 a9 23 	call	0x4752	; 0x4752 <_ZN5Robot5beginEv>
    178c:	81 11       	cpse	r24, r1
    178e:	07 c0       	rjmp	.+14     	; 0x179e <main+0x32>
		Serial.println("Failed to initialize robot.");
    1790:	6b e3       	ldi	r22, 0x3B	; 59
    1792:	72 e0       	ldi	r23, 0x02	; 2
    1794:	87 e7       	ldi	r24, 0x77	; 119
    1796:	97 e0       	ldi	r25, 0x07	; 7
    1798:	0e 94 3f 26 	call	0x4c7e	; 0x4c7e <_ZN5Print7printlnEPKc>
    179c:	ff cf       	rjmp	.-2      	; 0x179c <main+0x30>
		while(true) ;
	}
	Serial.println("Initialized robot.");
    179e:	67 e5       	ldi	r22, 0x57	; 87
    17a0:	72 e0       	ldi	r23, 0x02	; 2
    17a2:	87 e7       	ldi	r24, 0x77	; 119
    17a4:	97 e0       	ldi	r25, 0x07	; 7
    17a6:	0e 94 3f 26 	call	0x4c7e	; 0x4c7e <_ZN5Print7printlnEPKc>
	
    while (1) {
		rov.Loop();
    17aa:	0e 94 79 24 	call	0x48f2	; 0x48f2 <_ZN5Robot4LoopEv>
    17ae:	fd cf       	rjmp	.-6      	; 0x17aa <main+0x3e>

000017b0 <_ZN5Print17availableForWriteEv>:
	//cbi(*_ucsrb, UDRIE0);
}

void HardwareSerial::end(){
	cbi(*_ucsrb, RXEN0);
	cbi(*_ucsrb, TXEN0);
    17b0:	80 e0       	ldi	r24, 0x00	; 0
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	08 95       	ret

000017b6 <_ZN14HardwareSerial9availableEv>:
    17b6:	dc 01       	movw	r26, r24
    17b8:	14 96       	adiw	r26, 0x04	; 4
    17ba:	ed 91       	ld	r30, X+
    17bc:	fc 91       	ld	r31, X
    17be:	15 97       	sbiw	r26, 0x05	; 5
    17c0:	80 81       	ld	r24, Z
    17c2:	08 2e       	mov	r0, r24
    17c4:	00 0c       	add	r0, r0
    17c6:	99 0b       	sbc	r25, r25
    17c8:	89 2f       	mov	r24, r25
    17ca:	88 1f       	adc	r24, r24
    17cc:	88 27       	eor	r24, r24
    17ce:	88 1f       	adc	r24, r24
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	08 95       	ret

000017d4 <_ZN14HardwareSerial4peekEv>:
    17d4:	8f ef       	ldi	r24, 0xFF	; 255
    17d6:	9f ef       	ldi	r25, 0xFF	; 255
    17d8:	08 95       	ret

000017da <_ZN14HardwareSerial4readEv>:
    17da:	dc 01       	movw	r26, r24
    17dc:	14 96       	adiw	r26, 0x04	; 4
    17de:	ed 91       	ld	r30, X+
    17e0:	fc 91       	ld	r31, X
    17e2:	15 97       	sbiw	r26, 0x05	; 5
    17e4:	90 81       	ld	r25, Z
    17e6:	99 23       	and	r25, r25
    17e8:	ec f7       	brge	.-6      	; 0x17e4 <_ZN14HardwareSerial4readEv+0xa>
    17ea:	1a 96       	adiw	r26, 0x0a	; 10
    17ec:	ed 91       	ld	r30, X+
    17ee:	fc 91       	ld	r31, X
    17f0:	1b 97       	sbiw	r26, 0x0b	; 11
    17f2:	80 81       	ld	r24, Z
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	08 95       	ret

000017f8 <_ZN14HardwareSerial17availableForWriteEv>:
    17f8:	dc 01       	movw	r26, r24
    17fa:	14 96       	adiw	r26, 0x04	; 4
    17fc:	ed 91       	ld	r30, X+
    17fe:	fc 91       	ld	r31, X
    1800:	15 97       	sbiw	r26, 0x05	; 5
    1802:	20 81       	ld	r18, Z
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	25 fd       	sbrc	r18, 5
    180a:	02 c0       	rjmp	.+4      	; 0x1810 <_ZN14HardwareSerial17availableForWriteEv+0x18>
    180c:	80 e0       	ldi	r24, 0x00	; 0
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	08 95       	ret

00001812 <_ZN14HardwareSerial5flushEv>:
    1812:	dc 01       	movw	r26, r24
    1814:	14 96       	adiw	r26, 0x04	; 4
    1816:	ed 91       	ld	r30, X+
    1818:	fc 91       	ld	r31, X
    181a:	15 97       	sbiw	r26, 0x05	; 5
    181c:	80 81       	ld	r24, Z
    181e:	85 ff       	sbrs	r24, 5
    1820:	fd cf       	rjmp	.-6      	; 0x181c <_ZN14HardwareSerial5flushEv+0xa>
    1822:	08 95       	ret

00001824 <_ZN14HardwareSerial5writeEh>:
    1824:	dc 01       	movw	r26, r24
    1826:	14 96       	adiw	r26, 0x04	; 4
    1828:	ed 91       	ld	r30, X+
    182a:	fc 91       	ld	r31, X
    182c:	15 97       	sbiw	r26, 0x05	; 5
    182e:	90 81       	ld	r25, Z
    1830:	95 ff       	sbrs	r25, 5
    1832:	fd cf       	rjmp	.-6      	; 0x182e <_ZN14HardwareSerial5writeEh+0xa>
    1834:	1a 96       	adiw	r26, 0x0a	; 10
    1836:	ed 91       	ld	r30, X+
    1838:	fc 91       	ld	r31, X
    183a:	1b 97       	sbiw	r26, 0x0b	; 11
    183c:	60 83       	st	Z, r22
    183e:	81 e0       	ldi	r24, 0x01	; 1
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	08 95       	ret

00001844 <_ZN14HardwareSerial5beginEmh>:
    1844:	cf 92       	push	r12
    1846:	df 92       	push	r13
    1848:	ef 92       	push	r14
    184a:	ff 92       	push	r15
    184c:	1f 93       	push	r17
    184e:	cf 93       	push	r28
    1850:	df 93       	push	r29
    1852:	ec 01       	movw	r28, r24
    1854:	6a 01       	movw	r12, r20
    1856:	7b 01       	movw	r14, r22
    1858:	12 2f       	mov	r17, r18
    185a:	db 01       	movw	r26, r22
    185c:	ca 01       	movw	r24, r20
    185e:	88 0f       	add	r24, r24
    1860:	99 1f       	adc	r25, r25
    1862:	aa 1f       	adc	r26, r26
    1864:	bb 1f       	adc	r27, r27
    1866:	88 0f       	add	r24, r24
    1868:	99 1f       	adc	r25, r25
    186a:	aa 1f       	adc	r26, r26
    186c:	bb 1f       	adc	r27, r27
    186e:	9c 01       	movw	r18, r24
    1870:	ad 01       	movw	r20, r26
    1872:	22 0f       	add	r18, r18
    1874:	33 1f       	adc	r19, r19
    1876:	44 1f       	adc	r20, r20
    1878:	55 1f       	adc	r21, r21
    187a:	60 e0       	ldi	r22, 0x00	; 0
    187c:	74 e2       	ldi	r23, 0x24	; 36
    187e:	84 ef       	ldi	r24, 0xF4	; 244
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	0e 94 e7 28 	call	0x51ce	; 0x51ce <__udivmodsi4>
    1886:	21 50       	subi	r18, 0x01	; 1
    1888:	31 09       	sbc	r19, r1
    188a:	ec 81       	ldd	r30, Y+4	; 0x04
    188c:	fd 81       	ldd	r31, Y+5	; 0x05
    188e:	82 e0       	ldi	r24, 0x02	; 2
    1890:	80 83       	st	Z, r24
    1892:	21 15       	cp	r18, r1
    1894:	80 e1       	ldi	r24, 0x10	; 16
    1896:	38 07       	cpc	r19, r24
    1898:	70 f0       	brcs	.+28     	; 0x18b6 <_ZN14HardwareSerial5beginEmh+0x72>
    189a:	ec 81       	ldd	r30, Y+4	; 0x04
    189c:	fd 81       	ldd	r31, Y+5	; 0x05
    189e:	10 82       	st	Z, r1
    18a0:	80 e4       	ldi	r24, 0x40	; 64
    18a2:	92 e4       	ldi	r25, 0x42	; 66
    18a4:	c8 9e       	mul	r12, r24
    18a6:	90 01       	movw	r18, r0
    18a8:	c9 9e       	mul	r12, r25
    18aa:	30 0d       	add	r19, r0
    18ac:	d8 9e       	mul	r13, r24
    18ae:	30 0d       	add	r19, r0
    18b0:	11 24       	eor	r1, r1
    18b2:	21 50       	subi	r18, 0x01	; 1
    18b4:	31 09       	sbc	r19, r1
    18b6:	ea 81       	ldd	r30, Y+2	; 0x02
    18b8:	fb 81       	ldd	r31, Y+3	; 0x03
    18ba:	31 83       	std	Z+1, r19	; 0x01
    18bc:	20 83       	st	Z, r18
    18be:	e8 85       	ldd	r30, Y+8	; 0x08
    18c0:	f9 85       	ldd	r31, Y+9	; 0x09
    18c2:	10 83       	st	Z, r17
    18c4:	ee 81       	ldd	r30, Y+6	; 0x06
    18c6:	ff 81       	ldd	r31, Y+7	; 0x07
    18c8:	80 81       	ld	r24, Z
    18ca:	80 61       	ori	r24, 0x10	; 16
    18cc:	80 83       	st	Z, r24
    18ce:	ee 81       	ldd	r30, Y+6	; 0x06
    18d0:	ff 81       	ldd	r31, Y+7	; 0x07
    18d2:	80 81       	ld	r24, Z
    18d4:	88 60       	ori	r24, 0x08	; 8
    18d6:	80 83       	st	Z, r24
    18d8:	df 91       	pop	r29
    18da:	cf 91       	pop	r28
    18dc:	1f 91       	pop	r17
    18de:	ff 90       	pop	r15
    18e0:	ef 90       	pop	r14
    18e2:	df 90       	pop	r13
    18e4:	cf 90       	pop	r12
    18e6:	08 95       	ret

000018e8 <_GLOBAL__sub_I__ZN14HardwareSerialC2ERVjRVhS3_S3_S3_>:

#include "HardwareSerial.h"
#include <avr/io.h>

HardwareSerial::HardwareSerial( Register16 &ubrr, Register &ucsra, Register &ucsrb, Register &ucsrc, Register &udr )
 : _ubrr(&ubrr), _ucsra(&ucsra), _ucsrb(&ucsrb), _ucsrc(&ucsrc), _udr(&udr)
    18e8:	e7 e7       	ldi	r30, 0x77	; 119
    18ea:	f7 e0       	ldi	r31, 0x07	; 7
    18ec:	8e e6       	ldi	r24, 0x6E	; 110
    18ee:	92 e0       	ldi	r25, 0x02	; 2
    18f0:	91 83       	std	Z+1, r25	; 0x01
    18f2:	80 83       	st	Z, r24
    18f4:	24 ec       	ldi	r18, 0xC4	; 196
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	33 83       	std	Z+3, r19	; 0x03
    18fa:	22 83       	std	Z+2, r18	; 0x02
    18fc:	20 ec       	ldi	r18, 0xC0	; 192
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	35 83       	std	Z+5, r19	; 0x05
    1902:	24 83       	std	Z+4, r18	; 0x04
    1904:	21 ec       	ldi	r18, 0xC1	; 193
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	37 83       	std	Z+7, r19	; 0x07
    190a:	26 83       	std	Z+6, r18	; 0x06
    190c:	22 ec       	ldi	r18, 0xC2	; 194
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	31 87       	std	Z+9, r19	; 0x09
    1912:	20 87       	std	Z+8, r18	; 0x08
    1914:	26 ec       	ldi	r18, 0xC6	; 198
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	33 87       	std	Z+11, r19	; 0x0b
    191a:	22 87       	std	Z+10, r18	; 0x0a
    191c:	eb e6       	ldi	r30, 0x6B	; 107
    191e:	f7 e0       	ldi	r31, 0x07	; 7
    1920:	91 83       	std	Z+1, r25	; 0x01
    1922:	80 83       	st	Z, r24
    1924:	2c ec       	ldi	r18, 0xCC	; 204
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	33 83       	std	Z+3, r19	; 0x03
    192a:	22 83       	std	Z+2, r18	; 0x02
    192c:	28 ec       	ldi	r18, 0xC8	; 200
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	35 83       	std	Z+5, r19	; 0x05
    1932:	24 83       	std	Z+4, r18	; 0x04
    1934:	29 ec       	ldi	r18, 0xC9	; 201
    1936:	30 e0       	ldi	r19, 0x00	; 0
    1938:	37 83       	std	Z+7, r19	; 0x07
    193a:	26 83       	std	Z+6, r18	; 0x06
    193c:	2a ec       	ldi	r18, 0xCA	; 202
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	31 87       	std	Z+9, r19	; 0x09
    1942:	20 87       	std	Z+8, r18	; 0x08
    1944:	2e ec       	ldi	r18, 0xCE	; 206
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	33 87       	std	Z+11, r19	; 0x0b
    194a:	22 87       	std	Z+10, r18	; 0x0a
    194c:	ef e5       	ldi	r30, 0x5F	; 95
    194e:	f7 e0       	ldi	r31, 0x07	; 7
    1950:	91 83       	std	Z+1, r25	; 0x01
    1952:	80 83       	st	Z, r24
    1954:	24 ed       	ldi	r18, 0xD4	; 212
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	33 83       	std	Z+3, r19	; 0x03
    195a:	22 83       	std	Z+2, r18	; 0x02
    195c:	20 ed       	ldi	r18, 0xD0	; 208
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	35 83       	std	Z+5, r19	; 0x05
    1962:	24 83       	std	Z+4, r18	; 0x04
    1964:	21 ed       	ldi	r18, 0xD1	; 209
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	37 83       	std	Z+7, r19	; 0x07
    196a:	26 83       	std	Z+6, r18	; 0x06
    196c:	22 ed       	ldi	r18, 0xD2	; 210
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	31 87       	std	Z+9, r19	; 0x09
    1972:	20 87       	std	Z+8, r18	; 0x08
    1974:	26 ed       	ldi	r18, 0xD6	; 214
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	33 87       	std	Z+11, r19	; 0x0b
    197a:	22 87       	std	Z+10, r18	; 0x0a
    197c:	e3 e5       	ldi	r30, 0x53	; 83
    197e:	f7 e0       	ldi	r31, 0x07	; 7
    1980:	91 83       	std	Z+1, r25	; 0x01
    1982:	80 83       	st	Z, r24
    1984:	84 e3       	ldi	r24, 0x34	; 52
    1986:	91 e0       	ldi	r25, 0x01	; 1
    1988:	93 83       	std	Z+3, r25	; 0x03
    198a:	82 83       	std	Z+2, r24	; 0x02
    198c:	80 e3       	ldi	r24, 0x30	; 48
    198e:	91 e0       	ldi	r25, 0x01	; 1
    1990:	95 83       	std	Z+5, r25	; 0x05
    1992:	84 83       	std	Z+4, r24	; 0x04
    1994:	81 e3       	ldi	r24, 0x31	; 49
    1996:	91 e0       	ldi	r25, 0x01	; 1
    1998:	97 83       	std	Z+7, r25	; 0x07
    199a:	86 83       	std	Z+6, r24	; 0x06
    199c:	82 e3       	ldi	r24, 0x32	; 50
    199e:	91 e0       	ldi	r25, 0x01	; 1
    19a0:	91 87       	std	Z+9, r25	; 0x09
    19a2:	80 87       	std	Z+8, r24	; 0x08
    19a4:	86 e3       	ldi	r24, 0x36	; 54
    19a6:	91 e0       	ldi	r25, 0x01	; 1
    19a8:	93 87       	std	Z+11, r25	; 0x0b
    19aa:	82 87       	std	Z+10, r24	; 0x0a
    19ac:	08 95       	ret

000019ae <_ZN13HardwareServo5beginEv>:
	*_icr = 40000; //Set period to 20ms
}

void HardwareServo::end(){
	*_tccrA = 0;
	*_tccrB = 0;
    19ae:	fc 01       	movw	r30, r24
    19b0:	a2 81       	ldd	r26, Z+2	; 0x02
    19b2:	b3 81       	ldd	r27, Z+3	; 0x03
    19b4:	82 e0       	ldi	r24, 0x02	; 2
    19b6:	8c 93       	st	X, r24
    19b8:	a4 81       	ldd	r26, Z+4	; 0x04
    19ba:	b5 81       	ldd	r27, Z+5	; 0x05
    19bc:	8a e1       	ldi	r24, 0x1A	; 26
    19be:	8c 93       	st	X, r24
    19c0:	01 90       	ld	r0, Z+
    19c2:	f0 81       	ld	r31, Z
    19c4:	e0 2d       	mov	r30, r0
    19c6:	80 e4       	ldi	r24, 0x40	; 64
    19c8:	9c e9       	ldi	r25, 0x9C	; 156
    19ca:	91 83       	std	Z+1, r25	; 0x01
    19cc:	80 83       	st	Z, r24
    19ce:	08 95       	ret

000019d0 <_ZN13HardwareServo7EnableAEv>:
}

void HardwareServo::EnableA(){
    19d0:	fc 01       	movw	r30, r24
	*_tccrA |= _BV(COM1A1);
    19d2:	a2 81       	ldd	r26, Z+2	; 0x02
    19d4:	b3 81       	ldd	r27, Z+3	; 0x03
    19d6:	8c 91       	ld	r24, X
    19d8:	80 68       	ori	r24, 0x80	; 128
    19da:	8c 93       	st	X, r24
	*_DDR |= _PINA;
    19dc:	a4 85       	ldd	r26, Z+12	; 0x0c
    19de:	b5 85       	ldd	r27, Z+13	; 0x0d
    19e0:	9c 91       	ld	r25, X
    19e2:	80 89       	ldd	r24, Z+16	; 0x10
    19e4:	89 2b       	or	r24, r25
    19e6:	8c 93       	st	X, r24
    19e8:	08 95       	ret

000019ea <_ZN13HardwareServo7EnableBEv>:
}

void HardwareServo::EnableB(){
    19ea:	fc 01       	movw	r30, r24
	*_tccrA |= _BV(COM1B1);
    19ec:	a2 81       	ldd	r26, Z+2	; 0x02
    19ee:	b3 81       	ldd	r27, Z+3	; 0x03
    19f0:	8c 91       	ld	r24, X
    19f2:	80 62       	ori	r24, 0x20	; 32
    19f4:	8c 93       	st	X, r24
	*_DDR |= _PINB;
    19f6:	a4 85       	ldd	r26, Z+12	; 0x0c
    19f8:	b5 85       	ldd	r27, Z+13	; 0x0d
    19fa:	9c 91       	ld	r25, X
    19fc:	81 89       	ldd	r24, Z+17	; 0x11
    19fe:	89 2b       	or	r24, r25
    1a00:	8c 93       	st	X, r24
    1a02:	08 95       	ret

00001a04 <_ZN13HardwareServo7EnableCEv>:
}

void HardwareServo::EnableC(){
    1a04:	fc 01       	movw	r30, r24
	*_tccrA |= _BV(COM1C1);
    1a06:	a2 81       	ldd	r26, Z+2	; 0x02
    1a08:	b3 81       	ldd	r27, Z+3	; 0x03
    1a0a:	8c 91       	ld	r24, X
    1a0c:	88 60       	ori	r24, 0x08	; 8
    1a0e:	8c 93       	st	X, r24
	*_DDR |= _PINC;
    1a10:	a4 85       	ldd	r26, Z+12	; 0x0c
    1a12:	b5 85       	ldd	r27, Z+13	; 0x0d
    1a14:	9c 91       	ld	r25, X
    1a16:	82 89       	ldd	r24, Z+18	; 0x12
    1a18:	89 2b       	or	r24, r25
    1a1a:	8c 93       	st	X, r24
    1a1c:	08 95       	ret

00001a1e <_ZN13HardwareServo8DisableAEv>:
}

void HardwareServo::DisableA(){
    1a1e:	fc 01       	movw	r30, r24
	*_tccrA &= ~_BV(COM1A1);
    1a20:	a2 81       	ldd	r26, Z+2	; 0x02
    1a22:	b3 81       	ldd	r27, Z+3	; 0x03
    1a24:	8c 91       	ld	r24, X
    1a26:	8f 77       	andi	r24, 0x7F	; 127
    1a28:	8c 93       	st	X, r24
	*_PORT &= ~_PINA;
    1a2a:	a6 85       	ldd	r26, Z+14	; 0x0e
    1a2c:	b7 85       	ldd	r27, Z+15	; 0x0f
    1a2e:	9c 91       	ld	r25, X
    1a30:	80 89       	ldd	r24, Z+16	; 0x10
    1a32:	80 95       	com	r24
    1a34:	89 23       	and	r24, r25
    1a36:	8c 93       	st	X, r24
    1a38:	08 95       	ret

00001a3a <_ZN13HardwareServo8DisableBEv>:
}

void HardwareServo::DisableB(){
    1a3a:	fc 01       	movw	r30, r24
	*_tccrA &= ~_BV(COM1B1);
    1a3c:	a2 81       	ldd	r26, Z+2	; 0x02
    1a3e:	b3 81       	ldd	r27, Z+3	; 0x03
    1a40:	8c 91       	ld	r24, X
    1a42:	8f 7d       	andi	r24, 0xDF	; 223
    1a44:	8c 93       	st	X, r24
	*_PORT &= ~_PINB;
    1a46:	a6 85       	ldd	r26, Z+14	; 0x0e
    1a48:	b7 85       	ldd	r27, Z+15	; 0x0f
    1a4a:	9c 91       	ld	r25, X
    1a4c:	81 89       	ldd	r24, Z+17	; 0x11
    1a4e:	80 95       	com	r24
    1a50:	89 23       	and	r24, r25
    1a52:	8c 93       	st	X, r24
    1a54:	08 95       	ret

00001a56 <_ZN13HardwareServo8DisableCEv>:
}

void HardwareServo::DisableC(){
    1a56:	fc 01       	movw	r30, r24
	*_tccrA &= ~_BV(COM1C1);
    1a58:	a2 81       	ldd	r26, Z+2	; 0x02
    1a5a:	b3 81       	ldd	r27, Z+3	; 0x03
    1a5c:	8c 91       	ld	r24, X
    1a5e:	87 7f       	andi	r24, 0xF7	; 247
    1a60:	8c 93       	st	X, r24
	*_PORT &= ~_PINC;	
    1a62:	a6 85       	ldd	r26, Z+14	; 0x0e
    1a64:	b7 85       	ldd	r27, Z+15	; 0x0f
    1a66:	9c 91       	ld	r25, X
    1a68:	82 89       	ldd	r24, Z+18	; 0x12
    1a6a:	80 95       	com	r24
    1a6c:	89 23       	and	r24, r25
    1a6e:	8c 93       	st	X, r24
    1a70:	08 95       	ret

00001a72 <_ZN13HardwareServo9setPulseAEj>:
}

void HardwareServo::setPulseA(uint16_t pulse){
	//*_ocrA = (uint16_t)((((uint32_t)pulse * (_maxA - _minA)) / 255 + _minA) * CPU_CONST);
	*_ocrA = (uint16_t)(pulse * CPU_CONST);
    1a72:	dc 01       	movw	r26, r24
    1a74:	16 96       	adiw	r26, 0x06	; 6
    1a76:	ed 91       	ld	r30, X+
    1a78:	fc 91       	ld	r31, X
    1a7a:	17 97       	sbiw	r26, 0x07	; 7
    1a7c:	66 0f       	add	r22, r22
    1a7e:	77 1f       	adc	r23, r23
    1a80:	71 83       	std	Z+1, r23	; 0x01
    1a82:	60 83       	st	Z, r22
    1a84:	08 95       	ret

00001a86 <_ZN13HardwareServo9setPulseBEj>:
}

void HardwareServo::setPulseB(uint16_t pulse){
	//*_ocrB = (uint16_t)((((uint32_t)pulse * (_maxB - _minB)) / 255 + _minB) * CPU_CONST);	
	*_ocrB = (uint16_t)(pulse * CPU_CONST);	
    1a86:	dc 01       	movw	r26, r24
    1a88:	18 96       	adiw	r26, 0x08	; 8
    1a8a:	ed 91       	ld	r30, X+
    1a8c:	fc 91       	ld	r31, X
    1a8e:	19 97       	sbiw	r26, 0x09	; 9
    1a90:	66 0f       	add	r22, r22
    1a92:	77 1f       	adc	r23, r23
    1a94:	71 83       	std	Z+1, r23	; 0x01
    1a96:	60 83       	st	Z, r22
    1a98:	08 95       	ret

00001a9a <_ZN13HardwareServo9setPulseCEj>:
}

void HardwareServo::setPulseC(uint16_t pulse) {
	//*_ocrC = (uint16_t)((((uint32_t)pulse * (_maxC - _minC)) / 255 + _minC) * CPU_CONST);	
	*_ocrC = (uint16_t)(pulse * CPU_CONST);
    1a9a:	dc 01       	movw	r26, r24
    1a9c:	1a 96       	adiw	r26, 0x0a	; 10
    1a9e:	ed 91       	ld	r30, X+
    1aa0:	fc 91       	ld	r31, X
    1aa2:	1b 97       	sbiw	r26, 0x0b	; 11
    1aa4:	66 0f       	add	r22, r22
    1aa6:	77 1f       	adc	r23, r23
    1aa8:	71 83       	std	Z+1, r23	; 0x01
    1aaa:	60 83       	st	Z, r22
    1aac:	08 95       	ret

00001aae <_GLOBAL__sub_I__ZN13HardwareServoC2ERVjRVhS3_S1_S1_S1_S3_S3_hhh>:
#define CLK_DIV_256 (_BV(CS02))
#define CLK_DIV_1024 (_BV(CS02) | _BV(CS00))

HardwareServo::HardwareServo(Register16 &icr, Register &tccrA, Register &tccrB, Register16 &ocrA, Register16 &ocrB, Register16 &ocrC, Register &ddr, Register &port, const uint8_t pinA, const uint8_t pinB, const uint8_t pinC)
 : _icr(&icr), _tccrA(&tccrA), _tccrB(&tccrB), _ocrA(&ocrA), _ocrB(&ocrB), _ocrC(&ocrC),
  _DDR(&ddr), _PORT(&port), _PINA(pinA), _PINB(pinB), _PINC(pinC)/*,
    1aae:	ec eb       	ldi	r30, 0xBC	; 188
    1ab0:	f7 e0       	ldi	r31, 0x07	; 7
    1ab2:	86 e8       	ldi	r24, 0x86	; 134
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	91 83       	std	Z+1, r25	; 0x01
    1ab8:	80 83       	st	Z, r24
    1aba:	80 e8       	ldi	r24, 0x80	; 128
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	93 83       	std	Z+3, r25	; 0x03
    1ac0:	82 83       	std	Z+2, r24	; 0x02
    1ac2:	81 e8       	ldi	r24, 0x81	; 129
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	95 83       	std	Z+5, r25	; 0x05
    1ac8:	84 83       	std	Z+4, r24	; 0x04
    1aca:	88 e8       	ldi	r24, 0x88	; 136
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	97 83       	std	Z+7, r25	; 0x07
    1ad0:	86 83       	std	Z+6, r24	; 0x06
    1ad2:	8a e8       	ldi	r24, 0x8A	; 138
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	91 87       	std	Z+9, r25	; 0x09
    1ad8:	80 87       	std	Z+8, r24	; 0x08
    1ada:	8c e8       	ldi	r24, 0x8C	; 140
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	93 87       	std	Z+11, r25	; 0x0b
    1ae0:	82 87       	std	Z+10, r24	; 0x0a
    1ae2:	84 e2       	ldi	r24, 0x24	; 36
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	95 87       	std	Z+13, r25	; 0x0d
    1ae8:	84 87       	std	Z+12, r24	; 0x0c
    1aea:	85 e2       	ldi	r24, 0x25	; 37
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	97 87       	std	Z+15, r25	; 0x0f
    1af0:	86 87       	std	Z+14, r24	; 0x0e
    1af2:	80 e2       	ldi	r24, 0x20	; 32
    1af4:	80 8b       	std	Z+16, r24	; 0x10
    1af6:	90 e4       	ldi	r25, 0x40	; 64
    1af8:	91 8b       	std	Z+17, r25	; 0x11
    1afa:	90 e8       	ldi	r25, 0x80	; 128
    1afc:	92 8b       	std	Z+18, r25	; 0x12
    1afe:	e9 ea       	ldi	r30, 0xA9	; 169
    1b00:	f7 e0       	ldi	r31, 0x07	; 7
    1b02:	26 e9       	ldi	r18, 0x96	; 150
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	31 83       	std	Z+1, r19	; 0x01
    1b08:	20 83       	st	Z, r18
    1b0a:	20 e9       	ldi	r18, 0x90	; 144
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	33 83       	std	Z+3, r19	; 0x03
    1b10:	22 83       	std	Z+2, r18	; 0x02
    1b12:	21 e9       	ldi	r18, 0x91	; 145
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	35 83       	std	Z+5, r19	; 0x05
    1b18:	24 83       	std	Z+4, r18	; 0x04
    1b1a:	28 e9       	ldi	r18, 0x98	; 152
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	37 83       	std	Z+7, r19	; 0x07
    1b20:	26 83       	std	Z+6, r18	; 0x06
    1b22:	2a e9       	ldi	r18, 0x9A	; 154
    1b24:	30 e0       	ldi	r19, 0x00	; 0
    1b26:	31 87       	std	Z+9, r19	; 0x09
    1b28:	20 87       	std	Z+8, r18	; 0x08
    1b2a:	2c e9       	ldi	r18, 0x9C	; 156
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	33 87       	std	Z+11, r19	; 0x0b
    1b30:	22 87       	std	Z+10, r18	; 0x0a
    1b32:	2d e2       	ldi	r18, 0x2D	; 45
    1b34:	30 e0       	ldi	r19, 0x00	; 0
    1b36:	35 87       	std	Z+13, r19	; 0x0d
    1b38:	24 87       	std	Z+12, r18	; 0x0c
    1b3a:	2e e2       	ldi	r18, 0x2E	; 46
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	37 87       	std	Z+15, r19	; 0x0f
    1b40:	26 87       	std	Z+14, r18	; 0x0e
    1b42:	28 e0       	ldi	r18, 0x08	; 8
    1b44:	20 8b       	std	Z+16, r18	; 0x10
    1b46:	90 e1       	ldi	r25, 0x10	; 16
    1b48:	91 8b       	std	Z+17, r25	; 0x11
    1b4a:	82 8b       	std	Z+18, r24	; 0x12
    1b4c:	e6 e9       	ldi	r30, 0x96	; 150
    1b4e:	f7 e0       	ldi	r31, 0x07	; 7
    1b50:	46 ea       	ldi	r20, 0xA6	; 166
    1b52:	50 e0       	ldi	r21, 0x00	; 0
    1b54:	51 83       	std	Z+1, r21	; 0x01
    1b56:	40 83       	st	Z, r20
    1b58:	40 ea       	ldi	r20, 0xA0	; 160
    1b5a:	50 e0       	ldi	r21, 0x00	; 0
    1b5c:	53 83       	std	Z+3, r21	; 0x03
    1b5e:	42 83       	std	Z+2, r20	; 0x02
    1b60:	41 ea       	ldi	r20, 0xA1	; 161
    1b62:	50 e0       	ldi	r21, 0x00	; 0
    1b64:	55 83       	std	Z+5, r21	; 0x05
    1b66:	44 83       	std	Z+4, r20	; 0x04
    1b68:	48 ea       	ldi	r20, 0xA8	; 168
    1b6a:	50 e0       	ldi	r21, 0x00	; 0
    1b6c:	57 83       	std	Z+7, r21	; 0x07
    1b6e:	46 83       	std	Z+6, r20	; 0x06
    1b70:	4a ea       	ldi	r20, 0xAA	; 170
    1b72:	50 e0       	ldi	r21, 0x00	; 0
    1b74:	51 87       	std	Z+9, r21	; 0x09
    1b76:	40 87       	std	Z+8, r20	; 0x08
    1b78:	4c ea       	ldi	r20, 0xAC	; 172
    1b7a:	50 e0       	ldi	r21, 0x00	; 0
    1b7c:	53 87       	std	Z+11, r21	; 0x0b
    1b7e:	42 87       	std	Z+10, r20	; 0x0a
    1b80:	41 e0       	ldi	r20, 0x01	; 1
    1b82:	51 e0       	ldi	r21, 0x01	; 1
    1b84:	55 87       	std	Z+13, r21	; 0x0d
    1b86:	44 87       	std	Z+12, r20	; 0x0c
    1b88:	42 e0       	ldi	r20, 0x02	; 2
    1b8a:	51 e0       	ldi	r21, 0x01	; 1
    1b8c:	57 87       	std	Z+15, r21	; 0x0f
    1b8e:	46 87       	std	Z+14, r20	; 0x0e
    1b90:	20 8b       	std	Z+16, r18	; 0x10
    1b92:	91 8b       	std	Z+17, r25	; 0x11
    1b94:	82 8b       	std	Z+18, r24	; 0x12
    1b96:	e3 e8       	ldi	r30, 0x83	; 131
    1b98:	f7 e0       	ldi	r31, 0x07	; 7
    1b9a:	46 e2       	ldi	r20, 0x26	; 38
    1b9c:	51 e0       	ldi	r21, 0x01	; 1
    1b9e:	51 83       	std	Z+1, r21	; 0x01
    1ba0:	40 83       	st	Z, r20
    1ba2:	40 e2       	ldi	r20, 0x20	; 32
    1ba4:	51 e0       	ldi	r21, 0x01	; 1
    1ba6:	53 83       	std	Z+3, r21	; 0x03
    1ba8:	42 83       	std	Z+2, r20	; 0x02
    1baa:	41 e2       	ldi	r20, 0x21	; 33
    1bac:	51 e0       	ldi	r21, 0x01	; 1
    1bae:	55 83       	std	Z+5, r21	; 0x05
    1bb0:	44 83       	std	Z+4, r20	; 0x04
    1bb2:	48 e2       	ldi	r20, 0x28	; 40
    1bb4:	51 e0       	ldi	r21, 0x01	; 1
    1bb6:	57 83       	std	Z+7, r21	; 0x07
    1bb8:	46 83       	std	Z+6, r20	; 0x06
    1bba:	4a e2       	ldi	r20, 0x2A	; 42
    1bbc:	51 e0       	ldi	r21, 0x01	; 1
    1bbe:	51 87       	std	Z+9, r21	; 0x09
    1bc0:	40 87       	std	Z+8, r20	; 0x08
    1bc2:	4c e2       	ldi	r20, 0x2C	; 44
    1bc4:	51 e0       	ldi	r21, 0x01	; 1
    1bc6:	53 87       	std	Z+11, r21	; 0x0b
    1bc8:	42 87       	std	Z+10, r20	; 0x0a
    1bca:	4a e0       	ldi	r20, 0x0A	; 10
    1bcc:	51 e0       	ldi	r21, 0x01	; 1
    1bce:	55 87       	std	Z+13, r21	; 0x0d
    1bd0:	44 87       	std	Z+12, r20	; 0x0c
    1bd2:	4b e0       	ldi	r20, 0x0B	; 11
    1bd4:	51 e0       	ldi	r21, 0x01	; 1
    1bd6:	57 87       	std	Z+15, r21	; 0x0f
    1bd8:	46 87       	std	Z+14, r20	; 0x0e
    1bda:	20 8b       	std	Z+16, r18	; 0x10
    1bdc:	91 8b       	std	Z+17, r25	; 0x11
    1bde:	82 8b       	std	Z+18, r24	; 0x12
    1be0:	08 95       	ret

00001be2 <_ZN13HardwareTimer12findPrescaleEf>:
	beginMs(us / 1000.0);
}

void HardwareTimer::beginNs(float ns){
	beginMs(ns / 1000000.0);
}
    1be2:	cf 92       	push	r12
    1be4:	df 92       	push	r13
    1be6:	ef 92       	push	r14
    1be8:	ff 92       	push	r15
    1bea:	cf 93       	push	r28
    1bec:	df 93       	push	r29
    1bee:	ec 01       	movw	r28, r24
    1bf0:	cb 01       	movw	r24, r22
    1bf2:	ba 01       	movw	r22, r20
    1bf4:	20 e0       	ldi	r18, 0x00	; 0
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	4a e7       	ldi	r20, 0x7A	; 122
    1bfa:	56 e4       	ldi	r21, 0x46	; 70
    1bfc:	0e 94 75 28 	call	0x50ea	; 0x50ea <__mulsf3>
    1c00:	20 e0       	ldi	r18, 0x00	; 0
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	40 e8       	ldi	r20, 0x80	; 128
    1c06:	5b e3       	ldi	r21, 0x3B	; 59
    1c08:	0e 94 75 28 	call	0x50ea	; 0x50ea <__mulsf3>
    1c0c:	6b 01       	movw	r12, r22
    1c0e:	7c 01       	movw	r14, r24
    1c10:	20 e0       	ldi	r18, 0x00	; 0
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	40 e8       	ldi	r20, 0x80	; 128
    1c16:	5f e3       	ldi	r21, 0x3F	; 63
    1c18:	0e 94 27 27 	call	0x4e4e	; 0x4e4e <__cmpsf2>
    1c1c:	18 16       	cp	r1, r24
    1c1e:	3c f0       	brlt	.+14     	; 0x1c2e <_ZN13HardwareTimer12findPrescaleEf+0x4c>
    1c20:	81 e0       	ldi	r24, 0x01	; 1
    1c22:	8a 87       	std	Y+10, r24	; 0x0a
    1c24:	60 e0       	ldi	r22, 0x00	; 0
    1c26:	70 e0       	ldi	r23, 0x00	; 0
    1c28:	80 e8       	ldi	r24, 0x80	; 128
    1c2a:	9f e3       	ldi	r25, 0x3F	; 63
    1c2c:	39 c0       	rjmp	.+114    	; 0x1ca0 <_ZN13HardwareTimer12findPrescaleEf+0xbe>
    1c2e:	20 e0       	ldi	r18, 0x00	; 0
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	40 e0       	ldi	r20, 0x00	; 0
    1c34:	51 e4       	ldi	r21, 0x41	; 65
    1c36:	c7 01       	movw	r24, r14
    1c38:	b6 01       	movw	r22, r12
    1c3a:	0e 94 27 27 	call	0x4e4e	; 0x4e4e <__cmpsf2>
    1c3e:	18 16       	cp	r1, r24
    1c40:	3c f0       	brlt	.+14     	; 0x1c50 <_ZN13HardwareTimer12findPrescaleEf+0x6e>
    1c42:	82 e0       	ldi	r24, 0x02	; 2
    1c44:	8a 87       	std	Y+10, r24	; 0x0a
    1c46:	60 e0       	ldi	r22, 0x00	; 0
    1c48:	70 e0       	ldi	r23, 0x00	; 0
    1c4a:	80 e0       	ldi	r24, 0x00	; 0
    1c4c:	91 e4       	ldi	r25, 0x41	; 65
    1c4e:	28 c0       	rjmp	.+80     	; 0x1ca0 <_ZN13HardwareTimer12findPrescaleEf+0xbe>
    1c50:	20 e0       	ldi	r18, 0x00	; 0
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	40 e8       	ldi	r20, 0x80	; 128
    1c56:	52 e4       	ldi	r21, 0x42	; 66
    1c58:	c7 01       	movw	r24, r14
    1c5a:	b6 01       	movw	r22, r12
    1c5c:	0e 94 27 27 	call	0x4e4e	; 0x4e4e <__cmpsf2>
    1c60:	18 16       	cp	r1, r24
    1c62:	3c f0       	brlt	.+14     	; 0x1c72 <_ZN13HardwareTimer12findPrescaleEf+0x90>
    1c64:	83 e0       	ldi	r24, 0x03	; 3
    1c66:	8a 87       	std	Y+10, r24	; 0x0a
    1c68:	60 e0       	ldi	r22, 0x00	; 0
    1c6a:	70 e0       	ldi	r23, 0x00	; 0
    1c6c:	80 e8       	ldi	r24, 0x80	; 128
    1c6e:	92 e4       	ldi	r25, 0x42	; 66
    1c70:	17 c0       	rjmp	.+46     	; 0x1ca0 <_ZN13HardwareTimer12findPrescaleEf+0xbe>
    1c72:	20 e0       	ldi	r18, 0x00	; 0
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	40 e8       	ldi	r20, 0x80	; 128
    1c78:	53 e4       	ldi	r21, 0x43	; 67
    1c7a:	c7 01       	movw	r24, r14
    1c7c:	b6 01       	movw	r22, r12
    1c7e:	0e 94 27 27 	call	0x4e4e	; 0x4e4e <__cmpsf2>
    1c82:	18 16       	cp	r1, r24
    1c84:	3c f0       	brlt	.+14     	; 0x1c94 <_ZN13HardwareTimer12findPrescaleEf+0xb2>
    1c86:	84 e0       	ldi	r24, 0x04	; 4
    1c88:	8a 87       	std	Y+10, r24	; 0x0a
    1c8a:	60 e0       	ldi	r22, 0x00	; 0
    1c8c:	70 e0       	ldi	r23, 0x00	; 0
    1c8e:	80 e8       	ldi	r24, 0x80	; 128
    1c90:	93 e4       	ldi	r25, 0x43	; 67
    1c92:	06 c0       	rjmp	.+12     	; 0x1ca0 <_ZN13HardwareTimer12findPrescaleEf+0xbe>
    1c94:	85 e0       	ldi	r24, 0x05	; 5
    1c96:	8a 87       	std	Y+10, r24	; 0x0a
    1c98:	60 e0       	ldi	r22, 0x00	; 0
    1c9a:	70 e0       	ldi	r23, 0x00	; 0
    1c9c:	80 e8       	ldi	r24, 0x80	; 128
    1c9e:	94 e4       	ldi	r25, 0x44	; 68
    1ca0:	df 91       	pop	r29
    1ca2:	cf 91       	pop	r28
    1ca4:	ff 90       	pop	r15
    1ca6:	ef 90       	pop	r14
    1ca8:	df 90       	pop	r13
    1caa:	cf 90       	pop	r12
    1cac:	08 95       	ret

00001cae <_ZN13HardwareTimer7beginMsEf>:
    1cae:	8f 92       	push	r8
    1cb0:	9f 92       	push	r9
    1cb2:	af 92       	push	r10
    1cb4:	bf 92       	push	r11
    1cb6:	cf 92       	push	r12
    1cb8:	df 92       	push	r13
    1cba:	ef 92       	push	r14
    1cbc:	ff 92       	push	r15
    1cbe:	cf 93       	push	r28
    1cc0:	df 93       	push	r29
    1cc2:	ec 01       	movw	r28, r24
    1cc4:	6a 01       	movw	r12, r20
    1cc6:	7b 01       	movw	r14, r22
    1cc8:	e8 81       	ld	r30, Y
    1cca:	f9 81       	ldd	r31, Y+1	; 0x01
    1ccc:	82 e0       	ldi	r24, 0x02	; 2
    1cce:	80 83       	st	Z, r24
    1cd0:	ea 81       	ldd	r30, Y+2	; 0x02
    1cd2:	fb 81       	ldd	r31, Y+3	; 0x03
    1cd4:	10 82       	st	Z, r1
    1cd6:	ec 81       	ldd	r30, Y+4	; 0x04
    1cd8:	fd 81       	ldd	r31, Y+5	; 0x05
    1cda:	80 83       	st	Z, r24
    1cdc:	78 94       	sei
    1cde:	ce 01       	movw	r24, r28
    1ce0:	80 df       	rcall	.-256    	; 0x1be2 <_ZN13HardwareTimer12findPrescaleEf>
    1ce2:	4b 01       	movw	r8, r22
    1ce4:	5c 01       	movw	r10, r24
    1ce6:	20 e0       	ldi	r18, 0x00	; 0
    1ce8:	34 e2       	ldi	r19, 0x24	; 36
    1cea:	44 e7       	ldi	r20, 0x74	; 116
    1cec:	5b e4       	ldi	r21, 0x4B	; 75
    1cee:	c7 01       	movw	r24, r14
    1cf0:	b6 01       	movw	r22, r12
    1cf2:	0e 94 75 28 	call	0x50ea	; 0x50ea <__mulsf3>
    1cf6:	6b 01       	movw	r12, r22
    1cf8:	7c 01       	movw	r14, r24
    1cfa:	20 e0       	ldi	r18, 0x00	; 0
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	4a e7       	ldi	r20, 0x7A	; 122
    1d00:	54 e4       	ldi	r21, 0x44	; 68
    1d02:	c5 01       	movw	r24, r10
    1d04:	b4 01       	movw	r22, r8
    1d06:	0e 94 75 28 	call	0x50ea	; 0x50ea <__mulsf3>
    1d0a:	9b 01       	movw	r18, r22
    1d0c:	ac 01       	movw	r20, r24
    1d0e:	c7 01       	movw	r24, r14
    1d10:	b6 01       	movw	r22, r12
    1d12:	0e 94 2b 27 	call	0x4e56	; 0x4e56 <__divsf3>
    1d16:	20 e0       	ldi	r18, 0x00	; 0
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	40 e8       	ldi	r20, 0x80	; 128
    1d1c:	5f e3       	ldi	r21, 0x3F	; 63
    1d1e:	0e 94 c2 26 	call	0x4d84	; 0x4d84 <__subsf3>
    1d22:	6b 01       	movw	r12, r22
    1d24:	7c 01       	movw	r14, r24
    1d26:	20 e0       	ldi	r18, 0x00	; 0
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	4f e7       	ldi	r20, 0x7F	; 127
    1d2c:	53 e4       	ldi	r21, 0x43	; 67
    1d2e:	0e 94 71 28 	call	0x50e2	; 0x50e2 <__gesf2>
    1d32:	18 16       	cp	r1, r24
    1d34:	2c f4       	brge	.+10     	; 0x1d40 <_ZN13HardwareTimer7beginMsEf+0x92>
    1d36:	e8 85       	ldd	r30, Y+8	; 0x08
    1d38:	f9 85       	ldd	r31, Y+9	; 0x09
    1d3a:	8f ef       	ldi	r24, 0xFF	; 255
    1d3c:	80 83       	st	Z, r24
    1d3e:	1b c0       	rjmp	.+54     	; 0x1d76 <_ZN13HardwareTimer7beginMsEf+0xc8>
    1d40:	20 e0       	ldi	r18, 0x00	; 0
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	a9 01       	movw	r20, r18
    1d46:	c7 01       	movw	r24, r14
    1d48:	b6 01       	movw	r22, r12
    1d4a:	0e 94 27 27 	call	0x4e4e	; 0x4e4e <__cmpsf2>
    1d4e:	88 23       	and	r24, r24
    1d50:	24 f4       	brge	.+8      	; 0x1d5a <_ZN13HardwareTimer7beginMsEf+0xac>
    1d52:	e8 85       	ldd	r30, Y+8	; 0x08
    1d54:	f9 85       	ldd	r31, Y+9	; 0x09
    1d56:	10 82       	st	Z, r1
    1d58:	0e c0       	rjmp	.+28     	; 0x1d76 <_ZN13HardwareTimer7beginMsEf+0xc8>
    1d5a:	08 84       	ldd	r0, Y+8	; 0x08
    1d5c:	d9 85       	ldd	r29, Y+9	; 0x09
    1d5e:	c0 2d       	mov	r28, r0
    1d60:	20 e0       	ldi	r18, 0x00	; 0
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	40 e0       	ldi	r20, 0x00	; 0
    1d66:	5f e3       	ldi	r21, 0x3F	; 63
    1d68:	c7 01       	movw	r24, r14
    1d6a:	b6 01       	movw	r22, r12
    1d6c:	0e 94 c3 26 	call	0x4d86	; 0x4d86 <__addsf3>
    1d70:	0e 94 93 27 	call	0x4f26	; 0x4f26 <__fixunssfsi>
    1d74:	68 83       	st	Y, r22
    1d76:	df 91       	pop	r29
    1d78:	cf 91       	pop	r28
    1d7a:	ff 90       	pop	r15
    1d7c:	ef 90       	pop	r14
    1d7e:	df 90       	pop	r13
    1d80:	cf 90       	pop	r12
    1d82:	bf 90       	pop	r11
    1d84:	af 90       	pop	r10
    1d86:	9f 90       	pop	r9
    1d88:	8f 90       	pop	r8
    1d8a:	08 95       	ret

00001d8c <_ZN13HardwareTimer5startEh>:

void HardwareTimer::start(uint8_t ticks/*= 1*/){
    1d8c:	fc 01       	movw	r30, r24
	*_tccrB = 0; //Disable timer
    1d8e:	a2 81       	ldd	r26, Z+2	; 0x02
    1d90:	b3 81       	ldd	r27, Z+3	; 0x03
    1d92:	1c 92       	st	X, r1
	ovfRemaining = ticks;
    1d94:	63 87       	std	Z+11, r22	; 0x0b
	*_tcnt = 0; //Reset timer
    1d96:	a6 81       	ldd	r26, Z+6	; 0x06
    1d98:	b7 81       	ldd	r27, Z+7	; 0x07
    1d9a:	1c 92       	st	X, r1
	*_tccrB = CLK_DIV_1024; 
    1d9c:	02 80       	ldd	r0, Z+2	; 0x02
    1d9e:	f3 81       	ldd	r31, Z+3	; 0x03
    1da0:	e0 2d       	mov	r30, r0
    1da2:	85 e0       	ldi	r24, 0x05	; 5
    1da4:	80 83       	st	Z, r24
    1da6:	08 95       	ret

00001da8 <_ZN13HardwareTimer8finishedEv>:
}

bool HardwareTimer::finished(){
	return ovfRemaining == 0;
    1da8:	fc 01       	movw	r30, r24
    1daa:	93 85       	ldd	r25, Z+11	; 0x0b
    1dac:	81 e0       	ldi	r24, 0x01	; 1
    1dae:	91 11       	cpse	r25, r1
    1db0:	80 e0       	ldi	r24, 0x00	; 0
}
    1db2:	08 95       	ret

00001db4 <_ZN13HardwareTimer13waitForFinishEv>:

void HardwareTimer::waitForFinish(){
    1db4:	fc 01       	movw	r30, r24
	while(ovfRemaining != 0){
    1db6:	93 85       	ldd	r25, Z+11	; 0x0b
    1db8:	91 11       	cpse	r25, r1
    1dba:	fd cf       	rjmp	.-6      	; 0x1db6 <_ZN13HardwareTimer13waitForFinishEv+0x2>
	}
}
    1dbc:	08 95       	ret

00001dbe <_ZN13HardwareTimer14isr_timer_compEv>:

void HardwareTimer::isr_timer_comp(){
    1dbe:	fc 01       	movw	r30, r24
	if(ovfRemaining > 0) ovfRemaining--;
    1dc0:	83 85       	ldd	r24, Z+11	; 0x0b
    1dc2:	88 23       	and	r24, r24
    1dc4:	19 f0       	breq	.+6      	; 0x1dcc <_ZN13HardwareTimer14isr_timer_compEv+0xe>
    1dc6:	83 85       	ldd	r24, Z+11	; 0x0b
    1dc8:	81 50       	subi	r24, 0x01	; 1
    1dca:	83 87       	std	Z+11, r24	; 0x0b
    1dcc:	08 95       	ret

00001dce <__vector_21>:
}

#ifdef USE_TIMER_0
HardwareTimer Timer0(TCCR0A, TCCR0B, TIMSK0, TCNT0, OCR0A);

ISR(TIMER0_COMPA_vect){
    1dce:	1f 92       	push	r1
    1dd0:	0f 92       	push	r0
    1dd2:	0f b6       	in	r0, 0x3f	; 63
    1dd4:	0f 92       	push	r0
    1dd6:	11 24       	eor	r1, r1
    1dd8:	0b b6       	in	r0, 0x3b	; 59
    1dda:	0f 92       	push	r0
    1ddc:	2f 93       	push	r18
    1dde:	3f 93       	push	r19
    1de0:	4f 93       	push	r20
    1de2:	5f 93       	push	r21
    1de4:	6f 93       	push	r22
    1de6:	7f 93       	push	r23
    1de8:	8f 93       	push	r24
    1dea:	9f 93       	push	r25
    1dec:	af 93       	push	r26
    1dee:	bf 93       	push	r27
    1df0:	ef 93       	push	r30
    1df2:	ff 93       	push	r31
	Timer0.isr_timer_comp();
    1df4:	8b ed       	ldi	r24, 0xDB	; 219
    1df6:	97 e0       	ldi	r25, 0x07	; 7
    1df8:	e2 df       	rcall	.-60     	; 0x1dbe <_ZN13HardwareTimer14isr_timer_compEv>
}
    1dfa:	ff 91       	pop	r31
    1dfc:	ef 91       	pop	r30
    1dfe:	bf 91       	pop	r27
    1e00:	af 91       	pop	r26
    1e02:	9f 91       	pop	r25
    1e04:	8f 91       	pop	r24
    1e06:	7f 91       	pop	r23
    1e08:	6f 91       	pop	r22
    1e0a:	5f 91       	pop	r21
    1e0c:	4f 91       	pop	r20
    1e0e:	3f 91       	pop	r19
    1e10:	2f 91       	pop	r18
    1e12:	0f 90       	pop	r0
    1e14:	0b be       	out	0x3b, r0	; 59
    1e16:	0f 90       	pop	r0
    1e18:	0f be       	out	0x3f, r0	; 63
    1e1a:	0f 90       	pop	r0
    1e1c:	1f 90       	pop	r1
    1e1e:	18 95       	reti

00001e20 <__vector_13>:
#endif

#ifdef USE_TIMER_2
HardwareTimer Timer2(TCCR2A, TCCR2B, TIMSK2, TCNT2, OCR2A);

ISR(TIMER2_COMPA_vect){
    1e20:	1f 92       	push	r1
    1e22:	0f 92       	push	r0
    1e24:	0f b6       	in	r0, 0x3f	; 63
    1e26:	0f 92       	push	r0
    1e28:	11 24       	eor	r1, r1
    1e2a:	0b b6       	in	r0, 0x3b	; 59
    1e2c:	0f 92       	push	r0
    1e2e:	2f 93       	push	r18
    1e30:	3f 93       	push	r19
    1e32:	4f 93       	push	r20
    1e34:	5f 93       	push	r21
    1e36:	6f 93       	push	r22
    1e38:	7f 93       	push	r23
    1e3a:	8f 93       	push	r24
    1e3c:	9f 93       	push	r25
    1e3e:	af 93       	push	r26
    1e40:	bf 93       	push	r27
    1e42:	ef 93       	push	r30
    1e44:	ff 93       	push	r31
	Timer2.isr_timer_comp();
    1e46:	8f ec       	ldi	r24, 0xCF	; 207
    1e48:	97 e0       	ldi	r25, 0x07	; 7
    1e4a:	b9 df       	rcall	.-142    	; 0x1dbe <_ZN13HardwareTimer14isr_timer_compEv>
}
    1e4c:	ff 91       	pop	r31
    1e4e:	ef 91       	pop	r30
    1e50:	bf 91       	pop	r27
    1e52:	af 91       	pop	r26
    1e54:	9f 91       	pop	r25
    1e56:	8f 91       	pop	r24
    1e58:	7f 91       	pop	r23
    1e5a:	6f 91       	pop	r22
    1e5c:	5f 91       	pop	r21
    1e5e:	4f 91       	pop	r20
    1e60:	3f 91       	pop	r19
    1e62:	2f 91       	pop	r18
    1e64:	0f 90       	pop	r0
    1e66:	0b be       	out	0x3b, r0	; 59
    1e68:	0f 90       	pop	r0
    1e6a:	0f be       	out	0x3f, r0	; 63
    1e6c:	0f 90       	pop	r0
    1e6e:	1f 90       	pop	r1
    1e70:	18 95       	reti

00001e72 <_GLOBAL__sub_I__ZN13HardwareTimerC2ERVhS1_S1_S1_S1_>:
#define CLK_DIV_64 (_BV(CS01) | _BV(CS00))
#define CLK_DIV_256 (_BV(CS02))
#define CLK_DIV_1024 (_BV(CS02) | _BV(CS00))

HardwareTimer::HardwareTimer(Register &tccrA, Register &tccrB, Register &timsk, Register &tcnt, Register &ocra)
: _tccrA(&tccrA), _tccrB(&tccrB), _timsk(&timsk), _tcnt(&tcnt), _ocra(&ocra)
    1e72:	eb ed       	ldi	r30, 0xDB	; 219
    1e74:	f7 e0       	ldi	r31, 0x07	; 7
    1e76:	84 e4       	ldi	r24, 0x44	; 68
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	91 83       	std	Z+1, r25	; 0x01
    1e7c:	80 83       	st	Z, r24
    1e7e:	85 e4       	ldi	r24, 0x45	; 69
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	93 83       	std	Z+3, r25	; 0x03
    1e84:	82 83       	std	Z+2, r24	; 0x02
    1e86:	8e e6       	ldi	r24, 0x6E	; 110
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	95 83       	std	Z+5, r25	; 0x05
    1e8c:	84 83       	std	Z+4, r24	; 0x04
    1e8e:	86 e4       	ldi	r24, 0x46	; 70
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	97 83       	std	Z+7, r25	; 0x07
    1e94:	86 83       	std	Z+6, r24	; 0x06
    1e96:	87 e4       	ldi	r24, 0x47	; 71
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	91 87       	std	Z+9, r25	; 0x09
    1e9c:	80 87       	std	Z+8, r24	; 0x08
    1e9e:	ef ec       	ldi	r30, 0xCF	; 207
    1ea0:	f7 e0       	ldi	r31, 0x07	; 7
    1ea2:	80 eb       	ldi	r24, 0xB0	; 176
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	91 83       	std	Z+1, r25	; 0x01
    1ea8:	80 83       	st	Z, r24
    1eaa:	81 eb       	ldi	r24, 0xB1	; 177
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	93 83       	std	Z+3, r25	; 0x03
    1eb0:	82 83       	std	Z+2, r24	; 0x02
    1eb2:	80 e7       	ldi	r24, 0x70	; 112
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	95 83       	std	Z+5, r25	; 0x05
    1eb8:	84 83       	std	Z+4, r24	; 0x04
    1eba:	82 eb       	ldi	r24, 0xB2	; 178
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	97 83       	std	Z+7, r25	; 0x07
    1ec0:	86 83       	std	Z+6, r24	; 0x06
    1ec2:	83 eb       	ldi	r24, 0xB3	; 179
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	91 87       	std	Z+9, r25	; 0x09
    1ec8:	80 87       	std	Z+8, r24	; 0x08
    1eca:	08 95       	ret

00001ecc <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1ecc:	10 92 54 08 	sts	0x0854, r1	; 0x800854 <twi_state>
    1ed0:	81 e0       	ldi	r24, 0x01	; 1
    1ed2:	80 93 52 08 	sts	0x0852, r24	; 0x800852 <twi_sendStop>
    1ed6:	10 92 51 08 	sts	0x0851, r1	; 0x800851 <twi_inRepStart>
    1eda:	8b b1       	in	r24, 0x0b	; 11
    1edc:	83 60       	ori	r24, 0x03	; 3
    1ede:	8b b9       	out	0x0b, r24	; 11
    1ee0:	e9 eb       	ldi	r30, 0xB9	; 185
    1ee2:	f0 e0       	ldi	r31, 0x00	; 0
    1ee4:	80 81       	ld	r24, Z
    1ee6:	8e 7f       	andi	r24, 0xFE	; 254
    1ee8:	80 83       	st	Z, r24
    1eea:	80 81       	ld	r24, Z
    1eec:	8d 7f       	andi	r24, 0xFD	; 253
    1eee:	80 83       	st	Z, r24
    1ef0:	88 e4       	ldi	r24, 0x48	; 72
    1ef2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    1ef6:	85 e4       	ldi	r24, 0x45	; 69
    1ef8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1efc:	08 95       	ret

00001efe <twi_setFrequency>:
    1efe:	9b 01       	movw	r18, r22
    1f00:	ac 01       	movw	r20, r24
    1f02:	60 e0       	ldi	r22, 0x00	; 0
    1f04:	74 e2       	ldi	r23, 0x24	; 36
    1f06:	84 ef       	ldi	r24, 0xF4	; 244
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	0e 94 e7 28 	call	0x51ce	; 0x51ce <__udivmodsi4>
    1f0e:	da 01       	movw	r26, r20
    1f10:	c9 01       	movw	r24, r18
    1f12:	40 97       	sbiw	r24, 0x10	; 16
    1f14:	a1 09       	sbc	r26, r1
    1f16:	b1 09       	sbc	r27, r1
    1f18:	b6 95       	lsr	r27
    1f1a:	a7 95       	ror	r26
    1f1c:	97 95       	ror	r25
    1f1e:	87 95       	ror	r24
    1f20:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    1f24:	08 95       	ret

00001f26 <twi_readFrom>:
    1f26:	41 32       	cpi	r20, 0x21	; 33
    1f28:	08 f0       	brcs	.+2      	; 0x1f2c <twi_readFrom+0x6>
    1f2a:	4c c0       	rjmp	.+152    	; 0x1fc4 <twi_readFrom+0x9e>
    1f2c:	90 91 54 08 	lds	r25, 0x0854	; 0x800854 <twi_state>
    1f30:	91 11       	cpse	r25, r1
    1f32:	fc cf       	rjmp	.-8      	; 0x1f2c <twi_readFrom+0x6>
    1f34:	31 e0       	ldi	r19, 0x01	; 1
    1f36:	30 93 54 08 	sts	0x0854, r19	; 0x800854 <twi_state>
    1f3a:	20 93 52 08 	sts	0x0852, r18	; 0x800852 <twi_sendStop>
    1f3e:	2f ef       	ldi	r18, 0xFF	; 255
    1f40:	20 93 e7 07 	sts	0x07E7, r18	; 0x8007e7 <twi_error>
    1f44:	10 92 2c 08 	sts	0x082C, r1	; 0x80082c <twi_masterBufferIndex>
    1f48:	24 0f       	add	r18, r20
    1f4a:	20 93 2b 08 	sts	0x082B, r18	; 0x80082b <twi_masterBufferLength>
    1f4e:	30 93 53 08 	sts	0x0853, r19	; 0x800853 <twi_slarw>
    1f52:	20 91 53 08 	lds	r18, 0x0853	; 0x800853 <twi_slarw>
    1f56:	88 0f       	add	r24, r24
    1f58:	82 2b       	or	r24, r18
    1f5a:	80 93 53 08 	sts	0x0853, r24	; 0x800853 <twi_slarw>
    1f5e:	80 91 51 08 	lds	r24, 0x0851	; 0x800851 <twi_inRepStart>
    1f62:	81 30       	cpi	r24, 0x01	; 1
    1f64:	81 f4       	brne	.+32     	; 0x1f86 <twi_readFrom+0x60>
    1f66:	10 92 51 08 	sts	0x0851, r1	; 0x800851 <twi_inRepStart>
    1f6a:	ab eb       	ldi	r26, 0xBB	; 187
    1f6c:	b0 e0       	ldi	r27, 0x00	; 0
    1f6e:	ec eb       	ldi	r30, 0xBC	; 188
    1f70:	f0 e0       	ldi	r31, 0x00	; 0
    1f72:	80 91 53 08 	lds	r24, 0x0853	; 0x800853 <twi_slarw>
    1f76:	8c 93       	st	X, r24
    1f78:	80 81       	ld	r24, Z
    1f7a:	83 fd       	sbrc	r24, 3
    1f7c:	fa cf       	rjmp	.-12     	; 0x1f72 <twi_readFrom+0x4c>
    1f7e:	85 ec       	ldi	r24, 0xC5	; 197
    1f80:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1f84:	03 c0       	rjmp	.+6      	; 0x1f8c <twi_readFrom+0x66>
    1f86:	85 ee       	ldi	r24, 0xE5	; 229
    1f88:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1f8c:	80 91 54 08 	lds	r24, 0x0854	; 0x800854 <twi_state>
    1f90:	81 30       	cpi	r24, 0x01	; 1
    1f92:	e1 f3       	breq	.-8      	; 0x1f8c <twi_readFrom+0x66>
    1f94:	80 91 2c 08 	lds	r24, 0x082C	; 0x80082c <twi_masterBufferIndex>
    1f98:	84 17       	cp	r24, r20
    1f9a:	10 f4       	brcc	.+4      	; 0x1fa0 <twi_readFrom+0x7a>
    1f9c:	40 91 2c 08 	lds	r20, 0x082C	; 0x80082c <twi_masterBufferIndex>
    1fa0:	44 23       	and	r20, r20
    1fa2:	89 f0       	breq	.+34     	; 0x1fc6 <twi_readFrom+0xa0>
    1fa4:	ed e2       	ldi	r30, 0x2D	; 45
    1fa6:	f8 e0       	ldi	r31, 0x08	; 8
    1fa8:	a6 2f       	mov	r26, r22
    1faa:	b7 2f       	mov	r27, r23
    1fac:	2f ef       	ldi	r18, 0xFF	; 255
    1fae:	24 0f       	add	r18, r20
    1fb0:	30 e0       	ldi	r19, 0x00	; 0
    1fb2:	22 5d       	subi	r18, 0xD2	; 210
    1fb4:	37 4f       	sbci	r19, 0xF7	; 247
    1fb6:	81 91       	ld	r24, Z+
    1fb8:	8d 93       	st	X+, r24
    1fba:	e2 17       	cp	r30, r18
    1fbc:	f3 07       	cpc	r31, r19
    1fbe:	d9 f7       	brne	.-10     	; 0x1fb6 <twi_readFrom+0x90>
    1fc0:	94 2f       	mov	r25, r20
    1fc2:	01 c0       	rjmp	.+2      	; 0x1fc6 <twi_readFrom+0xa0>
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	89 2f       	mov	r24, r25
    1fc8:	08 95       	ret

00001fca <twi_writeTo>:
    1fca:	0f 93       	push	r16
    1fcc:	41 32       	cpi	r20, 0x21	; 33
    1fce:	08 f0       	brcs	.+2      	; 0x1fd2 <twi_writeTo+0x8>
    1fd0:	57 c0       	rjmp	.+174    	; 0x2080 <twi_writeTo+0xb6>
    1fd2:	30 91 54 08 	lds	r19, 0x0854	; 0x800854 <twi_state>
    1fd6:	31 11       	cpse	r19, r1
    1fd8:	fc cf       	rjmp	.-8      	; 0x1fd2 <twi_writeTo+0x8>
    1fda:	92 e0       	ldi	r25, 0x02	; 2
    1fdc:	90 93 54 08 	sts	0x0854, r25	; 0x800854 <twi_state>
    1fe0:	00 93 52 08 	sts	0x0852, r16	; 0x800852 <twi_sendStop>
    1fe4:	9f ef       	ldi	r25, 0xFF	; 255
    1fe6:	90 93 e7 07 	sts	0x07E7, r25	; 0x8007e7 <twi_error>
    1fea:	10 92 2c 08 	sts	0x082C, r1	; 0x80082c <twi_masterBufferIndex>
    1fee:	40 93 2b 08 	sts	0x082B, r20	; 0x80082b <twi_masterBufferLength>
    1ff2:	44 23       	and	r20, r20
    1ff4:	71 f0       	breq	.+28     	; 0x2012 <twi_writeTo+0x48>
    1ff6:	fb 01       	movw	r30, r22
    1ff8:	ad e2       	ldi	r26, 0x2D	; 45
    1ffa:	b8 e0       	ldi	r27, 0x08	; 8
    1ffc:	41 50       	subi	r20, 0x01	; 1
    1ffe:	50 e0       	ldi	r21, 0x00	; 0
    2000:	4f 5f       	subi	r20, 0xFF	; 255
    2002:	5f 4f       	sbci	r21, 0xFF	; 255
    2004:	64 0f       	add	r22, r20
    2006:	75 1f       	adc	r23, r21
    2008:	91 91       	ld	r25, Z+
    200a:	9d 93       	st	X+, r25
    200c:	e6 17       	cp	r30, r22
    200e:	f7 07       	cpc	r31, r23
    2010:	d9 f7       	brne	.-10     	; 0x2008 <twi_writeTo+0x3e>
    2012:	10 92 53 08 	sts	0x0853, r1	; 0x800853 <twi_slarw>
    2016:	90 91 53 08 	lds	r25, 0x0853	; 0x800853 <twi_slarw>
    201a:	88 0f       	add	r24, r24
    201c:	89 2b       	or	r24, r25
    201e:	80 93 53 08 	sts	0x0853, r24	; 0x800853 <twi_slarw>
    2022:	80 91 51 08 	lds	r24, 0x0851	; 0x800851 <twi_inRepStart>
    2026:	81 30       	cpi	r24, 0x01	; 1
    2028:	81 f4       	brne	.+32     	; 0x204a <twi_writeTo+0x80>
    202a:	10 92 51 08 	sts	0x0851, r1	; 0x800851 <twi_inRepStart>
    202e:	ab eb       	ldi	r26, 0xBB	; 187
    2030:	b0 e0       	ldi	r27, 0x00	; 0
    2032:	ec eb       	ldi	r30, 0xBC	; 188
    2034:	f0 e0       	ldi	r31, 0x00	; 0
    2036:	80 91 53 08 	lds	r24, 0x0853	; 0x800853 <twi_slarw>
    203a:	8c 93       	st	X, r24
    203c:	80 81       	ld	r24, Z
    203e:	83 fd       	sbrc	r24, 3
    2040:	fa cf       	rjmp	.-12     	; 0x2036 <twi_writeTo+0x6c>
    2042:	85 ec       	ldi	r24, 0xC5	; 197
    2044:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2048:	03 c0       	rjmp	.+6      	; 0x2050 <twi_writeTo+0x86>
    204a:	85 ee       	ldi	r24, 0xE5	; 229
    204c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2050:	22 23       	and	r18, r18
    2052:	41 f0       	breq	.+16     	; 0x2064 <twi_writeTo+0x9a>
    2054:	80 91 54 08 	lds	r24, 0x0854	; 0x800854 <twi_state>
    2058:	82 30       	cpi	r24, 0x02	; 2
    205a:	21 f4       	brne	.+8      	; 0x2064 <twi_writeTo+0x9a>
    205c:	80 91 54 08 	lds	r24, 0x0854	; 0x800854 <twi_state>
    2060:	82 30       	cpi	r24, 0x02	; 2
    2062:	e1 f3       	breq	.-8      	; 0x205c <twi_writeTo+0x92>
    2064:	80 91 e7 07 	lds	r24, 0x07E7	; 0x8007e7 <twi_error>
    2068:	8f 3f       	cpi	r24, 0xFF	; 255
    206a:	79 f0       	breq	.+30     	; 0x208a <twi_writeTo+0xc0>
    206c:	80 91 e7 07 	lds	r24, 0x07E7	; 0x8007e7 <twi_error>
    2070:	80 32       	cpi	r24, 0x20	; 32
    2072:	41 f0       	breq	.+16     	; 0x2084 <twi_writeTo+0xba>
    2074:	80 91 e7 07 	lds	r24, 0x07E7	; 0x8007e7 <twi_error>
    2078:	80 33       	cpi	r24, 0x30	; 48
    207a:	31 f0       	breq	.+12     	; 0x2088 <twi_writeTo+0xbe>
    207c:	34 e0       	ldi	r19, 0x04	; 4
    207e:	05 c0       	rjmp	.+10     	; 0x208a <twi_writeTo+0xc0>
    2080:	31 e0       	ldi	r19, 0x01	; 1
    2082:	03 c0       	rjmp	.+6      	; 0x208a <twi_writeTo+0xc0>
    2084:	32 e0       	ldi	r19, 0x02	; 2
    2086:	01 c0       	rjmp	.+2      	; 0x208a <twi_writeTo+0xc0>
    2088:	33 e0       	ldi	r19, 0x03	; 3
    208a:	83 2f       	mov	r24, r19
    208c:	0f 91       	pop	r16
    208e:	08 95       	ret

00002090 <twi_transmit>:
    2090:	40 91 09 08 	lds	r20, 0x0809	; 0x800809 <twi_txBufferLength>
    2094:	26 2f       	mov	r18, r22
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	24 0f       	add	r18, r20
    209a:	31 1d       	adc	r19, r1
    209c:	21 32       	cpi	r18, 0x21	; 33
    209e:	31 05       	cpc	r19, r1
    20a0:	ec f4       	brge	.+58     	; 0x20dc <twi_transmit+0x4c>
    20a2:	20 91 54 08 	lds	r18, 0x0854	; 0x800854 <twi_state>
    20a6:	24 30       	cpi	r18, 0x04	; 4
    20a8:	d9 f4       	brne	.+54     	; 0x20e0 <twi_transmit+0x50>
    20aa:	66 23       	and	r22, r22
    20ac:	81 f0       	breq	.+32     	; 0x20ce <twi_transmit+0x3e>
    20ae:	a8 2f       	mov	r26, r24
    20b0:	b9 2f       	mov	r27, r25
    20b2:	80 e0       	ldi	r24, 0x00	; 0
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	30 91 09 08 	lds	r19, 0x0809	; 0x800809 <twi_txBufferLength>
    20ba:	2d 91       	ld	r18, X+
    20bc:	fc 01       	movw	r30, r24
    20be:	e5 5f       	subi	r30, 0xF5	; 245
    20c0:	f7 4f       	sbci	r31, 0xF7	; 247
    20c2:	e3 0f       	add	r30, r19
    20c4:	f1 1d       	adc	r31, r1
    20c6:	20 83       	st	Z, r18
    20c8:	01 96       	adiw	r24, 0x01	; 1
    20ca:	86 17       	cp	r24, r22
    20cc:	a0 f3       	brcs	.-24     	; 0x20b6 <twi_transmit+0x26>
    20ce:	80 91 09 08 	lds	r24, 0x0809	; 0x800809 <twi_txBufferLength>
    20d2:	68 0f       	add	r22, r24
    20d4:	60 93 09 08 	sts	0x0809, r22	; 0x800809 <twi_txBufferLength>
    20d8:	80 e0       	ldi	r24, 0x00	; 0
    20da:	08 95       	ret
    20dc:	81 e0       	ldi	r24, 0x01	; 1
    20de:	08 95       	ret
    20e0:	82 e0       	ldi	r24, 0x02	; 2
    20e2:	08 95       	ret

000020e4 <twi_attachSlaveRxEvent>:
    20e4:	90 93 4e 08 	sts	0x084E, r25	; 0x80084e <twi_onSlaveReceive+0x1>
    20e8:	80 93 4d 08 	sts	0x084D, r24	; 0x80084d <twi_onSlaveReceive>
    20ec:	08 95       	ret

000020ee <twi_attachSlaveTxEvent>:
    20ee:	90 93 50 08 	sts	0x0850, r25	; 0x800850 <twi_onSlaveTransmit+0x1>
    20f2:	80 93 4f 08 	sts	0x084F, r24	; 0x80084f <twi_onSlaveTransmit>
    20f6:	08 95       	ret

000020f8 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    20f8:	85 ed       	ldi	r24, 0xD5	; 213
    20fa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    20fe:	ec eb       	ldi	r30, 0xBC	; 188
    2100:	f0 e0       	ldi	r31, 0x00	; 0
    2102:	80 81       	ld	r24, Z
    2104:	84 fd       	sbrc	r24, 4
    2106:	fd cf       	rjmp	.-6      	; 0x2102 <twi_stop+0xa>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    2108:	10 92 54 08 	sts	0x0854, r1	; 0x800854 <twi_state>
    210c:	08 95       	ret

0000210e <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    210e:	85 ec       	ldi	r24, 0xC5	; 197
    2110:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // update twi state
  twi_state = TWI_READY;
    2114:	10 92 54 08 	sts	0x0854, r1	; 0x800854 <twi_state>
    2118:	08 95       	ret

0000211a <__vector_39>:
}

ISR(TWI_vect)
{
    211a:	1f 92       	push	r1
    211c:	0f 92       	push	r0
    211e:	0f b6       	in	r0, 0x3f	; 63
    2120:	0f 92       	push	r0
    2122:	11 24       	eor	r1, r1
    2124:	0b b6       	in	r0, 0x3b	; 59
    2126:	0f 92       	push	r0
    2128:	2f 93       	push	r18
    212a:	3f 93       	push	r19
    212c:	4f 93       	push	r20
    212e:	5f 93       	push	r21
    2130:	6f 93       	push	r22
    2132:	7f 93       	push	r23
    2134:	8f 93       	push	r24
    2136:	9f 93       	push	r25
    2138:	af 93       	push	r26
    213a:	bf 93       	push	r27
    213c:	ef 93       	push	r30
    213e:	ff 93       	push	r31
  switch(TW_STATUS){
    2140:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    2144:	88 7f       	andi	r24, 0xF8	; 248
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	89 3c       	cpi	r24, 0xC9	; 201
    214a:	91 05       	cpc	r25, r1
    214c:	08 f0       	brcs	.+2      	; 0x2150 <__vector_39+0x36>
    214e:	ef c0       	rjmp	.+478    	; 0x232e <__stack+0x12f>
    2150:	fc 01       	movw	r30, r24
    2152:	88 27       	eor	r24, r24
    2154:	ee 58       	subi	r30, 0x8E	; 142
    2156:	ff 4f       	sbci	r31, 0xFF	; 255
    2158:	8f 4f       	sbci	r24, 0xFF	; 255
    215a:	0c 94 09 29 	jmp	0x5212	; 0x5212 <__tablejump2__>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    215e:	80 91 53 08 	lds	r24, 0x0853	; 0x800853 <twi_slarw>
    2162:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2166:	85 ec       	ldi	r24, 0xC5	; 197
    2168:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    216c:	e0 c0       	rjmp	.+448    	; 0x232e <__stack+0x12f>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    216e:	90 91 2c 08 	lds	r25, 0x082C	; 0x80082c <twi_masterBufferIndex>
    2172:	80 91 2b 08 	lds	r24, 0x082B	; 0x80082b <twi_masterBufferLength>
    2176:	98 17       	cp	r25, r24
    2178:	80 f4       	brcc	.+32     	; 0x219a <__vector_39+0x80>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    217a:	e0 91 2c 08 	lds	r30, 0x082C	; 0x80082c <twi_masterBufferIndex>
    217e:	81 e0       	ldi	r24, 0x01	; 1
    2180:	8e 0f       	add	r24, r30
    2182:	80 93 2c 08 	sts	0x082C, r24	; 0x80082c <twi_masterBufferIndex>
    2186:	f0 e0       	ldi	r31, 0x00	; 0
    2188:	e3 5d       	subi	r30, 0xD3	; 211
    218a:	f7 4f       	sbci	r31, 0xF7	; 247
    218c:	80 81       	ld	r24, Z
    218e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2192:	85 ec       	ldi	r24, 0xC5	; 197
    2194:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2198:	ca c0       	rjmp	.+404    	; 0x232e <__stack+0x12f>
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
        twi_reply(1);
      }else{
	if (twi_sendStop)
    219a:	80 91 52 08 	lds	r24, 0x0852	; 0x800852 <twi_sendStop>
    219e:	88 23       	and	r24, r24
    21a0:	11 f0       	breq	.+4      	; 0x21a6 <__vector_39+0x8c>
          twi_stop();
    21a2:	aa df       	rcall	.-172    	; 0x20f8 <twi_stop>
    21a4:	c4 c0       	rjmp	.+392    	; 0x232e <__stack+0x12f>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    21a6:	81 e0       	ldi	r24, 0x01	; 1
    21a8:	80 93 51 08 	sts	0x0851, r24	; 0x800851 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    21ac:	84 ea       	ldi	r24, 0xA4	; 164
    21ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	  twi_state = TWI_READY;
    21b2:	10 92 54 08 	sts	0x0854, r1	; 0x800854 <twi_state>
    21b6:	bb c0       	rjmp	.+374    	; 0x232e <__stack+0x12f>
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    21b8:	80 e2       	ldi	r24, 0x20	; 32
    21ba:	80 93 e7 07 	sts	0x07E7, r24	; 0x8007e7 <twi_error>
      twi_stop();
    21be:	9c df       	rcall	.-200    	; 0x20f8 <twi_stop>
      break;
    21c0:	b6 c0       	rjmp	.+364    	; 0x232e <__stack+0x12f>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    21c2:	80 e3       	ldi	r24, 0x30	; 48
    21c4:	80 93 e7 07 	sts	0x07E7, r24	; 0x8007e7 <twi_error>
      twi_stop();
    21c8:	97 df       	rcall	.-210    	; 0x20f8 <twi_stop>
      break;
    21ca:	b1 c0       	rjmp	.+354    	; 0x232e <__stack+0x12f>
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    21cc:	88 e3       	ldi	r24, 0x38	; 56
    21ce:	80 93 e7 07 	sts	0x07E7, r24	; 0x8007e7 <twi_error>
      twi_releaseBus();
    21d2:	9d df       	rcall	.-198    	; 0x210e <twi_releaseBus>
      break;
    21d4:	ac c0       	rjmp	.+344    	; 0x232e <__stack+0x12f>

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    21d6:	e0 91 2c 08 	lds	r30, 0x082C	; 0x80082c <twi_masterBufferIndex>
    21da:	81 e0       	ldi	r24, 0x01	; 1
    21dc:	8e 0f       	add	r24, r30
    21de:	80 93 2c 08 	sts	0x082C, r24	; 0x80082c <twi_masterBufferIndex>
    21e2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    21e6:	f0 e0       	ldi	r31, 0x00	; 0
    21e8:	e3 5d       	subi	r30, 0xD3	; 211
    21ea:	f7 4f       	sbci	r31, 0xF7	; 247
    21ec:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    21ee:	90 91 2c 08 	lds	r25, 0x082C	; 0x80082c <twi_masterBufferIndex>
    21f2:	80 91 2b 08 	lds	r24, 0x082B	; 0x80082b <twi_masterBufferLength>
    21f6:	98 17       	cp	r25, r24
    21f8:	20 f4       	brcc	.+8      	; 0x2202 <__stack+0x3>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    21fa:	85 ec       	ldi	r24, 0xC5	; 197
    21fc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2200:	96 c0       	rjmp	.+300    	; 0x232e <__stack+0x12f>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2202:	85 e8       	ldi	r24, 0x85	; 133
    2204:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2208:	92 c0       	rjmp	.+292    	; 0x232e <__stack+0x12f>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    220a:	e0 91 2c 08 	lds	r30, 0x082C	; 0x80082c <twi_masterBufferIndex>
    220e:	81 e0       	ldi	r24, 0x01	; 1
    2210:	8e 0f       	add	r24, r30
    2212:	80 93 2c 08 	sts	0x082C, r24	; 0x80082c <twi_masterBufferIndex>
    2216:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    221a:	f0 e0       	ldi	r31, 0x00	; 0
    221c:	e3 5d       	subi	r30, 0xD3	; 211
    221e:	f7 4f       	sbci	r31, 0xF7	; 247
    2220:	80 83       	st	Z, r24
	if (twi_sendStop)
    2222:	80 91 52 08 	lds	r24, 0x0852	; 0x800852 <twi_sendStop>
    2226:	88 23       	and	r24, r24
          twi_stop();
    2228:	11 f0       	breq	.+4      	; 0x222e <__stack+0x2f>
    222a:	66 df       	rcall	.-308    	; 0x20f8 <twi_stop>
    222c:	80 c0       	rjmp	.+256    	; 0x232e <__stack+0x12f>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    222e:	81 e0       	ldi	r24, 0x01	; 1
    2230:	80 93 51 08 	sts	0x0851, r24	; 0x800851 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2234:	84 ea       	ldi	r24, 0xA4	; 164
    2236:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	  twi_state = TWI_READY;
    223a:	10 92 54 08 	sts	0x0854, r1	; 0x800854 <twi_state>
	}    
	break;
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
    223e:	77 c0       	rjmp	.+238    	; 0x232e <__stack+0x12f>
    2240:	5b df       	rcall	.-330    	; 0x20f8 <twi_stop>
      break;
    2242:	75 c0       	rjmp	.+234    	; 0x232e <__stack+0x12f>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    2244:	83 e0       	ldi	r24, 0x03	; 3
    2246:	80 93 54 08 	sts	0x0854, r24	; 0x800854 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    224a:	10 92 e8 07 	sts	0x07E8, r1	; 0x8007e8 <twi_rxBufferIndex>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    224e:	85 ec       	ldi	r24, 0xC5	; 197
    2250:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2254:	6c c0       	rjmp	.+216    	; 0x232e <__stack+0x12f>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2256:	80 91 e8 07 	lds	r24, 0x07E8	; 0x8007e8 <twi_rxBufferIndex>
    225a:	80 32       	cpi	r24, 0x20	; 32
    225c:	80 f4       	brcc	.+32     	; 0x227e <__stack+0x7f>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    225e:	e0 91 e8 07 	lds	r30, 0x07E8	; 0x8007e8 <twi_rxBufferIndex>
    2262:	81 e0       	ldi	r24, 0x01	; 1
    2264:	8e 0f       	add	r24, r30
    2266:	80 93 e8 07 	sts	0x07E8, r24	; 0x8007e8 <twi_rxBufferIndex>
    226a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    226e:	f0 e0       	ldi	r31, 0x00	; 0
    2270:	e7 51       	subi	r30, 0x17	; 23
    2272:	f8 4f       	sbci	r31, 0xF8	; 248
    2274:	80 83       	st	Z, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2276:	85 ec       	ldi	r24, 0xC5	; 197
    2278:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    227c:	58 c0       	rjmp	.+176    	; 0x232e <__stack+0x12f>
    227e:	85 e8       	ldi	r24, 0x85	; 133
    2280:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    2284:	54 c0       	rjmp	.+168    	; 0x232e <__stack+0x12f>
    2286:	43 df       	rcall	.-378    	; 0x210e <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2288:	80 91 e8 07 	lds	r24, 0x07E8	; 0x8007e8 <twi_rxBufferIndex>
    228c:	80 32       	cpi	r24, 0x20	; 32
    228e:	30 f4       	brcc	.+12     	; 0x229c <__stack+0x9d>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    2290:	e0 91 e8 07 	lds	r30, 0x07E8	; 0x8007e8 <twi_rxBufferIndex>
    2294:	f0 e0       	ldi	r31, 0x00	; 0
    2296:	e7 51       	subi	r30, 0x17	; 23
    2298:	f8 4f       	sbci	r31, 0xF8	; 248
    229a:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    229c:	60 91 e8 07 	lds	r22, 0x07E8	; 0x8007e8 <twi_rxBufferIndex>
    22a0:	70 e0       	ldi	r23, 0x00	; 0
    22a2:	e0 91 4d 08 	lds	r30, 0x084D	; 0x80084d <twi_onSlaveReceive>
    22a6:	f0 91 4e 08 	lds	r31, 0x084E	; 0x80084e <twi_onSlaveReceive+0x1>
    22aa:	89 ee       	ldi	r24, 0xE9	; 233
    22ac:	97 e0       	ldi	r25, 0x07	; 7
    22ae:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    22b0:	10 92 e8 07 	sts	0x07E8, r1	; 0x8007e8 <twi_rxBufferIndex>
      break;
    22b4:	3c c0       	rjmp	.+120    	; 0x232e <__stack+0x12f>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    22b6:	85 e8       	ldi	r24, 0x85	; 133
    22b8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    22bc:	38 c0       	rjmp	.+112    	; 0x232e <__stack+0x12f>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    22be:	84 e0       	ldi	r24, 0x04	; 4
    22c0:	80 93 54 08 	sts	0x0854, r24	; 0x800854 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    22c4:	10 92 0a 08 	sts	0x080A, r1	; 0x80080a <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    22c8:	10 92 09 08 	sts	0x0809, r1	; 0x800809 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    22cc:	e0 91 4f 08 	lds	r30, 0x084F	; 0x80084f <twi_onSlaveTransmit>
    22d0:	f0 91 50 08 	lds	r31, 0x0850	; 0x800850 <twi_onSlaveTransmit+0x1>
    22d4:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    22d6:	80 91 09 08 	lds	r24, 0x0809	; 0x800809 <twi_txBufferLength>
    22da:	81 11       	cpse	r24, r1
    22dc:	05 c0       	rjmp	.+10     	; 0x22e8 <__stack+0xe9>
        twi_txBufferLength = 1;
    22de:	81 e0       	ldi	r24, 0x01	; 1
    22e0:	80 93 09 08 	sts	0x0809, r24	; 0x800809 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    22e4:	10 92 0b 08 	sts	0x080B, r1	; 0x80080b <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    22e8:	e0 91 0a 08 	lds	r30, 0x080A	; 0x80080a <twi_txBufferIndex>
    22ec:	81 e0       	ldi	r24, 0x01	; 1
    22ee:	8e 0f       	add	r24, r30
    22f0:	80 93 0a 08 	sts	0x080A, r24	; 0x80080a <twi_txBufferIndex>
    22f4:	f0 e0       	ldi	r31, 0x00	; 0
    22f6:	e5 5f       	subi	r30, 0xF5	; 245
    22f8:	f7 4f       	sbci	r31, 0xF7	; 247
    22fa:	80 81       	ld	r24, Z
    22fc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2300:	90 91 0a 08 	lds	r25, 0x080A	; 0x80080a <twi_txBufferIndex>
    2304:	80 91 09 08 	lds	r24, 0x0809	; 0x800809 <twi_txBufferLength>
    2308:	98 17       	cp	r25, r24
    230a:	20 f4       	brcc	.+8      	; 0x2314 <__stack+0x115>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    230c:	85 ec       	ldi	r24, 0xC5	; 197
    230e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2312:	0d c0       	rjmp	.+26     	; 0x232e <__stack+0x12f>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2314:	85 e8       	ldi	r24, 0x85	; 133
    2316:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    231a:	09 c0       	rjmp	.+18     	; 0x232e <__stack+0x12f>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    231c:	85 ec       	ldi	r24, 0xC5	; 197
    231e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    2322:	10 92 54 08 	sts	0x0854, r1	; 0x800854 <twi_state>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    2326:	03 c0       	rjmp	.+6      	; 0x232e <__stack+0x12f>
    2328:	10 92 e7 07 	sts	0x07E7, r1	; 0x8007e7 <twi_error>
      twi_stop();
    232c:	e5 de       	rcall	.-566    	; 0x20f8 <twi_stop>
      break;
  }
    232e:	ff 91       	pop	r31
    2330:	ef 91       	pop	r30
    2332:	bf 91       	pop	r27
    2334:	af 91       	pop	r26
    2336:	9f 91       	pop	r25
    2338:	8f 91       	pop	r24
    233a:	7f 91       	pop	r23
    233c:	6f 91       	pop	r22
    233e:	5f 91       	pop	r21
    2340:	4f 91       	pop	r20
    2342:	3f 91       	pop	r19
    2344:	2f 91       	pop	r18
    2346:	0f 90       	pop	r0
    2348:	0b be       	out	0x3b, r0	; 59
    234a:	0f 90       	pop	r0
    234c:	0f be       	out	0x3f, r0	; 63
    234e:	0f 90       	pop	r0
    2350:	1f 90       	pop	r1
    2352:	18 95       	reti

00002354 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
	user_onRequest = function;
    2354:	80 91 7f 08 	lds	r24, 0x087F	; 0x80087f <_ZN7TwoWire14rxBufferLengthE>
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	20 91 80 08 	lds	r18, 0x0880	; 0x800880 <_ZN7TwoWire13rxBufferIndexE>
    235e:	82 1b       	sub	r24, r18
    2360:	91 09       	sbc	r25, r1
    2362:	08 95       	ret

00002364 <_ZN7TwoWire4readEv>:
    2364:	90 91 80 08 	lds	r25, 0x0880	; 0x800880 <_ZN7TwoWire13rxBufferIndexE>
    2368:	80 91 7f 08 	lds	r24, 0x087F	; 0x80087f <_ZN7TwoWire14rxBufferLengthE>
    236c:	98 17       	cp	r25, r24
    236e:	50 f4       	brcc	.+20     	; 0x2384 <_ZN7TwoWire4readEv+0x20>
    2370:	e9 2f       	mov	r30, r25
    2372:	f0 e0       	ldi	r31, 0x00	; 0
    2374:	ef 57       	subi	r30, 0x7F	; 127
    2376:	f7 4f       	sbci	r31, 0xF7	; 247
    2378:	20 81       	ld	r18, Z
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	9f 5f       	subi	r25, 0xFF	; 255
    237e:	90 93 80 08 	sts	0x0880, r25	; 0x800880 <_ZN7TwoWire13rxBufferIndexE>
    2382:	02 c0       	rjmp	.+4      	; 0x2388 <_ZN7TwoWire4readEv+0x24>
    2384:	2f ef       	ldi	r18, 0xFF	; 255
    2386:	3f ef       	ldi	r19, 0xFF	; 255
    2388:	c9 01       	movw	r24, r18
    238a:	08 95       	ret

0000238c <_ZN7TwoWire4peekEv>:
    238c:	e0 91 80 08 	lds	r30, 0x0880	; 0x800880 <_ZN7TwoWire13rxBufferIndexE>
    2390:	80 91 7f 08 	lds	r24, 0x087F	; 0x80087f <_ZN7TwoWire14rxBufferLengthE>
    2394:	e8 17       	cp	r30, r24
    2396:	30 f4       	brcc	.+12     	; 0x23a4 <_ZN7TwoWire4peekEv+0x18>
    2398:	f0 e0       	ldi	r31, 0x00	; 0
    239a:	ef 57       	subi	r30, 0x7F	; 127
    239c:	f7 4f       	sbci	r31, 0xF7	; 247
    239e:	80 81       	ld	r24, Z
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	08 95       	ret
    23a4:	8f ef       	ldi	r24, 0xFF	; 255
    23a6:	9f ef       	ldi	r25, 0xFF	; 255
    23a8:	08 95       	ret

000023aa <_ZN7TwoWire5flushEv>:
    23aa:	08 95       	ret

000023ac <_ZN7TwoWire16onReceiveServiceEPhi>:
    23ac:	cf 93       	push	r28
    23ae:	df 93       	push	r29
    23b0:	ec 01       	movw	r28, r24
    23b2:	e0 91 57 08 	lds	r30, 0x0857	; 0x800857 <_ZN7TwoWire14user_onReceiveE>
    23b6:	f0 91 58 08 	lds	r31, 0x0858	; 0x800858 <_ZN7TwoWire14user_onReceiveE+0x1>
    23ba:	30 97       	sbiw	r30, 0x00	; 0
    23bc:	01 f1       	breq	.+64     	; 0x23fe <_ZN7TwoWire16onReceiveServiceEPhi+0x52>
    23be:	90 91 80 08 	lds	r25, 0x0880	; 0x800880 <_ZN7TwoWire13rxBufferIndexE>
    23c2:	80 91 7f 08 	lds	r24, 0x087F	; 0x80087f <_ZN7TwoWire14rxBufferLengthE>
    23c6:	98 17       	cp	r25, r24
    23c8:	d0 f0       	brcs	.+52     	; 0x23fe <_ZN7TwoWire16onReceiveServiceEPhi+0x52>
    23ca:	16 16       	cp	r1, r22
    23cc:	17 06       	cpc	r1, r23
    23ce:	8c f4       	brge	.+34     	; 0x23f2 <_ZN7TwoWire16onReceiveServiceEPhi+0x46>
    23d0:	20 e0       	ldi	r18, 0x00	; 0
    23d2:	30 e0       	ldi	r19, 0x00	; 0
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	de 01       	movw	r26, r28
    23d8:	a9 0f       	add	r26, r25
    23da:	b1 1d       	adc	r27, r1
    23dc:	4c 91       	ld	r20, X
    23de:	d9 01       	movw	r26, r18
    23e0:	af 57       	subi	r26, 0x7F	; 127
    23e2:	b7 4f       	sbci	r27, 0xF7	; 247
    23e4:	4c 93       	st	X, r20
    23e6:	9f 5f       	subi	r25, 0xFF	; 255
    23e8:	29 2f       	mov	r18, r25
    23ea:	30 e0       	ldi	r19, 0x00	; 0
    23ec:	26 17       	cp	r18, r22
    23ee:	37 07       	cpc	r19, r23
    23f0:	94 f3       	brlt	.-28     	; 0x23d6 <_ZN7TwoWire16onReceiveServiceEPhi+0x2a>
    23f2:	cb 01       	movw	r24, r22
    23f4:	10 92 80 08 	sts	0x0880, r1	; 0x800880 <_ZN7TwoWire13rxBufferIndexE>
    23f8:	60 93 7f 08 	sts	0x087F, r22	; 0x80087f <_ZN7TwoWire14rxBufferLengthE>
    23fc:	19 95       	eicall
    23fe:	df 91       	pop	r29
    2400:	cf 91       	pop	r28
    2402:	08 95       	ret

00002404 <_ZN7TwoWire16onRequestServiceEv>:
    2404:	e0 91 59 08 	lds	r30, 0x0859	; 0x800859 <_ZN7TwoWire14user_onRequestE>
    2408:	f0 91 5a 08 	lds	r31, 0x085A	; 0x80085a <_ZN7TwoWire14user_onRequestE+0x1>
    240c:	30 97       	sbiw	r30, 0x00	; 0
    240e:	29 f0       	breq	.+10     	; 0x241a <_ZN7TwoWire16onRequestServiceEv+0x16>
    2410:	10 92 5d 08 	sts	0x085D, r1	; 0x80085d <_ZN7TwoWire13txBufferIndexE>
    2414:	10 92 5c 08 	sts	0x085C, r1	; 0x80085c <_ZN7TwoWire14txBufferLengthE>
    2418:	19 95       	eicall
    241a:	08 95       	ret

0000241c <_ZN7TwoWire5writeEh>:
    241c:	cf 93       	push	r28
    241e:	df 93       	push	r29
    2420:	1f 92       	push	r1
    2422:	cd b7       	in	r28, 0x3d	; 61
    2424:	de b7       	in	r29, 0x3e	; 62
    2426:	69 83       	std	Y+1, r22	; 0x01
    2428:	80 91 5b 08 	lds	r24, 0x085B	; 0x80085b <_ZN7TwoWire12transmittingE>
    242c:	88 23       	and	r24, r24
    242e:	99 f0       	breq	.+38     	; 0x2456 <_ZN7TwoWire5writeEh+0x3a>
    2430:	80 91 5c 08 	lds	r24, 0x085C	; 0x80085c <_ZN7TwoWire14txBufferLengthE>
    2434:	80 32       	cpi	r24, 0x20	; 32
    2436:	b0 f4       	brcc	.+44     	; 0x2464 <_ZN7TwoWire5writeEh+0x48>
    2438:	80 91 5d 08 	lds	r24, 0x085D	; 0x80085d <_ZN7TwoWire13txBufferIndexE>
    243c:	e8 2f       	mov	r30, r24
    243e:	f0 e0       	ldi	r31, 0x00	; 0
    2440:	e2 5a       	subi	r30, 0xA2	; 162
    2442:	f7 4f       	sbci	r31, 0xF7	; 247
    2444:	60 83       	st	Z, r22
    2446:	8f 5f       	subi	r24, 0xFF	; 255
    2448:	80 93 5d 08 	sts	0x085D, r24	; 0x80085d <_ZN7TwoWire13txBufferIndexE>
    244c:	80 93 5c 08 	sts	0x085C, r24	; 0x80085c <_ZN7TwoWire14txBufferLengthE>
    2450:	81 e0       	ldi	r24, 0x01	; 1
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	09 c0       	rjmp	.+18     	; 0x2468 <_ZN7TwoWire5writeEh+0x4c>
    2456:	61 e0       	ldi	r22, 0x01	; 1
    2458:	ce 01       	movw	r24, r28
    245a:	01 96       	adiw	r24, 0x01	; 1
    245c:	19 de       	rcall	.-974    	; 0x2090 <twi_transmit>
    245e:	81 e0       	ldi	r24, 0x01	; 1
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	02 c0       	rjmp	.+4      	; 0x2468 <_ZN7TwoWire5writeEh+0x4c>
    2464:	80 e0       	ldi	r24, 0x00	; 0
    2466:	90 e0       	ldi	r25, 0x00	; 0
    2468:	0f 90       	pop	r0
    246a:	df 91       	pop	r29
    246c:	cf 91       	pop	r28
    246e:	08 95       	ret

00002470 <_ZN7TwoWire5writeEPKhj>:
    2470:	cf 92       	push	r12
    2472:	df 92       	push	r13
    2474:	ef 92       	push	r14
    2476:	ff 92       	push	r15
    2478:	0f 93       	push	r16
    247a:	1f 93       	push	r17
    247c:	cf 93       	push	r28
    247e:	df 93       	push	r29
    2480:	8c 01       	movw	r16, r24
    2482:	cb 01       	movw	r24, r22
    2484:	6a 01       	movw	r12, r20
    2486:	20 91 5b 08 	lds	r18, 0x085B	; 0x80085b <_ZN7TwoWire12transmittingE>
    248a:	22 23       	and	r18, r18
    248c:	a1 f0       	breq	.+40     	; 0x24b6 <_ZN7TwoWire5writeEPKhj+0x46>
    248e:	41 15       	cp	r20, r1
    2490:	51 05       	cpc	r21, r1
    2492:	99 f0       	breq	.+38     	; 0x24ba <_ZN7TwoWire5writeEPKhj+0x4a>
    2494:	eb 01       	movw	r28, r22
    2496:	7b 01       	movw	r14, r22
    2498:	e4 0e       	add	r14, r20
    249a:	f5 1e       	adc	r15, r21
    249c:	69 91       	ld	r22, Y+
    249e:	d8 01       	movw	r26, r16
    24a0:	ed 91       	ld	r30, X+
    24a2:	fc 91       	ld	r31, X
    24a4:	01 90       	ld	r0, Z+
    24a6:	f0 81       	ld	r31, Z
    24a8:	e0 2d       	mov	r30, r0
    24aa:	c8 01       	movw	r24, r16
    24ac:	19 95       	eicall
    24ae:	ce 15       	cp	r28, r14
    24b0:	df 05       	cpc	r29, r15
    24b2:	a1 f7       	brne	.-24     	; 0x249c <_ZN7TwoWire5writeEPKhj+0x2c>
    24b4:	02 c0       	rjmp	.+4      	; 0x24ba <_ZN7TwoWire5writeEPKhj+0x4a>
    24b6:	64 2f       	mov	r22, r20
    24b8:	eb dd       	rcall	.-1066   	; 0x2090 <twi_transmit>
    24ba:	c6 01       	movw	r24, r12
    24bc:	df 91       	pop	r29
    24be:	cf 91       	pop	r28
    24c0:	1f 91       	pop	r17
    24c2:	0f 91       	pop	r16
    24c4:	ff 90       	pop	r15
    24c6:	ef 90       	pop	r14
    24c8:	df 90       	pop	r13
    24ca:	cf 90       	pop	r12
    24cc:	08 95       	ret

000024ce <_ZN7TwoWire5beginEv>:
    24ce:	78 94       	sei
    24d0:	10 92 80 08 	sts	0x0880, r1	; 0x800880 <_ZN7TwoWire13rxBufferIndexE>
    24d4:	10 92 7f 08 	sts	0x087F, r1	; 0x80087f <_ZN7TwoWire14rxBufferLengthE>
    24d8:	10 92 5d 08 	sts	0x085D, r1	; 0x80085d <_ZN7TwoWire13txBufferIndexE>
    24dc:	10 92 5c 08 	sts	0x085C, r1	; 0x80085c <_ZN7TwoWire14txBufferLengthE>
    24e0:	f5 dc       	rcall	.-1558   	; 0x1ecc <twi_init>
    24e2:	82 e0       	ldi	r24, 0x02	; 2
    24e4:	92 e1       	ldi	r25, 0x12	; 18
    24e6:	03 de       	rcall	.-1018   	; 0x20ee <twi_attachSlaveTxEvent>
    24e8:	86 ed       	ldi	r24, 0xD6	; 214
    24ea:	91 e1       	ldi	r25, 0x11	; 17
    24ec:	fb cd       	rjmp	.-1034   	; 0x20e4 <twi_attachSlaveRxEvent>
    24ee:	08 95       	ret

000024f0 <_ZN7TwoWire8setClockEm>:
    24f0:	cb 01       	movw	r24, r22
    24f2:	ba 01       	movw	r22, r20
    24f4:	04 cd       	rjmp	.-1528   	; 0x1efe <twi_setFrequency>
    24f6:	08 95       	ret

000024f8 <_ZN7TwoWire17beginTransmissionEh>:
    24f8:	81 e0       	ldi	r24, 0x01	; 1
    24fa:	80 93 5b 08 	sts	0x085B, r24	; 0x80085b <_ZN7TwoWire12transmittingE>
    24fe:	60 93 7e 08 	sts	0x087E, r22	; 0x80087e <_ZN7TwoWire9txAddressE>
    2502:	10 92 5d 08 	sts	0x085D, r1	; 0x80085d <_ZN7TwoWire13txBufferIndexE>
    2506:	10 92 5c 08 	sts	0x085C, r1	; 0x80085c <_ZN7TwoWire14txBufferLengthE>
    250a:	08 95       	ret

0000250c <_ZN7TwoWire17beginTransmissionEi>:
    250c:	f5 cf       	rjmp	.-22     	; 0x24f8 <_ZN7TwoWire17beginTransmissionEh>
    250e:	08 95       	ret

00002510 <_ZN7TwoWire15endTransmissionEh>:
    2510:	0f 93       	push	r16
    2512:	06 2f       	mov	r16, r22
    2514:	21 e0       	ldi	r18, 0x01	; 1
    2516:	40 91 5c 08 	lds	r20, 0x085C	; 0x80085c <_ZN7TwoWire14txBufferLengthE>
    251a:	6e e5       	ldi	r22, 0x5E	; 94
    251c:	78 e0       	ldi	r23, 0x08	; 8
    251e:	80 91 7e 08 	lds	r24, 0x087E	; 0x80087e <_ZN7TwoWire9txAddressE>
    2522:	53 dd       	rcall	.-1370   	; 0x1fca <twi_writeTo>
    2524:	10 92 5d 08 	sts	0x085D, r1	; 0x80085d <_ZN7TwoWire13txBufferIndexE>
    2528:	10 92 5c 08 	sts	0x085C, r1	; 0x80085c <_ZN7TwoWire14txBufferLengthE>
    252c:	10 92 5b 08 	sts	0x085B, r1	; 0x80085b <_ZN7TwoWire12transmittingE>
    2530:	0f 91       	pop	r16
    2532:	08 95       	ret

00002534 <_ZN7TwoWire11requestFromEhhmhh>:
    2534:	4f 92       	push	r4
    2536:	5f 92       	push	r5
    2538:	6f 92       	push	r6
    253a:	7f 92       	push	r7
    253c:	af 92       	push	r10
    253e:	bf 92       	push	r11
    2540:	cf 92       	push	r12
    2542:	ef 92       	push	r14
    2544:	ff 92       	push	r15
    2546:	0f 93       	push	r16
    2548:	1f 93       	push	r17
    254a:	cf 93       	push	r28
    254c:	df 93       	push	r29
    254e:	5c 01       	movw	r10, r24
    2550:	f6 2e       	mov	r15, r22
    2552:	d4 2f       	mov	r29, r20
    2554:	28 01       	movw	r4, r16
    2556:	39 01       	movw	r6, r18
    2558:	ee 20       	and	r14, r14
    255a:	39 f1       	breq	.+78     	; 0x25aa <_ZN7TwoWire11requestFromEhhmhh+0x76>
    255c:	cd df       	rcall	.-102    	; 0x24f8 <_ZN7TwoWire17beginTransmissionEh>
    255e:	8e 2d       	mov	r24, r14
    2560:	84 30       	cpi	r24, 0x04	; 4
    2562:	08 f0       	brcs	.+2      	; 0x2566 <_ZN7TwoWire11requestFromEhhmhh+0x32>
    2564:	83 e0       	ldi	r24, 0x03	; 3
    2566:	cf ef       	ldi	r28, 0xFF	; 255
    2568:	c8 0f       	add	r28, r24
    256a:	88 23       	and	r24, r24
    256c:	d9 f0       	breq	.+54     	; 0x25a4 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    256e:	8c 2f       	mov	r24, r28
    2570:	88 0f       	add	r24, r24
    2572:	88 0f       	add	r24, r24
    2574:	88 0f       	add	r24, r24
    2576:	a3 01       	movw	r20, r6
    2578:	92 01       	movw	r18, r4
    257a:	04 c0       	rjmp	.+8      	; 0x2584 <_ZN7TwoWire11requestFromEhhmhh+0x50>
    257c:	56 95       	lsr	r21
    257e:	47 95       	ror	r20
    2580:	37 95       	ror	r19
    2582:	27 95       	ror	r18
    2584:	8a 95       	dec	r24
    2586:	d2 f7       	brpl	.-12     	; 0x257c <_ZN7TwoWire11requestFromEhhmhh+0x48>
    2588:	ca 01       	movw	r24, r20
    258a:	b9 01       	movw	r22, r18
    258c:	d5 01       	movw	r26, r10
    258e:	ed 91       	ld	r30, X+
    2590:	fc 91       	ld	r31, X
    2592:	01 90       	ld	r0, Z+
    2594:	f0 81       	ld	r31, Z
    2596:	e0 2d       	mov	r30, r0
    2598:	c5 01       	movw	r24, r10
    259a:	19 95       	eicall
    259c:	8c 2f       	mov	r24, r28
    259e:	c1 50       	subi	r28, 0x01	; 1
    25a0:	81 11       	cpse	r24, r1
    25a2:	e5 cf       	rjmp	.-54     	; 0x256e <_ZN7TwoWire11requestFromEhhmhh+0x3a>
    25a4:	60 e0       	ldi	r22, 0x00	; 0
    25a6:	c5 01       	movw	r24, r10
    25a8:	b3 df       	rcall	.-154    	; 0x2510 <_ZN7TwoWire15endTransmissionEh>
    25aa:	4d 2f       	mov	r20, r29
    25ac:	d1 32       	cpi	r29, 0x21	; 33
    25ae:	08 f0       	brcs	.+2      	; 0x25b2 <_ZN7TwoWire11requestFromEhhmhh+0x7e>
    25b0:	40 e2       	ldi	r20, 0x20	; 32
    25b2:	2c 2d       	mov	r18, r12
    25b4:	61 e8       	ldi	r22, 0x81	; 129
    25b6:	78 e0       	ldi	r23, 0x08	; 8
    25b8:	8f 2d       	mov	r24, r15
    25ba:	b5 dc       	rcall	.-1686   	; 0x1f26 <twi_readFrom>
    25bc:	10 92 80 08 	sts	0x0880, r1	; 0x800880 <_ZN7TwoWire13rxBufferIndexE>
    25c0:	80 93 7f 08 	sts	0x087F, r24	; 0x80087f <_ZN7TwoWire14rxBufferLengthE>
    25c4:	df 91       	pop	r29
    25c6:	cf 91       	pop	r28
    25c8:	1f 91       	pop	r17
    25ca:	0f 91       	pop	r16
    25cc:	ff 90       	pop	r15
    25ce:	ef 90       	pop	r14
    25d0:	cf 90       	pop	r12
    25d2:	bf 90       	pop	r11
    25d4:	af 90       	pop	r10
    25d6:	7f 90       	pop	r7
    25d8:	6f 90       	pop	r6
    25da:	5f 90       	pop	r5
    25dc:	4f 90       	pop	r4
    25de:	08 95       	ret

000025e0 <_ZN7TwoWire11requestFromEhhh>:
    25e0:	cf 92       	push	r12
    25e2:	ef 92       	push	r14
    25e4:	0f 93       	push	r16
    25e6:	1f 93       	push	r17
    25e8:	c2 2e       	mov	r12, r18
    25ea:	e1 2c       	mov	r14, r1
    25ec:	00 e0       	ldi	r16, 0x00	; 0
    25ee:	10 e0       	ldi	r17, 0x00	; 0
    25f0:	98 01       	movw	r18, r16
    25f2:	a0 df       	rcall	.-192    	; 0x2534 <_ZN7TwoWire11requestFromEhhmhh>
    25f4:	1f 91       	pop	r17
    25f6:	0f 91       	pop	r16
    25f8:	ef 90       	pop	r14
    25fa:	cf 90       	pop	r12
    25fc:	08 95       	ret

000025fe <_ZN7TwoWire11requestFromEhh>:
    25fe:	21 e0       	ldi	r18, 0x01	; 1
    2600:	ef cf       	rjmp	.-34     	; 0x25e0 <_ZN7TwoWire11requestFromEhhh>
    2602:	08 95       	ret

00002604 <_ZN7TwoWire11requestFromEii>:
    2604:	21 e0       	ldi	r18, 0x01	; 1
    2606:	ec cf       	rjmp	.-40     	; 0x25e0 <_ZN7TwoWire11requestFromEhhh>
    2608:	08 95       	ret

0000260a <_ZN7TwoWire15endTransmissionEv>:
    260a:	61 e0       	ldi	r22, 0x01	; 1
    260c:	81 cf       	rjmp	.-254    	; 0x2510 <_ZN7TwoWire15endTransmissionEh>
    260e:	08 95       	ret

00002610 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    2610:	80 e8       	ldi	r24, 0x80	; 128
    2612:	92 e0       	ldi	r25, 0x02	; 2
    2614:	90 93 56 08 	sts	0x0856, r25	; 0x800856 <Wire+0x1>
    2618:	80 93 55 08 	sts	0x0855, r24	; 0x800855 <Wire>
    261c:	08 95       	ret

0000261e <_ZN6MS5837C1ER13HardwareTimer>:
const float MS5837::mbar = 1.0f;
*/
const uint8_t MS5837::MS5837_30BA = 0;
const uint8_t MS5837::MS5837_02BA = 1;

MS5837::MS5837(HardwareTimer &timer) : _timer(&timer) {
    261e:	fc 01       	movw	r30, r24
    2620:	73 a3       	std	Z+35, r23	; 0x23
    2622:	62 a3       	std	Z+34, r22	; 0x22
	fluidDensity = 1029;
    2624:	40 e0       	ldi	r20, 0x00	; 0
    2626:	50 ea       	ldi	r21, 0xA0	; 160
    2628:	60 e8       	ldi	r22, 0x80	; 128
    262a:	74 e4       	ldi	r23, 0x44	; 68
    262c:	44 a3       	std	Z+36, r20	; 0x24
    262e:	55 a3       	std	Z+37, r21	; 0x25
    2630:	66 a3       	std	Z+38, r22	; 0x26
    2632:	77 a3       	std	Z+39, r23	; 0x27
    2634:	08 95       	ret

00002636 <_ZN6MS58378setModelEh>:

	return false; // CRC fail
}

void MS5837::setModel(uint8_t model) {
	_model = model;
    2636:	fc 01       	movw	r30, r24
    2638:	60 a3       	std	Z+32, r22	; 0x20
    263a:	08 95       	ret

0000263c <_ZN6MS58379startReadEv>:
	D2 = (D2 << 8) | Wire.read();

	calculate();
}*/

bool MS5837::startRead(){
    263c:	cf 93       	push	r28
    263e:	df 93       	push	r29
	if(_state == STATE_FINISHED){
    2640:	fc 01       	movw	r30, r24
    2642:	21 a1       	ldd	r18, Z+33	; 0x21
    2644:	21 11       	cpse	r18, r1
    2646:	1c c0       	rjmp	.+56     	; 0x2680 <_ZN6MS58379startReadEv+0x44>
    2648:	ec 01       	movw	r28, r24
		_state = STATE_READ_D1; // Request D1 conversion
    264a:	81 e0       	ldi	r24, 0x01	; 1
    264c:	81 a3       	std	Z+33, r24	; 0x21
		
		Wire.beginTransmission(MS5837_ADDR);
    264e:	66 e7       	ldi	r22, 0x76	; 118
    2650:	70 e0       	ldi	r23, 0x00	; 0
    2652:	85 e5       	ldi	r24, 0x55	; 85
    2654:	98 e0       	ldi	r25, 0x08	; 8
    2656:	5a df       	rcall	.-332    	; 0x250c <_ZN7TwoWire17beginTransmissionEi>
	void onRequest( void (*)(void) );

	inline size_t write(unsigned long n) { return write((uint8_t)n); }
	inline size_t write(long n) { return write((uint8_t)n); }
	inline size_t write(unsigned int n) { return write((uint8_t)n); }
	inline size_t write(int n) { return write((uint8_t)n); }
    2658:	e0 91 55 08 	lds	r30, 0x0855	; 0x800855 <Wire>
    265c:	f0 91 56 08 	lds	r31, 0x0856	; 0x800856 <Wire+0x1>
    2660:	01 90       	ld	r0, Z+
    2662:	f0 81       	ld	r31, Z
    2664:	e0 2d       	mov	r30, r0
    2666:	6a e4       	ldi	r22, 0x4A	; 74
    2668:	85 e5       	ldi	r24, 0x55	; 85
    266a:	98 e0       	ldi	r25, 0x08	; 8
    266c:	19 95       	eicall
		Wire.write(MS5837_CONVERT_D1_8192);
		Wire.endTransmission();
    266e:	85 e5       	ldi	r24, 0x55	; 85
    2670:	98 e0       	ldi	r25, 0x08	; 8
    2672:	cb df       	rcall	.-106    	; 0x260a <_ZN7TwoWire15endTransmissionEv>

		_timer->start(2); // Max conversion time, 20ms per datasheet
    2674:	62 e0       	ldi	r22, 0x02	; 2
    2676:	8a a1       	ldd	r24, Y+34	; 0x22
    2678:	9b a1       	ldd	r25, Y+35	; 0x23
    267a:	88 db       	rcall	.-2288   	; 0x1d8c <_ZN13HardwareTimer5startEh>
		return true;
    267c:	81 e0       	ldi	r24, 0x01	; 1
    267e:	01 c0       	rjmp	.+2      	; 0x2682 <_ZN6MS58379startReadEv+0x46>
	}else{
		return false;
    2680:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    2682:	df 91       	pop	r29
    2684:	cf 91       	pop	r28
    2686:	08 95       	ret

00002688 <_ZN6MS58378finishedEv>:
		}
	}
}

bool MS5837::finished(){
	return _state == STATE_FINISHED;
    2688:	21 e0       	ldi	r18, 0x01	; 1
    268a:	fc 01       	movw	r30, r24
    268c:	81 a1       	ldd	r24, Z+33	; 0x21
    268e:	81 11       	cpse	r24, r1
    2690:	20 e0       	ldi	r18, 0x00	; 0
}
    2692:	82 2f       	mov	r24, r18
    2694:	08 95       	ret

00002696 <_ZN6MS58379calculateEv>:

void MS5837::calculate() {
    2696:	2f 92       	push	r2
    2698:	3f 92       	push	r3
    269a:	4f 92       	push	r4
    269c:	5f 92       	push	r5
    269e:	6f 92       	push	r6
    26a0:	7f 92       	push	r7
    26a2:	8f 92       	push	r8
    26a4:	9f 92       	push	r9
    26a6:	af 92       	push	r10
    26a8:	bf 92       	push	r11
    26aa:	cf 92       	push	r12
    26ac:	df 92       	push	r13
    26ae:	ef 92       	push	r14
    26b0:	ff 92       	push	r15
    26b2:	0f 93       	push	r16
    26b4:	1f 93       	push	r17
    26b6:	cf 93       	push	r28
    26b8:	df 93       	push	r29
    26ba:	cd b7       	in	r28, 0x3d	; 61
    26bc:	de b7       	in	r29, 0x3e	; 62
    26be:	a5 97       	sbiw	r28, 0x25	; 37
    26c0:	0f b6       	in	r0, 0x3f	; 63
    26c2:	f8 94       	cli
    26c4:	de bf       	out	0x3e, r29	; 62
    26c6:	0f be       	out	0x3f, r0	; 63
    26c8:	cd bf       	out	0x3d, r28	; 61
    26ca:	1c 01       	movw	r2, r24
	int32_t Ti = 0;
	int64_t OFF2 = 0;
	int64_t SENS2 = 0;
	
	// Terms called
	dT = D2-uint32_t(C[5])*256l;
    26cc:	dc 01       	movw	r26, r24
    26ce:	1a 96       	adiw	r26, 0x0a	; 10
    26d0:	8d 91       	ld	r24, X+
    26d2:	9c 91       	ld	r25, X
    26d4:	1b 97       	sbiw	r26, 0x0b	; 11
    26d6:	a0 e0       	ldi	r26, 0x00	; 0
    26d8:	b0 e0       	ldi	r27, 0x00	; 0
    26da:	ba 2f       	mov	r27, r26
    26dc:	a9 2f       	mov	r26, r25
    26de:	98 2f       	mov	r25, r24
    26e0:	88 27       	eor	r24, r24
    26e2:	f1 01       	movw	r30, r2
    26e4:	44 89       	ldd	r20, Z+20	; 0x14
    26e6:	55 89       	ldd	r21, Z+21	; 0x15
    26e8:	66 89       	ldd	r22, Z+22	; 0x16
    26ea:	77 89       	ldd	r23, Z+23	; 0x17
    26ec:	3a 01       	movw	r6, r20
    26ee:	4b 01       	movw	r8, r22
    26f0:	68 1a       	sub	r6, r24
    26f2:	79 0a       	sbc	r7, r25
    26f4:	8a 0a       	sbc	r8, r26
    26f6:	9b 0a       	sbc	r9, r27
    26f8:	69 82       	std	Y+1, r6	; 0x01
    26fa:	7a 82       	std	Y+2, r7	; 0x02
    26fc:	8b 82       	std	Y+3, r8	; 0x03
    26fe:	9c 82       	std	Y+4, r9	; 0x04
	if ( _model == MS5837_02BA ) {
    2700:	80 a1       	ldd	r24, Z+32	; 0x20
    2702:	81 30       	cpi	r24, 0x01	; 1
    2704:	09 f0       	breq	.+2      	; 0x2708 <_ZN6MS58379calculateEv+0x72>
    2706:	58 c1       	rjmp	.+688    	; 0x29b8 <_ZN6MS58379calculateEv+0x322>
		SENS = int64_t(C[1])*65536l+(int64_t(C[3])*dT)/128l;
    2708:	99 0c       	add	r9, r9
    270a:	66 08       	sbc	r6, r6
    270c:	76 2c       	mov	r7, r6
    270e:	43 01       	movw	r8, r6
    2710:	6d 82       	std	Y+5, r6	; 0x05
    2712:	7e 82       	std	Y+6, r7	; 0x06
    2714:	8f 82       	std	Y+7, r8	; 0x07
    2716:	98 86       	std	Y+8, r9	; 0x08
    2718:	86 81       	ldd	r24, Z+6	; 0x06
    271a:	97 81       	ldd	r25, Z+7	; 0x07
    271c:	3c 01       	movw	r6, r24
    271e:	81 2c       	mov	r8, r1
    2720:	91 2c       	mov	r9, r1
    2722:	a1 2c       	mov	r10, r1
    2724:	b1 2c       	mov	r11, r1
    2726:	65 01       	movw	r12, r10
    2728:	8d 8f       	std	Y+29, r24	; 0x1d
    272a:	7e 8e       	std	Y+30, r7	; 0x1e
    272c:	8f 8e       	std	Y+31, r8	; 0x1f
    272e:	98 a2       	std	Y+32, r9	; 0x20
    2730:	a9 a2       	std	Y+33, r10	; 0x21
    2732:	ba a2       	std	Y+34, r11	; 0x22
    2734:	cb a2       	std	Y+35, r12	; 0x23
    2736:	dc a2       	std	Y+36, r13	; 0x24
    2738:	a9 80       	ldd	r10, Y+1	; 0x01
    273a:	ba 80       	ldd	r11, Y+2	; 0x02
    273c:	cb 80       	ldd	r12, Y+3	; 0x03
    273e:	dc 80       	ldd	r13, Y+4	; 0x04
    2740:	ed 80       	ldd	r14, Y+5	; 0x05
    2742:	fe 2c       	mov	r15, r14
    2744:	0e 2d       	mov	r16, r14
    2746:	1e 2d       	mov	r17, r14
    2748:	28 2f       	mov	r18, r24
    274a:	37 2d       	mov	r19, r7
    274c:	40 e0       	ldi	r20, 0x00	; 0
    274e:	50 e0       	ldi	r21, 0x00	; 0
    2750:	60 e0       	ldi	r22, 0x00	; 0
    2752:	70 e0       	ldi	r23, 0x00	; 0
    2754:	80 e0       	ldi	r24, 0x00	; 0
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	0e 94 1b 29 	call	0x5236	; 0x5236 <__muldi3>
    275c:	12 2f       	mov	r17, r18
    275e:	3e 87       	std	Y+14, r19	; 0x0e
    2760:	4d 87       	std	Y+13, r20	; 0x0d
    2762:	b5 2f       	mov	r27, r21
    2764:	f6 2f       	mov	r31, r22
    2766:	e7 2f       	mov	r30, r23
    2768:	78 2e       	mov	r7, r24
    276a:	89 2e       	mov	r8, r25
    276c:	a0 e0       	ldi	r26, 0x00	; 0
    276e:	0e 94 c1 29 	call	0x5382	; 0x5382 <__cmpdi2_s8>
    2772:	5c f4       	brge	.+22     	; 0x278a <_ZN6MS58379calculateEv+0xf4>
    2774:	af e7       	ldi	r26, 0x7F	; 127
    2776:	0e 94 ac 29 	call	0x5358	; 0x5358 <__adddi3_s8>
    277a:	12 2f       	mov	r17, r18
    277c:	3e 87       	std	Y+14, r19	; 0x0e
    277e:	4d 87       	std	Y+13, r20	; 0x0d
    2780:	b5 2f       	mov	r27, r21
    2782:	f6 2f       	mov	r31, r22
    2784:	e7 2f       	mov	r30, r23
    2786:	78 2e       	mov	r7, r24
    2788:	89 2e       	mov	r8, r25
    278a:	21 2f       	mov	r18, r17
    278c:	3e 85       	ldd	r19, Y+14	; 0x0e
    278e:	4d 85       	ldd	r20, Y+13	; 0x0d
    2790:	5b 2f       	mov	r21, r27
    2792:	6f 2f       	mov	r22, r31
    2794:	7e 2f       	mov	r23, r30
    2796:	87 2d       	mov	r24, r7
    2798:	98 2d       	mov	r25, r8
    279a:	07 e0       	ldi	r16, 0x07	; 7
    279c:	0e 94 85 29 	call	0x530a	; 0x530a <__ashrdi3>
    27a0:	82 2e       	mov	r8, r18
    27a2:	93 2e       	mov	r9, r19
    27a4:	74 2e       	mov	r7, r20
    27a6:	65 2e       	mov	r6, r21
    27a8:	b6 2f       	mov	r27, r22
    27aa:	a7 2f       	mov	r26, r23
    27ac:	58 2e       	mov	r5, r24
    27ae:	49 2e       	mov	r4, r25
    27b0:	f1 01       	movw	r30, r2
    27b2:	a2 80       	ldd	r10, Z+2	; 0x02
    27b4:	b3 80       	ldd	r11, Z+3	; 0x03
    27b6:	2a 2d       	mov	r18, r10
    27b8:	3b 2d       	mov	r19, r11
    27ba:	40 e0       	ldi	r20, 0x00	; 0
    27bc:	50 e0       	ldi	r21, 0x00	; 0
    27be:	60 e0       	ldi	r22, 0x00	; 0
    27c0:	70 e0       	ldi	r23, 0x00	; 0
    27c2:	80 e0       	ldi	r24, 0x00	; 0
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	00 e1       	ldi	r16, 0x10	; 16
    27c8:	0e 94 6c 29 	call	0x52d8	; 0x52d8 <__ashldi3>
    27cc:	a2 2e       	mov	r10, r18
    27ce:	b3 2e       	mov	r11, r19
    27d0:	c4 2e       	mov	r12, r20
    27d2:	d5 2e       	mov	r13, r21
    27d4:	e6 2e       	mov	r14, r22
    27d6:	f7 2e       	mov	r15, r23
    27d8:	08 2f       	mov	r16, r24
    27da:	19 2f       	mov	r17, r25
    27dc:	28 2d       	mov	r18, r8
    27de:	39 2d       	mov	r19, r9
    27e0:	47 2d       	mov	r20, r7
    27e2:	56 2d       	mov	r21, r6
    27e4:	6b 2f       	mov	r22, r27
    27e6:	7a 2f       	mov	r23, r26
    27e8:	85 2d       	mov	r24, r5
    27ea:	94 2d       	mov	r25, r4
    27ec:	0e 94 a3 29 	call	0x5346	; 0x5346 <__adddi3>
    27f0:	2d 87       	std	Y+13, r18	; 0x0d
    27f2:	3e 87       	std	Y+14, r19	; 0x0e
    27f4:	4f 87       	std	Y+15, r20	; 0x0f
    27f6:	58 8b       	std	Y+16, r21	; 0x10
    27f8:	69 8b       	std	Y+17, r22	; 0x11
    27fa:	7a 8b       	std	Y+18, r23	; 0x12
    27fc:	8b 8b       	std	Y+19, r24	; 0x13
    27fe:	9c 8b       	std	Y+20, r25	; 0x14
		OFF = int64_t(C[2])*131072l+(int64_t(C[4])*dT)/64l;
    2800:	80 85       	ldd	r24, Z+8	; 0x08
    2802:	91 85       	ldd	r25, Z+9	; 0x09
    2804:	3c 01       	movw	r6, r24
    2806:	81 2c       	mov	r8, r1
    2808:	91 2c       	mov	r9, r1
    280a:	a1 2c       	mov	r10, r1
    280c:	b1 2c       	mov	r11, r1
    280e:	65 01       	movw	r12, r10
    2810:	8d 8f       	std	Y+29, r24	; 0x1d
    2812:	7e 8e       	std	Y+30, r7	; 0x1e
    2814:	8f 8e       	std	Y+31, r8	; 0x1f
    2816:	98 a2       	std	Y+32, r9	; 0x20
    2818:	a9 a2       	std	Y+33, r10	; 0x21
    281a:	ba a2       	std	Y+34, r11	; 0x22
    281c:	cb a2       	std	Y+35, r12	; 0x23
    281e:	dc a2       	std	Y+36, r13	; 0x24
    2820:	a9 80       	ldd	r10, Y+1	; 0x01
    2822:	ba 80       	ldd	r11, Y+2	; 0x02
    2824:	cb 80       	ldd	r12, Y+3	; 0x03
    2826:	dc 80       	ldd	r13, Y+4	; 0x04
    2828:	ed 80       	ldd	r14, Y+5	; 0x05
    282a:	fe 2c       	mov	r15, r14
    282c:	0e 2d       	mov	r16, r14
    282e:	1e 2d       	mov	r17, r14
    2830:	28 2f       	mov	r18, r24
    2832:	37 2d       	mov	r19, r7
    2834:	40 e0       	ldi	r20, 0x00	; 0
    2836:	50 e0       	ldi	r21, 0x00	; 0
    2838:	60 e0       	ldi	r22, 0x00	; 0
    283a:	70 e0       	ldi	r23, 0x00	; 0
    283c:	80 e0       	ldi	r24, 0x00	; 0
    283e:	90 e0       	ldi	r25, 0x00	; 0
    2840:	0e 94 1b 29 	call	0x5236	; 0x5236 <__muldi3>
    2844:	12 2f       	mov	r17, r18
    2846:	3e 8b       	std	Y+22, r19	; 0x16
    2848:	4d 8b       	std	Y+21, r20	; 0x15
    284a:	b5 2f       	mov	r27, r21
    284c:	f6 2f       	mov	r31, r22
    284e:	e7 2f       	mov	r30, r23
    2850:	78 2e       	mov	r7, r24
    2852:	89 2e       	mov	r8, r25
    2854:	a0 e0       	ldi	r26, 0x00	; 0
    2856:	0e 94 c1 29 	call	0x5382	; 0x5382 <__cmpdi2_s8>
    285a:	5c f4       	brge	.+22     	; 0x2872 <_ZN6MS58379calculateEv+0x1dc>
    285c:	af e3       	ldi	r26, 0x3F	; 63
    285e:	0e 94 ac 29 	call	0x5358	; 0x5358 <__adddi3_s8>
    2862:	12 2f       	mov	r17, r18
    2864:	3e 8b       	std	Y+22, r19	; 0x16
    2866:	4d 8b       	std	Y+21, r20	; 0x15
    2868:	b5 2f       	mov	r27, r21
    286a:	f6 2f       	mov	r31, r22
    286c:	e7 2f       	mov	r30, r23
    286e:	78 2e       	mov	r7, r24
    2870:	89 2e       	mov	r8, r25
    2872:	21 2f       	mov	r18, r17
    2874:	3e 89       	ldd	r19, Y+22	; 0x16
    2876:	4d 89       	ldd	r20, Y+21	; 0x15
    2878:	5b 2f       	mov	r21, r27
    287a:	6f 2f       	mov	r22, r31
    287c:	7e 2f       	mov	r23, r30
    287e:	87 2d       	mov	r24, r7
    2880:	98 2d       	mov	r25, r8
    2882:	06 e0       	ldi	r16, 0x06	; 6
    2884:	0e 94 85 29 	call	0x530a	; 0x530a <__ashrdi3>
    2888:	82 2e       	mov	r8, r18
    288a:	93 2e       	mov	r9, r19
    288c:	74 2e       	mov	r7, r20
    288e:	65 2e       	mov	r6, r21
    2890:	b6 2f       	mov	r27, r22
    2892:	a7 2f       	mov	r26, r23
    2894:	58 2e       	mov	r5, r24
    2896:	49 2e       	mov	r4, r25
    2898:	f1 01       	movw	r30, r2
    289a:	24 81       	ldd	r18, Z+4	; 0x04
    289c:	35 81       	ldd	r19, Z+5	; 0x05
    289e:	59 01       	movw	r10, r18
    28a0:	3b 2d       	mov	r19, r11
    28a2:	40 e0       	ldi	r20, 0x00	; 0
    28a4:	50 e0       	ldi	r21, 0x00	; 0
    28a6:	60 e0       	ldi	r22, 0x00	; 0
    28a8:	70 e0       	ldi	r23, 0x00	; 0
    28aa:	80 e0       	ldi	r24, 0x00	; 0
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	01 e1       	ldi	r16, 0x11	; 17
    28b0:	0e 94 6c 29 	call	0x52d8	; 0x52d8 <__ashldi3>
    28b4:	a2 2e       	mov	r10, r18
    28b6:	b3 2e       	mov	r11, r19
    28b8:	c4 2e       	mov	r12, r20
    28ba:	d5 2e       	mov	r13, r21
    28bc:	e6 2e       	mov	r14, r22
    28be:	f7 2e       	mov	r15, r23
    28c0:	08 2f       	mov	r16, r24
    28c2:	19 2f       	mov	r17, r25
    28c4:	28 2d       	mov	r18, r8
    28c6:	39 2d       	mov	r19, r9
    28c8:	47 2d       	mov	r20, r7
    28ca:	56 2d       	mov	r21, r6
    28cc:	6b 2f       	mov	r22, r27
    28ce:	7a 2f       	mov	r23, r26
    28d0:	85 2d       	mov	r24, r5
    28d2:	94 2d       	mov	r25, r4
    28d4:	0e 94 a3 29 	call	0x5346	; 0x5346 <__adddi3>
    28d8:	2d 8b       	std	Y+21, r18	; 0x15
    28da:	3e 8b       	std	Y+22, r19	; 0x16
    28dc:	4f 8b       	std	Y+23, r20	; 0x17
    28de:	58 8f       	std	Y+24, r21	; 0x18
    28e0:	69 8f       	std	Y+25, r22	; 0x19
    28e2:	7a 8f       	std	Y+26, r23	; 0x1a
    28e4:	8b 8f       	std	Y+27, r24	; 0x1b
    28e6:	9c 8f       	std	Y+28, r25	; 0x1c
		OFF = int64_t(C[2])*65536l+(int64_t(C[4])*dT)/128l;
		P = (D1*SENS/(2097152l)-OFF)/(8192l);
	}
	
	// Temp conversion
	TEMP = 2000l+int64_t(dT)*C[6]/8388608LL;
    28e8:	84 85       	ldd	r24, Z+12	; 0x0c
    28ea:	95 85       	ldd	r25, Z+13	; 0x0d
    28ec:	3c 01       	movw	r6, r24
    28ee:	81 2c       	mov	r8, r1
    28f0:	91 2c       	mov	r9, r1
    28f2:	a1 2c       	mov	r10, r1
    28f4:	b1 2c       	mov	r11, r1
    28f6:	65 01       	movw	r12, r10
    28f8:	8d 8f       	std	Y+29, r24	; 0x1d
    28fa:	7e 8e       	std	Y+30, r7	; 0x1e
    28fc:	8f 8e       	std	Y+31, r8	; 0x1f
    28fe:	98 a2       	std	Y+32, r9	; 0x20
    2900:	a9 a2       	std	Y+33, r10	; 0x21
    2902:	ba a2       	std	Y+34, r11	; 0x22
    2904:	cb a2       	std	Y+35, r12	; 0x23
    2906:	dc a2       	std	Y+36, r13	; 0x24
    2908:	a9 80       	ldd	r10, Y+1	; 0x01
    290a:	ba 80       	ldd	r11, Y+2	; 0x02
    290c:	cb 80       	ldd	r12, Y+3	; 0x03
    290e:	dc 80       	ldd	r13, Y+4	; 0x04
    2910:	ed 80       	ldd	r14, Y+5	; 0x05
    2912:	fe 2c       	mov	r15, r14
    2914:	0e 2d       	mov	r16, r14
    2916:	1e 2d       	mov	r17, r14
    2918:	28 2f       	mov	r18, r24
    291a:	37 2d       	mov	r19, r7
    291c:	40 e0       	ldi	r20, 0x00	; 0
    291e:	50 e0       	ldi	r21, 0x00	; 0
    2920:	60 e0       	ldi	r22, 0x00	; 0
    2922:	70 e0       	ldi	r23, 0x00	; 0
    2924:	80 e0       	ldi	r24, 0x00	; 0
    2926:	90 e0       	ldi	r25, 0x00	; 0
    2928:	0e 94 1b 29 	call	0x5236	; 0x5236 <__muldi3>
    292c:	12 2f       	mov	r17, r18
    292e:	3d a3       	std	Y+37, r19	; 0x25
    2930:	4d 8f       	std	Y+29, r20	; 0x1d
    2932:	b5 2f       	mov	r27, r21
    2934:	f6 2f       	mov	r31, r22
    2936:	e7 2f       	mov	r30, r23
    2938:	78 2e       	mov	r7, r24
    293a:	89 2e       	mov	r8, r25
    293c:	a0 e0       	ldi	r26, 0x00	; 0
    293e:	0e 94 c1 29 	call	0x5382	; 0x5382 <__cmpdi2_s8>
    2942:	84 f4       	brge	.+32     	; 0x2964 <_ZN6MS58379calculateEv+0x2ce>
    2944:	21 50       	subi	r18, 0x01	; 1
    2946:	31 09       	sbc	r19, r1
    2948:	40 48       	sbci	r20, 0x80	; 128
    294a:	5f 4f       	sbci	r21, 0xFF	; 255
    294c:	6f 4f       	sbci	r22, 0xFF	; 255
    294e:	7f 4f       	sbci	r23, 0xFF	; 255
    2950:	8f 4f       	sbci	r24, 0xFF	; 255
    2952:	9f 4f       	sbci	r25, 0xFF	; 255
    2954:	12 2f       	mov	r17, r18
    2956:	3d a3       	std	Y+37, r19	; 0x25
    2958:	4d 8f       	std	Y+29, r20	; 0x1d
    295a:	b5 2f       	mov	r27, r21
    295c:	f6 2f       	mov	r31, r22
    295e:	e7 2f       	mov	r30, r23
    2960:	78 2e       	mov	r7, r24
    2962:	89 2e       	mov	r8, r25
    2964:	21 2f       	mov	r18, r17
    2966:	3d a1       	ldd	r19, Y+37	; 0x25
    2968:	4d 8d       	ldd	r20, Y+29	; 0x1d
    296a:	5b 2f       	mov	r21, r27
    296c:	6f 2f       	mov	r22, r31
    296e:	7e 2f       	mov	r23, r30
    2970:	87 2d       	mov	r24, r7
    2972:	98 2d       	mov	r25, r8
    2974:	07 e1       	ldi	r16, 0x17	; 23
    2976:	0e 94 85 29 	call	0x530a	; 0x530a <__ashrdi3>
    297a:	82 2e       	mov	r8, r18
    297c:	93 2e       	mov	r9, r19
    297e:	a4 2e       	mov	r10, r20
    2980:	b5 2e       	mov	r11, r21
    2982:	24 01       	movw	r4, r8
    2984:	35 01       	movw	r6, r10
    2986:	00 ed       	ldi	r16, 0xD0	; 208
    2988:	40 0e       	add	r4, r16
    298a:	07 e0       	ldi	r16, 0x07	; 7
    298c:	50 1e       	adc	r5, r16
    298e:	61 1c       	adc	r6, r1
    2990:	71 1c       	adc	r7, r1
	
	//Second order compensation
	if ( _model == MS5837_02BA ) {
		if((TEMP/100)<20){         //Low temp
    2992:	10 ed       	ldi	r17, 0xD0	; 208
    2994:	41 16       	cp	r4, r17
    2996:	17 e0       	ldi	r17, 0x07	; 7
    2998:	51 06       	cpc	r5, r17
    299a:	61 04       	cpc	r6, r1
    299c:	71 04       	cpc	r7, r1
    299e:	0c f4       	brge	.+2      	; 0x29a2 <_ZN6MS58379calculateEv+0x30c>
    29a0:	62 c1       	rjmp	.+708    	; 0x2c66 <_ZN6MS58379calculateEv+0x5d0>
	int32_t dT = 0;
	int64_t SENS = 0;
	int64_t OFF = 0;
	int32_t SENSi = 0;
	int32_t OFFi = 0;
	int32_t Ti = 0;
    29a2:	81 2c       	mov	r8, r1
    29a4:	91 2c       	mov	r9, r1
    29a6:	54 01       	movw	r10, r8
	
	int32_t dT = 0;
	int64_t SENS = 0;
	int64_t OFF = 0;
	int32_t SENSi = 0;
	int32_t OFFi = 0;
    29a8:	19 82       	std	Y+1, r1	; 0x01
    29aa:	1a 82       	std	Y+2, r1	; 0x02
    29ac:	1b 82       	std	Y+3, r1	; 0x03
    29ae:	1c 82       	std	Y+4, r1	; 0x04
	// Do conversion first and then second order temp compensation
	
	int32_t dT = 0;
	int64_t SENS = 0;
	int64_t OFF = 0;
	int32_t SENSi = 0;
    29b0:	e1 2c       	mov	r14, r1
    29b2:	f1 2c       	mov	r15, r1
    29b4:	87 01       	movw	r16, r14
    29b6:	4c c3       	rjmp	.+1688   	; 0x3050 <_ZN6MS58379calculateEv+0x9ba>
	if ( _model == MS5837_02BA ) {
		SENS = int64_t(C[1])*65536l+(int64_t(C[3])*dT)/128l;
		OFF = int64_t(C[2])*131072l+(int64_t(C[4])*dT)/64l;
		P = (D1*SENS/(2097152l)-OFF)/(32768l);
	} else {
		SENS = int64_t(C[1])*32768l+(int64_t(C[3])*dT)/256l;
    29b8:	69 80       	ldd	r6, Y+1	; 0x01
    29ba:	7a 80       	ldd	r7, Y+2	; 0x02
    29bc:	8b 80       	ldd	r8, Y+3	; 0x03
    29be:	9c 80       	ldd	r9, Y+4	; 0x04
    29c0:	99 0c       	add	r9, r9
    29c2:	66 08       	sbc	r6, r6
    29c4:	76 2c       	mov	r7, r6
    29c6:	43 01       	movw	r8, r6
    29c8:	6d 82       	std	Y+5, r6	; 0x05
    29ca:	7e 82       	std	Y+6, r7	; 0x06
    29cc:	8f 82       	std	Y+7, r8	; 0x07
    29ce:	98 86       	std	Y+8, r9	; 0x08
    29d0:	86 81       	ldd	r24, Z+6	; 0x06
    29d2:	97 81       	ldd	r25, Z+7	; 0x07
    29d4:	3c 01       	movw	r6, r24
    29d6:	81 2c       	mov	r8, r1
    29d8:	91 2c       	mov	r9, r1
    29da:	a1 2c       	mov	r10, r1
    29dc:	b1 2c       	mov	r11, r1
    29de:	65 01       	movw	r12, r10
    29e0:	8d 8f       	std	Y+29, r24	; 0x1d
    29e2:	7e 8e       	std	Y+30, r7	; 0x1e
    29e4:	8f 8e       	std	Y+31, r8	; 0x1f
    29e6:	98 a2       	std	Y+32, r9	; 0x20
    29e8:	a9 a2       	std	Y+33, r10	; 0x21
    29ea:	ba a2       	std	Y+34, r11	; 0x22
    29ec:	cb a2       	std	Y+35, r12	; 0x23
    29ee:	dc a2       	std	Y+36, r13	; 0x24
    29f0:	a9 80       	ldd	r10, Y+1	; 0x01
    29f2:	ba 80       	ldd	r11, Y+2	; 0x02
    29f4:	cb 80       	ldd	r12, Y+3	; 0x03
    29f6:	dc 80       	ldd	r13, Y+4	; 0x04
    29f8:	ed 80       	ldd	r14, Y+5	; 0x05
    29fa:	fe 2c       	mov	r15, r14
    29fc:	0e 2d       	mov	r16, r14
    29fe:	1e 2d       	mov	r17, r14
    2a00:	28 2f       	mov	r18, r24
    2a02:	37 2d       	mov	r19, r7
    2a04:	40 e0       	ldi	r20, 0x00	; 0
    2a06:	50 e0       	ldi	r21, 0x00	; 0
    2a08:	60 e0       	ldi	r22, 0x00	; 0
    2a0a:	70 e0       	ldi	r23, 0x00	; 0
    2a0c:	80 e0       	ldi	r24, 0x00	; 0
    2a0e:	90 e0       	ldi	r25, 0x00	; 0
    2a10:	0e 94 1b 29 	call	0x5236	; 0x5236 <__muldi3>
    2a14:	12 2f       	mov	r17, r18
    2a16:	3e 87       	std	Y+14, r19	; 0x0e
    2a18:	4d 87       	std	Y+13, r20	; 0x0d
    2a1a:	b5 2f       	mov	r27, r21
    2a1c:	f6 2f       	mov	r31, r22
    2a1e:	e7 2f       	mov	r30, r23
    2a20:	78 2e       	mov	r7, r24
    2a22:	89 2e       	mov	r8, r25
    2a24:	a0 e0       	ldi	r26, 0x00	; 0
    2a26:	0e 94 c1 29 	call	0x5382	; 0x5382 <__cmpdi2_s8>
    2a2a:	84 f4       	brge	.+32     	; 0x2a4c <_ZN6MS58379calculateEv+0x3b6>
    2a2c:	21 50       	subi	r18, 0x01	; 1
    2a2e:	3f 4f       	sbci	r19, 0xFF	; 255
    2a30:	4f 4f       	sbci	r20, 0xFF	; 255
    2a32:	5f 4f       	sbci	r21, 0xFF	; 255
    2a34:	6f 4f       	sbci	r22, 0xFF	; 255
    2a36:	7f 4f       	sbci	r23, 0xFF	; 255
    2a38:	8f 4f       	sbci	r24, 0xFF	; 255
    2a3a:	9f 4f       	sbci	r25, 0xFF	; 255
    2a3c:	12 2f       	mov	r17, r18
    2a3e:	3e 87       	std	Y+14, r19	; 0x0e
    2a40:	4d 87       	std	Y+13, r20	; 0x0d
    2a42:	b5 2f       	mov	r27, r21
    2a44:	f6 2f       	mov	r31, r22
    2a46:	e7 2f       	mov	r30, r23
    2a48:	78 2e       	mov	r7, r24
    2a4a:	89 2e       	mov	r8, r25
    2a4c:	21 2f       	mov	r18, r17
    2a4e:	3e 85       	ldd	r19, Y+14	; 0x0e
    2a50:	4d 85       	ldd	r20, Y+13	; 0x0d
    2a52:	5b 2f       	mov	r21, r27
    2a54:	6f 2f       	mov	r22, r31
    2a56:	7e 2f       	mov	r23, r30
    2a58:	87 2d       	mov	r24, r7
    2a5a:	98 2d       	mov	r25, r8
    2a5c:	08 e0       	ldi	r16, 0x08	; 8
    2a5e:	0e 94 85 29 	call	0x530a	; 0x530a <__ashrdi3>
    2a62:	82 2e       	mov	r8, r18
    2a64:	93 2e       	mov	r9, r19
    2a66:	74 2e       	mov	r7, r20
    2a68:	65 2e       	mov	r6, r21
    2a6a:	b6 2f       	mov	r27, r22
    2a6c:	a7 2f       	mov	r26, r23
    2a6e:	58 2e       	mov	r5, r24
    2a70:	49 2e       	mov	r4, r25
    2a72:	f1 01       	movw	r30, r2
    2a74:	a2 80       	ldd	r10, Z+2	; 0x02
    2a76:	b3 80       	ldd	r11, Z+3	; 0x03
    2a78:	2a 2d       	mov	r18, r10
    2a7a:	3b 2d       	mov	r19, r11
    2a7c:	40 e0       	ldi	r20, 0x00	; 0
    2a7e:	50 e0       	ldi	r21, 0x00	; 0
    2a80:	60 e0       	ldi	r22, 0x00	; 0
    2a82:	70 e0       	ldi	r23, 0x00	; 0
    2a84:	80 e0       	ldi	r24, 0x00	; 0
    2a86:	90 e0       	ldi	r25, 0x00	; 0
    2a88:	0f e0       	ldi	r16, 0x0F	; 15
    2a8a:	0e 94 6c 29 	call	0x52d8	; 0x52d8 <__ashldi3>
    2a8e:	a2 2e       	mov	r10, r18
    2a90:	b3 2e       	mov	r11, r19
    2a92:	c4 2e       	mov	r12, r20
    2a94:	d5 2e       	mov	r13, r21
    2a96:	e6 2e       	mov	r14, r22
    2a98:	f7 2e       	mov	r15, r23
    2a9a:	08 2f       	mov	r16, r24
    2a9c:	19 2f       	mov	r17, r25
    2a9e:	28 2d       	mov	r18, r8
    2aa0:	39 2d       	mov	r19, r9
    2aa2:	47 2d       	mov	r20, r7
    2aa4:	56 2d       	mov	r21, r6
    2aa6:	6b 2f       	mov	r22, r27
    2aa8:	7a 2f       	mov	r23, r26
    2aaa:	85 2d       	mov	r24, r5
    2aac:	94 2d       	mov	r25, r4
    2aae:	0e 94 a3 29 	call	0x5346	; 0x5346 <__adddi3>
    2ab2:	2d 8b       	std	Y+21, r18	; 0x15
    2ab4:	3e 8b       	std	Y+22, r19	; 0x16
    2ab6:	4f 8b       	std	Y+23, r20	; 0x17
    2ab8:	58 8f       	std	Y+24, r21	; 0x18
    2aba:	69 8f       	std	Y+25, r22	; 0x19
    2abc:	7a 8f       	std	Y+26, r23	; 0x1a
    2abe:	8b 8f       	std	Y+27, r24	; 0x1b
    2ac0:	9c 8f       	std	Y+28, r25	; 0x1c
		OFF = int64_t(C[2])*65536l+(int64_t(C[4])*dT)/128l;
    2ac2:	80 85       	ldd	r24, Z+8	; 0x08
    2ac4:	91 85       	ldd	r25, Z+9	; 0x09
    2ac6:	3c 01       	movw	r6, r24
    2ac8:	81 2c       	mov	r8, r1
    2aca:	91 2c       	mov	r9, r1
    2acc:	a1 2c       	mov	r10, r1
    2ace:	b1 2c       	mov	r11, r1
    2ad0:	65 01       	movw	r12, r10
    2ad2:	8d 8f       	std	Y+29, r24	; 0x1d
    2ad4:	7e 8e       	std	Y+30, r7	; 0x1e
    2ad6:	8f 8e       	std	Y+31, r8	; 0x1f
    2ad8:	98 a2       	std	Y+32, r9	; 0x20
    2ada:	a9 a2       	std	Y+33, r10	; 0x21
    2adc:	ba a2       	std	Y+34, r11	; 0x22
    2ade:	cb a2       	std	Y+35, r12	; 0x23
    2ae0:	dc a2       	std	Y+36, r13	; 0x24
    2ae2:	a9 80       	ldd	r10, Y+1	; 0x01
    2ae4:	ba 80       	ldd	r11, Y+2	; 0x02
    2ae6:	cb 80       	ldd	r12, Y+3	; 0x03
    2ae8:	dc 80       	ldd	r13, Y+4	; 0x04
    2aea:	ed 80       	ldd	r14, Y+5	; 0x05
    2aec:	fe 2c       	mov	r15, r14
    2aee:	0e 2d       	mov	r16, r14
    2af0:	1e 2d       	mov	r17, r14
    2af2:	28 2f       	mov	r18, r24
    2af4:	37 2d       	mov	r19, r7
    2af6:	40 e0       	ldi	r20, 0x00	; 0
    2af8:	50 e0       	ldi	r21, 0x00	; 0
    2afa:	60 e0       	ldi	r22, 0x00	; 0
    2afc:	70 e0       	ldi	r23, 0x00	; 0
    2afe:	80 e0       	ldi	r24, 0x00	; 0
    2b00:	90 e0       	ldi	r25, 0x00	; 0
    2b02:	0e 94 1b 29 	call	0x5236	; 0x5236 <__muldi3>
    2b06:	12 2f       	mov	r17, r18
    2b08:	3e 87       	std	Y+14, r19	; 0x0e
    2b0a:	4d 87       	std	Y+13, r20	; 0x0d
    2b0c:	b5 2f       	mov	r27, r21
    2b0e:	f6 2f       	mov	r31, r22
    2b10:	e7 2f       	mov	r30, r23
    2b12:	78 2e       	mov	r7, r24
    2b14:	89 2e       	mov	r8, r25
    2b16:	a0 e0       	ldi	r26, 0x00	; 0
    2b18:	0e 94 c1 29 	call	0x5382	; 0x5382 <__cmpdi2_s8>
    2b1c:	5c f4       	brge	.+22     	; 0x2b34 <_ZN6MS58379calculateEv+0x49e>
    2b1e:	af e7       	ldi	r26, 0x7F	; 127
    2b20:	0e 94 ac 29 	call	0x5358	; 0x5358 <__adddi3_s8>
    2b24:	12 2f       	mov	r17, r18
    2b26:	3e 87       	std	Y+14, r19	; 0x0e
    2b28:	4d 87       	std	Y+13, r20	; 0x0d
    2b2a:	b5 2f       	mov	r27, r21
    2b2c:	f6 2f       	mov	r31, r22
    2b2e:	e7 2f       	mov	r30, r23
    2b30:	78 2e       	mov	r7, r24
    2b32:	89 2e       	mov	r8, r25
    2b34:	21 2f       	mov	r18, r17
    2b36:	3e 85       	ldd	r19, Y+14	; 0x0e
    2b38:	4d 85       	ldd	r20, Y+13	; 0x0d
    2b3a:	5b 2f       	mov	r21, r27
    2b3c:	6f 2f       	mov	r22, r31
    2b3e:	7e 2f       	mov	r23, r30
    2b40:	87 2d       	mov	r24, r7
    2b42:	98 2d       	mov	r25, r8
    2b44:	07 e0       	ldi	r16, 0x07	; 7
    2b46:	0e 94 85 29 	call	0x530a	; 0x530a <__ashrdi3>
    2b4a:	82 2e       	mov	r8, r18
    2b4c:	93 2e       	mov	r9, r19
    2b4e:	74 2e       	mov	r7, r20
    2b50:	65 2e       	mov	r6, r21
    2b52:	b6 2f       	mov	r27, r22
    2b54:	a7 2f       	mov	r26, r23
    2b56:	58 2e       	mov	r5, r24
    2b58:	49 2e       	mov	r4, r25
    2b5a:	f1 01       	movw	r30, r2
    2b5c:	24 81       	ldd	r18, Z+4	; 0x04
    2b5e:	35 81       	ldd	r19, Z+5	; 0x05
    2b60:	59 01       	movw	r10, r18
    2b62:	3b 2d       	mov	r19, r11
    2b64:	40 e0       	ldi	r20, 0x00	; 0
    2b66:	50 e0       	ldi	r21, 0x00	; 0
    2b68:	60 e0       	ldi	r22, 0x00	; 0
    2b6a:	70 e0       	ldi	r23, 0x00	; 0
    2b6c:	80 e0       	ldi	r24, 0x00	; 0
    2b6e:	90 e0       	ldi	r25, 0x00	; 0
    2b70:	00 e1       	ldi	r16, 0x10	; 16
    2b72:	0e 94 6c 29 	call	0x52d8	; 0x52d8 <__ashldi3>
    2b76:	a2 2e       	mov	r10, r18
    2b78:	b3 2e       	mov	r11, r19
    2b7a:	c4 2e       	mov	r12, r20
    2b7c:	d5 2e       	mov	r13, r21
    2b7e:	e6 2e       	mov	r14, r22
    2b80:	f7 2e       	mov	r15, r23
    2b82:	08 2f       	mov	r16, r24
    2b84:	19 2f       	mov	r17, r25
    2b86:	28 2d       	mov	r18, r8
    2b88:	39 2d       	mov	r19, r9
    2b8a:	47 2d       	mov	r20, r7
    2b8c:	56 2d       	mov	r21, r6
    2b8e:	6b 2f       	mov	r22, r27
    2b90:	7a 2f       	mov	r23, r26
    2b92:	85 2d       	mov	r24, r5
    2b94:	94 2d       	mov	r25, r4
    2b96:	0e 94 a3 29 	call	0x5346	; 0x5346 <__adddi3>
    2b9a:	2d 87       	std	Y+13, r18	; 0x0d
    2b9c:	3e 87       	std	Y+14, r19	; 0x0e
    2b9e:	4f 87       	std	Y+15, r20	; 0x0f
    2ba0:	58 8b       	std	Y+16, r21	; 0x10
    2ba2:	69 8b       	std	Y+17, r22	; 0x11
    2ba4:	7a 8b       	std	Y+18, r23	; 0x12
    2ba6:	8b 8b       	std	Y+19, r24	; 0x13
    2ba8:	9c 8b       	std	Y+20, r25	; 0x14
		P = (D1*SENS/(2097152l)-OFF)/(8192l);
	}
	
	// Temp conversion
	TEMP = 2000l+int64_t(dT)*C[6]/8388608LL;
    2baa:	84 85       	ldd	r24, Z+12	; 0x0c
    2bac:	95 85       	ldd	r25, Z+13	; 0x0d
    2bae:	3c 01       	movw	r6, r24
    2bb0:	81 2c       	mov	r8, r1
    2bb2:	91 2c       	mov	r9, r1
    2bb4:	a1 2c       	mov	r10, r1
    2bb6:	b1 2c       	mov	r11, r1
    2bb8:	65 01       	movw	r12, r10
    2bba:	8d 8f       	std	Y+29, r24	; 0x1d
    2bbc:	7e 8e       	std	Y+30, r7	; 0x1e
    2bbe:	8f 8e       	std	Y+31, r8	; 0x1f
    2bc0:	98 a2       	std	Y+32, r9	; 0x20
    2bc2:	a9 a2       	std	Y+33, r10	; 0x21
    2bc4:	ba a2       	std	Y+34, r11	; 0x22
    2bc6:	cb a2       	std	Y+35, r12	; 0x23
    2bc8:	dc a2       	std	Y+36, r13	; 0x24
    2bca:	a9 80       	ldd	r10, Y+1	; 0x01
    2bcc:	ba 80       	ldd	r11, Y+2	; 0x02
    2bce:	cb 80       	ldd	r12, Y+3	; 0x03
    2bd0:	dc 80       	ldd	r13, Y+4	; 0x04
    2bd2:	ed 80       	ldd	r14, Y+5	; 0x05
    2bd4:	fe 2c       	mov	r15, r14
    2bd6:	0e 2d       	mov	r16, r14
    2bd8:	1e 2d       	mov	r17, r14
    2bda:	28 2f       	mov	r18, r24
    2bdc:	37 2d       	mov	r19, r7
    2bde:	40 e0       	ldi	r20, 0x00	; 0
    2be0:	50 e0       	ldi	r21, 0x00	; 0
    2be2:	60 e0       	ldi	r22, 0x00	; 0
    2be4:	70 e0       	ldi	r23, 0x00	; 0
    2be6:	80 e0       	ldi	r24, 0x00	; 0
    2be8:	90 e0       	ldi	r25, 0x00	; 0
    2bea:	0e 94 1b 29 	call	0x5236	; 0x5236 <__muldi3>
    2bee:	12 2f       	mov	r17, r18
    2bf0:	3d a3       	std	Y+37, r19	; 0x25
    2bf2:	4d 8f       	std	Y+29, r20	; 0x1d
    2bf4:	b5 2f       	mov	r27, r21
    2bf6:	f6 2f       	mov	r31, r22
    2bf8:	e7 2f       	mov	r30, r23
    2bfa:	78 2e       	mov	r7, r24
    2bfc:	89 2e       	mov	r8, r25
    2bfe:	a0 e0       	ldi	r26, 0x00	; 0
    2c00:	0e 94 c1 29 	call	0x5382	; 0x5382 <__cmpdi2_s8>
    2c04:	84 f4       	brge	.+32     	; 0x2c26 <_ZN6MS58379calculateEv+0x590>
    2c06:	21 50       	subi	r18, 0x01	; 1
    2c08:	31 09       	sbc	r19, r1
    2c0a:	40 48       	sbci	r20, 0x80	; 128
    2c0c:	5f 4f       	sbci	r21, 0xFF	; 255
    2c0e:	6f 4f       	sbci	r22, 0xFF	; 255
    2c10:	7f 4f       	sbci	r23, 0xFF	; 255
    2c12:	8f 4f       	sbci	r24, 0xFF	; 255
    2c14:	9f 4f       	sbci	r25, 0xFF	; 255
    2c16:	12 2f       	mov	r17, r18
    2c18:	3d a3       	std	Y+37, r19	; 0x25
    2c1a:	4d 8f       	std	Y+29, r20	; 0x1d
    2c1c:	b5 2f       	mov	r27, r21
    2c1e:	f6 2f       	mov	r31, r22
    2c20:	e7 2f       	mov	r30, r23
    2c22:	78 2e       	mov	r7, r24
    2c24:	89 2e       	mov	r8, r25
    2c26:	21 2f       	mov	r18, r17
    2c28:	3d a1       	ldd	r19, Y+37	; 0x25
    2c2a:	4d 8d       	ldd	r20, Y+29	; 0x1d
    2c2c:	5b 2f       	mov	r21, r27
    2c2e:	6f 2f       	mov	r22, r31
    2c30:	7e 2f       	mov	r23, r30
    2c32:	87 2d       	mov	r24, r7
    2c34:	98 2d       	mov	r25, r8
    2c36:	07 e1       	ldi	r16, 0x17	; 23
    2c38:	0e 94 85 29 	call	0x530a	; 0x530a <__ashrdi3>
    2c3c:	82 2e       	mov	r8, r18
    2c3e:	93 2e       	mov	r9, r19
    2c40:	a4 2e       	mov	r10, r20
    2c42:	b5 2e       	mov	r11, r21
    2c44:	24 01       	movw	r4, r8
    2c46:	35 01       	movw	r6, r10
    2c48:	00 ed       	ldi	r16, 0xD0	; 208
    2c4a:	40 0e       	add	r4, r16
    2c4c:	07 e0       	ldi	r16, 0x07	; 7
    2c4e:	50 1e       	adc	r5, r16
    2c50:	61 1c       	adc	r6, r1
    2c52:	71 1c       	adc	r7, r1
			Ti = (11*int64_t(dT)*int64_t(dT))/(34359738368LL);
			OFFi = (31*(TEMP-2000)*(TEMP-2000))/8;
			SENSi = (63*(TEMP-2000)*(TEMP-2000))/32;
		}
		} else {
		if((TEMP/100)<20){         //Low temp
    2c54:	10 ed       	ldi	r17, 0xD0	; 208
    2c56:	41 16       	cp	r4, r17
    2c58:	17 e0       	ldi	r17, 0x07	; 7
    2c5a:	51 06       	cpc	r5, r17
    2c5c:	61 04       	cpc	r6, r1
    2c5e:	71 04       	cpc	r7, r1
    2c60:	0c f4       	brge	.+2      	; 0x2c64 <_ZN6MS58379calculateEv+0x5ce>
    2c62:	af c0       	rjmp	.+350    	; 0x2dc2 <_ZN6MS58379calculateEv+0x72c>
    2c64:	8a c1       	rjmp	.+788    	; 0x2f7a <_ZN6MS58379calculateEv+0x8e4>
	TEMP = 2000l+int64_t(dT)*C[6]/8388608LL;
	
	//Second order compensation
	if ( _model == MS5837_02BA ) {
		if((TEMP/100)<20){         //Low temp
			Ti = (11*int64_t(dT)*int64_t(dT))/(34359738368LL);
    2c66:	29 81       	ldd	r18, Y+1	; 0x01
    2c68:	3a 81       	ldd	r19, Y+2	; 0x02
    2c6a:	4b 81       	ldd	r20, Y+3	; 0x03
    2c6c:	5c 81       	ldd	r21, Y+4	; 0x04
    2c6e:	6d 81       	ldd	r22, Y+5	; 0x05
    2c70:	76 2f       	mov	r23, r22
    2c72:	86 2f       	mov	r24, r22
    2c74:	96 2f       	mov	r25, r22
    2c76:	02 e0       	ldi	r16, 0x02	; 2
    2c78:	0e 94 6c 29 	call	0x52d8	; 0x52d8 <__ashldi3>
    2c7c:	a2 2e       	mov	r10, r18
    2c7e:	b3 2e       	mov	r11, r19
    2c80:	c4 2e       	mov	r12, r20
    2c82:	d5 2e       	mov	r13, r21
    2c84:	e6 2e       	mov	r14, r22
    2c86:	f7 2e       	mov	r15, r23
    2c88:	e8 2f       	mov	r30, r24
    2c8a:	19 2f       	mov	r17, r25
    2c8c:	0e 94 6c 29 	call	0x52d8	; 0x52d8 <__ashldi3>
    2c90:	0e 2f       	mov	r16, r30
    2c92:	0e 94 b8 29 	call	0x5370	; 0x5370 <__subdi3>
    2c96:	a9 80       	ldd	r10, Y+1	; 0x01
    2c98:	ba 80       	ldd	r11, Y+2	; 0x02
    2c9a:	cb 80       	ldd	r12, Y+3	; 0x03
    2c9c:	dc 80       	ldd	r13, Y+4	; 0x04
    2c9e:	ed 80       	ldd	r14, Y+5	; 0x05
    2ca0:	fe 2c       	mov	r15, r14
    2ca2:	0e 2d       	mov	r16, r14
    2ca4:	1e 2d       	mov	r17, r14
    2ca6:	0e 94 b8 29 	call	0x5370	; 0x5370 <__subdi3>
    2caa:	e0 2e       	mov	r14, r16
    2cac:	0f 2d       	mov	r16, r15
    2cae:	0e 94 1b 29 	call	0x5236	; 0x5236 <__muldi3>
    2cb2:	12 2f       	mov	r17, r18
    2cb4:	3d 8f       	std	Y+29, r19	; 0x1d
    2cb6:	4d 83       	std	Y+5, r20	; 0x05
    2cb8:	b5 2f       	mov	r27, r21
    2cba:	f6 2f       	mov	r31, r22
    2cbc:	e7 2f       	mov	r30, r23
    2cbe:	89 83       	std	Y+1, r24	; 0x01
    2cc0:	89 2e       	mov	r8, r25
    2cc2:	a0 e0       	ldi	r26, 0x00	; 0
    2cc4:	0e 94 c1 29 	call	0x5382	; 0x5382 <__cmpdi2_s8>
    2cc8:	84 f4       	brge	.+32     	; 0x2cea <_ZN6MS58379calculateEv+0x654>
    2cca:	21 50       	subi	r18, 0x01	; 1
    2ccc:	31 09       	sbc	r19, r1
    2cce:	41 09       	sbc	r20, r1
    2cd0:	51 09       	sbc	r21, r1
    2cd2:	68 4f       	sbci	r22, 0xF8	; 248
    2cd4:	7f 4f       	sbci	r23, 0xFF	; 255
    2cd6:	8f 4f       	sbci	r24, 0xFF	; 255
    2cd8:	9f 4f       	sbci	r25, 0xFF	; 255
    2cda:	12 2f       	mov	r17, r18
    2cdc:	3d 8f       	std	Y+29, r19	; 0x1d
    2cde:	4d 83       	std	Y+5, r20	; 0x05
    2ce0:	b5 2f       	mov	r27, r21
    2ce2:	f6 2f       	mov	r31, r22
    2ce4:	e7 2f       	mov	r30, r23
    2ce6:	89 83       	std	Y+1, r24	; 0x01
    2ce8:	89 2e       	mov	r8, r25
    2cea:	21 2f       	mov	r18, r17
    2cec:	3d 8d       	ldd	r19, Y+29	; 0x1d
    2cee:	4d 81       	ldd	r20, Y+5	; 0x05
    2cf0:	5b 2f       	mov	r21, r27
    2cf2:	6f 2f       	mov	r22, r31
    2cf4:	7e 2f       	mov	r23, r30
    2cf6:	89 81       	ldd	r24, Y+1	; 0x01
    2cf8:	98 2d       	mov	r25, r8
    2cfa:	03 e2       	ldi	r16, 0x23	; 35
    2cfc:	0e 94 85 29 	call	0x530a	; 0x530a <__ashrdi3>
    2d00:	82 2e       	mov	r8, r18
    2d02:	93 2e       	mov	r9, r19
    2d04:	a4 2e       	mov	r10, r20
    2d06:	b5 2e       	mov	r11, r21
			OFFi = (31*(TEMP-2000)*(TEMP-2000))/8;
    2d08:	73 01       	movw	r14, r6
    2d0a:	62 01       	movw	r12, r4
    2d0c:	20 ed       	ldi	r18, 0xD0	; 208
    2d0e:	c2 1a       	sub	r12, r18
    2d10:	27 e0       	ldi	r18, 0x07	; 7
    2d12:	d2 0a       	sbc	r13, r18
    2d14:	e1 08       	sbc	r14, r1
    2d16:	f1 08       	sbc	r15, r1
    2d18:	d7 01       	movw	r26, r14
    2d1a:	c6 01       	movw	r24, r12
    2d1c:	88 0f       	add	r24, r24
    2d1e:	99 1f       	adc	r25, r25
    2d20:	aa 1f       	adc	r26, r26
    2d22:	bb 1f       	adc	r27, r27
    2d24:	88 0f       	add	r24, r24
    2d26:	99 1f       	adc	r25, r25
    2d28:	aa 1f       	adc	r26, r26
    2d2a:	bb 1f       	adc	r27, r27
    2d2c:	88 0f       	add	r24, r24
    2d2e:	99 1f       	adc	r25, r25
    2d30:	aa 1f       	adc	r26, r26
    2d32:	bb 1f       	adc	r27, r27
    2d34:	88 0f       	add	r24, r24
    2d36:	99 1f       	adc	r25, r25
    2d38:	aa 1f       	adc	r26, r26
    2d3a:	bb 1f       	adc	r27, r27
    2d3c:	88 0f       	add	r24, r24
    2d3e:	99 1f       	adc	r25, r25
    2d40:	aa 1f       	adc	r26, r26
    2d42:	bb 1f       	adc	r27, r27
    2d44:	9c 01       	movw	r18, r24
    2d46:	ad 01       	movw	r20, r26
    2d48:	2c 19       	sub	r18, r12
    2d4a:	3d 09       	sbc	r19, r13
    2d4c:	4e 09       	sbc	r20, r14
    2d4e:	5f 09       	sbc	r21, r15
    2d50:	c7 01       	movw	r24, r14
    2d52:	b6 01       	movw	r22, r12
    2d54:	0e 94 d8 28 	call	0x51b0	; 0x51b0 <__mulsi3>
    2d58:	8b 01       	movw	r16, r22
    2d5a:	9c 01       	movw	r18, r24
    2d5c:	99 23       	and	r25, r25
    2d5e:	24 f4       	brge	.+8      	; 0x2d68 <_ZN6MS58379calculateEv+0x6d2>
    2d60:	09 5f       	subi	r16, 0xF9	; 249
    2d62:	1f 4f       	sbci	r17, 0xFF	; 255
    2d64:	2f 4f       	sbci	r18, 0xFF	; 255
    2d66:	3f 4f       	sbci	r19, 0xFF	; 255
    2d68:	b9 01       	movw	r22, r18
    2d6a:	a8 01       	movw	r20, r16
    2d6c:	68 94       	set
    2d6e:	12 f8       	bld	r1, 2
    2d70:	75 95       	asr	r23
    2d72:	67 95       	ror	r22
    2d74:	57 95       	ror	r21
    2d76:	47 95       	ror	r20
    2d78:	16 94       	lsr	r1
    2d7a:	d1 f7       	brne	.-12     	; 0x2d70 <_ZN6MS58379calculateEv+0x6da>
    2d7c:	49 83       	std	Y+1, r20	; 0x01
    2d7e:	5a 83       	std	Y+2, r21	; 0x02
    2d80:	6b 83       	std	Y+3, r22	; 0x03
    2d82:	7c 83       	std	Y+4, r23	; 0x04
			SENSi = (63*(TEMP-2000)*(TEMP-2000))/32;
    2d84:	af e3       	ldi	r26, 0x3F	; 63
    2d86:	b0 e0       	ldi	r27, 0x00	; 0
    2d88:	a7 01       	movw	r20, r14
    2d8a:	96 01       	movw	r18, r12
    2d8c:	0e 94 11 29 	call	0x5222	; 0x5222 <__muluhisi3>
    2d90:	9b 01       	movw	r18, r22
    2d92:	ac 01       	movw	r20, r24
    2d94:	c7 01       	movw	r24, r14
    2d96:	b6 01       	movw	r22, r12
    2d98:	0e 94 d8 28 	call	0x51b0	; 0x51b0 <__mulsi3>
    2d9c:	8b 01       	movw	r16, r22
    2d9e:	9c 01       	movw	r18, r24
    2da0:	99 23       	and	r25, r25
    2da2:	24 f4       	brge	.+8      	; 0x2dac <_ZN6MS58379calculateEv+0x716>
    2da4:	01 5e       	subi	r16, 0xE1	; 225
    2da6:	1f 4f       	sbci	r17, 0xFF	; 255
    2da8:	2f 4f       	sbci	r18, 0xFF	; 255
    2daa:	3f 4f       	sbci	r19, 0xFF	; 255
    2dac:	78 01       	movw	r14, r16
    2dae:	89 01       	movw	r16, r18
    2db0:	68 94       	set
    2db2:	14 f8       	bld	r1, 4
    2db4:	15 95       	asr	r17
    2db6:	07 95       	ror	r16
    2db8:	f7 94       	ror	r15
    2dba:	e7 94       	ror	r14
    2dbc:	16 94       	lsr	r1
    2dbe:	d1 f7       	brne	.-12     	; 0x2db4 <_ZN6MS58379calculateEv+0x71e>
    2dc0:	47 c1       	rjmp	.+654    	; 0x3050 <_ZN6MS58379calculateEv+0x9ba>
		}
		} else {
		if((TEMP/100)<20){         //Low temp
			Ti = (3*int64_t(dT)*int64_t(dT))/(8589934592LL);
    2dc2:	29 81       	ldd	r18, Y+1	; 0x01
    2dc4:	3a 81       	ldd	r19, Y+2	; 0x02
    2dc6:	4b 81       	ldd	r20, Y+3	; 0x03
    2dc8:	5c 81       	ldd	r21, Y+4	; 0x04
    2dca:	6d 81       	ldd	r22, Y+5	; 0x05
    2dcc:	76 2f       	mov	r23, r22
    2dce:	86 2f       	mov	r24, r22
    2dd0:	96 2f       	mov	r25, r22
    2dd2:	01 e0       	ldi	r16, 0x01	; 1
    2dd4:	0e 94 6c 29 	call	0x52d8	; 0x52d8 <__ashldi3>
    2dd8:	a9 80       	ldd	r10, Y+1	; 0x01
    2dda:	ba 80       	ldd	r11, Y+2	; 0x02
    2ddc:	cb 80       	ldd	r12, Y+3	; 0x03
    2dde:	dc 80       	ldd	r13, Y+4	; 0x04
    2de0:	ed 80       	ldd	r14, Y+5	; 0x05
    2de2:	fe 2c       	mov	r15, r14
    2de4:	0e 2d       	mov	r16, r14
    2de6:	1e 2d       	mov	r17, r14
    2de8:	0e 94 a3 29 	call	0x5346	; 0x5346 <__adddi3>
    2dec:	e0 2e       	mov	r14, r16
    2dee:	0f 2d       	mov	r16, r15
    2df0:	0e 94 1b 29 	call	0x5236	; 0x5236 <__muldi3>
    2df4:	12 2f       	mov	r17, r18
    2df6:	3d 8f       	std	Y+29, r19	; 0x1d
    2df8:	4d 83       	std	Y+5, r20	; 0x05
    2dfa:	b5 2f       	mov	r27, r21
    2dfc:	f6 2f       	mov	r31, r22
    2dfe:	e7 2f       	mov	r30, r23
    2e00:	89 83       	std	Y+1, r24	; 0x01
    2e02:	89 2e       	mov	r8, r25
    2e04:	a0 e0       	ldi	r26, 0x00	; 0
    2e06:	0e 94 c1 29 	call	0x5382	; 0x5382 <__cmpdi2_s8>
    2e0a:	84 f4       	brge	.+32     	; 0x2e2c <_ZN6MS58379calculateEv+0x796>
    2e0c:	21 50       	subi	r18, 0x01	; 1
    2e0e:	31 09       	sbc	r19, r1
    2e10:	41 09       	sbc	r20, r1
    2e12:	51 09       	sbc	r21, r1
    2e14:	6e 4f       	sbci	r22, 0xFE	; 254
    2e16:	7f 4f       	sbci	r23, 0xFF	; 255
    2e18:	8f 4f       	sbci	r24, 0xFF	; 255
    2e1a:	9f 4f       	sbci	r25, 0xFF	; 255
    2e1c:	12 2f       	mov	r17, r18
    2e1e:	3d 8f       	std	Y+29, r19	; 0x1d
    2e20:	4d 83       	std	Y+5, r20	; 0x05
    2e22:	b5 2f       	mov	r27, r21
    2e24:	f6 2f       	mov	r31, r22
    2e26:	e7 2f       	mov	r30, r23
    2e28:	89 83       	std	Y+1, r24	; 0x01
    2e2a:	89 2e       	mov	r8, r25
    2e2c:	21 2f       	mov	r18, r17
    2e2e:	3d 8d       	ldd	r19, Y+29	; 0x1d
    2e30:	4d 81       	ldd	r20, Y+5	; 0x05
    2e32:	5b 2f       	mov	r21, r27
    2e34:	6f 2f       	mov	r22, r31
    2e36:	7e 2f       	mov	r23, r30
    2e38:	89 81       	ldd	r24, Y+1	; 0x01
    2e3a:	98 2d       	mov	r25, r8
    2e3c:	01 e2       	ldi	r16, 0x21	; 33
    2e3e:	0e 94 85 29 	call	0x530a	; 0x530a <__ashrdi3>
    2e42:	2d 83       	std	Y+5, r18	; 0x05
    2e44:	3e 83       	std	Y+6, r19	; 0x06
    2e46:	4f 83       	std	Y+7, r20	; 0x07
    2e48:	58 87       	std	Y+8, r21	; 0x08
			OFFi = (3*(TEMP-2000)*(TEMP-2000))/2;
    2e4a:	53 01       	movw	r10, r6
    2e4c:	42 01       	movw	r8, r4
    2e4e:	50 ed       	ldi	r21, 0xD0	; 208
    2e50:	85 1a       	sub	r8, r21
    2e52:	57 e0       	ldi	r21, 0x07	; 7
    2e54:	95 0a       	sbc	r9, r21
    2e56:	a1 08       	sbc	r10, r1
    2e58:	b1 08       	sbc	r11, r1
    2e5a:	d5 01       	movw	r26, r10
    2e5c:	c4 01       	movw	r24, r8
    2e5e:	88 0f       	add	r24, r24
    2e60:	99 1f       	adc	r25, r25
    2e62:	aa 1f       	adc	r26, r26
    2e64:	bb 1f       	adc	r27, r27
    2e66:	9c 01       	movw	r18, r24
    2e68:	ad 01       	movw	r20, r26
    2e6a:	28 0d       	add	r18, r8
    2e6c:	39 1d       	adc	r19, r9
    2e6e:	4a 1d       	adc	r20, r10
    2e70:	5b 1d       	adc	r21, r11
    2e72:	c5 01       	movw	r24, r10
    2e74:	b4 01       	movw	r22, r8
    2e76:	0e 94 d8 28 	call	0x51b0	; 0x51b0 <__mulsi3>
    2e7a:	8b 01       	movw	r16, r22
    2e7c:	9c 01       	movw	r18, r24
    2e7e:	99 23       	and	r25, r25
    2e80:	24 f4       	brge	.+8      	; 0x2e8a <_ZN6MS58379calculateEv+0x7f4>
    2e82:	0f 5f       	subi	r16, 0xFF	; 255
    2e84:	1f 4f       	sbci	r17, 0xFF	; 255
    2e86:	2f 4f       	sbci	r18, 0xFF	; 255
    2e88:	3f 4f       	sbci	r19, 0xFF	; 255
    2e8a:	c9 01       	movw	r24, r18
    2e8c:	b8 01       	movw	r22, r16
    2e8e:	95 95       	asr	r25
    2e90:	87 95       	ror	r24
    2e92:	77 95       	ror	r23
    2e94:	67 95       	ror	r22
    2e96:	69 83       	std	Y+1, r22	; 0x01
    2e98:	7a 83       	std	Y+2, r23	; 0x02
    2e9a:	8b 83       	std	Y+3, r24	; 0x03
    2e9c:	9c 83       	std	Y+4, r25	; 0x04
			SENSi = (5*(TEMP-2000)*(TEMP-2000))/8;
    2e9e:	d5 01       	movw	r26, r10
    2ea0:	c4 01       	movw	r24, r8
    2ea2:	88 0f       	add	r24, r24
    2ea4:	99 1f       	adc	r25, r25
    2ea6:	aa 1f       	adc	r26, r26
    2ea8:	bb 1f       	adc	r27, r27
    2eaa:	88 0f       	add	r24, r24
    2eac:	99 1f       	adc	r25, r25
    2eae:	aa 1f       	adc	r26, r26
    2eb0:	bb 1f       	adc	r27, r27
    2eb2:	9c 01       	movw	r18, r24
    2eb4:	ad 01       	movw	r20, r26
    2eb6:	28 0d       	add	r18, r8
    2eb8:	39 1d       	adc	r19, r9
    2eba:	4a 1d       	adc	r20, r10
    2ebc:	5b 1d       	adc	r21, r11
    2ebe:	c5 01       	movw	r24, r10
    2ec0:	b4 01       	movw	r22, r8
    2ec2:	0e 94 d8 28 	call	0x51b0	; 0x51b0 <__mulsi3>
    2ec6:	8b 01       	movw	r16, r22
    2ec8:	9c 01       	movw	r18, r24
    2eca:	99 23       	and	r25, r25
    2ecc:	24 f4       	brge	.+8      	; 0x2ed6 <_ZN6MS58379calculateEv+0x840>
    2ece:	09 5f       	subi	r16, 0xF9	; 249
    2ed0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ed2:	2f 4f       	sbci	r18, 0xFF	; 255
    2ed4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ed6:	78 01       	movw	r14, r16
    2ed8:	89 01       	movw	r16, r18
    2eda:	68 94       	set
    2edc:	12 f8       	bld	r1, 2
    2ede:	15 95       	asr	r17
    2ee0:	07 95       	ror	r16
    2ee2:	f7 94       	ror	r15
    2ee4:	e7 94       	ror	r14
    2ee6:	16 94       	lsr	r1
    2ee8:	d1 f7       	brne	.-12     	; 0x2ede <_ZN6MS58379calculateEv+0x848>
			if((TEMP/100)<-15){    //Very low temp
    2eea:	71 ec       	ldi	r23, 0xC1	; 193
    2eec:	47 16       	cp	r4, r23
    2eee:	79 ef       	ldi	r23, 0xF9	; 249
    2ef0:	57 06       	cpc	r5, r23
    2ef2:	7f ef       	ldi	r23, 0xFF	; 255
    2ef4:	67 06       	cpc	r6, r23
    2ef6:	77 06       	cpc	r7, r23
    2ef8:	0c f0       	brlt	.+2      	; 0x2efc <_ZN6MS58379calculateEv+0x866>
    2efa:	7f c1       	rjmp	.+766    	; 0x31fa <_ZN6MS58379calculateEv+0xb64>
				OFFi = OFFi+7*(TEMP+1500l)*(TEMP+1500l);
    2efc:	53 01       	movw	r10, r6
    2efe:	42 01       	movw	r8, r4
    2f00:	8c ed       	ldi	r24, 0xDC	; 220
    2f02:	88 0e       	add	r8, r24
    2f04:	85 e0       	ldi	r24, 0x05	; 5
    2f06:	98 1e       	adc	r9, r24
    2f08:	a1 1c       	adc	r10, r1
    2f0a:	b1 1c       	adc	r11, r1
    2f0c:	d5 01       	movw	r26, r10
    2f0e:	c4 01       	movw	r24, r8
    2f10:	88 0f       	add	r24, r24
    2f12:	99 1f       	adc	r25, r25
    2f14:	aa 1f       	adc	r26, r26
    2f16:	bb 1f       	adc	r27, r27
    2f18:	88 0f       	add	r24, r24
    2f1a:	99 1f       	adc	r25, r25
    2f1c:	aa 1f       	adc	r26, r26
    2f1e:	bb 1f       	adc	r27, r27
    2f20:	88 0f       	add	r24, r24
    2f22:	99 1f       	adc	r25, r25
    2f24:	aa 1f       	adc	r26, r26
    2f26:	bb 1f       	adc	r27, r27
    2f28:	9c 01       	movw	r18, r24
    2f2a:	ad 01       	movw	r20, r26
    2f2c:	28 19       	sub	r18, r8
    2f2e:	39 09       	sbc	r19, r9
    2f30:	4a 09       	sbc	r20, r10
    2f32:	5b 09       	sbc	r21, r11
    2f34:	c5 01       	movw	r24, r10
    2f36:	b4 01       	movw	r22, r8
    2f38:	0e 94 d8 28 	call	0x51b0	; 0x51b0 <__mulsi3>
    2f3c:	29 81       	ldd	r18, Y+1	; 0x01
    2f3e:	3a 81       	ldd	r19, Y+2	; 0x02
    2f40:	4b 81       	ldd	r20, Y+3	; 0x03
    2f42:	5c 81       	ldd	r21, Y+4	; 0x04
    2f44:	26 0f       	add	r18, r22
    2f46:	37 1f       	adc	r19, r23
    2f48:	48 1f       	adc	r20, r24
    2f4a:	59 1f       	adc	r21, r25
    2f4c:	29 83       	std	Y+1, r18	; 0x01
    2f4e:	3a 83       	std	Y+2, r19	; 0x02
    2f50:	4b 83       	std	Y+3, r20	; 0x03
    2f52:	5c 83       	std	Y+4, r21	; 0x04
				SENSi = SENSi+4*(TEMP+1500l)*(TEMP+1500l);
    2f54:	a5 01       	movw	r20, r10
    2f56:	94 01       	movw	r18, r8
    2f58:	22 0f       	add	r18, r18
    2f5a:	33 1f       	adc	r19, r19
    2f5c:	44 1f       	adc	r20, r20
    2f5e:	55 1f       	adc	r21, r21
    2f60:	22 0f       	add	r18, r18
    2f62:	33 1f       	adc	r19, r19
    2f64:	44 1f       	adc	r20, r20
    2f66:	55 1f       	adc	r21, r21
    2f68:	c5 01       	movw	r24, r10
    2f6a:	b4 01       	movw	r22, r8
    2f6c:	0e 94 d8 28 	call	0x51b0	; 0x51b0 <__mulsi3>
    2f70:	e6 0e       	add	r14, r22
    2f72:	f7 1e       	adc	r15, r23
    2f74:	08 1f       	adc	r16, r24
    2f76:	19 1f       	adc	r17, r25
    2f78:	40 c1       	rjmp	.+640    	; 0x31fa <_ZN6MS58379calculateEv+0xb64>
			}
		}
		else if((TEMP/100)>=20){    //High temp
			Ti = 2*(dT*dT)/(137438953472LL);
    2f7a:	29 81       	ldd	r18, Y+1	; 0x01
    2f7c:	3a 81       	ldd	r19, Y+2	; 0x02
    2f7e:	4b 81       	ldd	r20, Y+3	; 0x03
    2f80:	5c 81       	ldd	r21, Y+4	; 0x04
    2f82:	ca 01       	movw	r24, r20
    2f84:	b9 01       	movw	r22, r18
    2f86:	0e 94 d8 28 	call	0x51b0	; 0x51b0 <__mulsi3>
    2f8a:	4b 01       	movw	r8, r22
    2f8c:	5c 01       	movw	r10, r24
    2f8e:	88 0c       	add	r8, r8
    2f90:	99 1c       	adc	r9, r9
    2f92:	aa 1c       	adc	r10, r10
    2f94:	bb 1c       	adc	r11, r11
    2f96:	75 01       	movw	r14, r10
    2f98:	64 01       	movw	r12, r8
    2f9a:	ff 0c       	add	r15, r15
    2f9c:	cc 08       	sbc	r12, r12
    2f9e:	dc 2c       	mov	r13, r12
    2fa0:	76 01       	movw	r14, r12
    2fa2:	18 2d       	mov	r17, r8
    2fa4:	9d 8e       	std	Y+29, r9	; 0x1d
    2fa6:	ad 82       	std	Y+5, r10	; 0x05
    2fa8:	bb 2d       	mov	r27, r11
    2faa:	fc 2d       	mov	r31, r12
    2fac:	ec 2d       	mov	r30, r12
    2fae:	c9 82       	std	Y+1, r12	; 0x01
    2fb0:	0c 2d       	mov	r16, r12
    2fb2:	28 2d       	mov	r18, r8
    2fb4:	39 2d       	mov	r19, r9
    2fb6:	4a 2d       	mov	r20, r10
    2fb8:	5b 2d       	mov	r21, r11
    2fba:	6c 2d       	mov	r22, r12
    2fbc:	7c 2d       	mov	r23, r12
    2fbe:	8c 2d       	mov	r24, r12
    2fc0:	9c 2d       	mov	r25, r12
    2fc2:	a0 e0       	ldi	r26, 0x00	; 0
    2fc4:	0e 94 c1 29 	call	0x5382	; 0x5382 <__cmpdi2_s8>
    2fc8:	84 f4       	brge	.+32     	; 0x2fea <_ZN6MS58379calculateEv+0x954>
    2fca:	21 50       	subi	r18, 0x01	; 1
    2fcc:	31 09       	sbc	r19, r1
    2fce:	41 09       	sbc	r20, r1
    2fd0:	51 09       	sbc	r21, r1
    2fd2:	60 4e       	sbci	r22, 0xE0	; 224
    2fd4:	7f 4f       	sbci	r23, 0xFF	; 255
    2fd6:	8f 4f       	sbci	r24, 0xFF	; 255
    2fd8:	9f 4f       	sbci	r25, 0xFF	; 255
    2fda:	12 2f       	mov	r17, r18
    2fdc:	3d 8f       	std	Y+29, r19	; 0x1d
    2fde:	4d 83       	std	Y+5, r20	; 0x05
    2fe0:	b5 2f       	mov	r27, r21
    2fe2:	f6 2f       	mov	r31, r22
    2fe4:	e7 2f       	mov	r30, r23
    2fe6:	89 83       	std	Y+1, r24	; 0x01
    2fe8:	09 2f       	mov	r16, r25
    2fea:	21 2f       	mov	r18, r17
    2fec:	3d 8d       	ldd	r19, Y+29	; 0x1d
    2fee:	4d 81       	ldd	r20, Y+5	; 0x05
    2ff0:	5b 2f       	mov	r21, r27
    2ff2:	6f 2f       	mov	r22, r31
    2ff4:	7e 2f       	mov	r23, r30
    2ff6:	89 81       	ldd	r24, Y+1	; 0x01
    2ff8:	90 2f       	mov	r25, r16
    2ffa:	05 e2       	ldi	r16, 0x25	; 37
    2ffc:	0e 94 85 29 	call	0x530a	; 0x530a <__ashrdi3>
    3000:	2d 83       	std	Y+5, r18	; 0x05
    3002:	3e 83       	std	Y+6, r19	; 0x06
    3004:	4f 83       	std	Y+7, r20	; 0x07
    3006:	58 87       	std	Y+8, r21	; 0x08
			OFFi = (1*(TEMP-2000)*(TEMP-2000))/16;
    3008:	c3 01       	movw	r24, r6
    300a:	b2 01       	movw	r22, r4
    300c:	60 5d       	subi	r22, 0xD0	; 208
    300e:	77 40       	sbci	r23, 0x07	; 7
    3010:	81 09       	sbc	r24, r1
    3012:	91 09       	sbc	r25, r1
    3014:	9b 01       	movw	r18, r22
    3016:	ac 01       	movw	r20, r24
    3018:	0e 94 d8 28 	call	0x51b0	; 0x51b0 <__mulsi3>
    301c:	8b 01       	movw	r16, r22
    301e:	9c 01       	movw	r18, r24
    3020:	99 23       	and	r25, r25
    3022:	24 f4       	brge	.+8      	; 0x302c <_ZN6MS58379calculateEv+0x996>
    3024:	01 5f       	subi	r16, 0xF1	; 241
    3026:	1f 4f       	sbci	r17, 0xFF	; 255
    3028:	2f 4f       	sbci	r18, 0xFF	; 255
    302a:	3f 4f       	sbci	r19, 0xFF	; 255
    302c:	48 01       	movw	r8, r16
    302e:	59 01       	movw	r10, r18
    3030:	68 94       	set
    3032:	13 f8       	bld	r1, 3
    3034:	b5 94       	asr	r11
    3036:	a7 94       	ror	r10
    3038:	97 94       	ror	r9
    303a:	87 94       	ror	r8
    303c:	16 94       	lsr	r1
    303e:	d1 f7       	brne	.-12     	; 0x3034 <_ZN6MS58379calculateEv+0x99e>
    3040:	89 82       	std	Y+1, r8	; 0x01
    3042:	9a 82       	std	Y+2, r9	; 0x02
    3044:	ab 82       	std	Y+3, r10	; 0x03
    3046:	bc 82       	std	Y+4, r11	; 0x04
			SENSi = 0;
    3048:	e1 2c       	mov	r14, r1
    304a:	f1 2c       	mov	r15, r1
    304c:	87 01       	movw	r16, r14
    304e:	d5 c0       	rjmp	.+426    	; 0x31fa <_ZN6MS58379calculateEv+0xb64>
	}
	
	OFF2 = OFF-OFFi;           //Calculate pressure and temp second order
	SENS2 = SENS-SENSi;
	
	TEMP = (TEMP-Ti);
    3050:	d3 01       	movw	r26, r6
    3052:	c2 01       	movw	r24, r4
    3054:	88 19       	sub	r24, r8
    3056:	99 09       	sbc	r25, r9
    3058:	aa 09       	sbc	r26, r10
    305a:	bb 09       	sbc	r27, r11
    305c:	f1 01       	movw	r30, r2
    305e:	80 8f       	std	Z+24, r24	; 0x18
    3060:	91 8f       	std	Z+25, r25	; 0x19
    3062:	a2 8f       	std	Z+26, r26	; 0x1a
    3064:	b3 8f       	std	Z+27, r27	; 0x1b
	
	if ( _model == MS5837_02BA ) {
		P = (((D1*SENS2)/2097152l-OFF2)/32768l);
    3066:	80 89       	ldd	r24, Z+16	; 0x10
    3068:	91 89       	ldd	r25, Z+17	; 0x11
    306a:	a2 89       	ldd	r26, Z+18	; 0x12
    306c:	b3 89       	ldd	r27, Z+19	; 0x13
    306e:	3c 01       	movw	r6, r24
    3070:	4d 01       	movw	r8, r26
    3072:	a1 2c       	mov	r10, r1
    3074:	b1 2c       	mov	r11, r1
    3076:	65 01       	movw	r12, r10
    3078:	8d 83       	std	Y+5, r24	; 0x05
    307a:	7e 82       	std	Y+6, r7	; 0x06
    307c:	8f 82       	std	Y+7, r8	; 0x07
    307e:	98 86       	std	Y+8, r9	; 0x08
    3080:	a9 86       	std	Y+9, r10	; 0x09
    3082:	ba 86       	std	Y+10, r11	; 0x0a
    3084:	cb 86       	std	Y+11, r12	; 0x0b
    3086:	dc 86       	std	Y+12, r13	; 0x0c
    3088:	27 01       	movw	r4, r14
    308a:	38 01       	movw	r6, r16
    308c:	77 0c       	add	r7, r7
    308e:	44 08       	sbc	r4, r4
    3090:	54 2c       	mov	r5, r4
    3092:	32 01       	movw	r6, r4
    3094:	2d 85       	ldd	r18, Y+13	; 0x0d
    3096:	3e 85       	ldd	r19, Y+14	; 0x0e
    3098:	4f 85       	ldd	r20, Y+15	; 0x0f
    309a:	58 89       	ldd	r21, Y+16	; 0x10
    309c:	69 89       	ldd	r22, Y+17	; 0x11
    309e:	7a 89       	ldd	r23, Y+18	; 0x12
    30a0:	8b 89       	ldd	r24, Y+19	; 0x13
    30a2:	9c 89       	ldd	r25, Y+20	; 0x14
    30a4:	ae 2c       	mov	r10, r14
    30a6:	bf 2c       	mov	r11, r15
    30a8:	c0 2e       	mov	r12, r16
    30aa:	d1 2e       	mov	r13, r17
    30ac:	e4 2c       	mov	r14, r4
    30ae:	f4 2c       	mov	r15, r4
    30b0:	04 2d       	mov	r16, r4
    30b2:	14 2d       	mov	r17, r4
    30b4:	0e 94 b8 29 	call	0x5370	; 0x5370 <__subdi3>
    30b8:	a2 2e       	mov	r10, r18
    30ba:	b3 2e       	mov	r11, r19
    30bc:	c4 2e       	mov	r12, r20
    30be:	d5 2e       	mov	r13, r21
    30c0:	e6 2e       	mov	r14, r22
    30c2:	f7 2e       	mov	r15, r23
    30c4:	08 2f       	mov	r16, r24
    30c6:	19 2f       	mov	r17, r25
    30c8:	2d 81       	ldd	r18, Y+5	; 0x05
    30ca:	3e 81       	ldd	r19, Y+6	; 0x06
    30cc:	48 2d       	mov	r20, r8
    30ce:	59 2d       	mov	r21, r9
    30d0:	60 e0       	ldi	r22, 0x00	; 0
    30d2:	70 e0       	ldi	r23, 0x00	; 0
    30d4:	80 e0       	ldi	r24, 0x00	; 0
    30d6:	90 e0       	ldi	r25, 0x00	; 0
    30d8:	0e 94 1b 29 	call	0x5236	; 0x5236 <__muldi3>
    30dc:	12 2f       	mov	r17, r18
    30de:	3d 87       	std	Y+13, r19	; 0x0d
    30e0:	4d 83       	std	Y+5, r20	; 0x05
    30e2:	b5 2f       	mov	r27, r21
    30e4:	f6 2f       	mov	r31, r22
    30e6:	e7 2f       	mov	r30, r23
    30e8:	78 2e       	mov	r7, r24
    30ea:	89 2e       	mov	r8, r25
    30ec:	a0 e0       	ldi	r26, 0x00	; 0
    30ee:	0e 94 c1 29 	call	0x5382	; 0x5382 <__cmpdi2_s8>
    30f2:	84 f4       	brge	.+32     	; 0x3114 <_ZN6MS58379calculateEv+0xa7e>
    30f4:	21 50       	subi	r18, 0x01	; 1
    30f6:	31 09       	sbc	r19, r1
    30f8:	40 4e       	sbci	r20, 0xE0	; 224
    30fa:	5f 4f       	sbci	r21, 0xFF	; 255
    30fc:	6f 4f       	sbci	r22, 0xFF	; 255
    30fe:	7f 4f       	sbci	r23, 0xFF	; 255
    3100:	8f 4f       	sbci	r24, 0xFF	; 255
    3102:	9f 4f       	sbci	r25, 0xFF	; 255
    3104:	12 2f       	mov	r17, r18
    3106:	3d 87       	std	Y+13, r19	; 0x0d
    3108:	4d 83       	std	Y+5, r20	; 0x05
    310a:	b5 2f       	mov	r27, r21
    310c:	f6 2f       	mov	r31, r22
    310e:	e7 2f       	mov	r30, r23
    3110:	78 2e       	mov	r7, r24
    3112:	89 2e       	mov	r8, r25
    3114:	21 2f       	mov	r18, r17
    3116:	3d 85       	ldd	r19, Y+13	; 0x0d
    3118:	4d 81       	ldd	r20, Y+5	; 0x05
    311a:	5b 2f       	mov	r21, r27
    311c:	6f 2f       	mov	r22, r31
    311e:	7e 2f       	mov	r23, r30
    3120:	87 2d       	mov	r24, r7
    3122:	98 2d       	mov	r25, r8
    3124:	05 e1       	ldi	r16, 0x15	; 21
    3126:	0e 94 85 29 	call	0x530a	; 0x530a <__ashrdi3>
    312a:	82 2e       	mov	r8, r18
    312c:	93 2e       	mov	r9, r19
    312e:	4d 87       	std	Y+13, r20	; 0x0d
    3130:	5d 83       	std	Y+5, r21	; 0x05
    3132:	b6 2f       	mov	r27, r22
    3134:	a7 2f       	mov	r26, r23
    3136:	f8 2f       	mov	r31, r24
    3138:	e9 2f       	mov	r30, r25
    313a:	49 80       	ldd	r4, Y+1	; 0x01
    313c:	5a 80       	ldd	r5, Y+2	; 0x02
    313e:	6b 80       	ldd	r6, Y+3	; 0x03
    3140:	7c 80       	ldd	r7, Y+4	; 0x04
    3142:	77 0c       	add	r7, r7
    3144:	44 08       	sbc	r4, r4
    3146:	54 2c       	mov	r5, r4
    3148:	32 01       	movw	r6, r4
    314a:	2d 89       	ldd	r18, Y+21	; 0x15
    314c:	3e 89       	ldd	r19, Y+22	; 0x16
    314e:	4f 89       	ldd	r20, Y+23	; 0x17
    3150:	58 8d       	ldd	r21, Y+24	; 0x18
    3152:	69 8d       	ldd	r22, Y+25	; 0x19
    3154:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3156:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3158:	9c 8d       	ldd	r25, Y+28	; 0x1c
    315a:	a9 80       	ldd	r10, Y+1	; 0x01
    315c:	ba 80       	ldd	r11, Y+2	; 0x02
    315e:	cb 80       	ldd	r12, Y+3	; 0x03
    3160:	dc 80       	ldd	r13, Y+4	; 0x04
    3162:	e4 2c       	mov	r14, r4
    3164:	f4 2c       	mov	r15, r4
    3166:	04 2d       	mov	r16, r4
    3168:	14 2d       	mov	r17, r4
    316a:	0e 94 b8 29 	call	0x5370	; 0x5370 <__subdi3>
    316e:	a2 2e       	mov	r10, r18
    3170:	b3 2e       	mov	r11, r19
    3172:	c4 2e       	mov	r12, r20
    3174:	d5 2e       	mov	r13, r21
    3176:	e6 2e       	mov	r14, r22
    3178:	f7 2e       	mov	r15, r23
    317a:	08 2f       	mov	r16, r24
    317c:	19 2f       	mov	r17, r25
    317e:	28 2d       	mov	r18, r8
    3180:	39 2d       	mov	r19, r9
    3182:	4d 85       	ldd	r20, Y+13	; 0x0d
    3184:	5d 81       	ldd	r21, Y+5	; 0x05
    3186:	6b 2f       	mov	r22, r27
    3188:	7a 2f       	mov	r23, r26
    318a:	8f 2f       	mov	r24, r31
    318c:	9e 2f       	mov	r25, r30
    318e:	0e 94 b8 29 	call	0x5370	; 0x5370 <__subdi3>
    3192:	12 2f       	mov	r17, r18
    3194:	3d 83       	std	Y+5, r19	; 0x05
    3196:	49 83       	std	Y+1, r20	; 0x01
    3198:	b5 2f       	mov	r27, r21
    319a:	f6 2f       	mov	r31, r22
    319c:	e7 2f       	mov	r30, r23
    319e:	78 2e       	mov	r7, r24
    31a0:	89 2e       	mov	r8, r25
    31a2:	a0 e0       	ldi	r26, 0x00	; 0
    31a4:	0e 94 c1 29 	call	0x5382	; 0x5382 <__cmpdi2_s8>
    31a8:	84 f4       	brge	.+32     	; 0x31ca <_ZN6MS58379calculateEv+0xb34>
    31aa:	21 50       	subi	r18, 0x01	; 1
    31ac:	30 48       	sbci	r19, 0x80	; 128
    31ae:	4f 4f       	sbci	r20, 0xFF	; 255
    31b0:	5f 4f       	sbci	r21, 0xFF	; 255
    31b2:	6f 4f       	sbci	r22, 0xFF	; 255
    31b4:	7f 4f       	sbci	r23, 0xFF	; 255
    31b6:	8f 4f       	sbci	r24, 0xFF	; 255
    31b8:	9f 4f       	sbci	r25, 0xFF	; 255
    31ba:	12 2f       	mov	r17, r18
    31bc:	3d 83       	std	Y+5, r19	; 0x05
    31be:	49 83       	std	Y+1, r20	; 0x01
    31c0:	b5 2f       	mov	r27, r21
    31c2:	f6 2f       	mov	r31, r22
    31c4:	e7 2f       	mov	r30, r23
    31c6:	78 2e       	mov	r7, r24
    31c8:	89 2e       	mov	r8, r25
    31ca:	21 2f       	mov	r18, r17
    31cc:	3d 81       	ldd	r19, Y+5	; 0x05
    31ce:	49 81       	ldd	r20, Y+1	; 0x01
    31d0:	5b 2f       	mov	r21, r27
    31d2:	6f 2f       	mov	r22, r31
    31d4:	7e 2f       	mov	r23, r30
    31d6:	87 2d       	mov	r24, r7
    31d8:	98 2d       	mov	r25, r8
    31da:	0f e0       	ldi	r16, 0x0F	; 15
    31dc:	0e 94 85 29 	call	0x530a	; 0x530a <__ashrdi3>
    31e0:	d1 01       	movw	r26, r2
    31e2:	5c 96       	adiw	r26, 0x1c	; 28
    31e4:	2c 93       	st	X, r18
    31e6:	5c 97       	sbiw	r26, 0x1c	; 28
    31e8:	5d 96       	adiw	r26, 0x1d	; 29
    31ea:	3c 93       	st	X, r19
    31ec:	5d 97       	sbiw	r26, 0x1d	; 29
    31ee:	5e 96       	adiw	r26, 0x1e	; 30
    31f0:	4c 93       	st	X, r20
    31f2:	5e 97       	sbiw	r26, 0x1e	; 30
    31f4:	5f 96       	adiw	r26, 0x1f	; 31
    31f6:	5c 93       	st	X, r21
    31f8:	da c0       	rjmp	.+436    	; 0x33ae <_ZN6MS58379calculateEv+0xd18>
	}
	
	OFF2 = OFF-OFFi;           //Calculate pressure and temp second order
	SENS2 = SENS-SENSi;
	
	TEMP = (TEMP-Ti);
    31fa:	8d 80       	ldd	r8, Y+5	; 0x05
    31fc:	9e 80       	ldd	r9, Y+6	; 0x06
    31fe:	af 80       	ldd	r10, Y+7	; 0x07
    3200:	b8 84       	ldd	r11, Y+8	; 0x08
    3202:	48 18       	sub	r4, r8
    3204:	59 08       	sbc	r5, r9
    3206:	6a 08       	sbc	r6, r10
    3208:	7b 08       	sbc	r7, r11
    320a:	d1 01       	movw	r26, r2
    320c:	58 96       	adiw	r26, 0x18	; 24
    320e:	4d 92       	st	X+, r4
    3210:	5d 92       	st	X+, r5
    3212:	6d 92       	st	X+, r6
    3214:	7c 92       	st	X, r7
    3216:	5b 97       	sbiw	r26, 0x1b	; 27
	
	if ( _model == MS5837_02BA ) {
		P = (((D1*SENS2)/2097152l-OFF2)/32768l);
	} else {
		P = (((D1*SENS2)/2097152l-OFF2)/8192l);
    3218:	50 96       	adiw	r26, 0x10	; 16
    321a:	8d 91       	ld	r24, X+
    321c:	9d 91       	ld	r25, X+
    321e:	0d 90       	ld	r0, X+
    3220:	bc 91       	ld	r27, X
    3222:	a0 2d       	mov	r26, r0
    3224:	3c 01       	movw	r6, r24
    3226:	4d 01       	movw	r8, r26
    3228:	a1 2c       	mov	r10, r1
    322a:	b1 2c       	mov	r11, r1
    322c:	65 01       	movw	r12, r10
    322e:	8d 83       	std	Y+5, r24	; 0x05
    3230:	7e 82       	std	Y+6, r7	; 0x06
    3232:	8f 82       	std	Y+7, r8	; 0x07
    3234:	98 86       	std	Y+8, r9	; 0x08
    3236:	a9 86       	std	Y+9, r10	; 0x09
    3238:	ba 86       	std	Y+10, r11	; 0x0a
    323a:	cb 86       	std	Y+11, r12	; 0x0b
    323c:	dc 86       	std	Y+12, r13	; 0x0c
    323e:	27 01       	movw	r4, r14
    3240:	38 01       	movw	r6, r16
    3242:	77 0c       	add	r7, r7
    3244:	44 08       	sbc	r4, r4
    3246:	54 2c       	mov	r5, r4
    3248:	32 01       	movw	r6, r4
    324a:	2d 89       	ldd	r18, Y+21	; 0x15
    324c:	3e 89       	ldd	r19, Y+22	; 0x16
    324e:	4f 89       	ldd	r20, Y+23	; 0x17
    3250:	58 8d       	ldd	r21, Y+24	; 0x18
    3252:	69 8d       	ldd	r22, Y+25	; 0x19
    3254:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3256:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3258:	9c 8d       	ldd	r25, Y+28	; 0x1c
    325a:	ae 2c       	mov	r10, r14
    325c:	bf 2c       	mov	r11, r15
    325e:	c0 2e       	mov	r12, r16
    3260:	d1 2e       	mov	r13, r17
    3262:	e4 2c       	mov	r14, r4
    3264:	f4 2c       	mov	r15, r4
    3266:	04 2d       	mov	r16, r4
    3268:	14 2d       	mov	r17, r4
    326a:	0e 94 b8 29 	call	0x5370	; 0x5370 <__subdi3>
    326e:	a2 2e       	mov	r10, r18
    3270:	b3 2e       	mov	r11, r19
    3272:	c4 2e       	mov	r12, r20
    3274:	d5 2e       	mov	r13, r21
    3276:	e6 2e       	mov	r14, r22
    3278:	f7 2e       	mov	r15, r23
    327a:	08 2f       	mov	r16, r24
    327c:	19 2f       	mov	r17, r25
    327e:	2d 81       	ldd	r18, Y+5	; 0x05
    3280:	3e 81       	ldd	r19, Y+6	; 0x06
    3282:	48 2d       	mov	r20, r8
    3284:	59 2d       	mov	r21, r9
    3286:	60 e0       	ldi	r22, 0x00	; 0
    3288:	70 e0       	ldi	r23, 0x00	; 0
    328a:	80 e0       	ldi	r24, 0x00	; 0
    328c:	90 e0       	ldi	r25, 0x00	; 0
    328e:	0e 94 1b 29 	call	0x5236	; 0x5236 <__muldi3>
    3292:	12 2f       	mov	r17, r18
    3294:	3d 8b       	std	Y+21, r19	; 0x15
    3296:	4d 83       	std	Y+5, r20	; 0x05
    3298:	b5 2f       	mov	r27, r21
    329a:	f6 2f       	mov	r31, r22
    329c:	e7 2f       	mov	r30, r23
    329e:	58 2e       	mov	r5, r24
    32a0:	69 2e       	mov	r6, r25
    32a2:	a0 e0       	ldi	r26, 0x00	; 0
    32a4:	0e 94 c1 29 	call	0x5382	; 0x5382 <__cmpdi2_s8>
    32a8:	84 f4       	brge	.+32     	; 0x32ca <_ZN6MS58379calculateEv+0xc34>
    32aa:	21 50       	subi	r18, 0x01	; 1
    32ac:	31 09       	sbc	r19, r1
    32ae:	40 4e       	sbci	r20, 0xE0	; 224
    32b0:	5f 4f       	sbci	r21, 0xFF	; 255
    32b2:	6f 4f       	sbci	r22, 0xFF	; 255
    32b4:	7f 4f       	sbci	r23, 0xFF	; 255
    32b6:	8f 4f       	sbci	r24, 0xFF	; 255
    32b8:	9f 4f       	sbci	r25, 0xFF	; 255
    32ba:	12 2f       	mov	r17, r18
    32bc:	3d 8b       	std	Y+21, r19	; 0x15
    32be:	4d 83       	std	Y+5, r20	; 0x05
    32c0:	b5 2f       	mov	r27, r21
    32c2:	f6 2f       	mov	r31, r22
    32c4:	e7 2f       	mov	r30, r23
    32c6:	58 2e       	mov	r5, r24
    32c8:	69 2e       	mov	r6, r25
    32ca:	21 2f       	mov	r18, r17
    32cc:	3d 89       	ldd	r19, Y+21	; 0x15
    32ce:	4d 81       	ldd	r20, Y+5	; 0x05
    32d0:	5b 2f       	mov	r21, r27
    32d2:	6f 2f       	mov	r22, r31
    32d4:	7e 2f       	mov	r23, r30
    32d6:	85 2d       	mov	r24, r5
    32d8:	96 2d       	mov	r25, r6
    32da:	05 e1       	ldi	r16, 0x15	; 21
    32dc:	0e 94 85 29 	call	0x530a	; 0x530a <__ashrdi3>
    32e0:	82 2e       	mov	r8, r18
    32e2:	93 2e       	mov	r9, r19
    32e4:	4d 8b       	std	Y+21, r20	; 0x15
    32e6:	5d 83       	std	Y+5, r21	; 0x05
    32e8:	b6 2f       	mov	r27, r22
    32ea:	a7 2f       	mov	r26, r23
    32ec:	f8 2f       	mov	r31, r24
    32ee:	e9 2f       	mov	r30, r25
    32f0:	49 80       	ldd	r4, Y+1	; 0x01
    32f2:	5a 80       	ldd	r5, Y+2	; 0x02
    32f4:	6b 80       	ldd	r6, Y+3	; 0x03
    32f6:	7c 80       	ldd	r7, Y+4	; 0x04
    32f8:	77 0c       	add	r7, r7
    32fa:	44 08       	sbc	r4, r4
    32fc:	54 2c       	mov	r5, r4
    32fe:	32 01       	movw	r6, r4
    3300:	2d 85       	ldd	r18, Y+13	; 0x0d
    3302:	3e 85       	ldd	r19, Y+14	; 0x0e
    3304:	4f 85       	ldd	r20, Y+15	; 0x0f
    3306:	58 89       	ldd	r21, Y+16	; 0x10
    3308:	69 89       	ldd	r22, Y+17	; 0x11
    330a:	7a 89       	ldd	r23, Y+18	; 0x12
    330c:	8b 89       	ldd	r24, Y+19	; 0x13
    330e:	9c 89       	ldd	r25, Y+20	; 0x14
    3310:	a9 80       	ldd	r10, Y+1	; 0x01
    3312:	ba 80       	ldd	r11, Y+2	; 0x02
    3314:	cb 80       	ldd	r12, Y+3	; 0x03
    3316:	dc 80       	ldd	r13, Y+4	; 0x04
    3318:	e4 2c       	mov	r14, r4
    331a:	f4 2c       	mov	r15, r4
    331c:	04 2d       	mov	r16, r4
    331e:	14 2d       	mov	r17, r4
    3320:	0e 94 b8 29 	call	0x5370	; 0x5370 <__subdi3>
    3324:	a2 2e       	mov	r10, r18
    3326:	b3 2e       	mov	r11, r19
    3328:	c4 2e       	mov	r12, r20
    332a:	d5 2e       	mov	r13, r21
    332c:	e6 2e       	mov	r14, r22
    332e:	f7 2e       	mov	r15, r23
    3330:	08 2f       	mov	r16, r24
    3332:	19 2f       	mov	r17, r25
    3334:	28 2d       	mov	r18, r8
    3336:	39 2d       	mov	r19, r9
    3338:	4d 89       	ldd	r20, Y+21	; 0x15
    333a:	5d 81       	ldd	r21, Y+5	; 0x05
    333c:	6b 2f       	mov	r22, r27
    333e:	7a 2f       	mov	r23, r26
    3340:	8f 2f       	mov	r24, r31
    3342:	9e 2f       	mov	r25, r30
    3344:	0e 94 b8 29 	call	0x5370	; 0x5370 <__subdi3>
    3348:	92 2e       	mov	r9, r18
    334a:	a3 2e       	mov	r10, r19
    334c:	b4 2e       	mov	r11, r20
    334e:	c5 2e       	mov	r12, r21
    3350:	d6 2e       	mov	r13, r22
    3352:	e7 2e       	mov	r14, r23
    3354:	78 2e       	mov	r7, r24
    3356:	89 2e       	mov	r8, r25
    3358:	a0 e0       	ldi	r26, 0x00	; 0
    335a:	0e 94 c1 29 	call	0x5382	; 0x5382 <__cmpdi2_s8>
    335e:	84 f4       	brge	.+32     	; 0x3380 <_ZN6MS58379calculateEv+0xcea>
    3360:	21 50       	subi	r18, 0x01	; 1
    3362:	30 4e       	sbci	r19, 0xE0	; 224
    3364:	4f 4f       	sbci	r20, 0xFF	; 255
    3366:	5f 4f       	sbci	r21, 0xFF	; 255
    3368:	6f 4f       	sbci	r22, 0xFF	; 255
    336a:	7f 4f       	sbci	r23, 0xFF	; 255
    336c:	8f 4f       	sbci	r24, 0xFF	; 255
    336e:	9f 4f       	sbci	r25, 0xFF	; 255
    3370:	92 2e       	mov	r9, r18
    3372:	a3 2e       	mov	r10, r19
    3374:	b4 2e       	mov	r11, r20
    3376:	c5 2e       	mov	r12, r21
    3378:	d6 2e       	mov	r13, r22
    337a:	e7 2e       	mov	r14, r23
    337c:	78 2e       	mov	r7, r24
    337e:	89 2e       	mov	r8, r25
    3380:	29 2d       	mov	r18, r9
    3382:	3a 2d       	mov	r19, r10
    3384:	4b 2d       	mov	r20, r11
    3386:	5c 2d       	mov	r21, r12
    3388:	6d 2d       	mov	r22, r13
    338a:	7e 2d       	mov	r23, r14
    338c:	87 2d       	mov	r24, r7
    338e:	98 2d       	mov	r25, r8
    3390:	0d e0       	ldi	r16, 0x0D	; 13
    3392:	0e 94 85 29 	call	0x530a	; 0x530a <__ashrdi3>
    3396:	d1 01       	movw	r26, r2
    3398:	5c 96       	adiw	r26, 0x1c	; 28
    339a:	2c 93       	st	X, r18
    339c:	5c 97       	sbiw	r26, 0x1c	; 28
    339e:	5d 96       	adiw	r26, 0x1d	; 29
    33a0:	3c 93       	st	X, r19
    33a2:	5d 97       	sbiw	r26, 0x1d	; 29
    33a4:	5e 96       	adiw	r26, 0x1e	; 30
    33a6:	4c 93       	st	X, r20
    33a8:	5e 97       	sbiw	r26, 0x1e	; 30
    33aa:	5f 96       	adiw	r26, 0x1f	; 31
    33ac:	5c 93       	st	X, r21
	}
}
    33ae:	a5 96       	adiw	r28, 0x25	; 37
    33b0:	0f b6       	in	r0, 0x3f	; 63
    33b2:	f8 94       	cli
    33b4:	de bf       	out	0x3e, r29	; 62
    33b6:	0f be       	out	0x3f, r0	; 63
    33b8:	cd bf       	out	0x3d, r28	; 61
    33ba:	df 91       	pop	r29
    33bc:	cf 91       	pop	r28
    33be:	1f 91       	pop	r17
    33c0:	0f 91       	pop	r16
    33c2:	ff 90       	pop	r15
    33c4:	ef 90       	pop	r14
    33c6:	df 90       	pop	r13
    33c8:	cf 90       	pop	r12
    33ca:	bf 90       	pop	r11
    33cc:	af 90       	pop	r10
    33ce:	9f 90       	pop	r9
    33d0:	8f 90       	pop	r8
    33d2:	7f 90       	pop	r7
    33d4:	6f 90       	pop	r6
    33d6:	5f 90       	pop	r5
    33d8:	4f 90       	pop	r4
    33da:	3f 90       	pop	r3
    33dc:	2f 90       	pop	r2
    33de:	08 95       	ret

000033e0 <_ZN6MS58378pressureEf>:

float MS5837::pressure(float conversion) {
    33e0:	cf 92       	push	r12
    33e2:	df 92       	push	r13
    33e4:	ef 92       	push	r14
    33e6:	ff 92       	push	r15
    33e8:	6a 01       	movw	r12, r20
    33ea:	7b 01       	movw	r14, r22
	if ( _model == MS5837_02BA ) {
    33ec:	fc 01       	movw	r30, r24
    33ee:	20 a1       	ldd	r18, Z+32	; 0x20
    33f0:	21 30       	cpi	r18, 0x01	; 1
    33f2:	89 f4       	brne	.+34     	; 0x3416 <_ZN6MS58378pressureEf+0x36>
		return P*conversion/100.0f;
    33f4:	64 8d       	ldd	r22, Z+28	; 0x1c
    33f6:	75 8d       	ldd	r23, Z+29	; 0x1d
    33f8:	86 8d       	ldd	r24, Z+30	; 0x1e
    33fa:	97 8d       	ldd	r25, Z+31	; 0x1f
    33fc:	0e 94 c1 27 	call	0x4f82	; 0x4f82 <__floatsisf>
    3400:	a7 01       	movw	r20, r14
    3402:	96 01       	movw	r18, r12
    3404:	0e 94 75 28 	call	0x50ea	; 0x50ea <__mulsf3>
    3408:	20 e0       	ldi	r18, 0x00	; 0
    340a:	30 e0       	ldi	r19, 0x00	; 0
    340c:	48 ec       	ldi	r20, 0xC8	; 200
    340e:	52 e4       	ldi	r21, 0x42	; 66
    3410:	0e 94 2b 27 	call	0x4e56	; 0x4e56 <__divsf3>
    3414:	11 c0       	rjmp	.+34     	; 0x3438 <_ZN6MS58378pressureEf+0x58>
	}
	else {
		return P*conversion/10.0f;
    3416:	fc 01       	movw	r30, r24
    3418:	64 8d       	ldd	r22, Z+28	; 0x1c
    341a:	75 8d       	ldd	r23, Z+29	; 0x1d
    341c:	86 8d       	ldd	r24, Z+30	; 0x1e
    341e:	97 8d       	ldd	r25, Z+31	; 0x1f
    3420:	0e 94 c1 27 	call	0x4f82	; 0x4f82 <__floatsisf>
    3424:	a7 01       	movw	r20, r14
    3426:	96 01       	movw	r18, r12
    3428:	0e 94 75 28 	call	0x50ea	; 0x50ea <__mulsf3>
    342c:	20 e0       	ldi	r18, 0x00	; 0
    342e:	30 e0       	ldi	r19, 0x00	; 0
    3430:	40 e2       	ldi	r20, 0x20	; 32
    3432:	51 e4       	ldi	r21, 0x41	; 65
    3434:	0e 94 2b 27 	call	0x4e56	; 0x4e56 <__divsf3>
	}
}
    3438:	ff 90       	pop	r15
    343a:	ef 90       	pop	r14
    343c:	df 90       	pop	r13
    343e:	cf 90       	pop	r12
    3440:	08 95       	ret

00003442 <_ZN6MS583711temperatureEv>:

float MS5837::temperature() {
	return TEMP/100.0f;
    3442:	fc 01       	movw	r30, r24
    3444:	60 8d       	ldd	r22, Z+24	; 0x18
    3446:	71 8d       	ldd	r23, Z+25	; 0x19
    3448:	82 8d       	ldd	r24, Z+26	; 0x1a
    344a:	93 8d       	ldd	r25, Z+27	; 0x1b
    344c:	0e 94 c1 27 	call	0x4f82	; 0x4f82 <__floatsisf>
    3450:	20 e0       	ldi	r18, 0x00	; 0
    3452:	30 e0       	ldi	r19, 0x00	; 0
    3454:	48 ec       	ldi	r20, 0xC8	; 200
    3456:	52 e4       	ldi	r21, 0x42	; 66
    3458:	0c 94 2b 27 	jmp	0x4e56	; 0x4e56 <__divsf3>
}
    345c:	08 95       	ret

0000345e <_ZN6MS58374crc4EPj>:
float MS5837::altitude() {
	return (1-pow((pressure()/1013.25),.190284))*145366.45*.3048;
}*/


uint8_t MS5837::crc4(uint16_t n_prom[]) {
    345e:	cf 93       	push	r28
    3460:	df 93       	push	r29
    3462:	eb 01       	movw	r28, r22
	uint16_t n_rem = 0;

	n_prom[0] = ((n_prom[0]) & 0x0FFF);
    3464:	88 81       	ld	r24, Y
    3466:	99 81       	ldd	r25, Y+1	; 0x01
    3468:	9f 70       	andi	r25, 0x0F	; 15
    346a:	99 83       	std	Y+1, r25	; 0x01
    346c:	88 83       	st	Y, r24
	n_prom[7] = 0;
    346e:	1f 86       	std	Y+15, r1	; 0x0f
    3470:	1e 86       	std	Y+14, r1	; 0x0e
    3472:	40 e0       	ldi	r20, 0x00	; 0
    3474:	50 e0       	ldi	r21, 0x00	; 0
	return (1-pow((pressure()/1013.25),.190284))*145366.45*.3048;
}*/


uint8_t MS5837::crc4(uint16_t n_prom[]) {
	uint16_t n_rem = 0;
    3476:	80 e0       	ldi	r24, 0x00	; 0
    3478:	90 e0       	ldi	r25, 0x00	; 0

	n_prom[0] = ((n_prom[0]) & 0x0FFF);
	n_prom[7] = 0;

	for ( uint8_t i = 0 ; i < 16; i++ ) {
		if ( i%2 == 1 ) {
    347a:	40 ff       	sbrs	r20, 0
    347c:	07 c0       	rjmp	.+14     	; 0x348c <_ZN6MS58374crc4EPj+0x2e>
			n_rem ^= (uint16_t)((n_prom[i>>1]) & 0x00FF);
    347e:	fa 01       	movw	r30, r20
    3480:	ee 7f       	andi	r30, 0xFE	; 254
    3482:	ec 0f       	add	r30, r28
    3484:	fd 1f       	adc	r31, r29
    3486:	20 81       	ld	r18, Z
    3488:	82 27       	eor	r24, r18
    348a:	1d c0       	rjmp	.+58     	; 0x34c6 <_ZN6MS58374crc4EPj+0x68>
			} else {
			n_rem ^= (uint16_t)(n_prom[i>>1] >> 8);
    348c:	fa 01       	movw	r30, r20
    348e:	ee 7f       	andi	r30, 0xFE	; 254
    3490:	ec 0f       	add	r30, r28
    3492:	fd 1f       	adc	r31, r29
    3494:	a1 81       	ldd	r26, Z+1	; 0x01
    3496:	b0 e0       	ldi	r27, 0x00	; 0
    3498:	8a 27       	eor	r24, r26
    349a:	9b 27       	eor	r25, r27
    349c:	14 c0       	rjmp	.+40     	; 0x34c6 <_ZN6MS58374crc4EPj+0x68>
		}
		for ( uint8_t n_bit = 8 ; n_bit > 0 ; n_bit-- ) {
			if ( n_rem & 0x8000 ) {
    349e:	99 23       	and	r25, r25
    34a0:	2c f4       	brge	.+10     	; 0x34ac <_ZN6MS58374crc4EPj+0x4e>
				n_rem = (n_rem << 1) ^ 0x3000;
    34a2:	88 0f       	add	r24, r24
    34a4:	99 1f       	adc	r25, r25
    34a6:	30 e3       	ldi	r19, 0x30	; 48
    34a8:	93 27       	eor	r25, r19
    34aa:	02 c0       	rjmp	.+4      	; 0x34b0 <_ZN6MS58374crc4EPj+0x52>
				} else {
				n_rem = (n_rem << 1);
    34ac:	88 0f       	add	r24, r24
    34ae:	99 1f       	adc	r25, r25
    34b0:	21 50       	subi	r18, 0x01	; 1
		if ( i%2 == 1 ) {
			n_rem ^= (uint16_t)((n_prom[i>>1]) & 0x00FF);
			} else {
			n_rem ^= (uint16_t)(n_prom[i>>1] >> 8);
		}
		for ( uint8_t n_bit = 8 ; n_bit > 0 ; n_bit-- ) {
    34b2:	a9 f7       	brne	.-22     	; 0x349e <_ZN6MS58374crc4EPj+0x40>
    34b4:	4f 5f       	subi	r20, 0xFF	; 255
    34b6:	5f 4f       	sbci	r21, 0xFF	; 255
	uint16_t n_rem = 0;

	n_prom[0] = ((n_prom[0]) & 0x0FFF);
	n_prom[7] = 0;

	for ( uint8_t i = 0 ; i < 16; i++ ) {
    34b8:	40 31       	cpi	r20, 0x10	; 16
    34ba:	51 05       	cpc	r21, r1
    34bc:	f1 f6       	brne	.-68     	; 0x347a <_ZN6MS58374crc4EPj+0x1c>
		}
	}
	
	n_rem = ((n_rem >> 12) & 0x000F);

	return n_rem ^ 0x00;
    34be:	89 2f       	mov	r24, r25
    34c0:	82 95       	swap	r24
    34c2:	8f 70       	andi	r24, 0x0F	; 15
    34c4:	02 c0       	rjmp	.+4      	; 0x34ca <_ZN6MS58374crc4EPj+0x6c>
	return (1-pow((pressure()/1013.25),.190284))*145366.45*.3048;
}*/


uint8_t MS5837::crc4(uint16_t n_prom[]) {
	uint16_t n_rem = 0;
    34c6:	28 e0       	ldi	r18, 0x08	; 8
    34c8:	ea cf       	rjmp	.-44     	; 0x349e <_ZN6MS58374crc4EPj+0x40>
	}
	
	n_rem = ((n_rem >> 12) & 0x000F);

	return n_rem ^ 0x00;
    34ca:	df 91       	pop	r29
    34cc:	cf 91       	pop	r28
    34ce:	08 95       	ret

000034d0 <_ZN6MS58375beginEv>:

MS5837::MS5837(HardwareTimer &timer) : _timer(&timer) {
	fluidDensity = 1029;
}

bool MS5837::begin() {
    34d0:	cf 92       	push	r12
    34d2:	df 92       	push	r13
    34d4:	ef 92       	push	r14
    34d6:	ff 92       	push	r15
    34d8:	0f 93       	push	r16
    34da:	1f 93       	push	r17
    34dc:	cf 93       	push	r28
    34de:	df 93       	push	r29
    34e0:	6c 01       	movw	r12, r24
	Wire.begin();
    34e2:	85 e5       	ldi	r24, 0x55	; 85
    34e4:	98 e0       	ldi	r25, 0x08	; 8
    34e6:	0e 94 67 12 	call	0x24ce	; 0x24ce <_ZN7TwoWire5beginEv>
	_timer->beginMs(10);
    34ea:	40 e0       	ldi	r20, 0x00	; 0
    34ec:	50 e0       	ldi	r21, 0x00	; 0
    34ee:	60 e2       	ldi	r22, 0x20	; 32
    34f0:	71 e4       	ldi	r23, 0x41	; 65
    34f2:	f6 01       	movw	r30, r12
    34f4:	82 a1       	ldd	r24, Z+34	; 0x22
    34f6:	93 a1       	ldd	r25, Z+35	; 0x23
    34f8:	0e 94 57 0e 	call	0x1cae	; 0x1cae <_ZN13HardwareTimer7beginMsEf>
	
	// Reset the MS5837, per datasheet
	Wire.beginTransmission(MS5837_ADDR);
    34fc:	66 e7       	ldi	r22, 0x76	; 118
    34fe:	70 e0       	ldi	r23, 0x00	; 0
    3500:	85 e5       	ldi	r24, 0x55	; 85
    3502:	98 e0       	ldi	r25, 0x08	; 8
    3504:	03 d8       	rcall	.-4090   	; 0x250c <_ZN7TwoWire17beginTransmissionEi>
    3506:	e0 91 55 08 	lds	r30, 0x0855	; 0x800855 <Wire>
    350a:	f0 91 56 08 	lds	r31, 0x0856	; 0x800856 <Wire+0x1>
    350e:	01 90       	ld	r0, Z+
    3510:	f0 81       	ld	r31, Z
    3512:	e0 2d       	mov	r30, r0
    3514:	6e e1       	ldi	r22, 0x1E	; 30
    3516:	85 e5       	ldi	r24, 0x55	; 85
    3518:	98 e0       	ldi	r25, 0x08	; 8
    351a:	19 95       	eicall
	Wire.write(MS5837_RESET);
	Wire.endTransmission();
    351c:	85 e5       	ldi	r24, 0x55	; 85
    351e:	98 e0       	ldi	r25, 0x08	; 8
    3520:	74 d8       	rcall	.-3864   	; 0x260a <_ZN7TwoWire15endTransmissionEv>

	// Wait for reset to complete
	//_delay_ms(10);
	_timer->start(1);
    3522:	61 e0       	ldi	r22, 0x01	; 1
    3524:	f6 01       	movw	r30, r12
    3526:	82 a1       	ldd	r24, Z+34	; 0x22
    3528:	93 a1       	ldd	r25, Z+35	; 0x23
    352a:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <_ZN13HardwareTimer5startEh>
	_timer->waitForFinish();
    352e:	f6 01       	movw	r30, r12
    3530:	82 a1       	ldd	r24, Z+34	; 0x22
    3532:	93 a1       	ldd	r25, Z+35	; 0x23
    3534:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <_ZN13HardwareTimer13waitForFinishEv>
    3538:	76 01       	movw	r14, r12
    353a:	c0 ea       	ldi	r28, 0xA0	; 160

	// Read calibration values and CRC
	for ( uint8_t i = 0 ; i < 7 ; i++ ) {
		Wire.beginTransmission(MS5837_ADDR);
    353c:	66 e7       	ldi	r22, 0x76	; 118
    353e:	70 e0       	ldi	r23, 0x00	; 0
    3540:	85 e5       	ldi	r24, 0x55	; 85
    3542:	98 e0       	ldi	r25, 0x08	; 8
    3544:	0e 94 86 12 	call	0x250c	; 0x250c <_ZN7TwoWire17beginTransmissionEi>
    3548:	e0 91 55 08 	lds	r30, 0x0855	; 0x800855 <Wire>
    354c:	f0 91 56 08 	lds	r31, 0x0856	; 0x800856 <Wire+0x1>
    3550:	01 90       	ld	r0, Z+
    3552:	f0 81       	ld	r31, Z
    3554:	e0 2d       	mov	r30, r0
    3556:	6c 2f       	mov	r22, r28
    3558:	85 e5       	ldi	r24, 0x55	; 85
    355a:	98 e0       	ldi	r25, 0x08	; 8
    355c:	19 95       	eicall
		Wire.write(MS5837_PROM_READ+i*2);
		Wire.endTransmission();
    355e:	85 e5       	ldi	r24, 0x55	; 85
    3560:	98 e0       	ldi	r25, 0x08	; 8
    3562:	53 d8       	rcall	.-3930   	; 0x260a <_ZN7TwoWire15endTransmissionEv>

		Wire.requestFrom(MS5837_ADDR,2);
    3564:	42 e0       	ldi	r20, 0x02	; 2
    3566:	50 e0       	ldi	r21, 0x00	; 0
    3568:	66 e7       	ldi	r22, 0x76	; 118
    356a:	70 e0       	ldi	r23, 0x00	; 0
    356c:	85 e5       	ldi	r24, 0x55	; 85
    356e:	98 e0       	ldi	r25, 0x08	; 8
    3570:	49 d8       	rcall	.-3950   	; 0x2604 <_ZN7TwoWire11requestFromEii>
		C[i] = (Wire.read() << 8) | Wire.read();
    3572:	85 e5       	ldi	r24, 0x55	; 85
    3574:	98 e0       	ldi	r25, 0x08	; 8
    3576:	0e 94 b2 11 	call	0x2364	; 0x2364 <_ZN7TwoWire4readEv>
    357a:	d8 2f       	mov	r29, r24
    357c:	85 e5       	ldi	r24, 0x55	; 85
    357e:	98 e0       	ldi	r25, 0x08	; 8
    3580:	0e 94 b2 11 	call	0x2364	; 0x2364 <_ZN7TwoWire4readEv>
    3584:	1d 2f       	mov	r17, r29
    3586:	00 e0       	ldi	r16, 0x00	; 0
    3588:	80 2b       	or	r24, r16
    358a:	91 2b       	or	r25, r17
    358c:	f7 01       	movw	r30, r14
    358e:	81 93       	st	Z+, r24
    3590:	91 93       	st	Z+, r25
    3592:	7f 01       	movw	r14, r30
    3594:	ce 5f       	subi	r28, 0xFE	; 254
	//_delay_ms(10);
	_timer->start(1);
	_timer->waitForFinish();

	// Read calibration values and CRC
	for ( uint8_t i = 0 ; i < 7 ; i++ ) {
    3596:	ce 3a       	cpi	r28, 0xAE	; 174
    3598:	89 f6       	brne	.-94     	; 0x353c <_ZN6MS58375beginEv+0x6c>
		Wire.requestFrom(MS5837_ADDR,2);
		C[i] = (Wire.read() << 8) | Wire.read();
	}

	// Verify that data is correct with CRC
	uint8_t crcRead = C[0] >> 12;
    359a:	f6 01       	movw	r30, r12
    359c:	c1 81       	ldd	r28, Z+1	; 0x01
    359e:	c2 95       	swap	r28
    35a0:	cf 70       	andi	r28, 0x0F	; 15
	uint8_t crcCalculated = crc4(C);
    35a2:	b6 01       	movw	r22, r12
    35a4:	c6 01       	movw	r24, r12
    35a6:	5b df       	rcall	.-330    	; 0x345e <_ZN6MS58374crc4EPj>
    35a8:	91 e0       	ldi	r25, 0x01	; 1
    35aa:	c8 13       	cpse	r28, r24
    35ac:	90 e0       	ldi	r25, 0x00	; 0
	if ( crcCalculated == crcRead ) {
		return true; // Initialization success
	}

	return false; // CRC fail
}
    35ae:	89 2f       	mov	r24, r25
    35b0:	df 91       	pop	r29
    35b2:	cf 91       	pop	r28
    35b4:	1f 91       	pop	r17
    35b6:	0f 91       	pop	r16
    35b8:	ff 90       	pop	r15
    35ba:	ef 90       	pop	r14
    35bc:	df 90       	pop	r13
    35be:	cf 90       	pop	r12
    35c0:	08 95       	ret

000035c2 <_ZN6MS58376updateEv>:
	}else{
		return false;
	}
}

void MS5837::update(){
    35c2:	8f 92       	push	r8
    35c4:	9f 92       	push	r9
    35c6:	af 92       	push	r10
    35c8:	bf 92       	push	r11
    35ca:	cf 92       	push	r12
    35cc:	df 92       	push	r13
    35ce:	ef 92       	push	r14
    35d0:	ff 92       	push	r15
    35d2:	0f 93       	push	r16
    35d4:	1f 93       	push	r17
    35d6:	cf 93       	push	r28
    35d8:	df 93       	push	r29
	if(_state != STATE_FINISHED){
    35da:	dc 01       	movw	r26, r24
    35dc:	91 96       	adiw	r26, 0x21	; 33
    35de:	2c 91       	ld	r18, X
    35e0:	22 23       	and	r18, r18
    35e2:	09 f4       	brne	.+2      	; 0x35e6 <_ZN6MS58376updateEv+0x24>
    35e4:	d1 c0       	rjmp	.+418    	; 0x3788 <_ZN6MS58376updateEv+0x1c6>
    35e6:	ec 01       	movw	r28, r24
		if(_timer->finished()){
    35e8:	8a a1       	ldd	r24, Y+34	; 0x22
    35ea:	9b a1       	ldd	r25, Y+35	; 0x23
    35ec:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <_ZN13HardwareTimer8finishedEv>
    35f0:	88 23       	and	r24, r24
    35f2:	09 f4       	brne	.+2      	; 0x35f6 <_ZN6MS58376updateEv+0x34>
    35f4:	c9 c0       	rjmp	.+402    	; 0x3788 <_ZN6MS58376updateEv+0x1c6>
			if(_state == STATE_READ_D1){
    35f6:	89 a1       	ldd	r24, Y+33	; 0x21
    35f8:	81 30       	cpi	r24, 0x01	; 1
    35fa:	09 f0       	breq	.+2      	; 0x35fe <_ZN6MS58376updateEv+0x3c>
    35fc:	69 c0       	rjmp	.+210    	; 0x36d0 <_ZN6MS58376updateEv+0x10e>
				//Read D1 conversion and Request D2 conversion
				Wire.beginTransmission(MS5837_ADDR);
    35fe:	66 e7       	ldi	r22, 0x76	; 118
    3600:	70 e0       	ldi	r23, 0x00	; 0
    3602:	85 e5       	ldi	r24, 0x55	; 85
    3604:	98 e0       	ldi	r25, 0x08	; 8
    3606:	0e 94 86 12 	call	0x250c	; 0x250c <_ZN7TwoWire17beginTransmissionEi>
    360a:	05 e5       	ldi	r16, 0x55	; 85
    360c:	18 e0       	ldi	r17, 0x08	; 8
    360e:	d8 01       	movw	r26, r16
    3610:	ed 91       	ld	r30, X+
    3612:	fc 91       	ld	r31, X
    3614:	01 90       	ld	r0, Z+
    3616:	f0 81       	ld	r31, Z
    3618:	e0 2d       	mov	r30, r0
    361a:	60 e0       	ldi	r22, 0x00	; 0
    361c:	c8 01       	movw	r24, r16
    361e:	19 95       	eicall
				Wire.write(MS5837_ADC_READ);
				Wire.endTransmission();
    3620:	c8 01       	movw	r24, r16
    3622:	0e 94 05 13 	call	0x260a	; 0x260a <_ZN7TwoWire15endTransmissionEv>

				Wire.requestFrom(MS5837_ADDR,3);
    3626:	43 e0       	ldi	r20, 0x03	; 3
    3628:	50 e0       	ldi	r21, 0x00	; 0
    362a:	66 e7       	ldi	r22, 0x76	; 118
    362c:	70 e0       	ldi	r23, 0x00	; 0
    362e:	c8 01       	movw	r24, r16
    3630:	0e 94 02 13 	call	0x2604	; 0x2604 <_ZN7TwoWire11requestFromEii>
				D1 = 0;
    3634:	18 8a       	std	Y+16, r1	; 0x10
    3636:	19 8a       	std	Y+17, r1	; 0x11
    3638:	1a 8a       	std	Y+18, r1	; 0x12
    363a:	1b 8a       	std	Y+19, r1	; 0x13
				D1 = Wire.read();
    363c:	c8 01       	movw	r24, r16
    363e:	0e 94 b2 11 	call	0x2364	; 0x2364 <_ZN7TwoWire4readEv>
    3642:	4c 01       	movw	r8, r24
    3644:	99 0f       	add	r25, r25
    3646:	aa 08       	sbc	r10, r10
    3648:	bb 08       	sbc	r11, r11
    364a:	88 8a       	std	Y+16, r8	; 0x10
    364c:	99 8a       	std	Y+17, r9	; 0x11
    364e:	aa 8a       	std	Y+18, r10	; 0x12
    3650:	bb 8a       	std	Y+19, r11	; 0x13
				D1 = (D1 << 8) | Wire.read();
    3652:	c8 01       	movw	r24, r16
    3654:	0e 94 b2 11 	call	0x2364	; 0x2364 <_ZN7TwoWire4readEv>
    3658:	ba 2c       	mov	r11, r10
    365a:	a9 2c       	mov	r10, r9
    365c:	98 2c       	mov	r9, r8
    365e:	88 24       	eor	r8, r8
    3660:	6c 01       	movw	r12, r24
    3662:	99 0f       	add	r25, r25
    3664:	ee 08       	sbc	r14, r14
    3666:	ff 08       	sbc	r15, r15
    3668:	c8 28       	or	r12, r8
    366a:	d9 28       	or	r13, r9
    366c:	ea 28       	or	r14, r10
    366e:	fb 28       	or	r15, r11
    3670:	c8 8a       	std	Y+16, r12	; 0x10
    3672:	d9 8a       	std	Y+17, r13	; 0x11
    3674:	ea 8a       	std	Y+18, r14	; 0x12
    3676:	fb 8a       	std	Y+19, r15	; 0x13
				D1 = (D1 << 8) | Wire.read();
    3678:	c8 01       	movw	r24, r16
    367a:	0e 94 b2 11 	call	0x2364	; 0x2364 <_ZN7TwoWire4readEv>
    367e:	fe 2c       	mov	r15, r14
    3680:	ed 2c       	mov	r14, r13
    3682:	dc 2c       	mov	r13, r12
    3684:	cc 24       	eor	r12, r12
    3686:	09 2e       	mov	r0, r25
    3688:	00 0c       	add	r0, r0
    368a:	aa 0b       	sbc	r26, r26
    368c:	bb 0b       	sbc	r27, r27
    368e:	c8 2a       	or	r12, r24
    3690:	d9 2a       	or	r13, r25
    3692:	ea 2a       	or	r14, r26
    3694:	fb 2a       	or	r15, r27
    3696:	c8 8a       	std	Y+16, r12	; 0x10
    3698:	d9 8a       	std	Y+17, r13	; 0x11
    369a:	ea 8a       	std	Y+18, r14	; 0x12
    369c:	fb 8a       	std	Y+19, r15	; 0x13
		
				// Request D2 conversion
				Wire.beginTransmission(MS5837_ADDR);
    369e:	66 e7       	ldi	r22, 0x76	; 118
    36a0:	70 e0       	ldi	r23, 0x00	; 0
    36a2:	c8 01       	movw	r24, r16
    36a4:	0e 94 86 12 	call	0x250c	; 0x250c <_ZN7TwoWire17beginTransmissionEi>
    36a8:	d8 01       	movw	r26, r16
    36aa:	ed 91       	ld	r30, X+
    36ac:	fc 91       	ld	r31, X
    36ae:	01 90       	ld	r0, Z+
    36b0:	f0 81       	ld	r31, Z
    36b2:	e0 2d       	mov	r30, r0
    36b4:	6a e5       	ldi	r22, 0x5A	; 90
    36b6:	c8 01       	movw	r24, r16
    36b8:	19 95       	eicall
				Wire.write(MS5837_CONVERT_D2_8192);
				Wire.endTransmission();
    36ba:	c8 01       	movw	r24, r16
    36bc:	0e 94 05 13 	call	0x260a	; 0x260a <_ZN7TwoWire15endTransmissionEv>

				Timer0.start(2);
    36c0:	62 e0       	ldi	r22, 0x02	; 2
    36c2:	8b ed       	ldi	r24, 0xDB	; 219
    36c4:	97 e0       	ldi	r25, 0x07	; 7
    36c6:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <_ZN13HardwareTimer5startEh>
				_state = STATE_READ_D2;
    36ca:	82 e0       	ldi	r24, 0x02	; 2
    36cc:	89 a3       	std	Y+33, r24	; 0x21
    36ce:	5c c0       	rjmp	.+184    	; 0x3788 <_ZN6MS58376updateEv+0x1c6>
			}else if(_state == STATE_READ_D2){
    36d0:	82 30       	cpi	r24, 0x02	; 2
    36d2:	09 f0       	breq	.+2      	; 0x36d6 <_ZN6MS58376updateEv+0x114>
    36d4:	59 c0       	rjmp	.+178    	; 0x3788 <_ZN6MS58376updateEv+0x1c6>
				// Read D2 conversion and calculate readings
				Wire.beginTransmission(MS5837_ADDR);
    36d6:	66 e7       	ldi	r22, 0x76	; 118
    36d8:	70 e0       	ldi	r23, 0x00	; 0
    36da:	85 e5       	ldi	r24, 0x55	; 85
    36dc:	98 e0       	ldi	r25, 0x08	; 8
    36de:	0e 94 86 12 	call	0x250c	; 0x250c <_ZN7TwoWire17beginTransmissionEi>
    36e2:	e0 91 55 08 	lds	r30, 0x0855	; 0x800855 <Wire>
    36e6:	f0 91 56 08 	lds	r31, 0x0856	; 0x800856 <Wire+0x1>
    36ea:	01 90       	ld	r0, Z+
    36ec:	f0 81       	ld	r31, Z
    36ee:	e0 2d       	mov	r30, r0
    36f0:	60 e0       	ldi	r22, 0x00	; 0
    36f2:	85 e5       	ldi	r24, 0x55	; 85
    36f4:	98 e0       	ldi	r25, 0x08	; 8
    36f6:	19 95       	eicall
				Wire.write(MS5837_ADC_READ);
				Wire.endTransmission();
    36f8:	85 e5       	ldi	r24, 0x55	; 85
    36fa:	98 e0       	ldi	r25, 0x08	; 8
    36fc:	0e 94 05 13 	call	0x260a	; 0x260a <_ZN7TwoWire15endTransmissionEv>

				Wire.requestFrom(MS5837_ADDR,3);
    3700:	43 e0       	ldi	r20, 0x03	; 3
    3702:	50 e0       	ldi	r21, 0x00	; 0
    3704:	66 e7       	ldi	r22, 0x76	; 118
    3706:	70 e0       	ldi	r23, 0x00	; 0
    3708:	85 e5       	ldi	r24, 0x55	; 85
    370a:	98 e0       	ldi	r25, 0x08	; 8
    370c:	0e 94 02 13 	call	0x2604	; 0x2604 <_ZN7TwoWire11requestFromEii>
				D2 = 0;
    3710:	1c 8a       	std	Y+20, r1	; 0x14
    3712:	1d 8a       	std	Y+21, r1	; 0x15
    3714:	1e 8a       	std	Y+22, r1	; 0x16
    3716:	1f 8a       	std	Y+23, r1	; 0x17
				D2 = Wire.read();
    3718:	85 e5       	ldi	r24, 0x55	; 85
    371a:	98 e0       	ldi	r25, 0x08	; 8
    371c:	0e 94 b2 11 	call	0x2364	; 0x2364 <_ZN7TwoWire4readEv>
    3720:	4c 01       	movw	r8, r24
    3722:	99 0f       	add	r25, r25
    3724:	aa 08       	sbc	r10, r10
    3726:	bb 08       	sbc	r11, r11
    3728:	8c 8a       	std	Y+20, r8	; 0x14
    372a:	9d 8a       	std	Y+21, r9	; 0x15
    372c:	ae 8a       	std	Y+22, r10	; 0x16
    372e:	bf 8a       	std	Y+23, r11	; 0x17
				D2 = (D2 << 8) | Wire.read();
    3730:	85 e5       	ldi	r24, 0x55	; 85
    3732:	98 e0       	ldi	r25, 0x08	; 8
    3734:	0e 94 b2 11 	call	0x2364	; 0x2364 <_ZN7TwoWire4readEv>
    3738:	ba 2c       	mov	r11, r10
    373a:	a9 2c       	mov	r10, r9
    373c:	98 2c       	mov	r9, r8
    373e:	88 24       	eor	r8, r8
    3740:	6c 01       	movw	r12, r24
    3742:	99 0f       	add	r25, r25
    3744:	ee 08       	sbc	r14, r14
    3746:	ff 08       	sbc	r15, r15
    3748:	c8 28       	or	r12, r8
    374a:	d9 28       	or	r13, r9
    374c:	ea 28       	or	r14, r10
    374e:	fb 28       	or	r15, r11
    3750:	cc 8a       	std	Y+20, r12	; 0x14
    3752:	dd 8a       	std	Y+21, r13	; 0x15
    3754:	ee 8a       	std	Y+22, r14	; 0x16
    3756:	ff 8a       	std	Y+23, r15	; 0x17
				D2 = (D2 << 8) | Wire.read();
    3758:	85 e5       	ldi	r24, 0x55	; 85
    375a:	98 e0       	ldi	r25, 0x08	; 8
    375c:	0e 94 b2 11 	call	0x2364	; 0x2364 <_ZN7TwoWire4readEv>
    3760:	fe 2c       	mov	r15, r14
    3762:	ed 2c       	mov	r14, r13
    3764:	dc 2c       	mov	r13, r12
    3766:	cc 24       	eor	r12, r12
    3768:	09 2e       	mov	r0, r25
    376a:	00 0c       	add	r0, r0
    376c:	aa 0b       	sbc	r26, r26
    376e:	bb 0b       	sbc	r27, r27
    3770:	c8 2a       	or	r12, r24
    3772:	d9 2a       	or	r13, r25
    3774:	ea 2a       	or	r14, r26
    3776:	fb 2a       	or	r15, r27
    3778:	cc 8a       	std	Y+20, r12	; 0x14
    377a:	dd 8a       	std	Y+21, r13	; 0x15
    377c:	ee 8a       	std	Y+22, r14	; 0x16
    377e:	ff 8a       	std	Y+23, r15	; 0x17

				calculate();
    3780:	ce 01       	movw	r24, r28
    3782:	0e 94 4b 13 	call	0x2696	; 0x2696 <_ZN6MS58379calculateEv>
				_state = STATE_FINISHED;
    3786:	19 a2       	std	Y+33, r1	; 0x21
			}
		}
	}
}
    3788:	df 91       	pop	r29
    378a:	cf 91       	pop	r28
    378c:	1f 91       	pop	r17
    378e:	0f 91       	pop	r16
    3790:	ff 90       	pop	r15
    3792:	ef 90       	pop	r14
    3794:	df 90       	pop	r13
    3796:	cf 90       	pop	r12
    3798:	bf 90       	pop	r11
    379a:	af 90       	pop	r10
    379c:	9f 90       	pop	r9
    379e:	8f 90       	pop	r8
    37a0:	08 95       	ret

000037a2 <_ZN7PCA9685C1Eh>:
//Wakes board from sleep
void PCA9685::wakeup() {
  uint8_t sleep = read8(PCA9685_MODE1);
  uint8_t wakeup = sleep & ~MODE1_SLEEP; // set sleep bit low
  write8(PCA9685_MODE1, wakeup);
}
    37a2:	fc 01       	movw	r30, r24
    37a4:	60 83       	st	Z, r22
    37a6:	08 95       	ret

000037a8 <_ZN7PCA96856setPWMEhjj>:
    37a8:	ef 92       	push	r14
    37aa:	ff 92       	push	r15
    37ac:	0f 93       	push	r16
    37ae:	1f 93       	push	r17
    37b0:	cf 93       	push	r28
    37b2:	df 93       	push	r29
    37b4:	c6 2f       	mov	r28, r22
    37b6:	e4 2e       	mov	r14, r20
    37b8:	f5 2e       	mov	r15, r21
    37ba:	02 2f       	mov	r16, r18
    37bc:	13 2f       	mov	r17, r19
    37be:	fc 01       	movw	r30, r24
    37c0:	60 81       	ld	r22, Z
    37c2:	85 e5       	ldi	r24, 0x55	; 85
    37c4:	98 e0       	ldi	r25, 0x08	; 8
    37c6:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <_ZN7TwoWire17beginTransmissionEh>
    37ca:	6c 2f       	mov	r22, r28
    37cc:	70 e0       	ldi	r23, 0x00	; 0
    37ce:	66 0f       	add	r22, r22
    37d0:	77 1f       	adc	r23, r23
    37d2:	66 0f       	add	r22, r22
    37d4:	77 1f       	adc	r23, r23
    37d6:	6a 5f       	subi	r22, 0xFA	; 250
    37d8:	7f 4f       	sbci	r23, 0xFF	; 255
    37da:	c5 e5       	ldi	r28, 0x55	; 85
    37dc:	d8 e0       	ldi	r29, 0x08	; 8
    37de:	e8 81       	ld	r30, Y
    37e0:	f9 81       	ldd	r31, Y+1	; 0x01
    37e2:	01 90       	ld	r0, Z+
    37e4:	f0 81       	ld	r31, Z
    37e6:	e0 2d       	mov	r30, r0
    37e8:	ce 01       	movw	r24, r28
    37ea:	19 95       	eicall
    37ec:	e8 81       	ld	r30, Y
    37ee:	f9 81       	ldd	r31, Y+1	; 0x01
    37f0:	01 90       	ld	r0, Z+
    37f2:	f0 81       	ld	r31, Z
    37f4:	e0 2d       	mov	r30, r0
    37f6:	6e 2d       	mov	r22, r14
    37f8:	ce 01       	movw	r24, r28
    37fa:	19 95       	eicall
    37fc:	e8 81       	ld	r30, Y
    37fe:	f9 81       	ldd	r31, Y+1	; 0x01
    3800:	01 90       	ld	r0, Z+
    3802:	f0 81       	ld	r31, Z
    3804:	e0 2d       	mov	r30, r0
    3806:	6f 2d       	mov	r22, r15
    3808:	ce 01       	movw	r24, r28
    380a:	19 95       	eicall
    380c:	e8 81       	ld	r30, Y
    380e:	f9 81       	ldd	r31, Y+1	; 0x01
    3810:	01 90       	ld	r0, Z+
    3812:	f0 81       	ld	r31, Z
    3814:	e0 2d       	mov	r30, r0
    3816:	60 2f       	mov	r22, r16
    3818:	ce 01       	movw	r24, r28
    381a:	19 95       	eicall
    381c:	e8 81       	ld	r30, Y
    381e:	f9 81       	ldd	r31, Y+1	; 0x01
    3820:	01 90       	ld	r0, Z+
    3822:	f0 81       	ld	r31, Z
    3824:	e0 2d       	mov	r30, r0
    3826:	61 2f       	mov	r22, r17
    3828:	ce 01       	movw	r24, r28
    382a:	19 95       	eicall
    382c:	ce 01       	movw	r24, r28
    382e:	0e 94 05 13 	call	0x260a	; 0x260a <_ZN7TwoWire15endTransmissionEv>
    3832:	df 91       	pop	r29
    3834:	cf 91       	pop	r28
    3836:	1f 91       	pop	r17
    3838:	0f 91       	pop	r16
    383a:	ff 90       	pop	r15
    383c:	ef 90       	pop	r14
    383e:	08 95       	ret

00003840 <_ZN7PCA968517writeMicrosecondsEhj>:
    3840:	8f 92       	push	r8
    3842:	9f 92       	push	r9
    3844:	af 92       	push	r10
    3846:	bf 92       	push	r11
    3848:	cf 92       	push	r12
    384a:	df 92       	push	r13
    384c:	ef 92       	push	r14
    384e:	ff 92       	push	r15
    3850:	1f 93       	push	r17
    3852:	cf 93       	push	r28
    3854:	df 93       	push	r29
    3856:	ec 01       	movw	r28, r24
    3858:	16 2f       	mov	r17, r22
    385a:	ba 01       	movw	r22, r20
    385c:	80 e0       	ldi	r24, 0x00	; 0
    385e:	90 e0       	ldi	r25, 0x00	; 0
    3860:	0e 94 bf 27 	call	0x4f7e	; 0x4f7e <__floatunsisf>
    3864:	6b 01       	movw	r12, r22
    3866:	7c 01       	movw	r14, r24
    3868:	6d 81       	ldd	r22, Y+5	; 0x05
    386a:	70 e0       	ldi	r23, 0x00	; 0
    386c:	6f 5f       	subi	r22, 0xFF	; 255
    386e:	7f 4f       	sbci	r23, 0xFF	; 255
    3870:	07 2e       	mov	r0, r23
    3872:	00 0c       	add	r0, r0
    3874:	88 0b       	sbc	r24, r24
    3876:	99 0b       	sbc	r25, r25
    3878:	0e 94 c1 27 	call	0x4f82	; 0x4f82 <__floatsisf>
    387c:	20 e0       	ldi	r18, 0x00	; 0
    387e:	34 e2       	ldi	r19, 0x24	; 36
    3880:	44 e7       	ldi	r20, 0x74	; 116
    3882:	59 e4       	ldi	r21, 0x49	; 73
    3884:	0e 94 75 28 	call	0x50ea	; 0x50ea <__mulsf3>
    3888:	4b 01       	movw	r8, r22
    388a:	5c 01       	movw	r10, r24
    388c:	69 81       	ldd	r22, Y+1	; 0x01
    388e:	7a 81       	ldd	r23, Y+2	; 0x02
    3890:	8b 81       	ldd	r24, Y+3	; 0x03
    3892:	9c 81       	ldd	r25, Y+4	; 0x04
    3894:	0e 94 bf 27 	call	0x4f7e	; 0x4f7e <__floatunsisf>
    3898:	9b 01       	movw	r18, r22
    389a:	ac 01       	movw	r20, r24
    389c:	c5 01       	movw	r24, r10
    389e:	b4 01       	movw	r22, r8
    38a0:	0e 94 2b 27 	call	0x4e56	; 0x4e56 <__divsf3>
    38a4:	9b 01       	movw	r18, r22
    38a6:	ac 01       	movw	r20, r24
    38a8:	c7 01       	movw	r24, r14
    38aa:	b6 01       	movw	r22, r12
    38ac:	0e 94 2b 27 	call	0x4e56	; 0x4e56 <__divsf3>
    38b0:	0e 94 93 27 	call	0x4f26	; 0x4f26 <__fixunssfsi>
    38b4:	9b 01       	movw	r18, r22
    38b6:	40 e0       	ldi	r20, 0x00	; 0
    38b8:	50 e0       	ldi	r21, 0x00	; 0
    38ba:	61 2f       	mov	r22, r17
    38bc:	ce 01       	movw	r24, r28
    38be:	74 df       	rcall	.-280    	; 0x37a8 <_ZN7PCA96856setPWMEhjj>
    38c0:	df 91       	pop	r29
    38c2:	cf 91       	pop	r28
    38c4:	1f 91       	pop	r17
    38c6:	ff 90       	pop	r15
    38c8:	ef 90       	pop	r14
    38ca:	df 90       	pop	r13
    38cc:	cf 90       	pop	r12
    38ce:	bf 90       	pop	r11
    38d0:	af 90       	pop	r10
    38d2:	9f 90       	pop	r9
    38d4:	8f 90       	pop	r8
    38d6:	08 95       	ret

000038d8 <_ZN7PCA968522getOscillatorFrequencyEv>:
    38d8:	fc 01       	movw	r30, r24
    38da:	61 81       	ldd	r22, Z+1	; 0x01
    38dc:	72 81       	ldd	r23, Z+2	; 0x02
    38de:	83 81       	ldd	r24, Z+3	; 0x03
    38e0:	94 81       	ldd	r25, Z+4	; 0x04
    38e2:	08 95       	ret

000038e4 <_ZN7PCA968522setOscillatorFrequencyEm>:
    38e4:	fc 01       	movw	r30, r24
    38e6:	41 83       	std	Z+1, r20	; 0x01
    38e8:	52 83       	std	Z+2, r21	; 0x02
    38ea:	63 83       	std	Z+3, r22	; 0x03
    38ec:	74 83       	std	Z+4, r23	; 0x04
    38ee:	08 95       	ret

000038f0 <_ZN7PCA96855read8Eh>:
    38f0:	1f 93       	push	r17
    38f2:	cf 93       	push	r28
    38f4:	df 93       	push	r29
    38f6:	ec 01       	movw	r28, r24
    38f8:	16 2f       	mov	r17, r22
    38fa:	68 81       	ld	r22, Y
    38fc:	85 e5       	ldi	r24, 0x55	; 85
    38fe:	98 e0       	ldi	r25, 0x08	; 8
    3900:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <_ZN7TwoWire17beginTransmissionEh>
    3904:	61 2f       	mov	r22, r17
    3906:	85 e5       	ldi	r24, 0x55	; 85
    3908:	98 e0       	ldi	r25, 0x08	; 8
    390a:	0e 94 0e 12 	call	0x241c	; 0x241c <_ZN7TwoWire5writeEh>
    390e:	85 e5       	ldi	r24, 0x55	; 85
    3910:	98 e0       	ldi	r25, 0x08	; 8
    3912:	0e 94 05 13 	call	0x260a	; 0x260a <_ZN7TwoWire15endTransmissionEv>
    3916:	41 e0       	ldi	r20, 0x01	; 1
    3918:	68 81       	ld	r22, Y
    391a:	85 e5       	ldi	r24, 0x55	; 85
    391c:	98 e0       	ldi	r25, 0x08	; 8
    391e:	0e 94 ff 12 	call	0x25fe	; 0x25fe <_ZN7TwoWire11requestFromEhh>
    3922:	85 e5       	ldi	r24, 0x55	; 85
    3924:	98 e0       	ldi	r25, 0x08	; 8
    3926:	0e 94 b2 11 	call	0x2364	; 0x2364 <_ZN7TwoWire4readEv>
    392a:	df 91       	pop	r29
    392c:	cf 91       	pop	r28
    392e:	1f 91       	pop	r17
    3930:	08 95       	ret

00003932 <_ZN7PCA96856write8Ehh>:
    3932:	cf 93       	push	r28
    3934:	df 93       	push	r29
    3936:	d6 2f       	mov	r29, r22
    3938:	c4 2f       	mov	r28, r20
    393a:	fc 01       	movw	r30, r24
    393c:	60 81       	ld	r22, Z
    393e:	85 e5       	ldi	r24, 0x55	; 85
    3940:	98 e0       	ldi	r25, 0x08	; 8
    3942:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <_ZN7TwoWire17beginTransmissionEh>
    3946:	6d 2f       	mov	r22, r29
    3948:	85 e5       	ldi	r24, 0x55	; 85
    394a:	98 e0       	ldi	r25, 0x08	; 8
    394c:	0e 94 0e 12 	call	0x241c	; 0x241c <_ZN7TwoWire5writeEh>
    3950:	6c 2f       	mov	r22, r28
    3952:	85 e5       	ldi	r24, 0x55	; 85
    3954:	98 e0       	ldi	r25, 0x08	; 8
    3956:	0e 94 0e 12 	call	0x241c	; 0x241c <_ZN7TwoWire5writeEh>
    395a:	85 e5       	ldi	r24, 0x55	; 85
    395c:	98 e0       	ldi	r25, 0x08	; 8
    395e:	0e 94 05 13 	call	0x260a	; 0x260a <_ZN7TwoWire15endTransmissionEv>
    3962:	df 91       	pop	r29
    3964:	cf 91       	pop	r28
    3966:	08 95       	ret

00003968 <_ZN7PCA96855resetEv>:
    3968:	40 e8       	ldi	r20, 0x80	; 128
    396a:	60 e0       	ldi	r22, 0x00	; 0
    396c:	e2 df       	rcall	.-60     	; 0x3932 <_ZN7PCA96856write8Ehh>
    396e:	8f e3       	ldi	r24, 0x3F	; 63
    3970:	9c e9       	ldi	r25, 0x9C	; 156
    3972:	01 97       	sbiw	r24, 0x01	; 1
    3974:	f1 f7       	brne	.-4      	; 0x3972 <_ZN7PCA96855resetEv+0xa>
    3976:	00 c0       	rjmp	.+0      	; 0x3978 <_ZN7PCA96855resetEv+0x10>
    3978:	00 00       	nop
    397a:	08 95       	ret

0000397c <_ZN7PCA96859setExtClkEh>:

//Sets EXTCLK pin to use the external clock
void PCA9685::setExtClk(uint8_t prescale) {
    397c:	0f 93       	push	r16
    397e:	1f 93       	push	r17
    3980:	cf 93       	push	r28
    3982:	df 93       	push	r29
    3984:	8c 01       	movw	r16, r24
    3986:	d6 2f       	mov	r29, r22
  uint8_t oldmode = read8(PCA9685_MODE1);
    3988:	60 e0       	ldi	r22, 0x00	; 0
    398a:	b2 df       	rcall	.-156    	; 0x38f0 <_ZN7PCA96855read8Eh>
  uint8_t newmode = (oldmode & ~MODE1_RESTART) | MODE1_SLEEP; // sleep
    398c:	c8 2f       	mov	r28, r24
    398e:	cf 76       	andi	r28, 0x6F	; 111
    3990:	4c 2f       	mov	r20, r28
    3992:	40 61       	ori	r20, 0x10	; 16
  write8(PCA9685_MODE1, newmode); // go to sleep, turn off internal oscillator
    3994:	60 e0       	ldi	r22, 0x00	; 0
    3996:	c8 01       	movw	r24, r16
    3998:	cc df       	rcall	.-104    	; 0x3932 <_ZN7PCA96856write8Ehh>

  // This sets both the SLEEP and EXTCLK bits of the MODE1 register to switch to
  // use the external clock.
  write8(PCA9685_MODE1, (newmode |= MODE1_EXTCLK));
    399a:	c0 65       	ori	r28, 0x50	; 80
    399c:	4c 2f       	mov	r20, r28
    399e:	60 e0       	ldi	r22, 0x00	; 0
    39a0:	c8 01       	movw	r24, r16
    39a2:	c7 df       	rcall	.-114    	; 0x3932 <_ZN7PCA96856write8Ehh>

  _prescale = prescale;
    39a4:	f8 01       	movw	r30, r16
    39a6:	d5 83       	std	Z+5, r29	; 0x05
  write8(PCA9685_PRESCALE, prescale); // set the prescaler
    39a8:	4d 2f       	mov	r20, r29
    39aa:	6e ef       	ldi	r22, 0xFE	; 254
    39ac:	c8 01       	movw	r24, r16
    39ae:	c1 df       	rcall	.-126    	; 0x3932 <_ZN7PCA96856write8Ehh>
    39b0:	8f e1       	ldi	r24, 0x1F	; 31
    39b2:	9e e4       	ldi	r25, 0x4E	; 78
    39b4:	01 97       	sbiw	r24, 0x01	; 1
    39b6:	f1 f7       	brne	.-4      	; 0x39b4 <_ZN7PCA96859setExtClkEh+0x38>
    39b8:	00 c0       	rjmp	.+0      	; 0x39ba <_ZN7PCA96859setExtClkEh+0x3e>
    39ba:	00 00       	nop

  _delay_ms(5);
  
  write8(PCA9685_MODE1, (newmode & ~MODE1_SLEEP) | MODE1_RESTART | MODE1_AI);// clear the SLEEP bit to start
    39bc:	4c 2f       	mov	r20, r28
    39be:	4f 74       	andi	r20, 0x4F	; 79
    39c0:	40 6a       	ori	r20, 0xA0	; 160
    39c2:	60 e0       	ldi	r22, 0x00	; 0
    39c4:	c8 01       	movw	r24, r16
    39c6:	b5 df       	rcall	.-150    	; 0x3932 <_ZN7PCA96856write8Ehh>
}
    39c8:	df 91       	pop	r29
    39ca:	cf 91       	pop	r28
    39cc:	1f 91       	pop	r17
    39ce:	0f 91       	pop	r16
    39d0:	08 95       	ret

000039d2 <_ZN7PCA968510setPWMFreqEf>:

//Sets the PWM frequency for the entire chip, up to ~1.6 KHz
void PCA9685::setPWMFreq(float freq) {
    39d2:	8f 92       	push	r8
    39d4:	9f 92       	push	r9
    39d6:	af 92       	push	r10
    39d8:	bf 92       	push	r11
    39da:	cf 92       	push	r12
    39dc:	df 92       	push	r13
    39de:	ef 92       	push	r14
    39e0:	ff 92       	push	r15
    39e2:	1f 93       	push	r17
    39e4:	cf 93       	push	r28
    39e6:	df 93       	push	r29
    39e8:	ec 01       	movw	r28, r24
    39ea:	6a 01       	movw	r12, r20
    39ec:	7b 01       	movw	r14, r22
  // Range output modulation frequency is dependant on oscillator
  if (freq < 1)
    39ee:	20 e0       	ldi	r18, 0x00	; 0
    39f0:	30 e0       	ldi	r19, 0x00	; 0
    39f2:	40 e8       	ldi	r20, 0x80	; 128
    39f4:	5f e3       	ldi	r21, 0x3F	; 63
    39f6:	c7 01       	movw	r24, r14
    39f8:	b6 01       	movw	r22, r12
    39fa:	0e 94 27 27 	call	0x4e4e	; 0x4e4e <__cmpsf2>
    39fe:	88 23       	and	r24, r24
    3a00:	a4 f0       	brlt	.+40     	; 0x3a2a <_ZN7PCA968510setPWMFreqEf+0x58>
    freq = 1;
  if (freq > 3500)
    3a02:	20 e0       	ldi	r18, 0x00	; 0
    3a04:	30 ec       	ldi	r19, 0xC0	; 192
    3a06:	4a e5       	ldi	r20, 0x5A	; 90
    3a08:	55 e4       	ldi	r21, 0x45	; 69
    3a0a:	c7 01       	movw	r24, r14
    3a0c:	b6 01       	movw	r22, r12
    3a0e:	0e 94 71 28 	call	0x50e2	; 0x50e2 <__gesf2>
    3a12:	18 16       	cp	r1, r24
    3a14:	94 f4       	brge	.+36     	; 0x3a3a <_ZN7PCA968510setPWMFreqEf+0x68>
    freq = 3500; // Datasheet limit is 3052=50MHz/(4*4096)
    3a16:	0f 2e       	mov	r0, r31
    3a18:	c1 2c       	mov	r12, r1
    3a1a:	f0 ec       	ldi	r31, 0xC0	; 192
    3a1c:	df 2e       	mov	r13, r31
    3a1e:	fa e5       	ldi	r31, 0x5A	; 90
    3a20:	ef 2e       	mov	r14, r31
    3a22:	f5 e4       	ldi	r31, 0x45	; 69
    3a24:	ff 2e       	mov	r15, r31
    3a26:	f0 2d       	mov	r31, r0
    3a28:	08 c0       	rjmp	.+16     	; 0x3a3a <_ZN7PCA968510setPWMFreqEf+0x68>

//Sets the PWM frequency for the entire chip, up to ~1.6 KHz
void PCA9685::setPWMFreq(float freq) {
  // Range output modulation frequency is dependant on oscillator
  if (freq < 1)
    freq = 1;
    3a2a:	0f 2e       	mov	r0, r31
    3a2c:	c1 2c       	mov	r12, r1
    3a2e:	d1 2c       	mov	r13, r1
    3a30:	f0 e8       	ldi	r31, 0x80	; 128
    3a32:	ef 2e       	mov	r14, r31
    3a34:	ff e3       	ldi	r31, 0x3F	; 63
    3a36:	ff 2e       	mov	r15, r31
    3a38:	f0 2d       	mov	r31, r0
  if (freq > 3500)
    freq = 3500; // Datasheet limit is 3052=50MHz/(4*4096)

  float prescaleval = ((_oscillator_freq / (freq * 4096.0)) + 0.5) - 1;
    3a3a:	69 81       	ldd	r22, Y+1	; 0x01
    3a3c:	7a 81       	ldd	r23, Y+2	; 0x02
    3a3e:	8b 81       	ldd	r24, Y+3	; 0x03
    3a40:	9c 81       	ldd	r25, Y+4	; 0x04
    3a42:	0e 94 bf 27 	call	0x4f7e	; 0x4f7e <__floatunsisf>
    3a46:	4b 01       	movw	r8, r22
    3a48:	5c 01       	movw	r10, r24
    3a4a:	20 e0       	ldi	r18, 0x00	; 0
    3a4c:	30 e0       	ldi	r19, 0x00	; 0
    3a4e:	40 e8       	ldi	r20, 0x80	; 128
    3a50:	55 e4       	ldi	r21, 0x45	; 69
    3a52:	c7 01       	movw	r24, r14
    3a54:	b6 01       	movw	r22, r12
    3a56:	0e 94 75 28 	call	0x50ea	; 0x50ea <__mulsf3>
    3a5a:	9b 01       	movw	r18, r22
    3a5c:	ac 01       	movw	r20, r24
    3a5e:	c5 01       	movw	r24, r10
    3a60:	b4 01       	movw	r22, r8
    3a62:	0e 94 2b 27 	call	0x4e56	; 0x4e56 <__divsf3>
    3a66:	20 e0       	ldi	r18, 0x00	; 0
    3a68:	30 e0       	ldi	r19, 0x00	; 0
    3a6a:	40 e0       	ldi	r20, 0x00	; 0
    3a6c:	5f e3       	ldi	r21, 0x3F	; 63
    3a6e:	0e 94 c3 26 	call	0x4d86	; 0x4d86 <__addsf3>
    3a72:	20 e0       	ldi	r18, 0x00	; 0
    3a74:	30 e0       	ldi	r19, 0x00	; 0
    3a76:	40 e8       	ldi	r20, 0x80	; 128
    3a78:	5f e3       	ldi	r21, 0x3F	; 63
    3a7a:	0e 94 c2 26 	call	0x4d84	; 0x4d84 <__subsf3>
    3a7e:	6b 01       	movw	r12, r22
    3a80:	7c 01       	movw	r14, r24
  if (prescaleval < PCA9685_PRESCALE_MIN)
    3a82:	20 e0       	ldi	r18, 0x00	; 0
    3a84:	30 e0       	ldi	r19, 0x00	; 0
    3a86:	40 e4       	ldi	r20, 0x40	; 64
    3a88:	50 e4       	ldi	r21, 0x40	; 64
    3a8a:	0e 94 27 27 	call	0x4e4e	; 0x4e4e <__cmpsf2>
    3a8e:	88 23       	and	r24, r24
    3a90:	9c f0       	brlt	.+38     	; 0x3ab8 <_ZN7PCA968510setPWMFreqEf+0xe6>
    prescaleval = PCA9685_PRESCALE_MIN;
  if (prescaleval > PCA9685_PRESCALE_MAX)
    3a92:	20 e0       	ldi	r18, 0x00	; 0
    3a94:	30 e0       	ldi	r19, 0x00	; 0
    3a96:	4f e7       	ldi	r20, 0x7F	; 127
    3a98:	53 e4       	ldi	r21, 0x43	; 67
    3a9a:	c7 01       	movw	r24, r14
    3a9c:	b6 01       	movw	r22, r12
    3a9e:	0e 94 71 28 	call	0x50e2	; 0x50e2 <__gesf2>
    3aa2:	18 16       	cp	r1, r24
    3aa4:	7c f4       	brge	.+30     	; 0x3ac4 <_ZN7PCA968510setPWMFreqEf+0xf2>
    prescaleval = PCA9685_PRESCALE_MAX;
    3aa6:	0f 2e       	mov	r0, r31
    3aa8:	c1 2c       	mov	r12, r1
    3aaa:	d1 2c       	mov	r13, r1
    3aac:	ff e7       	ldi	r31, 0x7F	; 127
    3aae:	ef 2e       	mov	r14, r31
    3ab0:	f3 e4       	ldi	r31, 0x43	; 67
    3ab2:	ff 2e       	mov	r15, r31
    3ab4:	f0 2d       	mov	r31, r0
    3ab6:	06 c0       	rjmp	.+12     	; 0x3ac4 <_ZN7PCA968510setPWMFreqEf+0xf2>
  if (freq > 3500)
    freq = 3500; // Datasheet limit is 3052=50MHz/(4*4096)

  float prescaleval = ((_oscillator_freq / (freq * 4096.0)) + 0.5) - 1;
  if (prescaleval < PCA9685_PRESCALE_MIN)
    prescaleval = PCA9685_PRESCALE_MIN;
    3ab8:	c1 2c       	mov	r12, r1
    3aba:	d1 2c       	mov	r13, r1
    3abc:	68 94       	set
    3abe:	ee 24       	eor	r14, r14
    3ac0:	e6 f8       	bld	r14, 6
    3ac2:	fe 2c       	mov	r15, r14
  if (prescaleval > PCA9685_PRESCALE_MAX)
    prescaleval = PCA9685_PRESCALE_MAX;
  uint8_t prescale = (uint8_t)prescaleval;
    3ac4:	c7 01       	movw	r24, r14
    3ac6:	b6 01       	movw	r22, r12
    3ac8:	0e 94 93 27 	call	0x4f26	; 0x4f26 <__fixunssfsi>
    3acc:	f6 2e       	mov	r15, r22

  uint8_t oldmode = read8(PCA9685_MODE1);
    3ace:	60 e0       	ldi	r22, 0x00	; 0
    3ad0:	ce 01       	movw	r24, r28
    3ad2:	0e df       	rcall	.-484    	; 0x38f0 <_ZN7PCA96855read8Eh>
    3ad4:	18 2f       	mov	r17, r24
  uint8_t newmode = (oldmode & ~MODE1_RESTART) | MODE1_SLEEP; // sleep
  write8(PCA9685_MODE1, newmode);                             // go to sleep
    3ad6:	48 2f       	mov	r20, r24
    3ad8:	4f 76       	andi	r20, 0x6F	; 111
    3ada:	40 61       	ori	r20, 0x10	; 16
    3adc:	60 e0       	ldi	r22, 0x00	; 0
    3ade:	ce 01       	movw	r24, r28
    3ae0:	28 df       	rcall	.-432    	; 0x3932 <_ZN7PCA96856write8Ehh>
  _prescale = prescale;
    3ae2:	fd 82       	std	Y+5, r15	; 0x05
  write8(PCA9685_PRESCALE, prescale); // set the prescaler
    3ae4:	4f 2d       	mov	r20, r15
    3ae6:	6e ef       	ldi	r22, 0xFE	; 254
    3ae8:	ce 01       	movw	r24, r28
    3aea:	23 df       	rcall	.-442    	; 0x3932 <_ZN7PCA96856write8Ehh>
  write8(PCA9685_MODE1, oldmode);
    3aec:	41 2f       	mov	r20, r17
    3aee:	60 e0       	ldi	r22, 0x00	; 0
    3af0:	ce 01       	movw	r24, r28
    3af2:	1f df       	rcall	.-450    	; 0x3932 <_ZN7PCA96856write8Ehh>
    3af4:	8f e1       	ldi	r24, 0x1F	; 31
    3af6:	9e e4       	ldi	r25, 0x4E	; 78
    3af8:	01 97       	sbiw	r24, 0x01	; 1
    3afa:	f1 f7       	brne	.-4      	; 0x3af8 <_ZN7PCA968510setPWMFreqEf+0x126>
    3afc:	00 c0       	rjmp	.+0      	; 0x3afe <_ZN7PCA968510setPWMFreqEf+0x12c>
    3afe:	00 00       	nop
  _delay_ms(5);
  // This sets the MODE1 register to turn on auto increment.
  write8(PCA9685_MODE1, oldmode | MODE1_RESTART | MODE1_AI);
    3b00:	41 2f       	mov	r20, r17
    3b02:	40 6a       	ori	r20, 0xA0	; 160
    3b04:	60 e0       	ldi	r22, 0x00	; 0
    3b06:	ce 01       	movw	r24, r28
    3b08:	14 df       	rcall	.-472    	; 0x3932 <_ZN7PCA96856write8Ehh>
}
    3b0a:	df 91       	pop	r29
    3b0c:	cf 91       	pop	r28
    3b0e:	1f 91       	pop	r17
    3b10:	ff 90       	pop	r15
    3b12:	ef 90       	pop	r14
    3b14:	df 90       	pop	r13
    3b16:	cf 90       	pop	r12
    3b18:	bf 90       	pop	r11
    3b1a:	af 90       	pop	r10
    3b1c:	9f 90       	pop	r9
    3b1e:	8f 90       	pop	r8
    3b20:	08 95       	ret

00003b22 <_ZN7PCA96855beginEh>:

PCA9685::PCA9685(const uint8_t addr) : _addr(addr){
	
}

void PCA9685::begin(uint8_t prescale) {
    3b22:	1f 93       	push	r17
    3b24:	cf 93       	push	r28
    3b26:	df 93       	push	r29
    3b28:	ec 01       	movw	r28, r24
    3b2a:	16 2f       	mov	r17, r22
	Wire.begin();
    3b2c:	85 e5       	ldi	r24, 0x55	; 85
    3b2e:	98 e0       	ldi	r25, 0x08	; 8
    3b30:	0e 94 67 12 	call	0x24ce	; 0x24ce <_ZN7TwoWire5beginEv>
	reset();
    3b34:	ce 01       	movw	r24, r28
    3b36:	18 df       	rcall	.-464    	; 0x3968 <_ZN7PCA96855resetEv>
	if (prescale) {
    3b38:	11 23       	and	r17, r17
    3b3a:	21 f0       	breq	.+8      	; 0x3b44 <_ZN7PCA96855beginEh+0x22>
		setExtClk(prescale);
    3b3c:	61 2f       	mov	r22, r17
    3b3e:	ce 01       	movw	r24, r28
    3b40:	1d df       	rcall	.-454    	; 0x397c <_ZN7PCA96859setExtClkEh>
    3b42:	06 c0       	rjmp	.+12     	; 0x3b50 <_ZN7PCA96855beginEh+0x2e>
	} else {  
		setPWMFreq(1000); // set a default frequency
    3b44:	40 e0       	ldi	r20, 0x00	; 0
    3b46:	50 e0       	ldi	r21, 0x00	; 0
    3b48:	6a e7       	ldi	r22, 0x7A	; 122
    3b4a:	74 e4       	ldi	r23, 0x44	; 68
    3b4c:	ce 01       	movw	r24, r28
    3b4e:	41 df       	rcall	.-382    	; 0x39d2 <_ZN7PCA968510setPWMFreqEf>
 *  @brief Setter for the internally tracked oscillator used for freq
 * calculations
 *  @param freq The frequency the PCA9685 should use for frequency calculations
 */
void PCA9685::setOscillatorFrequency(uint32_t freq) {
  _oscillator_freq = freq;
    3b50:	80 e4       	ldi	r24, 0x40	; 64
    3b52:	98 e7       	ldi	r25, 0x78	; 120
    3b54:	ad e7       	ldi	r26, 0x7D	; 125
    3b56:	b1 e0       	ldi	r27, 0x01	; 1
    3b58:	89 83       	std	Y+1, r24	; 0x01
    3b5a:	9a 83       	std	Y+2, r25	; 0x02
    3b5c:	ab 83       	std	Y+3, r26	; 0x03
    3b5e:	bc 83       	std	Y+4, r27	; 0x04
		setExtClk(prescale);
	} else {  
		setPWMFreq(1000); // set a default frequency
	}
	setOscillatorFrequency(FREQUENCY_OSCILLATOR); // set the default internal frequency
}
    3b60:	df 91       	pop	r29
    3b62:	cf 91       	pop	r28
    3b64:	1f 91       	pop	r17
    3b66:	08 95       	ret

00003b68 <_ZN18TwiServoControllerC1Eh>:
 */ 

#include "TwiServoController.h"
#include "../Micro/CpuFreq.h"

TwiServoController::TwiServoController(const uint8_t addr) : controller(addr){
    3b68:	1c ce       	rjmp	.-968    	; 0x37a2 <_ZN7PCA9685C1Eh>
    3b6a:	08 95       	ret

00003b6c <_ZN18TwiServoController5beginEv>:
		
}

bool TwiServoController::begin(){
    3b6c:	cf 93       	push	r28
    3b6e:	df 93       	push	r29
    3b70:	ec 01       	movw	r28, r24
	controller.begin();
    3b72:	60 e0       	ldi	r22, 0x00	; 0
    3b74:	d6 df       	rcall	.-84     	; 0x3b22 <_ZN7PCA96855beginEh>
	// In theory the internal oscillator is 25MHz but it really isn't
	// that precise. You can 'calibrate' by tweaking this number till
	// you get the frequency you're expecting!
	controller.setOscillatorFrequency(27000000);  // The int.osc. is closer to 27MHz
    3b76:	40 ec       	ldi	r20, 0xC0	; 192
    3b78:	5c ef       	ldi	r21, 0xFC	; 252
    3b7a:	6b e9       	ldi	r22, 0x9B	; 155
    3b7c:	71 e0       	ldi	r23, 0x01	; 1
    3b7e:	ce 01       	movw	r24, r28
    3b80:	b1 de       	rcall	.-670    	; 0x38e4 <_ZN7PCA968522setOscillatorFrequencyEm>
	controller.setPWMFreq(SERVO_FREQ);  // Analog servos run at ~50 Hz updates
    3b82:	40 e0       	ldi	r20, 0x00	; 0
    3b84:	50 e0       	ldi	r21, 0x00	; 0
    3b86:	68 e4       	ldi	r22, 0x48	; 72
    3b88:	72 e4       	ldi	r23, 0x42	; 66
    3b8a:	ce 01       	movw	r24, r28
    3b8c:	22 df       	rcall	.-444    	; 0x39d2 <_ZN7PCA968510setPWMFreqEf>
    3b8e:	8f e3       	ldi	r24, 0x3F	; 63
    3b90:	9c e9       	ldi	r25, 0x9C	; 156
    3b92:	01 97       	sbiw	r24, 0x01	; 1
    3b94:	f1 f7       	brne	.-4      	; 0x3b92 <_ZN18TwiServoController5beginEv+0x26>
    3b96:	00 c0       	rjmp	.+0      	; 0x3b98 <_ZN18TwiServoController5beginEv+0x2c>
	_delay_ms(10);
	return controller.getOscillatorFrequency() == 27000000;
    3b98:	00 00       	nop
    3b9a:	ce 01       	movw	r24, r28
    3b9c:	9d de       	rcall	.-710    	; 0x38d8 <_ZN7PCA968522getOscillatorFrequencyEv>
    3b9e:	21 e0       	ldi	r18, 0x01	; 1
    3ba0:	60 3c       	cpi	r22, 0xC0	; 192
    3ba2:	7c 4f       	sbci	r23, 0xFC	; 252
    3ba4:	8b 49       	sbci	r24, 0x9B	; 155
    3ba6:	91 40       	sbci	r25, 0x01	; 1
    3ba8:	09 f0       	breq	.+2      	; 0x3bac <_ZN18TwiServoController5beginEv+0x40>
    3baa:	20 e0       	ldi	r18, 0x00	; 0
}
    3bac:	82 2f       	mov	r24, r18
    3bae:	df 91       	pop	r29
    3bb0:	cf 91       	pop	r28
    3bb2:	08 95       	ret

00003bb4 <_ZN18TwiServoController8setPulseEhj>:

void TwiServoController::setPulse(uint8_t num, uint16_t us){
	if(num < 16) controller.writeMicroseconds(num, us);
    3bb4:	60 31       	cpi	r22, 0x10	; 16
    3bb6:	08 f4       	brcc	.+2      	; 0x3bba <_ZN18TwiServoController8setPulseEhj+0x6>
    3bb8:	43 ce       	rjmp	.-890    	; 0x3840 <_ZN7PCA968517writeMicrosecondsEhj>
    3bba:	08 95       	ret

00003bbc <_ZN18TwiServoController7releaseEh>:
}

void TwiServoController::release(uint8_t num){
	if(num < 16) controller.setPWM(num, 0, 4096);
    3bbc:	60 31       	cpi	r22, 0x10	; 16
    3bbe:	28 f4       	brcc	.+10     	; 0x3bca <_ZN18TwiServoController7releaseEh+0xe>
    3bc0:	20 e0       	ldi	r18, 0x00	; 0
    3bc2:	30 e1       	ldi	r19, 0x10	; 16
    3bc4:	40 e0       	ldi	r20, 0x00	; 0
    3bc6:	50 e0       	ldi	r21, 0x00	; 0
    3bc8:	ef cd       	rjmp	.-1058   	; 0x37a8 <_ZN7PCA96856setPWMEhjj>
    3bca:	08 95       	ret

00003bcc <_ZN16HardwarePcbServo8setPulseEj>:
		default:
			break;
	}
}*/
#include "../Micro/Peripherals/HardwareSerial.h"
void HardwarePcbServo::setPulse(uint16_t us){
    3bcc:	fc 01       	movw	r30, r24
	switch(_servo){
    3bce:	94 81       	ldd	r25, Z+4	; 0x04
    3bd0:	91 30       	cpi	r25, 0x01	; 1
    3bd2:	49 f0       	breq	.+18     	; 0x3be6 <_ZN16HardwarePcbServo8setPulseEj+0x1a>
    3bd4:	18 f0       	brcs	.+6      	; 0x3bdc <_ZN16HardwarePcbServo8setPulseEj+0x10>
    3bd6:	92 30       	cpi	r25, 0x02	; 2
    3bd8:	59 f0       	breq	.+22     	; 0x3bf0 <_ZN16HardwarePcbServo8setPulseEj+0x24>
    3bda:	08 95       	ret
		case ServoA:
			_controller->setPulseA(us);
    3bdc:	82 81       	ldd	r24, Z+2	; 0x02
    3bde:	93 81       	ldd	r25, Z+3	; 0x03
    3be0:	0c 94 39 0d 	jmp	0x1a72	; 0x1a72 <_ZN13HardwareServo9setPulseAEj>
			break;
    3be4:	08 95       	ret
		case ServoB:
			_controller->setPulseB(us);
    3be6:	82 81       	ldd	r24, Z+2	; 0x02
    3be8:	93 81       	ldd	r25, Z+3	; 0x03
    3bea:	0c 94 43 0d 	jmp	0x1a86	; 0x1a86 <_ZN13HardwareServo9setPulseBEj>
			break;
    3bee:	08 95       	ret
		case ServoC:
			_controller->setPulseC(us);
    3bf0:	82 81       	ldd	r24, Z+2	; 0x02
    3bf2:	93 81       	ldd	r25, Z+3	; 0x03
    3bf4:	0c 94 4d 0d 	jmp	0x1a9a	; 0x1a9a <_ZN13HardwareServo9setPulseCEj>
    3bf8:	08 95       	ret

00003bfa <_ZN16HardwarePcbServo6enableEb>:
		default:
			break;
	}
}

void HardwarePcbServo::enable(bool en /* = true */){
    3bfa:	fc 01       	movw	r30, r24
	switch(_servo){
    3bfc:	94 81       	ldd	r25, Z+4	; 0x04
    3bfe:	91 30       	cpi	r25, 0x01	; 1
    3c00:	81 f0       	breq	.+32     	; 0x3c22 <_ZN16HardwarePcbServo6enableEb+0x28>
    3c02:	18 f0       	brcs	.+6      	; 0x3c0a <_ZN16HardwarePcbServo6enableEb+0x10>
    3c04:	92 30       	cpi	r25, 0x02	; 2
    3c06:	c9 f0       	breq	.+50     	; 0x3c3a <_ZN16HardwarePcbServo6enableEb+0x40>
    3c08:	08 95       	ret
		case ServoA:
			if(en) _controller->EnableA(); else _controller->DisableA();
    3c0a:	66 23       	and	r22, r22
    3c0c:	29 f0       	breq	.+10     	; 0x3c18 <_ZN16HardwarePcbServo6enableEb+0x1e>
    3c0e:	82 81       	ldd	r24, Z+2	; 0x02
    3c10:	93 81       	ldd	r25, Z+3	; 0x03
    3c12:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <_ZN13HardwareServo7EnableAEv>
    3c16:	08 95       	ret
    3c18:	82 81       	ldd	r24, Z+2	; 0x02
    3c1a:	93 81       	ldd	r25, Z+3	; 0x03
    3c1c:	0c 94 0f 0d 	jmp	0x1a1e	; 0x1a1e <_ZN13HardwareServo8DisableAEv>
    3c20:	08 95       	ret
			break;
		case ServoB:
			if(en) _controller->EnableB(); else _controller->DisableB();
    3c22:	66 23       	and	r22, r22
    3c24:	29 f0       	breq	.+10     	; 0x3c30 <_ZN16HardwarePcbServo6enableEb+0x36>
    3c26:	82 81       	ldd	r24, Z+2	; 0x02
    3c28:	93 81       	ldd	r25, Z+3	; 0x03
    3c2a:	0c 94 f5 0c 	jmp	0x19ea	; 0x19ea <_ZN13HardwareServo7EnableBEv>
    3c2e:	08 95       	ret
    3c30:	82 81       	ldd	r24, Z+2	; 0x02
    3c32:	93 81       	ldd	r25, Z+3	; 0x03
    3c34:	0c 94 1d 0d 	jmp	0x1a3a	; 0x1a3a <_ZN13HardwareServo8DisableBEv>
    3c38:	08 95       	ret
			break;
		case ServoC:
			if(en) _controller->EnableC(); else _controller->DisableC();
    3c3a:	66 23       	and	r22, r22
    3c3c:	29 f0       	breq	.+10     	; 0x3c48 <_ZN16HardwarePcbServo6enableEb+0x4e>
    3c3e:	82 81       	ldd	r24, Z+2	; 0x02
    3c40:	93 81       	ldd	r25, Z+3	; 0x03
    3c42:	0c 94 02 0d 	jmp	0x1a04	; 0x1a04 <_ZN13HardwareServo7EnableCEv>
    3c46:	08 95       	ret
    3c48:	82 81       	ldd	r24, Z+2	; 0x02
    3c4a:	93 81       	ldd	r25, Z+3	; 0x03
    3c4c:	0c 94 2b 0d 	jmp	0x1a56	; 0x1a56 <_ZN13HardwareServo8DisableCEv>
    3c50:	08 95       	ret

00003c52 <_ZN16HardwarePcbServoC1ER13HardwareServoNS_9ServoId_tE>:
 *  Author: zcarey
 */ 

#include "HardwarePcbServo.h"

HardwarePcbServo::HardwarePcbServo(HardwareServo &controller, ServoId_t servo) 
    3c52:	fc 01       	movw	r30, r24
	: PcbServo(), _controller(&controller), _servo(servo) {
    3c54:	83 e9       	ldi	r24, 0x93	; 147
    3c56:	92 e0       	ldi	r25, 0x02	; 2
    3c58:	91 83       	std	Z+1, r25	; 0x01
    3c5a:	80 83       	st	Z, r24
    3c5c:	73 83       	std	Z+3, r23	; 0x03
    3c5e:	62 83       	std	Z+2, r22	; 0x02
    3c60:	44 83       	std	Z+4, r20	; 0x04
    3c62:	08 95       	ret

00003c64 <_GLOBAL__sub_I_PcbServoA1>:
 *  Author: zcarey
 */ 

#include "PcbPins.h"

HardwarePcbServo PcbServoA1(Servo5, HardwarePcbServo::ServoC);
    3c64:	42 e0       	ldi	r20, 0x02	; 2
    3c66:	63 e8       	ldi	r22, 0x83	; 131
    3c68:	77 e0       	ldi	r23, 0x07	; 7
    3c6a:	89 e5       	ldi	r24, 0x59	; 89
    3c6c:	99 e0       	ldi	r25, 0x09	; 9
    3c6e:	f1 df       	rcall	.-30     	; 0x3c52 <_ZN16HardwarePcbServoC1ER13HardwareServoNS_9ServoId_tE>
HardwarePcbServo PcbServoA2(Servo3, HardwarePcbServo::ServoB);
    3c70:	41 e0       	ldi	r20, 0x01	; 1
    3c72:	69 ea       	ldi	r22, 0xA9	; 169
    3c74:	77 e0       	ldi	r23, 0x07	; 7
    3c76:	84 e5       	ldi	r24, 0x54	; 84
    3c78:	99 e0       	ldi	r25, 0x09	; 9
    3c7a:	eb df       	rcall	.-42     	; 0x3c52 <_ZN16HardwarePcbServoC1ER13HardwareServoNS_9ServoId_tE>
HardwarePcbServo PcbServoA3(Servo3, HardwarePcbServo::ServoA);
    3c7c:	40 e0       	ldi	r20, 0x00	; 0
    3c7e:	69 ea       	ldi	r22, 0xA9	; 169
    3c80:	77 e0       	ldi	r23, 0x07	; 7
    3c82:	8f e4       	ldi	r24, 0x4F	; 79
    3c84:	99 e0       	ldi	r25, 0x09	; 9
    3c86:	e5 df       	rcall	.-54     	; 0x3c52 <_ZN16HardwarePcbServoC1ER13HardwareServoNS_9ServoId_tE>
HardwarePcbServo PcbServoA4(Servo4, HardwarePcbServo::ServoB);
    3c88:	41 e0       	ldi	r20, 0x01	; 1
    3c8a:	66 e9       	ldi	r22, 0x96	; 150
    3c8c:	77 e0       	ldi	r23, 0x07	; 7
    3c8e:	8a e4       	ldi	r24, 0x4A	; 74
    3c90:	99 e0       	ldi	r25, 0x09	; 9
    3c92:	df df       	rcall	.-66     	; 0x3c52 <_ZN16HardwarePcbServoC1ER13HardwareServoNS_9ServoId_tE>
HardwarePcbServo PcbServoA5(Servo4, HardwarePcbServo::ServoC);
    3c94:	42 e0       	ldi	r20, 0x02	; 2
    3c96:	66 e9       	ldi	r22, 0x96	; 150
    3c98:	77 e0       	ldi	r23, 0x07	; 7
    3c9a:	85 e4       	ldi	r24, 0x45	; 69
    3c9c:	99 e0       	ldi	r25, 0x09	; 9
    3c9e:	d9 df       	rcall	.-78     	; 0x3c52 <_ZN16HardwarePcbServoC1ER13HardwareServoNS_9ServoId_tE>

HardwarePcbServo PcbServoB1(Servo5, HardwarePcbServo::ServoA);
    3ca0:	40 e0       	ldi	r20, 0x00	; 0
    3ca2:	63 e8       	ldi	r22, 0x83	; 131
    3ca4:	77 e0       	ldi	r23, 0x07	; 7
    3ca6:	80 e4       	ldi	r24, 0x40	; 64
    3ca8:	99 e0       	ldi	r25, 0x09	; 9
    3caa:	d3 df       	rcall	.-90     	; 0x3c52 <_ZN16HardwarePcbServoC1ER13HardwareServoNS_9ServoId_tE>
HardwarePcbServo PcbServoB2(Servo5, HardwarePcbServo::ServoB);
    3cac:	41 e0       	ldi	r20, 0x01	; 1
    3cae:	63 e8       	ldi	r22, 0x83	; 131
    3cb0:	77 e0       	ldi	r23, 0x07	; 7
    3cb2:	8b e3       	ldi	r24, 0x3B	; 59
    3cb4:	99 e0       	ldi	r25, 0x09	; 9
    3cb6:	cd df       	rcall	.-102    	; 0x3c52 <_ZN16HardwarePcbServoC1ER13HardwareServoNS_9ServoId_tE>
HardwarePcbServo PcbServoB3(Servo3, HardwarePcbServo::ServoC);
    3cb8:	42 e0       	ldi	r20, 0x02	; 2
    3cba:	69 ea       	ldi	r22, 0xA9	; 169
    3cbc:	77 e0       	ldi	r23, 0x07	; 7
    3cbe:	86 e3       	ldi	r24, 0x36	; 54
    3cc0:	99 e0       	ldi	r25, 0x09	; 9
    3cc2:	c7 df       	rcall	.-114    	; 0x3c52 <_ZN16HardwarePcbServoC1ER13HardwareServoNS_9ServoId_tE>
HardwarePcbServo PcbServoB4(Servo4, HardwarePcbServo::ServoA);
    3cc4:	40 e0       	ldi	r20, 0x00	; 0
    3cc6:	66 e9       	ldi	r22, 0x96	; 150
    3cc8:	77 e0       	ldi	r23, 0x07	; 7
    3cca:	81 e3       	ldi	r24, 0x31	; 49
    3ccc:	99 e0       	ldi	r25, 0x09	; 9
    3cce:	c1 df       	rcall	.-126    	; 0x3c52 <_ZN16HardwarePcbServoC1ER13HardwareServoNS_9ServoId_tE>
HardwarePcbServo PcbServoB5(Servo1, HardwarePcbServo::ServoA);
    3cd0:	40 e0       	ldi	r20, 0x00	; 0
    3cd2:	6c eb       	ldi	r22, 0xBC	; 188
    3cd4:	77 e0       	ldi	r23, 0x07	; 7
    3cd6:	8c e2       	ldi	r24, 0x2C	; 44
    3cd8:	99 e0       	ldi	r25, 0x09	; 9
    3cda:	bb df       	rcall	.-138    	; 0x3c52 <_ZN16HardwarePcbServoC1ER13HardwareServoNS_9ServoId_tE>
HardwarePcbServo PcbServoB6(Servo1, HardwarePcbServo::ServoB);
    3cdc:	41 e0       	ldi	r20, 0x01	; 1
    3cde:	6c eb       	ldi	r22, 0xBC	; 188
    3ce0:	77 e0       	ldi	r23, 0x07	; 7
    3ce2:	87 e2       	ldi	r24, 0x27	; 39
    3ce4:	99 e0       	ldi	r25, 0x09	; 9
    3ce6:	b5 df       	rcall	.-150    	; 0x3c52 <_ZN16HardwarePcbServoC1ER13HardwareServoNS_9ServoId_tE>

TwiServoController PcaServoController(0x43); //0x70);
    3ce8:	63 e4       	ldi	r22, 0x43	; 67
    3cea:	81 e2       	ldi	r24, 0x21	; 33
    3cec:	99 e0       	ldi	r25, 0x09	; 9
    3cee:	3c df       	rcall	.-392    	; 0x3b68 <_ZN18TwiServoControllerC1Eh>

TwiPcbServo PcbServoC1(PcaServoController, 0);
    3cf0:	40 e0       	ldi	r20, 0x00	; 0
    3cf2:	61 e2       	ldi	r22, 0x21	; 33
    3cf4:	79 e0       	ldi	r23, 0x09	; 9
    3cf6:	89 e1       	ldi	r24, 0x19	; 25
    3cf8:	99 e0       	ldi	r25, 0x09	; 9
    3cfa:	77 d0       	rcall	.+238    	; 0x3dea <_ZN11TwiPcbServoC1ER18TwiServoControllerh>
TwiPcbServo PcbServoC2(PcaServoController, 2);
    3cfc:	42 e0       	ldi	r20, 0x02	; 2
    3cfe:	61 e2       	ldi	r22, 0x21	; 33
    3d00:	79 e0       	ldi	r23, 0x09	; 9
    3d02:	81 e1       	ldi	r24, 0x11	; 17
    3d04:	99 e0       	ldi	r25, 0x09	; 9
    3d06:	71 d0       	rcall	.+226    	; 0x3dea <_ZN11TwiPcbServoC1ER18TwiServoControllerh>
TwiPcbServo PcbServoC3(PcaServoController, 7);
    3d08:	47 e0       	ldi	r20, 0x07	; 7
    3d0a:	61 e2       	ldi	r22, 0x21	; 33
    3d0c:	79 e0       	ldi	r23, 0x09	; 9
    3d0e:	89 e0       	ldi	r24, 0x09	; 9
    3d10:	99 e0       	ldi	r25, 0x09	; 9
    3d12:	6b d0       	rcall	.+214    	; 0x3dea <_ZN11TwiPcbServoC1ER18TwiServoControllerh>
TwiPcbServo PcbServoC4(PcaServoController, 5);
    3d14:	45 e0       	ldi	r20, 0x05	; 5
    3d16:	61 e2       	ldi	r22, 0x21	; 33
    3d18:	79 e0       	ldi	r23, 0x09	; 9
    3d1a:	81 e0       	ldi	r24, 0x01	; 1
    3d1c:	99 e0       	ldi	r25, 0x09	; 9
    3d1e:	65 d0       	rcall	.+202    	; 0x3dea <_ZN11TwiPcbServoC1ER18TwiServoControllerh>
TwiPcbServo PcbServoC5(PcaServoController, 8);
    3d20:	48 e0       	ldi	r20, 0x08	; 8
    3d22:	61 e2       	ldi	r22, 0x21	; 33
    3d24:	79 e0       	ldi	r23, 0x09	; 9
    3d26:	89 ef       	ldi	r24, 0xF9	; 249
    3d28:	98 e0       	ldi	r25, 0x08	; 8
    3d2a:	5f d0       	rcall	.+190    	; 0x3dea <_ZN11TwiPcbServoC1ER18TwiServoControllerh>
TwiPcbServo PcbServoC6(PcaServoController, 10);
    3d2c:	4a e0       	ldi	r20, 0x0A	; 10
    3d2e:	61 e2       	ldi	r22, 0x21	; 33
    3d30:	79 e0       	ldi	r23, 0x09	; 9
    3d32:	81 ef       	ldi	r24, 0xF1	; 241
    3d34:	98 e0       	ldi	r25, 0x08	; 8
    3d36:	59 d0       	rcall	.+178    	; 0x3dea <_ZN11TwiPcbServoC1ER18TwiServoControllerh>
TwiPcbServo PcbServoC7(PcaServoController, 12);
    3d38:	4c e0       	ldi	r20, 0x0C	; 12
    3d3a:	61 e2       	ldi	r22, 0x21	; 33
    3d3c:	79 e0       	ldi	r23, 0x09	; 9
    3d3e:	89 ee       	ldi	r24, 0xE9	; 233
    3d40:	98 e0       	ldi	r25, 0x08	; 8
    3d42:	53 d0       	rcall	.+166    	; 0x3dea <_ZN11TwiPcbServoC1ER18TwiServoControllerh>
TwiPcbServo PcbServoC8(PcaServoController, 14);
    3d44:	4e e0       	ldi	r20, 0x0E	; 14
    3d46:	61 e2       	ldi	r22, 0x21	; 33
    3d48:	79 e0       	ldi	r23, 0x09	; 9
    3d4a:	81 ee       	ldi	r24, 0xE1	; 225
    3d4c:	98 e0       	ldi	r25, 0x08	; 8
    3d4e:	4d d0       	rcall	.+154    	; 0x3dea <_ZN11TwiPcbServoC1ER18TwiServoControllerh>

TwiPcbServo PcbServoD1(PcaServoController, 1);
    3d50:	41 e0       	ldi	r20, 0x01	; 1
    3d52:	61 e2       	ldi	r22, 0x21	; 33
    3d54:	79 e0       	ldi	r23, 0x09	; 9
    3d56:	89 ed       	ldi	r24, 0xD9	; 217
    3d58:	98 e0       	ldi	r25, 0x08	; 8
    3d5a:	47 d0       	rcall	.+142    	; 0x3dea <_ZN11TwiPcbServoC1ER18TwiServoControllerh>
TwiPcbServo PcbServoD2(PcaServoController, 3);
    3d5c:	43 e0       	ldi	r20, 0x03	; 3
    3d5e:	61 e2       	ldi	r22, 0x21	; 33
    3d60:	79 e0       	ldi	r23, 0x09	; 9
    3d62:	81 ed       	ldi	r24, 0xD1	; 209
    3d64:	98 e0       	ldi	r25, 0x08	; 8
    3d66:	41 d0       	rcall	.+130    	; 0x3dea <_ZN11TwiPcbServoC1ER18TwiServoControllerh>
TwiPcbServo PcbServoD3(PcaServoController, 6);
    3d68:	46 e0       	ldi	r20, 0x06	; 6
    3d6a:	61 e2       	ldi	r22, 0x21	; 33
    3d6c:	79 e0       	ldi	r23, 0x09	; 9
    3d6e:	89 ec       	ldi	r24, 0xC9	; 201
    3d70:	98 e0       	ldi	r25, 0x08	; 8
    3d72:	3b d0       	rcall	.+118    	; 0x3dea <_ZN11TwiPcbServoC1ER18TwiServoControllerh>
TwiPcbServo PcbServoD4(PcaServoController, 4);
    3d74:	44 e0       	ldi	r20, 0x04	; 4
    3d76:	61 e2       	ldi	r22, 0x21	; 33
    3d78:	79 e0       	ldi	r23, 0x09	; 9
    3d7a:	81 ec       	ldi	r24, 0xC1	; 193
    3d7c:	98 e0       	ldi	r25, 0x08	; 8
    3d7e:	35 d0       	rcall	.+106    	; 0x3dea <_ZN11TwiPcbServoC1ER18TwiServoControllerh>
TwiPcbServo PcbServoD5(PcaServoController, 9);
    3d80:	49 e0       	ldi	r20, 0x09	; 9
    3d82:	61 e2       	ldi	r22, 0x21	; 33
    3d84:	79 e0       	ldi	r23, 0x09	; 9
    3d86:	89 eb       	ldi	r24, 0xB9	; 185
    3d88:	98 e0       	ldi	r25, 0x08	; 8
    3d8a:	2f d0       	rcall	.+94     	; 0x3dea <_ZN11TwiPcbServoC1ER18TwiServoControllerh>
    3d8c:	4b e0       	ldi	r20, 0x0B	; 11
TwiPcbServo PcbServoD6(PcaServoController, 11);
    3d8e:	61 e2       	ldi	r22, 0x21	; 33
    3d90:	79 e0       	ldi	r23, 0x09	; 9
    3d92:	81 eb       	ldi	r24, 0xB1	; 177
    3d94:	98 e0       	ldi	r25, 0x08	; 8
    3d96:	29 d0       	rcall	.+82     	; 0x3dea <_ZN11TwiPcbServoC1ER18TwiServoControllerh>
    3d98:	4d e0       	ldi	r20, 0x0D	; 13
    3d9a:	61 e2       	ldi	r22, 0x21	; 33
TwiPcbServo PcbServoD7(PcaServoController, 13);
    3d9c:	79 e0       	ldi	r23, 0x09	; 9
    3d9e:	89 ea       	ldi	r24, 0xA9	; 169
    3da0:	98 e0       	ldi	r25, 0x08	; 8
    3da2:	23 d0       	rcall	.+70     	; 0x3dea <_ZN11TwiPcbServoC1ER18TwiServoControllerh>
    3da4:	4f e0       	ldi	r20, 0x0F	; 15
    3da6:	61 e2       	ldi	r22, 0x21	; 33
    3da8:	79 e0       	ldi	r23, 0x09	; 9
    3daa:	81 ea       	ldi	r24, 0xA1	; 161
    3dac:	98 e0       	ldi	r25, 0x08	; 8
    3dae:	1d c0       	rjmp	.+58     	; 0x3dea <_ZN11TwiPcbServoC1ER18TwiServoControllerh>
    3db0:	08 95       	ret

00003db2 <_ZN11TwiPcbServo8setPulseEj>:
{
	
}

void TwiPcbServo::setPulse(uint16_t us){
	_lastPulse = us;
    3db2:	fc 01       	movw	r30, r24
    3db4:	77 83       	std	Z+7, r23	; 0x07
    3db6:	66 83       	std	Z+6, r22	; 0x06
	if(_enabled) _controller->setPulse(_servo, us);
    3db8:	25 81       	ldd	r18, Z+5	; 0x05
    3dba:	22 23       	and	r18, r18
    3dbc:	29 f0       	breq	.+10     	; 0x3dc8 <_ZN11TwiPcbServo8setPulseEj+0x16>
    3dbe:	ab 01       	movw	r20, r22
    3dc0:	64 81       	ldd	r22, Z+4	; 0x04
    3dc2:	82 81       	ldd	r24, Z+2	; 0x02
    3dc4:	93 81       	ldd	r25, Z+3	; 0x03
    3dc6:	f6 ce       	rjmp	.-532    	; 0x3bb4 <_ZN18TwiServoController8setPulseEhj>
    3dc8:	08 95       	ret

00003dca <_ZN11TwiPcbServo6enableEb>:
}

void TwiPcbServo::enable(bool en /* = true */){
    3dca:	fc 01       	movw	r30, r24
	_enabled = en;
    3dcc:	65 83       	std	Z+5, r22	; 0x05
	if(en) _controller->setPulse(_servo, _lastPulse);
    3dce:	66 23       	and	r22, r22
    3dd0:	39 f0       	breq	.+14     	; 0x3de0 <_ZN11TwiPcbServo6enableEb+0x16>
    3dd2:	46 81       	ldd	r20, Z+6	; 0x06
    3dd4:	57 81       	ldd	r21, Z+7	; 0x07
    3dd6:	64 81       	ldd	r22, Z+4	; 0x04
    3dd8:	82 81       	ldd	r24, Z+2	; 0x02
    3dda:	93 81       	ldd	r25, Z+3	; 0x03
    3ddc:	eb ce       	rjmp	.-554    	; 0x3bb4 <_ZN18TwiServoController8setPulseEhj>
    3dde:	08 95       	ret
	else _controller->release(_servo);
    3de0:	64 81       	ldd	r22, Z+4	; 0x04
    3de2:	82 81       	ldd	r24, Z+2	; 0x02
    3de4:	93 81       	ldd	r25, Z+3	; 0x03
    3de6:	ea ce       	rjmp	.-556    	; 0x3bbc <_ZN18TwiServoController7releaseEh>
    3de8:	08 95       	ret

00003dea <_ZN11TwiPcbServoC1ER18TwiServoControllerh>:
 *  Author: zcarey
 */ 

#include "TwiPcbServo.h"

TwiPcbServo::TwiPcbServo(TwiServoController &controller, uint8_t servo)
    3dea:	fc 01       	movw	r30, r24
	: PcbServo(), _controller(&controller), _servo(servo), _enabled(false), _lastPulse(1500)
    3dec:	8b e9       	ldi	r24, 0x9B	; 155
    3dee:	92 e0       	ldi	r25, 0x02	; 2
    3df0:	91 83       	std	Z+1, r25	; 0x01
    3df2:	80 83       	st	Z, r24
    3df4:	73 83       	std	Z+3, r23	; 0x03
    3df6:	62 83       	std	Z+2, r22	; 0x02
    3df8:	44 83       	std	Z+4, r20	; 0x04
    3dfa:	15 82       	std	Z+5, r1	; 0x05
    3dfc:	8c ed       	ldi	r24, 0xDC	; 220
    3dfe:	95 e0       	ldi	r25, 0x05	; 5
    3e00:	97 83       	std	Z+7, r25	; 0x07
    3e02:	86 83       	std	Z+6, r24	; 0x06
    3e04:	08 95       	ret

00003e06 <_ZN9IReadable15CommandReceivedEhPKhh>:
#include "EtherComm.h"

class IReadable : public IRegister {
public:
	void CommandReceived(uint8_t id, const uint8_t* data, uint8_t len){
		if(len == 0){
    3e06:	21 11       	cpse	r18, r1
    3e08:	0d c0       	rjmp	.+26     	; 0x3e24 <_ZN9IReadable15CommandReceivedEhPKhh+0x1e>
			ReadRegisterRequested(id, EtherComm::buffer + 1/*+ 3*/);
    3e0a:	40 91 00 02 	lds	r20, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    3e0e:	50 91 01 02 	lds	r21, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    3e12:	4f 5f       	subi	r20, 0xFF	; 255
    3e14:	5f 4f       	sbci	r21, 0xFF	; 255
    3e16:	dc 01       	movw	r26, r24
    3e18:	ed 91       	ld	r30, X+
    3e1a:	fc 91       	ld	r31, X
    3e1c:	06 80       	ldd	r0, Z+6	; 0x06
    3e1e:	f7 81       	ldd	r31, Z+7	; 0x07
    3e20:	e0 2d       	mov	r30, r0
    3e22:	19 95       	eicall
    3e24:	08 95       	ret

00003e26 <_ZN13DigitalSensor6UpdateEPh>:
	
	bool begin(){ //override
		return rov.RegisterDevice(_id, this);
	}
	
	void Update(uint8_t* buffer) { //override
    3e26:	08 95       	ret

00003e28 <_ZN9IWritable15CommandReceivedEhPKhh>:
#include "IRegister.h"
#include "Commands.h"
class IWritable : public IRegister {
public:
	inline void CommandReceived(uint8_t id, const uint8_t* data, uint8_t len){
		WriteRegisterRequested(id, data, len);
    3e28:	dc 01       	movw	r26, r24
    3e2a:	ed 91       	ld	r30, X+
    3e2c:	fc 91       	ld	r31, X
    3e2e:	06 80       	ldd	r0, Z+6	; 0x06
    3e30:	f7 81       	ldd	r31, Z+7	; 0x07
    3e32:	e0 2d       	mov	r30, r0
    3e34:	19 95       	eicall
    3e36:	08 95       	ret

00003e38 <_ZN15DigitalActuator6UpdateEPh>:
	
	bool begin(){ //override
		return rov.RegisterDevice(_id, this);
	}
	
	void Update(uint8_t* buffer){ //override
    3e38:	08 95       	ret

00003e3a <_ZN13ServoActuator6UpdateEPh>:
		
		_servo->setPulse(1500);
		return true;
	}
	
	void Update(uint8_t* buffer){
    3e3a:	08 95       	ret

00003e3c <_ZN11TwiRegister6UpdateEPh>:
	
	bool begin(){
		return rov.RegisterDevice(_id, this);
	}
	
	void Update(uint8_t* buffer){
    3e3c:	08 95       	ret

00003e3e <_ZN13DigitalSensor21ReadRegisterRequestedEhPh>:
	}

protected:

	void ReadRegisterRequested(uint8_t id, uint8_t* buffer) { //override
		if(id == _id){
    3e3e:	dc 01       	movw	r26, r24
    3e40:	12 96       	adiw	r26, 0x02	; 2
    3e42:	2c 91       	ld	r18, X
    3e44:	12 97       	sbiw	r26, 0x02	; 2
    3e46:	26 13       	cpse	r18, r22
    3e48:	14 c0       	rjmp	.+40     	; 0x3e72 <_ZN13DigitalSensor21ReadRegisterRequestedEhPh+0x34>
			buffer[0] = ((*_pinPort & _pin) > 0) ^ _inversed;
    3e4a:	14 96       	adiw	r26, 0x04	; 4
    3e4c:	ed 91       	ld	r30, X+
    3e4e:	fc 91       	ld	r31, X
    3e50:	15 97       	sbiw	r26, 0x05	; 5
    3e52:	60 81       	ld	r22, Z
    3e54:	13 96       	adiw	r26, 0x03	; 3
    3e56:	3c 91       	ld	r19, X
    3e58:	36 23       	and	r19, r22
    3e5a:	61 e0       	ldi	r22, 0x01	; 1
    3e5c:	09 f4       	brne	.+2      	; 0x3e60 <_ZN13DigitalSensor21ReadRegisterRequestedEhPh+0x22>
    3e5e:	60 e0       	ldi	r22, 0x00	; 0
    3e60:	da 01       	movw	r26, r20
    3e62:	fc 01       	movw	r30, r24
    3e64:	86 81       	ldd	r24, Z+6	; 0x06
    3e66:	86 27       	eor	r24, r22
    3e68:	8c 93       	st	X, r24
	
protected:
	void inline SendCommand(uint8_t id, uint8_t len){
		//EtherComm::buffer[2] = id;
		//EtherComm::SendCommand(CMD_UpdateDevice, len + 1);
		EtherComm::SendCommand(id, len);	
    3e6a:	61 e0       	ldi	r22, 0x01	; 1
    3e6c:	82 2f       	mov	r24, r18
    3e6e:	0c 94 7b 0b 	jmp	0x16f6	; 0x16f6 <_ZN9EtherComm11SendCommandEhh>
    3e72:	08 95       	ret

00003e74 <_ZN13ServoActuator22WriteRegisterRequestedEhPKhh>:
		
	}
	
protected:
	void WriteRegisterRequested(uint8_t id, const uint8_t* data, uint8_t len){
    3e74:	cf 93       	push	r28
    3e76:	df 93       	push	r29
    3e78:	c6 2f       	mov	r28, r22
		if(id == _id){
    3e7a:	dc 01       	movw	r26, r24
    3e7c:	12 96       	adiw	r26, 0x02	; 2
    3e7e:	dc 91       	ld	r29, X
    3e80:	12 97       	sbiw	r26, 0x02	; 2
    3e82:	d6 13       	cpse	r29, r22
    3e84:	15 c0       	rjmp	.+42     	; 0x3eb0 <_ZN13ServoActuator22WriteRegisterRequestedEhPKhh+0x3c>
			if(len == 2){
    3e86:	22 30       	cpi	r18, 0x02	; 2
    3e88:	61 f5       	brne	.+88     	; 0x3ee2 <_ZN13ServoActuator22WriteRegisterRequestedEhPKhh+0x6e>
				_servo->setPulse(*((uint16_t*)data));
    3e8a:	14 96       	adiw	r26, 0x04	; 4
    3e8c:	8d 91       	ld	r24, X+
    3e8e:	9c 91       	ld	r25, X
    3e90:	15 97       	sbiw	r26, 0x05	; 5
    3e92:	fa 01       	movw	r30, r20
    3e94:	60 81       	ld	r22, Z
    3e96:	71 81       	ldd	r23, Z+1	; 0x01
    3e98:	dc 01       	movw	r26, r24
    3e9a:	ed 91       	ld	r30, X+
    3e9c:	fc 91       	ld	r31, X
    3e9e:	01 90       	ld	r0, Z+
    3ea0:	f0 81       	ld	r31, Z
    3ea2:	e0 2d       	mov	r30, r0
    3ea4:	19 95       	eicall
protected:
	virtual void WriteRegisterRequested(uint8_t id, const uint8_t* data, uint8_t len);
	void SendConfirmation(uint8_t id){
		//EtherComm::buffer[2] = id;
		//EtherComm::SendCommand(CMD_UpdateDevice, 1);
		EtherComm::SendCommand(id, 0);
    3ea6:	60 e0       	ldi	r22, 0x00	; 0
    3ea8:	8d 2f       	mov	r24, r29
    3eaa:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <_ZN9EtherComm11SendCommandEhh>
    3eae:	19 c0       	rjmp	.+50     	; 0x3ee2 <_ZN13ServoActuator22WriteRegisterRequestedEhPKhh+0x6e>
				SendConfirmation(id);
			}
		} else if(id == _enId){
    3eb0:	fc 01       	movw	r30, r24
    3eb2:	33 81       	ldd	r19, Z+3	; 0x03
    3eb4:	63 13       	cpse	r22, r19
    3eb6:	15 c0       	rjmp	.+42     	; 0x3ee2 <_ZN13ServoActuator22WriteRegisterRequestedEhPKhh+0x6e>
			if(len == 1){
    3eb8:	21 30       	cpi	r18, 0x01	; 1
    3eba:	99 f4       	brne	.+38     	; 0x3ee2 <_ZN13ServoActuator22WriteRegisterRequestedEhPKhh+0x6e>
				_servo->enable(data[0]);
    3ebc:	84 81       	ldd	r24, Z+4	; 0x04
    3ebe:	95 81       	ldd	r25, Z+5	; 0x05
    3ec0:	61 e0       	ldi	r22, 0x01	; 1
    3ec2:	da 01       	movw	r26, r20
    3ec4:	2c 91       	ld	r18, X
    3ec6:	21 11       	cpse	r18, r1
    3ec8:	01 c0       	rjmp	.+2      	; 0x3ecc <_ZN13ServoActuator22WriteRegisterRequestedEhPKhh+0x58>
    3eca:	60 e0       	ldi	r22, 0x00	; 0
    3ecc:	dc 01       	movw	r26, r24
    3ece:	ed 91       	ld	r30, X+
    3ed0:	fc 91       	ld	r31, X
    3ed2:	02 80       	ldd	r0, Z+2	; 0x02
    3ed4:	f3 81       	ldd	r31, Z+3	; 0x03
    3ed6:	e0 2d       	mov	r30, r0
    3ed8:	19 95       	eicall
    3eda:	60 e0       	ldi	r22, 0x00	; 0
    3edc:	8c 2f       	mov	r24, r28
    3ede:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <_ZN9EtherComm11SendCommandEhh>
				SendConfirmation(id);
			}
		}
	}
    3ee2:	df 91       	pop	r29
    3ee4:	cf 91       	pop	r28
    3ee6:	08 95       	ret

00003ee8 <_ZN15DigitalActuator22WriteRegisterRequestedEhPKhh>:
		
	}

protected:
	void WriteRegisterRequested(uint8_t id, const uint8_t* data, uint8_t len){ //override
		if((id == _id) && (len == 1)){
    3ee8:	dc 01       	movw	r26, r24
    3eea:	12 96       	adiw	r26, 0x02	; 2
    3eec:	3c 91       	ld	r19, X
    3eee:	36 13       	cpse	r19, r22
    3ef0:	26 c0       	rjmp	.+76     	; 0x3f3e <_ZN15DigitalActuator22WriteRegisterRequestedEhPKhh+0x56>
    3ef2:	21 30       	cpi	r18, 0x01	; 1
    3ef4:	21 f5       	brne	.+72     	; 0x3f3e <_ZN15DigitalActuator22WriteRegisterRequestedEhPKhh+0x56>
			if((data[0] > 0) ^ _inversed) *_portPort |= _pin;
    3ef6:	fa 01       	movw	r30, r20
    3ef8:	40 81       	ld	r20, Z
    3efa:	41 11       	cpse	r20, r1
    3efc:	01 c0       	rjmp	.+2      	; 0x3f00 <_ZN15DigitalActuator22WriteRegisterRequestedEhPKhh+0x18>
    3efe:	20 e0       	ldi	r18, 0x00	; 0
    3f00:	dc 01       	movw	r26, r24
    3f02:	16 96       	adiw	r26, 0x06	; 6
    3f04:	4c 91       	ld	r20, X
    3f06:	16 97       	sbiw	r26, 0x06	; 6
    3f08:	24 17       	cp	r18, r20
    3f0a:	51 f0       	breq	.+20     	; 0x3f20 <_ZN15DigitalActuator22WriteRegisterRequestedEhPKhh+0x38>
    3f0c:	14 96       	adiw	r26, 0x04	; 4
    3f0e:	ed 91       	ld	r30, X+
    3f10:	fc 91       	ld	r31, X
    3f12:	15 97       	sbiw	r26, 0x05	; 5
    3f14:	20 81       	ld	r18, Z
    3f16:	13 96       	adiw	r26, 0x03	; 3
    3f18:	8c 91       	ld	r24, X
    3f1a:	82 2b       	or	r24, r18
    3f1c:	80 83       	st	Z, r24
    3f1e:	0b c0       	rjmp	.+22     	; 0x3f36 <_ZN15DigitalActuator22WriteRegisterRequestedEhPKhh+0x4e>
			else *_portPort &= ~_pin;
    3f20:	dc 01       	movw	r26, r24
    3f22:	14 96       	adiw	r26, 0x04	; 4
    3f24:	ed 91       	ld	r30, X+
    3f26:	fc 91       	ld	r31, X
    3f28:	15 97       	sbiw	r26, 0x05	; 5
    3f2a:	20 81       	ld	r18, Z
    3f2c:	13 96       	adiw	r26, 0x03	; 3
    3f2e:	8c 91       	ld	r24, X
    3f30:	80 95       	com	r24
    3f32:	82 23       	and	r24, r18
    3f34:	80 83       	st	Z, r24
    3f36:	60 e0       	ldi	r22, 0x00	; 0
    3f38:	83 2f       	mov	r24, r19
    3f3a:	0c 94 7b 0b 	jmp	0x16f6	; 0x16f6 <_ZN9EtherComm11SendCommandEhh>
    3f3e:	08 95       	ret

00003f40 <_ZN11TwiRegister22WriteRegisterRequestedEhPKhh>:
		
	}
	
protected:
	void WriteRegisterRequested(uint8_t id, const uint8_t* data, uint8_t len){
		if(id == _id){
    3f40:	fc 01       	movw	r30, r24
    3f42:	82 81       	ldd	r24, Z+2	; 0x02
    3f44:	86 13       	cpse	r24, r22
    3f46:	0b c0       	rjmp	.+22     	; 0x3f5e <_ZN11TwiRegister22WriteRegisterRequestedEhPKhh+0x1e>
			if(len == 4){
    3f48:	24 30       	cpi	r18, 0x04	; 4
    3f4a:	49 f4       	brne	.+18     	; 0x3f5e <_ZN11TwiRegister22WriteRegisterRequestedEhPKhh+0x1e>
    3f4c:	fa 01       	movw	r30, r20
				Wire.setClock(*((uint32_t*)data));
    3f4e:	40 81       	ld	r20, Z
    3f50:	51 81       	ldd	r21, Z+1	; 0x01
    3f52:	62 81       	ldd	r22, Z+2	; 0x02
    3f54:	73 81       	ldd	r23, Z+3	; 0x03
    3f56:	85 e5       	ldi	r24, 0x55	; 85
    3f58:	98 e0       	ldi	r25, 0x08	; 8
    3f5a:	0c 94 78 12 	jmp	0x24f0	; 0x24f0 <_ZN7TwoWire8setClockEm>
    3f5e:	08 95       	ret

00003f60 <_Z19printServoErrorCodeh>:
#define ERROR_INIT_LED 0x03
#define ERROR_INIT_IMU 0x04
#define ERROR_INIT_PRESSURE 0x05
#define ERROR_INIT_TWI 0x06

void printServoErrorCode(uint8_t code){
    3f60:	cf 93       	push	r28
    3f62:	df 93       	push	r29
	if(code == 0x10){
    3f64:	80 31       	cpi	r24, 0x10	; 16
    3f66:	31 f4       	brne	.+12     	; 0x3f74 <_Z19printServoErrorCodeh+0x14>
		Serial.println("Unable to initialize Twi Servo Controller.");
    3f68:	6f e9       	ldi	r22, 0x9F	; 159
    3f6a:	72 e0       	ldi	r23, 0x02	; 2
    3f6c:	87 e7       	ldi	r24, 0x77	; 119
    3f6e:	97 e0       	ldi	r25, 0x07	; 7
    3f70:	86 d6       	rcall	.+3340   	; 0x4c7e <_ZN5Print7printlnEPKc>
		return;
    3f72:	35 c0       	rjmp	.+106    	; 0x3fde <_Z19printServoErrorCodeh+0x7e>
	}
	
	char letter = '?';
	uint8_t num = code & 0x0F;
    3f74:	c8 2f       	mov	r28, r24
    3f76:	cf 70       	andi	r28, 0x0F	; 15
	
	switch(code >> 4){
    3f78:	90 e0       	ldi	r25, 0x00	; 0
    3f7a:	95 95       	asr	r25
    3f7c:	87 95       	ror	r24
    3f7e:	95 95       	asr	r25
    3f80:	87 95       	ror	r24
    3f82:	95 95       	asr	r25
    3f84:	87 95       	ror	r24
    3f86:	95 95       	asr	r25
    3f88:	87 95       	ror	r24
    3f8a:	82 30       	cpi	r24, 0x02	; 2
    3f8c:	91 05       	cpc	r25, r1
    3f8e:	61 f0       	breq	.+24     	; 0x3fa8 <_Z19printServoErrorCodeh+0x48>
    3f90:	1c f4       	brge	.+6      	; 0x3f98 <_Z19printServoErrorCodeh+0x38>
    3f92:	01 97       	sbiw	r24, 0x01	; 1
    3f94:	39 f0       	breq	.+14     	; 0x3fa4 <_Z19printServoErrorCodeh+0x44>
    3f96:	0e c0       	rjmp	.+28     	; 0x3fb4 <_Z19printServoErrorCodeh+0x54>
    3f98:	83 30       	cpi	r24, 0x03	; 3
    3f9a:	91 05       	cpc	r25, r1
    3f9c:	39 f0       	breq	.+14     	; 0x3fac <_Z19printServoErrorCodeh+0x4c>
    3f9e:	04 97       	sbiw	r24, 0x04	; 4
    3fa0:	39 f0       	breq	.+14     	; 0x3fb0 <_Z19printServoErrorCodeh+0x50>
    3fa2:	08 c0       	rjmp	.+16     	; 0x3fb4 <_Z19printServoErrorCodeh+0x54>
		case 1: letter = 'A'; break;
    3fa4:	d1 e4       	ldi	r29, 0x41	; 65
    3fa6:	07 c0       	rjmp	.+14     	; 0x3fb6 <_Z19printServoErrorCodeh+0x56>
		case 2: letter = 'B'; break;
    3fa8:	d2 e4       	ldi	r29, 0x42	; 66
    3faa:	05 c0       	rjmp	.+10     	; 0x3fb6 <_Z19printServoErrorCodeh+0x56>
		case 3: letter = 'C'; break;
    3fac:	d3 e4       	ldi	r29, 0x43	; 67
    3fae:	03 c0       	rjmp	.+6      	; 0x3fb6 <_Z19printServoErrorCodeh+0x56>
		case 4: letter = 'D'; break;
    3fb0:	d4 e4       	ldi	r29, 0x44	; 68
    3fb2:	01 c0       	rjmp	.+2      	; 0x3fb6 <_Z19printServoErrorCodeh+0x56>
	if(code == 0x10){
		Serial.println("Unable to initialize Twi Servo Controller.");
		return;
	}
	
	char letter = '?';
    3fb4:	df e3       	ldi	r29, 0x3F	; 63
		case 2: letter = 'B'; break;
		case 3: letter = 'C'; break;
		case 4: letter = 'D'; break;
	}
	
	Serial.print("Unable to initialize Servo");
    3fb6:	6a ec       	ldi	r22, 0xCA	; 202
    3fb8:	72 e0       	ldi	r23, 0x02	; 2
    3fba:	87 e7       	ldi	r24, 0x77	; 119
    3fbc:	97 e0       	ldi	r25, 0x07	; 7
    3fbe:	35 d6       	rcall	.+3178   	; 0x4c2a <_ZN5Print5printEPKc>
	Serial.print(letter);
    3fc0:	6d 2f       	mov	r22, r29
    3fc2:	87 e7       	ldi	r24, 0x77	; 119
    3fc4:	97 e0       	ldi	r25, 0x07	; 7
    3fc6:	47 d6       	rcall	.+3214   	; 0x4c56 <_ZN5Print5printEc>
	Serial.print(num);
    3fc8:	4a e0       	ldi	r20, 0x0A	; 10
    3fca:	50 e0       	ldi	r21, 0x00	; 0
    3fcc:	6c 2f       	mov	r22, r28
    3fce:	87 e7       	ldi	r24, 0x77	; 119
    3fd0:	97 e0       	ldi	r25, 0x07	; 7
    3fd2:	d1 d6       	rcall	.+3490   	; 0x4d76 <_ZN5Print5printEhi>
	Serial.println(".");
    3fd4:	69 e3       	ldi	r22, 0x39	; 57
    3fd6:	72 e0       	ldi	r23, 0x02	; 2
    3fd8:	87 e7       	ldi	r24, 0x77	; 119
    3fda:	97 e0       	ldi	r25, 0x07	; 7
    3fdc:	50 d6       	rcall	.+3232   	; 0x4c7e <_ZN5Print7printlnEPKc>
}
    3fde:	df 91       	pop	r29
    3fe0:	cf 91       	pop	r28
    3fe2:	08 95       	ret

00003fe4 <_ZN5Robot14RegisterDeviceEhP9IRegister>:
	return true;
}


bool Robot::RegisterDevice(uint8_t id, IRegister* device){
	if((id != 0xFF) && (registers[id] == NULL)){
    3fe4:	8f 3f       	cpi	r24, 0xFF	; 255
    3fe6:	a1 f0       	breq	.+40     	; 0x4010 <_ZN5Robot14RegisterDeviceEhP9IRegister+0x2c>
    3fe8:	28 2f       	mov	r18, r24
    3fea:	30 e0       	ldi	r19, 0x00	; 0
    3fec:	f9 01       	movw	r30, r18
    3fee:	ee 0f       	add	r30, r30
    3ff0:	ff 1f       	adc	r31, r31
    3ff2:	e3 5a       	subi	r30, 0xA3	; 163
    3ff4:	f5 4f       	sbci	r31, 0xF5	; 245
    3ff6:	40 81       	ld	r20, Z
    3ff8:	51 81       	ldd	r21, Z+1	; 0x01
    3ffa:	45 2b       	or	r20, r21
    3ffc:	49 f4       	brne	.+18     	; 0x4010 <_ZN5Robot14RegisterDeviceEhP9IRegister+0x2c>
		registers[id] = device; 
    3ffe:	22 0f       	add	r18, r18
    4000:	33 1f       	adc	r19, r19
    4002:	f9 01       	movw	r30, r18
    4004:	e3 5a       	subi	r30, 0xA3	; 163
    4006:	f5 4f       	sbci	r31, 0xF5	; 245
    4008:	71 83       	std	Z+1, r23	; 0x01
    400a:	60 83       	st	Z, r22
		return true;
    400c:	81 e0       	ldi	r24, 0x01	; 1
    400e:	08 95       	ret
inline ErrorFlag operator | (ErrorFlag lhs, ErrorFlag rhs) {
	return static_cast<ErrorFlag>(static_cast<int>(lhs) | static_cast<int>(rhs));
}

inline ErrorFlag& operator |= (ErrorFlag& lhs, ErrorFlag rhs) {
	lhs = lhs | rhs;
    4010:	ee e5       	ldi	r30, 0x5E	; 94
    4012:	f9 e0       	ldi	r31, 0x09	; 9
    4014:	90 81       	ld	r25, Z
    4016:	91 60       	ori	r25, 0x01	; 1
    4018:	90 83       	st	Z, r25
	if((id != 0xFF) && (registers[id] == NULL)){
		registers[id] = device; 
		return true;
	}else{
		ErrorCodes.errors |= IdCollision;
		ErrorCodes.id_collision = id;
    401a:	81 83       	std	Z+1, r24	; 0x01
		return false;
    401c:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    401e:	08 95       	ret

00004020 <_ZN13ServoActuator5beginEv>:
		: _id(id), _enId(enId), _servo(&servo)
	{
			
	}
	
	bool begin(){
    4020:	1f 93       	push	r17
    4022:	cf 93       	push	r28
    4024:	df 93       	push	r29
    4026:	ec 01       	movw	r28, r24
		if(!rov.RegisterDevice(_id, this) || !rov.RegisterDevice(_enId, this)) return false;
    4028:	bc 01       	movw	r22, r24
    402a:	8a 81       	ldd	r24, Y+2	; 0x02
    402c:	db df       	rcall	.-74     	; 0x3fe4 <_ZN5Robot14RegisterDeviceEhP9IRegister>
    402e:	18 2f       	mov	r17, r24
    4030:	88 23       	and	r24, r24
    4032:	89 f0       	breq	.+34     	; 0x4056 <_ZN13ServoActuator5beginEv+0x36>
    4034:	be 01       	movw	r22, r28
    4036:	8b 81       	ldd	r24, Y+3	; 0x03
    4038:	d5 df       	rcall	.-86     	; 0x3fe4 <_ZN5Robot14RegisterDeviceEhP9IRegister>
    403a:	18 2f       	mov	r17, r24
    403c:	88 23       	and	r24, r24
    403e:	59 f0       	breq	.+22     	; 0x4056 <_ZN13ServoActuator5beginEv+0x36>
		
		_servo->setPulse(1500);
    4040:	8c 81       	ldd	r24, Y+4	; 0x04
    4042:	9d 81       	ldd	r25, Y+5	; 0x05
    4044:	dc 01       	movw	r26, r24
    4046:	ed 91       	ld	r30, X+
    4048:	fc 91       	ld	r31, X
    404a:	01 90       	ld	r0, Z+
    404c:	f0 81       	ld	r31, Z
    404e:	e0 2d       	mov	r30, r0
    4050:	6c ed       	ldi	r22, 0xDC	; 220
    4052:	75 e0       	ldi	r23, 0x05	; 5
    4054:	19 95       	eicall
		return true;
	}
    4056:	81 2f       	mov	r24, r17
    4058:	df 91       	pop	r29
    405a:	cf 91       	pop	r28
    405c:	1f 91       	pop	r17
    405e:	08 95       	ret

00004060 <_ZN13DigitalSensor5beginEv>:
		DDRPort &= ~Pin; //Enable input
		PortPort |= Pin; //Enable pullup
	}
	
	bool begin(){ //override
		return rov.RegisterDevice(_id, this);
    4060:	bc 01       	movw	r22, r24
    4062:	fc 01       	movw	r30, r24
    4064:	82 81       	ldd	r24, Z+2	; 0x02
    4066:	be cf       	rjmp	.-132    	; 0x3fe4 <_ZN5Robot14RegisterDeviceEhP9IRegister>
	}
    4068:	08 95       	ret

0000406a <_ZN15DigitalActuator5beginEv>:
	{
		DDRPort |= Pin;
	}
	
	bool begin(){ //override
		return rov.RegisterDevice(_id, this);
    406a:	bc 01       	movw	r22, r24
    406c:	fc 01       	movw	r30, r24
    406e:	82 81       	ldd	r24, Z+2	; 0x02
    4070:	b9 cf       	rjmp	.-142    	; 0x3fe4 <_ZN5Robot14RegisterDeviceEhP9IRegister>
	}
    4072:	08 95       	ret

00004074 <_ZN11TwiRegister5beginEv>:
public:
	TwiRegister(const uint8_t id) : _id(id) {
	}
	
	bool begin(){
		return rov.RegisterDevice(_id, this);
    4074:	bc 01       	movw	r22, r24
    4076:	fc 01       	movw	r30, r24
    4078:	82 81       	ldd	r24, Z+2	; 0x02
    407a:	b4 cf       	rjmp	.-152    	; 0x3fe4 <_ZN5Robot14RegisterDeviceEhP9IRegister>
	}
    407c:	08 95       	ret

0000407e <_Z16initializeServosv>:
	Serial.print(letter);
	Serial.print(num);
	Serial.println(".");
}

bool initializeServos(){
    407e:	1f 93       	push	r17
    4080:	cf 93       	push	r28
    4082:	df 93       	push	r29
	Servo1.begin();
    4084:	8c eb       	ldi	r24, 0xBC	; 188
    4086:	97 e0       	ldi	r25, 0x07	; 7
    4088:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <_ZN13HardwareServo5beginEv>
	Servo3.begin();
    408c:	89 ea       	ldi	r24, 0xA9	; 169
    408e:	97 e0       	ldi	r25, 0x07	; 7
    4090:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <_ZN13HardwareServo5beginEv>
	Servo4.begin();
    4094:	86 e9       	ldi	r24, 0x96	; 150
    4096:	97 e0       	ldi	r25, 0x07	; 7
    4098:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <_ZN13HardwareServo5beginEv>
	Servo5.begin();
    409c:	83 e8       	ldi	r24, 0x83	; 131
    409e:	97 e0       	ldi	r25, 0x07	; 7
    40a0:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <_ZN13HardwareServo5beginEv>
	
	if(!PcaServoController.begin()) return 0x10;
    40a4:	81 e2       	ldi	r24, 0x21	; 33
    40a6:	99 e0       	ldi	r25, 0x09	; 9
    40a8:	61 dd       	rcall	.-1342   	; 0x3b6c <_ZN18TwiServoController5beginEv>
    40aa:	c8 2f       	mov	r28, r24
    40ac:	88 23       	and	r24, r24
    40ae:	09 f4       	brne	.+2      	; 0x40b2 <_Z16initializeServosv+0x34>
    40b0:	4c c1       	rjmp	.+664    	; 0x434a <_Z16initializeServosv+0x2cc>
	Serial.println("Initialized Twi Servo Controller.");
    40b2:	65 ee       	ldi	r22, 0xE5	; 229
    40b4:	72 e0       	ldi	r23, 0x02	; 2
    40b6:	87 e7       	ldi	r24, 0x77	; 119
    40b8:	97 e0       	ldi	r25, 0x07	; 7
    40ba:	e1 d5       	rcall	.+3010   	; 0x4c7e <_ZN5Print7printlnEPKc>
	{
			
	}
	
	bool begin(){
		if(!rov.RegisterDevice(_id, this) || !rov.RegisterDevice(_enId, this)) return false;
    40bc:	67 e5       	ldi	r22, 0x57	; 87
    40be:	7a e0       	ldi	r23, 0x0A	; 10
    40c0:	80 91 59 0a 	lds	r24, 0x0A59	; 0x800a59 <ServoA1+0x2>
    40c4:	8f df       	rcall	.-226    	; 0x3fe4 <_ZN5Robot14RegisterDeviceEhP9IRegister>
    40c6:	d8 2f       	mov	r29, r24
    40c8:	88 23       	and	r24, r24
    40ca:	09 f4       	brne	.+2      	; 0x40ce <_Z16initializeServosv+0x50>
    40cc:	5f c1       	rjmp	.+702    	; 0x438c <_Z16initializeServosv+0x30e>
    40ce:	67 e5       	ldi	r22, 0x57	; 87
    40d0:	7a e0       	ldi	r23, 0x0A	; 10
    40d2:	80 91 5a 0a 	lds	r24, 0x0A5A	; 0x800a5a <ServoA1+0x3>
    40d6:	86 df       	rcall	.-244    	; 0x3fe4 <_ZN5Robot14RegisterDeviceEhP9IRegister>
    40d8:	c8 2f       	mov	r28, r24
    40da:	88 23       	and	r24, r24
    40dc:	09 f4       	brne	.+2      	; 0x40e0 <_Z16initializeServosv+0x62>
    40de:	37 c1       	rjmp	.+622    	; 0x434e <_Z16initializeServosv+0x2d0>
		
		_servo->setPulse(1500);
    40e0:	80 91 5b 0a 	lds	r24, 0x0A5B	; 0x800a5b <ServoA1+0x4>
    40e4:	90 91 5c 0a 	lds	r25, 0x0A5C	; 0x800a5c <ServoA1+0x5>
    40e8:	dc 01       	movw	r26, r24
    40ea:	ed 91       	ld	r30, X+
    40ec:	fc 91       	ld	r31, X
    40ee:	01 90       	ld	r0, Z+
    40f0:	f0 81       	ld	r31, Z
    40f2:	e0 2d       	mov	r30, r0
    40f4:	6c ed       	ldi	r22, 0xDC	; 220
    40f6:	75 e0       	ldi	r23, 0x05	; 5
    40f8:	19 95       	eicall
	{
			
	}
	
	bool begin(){
		if(!rov.RegisterDevice(_id, this) || !rov.RegisterDevice(_enId, this)) return false;
    40fa:	61 e5       	ldi	r22, 0x51	; 81
    40fc:	7a e0       	ldi	r23, 0x0A	; 10
    40fe:	80 91 53 0a 	lds	r24, 0x0A53	; 0x800a53 <ServoA2+0x2>
    4102:	70 df       	rcall	.-288    	; 0x3fe4 <_ZN5Robot14RegisterDeviceEhP9IRegister>
    4104:	d8 2f       	mov	r29, r24
    4106:	88 23       	and	r24, r24
    4108:	09 f4       	brne	.+2      	; 0x410c <_Z16initializeServosv+0x8e>
    410a:	40 c1       	rjmp	.+640    	; 0x438c <_Z16initializeServosv+0x30e>
    410c:	61 e5       	ldi	r22, 0x51	; 81
    410e:	7a e0       	ldi	r23, 0x0A	; 10
    4110:	80 91 54 0a 	lds	r24, 0x0A54	; 0x800a54 <ServoA2+0x3>
    4114:	67 df       	rcall	.-306    	; 0x3fe4 <_ZN5Robot14RegisterDeviceEhP9IRegister>
    4116:	c8 2f       	mov	r28, r24
    4118:	88 23       	and	r24, r24
    411a:	09 f4       	brne	.+2      	; 0x411e <_Z16initializeServosv+0xa0>
    411c:	1a c1       	rjmp	.+564    	; 0x4352 <_Z16initializeServosv+0x2d4>
		
		_servo->setPulse(1500);
    411e:	80 91 55 0a 	lds	r24, 0x0A55	; 0x800a55 <ServoA2+0x4>
    4122:	90 91 56 0a 	lds	r25, 0x0A56	; 0x800a56 <ServoA2+0x5>
    4126:	dc 01       	movw	r26, r24
    4128:	ed 91       	ld	r30, X+
    412a:	fc 91       	ld	r31, X
    412c:	01 90       	ld	r0, Z+
    412e:	f0 81       	ld	r31, Z
    4130:	e0 2d       	mov	r30, r0
    4132:	6c ed       	ldi	r22, 0xDC	; 220
    4134:	75 e0       	ldi	r23, 0x05	; 5
	{
			
	}
	
	bool begin(){
		if(!rov.RegisterDevice(_id, this) || !rov.RegisterDevice(_enId, this)) return false;
    4136:	19 95       	eicall
    4138:	6b e4       	ldi	r22, 0x4B	; 75
    413a:	7a e0       	ldi	r23, 0x0A	; 10
    413c:	80 91 4d 0a 	lds	r24, 0x0A4D	; 0x800a4d <ServoA3+0x2>
    4140:	51 df       	rcall	.-350    	; 0x3fe4 <_ZN5Robot14RegisterDeviceEhP9IRegister>
    4142:	d8 2f       	mov	r29, r24
    4144:	88 23       	and	r24, r24
    4146:	09 f4       	brne	.+2      	; 0x414a <_Z16initializeServosv+0xcc>
    4148:	21 c1       	rjmp	.+578    	; 0x438c <_Z16initializeServosv+0x30e>
    414a:	6b e4       	ldi	r22, 0x4B	; 75
    414c:	7a e0       	ldi	r23, 0x0A	; 10
    414e:	80 91 4e 0a 	lds	r24, 0x0A4E	; 0x800a4e <ServoA3+0x3>
    4152:	48 df       	rcall	.-368    	; 0x3fe4 <_ZN5Robot14RegisterDeviceEhP9IRegister>
    4154:	c8 2f       	mov	r28, r24
    4156:	88 23       	and	r24, r24
    4158:	09 f4       	brne	.+2      	; 0x415c <_Z16initializeServosv+0xde>
    415a:	fd c0       	rjmp	.+506    	; 0x4356 <_Z16initializeServosv+0x2d8>
		
		_servo->setPulse(1500);
    415c:	80 91 4f 0a 	lds	r24, 0x0A4F	; 0x800a4f <ServoA3+0x4>
    4160:	90 91 50 0a 	lds	r25, 0x0A50	; 0x800a50 <ServoA3+0x5>
    4164:	dc 01       	movw	r26, r24
    4166:	ed 91       	ld	r30, X+
    4168:	fc 91       	ld	r31, X
    416a:	01 90       	ld	r0, Z+
    416c:	f0 81       	ld	r31, Z
    416e:	e0 2d       	mov	r30, r0
    4170:	6c ed       	ldi	r22, 0xDC	; 220
    4172:	75 e0       	ldi	r23, 0x05	; 5
	{
			
	}
	
	bool begin(){
		if(!rov.RegisterDevice(_id, this) || !rov.RegisterDevice(_enId, this)) return false;
    4174:	19 95       	eicall
    4176:	65 e4       	ldi	r22, 0x45	; 69
    4178:	7a e0       	ldi	r23, 0x0A	; 10
    417a:	80 91 47 0a 	lds	r24, 0x0A47	; 0x800a47 <ServoA4+0x2>
    417e:	32 df       	rcall	.-412    	; 0x3fe4 <_ZN5Robot14RegisterDeviceEhP9IRegister>
    4180:	d8 2f       	mov	r29, r24
    4182:	88 23       	and	r24, r24
    4184:	09 f4       	brne	.+2      	; 0x4188 <_Z16initializeServosv+0x10a>
    4186:	02 c1       	rjmp	.+516    	; 0x438c <_Z16initializeServosv+0x30e>
    4188:	65 e4       	ldi	r22, 0x45	; 69
    418a:	7a e0       	ldi	r23, 0x0A	; 10
    418c:	80 91 48 0a 	lds	r24, 0x0A48	; 0x800a48 <ServoA4+0x3>
    4190:	29 df       	rcall	.-430    	; 0x3fe4 <_ZN5Robot14RegisterDeviceEhP9IRegister>
    4192:	c8 2f       	mov	r28, r24
    4194:	88 23       	and	r24, r24
    4196:	09 f4       	brne	.+2      	; 0x419a <_Z16initializeServosv+0x11c>
    4198:	e0 c0       	rjmp	.+448    	; 0x435a <_Z16initializeServosv+0x2dc>
		
		_servo->setPulse(1500);
    419a:	80 91 49 0a 	lds	r24, 0x0A49	; 0x800a49 <ServoA4+0x4>
    419e:	90 91 4a 0a 	lds	r25, 0x0A4A	; 0x800a4a <ServoA4+0x5>
    41a2:	dc 01       	movw	r26, r24
    41a4:	ed 91       	ld	r30, X+
    41a6:	fc 91       	ld	r31, X
    41a8:	01 90       	ld	r0, Z+
    41aa:	f0 81       	ld	r31, Z
    41ac:	e0 2d       	mov	r30, r0
    41ae:	6c ed       	ldi	r22, 0xDC	; 220
    41b0:	75 e0       	ldi	r23, 0x05	; 5
	{
			
	}
	
	bool begin(){
		if(!rov.RegisterDevice(_id, this) || !rov.RegisterDevice(_enId, this)) return false;
    41b2:	19 95       	eicall
    41b4:	6f e3       	ldi	r22, 0x3F	; 63
    41b6:	7a e0       	ldi	r23, 0x0A	; 10
    41b8:	80 91 41 0a 	lds	r24, 0x0A41	; 0x800a41 <ServoA5+0x2>
    41bc:	13 df       	rcall	.-474    	; 0x3fe4 <_ZN5Robot14RegisterDeviceEhP9IRegister>
    41be:	d8 2f       	mov	r29, r24
    41c0:	88 23       	and	r24, r24
    41c2:	09 f4       	brne	.+2      	; 0x41c6 <_Z16initializeServosv+0x148>
    41c4:	e3 c0       	rjmp	.+454    	; 0x438c <_Z16initializeServosv+0x30e>
    41c6:	6f e3       	ldi	r22, 0x3F	; 63
    41c8:	7a e0       	ldi	r23, 0x0A	; 10
    41ca:	80 91 42 0a 	lds	r24, 0x0A42	; 0x800a42 <ServoA5+0x3>
    41ce:	0a df       	rcall	.-492    	; 0x3fe4 <_ZN5Robot14RegisterDeviceEhP9IRegister>
    41d0:	c8 2f       	mov	r28, r24
    41d2:	88 23       	and	r24, r24
    41d4:	09 f4       	brne	.+2      	; 0x41d8 <_Z16initializeServosv+0x15a>
    41d6:	c3 c0       	rjmp	.+390    	; 0x435e <_Z16initializeServosv+0x2e0>
		
		_servo->setPulse(1500);
    41d8:	80 91 43 0a 	lds	r24, 0x0A43	; 0x800a43 <ServoA5+0x4>
    41dc:	90 91 44 0a 	lds	r25, 0x0A44	; 0x800a44 <ServoA5+0x5>
    41e0:	dc 01       	movw	r26, r24
    41e2:	ed 91       	ld	r30, X+
    41e4:	fc 91       	ld	r31, X
    41e6:	01 90       	ld	r0, Z+
    41e8:	f0 81       	ld	r31, Z
    41ea:	e0 2d       	mov	r30, r0
    41ec:	6c ed       	ldi	r22, 0xDC	; 220
    41ee:	75 e0       	ldi	r23, 0x05	; 5
	{
			
	}
	
	bool begin(){
		if(!rov.RegisterDevice(_id, this) || !rov.RegisterDevice(_enId, this)) return false;
    41f0:	19 95       	eicall
    41f2:	69 e3       	ldi	r22, 0x39	; 57
    41f4:	7a e0       	ldi	r23, 0x0A	; 10
    41f6:	80 91 3b 0a 	lds	r24, 0x0A3B	; 0x800a3b <ServoB1+0x2>
    41fa:	f4 de       	rcall	.-536    	; 0x3fe4 <_ZN5Robot14RegisterDeviceEhP9IRegister>
    41fc:	d8 2f       	mov	r29, r24
    41fe:	88 23       	and	r24, r24
    4200:	09 f4       	brne	.+2      	; 0x4204 <_Z16initializeServosv+0x186>
    4202:	c4 c0       	rjmp	.+392    	; 0x438c <_Z16initializeServosv+0x30e>
    4204:	69 e3       	ldi	r22, 0x39	; 57
    4206:	7a e0       	ldi	r23, 0x0A	; 10
    4208:	80 91 3c 0a 	lds	r24, 0x0A3C	; 0x800a3c <ServoB1+0x3>
    420c:	eb de       	rcall	.-554    	; 0x3fe4 <_ZN5Robot14RegisterDeviceEhP9IRegister>
    420e:	18 2f       	mov	r17, r24
    4210:	88 23       	and	r24, r24
    4212:	09 f4       	brne	.+2      	; 0x4216 <_Z16initializeServosv+0x198>
    4214:	a6 c0       	rjmp	.+332    	; 0x4362 <_Z16initializeServosv+0x2e4>
		
		_servo->setPulse(1500);
    4216:	80 91 3d 0a 	lds	r24, 0x0A3D	; 0x800a3d <ServoB1+0x4>
    421a:	90 91 3e 0a 	lds	r25, 0x0A3E	; 0x800a3e <ServoB1+0x5>
    421e:	dc 01       	movw	r26, r24
    4220:	ed 91       	ld	r30, X+
    4222:	fc 91       	ld	r31, X
    4224:	01 90       	ld	r0, Z+
    4226:	f0 81       	ld	r31, Z
    4228:	e0 2d       	mov	r30, r0
    422a:	6c ed       	ldi	r22, 0xDC	; 220
	if(!ServoA3.begin()) return 0x13;
	if(!ServoA4.begin()) return 0x14;
	if(!ServoA5.begin()) return 0x15;
	
	if(!ServoB1.begin()) return 0x21;
	if(!ServoB2.begin()) return 0x22;
    422c:	75 e0       	ldi	r23, 0x05	; 5
    422e:	19 95       	eicall
    4230:	83 e3       	ldi	r24, 0x33	; 51
    4232:	9a e0       	ldi	r25, 0x0A	; 10
    4234:	f5 de       	rcall	.-534    	; 0x4020 <_ZN13ServoActuator5beginEv>
    4236:	c8 2f       	mov	r28, r24
    4238:	88 23       	and	r24, r24
	if(!ServoB3.begin()) return 0x23;
    423a:	09 f4       	brne	.+2      	; 0x423e <_Z16initializeServosv+0x1c0>
    423c:	94 c0       	rjmp	.+296    	; 0x4366 <_Z16initializeServosv+0x2e8>
    423e:	8d e2       	ldi	r24, 0x2D	; 45
    4240:	9a e0       	ldi	r25, 0x0A	; 10
    4242:	ee de       	rcall	.-548    	; 0x4020 <_ZN13ServoActuator5beginEv>
    4244:	d8 2f       	mov	r29, r24
    4246:	88 23       	and	r24, r24
	if(!ServoB4.begin()) return 0x24;
    4248:	09 f4       	brne	.+2      	; 0x424c <_Z16initializeServosv+0x1ce>
    424a:	a0 c0       	rjmp	.+320    	; 0x438c <_Z16initializeServosv+0x30e>
    424c:	87 e2       	ldi	r24, 0x27	; 39
    424e:	9a e0       	ldi	r25, 0x0A	; 10
    4250:	e7 de       	rcall	.-562    	; 0x4020 <_ZN13ServoActuator5beginEv>
    4252:	c8 2f       	mov	r28, r24
    4254:	88 23       	and	r24, r24
	if(!ServoB5.begin()) return 0x25;
    4256:	09 f4       	brne	.+2      	; 0x425a <_Z16initializeServosv+0x1dc>
    4258:	88 c0       	rjmp	.+272    	; 0x436a <_Z16initializeServosv+0x2ec>
    425a:	81 e2       	ldi	r24, 0x21	; 33
    425c:	9a e0       	ldi	r25, 0x0A	; 10
    425e:	e0 de       	rcall	.-576    	; 0x4020 <_ZN13ServoActuator5beginEv>
    4260:	d8 2f       	mov	r29, r24
    4262:	88 23       	and	r24, r24
	if(!ServoB6.begin()) return 0x26;
    4264:	09 f4       	brne	.+2      	; 0x4268 <_Z16initializeServosv+0x1ea>
    4266:	92 c0       	rjmp	.+292    	; 0x438c <_Z16initializeServosv+0x30e>
    4268:	8b e1       	ldi	r24, 0x1B	; 27
    426a:	9a e0       	ldi	r25, 0x0A	; 10
    426c:	d9 de       	rcall	.-590    	; 0x4020 <_ZN13ServoActuator5beginEv>
    426e:	c8 2f       	mov	r28, r24
    4270:	88 23       	and	r24, r24
	
	if(!ServoC1.begin()) return 0x31;
    4272:	09 f4       	brne	.+2      	; 0x4276 <_Z16initializeServosv+0x1f8>
    4274:	7c c0       	rjmp	.+248    	; 0x436e <_Z16initializeServosv+0x2f0>
    4276:	85 e1       	ldi	r24, 0x15	; 21
    4278:	9a e0       	ldi	r25, 0x0A	; 10
    427a:	d2 de       	rcall	.-604    	; 0x4020 <_ZN13ServoActuator5beginEv>
    427c:	d8 2f       	mov	r29, r24
    427e:	88 23       	and	r24, r24
	if(!ServoC2.begin()) return 0x32;
    4280:	09 f4       	brne	.+2      	; 0x4284 <_Z16initializeServosv+0x206>
    4282:	84 c0       	rjmp	.+264    	; 0x438c <_Z16initializeServosv+0x30e>
    4284:	8f e0       	ldi	r24, 0x0F	; 15
    4286:	9a e0       	ldi	r25, 0x0A	; 10
    4288:	cb de       	rcall	.-618    	; 0x4020 <_ZN13ServoActuator5beginEv>
    428a:	c8 2f       	mov	r28, r24
    428c:	88 23       	and	r24, r24
	if(!ServoC3.begin()) return 0x33;
    428e:	09 f4       	brne	.+2      	; 0x4292 <_Z16initializeServosv+0x214>
    4290:	70 c0       	rjmp	.+224    	; 0x4372 <_Z16initializeServosv+0x2f4>
    4292:	89 e0       	ldi	r24, 0x09	; 9
    4294:	9a e0       	ldi	r25, 0x0A	; 10
    4296:	c4 de       	rcall	.-632    	; 0x4020 <_ZN13ServoActuator5beginEv>
    4298:	d8 2f       	mov	r29, r24
    429a:	88 23       	and	r24, r24
	if(!ServoC4.begin()) return 0x34;
    429c:	09 f4       	brne	.+2      	; 0x42a0 <_Z16initializeServosv+0x222>
    429e:	76 c0       	rjmp	.+236    	; 0x438c <_Z16initializeServosv+0x30e>
    42a0:	83 e0       	ldi	r24, 0x03	; 3
    42a2:	9a e0       	ldi	r25, 0x0A	; 10
    42a4:	bd de       	rcall	.-646    	; 0x4020 <_ZN13ServoActuator5beginEv>
    42a6:	c8 2f       	mov	r28, r24
    42a8:	88 23       	and	r24, r24
	if(!ServoC5.begin()) return 0x35;
    42aa:	09 f4       	brne	.+2      	; 0x42ae <_Z16initializeServosv+0x230>
    42ac:	64 c0       	rjmp	.+200    	; 0x4376 <_Z16initializeServosv+0x2f8>
    42ae:	8d ef       	ldi	r24, 0xFD	; 253
    42b0:	99 e0       	ldi	r25, 0x09	; 9
    42b2:	b6 de       	rcall	.-660    	; 0x4020 <_ZN13ServoActuator5beginEv>
    42b4:	d8 2f       	mov	r29, r24
    42b6:	88 23       	and	r24, r24
	if(!ServoC6.begin()) return 0x36;
    42b8:	09 f4       	brne	.+2      	; 0x42bc <_Z16initializeServosv+0x23e>
    42ba:	68 c0       	rjmp	.+208    	; 0x438c <_Z16initializeServosv+0x30e>
    42bc:	87 ef       	ldi	r24, 0xF7	; 247
    42be:	99 e0       	ldi	r25, 0x09	; 9
    42c0:	af de       	rcall	.-674    	; 0x4020 <_ZN13ServoActuator5beginEv>
    42c2:	c8 2f       	mov	r28, r24
    42c4:	88 23       	and	r24, r24
	if(!ServoC7.begin()) return 0x37;
    42c6:	09 f4       	brne	.+2      	; 0x42ca <_Z16initializeServosv+0x24c>
    42c8:	58 c0       	rjmp	.+176    	; 0x437a <_Z16initializeServosv+0x2fc>
    42ca:	81 ef       	ldi	r24, 0xF1	; 241
    42cc:	99 e0       	ldi	r25, 0x09	; 9
    42ce:	a8 de       	rcall	.-688    	; 0x4020 <_ZN13ServoActuator5beginEv>
    42d0:	d8 2f       	mov	r29, r24
    42d2:	88 23       	and	r24, r24
	if(!ServoC8.begin()) return 0x38;
    42d4:	09 f4       	brne	.+2      	; 0x42d8 <_Z16initializeServosv+0x25a>
    42d6:	5a c0       	rjmp	.+180    	; 0x438c <_Z16initializeServosv+0x30e>
    42d8:	8b ee       	ldi	r24, 0xEB	; 235
    42da:	99 e0       	ldi	r25, 0x09	; 9
    42dc:	a1 de       	rcall	.-702    	; 0x4020 <_ZN13ServoActuator5beginEv>
    42de:	c8 2f       	mov	r28, r24
    42e0:	88 23       	and	r24, r24
	
	if(!ServoD1.begin()) return 0x41;
    42e2:	09 f4       	brne	.+2      	; 0x42e6 <_Z16initializeServosv+0x268>
    42e4:	4c c0       	rjmp	.+152    	; 0x437e <_Z16initializeServosv+0x300>
    42e6:	85 ee       	ldi	r24, 0xE5	; 229
    42e8:	99 e0       	ldi	r25, 0x09	; 9
    42ea:	9a de       	rcall	.-716    	; 0x4020 <_ZN13ServoActuator5beginEv>
    42ec:	d8 2f       	mov	r29, r24
    42ee:	88 23       	and	r24, r24
	if(!ServoD2.begin()) return 0x42;
    42f0:	09 f4       	brne	.+2      	; 0x42f4 <_Z16initializeServosv+0x276>
    42f2:	4c c0       	rjmp	.+152    	; 0x438c <_Z16initializeServosv+0x30e>
    42f4:	8f ed       	ldi	r24, 0xDF	; 223
    42f6:	99 e0       	ldi	r25, 0x09	; 9
    42f8:	93 de       	rcall	.-730    	; 0x4020 <_ZN13ServoActuator5beginEv>
    42fa:	c8 2f       	mov	r28, r24
	if(!ServoD3.begin()) return 0x43;
    42fc:	88 23       	and	r24, r24
    42fe:	09 f4       	brne	.+2      	; 0x4302 <_Z16initializeServosv+0x284>
    4300:	40 c0       	rjmp	.+128    	; 0x4382 <_Z16initializeServosv+0x304>
    4302:	89 ed       	ldi	r24, 0xD9	; 217
    4304:	99 e0       	ldi	r25, 0x09	; 9
    4306:	8c de       	rcall	.-744    	; 0x4020 <_ZN13ServoActuator5beginEv>
    4308:	d8 2f       	mov	r29, r24
	if(!ServoD4.begin()) return 0x44;
    430a:	88 23       	and	r24, r24
    430c:	09 f4       	brne	.+2      	; 0x4310 <_Z16initializeServosv+0x292>
    430e:	3e c0       	rjmp	.+124    	; 0x438c <_Z16initializeServosv+0x30e>
    4310:	83 ed       	ldi	r24, 0xD3	; 211
    4312:	99 e0       	ldi	r25, 0x09	; 9
    4314:	85 de       	rcall	.-758    	; 0x4020 <_ZN13ServoActuator5beginEv>
    4316:	c8 2f       	mov	r28, r24
	if(!ServoD5.begin()) return 0x45;
    4318:	88 23       	and	r24, r24
    431a:	a9 f1       	breq	.+106    	; 0x4386 <_Z16initializeServosv+0x308>
    431c:	8d ec       	ldi	r24, 0xCD	; 205
    431e:	99 e0       	ldi	r25, 0x09	; 9
    4320:	7f de       	rcall	.-770    	; 0x4020 <_ZN13ServoActuator5beginEv>
    4322:	d8 2f       	mov	r29, r24
    4324:	88 23       	and	r24, r24
	if(!ServoD6.begin()) return 0x46;
    4326:	91 f1       	breq	.+100    	; 0x438c <_Z16initializeServosv+0x30e>
    4328:	87 ec       	ldi	r24, 0xC7	; 199
    432a:	99 e0       	ldi	r25, 0x09	; 9
    432c:	79 de       	rcall	.-782    	; 0x4020 <_ZN13ServoActuator5beginEv>
    432e:	c8 2f       	mov	r28, r24
    4330:	88 23       	and	r24, r24
    4332:	59 f1       	breq	.+86     	; 0x438a <_Z16initializeServosv+0x30c>
	if(!ServoD7.begin()) return 0x47;
    4334:	81 ec       	ldi	r24, 0xC1	; 193
    4336:	99 e0       	ldi	r25, 0x09	; 9
    4338:	73 de       	rcall	.-794    	; 0x4020 <_ZN13ServoActuator5beginEv>
    433a:	88 23       	and	r24, r24
    433c:	39 f1       	breq	.+78     	; 0x438c <_Z16initializeServosv+0x30e>
    433e:	8b eb       	ldi	r24, 0xBB	; 187
	if(!ServoD8.begin()) return 0x48;
    4340:	99 e0       	ldi	r25, 0x09	; 9
    4342:	6e de       	rcall	.-804    	; 0x4020 <_ZN13ServoActuator5beginEv>
    4344:	c1 e0       	ldi	r28, 0x01	; 1
    4346:	c8 27       	eor	r28, r24
    4348:	21 c0       	rjmp	.+66     	; 0x438c <_Z16initializeServosv+0x30e>
    434a:	c1 e0       	ldi	r28, 0x01	; 1
    434c:	1f c0       	rjmp	.+62     	; 0x438c <_Z16initializeServosv+0x30e>
	Servo1.begin();
	Servo3.begin();
	Servo4.begin();
	Servo5.begin();
	
	if(!PcaServoController.begin()) return 0x10;
    434e:	cd 2f       	mov	r28, r29
    4350:	1d c0       	rjmp	.+58     	; 0x438c <_Z16initializeServosv+0x30e>
	Serial.println("Initialized Twi Servo Controller.");
	
	if(!ServoA1.begin()) return 0x11;
    4352:	cd 2f       	mov	r28, r29
    4354:	1b c0       	rjmp	.+54     	; 0x438c <_Z16initializeServosv+0x30e>
	if(!ServoA2.begin()) return 0x12;
    4356:	cd 2f       	mov	r28, r29
    4358:	19 c0       	rjmp	.+50     	; 0x438c <_Z16initializeServosv+0x30e>
	if(!ServoA3.begin()) return 0x13;
    435a:	cd 2f       	mov	r28, r29
    435c:	17 c0       	rjmp	.+46     	; 0x438c <_Z16initializeServosv+0x30e>
	if(!ServoA4.begin()) return 0x14;
    435e:	cd 2f       	mov	r28, r29
    4360:	15 c0       	rjmp	.+42     	; 0x438c <_Z16initializeServosv+0x30e>
	if(!ServoA5.begin()) return 0x15;
    4362:	cd 2f       	mov	r28, r29
    4364:	13 c0       	rjmp	.+38     	; 0x438c <_Z16initializeServosv+0x30e>
	
	if(!ServoB1.begin()) return 0x21;
    4366:	c1 2f       	mov	r28, r17
    4368:	11 c0       	rjmp	.+34     	; 0x438c <_Z16initializeServosv+0x30e>
	if(!ServoB2.begin()) return 0x22;
    436a:	cd 2f       	mov	r28, r29
    436c:	0f c0       	rjmp	.+30     	; 0x438c <_Z16initializeServosv+0x30e>
	if(!ServoB3.begin()) return 0x23;
	if(!ServoB4.begin()) return 0x24;
    436e:	cd 2f       	mov	r28, r29
    4370:	0d c0       	rjmp	.+26     	; 0x438c <_Z16initializeServosv+0x30e>
	if(!ServoB5.begin()) return 0x25;
	if(!ServoB6.begin()) return 0x26;
    4372:	cd 2f       	mov	r28, r29
    4374:	0b c0       	rjmp	.+22     	; 0x438c <_Z16initializeServosv+0x30e>
	
	if(!ServoC1.begin()) return 0x31;
	if(!ServoC2.begin()) return 0x32;
    4376:	cd 2f       	mov	r28, r29
    4378:	09 c0       	rjmp	.+18     	; 0x438c <_Z16initializeServosv+0x30e>
	if(!ServoC3.begin()) return 0x33;
	if(!ServoC4.begin()) return 0x34;
    437a:	cd 2f       	mov	r28, r29
    437c:	07 c0       	rjmp	.+14     	; 0x438c <_Z16initializeServosv+0x30e>
	if(!ServoC5.begin()) return 0x35;
	if(!ServoC6.begin()) return 0x36;
    437e:	cd 2f       	mov	r28, r29
    4380:	05 c0       	rjmp	.+10     	; 0x438c <_Z16initializeServosv+0x30e>
	if(!ServoC7.begin()) return 0x37;
	if(!ServoC8.begin()) return 0x38;
    4382:	cd 2f       	mov	r28, r29
    4384:	03 c0       	rjmp	.+6      	; 0x438c <_Z16initializeServosv+0x30e>
	
	if(!ServoD1.begin()) return 0x41;
	if(!ServoD2.begin()) return 0x42;
    4386:	cd 2f       	mov	r28, r29
    4388:	01 c0       	rjmp	.+2      	; 0x438c <_Z16initializeServosv+0x30e>
	if(!ServoD3.begin()) return 0x43;
	if(!ServoD4.begin()) return 0x44;
    438a:	cd 2f       	mov	r28, r29
    438c:	8c 2f       	mov	r24, r28
	if(!ServoD5.begin()) return 0x45;
	if(!ServoD6.begin()) return 0x46;
    438e:	df 91       	pop	r29
	if(!ServoD7.begin()) return 0x47;
	if(!ServoD8.begin()) return 0x48;
	
	return 0;
}
    4390:	cf 91       	pop	r28
    4392:	1f 91       	pop	r17
    4394:	08 95       	ret

00004396 <_Z15PrintErrorCodesv>:
    4396:	a0 91 00 02 	lds	r26, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
	Imu.Update(EtherComm::buffer + 1);
	Pressure.Update(EtherComm::buffer + 1);
}

void PrintErrorCodes(){
	EtherComm::buffer[1] = ErrorCodes.errors;
    439a:	b0 91 01 02 	lds	r27, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    439e:	ee e5       	ldi	r30, 0x5E	; 94
    43a0:	f9 e0       	ldi	r31, 0x09	; 9
    43a2:	80 81       	ld	r24, Z
    43a4:	11 96       	adiw	r26, 0x01	; 1
    43a6:	8c 93       	st	X, r24
	EtherComm::buffer[2] = ErrorCodes.id_collision;
    43a8:	a0 91 00 02 	lds	r26, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    43ac:	b0 91 01 02 	lds	r27, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    43b0:	81 81       	ldd	r24, Z+1	; 0x01
    43b2:	12 96       	adiw	r26, 0x02	; 2
    43b4:	8c 93       	st	X, r24
    43b6:	12 97       	sbiw	r26, 0x02	; 2
	EtherComm::buffer[3] = ErrorCodes.init_error;
    43b8:	82 81       	ldd	r24, Z+2	; 0x02
    43ba:	13 96       	adiw	r26, 0x03	; 3
    43bc:	8c 93       	st	X, r24
    43be:	13 97       	sbiw	r26, 0x03	; 3
	EtherComm::buffer[4] = ErrorCodes.reg_not_found;
    43c0:	83 81       	ldd	r24, Z+3	; 0x03
    43c2:	14 96       	adiw	r26, 0x04	; 4
    43c4:	8c 93       	st	X, r24
	EtherComm::SendCommand(0xFF, 4);
    43c6:	64 e0       	ldi	r22, 0x04	; 4
    43c8:	8f ef       	ldi	r24, 0xFF	; 255
    43ca:	0c 94 7b 0b 	jmp	0x16f6	; 0x16f6 <_ZN9EtherComm11SendCommandEhh>
    43ce:	08 95       	ret

000043d0 <_ZN5Robot15CommandReceivedEhPKhh>:
}

void Robot::CommandReceived(const uint8_t id, const uint8_t* data, uint8_t len) {
	if(id == 0xFF){
    43d0:	8f 3f       	cpi	r24, 0xFF	; 255
    43d2:	11 f4       	brne	.+4      	; 0x43d8 <_ZN5Robot15CommandReceivedEhPKhh+0x8>
		PrintErrorCodes();
    43d4:	e0 cf       	rjmp	.-64     	; 0x4396 <_Z15PrintErrorCodesv>
    43d6:	08 95       	ret
	}else if(registers[id] != NULL){
    43d8:	e8 2f       	mov	r30, r24
    43da:	f0 e0       	ldi	r31, 0x00	; 0
    43dc:	ee 0f       	add	r30, r30
    43de:	ff 1f       	adc	r31, r31
    43e0:	e3 5a       	subi	r30, 0xA3	; 163
    43e2:	f5 4f       	sbci	r31, 0xF5	; 245
    43e4:	a0 81       	ld	r26, Z
    43e6:	b1 81       	ldd	r27, Z+1	; 0x01
    43e8:	10 97       	sbiw	r26, 0x00	; 0
    43ea:	61 f0       	breq	.+24     	; 0x4404 <_ZN5Robot15CommandReceivedEhPKhh+0x34>
		registers[id]->CommandReceived(id, data, len);
    43ec:	ed 91       	ld	r30, X+
    43ee:	fc 91       	ld	r31, X
    43f0:	11 97       	sbiw	r26, 0x01	; 1
    43f2:	02 80       	ldd	r0, Z+2	; 0x02
    43f4:	f3 81       	ldd	r31, Z+3	; 0x03
    43f6:	e0 2d       	mov	r30, r0
    43f8:	24 2f       	mov	r18, r20
    43fa:	ab 01       	movw	r20, r22
    43fc:	68 2f       	mov	r22, r24
    43fe:	cd 01       	movw	r24, r26
    4400:	19 95       	eicall
    4402:	08 95       	ret
inline ErrorFlag operator | (ErrorFlag lhs, ErrorFlag rhs) {
	return static_cast<ErrorFlag>(static_cast<int>(lhs) | static_cast<int>(rhs));
}

inline ErrorFlag& operator |= (ErrorFlag& lhs, ErrorFlag rhs) {
	lhs = lhs | rhs;
    4404:	ee e5       	ldi	r30, 0x5E	; 94
    4406:	f9 e0       	ldi	r31, 0x09	; 9
    4408:	90 81       	ld	r25, Z
    440a:	94 60       	ori	r25, 0x04	; 4
    440c:	90 83       	st	Z, r25
		PrintErrorCodes();
	}else if(registers[id] != NULL){
		registers[id]->CommandReceived(id, data, len);
	}else{
		ErrorCodes.errors |= RegisterNotFound;
		ErrorCodes.reg_not_found = id;
    440e:	83 83       	std	Z+3, r24	; 0x03
    4410:	08 95       	ret

00004412 <_GLOBAL__sub_I__ZN5Robot9registersE>:
	}
}
    4412:	8f 92       	push	r8
    4414:	af 92       	push	r10
    4416:	cf 92       	push	r12
    4418:	ef 92       	push	r14
    441a:	0f 93       	push	r16
#include "../Micro/CpuFreq.h"

class ServoActuator : public IWritable{
public:
	ServoActuator(const uint8_t id, const uint8_t enId, PcbServo &servo)
		: _id(id), _enId(enId), _servo(&servo)
    441c:	e7 e5       	ldi	r30, 0x57	; 87
    441e:	fa e0       	ldi	r31, 0x0A	; 10
    4420:	8d ea       	ldi	r24, 0xAD	; 173
    4422:	94 e0       	ldi	r25, 0x04	; 4
    4424:	91 83       	std	Z+1, r25	; 0x01
    4426:	80 83       	st	Z, r24
    4428:	12 82       	std	Z+2, r1	; 0x02
    442a:	21 e0       	ldi	r18, 0x01	; 1
    442c:	23 83       	std	Z+3, r18	; 0x03
    442e:	49 e5       	ldi	r20, 0x59	; 89
    4430:	59 e0       	ldi	r21, 0x09	; 9
    4432:	55 83       	std	Z+5, r21	; 0x05
    4434:	44 83       	std	Z+4, r20	; 0x04
    4436:	e1 e5       	ldi	r30, 0x51	; 81
    4438:	fa e0       	ldi	r31, 0x0A	; 10
    443a:	91 83       	std	Z+1, r25	; 0x01
    443c:	80 83       	st	Z, r24
    443e:	32 e0       	ldi	r19, 0x02	; 2
    4440:	32 83       	std	Z+2, r19	; 0x02
    4442:	43 e0       	ldi	r20, 0x03	; 3
    4444:	43 83       	std	Z+3, r20	; 0x03
    4446:	44 e5       	ldi	r20, 0x54	; 84
    4448:	59 e0       	ldi	r21, 0x09	; 9
    444a:	55 83       	std	Z+5, r21	; 0x05
    444c:	44 83       	std	Z+4, r20	; 0x04
    444e:	eb e4       	ldi	r30, 0x4B	; 75
    4450:	fa e0       	ldi	r31, 0x0A	; 10
    4452:	91 83       	std	Z+1, r25	; 0x01
    4454:	80 83       	st	Z, r24
    4456:	44 e0       	ldi	r20, 0x04	; 4
    4458:	42 83       	std	Z+2, r20	; 0x02
    445a:	45 e0       	ldi	r20, 0x05	; 5
    445c:	43 83       	std	Z+3, r20	; 0x03
    445e:	4f e4       	ldi	r20, 0x4F	; 79
    4460:	59 e0       	ldi	r21, 0x09	; 9
    4462:	55 83       	std	Z+5, r21	; 0x05
    4464:	44 83       	std	Z+4, r20	; 0x04
    4466:	e5 e4       	ldi	r30, 0x45	; 69
    4468:	fa e0       	ldi	r31, 0x0A	; 10
    446a:	91 83       	std	Z+1, r25	; 0x01
    446c:	80 83       	st	Z, r24
    446e:	46 e0       	ldi	r20, 0x06	; 6
    4470:	42 83       	std	Z+2, r20	; 0x02
    4472:	47 e0       	ldi	r20, 0x07	; 7
    4474:	43 83       	std	Z+3, r20	; 0x03
    4476:	4a e4       	ldi	r20, 0x4A	; 74
    4478:	59 e0       	ldi	r21, 0x09	; 9
    447a:	55 83       	std	Z+5, r21	; 0x05
    447c:	44 83       	std	Z+4, r20	; 0x04
    447e:	ef e3       	ldi	r30, 0x3F	; 63
    4480:	fa e0       	ldi	r31, 0x0A	; 10
    4482:	91 83       	std	Z+1, r25	; 0x01
    4484:	80 83       	st	Z, r24
    4486:	48 e0       	ldi	r20, 0x08	; 8
    4488:	42 83       	std	Z+2, r20	; 0x02
    448a:	49 e0       	ldi	r20, 0x09	; 9
    448c:	43 83       	std	Z+3, r20	; 0x03
    448e:	45 e4       	ldi	r20, 0x45	; 69
    4490:	59 e0       	ldi	r21, 0x09	; 9
    4492:	55 83       	std	Z+5, r21	; 0x05
    4494:	44 83       	std	Z+4, r20	; 0x04
    4496:	e9 e3       	ldi	r30, 0x39	; 57
    4498:	fa e0       	ldi	r31, 0x0A	; 10
    449a:	91 83       	std	Z+1, r25	; 0x01
    449c:	80 83       	st	Z, r24
    449e:	4a e0       	ldi	r20, 0x0A	; 10
    44a0:	42 83       	std	Z+2, r20	; 0x02
    44a2:	4b e0       	ldi	r20, 0x0B	; 11
    44a4:	43 83       	std	Z+3, r20	; 0x03
    44a6:	40 e4       	ldi	r20, 0x40	; 64
    44a8:	59 e0       	ldi	r21, 0x09	; 9
    44aa:	55 83       	std	Z+5, r21	; 0x05
    44ac:	44 83       	std	Z+4, r20	; 0x04
    44ae:	e3 e3       	ldi	r30, 0x33	; 51
    44b0:	fa e0       	ldi	r31, 0x0A	; 10
    44b2:	91 83       	std	Z+1, r25	; 0x01
    44b4:	80 83       	st	Z, r24
    44b6:	4c e0       	ldi	r20, 0x0C	; 12
    44b8:	42 83       	std	Z+2, r20	; 0x02
    44ba:	4d e0       	ldi	r20, 0x0D	; 13
    44bc:	43 83       	std	Z+3, r20	; 0x03
    44be:	4b e3       	ldi	r20, 0x3B	; 59
    44c0:	59 e0       	ldi	r21, 0x09	; 9
    44c2:	55 83       	std	Z+5, r21	; 0x05
    44c4:	44 83       	std	Z+4, r20	; 0x04
    44c6:	ed e2       	ldi	r30, 0x2D	; 45
    44c8:	fa e0       	ldi	r31, 0x0A	; 10
    44ca:	91 83       	std	Z+1, r25	; 0x01
    44cc:	80 83       	st	Z, r24
    44ce:	4e e0       	ldi	r20, 0x0E	; 14
    44d0:	42 83       	std	Z+2, r20	; 0x02
    44d2:	4f e0       	ldi	r20, 0x0F	; 15
    44d4:	43 83       	std	Z+3, r20	; 0x03
    44d6:	46 e3       	ldi	r20, 0x36	; 54
    44d8:	59 e0       	ldi	r21, 0x09	; 9
    44da:	55 83       	std	Z+5, r21	; 0x05
    44dc:	44 83       	std	Z+4, r20	; 0x04
    44de:	e7 e2       	ldi	r30, 0x27	; 39
    44e0:	fa e0       	ldi	r31, 0x0A	; 10
    44e2:	91 83       	std	Z+1, r25	; 0x01
    44e4:	80 83       	st	Z, r24
    44e6:	40 e1       	ldi	r20, 0x10	; 16
    44e8:	42 83       	std	Z+2, r20	; 0x02
    44ea:	41 e1       	ldi	r20, 0x11	; 17
    44ec:	43 83       	std	Z+3, r20	; 0x03
    44ee:	41 e3       	ldi	r20, 0x31	; 49
    44f0:	59 e0       	ldi	r21, 0x09	; 9
    44f2:	55 83       	std	Z+5, r21	; 0x05
    44f4:	44 83       	std	Z+4, r20	; 0x04
    44f6:	e1 e2       	ldi	r30, 0x21	; 33
    44f8:	fa e0       	ldi	r31, 0x0A	; 10
    44fa:	91 83       	std	Z+1, r25	; 0x01
    44fc:	80 83       	st	Z, r24
    44fe:	42 e1       	ldi	r20, 0x12	; 18
    4500:	42 83       	std	Z+2, r20	; 0x02
    4502:	43 e1       	ldi	r20, 0x13	; 19
    4504:	43 83       	std	Z+3, r20	; 0x03
    4506:	4c e2       	ldi	r20, 0x2C	; 44
    4508:	59 e0       	ldi	r21, 0x09	; 9
    450a:	55 83       	std	Z+5, r21	; 0x05
    450c:	44 83       	std	Z+4, r20	; 0x04
    450e:	eb e1       	ldi	r30, 0x1B	; 27
    4510:	fa e0       	ldi	r31, 0x0A	; 10
    4512:	91 83       	std	Z+1, r25	; 0x01
    4514:	80 83       	st	Z, r24
    4516:	44 e1       	ldi	r20, 0x14	; 20
    4518:	42 83       	std	Z+2, r20	; 0x02
    451a:	45 e1       	ldi	r20, 0x15	; 21
    451c:	43 83       	std	Z+3, r20	; 0x03
    451e:	47 e2       	ldi	r20, 0x27	; 39
    4520:	59 e0       	ldi	r21, 0x09	; 9
    4522:	55 83       	std	Z+5, r21	; 0x05
    4524:	44 83       	std	Z+4, r20	; 0x04
    4526:	e5 e1       	ldi	r30, 0x15	; 21
    4528:	fa e0       	ldi	r31, 0x0A	; 10
    452a:	91 83       	std	Z+1, r25	; 0x01
    452c:	80 83       	st	Z, r24
    452e:	46 e1       	ldi	r20, 0x16	; 22
    4530:	42 83       	std	Z+2, r20	; 0x02
    4532:	47 e1       	ldi	r20, 0x17	; 23
    4534:	43 83       	std	Z+3, r20	; 0x03
    4536:	49 e1       	ldi	r20, 0x19	; 25
    4538:	59 e0       	ldi	r21, 0x09	; 9
    453a:	55 83       	std	Z+5, r21	; 0x05
    453c:	44 83       	std	Z+4, r20	; 0x04
    453e:	ef e0       	ldi	r30, 0x0F	; 15
    4540:	fa e0       	ldi	r31, 0x0A	; 10
    4542:	91 83       	std	Z+1, r25	; 0x01
    4544:	80 83       	st	Z, r24
    4546:	48 e1       	ldi	r20, 0x18	; 24
    4548:	42 83       	std	Z+2, r20	; 0x02
    454a:	49 e1       	ldi	r20, 0x19	; 25
    454c:	43 83       	std	Z+3, r20	; 0x03
    454e:	41 e1       	ldi	r20, 0x11	; 17
    4550:	59 e0       	ldi	r21, 0x09	; 9
    4552:	55 83       	std	Z+5, r21	; 0x05
    4554:	44 83       	std	Z+4, r20	; 0x04
    4556:	e9 e0       	ldi	r30, 0x09	; 9
    4558:	fa e0       	ldi	r31, 0x0A	; 10
    455a:	91 83       	std	Z+1, r25	; 0x01
    455c:	80 83       	st	Z, r24
    455e:	4a e1       	ldi	r20, 0x1A	; 26
    4560:	42 83       	std	Z+2, r20	; 0x02
    4562:	4b e1       	ldi	r20, 0x1B	; 27
    4564:	43 83       	std	Z+3, r20	; 0x03
    4566:	49 e0       	ldi	r20, 0x09	; 9
    4568:	59 e0       	ldi	r21, 0x09	; 9
    456a:	55 83       	std	Z+5, r21	; 0x05
    456c:	44 83       	std	Z+4, r20	; 0x04
    456e:	e3 e0       	ldi	r30, 0x03	; 3
    4570:	fa e0       	ldi	r31, 0x0A	; 10
    4572:	91 83       	std	Z+1, r25	; 0x01
    4574:	80 83       	st	Z, r24
    4576:	4c e1       	ldi	r20, 0x1C	; 28
    4578:	42 83       	std	Z+2, r20	; 0x02
    457a:	4d e1       	ldi	r20, 0x1D	; 29
    457c:	43 83       	std	Z+3, r20	; 0x03
    457e:	41 e0       	ldi	r20, 0x01	; 1
    4580:	59 e0       	ldi	r21, 0x09	; 9
    4582:	55 83       	std	Z+5, r21	; 0x05
    4584:	44 83       	std	Z+4, r20	; 0x04
    4586:	ed ef       	ldi	r30, 0xFD	; 253
    4588:	f9 e0       	ldi	r31, 0x09	; 9
    458a:	91 83       	std	Z+1, r25	; 0x01
    458c:	80 83       	st	Z, r24
    458e:	4e e1       	ldi	r20, 0x1E	; 30
    4590:	42 83       	std	Z+2, r20	; 0x02
    4592:	4f e1       	ldi	r20, 0x1F	; 31
    4594:	43 83       	std	Z+3, r20	; 0x03
    4596:	49 ef       	ldi	r20, 0xF9	; 249
    4598:	58 e0       	ldi	r21, 0x08	; 8
    459a:	55 83       	std	Z+5, r21	; 0x05
    459c:	44 83       	std	Z+4, r20	; 0x04
    459e:	e7 ef       	ldi	r30, 0xF7	; 247
    45a0:	f9 e0       	ldi	r31, 0x09	; 9
    45a2:	91 83       	std	Z+1, r25	; 0x01
    45a4:	80 83       	st	Z, r24
    45a6:	40 e2       	ldi	r20, 0x20	; 32
    45a8:	42 83       	std	Z+2, r20	; 0x02
    45aa:	41 e2       	ldi	r20, 0x21	; 33
    45ac:	43 83       	std	Z+3, r20	; 0x03
    45ae:	41 ef       	ldi	r20, 0xF1	; 241
    45b0:	58 e0       	ldi	r21, 0x08	; 8
    45b2:	55 83       	std	Z+5, r21	; 0x05
    45b4:	44 83       	std	Z+4, r20	; 0x04
    45b6:	e1 ef       	ldi	r30, 0xF1	; 241
    45b8:	f9 e0       	ldi	r31, 0x09	; 9
    45ba:	91 83       	std	Z+1, r25	; 0x01
    45bc:	80 83       	st	Z, r24
    45be:	42 e2       	ldi	r20, 0x22	; 34
    45c0:	42 83       	std	Z+2, r20	; 0x02
    45c2:	43 e2       	ldi	r20, 0x23	; 35
    45c4:	43 83       	std	Z+3, r20	; 0x03
    45c6:	49 ee       	ldi	r20, 0xE9	; 233
    45c8:	58 e0       	ldi	r21, 0x08	; 8
    45ca:	55 83       	std	Z+5, r21	; 0x05
    45cc:	44 83       	std	Z+4, r20	; 0x04
    45ce:	eb ee       	ldi	r30, 0xEB	; 235
    45d0:	f9 e0       	ldi	r31, 0x09	; 9
    45d2:	91 83       	std	Z+1, r25	; 0x01
    45d4:	80 83       	st	Z, r24
    45d6:	44 e2       	ldi	r20, 0x24	; 36
    45d8:	42 83       	std	Z+2, r20	; 0x02
    45da:	45 e2       	ldi	r20, 0x25	; 37
    45dc:	43 83       	std	Z+3, r20	; 0x03
    45de:	41 ee       	ldi	r20, 0xE1	; 225
    45e0:	58 e0       	ldi	r21, 0x08	; 8
    45e2:	55 83       	std	Z+5, r21	; 0x05
    45e4:	44 83       	std	Z+4, r20	; 0x04
    45e6:	e5 ee       	ldi	r30, 0xE5	; 229
    45e8:	f9 e0       	ldi	r31, 0x09	; 9
    45ea:	91 83       	std	Z+1, r25	; 0x01
    45ec:	80 83       	st	Z, r24
    45ee:	46 e2       	ldi	r20, 0x26	; 38
    45f0:	42 83       	std	Z+2, r20	; 0x02
    45f2:	47 e2       	ldi	r20, 0x27	; 39
    45f4:	43 83       	std	Z+3, r20	; 0x03
    45f6:	49 ed       	ldi	r20, 0xD9	; 217
    45f8:	58 e0       	ldi	r21, 0x08	; 8
    45fa:	55 83       	std	Z+5, r21	; 0x05
    45fc:	44 83       	std	Z+4, r20	; 0x04
    45fe:	ef ed       	ldi	r30, 0xDF	; 223
    4600:	f9 e0       	ldi	r31, 0x09	; 9
    4602:	91 83       	std	Z+1, r25	; 0x01
    4604:	80 83       	st	Z, r24
    4606:	48 e2       	ldi	r20, 0x28	; 40
    4608:	42 83       	std	Z+2, r20	; 0x02
    460a:	49 e2       	ldi	r20, 0x29	; 41
    460c:	43 83       	std	Z+3, r20	; 0x03
    460e:	41 ed       	ldi	r20, 0xD1	; 209
    4610:	58 e0       	ldi	r21, 0x08	; 8
    4612:	55 83       	std	Z+5, r21	; 0x05
    4614:	44 83       	std	Z+4, r20	; 0x04
    4616:	e9 ed       	ldi	r30, 0xD9	; 217
    4618:	f9 e0       	ldi	r31, 0x09	; 9
    461a:	91 83       	std	Z+1, r25	; 0x01
    461c:	80 83       	st	Z, r24
    461e:	4a e2       	ldi	r20, 0x2A	; 42
    4620:	42 83       	std	Z+2, r20	; 0x02
    4622:	4b e2       	ldi	r20, 0x2B	; 43
    4624:	43 83       	std	Z+3, r20	; 0x03
    4626:	49 ec       	ldi	r20, 0xC9	; 201
    4628:	58 e0       	ldi	r21, 0x08	; 8
    462a:	55 83       	std	Z+5, r21	; 0x05
    462c:	44 83       	std	Z+4, r20	; 0x04
    462e:	e3 ed       	ldi	r30, 0xD3	; 211
    4630:	f9 e0       	ldi	r31, 0x09	; 9
    4632:	91 83       	std	Z+1, r25	; 0x01
    4634:	80 83       	st	Z, r24
    4636:	4c e2       	ldi	r20, 0x2C	; 44
    4638:	42 83       	std	Z+2, r20	; 0x02
    463a:	4d e2       	ldi	r20, 0x2D	; 45
    463c:	43 83       	std	Z+3, r20	; 0x03
    463e:	41 ec       	ldi	r20, 0xC1	; 193
    4640:	58 e0       	ldi	r21, 0x08	; 8
    4642:	55 83       	std	Z+5, r21	; 0x05
    4644:	44 83       	std	Z+4, r20	; 0x04
    4646:	ed ec       	ldi	r30, 0xCD	; 205
    4648:	f9 e0       	ldi	r31, 0x09	; 9
    464a:	91 83       	std	Z+1, r25	; 0x01
    464c:	80 83       	st	Z, r24
    464e:	4e e2       	ldi	r20, 0x2E	; 46
    4650:	42 83       	std	Z+2, r20	; 0x02
    4652:	4f e2       	ldi	r20, 0x2F	; 47
    4654:	43 83       	std	Z+3, r20	; 0x03
    4656:	49 eb       	ldi	r20, 0xB9	; 185
    4658:	58 e0       	ldi	r21, 0x08	; 8
    465a:	55 83       	std	Z+5, r21	; 0x05
    465c:	44 83       	std	Z+4, r20	; 0x04
    465e:	e7 ec       	ldi	r30, 0xC7	; 199
    4660:	f9 e0       	ldi	r31, 0x09	; 9
    4662:	91 83       	std	Z+1, r25	; 0x01
    4664:	80 83       	st	Z, r24
    4666:	40 e3       	ldi	r20, 0x30	; 48
    4668:	42 83       	std	Z+2, r20	; 0x02
    466a:	41 e3       	ldi	r20, 0x31	; 49
    466c:	43 83       	std	Z+3, r20	; 0x03
    466e:	41 eb       	ldi	r20, 0xB1	; 177
    4670:	58 e0       	ldi	r21, 0x08	; 8
    4672:	55 83       	std	Z+5, r21	; 0x05
    4674:	44 83       	std	Z+4, r20	; 0x04
    4676:	e1 ec       	ldi	r30, 0xC1	; 193
    4678:	f9 e0       	ldi	r31, 0x09	; 9
    467a:	91 83       	std	Z+1, r25	; 0x01
    467c:	80 83       	st	Z, r24
    467e:	42 e3       	ldi	r20, 0x32	; 50
    4680:	42 83       	std	Z+2, r20	; 0x02
    4682:	43 e3       	ldi	r20, 0x33	; 51
    4684:	43 83       	std	Z+3, r20	; 0x03
    4686:	49 ea       	ldi	r20, 0xA9	; 169
    4688:	58 e0       	ldi	r21, 0x08	; 8
    468a:	55 83       	std	Z+5, r21	; 0x05
    468c:	44 83       	std	Z+4, r20	; 0x04
    468e:	eb eb       	ldi	r30, 0xBB	; 187
    4690:	f9 e0       	ldi	r31, 0x09	; 9
    4692:	91 83       	std	Z+1, r25	; 0x01
    4694:	80 83       	st	Z, r24
    4696:	84 e3       	ldi	r24, 0x34	; 52
    4698:	82 83       	std	Z+2, r24	; 0x02
    469a:	85 e3       	ldi	r24, 0x35	; 53
    469c:	83 83       	std	Z+3, r24	; 0x03
    469e:	81 ea       	ldi	r24, 0xA1	; 161
    46a0:	98 e0       	ldi	r25, 0x08	; 8
    46a2:	95 83       	std	Z+5, r25	; 0x05
    46a4:	84 83       	std	Z+4, r24	; 0x04
#include "../IReadable.h"

class DigitalSensor : public IReadable {
public:
	DigitalSensor(const uint8_t ID, Register& DDRPort, Register& PortPort, Register& PinPort, uint8_t Pin, bool Inversed = true) 
		: _id(ID), _pin(Pin), _pinPort(&PinPort), _inversed(Inversed)
    46a6:	e4 eb       	ldi	r30, 0xB4	; 180
    46a8:	f9 e0       	ldi	r31, 0x09	; 9
    46aa:	45 e9       	ldi	r20, 0x95	; 149
    46ac:	54 e0       	ldi	r21, 0x04	; 4
    46ae:	51 83       	std	Z+1, r21	; 0x01
    46b0:	40 83       	st	Z, r20
    46b2:	86 e3       	ldi	r24, 0x36	; 54
    46b4:	82 83       	std	Z+2, r24	; 0x02
    46b6:	23 83       	std	Z+3, r18	; 0x03
    46b8:	8f e2       	ldi	r24, 0x2F	; 47
    46ba:	90 e0       	ldi	r25, 0x00	; 0
    46bc:	95 83       	std	Z+5, r25	; 0x05
    46be:	84 83       	std	Z+4, r24	; 0x04
    46c0:	26 83       	std	Z+6, r18	; 0x06
	{
		DDRPort &= ~Pin; //Enable input
    46c2:	80 98       	cbi	0x10, 0	; 16
		PortPort |= Pin; //Enable pullup
    46c4:	88 9a       	sbi	0x11, 0	; 17
#include "../IReadable.h"

class DigitalSensor : public IReadable {
public:
	DigitalSensor(const uint8_t ID, Register& DDRPort, Register& PortPort, Register& PinPort, uint8_t Pin, bool Inversed = true) 
		: _id(ID), _pin(Pin), _pinPort(&PinPort), _inversed(Inversed)
    46c6:	ed ea       	ldi	r30, 0xAD	; 173
    46c8:	f9 e0       	ldi	r31, 0x09	; 9
    46ca:	51 83       	std	Z+1, r21	; 0x01
    46cc:	40 83       	st	Z, r20
    46ce:	47 e3       	ldi	r20, 0x37	; 55
    46d0:	42 83       	std	Z+2, r20	; 0x02
    46d2:	33 83       	std	Z+3, r19	; 0x03
    46d4:	95 83       	std	Z+5, r25	; 0x05
    46d6:	84 83       	std	Z+4, r24	; 0x04
    46d8:	26 83       	std	Z+6, r18	; 0x06
	{
		DDRPort &= ~Pin; //Enable input
    46da:	81 98       	cbi	0x10, 1	; 16
		PortPort |= Pin; //Enable pullup
    46dc:	89 9a       	sbi	0x11, 1	; 17

#include "../IWritable.h"
class DigitalActuator : public IWritable{
public:
	DigitalActuator(const uint8_t ID, Register& DDRPort, Register& PortPort, uint8_t Pin, bool Inversed = false)
		: _id(ID), _pin(Pin), _portPort(&PortPort), _inversed(Inversed)
    46de:	e6 ea       	ldi	r30, 0xA6	; 166
    46e0:	f9 e0       	ldi	r31, 0x09	; 9
    46e2:	81 ea       	ldi	r24, 0xA1	; 161
    46e4:	94 e0       	ldi	r25, 0x04	; 4
    46e6:	91 83       	std	Z+1, r25	; 0x01
    46e8:	80 83       	st	Z, r24
    46ea:	88 e3       	ldi	r24, 0x38	; 56
    46ec:	82 83       	std	Z+2, r24	; 0x02
    46ee:	80 e8       	ldi	r24, 0x80	; 128
    46f0:	83 83       	std	Z+3, r24	; 0x03
    46f2:	85 e2       	ldi	r24, 0x25	; 37
    46f4:	90 e0       	ldi	r25, 0x00	; 0
    46f6:	95 83       	std	Z+5, r25	; 0x05
    46f8:	84 83       	std	Z+4, r24	; 0x04
    46fa:	16 82       	std	Z+6, r1	; 0x06
	{
		DDRPort |= Pin;
    46fc:	27 9a       	sbi	0x04, 7	; 4

DigitalSensor Button0(54, DDR_BTN0, PORT_BTN0, PIN_BTN0, MASK_BTN0);
DigitalSensor Button1(55, DDR_BTN1, PORT_BTN1, PIN_BTN1, MASK_BTN1);
DigitalActuator LED(56, DDR_LED, PORT_LED, MASK_LED);

PressureSensor Pressure(57, Timer0);
    46fe:	4b ed       	ldi	r20, 0xDB	; 219
    4700:	57 e0       	ldi	r21, 0x07	; 7
    4702:	69 e3       	ldi	r22, 0x39	; 57
    4704:	8a e7       	ldi	r24, 0x7A	; 122
    4706:	99 e0       	ldi	r25, 0x09	; 9
    4708:	4e d2       	rcall	.+1180   	; 0x4ba6 <_ZN14PressureSensorC1EhR13HardwareTimer>
ImuSensor Imu(
    470a:	0f 2e       	mov	r0, r31
    470c:	f1 e4       	ldi	r31, 0x41	; 65
    470e:	8f 2e       	mov	r8, r31
    4710:	f0 2d       	mov	r31, r0
    4712:	68 94       	set
    4714:	aa 24       	eor	r10, r10
    4716:	a6 f8       	bld	r10, 6
    4718:	0f 2e       	mov	r0, r31
    471a:	ff e3       	ldi	r31, 0x3F	; 63
    471c:	cf 2e       	mov	r12, r31
    471e:	f0 2d       	mov	r31, r0
    4720:	0f 2e       	mov	r0, r31
    4722:	fe e3       	ldi	r31, 0x3E	; 62
    4724:	ef 2e       	mov	r14, r31
    4726:	f0 2d       	mov	r31, r0
    4728:	0d e3       	ldi	r16, 0x3D	; 61
    472a:	2c e3       	ldi	r18, 0x3C	; 60
    472c:	4b e3       	ldi	r20, 0x3B	; 59
    472e:	6a e3       	ldi	r22, 0x3A	; 58
    4730:	85 e6       	ldi	r24, 0x65	; 101
    4732:	99 e0       	ldi	r25, 0x09	; 9
    4734:	9c d1       	rcall	.+824    	; 0x4a6e <_ZN9ImuSensorC1Ehhhhhhhh>

#include "../Micro/Peripherals/Wire.h"

class TwiRegister : public IWritable {
public:
	TwiRegister(const uint8_t id) : _id(id) {
    4736:	e2 e6       	ldi	r30, 0x62	; 98
    4738:	f9 e0       	ldi	r31, 0x09	; 9
    473a:	89 eb       	ldi	r24, 0xB9	; 185
    473c:	94 e0       	ldi	r25, 0x04	; 4
    473e:	91 83       	std	Z+1, r25	; 0x01
    4740:	80 83       	st	Z, r24
    4742:	82 e4       	ldi	r24, 0x42	; 66
    4744:	82 83       	std	Z+2, r24	; 0x02
		registers[id]->CommandReceived(id, data, len);
	}else{
		ErrorCodes.errors |= RegisterNotFound;
		ErrorCodes.reg_not_found = id;
	}
}
    4746:	0f 91       	pop	r16
    4748:	ef 90       	pop	r14
    474a:	cf 90       	pop	r12
    474c:	af 90       	pop	r10
    474e:	8f 90       	pop	r8
    4750:	08 95       	ret

00004752 <_ZN5Robot5beginEv>:
	if(!ServoD8.begin()) return 0x48;
	
	return 0;
}

bool Robot::begin(){
    4752:	0f 93       	push	r16
    4754:	cf 93       	push	r28
    4756:	ed e5       	ldi	r30, 0x5D	; 93
    4758:	fa e0       	ldi	r31, 0x0A	; 10
    475a:	8d e5       	ldi	r24, 0x5D	; 93
    475c:	9c e0       	ldi	r25, 0x0C	; 12
	for(uint16_t i = 0; i < NUM_DEVICES; i++){
		registers[i] = NULL;
    475e:	11 92       	st	Z+, r1
    4760:	11 92       	st	Z+, r1
	
	return 0;
}

bool Robot::begin(){
	for(uint16_t i = 0; i < NUM_DEVICES; i++){
    4762:	e8 17       	cp	r30, r24
    4764:	f9 07       	cpc	r31, r25
    4766:	d9 f7       	brne	.-10     	; 0x475e <_ZN5Robot5beginEv+0xc>
		registers[i] = NULL;
	}
	
	if(!EtherComm::begin(6001, 6002, DDR_ENC, PORT_ENC, MASK_ENC_CS)){
    4768:	01 e0       	ldi	r16, 0x01	; 1
    476a:	28 e0       	ldi	r18, 0x08	; 8
    476c:	31 e0       	ldi	r19, 0x01	; 1
    476e:	47 e0       	ldi	r20, 0x07	; 7
    4770:	51 e0       	ldi	r21, 0x01	; 1
    4772:	62 e7       	ldi	r22, 0x72	; 114
    4774:	77 e1       	ldi	r23, 0x17	; 23
    4776:	81 e7       	ldi	r24, 0x71	; 113
    4778:	97 e1       	ldi	r25, 0x17	; 23
    477a:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <_ZN9EtherComm5beginEjjRVhS1_h>
    477e:	c8 2f       	mov	r28, r24
    4780:	81 11       	cpse	r24, r1
    4782:	06 c0       	rjmp	.+12     	; 0x4790 <_ZN5Robot5beginEv+0x3e>
		Serial.println("Failed to access Ethernet controller.");
    4784:	67 e0       	ldi	r22, 0x07	; 7
    4786:	73 e0       	ldi	r23, 0x03	; 3
    4788:	87 e7       	ldi	r24, 0x77	; 119
    478a:	97 e0       	ldi	r25, 0x07	; 7
    478c:	78 d2       	rcall	.+1264   	; 0x4c7e <_ZN5Print7printlnEPKc>
		return false;
    478e:	ad c0       	rjmp	.+346    	; 0x48ea <_ZN5Robot5beginEv+0x198>
	}
	Serial.println("Connected to controller.");
    4790:	6d e2       	ldi	r22, 0x2D	; 45
    4792:	73 e0       	ldi	r23, 0x03	; 3
    4794:	87 e7       	ldi	r24, 0x77	; 119
    4796:	97 e0       	ldi	r25, 0x07	; 7
	
	uint8_t code = initializeServos();
    4798:	72 d2       	rcall	.+1252   	; 0x4c7e <_ZN5Print7printlnEPKc>
    479a:	71 dc       	rcall	.-1822   	; 0x407e <_Z16initializeServosv>
	if(code != 0){
    479c:	88 23       	and	r24, r24
    479e:	51 f0       	breq	.+20     	; 0x47b4 <_ZN5Robot5beginEv+0x62>
inline ErrorFlag operator | (ErrorFlag lhs, ErrorFlag rhs) {
	return static_cast<ErrorFlag>(static_cast<int>(lhs) | static_cast<int>(rhs));
}

inline ErrorFlag& operator |= (ErrorFlag& lhs, ErrorFlag rhs) {
	lhs = lhs | rhs;
    47a0:	ee e5       	ldi	r30, 0x5E	; 94
    47a2:	f9 e0       	ldi	r31, 0x09	; 9
    47a4:	80 81       	ld	r24, Z
    47a6:	82 60       	ori	r24, 0x02	; 2
	Serial.println("Connected to controller.");
	
	uint8_t code = initializeServos();
	if(code != 0){
		ErrorCodes.errors |= InitializationError;
		ErrorCodes.init_error = code;
    47a8:	80 83       	st	Z, r24
    47aa:	81 e0       	ldi	r24, 0x01	; 1
		printServoErrorCode(code);
    47ac:	82 83       	std	Z+2, r24	; 0x02
    47ae:	d8 db       	rcall	.-2128   	; 0x3f60 <_Z19printServoErrorCodeh>
		return false;
    47b0:	c0 e0       	ldi	r28, 0x00	; 0
    47b2:	9b c0       	rjmp	.+310    	; 0x48ea <_ZN5Robot5beginEv+0x198>
	}
	Serial.println("Servos initialized.");
    47b4:	66 e4       	ldi	r22, 0x46	; 70
    47b6:	73 e0       	ldi	r23, 0x03	; 3
    47b8:	87 e7       	ldi	r24, 0x77	; 119
    47ba:	97 e0       	ldi	r25, 0x07	; 7
    47bc:	60 d2       	rcall	.+1216   	; 0x4c7e <_ZN5Print7printlnEPKc>
	}
	
	bool begin(){ //override
		return rov.RegisterDevice(_id, this);
    47be:	64 eb       	ldi	r22, 0xB4	; 180
    47c0:	79 e0       	ldi	r23, 0x09	; 9
    47c2:	80 91 b6 09 	lds	r24, 0x09B6	; 0x8009b6 <Button0+0x2>
    47c6:	0e dc       	rcall	.-2020   	; 0x3fe4 <_ZN5Robot14RegisterDeviceEhP9IRegister>
    47c8:	c8 2f       	mov	r28, r24
    47ca:	81 11       	cpse	r24, r1
	
	if(!Button0.begin()){
    47cc:	0d c0       	rjmp	.+26     	; 0x47e8 <_ZN5Robot5beginEv+0x96>
    47ce:	ee e5       	ldi	r30, 0x5E	; 94
inline ErrorFlag operator | (ErrorFlag lhs, ErrorFlag rhs) {
	return static_cast<ErrorFlag>(static_cast<int>(lhs) | static_cast<int>(rhs));
}

inline ErrorFlag& operator |= (ErrorFlag& lhs, ErrorFlag rhs) {
	lhs = lhs | rhs;
    47d0:	f9 e0       	ldi	r31, 0x09	; 9
    47d2:	80 81       	ld	r24, Z
    47d4:	82 60       	ori	r24, 0x02	; 2
    47d6:	80 83       	st	Z, r24
    47d8:	81 e0       	ldi	r24, 0x01	; 1
	}
	Serial.println("Servos initialized.");
	
	if(!Button0.begin()){
		ErrorCodes.errors |= InitializationError;
		ErrorCodes.init_error = ERROR_INIT_BTN0;
    47da:	82 83       	std	Z+2, r24	; 0x02
		Serial.println("Unable to initialize Button0.");
    47dc:	6a e5       	ldi	r22, 0x5A	; 90
    47de:	73 e0       	ldi	r23, 0x03	; 3
    47e0:	87 e7       	ldi	r24, 0x77	; 119
    47e2:	97 e0       	ldi	r25, 0x07	; 7
    47e4:	4c d2       	rcall	.+1176   	; 0x4c7e <_ZN5Print7printlnEPKc>
		return false;
    47e6:	81 c0       	rjmp	.+258    	; 0x48ea <_ZN5Robot5beginEv+0x198>
	}
	Serial.println("Initialized Button0.");
    47e8:	68 e7       	ldi	r22, 0x78	; 120
    47ea:	73 e0       	ldi	r23, 0x03	; 3
    47ec:	87 e7       	ldi	r24, 0x77	; 119
    47ee:	97 e0       	ldi	r25, 0x07	; 7
    47f0:	46 d2       	rcall	.+1164   	; 0x4c7e <_ZN5Print7printlnEPKc>
    47f2:	6d ea       	ldi	r22, 0xAD	; 173
    47f4:	79 e0       	ldi	r23, 0x09	; 9
    47f6:	80 91 af 09 	lds	r24, 0x09AF	; 0x8009af <Button1+0x2>
    47fa:	f4 db       	rcall	.-2072   	; 0x3fe4 <_ZN5Robot14RegisterDeviceEhP9IRegister>
    47fc:	c8 2f       	mov	r28, r24
    47fe:	81 11       	cpse	r24, r1
	
	if(!Button1.begin()){
    4800:	0d c0       	rjmp	.+26     	; 0x481c <_ZN5Robot5beginEv+0xca>
    4802:	ee e5       	ldi	r30, 0x5E	; 94
inline ErrorFlag operator | (ErrorFlag lhs, ErrorFlag rhs) {
	return static_cast<ErrorFlag>(static_cast<int>(lhs) | static_cast<int>(rhs));
}

inline ErrorFlag& operator |= (ErrorFlag& lhs, ErrorFlag rhs) {
	lhs = lhs | rhs;
    4804:	f9 e0       	ldi	r31, 0x09	; 9
    4806:	80 81       	ld	r24, Z
    4808:	82 60       	ori	r24, 0x02	; 2
    480a:	80 83       	st	Z, r24
	}
	Serial.println("Initialized Button0.");
	
	if(!Button1.begin()){
		ErrorCodes.errors |= InitializationError;
		ErrorCodes.init_error = ERROR_INIT_BTN1;
    480c:	82 e0       	ldi	r24, 0x02	; 2
    480e:	82 83       	std	Z+2, r24	; 0x02
		Serial.println("Unable to initialize Button1.");
    4810:	6d e8       	ldi	r22, 0x8D	; 141
    4812:	73 e0       	ldi	r23, 0x03	; 3
    4814:	87 e7       	ldi	r24, 0x77	; 119
    4816:	97 e0       	ldi	r25, 0x07	; 7
    4818:	32 d2       	rcall	.+1124   	; 0x4c7e <_ZN5Print7printlnEPKc>
		return false;
	}
	Serial.println("Initialized Button1.");
    481a:	67 c0       	rjmp	.+206    	; 0x48ea <_ZN5Robot5beginEv+0x198>
    481c:	6b ea       	ldi	r22, 0xAB	; 171
    481e:	73 e0       	ldi	r23, 0x03	; 3
    4820:	87 e7       	ldi	r24, 0x77	; 119
    4822:	97 e0       	ldi	r25, 0x07	; 7
    4824:	2c d2       	rcall	.+1112   	; 0x4c7e <_ZN5Print7printlnEPKc>
	}
	
	bool begin(){ //override
		return rov.RegisterDevice(_id, this);
    4826:	66 ea       	ldi	r22, 0xA6	; 166
    4828:	79 e0       	ldi	r23, 0x09	; 9
    482a:	80 91 a8 09 	lds	r24, 0x09A8	; 0x8009a8 <LED+0x2>
    482e:	da db       	rcall	.-2124   	; 0x3fe4 <_ZN5Robot14RegisterDeviceEhP9IRegister>
    4830:	c8 2f       	mov	r28, r24
    4832:	81 11       	cpse	r24, r1
	
	if(!LED.begin()){
    4834:	0d c0       	rjmp	.+26     	; 0x4850 <_ZN5Robot5beginEv+0xfe>
inline ErrorFlag operator | (ErrorFlag lhs, ErrorFlag rhs) {
	return static_cast<ErrorFlag>(static_cast<int>(lhs) | static_cast<int>(rhs));
}

inline ErrorFlag& operator |= (ErrorFlag& lhs, ErrorFlag rhs) {
	lhs = lhs | rhs;
    4836:	ee e5       	ldi	r30, 0x5E	; 94
    4838:	f9 e0       	ldi	r31, 0x09	; 9
    483a:	80 81       	ld	r24, Z
    483c:	82 60       	ori	r24, 0x02	; 2
    483e:	80 83       	st	Z, r24
	}
	Serial.println("Initialized Button1.");
	
	if(!LED.begin()){
		ErrorCodes.errors |= InitializationError;
		ErrorCodes.init_error = ERROR_INIT_LED;
    4840:	83 e0       	ldi	r24, 0x03	; 3
		Serial.println("Unable to initialize LED.");
    4842:	82 83       	std	Z+2, r24	; 0x02
    4844:	60 ec       	ldi	r22, 0xC0	; 192
    4846:	73 e0       	ldi	r23, 0x03	; 3
    4848:	87 e7       	ldi	r24, 0x77	; 119
    484a:	97 e0       	ldi	r25, 0x07	; 7
		return false;
    484c:	18 d2       	rcall	.+1072   	; 0x4c7e <_ZN5Print7printlnEPKc>
	}
	Serial.println("Initialized LED.");
    484e:	4d c0       	rjmp	.+154    	; 0x48ea <_ZN5Robot5beginEv+0x198>
    4850:	6a ed       	ldi	r22, 0xDA	; 218
    4852:	73 e0       	ldi	r23, 0x03	; 3
    4854:	87 e7       	ldi	r24, 0x77	; 119
    4856:	97 e0       	ldi	r25, 0x07	; 7
    4858:	12 d2       	rcall	.+1060   	; 0x4c7e <_ZN5Print7printlnEPKc>
	
	if(!Imu.begin()){
    485a:	85 e6       	ldi	r24, 0x65	; 101
    485c:	99 e0       	ldi	r25, 0x09	; 9
    485e:	61 d0       	rcall	.+194    	; 0x4922 <_ZN9ImuSensor5beginEv>
    4860:	c8 2f       	mov	r28, r24
    4862:	81 11       	cpse	r24, r1
    4864:	0d c0       	rjmp	.+26     	; 0x4880 <_ZN5Robot5beginEv+0x12e>
inline ErrorFlag operator | (ErrorFlag lhs, ErrorFlag rhs) {
	return static_cast<ErrorFlag>(static_cast<int>(lhs) | static_cast<int>(rhs));
}

inline ErrorFlag& operator |= (ErrorFlag& lhs, ErrorFlag rhs) {
	lhs = lhs | rhs;
    4866:	ee e5       	ldi	r30, 0x5E	; 94
    4868:	f9 e0       	ldi	r31, 0x09	; 9
    486a:	80 81       	ld	r24, Z
    486c:	82 60       	ori	r24, 0x02	; 2
	}
	Serial.println("Initialized LED.");
	
	if(!Imu.begin()){
		ErrorCodes.errors |= InitializationError;
		ErrorCodes.init_error = ERROR_INIT_IMU;
    486e:	80 83       	st	Z, r24
		Serial.println("Unable to initialize IMU.");
    4870:	84 e0       	ldi	r24, 0x04	; 4
    4872:	82 83       	std	Z+2, r24	; 0x02
    4874:	6b ee       	ldi	r22, 0xEB	; 235
    4876:	73 e0       	ldi	r23, 0x03	; 3
    4878:	87 e7       	ldi	r24, 0x77	; 119
    487a:	97 e0       	ldi	r25, 0x07	; 7
		return false;
    487c:	00 d2       	rcall	.+1024   	; 0x4c7e <_ZN5Print7printlnEPKc>
	}
	Serial.println("Initialized IMU");
    487e:	35 c0       	rjmp	.+106    	; 0x48ea <_ZN5Robot5beginEv+0x198>
    4880:	65 e0       	ldi	r22, 0x05	; 5
    4882:	74 e0       	ldi	r23, 0x04	; 4
    4884:	87 e7       	ldi	r24, 0x77	; 119
    4886:	97 e0       	ldi	r25, 0x07	; 7
    4888:	fa d1       	rcall	.+1012   	; 0x4c7e <_ZN5Print7printlnEPKc>
	
	if(!Pressure.begin()){ 
    488a:	8a e7       	ldi	r24, 0x7A	; 122
    488c:	99 e0       	ldi	r25, 0x09	; 9
    488e:	2b d1       	rcall	.+598    	; 0x4ae6 <_ZN14PressureSensor5beginEv>
    4890:	c8 2f       	mov	r28, r24
    4892:	81 11       	cpse	r24, r1
    4894:	0d c0       	rjmp	.+26     	; 0x48b0 <_ZN5Robot5beginEv+0x15e>
inline ErrorFlag operator | (ErrorFlag lhs, ErrorFlag rhs) {
	return static_cast<ErrorFlag>(static_cast<int>(lhs) | static_cast<int>(rhs));
}

inline ErrorFlag& operator |= (ErrorFlag& lhs, ErrorFlag rhs) {
	lhs = lhs | rhs;
    4896:	ee e5       	ldi	r30, 0x5E	; 94
    4898:	f9 e0       	ldi	r31, 0x09	; 9
    489a:	80 81       	ld	r24, Z
    489c:	82 60       	ori	r24, 0x02	; 2
	}
	Serial.println("Initialized IMU");
	
	if(!Pressure.begin()){ 
		ErrorCodes.errors |= InitializationError;
		ErrorCodes.init_error = ERROR_INIT_PRESSURE;
    489e:	80 83       	st	Z, r24
    48a0:	85 e0       	ldi	r24, 0x05	; 5
		Serial.println("Unable to initialize Pressure Sensor.");
    48a2:	82 83       	std	Z+2, r24	; 0x02
    48a4:	65 e1       	ldi	r22, 0x15	; 21
    48a6:	74 e0       	ldi	r23, 0x04	; 4
    48a8:	87 e7       	ldi	r24, 0x77	; 119
    48aa:	97 e0       	ldi	r25, 0x07	; 7
    48ac:	e8 d1       	rcall	.+976    	; 0x4c7e <_ZN5Print7printlnEPKc>
		return false;
    48ae:	1d c0       	rjmp	.+58     	; 0x48ea <_ZN5Robot5beginEv+0x198>
	} 
	Serial.println("Initialized pressure sensor.");
    48b0:	6b e3       	ldi	r22, 0x3B	; 59
    48b2:	74 e0       	ldi	r23, 0x04	; 4
    48b4:	87 e7       	ldi	r24, 0x77	; 119
    48b6:	97 e0       	ldi	r25, 0x07	; 7
    48b8:	e2 d1       	rcall	.+964    	; 0x4c7e <_ZN5Print7printlnEPKc>
	}
	
	bool begin(){
		return rov.RegisterDevice(_id, this);
    48ba:	62 e6       	ldi	r22, 0x62	; 98
    48bc:	79 e0       	ldi	r23, 0x09	; 9
    48be:	80 91 64 09 	lds	r24, 0x0964	; 0x800964 <TwiSettings+0x2>
    48c2:	90 db       	rcall	.-2272   	; 0x3fe4 <_ZN5Robot14RegisterDeviceEhP9IRegister>
	
	if(!TwiSettings.begin()){
    48c4:	81 11       	cpse	r24, r1
    48c6:	0c c0       	rjmp	.+24     	; 0x48e0 <_ZN5Robot5beginEv+0x18e>
inline ErrorFlag operator | (ErrorFlag lhs, ErrorFlag rhs) {
	return static_cast<ErrorFlag>(static_cast<int>(lhs) | static_cast<int>(rhs));
}

inline ErrorFlag& operator |= (ErrorFlag& lhs, ErrorFlag rhs) {
	lhs = lhs | rhs;
    48c8:	ee e5       	ldi	r30, 0x5E	; 94
    48ca:	f9 e0       	ldi	r31, 0x09	; 9
    48cc:	80 81       	ld	r24, Z
    48ce:	82 60       	ori	r24, 0x02	; 2
    48d0:	80 83       	st	Z, r24
	} 
	Serial.println("Initialized pressure sensor.");
	
	if(!TwiSettings.begin()){
		ErrorCodes.errors |= InitializationError;
		ErrorCodes.init_error = ERROR_INIT_TWI;
    48d2:	86 e0       	ldi	r24, 0x06	; 6
    48d4:	82 83       	std	Z+2, r24	; 0x02
		Serial.println("Unable to initialize TWI settings.");
    48d6:	68 e5       	ldi	r22, 0x58	; 88
    48d8:	74 e0       	ldi	r23, 0x04	; 4
    48da:	87 e7       	ldi	r24, 0x77	; 119
    48dc:	97 e0       	ldi	r25, 0x07	; 7
    48de:	cf d1       	rcall	.+926    	; 0x4c7e <_ZN5Print7printlnEPKc>
    48e0:	6b e7       	ldi	r22, 0x7B	; 123
	}
	Serial.println("Initialized settings.");
    48e2:	74 e0       	ldi	r23, 0x04	; 4
    48e4:	87 e7       	ldi	r24, 0x77	; 119
    48e6:	97 e0       	ldi	r25, 0x07	; 7
    48e8:	ca d1       	rcall	.+916    	; 0x4c7e <_ZN5Print7printlnEPKc>
    48ea:	8c 2f       	mov	r24, r28
    48ec:	cf 91       	pop	r28
	
	return true;
}
    48ee:	0f 91       	pop	r16
    48f0:	08 95       	ret

000048f2 <_ZN5Robot4LoopEv>:
    48f2:	0e 94 d1 06 	call	0xda2	; 0xda2 <_ZN8ENC28J6013packetReceiveEv>
	static bool begin(uint16_t recvPort, uint16_t destPort, Register& csDDR, Register& csPort, uint8_t csPin);
	
	friend void udpReceive(uint16_t dest_port, uint8_t src_ip[IP_LEN], uint16_t src_port, const char *data, uint16_t len);

	static void Loop(){
		ether.packetLoop(ether.packetReceive());
    48f6:	0e 94 41 09 	call	0x1282	; 0x1282 <_ZN9EtherCard10packetLoopEj>
	}
}

void Robot::Loop(){
	EtherComm::Loop();
	Imu.Update(EtherComm::buffer + 1);
    48fa:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    48fe:	70 91 01 02 	lds	r23, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    4902:	6f 5f       	subi	r22, 0xFF	; 255
    4904:	7f 4f       	sbci	r23, 0xFF	; 255
    4906:	85 e6       	ldi	r24, 0x65	; 101
    4908:	99 e0       	ldi	r25, 0x09	; 9
    490a:	0a d0       	rcall	.+20     	; 0x4920 <_ZN9ImuSensor6UpdateEPh>
	Pressure.Update(EtherComm::buffer + 1);
    490c:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    4910:	70 91 01 02 	lds	r23, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    4914:	6f 5f       	subi	r22, 0xFF	; 255
    4916:	7f 4f       	sbci	r23, 0xFF	; 255
    4918:	8a e7       	ldi	r24, 0x7A	; 122
    491a:	99 e0       	ldi	r25, 0x09	; 9
    491c:	ff c0       	rjmp	.+510    	; 0x4b1c <_ZN14PressureSensor6UpdateEPh>
    491e:	08 95       	ret

00004920 <_ZN9ImuSensor6UpdateEPh>:
		&& rov.RegisterDevice(gravityId, this)
		&& rov.RegisterDevice(quatId, this)
		&& imu.begin();
}

void ImuSensor::Update(uint8_t* buffer){
    4920:	08 95       	ret

00004922 <_ZN9ImuSensor5beginEv>:
	: imu(55, 0x28), tempId(TempId), accelId(AccelId), magId(MagId), gyroId(GyroId), eulerId(EulerId), linearId(LinearId), gravityId(GravityId), quatId(QuatId) 
{
	
}

bool ImuSensor::begin(){
    4922:	cf 93       	push	r28
    4924:	df 93       	push	r29
    4926:	ec 01       	movw	r28, r24
	return 
		rov.RegisterDevice(tempId, this)
    4928:	bc 01       	movw	r22, r24
    492a:	8d 85       	ldd	r24, Y+13	; 0x0d
    492c:	5b db       	rcall	.-2378   	; 0x3fe4 <_ZN5Robot14RegisterDeviceEhP9IRegister>
		&& rov.RegisterDevice(gyroId, this)
		&& rov.RegisterDevice(eulerId, this)
		&& rov.RegisterDevice(linearId, this)
		&& rov.RegisterDevice(gravityId, this)
		&& rov.RegisterDevice(quatId, this)
		&& imu.begin();
    492e:	88 23       	and	r24, r24
    4930:	41 f1       	breq	.+80     	; 0x4982 <_ZN9ImuSensor5beginEv+0x60>
}

bool ImuSensor::begin(){
	return 
		rov.RegisterDevice(tempId, this)
		&& rov.RegisterDevice(accelId, this)
    4932:	be 01       	movw	r22, r28
    4934:	8e 85       	ldd	r24, Y+14	; 0x0e
    4936:	56 db       	rcall	.-2388   	; 0x3fe4 <_ZN5Robot14RegisterDeviceEhP9IRegister>
    4938:	88 23       	and	r24, r24
    493a:	19 f1       	breq	.+70     	; 0x4982 <_ZN9ImuSensor5beginEv+0x60>
		&& rov.RegisterDevice(magId, this)
    493c:	be 01       	movw	r22, r28
    493e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4940:	51 db       	rcall	.-2398   	; 0x3fe4 <_ZN5Robot14RegisterDeviceEhP9IRegister>
    4942:	88 23       	and	r24, r24
    4944:	f1 f0       	breq	.+60     	; 0x4982 <_ZN9ImuSensor5beginEv+0x60>
		&& rov.RegisterDevice(gyroId, this)
    4946:	be 01       	movw	r22, r28
    4948:	88 89       	ldd	r24, Y+16	; 0x10
    494a:	4c db       	rcall	.-2408   	; 0x3fe4 <_ZN5Robot14RegisterDeviceEhP9IRegister>
    494c:	88 23       	and	r24, r24
    494e:	c9 f0       	breq	.+50     	; 0x4982 <_ZN9ImuSensor5beginEv+0x60>
		&& rov.RegisterDevice(eulerId, this)
    4950:	be 01       	movw	r22, r28
    4952:	89 89       	ldd	r24, Y+17	; 0x11
    4954:	47 db       	rcall	.-2418   	; 0x3fe4 <_ZN5Robot14RegisterDeviceEhP9IRegister>
    4956:	88 23       	and	r24, r24
    4958:	a1 f0       	breq	.+40     	; 0x4982 <_ZN9ImuSensor5beginEv+0x60>
		&& rov.RegisterDevice(linearId, this)
    495a:	be 01       	movw	r22, r28
    495c:	8a 89       	ldd	r24, Y+18	; 0x12
    495e:	42 db       	rcall	.-2428   	; 0x3fe4 <_ZN5Robot14RegisterDeviceEhP9IRegister>
    4960:	88 23       	and	r24, r24
    4962:	79 f0       	breq	.+30     	; 0x4982 <_ZN9ImuSensor5beginEv+0x60>
		&& rov.RegisterDevice(gravityId, this)
    4964:	be 01       	movw	r22, r28
    4966:	8b 89       	ldd	r24, Y+19	; 0x13
    4968:	3d db       	rcall	.-2438   	; 0x3fe4 <_ZN5Robot14RegisterDeviceEhP9IRegister>
    496a:	88 23       	and	r24, r24
    496c:	51 f0       	breq	.+20     	; 0x4982 <_ZN9ImuSensor5beginEv+0x60>
		&& rov.RegisterDevice(quatId, this)
    496e:	be 01       	movw	r22, r28
    4970:	8c 89       	ldd	r24, Y+20	; 0x14
    4972:	38 db       	rcall	.-2448   	; 0x3fe4 <_ZN5Robot14RegisterDeviceEhP9IRegister>
    4974:	88 23       	and	r24, r24
    4976:	29 f0       	breq	.+10     	; 0x4982 <_ZN9ImuSensor5beginEv+0x60>
    4978:	6c e0       	ldi	r22, 0x0C	; 12
		&& imu.begin();
    497a:	ce 01       	movw	r24, r28
    497c:	02 96       	adiw	r24, 0x02	; 2
    497e:	0e 94 38 02 	call	0x470	; 0x470 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>
    4982:	df 91       	pop	r29
}
    4984:	cf 91       	pop	r28
    4986:	08 95       	ret

00004988 <_ZN9ImuSensor21ReadRegisterRequestedEhPh>:
    4988:	0f 93       	push	r16

void ImuSensor::Update(uint8_t* buffer){
	
}

void ImuSensor::ReadRegisterRequested(uint8_t id, uint8_t* buffer){
    498a:	1f 93       	push	r17
    498c:	cf 93       	push	r28
    498e:	df 93       	push	r29
    4990:	fc 01       	movw	r30, r24
    4992:	c6 2f       	mov	r28, r22
    4994:	8a 01       	movw	r16, r20
	if(id == tempId){
    4996:	d5 85       	ldd	r29, Z+13	; 0x0d
    4998:	d6 13       	cpse	r29, r22
    499a:	0a c0       	rjmp	.+20     	; 0x49b0 <_ZN9ImuSensor21ReadRegisterRequestedEhPh+0x28>
		buffer[0] = imu.getTemp();
    499c:	02 96       	adiw	r24, 0x02	; 2
    499e:	0e 94 a5 02 	call	0x54a	; 0x54a <_ZN15Adafruit_BNO0557getTempEv>
    49a2:	f8 01       	movw	r30, r16
    49a4:	80 83       	st	Z, r24
	
protected:
	void inline SendCommand(uint8_t id, uint8_t len){
		//EtherComm::buffer[2] = id;
		//EtherComm::SendCommand(CMD_UpdateDevice, len + 1);
		EtherComm::SendCommand(id, len);	
    49a6:	61 e0       	ldi	r22, 0x01	; 1
    49a8:	8d 2f       	mov	r24, r29
    49aa:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <_ZN9EtherComm11SendCommandEhh>
    49ae:	5a c0       	rjmp	.+180    	; 0x4a64 <_ZN9ImuSensor21ReadRegisterRequestedEhPh+0xdc>
		SendCommand(id, 1);
	}else if(id == accelId) {
    49b0:	86 85       	ldd	r24, Z+14	; 0x0e
    49b2:	68 13       	cpse	r22, r24
    49b4:	0a c0       	rjmp	.+20     	; 0x49ca <_ZN9ImuSensor21ReadRegisterRequestedEhPh+0x42>
		SendCommand(id, imu.getVector(Adafruit_BNO055::VECTOR_ACCELEROMETER, buffer));
    49b6:	68 e0       	ldi	r22, 0x08	; 8
    49b8:	cf 01       	movw	r24, r30
    49ba:	02 96       	adiw	r24, 0x02	; 2
    49bc:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tEPh>
    49c0:	68 2f       	mov	r22, r24
    49c2:	8c 2f       	mov	r24, r28
    49c4:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <_ZN9EtherComm11SendCommandEhh>
    49c8:	4d c0       	rjmp	.+154    	; 0x4a64 <_ZN9ImuSensor21ReadRegisterRequestedEhPh+0xdc>
	}else if(id == magId){
    49ca:	87 85       	ldd	r24, Z+15	; 0x0f
    49cc:	68 13       	cpse	r22, r24
    49ce:	0a c0       	rjmp	.+20     	; 0x49e4 <_ZN9ImuSensor21ReadRegisterRequestedEhPh+0x5c>
		SendCommand(id, imu.getVector(Adafruit_BNO055::VECTOR_MAGNETOMETER, buffer));
    49d0:	6e e0       	ldi	r22, 0x0E	; 14
    49d2:	cf 01       	movw	r24, r30
    49d4:	02 96       	adiw	r24, 0x02	; 2
    49d6:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tEPh>
    49da:	68 2f       	mov	r22, r24
    49dc:	8c 2f       	mov	r24, r28
    49de:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <_ZN9EtherComm11SendCommandEhh>
    49e2:	40 c0       	rjmp	.+128    	; 0x4a64 <_ZN9ImuSensor21ReadRegisterRequestedEhPh+0xdc>
	}else if(id == gyroId){
    49e4:	80 89       	ldd	r24, Z+16	; 0x10
    49e6:	68 13       	cpse	r22, r24
    49e8:	0a c0       	rjmp	.+20     	; 0x49fe <_ZN9ImuSensor21ReadRegisterRequestedEhPh+0x76>
		SendCommand(id, imu.getVector(Adafruit_BNO055::VECTOR_GYROSCOPE, buffer));
    49ea:	64 e1       	ldi	r22, 0x14	; 20
    49ec:	cf 01       	movw	r24, r30
    49ee:	02 96       	adiw	r24, 0x02	; 2
    49f0:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tEPh>
    49f4:	68 2f       	mov	r22, r24
    49f6:	8c 2f       	mov	r24, r28
    49f8:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <_ZN9EtherComm11SendCommandEhh>
    49fc:	33 c0       	rjmp	.+102    	; 0x4a64 <_ZN9ImuSensor21ReadRegisterRequestedEhPh+0xdc>
	}else if(id == eulerId){
    49fe:	81 89       	ldd	r24, Z+17	; 0x11
    4a00:	68 13       	cpse	r22, r24
    4a02:	0a c0       	rjmp	.+20     	; 0x4a18 <_ZN9ImuSensor21ReadRegisterRequestedEhPh+0x90>
		SendCommand(id, imu.getVector(Adafruit_BNO055::VECTOR_EULER, buffer));
    4a04:	6a e1       	ldi	r22, 0x1A	; 26
    4a06:	cf 01       	movw	r24, r30
    4a08:	02 96       	adiw	r24, 0x02	; 2
    4a0a:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tEPh>
    4a0e:	68 2f       	mov	r22, r24
    4a10:	8c 2f       	mov	r24, r28
    4a12:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <_ZN9EtherComm11SendCommandEhh>
    4a16:	26 c0       	rjmp	.+76     	; 0x4a64 <_ZN9ImuSensor21ReadRegisterRequestedEhPh+0xdc>
	}else if(id == linearId){
    4a18:	82 89       	ldd	r24, Z+18	; 0x12
    4a1a:	68 13       	cpse	r22, r24
    4a1c:	0a c0       	rjmp	.+20     	; 0x4a32 <_ZN9ImuSensor21ReadRegisterRequestedEhPh+0xaa>
		SendCommand(id, imu.getVector(Adafruit_BNO055::VECTOR_LINEARACCEL, buffer));
    4a1e:	68 e2       	ldi	r22, 0x28	; 40
    4a20:	cf 01       	movw	r24, r30
    4a22:	02 96       	adiw	r24, 0x02	; 2
    4a24:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tEPh>
    4a28:	68 2f       	mov	r22, r24
    4a2a:	8c 2f       	mov	r24, r28
    4a2c:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <_ZN9EtherComm11SendCommandEhh>
    4a30:	19 c0       	rjmp	.+50     	; 0x4a64 <_ZN9ImuSensor21ReadRegisterRequestedEhPh+0xdc>
	}else if(id == gravityId){
    4a32:	83 89       	ldd	r24, Z+19	; 0x13
    4a34:	68 13       	cpse	r22, r24
    4a36:	0a c0       	rjmp	.+20     	; 0x4a4c <_ZN9ImuSensor21ReadRegisterRequestedEhPh+0xc4>
		SendCommand(id, imu.getVector(Adafruit_BNO055::VECTOR_GRAVITY, buffer));
    4a38:	6e e2       	ldi	r22, 0x2E	; 46
    4a3a:	cf 01       	movw	r24, r30
    4a3c:	02 96       	adiw	r24, 0x02	; 2
    4a3e:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tEPh>
    4a42:	68 2f       	mov	r22, r24
    4a44:	8c 2f       	mov	r24, r28
    4a46:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <_ZN9EtherComm11SendCommandEhh>
    4a4a:	0c c0       	rjmp	.+24     	; 0x4a64 <_ZN9ImuSensor21ReadRegisterRequestedEhPh+0xdc>
	}else if(id == quatId){
    4a4c:	84 89       	ldd	r24, Z+20	; 0x14
    4a4e:	68 13       	cpse	r22, r24
    4a50:	09 c0       	rjmp	.+18     	; 0x4a64 <_ZN9ImuSensor21ReadRegisterRequestedEhPh+0xdc>
		SendCommand(id, imu.getQuat(buffer));
    4a52:	ba 01       	movw	r22, r20
    4a54:	cf 01       	movw	r24, r30
    4a56:	02 96       	adiw	r24, 0x02	; 2
    4a58:	0e 94 ff 02 	call	0x5fe	; 0x5fe <_ZN15Adafruit_BNO0557getQuatEPh>
    4a5c:	68 2f       	mov	r22, r24
    4a5e:	8c 2f       	mov	r24, r28
    4a60:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <_ZN9EtherComm11SendCommandEhh>
	}
    4a64:	df 91       	pop	r29
    4a66:	cf 91       	pop	r28
    4a68:	1f 91       	pop	r17
    4a6a:	0f 91       	pop	r16
    4a6c:	08 95       	ret

00004a6e <_ZN9ImuSensorC1Ehhhhhhhh>:
 */ 

#include "ImuSensor.h"
#include "../Robot.h"

ImuSensor::ImuSensor(const uint8_t TempId, const uint8_t AccelId, const uint8_t MagId, const uint8_t GyroId, const uint8_t EulerId, const uint8_t LinearId, const uint8_t GravityId, const uint8_t QuatId) 
    4a6e:	6f 92       	push	r6
    4a70:	7f 92       	push	r7
    4a72:	8f 92       	push	r8
    4a74:	9f 92       	push	r9
    4a76:	af 92       	push	r10
    4a78:	bf 92       	push	r11
    4a7a:	cf 92       	push	r12
    4a7c:	df 92       	push	r13
    4a7e:	ef 92       	push	r14
    4a80:	ff 92       	push	r15
    4a82:	0f 93       	push	r16
    4a84:	1f 93       	push	r17
    4a86:	cf 93       	push	r28
    4a88:	df 93       	push	r29
    4a8a:	cd b7       	in	r28, 0x3d	; 61
    4a8c:	de b7       	in	r29, 0x3e	; 62
    4a8e:	3c 01       	movw	r6, r24
    4a90:	96 2e       	mov	r9, r22
    4a92:	b4 2e       	mov	r11, r20
    4a94:	d2 2e       	mov	r13, r18
    4a96:	f0 2e       	mov	r15, r16
	: imu(55, 0x28), tempId(TempId), accelId(AccelId), magId(MagId), gyroId(GyroId), eulerId(EulerId), linearId(LinearId), gravityId(GravityId), quatId(QuatId) 
    4a98:	25 ec       	ldi	r18, 0xC5	; 197
    4a9a:	34 e0       	ldi	r19, 0x04	; 4
    4a9c:	fc 01       	movw	r30, r24
    4a9e:	21 93       	st	Z+, r18
    4aa0:	31 93       	st	Z+, r19
    4aa2:	cf 01       	movw	r24, r30
    4aa4:	05 e5       	ldi	r16, 0x55	; 85
    4aa6:	18 e0       	ldi	r17, 0x08	; 8
    4aa8:	28 e2       	ldi	r18, 0x28	; 40
    4aaa:	47 e3       	ldi	r20, 0x37	; 55
    4aac:	50 e0       	ldi	r21, 0x00	; 0
    4aae:	60 e0       	ldi	r22, 0x00	; 0
    4ab0:	70 e0       	ldi	r23, 0x00	; 0
    4ab2:	0e 94 c3 01 	call	0x386	; 0x386 <_ZN15Adafruit_BNO055C1ElhP7TwoWire>
    4ab6:	f3 01       	movw	r30, r6
    4ab8:	95 86       	std	Z+13, r9	; 0x0d
    4aba:	b6 86       	std	Z+14, r11	; 0x0e
    4abc:	d7 86       	std	Z+15, r13	; 0x0f
    4abe:	f0 8a       	std	Z+16, r15	; 0x10
    4ac0:	e1 8a       	std	Z+17, r14	; 0x11
    4ac2:	c2 8a       	std	Z+18, r12	; 0x12
    4ac4:	a3 8a       	std	Z+19, r10	; 0x13
    4ac6:	84 8a       	std	Z+20, r8	; 0x14
{
	
}
    4ac8:	df 91       	pop	r29
    4aca:	cf 91       	pop	r28
    4acc:	1f 91       	pop	r17
    4ace:	0f 91       	pop	r16
    4ad0:	ff 90       	pop	r15
    4ad2:	ef 90       	pop	r14
    4ad4:	df 90       	pop	r13
    4ad6:	cf 90       	pop	r12
    4ad8:	bf 90       	pop	r11
    4ada:	af 90       	pop	r10
    4adc:	9f 90       	pop	r9
    4ade:	8f 90       	pop	r8
    4ae0:	7f 90       	pop	r7
    4ae2:	6f 90       	pop	r6
    4ae4:	08 95       	ret

00004ae6 <_ZN14PressureSensor5beginEv>:

PressureSensor::PressureSensor(const uint8_t id, HardwareTimer &timer) : sensor(timer), _id(id) {
	
}

bool PressureSensor::begin(){
    4ae6:	1f 93       	push	r17
    4ae8:	cf 93       	push	r28
    4aea:	df 93       	push	r29
    4aec:	ec 01       	movw	r28, r24
	if(!rov.RegisterDevice(_id, this)) return false;
    4aee:	bc 01       	movw	r22, r24
    4af0:	8a a5       	ldd	r24, Y+42	; 0x2a
    4af2:	78 da       	rcall	.-2832   	; 0x3fe4 <_ZN5Robot14RegisterDeviceEhP9IRegister>
    4af4:	18 2f       	mov	r17, r24
    4af6:	88 23       	and	r24, r24
    4af8:	61 f0       	breq	.+24     	; 0x4b12 <_ZN14PressureSensor5beginEv+0x2c>
	if(sensor.begin()){
    4afa:	22 96       	adiw	r28, 0x02	; 2
    4afc:	ce 01       	movw	r24, r28
    4afe:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <_ZN6MS58375beginEv>
    4b02:	18 2f       	mov	r17, r24
    4b04:	88 23       	and	r24, r24
    4b06:	29 f0       	breq	.+10     	; 0x4b12 <_ZN14PressureSensor5beginEv+0x2c>
		sensor.setModel(MS5837::MS5837_30BA);
    4b08:	60 91 8e 02 	lds	r22, 0x028E	; 0x80028e <_ZN6MS583711MS5837_30BAE>
    4b0c:	ce 01       	movw	r24, r28
    4b0e:	0e 94 1b 13 	call	0x2636	; 0x2636 <_ZN6MS58378setModelEh>
		//sensor.setFluidDensity(997); //Freshwater
		return true;
	}
	
	return false;
}
    4b12:	81 2f       	mov	r24, r17
    4b14:	df 91       	pop	r29
    4b16:	cf 91       	pop	r28
    4b18:	1f 91       	pop	r17
    4b1a:	08 95       	ret

00004b1c <_ZN14PressureSensor6UpdateEPh>:

void PressureSensor::Update(uint8_t* buffer){
    4b1c:	ef 92       	push	r14
    4b1e:	ff 92       	push	r15
    4b20:	0f 93       	push	r16
    4b22:	1f 93       	push	r17
    4b24:	cf 93       	push	r28
    4b26:	df 93       	push	r29
	if(reading){
    4b28:	fc 01       	movw	r30, r24
    4b2a:	23 a5       	ldd	r18, Z+43	; 0x2b
    4b2c:	22 23       	and	r18, r18
    4b2e:	31 f1       	breq	.+76     	; 0x4b7c <_ZN14PressureSensor6UpdateEPh+0x60>
    4b30:	7b 01       	movw	r14, r22
    4b32:	ec 01       	movw	r28, r24
		sensor.update();
    4b34:	8c 01       	movw	r16, r24
    4b36:	0e 5f       	subi	r16, 0xFE	; 254
    4b38:	1f 4f       	sbci	r17, 0xFF	; 255
    4b3a:	c8 01       	movw	r24, r16
    4b3c:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <_ZN6MS58376updateEv>
		if(sensor.finished()){
    4b40:	c8 01       	movw	r24, r16
    4b42:	0e 94 44 13 	call	0x2688	; 0x2688 <_ZN6MS58378finishedEv>
    4b46:	88 23       	and	r24, r24
    4b48:	c9 f0       	breq	.+50     	; 0x4b7c <_ZN14PressureSensor6UpdateEPh+0x60>
			saveFloat(sensor.pressure(), buffer);
    4b4a:	40 e0       	ldi	r20, 0x00	; 0
    4b4c:	50 e0       	ldi	r21, 0x00	; 0
    4b4e:	60 e8       	ldi	r22, 0x80	; 128
    4b50:	7f e3       	ldi	r23, 0x3F	; 63
    4b52:	c8 01       	movw	r24, r16
    4b54:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <_ZN6MS58378pressureEf>
		/*uint8_t* val = (uint8_t*)(&f);
		*buffer++ = *val++;
		*buffer++ = *val++;
		*buffer++ = *val++;
		*buffer++ = *val++;*/
		*((float*)buffer) = f;
    4b58:	f7 01       	movw	r30, r14
    4b5a:	60 83       	st	Z, r22
    4b5c:	71 83       	std	Z+1, r23	; 0x01
    4b5e:	82 83       	std	Z+2, r24	; 0x02
    4b60:	93 83       	std	Z+3, r25	; 0x03
			saveFloat(sensor.temperature(), buffer + 4);
    4b62:	c8 01       	movw	r24, r16
    4b64:	0e 94 21 1a 	call	0x3442	; 0x3442 <_ZN6MS583711temperatureEv>
    4b68:	f7 01       	movw	r30, r14
    4b6a:	64 83       	std	Z+4, r22	; 0x04
    4b6c:	75 83       	std	Z+5, r23	; 0x05
    4b6e:	86 83       	std	Z+6, r24	; 0x06
    4b70:	97 83       	std	Z+7, r25	; 0x07
	
protected:
	void inline SendCommand(uint8_t id, uint8_t len){
		//EtherComm::buffer[2] = id;
		//EtherComm::SendCommand(CMD_UpdateDevice, len + 1);
		EtherComm::SendCommand(id, len);	
    4b72:	68 e0       	ldi	r22, 0x08	; 8
    4b74:	8a a5       	ldd	r24, Y+42	; 0x2a
    4b76:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <_ZN9EtherComm11SendCommandEhh>
			SendCommand(_id, 8);
			reading = false;
    4b7a:	1b a6       	std	Y+43, r1	; 0x2b
		}
	}
}
    4b7c:	df 91       	pop	r29
    4b7e:	cf 91       	pop	r28
    4b80:	1f 91       	pop	r17
    4b82:	0f 91       	pop	r16
    4b84:	ff 90       	pop	r15
    4b86:	ef 90       	pop	r14
    4b88:	08 95       	ret

00004b8a <_ZN14PressureSensor21ReadRegisterRequestedEhPh>:

void PressureSensor::ReadRegisterRequested(uint8_t id, uint8_t* buffer){
    4b8a:	cf 93       	push	r28
    4b8c:	df 93       	push	r29
	if(!reading){
    4b8e:	fc 01       	movw	r30, r24
    4b90:	23 a5       	ldd	r18, Z+43	; 0x2b
    4b92:	21 11       	cpse	r18, r1
    4b94:	05 c0       	rjmp	.+10     	; 0x4ba0 <_ZN14PressureSensor21ReadRegisterRequestedEhPh+0x16>
    4b96:	ec 01       	movw	r28, r24
		reading = sensor.startRead();
    4b98:	02 96       	adiw	r24, 0x02	; 2
    4b9a:	0e 94 1e 13 	call	0x263c	; 0x263c <_ZN6MS58379startReadEv>
    4b9e:	8b a7       	std	Y+43, r24	; 0x2b
	}
    4ba0:	df 91       	pop	r29
    4ba2:	cf 91       	pop	r28
    4ba4:	08 95       	ret

00004ba6 <_ZN14PressureSensorC1EhR13HardwareTimer>:
 */ 

#include "PressureSensor.h"
#include "../Robot.h"

PressureSensor::PressureSensor(const uint8_t id, HardwareTimer &timer) : sensor(timer), _id(id) {
    4ba6:	1f 93       	push	r17
    4ba8:	cf 93       	push	r28
    4baa:	df 93       	push	r29
    4bac:	ec 01       	movw	r28, r24
    4bae:	16 2f       	mov	r17, r22
    4bb0:	21 ed       	ldi	r18, 0xD1	; 209
    4bb2:	34 e0       	ldi	r19, 0x04	; 4
    4bb4:	fc 01       	movw	r30, r24
    4bb6:	21 93       	st	Z+, r18
    4bb8:	31 93       	st	Z+, r19
    4bba:	cf 01       	movw	r24, r30
    4bbc:	ba 01       	movw	r22, r20
    4bbe:	0e 94 0f 13 	call	0x261e	; 0x261e <_ZN6MS5837C1ER13HardwareTimer>
    4bc2:	1a a7       	std	Y+42, r17	; 0x2a
	
}
    4bc4:	df 91       	pop	r29
    4bc6:	cf 91       	pop	r28
    4bc8:	1f 91       	pop	r17
    4bca:	08 95       	ret

00004bcc <_ZN5Print5writeEPKhj>:
uint16_t Print::println(long num, int base)
{
  uint16_t n = print(num, base);
  n += println();
  return n;
}
    4bcc:	cf 92       	push	r12
    4bce:	df 92       	push	r13
    4bd0:	ef 92       	push	r14
    4bd2:	ff 92       	push	r15
    4bd4:	0f 93       	push	r16
    4bd6:	1f 93       	push	r17
    4bd8:	cf 93       	push	r28
    4bda:	df 93       	push	r29
    4bdc:	41 15       	cp	r20, r1
    4bde:	51 05       	cpc	r21, r1
    4be0:	c1 f0       	breq	.+48     	; 0x4c12 <_ZN5Print5writeEPKhj+0x46>
    4be2:	6a 01       	movw	r12, r20
    4be4:	8c 01       	movw	r16, r24
    4be6:	e6 2e       	mov	r14, r22
    4be8:	f7 2e       	mov	r15, r23
    4bea:	c0 e0       	ldi	r28, 0x00	; 0
    4bec:	d0 e0       	ldi	r29, 0x00	; 0
    4bee:	d7 01       	movw	r26, r14
    4bf0:	6d 91       	ld	r22, X+
    4bf2:	7d 01       	movw	r14, r26
    4bf4:	d8 01       	movw	r26, r16
    4bf6:	ed 91       	ld	r30, X+
    4bf8:	fc 91       	ld	r31, X
    4bfa:	01 90       	ld	r0, Z+
    4bfc:	f0 81       	ld	r31, Z
    4bfe:	e0 2d       	mov	r30, r0
    4c00:	c8 01       	movw	r24, r16
    4c02:	19 95       	eicall
    4c04:	89 2b       	or	r24, r25
    4c06:	39 f0       	breq	.+14     	; 0x4c16 <_ZN5Print5writeEPKhj+0x4a>
    4c08:	21 96       	adiw	r28, 0x01	; 1
    4c0a:	cc 16       	cp	r12, r28
    4c0c:	dd 06       	cpc	r13, r29
    4c0e:	79 f7       	brne	.-34     	; 0x4bee <_ZN5Print5writeEPKhj+0x22>
    4c10:	02 c0       	rjmp	.+4      	; 0x4c16 <_ZN5Print5writeEPKhj+0x4a>
    4c12:	c0 e0       	ldi	r28, 0x00	; 0
    4c14:	d0 e0       	ldi	r29, 0x00	; 0
    4c16:	ce 01       	movw	r24, r28
    4c18:	df 91       	pop	r29
    4c1a:	cf 91       	pop	r28
    4c1c:	1f 91       	pop	r17
    4c1e:	0f 91       	pop	r16
    4c20:	ff 90       	pop	r15
    4c22:	ef 90       	pop	r14
    4c24:	df 90       	pop	r13
    4c26:	cf 90       	pop	r12
    4c28:	08 95       	ret

00004c2a <_ZN5Print5printEPKc>:
    4c2a:	61 15       	cp	r22, r1
    4c2c:	71 05       	cpc	r23, r1
    4c2e:	81 f0       	breq	.+32     	; 0x4c50 <_ZN5Print5printEPKc+0x26>
    4c30:	fb 01       	movw	r30, r22
    4c32:	01 90       	ld	r0, Z+
    4c34:	00 20       	and	r0, r0
    4c36:	e9 f7       	brne	.-6      	; 0x4c32 <_ZN5Print5printEPKc+0x8>
    4c38:	31 97       	sbiw	r30, 0x01	; 1
    4c3a:	af 01       	movw	r20, r30
    4c3c:	46 1b       	sub	r20, r22
    4c3e:	57 0b       	sbc	r21, r23
    4c40:	dc 01       	movw	r26, r24
    4c42:	ed 91       	ld	r30, X+
    4c44:	fc 91       	ld	r31, X
    4c46:	02 80       	ldd	r0, Z+2	; 0x02
    4c48:	f3 81       	ldd	r31, Z+3	; 0x03
    4c4a:	e0 2d       	mov	r30, r0
    4c4c:	19 95       	eicall
    4c4e:	08 95       	ret
    4c50:	80 e0       	ldi	r24, 0x00	; 0
    4c52:	90 e0       	ldi	r25, 0x00	; 0
    4c54:	08 95       	ret

00004c56 <_ZN5Print5printEc>:
    4c56:	dc 01       	movw	r26, r24
    4c58:	ed 91       	ld	r30, X+
    4c5a:	fc 91       	ld	r31, X
    4c5c:	01 90       	ld	r0, Z+
    4c5e:	f0 81       	ld	r31, Z
    4c60:	e0 2d       	mov	r30, r0
    4c62:	19 95       	eicall
    4c64:	08 95       	ret

00004c66 <_ZN5Print7printlnEv>:
    4c66:	dc 01       	movw	r26, r24
    4c68:	ed 91       	ld	r30, X+
    4c6a:	fc 91       	ld	r31, X
    4c6c:	02 80       	ldd	r0, Z+2	; 0x02
    4c6e:	f3 81       	ldd	r31, Z+3	; 0x03
    4c70:	e0 2d       	mov	r30, r0
    4c72:	42 e0       	ldi	r20, 0x02	; 2
    4c74:	50 e0       	ldi	r21, 0x00	; 0
    4c76:	69 ed       	ldi	r22, 0xD9	; 217
    4c78:	74 e0       	ldi	r23, 0x04	; 4
    4c7a:	19 95       	eicall
    4c7c:	08 95       	ret

00004c7e <_ZN5Print7printlnEPKc>:
    4c7e:	0f 93       	push	r16
    4c80:	1f 93       	push	r17
    4c82:	cf 93       	push	r28
    4c84:	df 93       	push	r29
    4c86:	ec 01       	movw	r28, r24
    4c88:	d0 df       	rcall	.-96     	; 0x4c2a <_ZN5Print5printEPKc>
    4c8a:	8c 01       	movw	r16, r24
    4c8c:	ce 01       	movw	r24, r28
    4c8e:	eb df       	rcall	.-42     	; 0x4c66 <_ZN5Print7printlnEv>
    4c90:	80 0f       	add	r24, r16
    4c92:	91 1f       	adc	r25, r17
    4c94:	df 91       	pop	r29
    4c96:	cf 91       	pop	r28
    4c98:	1f 91       	pop	r17
    4c9a:	0f 91       	pop	r16
    4c9c:	08 95       	ret

00004c9e <_ZN5Print11printNumberEmh>:
    4c9e:	8f 92       	push	r8
    4ca0:	9f 92       	push	r9
    4ca2:	af 92       	push	r10
    4ca4:	bf 92       	push	r11
    4ca6:	ef 92       	push	r14
    4ca8:	ff 92       	push	r15
    4caa:	0f 93       	push	r16
    4cac:	1f 93       	push	r17
    4cae:	cf 93       	push	r28
    4cb0:	df 93       	push	r29
    4cb2:	cd b7       	in	r28, 0x3d	; 61
    4cb4:	de b7       	in	r29, 0x3e	; 62
    4cb6:	a1 97       	sbiw	r28, 0x21	; 33
    4cb8:	0f b6       	in	r0, 0x3f	; 63
    4cba:	f8 94       	cli
    4cbc:	de bf       	out	0x3e, r29	; 62
    4cbe:	0f be       	out	0x3f, r0	; 63
    4cc0:	cd bf       	out	0x3d, r28	; 61
    4cc2:	7c 01       	movw	r14, r24
    4cc4:	cb 01       	movw	r24, r22
    4cc6:	ba 01       	movw	r22, r20
    4cc8:	19 a2       	std	Y+33, r1	; 0x21
    4cca:	22 30       	cpi	r18, 0x02	; 2
    4ccc:	08 f4       	brcc	.+2      	; 0x4cd0 <_ZN5Print11printNumberEmh+0x32>
    4cce:	2a e0       	ldi	r18, 0x0A	; 10
    4cd0:	8e 01       	movw	r16, r28
    4cd2:	0f 5d       	subi	r16, 0xDF	; 223
    4cd4:	1f 4f       	sbci	r17, 0xFF	; 255
    4cd6:	82 2e       	mov	r8, r18
    4cd8:	91 2c       	mov	r9, r1
    4cda:	a1 2c       	mov	r10, r1
    4cdc:	b1 2c       	mov	r11, r1
    4cde:	a5 01       	movw	r20, r10
    4ce0:	94 01       	movw	r18, r8
    4ce2:	75 d2       	rcall	.+1258   	; 0x51ce <__udivmodsi4>
    4ce4:	e6 2f       	mov	r30, r22
    4ce6:	62 2f       	mov	r22, r18
    4ce8:	73 2f       	mov	r23, r19
    4cea:	84 2f       	mov	r24, r20
    4cec:	95 2f       	mov	r25, r21
    4cee:	01 50       	subi	r16, 0x01	; 1
    4cf0:	11 09       	sbc	r17, r1
    4cf2:	ea 30       	cpi	r30, 0x0A	; 10
    4cf4:	10 f4       	brcc	.+4      	; 0x4cfa <_ZN5Print11printNumberEmh+0x5c>
    4cf6:	e0 5d       	subi	r30, 0xD0	; 208
    4cf8:	01 c0       	rjmp	.+2      	; 0x4cfc <_ZN5Print11printNumberEmh+0x5e>
    4cfa:	e9 5c       	subi	r30, 0xC9	; 201
    4cfc:	d8 01       	movw	r26, r16
    4cfe:	ec 93       	st	X, r30
    4d00:	61 15       	cp	r22, r1
    4d02:	71 05       	cpc	r23, r1
    4d04:	81 05       	cpc	r24, r1
    4d06:	91 05       	cpc	r25, r1
    4d08:	51 f7       	brne	.-44     	; 0x4cde <_ZN5Print11printNumberEmh+0x40>
    4d0a:	01 15       	cp	r16, r1
    4d0c:	11 05       	cpc	r17, r1
    4d0e:	91 f0       	breq	.+36     	; 0x4d34 <_ZN5Print11printNumberEmh+0x96>
    4d10:	f8 01       	movw	r30, r16
    4d12:	01 90       	ld	r0, Z+
    4d14:	00 20       	and	r0, r0
    4d16:	e9 f7       	brne	.-6      	; 0x4d12 <_ZN5Print11printNumberEmh+0x74>
    4d18:	31 97       	sbiw	r30, 0x01	; 1
    4d1a:	af 01       	movw	r20, r30
    4d1c:	40 1b       	sub	r20, r16
    4d1e:	51 0b       	sbc	r21, r17
    4d20:	d7 01       	movw	r26, r14
    4d22:	ed 91       	ld	r30, X+
    4d24:	fc 91       	ld	r31, X
    4d26:	02 80       	ldd	r0, Z+2	; 0x02
    4d28:	f3 81       	ldd	r31, Z+3	; 0x03
    4d2a:	e0 2d       	mov	r30, r0
    4d2c:	b8 01       	movw	r22, r16
    4d2e:	c7 01       	movw	r24, r14
    4d30:	19 95       	eicall
    4d32:	01 c0       	rjmp	.+2      	; 0x4d36 <_ZN5Print11printNumberEmh+0x98>
    4d34:	80 e0       	ldi	r24, 0x00	; 0
    4d36:	a1 96       	adiw	r28, 0x21	; 33
    4d38:	0f b6       	in	r0, 0x3f	; 63
    4d3a:	f8 94       	cli
    4d3c:	de bf       	out	0x3e, r29	; 62
    4d3e:	0f be       	out	0x3f, r0	; 63
    4d40:	cd bf       	out	0x3d, r28	; 61
    4d42:	df 91       	pop	r29
    4d44:	cf 91       	pop	r28
    4d46:	1f 91       	pop	r17
    4d48:	0f 91       	pop	r16
    4d4a:	ff 90       	pop	r15
    4d4c:	ef 90       	pop	r14
    4d4e:	bf 90       	pop	r11
    4d50:	af 90       	pop	r10
    4d52:	9f 90       	pop	r9
    4d54:	8f 90       	pop	r8
    4d56:	08 95       	ret

00004d58 <_ZN5Print5printEmi>:
  }
}

uint16_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
    4d58:	21 15       	cp	r18, r1
    4d5a:	31 05       	cpc	r19, r1
    4d5c:	49 f4       	brne	.+18     	; 0x4d70 <_ZN5Print5printEmi+0x18>
    4d5e:	dc 01       	movw	r26, r24
    4d60:	ed 91       	ld	r30, X+
    4d62:	fc 91       	ld	r31, X
    4d64:	01 90       	ld	r0, Z+
    4d66:	f0 81       	ld	r31, Z
    4d68:	e0 2d       	mov	r30, r0
    4d6a:	64 2f       	mov	r22, r20
    4d6c:	19 95       	eicall
    4d6e:	08 95       	ret
  else return printNumber(n, base);
    4d70:	96 df       	rcall	.-212    	; 0x4c9e <_ZN5Print11printNumberEmh>
    4d72:	90 e0       	ldi	r25, 0x00	; 0
}
    4d74:	08 95       	ret

00004d76 <_ZN5Print5printEhi>:
{
  return write(c);
}

uint16_t Print::print(unsigned char b, int base)
{
    4d76:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
    4d78:	46 2f       	mov	r20, r22
    4d7a:	50 e0       	ldi	r21, 0x00	; 0
    4d7c:	60 e0       	ldi	r22, 0x00	; 0
    4d7e:	70 e0       	ldi	r23, 0x00	; 0
    4d80:	eb cf       	rjmp	.-42     	; 0x4d58 <_ZN5Print5printEmi>
}
    4d82:	08 95       	ret

00004d84 <__subsf3>:
    4d84:	50 58       	subi	r21, 0x80	; 128

00004d86 <__addsf3>:
    4d86:	bb 27       	eor	r27, r27
    4d88:	aa 27       	eor	r26, r26
    4d8a:	0e d0       	rcall	.+28     	; 0x4da8 <__addsf3x>
    4d8c:	70 c1       	rjmp	.+736    	; 0x506e <__fp_round>
    4d8e:	61 d1       	rcall	.+706    	; 0x5052 <__fp_pscA>
    4d90:	30 f0       	brcs	.+12     	; 0x4d9e <__addsf3+0x18>
    4d92:	66 d1       	rcall	.+716    	; 0x5060 <__fp_pscB>
    4d94:	20 f0       	brcs	.+8      	; 0x4d9e <__addsf3+0x18>
    4d96:	31 f4       	brne	.+12     	; 0x4da4 <__addsf3+0x1e>
    4d98:	9f 3f       	cpi	r25, 0xFF	; 255
    4d9a:	11 f4       	brne	.+4      	; 0x4da0 <__addsf3+0x1a>
    4d9c:	1e f4       	brtc	.+6      	; 0x4da4 <__addsf3+0x1e>
    4d9e:	56 c1       	rjmp	.+684    	; 0x504c <__fp_nan>
    4da0:	0e f4       	brtc	.+2      	; 0x4da4 <__addsf3+0x1e>
    4da2:	e0 95       	com	r30
    4da4:	e7 fb       	bst	r30, 7
    4da6:	4c c1       	rjmp	.+664    	; 0x5040 <__fp_inf>

00004da8 <__addsf3x>:
    4da8:	e9 2f       	mov	r30, r25
    4daa:	72 d1       	rcall	.+740    	; 0x5090 <__fp_split3>
    4dac:	80 f3       	brcs	.-32     	; 0x4d8e <__addsf3+0x8>
    4dae:	ba 17       	cp	r27, r26
    4db0:	62 07       	cpc	r22, r18
    4db2:	73 07       	cpc	r23, r19
    4db4:	84 07       	cpc	r24, r20
    4db6:	95 07       	cpc	r25, r21
    4db8:	18 f0       	brcs	.+6      	; 0x4dc0 <__addsf3x+0x18>
    4dba:	71 f4       	brne	.+28     	; 0x4dd8 <__addsf3x+0x30>
    4dbc:	9e f5       	brtc	.+102    	; 0x4e24 <__addsf3x+0x7c>
    4dbe:	8a c1       	rjmp	.+788    	; 0x50d4 <__fp_zero>
    4dc0:	0e f4       	brtc	.+2      	; 0x4dc4 <__addsf3x+0x1c>
    4dc2:	e0 95       	com	r30
    4dc4:	0b 2e       	mov	r0, r27
    4dc6:	ba 2f       	mov	r27, r26
    4dc8:	a0 2d       	mov	r26, r0
    4dca:	0b 01       	movw	r0, r22
    4dcc:	b9 01       	movw	r22, r18
    4dce:	90 01       	movw	r18, r0
    4dd0:	0c 01       	movw	r0, r24
    4dd2:	ca 01       	movw	r24, r20
    4dd4:	a0 01       	movw	r20, r0
    4dd6:	11 24       	eor	r1, r1
    4dd8:	ff 27       	eor	r31, r31
    4dda:	59 1b       	sub	r21, r25
    4ddc:	99 f0       	breq	.+38     	; 0x4e04 <__addsf3x+0x5c>
    4dde:	59 3f       	cpi	r21, 0xF9	; 249
    4de0:	50 f4       	brcc	.+20     	; 0x4df6 <__addsf3x+0x4e>
    4de2:	50 3e       	cpi	r21, 0xE0	; 224
    4de4:	68 f1       	brcs	.+90     	; 0x4e40 <__addsf3x+0x98>
    4de6:	1a 16       	cp	r1, r26
    4de8:	f0 40       	sbci	r31, 0x00	; 0
    4dea:	a2 2f       	mov	r26, r18
    4dec:	23 2f       	mov	r18, r19
    4dee:	34 2f       	mov	r19, r20
    4df0:	44 27       	eor	r20, r20
    4df2:	58 5f       	subi	r21, 0xF8	; 248
    4df4:	f3 cf       	rjmp	.-26     	; 0x4ddc <__addsf3x+0x34>
    4df6:	46 95       	lsr	r20
    4df8:	37 95       	ror	r19
    4dfa:	27 95       	ror	r18
    4dfc:	a7 95       	ror	r26
    4dfe:	f0 40       	sbci	r31, 0x00	; 0
    4e00:	53 95       	inc	r21
    4e02:	c9 f7       	brne	.-14     	; 0x4df6 <__addsf3x+0x4e>
    4e04:	7e f4       	brtc	.+30     	; 0x4e24 <__addsf3x+0x7c>
    4e06:	1f 16       	cp	r1, r31
    4e08:	ba 0b       	sbc	r27, r26
    4e0a:	62 0b       	sbc	r22, r18
    4e0c:	73 0b       	sbc	r23, r19
    4e0e:	84 0b       	sbc	r24, r20
    4e10:	ba f0       	brmi	.+46     	; 0x4e40 <__addsf3x+0x98>
    4e12:	91 50       	subi	r25, 0x01	; 1
    4e14:	a1 f0       	breq	.+40     	; 0x4e3e <__addsf3x+0x96>
    4e16:	ff 0f       	add	r31, r31
    4e18:	bb 1f       	adc	r27, r27
    4e1a:	66 1f       	adc	r22, r22
    4e1c:	77 1f       	adc	r23, r23
    4e1e:	88 1f       	adc	r24, r24
    4e20:	c2 f7       	brpl	.-16     	; 0x4e12 <__addsf3x+0x6a>
    4e22:	0e c0       	rjmp	.+28     	; 0x4e40 <__addsf3x+0x98>
    4e24:	ba 0f       	add	r27, r26
    4e26:	62 1f       	adc	r22, r18
    4e28:	73 1f       	adc	r23, r19
    4e2a:	84 1f       	adc	r24, r20
    4e2c:	48 f4       	brcc	.+18     	; 0x4e40 <__addsf3x+0x98>
    4e2e:	87 95       	ror	r24
    4e30:	77 95       	ror	r23
    4e32:	67 95       	ror	r22
    4e34:	b7 95       	ror	r27
    4e36:	f7 95       	ror	r31
    4e38:	9e 3f       	cpi	r25, 0xFE	; 254
    4e3a:	08 f0       	brcs	.+2      	; 0x4e3e <__addsf3x+0x96>
    4e3c:	b3 cf       	rjmp	.-154    	; 0x4da4 <__addsf3+0x1e>
    4e3e:	93 95       	inc	r25
    4e40:	88 0f       	add	r24, r24
    4e42:	08 f0       	brcs	.+2      	; 0x4e46 <__addsf3x+0x9e>
    4e44:	99 27       	eor	r25, r25
    4e46:	ee 0f       	add	r30, r30
    4e48:	97 95       	ror	r25
    4e4a:	87 95       	ror	r24
    4e4c:	08 95       	ret

00004e4e <__cmpsf2>:
    4e4e:	d4 d0       	rcall	.+424    	; 0x4ff8 <__fp_cmp>
    4e50:	08 f4       	brcc	.+2      	; 0x4e54 <__cmpsf2+0x6>
    4e52:	81 e0       	ldi	r24, 0x01	; 1
    4e54:	08 95       	ret

00004e56 <__divsf3>:
    4e56:	0c d0       	rcall	.+24     	; 0x4e70 <__divsf3x>
    4e58:	0a c1       	rjmp	.+532    	; 0x506e <__fp_round>
    4e5a:	02 d1       	rcall	.+516    	; 0x5060 <__fp_pscB>
    4e5c:	40 f0       	brcs	.+16     	; 0x4e6e <__divsf3+0x18>
    4e5e:	f9 d0       	rcall	.+498    	; 0x5052 <__fp_pscA>
    4e60:	30 f0       	brcs	.+12     	; 0x4e6e <__divsf3+0x18>
    4e62:	21 f4       	brne	.+8      	; 0x4e6c <__divsf3+0x16>
    4e64:	5f 3f       	cpi	r21, 0xFF	; 255
    4e66:	19 f0       	breq	.+6      	; 0x4e6e <__divsf3+0x18>
    4e68:	eb c0       	rjmp	.+470    	; 0x5040 <__fp_inf>
    4e6a:	51 11       	cpse	r21, r1
    4e6c:	34 c1       	rjmp	.+616    	; 0x50d6 <__fp_szero>
    4e6e:	ee c0       	rjmp	.+476    	; 0x504c <__fp_nan>

00004e70 <__divsf3x>:
    4e70:	0f d1       	rcall	.+542    	; 0x5090 <__fp_split3>
    4e72:	98 f3       	brcs	.-26     	; 0x4e5a <__divsf3+0x4>

00004e74 <__divsf3_pse>:
    4e74:	99 23       	and	r25, r25
    4e76:	c9 f3       	breq	.-14     	; 0x4e6a <__divsf3+0x14>
    4e78:	55 23       	and	r21, r21
    4e7a:	b1 f3       	breq	.-20     	; 0x4e68 <__divsf3+0x12>
    4e7c:	95 1b       	sub	r25, r21
    4e7e:	55 0b       	sbc	r21, r21
    4e80:	bb 27       	eor	r27, r27
    4e82:	aa 27       	eor	r26, r26
    4e84:	62 17       	cp	r22, r18
    4e86:	73 07       	cpc	r23, r19
    4e88:	84 07       	cpc	r24, r20
    4e8a:	38 f0       	brcs	.+14     	; 0x4e9a <__divsf3_pse+0x26>
    4e8c:	9f 5f       	subi	r25, 0xFF	; 255
    4e8e:	5f 4f       	sbci	r21, 0xFF	; 255
    4e90:	22 0f       	add	r18, r18
    4e92:	33 1f       	adc	r19, r19
    4e94:	44 1f       	adc	r20, r20
    4e96:	aa 1f       	adc	r26, r26
    4e98:	a9 f3       	breq	.-22     	; 0x4e84 <__divsf3_pse+0x10>
    4e9a:	33 d0       	rcall	.+102    	; 0x4f02 <__divsf3_pse+0x8e>
    4e9c:	0e 2e       	mov	r0, r30
    4e9e:	3a f0       	brmi	.+14     	; 0x4eae <__divsf3_pse+0x3a>
    4ea0:	e0 e8       	ldi	r30, 0x80	; 128
    4ea2:	30 d0       	rcall	.+96     	; 0x4f04 <__divsf3_pse+0x90>
    4ea4:	91 50       	subi	r25, 0x01	; 1
    4ea6:	50 40       	sbci	r21, 0x00	; 0
    4ea8:	e6 95       	lsr	r30
    4eaa:	00 1c       	adc	r0, r0
    4eac:	ca f7       	brpl	.-14     	; 0x4ea0 <__divsf3_pse+0x2c>
    4eae:	29 d0       	rcall	.+82     	; 0x4f02 <__divsf3_pse+0x8e>
    4eb0:	fe 2f       	mov	r31, r30
    4eb2:	27 d0       	rcall	.+78     	; 0x4f02 <__divsf3_pse+0x8e>
    4eb4:	66 0f       	add	r22, r22
    4eb6:	77 1f       	adc	r23, r23
    4eb8:	88 1f       	adc	r24, r24
    4eba:	bb 1f       	adc	r27, r27
    4ebc:	26 17       	cp	r18, r22
    4ebe:	37 07       	cpc	r19, r23
    4ec0:	48 07       	cpc	r20, r24
    4ec2:	ab 07       	cpc	r26, r27
    4ec4:	b0 e8       	ldi	r27, 0x80	; 128
    4ec6:	09 f0       	breq	.+2      	; 0x4eca <__divsf3_pse+0x56>
    4ec8:	bb 0b       	sbc	r27, r27
    4eca:	80 2d       	mov	r24, r0
    4ecc:	bf 01       	movw	r22, r30
    4ece:	ff 27       	eor	r31, r31
    4ed0:	93 58       	subi	r25, 0x83	; 131
    4ed2:	5f 4f       	sbci	r21, 0xFF	; 255
    4ed4:	2a f0       	brmi	.+10     	; 0x4ee0 <__divsf3_pse+0x6c>
    4ed6:	9e 3f       	cpi	r25, 0xFE	; 254
    4ed8:	51 05       	cpc	r21, r1
    4eda:	68 f0       	brcs	.+26     	; 0x4ef6 <__divsf3_pse+0x82>
    4edc:	b1 c0       	rjmp	.+354    	; 0x5040 <__fp_inf>
    4ede:	fb c0       	rjmp	.+502    	; 0x50d6 <__fp_szero>
    4ee0:	5f 3f       	cpi	r21, 0xFF	; 255
    4ee2:	ec f3       	brlt	.-6      	; 0x4ede <__divsf3_pse+0x6a>
    4ee4:	98 3e       	cpi	r25, 0xE8	; 232
    4ee6:	dc f3       	brlt	.-10     	; 0x4ede <__divsf3_pse+0x6a>
    4ee8:	86 95       	lsr	r24
    4eea:	77 95       	ror	r23
    4eec:	67 95       	ror	r22
    4eee:	b7 95       	ror	r27
    4ef0:	f7 95       	ror	r31
    4ef2:	9f 5f       	subi	r25, 0xFF	; 255
    4ef4:	c9 f7       	brne	.-14     	; 0x4ee8 <__divsf3_pse+0x74>
    4ef6:	88 0f       	add	r24, r24
    4ef8:	91 1d       	adc	r25, r1
    4efa:	96 95       	lsr	r25
    4efc:	87 95       	ror	r24
    4efe:	97 f9       	bld	r25, 7
    4f00:	08 95       	ret
    4f02:	e1 e0       	ldi	r30, 0x01	; 1
    4f04:	66 0f       	add	r22, r22
    4f06:	77 1f       	adc	r23, r23
    4f08:	88 1f       	adc	r24, r24
    4f0a:	bb 1f       	adc	r27, r27
    4f0c:	62 17       	cp	r22, r18
    4f0e:	73 07       	cpc	r23, r19
    4f10:	84 07       	cpc	r24, r20
    4f12:	ba 07       	cpc	r27, r26
    4f14:	20 f0       	brcs	.+8      	; 0x4f1e <__divsf3_pse+0xaa>
    4f16:	62 1b       	sub	r22, r18
    4f18:	73 0b       	sbc	r23, r19
    4f1a:	84 0b       	sbc	r24, r20
    4f1c:	ba 0b       	sbc	r27, r26
    4f1e:	ee 1f       	adc	r30, r30
    4f20:	88 f7       	brcc	.-30     	; 0x4f04 <__divsf3_pse+0x90>
    4f22:	e0 95       	com	r30
    4f24:	08 95       	ret

00004f26 <__fixunssfsi>:
    4f26:	bc d0       	rcall	.+376    	; 0x50a0 <__fp_splitA>
    4f28:	88 f0       	brcs	.+34     	; 0x4f4c <__fixunssfsi+0x26>
    4f2a:	9f 57       	subi	r25, 0x7F	; 127
    4f2c:	90 f0       	brcs	.+36     	; 0x4f52 <__fixunssfsi+0x2c>
    4f2e:	b9 2f       	mov	r27, r25
    4f30:	99 27       	eor	r25, r25
    4f32:	b7 51       	subi	r27, 0x17	; 23
    4f34:	a0 f0       	brcs	.+40     	; 0x4f5e <__fixunssfsi+0x38>
    4f36:	d1 f0       	breq	.+52     	; 0x4f6c <__fixunssfsi+0x46>
    4f38:	66 0f       	add	r22, r22
    4f3a:	77 1f       	adc	r23, r23
    4f3c:	88 1f       	adc	r24, r24
    4f3e:	99 1f       	adc	r25, r25
    4f40:	1a f0       	brmi	.+6      	; 0x4f48 <__fixunssfsi+0x22>
    4f42:	ba 95       	dec	r27
    4f44:	c9 f7       	brne	.-14     	; 0x4f38 <__fixunssfsi+0x12>
    4f46:	12 c0       	rjmp	.+36     	; 0x4f6c <__fixunssfsi+0x46>
    4f48:	b1 30       	cpi	r27, 0x01	; 1
    4f4a:	81 f0       	breq	.+32     	; 0x4f6c <__fixunssfsi+0x46>
    4f4c:	c3 d0       	rcall	.+390    	; 0x50d4 <__fp_zero>
    4f4e:	b1 e0       	ldi	r27, 0x01	; 1
    4f50:	08 95       	ret
    4f52:	c0 c0       	rjmp	.+384    	; 0x50d4 <__fp_zero>
    4f54:	67 2f       	mov	r22, r23
    4f56:	78 2f       	mov	r23, r24
    4f58:	88 27       	eor	r24, r24
    4f5a:	b8 5f       	subi	r27, 0xF8	; 248
    4f5c:	39 f0       	breq	.+14     	; 0x4f6c <__fixunssfsi+0x46>
    4f5e:	b9 3f       	cpi	r27, 0xF9	; 249
    4f60:	cc f3       	brlt	.-14     	; 0x4f54 <__fixunssfsi+0x2e>
    4f62:	86 95       	lsr	r24
    4f64:	77 95       	ror	r23
    4f66:	67 95       	ror	r22
    4f68:	b3 95       	inc	r27
    4f6a:	d9 f7       	brne	.-10     	; 0x4f62 <__fixunssfsi+0x3c>
    4f6c:	3e f4       	brtc	.+14     	; 0x4f7c <__fixunssfsi+0x56>
    4f6e:	90 95       	com	r25
    4f70:	80 95       	com	r24
    4f72:	70 95       	com	r23
    4f74:	61 95       	neg	r22
    4f76:	7f 4f       	sbci	r23, 0xFF	; 255
    4f78:	8f 4f       	sbci	r24, 0xFF	; 255
    4f7a:	9f 4f       	sbci	r25, 0xFF	; 255
    4f7c:	08 95       	ret

00004f7e <__floatunsisf>:
    4f7e:	e8 94       	clt
    4f80:	09 c0       	rjmp	.+18     	; 0x4f94 <__floatsisf+0x12>

00004f82 <__floatsisf>:
    4f82:	97 fb       	bst	r25, 7
    4f84:	3e f4       	brtc	.+14     	; 0x4f94 <__floatsisf+0x12>
    4f86:	90 95       	com	r25
    4f88:	80 95       	com	r24
    4f8a:	70 95       	com	r23
    4f8c:	61 95       	neg	r22
    4f8e:	7f 4f       	sbci	r23, 0xFF	; 255
    4f90:	8f 4f       	sbci	r24, 0xFF	; 255
    4f92:	9f 4f       	sbci	r25, 0xFF	; 255
    4f94:	99 23       	and	r25, r25
    4f96:	a9 f0       	breq	.+42     	; 0x4fc2 <__floatsisf+0x40>
    4f98:	f9 2f       	mov	r31, r25
    4f9a:	96 e9       	ldi	r25, 0x96	; 150
    4f9c:	bb 27       	eor	r27, r27
    4f9e:	93 95       	inc	r25
    4fa0:	f6 95       	lsr	r31
    4fa2:	87 95       	ror	r24
    4fa4:	77 95       	ror	r23
    4fa6:	67 95       	ror	r22
    4fa8:	b7 95       	ror	r27
    4faa:	f1 11       	cpse	r31, r1
    4fac:	f8 cf       	rjmp	.-16     	; 0x4f9e <__floatsisf+0x1c>
    4fae:	fa f4       	brpl	.+62     	; 0x4fee <__floatsisf+0x6c>
    4fb0:	bb 0f       	add	r27, r27
    4fb2:	11 f4       	brne	.+4      	; 0x4fb8 <__floatsisf+0x36>
    4fb4:	60 ff       	sbrs	r22, 0
    4fb6:	1b c0       	rjmp	.+54     	; 0x4fee <__floatsisf+0x6c>
    4fb8:	6f 5f       	subi	r22, 0xFF	; 255
    4fba:	7f 4f       	sbci	r23, 0xFF	; 255
    4fbc:	8f 4f       	sbci	r24, 0xFF	; 255
    4fbe:	9f 4f       	sbci	r25, 0xFF	; 255
    4fc0:	16 c0       	rjmp	.+44     	; 0x4fee <__floatsisf+0x6c>
    4fc2:	88 23       	and	r24, r24
    4fc4:	11 f0       	breq	.+4      	; 0x4fca <__floatsisf+0x48>
    4fc6:	96 e9       	ldi	r25, 0x96	; 150
    4fc8:	11 c0       	rjmp	.+34     	; 0x4fec <__floatsisf+0x6a>
    4fca:	77 23       	and	r23, r23
    4fcc:	21 f0       	breq	.+8      	; 0x4fd6 <__floatsisf+0x54>
    4fce:	9e e8       	ldi	r25, 0x8E	; 142
    4fd0:	87 2f       	mov	r24, r23
    4fd2:	76 2f       	mov	r23, r22
    4fd4:	05 c0       	rjmp	.+10     	; 0x4fe0 <__floatsisf+0x5e>
    4fd6:	66 23       	and	r22, r22
    4fd8:	71 f0       	breq	.+28     	; 0x4ff6 <__floatsisf+0x74>
    4fda:	96 e8       	ldi	r25, 0x86	; 134
    4fdc:	86 2f       	mov	r24, r22
    4fde:	70 e0       	ldi	r23, 0x00	; 0
    4fe0:	60 e0       	ldi	r22, 0x00	; 0
    4fe2:	2a f0       	brmi	.+10     	; 0x4fee <__floatsisf+0x6c>
    4fe4:	9a 95       	dec	r25
    4fe6:	66 0f       	add	r22, r22
    4fe8:	77 1f       	adc	r23, r23
    4fea:	88 1f       	adc	r24, r24
    4fec:	da f7       	brpl	.-10     	; 0x4fe4 <__floatsisf+0x62>
    4fee:	88 0f       	add	r24, r24
    4ff0:	96 95       	lsr	r25
    4ff2:	87 95       	ror	r24
    4ff4:	97 f9       	bld	r25, 7
    4ff6:	08 95       	ret

00004ff8 <__fp_cmp>:
    4ff8:	99 0f       	add	r25, r25
    4ffa:	00 08       	sbc	r0, r0
    4ffc:	55 0f       	add	r21, r21
    4ffe:	aa 0b       	sbc	r26, r26
    5000:	e0 e8       	ldi	r30, 0x80	; 128
    5002:	fe ef       	ldi	r31, 0xFE	; 254
    5004:	16 16       	cp	r1, r22
    5006:	17 06       	cpc	r1, r23
    5008:	e8 07       	cpc	r30, r24
    500a:	f9 07       	cpc	r31, r25
    500c:	c0 f0       	brcs	.+48     	; 0x503e <__fp_cmp+0x46>
    500e:	12 16       	cp	r1, r18
    5010:	13 06       	cpc	r1, r19
    5012:	e4 07       	cpc	r30, r20
    5014:	f5 07       	cpc	r31, r21
    5016:	98 f0       	brcs	.+38     	; 0x503e <__fp_cmp+0x46>
    5018:	62 1b       	sub	r22, r18
    501a:	73 0b       	sbc	r23, r19
    501c:	84 0b       	sbc	r24, r20
    501e:	95 0b       	sbc	r25, r21
    5020:	39 f4       	brne	.+14     	; 0x5030 <__fp_cmp+0x38>
    5022:	0a 26       	eor	r0, r26
    5024:	61 f0       	breq	.+24     	; 0x503e <__fp_cmp+0x46>
    5026:	23 2b       	or	r18, r19
    5028:	24 2b       	or	r18, r20
    502a:	25 2b       	or	r18, r21
    502c:	21 f4       	brne	.+8      	; 0x5036 <__fp_cmp+0x3e>
    502e:	08 95       	ret
    5030:	0a 26       	eor	r0, r26
    5032:	09 f4       	brne	.+2      	; 0x5036 <__fp_cmp+0x3e>
    5034:	a1 40       	sbci	r26, 0x01	; 1
    5036:	a6 95       	lsr	r26
    5038:	8f ef       	ldi	r24, 0xFF	; 255
    503a:	81 1d       	adc	r24, r1
    503c:	81 1d       	adc	r24, r1
    503e:	08 95       	ret

00005040 <__fp_inf>:
    5040:	97 f9       	bld	r25, 7
    5042:	9f 67       	ori	r25, 0x7F	; 127
    5044:	80 e8       	ldi	r24, 0x80	; 128
    5046:	70 e0       	ldi	r23, 0x00	; 0
    5048:	60 e0       	ldi	r22, 0x00	; 0
    504a:	08 95       	ret

0000504c <__fp_nan>:
    504c:	9f ef       	ldi	r25, 0xFF	; 255
    504e:	80 ec       	ldi	r24, 0xC0	; 192
    5050:	08 95       	ret

00005052 <__fp_pscA>:
    5052:	00 24       	eor	r0, r0
    5054:	0a 94       	dec	r0
    5056:	16 16       	cp	r1, r22
    5058:	17 06       	cpc	r1, r23
    505a:	18 06       	cpc	r1, r24
    505c:	09 06       	cpc	r0, r25
    505e:	08 95       	ret

00005060 <__fp_pscB>:
    5060:	00 24       	eor	r0, r0
    5062:	0a 94       	dec	r0
    5064:	12 16       	cp	r1, r18
    5066:	13 06       	cpc	r1, r19
    5068:	14 06       	cpc	r1, r20
    506a:	05 06       	cpc	r0, r21
    506c:	08 95       	ret

0000506e <__fp_round>:
    506e:	09 2e       	mov	r0, r25
    5070:	03 94       	inc	r0
    5072:	00 0c       	add	r0, r0
    5074:	11 f4       	brne	.+4      	; 0x507a <__fp_round+0xc>
    5076:	88 23       	and	r24, r24
    5078:	52 f0       	brmi	.+20     	; 0x508e <__fp_round+0x20>
    507a:	bb 0f       	add	r27, r27
    507c:	40 f4       	brcc	.+16     	; 0x508e <__fp_round+0x20>
    507e:	bf 2b       	or	r27, r31
    5080:	11 f4       	brne	.+4      	; 0x5086 <__fp_round+0x18>
    5082:	60 ff       	sbrs	r22, 0
    5084:	04 c0       	rjmp	.+8      	; 0x508e <__fp_round+0x20>
    5086:	6f 5f       	subi	r22, 0xFF	; 255
    5088:	7f 4f       	sbci	r23, 0xFF	; 255
    508a:	8f 4f       	sbci	r24, 0xFF	; 255
    508c:	9f 4f       	sbci	r25, 0xFF	; 255
    508e:	08 95       	ret

00005090 <__fp_split3>:
    5090:	57 fd       	sbrc	r21, 7
    5092:	90 58       	subi	r25, 0x80	; 128
    5094:	44 0f       	add	r20, r20
    5096:	55 1f       	adc	r21, r21
    5098:	59 f0       	breq	.+22     	; 0x50b0 <__fp_splitA+0x10>
    509a:	5f 3f       	cpi	r21, 0xFF	; 255
    509c:	71 f0       	breq	.+28     	; 0x50ba <__fp_splitA+0x1a>
    509e:	47 95       	ror	r20

000050a0 <__fp_splitA>:
    50a0:	88 0f       	add	r24, r24
    50a2:	97 fb       	bst	r25, 7
    50a4:	99 1f       	adc	r25, r25
    50a6:	61 f0       	breq	.+24     	; 0x50c0 <__fp_splitA+0x20>
    50a8:	9f 3f       	cpi	r25, 0xFF	; 255
    50aa:	79 f0       	breq	.+30     	; 0x50ca <__fp_splitA+0x2a>
    50ac:	87 95       	ror	r24
    50ae:	08 95       	ret
    50b0:	12 16       	cp	r1, r18
    50b2:	13 06       	cpc	r1, r19
    50b4:	14 06       	cpc	r1, r20
    50b6:	55 1f       	adc	r21, r21
    50b8:	f2 cf       	rjmp	.-28     	; 0x509e <__fp_split3+0xe>
    50ba:	46 95       	lsr	r20
    50bc:	f1 df       	rcall	.-30     	; 0x50a0 <__fp_splitA>
    50be:	08 c0       	rjmp	.+16     	; 0x50d0 <__fp_splitA+0x30>
    50c0:	16 16       	cp	r1, r22
    50c2:	17 06       	cpc	r1, r23
    50c4:	18 06       	cpc	r1, r24
    50c6:	99 1f       	adc	r25, r25
    50c8:	f1 cf       	rjmp	.-30     	; 0x50ac <__fp_splitA+0xc>
    50ca:	86 95       	lsr	r24
    50cc:	71 05       	cpc	r23, r1
    50ce:	61 05       	cpc	r22, r1
    50d0:	08 94       	sec
    50d2:	08 95       	ret

000050d4 <__fp_zero>:
    50d4:	e8 94       	clt

000050d6 <__fp_szero>:
    50d6:	bb 27       	eor	r27, r27
    50d8:	66 27       	eor	r22, r22
    50da:	77 27       	eor	r23, r23
    50dc:	cb 01       	movw	r24, r22
    50de:	97 f9       	bld	r25, 7
    50e0:	08 95       	ret

000050e2 <__gesf2>:
    50e2:	8a df       	rcall	.-236    	; 0x4ff8 <__fp_cmp>
    50e4:	08 f4       	brcc	.+2      	; 0x50e8 <__gesf2+0x6>
    50e6:	8f ef       	ldi	r24, 0xFF	; 255
    50e8:	08 95       	ret

000050ea <__mulsf3>:
    50ea:	0b d0       	rcall	.+22     	; 0x5102 <__mulsf3x>
    50ec:	c0 cf       	rjmp	.-128    	; 0x506e <__fp_round>
    50ee:	b1 df       	rcall	.-158    	; 0x5052 <__fp_pscA>
    50f0:	28 f0       	brcs	.+10     	; 0x50fc <__mulsf3+0x12>
    50f2:	b6 df       	rcall	.-148    	; 0x5060 <__fp_pscB>
    50f4:	18 f0       	brcs	.+6      	; 0x50fc <__mulsf3+0x12>
    50f6:	95 23       	and	r25, r21
    50f8:	09 f0       	breq	.+2      	; 0x50fc <__mulsf3+0x12>
    50fa:	a2 cf       	rjmp	.-188    	; 0x5040 <__fp_inf>
    50fc:	a7 cf       	rjmp	.-178    	; 0x504c <__fp_nan>
    50fe:	11 24       	eor	r1, r1
    5100:	ea cf       	rjmp	.-44     	; 0x50d6 <__fp_szero>

00005102 <__mulsf3x>:
    5102:	c6 df       	rcall	.-116    	; 0x5090 <__fp_split3>
    5104:	a0 f3       	brcs	.-24     	; 0x50ee <__mulsf3+0x4>

00005106 <__mulsf3_pse>:
    5106:	95 9f       	mul	r25, r21
    5108:	d1 f3       	breq	.-12     	; 0x50fe <__mulsf3+0x14>
    510a:	95 0f       	add	r25, r21
    510c:	50 e0       	ldi	r21, 0x00	; 0
    510e:	55 1f       	adc	r21, r21
    5110:	62 9f       	mul	r22, r18
    5112:	f0 01       	movw	r30, r0
    5114:	72 9f       	mul	r23, r18
    5116:	bb 27       	eor	r27, r27
    5118:	f0 0d       	add	r31, r0
    511a:	b1 1d       	adc	r27, r1
    511c:	63 9f       	mul	r22, r19
    511e:	aa 27       	eor	r26, r26
    5120:	f0 0d       	add	r31, r0
    5122:	b1 1d       	adc	r27, r1
    5124:	aa 1f       	adc	r26, r26
    5126:	64 9f       	mul	r22, r20
    5128:	66 27       	eor	r22, r22
    512a:	b0 0d       	add	r27, r0
    512c:	a1 1d       	adc	r26, r1
    512e:	66 1f       	adc	r22, r22
    5130:	82 9f       	mul	r24, r18
    5132:	22 27       	eor	r18, r18
    5134:	b0 0d       	add	r27, r0
    5136:	a1 1d       	adc	r26, r1
    5138:	62 1f       	adc	r22, r18
    513a:	73 9f       	mul	r23, r19
    513c:	b0 0d       	add	r27, r0
    513e:	a1 1d       	adc	r26, r1
    5140:	62 1f       	adc	r22, r18
    5142:	83 9f       	mul	r24, r19
    5144:	a0 0d       	add	r26, r0
    5146:	61 1d       	adc	r22, r1
    5148:	22 1f       	adc	r18, r18
    514a:	74 9f       	mul	r23, r20
    514c:	33 27       	eor	r19, r19
    514e:	a0 0d       	add	r26, r0
    5150:	61 1d       	adc	r22, r1
    5152:	23 1f       	adc	r18, r19
    5154:	84 9f       	mul	r24, r20
    5156:	60 0d       	add	r22, r0
    5158:	21 1d       	adc	r18, r1
    515a:	82 2f       	mov	r24, r18
    515c:	76 2f       	mov	r23, r22
    515e:	6a 2f       	mov	r22, r26
    5160:	11 24       	eor	r1, r1
    5162:	9f 57       	subi	r25, 0x7F	; 127
    5164:	50 40       	sbci	r21, 0x00	; 0
    5166:	8a f0       	brmi	.+34     	; 0x518a <__mulsf3_pse+0x84>
    5168:	e1 f0       	breq	.+56     	; 0x51a2 <__mulsf3_pse+0x9c>
    516a:	88 23       	and	r24, r24
    516c:	4a f0       	brmi	.+18     	; 0x5180 <__mulsf3_pse+0x7a>
    516e:	ee 0f       	add	r30, r30
    5170:	ff 1f       	adc	r31, r31
    5172:	bb 1f       	adc	r27, r27
    5174:	66 1f       	adc	r22, r22
    5176:	77 1f       	adc	r23, r23
    5178:	88 1f       	adc	r24, r24
    517a:	91 50       	subi	r25, 0x01	; 1
    517c:	50 40       	sbci	r21, 0x00	; 0
    517e:	a9 f7       	brne	.-22     	; 0x516a <__mulsf3_pse+0x64>
    5180:	9e 3f       	cpi	r25, 0xFE	; 254
    5182:	51 05       	cpc	r21, r1
    5184:	70 f0       	brcs	.+28     	; 0x51a2 <__mulsf3_pse+0x9c>
    5186:	5c cf       	rjmp	.-328    	; 0x5040 <__fp_inf>
    5188:	a6 cf       	rjmp	.-180    	; 0x50d6 <__fp_szero>
    518a:	5f 3f       	cpi	r21, 0xFF	; 255
    518c:	ec f3       	brlt	.-6      	; 0x5188 <__mulsf3_pse+0x82>
    518e:	98 3e       	cpi	r25, 0xE8	; 232
    5190:	dc f3       	brlt	.-10     	; 0x5188 <__mulsf3_pse+0x82>
    5192:	86 95       	lsr	r24
    5194:	77 95       	ror	r23
    5196:	67 95       	ror	r22
    5198:	b7 95       	ror	r27
    519a:	f7 95       	ror	r31
    519c:	e7 95       	ror	r30
    519e:	9f 5f       	subi	r25, 0xFF	; 255
    51a0:	c1 f7       	brne	.-16     	; 0x5192 <__mulsf3_pse+0x8c>
    51a2:	fe 2b       	or	r31, r30
    51a4:	88 0f       	add	r24, r24
    51a6:	91 1d       	adc	r25, r1
    51a8:	96 95       	lsr	r25
    51aa:	87 95       	ror	r24
    51ac:	97 f9       	bld	r25, 7
    51ae:	08 95       	ret

000051b0 <__mulsi3>:
    51b0:	db 01       	movw	r26, r22
    51b2:	8f 93       	push	r24
    51b4:	9f 93       	push	r25
    51b6:	35 d0       	rcall	.+106    	; 0x5222 <__muluhisi3>
    51b8:	bf 91       	pop	r27
    51ba:	af 91       	pop	r26
    51bc:	a2 9f       	mul	r26, r18
    51be:	80 0d       	add	r24, r0
    51c0:	91 1d       	adc	r25, r1
    51c2:	a3 9f       	mul	r26, r19
    51c4:	90 0d       	add	r25, r0
    51c6:	b2 9f       	mul	r27, r18
    51c8:	90 0d       	add	r25, r0
    51ca:	11 24       	eor	r1, r1
    51cc:	08 95       	ret

000051ce <__udivmodsi4>:
    51ce:	a1 e2       	ldi	r26, 0x21	; 33
    51d0:	1a 2e       	mov	r1, r26
    51d2:	aa 1b       	sub	r26, r26
    51d4:	bb 1b       	sub	r27, r27
    51d6:	fd 01       	movw	r30, r26
    51d8:	0d c0       	rjmp	.+26     	; 0x51f4 <__udivmodsi4_ep>

000051da <__udivmodsi4_loop>:
    51da:	aa 1f       	adc	r26, r26
    51dc:	bb 1f       	adc	r27, r27
    51de:	ee 1f       	adc	r30, r30
    51e0:	ff 1f       	adc	r31, r31
    51e2:	a2 17       	cp	r26, r18
    51e4:	b3 07       	cpc	r27, r19
    51e6:	e4 07       	cpc	r30, r20
    51e8:	f5 07       	cpc	r31, r21
    51ea:	20 f0       	brcs	.+8      	; 0x51f4 <__udivmodsi4_ep>
    51ec:	a2 1b       	sub	r26, r18
    51ee:	b3 0b       	sbc	r27, r19
    51f0:	e4 0b       	sbc	r30, r20
    51f2:	f5 0b       	sbc	r31, r21

000051f4 <__udivmodsi4_ep>:
    51f4:	66 1f       	adc	r22, r22
    51f6:	77 1f       	adc	r23, r23
    51f8:	88 1f       	adc	r24, r24
    51fa:	99 1f       	adc	r25, r25
    51fc:	1a 94       	dec	r1
    51fe:	69 f7       	brne	.-38     	; 0x51da <__udivmodsi4_loop>
    5200:	60 95       	com	r22
    5202:	70 95       	com	r23
    5204:	80 95       	com	r24
    5206:	90 95       	com	r25
    5208:	9b 01       	movw	r18, r22
    520a:	ac 01       	movw	r20, r24
    520c:	bd 01       	movw	r22, r26
    520e:	cf 01       	movw	r24, r30
    5210:	08 95       	ret

00005212 <__tablejump2__>:
    5212:	ee 0f       	add	r30, r30
    5214:	ff 1f       	adc	r31, r31
    5216:	88 1f       	adc	r24, r24
    5218:	8b bf       	out	0x3b, r24	; 59
    521a:	07 90       	elpm	r0, Z+
    521c:	f6 91       	elpm	r31, Z
    521e:	e0 2d       	mov	r30, r0
    5220:	19 94       	eijmp

00005222 <__muluhisi3>:
    5222:	bb d0       	rcall	.+374    	; 0x539a <__umulhisi3>
    5224:	a5 9f       	mul	r26, r21
    5226:	90 0d       	add	r25, r0
    5228:	b4 9f       	mul	r27, r20
    522a:	90 0d       	add	r25, r0
    522c:	a4 9f       	mul	r26, r20
    522e:	80 0d       	add	r24, r0
    5230:	91 1d       	adc	r25, r1
    5232:	11 24       	eor	r1, r1
    5234:	08 95       	ret

00005236 <__muldi3>:
    5236:	df 93       	push	r29
    5238:	cf 93       	push	r28
    523a:	1f 93       	push	r17
    523c:	0f 93       	push	r16
    523e:	9a 9d       	mul	r25, r10
    5240:	f0 2d       	mov	r31, r0
    5242:	21 9f       	mul	r18, r17
    5244:	f0 0d       	add	r31, r0
    5246:	8b 9d       	mul	r24, r11
    5248:	f0 0d       	add	r31, r0
    524a:	8a 9d       	mul	r24, r10
    524c:	e0 2d       	mov	r30, r0
    524e:	f1 0d       	add	r31, r1
    5250:	03 9f       	mul	r16, r19
    5252:	f0 0d       	add	r31, r0
    5254:	02 9f       	mul	r16, r18
    5256:	e0 0d       	add	r30, r0
    5258:	f1 1d       	adc	r31, r1
    525a:	4e 9d       	mul	r20, r14
    525c:	e0 0d       	add	r30, r0
    525e:	f1 1d       	adc	r31, r1
    5260:	5e 9d       	mul	r21, r14
    5262:	f0 0d       	add	r31, r0
    5264:	4f 9d       	mul	r20, r15
    5266:	f0 0d       	add	r31, r0
    5268:	7f 93       	push	r23
    526a:	6f 93       	push	r22
    526c:	bf 92       	push	r11
    526e:	af 92       	push	r10
    5270:	5f 93       	push	r21
    5272:	4f 93       	push	r20
    5274:	d5 01       	movw	r26, r10
    5276:	91 d0       	rcall	.+290    	; 0x539a <__umulhisi3>
    5278:	8b 01       	movw	r16, r22
    527a:	ac 01       	movw	r20, r24
    527c:	d7 01       	movw	r26, r14
    527e:	8d d0       	rcall	.+282    	; 0x539a <__umulhisi3>
    5280:	eb 01       	movw	r28, r22
    5282:	e8 0f       	add	r30, r24
    5284:	f9 1f       	adc	r31, r25
    5286:	d6 01       	movw	r26, r12
    5288:	1f d0       	rcall	.+62     	; 0x52c8 <__muldi3_6>
    528a:	2f 91       	pop	r18
    528c:	3f 91       	pop	r19
    528e:	d6 01       	movw	r26, r12
    5290:	84 d0       	rcall	.+264    	; 0x539a <__umulhisi3>
    5292:	c6 0f       	add	r28, r22
    5294:	d7 1f       	adc	r29, r23
    5296:	e8 1f       	adc	r30, r24
    5298:	f9 1f       	adc	r31, r25
    529a:	af 91       	pop	r26
    529c:	bf 91       	pop	r27
    529e:	14 d0       	rcall	.+40     	; 0x52c8 <__muldi3_6>
    52a0:	2f 91       	pop	r18
    52a2:	3f 91       	pop	r19
    52a4:	7a d0       	rcall	.+244    	; 0x539a <__umulhisi3>
    52a6:	c6 0f       	add	r28, r22
    52a8:	d7 1f       	adc	r29, r23
    52aa:	e8 1f       	adc	r30, r24
    52ac:	f9 1f       	adc	r31, r25
    52ae:	d6 01       	movw	r26, r12
    52b0:	74 d0       	rcall	.+232    	; 0x539a <__umulhisi3>
    52b2:	e6 0f       	add	r30, r22
    52b4:	f7 1f       	adc	r31, r23
    52b6:	98 01       	movw	r18, r16
    52b8:	be 01       	movw	r22, r28
    52ba:	cf 01       	movw	r24, r30
    52bc:	11 24       	eor	r1, r1
    52be:	0f 91       	pop	r16
    52c0:	1f 91       	pop	r17
    52c2:	cf 91       	pop	r28
    52c4:	df 91       	pop	r29
    52c6:	08 95       	ret

000052c8 <__muldi3_6>:
    52c8:	68 d0       	rcall	.+208    	; 0x539a <__umulhisi3>
    52ca:	46 0f       	add	r20, r22
    52cc:	57 1f       	adc	r21, r23
    52ce:	c8 1f       	adc	r28, r24
    52d0:	d9 1f       	adc	r29, r25
    52d2:	08 f4       	brcc	.+2      	; 0x52d6 <__muldi3_6+0xe>
    52d4:	31 96       	adiw	r30, 0x01	; 1
    52d6:	08 95       	ret

000052d8 <__ashldi3>:
    52d8:	0f 93       	push	r16
    52da:	08 30       	cpi	r16, 0x08	; 8
    52dc:	90 f0       	brcs	.+36     	; 0x5302 <__ashldi3+0x2a>
    52de:	98 2f       	mov	r25, r24
    52e0:	87 2f       	mov	r24, r23
    52e2:	76 2f       	mov	r23, r22
    52e4:	65 2f       	mov	r22, r21
    52e6:	54 2f       	mov	r21, r20
    52e8:	43 2f       	mov	r20, r19
    52ea:	32 2f       	mov	r19, r18
    52ec:	22 27       	eor	r18, r18
    52ee:	08 50       	subi	r16, 0x08	; 8
    52f0:	f4 cf       	rjmp	.-24     	; 0x52da <__ashldi3+0x2>
    52f2:	22 0f       	add	r18, r18
    52f4:	33 1f       	adc	r19, r19
    52f6:	44 1f       	adc	r20, r20
    52f8:	55 1f       	adc	r21, r21
    52fa:	66 1f       	adc	r22, r22
    52fc:	77 1f       	adc	r23, r23
    52fe:	88 1f       	adc	r24, r24
    5300:	99 1f       	adc	r25, r25
    5302:	0a 95       	dec	r16
    5304:	b2 f7       	brpl	.-20     	; 0x52f2 <__ashldi3+0x1a>
    5306:	0f 91       	pop	r16
    5308:	08 95       	ret

0000530a <__ashrdi3>:
    530a:	97 fb       	bst	r25, 7
    530c:	10 f8       	bld	r1, 0

0000530e <__lshrdi3>:
    530e:	16 94       	lsr	r1
    5310:	00 08       	sbc	r0, r0
    5312:	0f 93       	push	r16
    5314:	08 30       	cpi	r16, 0x08	; 8
    5316:	98 f0       	brcs	.+38     	; 0x533e <__lshrdi3+0x30>
    5318:	08 50       	subi	r16, 0x08	; 8
    531a:	23 2f       	mov	r18, r19
    531c:	34 2f       	mov	r19, r20
    531e:	45 2f       	mov	r20, r21
    5320:	56 2f       	mov	r21, r22
    5322:	67 2f       	mov	r22, r23
    5324:	78 2f       	mov	r23, r24
    5326:	89 2f       	mov	r24, r25
    5328:	90 2d       	mov	r25, r0
    532a:	f4 cf       	rjmp	.-24     	; 0x5314 <__lshrdi3+0x6>
    532c:	05 94       	asr	r0
    532e:	97 95       	ror	r25
    5330:	87 95       	ror	r24
    5332:	77 95       	ror	r23
    5334:	67 95       	ror	r22
    5336:	57 95       	ror	r21
    5338:	47 95       	ror	r20
    533a:	37 95       	ror	r19
    533c:	27 95       	ror	r18
    533e:	0a 95       	dec	r16
    5340:	aa f7       	brpl	.-22     	; 0x532c <__lshrdi3+0x1e>
    5342:	0f 91       	pop	r16
    5344:	08 95       	ret

00005346 <__adddi3>:
    5346:	2a 0d       	add	r18, r10
    5348:	3b 1d       	adc	r19, r11
    534a:	4c 1d       	adc	r20, r12
    534c:	5d 1d       	adc	r21, r13
    534e:	6e 1d       	adc	r22, r14
    5350:	7f 1d       	adc	r23, r15
    5352:	80 1f       	adc	r24, r16
    5354:	91 1f       	adc	r25, r17
    5356:	08 95       	ret

00005358 <__adddi3_s8>:
    5358:	00 24       	eor	r0, r0
    535a:	a7 fd       	sbrc	r26, 7
    535c:	00 94       	com	r0
    535e:	2a 0f       	add	r18, r26
    5360:	30 1d       	adc	r19, r0
    5362:	40 1d       	adc	r20, r0
    5364:	50 1d       	adc	r21, r0
    5366:	60 1d       	adc	r22, r0
    5368:	70 1d       	adc	r23, r0
    536a:	80 1d       	adc	r24, r0
    536c:	90 1d       	adc	r25, r0
    536e:	08 95       	ret

00005370 <__subdi3>:
    5370:	2a 19       	sub	r18, r10
    5372:	3b 09       	sbc	r19, r11
    5374:	4c 09       	sbc	r20, r12
    5376:	5d 09       	sbc	r21, r13
    5378:	6e 09       	sbc	r22, r14
    537a:	7f 09       	sbc	r23, r15
    537c:	80 0b       	sbc	r24, r16
    537e:	91 0b       	sbc	r25, r17
    5380:	08 95       	ret

00005382 <__cmpdi2_s8>:
    5382:	00 24       	eor	r0, r0
    5384:	a7 fd       	sbrc	r26, 7
    5386:	00 94       	com	r0
    5388:	2a 17       	cp	r18, r26
    538a:	30 05       	cpc	r19, r0
    538c:	40 05       	cpc	r20, r0
    538e:	50 05       	cpc	r21, r0
    5390:	60 05       	cpc	r22, r0
    5392:	70 05       	cpc	r23, r0
    5394:	80 05       	cpc	r24, r0
    5396:	90 05       	cpc	r25, r0
    5398:	08 95       	ret

0000539a <__umulhisi3>:
    539a:	a2 9f       	mul	r26, r18
    539c:	b0 01       	movw	r22, r0
    539e:	b3 9f       	mul	r27, r19
    53a0:	c0 01       	movw	r24, r0
    53a2:	a3 9f       	mul	r26, r19
    53a4:	70 0d       	add	r23, r0
    53a6:	81 1d       	adc	r24, r1
    53a8:	11 24       	eor	r1, r1
    53aa:	91 1d       	adc	r25, r1
    53ac:	b2 9f       	mul	r27, r18
    53ae:	70 0d       	add	r23, r0
    53b0:	81 1d       	adc	r24, r1
    53b2:	11 24       	eor	r1, r1
    53b4:	91 1d       	adc	r25, r1
    53b6:	08 95       	ret

000053b8 <memcpy_P>:
    53b8:	fb 01       	movw	r30, r22
    53ba:	dc 01       	movw	r26, r24
    53bc:	02 c0       	rjmp	.+4      	; 0x53c2 <memcpy_P+0xa>
    53be:	05 90       	lpm	r0, Z+
    53c0:	0d 92       	st	X+, r0
    53c2:	41 50       	subi	r20, 0x01	; 1
    53c4:	50 40       	sbci	r21, 0x00	; 0
    53c6:	d8 f7       	brcc	.-10     	; 0x53be <memcpy_P+0x6>
    53c8:	08 95       	ret

000053ca <memcmp>:
    53ca:	fb 01       	movw	r30, r22
    53cc:	dc 01       	movw	r26, r24
    53ce:	04 c0       	rjmp	.+8      	; 0x53d8 <memcmp+0xe>
    53d0:	8d 91       	ld	r24, X+
    53d2:	01 90       	ld	r0, Z+
    53d4:	80 19       	sub	r24, r0
    53d6:	21 f4       	brne	.+8      	; 0x53e0 <memcmp+0x16>
    53d8:	41 50       	subi	r20, 0x01	; 1
    53da:	50 40       	sbci	r21, 0x00	; 0
    53dc:	c8 f7       	brcc	.-14     	; 0x53d0 <memcmp+0x6>
    53de:	88 1b       	sub	r24, r24
    53e0:	99 0b       	sbc	r25, r25
    53e2:	08 95       	ret

000053e4 <strncpy>:
    53e4:	fb 01       	movw	r30, r22
    53e6:	dc 01       	movw	r26, r24
    53e8:	41 50       	subi	r20, 0x01	; 1
    53ea:	50 40       	sbci	r21, 0x00	; 0
    53ec:	48 f0       	brcs	.+18     	; 0x5400 <strncpy+0x1c>
    53ee:	01 90       	ld	r0, Z+
    53f0:	0d 92       	st	X+, r0
    53f2:	00 20       	and	r0, r0
    53f4:	c9 f7       	brne	.-14     	; 0x53e8 <strncpy+0x4>
    53f6:	01 c0       	rjmp	.+2      	; 0x53fa <strncpy+0x16>
    53f8:	1d 92       	st	X+, r1
    53fa:	41 50       	subi	r20, 0x01	; 1
    53fc:	50 40       	sbci	r21, 0x00	; 0
    53fe:	e0 f7       	brcc	.-8      	; 0x53f8 <strncpy+0x14>
    5400:	08 95       	ret

00005402 <_exit>:
    5402:	f8 94       	cli

00005404 <__stop_program>:
    5404:	ff cf       	rjmp	.-2      	; 0x5404 <__stop_program>
