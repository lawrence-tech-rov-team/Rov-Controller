
RovController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f6  00800200  00002d90  00002e24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002d90  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000061e  008002f6  008002f6  00002f1a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002f1a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002f4c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000848  00000000  00000000  00002f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00013b9a  00000000  00000000  000037d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004a68  00000000  00000000  0001736e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000051b5  00000000  00000000  0001bdd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000199c  00000000  00000000  00020f8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005c2c  00000000  00000000  00022928  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008b49  00000000  00000000  00028554  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007c0  00000000  00000000  0003109d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4c c1       	rjmp	.+664    	; 0x29a <__ctors_end>
       2:	00 00       	nop
       4:	7b c1       	rjmp	.+758    	; 0x2fc <__bad_interrupt>
       6:	00 00       	nop
       8:	79 c1       	rjmp	.+754    	; 0x2fc <__bad_interrupt>
       a:	00 00       	nop
       c:	77 c1       	rjmp	.+750    	; 0x2fc <__bad_interrupt>
       e:	00 00       	nop
      10:	75 c1       	rjmp	.+746    	; 0x2fc <__bad_interrupt>
      12:	00 00       	nop
      14:	73 c1       	rjmp	.+742    	; 0x2fc <__bad_interrupt>
      16:	00 00       	nop
      18:	71 c1       	rjmp	.+738    	; 0x2fc <__bad_interrupt>
      1a:	00 00       	nop
      1c:	6f c1       	rjmp	.+734    	; 0x2fc <__bad_interrupt>
      1e:	00 00       	nop
      20:	6d c1       	rjmp	.+730    	; 0x2fc <__bad_interrupt>
      22:	00 00       	nop
      24:	6b c1       	rjmp	.+726    	; 0x2fc <__bad_interrupt>
      26:	00 00       	nop
      28:	69 c1       	rjmp	.+722    	; 0x2fc <__bad_interrupt>
      2a:	00 00       	nop
      2c:	67 c1       	rjmp	.+718    	; 0x2fc <__bad_interrupt>
      2e:	00 00       	nop
      30:	65 c1       	rjmp	.+714    	; 0x2fc <__bad_interrupt>
      32:	00 00       	nop
      34:	63 c1       	rjmp	.+710    	; 0x2fc <__bad_interrupt>
      36:	00 00       	nop
      38:	61 c1       	rjmp	.+706    	; 0x2fc <__bad_interrupt>
      3a:	00 00       	nop
      3c:	5f c1       	rjmp	.+702    	; 0x2fc <__bad_interrupt>
      3e:	00 00       	nop
      40:	5d c1       	rjmp	.+698    	; 0x2fc <__bad_interrupt>
      42:	00 00       	nop
      44:	5b c1       	rjmp	.+694    	; 0x2fc <__bad_interrupt>
      46:	00 00       	nop
      48:	59 c1       	rjmp	.+690    	; 0x2fc <__bad_interrupt>
      4a:	00 00       	nop
      4c:	57 c1       	rjmp	.+686    	; 0x2fc <__bad_interrupt>
      4e:	00 00       	nop
      50:	55 c1       	rjmp	.+682    	; 0x2fc <__bad_interrupt>
      52:	00 00       	nop
      54:	53 c1       	rjmp	.+678    	; 0x2fc <__bad_interrupt>
      56:	00 00       	nop
      58:	51 c1       	rjmp	.+674    	; 0x2fc <__bad_interrupt>
      5a:	00 00       	nop
      5c:	4f c1       	rjmp	.+670    	; 0x2fc <__bad_interrupt>
      5e:	00 00       	nop
      60:	4d c1       	rjmp	.+666    	; 0x2fc <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 7c 0d 	jmp	0x1af8	; 0x1af8 <__vector_25>
      68:	0c 94 b8 0d 	jmp	0x1b70	; 0x1b70 <__vector_26>
      6c:	47 c1       	rjmp	.+654    	; 0x2fc <__bad_interrupt>
      6e:	00 00       	nop
      70:	45 c1       	rjmp	.+650    	; 0x2fc <__bad_interrupt>
      72:	00 00       	nop
      74:	43 c1       	rjmp	.+646    	; 0x2fc <__bad_interrupt>
      76:	00 00       	nop
      78:	41 c1       	rjmp	.+642    	; 0x2fc <__bad_interrupt>
      7a:	00 00       	nop
      7c:	3f c1       	rjmp	.+638    	; 0x2fc <__bad_interrupt>
      7e:	00 00       	nop
      80:	3d c1       	rjmp	.+634    	; 0x2fc <__bad_interrupt>
      82:	00 00       	nop
      84:	3b c1       	rjmp	.+630    	; 0x2fc <__bad_interrupt>
      86:	00 00       	nop
      88:	39 c1       	rjmp	.+626    	; 0x2fc <__bad_interrupt>
      8a:	00 00       	nop
      8c:	37 c1       	rjmp	.+622    	; 0x2fc <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 04 0e 	jmp	0x1c08	; 0x1c08 <__vector_36>
      94:	0c 94 40 0e 	jmp	0x1c80	; 0x1c80 <__vector_37>
      98:	31 c1       	rjmp	.+610    	; 0x2fc <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 af 10 	jmp	0x215e	; 0x215e <__vector_39>
      a0:	2d c1       	rjmp	.+602    	; 0x2fc <__bad_interrupt>
      a2:	00 00       	nop
      a4:	2b c1       	rjmp	.+598    	; 0x2fc <__bad_interrupt>
      a6:	00 00       	nop
      a8:	29 c1       	rjmp	.+594    	; 0x2fc <__bad_interrupt>
      aa:	00 00       	nop
      ac:	27 c1       	rjmp	.+590    	; 0x2fc <__bad_interrupt>
      ae:	00 00       	nop
      b0:	25 c1       	rjmp	.+586    	; 0x2fc <__bad_interrupt>
      b2:	00 00       	nop
      b4:	23 c1       	rjmp	.+582    	; 0x2fc <__bad_interrupt>
      b6:	00 00       	nop
      b8:	21 c1       	rjmp	.+578    	; 0x2fc <__bad_interrupt>
      ba:	00 00       	nop
      bc:	1f c1       	rjmp	.+574    	; 0x2fc <__bad_interrupt>
      be:	00 00       	nop
      c0:	1d c1       	rjmp	.+570    	; 0x2fc <__bad_interrupt>
      c2:	00 00       	nop
      c4:	1b c1       	rjmp	.+566    	; 0x2fc <__bad_interrupt>
      c6:	00 00       	nop
      c8:	19 c1       	rjmp	.+562    	; 0x2fc <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 8c 0e 	jmp	0x1d18	; 0x1d18 <__vector_51>
      d0:	0c 94 c8 0e 	jmp	0x1d90	; 0x1d90 <__vector_52>
      d4:	13 c1       	rjmp	.+550    	; 0x2fc <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 14 0f 	jmp	0x1e28	; 0x1e28 <__vector_54>
      dc:	0c 94 50 0f 	jmp	0x1ea0	; 0x1ea0 <__vector_55>
      e0:	0d c1       	rjmp	.+538    	; 0x2fc <__bad_interrupt>
      e2:	00 00       	nop
      e4:	b5 11       	cpse	r27, r5
      e6:	b8 11       	cpse	r27, r8
      e8:	b8 11       	cpse	r27, r8
      ea:	b8 11       	cpse	r27, r8
      ec:	b8 11       	cpse	r27, r8
      ee:	b8 11       	cpse	r27, r8
      f0:	b8 11       	cpse	r27, r8
      f2:	b8 11       	cpse	r27, r8
      f4:	d0 10       	cpse	r13, r0
      f6:	b8 11       	cpse	r27, r8
      f8:	b8 11       	cpse	r27, r8
      fa:	b8 11       	cpse	r27, r8
      fc:	b8 11       	cpse	r27, r8
      fe:	b8 11       	cpse	r27, r8
     100:	b8 11       	cpse	r27, r8
     102:	b8 11       	cpse	r27, r8
     104:	d0 10       	cpse	r13, r0
     106:	b8 11       	cpse	r27, r8
     108:	b8 11       	cpse	r27, r8
     10a:	b8 11       	cpse	r27, r8
     10c:	b8 11       	cpse	r27, r8
     10e:	b8 11       	cpse	r27, r8
     110:	b8 11       	cpse	r27, r8
     112:	b8 11       	cpse	r27, r8
     114:	d8 10       	cpse	r13, r8
     116:	b8 11       	cpse	r27, r8
     118:	b8 11       	cpse	r27, r8
     11a:	b8 11       	cpse	r27, r8
     11c:	b8 11       	cpse	r27, r8
     11e:	b8 11       	cpse	r27, r8
     120:	b8 11       	cpse	r27, r8
     122:	b8 11       	cpse	r27, r8
     124:	fd 10       	cpse	r15, r13
     126:	b8 11       	cpse	r27, r8
     128:	b8 11       	cpse	r27, r8
     12a:	b8 11       	cpse	r27, r8
     12c:	b8 11       	cpse	r27, r8
     12e:	b8 11       	cpse	r27, r8
     130:	b8 11       	cpse	r27, r8
     132:	b8 11       	cpse	r27, r8
     134:	d8 10       	cpse	r13, r8
     136:	b8 11       	cpse	r27, r8
     138:	b8 11       	cpse	r27, r8
     13a:	b8 11       	cpse	r27, r8
     13c:	b8 11       	cpse	r27, r8
     13e:	b8 11       	cpse	r27, r8
     140:	b8 11       	cpse	r27, r8
     142:	b8 11       	cpse	r27, r8
     144:	02 11       	cpse	r16, r2
     146:	b8 11       	cpse	r27, r8
     148:	b8 11       	cpse	r27, r8
     14a:	b8 11       	cpse	r27, r8
     14c:	b8 11       	cpse	r27, r8
     14e:	b8 11       	cpse	r27, r8
     150:	b8 11       	cpse	r27, r8
     152:	b8 11       	cpse	r27, r8
     154:	07 11       	cpse	r16, r7
     156:	b8 11       	cpse	r27, r8
     158:	b8 11       	cpse	r27, r8
     15a:	b8 11       	cpse	r27, r8
     15c:	b8 11       	cpse	r27, r8
     15e:	b8 11       	cpse	r27, r8
     160:	b8 11       	cpse	r27, r8
     162:	b8 11       	cpse	r27, r8
     164:	18 11       	cpse	r17, r8
     166:	b8 11       	cpse	r27, r8
     168:	b8 11       	cpse	r27, r8
     16a:	b8 11       	cpse	r27, r8
     16c:	b8 11       	cpse	r27, r8
     16e:	b8 11       	cpse	r27, r8
     170:	b8 11       	cpse	r27, r8
     172:	b8 11       	cpse	r27, r8
     174:	41 11       	cpse	r20, r1
     176:	b8 11       	cpse	r27, r8
     178:	b8 11       	cpse	r27, r8
     17a:	b8 11       	cpse	r27, r8
     17c:	b8 11       	cpse	r27, r8
     17e:	b8 11       	cpse	r27, r8
     180:	b8 11       	cpse	r27, r8
     182:	b8 11       	cpse	r27, r8
     184:	0c 11       	cpse	r16, r12
     186:	b8 11       	cpse	r27, r8
     188:	b8 11       	cpse	r27, r8
     18a:	b8 11       	cpse	r27, r8
     18c:	b8 11       	cpse	r27, r8
     18e:	b8 11       	cpse	r27, r8
     190:	b8 11       	cpse	r27, r8
     192:	b8 11       	cpse	r27, r8
     194:	26 11       	cpse	r18, r6
     196:	b8 11       	cpse	r27, r8
     198:	b8 11       	cpse	r27, r8
     19a:	b8 11       	cpse	r27, r8
     19c:	b8 11       	cpse	r27, r8
     19e:	b8 11       	cpse	r27, r8
     1a0:	b8 11       	cpse	r27, r8
     1a2:	b8 11       	cpse	r27, r8
     1a4:	43 11       	cpse	r20, r3
     1a6:	b8 11       	cpse	r27, r8
     1a8:	b8 11       	cpse	r27, r8
     1aa:	b8 11       	cpse	r27, r8
     1ac:	b8 11       	cpse	r27, r8
     1ae:	b8 11       	cpse	r27, r8
     1b0:	b8 11       	cpse	r27, r8
     1b2:	b8 11       	cpse	r27, r8
     1b4:	43 11       	cpse	r20, r3
     1b6:	b8 11       	cpse	r27, r8
     1b8:	b8 11       	cpse	r27, r8
     1ba:	b8 11       	cpse	r27, r8
     1bc:	b8 11       	cpse	r27, r8
     1be:	b8 11       	cpse	r27, r8
     1c0:	b8 11       	cpse	r27, r8
     1c2:	b8 11       	cpse	r27, r8
     1c4:	43 11       	cpse	r20, r3
     1c6:	b8 11       	cpse	r27, r8
     1c8:	b8 11       	cpse	r27, r8
     1ca:	b8 11       	cpse	r27, r8
     1cc:	b8 11       	cpse	r27, r8
     1ce:	b8 11       	cpse	r27, r8
     1d0:	b8 11       	cpse	r27, r8
     1d2:	b8 11       	cpse	r27, r8
     1d4:	43 11       	cpse	r20, r3
     1d6:	b8 11       	cpse	r27, r8
     1d8:	b8 11       	cpse	r27, r8
     1da:	b8 11       	cpse	r27, r8
     1dc:	b8 11       	cpse	r27, r8
     1de:	b8 11       	cpse	r27, r8
     1e0:	b8 11       	cpse	r27, r8
     1e2:	b8 11       	cpse	r27, r8
     1e4:	4c 11       	cpse	r20, r12
     1e6:	b8 11       	cpse	r27, r8
     1e8:	b8 11       	cpse	r27, r8
     1ea:	b8 11       	cpse	r27, r8
     1ec:	b8 11       	cpse	r27, r8
     1ee:	b8 11       	cpse	r27, r8
     1f0:	b8 11       	cpse	r27, r8
     1f2:	b8 11       	cpse	r27, r8
     1f4:	7c 11       	cpse	r23, r12
     1f6:	b8 11       	cpse	r27, r8
     1f8:	b8 11       	cpse	r27, r8
     1fa:	b8 11       	cpse	r27, r8
     1fc:	b8 11       	cpse	r27, r8
     1fe:	b8 11       	cpse	r27, r8
     200:	b8 11       	cpse	r27, r8
     202:	b8 11       	cpse	r27, r8
     204:	4c 11       	cpse	r20, r12
     206:	b8 11       	cpse	r27, r8
     208:	b8 11       	cpse	r27, r8
     20a:	b8 11       	cpse	r27, r8
     20c:	b8 11       	cpse	r27, r8
     20e:	b8 11       	cpse	r27, r8
     210:	b8 11       	cpse	r27, r8
     212:	b8 11       	cpse	r27, r8
     214:	7c 11       	cpse	r23, r12
     216:	b8 11       	cpse	r27, r8
     218:	b8 11       	cpse	r27, r8
     21a:	b8 11       	cpse	r27, r8
     21c:	b8 11       	cpse	r27, r8
     21e:	b8 11       	cpse	r27, r8
     220:	b8 11       	cpse	r27, r8
     222:	b8 11       	cpse	r27, r8
     224:	64 11       	cpse	r22, r4
     226:	b8 11       	cpse	r27, r8
     228:	b8 11       	cpse	r27, r8
     22a:	b8 11       	cpse	r27, r8
     22c:	b8 11       	cpse	r27, r8
     22e:	b8 11       	cpse	r27, r8
     230:	b8 11       	cpse	r27, r8
     232:	b8 11       	cpse	r27, r8
     234:	80 11       	cpse	r24, r0
     236:	b8 11       	cpse	r27, r8
     238:	b8 11       	cpse	r27, r8
     23a:	b8 11       	cpse	r27, r8
     23c:	b8 11       	cpse	r27, r8
     23e:	b8 11       	cpse	r27, r8
     240:	b8 11       	cpse	r27, r8
     242:	b8 11       	cpse	r27, r8
     244:	80 11       	cpse	r24, r0
     246:	b8 11       	cpse	r27, r8
     248:	b8 11       	cpse	r27, r8
     24a:	b8 11       	cpse	r27, r8
     24c:	b8 11       	cpse	r27, r8
     24e:	b8 11       	cpse	r27, r8
     250:	b8 11       	cpse	r27, r8
     252:	b8 11       	cpse	r27, r8
     254:	95 11       	cpse	r25, r5
     256:	b8 11       	cpse	r27, r8
     258:	b8 11       	cpse	r27, r8
     25a:	b8 11       	cpse	r27, r8
     25c:	b8 11       	cpse	r27, r8
     25e:	b8 11       	cpse	r27, r8
     260:	b8 11       	cpse	r27, r8
     262:	b8 11       	cpse	r27, r8
     264:	af 11       	cpse	r26, r15
     266:	b8 11       	cpse	r27, r8
     268:	b8 11       	cpse	r27, r8
     26a:	b8 11       	cpse	r27, r8
     26c:	b8 11       	cpse	r27, r8
     26e:	b8 11       	cpse	r27, r8
     270:	b8 11       	cpse	r27, r8
     272:	b8 11       	cpse	r27, r8
     274:	af 11       	cpse	r26, r15

00000276 <__trampolines_end>:
     276:	45 00       	.word	0x0045	; ????
     278:	00 82       	st	Z, r0
     27a:	00 00       	nop
     27c:	40 00       	.word	0x0040	; ????
     27e:	20 00       	Address 0x0000027e is out of bounds.
.word	0xffff	; ????

0000027f <_ZL9arpreqhdr>:
     27f:	00 01 08 00 06 04 00 01 00                          .........

00000288 <__ctors_start>:
     288:	30 05       	cpc	r19, r0
     28a:	e1 0d       	add	r30, r1
     28c:	69 0e       	add	r6, r25
     28e:	f1 0e       	add	r15, r17
     290:	79 0f       	add	r23, r25
     292:	1f 13       	cpse	r17, r31
     294:	94 13       	cpse	r25, r20
     296:	a5 14       	cp	r10, r5
     298:	ad 14       	cp	r10, r13

0000029a <__ctors_end>:
     29a:	11 24       	eor	r1, r1
     29c:	1f be       	out	0x3f, r1	; 63
     29e:	cf ef       	ldi	r28, 0xFF	; 255
     2a0:	d1 e2       	ldi	r29, 0x21	; 33
     2a2:	de bf       	out	0x3e, r29	; 62
     2a4:	cd bf       	out	0x3d, r28	; 61
     2a6:	00 e0       	ldi	r16, 0x00	; 0
     2a8:	0c bf       	out	0x3c, r16	; 60

000002aa <__do_copy_data>:
     2aa:	12 e0       	ldi	r17, 0x02	; 2
     2ac:	a0 e0       	ldi	r26, 0x00	; 0
     2ae:	b2 e0       	ldi	r27, 0x02	; 2
     2b0:	e0 e9       	ldi	r30, 0x90	; 144
     2b2:	fd e2       	ldi	r31, 0x2D	; 45
     2b4:	00 e0       	ldi	r16, 0x00	; 0
     2b6:	0b bf       	out	0x3b, r16	; 59
     2b8:	02 c0       	rjmp	.+4      	; 0x2be <__do_copy_data+0x14>
     2ba:	07 90       	elpm	r0, Z+
     2bc:	0d 92       	st	X+, r0
     2be:	a6 3f       	cpi	r26, 0xF6	; 246
     2c0:	b1 07       	cpc	r27, r17
     2c2:	d9 f7       	brne	.-10     	; 0x2ba <__do_copy_data+0x10>

000002c4 <__do_clear_bss>:
     2c4:	29 e0       	ldi	r18, 0x09	; 9
     2c6:	a6 ef       	ldi	r26, 0xF6	; 246
     2c8:	b2 e0       	ldi	r27, 0x02	; 2
     2ca:	01 c0       	rjmp	.+2      	; 0x2ce <.do_clear_bss_start>

000002cc <.do_clear_bss_loop>:
     2cc:	1d 92       	st	X+, r1

000002ce <.do_clear_bss_start>:
     2ce:	a4 31       	cpi	r26, 0x14	; 20
     2d0:	b2 07       	cpc	r27, r18
     2d2:	e1 f7       	brne	.-8      	; 0x2cc <.do_clear_bss_loop>

000002d4 <__do_global_ctors>:
     2d4:	11 e0       	ldi	r17, 0x01	; 1
     2d6:	cd e4       	ldi	r28, 0x4D	; 77
     2d8:	d1 e0       	ldi	r29, 0x01	; 1
     2da:	00 e0       	ldi	r16, 0x00	; 0
     2dc:	06 c0       	rjmp	.+12     	; 0x2ea <__do_global_ctors+0x16>
     2de:	21 97       	sbiw	r28, 0x01	; 1
     2e0:	01 09       	sbc	r16, r1
     2e2:	80 2f       	mov	r24, r16
     2e4:	fe 01       	movw	r30, r28
     2e6:	0e 94 99 16 	call	0x2d32	; 0x2d32 <__tablejump2__>
     2ea:	c4 34       	cpi	r28, 0x44	; 68
     2ec:	d1 07       	cpc	r29, r17
     2ee:	80 e0       	ldi	r24, 0x00	; 0
     2f0:	08 07       	cpc	r16, r24
     2f2:	a9 f7       	brne	.-22     	; 0x2de <__do_global_ctors+0xa>
     2f4:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <main>
     2f8:	0c 94 c6 16 	jmp	0x2d8c	; 0x2d8c <_exit>

000002fc <__bad_interrupt>:
     2fc:	81 ce       	rjmp	.-766    	; 0x0 <__vectors>

000002fe <_ZN15Adafruit_Sensor15enableAutoRangeEb>:

    setMode(lastMode);
    return true;
  }
  return false;
}
     2fe:	08 95       	ret

00000300 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>:
     300:	0f 93       	push	r16
     302:	1f 93       	push	r17
     304:	cf 93       	push	r28
     306:	df 93       	push	r29
     308:	8c 01       	movw	r16, r24
     30a:	eb 01       	movw	r28, r22
     30c:	88 e2       	ldi	r24, 0x28	; 40
     30e:	fb 01       	movw	r30, r22
     310:	11 92       	st	Z+, r1
     312:	8a 95       	dec	r24
     314:	e9 f7       	brne	.-6      	; 0x310 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x10>
     316:	4b e0       	ldi	r20, 0x0B	; 11
     318:	50 e0       	ldi	r21, 0x00	; 0
     31a:	64 e1       	ldi	r22, 0x14	; 20
     31c:	72 e0       	ldi	r23, 0x02	; 2
     31e:	ce 01       	movw	r24, r28
     320:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <strncpy>
     324:	1b 86       	std	Y+11, r1	; 0x0b
     326:	81 e0       	ldi	r24, 0x01	; 1
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	a0 e0       	ldi	r26, 0x00	; 0
     32c:	b0 e0       	ldi	r27, 0x00	; 0
     32e:	8c 87       	std	Y+12, r24	; 0x0c
     330:	9d 87       	std	Y+13, r25	; 0x0d
     332:	ae 87       	std	Y+14, r26	; 0x0e
     334:	bf 87       	std	Y+15, r27	; 0x0f
     336:	f8 01       	movw	r30, r16
     338:	86 81       	ldd	r24, Z+6	; 0x06
     33a:	97 81       	ldd	r25, Z+7	; 0x07
     33c:	a0 85       	ldd	r26, Z+8	; 0x08
     33e:	b1 85       	ldd	r27, Z+9	; 0x09
     340:	88 8b       	std	Y+16, r24	; 0x10
     342:	99 8b       	std	Y+17, r25	; 0x11
     344:	aa 8b       	std	Y+18, r26	; 0x12
     346:	bb 8b       	std	Y+19, r27	; 0x13
     348:	83 e0       	ldi	r24, 0x03	; 3
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	a0 e0       	ldi	r26, 0x00	; 0
     34e:	b0 e0       	ldi	r27, 0x00	; 0
     350:	8c 8b       	std	Y+20, r24	; 0x14
     352:	9d 8b       	std	Y+21, r25	; 0x15
     354:	ae 8b       	std	Y+22, r26	; 0x16
     356:	bf 8b       	std	Y+23, r27	; 0x17
     358:	1c a2       	std	Y+36, r1	; 0x24
     35a:	1d a2       	std	Y+37, r1	; 0x25
     35c:	1e a2       	std	Y+38, r1	; 0x26
     35e:	1f a2       	std	Y+39, r1	; 0x27
     360:	18 8e       	std	Y+24, r1	; 0x18
     362:	19 8e       	std	Y+25, r1	; 0x19
     364:	1a 8e       	std	Y+26, r1	; 0x1a
     366:	1b 8e       	std	Y+27, r1	; 0x1b
     368:	1c 8e       	std	Y+28, r1	; 0x1c
     36a:	1d 8e       	std	Y+29, r1	; 0x1d
     36c:	1e 8e       	std	Y+30, r1	; 0x1e
     36e:	1f 8e       	std	Y+31, r1	; 0x1f
     370:	8a e0       	ldi	r24, 0x0A	; 10
     372:	97 ed       	ldi	r25, 0xD7	; 215
     374:	a3 e2       	ldi	r26, 0x23	; 35
     376:	bc e3       	ldi	r27, 0x3C	; 60
     378:	88 a3       	std	Y+32, r24	; 0x20
     37a:	99 a3       	std	Y+33, r25	; 0x21
     37c:	aa a3       	std	Y+34, r26	; 0x22
     37e:	bb a3       	std	Y+35, r27	; 0x23
     380:	df 91       	pop	r29
     382:	cf 91       	pop	r28
     384:	1f 91       	pop	r17
     386:	0f 91       	pop	r16
     388:	08 95       	ret

0000038a <_ZN15Adafruit_BNO055C1ElhP7TwoWire>:
     38a:	0f 93       	push	r16
     38c:	1f 93       	push	r17
     38e:	fc 01       	movw	r30, r24
     390:	8f e1       	ldi	r24, 0x1F	; 31
     392:	92 e0       	ldi	r25, 0x02	; 2
     394:	91 83       	std	Z+1, r25	; 0x01
     396:	80 83       	st	Z, r24
     398:	46 83       	std	Z+6, r20	; 0x06
     39a:	57 83       	std	Z+7, r21	; 0x07
     39c:	60 87       	std	Z+8, r22	; 0x08
     39e:	71 87       	std	Z+9, r23	; 0x09
     3a0:	23 83       	std	Z+3, r18	; 0x03
     3a2:	15 83       	std	Z+5, r17	; 0x05
     3a4:	04 83       	std	Z+4, r16	; 0x04
     3a6:	1f 91       	pop	r17
     3a8:	0f 91       	pop	r16
     3aa:	08 95       	ret

000003ac <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>:
     3ac:	0f 93       	push	r16
     3ae:	1f 93       	push	r17
     3b0:	cf 93       	push	r28
     3b2:	df 93       	push	r29
     3b4:	ec 01       	movw	r28, r24
     3b6:	06 2f       	mov	r16, r22
     3b8:	14 2f       	mov	r17, r20
     3ba:	6b 81       	ldd	r22, Y+3	; 0x03
     3bc:	8c 81       	ldd	r24, Y+4	; 0x04
     3be:	9d 81       	ldd	r25, Y+5	; 0x05
     3c0:	0e 94 98 12 	call	0x2530	; 0x2530 <_ZN7TwoWire17beginTransmissionEh>
     3c4:	8c 81       	ldd	r24, Y+4	; 0x04
     3c6:	9d 81       	ldd	r25, Y+5	; 0x05
     3c8:	dc 01       	movw	r26, r24
     3ca:	ed 91       	ld	r30, X+
     3cc:	fc 91       	ld	r31, X
     3ce:	01 90       	ld	r0, Z+
     3d0:	f0 81       	ld	r31, Z
     3d2:	e0 2d       	mov	r30, r0
     3d4:	60 2f       	mov	r22, r16
     3d6:	19 95       	eicall
     3d8:	8c 81       	ldd	r24, Y+4	; 0x04
     3da:	9d 81       	ldd	r25, Y+5	; 0x05
     3dc:	dc 01       	movw	r26, r24
     3de:	ed 91       	ld	r30, X+
     3e0:	fc 91       	ld	r31, X
     3e2:	01 90       	ld	r0, Z+
     3e4:	f0 81       	ld	r31, Z
     3e6:	e0 2d       	mov	r30, r0
     3e8:	61 2f       	mov	r22, r17
     3ea:	19 95       	eicall
     3ec:	8c 81       	ldd	r24, Y+4	; 0x04
     3ee:	9d 81       	ldd	r25, Y+5	; 0x05
     3f0:	0e 94 1c 13 	call	0x2638	; 0x2638 <_ZN7TwoWire15endTransmissionEv>
     3f4:	81 e0       	ldi	r24, 0x01	; 1
     3f6:	df 91       	pop	r29
     3f8:	cf 91       	pop	r28
     3fa:	1f 91       	pop	r17
     3fc:	0f 91       	pop	r16
     3fe:	08 95       	ret

00000400 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>:
     400:	46 2f       	mov	r20, r22
     402:	fc 01       	movw	r30, r24
     404:	62 87       	std	Z+10, r22	; 0x0a
     406:	6d e3       	ldi	r22, 0x3D	; 61
     408:	d1 df       	rcall	.-94     	; 0x3ac <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     40a:	ff ef       	ldi	r31, 0xFF	; 255
     40c:	26 e7       	ldi	r18, 0x76	; 118
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	f1 50       	subi	r31, 0x01	; 1
     412:	20 40       	sbci	r18, 0x00	; 0
     414:	80 40       	sbci	r24, 0x00	; 0
     416:	e1 f7       	brne	.-8      	; 0x410 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE+0x10>
     418:	00 c0       	rjmp	.+0      	; 0x41a <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE+0x1a>
     41a:	00 00       	nop
     41c:	08 95       	ret

0000041e <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>:
     41e:	1f 93       	push	r17
     420:	cf 93       	push	r28
     422:	df 93       	push	r29
     424:	ec 01       	movw	r28, r24
     426:	16 2f       	mov	r17, r22
     428:	6b 81       	ldd	r22, Y+3	; 0x03
     42a:	8c 81       	ldd	r24, Y+4	; 0x04
     42c:	9d 81       	ldd	r25, Y+5	; 0x05
     42e:	0e 94 98 12 	call	0x2530	; 0x2530 <_ZN7TwoWire17beginTransmissionEh>
     432:	8c 81       	ldd	r24, Y+4	; 0x04
     434:	9d 81       	ldd	r25, Y+5	; 0x05
     436:	dc 01       	movw	r26, r24
     438:	ed 91       	ld	r30, X+
     43a:	fc 91       	ld	r31, X
     43c:	01 90       	ld	r0, Z+
     43e:	f0 81       	ld	r31, Z
     440:	e0 2d       	mov	r30, r0
     442:	61 2f       	mov	r22, r17
     444:	19 95       	eicall
     446:	8c 81       	ldd	r24, Y+4	; 0x04
     448:	9d 81       	ldd	r25, Y+5	; 0x05
     44a:	0e 94 1c 13 	call	0x2638	; 0x2638 <_ZN7TwoWire15endTransmissionEv>
     44e:	41 e0       	ldi	r20, 0x01	; 1
     450:	6b 81       	ldd	r22, Y+3	; 0x03
     452:	8c 81       	ldd	r24, Y+4	; 0x04
     454:	9d 81       	ldd	r25, Y+5	; 0x05
     456:	0e 94 19 13 	call	0x2632	; 0x2632 <_ZN7TwoWire11requestFromEhh>
     45a:	8c 81       	ldd	r24, Y+4	; 0x04
     45c:	9d 81       	ldd	r25, Y+5	; 0x05
     45e:	dc 01       	movw	r26, r24
     460:	ed 91       	ld	r30, X+
     462:	fc 91       	ld	r31, X
     464:	02 84       	ldd	r0, Z+10	; 0x0a
     466:	f3 85       	ldd	r31, Z+11	; 0x0b
     468:	e0 2d       	mov	r30, r0
     46a:	19 95       	eicall
     46c:	df 91       	pop	r29
     46e:	cf 91       	pop	r28
     470:	1f 91       	pop	r17
     472:	08 95       	ret

00000474 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>:
     474:	1f 93       	push	r17
     476:	cf 93       	push	r28
     478:	df 93       	push	r29
     47a:	ec 01       	movw	r28, r24
     47c:	16 2f       	mov	r17, r22
     47e:	8c 81       	ldd	r24, Y+4	; 0x04
     480:	9d 81       	ldd	r25, Y+5	; 0x05
     482:	0e 94 88 12 	call	0x2510	; 0x2510 <_ZN7TwoWire5beginEv>
     486:	60 e0       	ldi	r22, 0x00	; 0
     488:	ce 01       	movw	r24, r28
     48a:	c9 df       	rcall	.-110    	; 0x41e <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
     48c:	80 3a       	cpi	r24, 0xA0	; 160
     48e:	79 f0       	breq	.+30     	; 0x4ae <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x3a>
     490:	2f ef       	ldi	r18, 0xFF	; 255
     492:	83 ed       	ldi	r24, 0xD3	; 211
     494:	90 e3       	ldi	r25, 0x30	; 48
     496:	21 50       	subi	r18, 0x01	; 1
     498:	80 40       	sbci	r24, 0x00	; 0
     49a:	90 40       	sbci	r25, 0x00	; 0
     49c:	e1 f7       	brne	.-8      	; 0x496 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x22>
     49e:	00 c0       	rjmp	.+0      	; 0x4a0 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x2c>
     4a0:	00 00       	nop
     4a2:	60 e0       	ldi	r22, 0x00	; 0
     4a4:	ce 01       	movw	r24, r28
     4a6:	bb df       	rcall	.-138    	; 0x41e <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
     4a8:	80 3a       	cpi	r24, 0xA0	; 160
     4aa:	09 f0       	breq	.+2      	; 0x4ae <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x3a>
     4ac:	4b c0       	rjmp	.+150    	; 0x544 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xd0>
     4ae:	60 e0       	ldi	r22, 0x00	; 0
     4b0:	ce 01       	movw	r24, r28
     4b2:	a6 df       	rcall	.-180    	; 0x400 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
     4b4:	40 e2       	ldi	r20, 0x20	; 32
     4b6:	6f e3       	ldi	r22, 0x3F	; 63
     4b8:	ce 01       	movw	r24, r28
     4ba:	78 df       	rcall	.-272    	; 0x3ac <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     4bc:	2f ef       	ldi	r18, 0xFF	; 255
     4be:	86 e7       	ldi	r24, 0x76	; 118
     4c0:	91 e0       	ldi	r25, 0x01	; 1
     4c2:	21 50       	subi	r18, 0x01	; 1
     4c4:	80 40       	sbci	r24, 0x00	; 0
     4c6:	90 40       	sbci	r25, 0x00	; 0
     4c8:	e1 f7       	brne	.-8      	; 0x4c2 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x4e>
     4ca:	00 c0       	rjmp	.+0      	; 0x4cc <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x58>
     4cc:	00 00       	nop
     4ce:	60 e0       	ldi	r22, 0x00	; 0
     4d0:	ce 01       	movw	r24, r28
     4d2:	a5 df       	rcall	.-182    	; 0x41e <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
     4d4:	80 3a       	cpi	r24, 0xA0	; 160
     4d6:	39 f0       	breq	.+14     	; 0x4e6 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x72>
     4d8:	8f e3       	ldi	r24, 0x3F	; 63
     4da:	9c e9       	ldi	r25, 0x9C	; 156
     4dc:	01 97       	sbiw	r24, 0x01	; 1
     4de:	f1 f7       	brne	.-4      	; 0x4dc <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x68>
     4e0:	00 c0       	rjmp	.+0      	; 0x4e2 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x6e>
     4e2:	00 00       	nop
     4e4:	f4 cf       	rjmp	.-24     	; 0x4ce <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x5a>
     4e6:	9f ef       	ldi	r25, 0xFF	; 255
     4e8:	20 e7       	ldi	r18, 0x70	; 112
     4ea:	82 e0       	ldi	r24, 0x02	; 2
     4ec:	91 50       	subi	r25, 0x01	; 1
     4ee:	20 40       	sbci	r18, 0x00	; 0
     4f0:	80 40       	sbci	r24, 0x00	; 0
     4f2:	e1 f7       	brne	.-8      	; 0x4ec <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x78>
     4f4:	00 c0       	rjmp	.+0      	; 0x4f6 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x82>
     4f6:	00 00       	nop
     4f8:	40 e0       	ldi	r20, 0x00	; 0
     4fa:	6e e3       	ldi	r22, 0x3E	; 62
     4fc:	ce 01       	movw	r24, r28
     4fe:	56 df       	rcall	.-340    	; 0x3ac <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     500:	8f e3       	ldi	r24, 0x3F	; 63
     502:	9c e9       	ldi	r25, 0x9C	; 156
     504:	01 97       	sbiw	r24, 0x01	; 1
     506:	f1 f7       	brne	.-4      	; 0x504 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x90>
     508:	00 c0       	rjmp	.+0      	; 0x50a <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x96>
     50a:	00 00       	nop
     50c:	40 e0       	ldi	r20, 0x00	; 0
     50e:	67 e0       	ldi	r22, 0x07	; 7
     510:	ce 01       	movw	r24, r28
     512:	4c df       	rcall	.-360    	; 0x3ac <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     514:	40 e0       	ldi	r20, 0x00	; 0
     516:	6f e3       	ldi	r22, 0x3F	; 63
     518:	ce 01       	movw	r24, r28
     51a:	48 df       	rcall	.-368    	; 0x3ac <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     51c:	8f e3       	ldi	r24, 0x3F	; 63
     51e:	9c e9       	ldi	r25, 0x9C	; 156
     520:	01 97       	sbiw	r24, 0x01	; 1
     522:	f1 f7       	brne	.-4      	; 0x520 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xac>
     524:	00 c0       	rjmp	.+0      	; 0x526 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xb2>
     526:	00 00       	nop
     528:	61 2f       	mov	r22, r17
     52a:	ce 01       	movw	r24, r28
     52c:	69 df       	rcall	.-302    	; 0x400 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
     52e:	9f ef       	ldi	r25, 0xFF	; 255
     530:	29 ef       	ldi	r18, 0xF9	; 249
     532:	80 e0       	ldi	r24, 0x00	; 0
     534:	91 50       	subi	r25, 0x01	; 1
     536:	20 40       	sbci	r18, 0x00	; 0
     538:	80 40       	sbci	r24, 0x00	; 0
     53a:	e1 f7       	brne	.-8      	; 0x534 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xc0>
     53c:	00 c0       	rjmp	.+0      	; 0x53e <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xca>
     53e:	00 00       	nop
     540:	81 e0       	ldi	r24, 0x01	; 1
     542:	01 c0       	rjmp	.+2      	; 0x546 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xd2>
     544:	80 e0       	ldi	r24, 0x00	; 0
     546:	df 91       	pop	r29
     548:	cf 91       	pop	r28
     54a:	1f 91       	pop	r17
     54c:	08 95       	ret

0000054e <_ZN15Adafruit_BNO0557getTempEv>:
     54e:	64 e3       	ldi	r22, 0x34	; 52
     550:	66 cf       	rjmp	.-308    	; 0x41e <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
     552:	08 95       	ret

00000554 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>:
     554:	cf 92       	push	r12
     556:	df 92       	push	r13
     558:	ef 92       	push	r14
     55a:	ff 92       	push	r15
     55c:	0f 93       	push	r16
     55e:	1f 93       	push	r17
     560:	cf 93       	push	r28
     562:	df 93       	push	r29
     564:	7c 01       	movw	r14, r24
     566:	c6 2f       	mov	r28, r22
     568:	6a 01       	movw	r12, r20
     56a:	12 2f       	mov	r17, r18
     56c:	dc 01       	movw	r26, r24
     56e:	13 96       	adiw	r26, 0x03	; 3
     570:	6c 91       	ld	r22, X
     572:	13 97       	sbiw	r26, 0x03	; 3
     574:	14 96       	adiw	r26, 0x04	; 4
     576:	8d 91       	ld	r24, X+
     578:	9c 91       	ld	r25, X
     57a:	15 97       	sbiw	r26, 0x05	; 5
     57c:	0e 94 98 12 	call	0x2530	; 0x2530 <_ZN7TwoWire17beginTransmissionEh>
     580:	f7 01       	movw	r30, r14
     582:	84 81       	ldd	r24, Z+4	; 0x04
     584:	95 81       	ldd	r25, Z+5	; 0x05
     586:	dc 01       	movw	r26, r24
     588:	ed 91       	ld	r30, X+
     58a:	fc 91       	ld	r31, X
     58c:	01 90       	ld	r0, Z+
     58e:	f0 81       	ld	r31, Z
     590:	e0 2d       	mov	r30, r0
     592:	6c 2f       	mov	r22, r28
     594:	19 95       	eicall
     596:	f7 01       	movw	r30, r14
     598:	84 81       	ldd	r24, Z+4	; 0x04
     59a:	95 81       	ldd	r25, Z+5	; 0x05
     59c:	0e 94 1c 13 	call	0x2638	; 0x2638 <_ZN7TwoWire15endTransmissionEv>
     5a0:	41 2f       	mov	r20, r17
     5a2:	d7 01       	movw	r26, r14
     5a4:	13 96       	adiw	r26, 0x03	; 3
     5a6:	6c 91       	ld	r22, X
     5a8:	13 97       	sbiw	r26, 0x03	; 3
     5aa:	14 96       	adiw	r26, 0x04	; 4
     5ac:	8d 91       	ld	r24, X+
     5ae:	9c 91       	ld	r25, X
     5b0:	15 97       	sbiw	r26, 0x05	; 5
     5b2:	0e 94 19 13 	call	0x2632	; 0x2632 <_ZN7TwoWire11requestFromEhh>
     5b6:	11 23       	and	r17, r17
     5b8:	b1 f0       	breq	.+44     	; 0x5e6 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh+0x92>
     5ba:	e6 01       	movw	r28, r12
     5bc:	11 50       	subi	r17, 0x01	; 1
     5be:	01 2f       	mov	r16, r17
     5c0:	10 e0       	ldi	r17, 0x00	; 0
     5c2:	0f 5f       	subi	r16, 0xFF	; 255
     5c4:	1f 4f       	sbci	r17, 0xFF	; 255
     5c6:	0c 0d       	add	r16, r12
     5c8:	1d 1d       	adc	r17, r13
     5ca:	f7 01       	movw	r30, r14
     5cc:	84 81       	ldd	r24, Z+4	; 0x04
     5ce:	95 81       	ldd	r25, Z+5	; 0x05
     5d0:	dc 01       	movw	r26, r24
     5d2:	ed 91       	ld	r30, X+
     5d4:	fc 91       	ld	r31, X
     5d6:	02 84       	ldd	r0, Z+10	; 0x0a
     5d8:	f3 85       	ldd	r31, Z+11	; 0x0b
     5da:	e0 2d       	mov	r30, r0
     5dc:	19 95       	eicall
     5de:	89 93       	st	Y+, r24
     5e0:	c0 17       	cp	r28, r16
     5e2:	d1 07       	cpc	r29, r17
     5e4:	91 f7       	brne	.-28     	; 0x5ca <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh+0x76>
     5e6:	81 e0       	ldi	r24, 0x01	; 1
     5e8:	df 91       	pop	r29
     5ea:	cf 91       	pop	r28
     5ec:	1f 91       	pop	r17
     5ee:	0f 91       	pop	r16
     5f0:	ff 90       	pop	r15
     5f2:	ef 90       	pop	r14
     5f4:	df 90       	pop	r13
     5f6:	cf 90       	pop	r12
     5f8:	08 95       	ret

000005fa <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>:
 *            VECTOR_EULER
 *            VECTOR_LINEARACCEL
 *            VECTOR_GRAVITY]
 *  @return  vector from specified source
 */
AdafruitImu::Vector<3> Adafruit_BNO055::getVector(adafruit_vector_type_t vector_type) {
     5fa:	af 92       	push	r10
     5fc:	bf 92       	push	r11
     5fe:	cf 92       	push	r12
     600:	df 92       	push	r13
     602:	ff 92       	push	r15
     604:	0f 93       	push	r16
     606:	1f 93       	push	r17
     608:	cf 93       	push	r28
     60a:	df 93       	push	r29
     60c:	00 d0       	rcall	.+0      	; 0x60e <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x14>
     60e:	00 d0       	rcall	.+0      	; 0x610 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x16>
     610:	cd b7       	in	r28, 0x3d	; 61
     612:	de b7       	in	r29, 0x3e	; 62
     614:	8c 01       	movw	r16, r24
     616:	cb 01       	movw	r24, r22
     618:	f4 2e       	mov	r15, r20
	template <uint8_t N> class Vector
	{
		public:
		Vector()
		{
			memset(p_vec, 0, sizeof(double)*N);
     61a:	2c e0       	ldi	r18, 0x0C	; 12
     61c:	f8 01       	movw	r30, r16
     61e:	11 92       	st	Z+, r1
     620:	2a 95       	dec	r18
     622:	e9 f7       	brne	.-6      	; 0x61e <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x24>
  AdafruitImu::Vector<3> xyz;
  uint8_t buffer[6];
  memset(buffer, 0, 6);
     624:	ae 01       	movw	r20, r28
     626:	4f 5f       	subi	r20, 0xFF	; 255
     628:	5f 4f       	sbci	r21, 0xFF	; 255
     62a:	26 e0       	ldi	r18, 0x06	; 6
     62c:	fa 01       	movw	r30, r20
     62e:	11 92       	st	Z+, r1
     630:	2a 95       	dec	r18
     632:	e9 f7       	brne	.-6      	; 0x62e <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x34>

  int16_t x, y, z;
  x = y = z = 0;

  /* Read vector data (6 bytes) */
  readLen((adafruit_bno055_reg_t)vector_type, buffer, 6);
     634:	26 e0       	ldi	r18, 0x06	; 6
     636:	6f 2d       	mov	r22, r15
     638:	8d df       	rcall	.-230    	; 0x554 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>

  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
     63a:	6a 81       	ldd	r22, Y+2	; 0x02
     63c:	70 e0       	ldi	r23, 0x00	; 0
     63e:	76 2f       	mov	r23, r22
     640:	66 27       	eor	r22, r22
     642:	89 81       	ldd	r24, Y+1	; 0x01
     644:	68 2b       	or	r22, r24
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
     646:	8c 81       	ldd	r24, Y+4	; 0x04
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	98 2f       	mov	r25, r24
     64c:	88 27       	eor	r24, r24
     64e:	2b 81       	ldd	r18, Y+3	; 0x03
     650:	6c 01       	movw	r12, r24
     652:	c2 2a       	or	r12, r18
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
     654:	8e 81       	ldd	r24, Y+6	; 0x06
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	98 2f       	mov	r25, r24
     65a:	88 27       	eor	r24, r24
     65c:	2d 81       	ldd	r18, Y+5	; 0x05
     65e:	5c 01       	movw	r10, r24
     660:	a2 2a       	or	r10, r18

  /*!
   * Convert the value to an appropriate range (section 3.6.4)
   * and assign the value to the Vector type
   */
  switch (vector_type) {
     662:	f4 e1       	ldi	r31, 0x14	; 20
     664:	ff 16       	cp	r15, r31
     666:	09 f4       	brne	.+2      	; 0x66a <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x70>
     668:	4a c0       	rjmp	.+148    	; 0x6fe <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x104>
     66a:	ff 15       	cp	r31, r15
     66c:	40 f0       	brcs	.+16     	; 0x67e <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x84>
     66e:	88 e0       	ldi	r24, 0x08	; 8
     670:	f8 16       	cp	r15, r24
     672:	09 f4       	brne	.+2      	; 0x676 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x7c>
     674:	ac c0       	rjmp	.+344    	; 0x7ce <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x1d4>
     676:	ee e0       	ldi	r30, 0x0E	; 14
     678:	fe 16       	cp	r15, r30
     67a:	69 f0       	breq	.+26     	; 0x696 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x9c>
     67c:	43 c1       	rjmp	.+646    	; 0x904 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
     67e:	f8 e2       	ldi	r31, 0x28	; 40
     680:	ff 16       	cp	r15, r31
     682:	09 f4       	brne	.+2      	; 0x686 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x8c>
     684:	d8 c0       	rjmp	.+432    	; 0x836 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x23c>
     686:	8e e2       	ldi	r24, 0x2E	; 46
     688:	f8 16       	cp	r15, r24
     68a:	09 f4       	brne	.+2      	; 0x68e <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x94>
     68c:	08 c1       	rjmp	.+528    	; 0x89e <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x2a4>
     68e:	ea e1       	ldi	r30, 0x1A	; 26
     690:	fe 12       	cpse	r15, r30
     692:	38 c1       	rjmp	.+624    	; 0x904 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
     694:	68 c0       	rjmp	.+208    	; 0x766 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x16c>
  case VECTOR_MAGNETOMETER:
    /* 1uT = 16 LSB */
    xyz[0] = ((double)x) / 16.0;
     696:	07 2e       	mov	r0, r23
     698:	00 0c       	add	r0, r0
     69a:	88 0b       	sbc	r24, r24
     69c:	99 0b       	sbc	r25, r25
     69e:	0e 94 88 15 	call	0x2b10	; 0x2b10 <__floatsisf>
     6a2:	20 e0       	ldi	r18, 0x00	; 0
     6a4:	30 e0       	ldi	r19, 0x00	; 0
     6a6:	40 e8       	ldi	r20, 0x80	; 128
     6a8:	5d e3       	ldi	r21, 0x3D	; 61
     6aa:	0e 94 14 16 	call	0x2c28	; 0x2c28 <__mulsf3>
     6ae:	f8 01       	movw	r30, r16
     6b0:	60 83       	st	Z, r22
     6b2:	71 83       	std	Z+1, r23	; 0x01
     6b4:	82 83       	std	Z+2, r24	; 0x02
     6b6:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 16.0;
     6b8:	b6 01       	movw	r22, r12
     6ba:	dd 0c       	add	r13, r13
     6bc:	88 0b       	sbc	r24, r24
     6be:	99 0b       	sbc	r25, r25
     6c0:	0e 94 88 15 	call	0x2b10	; 0x2b10 <__floatsisf>
     6c4:	20 e0       	ldi	r18, 0x00	; 0
     6c6:	30 e0       	ldi	r19, 0x00	; 0
     6c8:	40 e8       	ldi	r20, 0x80	; 128
     6ca:	5d e3       	ldi	r21, 0x3D	; 61
     6cc:	0e 94 14 16 	call	0x2c28	; 0x2c28 <__mulsf3>
     6d0:	f8 01       	movw	r30, r16
     6d2:	64 83       	std	Z+4, r22	; 0x04
     6d4:	75 83       	std	Z+5, r23	; 0x05
     6d6:	86 83       	std	Z+6, r24	; 0x06
     6d8:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 16.0;
     6da:	b5 01       	movw	r22, r10
     6dc:	bb 0c       	add	r11, r11
     6de:	88 0b       	sbc	r24, r24
     6e0:	99 0b       	sbc	r25, r25
     6e2:	0e 94 88 15 	call	0x2b10	; 0x2b10 <__floatsisf>
     6e6:	20 e0       	ldi	r18, 0x00	; 0
     6e8:	30 e0       	ldi	r19, 0x00	; 0
     6ea:	40 e8       	ldi	r20, 0x80	; 128
     6ec:	5d e3       	ldi	r21, 0x3D	; 61
     6ee:	0e 94 14 16 	call	0x2c28	; 0x2c28 <__mulsf3>
     6f2:	f8 01       	movw	r30, r16
     6f4:	60 87       	std	Z+8, r22	; 0x08
     6f6:	71 87       	std	Z+9, r23	; 0x09
     6f8:	82 87       	std	Z+10, r24	; 0x0a
     6fa:	93 87       	std	Z+11, r25	; 0x0b
    break;
     6fc:	03 c1       	rjmp	.+518    	; 0x904 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_GYROSCOPE:
    /* 1dps = 16 LSB */
    xyz[0] = ((double)x) / 16.0;
     6fe:	07 2e       	mov	r0, r23
     700:	00 0c       	add	r0, r0
     702:	88 0b       	sbc	r24, r24
     704:	99 0b       	sbc	r25, r25
     706:	0e 94 88 15 	call	0x2b10	; 0x2b10 <__floatsisf>
     70a:	20 e0       	ldi	r18, 0x00	; 0
     70c:	30 e0       	ldi	r19, 0x00	; 0
     70e:	40 e8       	ldi	r20, 0x80	; 128
     710:	5d e3       	ldi	r21, 0x3D	; 61
     712:	0e 94 14 16 	call	0x2c28	; 0x2c28 <__mulsf3>
     716:	f8 01       	movw	r30, r16
     718:	60 83       	st	Z, r22
     71a:	71 83       	std	Z+1, r23	; 0x01
     71c:	82 83       	std	Z+2, r24	; 0x02
     71e:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 16.0;
     720:	b6 01       	movw	r22, r12
     722:	dd 0c       	add	r13, r13
     724:	88 0b       	sbc	r24, r24
     726:	99 0b       	sbc	r25, r25
     728:	0e 94 88 15 	call	0x2b10	; 0x2b10 <__floatsisf>
     72c:	20 e0       	ldi	r18, 0x00	; 0
     72e:	30 e0       	ldi	r19, 0x00	; 0
     730:	40 e8       	ldi	r20, 0x80	; 128
     732:	5d e3       	ldi	r21, 0x3D	; 61
     734:	0e 94 14 16 	call	0x2c28	; 0x2c28 <__mulsf3>
     738:	f8 01       	movw	r30, r16
     73a:	64 83       	std	Z+4, r22	; 0x04
     73c:	75 83       	std	Z+5, r23	; 0x05
     73e:	86 83       	std	Z+6, r24	; 0x06
     740:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 16.0;
     742:	b5 01       	movw	r22, r10
     744:	bb 0c       	add	r11, r11
     746:	88 0b       	sbc	r24, r24
     748:	99 0b       	sbc	r25, r25
     74a:	0e 94 88 15 	call	0x2b10	; 0x2b10 <__floatsisf>
     74e:	20 e0       	ldi	r18, 0x00	; 0
     750:	30 e0       	ldi	r19, 0x00	; 0
     752:	40 e8       	ldi	r20, 0x80	; 128
     754:	5d e3       	ldi	r21, 0x3D	; 61
     756:	0e 94 14 16 	call	0x2c28	; 0x2c28 <__mulsf3>
     75a:	f8 01       	movw	r30, r16
     75c:	60 87       	std	Z+8, r22	; 0x08
     75e:	71 87       	std	Z+9, r23	; 0x09
     760:	82 87       	std	Z+10, r24	; 0x0a
     762:	93 87       	std	Z+11, r25	; 0x0b
    break;
     764:	cf c0       	rjmp	.+414    	; 0x904 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_EULER:
    /* 1 degree = 16 LSB */
    xyz[0] = ((double)x) / 16.0;
     766:	07 2e       	mov	r0, r23
     768:	00 0c       	add	r0, r0
     76a:	88 0b       	sbc	r24, r24
     76c:	99 0b       	sbc	r25, r25
     76e:	0e 94 88 15 	call	0x2b10	; 0x2b10 <__floatsisf>
     772:	20 e0       	ldi	r18, 0x00	; 0
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	40 e8       	ldi	r20, 0x80	; 128
     778:	5d e3       	ldi	r21, 0x3D	; 61
     77a:	0e 94 14 16 	call	0x2c28	; 0x2c28 <__mulsf3>
     77e:	f8 01       	movw	r30, r16
     780:	60 83       	st	Z, r22
     782:	71 83       	std	Z+1, r23	; 0x01
     784:	82 83       	std	Z+2, r24	; 0x02
     786:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 16.0;
     788:	b6 01       	movw	r22, r12
     78a:	dd 0c       	add	r13, r13
     78c:	88 0b       	sbc	r24, r24
     78e:	99 0b       	sbc	r25, r25
     790:	0e 94 88 15 	call	0x2b10	; 0x2b10 <__floatsisf>
     794:	20 e0       	ldi	r18, 0x00	; 0
     796:	30 e0       	ldi	r19, 0x00	; 0
     798:	40 e8       	ldi	r20, 0x80	; 128
     79a:	5d e3       	ldi	r21, 0x3D	; 61
     79c:	0e 94 14 16 	call	0x2c28	; 0x2c28 <__mulsf3>
     7a0:	f8 01       	movw	r30, r16
     7a2:	64 83       	std	Z+4, r22	; 0x04
     7a4:	75 83       	std	Z+5, r23	; 0x05
     7a6:	86 83       	std	Z+6, r24	; 0x06
     7a8:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 16.0;
     7aa:	b5 01       	movw	r22, r10
     7ac:	bb 0c       	add	r11, r11
     7ae:	88 0b       	sbc	r24, r24
     7b0:	99 0b       	sbc	r25, r25
     7b2:	0e 94 88 15 	call	0x2b10	; 0x2b10 <__floatsisf>
     7b6:	20 e0       	ldi	r18, 0x00	; 0
     7b8:	30 e0       	ldi	r19, 0x00	; 0
     7ba:	40 e8       	ldi	r20, 0x80	; 128
     7bc:	5d e3       	ldi	r21, 0x3D	; 61
     7be:	0e 94 14 16 	call	0x2c28	; 0x2c28 <__mulsf3>
     7c2:	f8 01       	movw	r30, r16
     7c4:	60 87       	std	Z+8, r22	; 0x08
     7c6:	71 87       	std	Z+9, r23	; 0x09
     7c8:	82 87       	std	Z+10, r24	; 0x0a
     7ca:	93 87       	std	Z+11, r25	; 0x0b
    break;
     7cc:	9b c0       	rjmp	.+310    	; 0x904 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_ACCELEROMETER:
    /* 1m/s^2 = 100 LSB */
    xyz[0] = ((double)x) / 100.0;
     7ce:	07 2e       	mov	r0, r23
     7d0:	00 0c       	add	r0, r0
     7d2:	88 0b       	sbc	r24, r24
     7d4:	99 0b       	sbc	r25, r25
     7d6:	0e 94 88 15 	call	0x2b10	; 0x2b10 <__floatsisf>
     7da:	20 e0       	ldi	r18, 0x00	; 0
     7dc:	30 e0       	ldi	r19, 0x00	; 0
     7de:	48 ec       	ldi	r20, 0xC8	; 200
     7e0:	52 e4       	ldi	r21, 0x42	; 66
     7e2:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <__divsf3>
     7e6:	f8 01       	movw	r30, r16
     7e8:	60 83       	st	Z, r22
     7ea:	71 83       	std	Z+1, r23	; 0x01
     7ec:	82 83       	std	Z+2, r24	; 0x02
     7ee:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 100.0;
     7f0:	b6 01       	movw	r22, r12
     7f2:	dd 0c       	add	r13, r13
     7f4:	88 0b       	sbc	r24, r24
     7f6:	99 0b       	sbc	r25, r25
     7f8:	0e 94 88 15 	call	0x2b10	; 0x2b10 <__floatsisf>
     7fc:	20 e0       	ldi	r18, 0x00	; 0
     7fe:	30 e0       	ldi	r19, 0x00	; 0
     800:	48 ec       	ldi	r20, 0xC8	; 200
     802:	52 e4       	ldi	r21, 0x42	; 66
     804:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <__divsf3>
     808:	f8 01       	movw	r30, r16
     80a:	64 83       	std	Z+4, r22	; 0x04
     80c:	75 83       	std	Z+5, r23	; 0x05
     80e:	86 83       	std	Z+6, r24	; 0x06
     810:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 100.0;
     812:	b5 01       	movw	r22, r10
     814:	bb 0c       	add	r11, r11
     816:	88 0b       	sbc	r24, r24
     818:	99 0b       	sbc	r25, r25
     81a:	0e 94 88 15 	call	0x2b10	; 0x2b10 <__floatsisf>
     81e:	20 e0       	ldi	r18, 0x00	; 0
     820:	30 e0       	ldi	r19, 0x00	; 0
     822:	48 ec       	ldi	r20, 0xC8	; 200
     824:	52 e4       	ldi	r21, 0x42	; 66
     826:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <__divsf3>
     82a:	f8 01       	movw	r30, r16
     82c:	60 87       	std	Z+8, r22	; 0x08
     82e:	71 87       	std	Z+9, r23	; 0x09
     830:	82 87       	std	Z+10, r24	; 0x0a
     832:	93 87       	std	Z+11, r25	; 0x0b
    break;
     834:	67 c0       	rjmp	.+206    	; 0x904 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_LINEARACCEL:
    /* 1m/s^2 = 100 LSB */
    xyz[0] = ((double)x) / 100.0;
     836:	07 2e       	mov	r0, r23
     838:	00 0c       	add	r0, r0
     83a:	88 0b       	sbc	r24, r24
     83c:	99 0b       	sbc	r25, r25
     83e:	0e 94 88 15 	call	0x2b10	; 0x2b10 <__floatsisf>
     842:	20 e0       	ldi	r18, 0x00	; 0
     844:	30 e0       	ldi	r19, 0x00	; 0
     846:	48 ec       	ldi	r20, 0xC8	; 200
     848:	52 e4       	ldi	r21, 0x42	; 66
     84a:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <__divsf3>
     84e:	f8 01       	movw	r30, r16
     850:	60 83       	st	Z, r22
     852:	71 83       	std	Z+1, r23	; 0x01
     854:	82 83       	std	Z+2, r24	; 0x02
     856:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 100.0;
     858:	b6 01       	movw	r22, r12
     85a:	dd 0c       	add	r13, r13
     85c:	88 0b       	sbc	r24, r24
     85e:	99 0b       	sbc	r25, r25
     860:	0e 94 88 15 	call	0x2b10	; 0x2b10 <__floatsisf>
     864:	20 e0       	ldi	r18, 0x00	; 0
     866:	30 e0       	ldi	r19, 0x00	; 0
     868:	48 ec       	ldi	r20, 0xC8	; 200
     86a:	52 e4       	ldi	r21, 0x42	; 66
     86c:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <__divsf3>
     870:	f8 01       	movw	r30, r16
     872:	64 83       	std	Z+4, r22	; 0x04
     874:	75 83       	std	Z+5, r23	; 0x05
     876:	86 83       	std	Z+6, r24	; 0x06
     878:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 100.0;
     87a:	b5 01       	movw	r22, r10
     87c:	bb 0c       	add	r11, r11
     87e:	88 0b       	sbc	r24, r24
     880:	99 0b       	sbc	r25, r25
     882:	0e 94 88 15 	call	0x2b10	; 0x2b10 <__floatsisf>
     886:	20 e0       	ldi	r18, 0x00	; 0
     888:	30 e0       	ldi	r19, 0x00	; 0
     88a:	48 ec       	ldi	r20, 0xC8	; 200
     88c:	52 e4       	ldi	r21, 0x42	; 66
     88e:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <__divsf3>
     892:	f8 01       	movw	r30, r16
     894:	60 87       	std	Z+8, r22	; 0x08
     896:	71 87       	std	Z+9, r23	; 0x09
     898:	82 87       	std	Z+10, r24	; 0x0a
     89a:	93 87       	std	Z+11, r25	; 0x0b
    break;
     89c:	33 c0       	rjmp	.+102    	; 0x904 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_GRAVITY:
    /* 1m/s^2 = 100 LSB */
    xyz[0] = ((double)x) / 100.0;
     89e:	07 2e       	mov	r0, r23
     8a0:	00 0c       	add	r0, r0
     8a2:	88 0b       	sbc	r24, r24
     8a4:	99 0b       	sbc	r25, r25
     8a6:	0e 94 88 15 	call	0x2b10	; 0x2b10 <__floatsisf>
     8aa:	20 e0       	ldi	r18, 0x00	; 0
     8ac:	30 e0       	ldi	r19, 0x00	; 0
     8ae:	48 ec       	ldi	r20, 0xC8	; 200
     8b0:	52 e4       	ldi	r21, 0x42	; 66
     8b2:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <__divsf3>
     8b6:	f8 01       	movw	r30, r16
     8b8:	60 83       	st	Z, r22
     8ba:	71 83       	std	Z+1, r23	; 0x01
     8bc:	82 83       	std	Z+2, r24	; 0x02
     8be:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 100.0;
     8c0:	b6 01       	movw	r22, r12
     8c2:	dd 0c       	add	r13, r13
     8c4:	88 0b       	sbc	r24, r24
     8c6:	99 0b       	sbc	r25, r25
     8c8:	0e 94 88 15 	call	0x2b10	; 0x2b10 <__floatsisf>
     8cc:	20 e0       	ldi	r18, 0x00	; 0
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	48 ec       	ldi	r20, 0xC8	; 200
     8d2:	52 e4       	ldi	r21, 0x42	; 66
     8d4:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <__divsf3>
     8d8:	f8 01       	movw	r30, r16
     8da:	64 83       	std	Z+4, r22	; 0x04
     8dc:	75 83       	std	Z+5, r23	; 0x05
     8de:	86 83       	std	Z+6, r24	; 0x06
     8e0:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 100.0;
     8e2:	b5 01       	movw	r22, r10
     8e4:	bb 0c       	add	r11, r11
     8e6:	88 0b       	sbc	r24, r24
     8e8:	99 0b       	sbc	r25, r25
     8ea:	0e 94 88 15 	call	0x2b10	; 0x2b10 <__floatsisf>
     8ee:	20 e0       	ldi	r18, 0x00	; 0
     8f0:	30 e0       	ldi	r19, 0x00	; 0
     8f2:	48 ec       	ldi	r20, 0xC8	; 200
     8f4:	52 e4       	ldi	r21, 0x42	; 66
     8f6:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <__divsf3>
     8fa:	f8 01       	movw	r30, r16
     8fc:	60 87       	std	Z+8, r22	; 0x08
     8fe:	71 87       	std	Z+9, r23	; 0x09
     900:	82 87       	std	Z+10, r24	; 0x0a
     902:	93 87       	std	Z+11, r25	; 0x0b
    break;
  }

  return xyz;
}
     904:	c8 01       	movw	r24, r16
     906:	26 96       	adiw	r28, 0x06	; 6
     908:	0f b6       	in	r0, 0x3f	; 63
     90a:	f8 94       	cli
     90c:	de bf       	out	0x3e, r29	; 62
     90e:	0f be       	out	0x3f, r0	; 63
     910:	cd bf       	out	0x3d, r28	; 61
     912:	df 91       	pop	r29
     914:	cf 91       	pop	r28
     916:	1f 91       	pop	r17
     918:	0f 91       	pop	r16
     91a:	ff 90       	pop	r15
     91c:	df 90       	pop	r13
     91e:	cf 90       	pop	r12
     920:	bf 90       	pop	r11
     922:	af 90       	pop	r10
     924:	08 95       	ret

00000926 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>:
/*!
 *  @brief  Reads the sensor and returns the data as a sensors_event_t
 *  @param  event
 *  @return always returns true
 */
bool Adafruit_BNO055::getEvent(sensors_event_t *event) {
     926:	0f 93       	push	r16
     928:	1f 93       	push	r17
     92a:	cf 93       	push	r28
     92c:	df 93       	push	r29
     92e:	cd b7       	in	r28, 0x3d	; 61
     930:	de b7       	in	r29, 0x3e	; 62
     932:	2c 97       	sbiw	r28, 0x0c	; 12
     934:	0f b6       	in	r0, 0x3f	; 63
     936:	f8 94       	cli
     938:	de bf       	out	0x3e, r29	; 62
     93a:	0f be       	out	0x3f, r0	; 63
     93c:	cd bf       	out	0x3d, r28	; 61
     93e:	8b 01       	movw	r16, r22
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
     940:	20 e2       	ldi	r18, 0x20	; 32
     942:	fb 01       	movw	r30, r22
     944:	11 92       	st	Z+, r1
     946:	2a 95       	dec	r18
     948:	e9 f7       	brne	.-6      	; 0x944 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t+0x1e>

  event->version = sizeof(sensors_event_t);
     94a:	40 e2       	ldi	r20, 0x20	; 32
     94c:	50 e0       	ldi	r21, 0x00	; 0
     94e:	60 e0       	ldi	r22, 0x00	; 0
     950:	70 e0       	ldi	r23, 0x00	; 0
     952:	f8 01       	movw	r30, r16
     954:	40 83       	st	Z, r20
     956:	51 83       	std	Z+1, r21	; 0x01
     958:	62 83       	std	Z+2, r22	; 0x02
     95a:	73 83       	std	Z+3, r23	; 0x03
  event->sensor_id = _sensorID;
     95c:	fc 01       	movw	r30, r24
     95e:	46 81       	ldd	r20, Z+6	; 0x06
     960:	57 81       	ldd	r21, Z+7	; 0x07
     962:	60 85       	ldd	r22, Z+8	; 0x08
     964:	71 85       	ldd	r23, Z+9	; 0x09
     966:	f8 01       	movw	r30, r16
     968:	44 83       	std	Z+4, r20	; 0x04
     96a:	55 83       	std	Z+5, r21	; 0x05
     96c:	66 83       	std	Z+6, r22	; 0x06
     96e:	77 83       	std	Z+7, r23	; 0x07
  event->type = SENSOR_TYPE_ORIENTATION;
     970:	43 e0       	ldi	r20, 0x03	; 3
     972:	50 e0       	ldi	r21, 0x00	; 0
     974:	60 e0       	ldi	r22, 0x00	; 0
     976:	70 e0       	ldi	r23, 0x00	; 0
     978:	40 87       	std	Z+8, r20	; 0x08
     97a:	51 87       	std	Z+9, r21	; 0x09
     97c:	62 87       	std	Z+10, r22	; 0x0a
     97e:	73 87       	std	Z+11, r23	; 0x0b
  //event->timestamp = millis();

  /* Get a Euler angle sample for orientation */
  AdafruitImu::Vector<3> euler = getVector(Adafruit_BNO055::VECTOR_EULER);
     980:	4a e1       	ldi	r20, 0x1A	; 26
     982:	bc 01       	movw	r22, r24
     984:	ce 01       	movw	r24, r28
     986:	01 96       	adiw	r24, 0x01	; 1
     988:	38 de       	rcall	.-912    	; 0x5fa <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
  event->orientation.x = euler.x();
     98a:	89 81       	ldd	r24, Y+1	; 0x01
     98c:	9a 81       	ldd	r25, Y+2	; 0x02
     98e:	ab 81       	ldd	r26, Y+3	; 0x03
     990:	bc 81       	ldd	r27, Y+4	; 0x04
     992:	f8 01       	movw	r30, r16
     994:	80 8b       	std	Z+16, r24	; 0x10
     996:	91 8b       	std	Z+17, r25	; 0x11
     998:	a2 8b       	std	Z+18, r26	; 0x12
     99a:	b3 8b       	std	Z+19, r27	; 0x13
  event->orientation.y = euler.y();
     99c:	8d 81       	ldd	r24, Y+5	; 0x05
     99e:	9e 81       	ldd	r25, Y+6	; 0x06
     9a0:	af 81       	ldd	r26, Y+7	; 0x07
     9a2:	b8 85       	ldd	r27, Y+8	; 0x08
     9a4:	84 8b       	std	Z+20, r24	; 0x14
     9a6:	95 8b       	std	Z+21, r25	; 0x15
     9a8:	a6 8b       	std	Z+22, r26	; 0x16
     9aa:	b7 8b       	std	Z+23, r27	; 0x17
  event->orientation.z = euler.z();
     9ac:	89 85       	ldd	r24, Y+9	; 0x09
     9ae:	9a 85       	ldd	r25, Y+10	; 0x0a
     9b0:	ab 85       	ldd	r26, Y+11	; 0x0b
     9b2:	bc 85       	ldd	r27, Y+12	; 0x0c
     9b4:	80 8f       	std	Z+24, r24	; 0x18
     9b6:	91 8f       	std	Z+25, r25	; 0x19
     9b8:	a2 8f       	std	Z+26, r26	; 0x1a
     9ba:	b3 8f       	std	Z+27, r27	; 0x1b

  return true;
}
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	2c 96       	adiw	r28, 0x0c	; 12
     9c0:	0f b6       	in	r0, 0x3f	; 63
     9c2:	f8 94       	cli
     9c4:	de bf       	out	0x3e, r29	; 62
     9c6:	0f be       	out	0x3f, r0	; 63
     9c8:	cd bf       	out	0x3d, r28	; 61
     9ca:	df 91       	pop	r29
     9cc:	cf 91       	pop	r28
     9ce:	1f 91       	pop	r17
     9d0:	0f 91       	pop	r16
     9d2:	08 95       	ret

000009d4 <_Z14RunPingCommandPKhh>:
#include <stddef.h>

uint8_t* const SendDataBuffer = (uint8_t*)(&EtherComm::buffer[2]);

void RunPingCommand(const uint8_t* data, uint8_t len){
  if(len == 1){
     9d4:	61 30       	cpi	r22, 0x01	; 1
     9d6:	49 f4       	brne	.+18     	; 0x9ea <_Z14RunPingCommandPKhh+0x16>
     9d8:	fc 01       	movw	r30, r24
    SendDataBuffer[0] = data[0];
     9da:	80 81       	ld	r24, Z
     9dc:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <__data_end>
     9e0:	f0 91 f7 02 	lds	r31, 0x02F7	; 0x8002f7 <__data_end+0x1>
     9e4:	80 83       	st	Z, r24
    EtherComm::SendCommand(CMD_Ping, 1);
     9e6:	80 e0       	ldi	r24, 0x00	; 0
     9e8:	bf c6       	rjmp	.+3454   	; 0x1768 <_ZN9EtherComm11SendCommandEhh>
     9ea:	08 95       	ret

000009ec <_Z14RunEchoCommandPKhh>:
  }
}

void RunEchoCommand(const uint8_t* data, uint8_t len){
  uint8_t* index = SendDataBuffer;
     9ec:	40 91 f6 02 	lds	r20, 0x02F6	; 0x8002f6 <__data_end>
     9f0:	30 91 f7 02 	lds	r19, 0x02F7	; 0x8002f7 <__data_end+0x1>
  uint8_t dataLen = len;
  while(len-- > 0){
     9f4:	2f ef       	ldi	r18, 0xFF	; 255
     9f6:	26 0f       	add	r18, r22
     9f8:	66 23       	and	r22, r22
     9fa:	41 f0       	breq	.+16     	; 0xa0c <_Z14RunEchoCommandPKhh+0x20>
     9fc:	a8 2f       	mov	r26, r24
     9fe:	b9 2f       	mov	r27, r25
     a00:	e4 2f       	mov	r30, r20
     a02:	f3 2f       	mov	r31, r19
    *(index++) = *(data++);
     a04:	8d 91       	ld	r24, X+
     a06:	81 93       	st	Z+, r24
}

void RunEchoCommand(const uint8_t* data, uint8_t len){
  uint8_t* index = SendDataBuffer;
  uint8_t dataLen = len;
  while(len-- > 0){
     a08:	21 50       	subi	r18, 0x01	; 1
     a0a:	e0 f7       	brcc	.-8      	; 0xa04 <_Z14RunEchoCommandPKhh+0x18>
    *(index++) = *(data++);
  }
  
  EtherComm::SendCommand(CMD_Echo, dataLen);
     a0c:	81 e0       	ldi	r24, 0x01	; 1
     a0e:	ac c6       	rjmp	.+3416   	; 0x1768 <_ZN9EtherComm11SendCommandEhh>
     a10:	08 95       	ret

00000a12 <_Z13RunLedCommandPKhh>:
}
//TODO remove this command from both devices
void RunLedCommand(const uint8_t* data, uint8_t len){
	if(len == 1){
     a12:	61 30       	cpi	r22, 0x01	; 1
     a14:	51 f4       	brne	.+20     	; 0xa2a <_Z13RunLedCommandPKhh+0x18>
		uint8_t state = *data;
     a16:	fc 01       	movw	r30, r24
     a18:	90 81       	ld	r25, Z
		if(state <= 1){
     a1a:	92 30       	cpi	r25, 0x02	; 2
     a1c:	30 f4       	brcc	.+12     	; 0xa2a <_Z13RunLedCommandPKhh+0x18>
			rov.SetLed(state > 0);
     a1e:	81 e0       	ldi	r24, 0x01	; 1
     a20:	91 11       	cpse	r25, r1
     a22:	01 c0       	rjmp	.+2      	; 0xa26 <_Z13RunLedCommandPKhh+0x14>
     a24:	80 e0       	ldi	r24, 0x00	; 0
     a26:	0c 94 71 13 	jmp	0x26e2	; 0x26e2 <_ZN5Robot6SetLedEb>
     a2a:	08 95       	ret

00000a2c <_ZN9EtherComm15CommandReceivedEhPKhh>:
		}
	}
}

void EtherComm::CommandReceived(uint8_t command, const uint8_t* data, uint8_t len){
     a2c:	9b 01       	movw	r18, r22
  switch(command){
     a2e:	81 30       	cpi	r24, 0x01	; 1
     a30:	51 f0       	breq	.+20     	; 0xa46 <_ZN9EtherComm15CommandReceivedEhPKhh+0x1a>
     a32:	28 f0       	brcs	.+10     	; 0xa3e <_ZN9EtherComm15CommandReceivedEhPKhh+0x12>
     a34:	82 30       	cpi	r24, 0x02	; 2
     a36:	59 f0       	breq	.+22     	; 0xa4e <_ZN9EtherComm15CommandReceivedEhPKhh+0x22>
     a38:	83 30       	cpi	r24, 0x03	; 3
     a3a:	69 f0       	breq	.+26     	; 0xa56 <_ZN9EtherComm15CommandReceivedEhPKhh+0x2a>
     a3c:	08 95       	ret
    case CMD_Ping: RunPingCommand(data, len); break;
     a3e:	64 2f       	mov	r22, r20
     a40:	c9 01       	movw	r24, r18
     a42:	c8 cf       	rjmp	.-112    	; 0x9d4 <_Z14RunPingCommandPKhh>
     a44:	08 95       	ret
    case CMD_Echo: RunEchoCommand(data, len); break;
     a46:	64 2f       	mov	r22, r20
     a48:	c9 01       	movw	r24, r18
     a4a:	d0 cf       	rjmp	.-96     	; 0x9ec <_Z14RunEchoCommandPKhh>
     a4c:	08 95       	ret
	case CMD_Led: RunLedCommand(data, len); break;
     a4e:	64 2f       	mov	r22, r20
     a50:	c9 01       	movw	r24, r18
     a52:	df cf       	rjmp	.-66     	; 0xa12 <_Z13RunLedCommandPKhh>
     a54:	08 95       	ret
	case CMD_UpdateDevice: rov.CommandReceived(data, len); break;
     a56:	64 2f       	mov	r22, r20
     a58:	c9 01       	movw	r24, r18
     a5a:	0c 94 77 13 	jmp	0x26ee	; 0x26ee <_ZN5Robot15CommandReceivedEPKhh>
     a5e:	08 95       	ret

00000a60 <_GLOBAL__sub_I__Z14RunPingCommandPKhh>:
#include "EtherComm.h"
#include "Robot.h"
#include "Commands.h"
#include <stddef.h>

uint8_t* const SendDataBuffer = (uint8_t*)(&EtherComm::buffer[2]);
     a60:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
     a64:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
     a68:	02 96       	adiw	r24, 0x02	; 2
     a6a:	90 93 f7 02 	sts	0x02F7, r25	; 0x8002f7 <__data_end+0x1>
     a6e:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <__data_end>
     a72:	08 95       	ret

00000a74 <_ZL10enableChipv>:
static Register* selectPort;
static uint8_t selectPin;

static void enableChip () {
	//cli();
	SetLow(*selectPort, selectPin); //digitalWrite(selectPin, LOW);
     a74:	e0 91 fc 02 	lds	r30, 0x02FC	; 0x8002fc <_ZL10selectPort>
     a78:	f0 91 fd 02 	lds	r31, 0x02FD	; 0x8002fd <_ZL10selectPort+0x1>
     a7c:	90 81       	ld	r25, Z
     a7e:	80 91 fb 02 	lds	r24, 0x02FB	; 0x8002fb <_ZL9selectPin>
     a82:	80 95       	com	r24
     a84:	89 23       	and	r24, r25
     a86:	80 83       	st	Z, r24
     a88:	08 95       	ret

00000a8a <_ZL11disableChipv>:
}

static void disableChip () {
	SetHigh(*selectPort, selectPin); //digitalWrite(selectPin, HIGH);
     a8a:	e0 91 fc 02 	lds	r30, 0x02FC	; 0x8002fc <_ZL10selectPort>
     a8e:	f0 91 fd 02 	lds	r31, 0x02FD	; 0x8002fd <_ZL10selectPort+0x1>
     a92:	90 81       	ld	r25, Z
     a94:	80 91 fb 02 	lds	r24, 0x02FB	; 0x8002fb <_ZL9selectPin>
     a98:	89 2b       	or	r24, r25
     a9a:	80 83       	st	Z, r24
     a9c:	08 95       	ret

00000a9e <_ZL6readOphh>:

	SetOutput(csDDR, selectPin);
	disableChip();
}

static uint8_t readOp (uint8_t op, uint8_t address) {
     a9e:	cf 93       	push	r28
     aa0:	df 93       	push	r29
     aa2:	d8 2f       	mov	r29, r24
     aa4:	c6 2f       	mov	r28, r22
    enableChip();
     aa6:	e6 df       	rcall	.-52     	; 0xa74 <_ZL10enableChipv>
    SPI.write8(op | (address & ADDR_MASK));
     aa8:	8c 2f       	mov	r24, r28
     aaa:	cf 71       	andi	r28, 0x1F	; 31
     aac:	cd 2b       	or	r28, r29
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     aae:	ce bd       	out	0x2e, r28	; 46
		asm volatile("nop");
     ab0:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     ab2:	0d b4       	in	r0, 0x2d	; 45
     ab4:	07 fe       	sbrs	r0, 7
     ab6:	fd cf       	rjmp	.-6      	; 0xab2 <_ZL6readOphh+0x14>
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     ab8:	1e bc       	out	0x2e, r1	; 46
		asm volatile("nop");
     aba:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     abc:	0d b4       	in	r0, 0x2d	; 45
     abe:	07 fe       	sbrs	r0, 7
     ac0:	fd cf       	rjmp	.-6      	; 0xabc <_ZL6readOphh+0x1e>
	}

	//write8, excepts also returns the received byte
	static uint8_t read_write8(uint8_t data){
		write8(data);
		return SPDR;
     ac2:	ce b5       	in	r28, 0x2e	; 46
    uint8_t result = SPI.read_write8(0x00);
    if (address & 0x80)
     ac4:	88 23       	and	r24, r24
     ac6:	34 f4       	brge	.+12     	; 0xad4 <_ZL6readOphh+0x36>
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     ac8:	1e bc       	out	0x2e, r1	; 46
		asm volatile("nop");
     aca:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     acc:	0d b4       	in	r0, 0x2d	; 45
     ace:	07 fe       	sbrs	r0, 7
     ad0:	fd cf       	rjmp	.-6      	; 0xacc <_ZL6readOphh+0x2e>
        result = SPI.read_write8(0x00);
    disableChip();
     ad2:	ce b5       	in	r28, 0x2e	; 46
     ad4:	da df       	rcall	.-76     	; 0xa8a <_ZL11disableChipv>
    return result;
}
     ad6:	8c 2f       	mov	r24, r28
     ad8:	df 91       	pop	r29
     ada:	cf 91       	pop	r28
     adc:	08 95       	ret

00000ade <_ZL7writeOphhh>:

static void writeOp (uint8_t op, uint8_t address, uint8_t data) {
     ade:	1f 93       	push	r17
     ae0:	cf 93       	push	r28
     ae2:	df 93       	push	r29
     ae4:	c8 2f       	mov	r28, r24
     ae6:	d6 2f       	mov	r29, r22
     ae8:	14 2f       	mov	r17, r20
    enableChip();
     aea:	c4 df       	rcall	.-120    	; 0xa74 <_ZL10enableChipv>
    SPI.write8(op | (address & ADDR_MASK));
     aec:	df 71       	andi	r29, 0x1F	; 31
     aee:	cd 2b       	or	r28, r29
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     af0:	ce bd       	out	0x2e, r28	; 46
		asm volatile("nop");
     af2:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     af4:	0d b4       	in	r0, 0x2d	; 45
     af6:	07 fe       	sbrs	r0, 7
     af8:	fd cf       	rjmp	.-6      	; 0xaf4 <_ZL7writeOphhh+0x16>
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     afa:	1e bd       	out	0x2e, r17	; 46
		asm volatile("nop");
     afc:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     afe:	0d b4       	in	r0, 0x2d	; 45
     b00:	07 fe       	sbrs	r0, 7
    SPI.write8(data);
    disableChip();
     b02:	fd cf       	rjmp	.-6      	; 0xafe <_ZL7writeOphhh+0x20>
     b04:	c2 df       	rcall	.-124    	; 0xa8a <_ZL11disableChipv>
}
     b06:	df 91       	pop	r29
     b08:	cf 91       	pop	r28
     b0a:	1f 91       	pop	r17
     b0c:	08 95       	ret

00000b0e <_ZL7readBufjPh>:

static void readBuf(uint16_t len, uint8_t* data) {
     b0e:	0f 93       	push	r16
     b10:	1f 93       	push	r17
     b12:	cf 93       	push	r28
     b14:	df 93       	push	r29
     b16:	ec 01       	movw	r28, r24
     b18:	8b 01       	movw	r16, r22
    enableChip();
     b1a:	ac df       	rcall	.-168    	; 0xa74 <_ZL10enableChipv>
    if (len != 0) {
     b1c:	20 97       	sbiw	r28, 0x00	; 0
     b1e:	99 f0       	breq	.+38     	; 0xb46 <_ZL7readBufjPh+0x38>
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     b20:	8a e3       	ldi	r24, 0x3A	; 58
     b22:	8e bd       	out	0x2e, r24	; 46
		asm volatile("nop");
     b24:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     b26:	0d b4       	in	r0, 0x2d	; 45
     b28:	07 fe       	sbrs	r0, 7
     b2a:	fd cf       	rjmp	.-6      	; 0xb26 <_ZL7readBufjPh+0x18>
     b2c:	f8 01       	movw	r30, r16
     b2e:	b8 01       	movw	r22, r16
     b30:	6c 0f       	add	r22, r28
     b32:	7d 1f       	adc	r23, r29
	static void read(void *buf, uint16_t nbyte, uint8_t dataSend = 0){
		if(nbyte == 0) return;
		
		uint8_t* buff = (uint8_t*)buf;
		while(nbyte--){
			SPDR = dataSend;
     b34:	1e bc       	out	0x2e, r1	; 46
			//asm volatile("nop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\n");
			while(!(SPSR & _BV(SPIF)));
     b36:	0d b4       	in	r0, 0x2d	; 45
     b38:	07 fe       	sbrs	r0, 7
     b3a:	fd cf       	rjmp	.-6      	; 0xb36 <_ZL7readBufjPh+0x28>
			*buff++ = SPDR;
     b3c:	9e b5       	in	r25, 0x2e	; 46
     b3e:	91 93       	st	Z+, r25
		
	static void read(void *buf, uint16_t nbyte, uint8_t dataSend = 0){
		if(nbyte == 0) return;
		
		uint8_t* buff = (uint8_t*)buf;
		while(nbyte--){
     b40:	6e 17       	cp	r22, r30
     b42:	7f 07       	cpc	r23, r31
        SPI.write8(ENC28J60_READ_BUF_MEM);
		SPI.read(data, len);
    }
    disableChip();
     b44:	b9 f7       	brne	.-18     	; 0xb34 <_ZL7readBufjPh+0x26>
     b46:	a1 df       	rcall	.-190    	; 0xa8a <_ZL11disableChipv>
}
     b48:	df 91       	pop	r29
     b4a:	cf 91       	pop	r28
     b4c:	1f 91       	pop	r17
     b4e:	0f 91       	pop	r16
     b50:	08 95       	ret

00000b52 <_ZL7SetBankh>:
        SPI.write(data, len);
    }
    disableChip();
}

static void SetBank (uint8_t address) {
     b52:	1f 93       	push	r17
     b54:	cf 93       	push	r28
     b56:	df 93       	push	r29
     b58:	18 2f       	mov	r17, r24
     b5a:	10 76       	andi	r17, 0x60	; 96
    if ((address & BANK_MASK) != Enc28j60Bank) {
     b5c:	c1 2f       	mov	r28, r17
     b5e:	d0 e0       	ldi	r29, 0x00	; 0
     b60:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <_ZL12Enc28j60Bank>
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	c8 17       	cp	r28, r24
     b68:	d9 07       	cpc	r29, r25
     b6a:	a1 f0       	breq	.+40     	; 0xb94 <_ZL7SetBankh+0x42>
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_BSEL1|ECON1_BSEL0);
     b6c:	43 e0       	ldi	r20, 0x03	; 3
     b6e:	6f e1       	ldi	r22, 0x1F	; 31
     b70:	80 ea       	ldi	r24, 0xA0	; 160
     b72:	b5 df       	rcall	.-150    	; 0xade <_ZL7writeOphhh>
        Enc28j60Bank = address & BANK_MASK;
     b74:	10 93 fe 02 	sts	0x02FE, r17	; 0x8002fe <_ZL12Enc28j60Bank>
        writeOp(ENC28J60_BIT_FIELD_SET, ECON1, Enc28j60Bank>>5);
     b78:	ae 01       	movw	r20, r28
     b7a:	55 95       	asr	r21
     b7c:	47 95       	ror	r20
     b7e:	55 95       	asr	r21
     b80:	47 95       	ror	r20
     b82:	55 95       	asr	r21
     b84:	47 95       	ror	r20
     b86:	55 95       	asr	r21
     b88:	47 95       	ror	r20
     b8a:	55 95       	asr	r21
     b8c:	47 95       	ror	r20
     b8e:	6f e1       	ldi	r22, 0x1F	; 31
     b90:	80 e8       	ldi	r24, 0x80	; 128
     b92:	a5 df       	rcall	.-182    	; 0xade <_ZL7writeOphhh>
    }
}
     b94:	df 91       	pop	r29
     b96:	cf 91       	pop	r28
     b98:	1f 91       	pop	r17
     b9a:	08 95       	ret

00000b9c <_ZL11readRegByteh>:

static uint8_t readRegByte (uint8_t address) {
     b9c:	cf 93       	push	r28
     b9e:	c8 2f       	mov	r28, r24
    SetBank(address);
     ba0:	d8 df       	rcall	.-80     	; 0xb52 <_ZL7SetBankh>
    return readOp(ENC28J60_READ_CTRL_REG, address);
     ba2:	6c 2f       	mov	r22, r28
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	7b df       	rcall	.-266    	; 0xa9e <_ZL6readOphh>
}
     ba8:	cf 91       	pop	r28
     baa:	08 95       	ret

00000bac <_ZL12writeRegBytehh>:

static void writeRegByte (uint8_t address, uint8_t data) {
     bac:	cf 93       	push	r28
     bae:	df 93       	push	r29
     bb0:	c8 2f       	mov	r28, r24
     bb2:	d6 2f       	mov	r29, r22
    SetBank(address);
     bb4:	ce df       	rcall	.-100    	; 0xb52 <_ZL7SetBankh>
    writeOp(ENC28J60_WRITE_CTRL_REG, address, data);
     bb6:	4d 2f       	mov	r20, r29
     bb8:	6c 2f       	mov	r22, r28
     bba:	80 e4       	ldi	r24, 0x40	; 64
     bbc:	90 df       	rcall	.-224    	; 0xade <_ZL7writeOphhh>
}
     bbe:	df 91       	pop	r29
     bc0:	cf 91       	pop	r28
     bc2:	08 95       	ret

00000bc4 <_ZL8writeReghj>:

static void writeReg(uint8_t address, uint16_t data) {
     bc4:	cf 93       	push	r28
     bc6:	df 93       	push	r29
     bc8:	c8 2f       	mov	r28, r24
     bca:	d7 2f       	mov	r29, r23
    writeRegByte(address, data);
     bcc:	ef df       	rcall	.-34     	; 0xbac <_ZL12writeRegBytehh>
    writeRegByte(address + 1, data >> 8);
     bce:	6d 2f       	mov	r22, r29
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	8c 0f       	add	r24, r28
     bd4:	eb df       	rcall	.-42     	; 0xbac <_ZL12writeRegBytehh>
}
     bd6:	df 91       	pop	r29
     bd8:	cf 91       	pop	r28
     bda:	08 95       	ret

00000bdc <_ZN8ENC28J607initSPIERVh>:
static void disableChip () {
	SetHigh(*selectPort, selectPin); //digitalWrite(selectPin, HIGH);
	//sei();
}

void ENC28J60::initSPI (Register& csDDR) {
     bdc:	fc 01       	movw	r30, r24

class SPI{
public:
	static void begin(uint8_t clock = SPI_CLOCK_DIV2){
		//SPI_DIR |= SS;
		SPI_DIR |= SPI_MOSI | SPI_SCK | SPI_SS; //Not sure why, but SS pin requires to be set as output even when not being used.
     bde:	94 b1       	in	r25, 0x04	; 4
     be0:	97 60       	ori	r25, 0x07	; 7
     be2:	94 b9       	out	0x04, r25	; 4
		SPI_DIR &= ~(SPI_MISO);
     be4:	23 98       	cbi	0x04, 3	; 4
		//disableCS();

		SPSR |= (clock >> 2);
     be6:	9d b5       	in	r25, 0x2d	; 45
     be8:	91 60       	ori	r25, 0x01	; 1
     bea:	9d bd       	out	0x2d, r25	; 45
		SPCR |= _BV(MSTR) | _BV(SPE) | (clock & 0x03);
     bec:	9c b5       	in	r25, 0x2c	; 44
     bee:	90 65       	ori	r25, 0x50	; 80
     bf0:	9c bd       	out	0x2c, r25	; 44
	SPI.begin(SPI_CLOCK_DIV2);

	SetOutput(csDDR, selectPin);
     bf2:	80 81       	ld	r24, Z
     bf4:	90 91 fb 02 	lds	r25, 0x02FB	; 0x8002fb <_ZL9selectPin>
     bf8:	98 2b       	or	r25, r24
     bfa:	90 83       	st	Z, r25
	disableChip();
     bfc:	46 cf       	rjmp	.-372    	; 0xa8a <_ZL11disableChipv>
     bfe:	08 95       	ret

00000c00 <_ZN8ENC28J6010initializeEjPKhRVhS3_h>:
    writeReg(MIWR, data);
    while (readRegByte(MISTAT) & MISTAT_BUSY)
        ;
}

uint8_t ENC28J60::initialize (uint16_t size, const uint8_t* macaddr, Register& csDDR, Register& csPort, uint8_t csPin) {
     c00:	0f 93       	push	r16
     c02:	cf 93       	push	r28
     c04:	df 93       	push	r29
     c06:	eb 01       	movw	r28, r22
    bufferSize = size;
     c08:	90 93 00 03 	sts	0x0300, r25	; 0x800300 <_ZN8ENC28J6010bufferSizeE+0x1>
     c0c:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <_ZN8ENC28J6010bufferSizeE>
	selectPin = csPin;
     c10:	00 93 fb 02 	sts	0x02FB, r16	; 0x8002fb <_ZL9selectPin>
	selectPort = &csPort;
     c14:	30 93 fd 02 	sts	0x02FD, r19	; 0x8002fd <_ZL10selectPort+0x1>
     c18:	20 93 fc 02 	sts	0x02FC, r18	; 0x8002fc <_ZL10selectPort>
    initSPI(csDDR);
     c1c:	ca 01       	movw	r24, r20
     c1e:	de df       	rcall	.-68     	; 0xbdc <_ZN8ENC28J607initSPIERVh>

    writeOp(ENC28J60_SOFT_RESET, 0, ENC28J60_SOFT_RESET);
     c20:	4f ef       	ldi	r20, 0xFF	; 255
     c22:	60 e0       	ldi	r22, 0x00	; 0
     c24:	8f ef       	ldi	r24, 0xFF	; 255
     c26:	5b df       	rcall	.-330    	; 0xade <_ZL7writeOphhh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c28:	8f e3       	ldi	r24, 0x3F	; 63
     c2a:	9f e1       	ldi	r25, 0x1F	; 31
     c2c:	01 97       	sbiw	r24, 0x01	; 1
     c2e:	f1 f7       	brne	.-4      	; 0xc2c <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0x2c>
     c30:	00 c0       	rjmp	.+0      	; 0xc32 <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0x32>
     c32:	00 00       	nop
	_delay_ms(2);
    while (!readOp(ENC28J60_READ_CTRL_REG, ESTAT) & ESTAT_CLKRDY)
     c34:	6d e1       	ldi	r22, 0x1D	; 29
     c36:	80 e0       	ldi	r24, 0x00	; 0
     c38:	32 df       	rcall	.-412    	; 0xa9e <_ZL6readOphh>
     c3a:	88 23       	and	r24, r24
     c3c:	d9 f3       	breq	.-10     	; 0xc34 <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0x34>
        ;

    writeReg(ERXST, RXSTART_INIT);
     c3e:	60 e0       	ldi	r22, 0x00	; 0
     c40:	70 e0       	ldi	r23, 0x00	; 0
     c42:	88 e0       	ldi	r24, 0x08	; 8
     c44:	bf df       	rcall	.-130    	; 0xbc4 <_ZL8writeReghj>
    writeReg(ERXRDPT, RXSTART_INIT);
     c46:	60 e0       	ldi	r22, 0x00	; 0
     c48:	70 e0       	ldi	r23, 0x00	; 0
     c4a:	8c e0       	ldi	r24, 0x0C	; 12
     c4c:	bb df       	rcall	.-138    	; 0xbc4 <_ZL8writeReghj>
    writeReg(ERXND, RXSTOP_INIT);
     c4e:	6f ef       	ldi	r22, 0xFF	; 255
     c50:	7b e0       	ldi	r23, 0x0B	; 11
     c52:	8a e0       	ldi	r24, 0x0A	; 10
     c54:	b7 df       	rcall	.-146    	; 0xbc4 <_ZL8writeReghj>
    writeReg(ETXST, TXSTART_INIT);
     c56:	60 e0       	ldi	r22, 0x00	; 0
     c58:	7c e0       	ldi	r23, 0x0C	; 12
     c5a:	84 e0       	ldi	r24, 0x04	; 4
     c5c:	b3 df       	rcall	.-154    	; 0xbc4 <_ZL8writeReghj>
    writeReg(ETXND, TXSTOP_INIT);
     c5e:	6f ef       	ldi	r22, 0xFF	; 255
     c60:	71 e1       	ldi	r23, 0x11	; 17
     c62:	86 e0       	ldi	r24, 0x06	; 6
     c64:	af df       	rcall	.-162    	; 0xbc4 <_ZL8writeReghj>

    writeRegByte(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN|ERXFCON_PMEN|ERXFCON_BCEN);
     c66:	61 eb       	ldi	r22, 0xB1	; 177
     c68:	88 e3       	ldi	r24, 0x38	; 56
     c6a:	a0 df       	rcall	.-192    	; 0xbac <_ZL12writeRegBytehh>
    writeReg(EPMM0, 0x303f);
     c6c:	6f e3       	ldi	r22, 0x3F	; 63
     c6e:	70 e3       	ldi	r23, 0x30	; 48
     c70:	88 e2       	ldi	r24, 0x28	; 40
     c72:	a8 df       	rcall	.-176    	; 0xbc4 <_ZL8writeReghj>
    writeReg(EPMCS, 0xf7f9);
     c74:	69 ef       	ldi	r22, 0xF9	; 249
     c76:	77 ef       	ldi	r23, 0xF7	; 247
     c78:	80 e3       	ldi	r24, 0x30	; 48
     c7a:	a4 df       	rcall	.-184    	; 0xbc4 <_ZL8writeReghj>
    writeRegByte(MACON1, MACON1_MARXEN);
     c7c:	61 e0       	ldi	r22, 0x01	; 1
     c7e:	80 ec       	ldi	r24, 0xC0	; 192
     c80:	95 df       	rcall	.-214    	; 0xbac <_ZL12writeRegBytehh>
    writeOp(ENC28J60_BIT_FIELD_SET, MACON3,
            MACON3_PADCFG0|MACON3_TXCRCEN|MACON3_FRMLNEN);
     c82:	42 e3       	ldi	r20, 0x32	; 50
     c84:	62 ec       	ldi	r22, 0xC2	; 194
     c86:	80 e8       	ldi	r24, 0x80	; 128
     c88:	2a df       	rcall	.-428    	; 0xade <_ZL7writeOphhh>
    writeReg(MAIPG, 0x0C12);
     c8a:	62 e1       	ldi	r22, 0x12	; 18
     c8c:	7c e0       	ldi	r23, 0x0C	; 12
     c8e:	86 ec       	ldi	r24, 0xC6	; 198
    writeRegByte(MABBIPG, 0x12);
     c90:	99 df       	rcall	.-206    	; 0xbc4 <_ZL8writeReghj>
     c92:	62 e1       	ldi	r22, 0x12	; 18
     c94:	84 ec       	ldi	r24, 0xC4	; 196
    writeReg(MAMXFL, MAX_FRAMELEN);
     c96:	8a df       	rcall	.-236    	; 0xbac <_ZL12writeRegBytehh>
     c98:	6c ed       	ldi	r22, 0xDC	; 220
     c9a:	75 e0       	ldi	r23, 0x05	; 5
    writeRegByte(MAADR5, macaddr[0]);
     c9c:	8a ec       	ldi	r24, 0xCA	; 202
     c9e:	92 df       	rcall	.-220    	; 0xbc4 <_ZL8writeReghj>
     ca0:	68 81       	ld	r22, Y
    writeRegByte(MAADR4, macaddr[1]);
     ca2:	84 ee       	ldi	r24, 0xE4	; 228
     ca4:	83 df       	rcall	.-250    	; 0xbac <_ZL12writeRegBytehh>
     ca6:	69 81       	ldd	r22, Y+1	; 0x01
    writeRegByte(MAADR3, macaddr[2]);
     ca8:	85 ee       	ldi	r24, 0xE5	; 229
     caa:	80 df       	rcall	.-256    	; 0xbac <_ZL12writeRegBytehh>
    writeRegByte(MAADR2, macaddr[3]);
     cac:	6a 81       	ldd	r22, Y+2	; 0x02
     cae:	82 ee       	ldi	r24, 0xE2	; 226
     cb0:	7d df       	rcall	.-262    	; 0xbac <_ZL12writeRegBytehh>
    writeRegByte(MAADR1, macaddr[4]);
     cb2:	6b 81       	ldd	r22, Y+3	; 0x03
     cb4:	83 ee       	ldi	r24, 0xE3	; 227
     cb6:	7a df       	rcall	.-268    	; 0xbac <_ZL12writeRegBytehh>
    writeRegByte(MAADR0, macaddr[5]);
     cb8:	6c 81       	ldd	r22, Y+4	; 0x04
     cba:	80 ee       	ldi	r24, 0xE0	; 224
     cbc:	77 df       	rcall	.-274    	; 0xbac <_ZL12writeRegBytehh>
    writeRegByte(MICMD, 0x00);
    return readRegByte(MIRD+1);
}

static void writePhy (uint8_t address, uint16_t data) {
    writeRegByte(MIREGADR, address);
     cbe:	6d 81       	ldd	r22, Y+5	; 0x05
     cc0:	81 ee       	ldi	r24, 0xE1	; 225
     cc2:	74 df       	rcall	.-280    	; 0xbac <_ZL12writeRegBytehh>
    writeReg(MIWR, data);
     cc4:	60 e1       	ldi	r22, 0x10	; 16
     cc6:	84 ed       	ldi	r24, 0xD4	; 212
     cc8:	71 df       	rcall	.-286    	; 0xbac <_ZL12writeRegBytehh>
     cca:	60 e0       	ldi	r22, 0x00	; 0
     ccc:	71 e0       	ldi	r23, 0x01	; 1
    while (readRegByte(MISTAT) & MISTAT_BUSY)
     cce:	86 ed       	ldi	r24, 0xD6	; 214
     cd0:	79 df       	rcall	.-270    	; 0xbc4 <_ZL8writeReghj>
     cd2:	8a ee       	ldi	r24, 0xEA	; 234
     cd4:	63 df       	rcall	.-314    	; 0xb9c <_ZL11readRegByteh>
     cd6:	80 fd       	sbrc	r24, 0
    writeRegByte(MAADR3, macaddr[2]);
    writeRegByte(MAADR2, macaddr[3]);
    writeRegByte(MAADR1, macaddr[4]);
    writeRegByte(MAADR0, macaddr[5]);
    writePhy(PHCON2, PHCON2_HDLDIS);
    SetBank(ECON1);
     cd8:	fc cf       	rjmp	.-8      	; 0xcd2 <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0xd2>
     cda:	8f e1       	ldi	r24, 0x1F	; 31
     cdc:	3a df       	rcall	.-396    	; 0xb52 <_ZL7SetBankh>
    writeOp(ENC28J60_BIT_FIELD_SET, EIE, EIE_INTIE|EIE_PKTIE);
     cde:	40 ec       	ldi	r20, 0xC0	; 192
     ce0:	6b e1       	ldi	r22, 0x1B	; 27
     ce2:	80 e8       	ldi	r24, 0x80	; 128
     ce4:	fc de       	rcall	.-520    	; 0xade <_ZL7writeOphhh>
     ce6:	44 e0       	ldi	r20, 0x04	; 4
    writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN);
     ce8:	6f e1       	ldi	r22, 0x1F	; 31
     cea:	80 e8       	ldi	r24, 0x80	; 128
     cec:	f8 de       	rcall	.-528    	; 0xade <_ZL7writeOphhh>
     cee:	82 e7       	ldi	r24, 0x72	; 114
     cf0:	55 df       	rcall	.-342    	; 0xb9c <_ZL11readRegByteh>

    uint8_t rev = readRegByte(EREVID);
     cf2:	86 30       	cpi	r24, 0x06	; 6
     cf4:	08 f0       	brcs	.+2      	; 0xcf8 <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0xf8>
     cf6:	8f 5f       	subi	r24, 0xFF	; 255
    // microchip forgot to step the number on the silicon when they
    // released the revision B7. 6 is now rev B7. We still have
    // to see what they do when they release B8. At the moment
    // there is no B8 out yet
    if (rev > 5) ++rev;
     cf8:	df 91       	pop	r29
     cfa:	cf 91       	pop	r28
     cfc:	0f 91       	pop	r16
    return rev;
}
     cfe:	08 95       	ret

00000d00 <_ZN8ENC28J608isLinkUpEv>:
     d00:	61 e1       	ldi	r22, 0x11	; 17
     d02:	84 ed       	ldi	r24, 0xD4	; 212
     d04:	53 df       	rcall	.-346    	; 0xbac <_ZL12writeRegBytehh>
    writeRegByte(address + 1, data >> 8);
}

static uint16_t readPhyByte (uint8_t address) {
    writeRegByte(MIREGADR, address);
    writeRegByte(MICMD, MICMD_MIIRD);
     d06:	61 e0       	ldi	r22, 0x01	; 1
     d08:	82 ed       	ldi	r24, 0xD2	; 210
     d0a:	50 df       	rcall	.-352    	; 0xbac <_ZL12writeRegBytehh>
    while (readRegByte(MISTAT) & MISTAT_BUSY)
     d0c:	8a ee       	ldi	r24, 0xEA	; 234
     d0e:	46 df       	rcall	.-372    	; 0xb9c <_ZL11readRegByteh>
     d10:	80 fd       	sbrc	r24, 0
     d12:	fc cf       	rjmp	.-8      	; 0xd0c <_ZN8ENC28J608isLinkUpEv+0xc>
        ;
    writeRegByte(MICMD, 0x00);
     d14:	60 e0       	ldi	r22, 0x00	; 0
     d16:	82 ed       	ldi	r24, 0xD2	; 210
     d18:	49 df       	rcall	.-366    	; 0xbac <_ZL12writeRegBytehh>
    return readRegByte(MIRD+1);
     d1a:	89 ed       	ldi	r24, 0xD9	; 217
     d1c:	3f df       	rcall	.-386    	; 0xb9c <_ZL11readRegByteh>
     d1e:	82 fb       	bst	r24, 2
    return rev;
}

bool ENC28J60::isLinkUp() {
    return (readPhyByte(PHSTAT2) >> 2) & 1;
}
     d20:	88 27       	eor	r24, r24
     d22:	80 f9       	bld	r24, 0
     d24:	08 95       	ret

00000d26 <_ZN8ENC28J6010packetSendEj>:
     d26:	af 92       	push	r10

struct transmit_status_vector {
    uint8_t bytes[7];
};

void ENC28J60::packetSend(uint16_t len) {
     d28:	bf 92       	push	r11
     d2a:	cf 92       	push	r12
     d2c:	df 92       	push	r13
     d2e:	ef 92       	push	r14
     d30:	ff 92       	push	r15
     d32:	0f 93       	push	r16
     d34:	1f 93       	push	r17
     d36:	cf 93       	push	r28
     d38:	df 93       	push	r29
     d3a:	7c 01       	movw	r14, r24
        writeOp(ENC28J60_BIT_FIELD_CLR, EIR, EIR_TXERIF|EIR_TXIF);

        // prepare new transmission
        if (retry == 0) {
            writeReg(EWRPT, TXSTART_INIT);
            writeReg(ETXND, TXSTART_INIT+len);
     d3c:	6c 01       	movw	r12, r24
     d3e:	84 ef       	ldi	r24, 0xF4	; 244
     d40:	d8 1a       	sub	r13, r24

	static void write(const void *buf, uint16_t nbyte){
		if(nbyte == 0) return;
		
		const uint8_t* buff = (const uint8_t*)(buf);
		SPDR = *buff;
     d42:	0f 2e       	mov	r0, r31
     d44:	f1 e0       	ldi	r31, 0x01	; 1
     d46:	af 2e       	mov	r10, r31
     d48:	f3 e0       	ldi	r31, 0x03	; 3
     d4a:	bf 2e       	mov	r11, r31
     d4c:	f0 2d       	mov	r31, r0
     d4e:	87 01       	movw	r16, r14
     d50:	0f 5f       	subi	r16, 0xFF	; 255
     d52:	1c 4f       	sbci	r17, 0xFC	; 252
        // the Microchip TCP/IP stack implementation used to first check
        // whether TXERIF is set and only then reset the transmit logic
        // but this has been changed in later versions; possibly they
        // have a reason for this; they don't mention this in the errata
        // sheet
        writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRST);
     d54:	40 e8       	ldi	r20, 0x80	; 128
     d56:	6f e1       	ldi	r22, 0x1F	; 31
     d58:	80 e8       	ldi	r24, 0x80	; 128
     d5a:	c1 de       	rcall	.-638    	; 0xade <_ZL7writeOphhh>
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRST);
     d5c:	40 e8       	ldi	r20, 0x80	; 128
     d5e:	6f e1       	ldi	r22, 0x1F	; 31
     d60:	80 ea       	ldi	r24, 0xA0	; 160
     d62:	bd de       	rcall	.-646    	; 0xade <_ZL7writeOphhh>
        writeOp(ENC28J60_BIT_FIELD_CLR, EIR, EIR_TXERIF|EIR_TXIF);
     d64:	4a e0       	ldi	r20, 0x0A	; 10
     d66:	6c e1       	ldi	r22, 0x1C	; 28
     d68:	80 ea       	ldi	r24, 0xA0	; 160
     d6a:	b9 de       	rcall	.-654    	; 0xade <_ZL7writeOphhh>

        // prepare new transmission
        if (retry == 0) {
            writeReg(EWRPT, TXSTART_INIT);
     d6c:	60 e0       	ldi	r22, 0x00	; 0
     d6e:	7c e0       	ldi	r23, 0x0C	; 12
     d70:	82 e0       	ldi	r24, 0x02	; 2
            writeReg(ETXND, TXSTART_INIT+len);
     d72:	28 df       	rcall	.-432    	; 0xbc4 <_ZL8writeReghj>
     d74:	b6 01       	movw	r22, r12
     d76:	86 e0       	ldi	r24, 0x06	; 6
            writeOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
     d78:	25 df       	rcall	.-438    	; 0xbc4 <_ZL8writeReghj>
     d7a:	40 e0       	ldi	r20, 0x00	; 0
     d7c:	60 e0       	ldi	r22, 0x00	; 0
     d7e:	8a e7       	ldi	r24, 0x7A	; 122
     d80:	ae de       	rcall	.-676    	; 0xade <_ZL7writeOphhh>
    }
    disableChip();
}

static void writeBuf(uint16_t len, const uint8_t* data) {
    enableChip();
     d82:	78 de       	rcall	.-784    	; 0xa74 <_ZL10enableChipv>
     d84:	e1 14       	cp	r14, r1
    if (len != 0) {
     d86:	f1 04       	cpc	r15, r1
     d88:	e1 f0       	breq	.+56     	; 0xdc2 <_ZN8ENC28J6010packetSendEj+0x9c>
     d8a:	8a e7       	ldi	r24, 0x7A	; 122
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     d8c:	8e bd       	out	0x2e, r24	; 46
     d8e:	00 00       	nop
		asm volatile("nop");
     d90:	0d b4       	in	r0, 0x2d	; 45
		while(!(SPSR & _BV(SPIF)));
     d92:	07 fe       	sbrs	r0, 7
     d94:	fd cf       	rjmp	.-6      	; 0xd90 <_ZN8ENC28J6010packetSendEj+0x6a>
     d96:	f5 01       	movw	r30, r10

	static void write(const void *buf, uint16_t nbyte){
		if(nbyte == 0) return;
		
		const uint8_t* buff = (const uint8_t*)(buf);
		SPDR = *buff;
     d98:	80 81       	ld	r24, Z
     d9a:	8e bd       	out	0x2e, r24	; 46
     d9c:	f1 e0       	ldi	r31, 0x01	; 1
		while(--nbyte){
     d9e:	ef 16       	cp	r14, r31
     da0:	f1 04       	cpc	r15, r1
     da2:	59 f0       	breq	.+22     	; 0xdba <_ZN8ENC28J6010packetSendEj+0x94>
     da4:	e2 e0       	ldi	r30, 0x02	; 2
     da6:	f3 e0       	ldi	r31, 0x03	; 3
     da8:	00 00       	nop
			asm volatile("nop");
     daa:	0d b4       	in	r0, 0x2d	; 45
			while (!(SPSR & _BV(SPIF))) ;
     dac:	07 fe       	sbrs	r0, 7
     dae:	fd cf       	rjmp	.-6      	; 0xdaa <_ZN8ENC28J6010packetSendEj+0x84>
     db0:	81 91       	ld	r24, Z+
			SPDR = *++buff;
     db2:	8e bd       	out	0x2e, r24	; 46
     db4:	e0 17       	cp	r30, r16
	static void write(const void *buf, uint16_t nbyte){
		if(nbyte == 0) return;
		
		const uint8_t* buff = (const uint8_t*)(buf);
		SPDR = *buff;
		while(--nbyte){
     db6:	f1 07       	cpc	r31, r17
     db8:	b9 f7       	brne	.-18     	; 0xda8 <_ZN8ENC28J6010packetSendEj+0x82>
			asm volatile("nop");
			while (!(SPSR & _BV(SPIF))) ;
			SPDR = *++buff;
		}
		asm volatile("nop");
     dba:	00 00       	nop
		while (!(SPSR & _BV(SPIF))) ;
     dbc:	0d b4       	in	r0, 0x2d	; 45
     dbe:	07 fe       	sbrs	r0, 7
        SPI.write8(ENC28J60_WRITE_BUF_MEM);

        SPI.write(data, len);
    }
    disableChip();
     dc0:	fd cf       	rjmp	.-6      	; 0xdbc <_ZN8ENC28J6010packetSendEj+0x96>
            writeOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
            writeBuf(len, buffer);
        }

        // initiate transmission
        writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
     dc2:	63 de       	rcall	.-826    	; 0xa8a <_ZL11disableChipv>
     dc4:	48 e0       	ldi	r20, 0x08	; 8
     dc6:	6f e1       	ldi	r22, 0x1F	; 31
     dc8:	80 e8       	ldi	r24, 0x80	; 128
     dca:	89 de       	rcall	.-750    	; 0xade <_ZL7writeOphhh>
        // wait until transmission has finished; referring to the data sheet and
        // to the errata (Errata Issue 13; Example 1) you only need to wait until either
        // TXIF or TXERIF gets set; however this leads to hangs; apparently Microchip
        // realized this and in later implementations of their tcp/ip stack they introduced
        // a counter to avoid hangs; of course they didn't update the errata sheet
        uint16_t count = 0;
     dcc:	c0 e0       	ldi	r28, 0x00	; 0
     dce:	d0 e0       	ldi	r29, 0x00	; 0
        while ((readRegByte(EIR) & (EIR_TXIF | EIR_TXERIF)) == 0 && ++count < 1000U)
     dd0:	8c e1       	ldi	r24, 0x1C	; 28
     dd2:	e4 de       	rcall	.-568    	; 0xb9c <_ZL11readRegByteh>
     dd4:	8a 70       	andi	r24, 0x0A	; 10
     dd6:	31 f4       	brne	.+12     	; 0xde4 <_ZN8ENC28J6010packetSendEj+0xbe>
     dd8:	21 96       	adiw	r28, 0x01	; 1
     dda:	c8 3e       	cpi	r28, 0xE8	; 232
     ddc:	83 e0       	ldi	r24, 0x03	; 3
     dde:	d8 07       	cpc	r29, r24
     de0:	b9 f7       	brne	.-18     	; 0xdd0 <_ZN8ENC28J6010packetSendEj+0xaa>
     de2:	0c c0       	rjmp	.+24     	; 0xdfc <_ZN8ENC28J6010packetSendEj+0xd6>
            ;

        if (!(readRegByte(EIR) & EIR_TXERIF) && count < 1000U) {
     de4:	8c e1       	ldi	r24, 0x1C	; 28
     de6:	da de       	rcall	.-588    	; 0xb9c <_ZL11readRegByteh>
     de8:	81 fd       	sbrc	r24, 1
     dea:	03 c0       	rjmp	.+6      	; 0xdf2 <_ZN8ENC28J6010packetSendEj+0xcc>
     dec:	c8 3e       	cpi	r28, 0xE8	; 232
     dee:	d3 40       	sbci	r29, 0x03	; 3
            // no error; start new transmission
            break;
        }

        // cancel previous transmission if stuck
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRTS);
     df0:	40 f0       	brcs	.+16     	; 0xe02 <_ZN8ENC28J6010packetSendEj+0xdc>
     df2:	48 e0       	ldi	r20, 0x08	; 8
     df4:	6f e1       	ldi	r22, 0x1F	; 31
     df6:	80 ea       	ldi	r24, 0xA0	; 160
     df8:	72 de       	rcall	.-796    	; 0xade <_ZL7writeOphhh>
};

void ENC28J60::packetSend(uint16_t len) {
    uint8_t retry = 0;

    while (1) {
     dfa:	ac cf       	rjmp	.-168    	; 0xd54 <_ZN8ENC28J6010packetSendEj+0x2e>
        // a counter to avoid hangs; of course they didn't update the errata sheet
        uint16_t count = 0;
        while ((readRegByte(EIR) & (EIR_TXIF | EIR_TXERIF)) == 0 && ++count < 1000U)
            ;

        if (!(readRegByte(EIR) & EIR_TXERIF) && count < 1000U) {
     dfc:	8c e1       	ldi	r24, 0x1C	; 28
     dfe:	ce de       	rcall	.-612    	; 0xb9c <_ZL11readRegByteh>
     e00:	f8 cf       	rjmp	.-16     	; 0xdf2 <_ZN8ENC28J6010packetSendEj+0xcc>
     e02:	df 91       	pop	r29
        }

        // cancel previous transmission if stuck
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRTS);
    }
}
     e04:	cf 91       	pop	r28
     e06:	1f 91       	pop	r17
     e08:	0f 91       	pop	r16
     e0a:	ff 90       	pop	r15
     e0c:	ef 90       	pop	r14
     e0e:	df 90       	pop	r13
     e10:	cf 90       	pop	r12
     e12:	bf 90       	pop	r11
     e14:	af 90       	pop	r10
     e16:	08 95       	ret

00000e18 <_ZN8ENC28J6013packetReceiveEv>:
     e18:	0f 93       	push	r16


uint16_t ENC28J60::packetReceive() {
     e1a:	1f 93       	push	r17
     e1c:	cf 93       	push	r28
     e1e:	df 93       	push	r29
     e20:	00 d0       	rcall	.+0      	; 0xe22 <_ZN8ENC28J6013packetReceiveEv+0xa>
     e22:	00 d0       	rcall	.+0      	; 0xe24 <_ZN8ENC28J6013packetReceiveEv+0xc>
     e24:	cd b7       	in	r28, 0x3d	; 61
     e26:	de b7       	in	r29, 0x3e	; 62
    static uint16_t gNextPacketPtr = RXSTART_INIT;
    static bool     unreleasedPacket = false;
    uint16_t len = 0;

    if (unreleasedPacket) {
     e28:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <_ZZN8ENC28J6013packetReceiveEvE16unreleasedPacket>
     e2c:	88 23       	and	r24, r24
     e2e:	91 f0       	breq	.+36     	; 0xe54 <_ZN8ENC28J6013packetReceiveEv+0x3c>
        if (gNextPacketPtr == 0)
     e30:	60 91 f8 02 	lds	r22, 0x02F8	; 0x8002f8 <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr>
     e34:	70 91 f9 02 	lds	r23, 0x02F9	; 0x8002f9 <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr+0x1>
     e38:	61 15       	cp	r22, r1
     e3a:	71 05       	cpc	r23, r1
     e3c:	29 f4       	brne	.+10     	; 0xe48 <_ZN8ENC28J6013packetReceiveEv+0x30>
            writeReg(ERXRDPT, RXSTOP_INIT);
     e3e:	6f ef       	ldi	r22, 0xFF	; 255
     e40:	7b e0       	ldi	r23, 0x0B	; 11
     e42:	8c e0       	ldi	r24, 0x0C	; 12
     e44:	bf de       	rcall	.-642    	; 0xbc4 <_ZL8writeReghj>
     e46:	04 c0       	rjmp	.+8      	; 0xe50 <_ZN8ENC28J6013packetReceiveEv+0x38>
        else
            writeReg(ERXRDPT, gNextPacketPtr - 1);
     e48:	61 50       	subi	r22, 0x01	; 1
     e4a:	71 09       	sbc	r23, r1
     e4c:	8c e0       	ldi	r24, 0x0C	; 12
     e4e:	ba de       	rcall	.-652    	; 0xbc4 <_ZL8writeReghj>
        unreleasedPacket = false;
     e50:	10 92 fa 02 	sts	0x02FA, r1	; 0x8002fa <_ZZN8ENC28J6013packetReceiveEvE16unreleasedPacket>
    }

    if (readRegByte(EPKTCNT) > 0) {
     e54:	89 e3       	ldi	r24, 0x39	; 57
     e56:	a2 de       	rcall	.-700    	; 0xb9c <_ZL11readRegByteh>
     e58:	88 23       	and	r24, r24
     e5a:	a9 f1       	breq	.+106    	; 0xec6 <_ZN8ENC28J6013packetReceiveEv+0xae>
        writeReg(ERDPT, gNextPacketPtr);
     e5c:	60 91 f8 02 	lds	r22, 0x02F8	; 0x8002f8 <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr>
     e60:	70 91 f9 02 	lds	r23, 0x02F9	; 0x8002f9 <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr+0x1>
     e64:	80 e0       	ldi	r24, 0x00	; 0
     e66:	ae de       	rcall	.-676    	; 0xbc4 <_ZL8writeReghj>
            uint16_t nextPacket;
            uint16_t byteCount;
            uint16_t status;
        } header;

        readBuf(sizeof header, (uint8_t*) &header);
     e68:	be 01       	movw	r22, r28
     e6a:	6f 5f       	subi	r22, 0xFF	; 255
     e6c:	7f 4f       	sbci	r23, 0xFF	; 255
     e6e:	86 e0       	ldi	r24, 0x06	; 6
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	4d de       	rcall	.-870    	; 0xb0e <_ZL7readBufjPh>

        gNextPacketPtr  = header.nextPacket;
     e74:	89 81       	ldd	r24, Y+1	; 0x01
     e76:	9a 81       	ldd	r25, Y+2	; 0x02
     e78:	90 93 f9 02 	sts	0x02F9, r25	; 0x8002f9 <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr+0x1>
     e7c:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr>
        len = header.byteCount - 4; //remove the CRC count
        if (len>bufferSize-1)
            len=bufferSize-1;
        if ((header.status & 0x80)==0)
     e80:	8d 81       	ldd	r24, Y+5	; 0x05
     e82:	87 ff       	sbrs	r24, 7
     e84:	12 c0       	rjmp	.+36     	; 0xeaa <_ZN8ENC28J6013packetReceiveEv+0x92>

        readBuf(sizeof header, (uint8_t*) &header);

        gNextPacketPtr  = header.nextPacket;
        len = header.byteCount - 4; //remove the CRC count
        if (len>bufferSize-1)
     e86:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <_ZN8ENC28J6010bufferSizeE>
     e8a:	90 91 00 03 	lds	r25, 0x0300	; 0x800300 <_ZN8ENC28J6010bufferSizeE+0x1>
     e8e:	01 97       	sbiw	r24, 0x01	; 1
        } header;

        readBuf(sizeof header, (uint8_t*) &header);

        gNextPacketPtr  = header.nextPacket;
        len = header.byteCount - 4; //remove the CRC count
     e90:	0b 81       	ldd	r16, Y+3	; 0x03
     e92:	1c 81       	ldd	r17, Y+4	; 0x04
     e94:	04 50       	subi	r16, 0x04	; 4
     e96:	11 09       	sbc	r17, r1
     e98:	80 17       	cp	r24, r16
     e9a:	91 07       	cpc	r25, r17
     e9c:	08 f4       	brcc	.+2      	; 0xea0 <_ZN8ENC28J6013packetReceiveEv+0x88>
        if (len>bufferSize-1)
            len=bufferSize-1;
        if ((header.status & 0x80)==0)
            len = 0;
        else
            readBuf(len, buffer);
     e9e:	8c 01       	movw	r16, r24
     ea0:	61 e0       	ldi	r22, 0x01	; 1
     ea2:	73 e0       	ldi	r23, 0x03	; 3
     ea4:	c8 01       	movw	r24, r16
     ea6:	33 de       	rcall	.-922    	; 0xb0e <_ZL7readBufjPh>
     ea8:	02 c0       	rjmp	.+4      	; 0xeae <_ZN8ENC28J6013packetReceiveEv+0x96>
        gNextPacketPtr  = header.nextPacket;
        len = header.byteCount - 4; //remove the CRC count
        if (len>bufferSize-1)
            len=bufferSize-1;
        if ((header.status & 0x80)==0)
            len = 0;
     eaa:	00 e0       	ldi	r16, 0x00	; 0
     eac:	10 e0       	ldi	r17, 0x00	; 0
        else
            readBuf(len, buffer);
        buffer[len] = 0;
     eae:	f8 01       	movw	r30, r16
     eb0:	ef 5f       	subi	r30, 0xFF	; 255
     eb2:	fc 4f       	sbci	r31, 0xFC	; 252
     eb4:	10 82       	st	Z, r1
        unreleasedPacket = true;
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <_ZZN8ENC28J6013packetReceiveEvE16unreleasedPacket>

        writeOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
     ebc:	40 e4       	ldi	r20, 0x40	; 64
     ebe:	6e e1       	ldi	r22, 0x1E	; 30
     ec0:	80 e8       	ldi	r24, 0x80	; 128
     ec2:	0d de       	rcall	.-998    	; 0xade <_ZL7writeOphhh>
     ec4:	02 c0       	rjmp	.+4      	; 0xeca <_ZN8ENC28J6013packetReceiveEv+0xb2>


uint16_t ENC28J60::packetReceive() {
    static uint16_t gNextPacketPtr = RXSTART_INIT;
    static bool     unreleasedPacket = false;
    uint16_t len = 0;
     ec6:	00 e0       	ldi	r16, 0x00	; 0
     ec8:	10 e0       	ldi	r17, 0x00	; 0
        unreleasedPacket = true;

        writeOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
    }
    return len;
}
     eca:	c8 01       	movw	r24, r16
     ecc:	26 96       	adiw	r28, 0x06	; 6
     ece:	0f b6       	in	r0, 0x3f	; 63
     ed0:	f8 94       	cli
     ed2:	de bf       	out	0x3e, r29	; 62
     ed4:	0f be       	out	0x3f, r0	; 63
     ed6:	cd bf       	out	0x3d, r28	; 61
     ed8:	df 91       	pop	r29
     eda:	cf 91       	pop	r28
     edc:	1f 91       	pop	r17
     ede:	0f 91       	pop	r16
     ee0:	08 95       	ret

00000ee2 <_ZN9EtherCard5beginEPKhRVhS3_h>:
uint16_t EtherCard::delaycnt = 0; //request gateway ARP lookup

uint8_t Ethernet::buffer[ETHER_CARD_BUFFER_SIZE]; // tcp/ip send and receive buffer

uint8_t EtherCard::begin (const uint8_t* macaddr,
                          Register& csDDR, Register& csPort, uint8_t csPin) {
     ee2:	ef 92       	push	r14
     ee4:	ff 92       	push	r15
     ee6:	0f 93       	push	r16
     ee8:	cf 93       	push	r28
     eea:	df 93       	push	r29
     eec:	eb 01       	movw	r28, r22
     eee:	7a 01       	movw	r14, r20
     ef0:	02 2f       	mov	r16, r18

    copyMac(mymac, macaddr);
     ef2:	bc 01       	movw	r22, r24
     ef4:	8b e1       	ldi	r24, 0x1B	; 27
     ef6:	95 e0       	ldi	r25, 0x05	; 5
     ef8:	c9 d3       	rcall	.+1938   	; 0x168c <_ZN9EtherCard7copyMacEPhPKh>
    return initialize(ETHER_CARD_BUFFER_SIZE, mymac, csDDR, csPort, csPin);
     efa:	97 01       	movw	r18, r14
     efc:	ae 01       	movw	r20, r28
     efe:	6b e1       	ldi	r22, 0x1B	; 27
     f00:	75 e0       	ldi	r23, 0x05	; 5
     f02:	80 e0       	ldi	r24, 0x00	; 0
     f04:	92 e0       	ldi	r25, 0x02	; 2
     f06:	7c de       	rcall	.-776    	; 0xc00 <_ZN8ENC28J6010initializeEjPKhRVhS3_h>
}
     f08:	df 91       	pop	r29
     f0a:	cf 91       	pop	r28
     f0c:	0f 91       	pop	r16
     f0e:	ff 90       	pop	r15
     f10:	ef 90       	pop	r14
     f12:	08 95       	ret

00000f14 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_>:

bool EtherCard::staticSetup (const uint8_t* my_ip,
                             const uint8_t* gw_ip,
                             const uint8_t* dns_ip,
                             const uint8_t* mask) {
     f14:	ef 92       	push	r14
     f16:	ff 92       	push	r15
     f18:	0f 93       	push	r16
     f1a:	1f 93       	push	r17
     f1c:	cf 93       	push	r28
     f1e:	df 93       	push	r29
     f20:	7b 01       	movw	r14, r22
     f22:	8a 01       	movw	r16, r20
     f24:	e9 01       	movw	r28, r18

    if (my_ip != 0)
     f26:	00 97       	sbiw	r24, 0x00	; 0
     f28:	21 f0       	breq	.+8      	; 0xf32 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x1e>
        copyIp(myip, my_ip);
     f2a:	bc 01       	movw	r22, r24
     f2c:	87 e1       	ldi	r24, 0x17	; 23
     f2e:	95 e0       	ldi	r25, 0x05	; 5
     f30:	a0 d3       	rcall	.+1856   	; 0x1672 <_ZN9EtherCard6copyIpEPhPKh>
    if (gw_ip != 0)
     f32:	e1 14       	cp	r14, r1
     f34:	f1 04       	cpc	r15, r1
     f36:	11 f0       	breq	.+4      	; 0xf3c <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x28>
        setGwIp(gw_ip);
     f38:	c7 01       	movw	r24, r14
     f3a:	bd d1       	rcall	.+890    	; 0x12b6 <_ZN9EtherCard7setGwIpEPKh>
    if (dns_ip != 0)
     f3c:	01 15       	cp	r16, r1
     f3e:	11 05       	cpc	r17, r1
     f40:	21 f0       	breq	.+8      	; 0xf4a <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x36>
        copyIp(dnsip, dns_ip);
     f42:	b8 01       	movw	r22, r16
     f44:	87 e0       	ldi	r24, 0x07	; 7
     f46:	95 e0       	ldi	r25, 0x05	; 5
     f48:	94 d3       	rcall	.+1832   	; 0x1672 <_ZN9EtherCard6copyIpEPhPKh>
    if(mask != 0)
     f4a:	20 97       	sbiw	r28, 0x00	; 0
     f4c:	21 f0       	breq	.+8      	; 0xf56 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x42>
        copyIp(netmask, mask);
     f4e:	be 01       	movw	r22, r28
     f50:	83 e1       	ldi	r24, 0x13	; 19
     f52:	95 e0       	ldi	r25, 0x05	; 5
    updateBroadcastAddress();
     f54:	8e d3       	rcall	.+1820   	; 0x1672 <_ZN9EtherCard6copyIpEPhPKh>
     f56:	bb d1       	rcall	.+886    	; 0x12ce <_ZN9EtherCard22updateBroadcastAddressEv>
    delaycnt = 0; //request gateway ARP lookup
     f58:	10 92 02 05 	sts	0x0502, r1	; 0x800502 <_ZN9EtherCard8delaycntE+0x1>
     f5c:	10 92 01 05 	sts	0x0501, r1	; 0x800501 <_ZN9EtherCard8delaycntE>
    return true;
}
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	df 91       	pop	r29
     f64:	cf 91       	pop	r28
     f66:	1f 91       	pop	r17
     f68:	0f 91       	pop	r16
     f6a:	ff 90       	pop	r15
     f6c:	ef 90       	pop	r14
     f6e:	08 95       	ret

00000f70 <_ZL13fill_checksumhhjh>:
    for(uint8_t i=0; i<IP_LEN; i++)
        broadcastip[i] = myip[i] | ~netmask[i];
}

void EtherCard::registerPingCallback (void (*callback)(uint8_t *srcip)) {
    icmp_cb = callback;
     f70:	cf 92       	push	r12
     f72:	df 92       	push	r13
     f74:	ef 92       	push	r14
     f76:	ff 92       	push	r15
     f78:	cf 93       	push	r28
     f7a:	df 93       	push	r29
     f7c:	c6 2f       	mov	r28, r22
     f7e:	d0 e0       	ldi	r29, 0x00	; 0
     f80:	cf 5f       	subi	r28, 0xFF	; 255
     f82:	dc 4f       	sbci	r29, 0xFC	; 252
     f84:	21 30       	cpi	r18, 0x01	; 1
     f86:	81 f4       	brne	.+32     	; 0xfa8 <_ZL13fill_checksumhhjh+0x38>
     f88:	6a 01       	movw	r12, r20
     f8a:	99 e0       	ldi	r25, 0x09	; 9
     f8c:	c9 0e       	add	r12, r25
     f8e:	d1 1c       	adc	r13, r1
     f90:	e1 2c       	mov	r14, r1
     f92:	f1 2c       	mov	r15, r1
     f94:	03 c0       	rjmp	.+6      	; 0xf9c <_ZL13fill_checksumhhjh+0x2c>
     f96:	c1 2c       	mov	r12, r1
     f98:	d1 2c       	mov	r13, r1
     f9a:	76 01       	movw	r14, r12
     f9c:	42 30       	cpi	r20, 0x02	; 2
     f9e:	51 05       	cpc	r21, r1
     fa0:	28 f1       	brcs	.+74     	; 0xfec <_ZL13fill_checksumhhjh+0x7c>
     fa2:	fe 01       	movw	r30, r28
     fa4:	da 01       	movw	r26, r20
     fa6:	09 c0       	rjmp	.+18     	; 0xfba <_ZL13fill_checksumhhjh+0x4a>
     fa8:	22 30       	cpi	r18, 0x02	; 2
     faa:	a9 f7       	brne	.-22     	; 0xf96 <_ZL13fill_checksumhhjh+0x26>
     fac:	6a 01       	movw	r12, r20
     fae:	92 e0       	ldi	r25, 0x02	; 2
     fb0:	c9 1a       	sub	r12, r25
     fb2:	d1 08       	sbc	r13, r1
     fb4:	e1 2c       	mov	r14, r1
     fb6:	f1 2c       	mov	r15, r1
     fb8:	f1 cf       	rjmp	.-30     	; 0xf9c <_ZL13fill_checksumhhjh+0x2c>
     fba:	20 81       	ld	r18, Z
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	32 2f       	mov	r19, r18
     fc0:	22 27       	eor	r18, r18
     fc2:	91 81       	ldd	r25, Z+1	; 0x01
     fc4:	29 2b       	or	r18, r25
     fc6:	c2 0e       	add	r12, r18
     fc8:	d3 1e       	adc	r13, r19
     fca:	e1 1c       	adc	r14, r1
     fcc:	f1 1c       	adc	r15, r1
     fce:	32 96       	adiw	r30, 0x02	; 2
     fd0:	12 97       	sbiw	r26, 0x02	; 2
     fd2:	a2 30       	cpi	r26, 0x02	; 2
     fd4:	b1 05       	cpc	r27, r1
     fd6:	88 f7       	brcc	.-30     	; 0xfba <_ZL13fill_checksumhhjh+0x4a>
     fd8:	9a 01       	movw	r18, r20
     fda:	22 50       	subi	r18, 0x02	; 2
     fdc:	31 09       	sbc	r19, r1
     fde:	2e 7f       	andi	r18, 0xFE	; 254
     fe0:	2e 5f       	subi	r18, 0xFE	; 254
     fe2:	3f 4f       	sbci	r19, 0xFF	; 255
     fe4:	c2 0f       	add	r28, r18
     fe6:	d3 1f       	adc	r29, r19
     fe8:	41 70       	andi	r20, 0x01	; 1
     fea:	55 27       	eor	r21, r21
     fec:	45 2b       	or	r20, r21
     fee:	61 f0       	breq	.+24     	; 0x1008 <_ZL13fill_checksumhhjh+0x98>
     ff0:	48 81       	ld	r20, Y
     ff2:	50 e0       	ldi	r21, 0x00	; 0
     ff4:	60 e0       	ldi	r22, 0x00	; 0
     ff6:	70 e0       	ldi	r23, 0x00	; 0
     ff8:	76 2f       	mov	r23, r22
     ffa:	65 2f       	mov	r22, r21
     ffc:	54 2f       	mov	r21, r20
     ffe:	44 27       	eor	r20, r20
    1000:	c4 0e       	add	r12, r20
    1002:	d5 1e       	adc	r13, r21
    1004:	e6 1e       	adc	r14, r22
    1006:	f7 1e       	adc	r15, r23
    1008:	a7 01       	movw	r20, r14
    100a:	66 27       	eor	r22, r22
    100c:	77 27       	eor	r23, r23
    100e:	41 15       	cp	r20, r1
    1010:	51 05       	cpc	r21, r1
    1012:	61 05       	cpc	r22, r1
    1014:	71 05       	cpc	r23, r1
    1016:	71 f0       	breq	.+28     	; 0x1034 <_ZL13fill_checksumhhjh+0xc4>
    1018:	ee 24       	eor	r14, r14
    101a:	ff 24       	eor	r15, r15
    101c:	c4 0e       	add	r12, r20
    101e:	d5 1e       	adc	r13, r21
    1020:	e6 1e       	adc	r14, r22
    1022:	f7 1e       	adc	r15, r23
    1024:	a7 01       	movw	r20, r14
    1026:	66 27       	eor	r22, r22
    1028:	77 27       	eor	r23, r23
    102a:	41 15       	cp	r20, r1
    102c:	51 05       	cpc	r21, r1
    102e:	61 05       	cpc	r22, r1
    1030:	71 05       	cpc	r23, r1
    1032:	91 f7       	brne	.-28     	; 0x1018 <_ZL13fill_checksumhhjh+0xa8>
    1034:	c0 94       	com	r12
    1036:	d0 94       	com	r13
    1038:	e8 2f       	mov	r30, r24
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	ef 5f       	subi	r30, 0xFF	; 255
    103e:	fc 4f       	sbci	r31, 0xFC	; 252
    1040:	d0 82       	st	Z, r13
    1042:	c1 82       	std	Z+1, r12	; 0x01
    1044:	df 91       	pop	r29
    1046:	cf 91       	pop	r28
    1048:	ff 90       	pop	r15
    104a:	ef 90       	pop	r14
    104c:	df 90       	pop	r13
    104e:	cf 90       	pop	r12
    1050:	08 95       	ret

00001052 <_ZL6is_lanPKhS0_>:
    1052:	cf 93       	push	r28
    1054:	df 93       	push	r29
    1056:	fc 01       	movw	r30, r24
    1058:	20 81       	ld	r18, Z
    105a:	22 23       	and	r18, r18
    105c:	d1 f0       	breq	.+52     	; 0x1092 <_ZL6is_lanPKhS0_+0x40>
    105e:	fb 01       	movw	r30, r22
    1060:	30 81       	ld	r19, Z
    1062:	33 23       	and	r19, r19
    1064:	c1 f0       	breq	.+48     	; 0x1096 <_ZL6is_lanPKhS0_+0x44>
    1066:	23 27       	eor	r18, r19
    1068:	30 91 13 05 	lds	r19, 0x0513	; 0x800513 <_ZN9EtherCard7netmaskE>
    106c:	23 23       	and	r18, r19
    106e:	a9 f4       	brne	.+42     	; 0x109a <_ZL6is_lanPKhS0_+0x48>
    1070:	dc 01       	movw	r26, r24
    1072:	11 96       	adiw	r26, 0x01	; 1
    1074:	31 96       	adiw	r30, 0x01	; 1
    1076:	c4 e1       	ldi	r28, 0x14	; 20
    1078:	d5 e0       	ldi	r29, 0x05	; 5
    107a:	04 96       	adiw	r24, 0x04	; 4
    107c:	4d 91       	ld	r20, X+
    107e:	21 91       	ld	r18, Z+
    1080:	39 91       	ld	r19, Y+
    1082:	24 27       	eor	r18, r20
    1084:	23 23       	and	r18, r19
    1086:	59 f4       	brne	.+22     	; 0x109e <_ZL6is_lanPKhS0_+0x4c>
    1088:	a8 17       	cp	r26, r24
    108a:	b9 07       	cpc	r27, r25
    108c:	b9 f7       	brne	.-18     	; 0x107c <_ZL6is_lanPKhS0_+0x2a>
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	07 c0       	rjmp	.+14     	; 0x10a0 <_ZL6is_lanPKhS0_+0x4e>
    1092:	80 e0       	ldi	r24, 0x00	; 0
    1094:	05 c0       	rjmp	.+10     	; 0x10a0 <_ZL6is_lanPKhS0_+0x4e>
    1096:	80 e0       	ldi	r24, 0x00	; 0
    1098:	03 c0       	rjmp	.+6      	; 0x10a0 <_ZL6is_lanPKhS0_+0x4e>
    109a:	80 e0       	ldi	r24, 0x00	; 0
    109c:	01 c0       	rjmp	.+2      	; 0x10a0 <_ZL6is_lanPKhS0_+0x4e>
    109e:	80 e0       	ldi	r24, 0x00	; 0
    10a0:	df 91       	pop	r29
    10a2:	cf 91       	pop	r28
    10a4:	08 95       	ret

000010a6 <_ZL20fill_ip_hdr_checksumv>:
    10a6:	e1 e0       	ldi	r30, 0x01	; 1
    10a8:	f3 e0       	ldi	r31, 0x03	; 3
    10aa:	10 8e       	std	Z+24, r1	; 0x18
    10ac:	11 8e       	std	Z+25, r1	; 0x19
    10ae:	80 e4       	ldi	r24, 0x40	; 64
    10b0:	84 8b       	std	Z+20, r24	; 0x14
    10b2:	15 8a       	std	Z+21, r1	; 0x15
    10b4:	86 8b       	std	Z+22, r24	; 0x16
    10b6:	20 e0       	ldi	r18, 0x00	; 0
    10b8:	44 e1       	ldi	r20, 0x14	; 20
    10ba:	50 e0       	ldi	r21, 0x00	; 0
    10bc:	6e e0       	ldi	r22, 0x0E	; 14
    10be:	88 e1       	ldi	r24, 0x18	; 24
    10c0:	57 cf       	rjmp	.-338    	; 0xf70 <_ZL13fill_checksumhhjh>
    10c2:	08 95       	ret

000010c4 <_ZL7setMACsPKh>:
    10c4:	bc 01       	movw	r22, r24
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	93 e0       	ldi	r25, 0x03	; 3
    10ca:	e0 d2       	rcall	.+1472   	; 0x168c <_ZN9EtherCard7copyMacEPhPKh>
    10cc:	6b e1       	ldi	r22, 0x1B	; 27
    10ce:	75 e0       	ldi	r23, 0x05	; 5
    10d0:	87 e0       	ldi	r24, 0x07	; 7
    10d2:	93 e0       	ldi	r25, 0x03	; 3
    10d4:	db c2       	rjmp	.+1462   	; 0x168c <_ZN9EtherCard7copyMacEPhPKh>
    10d6:	08 95       	ret

000010d8 <_ZL11make_eth_ipv>:
    10d8:	87 e0       	ldi	r24, 0x07	; 7
    10da:	93 e0       	ldi	r25, 0x03	; 3
    10dc:	f3 df       	rcall	.-26     	; 0x10c4 <_ZL7setMACsPKh>
    10de:	6b e1       	ldi	r22, 0x1B	; 27
    10e0:	73 e0       	ldi	r23, 0x03	; 3
    10e2:	8f e1       	ldi	r24, 0x1F	; 31
    10e4:	93 e0       	ldi	r25, 0x03	; 3
    10e6:	c5 d2       	rcall	.+1418   	; 0x1672 <_ZN9EtherCard6copyIpEPhPKh>
    10e8:	67 e1       	ldi	r22, 0x17	; 23
    10ea:	75 e0       	ldi	r23, 0x05	; 5
    10ec:	8b e1       	ldi	r24, 0x1B	; 27
    10ee:	93 e0       	ldi	r25, 0x03	; 3
    10f0:	c0 d2       	rcall	.+1408   	; 0x1672 <_ZN9EtherCard6copyIpEPhPKh>
    10f2:	d9 cf       	rjmp	.-78     	; 0x10a6 <_ZL20fill_ip_hdr_checksumv>
    10f4:	08 95       	ret

000010f6 <_ZL12setMACandIPsPKhS0_>:
    10f6:	cf 93       	push	r28
    10f8:	df 93       	push	r29
    10fa:	eb 01       	movw	r28, r22
    10fc:	e3 df       	rcall	.-58     	; 0x10c4 <_ZL7setMACsPKh>
    10fe:	be 01       	movw	r22, r28
    1100:	8f e1       	ldi	r24, 0x1F	; 31
    1102:	93 e0       	ldi	r25, 0x03	; 3
    1104:	b6 d2       	rcall	.+1388   	; 0x1672 <_ZN9EtherCard6copyIpEPhPKh>
    1106:	67 e1       	ldi	r22, 0x17	; 23
    1108:	75 e0       	ldi	r23, 0x05	; 5
    110a:	8b e1       	ldi	r24, 0x1B	; 27
    110c:	93 e0       	ldi	r25, 0x03	; 3
    110e:	b1 d2       	rcall	.+1378   	; 0x1672 <_ZN9EtherCard6copyIpEPhPKh>
    1110:	df 91       	pop	r29
    1112:	cf 91       	pop	r28
    1114:	08 95       	ret

00001116 <_ZL16client_store_macPhS_>:
    1116:	cf 93       	push	r28
    1118:	df 93       	push	r29
    111a:	eb 01       	movw	r28, r22
    111c:	44 e0       	ldi	r20, 0x04	; 4
    111e:	50 e0       	ldi	r21, 0x00	; 0
    1120:	bc 01       	movw	r22, r24
    1122:	8d e1       	ldi	r24, 0x1D	; 29
    1124:	93 e0       	ldi	r25, 0x03	; 3
    1126:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <memcmp>
    112a:	89 2b       	or	r24, r25
    112c:	31 f4       	brne	.+12     	; 0x113a <_ZL16client_store_macPhS_+0x24>
    112e:	67 e1       	ldi	r22, 0x17	; 23
    1130:	73 e0       	ldi	r23, 0x03	; 3
    1132:	ce 01       	movw	r24, r28
    1134:	ab d2       	rcall	.+1366   	; 0x168c <_ZN9EtherCard7copyMacEPhPKh>
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	01 c0       	rjmp	.+2      	; 0x113c <_ZL16client_store_macPhS_+0x26>
    113a:	80 e0       	ldi	r24, 0x00	; 0
    113c:	df 91       	pop	r29
    113e:	cf 91       	pop	r28
    1140:	08 95       	ret

00001142 <_ZL17client_arp_whohasPh>:
    1142:	0f 93       	push	r16
    1144:	1f 93       	push	r17
    1146:	cf 93       	push	r28
    1148:	8c 01       	movw	r16, r24
    114a:	85 e2       	ldi	r24, 0x25	; 37
    114c:	92 e0       	ldi	r25, 0x02	; 2
    114e:	ba df       	rcall	.-140    	; 0x10c4 <_ZL7setMACsPKh>
    1150:	e1 e0       	ldi	r30, 0x01	; 1
    1152:	f3 e0       	ldi	r31, 0x03	; 3
    1154:	88 e0       	ldi	r24, 0x08	; 8
    1156:	84 87       	std	Z+12, r24	; 0x0c
    1158:	c6 e0       	ldi	r28, 0x06	; 6
    115a:	c5 87       	std	Z+13, r28	; 0x0d
    115c:	48 e0       	ldi	r20, 0x08	; 8
    115e:	50 e0       	ldi	r21, 0x00	; 0
    1160:	6f e7       	ldi	r22, 0x7F	; 127
    1162:	72 e0       	ldi	r23, 0x02	; 2
    1164:	8f e0       	ldi	r24, 0x0F	; 15
    1166:	93 e0       	ldi	r25, 0x03	; 3
    1168:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <memcpy_P>
    116c:	e1 e2       	ldi	r30, 0x21	; 33
    116e:	f3 e0       	ldi	r31, 0x03	; 3
    1170:	df 01       	movw	r26, r30
    1172:	1d 92       	st	X+, r1
    1174:	ca 95       	dec	r28
    1176:	e9 f7       	brne	.-6      	; 0x1172 <_ZL17client_arp_whohasPh+0x30>
    1178:	6b e1       	ldi	r22, 0x1B	; 27
    117a:	75 e0       	ldi	r23, 0x05	; 5
    117c:	87 e1       	ldi	r24, 0x17	; 23
    117e:	93 e0       	ldi	r25, 0x03	; 3
    1180:	85 d2       	rcall	.+1290   	; 0x168c <_ZN9EtherCard7copyMacEPhPKh>
    1182:	b8 01       	movw	r22, r16
    1184:	87 e2       	ldi	r24, 0x27	; 39
    1186:	93 e0       	ldi	r25, 0x03	; 3
    1188:	74 d2       	rcall	.+1256   	; 0x1672 <_ZN9EtherCard6copyIpEPhPKh>
    118a:	67 e1       	ldi	r22, 0x17	; 23
    118c:	75 e0       	ldi	r23, 0x05	; 5
    118e:	8d e1       	ldi	r24, 0x1D	; 29
    1190:	93 e0       	ldi	r25, 0x03	; 3
    1192:	6f d2       	rcall	.+1246   	; 0x1672 <_ZN9EtherCard6copyIpEPhPKh>
    1194:	8a e2       	ldi	r24, 0x2A	; 42
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	c6 dd       	rcall	.-1140   	; 0xd26 <_ZN8ENC28J6010packetSendEj>
    119a:	cf 91       	pop	r28
    119c:	1f 91       	pop	r17
    119e:	0f 91       	pop	r16
    11a0:	08 95       	ret

000011a2 <_ZN9EtherCard10udpPrepareEjPKhj>:
    11a2:	ef 92       	push	r14
    11a4:	ff 92       	push	r15
    11a6:	0f 93       	push	r16
    11a8:	1f 93       	push	r17
    11aa:	cf 93       	push	r28
    11ac:	df 93       	push	r29
    11ae:	18 2f       	mov	r17, r24
    11b0:	09 2f       	mov	r16, r25
    11b2:	eb 01       	movw	r28, r22
    11b4:	f4 2e       	mov	r15, r20
    11b6:	e5 2e       	mov	r14, r21
    11b8:	87 e1       	ldi	r24, 0x17	; 23
    11ba:	95 e0       	ldi	r25, 0x05	; 5
    11bc:	4a df       	rcall	.-364    	; 0x1052 <_ZL6is_lanPKhS0_>
    11be:	88 23       	and	r24, r24
    11c0:	29 f0       	breq	.+10     	; 0x11cc <_ZN9EtherCard10udpPrepareEjPKhj+0x2a>
    11c2:	be 01       	movw	r22, r28
    11c4:	8c e2       	ldi	r24, 0x2C	; 44
    11c6:	95 e0       	ldi	r25, 0x05	; 5
    11c8:	96 df       	rcall	.-212    	; 0x10f6 <_ZL12setMACandIPsPKhS0_>
    11ca:	04 c0       	rjmp	.+8      	; 0x11d4 <_ZN9EtherCard10udpPrepareEjPKhj+0x32>
    11cc:	be 01       	movw	r22, r28
    11ce:	82 e2       	ldi	r24, 0x22	; 34
    11d0:	95 e0       	ldi	r25, 0x05	; 5
    11d2:	91 df       	rcall	.-222    	; 0x10f6 <_ZL12setMACandIPsPKhS0_>
    11d4:	88 81       	ld	r24, Y
    11d6:	80 7f       	andi	r24, 0xF0	; 240
    11d8:	80 3e       	cpi	r24, 0xE0	; 224
    11da:	91 f0       	breq	.+36     	; 0x1200 <_ZN9EtherCard10udpPrepareEjPKhj+0x5e>
    11dc:	88 81       	ld	r24, Y
    11de:	99 81       	ldd	r25, Y+1	; 0x01
    11e0:	aa 81       	ldd	r26, Y+2	; 0x02
    11e2:	bb 81       	ldd	r27, Y+3	; 0x03
    11e4:	8f 3f       	cpi	r24, 0xFF	; 255
    11e6:	9f 4f       	sbci	r25, 0xFF	; 255
    11e8:	af 4f       	sbci	r26, 0xFF	; 255
    11ea:	bf 4f       	sbci	r27, 0xFF	; 255
    11ec:	49 f0       	breq	.+18     	; 0x1200 <_ZN9EtherCard10udpPrepareEjPKhj+0x5e>
    11ee:	44 e0       	ldi	r20, 0x04	; 4
    11f0:	50 e0       	ldi	r21, 0x00	; 0
    11f2:	be 01       	movw	r22, r28
    11f4:	8f e0       	ldi	r24, 0x0F	; 15
    11f6:	95 e0       	ldi	r25, 0x05	; 5
    11f8:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <memcmp>
    11fc:	89 2b       	or	r24, r25
    11fe:	29 f4       	brne	.+10     	; 0x120a <_ZN9EtherCard10udpPrepareEjPKhj+0x68>
    1200:	65 e2       	ldi	r22, 0x25	; 37
    1202:	72 e0       	ldi	r23, 0x02	; 2
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	93 e0       	ldi	r25, 0x03	; 3
    1208:	41 d2       	rcall	.+1154   	; 0x168c <_ZN9EtherCard7copyMacEPhPKh>
    120a:	c1 e0       	ldi	r28, 0x01	; 1
    120c:	d3 e0       	ldi	r29, 0x03	; 3
    120e:	88 e0       	ldi	r24, 0x08	; 8
    1210:	8c 87       	std	Y+12, r24	; 0x0c
    1212:	1d 86       	std	Y+13, r1	; 0x0d
    1214:	49 e0       	ldi	r20, 0x09	; 9
    1216:	50 e0       	ldi	r21, 0x00	; 0
    1218:	66 e7       	ldi	r22, 0x76	; 118
    121a:	72 e0       	ldi	r23, 0x02	; 2
    121c:	8f e0       	ldi	r24, 0x0F	; 15
    121e:	93 e0       	ldi	r25, 0x03	; 3
    1220:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <memcpy_P>
    1224:	18 8a       	std	Y+16, r1	; 0x10
    1226:	81 e1       	ldi	r24, 0x11	; 17
    1228:	8f 8b       	std	Y+23, r24	; 0x17
    122a:	ec a2       	std	Y+36, r14	; 0x24
    122c:	fd a2       	std	Y+37, r15	; 0x25
    122e:	0a a3       	std	Y+34, r16	; 0x22
    1230:	1b a3       	std	Y+35, r17	; 0x23
    1232:	1e a2       	std	Y+38, r1	; 0x26
    1234:	18 a6       	std	Y+40, r1	; 0x28
    1236:	19 a6       	std	Y+41, r1	; 0x29
    1238:	df 91       	pop	r29
    123a:	cf 91       	pop	r28
    123c:	1f 91       	pop	r17
    123e:	0f 91       	pop	r16
    1240:	ff 90       	pop	r15
    1242:	ef 90       	pop	r14
    1244:	08 95       	ret

00001246 <_ZN9EtherCard11udpTransmitEj>:
    1246:	0f 93       	push	r16
    1248:	1f 93       	push	r17
    124a:	cf 93       	push	r28
    124c:	df 93       	push	r29
    124e:	ec 01       	movw	r28, r24
    1250:	01 e0       	ldi	r16, 0x01	; 1
    1252:	13 e0       	ldi	r17, 0x03	; 3
    1254:	4c 96       	adiw	r24, 0x1c	; 28
    1256:	f8 01       	movw	r30, r16
    1258:	90 8b       	std	Z+16, r25	; 0x10
    125a:	81 8b       	std	Z+17, r24	; 0x11
    125c:	24 df       	rcall	.-440    	; 0x10a6 <_ZL20fill_ip_hdr_checksumv>
    125e:	ce 01       	movw	r24, r28
    1260:	08 96       	adiw	r24, 0x08	; 8
    1262:	f8 01       	movw	r30, r16
    1264:	96 a3       	std	Z+38, r25	; 0x26
    1266:	87 a3       	std	Z+39, r24	; 0x27
    1268:	ae 01       	movw	r20, r28
    126a:	40 5f       	subi	r20, 0xF0	; 240
    126c:	5f 4f       	sbci	r21, 0xFF	; 255
    126e:	21 e0       	ldi	r18, 0x01	; 1
    1270:	6a e1       	ldi	r22, 0x1A	; 26
    1272:	88 e2       	ldi	r24, 0x28	; 40
    1274:	7d de       	rcall	.-774    	; 0xf70 <_ZL13fill_checksumhhjh>
    1276:	ce 01       	movw	r24, r28
    1278:	8a 96       	adiw	r24, 0x2a	; 42
    127a:	55 dd       	rcall	.-1366   	; 0xd26 <_ZN8ENC28J6010packetSendEj>
    127c:	df 91       	pop	r29
    127e:	cf 91       	pop	r28
    1280:	1f 91       	pop	r17
    1282:	0f 91       	pop	r16
    1284:	08 95       	ret

00001286 <_ZN9EtherCard7sendUdpEPKhjjS1_j>:
    1286:	0f 93       	push	r16
    1288:	1f 93       	push	r17
    128a:	cf 93       	push	r28
    128c:	df 93       	push	r29
    128e:	d6 2f       	mov	r29, r22
    1290:	c7 2f       	mov	r28, r23
    1292:	ca 01       	movw	r24, r20
    1294:	a8 01       	movw	r20, r16
    1296:	b9 01       	movw	r22, r18
    1298:	84 df       	rcall	.-248    	; 0x11a2 <_ZN9EtherCard10udpPrepareEjPKhj>
    129a:	8d 2f       	mov	r24, r29
    129c:	9c 2f       	mov	r25, r28
    129e:	81 30       	cpi	r24, 0x01	; 1
    12a0:	22 e0       	ldi	r18, 0x02	; 2
    12a2:	92 07       	cpc	r25, r18
    12a4:	10 f0       	brcs	.+4      	; 0x12aa <_ZN9EtherCard7sendUdpEPKhjjS1_j+0x24>
    12a6:	80 e0       	ldi	r24, 0x00	; 0
    12a8:	92 e0       	ldi	r25, 0x02	; 2
    12aa:	cd df       	rcall	.-102    	; 0x1246 <_ZN9EtherCard11udpTransmitEj>
    12ac:	df 91       	pop	r29
    12ae:	cf 91       	pop	r28
    12b0:	1f 91       	pop	r17
    12b2:	0f 91       	pop	r16
    12b4:	08 95       	ret

000012b6 <_ZN9EtherCard7setGwIpEPKh>:
    12b6:	10 92 02 05 	sts	0x0502, r1	; 0x800502 <_ZN9EtherCard8delaycntE+0x1>
    12ba:	10 92 01 05 	sts	0x0501, r1	; 0x800501 <_ZN9EtherCard8delaycntE>
    12be:	21 e0       	ldi	r18, 0x01	; 1
    12c0:	20 93 21 05 	sts	0x0521, r18	; 0x800521 <_ZL9waitgwmac>
    12c4:	bc 01       	movw	r22, r24
    12c6:	8b e0       	ldi	r24, 0x0B	; 11
    12c8:	95 e0       	ldi	r25, 0x05	; 5
    12ca:	d3 c1       	rjmp	.+934    	; 0x1672 <_ZN9EtherCard6copyIpEPhPKh>
    12cc:	08 95       	ret

000012ce <_ZN9EtherCard22updateBroadcastAddressEv>:
    12ce:	cf 93       	push	r28
    12d0:	df 93       	push	r29
    12d2:	e7 e1       	ldi	r30, 0x17	; 23
    12d4:	f5 e0       	ldi	r31, 0x05	; 5
    12d6:	c3 e1       	ldi	r28, 0x13	; 19
    12d8:	d5 e0       	ldi	r29, 0x05	; 5
    12da:	af e0       	ldi	r26, 0x0F	; 15
    12dc:	b5 e0       	ldi	r27, 0x05	; 5
    12de:	2b e1       	ldi	r18, 0x1B	; 27
    12e0:	35 e0       	ldi	r19, 0x05	; 5
    12e2:	91 91       	ld	r25, Z+
    12e4:	89 91       	ld	r24, Y+
    12e6:	80 95       	com	r24
    12e8:	89 2b       	or	r24, r25
    12ea:	8d 93       	st	X+, r24
    12ec:	e2 17       	cp	r30, r18
    12ee:	f3 07       	cpc	r31, r19
    12f0:	c1 f7       	brne	.-16     	; 0x12e2 <_ZN9EtherCard22updateBroadcastAddressEv+0x14>
    12f2:	df 91       	pop	r29
    12f4:	cf 91       	pop	r28
    12f6:	08 95       	ret

000012f8 <_ZN9EtherCard10packetLoopEj>:
	gPB[ICMP_CHECKSUM_P+1]++;
	gPB[ICMP_CHECKSUM_P] += 0x08;
	EtherCard::packetSend(len);
}

uint16_t EtherCard::packetLoop (uint16_t plen) {
    12f8:	cf 93       	push	r28
    12fa:	df 93       	push	r29
    12fc:	ec 01       	movw	r28, r24
    if (plen==0) {
    12fe:	00 97       	sbiw	r24, 0x00	; 0
    1300:	09 f0       	breq	.+2      	; 0x1304 <_ZN9EtherCard10packetLoopEj+0xc>
    1302:	3f c0       	rjmp	.+126    	; 0x1382 <_ZN9EtherCard10packetLoopEj+0x8a>
        //Check every 65536 (no-packet) cycles whether we need to retry ARP request for gateway
        if ((waitgwmac & WGW_INITIAL_ARP || waitgwmac & WGW_REFRESHING) &&
    1304:	80 91 21 05 	lds	r24, 0x0521	; 0x800521 <_ZL9waitgwmac>
    1308:	85 70       	andi	r24, 0x05	; 5
    130a:	89 f0       	breq	.+34     	; 0x132e <_ZN9EtherCard10packetLoopEj+0x36>
    130c:	80 91 01 05 	lds	r24, 0x0501	; 0x800501 <_ZN9EtherCard8delaycntE>
    1310:	90 91 02 05 	lds	r25, 0x0502	; 0x800502 <_ZN9EtherCard8delaycntE+0x1>
    1314:	89 2b       	or	r24, r25
    1316:	59 f4       	brne	.+22     	; 0x132e <_ZN9EtherCard10packetLoopEj+0x36>
                delaycnt==0 && isLinkUp()) {
    1318:	f3 dc       	rcall	.-1562   	; 0xd00 <_ZN8ENC28J608isLinkUpEv>
}

uint16_t EtherCard::packetLoop (uint16_t plen) {
    if (plen==0) {
        //Check every 65536 (no-packet) cycles whether we need to retry ARP request for gateway
        if ((waitgwmac & WGW_INITIAL_ARP || waitgwmac & WGW_REFRESHING) &&
    131a:	88 23       	and	r24, r24
    131c:	41 f0       	breq	.+16     	; 0x132e <_ZN9EtherCard10packetLoopEj+0x36>
                delaycnt==0 && isLinkUp()) {
            client_arp_whohas(gwip);
    131e:	8b e0       	ldi	r24, 0x0B	; 11
    1320:	95 e0       	ldi	r25, 0x05	; 5
    1322:	0f df       	rcall	.-482    	; 0x1142 <_ZL17client_arp_whohasPh>
            waitgwmac |= WGW_ACCEPT_ARP_REPLY;
    1324:	80 91 21 05 	lds	r24, 0x0521	; 0x800521 <_ZL9waitgwmac>
    1328:	88 60       	ori	r24, 0x08	; 8
    132a:	80 93 21 05 	sts	0x0521, r24	; 0x800521 <_ZL9waitgwmac>
        }
        delaycnt++;
    132e:	80 91 01 05 	lds	r24, 0x0501	; 0x800501 <_ZN9EtherCard8delaycntE>
    1332:	90 91 02 05 	lds	r25, 0x0502	; 0x800502 <_ZN9EtherCard8delaycntE+0x1>
    1336:	01 96       	adiw	r24, 0x01	; 1
    1338:	90 93 02 05 	sts	0x0502, r25	; 0x800502 <_ZN9EtherCard8delaycntE+0x1>
    133c:	80 93 01 05 	sts	0x0501, r24	; 0x800501 <_ZN9EtherCard8delaycntE>

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, dnsip) && !has_dns_mac && !waiting_for_dns_mac) {
    1340:	67 e0       	ldi	r22, 0x07	; 7
    1342:	75 e0       	ldi	r23, 0x05	; 5
    1344:	87 e1       	ldi	r24, 0x17	; 23
    1346:	95 e0       	ldi	r25, 0x05	; 5
    1348:	84 de       	rcall	.-760    	; 0x1052 <_ZL6is_lanPKhS0_>
    134a:	88 23       	and	r24, r24
    134c:	49 f0       	breq	.+18     	; 0x1360 <_ZN9EtherCard10packetLoopEj+0x68>
    134e:	80 91 2a 05 	lds	r24, 0x052A	; 0x80052a <_ZL11has_dns_mac>
    1352:	81 11       	cpse	r24, r1
    1354:	05 c0       	rjmp	.+10     	; 0x1360 <_ZN9EtherCard10packetLoopEj+0x68>
    1356:	80 91 2b 05 	lds	r24, 0x052B	; 0x80052b <_ZL19waiting_for_dns_mac>
    135a:	88 23       	and	r24, r24
    135c:	09 f4       	brne	.+2      	; 0x1360 <_ZN9EtherCard10packetLoopEj+0x68>
    135e:	dc c0       	rjmp	.+440    	; 0x1518 <_ZN9EtherCard10packetLoopEj+0x220>
            client_arp_whohas(dnsip);
            waiting_for_dns_mac = true;
        }

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, hisip) && !has_dest_mac && !waiting_for_dest_mac) {
    1360:	63 e0       	ldi	r22, 0x03	; 3
    1362:	75 e0       	ldi	r23, 0x05	; 5
    1364:	87 e1       	ldi	r24, 0x17	; 23
    1366:	95 e0       	ldi	r25, 0x05	; 5
    1368:	74 de       	rcall	.-792    	; 0x1052 <_ZL6is_lanPKhS0_>
    136a:	88 23       	and	r24, r24
    136c:	09 f4       	brne	.+2      	; 0x1370 <_ZN9EtherCard10packetLoopEj+0x78>
    136e:	f8 c0       	rjmp	.+496    	; 0x1560 <_ZN9EtherCard10packetLoopEj+0x268>
    1370:	80 91 28 05 	lds	r24, 0x0528	; 0x800528 <_ZL12has_dest_mac>
    1374:	81 11       	cpse	r24, r1
    1376:	f4 c0       	rjmp	.+488    	; 0x1560 <_ZN9EtherCard10packetLoopEj+0x268>
    1378:	80 91 29 05 	lds	r24, 0x0529	; 0x800529 <_ZL20waiting_for_dest_mac>
    137c:	81 11       	cpse	r24, r1
    137e:	f0 c0       	rjmp	.+480    	; 0x1560 <_ZN9EtherCard10packetLoopEj+0x268>
    1380:	d2 c0       	rjmp	.+420    	; 0x1526 <_ZN9EtherCard10packetLoopEj+0x22e>
    return true;
}

static uint8_t eth_type_is_arp_and_my_ip(uint16_t len) {
    return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
    1382:	89 32       	cpi	r24, 0x29	; 41
    1384:	91 05       	cpc	r25, r1
    1386:	08 f4       	brcc	.+2      	; 0x138a <_ZN9EtherCard10packetLoopEj+0x92>
    1388:	d5 c0       	rjmp	.+426    	; 0x1534 <_ZN9EtherCard10packetLoopEj+0x23c>
        }
    return true;
}

static uint8_t eth_type_is_arp_and_my_ip(uint16_t len) {
    return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
    138a:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <_ZN8ENC28J606bufferE+0xc>
    138e:	88 30       	cpi	r24, 0x08	; 8
    1390:	09 f0       	breq	.+2      	; 0x1394 <_ZN9EtherCard10packetLoopEj+0x9c>
    1392:	e6 c0       	rjmp	.+460    	; 0x1560 <_ZN9EtherCard10packetLoopEj+0x268>
    1394:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <_ZN8ENC28J606bufferE+0xd>
    1398:	86 30       	cpi	r24, 0x06	; 6
    139a:	09 f0       	breq	.+2      	; 0x139e <_ZN9EtherCard10packetLoopEj+0xa6>
    139c:	dd c0       	rjmp	.+442    	; 0x1558 <_ZN9EtherCard10packetLoopEj+0x260>
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
           memcmp(gPB + ETH_ARP_DST_IP_P, EtherCard::myip, IP_LEN) == 0;
    139e:	44 e0       	ldi	r20, 0x04	; 4
    13a0:	50 e0       	ldi	r21, 0x00	; 0
    13a2:	67 e1       	ldi	r22, 0x17	; 23
    13a4:	75 e0       	ldi	r23, 0x05	; 5
    13a6:	87 e2       	ldi	r24, 0x27	; 39
    13a8:	93 e0       	ldi	r25, 0x03	; 3
    13aa:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <memcmp>
    return true;
}

static uint8_t eth_type_is_arp_and_my_ip(uint16_t len) {
    return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
    13ae:	89 2b       	or	r24, r25
    13b0:	09 f0       	breq	.+2      	; 0x13b4 <_ZN9EtherCard10packetLoopEj+0xbc>
    13b2:	d2 c0       	rjmp	.+420    	; 0x1558 <_ZN9EtherCard10packetLoopEj+0x260>
    EtherCard::copyIp(gPB + IP_SRC_P, EtherCard::myip);
    fill_ip_hdr_checksum();
}

static void make_arp_answer_from_request() {
    setMACs(gPB + ETH_SRC_MAC);
    13b4:	c3 c0       	rjmp	.+390    	; 0x153c <_ZN9EtherCard10packetLoopEj+0x244>
    13b6:	87 e0       	ldi	r24, 0x07	; 7
    13b8:	93 e0       	ldi	r25, 0x03	; 3
    13ba:	84 de       	rcall	.-760    	; 0x10c4 <_ZL7setMACsPKh>
    gPB[ETH_ARP_OPCODE_H_P] = ETH_ARP_OPCODE_REPLY_H_V;
    13bc:	e1 e0       	ldi	r30, 0x01	; 1
    13be:	f3 e0       	ldi	r31, 0x03	; 3
    13c0:	14 8a       	std	Z+20, r1	; 0x14
    gPB[ETH_ARP_OPCODE_L_P] = ETH_ARP_OPCODE_REPLY_L_V;
    13c2:	82 e0       	ldi	r24, 0x02	; 2
    EtherCard::copyMac(gPB + ETH_ARP_DST_MAC_P, gPB + ETH_ARP_SRC_MAC_P);
    13c4:	85 8b       	std	Z+21, r24	; 0x15
    13c6:	67 e1       	ldi	r22, 0x17	; 23
    13c8:	73 e0       	ldi	r23, 0x03	; 3
    13ca:	81 e2       	ldi	r24, 0x21	; 33
    13cc:	93 e0       	ldi	r25, 0x03	; 3
    EtherCard::copyMac(gPB + ETH_ARP_SRC_MAC_P, EtherCard::mymac);
    13ce:	5e d1       	rcall	.+700    	; 0x168c <_ZN9EtherCard7copyMacEPhPKh>
    13d0:	6b e1       	ldi	r22, 0x1B	; 27
    13d2:	75 e0       	ldi	r23, 0x05	; 5
    13d4:	87 e1       	ldi	r24, 0x17	; 23
    13d6:	93 e0       	ldi	r25, 0x03	; 3
    EtherCard::copyIp(gPB + ETH_ARP_DST_IP_P, gPB + ETH_ARP_SRC_IP_P);
    13d8:	59 d1       	rcall	.+690    	; 0x168c <_ZN9EtherCard7copyMacEPhPKh>
    13da:	6d e1       	ldi	r22, 0x1D	; 29
    13dc:	73 e0       	ldi	r23, 0x03	; 3
    13de:	87 e2       	ldi	r24, 0x27	; 39
    13e0:	93 e0       	ldi	r25, 0x03	; 3
    EtherCard::copyIp(gPB + ETH_ARP_SRC_IP_P, EtherCard::myip);
    13e2:	47 d1       	rcall	.+654    	; 0x1672 <_ZN9EtherCard6copyIpEPhPKh>
    13e4:	67 e1       	ldi	r22, 0x17	; 23
    13e6:	75 e0       	ldi	r23, 0x05	; 5
    13e8:	8d e1       	ldi	r24, 0x1D	; 29
    13ea:	93 e0       	ldi	r25, 0x03	; 3
    13ec:	42 d1       	rcall	.+644    	; 0x1672 <_ZN9EtherCard6copyIpEPhPKh>
    EtherCard::packetSend(42);
    13ee:	8a e2       	ldi	r24, 0x2A	; 42
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	99 dc       	rcall	.-1742   	; 0xd26 <_ZN8ENC28J6010packetSendEj>
    13f4:	80 91 21 05 	lds	r24, 0x0521	; 0x800521 <_ZL9waitgwmac>

    if (eth_type_is_arp_and_my_ip(plen))
    {   //Service ARP request
        if (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REQ_L_V)
            make_arp_answer_from_request();
        if (waitgwmac & WGW_ACCEPT_ARP_REPLY && (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REPLY_L_V) && client_store_mac(gwip, gwmacaddr))
    13f8:	83 ff       	sbrs	r24, 3
    13fa:	0e c0       	rjmp	.+28     	; 0x1418 <_ZN9EtherCard10packetLoopEj+0x120>
    13fc:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <_ZN8ENC28J606bufferE+0x15>
    1400:	82 30       	cpi	r24, 0x02	; 2
    1402:	51 f4       	brne	.+20     	; 0x1418 <_ZN9EtherCard10packetLoopEj+0x120>
    1404:	62 e2       	ldi	r22, 0x22	; 34
    1406:	75 e0       	ldi	r23, 0x05	; 5
    1408:	8b e0       	ldi	r24, 0x0B	; 11
    140a:	95 e0       	ldi	r25, 0x05	; 5
    140c:	84 de       	rcall	.-760    	; 0x1116 <_ZL16client_store_macPhS_>
    140e:	88 23       	and	r24, r24
    1410:	19 f0       	breq	.+6      	; 0x1418 <_ZN9EtherCard10packetLoopEj+0x120>
    1412:	82 e0       	ldi	r24, 0x02	; 2
            waitgwmac = WGW_HAVE_GW_MAC;
    1414:	80 93 21 05 	sts	0x0521, r24	; 0x800521 <_ZL9waitgwmac>
    1418:	80 91 2a 05 	lds	r24, 0x052A	; 0x80052a <_ZL11has_dns_mac>
        if (!has_dns_mac && waiting_for_dns_mac && client_store_mac(dnsip, destmacaddr)) {
    141c:	81 11       	cpse	r24, r1
    141e:	10 c0       	rjmp	.+32     	; 0x1440 <_ZN9EtherCard10packetLoopEj+0x148>
    1420:	80 91 2b 05 	lds	r24, 0x052B	; 0x80052b <_ZL19waiting_for_dns_mac>
    1424:	88 23       	and	r24, r24
    1426:	61 f0       	breq	.+24     	; 0x1440 <_ZN9EtherCard10packetLoopEj+0x148>
    1428:	6c e2       	ldi	r22, 0x2C	; 44
    142a:	75 e0       	ldi	r23, 0x05	; 5
    142c:	87 e0       	ldi	r24, 0x07	; 7
    142e:	95 e0       	ldi	r25, 0x05	; 5
    1430:	72 de       	rcall	.-796    	; 0x1116 <_ZL16client_store_macPhS_>
    1432:	88 23       	and	r24, r24
    1434:	29 f0       	breq	.+10     	; 0x1440 <_ZN9EtherCard10packetLoopEj+0x148>
    1436:	81 e0       	ldi	r24, 0x01	; 1
            has_dns_mac = true;
    1438:	80 93 2a 05 	sts	0x052A, r24	; 0x80052a <_ZL11has_dns_mac>
    143c:	10 92 2b 05 	sts	0x052B, r1	; 0x80052b <_ZL19waiting_for_dns_mac>
            waiting_for_dns_mac = false;
    1440:	80 91 28 05 	lds	r24, 0x0528	; 0x800528 <_ZL12has_dest_mac>
        }
        if (!has_dest_mac && waiting_for_dest_mac && client_store_mac(hisip, destmacaddr)) {
    1444:	81 11       	cpse	r24, r1
    1446:	8c c0       	rjmp	.+280    	; 0x1560 <_ZN9EtherCard10packetLoopEj+0x268>
    1448:	80 91 29 05 	lds	r24, 0x0529	; 0x800529 <_ZL20waiting_for_dest_mac>
    144c:	88 23       	and	r24, r24
    144e:	09 f4       	brne	.+2      	; 0x1452 <_ZN9EtherCard10packetLoopEj+0x15a>
    1450:	87 c0       	rjmp	.+270    	; 0x1560 <_ZN9EtherCard10packetLoopEj+0x268>
    1452:	6c e2       	ldi	r22, 0x2C	; 44
    1454:	75 e0       	ldi	r23, 0x05	; 5
    1456:	83 e0       	ldi	r24, 0x03	; 3
    1458:	95 e0       	ldi	r25, 0x05	; 5
    145a:	5d de       	rcall	.-838    	; 0x1116 <_ZL16client_store_macPhS_>
    145c:	88 23       	and	r24, r24
    145e:	09 f4       	brne	.+2      	; 0x1462 <_ZN9EtherCard10packetLoopEj+0x16a>
    1460:	7f c0       	rjmp	.+254    	; 0x1560 <_ZN9EtherCard10packetLoopEj+0x268>
    1462:	81 e0       	ldi	r24, 0x01	; 1
            has_dest_mac = true;
    1464:	80 93 28 05 	sts	0x0528, r24	; 0x800528 <_ZL12has_dest_mac>
    1468:	10 92 29 05 	sts	0x0529, r1	; 0x800529 <_ZL20waiting_for_dest_mac>
            waiting_for_dest_mac = false;
    146c:	79 c0       	rjmp	.+242    	; 0x1560 <_ZN9EtherCard10packetLoopEj+0x268>
    146e:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <_ZN8ENC28J606bufferE+0xc>
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
           memcmp(gPB + ETH_ARP_DST_IP_P, EtherCard::myip, IP_LEN) == 0;
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
    1472:	88 30       	cpi	r24, 0x08	; 8
    1474:	09 f0       	breq	.+2      	; 0x1478 <_ZN9EtherCard10packetLoopEj+0x180>
    1476:	74 c0       	rjmp	.+232    	; 0x1560 <_ZN9EtherCard10packetLoopEj+0x268>
    1478:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <_ZN8ENC28J606bufferE+0xd>
    147c:	81 11       	cpse	r24, r1
    147e:	70 c0       	rjmp	.+224    	; 0x1560 <_ZN9EtherCard10packetLoopEj+0x268>
    1480:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <_ZN8ENC28J606bufferE+0xe>
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
    1484:	85 34       	cpi	r24, 0x45	; 69
    1486:	09 f0       	breq	.+2      	; 0x148a <_ZN9EtherCard10packetLoopEj+0x192>
    1488:	6b c0       	rjmp	.+214    	; 0x1560 <_ZN9EtherCard10packetLoopEj+0x268>
    148a:	44 e0       	ldi	r20, 0x04	; 4
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
           (memcmp(gPB + IP_DST_P, EtherCard::myip, IP_LEN) == 0  //not my IP
    148c:	50 e0       	ldi	r21, 0x00	; 0
    148e:	67 e1       	ldi	r22, 0x17	; 23
    1490:	75 e0       	ldi	r23, 0x05	; 5
    1492:	8f e1       	ldi	r24, 0x1F	; 31
    1494:	93 e0       	ldi	r25, 0x03	; 3
    1496:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <memcmp>
    149a:	89 2b       	or	r24, r25
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
    149c:	09 f4       	brne	.+2      	; 0x14a0 <_ZN9EtherCard10packetLoopEj+0x1a8>
    149e:	54 c0       	rjmp	.+168    	; 0x1548 <_ZN9EtherCard10packetLoopEj+0x250>
    14a0:	44 e0       	ldi	r20, 0x04	; 4
           (memcmp(gPB + IP_DST_P, EtherCard::myip, IP_LEN) == 0  //not my IP
            || (memcmp(gPB + IP_DST_P, EtherCard::broadcastip, IP_LEN) == 0) //not subnet broadcast
    14a2:	50 e0       	ldi	r21, 0x00	; 0
    14a4:	6f e0       	ldi	r22, 0x0F	; 15
    14a6:	75 e0       	ldi	r23, 0x05	; 5
    14a8:	8f e1       	ldi	r24, 0x1F	; 31
    14aa:	93 e0       	ldi	r25, 0x03	; 3
    14ac:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <memcmp>
    14b0:	89 2b       	or	r24, r25
    14b2:	09 f4       	brne	.+2      	; 0x14b6 <_ZN9EtherCard10packetLoopEj+0x1be>
    14b4:	49 c0       	rjmp	.+146    	; 0x1548 <_ZN9EtherCard10packetLoopEj+0x250>
    14b6:	44 e0       	ldi	r20, 0x04	; 4
            || (memcmp(gPB + IP_DST_P, allOnes, IP_LEN) == 0)); //not global broadcasts
    14b8:	50 e0       	ldi	r21, 0x00	; 0
    14ba:	65 e2       	ldi	r22, 0x25	; 37
    14bc:	72 e0       	ldi	r23, 0x02	; 2
    14be:	8f e1       	ldi	r24, 0x1F	; 31
    14c0:	93 e0       	ldi	r25, 0x03	; 3
    14c2:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <memcmp>
    14c6:	89 2b       	or	r24, r25
    14c8:	09 f0       	breq	.+2      	; 0x14cc <_ZN9EtherCard10packetLoopEj+0x1d4>
    14ca:	4a c0       	rjmp	.+148    	; 0x1560 <_ZN9EtherCard10packetLoopEj+0x268>
    14cc:	3d c0       	rjmp	.+122    	; 0x1548 <_ZN9EtherCard10packetLoopEj+0x250>
    14ce:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <_ZN8ENC28J606bufferE+0x22>
        //!@todo Add other protocols (and make each optional at compile time)
        return 0;
    }
	
	//To handle pinging
	if (gPB[IP_PROTO_P]==IP_PROTO_ICMP_V && gPB[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V)
    14d2:	88 30       	cpi	r24, 0x08	; 8
    14d4:	c9 f4       	brne	.+50     	; 0x1508 <_ZN9EtherCard10packetLoopEj+0x210>
	{   //Service ICMP echo request (ping)
		if (icmp_cb)
    14d6:	e0 91 32 05 	lds	r30, 0x0532	; 0x800532 <_ZL7icmp_cb>
    14da:	f0 91 33 05 	lds	r31, 0x0533	; 0x800533 <_ZL7icmp_cb+0x1>
    14de:	30 97       	sbiw	r30, 0x00	; 0
    14e0:	19 f0       	breq	.+6      	; 0x14e8 <_ZN9EtherCard10packetLoopEj+0x1f0>
		(*icmp_cb)(&(gPB[IP_SRC_P]));
    14e2:	8b e1       	ldi	r24, 0x1B	; 27
    14e4:	93 e0       	ldi	r25, 0x03	; 3
    14e6:	19 95       	eicall
void EtherCard::registerPingCallback (void (*callback)(uint8_t *srcip)) {
    icmp_cb = callback;
}

static void make_echo_reply_from_request(uint16_t len) {
	make_eth_ip();
    14e8:	f7 dd       	rcall	.-1042   	; 0x10d8 <_ZL11make_eth_ipv>
	gPB[ICMP_TYPE_P] = ICMP_TYPE_ECHOREPLY_V;
    14ea:	e1 e0       	ldi	r30, 0x01	; 1
    14ec:	f3 e0       	ldi	r31, 0x03	; 3
	if (gPB[ICMP_CHECKSUM_P] > (0xFF-0x08))
    14ee:	12 a2       	std	Z+34, r1	; 0x22
    14f0:	84 a1       	ldd	r24, Z+36	; 0x24
    14f2:	88 3f       	cpi	r24, 0xF8	; 248
	gPB[ICMP_CHECKSUM_P+1]++;
    14f4:	18 f0       	brcs	.+6      	; 0x14fc <_ZN9EtherCard10packetLoopEj+0x204>
    14f6:	95 a1       	ldd	r25, Z+37	; 0x25
    14f8:	9f 5f       	subi	r25, 0xFF	; 255
	gPB[ICMP_CHECKSUM_P] += 0x08;
    14fa:	95 a3       	std	Z+37, r25	; 0x25
    14fc:	88 5f       	subi	r24, 0xF8	; 248
	EtherCard::packetSend(len);
    14fe:	80 93 25 03 	sts	0x0325, r24	; 0x800325 <_ZN8ENC28J606bufferE+0x24>
    1502:	ce 01       	movw	r24, r28
    1504:	10 dc       	rcall	.-2016   	; 0xd26 <_ZN8ENC28J6010packetSendEj>
		make_echo_reply_from_request(plen);
		return 0;
	}

#if ETHERCARD_UDPSERVER
    if (ether.udpServerListening() && gPB[IP_PROTO_P]==IP_PROTO_UDP_V)
    1506:	2c c0       	rjmp	.+88     	; 0x1560 <_ZN9EtherCard10packetLoopEj+0x268>
    1508:	4a d0       	rcall	.+148    	; 0x159e <_ZN9EtherCard18udpServerListeningEv>
    150a:	88 23       	and	r24, r24
    150c:	49 f1       	breq	.+82     	; 0x1560 <_ZN9EtherCard10packetLoopEj+0x268>
    150e:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <_ZN8ENC28J606bufferE+0x17>
    1512:	81 31       	cpi	r24, 0x11	; 17
    1514:	29 f5       	brne	.+74     	; 0x1560 <_ZN9EtherCard10packetLoopEj+0x268>
        }
        delaycnt++;

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, dnsip) && !has_dns_mac && !waiting_for_dns_mac) {
            client_arp_whohas(dnsip);
    1516:	1d c0       	rjmp	.+58     	; 0x1552 <_ZN9EtherCard10packetLoopEj+0x25a>
    1518:	87 e0       	ldi	r24, 0x07	; 7
    151a:	95 e0       	ldi	r25, 0x05	; 5
    151c:	12 de       	rcall	.-988    	; 0x1142 <_ZL17client_arp_whohasPh>
            waiting_for_dns_mac = true;
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	80 93 2b 05 	sts	0x052B, r24	; 0x80052b <_ZL19waiting_for_dns_mac>
    1524:	1d cf       	rjmp	.-454    	; 0x1360 <_ZN9EtherCard10packetLoopEj+0x68>
        }

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, hisip) && !has_dest_mac && !waiting_for_dest_mac) {
            client_arp_whohas(hisip);
    1526:	83 e0       	ldi	r24, 0x03	; 3
    1528:	95 e0       	ldi	r25, 0x05	; 5
    152a:	0b de       	rcall	.-1002   	; 0x1142 <_ZL17client_arp_whohasPh>
    152c:	81 e0       	ldi	r24, 0x01	; 1
            waiting_for_dest_mac = true;
    152e:	80 93 29 05 	sts	0x0529, r24	; 0x800529 <_ZL20waiting_for_dest_mac>
    1532:	16 c0       	rjmp	.+44     	; 0x1560 <_ZN9EtherCard10packetLoopEj+0x268>
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
    1534:	8a 97       	sbiw	r24, 0x2a	; 42
    1536:	08 f0       	brcs	.+2      	; 0x153a <_ZN9EtherCard10packetLoopEj+0x242>
    1538:	9a cf       	rjmp	.-204    	; 0x146e <_ZN9EtherCard10packetLoopEj+0x176>
    153a:	12 c0       	rjmp	.+36     	; 0x1560 <_ZN9EtherCard10packetLoopEj+0x268>
        return 0;
    }

    if (eth_type_is_arp_and_my_ip(plen))
    {   //Service ARP request
        if (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REQ_L_V)
    153c:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <_ZN8ENC28J606bufferE+0x15>
    1540:	81 30       	cpi	r24, 0x01	; 1
    1542:	09 f0       	breq	.+2      	; 0x1546 <_ZN9EtherCard10packetLoopEj+0x24e>
    1544:	57 cf       	rjmp	.-338    	; 0x13f4 <_ZN9EtherCard10packetLoopEj+0xfc>
    1546:	37 cf       	rjmp	.-402    	; 0x13b6 <_ZN9EtherCard10packetLoopEj+0xbe>
        //!@todo Add other protocols (and make each optional at compile time)
        return 0;
    }
	
	//To handle pinging
	if (gPB[IP_PROTO_P]==IP_PROTO_ICMP_V && gPB[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V)
    1548:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <_ZN8ENC28J606bufferE+0x17>
    154c:	81 30       	cpi	r24, 0x01	; 1
    154e:	e1 f6       	brne	.-72     	; 0x1508 <_ZN9EtherCard10packetLoopEj+0x210>
    1550:	be cf       	rjmp	.-132    	; 0x14ce <_ZN9EtherCard10packetLoopEj+0x1d6>
	}

#if ETHERCARD_UDPSERVER
    if (ether.udpServerListening() && gPB[IP_PROTO_P]==IP_PROTO_UDP_V)
    {   //Call UDP server handler (callback) if one is defined for this packet
        if(ether.udpServerHasProcessedPacket(plen))
    1552:	ce 01       	movw	r24, r28
    1554:	2b d0       	rcall	.+86     	; 0x15ac <_ZN9EtherCard27udpServerHasProcessedPacketEj>
    1556:	04 c0       	rjmp	.+8      	; 0x1560 <_ZN9EtherCard10packetLoopEj+0x268>
    1558:	ca 32       	cpi	r28, 0x2A	; 42
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
    155a:	d1 05       	cpc	r29, r1
    155c:	08 f0       	brcs	.+2      	; 0x1560 <_ZN9EtherCard10packetLoopEj+0x268>
    155e:	8c cf       	rjmp	.-232    	; 0x1478 <_ZN9EtherCard10packetLoopEj+0x180>
    1560:	80 e0       	ldi	r24, 0x00	; 0

    if (plen<54 || gPB[IP_PROTO_P]!=IP_PROTO_TCP_V )
        return 0; //from here on we are only interested in TCP-packets; these are longer than 54 bytes
		
	return 0;
}
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	df 91       	pop	r29
    1566:	cf 91       	pop	r28
    1568:	08 95       	ret

0000156a <_ZN9EtherCard21udpServerListenOnPortEPFvjPhjPKcjEj>:
    156a:	9c 01       	movw	r18, r24
    {
        if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((uint8_t) listeners[i].port)) {
            listeners[i].listening = true;
        }
    }
}
    156c:	90 91 34 05 	lds	r25, 0x0534	; 0x800534 <numListeners>
    1570:	98 30       	cpi	r25, 0x08	; 8
    1572:	a0 f4       	brcc	.+40     	; 0x159c <_ZN9EtherCard21udpServerListenOnPortEPFvjPhjPKcjEj+0x32>
    1574:	e9 2f       	mov	r30, r25
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	af 01       	movw	r20, r30
    157a:	44 0f       	add	r20, r20
    157c:	55 1f       	adc	r21, r21
    157e:	44 0f       	add	r20, r20
    1580:	55 1f       	adc	r21, r21
    1582:	e4 0f       	add	r30, r20
    1584:	f5 1f       	adc	r31, r21
    1586:	eb 5c       	subi	r30, 0xCB	; 203
    1588:	fa 4f       	sbci	r31, 0xFA	; 250
    158a:	31 83       	std	Z+1, r19	; 0x01
    158c:	20 83       	st	Z, r18
    158e:	73 83       	std	Z+3, r23	; 0x03
    1590:	62 83       	std	Z+2, r22	; 0x02
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	84 83       	std	Z+4, r24	; 0x04
    1596:	9f 5f       	subi	r25, 0xFF	; 255
    1598:	90 93 34 05 	sts	0x0534, r25	; 0x800534 <numListeners>
    159c:	08 95       	ret

0000159e <_ZN9EtherCard18udpServerListeningEv>:

bool EtherCard::udpServerListening() {
    return numListeners > 0;
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	90 91 34 05 	lds	r25, 0x0534	; 0x800534 <numListeners>
    15a4:	91 11       	cpse	r25, r1
    15a6:	01 c0       	rjmp	.+2      	; 0x15aa <_ZN9EtherCard18udpServerListeningEv+0xc>
    15a8:	80 e0       	ldi	r24, 0x00	; 0
}
    15aa:	08 95       	ret

000015ac <_ZN9EtherCard27udpServerHasProcessedPacketEj>:

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    15ac:	8f 92       	push	r8
    15ae:	9f 92       	push	r9
    15b0:	bf 92       	push	r11
    15b2:	cf 92       	push	r12
    15b4:	df 92       	push	r13
    15b6:	ef 92       	push	r14
    15b8:	ff 92       	push	r15
    15ba:	0f 93       	push	r16
    15bc:	1f 93       	push	r17
    15be:	cf 93       	push	r28
    15c0:	df 93       	push	r29
    bool packetProcessed = false;
    for(int i = 0; i < numListeners; i++)
    15c2:	80 91 34 05 	lds	r24, 0x0534	; 0x800534 <numListeners>
    15c6:	88 23       	and	r24, r24
    15c8:	09 f4       	brne	.+2      	; 0x15cc <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x20>
    15ca:	46 c0       	rjmp	.+140    	; 0x1658 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0xac>
    15cc:	c5 e3       	ldi	r28, 0x35	; 53
    15ce:	d5 e0       	ldi	r29, 0x05	; 5
    15d0:	e1 2c       	mov	r14, r1
    15d2:	f1 2c       	mov	r15, r1
    15d4:	80 e0       	ldi	r24, 0x00	; 0
    {
        if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((uint8_t) listeners[i].port) && listeners[i].listening)
    15d6:	0f 2e       	mov	r0, r31
    15d8:	f1 e0       	ldi	r31, 0x01	; 1
    15da:	cf 2e       	mov	r12, r31
    15dc:	f3 e0       	ldi	r31, 0x03	; 3
    15de:	df 2e       	mov	r13, r31
    15e0:	f0 2d       	mov	r31, r0
                listeners[i].port,
                gPB + IP_SRC_P,
                (gPB[UDP_SRC_PORT_H_P] << 8) | gPB[UDP_SRC_PORT_L_P],
                (const char *) (gPB + UDP_DATA_P),
                datalen);
            packetProcessed = true;
    15e2:	bb 24       	eor	r11, r11
    15e4:	b3 94       	inc	r11

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    bool packetProcessed = false;
    for(int i = 0; i < numListeners; i++)
    {
        if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((uint8_t) listeners[i].port) && listeners[i].listening)
    15e6:	aa 81       	ldd	r26, Y+2	; 0x02
    15e8:	bb 81       	ldd	r27, Y+3	; 0x03
    15ea:	f6 01       	movw	r30, r12
    15ec:	24 a1       	ldd	r18, Z+36	; 0x24
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	4b 2f       	mov	r20, r27
    15f2:	55 27       	eor	r21, r21
    15f4:	24 17       	cp	r18, r20
    15f6:	35 07       	cpc	r19, r21
    15f8:	21 f5       	brne	.+72     	; 0x1642 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x96>
    15fa:	25 a1       	ldd	r18, Z+37	; 0x25
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	ad 01       	movw	r20, r26
    1600:	55 27       	eor	r21, r21
    1602:	24 17       	cp	r18, r20
    1604:	35 07       	cpc	r19, r21
    1606:	e9 f4       	brne	.+58     	; 0x1642 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x96>
    1608:	9c 81       	ldd	r25, Y+4	; 0x04
    160a:	99 23       	and	r25, r25
    160c:	d1 f0       	breq	.+52     	; 0x1642 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x96>
            listeners[i].callback(
                listeners[i].port,
                gPB + IP_SRC_P,
                (gPB[UDP_SRC_PORT_H_P] << 8) | gPB[UDP_SRC_PORT_L_P],
                (const char *) (gPB + UDP_DATA_P),
                datalen);
    160e:	07 a1       	ldd	r16, Z+39	; 0x27
    1610:	10 e0       	ldi	r17, 0x00	; 0
    1612:	08 50       	subi	r16, 0x08	; 8
    1614:	11 09       	sbc	r17, r1
    1616:	86 a1       	ldd	r24, Z+38	; 0x26
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	98 2f       	mov	r25, r24
    161c:	88 27       	eor	r24, r24
    161e:	08 0f       	add	r16, r24
    1620:	19 1f       	adc	r17, r25
    1622:	42 a1       	ldd	r20, Z+34	; 0x22
    1624:	50 e0       	ldi	r21, 0x00	; 0
    1626:	54 2f       	mov	r21, r20
    1628:	44 27       	eor	r20, r20
    162a:	83 a1       	ldd	r24, Z+35	; 0x23
    162c:	48 2b       	or	r20, r24
    162e:	88 80       	ld	r8, Y
    1630:	99 80       	ldd	r9, Y+1	; 0x01
    1632:	2b e2       	ldi	r18, 0x2B	; 43
    1634:	33 e0       	ldi	r19, 0x03	; 3
    1636:	6b e1       	ldi	r22, 0x1B	; 27
    1638:	73 e0       	ldi	r23, 0x03	; 3
    163a:	cd 01       	movw	r24, r26
    163c:	f4 01       	movw	r30, r8
    163e:	19 95       	eicall
            packetProcessed = true;
    1640:	8b 2d       	mov	r24, r11
    return numListeners > 0;
}

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    bool packetProcessed = false;
    for(int i = 0; i < numListeners; i++)
    1642:	ff ef       	ldi	r31, 0xFF	; 255
    1644:	ef 1a       	sub	r14, r31
    1646:	ff 0a       	sbc	r15, r31
    1648:	25 96       	adiw	r28, 0x05	; 5
    164a:	20 91 34 05 	lds	r18, 0x0534	; 0x800534 <numListeners>
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	e2 16       	cp	r14, r18
    1652:	f3 06       	cpc	r15, r19
    1654:	44 f2       	brlt	.-112    	; 0x15e6 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x3a>
    1656:	01 c0       	rjmp	.+2      	; 0x165a <_ZN9EtherCard27udpServerHasProcessedPacketEj+0xae>
bool EtherCard::udpServerListening() {
    return numListeners > 0;
}

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    bool packetProcessed = false;
    1658:	80 e0       	ldi	r24, 0x00	; 0
                datalen);
            packetProcessed = true;
        }
    }
    return packetProcessed;
}
    165a:	df 91       	pop	r29
    165c:	cf 91       	pop	r28
    165e:	1f 91       	pop	r17
    1660:	0f 91       	pop	r16
    1662:	ff 90       	pop	r15
    1664:	ef 90       	pop	r14
    1666:	df 90       	pop	r13
    1668:	cf 90       	pop	r12
    166a:	bf 90       	pop	r11
    166c:	9f 90       	pop	r9
    166e:	8f 90       	pop	r8
    1670:	08 95       	ret

00001672 <_ZN9EtherCard6copyIpEPhPKh>:
#include "../Peripherals/HardwareSerial.h"
#include <stdlib.h>
#include <ctype.h>

void EtherCard::copyIp (uint8_t *dst, const uint8_t *src) {
    memcpy(dst, src, IP_LEN);
    1672:	fb 01       	movw	r30, r22
    1674:	20 81       	ld	r18, Z
    1676:	31 81       	ldd	r19, Z+1	; 0x01
    1678:	fc 01       	movw	r30, r24
    167a:	31 83       	std	Z+1, r19	; 0x01
    167c:	20 83       	st	Z, r18
    167e:	fb 01       	movw	r30, r22
    1680:	22 81       	ldd	r18, Z+2	; 0x02
    1682:	33 81       	ldd	r19, Z+3	; 0x03
    1684:	fc 01       	movw	r30, r24
    1686:	33 83       	std	Z+3, r19	; 0x03
    1688:	22 83       	std	Z+2, r18	; 0x02
    168a:	08 95       	ret

0000168c <_ZN9EtherCard7copyMacEPhPKh>:
}

void EtherCard::copyMac (uint8_t *dst, const uint8_t *src) {
    168c:	dc 01       	movw	r26, r24
    memcpy(dst, src, ETH_LEN);
    168e:	96 e0       	ldi	r25, 0x06	; 6
    1690:	fb 01       	movw	r30, r22
    1692:	01 90       	ld	r0, Z+
    1694:	0d 92       	st	X+, r0
    1696:	9a 95       	dec	r25
    1698:	e1 f7       	brne	.-8      	; 0x1692 <_ZN9EtherCard7copyMacEPhPKh+0x6>
    169a:	08 95       	ret

0000169c <_ZN9EtherComm13CheckChecksumEPKch>:
	}
}

bool EtherComm::CheckChecksum(const char *data, uint8_t len){
  //data++; //Ignore first byte, the start byte.
  uint8_t checksum = (uint8_t)(*(data++)); //Start by 'adding' the command to the checksum
    169c:	fc 01       	movw	r30, r24
    169e:	20 81       	ld	r18, Z
  checksum += (uint8_t)(*(data++));
    16a0:	dc 01       	movw	r26, r24
    16a2:	12 96       	adiw	r26, 0x02	; 2
    16a4:	81 81       	ldd	r24, Z+1	; 0x01
    16a6:	92 2f       	mov	r25, r18
    16a8:	98 0f       	add	r25, r24
  while(len-- > 0){
    16aa:	3f ef       	ldi	r19, 0xFF	; 255
    16ac:	36 0f       	add	r19, r22
    16ae:	66 23       	and	r22, r22
    16b0:	61 f0       	breq	.+24     	; 0x16ca <_ZN9EtherComm13CheckChecksumEPKch+0x2e>
    16b2:	fd 01       	movw	r30, r26
    16b4:	83 2f       	mov	r24, r19
    checksum += (uint8_t)(*(data++));
    16b6:	21 91       	ld	r18, Z+
    16b8:	92 0f       	add	r25, r18

bool EtherComm::CheckChecksum(const char *data, uint8_t len){
  //data++; //Ignore first byte, the start byte.
  uint8_t checksum = (uint8_t)(*(data++)); //Start by 'adding' the command to the checksum
  checksum += (uint8_t)(*(data++));
  while(len-- > 0){
    16ba:	81 50       	subi	r24, 0x01	; 1
    16bc:	e0 f7       	brcc	.-8      	; 0x16b6 <_ZN9EtherComm13CheckChecksumEPKch+0x1a>
    16be:	23 2f       	mov	r18, r19
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	2f 5f       	subi	r18, 0xFF	; 255
    16c4:	3f 4f       	sbci	r19, 0xFF	; 255
    16c6:	a2 0f       	add	r26, r18
    16c8:	b3 1f       	adc	r27, r19
    checksum += (uint8_t)(*(data++));
  }
//  Serial.println((uint8_t)(checksum & CHECKSUM_MASK));
  return (checksum & CHECKSUM_MASK) == (uint8_t)(*data);
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	2c 91       	ld	r18, X
    16ce:	29 13       	cpse	r18, r25
    16d0:	80 e0       	ldi	r24, 0x00	; 0
}
    16d2:	08 95       	ret

000016d4 <_Z10udpReceivejPhjPKcj>:

//char EtherComm::buffer[BUFFER_SIZE];
uint8_t* EtherComm::buffer = ether.buffer + UDP_DATA_P;

//callback that prints received packets to the serial port
void udpReceive(uint16_t dest_port, uint8_t src_ip[IP_LEN], uint16_t src_port, const char *data, uint16_t packetLen){
    16d4:	0f 93       	push	r16
    16d6:	1f 93       	push	r17
    16d8:	cf 93       	push	r28
    16da:	df 93       	push	r29
	}
	Serial.println();
	Serial.print("Checksum: ");
	Serial.println((uint8_t)(*index));
*/	
	if(packetLen >= 3){ //At minimum, start byte, command, and checksum.
    16dc:	a8 01       	movw	r20, r16
    16de:	43 50       	subi	r20, 0x03	; 3
    16e0:	51 09       	sbc	r21, r1
    16e2:	4f 3f       	cpi	r20, 0xFF	; 255
    16e4:	51 05       	cpc	r21, r1
    16e6:	09 f0       	breq	.+2      	; 0x16ea <_Z10udpReceivejPhjPKcj+0x16>
    16e8:	88 f4       	brcc	.+34     	; 0x170c <_Z10udpReceivejPhjPKcj+0x38>
		if(packetLen <= 258){
			uint8_t dataLen = (uint8_t)(packetLen - 3);
			if((uint8_t)data[0] == START_BYTE){
    16ea:	f9 01       	movw	r30, r18
    16ec:	80 81       	ld	r24, Z
    16ee:	8f 3f       	cpi	r24, 0xFF	; 255
    16f0:	69 f4       	brne	.+26     	; 0x170c <_Z10udpReceivejPhjPKcj+0x38>
    16f2:	e9 01       	movw	r28, r18
	Serial.print("Checksum: ");
	Serial.println((uint8_t)(*index));
*/	
	if(packetLen >= 3){ //At minimum, start byte, command, and checksum.
		if(packetLen <= 258){
			uint8_t dataLen = (uint8_t)(packetLen - 3);
    16f4:	03 50       	subi	r16, 0x03	; 3
			if((uint8_t)data[0] == START_BYTE){
			//		Serial.print("Computed Checksum: ");
				if(EtherComm::CheckChecksum(data, dataLen)){
    16f6:	60 2f       	mov	r22, r16
    16f8:	c9 01       	movw	r24, r18
    16fa:	d0 df       	rcall	.-96     	; 0x169c <_ZN9EtherComm13CheckChecksumEPKch>
    16fc:	88 23       	and	r24, r24
    16fe:	31 f0       	breq	.+12     	; 0x170c <_Z10udpReceivejPhjPKcj+0x38>
					EtherComm::CommandReceived((uint8_t)data[1], (const uint8_t*)(data + 2), dataLen);
    1700:	be 01       	movw	r22, r28
    1702:	6e 5f       	subi	r22, 0xFE	; 254
    1704:	7f 4f       	sbci	r23, 0xFF	; 255
    1706:	40 2f       	mov	r20, r16
    1708:	89 81       	ldd	r24, Y+1	; 0x01
    170a:	90 d9       	rcall	.-3296   	; 0xa2c <_ZN9EtherComm15CommandReceivedEhPKhh>
				}
			}
		}
	}
}
    170c:	df 91       	pop	r29
    170e:	cf 91       	pop	r28
    1710:	1f 91       	pop	r17
    1712:	0f 91       	pop	r16
    1714:	08 95       	ret

00001716 <_ZN9EtherComm5beginEjjRVhS1_h>:
  }
//  Serial.println((uint8_t)(checksum & CHECKSUM_MASK));
  return (checksum & CHECKSUM_MASK) == (uint8_t)(*data);
}

bool EtherComm::begin(uint16_t recvPort, uint16_t destPort, Register& csDDR, Register& csPort, uint8_t csPin){
    1716:	0f 93       	push	r16
    1718:	cf 93       	push	r28
    171a:	df 93       	push	r29
    171c:	ec 01       	movw	r28, r24
    171e:	ca 01       	movw	r24, r20
    1720:	a9 01       	movw	r20, r18
    1722:	20 2f       	mov	r18, r16
  EtherComm::_recvPort = recvPort;
    1724:	d0 93 60 05 	sts	0x0560, r29	; 0x800560 <_ZN9EtherComm9_recvPortE+0x1>
    1728:	c0 93 5f 05 	sts	0x055F, r28	; 0x80055f <_ZN9EtherComm9_recvPortE>
  EtherComm::_destPort = destPort;
    172c:	70 93 5e 05 	sts	0x055E, r23	; 0x80055e <_ZN9EtherComm9_destPortE+0x1>
    1730:	60 93 5d 05 	sts	0x055D, r22	; 0x80055d <_ZN9EtherComm9_destPortE>
  
  if (ether.begin(EtherComm::_mymac, csDDR, csPort, csPin) == 0) return false;
    1734:	bc 01       	movw	r22, r24
    1736:	86 e0       	ldi	r24, 0x06	; 6
    1738:	92 e0       	ldi	r25, 0x02	; 2
    173a:	d3 db       	rcall	.-2138   	; 0xee2 <_ZN9EtherCard5beginEPKhRVhS3_h>
    173c:	88 23       	and	r24, r24
    173e:	79 f0       	breq	.+30     	; 0x175e <_ZN9EtherComm5beginEjjRVhS1_h+0x48>
  ether.staticSetup(EtherComm::_myip, EtherComm::_gwip);
    1740:	20 e0       	ldi	r18, 0x00	; 0
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	40 e0       	ldi	r20, 0x00	; 0
    1746:	50 e0       	ldi	r21, 0x00	; 0
    1748:	6c e0       	ldi	r22, 0x0C	; 12
    174a:	72 e0       	ldi	r23, 0x02	; 2
    174c:	80 e1       	ldi	r24, 0x10	; 16
    174e:	92 e0       	ldi	r25, 0x02	; 2
    1750:	e1 db       	rcall	.-2110   	; 0xf14 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_>
  ether.printIp("GW:  ", ether.gwip);
  ether.printIp("DNS: ", ether.dnsip);
  */
  
  //Register the udpSerialPrint() method to listen to port the receive port.
  ether.udpServerListenOnPort(&udpReceive, recvPort);
    1752:	be 01       	movw	r22, r28
    1754:	8a e6       	ldi	r24, 0x6A	; 106
    1756:	9b e0       	ldi	r25, 0x0B	; 11
    1758:	08 df       	rcall	.-496    	; 0x156a <_ZN9EtherCard21udpServerListenOnPortEPFvjPhjPKcjEj>
  
  return true;
    175a:	81 e0       	ldi	r24, 0x01	; 1
    175c:	01 c0       	rjmp	.+2      	; 0x1760 <_ZN9EtherComm5beginEjjRVhS1_h+0x4a>

bool EtherComm::begin(uint16_t recvPort, uint16_t destPort, Register& csDDR, Register& csPort, uint8_t csPin){
  EtherComm::_recvPort = recvPort;
  EtherComm::_destPort = destPort;
  
  if (ether.begin(EtherComm::_mymac, csDDR, csPort, csPin) == 0) return false;
    175e:	80 e0       	ldi	r24, 0x00	; 0
  
  //Register the udpSerialPrint() method to listen to port the receive port.
  ether.udpServerListenOnPort(&udpReceive, recvPort);
  
  return true;
}
    1760:	df 91       	pop	r29
    1762:	cf 91       	pop	r28
    1764:	0f 91       	pop	r16
    1766:	08 95       	ret

00001768 <_ZN9EtherComm11SendCommandEhh>:

void EtherComm::SendCommand(uint8_t cmd, uint8_t len){
    1768:	0f 93       	push	r16
    176a:	1f 93       	push	r17
    176c:	cf 93       	push	r28
    176e:	df 93       	push	r29
  EtherComm::buffer[0] = START_BYTE;
    1770:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    1774:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    1778:	9f ef       	ldi	r25, 0xFF	; 255
    177a:	90 83       	st	Z, r25
  EtherComm::buffer[1] = cmd;
    177c:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    1780:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    1784:	81 83       	std	Z+1, r24	; 0x01
  //EtherComm::buffer[2] = len;
  
  uint8_t checksum = START_BYTE + cmd;
    1786:	81 50       	subi	r24, 0x01	; 1
  uint8_t* index = &EtherComm::buffer[2]; //TODO why is char* being used? convert ot uint8_t*!!
    1788:	c0 91 00 02 	lds	r28, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    178c:	d0 91 01 02 	lds	r29, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    1790:	de 01       	movw	r26, r28
    1792:	12 96       	adiw	r26, 0x02	; 2
  uint8_t bytes = len;
  while(bytes-- > 0){
    1794:	4f ef       	ldi	r20, 0xFF	; 255
    1796:	46 0f       	add	r20, r22
    1798:	66 23       	and	r22, r22
    179a:	81 f0       	breq	.+32     	; 0x17bc <_ZN9EtherComm11SendCommandEhh+0x54>
    179c:	fd 01       	movw	r30, r26
    179e:	50 e0       	ldi	r21, 0x00	; 0
    17a0:	9a 01       	movw	r18, r20
    17a2:	2d 5f       	subi	r18, 0xFD	; 253
    17a4:	3f 4f       	sbci	r19, 0xFF	; 255
    17a6:	2c 0f       	add	r18, r28
    17a8:	3d 1f       	adc	r19, r29
    checksum += (uint8_t)(*(index++));  
    17aa:	91 91       	ld	r25, Z+
    17ac:	89 0f       	add	r24, r25
  //EtherComm::buffer[2] = len;
  
  uint8_t checksum = START_BYTE + cmd;
  uint8_t* index = &EtherComm::buffer[2]; //TODO why is char* being used? convert ot uint8_t*!!
  uint8_t bytes = len;
  while(bytes-- > 0){
    17ae:	e2 17       	cp	r30, r18
    17b0:	f3 07       	cpc	r31, r19
    17b2:	d9 f7       	brne	.-10     	; 0x17aa <_ZN9EtherComm11SendCommandEhh+0x42>
    17b4:	4f 5f       	subi	r20, 0xFF	; 255
    17b6:	5f 4f       	sbci	r21, 0xFF	; 255
    17b8:	a4 0f       	add	r26, r20
    17ba:	b5 1f       	adc	r27, r21
    checksum += (uint8_t)(*(index++));  
  }
  (*index) = (uint8_t)(checksum & CHECKSUM_MASK);
    17bc:	8c 93       	st	X, r24

  //Serial.print("Send: ");
  //Serial.println(len);
  ether.sendUdp(EtherComm::buffer, (uint16_t)len + (uint16_t)3, _recvPort, _destIP, _destPort);
    17be:	00 91 5d 05 	lds	r16, 0x055D	; 0x80055d <_ZN9EtherComm9_destPortE>
    17c2:	10 91 5e 05 	lds	r17, 0x055E	; 0x80055e <_ZN9EtherComm9_destPortE+0x1>
    17c6:	40 91 5f 05 	lds	r20, 0x055F	; 0x80055f <_ZN9EtherComm9_recvPortE>
    17ca:	50 91 60 05 	lds	r21, 0x0560	; 0x800560 <_ZN9EtherComm9_recvPortE+0x1>
    17ce:	70 e0       	ldi	r23, 0x00	; 0
    17d0:	6d 5f       	subi	r22, 0xFD	; 253
    17d2:	7f 4f       	sbci	r23, 0xFF	; 255
    17d4:	22 e0       	ldi	r18, 0x02	; 2
    17d6:	32 e0       	ldi	r19, 0x02	; 2
    17d8:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    17dc:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    17e0:	52 dd       	rcall	.-1372   	; 0x1286 <_ZN9EtherCard7sendUdpEPKhjjS1_j>
}
    17e2:	df 91       	pop	r29
    17e4:	cf 91       	pop	r28
    17e6:	1f 91       	pop	r17
    17e8:	0f 91       	pop	r16
    17ea:	08 95       	ret

000017ec <main>:
#include "TestIMU.h"
#include <avr/interrupt.h>

int main(void){
	//TestIMU();
	sei(); //Enable global interrupts
    17ec:	78 94       	sei
	public:
	inline HardwareSerial(
	volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
	volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
	volatile uint8_t *ucsrc, volatile uint8_t *udr);
	void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    17ee:	26 e0       	ldi	r18, 0x06	; 6
    17f0:	40 e8       	ldi	r20, 0x80	; 128
    17f2:	55 e2       	ldi	r21, 0x25	; 37
    17f4:	60 e0       	ldi	r22, 0x00	; 0
    17f6:	70 e0       	ldi	r23, 0x00	; 0
    17f8:	81 e6       	ldi	r24, 0x61	; 97
    17fa:	95 e0       	ldi	r25, 0x05	; 5
    17fc:	15 d1       	rcall	.+554    	; 0x1a28 <_ZN14HardwareSerial5beginEmh>
	Serial.begin(9600);
	Serial.println("\nInitializing...");
    17fe:	6b e2       	ldi	r22, 0x2B	; 43
    1800:	72 e0       	ldi	r23, 0x02	; 2
    1802:	81 e6       	ldi	r24, 0x61	; 97
    1804:	95 e0       	ldi	r25, 0x05	; 5
    1806:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <_ZN5Print7printlnEPKc>
	
	if(!rov.begin()){
    180a:	a8 d7       	rcall	.+3920   	; 0x275c <_ZN5Robot5beginEv>
    180c:	81 11       	cpse	r24, r1
    180e:	07 c0       	rjmp	.+14     	; 0x181e <main+0x32>
		Serial.println("Failed to initialize robot.");
    1810:	6c e3       	ldi	r22, 0x3C	; 60
    1812:	72 e0       	ldi	r23, 0x02	; 2
    1814:	81 e6       	ldi	r24, 0x61	; 97
    1816:	95 e0       	ldi	r25, 0x05	; 5
    1818:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <_ZN5Print7printlnEPKc>
    181c:	ff cf       	rjmp	.-2      	; 0x181c <main+0x30>
		while(1);
	}
	Serial.println("Robot initialized.");
    181e:	68 e5       	ldi	r22, 0x58	; 88
    1820:	72 e0       	ldi	r23, 0x02	; 2
    1822:	81 e6       	ldi	r24, 0x61	; 97
    1824:	95 e0       	ldi	r25, 0x05	; 5
    1826:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <_ZN5Print7printlnEPKc>
	
	if(!EtherComm::begin((uint16_t)6001, (uint16_t)6002, EthernetDDR, EthernetPort, EthernetPin_CS)){
    182a:	01 e0       	ldi	r16, 0x01	; 1
    182c:	25 e2       	ldi	r18, 0x25	; 37
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	44 e2       	ldi	r20, 0x24	; 36
    1832:	50 e0       	ldi	r21, 0x00	; 0
    1834:	62 e7       	ldi	r22, 0x72	; 114
    1836:	77 e1       	ldi	r23, 0x17	; 23
    1838:	81 e7       	ldi	r24, 0x71	; 113
    183a:	97 e1       	ldi	r25, 0x17	; 23
    183c:	6c df       	rcall	.-296    	; 0x1716 <_ZN9EtherComm5beginEjjRVhS1_h>
    183e:	81 11       	cpse	r24, r1
    1840:	07 c0       	rjmp	.+14     	; 0x1850 <main+0x64>
		Serial.println("Failed to access Ethernet controller.");
    1842:	6b e6       	ldi	r22, 0x6B	; 107
    1844:	72 e0       	ldi	r23, 0x02	; 2
    1846:	81 e6       	ldi	r24, 0x61	; 97
    1848:	95 e0       	ldi	r25, 0x05	; 5
    184a:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <_ZN5Print7printlnEPKc>
    184e:	ff cf       	rjmp	.-2      	; 0x184e <main+0x62>
		while(1);
	}
	Serial.println("Connected to controller.");
    1850:	61 e9       	ldi	r22, 0x91	; 145
    1852:	72 e0       	ldi	r23, 0x02	; 2
    1854:	81 e6       	ldi	r24, 0x61	; 97
    1856:	95 e0       	ldi	r25, 0x05	; 5
  static bool begin(uint16_t recvPort, uint16_t destPort, Register& csDDR, Register& csPort, uint8_t csPin);

  friend void udpReceive(uint16_t dest_port, uint8_t src_ip[IP_LEN], uint16_t src_port, const char *data, uint16_t len);

  static void Loop(){
    ether.packetLoop(ether.packetReceive());
    1858:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <_ZN5Print7printlnEPKc>
    185c:	dd da       	rcall	.-2630   	; 0xe18 <_ZN8ENC28J6013packetReceiveEv>
    185e:	4c dd       	rcall	.-1384   	; 0x12f8 <_ZN9EtherCard10packetLoopEj>
	
    /* Replace with your application code */
    while (1) {
		EtherComm::Loop();
		rov.Loop();
    1860:	91 d7       	rcall	.+3874   	; 0x2784 <_ZN5Robot4LoopEv>
    1862:	fc cf       	rjmp	.-8      	; 0x185c <main+0x70>

00001864 <_ZN14HardwareSerial9availableEv>:
    1864:	fc 01       	movw	r30, r24
	#endif
	#if defined(HAVE_HWSERIAL2)
	if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
	#endif
	#if defined(HAVE_HWSERIAL3)
	if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    1866:	97 85       	ldd	r25, Z+15	; 0x0f
    1868:	20 89       	ldd	r18, Z+16	; 0x10
    186a:	89 2f       	mov	r24, r25
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	80 5c       	subi	r24, 0xC0	; 192
    1870:	9f 4f       	sbci	r25, 0xFF	; 255
    1872:	82 1b       	sub	r24, r18
    1874:	91 09       	sbc	r25, r1
    1876:	8f 73       	andi	r24, 0x3F	; 63
    1878:	99 27       	eor	r25, r25
    187a:	08 95       	ret

0000187c <_ZN14HardwareSerial4peekEv>:
    187c:	fc 01       	movw	r30, r24
    187e:	97 85       	ldd	r25, Z+15	; 0x0f
    1880:	80 89       	ldd	r24, Z+16	; 0x10
    1882:	98 17       	cp	r25, r24
    1884:	31 f0       	breq	.+12     	; 0x1892 <_ZN14HardwareSerial4peekEv+0x16>
    1886:	80 89       	ldd	r24, Z+16	; 0x10
    1888:	e8 0f       	add	r30, r24
    188a:	f1 1d       	adc	r31, r1
    188c:	83 89       	ldd	r24, Z+19	; 0x13
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	08 95       	ret
    1892:	8f ef       	ldi	r24, 0xFF	; 255
    1894:	9f ef       	ldi	r25, 0xFF	; 255
    1896:	08 95       	ret

00001898 <_ZN14HardwareSerial4readEv>:
    1898:	fc 01       	movw	r30, r24
    189a:	97 85       	ldd	r25, Z+15	; 0x0f
    189c:	80 89       	ldd	r24, Z+16	; 0x10
    189e:	98 17       	cp	r25, r24
    18a0:	61 f0       	breq	.+24     	; 0x18ba <_ZN14HardwareSerial4readEv+0x22>
    18a2:	80 89       	ldd	r24, Z+16	; 0x10
    18a4:	df 01       	movw	r26, r30
    18a6:	a8 0f       	add	r26, r24
    18a8:	b1 1d       	adc	r27, r1
    18aa:	53 96       	adiw	r26, 0x13	; 19
    18ac:	8c 91       	ld	r24, X
    18ae:	90 89       	ldd	r25, Z+16	; 0x10
    18b0:	9f 5f       	subi	r25, 0xFF	; 255
    18b2:	9f 73       	andi	r25, 0x3F	; 63
    18b4:	90 8b       	std	Z+16, r25	; 0x10
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	08 95       	ret
    18ba:	8f ef       	ldi	r24, 0xFF	; 255
    18bc:	9f ef       	ldi	r25, 0xFF	; 255
    18be:	08 95       	ret

000018c0 <_ZN14HardwareSerial17availableForWriteEv>:
    18c0:	fc 01       	movw	r30, r24
    18c2:	21 89       	ldd	r18, Z+17	; 0x11
    18c4:	32 89       	ldd	r19, Z+18	; 0x12
    18c6:	23 17       	cp	r18, r19
    18c8:	38 f0       	brcs	.+14     	; 0x18d8 <_ZN14HardwareSerial17availableForWriteEv+0x18>
    18ca:	8f e3       	ldi	r24, 0x3F	; 63
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	82 1b       	sub	r24, r18
    18d0:	91 09       	sbc	r25, r1
    18d2:	83 0f       	add	r24, r19
    18d4:	91 1d       	adc	r25, r1
    18d6:	08 95       	ret
    18d8:	83 2f       	mov	r24, r19
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	82 1b       	sub	r24, r18
    18de:	91 09       	sbc	r25, r1
    18e0:	01 97       	sbiw	r24, 0x01	; 1
    18e2:	08 95       	ret

000018e4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    18e4:	fc 01       	movw	r30, r24
	// If interrupts are enabled, there must be more data in the output
	// buffer. Send the next byte
	unsigned char c = _tx_buffer[_tx_buffer_tail];
    18e6:	82 89       	ldd	r24, Z+18	; 0x12
    18e8:	df 01       	movw	r26, r30
    18ea:	a8 0f       	add	r26, r24
    18ec:	b1 1d       	adc	r27, r1
    18ee:	ad 5a       	subi	r26, 0xAD	; 173
    18f0:	bf 4f       	sbci	r27, 0xFF	; 255
    18f2:	8c 91       	ld	r24, X
	_tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    18f4:	22 89       	ldd	r18, Z+18	; 0x12
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	2f 5f       	subi	r18, 0xFF	; 255
    18fa:	3f 4f       	sbci	r19, 0xFF	; 255
    18fc:	2f 73       	andi	r18, 0x3F	; 63
    18fe:	30 78       	andi	r19, 0x80	; 128
    1900:	33 23       	and	r19, r19
    1902:	34 f4       	brge	.+12     	; 0x1910 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x2c>
    1904:	21 50       	subi	r18, 0x01	; 1
    1906:	31 09       	sbc	r19, r1
    1908:	20 6c       	ori	r18, 0xC0	; 192
    190a:	3f 6f       	ori	r19, 0xFF	; 255
    190c:	2f 5f       	subi	r18, 0xFF	; 255
    190e:	3f 4f       	sbci	r19, 0xFF	; 255
    1910:	22 8b       	std	Z+18, r18	; 0x12

	*_udr = c;
    1912:	a4 85       	ldd	r26, Z+12	; 0x0c
    1914:	b5 85       	ldd	r27, Z+13	; 0x0d
    1916:	8c 93       	st	X, r24
	// location". This makes sure flush() won't return until the bytes
	// actually got written. Other r/w bits are preserved, and zeroes
	// written to the rest.

	#ifdef MPCM0
	*_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1918:	a6 81       	ldd	r26, Z+6	; 0x06
    191a:	b7 81       	ldd	r27, Z+7	; 0x07
    191c:	8c 91       	ld	r24, X
    191e:	83 70       	andi	r24, 0x03	; 3
    1920:	80 64       	ori	r24, 0x40	; 64
    1922:	8c 93       	st	X, r24
	#else
	*_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
	#endif

	if (_tx_buffer_head == _tx_buffer_tail) {
    1924:	91 89       	ldd	r25, Z+17	; 0x11
    1926:	82 89       	ldd	r24, Z+18	; 0x12
    1928:	98 13       	cpse	r25, r24
    192a:	06 c0       	rjmp	.+12     	; 0x1938 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x54>
		// Buffer empty, so disable interrupts
		cbi(*_ucsrb, UDRIE0);
    192c:	00 84       	ldd	r0, Z+8	; 0x08
    192e:	f1 85       	ldd	r31, Z+9	; 0x09
    1930:	e0 2d       	mov	r30, r0
    1932:	80 81       	ld	r24, Z
    1934:	8f 7d       	andi	r24, 0xDF	; 223
    1936:	80 83       	st	Z, r24
    1938:	08 95       	ret

0000193a <_ZN14HardwareSerial5flushEv>:
	if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
	return tail - head - 1;
}

void HardwareSerial::flush()
{
    193a:	cf 93       	push	r28
    193c:	df 93       	push	r29
    193e:	ec 01       	movw	r28, r24
	// If we have never written a byte, no need to flush. This special
	// case is needed since there is no way to force the TXC (transmit
	// complete) bit to 1 during initialization
	if (!_written)
    1940:	8e 85       	ldd	r24, Y+14	; 0x0e
    1942:	88 23       	and	r24, r24
    1944:	d1 f0       	breq	.+52     	; 0x197a <_ZN14HardwareSerial5flushEv+0x40>
	return;

	while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1946:	e8 85       	ldd	r30, Y+8	; 0x08
    1948:	f9 85       	ldd	r31, Y+9	; 0x09
    194a:	80 81       	ld	r24, Z
    194c:	85 fd       	sbrc	r24, 5
    194e:	05 c0       	rjmp	.+10     	; 0x195a <_ZN14HardwareSerial5flushEv+0x20>
    1950:	ae 81       	ldd	r26, Y+6	; 0x06
    1952:	bf 81       	ldd	r27, Y+7	; 0x07
    1954:	8c 91       	ld	r24, X
    1956:	86 fd       	sbrc	r24, 6
    1958:	10 c0       	rjmp	.+32     	; 0x197a <_ZN14HardwareSerial5flushEv+0x40>
		if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    195a:	0f b6       	in	r0, 0x3f	; 63
    195c:	07 fc       	sbrc	r0, 7
    195e:	f5 cf       	rjmp	.-22     	; 0x194a <_ZN14HardwareSerial5flushEv+0x10>
    1960:	80 81       	ld	r24, Z
    1962:	85 ff       	sbrs	r24, 5
    1964:	f2 cf       	rjmp	.-28     	; 0x194a <_ZN14HardwareSerial5flushEv+0x10>
    1966:	03 c0       	rjmp	.+6      	; 0x196e <_ZN14HardwareSerial5flushEv+0x34>
		// Interrupts are globally disabled, but the DR empty
		// interrupt should be enabled, so poll the DR empty flag to
		// prevent deadlock
		if (bit_is_set(*_ucsra, UDRE0))
		_tx_udr_empty_irq();
    1968:	ce 01       	movw	r24, r28
    196a:	bc df       	rcall	.-136    	; 0x18e4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    196c:	ec cf       	rjmp	.-40     	; 0x1946 <_ZN14HardwareSerial5flushEv+0xc>
	while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
		if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
		// Interrupts are globally disabled, but the DR empty
		// interrupt should be enabled, so poll the DR empty flag to
		// prevent deadlock
		if (bit_is_set(*_ucsra, UDRE0))
    196e:	ae 81       	ldd	r26, Y+6	; 0x06
    1970:	bf 81       	ldd	r27, Y+7	; 0x07
    1972:	8c 91       	ld	r24, X
    1974:	85 ff       	sbrs	r24, 5
    1976:	e9 cf       	rjmp	.-46     	; 0x194a <_ZN14HardwareSerial5flushEv+0x10>
    1978:	f7 cf       	rjmp	.-18     	; 0x1968 <_ZN14HardwareSerial5flushEv+0x2e>
		_tx_udr_empty_irq();
	}
	// If we get here, nothing is queued anymore (DRIE is disabled) and
	// the hardware finished tranmission (TXC is set).
}
    197a:	df 91       	pop	r29
    197c:	cf 91       	pop	r28
    197e:	08 95       	ret

00001980 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    1980:	0f 93       	push	r16
    1982:	1f 93       	push	r17
    1984:	cf 93       	push	r28
    1986:	df 93       	push	r29
    1988:	ec 01       	movw	r28, r24
	_written = true;
    198a:	81 e0       	ldi	r24, 0x01	; 1
    198c:	8e 87       	std	Y+14, r24	; 0x0e
	// If the buffer and the data register is empty, just write the byte
	// to the data register and be done. This shortcut helps
	// significantly improve the effective datarate at high (>
	// 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
	if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    198e:	99 89       	ldd	r25, Y+17	; 0x11
    1990:	8a 89       	ldd	r24, Y+18	; 0x12
    1992:	98 13       	cpse	r25, r24
    1994:	25 c0       	rjmp	.+74     	; 0x19e0 <_ZN14HardwareSerial5writeEh+0x60>
    1996:	ee 81       	ldd	r30, Y+6	; 0x06
    1998:	ff 81       	ldd	r31, Y+7	; 0x07
    199a:	80 81       	ld	r24, Z
    199c:	85 fd       	sbrc	r24, 5
    199e:	31 c0       	rjmp	.+98     	; 0x1a02 <_ZN14HardwareSerial5writeEh+0x82>
    19a0:	1f c0       	rjmp	.+62     	; 0x19e0 <_ZN14HardwareSerial5writeEh+0x60>
	}
	tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
	// If the output buffer is full, there's nothing for it other than to
	// wait for the interrupt handler to empty it a bit
	while (i == _tx_buffer_tail) {
    19a2:	8a 89       	ldd	r24, Y+18	; 0x12
    19a4:	18 13       	cpse	r17, r24
    19a6:	0b c0       	rjmp	.+22     	; 0x19be <_ZN14HardwareSerial5writeEh+0x3e>
		if (bit_is_clear(SREG, SREG_I)) {
    19a8:	0f b6       	in	r0, 0x3f	; 63
    19aa:	07 fc       	sbrc	r0, 7
    19ac:	fa cf       	rjmp	.-12     	; 0x19a2 <_ZN14HardwareSerial5writeEh+0x22>
			// Interrupts are disabled, so we'll have to poll the data
			// register empty flag ourselves. If it is set, pretend an
			// interrupt has happened and call the handler to free up
			// space for us.
			if(bit_is_set(*_ucsra, UDRE0))
    19ae:	ee 81       	ldd	r30, Y+6	; 0x06
    19b0:	ff 81       	ldd	r31, Y+7	; 0x07
    19b2:	80 81       	ld	r24, Z
    19b4:	85 ff       	sbrs	r24, 5
    19b6:	f5 cf       	rjmp	.-22     	; 0x19a2 <_ZN14HardwareSerial5writeEh+0x22>
			_tx_udr_empty_irq();
    19b8:	ce 01       	movw	r24, r28
    19ba:	94 df       	rcall	.-216    	; 0x18e4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    19bc:	f2 cf       	rjmp	.-28     	; 0x19a2 <_ZN14HardwareSerial5writeEh+0x22>
			} else {
			// nop, the interrupt handler will free up space for us
		}
	}

	_tx_buffer[_tx_buffer_head] = c;
    19be:	89 89       	ldd	r24, Y+17	; 0x11
    19c0:	fe 01       	movw	r30, r28
    19c2:	e8 0f       	add	r30, r24
    19c4:	f1 1d       	adc	r31, r1
    19c6:	ed 5a       	subi	r30, 0xAD	; 173
    19c8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ca:	00 83       	st	Z, r16

	// make atomic to prevent execution of ISR between setting the
	// head pointer and setting the interrupt flag resulting in buffer
	// retransmission
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    19cc:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    19ce:	f8 94       	cli
		_tx_buffer_head = i;
    19d0:	19 8b       	std	Y+17, r17	; 0x11
		sbi(*_ucsrb, UDRIE0);
    19d2:	e8 85       	ldd	r30, Y+8	; 0x08
    19d4:	f9 85       	ldd	r31, Y+9	; 0x09
    19d6:	80 81       	ld	r24, Z
    19d8:	80 62       	ori	r24, 0x20	; 32
    19da:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    19dc:	9f bf       	out	0x3f, r25	; 63
	}
	
	return 1;
    19de:	1d c0       	rjmp	.+58     	; 0x1a1a <_ZN14HardwareSerial5writeEh+0x9a>
			*_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
			#endif
		}
		return 1;
	}
	tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    19e0:	29 89       	ldd	r18, Y+17	; 0x11
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	2f 5f       	subi	r18, 0xFF	; 255
    19e6:	3f 4f       	sbci	r19, 0xFF	; 255
    19e8:	2f 73       	andi	r18, 0x3F	; 63
    19ea:	30 78       	andi	r19, 0x80	; 128
    19ec:	33 23       	and	r19, r19
    19ee:	34 f4       	brge	.+12     	; 0x19fc <_ZN14HardwareSerial5writeEh+0x7c>
    19f0:	21 50       	subi	r18, 0x01	; 1
    19f2:	31 09       	sbc	r19, r1
    19f4:	20 6c       	ori	r18, 0xC0	; 192
    19f6:	3f 6f       	ori	r19, 0xFF	; 255
    19f8:	2f 5f       	subi	r18, 0xFF	; 255
    19fa:	3f 4f       	sbci	r19, 0xFF	; 255
    19fc:	06 2f       	mov	r16, r22
    19fe:	12 2f       	mov	r17, r18
    1a00:	d0 cf       	rjmp	.-96     	; 0x19a2 <_ZN14HardwareSerial5writeEh+0x22>
		// So writing UDR must happen first.
		// Writing UDR and clearing TC must be done atomically, otherwise
		// interrupts might delay the TXC clear so the byte written to UDR
		// is transmitted (setting TXC) before clearing TXC. Then TXC will
		// be cleared when no bytes are left, causing flush() to hang
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1a02:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1a04:	f8 94       	cli
			*_udr = c;
    1a06:	ec 85       	ldd	r30, Y+12	; 0x0c
    1a08:	fd 85       	ldd	r31, Y+13	; 0x0d
    1a0a:	60 83       	st	Z, r22
			#ifdef MPCM0
			*_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1a0c:	ee 81       	ldd	r30, Y+6	; 0x06
    1a0e:	ff 81       	ldd	r31, Y+7	; 0x07
    1a10:	80 81       	ld	r24, Z
    1a12:	83 70       	andi	r24, 0x03	; 3
    1a14:	80 64       	ori	r24, 0x40	; 64
    1a16:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1a18:	9f bf       	out	0x3f, r25	; 63
		_tx_buffer_head = i;
		sbi(*_ucsrb, UDRIE0);
	}
	
	return 1;
}
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	df 91       	pop	r29
    1a20:	cf 91       	pop	r28
    1a22:	1f 91       	pop	r17
    1a24:	0f 91       	pop	r16
    1a26:	08 95       	ret

00001a28 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, uint8_t config)
{
    1a28:	cf 92       	push	r12
    1a2a:	df 92       	push	r13
    1a2c:	ef 92       	push	r14
    1a2e:	ff 92       	push	r15
    1a30:	1f 93       	push	r17
    1a32:	cf 93       	push	r28
    1a34:	df 93       	push	r29
    1a36:	ec 01       	movw	r28, r24
    1a38:	6a 01       	movw	r12, r20
    1a3a:	7b 01       	movw	r14, r22
    1a3c:	12 2f       	mov	r17, r18
	// Try u2x mode first
	uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
	*_ucsra = 1 << U2X0;
    1a3e:	ee 81       	ldd	r30, Y+6	; 0x06
    1a40:	ff 81       	ldd	r31, Y+7	; 0x07
    1a42:	82 e0       	ldi	r24, 0x02	; 2
    1a44:	80 83       	st	Z, r24
	// hardcoded exception for 57600 for compatibility with the bootloader
	// shipped with the Duemilanove and previous boards and the firmware
	// on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
	// be > 4095, so switch back to non-u2x mode if the baud rate is too
	// low.
	if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1a46:	41 15       	cp	r20, r1
    1a48:	51 4e       	sbci	r21, 0xE1	; 225
    1a4a:	61 05       	cpc	r22, r1
    1a4c:	71 05       	cpc	r23, r1
    1a4e:	b1 f0       	breq	.+44     	; 0x1a7c <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, uint8_t config)
{
	// Try u2x mode first
	uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1a50:	60 e0       	ldi	r22, 0x00	; 0
    1a52:	79 e0       	ldi	r23, 0x09	; 9
    1a54:	8d e3       	ldi	r24, 0x3D	; 61
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	a7 01       	movw	r20, r14
    1a5a:	96 01       	movw	r18, r12
    1a5c:	0e 94 77 16 	call	0x2cee	; 0x2cee <__udivmodsi4>
    1a60:	da 01       	movw	r26, r20
    1a62:	c9 01       	movw	r24, r18
    1a64:	01 97       	sbiw	r24, 0x01	; 1
    1a66:	a1 09       	sbc	r26, r1
    1a68:	b1 09       	sbc	r27, r1
    1a6a:	b6 95       	lsr	r27
    1a6c:	a7 95       	ror	r26
    1a6e:	97 95       	ror	r25
    1a70:	87 95       	ror	r24
    1a72:	9c 01       	movw	r18, r24
	// hardcoded exception for 57600 for compatibility with the bootloader
	// shipped with the Duemilanove and previous boards and the firmware
	// on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
	// be > 4095, so switch back to non-u2x mode if the baud rate is too
	// low.
	if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1a74:	21 15       	cp	r18, r1
    1a76:	80 e1       	ldi	r24, 0x10	; 16
    1a78:	38 07       	cpc	r19, r24
    1a7a:	a8 f0       	brcs	.+42     	; 0x1aa6 <_ZN14HardwareSerial5beginEmh+0x7e>
	{
		*_ucsra = 0;
    1a7c:	ee 81       	ldd	r30, Y+6	; 0x06
    1a7e:	ff 81       	ldd	r31, Y+7	; 0x07
    1a80:	10 82       	st	Z, r1
		baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1a82:	60 e8       	ldi	r22, 0x80	; 128
    1a84:	74 e8       	ldi	r23, 0x84	; 132
    1a86:	8e e1       	ldi	r24, 0x1E	; 30
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	a7 01       	movw	r20, r14
    1a8c:	96 01       	movw	r18, r12
    1a8e:	0e 94 77 16 	call	0x2cee	; 0x2cee <__udivmodsi4>
    1a92:	da 01       	movw	r26, r20
    1a94:	c9 01       	movw	r24, r18
    1a96:	01 97       	sbiw	r24, 0x01	; 1
    1a98:	a1 09       	sbc	r26, r1
    1a9a:	b1 09       	sbc	r27, r1
    1a9c:	b6 95       	lsr	r27
    1a9e:	a7 95       	ror	r26
    1aa0:	97 95       	ror	r25
    1aa2:	87 95       	ror	r24
    1aa4:	9c 01       	movw	r18, r24
	}

	// assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
	*_ubrrh = baud_setting >> 8;
    1aa6:	ea 81       	ldd	r30, Y+2	; 0x02
    1aa8:	fb 81       	ldd	r31, Y+3	; 0x03
    1aaa:	30 83       	st	Z, r19
	*_ubrrl = baud_setting;
    1aac:	ec 81       	ldd	r30, Y+4	; 0x04
    1aae:	fd 81       	ldd	r31, Y+5	; 0x05
    1ab0:	20 83       	st	Z, r18

	_written = false;
    1ab2:	1e 86       	std	Y+14, r1	; 0x0e

	//set the data bits, parity, and stop bits
	#if defined(__AVR_ATmega8__)
	config |= 0x80; // select UCSRC register (shared with UBRRH)
	#endif
	*_ucsrc = config;
    1ab4:	ea 85       	ldd	r30, Y+10	; 0x0a
    1ab6:	fb 85       	ldd	r31, Y+11	; 0x0b
    1ab8:	10 83       	st	Z, r17
	
	sbi(*_ucsrb, RXEN0);
    1aba:	e8 85       	ldd	r30, Y+8	; 0x08
    1abc:	f9 85       	ldd	r31, Y+9	; 0x09
    1abe:	80 81       	ld	r24, Z
    1ac0:	80 61       	ori	r24, 0x10	; 16
    1ac2:	80 83       	st	Z, r24
	sbi(*_ucsrb, TXEN0);
    1ac4:	e8 85       	ldd	r30, Y+8	; 0x08
    1ac6:	f9 85       	ldd	r31, Y+9	; 0x09
    1ac8:	80 81       	ld	r24, Z
    1aca:	88 60       	ori	r24, 0x08	; 8
    1acc:	80 83       	st	Z, r24
	sbi(*_ucsrb, RXCIE0);
    1ace:	e8 85       	ldd	r30, Y+8	; 0x08
    1ad0:	f9 85       	ldd	r31, Y+9	; 0x09
    1ad2:	80 81       	ld	r24, Z
    1ad4:	80 68       	ori	r24, 0x80	; 128
    1ad6:	80 83       	st	Z, r24
	cbi(*_ucsrb, UDRIE0);
    1ad8:	e8 85       	ldd	r30, Y+8	; 0x08
    1ada:	f9 85       	ldd	r31, Y+9	; 0x09
    1adc:	80 81       	ld	r24, Z
    1ade:	8f 7d       	andi	r24, 0xDF	; 223
    1ae0:	80 83       	st	Z, r24
}
    1ae2:	df 91       	pop	r29
    1ae4:	cf 91       	pop	r28
    1ae6:	1f 91       	pop	r17
    1ae8:	ff 90       	pop	r15
    1aea:	ef 90       	pop	r14
    1aec:	df 90       	pop	r13
    1aee:	cf 90       	pop	r12
    1af0:	08 95       	ret

00001af2 <_ZN5Print17availableForWriteEv>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
}
    1af2:	80 e0       	ldi	r24, 0x00	; 0
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	08 95       	ret

00001af8 <__vector_25>:
    1af8:	1f 92       	push	r1
    1afa:	0f 92       	push	r0
    1afc:	0f b6       	in	r0, 0x3f	; 63
    1afe:	0f 92       	push	r0
    1b00:	11 24       	eor	r1, r1
    1b02:	0b b6       	in	r0, 0x3b	; 59
    1b04:	0f 92       	push	r0
    1b06:	2f 93       	push	r18
    1b08:	8f 93       	push	r24
    1b0a:	9f 93       	push	r25
    1b0c:	af 93       	push	r26
    1b0e:	bf 93       	push	r27
    1b10:	ef 93       	push	r30
    1b12:	ff 93       	push	r31
    1b14:	e0 91 67 05 	lds	r30, 0x0567	; 0x800567 <Serial+0x6>
    1b18:	f0 91 68 05 	lds	r31, 0x0568	; 0x800568 <Serial+0x7>
    1b1c:	80 81       	ld	r24, Z
    1b1e:	82 fd       	sbrc	r24, 2
    1b20:	14 c0       	rjmp	.+40     	; 0x1b4a <__vector_25+0x52>
    1b22:	e1 e6       	ldi	r30, 0x61	; 97
    1b24:	f5 e0       	ldi	r31, 0x05	; 5
    1b26:	a4 85       	ldd	r26, Z+12	; 0x0c
    1b28:	b5 85       	ldd	r27, Z+13	; 0x0d
    1b2a:	2c 91       	ld	r18, X
    1b2c:	87 85       	ldd	r24, Z+15	; 0x0f
    1b2e:	8f 5f       	subi	r24, 0xFF	; 255
    1b30:	8f 70       	andi	r24, 0x0F	; 15
    1b32:	90 89       	ldd	r25, Z+16	; 0x10
    1b34:	89 17       	cp	r24, r25
    1b36:	71 f0       	breq	.+28     	; 0x1b54 <__vector_25+0x5c>
    1b38:	df 01       	movw	r26, r30
    1b3a:	e7 85       	ldd	r30, Z+15	; 0x0f
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	ef 59       	subi	r30, 0x9F	; 159
    1b40:	fa 4f       	sbci	r31, 0xFA	; 250
    1b42:	23 8b       	std	Z+19, r18	; 0x13
    1b44:	1f 96       	adiw	r26, 0x0f	; 15
    1b46:	8c 93       	st	X, r24
    1b48:	05 c0       	rjmp	.+10     	; 0x1b54 <__vector_25+0x5c>
    1b4a:	e0 91 6d 05 	lds	r30, 0x056D	; 0x80056d <Serial+0xc>
    1b4e:	f0 91 6e 05 	lds	r31, 0x056E	; 0x80056e <Serial+0xd>
    1b52:	80 81       	ld	r24, Z
    1b54:	ff 91       	pop	r31
    1b56:	ef 91       	pop	r30
    1b58:	bf 91       	pop	r27
    1b5a:	af 91       	pop	r26
    1b5c:	9f 91       	pop	r25
    1b5e:	8f 91       	pop	r24
    1b60:	2f 91       	pop	r18
    1b62:	0f 90       	pop	r0
    1b64:	0b be       	out	0x3b, r0	; 59
    1b66:	0f 90       	pop	r0
    1b68:	0f be       	out	0x3f, r0	; 63
    1b6a:	0f 90       	pop	r0
    1b6c:	1f 90       	pop	r1
    1b6e:	18 95       	reti

00001b70 <__vector_26>:
    1b70:	1f 92       	push	r1
    1b72:	0f 92       	push	r0
    1b74:	0f b6       	in	r0, 0x3f	; 63
    1b76:	0f 92       	push	r0
    1b78:	11 24       	eor	r1, r1
    1b7a:	0b b6       	in	r0, 0x3b	; 59
    1b7c:	0f 92       	push	r0
    1b7e:	2f 93       	push	r18
    1b80:	3f 93       	push	r19
    1b82:	4f 93       	push	r20
    1b84:	5f 93       	push	r21
    1b86:	6f 93       	push	r22
    1b88:	7f 93       	push	r23
    1b8a:	8f 93       	push	r24
    1b8c:	9f 93       	push	r25
    1b8e:	af 93       	push	r26
    1b90:	bf 93       	push	r27
    1b92:	ef 93       	push	r30
    1b94:	ff 93       	push	r31
    1b96:	81 e6       	ldi	r24, 0x61	; 97
    1b98:	95 e0       	ldi	r25, 0x05	; 5
    1b9a:	a4 de       	rcall	.-696    	; 0x18e4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1b9c:	ff 91       	pop	r31
    1b9e:	ef 91       	pop	r30
    1ba0:	bf 91       	pop	r27
    1ba2:	af 91       	pop	r26
    1ba4:	9f 91       	pop	r25
    1ba6:	8f 91       	pop	r24
    1ba8:	7f 91       	pop	r23
    1baa:	6f 91       	pop	r22
    1bac:	5f 91       	pop	r21
    1bae:	4f 91       	pop	r20
    1bb0:	3f 91       	pop	r19
    1bb2:	2f 91       	pop	r18
    1bb4:	0f 90       	pop	r0
    1bb6:	0b be       	out	0x3b, r0	; 59
    1bb8:	0f 90       	pop	r0
    1bba:	0f be       	out	0x3f, r0	; 63
    1bbc:	0f 90       	pop	r0
    1bbe:	1f 90       	pop	r1
    1bc0:	18 95       	reti

00001bc2 <_GLOBAL__sub_I___vector_25>:
volatile uint8_t *ucsrc, volatile uint8_t *udr) :
_ubrrh(ubrrh), _ubrrl(ubrrl),
_ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
_udr(udr),
_rx_buffer_head(0), _rx_buffer_tail(0),
_tx_buffer_head(0), _tx_buffer_tail(0)
    1bc2:	e1 e6       	ldi	r30, 0x61	; 97
    1bc4:	f5 e0       	ldi	r31, 0x05	; 5
    1bc6:	8e ea       	ldi	r24, 0xAE	; 174
    1bc8:	92 e0       	ldi	r25, 0x02	; 2
    1bca:	91 83       	std	Z+1, r25	; 0x01
    1bcc:	80 83       	st	Z, r24
    1bce:	85 ec       	ldi	r24, 0xC5	; 197
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	93 83       	std	Z+3, r25	; 0x03
    1bd4:	82 83       	std	Z+2, r24	; 0x02
    1bd6:	84 ec       	ldi	r24, 0xC4	; 196
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	95 83       	std	Z+5, r25	; 0x05
    1bdc:	84 83       	std	Z+4, r24	; 0x04
    1bde:	80 ec       	ldi	r24, 0xC0	; 192
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	97 83       	std	Z+7, r25	; 0x07
    1be4:	86 83       	std	Z+6, r24	; 0x06
    1be6:	81 ec       	ldi	r24, 0xC1	; 193
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	91 87       	std	Z+9, r25	; 0x09
    1bec:	80 87       	std	Z+8, r24	; 0x08
    1bee:	82 ec       	ldi	r24, 0xC2	; 194
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	93 87       	std	Z+11, r25	; 0x0b
    1bf4:	82 87       	std	Z+10, r24	; 0x0a
    1bf6:	86 ec       	ldi	r24, 0xC6	; 198
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	95 87       	std	Z+13, r25	; 0x0d
    1bfc:	84 87       	std	Z+12, r24	; 0x0c
    1bfe:	17 86       	std	Z+15, r1	; 0x0f
    1c00:	10 8a       	std	Z+16, r1	; 0x10
    1c02:	11 8a       	std	Z+17, r1	; 0x11
    1c04:	12 8a       	std	Z+18, r1	; 0x12
    1c06:	08 95       	ret

00001c08 <__vector_36>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
}
    1c08:	1f 92       	push	r1
    1c0a:	0f 92       	push	r0
    1c0c:	0f b6       	in	r0, 0x3f	; 63
    1c0e:	0f 92       	push	r0
    1c10:	11 24       	eor	r1, r1
    1c12:	0b b6       	in	r0, 0x3b	; 59
    1c14:	0f 92       	push	r0
    1c16:	2f 93       	push	r18
    1c18:	8f 93       	push	r24
    1c1a:	9f 93       	push	r25
    1c1c:	af 93       	push	r26
    1c1e:	bf 93       	push	r27
    1c20:	ef 93       	push	r30
    1c22:	ff 93       	push	r31
    1c24:	e0 91 9a 05 	lds	r30, 0x059A	; 0x80059a <Serial1+0x6>
    1c28:	f0 91 9b 05 	lds	r31, 0x059B	; 0x80059b <Serial1+0x7>
    1c2c:	80 81       	ld	r24, Z
    1c2e:	82 fd       	sbrc	r24, 2
    1c30:	14 c0       	rjmp	.+40     	; 0x1c5a <__vector_36+0x52>
    1c32:	e4 e9       	ldi	r30, 0x94	; 148
    1c34:	f5 e0       	ldi	r31, 0x05	; 5
    1c36:	a4 85       	ldd	r26, Z+12	; 0x0c
    1c38:	b5 85       	ldd	r27, Z+13	; 0x0d
    1c3a:	2c 91       	ld	r18, X
    1c3c:	87 85       	ldd	r24, Z+15	; 0x0f
    1c3e:	8f 5f       	subi	r24, 0xFF	; 255
    1c40:	8f 70       	andi	r24, 0x0F	; 15
    1c42:	90 89       	ldd	r25, Z+16	; 0x10
    1c44:	89 17       	cp	r24, r25
    1c46:	71 f0       	breq	.+28     	; 0x1c64 <__vector_36+0x5c>
    1c48:	df 01       	movw	r26, r30
    1c4a:	e7 85       	ldd	r30, Z+15	; 0x0f
    1c4c:	f0 e0       	ldi	r31, 0x00	; 0
    1c4e:	ec 56       	subi	r30, 0x6C	; 108
    1c50:	fa 4f       	sbci	r31, 0xFA	; 250
    1c52:	23 8b       	std	Z+19, r18	; 0x13
    1c54:	1f 96       	adiw	r26, 0x0f	; 15
    1c56:	8c 93       	st	X, r24
    1c58:	05 c0       	rjmp	.+10     	; 0x1c64 <__vector_36+0x5c>
    1c5a:	e0 91 a0 05 	lds	r30, 0x05A0	; 0x8005a0 <Serial1+0xc>
    1c5e:	f0 91 a1 05 	lds	r31, 0x05A1	; 0x8005a1 <Serial1+0xd>
    1c62:	80 81       	ld	r24, Z
    1c64:	ff 91       	pop	r31
    1c66:	ef 91       	pop	r30
    1c68:	bf 91       	pop	r27
    1c6a:	af 91       	pop	r26
    1c6c:	9f 91       	pop	r25
    1c6e:	8f 91       	pop	r24
    1c70:	2f 91       	pop	r18
    1c72:	0f 90       	pop	r0
    1c74:	0b be       	out	0x3b, r0	; 59
    1c76:	0f 90       	pop	r0
    1c78:	0f be       	out	0x3f, r0	; 63
    1c7a:	0f 90       	pop	r0
    1c7c:	1f 90       	pop	r1
    1c7e:	18 95       	reti

00001c80 <__vector_37>:
    1c80:	1f 92       	push	r1
    1c82:	0f 92       	push	r0
    1c84:	0f b6       	in	r0, 0x3f	; 63
    1c86:	0f 92       	push	r0
    1c88:	11 24       	eor	r1, r1
    1c8a:	0b b6       	in	r0, 0x3b	; 59
    1c8c:	0f 92       	push	r0
    1c8e:	2f 93       	push	r18
    1c90:	3f 93       	push	r19
    1c92:	4f 93       	push	r20
    1c94:	5f 93       	push	r21
    1c96:	6f 93       	push	r22
    1c98:	7f 93       	push	r23
    1c9a:	8f 93       	push	r24
    1c9c:	9f 93       	push	r25
    1c9e:	af 93       	push	r26
    1ca0:	bf 93       	push	r27
    1ca2:	ef 93       	push	r30
    1ca4:	ff 93       	push	r31
    1ca6:	84 e9       	ldi	r24, 0x94	; 148
    1ca8:	95 e0       	ldi	r25, 0x05	; 5
    1caa:	1c de       	rcall	.-968    	; 0x18e4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1cac:	ff 91       	pop	r31
    1cae:	ef 91       	pop	r30
    1cb0:	bf 91       	pop	r27
    1cb2:	af 91       	pop	r26
    1cb4:	9f 91       	pop	r25
    1cb6:	8f 91       	pop	r24
    1cb8:	7f 91       	pop	r23
    1cba:	6f 91       	pop	r22
    1cbc:	5f 91       	pop	r21
    1cbe:	4f 91       	pop	r20
    1cc0:	3f 91       	pop	r19
    1cc2:	2f 91       	pop	r18
    1cc4:	0f 90       	pop	r0
    1cc6:	0b be       	out	0x3b, r0	; 59
    1cc8:	0f 90       	pop	r0
    1cca:	0f be       	out	0x3f, r0	; 63
    1ccc:	0f 90       	pop	r0
    1cce:	1f 90       	pop	r1
    1cd0:	18 95       	reti

00001cd2 <_GLOBAL__sub_I___vector_36>:
    1cd2:	e4 e9       	ldi	r30, 0x94	; 148
    1cd4:	f5 e0       	ldi	r31, 0x05	; 5
    1cd6:	8e ea       	ldi	r24, 0xAE	; 174
    1cd8:	92 e0       	ldi	r25, 0x02	; 2
    1cda:	91 83       	std	Z+1, r25	; 0x01
    1cdc:	80 83       	st	Z, r24
    1cde:	8d ec       	ldi	r24, 0xCD	; 205
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	93 83       	std	Z+3, r25	; 0x03
    1ce4:	82 83       	std	Z+2, r24	; 0x02
    1ce6:	8c ec       	ldi	r24, 0xCC	; 204
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	95 83       	std	Z+5, r25	; 0x05
    1cec:	84 83       	std	Z+4, r24	; 0x04
    1cee:	88 ec       	ldi	r24, 0xC8	; 200
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	97 83       	std	Z+7, r25	; 0x07
    1cf4:	86 83       	std	Z+6, r24	; 0x06
    1cf6:	89 ec       	ldi	r24, 0xC9	; 201
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	91 87       	std	Z+9, r25	; 0x09
    1cfc:	80 87       	std	Z+8, r24	; 0x08
    1cfe:	8a ec       	ldi	r24, 0xCA	; 202
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	93 87       	std	Z+11, r25	; 0x0b
    1d04:	82 87       	std	Z+10, r24	; 0x0a
    1d06:	8e ec       	ldi	r24, 0xCE	; 206
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	95 87       	std	Z+13, r25	; 0x0d
    1d0c:	84 87       	std	Z+12, r24	; 0x0c
    1d0e:	17 86       	std	Z+15, r1	; 0x0f
    1d10:	10 8a       	std	Z+16, r1	; 0x10
    1d12:	11 8a       	std	Z+17, r1	; 0x11
    1d14:	12 8a       	std	Z+18, r1	; 0x12
    1d16:	08 95       	ret

00001d18 <__vector_51>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial2_available() {
  return Serial2.available();
}
    1d18:	1f 92       	push	r1
    1d1a:	0f 92       	push	r0
    1d1c:	0f b6       	in	r0, 0x3f	; 63
    1d1e:	0f 92       	push	r0
    1d20:	11 24       	eor	r1, r1
    1d22:	0b b6       	in	r0, 0x3b	; 59
    1d24:	0f 92       	push	r0
    1d26:	2f 93       	push	r18
    1d28:	8f 93       	push	r24
    1d2a:	9f 93       	push	r25
    1d2c:	af 93       	push	r26
    1d2e:	bf 93       	push	r27
    1d30:	ef 93       	push	r30
    1d32:	ff 93       	push	r31
    1d34:	e0 91 cd 05 	lds	r30, 0x05CD	; 0x8005cd <Serial2+0x6>
    1d38:	f0 91 ce 05 	lds	r31, 0x05CE	; 0x8005ce <Serial2+0x7>
    1d3c:	80 81       	ld	r24, Z
    1d3e:	82 fd       	sbrc	r24, 2
    1d40:	14 c0       	rjmp	.+40     	; 0x1d6a <__vector_51+0x52>
    1d42:	e7 ec       	ldi	r30, 0xC7	; 199
    1d44:	f5 e0       	ldi	r31, 0x05	; 5
    1d46:	a4 85       	ldd	r26, Z+12	; 0x0c
    1d48:	b5 85       	ldd	r27, Z+13	; 0x0d
    1d4a:	2c 91       	ld	r18, X
    1d4c:	87 85       	ldd	r24, Z+15	; 0x0f
    1d4e:	8f 5f       	subi	r24, 0xFF	; 255
    1d50:	8f 70       	andi	r24, 0x0F	; 15
    1d52:	90 89       	ldd	r25, Z+16	; 0x10
    1d54:	89 17       	cp	r24, r25
    1d56:	71 f0       	breq	.+28     	; 0x1d74 <__vector_51+0x5c>
    1d58:	df 01       	movw	r26, r30
    1d5a:	e7 85       	ldd	r30, Z+15	; 0x0f
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	e9 53       	subi	r30, 0x39	; 57
    1d60:	fa 4f       	sbci	r31, 0xFA	; 250
    1d62:	23 8b       	std	Z+19, r18	; 0x13
    1d64:	1f 96       	adiw	r26, 0x0f	; 15
    1d66:	8c 93       	st	X, r24
    1d68:	05 c0       	rjmp	.+10     	; 0x1d74 <__vector_51+0x5c>
    1d6a:	e0 91 d3 05 	lds	r30, 0x05D3	; 0x8005d3 <Serial2+0xc>
    1d6e:	f0 91 d4 05 	lds	r31, 0x05D4	; 0x8005d4 <Serial2+0xd>
    1d72:	80 81       	ld	r24, Z
    1d74:	ff 91       	pop	r31
    1d76:	ef 91       	pop	r30
    1d78:	bf 91       	pop	r27
    1d7a:	af 91       	pop	r26
    1d7c:	9f 91       	pop	r25
    1d7e:	8f 91       	pop	r24
    1d80:	2f 91       	pop	r18
    1d82:	0f 90       	pop	r0
    1d84:	0b be       	out	0x3b, r0	; 59
    1d86:	0f 90       	pop	r0
    1d88:	0f be       	out	0x3f, r0	; 63
    1d8a:	0f 90       	pop	r0
    1d8c:	1f 90       	pop	r1
    1d8e:	18 95       	reti

00001d90 <__vector_52>:
    1d90:	1f 92       	push	r1
    1d92:	0f 92       	push	r0
    1d94:	0f b6       	in	r0, 0x3f	; 63
    1d96:	0f 92       	push	r0
    1d98:	11 24       	eor	r1, r1
    1d9a:	0b b6       	in	r0, 0x3b	; 59
    1d9c:	0f 92       	push	r0
    1d9e:	2f 93       	push	r18
    1da0:	3f 93       	push	r19
    1da2:	4f 93       	push	r20
    1da4:	5f 93       	push	r21
    1da6:	6f 93       	push	r22
    1da8:	7f 93       	push	r23
    1daa:	8f 93       	push	r24
    1dac:	9f 93       	push	r25
    1dae:	af 93       	push	r26
    1db0:	bf 93       	push	r27
    1db2:	ef 93       	push	r30
    1db4:	ff 93       	push	r31
    1db6:	87 ec       	ldi	r24, 0xC7	; 199
    1db8:	95 e0       	ldi	r25, 0x05	; 5
    1dba:	94 dd       	rcall	.-1240   	; 0x18e4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1dbc:	ff 91       	pop	r31
    1dbe:	ef 91       	pop	r30
    1dc0:	bf 91       	pop	r27
    1dc2:	af 91       	pop	r26
    1dc4:	9f 91       	pop	r25
    1dc6:	8f 91       	pop	r24
    1dc8:	7f 91       	pop	r23
    1dca:	6f 91       	pop	r22
    1dcc:	5f 91       	pop	r21
    1dce:	4f 91       	pop	r20
    1dd0:	3f 91       	pop	r19
    1dd2:	2f 91       	pop	r18
    1dd4:	0f 90       	pop	r0
    1dd6:	0b be       	out	0x3b, r0	; 59
    1dd8:	0f 90       	pop	r0
    1dda:	0f be       	out	0x3f, r0	; 63
    1ddc:	0f 90       	pop	r0
    1dde:	1f 90       	pop	r1
    1de0:	18 95       	reti

00001de2 <_GLOBAL__sub_I___vector_51>:
    1de2:	e7 ec       	ldi	r30, 0xC7	; 199
    1de4:	f5 e0       	ldi	r31, 0x05	; 5
    1de6:	8e ea       	ldi	r24, 0xAE	; 174
    1de8:	92 e0       	ldi	r25, 0x02	; 2
    1dea:	91 83       	std	Z+1, r25	; 0x01
    1dec:	80 83       	st	Z, r24
    1dee:	85 ed       	ldi	r24, 0xD5	; 213
    1df0:	90 e0       	ldi	r25, 0x00	; 0
    1df2:	93 83       	std	Z+3, r25	; 0x03
    1df4:	82 83       	std	Z+2, r24	; 0x02
    1df6:	84 ed       	ldi	r24, 0xD4	; 212
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	95 83       	std	Z+5, r25	; 0x05
    1dfc:	84 83       	std	Z+4, r24	; 0x04
    1dfe:	80 ed       	ldi	r24, 0xD0	; 208
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	97 83       	std	Z+7, r25	; 0x07
    1e04:	86 83       	std	Z+6, r24	; 0x06
    1e06:	81 ed       	ldi	r24, 0xD1	; 209
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	91 87       	std	Z+9, r25	; 0x09
    1e0c:	80 87       	std	Z+8, r24	; 0x08
    1e0e:	82 ed       	ldi	r24, 0xD2	; 210
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	93 87       	std	Z+11, r25	; 0x0b
    1e14:	82 87       	std	Z+10, r24	; 0x0a
    1e16:	86 ed       	ldi	r24, 0xD6	; 214
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	95 87       	std	Z+13, r25	; 0x0d
    1e1c:	84 87       	std	Z+12, r24	; 0x0c
    1e1e:	17 86       	std	Z+15, r1	; 0x0f
    1e20:	10 8a       	std	Z+16, r1	; 0x10
    1e22:	11 8a       	std	Z+17, r1	; 0x11
    1e24:	12 8a       	std	Z+18, r1	; 0x12
    1e26:	08 95       	ret

00001e28 <__vector_54>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial3_available() {
  return Serial3.available();
}
    1e28:	1f 92       	push	r1
    1e2a:	0f 92       	push	r0
    1e2c:	0f b6       	in	r0, 0x3f	; 63
    1e2e:	0f 92       	push	r0
    1e30:	11 24       	eor	r1, r1
    1e32:	0b b6       	in	r0, 0x3b	; 59
    1e34:	0f 92       	push	r0
    1e36:	2f 93       	push	r18
    1e38:	8f 93       	push	r24
    1e3a:	9f 93       	push	r25
    1e3c:	af 93       	push	r26
    1e3e:	bf 93       	push	r27
    1e40:	ef 93       	push	r30
    1e42:	ff 93       	push	r31
    1e44:	e0 91 00 06 	lds	r30, 0x0600	; 0x800600 <Serial3+0x6>
    1e48:	f0 91 01 06 	lds	r31, 0x0601	; 0x800601 <Serial3+0x7>
    1e4c:	80 81       	ld	r24, Z
    1e4e:	82 fd       	sbrc	r24, 2
    1e50:	14 c0       	rjmp	.+40     	; 0x1e7a <__vector_54+0x52>
    1e52:	ea ef       	ldi	r30, 0xFA	; 250
    1e54:	f5 e0       	ldi	r31, 0x05	; 5
    1e56:	a4 85       	ldd	r26, Z+12	; 0x0c
    1e58:	b5 85       	ldd	r27, Z+13	; 0x0d
    1e5a:	2c 91       	ld	r18, X
    1e5c:	87 85       	ldd	r24, Z+15	; 0x0f
    1e5e:	8f 5f       	subi	r24, 0xFF	; 255
    1e60:	8f 70       	andi	r24, 0x0F	; 15
    1e62:	90 89       	ldd	r25, Z+16	; 0x10
    1e64:	89 17       	cp	r24, r25
    1e66:	71 f0       	breq	.+28     	; 0x1e84 <__vector_54+0x5c>
    1e68:	df 01       	movw	r26, r30
    1e6a:	e7 85       	ldd	r30, Z+15	; 0x0f
    1e6c:	f0 e0       	ldi	r31, 0x00	; 0
    1e6e:	e6 50       	subi	r30, 0x06	; 6
    1e70:	fa 4f       	sbci	r31, 0xFA	; 250
    1e72:	23 8b       	std	Z+19, r18	; 0x13
    1e74:	1f 96       	adiw	r26, 0x0f	; 15
    1e76:	8c 93       	st	X, r24
    1e78:	05 c0       	rjmp	.+10     	; 0x1e84 <__vector_54+0x5c>
    1e7a:	e0 91 06 06 	lds	r30, 0x0606	; 0x800606 <Serial3+0xc>
    1e7e:	f0 91 07 06 	lds	r31, 0x0607	; 0x800607 <Serial3+0xd>
    1e82:	80 81       	ld	r24, Z
    1e84:	ff 91       	pop	r31
    1e86:	ef 91       	pop	r30
    1e88:	bf 91       	pop	r27
    1e8a:	af 91       	pop	r26
    1e8c:	9f 91       	pop	r25
    1e8e:	8f 91       	pop	r24
    1e90:	2f 91       	pop	r18
    1e92:	0f 90       	pop	r0
    1e94:	0b be       	out	0x3b, r0	; 59
    1e96:	0f 90       	pop	r0
    1e98:	0f be       	out	0x3f, r0	; 63
    1e9a:	0f 90       	pop	r0
    1e9c:	1f 90       	pop	r1
    1e9e:	18 95       	reti

00001ea0 <__vector_55>:
    1ea0:	1f 92       	push	r1
    1ea2:	0f 92       	push	r0
    1ea4:	0f b6       	in	r0, 0x3f	; 63
    1ea6:	0f 92       	push	r0
    1ea8:	11 24       	eor	r1, r1
    1eaa:	0b b6       	in	r0, 0x3b	; 59
    1eac:	0f 92       	push	r0
    1eae:	2f 93       	push	r18
    1eb0:	3f 93       	push	r19
    1eb2:	4f 93       	push	r20
    1eb4:	5f 93       	push	r21
    1eb6:	6f 93       	push	r22
    1eb8:	7f 93       	push	r23
    1eba:	8f 93       	push	r24
    1ebc:	9f 93       	push	r25
    1ebe:	af 93       	push	r26
    1ec0:	bf 93       	push	r27
    1ec2:	ef 93       	push	r30
    1ec4:	ff 93       	push	r31
    1ec6:	8a ef       	ldi	r24, 0xFA	; 250
    1ec8:	95 e0       	ldi	r25, 0x05	; 5
    1eca:	0c dd       	rcall	.-1512   	; 0x18e4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1ecc:	ff 91       	pop	r31
    1ece:	ef 91       	pop	r30
    1ed0:	bf 91       	pop	r27
    1ed2:	af 91       	pop	r26
    1ed4:	9f 91       	pop	r25
    1ed6:	8f 91       	pop	r24
    1ed8:	7f 91       	pop	r23
    1eda:	6f 91       	pop	r22
    1edc:	5f 91       	pop	r21
    1ede:	4f 91       	pop	r20
    1ee0:	3f 91       	pop	r19
    1ee2:	2f 91       	pop	r18
    1ee4:	0f 90       	pop	r0
    1ee6:	0b be       	out	0x3b, r0	; 59
    1ee8:	0f 90       	pop	r0
    1eea:	0f be       	out	0x3f, r0	; 63
    1eec:	0f 90       	pop	r0
    1eee:	1f 90       	pop	r1
    1ef0:	18 95       	reti

00001ef2 <_GLOBAL__sub_I___vector_54>:
    1ef2:	ea ef       	ldi	r30, 0xFA	; 250
    1ef4:	f5 e0       	ldi	r31, 0x05	; 5
    1ef6:	8e ea       	ldi	r24, 0xAE	; 174
    1ef8:	92 e0       	ldi	r25, 0x02	; 2
    1efa:	91 83       	std	Z+1, r25	; 0x01
    1efc:	80 83       	st	Z, r24
    1efe:	85 e3       	ldi	r24, 0x35	; 53
    1f00:	91 e0       	ldi	r25, 0x01	; 1
    1f02:	93 83       	std	Z+3, r25	; 0x03
    1f04:	82 83       	std	Z+2, r24	; 0x02
    1f06:	84 e3       	ldi	r24, 0x34	; 52
    1f08:	91 e0       	ldi	r25, 0x01	; 1
    1f0a:	95 83       	std	Z+5, r25	; 0x05
    1f0c:	84 83       	std	Z+4, r24	; 0x04
    1f0e:	80 e3       	ldi	r24, 0x30	; 48
    1f10:	91 e0       	ldi	r25, 0x01	; 1
    1f12:	97 83       	std	Z+7, r25	; 0x07
    1f14:	86 83       	std	Z+6, r24	; 0x06
    1f16:	81 e3       	ldi	r24, 0x31	; 49
    1f18:	91 e0       	ldi	r25, 0x01	; 1
    1f1a:	91 87       	std	Z+9, r25	; 0x09
    1f1c:	80 87       	std	Z+8, r24	; 0x08
    1f1e:	82 e3       	ldi	r24, 0x32	; 50
    1f20:	91 e0       	ldi	r25, 0x01	; 1
    1f22:	93 87       	std	Z+11, r25	; 0x0b
    1f24:	82 87       	std	Z+10, r24	; 0x0a
    1f26:	86 e3       	ldi	r24, 0x36	; 54
    1f28:	91 e0       	ldi	r25, 0x01	; 1
    1f2a:	95 87       	std	Z+13, r25	; 0x0d
    1f2c:	84 87       	std	Z+12, r24	; 0x0c
    1f2e:	17 86       	std	Z+15, r1	; 0x0f
    1f30:	10 8a       	std	Z+16, r1	; 0x10
    1f32:	11 8a       	std	Z+17, r1	; 0x11
    1f34:	12 8a       	std	Z+18, r1	; 0x12
    1f36:	08 95       	ret

00001f38 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1f38:	10 92 9a 06 	sts	0x069A, r1	; 0x80069a <twi_state>
    1f3c:	81 e0       	ldi	r24, 0x01	; 1
    1f3e:	80 93 98 06 	sts	0x0698, r24	; 0x800698 <twi_sendStop>
    1f42:	10 92 97 06 	sts	0x0697, r1	; 0x800697 <twi_inRepStart>
    1f46:	8b b1       	in	r24, 0x0b	; 11
    1f48:	83 60       	ori	r24, 0x03	; 3
    1f4a:	8b b9       	out	0x0b, r24	; 11
    1f4c:	e9 eb       	ldi	r30, 0xB9	; 185
    1f4e:	f0 e0       	ldi	r31, 0x00	; 0
    1f50:	80 81       	ld	r24, Z
    1f52:	8e 7f       	andi	r24, 0xFE	; 254
    1f54:	80 83       	st	Z, r24
    1f56:	80 81       	ld	r24, Z
    1f58:	8d 7f       	andi	r24, 0xFD	; 253
    1f5a:	80 83       	st	Z, r24
    1f5c:	88 e4       	ldi	r24, 0x48	; 72
    1f5e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    1f62:	85 e4       	ldi	r24, 0x45	; 69
    1f64:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1f68:	08 95       	ret

00001f6a <twi_readFrom>:
    1f6a:	41 32       	cpi	r20, 0x21	; 33
    1f6c:	08 f0       	brcs	.+2      	; 0x1f70 <twi_readFrom+0x6>
    1f6e:	4c c0       	rjmp	.+152    	; 0x2008 <twi_readFrom+0x9e>
    1f70:	90 91 9a 06 	lds	r25, 0x069A	; 0x80069a <twi_state>
    1f74:	91 11       	cpse	r25, r1
    1f76:	fc cf       	rjmp	.-8      	; 0x1f70 <twi_readFrom+0x6>
    1f78:	31 e0       	ldi	r19, 0x01	; 1
    1f7a:	30 93 9a 06 	sts	0x069A, r19	; 0x80069a <twi_state>
    1f7e:	20 93 98 06 	sts	0x0698, r18	; 0x800698 <twi_sendStop>
    1f82:	2f ef       	ldi	r18, 0xFF	; 255
    1f84:	20 93 2d 06 	sts	0x062D, r18	; 0x80062d <twi_error>
    1f88:	10 92 72 06 	sts	0x0672, r1	; 0x800672 <twi_masterBufferIndex>
    1f8c:	24 0f       	add	r18, r20
    1f8e:	20 93 71 06 	sts	0x0671, r18	; 0x800671 <twi_masterBufferLength>
    1f92:	30 93 99 06 	sts	0x0699, r19	; 0x800699 <twi_slarw>
    1f96:	20 91 99 06 	lds	r18, 0x0699	; 0x800699 <twi_slarw>
    1f9a:	88 0f       	add	r24, r24
    1f9c:	82 2b       	or	r24, r18
    1f9e:	80 93 99 06 	sts	0x0699, r24	; 0x800699 <twi_slarw>
    1fa2:	80 91 97 06 	lds	r24, 0x0697	; 0x800697 <twi_inRepStart>
    1fa6:	81 30       	cpi	r24, 0x01	; 1
    1fa8:	81 f4       	brne	.+32     	; 0x1fca <twi_readFrom+0x60>
    1faa:	10 92 97 06 	sts	0x0697, r1	; 0x800697 <twi_inRepStart>
    1fae:	ab eb       	ldi	r26, 0xBB	; 187
    1fb0:	b0 e0       	ldi	r27, 0x00	; 0
    1fb2:	ec eb       	ldi	r30, 0xBC	; 188
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	80 91 99 06 	lds	r24, 0x0699	; 0x800699 <twi_slarw>
    1fba:	8c 93       	st	X, r24
    1fbc:	80 81       	ld	r24, Z
    1fbe:	83 fd       	sbrc	r24, 3
    1fc0:	fa cf       	rjmp	.-12     	; 0x1fb6 <twi_readFrom+0x4c>
    1fc2:	85 ec       	ldi	r24, 0xC5	; 197
    1fc4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1fc8:	03 c0       	rjmp	.+6      	; 0x1fd0 <twi_readFrom+0x66>
    1fca:	85 ee       	ldi	r24, 0xE5	; 229
    1fcc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1fd0:	80 91 9a 06 	lds	r24, 0x069A	; 0x80069a <twi_state>
    1fd4:	81 30       	cpi	r24, 0x01	; 1
    1fd6:	e1 f3       	breq	.-8      	; 0x1fd0 <twi_readFrom+0x66>
    1fd8:	80 91 72 06 	lds	r24, 0x0672	; 0x800672 <twi_masterBufferIndex>
    1fdc:	84 17       	cp	r24, r20
    1fde:	10 f4       	brcc	.+4      	; 0x1fe4 <twi_readFrom+0x7a>
    1fe0:	40 91 72 06 	lds	r20, 0x0672	; 0x800672 <twi_masterBufferIndex>
    1fe4:	44 23       	and	r20, r20
    1fe6:	89 f0       	breq	.+34     	; 0x200a <twi_readFrom+0xa0>
    1fe8:	e3 e7       	ldi	r30, 0x73	; 115
    1fea:	f6 e0       	ldi	r31, 0x06	; 6
    1fec:	a6 2f       	mov	r26, r22
    1fee:	b7 2f       	mov	r27, r23
    1ff0:	2f ef       	ldi	r18, 0xFF	; 255
    1ff2:	24 0f       	add	r18, r20
    1ff4:	30 e0       	ldi	r19, 0x00	; 0
    1ff6:	2c 58       	subi	r18, 0x8C	; 140
    1ff8:	39 4f       	sbci	r19, 0xF9	; 249
    1ffa:	81 91       	ld	r24, Z+
    1ffc:	8d 93       	st	X+, r24
    1ffe:	e2 17       	cp	r30, r18
    2000:	f3 07       	cpc	r31, r19
    2002:	d9 f7       	brne	.-10     	; 0x1ffa <twi_readFrom+0x90>
    2004:	94 2f       	mov	r25, r20
    2006:	01 c0       	rjmp	.+2      	; 0x200a <twi_readFrom+0xa0>
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	89 2f       	mov	r24, r25
    200c:	08 95       	ret

0000200e <twi_writeTo>:
    200e:	0f 93       	push	r16
    2010:	41 32       	cpi	r20, 0x21	; 33
    2012:	08 f0       	brcs	.+2      	; 0x2016 <twi_writeTo+0x8>
    2014:	57 c0       	rjmp	.+174    	; 0x20c4 <twi_writeTo+0xb6>
    2016:	30 91 9a 06 	lds	r19, 0x069A	; 0x80069a <twi_state>
    201a:	31 11       	cpse	r19, r1
    201c:	fc cf       	rjmp	.-8      	; 0x2016 <twi_writeTo+0x8>
    201e:	92 e0       	ldi	r25, 0x02	; 2
    2020:	90 93 9a 06 	sts	0x069A, r25	; 0x80069a <twi_state>
    2024:	00 93 98 06 	sts	0x0698, r16	; 0x800698 <twi_sendStop>
    2028:	9f ef       	ldi	r25, 0xFF	; 255
    202a:	90 93 2d 06 	sts	0x062D, r25	; 0x80062d <twi_error>
    202e:	10 92 72 06 	sts	0x0672, r1	; 0x800672 <twi_masterBufferIndex>
    2032:	40 93 71 06 	sts	0x0671, r20	; 0x800671 <twi_masterBufferLength>
    2036:	44 23       	and	r20, r20
    2038:	71 f0       	breq	.+28     	; 0x2056 <twi_writeTo+0x48>
    203a:	fb 01       	movw	r30, r22
    203c:	a3 e7       	ldi	r26, 0x73	; 115
    203e:	b6 e0       	ldi	r27, 0x06	; 6
    2040:	41 50       	subi	r20, 0x01	; 1
    2042:	50 e0       	ldi	r21, 0x00	; 0
    2044:	4f 5f       	subi	r20, 0xFF	; 255
    2046:	5f 4f       	sbci	r21, 0xFF	; 255
    2048:	64 0f       	add	r22, r20
    204a:	75 1f       	adc	r23, r21
    204c:	91 91       	ld	r25, Z+
    204e:	9d 93       	st	X+, r25
    2050:	e6 17       	cp	r30, r22
    2052:	f7 07       	cpc	r31, r23
    2054:	d9 f7       	brne	.-10     	; 0x204c <twi_writeTo+0x3e>
    2056:	10 92 99 06 	sts	0x0699, r1	; 0x800699 <twi_slarw>
    205a:	90 91 99 06 	lds	r25, 0x0699	; 0x800699 <twi_slarw>
    205e:	88 0f       	add	r24, r24
    2060:	89 2b       	or	r24, r25
    2062:	80 93 99 06 	sts	0x0699, r24	; 0x800699 <twi_slarw>
    2066:	80 91 97 06 	lds	r24, 0x0697	; 0x800697 <twi_inRepStart>
    206a:	81 30       	cpi	r24, 0x01	; 1
    206c:	81 f4       	brne	.+32     	; 0x208e <twi_writeTo+0x80>
    206e:	10 92 97 06 	sts	0x0697, r1	; 0x800697 <twi_inRepStart>
    2072:	ab eb       	ldi	r26, 0xBB	; 187
    2074:	b0 e0       	ldi	r27, 0x00	; 0
    2076:	ec eb       	ldi	r30, 0xBC	; 188
    2078:	f0 e0       	ldi	r31, 0x00	; 0
    207a:	80 91 99 06 	lds	r24, 0x0699	; 0x800699 <twi_slarw>
    207e:	8c 93       	st	X, r24
    2080:	80 81       	ld	r24, Z
    2082:	83 fd       	sbrc	r24, 3
    2084:	fa cf       	rjmp	.-12     	; 0x207a <twi_writeTo+0x6c>
    2086:	85 ec       	ldi	r24, 0xC5	; 197
    2088:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    208c:	03 c0       	rjmp	.+6      	; 0x2094 <twi_writeTo+0x86>
    208e:	85 ee       	ldi	r24, 0xE5	; 229
    2090:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2094:	22 23       	and	r18, r18
    2096:	41 f0       	breq	.+16     	; 0x20a8 <twi_writeTo+0x9a>
    2098:	80 91 9a 06 	lds	r24, 0x069A	; 0x80069a <twi_state>
    209c:	82 30       	cpi	r24, 0x02	; 2
    209e:	21 f4       	brne	.+8      	; 0x20a8 <twi_writeTo+0x9a>
    20a0:	80 91 9a 06 	lds	r24, 0x069A	; 0x80069a <twi_state>
    20a4:	82 30       	cpi	r24, 0x02	; 2
    20a6:	e1 f3       	breq	.-8      	; 0x20a0 <twi_writeTo+0x92>
    20a8:	80 91 2d 06 	lds	r24, 0x062D	; 0x80062d <twi_error>
    20ac:	8f 3f       	cpi	r24, 0xFF	; 255
    20ae:	79 f0       	breq	.+30     	; 0x20ce <twi_writeTo+0xc0>
    20b0:	80 91 2d 06 	lds	r24, 0x062D	; 0x80062d <twi_error>
    20b4:	80 32       	cpi	r24, 0x20	; 32
    20b6:	41 f0       	breq	.+16     	; 0x20c8 <twi_writeTo+0xba>
    20b8:	80 91 2d 06 	lds	r24, 0x062D	; 0x80062d <twi_error>
    20bc:	80 33       	cpi	r24, 0x30	; 48
    20be:	31 f0       	breq	.+12     	; 0x20cc <twi_writeTo+0xbe>
    20c0:	34 e0       	ldi	r19, 0x04	; 4
    20c2:	05 c0       	rjmp	.+10     	; 0x20ce <twi_writeTo+0xc0>
    20c4:	31 e0       	ldi	r19, 0x01	; 1
    20c6:	03 c0       	rjmp	.+6      	; 0x20ce <twi_writeTo+0xc0>
    20c8:	32 e0       	ldi	r19, 0x02	; 2
    20ca:	01 c0       	rjmp	.+2      	; 0x20ce <twi_writeTo+0xc0>
    20cc:	33 e0       	ldi	r19, 0x03	; 3
    20ce:	83 2f       	mov	r24, r19
    20d0:	0f 91       	pop	r16
    20d2:	08 95       	ret

000020d4 <twi_transmit>:
    20d4:	40 91 4f 06 	lds	r20, 0x064F	; 0x80064f <twi_txBufferLength>
    20d8:	26 2f       	mov	r18, r22
    20da:	30 e0       	ldi	r19, 0x00	; 0
    20dc:	24 0f       	add	r18, r20
    20de:	31 1d       	adc	r19, r1
    20e0:	21 32       	cpi	r18, 0x21	; 33
    20e2:	31 05       	cpc	r19, r1
    20e4:	ec f4       	brge	.+58     	; 0x2120 <twi_transmit+0x4c>
    20e6:	20 91 9a 06 	lds	r18, 0x069A	; 0x80069a <twi_state>
    20ea:	24 30       	cpi	r18, 0x04	; 4
    20ec:	d9 f4       	brne	.+54     	; 0x2124 <twi_transmit+0x50>
    20ee:	66 23       	and	r22, r22
    20f0:	81 f0       	breq	.+32     	; 0x2112 <twi_transmit+0x3e>
    20f2:	a8 2f       	mov	r26, r24
    20f4:	b9 2f       	mov	r27, r25
    20f6:	80 e0       	ldi	r24, 0x00	; 0
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	30 91 4f 06 	lds	r19, 0x064F	; 0x80064f <twi_txBufferLength>
    20fe:	2d 91       	ld	r18, X+
    2100:	fc 01       	movw	r30, r24
    2102:	ef 5a       	subi	r30, 0xAF	; 175
    2104:	f9 4f       	sbci	r31, 0xF9	; 249
    2106:	e3 0f       	add	r30, r19
    2108:	f1 1d       	adc	r31, r1
    210a:	20 83       	st	Z, r18
    210c:	01 96       	adiw	r24, 0x01	; 1
    210e:	86 17       	cp	r24, r22
    2110:	a0 f3       	brcs	.-24     	; 0x20fa <twi_transmit+0x26>
    2112:	80 91 4f 06 	lds	r24, 0x064F	; 0x80064f <twi_txBufferLength>
    2116:	68 0f       	add	r22, r24
    2118:	60 93 4f 06 	sts	0x064F, r22	; 0x80064f <twi_txBufferLength>
    211c:	80 e0       	ldi	r24, 0x00	; 0
    211e:	08 95       	ret
    2120:	81 e0       	ldi	r24, 0x01	; 1
    2122:	08 95       	ret
    2124:	82 e0       	ldi	r24, 0x02	; 2
    2126:	08 95       	ret

00002128 <twi_attachSlaveRxEvent>:
    2128:	90 93 94 06 	sts	0x0694, r25	; 0x800694 <twi_onSlaveReceive+0x1>
    212c:	80 93 93 06 	sts	0x0693, r24	; 0x800693 <twi_onSlaveReceive>
    2130:	08 95       	ret

00002132 <twi_attachSlaveTxEvent>:
    2132:	90 93 96 06 	sts	0x0696, r25	; 0x800696 <twi_onSlaveTransmit+0x1>
    2136:	80 93 95 06 	sts	0x0695, r24	; 0x800695 <twi_onSlaveTransmit>
    213a:	08 95       	ret

0000213c <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    213c:	85 ed       	ldi	r24, 0xD5	; 213
    213e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    2142:	ec eb       	ldi	r30, 0xBC	; 188
    2144:	f0 e0       	ldi	r31, 0x00	; 0
    2146:	80 81       	ld	r24, Z
    2148:	84 fd       	sbrc	r24, 4
    214a:	fd cf       	rjmp	.-6      	; 0x2146 <twi_stop+0xa>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    214c:	10 92 9a 06 	sts	0x069A, r1	; 0x80069a <twi_state>
    2150:	08 95       	ret

00002152 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    2152:	85 ec       	ldi	r24, 0xC5	; 197
    2154:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // update twi state
  twi_state = TWI_READY;
    2158:	10 92 9a 06 	sts	0x069A, r1	; 0x80069a <twi_state>
    215c:	08 95       	ret

0000215e <__vector_39>:
}

ISR(TWI_vect)
{
    215e:	1f 92       	push	r1
    2160:	0f 92       	push	r0
    2162:	0f b6       	in	r0, 0x3f	; 63
    2164:	0f 92       	push	r0
    2166:	11 24       	eor	r1, r1
    2168:	0b b6       	in	r0, 0x3b	; 59
    216a:	0f 92       	push	r0
    216c:	2f 93       	push	r18
    216e:	3f 93       	push	r19
    2170:	4f 93       	push	r20
    2172:	5f 93       	push	r21
    2174:	6f 93       	push	r22
    2176:	7f 93       	push	r23
    2178:	8f 93       	push	r24
    217a:	9f 93       	push	r25
    217c:	af 93       	push	r26
    217e:	bf 93       	push	r27
    2180:	ef 93       	push	r30
    2182:	ff 93       	push	r31
  switch(TW_STATUS){
    2184:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    2188:	88 7f       	andi	r24, 0xF8	; 248
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	89 3c       	cpi	r24, 0xC9	; 201
    218e:	91 05       	cpc	r25, r1
    2190:	08 f0       	brcs	.+2      	; 0x2194 <__vector_39+0x36>
    2192:	ee c0       	rjmp	.+476    	; 0x2370 <__stack+0x171>
    2194:	fc 01       	movw	r30, r24
    2196:	88 27       	eor	r24, r24
    2198:	ee 58       	subi	r30, 0x8E	; 142
    219a:	ff 4f       	sbci	r31, 0xFF	; 255
    219c:	8f 4f       	sbci	r24, 0xFF	; 255
    219e:	c9 c5       	rjmp	.+2962   	; 0x2d32 <__tablejump2__>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    21a0:	80 91 99 06 	lds	r24, 0x0699	; 0x800699 <twi_slarw>
    21a4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    21a8:	85 ec       	ldi	r24, 0xC5	; 197
    21aa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    21ae:	e0 c0       	rjmp	.+448    	; 0x2370 <__stack+0x171>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    21b0:	90 91 72 06 	lds	r25, 0x0672	; 0x800672 <twi_masterBufferIndex>
    21b4:	80 91 71 06 	lds	r24, 0x0671	; 0x800671 <twi_masterBufferLength>
    21b8:	98 17       	cp	r25, r24
    21ba:	80 f4       	brcc	.+32     	; 0x21dc <__vector_39+0x7e>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    21bc:	e0 91 72 06 	lds	r30, 0x0672	; 0x800672 <twi_masterBufferIndex>
    21c0:	81 e0       	ldi	r24, 0x01	; 1
    21c2:	8e 0f       	add	r24, r30
    21c4:	80 93 72 06 	sts	0x0672, r24	; 0x800672 <twi_masterBufferIndex>
    21c8:	f0 e0       	ldi	r31, 0x00	; 0
    21ca:	ed 58       	subi	r30, 0x8D	; 141
    21cc:	f9 4f       	sbci	r31, 0xF9	; 249
    21ce:	80 81       	ld	r24, Z
    21d0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    21d4:	85 ec       	ldi	r24, 0xC5	; 197
    21d6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    21da:	ca c0       	rjmp	.+404    	; 0x2370 <__stack+0x171>
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
        twi_reply(1);
      }else{
	if (twi_sendStop)
    21dc:	80 91 98 06 	lds	r24, 0x0698	; 0x800698 <twi_sendStop>
    21e0:	88 23       	and	r24, r24
          twi_stop();
    21e2:	11 f0       	breq	.+4      	; 0x21e8 <__vector_39+0x8a>
    21e4:	ab df       	rcall	.-170    	; 0x213c <twi_stop>
    21e6:	c4 c0       	rjmp	.+392    	; 0x2370 <__stack+0x171>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    21e8:	81 e0       	ldi	r24, 0x01	; 1
    21ea:	80 93 97 06 	sts	0x0697, r24	; 0x800697 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    21ee:	84 ea       	ldi	r24, 0xA4	; 164
    21f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	  twi_state = TWI_READY;
    21f4:	10 92 9a 06 	sts	0x069A, r1	; 0x80069a <twi_state>
    21f8:	bb c0       	rjmp	.+374    	; 0x2370 <__stack+0x171>
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    21fa:	80 e2       	ldi	r24, 0x20	; 32
    21fc:	80 93 2d 06 	sts	0x062D, r24	; 0x80062d <twi_error>
      twi_stop();
    2200:	9d df       	rcall	.-198    	; 0x213c <twi_stop>
      break;
    2202:	b6 c0       	rjmp	.+364    	; 0x2370 <__stack+0x171>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    2204:	80 e3       	ldi	r24, 0x30	; 48
    2206:	80 93 2d 06 	sts	0x062D, r24	; 0x80062d <twi_error>
      twi_stop();
    220a:	98 df       	rcall	.-208    	; 0x213c <twi_stop>
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    220c:	b1 c0       	rjmp	.+354    	; 0x2370 <__stack+0x171>
    220e:	88 e3       	ldi	r24, 0x38	; 56
    2210:	80 93 2d 06 	sts	0x062D, r24	; 0x80062d <twi_error>
      twi_releaseBus();
    2214:	9e df       	rcall	.-196    	; 0x2152 <twi_releaseBus>
      break;
    2216:	ac c0       	rjmp	.+344    	; 0x2370 <__stack+0x171>

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2218:	e0 91 72 06 	lds	r30, 0x0672	; 0x800672 <twi_masterBufferIndex>
    221c:	81 e0       	ldi	r24, 0x01	; 1
    221e:	8e 0f       	add	r24, r30
    2220:	80 93 72 06 	sts	0x0672, r24	; 0x800672 <twi_masterBufferIndex>
    2224:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2228:	f0 e0       	ldi	r31, 0x00	; 0
    222a:	ed 58       	subi	r30, 0x8D	; 141
    222c:	f9 4f       	sbci	r31, 0xF9	; 249
    222e:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2230:	90 91 72 06 	lds	r25, 0x0672	; 0x800672 <twi_masterBufferIndex>
    2234:	80 91 71 06 	lds	r24, 0x0671	; 0x800671 <twi_masterBufferLength>
    2238:	98 17       	cp	r25, r24
    223a:	20 f4       	brcc	.+8      	; 0x2244 <__stack+0x45>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    223c:	85 ec       	ldi	r24, 0xC5	; 197
    223e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2242:	96 c0       	rjmp	.+300    	; 0x2370 <__stack+0x171>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2244:	85 e8       	ldi	r24, 0x85	; 133
    2246:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    224a:	92 c0       	rjmp	.+292    	; 0x2370 <__stack+0x171>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    224c:	e0 91 72 06 	lds	r30, 0x0672	; 0x800672 <twi_masterBufferIndex>
    2250:	81 e0       	ldi	r24, 0x01	; 1
    2252:	8e 0f       	add	r24, r30
    2254:	80 93 72 06 	sts	0x0672, r24	; 0x800672 <twi_masterBufferIndex>
    2258:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    225c:	f0 e0       	ldi	r31, 0x00	; 0
    225e:	ed 58       	subi	r30, 0x8D	; 141
    2260:	f9 4f       	sbci	r31, 0xF9	; 249
	if (twi_sendStop)
    2262:	80 83       	st	Z, r24
    2264:	80 91 98 06 	lds	r24, 0x0698	; 0x800698 <twi_sendStop>
    2268:	88 23       	and	r24, r24
          twi_stop();
    226a:	11 f0       	breq	.+4      	; 0x2270 <__stack+0x71>
    226c:	67 df       	rcall	.-306    	; 0x213c <twi_stop>
    226e:	80 c0       	rjmp	.+256    	; 0x2370 <__stack+0x171>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    2270:	81 e0       	ldi	r24, 0x01	; 1
    2272:	80 93 97 06 	sts	0x0697, r24	; 0x800697 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2276:	84 ea       	ldi	r24, 0xA4	; 164
    2278:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	  twi_state = TWI_READY;
    227c:	10 92 9a 06 	sts	0x069A, r1	; 0x80069a <twi_state>
	}    
	break;
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
    2280:	77 c0       	rjmp	.+238    	; 0x2370 <__stack+0x171>
    2282:	5c df       	rcall	.-328    	; 0x213c <twi_stop>
      break;
    2284:	75 c0       	rjmp	.+234    	; 0x2370 <__stack+0x171>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    2286:	83 e0       	ldi	r24, 0x03	; 3
    2288:	80 93 9a 06 	sts	0x069A, r24	; 0x80069a <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    228c:	10 92 2e 06 	sts	0x062E, r1	; 0x80062e <twi_rxBufferIndex>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2290:	85 ec       	ldi	r24, 0xC5	; 197
    2292:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2296:	6c c0       	rjmp	.+216    	; 0x2370 <__stack+0x171>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2298:	80 91 2e 06 	lds	r24, 0x062E	; 0x80062e <twi_rxBufferIndex>
    229c:	80 32       	cpi	r24, 0x20	; 32
    229e:	80 f4       	brcc	.+32     	; 0x22c0 <__stack+0xc1>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    22a0:	e0 91 2e 06 	lds	r30, 0x062E	; 0x80062e <twi_rxBufferIndex>
    22a4:	81 e0       	ldi	r24, 0x01	; 1
    22a6:	8e 0f       	add	r24, r30
    22a8:	80 93 2e 06 	sts	0x062E, r24	; 0x80062e <twi_rxBufferIndex>
    22ac:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    22b0:	f0 e0       	ldi	r31, 0x00	; 0
    22b2:	e1 5d       	subi	r30, 0xD1	; 209
    22b4:	f9 4f       	sbci	r31, 0xF9	; 249
    22b6:	80 83       	st	Z, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    22b8:	85 ec       	ldi	r24, 0xC5	; 197
    22ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    22be:	58 c0       	rjmp	.+176    	; 0x2370 <__stack+0x171>
    22c0:	85 e8       	ldi	r24, 0x85	; 133
    22c2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    22c6:	54 c0       	rjmp	.+168    	; 0x2370 <__stack+0x171>
    22c8:	44 df       	rcall	.-376    	; 0x2152 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    22ca:	80 91 2e 06 	lds	r24, 0x062E	; 0x80062e <twi_rxBufferIndex>
    22ce:	80 32       	cpi	r24, 0x20	; 32
    22d0:	30 f4       	brcc	.+12     	; 0x22de <__stack+0xdf>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    22d2:	e0 91 2e 06 	lds	r30, 0x062E	; 0x80062e <twi_rxBufferIndex>
    22d6:	f0 e0       	ldi	r31, 0x00	; 0
    22d8:	e1 5d       	subi	r30, 0xD1	; 209
    22da:	f9 4f       	sbci	r31, 0xF9	; 249
    22dc:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    22de:	60 91 2e 06 	lds	r22, 0x062E	; 0x80062e <twi_rxBufferIndex>
    22e2:	70 e0       	ldi	r23, 0x00	; 0
    22e4:	e0 91 93 06 	lds	r30, 0x0693	; 0x800693 <twi_onSlaveReceive>
    22e8:	f0 91 94 06 	lds	r31, 0x0694	; 0x800694 <twi_onSlaveReceive+0x1>
    22ec:	8f e2       	ldi	r24, 0x2F	; 47
    22ee:	96 e0       	ldi	r25, 0x06	; 6
    22f0:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    22f2:	10 92 2e 06 	sts	0x062E, r1	; 0x80062e <twi_rxBufferIndex>
      break;
    22f6:	3c c0       	rjmp	.+120    	; 0x2370 <__stack+0x171>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    22f8:	85 e8       	ldi	r24, 0x85	; 133
    22fa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    22fe:	38 c0       	rjmp	.+112    	; 0x2370 <__stack+0x171>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    2300:	84 e0       	ldi	r24, 0x04	; 4
    2302:	80 93 9a 06 	sts	0x069A, r24	; 0x80069a <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    2306:	10 92 50 06 	sts	0x0650, r1	; 0x800650 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    230a:	10 92 4f 06 	sts	0x064F, r1	; 0x80064f <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    230e:	e0 91 95 06 	lds	r30, 0x0695	; 0x800695 <twi_onSlaveTransmit>
    2312:	f0 91 96 06 	lds	r31, 0x0696	; 0x800696 <twi_onSlaveTransmit+0x1>
    2316:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    2318:	80 91 4f 06 	lds	r24, 0x064F	; 0x80064f <twi_txBufferLength>
    231c:	81 11       	cpse	r24, r1
    231e:	05 c0       	rjmp	.+10     	; 0x232a <__stack+0x12b>
        twi_txBufferLength = 1;
    2320:	81 e0       	ldi	r24, 0x01	; 1
    2322:	80 93 4f 06 	sts	0x064F, r24	; 0x80064f <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    2326:	10 92 51 06 	sts	0x0651, r1	; 0x800651 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    232a:	e0 91 50 06 	lds	r30, 0x0650	; 0x800650 <twi_txBufferIndex>
    232e:	81 e0       	ldi	r24, 0x01	; 1
    2330:	8e 0f       	add	r24, r30
    2332:	80 93 50 06 	sts	0x0650, r24	; 0x800650 <twi_txBufferIndex>
    2336:	f0 e0       	ldi	r31, 0x00	; 0
    2338:	ef 5a       	subi	r30, 0xAF	; 175
    233a:	f9 4f       	sbci	r31, 0xF9	; 249
    233c:	80 81       	ld	r24, Z
    233e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2342:	90 91 50 06 	lds	r25, 0x0650	; 0x800650 <twi_txBufferIndex>
    2346:	80 91 4f 06 	lds	r24, 0x064F	; 0x80064f <twi_txBufferLength>
    234a:	98 17       	cp	r25, r24
    234c:	20 f4       	brcc	.+8      	; 0x2356 <__stack+0x157>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    234e:	85 ec       	ldi	r24, 0xC5	; 197
    2350:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2354:	0d c0       	rjmp	.+26     	; 0x2370 <__stack+0x171>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2356:	85 e8       	ldi	r24, 0x85	; 133
    2358:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    235c:	09 c0       	rjmp	.+18     	; 0x2370 <__stack+0x171>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    235e:	85 ec       	ldi	r24, 0xC5	; 197
    2360:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    2364:	10 92 9a 06 	sts	0x069A, r1	; 0x80069a <twi_state>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    2368:	03 c0       	rjmp	.+6      	; 0x2370 <__stack+0x171>
    236a:	10 92 2d 06 	sts	0x062D, r1	; 0x80062d <twi_error>
      twi_stop();
    236e:	e6 de       	rcall	.-564    	; 0x213c <twi_stop>
      break;
  }
    2370:	ff 91       	pop	r31
    2372:	ef 91       	pop	r30
    2374:	bf 91       	pop	r27
    2376:	af 91       	pop	r26
    2378:	9f 91       	pop	r25
    237a:	8f 91       	pop	r24
    237c:	7f 91       	pop	r23
    237e:	6f 91       	pop	r22
    2380:	5f 91       	pop	r21
    2382:	4f 91       	pop	r20
    2384:	3f 91       	pop	r19
    2386:	2f 91       	pop	r18
    2388:	0f 90       	pop	r0
    238a:	0b be       	out	0x3b, r0	; 59
    238c:	0f 90       	pop	r0
    238e:	0f be       	out	0x3f, r0	; 63
    2390:	0f 90       	pop	r0
    2392:	1f 90       	pop	r1
    2394:	18 95       	reti

00002396 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
	user_onRequest = function;
    2396:	80 91 c5 06 	lds	r24, 0x06C5	; 0x8006c5 <_ZN7TwoWire14rxBufferLengthE>
    239a:	90 e0       	ldi	r25, 0x00	; 0
    239c:	20 91 c6 06 	lds	r18, 0x06C6	; 0x8006c6 <_ZN7TwoWire13rxBufferIndexE>
    23a0:	82 1b       	sub	r24, r18
    23a2:	91 09       	sbc	r25, r1
    23a4:	08 95       	ret

000023a6 <_ZN7TwoWire4readEv>:
    23a6:	90 91 c6 06 	lds	r25, 0x06C6	; 0x8006c6 <_ZN7TwoWire13rxBufferIndexE>
    23aa:	80 91 c5 06 	lds	r24, 0x06C5	; 0x8006c5 <_ZN7TwoWire14rxBufferLengthE>
    23ae:	98 17       	cp	r25, r24
    23b0:	50 f4       	brcc	.+20     	; 0x23c6 <_ZN7TwoWire4readEv+0x20>
    23b2:	e9 2f       	mov	r30, r25
    23b4:	f0 e0       	ldi	r31, 0x00	; 0
    23b6:	e9 53       	subi	r30, 0x39	; 57
    23b8:	f9 4f       	sbci	r31, 0xF9	; 249
    23ba:	20 81       	ld	r18, Z
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	9f 5f       	subi	r25, 0xFF	; 255
    23c0:	90 93 c6 06 	sts	0x06C6, r25	; 0x8006c6 <_ZN7TwoWire13rxBufferIndexE>
    23c4:	02 c0       	rjmp	.+4      	; 0x23ca <_ZN7TwoWire4readEv+0x24>
    23c6:	2f ef       	ldi	r18, 0xFF	; 255
    23c8:	3f ef       	ldi	r19, 0xFF	; 255
    23ca:	c9 01       	movw	r24, r18
    23cc:	08 95       	ret

000023ce <_ZN7TwoWire4peekEv>:
    23ce:	e0 91 c6 06 	lds	r30, 0x06C6	; 0x8006c6 <_ZN7TwoWire13rxBufferIndexE>
    23d2:	80 91 c5 06 	lds	r24, 0x06C5	; 0x8006c5 <_ZN7TwoWire14rxBufferLengthE>
    23d6:	e8 17       	cp	r30, r24
    23d8:	30 f4       	brcc	.+12     	; 0x23e6 <_ZN7TwoWire4peekEv+0x18>
    23da:	f0 e0       	ldi	r31, 0x00	; 0
    23dc:	e9 53       	subi	r30, 0x39	; 57
    23de:	f9 4f       	sbci	r31, 0xF9	; 249
    23e0:	80 81       	ld	r24, Z
    23e2:	90 e0       	ldi	r25, 0x00	; 0
    23e4:	08 95       	ret
    23e6:	8f ef       	ldi	r24, 0xFF	; 255
    23e8:	9f ef       	ldi	r25, 0xFF	; 255
    23ea:	08 95       	ret

000023ec <_ZN7TwoWire5flushEv>:
    23ec:	08 95       	ret

000023ee <_ZN7TwoWire16onReceiveServiceEPhi>:
    23ee:	cf 93       	push	r28
    23f0:	df 93       	push	r29
    23f2:	ec 01       	movw	r28, r24
    23f4:	e0 91 9d 06 	lds	r30, 0x069D	; 0x80069d <_ZN7TwoWire14user_onReceiveE>
    23f8:	f0 91 9e 06 	lds	r31, 0x069E	; 0x80069e <_ZN7TwoWire14user_onReceiveE+0x1>
    23fc:	30 97       	sbiw	r30, 0x00	; 0
    23fe:	01 f1       	breq	.+64     	; 0x2440 <_ZN7TwoWire16onReceiveServiceEPhi+0x52>
    2400:	90 91 c6 06 	lds	r25, 0x06C6	; 0x8006c6 <_ZN7TwoWire13rxBufferIndexE>
    2404:	80 91 c5 06 	lds	r24, 0x06C5	; 0x8006c5 <_ZN7TwoWire14rxBufferLengthE>
    2408:	98 17       	cp	r25, r24
    240a:	d0 f0       	brcs	.+52     	; 0x2440 <_ZN7TwoWire16onReceiveServiceEPhi+0x52>
    240c:	16 16       	cp	r1, r22
    240e:	17 06       	cpc	r1, r23
    2410:	8c f4       	brge	.+34     	; 0x2434 <_ZN7TwoWire16onReceiveServiceEPhi+0x46>
    2412:	20 e0       	ldi	r18, 0x00	; 0
    2414:	30 e0       	ldi	r19, 0x00	; 0
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	de 01       	movw	r26, r28
    241a:	a9 0f       	add	r26, r25
    241c:	b1 1d       	adc	r27, r1
    241e:	4c 91       	ld	r20, X
    2420:	d9 01       	movw	r26, r18
    2422:	a9 53       	subi	r26, 0x39	; 57
    2424:	b9 4f       	sbci	r27, 0xF9	; 249
    2426:	4c 93       	st	X, r20
    2428:	9f 5f       	subi	r25, 0xFF	; 255
    242a:	29 2f       	mov	r18, r25
    242c:	30 e0       	ldi	r19, 0x00	; 0
    242e:	26 17       	cp	r18, r22
    2430:	37 07       	cpc	r19, r23
    2432:	94 f3       	brlt	.-28     	; 0x2418 <_ZN7TwoWire16onReceiveServiceEPhi+0x2a>
    2434:	cb 01       	movw	r24, r22
    2436:	10 92 c6 06 	sts	0x06C6, r1	; 0x8006c6 <_ZN7TwoWire13rxBufferIndexE>
    243a:	60 93 c5 06 	sts	0x06C5, r22	; 0x8006c5 <_ZN7TwoWire14rxBufferLengthE>
    243e:	19 95       	eicall
    2440:	df 91       	pop	r29
    2442:	cf 91       	pop	r28
    2444:	08 95       	ret

00002446 <_ZN7TwoWire16onRequestServiceEv>:
    2446:	e0 91 9f 06 	lds	r30, 0x069F	; 0x80069f <_ZN7TwoWire14user_onRequestE>
    244a:	f0 91 a0 06 	lds	r31, 0x06A0	; 0x8006a0 <_ZN7TwoWire14user_onRequestE+0x1>
    244e:	30 97       	sbiw	r30, 0x00	; 0
    2450:	29 f0       	breq	.+10     	; 0x245c <_ZN7TwoWire16onRequestServiceEv+0x16>
    2452:	10 92 a3 06 	sts	0x06A3, r1	; 0x8006a3 <_ZN7TwoWire13txBufferIndexE>
    2456:	10 92 a2 06 	sts	0x06A2, r1	; 0x8006a2 <_ZN7TwoWire14txBufferLengthE>
    245a:	19 95       	eicall
    245c:	08 95       	ret

0000245e <_ZN7TwoWire5writeEh>:
    245e:	cf 93       	push	r28
    2460:	df 93       	push	r29
    2462:	1f 92       	push	r1
    2464:	cd b7       	in	r28, 0x3d	; 61
    2466:	de b7       	in	r29, 0x3e	; 62
    2468:	69 83       	std	Y+1, r22	; 0x01
    246a:	80 91 a1 06 	lds	r24, 0x06A1	; 0x8006a1 <_ZN7TwoWire12transmittingE>
    246e:	88 23       	and	r24, r24
    2470:	99 f0       	breq	.+38     	; 0x2498 <_ZN7TwoWire5writeEh+0x3a>
    2472:	80 91 a2 06 	lds	r24, 0x06A2	; 0x8006a2 <_ZN7TwoWire14txBufferLengthE>
    2476:	80 32       	cpi	r24, 0x20	; 32
    2478:	b0 f4       	brcc	.+44     	; 0x24a6 <_ZN7TwoWire5writeEh+0x48>
    247a:	80 91 a3 06 	lds	r24, 0x06A3	; 0x8006a3 <_ZN7TwoWire13txBufferIndexE>
    247e:	e8 2f       	mov	r30, r24
    2480:	f0 e0       	ldi	r31, 0x00	; 0
    2482:	ec 55       	subi	r30, 0x5C	; 92
    2484:	f9 4f       	sbci	r31, 0xF9	; 249
    2486:	60 83       	st	Z, r22
    2488:	8f 5f       	subi	r24, 0xFF	; 255
    248a:	80 93 a3 06 	sts	0x06A3, r24	; 0x8006a3 <_ZN7TwoWire13txBufferIndexE>
    248e:	80 93 a2 06 	sts	0x06A2, r24	; 0x8006a2 <_ZN7TwoWire14txBufferLengthE>
    2492:	81 e0       	ldi	r24, 0x01	; 1
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	09 c0       	rjmp	.+18     	; 0x24aa <_ZN7TwoWire5writeEh+0x4c>
    2498:	61 e0       	ldi	r22, 0x01	; 1
    249a:	ce 01       	movw	r24, r28
    249c:	01 96       	adiw	r24, 0x01	; 1
    249e:	1a de       	rcall	.-972    	; 0x20d4 <twi_transmit>
    24a0:	81 e0       	ldi	r24, 0x01	; 1
    24a2:	90 e0       	ldi	r25, 0x00	; 0
    24a4:	02 c0       	rjmp	.+4      	; 0x24aa <_ZN7TwoWire5writeEh+0x4c>
    24a6:	80 e0       	ldi	r24, 0x00	; 0
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	0f 90       	pop	r0
    24ac:	df 91       	pop	r29
    24ae:	cf 91       	pop	r28
    24b0:	08 95       	ret

000024b2 <_ZN7TwoWire5writeEPKhj>:
    24b2:	cf 92       	push	r12
    24b4:	df 92       	push	r13
    24b6:	ef 92       	push	r14
    24b8:	ff 92       	push	r15
    24ba:	0f 93       	push	r16
    24bc:	1f 93       	push	r17
    24be:	cf 93       	push	r28
    24c0:	df 93       	push	r29
    24c2:	8c 01       	movw	r16, r24
    24c4:	cb 01       	movw	r24, r22
    24c6:	6a 01       	movw	r12, r20
    24c8:	20 91 a1 06 	lds	r18, 0x06A1	; 0x8006a1 <_ZN7TwoWire12transmittingE>
    24cc:	22 23       	and	r18, r18
    24ce:	a1 f0       	breq	.+40     	; 0x24f8 <_ZN7TwoWire5writeEPKhj+0x46>
    24d0:	41 15       	cp	r20, r1
    24d2:	51 05       	cpc	r21, r1
    24d4:	99 f0       	breq	.+38     	; 0x24fc <_ZN7TwoWire5writeEPKhj+0x4a>
    24d6:	eb 01       	movw	r28, r22
    24d8:	7b 01       	movw	r14, r22
    24da:	e4 0e       	add	r14, r20
    24dc:	f5 1e       	adc	r15, r21
    24de:	69 91       	ld	r22, Y+
    24e0:	d8 01       	movw	r26, r16
    24e2:	ed 91       	ld	r30, X+
    24e4:	fc 91       	ld	r31, X
    24e6:	01 90       	ld	r0, Z+
    24e8:	f0 81       	ld	r31, Z
    24ea:	e0 2d       	mov	r30, r0
    24ec:	c8 01       	movw	r24, r16
    24ee:	19 95       	eicall
    24f0:	ce 15       	cp	r28, r14
    24f2:	df 05       	cpc	r29, r15
    24f4:	a1 f7       	brne	.-24     	; 0x24de <_ZN7TwoWire5writeEPKhj+0x2c>
    24f6:	02 c0       	rjmp	.+4      	; 0x24fc <_ZN7TwoWire5writeEPKhj+0x4a>
    24f8:	64 2f       	mov	r22, r20
    24fa:	ec dd       	rcall	.-1064   	; 0x20d4 <twi_transmit>
    24fc:	c6 01       	movw	r24, r12
    24fe:	df 91       	pop	r29
    2500:	cf 91       	pop	r28
    2502:	1f 91       	pop	r17
    2504:	0f 91       	pop	r16
    2506:	ff 90       	pop	r15
    2508:	ef 90       	pop	r14
    250a:	df 90       	pop	r13
    250c:	cf 90       	pop	r12
    250e:	08 95       	ret

00002510 <_ZN7TwoWire5beginEv>:
    2510:	10 92 c6 06 	sts	0x06C6, r1	; 0x8006c6 <_ZN7TwoWire13rxBufferIndexE>
    2514:	10 92 c5 06 	sts	0x06C5, r1	; 0x8006c5 <_ZN7TwoWire14rxBufferLengthE>
    2518:	10 92 a3 06 	sts	0x06A3, r1	; 0x8006a3 <_ZN7TwoWire13txBufferIndexE>
    251c:	10 92 a2 06 	sts	0x06A2, r1	; 0x8006a2 <_ZN7TwoWire14txBufferLengthE>
    2520:	0b dd       	rcall	.-1514   	; 0x1f38 <twi_init>
    2522:	83 e2       	ldi	r24, 0x23	; 35
    2524:	92 e1       	ldi	r25, 0x12	; 18
    2526:	05 de       	rcall	.-1014   	; 0x2132 <twi_attachSlaveTxEvent>
    2528:	87 ef       	ldi	r24, 0xF7	; 247
    252a:	91 e1       	ldi	r25, 0x11	; 17
    252c:	fd cd       	rjmp	.-1030   	; 0x2128 <twi_attachSlaveRxEvent>
    252e:	08 95       	ret

00002530 <_ZN7TwoWire17beginTransmissionEh>:
    2530:	81 e0       	ldi	r24, 0x01	; 1
    2532:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <_ZN7TwoWire12transmittingE>
    2536:	60 93 c4 06 	sts	0x06C4, r22	; 0x8006c4 <_ZN7TwoWire9txAddressE>
    253a:	10 92 a3 06 	sts	0x06A3, r1	; 0x8006a3 <_ZN7TwoWire13txBufferIndexE>
    253e:	10 92 a2 06 	sts	0x06A2, r1	; 0x8006a2 <_ZN7TwoWire14txBufferLengthE>
    2542:	08 95       	ret

00002544 <_ZN7TwoWire15endTransmissionEh>:
    2544:	0f 93       	push	r16
    2546:	06 2f       	mov	r16, r22
    2548:	21 e0       	ldi	r18, 0x01	; 1
    254a:	40 91 a2 06 	lds	r20, 0x06A2	; 0x8006a2 <_ZN7TwoWire14txBufferLengthE>
    254e:	64 ea       	ldi	r22, 0xA4	; 164
    2550:	76 e0       	ldi	r23, 0x06	; 6
    2552:	80 91 c4 06 	lds	r24, 0x06C4	; 0x8006c4 <_ZN7TwoWire9txAddressE>
    2556:	5b dd       	rcall	.-1354   	; 0x200e <twi_writeTo>
    2558:	10 92 a3 06 	sts	0x06A3, r1	; 0x8006a3 <_ZN7TwoWire13txBufferIndexE>
    255c:	10 92 a2 06 	sts	0x06A2, r1	; 0x8006a2 <_ZN7TwoWire14txBufferLengthE>
    2560:	10 92 a1 06 	sts	0x06A1, r1	; 0x8006a1 <_ZN7TwoWire12transmittingE>
    2564:	0f 91       	pop	r16
    2566:	08 95       	ret

00002568 <_ZN7TwoWire11requestFromEhhmhh>:
    2568:	4f 92       	push	r4
    256a:	5f 92       	push	r5
    256c:	6f 92       	push	r6
    256e:	7f 92       	push	r7
    2570:	af 92       	push	r10
    2572:	bf 92       	push	r11
    2574:	cf 92       	push	r12
    2576:	ef 92       	push	r14
    2578:	ff 92       	push	r15
    257a:	0f 93       	push	r16
    257c:	1f 93       	push	r17
    257e:	cf 93       	push	r28
    2580:	df 93       	push	r29
    2582:	5c 01       	movw	r10, r24
    2584:	f6 2e       	mov	r15, r22
    2586:	d4 2f       	mov	r29, r20
    2588:	28 01       	movw	r4, r16
    258a:	39 01       	movw	r6, r18
    258c:	ee 20       	and	r14, r14
    258e:	39 f1       	breq	.+78     	; 0x25de <_ZN7TwoWire11requestFromEhhmhh+0x76>
    2590:	cf df       	rcall	.-98     	; 0x2530 <_ZN7TwoWire17beginTransmissionEh>
    2592:	8e 2d       	mov	r24, r14
    2594:	84 30       	cpi	r24, 0x04	; 4
    2596:	08 f0       	brcs	.+2      	; 0x259a <_ZN7TwoWire11requestFromEhhmhh+0x32>
    2598:	83 e0       	ldi	r24, 0x03	; 3
    259a:	cf ef       	ldi	r28, 0xFF	; 255
    259c:	c8 0f       	add	r28, r24
    259e:	88 23       	and	r24, r24
    25a0:	d9 f0       	breq	.+54     	; 0x25d8 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    25a2:	8c 2f       	mov	r24, r28
    25a4:	88 0f       	add	r24, r24
    25a6:	88 0f       	add	r24, r24
    25a8:	88 0f       	add	r24, r24
    25aa:	a3 01       	movw	r20, r6
    25ac:	92 01       	movw	r18, r4
    25ae:	04 c0       	rjmp	.+8      	; 0x25b8 <_ZN7TwoWire11requestFromEhhmhh+0x50>
    25b0:	56 95       	lsr	r21
    25b2:	47 95       	ror	r20
    25b4:	37 95       	ror	r19
    25b6:	27 95       	ror	r18
    25b8:	8a 95       	dec	r24
    25ba:	d2 f7       	brpl	.-12     	; 0x25b0 <_ZN7TwoWire11requestFromEhhmhh+0x48>
    25bc:	ca 01       	movw	r24, r20
    25be:	b9 01       	movw	r22, r18
    25c0:	d5 01       	movw	r26, r10
    25c2:	ed 91       	ld	r30, X+
    25c4:	fc 91       	ld	r31, X
    25c6:	01 90       	ld	r0, Z+
    25c8:	f0 81       	ld	r31, Z
    25ca:	e0 2d       	mov	r30, r0
    25cc:	c5 01       	movw	r24, r10
    25ce:	19 95       	eicall
    25d0:	8c 2f       	mov	r24, r28
    25d2:	c1 50       	subi	r28, 0x01	; 1
    25d4:	81 11       	cpse	r24, r1
    25d6:	e5 cf       	rjmp	.-54     	; 0x25a2 <_ZN7TwoWire11requestFromEhhmhh+0x3a>
    25d8:	60 e0       	ldi	r22, 0x00	; 0
    25da:	c5 01       	movw	r24, r10
    25dc:	b3 df       	rcall	.-154    	; 0x2544 <_ZN7TwoWire15endTransmissionEh>
    25de:	4d 2f       	mov	r20, r29
    25e0:	d1 32       	cpi	r29, 0x21	; 33
    25e2:	08 f0       	brcs	.+2      	; 0x25e6 <_ZN7TwoWire11requestFromEhhmhh+0x7e>
    25e4:	40 e2       	ldi	r20, 0x20	; 32
    25e6:	2c 2d       	mov	r18, r12
    25e8:	67 ec       	ldi	r22, 0xC7	; 199
    25ea:	76 e0       	ldi	r23, 0x06	; 6
    25ec:	8f 2d       	mov	r24, r15
    25ee:	bd dc       	rcall	.-1670   	; 0x1f6a <twi_readFrom>
    25f0:	10 92 c6 06 	sts	0x06C6, r1	; 0x8006c6 <_ZN7TwoWire13rxBufferIndexE>
    25f4:	80 93 c5 06 	sts	0x06C5, r24	; 0x8006c5 <_ZN7TwoWire14rxBufferLengthE>
    25f8:	df 91       	pop	r29
    25fa:	cf 91       	pop	r28
    25fc:	1f 91       	pop	r17
    25fe:	0f 91       	pop	r16
    2600:	ff 90       	pop	r15
    2602:	ef 90       	pop	r14
    2604:	cf 90       	pop	r12
    2606:	bf 90       	pop	r11
    2608:	af 90       	pop	r10
    260a:	7f 90       	pop	r7
    260c:	6f 90       	pop	r6
    260e:	5f 90       	pop	r5
    2610:	4f 90       	pop	r4
    2612:	08 95       	ret

00002614 <_ZN7TwoWire11requestFromEhhh>:
    2614:	cf 92       	push	r12
    2616:	ef 92       	push	r14
    2618:	0f 93       	push	r16
    261a:	1f 93       	push	r17
    261c:	c2 2e       	mov	r12, r18
    261e:	e1 2c       	mov	r14, r1
    2620:	00 e0       	ldi	r16, 0x00	; 0
    2622:	10 e0       	ldi	r17, 0x00	; 0
    2624:	98 01       	movw	r18, r16
    2626:	a0 df       	rcall	.-192    	; 0x2568 <_ZN7TwoWire11requestFromEhhmhh>
    2628:	1f 91       	pop	r17
    262a:	0f 91       	pop	r16
    262c:	ef 90       	pop	r14
    262e:	cf 90       	pop	r12
    2630:	08 95       	ret

00002632 <_ZN7TwoWire11requestFromEhh>:
    2632:	21 e0       	ldi	r18, 0x01	; 1
    2634:	ef cf       	rjmp	.-34     	; 0x2614 <_ZN7TwoWire11requestFromEhhh>
    2636:	08 95       	ret

00002638 <_ZN7TwoWire15endTransmissionEv>:
    2638:	61 e0       	ldi	r22, 0x01	; 1
    263a:	84 cf       	rjmp	.-248    	; 0x2544 <_ZN7TwoWire15endTransmissionEh>
    263c:	08 95       	ret

0000263e <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    263e:	80 ec       	ldi	r24, 0xC0	; 192
    2640:	92 e0       	ldi	r25, 0x02	; 2
    2642:	90 93 9c 06 	sts	0x069C, r25	; 0x80069c <Wire+0x1>
    2646:	80 93 9b 06 	sts	0x069B, r24	; 0x80069b <Wire>
    264a:	08 95       	ret

0000264c <_ZN9IReadable15CommandReceivedEhPKhh>:
#include "EtherComm.h"

class IReadable : public IDevice {
public:
	void CommandReceived(uint8_t id, const uint8_t* data, uint8_t len){
		if(len == 0){
    264c:	21 11       	cpse	r18, r1
    264e:	0d c0       	rjmp	.+26     	; 0x266a <_ZN9IReadable15CommandReceivedEhPKhh+0x1e>
			ReadRegisterRequested(id, EtherComm::buffer + 3);
    2650:	40 91 00 02 	lds	r20, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    2654:	50 91 01 02 	lds	r21, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    2658:	4d 5f       	subi	r20, 0xFD	; 253
    265a:	5f 4f       	sbci	r21, 0xFF	; 255
    265c:	dc 01       	movw	r26, r24
    265e:	ed 91       	ld	r30, X+
    2660:	fc 91       	ld	r31, X
    2662:	06 80       	ldd	r0, Z+6	; 0x06
    2664:	f7 81       	ldd	r31, Z+7	; 0x07
    2666:	e0 2d       	mov	r30, r0
    2668:	19 95       	eicall
    266a:	08 95       	ret

0000266c <_ZN13DigitalSensor6UpdateEPh>:
	else LedPort &= ~LedPin;
}

bool Robot::ReadTestBtn(){ //TODO remove
	return !((TestBtnPinPort & TestBtnPin) > 0);
}
    266c:	08 95       	ret

0000266e <_ZN13DigitalSensor21ReadRegisterRequestedEhPh>:
    266e:	dc 01       	movw	r26, r24
    2670:	12 96       	adiw	r26, 0x02	; 2
    2672:	2c 91       	ld	r18, X
    2674:	12 97       	sbiw	r26, 0x02	; 2
    2676:	26 13       	cpse	r18, r22
    2678:	19 c0       	rjmp	.+50     	; 0x26ac <_ZN13DigitalSensor21ReadRegisterRequestedEhPh+0x3e>
    267a:	14 96       	adiw	r26, 0x04	; 4
    267c:	ed 91       	ld	r30, X+
    267e:	fc 91       	ld	r31, X
    2680:	15 97       	sbiw	r26, 0x05	; 5
    2682:	60 81       	ld	r22, Z
    2684:	13 96       	adiw	r26, 0x03	; 3
    2686:	3c 91       	ld	r19, X
    2688:	36 23       	and	r19, r22
    268a:	61 e0       	ldi	r22, 0x01	; 1
    268c:	09 f4       	brne	.+2      	; 0x2690 <_ZN13DigitalSensor21ReadRegisterRequestedEhPh+0x22>
    268e:	60 e0       	ldi	r22, 0x00	; 0
    2690:	fa 01       	movw	r30, r20
    2692:	dc 01       	movw	r26, r24
    2694:	16 96       	adiw	r26, 0x06	; 6
    2696:	8c 91       	ld	r24, X
    2698:	86 27       	eor	r24, r22
    269a:	80 83       	st	Z, r24
    269c:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    26a0:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    26a4:	22 83       	std	Z+2, r18	; 0x02
    26a6:	62 e0       	ldi	r22, 0x02	; 2
    26a8:	83 e0       	ldi	r24, 0x03	; 3
    26aa:	5e c8       	rjmp	.-3908   	; 0x1768 <_ZN9EtherComm11SendCommandEhh>
    26ac:	08 95       	ret

000026ae <_ZN5Robot14RegisterDeviceEhP7IDevice>:
    26ae:	90 e0       	ldi	r25, 0x00	; 0
    26b0:	fc 01       	movw	r30, r24
    26b2:	ee 0f       	add	r30, r30
    26b4:	ff 1f       	adc	r31, r31
    26b6:	e3 50       	subi	r30, 0x03	; 3
    26b8:	f9 4f       	sbci	r31, 0xF9	; 249
    26ba:	20 81       	ld	r18, Z
    26bc:	31 81       	ldd	r19, Z+1	; 0x01
    26be:	23 2b       	or	r18, r19
    26c0:	49 f4       	brne	.+18     	; 0x26d4 <_ZN5Robot14RegisterDeviceEhP7IDevice+0x26>
    26c2:	88 0f       	add	r24, r24
    26c4:	99 1f       	adc	r25, r25
    26c6:	fc 01       	movw	r30, r24
    26c8:	e3 50       	subi	r30, 0x03	; 3
    26ca:	f9 4f       	sbci	r31, 0xF9	; 249
    26cc:	71 83       	std	Z+1, r23	; 0x01
    26ce:	60 83       	st	Z, r22
    26d0:	81 e0       	ldi	r24, 0x01	; 1
    26d2:	08 95       	ret
    26d4:	80 e0       	ldi	r24, 0x00	; 0
    26d6:	08 95       	ret

000026d8 <_ZN13DigitalSensor5beginEv>:
    26d8:	bc 01       	movw	r22, r24
    26da:	fc 01       	movw	r30, r24
    26dc:	82 81       	ldd	r24, Z+2	; 0x02
    26de:	e7 cf       	rjmp	.-50     	; 0x26ae <_ZN5Robot14RegisterDeviceEhP7IDevice>
    26e0:	08 95       	ret

000026e2 <_ZN5Robot6SetLedEb>:
    26e2:	88 23       	and	r24, r24
    26e4:	11 f0       	breq	.+4      	; 0x26ea <_ZN5Robot6SetLedEb+0x8>
    26e6:	2f 9a       	sbi	0x05, 7	; 5
    26e8:	08 95       	ret
    26ea:	2f 98       	cbi	0x05, 7	; 5
    26ec:	08 95       	ret

000026ee <_ZN5Robot15CommandReceivedEPKhh>:
	for(uint8_t i = 0; i < len; i++){
		Serial.print(' ');
		Serial.print(data[i], HEX);
	}
	Serial.println();*/
	if(len >= 1){
    26ee:	66 23       	and	r22, r22
    26f0:	d1 f0       	breq	.+52     	; 0x2726 <_ZN5Robot15CommandReceivedEPKhh+0x38>
		if(registers[data[0]] != NULL){
    26f2:	fc 01       	movw	r30, r24
    26f4:	30 81       	ld	r19, Z
    26f6:	e3 2f       	mov	r30, r19
    26f8:	f0 e0       	ldi	r31, 0x00	; 0
    26fa:	ee 0f       	add	r30, r30
    26fc:	ff 1f       	adc	r31, r31
    26fe:	e3 50       	subi	r30, 0x03	; 3
    2700:	f9 4f       	sbci	r31, 0xF9	; 249
    2702:	a0 81       	ld	r26, Z
    2704:	b1 81       	ldd	r27, Z+1	; 0x01
    2706:	10 97       	sbiw	r26, 0x00	; 0
    2708:	71 f0       	breq	.+28     	; 0x2726 <_ZN5Robot15CommandReceivedEPKhh+0x38>
    270a:	26 2f       	mov	r18, r22
    270c:	ac 01       	movw	r20, r24
			registers[data[0]]->CommandReceived(data[0], data + 1, len - 1);
    270e:	21 50       	subi	r18, 0x01	; 1
    2710:	4f 5f       	subi	r20, 0xFF	; 255
    2712:	5f 4f       	sbci	r21, 0xFF	; 255
    2714:	ed 91       	ld	r30, X+
    2716:	fc 91       	ld	r31, X
    2718:	11 97       	sbiw	r26, 0x01	; 1
    271a:	02 80       	ldd	r0, Z+2	; 0x02
    271c:	f3 81       	ldd	r31, Z+3	; 0x03
    271e:	e0 2d       	mov	r30, r0
    2720:	63 2f       	mov	r22, r19
    2722:	cd 01       	movw	r24, r26
    2724:	19 95       	eicall
    2726:	08 95       	ret

00002728 <_GLOBAL__sub_I__ZN5Robot9registersE>:

#include "../IReadable.h"

class DigitalSensor : public IReadable {
public:
	DigitalSensor(const uint8_t ID, Register& DDRPort, Register& PortPort, Register& PinPort, uint8_t Pin, bool Inversed = true) : _id(ID), pin(Pin), pinPort(&PinPort), inversed(Inversed) {
    2728:	e6 ef       	ldi	r30, 0xF6	; 246
    272a:	f6 e0       	ldi	r31, 0x06	; 6
    272c:	82 ed       	ldi	r24, 0xD2	; 210
    272e:	92 e0       	ldi	r25, 0x02	; 2
    2730:	91 83       	std	Z+1, r25	; 0x01
    2732:	80 83       	st	Z, r24
    2734:	12 82       	std	Z+2, r1	; 0x02
    2736:	82 e0       	ldi	r24, 0x02	; 2
    2738:	83 83       	std	Z+3, r24	; 0x03
    273a:	8f e2       	ldi	r24, 0x2F	; 47
    273c:	90 e0       	ldi	r25, 0x00	; 0
    273e:	95 83       	std	Z+5, r25	; 0x05
    2740:	84 83       	std	Z+4, r24	; 0x04
    2742:	81 e0       	ldi	r24, 0x01	; 1
    2744:	86 83       	std	Z+6, r24	; 0x06
		DDRPort &= ~pin; //Enable input
    2746:	81 98       	cbi	0x10, 1	; 16
		PortPort |= pin; //Enable pullup
    2748:	89 9a       	sbi	0x11, 1	; 17
		rov.RegisterDevice(0, this);
    274a:	bf 01       	movw	r22, r30
    274c:	80 e0       	ldi	r24, 0x00	; 0
    274e:	af df       	rcall	.-162    	; 0x26ae <_ZN5Robot14RegisterDeviceEhP7IDevice>
#define ID_TEST_BUTTON 0
#define ID_IMU_TEMPERATURE 1
#define ID_IMU_ACCELEROMETER 2

DigitalSensor BtnTest(0, TestBtnDDR, TestBtnPort, TestBtnPinPort, TestBtnPin);
ImuSensor Imu(1, 2);
    2750:	42 e0       	ldi	r20, 0x02	; 2
    2752:	61 e0       	ldi	r22, 0x01	; 1
    2754:	87 ee       	ldi	r24, 0xE7	; 231
    2756:	96 e0       	ldi	r25, 0x06	; 6
    2758:	d7 c0       	rjmp	.+430    	; 0x2908 <_ZN9ImuSensorC1Ehh>
    275a:	08 95       	ret

0000275c <_ZN5Robot5beginEv>:
	RegisterDevice(Imu);
	
	return true;
}*/

bool Robot::begin(){
    275c:	ed ef       	ldi	r30, 0xFD	; 253
    275e:	f6 e0       	ldi	r31, 0x06	; 6
    2760:	8d ef       	ldi	r24, 0xFD	; 253
    2762:	98 e0       	ldi	r25, 0x08	; 8
	for(uint16_t i = 0; i < NUM_DEVICES; i++){
		registers[i] = NULL;
    2764:	11 92       	st	Z+, r1
    2766:	11 92       	st	Z+, r1
	
	return true;
}*/

bool Robot::begin(){
	for(uint16_t i = 0; i < NUM_DEVICES; i++){
    2768:	e8 17       	cp	r30, r24
    276a:	f9 07       	cpc	r31, r25
    276c:	d9 f7       	brne	.-10     	; 0x2764 <_ZN5Robot5beginEv+0x8>
		registers[i] = NULL;
	}
	
	LedDDR |= LedPin;
    276e:	27 9a       	sbi	0x04, 7	; 4
		//TODO move to begin?
	}
	
	bool begin(){ //override
		return rov.RegisterDevice(_id, this);
    2770:	66 ef       	ldi	r22, 0xF6	; 246
    2772:	76 e0       	ldi	r23, 0x06	; 6
    2774:	80 91 f8 06 	lds	r24, 0x06F8	; 0x8006f8 <BtnTest+0x2>
    2778:	9a df       	rcall	.-204    	; 0x26ae <_ZN5Robot14RegisterDeviceEhP7IDevice>
	BtnTest.begin();
	Imu.begin();
    277a:	87 ee       	ldi	r24, 0xE7	; 231
    277c:	96 e0       	ldi	r25, 0x06	; 6
    277e:	0d d0       	rcall	.+26     	; 0x279a <_ZN9ImuSensor5beginEv>
	return true;
}
    2780:	81 e0       	ldi	r24, 0x01	; 1
    2782:	08 95       	ret

00002784 <_ZN5Robot4LoopEv>:
bool Robot::ReadTestBtn(){ //TODO remove
	return !((TestBtnPinPort & TestBtnPin) > 0);
}

void Robot::Loop(){
	Imu.Update(EtherComm::buffer + 3);
    2784:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    2788:	70 91 01 02 	lds	r23, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    278c:	6d 5f       	subi	r22, 0xFD	; 253
    278e:	7f 4f       	sbci	r23, 0xFF	; 255
    2790:	87 ee       	ldi	r24, 0xE7	; 231
    2792:	96 e0       	ldi	r25, 0x06	; 6
    2794:	01 c0       	rjmp	.+2      	; 0x2798 <_ZN9ImuSensor6UpdateEPh>
    2796:	08 95       	ret

00002798 <_ZN9ImuSensor6UpdateEPh>:
		rov.RegisterDevice(tempId, this)
		&& rov.RegisterDevice(accelId, this)
		&& imu.begin();
}

void ImuSensor::Update(uint8_t* buffer){
    2798:	08 95       	ret

0000279a <_ZN9ImuSensor5beginEv>:

ImuSensor::ImuSensor(const uint8_t TempId, const uint8_t AccelId) : imu(55, 0x28), tempId(TempId), accelId(AccelId) {
	
}

bool ImuSensor::begin(){
    279a:	cf 93       	push	r28
    279c:	df 93       	push	r29
    279e:	ec 01       	movw	r28, r24
	return 
		rov.RegisterDevice(tempId, this)
    27a0:	bc 01       	movw	r22, r24
    27a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    27a4:	84 df       	rcall	.-248    	; 0x26ae <_ZN5Robot14RegisterDeviceEhP7IDevice>
		&& rov.RegisterDevice(accelId, this)
		&& imu.begin();
    27a6:	88 23       	and	r24, r24
    27a8:	51 f0       	breq	.+20     	; 0x27be <_ZN9ImuSensor5beginEv+0x24>
}

bool ImuSensor::begin(){
	return 
		rov.RegisterDevice(tempId, this)
		&& rov.RegisterDevice(accelId, this)
    27aa:	be 01       	movw	r22, r28
    27ac:	8e 85       	ldd	r24, Y+14	; 0x0e
    27ae:	7f df       	rcall	.-258    	; 0x26ae <_ZN5Robot14RegisterDeviceEhP7IDevice>
    27b0:	88 23       	and	r24, r24
    27b2:	29 f0       	breq	.+10     	; 0x27be <_ZN9ImuSensor5beginEv+0x24>
		&& imu.begin();
    27b4:	6c e0       	ldi	r22, 0x0C	; 12
    27b6:	ce 01       	movw	r24, r28
    27b8:	02 96       	adiw	r24, 0x02	; 2
    27ba:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>
}
    27be:	df 91       	pop	r29
    27c0:	cf 91       	pop	r28
    27c2:	08 95       	ret

000027c4 <_ZN9ImuSensor21ReadRegisterRequestedEhPh>:
	*buffer++ = *val++;
}

AdafruitImu::Vector<3> vector;

void ImuSensor::ReadRegisterRequested(uint8_t id, uint8_t* buffer){
    27c4:	ef 92       	push	r14
    27c6:	ff 92       	push	r15
    27c8:	0f 93       	push	r16
    27ca:	1f 93       	push	r17
    27cc:	cf 93       	push	r28
    27ce:	df 93       	push	r29
    27d0:	cd b7       	in	r28, 0x3d	; 61
    27d2:	de b7       	in	r29, 0x3e	; 62
    27d4:	68 97       	sbiw	r28, 0x18	; 24
    27d6:	0f b6       	in	r0, 0x3f	; 63
    27d8:	f8 94       	cli
    27da:	de bf       	out	0x3e, r29	; 62
    27dc:	0f be       	out	0x3f, r0	; 63
    27de:	cd bf       	out	0x3d, r28	; 61
    27e0:	f6 2e       	mov	r15, r22
    27e2:	8a 01       	movw	r16, r20
	if(id == tempId){
    27e4:	dc 01       	movw	r26, r24
    27e6:	1d 96       	adiw	r26, 0x0d	; 13
    27e8:	ec 90       	ld	r14, X
    27ea:	e6 12       	cpse	r14, r22
    27ec:	0f c0       	rjmp	.+30     	; 0x280c <_ZN9ImuSensor21ReadRegisterRequestedEhPh+0x48>
		buffer[0] = imu.getTemp();
    27ee:	02 96       	adiw	r24, 0x02	; 2
    27f0:	0e 94 a7 02 	call	0x54e	; 0x54e <_ZN15Adafruit_BNO0557getTempEv>
    27f4:	f8 01       	movw	r30, r16
    27f6:	80 83       	st	Z, r24
	virtual void CommandReceived(uint8_t id, const uint8_t* data, uint8_t len) = 0;
	virtual void Update(uint8_t* buffer) = 0;
	
protected:
	void inline SendCommand(uint8_t id, uint8_t len){
		EtherComm::buffer[2] = id;
    27f8:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    27fc:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    2800:	e2 82       	std	Z+2, r14	; 0x02
		EtherComm::SendCommand(CMD_UpdateDevice, len + 1);
    2802:	62 e0       	ldi	r22, 0x02	; 2
    2804:	83 e0       	ldi	r24, 0x03	; 3
    2806:	0e 94 b4 0b 	call	0x1768	; 0x1768 <_ZN9EtherComm11SendCommandEhh>
    280a:	71 c0       	rjmp	.+226    	; 0x28ee <_ZN9ImuSensor21ReadRegisterRequestedEhPh+0x12a>
		SendCommand(id, 1);
	}else if(id == accelId){
    280c:	dc 01       	movw	r26, r24
    280e:	1e 96       	adiw	r26, 0x0e	; 14
    2810:	2c 91       	ld	r18, X
    2812:	62 13       	cpse	r22, r18
    2814:	6c c0       	rjmp	.+216    	; 0x28ee <_ZN9ImuSensor21ReadRegisterRequestedEhPh+0x12a>
		vector = imu.getVector(Adafruit_BNO055::VECTOR_ACCELEROMETER );
    2816:	bc 01       	movw	r22, r24
    2818:	6e 5f       	subi	r22, 0xFE	; 254
    281a:	7f 4f       	sbci	r23, 0xFF	; 255
    281c:	48 e0       	ldi	r20, 0x08	; 8
    281e:	ce 01       	movw	r24, r28
    2820:	01 96       	adiw	r24, 0x01	; 1
    2822:	0e 94 fd 02 	call	0x5fa	; 0x5fa <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
    2826:	fe 01       	movw	r30, r28
    2828:	31 96       	adiw	r30, 0x01	; 1
    282a:	ad ef       	ldi	r26, 0xFD	; 253
    282c:	b8 e0       	ldi	r27, 0x08	; 8
    282e:	ce 01       	movw	r24, r28
    2830:	0d 96       	adiw	r24, 0x0d	; 13
		}

		Vector& operator=(const Vector& v)
		{
			for (int x = 0; x < N; x++ )
			p_vec[x] = v.p_vec[x];
    2832:	41 91       	ld	r20, Z+
    2834:	51 91       	ld	r21, Z+
    2836:	61 91       	ld	r22, Z+
    2838:	71 91       	ld	r23, Z+
    283a:	4d 93       	st	X+, r20
    283c:	5d 93       	st	X+, r21
    283e:	6d 93       	st	X+, r22
    2840:	7d 93       	st	X+, r23
			return ret;
		}

		Vector& operator=(const Vector& v)
		{
			for (int x = 0; x < N; x++ )
    2842:	e8 17       	cp	r30, r24
    2844:	f9 07       	cpc	r31, r25
    2846:	a9 f7       	brne	.-22     	; 0x2832 <_ZN9ImuSensor21ReadRegisterRequestedEhPh+0x6e>
		saveFloat(vector.x(), buffer + 0);
    2848:	ed ef       	ldi	r30, 0xFD	; 253
    284a:	f8 e0       	ldi	r31, 0x08	; 8
    284c:	20 81       	ld	r18, Z
    284e:	51 81       	ldd	r21, Z+1	; 0x01
    2850:	42 81       	ldd	r20, Z+2	; 0x02
    2852:	33 81       	ldd	r19, Z+3	; 0x03
    2854:	82 2f       	mov	r24, r18
    2856:	95 2f       	mov	r25, r21
    2858:	a4 2f       	mov	r26, r20
    285a:	b3 2f       	mov	r27, r19
    285c:	8d 87       	std	Y+13, r24	; 0x0d
    285e:	9e 87       	std	Y+14, r25	; 0x0e
    2860:	af 87       	std	Y+15, r26	; 0x0f
    2862:	b8 8b       	std	Y+16, r27	; 0x10
	
}

static void saveFloat(float f, uint8_t* buffer){
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    2864:	d8 01       	movw	r26, r16
    2866:	2c 93       	st	X, r18
	*buffer++ = *val++;
    2868:	8e 85       	ldd	r24, Y+14	; 0x0e
    286a:	11 96       	adiw	r26, 0x01	; 1
    286c:	8c 93       	st	X, r24
    286e:	11 97       	sbiw	r26, 0x01	; 1
	*buffer++ = *val++;
    2870:	8f 85       	ldd	r24, Y+15	; 0x0f
    2872:	12 96       	adiw	r26, 0x02	; 2
    2874:	8c 93       	st	X, r24
    2876:	12 97       	sbiw	r26, 0x02	; 2
	*buffer++ = *val++;
    2878:	88 89       	ldd	r24, Y+16	; 0x10
    287a:	13 96       	adiw	r26, 0x03	; 3
    287c:	8c 93       	st	X, r24
    287e:	24 81       	ldd	r18, Z+4	; 0x04
    2880:	55 81       	ldd	r21, Z+5	; 0x05
    2882:	46 81       	ldd	r20, Z+6	; 0x06
    2884:	37 81       	ldd	r19, Z+7	; 0x07
    2886:	82 2f       	mov	r24, r18
    2888:	95 2f       	mov	r25, r21
    288a:	a4 2f       	mov	r26, r20
    288c:	b3 2f       	mov	r27, r19
    288e:	89 8b       	std	Y+17, r24	; 0x11
    2890:	9a 8b       	std	Y+18, r25	; 0x12
    2892:	ab 8b       	std	Y+19, r26	; 0x13
    2894:	bc 8b       	std	Y+20, r27	; 0x14
	
}

static void saveFloat(float f, uint8_t* buffer){
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    2896:	d8 01       	movw	r26, r16
    2898:	14 96       	adiw	r26, 0x04	; 4
    289a:	2c 93       	st	X, r18
    289c:	14 97       	sbiw	r26, 0x04	; 4
	*buffer++ = *val++;
    289e:	8a 89       	ldd	r24, Y+18	; 0x12
    28a0:	15 96       	adiw	r26, 0x05	; 5
    28a2:	8c 93       	st	X, r24
    28a4:	15 97       	sbiw	r26, 0x05	; 5
	*buffer++ = *val++;
    28a6:	8b 89       	ldd	r24, Y+19	; 0x13
    28a8:	16 96       	adiw	r26, 0x06	; 6
    28aa:	8c 93       	st	X, r24
    28ac:	16 97       	sbiw	r26, 0x06	; 6
	*buffer++ = *val++;
    28ae:	8c 89       	ldd	r24, Y+20	; 0x14
    28b0:	17 96       	adiw	r26, 0x07	; 7
    28b2:	8c 93       	st	X, r24
    28b4:	20 85       	ldd	r18, Z+8	; 0x08
    28b6:	51 85       	ldd	r21, Z+9	; 0x09
    28b8:	42 85       	ldd	r20, Z+10	; 0x0a
    28ba:	33 85       	ldd	r19, Z+11	; 0x0b
    28bc:	82 2f       	mov	r24, r18
    28be:	95 2f       	mov	r25, r21
    28c0:	a4 2f       	mov	r26, r20
    28c2:	b3 2f       	mov	r27, r19
    28c4:	8d 8b       	std	Y+21, r24	; 0x15
    28c6:	9e 8b       	std	Y+22, r25	; 0x16
    28c8:	af 8b       	std	Y+23, r26	; 0x17
    28ca:	b8 8f       	std	Y+24, r27	; 0x18
	
}

static void saveFloat(float f, uint8_t* buffer){
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    28cc:	f8 01       	movw	r30, r16
    28ce:	20 87       	std	Z+8, r18	; 0x08
	*buffer++ = *val++;
    28d0:	8e 89       	ldd	r24, Y+22	; 0x16
    28d2:	81 87       	std	Z+9, r24	; 0x09
	*buffer++ = *val++;
    28d4:	8f 89       	ldd	r24, Y+23	; 0x17
    28d6:	82 87       	std	Z+10, r24	; 0x0a
	*buffer++ = *val++;
    28d8:	88 8d       	ldd	r24, Y+24	; 0x18
    28da:	83 87       	std	Z+11, r24	; 0x0b
	virtual void CommandReceived(uint8_t id, const uint8_t* data, uint8_t len) = 0;
	virtual void Update(uint8_t* buffer) = 0;
	
protected:
	void inline SendCommand(uint8_t id, uint8_t len){
		EtherComm::buffer[2] = id;
    28dc:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    28e0:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    28e4:	f2 82       	std	Z+2, r15	; 0x02
		EtherComm::SendCommand(CMD_UpdateDevice, len + 1);
    28e6:	6d e0       	ldi	r22, 0x0D	; 13
    28e8:	83 e0       	ldi	r24, 0x03	; 3
    28ea:	0e 94 b4 0b 	call	0x1768	; 0x1768 <_ZN9EtherComm11SendCommandEhh>
	saveFloat(vector.x(), buffer + 14);
	saveFloat(vector.y(), buffer + 18);
	saveFloat(vector.z(), buffer + 22);
	
	return 1 + 1 + 6*4;*/
    28ee:	68 96       	adiw	r28, 0x18	; 24
    28f0:	0f b6       	in	r0, 0x3f	; 63
    28f2:	f8 94       	cli
    28f4:	de bf       	out	0x3e, r29	; 62
    28f6:	0f be       	out	0x3f, r0	; 63
    28f8:	cd bf       	out	0x3d, r28	; 61
    28fa:	df 91       	pop	r29
    28fc:	cf 91       	pop	r28
    28fe:	1f 91       	pop	r17
    2900:	0f 91       	pop	r16
    2902:	ff 90       	pop	r15
    2904:	ef 90       	pop	r14
    2906:	08 95       	ret

00002908 <_ZN9ImuSensorC1Ehh>:
#define ID_TEMP 1
#define ID_ACCEL 2
//#include "../BNO055/utility/vector.h"
//Adafruit_BNO055 ImuSensor::imu;

ImuSensor::ImuSensor(const uint8_t TempId, const uint8_t AccelId) : imu(55, 0x28), tempId(TempId), accelId(AccelId) {
    2908:	ef 92       	push	r14
    290a:	ff 92       	push	r15
    290c:	0f 93       	push	r16
    290e:	1f 93       	push	r17
    2910:	cf 93       	push	r28
    2912:	df 93       	push	r29
    2914:	ec 01       	movw	r28, r24
    2916:	e6 2e       	mov	r14, r22
    2918:	f4 2e       	mov	r15, r20
    291a:	2e ed       	ldi	r18, 0xDE	; 222
    291c:	32 e0       	ldi	r19, 0x02	; 2
    291e:	fc 01       	movw	r30, r24
    2920:	21 93       	st	Z+, r18
    2922:	31 93       	st	Z+, r19
    2924:	cf 01       	movw	r24, r30
    2926:	0b e9       	ldi	r16, 0x9B	; 155
    2928:	16 e0       	ldi	r17, 0x06	; 6
    292a:	28 e2       	ldi	r18, 0x28	; 40
    292c:	47 e3       	ldi	r20, 0x37	; 55
    292e:	50 e0       	ldi	r21, 0x00	; 0
    2930:	60 e0       	ldi	r22, 0x00	; 0
    2932:	70 e0       	ldi	r23, 0x00	; 0
    2934:	0e 94 c5 01 	call	0x38a	; 0x38a <_ZN15Adafruit_BNO055C1ElhP7TwoWire>
    2938:	ed 86       	std	Y+13, r14	; 0x0d
    293a:	fe 86       	std	Y+14, r15	; 0x0e
	
}
    293c:	df 91       	pop	r29
    293e:	cf 91       	pop	r28
    2940:	1f 91       	pop	r17
    2942:	0f 91       	pop	r16
    2944:	ff 90       	pop	r15
    2946:	ef 90       	pop	r14
    2948:	08 95       	ret

0000294a <_GLOBAL__sub_I__ZN9ImuSensorC2Ehh>:
	template <uint8_t N> class Vector
	{
		public:
		Vector()
		{
			memset(p_vec, 0, sizeof(double)*N);
    294a:	8c e0       	ldi	r24, 0x0C	; 12
    294c:	ed ef       	ldi	r30, 0xFD	; 253
    294e:	f8 e0       	ldi	r31, 0x08	; 8
    2950:	df 01       	movw	r26, r30
    2952:	1d 92       	st	X+, r1
    2954:	8a 95       	dec	r24
    2956:	e9 f7       	brne	.-6      	; 0x2952 <_GLOBAL__sub_I__ZN9ImuSensorC2Ehh+0x8>
    2958:	08 95       	ret

0000295a <_GLOBAL__sub_I_bno>:
	setup();
	
	while(true){
		loop();
	}
    295a:	0f 93       	push	r16
    295c:	1f 93       	push	r17
/* Set the delay between fresh samples */
#define BNO055_SAMPLERATE_DELAY_MS 100

// Check I2C device address and correct line below (by default address is 0x29 or 0x28)
//                                   id, address
Adafruit_BNO055 bno = Adafruit_BNO055(55, 0x28);
    295e:	0b e9       	ldi	r16, 0x9B	; 155
    2960:	16 e0       	ldi	r17, 0x06	; 6
    2962:	28 e2       	ldi	r18, 0x28	; 40
    2964:	47 e3       	ldi	r20, 0x37	; 55
    2966:	50 e0       	ldi	r21, 0x00	; 0
    2968:	60 e0       	ldi	r22, 0x00	; 0
    296a:	70 e0       	ldi	r23, 0x00	; 0
    296c:	89 e0       	ldi	r24, 0x09	; 9
    296e:	99 e0       	ldi	r25, 0x09	; 9
    2970:	0e 94 c5 01 	call	0x38a	; 0x38a <_ZN15Adafruit_BNO055C1ElhP7TwoWire>
	setup();
	
	while(true){
		loop();
	}
    2974:	1f 91       	pop	r17
    2976:	0f 91       	pop	r16
    2978:	08 95       	ret

0000297a <_ZN5Print5writeEPKhj>:
}

uint16_t Print::print(char c)
{
  return write(c);
}
    297a:	cf 92       	push	r12
    297c:	df 92       	push	r13
    297e:	ef 92       	push	r14
    2980:	ff 92       	push	r15
    2982:	0f 93       	push	r16
    2984:	1f 93       	push	r17
    2986:	cf 93       	push	r28
    2988:	df 93       	push	r29
    298a:	41 15       	cp	r20, r1
    298c:	51 05       	cpc	r21, r1
    298e:	c1 f0       	breq	.+48     	; 0x29c0 <_ZN5Print5writeEPKhj+0x46>
    2990:	6a 01       	movw	r12, r20
    2992:	8c 01       	movw	r16, r24
    2994:	e6 2e       	mov	r14, r22
    2996:	f7 2e       	mov	r15, r23
    2998:	c0 e0       	ldi	r28, 0x00	; 0
    299a:	d0 e0       	ldi	r29, 0x00	; 0
    299c:	d7 01       	movw	r26, r14
    299e:	6d 91       	ld	r22, X+
    29a0:	7d 01       	movw	r14, r26
    29a2:	d8 01       	movw	r26, r16
    29a4:	ed 91       	ld	r30, X+
    29a6:	fc 91       	ld	r31, X
    29a8:	01 90       	ld	r0, Z+
    29aa:	f0 81       	ld	r31, Z
    29ac:	e0 2d       	mov	r30, r0
    29ae:	c8 01       	movw	r24, r16
    29b0:	19 95       	eicall
    29b2:	89 2b       	or	r24, r25
    29b4:	39 f0       	breq	.+14     	; 0x29c4 <_ZN5Print5writeEPKhj+0x4a>
    29b6:	21 96       	adiw	r28, 0x01	; 1
    29b8:	cc 16       	cp	r12, r28
    29ba:	dd 06       	cpc	r13, r29
    29bc:	79 f7       	brne	.-34     	; 0x299c <_ZN5Print5writeEPKhj+0x22>
    29be:	02 c0       	rjmp	.+4      	; 0x29c4 <_ZN5Print5writeEPKhj+0x4a>
    29c0:	c0 e0       	ldi	r28, 0x00	; 0
    29c2:	d0 e0       	ldi	r29, 0x00	; 0
    29c4:	ce 01       	movw	r24, r28
    29c6:	df 91       	pop	r29
    29c8:	cf 91       	pop	r28
    29ca:	1f 91       	pop	r17
    29cc:	0f 91       	pop	r16
    29ce:	ff 90       	pop	r15
    29d0:	ef 90       	pop	r14
    29d2:	df 90       	pop	r13
    29d4:	cf 90       	pop	r12
    29d6:	08 95       	ret

000029d8 <_ZN5Print5printEPKc>:
    29d8:	61 15       	cp	r22, r1
    29da:	71 05       	cpc	r23, r1
    29dc:	81 f0       	breq	.+32     	; 0x29fe <_ZN5Print5printEPKc+0x26>
    29de:	fb 01       	movw	r30, r22
    29e0:	01 90       	ld	r0, Z+
    29e2:	00 20       	and	r0, r0
    29e4:	e9 f7       	brne	.-6      	; 0x29e0 <_ZN5Print5printEPKc+0x8>
    29e6:	31 97       	sbiw	r30, 0x01	; 1
    29e8:	af 01       	movw	r20, r30
    29ea:	46 1b       	sub	r20, r22
    29ec:	57 0b       	sbc	r21, r23
    29ee:	dc 01       	movw	r26, r24
    29f0:	ed 91       	ld	r30, X+
    29f2:	fc 91       	ld	r31, X
    29f4:	02 80       	ldd	r0, Z+2	; 0x02
    29f6:	f3 81       	ldd	r31, Z+3	; 0x03
    29f8:	e0 2d       	mov	r30, r0
    29fa:	19 95       	eicall
    29fc:	08 95       	ret
    29fe:	80 e0       	ldi	r24, 0x00	; 0
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    2a02:	08 95       	ret

00002a04 <_ZN5Print7printlnEv>:
  //void clearWriteError() { setWriteError(0); }
  
  virtual uint16_t write(uint8_t) = 0;
  uint16_t write(const char *str) {
	  if (str == NULL) return 0;
	  return write((const uint8_t *)str, strlen(str));
    2a04:	dc 01       	movw	r26, r24
    2a06:	ed 91       	ld	r30, X+
    2a08:	fc 91       	ld	r31, X
    2a0a:	02 80       	ldd	r0, Z+2	; 0x02
    2a0c:	f3 81       	ldd	r31, Z+3	; 0x03
    2a0e:	e0 2d       	mov	r30, r0
    2a10:	42 e0       	ldi	r20, 0x02	; 2
    2a12:	50 e0       	ldi	r21, 0x00	; 0
    2a14:	66 ee       	ldi	r22, 0xE6	; 230
    2a16:	72 e0       	ldi	r23, 0x02	; 2
    2a18:	19 95       	eicall
}
*/
uint16_t Print::println(void)
{
  return write("\r\n");
}
    2a1a:	08 95       	ret

00002a1c <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}
*/
uint16_t Print::println(const char c[])
{
    2a1c:	0f 93       	push	r16
    2a1e:	1f 93       	push	r17
    2a20:	cf 93       	push	r28
    2a22:	df 93       	push	r29
    2a24:	ec 01       	movw	r28, r24
  uint16_t n = print(c);
    2a26:	d8 df       	rcall	.-80     	; 0x29d8 <_ZN5Print5printEPKc>
    2a28:	8c 01       	movw	r16, r24
  n += println();
    2a2a:	ce 01       	movw	r24, r28
    2a2c:	eb df       	rcall	.-42     	; 0x2a04 <_ZN5Print7printlnEv>
  return n;
}
    2a2e:	80 0f       	add	r24, r16
    2a30:	91 1f       	adc	r25, r17
    2a32:	df 91       	pop	r29
    2a34:	cf 91       	pop	r28
    2a36:	1f 91       	pop	r17
    2a38:	0f 91       	pop	r16
    2a3a:	08 95       	ret

00002a3c <__divsf3>:
    2a3c:	0c d0       	rcall	.+24     	; 0x2a56 <__divsf3x>
    2a3e:	ba c0       	rjmp	.+372    	; 0x2bb4 <__fp_round>
    2a40:	b2 d0       	rcall	.+356    	; 0x2ba6 <__fp_pscB>
    2a42:	40 f0       	brcs	.+16     	; 0x2a54 <__divsf3+0x18>
    2a44:	a9 d0       	rcall	.+338    	; 0x2b98 <__fp_pscA>
    2a46:	30 f0       	brcs	.+12     	; 0x2a54 <__divsf3+0x18>
    2a48:	21 f4       	brne	.+8      	; 0x2a52 <__divsf3+0x16>
    2a4a:	5f 3f       	cpi	r21, 0xFF	; 255
    2a4c:	19 f0       	breq	.+6      	; 0x2a54 <__divsf3+0x18>
    2a4e:	9b c0       	rjmp	.+310    	; 0x2b86 <__fp_inf>
    2a50:	51 11       	cpse	r21, r1
    2a52:	e4 c0       	rjmp	.+456    	; 0x2c1c <__fp_szero>
    2a54:	9e c0       	rjmp	.+316    	; 0x2b92 <__fp_nan>

00002a56 <__divsf3x>:
    2a56:	bf d0       	rcall	.+382    	; 0x2bd6 <__fp_split3>
    2a58:	98 f3       	brcs	.-26     	; 0x2a40 <__divsf3+0x4>

00002a5a <__divsf3_pse>:
    2a5a:	99 23       	and	r25, r25
    2a5c:	c9 f3       	breq	.-14     	; 0x2a50 <__divsf3+0x14>
    2a5e:	55 23       	and	r21, r21
    2a60:	b1 f3       	breq	.-20     	; 0x2a4e <__divsf3+0x12>
    2a62:	95 1b       	sub	r25, r21
    2a64:	55 0b       	sbc	r21, r21
    2a66:	bb 27       	eor	r27, r27
    2a68:	aa 27       	eor	r26, r26
    2a6a:	62 17       	cp	r22, r18
    2a6c:	73 07       	cpc	r23, r19
    2a6e:	84 07       	cpc	r24, r20
    2a70:	38 f0       	brcs	.+14     	; 0x2a80 <__divsf3_pse+0x26>
    2a72:	9f 5f       	subi	r25, 0xFF	; 255
    2a74:	5f 4f       	sbci	r21, 0xFF	; 255
    2a76:	22 0f       	add	r18, r18
    2a78:	33 1f       	adc	r19, r19
    2a7a:	44 1f       	adc	r20, r20
    2a7c:	aa 1f       	adc	r26, r26
    2a7e:	a9 f3       	breq	.-22     	; 0x2a6a <__divsf3_pse+0x10>
    2a80:	33 d0       	rcall	.+102    	; 0x2ae8 <__divsf3_pse+0x8e>
    2a82:	0e 2e       	mov	r0, r30
    2a84:	3a f0       	brmi	.+14     	; 0x2a94 <__divsf3_pse+0x3a>
    2a86:	e0 e8       	ldi	r30, 0x80	; 128
    2a88:	30 d0       	rcall	.+96     	; 0x2aea <__divsf3_pse+0x90>
    2a8a:	91 50       	subi	r25, 0x01	; 1
    2a8c:	50 40       	sbci	r21, 0x00	; 0
    2a8e:	e6 95       	lsr	r30
    2a90:	00 1c       	adc	r0, r0
    2a92:	ca f7       	brpl	.-14     	; 0x2a86 <__divsf3_pse+0x2c>
    2a94:	29 d0       	rcall	.+82     	; 0x2ae8 <__divsf3_pse+0x8e>
    2a96:	fe 2f       	mov	r31, r30
    2a98:	27 d0       	rcall	.+78     	; 0x2ae8 <__divsf3_pse+0x8e>
    2a9a:	66 0f       	add	r22, r22
    2a9c:	77 1f       	adc	r23, r23
    2a9e:	88 1f       	adc	r24, r24
    2aa0:	bb 1f       	adc	r27, r27
    2aa2:	26 17       	cp	r18, r22
    2aa4:	37 07       	cpc	r19, r23
    2aa6:	48 07       	cpc	r20, r24
    2aa8:	ab 07       	cpc	r26, r27
    2aaa:	b0 e8       	ldi	r27, 0x80	; 128
    2aac:	09 f0       	breq	.+2      	; 0x2ab0 <__divsf3_pse+0x56>
    2aae:	bb 0b       	sbc	r27, r27
    2ab0:	80 2d       	mov	r24, r0
    2ab2:	bf 01       	movw	r22, r30
    2ab4:	ff 27       	eor	r31, r31
    2ab6:	93 58       	subi	r25, 0x83	; 131
    2ab8:	5f 4f       	sbci	r21, 0xFF	; 255
    2aba:	2a f0       	brmi	.+10     	; 0x2ac6 <__divsf3_pse+0x6c>
    2abc:	9e 3f       	cpi	r25, 0xFE	; 254
    2abe:	51 05       	cpc	r21, r1
    2ac0:	68 f0       	brcs	.+26     	; 0x2adc <__divsf3_pse+0x82>
    2ac2:	61 c0       	rjmp	.+194    	; 0x2b86 <__fp_inf>
    2ac4:	ab c0       	rjmp	.+342    	; 0x2c1c <__fp_szero>
    2ac6:	5f 3f       	cpi	r21, 0xFF	; 255
    2ac8:	ec f3       	brlt	.-6      	; 0x2ac4 <__divsf3_pse+0x6a>
    2aca:	98 3e       	cpi	r25, 0xE8	; 232
    2acc:	dc f3       	brlt	.-10     	; 0x2ac4 <__divsf3_pse+0x6a>
    2ace:	86 95       	lsr	r24
    2ad0:	77 95       	ror	r23
    2ad2:	67 95       	ror	r22
    2ad4:	b7 95       	ror	r27
    2ad6:	f7 95       	ror	r31
    2ad8:	9f 5f       	subi	r25, 0xFF	; 255
    2ada:	c9 f7       	brne	.-14     	; 0x2ace <__divsf3_pse+0x74>
    2adc:	88 0f       	add	r24, r24
    2ade:	91 1d       	adc	r25, r1
    2ae0:	96 95       	lsr	r25
    2ae2:	87 95       	ror	r24
    2ae4:	97 f9       	bld	r25, 7
    2ae6:	08 95       	ret
    2ae8:	e1 e0       	ldi	r30, 0x01	; 1
    2aea:	66 0f       	add	r22, r22
    2aec:	77 1f       	adc	r23, r23
    2aee:	88 1f       	adc	r24, r24
    2af0:	bb 1f       	adc	r27, r27
    2af2:	62 17       	cp	r22, r18
    2af4:	73 07       	cpc	r23, r19
    2af6:	84 07       	cpc	r24, r20
    2af8:	ba 07       	cpc	r27, r26
    2afa:	20 f0       	brcs	.+8      	; 0x2b04 <__divsf3_pse+0xaa>
    2afc:	62 1b       	sub	r22, r18
    2afe:	73 0b       	sbc	r23, r19
    2b00:	84 0b       	sbc	r24, r20
    2b02:	ba 0b       	sbc	r27, r26
    2b04:	ee 1f       	adc	r30, r30
    2b06:	88 f7       	brcc	.-30     	; 0x2aea <__divsf3_pse+0x90>
    2b08:	e0 95       	com	r30
    2b0a:	08 95       	ret

00002b0c <__floatunsisf>:
    2b0c:	e8 94       	clt
    2b0e:	09 c0       	rjmp	.+18     	; 0x2b22 <__floatsisf+0x12>

00002b10 <__floatsisf>:
    2b10:	97 fb       	bst	r25, 7
    2b12:	3e f4       	brtc	.+14     	; 0x2b22 <__floatsisf+0x12>
    2b14:	90 95       	com	r25
    2b16:	80 95       	com	r24
    2b18:	70 95       	com	r23
    2b1a:	61 95       	neg	r22
    2b1c:	7f 4f       	sbci	r23, 0xFF	; 255
    2b1e:	8f 4f       	sbci	r24, 0xFF	; 255
    2b20:	9f 4f       	sbci	r25, 0xFF	; 255
    2b22:	99 23       	and	r25, r25
    2b24:	a9 f0       	breq	.+42     	; 0x2b50 <__floatsisf+0x40>
    2b26:	f9 2f       	mov	r31, r25
    2b28:	96 e9       	ldi	r25, 0x96	; 150
    2b2a:	bb 27       	eor	r27, r27
    2b2c:	93 95       	inc	r25
    2b2e:	f6 95       	lsr	r31
    2b30:	87 95       	ror	r24
    2b32:	77 95       	ror	r23
    2b34:	67 95       	ror	r22
    2b36:	b7 95       	ror	r27
    2b38:	f1 11       	cpse	r31, r1
    2b3a:	f8 cf       	rjmp	.-16     	; 0x2b2c <__floatsisf+0x1c>
    2b3c:	fa f4       	brpl	.+62     	; 0x2b7c <__floatsisf+0x6c>
    2b3e:	bb 0f       	add	r27, r27
    2b40:	11 f4       	brne	.+4      	; 0x2b46 <__floatsisf+0x36>
    2b42:	60 ff       	sbrs	r22, 0
    2b44:	1b c0       	rjmp	.+54     	; 0x2b7c <__floatsisf+0x6c>
    2b46:	6f 5f       	subi	r22, 0xFF	; 255
    2b48:	7f 4f       	sbci	r23, 0xFF	; 255
    2b4a:	8f 4f       	sbci	r24, 0xFF	; 255
    2b4c:	9f 4f       	sbci	r25, 0xFF	; 255
    2b4e:	16 c0       	rjmp	.+44     	; 0x2b7c <__floatsisf+0x6c>
    2b50:	88 23       	and	r24, r24
    2b52:	11 f0       	breq	.+4      	; 0x2b58 <__floatsisf+0x48>
    2b54:	96 e9       	ldi	r25, 0x96	; 150
    2b56:	11 c0       	rjmp	.+34     	; 0x2b7a <__floatsisf+0x6a>
    2b58:	77 23       	and	r23, r23
    2b5a:	21 f0       	breq	.+8      	; 0x2b64 <__floatsisf+0x54>
    2b5c:	9e e8       	ldi	r25, 0x8E	; 142
    2b5e:	87 2f       	mov	r24, r23
    2b60:	76 2f       	mov	r23, r22
    2b62:	05 c0       	rjmp	.+10     	; 0x2b6e <__floatsisf+0x5e>
    2b64:	66 23       	and	r22, r22
    2b66:	71 f0       	breq	.+28     	; 0x2b84 <__floatsisf+0x74>
    2b68:	96 e8       	ldi	r25, 0x86	; 134
    2b6a:	86 2f       	mov	r24, r22
    2b6c:	70 e0       	ldi	r23, 0x00	; 0
    2b6e:	60 e0       	ldi	r22, 0x00	; 0
    2b70:	2a f0       	brmi	.+10     	; 0x2b7c <__floatsisf+0x6c>
    2b72:	9a 95       	dec	r25
    2b74:	66 0f       	add	r22, r22
    2b76:	77 1f       	adc	r23, r23
    2b78:	88 1f       	adc	r24, r24
    2b7a:	da f7       	brpl	.-10     	; 0x2b72 <__floatsisf+0x62>
    2b7c:	88 0f       	add	r24, r24
    2b7e:	96 95       	lsr	r25
    2b80:	87 95       	ror	r24
    2b82:	97 f9       	bld	r25, 7
    2b84:	08 95       	ret

00002b86 <__fp_inf>:
    2b86:	97 f9       	bld	r25, 7
    2b88:	9f 67       	ori	r25, 0x7F	; 127
    2b8a:	80 e8       	ldi	r24, 0x80	; 128
    2b8c:	70 e0       	ldi	r23, 0x00	; 0
    2b8e:	60 e0       	ldi	r22, 0x00	; 0
    2b90:	08 95       	ret

00002b92 <__fp_nan>:
    2b92:	9f ef       	ldi	r25, 0xFF	; 255
    2b94:	80 ec       	ldi	r24, 0xC0	; 192
    2b96:	08 95       	ret

00002b98 <__fp_pscA>:
    2b98:	00 24       	eor	r0, r0
    2b9a:	0a 94       	dec	r0
    2b9c:	16 16       	cp	r1, r22
    2b9e:	17 06       	cpc	r1, r23
    2ba0:	18 06       	cpc	r1, r24
    2ba2:	09 06       	cpc	r0, r25
    2ba4:	08 95       	ret

00002ba6 <__fp_pscB>:
    2ba6:	00 24       	eor	r0, r0
    2ba8:	0a 94       	dec	r0
    2baa:	12 16       	cp	r1, r18
    2bac:	13 06       	cpc	r1, r19
    2bae:	14 06       	cpc	r1, r20
    2bb0:	05 06       	cpc	r0, r21
    2bb2:	08 95       	ret

00002bb4 <__fp_round>:
    2bb4:	09 2e       	mov	r0, r25
    2bb6:	03 94       	inc	r0
    2bb8:	00 0c       	add	r0, r0
    2bba:	11 f4       	brne	.+4      	; 0x2bc0 <__fp_round+0xc>
    2bbc:	88 23       	and	r24, r24
    2bbe:	52 f0       	brmi	.+20     	; 0x2bd4 <__fp_round+0x20>
    2bc0:	bb 0f       	add	r27, r27
    2bc2:	40 f4       	brcc	.+16     	; 0x2bd4 <__fp_round+0x20>
    2bc4:	bf 2b       	or	r27, r31
    2bc6:	11 f4       	brne	.+4      	; 0x2bcc <__fp_round+0x18>
    2bc8:	60 ff       	sbrs	r22, 0
    2bca:	04 c0       	rjmp	.+8      	; 0x2bd4 <__fp_round+0x20>
    2bcc:	6f 5f       	subi	r22, 0xFF	; 255
    2bce:	7f 4f       	sbci	r23, 0xFF	; 255
    2bd0:	8f 4f       	sbci	r24, 0xFF	; 255
    2bd2:	9f 4f       	sbci	r25, 0xFF	; 255
    2bd4:	08 95       	ret

00002bd6 <__fp_split3>:
    2bd6:	57 fd       	sbrc	r21, 7
    2bd8:	90 58       	subi	r25, 0x80	; 128
    2bda:	44 0f       	add	r20, r20
    2bdc:	55 1f       	adc	r21, r21
    2bde:	59 f0       	breq	.+22     	; 0x2bf6 <__fp_splitA+0x10>
    2be0:	5f 3f       	cpi	r21, 0xFF	; 255
    2be2:	71 f0       	breq	.+28     	; 0x2c00 <__fp_splitA+0x1a>
    2be4:	47 95       	ror	r20

00002be6 <__fp_splitA>:
    2be6:	88 0f       	add	r24, r24
    2be8:	97 fb       	bst	r25, 7
    2bea:	99 1f       	adc	r25, r25
    2bec:	61 f0       	breq	.+24     	; 0x2c06 <__fp_splitA+0x20>
    2bee:	9f 3f       	cpi	r25, 0xFF	; 255
    2bf0:	79 f0       	breq	.+30     	; 0x2c10 <__fp_splitA+0x2a>
    2bf2:	87 95       	ror	r24
    2bf4:	08 95       	ret
    2bf6:	12 16       	cp	r1, r18
    2bf8:	13 06       	cpc	r1, r19
    2bfa:	14 06       	cpc	r1, r20
    2bfc:	55 1f       	adc	r21, r21
    2bfe:	f2 cf       	rjmp	.-28     	; 0x2be4 <__fp_split3+0xe>
    2c00:	46 95       	lsr	r20
    2c02:	f1 df       	rcall	.-30     	; 0x2be6 <__fp_splitA>
    2c04:	08 c0       	rjmp	.+16     	; 0x2c16 <__fp_splitA+0x30>
    2c06:	16 16       	cp	r1, r22
    2c08:	17 06       	cpc	r1, r23
    2c0a:	18 06       	cpc	r1, r24
    2c0c:	99 1f       	adc	r25, r25
    2c0e:	f1 cf       	rjmp	.-30     	; 0x2bf2 <__fp_splitA+0xc>
    2c10:	86 95       	lsr	r24
    2c12:	71 05       	cpc	r23, r1
    2c14:	61 05       	cpc	r22, r1
    2c16:	08 94       	sec
    2c18:	08 95       	ret

00002c1a <__fp_zero>:
    2c1a:	e8 94       	clt

00002c1c <__fp_szero>:
    2c1c:	bb 27       	eor	r27, r27
    2c1e:	66 27       	eor	r22, r22
    2c20:	77 27       	eor	r23, r23
    2c22:	cb 01       	movw	r24, r22
    2c24:	97 f9       	bld	r25, 7
    2c26:	08 95       	ret

00002c28 <__mulsf3>:
    2c28:	0b d0       	rcall	.+22     	; 0x2c40 <__mulsf3x>
    2c2a:	c4 cf       	rjmp	.-120    	; 0x2bb4 <__fp_round>
    2c2c:	b5 df       	rcall	.-150    	; 0x2b98 <__fp_pscA>
    2c2e:	28 f0       	brcs	.+10     	; 0x2c3a <__mulsf3+0x12>
    2c30:	ba df       	rcall	.-140    	; 0x2ba6 <__fp_pscB>
    2c32:	18 f0       	brcs	.+6      	; 0x2c3a <__mulsf3+0x12>
    2c34:	95 23       	and	r25, r21
    2c36:	09 f0       	breq	.+2      	; 0x2c3a <__mulsf3+0x12>
    2c38:	a6 cf       	rjmp	.-180    	; 0x2b86 <__fp_inf>
    2c3a:	ab cf       	rjmp	.-170    	; 0x2b92 <__fp_nan>
    2c3c:	11 24       	eor	r1, r1
    2c3e:	ee cf       	rjmp	.-36     	; 0x2c1c <__fp_szero>

00002c40 <__mulsf3x>:
    2c40:	ca df       	rcall	.-108    	; 0x2bd6 <__fp_split3>
    2c42:	a0 f3       	brcs	.-24     	; 0x2c2c <__mulsf3+0x4>

00002c44 <__mulsf3_pse>:
    2c44:	95 9f       	mul	r25, r21
    2c46:	d1 f3       	breq	.-12     	; 0x2c3c <__mulsf3+0x14>
    2c48:	95 0f       	add	r25, r21
    2c4a:	50 e0       	ldi	r21, 0x00	; 0
    2c4c:	55 1f       	adc	r21, r21
    2c4e:	62 9f       	mul	r22, r18
    2c50:	f0 01       	movw	r30, r0
    2c52:	72 9f       	mul	r23, r18
    2c54:	bb 27       	eor	r27, r27
    2c56:	f0 0d       	add	r31, r0
    2c58:	b1 1d       	adc	r27, r1
    2c5a:	63 9f       	mul	r22, r19
    2c5c:	aa 27       	eor	r26, r26
    2c5e:	f0 0d       	add	r31, r0
    2c60:	b1 1d       	adc	r27, r1
    2c62:	aa 1f       	adc	r26, r26
    2c64:	64 9f       	mul	r22, r20
    2c66:	66 27       	eor	r22, r22
    2c68:	b0 0d       	add	r27, r0
    2c6a:	a1 1d       	adc	r26, r1
    2c6c:	66 1f       	adc	r22, r22
    2c6e:	82 9f       	mul	r24, r18
    2c70:	22 27       	eor	r18, r18
    2c72:	b0 0d       	add	r27, r0
    2c74:	a1 1d       	adc	r26, r1
    2c76:	62 1f       	adc	r22, r18
    2c78:	73 9f       	mul	r23, r19
    2c7a:	b0 0d       	add	r27, r0
    2c7c:	a1 1d       	adc	r26, r1
    2c7e:	62 1f       	adc	r22, r18
    2c80:	83 9f       	mul	r24, r19
    2c82:	a0 0d       	add	r26, r0
    2c84:	61 1d       	adc	r22, r1
    2c86:	22 1f       	adc	r18, r18
    2c88:	74 9f       	mul	r23, r20
    2c8a:	33 27       	eor	r19, r19
    2c8c:	a0 0d       	add	r26, r0
    2c8e:	61 1d       	adc	r22, r1
    2c90:	23 1f       	adc	r18, r19
    2c92:	84 9f       	mul	r24, r20
    2c94:	60 0d       	add	r22, r0
    2c96:	21 1d       	adc	r18, r1
    2c98:	82 2f       	mov	r24, r18
    2c9a:	76 2f       	mov	r23, r22
    2c9c:	6a 2f       	mov	r22, r26
    2c9e:	11 24       	eor	r1, r1
    2ca0:	9f 57       	subi	r25, 0x7F	; 127
    2ca2:	50 40       	sbci	r21, 0x00	; 0
    2ca4:	8a f0       	brmi	.+34     	; 0x2cc8 <__mulsf3_pse+0x84>
    2ca6:	e1 f0       	breq	.+56     	; 0x2ce0 <__mulsf3_pse+0x9c>
    2ca8:	88 23       	and	r24, r24
    2caa:	4a f0       	brmi	.+18     	; 0x2cbe <__mulsf3_pse+0x7a>
    2cac:	ee 0f       	add	r30, r30
    2cae:	ff 1f       	adc	r31, r31
    2cb0:	bb 1f       	adc	r27, r27
    2cb2:	66 1f       	adc	r22, r22
    2cb4:	77 1f       	adc	r23, r23
    2cb6:	88 1f       	adc	r24, r24
    2cb8:	91 50       	subi	r25, 0x01	; 1
    2cba:	50 40       	sbci	r21, 0x00	; 0
    2cbc:	a9 f7       	brne	.-22     	; 0x2ca8 <__mulsf3_pse+0x64>
    2cbe:	9e 3f       	cpi	r25, 0xFE	; 254
    2cc0:	51 05       	cpc	r21, r1
    2cc2:	70 f0       	brcs	.+28     	; 0x2ce0 <__mulsf3_pse+0x9c>
    2cc4:	60 cf       	rjmp	.-320    	; 0x2b86 <__fp_inf>
    2cc6:	aa cf       	rjmp	.-172    	; 0x2c1c <__fp_szero>
    2cc8:	5f 3f       	cpi	r21, 0xFF	; 255
    2cca:	ec f3       	brlt	.-6      	; 0x2cc6 <__mulsf3_pse+0x82>
    2ccc:	98 3e       	cpi	r25, 0xE8	; 232
    2cce:	dc f3       	brlt	.-10     	; 0x2cc6 <__mulsf3_pse+0x82>
    2cd0:	86 95       	lsr	r24
    2cd2:	77 95       	ror	r23
    2cd4:	67 95       	ror	r22
    2cd6:	b7 95       	ror	r27
    2cd8:	f7 95       	ror	r31
    2cda:	e7 95       	ror	r30
    2cdc:	9f 5f       	subi	r25, 0xFF	; 255
    2cde:	c1 f7       	brne	.-16     	; 0x2cd0 <__mulsf3_pse+0x8c>
    2ce0:	fe 2b       	or	r31, r30
    2ce2:	88 0f       	add	r24, r24
    2ce4:	91 1d       	adc	r25, r1
    2ce6:	96 95       	lsr	r25
    2ce8:	87 95       	ror	r24
    2cea:	97 f9       	bld	r25, 7
    2cec:	08 95       	ret

00002cee <__udivmodsi4>:
    2cee:	a1 e2       	ldi	r26, 0x21	; 33
    2cf0:	1a 2e       	mov	r1, r26
    2cf2:	aa 1b       	sub	r26, r26
    2cf4:	bb 1b       	sub	r27, r27
    2cf6:	fd 01       	movw	r30, r26
    2cf8:	0d c0       	rjmp	.+26     	; 0x2d14 <__udivmodsi4_ep>

00002cfa <__udivmodsi4_loop>:
    2cfa:	aa 1f       	adc	r26, r26
    2cfc:	bb 1f       	adc	r27, r27
    2cfe:	ee 1f       	adc	r30, r30
    2d00:	ff 1f       	adc	r31, r31
    2d02:	a2 17       	cp	r26, r18
    2d04:	b3 07       	cpc	r27, r19
    2d06:	e4 07       	cpc	r30, r20
    2d08:	f5 07       	cpc	r31, r21
    2d0a:	20 f0       	brcs	.+8      	; 0x2d14 <__udivmodsi4_ep>
    2d0c:	a2 1b       	sub	r26, r18
    2d0e:	b3 0b       	sbc	r27, r19
    2d10:	e4 0b       	sbc	r30, r20
    2d12:	f5 0b       	sbc	r31, r21

00002d14 <__udivmodsi4_ep>:
    2d14:	66 1f       	adc	r22, r22
    2d16:	77 1f       	adc	r23, r23
    2d18:	88 1f       	adc	r24, r24
    2d1a:	99 1f       	adc	r25, r25
    2d1c:	1a 94       	dec	r1
    2d1e:	69 f7       	brne	.-38     	; 0x2cfa <__udivmodsi4_loop>
    2d20:	60 95       	com	r22
    2d22:	70 95       	com	r23
    2d24:	80 95       	com	r24
    2d26:	90 95       	com	r25
    2d28:	9b 01       	movw	r18, r22
    2d2a:	ac 01       	movw	r20, r24
    2d2c:	bd 01       	movw	r22, r26
    2d2e:	cf 01       	movw	r24, r30
    2d30:	08 95       	ret

00002d32 <__tablejump2__>:
    2d32:	ee 0f       	add	r30, r30
    2d34:	ff 1f       	adc	r31, r31
    2d36:	88 1f       	adc	r24, r24
    2d38:	8b bf       	out	0x3b, r24	; 59
    2d3a:	07 90       	elpm	r0, Z+
    2d3c:	f6 91       	elpm	r31, Z
    2d3e:	e0 2d       	mov	r30, r0
    2d40:	19 94       	eijmp

00002d42 <memcpy_P>:
    2d42:	fb 01       	movw	r30, r22
    2d44:	dc 01       	movw	r26, r24
    2d46:	02 c0       	rjmp	.+4      	; 0x2d4c <memcpy_P+0xa>
    2d48:	05 90       	lpm	r0, Z+
    2d4a:	0d 92       	st	X+, r0
    2d4c:	41 50       	subi	r20, 0x01	; 1
    2d4e:	50 40       	sbci	r21, 0x00	; 0
    2d50:	d8 f7       	brcc	.-10     	; 0x2d48 <memcpy_P+0x6>
    2d52:	08 95       	ret

00002d54 <memcmp>:
    2d54:	fb 01       	movw	r30, r22
    2d56:	dc 01       	movw	r26, r24
    2d58:	04 c0       	rjmp	.+8      	; 0x2d62 <memcmp+0xe>
    2d5a:	8d 91       	ld	r24, X+
    2d5c:	01 90       	ld	r0, Z+
    2d5e:	80 19       	sub	r24, r0
    2d60:	21 f4       	brne	.+8      	; 0x2d6a <memcmp+0x16>
    2d62:	41 50       	subi	r20, 0x01	; 1
    2d64:	50 40       	sbci	r21, 0x00	; 0
    2d66:	c8 f7       	brcc	.-14     	; 0x2d5a <memcmp+0x6>
    2d68:	88 1b       	sub	r24, r24
    2d6a:	99 0b       	sbc	r25, r25
    2d6c:	08 95       	ret

00002d6e <strncpy>:
    2d6e:	fb 01       	movw	r30, r22
    2d70:	dc 01       	movw	r26, r24
    2d72:	41 50       	subi	r20, 0x01	; 1
    2d74:	50 40       	sbci	r21, 0x00	; 0
    2d76:	48 f0       	brcs	.+18     	; 0x2d8a <strncpy+0x1c>
    2d78:	01 90       	ld	r0, Z+
    2d7a:	0d 92       	st	X+, r0
    2d7c:	00 20       	and	r0, r0
    2d7e:	c9 f7       	brne	.-14     	; 0x2d72 <strncpy+0x4>
    2d80:	01 c0       	rjmp	.+2      	; 0x2d84 <strncpy+0x16>
    2d82:	1d 92       	st	X+, r1
    2d84:	41 50       	subi	r20, 0x01	; 1
    2d86:	50 40       	sbci	r21, 0x00	; 0
    2d88:	e0 f7       	brcc	.-8      	; 0x2d82 <strncpy+0x14>
    2d8a:	08 95       	ret

00002d8c <_exit>:
    2d8c:	f8 94       	cli

00002d8e <__stop_program>:
    2d8e:	ff cf       	rjmp	.-2      	; 0x2d8e <__stop_program>
