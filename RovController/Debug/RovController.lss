
RovController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002e8  00800200  000054ea  0000557e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000054ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000777  008004e8  008004e8  00005866  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00005866  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005898  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000a48  00000000  00000000  000058d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000186d6  00000000  00000000  00006320  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000051fa  00000000  00000000  0001e9f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000626f  00000000  00000000  00023bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001e84  00000000  00000000  00029e60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00006b48  00000000  00000000  0002bce4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000be26  00000000  00000000  0003282c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000980  00000000  00000000  0003e652  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4b c1       	rjmp	.+662    	; 0x298 <__ctors_end>
       2:	00 00       	nop
       4:	7a c1       	rjmp	.+756    	; 0x2fa <__bad_interrupt>
       6:	00 00       	nop
       8:	78 c1       	rjmp	.+752    	; 0x2fa <__bad_interrupt>
       a:	00 00       	nop
       c:	76 c1       	rjmp	.+748    	; 0x2fa <__bad_interrupt>
       e:	00 00       	nop
      10:	74 c1       	rjmp	.+744    	; 0x2fa <__bad_interrupt>
      12:	00 00       	nop
      14:	72 c1       	rjmp	.+740    	; 0x2fa <__bad_interrupt>
      16:	00 00       	nop
      18:	70 c1       	rjmp	.+736    	; 0x2fa <__bad_interrupt>
      1a:	00 00       	nop
      1c:	6e c1       	rjmp	.+732    	; 0x2fa <__bad_interrupt>
      1e:	00 00       	nop
      20:	6c c1       	rjmp	.+728    	; 0x2fa <__bad_interrupt>
      22:	00 00       	nop
      24:	6a c1       	rjmp	.+724    	; 0x2fa <__bad_interrupt>
      26:	00 00       	nop
      28:	68 c1       	rjmp	.+720    	; 0x2fa <__bad_interrupt>
      2a:	00 00       	nop
      2c:	66 c1       	rjmp	.+716    	; 0x2fa <__bad_interrupt>
      2e:	00 00       	nop
      30:	64 c1       	rjmp	.+712    	; 0x2fa <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 0b 0f 	jmp	0x1e16	; 0x1e16 <__vector_13>
      38:	60 c1       	rjmp	.+704    	; 0x2fa <__bad_interrupt>
      3a:	00 00       	nop
      3c:	5e c1       	rjmp	.+700    	; 0x2fa <__bad_interrupt>
      3e:	00 00       	nop
      40:	5c c1       	rjmp	.+696    	; 0x2fa <__bad_interrupt>
      42:	00 00       	nop
      44:	5a c1       	rjmp	.+692    	; 0x2fa <__bad_interrupt>
      46:	00 00       	nop
      48:	58 c1       	rjmp	.+688    	; 0x2fa <__bad_interrupt>
      4a:	00 00       	nop
      4c:	56 c1       	rjmp	.+684    	; 0x2fa <__bad_interrupt>
      4e:	00 00       	nop
      50:	54 c1       	rjmp	.+680    	; 0x2fa <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 e2 0e 	jmp	0x1dc4	; 0x1dc4 <__vector_21>
      58:	50 c1       	rjmp	.+672    	; 0x2fa <__bad_interrupt>
      5a:	00 00       	nop
      5c:	4e c1       	rjmp	.+668    	; 0x2fa <__bad_interrupt>
      5e:	00 00       	nop
      60:	4c c1       	rjmp	.+664    	; 0x2fa <__bad_interrupt>
      62:	00 00       	nop
      64:	4a c1       	rjmp	.+660    	; 0x2fa <__bad_interrupt>
      66:	00 00       	nop
      68:	48 c1       	rjmp	.+656    	; 0x2fa <__bad_interrupt>
      6a:	00 00       	nop
      6c:	46 c1       	rjmp	.+652    	; 0x2fa <__bad_interrupt>
      6e:	00 00       	nop
      70:	44 c1       	rjmp	.+648    	; 0x2fa <__bad_interrupt>
      72:	00 00       	nop
      74:	42 c1       	rjmp	.+644    	; 0x2fa <__bad_interrupt>
      76:	00 00       	nop
      78:	40 c1       	rjmp	.+640    	; 0x2fa <__bad_interrupt>
      7a:	00 00       	nop
      7c:	3e c1       	rjmp	.+636    	; 0x2fa <__bad_interrupt>
      7e:	00 00       	nop
      80:	3c c1       	rjmp	.+632    	; 0x2fa <__bad_interrupt>
      82:	00 00       	nop
      84:	3a c1       	rjmp	.+628    	; 0x2fa <__bad_interrupt>
      86:	00 00       	nop
      88:	38 c1       	rjmp	.+624    	; 0x2fa <__bad_interrupt>
      8a:	00 00       	nop
      8c:	36 c1       	rjmp	.+620    	; 0x2fa <__bad_interrupt>
      8e:	00 00       	nop
      90:	34 c1       	rjmp	.+616    	; 0x2fa <__bad_interrupt>
      92:	00 00       	nop
      94:	32 c1       	rjmp	.+612    	; 0x2fa <__bad_interrupt>
      96:	00 00       	nop
      98:	30 c1       	rjmp	.+608    	; 0x2fa <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 88 10 	jmp	0x2110	; 0x2110 <__vector_39>
      a0:	2c c1       	rjmp	.+600    	; 0x2fa <__bad_interrupt>
      a2:	00 00       	nop
      a4:	2a c1       	rjmp	.+596    	; 0x2fa <__bad_interrupt>
      a6:	00 00       	nop
      a8:	28 c1       	rjmp	.+592    	; 0x2fa <__bad_interrupt>
      aa:	00 00       	nop
      ac:	26 c1       	rjmp	.+588    	; 0x2fa <__bad_interrupt>
      ae:	00 00       	nop
      b0:	24 c1       	rjmp	.+584    	; 0x2fa <__bad_interrupt>
      b2:	00 00       	nop
      b4:	22 c1       	rjmp	.+580    	; 0x2fa <__bad_interrupt>
      b6:	00 00       	nop
      b8:	20 c1       	rjmp	.+576    	; 0x2fa <__bad_interrupt>
      ba:	00 00       	nop
      bc:	1e c1       	rjmp	.+572    	; 0x2fa <__bad_interrupt>
      be:	00 00       	nop
      c0:	1c c1       	rjmp	.+568    	; 0x2fa <__bad_interrupt>
      c2:	00 00       	nop
      c4:	1a c1       	rjmp	.+564    	; 0x2fa <__bad_interrupt>
      c6:	00 00       	nop
      c8:	18 c1       	rjmp	.+560    	; 0x2fa <__bad_interrupt>
      ca:	00 00       	nop
      cc:	16 c1       	rjmp	.+556    	; 0x2fa <__bad_interrupt>
      ce:	00 00       	nop
      d0:	14 c1       	rjmp	.+552    	; 0x2fa <__bad_interrupt>
      d2:	00 00       	nop
      d4:	12 c1       	rjmp	.+548    	; 0x2fa <__bad_interrupt>
      d6:	00 00       	nop
      d8:	10 c1       	rjmp	.+544    	; 0x2fa <__bad_interrupt>
      da:	00 00       	nop
      dc:	0e c1       	rjmp	.+540    	; 0x2fa <__bad_interrupt>
      de:	00 00       	nop
      e0:	0c c1       	rjmp	.+536    	; 0x2fa <__bad_interrupt>
      e2:	00 00       	nop
      e4:	8f 11       	cpse	r24, r15
      e6:	92 11       	cpse	r25, r2
      e8:	92 11       	cpse	r25, r2
      ea:	92 11       	cpse	r25, r2
      ec:	92 11       	cpse	r25, r2
      ee:	92 11       	cpse	r25, r2
      f0:	92 11       	cpse	r25, r2
      f2:	92 11       	cpse	r25, r2
      f4:	aa 10       	cpse	r10, r10
      f6:	92 11       	cpse	r25, r2
      f8:	92 11       	cpse	r25, r2
      fa:	92 11       	cpse	r25, r2
      fc:	92 11       	cpse	r25, r2
      fe:	92 11       	cpse	r25, r2
     100:	92 11       	cpse	r25, r2
     102:	92 11       	cpse	r25, r2
     104:	aa 10       	cpse	r10, r10
     106:	92 11       	cpse	r25, r2
     108:	92 11       	cpse	r25, r2
     10a:	92 11       	cpse	r25, r2
     10c:	92 11       	cpse	r25, r2
     10e:	92 11       	cpse	r25, r2
     110:	92 11       	cpse	r25, r2
     112:	92 11       	cpse	r25, r2
     114:	b2 10       	cpse	r11, r2
     116:	92 11       	cpse	r25, r2
     118:	92 11       	cpse	r25, r2
     11a:	92 11       	cpse	r25, r2
     11c:	92 11       	cpse	r25, r2
     11e:	92 11       	cpse	r25, r2
     120:	92 11       	cpse	r25, r2
     122:	92 11       	cpse	r25, r2
     124:	d7 10       	cpse	r13, r7
     126:	92 11       	cpse	r25, r2
     128:	92 11       	cpse	r25, r2
     12a:	92 11       	cpse	r25, r2
     12c:	92 11       	cpse	r25, r2
     12e:	92 11       	cpse	r25, r2
     130:	92 11       	cpse	r25, r2
     132:	92 11       	cpse	r25, r2
     134:	b2 10       	cpse	r11, r2
     136:	92 11       	cpse	r25, r2
     138:	92 11       	cpse	r25, r2
     13a:	92 11       	cpse	r25, r2
     13c:	92 11       	cpse	r25, r2
     13e:	92 11       	cpse	r25, r2
     140:	92 11       	cpse	r25, r2
     142:	92 11       	cpse	r25, r2
     144:	dc 10       	cpse	r13, r12
     146:	92 11       	cpse	r25, r2
     148:	92 11       	cpse	r25, r2
     14a:	92 11       	cpse	r25, r2
     14c:	92 11       	cpse	r25, r2
     14e:	92 11       	cpse	r25, r2
     150:	92 11       	cpse	r25, r2
     152:	92 11       	cpse	r25, r2
     154:	e1 10       	cpse	r14, r1
     156:	92 11       	cpse	r25, r2
     158:	92 11       	cpse	r25, r2
     15a:	92 11       	cpse	r25, r2
     15c:	92 11       	cpse	r25, r2
     15e:	92 11       	cpse	r25, r2
     160:	92 11       	cpse	r25, r2
     162:	92 11       	cpse	r25, r2
     164:	f2 10       	cpse	r15, r2
     166:	92 11       	cpse	r25, r2
     168:	92 11       	cpse	r25, r2
     16a:	92 11       	cpse	r25, r2
     16c:	92 11       	cpse	r25, r2
     16e:	92 11       	cpse	r25, r2
     170:	92 11       	cpse	r25, r2
     172:	92 11       	cpse	r25, r2
     174:	1b 11       	cpse	r17, r11
     176:	92 11       	cpse	r25, r2
     178:	92 11       	cpse	r25, r2
     17a:	92 11       	cpse	r25, r2
     17c:	92 11       	cpse	r25, r2
     17e:	92 11       	cpse	r25, r2
     180:	92 11       	cpse	r25, r2
     182:	92 11       	cpse	r25, r2
     184:	e6 10       	cpse	r14, r6
     186:	92 11       	cpse	r25, r2
     188:	92 11       	cpse	r25, r2
     18a:	92 11       	cpse	r25, r2
     18c:	92 11       	cpse	r25, r2
     18e:	92 11       	cpse	r25, r2
     190:	92 11       	cpse	r25, r2
     192:	92 11       	cpse	r25, r2
     194:	00 11       	cpse	r16, r0
     196:	92 11       	cpse	r25, r2
     198:	92 11       	cpse	r25, r2
     19a:	92 11       	cpse	r25, r2
     19c:	92 11       	cpse	r25, r2
     19e:	92 11       	cpse	r25, r2
     1a0:	92 11       	cpse	r25, r2
     1a2:	92 11       	cpse	r25, r2
     1a4:	1d 11       	cpse	r17, r13
     1a6:	92 11       	cpse	r25, r2
     1a8:	92 11       	cpse	r25, r2
     1aa:	92 11       	cpse	r25, r2
     1ac:	92 11       	cpse	r25, r2
     1ae:	92 11       	cpse	r25, r2
     1b0:	92 11       	cpse	r25, r2
     1b2:	92 11       	cpse	r25, r2
     1b4:	1d 11       	cpse	r17, r13
     1b6:	92 11       	cpse	r25, r2
     1b8:	92 11       	cpse	r25, r2
     1ba:	92 11       	cpse	r25, r2
     1bc:	92 11       	cpse	r25, r2
     1be:	92 11       	cpse	r25, r2
     1c0:	92 11       	cpse	r25, r2
     1c2:	92 11       	cpse	r25, r2
     1c4:	1d 11       	cpse	r17, r13
     1c6:	92 11       	cpse	r25, r2
     1c8:	92 11       	cpse	r25, r2
     1ca:	92 11       	cpse	r25, r2
     1cc:	92 11       	cpse	r25, r2
     1ce:	92 11       	cpse	r25, r2
     1d0:	92 11       	cpse	r25, r2
     1d2:	92 11       	cpse	r25, r2
     1d4:	1d 11       	cpse	r17, r13
     1d6:	92 11       	cpse	r25, r2
     1d8:	92 11       	cpse	r25, r2
     1da:	92 11       	cpse	r25, r2
     1dc:	92 11       	cpse	r25, r2
     1de:	92 11       	cpse	r25, r2
     1e0:	92 11       	cpse	r25, r2
     1e2:	92 11       	cpse	r25, r2
     1e4:	26 11       	cpse	r18, r6
     1e6:	92 11       	cpse	r25, r2
     1e8:	92 11       	cpse	r25, r2
     1ea:	92 11       	cpse	r25, r2
     1ec:	92 11       	cpse	r25, r2
     1ee:	92 11       	cpse	r25, r2
     1f0:	92 11       	cpse	r25, r2
     1f2:	92 11       	cpse	r25, r2
     1f4:	56 11       	cpse	r21, r6
     1f6:	92 11       	cpse	r25, r2
     1f8:	92 11       	cpse	r25, r2
     1fa:	92 11       	cpse	r25, r2
     1fc:	92 11       	cpse	r25, r2
     1fe:	92 11       	cpse	r25, r2
     200:	92 11       	cpse	r25, r2
     202:	92 11       	cpse	r25, r2
     204:	26 11       	cpse	r18, r6
     206:	92 11       	cpse	r25, r2
     208:	92 11       	cpse	r25, r2
     20a:	92 11       	cpse	r25, r2
     20c:	92 11       	cpse	r25, r2
     20e:	92 11       	cpse	r25, r2
     210:	92 11       	cpse	r25, r2
     212:	92 11       	cpse	r25, r2
     214:	56 11       	cpse	r21, r6
     216:	92 11       	cpse	r25, r2
     218:	92 11       	cpse	r25, r2
     21a:	92 11       	cpse	r25, r2
     21c:	92 11       	cpse	r25, r2
     21e:	92 11       	cpse	r25, r2
     220:	92 11       	cpse	r25, r2
     222:	92 11       	cpse	r25, r2
     224:	3e 11       	cpse	r19, r14
     226:	92 11       	cpse	r25, r2
     228:	92 11       	cpse	r25, r2
     22a:	92 11       	cpse	r25, r2
     22c:	92 11       	cpse	r25, r2
     22e:	92 11       	cpse	r25, r2
     230:	92 11       	cpse	r25, r2
     232:	92 11       	cpse	r25, r2
     234:	5a 11       	cpse	r21, r10
     236:	92 11       	cpse	r25, r2
     238:	92 11       	cpse	r25, r2
     23a:	92 11       	cpse	r25, r2
     23c:	92 11       	cpse	r25, r2
     23e:	92 11       	cpse	r25, r2
     240:	92 11       	cpse	r25, r2
     242:	92 11       	cpse	r25, r2
     244:	5a 11       	cpse	r21, r10
     246:	92 11       	cpse	r25, r2
     248:	92 11       	cpse	r25, r2
     24a:	92 11       	cpse	r25, r2
     24c:	92 11       	cpse	r25, r2
     24e:	92 11       	cpse	r25, r2
     250:	92 11       	cpse	r25, r2
     252:	92 11       	cpse	r25, r2
     254:	6f 11       	cpse	r22, r15
     256:	92 11       	cpse	r25, r2
     258:	92 11       	cpse	r25, r2
     25a:	92 11       	cpse	r25, r2
     25c:	92 11       	cpse	r25, r2
     25e:	92 11       	cpse	r25, r2
     260:	92 11       	cpse	r25, r2
     262:	92 11       	cpse	r25, r2
     264:	89 11       	cpse	r24, r9
     266:	92 11       	cpse	r25, r2
     268:	92 11       	cpse	r25, r2
     26a:	92 11       	cpse	r25, r2
     26c:	92 11       	cpse	r25, r2
     26e:	92 11       	cpse	r25, r2
     270:	92 11       	cpse	r25, r2
     272:	92 11       	cpse	r25, r2
     274:	89 11       	cpse	r24, r9

00000276 <__trampolines_end>:
     276:	45 00       	.word	0x0045	; ????
     278:	00 82       	st	Z, r0
     27a:	00 00       	nop
     27c:	40 00       	.word	0x0040	; ????
     27e:	20 00       	Address 0x0000027e is out of bounds.
.word	0xffff	; ????

0000027f <_ZL9arpreqhdr>:
     27f:	00 01 08 00 06 04 00 01 00                          .........

00000288 <__ctors_start>:
     288:	f0 04       	cpc	r15, r0
     28a:	6f 0c       	add	r6, r15
     28c:	52 0d       	add	r21, r2
     28e:	34 0f       	add	r19, r20
     290:	03 13       	cpse	r16, r19
     292:	2d 1e       	adc	r2, r29
     294:	dc 22       	and	r13, r28
     296:	af 25       	eor	r26, r15

00000298 <__ctors_end>:
     298:	11 24       	eor	r1, r1
     29a:	1f be       	out	0x3f, r1	; 63
     29c:	cf ef       	ldi	r28, 0xFF	; 255
     29e:	d1 e2       	ldi	r29, 0x21	; 33
     2a0:	de bf       	out	0x3e, r29	; 62
     2a2:	cd bf       	out	0x3d, r28	; 61
     2a4:	00 e0       	ldi	r16, 0x00	; 0
     2a6:	0c bf       	out	0x3c, r16	; 60

000002a8 <__do_copy_data>:
     2a8:	14 e0       	ldi	r17, 0x04	; 4
     2aa:	a0 e0       	ldi	r26, 0x00	; 0
     2ac:	b2 e0       	ldi	r27, 0x02	; 2
     2ae:	ea ee       	ldi	r30, 0xEA	; 234
     2b0:	f4 e5       	ldi	r31, 0x54	; 84
     2b2:	00 e0       	ldi	r16, 0x00	; 0
     2b4:	0b bf       	out	0x3b, r16	; 59
     2b6:	02 c0       	rjmp	.+4      	; 0x2bc <__do_copy_data+0x14>
     2b8:	07 90       	elpm	r0, Z+
     2ba:	0d 92       	st	X+, r0
     2bc:	a8 3e       	cpi	r26, 0xE8	; 232
     2be:	b1 07       	cpc	r27, r17
     2c0:	d9 f7       	brne	.-10     	; 0x2b8 <__do_copy_data+0x10>

000002c2 <__do_clear_bss>:
     2c2:	2c e0       	ldi	r18, 0x0C	; 12
     2c4:	a8 ee       	ldi	r26, 0xE8	; 232
     2c6:	b4 e0       	ldi	r27, 0x04	; 4
     2c8:	01 c0       	rjmp	.+2      	; 0x2cc <.do_clear_bss_start>

000002ca <.do_clear_bss_loop>:
     2ca:	1d 92       	st	X+, r1

000002cc <.do_clear_bss_start>:
     2cc:	af 35       	cpi	r26, 0x5F	; 95
     2ce:	b2 07       	cpc	r27, r18
     2d0:	e1 f7       	brne	.-8      	; 0x2ca <.do_clear_bss_loop>

000002d2 <__do_global_ctors>:
     2d2:	11 e0       	ldi	r17, 0x01	; 1
     2d4:	cc e4       	ldi	r28, 0x4C	; 76
     2d6:	d1 e0       	ldi	r29, 0x01	; 1
     2d8:	00 e0       	ldi	r16, 0x00	; 0
     2da:	06 c0       	rjmp	.+12     	; 0x2e8 <__do_global_ctors+0x16>
     2dc:	21 97       	sbiw	r28, 0x01	; 1
     2de:	01 09       	sbc	r16, r1
     2e0:	80 2f       	mov	r24, r16
     2e2:	fe 01       	movw	r30, r28
     2e4:	0e 94 7b 29 	call	0x52f6	; 0x52f6 <__tablejump2__>
     2e8:	c4 34       	cpi	r28, 0x44	; 68
     2ea:	d1 07       	cpc	r29, r17
     2ec:	80 e0       	ldi	r24, 0x00	; 0
     2ee:	08 07       	cpc	r16, r24
     2f0:	a9 f7       	brne	.-22     	; 0x2dc <__do_global_ctors+0xa>
     2f2:	0e 94 b1 0b 	call	0x1762	; 0x1762 <main>
     2f6:	0c 94 73 2a 	jmp	0x54e6	; 0x54e6 <_exit>

000002fa <__bad_interrupt>:
     2fa:	82 ce       	rjmp	.-764    	; 0x0 <__vectors>

000002fc <_ZN15Adafruit_Sensor15enableAutoRangeEb>:

    setMode(lastMode);
    return true;
  }
  return false;
}
     2fc:	08 95       	ret

000002fe <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>:
     2fe:	0f 93       	push	r16
     300:	1f 93       	push	r17
     302:	cf 93       	push	r28
     304:	df 93       	push	r29
     306:	8c 01       	movw	r16, r24
     308:	eb 01       	movw	r28, r22
     30a:	88 e2       	ldi	r24, 0x28	; 40
     30c:	fb 01       	movw	r30, r22
     30e:	11 92       	st	Z+, r1
     310:	8a 95       	dec	r24
     312:	e9 f7       	brne	.-6      	; 0x30e <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x10>
     314:	4b e0       	ldi	r20, 0x0B	; 11
     316:	50 e0       	ldi	r21, 0x00	; 0
     318:	64 e1       	ldi	r22, 0x14	; 20
     31a:	72 e0       	ldi	r23, 0x02	; 2
     31c:	ce 01       	movw	r24, r28
     31e:	0e 94 64 2a 	call	0x54c8	; 0x54c8 <strncpy>
     322:	1b 86       	std	Y+11, r1	; 0x0b
     324:	81 e0       	ldi	r24, 0x01	; 1
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	a0 e0       	ldi	r26, 0x00	; 0
     32a:	b0 e0       	ldi	r27, 0x00	; 0
     32c:	8c 87       	std	Y+12, r24	; 0x0c
     32e:	9d 87       	std	Y+13, r25	; 0x0d
     330:	ae 87       	std	Y+14, r26	; 0x0e
     332:	bf 87       	std	Y+15, r27	; 0x0f
     334:	f8 01       	movw	r30, r16
     336:	86 81       	ldd	r24, Z+6	; 0x06
     338:	97 81       	ldd	r25, Z+7	; 0x07
     33a:	a0 85       	ldd	r26, Z+8	; 0x08
     33c:	b1 85       	ldd	r27, Z+9	; 0x09
     33e:	88 8b       	std	Y+16, r24	; 0x10
     340:	99 8b       	std	Y+17, r25	; 0x11
     342:	aa 8b       	std	Y+18, r26	; 0x12
     344:	bb 8b       	std	Y+19, r27	; 0x13
     346:	83 e0       	ldi	r24, 0x03	; 3
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	a0 e0       	ldi	r26, 0x00	; 0
     34c:	b0 e0       	ldi	r27, 0x00	; 0
     34e:	8c 8b       	std	Y+20, r24	; 0x14
     350:	9d 8b       	std	Y+21, r25	; 0x15
     352:	ae 8b       	std	Y+22, r26	; 0x16
     354:	bf 8b       	std	Y+23, r27	; 0x17
     356:	1c a2       	std	Y+36, r1	; 0x24
     358:	1d a2       	std	Y+37, r1	; 0x25
     35a:	1e a2       	std	Y+38, r1	; 0x26
     35c:	1f a2       	std	Y+39, r1	; 0x27
     35e:	18 8e       	std	Y+24, r1	; 0x18
     360:	19 8e       	std	Y+25, r1	; 0x19
     362:	1a 8e       	std	Y+26, r1	; 0x1a
     364:	1b 8e       	std	Y+27, r1	; 0x1b
     366:	1c 8e       	std	Y+28, r1	; 0x1c
     368:	1d 8e       	std	Y+29, r1	; 0x1d
     36a:	1e 8e       	std	Y+30, r1	; 0x1e
     36c:	1f 8e       	std	Y+31, r1	; 0x1f
     36e:	8a e0       	ldi	r24, 0x0A	; 10
     370:	97 ed       	ldi	r25, 0xD7	; 215
     372:	a3 e2       	ldi	r26, 0x23	; 35
     374:	bc e3       	ldi	r27, 0x3C	; 60
     376:	88 a3       	std	Y+32, r24	; 0x20
     378:	99 a3       	std	Y+33, r25	; 0x21
     37a:	aa a3       	std	Y+34, r26	; 0x22
     37c:	bb a3       	std	Y+35, r27	; 0x23
     37e:	df 91       	pop	r29
     380:	cf 91       	pop	r28
     382:	1f 91       	pop	r17
     384:	0f 91       	pop	r16
     386:	08 95       	ret

00000388 <_ZN15Adafruit_BNO055C1ElhP7TwoWire>:
     388:	0f 93       	push	r16
     38a:	1f 93       	push	r17
     38c:	fc 01       	movw	r30, r24
     38e:	8f e1       	ldi	r24, 0x1F	; 31
     390:	92 e0       	ldi	r25, 0x02	; 2
     392:	91 83       	std	Z+1, r25	; 0x01
     394:	80 83       	st	Z, r24
     396:	46 83       	std	Z+6, r20	; 0x06
     398:	57 83       	std	Z+7, r21	; 0x07
     39a:	60 87       	std	Z+8, r22	; 0x08
     39c:	71 87       	std	Z+9, r23	; 0x09
     39e:	23 83       	std	Z+3, r18	; 0x03
     3a0:	15 83       	std	Z+5, r17	; 0x05
     3a2:	04 83       	std	Z+4, r16	; 0x04
     3a4:	1f 91       	pop	r17
     3a6:	0f 91       	pop	r16
     3a8:	08 95       	ret

000003aa <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>:
     3aa:	0f 93       	push	r16
     3ac:	1f 93       	push	r17
     3ae:	cf 93       	push	r28
     3b0:	df 93       	push	r29
     3b2:	ec 01       	movw	r28, r24
     3b4:	06 2f       	mov	r16, r22
     3b6:	14 2f       	mov	r17, r20
     3b8:	6b 81       	ldd	r22, Y+3	; 0x03
     3ba:	8c 81       	ldd	r24, Y+4	; 0x04
     3bc:	9d 81       	ldd	r25, Y+5	; 0x05
     3be:	0e 94 77 12 	call	0x24ee	; 0x24ee <_ZN7TwoWire17beginTransmissionEh>
     3c2:	8c 81       	ldd	r24, Y+4	; 0x04
     3c4:	9d 81       	ldd	r25, Y+5	; 0x05
     3c6:	dc 01       	movw	r26, r24
     3c8:	ed 91       	ld	r30, X+
     3ca:	fc 91       	ld	r31, X
     3cc:	01 90       	ld	r0, Z+
     3ce:	f0 81       	ld	r31, Z
     3d0:	e0 2d       	mov	r30, r0
     3d2:	60 2f       	mov	r22, r16
     3d4:	19 95       	eicall
     3d6:	8c 81       	ldd	r24, Y+4	; 0x04
     3d8:	9d 81       	ldd	r25, Y+5	; 0x05
     3da:	dc 01       	movw	r26, r24
     3dc:	ed 91       	ld	r30, X+
     3de:	fc 91       	ld	r31, X
     3e0:	01 90       	ld	r0, Z+
     3e2:	f0 81       	ld	r31, Z
     3e4:	e0 2d       	mov	r30, r0
     3e6:	61 2f       	mov	r22, r17
     3e8:	19 95       	eicall
     3ea:	8c 81       	ldd	r24, Y+4	; 0x04
     3ec:	9d 81       	ldd	r25, Y+5	; 0x05
     3ee:	0e 94 00 13 	call	0x2600	; 0x2600 <_ZN7TwoWire15endTransmissionEv>
     3f2:	81 e0       	ldi	r24, 0x01	; 1
     3f4:	df 91       	pop	r29
     3f6:	cf 91       	pop	r28
     3f8:	1f 91       	pop	r17
     3fa:	0f 91       	pop	r16
     3fc:	08 95       	ret

000003fe <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>:
     3fe:	46 2f       	mov	r20, r22
     400:	fc 01       	movw	r30, r24
     402:	62 87       	std	Z+10, r22	; 0x0a
     404:	6d e3       	ldi	r22, 0x3D	; 61
     406:	d1 df       	rcall	.-94     	; 0x3aa <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     408:	ff ef       	ldi	r31, 0xFF	; 255
     40a:	26 e7       	ldi	r18, 0x76	; 118
     40c:	81 e0       	ldi	r24, 0x01	; 1
     40e:	f1 50       	subi	r31, 0x01	; 1
     410:	20 40       	sbci	r18, 0x00	; 0
     412:	80 40       	sbci	r24, 0x00	; 0
     414:	e1 f7       	brne	.-8      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     416:	00 c0       	rjmp	.+0      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     418:	00 00       	nop
     41a:	08 95       	ret

0000041c <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>:
     41c:	1f 93       	push	r17
     41e:	cf 93       	push	r28
     420:	df 93       	push	r29
     422:	ec 01       	movw	r28, r24
     424:	16 2f       	mov	r17, r22
     426:	6b 81       	ldd	r22, Y+3	; 0x03
     428:	8c 81       	ldd	r24, Y+4	; 0x04
     42a:	9d 81       	ldd	r25, Y+5	; 0x05
     42c:	0e 94 77 12 	call	0x24ee	; 0x24ee <_ZN7TwoWire17beginTransmissionEh>
     430:	8c 81       	ldd	r24, Y+4	; 0x04
     432:	9d 81       	ldd	r25, Y+5	; 0x05
     434:	dc 01       	movw	r26, r24
     436:	ed 91       	ld	r30, X+
     438:	fc 91       	ld	r31, X
     43a:	01 90       	ld	r0, Z+
     43c:	f0 81       	ld	r31, Z
     43e:	e0 2d       	mov	r30, r0
     440:	61 2f       	mov	r22, r17
     442:	19 95       	eicall
     444:	8c 81       	ldd	r24, Y+4	; 0x04
     446:	9d 81       	ldd	r25, Y+5	; 0x05
     448:	0e 94 00 13 	call	0x2600	; 0x2600 <_ZN7TwoWire15endTransmissionEv>
     44c:	41 e0       	ldi	r20, 0x01	; 1
     44e:	6b 81       	ldd	r22, Y+3	; 0x03
     450:	8c 81       	ldd	r24, Y+4	; 0x04
     452:	9d 81       	ldd	r25, Y+5	; 0x05
     454:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <_ZN7TwoWire11requestFromEhh>
     458:	8c 81       	ldd	r24, Y+4	; 0x04
     45a:	9d 81       	ldd	r25, Y+5	; 0x05
     45c:	dc 01       	movw	r26, r24
     45e:	ed 91       	ld	r30, X+
     460:	fc 91       	ld	r31, X
     462:	02 84       	ldd	r0, Z+10	; 0x0a
     464:	f3 85       	ldd	r31, Z+11	; 0x0b
     466:	e0 2d       	mov	r30, r0
     468:	19 95       	eicall
     46a:	df 91       	pop	r29
     46c:	cf 91       	pop	r28
     46e:	1f 91       	pop	r17
     470:	08 95       	ret

00000472 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>:
     472:	1f 93       	push	r17
     474:	cf 93       	push	r28
     476:	df 93       	push	r29
     478:	ec 01       	movw	r28, r24
     47a:	16 2f       	mov	r17, r22
     47c:	8c 81       	ldd	r24, Y+4	; 0x04
     47e:	9d 81       	ldd	r25, Y+5	; 0x05
     480:	0e 94 62 12 	call	0x24c4	; 0x24c4 <_ZN7TwoWire5beginEv>
     484:	60 e0       	ldi	r22, 0x00	; 0
     486:	ce 01       	movw	r24, r28
     488:	c9 df       	rcall	.-110    	; 0x41c <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
     48a:	80 3a       	cpi	r24, 0xA0	; 160
     48c:	79 f0       	breq	.+30     	; 0x4ac <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x3a>
     48e:	2f ef       	ldi	r18, 0xFF	; 255
     490:	83 ed       	ldi	r24, 0xD3	; 211
     492:	90 e3       	ldi	r25, 0x30	; 48
     494:	21 50       	subi	r18, 0x01	; 1
     496:	80 40       	sbci	r24, 0x00	; 0
     498:	90 40       	sbci	r25, 0x00	; 0
     49a:	e1 f7       	brne	.-8      	; 0x494 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x22>
     49c:	00 c0       	rjmp	.+0      	; 0x49e <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x2c>
     49e:	00 00       	nop
     4a0:	60 e0       	ldi	r22, 0x00	; 0
     4a2:	ce 01       	movw	r24, r28
     4a4:	bb df       	rcall	.-138    	; 0x41c <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
     4a6:	80 3a       	cpi	r24, 0xA0	; 160
     4a8:	09 f0       	breq	.+2      	; 0x4ac <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x3a>
     4aa:	4b c0       	rjmp	.+150    	; 0x542 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xd0>
     4ac:	60 e0       	ldi	r22, 0x00	; 0
     4ae:	ce 01       	movw	r24, r28
     4b0:	a6 df       	rcall	.-180    	; 0x3fe <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
     4b2:	40 e2       	ldi	r20, 0x20	; 32
     4b4:	6f e3       	ldi	r22, 0x3F	; 63
     4b6:	ce 01       	movw	r24, r28
     4b8:	78 df       	rcall	.-272    	; 0x3aa <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     4ba:	2f ef       	ldi	r18, 0xFF	; 255
     4bc:	86 e7       	ldi	r24, 0x76	; 118
     4be:	91 e0       	ldi	r25, 0x01	; 1
     4c0:	21 50       	subi	r18, 0x01	; 1
     4c2:	80 40       	sbci	r24, 0x00	; 0
     4c4:	90 40       	sbci	r25, 0x00	; 0
     4c6:	e1 f7       	brne	.-8      	; 0x4c0 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x4e>
     4c8:	00 c0       	rjmp	.+0      	; 0x4ca <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x58>
     4ca:	00 00       	nop
     4cc:	60 e0       	ldi	r22, 0x00	; 0
     4ce:	ce 01       	movw	r24, r28
     4d0:	a5 df       	rcall	.-182    	; 0x41c <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
     4d2:	80 3a       	cpi	r24, 0xA0	; 160
     4d4:	39 f0       	breq	.+14     	; 0x4e4 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x72>
     4d6:	8f e3       	ldi	r24, 0x3F	; 63
     4d8:	9c e9       	ldi	r25, 0x9C	; 156
     4da:	01 97       	sbiw	r24, 0x01	; 1
     4dc:	f1 f7       	brne	.-4      	; 0x4da <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x68>
     4de:	00 c0       	rjmp	.+0      	; 0x4e0 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x6e>
     4e0:	00 00       	nop
     4e2:	f4 cf       	rjmp	.-24     	; 0x4cc <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x5a>
     4e4:	9f ef       	ldi	r25, 0xFF	; 255
     4e6:	20 e7       	ldi	r18, 0x70	; 112
     4e8:	82 e0       	ldi	r24, 0x02	; 2
     4ea:	91 50       	subi	r25, 0x01	; 1
     4ec:	20 40       	sbci	r18, 0x00	; 0
     4ee:	80 40       	sbci	r24, 0x00	; 0
     4f0:	e1 f7       	brne	.-8      	; 0x4ea <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x78>
     4f2:	00 c0       	rjmp	.+0      	; 0x4f4 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x82>
     4f4:	00 00       	nop
     4f6:	40 e0       	ldi	r20, 0x00	; 0
     4f8:	6e e3       	ldi	r22, 0x3E	; 62
     4fa:	ce 01       	movw	r24, r28
     4fc:	56 df       	rcall	.-340    	; 0x3aa <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     4fe:	8f e3       	ldi	r24, 0x3F	; 63
     500:	9c e9       	ldi	r25, 0x9C	; 156
     502:	01 97       	sbiw	r24, 0x01	; 1
     504:	f1 f7       	brne	.-4      	; 0x502 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x90>
     506:	00 c0       	rjmp	.+0      	; 0x508 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x96>
     508:	00 00       	nop
     50a:	40 e0       	ldi	r20, 0x00	; 0
     50c:	67 e0       	ldi	r22, 0x07	; 7
     50e:	ce 01       	movw	r24, r28
     510:	4c df       	rcall	.-360    	; 0x3aa <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     512:	40 e0       	ldi	r20, 0x00	; 0
     514:	6f e3       	ldi	r22, 0x3F	; 63
     516:	ce 01       	movw	r24, r28
     518:	48 df       	rcall	.-368    	; 0x3aa <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     51a:	8f e3       	ldi	r24, 0x3F	; 63
     51c:	9c e9       	ldi	r25, 0x9C	; 156
     51e:	01 97       	sbiw	r24, 0x01	; 1
     520:	f1 f7       	brne	.-4      	; 0x51e <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xac>
     522:	00 c0       	rjmp	.+0      	; 0x524 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xb2>
     524:	00 00       	nop
     526:	61 2f       	mov	r22, r17
     528:	ce 01       	movw	r24, r28
     52a:	69 df       	rcall	.-302    	; 0x3fe <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
     52c:	9f ef       	ldi	r25, 0xFF	; 255
     52e:	29 ef       	ldi	r18, 0xF9	; 249
     530:	80 e0       	ldi	r24, 0x00	; 0
     532:	91 50       	subi	r25, 0x01	; 1
     534:	20 40       	sbci	r18, 0x00	; 0
     536:	80 40       	sbci	r24, 0x00	; 0
     538:	e1 f7       	brne	.-8      	; 0x532 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xc0>
     53a:	00 c0       	rjmp	.+0      	; 0x53c <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xca>
     53c:	00 00       	nop
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	01 c0       	rjmp	.+2      	; 0x544 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xd2>
     542:	80 e0       	ldi	r24, 0x00	; 0
     544:	df 91       	pop	r29
     546:	cf 91       	pop	r28
     548:	1f 91       	pop	r17
     54a:	08 95       	ret

0000054c <_ZN15Adafruit_BNO0557getTempEv>:
     54c:	64 e3       	ldi	r22, 0x34	; 52
     54e:	66 cf       	rjmp	.-308    	; 0x41c <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
     550:	08 95       	ret

00000552 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>:
     552:	cf 92       	push	r12
     554:	df 92       	push	r13
     556:	ef 92       	push	r14
     558:	ff 92       	push	r15
     55a:	0f 93       	push	r16
     55c:	1f 93       	push	r17
     55e:	cf 93       	push	r28
     560:	df 93       	push	r29
     562:	7c 01       	movw	r14, r24
     564:	c6 2f       	mov	r28, r22
     566:	6a 01       	movw	r12, r20
     568:	12 2f       	mov	r17, r18
     56a:	dc 01       	movw	r26, r24
     56c:	13 96       	adiw	r26, 0x03	; 3
     56e:	6c 91       	ld	r22, X
     570:	13 97       	sbiw	r26, 0x03	; 3
     572:	14 96       	adiw	r26, 0x04	; 4
     574:	8d 91       	ld	r24, X+
     576:	9c 91       	ld	r25, X
     578:	15 97       	sbiw	r26, 0x05	; 5
     57a:	0e 94 77 12 	call	0x24ee	; 0x24ee <_ZN7TwoWire17beginTransmissionEh>
     57e:	f7 01       	movw	r30, r14
     580:	84 81       	ldd	r24, Z+4	; 0x04
     582:	95 81       	ldd	r25, Z+5	; 0x05
     584:	dc 01       	movw	r26, r24
     586:	ed 91       	ld	r30, X+
     588:	fc 91       	ld	r31, X
     58a:	01 90       	ld	r0, Z+
     58c:	f0 81       	ld	r31, Z
     58e:	e0 2d       	mov	r30, r0
     590:	6c 2f       	mov	r22, r28
     592:	19 95       	eicall
     594:	f7 01       	movw	r30, r14
     596:	84 81       	ldd	r24, Z+4	; 0x04
     598:	95 81       	ldd	r25, Z+5	; 0x05
     59a:	0e 94 00 13 	call	0x2600	; 0x2600 <_ZN7TwoWire15endTransmissionEv>
     59e:	41 2f       	mov	r20, r17
     5a0:	d7 01       	movw	r26, r14
     5a2:	13 96       	adiw	r26, 0x03	; 3
     5a4:	6c 91       	ld	r22, X
     5a6:	13 97       	sbiw	r26, 0x03	; 3
     5a8:	14 96       	adiw	r26, 0x04	; 4
     5aa:	8d 91       	ld	r24, X+
     5ac:	9c 91       	ld	r25, X
     5ae:	15 97       	sbiw	r26, 0x05	; 5
     5b0:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <_ZN7TwoWire11requestFromEhh>
     5b4:	11 23       	and	r17, r17
     5b6:	b1 f0       	breq	.+44     	; 0x5e4 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh+0x92>
     5b8:	e6 01       	movw	r28, r12
     5ba:	11 50       	subi	r17, 0x01	; 1
     5bc:	01 2f       	mov	r16, r17
     5be:	10 e0       	ldi	r17, 0x00	; 0
     5c0:	0f 5f       	subi	r16, 0xFF	; 255
     5c2:	1f 4f       	sbci	r17, 0xFF	; 255
     5c4:	0c 0d       	add	r16, r12
     5c6:	1d 1d       	adc	r17, r13
     5c8:	f7 01       	movw	r30, r14
     5ca:	84 81       	ldd	r24, Z+4	; 0x04
     5cc:	95 81       	ldd	r25, Z+5	; 0x05
     5ce:	dc 01       	movw	r26, r24
     5d0:	ed 91       	ld	r30, X+
     5d2:	fc 91       	ld	r31, X
     5d4:	02 84       	ldd	r0, Z+10	; 0x0a
     5d6:	f3 85       	ldd	r31, Z+11	; 0x0b
     5d8:	e0 2d       	mov	r30, r0
     5da:	19 95       	eicall
     5dc:	89 93       	st	Y+, r24
     5de:	c0 17       	cp	r28, r16
     5e0:	d1 07       	cpc	r29, r17
     5e2:	91 f7       	brne	.-28     	; 0x5c8 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh+0x76>
     5e4:	81 e0       	ldi	r24, 0x01	; 1
     5e6:	df 91       	pop	r29
     5e8:	cf 91       	pop	r28
     5ea:	1f 91       	pop	r17
     5ec:	0f 91       	pop	r16
     5ee:	ff 90       	pop	r15
     5f0:	ef 90       	pop	r14
     5f2:	df 90       	pop	r13
     5f4:	cf 90       	pop	r12
     5f6:	08 95       	ret

000005f8 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tEPh>:
     5f8:	26 e0       	ldi	r18, 0x06	; 6
     5fa:	ab df       	rcall	.-170    	; 0x552 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>
     5fc:	86 e0       	ldi	r24, 0x06	; 6
     5fe:	08 95       	ret

00000600 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>:
 *            VECTOR_EULER
 *            VECTOR_LINEARACCEL
 *            VECTOR_GRAVITY]
 *  @return  vector from specified source
 */
AdafruitImu::Vector<3> Adafruit_BNO055::getVector(adafruit_vector_type_t vector_type) {
     600:	af 92       	push	r10
     602:	bf 92       	push	r11
     604:	cf 92       	push	r12
     606:	df 92       	push	r13
     608:	ff 92       	push	r15
     60a:	0f 93       	push	r16
     60c:	1f 93       	push	r17
     60e:	cf 93       	push	r28
     610:	df 93       	push	r29
     612:	00 d0       	rcall	.+0      	; 0x614 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x14>
     614:	00 d0       	rcall	.+0      	; 0x616 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x16>
     616:	cd b7       	in	r28, 0x3d	; 61
     618:	de b7       	in	r29, 0x3e	; 62
     61a:	8c 01       	movw	r16, r24
     61c:	cb 01       	movw	r24, r22
     61e:	f4 2e       	mov	r15, r20
	template <uint8_t N> class Vector
	{
		public:
		Vector()
		{
			memset(p_vec, 0, sizeof(double)*N);
     620:	2c e0       	ldi	r18, 0x0C	; 12
     622:	f8 01       	movw	r30, r16
     624:	11 92       	st	Z+, r1
     626:	2a 95       	dec	r18
     628:	e9 f7       	brne	.-6      	; 0x624 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x24>
  AdafruitImu::Vector<3> xyz;
  uint8_t buffer[6];
  memset(buffer, 0, 6);
     62a:	ae 01       	movw	r20, r28
     62c:	4f 5f       	subi	r20, 0xFF	; 255
     62e:	5f 4f       	sbci	r21, 0xFF	; 255
     630:	26 e0       	ldi	r18, 0x06	; 6
     632:	fa 01       	movw	r30, r20
     634:	11 92       	st	Z+, r1
     636:	2a 95       	dec	r18
     638:	e9 f7       	brne	.-6      	; 0x634 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x34>

  int16_t x, y, z;
  x = y = z = 0;

  /* Read vector data (6 bytes) */
  readLen((adafruit_bno055_reg_t)vector_type, buffer, 6);
     63a:	26 e0       	ldi	r18, 0x06	; 6
     63c:	6f 2d       	mov	r22, r15
     63e:	89 df       	rcall	.-238    	; 0x552 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>

  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
     640:	6a 81       	ldd	r22, Y+2	; 0x02
     642:	70 e0       	ldi	r23, 0x00	; 0
     644:	76 2f       	mov	r23, r22
     646:	66 27       	eor	r22, r22
     648:	89 81       	ldd	r24, Y+1	; 0x01
     64a:	68 2b       	or	r22, r24
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
     64c:	8c 81       	ldd	r24, Y+4	; 0x04
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	98 2f       	mov	r25, r24
     652:	88 27       	eor	r24, r24
     654:	2b 81       	ldd	r18, Y+3	; 0x03
     656:	6c 01       	movw	r12, r24
     658:	c2 2a       	or	r12, r18
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
     65a:	8e 81       	ldd	r24, Y+6	; 0x06
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	98 2f       	mov	r25, r24
     660:	88 27       	eor	r24, r24
     662:	2d 81       	ldd	r18, Y+5	; 0x05
     664:	5c 01       	movw	r10, r24
     666:	a2 2a       	or	r10, r18

  /*!
   * Convert the value to an appropriate range (section 3.6.4)
   * and assign the value to the Vector type
   */
  switch (vector_type) {
     668:	f4 e1       	ldi	r31, 0x14	; 20
     66a:	ff 16       	cp	r15, r31
     66c:	09 f4       	brne	.+2      	; 0x670 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x70>
     66e:	4a c0       	rjmp	.+148    	; 0x704 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x104>
     670:	ff 15       	cp	r31, r15
     672:	40 f0       	brcs	.+16     	; 0x684 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x84>
     674:	88 e0       	ldi	r24, 0x08	; 8
     676:	f8 16       	cp	r15, r24
     678:	09 f4       	brne	.+2      	; 0x67c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x7c>
     67a:	ac c0       	rjmp	.+344    	; 0x7d4 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x1d4>
     67c:	ee e0       	ldi	r30, 0x0E	; 14
     67e:	fe 16       	cp	r15, r30
     680:	69 f0       	breq	.+26     	; 0x69c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x9c>
     682:	43 c1       	rjmp	.+646    	; 0x90a <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
     684:	f8 e2       	ldi	r31, 0x28	; 40
     686:	ff 16       	cp	r15, r31
     688:	09 f4       	brne	.+2      	; 0x68c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x8c>
     68a:	d8 c0       	rjmp	.+432    	; 0x83c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x23c>
     68c:	8e e2       	ldi	r24, 0x2E	; 46
     68e:	f8 16       	cp	r15, r24
     690:	09 f4       	brne	.+2      	; 0x694 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x94>
     692:	08 c1       	rjmp	.+528    	; 0x8a4 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x2a4>
     694:	ea e1       	ldi	r30, 0x1A	; 26
     696:	fe 12       	cpse	r15, r30
     698:	38 c1       	rjmp	.+624    	; 0x90a <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
     69a:	68 c0       	rjmp	.+208    	; 0x76c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x16c>
  case VECTOR_MAGNETOMETER:
    /* 1uT = 16 LSB */
    xyz[0] = ((double)x) / 16.0;
     69c:	07 2e       	mov	r0, r23
     69e:	00 0c       	add	r0, r0
     6a0:	88 0b       	sbc	r24, r24
     6a2:	99 0b       	sbc	r25, r25
     6a4:	0e 94 33 28 	call	0x5066	; 0x5066 <__floatsisf>
     6a8:	20 e0       	ldi	r18, 0x00	; 0
     6aa:	30 e0       	ldi	r19, 0x00	; 0
     6ac:	40 e8       	ldi	r20, 0x80	; 128
     6ae:	5d e3       	ldi	r21, 0x3D	; 61
     6b0:	0e 94 e7 28 	call	0x51ce	; 0x51ce <__mulsf3>
     6b4:	f8 01       	movw	r30, r16
     6b6:	60 83       	st	Z, r22
     6b8:	71 83       	std	Z+1, r23	; 0x01
     6ba:	82 83       	std	Z+2, r24	; 0x02
     6bc:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 16.0;
     6be:	b6 01       	movw	r22, r12
     6c0:	dd 0c       	add	r13, r13
     6c2:	88 0b       	sbc	r24, r24
     6c4:	99 0b       	sbc	r25, r25
     6c6:	0e 94 33 28 	call	0x5066	; 0x5066 <__floatsisf>
     6ca:	20 e0       	ldi	r18, 0x00	; 0
     6cc:	30 e0       	ldi	r19, 0x00	; 0
     6ce:	40 e8       	ldi	r20, 0x80	; 128
     6d0:	5d e3       	ldi	r21, 0x3D	; 61
     6d2:	0e 94 e7 28 	call	0x51ce	; 0x51ce <__mulsf3>
     6d6:	f8 01       	movw	r30, r16
     6d8:	64 83       	std	Z+4, r22	; 0x04
     6da:	75 83       	std	Z+5, r23	; 0x05
     6dc:	86 83       	std	Z+6, r24	; 0x06
     6de:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 16.0;
     6e0:	b5 01       	movw	r22, r10
     6e2:	bb 0c       	add	r11, r11
     6e4:	88 0b       	sbc	r24, r24
     6e6:	99 0b       	sbc	r25, r25
     6e8:	0e 94 33 28 	call	0x5066	; 0x5066 <__floatsisf>
     6ec:	20 e0       	ldi	r18, 0x00	; 0
     6ee:	30 e0       	ldi	r19, 0x00	; 0
     6f0:	40 e8       	ldi	r20, 0x80	; 128
     6f2:	5d e3       	ldi	r21, 0x3D	; 61
     6f4:	0e 94 e7 28 	call	0x51ce	; 0x51ce <__mulsf3>
     6f8:	f8 01       	movw	r30, r16
     6fa:	60 87       	std	Z+8, r22	; 0x08
     6fc:	71 87       	std	Z+9, r23	; 0x09
     6fe:	82 87       	std	Z+10, r24	; 0x0a
     700:	93 87       	std	Z+11, r25	; 0x0b
    break;
     702:	03 c1       	rjmp	.+518    	; 0x90a <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_GYROSCOPE:
    /* 1dps = 16 LSB */
    xyz[0] = ((double)x) / 16.0;
     704:	07 2e       	mov	r0, r23
     706:	00 0c       	add	r0, r0
     708:	88 0b       	sbc	r24, r24
     70a:	99 0b       	sbc	r25, r25
     70c:	0e 94 33 28 	call	0x5066	; 0x5066 <__floatsisf>
     710:	20 e0       	ldi	r18, 0x00	; 0
     712:	30 e0       	ldi	r19, 0x00	; 0
     714:	40 e8       	ldi	r20, 0x80	; 128
     716:	5d e3       	ldi	r21, 0x3D	; 61
     718:	0e 94 e7 28 	call	0x51ce	; 0x51ce <__mulsf3>
     71c:	f8 01       	movw	r30, r16
     71e:	60 83       	st	Z, r22
     720:	71 83       	std	Z+1, r23	; 0x01
     722:	82 83       	std	Z+2, r24	; 0x02
     724:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 16.0;
     726:	b6 01       	movw	r22, r12
     728:	dd 0c       	add	r13, r13
     72a:	88 0b       	sbc	r24, r24
     72c:	99 0b       	sbc	r25, r25
     72e:	0e 94 33 28 	call	0x5066	; 0x5066 <__floatsisf>
     732:	20 e0       	ldi	r18, 0x00	; 0
     734:	30 e0       	ldi	r19, 0x00	; 0
     736:	40 e8       	ldi	r20, 0x80	; 128
     738:	5d e3       	ldi	r21, 0x3D	; 61
     73a:	0e 94 e7 28 	call	0x51ce	; 0x51ce <__mulsf3>
     73e:	f8 01       	movw	r30, r16
     740:	64 83       	std	Z+4, r22	; 0x04
     742:	75 83       	std	Z+5, r23	; 0x05
     744:	86 83       	std	Z+6, r24	; 0x06
     746:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 16.0;
     748:	b5 01       	movw	r22, r10
     74a:	bb 0c       	add	r11, r11
     74c:	88 0b       	sbc	r24, r24
     74e:	99 0b       	sbc	r25, r25
     750:	0e 94 33 28 	call	0x5066	; 0x5066 <__floatsisf>
     754:	20 e0       	ldi	r18, 0x00	; 0
     756:	30 e0       	ldi	r19, 0x00	; 0
     758:	40 e8       	ldi	r20, 0x80	; 128
     75a:	5d e3       	ldi	r21, 0x3D	; 61
     75c:	0e 94 e7 28 	call	0x51ce	; 0x51ce <__mulsf3>
     760:	f8 01       	movw	r30, r16
     762:	60 87       	std	Z+8, r22	; 0x08
     764:	71 87       	std	Z+9, r23	; 0x09
     766:	82 87       	std	Z+10, r24	; 0x0a
     768:	93 87       	std	Z+11, r25	; 0x0b
    break;
     76a:	cf c0       	rjmp	.+414    	; 0x90a <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_EULER:
    /* 1 degree = 16 LSB */
    xyz[0] = ((double)x) / 16.0;
     76c:	07 2e       	mov	r0, r23
     76e:	00 0c       	add	r0, r0
     770:	88 0b       	sbc	r24, r24
     772:	99 0b       	sbc	r25, r25
     774:	0e 94 33 28 	call	0x5066	; 0x5066 <__floatsisf>
     778:	20 e0       	ldi	r18, 0x00	; 0
     77a:	30 e0       	ldi	r19, 0x00	; 0
     77c:	40 e8       	ldi	r20, 0x80	; 128
     77e:	5d e3       	ldi	r21, 0x3D	; 61
     780:	0e 94 e7 28 	call	0x51ce	; 0x51ce <__mulsf3>
     784:	f8 01       	movw	r30, r16
     786:	60 83       	st	Z, r22
     788:	71 83       	std	Z+1, r23	; 0x01
     78a:	82 83       	std	Z+2, r24	; 0x02
     78c:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 16.0;
     78e:	b6 01       	movw	r22, r12
     790:	dd 0c       	add	r13, r13
     792:	88 0b       	sbc	r24, r24
     794:	99 0b       	sbc	r25, r25
     796:	0e 94 33 28 	call	0x5066	; 0x5066 <__floatsisf>
     79a:	20 e0       	ldi	r18, 0x00	; 0
     79c:	30 e0       	ldi	r19, 0x00	; 0
     79e:	40 e8       	ldi	r20, 0x80	; 128
     7a0:	5d e3       	ldi	r21, 0x3D	; 61
     7a2:	0e 94 e7 28 	call	0x51ce	; 0x51ce <__mulsf3>
     7a6:	f8 01       	movw	r30, r16
     7a8:	64 83       	std	Z+4, r22	; 0x04
     7aa:	75 83       	std	Z+5, r23	; 0x05
     7ac:	86 83       	std	Z+6, r24	; 0x06
     7ae:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 16.0;
     7b0:	b5 01       	movw	r22, r10
     7b2:	bb 0c       	add	r11, r11
     7b4:	88 0b       	sbc	r24, r24
     7b6:	99 0b       	sbc	r25, r25
     7b8:	0e 94 33 28 	call	0x5066	; 0x5066 <__floatsisf>
     7bc:	20 e0       	ldi	r18, 0x00	; 0
     7be:	30 e0       	ldi	r19, 0x00	; 0
     7c0:	40 e8       	ldi	r20, 0x80	; 128
     7c2:	5d e3       	ldi	r21, 0x3D	; 61
     7c4:	0e 94 e7 28 	call	0x51ce	; 0x51ce <__mulsf3>
     7c8:	f8 01       	movw	r30, r16
     7ca:	60 87       	std	Z+8, r22	; 0x08
     7cc:	71 87       	std	Z+9, r23	; 0x09
     7ce:	82 87       	std	Z+10, r24	; 0x0a
     7d0:	93 87       	std	Z+11, r25	; 0x0b
    break;
     7d2:	9b c0       	rjmp	.+310    	; 0x90a <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_ACCELEROMETER:
    /* 1m/s^2 = 100 LSB */
    xyz[0] = ((double)x) / 100.0;
     7d4:	07 2e       	mov	r0, r23
     7d6:	00 0c       	add	r0, r0
     7d8:	88 0b       	sbc	r24, r24
     7da:	99 0b       	sbc	r25, r25
     7dc:	0e 94 33 28 	call	0x5066	; 0x5066 <__floatsisf>
     7e0:	20 e0       	ldi	r18, 0x00	; 0
     7e2:	30 e0       	ldi	r19, 0x00	; 0
     7e4:	48 ec       	ldi	r20, 0xC8	; 200
     7e6:	52 e4       	ldi	r21, 0x42	; 66
     7e8:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <__divsf3>
     7ec:	f8 01       	movw	r30, r16
     7ee:	60 83       	st	Z, r22
     7f0:	71 83       	std	Z+1, r23	; 0x01
     7f2:	82 83       	std	Z+2, r24	; 0x02
     7f4:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 100.0;
     7f6:	b6 01       	movw	r22, r12
     7f8:	dd 0c       	add	r13, r13
     7fa:	88 0b       	sbc	r24, r24
     7fc:	99 0b       	sbc	r25, r25
     7fe:	0e 94 33 28 	call	0x5066	; 0x5066 <__floatsisf>
     802:	20 e0       	ldi	r18, 0x00	; 0
     804:	30 e0       	ldi	r19, 0x00	; 0
     806:	48 ec       	ldi	r20, 0xC8	; 200
     808:	52 e4       	ldi	r21, 0x42	; 66
     80a:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <__divsf3>
     80e:	f8 01       	movw	r30, r16
     810:	64 83       	std	Z+4, r22	; 0x04
     812:	75 83       	std	Z+5, r23	; 0x05
     814:	86 83       	std	Z+6, r24	; 0x06
     816:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 100.0;
     818:	b5 01       	movw	r22, r10
     81a:	bb 0c       	add	r11, r11
     81c:	88 0b       	sbc	r24, r24
     81e:	99 0b       	sbc	r25, r25
     820:	0e 94 33 28 	call	0x5066	; 0x5066 <__floatsisf>
     824:	20 e0       	ldi	r18, 0x00	; 0
     826:	30 e0       	ldi	r19, 0x00	; 0
     828:	48 ec       	ldi	r20, 0xC8	; 200
     82a:	52 e4       	ldi	r21, 0x42	; 66
     82c:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <__divsf3>
     830:	f8 01       	movw	r30, r16
     832:	60 87       	std	Z+8, r22	; 0x08
     834:	71 87       	std	Z+9, r23	; 0x09
     836:	82 87       	std	Z+10, r24	; 0x0a
     838:	93 87       	std	Z+11, r25	; 0x0b
    break;
     83a:	67 c0       	rjmp	.+206    	; 0x90a <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_LINEARACCEL:
    /* 1m/s^2 = 100 LSB */
    xyz[0] = ((double)x) / 100.0;
     83c:	07 2e       	mov	r0, r23
     83e:	00 0c       	add	r0, r0
     840:	88 0b       	sbc	r24, r24
     842:	99 0b       	sbc	r25, r25
     844:	0e 94 33 28 	call	0x5066	; 0x5066 <__floatsisf>
     848:	20 e0       	ldi	r18, 0x00	; 0
     84a:	30 e0       	ldi	r19, 0x00	; 0
     84c:	48 ec       	ldi	r20, 0xC8	; 200
     84e:	52 e4       	ldi	r21, 0x42	; 66
     850:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <__divsf3>
     854:	f8 01       	movw	r30, r16
     856:	60 83       	st	Z, r22
     858:	71 83       	std	Z+1, r23	; 0x01
     85a:	82 83       	std	Z+2, r24	; 0x02
     85c:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 100.0;
     85e:	b6 01       	movw	r22, r12
     860:	dd 0c       	add	r13, r13
     862:	88 0b       	sbc	r24, r24
     864:	99 0b       	sbc	r25, r25
     866:	0e 94 33 28 	call	0x5066	; 0x5066 <__floatsisf>
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	48 ec       	ldi	r20, 0xC8	; 200
     870:	52 e4       	ldi	r21, 0x42	; 66
     872:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <__divsf3>
     876:	f8 01       	movw	r30, r16
     878:	64 83       	std	Z+4, r22	; 0x04
     87a:	75 83       	std	Z+5, r23	; 0x05
     87c:	86 83       	std	Z+6, r24	; 0x06
     87e:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 100.0;
     880:	b5 01       	movw	r22, r10
     882:	bb 0c       	add	r11, r11
     884:	88 0b       	sbc	r24, r24
     886:	99 0b       	sbc	r25, r25
     888:	0e 94 33 28 	call	0x5066	; 0x5066 <__floatsisf>
     88c:	20 e0       	ldi	r18, 0x00	; 0
     88e:	30 e0       	ldi	r19, 0x00	; 0
     890:	48 ec       	ldi	r20, 0xC8	; 200
     892:	52 e4       	ldi	r21, 0x42	; 66
     894:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <__divsf3>
     898:	f8 01       	movw	r30, r16
     89a:	60 87       	std	Z+8, r22	; 0x08
     89c:	71 87       	std	Z+9, r23	; 0x09
     89e:	82 87       	std	Z+10, r24	; 0x0a
     8a0:	93 87       	std	Z+11, r25	; 0x0b
    break;
     8a2:	33 c0       	rjmp	.+102    	; 0x90a <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_GRAVITY:
    /* 1m/s^2 = 100 LSB */
    xyz[0] = ((double)x) / 100.0;
     8a4:	07 2e       	mov	r0, r23
     8a6:	00 0c       	add	r0, r0
     8a8:	88 0b       	sbc	r24, r24
     8aa:	99 0b       	sbc	r25, r25
     8ac:	0e 94 33 28 	call	0x5066	; 0x5066 <__floatsisf>
     8b0:	20 e0       	ldi	r18, 0x00	; 0
     8b2:	30 e0       	ldi	r19, 0x00	; 0
     8b4:	48 ec       	ldi	r20, 0xC8	; 200
     8b6:	52 e4       	ldi	r21, 0x42	; 66
     8b8:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <__divsf3>
     8bc:	f8 01       	movw	r30, r16
     8be:	60 83       	st	Z, r22
     8c0:	71 83       	std	Z+1, r23	; 0x01
     8c2:	82 83       	std	Z+2, r24	; 0x02
     8c4:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 100.0;
     8c6:	b6 01       	movw	r22, r12
     8c8:	dd 0c       	add	r13, r13
     8ca:	88 0b       	sbc	r24, r24
     8cc:	99 0b       	sbc	r25, r25
     8ce:	0e 94 33 28 	call	0x5066	; 0x5066 <__floatsisf>
     8d2:	20 e0       	ldi	r18, 0x00	; 0
     8d4:	30 e0       	ldi	r19, 0x00	; 0
     8d6:	48 ec       	ldi	r20, 0xC8	; 200
     8d8:	52 e4       	ldi	r21, 0x42	; 66
     8da:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <__divsf3>
     8de:	f8 01       	movw	r30, r16
     8e0:	64 83       	std	Z+4, r22	; 0x04
     8e2:	75 83       	std	Z+5, r23	; 0x05
     8e4:	86 83       	std	Z+6, r24	; 0x06
     8e6:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 100.0;
     8e8:	b5 01       	movw	r22, r10
     8ea:	bb 0c       	add	r11, r11
     8ec:	88 0b       	sbc	r24, r24
     8ee:	99 0b       	sbc	r25, r25
     8f0:	0e 94 33 28 	call	0x5066	; 0x5066 <__floatsisf>
     8f4:	20 e0       	ldi	r18, 0x00	; 0
     8f6:	30 e0       	ldi	r19, 0x00	; 0
     8f8:	48 ec       	ldi	r20, 0xC8	; 200
     8fa:	52 e4       	ldi	r21, 0x42	; 66
     8fc:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <__divsf3>
     900:	f8 01       	movw	r30, r16
     902:	60 87       	std	Z+8, r22	; 0x08
     904:	71 87       	std	Z+9, r23	; 0x09
     906:	82 87       	std	Z+10, r24	; 0x0a
     908:	93 87       	std	Z+11, r25	; 0x0b
    break;
  }

  return xyz;
}
     90a:	c8 01       	movw	r24, r16
     90c:	26 96       	adiw	r28, 0x06	; 6
     90e:	0f b6       	in	r0, 0x3f	; 63
     910:	f8 94       	cli
     912:	de bf       	out	0x3e, r29	; 62
     914:	0f be       	out	0x3f, r0	; 63
     916:	cd bf       	out	0x3d, r28	; 61
     918:	df 91       	pop	r29
     91a:	cf 91       	pop	r28
     91c:	1f 91       	pop	r17
     91e:	0f 91       	pop	r16
     920:	ff 90       	pop	r15
     922:	df 90       	pop	r13
     924:	cf 90       	pop	r12
     926:	bf 90       	pop	r11
     928:	af 90       	pop	r10
     92a:	08 95       	ret

0000092c <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>:
/*!
 *  @brief  Reads the sensor and returns the data as a sensors_event_t
 *  @param  event
 *  @return always returns true
 */
bool Adafruit_BNO055::getEvent(sensors_event_t *event) {
     92c:	0f 93       	push	r16
     92e:	1f 93       	push	r17
     930:	cf 93       	push	r28
     932:	df 93       	push	r29
     934:	cd b7       	in	r28, 0x3d	; 61
     936:	de b7       	in	r29, 0x3e	; 62
     938:	2c 97       	sbiw	r28, 0x0c	; 12
     93a:	0f b6       	in	r0, 0x3f	; 63
     93c:	f8 94       	cli
     93e:	de bf       	out	0x3e, r29	; 62
     940:	0f be       	out	0x3f, r0	; 63
     942:	cd bf       	out	0x3d, r28	; 61
     944:	8b 01       	movw	r16, r22
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
     946:	20 e2       	ldi	r18, 0x20	; 32
     948:	fb 01       	movw	r30, r22
     94a:	11 92       	st	Z+, r1
     94c:	2a 95       	dec	r18
     94e:	e9 f7       	brne	.-6      	; 0x94a <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t+0x1e>

  event->version = sizeof(sensors_event_t);
     950:	40 e2       	ldi	r20, 0x20	; 32
     952:	50 e0       	ldi	r21, 0x00	; 0
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	f8 01       	movw	r30, r16
     95a:	40 83       	st	Z, r20
     95c:	51 83       	std	Z+1, r21	; 0x01
     95e:	62 83       	std	Z+2, r22	; 0x02
     960:	73 83       	std	Z+3, r23	; 0x03
  event->sensor_id = _sensorID;
     962:	fc 01       	movw	r30, r24
     964:	46 81       	ldd	r20, Z+6	; 0x06
     966:	57 81       	ldd	r21, Z+7	; 0x07
     968:	60 85       	ldd	r22, Z+8	; 0x08
     96a:	71 85       	ldd	r23, Z+9	; 0x09
     96c:	f8 01       	movw	r30, r16
     96e:	44 83       	std	Z+4, r20	; 0x04
     970:	55 83       	std	Z+5, r21	; 0x05
     972:	66 83       	std	Z+6, r22	; 0x06
     974:	77 83       	std	Z+7, r23	; 0x07
  event->type = SENSOR_TYPE_ORIENTATION;
     976:	43 e0       	ldi	r20, 0x03	; 3
     978:	50 e0       	ldi	r21, 0x00	; 0
     97a:	60 e0       	ldi	r22, 0x00	; 0
     97c:	70 e0       	ldi	r23, 0x00	; 0
     97e:	40 87       	std	Z+8, r20	; 0x08
     980:	51 87       	std	Z+9, r21	; 0x09
     982:	62 87       	std	Z+10, r22	; 0x0a
     984:	73 87       	std	Z+11, r23	; 0x0b
  //event->timestamp = millis();

  /* Get a Euler angle sample for orientation */
  AdafruitImu::Vector<3> euler = getVector(Adafruit_BNO055::VECTOR_EULER);
     986:	4a e1       	ldi	r20, 0x1A	; 26
     988:	bc 01       	movw	r22, r24
     98a:	ce 01       	movw	r24, r28
     98c:	01 96       	adiw	r24, 0x01	; 1
     98e:	38 de       	rcall	.-912    	; 0x600 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
  event->orientation.x = euler.x();
     990:	89 81       	ldd	r24, Y+1	; 0x01
     992:	9a 81       	ldd	r25, Y+2	; 0x02
     994:	ab 81       	ldd	r26, Y+3	; 0x03
     996:	bc 81       	ldd	r27, Y+4	; 0x04
     998:	f8 01       	movw	r30, r16
     99a:	80 8b       	std	Z+16, r24	; 0x10
     99c:	91 8b       	std	Z+17, r25	; 0x11
     99e:	a2 8b       	std	Z+18, r26	; 0x12
     9a0:	b3 8b       	std	Z+19, r27	; 0x13
  event->orientation.y = euler.y();
     9a2:	8d 81       	ldd	r24, Y+5	; 0x05
     9a4:	9e 81       	ldd	r25, Y+6	; 0x06
     9a6:	af 81       	ldd	r26, Y+7	; 0x07
     9a8:	b8 85       	ldd	r27, Y+8	; 0x08
     9aa:	84 8b       	std	Z+20, r24	; 0x14
     9ac:	95 8b       	std	Z+21, r25	; 0x15
     9ae:	a6 8b       	std	Z+22, r26	; 0x16
     9b0:	b7 8b       	std	Z+23, r27	; 0x17
  event->orientation.z = euler.z();
     9b2:	89 85       	ldd	r24, Y+9	; 0x09
     9b4:	9a 85       	ldd	r25, Y+10	; 0x0a
     9b6:	ab 85       	ldd	r26, Y+11	; 0x0b
     9b8:	bc 85       	ldd	r27, Y+12	; 0x0c
     9ba:	80 8f       	std	Z+24, r24	; 0x18
     9bc:	91 8f       	std	Z+25, r25	; 0x19
     9be:	a2 8f       	std	Z+26, r26	; 0x1a
     9c0:	b3 8f       	std	Z+27, r27	; 0x1b

  return true;
}
     9c2:	81 e0       	ldi	r24, 0x01	; 1
     9c4:	2c 96       	adiw	r28, 0x0c	; 12
     9c6:	0f b6       	in	r0, 0x3f	; 63
     9c8:	f8 94       	cli
     9ca:	de bf       	out	0x3e, r29	; 62
     9cc:	0f be       	out	0x3f, r0	; 63
     9ce:	cd bf       	out	0x3d, r28	; 61
     9d0:	df 91       	pop	r29
     9d2:	cf 91       	pop	r28
     9d4:	1f 91       	pop	r17
     9d6:	0f 91       	pop	r16
     9d8:	08 95       	ret

000009da <_ZN9EtherComm15CommandReceivedEhPKhh>:
	//TODO remove useless commands
	//switch(command){
		//case CMD_Ping: RunPingCommand(data, len); break;
		//case CMD_Echo: RunEchoCommand(data, len); break;
		//case CMD_Led: RunLedCommand(data, len); break;
		/*case CMD_UpdateDevice:*/ rov.CommandReceived(id, data, len); //break;
     9da:	0c 94 c6 22 	jmp	0x458c	; 0x458c <_ZN5Robot15CommandReceivedEhPKhh>
     9de:	08 95       	ret

000009e0 <_GLOBAL__sub_I__Z14RunPingCommandPKhh>:
#include "Commands.h"
#include "EtherComm.h"
#include "Robot.h"
#include <stddef.h>

uint8_t* const SendDataBuffer = (uint8_t*)(&EtherComm::buffer[2]);
     9e0:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
     9e4:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
     9e8:	02 96       	adiw	r24, 0x02	; 2
     9ea:	90 93 e9 04 	sts	0x04E9, r25	; 0x8004e9 <__data_end+0x1>
     9ee:	80 93 e8 04 	sts	0x04E8, r24	; 0x8004e8 <__data_end>
     9f2:	08 95       	ret

000009f4 <_ZL10enableChipv>:
static Register* selectPort;
static uint8_t selectPin;

static void enableChip () {
	//cli();
	SetLow(*selectPort, selectPin); //digitalWrite(selectPin, LOW);
     9f4:	e0 91 ee 04 	lds	r30, 0x04EE	; 0x8004ee <_ZL10selectPort>
     9f8:	f0 91 ef 04 	lds	r31, 0x04EF	; 0x8004ef <_ZL10selectPort+0x1>
     9fc:	90 81       	ld	r25, Z
     9fe:	80 91 ed 04 	lds	r24, 0x04ED	; 0x8004ed <_ZL9selectPin>
     a02:	80 95       	com	r24
     a04:	89 23       	and	r24, r25
     a06:	80 83       	st	Z, r24
     a08:	08 95       	ret

00000a0a <_ZL11disableChipv>:
}

static void disableChip () {
	SetHigh(*selectPort, selectPin); //digitalWrite(selectPin, HIGH);
     a0a:	e0 91 ee 04 	lds	r30, 0x04EE	; 0x8004ee <_ZL10selectPort>
     a0e:	f0 91 ef 04 	lds	r31, 0x04EF	; 0x8004ef <_ZL10selectPort+0x1>
     a12:	90 81       	ld	r25, Z
     a14:	80 91 ed 04 	lds	r24, 0x04ED	; 0x8004ed <_ZL9selectPin>
     a18:	89 2b       	or	r24, r25
     a1a:	80 83       	st	Z, r24
     a1c:	08 95       	ret

00000a1e <_ZL6readOphh>:

	SetOutput(csDDR, selectPin);
	disableChip();
}

static uint8_t readOp (uint8_t op, uint8_t address) {
     a1e:	cf 93       	push	r28
     a20:	df 93       	push	r29
     a22:	d8 2f       	mov	r29, r24
     a24:	c6 2f       	mov	r28, r22
    enableChip();
     a26:	e6 df       	rcall	.-52     	; 0x9f4 <_ZL10enableChipv>
    SPI.write8(op | (address & ADDR_MASK));
     a28:	8c 2f       	mov	r24, r28
     a2a:	cf 71       	andi	r28, 0x1F	; 31
     a2c:	cd 2b       	or	r28, r29
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     a2e:	ce bd       	out	0x2e, r28	; 46
		asm volatile("nop");
     a30:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     a32:	0d b4       	in	r0, 0x2d	; 45
     a34:	07 fe       	sbrs	r0, 7
     a36:	fd cf       	rjmp	.-6      	; 0xa32 <_ZL6readOphh+0x14>
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     a38:	1e bc       	out	0x2e, r1	; 46
		asm volatile("nop");
     a3a:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     a3c:	0d b4       	in	r0, 0x2d	; 45
     a3e:	07 fe       	sbrs	r0, 7
     a40:	fd cf       	rjmp	.-6      	; 0xa3c <_ZL6readOphh+0x1e>
	}

	//write8, excepts also returns the received byte
	static uint8_t read_write8(uint8_t data){
		write8(data);
		return SPDR;
     a42:	ce b5       	in	r28, 0x2e	; 46
    uint8_t result = SPI.read_write8(0x00);
    if (address & 0x80)
     a44:	88 23       	and	r24, r24
     a46:	34 f4       	brge	.+12     	; 0xa54 <_ZL6readOphh+0x36>
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     a48:	1e bc       	out	0x2e, r1	; 46
		asm volatile("nop");
     a4a:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     a4c:	0d b4       	in	r0, 0x2d	; 45
     a4e:	07 fe       	sbrs	r0, 7
     a50:	fd cf       	rjmp	.-6      	; 0xa4c <_ZL6readOphh+0x2e>
        result = SPI.read_write8(0x00);
    disableChip();
     a52:	ce b5       	in	r28, 0x2e	; 46
     a54:	da df       	rcall	.-76     	; 0xa0a <_ZL11disableChipv>
    return result;
}
     a56:	8c 2f       	mov	r24, r28
     a58:	df 91       	pop	r29
     a5a:	cf 91       	pop	r28
     a5c:	08 95       	ret

00000a5e <_ZL7writeOphhh>:

static void writeOp (uint8_t op, uint8_t address, uint8_t data) {
     a5e:	1f 93       	push	r17
     a60:	cf 93       	push	r28
     a62:	df 93       	push	r29
     a64:	c8 2f       	mov	r28, r24
     a66:	d6 2f       	mov	r29, r22
     a68:	14 2f       	mov	r17, r20
    enableChip();
     a6a:	c4 df       	rcall	.-120    	; 0x9f4 <_ZL10enableChipv>
    SPI.write8(op | (address & ADDR_MASK));
     a6c:	df 71       	andi	r29, 0x1F	; 31
     a6e:	cd 2b       	or	r28, r29
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     a70:	ce bd       	out	0x2e, r28	; 46
		asm volatile("nop");
     a72:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     a74:	0d b4       	in	r0, 0x2d	; 45
     a76:	07 fe       	sbrs	r0, 7
     a78:	fd cf       	rjmp	.-6      	; 0xa74 <_ZL7writeOphhh+0x16>
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     a7a:	1e bd       	out	0x2e, r17	; 46
		asm volatile("nop");
     a7c:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     a7e:	0d b4       	in	r0, 0x2d	; 45
     a80:	07 fe       	sbrs	r0, 7
    SPI.write8(data);
    disableChip();
     a82:	fd cf       	rjmp	.-6      	; 0xa7e <_ZL7writeOphhh+0x20>
     a84:	c2 df       	rcall	.-124    	; 0xa0a <_ZL11disableChipv>
}
     a86:	df 91       	pop	r29
     a88:	cf 91       	pop	r28
     a8a:	1f 91       	pop	r17
     a8c:	08 95       	ret

00000a8e <_ZL7readBufjPh>:

static void readBuf(uint16_t len, uint8_t* data) {
     a8e:	0f 93       	push	r16
     a90:	1f 93       	push	r17
     a92:	cf 93       	push	r28
     a94:	df 93       	push	r29
     a96:	ec 01       	movw	r28, r24
     a98:	8b 01       	movw	r16, r22
    enableChip();
     a9a:	ac df       	rcall	.-168    	; 0x9f4 <_ZL10enableChipv>
    if (len != 0) {
     a9c:	20 97       	sbiw	r28, 0x00	; 0
     a9e:	99 f0       	breq	.+38     	; 0xac6 <_ZL7readBufjPh+0x38>
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     aa0:	8a e3       	ldi	r24, 0x3A	; 58
     aa2:	8e bd       	out	0x2e, r24	; 46
		asm volatile("nop");
     aa4:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     aa6:	0d b4       	in	r0, 0x2d	; 45
     aa8:	07 fe       	sbrs	r0, 7
     aaa:	fd cf       	rjmp	.-6      	; 0xaa6 <_ZL7readBufjPh+0x18>
     aac:	f8 01       	movw	r30, r16
     aae:	b8 01       	movw	r22, r16
     ab0:	6c 0f       	add	r22, r28
     ab2:	7d 1f       	adc	r23, r29
	static void read(void *buf, uint16_t nbyte, uint8_t dataSend = 0){
		if(nbyte == 0) return;
		
		uint8_t* buff = (uint8_t*)buf;
		while(nbyte--){
			SPDR = dataSend;
     ab4:	1e bc       	out	0x2e, r1	; 46
			//asm volatile("nop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\n");
			while(!(SPSR & _BV(SPIF)));
     ab6:	0d b4       	in	r0, 0x2d	; 45
     ab8:	07 fe       	sbrs	r0, 7
     aba:	fd cf       	rjmp	.-6      	; 0xab6 <_ZL7readBufjPh+0x28>
			*buff++ = SPDR;
     abc:	9e b5       	in	r25, 0x2e	; 46
     abe:	91 93       	st	Z+, r25
		
	static void read(void *buf, uint16_t nbyte, uint8_t dataSend = 0){
		if(nbyte == 0) return;
		
		uint8_t* buff = (uint8_t*)buf;
		while(nbyte--){
     ac0:	6e 17       	cp	r22, r30
     ac2:	7f 07       	cpc	r23, r31
        SPI.write8(ENC28J60_READ_BUF_MEM);
		SPI.read(data, len);
    }
    disableChip();
     ac4:	b9 f7       	brne	.-18     	; 0xab4 <_ZL7readBufjPh+0x26>
     ac6:	a1 df       	rcall	.-190    	; 0xa0a <_ZL11disableChipv>
}
     ac8:	df 91       	pop	r29
     aca:	cf 91       	pop	r28
     acc:	1f 91       	pop	r17
     ace:	0f 91       	pop	r16
     ad0:	08 95       	ret

00000ad2 <_ZL7SetBankh>:
        SPI.write(data, len);
    }
    disableChip();
}

static void SetBank (uint8_t address) {
     ad2:	1f 93       	push	r17
     ad4:	cf 93       	push	r28
     ad6:	df 93       	push	r29
     ad8:	18 2f       	mov	r17, r24
     ada:	10 76       	andi	r17, 0x60	; 96
    if ((address & BANK_MASK) != Enc28j60Bank) {
     adc:	c1 2f       	mov	r28, r17
     ade:	d0 e0       	ldi	r29, 0x00	; 0
     ae0:	80 91 f0 04 	lds	r24, 0x04F0	; 0x8004f0 <_ZL12Enc28j60Bank>
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	c8 17       	cp	r28, r24
     ae8:	d9 07       	cpc	r29, r25
     aea:	a1 f0       	breq	.+40     	; 0xb14 <_ZL7SetBankh+0x42>
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_BSEL1|ECON1_BSEL0);
     aec:	43 e0       	ldi	r20, 0x03	; 3
     aee:	6f e1       	ldi	r22, 0x1F	; 31
     af0:	80 ea       	ldi	r24, 0xA0	; 160
     af2:	b5 df       	rcall	.-150    	; 0xa5e <_ZL7writeOphhh>
        Enc28j60Bank = address & BANK_MASK;
     af4:	10 93 f0 04 	sts	0x04F0, r17	; 0x8004f0 <_ZL12Enc28j60Bank>
        writeOp(ENC28J60_BIT_FIELD_SET, ECON1, Enc28j60Bank>>5);
     af8:	ae 01       	movw	r20, r28
     afa:	55 95       	asr	r21
     afc:	47 95       	ror	r20
     afe:	55 95       	asr	r21
     b00:	47 95       	ror	r20
     b02:	55 95       	asr	r21
     b04:	47 95       	ror	r20
     b06:	55 95       	asr	r21
     b08:	47 95       	ror	r20
     b0a:	55 95       	asr	r21
     b0c:	47 95       	ror	r20
     b0e:	6f e1       	ldi	r22, 0x1F	; 31
     b10:	80 e8       	ldi	r24, 0x80	; 128
     b12:	a5 df       	rcall	.-182    	; 0xa5e <_ZL7writeOphhh>
    }
}
     b14:	df 91       	pop	r29
     b16:	cf 91       	pop	r28
     b18:	1f 91       	pop	r17
     b1a:	08 95       	ret

00000b1c <_ZL11readRegByteh>:

static uint8_t readRegByte (uint8_t address) {
     b1c:	cf 93       	push	r28
     b1e:	c8 2f       	mov	r28, r24
    SetBank(address);
     b20:	d8 df       	rcall	.-80     	; 0xad2 <_ZL7SetBankh>
    return readOp(ENC28J60_READ_CTRL_REG, address);
     b22:	6c 2f       	mov	r22, r28
     b24:	80 e0       	ldi	r24, 0x00	; 0
     b26:	7b df       	rcall	.-266    	; 0xa1e <_ZL6readOphh>
}
     b28:	cf 91       	pop	r28
     b2a:	08 95       	ret

00000b2c <_ZL12writeRegBytehh>:

static void writeRegByte (uint8_t address, uint8_t data) {
     b2c:	cf 93       	push	r28
     b2e:	df 93       	push	r29
     b30:	c8 2f       	mov	r28, r24
     b32:	d6 2f       	mov	r29, r22
    SetBank(address);
     b34:	ce df       	rcall	.-100    	; 0xad2 <_ZL7SetBankh>
    writeOp(ENC28J60_WRITE_CTRL_REG, address, data);
     b36:	4d 2f       	mov	r20, r29
     b38:	6c 2f       	mov	r22, r28
     b3a:	80 e4       	ldi	r24, 0x40	; 64
     b3c:	90 df       	rcall	.-224    	; 0xa5e <_ZL7writeOphhh>
}
     b3e:	df 91       	pop	r29
     b40:	cf 91       	pop	r28
     b42:	08 95       	ret

00000b44 <_ZL8writeReghj>:

static void writeReg(uint8_t address, uint16_t data) {
     b44:	cf 93       	push	r28
     b46:	df 93       	push	r29
     b48:	c8 2f       	mov	r28, r24
     b4a:	d7 2f       	mov	r29, r23
    writeRegByte(address, data);
     b4c:	ef df       	rcall	.-34     	; 0xb2c <_ZL12writeRegBytehh>
    writeRegByte(address + 1, data >> 8);
     b4e:	6d 2f       	mov	r22, r29
     b50:	81 e0       	ldi	r24, 0x01	; 1
     b52:	8c 0f       	add	r24, r28
     b54:	eb df       	rcall	.-42     	; 0xb2c <_ZL12writeRegBytehh>
}
     b56:	df 91       	pop	r29
     b58:	cf 91       	pop	r28
     b5a:	08 95       	ret

00000b5c <_ZN8ENC28J607initSPIERVh>:
static void disableChip () {
	SetHigh(*selectPort, selectPin); //digitalWrite(selectPin, HIGH);
	//sei();
}

void ENC28J60::initSPI (Register& csDDR) {
     b5c:	fc 01       	movw	r30, r24

class SPI{
public:
	static void begin(uint8_t clock = SPI_CLOCK_DIV2){
		//SPI_DIR |= SS;
		DDR_SPI |= MASK_MOSI | MASK_SCK | MASK_SS; //Not sure why, but SS pin requires to be set as output even when not being used.
     b5e:	94 b1       	in	r25, 0x04	; 4
     b60:	97 60       	ori	r25, 0x07	; 7
     b62:	94 b9       	out	0x04, r25	; 4
		DDR_SPI &= ~(MASK_MISO);
     b64:	23 98       	cbi	0x04, 3	; 4
		//disableCS();

		SPSR |= (clock >> 2);
     b66:	9d b5       	in	r25, 0x2d	; 45
     b68:	91 60       	ori	r25, 0x01	; 1
     b6a:	9d bd       	out	0x2d, r25	; 45
		SPCR |= _BV(MSTR) | _BV(SPE) | (clock & 0x03);
     b6c:	9c b5       	in	r25, 0x2c	; 44
     b6e:	90 65       	ori	r25, 0x50	; 80
     b70:	9c bd       	out	0x2c, r25	; 44
	SPI.begin(SPI_CLOCK_DIV2);

	SetOutput(csDDR, selectPin);
     b72:	80 81       	ld	r24, Z
     b74:	90 91 ed 04 	lds	r25, 0x04ED	; 0x8004ed <_ZL9selectPin>
     b78:	98 2b       	or	r25, r24
     b7a:	90 83       	st	Z, r25
	disableChip();
     b7c:	46 cf       	rjmp	.-372    	; 0xa0a <_ZL11disableChipv>
     b7e:	08 95       	ret

00000b80 <_ZN8ENC28J6010initializeEjPKhRVhS3_h>:
    writeReg(MIWR, data);
    while (readRegByte(MISTAT) & MISTAT_BUSY)
        ;
}

uint8_t ENC28J60::initialize (uint16_t size, const uint8_t* macaddr, Register& csDDR, Register& csPort, uint8_t csPin) {
     b80:	0f 93       	push	r16
     b82:	cf 93       	push	r28
     b84:	df 93       	push	r29
     b86:	eb 01       	movw	r28, r22
    bufferSize = size;
     b88:	90 93 f2 04 	sts	0x04F2, r25	; 0x8004f2 <_ZN8ENC28J6010bufferSizeE+0x1>
     b8c:	80 93 f1 04 	sts	0x04F1, r24	; 0x8004f1 <_ZN8ENC28J6010bufferSizeE>
	selectPin = csPin;
     b90:	00 93 ed 04 	sts	0x04ED, r16	; 0x8004ed <_ZL9selectPin>
	selectPort = &csPort;
     b94:	30 93 ef 04 	sts	0x04EF, r19	; 0x8004ef <_ZL10selectPort+0x1>
     b98:	20 93 ee 04 	sts	0x04EE, r18	; 0x8004ee <_ZL10selectPort>
    initSPI(csDDR);
     b9c:	ca 01       	movw	r24, r20
     b9e:	de df       	rcall	.-68     	; 0xb5c <_ZN8ENC28J607initSPIERVh>

    writeOp(ENC28J60_SOFT_RESET, 0, ENC28J60_SOFT_RESET);
     ba0:	4f ef       	ldi	r20, 0xFF	; 255
     ba2:	60 e0       	ldi	r22, 0x00	; 0
     ba4:	8f ef       	ldi	r24, 0xFF	; 255
     ba6:	5b df       	rcall	.-330    	; 0xa5e <_ZL7writeOphhh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ba8:	8f e3       	ldi	r24, 0x3F	; 63
     baa:	9f e1       	ldi	r25, 0x1F	; 31
     bac:	01 97       	sbiw	r24, 0x01	; 1
     bae:	f1 f7       	brne	.-4      	; 0xbac <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0x2c>
     bb0:	00 c0       	rjmp	.+0      	; 0xbb2 <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0x32>
     bb2:	00 00       	nop
	_delay_ms(2);
    while (!readOp(ENC28J60_READ_CTRL_REG, ESTAT) & ESTAT_CLKRDY)
     bb4:	6d e1       	ldi	r22, 0x1D	; 29
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	32 df       	rcall	.-412    	; 0xa1e <_ZL6readOphh>
     bba:	88 23       	and	r24, r24
     bbc:	d9 f3       	breq	.-10     	; 0xbb4 <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0x34>
        ;

    writeReg(ERXST, RXSTART_INIT);
     bbe:	60 e0       	ldi	r22, 0x00	; 0
     bc0:	70 e0       	ldi	r23, 0x00	; 0
     bc2:	88 e0       	ldi	r24, 0x08	; 8
     bc4:	bf df       	rcall	.-130    	; 0xb44 <_ZL8writeReghj>
    writeReg(ERXRDPT, RXSTART_INIT);
     bc6:	60 e0       	ldi	r22, 0x00	; 0
     bc8:	70 e0       	ldi	r23, 0x00	; 0
     bca:	8c e0       	ldi	r24, 0x0C	; 12
     bcc:	bb df       	rcall	.-138    	; 0xb44 <_ZL8writeReghj>
    writeReg(ERXND, RXSTOP_INIT);
     bce:	6f ef       	ldi	r22, 0xFF	; 255
     bd0:	7b e0       	ldi	r23, 0x0B	; 11
     bd2:	8a e0       	ldi	r24, 0x0A	; 10
     bd4:	b7 df       	rcall	.-146    	; 0xb44 <_ZL8writeReghj>
    writeReg(ETXST, TXSTART_INIT);
     bd6:	60 e0       	ldi	r22, 0x00	; 0
     bd8:	7c e0       	ldi	r23, 0x0C	; 12
     bda:	84 e0       	ldi	r24, 0x04	; 4
     bdc:	b3 df       	rcall	.-154    	; 0xb44 <_ZL8writeReghj>
    writeReg(ETXND, TXSTOP_INIT);
     bde:	6f ef       	ldi	r22, 0xFF	; 255
     be0:	71 e1       	ldi	r23, 0x11	; 17
     be2:	86 e0       	ldi	r24, 0x06	; 6
     be4:	af df       	rcall	.-162    	; 0xb44 <_ZL8writeReghj>

    writeRegByte(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN|ERXFCON_PMEN|ERXFCON_BCEN);
     be6:	61 eb       	ldi	r22, 0xB1	; 177
     be8:	88 e3       	ldi	r24, 0x38	; 56
     bea:	a0 df       	rcall	.-192    	; 0xb2c <_ZL12writeRegBytehh>
    writeReg(EPMM0, 0x303f);
     bec:	6f e3       	ldi	r22, 0x3F	; 63
     bee:	70 e3       	ldi	r23, 0x30	; 48
     bf0:	88 e2       	ldi	r24, 0x28	; 40
     bf2:	a8 df       	rcall	.-176    	; 0xb44 <_ZL8writeReghj>
    writeReg(EPMCS, 0xf7f9);
     bf4:	69 ef       	ldi	r22, 0xF9	; 249
     bf6:	77 ef       	ldi	r23, 0xF7	; 247
     bf8:	80 e3       	ldi	r24, 0x30	; 48
     bfa:	a4 df       	rcall	.-184    	; 0xb44 <_ZL8writeReghj>
    writeRegByte(MACON1, MACON1_MARXEN);
     bfc:	61 e0       	ldi	r22, 0x01	; 1
     bfe:	80 ec       	ldi	r24, 0xC0	; 192
     c00:	95 df       	rcall	.-214    	; 0xb2c <_ZL12writeRegBytehh>
    writeOp(ENC28J60_BIT_FIELD_SET, MACON3,
            MACON3_PADCFG0|MACON3_TXCRCEN|MACON3_FRMLNEN);
     c02:	42 e3       	ldi	r20, 0x32	; 50
     c04:	62 ec       	ldi	r22, 0xC2	; 194
     c06:	80 e8       	ldi	r24, 0x80	; 128
     c08:	2a df       	rcall	.-428    	; 0xa5e <_ZL7writeOphhh>
    writeReg(MAIPG, 0x0C12);
     c0a:	62 e1       	ldi	r22, 0x12	; 18
     c0c:	7c e0       	ldi	r23, 0x0C	; 12
     c0e:	86 ec       	ldi	r24, 0xC6	; 198
    writeRegByte(MABBIPG, 0x12);
     c10:	99 df       	rcall	.-206    	; 0xb44 <_ZL8writeReghj>
     c12:	62 e1       	ldi	r22, 0x12	; 18
     c14:	84 ec       	ldi	r24, 0xC4	; 196
    writeReg(MAMXFL, MAX_FRAMELEN);
     c16:	8a df       	rcall	.-236    	; 0xb2c <_ZL12writeRegBytehh>
     c18:	6c ed       	ldi	r22, 0xDC	; 220
     c1a:	75 e0       	ldi	r23, 0x05	; 5
    writeRegByte(MAADR5, macaddr[0]);
     c1c:	8a ec       	ldi	r24, 0xCA	; 202
     c1e:	92 df       	rcall	.-220    	; 0xb44 <_ZL8writeReghj>
     c20:	68 81       	ld	r22, Y
    writeRegByte(MAADR4, macaddr[1]);
     c22:	84 ee       	ldi	r24, 0xE4	; 228
     c24:	83 df       	rcall	.-250    	; 0xb2c <_ZL12writeRegBytehh>
     c26:	69 81       	ldd	r22, Y+1	; 0x01
    writeRegByte(MAADR3, macaddr[2]);
     c28:	85 ee       	ldi	r24, 0xE5	; 229
     c2a:	80 df       	rcall	.-256    	; 0xb2c <_ZL12writeRegBytehh>
    writeRegByte(MAADR2, macaddr[3]);
     c2c:	6a 81       	ldd	r22, Y+2	; 0x02
     c2e:	82 ee       	ldi	r24, 0xE2	; 226
     c30:	7d df       	rcall	.-262    	; 0xb2c <_ZL12writeRegBytehh>
    writeRegByte(MAADR1, macaddr[4]);
     c32:	6b 81       	ldd	r22, Y+3	; 0x03
     c34:	83 ee       	ldi	r24, 0xE3	; 227
     c36:	7a df       	rcall	.-268    	; 0xb2c <_ZL12writeRegBytehh>
    writeRegByte(MAADR0, macaddr[5]);
     c38:	6c 81       	ldd	r22, Y+4	; 0x04
     c3a:	80 ee       	ldi	r24, 0xE0	; 224
     c3c:	77 df       	rcall	.-274    	; 0xb2c <_ZL12writeRegBytehh>
    writeRegByte(MICMD, 0x00);
    return readRegByte(MIRD+1);
}

static void writePhy (uint8_t address, uint16_t data) {
    writeRegByte(MIREGADR, address);
     c3e:	6d 81       	ldd	r22, Y+5	; 0x05
     c40:	81 ee       	ldi	r24, 0xE1	; 225
     c42:	74 df       	rcall	.-280    	; 0xb2c <_ZL12writeRegBytehh>
    writeReg(MIWR, data);
     c44:	60 e1       	ldi	r22, 0x10	; 16
     c46:	84 ed       	ldi	r24, 0xD4	; 212
     c48:	71 df       	rcall	.-286    	; 0xb2c <_ZL12writeRegBytehh>
     c4a:	60 e0       	ldi	r22, 0x00	; 0
     c4c:	71 e0       	ldi	r23, 0x01	; 1
    while (readRegByte(MISTAT) & MISTAT_BUSY)
     c4e:	86 ed       	ldi	r24, 0xD6	; 214
     c50:	79 df       	rcall	.-270    	; 0xb44 <_ZL8writeReghj>
     c52:	8a ee       	ldi	r24, 0xEA	; 234
     c54:	63 df       	rcall	.-314    	; 0xb1c <_ZL11readRegByteh>
     c56:	80 fd       	sbrc	r24, 0
    writeRegByte(MAADR3, macaddr[2]);
    writeRegByte(MAADR2, macaddr[3]);
    writeRegByte(MAADR1, macaddr[4]);
    writeRegByte(MAADR0, macaddr[5]);
    writePhy(PHCON2, PHCON2_HDLDIS);
    SetBank(ECON1);
     c58:	fc cf       	rjmp	.-8      	; 0xc52 <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0xd2>
     c5a:	8f e1       	ldi	r24, 0x1F	; 31
     c5c:	3a df       	rcall	.-396    	; 0xad2 <_ZL7SetBankh>
    writeOp(ENC28J60_BIT_FIELD_SET, EIE, EIE_INTIE|EIE_PKTIE);
     c5e:	40 ec       	ldi	r20, 0xC0	; 192
     c60:	6b e1       	ldi	r22, 0x1B	; 27
     c62:	80 e8       	ldi	r24, 0x80	; 128
     c64:	fc de       	rcall	.-520    	; 0xa5e <_ZL7writeOphhh>
     c66:	44 e0       	ldi	r20, 0x04	; 4
    writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN);
     c68:	6f e1       	ldi	r22, 0x1F	; 31
     c6a:	80 e8       	ldi	r24, 0x80	; 128
     c6c:	f8 de       	rcall	.-528    	; 0xa5e <_ZL7writeOphhh>
     c6e:	82 e7       	ldi	r24, 0x72	; 114
     c70:	55 df       	rcall	.-342    	; 0xb1c <_ZL11readRegByteh>

    uint8_t rev = readRegByte(EREVID);
     c72:	86 30       	cpi	r24, 0x06	; 6
     c74:	08 f0       	brcs	.+2      	; 0xc78 <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0xf8>
     c76:	8f 5f       	subi	r24, 0xFF	; 255
    // microchip forgot to step the number on the silicon when they
    // released the revision B7. 6 is now rev B7. We still have
    // to see what they do when they release B8. At the moment
    // there is no B8 out yet
    if (rev > 5) ++rev;
     c78:	df 91       	pop	r29
     c7a:	cf 91       	pop	r28
     c7c:	0f 91       	pop	r16
    return rev;
}
     c7e:	08 95       	ret

00000c80 <_ZN8ENC28J608isLinkUpEv>:
     c80:	61 e1       	ldi	r22, 0x11	; 17
     c82:	84 ed       	ldi	r24, 0xD4	; 212
     c84:	53 df       	rcall	.-346    	; 0xb2c <_ZL12writeRegBytehh>
    writeRegByte(address + 1, data >> 8);
}

static uint16_t readPhyByte (uint8_t address) {
    writeRegByte(MIREGADR, address);
    writeRegByte(MICMD, MICMD_MIIRD);
     c86:	61 e0       	ldi	r22, 0x01	; 1
     c88:	82 ed       	ldi	r24, 0xD2	; 210
     c8a:	50 df       	rcall	.-352    	; 0xb2c <_ZL12writeRegBytehh>
    while (readRegByte(MISTAT) & MISTAT_BUSY)
     c8c:	8a ee       	ldi	r24, 0xEA	; 234
     c8e:	46 df       	rcall	.-372    	; 0xb1c <_ZL11readRegByteh>
     c90:	80 fd       	sbrc	r24, 0
     c92:	fc cf       	rjmp	.-8      	; 0xc8c <_ZN8ENC28J608isLinkUpEv+0xc>
        ;
    writeRegByte(MICMD, 0x00);
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	82 ed       	ldi	r24, 0xD2	; 210
     c98:	49 df       	rcall	.-366    	; 0xb2c <_ZL12writeRegBytehh>
    return readRegByte(MIRD+1);
     c9a:	89 ed       	ldi	r24, 0xD9	; 217
     c9c:	3f df       	rcall	.-386    	; 0xb1c <_ZL11readRegByteh>
     c9e:	82 fb       	bst	r24, 2
    return rev;
}

bool ENC28J60::isLinkUp() {
    return (readPhyByte(PHSTAT2) >> 2) & 1;
}
     ca0:	88 27       	eor	r24, r24
     ca2:	80 f9       	bld	r24, 0
     ca4:	08 95       	ret

00000ca6 <_ZN8ENC28J6010packetSendEj>:
     ca6:	af 92       	push	r10

struct transmit_status_vector {
    uint8_t bytes[7];
};

void ENC28J60::packetSend(uint16_t len) {
     ca8:	bf 92       	push	r11
     caa:	cf 92       	push	r12
     cac:	df 92       	push	r13
     cae:	ef 92       	push	r14
     cb0:	ff 92       	push	r15
     cb2:	0f 93       	push	r16
     cb4:	1f 93       	push	r17
     cb6:	cf 93       	push	r28
     cb8:	df 93       	push	r29
     cba:	7c 01       	movw	r14, r24
        writeOp(ENC28J60_BIT_FIELD_CLR, EIR, EIR_TXERIF|EIR_TXIF);

        // prepare new transmission
        if (retry == 0) {
            writeReg(EWRPT, TXSTART_INIT);
            writeReg(ETXND, TXSTART_INIT+len);
     cbc:	6c 01       	movw	r12, r24
     cbe:	84 ef       	ldi	r24, 0xF4	; 244
     cc0:	d8 1a       	sub	r13, r24

	static void write(const void *buf, uint16_t nbyte){
		if(nbyte == 0) return;
		
		const uint8_t* buff = (const uint8_t*)(buf);
		SPDR = *buff;
     cc2:	0f 2e       	mov	r0, r31
     cc4:	f3 ef       	ldi	r31, 0xF3	; 243
     cc6:	af 2e       	mov	r10, r31
     cc8:	f4 e0       	ldi	r31, 0x04	; 4
     cca:	bf 2e       	mov	r11, r31
     ccc:	f0 2d       	mov	r31, r0
     cce:	87 01       	movw	r16, r14
     cd0:	0d 50       	subi	r16, 0x0D	; 13
     cd2:	1b 4f       	sbci	r17, 0xFB	; 251
        // the Microchip TCP/IP stack implementation used to first check
        // whether TXERIF is set and only then reset the transmit logic
        // but this has been changed in later versions; possibly they
        // have a reason for this; they don't mention this in the errata
        // sheet
        writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRST);
     cd4:	40 e8       	ldi	r20, 0x80	; 128
     cd6:	6f e1       	ldi	r22, 0x1F	; 31
     cd8:	80 e8       	ldi	r24, 0x80	; 128
     cda:	c1 de       	rcall	.-638    	; 0xa5e <_ZL7writeOphhh>
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRST);
     cdc:	40 e8       	ldi	r20, 0x80	; 128
     cde:	6f e1       	ldi	r22, 0x1F	; 31
     ce0:	80 ea       	ldi	r24, 0xA0	; 160
     ce2:	bd de       	rcall	.-646    	; 0xa5e <_ZL7writeOphhh>
        writeOp(ENC28J60_BIT_FIELD_CLR, EIR, EIR_TXERIF|EIR_TXIF);
     ce4:	4a e0       	ldi	r20, 0x0A	; 10
     ce6:	6c e1       	ldi	r22, 0x1C	; 28
     ce8:	80 ea       	ldi	r24, 0xA0	; 160
     cea:	b9 de       	rcall	.-654    	; 0xa5e <_ZL7writeOphhh>

        // prepare new transmission
        if (retry == 0) {
            writeReg(EWRPT, TXSTART_INIT);
     cec:	60 e0       	ldi	r22, 0x00	; 0
     cee:	7c e0       	ldi	r23, 0x0C	; 12
     cf0:	82 e0       	ldi	r24, 0x02	; 2
            writeReg(ETXND, TXSTART_INIT+len);
     cf2:	28 df       	rcall	.-432    	; 0xb44 <_ZL8writeReghj>
     cf4:	b6 01       	movw	r22, r12
     cf6:	86 e0       	ldi	r24, 0x06	; 6
            writeOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
     cf8:	25 df       	rcall	.-438    	; 0xb44 <_ZL8writeReghj>
     cfa:	40 e0       	ldi	r20, 0x00	; 0
     cfc:	60 e0       	ldi	r22, 0x00	; 0
     cfe:	8a e7       	ldi	r24, 0x7A	; 122
     d00:	ae de       	rcall	.-676    	; 0xa5e <_ZL7writeOphhh>
    }
    disableChip();
}

static void writeBuf(uint16_t len, const uint8_t* data) {
    enableChip();
     d02:	78 de       	rcall	.-784    	; 0x9f4 <_ZL10enableChipv>
     d04:	e1 14       	cp	r14, r1
    if (len != 0) {
     d06:	f1 04       	cpc	r15, r1
     d08:	e1 f0       	breq	.+56     	; 0xd42 <_ZN8ENC28J6010packetSendEj+0x9c>
     d0a:	8a e7       	ldi	r24, 0x7A	; 122
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     d0c:	8e bd       	out	0x2e, r24	; 46
     d0e:	00 00       	nop
		asm volatile("nop");
     d10:	0d b4       	in	r0, 0x2d	; 45
		while(!(SPSR & _BV(SPIF)));
     d12:	07 fe       	sbrs	r0, 7
     d14:	fd cf       	rjmp	.-6      	; 0xd10 <_ZN8ENC28J6010packetSendEj+0x6a>
     d16:	f5 01       	movw	r30, r10

	static void write(const void *buf, uint16_t nbyte){
		if(nbyte == 0) return;
		
		const uint8_t* buff = (const uint8_t*)(buf);
		SPDR = *buff;
     d18:	80 81       	ld	r24, Z
     d1a:	8e bd       	out	0x2e, r24	; 46
     d1c:	f1 e0       	ldi	r31, 0x01	; 1
		while(--nbyte){
     d1e:	ef 16       	cp	r14, r31
     d20:	f1 04       	cpc	r15, r1
     d22:	59 f0       	breq	.+22     	; 0xd3a <_ZN8ENC28J6010packetSendEj+0x94>
     d24:	e4 ef       	ldi	r30, 0xF4	; 244
     d26:	f4 e0       	ldi	r31, 0x04	; 4
     d28:	00 00       	nop
			asm volatile("nop");
     d2a:	0d b4       	in	r0, 0x2d	; 45
			while (!(SPSR & _BV(SPIF))) ;
     d2c:	07 fe       	sbrs	r0, 7
     d2e:	fd cf       	rjmp	.-6      	; 0xd2a <_ZN8ENC28J6010packetSendEj+0x84>
     d30:	81 91       	ld	r24, Z+
			SPDR = *++buff;
     d32:	8e bd       	out	0x2e, r24	; 46
     d34:	e0 17       	cp	r30, r16
	static void write(const void *buf, uint16_t nbyte){
		if(nbyte == 0) return;
		
		const uint8_t* buff = (const uint8_t*)(buf);
		SPDR = *buff;
		while(--nbyte){
     d36:	f1 07       	cpc	r31, r17
     d38:	b9 f7       	brne	.-18     	; 0xd28 <_ZN8ENC28J6010packetSendEj+0x82>
			asm volatile("nop");
			while (!(SPSR & _BV(SPIF))) ;
			SPDR = *++buff;
		}
		asm volatile("nop");
     d3a:	00 00       	nop
		while (!(SPSR & _BV(SPIF))) ;
     d3c:	0d b4       	in	r0, 0x2d	; 45
     d3e:	07 fe       	sbrs	r0, 7
        SPI.write8(ENC28J60_WRITE_BUF_MEM);

        SPI.write(data, len);
    }
    disableChip();
     d40:	fd cf       	rjmp	.-6      	; 0xd3c <_ZN8ENC28J6010packetSendEj+0x96>
            writeOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
            writeBuf(len, buffer);
        }

        // initiate transmission
        writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
     d42:	63 de       	rcall	.-826    	; 0xa0a <_ZL11disableChipv>
     d44:	48 e0       	ldi	r20, 0x08	; 8
     d46:	6f e1       	ldi	r22, 0x1F	; 31
     d48:	80 e8       	ldi	r24, 0x80	; 128
     d4a:	89 de       	rcall	.-750    	; 0xa5e <_ZL7writeOphhh>
        // wait until transmission has finished; referring to the data sheet and
        // to the errata (Errata Issue 13; Example 1) you only need to wait until either
        // TXIF or TXERIF gets set; however this leads to hangs; apparently Microchip
        // realized this and in later implementations of their tcp/ip stack they introduced
        // a counter to avoid hangs; of course they didn't update the errata sheet
        uint16_t count = 0;
     d4c:	c0 e0       	ldi	r28, 0x00	; 0
     d4e:	d0 e0       	ldi	r29, 0x00	; 0
        while ((readRegByte(EIR) & (EIR_TXIF | EIR_TXERIF)) == 0 && ++count < 1000U)
     d50:	8c e1       	ldi	r24, 0x1C	; 28
     d52:	e4 de       	rcall	.-568    	; 0xb1c <_ZL11readRegByteh>
     d54:	8a 70       	andi	r24, 0x0A	; 10
     d56:	31 f4       	brne	.+12     	; 0xd64 <_ZN8ENC28J6010packetSendEj+0xbe>
     d58:	21 96       	adiw	r28, 0x01	; 1
     d5a:	c8 3e       	cpi	r28, 0xE8	; 232
     d5c:	83 e0       	ldi	r24, 0x03	; 3
     d5e:	d8 07       	cpc	r29, r24
     d60:	b9 f7       	brne	.-18     	; 0xd50 <_ZN8ENC28J6010packetSendEj+0xaa>
     d62:	0c c0       	rjmp	.+24     	; 0xd7c <_ZN8ENC28J6010packetSendEj+0xd6>
            ;

        if (!(readRegByte(EIR) & EIR_TXERIF) && count < 1000U) {
     d64:	8c e1       	ldi	r24, 0x1C	; 28
     d66:	da de       	rcall	.-588    	; 0xb1c <_ZL11readRegByteh>
     d68:	81 fd       	sbrc	r24, 1
     d6a:	03 c0       	rjmp	.+6      	; 0xd72 <_ZN8ENC28J6010packetSendEj+0xcc>
     d6c:	c8 3e       	cpi	r28, 0xE8	; 232
     d6e:	d3 40       	sbci	r29, 0x03	; 3
            // no error; start new transmission
            break;
        }

        // cancel previous transmission if stuck
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRTS);
     d70:	40 f0       	brcs	.+16     	; 0xd82 <_ZN8ENC28J6010packetSendEj+0xdc>
     d72:	48 e0       	ldi	r20, 0x08	; 8
     d74:	6f e1       	ldi	r22, 0x1F	; 31
     d76:	80 ea       	ldi	r24, 0xA0	; 160
     d78:	72 de       	rcall	.-796    	; 0xa5e <_ZL7writeOphhh>
};

void ENC28J60::packetSend(uint16_t len) {
    uint8_t retry = 0;

    while (1) {
     d7a:	ac cf       	rjmp	.-168    	; 0xcd4 <_ZN8ENC28J6010packetSendEj+0x2e>
        // a counter to avoid hangs; of course they didn't update the errata sheet
        uint16_t count = 0;
        while ((readRegByte(EIR) & (EIR_TXIF | EIR_TXERIF)) == 0 && ++count < 1000U)
            ;

        if (!(readRegByte(EIR) & EIR_TXERIF) && count < 1000U) {
     d7c:	8c e1       	ldi	r24, 0x1C	; 28
     d7e:	ce de       	rcall	.-612    	; 0xb1c <_ZL11readRegByteh>
     d80:	f8 cf       	rjmp	.-16     	; 0xd72 <_ZN8ENC28J6010packetSendEj+0xcc>
     d82:	df 91       	pop	r29
        }

        // cancel previous transmission if stuck
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRTS);
    }
}
     d84:	cf 91       	pop	r28
     d86:	1f 91       	pop	r17
     d88:	0f 91       	pop	r16
     d8a:	ff 90       	pop	r15
     d8c:	ef 90       	pop	r14
     d8e:	df 90       	pop	r13
     d90:	cf 90       	pop	r12
     d92:	bf 90       	pop	r11
     d94:	af 90       	pop	r10
     d96:	08 95       	ret

00000d98 <_ZN8ENC28J6013packetReceiveEv>:
     d98:	0f 93       	push	r16


uint16_t ENC28J60::packetReceive() {
     d9a:	1f 93       	push	r17
     d9c:	cf 93       	push	r28
     d9e:	df 93       	push	r29
     da0:	00 d0       	rcall	.+0      	; 0xda2 <_ZN8ENC28J6013packetReceiveEv+0xa>
     da2:	00 d0       	rcall	.+0      	; 0xda4 <_ZN8ENC28J6013packetReceiveEv+0xc>
     da4:	cd b7       	in	r28, 0x3d	; 61
     da6:	de b7       	in	r29, 0x3e	; 62
    static uint16_t gNextPacketPtr = RXSTART_INIT;
    static bool     unreleasedPacket = false;
    uint16_t len = 0;

    if (unreleasedPacket) {
     da8:	80 91 ec 04 	lds	r24, 0x04EC	; 0x8004ec <_ZZN8ENC28J6013packetReceiveEvE16unreleasedPacket>
     dac:	88 23       	and	r24, r24
     dae:	91 f0       	breq	.+36     	; 0xdd4 <_ZN8ENC28J6013packetReceiveEv+0x3c>
        if (gNextPacketPtr == 0)
     db0:	60 91 ea 04 	lds	r22, 0x04EA	; 0x8004ea <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr>
     db4:	70 91 eb 04 	lds	r23, 0x04EB	; 0x8004eb <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr+0x1>
     db8:	61 15       	cp	r22, r1
     dba:	71 05       	cpc	r23, r1
     dbc:	29 f4       	brne	.+10     	; 0xdc8 <_ZN8ENC28J6013packetReceiveEv+0x30>
            writeReg(ERXRDPT, RXSTOP_INIT);
     dbe:	6f ef       	ldi	r22, 0xFF	; 255
     dc0:	7b e0       	ldi	r23, 0x0B	; 11
     dc2:	8c e0       	ldi	r24, 0x0C	; 12
     dc4:	bf de       	rcall	.-642    	; 0xb44 <_ZL8writeReghj>
     dc6:	04 c0       	rjmp	.+8      	; 0xdd0 <_ZN8ENC28J6013packetReceiveEv+0x38>
        else
            writeReg(ERXRDPT, gNextPacketPtr - 1);
     dc8:	61 50       	subi	r22, 0x01	; 1
     dca:	71 09       	sbc	r23, r1
     dcc:	8c e0       	ldi	r24, 0x0C	; 12
     dce:	ba de       	rcall	.-652    	; 0xb44 <_ZL8writeReghj>
        unreleasedPacket = false;
     dd0:	10 92 ec 04 	sts	0x04EC, r1	; 0x8004ec <_ZZN8ENC28J6013packetReceiveEvE16unreleasedPacket>
    }

    if (readRegByte(EPKTCNT) > 0) {
     dd4:	89 e3       	ldi	r24, 0x39	; 57
     dd6:	a2 de       	rcall	.-700    	; 0xb1c <_ZL11readRegByteh>
     dd8:	88 23       	and	r24, r24
     dda:	a9 f1       	breq	.+106    	; 0xe46 <_ZN8ENC28J6013packetReceiveEv+0xae>
        writeReg(ERDPT, gNextPacketPtr);
     ddc:	60 91 ea 04 	lds	r22, 0x04EA	; 0x8004ea <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr>
     de0:	70 91 eb 04 	lds	r23, 0x04EB	; 0x8004eb <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr+0x1>
     de4:	80 e0       	ldi	r24, 0x00	; 0
     de6:	ae de       	rcall	.-676    	; 0xb44 <_ZL8writeReghj>
            uint16_t nextPacket;
            uint16_t byteCount;
            uint16_t status;
        } header;

        readBuf(sizeof header, (uint8_t*) &header);
     de8:	be 01       	movw	r22, r28
     dea:	6f 5f       	subi	r22, 0xFF	; 255
     dec:	7f 4f       	sbci	r23, 0xFF	; 255
     dee:	86 e0       	ldi	r24, 0x06	; 6
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	4d de       	rcall	.-870    	; 0xa8e <_ZL7readBufjPh>

        gNextPacketPtr  = header.nextPacket;
     df4:	89 81       	ldd	r24, Y+1	; 0x01
     df6:	9a 81       	ldd	r25, Y+2	; 0x02
     df8:	90 93 eb 04 	sts	0x04EB, r25	; 0x8004eb <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr+0x1>
     dfc:	80 93 ea 04 	sts	0x04EA, r24	; 0x8004ea <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr>
        len = header.byteCount - 4; //remove the CRC count
        if (len>bufferSize-1)
            len=bufferSize-1;
        if ((header.status & 0x80)==0)
     e00:	8d 81       	ldd	r24, Y+5	; 0x05
     e02:	87 ff       	sbrs	r24, 7
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <_ZN8ENC28J6013packetReceiveEv+0x92>

        readBuf(sizeof header, (uint8_t*) &header);

        gNextPacketPtr  = header.nextPacket;
        len = header.byteCount - 4; //remove the CRC count
        if (len>bufferSize-1)
     e06:	80 91 f1 04 	lds	r24, 0x04F1	; 0x8004f1 <_ZN8ENC28J6010bufferSizeE>
     e0a:	90 91 f2 04 	lds	r25, 0x04F2	; 0x8004f2 <_ZN8ENC28J6010bufferSizeE+0x1>
     e0e:	01 97       	sbiw	r24, 0x01	; 1
        } header;

        readBuf(sizeof header, (uint8_t*) &header);

        gNextPacketPtr  = header.nextPacket;
        len = header.byteCount - 4; //remove the CRC count
     e10:	0b 81       	ldd	r16, Y+3	; 0x03
     e12:	1c 81       	ldd	r17, Y+4	; 0x04
     e14:	04 50       	subi	r16, 0x04	; 4
     e16:	11 09       	sbc	r17, r1
     e18:	80 17       	cp	r24, r16
     e1a:	91 07       	cpc	r25, r17
     e1c:	08 f4       	brcc	.+2      	; 0xe20 <_ZN8ENC28J6013packetReceiveEv+0x88>
        if (len>bufferSize-1)
            len=bufferSize-1;
        if ((header.status & 0x80)==0)
            len = 0;
        else
            readBuf(len, buffer);
     e1e:	8c 01       	movw	r16, r24
     e20:	63 ef       	ldi	r22, 0xF3	; 243
     e22:	74 e0       	ldi	r23, 0x04	; 4
     e24:	c8 01       	movw	r24, r16
     e26:	33 de       	rcall	.-922    	; 0xa8e <_ZL7readBufjPh>
     e28:	02 c0       	rjmp	.+4      	; 0xe2e <_ZN8ENC28J6013packetReceiveEv+0x96>
        gNextPacketPtr  = header.nextPacket;
        len = header.byteCount - 4; //remove the CRC count
        if (len>bufferSize-1)
            len=bufferSize-1;
        if ((header.status & 0x80)==0)
            len = 0;
     e2a:	00 e0       	ldi	r16, 0x00	; 0
     e2c:	10 e0       	ldi	r17, 0x00	; 0
        else
            readBuf(len, buffer);
        buffer[len] = 0;
     e2e:	f8 01       	movw	r30, r16
     e30:	ed 50       	subi	r30, 0x0D	; 13
     e32:	fb 4f       	sbci	r31, 0xFB	; 251
     e34:	10 82       	st	Z, r1
        unreleasedPacket = true;
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	80 93 ec 04 	sts	0x04EC, r24	; 0x8004ec <_ZZN8ENC28J6013packetReceiveEvE16unreleasedPacket>

        writeOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
     e3c:	40 e4       	ldi	r20, 0x40	; 64
     e3e:	6e e1       	ldi	r22, 0x1E	; 30
     e40:	80 e8       	ldi	r24, 0x80	; 128
     e42:	0d de       	rcall	.-998    	; 0xa5e <_ZL7writeOphhh>
     e44:	02 c0       	rjmp	.+4      	; 0xe4a <_ZN8ENC28J6013packetReceiveEv+0xb2>


uint16_t ENC28J60::packetReceive() {
    static uint16_t gNextPacketPtr = RXSTART_INIT;
    static bool     unreleasedPacket = false;
    uint16_t len = 0;
     e46:	00 e0       	ldi	r16, 0x00	; 0
     e48:	10 e0       	ldi	r17, 0x00	; 0
        unreleasedPacket = true;

        writeOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
    }
    return len;
}
     e4a:	c8 01       	movw	r24, r16
     e4c:	26 96       	adiw	r28, 0x06	; 6
     e4e:	0f b6       	in	r0, 0x3f	; 63
     e50:	f8 94       	cli
     e52:	de bf       	out	0x3e, r29	; 62
     e54:	0f be       	out	0x3f, r0	; 63
     e56:	cd bf       	out	0x3d, r28	; 61
     e58:	df 91       	pop	r29
     e5a:	cf 91       	pop	r28
     e5c:	1f 91       	pop	r17
     e5e:	0f 91       	pop	r16
     e60:	08 95       	ret

00000e62 <_ZN9EtherCard5beginEPKhRVhS3_h>:
uint16_t EtherCard::delaycnt = 0; //request gateway ARP lookup

uint8_t Ethernet::buffer[ETHER_CARD_BUFFER_SIZE]; // tcp/ip send and receive buffer

uint8_t EtherCard::begin (const uint8_t* macaddr,
                          Register& csDDR, Register& csPort, uint8_t csPin) {
     e62:	ef 92       	push	r14
     e64:	ff 92       	push	r15
     e66:	0f 93       	push	r16
     e68:	cf 93       	push	r28
     e6a:	df 93       	push	r29
     e6c:	eb 01       	movw	r28, r22
     e6e:	7a 01       	movw	r14, r20
     e70:	02 2f       	mov	r16, r18

    copyMac(mymac, macaddr);
     e72:	bc 01       	movw	r22, r24
     e74:	8d e0       	ldi	r24, 0x0D	; 13
     e76:	97 e0       	ldi	r25, 0x07	; 7
     e78:	c9 d3       	rcall	.+1938   	; 0x160c <_ZN9EtherCard7copyMacEPhPKh>
    return initialize(ETHER_CARD_BUFFER_SIZE, mymac, csDDR, csPort, csPin);
     e7a:	97 01       	movw	r18, r14
     e7c:	ae 01       	movw	r20, r28
     e7e:	6d e0       	ldi	r22, 0x0D	; 13
     e80:	77 e0       	ldi	r23, 0x07	; 7
     e82:	80 e0       	ldi	r24, 0x00	; 0
     e84:	92 e0       	ldi	r25, 0x02	; 2
     e86:	7c de       	rcall	.-776    	; 0xb80 <_ZN8ENC28J6010initializeEjPKhRVhS3_h>
}
     e88:	df 91       	pop	r29
     e8a:	cf 91       	pop	r28
     e8c:	0f 91       	pop	r16
     e8e:	ff 90       	pop	r15
     e90:	ef 90       	pop	r14
     e92:	08 95       	ret

00000e94 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_>:

bool EtherCard::staticSetup (const uint8_t* my_ip,
                             const uint8_t* gw_ip,
                             const uint8_t* dns_ip,
                             const uint8_t* mask) {
     e94:	ef 92       	push	r14
     e96:	ff 92       	push	r15
     e98:	0f 93       	push	r16
     e9a:	1f 93       	push	r17
     e9c:	cf 93       	push	r28
     e9e:	df 93       	push	r29
     ea0:	7b 01       	movw	r14, r22
     ea2:	8a 01       	movw	r16, r20
     ea4:	e9 01       	movw	r28, r18

    if (my_ip != 0)
     ea6:	00 97       	sbiw	r24, 0x00	; 0
     ea8:	21 f0       	breq	.+8      	; 0xeb2 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x1e>
        copyIp(myip, my_ip);
     eaa:	bc 01       	movw	r22, r24
     eac:	89 e0       	ldi	r24, 0x09	; 9
     eae:	97 e0       	ldi	r25, 0x07	; 7
     eb0:	a0 d3       	rcall	.+1856   	; 0x15f2 <_ZN9EtherCard6copyIpEPhPKh>
    if (gw_ip != 0)
     eb2:	e1 14       	cp	r14, r1
     eb4:	f1 04       	cpc	r15, r1
     eb6:	11 f0       	breq	.+4      	; 0xebc <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x28>
        setGwIp(gw_ip);
     eb8:	c7 01       	movw	r24, r14
     eba:	bd d1       	rcall	.+890    	; 0x1236 <_ZN9EtherCard7setGwIpEPKh>
    if (dns_ip != 0)
     ebc:	01 15       	cp	r16, r1
     ebe:	11 05       	cpc	r17, r1
     ec0:	21 f0       	breq	.+8      	; 0xeca <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x36>
        copyIp(dnsip, dns_ip);
     ec2:	b8 01       	movw	r22, r16
     ec4:	89 ef       	ldi	r24, 0xF9	; 249
     ec6:	96 e0       	ldi	r25, 0x06	; 6
     ec8:	94 d3       	rcall	.+1832   	; 0x15f2 <_ZN9EtherCard6copyIpEPhPKh>
    if(mask != 0)
     eca:	20 97       	sbiw	r28, 0x00	; 0
     ecc:	21 f0       	breq	.+8      	; 0xed6 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x42>
        copyIp(netmask, mask);
     ece:	be 01       	movw	r22, r28
     ed0:	85 e0       	ldi	r24, 0x05	; 5
     ed2:	97 e0       	ldi	r25, 0x07	; 7
    updateBroadcastAddress();
     ed4:	8e d3       	rcall	.+1820   	; 0x15f2 <_ZN9EtherCard6copyIpEPhPKh>
     ed6:	bb d1       	rcall	.+886    	; 0x124e <_ZN9EtherCard22updateBroadcastAddressEv>
    delaycnt = 0; //request gateway ARP lookup
     ed8:	10 92 f4 06 	sts	0x06F4, r1	; 0x8006f4 <_ZN9EtherCard8delaycntE+0x1>
     edc:	10 92 f3 06 	sts	0x06F3, r1	; 0x8006f3 <_ZN9EtherCard8delaycntE>
    return true;
}
     ee0:	81 e0       	ldi	r24, 0x01	; 1
     ee2:	df 91       	pop	r29
     ee4:	cf 91       	pop	r28
     ee6:	1f 91       	pop	r17
     ee8:	0f 91       	pop	r16
     eea:	ff 90       	pop	r15
     eec:	ef 90       	pop	r14
     eee:	08 95       	ret

00000ef0 <_ZL13fill_checksumhhjh>:
    for(uint8_t i=0; i<IP_LEN; i++)
        broadcastip[i] = myip[i] | ~netmask[i];
}

void EtherCard::registerPingCallback (void (*callback)(uint8_t *srcip)) {
    icmp_cb = callback;
     ef0:	cf 92       	push	r12
     ef2:	df 92       	push	r13
     ef4:	ef 92       	push	r14
     ef6:	ff 92       	push	r15
     ef8:	cf 93       	push	r28
     efa:	df 93       	push	r29
     efc:	c6 2f       	mov	r28, r22
     efe:	d0 e0       	ldi	r29, 0x00	; 0
     f00:	cd 50       	subi	r28, 0x0D	; 13
     f02:	db 4f       	sbci	r29, 0xFB	; 251
     f04:	21 30       	cpi	r18, 0x01	; 1
     f06:	81 f4       	brne	.+32     	; 0xf28 <_ZL13fill_checksumhhjh+0x38>
     f08:	6a 01       	movw	r12, r20
     f0a:	99 e0       	ldi	r25, 0x09	; 9
     f0c:	c9 0e       	add	r12, r25
     f0e:	d1 1c       	adc	r13, r1
     f10:	e1 2c       	mov	r14, r1
     f12:	f1 2c       	mov	r15, r1
     f14:	03 c0       	rjmp	.+6      	; 0xf1c <_ZL13fill_checksumhhjh+0x2c>
     f16:	c1 2c       	mov	r12, r1
     f18:	d1 2c       	mov	r13, r1
     f1a:	76 01       	movw	r14, r12
     f1c:	42 30       	cpi	r20, 0x02	; 2
     f1e:	51 05       	cpc	r21, r1
     f20:	28 f1       	brcs	.+74     	; 0xf6c <_ZL13fill_checksumhhjh+0x7c>
     f22:	fe 01       	movw	r30, r28
     f24:	da 01       	movw	r26, r20
     f26:	09 c0       	rjmp	.+18     	; 0xf3a <_ZL13fill_checksumhhjh+0x4a>
     f28:	22 30       	cpi	r18, 0x02	; 2
     f2a:	a9 f7       	brne	.-22     	; 0xf16 <_ZL13fill_checksumhhjh+0x26>
     f2c:	6a 01       	movw	r12, r20
     f2e:	92 e0       	ldi	r25, 0x02	; 2
     f30:	c9 1a       	sub	r12, r25
     f32:	d1 08       	sbc	r13, r1
     f34:	e1 2c       	mov	r14, r1
     f36:	f1 2c       	mov	r15, r1
     f38:	f1 cf       	rjmp	.-30     	; 0xf1c <_ZL13fill_checksumhhjh+0x2c>
     f3a:	20 81       	ld	r18, Z
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	32 2f       	mov	r19, r18
     f40:	22 27       	eor	r18, r18
     f42:	91 81       	ldd	r25, Z+1	; 0x01
     f44:	29 2b       	or	r18, r25
     f46:	c2 0e       	add	r12, r18
     f48:	d3 1e       	adc	r13, r19
     f4a:	e1 1c       	adc	r14, r1
     f4c:	f1 1c       	adc	r15, r1
     f4e:	32 96       	adiw	r30, 0x02	; 2
     f50:	12 97       	sbiw	r26, 0x02	; 2
     f52:	a2 30       	cpi	r26, 0x02	; 2
     f54:	b1 05       	cpc	r27, r1
     f56:	88 f7       	brcc	.-30     	; 0xf3a <_ZL13fill_checksumhhjh+0x4a>
     f58:	9a 01       	movw	r18, r20
     f5a:	22 50       	subi	r18, 0x02	; 2
     f5c:	31 09       	sbc	r19, r1
     f5e:	2e 7f       	andi	r18, 0xFE	; 254
     f60:	2e 5f       	subi	r18, 0xFE	; 254
     f62:	3f 4f       	sbci	r19, 0xFF	; 255
     f64:	c2 0f       	add	r28, r18
     f66:	d3 1f       	adc	r29, r19
     f68:	41 70       	andi	r20, 0x01	; 1
     f6a:	55 27       	eor	r21, r21
     f6c:	45 2b       	or	r20, r21
     f6e:	61 f0       	breq	.+24     	; 0xf88 <_ZL13fill_checksumhhjh+0x98>
     f70:	48 81       	ld	r20, Y
     f72:	50 e0       	ldi	r21, 0x00	; 0
     f74:	60 e0       	ldi	r22, 0x00	; 0
     f76:	70 e0       	ldi	r23, 0x00	; 0
     f78:	76 2f       	mov	r23, r22
     f7a:	65 2f       	mov	r22, r21
     f7c:	54 2f       	mov	r21, r20
     f7e:	44 27       	eor	r20, r20
     f80:	c4 0e       	add	r12, r20
     f82:	d5 1e       	adc	r13, r21
     f84:	e6 1e       	adc	r14, r22
     f86:	f7 1e       	adc	r15, r23
     f88:	a7 01       	movw	r20, r14
     f8a:	66 27       	eor	r22, r22
     f8c:	77 27       	eor	r23, r23
     f8e:	41 15       	cp	r20, r1
     f90:	51 05       	cpc	r21, r1
     f92:	61 05       	cpc	r22, r1
     f94:	71 05       	cpc	r23, r1
     f96:	71 f0       	breq	.+28     	; 0xfb4 <_ZL13fill_checksumhhjh+0xc4>
     f98:	ee 24       	eor	r14, r14
     f9a:	ff 24       	eor	r15, r15
     f9c:	c4 0e       	add	r12, r20
     f9e:	d5 1e       	adc	r13, r21
     fa0:	e6 1e       	adc	r14, r22
     fa2:	f7 1e       	adc	r15, r23
     fa4:	a7 01       	movw	r20, r14
     fa6:	66 27       	eor	r22, r22
     fa8:	77 27       	eor	r23, r23
     faa:	41 15       	cp	r20, r1
     fac:	51 05       	cpc	r21, r1
     fae:	61 05       	cpc	r22, r1
     fb0:	71 05       	cpc	r23, r1
     fb2:	91 f7       	brne	.-28     	; 0xf98 <_ZL13fill_checksumhhjh+0xa8>
     fb4:	c0 94       	com	r12
     fb6:	d0 94       	com	r13
     fb8:	e8 2f       	mov	r30, r24
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	ed 50       	subi	r30, 0x0D	; 13
     fbe:	fb 4f       	sbci	r31, 0xFB	; 251
     fc0:	d0 82       	st	Z, r13
     fc2:	c1 82       	std	Z+1, r12	; 0x01
     fc4:	df 91       	pop	r29
     fc6:	cf 91       	pop	r28
     fc8:	ff 90       	pop	r15
     fca:	ef 90       	pop	r14
     fcc:	df 90       	pop	r13
     fce:	cf 90       	pop	r12
     fd0:	08 95       	ret

00000fd2 <_ZL6is_lanPKhS0_>:
     fd2:	cf 93       	push	r28
     fd4:	df 93       	push	r29
     fd6:	fc 01       	movw	r30, r24
     fd8:	20 81       	ld	r18, Z
     fda:	22 23       	and	r18, r18
     fdc:	d1 f0       	breq	.+52     	; 0x1012 <_ZL6is_lanPKhS0_+0x40>
     fde:	fb 01       	movw	r30, r22
     fe0:	30 81       	ld	r19, Z
     fe2:	33 23       	and	r19, r19
     fe4:	c1 f0       	breq	.+48     	; 0x1016 <_ZL6is_lanPKhS0_+0x44>
     fe6:	23 27       	eor	r18, r19
     fe8:	30 91 05 07 	lds	r19, 0x0705	; 0x800705 <_ZN9EtherCard7netmaskE>
     fec:	23 23       	and	r18, r19
     fee:	a9 f4       	brne	.+42     	; 0x101a <_ZL6is_lanPKhS0_+0x48>
     ff0:	dc 01       	movw	r26, r24
     ff2:	11 96       	adiw	r26, 0x01	; 1
     ff4:	31 96       	adiw	r30, 0x01	; 1
     ff6:	c6 e0       	ldi	r28, 0x06	; 6
     ff8:	d7 e0       	ldi	r29, 0x07	; 7
     ffa:	04 96       	adiw	r24, 0x04	; 4
     ffc:	4d 91       	ld	r20, X+
     ffe:	21 91       	ld	r18, Z+
    1000:	39 91       	ld	r19, Y+
    1002:	24 27       	eor	r18, r20
    1004:	23 23       	and	r18, r19
    1006:	59 f4       	brne	.+22     	; 0x101e <_ZL6is_lanPKhS0_+0x4c>
    1008:	a8 17       	cp	r26, r24
    100a:	b9 07       	cpc	r27, r25
    100c:	b9 f7       	brne	.-18     	; 0xffc <_ZL6is_lanPKhS0_+0x2a>
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	07 c0       	rjmp	.+14     	; 0x1020 <_ZL6is_lanPKhS0_+0x4e>
    1012:	80 e0       	ldi	r24, 0x00	; 0
    1014:	05 c0       	rjmp	.+10     	; 0x1020 <_ZL6is_lanPKhS0_+0x4e>
    1016:	80 e0       	ldi	r24, 0x00	; 0
    1018:	03 c0       	rjmp	.+6      	; 0x1020 <_ZL6is_lanPKhS0_+0x4e>
    101a:	80 e0       	ldi	r24, 0x00	; 0
    101c:	01 c0       	rjmp	.+2      	; 0x1020 <_ZL6is_lanPKhS0_+0x4e>
    101e:	80 e0       	ldi	r24, 0x00	; 0
    1020:	df 91       	pop	r29
    1022:	cf 91       	pop	r28
    1024:	08 95       	ret

00001026 <_ZL20fill_ip_hdr_checksumv>:
    1026:	e3 ef       	ldi	r30, 0xF3	; 243
    1028:	f4 e0       	ldi	r31, 0x04	; 4
    102a:	10 8e       	std	Z+24, r1	; 0x18
    102c:	11 8e       	std	Z+25, r1	; 0x19
    102e:	80 e4       	ldi	r24, 0x40	; 64
    1030:	84 8b       	std	Z+20, r24	; 0x14
    1032:	15 8a       	std	Z+21, r1	; 0x15
    1034:	86 8b       	std	Z+22, r24	; 0x16
    1036:	20 e0       	ldi	r18, 0x00	; 0
    1038:	44 e1       	ldi	r20, 0x14	; 20
    103a:	50 e0       	ldi	r21, 0x00	; 0
    103c:	6e e0       	ldi	r22, 0x0E	; 14
    103e:	88 e1       	ldi	r24, 0x18	; 24
    1040:	57 cf       	rjmp	.-338    	; 0xef0 <_ZL13fill_checksumhhjh>
    1042:	08 95       	ret

00001044 <_ZL7setMACsPKh>:
    1044:	bc 01       	movw	r22, r24
    1046:	83 ef       	ldi	r24, 0xF3	; 243
    1048:	94 e0       	ldi	r25, 0x04	; 4
    104a:	e0 d2       	rcall	.+1472   	; 0x160c <_ZN9EtherCard7copyMacEPhPKh>
    104c:	6d e0       	ldi	r22, 0x0D	; 13
    104e:	77 e0       	ldi	r23, 0x07	; 7
    1050:	89 ef       	ldi	r24, 0xF9	; 249
    1052:	94 e0       	ldi	r25, 0x04	; 4
    1054:	db c2       	rjmp	.+1462   	; 0x160c <_ZN9EtherCard7copyMacEPhPKh>
    1056:	08 95       	ret

00001058 <_ZL11make_eth_ipv>:
    1058:	89 ef       	ldi	r24, 0xF9	; 249
    105a:	94 e0       	ldi	r25, 0x04	; 4
    105c:	f3 df       	rcall	.-26     	; 0x1044 <_ZL7setMACsPKh>
    105e:	6d e0       	ldi	r22, 0x0D	; 13
    1060:	75 e0       	ldi	r23, 0x05	; 5
    1062:	81 e1       	ldi	r24, 0x11	; 17
    1064:	95 e0       	ldi	r25, 0x05	; 5
    1066:	c5 d2       	rcall	.+1418   	; 0x15f2 <_ZN9EtherCard6copyIpEPhPKh>
    1068:	69 e0       	ldi	r22, 0x09	; 9
    106a:	77 e0       	ldi	r23, 0x07	; 7
    106c:	8d e0       	ldi	r24, 0x0D	; 13
    106e:	95 e0       	ldi	r25, 0x05	; 5
    1070:	c0 d2       	rcall	.+1408   	; 0x15f2 <_ZN9EtherCard6copyIpEPhPKh>
    1072:	d9 cf       	rjmp	.-78     	; 0x1026 <_ZL20fill_ip_hdr_checksumv>
    1074:	08 95       	ret

00001076 <_ZL12setMACandIPsPKhS0_>:
    1076:	cf 93       	push	r28
    1078:	df 93       	push	r29
    107a:	eb 01       	movw	r28, r22
    107c:	e3 df       	rcall	.-58     	; 0x1044 <_ZL7setMACsPKh>
    107e:	be 01       	movw	r22, r28
    1080:	81 e1       	ldi	r24, 0x11	; 17
    1082:	95 e0       	ldi	r25, 0x05	; 5
    1084:	b6 d2       	rcall	.+1388   	; 0x15f2 <_ZN9EtherCard6copyIpEPhPKh>
    1086:	69 e0       	ldi	r22, 0x09	; 9
    1088:	77 e0       	ldi	r23, 0x07	; 7
    108a:	8d e0       	ldi	r24, 0x0D	; 13
    108c:	95 e0       	ldi	r25, 0x05	; 5
    108e:	b1 d2       	rcall	.+1378   	; 0x15f2 <_ZN9EtherCard6copyIpEPhPKh>
    1090:	df 91       	pop	r29
    1092:	cf 91       	pop	r28
    1094:	08 95       	ret

00001096 <_ZL16client_store_macPhS_>:
    1096:	cf 93       	push	r28
    1098:	df 93       	push	r29
    109a:	eb 01       	movw	r28, r22
    109c:	44 e0       	ldi	r20, 0x04	; 4
    109e:	50 e0       	ldi	r21, 0x00	; 0
    10a0:	bc 01       	movw	r22, r24
    10a2:	8f e0       	ldi	r24, 0x0F	; 15
    10a4:	95 e0       	ldi	r25, 0x05	; 5
    10a6:	0e 94 57 2a 	call	0x54ae	; 0x54ae <memcmp>
    10aa:	89 2b       	or	r24, r25
    10ac:	31 f4       	brne	.+12     	; 0x10ba <_ZL16client_store_macPhS_+0x24>
    10ae:	69 e0       	ldi	r22, 0x09	; 9
    10b0:	75 e0       	ldi	r23, 0x05	; 5
    10b2:	ce 01       	movw	r24, r28
    10b4:	ab d2       	rcall	.+1366   	; 0x160c <_ZN9EtherCard7copyMacEPhPKh>
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	01 c0       	rjmp	.+2      	; 0x10bc <_ZL16client_store_macPhS_+0x26>
    10ba:	80 e0       	ldi	r24, 0x00	; 0
    10bc:	df 91       	pop	r29
    10be:	cf 91       	pop	r28
    10c0:	08 95       	ret

000010c2 <_ZL17client_arp_whohasPh>:
    10c2:	0f 93       	push	r16
    10c4:	1f 93       	push	r17
    10c6:	cf 93       	push	r28
    10c8:	8c 01       	movw	r16, r24
    10ca:	85 e2       	ldi	r24, 0x25	; 37
    10cc:	92 e0       	ldi	r25, 0x02	; 2
    10ce:	ba df       	rcall	.-140    	; 0x1044 <_ZL7setMACsPKh>
    10d0:	e3 ef       	ldi	r30, 0xF3	; 243
    10d2:	f4 e0       	ldi	r31, 0x04	; 4
    10d4:	88 e0       	ldi	r24, 0x08	; 8
    10d6:	84 87       	std	Z+12, r24	; 0x0c
    10d8:	c6 e0       	ldi	r28, 0x06	; 6
    10da:	c5 87       	std	Z+13, r28	; 0x0d
    10dc:	48 e0       	ldi	r20, 0x08	; 8
    10de:	50 e0       	ldi	r21, 0x00	; 0
    10e0:	6f e7       	ldi	r22, 0x7F	; 127
    10e2:	72 e0       	ldi	r23, 0x02	; 2
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	95 e0       	ldi	r25, 0x05	; 5
    10e8:	0e 94 4e 2a 	call	0x549c	; 0x549c <memcpy_P>
    10ec:	e3 e1       	ldi	r30, 0x13	; 19
    10ee:	f5 e0       	ldi	r31, 0x05	; 5
    10f0:	df 01       	movw	r26, r30
    10f2:	1d 92       	st	X+, r1
    10f4:	ca 95       	dec	r28
    10f6:	e9 f7       	brne	.-6      	; 0x10f2 <_ZL17client_arp_whohasPh+0x30>
    10f8:	6d e0       	ldi	r22, 0x0D	; 13
    10fa:	77 e0       	ldi	r23, 0x07	; 7
    10fc:	89 e0       	ldi	r24, 0x09	; 9
    10fe:	95 e0       	ldi	r25, 0x05	; 5
    1100:	85 d2       	rcall	.+1290   	; 0x160c <_ZN9EtherCard7copyMacEPhPKh>
    1102:	b8 01       	movw	r22, r16
    1104:	89 e1       	ldi	r24, 0x19	; 25
    1106:	95 e0       	ldi	r25, 0x05	; 5
    1108:	74 d2       	rcall	.+1256   	; 0x15f2 <_ZN9EtherCard6copyIpEPhPKh>
    110a:	69 e0       	ldi	r22, 0x09	; 9
    110c:	77 e0       	ldi	r23, 0x07	; 7
    110e:	8f e0       	ldi	r24, 0x0F	; 15
    1110:	95 e0       	ldi	r25, 0x05	; 5
    1112:	6f d2       	rcall	.+1246   	; 0x15f2 <_ZN9EtherCard6copyIpEPhPKh>
    1114:	8a e2       	ldi	r24, 0x2A	; 42
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	c6 dd       	rcall	.-1140   	; 0xca6 <_ZN8ENC28J6010packetSendEj>
    111a:	cf 91       	pop	r28
    111c:	1f 91       	pop	r17
    111e:	0f 91       	pop	r16
    1120:	08 95       	ret

00001122 <_ZN9EtherCard10udpPrepareEjPKhj>:
    1122:	ef 92       	push	r14
    1124:	ff 92       	push	r15
    1126:	0f 93       	push	r16
    1128:	1f 93       	push	r17
    112a:	cf 93       	push	r28
    112c:	df 93       	push	r29
    112e:	18 2f       	mov	r17, r24
    1130:	09 2f       	mov	r16, r25
    1132:	eb 01       	movw	r28, r22
    1134:	f4 2e       	mov	r15, r20
    1136:	e5 2e       	mov	r14, r21
    1138:	89 e0       	ldi	r24, 0x09	; 9
    113a:	97 e0       	ldi	r25, 0x07	; 7
    113c:	4a df       	rcall	.-364    	; 0xfd2 <_ZL6is_lanPKhS0_>
    113e:	88 23       	and	r24, r24
    1140:	29 f0       	breq	.+10     	; 0x114c <_ZN9EtherCard10udpPrepareEjPKhj+0x2a>
    1142:	be 01       	movw	r22, r28
    1144:	8e e1       	ldi	r24, 0x1E	; 30
    1146:	97 e0       	ldi	r25, 0x07	; 7
    1148:	96 df       	rcall	.-212    	; 0x1076 <_ZL12setMACandIPsPKhS0_>
    114a:	04 c0       	rjmp	.+8      	; 0x1154 <_ZN9EtherCard10udpPrepareEjPKhj+0x32>
    114c:	be 01       	movw	r22, r28
    114e:	84 e1       	ldi	r24, 0x14	; 20
    1150:	97 e0       	ldi	r25, 0x07	; 7
    1152:	91 df       	rcall	.-222    	; 0x1076 <_ZL12setMACandIPsPKhS0_>
    1154:	88 81       	ld	r24, Y
    1156:	80 7f       	andi	r24, 0xF0	; 240
    1158:	80 3e       	cpi	r24, 0xE0	; 224
    115a:	91 f0       	breq	.+36     	; 0x1180 <_ZN9EtherCard10udpPrepareEjPKhj+0x5e>
    115c:	88 81       	ld	r24, Y
    115e:	99 81       	ldd	r25, Y+1	; 0x01
    1160:	aa 81       	ldd	r26, Y+2	; 0x02
    1162:	bb 81       	ldd	r27, Y+3	; 0x03
    1164:	8f 3f       	cpi	r24, 0xFF	; 255
    1166:	9f 4f       	sbci	r25, 0xFF	; 255
    1168:	af 4f       	sbci	r26, 0xFF	; 255
    116a:	bf 4f       	sbci	r27, 0xFF	; 255
    116c:	49 f0       	breq	.+18     	; 0x1180 <_ZN9EtherCard10udpPrepareEjPKhj+0x5e>
    116e:	44 e0       	ldi	r20, 0x04	; 4
    1170:	50 e0       	ldi	r21, 0x00	; 0
    1172:	be 01       	movw	r22, r28
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	97 e0       	ldi	r25, 0x07	; 7
    1178:	0e 94 57 2a 	call	0x54ae	; 0x54ae <memcmp>
    117c:	89 2b       	or	r24, r25
    117e:	29 f4       	brne	.+10     	; 0x118a <_ZN9EtherCard10udpPrepareEjPKhj+0x68>
    1180:	65 e2       	ldi	r22, 0x25	; 37
    1182:	72 e0       	ldi	r23, 0x02	; 2
    1184:	83 ef       	ldi	r24, 0xF3	; 243
    1186:	94 e0       	ldi	r25, 0x04	; 4
    1188:	41 d2       	rcall	.+1154   	; 0x160c <_ZN9EtherCard7copyMacEPhPKh>
    118a:	c3 ef       	ldi	r28, 0xF3	; 243
    118c:	d4 e0       	ldi	r29, 0x04	; 4
    118e:	88 e0       	ldi	r24, 0x08	; 8
    1190:	8c 87       	std	Y+12, r24	; 0x0c
    1192:	1d 86       	std	Y+13, r1	; 0x0d
    1194:	49 e0       	ldi	r20, 0x09	; 9
    1196:	50 e0       	ldi	r21, 0x00	; 0
    1198:	66 e7       	ldi	r22, 0x76	; 118
    119a:	72 e0       	ldi	r23, 0x02	; 2
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	95 e0       	ldi	r25, 0x05	; 5
    11a0:	0e 94 4e 2a 	call	0x549c	; 0x549c <memcpy_P>
    11a4:	18 8a       	std	Y+16, r1	; 0x10
    11a6:	81 e1       	ldi	r24, 0x11	; 17
    11a8:	8f 8b       	std	Y+23, r24	; 0x17
    11aa:	ec a2       	std	Y+36, r14	; 0x24
    11ac:	fd a2       	std	Y+37, r15	; 0x25
    11ae:	0a a3       	std	Y+34, r16	; 0x22
    11b0:	1b a3       	std	Y+35, r17	; 0x23
    11b2:	1e a2       	std	Y+38, r1	; 0x26
    11b4:	18 a6       	std	Y+40, r1	; 0x28
    11b6:	19 a6       	std	Y+41, r1	; 0x29
    11b8:	df 91       	pop	r29
    11ba:	cf 91       	pop	r28
    11bc:	1f 91       	pop	r17
    11be:	0f 91       	pop	r16
    11c0:	ff 90       	pop	r15
    11c2:	ef 90       	pop	r14
    11c4:	08 95       	ret

000011c6 <_ZN9EtherCard11udpTransmitEj>:
    11c6:	0f 93       	push	r16
    11c8:	1f 93       	push	r17
    11ca:	cf 93       	push	r28
    11cc:	df 93       	push	r29
    11ce:	ec 01       	movw	r28, r24
    11d0:	03 ef       	ldi	r16, 0xF3	; 243
    11d2:	14 e0       	ldi	r17, 0x04	; 4
    11d4:	4c 96       	adiw	r24, 0x1c	; 28
    11d6:	f8 01       	movw	r30, r16
    11d8:	90 8b       	std	Z+16, r25	; 0x10
    11da:	81 8b       	std	Z+17, r24	; 0x11
    11dc:	24 df       	rcall	.-440    	; 0x1026 <_ZL20fill_ip_hdr_checksumv>
    11de:	ce 01       	movw	r24, r28
    11e0:	08 96       	adiw	r24, 0x08	; 8
    11e2:	f8 01       	movw	r30, r16
    11e4:	96 a3       	std	Z+38, r25	; 0x26
    11e6:	87 a3       	std	Z+39, r24	; 0x27
    11e8:	ae 01       	movw	r20, r28
    11ea:	40 5f       	subi	r20, 0xF0	; 240
    11ec:	5f 4f       	sbci	r21, 0xFF	; 255
    11ee:	21 e0       	ldi	r18, 0x01	; 1
    11f0:	6a e1       	ldi	r22, 0x1A	; 26
    11f2:	88 e2       	ldi	r24, 0x28	; 40
    11f4:	7d de       	rcall	.-774    	; 0xef0 <_ZL13fill_checksumhhjh>
    11f6:	ce 01       	movw	r24, r28
    11f8:	8a 96       	adiw	r24, 0x2a	; 42
    11fa:	55 dd       	rcall	.-1366   	; 0xca6 <_ZN8ENC28J6010packetSendEj>
    11fc:	df 91       	pop	r29
    11fe:	cf 91       	pop	r28
    1200:	1f 91       	pop	r17
    1202:	0f 91       	pop	r16
    1204:	08 95       	ret

00001206 <_ZN9EtherCard7sendUdpEPKhjjS1_j>:
    1206:	0f 93       	push	r16
    1208:	1f 93       	push	r17
    120a:	cf 93       	push	r28
    120c:	df 93       	push	r29
    120e:	d6 2f       	mov	r29, r22
    1210:	c7 2f       	mov	r28, r23
    1212:	ca 01       	movw	r24, r20
    1214:	a8 01       	movw	r20, r16
    1216:	b9 01       	movw	r22, r18
    1218:	84 df       	rcall	.-248    	; 0x1122 <_ZN9EtherCard10udpPrepareEjPKhj>
    121a:	8d 2f       	mov	r24, r29
    121c:	9c 2f       	mov	r25, r28
    121e:	81 30       	cpi	r24, 0x01	; 1
    1220:	22 e0       	ldi	r18, 0x02	; 2
    1222:	92 07       	cpc	r25, r18
    1224:	10 f0       	brcs	.+4      	; 0x122a <_ZN9EtherCard7sendUdpEPKhjjS1_j+0x24>
    1226:	80 e0       	ldi	r24, 0x00	; 0
    1228:	92 e0       	ldi	r25, 0x02	; 2
    122a:	cd df       	rcall	.-102    	; 0x11c6 <_ZN9EtherCard11udpTransmitEj>
    122c:	df 91       	pop	r29
    122e:	cf 91       	pop	r28
    1230:	1f 91       	pop	r17
    1232:	0f 91       	pop	r16
    1234:	08 95       	ret

00001236 <_ZN9EtherCard7setGwIpEPKh>:
    1236:	10 92 f4 06 	sts	0x06F4, r1	; 0x8006f4 <_ZN9EtherCard8delaycntE+0x1>
    123a:	10 92 f3 06 	sts	0x06F3, r1	; 0x8006f3 <_ZN9EtherCard8delaycntE>
    123e:	21 e0       	ldi	r18, 0x01	; 1
    1240:	20 93 13 07 	sts	0x0713, r18	; 0x800713 <_ZL9waitgwmac>
    1244:	bc 01       	movw	r22, r24
    1246:	8d ef       	ldi	r24, 0xFD	; 253
    1248:	96 e0       	ldi	r25, 0x06	; 6
    124a:	d3 c1       	rjmp	.+934    	; 0x15f2 <_ZN9EtherCard6copyIpEPhPKh>
    124c:	08 95       	ret

0000124e <_ZN9EtherCard22updateBroadcastAddressEv>:
    124e:	cf 93       	push	r28
    1250:	df 93       	push	r29
    1252:	e9 e0       	ldi	r30, 0x09	; 9
    1254:	f7 e0       	ldi	r31, 0x07	; 7
    1256:	c5 e0       	ldi	r28, 0x05	; 5
    1258:	d7 e0       	ldi	r29, 0x07	; 7
    125a:	a1 e0       	ldi	r26, 0x01	; 1
    125c:	b7 e0       	ldi	r27, 0x07	; 7
    125e:	2d e0       	ldi	r18, 0x0D	; 13
    1260:	37 e0       	ldi	r19, 0x07	; 7
    1262:	91 91       	ld	r25, Z+
    1264:	89 91       	ld	r24, Y+
    1266:	80 95       	com	r24
    1268:	89 2b       	or	r24, r25
    126a:	8d 93       	st	X+, r24
    126c:	e2 17       	cp	r30, r18
    126e:	f3 07       	cpc	r31, r19
    1270:	c1 f7       	brne	.-16     	; 0x1262 <_ZN9EtherCard22updateBroadcastAddressEv+0x14>
    1272:	df 91       	pop	r29
    1274:	cf 91       	pop	r28
    1276:	08 95       	ret

00001278 <_ZN9EtherCard10packetLoopEj>:
	gPB[ICMP_CHECKSUM_P+1]++;
	gPB[ICMP_CHECKSUM_P] += 0x08;
	EtherCard::packetSend(len);
}

uint16_t EtherCard::packetLoop (uint16_t plen) {
    1278:	cf 93       	push	r28
    127a:	df 93       	push	r29
    127c:	ec 01       	movw	r28, r24
    if (plen==0) {
    127e:	00 97       	sbiw	r24, 0x00	; 0
    1280:	09 f0       	breq	.+2      	; 0x1284 <_ZN9EtherCard10packetLoopEj+0xc>
    1282:	3f c0       	rjmp	.+126    	; 0x1302 <_ZN9EtherCard10packetLoopEj+0x8a>
        //Check every 65536 (no-packet) cycles whether we need to retry ARP request for gateway
        if ((waitgwmac & WGW_INITIAL_ARP || waitgwmac & WGW_REFRESHING) &&
    1284:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <_ZL9waitgwmac>
    1288:	85 70       	andi	r24, 0x05	; 5
    128a:	89 f0       	breq	.+34     	; 0x12ae <_ZN9EtherCard10packetLoopEj+0x36>
    128c:	80 91 f3 06 	lds	r24, 0x06F3	; 0x8006f3 <_ZN9EtherCard8delaycntE>
    1290:	90 91 f4 06 	lds	r25, 0x06F4	; 0x8006f4 <_ZN9EtherCard8delaycntE+0x1>
    1294:	89 2b       	or	r24, r25
    1296:	59 f4       	brne	.+22     	; 0x12ae <_ZN9EtherCard10packetLoopEj+0x36>
                delaycnt==0 && isLinkUp()) {
    1298:	f3 dc       	rcall	.-1562   	; 0xc80 <_ZN8ENC28J608isLinkUpEv>
}

uint16_t EtherCard::packetLoop (uint16_t plen) {
    if (plen==0) {
        //Check every 65536 (no-packet) cycles whether we need to retry ARP request for gateway
        if ((waitgwmac & WGW_INITIAL_ARP || waitgwmac & WGW_REFRESHING) &&
    129a:	88 23       	and	r24, r24
    129c:	41 f0       	breq	.+16     	; 0x12ae <_ZN9EtherCard10packetLoopEj+0x36>
                delaycnt==0 && isLinkUp()) {
            client_arp_whohas(gwip);
    129e:	8d ef       	ldi	r24, 0xFD	; 253
    12a0:	96 e0       	ldi	r25, 0x06	; 6
    12a2:	0f df       	rcall	.-482    	; 0x10c2 <_ZL17client_arp_whohasPh>
            waitgwmac |= WGW_ACCEPT_ARP_REPLY;
    12a4:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <_ZL9waitgwmac>
    12a8:	88 60       	ori	r24, 0x08	; 8
    12aa:	80 93 13 07 	sts	0x0713, r24	; 0x800713 <_ZL9waitgwmac>
        }
        delaycnt++;
    12ae:	80 91 f3 06 	lds	r24, 0x06F3	; 0x8006f3 <_ZN9EtherCard8delaycntE>
    12b2:	90 91 f4 06 	lds	r25, 0x06F4	; 0x8006f4 <_ZN9EtherCard8delaycntE+0x1>
    12b6:	01 96       	adiw	r24, 0x01	; 1
    12b8:	90 93 f4 06 	sts	0x06F4, r25	; 0x8006f4 <_ZN9EtherCard8delaycntE+0x1>
    12bc:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <_ZN9EtherCard8delaycntE>

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, dnsip) && !has_dns_mac && !waiting_for_dns_mac) {
    12c0:	69 ef       	ldi	r22, 0xF9	; 249
    12c2:	76 e0       	ldi	r23, 0x06	; 6
    12c4:	89 e0       	ldi	r24, 0x09	; 9
    12c6:	97 e0       	ldi	r25, 0x07	; 7
    12c8:	84 de       	rcall	.-760    	; 0xfd2 <_ZL6is_lanPKhS0_>
    12ca:	88 23       	and	r24, r24
    12cc:	49 f0       	breq	.+18     	; 0x12e0 <_ZN9EtherCard10packetLoopEj+0x68>
    12ce:	80 91 1c 07 	lds	r24, 0x071C	; 0x80071c <_ZL11has_dns_mac>
    12d2:	81 11       	cpse	r24, r1
    12d4:	05 c0       	rjmp	.+10     	; 0x12e0 <_ZN9EtherCard10packetLoopEj+0x68>
    12d6:	80 91 1d 07 	lds	r24, 0x071D	; 0x80071d <_ZL19waiting_for_dns_mac>
    12da:	88 23       	and	r24, r24
    12dc:	09 f4       	brne	.+2      	; 0x12e0 <_ZN9EtherCard10packetLoopEj+0x68>
    12de:	dc c0       	rjmp	.+440    	; 0x1498 <_ZN9EtherCard10packetLoopEj+0x220>
            client_arp_whohas(dnsip);
            waiting_for_dns_mac = true;
        }

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, hisip) && !has_dest_mac && !waiting_for_dest_mac) {
    12e0:	65 ef       	ldi	r22, 0xF5	; 245
    12e2:	76 e0       	ldi	r23, 0x06	; 6
    12e4:	89 e0       	ldi	r24, 0x09	; 9
    12e6:	97 e0       	ldi	r25, 0x07	; 7
    12e8:	74 de       	rcall	.-792    	; 0xfd2 <_ZL6is_lanPKhS0_>
    12ea:	88 23       	and	r24, r24
    12ec:	09 f4       	brne	.+2      	; 0x12f0 <_ZN9EtherCard10packetLoopEj+0x78>
    12ee:	f8 c0       	rjmp	.+496    	; 0x14e0 <_ZN9EtherCard10packetLoopEj+0x268>
    12f0:	80 91 1a 07 	lds	r24, 0x071A	; 0x80071a <_ZL12has_dest_mac>
    12f4:	81 11       	cpse	r24, r1
    12f6:	f4 c0       	rjmp	.+488    	; 0x14e0 <_ZN9EtherCard10packetLoopEj+0x268>
    12f8:	80 91 1b 07 	lds	r24, 0x071B	; 0x80071b <_ZL20waiting_for_dest_mac>
    12fc:	81 11       	cpse	r24, r1
    12fe:	f0 c0       	rjmp	.+480    	; 0x14e0 <_ZN9EtherCard10packetLoopEj+0x268>
    1300:	d2 c0       	rjmp	.+420    	; 0x14a6 <_ZN9EtherCard10packetLoopEj+0x22e>
    return true;
}

static uint8_t eth_type_is_arp_and_my_ip(uint16_t len) {
    return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
    1302:	89 32       	cpi	r24, 0x29	; 41
    1304:	91 05       	cpc	r25, r1
    1306:	08 f4       	brcc	.+2      	; 0x130a <_ZN9EtherCard10packetLoopEj+0x92>
    1308:	d5 c0       	rjmp	.+426    	; 0x14b4 <_ZN9EtherCard10packetLoopEj+0x23c>
        }
    return true;
}

static uint8_t eth_type_is_arp_and_my_ip(uint16_t len) {
    return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
    130a:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <_ZN8ENC28J606bufferE+0xc>
    130e:	88 30       	cpi	r24, 0x08	; 8
    1310:	09 f0       	breq	.+2      	; 0x1314 <_ZN9EtherCard10packetLoopEj+0x9c>
    1312:	e6 c0       	rjmp	.+460    	; 0x14e0 <_ZN9EtherCard10packetLoopEj+0x268>
    1314:	80 91 00 05 	lds	r24, 0x0500	; 0x800500 <_ZN8ENC28J606bufferE+0xd>
    1318:	86 30       	cpi	r24, 0x06	; 6
    131a:	09 f0       	breq	.+2      	; 0x131e <_ZN9EtherCard10packetLoopEj+0xa6>
    131c:	dd c0       	rjmp	.+442    	; 0x14d8 <_ZN9EtherCard10packetLoopEj+0x260>
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
           memcmp(gPB + ETH_ARP_DST_IP_P, EtherCard::myip, IP_LEN) == 0;
    131e:	44 e0       	ldi	r20, 0x04	; 4
    1320:	50 e0       	ldi	r21, 0x00	; 0
    1322:	69 e0       	ldi	r22, 0x09	; 9
    1324:	77 e0       	ldi	r23, 0x07	; 7
    1326:	89 e1       	ldi	r24, 0x19	; 25
    1328:	95 e0       	ldi	r25, 0x05	; 5
    132a:	0e 94 57 2a 	call	0x54ae	; 0x54ae <memcmp>
    return true;
}

static uint8_t eth_type_is_arp_and_my_ip(uint16_t len) {
    return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
    132e:	89 2b       	or	r24, r25
    1330:	09 f0       	breq	.+2      	; 0x1334 <_ZN9EtherCard10packetLoopEj+0xbc>
    1332:	d2 c0       	rjmp	.+420    	; 0x14d8 <_ZN9EtherCard10packetLoopEj+0x260>
    EtherCard::copyIp(gPB + IP_SRC_P, EtherCard::myip);
    fill_ip_hdr_checksum();
}

static void make_arp_answer_from_request() {
    setMACs(gPB + ETH_SRC_MAC);
    1334:	c3 c0       	rjmp	.+390    	; 0x14bc <_ZN9EtherCard10packetLoopEj+0x244>
    1336:	89 ef       	ldi	r24, 0xF9	; 249
    1338:	94 e0       	ldi	r25, 0x04	; 4
    133a:	84 de       	rcall	.-760    	; 0x1044 <_ZL7setMACsPKh>
    gPB[ETH_ARP_OPCODE_H_P] = ETH_ARP_OPCODE_REPLY_H_V;
    133c:	e3 ef       	ldi	r30, 0xF3	; 243
    133e:	f4 e0       	ldi	r31, 0x04	; 4
    1340:	14 8a       	std	Z+20, r1	; 0x14
    gPB[ETH_ARP_OPCODE_L_P] = ETH_ARP_OPCODE_REPLY_L_V;
    1342:	82 e0       	ldi	r24, 0x02	; 2
    EtherCard::copyMac(gPB + ETH_ARP_DST_MAC_P, gPB + ETH_ARP_SRC_MAC_P);
    1344:	85 8b       	std	Z+21, r24	; 0x15
    1346:	69 e0       	ldi	r22, 0x09	; 9
    1348:	75 e0       	ldi	r23, 0x05	; 5
    134a:	83 e1       	ldi	r24, 0x13	; 19
    134c:	95 e0       	ldi	r25, 0x05	; 5
    EtherCard::copyMac(gPB + ETH_ARP_SRC_MAC_P, EtherCard::mymac);
    134e:	5e d1       	rcall	.+700    	; 0x160c <_ZN9EtherCard7copyMacEPhPKh>
    1350:	6d e0       	ldi	r22, 0x0D	; 13
    1352:	77 e0       	ldi	r23, 0x07	; 7
    1354:	89 e0       	ldi	r24, 0x09	; 9
    1356:	95 e0       	ldi	r25, 0x05	; 5
    EtherCard::copyIp(gPB + ETH_ARP_DST_IP_P, gPB + ETH_ARP_SRC_IP_P);
    1358:	59 d1       	rcall	.+690    	; 0x160c <_ZN9EtherCard7copyMacEPhPKh>
    135a:	6f e0       	ldi	r22, 0x0F	; 15
    135c:	75 e0       	ldi	r23, 0x05	; 5
    135e:	89 e1       	ldi	r24, 0x19	; 25
    1360:	95 e0       	ldi	r25, 0x05	; 5
    EtherCard::copyIp(gPB + ETH_ARP_SRC_IP_P, EtherCard::myip);
    1362:	47 d1       	rcall	.+654    	; 0x15f2 <_ZN9EtherCard6copyIpEPhPKh>
    1364:	69 e0       	ldi	r22, 0x09	; 9
    1366:	77 e0       	ldi	r23, 0x07	; 7
    1368:	8f e0       	ldi	r24, 0x0F	; 15
    136a:	95 e0       	ldi	r25, 0x05	; 5
    136c:	42 d1       	rcall	.+644    	; 0x15f2 <_ZN9EtherCard6copyIpEPhPKh>
    EtherCard::packetSend(42);
    136e:	8a e2       	ldi	r24, 0x2A	; 42
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	99 dc       	rcall	.-1742   	; 0xca6 <_ZN8ENC28J6010packetSendEj>
    1374:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <_ZL9waitgwmac>

    if (eth_type_is_arp_and_my_ip(plen))
    {   //Service ARP request
        if (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REQ_L_V)
            make_arp_answer_from_request();
        if (waitgwmac & WGW_ACCEPT_ARP_REPLY && (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REPLY_L_V) && client_store_mac(gwip, gwmacaddr))
    1378:	83 ff       	sbrs	r24, 3
    137a:	0e c0       	rjmp	.+28     	; 0x1398 <_ZN9EtherCard10packetLoopEj+0x120>
    137c:	80 91 08 05 	lds	r24, 0x0508	; 0x800508 <_ZN8ENC28J606bufferE+0x15>
    1380:	82 30       	cpi	r24, 0x02	; 2
    1382:	51 f4       	brne	.+20     	; 0x1398 <_ZN9EtherCard10packetLoopEj+0x120>
    1384:	64 e1       	ldi	r22, 0x14	; 20
    1386:	77 e0       	ldi	r23, 0x07	; 7
    1388:	8d ef       	ldi	r24, 0xFD	; 253
    138a:	96 e0       	ldi	r25, 0x06	; 6
    138c:	84 de       	rcall	.-760    	; 0x1096 <_ZL16client_store_macPhS_>
    138e:	88 23       	and	r24, r24
    1390:	19 f0       	breq	.+6      	; 0x1398 <_ZN9EtherCard10packetLoopEj+0x120>
    1392:	82 e0       	ldi	r24, 0x02	; 2
            waitgwmac = WGW_HAVE_GW_MAC;
    1394:	80 93 13 07 	sts	0x0713, r24	; 0x800713 <_ZL9waitgwmac>
    1398:	80 91 1c 07 	lds	r24, 0x071C	; 0x80071c <_ZL11has_dns_mac>
        if (!has_dns_mac && waiting_for_dns_mac && client_store_mac(dnsip, destmacaddr)) {
    139c:	81 11       	cpse	r24, r1
    139e:	10 c0       	rjmp	.+32     	; 0x13c0 <_ZN9EtherCard10packetLoopEj+0x148>
    13a0:	80 91 1d 07 	lds	r24, 0x071D	; 0x80071d <_ZL19waiting_for_dns_mac>
    13a4:	88 23       	and	r24, r24
    13a6:	61 f0       	breq	.+24     	; 0x13c0 <_ZN9EtherCard10packetLoopEj+0x148>
    13a8:	6e e1       	ldi	r22, 0x1E	; 30
    13aa:	77 e0       	ldi	r23, 0x07	; 7
    13ac:	89 ef       	ldi	r24, 0xF9	; 249
    13ae:	96 e0       	ldi	r25, 0x06	; 6
    13b0:	72 de       	rcall	.-796    	; 0x1096 <_ZL16client_store_macPhS_>
    13b2:	88 23       	and	r24, r24
    13b4:	29 f0       	breq	.+10     	; 0x13c0 <_ZN9EtherCard10packetLoopEj+0x148>
    13b6:	81 e0       	ldi	r24, 0x01	; 1
            has_dns_mac = true;
    13b8:	80 93 1c 07 	sts	0x071C, r24	; 0x80071c <_ZL11has_dns_mac>
    13bc:	10 92 1d 07 	sts	0x071D, r1	; 0x80071d <_ZL19waiting_for_dns_mac>
            waiting_for_dns_mac = false;
    13c0:	80 91 1a 07 	lds	r24, 0x071A	; 0x80071a <_ZL12has_dest_mac>
        }
        if (!has_dest_mac && waiting_for_dest_mac && client_store_mac(hisip, destmacaddr)) {
    13c4:	81 11       	cpse	r24, r1
    13c6:	8c c0       	rjmp	.+280    	; 0x14e0 <_ZN9EtherCard10packetLoopEj+0x268>
    13c8:	80 91 1b 07 	lds	r24, 0x071B	; 0x80071b <_ZL20waiting_for_dest_mac>
    13cc:	88 23       	and	r24, r24
    13ce:	09 f4       	brne	.+2      	; 0x13d2 <_ZN9EtherCard10packetLoopEj+0x15a>
    13d0:	87 c0       	rjmp	.+270    	; 0x14e0 <_ZN9EtherCard10packetLoopEj+0x268>
    13d2:	6e e1       	ldi	r22, 0x1E	; 30
    13d4:	77 e0       	ldi	r23, 0x07	; 7
    13d6:	85 ef       	ldi	r24, 0xF5	; 245
    13d8:	96 e0       	ldi	r25, 0x06	; 6
    13da:	5d de       	rcall	.-838    	; 0x1096 <_ZL16client_store_macPhS_>
    13dc:	88 23       	and	r24, r24
    13de:	09 f4       	brne	.+2      	; 0x13e2 <_ZN9EtherCard10packetLoopEj+0x16a>
    13e0:	7f c0       	rjmp	.+254    	; 0x14e0 <_ZN9EtherCard10packetLoopEj+0x268>
    13e2:	81 e0       	ldi	r24, 0x01	; 1
            has_dest_mac = true;
    13e4:	80 93 1a 07 	sts	0x071A, r24	; 0x80071a <_ZL12has_dest_mac>
    13e8:	10 92 1b 07 	sts	0x071B, r1	; 0x80071b <_ZL20waiting_for_dest_mac>
            waiting_for_dest_mac = false;
    13ec:	79 c0       	rjmp	.+242    	; 0x14e0 <_ZN9EtherCard10packetLoopEj+0x268>
    13ee:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <_ZN8ENC28J606bufferE+0xc>
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
           memcmp(gPB + ETH_ARP_DST_IP_P, EtherCard::myip, IP_LEN) == 0;
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
    13f2:	88 30       	cpi	r24, 0x08	; 8
    13f4:	09 f0       	breq	.+2      	; 0x13f8 <_ZN9EtherCard10packetLoopEj+0x180>
    13f6:	74 c0       	rjmp	.+232    	; 0x14e0 <_ZN9EtherCard10packetLoopEj+0x268>
    13f8:	80 91 00 05 	lds	r24, 0x0500	; 0x800500 <_ZN8ENC28J606bufferE+0xd>
    13fc:	81 11       	cpse	r24, r1
    13fe:	70 c0       	rjmp	.+224    	; 0x14e0 <_ZN9EtherCard10packetLoopEj+0x268>
    1400:	80 91 01 05 	lds	r24, 0x0501	; 0x800501 <_ZN8ENC28J606bufferE+0xe>
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
    1404:	85 34       	cpi	r24, 0x45	; 69
    1406:	09 f0       	breq	.+2      	; 0x140a <_ZN9EtherCard10packetLoopEj+0x192>
    1408:	6b c0       	rjmp	.+214    	; 0x14e0 <_ZN9EtherCard10packetLoopEj+0x268>
    140a:	44 e0       	ldi	r20, 0x04	; 4
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
           (memcmp(gPB + IP_DST_P, EtherCard::myip, IP_LEN) == 0  //not my IP
    140c:	50 e0       	ldi	r21, 0x00	; 0
    140e:	69 e0       	ldi	r22, 0x09	; 9
    1410:	77 e0       	ldi	r23, 0x07	; 7
    1412:	81 e1       	ldi	r24, 0x11	; 17
    1414:	95 e0       	ldi	r25, 0x05	; 5
    1416:	0e 94 57 2a 	call	0x54ae	; 0x54ae <memcmp>
    141a:	89 2b       	or	r24, r25
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
    141c:	09 f4       	brne	.+2      	; 0x1420 <_ZN9EtherCard10packetLoopEj+0x1a8>
    141e:	54 c0       	rjmp	.+168    	; 0x14c8 <_ZN9EtherCard10packetLoopEj+0x250>
    1420:	44 e0       	ldi	r20, 0x04	; 4
           (memcmp(gPB + IP_DST_P, EtherCard::myip, IP_LEN) == 0  //not my IP
            || (memcmp(gPB + IP_DST_P, EtherCard::broadcastip, IP_LEN) == 0) //not subnet broadcast
    1422:	50 e0       	ldi	r21, 0x00	; 0
    1424:	61 e0       	ldi	r22, 0x01	; 1
    1426:	77 e0       	ldi	r23, 0x07	; 7
    1428:	81 e1       	ldi	r24, 0x11	; 17
    142a:	95 e0       	ldi	r25, 0x05	; 5
    142c:	0e 94 57 2a 	call	0x54ae	; 0x54ae <memcmp>
    1430:	89 2b       	or	r24, r25
    1432:	09 f4       	brne	.+2      	; 0x1436 <_ZN9EtherCard10packetLoopEj+0x1be>
    1434:	49 c0       	rjmp	.+146    	; 0x14c8 <_ZN9EtherCard10packetLoopEj+0x250>
    1436:	44 e0       	ldi	r20, 0x04	; 4
            || (memcmp(gPB + IP_DST_P, allOnes, IP_LEN) == 0)); //not global broadcasts
    1438:	50 e0       	ldi	r21, 0x00	; 0
    143a:	65 e2       	ldi	r22, 0x25	; 37
    143c:	72 e0       	ldi	r23, 0x02	; 2
    143e:	81 e1       	ldi	r24, 0x11	; 17
    1440:	95 e0       	ldi	r25, 0x05	; 5
    1442:	0e 94 57 2a 	call	0x54ae	; 0x54ae <memcmp>
    1446:	89 2b       	or	r24, r25
    1448:	09 f0       	breq	.+2      	; 0x144c <_ZN9EtherCard10packetLoopEj+0x1d4>
    144a:	4a c0       	rjmp	.+148    	; 0x14e0 <_ZN9EtherCard10packetLoopEj+0x268>
    144c:	3d c0       	rjmp	.+122    	; 0x14c8 <_ZN9EtherCard10packetLoopEj+0x250>
    144e:	80 91 15 05 	lds	r24, 0x0515	; 0x800515 <_ZN8ENC28J606bufferE+0x22>
        //!@todo Add other protocols (and make each optional at compile time)
        return 0;
    }
	
	//To handle pinging
	if (gPB[IP_PROTO_P]==IP_PROTO_ICMP_V && gPB[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V)
    1452:	88 30       	cpi	r24, 0x08	; 8
    1454:	c9 f4       	brne	.+50     	; 0x1488 <_ZN9EtherCard10packetLoopEj+0x210>
	{   //Service ICMP echo request (ping)
		if (icmp_cb)
    1456:	e0 91 24 07 	lds	r30, 0x0724	; 0x800724 <_ZL7icmp_cb>
    145a:	f0 91 25 07 	lds	r31, 0x0725	; 0x800725 <_ZL7icmp_cb+0x1>
    145e:	30 97       	sbiw	r30, 0x00	; 0
    1460:	19 f0       	breq	.+6      	; 0x1468 <_ZN9EtherCard10packetLoopEj+0x1f0>
		(*icmp_cb)(&(gPB[IP_SRC_P]));
    1462:	8d e0       	ldi	r24, 0x0D	; 13
    1464:	95 e0       	ldi	r25, 0x05	; 5
    1466:	19 95       	eicall
void EtherCard::registerPingCallback (void (*callback)(uint8_t *srcip)) {
    icmp_cb = callback;
}

static void make_echo_reply_from_request(uint16_t len) {
	make_eth_ip();
    1468:	f7 dd       	rcall	.-1042   	; 0x1058 <_ZL11make_eth_ipv>
	gPB[ICMP_TYPE_P] = ICMP_TYPE_ECHOREPLY_V;
    146a:	e3 ef       	ldi	r30, 0xF3	; 243
    146c:	f4 e0       	ldi	r31, 0x04	; 4
	if (gPB[ICMP_CHECKSUM_P] > (0xFF-0x08))
    146e:	12 a2       	std	Z+34, r1	; 0x22
    1470:	84 a1       	ldd	r24, Z+36	; 0x24
    1472:	88 3f       	cpi	r24, 0xF8	; 248
	gPB[ICMP_CHECKSUM_P+1]++;
    1474:	18 f0       	brcs	.+6      	; 0x147c <_ZN9EtherCard10packetLoopEj+0x204>
    1476:	95 a1       	ldd	r25, Z+37	; 0x25
    1478:	9f 5f       	subi	r25, 0xFF	; 255
	gPB[ICMP_CHECKSUM_P] += 0x08;
    147a:	95 a3       	std	Z+37, r25	; 0x25
    147c:	88 5f       	subi	r24, 0xF8	; 248
	EtherCard::packetSend(len);
    147e:	80 93 17 05 	sts	0x0517, r24	; 0x800517 <_ZN8ENC28J606bufferE+0x24>
    1482:	ce 01       	movw	r24, r28
    1484:	10 dc       	rcall	.-2016   	; 0xca6 <_ZN8ENC28J6010packetSendEj>
		make_echo_reply_from_request(plen);
		return 0;
	}

#if ETHERCARD_UDPSERVER
    if (ether.udpServerListening() && gPB[IP_PROTO_P]==IP_PROTO_UDP_V)
    1486:	2c c0       	rjmp	.+88     	; 0x14e0 <_ZN9EtherCard10packetLoopEj+0x268>
    1488:	4a d0       	rcall	.+148    	; 0x151e <_ZN9EtherCard18udpServerListeningEv>
    148a:	88 23       	and	r24, r24
    148c:	49 f1       	breq	.+82     	; 0x14e0 <_ZN9EtherCard10packetLoopEj+0x268>
    148e:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <_ZN8ENC28J606bufferE+0x17>
    1492:	81 31       	cpi	r24, 0x11	; 17
    1494:	29 f5       	brne	.+74     	; 0x14e0 <_ZN9EtherCard10packetLoopEj+0x268>
        }
        delaycnt++;

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, dnsip) && !has_dns_mac && !waiting_for_dns_mac) {
            client_arp_whohas(dnsip);
    1496:	1d c0       	rjmp	.+58     	; 0x14d2 <_ZN9EtherCard10packetLoopEj+0x25a>
    1498:	89 ef       	ldi	r24, 0xF9	; 249
    149a:	96 e0       	ldi	r25, 0x06	; 6
    149c:	12 de       	rcall	.-988    	; 0x10c2 <_ZL17client_arp_whohasPh>
            waiting_for_dns_mac = true;
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	80 93 1d 07 	sts	0x071D, r24	; 0x80071d <_ZL19waiting_for_dns_mac>
    14a4:	1d cf       	rjmp	.-454    	; 0x12e0 <_ZN9EtherCard10packetLoopEj+0x68>
        }

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, hisip) && !has_dest_mac && !waiting_for_dest_mac) {
            client_arp_whohas(hisip);
    14a6:	85 ef       	ldi	r24, 0xF5	; 245
    14a8:	96 e0       	ldi	r25, 0x06	; 6
    14aa:	0b de       	rcall	.-1002   	; 0x10c2 <_ZL17client_arp_whohasPh>
    14ac:	81 e0       	ldi	r24, 0x01	; 1
            waiting_for_dest_mac = true;
    14ae:	80 93 1b 07 	sts	0x071B, r24	; 0x80071b <_ZL20waiting_for_dest_mac>
    14b2:	16 c0       	rjmp	.+44     	; 0x14e0 <_ZN9EtherCard10packetLoopEj+0x268>
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
    14b4:	8a 97       	sbiw	r24, 0x2a	; 42
    14b6:	08 f0       	brcs	.+2      	; 0x14ba <_ZN9EtherCard10packetLoopEj+0x242>
    14b8:	9a cf       	rjmp	.-204    	; 0x13ee <_ZN9EtherCard10packetLoopEj+0x176>
    14ba:	12 c0       	rjmp	.+36     	; 0x14e0 <_ZN9EtherCard10packetLoopEj+0x268>
        return 0;
    }

    if (eth_type_is_arp_and_my_ip(plen))
    {   //Service ARP request
        if (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REQ_L_V)
    14bc:	80 91 08 05 	lds	r24, 0x0508	; 0x800508 <_ZN8ENC28J606bufferE+0x15>
    14c0:	81 30       	cpi	r24, 0x01	; 1
    14c2:	09 f0       	breq	.+2      	; 0x14c6 <_ZN9EtherCard10packetLoopEj+0x24e>
    14c4:	57 cf       	rjmp	.-338    	; 0x1374 <_ZN9EtherCard10packetLoopEj+0xfc>
    14c6:	37 cf       	rjmp	.-402    	; 0x1336 <_ZN9EtherCard10packetLoopEj+0xbe>
        //!@todo Add other protocols (and make each optional at compile time)
        return 0;
    }
	
	//To handle pinging
	if (gPB[IP_PROTO_P]==IP_PROTO_ICMP_V && gPB[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V)
    14c8:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <_ZN8ENC28J606bufferE+0x17>
    14cc:	81 30       	cpi	r24, 0x01	; 1
    14ce:	e1 f6       	brne	.-72     	; 0x1488 <_ZN9EtherCard10packetLoopEj+0x210>
    14d0:	be cf       	rjmp	.-132    	; 0x144e <_ZN9EtherCard10packetLoopEj+0x1d6>
	}

#if ETHERCARD_UDPSERVER
    if (ether.udpServerListening() && gPB[IP_PROTO_P]==IP_PROTO_UDP_V)
    {   //Call UDP server handler (callback) if one is defined for this packet
        if(ether.udpServerHasProcessedPacket(plen))
    14d2:	ce 01       	movw	r24, r28
    14d4:	2b d0       	rcall	.+86     	; 0x152c <_ZN9EtherCard27udpServerHasProcessedPacketEj>
    14d6:	04 c0       	rjmp	.+8      	; 0x14e0 <_ZN9EtherCard10packetLoopEj+0x268>
    14d8:	ca 32       	cpi	r28, 0x2A	; 42
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
    14da:	d1 05       	cpc	r29, r1
    14dc:	08 f0       	brcs	.+2      	; 0x14e0 <_ZN9EtherCard10packetLoopEj+0x268>
    14de:	8c cf       	rjmp	.-232    	; 0x13f8 <_ZN9EtherCard10packetLoopEj+0x180>
    14e0:	80 e0       	ldi	r24, 0x00	; 0

    if (plen<54 || gPB[IP_PROTO_P]!=IP_PROTO_TCP_V )
        return 0; //from here on we are only interested in TCP-packets; these are longer than 54 bytes
		
	return 0;
}
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	df 91       	pop	r29
    14e6:	cf 91       	pop	r28
    14e8:	08 95       	ret

000014ea <_ZN9EtherCard21udpServerListenOnPortEPFvjPhjPKcjEj>:
    14ea:	9c 01       	movw	r18, r24
    {
        if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((uint8_t) listeners[i].port)) {
            listeners[i].listening = true;
        }
    }
}
    14ec:	90 91 26 07 	lds	r25, 0x0726	; 0x800726 <numListeners>
    14f0:	98 30       	cpi	r25, 0x08	; 8
    14f2:	a0 f4       	brcc	.+40     	; 0x151c <_ZN9EtherCard21udpServerListenOnPortEPFvjPhjPKcjEj+0x32>
    14f4:	e9 2f       	mov	r30, r25
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	af 01       	movw	r20, r30
    14fa:	44 0f       	add	r20, r20
    14fc:	55 1f       	adc	r21, r21
    14fe:	44 0f       	add	r20, r20
    1500:	55 1f       	adc	r21, r21
    1502:	e4 0f       	add	r30, r20
    1504:	f5 1f       	adc	r31, r21
    1506:	e9 5d       	subi	r30, 0xD9	; 217
    1508:	f8 4f       	sbci	r31, 0xF8	; 248
    150a:	31 83       	std	Z+1, r19	; 0x01
    150c:	20 83       	st	Z, r18
    150e:	73 83       	std	Z+3, r23	; 0x03
    1510:	62 83       	std	Z+2, r22	; 0x02
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	84 83       	std	Z+4, r24	; 0x04
    1516:	9f 5f       	subi	r25, 0xFF	; 255
    1518:	90 93 26 07 	sts	0x0726, r25	; 0x800726 <numListeners>
    151c:	08 95       	ret

0000151e <_ZN9EtherCard18udpServerListeningEv>:

bool EtherCard::udpServerListening() {
    return numListeners > 0;
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	90 91 26 07 	lds	r25, 0x0726	; 0x800726 <numListeners>
    1524:	91 11       	cpse	r25, r1
    1526:	01 c0       	rjmp	.+2      	; 0x152a <_ZN9EtherCard18udpServerListeningEv+0xc>
    1528:	80 e0       	ldi	r24, 0x00	; 0
}
    152a:	08 95       	ret

0000152c <_ZN9EtherCard27udpServerHasProcessedPacketEj>:

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    152c:	8f 92       	push	r8
    152e:	9f 92       	push	r9
    1530:	bf 92       	push	r11
    1532:	cf 92       	push	r12
    1534:	df 92       	push	r13
    1536:	ef 92       	push	r14
    1538:	ff 92       	push	r15
    153a:	0f 93       	push	r16
    153c:	1f 93       	push	r17
    153e:	cf 93       	push	r28
    1540:	df 93       	push	r29
    bool packetProcessed = false;
    for(int i = 0; i < numListeners; i++)
    1542:	80 91 26 07 	lds	r24, 0x0726	; 0x800726 <numListeners>
    1546:	88 23       	and	r24, r24
    1548:	09 f4       	brne	.+2      	; 0x154c <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x20>
    154a:	46 c0       	rjmp	.+140    	; 0x15d8 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0xac>
    154c:	c7 e2       	ldi	r28, 0x27	; 39
    154e:	d7 e0       	ldi	r29, 0x07	; 7
    1550:	e1 2c       	mov	r14, r1
    1552:	f1 2c       	mov	r15, r1
    1554:	80 e0       	ldi	r24, 0x00	; 0
    {
        if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((uint8_t) listeners[i].port) && listeners[i].listening)
    1556:	0f 2e       	mov	r0, r31
    1558:	f3 ef       	ldi	r31, 0xF3	; 243
    155a:	cf 2e       	mov	r12, r31
    155c:	f4 e0       	ldi	r31, 0x04	; 4
    155e:	df 2e       	mov	r13, r31
    1560:	f0 2d       	mov	r31, r0
                listeners[i].port,
                gPB + IP_SRC_P,
                (gPB[UDP_SRC_PORT_H_P] << 8) | gPB[UDP_SRC_PORT_L_P],
                (const char *) (gPB + UDP_DATA_P),
                datalen);
            packetProcessed = true;
    1562:	bb 24       	eor	r11, r11
    1564:	b3 94       	inc	r11

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    bool packetProcessed = false;
    for(int i = 0; i < numListeners; i++)
    {
        if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((uint8_t) listeners[i].port) && listeners[i].listening)
    1566:	aa 81       	ldd	r26, Y+2	; 0x02
    1568:	bb 81       	ldd	r27, Y+3	; 0x03
    156a:	f6 01       	movw	r30, r12
    156c:	24 a1       	ldd	r18, Z+36	; 0x24
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	4b 2f       	mov	r20, r27
    1572:	55 27       	eor	r21, r21
    1574:	24 17       	cp	r18, r20
    1576:	35 07       	cpc	r19, r21
    1578:	21 f5       	brne	.+72     	; 0x15c2 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x96>
    157a:	25 a1       	ldd	r18, Z+37	; 0x25
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	ad 01       	movw	r20, r26
    1580:	55 27       	eor	r21, r21
    1582:	24 17       	cp	r18, r20
    1584:	35 07       	cpc	r19, r21
    1586:	e9 f4       	brne	.+58     	; 0x15c2 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x96>
    1588:	9c 81       	ldd	r25, Y+4	; 0x04
    158a:	99 23       	and	r25, r25
    158c:	d1 f0       	breq	.+52     	; 0x15c2 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x96>
            listeners[i].callback(
                listeners[i].port,
                gPB + IP_SRC_P,
                (gPB[UDP_SRC_PORT_H_P] << 8) | gPB[UDP_SRC_PORT_L_P],
                (const char *) (gPB + UDP_DATA_P),
                datalen);
    158e:	07 a1       	ldd	r16, Z+39	; 0x27
    1590:	10 e0       	ldi	r17, 0x00	; 0
    1592:	08 50       	subi	r16, 0x08	; 8
    1594:	11 09       	sbc	r17, r1
    1596:	86 a1       	ldd	r24, Z+38	; 0x26
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	98 2f       	mov	r25, r24
    159c:	88 27       	eor	r24, r24
    159e:	08 0f       	add	r16, r24
    15a0:	19 1f       	adc	r17, r25
    15a2:	42 a1       	ldd	r20, Z+34	; 0x22
    15a4:	50 e0       	ldi	r21, 0x00	; 0
    15a6:	54 2f       	mov	r21, r20
    15a8:	44 27       	eor	r20, r20
    15aa:	83 a1       	ldd	r24, Z+35	; 0x23
    15ac:	48 2b       	or	r20, r24
    15ae:	88 80       	ld	r8, Y
    15b0:	99 80       	ldd	r9, Y+1	; 0x01
    15b2:	2d e1       	ldi	r18, 0x1D	; 29
    15b4:	35 e0       	ldi	r19, 0x05	; 5
    15b6:	6d e0       	ldi	r22, 0x0D	; 13
    15b8:	75 e0       	ldi	r23, 0x05	; 5
    15ba:	cd 01       	movw	r24, r26
    15bc:	f4 01       	movw	r30, r8
    15be:	19 95       	eicall
            packetProcessed = true;
    15c0:	8b 2d       	mov	r24, r11
    return numListeners > 0;
}

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    bool packetProcessed = false;
    for(int i = 0; i < numListeners; i++)
    15c2:	ff ef       	ldi	r31, 0xFF	; 255
    15c4:	ef 1a       	sub	r14, r31
    15c6:	ff 0a       	sbc	r15, r31
    15c8:	25 96       	adiw	r28, 0x05	; 5
    15ca:	20 91 26 07 	lds	r18, 0x0726	; 0x800726 <numListeners>
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	e2 16       	cp	r14, r18
    15d2:	f3 06       	cpc	r15, r19
    15d4:	44 f2       	brlt	.-112    	; 0x1566 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x3a>
    15d6:	01 c0       	rjmp	.+2      	; 0x15da <_ZN9EtherCard27udpServerHasProcessedPacketEj+0xae>
bool EtherCard::udpServerListening() {
    return numListeners > 0;
}

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    bool packetProcessed = false;
    15d8:	80 e0       	ldi	r24, 0x00	; 0
                datalen);
            packetProcessed = true;
        }
    }
    return packetProcessed;
}
    15da:	df 91       	pop	r29
    15dc:	cf 91       	pop	r28
    15de:	1f 91       	pop	r17
    15e0:	0f 91       	pop	r16
    15e2:	ff 90       	pop	r15
    15e4:	ef 90       	pop	r14
    15e6:	df 90       	pop	r13
    15e8:	cf 90       	pop	r12
    15ea:	bf 90       	pop	r11
    15ec:	9f 90       	pop	r9
    15ee:	8f 90       	pop	r8
    15f0:	08 95       	ret

000015f2 <_ZN9EtherCard6copyIpEPhPKh>:
#include <stdlib.h>
#include <ctype.h>
#include <string.h>

void EtherCard::copyIp (uint8_t *dst, const uint8_t *src) {
    memcpy(dst, src, IP_LEN);
    15f2:	fb 01       	movw	r30, r22
    15f4:	20 81       	ld	r18, Z
    15f6:	31 81       	ldd	r19, Z+1	; 0x01
    15f8:	fc 01       	movw	r30, r24
    15fa:	31 83       	std	Z+1, r19	; 0x01
    15fc:	20 83       	st	Z, r18
    15fe:	fb 01       	movw	r30, r22
    1600:	22 81       	ldd	r18, Z+2	; 0x02
    1602:	33 81       	ldd	r19, Z+3	; 0x03
    1604:	fc 01       	movw	r30, r24
    1606:	33 83       	std	Z+3, r19	; 0x03
    1608:	22 83       	std	Z+2, r18	; 0x02
    160a:	08 95       	ret

0000160c <_ZN9EtherCard7copyMacEPhPKh>:
}

void EtherCard::copyMac (uint8_t *dst, const uint8_t *src) {
    160c:	dc 01       	movw	r26, r24
    memcpy(dst, src, ETH_LEN);
    160e:	96 e0       	ldi	r25, 0x06	; 6
    1610:	fb 01       	movw	r30, r22
    1612:	01 90       	ld	r0, Z+
    1614:	0d 92       	st	X+, r0
    1616:	9a 95       	dec	r25
    1618:	e1 f7       	brne	.-8      	; 0x1612 <_ZN9EtherCard7copyMacEPhPKh+0x6>
    161a:	08 95       	ret

0000161c <_ZN9EtherComm13CheckChecksumEPKch>:
			//}
		}
	}
}

bool EtherComm::CheckChecksum(const char *data, uint8_t len){
    161c:	cf 93       	push	r28
    161e:	df 93       	push	r29
    1620:	ec 01       	movw	r28, r24
  //data++; //Ignore first byte, the start byte.
  uint8_t checksum = (uint8_t)(*(data++)); //Start by 'adding' the command to the checksum
    1622:	dc 01       	movw	r26, r24
    1624:	11 96       	adiw	r26, 0x01	; 1
    1626:	98 81       	ld	r25, Y
  //checksum += (uint8_t)(*(data++));
  while(len-- > 0){
    1628:	2f ef       	ldi	r18, 0xFF	; 255
    162a:	26 0f       	add	r18, r22
    162c:	66 23       	and	r22, r22
    162e:	91 f0       	breq	.+36     	; 0x1654 <_ZN9EtherComm13CheckChecksumEPKch+0x38>
    1630:	fd 01       	movw	r30, r26
    1632:	62 2f       	mov	r22, r18
    1634:	70 e0       	ldi	r23, 0x00	; 0
    1636:	9b 01       	movw	r18, r22
    1638:	2e 5f       	subi	r18, 0xFE	; 254
    163a:	3f 4f       	sbci	r19, 0xFF	; 255
    163c:	ae 01       	movw	r20, r28
    163e:	42 0f       	add	r20, r18
    1640:	53 1f       	adc	r21, r19
    checksum += (uint8_t)(*(data++));
    1642:	21 91       	ld	r18, Z+
    1644:	92 0f       	add	r25, r18

bool EtherComm::CheckChecksum(const char *data, uint8_t len){
  //data++; //Ignore first byte, the start byte.
  uint8_t checksum = (uint8_t)(*(data++)); //Start by 'adding' the command to the checksum
  //checksum += (uint8_t)(*(data++));
  while(len-- > 0){
    1646:	e4 17       	cp	r30, r20
    1648:	f5 07       	cpc	r31, r21
    164a:	d9 f7       	brne	.-10     	; 0x1642 <_ZN9EtherComm13CheckChecksumEPKch+0x26>
    164c:	6f 5f       	subi	r22, 0xFF	; 255
    164e:	7f 4f       	sbci	r23, 0xFF	; 255
    1650:	a6 0f       	add	r26, r22
    1652:	b7 1f       	adc	r27, r23
    checksum += (uint8_t)(*(data++));
  }
  //Serial.print("Checksum: ");
  //Serial.println((uint8_t)(checksum & CHECKSUM_MASK));
  return (checksum & CHECKSUM_MASK) == (uint8_t)(*data);
    1654:	81 e0       	ldi	r24, 0x01	; 1
    1656:	2c 91       	ld	r18, X
    1658:	29 13       	cpse	r18, r25
    165a:	80 e0       	ldi	r24, 0x00	; 0
}
    165c:	df 91       	pop	r29
    165e:	cf 91       	pop	r28
    1660:	08 95       	ret

00001662 <_Z10udpReceivejPhjPKcj>:

//char EtherComm::buffer[BUFFER_SIZE];
uint8_t* EtherComm::buffer = ether.buffer + UDP_DATA_P;

//callback that prints received packets to the serial port
void udpReceive(uint16_t dest_port, uint8_t src_ip[IP_LEN], uint16_t src_port, const char *data, uint16_t packetLen){
    1662:	0f 93       	push	r16
    1664:	1f 93       	push	r17
    1666:	cf 93       	push	r28
    1668:	df 93       	push	r29
/*  IPAddress src(src_ip[0],src_ip[1],src_ip[2],src_ip[3]);
  ether.printIp(src_ip);*/
	
	if(packetLen >= 2/*3*/){ //At minimum, start byte, command, and checksum.
    166a:	c8 01       	movw	r24, r16
    166c:	02 97       	sbiw	r24, 0x02	; 2
    166e:	8f 3f       	cpi	r24, 0xFF	; 255
    1670:	91 05       	cpc	r25, r1
    1672:	09 f0       	breq	.+2      	; 0x1676 <_Z10udpReceivejPhjPKcj+0x14>
    1674:	68 f4       	brcc	.+26     	; 0x1690 <_Z10udpReceivejPhjPKcj+0x2e>
    1676:	e9 01       	movw	r28, r18
		if(packetLen <= 257/*258*/){
			uint8_t dataLen = (uint8_t)(packetLen - 2/*3*/);
    1678:	02 50       	subi	r16, 0x02	; 2
			//if((uint8_t)data[0] == START_BYTE){
			//		Serial.print("Computed Checksum: ");
				if(EtherComm::CheckChecksum(data, dataLen)){
    167a:	60 2f       	mov	r22, r16
    167c:	c9 01       	movw	r24, r18
    167e:	ce df       	rcall	.-100    	; 0x161c <_ZN9EtherComm13CheckChecksumEPKch>
    1680:	88 23       	and	r24, r24
    1682:	31 f0       	breq	.+12     	; 0x1690 <_Z10udpReceivejPhjPKcj+0x2e>
					EtherComm::CommandReceived(data[0/*1*/], (const uint8_t*)(data + 1/*2*/), dataLen);
    1684:	be 01       	movw	r22, r28
    1686:	6f 5f       	subi	r22, 0xFF	; 255
    1688:	7f 4f       	sbci	r23, 0xFF	; 255
    168a:	40 2f       	mov	r20, r16
    168c:	88 81       	ld	r24, Y
    168e:	a5 d9       	rcall	.-3254   	; 0x9da <_ZN9EtherComm15CommandReceivedEhPKhh>
				}
			//}
		}
	}
}
    1690:	df 91       	pop	r29
    1692:	cf 91       	pop	r28
    1694:	1f 91       	pop	r17
    1696:	0f 91       	pop	r16
    1698:	08 95       	ret

0000169a <_ZN9EtherComm5beginEjjRVhS1_h>:
  //Serial.print("Checksum: ");
  //Serial.println((uint8_t)(checksum & CHECKSUM_MASK));
  return (checksum & CHECKSUM_MASK) == (uint8_t)(*data);
}

bool EtherComm::begin(uint16_t recvPort, uint16_t destPort, Register& csDDR, Register& csPort, uint8_t csPin){
    169a:	0f 93       	push	r16
    169c:	cf 93       	push	r28
    169e:	df 93       	push	r29
    16a0:	ec 01       	movw	r28, r24
    16a2:	ca 01       	movw	r24, r20
    16a4:	a9 01       	movw	r20, r18
    16a6:	20 2f       	mov	r18, r16
  EtherComm::_recvPort = recvPort;
    16a8:	d0 93 52 07 	sts	0x0752, r29	; 0x800752 <_ZN9EtherComm9_recvPortE+0x1>
    16ac:	c0 93 51 07 	sts	0x0751, r28	; 0x800751 <_ZN9EtherComm9_recvPortE>
  EtherComm::_destPort = destPort;
    16b0:	70 93 50 07 	sts	0x0750, r23	; 0x800750 <_ZN9EtherComm9_destPortE+0x1>
    16b4:	60 93 4f 07 	sts	0x074F, r22	; 0x80074f <_ZN9EtherComm9_destPortE>
  
  if (ether.begin(EtherComm::_mymac, csDDR, csPort, csPin) == 0) return false;
    16b8:	bc 01       	movw	r22, r24
    16ba:	86 e0       	ldi	r24, 0x06	; 6
    16bc:	92 e0       	ldi	r25, 0x02	; 2
    16be:	d1 db       	rcall	.-2142   	; 0xe62 <_ZN9EtherCard5beginEPKhRVhS3_h>
    16c0:	88 23       	and	r24, r24
    16c2:	79 f0       	breq	.+30     	; 0x16e2 <_ZN9EtherComm5beginEjjRVhS1_h+0x48>
  ether.staticSetup(EtherComm::_myip, EtherComm::_gwip);
    16c4:	20 e0       	ldi	r18, 0x00	; 0
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	40 e0       	ldi	r20, 0x00	; 0
    16ca:	50 e0       	ldi	r21, 0x00	; 0
    16cc:	6c e0       	ldi	r22, 0x0C	; 12
    16ce:	72 e0       	ldi	r23, 0x02	; 2
    16d0:	80 e1       	ldi	r24, 0x10	; 16
    16d2:	92 e0       	ldi	r25, 0x02	; 2
    16d4:	df db       	rcall	.-2114   	; 0xe94 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_>
  ether.printIp("GW:  ", ether.gwip);
  ether.printIp("DNS: ", ether.dnsip);
  */
  
  //Register the udpSerialPrint() method to listen to port the receive port.
  ether.udpServerListenOnPort(&udpReceive, recvPort);
    16d6:	be 01       	movw	r22, r28
    16d8:	81 e3       	ldi	r24, 0x31	; 49
    16da:	9b e0       	ldi	r25, 0x0B	; 11
    16dc:	06 df       	rcall	.-500    	; 0x14ea <_ZN9EtherCard21udpServerListenOnPortEPFvjPhjPKcjEj>
  
  return true;
    16de:	81 e0       	ldi	r24, 0x01	; 1
    16e0:	01 c0       	rjmp	.+2      	; 0x16e4 <_ZN9EtherComm5beginEjjRVhS1_h+0x4a>

bool EtherComm::begin(uint16_t recvPort, uint16_t destPort, Register& csDDR, Register& csPort, uint8_t csPin){
  EtherComm::_recvPort = recvPort;
  EtherComm::_destPort = destPort;
  
  if (ether.begin(EtherComm::_mymac, csDDR, csPort, csPin) == 0) return false;
    16e2:	80 e0       	ldi	r24, 0x00	; 0
  
  //Register the udpSerialPrint() method to listen to port the receive port.
  ether.udpServerListenOnPort(&udpReceive, recvPort);
  
  return true;
}
    16e4:	df 91       	pop	r29
    16e6:	cf 91       	pop	r28
    16e8:	0f 91       	pop	r16
    16ea:	08 95       	ret

000016ec <_ZN9EtherComm11SendCommandEhh>:

void EtherComm::SendCommand(uint8_t id, uint8_t len){
    16ec:	0f 93       	push	r16
    16ee:	1f 93       	push	r17
    16f0:	cf 93       	push	r28
    16f2:	df 93       	push	r29
  EtherComm::buffer[0] = id; //START_BYTE;
    16f4:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    16f8:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    16fc:	80 83       	st	Z, r24
  //EtherComm::buffer[1] = cmd;
  //EtherComm::buffer[2] = len;
  
  uint8_t checksum = id; //START_BYTE + cmd;
  uint8_t* index = &EtherComm::buffer[1/*2*/]; //TODO why is char* being used? convert ot uint8_t*!!
    16fe:	c0 91 00 02 	lds	r28, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    1702:	d0 91 01 02 	lds	r29, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    1706:	de 01       	movw	r26, r28
    1708:	11 96       	adiw	r26, 0x01	; 1
  uint8_t bytes = len;
  while(bytes-- > 0){
    170a:	4f ef       	ldi	r20, 0xFF	; 255
    170c:	46 0f       	add	r20, r22
    170e:	66 23       	and	r22, r22
    1710:	81 f0       	breq	.+32     	; 0x1732 <_ZN9EtherComm11SendCommandEhh+0x46>
    1712:	fd 01       	movw	r30, r26
    1714:	50 e0       	ldi	r21, 0x00	; 0
    1716:	9a 01       	movw	r18, r20
    1718:	2e 5f       	subi	r18, 0xFE	; 254
    171a:	3f 4f       	sbci	r19, 0xFF	; 255
    171c:	2c 0f       	add	r18, r28
    171e:	3d 1f       	adc	r19, r29
    checksum += (uint8_t)(*(index++));  
    1720:	91 91       	ld	r25, Z+
    1722:	89 0f       	add	r24, r25
  //EtherComm::buffer[2] = len;
  
  uint8_t checksum = id; //START_BYTE + cmd;
  uint8_t* index = &EtherComm::buffer[1/*2*/]; //TODO why is char* being used? convert ot uint8_t*!!
  uint8_t bytes = len;
  while(bytes-- > 0){
    1724:	e2 17       	cp	r30, r18
    1726:	f3 07       	cpc	r31, r19
    1728:	d9 f7       	brne	.-10     	; 0x1720 <_ZN9EtherComm11SendCommandEhh+0x34>
    172a:	4f 5f       	subi	r20, 0xFF	; 255
    172c:	5f 4f       	sbci	r21, 0xFF	; 255
    172e:	a4 0f       	add	r26, r20
    1730:	b5 1f       	adc	r27, r21
    checksum += (uint8_t)(*(index++));  
  }
  (*index) = (uint8_t)(checksum & CHECKSUM_MASK);
    1732:	8c 93       	st	X, r24

  ether.sendUdp(EtherComm::buffer, (uint16_t)len + 2/*(uint16_t)3*/, _recvPort, _destIP, _destPort);
    1734:	00 91 4f 07 	lds	r16, 0x074F	; 0x80074f <_ZN9EtherComm9_destPortE>
    1738:	10 91 50 07 	lds	r17, 0x0750	; 0x800750 <_ZN9EtherComm9_destPortE+0x1>
    173c:	40 91 51 07 	lds	r20, 0x0751	; 0x800751 <_ZN9EtherComm9_recvPortE>
    1740:	50 91 52 07 	lds	r21, 0x0752	; 0x800752 <_ZN9EtherComm9_recvPortE+0x1>
    1744:	70 e0       	ldi	r23, 0x00	; 0
    1746:	6e 5f       	subi	r22, 0xFE	; 254
    1748:	7f 4f       	sbci	r23, 0xFF	; 255
    174a:	22 e0       	ldi	r18, 0x02	; 2
    174c:	32 e0       	ldi	r19, 0x02	; 2
    174e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    1752:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    1756:	57 dd       	rcall	.-1362   	; 0x1206 <_ZN9EtherCard7sendUdpEPKhjjS1_j>
}
    1758:	df 91       	pop	r29
    175a:	cf 91       	pop	r28
    175c:	1f 91       	pop	r17
    175e:	0f 91       	pop	r16
    1760:	08 95       	ret

00001762 <main>:
#include "Micro/Peripherals/HardwareSerial.h"
#include "Robot.h"

int main(void)
{
	Serial.begin(115200);
    1762:	26 e0       	ldi	r18, 0x06	; 6
    1764:	40 e0       	ldi	r20, 0x00	; 0
    1766:	52 ec       	ldi	r21, 0xC2	; 194
    1768:	61 e0       	ldi	r22, 0x01	; 1
    176a:	70 e0       	ldi	r23, 0x00	; 0
    176c:	87 e7       	ldi	r24, 0x77	; 119
    176e:	97 e0       	ldi	r25, 0x07	; 7
    1770:	64 d0       	rcall	.+200    	; 0x183a <_ZN14HardwareSerial5beginEmh>
	Serial.println("Initializing...");
    1772:	6b e2       	ldi	r22, 0x2B	; 43
    1774:	72 e0       	ldi	r23, 0x02	; 2
    1776:	87 e7       	ldi	r24, 0x77	; 119
    1778:	97 e0       	ldi	r25, 0x07	; 7
    177a:	0e 94 b1 26 	call	0x4d62	; 0x4d62 <_ZN5Print7printlnEPKc>
	
	if(!rov.begin()){
    177e:	0e 94 61 24 	call	0x48c2	; 0x48c2 <_ZN5Robot5beginEv>
    1782:	81 11       	cpse	r24, r1
    1784:	07 c0       	rjmp	.+14     	; 0x1794 <main+0x32>
		Serial.println("Failed to initialize robot.");
    1786:	6b e3       	ldi	r22, 0x3B	; 59
    1788:	72 e0       	ldi	r23, 0x02	; 2
    178a:	87 e7       	ldi	r24, 0x77	; 119
    178c:	97 e0       	ldi	r25, 0x07	; 7
    178e:	0e 94 b1 26 	call	0x4d62	; 0x4d62 <_ZN5Print7printlnEPKc>
    1792:	ff cf       	rjmp	.-2      	; 0x1792 <main+0x30>
		while(true) ;
	}
	Serial.println("Initialized robot.");
    1794:	67 e5       	ldi	r22, 0x57	; 87
    1796:	72 e0       	ldi	r23, 0x02	; 2
    1798:	87 e7       	ldi	r24, 0x77	; 119
    179a:	97 e0       	ldi	r25, 0x07	; 7
    179c:	0e 94 b1 26 	call	0x4d62	; 0x4d62 <_ZN5Print7printlnEPKc>
	
    while (1) {
		rov.Loop();
    17a0:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <_ZN5Robot4LoopEv>
    17a4:	fd cf       	rjmp	.-6      	; 0x17a0 <main+0x3e>

000017a6 <_ZN5Print17availableForWriteEv>:
	//cbi(*_ucsrb, UDRIE0);
}

void HardwareSerial::end(){
	cbi(*_ucsrb, RXEN0);
	cbi(*_ucsrb, TXEN0);
    17a6:	80 e0       	ldi	r24, 0x00	; 0
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	08 95       	ret

000017ac <_ZN14HardwareSerial9availableEv>:
    17ac:	dc 01       	movw	r26, r24
    17ae:	14 96       	adiw	r26, 0x04	; 4
    17b0:	ed 91       	ld	r30, X+
    17b2:	fc 91       	ld	r31, X
    17b4:	15 97       	sbiw	r26, 0x05	; 5
    17b6:	80 81       	ld	r24, Z
    17b8:	08 2e       	mov	r0, r24
    17ba:	00 0c       	add	r0, r0
    17bc:	99 0b       	sbc	r25, r25
    17be:	89 2f       	mov	r24, r25
    17c0:	88 1f       	adc	r24, r24
    17c2:	88 27       	eor	r24, r24
    17c4:	88 1f       	adc	r24, r24
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	08 95       	ret

000017ca <_ZN14HardwareSerial4peekEv>:
    17ca:	8f ef       	ldi	r24, 0xFF	; 255
    17cc:	9f ef       	ldi	r25, 0xFF	; 255
    17ce:	08 95       	ret

000017d0 <_ZN14HardwareSerial4readEv>:
    17d0:	dc 01       	movw	r26, r24
    17d2:	14 96       	adiw	r26, 0x04	; 4
    17d4:	ed 91       	ld	r30, X+
    17d6:	fc 91       	ld	r31, X
    17d8:	15 97       	sbiw	r26, 0x05	; 5
    17da:	90 81       	ld	r25, Z
    17dc:	99 23       	and	r25, r25
    17de:	ec f7       	brge	.-6      	; 0x17da <_ZN14HardwareSerial4readEv+0xa>
    17e0:	1a 96       	adiw	r26, 0x0a	; 10
    17e2:	ed 91       	ld	r30, X+
    17e4:	fc 91       	ld	r31, X
    17e6:	1b 97       	sbiw	r26, 0x0b	; 11
    17e8:	80 81       	ld	r24, Z
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	08 95       	ret

000017ee <_ZN14HardwareSerial17availableForWriteEv>:
    17ee:	dc 01       	movw	r26, r24
    17f0:	14 96       	adiw	r26, 0x04	; 4
    17f2:	ed 91       	ld	r30, X+
    17f4:	fc 91       	ld	r31, X
    17f6:	15 97       	sbiw	r26, 0x05	; 5
    17f8:	20 81       	ld	r18, Z
    17fa:	81 e0       	ldi	r24, 0x01	; 1
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	25 fd       	sbrc	r18, 5
    1800:	02 c0       	rjmp	.+4      	; 0x1806 <_ZN14HardwareSerial17availableForWriteEv+0x18>
    1802:	80 e0       	ldi	r24, 0x00	; 0
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	08 95       	ret

00001808 <_ZN14HardwareSerial5flushEv>:
    1808:	dc 01       	movw	r26, r24
    180a:	14 96       	adiw	r26, 0x04	; 4
    180c:	ed 91       	ld	r30, X+
    180e:	fc 91       	ld	r31, X
    1810:	15 97       	sbiw	r26, 0x05	; 5
    1812:	80 81       	ld	r24, Z
    1814:	85 ff       	sbrs	r24, 5
    1816:	fd cf       	rjmp	.-6      	; 0x1812 <_ZN14HardwareSerial5flushEv+0xa>
    1818:	08 95       	ret

0000181a <_ZN14HardwareSerial5writeEh>:
    181a:	dc 01       	movw	r26, r24
    181c:	14 96       	adiw	r26, 0x04	; 4
    181e:	ed 91       	ld	r30, X+
    1820:	fc 91       	ld	r31, X
    1822:	15 97       	sbiw	r26, 0x05	; 5
    1824:	90 81       	ld	r25, Z
    1826:	95 ff       	sbrs	r25, 5
    1828:	fd cf       	rjmp	.-6      	; 0x1824 <_ZN14HardwareSerial5writeEh+0xa>
    182a:	1a 96       	adiw	r26, 0x0a	; 10
    182c:	ed 91       	ld	r30, X+
    182e:	fc 91       	ld	r31, X
    1830:	1b 97       	sbiw	r26, 0x0b	; 11
    1832:	60 83       	st	Z, r22
    1834:	81 e0       	ldi	r24, 0x01	; 1
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	08 95       	ret

0000183a <_ZN14HardwareSerial5beginEmh>:
    183a:	cf 92       	push	r12
    183c:	df 92       	push	r13
    183e:	ef 92       	push	r14
    1840:	ff 92       	push	r15
    1842:	1f 93       	push	r17
    1844:	cf 93       	push	r28
    1846:	df 93       	push	r29
    1848:	ec 01       	movw	r28, r24
    184a:	6a 01       	movw	r12, r20
    184c:	7b 01       	movw	r14, r22
    184e:	12 2f       	mov	r17, r18
    1850:	db 01       	movw	r26, r22
    1852:	ca 01       	movw	r24, r20
    1854:	88 0f       	add	r24, r24
    1856:	99 1f       	adc	r25, r25
    1858:	aa 1f       	adc	r26, r26
    185a:	bb 1f       	adc	r27, r27
    185c:	88 0f       	add	r24, r24
    185e:	99 1f       	adc	r25, r25
    1860:	aa 1f       	adc	r26, r26
    1862:	bb 1f       	adc	r27, r27
    1864:	9c 01       	movw	r18, r24
    1866:	ad 01       	movw	r20, r26
    1868:	22 0f       	add	r18, r18
    186a:	33 1f       	adc	r19, r19
    186c:	44 1f       	adc	r20, r20
    186e:	55 1f       	adc	r21, r21
    1870:	60 e0       	ldi	r22, 0x00	; 0
    1872:	74 e2       	ldi	r23, 0x24	; 36
    1874:	84 ef       	ldi	r24, 0xF4	; 244
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	0e 94 59 29 	call	0x52b2	; 0x52b2 <__udivmodsi4>
    187c:	21 50       	subi	r18, 0x01	; 1
    187e:	31 09       	sbc	r19, r1
    1880:	ec 81       	ldd	r30, Y+4	; 0x04
    1882:	fd 81       	ldd	r31, Y+5	; 0x05
    1884:	82 e0       	ldi	r24, 0x02	; 2
    1886:	80 83       	st	Z, r24
    1888:	21 15       	cp	r18, r1
    188a:	80 e1       	ldi	r24, 0x10	; 16
    188c:	38 07       	cpc	r19, r24
    188e:	70 f0       	brcs	.+28     	; 0x18ac <_ZN14HardwareSerial5beginEmh+0x72>
    1890:	ec 81       	ldd	r30, Y+4	; 0x04
    1892:	fd 81       	ldd	r31, Y+5	; 0x05
    1894:	10 82       	st	Z, r1
    1896:	80 e4       	ldi	r24, 0x40	; 64
    1898:	92 e4       	ldi	r25, 0x42	; 66
    189a:	c8 9e       	mul	r12, r24
    189c:	90 01       	movw	r18, r0
    189e:	c9 9e       	mul	r12, r25
    18a0:	30 0d       	add	r19, r0
    18a2:	d8 9e       	mul	r13, r24
    18a4:	30 0d       	add	r19, r0
    18a6:	11 24       	eor	r1, r1
    18a8:	21 50       	subi	r18, 0x01	; 1
    18aa:	31 09       	sbc	r19, r1
    18ac:	ea 81       	ldd	r30, Y+2	; 0x02
    18ae:	fb 81       	ldd	r31, Y+3	; 0x03
    18b0:	31 83       	std	Z+1, r19	; 0x01
    18b2:	20 83       	st	Z, r18
    18b4:	e8 85       	ldd	r30, Y+8	; 0x08
    18b6:	f9 85       	ldd	r31, Y+9	; 0x09
    18b8:	10 83       	st	Z, r17
    18ba:	ee 81       	ldd	r30, Y+6	; 0x06
    18bc:	ff 81       	ldd	r31, Y+7	; 0x07
    18be:	80 81       	ld	r24, Z
    18c0:	80 61       	ori	r24, 0x10	; 16
    18c2:	80 83       	st	Z, r24
    18c4:	ee 81       	ldd	r30, Y+6	; 0x06
    18c6:	ff 81       	ldd	r31, Y+7	; 0x07
    18c8:	80 81       	ld	r24, Z
    18ca:	88 60       	ori	r24, 0x08	; 8
    18cc:	80 83       	st	Z, r24
    18ce:	df 91       	pop	r29
    18d0:	cf 91       	pop	r28
    18d2:	1f 91       	pop	r17
    18d4:	ff 90       	pop	r15
    18d6:	ef 90       	pop	r14
    18d8:	df 90       	pop	r13
    18da:	cf 90       	pop	r12
    18dc:	08 95       	ret

000018de <_GLOBAL__sub_I__ZN14HardwareSerialC2ERVjRVhS3_S3_S3_>:

#include "HardwareSerial.h"
#include <avr/io.h>

HardwareSerial::HardwareSerial( Register16 &ubrr, Register &ucsra, Register &ucsrb, Register &ucsrc, Register &udr )
 : _ubrr(&ubrr), _ucsra(&ucsra), _ucsrb(&ucsrb), _ucsrc(&ucsrc), _udr(&udr)
    18de:	e7 e7       	ldi	r30, 0x77	; 119
    18e0:	f7 e0       	ldi	r31, 0x07	; 7
    18e2:	8e e6       	ldi	r24, 0x6E	; 110
    18e4:	92 e0       	ldi	r25, 0x02	; 2
    18e6:	91 83       	std	Z+1, r25	; 0x01
    18e8:	80 83       	st	Z, r24
    18ea:	24 ec       	ldi	r18, 0xC4	; 196
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	33 83       	std	Z+3, r19	; 0x03
    18f0:	22 83       	std	Z+2, r18	; 0x02
    18f2:	20 ec       	ldi	r18, 0xC0	; 192
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	35 83       	std	Z+5, r19	; 0x05
    18f8:	24 83       	std	Z+4, r18	; 0x04
    18fa:	21 ec       	ldi	r18, 0xC1	; 193
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	37 83       	std	Z+7, r19	; 0x07
    1900:	26 83       	std	Z+6, r18	; 0x06
    1902:	22 ec       	ldi	r18, 0xC2	; 194
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	31 87       	std	Z+9, r19	; 0x09
    1908:	20 87       	std	Z+8, r18	; 0x08
    190a:	26 ec       	ldi	r18, 0xC6	; 198
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	33 87       	std	Z+11, r19	; 0x0b
    1910:	22 87       	std	Z+10, r18	; 0x0a
    1912:	eb e6       	ldi	r30, 0x6B	; 107
    1914:	f7 e0       	ldi	r31, 0x07	; 7
    1916:	91 83       	std	Z+1, r25	; 0x01
    1918:	80 83       	st	Z, r24
    191a:	2c ec       	ldi	r18, 0xCC	; 204
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	33 83       	std	Z+3, r19	; 0x03
    1920:	22 83       	std	Z+2, r18	; 0x02
    1922:	28 ec       	ldi	r18, 0xC8	; 200
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	35 83       	std	Z+5, r19	; 0x05
    1928:	24 83       	std	Z+4, r18	; 0x04
    192a:	29 ec       	ldi	r18, 0xC9	; 201
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	37 83       	std	Z+7, r19	; 0x07
    1930:	26 83       	std	Z+6, r18	; 0x06
    1932:	2a ec       	ldi	r18, 0xCA	; 202
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	31 87       	std	Z+9, r19	; 0x09
    1938:	20 87       	std	Z+8, r18	; 0x08
    193a:	2e ec       	ldi	r18, 0xCE	; 206
    193c:	30 e0       	ldi	r19, 0x00	; 0
    193e:	33 87       	std	Z+11, r19	; 0x0b
    1940:	22 87       	std	Z+10, r18	; 0x0a
    1942:	ef e5       	ldi	r30, 0x5F	; 95
    1944:	f7 e0       	ldi	r31, 0x07	; 7
    1946:	91 83       	std	Z+1, r25	; 0x01
    1948:	80 83       	st	Z, r24
    194a:	24 ed       	ldi	r18, 0xD4	; 212
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	33 83       	std	Z+3, r19	; 0x03
    1950:	22 83       	std	Z+2, r18	; 0x02
    1952:	20 ed       	ldi	r18, 0xD0	; 208
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	35 83       	std	Z+5, r19	; 0x05
    1958:	24 83       	std	Z+4, r18	; 0x04
    195a:	21 ed       	ldi	r18, 0xD1	; 209
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	37 83       	std	Z+7, r19	; 0x07
    1960:	26 83       	std	Z+6, r18	; 0x06
    1962:	22 ed       	ldi	r18, 0xD2	; 210
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	31 87       	std	Z+9, r19	; 0x09
    1968:	20 87       	std	Z+8, r18	; 0x08
    196a:	26 ed       	ldi	r18, 0xD6	; 214
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	33 87       	std	Z+11, r19	; 0x0b
    1970:	22 87       	std	Z+10, r18	; 0x0a
    1972:	e3 e5       	ldi	r30, 0x53	; 83
    1974:	f7 e0       	ldi	r31, 0x07	; 7
    1976:	91 83       	std	Z+1, r25	; 0x01
    1978:	80 83       	st	Z, r24
    197a:	84 e3       	ldi	r24, 0x34	; 52
    197c:	91 e0       	ldi	r25, 0x01	; 1
    197e:	93 83       	std	Z+3, r25	; 0x03
    1980:	82 83       	std	Z+2, r24	; 0x02
    1982:	80 e3       	ldi	r24, 0x30	; 48
    1984:	91 e0       	ldi	r25, 0x01	; 1
    1986:	95 83       	std	Z+5, r25	; 0x05
    1988:	84 83       	std	Z+4, r24	; 0x04
    198a:	81 e3       	ldi	r24, 0x31	; 49
    198c:	91 e0       	ldi	r25, 0x01	; 1
    198e:	97 83       	std	Z+7, r25	; 0x07
    1990:	86 83       	std	Z+6, r24	; 0x06
    1992:	82 e3       	ldi	r24, 0x32	; 50
    1994:	91 e0       	ldi	r25, 0x01	; 1
    1996:	91 87       	std	Z+9, r25	; 0x09
    1998:	80 87       	std	Z+8, r24	; 0x08
    199a:	86 e3       	ldi	r24, 0x36	; 54
    199c:	91 e0       	ldi	r25, 0x01	; 1
    199e:	93 87       	std	Z+11, r25	; 0x0b
    19a0:	82 87       	std	Z+10, r24	; 0x0a
    19a2:	08 95       	ret

000019a4 <_ZN13HardwareServo5beginEv>:
	*_icr = 40000; //Set period to 20ms
}

void HardwareServo::end(){
	*_tccrA = 0;
	*_tccrB = 0;
    19a4:	fc 01       	movw	r30, r24
    19a6:	a2 81       	ldd	r26, Z+2	; 0x02
    19a8:	b3 81       	ldd	r27, Z+3	; 0x03
    19aa:	82 e0       	ldi	r24, 0x02	; 2
    19ac:	8c 93       	st	X, r24
    19ae:	a4 81       	ldd	r26, Z+4	; 0x04
    19b0:	b5 81       	ldd	r27, Z+5	; 0x05
    19b2:	8a e1       	ldi	r24, 0x1A	; 26
    19b4:	8c 93       	st	X, r24
    19b6:	01 90       	ld	r0, Z+
    19b8:	f0 81       	ld	r31, Z
    19ba:	e0 2d       	mov	r30, r0
    19bc:	80 e4       	ldi	r24, 0x40	; 64
    19be:	9c e9       	ldi	r25, 0x9C	; 156
    19c0:	91 83       	std	Z+1, r25	; 0x01
    19c2:	80 83       	st	Z, r24
    19c4:	08 95       	ret

000019c6 <_ZN13HardwareServo7EnableAEv>:
}

void HardwareServo::EnableA(){
    19c6:	fc 01       	movw	r30, r24
	*_tccrA |= _BV(COM1A1);
    19c8:	a2 81       	ldd	r26, Z+2	; 0x02
    19ca:	b3 81       	ldd	r27, Z+3	; 0x03
    19cc:	8c 91       	ld	r24, X
    19ce:	80 68       	ori	r24, 0x80	; 128
    19d0:	8c 93       	st	X, r24
	*_DDR |= _PINA;
    19d2:	a4 85       	ldd	r26, Z+12	; 0x0c
    19d4:	b5 85       	ldd	r27, Z+13	; 0x0d
    19d6:	9c 91       	ld	r25, X
    19d8:	80 89       	ldd	r24, Z+16	; 0x10
    19da:	89 2b       	or	r24, r25
    19dc:	8c 93       	st	X, r24
    19de:	08 95       	ret

000019e0 <_ZN13HardwareServo7EnableBEv>:
}

void HardwareServo::EnableB(){
    19e0:	fc 01       	movw	r30, r24
	*_tccrA |= _BV(COM1B1);
    19e2:	a2 81       	ldd	r26, Z+2	; 0x02
    19e4:	b3 81       	ldd	r27, Z+3	; 0x03
    19e6:	8c 91       	ld	r24, X
    19e8:	80 62       	ori	r24, 0x20	; 32
    19ea:	8c 93       	st	X, r24
	*_DDR |= _PINB;
    19ec:	a4 85       	ldd	r26, Z+12	; 0x0c
    19ee:	b5 85       	ldd	r27, Z+13	; 0x0d
    19f0:	9c 91       	ld	r25, X
    19f2:	81 89       	ldd	r24, Z+17	; 0x11
    19f4:	89 2b       	or	r24, r25
    19f6:	8c 93       	st	X, r24
    19f8:	08 95       	ret

000019fa <_ZN13HardwareServo7EnableCEv>:
}

void HardwareServo::EnableC(){
    19fa:	fc 01       	movw	r30, r24
	*_tccrA |= _BV(COM1C1);
    19fc:	a2 81       	ldd	r26, Z+2	; 0x02
    19fe:	b3 81       	ldd	r27, Z+3	; 0x03
    1a00:	8c 91       	ld	r24, X
    1a02:	88 60       	ori	r24, 0x08	; 8
    1a04:	8c 93       	st	X, r24
	*_DDR |= _PINC;
    1a06:	a4 85       	ldd	r26, Z+12	; 0x0c
    1a08:	b5 85       	ldd	r27, Z+13	; 0x0d
    1a0a:	9c 91       	ld	r25, X
    1a0c:	82 89       	ldd	r24, Z+18	; 0x12
    1a0e:	89 2b       	or	r24, r25
    1a10:	8c 93       	st	X, r24
    1a12:	08 95       	ret

00001a14 <_ZN13HardwareServo8DisableAEv>:
}

void HardwareServo::DisableA(){
    1a14:	fc 01       	movw	r30, r24
	*_tccrA &= ~_BV(COM1A1);
    1a16:	a2 81       	ldd	r26, Z+2	; 0x02
    1a18:	b3 81       	ldd	r27, Z+3	; 0x03
    1a1a:	8c 91       	ld	r24, X
    1a1c:	8f 77       	andi	r24, 0x7F	; 127
    1a1e:	8c 93       	st	X, r24
	*_PORT &= ~_PINA;
    1a20:	a6 85       	ldd	r26, Z+14	; 0x0e
    1a22:	b7 85       	ldd	r27, Z+15	; 0x0f
    1a24:	9c 91       	ld	r25, X
    1a26:	80 89       	ldd	r24, Z+16	; 0x10
    1a28:	80 95       	com	r24
    1a2a:	89 23       	and	r24, r25
    1a2c:	8c 93       	st	X, r24
    1a2e:	08 95       	ret

00001a30 <_ZN13HardwareServo8DisableBEv>:
}

void HardwareServo::DisableB(){
    1a30:	fc 01       	movw	r30, r24
	*_tccrA &= ~_BV(COM1B1);
    1a32:	a2 81       	ldd	r26, Z+2	; 0x02
    1a34:	b3 81       	ldd	r27, Z+3	; 0x03
    1a36:	8c 91       	ld	r24, X
    1a38:	8f 7d       	andi	r24, 0xDF	; 223
    1a3a:	8c 93       	st	X, r24
	*_PORT &= ~_PINB;
    1a3c:	a6 85       	ldd	r26, Z+14	; 0x0e
    1a3e:	b7 85       	ldd	r27, Z+15	; 0x0f
    1a40:	9c 91       	ld	r25, X
    1a42:	81 89       	ldd	r24, Z+17	; 0x11
    1a44:	80 95       	com	r24
    1a46:	89 23       	and	r24, r25
    1a48:	8c 93       	st	X, r24
    1a4a:	08 95       	ret

00001a4c <_ZN13HardwareServo8DisableCEv>:
}

void HardwareServo::DisableC(){
    1a4c:	fc 01       	movw	r30, r24
	*_tccrA &= ~_BV(COM1C1);
    1a4e:	a2 81       	ldd	r26, Z+2	; 0x02
    1a50:	b3 81       	ldd	r27, Z+3	; 0x03
    1a52:	8c 91       	ld	r24, X
    1a54:	87 7f       	andi	r24, 0xF7	; 247
    1a56:	8c 93       	st	X, r24
	*_PORT &= ~_PINC;	
    1a58:	a6 85       	ldd	r26, Z+14	; 0x0e
    1a5a:	b7 85       	ldd	r27, Z+15	; 0x0f
    1a5c:	9c 91       	ld	r25, X
    1a5e:	82 89       	ldd	r24, Z+18	; 0x12
    1a60:	80 95       	com	r24
    1a62:	89 23       	and	r24, r25
    1a64:	8c 93       	st	X, r24
    1a66:	08 95       	ret

00001a68 <_ZN13HardwareServo9setPulseAEj>:
}

void HardwareServo::setPulseA(uint16_t pulse){
	//*_ocrA = (uint16_t)((((uint32_t)pulse * (_maxA - _minA)) / 255 + _minA) * CPU_CONST);
	*_ocrA = (uint16_t)(pulse * CPU_CONST);
    1a68:	dc 01       	movw	r26, r24
    1a6a:	16 96       	adiw	r26, 0x06	; 6
    1a6c:	ed 91       	ld	r30, X+
    1a6e:	fc 91       	ld	r31, X
    1a70:	17 97       	sbiw	r26, 0x07	; 7
    1a72:	66 0f       	add	r22, r22
    1a74:	77 1f       	adc	r23, r23
    1a76:	71 83       	std	Z+1, r23	; 0x01
    1a78:	60 83       	st	Z, r22
    1a7a:	08 95       	ret

00001a7c <_ZN13HardwareServo9setPulseBEj>:
}

void HardwareServo::setPulseB(uint16_t pulse){
	//*_ocrB = (uint16_t)((((uint32_t)pulse * (_maxB - _minB)) / 255 + _minB) * CPU_CONST);	
	*_ocrB = (uint16_t)(pulse * CPU_CONST);	
    1a7c:	dc 01       	movw	r26, r24
    1a7e:	18 96       	adiw	r26, 0x08	; 8
    1a80:	ed 91       	ld	r30, X+
    1a82:	fc 91       	ld	r31, X
    1a84:	19 97       	sbiw	r26, 0x09	; 9
    1a86:	66 0f       	add	r22, r22
    1a88:	77 1f       	adc	r23, r23
    1a8a:	71 83       	std	Z+1, r23	; 0x01
    1a8c:	60 83       	st	Z, r22
    1a8e:	08 95       	ret

00001a90 <_ZN13HardwareServo9setPulseCEj>:
}

void HardwareServo::setPulseC(uint16_t pulse) {
	//*_ocrC = (uint16_t)((((uint32_t)pulse * (_maxC - _minC)) / 255 + _minC) * CPU_CONST);	
	*_ocrC = (uint16_t)(pulse * CPU_CONST);
    1a90:	dc 01       	movw	r26, r24
    1a92:	1a 96       	adiw	r26, 0x0a	; 10
    1a94:	ed 91       	ld	r30, X+
    1a96:	fc 91       	ld	r31, X
    1a98:	1b 97       	sbiw	r26, 0x0b	; 11
    1a9a:	66 0f       	add	r22, r22
    1a9c:	77 1f       	adc	r23, r23
    1a9e:	71 83       	std	Z+1, r23	; 0x01
    1aa0:	60 83       	st	Z, r22
    1aa2:	08 95       	ret

00001aa4 <_GLOBAL__sub_I__ZN13HardwareServoC2ERVjRVhS3_S1_S1_S1_S3_S3_hhh>:
#define CLK_DIV_256 (_BV(CS02))
#define CLK_DIV_1024 (_BV(CS02) | _BV(CS00))

HardwareServo::HardwareServo(Register16 &icr, Register &tccrA, Register &tccrB, Register16 &ocrA, Register16 &ocrB, Register16 &ocrC, Register &ddr, Register &port, const uint8_t pinA, const uint8_t pinB, const uint8_t pinC)
 : _icr(&icr), _tccrA(&tccrA), _tccrB(&tccrB), _ocrA(&ocrA), _ocrB(&ocrB), _ocrC(&ocrC),
  _DDR(&ddr), _PORT(&port), _PINA(pinA), _PINB(pinB), _PINC(pinC)/*,
    1aa4:	ec eb       	ldi	r30, 0xBC	; 188
    1aa6:	f7 e0       	ldi	r31, 0x07	; 7
    1aa8:	86 e8       	ldi	r24, 0x86	; 134
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	91 83       	std	Z+1, r25	; 0x01
    1aae:	80 83       	st	Z, r24
    1ab0:	80 e8       	ldi	r24, 0x80	; 128
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	93 83       	std	Z+3, r25	; 0x03
    1ab6:	82 83       	std	Z+2, r24	; 0x02
    1ab8:	81 e8       	ldi	r24, 0x81	; 129
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	95 83       	std	Z+5, r25	; 0x05
    1abe:	84 83       	std	Z+4, r24	; 0x04
    1ac0:	88 e8       	ldi	r24, 0x88	; 136
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	97 83       	std	Z+7, r25	; 0x07
    1ac6:	86 83       	std	Z+6, r24	; 0x06
    1ac8:	8a e8       	ldi	r24, 0x8A	; 138
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	91 87       	std	Z+9, r25	; 0x09
    1ace:	80 87       	std	Z+8, r24	; 0x08
    1ad0:	8c e8       	ldi	r24, 0x8C	; 140
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	93 87       	std	Z+11, r25	; 0x0b
    1ad6:	82 87       	std	Z+10, r24	; 0x0a
    1ad8:	84 e2       	ldi	r24, 0x24	; 36
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	95 87       	std	Z+13, r25	; 0x0d
    1ade:	84 87       	std	Z+12, r24	; 0x0c
    1ae0:	85 e2       	ldi	r24, 0x25	; 37
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	97 87       	std	Z+15, r25	; 0x0f
    1ae6:	86 87       	std	Z+14, r24	; 0x0e
    1ae8:	80 e2       	ldi	r24, 0x20	; 32
    1aea:	80 8b       	std	Z+16, r24	; 0x10
    1aec:	90 e4       	ldi	r25, 0x40	; 64
    1aee:	91 8b       	std	Z+17, r25	; 0x11
    1af0:	90 e8       	ldi	r25, 0x80	; 128
    1af2:	92 8b       	std	Z+18, r25	; 0x12
    1af4:	e9 ea       	ldi	r30, 0xA9	; 169
    1af6:	f7 e0       	ldi	r31, 0x07	; 7
    1af8:	26 e9       	ldi	r18, 0x96	; 150
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	31 83       	std	Z+1, r19	; 0x01
    1afe:	20 83       	st	Z, r18
    1b00:	20 e9       	ldi	r18, 0x90	; 144
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	33 83       	std	Z+3, r19	; 0x03
    1b06:	22 83       	std	Z+2, r18	; 0x02
    1b08:	21 e9       	ldi	r18, 0x91	; 145
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	35 83       	std	Z+5, r19	; 0x05
    1b0e:	24 83       	std	Z+4, r18	; 0x04
    1b10:	28 e9       	ldi	r18, 0x98	; 152
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	37 83       	std	Z+7, r19	; 0x07
    1b16:	26 83       	std	Z+6, r18	; 0x06
    1b18:	2a e9       	ldi	r18, 0x9A	; 154
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	31 87       	std	Z+9, r19	; 0x09
    1b1e:	20 87       	std	Z+8, r18	; 0x08
    1b20:	2c e9       	ldi	r18, 0x9C	; 156
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	33 87       	std	Z+11, r19	; 0x0b
    1b26:	22 87       	std	Z+10, r18	; 0x0a
    1b28:	2d e2       	ldi	r18, 0x2D	; 45
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	35 87       	std	Z+13, r19	; 0x0d
    1b2e:	24 87       	std	Z+12, r18	; 0x0c
    1b30:	2e e2       	ldi	r18, 0x2E	; 46
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	37 87       	std	Z+15, r19	; 0x0f
    1b36:	26 87       	std	Z+14, r18	; 0x0e
    1b38:	28 e0       	ldi	r18, 0x08	; 8
    1b3a:	20 8b       	std	Z+16, r18	; 0x10
    1b3c:	90 e1       	ldi	r25, 0x10	; 16
    1b3e:	91 8b       	std	Z+17, r25	; 0x11
    1b40:	82 8b       	std	Z+18, r24	; 0x12
    1b42:	e6 e9       	ldi	r30, 0x96	; 150
    1b44:	f7 e0       	ldi	r31, 0x07	; 7
    1b46:	46 ea       	ldi	r20, 0xA6	; 166
    1b48:	50 e0       	ldi	r21, 0x00	; 0
    1b4a:	51 83       	std	Z+1, r21	; 0x01
    1b4c:	40 83       	st	Z, r20
    1b4e:	40 ea       	ldi	r20, 0xA0	; 160
    1b50:	50 e0       	ldi	r21, 0x00	; 0
    1b52:	53 83       	std	Z+3, r21	; 0x03
    1b54:	42 83       	std	Z+2, r20	; 0x02
    1b56:	41 ea       	ldi	r20, 0xA1	; 161
    1b58:	50 e0       	ldi	r21, 0x00	; 0
    1b5a:	55 83       	std	Z+5, r21	; 0x05
    1b5c:	44 83       	std	Z+4, r20	; 0x04
    1b5e:	48 ea       	ldi	r20, 0xA8	; 168
    1b60:	50 e0       	ldi	r21, 0x00	; 0
    1b62:	57 83       	std	Z+7, r21	; 0x07
    1b64:	46 83       	std	Z+6, r20	; 0x06
    1b66:	4a ea       	ldi	r20, 0xAA	; 170
    1b68:	50 e0       	ldi	r21, 0x00	; 0
    1b6a:	51 87       	std	Z+9, r21	; 0x09
    1b6c:	40 87       	std	Z+8, r20	; 0x08
    1b6e:	4c ea       	ldi	r20, 0xAC	; 172
    1b70:	50 e0       	ldi	r21, 0x00	; 0
    1b72:	53 87       	std	Z+11, r21	; 0x0b
    1b74:	42 87       	std	Z+10, r20	; 0x0a
    1b76:	41 e0       	ldi	r20, 0x01	; 1
    1b78:	51 e0       	ldi	r21, 0x01	; 1
    1b7a:	55 87       	std	Z+13, r21	; 0x0d
    1b7c:	44 87       	std	Z+12, r20	; 0x0c
    1b7e:	42 e0       	ldi	r20, 0x02	; 2
    1b80:	51 e0       	ldi	r21, 0x01	; 1
    1b82:	57 87       	std	Z+15, r21	; 0x0f
    1b84:	46 87       	std	Z+14, r20	; 0x0e
    1b86:	20 8b       	std	Z+16, r18	; 0x10
    1b88:	91 8b       	std	Z+17, r25	; 0x11
    1b8a:	82 8b       	std	Z+18, r24	; 0x12
    1b8c:	e3 e8       	ldi	r30, 0x83	; 131
    1b8e:	f7 e0       	ldi	r31, 0x07	; 7
    1b90:	46 e2       	ldi	r20, 0x26	; 38
    1b92:	51 e0       	ldi	r21, 0x01	; 1
    1b94:	51 83       	std	Z+1, r21	; 0x01
    1b96:	40 83       	st	Z, r20
    1b98:	40 e2       	ldi	r20, 0x20	; 32
    1b9a:	51 e0       	ldi	r21, 0x01	; 1
    1b9c:	53 83       	std	Z+3, r21	; 0x03
    1b9e:	42 83       	std	Z+2, r20	; 0x02
    1ba0:	41 e2       	ldi	r20, 0x21	; 33
    1ba2:	51 e0       	ldi	r21, 0x01	; 1
    1ba4:	55 83       	std	Z+5, r21	; 0x05
    1ba6:	44 83       	std	Z+4, r20	; 0x04
    1ba8:	48 e2       	ldi	r20, 0x28	; 40
    1baa:	51 e0       	ldi	r21, 0x01	; 1
    1bac:	57 83       	std	Z+7, r21	; 0x07
    1bae:	46 83       	std	Z+6, r20	; 0x06
    1bb0:	4a e2       	ldi	r20, 0x2A	; 42
    1bb2:	51 e0       	ldi	r21, 0x01	; 1
    1bb4:	51 87       	std	Z+9, r21	; 0x09
    1bb6:	40 87       	std	Z+8, r20	; 0x08
    1bb8:	4c e2       	ldi	r20, 0x2C	; 44
    1bba:	51 e0       	ldi	r21, 0x01	; 1
    1bbc:	53 87       	std	Z+11, r21	; 0x0b
    1bbe:	42 87       	std	Z+10, r20	; 0x0a
    1bc0:	4a e0       	ldi	r20, 0x0A	; 10
    1bc2:	51 e0       	ldi	r21, 0x01	; 1
    1bc4:	55 87       	std	Z+13, r21	; 0x0d
    1bc6:	44 87       	std	Z+12, r20	; 0x0c
    1bc8:	4b e0       	ldi	r20, 0x0B	; 11
    1bca:	51 e0       	ldi	r21, 0x01	; 1
    1bcc:	57 87       	std	Z+15, r21	; 0x0f
    1bce:	46 87       	std	Z+14, r20	; 0x0e
    1bd0:	20 8b       	std	Z+16, r18	; 0x10
    1bd2:	91 8b       	std	Z+17, r25	; 0x11
    1bd4:	82 8b       	std	Z+18, r24	; 0x12
    1bd6:	08 95       	ret

00001bd8 <_ZN13HardwareTimer12findPrescaleEf>:
	beginMs(us / 1000.0);
}

void HardwareTimer::beginNs(float ns){
	beginMs(ns / 1000000.0);
}
    1bd8:	cf 92       	push	r12
    1bda:	df 92       	push	r13
    1bdc:	ef 92       	push	r14
    1bde:	ff 92       	push	r15
    1be0:	cf 93       	push	r28
    1be2:	df 93       	push	r29
    1be4:	ec 01       	movw	r28, r24
    1be6:	cb 01       	movw	r24, r22
    1be8:	ba 01       	movw	r22, r20
    1bea:	20 e0       	ldi	r18, 0x00	; 0
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	4a e7       	ldi	r20, 0x7A	; 122
    1bf0:	56 e4       	ldi	r21, 0x46	; 70
    1bf2:	0e 94 e7 28 	call	0x51ce	; 0x51ce <__mulsf3>
    1bf6:	20 e0       	ldi	r18, 0x00	; 0
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	40 e8       	ldi	r20, 0x80	; 128
    1bfc:	5b e3       	ldi	r21, 0x3B	; 59
    1bfe:	0e 94 e7 28 	call	0x51ce	; 0x51ce <__mulsf3>
    1c02:	6b 01       	movw	r12, r22
    1c04:	7c 01       	movw	r14, r24
    1c06:	20 e0       	ldi	r18, 0x00	; 0
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	40 e8       	ldi	r20, 0x80	; 128
    1c0c:	5f e3       	ldi	r21, 0x3F	; 63
    1c0e:	0e 94 99 27 	call	0x4f32	; 0x4f32 <__cmpsf2>
    1c12:	18 16       	cp	r1, r24
    1c14:	3c f0       	brlt	.+14     	; 0x1c24 <_ZN13HardwareTimer12findPrescaleEf+0x4c>
    1c16:	81 e0       	ldi	r24, 0x01	; 1
    1c18:	8a 87       	std	Y+10, r24	; 0x0a
    1c1a:	60 e0       	ldi	r22, 0x00	; 0
    1c1c:	70 e0       	ldi	r23, 0x00	; 0
    1c1e:	80 e8       	ldi	r24, 0x80	; 128
    1c20:	9f e3       	ldi	r25, 0x3F	; 63
    1c22:	39 c0       	rjmp	.+114    	; 0x1c96 <_ZN13HardwareTimer12findPrescaleEf+0xbe>
    1c24:	20 e0       	ldi	r18, 0x00	; 0
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	40 e0       	ldi	r20, 0x00	; 0
    1c2a:	51 e4       	ldi	r21, 0x41	; 65
    1c2c:	c7 01       	movw	r24, r14
    1c2e:	b6 01       	movw	r22, r12
    1c30:	0e 94 99 27 	call	0x4f32	; 0x4f32 <__cmpsf2>
    1c34:	18 16       	cp	r1, r24
    1c36:	3c f0       	brlt	.+14     	; 0x1c46 <_ZN13HardwareTimer12findPrescaleEf+0x6e>
    1c38:	82 e0       	ldi	r24, 0x02	; 2
    1c3a:	8a 87       	std	Y+10, r24	; 0x0a
    1c3c:	60 e0       	ldi	r22, 0x00	; 0
    1c3e:	70 e0       	ldi	r23, 0x00	; 0
    1c40:	80 e0       	ldi	r24, 0x00	; 0
    1c42:	91 e4       	ldi	r25, 0x41	; 65
    1c44:	28 c0       	rjmp	.+80     	; 0x1c96 <_ZN13HardwareTimer12findPrescaleEf+0xbe>
    1c46:	20 e0       	ldi	r18, 0x00	; 0
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	40 e8       	ldi	r20, 0x80	; 128
    1c4c:	52 e4       	ldi	r21, 0x42	; 66
    1c4e:	c7 01       	movw	r24, r14
    1c50:	b6 01       	movw	r22, r12
    1c52:	0e 94 99 27 	call	0x4f32	; 0x4f32 <__cmpsf2>
    1c56:	18 16       	cp	r1, r24
    1c58:	3c f0       	brlt	.+14     	; 0x1c68 <_ZN13HardwareTimer12findPrescaleEf+0x90>
    1c5a:	83 e0       	ldi	r24, 0x03	; 3
    1c5c:	8a 87       	std	Y+10, r24	; 0x0a
    1c5e:	60 e0       	ldi	r22, 0x00	; 0
    1c60:	70 e0       	ldi	r23, 0x00	; 0
    1c62:	80 e8       	ldi	r24, 0x80	; 128
    1c64:	92 e4       	ldi	r25, 0x42	; 66
    1c66:	17 c0       	rjmp	.+46     	; 0x1c96 <_ZN13HardwareTimer12findPrescaleEf+0xbe>
    1c68:	20 e0       	ldi	r18, 0x00	; 0
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	40 e8       	ldi	r20, 0x80	; 128
    1c6e:	53 e4       	ldi	r21, 0x43	; 67
    1c70:	c7 01       	movw	r24, r14
    1c72:	b6 01       	movw	r22, r12
    1c74:	0e 94 99 27 	call	0x4f32	; 0x4f32 <__cmpsf2>
    1c78:	18 16       	cp	r1, r24
    1c7a:	3c f0       	brlt	.+14     	; 0x1c8a <_ZN13HardwareTimer12findPrescaleEf+0xb2>
    1c7c:	84 e0       	ldi	r24, 0x04	; 4
    1c7e:	8a 87       	std	Y+10, r24	; 0x0a
    1c80:	60 e0       	ldi	r22, 0x00	; 0
    1c82:	70 e0       	ldi	r23, 0x00	; 0
    1c84:	80 e8       	ldi	r24, 0x80	; 128
    1c86:	93 e4       	ldi	r25, 0x43	; 67
    1c88:	06 c0       	rjmp	.+12     	; 0x1c96 <_ZN13HardwareTimer12findPrescaleEf+0xbe>
    1c8a:	85 e0       	ldi	r24, 0x05	; 5
    1c8c:	8a 87       	std	Y+10, r24	; 0x0a
    1c8e:	60 e0       	ldi	r22, 0x00	; 0
    1c90:	70 e0       	ldi	r23, 0x00	; 0
    1c92:	80 e8       	ldi	r24, 0x80	; 128
    1c94:	94 e4       	ldi	r25, 0x44	; 68
    1c96:	df 91       	pop	r29
    1c98:	cf 91       	pop	r28
    1c9a:	ff 90       	pop	r15
    1c9c:	ef 90       	pop	r14
    1c9e:	df 90       	pop	r13
    1ca0:	cf 90       	pop	r12
    1ca2:	08 95       	ret

00001ca4 <_ZN13HardwareTimer7beginMsEf>:
    1ca4:	8f 92       	push	r8
    1ca6:	9f 92       	push	r9
    1ca8:	af 92       	push	r10
    1caa:	bf 92       	push	r11
    1cac:	cf 92       	push	r12
    1cae:	df 92       	push	r13
    1cb0:	ef 92       	push	r14
    1cb2:	ff 92       	push	r15
    1cb4:	cf 93       	push	r28
    1cb6:	df 93       	push	r29
    1cb8:	ec 01       	movw	r28, r24
    1cba:	6a 01       	movw	r12, r20
    1cbc:	7b 01       	movw	r14, r22
    1cbe:	e8 81       	ld	r30, Y
    1cc0:	f9 81       	ldd	r31, Y+1	; 0x01
    1cc2:	82 e0       	ldi	r24, 0x02	; 2
    1cc4:	80 83       	st	Z, r24
    1cc6:	ea 81       	ldd	r30, Y+2	; 0x02
    1cc8:	fb 81       	ldd	r31, Y+3	; 0x03
    1cca:	10 82       	st	Z, r1
    1ccc:	ec 81       	ldd	r30, Y+4	; 0x04
    1cce:	fd 81       	ldd	r31, Y+5	; 0x05
    1cd0:	80 83       	st	Z, r24
    1cd2:	78 94       	sei
    1cd4:	ce 01       	movw	r24, r28
    1cd6:	80 df       	rcall	.-256    	; 0x1bd8 <_ZN13HardwareTimer12findPrescaleEf>
    1cd8:	4b 01       	movw	r8, r22
    1cda:	5c 01       	movw	r10, r24
    1cdc:	20 e0       	ldi	r18, 0x00	; 0
    1cde:	34 e2       	ldi	r19, 0x24	; 36
    1ce0:	44 e7       	ldi	r20, 0x74	; 116
    1ce2:	5b e4       	ldi	r21, 0x4B	; 75
    1ce4:	c7 01       	movw	r24, r14
    1ce6:	b6 01       	movw	r22, r12
    1ce8:	0e 94 e7 28 	call	0x51ce	; 0x51ce <__mulsf3>
    1cec:	6b 01       	movw	r12, r22
    1cee:	7c 01       	movw	r14, r24
    1cf0:	20 e0       	ldi	r18, 0x00	; 0
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	4a e7       	ldi	r20, 0x7A	; 122
    1cf6:	54 e4       	ldi	r21, 0x44	; 68
    1cf8:	c5 01       	movw	r24, r10
    1cfa:	b4 01       	movw	r22, r8
    1cfc:	0e 94 e7 28 	call	0x51ce	; 0x51ce <__mulsf3>
    1d00:	9b 01       	movw	r18, r22
    1d02:	ac 01       	movw	r20, r24
    1d04:	c7 01       	movw	r24, r14
    1d06:	b6 01       	movw	r22, r12
    1d08:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <__divsf3>
    1d0c:	20 e0       	ldi	r18, 0x00	; 0
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	40 e8       	ldi	r20, 0x80	; 128
    1d12:	5f e3       	ldi	r21, 0x3F	; 63
    1d14:	0e 94 34 27 	call	0x4e68	; 0x4e68 <__subsf3>
    1d18:	6b 01       	movw	r12, r22
    1d1a:	7c 01       	movw	r14, r24
    1d1c:	20 e0       	ldi	r18, 0x00	; 0
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	4f e7       	ldi	r20, 0x7F	; 127
    1d22:	53 e4       	ldi	r21, 0x43	; 67
    1d24:	0e 94 e3 28 	call	0x51c6	; 0x51c6 <__gesf2>
    1d28:	18 16       	cp	r1, r24
    1d2a:	2c f4       	brge	.+10     	; 0x1d36 <_ZN13HardwareTimer7beginMsEf+0x92>
    1d2c:	e8 85       	ldd	r30, Y+8	; 0x08
    1d2e:	f9 85       	ldd	r31, Y+9	; 0x09
    1d30:	8f ef       	ldi	r24, 0xFF	; 255
    1d32:	80 83       	st	Z, r24
    1d34:	1b c0       	rjmp	.+54     	; 0x1d6c <_ZN13HardwareTimer7beginMsEf+0xc8>
    1d36:	20 e0       	ldi	r18, 0x00	; 0
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	a9 01       	movw	r20, r18
    1d3c:	c7 01       	movw	r24, r14
    1d3e:	b6 01       	movw	r22, r12
    1d40:	0e 94 99 27 	call	0x4f32	; 0x4f32 <__cmpsf2>
    1d44:	88 23       	and	r24, r24
    1d46:	24 f4       	brge	.+8      	; 0x1d50 <_ZN13HardwareTimer7beginMsEf+0xac>
    1d48:	e8 85       	ldd	r30, Y+8	; 0x08
    1d4a:	f9 85       	ldd	r31, Y+9	; 0x09
    1d4c:	10 82       	st	Z, r1
    1d4e:	0e c0       	rjmp	.+28     	; 0x1d6c <_ZN13HardwareTimer7beginMsEf+0xc8>
    1d50:	08 84       	ldd	r0, Y+8	; 0x08
    1d52:	d9 85       	ldd	r29, Y+9	; 0x09
    1d54:	c0 2d       	mov	r28, r0
    1d56:	20 e0       	ldi	r18, 0x00	; 0
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	40 e0       	ldi	r20, 0x00	; 0
    1d5c:	5f e3       	ldi	r21, 0x3F	; 63
    1d5e:	c7 01       	movw	r24, r14
    1d60:	b6 01       	movw	r22, r12
    1d62:	0e 94 35 27 	call	0x4e6a	; 0x4e6a <__addsf3>
    1d66:	0e 94 05 28 	call	0x500a	; 0x500a <__fixunssfsi>
    1d6a:	68 83       	st	Y, r22
    1d6c:	df 91       	pop	r29
    1d6e:	cf 91       	pop	r28
    1d70:	ff 90       	pop	r15
    1d72:	ef 90       	pop	r14
    1d74:	df 90       	pop	r13
    1d76:	cf 90       	pop	r12
    1d78:	bf 90       	pop	r11
    1d7a:	af 90       	pop	r10
    1d7c:	9f 90       	pop	r9
    1d7e:	8f 90       	pop	r8
    1d80:	08 95       	ret

00001d82 <_ZN13HardwareTimer5startEh>:

void HardwareTimer::start(uint8_t ticks/*= 1*/){
    1d82:	fc 01       	movw	r30, r24
	*_tccrB = 0; //Disable timer
    1d84:	a2 81       	ldd	r26, Z+2	; 0x02
    1d86:	b3 81       	ldd	r27, Z+3	; 0x03
    1d88:	1c 92       	st	X, r1
	ovfRemaining = ticks;
    1d8a:	63 87       	std	Z+11, r22	; 0x0b
	*_tcnt = 0; //Reset timer
    1d8c:	a6 81       	ldd	r26, Z+6	; 0x06
    1d8e:	b7 81       	ldd	r27, Z+7	; 0x07
    1d90:	1c 92       	st	X, r1
	*_tccrB = CLK_DIV_1024; 
    1d92:	02 80       	ldd	r0, Z+2	; 0x02
    1d94:	f3 81       	ldd	r31, Z+3	; 0x03
    1d96:	e0 2d       	mov	r30, r0
    1d98:	85 e0       	ldi	r24, 0x05	; 5
    1d9a:	80 83       	st	Z, r24
    1d9c:	08 95       	ret

00001d9e <_ZN13HardwareTimer8finishedEv>:
}

bool HardwareTimer::finished(){
	return ovfRemaining == 0;
    1d9e:	fc 01       	movw	r30, r24
    1da0:	93 85       	ldd	r25, Z+11	; 0x0b
    1da2:	81 e0       	ldi	r24, 0x01	; 1
    1da4:	91 11       	cpse	r25, r1
    1da6:	80 e0       	ldi	r24, 0x00	; 0
}
    1da8:	08 95       	ret

00001daa <_ZN13HardwareTimer13waitForFinishEv>:

void HardwareTimer::waitForFinish(){
    1daa:	fc 01       	movw	r30, r24
	while(ovfRemaining != 0){
    1dac:	93 85       	ldd	r25, Z+11	; 0x0b
    1dae:	91 11       	cpse	r25, r1
    1db0:	fd cf       	rjmp	.-6      	; 0x1dac <_ZN13HardwareTimer13waitForFinishEv+0x2>
	}
}
    1db2:	08 95       	ret

00001db4 <_ZN13HardwareTimer14isr_timer_compEv>:

void HardwareTimer::isr_timer_comp(){
    1db4:	fc 01       	movw	r30, r24
	if(ovfRemaining > 0) ovfRemaining--;
    1db6:	83 85       	ldd	r24, Z+11	; 0x0b
    1db8:	88 23       	and	r24, r24
    1dba:	19 f0       	breq	.+6      	; 0x1dc2 <_ZN13HardwareTimer14isr_timer_compEv+0xe>
    1dbc:	83 85       	ldd	r24, Z+11	; 0x0b
    1dbe:	81 50       	subi	r24, 0x01	; 1
    1dc0:	83 87       	std	Z+11, r24	; 0x0b
    1dc2:	08 95       	ret

00001dc4 <__vector_21>:
}

#ifdef USE_TIMER_0
HardwareTimer Timer0(TCCR0A, TCCR0B, TIMSK0, TCNT0, OCR0A);

ISR(TIMER0_COMPA_vect){
    1dc4:	1f 92       	push	r1
    1dc6:	0f 92       	push	r0
    1dc8:	0f b6       	in	r0, 0x3f	; 63
    1dca:	0f 92       	push	r0
    1dcc:	11 24       	eor	r1, r1
    1dce:	0b b6       	in	r0, 0x3b	; 59
    1dd0:	0f 92       	push	r0
    1dd2:	2f 93       	push	r18
    1dd4:	3f 93       	push	r19
    1dd6:	4f 93       	push	r20
    1dd8:	5f 93       	push	r21
    1dda:	6f 93       	push	r22
    1ddc:	7f 93       	push	r23
    1dde:	8f 93       	push	r24
    1de0:	9f 93       	push	r25
    1de2:	af 93       	push	r26
    1de4:	bf 93       	push	r27
    1de6:	ef 93       	push	r30
    1de8:	ff 93       	push	r31
	Timer0.isr_timer_comp();
    1dea:	8b ed       	ldi	r24, 0xDB	; 219
    1dec:	97 e0       	ldi	r25, 0x07	; 7
    1dee:	e2 df       	rcall	.-60     	; 0x1db4 <_ZN13HardwareTimer14isr_timer_compEv>
}
    1df0:	ff 91       	pop	r31
    1df2:	ef 91       	pop	r30
    1df4:	bf 91       	pop	r27
    1df6:	af 91       	pop	r26
    1df8:	9f 91       	pop	r25
    1dfa:	8f 91       	pop	r24
    1dfc:	7f 91       	pop	r23
    1dfe:	6f 91       	pop	r22
    1e00:	5f 91       	pop	r21
    1e02:	4f 91       	pop	r20
    1e04:	3f 91       	pop	r19
    1e06:	2f 91       	pop	r18
    1e08:	0f 90       	pop	r0
    1e0a:	0b be       	out	0x3b, r0	; 59
    1e0c:	0f 90       	pop	r0
    1e0e:	0f be       	out	0x3f, r0	; 63
    1e10:	0f 90       	pop	r0
    1e12:	1f 90       	pop	r1
    1e14:	18 95       	reti

00001e16 <__vector_13>:
#endif

#ifdef USE_TIMER_2
HardwareTimer Timer2(TCCR2A, TCCR2B, TIMSK2, TCNT2, OCR2A);

ISR(TIMER2_COMPA_vect){
    1e16:	1f 92       	push	r1
    1e18:	0f 92       	push	r0
    1e1a:	0f b6       	in	r0, 0x3f	; 63
    1e1c:	0f 92       	push	r0
    1e1e:	11 24       	eor	r1, r1
    1e20:	0b b6       	in	r0, 0x3b	; 59
    1e22:	0f 92       	push	r0
    1e24:	2f 93       	push	r18
    1e26:	3f 93       	push	r19
    1e28:	4f 93       	push	r20
    1e2a:	5f 93       	push	r21
    1e2c:	6f 93       	push	r22
    1e2e:	7f 93       	push	r23
    1e30:	8f 93       	push	r24
    1e32:	9f 93       	push	r25
    1e34:	af 93       	push	r26
    1e36:	bf 93       	push	r27
    1e38:	ef 93       	push	r30
    1e3a:	ff 93       	push	r31
	Timer2.isr_timer_comp();
    1e3c:	8f ec       	ldi	r24, 0xCF	; 207
    1e3e:	97 e0       	ldi	r25, 0x07	; 7
    1e40:	b9 df       	rcall	.-142    	; 0x1db4 <_ZN13HardwareTimer14isr_timer_compEv>
}
    1e42:	ff 91       	pop	r31
    1e44:	ef 91       	pop	r30
    1e46:	bf 91       	pop	r27
    1e48:	af 91       	pop	r26
    1e4a:	9f 91       	pop	r25
    1e4c:	8f 91       	pop	r24
    1e4e:	7f 91       	pop	r23
    1e50:	6f 91       	pop	r22
    1e52:	5f 91       	pop	r21
    1e54:	4f 91       	pop	r20
    1e56:	3f 91       	pop	r19
    1e58:	2f 91       	pop	r18
    1e5a:	0f 90       	pop	r0
    1e5c:	0b be       	out	0x3b, r0	; 59
    1e5e:	0f 90       	pop	r0
    1e60:	0f be       	out	0x3f, r0	; 63
    1e62:	0f 90       	pop	r0
    1e64:	1f 90       	pop	r1
    1e66:	18 95       	reti

00001e68 <_GLOBAL__sub_I__ZN13HardwareTimerC2ERVhS1_S1_S1_S1_>:
#define CLK_DIV_64 (_BV(CS01) | _BV(CS00))
#define CLK_DIV_256 (_BV(CS02))
#define CLK_DIV_1024 (_BV(CS02) | _BV(CS00))

HardwareTimer::HardwareTimer(Register &tccrA, Register &tccrB, Register &timsk, Register &tcnt, Register &ocra)
: _tccrA(&tccrA), _tccrB(&tccrB), _timsk(&timsk), _tcnt(&tcnt), _ocra(&ocra)
    1e68:	eb ed       	ldi	r30, 0xDB	; 219
    1e6a:	f7 e0       	ldi	r31, 0x07	; 7
    1e6c:	84 e4       	ldi	r24, 0x44	; 68
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	91 83       	std	Z+1, r25	; 0x01
    1e72:	80 83       	st	Z, r24
    1e74:	85 e4       	ldi	r24, 0x45	; 69
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	93 83       	std	Z+3, r25	; 0x03
    1e7a:	82 83       	std	Z+2, r24	; 0x02
    1e7c:	8e e6       	ldi	r24, 0x6E	; 110
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	95 83       	std	Z+5, r25	; 0x05
    1e82:	84 83       	std	Z+4, r24	; 0x04
    1e84:	86 e4       	ldi	r24, 0x46	; 70
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	97 83       	std	Z+7, r25	; 0x07
    1e8a:	86 83       	std	Z+6, r24	; 0x06
    1e8c:	87 e4       	ldi	r24, 0x47	; 71
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	91 87       	std	Z+9, r25	; 0x09
    1e92:	80 87       	std	Z+8, r24	; 0x08
    1e94:	ef ec       	ldi	r30, 0xCF	; 207
    1e96:	f7 e0       	ldi	r31, 0x07	; 7
    1e98:	80 eb       	ldi	r24, 0xB0	; 176
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	91 83       	std	Z+1, r25	; 0x01
    1e9e:	80 83       	st	Z, r24
    1ea0:	81 eb       	ldi	r24, 0xB1	; 177
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	93 83       	std	Z+3, r25	; 0x03
    1ea6:	82 83       	std	Z+2, r24	; 0x02
    1ea8:	80 e7       	ldi	r24, 0x70	; 112
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	95 83       	std	Z+5, r25	; 0x05
    1eae:	84 83       	std	Z+4, r24	; 0x04
    1eb0:	82 eb       	ldi	r24, 0xB2	; 178
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	97 83       	std	Z+7, r25	; 0x07
    1eb6:	86 83       	std	Z+6, r24	; 0x06
    1eb8:	83 eb       	ldi	r24, 0xB3	; 179
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	91 87       	std	Z+9, r25	; 0x09
    1ebe:	80 87       	std	Z+8, r24	; 0x08
    1ec0:	08 95       	ret

00001ec2 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1ec2:	10 92 54 08 	sts	0x0854, r1	; 0x800854 <twi_state>
    1ec6:	81 e0       	ldi	r24, 0x01	; 1
    1ec8:	80 93 52 08 	sts	0x0852, r24	; 0x800852 <twi_sendStop>
    1ecc:	10 92 51 08 	sts	0x0851, r1	; 0x800851 <twi_inRepStart>
    1ed0:	8b b1       	in	r24, 0x0b	; 11
    1ed2:	83 60       	ori	r24, 0x03	; 3
    1ed4:	8b b9       	out	0x0b, r24	; 11
    1ed6:	e9 eb       	ldi	r30, 0xB9	; 185
    1ed8:	f0 e0       	ldi	r31, 0x00	; 0
    1eda:	80 81       	ld	r24, Z
    1edc:	8e 7f       	andi	r24, 0xFE	; 254
    1ede:	80 83       	st	Z, r24
    1ee0:	80 81       	ld	r24, Z
    1ee2:	8d 7f       	andi	r24, 0xFD	; 253
    1ee4:	80 83       	st	Z, r24
    1ee6:	88 e4       	ldi	r24, 0x48	; 72
    1ee8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    1eec:	85 e4       	ldi	r24, 0x45	; 69
    1eee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1ef2:	08 95       	ret

00001ef4 <twi_setFrequency>:
    1ef4:	9b 01       	movw	r18, r22
    1ef6:	ac 01       	movw	r20, r24
    1ef8:	60 e0       	ldi	r22, 0x00	; 0
    1efa:	74 e2       	ldi	r23, 0x24	; 36
    1efc:	84 ef       	ldi	r24, 0xF4	; 244
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	0e 94 59 29 	call	0x52b2	; 0x52b2 <__udivmodsi4>
    1f04:	da 01       	movw	r26, r20
    1f06:	c9 01       	movw	r24, r18
    1f08:	40 97       	sbiw	r24, 0x10	; 16
    1f0a:	a1 09       	sbc	r26, r1
    1f0c:	b1 09       	sbc	r27, r1
    1f0e:	b6 95       	lsr	r27
    1f10:	a7 95       	ror	r26
    1f12:	97 95       	ror	r25
    1f14:	87 95       	ror	r24
    1f16:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    1f1a:	08 95       	ret

00001f1c <twi_readFrom>:
    1f1c:	41 32       	cpi	r20, 0x21	; 33
    1f1e:	08 f0       	brcs	.+2      	; 0x1f22 <twi_readFrom+0x6>
    1f20:	4c c0       	rjmp	.+152    	; 0x1fba <twi_readFrom+0x9e>
    1f22:	90 91 54 08 	lds	r25, 0x0854	; 0x800854 <twi_state>
    1f26:	91 11       	cpse	r25, r1
    1f28:	fc cf       	rjmp	.-8      	; 0x1f22 <twi_readFrom+0x6>
    1f2a:	31 e0       	ldi	r19, 0x01	; 1
    1f2c:	30 93 54 08 	sts	0x0854, r19	; 0x800854 <twi_state>
    1f30:	20 93 52 08 	sts	0x0852, r18	; 0x800852 <twi_sendStop>
    1f34:	2f ef       	ldi	r18, 0xFF	; 255
    1f36:	20 93 e7 07 	sts	0x07E7, r18	; 0x8007e7 <twi_error>
    1f3a:	10 92 2c 08 	sts	0x082C, r1	; 0x80082c <twi_masterBufferIndex>
    1f3e:	24 0f       	add	r18, r20
    1f40:	20 93 2b 08 	sts	0x082B, r18	; 0x80082b <twi_masterBufferLength>
    1f44:	30 93 53 08 	sts	0x0853, r19	; 0x800853 <twi_slarw>
    1f48:	20 91 53 08 	lds	r18, 0x0853	; 0x800853 <twi_slarw>
    1f4c:	88 0f       	add	r24, r24
    1f4e:	82 2b       	or	r24, r18
    1f50:	80 93 53 08 	sts	0x0853, r24	; 0x800853 <twi_slarw>
    1f54:	80 91 51 08 	lds	r24, 0x0851	; 0x800851 <twi_inRepStart>
    1f58:	81 30       	cpi	r24, 0x01	; 1
    1f5a:	81 f4       	brne	.+32     	; 0x1f7c <twi_readFrom+0x60>
    1f5c:	10 92 51 08 	sts	0x0851, r1	; 0x800851 <twi_inRepStart>
    1f60:	ab eb       	ldi	r26, 0xBB	; 187
    1f62:	b0 e0       	ldi	r27, 0x00	; 0
    1f64:	ec eb       	ldi	r30, 0xBC	; 188
    1f66:	f0 e0       	ldi	r31, 0x00	; 0
    1f68:	80 91 53 08 	lds	r24, 0x0853	; 0x800853 <twi_slarw>
    1f6c:	8c 93       	st	X, r24
    1f6e:	80 81       	ld	r24, Z
    1f70:	83 fd       	sbrc	r24, 3
    1f72:	fa cf       	rjmp	.-12     	; 0x1f68 <twi_readFrom+0x4c>
    1f74:	85 ec       	ldi	r24, 0xC5	; 197
    1f76:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1f7a:	03 c0       	rjmp	.+6      	; 0x1f82 <twi_readFrom+0x66>
    1f7c:	85 ee       	ldi	r24, 0xE5	; 229
    1f7e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1f82:	80 91 54 08 	lds	r24, 0x0854	; 0x800854 <twi_state>
    1f86:	81 30       	cpi	r24, 0x01	; 1
    1f88:	e1 f3       	breq	.-8      	; 0x1f82 <twi_readFrom+0x66>
    1f8a:	80 91 2c 08 	lds	r24, 0x082C	; 0x80082c <twi_masterBufferIndex>
    1f8e:	84 17       	cp	r24, r20
    1f90:	10 f4       	brcc	.+4      	; 0x1f96 <twi_readFrom+0x7a>
    1f92:	40 91 2c 08 	lds	r20, 0x082C	; 0x80082c <twi_masterBufferIndex>
    1f96:	44 23       	and	r20, r20
    1f98:	89 f0       	breq	.+34     	; 0x1fbc <twi_readFrom+0xa0>
    1f9a:	ed e2       	ldi	r30, 0x2D	; 45
    1f9c:	f8 e0       	ldi	r31, 0x08	; 8
    1f9e:	a6 2f       	mov	r26, r22
    1fa0:	b7 2f       	mov	r27, r23
    1fa2:	2f ef       	ldi	r18, 0xFF	; 255
    1fa4:	24 0f       	add	r18, r20
    1fa6:	30 e0       	ldi	r19, 0x00	; 0
    1fa8:	22 5d       	subi	r18, 0xD2	; 210
    1faa:	37 4f       	sbci	r19, 0xF7	; 247
    1fac:	81 91       	ld	r24, Z+
    1fae:	8d 93       	st	X+, r24
    1fb0:	e2 17       	cp	r30, r18
    1fb2:	f3 07       	cpc	r31, r19
    1fb4:	d9 f7       	brne	.-10     	; 0x1fac <twi_readFrom+0x90>
    1fb6:	94 2f       	mov	r25, r20
    1fb8:	01 c0       	rjmp	.+2      	; 0x1fbc <twi_readFrom+0xa0>
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	89 2f       	mov	r24, r25
    1fbe:	08 95       	ret

00001fc0 <twi_writeTo>:
    1fc0:	0f 93       	push	r16
    1fc2:	41 32       	cpi	r20, 0x21	; 33
    1fc4:	08 f0       	brcs	.+2      	; 0x1fc8 <twi_writeTo+0x8>
    1fc6:	57 c0       	rjmp	.+174    	; 0x2076 <twi_writeTo+0xb6>
    1fc8:	30 91 54 08 	lds	r19, 0x0854	; 0x800854 <twi_state>
    1fcc:	31 11       	cpse	r19, r1
    1fce:	fc cf       	rjmp	.-8      	; 0x1fc8 <twi_writeTo+0x8>
    1fd0:	92 e0       	ldi	r25, 0x02	; 2
    1fd2:	90 93 54 08 	sts	0x0854, r25	; 0x800854 <twi_state>
    1fd6:	00 93 52 08 	sts	0x0852, r16	; 0x800852 <twi_sendStop>
    1fda:	9f ef       	ldi	r25, 0xFF	; 255
    1fdc:	90 93 e7 07 	sts	0x07E7, r25	; 0x8007e7 <twi_error>
    1fe0:	10 92 2c 08 	sts	0x082C, r1	; 0x80082c <twi_masterBufferIndex>
    1fe4:	40 93 2b 08 	sts	0x082B, r20	; 0x80082b <twi_masterBufferLength>
    1fe8:	44 23       	and	r20, r20
    1fea:	71 f0       	breq	.+28     	; 0x2008 <twi_writeTo+0x48>
    1fec:	fb 01       	movw	r30, r22
    1fee:	ad e2       	ldi	r26, 0x2D	; 45
    1ff0:	b8 e0       	ldi	r27, 0x08	; 8
    1ff2:	41 50       	subi	r20, 0x01	; 1
    1ff4:	50 e0       	ldi	r21, 0x00	; 0
    1ff6:	4f 5f       	subi	r20, 0xFF	; 255
    1ff8:	5f 4f       	sbci	r21, 0xFF	; 255
    1ffa:	64 0f       	add	r22, r20
    1ffc:	75 1f       	adc	r23, r21
    1ffe:	91 91       	ld	r25, Z+
    2000:	9d 93       	st	X+, r25
    2002:	e6 17       	cp	r30, r22
    2004:	f7 07       	cpc	r31, r23
    2006:	d9 f7       	brne	.-10     	; 0x1ffe <twi_writeTo+0x3e>
    2008:	10 92 53 08 	sts	0x0853, r1	; 0x800853 <twi_slarw>
    200c:	90 91 53 08 	lds	r25, 0x0853	; 0x800853 <twi_slarw>
    2010:	88 0f       	add	r24, r24
    2012:	89 2b       	or	r24, r25
    2014:	80 93 53 08 	sts	0x0853, r24	; 0x800853 <twi_slarw>
    2018:	80 91 51 08 	lds	r24, 0x0851	; 0x800851 <twi_inRepStart>
    201c:	81 30       	cpi	r24, 0x01	; 1
    201e:	81 f4       	brne	.+32     	; 0x2040 <twi_writeTo+0x80>
    2020:	10 92 51 08 	sts	0x0851, r1	; 0x800851 <twi_inRepStart>
    2024:	ab eb       	ldi	r26, 0xBB	; 187
    2026:	b0 e0       	ldi	r27, 0x00	; 0
    2028:	ec eb       	ldi	r30, 0xBC	; 188
    202a:	f0 e0       	ldi	r31, 0x00	; 0
    202c:	80 91 53 08 	lds	r24, 0x0853	; 0x800853 <twi_slarw>
    2030:	8c 93       	st	X, r24
    2032:	80 81       	ld	r24, Z
    2034:	83 fd       	sbrc	r24, 3
    2036:	fa cf       	rjmp	.-12     	; 0x202c <twi_writeTo+0x6c>
    2038:	85 ec       	ldi	r24, 0xC5	; 197
    203a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    203e:	03 c0       	rjmp	.+6      	; 0x2046 <twi_writeTo+0x86>
    2040:	85 ee       	ldi	r24, 0xE5	; 229
    2042:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2046:	22 23       	and	r18, r18
    2048:	41 f0       	breq	.+16     	; 0x205a <twi_writeTo+0x9a>
    204a:	80 91 54 08 	lds	r24, 0x0854	; 0x800854 <twi_state>
    204e:	82 30       	cpi	r24, 0x02	; 2
    2050:	21 f4       	brne	.+8      	; 0x205a <twi_writeTo+0x9a>
    2052:	80 91 54 08 	lds	r24, 0x0854	; 0x800854 <twi_state>
    2056:	82 30       	cpi	r24, 0x02	; 2
    2058:	e1 f3       	breq	.-8      	; 0x2052 <twi_writeTo+0x92>
    205a:	80 91 e7 07 	lds	r24, 0x07E7	; 0x8007e7 <twi_error>
    205e:	8f 3f       	cpi	r24, 0xFF	; 255
    2060:	79 f0       	breq	.+30     	; 0x2080 <twi_writeTo+0xc0>
    2062:	80 91 e7 07 	lds	r24, 0x07E7	; 0x8007e7 <twi_error>
    2066:	80 32       	cpi	r24, 0x20	; 32
    2068:	41 f0       	breq	.+16     	; 0x207a <twi_writeTo+0xba>
    206a:	80 91 e7 07 	lds	r24, 0x07E7	; 0x8007e7 <twi_error>
    206e:	80 33       	cpi	r24, 0x30	; 48
    2070:	31 f0       	breq	.+12     	; 0x207e <twi_writeTo+0xbe>
    2072:	34 e0       	ldi	r19, 0x04	; 4
    2074:	05 c0       	rjmp	.+10     	; 0x2080 <twi_writeTo+0xc0>
    2076:	31 e0       	ldi	r19, 0x01	; 1
    2078:	03 c0       	rjmp	.+6      	; 0x2080 <twi_writeTo+0xc0>
    207a:	32 e0       	ldi	r19, 0x02	; 2
    207c:	01 c0       	rjmp	.+2      	; 0x2080 <twi_writeTo+0xc0>
    207e:	33 e0       	ldi	r19, 0x03	; 3
    2080:	83 2f       	mov	r24, r19
    2082:	0f 91       	pop	r16
    2084:	08 95       	ret

00002086 <twi_transmit>:
    2086:	40 91 09 08 	lds	r20, 0x0809	; 0x800809 <twi_txBufferLength>
    208a:	26 2f       	mov	r18, r22
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	24 0f       	add	r18, r20
    2090:	31 1d       	adc	r19, r1
    2092:	21 32       	cpi	r18, 0x21	; 33
    2094:	31 05       	cpc	r19, r1
    2096:	ec f4       	brge	.+58     	; 0x20d2 <twi_transmit+0x4c>
    2098:	20 91 54 08 	lds	r18, 0x0854	; 0x800854 <twi_state>
    209c:	24 30       	cpi	r18, 0x04	; 4
    209e:	d9 f4       	brne	.+54     	; 0x20d6 <twi_transmit+0x50>
    20a0:	66 23       	and	r22, r22
    20a2:	81 f0       	breq	.+32     	; 0x20c4 <twi_transmit+0x3e>
    20a4:	a8 2f       	mov	r26, r24
    20a6:	b9 2f       	mov	r27, r25
    20a8:	80 e0       	ldi	r24, 0x00	; 0
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	30 91 09 08 	lds	r19, 0x0809	; 0x800809 <twi_txBufferLength>
    20b0:	2d 91       	ld	r18, X+
    20b2:	fc 01       	movw	r30, r24
    20b4:	e5 5f       	subi	r30, 0xF5	; 245
    20b6:	f7 4f       	sbci	r31, 0xF7	; 247
    20b8:	e3 0f       	add	r30, r19
    20ba:	f1 1d       	adc	r31, r1
    20bc:	20 83       	st	Z, r18
    20be:	01 96       	adiw	r24, 0x01	; 1
    20c0:	86 17       	cp	r24, r22
    20c2:	a0 f3       	brcs	.-24     	; 0x20ac <twi_transmit+0x26>
    20c4:	80 91 09 08 	lds	r24, 0x0809	; 0x800809 <twi_txBufferLength>
    20c8:	68 0f       	add	r22, r24
    20ca:	60 93 09 08 	sts	0x0809, r22	; 0x800809 <twi_txBufferLength>
    20ce:	80 e0       	ldi	r24, 0x00	; 0
    20d0:	08 95       	ret
    20d2:	81 e0       	ldi	r24, 0x01	; 1
    20d4:	08 95       	ret
    20d6:	82 e0       	ldi	r24, 0x02	; 2
    20d8:	08 95       	ret

000020da <twi_attachSlaveRxEvent>:
    20da:	90 93 4e 08 	sts	0x084E, r25	; 0x80084e <twi_onSlaveReceive+0x1>
    20de:	80 93 4d 08 	sts	0x084D, r24	; 0x80084d <twi_onSlaveReceive>
    20e2:	08 95       	ret

000020e4 <twi_attachSlaveTxEvent>:
    20e4:	90 93 50 08 	sts	0x0850, r25	; 0x800850 <twi_onSlaveTransmit+0x1>
    20e8:	80 93 4f 08 	sts	0x084F, r24	; 0x80084f <twi_onSlaveTransmit>
    20ec:	08 95       	ret

000020ee <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    20ee:	85 ed       	ldi	r24, 0xD5	; 213
    20f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    20f4:	ec eb       	ldi	r30, 0xBC	; 188
    20f6:	f0 e0       	ldi	r31, 0x00	; 0
    20f8:	80 81       	ld	r24, Z
    20fa:	84 fd       	sbrc	r24, 4
    20fc:	fd cf       	rjmp	.-6      	; 0x20f8 <twi_stop+0xa>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    20fe:	10 92 54 08 	sts	0x0854, r1	; 0x800854 <twi_state>
    2102:	08 95       	ret

00002104 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    2104:	85 ec       	ldi	r24, 0xC5	; 197
    2106:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // update twi state
  twi_state = TWI_READY;
    210a:	10 92 54 08 	sts	0x0854, r1	; 0x800854 <twi_state>
    210e:	08 95       	ret

00002110 <__vector_39>:
}

ISR(TWI_vect)
{
    2110:	1f 92       	push	r1
    2112:	0f 92       	push	r0
    2114:	0f b6       	in	r0, 0x3f	; 63
    2116:	0f 92       	push	r0
    2118:	11 24       	eor	r1, r1
    211a:	0b b6       	in	r0, 0x3b	; 59
    211c:	0f 92       	push	r0
    211e:	2f 93       	push	r18
    2120:	3f 93       	push	r19
    2122:	4f 93       	push	r20
    2124:	5f 93       	push	r21
    2126:	6f 93       	push	r22
    2128:	7f 93       	push	r23
    212a:	8f 93       	push	r24
    212c:	9f 93       	push	r25
    212e:	af 93       	push	r26
    2130:	bf 93       	push	r27
    2132:	ef 93       	push	r30
    2134:	ff 93       	push	r31
  switch(TW_STATUS){
    2136:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    213a:	88 7f       	andi	r24, 0xF8	; 248
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	89 3c       	cpi	r24, 0xC9	; 201
    2140:	91 05       	cpc	r25, r1
    2142:	08 f0       	brcs	.+2      	; 0x2146 <__vector_39+0x36>
    2144:	ef c0       	rjmp	.+478    	; 0x2324 <__stack+0x125>
    2146:	fc 01       	movw	r30, r24
    2148:	88 27       	eor	r24, r24
    214a:	ee 58       	subi	r30, 0x8E	; 142
    214c:	ff 4f       	sbci	r31, 0xFF	; 255
    214e:	8f 4f       	sbci	r24, 0xFF	; 255
    2150:	0c 94 7b 29 	jmp	0x52f6	; 0x52f6 <__tablejump2__>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    2154:	80 91 53 08 	lds	r24, 0x0853	; 0x800853 <twi_slarw>
    2158:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    215c:	85 ec       	ldi	r24, 0xC5	; 197
    215e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2162:	e0 c0       	rjmp	.+448    	; 0x2324 <__stack+0x125>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2164:	90 91 2c 08 	lds	r25, 0x082C	; 0x80082c <twi_masterBufferIndex>
    2168:	80 91 2b 08 	lds	r24, 0x082B	; 0x80082b <twi_masterBufferLength>
    216c:	98 17       	cp	r25, r24
    216e:	80 f4       	brcc	.+32     	; 0x2190 <__vector_39+0x80>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2170:	e0 91 2c 08 	lds	r30, 0x082C	; 0x80082c <twi_masterBufferIndex>
    2174:	81 e0       	ldi	r24, 0x01	; 1
    2176:	8e 0f       	add	r24, r30
    2178:	80 93 2c 08 	sts	0x082C, r24	; 0x80082c <twi_masterBufferIndex>
    217c:	f0 e0       	ldi	r31, 0x00	; 0
    217e:	e3 5d       	subi	r30, 0xD3	; 211
    2180:	f7 4f       	sbci	r31, 0xF7	; 247
    2182:	80 81       	ld	r24, Z
    2184:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2188:	85 ec       	ldi	r24, 0xC5	; 197
    218a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    218e:	ca c0       	rjmp	.+404    	; 0x2324 <__stack+0x125>
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
        twi_reply(1);
      }else{
	if (twi_sendStop)
    2190:	80 91 52 08 	lds	r24, 0x0852	; 0x800852 <twi_sendStop>
    2194:	88 23       	and	r24, r24
    2196:	11 f0       	breq	.+4      	; 0x219c <__vector_39+0x8c>
          twi_stop();
    2198:	aa df       	rcall	.-172    	; 0x20ee <twi_stop>
    219a:	c4 c0       	rjmp	.+392    	; 0x2324 <__stack+0x125>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    219c:	81 e0       	ldi	r24, 0x01	; 1
    219e:	80 93 51 08 	sts	0x0851, r24	; 0x800851 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    21a2:	84 ea       	ldi	r24, 0xA4	; 164
    21a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	  twi_state = TWI_READY;
    21a8:	10 92 54 08 	sts	0x0854, r1	; 0x800854 <twi_state>
    21ac:	bb c0       	rjmp	.+374    	; 0x2324 <__stack+0x125>
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    21ae:	80 e2       	ldi	r24, 0x20	; 32
    21b0:	80 93 e7 07 	sts	0x07E7, r24	; 0x8007e7 <twi_error>
      twi_stop();
    21b4:	9c df       	rcall	.-200    	; 0x20ee <twi_stop>
      break;
    21b6:	b6 c0       	rjmp	.+364    	; 0x2324 <__stack+0x125>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    21b8:	80 e3       	ldi	r24, 0x30	; 48
    21ba:	80 93 e7 07 	sts	0x07E7, r24	; 0x8007e7 <twi_error>
      twi_stop();
    21be:	97 df       	rcall	.-210    	; 0x20ee <twi_stop>
      break;
    21c0:	b1 c0       	rjmp	.+354    	; 0x2324 <__stack+0x125>
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    21c2:	88 e3       	ldi	r24, 0x38	; 56
    21c4:	80 93 e7 07 	sts	0x07E7, r24	; 0x8007e7 <twi_error>
      twi_releaseBus();
    21c8:	9d df       	rcall	.-198    	; 0x2104 <twi_releaseBus>
      break;
    21ca:	ac c0       	rjmp	.+344    	; 0x2324 <__stack+0x125>

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    21cc:	e0 91 2c 08 	lds	r30, 0x082C	; 0x80082c <twi_masterBufferIndex>
    21d0:	81 e0       	ldi	r24, 0x01	; 1
    21d2:	8e 0f       	add	r24, r30
    21d4:	80 93 2c 08 	sts	0x082C, r24	; 0x80082c <twi_masterBufferIndex>
    21d8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    21dc:	f0 e0       	ldi	r31, 0x00	; 0
    21de:	e3 5d       	subi	r30, 0xD3	; 211
    21e0:	f7 4f       	sbci	r31, 0xF7	; 247
    21e2:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    21e4:	90 91 2c 08 	lds	r25, 0x082C	; 0x80082c <twi_masterBufferIndex>
    21e8:	80 91 2b 08 	lds	r24, 0x082B	; 0x80082b <twi_masterBufferLength>
    21ec:	98 17       	cp	r25, r24
    21ee:	20 f4       	brcc	.+8      	; 0x21f8 <__vector_39+0xe8>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    21f0:	85 ec       	ldi	r24, 0xC5	; 197
    21f2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    21f6:	96 c0       	rjmp	.+300    	; 0x2324 <__stack+0x125>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    21f8:	85 e8       	ldi	r24, 0x85	; 133
    21fa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    21fe:	92 c0       	rjmp	.+292    	; 0x2324 <__stack+0x125>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2200:	e0 91 2c 08 	lds	r30, 0x082C	; 0x80082c <twi_masterBufferIndex>
    2204:	81 e0       	ldi	r24, 0x01	; 1
    2206:	8e 0f       	add	r24, r30
    2208:	80 93 2c 08 	sts	0x082C, r24	; 0x80082c <twi_masterBufferIndex>
    220c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2210:	f0 e0       	ldi	r31, 0x00	; 0
    2212:	e3 5d       	subi	r30, 0xD3	; 211
    2214:	f7 4f       	sbci	r31, 0xF7	; 247
    2216:	80 83       	st	Z, r24
	if (twi_sendStop)
    2218:	80 91 52 08 	lds	r24, 0x0852	; 0x800852 <twi_sendStop>
    221c:	88 23       	and	r24, r24
          twi_stop();
    221e:	11 f0       	breq	.+4      	; 0x2224 <__stack+0x25>
    2220:	66 df       	rcall	.-308    	; 0x20ee <twi_stop>
    2222:	80 c0       	rjmp	.+256    	; 0x2324 <__stack+0x125>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    2224:	81 e0       	ldi	r24, 0x01	; 1
    2226:	80 93 51 08 	sts	0x0851, r24	; 0x800851 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    222a:	84 ea       	ldi	r24, 0xA4	; 164
    222c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	  twi_state = TWI_READY;
    2230:	10 92 54 08 	sts	0x0854, r1	; 0x800854 <twi_state>
	}    
	break;
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
    2234:	77 c0       	rjmp	.+238    	; 0x2324 <__stack+0x125>
    2236:	5b df       	rcall	.-330    	; 0x20ee <twi_stop>
      break;
    2238:	75 c0       	rjmp	.+234    	; 0x2324 <__stack+0x125>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    223a:	83 e0       	ldi	r24, 0x03	; 3
    223c:	80 93 54 08 	sts	0x0854, r24	; 0x800854 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    2240:	10 92 e8 07 	sts	0x07E8, r1	; 0x8007e8 <twi_rxBufferIndex>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2244:	85 ec       	ldi	r24, 0xC5	; 197
    2246:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    224a:	6c c0       	rjmp	.+216    	; 0x2324 <__stack+0x125>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    224c:	80 91 e8 07 	lds	r24, 0x07E8	; 0x8007e8 <twi_rxBufferIndex>
    2250:	80 32       	cpi	r24, 0x20	; 32
    2252:	80 f4       	brcc	.+32     	; 0x2274 <__stack+0x75>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    2254:	e0 91 e8 07 	lds	r30, 0x07E8	; 0x8007e8 <twi_rxBufferIndex>
    2258:	81 e0       	ldi	r24, 0x01	; 1
    225a:	8e 0f       	add	r24, r30
    225c:	80 93 e8 07 	sts	0x07E8, r24	; 0x8007e8 <twi_rxBufferIndex>
    2260:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2264:	f0 e0       	ldi	r31, 0x00	; 0
    2266:	e7 51       	subi	r30, 0x17	; 23
    2268:	f8 4f       	sbci	r31, 0xF8	; 248
    226a:	80 83       	st	Z, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    226c:	85 ec       	ldi	r24, 0xC5	; 197
    226e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2272:	58 c0       	rjmp	.+176    	; 0x2324 <__stack+0x125>
    2274:	85 e8       	ldi	r24, 0x85	; 133
    2276:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    227a:	54 c0       	rjmp	.+168    	; 0x2324 <__stack+0x125>
    227c:	43 df       	rcall	.-378    	; 0x2104 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    227e:	80 91 e8 07 	lds	r24, 0x07E8	; 0x8007e8 <twi_rxBufferIndex>
    2282:	80 32       	cpi	r24, 0x20	; 32
    2284:	30 f4       	brcc	.+12     	; 0x2292 <__stack+0x93>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    2286:	e0 91 e8 07 	lds	r30, 0x07E8	; 0x8007e8 <twi_rxBufferIndex>
    228a:	f0 e0       	ldi	r31, 0x00	; 0
    228c:	e7 51       	subi	r30, 0x17	; 23
    228e:	f8 4f       	sbci	r31, 0xF8	; 248
    2290:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    2292:	60 91 e8 07 	lds	r22, 0x07E8	; 0x8007e8 <twi_rxBufferIndex>
    2296:	70 e0       	ldi	r23, 0x00	; 0
    2298:	e0 91 4d 08 	lds	r30, 0x084D	; 0x80084d <twi_onSlaveReceive>
    229c:	f0 91 4e 08 	lds	r31, 0x084E	; 0x80084e <twi_onSlaveReceive+0x1>
    22a0:	89 ee       	ldi	r24, 0xE9	; 233
    22a2:	97 e0       	ldi	r25, 0x07	; 7
    22a4:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    22a6:	10 92 e8 07 	sts	0x07E8, r1	; 0x8007e8 <twi_rxBufferIndex>
      break;
    22aa:	3c c0       	rjmp	.+120    	; 0x2324 <__stack+0x125>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    22ac:	85 e8       	ldi	r24, 0x85	; 133
    22ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    22b2:	38 c0       	rjmp	.+112    	; 0x2324 <__stack+0x125>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    22b4:	84 e0       	ldi	r24, 0x04	; 4
    22b6:	80 93 54 08 	sts	0x0854, r24	; 0x800854 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    22ba:	10 92 0a 08 	sts	0x080A, r1	; 0x80080a <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    22be:	10 92 09 08 	sts	0x0809, r1	; 0x800809 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    22c2:	e0 91 4f 08 	lds	r30, 0x084F	; 0x80084f <twi_onSlaveTransmit>
    22c6:	f0 91 50 08 	lds	r31, 0x0850	; 0x800850 <twi_onSlaveTransmit+0x1>
    22ca:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    22cc:	80 91 09 08 	lds	r24, 0x0809	; 0x800809 <twi_txBufferLength>
    22d0:	81 11       	cpse	r24, r1
    22d2:	05 c0       	rjmp	.+10     	; 0x22de <__stack+0xdf>
        twi_txBufferLength = 1;
    22d4:	81 e0       	ldi	r24, 0x01	; 1
    22d6:	80 93 09 08 	sts	0x0809, r24	; 0x800809 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    22da:	10 92 0b 08 	sts	0x080B, r1	; 0x80080b <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    22de:	e0 91 0a 08 	lds	r30, 0x080A	; 0x80080a <twi_txBufferIndex>
    22e2:	81 e0       	ldi	r24, 0x01	; 1
    22e4:	8e 0f       	add	r24, r30
    22e6:	80 93 0a 08 	sts	0x080A, r24	; 0x80080a <twi_txBufferIndex>
    22ea:	f0 e0       	ldi	r31, 0x00	; 0
    22ec:	e5 5f       	subi	r30, 0xF5	; 245
    22ee:	f7 4f       	sbci	r31, 0xF7	; 247
    22f0:	80 81       	ld	r24, Z
    22f2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    22f6:	90 91 0a 08 	lds	r25, 0x080A	; 0x80080a <twi_txBufferIndex>
    22fa:	80 91 09 08 	lds	r24, 0x0809	; 0x800809 <twi_txBufferLength>
    22fe:	98 17       	cp	r25, r24
    2300:	20 f4       	brcc	.+8      	; 0x230a <__stack+0x10b>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2302:	85 ec       	ldi	r24, 0xC5	; 197
    2304:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2308:	0d c0       	rjmp	.+26     	; 0x2324 <__stack+0x125>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    230a:	85 e8       	ldi	r24, 0x85	; 133
    230c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2310:	09 c0       	rjmp	.+18     	; 0x2324 <__stack+0x125>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2312:	85 ec       	ldi	r24, 0xC5	; 197
    2314:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    2318:	10 92 54 08 	sts	0x0854, r1	; 0x800854 <twi_state>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    231c:	03 c0       	rjmp	.+6      	; 0x2324 <__stack+0x125>
    231e:	10 92 e7 07 	sts	0x07E7, r1	; 0x8007e7 <twi_error>
      twi_stop();
    2322:	e5 de       	rcall	.-566    	; 0x20ee <twi_stop>
      break;
  }
    2324:	ff 91       	pop	r31
    2326:	ef 91       	pop	r30
    2328:	bf 91       	pop	r27
    232a:	af 91       	pop	r26
    232c:	9f 91       	pop	r25
    232e:	8f 91       	pop	r24
    2330:	7f 91       	pop	r23
    2332:	6f 91       	pop	r22
    2334:	5f 91       	pop	r21
    2336:	4f 91       	pop	r20
    2338:	3f 91       	pop	r19
    233a:	2f 91       	pop	r18
    233c:	0f 90       	pop	r0
    233e:	0b be       	out	0x3b, r0	; 59
    2340:	0f 90       	pop	r0
    2342:	0f be       	out	0x3f, r0	; 63
    2344:	0f 90       	pop	r0
    2346:	1f 90       	pop	r1
    2348:	18 95       	reti

0000234a <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
	user_onRequest = function;
    234a:	80 91 7f 08 	lds	r24, 0x087F	; 0x80087f <_ZN7TwoWire14rxBufferLengthE>
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	20 91 80 08 	lds	r18, 0x0880	; 0x800880 <_ZN7TwoWire13rxBufferIndexE>
    2354:	82 1b       	sub	r24, r18
    2356:	91 09       	sbc	r25, r1
    2358:	08 95       	ret

0000235a <_ZN7TwoWire4readEv>:
    235a:	90 91 80 08 	lds	r25, 0x0880	; 0x800880 <_ZN7TwoWire13rxBufferIndexE>
    235e:	80 91 7f 08 	lds	r24, 0x087F	; 0x80087f <_ZN7TwoWire14rxBufferLengthE>
    2362:	98 17       	cp	r25, r24
    2364:	50 f4       	brcc	.+20     	; 0x237a <_ZN7TwoWire4readEv+0x20>
    2366:	e9 2f       	mov	r30, r25
    2368:	f0 e0       	ldi	r31, 0x00	; 0
    236a:	ef 57       	subi	r30, 0x7F	; 127
    236c:	f7 4f       	sbci	r31, 0xF7	; 247
    236e:	20 81       	ld	r18, Z
    2370:	30 e0       	ldi	r19, 0x00	; 0
    2372:	9f 5f       	subi	r25, 0xFF	; 255
    2374:	90 93 80 08 	sts	0x0880, r25	; 0x800880 <_ZN7TwoWire13rxBufferIndexE>
    2378:	02 c0       	rjmp	.+4      	; 0x237e <_ZN7TwoWire4readEv+0x24>
    237a:	2f ef       	ldi	r18, 0xFF	; 255
    237c:	3f ef       	ldi	r19, 0xFF	; 255
    237e:	c9 01       	movw	r24, r18
    2380:	08 95       	ret

00002382 <_ZN7TwoWire4peekEv>:
    2382:	e0 91 80 08 	lds	r30, 0x0880	; 0x800880 <_ZN7TwoWire13rxBufferIndexE>
    2386:	80 91 7f 08 	lds	r24, 0x087F	; 0x80087f <_ZN7TwoWire14rxBufferLengthE>
    238a:	e8 17       	cp	r30, r24
    238c:	30 f4       	brcc	.+12     	; 0x239a <_ZN7TwoWire4peekEv+0x18>
    238e:	f0 e0       	ldi	r31, 0x00	; 0
    2390:	ef 57       	subi	r30, 0x7F	; 127
    2392:	f7 4f       	sbci	r31, 0xF7	; 247
    2394:	80 81       	ld	r24, Z
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	08 95       	ret
    239a:	8f ef       	ldi	r24, 0xFF	; 255
    239c:	9f ef       	ldi	r25, 0xFF	; 255
    239e:	08 95       	ret

000023a0 <_ZN7TwoWire5flushEv>:
    23a0:	08 95       	ret

000023a2 <_ZN7TwoWire16onReceiveServiceEPhi>:
    23a2:	cf 93       	push	r28
    23a4:	df 93       	push	r29
    23a6:	ec 01       	movw	r28, r24
    23a8:	e0 91 57 08 	lds	r30, 0x0857	; 0x800857 <_ZN7TwoWire14user_onReceiveE>
    23ac:	f0 91 58 08 	lds	r31, 0x0858	; 0x800858 <_ZN7TwoWire14user_onReceiveE+0x1>
    23b0:	30 97       	sbiw	r30, 0x00	; 0
    23b2:	01 f1       	breq	.+64     	; 0x23f4 <_ZN7TwoWire16onReceiveServiceEPhi+0x52>
    23b4:	90 91 80 08 	lds	r25, 0x0880	; 0x800880 <_ZN7TwoWire13rxBufferIndexE>
    23b8:	80 91 7f 08 	lds	r24, 0x087F	; 0x80087f <_ZN7TwoWire14rxBufferLengthE>
    23bc:	98 17       	cp	r25, r24
    23be:	d0 f0       	brcs	.+52     	; 0x23f4 <_ZN7TwoWire16onReceiveServiceEPhi+0x52>
    23c0:	16 16       	cp	r1, r22
    23c2:	17 06       	cpc	r1, r23
    23c4:	8c f4       	brge	.+34     	; 0x23e8 <_ZN7TwoWire16onReceiveServiceEPhi+0x46>
    23c6:	20 e0       	ldi	r18, 0x00	; 0
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	90 e0       	ldi	r25, 0x00	; 0
    23cc:	de 01       	movw	r26, r28
    23ce:	a9 0f       	add	r26, r25
    23d0:	b1 1d       	adc	r27, r1
    23d2:	4c 91       	ld	r20, X
    23d4:	d9 01       	movw	r26, r18
    23d6:	af 57       	subi	r26, 0x7F	; 127
    23d8:	b7 4f       	sbci	r27, 0xF7	; 247
    23da:	4c 93       	st	X, r20
    23dc:	9f 5f       	subi	r25, 0xFF	; 255
    23de:	29 2f       	mov	r18, r25
    23e0:	30 e0       	ldi	r19, 0x00	; 0
    23e2:	26 17       	cp	r18, r22
    23e4:	37 07       	cpc	r19, r23
    23e6:	94 f3       	brlt	.-28     	; 0x23cc <_ZN7TwoWire16onReceiveServiceEPhi+0x2a>
    23e8:	cb 01       	movw	r24, r22
    23ea:	10 92 80 08 	sts	0x0880, r1	; 0x800880 <_ZN7TwoWire13rxBufferIndexE>
    23ee:	60 93 7f 08 	sts	0x087F, r22	; 0x80087f <_ZN7TwoWire14rxBufferLengthE>
    23f2:	19 95       	eicall
    23f4:	df 91       	pop	r29
    23f6:	cf 91       	pop	r28
    23f8:	08 95       	ret

000023fa <_ZN7TwoWire16onRequestServiceEv>:
    23fa:	e0 91 59 08 	lds	r30, 0x0859	; 0x800859 <_ZN7TwoWire14user_onRequestE>
    23fe:	f0 91 5a 08 	lds	r31, 0x085A	; 0x80085a <_ZN7TwoWire14user_onRequestE+0x1>
    2402:	30 97       	sbiw	r30, 0x00	; 0
    2404:	29 f0       	breq	.+10     	; 0x2410 <_ZN7TwoWire16onRequestServiceEv+0x16>
    2406:	10 92 5d 08 	sts	0x085D, r1	; 0x80085d <_ZN7TwoWire13txBufferIndexE>
    240a:	10 92 5c 08 	sts	0x085C, r1	; 0x80085c <_ZN7TwoWire14txBufferLengthE>
    240e:	19 95       	eicall
    2410:	08 95       	ret

00002412 <_ZN7TwoWire5writeEh>:
    2412:	cf 93       	push	r28
    2414:	df 93       	push	r29
    2416:	1f 92       	push	r1
    2418:	cd b7       	in	r28, 0x3d	; 61
    241a:	de b7       	in	r29, 0x3e	; 62
    241c:	69 83       	std	Y+1, r22	; 0x01
    241e:	80 91 5b 08 	lds	r24, 0x085B	; 0x80085b <_ZN7TwoWire12transmittingE>
    2422:	88 23       	and	r24, r24
    2424:	99 f0       	breq	.+38     	; 0x244c <_ZN7TwoWire5writeEh+0x3a>
    2426:	80 91 5c 08 	lds	r24, 0x085C	; 0x80085c <_ZN7TwoWire14txBufferLengthE>
    242a:	80 32       	cpi	r24, 0x20	; 32
    242c:	b0 f4       	brcc	.+44     	; 0x245a <_ZN7TwoWire5writeEh+0x48>
    242e:	80 91 5d 08 	lds	r24, 0x085D	; 0x80085d <_ZN7TwoWire13txBufferIndexE>
    2432:	e8 2f       	mov	r30, r24
    2434:	f0 e0       	ldi	r31, 0x00	; 0
    2436:	e2 5a       	subi	r30, 0xA2	; 162
    2438:	f7 4f       	sbci	r31, 0xF7	; 247
    243a:	60 83       	st	Z, r22
    243c:	8f 5f       	subi	r24, 0xFF	; 255
    243e:	80 93 5d 08 	sts	0x085D, r24	; 0x80085d <_ZN7TwoWire13txBufferIndexE>
    2442:	80 93 5c 08 	sts	0x085C, r24	; 0x80085c <_ZN7TwoWire14txBufferLengthE>
    2446:	81 e0       	ldi	r24, 0x01	; 1
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	09 c0       	rjmp	.+18     	; 0x245e <_ZN7TwoWire5writeEh+0x4c>
    244c:	61 e0       	ldi	r22, 0x01	; 1
    244e:	ce 01       	movw	r24, r28
    2450:	01 96       	adiw	r24, 0x01	; 1
    2452:	19 de       	rcall	.-974    	; 0x2086 <twi_transmit>
    2454:	81 e0       	ldi	r24, 0x01	; 1
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	02 c0       	rjmp	.+4      	; 0x245e <_ZN7TwoWire5writeEh+0x4c>
    245a:	80 e0       	ldi	r24, 0x00	; 0
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	0f 90       	pop	r0
    2460:	df 91       	pop	r29
    2462:	cf 91       	pop	r28
    2464:	08 95       	ret

00002466 <_ZN7TwoWire5writeEPKhj>:
    2466:	cf 92       	push	r12
    2468:	df 92       	push	r13
    246a:	ef 92       	push	r14
    246c:	ff 92       	push	r15
    246e:	0f 93       	push	r16
    2470:	1f 93       	push	r17
    2472:	cf 93       	push	r28
    2474:	df 93       	push	r29
    2476:	8c 01       	movw	r16, r24
    2478:	cb 01       	movw	r24, r22
    247a:	6a 01       	movw	r12, r20
    247c:	20 91 5b 08 	lds	r18, 0x085B	; 0x80085b <_ZN7TwoWire12transmittingE>
    2480:	22 23       	and	r18, r18
    2482:	a1 f0       	breq	.+40     	; 0x24ac <_ZN7TwoWire5writeEPKhj+0x46>
    2484:	41 15       	cp	r20, r1
    2486:	51 05       	cpc	r21, r1
    2488:	99 f0       	breq	.+38     	; 0x24b0 <_ZN7TwoWire5writeEPKhj+0x4a>
    248a:	eb 01       	movw	r28, r22
    248c:	7b 01       	movw	r14, r22
    248e:	e4 0e       	add	r14, r20
    2490:	f5 1e       	adc	r15, r21
    2492:	69 91       	ld	r22, Y+
    2494:	d8 01       	movw	r26, r16
    2496:	ed 91       	ld	r30, X+
    2498:	fc 91       	ld	r31, X
    249a:	01 90       	ld	r0, Z+
    249c:	f0 81       	ld	r31, Z
    249e:	e0 2d       	mov	r30, r0
    24a0:	c8 01       	movw	r24, r16
    24a2:	19 95       	eicall
    24a4:	ce 15       	cp	r28, r14
    24a6:	df 05       	cpc	r29, r15
    24a8:	a1 f7       	brne	.-24     	; 0x2492 <_ZN7TwoWire5writeEPKhj+0x2c>
    24aa:	02 c0       	rjmp	.+4      	; 0x24b0 <_ZN7TwoWire5writeEPKhj+0x4a>
    24ac:	64 2f       	mov	r22, r20
    24ae:	eb dd       	rcall	.-1066   	; 0x2086 <twi_transmit>
    24b0:	c6 01       	movw	r24, r12
    24b2:	df 91       	pop	r29
    24b4:	cf 91       	pop	r28
    24b6:	1f 91       	pop	r17
    24b8:	0f 91       	pop	r16
    24ba:	ff 90       	pop	r15
    24bc:	ef 90       	pop	r14
    24be:	df 90       	pop	r13
    24c0:	cf 90       	pop	r12
    24c2:	08 95       	ret

000024c4 <_ZN7TwoWire5beginEv>:
    24c4:	78 94       	sei
    24c6:	10 92 80 08 	sts	0x0880, r1	; 0x800880 <_ZN7TwoWire13rxBufferIndexE>
    24ca:	10 92 7f 08 	sts	0x087F, r1	; 0x80087f <_ZN7TwoWire14rxBufferLengthE>
    24ce:	10 92 5d 08 	sts	0x085D, r1	; 0x80085d <_ZN7TwoWire13txBufferIndexE>
    24d2:	10 92 5c 08 	sts	0x085C, r1	; 0x80085c <_ZN7TwoWire14txBufferLengthE>
    24d6:	f5 dc       	rcall	.-1558   	; 0x1ec2 <twi_init>
    24d8:	8d ef       	ldi	r24, 0xFD	; 253
    24da:	91 e1       	ldi	r25, 0x11	; 17
    24dc:	03 de       	rcall	.-1018   	; 0x20e4 <twi_attachSlaveTxEvent>
    24de:	81 ed       	ldi	r24, 0xD1	; 209
    24e0:	91 e1       	ldi	r25, 0x11	; 17
    24e2:	fb cd       	rjmp	.-1034   	; 0x20da <twi_attachSlaveRxEvent>
    24e4:	08 95       	ret

000024e6 <_ZN7TwoWire8setClockEm>:
    24e6:	cb 01       	movw	r24, r22
    24e8:	ba 01       	movw	r22, r20
    24ea:	04 cd       	rjmp	.-1528   	; 0x1ef4 <twi_setFrequency>
    24ec:	08 95       	ret

000024ee <_ZN7TwoWire17beginTransmissionEh>:
    24ee:	81 e0       	ldi	r24, 0x01	; 1
    24f0:	80 93 5b 08 	sts	0x085B, r24	; 0x80085b <_ZN7TwoWire12transmittingE>
    24f4:	60 93 7e 08 	sts	0x087E, r22	; 0x80087e <_ZN7TwoWire9txAddressE>
    24f8:	10 92 5d 08 	sts	0x085D, r1	; 0x80085d <_ZN7TwoWire13txBufferIndexE>
    24fc:	10 92 5c 08 	sts	0x085C, r1	; 0x80085c <_ZN7TwoWire14txBufferLengthE>
    2500:	08 95       	ret

00002502 <_ZN7TwoWire17beginTransmissionEi>:
    2502:	f5 cf       	rjmp	.-22     	; 0x24ee <_ZN7TwoWire17beginTransmissionEh>
    2504:	08 95       	ret

00002506 <_ZN7TwoWire15endTransmissionEh>:
    2506:	0f 93       	push	r16
    2508:	06 2f       	mov	r16, r22
    250a:	21 e0       	ldi	r18, 0x01	; 1
    250c:	40 91 5c 08 	lds	r20, 0x085C	; 0x80085c <_ZN7TwoWire14txBufferLengthE>
    2510:	6e e5       	ldi	r22, 0x5E	; 94
    2512:	78 e0       	ldi	r23, 0x08	; 8
    2514:	80 91 7e 08 	lds	r24, 0x087E	; 0x80087e <_ZN7TwoWire9txAddressE>
    2518:	53 dd       	rcall	.-1370   	; 0x1fc0 <twi_writeTo>
    251a:	10 92 5d 08 	sts	0x085D, r1	; 0x80085d <_ZN7TwoWire13txBufferIndexE>
    251e:	10 92 5c 08 	sts	0x085C, r1	; 0x80085c <_ZN7TwoWire14txBufferLengthE>
    2522:	10 92 5b 08 	sts	0x085B, r1	; 0x80085b <_ZN7TwoWire12transmittingE>
    2526:	0f 91       	pop	r16
    2528:	08 95       	ret

0000252a <_ZN7TwoWire11requestFromEhhmhh>:
    252a:	4f 92       	push	r4
    252c:	5f 92       	push	r5
    252e:	6f 92       	push	r6
    2530:	7f 92       	push	r7
    2532:	af 92       	push	r10
    2534:	bf 92       	push	r11
    2536:	cf 92       	push	r12
    2538:	ef 92       	push	r14
    253a:	ff 92       	push	r15
    253c:	0f 93       	push	r16
    253e:	1f 93       	push	r17
    2540:	cf 93       	push	r28
    2542:	df 93       	push	r29
    2544:	5c 01       	movw	r10, r24
    2546:	f6 2e       	mov	r15, r22
    2548:	d4 2f       	mov	r29, r20
    254a:	28 01       	movw	r4, r16
    254c:	39 01       	movw	r6, r18
    254e:	ee 20       	and	r14, r14
    2550:	39 f1       	breq	.+78     	; 0x25a0 <_ZN7TwoWire11requestFromEhhmhh+0x76>
    2552:	cd df       	rcall	.-102    	; 0x24ee <_ZN7TwoWire17beginTransmissionEh>
    2554:	8e 2d       	mov	r24, r14
    2556:	84 30       	cpi	r24, 0x04	; 4
    2558:	08 f0       	brcs	.+2      	; 0x255c <_ZN7TwoWire11requestFromEhhmhh+0x32>
    255a:	83 e0       	ldi	r24, 0x03	; 3
    255c:	cf ef       	ldi	r28, 0xFF	; 255
    255e:	c8 0f       	add	r28, r24
    2560:	88 23       	and	r24, r24
    2562:	d9 f0       	breq	.+54     	; 0x259a <_ZN7TwoWire11requestFromEhhmhh+0x70>
    2564:	8c 2f       	mov	r24, r28
    2566:	88 0f       	add	r24, r24
    2568:	88 0f       	add	r24, r24
    256a:	88 0f       	add	r24, r24
    256c:	a3 01       	movw	r20, r6
    256e:	92 01       	movw	r18, r4
    2570:	04 c0       	rjmp	.+8      	; 0x257a <_ZN7TwoWire11requestFromEhhmhh+0x50>
    2572:	56 95       	lsr	r21
    2574:	47 95       	ror	r20
    2576:	37 95       	ror	r19
    2578:	27 95       	ror	r18
    257a:	8a 95       	dec	r24
    257c:	d2 f7       	brpl	.-12     	; 0x2572 <_ZN7TwoWire11requestFromEhhmhh+0x48>
    257e:	ca 01       	movw	r24, r20
    2580:	b9 01       	movw	r22, r18
    2582:	d5 01       	movw	r26, r10
    2584:	ed 91       	ld	r30, X+
    2586:	fc 91       	ld	r31, X
    2588:	01 90       	ld	r0, Z+
    258a:	f0 81       	ld	r31, Z
    258c:	e0 2d       	mov	r30, r0
    258e:	c5 01       	movw	r24, r10
    2590:	19 95       	eicall
    2592:	8c 2f       	mov	r24, r28
    2594:	c1 50       	subi	r28, 0x01	; 1
    2596:	81 11       	cpse	r24, r1
    2598:	e5 cf       	rjmp	.-54     	; 0x2564 <_ZN7TwoWire11requestFromEhhmhh+0x3a>
    259a:	60 e0       	ldi	r22, 0x00	; 0
    259c:	c5 01       	movw	r24, r10
    259e:	b3 df       	rcall	.-154    	; 0x2506 <_ZN7TwoWire15endTransmissionEh>
    25a0:	4d 2f       	mov	r20, r29
    25a2:	d1 32       	cpi	r29, 0x21	; 33
    25a4:	08 f0       	brcs	.+2      	; 0x25a8 <_ZN7TwoWire11requestFromEhhmhh+0x7e>
    25a6:	40 e2       	ldi	r20, 0x20	; 32
    25a8:	2c 2d       	mov	r18, r12
    25aa:	61 e8       	ldi	r22, 0x81	; 129
    25ac:	78 e0       	ldi	r23, 0x08	; 8
    25ae:	8f 2d       	mov	r24, r15
    25b0:	b5 dc       	rcall	.-1686   	; 0x1f1c <twi_readFrom>
    25b2:	10 92 80 08 	sts	0x0880, r1	; 0x800880 <_ZN7TwoWire13rxBufferIndexE>
    25b6:	80 93 7f 08 	sts	0x087F, r24	; 0x80087f <_ZN7TwoWire14rxBufferLengthE>
    25ba:	df 91       	pop	r29
    25bc:	cf 91       	pop	r28
    25be:	1f 91       	pop	r17
    25c0:	0f 91       	pop	r16
    25c2:	ff 90       	pop	r15
    25c4:	ef 90       	pop	r14
    25c6:	cf 90       	pop	r12
    25c8:	bf 90       	pop	r11
    25ca:	af 90       	pop	r10
    25cc:	7f 90       	pop	r7
    25ce:	6f 90       	pop	r6
    25d0:	5f 90       	pop	r5
    25d2:	4f 90       	pop	r4
    25d4:	08 95       	ret

000025d6 <_ZN7TwoWire11requestFromEhhh>:
    25d6:	cf 92       	push	r12
    25d8:	ef 92       	push	r14
    25da:	0f 93       	push	r16
    25dc:	1f 93       	push	r17
    25de:	c2 2e       	mov	r12, r18
    25e0:	e1 2c       	mov	r14, r1
    25e2:	00 e0       	ldi	r16, 0x00	; 0
    25e4:	10 e0       	ldi	r17, 0x00	; 0
    25e6:	98 01       	movw	r18, r16
    25e8:	a0 df       	rcall	.-192    	; 0x252a <_ZN7TwoWire11requestFromEhhmhh>
    25ea:	1f 91       	pop	r17
    25ec:	0f 91       	pop	r16
    25ee:	ef 90       	pop	r14
    25f0:	cf 90       	pop	r12
    25f2:	08 95       	ret

000025f4 <_ZN7TwoWire11requestFromEhh>:
    25f4:	21 e0       	ldi	r18, 0x01	; 1
    25f6:	ef cf       	rjmp	.-34     	; 0x25d6 <_ZN7TwoWire11requestFromEhhh>
    25f8:	08 95       	ret

000025fa <_ZN7TwoWire11requestFromEii>:
    25fa:	21 e0       	ldi	r18, 0x01	; 1
    25fc:	ec cf       	rjmp	.-40     	; 0x25d6 <_ZN7TwoWire11requestFromEhhh>
    25fe:	08 95       	ret

00002600 <_ZN7TwoWire15endTransmissionEv>:
    2600:	61 e0       	ldi	r22, 0x01	; 1
    2602:	81 cf       	rjmp	.-254    	; 0x2506 <_ZN7TwoWire15endTransmissionEh>
    2604:	08 95       	ret

00002606 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    2606:	80 e8       	ldi	r24, 0x80	; 128
    2608:	92 e0       	ldi	r25, 0x02	; 2
    260a:	90 93 56 08 	sts	0x0856, r25	; 0x800856 <Wire+0x1>
    260e:	80 93 55 08 	sts	0x0855, r24	; 0x800855 <Wire>
    2612:	08 95       	ret

00002614 <_ZN6MS5837C1ER13HardwareTimer>:
const float MS5837::mbar = 1.0f;
*/
const uint8_t MS5837::MS5837_30BA = 0;
const uint8_t MS5837::MS5837_02BA = 1;

MS5837::MS5837(HardwareTimer &timer) : _timer(&timer) {
    2614:	fc 01       	movw	r30, r24
    2616:	73 a3       	std	Z+35, r23	; 0x23
    2618:	62 a3       	std	Z+34, r22	; 0x22
	fluidDensity = 1029;
    261a:	40 e0       	ldi	r20, 0x00	; 0
    261c:	50 ea       	ldi	r21, 0xA0	; 160
    261e:	60 e8       	ldi	r22, 0x80	; 128
    2620:	74 e4       	ldi	r23, 0x44	; 68
    2622:	44 a3       	std	Z+36, r20	; 0x24
    2624:	55 a3       	std	Z+37, r21	; 0x25
    2626:	66 a3       	std	Z+38, r22	; 0x26
    2628:	77 a3       	std	Z+39, r23	; 0x27
    262a:	08 95       	ret

0000262c <_ZN6MS58378setModelEh>:

	return false; // CRC fail
}

void MS5837::setModel(uint8_t model) {
	_model = model;
    262c:	fc 01       	movw	r30, r24
    262e:	60 a3       	std	Z+32, r22	; 0x20
    2630:	08 95       	ret

00002632 <_ZN6MS58379startReadEv>:
	D2 = (D2 << 8) | Wire.read();

	calculate();
}*/

bool MS5837::startRead(){
    2632:	cf 93       	push	r28
    2634:	df 93       	push	r29
	if(_state == STATE_FINISHED){
    2636:	fc 01       	movw	r30, r24
    2638:	21 a1       	ldd	r18, Z+33	; 0x21
    263a:	21 11       	cpse	r18, r1
    263c:	1c c0       	rjmp	.+56     	; 0x2676 <_ZN6MS58379startReadEv+0x44>
    263e:	ec 01       	movw	r28, r24
		_state = STATE_READ_D1; // Request D1 conversion
    2640:	81 e0       	ldi	r24, 0x01	; 1
    2642:	81 a3       	std	Z+33, r24	; 0x21
		
		Wire.beginTransmission(MS5837_ADDR);
    2644:	66 e7       	ldi	r22, 0x76	; 118
    2646:	70 e0       	ldi	r23, 0x00	; 0
    2648:	85 e5       	ldi	r24, 0x55	; 85
    264a:	98 e0       	ldi	r25, 0x08	; 8
    264c:	5a df       	rcall	.-332    	; 0x2502 <_ZN7TwoWire17beginTransmissionEi>
	void onRequest( void (*)(void) );

	inline size_t write(unsigned long n) { return write((uint8_t)n); }
	inline size_t write(long n) { return write((uint8_t)n); }
	inline size_t write(unsigned int n) { return write((uint8_t)n); }
	inline size_t write(int n) { return write((uint8_t)n); }
    264e:	e0 91 55 08 	lds	r30, 0x0855	; 0x800855 <Wire>
    2652:	f0 91 56 08 	lds	r31, 0x0856	; 0x800856 <Wire+0x1>
    2656:	01 90       	ld	r0, Z+
    2658:	f0 81       	ld	r31, Z
    265a:	e0 2d       	mov	r30, r0
    265c:	6a e4       	ldi	r22, 0x4A	; 74
    265e:	85 e5       	ldi	r24, 0x55	; 85
    2660:	98 e0       	ldi	r25, 0x08	; 8
    2662:	19 95       	eicall
		Wire.write(MS5837_CONVERT_D1_8192);
		Wire.endTransmission();
    2664:	85 e5       	ldi	r24, 0x55	; 85
    2666:	98 e0       	ldi	r25, 0x08	; 8
    2668:	cb df       	rcall	.-106    	; 0x2600 <_ZN7TwoWire15endTransmissionEv>

		_timer->start(2); // Max conversion time, 20ms per datasheet
    266a:	62 e0       	ldi	r22, 0x02	; 2
    266c:	8a a1       	ldd	r24, Y+34	; 0x22
    266e:	9b a1       	ldd	r25, Y+35	; 0x23
    2670:	88 db       	rcall	.-2288   	; 0x1d82 <_ZN13HardwareTimer5startEh>
		return true;
    2672:	81 e0       	ldi	r24, 0x01	; 1
    2674:	01 c0       	rjmp	.+2      	; 0x2678 <_ZN6MS58379startReadEv+0x46>
	}else{
		return false;
    2676:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    2678:	df 91       	pop	r29
    267a:	cf 91       	pop	r28
    267c:	08 95       	ret

0000267e <_ZN6MS58378finishedEv>:
		}
	}
}

bool MS5837::finished(){
	return _state == STATE_FINISHED;
    267e:	21 e0       	ldi	r18, 0x01	; 1
    2680:	fc 01       	movw	r30, r24
    2682:	81 a1       	ldd	r24, Z+33	; 0x21
    2684:	81 11       	cpse	r24, r1
    2686:	20 e0       	ldi	r18, 0x00	; 0
}
    2688:	82 2f       	mov	r24, r18
    268a:	08 95       	ret

0000268c <_ZN6MS58379calculateEv>:

void MS5837::calculate() {
    268c:	2f 92       	push	r2
    268e:	3f 92       	push	r3
    2690:	4f 92       	push	r4
    2692:	5f 92       	push	r5
    2694:	6f 92       	push	r6
    2696:	7f 92       	push	r7
    2698:	8f 92       	push	r8
    269a:	9f 92       	push	r9
    269c:	af 92       	push	r10
    269e:	bf 92       	push	r11
    26a0:	cf 92       	push	r12
    26a2:	df 92       	push	r13
    26a4:	ef 92       	push	r14
    26a6:	ff 92       	push	r15
    26a8:	0f 93       	push	r16
    26aa:	1f 93       	push	r17
    26ac:	cf 93       	push	r28
    26ae:	df 93       	push	r29
    26b0:	cd b7       	in	r28, 0x3d	; 61
    26b2:	de b7       	in	r29, 0x3e	; 62
    26b4:	a5 97       	sbiw	r28, 0x25	; 37
    26b6:	0f b6       	in	r0, 0x3f	; 63
    26b8:	f8 94       	cli
    26ba:	de bf       	out	0x3e, r29	; 62
    26bc:	0f be       	out	0x3f, r0	; 63
    26be:	cd bf       	out	0x3d, r28	; 61
    26c0:	1c 01       	movw	r2, r24
	int32_t Ti = 0;
	int64_t OFF2 = 0;
	int64_t SENS2 = 0;
	
	// Terms called
	dT = D2-uint32_t(C[5])*256l;
    26c2:	dc 01       	movw	r26, r24
    26c4:	1a 96       	adiw	r26, 0x0a	; 10
    26c6:	8d 91       	ld	r24, X+
    26c8:	9c 91       	ld	r25, X
    26ca:	1b 97       	sbiw	r26, 0x0b	; 11
    26cc:	a0 e0       	ldi	r26, 0x00	; 0
    26ce:	b0 e0       	ldi	r27, 0x00	; 0
    26d0:	ba 2f       	mov	r27, r26
    26d2:	a9 2f       	mov	r26, r25
    26d4:	98 2f       	mov	r25, r24
    26d6:	88 27       	eor	r24, r24
    26d8:	f1 01       	movw	r30, r2
    26da:	44 89       	ldd	r20, Z+20	; 0x14
    26dc:	55 89       	ldd	r21, Z+21	; 0x15
    26de:	66 89       	ldd	r22, Z+22	; 0x16
    26e0:	77 89       	ldd	r23, Z+23	; 0x17
    26e2:	3a 01       	movw	r6, r20
    26e4:	4b 01       	movw	r8, r22
    26e6:	68 1a       	sub	r6, r24
    26e8:	79 0a       	sbc	r7, r25
    26ea:	8a 0a       	sbc	r8, r26
    26ec:	9b 0a       	sbc	r9, r27
    26ee:	69 82       	std	Y+1, r6	; 0x01
    26f0:	7a 82       	std	Y+2, r7	; 0x02
    26f2:	8b 82       	std	Y+3, r8	; 0x03
    26f4:	9c 82       	std	Y+4, r9	; 0x04
	if ( _model == MS5837_02BA ) {
    26f6:	80 a1       	ldd	r24, Z+32	; 0x20
    26f8:	81 30       	cpi	r24, 0x01	; 1
    26fa:	09 f0       	breq	.+2      	; 0x26fe <_ZN6MS58379calculateEv+0x72>
    26fc:	58 c1       	rjmp	.+688    	; 0x29ae <_ZN6MS58379calculateEv+0x322>
		SENS = int64_t(C[1])*65536l+(int64_t(C[3])*dT)/128l;
    26fe:	99 0c       	add	r9, r9
    2700:	66 08       	sbc	r6, r6
    2702:	76 2c       	mov	r7, r6
    2704:	43 01       	movw	r8, r6
    2706:	6d 82       	std	Y+5, r6	; 0x05
    2708:	7e 82       	std	Y+6, r7	; 0x06
    270a:	8f 82       	std	Y+7, r8	; 0x07
    270c:	98 86       	std	Y+8, r9	; 0x08
    270e:	86 81       	ldd	r24, Z+6	; 0x06
    2710:	97 81       	ldd	r25, Z+7	; 0x07
    2712:	3c 01       	movw	r6, r24
    2714:	81 2c       	mov	r8, r1
    2716:	91 2c       	mov	r9, r1
    2718:	a1 2c       	mov	r10, r1
    271a:	b1 2c       	mov	r11, r1
    271c:	65 01       	movw	r12, r10
    271e:	8d 8f       	std	Y+29, r24	; 0x1d
    2720:	7e 8e       	std	Y+30, r7	; 0x1e
    2722:	8f 8e       	std	Y+31, r8	; 0x1f
    2724:	98 a2       	std	Y+32, r9	; 0x20
    2726:	a9 a2       	std	Y+33, r10	; 0x21
    2728:	ba a2       	std	Y+34, r11	; 0x22
    272a:	cb a2       	std	Y+35, r12	; 0x23
    272c:	dc a2       	std	Y+36, r13	; 0x24
    272e:	a9 80       	ldd	r10, Y+1	; 0x01
    2730:	ba 80       	ldd	r11, Y+2	; 0x02
    2732:	cb 80       	ldd	r12, Y+3	; 0x03
    2734:	dc 80       	ldd	r13, Y+4	; 0x04
    2736:	ed 80       	ldd	r14, Y+5	; 0x05
    2738:	fe 2c       	mov	r15, r14
    273a:	0e 2d       	mov	r16, r14
    273c:	1e 2d       	mov	r17, r14
    273e:	28 2f       	mov	r18, r24
    2740:	37 2d       	mov	r19, r7
    2742:	40 e0       	ldi	r20, 0x00	; 0
    2744:	50 e0       	ldi	r21, 0x00	; 0
    2746:	60 e0       	ldi	r22, 0x00	; 0
    2748:	70 e0       	ldi	r23, 0x00	; 0
    274a:	80 e0       	ldi	r24, 0x00	; 0
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	0e 94 8d 29 	call	0x531a	; 0x531a <__muldi3>
    2752:	12 2f       	mov	r17, r18
    2754:	3e 87       	std	Y+14, r19	; 0x0e
    2756:	4d 87       	std	Y+13, r20	; 0x0d
    2758:	b5 2f       	mov	r27, r21
    275a:	f6 2f       	mov	r31, r22
    275c:	e7 2f       	mov	r30, r23
    275e:	78 2e       	mov	r7, r24
    2760:	89 2e       	mov	r8, r25
    2762:	a0 e0       	ldi	r26, 0x00	; 0
    2764:	0e 94 33 2a 	call	0x5466	; 0x5466 <__cmpdi2_s8>
    2768:	5c f4       	brge	.+22     	; 0x2780 <_ZN6MS58379calculateEv+0xf4>
    276a:	af e7       	ldi	r26, 0x7F	; 127
    276c:	0e 94 1e 2a 	call	0x543c	; 0x543c <__adddi3_s8>
    2770:	12 2f       	mov	r17, r18
    2772:	3e 87       	std	Y+14, r19	; 0x0e
    2774:	4d 87       	std	Y+13, r20	; 0x0d
    2776:	b5 2f       	mov	r27, r21
    2778:	f6 2f       	mov	r31, r22
    277a:	e7 2f       	mov	r30, r23
    277c:	78 2e       	mov	r7, r24
    277e:	89 2e       	mov	r8, r25
    2780:	21 2f       	mov	r18, r17
    2782:	3e 85       	ldd	r19, Y+14	; 0x0e
    2784:	4d 85       	ldd	r20, Y+13	; 0x0d
    2786:	5b 2f       	mov	r21, r27
    2788:	6f 2f       	mov	r22, r31
    278a:	7e 2f       	mov	r23, r30
    278c:	87 2d       	mov	r24, r7
    278e:	98 2d       	mov	r25, r8
    2790:	07 e0       	ldi	r16, 0x07	; 7
    2792:	0e 94 f7 29 	call	0x53ee	; 0x53ee <__ashrdi3>
    2796:	82 2e       	mov	r8, r18
    2798:	93 2e       	mov	r9, r19
    279a:	74 2e       	mov	r7, r20
    279c:	65 2e       	mov	r6, r21
    279e:	b6 2f       	mov	r27, r22
    27a0:	a7 2f       	mov	r26, r23
    27a2:	58 2e       	mov	r5, r24
    27a4:	49 2e       	mov	r4, r25
    27a6:	f1 01       	movw	r30, r2
    27a8:	a2 80       	ldd	r10, Z+2	; 0x02
    27aa:	b3 80       	ldd	r11, Z+3	; 0x03
    27ac:	2a 2d       	mov	r18, r10
    27ae:	3b 2d       	mov	r19, r11
    27b0:	40 e0       	ldi	r20, 0x00	; 0
    27b2:	50 e0       	ldi	r21, 0x00	; 0
    27b4:	60 e0       	ldi	r22, 0x00	; 0
    27b6:	70 e0       	ldi	r23, 0x00	; 0
    27b8:	80 e0       	ldi	r24, 0x00	; 0
    27ba:	90 e0       	ldi	r25, 0x00	; 0
    27bc:	00 e1       	ldi	r16, 0x10	; 16
    27be:	0e 94 de 29 	call	0x53bc	; 0x53bc <__ashldi3>
    27c2:	a2 2e       	mov	r10, r18
    27c4:	b3 2e       	mov	r11, r19
    27c6:	c4 2e       	mov	r12, r20
    27c8:	d5 2e       	mov	r13, r21
    27ca:	e6 2e       	mov	r14, r22
    27cc:	f7 2e       	mov	r15, r23
    27ce:	08 2f       	mov	r16, r24
    27d0:	19 2f       	mov	r17, r25
    27d2:	28 2d       	mov	r18, r8
    27d4:	39 2d       	mov	r19, r9
    27d6:	47 2d       	mov	r20, r7
    27d8:	56 2d       	mov	r21, r6
    27da:	6b 2f       	mov	r22, r27
    27dc:	7a 2f       	mov	r23, r26
    27de:	85 2d       	mov	r24, r5
    27e0:	94 2d       	mov	r25, r4
    27e2:	0e 94 15 2a 	call	0x542a	; 0x542a <__adddi3>
    27e6:	2d 87       	std	Y+13, r18	; 0x0d
    27e8:	3e 87       	std	Y+14, r19	; 0x0e
    27ea:	4f 87       	std	Y+15, r20	; 0x0f
    27ec:	58 8b       	std	Y+16, r21	; 0x10
    27ee:	69 8b       	std	Y+17, r22	; 0x11
    27f0:	7a 8b       	std	Y+18, r23	; 0x12
    27f2:	8b 8b       	std	Y+19, r24	; 0x13
    27f4:	9c 8b       	std	Y+20, r25	; 0x14
		OFF = int64_t(C[2])*131072l+(int64_t(C[4])*dT)/64l;
    27f6:	80 85       	ldd	r24, Z+8	; 0x08
    27f8:	91 85       	ldd	r25, Z+9	; 0x09
    27fa:	3c 01       	movw	r6, r24
    27fc:	81 2c       	mov	r8, r1
    27fe:	91 2c       	mov	r9, r1
    2800:	a1 2c       	mov	r10, r1
    2802:	b1 2c       	mov	r11, r1
    2804:	65 01       	movw	r12, r10
    2806:	8d 8f       	std	Y+29, r24	; 0x1d
    2808:	7e 8e       	std	Y+30, r7	; 0x1e
    280a:	8f 8e       	std	Y+31, r8	; 0x1f
    280c:	98 a2       	std	Y+32, r9	; 0x20
    280e:	a9 a2       	std	Y+33, r10	; 0x21
    2810:	ba a2       	std	Y+34, r11	; 0x22
    2812:	cb a2       	std	Y+35, r12	; 0x23
    2814:	dc a2       	std	Y+36, r13	; 0x24
    2816:	a9 80       	ldd	r10, Y+1	; 0x01
    2818:	ba 80       	ldd	r11, Y+2	; 0x02
    281a:	cb 80       	ldd	r12, Y+3	; 0x03
    281c:	dc 80       	ldd	r13, Y+4	; 0x04
    281e:	ed 80       	ldd	r14, Y+5	; 0x05
    2820:	fe 2c       	mov	r15, r14
    2822:	0e 2d       	mov	r16, r14
    2824:	1e 2d       	mov	r17, r14
    2826:	28 2f       	mov	r18, r24
    2828:	37 2d       	mov	r19, r7
    282a:	40 e0       	ldi	r20, 0x00	; 0
    282c:	50 e0       	ldi	r21, 0x00	; 0
    282e:	60 e0       	ldi	r22, 0x00	; 0
    2830:	70 e0       	ldi	r23, 0x00	; 0
    2832:	80 e0       	ldi	r24, 0x00	; 0
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	0e 94 8d 29 	call	0x531a	; 0x531a <__muldi3>
    283a:	12 2f       	mov	r17, r18
    283c:	3e 8b       	std	Y+22, r19	; 0x16
    283e:	4d 8b       	std	Y+21, r20	; 0x15
    2840:	b5 2f       	mov	r27, r21
    2842:	f6 2f       	mov	r31, r22
    2844:	e7 2f       	mov	r30, r23
    2846:	78 2e       	mov	r7, r24
    2848:	89 2e       	mov	r8, r25
    284a:	a0 e0       	ldi	r26, 0x00	; 0
    284c:	0e 94 33 2a 	call	0x5466	; 0x5466 <__cmpdi2_s8>
    2850:	5c f4       	brge	.+22     	; 0x2868 <_ZN6MS58379calculateEv+0x1dc>
    2852:	af e3       	ldi	r26, 0x3F	; 63
    2854:	0e 94 1e 2a 	call	0x543c	; 0x543c <__adddi3_s8>
    2858:	12 2f       	mov	r17, r18
    285a:	3e 8b       	std	Y+22, r19	; 0x16
    285c:	4d 8b       	std	Y+21, r20	; 0x15
    285e:	b5 2f       	mov	r27, r21
    2860:	f6 2f       	mov	r31, r22
    2862:	e7 2f       	mov	r30, r23
    2864:	78 2e       	mov	r7, r24
    2866:	89 2e       	mov	r8, r25
    2868:	21 2f       	mov	r18, r17
    286a:	3e 89       	ldd	r19, Y+22	; 0x16
    286c:	4d 89       	ldd	r20, Y+21	; 0x15
    286e:	5b 2f       	mov	r21, r27
    2870:	6f 2f       	mov	r22, r31
    2872:	7e 2f       	mov	r23, r30
    2874:	87 2d       	mov	r24, r7
    2876:	98 2d       	mov	r25, r8
    2878:	06 e0       	ldi	r16, 0x06	; 6
    287a:	0e 94 f7 29 	call	0x53ee	; 0x53ee <__ashrdi3>
    287e:	82 2e       	mov	r8, r18
    2880:	93 2e       	mov	r9, r19
    2882:	74 2e       	mov	r7, r20
    2884:	65 2e       	mov	r6, r21
    2886:	b6 2f       	mov	r27, r22
    2888:	a7 2f       	mov	r26, r23
    288a:	58 2e       	mov	r5, r24
    288c:	49 2e       	mov	r4, r25
    288e:	f1 01       	movw	r30, r2
    2890:	24 81       	ldd	r18, Z+4	; 0x04
    2892:	35 81       	ldd	r19, Z+5	; 0x05
    2894:	59 01       	movw	r10, r18
    2896:	3b 2d       	mov	r19, r11
    2898:	40 e0       	ldi	r20, 0x00	; 0
    289a:	50 e0       	ldi	r21, 0x00	; 0
    289c:	60 e0       	ldi	r22, 0x00	; 0
    289e:	70 e0       	ldi	r23, 0x00	; 0
    28a0:	80 e0       	ldi	r24, 0x00	; 0
    28a2:	90 e0       	ldi	r25, 0x00	; 0
    28a4:	01 e1       	ldi	r16, 0x11	; 17
    28a6:	0e 94 de 29 	call	0x53bc	; 0x53bc <__ashldi3>
    28aa:	a2 2e       	mov	r10, r18
    28ac:	b3 2e       	mov	r11, r19
    28ae:	c4 2e       	mov	r12, r20
    28b0:	d5 2e       	mov	r13, r21
    28b2:	e6 2e       	mov	r14, r22
    28b4:	f7 2e       	mov	r15, r23
    28b6:	08 2f       	mov	r16, r24
    28b8:	19 2f       	mov	r17, r25
    28ba:	28 2d       	mov	r18, r8
    28bc:	39 2d       	mov	r19, r9
    28be:	47 2d       	mov	r20, r7
    28c0:	56 2d       	mov	r21, r6
    28c2:	6b 2f       	mov	r22, r27
    28c4:	7a 2f       	mov	r23, r26
    28c6:	85 2d       	mov	r24, r5
    28c8:	94 2d       	mov	r25, r4
    28ca:	0e 94 15 2a 	call	0x542a	; 0x542a <__adddi3>
    28ce:	2d 8b       	std	Y+21, r18	; 0x15
    28d0:	3e 8b       	std	Y+22, r19	; 0x16
    28d2:	4f 8b       	std	Y+23, r20	; 0x17
    28d4:	58 8f       	std	Y+24, r21	; 0x18
    28d6:	69 8f       	std	Y+25, r22	; 0x19
    28d8:	7a 8f       	std	Y+26, r23	; 0x1a
    28da:	8b 8f       	std	Y+27, r24	; 0x1b
    28dc:	9c 8f       	std	Y+28, r25	; 0x1c
		OFF = int64_t(C[2])*65536l+(int64_t(C[4])*dT)/128l;
		P = (D1*SENS/(2097152l)-OFF)/(8192l);
	}
	
	// Temp conversion
	TEMP = 2000l+int64_t(dT)*C[6]/8388608LL;
    28de:	84 85       	ldd	r24, Z+12	; 0x0c
    28e0:	95 85       	ldd	r25, Z+13	; 0x0d
    28e2:	3c 01       	movw	r6, r24
    28e4:	81 2c       	mov	r8, r1
    28e6:	91 2c       	mov	r9, r1
    28e8:	a1 2c       	mov	r10, r1
    28ea:	b1 2c       	mov	r11, r1
    28ec:	65 01       	movw	r12, r10
    28ee:	8d 8f       	std	Y+29, r24	; 0x1d
    28f0:	7e 8e       	std	Y+30, r7	; 0x1e
    28f2:	8f 8e       	std	Y+31, r8	; 0x1f
    28f4:	98 a2       	std	Y+32, r9	; 0x20
    28f6:	a9 a2       	std	Y+33, r10	; 0x21
    28f8:	ba a2       	std	Y+34, r11	; 0x22
    28fa:	cb a2       	std	Y+35, r12	; 0x23
    28fc:	dc a2       	std	Y+36, r13	; 0x24
    28fe:	a9 80       	ldd	r10, Y+1	; 0x01
    2900:	ba 80       	ldd	r11, Y+2	; 0x02
    2902:	cb 80       	ldd	r12, Y+3	; 0x03
    2904:	dc 80       	ldd	r13, Y+4	; 0x04
    2906:	ed 80       	ldd	r14, Y+5	; 0x05
    2908:	fe 2c       	mov	r15, r14
    290a:	0e 2d       	mov	r16, r14
    290c:	1e 2d       	mov	r17, r14
    290e:	28 2f       	mov	r18, r24
    2910:	37 2d       	mov	r19, r7
    2912:	40 e0       	ldi	r20, 0x00	; 0
    2914:	50 e0       	ldi	r21, 0x00	; 0
    2916:	60 e0       	ldi	r22, 0x00	; 0
    2918:	70 e0       	ldi	r23, 0x00	; 0
    291a:	80 e0       	ldi	r24, 0x00	; 0
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	0e 94 8d 29 	call	0x531a	; 0x531a <__muldi3>
    2922:	12 2f       	mov	r17, r18
    2924:	3d a3       	std	Y+37, r19	; 0x25
    2926:	4d 8f       	std	Y+29, r20	; 0x1d
    2928:	b5 2f       	mov	r27, r21
    292a:	f6 2f       	mov	r31, r22
    292c:	e7 2f       	mov	r30, r23
    292e:	78 2e       	mov	r7, r24
    2930:	89 2e       	mov	r8, r25
    2932:	a0 e0       	ldi	r26, 0x00	; 0
    2934:	0e 94 33 2a 	call	0x5466	; 0x5466 <__cmpdi2_s8>
    2938:	84 f4       	brge	.+32     	; 0x295a <_ZN6MS58379calculateEv+0x2ce>
    293a:	21 50       	subi	r18, 0x01	; 1
    293c:	31 09       	sbc	r19, r1
    293e:	40 48       	sbci	r20, 0x80	; 128
    2940:	5f 4f       	sbci	r21, 0xFF	; 255
    2942:	6f 4f       	sbci	r22, 0xFF	; 255
    2944:	7f 4f       	sbci	r23, 0xFF	; 255
    2946:	8f 4f       	sbci	r24, 0xFF	; 255
    2948:	9f 4f       	sbci	r25, 0xFF	; 255
    294a:	12 2f       	mov	r17, r18
    294c:	3d a3       	std	Y+37, r19	; 0x25
    294e:	4d 8f       	std	Y+29, r20	; 0x1d
    2950:	b5 2f       	mov	r27, r21
    2952:	f6 2f       	mov	r31, r22
    2954:	e7 2f       	mov	r30, r23
    2956:	78 2e       	mov	r7, r24
    2958:	89 2e       	mov	r8, r25
    295a:	21 2f       	mov	r18, r17
    295c:	3d a1       	ldd	r19, Y+37	; 0x25
    295e:	4d 8d       	ldd	r20, Y+29	; 0x1d
    2960:	5b 2f       	mov	r21, r27
    2962:	6f 2f       	mov	r22, r31
    2964:	7e 2f       	mov	r23, r30
    2966:	87 2d       	mov	r24, r7
    2968:	98 2d       	mov	r25, r8
    296a:	07 e1       	ldi	r16, 0x17	; 23
    296c:	0e 94 f7 29 	call	0x53ee	; 0x53ee <__ashrdi3>
    2970:	82 2e       	mov	r8, r18
    2972:	93 2e       	mov	r9, r19
    2974:	a4 2e       	mov	r10, r20
    2976:	b5 2e       	mov	r11, r21
    2978:	24 01       	movw	r4, r8
    297a:	35 01       	movw	r6, r10
    297c:	00 ed       	ldi	r16, 0xD0	; 208
    297e:	40 0e       	add	r4, r16
    2980:	07 e0       	ldi	r16, 0x07	; 7
    2982:	50 1e       	adc	r5, r16
    2984:	61 1c       	adc	r6, r1
    2986:	71 1c       	adc	r7, r1
	
	//Second order compensation
	if ( _model == MS5837_02BA ) {
		if((TEMP/100)<20){         //Low temp
    2988:	10 ed       	ldi	r17, 0xD0	; 208
    298a:	41 16       	cp	r4, r17
    298c:	17 e0       	ldi	r17, 0x07	; 7
    298e:	51 06       	cpc	r5, r17
    2990:	61 04       	cpc	r6, r1
    2992:	71 04       	cpc	r7, r1
    2994:	0c f4       	brge	.+2      	; 0x2998 <_ZN6MS58379calculateEv+0x30c>
    2996:	62 c1       	rjmp	.+708    	; 0x2c5c <_ZN6MS58379calculateEv+0x5d0>
	int32_t dT = 0;
	int64_t SENS = 0;
	int64_t OFF = 0;
	int32_t SENSi = 0;
	int32_t OFFi = 0;
	int32_t Ti = 0;
    2998:	81 2c       	mov	r8, r1
    299a:	91 2c       	mov	r9, r1
    299c:	54 01       	movw	r10, r8
	
	int32_t dT = 0;
	int64_t SENS = 0;
	int64_t OFF = 0;
	int32_t SENSi = 0;
	int32_t OFFi = 0;
    299e:	19 82       	std	Y+1, r1	; 0x01
    29a0:	1a 82       	std	Y+2, r1	; 0x02
    29a2:	1b 82       	std	Y+3, r1	; 0x03
    29a4:	1c 82       	std	Y+4, r1	; 0x04
	// Do conversion first and then second order temp compensation
	
	int32_t dT = 0;
	int64_t SENS = 0;
	int64_t OFF = 0;
	int32_t SENSi = 0;
    29a6:	e1 2c       	mov	r14, r1
    29a8:	f1 2c       	mov	r15, r1
    29aa:	87 01       	movw	r16, r14
    29ac:	4c c3       	rjmp	.+1688   	; 0x3046 <_ZN6MS58379calculateEv+0x9ba>
	if ( _model == MS5837_02BA ) {
		SENS = int64_t(C[1])*65536l+(int64_t(C[3])*dT)/128l;
		OFF = int64_t(C[2])*131072l+(int64_t(C[4])*dT)/64l;
		P = (D1*SENS/(2097152l)-OFF)/(32768l);
	} else {
		SENS = int64_t(C[1])*32768l+(int64_t(C[3])*dT)/256l;
    29ae:	69 80       	ldd	r6, Y+1	; 0x01
    29b0:	7a 80       	ldd	r7, Y+2	; 0x02
    29b2:	8b 80       	ldd	r8, Y+3	; 0x03
    29b4:	9c 80       	ldd	r9, Y+4	; 0x04
    29b6:	99 0c       	add	r9, r9
    29b8:	66 08       	sbc	r6, r6
    29ba:	76 2c       	mov	r7, r6
    29bc:	43 01       	movw	r8, r6
    29be:	6d 82       	std	Y+5, r6	; 0x05
    29c0:	7e 82       	std	Y+6, r7	; 0x06
    29c2:	8f 82       	std	Y+7, r8	; 0x07
    29c4:	98 86       	std	Y+8, r9	; 0x08
    29c6:	86 81       	ldd	r24, Z+6	; 0x06
    29c8:	97 81       	ldd	r25, Z+7	; 0x07
    29ca:	3c 01       	movw	r6, r24
    29cc:	81 2c       	mov	r8, r1
    29ce:	91 2c       	mov	r9, r1
    29d0:	a1 2c       	mov	r10, r1
    29d2:	b1 2c       	mov	r11, r1
    29d4:	65 01       	movw	r12, r10
    29d6:	8d 8f       	std	Y+29, r24	; 0x1d
    29d8:	7e 8e       	std	Y+30, r7	; 0x1e
    29da:	8f 8e       	std	Y+31, r8	; 0x1f
    29dc:	98 a2       	std	Y+32, r9	; 0x20
    29de:	a9 a2       	std	Y+33, r10	; 0x21
    29e0:	ba a2       	std	Y+34, r11	; 0x22
    29e2:	cb a2       	std	Y+35, r12	; 0x23
    29e4:	dc a2       	std	Y+36, r13	; 0x24
    29e6:	a9 80       	ldd	r10, Y+1	; 0x01
    29e8:	ba 80       	ldd	r11, Y+2	; 0x02
    29ea:	cb 80       	ldd	r12, Y+3	; 0x03
    29ec:	dc 80       	ldd	r13, Y+4	; 0x04
    29ee:	ed 80       	ldd	r14, Y+5	; 0x05
    29f0:	fe 2c       	mov	r15, r14
    29f2:	0e 2d       	mov	r16, r14
    29f4:	1e 2d       	mov	r17, r14
    29f6:	28 2f       	mov	r18, r24
    29f8:	37 2d       	mov	r19, r7
    29fa:	40 e0       	ldi	r20, 0x00	; 0
    29fc:	50 e0       	ldi	r21, 0x00	; 0
    29fe:	60 e0       	ldi	r22, 0x00	; 0
    2a00:	70 e0       	ldi	r23, 0x00	; 0
    2a02:	80 e0       	ldi	r24, 0x00	; 0
    2a04:	90 e0       	ldi	r25, 0x00	; 0
    2a06:	0e 94 8d 29 	call	0x531a	; 0x531a <__muldi3>
    2a0a:	12 2f       	mov	r17, r18
    2a0c:	3e 87       	std	Y+14, r19	; 0x0e
    2a0e:	4d 87       	std	Y+13, r20	; 0x0d
    2a10:	b5 2f       	mov	r27, r21
    2a12:	f6 2f       	mov	r31, r22
    2a14:	e7 2f       	mov	r30, r23
    2a16:	78 2e       	mov	r7, r24
    2a18:	89 2e       	mov	r8, r25
    2a1a:	a0 e0       	ldi	r26, 0x00	; 0
    2a1c:	0e 94 33 2a 	call	0x5466	; 0x5466 <__cmpdi2_s8>
    2a20:	84 f4       	brge	.+32     	; 0x2a42 <_ZN6MS58379calculateEv+0x3b6>
    2a22:	21 50       	subi	r18, 0x01	; 1
    2a24:	3f 4f       	sbci	r19, 0xFF	; 255
    2a26:	4f 4f       	sbci	r20, 0xFF	; 255
    2a28:	5f 4f       	sbci	r21, 0xFF	; 255
    2a2a:	6f 4f       	sbci	r22, 0xFF	; 255
    2a2c:	7f 4f       	sbci	r23, 0xFF	; 255
    2a2e:	8f 4f       	sbci	r24, 0xFF	; 255
    2a30:	9f 4f       	sbci	r25, 0xFF	; 255
    2a32:	12 2f       	mov	r17, r18
    2a34:	3e 87       	std	Y+14, r19	; 0x0e
    2a36:	4d 87       	std	Y+13, r20	; 0x0d
    2a38:	b5 2f       	mov	r27, r21
    2a3a:	f6 2f       	mov	r31, r22
    2a3c:	e7 2f       	mov	r30, r23
    2a3e:	78 2e       	mov	r7, r24
    2a40:	89 2e       	mov	r8, r25
    2a42:	21 2f       	mov	r18, r17
    2a44:	3e 85       	ldd	r19, Y+14	; 0x0e
    2a46:	4d 85       	ldd	r20, Y+13	; 0x0d
    2a48:	5b 2f       	mov	r21, r27
    2a4a:	6f 2f       	mov	r22, r31
    2a4c:	7e 2f       	mov	r23, r30
    2a4e:	87 2d       	mov	r24, r7
    2a50:	98 2d       	mov	r25, r8
    2a52:	08 e0       	ldi	r16, 0x08	; 8
    2a54:	0e 94 f7 29 	call	0x53ee	; 0x53ee <__ashrdi3>
    2a58:	82 2e       	mov	r8, r18
    2a5a:	93 2e       	mov	r9, r19
    2a5c:	74 2e       	mov	r7, r20
    2a5e:	65 2e       	mov	r6, r21
    2a60:	b6 2f       	mov	r27, r22
    2a62:	a7 2f       	mov	r26, r23
    2a64:	58 2e       	mov	r5, r24
    2a66:	49 2e       	mov	r4, r25
    2a68:	f1 01       	movw	r30, r2
    2a6a:	a2 80       	ldd	r10, Z+2	; 0x02
    2a6c:	b3 80       	ldd	r11, Z+3	; 0x03
    2a6e:	2a 2d       	mov	r18, r10
    2a70:	3b 2d       	mov	r19, r11
    2a72:	40 e0       	ldi	r20, 0x00	; 0
    2a74:	50 e0       	ldi	r21, 0x00	; 0
    2a76:	60 e0       	ldi	r22, 0x00	; 0
    2a78:	70 e0       	ldi	r23, 0x00	; 0
    2a7a:	80 e0       	ldi	r24, 0x00	; 0
    2a7c:	90 e0       	ldi	r25, 0x00	; 0
    2a7e:	0f e0       	ldi	r16, 0x0F	; 15
    2a80:	0e 94 de 29 	call	0x53bc	; 0x53bc <__ashldi3>
    2a84:	a2 2e       	mov	r10, r18
    2a86:	b3 2e       	mov	r11, r19
    2a88:	c4 2e       	mov	r12, r20
    2a8a:	d5 2e       	mov	r13, r21
    2a8c:	e6 2e       	mov	r14, r22
    2a8e:	f7 2e       	mov	r15, r23
    2a90:	08 2f       	mov	r16, r24
    2a92:	19 2f       	mov	r17, r25
    2a94:	28 2d       	mov	r18, r8
    2a96:	39 2d       	mov	r19, r9
    2a98:	47 2d       	mov	r20, r7
    2a9a:	56 2d       	mov	r21, r6
    2a9c:	6b 2f       	mov	r22, r27
    2a9e:	7a 2f       	mov	r23, r26
    2aa0:	85 2d       	mov	r24, r5
    2aa2:	94 2d       	mov	r25, r4
    2aa4:	0e 94 15 2a 	call	0x542a	; 0x542a <__adddi3>
    2aa8:	2d 8b       	std	Y+21, r18	; 0x15
    2aaa:	3e 8b       	std	Y+22, r19	; 0x16
    2aac:	4f 8b       	std	Y+23, r20	; 0x17
    2aae:	58 8f       	std	Y+24, r21	; 0x18
    2ab0:	69 8f       	std	Y+25, r22	; 0x19
    2ab2:	7a 8f       	std	Y+26, r23	; 0x1a
    2ab4:	8b 8f       	std	Y+27, r24	; 0x1b
    2ab6:	9c 8f       	std	Y+28, r25	; 0x1c
		OFF = int64_t(C[2])*65536l+(int64_t(C[4])*dT)/128l;
    2ab8:	80 85       	ldd	r24, Z+8	; 0x08
    2aba:	91 85       	ldd	r25, Z+9	; 0x09
    2abc:	3c 01       	movw	r6, r24
    2abe:	81 2c       	mov	r8, r1
    2ac0:	91 2c       	mov	r9, r1
    2ac2:	a1 2c       	mov	r10, r1
    2ac4:	b1 2c       	mov	r11, r1
    2ac6:	65 01       	movw	r12, r10
    2ac8:	8d 8f       	std	Y+29, r24	; 0x1d
    2aca:	7e 8e       	std	Y+30, r7	; 0x1e
    2acc:	8f 8e       	std	Y+31, r8	; 0x1f
    2ace:	98 a2       	std	Y+32, r9	; 0x20
    2ad0:	a9 a2       	std	Y+33, r10	; 0x21
    2ad2:	ba a2       	std	Y+34, r11	; 0x22
    2ad4:	cb a2       	std	Y+35, r12	; 0x23
    2ad6:	dc a2       	std	Y+36, r13	; 0x24
    2ad8:	a9 80       	ldd	r10, Y+1	; 0x01
    2ada:	ba 80       	ldd	r11, Y+2	; 0x02
    2adc:	cb 80       	ldd	r12, Y+3	; 0x03
    2ade:	dc 80       	ldd	r13, Y+4	; 0x04
    2ae0:	ed 80       	ldd	r14, Y+5	; 0x05
    2ae2:	fe 2c       	mov	r15, r14
    2ae4:	0e 2d       	mov	r16, r14
    2ae6:	1e 2d       	mov	r17, r14
    2ae8:	28 2f       	mov	r18, r24
    2aea:	37 2d       	mov	r19, r7
    2aec:	40 e0       	ldi	r20, 0x00	; 0
    2aee:	50 e0       	ldi	r21, 0x00	; 0
    2af0:	60 e0       	ldi	r22, 0x00	; 0
    2af2:	70 e0       	ldi	r23, 0x00	; 0
    2af4:	80 e0       	ldi	r24, 0x00	; 0
    2af6:	90 e0       	ldi	r25, 0x00	; 0
    2af8:	0e 94 8d 29 	call	0x531a	; 0x531a <__muldi3>
    2afc:	12 2f       	mov	r17, r18
    2afe:	3e 87       	std	Y+14, r19	; 0x0e
    2b00:	4d 87       	std	Y+13, r20	; 0x0d
    2b02:	b5 2f       	mov	r27, r21
    2b04:	f6 2f       	mov	r31, r22
    2b06:	e7 2f       	mov	r30, r23
    2b08:	78 2e       	mov	r7, r24
    2b0a:	89 2e       	mov	r8, r25
    2b0c:	a0 e0       	ldi	r26, 0x00	; 0
    2b0e:	0e 94 33 2a 	call	0x5466	; 0x5466 <__cmpdi2_s8>
    2b12:	5c f4       	brge	.+22     	; 0x2b2a <_ZN6MS58379calculateEv+0x49e>
    2b14:	af e7       	ldi	r26, 0x7F	; 127
    2b16:	0e 94 1e 2a 	call	0x543c	; 0x543c <__adddi3_s8>
    2b1a:	12 2f       	mov	r17, r18
    2b1c:	3e 87       	std	Y+14, r19	; 0x0e
    2b1e:	4d 87       	std	Y+13, r20	; 0x0d
    2b20:	b5 2f       	mov	r27, r21
    2b22:	f6 2f       	mov	r31, r22
    2b24:	e7 2f       	mov	r30, r23
    2b26:	78 2e       	mov	r7, r24
    2b28:	89 2e       	mov	r8, r25
    2b2a:	21 2f       	mov	r18, r17
    2b2c:	3e 85       	ldd	r19, Y+14	; 0x0e
    2b2e:	4d 85       	ldd	r20, Y+13	; 0x0d
    2b30:	5b 2f       	mov	r21, r27
    2b32:	6f 2f       	mov	r22, r31
    2b34:	7e 2f       	mov	r23, r30
    2b36:	87 2d       	mov	r24, r7
    2b38:	98 2d       	mov	r25, r8
    2b3a:	07 e0       	ldi	r16, 0x07	; 7
    2b3c:	0e 94 f7 29 	call	0x53ee	; 0x53ee <__ashrdi3>
    2b40:	82 2e       	mov	r8, r18
    2b42:	93 2e       	mov	r9, r19
    2b44:	74 2e       	mov	r7, r20
    2b46:	65 2e       	mov	r6, r21
    2b48:	b6 2f       	mov	r27, r22
    2b4a:	a7 2f       	mov	r26, r23
    2b4c:	58 2e       	mov	r5, r24
    2b4e:	49 2e       	mov	r4, r25
    2b50:	f1 01       	movw	r30, r2
    2b52:	24 81       	ldd	r18, Z+4	; 0x04
    2b54:	35 81       	ldd	r19, Z+5	; 0x05
    2b56:	59 01       	movw	r10, r18
    2b58:	3b 2d       	mov	r19, r11
    2b5a:	40 e0       	ldi	r20, 0x00	; 0
    2b5c:	50 e0       	ldi	r21, 0x00	; 0
    2b5e:	60 e0       	ldi	r22, 0x00	; 0
    2b60:	70 e0       	ldi	r23, 0x00	; 0
    2b62:	80 e0       	ldi	r24, 0x00	; 0
    2b64:	90 e0       	ldi	r25, 0x00	; 0
    2b66:	00 e1       	ldi	r16, 0x10	; 16
    2b68:	0e 94 de 29 	call	0x53bc	; 0x53bc <__ashldi3>
    2b6c:	a2 2e       	mov	r10, r18
    2b6e:	b3 2e       	mov	r11, r19
    2b70:	c4 2e       	mov	r12, r20
    2b72:	d5 2e       	mov	r13, r21
    2b74:	e6 2e       	mov	r14, r22
    2b76:	f7 2e       	mov	r15, r23
    2b78:	08 2f       	mov	r16, r24
    2b7a:	19 2f       	mov	r17, r25
    2b7c:	28 2d       	mov	r18, r8
    2b7e:	39 2d       	mov	r19, r9
    2b80:	47 2d       	mov	r20, r7
    2b82:	56 2d       	mov	r21, r6
    2b84:	6b 2f       	mov	r22, r27
    2b86:	7a 2f       	mov	r23, r26
    2b88:	85 2d       	mov	r24, r5
    2b8a:	94 2d       	mov	r25, r4
    2b8c:	0e 94 15 2a 	call	0x542a	; 0x542a <__adddi3>
    2b90:	2d 87       	std	Y+13, r18	; 0x0d
    2b92:	3e 87       	std	Y+14, r19	; 0x0e
    2b94:	4f 87       	std	Y+15, r20	; 0x0f
    2b96:	58 8b       	std	Y+16, r21	; 0x10
    2b98:	69 8b       	std	Y+17, r22	; 0x11
    2b9a:	7a 8b       	std	Y+18, r23	; 0x12
    2b9c:	8b 8b       	std	Y+19, r24	; 0x13
    2b9e:	9c 8b       	std	Y+20, r25	; 0x14
		P = (D1*SENS/(2097152l)-OFF)/(8192l);
	}
	
	// Temp conversion
	TEMP = 2000l+int64_t(dT)*C[6]/8388608LL;
    2ba0:	84 85       	ldd	r24, Z+12	; 0x0c
    2ba2:	95 85       	ldd	r25, Z+13	; 0x0d
    2ba4:	3c 01       	movw	r6, r24
    2ba6:	81 2c       	mov	r8, r1
    2ba8:	91 2c       	mov	r9, r1
    2baa:	a1 2c       	mov	r10, r1
    2bac:	b1 2c       	mov	r11, r1
    2bae:	65 01       	movw	r12, r10
    2bb0:	8d 8f       	std	Y+29, r24	; 0x1d
    2bb2:	7e 8e       	std	Y+30, r7	; 0x1e
    2bb4:	8f 8e       	std	Y+31, r8	; 0x1f
    2bb6:	98 a2       	std	Y+32, r9	; 0x20
    2bb8:	a9 a2       	std	Y+33, r10	; 0x21
    2bba:	ba a2       	std	Y+34, r11	; 0x22
    2bbc:	cb a2       	std	Y+35, r12	; 0x23
    2bbe:	dc a2       	std	Y+36, r13	; 0x24
    2bc0:	a9 80       	ldd	r10, Y+1	; 0x01
    2bc2:	ba 80       	ldd	r11, Y+2	; 0x02
    2bc4:	cb 80       	ldd	r12, Y+3	; 0x03
    2bc6:	dc 80       	ldd	r13, Y+4	; 0x04
    2bc8:	ed 80       	ldd	r14, Y+5	; 0x05
    2bca:	fe 2c       	mov	r15, r14
    2bcc:	0e 2d       	mov	r16, r14
    2bce:	1e 2d       	mov	r17, r14
    2bd0:	28 2f       	mov	r18, r24
    2bd2:	37 2d       	mov	r19, r7
    2bd4:	40 e0       	ldi	r20, 0x00	; 0
    2bd6:	50 e0       	ldi	r21, 0x00	; 0
    2bd8:	60 e0       	ldi	r22, 0x00	; 0
    2bda:	70 e0       	ldi	r23, 0x00	; 0
    2bdc:	80 e0       	ldi	r24, 0x00	; 0
    2bde:	90 e0       	ldi	r25, 0x00	; 0
    2be0:	0e 94 8d 29 	call	0x531a	; 0x531a <__muldi3>
    2be4:	12 2f       	mov	r17, r18
    2be6:	3d a3       	std	Y+37, r19	; 0x25
    2be8:	4d 8f       	std	Y+29, r20	; 0x1d
    2bea:	b5 2f       	mov	r27, r21
    2bec:	f6 2f       	mov	r31, r22
    2bee:	e7 2f       	mov	r30, r23
    2bf0:	78 2e       	mov	r7, r24
    2bf2:	89 2e       	mov	r8, r25
    2bf4:	a0 e0       	ldi	r26, 0x00	; 0
    2bf6:	0e 94 33 2a 	call	0x5466	; 0x5466 <__cmpdi2_s8>
    2bfa:	84 f4       	brge	.+32     	; 0x2c1c <_ZN6MS58379calculateEv+0x590>
    2bfc:	21 50       	subi	r18, 0x01	; 1
    2bfe:	31 09       	sbc	r19, r1
    2c00:	40 48       	sbci	r20, 0x80	; 128
    2c02:	5f 4f       	sbci	r21, 0xFF	; 255
    2c04:	6f 4f       	sbci	r22, 0xFF	; 255
    2c06:	7f 4f       	sbci	r23, 0xFF	; 255
    2c08:	8f 4f       	sbci	r24, 0xFF	; 255
    2c0a:	9f 4f       	sbci	r25, 0xFF	; 255
    2c0c:	12 2f       	mov	r17, r18
    2c0e:	3d a3       	std	Y+37, r19	; 0x25
    2c10:	4d 8f       	std	Y+29, r20	; 0x1d
    2c12:	b5 2f       	mov	r27, r21
    2c14:	f6 2f       	mov	r31, r22
    2c16:	e7 2f       	mov	r30, r23
    2c18:	78 2e       	mov	r7, r24
    2c1a:	89 2e       	mov	r8, r25
    2c1c:	21 2f       	mov	r18, r17
    2c1e:	3d a1       	ldd	r19, Y+37	; 0x25
    2c20:	4d 8d       	ldd	r20, Y+29	; 0x1d
    2c22:	5b 2f       	mov	r21, r27
    2c24:	6f 2f       	mov	r22, r31
    2c26:	7e 2f       	mov	r23, r30
    2c28:	87 2d       	mov	r24, r7
    2c2a:	98 2d       	mov	r25, r8
    2c2c:	07 e1       	ldi	r16, 0x17	; 23
    2c2e:	0e 94 f7 29 	call	0x53ee	; 0x53ee <__ashrdi3>
    2c32:	82 2e       	mov	r8, r18
    2c34:	93 2e       	mov	r9, r19
    2c36:	a4 2e       	mov	r10, r20
    2c38:	b5 2e       	mov	r11, r21
    2c3a:	24 01       	movw	r4, r8
    2c3c:	35 01       	movw	r6, r10
    2c3e:	00 ed       	ldi	r16, 0xD0	; 208
    2c40:	40 0e       	add	r4, r16
    2c42:	07 e0       	ldi	r16, 0x07	; 7
    2c44:	50 1e       	adc	r5, r16
    2c46:	61 1c       	adc	r6, r1
    2c48:	71 1c       	adc	r7, r1
			Ti = (11*int64_t(dT)*int64_t(dT))/(34359738368LL);
			OFFi = (31*(TEMP-2000)*(TEMP-2000))/8;
			SENSi = (63*(TEMP-2000)*(TEMP-2000))/32;
		}
		} else {
		if((TEMP/100)<20){         //Low temp
    2c4a:	10 ed       	ldi	r17, 0xD0	; 208
    2c4c:	41 16       	cp	r4, r17
    2c4e:	17 e0       	ldi	r17, 0x07	; 7
    2c50:	51 06       	cpc	r5, r17
    2c52:	61 04       	cpc	r6, r1
    2c54:	71 04       	cpc	r7, r1
    2c56:	0c f4       	brge	.+2      	; 0x2c5a <_ZN6MS58379calculateEv+0x5ce>
    2c58:	af c0       	rjmp	.+350    	; 0x2db8 <_ZN6MS58379calculateEv+0x72c>
    2c5a:	8a c1       	rjmp	.+788    	; 0x2f70 <_ZN6MS58379calculateEv+0x8e4>
	TEMP = 2000l+int64_t(dT)*C[6]/8388608LL;
	
	//Second order compensation
	if ( _model == MS5837_02BA ) {
		if((TEMP/100)<20){         //Low temp
			Ti = (11*int64_t(dT)*int64_t(dT))/(34359738368LL);
    2c5c:	29 81       	ldd	r18, Y+1	; 0x01
    2c5e:	3a 81       	ldd	r19, Y+2	; 0x02
    2c60:	4b 81       	ldd	r20, Y+3	; 0x03
    2c62:	5c 81       	ldd	r21, Y+4	; 0x04
    2c64:	6d 81       	ldd	r22, Y+5	; 0x05
    2c66:	76 2f       	mov	r23, r22
    2c68:	86 2f       	mov	r24, r22
    2c6a:	96 2f       	mov	r25, r22
    2c6c:	02 e0       	ldi	r16, 0x02	; 2
    2c6e:	0e 94 de 29 	call	0x53bc	; 0x53bc <__ashldi3>
    2c72:	a2 2e       	mov	r10, r18
    2c74:	b3 2e       	mov	r11, r19
    2c76:	c4 2e       	mov	r12, r20
    2c78:	d5 2e       	mov	r13, r21
    2c7a:	e6 2e       	mov	r14, r22
    2c7c:	f7 2e       	mov	r15, r23
    2c7e:	e8 2f       	mov	r30, r24
    2c80:	19 2f       	mov	r17, r25
    2c82:	0e 94 de 29 	call	0x53bc	; 0x53bc <__ashldi3>
    2c86:	0e 2f       	mov	r16, r30
    2c88:	0e 94 2a 2a 	call	0x5454	; 0x5454 <__subdi3>
    2c8c:	a9 80       	ldd	r10, Y+1	; 0x01
    2c8e:	ba 80       	ldd	r11, Y+2	; 0x02
    2c90:	cb 80       	ldd	r12, Y+3	; 0x03
    2c92:	dc 80       	ldd	r13, Y+4	; 0x04
    2c94:	ed 80       	ldd	r14, Y+5	; 0x05
    2c96:	fe 2c       	mov	r15, r14
    2c98:	0e 2d       	mov	r16, r14
    2c9a:	1e 2d       	mov	r17, r14
    2c9c:	0e 94 2a 2a 	call	0x5454	; 0x5454 <__subdi3>
    2ca0:	e0 2e       	mov	r14, r16
    2ca2:	0f 2d       	mov	r16, r15
    2ca4:	0e 94 8d 29 	call	0x531a	; 0x531a <__muldi3>
    2ca8:	12 2f       	mov	r17, r18
    2caa:	3d 8f       	std	Y+29, r19	; 0x1d
    2cac:	4d 83       	std	Y+5, r20	; 0x05
    2cae:	b5 2f       	mov	r27, r21
    2cb0:	f6 2f       	mov	r31, r22
    2cb2:	e7 2f       	mov	r30, r23
    2cb4:	89 83       	std	Y+1, r24	; 0x01
    2cb6:	89 2e       	mov	r8, r25
    2cb8:	a0 e0       	ldi	r26, 0x00	; 0
    2cba:	0e 94 33 2a 	call	0x5466	; 0x5466 <__cmpdi2_s8>
    2cbe:	84 f4       	brge	.+32     	; 0x2ce0 <_ZN6MS58379calculateEv+0x654>
    2cc0:	21 50       	subi	r18, 0x01	; 1
    2cc2:	31 09       	sbc	r19, r1
    2cc4:	41 09       	sbc	r20, r1
    2cc6:	51 09       	sbc	r21, r1
    2cc8:	68 4f       	sbci	r22, 0xF8	; 248
    2cca:	7f 4f       	sbci	r23, 0xFF	; 255
    2ccc:	8f 4f       	sbci	r24, 0xFF	; 255
    2cce:	9f 4f       	sbci	r25, 0xFF	; 255
    2cd0:	12 2f       	mov	r17, r18
    2cd2:	3d 8f       	std	Y+29, r19	; 0x1d
    2cd4:	4d 83       	std	Y+5, r20	; 0x05
    2cd6:	b5 2f       	mov	r27, r21
    2cd8:	f6 2f       	mov	r31, r22
    2cda:	e7 2f       	mov	r30, r23
    2cdc:	89 83       	std	Y+1, r24	; 0x01
    2cde:	89 2e       	mov	r8, r25
    2ce0:	21 2f       	mov	r18, r17
    2ce2:	3d 8d       	ldd	r19, Y+29	; 0x1d
    2ce4:	4d 81       	ldd	r20, Y+5	; 0x05
    2ce6:	5b 2f       	mov	r21, r27
    2ce8:	6f 2f       	mov	r22, r31
    2cea:	7e 2f       	mov	r23, r30
    2cec:	89 81       	ldd	r24, Y+1	; 0x01
    2cee:	98 2d       	mov	r25, r8
    2cf0:	03 e2       	ldi	r16, 0x23	; 35
    2cf2:	0e 94 f7 29 	call	0x53ee	; 0x53ee <__ashrdi3>
    2cf6:	82 2e       	mov	r8, r18
    2cf8:	93 2e       	mov	r9, r19
    2cfa:	a4 2e       	mov	r10, r20
    2cfc:	b5 2e       	mov	r11, r21
			OFFi = (31*(TEMP-2000)*(TEMP-2000))/8;
    2cfe:	73 01       	movw	r14, r6
    2d00:	62 01       	movw	r12, r4
    2d02:	20 ed       	ldi	r18, 0xD0	; 208
    2d04:	c2 1a       	sub	r12, r18
    2d06:	27 e0       	ldi	r18, 0x07	; 7
    2d08:	d2 0a       	sbc	r13, r18
    2d0a:	e1 08       	sbc	r14, r1
    2d0c:	f1 08       	sbc	r15, r1
    2d0e:	d7 01       	movw	r26, r14
    2d10:	c6 01       	movw	r24, r12
    2d12:	88 0f       	add	r24, r24
    2d14:	99 1f       	adc	r25, r25
    2d16:	aa 1f       	adc	r26, r26
    2d18:	bb 1f       	adc	r27, r27
    2d1a:	88 0f       	add	r24, r24
    2d1c:	99 1f       	adc	r25, r25
    2d1e:	aa 1f       	adc	r26, r26
    2d20:	bb 1f       	adc	r27, r27
    2d22:	88 0f       	add	r24, r24
    2d24:	99 1f       	adc	r25, r25
    2d26:	aa 1f       	adc	r26, r26
    2d28:	bb 1f       	adc	r27, r27
    2d2a:	88 0f       	add	r24, r24
    2d2c:	99 1f       	adc	r25, r25
    2d2e:	aa 1f       	adc	r26, r26
    2d30:	bb 1f       	adc	r27, r27
    2d32:	88 0f       	add	r24, r24
    2d34:	99 1f       	adc	r25, r25
    2d36:	aa 1f       	adc	r26, r26
    2d38:	bb 1f       	adc	r27, r27
    2d3a:	9c 01       	movw	r18, r24
    2d3c:	ad 01       	movw	r20, r26
    2d3e:	2c 19       	sub	r18, r12
    2d40:	3d 09       	sbc	r19, r13
    2d42:	4e 09       	sbc	r20, r14
    2d44:	5f 09       	sbc	r21, r15
    2d46:	c7 01       	movw	r24, r14
    2d48:	b6 01       	movw	r22, r12
    2d4a:	0e 94 4a 29 	call	0x5294	; 0x5294 <__mulsi3>
    2d4e:	8b 01       	movw	r16, r22
    2d50:	9c 01       	movw	r18, r24
    2d52:	99 23       	and	r25, r25
    2d54:	24 f4       	brge	.+8      	; 0x2d5e <_ZN6MS58379calculateEv+0x6d2>
    2d56:	09 5f       	subi	r16, 0xF9	; 249
    2d58:	1f 4f       	sbci	r17, 0xFF	; 255
    2d5a:	2f 4f       	sbci	r18, 0xFF	; 255
    2d5c:	3f 4f       	sbci	r19, 0xFF	; 255
    2d5e:	b9 01       	movw	r22, r18
    2d60:	a8 01       	movw	r20, r16
    2d62:	68 94       	set
    2d64:	12 f8       	bld	r1, 2
    2d66:	75 95       	asr	r23
    2d68:	67 95       	ror	r22
    2d6a:	57 95       	ror	r21
    2d6c:	47 95       	ror	r20
    2d6e:	16 94       	lsr	r1
    2d70:	d1 f7       	brne	.-12     	; 0x2d66 <_ZN6MS58379calculateEv+0x6da>
    2d72:	49 83       	std	Y+1, r20	; 0x01
    2d74:	5a 83       	std	Y+2, r21	; 0x02
    2d76:	6b 83       	std	Y+3, r22	; 0x03
    2d78:	7c 83       	std	Y+4, r23	; 0x04
			SENSi = (63*(TEMP-2000)*(TEMP-2000))/32;
    2d7a:	af e3       	ldi	r26, 0x3F	; 63
    2d7c:	b0 e0       	ldi	r27, 0x00	; 0
    2d7e:	a7 01       	movw	r20, r14
    2d80:	96 01       	movw	r18, r12
    2d82:	0e 94 83 29 	call	0x5306	; 0x5306 <__muluhisi3>
    2d86:	9b 01       	movw	r18, r22
    2d88:	ac 01       	movw	r20, r24
    2d8a:	c7 01       	movw	r24, r14
    2d8c:	b6 01       	movw	r22, r12
    2d8e:	0e 94 4a 29 	call	0x5294	; 0x5294 <__mulsi3>
    2d92:	8b 01       	movw	r16, r22
    2d94:	9c 01       	movw	r18, r24
    2d96:	99 23       	and	r25, r25
    2d98:	24 f4       	brge	.+8      	; 0x2da2 <_ZN6MS58379calculateEv+0x716>
    2d9a:	01 5e       	subi	r16, 0xE1	; 225
    2d9c:	1f 4f       	sbci	r17, 0xFF	; 255
    2d9e:	2f 4f       	sbci	r18, 0xFF	; 255
    2da0:	3f 4f       	sbci	r19, 0xFF	; 255
    2da2:	78 01       	movw	r14, r16
    2da4:	89 01       	movw	r16, r18
    2da6:	68 94       	set
    2da8:	14 f8       	bld	r1, 4
    2daa:	15 95       	asr	r17
    2dac:	07 95       	ror	r16
    2dae:	f7 94       	ror	r15
    2db0:	e7 94       	ror	r14
    2db2:	16 94       	lsr	r1
    2db4:	d1 f7       	brne	.-12     	; 0x2daa <_ZN6MS58379calculateEv+0x71e>
    2db6:	47 c1       	rjmp	.+654    	; 0x3046 <_ZN6MS58379calculateEv+0x9ba>
		}
		} else {
		if((TEMP/100)<20){         //Low temp
			Ti = (3*int64_t(dT)*int64_t(dT))/(8589934592LL);
    2db8:	29 81       	ldd	r18, Y+1	; 0x01
    2dba:	3a 81       	ldd	r19, Y+2	; 0x02
    2dbc:	4b 81       	ldd	r20, Y+3	; 0x03
    2dbe:	5c 81       	ldd	r21, Y+4	; 0x04
    2dc0:	6d 81       	ldd	r22, Y+5	; 0x05
    2dc2:	76 2f       	mov	r23, r22
    2dc4:	86 2f       	mov	r24, r22
    2dc6:	96 2f       	mov	r25, r22
    2dc8:	01 e0       	ldi	r16, 0x01	; 1
    2dca:	0e 94 de 29 	call	0x53bc	; 0x53bc <__ashldi3>
    2dce:	a9 80       	ldd	r10, Y+1	; 0x01
    2dd0:	ba 80       	ldd	r11, Y+2	; 0x02
    2dd2:	cb 80       	ldd	r12, Y+3	; 0x03
    2dd4:	dc 80       	ldd	r13, Y+4	; 0x04
    2dd6:	ed 80       	ldd	r14, Y+5	; 0x05
    2dd8:	fe 2c       	mov	r15, r14
    2dda:	0e 2d       	mov	r16, r14
    2ddc:	1e 2d       	mov	r17, r14
    2dde:	0e 94 15 2a 	call	0x542a	; 0x542a <__adddi3>
    2de2:	e0 2e       	mov	r14, r16
    2de4:	0f 2d       	mov	r16, r15
    2de6:	0e 94 8d 29 	call	0x531a	; 0x531a <__muldi3>
    2dea:	12 2f       	mov	r17, r18
    2dec:	3d 8f       	std	Y+29, r19	; 0x1d
    2dee:	4d 83       	std	Y+5, r20	; 0x05
    2df0:	b5 2f       	mov	r27, r21
    2df2:	f6 2f       	mov	r31, r22
    2df4:	e7 2f       	mov	r30, r23
    2df6:	89 83       	std	Y+1, r24	; 0x01
    2df8:	89 2e       	mov	r8, r25
    2dfa:	a0 e0       	ldi	r26, 0x00	; 0
    2dfc:	0e 94 33 2a 	call	0x5466	; 0x5466 <__cmpdi2_s8>
    2e00:	84 f4       	brge	.+32     	; 0x2e22 <_ZN6MS58379calculateEv+0x796>
    2e02:	21 50       	subi	r18, 0x01	; 1
    2e04:	31 09       	sbc	r19, r1
    2e06:	41 09       	sbc	r20, r1
    2e08:	51 09       	sbc	r21, r1
    2e0a:	6e 4f       	sbci	r22, 0xFE	; 254
    2e0c:	7f 4f       	sbci	r23, 0xFF	; 255
    2e0e:	8f 4f       	sbci	r24, 0xFF	; 255
    2e10:	9f 4f       	sbci	r25, 0xFF	; 255
    2e12:	12 2f       	mov	r17, r18
    2e14:	3d 8f       	std	Y+29, r19	; 0x1d
    2e16:	4d 83       	std	Y+5, r20	; 0x05
    2e18:	b5 2f       	mov	r27, r21
    2e1a:	f6 2f       	mov	r31, r22
    2e1c:	e7 2f       	mov	r30, r23
    2e1e:	89 83       	std	Y+1, r24	; 0x01
    2e20:	89 2e       	mov	r8, r25
    2e22:	21 2f       	mov	r18, r17
    2e24:	3d 8d       	ldd	r19, Y+29	; 0x1d
    2e26:	4d 81       	ldd	r20, Y+5	; 0x05
    2e28:	5b 2f       	mov	r21, r27
    2e2a:	6f 2f       	mov	r22, r31
    2e2c:	7e 2f       	mov	r23, r30
    2e2e:	89 81       	ldd	r24, Y+1	; 0x01
    2e30:	98 2d       	mov	r25, r8
    2e32:	01 e2       	ldi	r16, 0x21	; 33
    2e34:	0e 94 f7 29 	call	0x53ee	; 0x53ee <__ashrdi3>
    2e38:	2d 83       	std	Y+5, r18	; 0x05
    2e3a:	3e 83       	std	Y+6, r19	; 0x06
    2e3c:	4f 83       	std	Y+7, r20	; 0x07
    2e3e:	58 87       	std	Y+8, r21	; 0x08
			OFFi = (3*(TEMP-2000)*(TEMP-2000))/2;
    2e40:	53 01       	movw	r10, r6
    2e42:	42 01       	movw	r8, r4
    2e44:	50 ed       	ldi	r21, 0xD0	; 208
    2e46:	85 1a       	sub	r8, r21
    2e48:	57 e0       	ldi	r21, 0x07	; 7
    2e4a:	95 0a       	sbc	r9, r21
    2e4c:	a1 08       	sbc	r10, r1
    2e4e:	b1 08       	sbc	r11, r1
    2e50:	d5 01       	movw	r26, r10
    2e52:	c4 01       	movw	r24, r8
    2e54:	88 0f       	add	r24, r24
    2e56:	99 1f       	adc	r25, r25
    2e58:	aa 1f       	adc	r26, r26
    2e5a:	bb 1f       	adc	r27, r27
    2e5c:	9c 01       	movw	r18, r24
    2e5e:	ad 01       	movw	r20, r26
    2e60:	28 0d       	add	r18, r8
    2e62:	39 1d       	adc	r19, r9
    2e64:	4a 1d       	adc	r20, r10
    2e66:	5b 1d       	adc	r21, r11
    2e68:	c5 01       	movw	r24, r10
    2e6a:	b4 01       	movw	r22, r8
    2e6c:	0e 94 4a 29 	call	0x5294	; 0x5294 <__mulsi3>
    2e70:	8b 01       	movw	r16, r22
    2e72:	9c 01       	movw	r18, r24
    2e74:	99 23       	and	r25, r25
    2e76:	24 f4       	brge	.+8      	; 0x2e80 <_ZN6MS58379calculateEv+0x7f4>
    2e78:	0f 5f       	subi	r16, 0xFF	; 255
    2e7a:	1f 4f       	sbci	r17, 0xFF	; 255
    2e7c:	2f 4f       	sbci	r18, 0xFF	; 255
    2e7e:	3f 4f       	sbci	r19, 0xFF	; 255
    2e80:	c9 01       	movw	r24, r18
    2e82:	b8 01       	movw	r22, r16
    2e84:	95 95       	asr	r25
    2e86:	87 95       	ror	r24
    2e88:	77 95       	ror	r23
    2e8a:	67 95       	ror	r22
    2e8c:	69 83       	std	Y+1, r22	; 0x01
    2e8e:	7a 83       	std	Y+2, r23	; 0x02
    2e90:	8b 83       	std	Y+3, r24	; 0x03
    2e92:	9c 83       	std	Y+4, r25	; 0x04
			SENSi = (5*(TEMP-2000)*(TEMP-2000))/8;
    2e94:	d5 01       	movw	r26, r10
    2e96:	c4 01       	movw	r24, r8
    2e98:	88 0f       	add	r24, r24
    2e9a:	99 1f       	adc	r25, r25
    2e9c:	aa 1f       	adc	r26, r26
    2e9e:	bb 1f       	adc	r27, r27
    2ea0:	88 0f       	add	r24, r24
    2ea2:	99 1f       	adc	r25, r25
    2ea4:	aa 1f       	adc	r26, r26
    2ea6:	bb 1f       	adc	r27, r27
    2ea8:	9c 01       	movw	r18, r24
    2eaa:	ad 01       	movw	r20, r26
    2eac:	28 0d       	add	r18, r8
    2eae:	39 1d       	adc	r19, r9
    2eb0:	4a 1d       	adc	r20, r10
    2eb2:	5b 1d       	adc	r21, r11
    2eb4:	c5 01       	movw	r24, r10
    2eb6:	b4 01       	movw	r22, r8
    2eb8:	0e 94 4a 29 	call	0x5294	; 0x5294 <__mulsi3>
    2ebc:	8b 01       	movw	r16, r22
    2ebe:	9c 01       	movw	r18, r24
    2ec0:	99 23       	and	r25, r25
    2ec2:	24 f4       	brge	.+8      	; 0x2ecc <_ZN6MS58379calculateEv+0x840>
    2ec4:	09 5f       	subi	r16, 0xF9	; 249
    2ec6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ec8:	2f 4f       	sbci	r18, 0xFF	; 255
    2eca:	3f 4f       	sbci	r19, 0xFF	; 255
    2ecc:	78 01       	movw	r14, r16
    2ece:	89 01       	movw	r16, r18
    2ed0:	68 94       	set
    2ed2:	12 f8       	bld	r1, 2
    2ed4:	15 95       	asr	r17
    2ed6:	07 95       	ror	r16
    2ed8:	f7 94       	ror	r15
    2eda:	e7 94       	ror	r14
    2edc:	16 94       	lsr	r1
    2ede:	d1 f7       	brne	.-12     	; 0x2ed4 <_ZN6MS58379calculateEv+0x848>
			if((TEMP/100)<-15){    //Very low temp
    2ee0:	71 ec       	ldi	r23, 0xC1	; 193
    2ee2:	47 16       	cp	r4, r23
    2ee4:	79 ef       	ldi	r23, 0xF9	; 249
    2ee6:	57 06       	cpc	r5, r23
    2ee8:	7f ef       	ldi	r23, 0xFF	; 255
    2eea:	67 06       	cpc	r6, r23
    2eec:	77 06       	cpc	r7, r23
    2eee:	0c f0       	brlt	.+2      	; 0x2ef2 <_ZN6MS58379calculateEv+0x866>
    2ef0:	7f c1       	rjmp	.+766    	; 0x31f0 <_ZN6MS58379calculateEv+0xb64>
				OFFi = OFFi+7*(TEMP+1500l)*(TEMP+1500l);
    2ef2:	53 01       	movw	r10, r6
    2ef4:	42 01       	movw	r8, r4
    2ef6:	8c ed       	ldi	r24, 0xDC	; 220
    2ef8:	88 0e       	add	r8, r24
    2efa:	85 e0       	ldi	r24, 0x05	; 5
    2efc:	98 1e       	adc	r9, r24
    2efe:	a1 1c       	adc	r10, r1
    2f00:	b1 1c       	adc	r11, r1
    2f02:	d5 01       	movw	r26, r10
    2f04:	c4 01       	movw	r24, r8
    2f06:	88 0f       	add	r24, r24
    2f08:	99 1f       	adc	r25, r25
    2f0a:	aa 1f       	adc	r26, r26
    2f0c:	bb 1f       	adc	r27, r27
    2f0e:	88 0f       	add	r24, r24
    2f10:	99 1f       	adc	r25, r25
    2f12:	aa 1f       	adc	r26, r26
    2f14:	bb 1f       	adc	r27, r27
    2f16:	88 0f       	add	r24, r24
    2f18:	99 1f       	adc	r25, r25
    2f1a:	aa 1f       	adc	r26, r26
    2f1c:	bb 1f       	adc	r27, r27
    2f1e:	9c 01       	movw	r18, r24
    2f20:	ad 01       	movw	r20, r26
    2f22:	28 19       	sub	r18, r8
    2f24:	39 09       	sbc	r19, r9
    2f26:	4a 09       	sbc	r20, r10
    2f28:	5b 09       	sbc	r21, r11
    2f2a:	c5 01       	movw	r24, r10
    2f2c:	b4 01       	movw	r22, r8
    2f2e:	0e 94 4a 29 	call	0x5294	; 0x5294 <__mulsi3>
    2f32:	29 81       	ldd	r18, Y+1	; 0x01
    2f34:	3a 81       	ldd	r19, Y+2	; 0x02
    2f36:	4b 81       	ldd	r20, Y+3	; 0x03
    2f38:	5c 81       	ldd	r21, Y+4	; 0x04
    2f3a:	26 0f       	add	r18, r22
    2f3c:	37 1f       	adc	r19, r23
    2f3e:	48 1f       	adc	r20, r24
    2f40:	59 1f       	adc	r21, r25
    2f42:	29 83       	std	Y+1, r18	; 0x01
    2f44:	3a 83       	std	Y+2, r19	; 0x02
    2f46:	4b 83       	std	Y+3, r20	; 0x03
    2f48:	5c 83       	std	Y+4, r21	; 0x04
				SENSi = SENSi+4*(TEMP+1500l)*(TEMP+1500l);
    2f4a:	a5 01       	movw	r20, r10
    2f4c:	94 01       	movw	r18, r8
    2f4e:	22 0f       	add	r18, r18
    2f50:	33 1f       	adc	r19, r19
    2f52:	44 1f       	adc	r20, r20
    2f54:	55 1f       	adc	r21, r21
    2f56:	22 0f       	add	r18, r18
    2f58:	33 1f       	adc	r19, r19
    2f5a:	44 1f       	adc	r20, r20
    2f5c:	55 1f       	adc	r21, r21
    2f5e:	c5 01       	movw	r24, r10
    2f60:	b4 01       	movw	r22, r8
    2f62:	0e 94 4a 29 	call	0x5294	; 0x5294 <__mulsi3>
    2f66:	e6 0e       	add	r14, r22
    2f68:	f7 1e       	adc	r15, r23
    2f6a:	08 1f       	adc	r16, r24
    2f6c:	19 1f       	adc	r17, r25
    2f6e:	40 c1       	rjmp	.+640    	; 0x31f0 <_ZN6MS58379calculateEv+0xb64>
			}
		}
		else if((TEMP/100)>=20){    //High temp
			Ti = 2*(dT*dT)/(137438953472LL);
    2f70:	29 81       	ldd	r18, Y+1	; 0x01
    2f72:	3a 81       	ldd	r19, Y+2	; 0x02
    2f74:	4b 81       	ldd	r20, Y+3	; 0x03
    2f76:	5c 81       	ldd	r21, Y+4	; 0x04
    2f78:	ca 01       	movw	r24, r20
    2f7a:	b9 01       	movw	r22, r18
    2f7c:	0e 94 4a 29 	call	0x5294	; 0x5294 <__mulsi3>
    2f80:	4b 01       	movw	r8, r22
    2f82:	5c 01       	movw	r10, r24
    2f84:	88 0c       	add	r8, r8
    2f86:	99 1c       	adc	r9, r9
    2f88:	aa 1c       	adc	r10, r10
    2f8a:	bb 1c       	adc	r11, r11
    2f8c:	75 01       	movw	r14, r10
    2f8e:	64 01       	movw	r12, r8
    2f90:	ff 0c       	add	r15, r15
    2f92:	cc 08       	sbc	r12, r12
    2f94:	dc 2c       	mov	r13, r12
    2f96:	76 01       	movw	r14, r12
    2f98:	18 2d       	mov	r17, r8
    2f9a:	9d 8e       	std	Y+29, r9	; 0x1d
    2f9c:	ad 82       	std	Y+5, r10	; 0x05
    2f9e:	bb 2d       	mov	r27, r11
    2fa0:	fc 2d       	mov	r31, r12
    2fa2:	ec 2d       	mov	r30, r12
    2fa4:	c9 82       	std	Y+1, r12	; 0x01
    2fa6:	0c 2d       	mov	r16, r12
    2fa8:	28 2d       	mov	r18, r8
    2faa:	39 2d       	mov	r19, r9
    2fac:	4a 2d       	mov	r20, r10
    2fae:	5b 2d       	mov	r21, r11
    2fb0:	6c 2d       	mov	r22, r12
    2fb2:	7c 2d       	mov	r23, r12
    2fb4:	8c 2d       	mov	r24, r12
    2fb6:	9c 2d       	mov	r25, r12
    2fb8:	a0 e0       	ldi	r26, 0x00	; 0
    2fba:	0e 94 33 2a 	call	0x5466	; 0x5466 <__cmpdi2_s8>
    2fbe:	84 f4       	brge	.+32     	; 0x2fe0 <_ZN6MS58379calculateEv+0x954>
    2fc0:	21 50       	subi	r18, 0x01	; 1
    2fc2:	31 09       	sbc	r19, r1
    2fc4:	41 09       	sbc	r20, r1
    2fc6:	51 09       	sbc	r21, r1
    2fc8:	60 4e       	sbci	r22, 0xE0	; 224
    2fca:	7f 4f       	sbci	r23, 0xFF	; 255
    2fcc:	8f 4f       	sbci	r24, 0xFF	; 255
    2fce:	9f 4f       	sbci	r25, 0xFF	; 255
    2fd0:	12 2f       	mov	r17, r18
    2fd2:	3d 8f       	std	Y+29, r19	; 0x1d
    2fd4:	4d 83       	std	Y+5, r20	; 0x05
    2fd6:	b5 2f       	mov	r27, r21
    2fd8:	f6 2f       	mov	r31, r22
    2fda:	e7 2f       	mov	r30, r23
    2fdc:	89 83       	std	Y+1, r24	; 0x01
    2fde:	09 2f       	mov	r16, r25
    2fe0:	21 2f       	mov	r18, r17
    2fe2:	3d 8d       	ldd	r19, Y+29	; 0x1d
    2fe4:	4d 81       	ldd	r20, Y+5	; 0x05
    2fe6:	5b 2f       	mov	r21, r27
    2fe8:	6f 2f       	mov	r22, r31
    2fea:	7e 2f       	mov	r23, r30
    2fec:	89 81       	ldd	r24, Y+1	; 0x01
    2fee:	90 2f       	mov	r25, r16
    2ff0:	05 e2       	ldi	r16, 0x25	; 37
    2ff2:	0e 94 f7 29 	call	0x53ee	; 0x53ee <__ashrdi3>
    2ff6:	2d 83       	std	Y+5, r18	; 0x05
    2ff8:	3e 83       	std	Y+6, r19	; 0x06
    2ffa:	4f 83       	std	Y+7, r20	; 0x07
    2ffc:	58 87       	std	Y+8, r21	; 0x08
			OFFi = (1*(TEMP-2000)*(TEMP-2000))/16;
    2ffe:	c3 01       	movw	r24, r6
    3000:	b2 01       	movw	r22, r4
    3002:	60 5d       	subi	r22, 0xD0	; 208
    3004:	77 40       	sbci	r23, 0x07	; 7
    3006:	81 09       	sbc	r24, r1
    3008:	91 09       	sbc	r25, r1
    300a:	9b 01       	movw	r18, r22
    300c:	ac 01       	movw	r20, r24
    300e:	0e 94 4a 29 	call	0x5294	; 0x5294 <__mulsi3>
    3012:	8b 01       	movw	r16, r22
    3014:	9c 01       	movw	r18, r24
    3016:	99 23       	and	r25, r25
    3018:	24 f4       	brge	.+8      	; 0x3022 <_ZN6MS58379calculateEv+0x996>
    301a:	01 5f       	subi	r16, 0xF1	; 241
    301c:	1f 4f       	sbci	r17, 0xFF	; 255
    301e:	2f 4f       	sbci	r18, 0xFF	; 255
    3020:	3f 4f       	sbci	r19, 0xFF	; 255
    3022:	48 01       	movw	r8, r16
    3024:	59 01       	movw	r10, r18
    3026:	68 94       	set
    3028:	13 f8       	bld	r1, 3
    302a:	b5 94       	asr	r11
    302c:	a7 94       	ror	r10
    302e:	97 94       	ror	r9
    3030:	87 94       	ror	r8
    3032:	16 94       	lsr	r1
    3034:	d1 f7       	brne	.-12     	; 0x302a <_ZN6MS58379calculateEv+0x99e>
    3036:	89 82       	std	Y+1, r8	; 0x01
    3038:	9a 82       	std	Y+2, r9	; 0x02
    303a:	ab 82       	std	Y+3, r10	; 0x03
    303c:	bc 82       	std	Y+4, r11	; 0x04
			SENSi = 0;
    303e:	e1 2c       	mov	r14, r1
    3040:	f1 2c       	mov	r15, r1
    3042:	87 01       	movw	r16, r14
    3044:	d5 c0       	rjmp	.+426    	; 0x31f0 <_ZN6MS58379calculateEv+0xb64>
	}
	
	OFF2 = OFF-OFFi;           //Calculate pressure and temp second order
	SENS2 = SENS-SENSi;
	
	TEMP = (TEMP-Ti);
    3046:	d3 01       	movw	r26, r6
    3048:	c2 01       	movw	r24, r4
    304a:	88 19       	sub	r24, r8
    304c:	99 09       	sbc	r25, r9
    304e:	aa 09       	sbc	r26, r10
    3050:	bb 09       	sbc	r27, r11
    3052:	f1 01       	movw	r30, r2
    3054:	80 8f       	std	Z+24, r24	; 0x18
    3056:	91 8f       	std	Z+25, r25	; 0x19
    3058:	a2 8f       	std	Z+26, r26	; 0x1a
    305a:	b3 8f       	std	Z+27, r27	; 0x1b
	
	if ( _model == MS5837_02BA ) {
		P = (((D1*SENS2)/2097152l-OFF2)/32768l);
    305c:	80 89       	ldd	r24, Z+16	; 0x10
    305e:	91 89       	ldd	r25, Z+17	; 0x11
    3060:	a2 89       	ldd	r26, Z+18	; 0x12
    3062:	b3 89       	ldd	r27, Z+19	; 0x13
    3064:	3c 01       	movw	r6, r24
    3066:	4d 01       	movw	r8, r26
    3068:	a1 2c       	mov	r10, r1
    306a:	b1 2c       	mov	r11, r1
    306c:	65 01       	movw	r12, r10
    306e:	8d 83       	std	Y+5, r24	; 0x05
    3070:	7e 82       	std	Y+6, r7	; 0x06
    3072:	8f 82       	std	Y+7, r8	; 0x07
    3074:	98 86       	std	Y+8, r9	; 0x08
    3076:	a9 86       	std	Y+9, r10	; 0x09
    3078:	ba 86       	std	Y+10, r11	; 0x0a
    307a:	cb 86       	std	Y+11, r12	; 0x0b
    307c:	dc 86       	std	Y+12, r13	; 0x0c
    307e:	27 01       	movw	r4, r14
    3080:	38 01       	movw	r6, r16
    3082:	77 0c       	add	r7, r7
    3084:	44 08       	sbc	r4, r4
    3086:	54 2c       	mov	r5, r4
    3088:	32 01       	movw	r6, r4
    308a:	2d 85       	ldd	r18, Y+13	; 0x0d
    308c:	3e 85       	ldd	r19, Y+14	; 0x0e
    308e:	4f 85       	ldd	r20, Y+15	; 0x0f
    3090:	58 89       	ldd	r21, Y+16	; 0x10
    3092:	69 89       	ldd	r22, Y+17	; 0x11
    3094:	7a 89       	ldd	r23, Y+18	; 0x12
    3096:	8b 89       	ldd	r24, Y+19	; 0x13
    3098:	9c 89       	ldd	r25, Y+20	; 0x14
    309a:	ae 2c       	mov	r10, r14
    309c:	bf 2c       	mov	r11, r15
    309e:	c0 2e       	mov	r12, r16
    30a0:	d1 2e       	mov	r13, r17
    30a2:	e4 2c       	mov	r14, r4
    30a4:	f4 2c       	mov	r15, r4
    30a6:	04 2d       	mov	r16, r4
    30a8:	14 2d       	mov	r17, r4
    30aa:	0e 94 2a 2a 	call	0x5454	; 0x5454 <__subdi3>
    30ae:	a2 2e       	mov	r10, r18
    30b0:	b3 2e       	mov	r11, r19
    30b2:	c4 2e       	mov	r12, r20
    30b4:	d5 2e       	mov	r13, r21
    30b6:	e6 2e       	mov	r14, r22
    30b8:	f7 2e       	mov	r15, r23
    30ba:	08 2f       	mov	r16, r24
    30bc:	19 2f       	mov	r17, r25
    30be:	2d 81       	ldd	r18, Y+5	; 0x05
    30c0:	3e 81       	ldd	r19, Y+6	; 0x06
    30c2:	48 2d       	mov	r20, r8
    30c4:	59 2d       	mov	r21, r9
    30c6:	60 e0       	ldi	r22, 0x00	; 0
    30c8:	70 e0       	ldi	r23, 0x00	; 0
    30ca:	80 e0       	ldi	r24, 0x00	; 0
    30cc:	90 e0       	ldi	r25, 0x00	; 0
    30ce:	0e 94 8d 29 	call	0x531a	; 0x531a <__muldi3>
    30d2:	12 2f       	mov	r17, r18
    30d4:	3d 87       	std	Y+13, r19	; 0x0d
    30d6:	4d 83       	std	Y+5, r20	; 0x05
    30d8:	b5 2f       	mov	r27, r21
    30da:	f6 2f       	mov	r31, r22
    30dc:	e7 2f       	mov	r30, r23
    30de:	78 2e       	mov	r7, r24
    30e0:	89 2e       	mov	r8, r25
    30e2:	a0 e0       	ldi	r26, 0x00	; 0
    30e4:	0e 94 33 2a 	call	0x5466	; 0x5466 <__cmpdi2_s8>
    30e8:	84 f4       	brge	.+32     	; 0x310a <_ZN6MS58379calculateEv+0xa7e>
    30ea:	21 50       	subi	r18, 0x01	; 1
    30ec:	31 09       	sbc	r19, r1
    30ee:	40 4e       	sbci	r20, 0xE0	; 224
    30f0:	5f 4f       	sbci	r21, 0xFF	; 255
    30f2:	6f 4f       	sbci	r22, 0xFF	; 255
    30f4:	7f 4f       	sbci	r23, 0xFF	; 255
    30f6:	8f 4f       	sbci	r24, 0xFF	; 255
    30f8:	9f 4f       	sbci	r25, 0xFF	; 255
    30fa:	12 2f       	mov	r17, r18
    30fc:	3d 87       	std	Y+13, r19	; 0x0d
    30fe:	4d 83       	std	Y+5, r20	; 0x05
    3100:	b5 2f       	mov	r27, r21
    3102:	f6 2f       	mov	r31, r22
    3104:	e7 2f       	mov	r30, r23
    3106:	78 2e       	mov	r7, r24
    3108:	89 2e       	mov	r8, r25
    310a:	21 2f       	mov	r18, r17
    310c:	3d 85       	ldd	r19, Y+13	; 0x0d
    310e:	4d 81       	ldd	r20, Y+5	; 0x05
    3110:	5b 2f       	mov	r21, r27
    3112:	6f 2f       	mov	r22, r31
    3114:	7e 2f       	mov	r23, r30
    3116:	87 2d       	mov	r24, r7
    3118:	98 2d       	mov	r25, r8
    311a:	05 e1       	ldi	r16, 0x15	; 21
    311c:	0e 94 f7 29 	call	0x53ee	; 0x53ee <__ashrdi3>
    3120:	82 2e       	mov	r8, r18
    3122:	93 2e       	mov	r9, r19
    3124:	4d 87       	std	Y+13, r20	; 0x0d
    3126:	5d 83       	std	Y+5, r21	; 0x05
    3128:	b6 2f       	mov	r27, r22
    312a:	a7 2f       	mov	r26, r23
    312c:	f8 2f       	mov	r31, r24
    312e:	e9 2f       	mov	r30, r25
    3130:	49 80       	ldd	r4, Y+1	; 0x01
    3132:	5a 80       	ldd	r5, Y+2	; 0x02
    3134:	6b 80       	ldd	r6, Y+3	; 0x03
    3136:	7c 80       	ldd	r7, Y+4	; 0x04
    3138:	77 0c       	add	r7, r7
    313a:	44 08       	sbc	r4, r4
    313c:	54 2c       	mov	r5, r4
    313e:	32 01       	movw	r6, r4
    3140:	2d 89       	ldd	r18, Y+21	; 0x15
    3142:	3e 89       	ldd	r19, Y+22	; 0x16
    3144:	4f 89       	ldd	r20, Y+23	; 0x17
    3146:	58 8d       	ldd	r21, Y+24	; 0x18
    3148:	69 8d       	ldd	r22, Y+25	; 0x19
    314a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    314c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    314e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3150:	a9 80       	ldd	r10, Y+1	; 0x01
    3152:	ba 80       	ldd	r11, Y+2	; 0x02
    3154:	cb 80       	ldd	r12, Y+3	; 0x03
    3156:	dc 80       	ldd	r13, Y+4	; 0x04
    3158:	e4 2c       	mov	r14, r4
    315a:	f4 2c       	mov	r15, r4
    315c:	04 2d       	mov	r16, r4
    315e:	14 2d       	mov	r17, r4
    3160:	0e 94 2a 2a 	call	0x5454	; 0x5454 <__subdi3>
    3164:	a2 2e       	mov	r10, r18
    3166:	b3 2e       	mov	r11, r19
    3168:	c4 2e       	mov	r12, r20
    316a:	d5 2e       	mov	r13, r21
    316c:	e6 2e       	mov	r14, r22
    316e:	f7 2e       	mov	r15, r23
    3170:	08 2f       	mov	r16, r24
    3172:	19 2f       	mov	r17, r25
    3174:	28 2d       	mov	r18, r8
    3176:	39 2d       	mov	r19, r9
    3178:	4d 85       	ldd	r20, Y+13	; 0x0d
    317a:	5d 81       	ldd	r21, Y+5	; 0x05
    317c:	6b 2f       	mov	r22, r27
    317e:	7a 2f       	mov	r23, r26
    3180:	8f 2f       	mov	r24, r31
    3182:	9e 2f       	mov	r25, r30
    3184:	0e 94 2a 2a 	call	0x5454	; 0x5454 <__subdi3>
    3188:	12 2f       	mov	r17, r18
    318a:	3d 83       	std	Y+5, r19	; 0x05
    318c:	49 83       	std	Y+1, r20	; 0x01
    318e:	b5 2f       	mov	r27, r21
    3190:	f6 2f       	mov	r31, r22
    3192:	e7 2f       	mov	r30, r23
    3194:	78 2e       	mov	r7, r24
    3196:	89 2e       	mov	r8, r25
    3198:	a0 e0       	ldi	r26, 0x00	; 0
    319a:	0e 94 33 2a 	call	0x5466	; 0x5466 <__cmpdi2_s8>
    319e:	84 f4       	brge	.+32     	; 0x31c0 <_ZN6MS58379calculateEv+0xb34>
    31a0:	21 50       	subi	r18, 0x01	; 1
    31a2:	30 48       	sbci	r19, 0x80	; 128
    31a4:	4f 4f       	sbci	r20, 0xFF	; 255
    31a6:	5f 4f       	sbci	r21, 0xFF	; 255
    31a8:	6f 4f       	sbci	r22, 0xFF	; 255
    31aa:	7f 4f       	sbci	r23, 0xFF	; 255
    31ac:	8f 4f       	sbci	r24, 0xFF	; 255
    31ae:	9f 4f       	sbci	r25, 0xFF	; 255
    31b0:	12 2f       	mov	r17, r18
    31b2:	3d 83       	std	Y+5, r19	; 0x05
    31b4:	49 83       	std	Y+1, r20	; 0x01
    31b6:	b5 2f       	mov	r27, r21
    31b8:	f6 2f       	mov	r31, r22
    31ba:	e7 2f       	mov	r30, r23
    31bc:	78 2e       	mov	r7, r24
    31be:	89 2e       	mov	r8, r25
    31c0:	21 2f       	mov	r18, r17
    31c2:	3d 81       	ldd	r19, Y+5	; 0x05
    31c4:	49 81       	ldd	r20, Y+1	; 0x01
    31c6:	5b 2f       	mov	r21, r27
    31c8:	6f 2f       	mov	r22, r31
    31ca:	7e 2f       	mov	r23, r30
    31cc:	87 2d       	mov	r24, r7
    31ce:	98 2d       	mov	r25, r8
    31d0:	0f e0       	ldi	r16, 0x0F	; 15
    31d2:	0e 94 f7 29 	call	0x53ee	; 0x53ee <__ashrdi3>
    31d6:	d1 01       	movw	r26, r2
    31d8:	5c 96       	adiw	r26, 0x1c	; 28
    31da:	2c 93       	st	X, r18
    31dc:	5c 97       	sbiw	r26, 0x1c	; 28
    31de:	5d 96       	adiw	r26, 0x1d	; 29
    31e0:	3c 93       	st	X, r19
    31e2:	5d 97       	sbiw	r26, 0x1d	; 29
    31e4:	5e 96       	adiw	r26, 0x1e	; 30
    31e6:	4c 93       	st	X, r20
    31e8:	5e 97       	sbiw	r26, 0x1e	; 30
    31ea:	5f 96       	adiw	r26, 0x1f	; 31
    31ec:	5c 93       	st	X, r21
    31ee:	da c0       	rjmp	.+436    	; 0x33a4 <_ZN6MS58379calculateEv+0xd18>
	}
	
	OFF2 = OFF-OFFi;           //Calculate pressure and temp second order
	SENS2 = SENS-SENSi;
	
	TEMP = (TEMP-Ti);
    31f0:	8d 80       	ldd	r8, Y+5	; 0x05
    31f2:	9e 80       	ldd	r9, Y+6	; 0x06
    31f4:	af 80       	ldd	r10, Y+7	; 0x07
    31f6:	b8 84       	ldd	r11, Y+8	; 0x08
    31f8:	48 18       	sub	r4, r8
    31fa:	59 08       	sbc	r5, r9
    31fc:	6a 08       	sbc	r6, r10
    31fe:	7b 08       	sbc	r7, r11
    3200:	d1 01       	movw	r26, r2
    3202:	58 96       	adiw	r26, 0x18	; 24
    3204:	4d 92       	st	X+, r4
    3206:	5d 92       	st	X+, r5
    3208:	6d 92       	st	X+, r6
    320a:	7c 92       	st	X, r7
    320c:	5b 97       	sbiw	r26, 0x1b	; 27
	
	if ( _model == MS5837_02BA ) {
		P = (((D1*SENS2)/2097152l-OFF2)/32768l);
	} else {
		P = (((D1*SENS2)/2097152l-OFF2)/8192l);
    320e:	50 96       	adiw	r26, 0x10	; 16
    3210:	8d 91       	ld	r24, X+
    3212:	9d 91       	ld	r25, X+
    3214:	0d 90       	ld	r0, X+
    3216:	bc 91       	ld	r27, X
    3218:	a0 2d       	mov	r26, r0
    321a:	3c 01       	movw	r6, r24
    321c:	4d 01       	movw	r8, r26
    321e:	a1 2c       	mov	r10, r1
    3220:	b1 2c       	mov	r11, r1
    3222:	65 01       	movw	r12, r10
    3224:	8d 83       	std	Y+5, r24	; 0x05
    3226:	7e 82       	std	Y+6, r7	; 0x06
    3228:	8f 82       	std	Y+7, r8	; 0x07
    322a:	98 86       	std	Y+8, r9	; 0x08
    322c:	a9 86       	std	Y+9, r10	; 0x09
    322e:	ba 86       	std	Y+10, r11	; 0x0a
    3230:	cb 86       	std	Y+11, r12	; 0x0b
    3232:	dc 86       	std	Y+12, r13	; 0x0c
    3234:	27 01       	movw	r4, r14
    3236:	38 01       	movw	r6, r16
    3238:	77 0c       	add	r7, r7
    323a:	44 08       	sbc	r4, r4
    323c:	54 2c       	mov	r5, r4
    323e:	32 01       	movw	r6, r4
    3240:	2d 89       	ldd	r18, Y+21	; 0x15
    3242:	3e 89       	ldd	r19, Y+22	; 0x16
    3244:	4f 89       	ldd	r20, Y+23	; 0x17
    3246:	58 8d       	ldd	r21, Y+24	; 0x18
    3248:	69 8d       	ldd	r22, Y+25	; 0x19
    324a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    324c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    324e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3250:	ae 2c       	mov	r10, r14
    3252:	bf 2c       	mov	r11, r15
    3254:	c0 2e       	mov	r12, r16
    3256:	d1 2e       	mov	r13, r17
    3258:	e4 2c       	mov	r14, r4
    325a:	f4 2c       	mov	r15, r4
    325c:	04 2d       	mov	r16, r4
    325e:	14 2d       	mov	r17, r4
    3260:	0e 94 2a 2a 	call	0x5454	; 0x5454 <__subdi3>
    3264:	a2 2e       	mov	r10, r18
    3266:	b3 2e       	mov	r11, r19
    3268:	c4 2e       	mov	r12, r20
    326a:	d5 2e       	mov	r13, r21
    326c:	e6 2e       	mov	r14, r22
    326e:	f7 2e       	mov	r15, r23
    3270:	08 2f       	mov	r16, r24
    3272:	19 2f       	mov	r17, r25
    3274:	2d 81       	ldd	r18, Y+5	; 0x05
    3276:	3e 81       	ldd	r19, Y+6	; 0x06
    3278:	48 2d       	mov	r20, r8
    327a:	59 2d       	mov	r21, r9
    327c:	60 e0       	ldi	r22, 0x00	; 0
    327e:	70 e0       	ldi	r23, 0x00	; 0
    3280:	80 e0       	ldi	r24, 0x00	; 0
    3282:	90 e0       	ldi	r25, 0x00	; 0
    3284:	0e 94 8d 29 	call	0x531a	; 0x531a <__muldi3>
    3288:	12 2f       	mov	r17, r18
    328a:	3d 8b       	std	Y+21, r19	; 0x15
    328c:	4d 83       	std	Y+5, r20	; 0x05
    328e:	b5 2f       	mov	r27, r21
    3290:	f6 2f       	mov	r31, r22
    3292:	e7 2f       	mov	r30, r23
    3294:	58 2e       	mov	r5, r24
    3296:	69 2e       	mov	r6, r25
    3298:	a0 e0       	ldi	r26, 0x00	; 0
    329a:	0e 94 33 2a 	call	0x5466	; 0x5466 <__cmpdi2_s8>
    329e:	84 f4       	brge	.+32     	; 0x32c0 <_ZN6MS58379calculateEv+0xc34>
    32a0:	21 50       	subi	r18, 0x01	; 1
    32a2:	31 09       	sbc	r19, r1
    32a4:	40 4e       	sbci	r20, 0xE0	; 224
    32a6:	5f 4f       	sbci	r21, 0xFF	; 255
    32a8:	6f 4f       	sbci	r22, 0xFF	; 255
    32aa:	7f 4f       	sbci	r23, 0xFF	; 255
    32ac:	8f 4f       	sbci	r24, 0xFF	; 255
    32ae:	9f 4f       	sbci	r25, 0xFF	; 255
    32b0:	12 2f       	mov	r17, r18
    32b2:	3d 8b       	std	Y+21, r19	; 0x15
    32b4:	4d 83       	std	Y+5, r20	; 0x05
    32b6:	b5 2f       	mov	r27, r21
    32b8:	f6 2f       	mov	r31, r22
    32ba:	e7 2f       	mov	r30, r23
    32bc:	58 2e       	mov	r5, r24
    32be:	69 2e       	mov	r6, r25
    32c0:	21 2f       	mov	r18, r17
    32c2:	3d 89       	ldd	r19, Y+21	; 0x15
    32c4:	4d 81       	ldd	r20, Y+5	; 0x05
    32c6:	5b 2f       	mov	r21, r27
    32c8:	6f 2f       	mov	r22, r31
    32ca:	7e 2f       	mov	r23, r30
    32cc:	85 2d       	mov	r24, r5
    32ce:	96 2d       	mov	r25, r6
    32d0:	05 e1       	ldi	r16, 0x15	; 21
    32d2:	0e 94 f7 29 	call	0x53ee	; 0x53ee <__ashrdi3>
    32d6:	82 2e       	mov	r8, r18
    32d8:	93 2e       	mov	r9, r19
    32da:	4d 8b       	std	Y+21, r20	; 0x15
    32dc:	5d 83       	std	Y+5, r21	; 0x05
    32de:	b6 2f       	mov	r27, r22
    32e0:	a7 2f       	mov	r26, r23
    32e2:	f8 2f       	mov	r31, r24
    32e4:	e9 2f       	mov	r30, r25
    32e6:	49 80       	ldd	r4, Y+1	; 0x01
    32e8:	5a 80       	ldd	r5, Y+2	; 0x02
    32ea:	6b 80       	ldd	r6, Y+3	; 0x03
    32ec:	7c 80       	ldd	r7, Y+4	; 0x04
    32ee:	77 0c       	add	r7, r7
    32f0:	44 08       	sbc	r4, r4
    32f2:	54 2c       	mov	r5, r4
    32f4:	32 01       	movw	r6, r4
    32f6:	2d 85       	ldd	r18, Y+13	; 0x0d
    32f8:	3e 85       	ldd	r19, Y+14	; 0x0e
    32fa:	4f 85       	ldd	r20, Y+15	; 0x0f
    32fc:	58 89       	ldd	r21, Y+16	; 0x10
    32fe:	69 89       	ldd	r22, Y+17	; 0x11
    3300:	7a 89       	ldd	r23, Y+18	; 0x12
    3302:	8b 89       	ldd	r24, Y+19	; 0x13
    3304:	9c 89       	ldd	r25, Y+20	; 0x14
    3306:	a9 80       	ldd	r10, Y+1	; 0x01
    3308:	ba 80       	ldd	r11, Y+2	; 0x02
    330a:	cb 80       	ldd	r12, Y+3	; 0x03
    330c:	dc 80       	ldd	r13, Y+4	; 0x04
    330e:	e4 2c       	mov	r14, r4
    3310:	f4 2c       	mov	r15, r4
    3312:	04 2d       	mov	r16, r4
    3314:	14 2d       	mov	r17, r4
    3316:	0e 94 2a 2a 	call	0x5454	; 0x5454 <__subdi3>
    331a:	a2 2e       	mov	r10, r18
    331c:	b3 2e       	mov	r11, r19
    331e:	c4 2e       	mov	r12, r20
    3320:	d5 2e       	mov	r13, r21
    3322:	e6 2e       	mov	r14, r22
    3324:	f7 2e       	mov	r15, r23
    3326:	08 2f       	mov	r16, r24
    3328:	19 2f       	mov	r17, r25
    332a:	28 2d       	mov	r18, r8
    332c:	39 2d       	mov	r19, r9
    332e:	4d 89       	ldd	r20, Y+21	; 0x15
    3330:	5d 81       	ldd	r21, Y+5	; 0x05
    3332:	6b 2f       	mov	r22, r27
    3334:	7a 2f       	mov	r23, r26
    3336:	8f 2f       	mov	r24, r31
    3338:	9e 2f       	mov	r25, r30
    333a:	0e 94 2a 2a 	call	0x5454	; 0x5454 <__subdi3>
    333e:	92 2e       	mov	r9, r18
    3340:	a3 2e       	mov	r10, r19
    3342:	b4 2e       	mov	r11, r20
    3344:	c5 2e       	mov	r12, r21
    3346:	d6 2e       	mov	r13, r22
    3348:	e7 2e       	mov	r14, r23
    334a:	78 2e       	mov	r7, r24
    334c:	89 2e       	mov	r8, r25
    334e:	a0 e0       	ldi	r26, 0x00	; 0
    3350:	0e 94 33 2a 	call	0x5466	; 0x5466 <__cmpdi2_s8>
    3354:	84 f4       	brge	.+32     	; 0x3376 <_ZN6MS58379calculateEv+0xcea>
    3356:	21 50       	subi	r18, 0x01	; 1
    3358:	30 4e       	sbci	r19, 0xE0	; 224
    335a:	4f 4f       	sbci	r20, 0xFF	; 255
    335c:	5f 4f       	sbci	r21, 0xFF	; 255
    335e:	6f 4f       	sbci	r22, 0xFF	; 255
    3360:	7f 4f       	sbci	r23, 0xFF	; 255
    3362:	8f 4f       	sbci	r24, 0xFF	; 255
    3364:	9f 4f       	sbci	r25, 0xFF	; 255
    3366:	92 2e       	mov	r9, r18
    3368:	a3 2e       	mov	r10, r19
    336a:	b4 2e       	mov	r11, r20
    336c:	c5 2e       	mov	r12, r21
    336e:	d6 2e       	mov	r13, r22
    3370:	e7 2e       	mov	r14, r23
    3372:	78 2e       	mov	r7, r24
    3374:	89 2e       	mov	r8, r25
    3376:	29 2d       	mov	r18, r9
    3378:	3a 2d       	mov	r19, r10
    337a:	4b 2d       	mov	r20, r11
    337c:	5c 2d       	mov	r21, r12
    337e:	6d 2d       	mov	r22, r13
    3380:	7e 2d       	mov	r23, r14
    3382:	87 2d       	mov	r24, r7
    3384:	98 2d       	mov	r25, r8
    3386:	0d e0       	ldi	r16, 0x0D	; 13
    3388:	0e 94 f7 29 	call	0x53ee	; 0x53ee <__ashrdi3>
    338c:	d1 01       	movw	r26, r2
    338e:	5c 96       	adiw	r26, 0x1c	; 28
    3390:	2c 93       	st	X, r18
    3392:	5c 97       	sbiw	r26, 0x1c	; 28
    3394:	5d 96       	adiw	r26, 0x1d	; 29
    3396:	3c 93       	st	X, r19
    3398:	5d 97       	sbiw	r26, 0x1d	; 29
    339a:	5e 96       	adiw	r26, 0x1e	; 30
    339c:	4c 93       	st	X, r20
    339e:	5e 97       	sbiw	r26, 0x1e	; 30
    33a0:	5f 96       	adiw	r26, 0x1f	; 31
    33a2:	5c 93       	st	X, r21
	}
}
    33a4:	a5 96       	adiw	r28, 0x25	; 37
    33a6:	0f b6       	in	r0, 0x3f	; 63
    33a8:	f8 94       	cli
    33aa:	de bf       	out	0x3e, r29	; 62
    33ac:	0f be       	out	0x3f, r0	; 63
    33ae:	cd bf       	out	0x3d, r28	; 61
    33b0:	df 91       	pop	r29
    33b2:	cf 91       	pop	r28
    33b4:	1f 91       	pop	r17
    33b6:	0f 91       	pop	r16
    33b8:	ff 90       	pop	r15
    33ba:	ef 90       	pop	r14
    33bc:	df 90       	pop	r13
    33be:	cf 90       	pop	r12
    33c0:	bf 90       	pop	r11
    33c2:	af 90       	pop	r10
    33c4:	9f 90       	pop	r9
    33c6:	8f 90       	pop	r8
    33c8:	7f 90       	pop	r7
    33ca:	6f 90       	pop	r6
    33cc:	5f 90       	pop	r5
    33ce:	4f 90       	pop	r4
    33d0:	3f 90       	pop	r3
    33d2:	2f 90       	pop	r2
    33d4:	08 95       	ret

000033d6 <_ZN6MS58378pressureEf>:

float MS5837::pressure(float conversion) {
    33d6:	cf 92       	push	r12
    33d8:	df 92       	push	r13
    33da:	ef 92       	push	r14
    33dc:	ff 92       	push	r15
    33de:	6a 01       	movw	r12, r20
    33e0:	7b 01       	movw	r14, r22
	if ( _model == MS5837_02BA ) {
    33e2:	fc 01       	movw	r30, r24
    33e4:	20 a1       	ldd	r18, Z+32	; 0x20
    33e6:	21 30       	cpi	r18, 0x01	; 1
    33e8:	89 f4       	brne	.+34     	; 0x340c <_ZN6MS58378pressureEf+0x36>
		return P*conversion/100.0f;
    33ea:	64 8d       	ldd	r22, Z+28	; 0x1c
    33ec:	75 8d       	ldd	r23, Z+29	; 0x1d
    33ee:	86 8d       	ldd	r24, Z+30	; 0x1e
    33f0:	97 8d       	ldd	r25, Z+31	; 0x1f
    33f2:	0e 94 33 28 	call	0x5066	; 0x5066 <__floatsisf>
    33f6:	a7 01       	movw	r20, r14
    33f8:	96 01       	movw	r18, r12
    33fa:	0e 94 e7 28 	call	0x51ce	; 0x51ce <__mulsf3>
    33fe:	20 e0       	ldi	r18, 0x00	; 0
    3400:	30 e0       	ldi	r19, 0x00	; 0
    3402:	48 ec       	ldi	r20, 0xC8	; 200
    3404:	52 e4       	ldi	r21, 0x42	; 66
    3406:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <__divsf3>
    340a:	11 c0       	rjmp	.+34     	; 0x342e <_ZN6MS58378pressureEf+0x58>
	}
	else {
		return P*conversion/10.0f;
    340c:	fc 01       	movw	r30, r24
    340e:	64 8d       	ldd	r22, Z+28	; 0x1c
    3410:	75 8d       	ldd	r23, Z+29	; 0x1d
    3412:	86 8d       	ldd	r24, Z+30	; 0x1e
    3414:	97 8d       	ldd	r25, Z+31	; 0x1f
    3416:	0e 94 33 28 	call	0x5066	; 0x5066 <__floatsisf>
    341a:	a7 01       	movw	r20, r14
    341c:	96 01       	movw	r18, r12
    341e:	0e 94 e7 28 	call	0x51ce	; 0x51ce <__mulsf3>
    3422:	20 e0       	ldi	r18, 0x00	; 0
    3424:	30 e0       	ldi	r19, 0x00	; 0
    3426:	40 e2       	ldi	r20, 0x20	; 32
    3428:	51 e4       	ldi	r21, 0x41	; 65
    342a:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <__divsf3>
	}
}
    342e:	ff 90       	pop	r15
    3430:	ef 90       	pop	r14
    3432:	df 90       	pop	r13
    3434:	cf 90       	pop	r12
    3436:	08 95       	ret

00003438 <_ZN6MS583711temperatureEv>:

float MS5837::temperature() {
	return TEMP/100.0f;
    3438:	fc 01       	movw	r30, r24
    343a:	60 8d       	ldd	r22, Z+24	; 0x18
    343c:	71 8d       	ldd	r23, Z+25	; 0x19
    343e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3440:	93 8d       	ldd	r25, Z+27	; 0x1b
    3442:	0e 94 33 28 	call	0x5066	; 0x5066 <__floatsisf>
    3446:	20 e0       	ldi	r18, 0x00	; 0
    3448:	30 e0       	ldi	r19, 0x00	; 0
    344a:	48 ec       	ldi	r20, 0xC8	; 200
    344c:	52 e4       	ldi	r21, 0x42	; 66
    344e:	0c 94 9d 27 	jmp	0x4f3a	; 0x4f3a <__divsf3>
}
    3452:	08 95       	ret

00003454 <_ZN6MS58374crc4EPj>:
float MS5837::altitude() {
	return (1-pow((pressure()/1013.25),.190284))*145366.45*.3048;
}*/


uint8_t MS5837::crc4(uint16_t n_prom[]) {
    3454:	cf 93       	push	r28
    3456:	df 93       	push	r29
    3458:	eb 01       	movw	r28, r22
	uint16_t n_rem = 0;

	n_prom[0] = ((n_prom[0]) & 0x0FFF);
    345a:	88 81       	ld	r24, Y
    345c:	99 81       	ldd	r25, Y+1	; 0x01
    345e:	9f 70       	andi	r25, 0x0F	; 15
    3460:	99 83       	std	Y+1, r25	; 0x01
    3462:	88 83       	st	Y, r24
	n_prom[7] = 0;
    3464:	1f 86       	std	Y+15, r1	; 0x0f
    3466:	1e 86       	std	Y+14, r1	; 0x0e
    3468:	40 e0       	ldi	r20, 0x00	; 0
    346a:	50 e0       	ldi	r21, 0x00	; 0
	return (1-pow((pressure()/1013.25),.190284))*145366.45*.3048;
}*/


uint8_t MS5837::crc4(uint16_t n_prom[]) {
	uint16_t n_rem = 0;
    346c:	80 e0       	ldi	r24, 0x00	; 0
    346e:	90 e0       	ldi	r25, 0x00	; 0

	n_prom[0] = ((n_prom[0]) & 0x0FFF);
	n_prom[7] = 0;

	for ( uint8_t i = 0 ; i < 16; i++ ) {
		if ( i%2 == 1 ) {
    3470:	40 ff       	sbrs	r20, 0
    3472:	07 c0       	rjmp	.+14     	; 0x3482 <_ZN6MS58374crc4EPj+0x2e>
			n_rem ^= (uint16_t)((n_prom[i>>1]) & 0x00FF);
    3474:	fa 01       	movw	r30, r20
    3476:	ee 7f       	andi	r30, 0xFE	; 254
    3478:	ec 0f       	add	r30, r28
    347a:	fd 1f       	adc	r31, r29
    347c:	20 81       	ld	r18, Z
    347e:	82 27       	eor	r24, r18
    3480:	1d c0       	rjmp	.+58     	; 0x34bc <_ZN6MS58374crc4EPj+0x68>
			} else {
			n_rem ^= (uint16_t)(n_prom[i>>1] >> 8);
    3482:	fa 01       	movw	r30, r20
    3484:	ee 7f       	andi	r30, 0xFE	; 254
    3486:	ec 0f       	add	r30, r28
    3488:	fd 1f       	adc	r31, r29
    348a:	a1 81       	ldd	r26, Z+1	; 0x01
    348c:	b0 e0       	ldi	r27, 0x00	; 0
    348e:	8a 27       	eor	r24, r26
    3490:	9b 27       	eor	r25, r27
    3492:	14 c0       	rjmp	.+40     	; 0x34bc <_ZN6MS58374crc4EPj+0x68>
		}
		for ( uint8_t n_bit = 8 ; n_bit > 0 ; n_bit-- ) {
			if ( n_rem & 0x8000 ) {
    3494:	99 23       	and	r25, r25
    3496:	2c f4       	brge	.+10     	; 0x34a2 <_ZN6MS58374crc4EPj+0x4e>
				n_rem = (n_rem << 1) ^ 0x3000;
    3498:	88 0f       	add	r24, r24
    349a:	99 1f       	adc	r25, r25
    349c:	30 e3       	ldi	r19, 0x30	; 48
    349e:	93 27       	eor	r25, r19
    34a0:	02 c0       	rjmp	.+4      	; 0x34a6 <_ZN6MS58374crc4EPj+0x52>
				} else {
				n_rem = (n_rem << 1);
    34a2:	88 0f       	add	r24, r24
    34a4:	99 1f       	adc	r25, r25
    34a6:	21 50       	subi	r18, 0x01	; 1
		if ( i%2 == 1 ) {
			n_rem ^= (uint16_t)((n_prom[i>>1]) & 0x00FF);
			} else {
			n_rem ^= (uint16_t)(n_prom[i>>1] >> 8);
		}
		for ( uint8_t n_bit = 8 ; n_bit > 0 ; n_bit-- ) {
    34a8:	a9 f7       	brne	.-22     	; 0x3494 <_ZN6MS58374crc4EPj+0x40>
    34aa:	4f 5f       	subi	r20, 0xFF	; 255
    34ac:	5f 4f       	sbci	r21, 0xFF	; 255
	uint16_t n_rem = 0;

	n_prom[0] = ((n_prom[0]) & 0x0FFF);
	n_prom[7] = 0;

	for ( uint8_t i = 0 ; i < 16; i++ ) {
    34ae:	40 31       	cpi	r20, 0x10	; 16
    34b0:	51 05       	cpc	r21, r1
    34b2:	f1 f6       	brne	.-68     	; 0x3470 <_ZN6MS58374crc4EPj+0x1c>
		}
	}
	
	n_rem = ((n_rem >> 12) & 0x000F);

	return n_rem ^ 0x00;
    34b4:	89 2f       	mov	r24, r25
    34b6:	82 95       	swap	r24
    34b8:	8f 70       	andi	r24, 0x0F	; 15
    34ba:	02 c0       	rjmp	.+4      	; 0x34c0 <_ZN6MS58374crc4EPj+0x6c>
	return (1-pow((pressure()/1013.25),.190284))*145366.45*.3048;
}*/


uint8_t MS5837::crc4(uint16_t n_prom[]) {
	uint16_t n_rem = 0;
    34bc:	28 e0       	ldi	r18, 0x08	; 8
    34be:	ea cf       	rjmp	.-44     	; 0x3494 <_ZN6MS58374crc4EPj+0x40>
	}
	
	n_rem = ((n_rem >> 12) & 0x000F);

	return n_rem ^ 0x00;
    34c0:	df 91       	pop	r29
    34c2:	cf 91       	pop	r28
    34c4:	08 95       	ret

000034c6 <_ZN6MS58375beginEv>:

MS5837::MS5837(HardwareTimer &timer) : _timer(&timer) {
	fluidDensity = 1029;
}

bool MS5837::begin() {
    34c6:	cf 92       	push	r12
    34c8:	df 92       	push	r13
    34ca:	ef 92       	push	r14
    34cc:	ff 92       	push	r15
    34ce:	0f 93       	push	r16
    34d0:	1f 93       	push	r17
    34d2:	cf 93       	push	r28
    34d4:	df 93       	push	r29
    34d6:	6c 01       	movw	r12, r24
	Wire.begin();
    34d8:	85 e5       	ldi	r24, 0x55	; 85
    34da:	98 e0       	ldi	r25, 0x08	; 8
    34dc:	0e 94 62 12 	call	0x24c4	; 0x24c4 <_ZN7TwoWire5beginEv>
	_timer->beginMs(10);
    34e0:	40 e0       	ldi	r20, 0x00	; 0
    34e2:	50 e0       	ldi	r21, 0x00	; 0
    34e4:	60 e2       	ldi	r22, 0x20	; 32
    34e6:	71 e4       	ldi	r23, 0x41	; 65
    34e8:	f6 01       	movw	r30, r12
    34ea:	82 a1       	ldd	r24, Z+34	; 0x22
    34ec:	93 a1       	ldd	r25, Z+35	; 0x23
    34ee:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <_ZN13HardwareTimer7beginMsEf>
	
	// Reset the MS5837, per datasheet
	Wire.beginTransmission(MS5837_ADDR);
    34f2:	66 e7       	ldi	r22, 0x76	; 118
    34f4:	70 e0       	ldi	r23, 0x00	; 0
    34f6:	85 e5       	ldi	r24, 0x55	; 85
    34f8:	98 e0       	ldi	r25, 0x08	; 8
    34fa:	03 d8       	rcall	.-4090   	; 0x2502 <_ZN7TwoWire17beginTransmissionEi>
    34fc:	e0 91 55 08 	lds	r30, 0x0855	; 0x800855 <Wire>
    3500:	f0 91 56 08 	lds	r31, 0x0856	; 0x800856 <Wire+0x1>
    3504:	01 90       	ld	r0, Z+
    3506:	f0 81       	ld	r31, Z
    3508:	e0 2d       	mov	r30, r0
    350a:	6e e1       	ldi	r22, 0x1E	; 30
    350c:	85 e5       	ldi	r24, 0x55	; 85
    350e:	98 e0       	ldi	r25, 0x08	; 8
    3510:	19 95       	eicall
	Wire.write(MS5837_RESET);
	Wire.endTransmission();
    3512:	85 e5       	ldi	r24, 0x55	; 85
    3514:	98 e0       	ldi	r25, 0x08	; 8
    3516:	74 d8       	rcall	.-3864   	; 0x2600 <_ZN7TwoWire15endTransmissionEv>

	// Wait for reset to complete
	//_delay_ms(10);
	_timer->start(1);
    3518:	61 e0       	ldi	r22, 0x01	; 1
    351a:	f6 01       	movw	r30, r12
    351c:	82 a1       	ldd	r24, Z+34	; 0x22
    351e:	93 a1       	ldd	r25, Z+35	; 0x23
    3520:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <_ZN13HardwareTimer5startEh>
	_timer->waitForFinish();
    3524:	f6 01       	movw	r30, r12
    3526:	82 a1       	ldd	r24, Z+34	; 0x22
    3528:	93 a1       	ldd	r25, Z+35	; 0x23
    352a:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <_ZN13HardwareTimer13waitForFinishEv>
    352e:	76 01       	movw	r14, r12
    3530:	c0 ea       	ldi	r28, 0xA0	; 160

	// Read calibration values and CRC
	for ( uint8_t i = 0 ; i < 7 ; i++ ) {
		Wire.beginTransmission(MS5837_ADDR);
    3532:	66 e7       	ldi	r22, 0x76	; 118
    3534:	70 e0       	ldi	r23, 0x00	; 0
    3536:	85 e5       	ldi	r24, 0x55	; 85
    3538:	98 e0       	ldi	r25, 0x08	; 8
    353a:	0e 94 81 12 	call	0x2502	; 0x2502 <_ZN7TwoWire17beginTransmissionEi>
    353e:	e0 91 55 08 	lds	r30, 0x0855	; 0x800855 <Wire>
    3542:	f0 91 56 08 	lds	r31, 0x0856	; 0x800856 <Wire+0x1>
    3546:	01 90       	ld	r0, Z+
    3548:	f0 81       	ld	r31, Z
    354a:	e0 2d       	mov	r30, r0
    354c:	6c 2f       	mov	r22, r28
    354e:	85 e5       	ldi	r24, 0x55	; 85
    3550:	98 e0       	ldi	r25, 0x08	; 8
    3552:	19 95       	eicall
		Wire.write(MS5837_PROM_READ+i*2);
		Wire.endTransmission();
    3554:	85 e5       	ldi	r24, 0x55	; 85
    3556:	98 e0       	ldi	r25, 0x08	; 8
    3558:	53 d8       	rcall	.-3930   	; 0x2600 <_ZN7TwoWire15endTransmissionEv>

		Wire.requestFrom(MS5837_ADDR,2);
    355a:	42 e0       	ldi	r20, 0x02	; 2
    355c:	50 e0       	ldi	r21, 0x00	; 0
    355e:	66 e7       	ldi	r22, 0x76	; 118
    3560:	70 e0       	ldi	r23, 0x00	; 0
    3562:	85 e5       	ldi	r24, 0x55	; 85
    3564:	98 e0       	ldi	r25, 0x08	; 8
    3566:	49 d8       	rcall	.-3950   	; 0x25fa <_ZN7TwoWire11requestFromEii>
		C[i] = (Wire.read() << 8) | Wire.read();
    3568:	85 e5       	ldi	r24, 0x55	; 85
    356a:	98 e0       	ldi	r25, 0x08	; 8
    356c:	0e 94 ad 11 	call	0x235a	; 0x235a <_ZN7TwoWire4readEv>
    3570:	d8 2f       	mov	r29, r24
    3572:	85 e5       	ldi	r24, 0x55	; 85
    3574:	98 e0       	ldi	r25, 0x08	; 8
    3576:	0e 94 ad 11 	call	0x235a	; 0x235a <_ZN7TwoWire4readEv>
    357a:	1d 2f       	mov	r17, r29
    357c:	00 e0       	ldi	r16, 0x00	; 0
    357e:	80 2b       	or	r24, r16
    3580:	91 2b       	or	r25, r17
    3582:	f7 01       	movw	r30, r14
    3584:	81 93       	st	Z+, r24
    3586:	91 93       	st	Z+, r25
    3588:	7f 01       	movw	r14, r30
    358a:	ce 5f       	subi	r28, 0xFE	; 254
	//_delay_ms(10);
	_timer->start(1);
	_timer->waitForFinish();

	// Read calibration values and CRC
	for ( uint8_t i = 0 ; i < 7 ; i++ ) {
    358c:	ce 3a       	cpi	r28, 0xAE	; 174
    358e:	89 f6       	brne	.-94     	; 0x3532 <_ZN6MS58375beginEv+0x6c>
		Wire.requestFrom(MS5837_ADDR,2);
		C[i] = (Wire.read() << 8) | Wire.read();
	}

	// Verify that data is correct with CRC
	uint8_t crcRead = C[0] >> 12;
    3590:	f6 01       	movw	r30, r12
    3592:	c1 81       	ldd	r28, Z+1	; 0x01
    3594:	c2 95       	swap	r28
    3596:	cf 70       	andi	r28, 0x0F	; 15
	uint8_t crcCalculated = crc4(C);
    3598:	b6 01       	movw	r22, r12
    359a:	c6 01       	movw	r24, r12
    359c:	5b df       	rcall	.-330    	; 0x3454 <_ZN6MS58374crc4EPj>
    359e:	91 e0       	ldi	r25, 0x01	; 1
    35a0:	c8 13       	cpse	r28, r24
    35a2:	90 e0       	ldi	r25, 0x00	; 0
	if ( crcCalculated == crcRead ) {
		return true; // Initialization success
	}

	return false; // CRC fail
}
    35a4:	89 2f       	mov	r24, r25
    35a6:	df 91       	pop	r29
    35a8:	cf 91       	pop	r28
    35aa:	1f 91       	pop	r17
    35ac:	0f 91       	pop	r16
    35ae:	ff 90       	pop	r15
    35b0:	ef 90       	pop	r14
    35b2:	df 90       	pop	r13
    35b4:	cf 90       	pop	r12
    35b6:	08 95       	ret

000035b8 <_ZN6MS58376updateEv>:
	}else{
		return false;
	}
}

void MS5837::update(){
    35b8:	8f 92       	push	r8
    35ba:	9f 92       	push	r9
    35bc:	af 92       	push	r10
    35be:	bf 92       	push	r11
    35c0:	cf 92       	push	r12
    35c2:	df 92       	push	r13
    35c4:	ef 92       	push	r14
    35c6:	ff 92       	push	r15
    35c8:	0f 93       	push	r16
    35ca:	1f 93       	push	r17
    35cc:	cf 93       	push	r28
    35ce:	df 93       	push	r29
	if(_state != STATE_FINISHED){
    35d0:	dc 01       	movw	r26, r24
    35d2:	91 96       	adiw	r26, 0x21	; 33
    35d4:	2c 91       	ld	r18, X
    35d6:	22 23       	and	r18, r18
    35d8:	09 f4       	brne	.+2      	; 0x35dc <_ZN6MS58376updateEv+0x24>
    35da:	d1 c0       	rjmp	.+418    	; 0x377e <_ZN6MS58376updateEv+0x1c6>
    35dc:	ec 01       	movw	r28, r24
		if(_timer->finished()){
    35de:	8a a1       	ldd	r24, Y+34	; 0x22
    35e0:	9b a1       	ldd	r25, Y+35	; 0x23
    35e2:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <_ZN13HardwareTimer8finishedEv>
    35e6:	88 23       	and	r24, r24
    35e8:	09 f4       	brne	.+2      	; 0x35ec <_ZN6MS58376updateEv+0x34>
    35ea:	c9 c0       	rjmp	.+402    	; 0x377e <_ZN6MS58376updateEv+0x1c6>
			if(_state == STATE_READ_D1){
    35ec:	89 a1       	ldd	r24, Y+33	; 0x21
    35ee:	81 30       	cpi	r24, 0x01	; 1
    35f0:	09 f0       	breq	.+2      	; 0x35f4 <_ZN6MS58376updateEv+0x3c>
    35f2:	69 c0       	rjmp	.+210    	; 0x36c6 <_ZN6MS58376updateEv+0x10e>
				//Read D1 conversion and Request D2 conversion
				Wire.beginTransmission(MS5837_ADDR);
    35f4:	66 e7       	ldi	r22, 0x76	; 118
    35f6:	70 e0       	ldi	r23, 0x00	; 0
    35f8:	85 e5       	ldi	r24, 0x55	; 85
    35fa:	98 e0       	ldi	r25, 0x08	; 8
    35fc:	0e 94 81 12 	call	0x2502	; 0x2502 <_ZN7TwoWire17beginTransmissionEi>
    3600:	05 e5       	ldi	r16, 0x55	; 85
    3602:	18 e0       	ldi	r17, 0x08	; 8
    3604:	d8 01       	movw	r26, r16
    3606:	ed 91       	ld	r30, X+
    3608:	fc 91       	ld	r31, X
    360a:	01 90       	ld	r0, Z+
    360c:	f0 81       	ld	r31, Z
    360e:	e0 2d       	mov	r30, r0
    3610:	60 e0       	ldi	r22, 0x00	; 0
    3612:	c8 01       	movw	r24, r16
    3614:	19 95       	eicall
				Wire.write(MS5837_ADC_READ);
				Wire.endTransmission();
    3616:	c8 01       	movw	r24, r16
    3618:	0e 94 00 13 	call	0x2600	; 0x2600 <_ZN7TwoWire15endTransmissionEv>

				Wire.requestFrom(MS5837_ADDR,3);
    361c:	43 e0       	ldi	r20, 0x03	; 3
    361e:	50 e0       	ldi	r21, 0x00	; 0
    3620:	66 e7       	ldi	r22, 0x76	; 118
    3622:	70 e0       	ldi	r23, 0x00	; 0
    3624:	c8 01       	movw	r24, r16
    3626:	0e 94 fd 12 	call	0x25fa	; 0x25fa <_ZN7TwoWire11requestFromEii>
				D1 = 0;
    362a:	18 8a       	std	Y+16, r1	; 0x10
    362c:	19 8a       	std	Y+17, r1	; 0x11
    362e:	1a 8a       	std	Y+18, r1	; 0x12
    3630:	1b 8a       	std	Y+19, r1	; 0x13
				D1 = Wire.read();
    3632:	c8 01       	movw	r24, r16
    3634:	0e 94 ad 11 	call	0x235a	; 0x235a <_ZN7TwoWire4readEv>
    3638:	4c 01       	movw	r8, r24
    363a:	99 0f       	add	r25, r25
    363c:	aa 08       	sbc	r10, r10
    363e:	bb 08       	sbc	r11, r11
    3640:	88 8a       	std	Y+16, r8	; 0x10
    3642:	99 8a       	std	Y+17, r9	; 0x11
    3644:	aa 8a       	std	Y+18, r10	; 0x12
    3646:	bb 8a       	std	Y+19, r11	; 0x13
				D1 = (D1 << 8) | Wire.read();
    3648:	c8 01       	movw	r24, r16
    364a:	0e 94 ad 11 	call	0x235a	; 0x235a <_ZN7TwoWire4readEv>
    364e:	ba 2c       	mov	r11, r10
    3650:	a9 2c       	mov	r10, r9
    3652:	98 2c       	mov	r9, r8
    3654:	88 24       	eor	r8, r8
    3656:	6c 01       	movw	r12, r24
    3658:	99 0f       	add	r25, r25
    365a:	ee 08       	sbc	r14, r14
    365c:	ff 08       	sbc	r15, r15
    365e:	c8 28       	or	r12, r8
    3660:	d9 28       	or	r13, r9
    3662:	ea 28       	or	r14, r10
    3664:	fb 28       	or	r15, r11
    3666:	c8 8a       	std	Y+16, r12	; 0x10
    3668:	d9 8a       	std	Y+17, r13	; 0x11
    366a:	ea 8a       	std	Y+18, r14	; 0x12
    366c:	fb 8a       	std	Y+19, r15	; 0x13
				D1 = (D1 << 8) | Wire.read();
    366e:	c8 01       	movw	r24, r16
    3670:	0e 94 ad 11 	call	0x235a	; 0x235a <_ZN7TwoWire4readEv>
    3674:	fe 2c       	mov	r15, r14
    3676:	ed 2c       	mov	r14, r13
    3678:	dc 2c       	mov	r13, r12
    367a:	cc 24       	eor	r12, r12
    367c:	09 2e       	mov	r0, r25
    367e:	00 0c       	add	r0, r0
    3680:	aa 0b       	sbc	r26, r26
    3682:	bb 0b       	sbc	r27, r27
    3684:	c8 2a       	or	r12, r24
    3686:	d9 2a       	or	r13, r25
    3688:	ea 2a       	or	r14, r26
    368a:	fb 2a       	or	r15, r27
    368c:	c8 8a       	std	Y+16, r12	; 0x10
    368e:	d9 8a       	std	Y+17, r13	; 0x11
    3690:	ea 8a       	std	Y+18, r14	; 0x12
    3692:	fb 8a       	std	Y+19, r15	; 0x13
		
				// Request D2 conversion
				Wire.beginTransmission(MS5837_ADDR);
    3694:	66 e7       	ldi	r22, 0x76	; 118
    3696:	70 e0       	ldi	r23, 0x00	; 0
    3698:	c8 01       	movw	r24, r16
    369a:	0e 94 81 12 	call	0x2502	; 0x2502 <_ZN7TwoWire17beginTransmissionEi>
    369e:	d8 01       	movw	r26, r16
    36a0:	ed 91       	ld	r30, X+
    36a2:	fc 91       	ld	r31, X
    36a4:	01 90       	ld	r0, Z+
    36a6:	f0 81       	ld	r31, Z
    36a8:	e0 2d       	mov	r30, r0
    36aa:	6a e5       	ldi	r22, 0x5A	; 90
    36ac:	c8 01       	movw	r24, r16
    36ae:	19 95       	eicall
				Wire.write(MS5837_CONVERT_D2_8192);
				Wire.endTransmission();
    36b0:	c8 01       	movw	r24, r16
    36b2:	0e 94 00 13 	call	0x2600	; 0x2600 <_ZN7TwoWire15endTransmissionEv>

				Timer0.start(2);
    36b6:	62 e0       	ldi	r22, 0x02	; 2
    36b8:	8b ed       	ldi	r24, 0xDB	; 219
    36ba:	97 e0       	ldi	r25, 0x07	; 7
    36bc:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <_ZN13HardwareTimer5startEh>
				_state = STATE_READ_D2;
    36c0:	82 e0       	ldi	r24, 0x02	; 2
    36c2:	89 a3       	std	Y+33, r24	; 0x21
    36c4:	5c c0       	rjmp	.+184    	; 0x377e <_ZN6MS58376updateEv+0x1c6>
			}else if(_state == STATE_READ_D2){
    36c6:	82 30       	cpi	r24, 0x02	; 2
    36c8:	09 f0       	breq	.+2      	; 0x36cc <_ZN6MS58376updateEv+0x114>
    36ca:	59 c0       	rjmp	.+178    	; 0x377e <_ZN6MS58376updateEv+0x1c6>
				// Read D2 conversion and calculate readings
				Wire.beginTransmission(MS5837_ADDR);
    36cc:	66 e7       	ldi	r22, 0x76	; 118
    36ce:	70 e0       	ldi	r23, 0x00	; 0
    36d0:	85 e5       	ldi	r24, 0x55	; 85
    36d2:	98 e0       	ldi	r25, 0x08	; 8
    36d4:	0e 94 81 12 	call	0x2502	; 0x2502 <_ZN7TwoWire17beginTransmissionEi>
    36d8:	e0 91 55 08 	lds	r30, 0x0855	; 0x800855 <Wire>
    36dc:	f0 91 56 08 	lds	r31, 0x0856	; 0x800856 <Wire+0x1>
    36e0:	01 90       	ld	r0, Z+
    36e2:	f0 81       	ld	r31, Z
    36e4:	e0 2d       	mov	r30, r0
    36e6:	60 e0       	ldi	r22, 0x00	; 0
    36e8:	85 e5       	ldi	r24, 0x55	; 85
    36ea:	98 e0       	ldi	r25, 0x08	; 8
    36ec:	19 95       	eicall
				Wire.write(MS5837_ADC_READ);
				Wire.endTransmission();
    36ee:	85 e5       	ldi	r24, 0x55	; 85
    36f0:	98 e0       	ldi	r25, 0x08	; 8
    36f2:	0e 94 00 13 	call	0x2600	; 0x2600 <_ZN7TwoWire15endTransmissionEv>

				Wire.requestFrom(MS5837_ADDR,3);
    36f6:	43 e0       	ldi	r20, 0x03	; 3
    36f8:	50 e0       	ldi	r21, 0x00	; 0
    36fa:	66 e7       	ldi	r22, 0x76	; 118
    36fc:	70 e0       	ldi	r23, 0x00	; 0
    36fe:	85 e5       	ldi	r24, 0x55	; 85
    3700:	98 e0       	ldi	r25, 0x08	; 8
    3702:	0e 94 fd 12 	call	0x25fa	; 0x25fa <_ZN7TwoWire11requestFromEii>
				D2 = 0;
    3706:	1c 8a       	std	Y+20, r1	; 0x14
    3708:	1d 8a       	std	Y+21, r1	; 0x15
    370a:	1e 8a       	std	Y+22, r1	; 0x16
    370c:	1f 8a       	std	Y+23, r1	; 0x17
				D2 = Wire.read();
    370e:	85 e5       	ldi	r24, 0x55	; 85
    3710:	98 e0       	ldi	r25, 0x08	; 8
    3712:	0e 94 ad 11 	call	0x235a	; 0x235a <_ZN7TwoWire4readEv>
    3716:	4c 01       	movw	r8, r24
    3718:	99 0f       	add	r25, r25
    371a:	aa 08       	sbc	r10, r10
    371c:	bb 08       	sbc	r11, r11
    371e:	8c 8a       	std	Y+20, r8	; 0x14
    3720:	9d 8a       	std	Y+21, r9	; 0x15
    3722:	ae 8a       	std	Y+22, r10	; 0x16
    3724:	bf 8a       	std	Y+23, r11	; 0x17
				D2 = (D2 << 8) | Wire.read();
    3726:	85 e5       	ldi	r24, 0x55	; 85
    3728:	98 e0       	ldi	r25, 0x08	; 8
    372a:	0e 94 ad 11 	call	0x235a	; 0x235a <_ZN7TwoWire4readEv>
    372e:	ba 2c       	mov	r11, r10
    3730:	a9 2c       	mov	r10, r9
    3732:	98 2c       	mov	r9, r8
    3734:	88 24       	eor	r8, r8
    3736:	6c 01       	movw	r12, r24
    3738:	99 0f       	add	r25, r25
    373a:	ee 08       	sbc	r14, r14
    373c:	ff 08       	sbc	r15, r15
    373e:	c8 28       	or	r12, r8
    3740:	d9 28       	or	r13, r9
    3742:	ea 28       	or	r14, r10
    3744:	fb 28       	or	r15, r11
    3746:	cc 8a       	std	Y+20, r12	; 0x14
    3748:	dd 8a       	std	Y+21, r13	; 0x15
    374a:	ee 8a       	std	Y+22, r14	; 0x16
    374c:	ff 8a       	std	Y+23, r15	; 0x17
				D2 = (D2 << 8) | Wire.read();
    374e:	85 e5       	ldi	r24, 0x55	; 85
    3750:	98 e0       	ldi	r25, 0x08	; 8
    3752:	0e 94 ad 11 	call	0x235a	; 0x235a <_ZN7TwoWire4readEv>
    3756:	fe 2c       	mov	r15, r14
    3758:	ed 2c       	mov	r14, r13
    375a:	dc 2c       	mov	r13, r12
    375c:	cc 24       	eor	r12, r12
    375e:	09 2e       	mov	r0, r25
    3760:	00 0c       	add	r0, r0
    3762:	aa 0b       	sbc	r26, r26
    3764:	bb 0b       	sbc	r27, r27
    3766:	c8 2a       	or	r12, r24
    3768:	d9 2a       	or	r13, r25
    376a:	ea 2a       	or	r14, r26
    376c:	fb 2a       	or	r15, r27
    376e:	cc 8a       	std	Y+20, r12	; 0x14
    3770:	dd 8a       	std	Y+21, r13	; 0x15
    3772:	ee 8a       	std	Y+22, r14	; 0x16
    3774:	ff 8a       	std	Y+23, r15	; 0x17

				calculate();
    3776:	ce 01       	movw	r24, r28
    3778:	0e 94 46 13 	call	0x268c	; 0x268c <_ZN6MS58379calculateEv>
				_state = STATE_FINISHED;
    377c:	19 a2       	std	Y+33, r1	; 0x21
			}
		}
	}
}
    377e:	df 91       	pop	r29
    3780:	cf 91       	pop	r28
    3782:	1f 91       	pop	r17
    3784:	0f 91       	pop	r16
    3786:	ff 90       	pop	r15
    3788:	ef 90       	pop	r14
    378a:	df 90       	pop	r13
    378c:	cf 90       	pop	r12
    378e:	bf 90       	pop	r11
    3790:	af 90       	pop	r10
    3792:	9f 90       	pop	r9
    3794:	8f 90       	pop	r8
    3796:	08 95       	ret

00003798 <_ZN7PCA9685C1Eh>:
//Wakes board from sleep
void PCA9685::wakeup() {
  uint8_t sleep = read8(PCA9685_MODE1);
  uint8_t wakeup = sleep & ~MODE1_SLEEP; // set sleep bit low
  write8(PCA9685_MODE1, wakeup);
}
    3798:	fc 01       	movw	r30, r24
    379a:	60 83       	st	Z, r22
    379c:	08 95       	ret

0000379e <_ZN7PCA96856setPWMEhjj>:
    379e:	ef 92       	push	r14
    37a0:	ff 92       	push	r15
    37a2:	0f 93       	push	r16
    37a4:	1f 93       	push	r17
    37a6:	cf 93       	push	r28
    37a8:	df 93       	push	r29
    37aa:	c6 2f       	mov	r28, r22
    37ac:	e4 2e       	mov	r14, r20
    37ae:	f5 2e       	mov	r15, r21
    37b0:	02 2f       	mov	r16, r18
    37b2:	13 2f       	mov	r17, r19
    37b4:	fc 01       	movw	r30, r24
    37b6:	60 81       	ld	r22, Z
    37b8:	85 e5       	ldi	r24, 0x55	; 85
    37ba:	98 e0       	ldi	r25, 0x08	; 8
    37bc:	0e 94 77 12 	call	0x24ee	; 0x24ee <_ZN7TwoWire17beginTransmissionEh>
    37c0:	6c 2f       	mov	r22, r28
    37c2:	70 e0       	ldi	r23, 0x00	; 0
    37c4:	66 0f       	add	r22, r22
    37c6:	77 1f       	adc	r23, r23
    37c8:	66 0f       	add	r22, r22
    37ca:	77 1f       	adc	r23, r23
    37cc:	6a 5f       	subi	r22, 0xFA	; 250
    37ce:	7f 4f       	sbci	r23, 0xFF	; 255
    37d0:	c5 e5       	ldi	r28, 0x55	; 85
    37d2:	d8 e0       	ldi	r29, 0x08	; 8
    37d4:	e8 81       	ld	r30, Y
    37d6:	f9 81       	ldd	r31, Y+1	; 0x01
    37d8:	01 90       	ld	r0, Z+
    37da:	f0 81       	ld	r31, Z
    37dc:	e0 2d       	mov	r30, r0
    37de:	ce 01       	movw	r24, r28
    37e0:	19 95       	eicall
    37e2:	e8 81       	ld	r30, Y
    37e4:	f9 81       	ldd	r31, Y+1	; 0x01
    37e6:	01 90       	ld	r0, Z+
    37e8:	f0 81       	ld	r31, Z
    37ea:	e0 2d       	mov	r30, r0
    37ec:	6e 2d       	mov	r22, r14
    37ee:	ce 01       	movw	r24, r28
    37f0:	19 95       	eicall
    37f2:	e8 81       	ld	r30, Y
    37f4:	f9 81       	ldd	r31, Y+1	; 0x01
    37f6:	01 90       	ld	r0, Z+
    37f8:	f0 81       	ld	r31, Z
    37fa:	e0 2d       	mov	r30, r0
    37fc:	6f 2d       	mov	r22, r15
    37fe:	ce 01       	movw	r24, r28
    3800:	19 95       	eicall
    3802:	e8 81       	ld	r30, Y
    3804:	f9 81       	ldd	r31, Y+1	; 0x01
    3806:	01 90       	ld	r0, Z+
    3808:	f0 81       	ld	r31, Z
    380a:	e0 2d       	mov	r30, r0
    380c:	60 2f       	mov	r22, r16
    380e:	ce 01       	movw	r24, r28
    3810:	19 95       	eicall
    3812:	e8 81       	ld	r30, Y
    3814:	f9 81       	ldd	r31, Y+1	; 0x01
    3816:	01 90       	ld	r0, Z+
    3818:	f0 81       	ld	r31, Z
    381a:	e0 2d       	mov	r30, r0
    381c:	61 2f       	mov	r22, r17
    381e:	ce 01       	movw	r24, r28
    3820:	19 95       	eicall
    3822:	ce 01       	movw	r24, r28
    3824:	0e 94 00 13 	call	0x2600	; 0x2600 <_ZN7TwoWire15endTransmissionEv>
    3828:	df 91       	pop	r29
    382a:	cf 91       	pop	r28
    382c:	1f 91       	pop	r17
    382e:	0f 91       	pop	r16
    3830:	ff 90       	pop	r15
    3832:	ef 90       	pop	r14
    3834:	08 95       	ret

00003836 <_ZN7PCA968517writeMicrosecondsEhj>:
    3836:	8f 92       	push	r8
    3838:	9f 92       	push	r9
    383a:	af 92       	push	r10
    383c:	bf 92       	push	r11
    383e:	cf 92       	push	r12
    3840:	df 92       	push	r13
    3842:	ef 92       	push	r14
    3844:	ff 92       	push	r15
    3846:	1f 93       	push	r17
    3848:	cf 93       	push	r28
    384a:	df 93       	push	r29
    384c:	ec 01       	movw	r28, r24
    384e:	16 2f       	mov	r17, r22
    3850:	ba 01       	movw	r22, r20
    3852:	80 e0       	ldi	r24, 0x00	; 0
    3854:	90 e0       	ldi	r25, 0x00	; 0
    3856:	0e 94 31 28 	call	0x5062	; 0x5062 <__floatunsisf>
    385a:	6b 01       	movw	r12, r22
    385c:	7c 01       	movw	r14, r24
    385e:	6d 81       	ldd	r22, Y+5	; 0x05
    3860:	70 e0       	ldi	r23, 0x00	; 0
    3862:	6f 5f       	subi	r22, 0xFF	; 255
    3864:	7f 4f       	sbci	r23, 0xFF	; 255
    3866:	07 2e       	mov	r0, r23
    3868:	00 0c       	add	r0, r0
    386a:	88 0b       	sbc	r24, r24
    386c:	99 0b       	sbc	r25, r25
    386e:	0e 94 33 28 	call	0x5066	; 0x5066 <__floatsisf>
    3872:	20 e0       	ldi	r18, 0x00	; 0
    3874:	34 e2       	ldi	r19, 0x24	; 36
    3876:	44 e7       	ldi	r20, 0x74	; 116
    3878:	59 e4       	ldi	r21, 0x49	; 73
    387a:	0e 94 e7 28 	call	0x51ce	; 0x51ce <__mulsf3>
    387e:	4b 01       	movw	r8, r22
    3880:	5c 01       	movw	r10, r24
    3882:	69 81       	ldd	r22, Y+1	; 0x01
    3884:	7a 81       	ldd	r23, Y+2	; 0x02
    3886:	8b 81       	ldd	r24, Y+3	; 0x03
    3888:	9c 81       	ldd	r25, Y+4	; 0x04
    388a:	0e 94 31 28 	call	0x5062	; 0x5062 <__floatunsisf>
    388e:	9b 01       	movw	r18, r22
    3890:	ac 01       	movw	r20, r24
    3892:	c5 01       	movw	r24, r10
    3894:	b4 01       	movw	r22, r8
    3896:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <__divsf3>
    389a:	9b 01       	movw	r18, r22
    389c:	ac 01       	movw	r20, r24
    389e:	c7 01       	movw	r24, r14
    38a0:	b6 01       	movw	r22, r12
    38a2:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <__divsf3>
    38a6:	0e 94 05 28 	call	0x500a	; 0x500a <__fixunssfsi>
    38aa:	9b 01       	movw	r18, r22
    38ac:	40 e0       	ldi	r20, 0x00	; 0
    38ae:	50 e0       	ldi	r21, 0x00	; 0
    38b0:	61 2f       	mov	r22, r17
    38b2:	ce 01       	movw	r24, r28
    38b4:	74 df       	rcall	.-280    	; 0x379e <_ZN7PCA96856setPWMEhjj>
    38b6:	df 91       	pop	r29
    38b8:	cf 91       	pop	r28
    38ba:	1f 91       	pop	r17
    38bc:	ff 90       	pop	r15
    38be:	ef 90       	pop	r14
    38c0:	df 90       	pop	r13
    38c2:	cf 90       	pop	r12
    38c4:	bf 90       	pop	r11
    38c6:	af 90       	pop	r10
    38c8:	9f 90       	pop	r9
    38ca:	8f 90       	pop	r8
    38cc:	08 95       	ret

000038ce <_ZN7PCA968522getOscillatorFrequencyEv>:
    38ce:	fc 01       	movw	r30, r24
    38d0:	61 81       	ldd	r22, Z+1	; 0x01
    38d2:	72 81       	ldd	r23, Z+2	; 0x02
    38d4:	83 81       	ldd	r24, Z+3	; 0x03
    38d6:	94 81       	ldd	r25, Z+4	; 0x04
    38d8:	08 95       	ret

000038da <_ZN7PCA968522setOscillatorFrequencyEm>:
    38da:	fc 01       	movw	r30, r24
    38dc:	41 83       	std	Z+1, r20	; 0x01
    38de:	52 83       	std	Z+2, r21	; 0x02
    38e0:	63 83       	std	Z+3, r22	; 0x03
    38e2:	74 83       	std	Z+4, r23	; 0x04
    38e4:	08 95       	ret

000038e6 <_ZN7PCA96855read8Eh>:
    38e6:	1f 93       	push	r17
    38e8:	cf 93       	push	r28
    38ea:	df 93       	push	r29
    38ec:	ec 01       	movw	r28, r24
    38ee:	16 2f       	mov	r17, r22
    38f0:	68 81       	ld	r22, Y
    38f2:	85 e5       	ldi	r24, 0x55	; 85
    38f4:	98 e0       	ldi	r25, 0x08	; 8
    38f6:	0e 94 77 12 	call	0x24ee	; 0x24ee <_ZN7TwoWire17beginTransmissionEh>
    38fa:	61 2f       	mov	r22, r17
    38fc:	85 e5       	ldi	r24, 0x55	; 85
    38fe:	98 e0       	ldi	r25, 0x08	; 8
    3900:	0e 94 09 12 	call	0x2412	; 0x2412 <_ZN7TwoWire5writeEh>
    3904:	85 e5       	ldi	r24, 0x55	; 85
    3906:	98 e0       	ldi	r25, 0x08	; 8
    3908:	0e 94 00 13 	call	0x2600	; 0x2600 <_ZN7TwoWire15endTransmissionEv>
    390c:	41 e0       	ldi	r20, 0x01	; 1
    390e:	68 81       	ld	r22, Y
    3910:	85 e5       	ldi	r24, 0x55	; 85
    3912:	98 e0       	ldi	r25, 0x08	; 8
    3914:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <_ZN7TwoWire11requestFromEhh>
    3918:	85 e5       	ldi	r24, 0x55	; 85
    391a:	98 e0       	ldi	r25, 0x08	; 8
    391c:	0e 94 ad 11 	call	0x235a	; 0x235a <_ZN7TwoWire4readEv>
    3920:	df 91       	pop	r29
    3922:	cf 91       	pop	r28
    3924:	1f 91       	pop	r17
    3926:	08 95       	ret

00003928 <_ZN7PCA96856write8Ehh>:
    3928:	cf 93       	push	r28
    392a:	df 93       	push	r29
    392c:	d6 2f       	mov	r29, r22
    392e:	c4 2f       	mov	r28, r20
    3930:	fc 01       	movw	r30, r24
    3932:	60 81       	ld	r22, Z
    3934:	85 e5       	ldi	r24, 0x55	; 85
    3936:	98 e0       	ldi	r25, 0x08	; 8
    3938:	0e 94 77 12 	call	0x24ee	; 0x24ee <_ZN7TwoWire17beginTransmissionEh>
    393c:	6d 2f       	mov	r22, r29
    393e:	85 e5       	ldi	r24, 0x55	; 85
    3940:	98 e0       	ldi	r25, 0x08	; 8
    3942:	0e 94 09 12 	call	0x2412	; 0x2412 <_ZN7TwoWire5writeEh>
    3946:	6c 2f       	mov	r22, r28
    3948:	85 e5       	ldi	r24, 0x55	; 85
    394a:	98 e0       	ldi	r25, 0x08	; 8
    394c:	0e 94 09 12 	call	0x2412	; 0x2412 <_ZN7TwoWire5writeEh>
    3950:	85 e5       	ldi	r24, 0x55	; 85
    3952:	98 e0       	ldi	r25, 0x08	; 8
    3954:	0e 94 00 13 	call	0x2600	; 0x2600 <_ZN7TwoWire15endTransmissionEv>
    3958:	df 91       	pop	r29
    395a:	cf 91       	pop	r28
    395c:	08 95       	ret

0000395e <_ZN7PCA96855resetEv>:
    395e:	40 e8       	ldi	r20, 0x80	; 128
    3960:	60 e0       	ldi	r22, 0x00	; 0
    3962:	e2 df       	rcall	.-60     	; 0x3928 <_ZN7PCA96856write8Ehh>
    3964:	8f e3       	ldi	r24, 0x3F	; 63
    3966:	9c e9       	ldi	r25, 0x9C	; 156
    3968:	01 97       	sbiw	r24, 0x01	; 1
    396a:	f1 f7       	brne	.-4      	; 0x3968 <_ZN7PCA96855resetEv+0xa>
    396c:	00 c0       	rjmp	.+0      	; 0x396e <_ZN7PCA96855resetEv+0x10>
    396e:	00 00       	nop
    3970:	08 95       	ret

00003972 <_ZN7PCA96859setExtClkEh>:

//Sets EXTCLK pin to use the external clock
void PCA9685::setExtClk(uint8_t prescale) {
    3972:	0f 93       	push	r16
    3974:	1f 93       	push	r17
    3976:	cf 93       	push	r28
    3978:	df 93       	push	r29
    397a:	8c 01       	movw	r16, r24
    397c:	d6 2f       	mov	r29, r22
  uint8_t oldmode = read8(PCA9685_MODE1);
    397e:	60 e0       	ldi	r22, 0x00	; 0
    3980:	b2 df       	rcall	.-156    	; 0x38e6 <_ZN7PCA96855read8Eh>
  uint8_t newmode = (oldmode & ~MODE1_RESTART) | MODE1_SLEEP; // sleep
    3982:	c8 2f       	mov	r28, r24
    3984:	cf 76       	andi	r28, 0x6F	; 111
    3986:	4c 2f       	mov	r20, r28
    3988:	40 61       	ori	r20, 0x10	; 16
  write8(PCA9685_MODE1, newmode); // go to sleep, turn off internal oscillator
    398a:	60 e0       	ldi	r22, 0x00	; 0
    398c:	c8 01       	movw	r24, r16
    398e:	cc df       	rcall	.-104    	; 0x3928 <_ZN7PCA96856write8Ehh>

  // This sets both the SLEEP and EXTCLK bits of the MODE1 register to switch to
  // use the external clock.
  write8(PCA9685_MODE1, (newmode |= MODE1_EXTCLK));
    3990:	c0 65       	ori	r28, 0x50	; 80
    3992:	4c 2f       	mov	r20, r28
    3994:	60 e0       	ldi	r22, 0x00	; 0
    3996:	c8 01       	movw	r24, r16
    3998:	c7 df       	rcall	.-114    	; 0x3928 <_ZN7PCA96856write8Ehh>

  _prescale = prescale;
    399a:	f8 01       	movw	r30, r16
    399c:	d5 83       	std	Z+5, r29	; 0x05
  write8(PCA9685_PRESCALE, prescale); // set the prescaler
    399e:	4d 2f       	mov	r20, r29
    39a0:	6e ef       	ldi	r22, 0xFE	; 254
    39a2:	c8 01       	movw	r24, r16
    39a4:	c1 df       	rcall	.-126    	; 0x3928 <_ZN7PCA96856write8Ehh>
    39a6:	8f e1       	ldi	r24, 0x1F	; 31
    39a8:	9e e4       	ldi	r25, 0x4E	; 78
    39aa:	01 97       	sbiw	r24, 0x01	; 1
    39ac:	f1 f7       	brne	.-4      	; 0x39aa <_ZN7PCA96859setExtClkEh+0x38>
    39ae:	00 c0       	rjmp	.+0      	; 0x39b0 <_ZN7PCA96859setExtClkEh+0x3e>
    39b0:	00 00       	nop

  _delay_ms(5);
  
  write8(PCA9685_MODE1, (newmode & ~MODE1_SLEEP) | MODE1_RESTART | MODE1_AI);// clear the SLEEP bit to start
    39b2:	4c 2f       	mov	r20, r28
    39b4:	4f 74       	andi	r20, 0x4F	; 79
    39b6:	40 6a       	ori	r20, 0xA0	; 160
    39b8:	60 e0       	ldi	r22, 0x00	; 0
    39ba:	c8 01       	movw	r24, r16
    39bc:	b5 df       	rcall	.-150    	; 0x3928 <_ZN7PCA96856write8Ehh>
}
    39be:	df 91       	pop	r29
    39c0:	cf 91       	pop	r28
    39c2:	1f 91       	pop	r17
    39c4:	0f 91       	pop	r16
    39c6:	08 95       	ret

000039c8 <_ZN7PCA968510setPWMFreqEf>:

//Sets the PWM frequency for the entire chip, up to ~1.6 KHz
void PCA9685::setPWMFreq(float freq) {
    39c8:	8f 92       	push	r8
    39ca:	9f 92       	push	r9
    39cc:	af 92       	push	r10
    39ce:	bf 92       	push	r11
    39d0:	cf 92       	push	r12
    39d2:	df 92       	push	r13
    39d4:	ef 92       	push	r14
    39d6:	ff 92       	push	r15
    39d8:	1f 93       	push	r17
    39da:	cf 93       	push	r28
    39dc:	df 93       	push	r29
    39de:	ec 01       	movw	r28, r24
    39e0:	6a 01       	movw	r12, r20
    39e2:	7b 01       	movw	r14, r22
  // Range output modulation frequency is dependant on oscillator
  if (freq < 1)
    39e4:	20 e0       	ldi	r18, 0x00	; 0
    39e6:	30 e0       	ldi	r19, 0x00	; 0
    39e8:	40 e8       	ldi	r20, 0x80	; 128
    39ea:	5f e3       	ldi	r21, 0x3F	; 63
    39ec:	c7 01       	movw	r24, r14
    39ee:	b6 01       	movw	r22, r12
    39f0:	0e 94 99 27 	call	0x4f32	; 0x4f32 <__cmpsf2>
    39f4:	88 23       	and	r24, r24
    39f6:	a4 f0       	brlt	.+40     	; 0x3a20 <_ZN7PCA968510setPWMFreqEf+0x58>
    freq = 1;
  if (freq > 3500)
    39f8:	20 e0       	ldi	r18, 0x00	; 0
    39fa:	30 ec       	ldi	r19, 0xC0	; 192
    39fc:	4a e5       	ldi	r20, 0x5A	; 90
    39fe:	55 e4       	ldi	r21, 0x45	; 69
    3a00:	c7 01       	movw	r24, r14
    3a02:	b6 01       	movw	r22, r12
    3a04:	0e 94 e3 28 	call	0x51c6	; 0x51c6 <__gesf2>
    3a08:	18 16       	cp	r1, r24
    3a0a:	94 f4       	brge	.+36     	; 0x3a30 <_ZN7PCA968510setPWMFreqEf+0x68>
    freq = 3500; // Datasheet limit is 3052=50MHz/(4*4096)
    3a0c:	0f 2e       	mov	r0, r31
    3a0e:	c1 2c       	mov	r12, r1
    3a10:	f0 ec       	ldi	r31, 0xC0	; 192
    3a12:	df 2e       	mov	r13, r31
    3a14:	fa e5       	ldi	r31, 0x5A	; 90
    3a16:	ef 2e       	mov	r14, r31
    3a18:	f5 e4       	ldi	r31, 0x45	; 69
    3a1a:	ff 2e       	mov	r15, r31
    3a1c:	f0 2d       	mov	r31, r0
    3a1e:	08 c0       	rjmp	.+16     	; 0x3a30 <_ZN7PCA968510setPWMFreqEf+0x68>

//Sets the PWM frequency for the entire chip, up to ~1.6 KHz
void PCA9685::setPWMFreq(float freq) {
  // Range output modulation frequency is dependant on oscillator
  if (freq < 1)
    freq = 1;
    3a20:	0f 2e       	mov	r0, r31
    3a22:	c1 2c       	mov	r12, r1
    3a24:	d1 2c       	mov	r13, r1
    3a26:	f0 e8       	ldi	r31, 0x80	; 128
    3a28:	ef 2e       	mov	r14, r31
    3a2a:	ff e3       	ldi	r31, 0x3F	; 63
    3a2c:	ff 2e       	mov	r15, r31
    3a2e:	f0 2d       	mov	r31, r0
  if (freq > 3500)
    freq = 3500; // Datasheet limit is 3052=50MHz/(4*4096)

  float prescaleval = ((_oscillator_freq / (freq * 4096.0)) + 0.5) - 1;
    3a30:	69 81       	ldd	r22, Y+1	; 0x01
    3a32:	7a 81       	ldd	r23, Y+2	; 0x02
    3a34:	8b 81       	ldd	r24, Y+3	; 0x03
    3a36:	9c 81       	ldd	r25, Y+4	; 0x04
    3a38:	0e 94 31 28 	call	0x5062	; 0x5062 <__floatunsisf>
    3a3c:	4b 01       	movw	r8, r22
    3a3e:	5c 01       	movw	r10, r24
    3a40:	20 e0       	ldi	r18, 0x00	; 0
    3a42:	30 e0       	ldi	r19, 0x00	; 0
    3a44:	40 e8       	ldi	r20, 0x80	; 128
    3a46:	55 e4       	ldi	r21, 0x45	; 69
    3a48:	c7 01       	movw	r24, r14
    3a4a:	b6 01       	movw	r22, r12
    3a4c:	0e 94 e7 28 	call	0x51ce	; 0x51ce <__mulsf3>
    3a50:	9b 01       	movw	r18, r22
    3a52:	ac 01       	movw	r20, r24
    3a54:	c5 01       	movw	r24, r10
    3a56:	b4 01       	movw	r22, r8
    3a58:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <__divsf3>
    3a5c:	20 e0       	ldi	r18, 0x00	; 0
    3a5e:	30 e0       	ldi	r19, 0x00	; 0
    3a60:	40 e0       	ldi	r20, 0x00	; 0
    3a62:	5f e3       	ldi	r21, 0x3F	; 63
    3a64:	0e 94 35 27 	call	0x4e6a	; 0x4e6a <__addsf3>
    3a68:	20 e0       	ldi	r18, 0x00	; 0
    3a6a:	30 e0       	ldi	r19, 0x00	; 0
    3a6c:	40 e8       	ldi	r20, 0x80	; 128
    3a6e:	5f e3       	ldi	r21, 0x3F	; 63
    3a70:	0e 94 34 27 	call	0x4e68	; 0x4e68 <__subsf3>
    3a74:	6b 01       	movw	r12, r22
    3a76:	7c 01       	movw	r14, r24
  if (prescaleval < PCA9685_PRESCALE_MIN)
    3a78:	20 e0       	ldi	r18, 0x00	; 0
    3a7a:	30 e0       	ldi	r19, 0x00	; 0
    3a7c:	40 e4       	ldi	r20, 0x40	; 64
    3a7e:	50 e4       	ldi	r21, 0x40	; 64
    3a80:	0e 94 99 27 	call	0x4f32	; 0x4f32 <__cmpsf2>
    3a84:	88 23       	and	r24, r24
    3a86:	9c f0       	brlt	.+38     	; 0x3aae <_ZN7PCA968510setPWMFreqEf+0xe6>
    prescaleval = PCA9685_PRESCALE_MIN;
  if (prescaleval > PCA9685_PRESCALE_MAX)
    3a88:	20 e0       	ldi	r18, 0x00	; 0
    3a8a:	30 e0       	ldi	r19, 0x00	; 0
    3a8c:	4f e7       	ldi	r20, 0x7F	; 127
    3a8e:	53 e4       	ldi	r21, 0x43	; 67
    3a90:	c7 01       	movw	r24, r14
    3a92:	b6 01       	movw	r22, r12
    3a94:	0e 94 e3 28 	call	0x51c6	; 0x51c6 <__gesf2>
    3a98:	18 16       	cp	r1, r24
    3a9a:	7c f4       	brge	.+30     	; 0x3aba <_ZN7PCA968510setPWMFreqEf+0xf2>
    prescaleval = PCA9685_PRESCALE_MAX;
    3a9c:	0f 2e       	mov	r0, r31
    3a9e:	c1 2c       	mov	r12, r1
    3aa0:	d1 2c       	mov	r13, r1
    3aa2:	ff e7       	ldi	r31, 0x7F	; 127
    3aa4:	ef 2e       	mov	r14, r31
    3aa6:	f3 e4       	ldi	r31, 0x43	; 67
    3aa8:	ff 2e       	mov	r15, r31
    3aaa:	f0 2d       	mov	r31, r0
    3aac:	06 c0       	rjmp	.+12     	; 0x3aba <_ZN7PCA968510setPWMFreqEf+0xf2>
  if (freq > 3500)
    freq = 3500; // Datasheet limit is 3052=50MHz/(4*4096)

  float prescaleval = ((_oscillator_freq / (freq * 4096.0)) + 0.5) - 1;
  if (prescaleval < PCA9685_PRESCALE_MIN)
    prescaleval = PCA9685_PRESCALE_MIN;
    3aae:	c1 2c       	mov	r12, r1
    3ab0:	d1 2c       	mov	r13, r1
    3ab2:	68 94       	set
    3ab4:	ee 24       	eor	r14, r14
    3ab6:	e6 f8       	bld	r14, 6
    3ab8:	fe 2c       	mov	r15, r14
  if (prescaleval > PCA9685_PRESCALE_MAX)
    prescaleval = PCA9685_PRESCALE_MAX;
  uint8_t prescale = (uint8_t)prescaleval;
    3aba:	c7 01       	movw	r24, r14
    3abc:	b6 01       	movw	r22, r12
    3abe:	0e 94 05 28 	call	0x500a	; 0x500a <__fixunssfsi>
    3ac2:	f6 2e       	mov	r15, r22

  uint8_t oldmode = read8(PCA9685_MODE1);
    3ac4:	60 e0       	ldi	r22, 0x00	; 0
    3ac6:	ce 01       	movw	r24, r28
    3ac8:	0e df       	rcall	.-484    	; 0x38e6 <_ZN7PCA96855read8Eh>
    3aca:	18 2f       	mov	r17, r24
  uint8_t newmode = (oldmode & ~MODE1_RESTART) | MODE1_SLEEP; // sleep
  write8(PCA9685_MODE1, newmode);                             // go to sleep
    3acc:	48 2f       	mov	r20, r24
    3ace:	4f 76       	andi	r20, 0x6F	; 111
    3ad0:	40 61       	ori	r20, 0x10	; 16
    3ad2:	60 e0       	ldi	r22, 0x00	; 0
    3ad4:	ce 01       	movw	r24, r28
    3ad6:	28 df       	rcall	.-432    	; 0x3928 <_ZN7PCA96856write8Ehh>
  _prescale = prescale;
    3ad8:	fd 82       	std	Y+5, r15	; 0x05
  write8(PCA9685_PRESCALE, prescale); // set the prescaler
    3ada:	4f 2d       	mov	r20, r15
    3adc:	6e ef       	ldi	r22, 0xFE	; 254
    3ade:	ce 01       	movw	r24, r28
    3ae0:	23 df       	rcall	.-442    	; 0x3928 <_ZN7PCA96856write8Ehh>
  write8(PCA9685_MODE1, oldmode);
    3ae2:	41 2f       	mov	r20, r17
    3ae4:	60 e0       	ldi	r22, 0x00	; 0
    3ae6:	ce 01       	movw	r24, r28
    3ae8:	1f df       	rcall	.-450    	; 0x3928 <_ZN7PCA96856write8Ehh>
    3aea:	8f e1       	ldi	r24, 0x1F	; 31
    3aec:	9e e4       	ldi	r25, 0x4E	; 78
    3aee:	01 97       	sbiw	r24, 0x01	; 1
    3af0:	f1 f7       	brne	.-4      	; 0x3aee <_ZN7PCA968510setPWMFreqEf+0x126>
    3af2:	00 c0       	rjmp	.+0      	; 0x3af4 <_ZN7PCA968510setPWMFreqEf+0x12c>
    3af4:	00 00       	nop
  _delay_ms(5);
  // This sets the MODE1 register to turn on auto increment.
  write8(PCA9685_MODE1, oldmode | MODE1_RESTART | MODE1_AI);
    3af6:	41 2f       	mov	r20, r17
    3af8:	40 6a       	ori	r20, 0xA0	; 160
    3afa:	60 e0       	ldi	r22, 0x00	; 0
    3afc:	ce 01       	movw	r24, r28
    3afe:	14 df       	rcall	.-472    	; 0x3928 <_ZN7PCA96856write8Ehh>
}
    3b00:	df 91       	pop	r29
    3b02:	cf 91       	pop	r28
    3b04:	1f 91       	pop	r17
    3b06:	ff 90       	pop	r15
    3b08:	ef 90       	pop	r14
    3b0a:	df 90       	pop	r13
    3b0c:	cf 90       	pop	r12
    3b0e:	bf 90       	pop	r11
    3b10:	af 90       	pop	r10
    3b12:	9f 90       	pop	r9
    3b14:	8f 90       	pop	r8
    3b16:	08 95       	ret

00003b18 <_ZN7PCA96855beginEh>:

PCA9685::PCA9685(const uint8_t addr) : _addr(addr){
	
}

void PCA9685::begin(uint8_t prescale) {
    3b18:	1f 93       	push	r17
    3b1a:	cf 93       	push	r28
    3b1c:	df 93       	push	r29
    3b1e:	ec 01       	movw	r28, r24
    3b20:	16 2f       	mov	r17, r22
	Wire.begin();
    3b22:	85 e5       	ldi	r24, 0x55	; 85
    3b24:	98 e0       	ldi	r25, 0x08	; 8
    3b26:	0e 94 62 12 	call	0x24c4	; 0x24c4 <_ZN7TwoWire5beginEv>
	reset();
    3b2a:	ce 01       	movw	r24, r28
    3b2c:	18 df       	rcall	.-464    	; 0x395e <_ZN7PCA96855resetEv>
	if (prescale) {
    3b2e:	11 23       	and	r17, r17
    3b30:	21 f0       	breq	.+8      	; 0x3b3a <_ZN7PCA96855beginEh+0x22>
		setExtClk(prescale);
    3b32:	61 2f       	mov	r22, r17
    3b34:	ce 01       	movw	r24, r28
    3b36:	1d df       	rcall	.-454    	; 0x3972 <_ZN7PCA96859setExtClkEh>
    3b38:	06 c0       	rjmp	.+12     	; 0x3b46 <_ZN7PCA96855beginEh+0x2e>
	} else {  
		setPWMFreq(1000); // set a default frequency
    3b3a:	40 e0       	ldi	r20, 0x00	; 0
    3b3c:	50 e0       	ldi	r21, 0x00	; 0
    3b3e:	6a e7       	ldi	r22, 0x7A	; 122
    3b40:	74 e4       	ldi	r23, 0x44	; 68
    3b42:	ce 01       	movw	r24, r28
    3b44:	41 df       	rcall	.-382    	; 0x39c8 <_ZN7PCA968510setPWMFreqEf>
 *  @brief Setter for the internally tracked oscillator used for freq
 * calculations
 *  @param freq The frequency the PCA9685 should use for frequency calculations
 */
void PCA9685::setOscillatorFrequency(uint32_t freq) {
  _oscillator_freq = freq;
    3b46:	80 e4       	ldi	r24, 0x40	; 64
    3b48:	98 e7       	ldi	r25, 0x78	; 120
    3b4a:	ad e7       	ldi	r26, 0x7D	; 125
    3b4c:	b1 e0       	ldi	r27, 0x01	; 1
    3b4e:	89 83       	std	Y+1, r24	; 0x01
    3b50:	9a 83       	std	Y+2, r25	; 0x02
    3b52:	ab 83       	std	Y+3, r26	; 0x03
    3b54:	bc 83       	std	Y+4, r27	; 0x04
		setExtClk(prescale);
	} else {  
		setPWMFreq(1000); // set a default frequency
	}
	setOscillatorFrequency(FREQUENCY_OSCILLATOR); // set the default internal frequency
}
    3b56:	df 91       	pop	r29
    3b58:	cf 91       	pop	r28
    3b5a:	1f 91       	pop	r17
    3b5c:	08 95       	ret

00003b5e <_ZN18TwiServoControllerC1Eh>:
 */ 

#include "TwiServoController.h"
#include "../Micro/CpuFreq.h"

TwiServoController::TwiServoController(const uint8_t addr) : controller(addr){
    3b5e:	1c ce       	rjmp	.-968    	; 0x3798 <_ZN7PCA9685C1Eh>
    3b60:	08 95       	ret

00003b62 <_ZN18TwiServoController5beginEv>:
		
}

bool TwiServoController::begin(){
    3b62:	cf 93       	push	r28
    3b64:	df 93       	push	r29
    3b66:	ec 01       	movw	r28, r24
	controller.begin();
    3b68:	60 e0       	ldi	r22, 0x00	; 0
    3b6a:	d6 df       	rcall	.-84     	; 0x3b18 <_ZN7PCA96855beginEh>
	// In theory the internal oscillator is 25MHz but it really isn't
	// that precise. You can 'calibrate' by tweaking this number till
	// you get the frequency you're expecting!
	controller.setOscillatorFrequency(27000000);  // The int.osc. is closer to 27MHz
    3b6c:	40 ec       	ldi	r20, 0xC0	; 192
    3b6e:	5c ef       	ldi	r21, 0xFC	; 252
    3b70:	6b e9       	ldi	r22, 0x9B	; 155
    3b72:	71 e0       	ldi	r23, 0x01	; 1
    3b74:	ce 01       	movw	r24, r28
    3b76:	b1 de       	rcall	.-670    	; 0x38da <_ZN7PCA968522setOscillatorFrequencyEm>
	controller.setPWMFreq(SERVO_FREQ);  // Analog servos run at ~50 Hz updates
    3b78:	40 e0       	ldi	r20, 0x00	; 0
    3b7a:	50 e0       	ldi	r21, 0x00	; 0
    3b7c:	68 e4       	ldi	r22, 0x48	; 72
    3b7e:	72 e4       	ldi	r23, 0x42	; 66
    3b80:	ce 01       	movw	r24, r28
    3b82:	22 df       	rcall	.-444    	; 0x39c8 <_ZN7PCA968510setPWMFreqEf>
    3b84:	8f e3       	ldi	r24, 0x3F	; 63
    3b86:	9c e9       	ldi	r25, 0x9C	; 156
    3b88:	01 97       	sbiw	r24, 0x01	; 1
    3b8a:	f1 f7       	brne	.-4      	; 0x3b88 <_ZN18TwiServoController5beginEv+0x26>
    3b8c:	00 c0       	rjmp	.+0      	; 0x3b8e <_ZN18TwiServoController5beginEv+0x2c>
	_delay_ms(10);
	return controller.getOscillatorFrequency() == 27000000;
    3b8e:	00 00       	nop
    3b90:	ce 01       	movw	r24, r28
    3b92:	9d de       	rcall	.-710    	; 0x38ce <_ZN7PCA968522getOscillatorFrequencyEv>
    3b94:	21 e0       	ldi	r18, 0x01	; 1
    3b96:	60 3c       	cpi	r22, 0xC0	; 192
    3b98:	7c 4f       	sbci	r23, 0xFC	; 252
    3b9a:	8b 49       	sbci	r24, 0x9B	; 155
    3b9c:	91 40       	sbci	r25, 0x01	; 1
    3b9e:	09 f0       	breq	.+2      	; 0x3ba2 <_ZN18TwiServoController5beginEv+0x40>
    3ba0:	20 e0       	ldi	r18, 0x00	; 0
}
    3ba2:	82 2f       	mov	r24, r18
    3ba4:	df 91       	pop	r29
    3ba6:	cf 91       	pop	r28
    3ba8:	08 95       	ret

00003baa <_ZN18TwiServoController8setPulseEhj>:

void TwiServoController::setPulse(uint8_t num, uint16_t us){
	if(num < 16) controller.writeMicroseconds(num, us);
    3baa:	60 31       	cpi	r22, 0x10	; 16
    3bac:	08 f4       	brcc	.+2      	; 0x3bb0 <_ZN18TwiServoController8setPulseEhj+0x6>
    3bae:	43 ce       	rjmp	.-890    	; 0x3836 <_ZN7PCA968517writeMicrosecondsEhj>
    3bb0:	08 95       	ret

00003bb2 <_ZN18TwiServoController7releaseEh>:
}

void TwiServoController::release(uint8_t num){
	if(num < 16) controller.setPWM(num, 0, 4096);
    3bb2:	60 31       	cpi	r22, 0x10	; 16
    3bb4:	28 f4       	brcc	.+10     	; 0x3bc0 <_ZN18TwiServoController7releaseEh+0xe>
    3bb6:	20 e0       	ldi	r18, 0x00	; 0
    3bb8:	30 e1       	ldi	r19, 0x10	; 16
    3bba:	40 e0       	ldi	r20, 0x00	; 0
    3bbc:	50 e0       	ldi	r21, 0x00	; 0
    3bbe:	ef cd       	rjmp	.-1058   	; 0x379e <_ZN7PCA96856setPWMEhjj>
    3bc0:	08 95       	ret

00003bc2 <_ZN16HardwarePcbServo8setPulseEj>:
		default:
			break;
	}
}*/
#include "../Micro/Peripherals/HardwareSerial.h"
void HardwarePcbServo::setPulse(uint16_t us){
    3bc2:	fc 01       	movw	r30, r24
	switch(_servo){
    3bc4:	94 81       	ldd	r25, Z+4	; 0x04
    3bc6:	91 30       	cpi	r25, 0x01	; 1
    3bc8:	49 f0       	breq	.+18     	; 0x3bdc <_ZN16HardwarePcbServo8setPulseEj+0x1a>
    3bca:	18 f0       	brcs	.+6      	; 0x3bd2 <_ZN16HardwarePcbServo8setPulseEj+0x10>
    3bcc:	92 30       	cpi	r25, 0x02	; 2
    3bce:	59 f0       	breq	.+22     	; 0x3be6 <_ZN16HardwarePcbServo8setPulseEj+0x24>
    3bd0:	08 95       	ret
		case ServoA:
			_controller->setPulseA(us);
    3bd2:	82 81       	ldd	r24, Z+2	; 0x02
    3bd4:	93 81       	ldd	r25, Z+3	; 0x03
    3bd6:	0c 94 34 0d 	jmp	0x1a68	; 0x1a68 <_ZN13HardwareServo9setPulseAEj>
			break;
    3bda:	08 95       	ret
		case ServoB:
			_controller->setPulseB(us);
    3bdc:	82 81       	ldd	r24, Z+2	; 0x02
    3bde:	93 81       	ldd	r25, Z+3	; 0x03
    3be0:	0c 94 3e 0d 	jmp	0x1a7c	; 0x1a7c <_ZN13HardwareServo9setPulseBEj>
			break;
    3be4:	08 95       	ret
		case ServoC:
			_controller->setPulseC(us);
    3be6:	82 81       	ldd	r24, Z+2	; 0x02
    3be8:	93 81       	ldd	r25, Z+3	; 0x03
    3bea:	0c 94 48 0d 	jmp	0x1a90	; 0x1a90 <_ZN13HardwareServo9setPulseCEj>
    3bee:	08 95       	ret

00003bf0 <_ZN16HardwarePcbServo6enableEb>:
		default:
			break;
	}
}

void HardwarePcbServo::enable(bool en /* = true */){
    3bf0:	fc 01       	movw	r30, r24
	switch(_servo){
    3bf2:	94 81       	ldd	r25, Z+4	; 0x04
    3bf4:	91 30       	cpi	r25, 0x01	; 1
    3bf6:	81 f0       	breq	.+32     	; 0x3c18 <_ZN16HardwarePcbServo6enableEb+0x28>
    3bf8:	18 f0       	brcs	.+6      	; 0x3c00 <_ZN16HardwarePcbServo6enableEb+0x10>
    3bfa:	92 30       	cpi	r25, 0x02	; 2
    3bfc:	c9 f0       	breq	.+50     	; 0x3c30 <_ZN16HardwarePcbServo6enableEb+0x40>
    3bfe:	08 95       	ret
		case ServoA:
			if(en) _controller->EnableA(); else _controller->DisableA();
    3c00:	66 23       	and	r22, r22
    3c02:	29 f0       	breq	.+10     	; 0x3c0e <_ZN16HardwarePcbServo6enableEb+0x1e>
    3c04:	82 81       	ldd	r24, Z+2	; 0x02
    3c06:	93 81       	ldd	r25, Z+3	; 0x03
    3c08:	0c 94 e3 0c 	jmp	0x19c6	; 0x19c6 <_ZN13HardwareServo7EnableAEv>
    3c0c:	08 95       	ret
    3c0e:	82 81       	ldd	r24, Z+2	; 0x02
    3c10:	93 81       	ldd	r25, Z+3	; 0x03
    3c12:	0c 94 0a 0d 	jmp	0x1a14	; 0x1a14 <_ZN13HardwareServo8DisableAEv>
    3c16:	08 95       	ret
			break;
		case ServoB:
			if(en) _controller->EnableB(); else _controller->DisableB();
    3c18:	66 23       	and	r22, r22
    3c1a:	29 f0       	breq	.+10     	; 0x3c26 <_ZN16HardwarePcbServo6enableEb+0x36>
    3c1c:	82 81       	ldd	r24, Z+2	; 0x02
    3c1e:	93 81       	ldd	r25, Z+3	; 0x03
    3c20:	0c 94 f0 0c 	jmp	0x19e0	; 0x19e0 <_ZN13HardwareServo7EnableBEv>
    3c24:	08 95       	ret
    3c26:	82 81       	ldd	r24, Z+2	; 0x02
    3c28:	93 81       	ldd	r25, Z+3	; 0x03
    3c2a:	0c 94 18 0d 	jmp	0x1a30	; 0x1a30 <_ZN13HardwareServo8DisableBEv>
    3c2e:	08 95       	ret
			break;
		case ServoC:
			if(en) _controller->EnableC(); else _controller->DisableC();
    3c30:	66 23       	and	r22, r22
    3c32:	29 f0       	breq	.+10     	; 0x3c3e <_ZN16HardwarePcbServo6enableEb+0x4e>
    3c34:	82 81       	ldd	r24, Z+2	; 0x02
    3c36:	93 81       	ldd	r25, Z+3	; 0x03
    3c38:	0c 94 fd 0c 	jmp	0x19fa	; 0x19fa <_ZN13HardwareServo7EnableCEv>
    3c3c:	08 95       	ret
    3c3e:	82 81       	ldd	r24, Z+2	; 0x02
    3c40:	93 81       	ldd	r25, Z+3	; 0x03
    3c42:	0c 94 26 0d 	jmp	0x1a4c	; 0x1a4c <_ZN13HardwareServo8DisableCEv>
    3c46:	08 95       	ret

00003c48 <_ZN16HardwarePcbServoC1ER13HardwareServoNS_9ServoId_tE>:
 *  Author: zcarey
 */ 

#include "HardwarePcbServo.h"

HardwarePcbServo::HardwarePcbServo(HardwareServo &controller, ServoId_t servo) 
    3c48:	fc 01       	movw	r30, r24
	: PcbServo(), _controller(&controller), _servo(servo) {
    3c4a:	83 e9       	ldi	r24, 0x93	; 147
    3c4c:	92 e0       	ldi	r25, 0x02	; 2
    3c4e:	91 83       	std	Z+1, r25	; 0x01
    3c50:	80 83       	st	Z, r24
    3c52:	73 83       	std	Z+3, r23	; 0x03
    3c54:	62 83       	std	Z+2, r22	; 0x02
    3c56:	44 83       	std	Z+4, r20	; 0x04
    3c58:	08 95       	ret

00003c5a <_GLOBAL__sub_I_PcbServoA1>:
 *  Author: zcarey
 */ 

#include "PcbPins.h"

HardwarePcbServo PcbServoA1(Servo5, HardwarePcbServo::ServoC);
    3c5a:	42 e0       	ldi	r20, 0x02	; 2
    3c5c:	63 e8       	ldi	r22, 0x83	; 131
    3c5e:	77 e0       	ldi	r23, 0x07	; 7
    3c60:	89 e5       	ldi	r24, 0x59	; 89
    3c62:	99 e0       	ldi	r25, 0x09	; 9
    3c64:	f1 df       	rcall	.-30     	; 0x3c48 <_ZN16HardwarePcbServoC1ER13HardwareServoNS_9ServoId_tE>
HardwarePcbServo PcbServoA2(Servo3, HardwarePcbServo::ServoB);
    3c66:	41 e0       	ldi	r20, 0x01	; 1
    3c68:	69 ea       	ldi	r22, 0xA9	; 169
    3c6a:	77 e0       	ldi	r23, 0x07	; 7
    3c6c:	84 e5       	ldi	r24, 0x54	; 84
    3c6e:	99 e0       	ldi	r25, 0x09	; 9
    3c70:	eb df       	rcall	.-42     	; 0x3c48 <_ZN16HardwarePcbServoC1ER13HardwareServoNS_9ServoId_tE>
HardwarePcbServo PcbServoA3(Servo3, HardwarePcbServo::ServoA);
    3c72:	40 e0       	ldi	r20, 0x00	; 0
    3c74:	69 ea       	ldi	r22, 0xA9	; 169
    3c76:	77 e0       	ldi	r23, 0x07	; 7
    3c78:	8f e4       	ldi	r24, 0x4F	; 79
    3c7a:	99 e0       	ldi	r25, 0x09	; 9
    3c7c:	e5 df       	rcall	.-54     	; 0x3c48 <_ZN16HardwarePcbServoC1ER13HardwareServoNS_9ServoId_tE>
HardwarePcbServo PcbServoA4(Servo4, HardwarePcbServo::ServoB);
    3c7e:	41 e0       	ldi	r20, 0x01	; 1
    3c80:	66 e9       	ldi	r22, 0x96	; 150
    3c82:	77 e0       	ldi	r23, 0x07	; 7
    3c84:	8a e4       	ldi	r24, 0x4A	; 74
    3c86:	99 e0       	ldi	r25, 0x09	; 9
    3c88:	df df       	rcall	.-66     	; 0x3c48 <_ZN16HardwarePcbServoC1ER13HardwareServoNS_9ServoId_tE>
HardwarePcbServo PcbServoA5(Servo4, HardwarePcbServo::ServoC);
    3c8a:	42 e0       	ldi	r20, 0x02	; 2
    3c8c:	66 e9       	ldi	r22, 0x96	; 150
    3c8e:	77 e0       	ldi	r23, 0x07	; 7
    3c90:	85 e4       	ldi	r24, 0x45	; 69
    3c92:	99 e0       	ldi	r25, 0x09	; 9
    3c94:	d9 df       	rcall	.-78     	; 0x3c48 <_ZN16HardwarePcbServoC1ER13HardwareServoNS_9ServoId_tE>

HardwarePcbServo PcbServoB1(Servo5, HardwarePcbServo::ServoA);
    3c96:	40 e0       	ldi	r20, 0x00	; 0
    3c98:	63 e8       	ldi	r22, 0x83	; 131
    3c9a:	77 e0       	ldi	r23, 0x07	; 7
    3c9c:	80 e4       	ldi	r24, 0x40	; 64
    3c9e:	99 e0       	ldi	r25, 0x09	; 9
    3ca0:	d3 df       	rcall	.-90     	; 0x3c48 <_ZN16HardwarePcbServoC1ER13HardwareServoNS_9ServoId_tE>
HardwarePcbServo PcbServoB2(Servo5, HardwarePcbServo::ServoB);
    3ca2:	41 e0       	ldi	r20, 0x01	; 1
    3ca4:	63 e8       	ldi	r22, 0x83	; 131
    3ca6:	77 e0       	ldi	r23, 0x07	; 7
    3ca8:	8b e3       	ldi	r24, 0x3B	; 59
    3caa:	99 e0       	ldi	r25, 0x09	; 9
    3cac:	cd df       	rcall	.-102    	; 0x3c48 <_ZN16HardwarePcbServoC1ER13HardwareServoNS_9ServoId_tE>
HardwarePcbServo PcbServoB3(Servo3, HardwarePcbServo::ServoC);
    3cae:	42 e0       	ldi	r20, 0x02	; 2
    3cb0:	69 ea       	ldi	r22, 0xA9	; 169
    3cb2:	77 e0       	ldi	r23, 0x07	; 7
    3cb4:	86 e3       	ldi	r24, 0x36	; 54
    3cb6:	99 e0       	ldi	r25, 0x09	; 9
    3cb8:	c7 df       	rcall	.-114    	; 0x3c48 <_ZN16HardwarePcbServoC1ER13HardwareServoNS_9ServoId_tE>
HardwarePcbServo PcbServoB4(Servo4, HardwarePcbServo::ServoA);
    3cba:	40 e0       	ldi	r20, 0x00	; 0
    3cbc:	66 e9       	ldi	r22, 0x96	; 150
    3cbe:	77 e0       	ldi	r23, 0x07	; 7
    3cc0:	81 e3       	ldi	r24, 0x31	; 49
    3cc2:	99 e0       	ldi	r25, 0x09	; 9
    3cc4:	c1 df       	rcall	.-126    	; 0x3c48 <_ZN16HardwarePcbServoC1ER13HardwareServoNS_9ServoId_tE>
HardwarePcbServo PcbServoB5(Servo1, HardwarePcbServo::ServoA);
    3cc6:	40 e0       	ldi	r20, 0x00	; 0
    3cc8:	6c eb       	ldi	r22, 0xBC	; 188
    3cca:	77 e0       	ldi	r23, 0x07	; 7
    3ccc:	8c e2       	ldi	r24, 0x2C	; 44
    3cce:	99 e0       	ldi	r25, 0x09	; 9
    3cd0:	bb df       	rcall	.-138    	; 0x3c48 <_ZN16HardwarePcbServoC1ER13HardwareServoNS_9ServoId_tE>
HardwarePcbServo PcbServoB6(Servo1, HardwarePcbServo::ServoB);
    3cd2:	41 e0       	ldi	r20, 0x01	; 1
    3cd4:	6c eb       	ldi	r22, 0xBC	; 188
    3cd6:	77 e0       	ldi	r23, 0x07	; 7
    3cd8:	87 e2       	ldi	r24, 0x27	; 39
    3cda:	99 e0       	ldi	r25, 0x09	; 9
    3cdc:	b5 df       	rcall	.-150    	; 0x3c48 <_ZN16HardwarePcbServoC1ER13HardwareServoNS_9ServoId_tE>

TwiServoController PcaServoController(0x43); //0x70);
    3cde:	63 e4       	ldi	r22, 0x43	; 67
    3ce0:	81 e2       	ldi	r24, 0x21	; 33
    3ce2:	99 e0       	ldi	r25, 0x09	; 9
    3ce4:	3c df       	rcall	.-392    	; 0x3b5e <_ZN18TwiServoControllerC1Eh>

TwiPcbServo PcbServoC1(PcaServoController, 0);
    3ce6:	40 e0       	ldi	r20, 0x00	; 0
    3ce8:	61 e2       	ldi	r22, 0x21	; 33
    3cea:	79 e0       	ldi	r23, 0x09	; 9
    3cec:	89 e1       	ldi	r24, 0x19	; 25
    3cee:	99 e0       	ldi	r25, 0x09	; 9
    3cf0:	77 d0       	rcall	.+238    	; 0x3de0 <_ZN11TwiPcbServoC1ER18TwiServoControllerh>
TwiPcbServo PcbServoC2(PcaServoController, 2);
    3cf2:	42 e0       	ldi	r20, 0x02	; 2
    3cf4:	61 e2       	ldi	r22, 0x21	; 33
    3cf6:	79 e0       	ldi	r23, 0x09	; 9
    3cf8:	81 e1       	ldi	r24, 0x11	; 17
    3cfa:	99 e0       	ldi	r25, 0x09	; 9
    3cfc:	71 d0       	rcall	.+226    	; 0x3de0 <_ZN11TwiPcbServoC1ER18TwiServoControllerh>
TwiPcbServo PcbServoC3(PcaServoController, 7);
    3cfe:	47 e0       	ldi	r20, 0x07	; 7
    3d00:	61 e2       	ldi	r22, 0x21	; 33
    3d02:	79 e0       	ldi	r23, 0x09	; 9
    3d04:	89 e0       	ldi	r24, 0x09	; 9
    3d06:	99 e0       	ldi	r25, 0x09	; 9
    3d08:	6b d0       	rcall	.+214    	; 0x3de0 <_ZN11TwiPcbServoC1ER18TwiServoControllerh>
TwiPcbServo PcbServoC4(PcaServoController, 5);
    3d0a:	45 e0       	ldi	r20, 0x05	; 5
    3d0c:	61 e2       	ldi	r22, 0x21	; 33
    3d0e:	79 e0       	ldi	r23, 0x09	; 9
    3d10:	81 e0       	ldi	r24, 0x01	; 1
    3d12:	99 e0       	ldi	r25, 0x09	; 9
    3d14:	65 d0       	rcall	.+202    	; 0x3de0 <_ZN11TwiPcbServoC1ER18TwiServoControllerh>
TwiPcbServo PcbServoC5(PcaServoController, 8);
    3d16:	48 e0       	ldi	r20, 0x08	; 8
    3d18:	61 e2       	ldi	r22, 0x21	; 33
    3d1a:	79 e0       	ldi	r23, 0x09	; 9
    3d1c:	89 ef       	ldi	r24, 0xF9	; 249
    3d1e:	98 e0       	ldi	r25, 0x08	; 8
    3d20:	5f d0       	rcall	.+190    	; 0x3de0 <_ZN11TwiPcbServoC1ER18TwiServoControllerh>
TwiPcbServo PcbServoC6(PcaServoController, 10);
    3d22:	4a e0       	ldi	r20, 0x0A	; 10
    3d24:	61 e2       	ldi	r22, 0x21	; 33
    3d26:	79 e0       	ldi	r23, 0x09	; 9
    3d28:	81 ef       	ldi	r24, 0xF1	; 241
    3d2a:	98 e0       	ldi	r25, 0x08	; 8
    3d2c:	59 d0       	rcall	.+178    	; 0x3de0 <_ZN11TwiPcbServoC1ER18TwiServoControllerh>
TwiPcbServo PcbServoC7(PcaServoController, 12);
    3d2e:	4c e0       	ldi	r20, 0x0C	; 12
    3d30:	61 e2       	ldi	r22, 0x21	; 33
    3d32:	79 e0       	ldi	r23, 0x09	; 9
    3d34:	89 ee       	ldi	r24, 0xE9	; 233
    3d36:	98 e0       	ldi	r25, 0x08	; 8
    3d38:	53 d0       	rcall	.+166    	; 0x3de0 <_ZN11TwiPcbServoC1ER18TwiServoControllerh>
TwiPcbServo PcbServoC8(PcaServoController, 14);
    3d3a:	4e e0       	ldi	r20, 0x0E	; 14
    3d3c:	61 e2       	ldi	r22, 0x21	; 33
    3d3e:	79 e0       	ldi	r23, 0x09	; 9
    3d40:	81 ee       	ldi	r24, 0xE1	; 225
    3d42:	98 e0       	ldi	r25, 0x08	; 8
    3d44:	4d d0       	rcall	.+154    	; 0x3de0 <_ZN11TwiPcbServoC1ER18TwiServoControllerh>

TwiPcbServo PcbServoD1(PcaServoController, 1);
    3d46:	41 e0       	ldi	r20, 0x01	; 1
    3d48:	61 e2       	ldi	r22, 0x21	; 33
    3d4a:	79 e0       	ldi	r23, 0x09	; 9
    3d4c:	89 ed       	ldi	r24, 0xD9	; 217
    3d4e:	98 e0       	ldi	r25, 0x08	; 8
    3d50:	47 d0       	rcall	.+142    	; 0x3de0 <_ZN11TwiPcbServoC1ER18TwiServoControllerh>
TwiPcbServo PcbServoD2(PcaServoController, 3);
    3d52:	43 e0       	ldi	r20, 0x03	; 3
    3d54:	61 e2       	ldi	r22, 0x21	; 33
    3d56:	79 e0       	ldi	r23, 0x09	; 9
    3d58:	81 ed       	ldi	r24, 0xD1	; 209
    3d5a:	98 e0       	ldi	r25, 0x08	; 8
    3d5c:	41 d0       	rcall	.+130    	; 0x3de0 <_ZN11TwiPcbServoC1ER18TwiServoControllerh>
TwiPcbServo PcbServoD3(PcaServoController, 6);
    3d5e:	46 e0       	ldi	r20, 0x06	; 6
    3d60:	61 e2       	ldi	r22, 0x21	; 33
    3d62:	79 e0       	ldi	r23, 0x09	; 9
    3d64:	89 ec       	ldi	r24, 0xC9	; 201
    3d66:	98 e0       	ldi	r25, 0x08	; 8
    3d68:	3b d0       	rcall	.+118    	; 0x3de0 <_ZN11TwiPcbServoC1ER18TwiServoControllerh>
TwiPcbServo PcbServoD4(PcaServoController, 4);
    3d6a:	44 e0       	ldi	r20, 0x04	; 4
    3d6c:	61 e2       	ldi	r22, 0x21	; 33
    3d6e:	79 e0       	ldi	r23, 0x09	; 9
    3d70:	81 ec       	ldi	r24, 0xC1	; 193
    3d72:	98 e0       	ldi	r25, 0x08	; 8
    3d74:	35 d0       	rcall	.+106    	; 0x3de0 <_ZN11TwiPcbServoC1ER18TwiServoControllerh>
TwiPcbServo PcbServoD5(PcaServoController, 9);
    3d76:	49 e0       	ldi	r20, 0x09	; 9
    3d78:	61 e2       	ldi	r22, 0x21	; 33
    3d7a:	79 e0       	ldi	r23, 0x09	; 9
    3d7c:	89 eb       	ldi	r24, 0xB9	; 185
    3d7e:	98 e0       	ldi	r25, 0x08	; 8
    3d80:	2f d0       	rcall	.+94     	; 0x3de0 <_ZN11TwiPcbServoC1ER18TwiServoControllerh>
    3d82:	4b e0       	ldi	r20, 0x0B	; 11
TwiPcbServo PcbServoD6(PcaServoController, 11);
    3d84:	61 e2       	ldi	r22, 0x21	; 33
    3d86:	79 e0       	ldi	r23, 0x09	; 9
    3d88:	81 eb       	ldi	r24, 0xB1	; 177
    3d8a:	98 e0       	ldi	r25, 0x08	; 8
    3d8c:	29 d0       	rcall	.+82     	; 0x3de0 <_ZN11TwiPcbServoC1ER18TwiServoControllerh>
    3d8e:	4d e0       	ldi	r20, 0x0D	; 13
    3d90:	61 e2       	ldi	r22, 0x21	; 33
TwiPcbServo PcbServoD7(PcaServoController, 13);
    3d92:	79 e0       	ldi	r23, 0x09	; 9
    3d94:	89 ea       	ldi	r24, 0xA9	; 169
    3d96:	98 e0       	ldi	r25, 0x08	; 8
    3d98:	23 d0       	rcall	.+70     	; 0x3de0 <_ZN11TwiPcbServoC1ER18TwiServoControllerh>
    3d9a:	4f e0       	ldi	r20, 0x0F	; 15
    3d9c:	61 e2       	ldi	r22, 0x21	; 33
    3d9e:	79 e0       	ldi	r23, 0x09	; 9
    3da0:	81 ea       	ldi	r24, 0xA1	; 161
    3da2:	98 e0       	ldi	r25, 0x08	; 8
    3da4:	1d c0       	rjmp	.+58     	; 0x3de0 <_ZN11TwiPcbServoC1ER18TwiServoControllerh>
    3da6:	08 95       	ret

00003da8 <_ZN11TwiPcbServo8setPulseEj>:
{
	
}

void TwiPcbServo::setPulse(uint16_t us){
	_lastPulse = us;
    3da8:	fc 01       	movw	r30, r24
    3daa:	77 83       	std	Z+7, r23	; 0x07
    3dac:	66 83       	std	Z+6, r22	; 0x06
	if(_enabled) _controller->setPulse(_servo, us);
    3dae:	25 81       	ldd	r18, Z+5	; 0x05
    3db0:	22 23       	and	r18, r18
    3db2:	29 f0       	breq	.+10     	; 0x3dbe <_ZN11TwiPcbServo8setPulseEj+0x16>
    3db4:	ab 01       	movw	r20, r22
    3db6:	64 81       	ldd	r22, Z+4	; 0x04
    3db8:	82 81       	ldd	r24, Z+2	; 0x02
    3dba:	93 81       	ldd	r25, Z+3	; 0x03
    3dbc:	f6 ce       	rjmp	.-532    	; 0x3baa <_ZN18TwiServoController8setPulseEhj>
    3dbe:	08 95       	ret

00003dc0 <_ZN11TwiPcbServo6enableEb>:
}

void TwiPcbServo::enable(bool en /* = true */){
    3dc0:	fc 01       	movw	r30, r24
	_enabled = en;
    3dc2:	65 83       	std	Z+5, r22	; 0x05
	if(en) _controller->setPulse(_servo, _lastPulse);
    3dc4:	66 23       	and	r22, r22
    3dc6:	39 f0       	breq	.+14     	; 0x3dd6 <_ZN11TwiPcbServo6enableEb+0x16>
    3dc8:	46 81       	ldd	r20, Z+6	; 0x06
    3dca:	57 81       	ldd	r21, Z+7	; 0x07
    3dcc:	64 81       	ldd	r22, Z+4	; 0x04
    3dce:	82 81       	ldd	r24, Z+2	; 0x02
    3dd0:	93 81       	ldd	r25, Z+3	; 0x03
    3dd2:	eb ce       	rjmp	.-554    	; 0x3baa <_ZN18TwiServoController8setPulseEhj>
    3dd4:	08 95       	ret
	else _controller->release(_servo);
    3dd6:	64 81       	ldd	r22, Z+4	; 0x04
    3dd8:	82 81       	ldd	r24, Z+2	; 0x02
    3dda:	93 81       	ldd	r25, Z+3	; 0x03
    3ddc:	ea ce       	rjmp	.-556    	; 0x3bb2 <_ZN18TwiServoController7releaseEh>
    3dde:	08 95       	ret

00003de0 <_ZN11TwiPcbServoC1ER18TwiServoControllerh>:
 *  Author: zcarey
 */ 

#include "TwiPcbServo.h"

TwiPcbServo::TwiPcbServo(TwiServoController &controller, uint8_t servo)
    3de0:	fc 01       	movw	r30, r24
	: PcbServo(), _controller(&controller), _servo(servo), _enabled(false), _lastPulse(1500)
    3de2:	8b e9       	ldi	r24, 0x9B	; 155
    3de4:	92 e0       	ldi	r25, 0x02	; 2
    3de6:	91 83       	std	Z+1, r25	; 0x01
    3de8:	80 83       	st	Z, r24
    3dea:	73 83       	std	Z+3, r23	; 0x03
    3dec:	62 83       	std	Z+2, r22	; 0x02
    3dee:	44 83       	std	Z+4, r20	; 0x04
    3df0:	15 82       	std	Z+5, r1	; 0x05
    3df2:	8c ed       	ldi	r24, 0xDC	; 220
    3df4:	95 e0       	ldi	r25, 0x05	; 5
    3df6:	97 83       	std	Z+7, r25	; 0x07
    3df8:	86 83       	std	Z+6, r24	; 0x06
    3dfa:	08 95       	ret

00003dfc <_ZN9IReadable15CommandReceivedEhPKhh>:
#include "EtherComm.h"

class IReadable : public IRegister {
public:
	void CommandReceived(uint8_t id, const uint8_t* data, uint8_t len){
		if(len == 0){
    3dfc:	21 11       	cpse	r18, r1
    3dfe:	0d c0       	rjmp	.+26     	; 0x3e1a <_ZN9IReadable15CommandReceivedEhPKhh+0x1e>
			ReadRegisterRequested(id, EtherComm::buffer + 1/*+ 3*/);
    3e00:	40 91 00 02 	lds	r20, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    3e04:	50 91 01 02 	lds	r21, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    3e08:	4f 5f       	subi	r20, 0xFF	; 255
    3e0a:	5f 4f       	sbci	r21, 0xFF	; 255
    3e0c:	dc 01       	movw	r26, r24
    3e0e:	ed 91       	ld	r30, X+
    3e10:	fc 91       	ld	r31, X
    3e12:	06 80       	ldd	r0, Z+6	; 0x06
    3e14:	f7 81       	ldd	r31, Z+7	; 0x07
    3e16:	e0 2d       	mov	r30, r0
    3e18:	19 95       	eicall
    3e1a:	08 95       	ret

00003e1c <_ZN13DigitalSensor6UpdateEPh>:
	
	bool begin(){ //override
		return rov.RegisterDevice(_id, this);
	}
	
	void Update(uint8_t* buffer) { //override
    3e1c:	08 95       	ret

00003e1e <_ZN9IWritable15CommandReceivedEhPKhh>:
#include "IRegister.h"
#include "Commands.h"
class IWritable : public IRegister {
public:
	inline void CommandReceived(uint8_t id, const uint8_t* data, uint8_t len){
		WriteRegisterRequested(id, data, len);
    3e1e:	dc 01       	movw	r26, r24
    3e20:	ed 91       	ld	r30, X+
    3e22:	fc 91       	ld	r31, X
    3e24:	06 80       	ldd	r0, Z+6	; 0x06
    3e26:	f7 81       	ldd	r31, Z+7	; 0x07
    3e28:	e0 2d       	mov	r30, r0
    3e2a:	19 95       	eicall
    3e2c:	08 95       	ret

00003e2e <_ZN15DigitalActuator6UpdateEPh>:
	
	bool begin(){ //override
		return rov.RegisterDevice(_id, this);
	}
	
	void Update(uint8_t* buffer){ //override
    3e2e:	08 95       	ret

00003e30 <_ZN13ServoActuator6UpdateEPh>:
		
		_servo->setPulse(1500);
		return true;
	}
	
	void Update(uint8_t* buffer){
    3e30:	08 95       	ret

00003e32 <_ZN11TwiRegister6UpdateEPh>:
	
	bool begin(){
		return rov.RegisterDevice(_id, this);
	}
	
	void Update(uint8_t* buffer){
    3e32:	08 95       	ret

00003e34 <_ZN13DigitalSensor21ReadRegisterRequestedEhPh>:
	}

protected:

	void ReadRegisterRequested(uint8_t id, uint8_t* buffer) { //override
		if(id == _id){
    3e34:	dc 01       	movw	r26, r24
    3e36:	12 96       	adiw	r26, 0x02	; 2
    3e38:	2c 91       	ld	r18, X
    3e3a:	12 97       	sbiw	r26, 0x02	; 2
    3e3c:	26 13       	cpse	r18, r22
    3e3e:	14 c0       	rjmp	.+40     	; 0x3e68 <_ZN13DigitalSensor21ReadRegisterRequestedEhPh+0x34>
			buffer[0] = ((*_pinPort & _pin) > 0) ^ _inversed;
    3e40:	14 96       	adiw	r26, 0x04	; 4
    3e42:	ed 91       	ld	r30, X+
    3e44:	fc 91       	ld	r31, X
    3e46:	15 97       	sbiw	r26, 0x05	; 5
    3e48:	60 81       	ld	r22, Z
    3e4a:	13 96       	adiw	r26, 0x03	; 3
    3e4c:	3c 91       	ld	r19, X
    3e4e:	36 23       	and	r19, r22
    3e50:	61 e0       	ldi	r22, 0x01	; 1
    3e52:	09 f4       	brne	.+2      	; 0x3e56 <_ZN13DigitalSensor21ReadRegisterRequestedEhPh+0x22>
    3e54:	60 e0       	ldi	r22, 0x00	; 0
    3e56:	da 01       	movw	r26, r20
    3e58:	fc 01       	movw	r30, r24
    3e5a:	86 81       	ldd	r24, Z+6	; 0x06
    3e5c:	86 27       	eor	r24, r22
    3e5e:	8c 93       	st	X, r24
	
protected:
	void inline SendCommand(uint8_t id, uint8_t len){
		//EtherComm::buffer[2] = id;
		//EtherComm::SendCommand(CMD_UpdateDevice, len + 1);
		EtherComm::SendCommand(id, len);	
    3e60:	61 e0       	ldi	r22, 0x01	; 1
    3e62:	82 2f       	mov	r24, r18
    3e64:	0c 94 76 0b 	jmp	0x16ec	; 0x16ec <_ZN9EtherComm11SendCommandEhh>
    3e68:	08 95       	ret

00003e6a <_ZN15DigitalActuator22WriteRegisterRequestedEhPKhh>:
		
	}

protected:
	void WriteRegisterRequested(uint8_t id, const uint8_t* data, uint8_t len){ //override
		if((id == _id) && (len == 1)){
    3e6a:	dc 01       	movw	r26, r24
    3e6c:	12 96       	adiw	r26, 0x02	; 2
    3e6e:	3c 91       	ld	r19, X
    3e70:	36 13       	cpse	r19, r22
    3e72:	26 c0       	rjmp	.+76     	; 0x3ec0 <_ZN15DigitalActuator22WriteRegisterRequestedEhPKhh+0x56>
    3e74:	21 30       	cpi	r18, 0x01	; 1
    3e76:	21 f5       	brne	.+72     	; 0x3ec0 <_ZN15DigitalActuator22WriteRegisterRequestedEhPKhh+0x56>
			if((data[0] > 0) ^ _inversed) *_portPort |= _pin;
    3e78:	fa 01       	movw	r30, r20
    3e7a:	40 81       	ld	r20, Z
    3e7c:	41 11       	cpse	r20, r1
    3e7e:	01 c0       	rjmp	.+2      	; 0x3e82 <_ZN15DigitalActuator22WriteRegisterRequestedEhPKhh+0x18>
    3e80:	20 e0       	ldi	r18, 0x00	; 0
    3e82:	dc 01       	movw	r26, r24
    3e84:	16 96       	adiw	r26, 0x06	; 6
    3e86:	4c 91       	ld	r20, X
    3e88:	16 97       	sbiw	r26, 0x06	; 6
    3e8a:	24 17       	cp	r18, r20
    3e8c:	51 f0       	breq	.+20     	; 0x3ea2 <_ZN15DigitalActuator22WriteRegisterRequestedEhPKhh+0x38>
    3e8e:	14 96       	adiw	r26, 0x04	; 4
    3e90:	ed 91       	ld	r30, X+
    3e92:	fc 91       	ld	r31, X
    3e94:	15 97       	sbiw	r26, 0x05	; 5
    3e96:	20 81       	ld	r18, Z
    3e98:	13 96       	adiw	r26, 0x03	; 3
    3e9a:	8c 91       	ld	r24, X
    3e9c:	82 2b       	or	r24, r18
    3e9e:	80 83       	st	Z, r24
    3ea0:	0b c0       	rjmp	.+22     	; 0x3eb8 <_ZN15DigitalActuator22WriteRegisterRequestedEhPKhh+0x4e>
			else *_portPort &= ~_pin;
    3ea2:	dc 01       	movw	r26, r24
    3ea4:	14 96       	adiw	r26, 0x04	; 4
    3ea6:	ed 91       	ld	r30, X+
    3ea8:	fc 91       	ld	r31, X
    3eaa:	15 97       	sbiw	r26, 0x05	; 5
    3eac:	20 81       	ld	r18, Z
    3eae:	13 96       	adiw	r26, 0x03	; 3
    3eb0:	8c 91       	ld	r24, X
    3eb2:	80 95       	com	r24
    3eb4:	82 23       	and	r24, r18
    3eb6:	80 83       	st	Z, r24
protected:
	virtual void WriteRegisterRequested(uint8_t id, const uint8_t* data, uint8_t len);
	void SendConfirmation(uint8_t id){
		//EtherComm::buffer[2] = id;
		//EtherComm::SendCommand(CMD_UpdateDevice, 1);
		EtherComm::SendCommand(id, 0);
    3eb8:	60 e0       	ldi	r22, 0x00	; 0
    3eba:	83 2f       	mov	r24, r19
    3ebc:	0c 94 76 0b 	jmp	0x16ec	; 0x16ec <_ZN9EtherComm11SendCommandEhh>
    3ec0:	08 95       	ret

00003ec2 <_ZN13ServoActuator22WriteRegisterRequestedEhPKhh>:
		
	}
	
protected:
	void WriteRegisterRequested(uint8_t id, const uint8_t* data, uint8_t len){
    3ec2:	cf 93       	push	r28
    3ec4:	df 93       	push	r29
    3ec6:	c6 2f       	mov	r28, r22
		if(id == _id){
    3ec8:	dc 01       	movw	r26, r24
    3eca:	12 96       	adiw	r26, 0x02	; 2
    3ecc:	dc 91       	ld	r29, X
    3ece:	12 97       	sbiw	r26, 0x02	; 2
    3ed0:	d6 13       	cpse	r29, r22
    3ed2:	15 c0       	rjmp	.+42     	; 0x3efe <_ZN13ServoActuator22WriteRegisterRequestedEhPKhh+0x3c>
			if(len == 2){
    3ed4:	22 30       	cpi	r18, 0x02	; 2
    3ed6:	61 f5       	brne	.+88     	; 0x3f30 <_ZN13ServoActuator22WriteRegisterRequestedEhPKhh+0x6e>
				_servo->setPulse(*((uint16_t*)data));
    3ed8:	14 96       	adiw	r26, 0x04	; 4
    3eda:	8d 91       	ld	r24, X+
    3edc:	9c 91       	ld	r25, X
    3ede:	15 97       	sbiw	r26, 0x05	; 5
    3ee0:	fa 01       	movw	r30, r20
    3ee2:	60 81       	ld	r22, Z
    3ee4:	71 81       	ldd	r23, Z+1	; 0x01
    3ee6:	dc 01       	movw	r26, r24
    3ee8:	ed 91       	ld	r30, X+
    3eea:	fc 91       	ld	r31, X
    3eec:	01 90       	ld	r0, Z+
    3eee:	f0 81       	ld	r31, Z
    3ef0:	e0 2d       	mov	r30, r0
    3ef2:	19 95       	eicall
    3ef4:	60 e0       	ldi	r22, 0x00	; 0
    3ef6:	8d 2f       	mov	r24, r29
    3ef8:	0e 94 76 0b 	call	0x16ec	; 0x16ec <_ZN9EtherComm11SendCommandEhh>
    3efc:	19 c0       	rjmp	.+50     	; 0x3f30 <_ZN13ServoActuator22WriteRegisterRequestedEhPKhh+0x6e>
				SendConfirmation(id);
			}
		} else if(id == _enId){
    3efe:	fc 01       	movw	r30, r24
    3f00:	33 81       	ldd	r19, Z+3	; 0x03
    3f02:	63 13       	cpse	r22, r19
    3f04:	15 c0       	rjmp	.+42     	; 0x3f30 <_ZN13ServoActuator22WriteRegisterRequestedEhPKhh+0x6e>
			if(len == 1){
    3f06:	21 30       	cpi	r18, 0x01	; 1
    3f08:	99 f4       	brne	.+38     	; 0x3f30 <_ZN13ServoActuator22WriteRegisterRequestedEhPKhh+0x6e>
				_servo->enable(data[0]);
    3f0a:	84 81       	ldd	r24, Z+4	; 0x04
    3f0c:	95 81       	ldd	r25, Z+5	; 0x05
    3f0e:	61 e0       	ldi	r22, 0x01	; 1
    3f10:	da 01       	movw	r26, r20
    3f12:	2c 91       	ld	r18, X
    3f14:	21 11       	cpse	r18, r1
    3f16:	01 c0       	rjmp	.+2      	; 0x3f1a <_ZN13ServoActuator22WriteRegisterRequestedEhPKhh+0x58>
    3f18:	60 e0       	ldi	r22, 0x00	; 0
    3f1a:	dc 01       	movw	r26, r24
    3f1c:	ed 91       	ld	r30, X+
    3f1e:	fc 91       	ld	r31, X
    3f20:	02 80       	ldd	r0, Z+2	; 0x02
    3f22:	f3 81       	ldd	r31, Z+3	; 0x03
    3f24:	e0 2d       	mov	r30, r0
    3f26:	19 95       	eicall
    3f28:	60 e0       	ldi	r22, 0x00	; 0
    3f2a:	8c 2f       	mov	r24, r28
    3f2c:	0e 94 76 0b 	call	0x16ec	; 0x16ec <_ZN9EtherComm11SendCommandEhh>
				SendConfirmation(id);
			}
		}
	}
    3f30:	df 91       	pop	r29
    3f32:	cf 91       	pop	r28
    3f34:	08 95       	ret

00003f36 <_ZN11TwiRegister22WriteRegisterRequestedEhPKhh>:
		
	}
	
protected:
	void WriteRegisterRequested(uint8_t id, const uint8_t* data, uint8_t len){
		if(id == _id){
    3f36:	fc 01       	movw	r30, r24
    3f38:	82 81       	ldd	r24, Z+2	; 0x02
    3f3a:	86 13       	cpse	r24, r22
    3f3c:	0b c0       	rjmp	.+22     	; 0x3f54 <_ZN11TwiRegister22WriteRegisterRequestedEhPKhh+0x1e>
			if(len == 4){
    3f3e:	24 30       	cpi	r18, 0x04	; 4
    3f40:	49 f4       	brne	.+18     	; 0x3f54 <_ZN11TwiRegister22WriteRegisterRequestedEhPKhh+0x1e>
    3f42:	fa 01       	movw	r30, r20
				Wire.setClock(*((uint32_t*)data));
    3f44:	40 81       	ld	r20, Z
    3f46:	51 81       	ldd	r21, Z+1	; 0x01
    3f48:	62 81       	ldd	r22, Z+2	; 0x02
    3f4a:	73 81       	ldd	r23, Z+3	; 0x03
    3f4c:	85 e5       	ldi	r24, 0x55	; 85
    3f4e:	98 e0       	ldi	r25, 0x08	; 8
    3f50:	0c 94 73 12 	jmp	0x24e6	; 0x24e6 <_ZN7TwoWire8setClockEm>
    3f54:	08 95       	ret

00003f56 <_ZN11TwiRegister5beginEv>:
	return true;
}


bool Robot::RegisterDevice(uint8_t id, IRegister* device){
	if(registers[id] == NULL){
    3f56:	fc 01       	movw	r30, r24
    3f58:	22 81       	ldd	r18, Z+2	; 0x02
    3f5a:	30 e0       	ldi	r19, 0x00	; 0
    3f5c:	f9 01       	movw	r30, r18
    3f5e:	ee 0f       	add	r30, r30
    3f60:	ff 1f       	adc	r31, r31
    3f62:	ed 5a       	subi	r30, 0xAD	; 173
    3f64:	f5 4f       	sbci	r31, 0xF5	; 245
    3f66:	40 81       	ld	r20, Z
    3f68:	51 81       	ldd	r21, Z+1	; 0x01
    3f6a:	45 2b       	or	r20, r21
    3f6c:	49 f4       	brne	.+18     	; 0x3f80 <_ZN11TwiRegister5beginEv+0x2a>
		//if(sensor.begin()){
		registers[id] = device; //TODO error handling
    3f6e:	22 0f       	add	r18, r18
    3f70:	33 1f       	adc	r19, r19
    3f72:	f9 01       	movw	r30, r18
    3f74:	ed 5a       	subi	r30, 0xAD	; 173
    3f76:	f5 4f       	sbci	r31, 0xF5	; 245
    3f78:	91 83       	std	Z+1, r25	; 0x01
    3f7a:	80 83       	st	Z, r24
		//}
		return true;
    3f7c:	81 e0       	ldi	r24, 0x01	; 1
    3f7e:	08 95       	ret
	}else{
		//TODO id collisions
		return false;
    3f80:	80 e0       	ldi	r24, 0x00	; 0
	TwiRegister(const uint8_t id) : _id(id) {
	}
	
	bool begin(){
		return rov.RegisterDevice(_id, this);
	}
    3f82:	08 95       	ret

00003f84 <_ZN15DigitalActuator5beginEv>:
	return true;
}


bool Robot::RegisterDevice(uint8_t id, IRegister* device){
	if(registers[id] == NULL){
    3f84:	fc 01       	movw	r30, r24
    3f86:	22 81       	ldd	r18, Z+2	; 0x02
    3f88:	30 e0       	ldi	r19, 0x00	; 0
    3f8a:	f9 01       	movw	r30, r18
    3f8c:	ee 0f       	add	r30, r30
    3f8e:	ff 1f       	adc	r31, r31
    3f90:	ed 5a       	subi	r30, 0xAD	; 173
    3f92:	f5 4f       	sbci	r31, 0xF5	; 245
    3f94:	40 81       	ld	r20, Z
    3f96:	51 81       	ldd	r21, Z+1	; 0x01
    3f98:	45 2b       	or	r20, r21
    3f9a:	49 f4       	brne	.+18     	; 0x3fae <_ZN15DigitalActuator5beginEv+0x2a>
		//if(sensor.begin()){
		registers[id] = device; //TODO error handling
    3f9c:	22 0f       	add	r18, r18
    3f9e:	33 1f       	adc	r19, r19
    3fa0:	f9 01       	movw	r30, r18
    3fa2:	ed 5a       	subi	r30, 0xAD	; 173
    3fa4:	f5 4f       	sbci	r31, 0xF5	; 245
    3fa6:	91 83       	std	Z+1, r25	; 0x01
    3fa8:	80 83       	st	Z, r24
		//}
		return true;
    3faa:	81 e0       	ldi	r24, 0x01	; 1
    3fac:	08 95       	ret
	}else{
		//TODO id collisions
		return false;
    3fae:	80 e0       	ldi	r24, 0x00	; 0
		DDRPort |= Pin;
	}
	
	bool begin(){ //override
		return rov.RegisterDevice(_id, this);
	}
    3fb0:	08 95       	ret

00003fb2 <_ZN13DigitalSensor5beginEv>:
	return true;
}


bool Robot::RegisterDevice(uint8_t id, IRegister* device){
	if(registers[id] == NULL){
    3fb2:	fc 01       	movw	r30, r24
    3fb4:	22 81       	ldd	r18, Z+2	; 0x02
    3fb6:	30 e0       	ldi	r19, 0x00	; 0
    3fb8:	f9 01       	movw	r30, r18
    3fba:	ee 0f       	add	r30, r30
    3fbc:	ff 1f       	adc	r31, r31
    3fbe:	ed 5a       	subi	r30, 0xAD	; 173
    3fc0:	f5 4f       	sbci	r31, 0xF5	; 245
    3fc2:	40 81       	ld	r20, Z
    3fc4:	51 81       	ldd	r21, Z+1	; 0x01
    3fc6:	45 2b       	or	r20, r21
    3fc8:	49 f4       	brne	.+18     	; 0x3fdc <_ZN13DigitalSensor5beginEv+0x2a>
		//if(sensor.begin()){
		registers[id] = device; //TODO error handling
    3fca:	22 0f       	add	r18, r18
    3fcc:	33 1f       	adc	r19, r19
    3fce:	f9 01       	movw	r30, r18
    3fd0:	ed 5a       	subi	r30, 0xAD	; 173
    3fd2:	f5 4f       	sbci	r31, 0xF5	; 245
    3fd4:	91 83       	std	Z+1, r25	; 0x01
    3fd6:	80 83       	st	Z, r24
		//}
		return true;
    3fd8:	81 e0       	ldi	r24, 0x01	; 1
    3fda:	08 95       	ret
	}else{
		//TODO id collisions
		return false;
    3fdc:	80 e0       	ldi	r24, 0x00	; 0
		PortPort |= Pin; //Enable pullup
	}
	
	bool begin(){ //override
		return rov.RegisterDevice(_id, this);
	}
    3fde:	08 95       	ret

00003fe0 <_ZN13ServoActuator5beginEv>:
		: _id(id), _enId(enId), _servo(&servo)
	{
			
	}
	
	bool begin(){
    3fe0:	cf 93       	push	r28
	return true;
}


bool Robot::RegisterDevice(uint8_t id, IRegister* device){
	if(registers[id] == NULL){
    3fe2:	dc 01       	movw	r26, r24
    3fe4:	12 96       	adiw	r26, 0x02	; 2
    3fe6:	2c 91       	ld	r18, X
    3fe8:	12 97       	sbiw	r26, 0x02	; 2
    3fea:	30 e0       	ldi	r19, 0x00	; 0
    3fec:	f9 01       	movw	r30, r18
    3fee:	ee 0f       	add	r30, r30
    3ff0:	ff 1f       	adc	r31, r31
    3ff2:	ed 5a       	subi	r30, 0xAD	; 173
    3ff4:	f5 4f       	sbci	r31, 0xF5	; 245
    3ff6:	40 81       	ld	r20, Z
    3ff8:	51 81       	ldd	r21, Z+1	; 0x01
    3ffa:	45 2b       	or	r20, r21
    3ffc:	61 f5       	brne	.+88     	; 0x4056 <_ZN13ServoActuator5beginEv+0x76>
		//if(sensor.begin()){
		registers[id] = device; //TODO error handling
    3ffe:	22 0f       	add	r18, r18
    4000:	33 1f       	adc	r19, r19
    4002:	f9 01       	movw	r30, r18
    4004:	ed 5a       	subi	r30, 0xAD	; 173
    4006:	f5 4f       	sbci	r31, 0xF5	; 245
    4008:	91 83       	std	Z+1, r25	; 0x01
    400a:	80 83       	st	Z, r24
	return true;
}


bool Robot::RegisterDevice(uint8_t id, IRegister* device){
	if(registers[id] == NULL){
    400c:	13 96       	adiw	r26, 0x03	; 3
    400e:	2c 91       	ld	r18, X
    4010:	30 e0       	ldi	r19, 0x00	; 0
    4012:	f9 01       	movw	r30, r18
    4014:	ee 0f       	add	r30, r30
    4016:	ff 1f       	adc	r31, r31
    4018:	ed 5a       	subi	r30, 0xAD	; 173
    401a:	f5 4f       	sbci	r31, 0xF5	; 245
    401c:	40 81       	ld	r20, Z
    401e:	51 81       	ldd	r21, Z+1	; 0x01
    4020:	45 2b       	or	r20, r21
    4022:	49 f4       	brne	.+18     	; 0x4036 <_ZN13ServoActuator5beginEv+0x56>
		//if(sensor.begin()){
		registers[id] = device; //TODO error handling
    4024:	22 0f       	add	r18, r18
    4026:	33 1f       	adc	r19, r19
    4028:	f9 01       	movw	r30, r18
    402a:	ed 5a       	subi	r30, 0xAD	; 173
    402c:	f5 4f       	sbci	r31, 0xF5	; 245
    402e:	91 83       	std	Z+1, r25	; 0x01
    4030:	80 83       	st	Z, r24
		//}
		return true;
    4032:	c1 e0       	ldi	r28, 0x01	; 1
    4034:	01 c0       	rjmp	.+2      	; 0x4038 <_ZN13ServoActuator5beginEv+0x58>
	}else{
		//TODO id collisions
		return false;
    4036:	c0 e0       	ldi	r28, 0x00	; 0
		if(!rov.RegisterDevice(_id, this) || !rov.RegisterDevice(_enId, this)) return false;
    4038:	cc 23       	and	r28, r28
    403a:	71 f0       	breq	.+28     	; 0x4058 <_ZN13ServoActuator5beginEv+0x78>
    403c:	fc 01       	movw	r30, r24
		
		_servo->setPulse(1500);
    403e:	84 81       	ldd	r24, Z+4	; 0x04
    4040:	95 81       	ldd	r25, Z+5	; 0x05
    4042:	dc 01       	movw	r26, r24
    4044:	ed 91       	ld	r30, X+
    4046:	fc 91       	ld	r31, X
    4048:	01 90       	ld	r0, Z+
    404a:	f0 81       	ld	r31, Z
    404c:	e0 2d       	mov	r30, r0
    404e:	6c ed       	ldi	r22, 0xDC	; 220
    4050:	75 e0       	ldi	r23, 0x05	; 5
    4052:	19 95       	eicall
		return true;
    4054:	01 c0       	rjmp	.+2      	; 0x4058 <_ZN13ServoActuator5beginEv+0x78>
	{
			
	}
	
	bool begin(){
		if(!rov.RegisterDevice(_id, this) || !rov.RegisterDevice(_enId, this)) return false;
    4056:	c0 e0       	ldi	r28, 0x00	; 0
		
		_servo->setPulse(1500);
		return true;
	}
    4058:	8c 2f       	mov	r24, r28
    405a:	cf 91       	pop	r28
    405c:	08 95       	ret

0000405e <_Z19printServoErrorCodeh>:
ServoActuator ServoD7(56, 57, PcbServoD7);
ServoActuator ServoD8(58, 59, PcbServoD8);

TwiRegister TwiSettings(60);

void printServoErrorCode(uint8_t code){
    405e:	cf 93       	push	r28
    4060:	df 93       	push	r29
	if(code == 0x01){
    4062:	81 30       	cpi	r24, 0x01	; 1
    4064:	31 f4       	brne	.+12     	; 0x4072 <_Z19printServoErrorCodeh+0x14>
		Serial.println("Unable to initialize Twi Servo Controller.");
    4066:	6f e9       	ldi	r22, 0x9F	; 159
    4068:	72 e0       	ldi	r23, 0x02	; 2
    406a:	87 e7       	ldi	r24, 0x77	; 119
    406c:	97 e0       	ldi	r25, 0x07	; 7
    406e:	79 d6       	rcall	.+3314   	; 0x4d62 <_ZN5Print7printlnEPKc>
		return;
    4070:	35 c0       	rjmp	.+106    	; 0x40dc <_Z19printServoErrorCodeh+0x7e>
	}
	
	char letter = '?';
	uint8_t num = code & 0x0F;
    4072:	c8 2f       	mov	r28, r24
    4074:	cf 70       	andi	r28, 0x0F	; 15
	
	switch(code >> 4){
    4076:	90 e0       	ldi	r25, 0x00	; 0
    4078:	95 95       	asr	r25
    407a:	87 95       	ror	r24
    407c:	95 95       	asr	r25
    407e:	87 95       	ror	r24
    4080:	95 95       	asr	r25
    4082:	87 95       	ror	r24
    4084:	95 95       	asr	r25
    4086:	87 95       	ror	r24
    4088:	82 30       	cpi	r24, 0x02	; 2
    408a:	91 05       	cpc	r25, r1
    408c:	61 f0       	breq	.+24     	; 0x40a6 <_Z19printServoErrorCodeh+0x48>
    408e:	1c f4       	brge	.+6      	; 0x4096 <_Z19printServoErrorCodeh+0x38>
    4090:	01 97       	sbiw	r24, 0x01	; 1
    4092:	39 f0       	breq	.+14     	; 0x40a2 <_Z19printServoErrorCodeh+0x44>
    4094:	0e c0       	rjmp	.+28     	; 0x40b2 <_Z19printServoErrorCodeh+0x54>
    4096:	83 30       	cpi	r24, 0x03	; 3
    4098:	91 05       	cpc	r25, r1
    409a:	39 f0       	breq	.+14     	; 0x40aa <_Z19printServoErrorCodeh+0x4c>
    409c:	04 97       	sbiw	r24, 0x04	; 4
    409e:	39 f0       	breq	.+14     	; 0x40ae <_Z19printServoErrorCodeh+0x50>
    40a0:	08 c0       	rjmp	.+16     	; 0x40b2 <_Z19printServoErrorCodeh+0x54>
		case 1: letter = 'A'; break;
    40a2:	d1 e4       	ldi	r29, 0x41	; 65
    40a4:	07 c0       	rjmp	.+14     	; 0x40b4 <_Z19printServoErrorCodeh+0x56>
		case 2: letter = 'B'; break;
    40a6:	d2 e4       	ldi	r29, 0x42	; 66
    40a8:	05 c0       	rjmp	.+10     	; 0x40b4 <_Z19printServoErrorCodeh+0x56>
		case 3: letter = 'C'; break;
    40aa:	d3 e4       	ldi	r29, 0x43	; 67
    40ac:	03 c0       	rjmp	.+6      	; 0x40b4 <_Z19printServoErrorCodeh+0x56>
		case 4: letter = 'D'; break;
    40ae:	d4 e4       	ldi	r29, 0x44	; 68
    40b0:	01 c0       	rjmp	.+2      	; 0x40b4 <_Z19printServoErrorCodeh+0x56>
	if(code == 0x01){
		Serial.println("Unable to initialize Twi Servo Controller.");
		return;
	}
	
	char letter = '?';
    40b2:	df e3       	ldi	r29, 0x3F	; 63
		case 2: letter = 'B'; break;
		case 3: letter = 'C'; break;
		case 4: letter = 'D'; break;
	}
	
	Serial.print("Unable to initialize Servo");
    40b4:	6a ec       	ldi	r22, 0xCA	; 202
    40b6:	72 e0       	ldi	r23, 0x02	; 2
    40b8:	87 e7       	ldi	r24, 0x77	; 119
    40ba:	97 e0       	ldi	r25, 0x07	; 7
    40bc:	28 d6       	rcall	.+3152   	; 0x4d0e <_ZN5Print5printEPKc>
	Serial.print(letter);
    40be:	6d 2f       	mov	r22, r29
    40c0:	87 e7       	ldi	r24, 0x77	; 119
    40c2:	97 e0       	ldi	r25, 0x07	; 7
    40c4:	3a d6       	rcall	.+3188   	; 0x4d3a <_ZN5Print5printEc>
	Serial.print(num);
    40c6:	4a e0       	ldi	r20, 0x0A	; 10
    40c8:	50 e0       	ldi	r21, 0x00	; 0
    40ca:	6c 2f       	mov	r22, r28
    40cc:	87 e7       	ldi	r24, 0x77	; 119
    40ce:	97 e0       	ldi	r25, 0x07	; 7
    40d0:	c4 d6       	rcall	.+3464   	; 0x4e5a <_ZN5Print5printEhi>
	Serial.println(".");
    40d2:	69 e3       	ldi	r22, 0x39	; 57
    40d4:	72 e0       	ldi	r23, 0x02	; 2
    40d6:	87 e7       	ldi	r24, 0x77	; 119
    40d8:	97 e0       	ldi	r25, 0x07	; 7
    40da:	43 d6       	rcall	.+3206   	; 0x4d62 <_ZN5Print7printlnEPKc>
}
    40dc:	df 91       	pop	r29
    40de:	cf 91       	pop	r28
    40e0:	08 95       	ret

000040e2 <_Z16initializeServosv>:

bool initializeServos(){
    40e2:	1f 93       	push	r17
    40e4:	cf 93       	push	r28
    40e6:	df 93       	push	r29
	Servo1.begin();
    40e8:	8c eb       	ldi	r24, 0xBC	; 188
    40ea:	97 e0       	ldi	r25, 0x07	; 7
    40ec:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <_ZN13HardwareServo5beginEv>
	Servo3.begin();
    40f0:	89 ea       	ldi	r24, 0xA9	; 169
    40f2:	97 e0       	ldi	r25, 0x07	; 7
    40f4:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <_ZN13HardwareServo5beginEv>
	Servo4.begin();
    40f8:	86 e9       	ldi	r24, 0x96	; 150
    40fa:	97 e0       	ldi	r25, 0x07	; 7
    40fc:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <_ZN13HardwareServo5beginEv>
	Servo5.begin();
    4100:	83 e8       	ldi	r24, 0x83	; 131
    4102:	97 e0       	ldi	r25, 0x07	; 7
    4104:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <_ZN13HardwareServo5beginEv>
	
	if(!PcaServoController.begin()) return 0x01;
    4108:	81 e2       	ldi	r24, 0x21	; 33
    410a:	99 e0       	ldi	r25, 0x09	; 9
    410c:	2a dd       	rcall	.-1452   	; 0x3b62 <_ZN18TwiServoController5beginEv>
    410e:	c8 2f       	mov	r28, r24
    4110:	88 23       	and	r24, r24
    4112:	09 f4       	brne	.+2      	; 0x4116 <_Z16initializeServosv+0x34>
    4114:	00 c2       	rjmp	.+1024   	; 0x4516 <_Z16initializeServosv+0x434>
	Serial.println("Initialized Twi Servo Controller.");
    4116:	65 ee       	ldi	r22, 0xE5	; 229
    4118:	72 e0       	ldi	r23, 0x02	; 2
    411a:	87 e7       	ldi	r24, 0x77	; 119
    411c:	97 e0       	ldi	r25, 0x07	; 7
    411e:	21 d6       	rcall	.+3138   	; 0x4d62 <_ZN5Print7printlnEPKc>
	return true;
}


bool Robot::RegisterDevice(uint8_t id, IRegister* device){
	if(registers[id] == NULL){
    4120:	80 91 ff 09 	lds	r24, 0x09FF	; 0x8009ff <ServoA1+0x2>
    4124:	90 e0       	ldi	r25, 0x00	; 0
    4126:	fc 01       	movw	r30, r24
    4128:	ee 0f       	add	r30, r30
    412a:	ff 1f       	adc	r31, r31
    412c:	ed 5a       	subi	r30, 0xAD	; 173
    412e:	f5 4f       	sbci	r31, 0xF5	; 245
    4130:	20 81       	ld	r18, Z
    4132:	31 81       	ldd	r19, Z+1	; 0x01
    4134:	23 2b       	or	r18, r19
    4136:	09 f0       	breq	.+2      	; 0x413a <_Z16initializeServosv+0x58>
    4138:	0f c2       	rjmp	.+1054   	; 0x4558 <_Z16initializeServosv+0x476>
		//if(sensor.begin()){
		registers[id] = device; //TODO error handling
    413a:	88 0f       	add	r24, r24
    413c:	99 1f       	adc	r25, r25
    413e:	fc 01       	movw	r30, r24
    4140:	ed 5a       	subi	r30, 0xAD	; 173
    4142:	f5 4f       	sbci	r31, 0xF5	; 245
    4144:	ad ef       	ldi	r26, 0xFD	; 253
    4146:	b9 e0       	ldi	r27, 0x09	; 9
    4148:	b1 83       	std	Z+1, r27	; 0x01
    414a:	a0 83       	st	Z, r26
	return true;
}


bool Robot::RegisterDevice(uint8_t id, IRegister* device){
	if(registers[id] == NULL){
    414c:	13 96       	adiw	r26, 0x03	; 3
    414e:	8c 91       	ld	r24, X
    4150:	13 97       	sbiw	r26, 0x03	; 3
    4152:	90 e0       	ldi	r25, 0x00	; 0
    4154:	fc 01       	movw	r30, r24
    4156:	ee 0f       	add	r30, r30
    4158:	ff 1f       	adc	r31, r31
    415a:	ed 5a       	subi	r30, 0xAD	; 173
    415c:	f5 4f       	sbci	r31, 0xF5	; 245
    415e:	20 81       	ld	r18, Z
    4160:	31 81       	ldd	r19, Z+1	; 0x01
    4162:	23 2b       	or	r18, r19
    4164:	49 f4       	brne	.+18     	; 0x4178 <_Z16initializeServosv+0x96>
		//if(sensor.begin()){
		registers[id] = device; //TODO error handling
    4166:	88 0f       	add	r24, r24
    4168:	99 1f       	adc	r25, r25
    416a:	fc 01       	movw	r30, r24
    416c:	ed 5a       	subi	r30, 0xAD	; 173
    416e:	f5 4f       	sbci	r31, 0xF5	; 245
    4170:	b1 83       	std	Z+1, r27	; 0x01
    4172:	a0 83       	st	Z, r26
		//}
		return true;
    4174:	dc 2f       	mov	r29, r28
    4176:	01 c0       	rjmp	.+2      	; 0x417a <_Z16initializeServosv+0x98>
	}else{
		//TODO id collisions
		return false;
    4178:	d0 e0       	ldi	r29, 0x00	; 0
	{
			
	}
	
	bool begin(){
		if(!rov.RegisterDevice(_id, this) || !rov.RegisterDevice(_enId, this)) return false;
    417a:	dd 23       	and	r29, r29
    417c:	09 f4       	brne	.+2      	; 0x4180 <_Z16initializeServosv+0x9e>
    417e:	ec c1       	rjmp	.+984    	; 0x4558 <_Z16initializeServosv+0x476>
		
		_servo->setPulse(1500);
    4180:	80 91 01 0a 	lds	r24, 0x0A01	; 0x800a01 <ServoA1+0x4>
    4184:	90 91 02 0a 	lds	r25, 0x0A02	; 0x800a02 <ServoA1+0x5>
    4188:	dc 01       	movw	r26, r24
    418a:	ed 91       	ld	r30, X+
    418c:	fc 91       	ld	r31, X
    418e:	01 90       	ld	r0, Z+
    4190:	f0 81       	ld	r31, Z
    4192:	e0 2d       	mov	r30, r0
    4194:	6c ed       	ldi	r22, 0xDC	; 220
    4196:	75 e0       	ldi	r23, 0x05	; 5
    4198:	19 95       	eicall
	return true;
}


bool Robot::RegisterDevice(uint8_t id, IRegister* device){
	if(registers[id] == NULL){
    419a:	80 91 f9 09 	lds	r24, 0x09F9	; 0x8009f9 <ServoA2+0x2>
    419e:	90 e0       	ldi	r25, 0x00	; 0
    41a0:	fc 01       	movw	r30, r24
    41a2:	ee 0f       	add	r30, r30
    41a4:	ff 1f       	adc	r31, r31
    41a6:	ed 5a       	subi	r30, 0xAD	; 173
    41a8:	f5 4f       	sbci	r31, 0xF5	; 245
    41aa:	20 81       	ld	r18, Z
    41ac:	31 81       	ldd	r19, Z+1	; 0x01
    41ae:	23 2b       	or	r18, r19
    41b0:	09 f0       	breq	.+2      	; 0x41b4 <_Z16initializeServosv+0xd2>
    41b2:	b3 c1       	rjmp	.+870    	; 0x451a <_Z16initializeServosv+0x438>
		//if(sensor.begin()){
		registers[id] = device; //TODO error handling
    41b4:	88 0f       	add	r24, r24
    41b6:	99 1f       	adc	r25, r25
    41b8:	fc 01       	movw	r30, r24
    41ba:	ed 5a       	subi	r30, 0xAD	; 173
    41bc:	f5 4f       	sbci	r31, 0xF5	; 245
    41be:	a7 ef       	ldi	r26, 0xF7	; 247
    41c0:	b9 e0       	ldi	r27, 0x09	; 9
    41c2:	b1 83       	std	Z+1, r27	; 0x01
    41c4:	a0 83       	st	Z, r26
	return true;
}


bool Robot::RegisterDevice(uint8_t id, IRegister* device){
	if(registers[id] == NULL){
    41c6:	13 96       	adiw	r26, 0x03	; 3
    41c8:	8c 91       	ld	r24, X
    41ca:	13 97       	sbiw	r26, 0x03	; 3
    41cc:	90 e0       	ldi	r25, 0x00	; 0
    41ce:	fc 01       	movw	r30, r24
    41d0:	ee 0f       	add	r30, r30
    41d2:	ff 1f       	adc	r31, r31
    41d4:	ed 5a       	subi	r30, 0xAD	; 173
    41d6:	f5 4f       	sbci	r31, 0xF5	; 245
    41d8:	20 81       	ld	r18, Z
    41da:	31 81       	ldd	r19, Z+1	; 0x01
    41dc:	23 2b       	or	r18, r19
    41de:	49 f4       	brne	.+18     	; 0x41f2 <_Z16initializeServosv+0x110>
		//if(sensor.begin()){
		registers[id] = device; //TODO error handling
    41e0:	88 0f       	add	r24, r24
    41e2:	99 1f       	adc	r25, r25
    41e4:	fc 01       	movw	r30, r24
    41e6:	ed 5a       	subi	r30, 0xAD	; 173
    41e8:	f5 4f       	sbci	r31, 0xF5	; 245
    41ea:	b1 83       	std	Z+1, r27	; 0x01
    41ec:	a0 83       	st	Z, r26
		//}
		return true;
    41ee:	cd 2f       	mov	r28, r29
    41f0:	01 c0       	rjmp	.+2      	; 0x41f4 <_Z16initializeServosv+0x112>
	}else{
		//TODO id collisions
		return false;
    41f2:	c0 e0       	ldi	r28, 0x00	; 0
	{
			
	}
	
	bool begin(){
		if(!rov.RegisterDevice(_id, this) || !rov.RegisterDevice(_enId, this)) return false;
    41f4:	cc 23       	and	r28, r28
    41f6:	09 f4       	brne	.+2      	; 0x41fa <_Z16initializeServosv+0x118>
    41f8:	92 c1       	rjmp	.+804    	; 0x451e <_Z16initializeServosv+0x43c>
		
		_servo->setPulse(1500);
    41fa:	80 91 fb 09 	lds	r24, 0x09FB	; 0x8009fb <ServoA2+0x4>
    41fe:	90 91 fc 09 	lds	r25, 0x09FC	; 0x8009fc <ServoA2+0x5>
    4202:	dc 01       	movw	r26, r24
    4204:	ed 91       	ld	r30, X+
    4206:	fc 91       	ld	r31, X
    4208:	01 90       	ld	r0, Z+
    420a:	f0 81       	ld	r31, Z
    420c:	e0 2d       	mov	r30, r0
    420e:	6c ed       	ldi	r22, 0xDC	; 220
    4210:	75 e0       	ldi	r23, 0x05	; 5
    4212:	19 95       	eicall
	return true;
}


bool Robot::RegisterDevice(uint8_t id, IRegister* device){
	if(registers[id] == NULL){
    4214:	80 91 f3 09 	lds	r24, 0x09F3	; 0x8009f3 <ServoA3+0x2>
    4218:	90 e0       	ldi	r25, 0x00	; 0
    421a:	fc 01       	movw	r30, r24
    421c:	ee 0f       	add	r30, r30
    421e:	ff 1f       	adc	r31, r31
    4220:	ed 5a       	subi	r30, 0xAD	; 173
    4222:	f5 4f       	sbci	r31, 0xF5	; 245
    4224:	20 81       	ld	r18, Z
    4226:	31 81       	ldd	r19, Z+1	; 0x01
    4228:	23 2b       	or	r18, r19
    422a:	09 f0       	breq	.+2      	; 0x422e <_Z16initializeServosv+0x14c>
    422c:	95 c1       	rjmp	.+810    	; 0x4558 <_Z16initializeServosv+0x476>
		//if(sensor.begin()){
		registers[id] = device; //TODO error handling
    422e:	88 0f       	add	r24, r24
    4230:	99 1f       	adc	r25, r25
    4232:	fc 01       	movw	r30, r24
    4234:	ed 5a       	subi	r30, 0xAD	; 173
    4236:	f5 4f       	sbci	r31, 0xF5	; 245
    4238:	a1 ef       	ldi	r26, 0xF1	; 241
    423a:	b9 e0       	ldi	r27, 0x09	; 9
    423c:	b1 83       	std	Z+1, r27	; 0x01
    423e:	a0 83       	st	Z, r26
	return true;
}


bool Robot::RegisterDevice(uint8_t id, IRegister* device){
	if(registers[id] == NULL){
    4240:	13 96       	adiw	r26, 0x03	; 3
    4242:	8c 91       	ld	r24, X
    4244:	13 97       	sbiw	r26, 0x03	; 3
    4246:	90 e0       	ldi	r25, 0x00	; 0
    4248:	fc 01       	movw	r30, r24
    424a:	ee 0f       	add	r30, r30
    424c:	ff 1f       	adc	r31, r31
    424e:	ed 5a       	subi	r30, 0xAD	; 173
    4250:	f5 4f       	sbci	r31, 0xF5	; 245
    4252:	20 81       	ld	r18, Z
    4254:	31 81       	ldd	r19, Z+1	; 0x01
    4256:	23 2b       	or	r18, r19
    4258:	49 f4       	brne	.+18     	; 0x426c <_Z16initializeServosv+0x18a>
		//if(sensor.begin()){
		registers[id] = device; //TODO error handling
    425a:	88 0f       	add	r24, r24
    425c:	99 1f       	adc	r25, r25
    425e:	fc 01       	movw	r30, r24
    4260:	ed 5a       	subi	r30, 0xAD	; 173
    4262:	f5 4f       	sbci	r31, 0xF5	; 245
    4264:	b1 83       	std	Z+1, r27	; 0x01
    4266:	a0 83       	st	Z, r26
		//}
		return true;
    4268:	dc 2f       	mov	r29, r28
    426a:	01 c0       	rjmp	.+2      	; 0x426e <_Z16initializeServosv+0x18c>
	}else{
		//TODO id collisions
		return false;
    426c:	d0 e0       	ldi	r29, 0x00	; 0
	{
			
	}
	
	bool begin(){
		if(!rov.RegisterDevice(_id, this) || !rov.RegisterDevice(_enId, this)) return false;
    426e:	dd 23       	and	r29, r29
    4270:	09 f4       	brne	.+2      	; 0x4274 <_Z16initializeServosv+0x192>
    4272:	72 c1       	rjmp	.+740    	; 0x4558 <_Z16initializeServosv+0x476>
		
		_servo->setPulse(1500);
    4274:	80 91 f5 09 	lds	r24, 0x09F5	; 0x8009f5 <ServoA3+0x4>
    4278:	90 91 f6 09 	lds	r25, 0x09F6	; 0x8009f6 <ServoA3+0x5>
    427c:	dc 01       	movw	r26, r24
    427e:	ed 91       	ld	r30, X+
    4280:	fc 91       	ld	r31, X
    4282:	01 90       	ld	r0, Z+
    4284:	f0 81       	ld	r31, Z
    4286:	e0 2d       	mov	r30, r0
    4288:	6c ed       	ldi	r22, 0xDC	; 220
    428a:	75 e0       	ldi	r23, 0x05	; 5
    428c:	19 95       	eicall
	return true;
}


bool Robot::RegisterDevice(uint8_t id, IRegister* device){
	if(registers[id] == NULL){
    428e:	80 91 ed 09 	lds	r24, 0x09ED	; 0x8009ed <ServoA4+0x2>
    4292:	90 e0       	ldi	r25, 0x00	; 0
    4294:	fc 01       	movw	r30, r24
    4296:	ee 0f       	add	r30, r30
    4298:	ff 1f       	adc	r31, r31
    429a:	ed 5a       	subi	r30, 0xAD	; 173
    429c:	f5 4f       	sbci	r31, 0xF5	; 245
    429e:	20 81       	ld	r18, Z
    42a0:	31 81       	ldd	r19, Z+1	; 0x01
    42a2:	23 2b       	or	r18, r19
    42a4:	09 f0       	breq	.+2      	; 0x42a8 <_Z16initializeServosv+0x1c6>
    42a6:	3d c1       	rjmp	.+634    	; 0x4522 <_Z16initializeServosv+0x440>
		//if(sensor.begin()){
		registers[id] = device; //TODO error handling
    42a8:	88 0f       	add	r24, r24
    42aa:	99 1f       	adc	r25, r25
    42ac:	fc 01       	movw	r30, r24
    42ae:	ed 5a       	subi	r30, 0xAD	; 173
    42b0:	f5 4f       	sbci	r31, 0xF5	; 245
    42b2:	ab ee       	ldi	r26, 0xEB	; 235
    42b4:	b9 e0       	ldi	r27, 0x09	; 9
    42b6:	b1 83       	std	Z+1, r27	; 0x01
    42b8:	a0 83       	st	Z, r26
	return true;
}


bool Robot::RegisterDevice(uint8_t id, IRegister* device){
	if(registers[id] == NULL){
    42ba:	13 96       	adiw	r26, 0x03	; 3
    42bc:	8c 91       	ld	r24, X
    42be:	13 97       	sbiw	r26, 0x03	; 3
    42c0:	90 e0       	ldi	r25, 0x00	; 0
    42c2:	fc 01       	movw	r30, r24
    42c4:	ee 0f       	add	r30, r30
    42c6:	ff 1f       	adc	r31, r31
    42c8:	ed 5a       	subi	r30, 0xAD	; 173
    42ca:	f5 4f       	sbci	r31, 0xF5	; 245
    42cc:	20 81       	ld	r18, Z
    42ce:	31 81       	ldd	r19, Z+1	; 0x01
    42d0:	23 2b       	or	r18, r19
    42d2:	49 f4       	brne	.+18     	; 0x42e6 <_Z16initializeServosv+0x204>
		//if(sensor.begin()){
		registers[id] = device; //TODO error handling
    42d4:	88 0f       	add	r24, r24
    42d6:	99 1f       	adc	r25, r25
    42d8:	fc 01       	movw	r30, r24
    42da:	ed 5a       	subi	r30, 0xAD	; 173
    42dc:	f5 4f       	sbci	r31, 0xF5	; 245
    42de:	b1 83       	std	Z+1, r27	; 0x01
    42e0:	a0 83       	st	Z, r26
		//}
		return true;
    42e2:	cd 2f       	mov	r28, r29
    42e4:	01 c0       	rjmp	.+2      	; 0x42e8 <_Z16initializeServosv+0x206>
	}else{
		//TODO id collisions
		return false;
    42e6:	c0 e0       	ldi	r28, 0x00	; 0
	{
			
	}
	
	bool begin(){
		if(!rov.RegisterDevice(_id, this) || !rov.RegisterDevice(_enId, this)) return false;
    42e8:	cc 23       	and	r28, r28
    42ea:	09 f4       	brne	.+2      	; 0x42ee <_Z16initializeServosv+0x20c>
    42ec:	1c c1       	rjmp	.+568    	; 0x4526 <_Z16initializeServosv+0x444>
		
		_servo->setPulse(1500);
    42ee:	80 91 ef 09 	lds	r24, 0x09EF	; 0x8009ef <ServoA4+0x4>
    42f2:	90 91 f0 09 	lds	r25, 0x09F0	; 0x8009f0 <ServoA4+0x5>
    42f6:	dc 01       	movw	r26, r24
    42f8:	ed 91       	ld	r30, X+
    42fa:	fc 91       	ld	r31, X
    42fc:	01 90       	ld	r0, Z+
    42fe:	f0 81       	ld	r31, Z
    4300:	e0 2d       	mov	r30, r0
    4302:	6c ed       	ldi	r22, 0xDC	; 220
    4304:	75 e0       	ldi	r23, 0x05	; 5
    4306:	19 95       	eicall
	return true;
}


bool Robot::RegisterDevice(uint8_t id, IRegister* device){
	if(registers[id] == NULL){
    4308:	80 91 e7 09 	lds	r24, 0x09E7	; 0x8009e7 <ServoA5+0x2>
    430c:	90 e0       	ldi	r25, 0x00	; 0
    430e:	fc 01       	movw	r30, r24
    4310:	ee 0f       	add	r30, r30
    4312:	ff 1f       	adc	r31, r31
    4314:	ed 5a       	subi	r30, 0xAD	; 173
    4316:	f5 4f       	sbci	r31, 0xF5	; 245
    4318:	20 81       	ld	r18, Z
    431a:	31 81       	ldd	r19, Z+1	; 0x01
    431c:	23 2b       	or	r18, r19
    431e:	09 f0       	breq	.+2      	; 0x4322 <_Z16initializeServosv+0x240>
    4320:	1b c1       	rjmp	.+566    	; 0x4558 <_Z16initializeServosv+0x476>
		//if(sensor.begin()){
		registers[id] = device; //TODO error handling
    4322:	88 0f       	add	r24, r24
    4324:	99 1f       	adc	r25, r25
    4326:	fc 01       	movw	r30, r24
    4328:	ed 5a       	subi	r30, 0xAD	; 173
    432a:	f5 4f       	sbci	r31, 0xF5	; 245
    432c:	a5 ee       	ldi	r26, 0xE5	; 229
    432e:	b9 e0       	ldi	r27, 0x09	; 9
    4330:	b1 83       	std	Z+1, r27	; 0x01
    4332:	a0 83       	st	Z, r26
	return true;
}


bool Robot::RegisterDevice(uint8_t id, IRegister* device){
	if(registers[id] == NULL){
    4334:	13 96       	adiw	r26, 0x03	; 3
    4336:	8c 91       	ld	r24, X
    4338:	13 97       	sbiw	r26, 0x03	; 3
    433a:	90 e0       	ldi	r25, 0x00	; 0
    433c:	fc 01       	movw	r30, r24
    433e:	ee 0f       	add	r30, r30
    4340:	ff 1f       	adc	r31, r31
    4342:	ed 5a       	subi	r30, 0xAD	; 173
    4344:	f5 4f       	sbci	r31, 0xF5	; 245
    4346:	20 81       	ld	r18, Z
    4348:	31 81       	ldd	r19, Z+1	; 0x01
    434a:	23 2b       	or	r18, r19
    434c:	49 f4       	brne	.+18     	; 0x4360 <_Z16initializeServosv+0x27e>
		//if(sensor.begin()){
		registers[id] = device; //TODO error handling
    434e:	88 0f       	add	r24, r24
    4350:	99 1f       	adc	r25, r25
    4352:	fc 01       	movw	r30, r24
    4354:	ed 5a       	subi	r30, 0xAD	; 173
    4356:	f5 4f       	sbci	r31, 0xF5	; 245
    4358:	b1 83       	std	Z+1, r27	; 0x01
    435a:	a0 83       	st	Z, r26
		//}
		return true;
    435c:	dc 2f       	mov	r29, r28
    435e:	01 c0       	rjmp	.+2      	; 0x4362 <_Z16initializeServosv+0x280>
	}else{
		//TODO id collisions
		return false;
    4360:	d0 e0       	ldi	r29, 0x00	; 0
	{
			
	}
	
	bool begin(){
		if(!rov.RegisterDevice(_id, this) || !rov.RegisterDevice(_enId, this)) return false;
    4362:	dd 23       	and	r29, r29
    4364:	09 f4       	brne	.+2      	; 0x4368 <_Z16initializeServosv+0x286>
    4366:	f8 c0       	rjmp	.+496    	; 0x4558 <_Z16initializeServosv+0x476>
		
		_servo->setPulse(1500);
    4368:	80 91 e9 09 	lds	r24, 0x09E9	; 0x8009e9 <ServoA5+0x4>
    436c:	90 91 ea 09 	lds	r25, 0x09EA	; 0x8009ea <ServoA5+0x5>
    4370:	dc 01       	movw	r26, r24
    4372:	ed 91       	ld	r30, X+
    4374:	fc 91       	ld	r31, X
    4376:	01 90       	ld	r0, Z+
    4378:	f0 81       	ld	r31, Z
    437a:	e0 2d       	mov	r30, r0
    437c:	6c ed       	ldi	r22, 0xDC	; 220
    437e:	75 e0       	ldi	r23, 0x05	; 5
    4380:	19 95       	eicall
	return true;
}


bool Robot::RegisterDevice(uint8_t id, IRegister* device){
	if(registers[id] == NULL){
    4382:	80 91 e1 09 	lds	r24, 0x09E1	; 0x8009e1 <ServoB1+0x2>
    4386:	90 e0       	ldi	r25, 0x00	; 0
    4388:	fc 01       	movw	r30, r24
    438a:	ee 0f       	add	r30, r30
    438c:	ff 1f       	adc	r31, r31
    438e:	ed 5a       	subi	r30, 0xAD	; 173
    4390:	f5 4f       	sbci	r31, 0xF5	; 245
    4392:	20 81       	ld	r18, Z
    4394:	31 81       	ldd	r19, Z+1	; 0x01
    4396:	23 2b       	or	r18, r19
    4398:	09 f0       	breq	.+2      	; 0x439c <_Z16initializeServosv+0x2ba>
    439a:	c7 c0       	rjmp	.+398    	; 0x452a <_Z16initializeServosv+0x448>
		//if(sensor.begin()){
		registers[id] = device; //TODO error handling
    439c:	88 0f       	add	r24, r24
    439e:	99 1f       	adc	r25, r25
    43a0:	fc 01       	movw	r30, r24
    43a2:	ed 5a       	subi	r30, 0xAD	; 173
    43a4:	f5 4f       	sbci	r31, 0xF5	; 245
    43a6:	af ed       	ldi	r26, 0xDF	; 223
    43a8:	b9 e0       	ldi	r27, 0x09	; 9
    43aa:	b1 83       	std	Z+1, r27	; 0x01
    43ac:	a0 83       	st	Z, r26
	return true;
}


bool Robot::RegisterDevice(uint8_t id, IRegister* device){
	if(registers[id] == NULL){
    43ae:	13 96       	adiw	r26, 0x03	; 3
    43b0:	8c 91       	ld	r24, X
    43b2:	13 97       	sbiw	r26, 0x03	; 3
    43b4:	90 e0       	ldi	r25, 0x00	; 0
    43b6:	fc 01       	movw	r30, r24
    43b8:	ee 0f       	add	r30, r30
    43ba:	ff 1f       	adc	r31, r31
    43bc:	ed 5a       	subi	r30, 0xAD	; 173
    43be:	f5 4f       	sbci	r31, 0xF5	; 245
    43c0:	20 81       	ld	r18, Z
    43c2:	31 81       	ldd	r19, Z+1	; 0x01
    43c4:	23 2b       	or	r18, r19
    43c6:	49 f4       	brne	.+18     	; 0x43da <_Z16initializeServosv+0x2f8>
		//if(sensor.begin()){
		registers[id] = device; //TODO error handling
    43c8:	88 0f       	add	r24, r24
    43ca:	99 1f       	adc	r25, r25
    43cc:	fc 01       	movw	r30, r24
    43ce:	ed 5a       	subi	r30, 0xAD	; 173
    43d0:	f5 4f       	sbci	r31, 0xF5	; 245
    43d2:	b1 83       	std	Z+1, r27	; 0x01
    43d4:	a0 83       	st	Z, r26
		//}
		return true;
    43d6:	1d 2f       	mov	r17, r29
    43d8:	01 c0       	rjmp	.+2      	; 0x43dc <_Z16initializeServosv+0x2fa>
	}else{
		//TODO id collisions
		return false;
    43da:	10 e0       	ldi	r17, 0x00	; 0
	{
			
	}
	
	bool begin(){
		if(!rov.RegisterDevice(_id, this) || !rov.RegisterDevice(_enId, this)) return false;
    43dc:	11 23       	and	r17, r17
    43de:	09 f4       	brne	.+2      	; 0x43e2 <_Z16initializeServosv+0x300>
    43e0:	a6 c0       	rjmp	.+332    	; 0x452e <_Z16initializeServosv+0x44c>
		
		_servo->setPulse(1500);
    43e2:	80 91 e3 09 	lds	r24, 0x09E3	; 0x8009e3 <ServoB1+0x4>
    43e6:	90 91 e4 09 	lds	r25, 0x09E4	; 0x8009e4 <ServoB1+0x5>
    43ea:	dc 01       	movw	r26, r24
    43ec:	ed 91       	ld	r30, X+
    43ee:	fc 91       	ld	r31, X
    43f0:	01 90       	ld	r0, Z+
    43f2:	f0 81       	ld	r31, Z
    43f4:	e0 2d       	mov	r30, r0
    43f6:	6c ed       	ldi	r22, 0xDC	; 220
    43f8:	75 e0       	ldi	r23, 0x05	; 5
    43fa:	19 95       	eicall
	if(!ServoA3.begin()) return 0x13;
	if(!ServoA4.begin()) return 0x14;
	if(!ServoA5.begin()) return 0x15;
	
	if(!ServoB1.begin()) return 0x21;
	if(!ServoB2.begin()) return 0x22;
    43fc:	89 ed       	ldi	r24, 0xD9	; 217
    43fe:	99 e0       	ldi	r25, 0x09	; 9
    4400:	ef dd       	rcall	.-1058   	; 0x3fe0 <_ZN13ServoActuator5beginEv>
    4402:	c8 2f       	mov	r28, r24
    4404:	88 23       	and	r24, r24
    4406:	09 f4       	brne	.+2      	; 0x440a <_Z16initializeServosv+0x328>
    4408:	94 c0       	rjmp	.+296    	; 0x4532 <_Z16initializeServosv+0x450>
	if(!ServoB3.begin()) return 0x23;
    440a:	83 ed       	ldi	r24, 0xD3	; 211
    440c:	99 e0       	ldi	r25, 0x09	; 9
    440e:	e8 dd       	rcall	.-1072   	; 0x3fe0 <_ZN13ServoActuator5beginEv>
    4410:	d8 2f       	mov	r29, r24
    4412:	88 23       	and	r24, r24
    4414:	09 f4       	brne	.+2      	; 0x4418 <_Z16initializeServosv+0x336>
    4416:	a0 c0       	rjmp	.+320    	; 0x4558 <_Z16initializeServosv+0x476>
	if(!ServoB4.begin()) return 0x24;
    4418:	8d ec       	ldi	r24, 0xCD	; 205
    441a:	99 e0       	ldi	r25, 0x09	; 9
    441c:	e1 dd       	rcall	.-1086   	; 0x3fe0 <_ZN13ServoActuator5beginEv>
    441e:	c8 2f       	mov	r28, r24
    4420:	88 23       	and	r24, r24
    4422:	09 f4       	brne	.+2      	; 0x4426 <_Z16initializeServosv+0x344>
    4424:	88 c0       	rjmp	.+272    	; 0x4536 <_Z16initializeServosv+0x454>
	if(!ServoB5.begin()) return 0x25;
    4426:	87 ec       	ldi	r24, 0xC7	; 199
    4428:	99 e0       	ldi	r25, 0x09	; 9
    442a:	da dd       	rcall	.-1100   	; 0x3fe0 <_ZN13ServoActuator5beginEv>
    442c:	d8 2f       	mov	r29, r24
    442e:	88 23       	and	r24, r24
    4430:	09 f4       	brne	.+2      	; 0x4434 <_Z16initializeServosv+0x352>
    4432:	92 c0       	rjmp	.+292    	; 0x4558 <_Z16initializeServosv+0x476>
	if(!ServoB6.begin()) return 0x26;
    4434:	81 ec       	ldi	r24, 0xC1	; 193
    4436:	99 e0       	ldi	r25, 0x09	; 9
    4438:	d3 dd       	rcall	.-1114   	; 0x3fe0 <_ZN13ServoActuator5beginEv>
    443a:	c8 2f       	mov	r28, r24
    443c:	88 23       	and	r24, r24
    443e:	09 f4       	brne	.+2      	; 0x4442 <_Z16initializeServosv+0x360>
    4440:	7c c0       	rjmp	.+248    	; 0x453a <_Z16initializeServosv+0x458>
	
	if(!ServoC1.begin()) return 0x31;
    4442:	8b eb       	ldi	r24, 0xBB	; 187
    4444:	99 e0       	ldi	r25, 0x09	; 9
    4446:	cc dd       	rcall	.-1128   	; 0x3fe0 <_ZN13ServoActuator5beginEv>
    4448:	d8 2f       	mov	r29, r24
    444a:	88 23       	and	r24, r24
    444c:	09 f4       	brne	.+2      	; 0x4450 <_Z16initializeServosv+0x36e>
    444e:	84 c0       	rjmp	.+264    	; 0x4558 <_Z16initializeServosv+0x476>
	if(!ServoC2.begin()) return 0x32;
    4450:	85 eb       	ldi	r24, 0xB5	; 181
    4452:	99 e0       	ldi	r25, 0x09	; 9
    4454:	c5 dd       	rcall	.-1142   	; 0x3fe0 <_ZN13ServoActuator5beginEv>
    4456:	c8 2f       	mov	r28, r24
    4458:	88 23       	and	r24, r24
    445a:	09 f4       	brne	.+2      	; 0x445e <_Z16initializeServosv+0x37c>
    445c:	70 c0       	rjmp	.+224    	; 0x453e <_Z16initializeServosv+0x45c>
	if(!ServoC3.begin()) return 0x33;
    445e:	8f ea       	ldi	r24, 0xAF	; 175
    4460:	99 e0       	ldi	r25, 0x09	; 9
    4462:	be dd       	rcall	.-1156   	; 0x3fe0 <_ZN13ServoActuator5beginEv>
    4464:	d8 2f       	mov	r29, r24
    4466:	88 23       	and	r24, r24
    4468:	09 f4       	brne	.+2      	; 0x446c <_Z16initializeServosv+0x38a>
    446a:	76 c0       	rjmp	.+236    	; 0x4558 <_Z16initializeServosv+0x476>
	if(!ServoC4.begin()) return 0x34;
    446c:	89 ea       	ldi	r24, 0xA9	; 169
    446e:	99 e0       	ldi	r25, 0x09	; 9
    4470:	b7 dd       	rcall	.-1170   	; 0x3fe0 <_ZN13ServoActuator5beginEv>
    4472:	c8 2f       	mov	r28, r24
    4474:	88 23       	and	r24, r24
    4476:	09 f4       	brne	.+2      	; 0x447a <_Z16initializeServosv+0x398>
    4478:	64 c0       	rjmp	.+200    	; 0x4542 <_Z16initializeServosv+0x460>
	if(!ServoC5.begin()) return 0x35;
    447a:	83 ea       	ldi	r24, 0xA3	; 163
    447c:	99 e0       	ldi	r25, 0x09	; 9
    447e:	b0 dd       	rcall	.-1184   	; 0x3fe0 <_ZN13ServoActuator5beginEv>
    4480:	d8 2f       	mov	r29, r24
    4482:	88 23       	and	r24, r24
    4484:	09 f4       	brne	.+2      	; 0x4488 <_Z16initializeServosv+0x3a6>
    4486:	68 c0       	rjmp	.+208    	; 0x4558 <_Z16initializeServosv+0x476>
	if(!ServoC6.begin()) return 0x36;
    4488:	8d e9       	ldi	r24, 0x9D	; 157
    448a:	99 e0       	ldi	r25, 0x09	; 9
    448c:	a9 dd       	rcall	.-1198   	; 0x3fe0 <_ZN13ServoActuator5beginEv>
    448e:	c8 2f       	mov	r28, r24
    4490:	88 23       	and	r24, r24
    4492:	09 f4       	brne	.+2      	; 0x4496 <_Z16initializeServosv+0x3b4>
    4494:	58 c0       	rjmp	.+176    	; 0x4546 <_Z16initializeServosv+0x464>
	if(!ServoC7.begin()) return 0x37;
    4496:	87 e9       	ldi	r24, 0x97	; 151
    4498:	99 e0       	ldi	r25, 0x09	; 9
    449a:	a2 dd       	rcall	.-1212   	; 0x3fe0 <_ZN13ServoActuator5beginEv>
    449c:	d8 2f       	mov	r29, r24
    449e:	88 23       	and	r24, r24
    44a0:	09 f4       	brne	.+2      	; 0x44a4 <_Z16initializeServosv+0x3c2>
    44a2:	5a c0       	rjmp	.+180    	; 0x4558 <_Z16initializeServosv+0x476>
	if(!ServoC8.begin()) return 0x38;
    44a4:	81 e9       	ldi	r24, 0x91	; 145
    44a6:	99 e0       	ldi	r25, 0x09	; 9
    44a8:	9b dd       	rcall	.-1226   	; 0x3fe0 <_ZN13ServoActuator5beginEv>
    44aa:	c8 2f       	mov	r28, r24
    44ac:	88 23       	and	r24, r24
    44ae:	09 f4       	brne	.+2      	; 0x44b2 <_Z16initializeServosv+0x3d0>
    44b0:	4c c0       	rjmp	.+152    	; 0x454a <_Z16initializeServosv+0x468>
	
	if(!ServoD1.begin()) return 0x41;
    44b2:	8b e8       	ldi	r24, 0x8B	; 139
    44b4:	99 e0       	ldi	r25, 0x09	; 9
    44b6:	94 dd       	rcall	.-1240   	; 0x3fe0 <_ZN13ServoActuator5beginEv>
    44b8:	d8 2f       	mov	r29, r24
    44ba:	88 23       	and	r24, r24
    44bc:	09 f4       	brne	.+2      	; 0x44c0 <_Z16initializeServosv+0x3de>
    44be:	4c c0       	rjmp	.+152    	; 0x4558 <_Z16initializeServosv+0x476>
	if(!ServoD2.begin()) return 0x42;
    44c0:	85 e8       	ldi	r24, 0x85	; 133
    44c2:	99 e0       	ldi	r25, 0x09	; 9
    44c4:	8d dd       	rcall	.-1254   	; 0x3fe0 <_ZN13ServoActuator5beginEv>
    44c6:	c8 2f       	mov	r28, r24
    44c8:	88 23       	and	r24, r24
    44ca:	09 f4       	brne	.+2      	; 0x44ce <_Z16initializeServosv+0x3ec>
	if(!ServoD3.begin()) return 0x43;
    44cc:	40 c0       	rjmp	.+128    	; 0x454e <_Z16initializeServosv+0x46c>
    44ce:	8f e7       	ldi	r24, 0x7F	; 127
    44d0:	99 e0       	ldi	r25, 0x09	; 9
    44d2:	86 dd       	rcall	.-1268   	; 0x3fe0 <_ZN13ServoActuator5beginEv>
    44d4:	d8 2f       	mov	r29, r24
    44d6:	88 23       	and	r24, r24
    44d8:	09 f4       	brne	.+2      	; 0x44dc <_Z16initializeServosv+0x3fa>
	if(!ServoD4.begin()) return 0x44;
    44da:	3e c0       	rjmp	.+124    	; 0x4558 <_Z16initializeServosv+0x476>
    44dc:	89 e7       	ldi	r24, 0x79	; 121
    44de:	99 e0       	ldi	r25, 0x09	; 9
    44e0:	7f dd       	rcall	.-1282   	; 0x3fe0 <_ZN13ServoActuator5beginEv>
    44e2:	c8 2f       	mov	r28, r24
    44e4:	88 23       	and	r24, r24
	if(!ServoD5.begin()) return 0x45;
    44e6:	a9 f1       	breq	.+106    	; 0x4552 <_Z16initializeServosv+0x470>
    44e8:	83 e7       	ldi	r24, 0x73	; 115
    44ea:	99 e0       	ldi	r25, 0x09	; 9
    44ec:	79 dd       	rcall	.-1294   	; 0x3fe0 <_ZN13ServoActuator5beginEv>
    44ee:	d8 2f       	mov	r29, r24
    44f0:	88 23       	and	r24, r24
	if(!ServoD6.begin()) return 0x46;
    44f2:	91 f1       	breq	.+100    	; 0x4558 <_Z16initializeServosv+0x476>
    44f4:	8d e6       	ldi	r24, 0x6D	; 109
    44f6:	99 e0       	ldi	r25, 0x09	; 9
    44f8:	73 dd       	rcall	.-1306   	; 0x3fe0 <_ZN13ServoActuator5beginEv>
    44fa:	c8 2f       	mov	r28, r24
    44fc:	88 23       	and	r24, r24
    44fe:	59 f1       	breq	.+86     	; 0x4556 <_Z16initializeServosv+0x474>
	if(!ServoD7.begin()) return 0x47;
    4500:	87 e6       	ldi	r24, 0x67	; 103
    4502:	99 e0       	ldi	r25, 0x09	; 9
    4504:	6d dd       	rcall	.-1318   	; 0x3fe0 <_ZN13ServoActuator5beginEv>
    4506:	88 23       	and	r24, r24
    4508:	39 f1       	breq	.+78     	; 0x4558 <_Z16initializeServosv+0x476>
    450a:	81 e6       	ldi	r24, 0x61	; 97
	if(!ServoD8.begin()) return 0x48;
    450c:	99 e0       	ldi	r25, 0x09	; 9
    450e:	68 dd       	rcall	.-1328   	; 0x3fe0 <_ZN13ServoActuator5beginEv>
    4510:	c1 e0       	ldi	r28, 0x01	; 1
    4512:	c8 27       	eor	r28, r24
    4514:	21 c0       	rjmp	.+66     	; 0x4558 <_Z16initializeServosv+0x476>
    4516:	c1 e0       	ldi	r28, 0x01	; 1
    4518:	1f c0       	rjmp	.+62     	; 0x4558 <_Z16initializeServosv+0x476>
	Servo1.begin();
	Servo3.begin();
	Servo4.begin();
	Servo5.begin();
	
	if(!PcaServoController.begin()) return 0x01;
    451a:	cd 2f       	mov	r28, r29
    451c:	1d c0       	rjmp	.+58     	; 0x4558 <_Z16initializeServosv+0x476>
	Serial.println("Initialized Twi Servo Controller.");
	
	if(!ServoA1.begin()) return 0x11;
	if(!ServoA2.begin()) return 0x12;
    451e:	cd 2f       	mov	r28, r29
    4520:	1b c0       	rjmp	.+54     	; 0x4558 <_Z16initializeServosv+0x476>
    4522:	cd 2f       	mov	r28, r29
    4524:	19 c0       	rjmp	.+50     	; 0x4558 <_Z16initializeServosv+0x476>
	if(!ServoA3.begin()) return 0x13;
	if(!ServoA4.begin()) return 0x14;
    4526:	cd 2f       	mov	r28, r29
    4528:	17 c0       	rjmp	.+46     	; 0x4558 <_Z16initializeServosv+0x476>
    452a:	cd 2f       	mov	r28, r29
    452c:	15 c0       	rjmp	.+42     	; 0x4558 <_Z16initializeServosv+0x476>
	if(!ServoA5.begin()) return 0x15;
	
	if(!ServoB1.begin()) return 0x21;
    452e:	cd 2f       	mov	r28, r29
    4530:	13 c0       	rjmp	.+38     	; 0x4558 <_Z16initializeServosv+0x476>
    4532:	c1 2f       	mov	r28, r17
    4534:	11 c0       	rjmp	.+34     	; 0x4558 <_Z16initializeServosv+0x476>
	if(!ServoB2.begin()) return 0x22;
    4536:	cd 2f       	mov	r28, r29
    4538:	0f c0       	rjmp	.+30     	; 0x4558 <_Z16initializeServosv+0x476>
	if(!ServoB3.begin()) return 0x23;
	if(!ServoB4.begin()) return 0x24;
    453a:	cd 2f       	mov	r28, r29
    453c:	0d c0       	rjmp	.+26     	; 0x4558 <_Z16initializeServosv+0x476>
	if(!ServoB5.begin()) return 0x25;
	if(!ServoB6.begin()) return 0x26;
    453e:	cd 2f       	mov	r28, r29
    4540:	0b c0       	rjmp	.+22     	; 0x4558 <_Z16initializeServosv+0x476>
	
	if(!ServoC1.begin()) return 0x31;
	if(!ServoC2.begin()) return 0x32;
    4542:	cd 2f       	mov	r28, r29
    4544:	09 c0       	rjmp	.+18     	; 0x4558 <_Z16initializeServosv+0x476>
	if(!ServoC3.begin()) return 0x33;
	if(!ServoC4.begin()) return 0x34;
    4546:	cd 2f       	mov	r28, r29
    4548:	07 c0       	rjmp	.+14     	; 0x4558 <_Z16initializeServosv+0x476>
	if(!ServoC5.begin()) return 0x35;
	if(!ServoC6.begin()) return 0x36;
    454a:	cd 2f       	mov	r28, r29
    454c:	05 c0       	rjmp	.+10     	; 0x4558 <_Z16initializeServosv+0x476>
	if(!ServoC7.begin()) return 0x37;
	if(!ServoC8.begin()) return 0x38;
    454e:	cd 2f       	mov	r28, r29
    4550:	03 c0       	rjmp	.+6      	; 0x4558 <_Z16initializeServosv+0x476>
	
	if(!ServoD1.begin()) return 0x41;
	if(!ServoD2.begin()) return 0x42;
    4552:	cd 2f       	mov	r28, r29
    4554:	01 c0       	rjmp	.+2      	; 0x4558 <_Z16initializeServosv+0x476>
	if(!ServoD3.begin()) return 0x43;
	if(!ServoD4.begin()) return 0x44;
    4556:	cd 2f       	mov	r28, r29
    4558:	8c 2f       	mov	r24, r28
	if(!ServoD5.begin()) return 0x45;
	if(!ServoD6.begin()) return 0x46;
    455a:	df 91       	pop	r29
	if(!ServoD7.begin()) return 0x47;
	if(!ServoD8.begin()) return 0x48;
	
	return 0;
}
    455c:	cf 91       	pop	r28
    455e:	1f 91       	pop	r17
    4560:	08 95       	ret

00004562 <_ZN5Robot14RegisterDeviceEhP9IRegister>:
    4562:	90 e0       	ldi	r25, 0x00	; 0
    4564:	fc 01       	movw	r30, r24
	return true;
}


bool Robot::RegisterDevice(uint8_t id, IRegister* device){
	if(registers[id] == NULL){
    4566:	ee 0f       	add	r30, r30
    4568:	ff 1f       	adc	r31, r31
    456a:	ed 5a       	subi	r30, 0xAD	; 173
    456c:	f5 4f       	sbci	r31, 0xF5	; 245
    456e:	20 81       	ld	r18, Z
    4570:	31 81       	ldd	r19, Z+1	; 0x01
    4572:	23 2b       	or	r18, r19
    4574:	49 f4       	brne	.+18     	; 0x4588 <_ZN5Robot14RegisterDeviceEhP9IRegister+0x26>
		//if(sensor.begin()){
		registers[id] = device; //TODO error handling
    4576:	88 0f       	add	r24, r24
    4578:	99 1f       	adc	r25, r25
    457a:	fc 01       	movw	r30, r24
    457c:	ed 5a       	subi	r30, 0xAD	; 173
    457e:	f5 4f       	sbci	r31, 0xF5	; 245
    4580:	71 83       	std	Z+1, r23	; 0x01
    4582:	60 83       	st	Z, r22
		//}
		return true;
    4584:	81 e0       	ldi	r24, 0x01	; 1
    4586:	08 95       	ret
	}else{
		//TODO id collisions
		return false;
    4588:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    458a:	08 95       	ret

0000458c <_ZN5Robot15CommandReceivedEhPKhh>:
		Serial.print(' ');
		Serial.print(data[i], HEX);
	}
	Serial.println();*/
	//if(len >= 1){
		if(registers[/*data[0]*/id] != NULL){
    458c:	e8 2f       	mov	r30, r24
    458e:	f0 e0       	ldi	r31, 0x00	; 0
    4590:	ee 0f       	add	r30, r30
    4592:	ff 1f       	adc	r31, r31
    4594:	ed 5a       	subi	r30, 0xAD	; 173
    4596:	f5 4f       	sbci	r31, 0xF5	; 245
    4598:	a0 81       	ld	r26, Z
    459a:	b1 81       	ldd	r27, Z+1	; 0x01
    459c:	10 97       	sbiw	r26, 0x00	; 0
    459e:	59 f0       	breq	.+22     	; 0x45b6 <_ZN5Robot15CommandReceivedEhPKhh+0x2a>
    45a0:	24 2f       	mov	r18, r20
    45a2:	ab 01       	movw	r20, r22
    45a4:	68 2f       	mov	r22, r24
			registers[/*data[0]*/id]->CommandReceived(/*data[0]*/id, data /*+ 1*/, len/* - 1*/);
    45a6:	ed 91       	ld	r30, X+
    45a8:	fc 91       	ld	r31, X
    45aa:	11 97       	sbiw	r26, 0x01	; 1
    45ac:	02 80       	ldd	r0, Z+2	; 0x02
    45ae:	f3 81       	ldd	r31, Z+3	; 0x03
    45b0:	e0 2d       	mov	r30, r0
    45b2:	cd 01       	movw	r24, r26
    45b4:	19 95       	eicall
    45b6:	08 95       	ret

000045b8 <_GLOBAL__sub_I__ZN5Robot9registersE>:
#include "../IReadable.h"

class DigitalSensor : public IReadable {
public:
	DigitalSensor(const uint8_t ID, Register& DDRPort, Register& PortPort, Register& PinPort, uint8_t Pin, bool Inversed = true) 
		: _id(ID), _pin(Pin), _pinPort(&PinPort), _inversed(Inversed)
    45b8:	ec e4       	ldi	r30, 0x4C	; 76
    45ba:	fa e0       	ldi	r31, 0x0A	; 10
    45bc:	45 e9       	ldi	r20, 0x95	; 149
    45be:	54 e0       	ldi	r21, 0x04	; 4
    45c0:	51 83       	std	Z+1, r21	; 0x01
    45c2:	40 83       	st	Z, r20
    45c4:	12 82       	std	Z+2, r1	; 0x02
    45c6:	81 e0       	ldi	r24, 0x01	; 1
    45c8:	83 83       	std	Z+3, r24	; 0x03
    45ca:	2f e2       	ldi	r18, 0x2F	; 47
    45cc:	30 e0       	ldi	r19, 0x00	; 0
    45ce:	35 83       	std	Z+5, r19	; 0x05
    45d0:	24 83       	std	Z+4, r18	; 0x04
    45d2:	86 83       	std	Z+6, r24	; 0x06
	{
		DDRPort &= ~Pin; //Enable input
    45d4:	80 98       	cbi	0x10, 0	; 16
		PortPort |= Pin; //Enable pullup
    45d6:	88 9a       	sbi	0x11, 0	; 17
#include "../IReadable.h"

class DigitalSensor : public IReadable {
public:
	DigitalSensor(const uint8_t ID, Register& DDRPort, Register& PortPort, Register& PinPort, uint8_t Pin, bool Inversed = true) 
		: _id(ID), _pin(Pin), _pinPort(&PinPort), _inversed(Inversed)
    45d8:	e5 e4       	ldi	r30, 0x45	; 69
    45da:	fa e0       	ldi	r31, 0x0A	; 10
    45dc:	51 83       	std	Z+1, r21	; 0x01
    45de:	40 83       	st	Z, r20
    45e0:	82 83       	std	Z+2, r24	; 0x02
    45e2:	92 e0       	ldi	r25, 0x02	; 2
    45e4:	93 83       	std	Z+3, r25	; 0x03
    45e6:	35 83       	std	Z+5, r19	; 0x05
    45e8:	24 83       	std	Z+4, r18	; 0x04
    45ea:	86 83       	std	Z+6, r24	; 0x06
	{
		DDRPort &= ~Pin; //Enable input
    45ec:	81 98       	cbi	0x10, 1	; 16
		PortPort |= Pin; //Enable pullup
    45ee:	89 9a       	sbi	0x11, 1	; 17

#include "../IWritable.h"
class DigitalActuator : public IWritable{
public:
	DigitalActuator(const uint8_t ID, Register& DDRPort, Register& PortPort, uint8_t Pin, bool Inversed = false)
		: _id(ID), _pin(Pin), _portPort(&PortPort), _inversed(Inversed)
    45f0:	ee e3       	ldi	r30, 0x3E	; 62
    45f2:	fa e0       	ldi	r31, 0x0A	; 10
    45f4:	21 ea       	ldi	r18, 0xA1	; 161
    45f6:	34 e0       	ldi	r19, 0x04	; 4
    45f8:	31 83       	std	Z+1, r19	; 0x01
    45fa:	20 83       	st	Z, r18
    45fc:	92 83       	std	Z+2, r25	; 0x02
    45fe:	80 e8       	ldi	r24, 0x80	; 128
    4600:	83 83       	std	Z+3, r24	; 0x03
    4602:	85 e2       	ldi	r24, 0x25	; 37
    4604:	90 e0       	ldi	r25, 0x00	; 0
    4606:	95 83       	std	Z+5, r25	; 0x05
    4608:	84 83       	std	Z+4, r24	; 0x04
    460a:	16 82       	std	Z+6, r1	; 0x06
	{
		DDRPort |= Pin;
    460c:	27 9a       	sbi	0x04, 7	; 4
IRegister* Robot::registers[NUM_DEVICES];

DigitalSensor Button0(0, DDR_BTN0, PORT_BTN0, PIN_BTN0, MASK_BTN0);
DigitalSensor Button1(1, DDR_BTN1, PORT_BTN1, PIN_BTN1, MASK_BTN1);
DigitalActuator LED(2, DDR_LED, PORT_LED, MASK_LED);
PressureSensor Pressure(3, Timer0);
    460e:	4b ed       	ldi	r20, 0xDB	; 219
    4610:	57 e0       	ldi	r21, 0x07	; 7
    4612:	63 e0       	ldi	r22, 0x03	; 3
    4614:	82 e1       	ldi	r24, 0x12	; 18
    4616:	9a e0       	ldi	r25, 0x0A	; 10
    4618:	38 d3       	rcall	.+1648   	; 0x4c8a <_ZN14PressureSensorC1EhR13HardwareTimer>
ImuSensor Imu(4, 5);
    461a:	45 e0       	ldi	r20, 0x05	; 5
    461c:	64 e0       	ldi	r22, 0x04	; 4
    461e:	83 e0       	ldi	r24, 0x03	; 3
    4620:	9a e0       	ldi	r25, 0x0A	; 10
    4622:	7c d2       	rcall	.+1272   	; 0x4b1c <_ZN9ImuSensorC1Ehh>
#include "../Micro/CpuFreq.h"

class ServoActuator : public IWritable{
public:
	ServoActuator(const uint8_t id, const uint8_t enId, PcbServo &servo)
		: _id(id), _enId(enId), _servo(&servo)
    4624:	ed ef       	ldi	r30, 0xFD	; 253
    4626:	f9 e0       	ldi	r31, 0x09	; 9
    4628:	8d ea       	ldi	r24, 0xAD	; 173
    462a:	94 e0       	ldi	r25, 0x04	; 4
    462c:	91 83       	std	Z+1, r25	; 0x01
    462e:	80 83       	st	Z, r24
    4630:	26 e0       	ldi	r18, 0x06	; 6
    4632:	22 83       	std	Z+2, r18	; 0x02
    4634:	27 e0       	ldi	r18, 0x07	; 7
    4636:	23 83       	std	Z+3, r18	; 0x03
    4638:	29 e5       	ldi	r18, 0x59	; 89
    463a:	39 e0       	ldi	r19, 0x09	; 9
    463c:	35 83       	std	Z+5, r19	; 0x05
    463e:	24 83       	std	Z+4, r18	; 0x04
    4640:	e7 ef       	ldi	r30, 0xF7	; 247
    4642:	f9 e0       	ldi	r31, 0x09	; 9
    4644:	91 83       	std	Z+1, r25	; 0x01
    4646:	80 83       	st	Z, r24
    4648:	28 e0       	ldi	r18, 0x08	; 8
    464a:	22 83       	std	Z+2, r18	; 0x02
    464c:	29 e0       	ldi	r18, 0x09	; 9
    464e:	23 83       	std	Z+3, r18	; 0x03
    4650:	24 e5       	ldi	r18, 0x54	; 84
    4652:	39 e0       	ldi	r19, 0x09	; 9
    4654:	35 83       	std	Z+5, r19	; 0x05
    4656:	24 83       	std	Z+4, r18	; 0x04
    4658:	e1 ef       	ldi	r30, 0xF1	; 241
    465a:	f9 e0       	ldi	r31, 0x09	; 9
    465c:	91 83       	std	Z+1, r25	; 0x01
    465e:	80 83       	st	Z, r24
    4660:	2a e0       	ldi	r18, 0x0A	; 10
    4662:	22 83       	std	Z+2, r18	; 0x02
    4664:	2b e0       	ldi	r18, 0x0B	; 11
    4666:	23 83       	std	Z+3, r18	; 0x03
    4668:	2f e4       	ldi	r18, 0x4F	; 79
    466a:	39 e0       	ldi	r19, 0x09	; 9
    466c:	35 83       	std	Z+5, r19	; 0x05
    466e:	24 83       	std	Z+4, r18	; 0x04
    4670:	eb ee       	ldi	r30, 0xEB	; 235
    4672:	f9 e0       	ldi	r31, 0x09	; 9
    4674:	91 83       	std	Z+1, r25	; 0x01
    4676:	80 83       	st	Z, r24
    4678:	2c e0       	ldi	r18, 0x0C	; 12
    467a:	22 83       	std	Z+2, r18	; 0x02
    467c:	2d e0       	ldi	r18, 0x0D	; 13
    467e:	23 83       	std	Z+3, r18	; 0x03
    4680:	2a e4       	ldi	r18, 0x4A	; 74
    4682:	39 e0       	ldi	r19, 0x09	; 9
    4684:	35 83       	std	Z+5, r19	; 0x05
    4686:	24 83       	std	Z+4, r18	; 0x04
    4688:	e5 ee       	ldi	r30, 0xE5	; 229
    468a:	f9 e0       	ldi	r31, 0x09	; 9
    468c:	91 83       	std	Z+1, r25	; 0x01
    468e:	80 83       	st	Z, r24
    4690:	2e e0       	ldi	r18, 0x0E	; 14
    4692:	22 83       	std	Z+2, r18	; 0x02
    4694:	2f e0       	ldi	r18, 0x0F	; 15
    4696:	23 83       	std	Z+3, r18	; 0x03
    4698:	25 e4       	ldi	r18, 0x45	; 69
    469a:	39 e0       	ldi	r19, 0x09	; 9
    469c:	35 83       	std	Z+5, r19	; 0x05
    469e:	24 83       	std	Z+4, r18	; 0x04
    46a0:	ef ed       	ldi	r30, 0xDF	; 223
    46a2:	f9 e0       	ldi	r31, 0x09	; 9
    46a4:	91 83       	std	Z+1, r25	; 0x01
    46a6:	80 83       	st	Z, r24
    46a8:	20 e1       	ldi	r18, 0x10	; 16
    46aa:	22 83       	std	Z+2, r18	; 0x02
    46ac:	21 e1       	ldi	r18, 0x11	; 17
    46ae:	23 83       	std	Z+3, r18	; 0x03
    46b0:	20 e4       	ldi	r18, 0x40	; 64
    46b2:	39 e0       	ldi	r19, 0x09	; 9
    46b4:	35 83       	std	Z+5, r19	; 0x05
    46b6:	24 83       	std	Z+4, r18	; 0x04
    46b8:	e9 ed       	ldi	r30, 0xD9	; 217
    46ba:	f9 e0       	ldi	r31, 0x09	; 9
    46bc:	91 83       	std	Z+1, r25	; 0x01
    46be:	80 83       	st	Z, r24
    46c0:	22 e1       	ldi	r18, 0x12	; 18
    46c2:	22 83       	std	Z+2, r18	; 0x02
    46c4:	23 e1       	ldi	r18, 0x13	; 19
    46c6:	23 83       	std	Z+3, r18	; 0x03
    46c8:	2b e3       	ldi	r18, 0x3B	; 59
    46ca:	39 e0       	ldi	r19, 0x09	; 9
    46cc:	35 83       	std	Z+5, r19	; 0x05
    46ce:	24 83       	std	Z+4, r18	; 0x04
    46d0:	e3 ed       	ldi	r30, 0xD3	; 211
    46d2:	f9 e0       	ldi	r31, 0x09	; 9
    46d4:	91 83       	std	Z+1, r25	; 0x01
    46d6:	80 83       	st	Z, r24
    46d8:	24 e1       	ldi	r18, 0x14	; 20
    46da:	22 83       	std	Z+2, r18	; 0x02
    46dc:	25 e1       	ldi	r18, 0x15	; 21
    46de:	23 83       	std	Z+3, r18	; 0x03
    46e0:	26 e3       	ldi	r18, 0x36	; 54
    46e2:	39 e0       	ldi	r19, 0x09	; 9
    46e4:	35 83       	std	Z+5, r19	; 0x05
    46e6:	24 83       	std	Z+4, r18	; 0x04
    46e8:	ed ec       	ldi	r30, 0xCD	; 205
    46ea:	f9 e0       	ldi	r31, 0x09	; 9
    46ec:	91 83       	std	Z+1, r25	; 0x01
    46ee:	80 83       	st	Z, r24
    46f0:	26 e1       	ldi	r18, 0x16	; 22
    46f2:	22 83       	std	Z+2, r18	; 0x02
    46f4:	27 e1       	ldi	r18, 0x17	; 23
    46f6:	23 83       	std	Z+3, r18	; 0x03
    46f8:	21 e3       	ldi	r18, 0x31	; 49
    46fa:	39 e0       	ldi	r19, 0x09	; 9
    46fc:	35 83       	std	Z+5, r19	; 0x05
    46fe:	24 83       	std	Z+4, r18	; 0x04
    4700:	e7 ec       	ldi	r30, 0xC7	; 199
    4702:	f9 e0       	ldi	r31, 0x09	; 9
    4704:	91 83       	std	Z+1, r25	; 0x01
    4706:	80 83       	st	Z, r24
    4708:	28 e1       	ldi	r18, 0x18	; 24
    470a:	22 83       	std	Z+2, r18	; 0x02
    470c:	29 e1       	ldi	r18, 0x19	; 25
    470e:	23 83       	std	Z+3, r18	; 0x03
    4710:	2c e2       	ldi	r18, 0x2C	; 44
    4712:	39 e0       	ldi	r19, 0x09	; 9
    4714:	35 83       	std	Z+5, r19	; 0x05
    4716:	24 83       	std	Z+4, r18	; 0x04
    4718:	e1 ec       	ldi	r30, 0xC1	; 193
    471a:	f9 e0       	ldi	r31, 0x09	; 9
    471c:	91 83       	std	Z+1, r25	; 0x01
    471e:	80 83       	st	Z, r24
    4720:	2a e1       	ldi	r18, 0x1A	; 26
    4722:	22 83       	std	Z+2, r18	; 0x02
    4724:	2b e1       	ldi	r18, 0x1B	; 27
    4726:	23 83       	std	Z+3, r18	; 0x03
    4728:	27 e2       	ldi	r18, 0x27	; 39
    472a:	39 e0       	ldi	r19, 0x09	; 9
    472c:	35 83       	std	Z+5, r19	; 0x05
    472e:	24 83       	std	Z+4, r18	; 0x04
    4730:	eb eb       	ldi	r30, 0xBB	; 187
    4732:	f9 e0       	ldi	r31, 0x09	; 9
    4734:	91 83       	std	Z+1, r25	; 0x01
    4736:	80 83       	st	Z, r24
    4738:	2c e1       	ldi	r18, 0x1C	; 28
    473a:	22 83       	std	Z+2, r18	; 0x02
    473c:	2d e1       	ldi	r18, 0x1D	; 29
    473e:	23 83       	std	Z+3, r18	; 0x03
    4740:	29 e1       	ldi	r18, 0x19	; 25
    4742:	39 e0       	ldi	r19, 0x09	; 9
    4744:	35 83       	std	Z+5, r19	; 0x05
    4746:	24 83       	std	Z+4, r18	; 0x04
    4748:	e5 eb       	ldi	r30, 0xB5	; 181
    474a:	f9 e0       	ldi	r31, 0x09	; 9
    474c:	91 83       	std	Z+1, r25	; 0x01
    474e:	80 83       	st	Z, r24
    4750:	2e e1       	ldi	r18, 0x1E	; 30
    4752:	22 83       	std	Z+2, r18	; 0x02
    4754:	2f e1       	ldi	r18, 0x1F	; 31
    4756:	23 83       	std	Z+3, r18	; 0x03
    4758:	21 e1       	ldi	r18, 0x11	; 17
    475a:	39 e0       	ldi	r19, 0x09	; 9
    475c:	35 83       	std	Z+5, r19	; 0x05
    475e:	24 83       	std	Z+4, r18	; 0x04
    4760:	ef ea       	ldi	r30, 0xAF	; 175
    4762:	f9 e0       	ldi	r31, 0x09	; 9
    4764:	91 83       	std	Z+1, r25	; 0x01
    4766:	80 83       	st	Z, r24
    4768:	20 e2       	ldi	r18, 0x20	; 32
    476a:	22 83       	std	Z+2, r18	; 0x02
    476c:	21 e2       	ldi	r18, 0x21	; 33
    476e:	23 83       	std	Z+3, r18	; 0x03
    4770:	29 e0       	ldi	r18, 0x09	; 9
    4772:	39 e0       	ldi	r19, 0x09	; 9
    4774:	35 83       	std	Z+5, r19	; 0x05
    4776:	24 83       	std	Z+4, r18	; 0x04
    4778:	e9 ea       	ldi	r30, 0xA9	; 169
    477a:	f9 e0       	ldi	r31, 0x09	; 9
    477c:	91 83       	std	Z+1, r25	; 0x01
    477e:	80 83       	st	Z, r24
    4780:	22 e2       	ldi	r18, 0x22	; 34
    4782:	22 83       	std	Z+2, r18	; 0x02
    4784:	23 e2       	ldi	r18, 0x23	; 35
    4786:	23 83       	std	Z+3, r18	; 0x03
    4788:	21 e0       	ldi	r18, 0x01	; 1
    478a:	39 e0       	ldi	r19, 0x09	; 9
    478c:	35 83       	std	Z+5, r19	; 0x05
    478e:	24 83       	std	Z+4, r18	; 0x04
    4790:	e3 ea       	ldi	r30, 0xA3	; 163
    4792:	f9 e0       	ldi	r31, 0x09	; 9
    4794:	91 83       	std	Z+1, r25	; 0x01
    4796:	80 83       	st	Z, r24
    4798:	24 e2       	ldi	r18, 0x24	; 36
    479a:	22 83       	std	Z+2, r18	; 0x02
    479c:	25 e2       	ldi	r18, 0x25	; 37
    479e:	23 83       	std	Z+3, r18	; 0x03
    47a0:	29 ef       	ldi	r18, 0xF9	; 249
    47a2:	38 e0       	ldi	r19, 0x08	; 8
    47a4:	35 83       	std	Z+5, r19	; 0x05
    47a6:	24 83       	std	Z+4, r18	; 0x04
    47a8:	ed e9       	ldi	r30, 0x9D	; 157
    47aa:	f9 e0       	ldi	r31, 0x09	; 9
    47ac:	91 83       	std	Z+1, r25	; 0x01
    47ae:	80 83       	st	Z, r24
    47b0:	26 e2       	ldi	r18, 0x26	; 38
    47b2:	22 83       	std	Z+2, r18	; 0x02
    47b4:	27 e2       	ldi	r18, 0x27	; 39
    47b6:	23 83       	std	Z+3, r18	; 0x03
    47b8:	21 ef       	ldi	r18, 0xF1	; 241
    47ba:	38 e0       	ldi	r19, 0x08	; 8
    47bc:	35 83       	std	Z+5, r19	; 0x05
    47be:	24 83       	std	Z+4, r18	; 0x04
    47c0:	e7 e9       	ldi	r30, 0x97	; 151
    47c2:	f9 e0       	ldi	r31, 0x09	; 9
    47c4:	91 83       	std	Z+1, r25	; 0x01
    47c6:	80 83       	st	Z, r24
    47c8:	28 e2       	ldi	r18, 0x28	; 40
    47ca:	22 83       	std	Z+2, r18	; 0x02
    47cc:	29 e2       	ldi	r18, 0x29	; 41
    47ce:	23 83       	std	Z+3, r18	; 0x03
    47d0:	29 ee       	ldi	r18, 0xE9	; 233
    47d2:	38 e0       	ldi	r19, 0x08	; 8
    47d4:	35 83       	std	Z+5, r19	; 0x05
    47d6:	24 83       	std	Z+4, r18	; 0x04
    47d8:	e1 e9       	ldi	r30, 0x91	; 145
    47da:	f9 e0       	ldi	r31, 0x09	; 9
    47dc:	91 83       	std	Z+1, r25	; 0x01
    47de:	80 83       	st	Z, r24
    47e0:	2a e2       	ldi	r18, 0x2A	; 42
    47e2:	22 83       	std	Z+2, r18	; 0x02
    47e4:	2b e2       	ldi	r18, 0x2B	; 43
    47e6:	23 83       	std	Z+3, r18	; 0x03
    47e8:	21 ee       	ldi	r18, 0xE1	; 225
    47ea:	38 e0       	ldi	r19, 0x08	; 8
    47ec:	35 83       	std	Z+5, r19	; 0x05
    47ee:	24 83       	std	Z+4, r18	; 0x04
    47f0:	eb e8       	ldi	r30, 0x8B	; 139
    47f2:	f9 e0       	ldi	r31, 0x09	; 9
    47f4:	91 83       	std	Z+1, r25	; 0x01
    47f6:	80 83       	st	Z, r24
    47f8:	2c e2       	ldi	r18, 0x2C	; 44
    47fa:	22 83       	std	Z+2, r18	; 0x02
    47fc:	2d e2       	ldi	r18, 0x2D	; 45
    47fe:	23 83       	std	Z+3, r18	; 0x03
    4800:	29 ed       	ldi	r18, 0xD9	; 217
    4802:	38 e0       	ldi	r19, 0x08	; 8
    4804:	35 83       	std	Z+5, r19	; 0x05
    4806:	24 83       	std	Z+4, r18	; 0x04
    4808:	e5 e8       	ldi	r30, 0x85	; 133
    480a:	f9 e0       	ldi	r31, 0x09	; 9
    480c:	91 83       	std	Z+1, r25	; 0x01
    480e:	80 83       	st	Z, r24
    4810:	2e e2       	ldi	r18, 0x2E	; 46
    4812:	22 83       	std	Z+2, r18	; 0x02
    4814:	2f e2       	ldi	r18, 0x2F	; 47
    4816:	23 83       	std	Z+3, r18	; 0x03
    4818:	21 ed       	ldi	r18, 0xD1	; 209
    481a:	38 e0       	ldi	r19, 0x08	; 8
    481c:	35 83       	std	Z+5, r19	; 0x05
    481e:	24 83       	std	Z+4, r18	; 0x04
    4820:	ef e7       	ldi	r30, 0x7F	; 127
    4822:	f9 e0       	ldi	r31, 0x09	; 9
    4824:	91 83       	std	Z+1, r25	; 0x01
    4826:	80 83       	st	Z, r24
    4828:	20 e3       	ldi	r18, 0x30	; 48
    482a:	22 83       	std	Z+2, r18	; 0x02
    482c:	21 e3       	ldi	r18, 0x31	; 49
    482e:	23 83       	std	Z+3, r18	; 0x03
    4830:	29 ec       	ldi	r18, 0xC9	; 201
    4832:	38 e0       	ldi	r19, 0x08	; 8
    4834:	35 83       	std	Z+5, r19	; 0x05
    4836:	24 83       	std	Z+4, r18	; 0x04
    4838:	e9 e7       	ldi	r30, 0x79	; 121
    483a:	f9 e0       	ldi	r31, 0x09	; 9
    483c:	91 83       	std	Z+1, r25	; 0x01
    483e:	80 83       	st	Z, r24
    4840:	22 e3       	ldi	r18, 0x32	; 50
    4842:	22 83       	std	Z+2, r18	; 0x02
    4844:	23 e3       	ldi	r18, 0x33	; 51
    4846:	23 83       	std	Z+3, r18	; 0x03
    4848:	21 ec       	ldi	r18, 0xC1	; 193
    484a:	38 e0       	ldi	r19, 0x08	; 8
    484c:	35 83       	std	Z+5, r19	; 0x05
    484e:	24 83       	std	Z+4, r18	; 0x04
    4850:	e3 e7       	ldi	r30, 0x73	; 115
    4852:	f9 e0       	ldi	r31, 0x09	; 9
    4854:	91 83       	std	Z+1, r25	; 0x01
    4856:	80 83       	st	Z, r24
    4858:	24 e3       	ldi	r18, 0x34	; 52
    485a:	22 83       	std	Z+2, r18	; 0x02
    485c:	25 e3       	ldi	r18, 0x35	; 53
    485e:	23 83       	std	Z+3, r18	; 0x03
    4860:	29 eb       	ldi	r18, 0xB9	; 185
    4862:	38 e0       	ldi	r19, 0x08	; 8
    4864:	35 83       	std	Z+5, r19	; 0x05
    4866:	24 83       	std	Z+4, r18	; 0x04
    4868:	ed e6       	ldi	r30, 0x6D	; 109
    486a:	f9 e0       	ldi	r31, 0x09	; 9
    486c:	91 83       	std	Z+1, r25	; 0x01
    486e:	80 83       	st	Z, r24
    4870:	26 e3       	ldi	r18, 0x36	; 54
    4872:	22 83       	std	Z+2, r18	; 0x02
    4874:	27 e3       	ldi	r18, 0x37	; 55
    4876:	23 83       	std	Z+3, r18	; 0x03
    4878:	21 eb       	ldi	r18, 0xB1	; 177
    487a:	38 e0       	ldi	r19, 0x08	; 8
    487c:	35 83       	std	Z+5, r19	; 0x05
    487e:	24 83       	std	Z+4, r18	; 0x04
    4880:	e7 e6       	ldi	r30, 0x67	; 103
    4882:	f9 e0       	ldi	r31, 0x09	; 9
    4884:	91 83       	std	Z+1, r25	; 0x01
    4886:	80 83       	st	Z, r24
    4888:	28 e3       	ldi	r18, 0x38	; 56
    488a:	22 83       	std	Z+2, r18	; 0x02
    488c:	29 e3       	ldi	r18, 0x39	; 57
    488e:	23 83       	std	Z+3, r18	; 0x03
    4890:	29 ea       	ldi	r18, 0xA9	; 169
    4892:	38 e0       	ldi	r19, 0x08	; 8
    4894:	35 83       	std	Z+5, r19	; 0x05
    4896:	24 83       	std	Z+4, r18	; 0x04
    4898:	e1 e6       	ldi	r30, 0x61	; 97
    489a:	f9 e0       	ldi	r31, 0x09	; 9
    489c:	91 83       	std	Z+1, r25	; 0x01
    489e:	80 83       	st	Z, r24
    48a0:	8a e3       	ldi	r24, 0x3A	; 58
    48a2:	82 83       	std	Z+2, r24	; 0x02
    48a4:	8b e3       	ldi	r24, 0x3B	; 59
    48a6:	83 83       	std	Z+3, r24	; 0x03
    48a8:	81 ea       	ldi	r24, 0xA1	; 161
    48aa:	98 e0       	ldi	r25, 0x08	; 8
    48ac:	95 83       	std	Z+5, r25	; 0x05
    48ae:	84 83       	std	Z+4, r24	; 0x04

#include "../Micro/Peripherals/Wire.h"

class TwiRegister : public IWritable {
public:
	TwiRegister(const uint8_t id) : _id(id) {
    48b0:	ee e5       	ldi	r30, 0x5E	; 94
    48b2:	f9 e0       	ldi	r31, 0x09	; 9
    48b4:	89 eb       	ldi	r24, 0xB9	; 185
    48b6:	94 e0       	ldi	r25, 0x04	; 4
    48b8:	91 83       	std	Z+1, r25	; 0x01
    48ba:	80 83       	st	Z, r24
    48bc:	8c e3       	ldi	r24, 0x3C	; 60
    48be:	82 83       	std	Z+2, r24	; 0x02
    48c0:	08 95       	ret

000048c2 <_ZN5Robot5beginEv>:
	if(!ServoD8.begin()) return 0x48;
	
	return 0;
}

bool Robot::begin(){
    48c2:	0f 93       	push	r16
    48c4:	cf 93       	push	r28
    48c6:	e3 e5       	ldi	r30, 0x53	; 83
    48c8:	fa e0       	ldi	r31, 0x0A	; 10
    48ca:	83 e5       	ldi	r24, 0x53	; 83
    48cc:	9c e0       	ldi	r25, 0x0C	; 12
	for(uint16_t i = 0; i < NUM_DEVICES; i++){
		registers[i] = NULL;
    48ce:	11 92       	st	Z+, r1
    48d0:	11 92       	st	Z+, r1
	
	return 0;
}

bool Robot::begin(){
	for(uint16_t i = 0; i < NUM_DEVICES; i++){
    48d2:	e8 17       	cp	r30, r24
    48d4:	f9 07       	cpc	r31, r25
    48d6:	d9 f7       	brne	.-10     	; 0x48ce <_ZN5Robot5beginEv+0xc>
		registers[i] = NULL;
	}
	
	if(!EtherComm::begin(6001, 6002, DDR_ENC, PORT_ENC, MASK_ENC_CS)){
    48d8:	01 e0       	ldi	r16, 0x01	; 1
    48da:	28 e0       	ldi	r18, 0x08	; 8
    48dc:	31 e0       	ldi	r19, 0x01	; 1
    48de:	47 e0       	ldi	r20, 0x07	; 7
    48e0:	51 e0       	ldi	r21, 0x01	; 1
    48e2:	62 e7       	ldi	r22, 0x72	; 114
    48e4:	77 e1       	ldi	r23, 0x17	; 23
    48e6:	81 e7       	ldi	r24, 0x71	; 113
    48e8:	97 e1       	ldi	r25, 0x17	; 23
    48ea:	0e 94 4d 0b 	call	0x169a	; 0x169a <_ZN9EtherComm5beginEjjRVhS1_h>
    48ee:	c8 2f       	mov	r28, r24
    48f0:	81 11       	cpse	r24, r1
    48f2:	06 c0       	rjmp	.+12     	; 0x4900 <_ZN5Robot5beginEv+0x3e>
		Serial.println("Failed to access Ethernet controller.");
    48f4:	67 e0       	ldi	r22, 0x07	; 7
    48f6:	73 e0       	ldi	r23, 0x03	; 3
    48f8:	87 e7       	ldi	r24, 0x77	; 119
    48fa:	97 e0       	ldi	r25, 0x07	; 7
    48fc:	32 d2       	rcall	.+1124   	; 0x4d62 <_ZN5Print7printlnEPKc>
		return false;
    48fe:	b8 c0       	rjmp	.+368    	; 0x4a70 <_ZN5Robot5beginEv+0x1ae>
	}
	Serial.println("Connected to controller.");
    4900:	6d e2       	ldi	r22, 0x2D	; 45
    4902:	73 e0       	ldi	r23, 0x03	; 3
    4904:	87 e7       	ldi	r24, 0x77	; 119
    4906:	97 e0       	ldi	r25, 0x07	; 7
	
	uint8_t code = initializeServos();
    4908:	2c d2       	rcall	.+1112   	; 0x4d62 <_ZN5Print7printlnEPKc>
    490a:	eb db       	rcall	.-2090   	; 0x40e2 <_Z16initializeServosv>
    490c:	c8 2f       	mov	r28, r24
	if(code != 0){
    490e:	88 23       	and	r24, r24
		printServoErrorCode(code);
    4910:	21 f0       	breq	.+8      	; 0x491a <_ZN5Robot5beginEv+0x58>
    4912:	81 e0       	ldi	r24, 0x01	; 1
    4914:	a4 db       	rcall	.-2232   	; 0x405e <_Z19printServoErrorCodeh>
		return false;
    4916:	c0 e0       	ldi	r28, 0x00	; 0
    4918:	ab c0       	rjmp	.+342    	; 0x4a70 <_ZN5Robot5beginEv+0x1ae>
	}
	Serial.println("Servos initialized.");
    491a:	66 e4       	ldi	r22, 0x46	; 70
    491c:	73 e0       	ldi	r23, 0x03	; 3
    491e:	87 e7       	ldi	r24, 0x77	; 119
    4920:	97 e0       	ldi	r25, 0x07	; 7
    4922:	1f d2       	rcall	.+1086   	; 0x4d62 <_ZN5Print7printlnEPKc>
	return true;
}


bool Robot::RegisterDevice(uint8_t id, IRegister* device){
	if(registers[id] == NULL){
    4924:	80 91 4e 0a 	lds	r24, 0x0A4E	; 0x800a4e <Button0+0x2>
    4928:	90 e0       	ldi	r25, 0x00	; 0
    492a:	fc 01       	movw	r30, r24
    492c:	ee 0f       	add	r30, r30
    492e:	ff 1f       	adc	r31, r31
    4930:	ed 5a       	subi	r30, 0xAD	; 173
    4932:	f5 4f       	sbci	r31, 0xF5	; 245
    4934:	20 81       	ld	r18, Z
    4936:	31 81       	ldd	r19, Z+1	; 0x01
    4938:	23 2b       	or	r18, r19
    493a:	09 f0       	breq	.+2      	; 0x493e <_ZN5Robot5beginEv+0x7c>
    493c:	81 c0       	rjmp	.+258    	; 0x4a40 <_ZN5Robot5beginEv+0x17e>
		//if(sensor.begin()){
		registers[id] = device; //TODO error handling
    493e:	88 0f       	add	r24, r24
    4940:	99 1f       	adc	r25, r25
    4942:	fc 01       	movw	r30, r24
    4944:	ed 5a       	subi	r30, 0xAD	; 173
    4946:	f5 4f       	sbci	r31, 0xF5	; 245
    4948:	8c e4       	ldi	r24, 0x4C	; 76
    494a:	9a e0       	ldi	r25, 0x0A	; 10
    494c:	91 83       	std	Z+1, r25	; 0x01
	//TODO if robot can't be initialized, send diagnostics over ethernet?
	if(!Button0.begin()){
		Serial.println("Unable to initialize Button0.");
		return false;
	}
	Serial.println("Initialized Button0.");
    494e:	80 83       	st	Z, r24
    4950:	6a e5       	ldi	r22, 0x5A	; 90
    4952:	73 e0       	ldi	r23, 0x03	; 3
    4954:	87 e7       	ldi	r24, 0x77	; 119
    4956:	97 e0       	ldi	r25, 0x07	; 7
    4958:	04 d2       	rcall	.+1032   	; 0x4d62 <_ZN5Print7printlnEPKc>
	return true;
}


bool Robot::RegisterDevice(uint8_t id, IRegister* device){
	if(registers[id] == NULL){
    495a:	80 91 47 0a 	lds	r24, 0x0A47	; 0x800a47 <Button1+0x2>
    495e:	90 e0       	ldi	r25, 0x00	; 0
    4960:	fc 01       	movw	r30, r24
    4962:	ee 0f       	add	r30, r30
    4964:	ff 1f       	adc	r31, r31
    4966:	ed 5a       	subi	r30, 0xAD	; 173
    4968:	f5 4f       	sbci	r31, 0xF5	; 245
    496a:	20 81       	ld	r18, Z
    496c:	31 81       	ldd	r19, Z+1	; 0x01
    496e:	23 2b       	or	r18, r19
    4970:	09 f0       	breq	.+2      	; 0x4974 <_ZN5Robot5beginEv+0xb2>
    4972:	6c c0       	rjmp	.+216    	; 0x4a4c <_ZN5Robot5beginEv+0x18a>
		//if(sensor.begin()){
		registers[id] = device; //TODO error handling
    4974:	88 0f       	add	r24, r24
    4976:	99 1f       	adc	r25, r25
    4978:	fc 01       	movw	r30, r24
    497a:	ed 5a       	subi	r30, 0xAD	; 173
    497c:	f5 4f       	sbci	r31, 0xF5	; 245
    497e:	85 e4       	ldi	r24, 0x45	; 69
    4980:	9a e0       	ldi	r25, 0x0A	; 10
    4982:	91 83       	std	Z+1, r25	; 0x01
	
	if(!Button1.begin()){
		Serial.println("Unable to initialize Button1.");
		return false;
	}
	Serial.println("Initialized Button1.");
    4984:	80 83       	st	Z, r24
    4986:	6f e6       	ldi	r22, 0x6F	; 111
    4988:	73 e0       	ldi	r23, 0x03	; 3
    498a:	87 e7       	ldi	r24, 0x77	; 119
    498c:	97 e0       	ldi	r25, 0x07	; 7
    498e:	e9 d1       	rcall	.+978    	; 0x4d62 <_ZN5Print7printlnEPKc>
	return true;
}


bool Robot::RegisterDevice(uint8_t id, IRegister* device){
	if(registers[id] == NULL){
    4990:	80 91 40 0a 	lds	r24, 0x0A40	; 0x800a40 <LED+0x2>
    4994:	90 e0       	ldi	r25, 0x00	; 0
    4996:	fc 01       	movw	r30, r24
    4998:	ee 0f       	add	r30, r30
    499a:	ff 1f       	adc	r31, r31
    499c:	ed 5a       	subi	r30, 0xAD	; 173
    499e:	f5 4f       	sbci	r31, 0xF5	; 245
    49a0:	20 81       	ld	r18, Z
    49a2:	31 81       	ldd	r19, Z+1	; 0x01
    49a4:	23 2b       	or	r18, r19
    49a6:	09 f0       	breq	.+2      	; 0x49aa <_ZN5Robot5beginEv+0xe8>
    49a8:	57 c0       	rjmp	.+174    	; 0x4a58 <_ZN5Robot5beginEv+0x196>
		//if(sensor.begin()){
		registers[id] = device; //TODO error handling
    49aa:	88 0f       	add	r24, r24
    49ac:	99 1f       	adc	r25, r25
    49ae:	fc 01       	movw	r30, r24
    49b0:	ed 5a       	subi	r30, 0xAD	; 173
    49b2:	f5 4f       	sbci	r31, 0xF5	; 245
    49b4:	8e e3       	ldi	r24, 0x3E	; 62
    49b6:	9a e0       	ldi	r25, 0x0A	; 10
    49b8:	91 83       	std	Z+1, r25	; 0x01
	
	if(!LED.begin()){
		Serial.println("Unable to initialize LED.");
		return false;
	}
	Serial.println("Initialized LED.");
    49ba:	80 83       	st	Z, r24
    49bc:	64 e8       	ldi	r22, 0x84	; 132
    49be:	73 e0       	ldi	r23, 0x03	; 3
    49c0:	87 e7       	ldi	r24, 0x77	; 119
    49c2:	97 e0       	ldi	r25, 0x07	; 7
	
	if(!Imu.begin()){
    49c4:	ce d1       	rcall	.+924    	; 0x4d62 <_ZN5Print7printlnEPKc>
    49c6:	83 e0       	ldi	r24, 0x03	; 3
    49c8:	9a e0       	ldi	r25, 0x0A	; 10
    49ca:	6e d0       	rcall	.+220    	; 0x4aa8 <_ZN9ImuSensor5beginEv>
    49cc:	c8 2f       	mov	r28, r24
    49ce:	81 11       	cpse	r24, r1
		Serial.println("Unable to initialize IMU.");
    49d0:	06 c0       	rjmp	.+12     	; 0x49de <_ZN5Robot5beginEv+0x11c>
    49d2:	65 e9       	ldi	r22, 0x95	; 149
    49d4:	73 e0       	ldi	r23, 0x03	; 3
    49d6:	87 e7       	ldi	r24, 0x77	; 119
		return false;
    49d8:	97 e0       	ldi	r25, 0x07	; 7
	}
	Serial.println("Initialized IMU");
    49da:	c3 d1       	rcall	.+902    	; 0x4d62 <_ZN5Print7printlnEPKc>
    49dc:	49 c0       	rjmp	.+146    	; 0x4a70 <_ZN5Robot5beginEv+0x1ae>
    49de:	6f ea       	ldi	r22, 0xAF	; 175
    49e0:	73 e0       	ldi	r23, 0x03	; 3
    49e2:	87 e7       	ldi	r24, 0x77	; 119
	
	if(!Pressure.begin()){ 
    49e4:	97 e0       	ldi	r25, 0x07	; 7
    49e6:	bd d1       	rcall	.+890    	; 0x4d62 <_ZN5Print7printlnEPKc>
    49e8:	82 e1       	ldi	r24, 0x12	; 18
    49ea:	9a e0       	ldi	r25, 0x0A	; 10
    49ec:	c0 d0       	rcall	.+384    	; 0x4b6e <_ZN14PressureSensor5beginEv>
    49ee:	c8 2f       	mov	r28, r24
		Serial.println("Unable to initialize Pressure Sensor.");
    49f0:	81 11       	cpse	r24, r1
    49f2:	06 c0       	rjmp	.+12     	; 0x4a00 <_ZN5Robot5beginEv+0x13e>
    49f4:	6f eb       	ldi	r22, 0xBF	; 191
    49f6:	73 e0       	ldi	r23, 0x03	; 3
    49f8:	87 e7       	ldi	r24, 0x77	; 119
    49fa:	97 e0       	ldi	r25, 0x07	; 7
		return false;
    49fc:	b2 d1       	rcall	.+868    	; 0x4d62 <_ZN5Print7printlnEPKc>
	} 
	Serial.println("Initialized pressure sensor.");
    49fe:	38 c0       	rjmp	.+112    	; 0x4a70 <_ZN5Robot5beginEv+0x1ae>
    4a00:	65 ee       	ldi	r22, 0xE5	; 229
    4a02:	73 e0       	ldi	r23, 0x03	; 3
    4a04:	87 e7       	ldi	r24, 0x77	; 119
    4a06:	97 e0       	ldi	r25, 0x07	; 7
    4a08:	ac d1       	rcall	.+856    	; 0x4d62 <_ZN5Print7printlnEPKc>
	return true;
}


bool Robot::RegisterDevice(uint8_t id, IRegister* device){
	if(registers[id] == NULL){
    4a0a:	80 91 60 09 	lds	r24, 0x0960	; 0x800960 <TwiSettings+0x2>
    4a0e:	90 e0       	ldi	r25, 0x00	; 0
    4a10:	fc 01       	movw	r30, r24
    4a12:	ee 0f       	add	r30, r30
    4a14:	ff 1f       	adc	r31, r31
    4a16:	ed 5a       	subi	r30, 0xAD	; 173
    4a18:	f5 4f       	sbci	r31, 0xF5	; 245
    4a1a:	20 81       	ld	r18, Z
    4a1c:	31 81       	ldd	r19, Z+1	; 0x01
    4a1e:	23 2b       	or	r18, r19
		//if(sensor.begin()){
		registers[id] = device; //TODO error handling
    4a20:	09 f5       	brne	.+66     	; 0x4a64 <_ZN5Robot5beginEv+0x1a2>
    4a22:	88 0f       	add	r24, r24
    4a24:	99 1f       	adc	r25, r25
    4a26:	fc 01       	movw	r30, r24
    4a28:	ed 5a       	subi	r30, 0xAD	; 173
    4a2a:	f5 4f       	sbci	r31, 0xF5	; 245
    4a2c:	8e e5       	ldi	r24, 0x5E	; 94
    4a2e:	99 e0       	ldi	r25, 0x09	; 9
	Serial.println("Initialized pressure sensor.");
	
	if(!TwiSettings.begin()){
		Serial.println("Unable to initialize TWI settings.");
	}
	Serial.println("Initialized settings.");
    4a30:	91 83       	std	Z+1, r25	; 0x01
    4a32:	80 83       	st	Z, r24
    4a34:	62 e0       	ldi	r22, 0x02	; 2
    4a36:	74 e0       	ldi	r23, 0x04	; 4
    4a38:	87 e7       	ldi	r24, 0x77	; 119
	
	return true;
    4a3a:	97 e0       	ldi	r25, 0x07	; 7
		return false;
	}
	Serial.println("Servos initialized.");
	//TODO if robot can't be initialized, send diagnostics over ethernet?
	if(!Button0.begin()){
		Serial.println("Unable to initialize Button0.");
    4a3c:	92 d1       	rcall	.+804    	; 0x4d62 <_ZN5Print7printlnEPKc>
    4a3e:	18 c0       	rjmp	.+48     	; 0x4a70 <_ZN5Robot5beginEv+0x1ae>
    4a40:	68 e1       	ldi	r22, 0x18	; 24
    4a42:	74 e0       	ldi	r23, 0x04	; 4
    4a44:	87 e7       	ldi	r24, 0x77	; 119
		return false;
    4a46:	97 e0       	ldi	r25, 0x07	; 7
	}
	Serial.println("Initialized Button0.");
	
	if(!Button1.begin()){
		Serial.println("Unable to initialize Button1.");
    4a48:	8c d1       	rcall	.+792    	; 0x4d62 <_ZN5Print7printlnEPKc>
    4a4a:	12 c0       	rjmp	.+36     	; 0x4a70 <_ZN5Robot5beginEv+0x1ae>
    4a4c:	66 e3       	ldi	r22, 0x36	; 54
    4a4e:	74 e0       	ldi	r23, 0x04	; 4
    4a50:	87 e7       	ldi	r24, 0x77	; 119
		return false;
    4a52:	97 e0       	ldi	r25, 0x07	; 7
	}
	Serial.println("Initialized Button1.");
	
	if(!LED.begin()){
		Serial.println("Unable to initialize LED.");
    4a54:	86 d1       	rcall	.+780    	; 0x4d62 <_ZN5Print7printlnEPKc>
    4a56:	0c c0       	rjmp	.+24     	; 0x4a70 <_ZN5Robot5beginEv+0x1ae>
    4a58:	64 e5       	ldi	r22, 0x54	; 84
    4a5a:	74 e0       	ldi	r23, 0x04	; 4
    4a5c:	87 e7       	ldi	r24, 0x77	; 119
    4a5e:	97 e0       	ldi	r25, 0x07	; 7
		return false;
    4a60:	80 d1       	rcall	.+768    	; 0x4d62 <_ZN5Print7printlnEPKc>
		return false;
	} 
	Serial.println("Initialized pressure sensor.");
	
	if(!TwiSettings.begin()){
		Serial.println("Unable to initialize TWI settings.");
    4a62:	06 c0       	rjmp	.+12     	; 0x4a70 <_ZN5Robot5beginEv+0x1ae>
    4a64:	6e e6       	ldi	r22, 0x6E	; 110
    4a66:	74 e0       	ldi	r23, 0x04	; 4
    4a68:	87 e7       	ldi	r24, 0x77	; 119
    4a6a:	97 e0       	ldi	r25, 0x07	; 7
    4a6c:	7a d1       	rcall	.+756    	; 0x4d62 <_ZN5Print7printlnEPKc>
    4a6e:	e2 cf       	rjmp	.-60     	; 0x4a34 <_ZN5Robot5beginEv+0x172>
	}
	Serial.println("Initialized settings.");
	
	return true;
}
    4a70:	8c 2f       	mov	r24, r28
    4a72:	cf 91       	pop	r28
    4a74:	0f 91       	pop	r16
    4a76:	08 95       	ret

00004a78 <_ZN5Robot4LoopEv>:
	static bool begin(uint16_t recvPort, uint16_t destPort, Register& csDDR, Register& csPort, uint8_t csPin);
	
	friend void udpReceive(uint16_t dest_port, uint8_t src_ip[IP_LEN], uint16_t src_port, const char *data, uint16_t len);

	static void Loop(){
		ether.packetLoop(ether.packetReceive());
    4a78:	0e 94 cc 06 	call	0xd98	; 0xd98 <_ZN8ENC28J6013packetReceiveEv>
    4a7c:	0e 94 3c 09 	call	0x1278	; 0x1278 <_ZN9EtherCard10packetLoopEj>
	return !((TestBtnPinPort & TestBtnPin) > 0);
}*/

void Robot::Loop(){
	EtherComm::Loop();
	Imu.Update(EtherComm::buffer + 1/*3*/);
    4a80:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    4a84:	70 91 01 02 	lds	r23, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    4a88:	6f 5f       	subi	r22, 0xFF	; 255
    4a8a:	7f 4f       	sbci	r23, 0xFF	; 255
    4a8c:	83 e0       	ldi	r24, 0x03	; 3
    4a8e:	9a e0       	ldi	r25, 0x0A	; 10
    4a90:	0a d0       	rcall	.+20     	; 0x4aa6 <_ZN9ImuSensor6UpdateEPh>
	Pressure.Update(EtherComm::buffer + 1/*3*/);
    4a92:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    4a96:	70 91 01 02 	lds	r23, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    4a9a:	6f 5f       	subi	r22, 0xFF	; 255
    4a9c:	7f 4f       	sbci	r23, 0xFF	; 255
    4a9e:	82 e1       	ldi	r24, 0x12	; 18
    4aa0:	9a e0       	ldi	r25, 0x0A	; 10
    4aa2:	8e c0       	rjmp	.+284    	; 0x4bc0 <_ZN14PressureSensor6UpdateEPh>
    4aa4:	08 95       	ret

00004aa6 <_ZN9ImuSensor6UpdateEPh>:
		rov.RegisterDevice(tempId, this)
		&& rov.RegisterDevice(accelId, this)
		&& imu.begin();
}

void ImuSensor::Update(uint8_t* buffer){
    4aa6:	08 95       	ret

00004aa8 <_ZN9ImuSensor5beginEv>:

ImuSensor::ImuSensor(const uint8_t TempId, const uint8_t AccelId) : imu(55, 0x28), tempId(TempId), accelId(AccelId) {
	
}

bool ImuSensor::begin(){
    4aa8:	cf 93       	push	r28
    4aaa:	df 93       	push	r29
    4aac:	ec 01       	movw	r28, r24
	return 
		rov.RegisterDevice(tempId, this)
    4aae:	bc 01       	movw	r22, r24
    4ab0:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ab2:	57 dd       	rcall	.-1362   	; 0x4562 <_ZN5Robot14RegisterDeviceEhP9IRegister>
		&& rov.RegisterDevice(accelId, this)
		&& imu.begin();
    4ab4:	88 23       	and	r24, r24
    4ab6:	51 f0       	breq	.+20     	; 0x4acc <_ZN9ImuSensor5beginEv+0x24>
}

bool ImuSensor::begin(){
	return 
		rov.RegisterDevice(tempId, this)
		&& rov.RegisterDevice(accelId, this)
    4ab8:	be 01       	movw	r22, r28
    4aba:	8e 85       	ldd	r24, Y+14	; 0x0e
    4abc:	52 dd       	rcall	.-1372   	; 0x4562 <_ZN5Robot14RegisterDeviceEhP9IRegister>
    4abe:	88 23       	and	r24, r24
    4ac0:	29 f0       	breq	.+10     	; 0x4acc <_ZN9ImuSensor5beginEv+0x24>
		&& imu.begin();
    4ac2:	6c e0       	ldi	r22, 0x0C	; 12
    4ac4:	ce 01       	movw	r24, r28
    4ac6:	02 96       	adiw	r24, 0x02	; 2
    4ac8:	0e 94 39 02 	call	0x472	; 0x472 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>
}
    4acc:	df 91       	pop	r29
    4ace:	cf 91       	pop	r28
    4ad0:	08 95       	ret

00004ad2 <_ZN9ImuSensor21ReadRegisterRequestedEhPh>:
	*buffer++ = *val++;
}*/

AdafruitImu::Vector<3> vector;

void ImuSensor::ReadRegisterRequested(uint8_t id, uint8_t* buffer){
    4ad2:	0f 93       	push	r16
    4ad4:	1f 93       	push	r17
    4ad6:	cf 93       	push	r28
    4ad8:	df 93       	push	r29
    4ada:	c6 2f       	mov	r28, r22
    4adc:	8a 01       	movw	r16, r20
	if(id == tempId){
    4ade:	fc 01       	movw	r30, r24
    4ae0:	d5 85       	ldd	r29, Z+13	; 0x0d
    4ae2:	d6 13       	cpse	r29, r22
    4ae4:	0a c0       	rjmp	.+20     	; 0x4afa <_ZN9ImuSensor21ReadRegisterRequestedEhPh+0x28>
		buffer[0] = imu.getTemp();
    4ae6:	02 96       	adiw	r24, 0x02	; 2
    4ae8:	0e 94 a6 02 	call	0x54c	; 0x54c <_ZN15Adafruit_BNO0557getTempEv>
    4aec:	f8 01       	movw	r30, r16
    4aee:	80 83       	st	Z, r24
	
protected:
	void inline SendCommand(uint8_t id, uint8_t len){
		//EtherComm::buffer[2] = id;
		//EtherComm::SendCommand(CMD_UpdateDevice, len + 1);
		EtherComm::SendCommand(id, len);	
    4af0:	61 e0       	ldi	r22, 0x01	; 1
    4af2:	8d 2f       	mov	r24, r29
    4af4:	0e 94 76 0b 	call	0x16ec	; 0x16ec <_ZN9EtherComm11SendCommandEhh>
    4af8:	0c c0       	rjmp	.+24     	; 0x4b12 <_ZN9ImuSensor21ReadRegisterRequestedEhPh+0x40>
		SendCommand(id, 1);
	}else if(id == accelId) {
    4afa:	fc 01       	movw	r30, r24
    4afc:	26 85       	ldd	r18, Z+14	; 0x0e
    4afe:	62 13       	cpse	r22, r18
    4b00:	08 c0       	rjmp	.+16     	; 0x4b12 <_ZN9ImuSensor21ReadRegisterRequestedEhPh+0x40>
		/*vector = imu.getVector(Adafruit_BNO055::VECTOR_ACCELEROMETER );
		saveFloat(vector.x(), buffer + 0);
		saveFloat(vector.y(), buffer + 4);
		saveFloat(vector.z(), buffer + 8);
		SendCommand(id, 12);*/
		uint8_t bytes = imu.getVector(Adafruit_BNO055::VECTOR_ACCELEROMETER, buffer);
    4b02:	68 e0       	ldi	r22, 0x08	; 8
    4b04:	02 96       	adiw	r24, 0x02	; 2
    4b06:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tEPh>
    4b0a:	68 2f       	mov	r22, r24
    4b0c:	8c 2f       	mov	r24, r28
    4b0e:	0e 94 76 0b 	call	0x16ec	; 0x16ec <_ZN9EtherComm11SendCommandEhh>
	saveFloat(vector.x(), buffer + 14);
	saveFloat(vector.y(), buffer + 18);
	saveFloat(vector.z(), buffer + 22);
	
	return 1 + 1 + 6*4;*/
    4b12:	df 91       	pop	r29
    4b14:	cf 91       	pop	r28
    4b16:	1f 91       	pop	r17
    4b18:	0f 91       	pop	r16
    4b1a:	08 95       	ret

00004b1c <_ZN9ImuSensorC1Ehh>:
#define ID_TEMP 1
#define ID_ACCEL 2
//#include "../BNO055/utility/vector.h"
//Adafruit_BNO055 ImuSensor::imu;

ImuSensor::ImuSensor(const uint8_t TempId, const uint8_t AccelId) : imu(55, 0x28), tempId(TempId), accelId(AccelId) {
    4b1c:	ef 92       	push	r14
    4b1e:	ff 92       	push	r15
    4b20:	0f 93       	push	r16
    4b22:	1f 93       	push	r17
    4b24:	cf 93       	push	r28
    4b26:	df 93       	push	r29
    4b28:	ec 01       	movw	r28, r24
    4b2a:	e6 2e       	mov	r14, r22
    4b2c:	f4 2e       	mov	r15, r20
    4b2e:	25 ec       	ldi	r18, 0xC5	; 197
    4b30:	34 e0       	ldi	r19, 0x04	; 4
    4b32:	fc 01       	movw	r30, r24
    4b34:	21 93       	st	Z+, r18
    4b36:	31 93       	st	Z+, r19
    4b38:	cf 01       	movw	r24, r30
    4b3a:	05 e5       	ldi	r16, 0x55	; 85
    4b3c:	18 e0       	ldi	r17, 0x08	; 8
    4b3e:	28 e2       	ldi	r18, 0x28	; 40
    4b40:	47 e3       	ldi	r20, 0x37	; 55
    4b42:	50 e0       	ldi	r21, 0x00	; 0
    4b44:	60 e0       	ldi	r22, 0x00	; 0
    4b46:	70 e0       	ldi	r23, 0x00	; 0
    4b48:	0e 94 c4 01 	call	0x388	; 0x388 <_ZN15Adafruit_BNO055C1ElhP7TwoWire>
    4b4c:	ed 86       	std	Y+13, r14	; 0x0d
    4b4e:	fe 86       	std	Y+14, r15	; 0x0e
	
}
    4b50:	df 91       	pop	r29
    4b52:	cf 91       	pop	r28
    4b54:	1f 91       	pop	r17
    4b56:	0f 91       	pop	r16
    4b58:	ff 90       	pop	r15
    4b5a:	ef 90       	pop	r14
    4b5c:	08 95       	ret

00004b5e <_GLOBAL__sub_I__ZN9ImuSensorC2Ehh>:
	template <uint8_t N> class Vector
	{
		public:
		Vector()
		{
			memset(p_vec, 0, sizeof(double)*N);
    4b5e:	8c e0       	ldi	r24, 0x0C	; 12
    4b60:	e3 e5       	ldi	r30, 0x53	; 83
    4b62:	fc e0       	ldi	r31, 0x0C	; 12
    4b64:	df 01       	movw	r26, r30
    4b66:	1d 92       	st	X+, r1
    4b68:	8a 95       	dec	r24
    4b6a:	e9 f7       	brne	.-6      	; 0x4b66 <_GLOBAL__sub_I__ZN9ImuSensorC2Ehh+0x8>
    4b6c:	08 95       	ret

00004b6e <_ZN14PressureSensor5beginEv>:

PressureSensor::PressureSensor(const uint8_t id, HardwareTimer &timer) : sensor(timer), _id(id) {
	
}

bool PressureSensor::begin(){
    4b6e:	1f 93       	push	r17
    4b70:	cf 93       	push	r28
    4b72:	df 93       	push	r29
    4b74:	ec 01       	movw	r28, r24
	if(!rov.RegisterDevice(_id, this)) return false;
    4b76:	bc 01       	movw	r22, r24
    4b78:	8a a5       	ldd	r24, Y+42	; 0x2a
    4b7a:	f3 dc       	rcall	.-1562   	; 0x4562 <_ZN5Robot14RegisterDeviceEhP9IRegister>
    4b7c:	18 2f       	mov	r17, r24
    4b7e:	88 23       	and	r24, r24
    4b80:	61 f0       	breq	.+24     	; 0x4b9a <_ZN14PressureSensor5beginEv+0x2c>
	if(sensor.begin()){
    4b82:	22 96       	adiw	r28, 0x02	; 2
    4b84:	ce 01       	movw	r24, r28
    4b86:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <_ZN6MS58375beginEv>
    4b8a:	18 2f       	mov	r17, r24
    4b8c:	88 23       	and	r24, r24
    4b8e:	29 f0       	breq	.+10     	; 0x4b9a <_ZN14PressureSensor5beginEv+0x2c>
		sensor.setModel(MS5837::MS5837_30BA);
    4b90:	60 91 8e 02 	lds	r22, 0x028E	; 0x80028e <_ZN6MS583711MS5837_30BAE>
    4b94:	ce 01       	movw	r24, r28
    4b96:	0e 94 16 13 	call	0x262c	; 0x262c <_ZN6MS58378setModelEh>
		//sensor.setFluidDensity(997); //Freshwater
		return true;
	}
	
	return false;
}
    4b9a:	81 2f       	mov	r24, r17
    4b9c:	df 91       	pop	r29
    4b9e:	cf 91       	pop	r28
    4ba0:	1f 91       	pop	r17
    4ba2:	08 95       	ret

00004ba4 <_ZN14PressureSensor21ReadRegisterRequestedEhPh>:
			reading = false;
		}
	}
}

void PressureSensor::ReadRegisterRequested(uint8_t id, uint8_t* buffer){
    4ba4:	cf 93       	push	r28
    4ba6:	df 93       	push	r29
	if(!reading){
    4ba8:	fc 01       	movw	r30, r24
    4baa:	23 a5       	ldd	r18, Z+43	; 0x2b
    4bac:	21 11       	cpse	r18, r1
    4bae:	05 c0       	rjmp	.+10     	; 0x4bba <_ZN14PressureSensor21ReadRegisterRequestedEhPh+0x16>
    4bb0:	ec 01       	movw	r28, r24
		reading = sensor.startRead();
    4bb2:	02 96       	adiw	r24, 0x02	; 2
    4bb4:	0e 94 19 13 	call	0x2632	; 0x2632 <_ZN6MS58379startReadEv>
    4bb8:	8b a7       	std	Y+43, r24	; 0x2b
	}
    4bba:	df 91       	pop	r29
    4bbc:	cf 91       	pop	r28
    4bbe:	08 95       	ret

00004bc0 <_ZN14PressureSensor6UpdateEPh>:
	*buffer++ = *val++;
	*buffer++ = *val++;
	*buffer++ = *val++;
}

void PressureSensor::Update(uint8_t* buffer){
    4bc0:	cf 92       	push	r12
    4bc2:	df 92       	push	r13
    4bc4:	ef 92       	push	r14
    4bc6:	ff 92       	push	r15
    4bc8:	0f 93       	push	r16
    4bca:	1f 93       	push	r17
    4bcc:	cf 93       	push	r28
    4bce:	df 93       	push	r29
    4bd0:	cd b7       	in	r28, 0x3d	; 61
    4bd2:	de b7       	in	r29, 0x3e	; 62
    4bd4:	28 97       	sbiw	r28, 0x08	; 8
    4bd6:	0f b6       	in	r0, 0x3f	; 63
    4bd8:	f8 94       	cli
    4bda:	de bf       	out	0x3e, r29	; 62
    4bdc:	0f be       	out	0x3f, r0	; 63
    4bde:	cd bf       	out	0x3d, r28	; 61
	if(reading){
    4be0:	fc 01       	movw	r30, r24
    4be2:	23 a5       	ldd	r18, Z+43	; 0x2b
    4be4:	22 23       	and	r18, r18
    4be6:	09 f4       	brne	.+2      	; 0x4bea <_ZN14PressureSensor6UpdateEPh+0x2a>
    4be8:	41 c0       	rjmp	.+130    	; 0x4c6c <_ZN14PressureSensor6UpdateEPh+0xac>
    4bea:	7b 01       	movw	r14, r22
    4bec:	8c 01       	movw	r16, r24
		sensor.update();
    4bee:	6c 01       	movw	r12, r24
    4bf0:	f2 e0       	ldi	r31, 0x02	; 2
    4bf2:	cf 0e       	add	r12, r31
    4bf4:	d1 1c       	adc	r13, r1
    4bf6:	c6 01       	movw	r24, r12
    4bf8:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <_ZN6MS58376updateEv>
		if(sensor.finished()){
    4bfc:	c6 01       	movw	r24, r12
    4bfe:	0e 94 3f 13 	call	0x267e	; 0x267e <_ZN6MS58378finishedEv>
    4c02:	88 23       	and	r24, r24
    4c04:	99 f1       	breq	.+102    	; 0x4c6c <_ZN14PressureSensor6UpdateEPh+0xac>
			saveFloat(sensor.pressure(), buffer);
    4c06:	40 e0       	ldi	r20, 0x00	; 0
    4c08:	50 e0       	ldi	r21, 0x00	; 0
    4c0a:	60 e8       	ldi	r22, 0x80	; 128
    4c0c:	7f e3       	ldi	r23, 0x3F	; 63
    4c0e:	c6 01       	movw	r24, r12
    4c10:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <_ZN6MS58378pressureEf>
    4c14:	26 2f       	mov	r18, r22
    4c16:	46 2f       	mov	r20, r22
    4c18:	57 2f       	mov	r21, r23
    4c1a:	68 2f       	mov	r22, r24
    4c1c:	79 2f       	mov	r23, r25
    4c1e:	49 83       	std	Y+1, r20	; 0x01
    4c20:	5a 83       	std	Y+2, r21	; 0x02
    4c22:	6b 83       	std	Y+3, r22	; 0x03
    4c24:	7c 83       	std	Y+4, r23	; 0x04
	return false;
}

static void saveFloat(float f, uint8_t* buffer){ //TODO put in IRegister? Used in IMU too
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    4c26:	f7 01       	movw	r30, r14
    4c28:	20 83       	st	Z, r18
	*buffer++ = *val++;
    4c2a:	8a 81       	ldd	r24, Y+2	; 0x02
    4c2c:	81 83       	std	Z+1, r24	; 0x01
	*buffer++ = *val++;
    4c2e:	8b 81       	ldd	r24, Y+3	; 0x03
    4c30:	82 83       	std	Z+2, r24	; 0x02
	*buffer++ = *val++;
    4c32:	8c 81       	ldd	r24, Y+4	; 0x04
    4c34:	83 83       	std	Z+3, r24	; 0x03
void PressureSensor::Update(uint8_t* buffer){
	if(reading){
		sensor.update();
		if(sensor.finished()){
			saveFloat(sensor.pressure(), buffer);
			saveFloat(sensor.temperature(), buffer + 4);
    4c36:	c6 01       	movw	r24, r12
    4c38:	0e 94 1c 1a 	call	0x3438	; 0x3438 <_ZN6MS583711temperatureEv>
    4c3c:	26 2f       	mov	r18, r22
    4c3e:	46 2f       	mov	r20, r22
    4c40:	57 2f       	mov	r21, r23
    4c42:	68 2f       	mov	r22, r24
    4c44:	79 2f       	mov	r23, r25
    4c46:	4d 83       	std	Y+5, r20	; 0x05
    4c48:	5e 83       	std	Y+6, r21	; 0x06
    4c4a:	6f 83       	std	Y+7, r22	; 0x07
    4c4c:	78 87       	std	Y+8, r23	; 0x08
	return false;
}

static void saveFloat(float f, uint8_t* buffer){ //TODO put in IRegister? Used in IMU too
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    4c4e:	f7 01       	movw	r30, r14
    4c50:	24 83       	std	Z+4, r18	; 0x04
	*buffer++ = *val++;
    4c52:	8e 81       	ldd	r24, Y+6	; 0x06
    4c54:	85 83       	std	Z+5, r24	; 0x05
	*buffer++ = *val++;
    4c56:	8f 81       	ldd	r24, Y+7	; 0x07
    4c58:	86 83       	std	Z+6, r24	; 0x06
	*buffer++ = *val++;
    4c5a:	88 85       	ldd	r24, Y+8	; 0x08
    4c5c:	87 83       	std	Z+7, r24	; 0x07
    4c5e:	68 e0       	ldi	r22, 0x08	; 8
    4c60:	f8 01       	movw	r30, r16
    4c62:	82 a5       	ldd	r24, Z+42	; 0x2a
    4c64:	0e 94 76 0b 	call	0x16ec	; 0x16ec <_ZN9EtherComm11SendCommandEhh>
		sensor.update();
		if(sensor.finished()){
			saveFloat(sensor.pressure(), buffer);
			saveFloat(sensor.temperature(), buffer + 4);
			SendCommand(_id, 8);
			reading = false;
    4c68:	f8 01       	movw	r30, r16
    4c6a:	13 a6       	std	Z+43, r1	; 0x2b
		}
	}
}
    4c6c:	28 96       	adiw	r28, 0x08	; 8
    4c6e:	0f b6       	in	r0, 0x3f	; 63
    4c70:	f8 94       	cli
    4c72:	de bf       	out	0x3e, r29	; 62
    4c74:	0f be       	out	0x3f, r0	; 63
    4c76:	cd bf       	out	0x3d, r28	; 61
    4c78:	df 91       	pop	r29
    4c7a:	cf 91       	pop	r28
    4c7c:	1f 91       	pop	r17
    4c7e:	0f 91       	pop	r16
    4c80:	ff 90       	pop	r15
    4c82:	ef 90       	pop	r14
    4c84:	df 90       	pop	r13
    4c86:	cf 90       	pop	r12
    4c88:	08 95       	ret

00004c8a <_ZN14PressureSensorC1EhR13HardwareTimer>:
 */ 

#include "PressureSensor.h"
#include "../Robot.h"

PressureSensor::PressureSensor(const uint8_t id, HardwareTimer &timer) : sensor(timer), _id(id) {
    4c8a:	1f 93       	push	r17
    4c8c:	cf 93       	push	r28
    4c8e:	df 93       	push	r29
    4c90:	ec 01       	movw	r28, r24
    4c92:	16 2f       	mov	r17, r22
    4c94:	21 ed       	ldi	r18, 0xD1	; 209
    4c96:	34 e0       	ldi	r19, 0x04	; 4
    4c98:	fc 01       	movw	r30, r24
    4c9a:	21 93       	st	Z+, r18
    4c9c:	31 93       	st	Z+, r19
    4c9e:	cf 01       	movw	r24, r30
    4ca0:	ba 01       	movw	r22, r20
    4ca2:	0e 94 0a 13 	call	0x2614	; 0x2614 <_ZN6MS5837C1ER13HardwareTimer>
    4ca6:	1a a7       	std	Y+42, r17	; 0x2a
	
}
    4ca8:	df 91       	pop	r29
    4caa:	cf 91       	pop	r28
    4cac:	1f 91       	pop	r17
    4cae:	08 95       	ret

00004cb0 <_ZN5Print5writeEPKhj>:
uint16_t Print::println(long num, int base)
{
  uint16_t n = print(num, base);
  n += println();
  return n;
}
    4cb0:	cf 92       	push	r12
    4cb2:	df 92       	push	r13
    4cb4:	ef 92       	push	r14
    4cb6:	ff 92       	push	r15
    4cb8:	0f 93       	push	r16
    4cba:	1f 93       	push	r17
    4cbc:	cf 93       	push	r28
    4cbe:	df 93       	push	r29
    4cc0:	41 15       	cp	r20, r1
    4cc2:	51 05       	cpc	r21, r1
    4cc4:	c1 f0       	breq	.+48     	; 0x4cf6 <_ZN5Print5writeEPKhj+0x46>
    4cc6:	6a 01       	movw	r12, r20
    4cc8:	8c 01       	movw	r16, r24
    4cca:	e6 2e       	mov	r14, r22
    4ccc:	f7 2e       	mov	r15, r23
    4cce:	c0 e0       	ldi	r28, 0x00	; 0
    4cd0:	d0 e0       	ldi	r29, 0x00	; 0
    4cd2:	d7 01       	movw	r26, r14
    4cd4:	6d 91       	ld	r22, X+
    4cd6:	7d 01       	movw	r14, r26
    4cd8:	d8 01       	movw	r26, r16
    4cda:	ed 91       	ld	r30, X+
    4cdc:	fc 91       	ld	r31, X
    4cde:	01 90       	ld	r0, Z+
    4ce0:	f0 81       	ld	r31, Z
    4ce2:	e0 2d       	mov	r30, r0
    4ce4:	c8 01       	movw	r24, r16
    4ce6:	19 95       	eicall
    4ce8:	89 2b       	or	r24, r25
    4cea:	39 f0       	breq	.+14     	; 0x4cfa <_ZN5Print5writeEPKhj+0x4a>
    4cec:	21 96       	adiw	r28, 0x01	; 1
    4cee:	cc 16       	cp	r12, r28
    4cf0:	dd 06       	cpc	r13, r29
    4cf2:	79 f7       	brne	.-34     	; 0x4cd2 <_ZN5Print5writeEPKhj+0x22>
    4cf4:	02 c0       	rjmp	.+4      	; 0x4cfa <_ZN5Print5writeEPKhj+0x4a>
    4cf6:	c0 e0       	ldi	r28, 0x00	; 0
    4cf8:	d0 e0       	ldi	r29, 0x00	; 0
    4cfa:	ce 01       	movw	r24, r28
    4cfc:	df 91       	pop	r29
    4cfe:	cf 91       	pop	r28
    4d00:	1f 91       	pop	r17
    4d02:	0f 91       	pop	r16
    4d04:	ff 90       	pop	r15
    4d06:	ef 90       	pop	r14
    4d08:	df 90       	pop	r13
    4d0a:	cf 90       	pop	r12
    4d0c:	08 95       	ret

00004d0e <_ZN5Print5printEPKc>:
    4d0e:	61 15       	cp	r22, r1
    4d10:	71 05       	cpc	r23, r1
    4d12:	81 f0       	breq	.+32     	; 0x4d34 <_ZN5Print5printEPKc+0x26>
    4d14:	fb 01       	movw	r30, r22
    4d16:	01 90       	ld	r0, Z+
    4d18:	00 20       	and	r0, r0
    4d1a:	e9 f7       	brne	.-6      	; 0x4d16 <_ZN5Print5printEPKc+0x8>
    4d1c:	31 97       	sbiw	r30, 0x01	; 1
    4d1e:	af 01       	movw	r20, r30
    4d20:	46 1b       	sub	r20, r22
    4d22:	57 0b       	sbc	r21, r23
    4d24:	dc 01       	movw	r26, r24
    4d26:	ed 91       	ld	r30, X+
    4d28:	fc 91       	ld	r31, X
    4d2a:	02 80       	ldd	r0, Z+2	; 0x02
    4d2c:	f3 81       	ldd	r31, Z+3	; 0x03
    4d2e:	e0 2d       	mov	r30, r0
    4d30:	19 95       	eicall
    4d32:	08 95       	ret
    4d34:	80 e0       	ldi	r24, 0x00	; 0
    4d36:	90 e0       	ldi	r25, 0x00	; 0
    4d38:	08 95       	ret

00004d3a <_ZN5Print5printEc>:
    4d3a:	dc 01       	movw	r26, r24
    4d3c:	ed 91       	ld	r30, X+
    4d3e:	fc 91       	ld	r31, X
    4d40:	01 90       	ld	r0, Z+
    4d42:	f0 81       	ld	r31, Z
    4d44:	e0 2d       	mov	r30, r0
    4d46:	19 95       	eicall
    4d48:	08 95       	ret

00004d4a <_ZN5Print7printlnEv>:
    4d4a:	dc 01       	movw	r26, r24
    4d4c:	ed 91       	ld	r30, X+
    4d4e:	fc 91       	ld	r31, X
    4d50:	02 80       	ldd	r0, Z+2	; 0x02
    4d52:	f3 81       	ldd	r31, Z+3	; 0x03
    4d54:	e0 2d       	mov	r30, r0
    4d56:	42 e0       	ldi	r20, 0x02	; 2
    4d58:	50 e0       	ldi	r21, 0x00	; 0
    4d5a:	69 ed       	ldi	r22, 0xD9	; 217
    4d5c:	74 e0       	ldi	r23, 0x04	; 4
    4d5e:	19 95       	eicall
    4d60:	08 95       	ret

00004d62 <_ZN5Print7printlnEPKc>:
    4d62:	0f 93       	push	r16
    4d64:	1f 93       	push	r17
    4d66:	cf 93       	push	r28
    4d68:	df 93       	push	r29
    4d6a:	ec 01       	movw	r28, r24
    4d6c:	d0 df       	rcall	.-96     	; 0x4d0e <_ZN5Print5printEPKc>
    4d6e:	8c 01       	movw	r16, r24
    4d70:	ce 01       	movw	r24, r28
    4d72:	eb df       	rcall	.-42     	; 0x4d4a <_ZN5Print7printlnEv>
    4d74:	80 0f       	add	r24, r16
    4d76:	91 1f       	adc	r25, r17
    4d78:	df 91       	pop	r29
    4d7a:	cf 91       	pop	r28
    4d7c:	1f 91       	pop	r17
    4d7e:	0f 91       	pop	r16
    4d80:	08 95       	ret

00004d82 <_ZN5Print11printNumberEmh>:
    4d82:	8f 92       	push	r8
    4d84:	9f 92       	push	r9
    4d86:	af 92       	push	r10
    4d88:	bf 92       	push	r11
    4d8a:	ef 92       	push	r14
    4d8c:	ff 92       	push	r15
    4d8e:	0f 93       	push	r16
    4d90:	1f 93       	push	r17
    4d92:	cf 93       	push	r28
    4d94:	df 93       	push	r29
    4d96:	cd b7       	in	r28, 0x3d	; 61
    4d98:	de b7       	in	r29, 0x3e	; 62
    4d9a:	a1 97       	sbiw	r28, 0x21	; 33
    4d9c:	0f b6       	in	r0, 0x3f	; 63
    4d9e:	f8 94       	cli
    4da0:	de bf       	out	0x3e, r29	; 62
    4da2:	0f be       	out	0x3f, r0	; 63
    4da4:	cd bf       	out	0x3d, r28	; 61
    4da6:	7c 01       	movw	r14, r24
    4da8:	cb 01       	movw	r24, r22
    4daa:	ba 01       	movw	r22, r20
    4dac:	19 a2       	std	Y+33, r1	; 0x21
    4dae:	22 30       	cpi	r18, 0x02	; 2
    4db0:	08 f4       	brcc	.+2      	; 0x4db4 <_ZN5Print11printNumberEmh+0x32>
    4db2:	2a e0       	ldi	r18, 0x0A	; 10
    4db4:	8e 01       	movw	r16, r28
    4db6:	0f 5d       	subi	r16, 0xDF	; 223
    4db8:	1f 4f       	sbci	r17, 0xFF	; 255
    4dba:	82 2e       	mov	r8, r18
    4dbc:	91 2c       	mov	r9, r1
    4dbe:	a1 2c       	mov	r10, r1
    4dc0:	b1 2c       	mov	r11, r1
    4dc2:	a5 01       	movw	r20, r10
    4dc4:	94 01       	movw	r18, r8
    4dc6:	75 d2       	rcall	.+1258   	; 0x52b2 <__udivmodsi4>
    4dc8:	e6 2f       	mov	r30, r22
    4dca:	62 2f       	mov	r22, r18
    4dcc:	73 2f       	mov	r23, r19
    4dce:	84 2f       	mov	r24, r20
    4dd0:	95 2f       	mov	r25, r21
    4dd2:	01 50       	subi	r16, 0x01	; 1
    4dd4:	11 09       	sbc	r17, r1
    4dd6:	ea 30       	cpi	r30, 0x0A	; 10
    4dd8:	10 f4       	brcc	.+4      	; 0x4dde <_ZN5Print11printNumberEmh+0x5c>
    4dda:	e0 5d       	subi	r30, 0xD0	; 208
    4ddc:	01 c0       	rjmp	.+2      	; 0x4de0 <_ZN5Print11printNumberEmh+0x5e>
    4dde:	e9 5c       	subi	r30, 0xC9	; 201
    4de0:	d8 01       	movw	r26, r16
    4de2:	ec 93       	st	X, r30
    4de4:	61 15       	cp	r22, r1
    4de6:	71 05       	cpc	r23, r1
    4de8:	81 05       	cpc	r24, r1
    4dea:	91 05       	cpc	r25, r1
    4dec:	51 f7       	brne	.-44     	; 0x4dc2 <_ZN5Print11printNumberEmh+0x40>
    4dee:	01 15       	cp	r16, r1
    4df0:	11 05       	cpc	r17, r1
    4df2:	91 f0       	breq	.+36     	; 0x4e18 <_ZN5Print11printNumberEmh+0x96>
    4df4:	f8 01       	movw	r30, r16
    4df6:	01 90       	ld	r0, Z+
    4df8:	00 20       	and	r0, r0
    4dfa:	e9 f7       	brne	.-6      	; 0x4df6 <_ZN5Print11printNumberEmh+0x74>
    4dfc:	31 97       	sbiw	r30, 0x01	; 1
    4dfe:	af 01       	movw	r20, r30
    4e00:	40 1b       	sub	r20, r16
    4e02:	51 0b       	sbc	r21, r17
    4e04:	d7 01       	movw	r26, r14
    4e06:	ed 91       	ld	r30, X+
    4e08:	fc 91       	ld	r31, X
    4e0a:	02 80       	ldd	r0, Z+2	; 0x02
    4e0c:	f3 81       	ldd	r31, Z+3	; 0x03
    4e0e:	e0 2d       	mov	r30, r0
    4e10:	b8 01       	movw	r22, r16
    4e12:	c7 01       	movw	r24, r14
    4e14:	19 95       	eicall
    4e16:	01 c0       	rjmp	.+2      	; 0x4e1a <_ZN5Print11printNumberEmh+0x98>
    4e18:	80 e0       	ldi	r24, 0x00	; 0
    4e1a:	a1 96       	adiw	r28, 0x21	; 33
    4e1c:	0f b6       	in	r0, 0x3f	; 63
    4e1e:	f8 94       	cli
    4e20:	de bf       	out	0x3e, r29	; 62
    4e22:	0f be       	out	0x3f, r0	; 63
    4e24:	cd bf       	out	0x3d, r28	; 61
    4e26:	df 91       	pop	r29
    4e28:	cf 91       	pop	r28
    4e2a:	1f 91       	pop	r17
    4e2c:	0f 91       	pop	r16
    4e2e:	ff 90       	pop	r15
    4e30:	ef 90       	pop	r14
    4e32:	bf 90       	pop	r11
    4e34:	af 90       	pop	r10
    4e36:	9f 90       	pop	r9
    4e38:	8f 90       	pop	r8
    4e3a:	08 95       	ret

00004e3c <_ZN5Print5printEmi>:
  }
}

uint16_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
    4e3c:	21 15       	cp	r18, r1
    4e3e:	31 05       	cpc	r19, r1
    4e40:	49 f4       	brne	.+18     	; 0x4e54 <_ZN5Print5printEmi+0x18>
    4e42:	dc 01       	movw	r26, r24
    4e44:	ed 91       	ld	r30, X+
    4e46:	fc 91       	ld	r31, X
    4e48:	01 90       	ld	r0, Z+
    4e4a:	f0 81       	ld	r31, Z
    4e4c:	e0 2d       	mov	r30, r0
    4e4e:	64 2f       	mov	r22, r20
    4e50:	19 95       	eicall
    4e52:	08 95       	ret
  else return printNumber(n, base);
    4e54:	96 df       	rcall	.-212    	; 0x4d82 <_ZN5Print11printNumberEmh>
    4e56:	90 e0       	ldi	r25, 0x00	; 0
}
    4e58:	08 95       	ret

00004e5a <_ZN5Print5printEhi>:
{
  return write(c);
}

uint16_t Print::print(unsigned char b, int base)
{
    4e5a:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
    4e5c:	46 2f       	mov	r20, r22
    4e5e:	50 e0       	ldi	r21, 0x00	; 0
    4e60:	60 e0       	ldi	r22, 0x00	; 0
    4e62:	70 e0       	ldi	r23, 0x00	; 0
    4e64:	eb cf       	rjmp	.-42     	; 0x4e3c <_ZN5Print5printEmi>
}
    4e66:	08 95       	ret

00004e68 <__subsf3>:
    4e68:	50 58       	subi	r21, 0x80	; 128

00004e6a <__addsf3>:
    4e6a:	bb 27       	eor	r27, r27
    4e6c:	aa 27       	eor	r26, r26
    4e6e:	0e d0       	rcall	.+28     	; 0x4e8c <__addsf3x>
    4e70:	70 c1       	rjmp	.+736    	; 0x5152 <__fp_round>
    4e72:	61 d1       	rcall	.+706    	; 0x5136 <__fp_pscA>
    4e74:	30 f0       	brcs	.+12     	; 0x4e82 <__addsf3+0x18>
    4e76:	66 d1       	rcall	.+716    	; 0x5144 <__fp_pscB>
    4e78:	20 f0       	brcs	.+8      	; 0x4e82 <__addsf3+0x18>
    4e7a:	31 f4       	brne	.+12     	; 0x4e88 <__addsf3+0x1e>
    4e7c:	9f 3f       	cpi	r25, 0xFF	; 255
    4e7e:	11 f4       	brne	.+4      	; 0x4e84 <__addsf3+0x1a>
    4e80:	1e f4       	brtc	.+6      	; 0x4e88 <__addsf3+0x1e>
    4e82:	56 c1       	rjmp	.+684    	; 0x5130 <__fp_nan>
    4e84:	0e f4       	brtc	.+2      	; 0x4e88 <__addsf3+0x1e>
    4e86:	e0 95       	com	r30
    4e88:	e7 fb       	bst	r30, 7
    4e8a:	4c c1       	rjmp	.+664    	; 0x5124 <__fp_inf>

00004e8c <__addsf3x>:
    4e8c:	e9 2f       	mov	r30, r25
    4e8e:	72 d1       	rcall	.+740    	; 0x5174 <__fp_split3>
    4e90:	80 f3       	brcs	.-32     	; 0x4e72 <__addsf3+0x8>
    4e92:	ba 17       	cp	r27, r26
    4e94:	62 07       	cpc	r22, r18
    4e96:	73 07       	cpc	r23, r19
    4e98:	84 07       	cpc	r24, r20
    4e9a:	95 07       	cpc	r25, r21
    4e9c:	18 f0       	brcs	.+6      	; 0x4ea4 <__addsf3x+0x18>
    4e9e:	71 f4       	brne	.+28     	; 0x4ebc <__addsf3x+0x30>
    4ea0:	9e f5       	brtc	.+102    	; 0x4f08 <__addsf3x+0x7c>
    4ea2:	8a c1       	rjmp	.+788    	; 0x51b8 <__fp_zero>
    4ea4:	0e f4       	brtc	.+2      	; 0x4ea8 <__addsf3x+0x1c>
    4ea6:	e0 95       	com	r30
    4ea8:	0b 2e       	mov	r0, r27
    4eaa:	ba 2f       	mov	r27, r26
    4eac:	a0 2d       	mov	r26, r0
    4eae:	0b 01       	movw	r0, r22
    4eb0:	b9 01       	movw	r22, r18
    4eb2:	90 01       	movw	r18, r0
    4eb4:	0c 01       	movw	r0, r24
    4eb6:	ca 01       	movw	r24, r20
    4eb8:	a0 01       	movw	r20, r0
    4eba:	11 24       	eor	r1, r1
    4ebc:	ff 27       	eor	r31, r31
    4ebe:	59 1b       	sub	r21, r25
    4ec0:	99 f0       	breq	.+38     	; 0x4ee8 <__addsf3x+0x5c>
    4ec2:	59 3f       	cpi	r21, 0xF9	; 249
    4ec4:	50 f4       	brcc	.+20     	; 0x4eda <__addsf3x+0x4e>
    4ec6:	50 3e       	cpi	r21, 0xE0	; 224
    4ec8:	68 f1       	brcs	.+90     	; 0x4f24 <__addsf3x+0x98>
    4eca:	1a 16       	cp	r1, r26
    4ecc:	f0 40       	sbci	r31, 0x00	; 0
    4ece:	a2 2f       	mov	r26, r18
    4ed0:	23 2f       	mov	r18, r19
    4ed2:	34 2f       	mov	r19, r20
    4ed4:	44 27       	eor	r20, r20
    4ed6:	58 5f       	subi	r21, 0xF8	; 248
    4ed8:	f3 cf       	rjmp	.-26     	; 0x4ec0 <__addsf3x+0x34>
    4eda:	46 95       	lsr	r20
    4edc:	37 95       	ror	r19
    4ede:	27 95       	ror	r18
    4ee0:	a7 95       	ror	r26
    4ee2:	f0 40       	sbci	r31, 0x00	; 0
    4ee4:	53 95       	inc	r21
    4ee6:	c9 f7       	brne	.-14     	; 0x4eda <__addsf3x+0x4e>
    4ee8:	7e f4       	brtc	.+30     	; 0x4f08 <__addsf3x+0x7c>
    4eea:	1f 16       	cp	r1, r31
    4eec:	ba 0b       	sbc	r27, r26
    4eee:	62 0b       	sbc	r22, r18
    4ef0:	73 0b       	sbc	r23, r19
    4ef2:	84 0b       	sbc	r24, r20
    4ef4:	ba f0       	brmi	.+46     	; 0x4f24 <__addsf3x+0x98>
    4ef6:	91 50       	subi	r25, 0x01	; 1
    4ef8:	a1 f0       	breq	.+40     	; 0x4f22 <__addsf3x+0x96>
    4efa:	ff 0f       	add	r31, r31
    4efc:	bb 1f       	adc	r27, r27
    4efe:	66 1f       	adc	r22, r22
    4f00:	77 1f       	adc	r23, r23
    4f02:	88 1f       	adc	r24, r24
    4f04:	c2 f7       	brpl	.-16     	; 0x4ef6 <__addsf3x+0x6a>
    4f06:	0e c0       	rjmp	.+28     	; 0x4f24 <__addsf3x+0x98>
    4f08:	ba 0f       	add	r27, r26
    4f0a:	62 1f       	adc	r22, r18
    4f0c:	73 1f       	adc	r23, r19
    4f0e:	84 1f       	adc	r24, r20
    4f10:	48 f4       	brcc	.+18     	; 0x4f24 <__addsf3x+0x98>
    4f12:	87 95       	ror	r24
    4f14:	77 95       	ror	r23
    4f16:	67 95       	ror	r22
    4f18:	b7 95       	ror	r27
    4f1a:	f7 95       	ror	r31
    4f1c:	9e 3f       	cpi	r25, 0xFE	; 254
    4f1e:	08 f0       	brcs	.+2      	; 0x4f22 <__addsf3x+0x96>
    4f20:	b3 cf       	rjmp	.-154    	; 0x4e88 <__addsf3+0x1e>
    4f22:	93 95       	inc	r25
    4f24:	88 0f       	add	r24, r24
    4f26:	08 f0       	brcs	.+2      	; 0x4f2a <__addsf3x+0x9e>
    4f28:	99 27       	eor	r25, r25
    4f2a:	ee 0f       	add	r30, r30
    4f2c:	97 95       	ror	r25
    4f2e:	87 95       	ror	r24
    4f30:	08 95       	ret

00004f32 <__cmpsf2>:
    4f32:	d4 d0       	rcall	.+424    	; 0x50dc <__fp_cmp>
    4f34:	08 f4       	brcc	.+2      	; 0x4f38 <__cmpsf2+0x6>
    4f36:	81 e0       	ldi	r24, 0x01	; 1
    4f38:	08 95       	ret

00004f3a <__divsf3>:
    4f3a:	0c d0       	rcall	.+24     	; 0x4f54 <__divsf3x>
    4f3c:	0a c1       	rjmp	.+532    	; 0x5152 <__fp_round>
    4f3e:	02 d1       	rcall	.+516    	; 0x5144 <__fp_pscB>
    4f40:	40 f0       	brcs	.+16     	; 0x4f52 <__divsf3+0x18>
    4f42:	f9 d0       	rcall	.+498    	; 0x5136 <__fp_pscA>
    4f44:	30 f0       	brcs	.+12     	; 0x4f52 <__divsf3+0x18>
    4f46:	21 f4       	brne	.+8      	; 0x4f50 <__divsf3+0x16>
    4f48:	5f 3f       	cpi	r21, 0xFF	; 255
    4f4a:	19 f0       	breq	.+6      	; 0x4f52 <__divsf3+0x18>
    4f4c:	eb c0       	rjmp	.+470    	; 0x5124 <__fp_inf>
    4f4e:	51 11       	cpse	r21, r1
    4f50:	34 c1       	rjmp	.+616    	; 0x51ba <__fp_szero>
    4f52:	ee c0       	rjmp	.+476    	; 0x5130 <__fp_nan>

00004f54 <__divsf3x>:
    4f54:	0f d1       	rcall	.+542    	; 0x5174 <__fp_split3>
    4f56:	98 f3       	brcs	.-26     	; 0x4f3e <__divsf3+0x4>

00004f58 <__divsf3_pse>:
    4f58:	99 23       	and	r25, r25
    4f5a:	c9 f3       	breq	.-14     	; 0x4f4e <__divsf3+0x14>
    4f5c:	55 23       	and	r21, r21
    4f5e:	b1 f3       	breq	.-20     	; 0x4f4c <__divsf3+0x12>
    4f60:	95 1b       	sub	r25, r21
    4f62:	55 0b       	sbc	r21, r21
    4f64:	bb 27       	eor	r27, r27
    4f66:	aa 27       	eor	r26, r26
    4f68:	62 17       	cp	r22, r18
    4f6a:	73 07       	cpc	r23, r19
    4f6c:	84 07       	cpc	r24, r20
    4f6e:	38 f0       	brcs	.+14     	; 0x4f7e <__divsf3_pse+0x26>
    4f70:	9f 5f       	subi	r25, 0xFF	; 255
    4f72:	5f 4f       	sbci	r21, 0xFF	; 255
    4f74:	22 0f       	add	r18, r18
    4f76:	33 1f       	adc	r19, r19
    4f78:	44 1f       	adc	r20, r20
    4f7a:	aa 1f       	adc	r26, r26
    4f7c:	a9 f3       	breq	.-22     	; 0x4f68 <__divsf3_pse+0x10>
    4f7e:	33 d0       	rcall	.+102    	; 0x4fe6 <__divsf3_pse+0x8e>
    4f80:	0e 2e       	mov	r0, r30
    4f82:	3a f0       	brmi	.+14     	; 0x4f92 <__divsf3_pse+0x3a>
    4f84:	e0 e8       	ldi	r30, 0x80	; 128
    4f86:	30 d0       	rcall	.+96     	; 0x4fe8 <__divsf3_pse+0x90>
    4f88:	91 50       	subi	r25, 0x01	; 1
    4f8a:	50 40       	sbci	r21, 0x00	; 0
    4f8c:	e6 95       	lsr	r30
    4f8e:	00 1c       	adc	r0, r0
    4f90:	ca f7       	brpl	.-14     	; 0x4f84 <__divsf3_pse+0x2c>
    4f92:	29 d0       	rcall	.+82     	; 0x4fe6 <__divsf3_pse+0x8e>
    4f94:	fe 2f       	mov	r31, r30
    4f96:	27 d0       	rcall	.+78     	; 0x4fe6 <__divsf3_pse+0x8e>
    4f98:	66 0f       	add	r22, r22
    4f9a:	77 1f       	adc	r23, r23
    4f9c:	88 1f       	adc	r24, r24
    4f9e:	bb 1f       	adc	r27, r27
    4fa0:	26 17       	cp	r18, r22
    4fa2:	37 07       	cpc	r19, r23
    4fa4:	48 07       	cpc	r20, r24
    4fa6:	ab 07       	cpc	r26, r27
    4fa8:	b0 e8       	ldi	r27, 0x80	; 128
    4faa:	09 f0       	breq	.+2      	; 0x4fae <__divsf3_pse+0x56>
    4fac:	bb 0b       	sbc	r27, r27
    4fae:	80 2d       	mov	r24, r0
    4fb0:	bf 01       	movw	r22, r30
    4fb2:	ff 27       	eor	r31, r31
    4fb4:	93 58       	subi	r25, 0x83	; 131
    4fb6:	5f 4f       	sbci	r21, 0xFF	; 255
    4fb8:	2a f0       	brmi	.+10     	; 0x4fc4 <__divsf3_pse+0x6c>
    4fba:	9e 3f       	cpi	r25, 0xFE	; 254
    4fbc:	51 05       	cpc	r21, r1
    4fbe:	68 f0       	brcs	.+26     	; 0x4fda <__divsf3_pse+0x82>
    4fc0:	b1 c0       	rjmp	.+354    	; 0x5124 <__fp_inf>
    4fc2:	fb c0       	rjmp	.+502    	; 0x51ba <__fp_szero>
    4fc4:	5f 3f       	cpi	r21, 0xFF	; 255
    4fc6:	ec f3       	brlt	.-6      	; 0x4fc2 <__divsf3_pse+0x6a>
    4fc8:	98 3e       	cpi	r25, 0xE8	; 232
    4fca:	dc f3       	brlt	.-10     	; 0x4fc2 <__divsf3_pse+0x6a>
    4fcc:	86 95       	lsr	r24
    4fce:	77 95       	ror	r23
    4fd0:	67 95       	ror	r22
    4fd2:	b7 95       	ror	r27
    4fd4:	f7 95       	ror	r31
    4fd6:	9f 5f       	subi	r25, 0xFF	; 255
    4fd8:	c9 f7       	brne	.-14     	; 0x4fcc <__divsf3_pse+0x74>
    4fda:	88 0f       	add	r24, r24
    4fdc:	91 1d       	adc	r25, r1
    4fde:	96 95       	lsr	r25
    4fe0:	87 95       	ror	r24
    4fe2:	97 f9       	bld	r25, 7
    4fe4:	08 95       	ret
    4fe6:	e1 e0       	ldi	r30, 0x01	; 1
    4fe8:	66 0f       	add	r22, r22
    4fea:	77 1f       	adc	r23, r23
    4fec:	88 1f       	adc	r24, r24
    4fee:	bb 1f       	adc	r27, r27
    4ff0:	62 17       	cp	r22, r18
    4ff2:	73 07       	cpc	r23, r19
    4ff4:	84 07       	cpc	r24, r20
    4ff6:	ba 07       	cpc	r27, r26
    4ff8:	20 f0       	brcs	.+8      	; 0x5002 <__divsf3_pse+0xaa>
    4ffa:	62 1b       	sub	r22, r18
    4ffc:	73 0b       	sbc	r23, r19
    4ffe:	84 0b       	sbc	r24, r20
    5000:	ba 0b       	sbc	r27, r26
    5002:	ee 1f       	adc	r30, r30
    5004:	88 f7       	brcc	.-30     	; 0x4fe8 <__divsf3_pse+0x90>
    5006:	e0 95       	com	r30
    5008:	08 95       	ret

0000500a <__fixunssfsi>:
    500a:	bc d0       	rcall	.+376    	; 0x5184 <__fp_splitA>
    500c:	88 f0       	brcs	.+34     	; 0x5030 <__fixunssfsi+0x26>
    500e:	9f 57       	subi	r25, 0x7F	; 127
    5010:	90 f0       	brcs	.+36     	; 0x5036 <__fixunssfsi+0x2c>
    5012:	b9 2f       	mov	r27, r25
    5014:	99 27       	eor	r25, r25
    5016:	b7 51       	subi	r27, 0x17	; 23
    5018:	a0 f0       	brcs	.+40     	; 0x5042 <__fixunssfsi+0x38>
    501a:	d1 f0       	breq	.+52     	; 0x5050 <__fixunssfsi+0x46>
    501c:	66 0f       	add	r22, r22
    501e:	77 1f       	adc	r23, r23
    5020:	88 1f       	adc	r24, r24
    5022:	99 1f       	adc	r25, r25
    5024:	1a f0       	brmi	.+6      	; 0x502c <__fixunssfsi+0x22>
    5026:	ba 95       	dec	r27
    5028:	c9 f7       	brne	.-14     	; 0x501c <__fixunssfsi+0x12>
    502a:	12 c0       	rjmp	.+36     	; 0x5050 <__fixunssfsi+0x46>
    502c:	b1 30       	cpi	r27, 0x01	; 1
    502e:	81 f0       	breq	.+32     	; 0x5050 <__fixunssfsi+0x46>
    5030:	c3 d0       	rcall	.+390    	; 0x51b8 <__fp_zero>
    5032:	b1 e0       	ldi	r27, 0x01	; 1
    5034:	08 95       	ret
    5036:	c0 c0       	rjmp	.+384    	; 0x51b8 <__fp_zero>
    5038:	67 2f       	mov	r22, r23
    503a:	78 2f       	mov	r23, r24
    503c:	88 27       	eor	r24, r24
    503e:	b8 5f       	subi	r27, 0xF8	; 248
    5040:	39 f0       	breq	.+14     	; 0x5050 <__fixunssfsi+0x46>
    5042:	b9 3f       	cpi	r27, 0xF9	; 249
    5044:	cc f3       	brlt	.-14     	; 0x5038 <__fixunssfsi+0x2e>
    5046:	86 95       	lsr	r24
    5048:	77 95       	ror	r23
    504a:	67 95       	ror	r22
    504c:	b3 95       	inc	r27
    504e:	d9 f7       	brne	.-10     	; 0x5046 <__fixunssfsi+0x3c>
    5050:	3e f4       	brtc	.+14     	; 0x5060 <__fixunssfsi+0x56>
    5052:	90 95       	com	r25
    5054:	80 95       	com	r24
    5056:	70 95       	com	r23
    5058:	61 95       	neg	r22
    505a:	7f 4f       	sbci	r23, 0xFF	; 255
    505c:	8f 4f       	sbci	r24, 0xFF	; 255
    505e:	9f 4f       	sbci	r25, 0xFF	; 255
    5060:	08 95       	ret

00005062 <__floatunsisf>:
    5062:	e8 94       	clt
    5064:	09 c0       	rjmp	.+18     	; 0x5078 <__floatsisf+0x12>

00005066 <__floatsisf>:
    5066:	97 fb       	bst	r25, 7
    5068:	3e f4       	brtc	.+14     	; 0x5078 <__floatsisf+0x12>
    506a:	90 95       	com	r25
    506c:	80 95       	com	r24
    506e:	70 95       	com	r23
    5070:	61 95       	neg	r22
    5072:	7f 4f       	sbci	r23, 0xFF	; 255
    5074:	8f 4f       	sbci	r24, 0xFF	; 255
    5076:	9f 4f       	sbci	r25, 0xFF	; 255
    5078:	99 23       	and	r25, r25
    507a:	a9 f0       	breq	.+42     	; 0x50a6 <__floatsisf+0x40>
    507c:	f9 2f       	mov	r31, r25
    507e:	96 e9       	ldi	r25, 0x96	; 150
    5080:	bb 27       	eor	r27, r27
    5082:	93 95       	inc	r25
    5084:	f6 95       	lsr	r31
    5086:	87 95       	ror	r24
    5088:	77 95       	ror	r23
    508a:	67 95       	ror	r22
    508c:	b7 95       	ror	r27
    508e:	f1 11       	cpse	r31, r1
    5090:	f8 cf       	rjmp	.-16     	; 0x5082 <__floatsisf+0x1c>
    5092:	fa f4       	brpl	.+62     	; 0x50d2 <__floatsisf+0x6c>
    5094:	bb 0f       	add	r27, r27
    5096:	11 f4       	brne	.+4      	; 0x509c <__floatsisf+0x36>
    5098:	60 ff       	sbrs	r22, 0
    509a:	1b c0       	rjmp	.+54     	; 0x50d2 <__floatsisf+0x6c>
    509c:	6f 5f       	subi	r22, 0xFF	; 255
    509e:	7f 4f       	sbci	r23, 0xFF	; 255
    50a0:	8f 4f       	sbci	r24, 0xFF	; 255
    50a2:	9f 4f       	sbci	r25, 0xFF	; 255
    50a4:	16 c0       	rjmp	.+44     	; 0x50d2 <__floatsisf+0x6c>
    50a6:	88 23       	and	r24, r24
    50a8:	11 f0       	breq	.+4      	; 0x50ae <__floatsisf+0x48>
    50aa:	96 e9       	ldi	r25, 0x96	; 150
    50ac:	11 c0       	rjmp	.+34     	; 0x50d0 <__floatsisf+0x6a>
    50ae:	77 23       	and	r23, r23
    50b0:	21 f0       	breq	.+8      	; 0x50ba <__floatsisf+0x54>
    50b2:	9e e8       	ldi	r25, 0x8E	; 142
    50b4:	87 2f       	mov	r24, r23
    50b6:	76 2f       	mov	r23, r22
    50b8:	05 c0       	rjmp	.+10     	; 0x50c4 <__floatsisf+0x5e>
    50ba:	66 23       	and	r22, r22
    50bc:	71 f0       	breq	.+28     	; 0x50da <__floatsisf+0x74>
    50be:	96 e8       	ldi	r25, 0x86	; 134
    50c0:	86 2f       	mov	r24, r22
    50c2:	70 e0       	ldi	r23, 0x00	; 0
    50c4:	60 e0       	ldi	r22, 0x00	; 0
    50c6:	2a f0       	brmi	.+10     	; 0x50d2 <__floatsisf+0x6c>
    50c8:	9a 95       	dec	r25
    50ca:	66 0f       	add	r22, r22
    50cc:	77 1f       	adc	r23, r23
    50ce:	88 1f       	adc	r24, r24
    50d0:	da f7       	brpl	.-10     	; 0x50c8 <__floatsisf+0x62>
    50d2:	88 0f       	add	r24, r24
    50d4:	96 95       	lsr	r25
    50d6:	87 95       	ror	r24
    50d8:	97 f9       	bld	r25, 7
    50da:	08 95       	ret

000050dc <__fp_cmp>:
    50dc:	99 0f       	add	r25, r25
    50de:	00 08       	sbc	r0, r0
    50e0:	55 0f       	add	r21, r21
    50e2:	aa 0b       	sbc	r26, r26
    50e4:	e0 e8       	ldi	r30, 0x80	; 128
    50e6:	fe ef       	ldi	r31, 0xFE	; 254
    50e8:	16 16       	cp	r1, r22
    50ea:	17 06       	cpc	r1, r23
    50ec:	e8 07       	cpc	r30, r24
    50ee:	f9 07       	cpc	r31, r25
    50f0:	c0 f0       	brcs	.+48     	; 0x5122 <__fp_cmp+0x46>
    50f2:	12 16       	cp	r1, r18
    50f4:	13 06       	cpc	r1, r19
    50f6:	e4 07       	cpc	r30, r20
    50f8:	f5 07       	cpc	r31, r21
    50fa:	98 f0       	brcs	.+38     	; 0x5122 <__fp_cmp+0x46>
    50fc:	62 1b       	sub	r22, r18
    50fe:	73 0b       	sbc	r23, r19
    5100:	84 0b       	sbc	r24, r20
    5102:	95 0b       	sbc	r25, r21
    5104:	39 f4       	brne	.+14     	; 0x5114 <__fp_cmp+0x38>
    5106:	0a 26       	eor	r0, r26
    5108:	61 f0       	breq	.+24     	; 0x5122 <__fp_cmp+0x46>
    510a:	23 2b       	or	r18, r19
    510c:	24 2b       	or	r18, r20
    510e:	25 2b       	or	r18, r21
    5110:	21 f4       	brne	.+8      	; 0x511a <__fp_cmp+0x3e>
    5112:	08 95       	ret
    5114:	0a 26       	eor	r0, r26
    5116:	09 f4       	brne	.+2      	; 0x511a <__fp_cmp+0x3e>
    5118:	a1 40       	sbci	r26, 0x01	; 1
    511a:	a6 95       	lsr	r26
    511c:	8f ef       	ldi	r24, 0xFF	; 255
    511e:	81 1d       	adc	r24, r1
    5120:	81 1d       	adc	r24, r1
    5122:	08 95       	ret

00005124 <__fp_inf>:
    5124:	97 f9       	bld	r25, 7
    5126:	9f 67       	ori	r25, 0x7F	; 127
    5128:	80 e8       	ldi	r24, 0x80	; 128
    512a:	70 e0       	ldi	r23, 0x00	; 0
    512c:	60 e0       	ldi	r22, 0x00	; 0
    512e:	08 95       	ret

00005130 <__fp_nan>:
    5130:	9f ef       	ldi	r25, 0xFF	; 255
    5132:	80 ec       	ldi	r24, 0xC0	; 192
    5134:	08 95       	ret

00005136 <__fp_pscA>:
    5136:	00 24       	eor	r0, r0
    5138:	0a 94       	dec	r0
    513a:	16 16       	cp	r1, r22
    513c:	17 06       	cpc	r1, r23
    513e:	18 06       	cpc	r1, r24
    5140:	09 06       	cpc	r0, r25
    5142:	08 95       	ret

00005144 <__fp_pscB>:
    5144:	00 24       	eor	r0, r0
    5146:	0a 94       	dec	r0
    5148:	12 16       	cp	r1, r18
    514a:	13 06       	cpc	r1, r19
    514c:	14 06       	cpc	r1, r20
    514e:	05 06       	cpc	r0, r21
    5150:	08 95       	ret

00005152 <__fp_round>:
    5152:	09 2e       	mov	r0, r25
    5154:	03 94       	inc	r0
    5156:	00 0c       	add	r0, r0
    5158:	11 f4       	brne	.+4      	; 0x515e <__fp_round+0xc>
    515a:	88 23       	and	r24, r24
    515c:	52 f0       	brmi	.+20     	; 0x5172 <__fp_round+0x20>
    515e:	bb 0f       	add	r27, r27
    5160:	40 f4       	brcc	.+16     	; 0x5172 <__fp_round+0x20>
    5162:	bf 2b       	or	r27, r31
    5164:	11 f4       	brne	.+4      	; 0x516a <__fp_round+0x18>
    5166:	60 ff       	sbrs	r22, 0
    5168:	04 c0       	rjmp	.+8      	; 0x5172 <__fp_round+0x20>
    516a:	6f 5f       	subi	r22, 0xFF	; 255
    516c:	7f 4f       	sbci	r23, 0xFF	; 255
    516e:	8f 4f       	sbci	r24, 0xFF	; 255
    5170:	9f 4f       	sbci	r25, 0xFF	; 255
    5172:	08 95       	ret

00005174 <__fp_split3>:
    5174:	57 fd       	sbrc	r21, 7
    5176:	90 58       	subi	r25, 0x80	; 128
    5178:	44 0f       	add	r20, r20
    517a:	55 1f       	adc	r21, r21
    517c:	59 f0       	breq	.+22     	; 0x5194 <__fp_splitA+0x10>
    517e:	5f 3f       	cpi	r21, 0xFF	; 255
    5180:	71 f0       	breq	.+28     	; 0x519e <__fp_splitA+0x1a>
    5182:	47 95       	ror	r20

00005184 <__fp_splitA>:
    5184:	88 0f       	add	r24, r24
    5186:	97 fb       	bst	r25, 7
    5188:	99 1f       	adc	r25, r25
    518a:	61 f0       	breq	.+24     	; 0x51a4 <__fp_splitA+0x20>
    518c:	9f 3f       	cpi	r25, 0xFF	; 255
    518e:	79 f0       	breq	.+30     	; 0x51ae <__fp_splitA+0x2a>
    5190:	87 95       	ror	r24
    5192:	08 95       	ret
    5194:	12 16       	cp	r1, r18
    5196:	13 06       	cpc	r1, r19
    5198:	14 06       	cpc	r1, r20
    519a:	55 1f       	adc	r21, r21
    519c:	f2 cf       	rjmp	.-28     	; 0x5182 <__fp_split3+0xe>
    519e:	46 95       	lsr	r20
    51a0:	f1 df       	rcall	.-30     	; 0x5184 <__fp_splitA>
    51a2:	08 c0       	rjmp	.+16     	; 0x51b4 <__fp_splitA+0x30>
    51a4:	16 16       	cp	r1, r22
    51a6:	17 06       	cpc	r1, r23
    51a8:	18 06       	cpc	r1, r24
    51aa:	99 1f       	adc	r25, r25
    51ac:	f1 cf       	rjmp	.-30     	; 0x5190 <__fp_splitA+0xc>
    51ae:	86 95       	lsr	r24
    51b0:	71 05       	cpc	r23, r1
    51b2:	61 05       	cpc	r22, r1
    51b4:	08 94       	sec
    51b6:	08 95       	ret

000051b8 <__fp_zero>:
    51b8:	e8 94       	clt

000051ba <__fp_szero>:
    51ba:	bb 27       	eor	r27, r27
    51bc:	66 27       	eor	r22, r22
    51be:	77 27       	eor	r23, r23
    51c0:	cb 01       	movw	r24, r22
    51c2:	97 f9       	bld	r25, 7
    51c4:	08 95       	ret

000051c6 <__gesf2>:
    51c6:	8a df       	rcall	.-236    	; 0x50dc <__fp_cmp>
    51c8:	08 f4       	brcc	.+2      	; 0x51cc <__gesf2+0x6>
    51ca:	8f ef       	ldi	r24, 0xFF	; 255
    51cc:	08 95       	ret

000051ce <__mulsf3>:
    51ce:	0b d0       	rcall	.+22     	; 0x51e6 <__mulsf3x>
    51d0:	c0 cf       	rjmp	.-128    	; 0x5152 <__fp_round>
    51d2:	b1 df       	rcall	.-158    	; 0x5136 <__fp_pscA>
    51d4:	28 f0       	brcs	.+10     	; 0x51e0 <__mulsf3+0x12>
    51d6:	b6 df       	rcall	.-148    	; 0x5144 <__fp_pscB>
    51d8:	18 f0       	brcs	.+6      	; 0x51e0 <__mulsf3+0x12>
    51da:	95 23       	and	r25, r21
    51dc:	09 f0       	breq	.+2      	; 0x51e0 <__mulsf3+0x12>
    51de:	a2 cf       	rjmp	.-188    	; 0x5124 <__fp_inf>
    51e0:	a7 cf       	rjmp	.-178    	; 0x5130 <__fp_nan>
    51e2:	11 24       	eor	r1, r1
    51e4:	ea cf       	rjmp	.-44     	; 0x51ba <__fp_szero>

000051e6 <__mulsf3x>:
    51e6:	c6 df       	rcall	.-116    	; 0x5174 <__fp_split3>
    51e8:	a0 f3       	brcs	.-24     	; 0x51d2 <__mulsf3+0x4>

000051ea <__mulsf3_pse>:
    51ea:	95 9f       	mul	r25, r21
    51ec:	d1 f3       	breq	.-12     	; 0x51e2 <__mulsf3+0x14>
    51ee:	95 0f       	add	r25, r21
    51f0:	50 e0       	ldi	r21, 0x00	; 0
    51f2:	55 1f       	adc	r21, r21
    51f4:	62 9f       	mul	r22, r18
    51f6:	f0 01       	movw	r30, r0
    51f8:	72 9f       	mul	r23, r18
    51fa:	bb 27       	eor	r27, r27
    51fc:	f0 0d       	add	r31, r0
    51fe:	b1 1d       	adc	r27, r1
    5200:	63 9f       	mul	r22, r19
    5202:	aa 27       	eor	r26, r26
    5204:	f0 0d       	add	r31, r0
    5206:	b1 1d       	adc	r27, r1
    5208:	aa 1f       	adc	r26, r26
    520a:	64 9f       	mul	r22, r20
    520c:	66 27       	eor	r22, r22
    520e:	b0 0d       	add	r27, r0
    5210:	a1 1d       	adc	r26, r1
    5212:	66 1f       	adc	r22, r22
    5214:	82 9f       	mul	r24, r18
    5216:	22 27       	eor	r18, r18
    5218:	b0 0d       	add	r27, r0
    521a:	a1 1d       	adc	r26, r1
    521c:	62 1f       	adc	r22, r18
    521e:	73 9f       	mul	r23, r19
    5220:	b0 0d       	add	r27, r0
    5222:	a1 1d       	adc	r26, r1
    5224:	62 1f       	adc	r22, r18
    5226:	83 9f       	mul	r24, r19
    5228:	a0 0d       	add	r26, r0
    522a:	61 1d       	adc	r22, r1
    522c:	22 1f       	adc	r18, r18
    522e:	74 9f       	mul	r23, r20
    5230:	33 27       	eor	r19, r19
    5232:	a0 0d       	add	r26, r0
    5234:	61 1d       	adc	r22, r1
    5236:	23 1f       	adc	r18, r19
    5238:	84 9f       	mul	r24, r20
    523a:	60 0d       	add	r22, r0
    523c:	21 1d       	adc	r18, r1
    523e:	82 2f       	mov	r24, r18
    5240:	76 2f       	mov	r23, r22
    5242:	6a 2f       	mov	r22, r26
    5244:	11 24       	eor	r1, r1
    5246:	9f 57       	subi	r25, 0x7F	; 127
    5248:	50 40       	sbci	r21, 0x00	; 0
    524a:	8a f0       	brmi	.+34     	; 0x526e <__mulsf3_pse+0x84>
    524c:	e1 f0       	breq	.+56     	; 0x5286 <__mulsf3_pse+0x9c>
    524e:	88 23       	and	r24, r24
    5250:	4a f0       	brmi	.+18     	; 0x5264 <__mulsf3_pse+0x7a>
    5252:	ee 0f       	add	r30, r30
    5254:	ff 1f       	adc	r31, r31
    5256:	bb 1f       	adc	r27, r27
    5258:	66 1f       	adc	r22, r22
    525a:	77 1f       	adc	r23, r23
    525c:	88 1f       	adc	r24, r24
    525e:	91 50       	subi	r25, 0x01	; 1
    5260:	50 40       	sbci	r21, 0x00	; 0
    5262:	a9 f7       	brne	.-22     	; 0x524e <__mulsf3_pse+0x64>
    5264:	9e 3f       	cpi	r25, 0xFE	; 254
    5266:	51 05       	cpc	r21, r1
    5268:	70 f0       	brcs	.+28     	; 0x5286 <__mulsf3_pse+0x9c>
    526a:	5c cf       	rjmp	.-328    	; 0x5124 <__fp_inf>
    526c:	a6 cf       	rjmp	.-180    	; 0x51ba <__fp_szero>
    526e:	5f 3f       	cpi	r21, 0xFF	; 255
    5270:	ec f3       	brlt	.-6      	; 0x526c <__mulsf3_pse+0x82>
    5272:	98 3e       	cpi	r25, 0xE8	; 232
    5274:	dc f3       	brlt	.-10     	; 0x526c <__mulsf3_pse+0x82>
    5276:	86 95       	lsr	r24
    5278:	77 95       	ror	r23
    527a:	67 95       	ror	r22
    527c:	b7 95       	ror	r27
    527e:	f7 95       	ror	r31
    5280:	e7 95       	ror	r30
    5282:	9f 5f       	subi	r25, 0xFF	; 255
    5284:	c1 f7       	brne	.-16     	; 0x5276 <__mulsf3_pse+0x8c>
    5286:	fe 2b       	or	r31, r30
    5288:	88 0f       	add	r24, r24
    528a:	91 1d       	adc	r25, r1
    528c:	96 95       	lsr	r25
    528e:	87 95       	ror	r24
    5290:	97 f9       	bld	r25, 7
    5292:	08 95       	ret

00005294 <__mulsi3>:
    5294:	db 01       	movw	r26, r22
    5296:	8f 93       	push	r24
    5298:	9f 93       	push	r25
    529a:	35 d0       	rcall	.+106    	; 0x5306 <__muluhisi3>
    529c:	bf 91       	pop	r27
    529e:	af 91       	pop	r26
    52a0:	a2 9f       	mul	r26, r18
    52a2:	80 0d       	add	r24, r0
    52a4:	91 1d       	adc	r25, r1
    52a6:	a3 9f       	mul	r26, r19
    52a8:	90 0d       	add	r25, r0
    52aa:	b2 9f       	mul	r27, r18
    52ac:	90 0d       	add	r25, r0
    52ae:	11 24       	eor	r1, r1
    52b0:	08 95       	ret

000052b2 <__udivmodsi4>:
    52b2:	a1 e2       	ldi	r26, 0x21	; 33
    52b4:	1a 2e       	mov	r1, r26
    52b6:	aa 1b       	sub	r26, r26
    52b8:	bb 1b       	sub	r27, r27
    52ba:	fd 01       	movw	r30, r26
    52bc:	0d c0       	rjmp	.+26     	; 0x52d8 <__udivmodsi4_ep>

000052be <__udivmodsi4_loop>:
    52be:	aa 1f       	adc	r26, r26
    52c0:	bb 1f       	adc	r27, r27
    52c2:	ee 1f       	adc	r30, r30
    52c4:	ff 1f       	adc	r31, r31
    52c6:	a2 17       	cp	r26, r18
    52c8:	b3 07       	cpc	r27, r19
    52ca:	e4 07       	cpc	r30, r20
    52cc:	f5 07       	cpc	r31, r21
    52ce:	20 f0       	brcs	.+8      	; 0x52d8 <__udivmodsi4_ep>
    52d0:	a2 1b       	sub	r26, r18
    52d2:	b3 0b       	sbc	r27, r19
    52d4:	e4 0b       	sbc	r30, r20
    52d6:	f5 0b       	sbc	r31, r21

000052d8 <__udivmodsi4_ep>:
    52d8:	66 1f       	adc	r22, r22
    52da:	77 1f       	adc	r23, r23
    52dc:	88 1f       	adc	r24, r24
    52de:	99 1f       	adc	r25, r25
    52e0:	1a 94       	dec	r1
    52e2:	69 f7       	brne	.-38     	; 0x52be <__udivmodsi4_loop>
    52e4:	60 95       	com	r22
    52e6:	70 95       	com	r23
    52e8:	80 95       	com	r24
    52ea:	90 95       	com	r25
    52ec:	9b 01       	movw	r18, r22
    52ee:	ac 01       	movw	r20, r24
    52f0:	bd 01       	movw	r22, r26
    52f2:	cf 01       	movw	r24, r30
    52f4:	08 95       	ret

000052f6 <__tablejump2__>:
    52f6:	ee 0f       	add	r30, r30
    52f8:	ff 1f       	adc	r31, r31
    52fa:	88 1f       	adc	r24, r24
    52fc:	8b bf       	out	0x3b, r24	; 59
    52fe:	07 90       	elpm	r0, Z+
    5300:	f6 91       	elpm	r31, Z
    5302:	e0 2d       	mov	r30, r0
    5304:	19 94       	eijmp

00005306 <__muluhisi3>:
    5306:	bb d0       	rcall	.+374    	; 0x547e <__umulhisi3>
    5308:	a5 9f       	mul	r26, r21
    530a:	90 0d       	add	r25, r0
    530c:	b4 9f       	mul	r27, r20
    530e:	90 0d       	add	r25, r0
    5310:	a4 9f       	mul	r26, r20
    5312:	80 0d       	add	r24, r0
    5314:	91 1d       	adc	r25, r1
    5316:	11 24       	eor	r1, r1
    5318:	08 95       	ret

0000531a <__muldi3>:
    531a:	df 93       	push	r29
    531c:	cf 93       	push	r28
    531e:	1f 93       	push	r17
    5320:	0f 93       	push	r16
    5322:	9a 9d       	mul	r25, r10
    5324:	f0 2d       	mov	r31, r0
    5326:	21 9f       	mul	r18, r17
    5328:	f0 0d       	add	r31, r0
    532a:	8b 9d       	mul	r24, r11
    532c:	f0 0d       	add	r31, r0
    532e:	8a 9d       	mul	r24, r10
    5330:	e0 2d       	mov	r30, r0
    5332:	f1 0d       	add	r31, r1
    5334:	03 9f       	mul	r16, r19
    5336:	f0 0d       	add	r31, r0
    5338:	02 9f       	mul	r16, r18
    533a:	e0 0d       	add	r30, r0
    533c:	f1 1d       	adc	r31, r1
    533e:	4e 9d       	mul	r20, r14
    5340:	e0 0d       	add	r30, r0
    5342:	f1 1d       	adc	r31, r1
    5344:	5e 9d       	mul	r21, r14
    5346:	f0 0d       	add	r31, r0
    5348:	4f 9d       	mul	r20, r15
    534a:	f0 0d       	add	r31, r0
    534c:	7f 93       	push	r23
    534e:	6f 93       	push	r22
    5350:	bf 92       	push	r11
    5352:	af 92       	push	r10
    5354:	5f 93       	push	r21
    5356:	4f 93       	push	r20
    5358:	d5 01       	movw	r26, r10
    535a:	91 d0       	rcall	.+290    	; 0x547e <__umulhisi3>
    535c:	8b 01       	movw	r16, r22
    535e:	ac 01       	movw	r20, r24
    5360:	d7 01       	movw	r26, r14
    5362:	8d d0       	rcall	.+282    	; 0x547e <__umulhisi3>
    5364:	eb 01       	movw	r28, r22
    5366:	e8 0f       	add	r30, r24
    5368:	f9 1f       	adc	r31, r25
    536a:	d6 01       	movw	r26, r12
    536c:	1f d0       	rcall	.+62     	; 0x53ac <__muldi3_6>
    536e:	2f 91       	pop	r18
    5370:	3f 91       	pop	r19
    5372:	d6 01       	movw	r26, r12
    5374:	84 d0       	rcall	.+264    	; 0x547e <__umulhisi3>
    5376:	c6 0f       	add	r28, r22
    5378:	d7 1f       	adc	r29, r23
    537a:	e8 1f       	adc	r30, r24
    537c:	f9 1f       	adc	r31, r25
    537e:	af 91       	pop	r26
    5380:	bf 91       	pop	r27
    5382:	14 d0       	rcall	.+40     	; 0x53ac <__muldi3_6>
    5384:	2f 91       	pop	r18
    5386:	3f 91       	pop	r19
    5388:	7a d0       	rcall	.+244    	; 0x547e <__umulhisi3>
    538a:	c6 0f       	add	r28, r22
    538c:	d7 1f       	adc	r29, r23
    538e:	e8 1f       	adc	r30, r24
    5390:	f9 1f       	adc	r31, r25
    5392:	d6 01       	movw	r26, r12
    5394:	74 d0       	rcall	.+232    	; 0x547e <__umulhisi3>
    5396:	e6 0f       	add	r30, r22
    5398:	f7 1f       	adc	r31, r23
    539a:	98 01       	movw	r18, r16
    539c:	be 01       	movw	r22, r28
    539e:	cf 01       	movw	r24, r30
    53a0:	11 24       	eor	r1, r1
    53a2:	0f 91       	pop	r16
    53a4:	1f 91       	pop	r17
    53a6:	cf 91       	pop	r28
    53a8:	df 91       	pop	r29
    53aa:	08 95       	ret

000053ac <__muldi3_6>:
    53ac:	68 d0       	rcall	.+208    	; 0x547e <__umulhisi3>
    53ae:	46 0f       	add	r20, r22
    53b0:	57 1f       	adc	r21, r23
    53b2:	c8 1f       	adc	r28, r24
    53b4:	d9 1f       	adc	r29, r25
    53b6:	08 f4       	brcc	.+2      	; 0x53ba <__muldi3_6+0xe>
    53b8:	31 96       	adiw	r30, 0x01	; 1
    53ba:	08 95       	ret

000053bc <__ashldi3>:
    53bc:	0f 93       	push	r16
    53be:	08 30       	cpi	r16, 0x08	; 8
    53c0:	90 f0       	brcs	.+36     	; 0x53e6 <__ashldi3+0x2a>
    53c2:	98 2f       	mov	r25, r24
    53c4:	87 2f       	mov	r24, r23
    53c6:	76 2f       	mov	r23, r22
    53c8:	65 2f       	mov	r22, r21
    53ca:	54 2f       	mov	r21, r20
    53cc:	43 2f       	mov	r20, r19
    53ce:	32 2f       	mov	r19, r18
    53d0:	22 27       	eor	r18, r18
    53d2:	08 50       	subi	r16, 0x08	; 8
    53d4:	f4 cf       	rjmp	.-24     	; 0x53be <__ashldi3+0x2>
    53d6:	22 0f       	add	r18, r18
    53d8:	33 1f       	adc	r19, r19
    53da:	44 1f       	adc	r20, r20
    53dc:	55 1f       	adc	r21, r21
    53de:	66 1f       	adc	r22, r22
    53e0:	77 1f       	adc	r23, r23
    53e2:	88 1f       	adc	r24, r24
    53e4:	99 1f       	adc	r25, r25
    53e6:	0a 95       	dec	r16
    53e8:	b2 f7       	brpl	.-20     	; 0x53d6 <__ashldi3+0x1a>
    53ea:	0f 91       	pop	r16
    53ec:	08 95       	ret

000053ee <__ashrdi3>:
    53ee:	97 fb       	bst	r25, 7
    53f0:	10 f8       	bld	r1, 0

000053f2 <__lshrdi3>:
    53f2:	16 94       	lsr	r1
    53f4:	00 08       	sbc	r0, r0
    53f6:	0f 93       	push	r16
    53f8:	08 30       	cpi	r16, 0x08	; 8
    53fa:	98 f0       	brcs	.+38     	; 0x5422 <__lshrdi3+0x30>
    53fc:	08 50       	subi	r16, 0x08	; 8
    53fe:	23 2f       	mov	r18, r19
    5400:	34 2f       	mov	r19, r20
    5402:	45 2f       	mov	r20, r21
    5404:	56 2f       	mov	r21, r22
    5406:	67 2f       	mov	r22, r23
    5408:	78 2f       	mov	r23, r24
    540a:	89 2f       	mov	r24, r25
    540c:	90 2d       	mov	r25, r0
    540e:	f4 cf       	rjmp	.-24     	; 0x53f8 <__lshrdi3+0x6>
    5410:	05 94       	asr	r0
    5412:	97 95       	ror	r25
    5414:	87 95       	ror	r24
    5416:	77 95       	ror	r23
    5418:	67 95       	ror	r22
    541a:	57 95       	ror	r21
    541c:	47 95       	ror	r20
    541e:	37 95       	ror	r19
    5420:	27 95       	ror	r18
    5422:	0a 95       	dec	r16
    5424:	aa f7       	brpl	.-22     	; 0x5410 <__lshrdi3+0x1e>
    5426:	0f 91       	pop	r16
    5428:	08 95       	ret

0000542a <__adddi3>:
    542a:	2a 0d       	add	r18, r10
    542c:	3b 1d       	adc	r19, r11
    542e:	4c 1d       	adc	r20, r12
    5430:	5d 1d       	adc	r21, r13
    5432:	6e 1d       	adc	r22, r14
    5434:	7f 1d       	adc	r23, r15
    5436:	80 1f       	adc	r24, r16
    5438:	91 1f       	adc	r25, r17
    543a:	08 95       	ret

0000543c <__adddi3_s8>:
    543c:	00 24       	eor	r0, r0
    543e:	a7 fd       	sbrc	r26, 7
    5440:	00 94       	com	r0
    5442:	2a 0f       	add	r18, r26
    5444:	30 1d       	adc	r19, r0
    5446:	40 1d       	adc	r20, r0
    5448:	50 1d       	adc	r21, r0
    544a:	60 1d       	adc	r22, r0
    544c:	70 1d       	adc	r23, r0
    544e:	80 1d       	adc	r24, r0
    5450:	90 1d       	adc	r25, r0
    5452:	08 95       	ret

00005454 <__subdi3>:
    5454:	2a 19       	sub	r18, r10
    5456:	3b 09       	sbc	r19, r11
    5458:	4c 09       	sbc	r20, r12
    545a:	5d 09       	sbc	r21, r13
    545c:	6e 09       	sbc	r22, r14
    545e:	7f 09       	sbc	r23, r15
    5460:	80 0b       	sbc	r24, r16
    5462:	91 0b       	sbc	r25, r17
    5464:	08 95       	ret

00005466 <__cmpdi2_s8>:
    5466:	00 24       	eor	r0, r0
    5468:	a7 fd       	sbrc	r26, 7
    546a:	00 94       	com	r0
    546c:	2a 17       	cp	r18, r26
    546e:	30 05       	cpc	r19, r0
    5470:	40 05       	cpc	r20, r0
    5472:	50 05       	cpc	r21, r0
    5474:	60 05       	cpc	r22, r0
    5476:	70 05       	cpc	r23, r0
    5478:	80 05       	cpc	r24, r0
    547a:	90 05       	cpc	r25, r0
    547c:	08 95       	ret

0000547e <__umulhisi3>:
    547e:	a2 9f       	mul	r26, r18
    5480:	b0 01       	movw	r22, r0
    5482:	b3 9f       	mul	r27, r19
    5484:	c0 01       	movw	r24, r0
    5486:	a3 9f       	mul	r26, r19
    5488:	70 0d       	add	r23, r0
    548a:	81 1d       	adc	r24, r1
    548c:	11 24       	eor	r1, r1
    548e:	91 1d       	adc	r25, r1
    5490:	b2 9f       	mul	r27, r18
    5492:	70 0d       	add	r23, r0
    5494:	81 1d       	adc	r24, r1
    5496:	11 24       	eor	r1, r1
    5498:	91 1d       	adc	r25, r1
    549a:	08 95       	ret

0000549c <memcpy_P>:
    549c:	fb 01       	movw	r30, r22
    549e:	dc 01       	movw	r26, r24
    54a0:	02 c0       	rjmp	.+4      	; 0x54a6 <memcpy_P+0xa>
    54a2:	05 90       	lpm	r0, Z+
    54a4:	0d 92       	st	X+, r0
    54a6:	41 50       	subi	r20, 0x01	; 1
    54a8:	50 40       	sbci	r21, 0x00	; 0
    54aa:	d8 f7       	brcc	.-10     	; 0x54a2 <memcpy_P+0x6>
    54ac:	08 95       	ret

000054ae <memcmp>:
    54ae:	fb 01       	movw	r30, r22
    54b0:	dc 01       	movw	r26, r24
    54b2:	04 c0       	rjmp	.+8      	; 0x54bc <memcmp+0xe>
    54b4:	8d 91       	ld	r24, X+
    54b6:	01 90       	ld	r0, Z+
    54b8:	80 19       	sub	r24, r0
    54ba:	21 f4       	brne	.+8      	; 0x54c4 <memcmp+0x16>
    54bc:	41 50       	subi	r20, 0x01	; 1
    54be:	50 40       	sbci	r21, 0x00	; 0
    54c0:	c8 f7       	brcc	.-14     	; 0x54b4 <memcmp+0x6>
    54c2:	88 1b       	sub	r24, r24
    54c4:	99 0b       	sbc	r25, r25
    54c6:	08 95       	ret

000054c8 <strncpy>:
    54c8:	fb 01       	movw	r30, r22
    54ca:	dc 01       	movw	r26, r24
    54cc:	41 50       	subi	r20, 0x01	; 1
    54ce:	50 40       	sbci	r21, 0x00	; 0
    54d0:	48 f0       	brcs	.+18     	; 0x54e4 <strncpy+0x1c>
    54d2:	01 90       	ld	r0, Z+
    54d4:	0d 92       	st	X+, r0
    54d6:	00 20       	and	r0, r0
    54d8:	c9 f7       	brne	.-14     	; 0x54cc <strncpy+0x4>
    54da:	01 c0       	rjmp	.+2      	; 0x54de <strncpy+0x16>
    54dc:	1d 92       	st	X+, r1
    54de:	41 50       	subi	r20, 0x01	; 1
    54e0:	50 40       	sbci	r21, 0x00	; 0
    54e2:	e0 f7       	brcc	.-8      	; 0x54dc <strncpy+0x14>
    54e4:	08 95       	ret

000054e6 <_exit>:
    54e6:	f8 94       	cli

000054e8 <__stop_program>:
    54e8:	ff cf       	rjmp	.-2      	; 0x54e8 <__stop_program>
