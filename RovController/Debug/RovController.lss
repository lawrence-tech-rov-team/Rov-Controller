
RovController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000182  00800200  0000410c  000041a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000410c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000626  00800382  00800382  00004322  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004322  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004354  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000a78  00000000  00000000  00004394  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001a4c5  00000000  00000000  00004e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005957  00000000  00000000  0001f2d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000696f  00000000  00000000  00024c28  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002180  00000000  00000000  0002b598  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000693a  00000000  00000000  0002d718  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000bae8  00000000  00000000  00034052  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b00  00000000  00000000  0003fb3a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4d c1       	rjmp	.+666    	; 0x29c <__ctors_end>
       2:	00 00       	nop
       4:	7c c1       	rjmp	.+760    	; 0x2fe <__bad_interrupt>
       6:	00 00       	nop
       8:	7a c1       	rjmp	.+756    	; 0x2fe <__bad_interrupt>
       a:	00 00       	nop
       c:	78 c1       	rjmp	.+752    	; 0x2fe <__bad_interrupt>
       e:	00 00       	nop
      10:	76 c1       	rjmp	.+748    	; 0x2fe <__bad_interrupt>
      12:	00 00       	nop
      14:	74 c1       	rjmp	.+744    	; 0x2fe <__bad_interrupt>
      16:	00 00       	nop
      18:	72 c1       	rjmp	.+740    	; 0x2fe <__bad_interrupt>
      1a:	00 00       	nop
      1c:	70 c1       	rjmp	.+736    	; 0x2fe <__bad_interrupt>
      1e:	00 00       	nop
      20:	6e c1       	rjmp	.+732    	; 0x2fe <__bad_interrupt>
      22:	00 00       	nop
      24:	6c c1       	rjmp	.+728    	; 0x2fe <__bad_interrupt>
      26:	00 00       	nop
      28:	6a c1       	rjmp	.+724    	; 0x2fe <__bad_interrupt>
      2a:	00 00       	nop
      2c:	68 c1       	rjmp	.+720    	; 0x2fe <__bad_interrupt>
      2e:	00 00       	nop
      30:	66 c1       	rjmp	.+716    	; 0x2fe <__bad_interrupt>
      32:	00 00       	nop
      34:	64 c1       	rjmp	.+712    	; 0x2fe <__bad_interrupt>
      36:	00 00       	nop
      38:	62 c1       	rjmp	.+708    	; 0x2fe <__bad_interrupt>
      3a:	00 00       	nop
      3c:	60 c1       	rjmp	.+704    	; 0x2fe <__bad_interrupt>
      3e:	00 00       	nop
      40:	5e c1       	rjmp	.+700    	; 0x2fe <__bad_interrupt>
      42:	00 00       	nop
      44:	5c c1       	rjmp	.+696    	; 0x2fe <__bad_interrupt>
      46:	00 00       	nop
      48:	5a c1       	rjmp	.+692    	; 0x2fe <__bad_interrupt>
      4a:	00 00       	nop
      4c:	58 c1       	rjmp	.+688    	; 0x2fe <__bad_interrupt>
      4e:	00 00       	nop
      50:	56 c1       	rjmp	.+684    	; 0x2fe <__bad_interrupt>
      52:	00 00       	nop
      54:	54 c1       	rjmp	.+680    	; 0x2fe <__bad_interrupt>
      56:	00 00       	nop
      58:	52 c1       	rjmp	.+676    	; 0x2fe <__bad_interrupt>
      5a:	00 00       	nop
      5c:	50 c1       	rjmp	.+672    	; 0x2fe <__bad_interrupt>
      5e:	00 00       	nop
      60:	4e c1       	rjmp	.+668    	; 0x2fe <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 81 14 	jmp	0x2902	; 0x2902 <__vector_25>
      68:	0c 94 bd 14 	jmp	0x297a	; 0x297a <__vector_26>
      6c:	48 c1       	rjmp	.+656    	; 0x2fe <__bad_interrupt>
      6e:	00 00       	nop
      70:	46 c1       	rjmp	.+652    	; 0x2fe <__bad_interrupt>
      72:	00 00       	nop
      74:	44 c1       	rjmp	.+648    	; 0x2fe <__bad_interrupt>
      76:	00 00       	nop
      78:	42 c1       	rjmp	.+644    	; 0x2fe <__bad_interrupt>
      7a:	00 00       	nop
      7c:	40 c1       	rjmp	.+640    	; 0x2fe <__bad_interrupt>
      7e:	00 00       	nop
      80:	3e c1       	rjmp	.+636    	; 0x2fe <__bad_interrupt>
      82:	00 00       	nop
      84:	3c c1       	rjmp	.+632    	; 0x2fe <__bad_interrupt>
      86:	00 00       	nop
      88:	3a c1       	rjmp	.+628    	; 0x2fe <__bad_interrupt>
      8a:	00 00       	nop
      8c:	38 c1       	rjmp	.+624    	; 0x2fe <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 09 15 	jmp	0x2a12	; 0x2a12 <__vector_36>
      94:	0c 94 45 15 	jmp	0x2a8a	; 0x2a8a <__vector_37>
      98:	32 c1       	rjmp	.+612    	; 0x2fe <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 b4 17 	jmp	0x2f68	; 0x2f68 <__vector_39>
      a0:	2e c1       	rjmp	.+604    	; 0x2fe <__bad_interrupt>
      a2:	00 00       	nop
      a4:	2c c1       	rjmp	.+600    	; 0x2fe <__bad_interrupt>
      a6:	00 00       	nop
      a8:	2a c1       	rjmp	.+596    	; 0x2fe <__bad_interrupt>
      aa:	00 00       	nop
      ac:	28 c1       	rjmp	.+592    	; 0x2fe <__bad_interrupt>
      ae:	00 00       	nop
      b0:	26 c1       	rjmp	.+588    	; 0x2fe <__bad_interrupt>
      b2:	00 00       	nop
      b4:	24 c1       	rjmp	.+584    	; 0x2fe <__bad_interrupt>
      b6:	00 00       	nop
      b8:	22 c1       	rjmp	.+580    	; 0x2fe <__bad_interrupt>
      ba:	00 00       	nop
      bc:	20 c1       	rjmp	.+576    	; 0x2fe <__bad_interrupt>
      be:	00 00       	nop
      c0:	1e c1       	rjmp	.+572    	; 0x2fe <__bad_interrupt>
      c2:	00 00       	nop
      c4:	1c c1       	rjmp	.+568    	; 0x2fe <__bad_interrupt>
      c6:	00 00       	nop
      c8:	1a c1       	rjmp	.+564    	; 0x2fe <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 91 15 	jmp	0x2b22	; 0x2b22 <__vector_51>
      d0:	0c 94 cd 15 	jmp	0x2b9a	; 0x2b9a <__vector_52>
      d4:	14 c1       	rjmp	.+552    	; 0x2fe <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 19 16 	jmp	0x2c32	; 0x2c32 <__vector_54>
      dc:	0c 94 55 16 	jmp	0x2caa	; 0x2caa <__vector_55>
      e0:	0e c1       	rjmp	.+540    	; 0x2fe <__bad_interrupt>
      e2:	00 00       	nop
      e4:	bb 18       	sub	r11, r11
      e6:	be 18       	sub	r11, r14
      e8:	be 18       	sub	r11, r14
      ea:	be 18       	sub	r11, r14
      ec:	be 18       	sub	r11, r14
      ee:	be 18       	sub	r11, r14
      f0:	be 18       	sub	r11, r14
      f2:	be 18       	sub	r11, r14
      f4:	d6 17       	cp	r29, r22
      f6:	be 18       	sub	r11, r14
      f8:	be 18       	sub	r11, r14
      fa:	be 18       	sub	r11, r14
      fc:	be 18       	sub	r11, r14
      fe:	be 18       	sub	r11, r14
     100:	be 18       	sub	r11, r14
     102:	be 18       	sub	r11, r14
     104:	d6 17       	cp	r29, r22
     106:	be 18       	sub	r11, r14
     108:	be 18       	sub	r11, r14
     10a:	be 18       	sub	r11, r14
     10c:	be 18       	sub	r11, r14
     10e:	be 18       	sub	r11, r14
     110:	be 18       	sub	r11, r14
     112:	be 18       	sub	r11, r14
     114:	de 17       	cp	r29, r30
     116:	be 18       	sub	r11, r14
     118:	be 18       	sub	r11, r14
     11a:	be 18       	sub	r11, r14
     11c:	be 18       	sub	r11, r14
     11e:	be 18       	sub	r11, r14
     120:	be 18       	sub	r11, r14
     122:	be 18       	sub	r11, r14
     124:	03 18       	sub	r0, r3
     126:	be 18       	sub	r11, r14
     128:	be 18       	sub	r11, r14
     12a:	be 18       	sub	r11, r14
     12c:	be 18       	sub	r11, r14
     12e:	be 18       	sub	r11, r14
     130:	be 18       	sub	r11, r14
     132:	be 18       	sub	r11, r14
     134:	de 17       	cp	r29, r30
     136:	be 18       	sub	r11, r14
     138:	be 18       	sub	r11, r14
     13a:	be 18       	sub	r11, r14
     13c:	be 18       	sub	r11, r14
     13e:	be 18       	sub	r11, r14
     140:	be 18       	sub	r11, r14
     142:	be 18       	sub	r11, r14
     144:	08 18       	sub	r0, r8
     146:	be 18       	sub	r11, r14
     148:	be 18       	sub	r11, r14
     14a:	be 18       	sub	r11, r14
     14c:	be 18       	sub	r11, r14
     14e:	be 18       	sub	r11, r14
     150:	be 18       	sub	r11, r14
     152:	be 18       	sub	r11, r14
     154:	0d 18       	sub	r0, r13
     156:	be 18       	sub	r11, r14
     158:	be 18       	sub	r11, r14
     15a:	be 18       	sub	r11, r14
     15c:	be 18       	sub	r11, r14
     15e:	be 18       	sub	r11, r14
     160:	be 18       	sub	r11, r14
     162:	be 18       	sub	r11, r14
     164:	1e 18       	sub	r1, r14
     166:	be 18       	sub	r11, r14
     168:	be 18       	sub	r11, r14
     16a:	be 18       	sub	r11, r14
     16c:	be 18       	sub	r11, r14
     16e:	be 18       	sub	r11, r14
     170:	be 18       	sub	r11, r14
     172:	be 18       	sub	r11, r14
     174:	47 18       	sub	r4, r7
     176:	be 18       	sub	r11, r14
     178:	be 18       	sub	r11, r14
     17a:	be 18       	sub	r11, r14
     17c:	be 18       	sub	r11, r14
     17e:	be 18       	sub	r11, r14
     180:	be 18       	sub	r11, r14
     182:	be 18       	sub	r11, r14
     184:	12 18       	sub	r1, r2
     186:	be 18       	sub	r11, r14
     188:	be 18       	sub	r11, r14
     18a:	be 18       	sub	r11, r14
     18c:	be 18       	sub	r11, r14
     18e:	be 18       	sub	r11, r14
     190:	be 18       	sub	r11, r14
     192:	be 18       	sub	r11, r14
     194:	2c 18       	sub	r2, r12
     196:	be 18       	sub	r11, r14
     198:	be 18       	sub	r11, r14
     19a:	be 18       	sub	r11, r14
     19c:	be 18       	sub	r11, r14
     19e:	be 18       	sub	r11, r14
     1a0:	be 18       	sub	r11, r14
     1a2:	be 18       	sub	r11, r14
     1a4:	49 18       	sub	r4, r9
     1a6:	be 18       	sub	r11, r14
     1a8:	be 18       	sub	r11, r14
     1aa:	be 18       	sub	r11, r14
     1ac:	be 18       	sub	r11, r14
     1ae:	be 18       	sub	r11, r14
     1b0:	be 18       	sub	r11, r14
     1b2:	be 18       	sub	r11, r14
     1b4:	49 18       	sub	r4, r9
     1b6:	be 18       	sub	r11, r14
     1b8:	be 18       	sub	r11, r14
     1ba:	be 18       	sub	r11, r14
     1bc:	be 18       	sub	r11, r14
     1be:	be 18       	sub	r11, r14
     1c0:	be 18       	sub	r11, r14
     1c2:	be 18       	sub	r11, r14
     1c4:	49 18       	sub	r4, r9
     1c6:	be 18       	sub	r11, r14
     1c8:	be 18       	sub	r11, r14
     1ca:	be 18       	sub	r11, r14
     1cc:	be 18       	sub	r11, r14
     1ce:	be 18       	sub	r11, r14
     1d0:	be 18       	sub	r11, r14
     1d2:	be 18       	sub	r11, r14
     1d4:	49 18       	sub	r4, r9
     1d6:	be 18       	sub	r11, r14
     1d8:	be 18       	sub	r11, r14
     1da:	be 18       	sub	r11, r14
     1dc:	be 18       	sub	r11, r14
     1de:	be 18       	sub	r11, r14
     1e0:	be 18       	sub	r11, r14
     1e2:	be 18       	sub	r11, r14
     1e4:	52 18       	sub	r5, r2
     1e6:	be 18       	sub	r11, r14
     1e8:	be 18       	sub	r11, r14
     1ea:	be 18       	sub	r11, r14
     1ec:	be 18       	sub	r11, r14
     1ee:	be 18       	sub	r11, r14
     1f0:	be 18       	sub	r11, r14
     1f2:	be 18       	sub	r11, r14
     1f4:	82 18       	sub	r8, r2
     1f6:	be 18       	sub	r11, r14
     1f8:	be 18       	sub	r11, r14
     1fa:	be 18       	sub	r11, r14
     1fc:	be 18       	sub	r11, r14
     1fe:	be 18       	sub	r11, r14
     200:	be 18       	sub	r11, r14
     202:	be 18       	sub	r11, r14
     204:	52 18       	sub	r5, r2
     206:	be 18       	sub	r11, r14
     208:	be 18       	sub	r11, r14
     20a:	be 18       	sub	r11, r14
     20c:	be 18       	sub	r11, r14
     20e:	be 18       	sub	r11, r14
     210:	be 18       	sub	r11, r14
     212:	be 18       	sub	r11, r14
     214:	82 18       	sub	r8, r2
     216:	be 18       	sub	r11, r14
     218:	be 18       	sub	r11, r14
     21a:	be 18       	sub	r11, r14
     21c:	be 18       	sub	r11, r14
     21e:	be 18       	sub	r11, r14
     220:	be 18       	sub	r11, r14
     222:	be 18       	sub	r11, r14
     224:	6a 18       	sub	r6, r10
     226:	be 18       	sub	r11, r14
     228:	be 18       	sub	r11, r14
     22a:	be 18       	sub	r11, r14
     22c:	be 18       	sub	r11, r14
     22e:	be 18       	sub	r11, r14
     230:	be 18       	sub	r11, r14
     232:	be 18       	sub	r11, r14
     234:	86 18       	sub	r8, r6
     236:	be 18       	sub	r11, r14
     238:	be 18       	sub	r11, r14
     23a:	be 18       	sub	r11, r14
     23c:	be 18       	sub	r11, r14
     23e:	be 18       	sub	r11, r14
     240:	be 18       	sub	r11, r14
     242:	be 18       	sub	r11, r14
     244:	86 18       	sub	r8, r6
     246:	be 18       	sub	r11, r14
     248:	be 18       	sub	r11, r14
     24a:	be 18       	sub	r11, r14
     24c:	be 18       	sub	r11, r14
     24e:	be 18       	sub	r11, r14
     250:	be 18       	sub	r11, r14
     252:	be 18       	sub	r11, r14
     254:	9b 18       	sub	r9, r11
     256:	be 18       	sub	r11, r14
     258:	be 18       	sub	r11, r14
     25a:	be 18       	sub	r11, r14
     25c:	be 18       	sub	r11, r14
     25e:	be 18       	sub	r11, r14
     260:	be 18       	sub	r11, r14
     262:	be 18       	sub	r11, r14
     264:	b5 18       	sub	r11, r5
     266:	be 18       	sub	r11, r14
     268:	be 18       	sub	r11, r14
     26a:	be 18       	sub	r11, r14
     26c:	be 18       	sub	r11, r14
     26e:	be 18       	sub	r11, r14
     270:	be 18       	sub	r11, r14
     272:	be 18       	sub	r11, r14
     274:	b5 18       	sub	r11, r5

00000276 <__trampolines_end>:
     276:	63 82       	std	Z+3, r6	; 0x03
     278:	53 63       	ori	r21, 0x33	; 51

0000027a <_ZL5iphdr>:
     27a:	45 00 00 82 00 00 40 00 20                          E.....@. 

00000283 <_ZL9arpreqhdr>:
     283:	00 01 08 00 06 04 00 01 00                          .........

0000028c <__ctors_start>:
     28c:	2d 07       	cpc	r18, r29
     28e:	e6 14       	cp	r14, r6
     290:	6e 15       	cp	r22, r14
     292:	f6 15       	cp	r31, r6
     294:	7e 16       	cp	r7, r30
     296:	25 1a       	sub	r2, r21
     298:	81 1a       	sub	r8, r17
     29a:	be 1b       	sub	r27, r30

0000029c <__ctors_end>:
     29c:	11 24       	eor	r1, r1
     29e:	1f be       	out	0x3f, r1	; 63
     2a0:	cf ef       	ldi	r28, 0xFF	; 255
     2a2:	d1 e2       	ldi	r29, 0x21	; 33
     2a4:	de bf       	out	0x3e, r29	; 62
     2a6:	cd bf       	out	0x3d, r28	; 61
     2a8:	00 e0       	ldi	r16, 0x00	; 0
     2aa:	0c bf       	out	0x3c, r16	; 60

000002ac <__do_copy_data>:
     2ac:	13 e0       	ldi	r17, 0x03	; 3
     2ae:	a0 e0       	ldi	r26, 0x00	; 0
     2b0:	b2 e0       	ldi	r27, 0x02	; 2
     2b2:	ec e0       	ldi	r30, 0x0C	; 12
     2b4:	f1 e4       	ldi	r31, 0x41	; 65
     2b6:	00 e0       	ldi	r16, 0x00	; 0
     2b8:	0b bf       	out	0x3b, r16	; 59
     2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <__do_copy_data+0x14>
     2bc:	07 90       	elpm	r0, Z+
     2be:	0d 92       	st	X+, r0
     2c0:	a2 38       	cpi	r26, 0x82	; 130
     2c2:	b1 07       	cpc	r27, r17
     2c4:	d9 f7       	brne	.-10     	; 0x2bc <__do_copy_data+0x10>

000002c6 <__do_clear_bss>:
     2c6:	29 e0       	ldi	r18, 0x09	; 9
     2c8:	a2 e8       	ldi	r26, 0x82	; 130
     2ca:	b3 e0       	ldi	r27, 0x03	; 3
     2cc:	01 c0       	rjmp	.+2      	; 0x2d0 <.do_clear_bss_start>

000002ce <.do_clear_bss_loop>:
     2ce:	1d 92       	st	X+, r1

000002d0 <.do_clear_bss_start>:
     2d0:	a8 3a       	cpi	r26, 0xA8	; 168
     2d2:	b2 07       	cpc	r27, r18
     2d4:	e1 f7       	brne	.-8      	; 0x2ce <.do_clear_bss_loop>

000002d6 <__do_global_ctors>:
     2d6:	11 e0       	ldi	r17, 0x01	; 1
     2d8:	ce e4       	ldi	r28, 0x4E	; 78
     2da:	d1 e0       	ldi	r29, 0x01	; 1
     2dc:	00 e0       	ldi	r16, 0x00	; 0
     2de:	06 c0       	rjmp	.+12     	; 0x2ec <__do_global_ctors+0x16>
     2e0:	21 97       	sbiw	r28, 0x01	; 1
     2e2:	01 09       	sbc	r16, r1
     2e4:	80 2f       	mov	r24, r16
     2e6:	fe 01       	movw	r30, r28
     2e8:	0e 94 3e 20 	call	0x407c	; 0x407c <__tablejump2__>
     2ec:	c6 34       	cpi	r28, 0x46	; 70
     2ee:	d1 07       	cpc	r29, r17
     2f0:	80 e0       	ldi	r24, 0x00	; 0
     2f2:	08 07       	cpc	r16, r24
     2f4:	a9 f7       	brne	.-22     	; 0x2e0 <__do_global_ctors+0xa>
     2f6:	0e 94 fd 12 	call	0x25fa	; 0x25fa <main>
     2fa:	0c 94 84 20 	jmp	0x4108	; 0x4108 <_exit>

000002fe <__bad_interrupt>:
     2fe:	80 ce       	rjmp	.-768    	; 0x0 <__vectors>

00000300 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:

    setMode(lastMode);
    return true;
  }
  return false;
}
     300:	08 95       	ret

00000302 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>:
     302:	0f 93       	push	r16
     304:	1f 93       	push	r17
     306:	cf 93       	push	r28
     308:	df 93       	push	r29
     30a:	8c 01       	movw	r16, r24
     30c:	eb 01       	movw	r28, r22
     30e:	88 e2       	ldi	r24, 0x28	; 40
     310:	fb 01       	movw	r30, r22
     312:	11 92       	st	Z+, r1
     314:	8a 95       	dec	r24
     316:	e9 f7       	brne	.-6      	; 0x312 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x10>
     318:	4b e0       	ldi	r20, 0x0B	; 11
     31a:	50 e0       	ldi	r21, 0x00	; 0
     31c:	68 e3       	ldi	r22, 0x38	; 56
     31e:	72 e0       	ldi	r23, 0x02	; 2
     320:	ce 01       	movw	r24, r28
     322:	0e 94 75 20 	call	0x40ea	; 0x40ea <strncpy>
     326:	1b 86       	std	Y+11, r1	; 0x0b
     328:	81 e0       	ldi	r24, 0x01	; 1
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	a0 e0       	ldi	r26, 0x00	; 0
     32e:	b0 e0       	ldi	r27, 0x00	; 0
     330:	8c 87       	std	Y+12, r24	; 0x0c
     332:	9d 87       	std	Y+13, r25	; 0x0d
     334:	ae 87       	std	Y+14, r26	; 0x0e
     336:	bf 87       	std	Y+15, r27	; 0x0f
     338:	f8 01       	movw	r30, r16
     33a:	86 81       	ldd	r24, Z+6	; 0x06
     33c:	97 81       	ldd	r25, Z+7	; 0x07
     33e:	a0 85       	ldd	r26, Z+8	; 0x08
     340:	b1 85       	ldd	r27, Z+9	; 0x09
     342:	88 8b       	std	Y+16, r24	; 0x10
     344:	99 8b       	std	Y+17, r25	; 0x11
     346:	aa 8b       	std	Y+18, r26	; 0x12
     348:	bb 8b       	std	Y+19, r27	; 0x13
     34a:	83 e0       	ldi	r24, 0x03	; 3
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	a0 e0       	ldi	r26, 0x00	; 0
     350:	b0 e0       	ldi	r27, 0x00	; 0
     352:	8c 8b       	std	Y+20, r24	; 0x14
     354:	9d 8b       	std	Y+21, r25	; 0x15
     356:	ae 8b       	std	Y+22, r26	; 0x16
     358:	bf 8b       	std	Y+23, r27	; 0x17
     35a:	1c a2       	std	Y+36, r1	; 0x24
     35c:	1d a2       	std	Y+37, r1	; 0x25
     35e:	1e a2       	std	Y+38, r1	; 0x26
     360:	1f a2       	std	Y+39, r1	; 0x27
     362:	18 8e       	std	Y+24, r1	; 0x18
     364:	19 8e       	std	Y+25, r1	; 0x19
     366:	1a 8e       	std	Y+26, r1	; 0x1a
     368:	1b 8e       	std	Y+27, r1	; 0x1b
     36a:	1c 8e       	std	Y+28, r1	; 0x1c
     36c:	1d 8e       	std	Y+29, r1	; 0x1d
     36e:	1e 8e       	std	Y+30, r1	; 0x1e
     370:	1f 8e       	std	Y+31, r1	; 0x1f
     372:	8a e0       	ldi	r24, 0x0A	; 10
     374:	97 ed       	ldi	r25, 0xD7	; 215
     376:	a3 e2       	ldi	r26, 0x23	; 35
     378:	bc e3       	ldi	r27, 0x3C	; 60
     37a:	88 a3       	std	Y+32, r24	; 0x20
     37c:	99 a3       	std	Y+33, r25	; 0x21
     37e:	aa a3       	std	Y+34, r26	; 0x22
     380:	bb a3       	std	Y+35, r27	; 0x23
     382:	df 91       	pop	r29
     384:	cf 91       	pop	r28
     386:	1f 91       	pop	r17
     388:	0f 91       	pop	r16
     38a:	08 95       	ret

0000038c <_ZN15Adafruit_BNO055C1ElhP7TwoWire>:
     38c:	0f 93       	push	r16
     38e:	1f 93       	push	r17
     390:	fc 01       	movw	r30, r24
     392:	83 e4       	ldi	r24, 0x43	; 67
     394:	92 e0       	ldi	r25, 0x02	; 2
     396:	91 83       	std	Z+1, r25	; 0x01
     398:	80 83       	st	Z, r24
     39a:	46 83       	std	Z+6, r20	; 0x06
     39c:	57 83       	std	Z+7, r21	; 0x07
     39e:	60 87       	std	Z+8, r22	; 0x08
     3a0:	71 87       	std	Z+9, r23	; 0x09
     3a2:	23 83       	std	Z+3, r18	; 0x03
     3a4:	15 83       	std	Z+5, r17	; 0x05
     3a6:	04 83       	std	Z+4, r16	; 0x04
     3a8:	1f 91       	pop	r17
     3aa:	0f 91       	pop	r16
     3ac:	08 95       	ret

000003ae <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>:
     3ae:	0f 93       	push	r16
     3b0:	1f 93       	push	r17
     3b2:	cf 93       	push	r28
     3b4:	df 93       	push	r29
     3b6:	ec 01       	movw	r28, r24
     3b8:	06 2f       	mov	r16, r22
     3ba:	14 2f       	mov	r17, r20
     3bc:	6b 81       	ldd	r22, Y+3	; 0x03
     3be:	8c 81       	ldd	r24, Y+4	; 0x04
     3c0:	9d 81       	ldd	r25, Y+5	; 0x05
     3c2:	0e 94 9e 19 	call	0x333c	; 0x333c <_ZN7TwoWire17beginTransmissionEh>
     3c6:	8c 81       	ldd	r24, Y+4	; 0x04
     3c8:	9d 81       	ldd	r25, Y+5	; 0x05
     3ca:	dc 01       	movw	r26, r24
     3cc:	ed 91       	ld	r30, X+
     3ce:	fc 91       	ld	r31, X
     3d0:	01 90       	ld	r0, Z+
     3d2:	f0 81       	ld	r31, Z
     3d4:	e0 2d       	mov	r30, r0
     3d6:	60 2f       	mov	r22, r16
     3d8:	19 95       	eicall
     3da:	8c 81       	ldd	r24, Y+4	; 0x04
     3dc:	9d 81       	ldd	r25, Y+5	; 0x05
     3de:	dc 01       	movw	r26, r24
     3e0:	ed 91       	ld	r30, X+
     3e2:	fc 91       	ld	r31, X
     3e4:	01 90       	ld	r0, Z+
     3e6:	f0 81       	ld	r31, Z
     3e8:	e0 2d       	mov	r30, r0
     3ea:	61 2f       	mov	r22, r17
     3ec:	19 95       	eicall
     3ee:	8c 81       	ldd	r24, Y+4	; 0x04
     3f0:	9d 81       	ldd	r25, Y+5	; 0x05
     3f2:	0e 94 22 1a 	call	0x3444	; 0x3444 <_ZN7TwoWire15endTransmissionEv>
     3f6:	81 e0       	ldi	r24, 0x01	; 1
     3f8:	df 91       	pop	r29
     3fa:	cf 91       	pop	r28
     3fc:	1f 91       	pop	r17
     3fe:	0f 91       	pop	r16
     400:	08 95       	ret

00000402 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>:
     402:	46 2f       	mov	r20, r22
     404:	fc 01       	movw	r30, r24
     406:	62 87       	std	Z+10, r22	; 0x0a
     408:	6d e3       	ldi	r22, 0x3D	; 61
     40a:	d1 df       	rcall	.-94     	; 0x3ae <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     40c:	ff ef       	ldi	r31, 0xFF	; 255
     40e:	26 e7       	ldi	r18, 0x76	; 118
     410:	81 e0       	ldi	r24, 0x01	; 1
     412:	f1 50       	subi	r31, 0x01	; 1
     414:	20 40       	sbci	r18, 0x00	; 0
     416:	80 40       	sbci	r24, 0x00	; 0
     418:	e1 f7       	brne	.-8      	; 0x412 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE+0x10>
     41a:	00 c0       	rjmp	.+0      	; 0x41c <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE+0x1a>
     41c:	00 00       	nop
     41e:	08 95       	ret

00000420 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>:
     420:	1f 93       	push	r17
     422:	cf 93       	push	r28
     424:	df 93       	push	r29
     426:	ec 01       	movw	r28, r24
     428:	16 2f       	mov	r17, r22
     42a:	6b 81       	ldd	r22, Y+3	; 0x03
     42c:	8c 81       	ldd	r24, Y+4	; 0x04
     42e:	9d 81       	ldd	r25, Y+5	; 0x05
     430:	0e 94 9e 19 	call	0x333c	; 0x333c <_ZN7TwoWire17beginTransmissionEh>
     434:	8c 81       	ldd	r24, Y+4	; 0x04
     436:	9d 81       	ldd	r25, Y+5	; 0x05
     438:	dc 01       	movw	r26, r24
     43a:	ed 91       	ld	r30, X+
     43c:	fc 91       	ld	r31, X
     43e:	01 90       	ld	r0, Z+
     440:	f0 81       	ld	r31, Z
     442:	e0 2d       	mov	r30, r0
     444:	61 2f       	mov	r22, r17
     446:	19 95       	eicall
     448:	8c 81       	ldd	r24, Y+4	; 0x04
     44a:	9d 81       	ldd	r25, Y+5	; 0x05
     44c:	0e 94 22 1a 	call	0x3444	; 0x3444 <_ZN7TwoWire15endTransmissionEv>
     450:	41 e0       	ldi	r20, 0x01	; 1
     452:	6b 81       	ldd	r22, Y+3	; 0x03
     454:	8c 81       	ldd	r24, Y+4	; 0x04
     456:	9d 81       	ldd	r25, Y+5	; 0x05
     458:	0e 94 1f 1a 	call	0x343e	; 0x343e <_ZN7TwoWire11requestFromEhh>
     45c:	8c 81       	ldd	r24, Y+4	; 0x04
     45e:	9d 81       	ldd	r25, Y+5	; 0x05
     460:	dc 01       	movw	r26, r24
     462:	ed 91       	ld	r30, X+
     464:	fc 91       	ld	r31, X
     466:	02 84       	ldd	r0, Z+10	; 0x0a
     468:	f3 85       	ldd	r31, Z+11	; 0x0b
     46a:	e0 2d       	mov	r30, r0
     46c:	19 95       	eicall
     46e:	df 91       	pop	r29
     470:	cf 91       	pop	r28
     472:	1f 91       	pop	r17
     474:	08 95       	ret

00000476 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>:
     476:	1f 93       	push	r17
     478:	cf 93       	push	r28
     47a:	df 93       	push	r29
     47c:	ec 01       	movw	r28, r24
     47e:	16 2f       	mov	r17, r22
     480:	8c 81       	ldd	r24, Y+4	; 0x04
     482:	9d 81       	ldd	r25, Y+5	; 0x05
     484:	0e 94 8e 19 	call	0x331c	; 0x331c <_ZN7TwoWire5beginEv>
     488:	60 e0       	ldi	r22, 0x00	; 0
     48a:	ce 01       	movw	r24, r28
     48c:	c9 df       	rcall	.-110    	; 0x420 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
     48e:	80 3a       	cpi	r24, 0xA0	; 160
     490:	79 f0       	breq	.+30     	; 0x4b0 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x3a>
     492:	2f ef       	ldi	r18, 0xFF	; 255
     494:	83 ed       	ldi	r24, 0xD3	; 211
     496:	90 e3       	ldi	r25, 0x30	; 48
     498:	21 50       	subi	r18, 0x01	; 1
     49a:	80 40       	sbci	r24, 0x00	; 0
     49c:	90 40       	sbci	r25, 0x00	; 0
     49e:	e1 f7       	brne	.-8      	; 0x498 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x22>
     4a0:	00 c0       	rjmp	.+0      	; 0x4a2 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x2c>
     4a2:	00 00       	nop
     4a4:	60 e0       	ldi	r22, 0x00	; 0
     4a6:	ce 01       	movw	r24, r28
     4a8:	bb df       	rcall	.-138    	; 0x420 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
     4aa:	80 3a       	cpi	r24, 0xA0	; 160
     4ac:	09 f0       	breq	.+2      	; 0x4b0 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x3a>
     4ae:	4b c0       	rjmp	.+150    	; 0x546 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xd0>
     4b0:	60 e0       	ldi	r22, 0x00	; 0
     4b2:	ce 01       	movw	r24, r28
     4b4:	a6 df       	rcall	.-180    	; 0x402 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
     4b6:	40 e2       	ldi	r20, 0x20	; 32
     4b8:	6f e3       	ldi	r22, 0x3F	; 63
     4ba:	ce 01       	movw	r24, r28
     4bc:	78 df       	rcall	.-272    	; 0x3ae <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     4be:	2f ef       	ldi	r18, 0xFF	; 255
     4c0:	86 e7       	ldi	r24, 0x76	; 118
     4c2:	91 e0       	ldi	r25, 0x01	; 1
     4c4:	21 50       	subi	r18, 0x01	; 1
     4c6:	80 40       	sbci	r24, 0x00	; 0
     4c8:	90 40       	sbci	r25, 0x00	; 0
     4ca:	e1 f7       	brne	.-8      	; 0x4c4 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x4e>
     4cc:	00 c0       	rjmp	.+0      	; 0x4ce <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x58>
     4ce:	00 00       	nop
     4d0:	60 e0       	ldi	r22, 0x00	; 0
     4d2:	ce 01       	movw	r24, r28
     4d4:	a5 df       	rcall	.-182    	; 0x420 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
     4d6:	80 3a       	cpi	r24, 0xA0	; 160
     4d8:	39 f0       	breq	.+14     	; 0x4e8 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x72>
     4da:	8f e3       	ldi	r24, 0x3F	; 63
     4dc:	9c e9       	ldi	r25, 0x9C	; 156
     4de:	01 97       	sbiw	r24, 0x01	; 1
     4e0:	f1 f7       	brne	.-4      	; 0x4de <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x68>
     4e2:	00 c0       	rjmp	.+0      	; 0x4e4 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x6e>
     4e4:	00 00       	nop
     4e6:	f4 cf       	rjmp	.-24     	; 0x4d0 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x5a>
     4e8:	9f ef       	ldi	r25, 0xFF	; 255
     4ea:	20 e7       	ldi	r18, 0x70	; 112
     4ec:	82 e0       	ldi	r24, 0x02	; 2
     4ee:	91 50       	subi	r25, 0x01	; 1
     4f0:	20 40       	sbci	r18, 0x00	; 0
     4f2:	80 40       	sbci	r24, 0x00	; 0
     4f4:	e1 f7       	brne	.-8      	; 0x4ee <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x78>
     4f6:	00 c0       	rjmp	.+0      	; 0x4f8 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x82>
     4f8:	00 00       	nop
     4fa:	40 e0       	ldi	r20, 0x00	; 0
     4fc:	6e e3       	ldi	r22, 0x3E	; 62
     4fe:	ce 01       	movw	r24, r28
     500:	56 df       	rcall	.-340    	; 0x3ae <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     502:	8f e3       	ldi	r24, 0x3F	; 63
     504:	9c e9       	ldi	r25, 0x9C	; 156
     506:	01 97       	sbiw	r24, 0x01	; 1
     508:	f1 f7       	brne	.-4      	; 0x506 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x90>
     50a:	00 c0       	rjmp	.+0      	; 0x50c <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x96>
     50c:	00 00       	nop
     50e:	40 e0       	ldi	r20, 0x00	; 0
     510:	67 e0       	ldi	r22, 0x07	; 7
     512:	ce 01       	movw	r24, r28
     514:	4c df       	rcall	.-360    	; 0x3ae <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     516:	40 e0       	ldi	r20, 0x00	; 0
     518:	6f e3       	ldi	r22, 0x3F	; 63
     51a:	ce 01       	movw	r24, r28
     51c:	48 df       	rcall	.-368    	; 0x3ae <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     51e:	8f e3       	ldi	r24, 0x3F	; 63
     520:	9c e9       	ldi	r25, 0x9C	; 156
     522:	01 97       	sbiw	r24, 0x01	; 1
     524:	f1 f7       	brne	.-4      	; 0x522 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xac>
     526:	00 c0       	rjmp	.+0      	; 0x528 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xb2>
     528:	00 00       	nop
     52a:	61 2f       	mov	r22, r17
     52c:	ce 01       	movw	r24, r28
     52e:	69 df       	rcall	.-302    	; 0x402 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
     530:	9f ef       	ldi	r25, 0xFF	; 255
     532:	29 ef       	ldi	r18, 0xF9	; 249
     534:	80 e0       	ldi	r24, 0x00	; 0
     536:	91 50       	subi	r25, 0x01	; 1
     538:	20 40       	sbci	r18, 0x00	; 0
     53a:	80 40       	sbci	r24, 0x00	; 0
     53c:	e1 f7       	brne	.-8      	; 0x536 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xc0>
     53e:	00 c0       	rjmp	.+0      	; 0x540 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xca>
     540:	00 00       	nop
     542:	81 e0       	ldi	r24, 0x01	; 1
     544:	01 c0       	rjmp	.+2      	; 0x548 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xd2>
     546:	80 e0       	ldi	r24, 0x00	; 0
     548:	df 91       	pop	r29
     54a:	cf 91       	pop	r28
     54c:	1f 91       	pop	r17
     54e:	08 95       	ret

00000550 <_ZN15Adafruit_BNO0557getTempEv>:
     550:	64 e3       	ldi	r22, 0x34	; 52
     552:	66 cf       	rjmp	.-308    	; 0x420 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
     554:	08 95       	ret

00000556 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>:
     556:	cf 92       	push	r12
     558:	df 92       	push	r13
     55a:	ef 92       	push	r14
     55c:	ff 92       	push	r15
     55e:	0f 93       	push	r16
     560:	1f 93       	push	r17
     562:	cf 93       	push	r28
     564:	df 93       	push	r29
     566:	7c 01       	movw	r14, r24
     568:	c6 2f       	mov	r28, r22
     56a:	6a 01       	movw	r12, r20
     56c:	12 2f       	mov	r17, r18
     56e:	dc 01       	movw	r26, r24
     570:	13 96       	adiw	r26, 0x03	; 3
     572:	6c 91       	ld	r22, X
     574:	13 97       	sbiw	r26, 0x03	; 3
     576:	14 96       	adiw	r26, 0x04	; 4
     578:	8d 91       	ld	r24, X+
     57a:	9c 91       	ld	r25, X
     57c:	15 97       	sbiw	r26, 0x05	; 5
     57e:	0e 94 9e 19 	call	0x333c	; 0x333c <_ZN7TwoWire17beginTransmissionEh>
     582:	f7 01       	movw	r30, r14
     584:	84 81       	ldd	r24, Z+4	; 0x04
     586:	95 81       	ldd	r25, Z+5	; 0x05
     588:	dc 01       	movw	r26, r24
     58a:	ed 91       	ld	r30, X+
     58c:	fc 91       	ld	r31, X
     58e:	01 90       	ld	r0, Z+
     590:	f0 81       	ld	r31, Z
     592:	e0 2d       	mov	r30, r0
     594:	6c 2f       	mov	r22, r28
     596:	19 95       	eicall
     598:	f7 01       	movw	r30, r14
     59a:	84 81       	ldd	r24, Z+4	; 0x04
     59c:	95 81       	ldd	r25, Z+5	; 0x05
     59e:	0e 94 22 1a 	call	0x3444	; 0x3444 <_ZN7TwoWire15endTransmissionEv>
     5a2:	41 2f       	mov	r20, r17
     5a4:	d7 01       	movw	r26, r14
     5a6:	13 96       	adiw	r26, 0x03	; 3
     5a8:	6c 91       	ld	r22, X
     5aa:	13 97       	sbiw	r26, 0x03	; 3
     5ac:	14 96       	adiw	r26, 0x04	; 4
     5ae:	8d 91       	ld	r24, X+
     5b0:	9c 91       	ld	r25, X
     5b2:	15 97       	sbiw	r26, 0x05	; 5
     5b4:	0e 94 1f 1a 	call	0x343e	; 0x343e <_ZN7TwoWire11requestFromEhh>
     5b8:	11 23       	and	r17, r17
     5ba:	b1 f0       	breq	.+44     	; 0x5e8 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh+0x92>
     5bc:	e6 01       	movw	r28, r12
     5be:	11 50       	subi	r17, 0x01	; 1
     5c0:	01 2f       	mov	r16, r17
     5c2:	10 e0       	ldi	r17, 0x00	; 0
     5c4:	0f 5f       	subi	r16, 0xFF	; 255
     5c6:	1f 4f       	sbci	r17, 0xFF	; 255
     5c8:	0c 0d       	add	r16, r12
     5ca:	1d 1d       	adc	r17, r13
     5cc:	f7 01       	movw	r30, r14
     5ce:	84 81       	ldd	r24, Z+4	; 0x04
     5d0:	95 81       	ldd	r25, Z+5	; 0x05
     5d2:	dc 01       	movw	r26, r24
     5d4:	ed 91       	ld	r30, X+
     5d6:	fc 91       	ld	r31, X
     5d8:	02 84       	ldd	r0, Z+10	; 0x0a
     5da:	f3 85       	ldd	r31, Z+11	; 0x0b
     5dc:	e0 2d       	mov	r30, r0
     5de:	19 95       	eicall
     5e0:	89 93       	st	Y+, r24
     5e2:	c0 17       	cp	r28, r16
     5e4:	d1 07       	cpc	r29, r17
     5e6:	91 f7       	brne	.-28     	; 0x5cc <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh+0x76>
     5e8:	81 e0       	ldi	r24, 0x01	; 1
     5ea:	df 91       	pop	r29
     5ec:	cf 91       	pop	r28
     5ee:	1f 91       	pop	r17
     5f0:	0f 91       	pop	r16
     5f2:	ff 90       	pop	r15
     5f4:	ef 90       	pop	r14
     5f6:	df 90       	pop	r13
     5f8:	cf 90       	pop	r12
     5fa:	08 95       	ret

000005fc <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>:
 *            VECTOR_EULER
 *            VECTOR_LINEARACCEL
 *            VECTOR_GRAVITY]
 *  @return  vector from specified source
 */
imu::Vector<3> Adafruit_BNO055::getVector(adafruit_vector_type_t vector_type) {
     5fc:	af 92       	push	r10
     5fe:	bf 92       	push	r11
     600:	cf 92       	push	r12
     602:	df 92       	push	r13
     604:	ff 92       	push	r15
     606:	0f 93       	push	r16
     608:	1f 93       	push	r17
     60a:	cf 93       	push	r28
     60c:	df 93       	push	r29
     60e:	00 d0       	rcall	.+0      	; 0x610 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x14>
     610:	00 d0       	rcall	.+0      	; 0x612 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x16>
     612:	cd b7       	in	r28, 0x3d	; 61
     614:	de b7       	in	r29, 0x3e	; 62
     616:	8c 01       	movw	r16, r24
     618:	cb 01       	movw	r24, r22
     61a:	f4 2e       	mov	r15, r20
	template <uint8_t N> class Vector
	{
		public:
		Vector()
		{
			memset(p_vec, 0, sizeof(double)*N);
     61c:	2c e0       	ldi	r18, 0x0C	; 12
     61e:	f8 01       	movw	r30, r16
     620:	11 92       	st	Z+, r1
     622:	2a 95       	dec	r18
     624:	e9 f7       	brne	.-6      	; 0x620 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x24>
  imu::Vector<3> xyz;
  uint8_t buffer[6];
  memset(buffer, 0, 6);
     626:	ae 01       	movw	r20, r28
     628:	4f 5f       	subi	r20, 0xFF	; 255
     62a:	5f 4f       	sbci	r21, 0xFF	; 255
     62c:	26 e0       	ldi	r18, 0x06	; 6
     62e:	fa 01       	movw	r30, r20
     630:	11 92       	st	Z+, r1
     632:	2a 95       	dec	r18
     634:	e9 f7       	brne	.-6      	; 0x630 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x34>

  int16_t x, y, z;
  x = y = z = 0;

  /* Read vector data (6 bytes) */
  readLen((adafruit_bno055_reg_t)vector_type, buffer, 6);
     636:	26 e0       	ldi	r18, 0x06	; 6
     638:	6f 2d       	mov	r22, r15
     63a:	8d df       	rcall	.-230    	; 0x556 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>

  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
     63c:	6a 81       	ldd	r22, Y+2	; 0x02
     63e:	70 e0       	ldi	r23, 0x00	; 0
     640:	76 2f       	mov	r23, r22
     642:	66 27       	eor	r22, r22
     644:	89 81       	ldd	r24, Y+1	; 0x01
     646:	68 2b       	or	r22, r24
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
     648:	8c 81       	ldd	r24, Y+4	; 0x04
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	98 2f       	mov	r25, r24
     64e:	88 27       	eor	r24, r24
     650:	2b 81       	ldd	r18, Y+3	; 0x03
     652:	6c 01       	movw	r12, r24
     654:	c2 2a       	or	r12, r18
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
     656:	8e 81       	ldd	r24, Y+6	; 0x06
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	98 2f       	mov	r25, r24
     65c:	88 27       	eor	r24, r24
     65e:	2d 81       	ldd	r18, Y+5	; 0x05
     660:	5c 01       	movw	r10, r24
     662:	a2 2a       	or	r10, r18

  /*!
   * Convert the value to an appropriate range (section 3.6.4)
   * and assign the value to the Vector type
   */
  switch (vector_type) {
     664:	f4 e1       	ldi	r31, 0x14	; 20
     666:	ff 16       	cp	r15, r31
     668:	09 f4       	brne	.+2      	; 0x66c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x70>
     66a:	4a c0       	rjmp	.+148    	; 0x700 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x104>
     66c:	ff 15       	cp	r31, r15
     66e:	40 f0       	brcs	.+16     	; 0x680 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x84>
     670:	88 e0       	ldi	r24, 0x08	; 8
     672:	f8 16       	cp	r15, r24
     674:	09 f4       	brne	.+2      	; 0x678 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x7c>
     676:	ac c0       	rjmp	.+344    	; 0x7d0 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x1d4>
     678:	ee e0       	ldi	r30, 0x0E	; 14
     67a:	fe 16       	cp	r15, r30
     67c:	69 f0       	breq	.+26     	; 0x698 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x9c>
     67e:	43 c1       	rjmp	.+646    	; 0x906 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
     680:	f8 e2       	ldi	r31, 0x28	; 40
     682:	ff 16       	cp	r15, r31
     684:	09 f4       	brne	.+2      	; 0x688 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x8c>
     686:	d8 c0       	rjmp	.+432    	; 0x838 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x23c>
     688:	8e e2       	ldi	r24, 0x2E	; 46
     68a:	f8 16       	cp	r15, r24
     68c:	09 f4       	brne	.+2      	; 0x690 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x94>
     68e:	08 c1       	rjmp	.+528    	; 0x8a0 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x2a4>
     690:	ea e1       	ldi	r30, 0x1A	; 26
     692:	fe 12       	cpse	r15, r30
     694:	38 c1       	rjmp	.+624    	; 0x906 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
     696:	68 c0       	rjmp	.+208    	; 0x768 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x16c>
  case VECTOR_MAGNETOMETER:
    /* 1uT = 16 LSB */
    xyz[0] = ((double)x) / 16.0;
     698:	07 2e       	mov	r0, r23
     69a:	00 0c       	add	r0, r0
     69c:	88 0b       	sbc	r24, r24
     69e:	99 0b       	sbc	r25, r25
     6a0:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <__floatsisf>
     6a4:	20 e0       	ldi	r18, 0x00	; 0
     6a6:	30 e0       	ldi	r19, 0x00	; 0
     6a8:	40 e8       	ldi	r20, 0x80	; 128
     6aa:	5d e3       	ldi	r21, 0x3D	; 61
     6ac:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <__mulsf3>
     6b0:	f8 01       	movw	r30, r16
     6b2:	60 83       	st	Z, r22
     6b4:	71 83       	std	Z+1, r23	; 0x01
     6b6:	82 83       	std	Z+2, r24	; 0x02
     6b8:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 16.0;
     6ba:	b6 01       	movw	r22, r12
     6bc:	dd 0c       	add	r13, r13
     6be:	88 0b       	sbc	r24, r24
     6c0:	99 0b       	sbc	r25, r25
     6c2:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <__floatsisf>
     6c6:	20 e0       	ldi	r18, 0x00	; 0
     6c8:	30 e0       	ldi	r19, 0x00	; 0
     6ca:	40 e8       	ldi	r20, 0x80	; 128
     6cc:	5d e3       	ldi	r21, 0x3D	; 61
     6ce:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <__mulsf3>
     6d2:	f8 01       	movw	r30, r16
     6d4:	64 83       	std	Z+4, r22	; 0x04
     6d6:	75 83       	std	Z+5, r23	; 0x05
     6d8:	86 83       	std	Z+6, r24	; 0x06
     6da:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 16.0;
     6dc:	b5 01       	movw	r22, r10
     6de:	bb 0c       	add	r11, r11
     6e0:	88 0b       	sbc	r24, r24
     6e2:	99 0b       	sbc	r25, r25
     6e4:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <__floatsisf>
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e8       	ldi	r20, 0x80	; 128
     6ee:	5d e3       	ldi	r21, 0x3D	; 61
     6f0:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <__mulsf3>
     6f4:	f8 01       	movw	r30, r16
     6f6:	60 87       	std	Z+8, r22	; 0x08
     6f8:	71 87       	std	Z+9, r23	; 0x09
     6fa:	82 87       	std	Z+10, r24	; 0x0a
     6fc:	93 87       	std	Z+11, r25	; 0x0b
    break;
     6fe:	03 c1       	rjmp	.+518    	; 0x906 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_GYROSCOPE:
    /* 1dps = 16 LSB */
    xyz[0] = ((double)x) / 16.0;
     700:	07 2e       	mov	r0, r23
     702:	00 0c       	add	r0, r0
     704:	88 0b       	sbc	r24, r24
     706:	99 0b       	sbc	r25, r25
     708:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <__floatsisf>
     70c:	20 e0       	ldi	r18, 0x00	; 0
     70e:	30 e0       	ldi	r19, 0x00	; 0
     710:	40 e8       	ldi	r20, 0x80	; 128
     712:	5d e3       	ldi	r21, 0x3D	; 61
     714:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <__mulsf3>
     718:	f8 01       	movw	r30, r16
     71a:	60 83       	st	Z, r22
     71c:	71 83       	std	Z+1, r23	; 0x01
     71e:	82 83       	std	Z+2, r24	; 0x02
     720:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 16.0;
     722:	b6 01       	movw	r22, r12
     724:	dd 0c       	add	r13, r13
     726:	88 0b       	sbc	r24, r24
     728:	99 0b       	sbc	r25, r25
     72a:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <__floatsisf>
     72e:	20 e0       	ldi	r18, 0x00	; 0
     730:	30 e0       	ldi	r19, 0x00	; 0
     732:	40 e8       	ldi	r20, 0x80	; 128
     734:	5d e3       	ldi	r21, 0x3D	; 61
     736:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <__mulsf3>
     73a:	f8 01       	movw	r30, r16
     73c:	64 83       	std	Z+4, r22	; 0x04
     73e:	75 83       	std	Z+5, r23	; 0x05
     740:	86 83       	std	Z+6, r24	; 0x06
     742:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 16.0;
     744:	b5 01       	movw	r22, r10
     746:	bb 0c       	add	r11, r11
     748:	88 0b       	sbc	r24, r24
     74a:	99 0b       	sbc	r25, r25
     74c:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <__floatsisf>
     750:	20 e0       	ldi	r18, 0x00	; 0
     752:	30 e0       	ldi	r19, 0x00	; 0
     754:	40 e8       	ldi	r20, 0x80	; 128
     756:	5d e3       	ldi	r21, 0x3D	; 61
     758:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <__mulsf3>
     75c:	f8 01       	movw	r30, r16
     75e:	60 87       	std	Z+8, r22	; 0x08
     760:	71 87       	std	Z+9, r23	; 0x09
     762:	82 87       	std	Z+10, r24	; 0x0a
     764:	93 87       	std	Z+11, r25	; 0x0b
    break;
     766:	cf c0       	rjmp	.+414    	; 0x906 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_EULER:
    /* 1 degree = 16 LSB */
    xyz[0] = ((double)x) / 16.0;
     768:	07 2e       	mov	r0, r23
     76a:	00 0c       	add	r0, r0
     76c:	88 0b       	sbc	r24, r24
     76e:	99 0b       	sbc	r25, r25
     770:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <__floatsisf>
     774:	20 e0       	ldi	r18, 0x00	; 0
     776:	30 e0       	ldi	r19, 0x00	; 0
     778:	40 e8       	ldi	r20, 0x80	; 128
     77a:	5d e3       	ldi	r21, 0x3D	; 61
     77c:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <__mulsf3>
     780:	f8 01       	movw	r30, r16
     782:	60 83       	st	Z, r22
     784:	71 83       	std	Z+1, r23	; 0x01
     786:	82 83       	std	Z+2, r24	; 0x02
     788:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 16.0;
     78a:	b6 01       	movw	r22, r12
     78c:	dd 0c       	add	r13, r13
     78e:	88 0b       	sbc	r24, r24
     790:	99 0b       	sbc	r25, r25
     792:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <__floatsisf>
     796:	20 e0       	ldi	r18, 0x00	; 0
     798:	30 e0       	ldi	r19, 0x00	; 0
     79a:	40 e8       	ldi	r20, 0x80	; 128
     79c:	5d e3       	ldi	r21, 0x3D	; 61
     79e:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <__mulsf3>
     7a2:	f8 01       	movw	r30, r16
     7a4:	64 83       	std	Z+4, r22	; 0x04
     7a6:	75 83       	std	Z+5, r23	; 0x05
     7a8:	86 83       	std	Z+6, r24	; 0x06
     7aa:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 16.0;
     7ac:	b5 01       	movw	r22, r10
     7ae:	bb 0c       	add	r11, r11
     7b0:	88 0b       	sbc	r24, r24
     7b2:	99 0b       	sbc	r25, r25
     7b4:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <__floatsisf>
     7b8:	20 e0       	ldi	r18, 0x00	; 0
     7ba:	30 e0       	ldi	r19, 0x00	; 0
     7bc:	40 e8       	ldi	r20, 0x80	; 128
     7be:	5d e3       	ldi	r21, 0x3D	; 61
     7c0:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <__mulsf3>
     7c4:	f8 01       	movw	r30, r16
     7c6:	60 87       	std	Z+8, r22	; 0x08
     7c8:	71 87       	std	Z+9, r23	; 0x09
     7ca:	82 87       	std	Z+10, r24	; 0x0a
     7cc:	93 87       	std	Z+11, r25	; 0x0b
    break;
     7ce:	9b c0       	rjmp	.+310    	; 0x906 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_ACCELEROMETER:
    /* 1m/s^2 = 100 LSB */
    xyz[0] = ((double)x) / 100.0;
     7d0:	07 2e       	mov	r0, r23
     7d2:	00 0c       	add	r0, r0
     7d4:	88 0b       	sbc	r24, r24
     7d6:	99 0b       	sbc	r25, r25
     7d8:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <__floatsisf>
     7dc:	20 e0       	ldi	r18, 0x00	; 0
     7de:	30 e0       	ldi	r19, 0x00	; 0
     7e0:	48 ec       	ldi	r20, 0xC8	; 200
     7e2:	52 e4       	ldi	r21, 0x42	; 66
     7e4:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <__divsf3>
     7e8:	f8 01       	movw	r30, r16
     7ea:	60 83       	st	Z, r22
     7ec:	71 83       	std	Z+1, r23	; 0x01
     7ee:	82 83       	std	Z+2, r24	; 0x02
     7f0:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 100.0;
     7f2:	b6 01       	movw	r22, r12
     7f4:	dd 0c       	add	r13, r13
     7f6:	88 0b       	sbc	r24, r24
     7f8:	99 0b       	sbc	r25, r25
     7fa:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <__floatsisf>
     7fe:	20 e0       	ldi	r18, 0x00	; 0
     800:	30 e0       	ldi	r19, 0x00	; 0
     802:	48 ec       	ldi	r20, 0xC8	; 200
     804:	52 e4       	ldi	r21, 0x42	; 66
     806:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <__divsf3>
     80a:	f8 01       	movw	r30, r16
     80c:	64 83       	std	Z+4, r22	; 0x04
     80e:	75 83       	std	Z+5, r23	; 0x05
     810:	86 83       	std	Z+6, r24	; 0x06
     812:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 100.0;
     814:	b5 01       	movw	r22, r10
     816:	bb 0c       	add	r11, r11
     818:	88 0b       	sbc	r24, r24
     81a:	99 0b       	sbc	r25, r25
     81c:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <__floatsisf>
     820:	20 e0       	ldi	r18, 0x00	; 0
     822:	30 e0       	ldi	r19, 0x00	; 0
     824:	48 ec       	ldi	r20, 0xC8	; 200
     826:	52 e4       	ldi	r21, 0x42	; 66
     828:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <__divsf3>
     82c:	f8 01       	movw	r30, r16
     82e:	60 87       	std	Z+8, r22	; 0x08
     830:	71 87       	std	Z+9, r23	; 0x09
     832:	82 87       	std	Z+10, r24	; 0x0a
     834:	93 87       	std	Z+11, r25	; 0x0b
    break;
     836:	67 c0       	rjmp	.+206    	; 0x906 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_LINEARACCEL:
    /* 1m/s^2 = 100 LSB */
    xyz[0] = ((double)x) / 100.0;
     838:	07 2e       	mov	r0, r23
     83a:	00 0c       	add	r0, r0
     83c:	88 0b       	sbc	r24, r24
     83e:	99 0b       	sbc	r25, r25
     840:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <__floatsisf>
     844:	20 e0       	ldi	r18, 0x00	; 0
     846:	30 e0       	ldi	r19, 0x00	; 0
     848:	48 ec       	ldi	r20, 0xC8	; 200
     84a:	52 e4       	ldi	r21, 0x42	; 66
     84c:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <__divsf3>
     850:	f8 01       	movw	r30, r16
     852:	60 83       	st	Z, r22
     854:	71 83       	std	Z+1, r23	; 0x01
     856:	82 83       	std	Z+2, r24	; 0x02
     858:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 100.0;
     85a:	b6 01       	movw	r22, r12
     85c:	dd 0c       	add	r13, r13
     85e:	88 0b       	sbc	r24, r24
     860:	99 0b       	sbc	r25, r25
     862:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <__floatsisf>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	48 ec       	ldi	r20, 0xC8	; 200
     86c:	52 e4       	ldi	r21, 0x42	; 66
     86e:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <__divsf3>
     872:	f8 01       	movw	r30, r16
     874:	64 83       	std	Z+4, r22	; 0x04
     876:	75 83       	std	Z+5, r23	; 0x05
     878:	86 83       	std	Z+6, r24	; 0x06
     87a:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 100.0;
     87c:	b5 01       	movw	r22, r10
     87e:	bb 0c       	add	r11, r11
     880:	88 0b       	sbc	r24, r24
     882:	99 0b       	sbc	r25, r25
     884:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <__floatsisf>
     888:	20 e0       	ldi	r18, 0x00	; 0
     88a:	30 e0       	ldi	r19, 0x00	; 0
     88c:	48 ec       	ldi	r20, 0xC8	; 200
     88e:	52 e4       	ldi	r21, 0x42	; 66
     890:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <__divsf3>
     894:	f8 01       	movw	r30, r16
     896:	60 87       	std	Z+8, r22	; 0x08
     898:	71 87       	std	Z+9, r23	; 0x09
     89a:	82 87       	std	Z+10, r24	; 0x0a
     89c:	93 87       	std	Z+11, r25	; 0x0b
    break;
     89e:	33 c0       	rjmp	.+102    	; 0x906 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_GRAVITY:
    /* 1m/s^2 = 100 LSB */
    xyz[0] = ((double)x) / 100.0;
     8a0:	07 2e       	mov	r0, r23
     8a2:	00 0c       	add	r0, r0
     8a4:	88 0b       	sbc	r24, r24
     8a6:	99 0b       	sbc	r25, r25
     8a8:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <__floatsisf>
     8ac:	20 e0       	ldi	r18, 0x00	; 0
     8ae:	30 e0       	ldi	r19, 0x00	; 0
     8b0:	48 ec       	ldi	r20, 0xC8	; 200
     8b2:	52 e4       	ldi	r21, 0x42	; 66
     8b4:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <__divsf3>
     8b8:	f8 01       	movw	r30, r16
     8ba:	60 83       	st	Z, r22
     8bc:	71 83       	std	Z+1, r23	; 0x01
     8be:	82 83       	std	Z+2, r24	; 0x02
     8c0:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 100.0;
     8c2:	b6 01       	movw	r22, r12
     8c4:	dd 0c       	add	r13, r13
     8c6:	88 0b       	sbc	r24, r24
     8c8:	99 0b       	sbc	r25, r25
     8ca:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <__floatsisf>
     8ce:	20 e0       	ldi	r18, 0x00	; 0
     8d0:	30 e0       	ldi	r19, 0x00	; 0
     8d2:	48 ec       	ldi	r20, 0xC8	; 200
     8d4:	52 e4       	ldi	r21, 0x42	; 66
     8d6:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <__divsf3>
     8da:	f8 01       	movw	r30, r16
     8dc:	64 83       	std	Z+4, r22	; 0x04
     8de:	75 83       	std	Z+5, r23	; 0x05
     8e0:	86 83       	std	Z+6, r24	; 0x06
     8e2:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 100.0;
     8e4:	b5 01       	movw	r22, r10
     8e6:	bb 0c       	add	r11, r11
     8e8:	88 0b       	sbc	r24, r24
     8ea:	99 0b       	sbc	r25, r25
     8ec:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <__floatsisf>
     8f0:	20 e0       	ldi	r18, 0x00	; 0
     8f2:	30 e0       	ldi	r19, 0x00	; 0
     8f4:	48 ec       	ldi	r20, 0xC8	; 200
     8f6:	52 e4       	ldi	r21, 0x42	; 66
     8f8:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <__divsf3>
     8fc:	f8 01       	movw	r30, r16
     8fe:	60 87       	std	Z+8, r22	; 0x08
     900:	71 87       	std	Z+9, r23	; 0x09
     902:	82 87       	std	Z+10, r24	; 0x0a
     904:	93 87       	std	Z+11, r25	; 0x0b
    break;
  }

  return xyz;
}
     906:	c8 01       	movw	r24, r16
     908:	26 96       	adiw	r28, 0x06	; 6
     90a:	0f b6       	in	r0, 0x3f	; 63
     90c:	f8 94       	cli
     90e:	de bf       	out	0x3e, r29	; 62
     910:	0f be       	out	0x3f, r0	; 63
     912:	cd bf       	out	0x3d, r28	; 61
     914:	df 91       	pop	r29
     916:	cf 91       	pop	r28
     918:	1f 91       	pop	r17
     91a:	0f 91       	pop	r16
     91c:	ff 90       	pop	r15
     91e:	df 90       	pop	r13
     920:	cf 90       	pop	r12
     922:	bf 90       	pop	r11
     924:	af 90       	pop	r10
     926:	08 95       	ret

00000928 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>:
/*!
 *  @brief  Reads the sensor and returns the data as a sensors_event_t
 *  @param  event
 *  @return always returns true
 */
bool Adafruit_BNO055::getEvent(sensors_event_t *event) {
     928:	0f 93       	push	r16
     92a:	1f 93       	push	r17
     92c:	cf 93       	push	r28
     92e:	df 93       	push	r29
     930:	cd b7       	in	r28, 0x3d	; 61
     932:	de b7       	in	r29, 0x3e	; 62
     934:	2c 97       	sbiw	r28, 0x0c	; 12
     936:	0f b6       	in	r0, 0x3f	; 63
     938:	f8 94       	cli
     93a:	de bf       	out	0x3e, r29	; 62
     93c:	0f be       	out	0x3f, r0	; 63
     93e:	cd bf       	out	0x3d, r28	; 61
     940:	8b 01       	movw	r16, r22
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
     942:	20 e2       	ldi	r18, 0x20	; 32
     944:	fb 01       	movw	r30, r22
     946:	11 92       	st	Z+, r1
     948:	2a 95       	dec	r18
     94a:	e9 f7       	brne	.-6      	; 0x946 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t+0x1e>

  event->version = sizeof(sensors_event_t);
     94c:	40 e2       	ldi	r20, 0x20	; 32
     94e:	50 e0       	ldi	r21, 0x00	; 0
     950:	60 e0       	ldi	r22, 0x00	; 0
     952:	70 e0       	ldi	r23, 0x00	; 0
     954:	f8 01       	movw	r30, r16
     956:	40 83       	st	Z, r20
     958:	51 83       	std	Z+1, r21	; 0x01
     95a:	62 83       	std	Z+2, r22	; 0x02
     95c:	73 83       	std	Z+3, r23	; 0x03
  event->sensor_id = _sensorID;
     95e:	fc 01       	movw	r30, r24
     960:	46 81       	ldd	r20, Z+6	; 0x06
     962:	57 81       	ldd	r21, Z+7	; 0x07
     964:	60 85       	ldd	r22, Z+8	; 0x08
     966:	71 85       	ldd	r23, Z+9	; 0x09
     968:	f8 01       	movw	r30, r16
     96a:	44 83       	std	Z+4, r20	; 0x04
     96c:	55 83       	std	Z+5, r21	; 0x05
     96e:	66 83       	std	Z+6, r22	; 0x06
     970:	77 83       	std	Z+7, r23	; 0x07
  event->type = SENSOR_TYPE_ORIENTATION;
     972:	43 e0       	ldi	r20, 0x03	; 3
     974:	50 e0       	ldi	r21, 0x00	; 0
     976:	60 e0       	ldi	r22, 0x00	; 0
     978:	70 e0       	ldi	r23, 0x00	; 0
     97a:	40 87       	std	Z+8, r20	; 0x08
     97c:	51 87       	std	Z+9, r21	; 0x09
     97e:	62 87       	std	Z+10, r22	; 0x0a
     980:	73 87       	std	Z+11, r23	; 0x0b
  //event->timestamp = millis();

  /* Get a Euler angle sample for orientation */
  imu::Vector<3> euler = getVector(Adafruit_BNO055::VECTOR_EULER);
     982:	4a e1       	ldi	r20, 0x1A	; 26
     984:	bc 01       	movw	r22, r24
     986:	ce 01       	movw	r24, r28
     988:	01 96       	adiw	r24, 0x01	; 1
     98a:	38 de       	rcall	.-912    	; 0x5fc <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
  event->orientation.x = euler.x();
     98c:	89 81       	ldd	r24, Y+1	; 0x01
     98e:	9a 81       	ldd	r25, Y+2	; 0x02
     990:	ab 81       	ldd	r26, Y+3	; 0x03
     992:	bc 81       	ldd	r27, Y+4	; 0x04
     994:	f8 01       	movw	r30, r16
     996:	80 8b       	std	Z+16, r24	; 0x10
     998:	91 8b       	std	Z+17, r25	; 0x11
     99a:	a2 8b       	std	Z+18, r26	; 0x12
     99c:	b3 8b       	std	Z+19, r27	; 0x13
  event->orientation.y = euler.y();
     99e:	8d 81       	ldd	r24, Y+5	; 0x05
     9a0:	9e 81       	ldd	r25, Y+6	; 0x06
     9a2:	af 81       	ldd	r26, Y+7	; 0x07
     9a4:	b8 85       	ldd	r27, Y+8	; 0x08
     9a6:	84 8b       	std	Z+20, r24	; 0x14
     9a8:	95 8b       	std	Z+21, r25	; 0x15
     9aa:	a6 8b       	std	Z+22, r26	; 0x16
     9ac:	b7 8b       	std	Z+23, r27	; 0x17
  event->orientation.z = euler.z();
     9ae:	89 85       	ldd	r24, Y+9	; 0x09
     9b0:	9a 85       	ldd	r25, Y+10	; 0x0a
     9b2:	ab 85       	ldd	r26, Y+11	; 0x0b
     9b4:	bc 85       	ldd	r27, Y+12	; 0x0c
     9b6:	80 8f       	std	Z+24, r24	; 0x18
     9b8:	91 8f       	std	Z+25, r25	; 0x19
     9ba:	a2 8f       	std	Z+26, r26	; 0x1a
     9bc:	b3 8f       	std	Z+27, r27	; 0x1b

  return true;
}
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	2c 96       	adiw	r28, 0x0c	; 12
     9c2:	0f b6       	in	r0, 0x3f	; 63
     9c4:	f8 94       	cli
     9c6:	de bf       	out	0x3e, r29	; 62
     9c8:	0f be       	out	0x3f, r0	; 63
     9ca:	cd bf       	out	0x3d, r28	; 61
     9cc:	df 91       	pop	r29
     9ce:	cf 91       	pop	r28
     9d0:	1f 91       	pop	r17
     9d2:	0f 91       	pop	r16
     9d4:	08 95       	ret

000009d6 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_tNS_22adafruit_vector_type_tE>:
 *  @param  vec_type
 *          specify the type of reading
 *  @return always returns true
 */
bool Adafruit_BNO055::getEvent(sensors_event_t *event, adafruit_vector_type_t vec_type)
{
     9d6:	cf 92       	push	r12
     9d8:	df 92       	push	r13
     9da:	ef 92       	push	r14
     9dc:	ff 92       	push	r15
     9de:	0f 93       	push	r16
     9e0:	1f 93       	push	r17
     9e2:	cf 93       	push	r28
     9e4:	df 93       	push	r29
     9e6:	cd b7       	in	r28, 0x3d	; 61
     9e8:	de b7       	in	r29, 0x3e	; 62
     9ea:	c4 55       	subi	r28, 0x54	; 84
     9ec:	d1 09       	sbc	r29, r1
     9ee:	0f b6       	in	r0, 0x3f	; 63
     9f0:	f8 94       	cli
     9f2:	de bf       	out	0x3e, r29	; 62
     9f4:	0f be       	out	0x3f, r0	; 63
     9f6:	cd bf       	out	0x3d, r28	; 61
     9f8:	8b 01       	movw	r16, r22
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
     9fa:	20 e2       	ldi	r18, 0x20	; 32
     9fc:	db 01       	movw	r26, r22
     9fe:	1d 92       	st	X+, r1
     a00:	2a 95       	dec	r18
     a02:	e9 f7       	brne	.-6      	; 0x9fe <_ZN15Adafruit_BNO0558getEventEP15sensors_event_tNS_22adafruit_vector_type_tE+0x28>

  event->version = sizeof(sensors_event_t);
     a04:	c1 2c       	mov	r12, r1
     a06:	d1 2c       	mov	r13, r1
     a08:	76 01       	movw	r14, r12
     a0a:	68 94       	set
     a0c:	c5 f8       	bld	r12, 5
     a0e:	fb 01       	movw	r30, r22
     a10:	c0 82       	st	Z, r12
     a12:	d1 82       	std	Z+1, r13	; 0x01
     a14:	e2 82       	std	Z+2, r14	; 0x02
     a16:	f3 82       	std	Z+3, r15	; 0x03
  event->sensor_id = _sensorID;
     a18:	dc 01       	movw	r26, r24
     a1a:	16 96       	adiw	r26, 0x06	; 6
     a1c:	cd 90       	ld	r12, X+
     a1e:	dd 90       	ld	r13, X+
     a20:	ed 90       	ld	r14, X+
     a22:	fc 90       	ld	r15, X
     a24:	19 97       	sbiw	r26, 0x09	; 9
     a26:	c4 82       	std	Z+4, r12	; 0x04
     a28:	d5 82       	std	Z+5, r13	; 0x05
     a2a:	e6 82       	std	Z+6, r14	; 0x06
     a2c:	f7 82       	std	Z+7, r15	; 0x07
     a2e:	fe 01       	movw	r30, r28
     a30:	e7 5b       	subi	r30, 0xB7	; 183
     a32:	ff 4f       	sbci	r31, 0xFF	; 255
     a34:	2c e0       	ldi	r18, 0x0C	; 12
     a36:	df 01       	movw	r26, r30
     a38:	1d 92       	st	X+, r1
     a3a:	2a 95       	dec	r18
     a3c:	e9 f7       	brne	.-6      	; 0xa38 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_tNS_22adafruit_vector_type_tE+0x62>
  //event->timestamp = millis();

  //read the data according to vec_type
  imu::Vector<3> vec;
  if (vec_type == Adafruit_BNO055::VECTOR_LINEARACCEL)
     a3e:	48 32       	cpi	r20, 0x28	; 40
     a40:	09 f0       	breq	.+2      	; 0xa44 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_tNS_22adafruit_vector_type_tE+0x6e>
     a42:	40 c0       	rjmp	.+128    	; 0xac4 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_tNS_22adafruit_vector_type_tE+0xee>
  {
    event->type = SENSOR_TYPE_LINEAR_ACCELERATION;
     a44:	4a e0       	ldi	r20, 0x0A	; 10
     a46:	50 e0       	ldi	r21, 0x00	; 0
     a48:	60 e0       	ldi	r22, 0x00	; 0
     a4a:	70 e0       	ldi	r23, 0x00	; 0
     a4c:	f8 01       	movw	r30, r16
     a4e:	40 87       	std	Z+8, r20	; 0x08
     a50:	51 87       	std	Z+9, r21	; 0x09
     a52:	62 87       	std	Z+10, r22	; 0x0a
     a54:	73 87       	std	Z+11, r23	; 0x0b
    vec = getVector(Adafruit_BNO055::VECTOR_LINEARACCEL);
     a56:	48 e2       	ldi	r20, 0x28	; 40
     a58:	bc 01       	movw	r22, r24
     a5a:	ce 01       	movw	r24, r28
     a5c:	cd 96       	adiw	r24, 0x3d	; 61
     a5e:	ce dd       	rcall	.-1124   	; 0x5fc <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
     a60:	fe 01       	movw	r30, r28
     a62:	fd 96       	adiw	r30, 0x3d	; 61
     a64:	de 01       	movw	r26, r28
     a66:	a7 5b       	subi	r26, 0xB7	; 183
     a68:	bf 4f       	sbci	r27, 0xFF	; 255
     a6a:	cf 01       	movw	r24, r30
     a6c:	0c 96       	adiw	r24, 0x0c	; 12
		}

		Vector& operator=(const Vector& v)
		{
			for (int x = 0; x < N; x++ )
			p_vec[x] = v.p_vec[x];
     a6e:	41 91       	ld	r20, Z+
     a70:	51 91       	ld	r21, Z+
     a72:	61 91       	ld	r22, Z+
     a74:	71 91       	ld	r23, Z+
     a76:	4d 93       	st	X+, r20
     a78:	5d 93       	st	X+, r21
     a7a:	6d 93       	st	X+, r22
     a7c:	7d 93       	st	X+, r23
			return ret;
		}

		Vector& operator=(const Vector& v)
		{
			for (int x = 0; x < N; x++ )
     a7e:	8e 17       	cp	r24, r30
     a80:	9f 07       	cpc	r25, r31
     a82:	a9 f7       	brne	.-22     	; 0xa6e <_ZN15Adafruit_BNO0558getEventEP15sensors_event_tNS_22adafruit_vector_type_tE+0x98>

    event->acceleration.x = vec.x();
     a84:	2d 96       	adiw	r28, 0x0d	; 13
     a86:	8c ad       	ldd	r24, Y+60	; 0x3c
     a88:	9d ad       	ldd	r25, Y+61	; 0x3d
     a8a:	ae ad       	ldd	r26, Y+62	; 0x3e
     a8c:	bf ad       	ldd	r27, Y+63	; 0x3f
     a8e:	2d 97       	sbiw	r28, 0x0d	; 13
     a90:	f8 01       	movw	r30, r16
     a92:	80 8b       	std	Z+16, r24	; 0x10
     a94:	91 8b       	std	Z+17, r25	; 0x11
     a96:	a2 8b       	std	Z+18, r26	; 0x12
     a98:	b3 8b       	std	Z+19, r27	; 0x13
    event->acceleration.y = vec.y();
     a9a:	61 96       	adiw	r28, 0x11	; 17
     a9c:	8c ad       	ldd	r24, Y+60	; 0x3c
     a9e:	9d ad       	ldd	r25, Y+61	; 0x3d
     aa0:	ae ad       	ldd	r26, Y+62	; 0x3e
     aa2:	bf ad       	ldd	r27, Y+63	; 0x3f
     aa4:	61 97       	sbiw	r28, 0x11	; 17
     aa6:	84 8b       	std	Z+20, r24	; 0x14
     aa8:	95 8b       	std	Z+21, r25	; 0x15
     aaa:	a6 8b       	std	Z+22, r26	; 0x16
     aac:	b7 8b       	std	Z+23, r27	; 0x17
    event->acceleration.z = vec.z();
     aae:	65 96       	adiw	r28, 0x15	; 21
     ab0:	8c ad       	ldd	r24, Y+60	; 0x3c
     ab2:	9d ad       	ldd	r25, Y+61	; 0x3d
     ab4:	ae ad       	ldd	r26, Y+62	; 0x3e
     ab6:	bf ad       	ldd	r27, Y+63	; 0x3f
     ab8:	65 97       	sbiw	r28, 0x15	; 21
     aba:	80 8f       	std	Z+24, r24	; 0x18
     abc:	91 8f       	std	Z+25, r25	; 0x19
     abe:	a2 8f       	std	Z+26, r26	; 0x1a
     ac0:	b3 8f       	std	Z+27, r27	; 0x1b
     ac2:	58 c1       	rjmp	.+688    	; 0xd74 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_tNS_22adafruit_vector_type_tE+0x39e>
  }
  else if (vec_type == Adafruit_BNO055::VECTOR_ACCELEROMETER)
     ac4:	48 30       	cpi	r20, 0x08	; 8
     ac6:	09 f0       	breq	.+2      	; 0xaca <_ZN15Adafruit_BNO0558getEventEP15sensors_event_tNS_22adafruit_vector_type_tE+0xf4>
     ac8:	42 c0       	rjmp	.+132    	; 0xb4e <_ZN15Adafruit_BNO0558getEventEP15sensors_event_tNS_22adafruit_vector_type_tE+0x178>
  {
    event->type = SENSOR_TYPE_ACCELEROMETER;
     aca:	41 e0       	ldi	r20, 0x01	; 1
     acc:	50 e0       	ldi	r21, 0x00	; 0
     ace:	60 e0       	ldi	r22, 0x00	; 0
     ad0:	70 e0       	ldi	r23, 0x00	; 0
     ad2:	d8 01       	movw	r26, r16
     ad4:	18 96       	adiw	r26, 0x08	; 8
     ad6:	4d 93       	st	X+, r20
     ad8:	5d 93       	st	X+, r21
     ada:	6d 93       	st	X+, r22
     adc:	7c 93       	st	X, r23
     ade:	1b 97       	sbiw	r26, 0x0b	; 11
    vec = getVector(Adafruit_BNO055::VECTOR_ACCELEROMETER);
     ae0:	48 e0       	ldi	r20, 0x08	; 8
     ae2:	bc 01       	movw	r22, r24
     ae4:	ce 01       	movw	r24, r28
     ae6:	c1 96       	adiw	r24, 0x31	; 49
     ae8:	89 dd       	rcall	.-1262   	; 0x5fc <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
     aea:	fe 01       	movw	r30, r28
     aec:	f1 96       	adiw	r30, 0x31	; 49
     aee:	de 01       	movw	r26, r28
     af0:	a7 5b       	subi	r26, 0xB7	; 183
     af2:	bf 4f       	sbci	r27, 0xFF	; 255
     af4:	ce 01       	movw	r24, r28
     af6:	cd 96       	adiw	r24, 0x3d	; 61
			p_vec[x] = v.p_vec[x];
     af8:	41 91       	ld	r20, Z+
     afa:	51 91       	ld	r21, Z+
     afc:	61 91       	ld	r22, Z+
     afe:	71 91       	ld	r23, Z+
     b00:	4d 93       	st	X+, r20
     b02:	5d 93       	st	X+, r21
     b04:	6d 93       	st	X+, r22
     b06:	7d 93       	st	X+, r23
			return ret;
		}

		Vector& operator=(const Vector& v)
		{
			for (int x = 0; x < N; x++ )
     b08:	e8 17       	cp	r30, r24
     b0a:	f9 07       	cpc	r31, r25
     b0c:	a9 f7       	brne	.-22     	; 0xaf8 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_tNS_22adafruit_vector_type_tE+0x122>

    event->acceleration.x = vec.x();
     b0e:	2d 96       	adiw	r28, 0x0d	; 13
     b10:	8c ad       	ldd	r24, Y+60	; 0x3c
     b12:	9d ad       	ldd	r25, Y+61	; 0x3d
     b14:	ae ad       	ldd	r26, Y+62	; 0x3e
     b16:	bf ad       	ldd	r27, Y+63	; 0x3f
     b18:	2d 97       	sbiw	r28, 0x0d	; 13
     b1a:	f8 01       	movw	r30, r16
     b1c:	80 8b       	std	Z+16, r24	; 0x10
     b1e:	91 8b       	std	Z+17, r25	; 0x11
     b20:	a2 8b       	std	Z+18, r26	; 0x12
     b22:	b3 8b       	std	Z+19, r27	; 0x13
    event->acceleration.y = vec.y();
     b24:	61 96       	adiw	r28, 0x11	; 17
     b26:	8c ad       	ldd	r24, Y+60	; 0x3c
     b28:	9d ad       	ldd	r25, Y+61	; 0x3d
     b2a:	ae ad       	ldd	r26, Y+62	; 0x3e
     b2c:	bf ad       	ldd	r27, Y+63	; 0x3f
     b2e:	61 97       	sbiw	r28, 0x11	; 17
     b30:	84 8b       	std	Z+20, r24	; 0x14
     b32:	95 8b       	std	Z+21, r25	; 0x15
     b34:	a6 8b       	std	Z+22, r26	; 0x16
     b36:	b7 8b       	std	Z+23, r27	; 0x17
    event->acceleration.z = vec.z();
     b38:	65 96       	adiw	r28, 0x15	; 21
     b3a:	8c ad       	ldd	r24, Y+60	; 0x3c
     b3c:	9d ad       	ldd	r25, Y+61	; 0x3d
     b3e:	ae ad       	ldd	r26, Y+62	; 0x3e
     b40:	bf ad       	ldd	r27, Y+63	; 0x3f
     b42:	65 97       	sbiw	r28, 0x15	; 21
     b44:	80 8f       	std	Z+24, r24	; 0x18
     b46:	91 8f       	std	Z+25, r25	; 0x19
     b48:	a2 8f       	std	Z+26, r26	; 0x1a
     b4a:	b3 8f       	std	Z+27, r27	; 0x1b
     b4c:	13 c1       	rjmp	.+550    	; 0xd74 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_tNS_22adafruit_vector_type_tE+0x39e>
  }
  else if (vec_type == Adafruit_BNO055::VECTOR_GRAVITY)
     b4e:	4e 32       	cpi	r20, 0x2E	; 46
     b50:	09 f0       	breq	.+2      	; 0xb54 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_tNS_22adafruit_vector_type_tE+0x17e>
     b52:	42 c0       	rjmp	.+132    	; 0xbd8 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_tNS_22adafruit_vector_type_tE+0x202>
  {
    event->type = SENSOR_TYPE_ACCELEROMETER;
     b54:	41 e0       	ldi	r20, 0x01	; 1
     b56:	50 e0       	ldi	r21, 0x00	; 0
     b58:	60 e0       	ldi	r22, 0x00	; 0
     b5a:	70 e0       	ldi	r23, 0x00	; 0
     b5c:	d8 01       	movw	r26, r16
     b5e:	18 96       	adiw	r26, 0x08	; 8
     b60:	4d 93       	st	X+, r20
     b62:	5d 93       	st	X+, r21
     b64:	6d 93       	st	X+, r22
     b66:	7c 93       	st	X, r23
     b68:	1b 97       	sbiw	r26, 0x0b	; 11
    vec = getVector(Adafruit_BNO055::VECTOR_GRAVITY);
     b6a:	4e e2       	ldi	r20, 0x2E	; 46
     b6c:	bc 01       	movw	r22, r24
     b6e:	ce 01       	movw	r24, r28
     b70:	85 96       	adiw	r24, 0x25	; 37
     b72:	44 dd       	rcall	.-1400   	; 0x5fc <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
     b74:	fe 01       	movw	r30, r28
     b76:	b5 96       	adiw	r30, 0x25	; 37
     b78:	de 01       	movw	r26, r28
     b7a:	a7 5b       	subi	r26, 0xB7	; 183
     b7c:	bf 4f       	sbci	r27, 0xFF	; 255
     b7e:	ce 01       	movw	r24, r28
     b80:	c1 96       	adiw	r24, 0x31	; 49
			p_vec[x] = v.p_vec[x];
     b82:	41 91       	ld	r20, Z+
     b84:	51 91       	ld	r21, Z+
     b86:	61 91       	ld	r22, Z+
     b88:	71 91       	ld	r23, Z+
     b8a:	4d 93       	st	X+, r20
     b8c:	5d 93       	st	X+, r21
     b8e:	6d 93       	st	X+, r22
     b90:	7d 93       	st	X+, r23
			return ret;
		}

		Vector& operator=(const Vector& v)
		{
			for (int x = 0; x < N; x++ )
     b92:	8e 17       	cp	r24, r30
     b94:	9f 07       	cpc	r25, r31
     b96:	a9 f7       	brne	.-22     	; 0xb82 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_tNS_22adafruit_vector_type_tE+0x1ac>

    event->acceleration.x = vec.x();
     b98:	2d 96       	adiw	r28, 0x0d	; 13
     b9a:	8c ad       	ldd	r24, Y+60	; 0x3c
     b9c:	9d ad       	ldd	r25, Y+61	; 0x3d
     b9e:	ae ad       	ldd	r26, Y+62	; 0x3e
     ba0:	bf ad       	ldd	r27, Y+63	; 0x3f
     ba2:	2d 97       	sbiw	r28, 0x0d	; 13
     ba4:	f8 01       	movw	r30, r16
     ba6:	80 8b       	std	Z+16, r24	; 0x10
     ba8:	91 8b       	std	Z+17, r25	; 0x11
     baa:	a2 8b       	std	Z+18, r26	; 0x12
     bac:	b3 8b       	std	Z+19, r27	; 0x13
    event->acceleration.y = vec.y();
     bae:	61 96       	adiw	r28, 0x11	; 17
     bb0:	8c ad       	ldd	r24, Y+60	; 0x3c
     bb2:	9d ad       	ldd	r25, Y+61	; 0x3d
     bb4:	ae ad       	ldd	r26, Y+62	; 0x3e
     bb6:	bf ad       	ldd	r27, Y+63	; 0x3f
     bb8:	61 97       	sbiw	r28, 0x11	; 17
     bba:	84 8b       	std	Z+20, r24	; 0x14
     bbc:	95 8b       	std	Z+21, r25	; 0x15
     bbe:	a6 8b       	std	Z+22, r26	; 0x16
     bc0:	b7 8b       	std	Z+23, r27	; 0x17
    event->acceleration.z = vec.z();
     bc2:	65 96       	adiw	r28, 0x15	; 21
     bc4:	8c ad       	ldd	r24, Y+60	; 0x3c
     bc6:	9d ad       	ldd	r25, Y+61	; 0x3d
     bc8:	ae ad       	ldd	r26, Y+62	; 0x3e
     bca:	bf ad       	ldd	r27, Y+63	; 0x3f
     bcc:	65 97       	sbiw	r28, 0x15	; 21
     bce:	80 8f       	std	Z+24, r24	; 0x18
     bd0:	91 8f       	std	Z+25, r25	; 0x19
     bd2:	a2 8f       	std	Z+26, r26	; 0x1a
     bd4:	b3 8f       	std	Z+27, r27	; 0x1b
     bd6:	ce c0       	rjmp	.+412    	; 0xd74 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_tNS_22adafruit_vector_type_tE+0x39e>
  }
  else if (vec_type == Adafruit_BNO055::VECTOR_EULER)
     bd8:	4a 31       	cpi	r20, 0x1A	; 26
     bda:	09 f0       	breq	.+2      	; 0xbde <_ZN15Adafruit_BNO0558getEventEP15sensors_event_tNS_22adafruit_vector_type_tE+0x208>
     bdc:	42 c0       	rjmp	.+132    	; 0xc62 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_tNS_22adafruit_vector_type_tE+0x28c>
  {
    event->type = SENSOR_TYPE_ORIENTATION;
     bde:	43 e0       	ldi	r20, 0x03	; 3
     be0:	50 e0       	ldi	r21, 0x00	; 0
     be2:	60 e0       	ldi	r22, 0x00	; 0
     be4:	70 e0       	ldi	r23, 0x00	; 0
     be6:	d8 01       	movw	r26, r16
     be8:	18 96       	adiw	r26, 0x08	; 8
     bea:	4d 93       	st	X+, r20
     bec:	5d 93       	st	X+, r21
     bee:	6d 93       	st	X+, r22
     bf0:	7c 93       	st	X, r23
     bf2:	1b 97       	sbiw	r26, 0x0b	; 11
    vec = getVector(Adafruit_BNO055::VECTOR_EULER);
     bf4:	4a e1       	ldi	r20, 0x1A	; 26
     bf6:	bc 01       	movw	r22, r24
     bf8:	ce 01       	movw	r24, r28
     bfa:	49 96       	adiw	r24, 0x19	; 25
     bfc:	ff dc       	rcall	.-1538   	; 0x5fc <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
     bfe:	fe 01       	movw	r30, r28
     c00:	79 96       	adiw	r30, 0x19	; 25
     c02:	de 01       	movw	r26, r28
     c04:	a7 5b       	subi	r26, 0xB7	; 183
     c06:	bf 4f       	sbci	r27, 0xFF	; 255
     c08:	ce 01       	movw	r24, r28
     c0a:	85 96       	adiw	r24, 0x25	; 37
			p_vec[x] = v.p_vec[x];
     c0c:	41 91       	ld	r20, Z+
     c0e:	51 91       	ld	r21, Z+
     c10:	61 91       	ld	r22, Z+
     c12:	71 91       	ld	r23, Z+
     c14:	4d 93       	st	X+, r20
     c16:	5d 93       	st	X+, r21
     c18:	6d 93       	st	X+, r22
     c1a:	7d 93       	st	X+, r23
			return ret;
		}

		Vector& operator=(const Vector& v)
		{
			for (int x = 0; x < N; x++ )
     c1c:	e8 17       	cp	r30, r24
     c1e:	f9 07       	cpc	r31, r25
     c20:	a9 f7       	brne	.-22     	; 0xc0c <_ZN15Adafruit_BNO0558getEventEP15sensors_event_tNS_22adafruit_vector_type_tE+0x236>

    event->orientation.x = vec.x();
     c22:	2d 96       	adiw	r28, 0x0d	; 13
     c24:	8c ad       	ldd	r24, Y+60	; 0x3c
     c26:	9d ad       	ldd	r25, Y+61	; 0x3d
     c28:	ae ad       	ldd	r26, Y+62	; 0x3e
     c2a:	bf ad       	ldd	r27, Y+63	; 0x3f
     c2c:	2d 97       	sbiw	r28, 0x0d	; 13
     c2e:	f8 01       	movw	r30, r16
     c30:	80 8b       	std	Z+16, r24	; 0x10
     c32:	91 8b       	std	Z+17, r25	; 0x11
     c34:	a2 8b       	std	Z+18, r26	; 0x12
     c36:	b3 8b       	std	Z+19, r27	; 0x13
    event->orientation.y = vec.y();
     c38:	61 96       	adiw	r28, 0x11	; 17
     c3a:	8c ad       	ldd	r24, Y+60	; 0x3c
     c3c:	9d ad       	ldd	r25, Y+61	; 0x3d
     c3e:	ae ad       	ldd	r26, Y+62	; 0x3e
     c40:	bf ad       	ldd	r27, Y+63	; 0x3f
     c42:	61 97       	sbiw	r28, 0x11	; 17
     c44:	84 8b       	std	Z+20, r24	; 0x14
     c46:	95 8b       	std	Z+21, r25	; 0x15
     c48:	a6 8b       	std	Z+22, r26	; 0x16
     c4a:	b7 8b       	std	Z+23, r27	; 0x17
    event->orientation.z = vec.z();
     c4c:	65 96       	adiw	r28, 0x15	; 21
     c4e:	8c ad       	ldd	r24, Y+60	; 0x3c
     c50:	9d ad       	ldd	r25, Y+61	; 0x3d
     c52:	ae ad       	ldd	r26, Y+62	; 0x3e
     c54:	bf ad       	ldd	r27, Y+63	; 0x3f
     c56:	65 97       	sbiw	r28, 0x15	; 21
     c58:	80 8f       	std	Z+24, r24	; 0x18
     c5a:	91 8f       	std	Z+25, r25	; 0x19
     c5c:	a2 8f       	std	Z+26, r26	; 0x1a
     c5e:	b3 8f       	std	Z+27, r27	; 0x1b
     c60:	89 c0       	rjmp	.+274    	; 0xd74 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_tNS_22adafruit_vector_type_tE+0x39e>
  }
  else if (vec_type == Adafruit_BNO055::VECTOR_GYROSCOPE)
     c62:	44 31       	cpi	r20, 0x14	; 20
     c64:	09 f0       	breq	.+2      	; 0xc68 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_tNS_22adafruit_vector_type_tE+0x292>
     c66:	42 c0       	rjmp	.+132    	; 0xcec <_ZN15Adafruit_BNO0558getEventEP15sensors_event_tNS_22adafruit_vector_type_tE+0x316>
  {
    event->type = SENSOR_TYPE_ROTATION_VECTOR;
     c68:	4b e0       	ldi	r20, 0x0B	; 11
     c6a:	50 e0       	ldi	r21, 0x00	; 0
     c6c:	60 e0       	ldi	r22, 0x00	; 0
     c6e:	70 e0       	ldi	r23, 0x00	; 0
     c70:	d8 01       	movw	r26, r16
     c72:	18 96       	adiw	r26, 0x08	; 8
     c74:	4d 93       	st	X+, r20
     c76:	5d 93       	st	X+, r21
     c78:	6d 93       	st	X+, r22
     c7a:	7c 93       	st	X, r23
     c7c:	1b 97       	sbiw	r26, 0x0b	; 11
    vec = getVector(Adafruit_BNO055::VECTOR_GYROSCOPE);
     c7e:	44 e1       	ldi	r20, 0x14	; 20
     c80:	bc 01       	movw	r22, r24
     c82:	ce 01       	movw	r24, r28
     c84:	0d 96       	adiw	r24, 0x0d	; 13
     c86:	ba dc       	rcall	.-1676   	; 0x5fc <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
     c88:	fe 01       	movw	r30, r28
     c8a:	3d 96       	adiw	r30, 0x0d	; 13
     c8c:	de 01       	movw	r26, r28
     c8e:	a7 5b       	subi	r26, 0xB7	; 183
     c90:	bf 4f       	sbci	r27, 0xFF	; 255
     c92:	ce 01       	movw	r24, r28
     c94:	49 96       	adiw	r24, 0x19	; 25
			p_vec[x] = v.p_vec[x];
     c96:	41 91       	ld	r20, Z+
     c98:	51 91       	ld	r21, Z+
     c9a:	61 91       	ld	r22, Z+
     c9c:	71 91       	ld	r23, Z+
     c9e:	4d 93       	st	X+, r20
     ca0:	5d 93       	st	X+, r21
     ca2:	6d 93       	st	X+, r22
     ca4:	7d 93       	st	X+, r23
			return ret;
		}

		Vector& operator=(const Vector& v)
		{
			for (int x = 0; x < N; x++ )
     ca6:	e8 17       	cp	r30, r24
     ca8:	f9 07       	cpc	r31, r25
     caa:	a9 f7       	brne	.-22     	; 0xc96 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_tNS_22adafruit_vector_type_tE+0x2c0>

    event->gyro.x = vec.x();
     cac:	2d 96       	adiw	r28, 0x0d	; 13
     cae:	8c ad       	ldd	r24, Y+60	; 0x3c
     cb0:	9d ad       	ldd	r25, Y+61	; 0x3d
     cb2:	ae ad       	ldd	r26, Y+62	; 0x3e
     cb4:	bf ad       	ldd	r27, Y+63	; 0x3f
     cb6:	2d 97       	sbiw	r28, 0x0d	; 13
     cb8:	f8 01       	movw	r30, r16
     cba:	80 8b       	std	Z+16, r24	; 0x10
     cbc:	91 8b       	std	Z+17, r25	; 0x11
     cbe:	a2 8b       	std	Z+18, r26	; 0x12
     cc0:	b3 8b       	std	Z+19, r27	; 0x13
    event->gyro.y = vec.y();
     cc2:	61 96       	adiw	r28, 0x11	; 17
     cc4:	8c ad       	ldd	r24, Y+60	; 0x3c
     cc6:	9d ad       	ldd	r25, Y+61	; 0x3d
     cc8:	ae ad       	ldd	r26, Y+62	; 0x3e
     cca:	bf ad       	ldd	r27, Y+63	; 0x3f
     ccc:	61 97       	sbiw	r28, 0x11	; 17
     cce:	84 8b       	std	Z+20, r24	; 0x14
     cd0:	95 8b       	std	Z+21, r25	; 0x15
     cd2:	a6 8b       	std	Z+22, r26	; 0x16
     cd4:	b7 8b       	std	Z+23, r27	; 0x17
    event->gyro.z = vec.z();
     cd6:	65 96       	adiw	r28, 0x15	; 21
     cd8:	8c ad       	ldd	r24, Y+60	; 0x3c
     cda:	9d ad       	ldd	r25, Y+61	; 0x3d
     cdc:	ae ad       	ldd	r26, Y+62	; 0x3e
     cde:	bf ad       	ldd	r27, Y+63	; 0x3f
     ce0:	65 97       	sbiw	r28, 0x15	; 21
     ce2:	80 8f       	std	Z+24, r24	; 0x18
     ce4:	91 8f       	std	Z+25, r25	; 0x19
     ce6:	a2 8f       	std	Z+26, r26	; 0x1a
     ce8:	b3 8f       	std	Z+27, r27	; 0x1b
     cea:	44 c0       	rjmp	.+136    	; 0xd74 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_tNS_22adafruit_vector_type_tE+0x39e>
  }
  else if (vec_type == Adafruit_BNO055::VECTOR_MAGNETOMETER)
     cec:	4e 30       	cpi	r20, 0x0E	; 14
     cee:	09 f0       	breq	.+2      	; 0xcf2 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_tNS_22adafruit_vector_type_tE+0x31c>
     cf0:	41 c0       	rjmp	.+130    	; 0xd74 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_tNS_22adafruit_vector_type_tE+0x39e>
  {
    event->type = SENSOR_TYPE_MAGNETIC_FIELD;
     cf2:	42 e0       	ldi	r20, 0x02	; 2
     cf4:	50 e0       	ldi	r21, 0x00	; 0
     cf6:	60 e0       	ldi	r22, 0x00	; 0
     cf8:	70 e0       	ldi	r23, 0x00	; 0
     cfa:	d8 01       	movw	r26, r16
     cfc:	18 96       	adiw	r26, 0x08	; 8
     cfe:	4d 93       	st	X+, r20
     d00:	5d 93       	st	X+, r21
     d02:	6d 93       	st	X+, r22
     d04:	7c 93       	st	X, r23
    vec = getVector(Adafruit_BNO055::VECTOR_MAGNETOMETER);
     d06:	1b 97       	sbiw	r26, 0x0b	; 11
     d08:	4e e0       	ldi	r20, 0x0E	; 14
     d0a:	bc 01       	movw	r22, r24
     d0c:	ce 01       	movw	r24, r28
     d0e:	01 96       	adiw	r24, 0x01	; 1
     d10:	75 dc       	rcall	.-1814   	; 0x5fc <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
     d12:	fe 01       	movw	r30, r28
     d14:	31 96       	adiw	r30, 0x01	; 1
     d16:	de 01       	movw	r26, r28
     d18:	a7 5b       	subi	r26, 0xB7	; 183
     d1a:	bf 4f       	sbci	r27, 0xFF	; 255
     d1c:	ce 01       	movw	r24, r28
     d1e:	0d 96       	adiw	r24, 0x0d	; 13
			p_vec[x] = v.p_vec[x];
     d20:	41 91       	ld	r20, Z+
     d22:	51 91       	ld	r21, Z+
     d24:	61 91       	ld	r22, Z+
     d26:	71 91       	ld	r23, Z+
     d28:	4d 93       	st	X+, r20
     d2a:	5d 93       	st	X+, r21
     d2c:	6d 93       	st	X+, r22
     d2e:	7d 93       	st	X+, r23
			return ret;
		}

		Vector& operator=(const Vector& v)
		{
			for (int x = 0; x < N; x++ )
     d30:	e8 17       	cp	r30, r24
     d32:	f9 07       	cpc	r31, r25
     d34:	a9 f7       	brne	.-22     	; 0xd20 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_tNS_22adafruit_vector_type_tE+0x34a>

    event->magnetic.x = vec.x();
     d36:	2d 96       	adiw	r28, 0x0d	; 13
     d38:	8c ad       	ldd	r24, Y+60	; 0x3c
     d3a:	9d ad       	ldd	r25, Y+61	; 0x3d
     d3c:	ae ad       	ldd	r26, Y+62	; 0x3e
     d3e:	bf ad       	ldd	r27, Y+63	; 0x3f
     d40:	2d 97       	sbiw	r28, 0x0d	; 13
     d42:	f8 01       	movw	r30, r16
     d44:	80 8b       	std	Z+16, r24	; 0x10
     d46:	91 8b       	std	Z+17, r25	; 0x11
     d48:	a2 8b       	std	Z+18, r26	; 0x12
     d4a:	b3 8b       	std	Z+19, r27	; 0x13
    event->magnetic.y = vec.y();
     d4c:	61 96       	adiw	r28, 0x11	; 17
     d4e:	8c ad       	ldd	r24, Y+60	; 0x3c
     d50:	9d ad       	ldd	r25, Y+61	; 0x3d
     d52:	ae ad       	ldd	r26, Y+62	; 0x3e
     d54:	bf ad       	ldd	r27, Y+63	; 0x3f
     d56:	61 97       	sbiw	r28, 0x11	; 17
     d58:	84 8b       	std	Z+20, r24	; 0x14
     d5a:	95 8b       	std	Z+21, r25	; 0x15
     d5c:	a6 8b       	std	Z+22, r26	; 0x16
     d5e:	b7 8b       	std	Z+23, r27	; 0x17
    event->magnetic.z = vec.z();
     d60:	65 96       	adiw	r28, 0x15	; 21
     d62:	8c ad       	ldd	r24, Y+60	; 0x3c
     d64:	9d ad       	ldd	r25, Y+61	; 0x3d
     d66:	ae ad       	ldd	r26, Y+62	; 0x3e
     d68:	bf ad       	ldd	r27, Y+63	; 0x3f
     d6a:	65 97       	sbiw	r28, 0x15	; 21
     d6c:	80 8f       	std	Z+24, r24	; 0x18
     d6e:	91 8f       	std	Z+25, r25	; 0x19
     d70:	a2 8f       	std	Z+26, r26	; 0x1a
     d72:	b3 8f       	std	Z+27, r27	; 0x1b
  }
  

  return true;
}
     d74:	81 e0       	ldi	r24, 0x01	; 1
     d76:	cc 5a       	subi	r28, 0xAC	; 172
     d78:	df 4f       	sbci	r29, 0xFF	; 255
     d7a:	0f b6       	in	r0, 0x3f	; 63
     d7c:	f8 94       	cli
     d7e:	de bf       	out	0x3e, r29	; 62
     d80:	0f be       	out	0x3f, r0	; 63
     d82:	cd bf       	out	0x3d, r28	; 61
     d84:	df 91       	pop	r29
     d86:	cf 91       	pop	r28
     d88:	1f 91       	pop	r17
     d8a:	0f 91       	pop	r16
     d8c:	ff 90       	pop	r15
     d8e:	ef 90       	pop	r14
     d90:	df 90       	pop	r13
     d92:	cf 90       	pop	r12
     d94:	08 95       	ret

00000d96 <_Z14RunPingCommandPKhh>:
#include "Commands.h"

uint8_t* const SendDataBuffer = (uint8_t*)(&EtherComm::buffer[2]);

void RunPingCommand(const uint8_t* data, uint8_t len){
  if(len == 1){
     d96:	61 30       	cpi	r22, 0x01	; 1
     d98:	51 f4       	brne	.+20     	; 0xdae <_Z14RunPingCommandPKhh+0x18>
     d9a:	fc 01       	movw	r30, r24
    SendDataBuffer[0] = data[0];
     d9c:	80 81       	ld	r24, Z
     d9e:	e0 91 82 03 	lds	r30, 0x0382	; 0x800382 <__data_end>
     da2:	f0 91 83 03 	lds	r31, 0x0383	; 0x800383 <__data_end+0x1>
     da6:	80 83       	st	Z, r24
    EtherComm::SendCommand(CMD_Ping, 1);
     da8:	80 e0       	ldi	r24, 0x00	; 0
     daa:	0c 94 bb 12 	jmp	0x2576	; 0x2576 <_ZN9EtherComm11SendCommandEhh>
     dae:	08 95       	ret

00000db0 <_Z14RunEchoCommandPKhh>:
  }
}

void RunEchoCommand(const uint8_t* data, uint8_t len){
  uint8_t* index = SendDataBuffer;
     db0:	40 91 82 03 	lds	r20, 0x0382	; 0x800382 <__data_end>
     db4:	30 91 83 03 	lds	r19, 0x0383	; 0x800383 <__data_end+0x1>
  uint8_t dataLen = len;
  while(len-- > 0){
     db8:	2f ef       	ldi	r18, 0xFF	; 255
     dba:	26 0f       	add	r18, r22
     dbc:	66 23       	and	r22, r22
     dbe:	41 f0       	breq	.+16     	; 0xdd0 <_Z14RunEchoCommandPKhh+0x20>
     dc0:	a8 2f       	mov	r26, r24
     dc2:	b9 2f       	mov	r27, r25
     dc4:	e4 2f       	mov	r30, r20
     dc6:	f3 2f       	mov	r31, r19
    *(index++) = *(data++);
     dc8:	8d 91       	ld	r24, X+
     dca:	81 93       	st	Z+, r24
}

void RunEchoCommand(const uint8_t* data, uint8_t len){
  uint8_t* index = SendDataBuffer;
  uint8_t dataLen = len;
  while(len-- > 0){
     dcc:	21 50       	subi	r18, 0x01	; 1
     dce:	e0 f7       	brcc	.-8      	; 0xdc8 <_Z14RunEchoCommandPKhh+0x18>
    *(index++) = *(data++);
  }
  
  EtherComm::SendCommand(CMD_Echo, dataLen);
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	0c 94 bb 12 	jmp	0x2576	; 0x2576 <_ZN9EtherComm11SendCommandEhh>
     dd6:	08 95       	ret

00000dd8 <_Z13RunLedCommandPKhh>:
}

void RunLedCommand(const uint8_t* data, uint8_t len){
	if(len == 1){
     dd8:	61 30       	cpi	r22, 0x01	; 1
     dda:	51 f4       	brne	.+20     	; 0xdf0 <_Z13RunLedCommandPKhh+0x18>
		uint8_t state = *data;
     ddc:	fc 01       	movw	r30, r24
     dde:	90 81       	ld	r25, Z
		if(state <= 1){
     de0:	92 30       	cpi	r25, 0x02	; 2
     de2:	30 f4       	brcc	.+12     	; 0xdf0 <_Z13RunLedCommandPKhh+0x18>
			rov.SetLed(state > 0);
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	91 11       	cpse	r25, r1
     de8:	01 c0       	rjmp	.+2      	; 0xdec <_Z13RunLedCommandPKhh+0x14>
     dea:	80 e0       	ldi	r24, 0x00	; 0
     dec:	0c 94 61 1a 	jmp	0x34c2	; 0x34c2 <_ZN5Robot6SetLedEb>
     df0:	08 95       	ret

00000df2 <_Z22RunUpdateDeviceCommandPKhh>:
		}
	}
}

void RunUpdateDeviceCommand(const uint8_t* data, uint8_t len){
	if(len > 0){
     df2:	66 23       	and	r22, r22
     df4:	c1 f0       	breq	.+48     	; 0xe26 <_Z22RunUpdateDeviceCommandPKhh+0x34>
		if(Robot::devices[data[0]] != NULL){
     df6:	dc 01       	movw	r26, r24
     df8:	ec 91       	ld	r30, X
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	ee 0f       	add	r30, r30
     dfe:	ff 1f       	adc	r31, r31
     e00:	e3 56       	subi	r30, 0x63	; 99
     e02:	f8 4f       	sbci	r31, 0xF8	; 248
     e04:	a0 81       	ld	r26, Z
     e06:	b1 81       	ldd	r27, Z+1	; 0x01
     e08:	10 97       	sbiw	r26, 0x00	; 0
     e0a:	69 f0       	breq	.+26     	; 0xe26 <_Z22RunUpdateDeviceCommandPKhh+0x34>
     e0c:	46 2f       	mov	r20, r22
     e0e:	bc 01       	movw	r22, r24
			Robot::devices[data[0]]->Update(data + 1, len - 1);
     e10:	41 50       	subi	r20, 0x01	; 1
     e12:	6f 5f       	subi	r22, 0xFF	; 255
     e14:	7f 4f       	sbci	r23, 0xFF	; 255
     e16:	ed 91       	ld	r30, X+
     e18:	fc 91       	ld	r31, X
     e1a:	11 97       	sbiw	r26, 0x01	; 1
     e1c:	01 90       	ld	r0, Z+
     e1e:	f0 81       	ld	r31, Z
     e20:	e0 2d       	mov	r30, r0
     e22:	cd 01       	movw	r24, r26
     e24:	19 95       	eicall
     e26:	08 95       	ret

00000e28 <_ZN9EtherComm15CommandReceivedEhPKhh>:
		}
	}
}

void EtherComm::CommandReceived(uint8_t command, const uint8_t* data, uint8_t len){
     e28:	9b 01       	movw	r18, r22
  switch(command){
     e2a:	81 30       	cpi	r24, 0x01	; 1
     e2c:	51 f0       	breq	.+20     	; 0xe42 <_ZN9EtherComm15CommandReceivedEhPKhh+0x1a>
     e2e:	28 f0       	brcs	.+10     	; 0xe3a <_ZN9EtherComm15CommandReceivedEhPKhh+0x12>
     e30:	82 30       	cpi	r24, 0x02	; 2
     e32:	59 f0       	breq	.+22     	; 0xe4a <_ZN9EtherComm15CommandReceivedEhPKhh+0x22>
     e34:	83 30       	cpi	r24, 0x03	; 3
     e36:	69 f0       	breq	.+26     	; 0xe52 <_ZN9EtherComm15CommandReceivedEhPKhh+0x2a>
     e38:	08 95       	ret
    case CMD_Ping: RunPingCommand(data, len); break;
     e3a:	64 2f       	mov	r22, r20
     e3c:	c9 01       	movw	r24, r18
     e3e:	ab cf       	rjmp	.-170    	; 0xd96 <_Z14RunPingCommandPKhh>
     e40:	08 95       	ret
    case CMD_Echo: RunEchoCommand(data, len); break;
     e42:	64 2f       	mov	r22, r20
     e44:	c9 01       	movw	r24, r18
     e46:	b4 cf       	rjmp	.-152    	; 0xdb0 <_Z14RunEchoCommandPKhh>
     e48:	08 95       	ret
	case CMD_Led: RunLedCommand(data, len); break;
     e4a:	64 2f       	mov	r22, r20
     e4c:	c9 01       	movw	r24, r18
     e4e:	c4 cf       	rjmp	.-120    	; 0xdd8 <_Z13RunLedCommandPKhh>
     e50:	08 95       	ret
	case CMD_UpdateDevice: RunUpdateDeviceCommand(data, len); break;
     e52:	64 2f       	mov	r22, r20
     e54:	c9 01       	movw	r24, r18
     e56:	cd cf       	rjmp	.-102    	; 0xdf2 <_Z22RunUpdateDeviceCommandPKhh>
     e58:	08 95       	ret

00000e5a <_GLOBAL__sub_I__Z14RunPingCommandPKhh>:
     e5a:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <_ZN9EtherComm6bufferE>
#include "EtherComm.h"
#include "Robot.h"
#include "Commands.h"

uint8_t* const SendDataBuffer = (uint8_t*)(&EtherComm::buffer[2]);
     e5e:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <_ZN9EtherComm6bufferE+0x1>
     e62:	02 96       	adiw	r24, 0x02	; 2
     e64:	90 93 83 03 	sts	0x0383, r25	; 0x800383 <__data_end+0x1>
     e68:	80 93 82 03 	sts	0x0382, r24	; 0x800382 <__data_end>
     e6c:	08 95       	ret

00000e6e <_ZL8addToBufh>:
}

void EtherCard::dhcpAddOptionCallback(uint8_t option, DhcpOptionCallback callback)
{
    dhcpCustomOptionNum = option;
    dhcpCustomOptionCallback = callback;
     e6e:	e0 91 87 03 	lds	r30, 0x0387	; 0x800387 <_ZL6bufPtr>
     e72:	f0 91 88 03 	lds	r31, 0x0388	; 0x800388 <_ZL6bufPtr+0x1>
     e76:	9f 01       	movw	r18, r30
     e78:	2f 5f       	subi	r18, 0xFF	; 255
     e7a:	3f 4f       	sbci	r19, 0xFF	; 255
     e7c:	30 93 88 03 	sts	0x0388, r19	; 0x800388 <_ZL6bufPtr+0x1>
     e80:	20 93 87 03 	sts	0x0387, r18	; 0x800387 <_ZL6bufPtr>
     e84:	80 83       	st	Z, r24
     e86:	08 95       	ret

00000e88 <_ZL8addByteshPKh>:
     e88:	0f 93       	push	r16
     e8a:	1f 93       	push	r17
     e8c:	cf 93       	push	r28
     e8e:	df 93       	push	r29
     e90:	9f ef       	ldi	r25, 0xFF	; 255
     e92:	98 0f       	add	r25, r24
     e94:	88 23       	and	r24, r24
     e96:	61 f0       	breq	.+24     	; 0xeb0 <_ZL8addByteshPKh+0x28>
     e98:	eb 01       	movw	r28, r22
     e9a:	09 2f       	mov	r16, r25
     e9c:	10 e0       	ldi	r17, 0x00	; 0
     e9e:	0f 5f       	subi	r16, 0xFF	; 255
     ea0:	1f 4f       	sbci	r17, 0xFF	; 255
     ea2:	06 0f       	add	r16, r22
     ea4:	17 1f       	adc	r17, r23
     ea6:	89 91       	ld	r24, Y+
     ea8:	e2 df       	rcall	.-60     	; 0xe6e <_ZL8addToBufh>
     eaa:	c0 17       	cp	r28, r16
     eac:	d1 07       	cpc	r29, r17
     eae:	d9 f7       	brne	.-10     	; 0xea6 <_ZL8addByteshPKh+0x1e>
     eb0:	df 91       	pop	r29
     eb2:	cf 91       	pop	r28
     eb4:	1f 91       	pop	r17
     eb6:	0f 91       	pop	r16
     eb8:	08 95       	ret

00000eba <_ZL26dhcp_received_message_typejh>:
     eba:	0f 93       	push	r16
     ebc:	1f 93       	push	r17
     ebe:	86 34       	cpi	r24, 0x46	; 70
     ec0:	91 05       	cpc	r25, r1
     ec2:	30 f1       	brcs	.+76     	; 0xf10 <_ZL26dhcp_received_message_typejh+0x56>
     ec4:	20 91 bb 03 	lds	r18, 0x03BB	; 0x8003bb <_ZN8ENC28J606bufferE+0x23>
     ec8:	23 34       	cpi	r18, 0x43	; 67
     eca:	21 f5       	brne	.+72     	; 0xf14 <_ZL26dhcp_received_message_typejh+0x5a>
     ecc:	00 91 c6 03 	lds	r16, 0x03C6	; 0x8003c6 <_ZN8ENC28J606bufferE+0x2e>
     ed0:	10 91 c7 03 	lds	r17, 0x03C7	; 0x8003c7 <_ZN8ENC28J606bufferE+0x2f>
     ed4:	20 91 c8 03 	lds	r18, 0x03C8	; 0x8003c8 <_ZN8ENC28J606bufferE+0x30>
     ed8:	30 91 c9 03 	lds	r19, 0x03C9	; 0x8003c9 <_ZN8ENC28J606bufferE+0x31>
     edc:	01 2b       	or	r16, r17
     ede:	02 2b       	or	r16, r18
     ee0:	03 2b       	or	r16, r19
     ee2:	d1 f4       	brne	.+52     	; 0xf18 <_ZL26dhcp_received_message_typejh+0x5e>
     ee4:	e2 eb       	ldi	r30, 0xB2	; 178
     ee6:	f4 e0       	ldi	r31, 0x04	; 4
     ee8:	88 56       	subi	r24, 0x68	; 104
     eea:	9c 4f       	sbci	r25, 0xFC	; 252
     eec:	af 01       	movw	r20, r30
     eee:	4e 5f       	subi	r20, 0xFE	; 254
     ef0:	5f 4f       	sbci	r21, 0xFF	; 255
     ef2:	31 81       	ldd	r19, Z+1	; 0x01
     ef4:	20 81       	ld	r18, Z
     ef6:	25 33       	cpi	r18, 0x35	; 53
     ef8:	19 f4       	brne	.+6      	; 0xf00 <_ZL26dhcp_received_message_typejh+0x46>
     efa:	22 81       	ldd	r18, Z+2	; 0x02
     efc:	26 17       	cp	r18, r22
     efe:	71 f0       	breq	.+28     	; 0xf1c <_ZL26dhcp_received_message_typejh+0x62>
     f00:	fa 01       	movw	r30, r20
     f02:	e3 0f       	add	r30, r19
     f04:	f1 1d       	adc	r31, r1
     f06:	e8 17       	cp	r30, r24
     f08:	f9 07       	cpc	r31, r25
     f0a:	80 f3       	brcs	.-32     	; 0xeec <_ZL26dhcp_received_message_typejh+0x32>
     f0c:	80 e0       	ldi	r24, 0x00	; 0
     f0e:	07 c0       	rjmp	.+14     	; 0xf1e <_ZL26dhcp_received_message_typejh+0x64>
     f10:	80 e0       	ldi	r24, 0x00	; 0
     f12:	05 c0       	rjmp	.+10     	; 0xf1e <_ZL26dhcp_received_message_typejh+0x64>
     f14:	80 e0       	ldi	r24, 0x00	; 0
     f16:	03 c0       	rjmp	.+6      	; 0xf1e <_ZL26dhcp_received_message_typejh+0x64>
     f18:	80 e0       	ldi	r24, 0x00	; 0
     f1a:	01 c0       	rjmp	.+2      	; 0xf1e <_ZL26dhcp_received_message_typejh+0x64>
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	1f 91       	pop	r17
     f20:	0f 91       	pop	r16
     f22:	08 95       	ret

00000f24 <_ZL17send_dhcp_messagePh>:
     f24:	ef 92       	push	r14
     f26:	ff 92       	push	r15
     f28:	0f 93       	push	r16
     f2a:	1f 93       	push	r17
     f2c:	cf 93       	push	r28
     f2e:	df 93       	push	r29
     f30:	7c 01       	movw	r14, r24
     f32:	86 e1       	ldi	r24, 0x16	; 22
     f34:	91 e0       	ldi	r25, 0x01	; 1
     f36:	e8 e9       	ldi	r30, 0x98	; 152
     f38:	f3 e0       	ldi	r31, 0x03	; 3
     f3a:	df 01       	movw	r26, r30
     f3c:	9c 01       	movw	r18, r24
     f3e:	1d 92       	st	X+, r1
     f40:	21 50       	subi	r18, 0x01	; 1
     f42:	30 40       	sbci	r19, 0x00	; 0
     f44:	e1 f7       	brne	.-8      	; 0xf3e <_ZL17send_dhcp_messagePh+0x1a>
     f46:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <_ZL9dhcpState>
     f4a:	83 30       	cpi	r24, 0x03	; 3
     f4c:	19 f0       	breq	.+6      	; 0xf54 <_ZL17send_dhcp_messagePh+0x30>
     f4e:	69 e4       	ldi	r22, 0x49	; 73
     f50:	72 e0       	ldi	r23, 0x02	; 2
     f52:	02 c0       	rjmp	.+4      	; 0xf58 <_ZL17send_dhcp_messagePh+0x34>
     f54:	64 ea       	ldi	r22, 0xA4	; 164
     f56:	75 e0       	ldi	r23, 0x05	; 5
     f58:	43 e4       	ldi	r20, 0x43	; 67
     f5a:	50 e0       	ldi	r21, 0x00	; 0
     f5c:	84 e4       	ldi	r24, 0x44	; 68
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	13 d6       	rcall	.+3110   	; 0x1b88 <_ZN9EtherCard10udpPrepareEjPKhj>
     f62:	69 e4       	ldi	r22, 0x49	; 73
     f64:	72 e0       	ldi	r23, 0x02	; 2
     f66:	88 e9       	ldi	r24, 0x98	; 152
     f68:	93 e0       	ldi	r25, 0x03	; 3
     f6a:	0e 94 4c 12 	call	0x2498	; 0x2498 <_ZN9EtherCard7copyMacEPhPKh>
     f6e:	e8 e9       	ldi	r30, 0x98	; 152
     f70:	f3 e0       	ldi	r31, 0x03	; 3
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	82 a7       	std	Z+42, r24	; 0x2a
     f76:	83 a7       	std	Z+43, r24	; 0x2b
     f78:	86 e0       	ldi	r24, 0x06	; 6
     f7a:	84 a7       	std	Z+44, r24	; 0x2c
     f7c:	16 a6       	std	Z+46, r1	; 0x2e
     f7e:	17 a6       	std	Z+47, r1	; 0x2f
     f80:	10 aa       	std	Z+48, r1	; 0x30
     f82:	11 aa       	std	Z+49, r1	; 0x31
     f84:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <_ZL9dhcpState>
     f88:	83 30       	cpi	r24, 0x03	; 3
     f8a:	31 f4       	brne	.+12     	; 0xf98 <_ZL17send_dhcp_messagePh+0x74>
     f8c:	64 eb       	ldi	r22, 0xB4	; 180
     f8e:	75 e0       	ldi	r23, 0x05	; 5
     f90:	8e ec       	ldi	r24, 0xCE	; 206
     f92:	93 e0       	ldi	r25, 0x03	; 3
     f94:	0e 94 3f 12 	call	0x247e	; 0x247e <_ZN9EtherCard6copyIpEPhPKh>
     f98:	68 eb       	ldi	r22, 0xB8	; 184
     f9a:	75 e0       	ldi	r23, 0x05	; 5
     f9c:	8e ed       	ldi	r24, 0xDE	; 222
     f9e:	93 e0       	ldi	r25, 0x03	; 3
     fa0:	0e 94 4c 12 	call	0x2498	; 0x2498 <_ZN9EtherCard7copyMacEPhPKh>
     fa4:	8e ea       	ldi	r24, 0xAE	; 174
     fa6:	94 e0       	ldi	r25, 0x04	; 4
     fa8:	90 93 88 03 	sts	0x0388, r25	; 0x800388 <_ZL6bufPtr+0x1>
     fac:	80 93 87 03 	sts	0x0387, r24	; 0x800387 <_ZL6bufPtr>
     fb0:	c6 e7       	ldi	r28, 0x76	; 118
     fb2:	d2 e0       	ldi	r29, 0x02	; 2
     fb4:	0a e7       	ldi	r16, 0x7A	; 122
     fb6:	12 e0       	ldi	r17, 0x02	; 2
     fb8:	fe 01       	movw	r30, r28
     fba:	84 91       	lpm	r24, Z
     fbc:	58 df       	rcall	.-336    	; 0xe6e <_ZL8addToBufh>
     fbe:	21 96       	adiw	r28, 0x01	; 1
     fc0:	0c 17       	cp	r16, r28
     fc2:	1d 07       	cpc	r17, r29
     fc4:	c9 f7       	brne	.-14     	; 0xfb8 <_ZL17send_dhcp_messagePh+0x94>
     fc6:	85 e3       	ldi	r24, 0x35	; 53
     fc8:	52 df       	rcall	.-348    	; 0xe6e <_ZL8addToBufh>
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	50 df       	rcall	.-352    	; 0xe6e <_ZL8addToBufh>
     fce:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <_ZL9dhcpState>
     fd2:	88 23       	and	r24, r24
     fd4:	11 f0       	breq	.+4      	; 0xfda <_ZL17send_dhcp_messagePh+0xb6>
     fd6:	83 e0       	ldi	r24, 0x03	; 3
     fd8:	01 c0       	rjmp	.+2      	; 0xfdc <_ZL17send_dhcp_messagePh+0xb8>
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	48 df       	rcall	.-368    	; 0xe6e <_ZL8addToBufh>
     fde:	8d e3       	ldi	r24, 0x3D	; 61
     fe0:	46 df       	rcall	.-372    	; 0xe6e <_ZL8addToBufh>
     fe2:	87 e0       	ldi	r24, 0x07	; 7
     fe4:	44 df       	rcall	.-376    	; 0xe6e <_ZL8addToBufh>
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	42 df       	rcall	.-380    	; 0xe6e <_ZL8addToBufh>
     fea:	68 eb       	ldi	r22, 0xB8	; 184
     fec:	75 e0       	ldi	r23, 0x05	; 5
     fee:	86 e0       	ldi	r24, 0x06	; 6
     ff0:	4b df       	rcall	.-362    	; 0xe88 <_ZL8addByteshPKh>
     ff2:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
     ff6:	88 23       	and	r24, r24
     ff8:	89 f0       	breq	.+34     	; 0x101c <_ZL17send_dhcp_messagePh+0xf8>
     ffa:	e0 e0       	ldi	r30, 0x00	; 0
     ffc:	f2 e0       	ldi	r31, 0x02	; 2
     ffe:	01 90       	ld	r0, Z+
    1000:	00 20       	and	r0, r0
    1002:	e9 f7       	brne	.-6      	; 0xffe <_ZL17send_dhcp_messagePh+0xda>
    1004:	31 97       	sbiw	r30, 0x01	; 1
    1006:	ef 01       	movw	r28, r30
    1008:	c0 50       	subi	r28, 0x00	; 0
    100a:	d2 40       	sbci	r29, 0x02	; 2
    100c:	8c e0       	ldi	r24, 0x0C	; 12
    100e:	2f df       	rcall	.-418    	; 0xe6e <_ZL8addToBufh>
    1010:	8c 2f       	mov	r24, r28
    1012:	2d df       	rcall	.-422    	; 0xe6e <_ZL8addToBufh>
    1014:	60 e0       	ldi	r22, 0x00	; 0
    1016:	72 e0       	ldi	r23, 0x02	; 2
    1018:	8c 2f       	mov	r24, r28
    101a:	36 df       	rcall	.-404    	; 0xe88 <_ZL8addByteshPKh>
    101c:	e1 14       	cp	r14, r1
    101e:	f1 04       	cpc	r15, r1
    1020:	79 f0       	breq	.+30     	; 0x1040 <_ZL17send_dhcp_messagePh+0x11c>
    1022:	82 e3       	ldi	r24, 0x32	; 50
    1024:	24 df       	rcall	.-440    	; 0xe6e <_ZL8addToBufh>
    1026:	84 e0       	ldi	r24, 0x04	; 4
    1028:	22 df       	rcall	.-444    	; 0xe6e <_ZL8addToBufh>
    102a:	b7 01       	movw	r22, r14
    102c:	84 e0       	ldi	r24, 0x04	; 4
    102e:	2c df       	rcall	.-424    	; 0xe88 <_ZL8addByteshPKh>
    1030:	86 e3       	ldi	r24, 0x36	; 54
    1032:	1d df       	rcall	.-454    	; 0xe6e <_ZL8addToBufh>
    1034:	84 e0       	ldi	r24, 0x04	; 4
    1036:	1b df       	rcall	.-458    	; 0xe6e <_ZL8addToBufh>
    1038:	64 ea       	ldi	r22, 0xA4	; 164
    103a:	75 e0       	ldi	r23, 0x05	; 5
    103c:	84 e0       	ldi	r24, 0x04	; 4
    103e:	24 df       	rcall	.-440    	; 0xe88 <_ZL8addByteshPKh>
    1040:	c0 91 86 03 	lds	r28, 0x0386	; 0x800386 <_ZL19dhcpCustomOptionNum>
    1044:	c1 11       	cpse	r28, r1
    1046:	0b c0       	rjmp	.+22     	; 0x105e <_ZL17send_dhcp_messagePh+0x13a>
    1048:	17 c0       	rjmp	.+46     	; 0x1078 <_ZL17send_dhcp_messagePh+0x154>
    104a:	8f ef       	ldi	r24, 0xFF	; 255
    104c:	10 df       	rcall	.-480    	; 0xe6e <_ZL8addToBufh>
    104e:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <_ZL6bufPtr>
    1052:	90 91 88 03 	lds	r25, 0x0388	; 0x800388 <_ZL6bufPtr+0x1>
    1056:	82 5c       	subi	r24, 0xC2	; 194
    1058:	93 40       	sbci	r25, 0x03	; 3
    105a:	e8 d5       	rcall	.+3024   	; 0x1c2c <_ZN9EtherCard11udpTransmitEj>
    105c:	18 c0       	rjmp	.+48     	; 0x108e <_ZL17send_dhcp_messagePh+0x16a>
    105e:	87 e3       	ldi	r24, 0x37	; 55
    1060:	06 df       	rcall	.-500    	; 0xe6e <_ZL8addToBufh>
    1062:	84 e0       	ldi	r24, 0x04	; 4
    1064:	04 df       	rcall	.-504    	; 0xe6e <_ZL8addToBufh>
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	02 df       	rcall	.-508    	; 0xe6e <_ZL8addToBufh>
    106a:	83 e0       	ldi	r24, 0x03	; 3
    106c:	00 df       	rcall	.-512    	; 0xe6e <_ZL8addToBufh>
    106e:	86 e0       	ldi	r24, 0x06	; 6
    1070:	fe de       	rcall	.-516    	; 0xe6e <_ZL8addToBufh>
    1072:	8c 2f       	mov	r24, r28
    1074:	fc de       	rcall	.-520    	; 0xe6e <_ZL8addToBufh>
    1076:	e9 cf       	rjmp	.-46     	; 0x104a <_ZL17send_dhcp_messagePh+0x126>
    1078:	87 e3       	ldi	r24, 0x37	; 55
    107a:	f9 de       	rcall	.-526    	; 0xe6e <_ZL8addToBufh>
    107c:	83 e0       	ldi	r24, 0x03	; 3
    107e:	f7 de       	rcall	.-530    	; 0xe6e <_ZL8addToBufh>
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	f5 de       	rcall	.-534    	; 0xe6e <_ZL8addToBufh>
    1084:	83 e0       	ldi	r24, 0x03	; 3
    1086:	f3 de       	rcall	.-538    	; 0xe6e <_ZL8addToBufh>
    1088:	86 e0       	ldi	r24, 0x06	; 6
    108a:	f1 de       	rcall	.-542    	; 0xe6e <_ZL8addToBufh>
    108c:	de cf       	rjmp	.-68     	; 0x104a <_ZL17send_dhcp_messagePh+0x126>
    108e:	df 91       	pop	r29
    1090:	cf 91       	pop	r28
    1092:	1f 91       	pop	r17
    1094:	0f 91       	pop	r16
    1096:	ff 90       	pop	r15
    1098:	ef 90       	pop	r14
    109a:	08 95       	ret

0000109c <_ZN9EtherCard16DhcpStateMachineEj>:
}

void EtherCard::DhcpStateMachine (uint16_t len)
{
    109c:	9f 92       	push	r9
    109e:	af 92       	push	r10
    10a0:	bf 92       	push	r11
    10a2:	cf 92       	push	r12
    10a4:	df 92       	push	r13
    10a6:	ef 92       	push	r14
    10a8:	ff 92       	push	r15
    10aa:	0f 93       	push	r16
    10ac:	1f 93       	push	r17
    10ae:	cf 93       	push	r28
    10b0:	df 93       	push	r29
    10b2:	00 d0       	rcall	.+0      	; 0x10b4 <_ZN9EtherCard16DhcpStateMachineEj+0x18>
    10b4:	1f 92       	push	r1
    10b6:	cd b7       	in	r28, 0x3d	; 61
    10b8:	de b7       	in	r29, 0x3e	; 62
    10ba:	8c 01       	movw	r16, r24
        Serial.println("Renew");
        break;
    }
#endif

    switch (dhcpState) {
    10bc:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <_ZL9dhcpState>
    10c0:	82 30       	cpi	r24, 0x02	; 2
    10c2:	09 f4       	brne	.+2      	; 0x10c6 <_ZN9EtherCard16DhcpStateMachineEj+0x2a>
    10c4:	5a c0       	rjmp	.+180    	; 0x117a <_ZN9EtherCard16DhcpStateMachineEj+0xde>
    10c6:	28 f4       	brcc	.+10     	; 0x10d2 <_ZN9EtherCard16DhcpStateMachineEj+0x36>
    10c8:	88 23       	and	r24, r24
    10ca:	f1 f0       	breq	.+60     	; 0x1108 <_ZN9EtherCard16DhcpStateMachineEj+0x6c>
    10cc:	81 30       	cpi	r24, 0x01	; 1
    10ce:	61 f1       	breq	.+88     	; 0x1128 <_ZN9EtherCard16DhcpStateMachineEj+0x8c>
    10d0:	e3 c0       	rjmp	.+454    	; 0x1298 <_ZN9EtherCard16DhcpStateMachineEj+0x1fc>
    10d2:	83 30       	cpi	r24, 0x03	; 3
    10d4:	21 f0       	breq	.+8      	; 0x10de <_ZN9EtherCard16DhcpStateMachineEj+0x42>
    10d6:	84 30       	cpi	r24, 0x04	; 4
    10d8:	09 f4       	brne	.+2      	; 0x10dc <_ZN9EtherCard16DhcpStateMachineEj+0x40>
    10da:	4f c0       	rjmp	.+158    	; 0x117a <_ZN9EtherCard16DhcpStateMachineEj+0xde>
    10dc:	dd c0       	rjmp	.+442    	; 0x1298 <_ZN9EtherCard16DhcpStateMachineEj+0x1fc>

    case DHCP_STATE_BOUND:
        //!@todo Due to millis() wrap-around, DHCP renewal may not work if leaseTime is larger than 49days
		//TODO replaced millis()
		if (leaseTime != DHCP_INFINITE_LEASE /*&& millis() - leaseStart >= leaseTime*/) {
    10de:	80 91 89 03 	lds	r24, 0x0389	; 0x800389 <_ZL9leaseTime>
    10e2:	90 91 8a 03 	lds	r25, 0x038A	; 0x80038a <_ZL9leaseTime+0x1>
    10e6:	a0 91 8b 03 	lds	r26, 0x038B	; 0x80038b <_ZL9leaseTime+0x2>
    10ea:	b0 91 8c 03 	lds	r27, 0x038C	; 0x80038c <_ZL9leaseTime+0x3>
    10ee:	8f 3f       	cpi	r24, 0xFF	; 255
    10f0:	9f 4f       	sbci	r25, 0xFF	; 255
    10f2:	af 4f       	sbci	r26, 0xFF	; 255
    10f4:	bf 4f       	sbci	r27, 0xFF	; 255
    10f6:	09 f4       	brne	.+2      	; 0x10fa <_ZN9EtherCard16DhcpStateMachineEj+0x5e>
    10f8:	cf c0       	rjmp	.+414    	; 0x1298 <_ZN9EtherCard16DhcpStateMachineEj+0x1fc>
            send_dhcp_message(myip);
    10fa:	84 eb       	ldi	r24, 0xB4	; 180
    10fc:	95 e0       	ldi	r25, 0x05	; 5
    10fe:	12 df       	rcall	.-476    	; 0xf24 <_ZL17send_dhcp_messagePh>
            dhcpState = DHCP_STATE_RENEWING;
    1100:	84 e0       	ldi	r24, 0x04	; 4
    1102:	80 93 8d 03 	sts	0x038D, r24	; 0x80038d <_ZL9dhcpState>
    1106:	c8 c0       	rjmp	.+400    	; 0x1298 <_ZN9EtherCard16DhcpStateMachineEj+0x1fc>
        break;

    case DHCP_STATE_INIT:
		//TODO replaced millis()
        //currentXid = millis();
        memset(myip,0,IP_LEN); // force ip 0.0.0.0
    1108:	84 e0       	ldi	r24, 0x04	; 4
    110a:	e4 eb       	ldi	r30, 0xB4	; 180
    110c:	f5 e0       	ldi	r31, 0x05	; 5
    110e:	df 01       	movw	r26, r30
    1110:	1d 92       	st	X+, r1
    1112:	8a 95       	dec	r24
    1114:	e9 f7       	brne	.-6      	; 0x1110 <_ZN9EtherCard16DhcpStateMachineEj+0x74>
        send_dhcp_message(NULL);
    1116:	80 e0       	ldi	r24, 0x00	; 0
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	04 df       	rcall	.-504    	; 0xf24 <_ZL17send_dhcp_messagePh>
        enableBroadcast(true); //Temporarily enable broadcasts
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	04 d3       	rcall	.+1544   	; 0x1728 <_ZN8ENC28J6015enableBroadcastEb>
    1120:	81 e0       	ldi	r24, 0x01	; 1
        dhcpState = DHCP_STATE_SELECTING;
    1122:	80 93 8d 03 	sts	0x038D, r24	; 0x80038d <_ZL9dhcpState>
    1126:	b8 c0       	rjmp	.+368    	; 0x1298 <_ZN9EtherCard16DhcpStateMachineEj+0x1fc>
		//TODO replaced millis()
        //stateTimer = millis();
        break;

    case DHCP_STATE_SELECTING:
        if (dhcp_received_message_type(len, DHCP_OFFER)) {
    1128:	62 e0       	ldi	r22, 0x02	; 2
    112a:	c8 01       	movw	r24, r16
    112c:	c6 de       	rcall	.-628    	; 0xeba <_ZL26dhcp_received_message_typejh>
    112e:	88 23       	and	r24, r24
    1130:	09 f4       	brne	.+2      	; 0x1134 <_ZN9EtherCard16DhcpStateMachineEj+0x98>
    1132:	b2 c0       	rjmp	.+356    	; 0x1298 <_ZN9EtherCard16DhcpStateMachineEj+0x1fc>
    1134:	62 ed       	ldi	r22, 0xD2	; 210
static void process_dhcp_offer(uint16_t len, uint8_t *offeredip) {
    // Map struct onto payload
    DHCPdata *dhcpPtr = (DHCPdata*) (gPB + UDP_DATA_P);

    // Offered IP address is in yiaddr
    EtherCard::copyIp(offeredip, dhcpPtr->yiaddr);
    1136:	73 e0       	ldi	r23, 0x03	; 3
    1138:	ce 01       	movw	r24, r28
    113a:	01 96       	adiw	r24, 0x01	; 1
    113c:	0e 94 3f 12 	call	0x247e	; 0x247e <_ZN9EtherCard6copyIpEPhPKh>
    1140:	e2 eb       	ldi	r30, 0xB2	; 178

    // Search for the server IP
    uint8_t *ptr = (uint8_t*) (dhcpPtr + 1) + 4;
    1142:	f4 e0       	ldi	r31, 0x04	; 4
    1144:	08 56       	subi	r16, 0x68	; 104
        if (option == DHCP_OPT_SERVER_IDENTIFIER) {
            EtherCard::copyIp(EtherCard::dhcpip, ptr);
            break;
        }
        ptr += optionLen;
    } while (ptr < gPB + len);
    1146:	1c 4f       	sbci	r17, 0xFC	; 252
    1148:	bf 01       	movw	r22, r30

    // Search for the server IP
    uint8_t *ptr = (uint8_t*) (dhcpPtr + 1) + 4;
    do {
        uint8_t option = *ptr++;
        uint8_t optionLen = *ptr++;
    114a:	6e 5f       	subi	r22, 0xFE	; 254
    114c:	7f 4f       	sbci	r23, 0xFF	; 255
    114e:	91 81       	ldd	r25, Z+1	; 0x01
    1150:	80 81       	ld	r24, Z
        if (option == DHCP_OPT_SERVER_IDENTIFIER) {
    1152:	86 33       	cpi	r24, 0x36	; 54
    1154:	29 f4       	brne	.+10     	; 0x1160 <_ZN9EtherCard16DhcpStateMachineEj+0xc4>
    1156:	84 ea       	ldi	r24, 0xA4	; 164
            EtherCard::copyIp(EtherCard::dhcpip, ptr);
    1158:	95 e0       	ldi	r25, 0x05	; 5
    115a:	0e 94 3f 12 	call	0x247e	; 0x247e <_ZN9EtherCard6copyIpEPhPKh>
    115e:	06 c0       	rjmp	.+12     	; 0x116c <_ZN9EtherCard16DhcpStateMachineEj+0xd0>
    1160:	fb 01       	movw	r30, r22
            break;
        }
        ptr += optionLen;
    1162:	e9 0f       	add	r30, r25
    1164:	f1 1d       	adc	r31, r1
    1166:	e0 17       	cp	r30, r16
    } while (ptr < gPB + len);
    1168:	f1 07       	cpc	r31, r17
    116a:	70 f3       	brcs	.-36     	; 0x1148 <_ZN9EtherCard16DhcpStateMachineEj+0xac>

    case DHCP_STATE_SELECTING:
        if (dhcp_received_message_type(len, DHCP_OFFER)) {
            uint8_t offeredip[IP_LEN];
            process_dhcp_offer(len, offeredip);
            send_dhcp_message(offeredip);
    116c:	ce 01       	movw	r24, r28
    116e:	01 96       	adiw	r24, 0x01	; 1
    1170:	d9 de       	rcall	.-590    	; 0xf24 <_ZL17send_dhcp_messagePh>
    1172:	82 e0       	ldi	r24, 0x02	; 2
            dhcpState = DHCP_STATE_REQUESTING;
    1174:	80 93 8d 03 	sts	0x038D, r24	; 0x80038d <_ZL9dhcpState>
    1178:	8f c0       	rjmp	.+286    	; 0x1298 <_ZN9EtherCard16DhcpStateMachineEj+0x1fc>
        }
        break;

    case DHCP_STATE_REQUESTING:
    case DHCP_STATE_RENEWING:
        if (dhcp_received_message_type(len, DHCP_ACK)) {
    117a:	65 e0       	ldi	r22, 0x05	; 5
    117c:	c8 01       	movw	r24, r16
    117e:	9d de       	rcall	.-710    	; 0xeba <_ZL26dhcp_received_message_typejh>
    1180:	88 23       	and	r24, r24
    1182:	09 f4       	brne	.+2      	; 0x1186 <_ZN9EtherCard16DhcpStateMachineEj+0xea>
    1184:	89 c0       	rjmp	.+274    	; 0x1298 <_ZN9EtherCard16DhcpStateMachineEj+0x1fc>
            disableBroadcast(true); //Disable broadcast after temporary enable
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	de d2       	rcall	.+1468   	; 0x1746 <_ZN8ENC28J6016disableBroadcastEb>
    118a:	62 ed       	ldi	r22, 0xD2	; 210
static void process_dhcp_ack(uint16_t len) {
    // Map struct onto payload
    DHCPdata *dhcpPtr = (DHCPdata*) (gPB + UDP_DATA_P);

    // Allocated IP address is in yiaddr
    EtherCard::copyIp(EtherCard::myip, dhcpPtr->yiaddr);
    118c:	73 e0       	ldi	r23, 0x03	; 3
    118e:	84 eb       	ldi	r24, 0xB4	; 180
    1190:	95 e0       	ldi	r25, 0x05	; 5
    1192:	0e 94 3f 12 	call	0x247e	; 0x247e <_ZN9EtherCard6copyIpEPhPKh>
    1196:	e2 eb       	ldi	r30, 0xB2	; 178

    // Scan through variable length option list identifying options we want
    uint8_t *ptr = (uint8_t*) (dhcpPtr + 1) + 4;
    1198:	f4 e0       	ldi	r31, 0x04	; 4
    119a:	91 2c       	mov	r9, r1
    119c:	a1 2c       	mov	r10, r1
    119e:	b1 2c       	mov	r11, r1
    11a0:	c1 2c       	mov	r12, r1
    11a2:	08 56       	subi	r16, 0x68	; 104
                dhcpCustomOptionCallback(option, ptr, optionLen);
            }
        }
        }
        ptr += optionLen;
    } while (!done && ptr < gPB + len);
    11a4:	1c 4f       	sbci	r17, 0xFC	; 252
    11a6:	80 81       	ld	r24, Z

    // Scan through variable length option list identifying options we want
    uint8_t *ptr = (uint8_t*) (dhcpPtr + 1) + 4;
    bool done = false;
    do {
        uint8_t option = *ptr++;
    11a8:	7f 01       	movw	r14, r30
        uint8_t optionLen = *ptr++;
    11aa:	b2 e0       	ldi	r27, 0x02	; 2
    11ac:	eb 0e       	add	r14, r27
    11ae:	f1 1c       	adc	r15, r1
    11b0:	d1 80       	ldd	r13, Z+1	; 0x01
    11b2:	86 30       	cpi	r24, 0x06	; 6
        switch (option) {
    11b4:	d9 f0       	breq	.+54     	; 0x11ec <_ZN9EtherCard16DhcpStateMachineEj+0x150>
    11b6:	28 f4       	brcc	.+10     	; 0x11c2 <_ZN9EtherCard16DhcpStateMachineEj+0x126>
    11b8:	81 30       	cpi	r24, 0x01	; 1
    11ba:	61 f0       	breq	.+24     	; 0x11d4 <_ZN9EtherCard16DhcpStateMachineEj+0x138>
    11bc:	83 30       	cpi	r24, 0x03	; 3
    11be:	81 f0       	breq	.+32     	; 0x11e0 <_ZN9EtherCard16DhcpStateMachineEj+0x144>
    11c0:	4a c0       	rjmp	.+148    	; 0x1256 <_ZN9EtherCard16DhcpStateMachineEj+0x1ba>
    11c2:	8a 33       	cpi	r24, 0x3A	; 58
    11c4:	c9 f0       	breq	.+50     	; 0x11f8 <_ZN9EtherCard16DhcpStateMachineEj+0x15c>
    11c6:	8f 3f       	cpi	r24, 0xFF	; 255
    11c8:	09 f4       	brne	.+2      	; 0x11cc <_ZN9EtherCard16DhcpStateMachineEj+0x130>
    11ca:	53 c0       	rjmp	.+166    	; 0x1272 <_ZN9EtherCard16DhcpStateMachineEj+0x1d6>
    11cc:	83 33       	cpi	r24, 0x33	; 51
    11ce:	09 f0       	breq	.+2      	; 0x11d2 <_ZN9EtherCard16DhcpStateMachineEj+0x136>
    11d0:	42 c0       	rjmp	.+132    	; 0x1256 <_ZN9EtherCard16DhcpStateMachineEj+0x1ba>
    11d2:	12 c0       	rjmp	.+36     	; 0x11f8 <_ZN9EtherCard16DhcpStateMachineEj+0x15c>
    11d4:	b7 01       	movw	r22, r14
        case DHCP_OPT_SUBNET_MASK:
            EtherCard::copyIp(EtherCard::netmask, ptr);
    11d6:	80 eb       	ldi	r24, 0xB0	; 176
    11d8:	95 e0       	ldi	r25, 0x05	; 5
    11da:	0e 94 3f 12 	call	0x247e	; 0x247e <_ZN9EtherCard6copyIpEPhPKh>
    11de:	54 c0       	rjmp	.+168    	; 0x1288 <_ZN9EtherCard16DhcpStateMachineEj+0x1ec>
    11e0:	b7 01       	movw	r22, r14
            break;
        case DHCP_OPT_ROUTERS:
            EtherCard::copyIp(EtherCard::gwip, ptr);
    11e2:	88 ea       	ldi	r24, 0xA8	; 168
    11e4:	95 e0       	ldi	r25, 0x05	; 5
    11e6:	0e 94 3f 12 	call	0x247e	; 0x247e <_ZN9EtherCard6copyIpEPhPKh>
    11ea:	4e c0       	rjmp	.+156    	; 0x1288 <_ZN9EtherCard16DhcpStateMachineEj+0x1ec>
    11ec:	b7 01       	movw	r22, r14
            break;
        case DHCP_OPT_DOMAIN_NAME_SERVERS:
            EtherCard::copyIp(EtherCard::dnsip, ptr);
    11ee:	80 ea       	ldi	r24, 0xA0	; 160
    11f0:	95 e0       	ldi	r25, 0x05	; 5
    11f2:	0e 94 3f 12 	call	0x247e	; 0x247e <_ZN9EtherCard6copyIpEPhPKh>
    11f6:	48 c0       	rjmp	.+144    	; 0x1288 <_ZN9EtherCard16DhcpStateMachineEj+0x1ec>
    11f8:	d7 01       	movw	r26, r14
    11fa:	36 96       	adiw	r30, 0x06	; 6
    11fc:	29 2d       	mov	r18, r9
    11fe:	3a 2d       	mov	r19, r10
    1200:	4b 2d       	mov	r20, r11
    1202:	5c 2d       	mov	r21, r12
    1204:	8d 91       	ld	r24, X+
            break;
        case DHCP_OPT_LEASE_TIME:
        case DHCP_OPT_RENEWAL_TIME:
            leaseTime = 0;
            for (uint8_t i = 0; i<4; i++)
                leaseTime = (leaseTime << 8) + ptr[i];
    1206:	74 2f       	mov	r23, r20
    1208:	63 2f       	mov	r22, r19
    120a:	52 2f       	mov	r21, r18
    120c:	44 27       	eor	r20, r20
    120e:	9a 01       	movw	r18, r20
    1210:	ab 01       	movw	r20, r22
    1212:	28 0f       	add	r18, r24
    1214:	31 1d       	adc	r19, r1
    1216:	41 1d       	adc	r20, r1
    1218:	51 1d       	adc	r21, r1
    121a:	ae 17       	cp	r26, r30
            EtherCard::copyIp(EtherCard::dnsip, ptr);
            break;
        case DHCP_OPT_LEASE_TIME:
        case DHCP_OPT_RENEWAL_TIME:
            leaseTime = 0;
            for (uint8_t i = 0; i<4; i++)
    121c:	bf 07       	cpc	r27, r31
    121e:	91 f7       	brne	.-28     	; 0x1204 <_ZN9EtherCard16DhcpStateMachineEj+0x168>
    1220:	20 93 89 03 	sts	0x0389, r18	; 0x800389 <_ZL9leaseTime>
    1224:	30 93 8a 03 	sts	0x038A, r19	; 0x80038a <_ZL9leaseTime+0x1>
    1228:	40 93 8b 03 	sts	0x038B, r20	; 0x80038b <_ZL9leaseTime+0x2>
    122c:	50 93 8c 03 	sts	0x038C, r21	; 0x80038c <_ZL9leaseTime+0x3>
    1230:	2f 3f       	cpi	r18, 0xFF	; 255
                leaseTime = (leaseTime << 8) + ptr[i];
            if (leaseTime != DHCP_INFINITE_LEASE) {
    1232:	8f ef       	ldi	r24, 0xFF	; 255
    1234:	38 07       	cpc	r19, r24
    1236:	48 07       	cpc	r20, r24
    1238:	58 07       	cpc	r21, r24
    123a:	31 f1       	breq	.+76     	; 0x1288 <_ZN9EtherCard16DhcpStateMachineEj+0x1ec>
    123c:	a8 ee       	ldi	r26, 0xE8	; 232
                leaseTime *= 1000;      // milliseconds
    123e:	b3 e0       	ldi	r27, 0x03	; 3
    1240:	0e 94 55 20 	call	0x40aa	; 0x40aa <__muluhisi3>
    1244:	60 93 89 03 	sts	0x0389, r22	; 0x800389 <_ZL9leaseTime>
    1248:	70 93 8a 03 	sts	0x038A, r23	; 0x80038a <_ZL9leaseTime+0x1>
    124c:	80 93 8b 03 	sts	0x038B, r24	; 0x80038b <_ZL9leaseTime+0x2>
    1250:	90 93 8c 03 	sts	0x038C, r25	; 0x80038c <_ZL9leaseTime+0x3>
    1254:	19 c0       	rjmp	.+50     	; 0x1288 <_ZN9EtherCard16DhcpStateMachineEj+0x1ec>
    1256:	e0 91 84 03 	lds	r30, 0x0384	; 0x800384 <_ZL24dhcpCustomOptionCallback>
        case DHCP_OPT_END:
            done = true;
            break;
        default: {
            // Is is a custom configured option?
            if (dhcpCustomOptionCallback && option == dhcpCustomOptionNum) {
    125a:	f0 91 85 03 	lds	r31, 0x0385	; 0x800385 <_ZL24dhcpCustomOptionCallback+0x1>
    125e:	30 97       	sbiw	r30, 0x00	; 0
    1260:	99 f0       	breq	.+38     	; 0x1288 <_ZN9EtherCard16DhcpStateMachineEj+0x1ec>
    1262:	90 91 86 03 	lds	r25, 0x0386	; 0x800386 <_ZL19dhcpCustomOptionNum>
    1266:	89 13       	cpse	r24, r25
    1268:	0f c0       	rjmp	.+30     	; 0x1288 <_ZN9EtherCard16DhcpStateMachineEj+0x1ec>
    126a:	4d 2d       	mov	r20, r13
                dhcpCustomOptionCallback(option, ptr, optionLen);
    126c:	b7 01       	movw	r22, r14
    126e:	19 95       	eicall
    1270:	0b c0       	rjmp	.+22     	; 0x1288 <_ZN9EtherCard16DhcpStateMachineEj+0x1ec>
        if (dhcp_received_message_type(len, DHCP_ACK)) {
            disableBroadcast(true); //Disable broadcast after temporary enable
            process_dhcp_ack(len);
			//TODO repalced millis()
            //leaseStart = millis();
            if (gwip[0] != 0) setGwIp(gwip); // why is this? because it initiates an arp request
    1272:	80 91 a8 05 	lds	r24, 0x05A8	; 0x8005a8 <_ZN9EtherCard4gwipE>
    1276:	88 23       	and	r24, r24
    1278:	19 f0       	breq	.+6      	; 0x1280 <_ZN9EtherCard16DhcpStateMachineEj+0x1e4>
    127a:	88 ea       	ldi	r24, 0xA8	; 168
    127c:	95 e0       	ldi	r25, 0x05	; 5
    127e:	0e d5       	rcall	.+2588   	; 0x1c9c <_ZN9EtherCard7setGwIpEPKh>
    1280:	83 e0       	ldi	r24, 0x03	; 3
            dhcpState = DHCP_STATE_BOUND;
    1282:	80 93 8d 03 	sts	0x038D, r24	; 0x80038d <_ZL9dhcpState>
    1286:	08 c0       	rjmp	.+16     	; 0x1298 <_ZN9EtherCard16DhcpStateMachineEj+0x1fc>
            }*/
        }
        break;

    }
}
    1288:	f7 01       	movw	r30, r14
            if (dhcpCustomOptionCallback && option == dhcpCustomOptionNum) {
                dhcpCustomOptionCallback(option, ptr, optionLen);
            }
        }
        }
        ptr += optionLen;
    128a:	ed 0d       	add	r30, r13
    128c:	f1 1d       	adc	r31, r1
    128e:	e0 17       	cp	r30, r16
    } while (!done && ptr < gPB + len);
    1290:	f1 07       	cpc	r31, r17
    1292:	08 f4       	brcc	.+2      	; 0x1296 <_ZN9EtherCard16DhcpStateMachineEj+0x1fa>
    1294:	88 cf       	rjmp	.-240    	; 0x11a6 <_ZN9EtherCard16DhcpStateMachineEj+0x10a>
    1296:	ed cf       	rjmp	.-38     	; 0x1272 <_ZN9EtherCard16DhcpStateMachineEj+0x1d6>
    1298:	0f 90       	pop	r0
            }*/
        }
        break;

    }
}
    129a:	0f 90       	pop	r0
    129c:	0f 90       	pop	r0
    129e:	0f 90       	pop	r0
    12a0:	df 91       	pop	r29
    12a2:	cf 91       	pop	r28
    12a4:	1f 91       	pop	r17
    12a6:	0f 91       	pop	r16
    12a8:	ff 90       	pop	r15
    12aa:	ef 90       	pop	r14
    12ac:	df 90       	pop	r13
    12ae:	cf 90       	pop	r12
    12b0:	bf 90       	pop	r11
    12b2:	af 90       	pop	r10
    12b4:	9f 90       	pop	r9
    12b6:	08 95       	ret

000012b8 <_ZL10enableChipv>:
    12b8:	f8 94       	cli
}

void ENC28J60::powerUp() {
    writeOp(ENC28J60_BIT_FIELD_CLR, ECON2, ECON2_PWRSV);
    while(!readRegByte(ESTAT) & ESTAT_CLKRDY);
    writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN);
    12ba:	e0 91 92 03 	lds	r30, 0x0392	; 0x800392 <_ZL10selectPort>
    12be:	f0 91 93 03 	lds	r31, 0x0393	; 0x800393 <_ZL10selectPort+0x1>
    12c2:	90 81       	ld	r25, Z
    12c4:	80 91 91 03 	lds	r24, 0x0391	; 0x800391 <_ZL9selectPin>
    12c8:	80 95       	com	r24
    12ca:	89 23       	and	r24, r25
    12cc:	80 83       	st	Z, r24
    12ce:	08 95       	ret

000012d0 <_ZL11disableChipv>:
    12d0:	e0 91 92 03 	lds	r30, 0x0392	; 0x800392 <_ZL10selectPort>
    12d4:	f0 91 93 03 	lds	r31, 0x0393	; 0x800393 <_ZL10selectPort+0x1>
    12d8:	90 81       	ld	r25, Z
    12da:	80 91 91 03 	lds	r24, 0x0391	; 0x800391 <_ZL9selectPin>
    12de:	89 2b       	or	r24, r25
    12e0:	80 83       	st	Z, r24
    12e2:	78 94       	sei
    12e4:	08 95       	ret

000012e6 <_ZL7xferSPIh>:
    12e6:	8e bd       	out	0x2e, r24	; 46
    12e8:	0d b4       	in	r0, 0x2d	; 45
    12ea:	07 fe       	sbrs	r0, 7
    12ec:	fd cf       	rjmp	.-6      	; 0x12e8 <_ZL7xferSPIh+0x2>
    12ee:	08 95       	ret

000012f0 <_ZL7writeOphhh>:
    12f0:	1f 93       	push	r17
    12f2:	cf 93       	push	r28
    12f4:	df 93       	push	r29
    12f6:	18 2f       	mov	r17, r24
    12f8:	c6 2f       	mov	r28, r22
    12fa:	d4 2f       	mov	r29, r20
    12fc:	dd df       	rcall	.-70     	; 0x12b8 <_ZL10enableChipv>
    12fe:	8c 2f       	mov	r24, r28
    1300:	8f 71       	andi	r24, 0x1F	; 31
    1302:	81 2b       	or	r24, r17
    1304:	f0 df       	rcall	.-32     	; 0x12e6 <_ZL7xferSPIh>
    1306:	8d 2f       	mov	r24, r29
    1308:	ee df       	rcall	.-36     	; 0x12e6 <_ZL7xferSPIh>
    130a:	e2 df       	rcall	.-60     	; 0x12d0 <_ZL11disableChipv>
    130c:	df 91       	pop	r29
    130e:	cf 91       	pop	r28
    1310:	1f 91       	pop	r17
    1312:	08 95       	ret

00001314 <_ZL7readBufjPh>:
    1314:	0f 93       	push	r16
    1316:	1f 93       	push	r17
    1318:	cf 93       	push	r28
    131a:	df 93       	push	r29
    131c:	ec 01       	movw	r28, r24
    131e:	8b 01       	movw	r16, r22
    1320:	cb df       	rcall	.-106    	; 0x12b8 <_ZL10enableChipv>
    1322:	20 97       	sbiw	r28, 0x00	; 0
    1324:	c1 f0       	breq	.+48     	; 0x1356 <_ZL7readBufjPh+0x42>
    1326:	8a e3       	ldi	r24, 0x3A	; 58
    1328:	de df       	rcall	.-68     	; 0x12e6 <_ZL7xferSPIh>
    132a:	1e bc       	out	0x2e, r1	; 46
    132c:	21 97       	sbiw	r28, 0x01	; 1
    132e:	69 f0       	breq	.+26     	; 0x134a <_ZL7readBufjPh+0x36>
    1330:	f8 01       	movw	r30, r16
    1332:	0c 0f       	add	r16, r28
    1334:	1d 1f       	adc	r17, r29
    1336:	98 01       	movw	r18, r16
    1338:	0d b4       	in	r0, 0x2d	; 45
    133a:	07 fe       	sbrs	r0, 7
    133c:	fd cf       	rjmp	.-6      	; 0x1338 <_ZL7readBufjPh+0x24>
    133e:	8e b5       	in	r24, 0x2e	; 46
    1340:	1e bc       	out	0x2e, r1	; 46
    1342:	81 93       	st	Z+, r24
    1344:	e2 17       	cp	r30, r18
    1346:	f3 07       	cpc	r31, r19
    1348:	b9 f7       	brne	.-18     	; 0x1338 <_ZL7readBufjPh+0x24>
    134a:	0d b4       	in	r0, 0x2d	; 45
    134c:	07 fe       	sbrs	r0, 7
    134e:	fd cf       	rjmp	.-6      	; 0x134a <_ZL7readBufjPh+0x36>
    1350:	8e b5       	in	r24, 0x2e	; 46
    1352:	f8 01       	movw	r30, r16
    1354:	80 83       	st	Z, r24
    1356:	bc df       	rcall	.-136    	; 0x12d0 <_ZL11disableChipv>
    1358:	df 91       	pop	r29
    135a:	cf 91       	pop	r28
    135c:	1f 91       	pop	r17
    135e:	0f 91       	pop	r16
    1360:	08 95       	ret

00001362 <_ZL8writeBufjPKh>:
    1362:	0f 93       	push	r16
    1364:	1f 93       	push	r17
    1366:	cf 93       	push	r28
    1368:	df 93       	push	r29
    136a:	ec 01       	movw	r28, r24
    136c:	8b 01       	movw	r16, r22
    136e:	a4 df       	rcall	.-184    	; 0x12b8 <_ZL10enableChipv>
    1370:	20 97       	sbiw	r28, 0x00	; 0
    1372:	c1 f0       	breq	.+48     	; 0x13a4 <_ZL8writeBufjPKh+0x42>
    1374:	8a e7       	ldi	r24, 0x7A	; 122
    1376:	b7 df       	rcall	.-146    	; 0x12e6 <_ZL7xferSPIh>
    1378:	f8 01       	movw	r30, r16
    137a:	31 96       	adiw	r30, 0x01	; 1
    137c:	d8 01       	movw	r26, r16
    137e:	8c 91       	ld	r24, X
    1380:	8e bd       	out	0x2e, r24	; 46
    1382:	c1 30       	cpi	r28, 0x01	; 1
    1384:	d1 05       	cpc	r29, r1
    1386:	59 f0       	breq	.+22     	; 0x139e <_ZL8writeBufjPKh+0x3c>
    1388:	b8 01       	movw	r22, r16
    138a:	6c 0f       	add	r22, r28
    138c:	7d 1f       	adc	r23, r29
    138e:	91 91       	ld	r25, Z+
    1390:	0d b4       	in	r0, 0x2d	; 45
    1392:	07 fe       	sbrs	r0, 7
    1394:	fd cf       	rjmp	.-6      	; 0x1390 <_ZL8writeBufjPKh+0x2e>
    1396:	9e bd       	out	0x2e, r25	; 46
    1398:	e6 17       	cp	r30, r22
    139a:	f7 07       	cpc	r31, r23
    139c:	c1 f7       	brne	.-16     	; 0x138e <_ZL8writeBufjPKh+0x2c>
    139e:	0d b4       	in	r0, 0x2d	; 45
    13a0:	07 fe       	sbrs	r0, 7
    13a2:	fd cf       	rjmp	.-6      	; 0x139e <_ZL8writeBufjPKh+0x3c>
    13a4:	95 df       	rcall	.-214    	; 0x12d0 <_ZL11disableChipv>
    13a6:	df 91       	pop	r29
    13a8:	cf 91       	pop	r28
    13aa:	1f 91       	pop	r17
    13ac:	0f 91       	pop	r16
    13ae:	08 95       	ret

000013b0 <_ZL7SetBankh>:
    13b0:	1f 93       	push	r17
    13b2:	cf 93       	push	r28
    13b4:	df 93       	push	r29
    13b6:	18 2f       	mov	r17, r24
    13b8:	10 76       	andi	r17, 0x60	; 96
    13ba:	c1 2f       	mov	r28, r17
    13bc:	d0 e0       	ldi	r29, 0x00	; 0
    13be:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <_ZL12Enc28j60Bank>
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	c8 17       	cp	r28, r24
    13c6:	d9 07       	cpc	r29, r25
    13c8:	a1 f0       	breq	.+40     	; 0x13f2 <_ZL7SetBankh+0x42>
    13ca:	43 e0       	ldi	r20, 0x03	; 3
    13cc:	6f e1       	ldi	r22, 0x1F	; 31
    13ce:	80 ea       	ldi	r24, 0xA0	; 160
    13d0:	8f df       	rcall	.-226    	; 0x12f0 <_ZL7writeOphhh>
    13d2:	10 93 94 03 	sts	0x0394, r17	; 0x800394 <_ZL12Enc28j60Bank>
    13d6:	ae 01       	movw	r20, r28
    13d8:	55 95       	asr	r21
    13da:	47 95       	ror	r20
    13dc:	55 95       	asr	r21
    13de:	47 95       	ror	r20
    13e0:	55 95       	asr	r21
    13e2:	47 95       	ror	r20
    13e4:	55 95       	asr	r21
    13e6:	47 95       	ror	r20
    13e8:	55 95       	asr	r21
    13ea:	47 95       	ror	r20
    13ec:	6f e1       	ldi	r22, 0x1F	; 31
    13ee:	80 e8       	ldi	r24, 0x80	; 128
    13f0:	7f df       	rcall	.-258    	; 0x12f0 <_ZL7writeOphhh>
    13f2:	df 91       	pop	r29
    13f4:	cf 91       	pop	r28
    13f6:	1f 91       	pop	r17
    13f8:	08 95       	ret

000013fa <_ZL11readRegByteh>:
    13fa:	cf 93       	push	r28
    13fc:	c8 2f       	mov	r28, r24
    13fe:	d8 df       	rcall	.-80     	; 0x13b0 <_ZL7SetBankh>
    1400:	5b df       	rcall	.-330    	; 0x12b8 <_ZL10enableChipv>
    1402:	8c 2f       	mov	r24, r28
    1404:	8f 71       	andi	r24, 0x1F	; 31
    1406:	6f df       	rcall	.-290    	; 0x12e6 <_ZL7xferSPIh>
    1408:	80 e0       	ldi	r24, 0x00	; 0
    140a:	6d df       	rcall	.-294    	; 0x12e6 <_ZL7xferSPIh>
    140c:	cc 23       	and	r28, r28
    140e:	14 f4       	brge	.+4      	; 0x1414 <_ZL11readRegByteh+0x1a>
    1410:	80 e0       	ldi	r24, 0x00	; 0
    1412:	69 df       	rcall	.-302    	; 0x12e6 <_ZL7xferSPIh>
    1414:	ce b5       	in	r28, 0x2e	; 46
    1416:	5c df       	rcall	.-328    	; 0x12d0 <_ZL11disableChipv>
    1418:	8c 2f       	mov	r24, r28
    141a:	cf 91       	pop	r28
    141c:	08 95       	ret

0000141e <_ZL12writeRegBytehh>:
    141e:	cf 93       	push	r28
    1420:	df 93       	push	r29
    1422:	c8 2f       	mov	r28, r24
    1424:	d6 2f       	mov	r29, r22
    1426:	c4 df       	rcall	.-120    	; 0x13b0 <_ZL7SetBankh>
    1428:	4d 2f       	mov	r20, r29
    142a:	6c 2f       	mov	r22, r28
    142c:	80 e4       	ldi	r24, 0x40	; 64
    142e:	60 df       	rcall	.-320    	; 0x12f0 <_ZL7writeOphhh>
    1430:	df 91       	pop	r29
    1432:	cf 91       	pop	r28
    1434:	08 95       	ret

00001436 <_ZL8writeReghj>:
    1436:	cf 93       	push	r28
    1438:	df 93       	push	r29
    143a:	c8 2f       	mov	r28, r24
    143c:	d7 2f       	mov	r29, r23
    143e:	ef df       	rcall	.-34     	; 0x141e <_ZL12writeRegBytehh>
    1440:	6d 2f       	mov	r22, r29
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	8c 0f       	add	r24, r28
    1446:	eb df       	rcall	.-42     	; 0x141e <_ZL12writeRegBytehh>
    1448:	df 91       	pop	r29
    144a:	cf 91       	pop	r28
    144c:	08 95       	ret

0000144e <_ZL8writePhyhj>:
    144e:	cf 93       	push	r28
    1450:	df 93       	push	r29
    1452:	eb 01       	movw	r28, r22
    1454:	68 2f       	mov	r22, r24
    1456:	84 ed       	ldi	r24, 0xD4	; 212
    1458:	e2 df       	rcall	.-60     	; 0x141e <_ZL12writeRegBytehh>
    145a:	be 01       	movw	r22, r28
    145c:	86 ed       	ldi	r24, 0xD6	; 214
    145e:	eb df       	rcall	.-42     	; 0x1436 <_ZL8writeReghj>
    1460:	8a ee       	ldi	r24, 0xEA	; 234
    1462:	cb df       	rcall	.-106    	; 0x13fa <_ZL11readRegByteh>
    1464:	80 fd       	sbrc	r24, 0
    1466:	fc cf       	rjmp	.-8      	; 0x1460 <_ZL8writePhyhj+0x12>
    1468:	df 91       	pop	r29
    146a:	cf 91       	pop	r28
    146c:	08 95       	ret

0000146e <_ZN8ENC28J607initSPIEv>:
    146e:	20 9a       	sbi	0x04, 0	; 4
    1470:	28 9a       	sbi	0x05, 0	; 5
    1472:	22 9a       	sbi	0x04, 2	; 4
    1474:	21 9a       	sbi	0x04, 1	; 4
    1476:	23 98       	cbi	0x04, 3	; 4
    1478:	2a 9a       	sbi	0x05, 2	; 5
    147a:	2a 98       	cbi	0x05, 2	; 5
    147c:	29 98       	cbi	0x05, 1	; 5
    147e:	80 e5       	ldi	r24, 0x50	; 80
    1480:	8c bd       	out	0x2c, r24	; 44
    1482:	8d b5       	in	r24, 0x2d	; 45
    1484:	81 60       	ori	r24, 0x01	; 1
    1486:	8d bd       	out	0x2d, r24	; 45
    1488:	08 95       	ret

0000148a <_ZN8ENC28J6010initializeEjPKhRVhS3_h>:
    148a:	cf 92       	push	r12
    148c:	df 92       	push	r13
    148e:	ef 92       	push	r14
    1490:	ff 92       	push	r15
    1492:	0f 93       	push	r16
    1494:	cf 93       	push	r28
    1496:	df 93       	push	r29
    1498:	7b 01       	movw	r14, r22
    149a:	ea 01       	movw	r28, r20
    149c:	69 01       	movw	r12, r18
    149e:	90 93 97 03 	sts	0x0397, r25	; 0x800397 <_ZN8ENC28J6010bufferSizeE+0x1>
    14a2:	80 93 96 03 	sts	0x0396, r24	; 0x800396 <_ZN8ENC28J6010bufferSizeE>
    14a6:	0c b4       	in	r0, 0x2c	; 44
    14a8:	06 fe       	sbrs	r0, 6
    14aa:	e1 df       	rcall	.-62     	; 0x146e <_ZN8ENC28J607initSPIEv>
    14ac:	00 93 91 03 	sts	0x0391, r16	; 0x800391 <_ZL9selectPin>
    14b0:	d0 92 93 03 	sts	0x0393, r13	; 0x800393 <_ZL10selectPort+0x1>
    14b4:	c0 92 92 03 	sts	0x0392, r12	; 0x800392 <_ZL10selectPort>
    14b8:	88 81       	ld	r24, Y
    14ba:	08 2b       	or	r16, r24
    14bc:	08 83       	st	Y, r16
    14be:	08 df       	rcall	.-496    	; 0x12d0 <_ZL11disableChipv>
    14c0:	4f ef       	ldi	r20, 0xFF	; 255
    14c2:	60 e0       	ldi	r22, 0x00	; 0
    14c4:	8f ef       	ldi	r24, 0xFF	; 255
    14c6:	14 df       	rcall	.-472    	; 0x12f0 <_ZL7writeOphhh>
    14c8:	83 ef       	ldi	r24, 0xF3	; 243
    14ca:	91 e0       	ldi	r25, 0x01	; 1
    14cc:	01 97       	sbiw	r24, 0x01	; 1
    14ce:	f1 f7       	brne	.-4      	; 0x14cc <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0x42>
    14d0:	00 c0       	rjmp	.+0      	; 0x14d2 <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0x48>
    14d2:	00 00       	nop
    14d4:	f1 de       	rcall	.-542    	; 0x12b8 <_ZL10enableChipv>
    14d6:	8d e1       	ldi	r24, 0x1D	; 29
    14d8:	06 df       	rcall	.-500    	; 0x12e6 <_ZL7xferSPIh>
    14da:	80 e0       	ldi	r24, 0x00	; 0
    14dc:	04 df       	rcall	.-504    	; 0x12e6 <_ZL7xferSPIh>
    14de:	ce b5       	in	r28, 0x2e	; 46
    14e0:	f7 de       	rcall	.-530    	; 0x12d0 <_ZL11disableChipv>
    14e2:	cc 23       	and	r28, r28
    14e4:	b9 f3       	breq	.-18     	; 0x14d4 <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0x4a>
    14e6:	60 e0       	ldi	r22, 0x00	; 0
    14e8:	70 e0       	ldi	r23, 0x00	; 0
    14ea:	88 e0       	ldi	r24, 0x08	; 8
    14ec:	a4 df       	rcall	.-184    	; 0x1436 <_ZL8writeReghj>
    14ee:	60 e0       	ldi	r22, 0x00	; 0
    14f0:	70 e0       	ldi	r23, 0x00	; 0
    14f2:	8c e0       	ldi	r24, 0x0C	; 12
    14f4:	a0 df       	rcall	.-192    	; 0x1436 <_ZL8writeReghj>
    14f6:	6f ef       	ldi	r22, 0xFF	; 255
    14f8:	7b e0       	ldi	r23, 0x0B	; 11
    14fa:	8a e0       	ldi	r24, 0x0A	; 10
    14fc:	9c df       	rcall	.-200    	; 0x1436 <_ZL8writeReghj>
    14fe:	60 e0       	ldi	r22, 0x00	; 0
    1500:	7c e0       	ldi	r23, 0x0C	; 12
    1502:	84 e0       	ldi	r24, 0x04	; 4
    1504:	98 df       	rcall	.-208    	; 0x1436 <_ZL8writeReghj>
    1506:	6f ef       	ldi	r22, 0xFF	; 255
    1508:	71 e1       	ldi	r23, 0x11	; 17
    150a:	86 e0       	ldi	r24, 0x06	; 6
    150c:	94 df       	rcall	.-216    	; 0x1436 <_ZL8writeReghj>
    150e:	66 e7       	ldi	r22, 0x76	; 118
    1510:	74 e0       	ldi	r23, 0x04	; 4
    1512:	84 e1       	ldi	r24, 0x14	; 20
    1514:	9c df       	rcall	.-200    	; 0x144e <_ZL8writePhyhj>
    1516:	61 eb       	ldi	r22, 0xB1	; 177
    1518:	88 e3       	ldi	r24, 0x38	; 56
    151a:	81 df       	rcall	.-254    	; 0x141e <_ZL12writeRegBytehh>
    151c:	6f e3       	ldi	r22, 0x3F	; 63
    151e:	70 e3       	ldi	r23, 0x30	; 48
    1520:	88 e2       	ldi	r24, 0x28	; 40
    1522:	89 df       	rcall	.-238    	; 0x1436 <_ZL8writeReghj>
    1524:	69 ef       	ldi	r22, 0xF9	; 249
    1526:	77 ef       	ldi	r23, 0xF7	; 247
    1528:	80 e3       	ldi	r24, 0x30	; 48
    152a:	85 df       	rcall	.-246    	; 0x1436 <_ZL8writeReghj>
    152c:	61 e0       	ldi	r22, 0x01	; 1
    152e:	80 ec       	ldi	r24, 0xC0	; 192
    1530:	76 df       	rcall	.-276    	; 0x141e <_ZL12writeRegBytehh>
    1532:	42 e3       	ldi	r20, 0x32	; 50
    1534:	62 ec       	ldi	r22, 0xC2	; 194
    1536:	80 e8       	ldi	r24, 0x80	; 128
    1538:	db de       	rcall	.-586    	; 0x12f0 <_ZL7writeOphhh>
    153a:	62 e1       	ldi	r22, 0x12	; 18
    153c:	7c e0       	ldi	r23, 0x0C	; 12
    153e:	86 ec       	ldi	r24, 0xC6	; 198
    1540:	7a df       	rcall	.-268    	; 0x1436 <_ZL8writeReghj>
    1542:	62 e1       	ldi	r22, 0x12	; 18
    1544:	84 ec       	ldi	r24, 0xC4	; 196
    1546:	6b df       	rcall	.-298    	; 0x141e <_ZL12writeRegBytehh>
    1548:	6c ed       	ldi	r22, 0xDC	; 220
    154a:	75 e0       	ldi	r23, 0x05	; 5
    154c:	8a ec       	ldi	r24, 0xCA	; 202
    154e:	73 df       	rcall	.-282    	; 0x1436 <_ZL8writeReghj>
    1550:	f7 01       	movw	r30, r14
    1552:	60 81       	ld	r22, Z
    1554:	84 ee       	ldi	r24, 0xE4	; 228
    1556:	63 df       	rcall	.-314    	; 0x141e <_ZL12writeRegBytehh>
    1558:	f7 01       	movw	r30, r14
    155a:	61 81       	ldd	r22, Z+1	; 0x01
    155c:	85 ee       	ldi	r24, 0xE5	; 229
    155e:	5f df       	rcall	.-322    	; 0x141e <_ZL12writeRegBytehh>
    1560:	f7 01       	movw	r30, r14
    1562:	62 81       	ldd	r22, Z+2	; 0x02
    1564:	82 ee       	ldi	r24, 0xE2	; 226
    1566:	5b df       	rcall	.-330    	; 0x141e <_ZL12writeRegBytehh>
    1568:	f7 01       	movw	r30, r14
    156a:	63 81       	ldd	r22, Z+3	; 0x03
    156c:	83 ee       	ldi	r24, 0xE3	; 227
    156e:	57 df       	rcall	.-338    	; 0x141e <_ZL12writeRegBytehh>
    1570:	f7 01       	movw	r30, r14
    1572:	64 81       	ldd	r22, Z+4	; 0x04
    1574:	80 ee       	ldi	r24, 0xE0	; 224
    1576:	53 df       	rcall	.-346    	; 0x141e <_ZL12writeRegBytehh>
    1578:	f7 01       	movw	r30, r14
    157a:	65 81       	ldd	r22, Z+5	; 0x05
    157c:	81 ee       	ldi	r24, 0xE1	; 225
    157e:	4f df       	rcall	.-354    	; 0x141e <_ZL12writeRegBytehh>
    1580:	60 e0       	ldi	r22, 0x00	; 0
    1582:	71 e0       	ldi	r23, 0x01	; 1
    1584:	80 e1       	ldi	r24, 0x10	; 16
    1586:	63 df       	rcall	.-314    	; 0x144e <_ZL8writePhyhj>
    1588:	8f e1       	ldi	r24, 0x1F	; 31
    158a:	12 df       	rcall	.-476    	; 0x13b0 <_ZL7SetBankh>
    158c:	40 ec       	ldi	r20, 0xC0	; 192
    158e:	6b e1       	ldi	r22, 0x1B	; 27
    1590:	80 e8       	ldi	r24, 0x80	; 128
    1592:	ae de       	rcall	.-676    	; 0x12f0 <_ZL7writeOphhh>
    1594:	44 e0       	ldi	r20, 0x04	; 4
    1596:	6f e1       	ldi	r22, 0x1F	; 31
    1598:	80 e8       	ldi	r24, 0x80	; 128
    159a:	aa de       	rcall	.-684    	; 0x12f0 <_ZL7writeOphhh>
    159c:	82 e7       	ldi	r24, 0x72	; 114
    159e:	2d df       	rcall	.-422    	; 0x13fa <_ZL11readRegByteh>
    15a0:	86 30       	cpi	r24, 0x06	; 6
    15a2:	08 f0       	brcs	.+2      	; 0x15a6 <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0x11c>
    15a4:	8f 5f       	subi	r24, 0xFF	; 255
    15a6:	df 91       	pop	r29
    15a8:	cf 91       	pop	r28
    15aa:	0f 91       	pop	r16
    15ac:	ff 90       	pop	r15
    15ae:	ef 90       	pop	r14
    15b0:	df 90       	pop	r13
    15b2:	cf 90       	pop	r12
    15b4:	08 95       	ret

000015b6 <_ZN8ENC28J608isLinkUpEv>:
    15b6:	61 e1       	ldi	r22, 0x11	; 17
    15b8:	84 ed       	ldi	r24, 0xD4	; 212
    15ba:	31 df       	rcall	.-414    	; 0x141e <_ZL12writeRegBytehh>
    15bc:	61 e0       	ldi	r22, 0x01	; 1
    15be:	82 ed       	ldi	r24, 0xD2	; 210
    15c0:	2e df       	rcall	.-420    	; 0x141e <_ZL12writeRegBytehh>
    15c2:	8a ee       	ldi	r24, 0xEA	; 234
    15c4:	1a df       	rcall	.-460    	; 0x13fa <_ZL11readRegByteh>
    15c6:	80 fd       	sbrc	r24, 0
    15c8:	fc cf       	rjmp	.-8      	; 0x15c2 <_ZN8ENC28J608isLinkUpEv+0xc>
    15ca:	60 e0       	ldi	r22, 0x00	; 0
    15cc:	82 ed       	ldi	r24, 0xD2	; 210
    15ce:	27 df       	rcall	.-434    	; 0x141e <_ZL12writeRegBytehh>
    15d0:	89 ed       	ldi	r24, 0xD9	; 217
    15d2:	13 df       	rcall	.-474    	; 0x13fa <_ZL11readRegByteh>
    15d4:	82 fb       	bst	r24, 2
    15d6:	88 27       	eor	r24, r24
    15d8:	80 f9       	bld	r24, 0
    15da:	08 95       	ret

000015dc <_ZN8ENC28J6010packetSendEj>:
    15dc:	cf 93       	push	r28
    15de:	df 93       	push	r29
    15e0:	ec 01       	movw	r28, r24
    15e2:	40 e8       	ldi	r20, 0x80	; 128
    15e4:	6f e1       	ldi	r22, 0x1F	; 31
    15e6:	80 e8       	ldi	r24, 0x80	; 128
    15e8:	83 de       	rcall	.-762    	; 0x12f0 <_ZL7writeOphhh>
    15ea:	40 e8       	ldi	r20, 0x80	; 128
    15ec:	6f e1       	ldi	r22, 0x1F	; 31
    15ee:	80 ea       	ldi	r24, 0xA0	; 160
    15f0:	7f de       	rcall	.-770    	; 0x12f0 <_ZL7writeOphhh>
    15f2:	4a e0       	ldi	r20, 0x0A	; 10
    15f4:	6c e1       	ldi	r22, 0x1C	; 28
    15f6:	80 ea       	ldi	r24, 0xA0	; 160
    15f8:	7b de       	rcall	.-778    	; 0x12f0 <_ZL7writeOphhh>
    15fa:	60 e0       	ldi	r22, 0x00	; 0
    15fc:	7c e0       	ldi	r23, 0x0C	; 12
    15fe:	82 e0       	ldi	r24, 0x02	; 2
    1600:	1a df       	rcall	.-460    	; 0x1436 <_ZL8writeReghj>
    1602:	be 01       	movw	r22, r28
    1604:	74 5f       	subi	r23, 0xF4	; 244
    1606:	86 e0       	ldi	r24, 0x06	; 6
    1608:	16 df       	rcall	.-468    	; 0x1436 <_ZL8writeReghj>
    160a:	40 e0       	ldi	r20, 0x00	; 0
    160c:	60 e0       	ldi	r22, 0x00	; 0
    160e:	8a e7       	ldi	r24, 0x7A	; 122
    1610:	6f de       	rcall	.-802    	; 0x12f0 <_ZL7writeOphhh>
    1612:	68 e9       	ldi	r22, 0x98	; 152
    1614:	73 e0       	ldi	r23, 0x03	; 3
    1616:	ce 01       	movw	r24, r28
    1618:	a4 de       	rcall	.-696    	; 0x1362 <_ZL8writeBufjPKh>
    161a:	48 e0       	ldi	r20, 0x08	; 8
    161c:	6f e1       	ldi	r22, 0x1F	; 31
    161e:	80 e8       	ldi	r24, 0x80	; 128
    1620:	67 de       	rcall	.-818    	; 0x12f0 <_ZL7writeOphhh>
    1622:	c0 e0       	ldi	r28, 0x00	; 0
    1624:	d0 e0       	ldi	r29, 0x00	; 0
    1626:	8c e1       	ldi	r24, 0x1C	; 28
    1628:	e8 de       	rcall	.-560    	; 0x13fa <_ZL11readRegByteh>
    162a:	8a 70       	andi	r24, 0x0A	; 10
    162c:	31 f4       	brne	.+12     	; 0x163a <_ZN8ENC28J6010packetSendEj+0x5e>
    162e:	21 96       	adiw	r28, 0x01	; 1
    1630:	c8 3e       	cpi	r28, 0xE8	; 232
    1632:	83 e0       	ldi	r24, 0x03	; 3
    1634:	d8 07       	cpc	r29, r24
    1636:	b9 f7       	brne	.-18     	; 0x1626 <_ZN8ENC28J6010packetSendEj+0x4a>
    1638:	0c c0       	rjmp	.+24     	; 0x1652 <_ZN8ENC28J6010packetSendEj+0x76>
    163a:	8c e1       	ldi	r24, 0x1C	; 28
    163c:	de de       	rcall	.-580    	; 0x13fa <_ZL11readRegByteh>
    163e:	81 fd       	sbrc	r24, 1
    1640:	03 c0       	rjmp	.+6      	; 0x1648 <_ZN8ENC28J6010packetSendEj+0x6c>
    1642:	c8 3e       	cpi	r28, 0xE8	; 232
    1644:	d3 40       	sbci	r29, 0x03	; 3
    1646:	40 f0       	brcs	.+16     	; 0x1658 <_ZN8ENC28J6010packetSendEj+0x7c>
    1648:	48 e0       	ldi	r20, 0x08	; 8
    164a:	6f e1       	ldi	r22, 0x1F	; 31
    164c:	80 ea       	ldi	r24, 0xA0	; 160
    164e:	50 de       	rcall	.-864    	; 0x12f0 <_ZL7writeOphhh>
    1650:	03 c0       	rjmp	.+6      	; 0x1658 <_ZN8ENC28J6010packetSendEj+0x7c>
    1652:	8c e1       	ldi	r24, 0x1C	; 28
    1654:	d2 de       	rcall	.-604    	; 0x13fa <_ZL11readRegByteh>
    1656:	f8 cf       	rjmp	.-16     	; 0x1648 <_ZN8ENC28J6010packetSendEj+0x6c>
    1658:	df 91       	pop	r29
    165a:	cf 91       	pop	r28
    165c:	08 95       	ret

0000165e <_ZN8ENC28J6013packetReceiveEv>:
    165e:	0f 93       	push	r16
    1660:	1f 93       	push	r17
    1662:	cf 93       	push	r28
    1664:	df 93       	push	r29
    1666:	00 d0       	rcall	.+0      	; 0x1668 <_ZN8ENC28J6013packetReceiveEv+0xa>
    1668:	00 d0       	rcall	.+0      	; 0x166a <_ZN8ENC28J6013packetReceiveEv+0xc>
    166a:	cd b7       	in	r28, 0x3d	; 61
    166c:	de b7       	in	r29, 0x3e	; 62
    166e:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <_ZZN8ENC28J6013packetReceiveEvE16unreleasedPacket>
    1672:	88 23       	and	r24, r24
    1674:	91 f0       	breq	.+36     	; 0x169a <_ZN8ENC28J6013packetReceiveEv+0x3c>
    1676:	60 91 8e 03 	lds	r22, 0x038E	; 0x80038e <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr>
    167a:	70 91 8f 03 	lds	r23, 0x038F	; 0x80038f <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr+0x1>
    167e:	61 15       	cp	r22, r1
    1680:	71 05       	cpc	r23, r1
    1682:	29 f4       	brne	.+10     	; 0x168e <_ZN8ENC28J6013packetReceiveEv+0x30>
    1684:	6f ef       	ldi	r22, 0xFF	; 255
    1686:	7b e0       	ldi	r23, 0x0B	; 11
    1688:	8c e0       	ldi	r24, 0x0C	; 12
    168a:	d5 de       	rcall	.-598    	; 0x1436 <_ZL8writeReghj>
    168c:	04 c0       	rjmp	.+8      	; 0x1696 <_ZN8ENC28J6013packetReceiveEv+0x38>
    168e:	61 50       	subi	r22, 0x01	; 1
    1690:	71 09       	sbc	r23, r1
    1692:	8c e0       	ldi	r24, 0x0C	; 12
    1694:	d0 de       	rcall	.-608    	; 0x1436 <_ZL8writeReghj>
    1696:	10 92 90 03 	sts	0x0390, r1	; 0x800390 <_ZZN8ENC28J6013packetReceiveEvE16unreleasedPacket>
    169a:	89 e3       	ldi	r24, 0x39	; 57
    169c:	ae de       	rcall	.-676    	; 0x13fa <_ZL11readRegByteh>
    169e:	88 23       	and	r24, r24
    16a0:	a9 f1       	breq	.+106    	; 0x170c <_ZN8ENC28J6013packetReceiveEv+0xae>
    16a2:	60 91 8e 03 	lds	r22, 0x038E	; 0x80038e <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr>
    16a6:	70 91 8f 03 	lds	r23, 0x038F	; 0x80038f <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr+0x1>
    16aa:	80 e0       	ldi	r24, 0x00	; 0
    16ac:	c4 de       	rcall	.-632    	; 0x1436 <_ZL8writeReghj>
    16ae:	be 01       	movw	r22, r28
    16b0:	6f 5f       	subi	r22, 0xFF	; 255
    16b2:	7f 4f       	sbci	r23, 0xFF	; 255
    16b4:	86 e0       	ldi	r24, 0x06	; 6
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	2d de       	rcall	.-934    	; 0x1314 <_ZL7readBufjPh>
    16ba:	89 81       	ldd	r24, Y+1	; 0x01
    16bc:	9a 81       	ldd	r25, Y+2	; 0x02
    16be:	90 93 8f 03 	sts	0x038F, r25	; 0x80038f <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr+0x1>
    16c2:	80 93 8e 03 	sts	0x038E, r24	; 0x80038e <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr>
    16c6:	8d 81       	ldd	r24, Y+5	; 0x05
    16c8:	87 ff       	sbrs	r24, 7
    16ca:	12 c0       	rjmp	.+36     	; 0x16f0 <_ZN8ENC28J6013packetReceiveEv+0x92>
    16cc:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <_ZN8ENC28J6010bufferSizeE>
    16d0:	90 91 97 03 	lds	r25, 0x0397	; 0x800397 <_ZN8ENC28J6010bufferSizeE+0x1>
    16d4:	01 97       	sbiw	r24, 0x01	; 1
    16d6:	0b 81       	ldd	r16, Y+3	; 0x03
    16d8:	1c 81       	ldd	r17, Y+4	; 0x04
    16da:	04 50       	subi	r16, 0x04	; 4
    16dc:	11 09       	sbc	r17, r1
    16de:	80 17       	cp	r24, r16
    16e0:	91 07       	cpc	r25, r17
    16e2:	08 f4       	brcc	.+2      	; 0x16e6 <_ZN8ENC28J6013packetReceiveEv+0x88>
    16e4:	8c 01       	movw	r16, r24
    16e6:	68 e9       	ldi	r22, 0x98	; 152
    16e8:	73 e0       	ldi	r23, 0x03	; 3
    16ea:	c8 01       	movw	r24, r16
    16ec:	13 de       	rcall	.-986    	; 0x1314 <_ZL7readBufjPh>
    16ee:	02 c0       	rjmp	.+4      	; 0x16f4 <_ZN8ENC28J6013packetReceiveEv+0x96>
    16f0:	00 e0       	ldi	r16, 0x00	; 0
    16f2:	10 e0       	ldi	r17, 0x00	; 0
    16f4:	f8 01       	movw	r30, r16
    16f6:	e8 56       	subi	r30, 0x68	; 104
    16f8:	fc 4f       	sbci	r31, 0xFC	; 252
    16fa:	10 82       	st	Z, r1
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <_ZZN8ENC28J6013packetReceiveEvE16unreleasedPacket>
    1702:	40 e4       	ldi	r20, 0x40	; 64
    1704:	6e e1       	ldi	r22, 0x1E	; 30
    1706:	80 e8       	ldi	r24, 0x80	; 128
    1708:	f3 dd       	rcall	.-1050   	; 0x12f0 <_ZL7writeOphhh>
    170a:	02 c0       	rjmp	.+4      	; 0x1710 <_ZN8ENC28J6013packetReceiveEv+0xb2>
    170c:	00 e0       	ldi	r16, 0x00	; 0
    170e:	10 e0       	ldi	r17, 0x00	; 0
    1710:	c8 01       	movw	r24, r16
    1712:	26 96       	adiw	r28, 0x06	; 6
    1714:	0f b6       	in	r0, 0x3f	; 63
    1716:	f8 94       	cli
    1718:	de bf       	out	0x3e, r29	; 62
    171a:	0f be       	out	0x3f, r0	; 63
    171c:	cd bf       	out	0x3d, r28	; 61
    171e:	df 91       	pop	r29
    1720:	cf 91       	pop	r28
    1722:	1f 91       	pop	r17
    1724:	0f 91       	pop	r16
    1726:	08 95       	ret

00001728 <_ZN8ENC28J6015enableBroadcastEb>:
}

void ENC28J60::enableBroadcast (bool temporary) {
    1728:	cf 93       	push	r28
    172a:	c8 2f       	mov	r28, r24
    writeRegByte(ERXFCON, readRegByte(ERXFCON) | ERXFCON_BCEN);
    172c:	88 e3       	ldi	r24, 0x38	; 56
    172e:	65 de       	rcall	.-822    	; 0x13fa <_ZL11readRegByteh>
    1730:	68 2f       	mov	r22, r24
    1732:	61 60       	ori	r22, 0x01	; 1
    1734:	88 e3       	ldi	r24, 0x38	; 56
    1736:	73 de       	rcall	.-794    	; 0x141e <_ZL12writeRegBytehh>
    if(!temporary)
    1738:	c1 11       	cpse	r28, r1
    173a:	03 c0       	rjmp	.+6      	; 0x1742 <_ZN8ENC28J6015enableBroadcastEb+0x1a>
        broadcast_enabled = true;
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	80 93 95 03 	sts	0x0395, r24	; 0x800395 <_ZN8ENC28J6017broadcast_enabledE>
}
    1742:	cf 91       	pop	r28
    1744:	08 95       	ret

00001746 <_ZN8ENC28J6016disableBroadcastEb>:

void ENC28J60::disableBroadcast (bool temporary) {
    if(!temporary)
    1746:	81 11       	cpse	r24, r1
    1748:	03 c0       	rjmp	.+6      	; 0x1750 <_ZN8ENC28J6016disableBroadcastEb+0xa>
        broadcast_enabled = false;
    174a:	10 92 95 03 	sts	0x0395, r1	; 0x800395 <_ZN8ENC28J6017broadcast_enabledE>
    174e:	04 c0       	rjmp	.+8      	; 0x1758 <_ZN8ENC28J6016disableBroadcastEb+0x12>
    if(!broadcast_enabled)
    1750:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <_ZN8ENC28J6017broadcast_enabledE>
    1754:	81 11       	cpse	r24, r1
    1756:	06 c0       	rjmp	.+12     	; 0x1764 <_ZN8ENC28J6016disableBroadcastEb+0x1e>
        writeRegByte(ERXFCON, readRegByte(ERXFCON) & ~ERXFCON_BCEN);
    1758:	88 e3       	ldi	r24, 0x38	; 56
    175a:	4f de       	rcall	.-866    	; 0x13fa <_ZL11readRegByteh>
    175c:	68 2f       	mov	r22, r24
    175e:	6e 7f       	andi	r22, 0xFE	; 254
    1760:	88 e3       	ldi	r24, 0x38	; 56
    1762:	5d ce       	rjmp	.-838    	; 0x141e <_ZL12writeRegBytehh>
    1764:	08 95       	ret

00001766 <_ZN9EtherCard5beginEPKhRVhS3_h>:
uint16_t EtherCard::delaycnt = 0; //request gateway ARP lookup

uint8_t Ethernet::buffer[ETHER_CARD_BUFFER_SIZE]; // tcp/ip send and receive buffer

uint8_t EtherCard::begin (const uint8_t* macaddr,
                          Register& csDDR, Register& csPort, uint8_t csPin) {
    1766:	cf 92       	push	r12
    1768:	df 92       	push	r13
    176a:	ef 92       	push	r14
    176c:	ff 92       	push	r15
    176e:	0f 93       	push	r16
    1770:	cf 93       	push	r28
    1772:	df 93       	push	r29
    1774:	6c 01       	movw	r12, r24
    1776:	eb 01       	movw	r28, r22
    1778:	7a 01       	movw	r14, r20
    177a:	02 2f       	mov	r16, r18
    using_dhcp = false;
    177c:	10 92 9b 05 	sts	0x059B, r1	; 0x80059b <_ZN9EtherCard10using_dhcpE>
#if ETHERCARD_STASH
    Stash::initMap();
    1780:	88 e3       	ldi	r24, 0x38	; 56
    1782:	61 d0       	rcall	.+194    	; 0x1846 <_ZN5Stash7initMapEh>
#endif
    copyMac(mymac, macaddr);
    1784:	b6 01       	movw	r22, r12
    1786:	88 eb       	ldi	r24, 0xB8	; 184
    1788:	95 e0       	ldi	r25, 0x05	; 5
    178a:	86 d6       	rcall	.+3340   	; 0x2498 <_ZN9EtherCard7copyMacEPhPKh>
    return initialize(ETHER_CARD_BUFFER_SIZE, mymac, csDDR, csPort, csPin);
    178c:	97 01       	movw	r18, r14
    178e:	ae 01       	movw	r20, r28
    1790:	68 eb       	ldi	r22, 0xB8	; 184
    1792:	75 e0       	ldi	r23, 0x05	; 5
    1794:	80 e0       	ldi	r24, 0x00	; 0
    1796:	92 e0       	ldi	r25, 0x02	; 2
    1798:	78 de       	rcall	.-784    	; 0x148a <_ZN8ENC28J6010initializeEjPKhRVhS3_h>
}
    179a:	df 91       	pop	r29
    179c:	cf 91       	pop	r28
    179e:	0f 91       	pop	r16
    17a0:	ff 90       	pop	r15
    17a2:	ef 90       	pop	r14
    17a4:	df 90       	pop	r13
    17a6:	cf 90       	pop	r12
    17a8:	08 95       	ret

000017aa <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_>:

bool EtherCard::staticSetup (const uint8_t* my_ip,
                             const uint8_t* gw_ip,
                             const uint8_t* dns_ip,
                             const uint8_t* mask) {
    17aa:	ef 92       	push	r14
    17ac:	ff 92       	push	r15
    17ae:	0f 93       	push	r16
    17b0:	1f 93       	push	r17
    17b2:	cf 93       	push	r28
    17b4:	df 93       	push	r29
    17b6:	7b 01       	movw	r14, r22
    17b8:	8a 01       	movw	r16, r20
    17ba:	e9 01       	movw	r28, r18
    using_dhcp = false;
    17bc:	10 92 9b 05 	sts	0x059B, r1	; 0x80059b <_ZN9EtherCard10using_dhcpE>

    if (my_ip != 0)
    17c0:	00 97       	sbiw	r24, 0x00	; 0
    17c2:	21 f0       	breq	.+8      	; 0x17cc <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x22>
        copyIp(myip, my_ip);
    17c4:	bc 01       	movw	r22, r24
    17c6:	84 eb       	ldi	r24, 0xB4	; 180
    17c8:	95 e0       	ldi	r25, 0x05	; 5
    17ca:	59 d6       	rcall	.+3250   	; 0x247e <_ZN9EtherCard6copyIpEPhPKh>
    if (gw_ip != 0)
    17cc:	e1 14       	cp	r14, r1
    17ce:	f1 04       	cpc	r15, r1
    17d0:	11 f0       	breq	.+4      	; 0x17d6 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x2c>
        setGwIp(gw_ip);
    17d2:	c7 01       	movw	r24, r14
    17d4:	63 d2       	rcall	.+1222   	; 0x1c9c <_ZN9EtherCard7setGwIpEPKh>
    if (dns_ip != 0)
    17d6:	01 15       	cp	r16, r1
    17d8:	11 05       	cpc	r17, r1
    17da:	21 f0       	breq	.+8      	; 0x17e4 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x3a>
        copyIp(dnsip, dns_ip);
    17dc:	b8 01       	movw	r22, r16
    17de:	80 ea       	ldi	r24, 0xA0	; 160
    17e0:	95 e0       	ldi	r25, 0x05	; 5
    17e2:	4d d6       	rcall	.+3226   	; 0x247e <_ZN9EtherCard6copyIpEPhPKh>
    if(mask != 0)
    17e4:	20 97       	sbiw	r28, 0x00	; 0
    17e6:	21 f0       	breq	.+8      	; 0x17f0 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x46>
        copyIp(netmask, mask);
    17e8:	be 01       	movw	r22, r28
    17ea:	80 eb       	ldi	r24, 0xB0	; 176
    17ec:	95 e0       	ldi	r25, 0x05	; 5
    updateBroadcastAddress();
    17ee:	47 d6       	rcall	.+3214   	; 0x247e <_ZN9EtherCard6copyIpEPhPKh>
    17f0:	61 d2       	rcall	.+1218   	; 0x1cb4 <_ZN9EtherCard22updateBroadcastAddressEv>
    delaycnt = 0; //request gateway ARP lookup
    17f2:	10 92 99 05 	sts	0x0599, r1	; 0x800599 <_ZN9EtherCard8delaycntE+0x1>
    17f6:	10 92 98 05 	sts	0x0598, r1	; 0x800598 <_ZN9EtherCard8delaycntE>
    return true;
}
    17fa:	81 e0       	ldi	r24, 0x01	; 1
    17fc:	df 91       	pop	r29
    17fe:	cf 91       	pop	r28
    1800:	1f 91       	pop	r17
    1802:	0f 91       	pop	r16
    1804:	ff 90       	pop	r15
    1806:	ef 90       	pop	r14
    1808:	08 95       	ret

0000180a <_ZN5Print17availableForWriteEv>:

uint8_t Stash::fetchByte (uint8_t blk, uint8_t off) {
    return blk == bufs[WRITEBUF].bnum ? bufs[WRITEBUF].bytes[off] :
           blk == bufs[READBUF].bnum ? bufs[READBUF].bytes[off] :
           ether.peekin(blk, off);
}
    180a:	80 e0       	ldi	r24, 0x00	; 0
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	08 95       	ret

00001810 <_ZN5Stash9freeBlockEh>:
    1810:	e8 2f       	mov	r30, r24
    1812:	f0 e0       	ldi	r31, 0x00	; 0
    1814:	f5 95       	asr	r31
    1816:	e7 95       	ror	r30
    1818:	f5 95       	asr	r31
    181a:	e7 95       	ror	r30
    181c:	f5 95       	asr	r31
    181e:	e7 95       	ror	r30
    1820:	e2 54       	subi	r30, 0x42	; 66
    1822:	fa 4f       	sbci	r31, 0xFA	; 250
    1824:	28 2f       	mov	r18, r24
    1826:	27 70       	andi	r18, 0x07	; 7
    1828:	81 e0       	ldi	r24, 0x01	; 1
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	a0 e0       	ldi	r26, 0x00	; 0
    182e:	b0 e0       	ldi	r27, 0x00	; 0
    1830:	04 c0       	rjmp	.+8      	; 0x183a <_ZN5Stash9freeBlockEh+0x2a>
    1832:	88 0f       	add	r24, r24
    1834:	99 1f       	adc	r25, r25
    1836:	aa 1f       	adc	r26, r26
    1838:	bb 1f       	adc	r27, r27
    183a:	2a 95       	dec	r18
    183c:	d2 f7       	brpl	.-12     	; 0x1832 <_ZN5Stash9freeBlockEh+0x22>
    183e:	20 81       	ld	r18, Z
    1840:	82 2b       	or	r24, r18
    1842:	80 83       	st	Z, r24
    1844:	08 95       	ret

00001846 <_ZN5Stash7initMapEh>:


// block 0 is special since always occupied
void Stash::initMap (uint8_t last /*=SCRATCH_PAGE_NUM*/) {
    1846:	cf 93       	push	r28
    1848:	c7 e3       	ldi	r28, 0x37	; 55
    last = SCRATCH_PAGE_NUM;
    while (--last > 0)
        freeBlock(last);
    184a:	8c 2f       	mov	r24, r28
    184c:	e1 df       	rcall	.-62     	; 0x1810 <_ZN5Stash9freeBlockEh>


// block 0 is special since always occupied
void Stash::initMap (uint8_t last /*=SCRATCH_PAGE_NUM*/) {
    last = SCRATCH_PAGE_NUM;
    while (--last > 0)
    184e:	c1 50       	subi	r28, 0x01	; 1
    1850:	e1 f7       	brne	.-8      	; 0x184a <_ZN5Stash7initMapEh+0x4>
        freeBlock(last);
}
    1852:	cf 91       	pop	r28
    1854:	08 95       	ret

00001856 <_ZL13fill_checksumhhjh>:
uint8_t EtherCard::packetLoopIcmpCheckReply (const uint8_t *ip_monitoredhost) {
    return gPB[IP_PROTO_P]==IP_PROTO_ICMP_V &&
           gPB[ICMP_TYPE_P]==ICMP_TYPE_ECHOREPLY_V &&
           gPB[ICMP_DATA_P]== PINGPATTERN &&
           check_ip_message_is_from(ip_monitoredhost);
}
    1856:	cf 92       	push	r12
    1858:	df 92       	push	r13
    185a:	ef 92       	push	r14
    185c:	ff 92       	push	r15
    185e:	cf 93       	push	r28
    1860:	df 93       	push	r29
    1862:	c6 2f       	mov	r28, r22
    1864:	d0 e0       	ldi	r29, 0x00	; 0
    1866:	c8 56       	subi	r28, 0x68	; 104
    1868:	dc 4f       	sbci	r29, 0xFC	; 252
    186a:	21 30       	cpi	r18, 0x01	; 1
    186c:	81 f4       	brne	.+32     	; 0x188e <_ZL13fill_checksumhhjh+0x38>
    186e:	6a 01       	movw	r12, r20
    1870:	99 e0       	ldi	r25, 0x09	; 9
    1872:	c9 0e       	add	r12, r25
    1874:	d1 1c       	adc	r13, r1
    1876:	e1 2c       	mov	r14, r1
    1878:	f1 2c       	mov	r15, r1
    187a:	03 c0       	rjmp	.+6      	; 0x1882 <_ZL13fill_checksumhhjh+0x2c>
    187c:	c1 2c       	mov	r12, r1
    187e:	d1 2c       	mov	r13, r1
    1880:	76 01       	movw	r14, r12
    1882:	42 30       	cpi	r20, 0x02	; 2
    1884:	51 05       	cpc	r21, r1
    1886:	28 f1       	brcs	.+74     	; 0x18d2 <_ZL13fill_checksumhhjh+0x7c>
    1888:	fe 01       	movw	r30, r28
    188a:	da 01       	movw	r26, r20
    188c:	09 c0       	rjmp	.+18     	; 0x18a0 <_ZL13fill_checksumhhjh+0x4a>
    188e:	22 30       	cpi	r18, 0x02	; 2
    1890:	a9 f7       	brne	.-22     	; 0x187c <_ZL13fill_checksumhhjh+0x26>
    1892:	6a 01       	movw	r12, r20
    1894:	92 e0       	ldi	r25, 0x02	; 2
    1896:	c9 1a       	sub	r12, r25
    1898:	d1 08       	sbc	r13, r1
    189a:	e1 2c       	mov	r14, r1
    189c:	f1 2c       	mov	r15, r1
    189e:	f1 cf       	rjmp	.-30     	; 0x1882 <_ZL13fill_checksumhhjh+0x2c>
    18a0:	20 81       	ld	r18, Z
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	32 2f       	mov	r19, r18
    18a6:	22 27       	eor	r18, r18
    18a8:	91 81       	ldd	r25, Z+1	; 0x01
    18aa:	29 2b       	or	r18, r25
    18ac:	c2 0e       	add	r12, r18
    18ae:	d3 1e       	adc	r13, r19
    18b0:	e1 1c       	adc	r14, r1
    18b2:	f1 1c       	adc	r15, r1
    18b4:	32 96       	adiw	r30, 0x02	; 2
    18b6:	12 97       	sbiw	r26, 0x02	; 2
    18b8:	a2 30       	cpi	r26, 0x02	; 2
    18ba:	b1 05       	cpc	r27, r1
    18bc:	88 f7       	brcc	.-30     	; 0x18a0 <_ZL13fill_checksumhhjh+0x4a>
    18be:	9a 01       	movw	r18, r20
    18c0:	22 50       	subi	r18, 0x02	; 2
    18c2:	31 09       	sbc	r19, r1
    18c4:	2e 7f       	andi	r18, 0xFE	; 254
    18c6:	2e 5f       	subi	r18, 0xFE	; 254
    18c8:	3f 4f       	sbci	r19, 0xFF	; 255
    18ca:	c2 0f       	add	r28, r18
    18cc:	d3 1f       	adc	r29, r19
    18ce:	41 70       	andi	r20, 0x01	; 1
    18d0:	55 27       	eor	r21, r21
    18d2:	45 2b       	or	r20, r21
    18d4:	61 f0       	breq	.+24     	; 0x18ee <_ZL13fill_checksumhhjh+0x98>
    18d6:	48 81       	ld	r20, Y
    18d8:	50 e0       	ldi	r21, 0x00	; 0
    18da:	60 e0       	ldi	r22, 0x00	; 0
    18dc:	70 e0       	ldi	r23, 0x00	; 0
    18de:	76 2f       	mov	r23, r22
    18e0:	65 2f       	mov	r22, r21
    18e2:	54 2f       	mov	r21, r20
    18e4:	44 27       	eor	r20, r20
    18e6:	c4 0e       	add	r12, r20
    18e8:	d5 1e       	adc	r13, r21
    18ea:	e6 1e       	adc	r14, r22
    18ec:	f7 1e       	adc	r15, r23
    18ee:	a7 01       	movw	r20, r14
    18f0:	66 27       	eor	r22, r22
    18f2:	77 27       	eor	r23, r23
    18f4:	41 15       	cp	r20, r1
    18f6:	51 05       	cpc	r21, r1
    18f8:	61 05       	cpc	r22, r1
    18fa:	71 05       	cpc	r23, r1
    18fc:	71 f0       	breq	.+28     	; 0x191a <_ZL13fill_checksumhhjh+0xc4>
    18fe:	ee 24       	eor	r14, r14
    1900:	ff 24       	eor	r15, r15
    1902:	c4 0e       	add	r12, r20
    1904:	d5 1e       	adc	r13, r21
    1906:	e6 1e       	adc	r14, r22
    1908:	f7 1e       	adc	r15, r23
    190a:	a7 01       	movw	r20, r14
    190c:	66 27       	eor	r22, r22
    190e:	77 27       	eor	r23, r23
    1910:	41 15       	cp	r20, r1
    1912:	51 05       	cpc	r21, r1
    1914:	61 05       	cpc	r22, r1
    1916:	71 05       	cpc	r23, r1
    1918:	91 f7       	brne	.-28     	; 0x18fe <_ZL13fill_checksumhhjh+0xa8>
    191a:	c0 94       	com	r12
    191c:	d0 94       	com	r13
    191e:	e8 2f       	mov	r30, r24
    1920:	f0 e0       	ldi	r31, 0x00	; 0
    1922:	e8 56       	subi	r30, 0x68	; 104
    1924:	fc 4f       	sbci	r31, 0xFC	; 252
    1926:	d0 82       	st	Z, r13
    1928:	c1 82       	std	Z+1, r12	; 0x01
    192a:	df 91       	pop	r29
    192c:	cf 91       	pop	r28
    192e:	ff 90       	pop	r15
    1930:	ef 90       	pop	r14
    1932:	df 90       	pop	r13
    1934:	cf 90       	pop	r12
    1936:	08 95       	ret

00001938 <_ZL6is_lanPKhS0_>:
    1938:	cf 93       	push	r28
    193a:	df 93       	push	r29
    193c:	fc 01       	movw	r30, r24
    193e:	20 81       	ld	r18, Z
    1940:	22 23       	and	r18, r18
    1942:	d1 f0       	breq	.+52     	; 0x1978 <_ZL6is_lanPKhS0_+0x40>
    1944:	fb 01       	movw	r30, r22
    1946:	30 81       	ld	r19, Z
    1948:	33 23       	and	r19, r19
    194a:	c1 f0       	breq	.+48     	; 0x197c <_ZL6is_lanPKhS0_+0x44>
    194c:	23 27       	eor	r18, r19
    194e:	30 91 b0 05 	lds	r19, 0x05B0	; 0x8005b0 <_ZN9EtherCard7netmaskE>
    1952:	23 23       	and	r18, r19
    1954:	a9 f4       	brne	.+42     	; 0x1980 <_ZL6is_lanPKhS0_+0x48>
    1956:	dc 01       	movw	r26, r24
    1958:	11 96       	adiw	r26, 0x01	; 1
    195a:	31 96       	adiw	r30, 0x01	; 1
    195c:	c1 eb       	ldi	r28, 0xB1	; 177
    195e:	d5 e0       	ldi	r29, 0x05	; 5
    1960:	04 96       	adiw	r24, 0x04	; 4
    1962:	4d 91       	ld	r20, X+
    1964:	21 91       	ld	r18, Z+
    1966:	39 91       	ld	r19, Y+
    1968:	24 27       	eor	r18, r20
    196a:	23 23       	and	r18, r19
    196c:	59 f4       	brne	.+22     	; 0x1984 <_ZL6is_lanPKhS0_+0x4c>
    196e:	a8 17       	cp	r26, r24
    1970:	b9 07       	cpc	r27, r25
    1972:	b9 f7       	brne	.-18     	; 0x1962 <_ZL6is_lanPKhS0_+0x2a>
    1974:	81 e0       	ldi	r24, 0x01	; 1
    1976:	07 c0       	rjmp	.+14     	; 0x1986 <_ZL6is_lanPKhS0_+0x4e>
    1978:	80 e0       	ldi	r24, 0x00	; 0
    197a:	05 c0       	rjmp	.+10     	; 0x1986 <_ZL6is_lanPKhS0_+0x4e>
    197c:	80 e0       	ldi	r24, 0x00	; 0
    197e:	03 c0       	rjmp	.+6      	; 0x1986 <_ZL6is_lanPKhS0_+0x4e>
    1980:	80 e0       	ldi	r24, 0x00	; 0
    1982:	01 c0       	rjmp	.+2      	; 0x1986 <_ZL6is_lanPKhS0_+0x4e>
    1984:	80 e0       	ldi	r24, 0x00	; 0
    1986:	df 91       	pop	r29
    1988:	cf 91       	pop	r28
    198a:	08 95       	ret

0000198c <_ZL20fill_ip_hdr_checksumv>:
    198c:	e8 e9       	ldi	r30, 0x98	; 152
    198e:	f3 e0       	ldi	r31, 0x03	; 3
    1990:	10 8e       	std	Z+24, r1	; 0x18
    1992:	11 8e       	std	Z+25, r1	; 0x19
    1994:	80 e4       	ldi	r24, 0x40	; 64
    1996:	84 8b       	std	Z+20, r24	; 0x14
    1998:	15 8a       	std	Z+21, r1	; 0x15
    199a:	86 8b       	std	Z+22, r24	; 0x16
    199c:	20 e0       	ldi	r18, 0x00	; 0
    199e:	44 e1       	ldi	r20, 0x14	; 20
    19a0:	50 e0       	ldi	r21, 0x00	; 0
    19a2:	6e e0       	ldi	r22, 0x0E	; 14
    19a4:	88 e1       	ldi	r24, 0x18	; 24
    19a6:	57 cf       	rjmp	.-338    	; 0x1856 <_ZL13fill_checksumhhjh>
    19a8:	08 95       	ret

000019aa <_ZL12make_tcpheadjh>:
    19aa:	e8 e9       	ldi	r30, 0x98	; 152
    19ac:	f3 e0       	ldi	r31, 0x03	; 3
    19ae:	24 a1       	ldd	r18, Z+36	; 0x24
    19b0:	32 a1       	ldd	r19, Z+34	; 0x22
    19b2:	34 a3       	std	Z+36, r19	; 0x24
    19b4:	22 a3       	std	Z+34, r18	; 0x22
    19b6:	25 a1       	ldd	r18, Z+37	; 0x25
    19b8:	33 a1       	ldd	r19, Z+35	; 0x23
    19ba:	35 a3       	std	Z+37, r19	; 0x25
    19bc:	23 a3       	std	Z+35, r18	; 0x23
    19be:	e2 ec       	ldi	r30, 0xC2	; 194
    19c0:	f3 e0       	ldi	r31, 0x03	; 3
    19c2:	4e eb       	ldi	r20, 0xBE	; 190
    19c4:	53 e0       	ldi	r21, 0x03	; 3
    19c6:	22 91       	ld	r18, -Z
    19c8:	82 0f       	add	r24, r18
    19ca:	91 1d       	adc	r25, r1
    19cc:	24 81       	ldd	r18, Z+4	; 0x04
    19ce:	84 83       	std	Z+4, r24	; 0x04
    19d0:	66 23       	and	r22, r22
    19d2:	11 f0       	breq	.+4      	; 0x19d8 <_ZL12make_tcpheadjh+0x2e>
    19d4:	20 83       	st	Z, r18
    19d6:	01 c0       	rjmp	.+2      	; 0x19da <_ZL12make_tcpheadjh+0x30>
    19d8:	10 82       	st	Z, r1
    19da:	89 2f       	mov	r24, r25
    19dc:	99 27       	eor	r25, r25
    19de:	e4 17       	cp	r30, r20
    19e0:	f5 07       	cpc	r31, r21
    19e2:	89 f7       	brne	.-30     	; 0x19c6 <_ZL12make_tcpheadjh+0x1c>
    19e4:	e8 e9       	ldi	r30, 0x98	; 152
    19e6:	f3 e0       	ldi	r31, 0x03	; 3
    19e8:	12 aa       	std	Z+50, r1	; 0x32
    19ea:	13 aa       	std	Z+51, r1	; 0x33
    19ec:	80 e5       	ldi	r24, 0x50	; 80
    19ee:	86 a7       	std	Z+46, r24	; 0x2e
    19f0:	08 95       	ret

000019f2 <_ZL30make_tcp_ack_with_data_noflagsj>:
    19f2:	0f 93       	push	r16
    19f4:	1f 93       	push	r17
    19f6:	cf 93       	push	r28
    19f8:	df 93       	push	r29
    19fa:	8c 01       	movw	r16, r24
    19fc:	88 96       	adiw	r24, 0x28	; 40
    19fe:	c8 e9       	ldi	r28, 0x98	; 152
    1a00:	d3 e0       	ldi	r29, 0x03	; 3
    1a02:	98 8b       	std	Y+16, r25	; 0x10
    1a04:	89 8b       	std	Y+17, r24	; 0x11
    1a06:	c2 df       	rcall	.-124    	; 0x198c <_ZL20fill_ip_hdr_checksumv>
    1a08:	1a aa       	std	Y+50, r1	; 0x32
    1a0a:	1b aa       	std	Y+51, r1	; 0x33
    1a0c:	a8 01       	movw	r20, r16
    1a0e:	44 5e       	subi	r20, 0xE4	; 228
    1a10:	5f 4f       	sbci	r21, 0xFF	; 255
    1a12:	22 e0       	ldi	r18, 0x02	; 2
    1a14:	6a e1       	ldi	r22, 0x1A	; 26
    1a16:	82 e3       	ldi	r24, 0x32	; 50
    1a18:	1e df       	rcall	.-452    	; 0x1856 <_ZL13fill_checksumhhjh>
    1a1a:	c8 01       	movw	r24, r16
    1a1c:	c6 96       	adiw	r24, 0x36	; 54
    1a1e:	de dd       	rcall	.-1092   	; 0x15dc <_ZN8ENC28J6010packetSendEj>
    1a20:	df 91       	pop	r29
    1a22:	cf 91       	pop	r28
    1a24:	1f 91       	pop	r17
    1a26:	0f 91       	pop	r16
    1a28:	08 95       	ret

00001a2a <_ZL7setMACsPKh>:
    1a2a:	bc 01       	movw	r22, r24
    1a2c:	88 e9       	ldi	r24, 0x98	; 152
    1a2e:	93 e0       	ldi	r25, 0x03	; 3
    1a30:	33 d5       	rcall	.+2662   	; 0x2498 <_ZN9EtherCard7copyMacEPhPKh>
    1a32:	68 eb       	ldi	r22, 0xB8	; 184
    1a34:	75 e0       	ldi	r23, 0x05	; 5
    1a36:	8e e9       	ldi	r24, 0x9E	; 158
    1a38:	93 e0       	ldi	r25, 0x03	; 3
    1a3a:	2e c5       	rjmp	.+2652   	; 0x2498 <_ZN9EtherCard7copyMacEPhPKh>
    1a3c:	08 95       	ret

00001a3e <_ZL11make_eth_ipv>:
    1a3e:	8e e9       	ldi	r24, 0x9E	; 158
    1a40:	93 e0       	ldi	r25, 0x03	; 3
    1a42:	f3 df       	rcall	.-26     	; 0x1a2a <_ZL7setMACsPKh>
    1a44:	62 eb       	ldi	r22, 0xB2	; 178
    1a46:	73 e0       	ldi	r23, 0x03	; 3
    1a48:	86 eb       	ldi	r24, 0xB6	; 182
    1a4a:	93 e0       	ldi	r25, 0x03	; 3
    1a4c:	18 d5       	rcall	.+2608   	; 0x247e <_ZN9EtherCard6copyIpEPhPKh>
    1a4e:	64 eb       	ldi	r22, 0xB4	; 180
    1a50:	75 e0       	ldi	r23, 0x05	; 5
    1a52:	82 eb       	ldi	r24, 0xB2	; 178
    1a54:	93 e0       	ldi	r25, 0x03	; 3
    1a56:	13 d5       	rcall	.+2598   	; 0x247e <_ZN9EtherCard6copyIpEPhPKh>
    1a58:	99 cf       	rjmp	.-206    	; 0x198c <_ZL20fill_ip_hdr_checksumv>
    1a5a:	08 95       	ret

00001a5c <_ZL21make_tcp_ack_from_anyih>:
    1a5c:	cf 93       	push	r28
    1a5e:	df 93       	push	r29
    1a60:	26 2f       	mov	r18, r22
    1a62:	20 61       	ori	r18, 0x10	; 16
    1a64:	20 93 c7 03 	sts	0x03C7, r18	; 0x8003c7 <_ZN8ENC28J606bufferE+0x2f>
    1a68:	64 30       	cpi	r22, 0x04	; 4
    1a6a:	21 f0       	breq	.+8      	; 0x1a74 <_ZL21make_tcp_ack_from_anyih+0x18>
    1a6c:	00 97       	sbiw	r24, 0x00	; 0
    1a6e:	11 f4       	brne	.+4      	; 0x1a74 <_ZL21make_tcp_ack_from_anyih+0x18>
    1a70:	81 e0       	ldi	r24, 0x01	; 1
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	61 e0       	ldi	r22, 0x01	; 1
    1a76:	99 df       	rcall	.-206    	; 0x19aa <_ZL12make_tcpheadjh>
    1a78:	c8 e9       	ldi	r28, 0x98	; 152
    1a7a:	d3 e0       	ldi	r29, 0x03	; 3
    1a7c:	18 8a       	std	Y+16, r1	; 0x10
    1a7e:	88 e2       	ldi	r24, 0x28	; 40
    1a80:	89 8b       	std	Y+17, r24	; 0x11
    1a82:	dd df       	rcall	.-70     	; 0x1a3e <_ZL11make_eth_ipv>
    1a84:	84 e0       	ldi	r24, 0x04	; 4
    1a86:	88 ab       	std	Y+48, r24	; 0x30
    1a88:	19 aa       	std	Y+49, r1	; 0x31
    1a8a:	22 e0       	ldi	r18, 0x02	; 2
    1a8c:	4c e1       	ldi	r20, 0x1C	; 28
    1a8e:	50 e0       	ldi	r21, 0x00	; 0
    1a90:	6a e1       	ldi	r22, 0x1A	; 26
    1a92:	82 e3       	ldi	r24, 0x32	; 50
    1a94:	e0 de       	rcall	.-576    	; 0x1856 <_ZL13fill_checksumhhjh>
    1a96:	86 e3       	ldi	r24, 0x36	; 54
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	a0 dd       	rcall	.-1216   	; 0x15dc <_ZN8ENC28J6010packetSendEj>
    1a9c:	df 91       	pop	r29
    1a9e:	cf 91       	pop	r28
    1aa0:	08 95       	ret

00001aa2 <_ZL12setMACandIPsPKhS0_>:
    1aa2:	cf 93       	push	r28
    1aa4:	df 93       	push	r29
    1aa6:	eb 01       	movw	r28, r22
    1aa8:	c0 df       	rcall	.-128    	; 0x1a2a <_ZL7setMACsPKh>
    1aaa:	be 01       	movw	r22, r28
    1aac:	86 eb       	ldi	r24, 0xB6	; 182
    1aae:	93 e0       	ldi	r25, 0x03	; 3
    1ab0:	e6 d4       	rcall	.+2508   	; 0x247e <_ZN9EtherCard6copyIpEPhPKh>
    1ab2:	64 eb       	ldi	r22, 0xB4	; 180
    1ab4:	75 e0       	ldi	r23, 0x05	; 5
    1ab6:	82 eb       	ldi	r24, 0xB2	; 178
    1ab8:	93 e0       	ldi	r25, 0x03	; 3
    1aba:	e1 d4       	rcall	.+2498   	; 0x247e <_ZN9EtherCard6copyIpEPhPKh>
    1abc:	df 91       	pop	r29
    1abe:	cf 91       	pop	r28
    1ac0:	08 95       	ret

00001ac2 <_ZL17client_arp_whohasPh>:
    1ac2:	0f 93       	push	r16
    1ac4:	1f 93       	push	r17
    1ac6:	cf 93       	push	r28
    1ac8:	8c 01       	movw	r16, r24
    1aca:	89 e4       	ldi	r24, 0x49	; 73
    1acc:	92 e0       	ldi	r25, 0x02	; 2
    1ace:	ad df       	rcall	.-166    	; 0x1a2a <_ZL7setMACsPKh>
    1ad0:	e8 e9       	ldi	r30, 0x98	; 152
    1ad2:	f3 e0       	ldi	r31, 0x03	; 3
    1ad4:	88 e0       	ldi	r24, 0x08	; 8
    1ad6:	84 87       	std	Z+12, r24	; 0x0c
    1ad8:	c6 e0       	ldi	r28, 0x06	; 6
    1ada:	c5 87       	std	Z+13, r28	; 0x0d
    1adc:	48 e0       	ldi	r20, 0x08	; 8
    1ade:	50 e0       	ldi	r21, 0x00	; 0
    1ae0:	63 e8       	ldi	r22, 0x83	; 131
    1ae2:	72 e0       	ldi	r23, 0x02	; 2
    1ae4:	86 ea       	ldi	r24, 0xA6	; 166
    1ae6:	93 e0       	ldi	r25, 0x03	; 3
    1ae8:	0e 94 5f 20 	call	0x40be	; 0x40be <memcpy_P>
    1aec:	e8 eb       	ldi	r30, 0xB8	; 184
    1aee:	f3 e0       	ldi	r31, 0x03	; 3
    1af0:	df 01       	movw	r26, r30
    1af2:	1d 92       	st	X+, r1
    1af4:	ca 95       	dec	r28
    1af6:	e9 f7       	brne	.-6      	; 0x1af2 <_ZL17client_arp_whohasPh+0x30>
    1af8:	68 eb       	ldi	r22, 0xB8	; 184
    1afa:	75 e0       	ldi	r23, 0x05	; 5
    1afc:	8e ea       	ldi	r24, 0xAE	; 174
    1afe:	93 e0       	ldi	r25, 0x03	; 3
    1b00:	cb d4       	rcall	.+2454   	; 0x2498 <_ZN9EtherCard7copyMacEPhPKh>
    1b02:	b8 01       	movw	r22, r16
    1b04:	8e eb       	ldi	r24, 0xBE	; 190
    1b06:	93 e0       	ldi	r25, 0x03	; 3
    1b08:	ba d4       	rcall	.+2420   	; 0x247e <_ZN9EtherCard6copyIpEPhPKh>
    1b0a:	64 eb       	ldi	r22, 0xB4	; 180
    1b0c:	75 e0       	ldi	r23, 0x05	; 5
    1b0e:	84 eb       	ldi	r24, 0xB4	; 180
    1b10:	93 e0       	ldi	r25, 0x03	; 3
    1b12:	b5 d4       	rcall	.+2410   	; 0x247e <_ZN9EtherCard6copyIpEPhPKh>
    1b14:	8a e2       	ldi	r24, 0x2A	; 42
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	61 dd       	rcall	.-1342   	; 0x15dc <_ZN8ENC28J6010packetSendEj>
    1b1a:	cf 91       	pop	r28
    1b1c:	1f 91       	pop	r17
    1b1e:	0f 91       	pop	r16
    1b20:	08 95       	ret

00001b22 <_ZL16client_store_macPhS_>:
    1b22:	cf 93       	push	r28
    1b24:	df 93       	push	r29
    1b26:	eb 01       	movw	r28, r22
    1b28:	44 e0       	ldi	r20, 0x04	; 4
    1b2a:	50 e0       	ldi	r21, 0x00	; 0
    1b2c:	bc 01       	movw	r22, r24
    1b2e:	84 eb       	ldi	r24, 0xB4	; 180
    1b30:	93 e0       	ldi	r25, 0x03	; 3
    1b32:	0e 94 68 20 	call	0x40d0	; 0x40d0 <memcmp>
    1b36:	89 2b       	or	r24, r25
    1b38:	31 f4       	brne	.+12     	; 0x1b46 <_ZL16client_store_macPhS_+0x24>
    1b3a:	6e ea       	ldi	r22, 0xAE	; 174
    1b3c:	73 e0       	ldi	r23, 0x03	; 3
    1b3e:	ce 01       	movw	r24, r28
    1b40:	ab d4       	rcall	.+2390   	; 0x2498 <_ZN9EtherCard7copyMacEPhPKh>
    1b42:	81 e0       	ldi	r24, 0x01	; 1
    1b44:	01 c0       	rjmp	.+2      	; 0x1b48 <_ZL16client_store_macPhS_+0x26>
    1b46:	80 e0       	ldi	r24, 0x00	; 0
    1b48:	df 91       	pop	r29
    1b4a:	cf 91       	pop	r28
    1b4c:	08 95       	ret

00001b4e <_ZN9EtherCard19getTcpPayloadLengthEv>:
    1b4e:	e8 e9       	ldi	r30, 0x98	; 152
    1b50:	f3 e0       	ldi	r31, 0x03	; 3
    1b52:	80 89       	ldd	r24, Z+16	; 0x10
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	98 2f       	mov	r25, r24
    1b58:	88 27       	eor	r24, r24
    1b5a:	21 89       	ldd	r18, Z+17	; 0x11
    1b5c:	82 2b       	or	r24, r18
    1b5e:	44 97       	sbiw	r24, 0x14	; 20
    1b60:	26 a5       	ldd	r18, Z+46	; 0x2e
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	35 95       	asr	r19
    1b66:	27 95       	ror	r18
    1b68:	35 95       	asr	r19
    1b6a:	27 95       	ror	r18
    1b6c:	35 95       	asr	r19
    1b6e:	27 95       	ror	r18
    1b70:	35 95       	asr	r19
    1b72:	27 95       	ror	r18
    1b74:	22 0f       	add	r18, r18
    1b76:	33 1f       	adc	r19, r19
    1b78:	22 0f       	add	r18, r18
    1b7a:	33 1f       	adc	r19, r19
    1b7c:	82 1b       	sub	r24, r18
    1b7e:	93 0b       	sbc	r25, r19
    1b80:	12 f4       	brpl	.+4      	; 0x1b86 <_ZN9EtherCard19getTcpPayloadLengthEv+0x38>
    1b82:	80 e0       	ldi	r24, 0x00	; 0
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	08 95       	ret

00001b88 <_ZN9EtherCard10udpPrepareEjPKhj>:
    1b88:	ef 92       	push	r14
    1b8a:	ff 92       	push	r15
    1b8c:	0f 93       	push	r16
    1b8e:	1f 93       	push	r17
    1b90:	cf 93       	push	r28
    1b92:	df 93       	push	r29
    1b94:	18 2f       	mov	r17, r24
    1b96:	09 2f       	mov	r16, r25
    1b98:	eb 01       	movw	r28, r22
    1b9a:	f4 2e       	mov	r15, r20
    1b9c:	e5 2e       	mov	r14, r21
    1b9e:	84 eb       	ldi	r24, 0xB4	; 180
    1ba0:	95 e0       	ldi	r25, 0x05	; 5
    1ba2:	ca de       	rcall	.-620    	; 0x1938 <_ZL6is_lanPKhS0_>
    1ba4:	88 23       	and	r24, r24
    1ba6:	29 f0       	breq	.+10     	; 0x1bb2 <_ZN9EtherCard10udpPrepareEjPKhj+0x2a>
    1ba8:	be 01       	movw	r22, r28
    1baa:	82 ed       	ldi	r24, 0xD2	; 210
    1bac:	95 e0       	ldi	r25, 0x05	; 5
    1bae:	79 df       	rcall	.-270    	; 0x1aa2 <_ZL12setMACandIPsPKhS0_>
    1bb0:	04 c0       	rjmp	.+8      	; 0x1bba <_ZN9EtherCard10udpPrepareEjPKhj+0x32>
    1bb2:	be 01       	movw	r22, r28
    1bb4:	88 ec       	ldi	r24, 0xC8	; 200
    1bb6:	95 e0       	ldi	r25, 0x05	; 5
    1bb8:	74 df       	rcall	.-280    	; 0x1aa2 <_ZL12setMACandIPsPKhS0_>
    1bba:	88 81       	ld	r24, Y
    1bbc:	80 7f       	andi	r24, 0xF0	; 240
    1bbe:	80 3e       	cpi	r24, 0xE0	; 224
    1bc0:	91 f0       	breq	.+36     	; 0x1be6 <_ZN9EtherCard10udpPrepareEjPKhj+0x5e>
    1bc2:	88 81       	ld	r24, Y
    1bc4:	99 81       	ldd	r25, Y+1	; 0x01
    1bc6:	aa 81       	ldd	r26, Y+2	; 0x02
    1bc8:	bb 81       	ldd	r27, Y+3	; 0x03
    1bca:	8f 3f       	cpi	r24, 0xFF	; 255
    1bcc:	9f 4f       	sbci	r25, 0xFF	; 255
    1bce:	af 4f       	sbci	r26, 0xFF	; 255
    1bd0:	bf 4f       	sbci	r27, 0xFF	; 255
    1bd2:	49 f0       	breq	.+18     	; 0x1be6 <_ZN9EtherCard10udpPrepareEjPKhj+0x5e>
    1bd4:	44 e0       	ldi	r20, 0x04	; 4
    1bd6:	50 e0       	ldi	r21, 0x00	; 0
    1bd8:	be 01       	movw	r22, r28
    1bda:	8c ea       	ldi	r24, 0xAC	; 172
    1bdc:	95 e0       	ldi	r25, 0x05	; 5
    1bde:	0e 94 68 20 	call	0x40d0	; 0x40d0 <memcmp>
    1be2:	89 2b       	or	r24, r25
    1be4:	29 f4       	brne	.+10     	; 0x1bf0 <_ZN9EtherCard10udpPrepareEjPKhj+0x68>
    1be6:	69 e4       	ldi	r22, 0x49	; 73
    1be8:	72 e0       	ldi	r23, 0x02	; 2
    1bea:	88 e9       	ldi	r24, 0x98	; 152
    1bec:	93 e0       	ldi	r25, 0x03	; 3
    1bee:	54 d4       	rcall	.+2216   	; 0x2498 <_ZN9EtherCard7copyMacEPhPKh>
    1bf0:	c8 e9       	ldi	r28, 0x98	; 152
    1bf2:	d3 e0       	ldi	r29, 0x03	; 3
    1bf4:	88 e0       	ldi	r24, 0x08	; 8
    1bf6:	8c 87       	std	Y+12, r24	; 0x0c
    1bf8:	1d 86       	std	Y+13, r1	; 0x0d
    1bfa:	49 e0       	ldi	r20, 0x09	; 9
    1bfc:	50 e0       	ldi	r21, 0x00	; 0
    1bfe:	6a e7       	ldi	r22, 0x7A	; 122
    1c00:	72 e0       	ldi	r23, 0x02	; 2
    1c02:	86 ea       	ldi	r24, 0xA6	; 166
    1c04:	93 e0       	ldi	r25, 0x03	; 3
    1c06:	0e 94 5f 20 	call	0x40be	; 0x40be <memcpy_P>
    1c0a:	18 8a       	std	Y+16, r1	; 0x10
    1c0c:	81 e1       	ldi	r24, 0x11	; 17
    1c0e:	8f 8b       	std	Y+23, r24	; 0x17
    1c10:	ec a2       	std	Y+36, r14	; 0x24
    1c12:	fd a2       	std	Y+37, r15	; 0x25
    1c14:	0a a3       	std	Y+34, r16	; 0x22
    1c16:	1b a3       	std	Y+35, r17	; 0x23
    1c18:	1e a2       	std	Y+38, r1	; 0x26
    1c1a:	18 a6       	std	Y+40, r1	; 0x28
    1c1c:	19 a6       	std	Y+41, r1	; 0x29
    1c1e:	df 91       	pop	r29
    1c20:	cf 91       	pop	r28
    1c22:	1f 91       	pop	r17
    1c24:	0f 91       	pop	r16
    1c26:	ff 90       	pop	r15
    1c28:	ef 90       	pop	r14
    1c2a:	08 95       	ret

00001c2c <_ZN9EtherCard11udpTransmitEj>:
    1c2c:	0f 93       	push	r16
    1c2e:	1f 93       	push	r17
    1c30:	cf 93       	push	r28
    1c32:	df 93       	push	r29
    1c34:	ec 01       	movw	r28, r24
    1c36:	08 e9       	ldi	r16, 0x98	; 152
    1c38:	13 e0       	ldi	r17, 0x03	; 3
    1c3a:	4c 96       	adiw	r24, 0x1c	; 28
    1c3c:	f8 01       	movw	r30, r16
    1c3e:	90 8b       	std	Z+16, r25	; 0x10
    1c40:	81 8b       	std	Z+17, r24	; 0x11
    1c42:	a4 de       	rcall	.-696    	; 0x198c <_ZL20fill_ip_hdr_checksumv>
    1c44:	ce 01       	movw	r24, r28
    1c46:	08 96       	adiw	r24, 0x08	; 8
    1c48:	f8 01       	movw	r30, r16
    1c4a:	96 a3       	std	Z+38, r25	; 0x26
    1c4c:	87 a3       	std	Z+39, r24	; 0x27
    1c4e:	ae 01       	movw	r20, r28
    1c50:	40 5f       	subi	r20, 0xF0	; 240
    1c52:	5f 4f       	sbci	r21, 0xFF	; 255
    1c54:	21 e0       	ldi	r18, 0x01	; 1
    1c56:	6a e1       	ldi	r22, 0x1A	; 26
    1c58:	88 e2       	ldi	r24, 0x28	; 40
    1c5a:	fd dd       	rcall	.-1030   	; 0x1856 <_ZL13fill_checksumhhjh>
    1c5c:	ce 01       	movw	r24, r28
    1c5e:	8a 96       	adiw	r24, 0x2a	; 42
    1c60:	bd dc       	rcall	.-1670   	; 0x15dc <_ZN8ENC28J6010packetSendEj>
    1c62:	df 91       	pop	r29
    1c64:	cf 91       	pop	r28
    1c66:	1f 91       	pop	r17
    1c68:	0f 91       	pop	r16
    1c6a:	08 95       	ret

00001c6c <_ZN9EtherCard7sendUdpEPKhjjS1_j>:
    1c6c:	0f 93       	push	r16
    1c6e:	1f 93       	push	r17
    1c70:	cf 93       	push	r28
    1c72:	df 93       	push	r29
    1c74:	d6 2f       	mov	r29, r22
    1c76:	c7 2f       	mov	r28, r23
    1c78:	ca 01       	movw	r24, r20
    1c7a:	a8 01       	movw	r20, r16
    1c7c:	b9 01       	movw	r22, r18
    1c7e:	84 df       	rcall	.-248    	; 0x1b88 <_ZN9EtherCard10udpPrepareEjPKhj>
    1c80:	8d 2f       	mov	r24, r29
    1c82:	9c 2f       	mov	r25, r28
    1c84:	81 30       	cpi	r24, 0x01	; 1
    1c86:	22 e0       	ldi	r18, 0x02	; 2
    1c88:	92 07       	cpc	r25, r18
    1c8a:	10 f0       	brcs	.+4      	; 0x1c90 <_ZN9EtherCard7sendUdpEPKhjjS1_j+0x24>
    1c8c:	80 e0       	ldi	r24, 0x00	; 0
    1c8e:	92 e0       	ldi	r25, 0x02	; 2
    1c90:	cd df       	rcall	.-102    	; 0x1c2c <_ZN9EtherCard11udpTransmitEj>
    1c92:	df 91       	pop	r29
    1c94:	cf 91       	pop	r28
    1c96:	1f 91       	pop	r17
    1c98:	0f 91       	pop	r16
    1c9a:	08 95       	ret

00001c9c <_ZN9EtherCard7setGwIpEPKh>:
    1c9c:	10 92 99 05 	sts	0x0599, r1	; 0x800599 <_ZN9EtherCard8delaycntE+0x1>
    1ca0:	10 92 98 05 	sts	0x0598, r1	; 0x800598 <_ZN9EtherCard8delaycntE>
    1ca4:	21 e0       	ldi	r18, 0x01	; 1
    1ca6:	20 93 c7 05 	sts	0x05C7, r18	; 0x8005c7 <_ZL9waitgwmac>
    1caa:	bc 01       	movw	r22, r24
    1cac:	88 ea       	ldi	r24, 0xA8	; 168
    1cae:	95 e0       	ldi	r25, 0x05	; 5
    1cb0:	e6 c3       	rjmp	.+1996   	; 0x247e <_ZN9EtherCard6copyIpEPhPKh>
    1cb2:	08 95       	ret

00001cb4 <_ZN9EtherCard22updateBroadcastAddressEv>:
    1cb4:	cf 93       	push	r28
    1cb6:	df 93       	push	r29
    1cb8:	e4 eb       	ldi	r30, 0xB4	; 180
    1cba:	f5 e0       	ldi	r31, 0x05	; 5
    1cbc:	c0 eb       	ldi	r28, 0xB0	; 176
    1cbe:	d5 e0       	ldi	r29, 0x05	; 5
    1cc0:	ac ea       	ldi	r26, 0xAC	; 172
    1cc2:	b5 e0       	ldi	r27, 0x05	; 5
    1cc4:	28 eb       	ldi	r18, 0xB8	; 184
    1cc6:	35 e0       	ldi	r19, 0x05	; 5
    1cc8:	91 91       	ld	r25, Z+
    1cca:	89 91       	ld	r24, Y+
    1ccc:	80 95       	com	r24
    1cce:	89 2b       	or	r24, r25
    1cd0:	8d 93       	st	X+, r24
    1cd2:	e2 17       	cp	r30, r18
    1cd4:	f3 07       	cpc	r31, r19
    1cd6:	c1 f7       	brne	.-16     	; 0x1cc8 <_ZN9EtherCard22updateBroadcastAddressEv+0x14>
    1cd8:	df 91       	pop	r29
    1cda:	cf 91       	pop	r28
    1cdc:	08 95       	ret

00001cde <_ZN9EtherCard6acceptEjj>:

uint16_t EtherCard::accept(const uint16_t port, uint16_t plen) {
    1cde:	ff 92       	push	r15
    1ce0:	0f 93       	push	r16
    1ce2:	1f 93       	push	r17
    1ce4:	cf 93       	push	r28
    1ce6:	df 93       	push	r29
    uint16_t pos;

    if (gPB[TCP_DST_PORT_H_P] == (port >> 8) &&
    1ce8:	20 91 bc 03 	lds	r18, 0x03BC	; 0x8003bc <_ZN8ENC28J606bufferE+0x24>
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	49 2f       	mov	r20, r25
    1cf0:	55 27       	eor	r21, r21
    1cf2:	24 17       	cp	r18, r20
    1cf4:	35 07       	cpc	r19, r21
    1cf6:	09 f0       	breq	.+2      	; 0x1cfa <_ZN9EtherCard6acceptEjj+0x1c>
    1cf8:	61 c0       	rjmp	.+194    	; 0x1dbc <_ZN9EtherCard6acceptEjj+0xde>
    1cfa:	20 91 bd 03 	lds	r18, 0x03BD	; 0x8003bd <_ZN8ENC28J606bufferE+0x25>
    1cfe:	30 e0       	ldi	r19, 0x00	; 0
    1d00:	99 27       	eor	r25, r25
    1d02:	28 17       	cp	r18, r24
    1d04:	39 07       	cpc	r19, r25
    1d06:	09 f0       	breq	.+2      	; 0x1d0a <_ZN9EtherCard6acceptEjj+0x2c>
    1d08:	5c c0       	rjmp	.+184    	; 0x1dc2 <_ZN9EtherCard6acceptEjj+0xe4>
    1d0a:	8b 01       	movw	r16, r22
            gPB[TCP_DST_PORT_L_P] == ((uint8_t) port))
    {   //Packet targeted at specified port
        if (gPB[TCP_FLAGS_P] & TCP_FLAGS_SYN_V)
    1d0c:	f0 90 c7 03 	lds	r15, 0x03C7	; 0x8003c7 <_ZN8ENC28J606bufferE+0x2f>
    1d10:	f1 fe       	sbrs	r15, 1
    1d12:	2d c0       	rjmp	.+90     	; 0x1d6e <_ZN9EtherCard6acceptEjj+0x90>
    fill_checksum(UDP_CHECKSUM_H_P, IP_SRC_P, 16 + datalen,1);
    packetSend(UDP_HEADER_LEN+IP_HEADER_LEN+ETH_HEADER_LEN+datalen);
}

static void make_tcp_synack_from_syn() {
    gPB[IP_TOTLEN_H_P] = 0;
    1d14:	c8 e9       	ldi	r28, 0x98	; 152
    1d16:	d3 e0       	ldi	r29, 0x03	; 3
    1d18:	18 8a       	std	Y+16, r1	; 0x10
    gPB[IP_TOTLEN_L_P] = IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+4;
    1d1a:	8c e2       	ldi	r24, 0x2C	; 44
    1d1c:	89 8b       	std	Y+17, r24	; 0x11
    make_eth_ip();
    1d1e:	8f de       	rcall	.-738    	; 0x1a3e <_ZL11make_eth_ipv>
    gPB[TCP_FLAGS_P] = TCP_FLAGS_SYNACK_V;
    1d20:	82 e1       	ldi	r24, 0x12	; 18
    1d22:	8f a7       	std	Y+47, r24	; 0x2f
    make_tcphead(1,0);
    1d24:	60 e0       	ldi	r22, 0x00	; 0
    1d26:	81 e0       	ldi	r24, 0x01	; 1
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	3f de       	rcall	.-898    	; 0x19aa <_ZL12make_tcpheadjh>
    gPB[TCP_SEQ_H_P+0] = 0;
    1d2c:	1e a2       	std	Y+38, r1	; 0x26
    gPB[TCP_SEQ_H_P+1] = 0;
    1d2e:	1f a2       	std	Y+39, r1	; 0x27
    gPB[TCP_SEQ_H_P+2] = seqnum;
    1d30:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <_ZL6seqnum>
    1d34:	88 a7       	std	Y+40, r24	; 0x28
    gPB[TCP_SEQ_H_P+3] = 0;
    1d36:	19 a6       	std	Y+41, r1	; 0x29
    seqnum += 3;
    1d38:	8d 5f       	subi	r24, 0xFD	; 253
    1d3a:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <_ZL6seqnum>
    gPB[TCP_OPTIONS_P] = 2;
    1d3e:	82 e0       	ldi	r24, 0x02	; 2
    1d40:	8e ab       	std	Y+54, r24	; 0x36
    gPB[TCP_OPTIONS_P+1] = 4;
    1d42:	84 e0       	ldi	r24, 0x04	; 4
    1d44:	8f ab       	std	Y+55, r24	; 0x37
    gPB[TCP_OPTIONS_P+2] = 0x05;
    1d46:	85 e0       	ldi	r24, 0x05	; 5
    1d48:	88 af       	std	Y+56, r24	; 0x38
    gPB[TCP_OPTIONS_P+3] = 0x0;
    1d4a:	19 ae       	std	Y+57, r1	; 0x39
    gPB[TCP_HEADER_LEN_P] = 0x60;
    1d4c:	90 e6       	ldi	r25, 0x60	; 96
    1d4e:	9e a7       	std	Y+46, r25	; 0x2e
    gPB[TCP_WIN_SIZE] = 0x5; // 1400=0x578
    1d50:	88 ab       	std	Y+48, r24	; 0x30
    gPB[TCP_WIN_SIZE+1] = 0x78;
    1d52:	88 e7       	ldi	r24, 0x78	; 120
    1d54:	89 ab       	std	Y+49, r24	; 0x31
    fill_checksum(TCP_CHECKSUM_H_P, IP_SRC_P, 8+TCP_HEADER_LEN_PLAIN+4,2);
    1d56:	22 e0       	ldi	r18, 0x02	; 2
    1d58:	40 e2       	ldi	r20, 0x20	; 32
    1d5a:	50 e0       	ldi	r21, 0x00	; 0
    1d5c:	6a e1       	ldi	r22, 0x1A	; 26
    1d5e:	82 e3       	ldi	r24, 0x32	; 50
    1d60:	7a dd       	rcall	.-1292   	; 0x1856 <_ZL13fill_checksumhhjh>
    EtherCard::packetSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+4+ETH_HEADER_LEN);
    1d62:	8a e3       	ldi	r24, 0x3A	; 58
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	3a dc       	rcall	.-1932   	; 0x15dc <_ZN8ENC28J6010packetSendEj>
    1d68:	c0 e0       	ldi	r28, 0x00	; 0
            }
            else if (gPB[TCP_FLAGS_P] & TCP_FLAGS_FIN_V)
                make_tcp_ack_from_any(0,0); //No data so close connection
        }
    }
    return 0;
    1d6a:	d0 e0       	ldi	r29, 0x00	; 0
    1d6c:	2f c0       	rjmp	.+94     	; 0x1dcc <_ZN9EtherCard6acceptEjj+0xee>
    if (gPB[TCP_DST_PORT_H_P] == (port >> 8) &&
            gPB[TCP_DST_PORT_L_P] == ((uint8_t) port))
    {   //Packet targeted at specified port
        if (gPB[TCP_FLAGS_P] & TCP_FLAGS_SYN_V)
            make_tcp_synack_from_syn(); //send SYN+ACK
        else if (gPB[TCP_FLAGS_P] & TCP_FLAGS_ACK_V)
    1d6e:	f4 fe       	sbrs	r15, 4
    1d70:	2b c0       	rjmp	.+86     	; 0x1dc8 <_ZN9EtherCard6acceptEjj+0xea>
        {   //This is an acknowledgement to our SYN+ACK so let's start processing that payload
            info_data_len = getTcpPayloadLength();
    1d72:	ed de       	rcall	.-550    	; 0x1b4e <_ZN9EtherCard19getTcpPayloadLengthEv>
    1d74:	ec 01       	movw	r28, r24
    1d76:	90 93 c6 05 	sts	0x05C6, r25	; 0x8005c6 <_ZL13info_data_len+0x1>
    1d7a:	80 93 c5 05 	sts	0x05C5, r24	; 0x8005c5 <_ZL13info_data_len>
    1d7e:	89 2b       	or	r24, r25
            if (info_data_len > 0)
    1d80:	b1 f0       	breq	.+44     	; 0x1dae <_ZN9EtherCard6acceptEjj+0xd0>
    1d82:	c0 91 c6 03 	lds	r28, 0x03C6	; 0x8003c6 <_ZN8ENC28J606bufferE+0x2e>
            {   //Got some data
                pos = TCP_DATA_START; // TCP_DATA_START is a formula
    1d86:	d0 e0       	ldi	r29, 0x00	; 0
    1d88:	d5 95       	asr	r29
    1d8a:	c7 95       	ror	r28
    1d8c:	d5 95       	asr	r29
    1d8e:	c7 95       	ror	r28
    1d90:	d5 95       	asr	r29
    1d92:	c7 95       	ror	r28
    1d94:	d5 95       	asr	r29
    1d96:	c7 95       	ror	r28
    1d98:	cc 0f       	add	r28, r28
    1d9a:	dd 1f       	adc	r29, r29
    1d9c:	cc 0f       	add	r28, r28
    1d9e:	dd 1f       	adc	r29, r29
    1da0:	a2 96       	adiw	r28, 0x22	; 34
    1da2:	0c 17       	cp	r16, r28
                //!@todo no idea what this check pos<=plen-8 does; changed this to pos<=plen as otw. perfectly valid tcp packets are ignored; still if anybody has any idea please leave a comment
                if (pos <= plen)
    1da4:	1d 07       	cpc	r17, r29
    1da6:	90 f4       	brcc	.+36     	; 0x1dcc <_ZN9EtherCard6acceptEjj+0xee>
    1da8:	c0 e0       	ldi	r28, 0x00	; 0
            }
            else if (gPB[TCP_FLAGS_P] & TCP_FLAGS_FIN_V)
                make_tcp_ack_from_any(0,0); //No data so close connection
        }
    }
    return 0;
    1daa:	d0 e0       	ldi	r29, 0x00	; 0
    1dac:	0f c0       	rjmp	.+30     	; 0x1dcc <_ZN9EtherCard6acceptEjj+0xee>
    1dae:	f0 fe       	sbrs	r15, 0
                pos = TCP_DATA_START; // TCP_DATA_START is a formula
                //!@todo no idea what this check pos<=plen-8 does; changed this to pos<=plen as otw. perfectly valid tcp packets are ignored; still if anybody has any idea please leave a comment
                if (pos <= plen)
                    return pos;
            }
            else if (gPB[TCP_FLAGS_P] & TCP_FLAGS_FIN_V)
    1db0:	0d c0       	rjmp	.+26     	; 0x1dcc <_ZN9EtherCard6acceptEjj+0xee>
                make_tcp_ack_from_any(0,0); //No data so close connection
    1db2:	60 e0       	ldi	r22, 0x00	; 0
    1db4:	80 e0       	ldi	r24, 0x00	; 0
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	51 de       	rcall	.-862    	; 0x1a5c <_ZL21make_tcp_ack_from_anyih>
    1dba:	08 c0       	rjmp	.+16     	; 0x1dcc <_ZN9EtherCard6acceptEjj+0xee>
    1dbc:	c0 e0       	ldi	r28, 0x00	; 0
        }
    }
    return 0;
    1dbe:	d0 e0       	ldi	r29, 0x00	; 0
    1dc0:	05 c0       	rjmp	.+10     	; 0x1dcc <_ZN9EtherCard6acceptEjj+0xee>
    1dc2:	c0 e0       	ldi	r28, 0x00	; 0
    1dc4:	d0 e0       	ldi	r29, 0x00	; 0
    1dc6:	02 c0       	rjmp	.+4      	; 0x1dcc <_ZN9EtherCard6acceptEjj+0xee>
    1dc8:	c0 e0       	ldi	r28, 0x00	; 0
    1dca:	d0 e0       	ldi	r29, 0x00	; 0
    1dcc:	ce 01       	movw	r24, r28
}
    1dce:	df 91       	pop	r29
    1dd0:	cf 91       	pop	r28
    1dd2:	1f 91       	pop	r17
    1dd4:	0f 91       	pop	r16
    1dd6:	ff 90       	pop	r15
    1dd8:	08 95       	ret

00001dda <_ZN9EtherCard10packetLoopEj>:
    1dda:	ef 92       	push	r14

uint16_t EtherCard::packetLoop (uint16_t plen) {
    1ddc:	ff 92       	push	r15
    1dde:	0f 93       	push	r16
    1de0:	1f 93       	push	r17
    1de2:	cf 93       	push	r28
    1de4:	df 93       	push	r29
    1de6:	ec 01       	movw	r28, r24
    uint16_t len;

#if ETHERCARD_DHCP
    if(using_dhcp) {
    1de8:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <_ZN9EtherCard10using_dhcpE>
    1dec:	88 23       	and	r24, r24
    1dee:	11 f0       	breq	.+4      	; 0x1df4 <_ZN9EtherCard10packetLoopEj+0x1a>
        ether.DhcpStateMachine(plen);
    1df0:	ce 01       	movw	r24, r28
    1df2:	54 d9       	rcall	.-3416   	; 0x109c <_ZN9EtherCard16DhcpStateMachineEj>
    }
#endif

    if (plen==0) {
    1df4:	20 97       	sbiw	r28, 0x00	; 0
    1df6:	09 f0       	breq	.+2      	; 0x1dfa <_ZN9EtherCard10packetLoopEj+0x20>
    1df8:	ac c0       	rjmp	.+344    	; 0x1f52 <_ZN9EtherCard10packetLoopEj+0x178>
        //Check every 65536 (no-packet) cycles whether we need to retry ARP request for gateway
        if ((waitgwmac & WGW_INITIAL_ARP || waitgwmac & WGW_REFRESHING) &&
    1dfa:	80 91 c7 05 	lds	r24, 0x05C7	; 0x8005c7 <_ZL9waitgwmac>
    1dfe:	85 70       	andi	r24, 0x05	; 5
    1e00:	89 f0       	breq	.+34     	; 0x1e24 <_ZN9EtherCard10packetLoopEj+0x4a>
    1e02:	80 91 98 05 	lds	r24, 0x0598	; 0x800598 <_ZN9EtherCard8delaycntE>
    1e06:	90 91 99 05 	lds	r25, 0x0599	; 0x800599 <_ZN9EtherCard8delaycntE+0x1>
    1e0a:	89 2b       	or	r24, r25
                delaycnt==0 && isLinkUp()) {
    1e0c:	59 f4       	brne	.+22     	; 0x1e24 <_ZN9EtherCard10packetLoopEj+0x4a>
    1e0e:	d3 db       	rcall	.-2138   	; 0x15b6 <_ZN8ENC28J608isLinkUpEv>
    }
#endif

    if (plen==0) {
        //Check every 65536 (no-packet) cycles whether we need to retry ARP request for gateway
        if ((waitgwmac & WGW_INITIAL_ARP || waitgwmac & WGW_REFRESHING) &&
    1e10:	88 23       	and	r24, r24
    1e12:	41 f0       	breq	.+16     	; 0x1e24 <_ZN9EtherCard10packetLoopEj+0x4a>
                delaycnt==0 && isLinkUp()) {
            client_arp_whohas(gwip);
    1e14:	88 ea       	ldi	r24, 0xA8	; 168
    1e16:	95 e0       	ldi	r25, 0x05	; 5
    1e18:	54 de       	rcall	.-856    	; 0x1ac2 <_ZL17client_arp_whohasPh>
            waitgwmac |= WGW_ACCEPT_ARP_REPLY;
    1e1a:	80 91 c7 05 	lds	r24, 0x05C7	; 0x8005c7 <_ZL9waitgwmac>
    1e1e:	88 60       	ori	r24, 0x08	; 8
    1e20:	80 93 c7 05 	sts	0x05C7, r24	; 0x8005c7 <_ZL9waitgwmac>
        }
        delaycnt++;
    1e24:	80 91 98 05 	lds	r24, 0x0598	; 0x800598 <_ZN9EtherCard8delaycntE>
    1e28:	90 91 99 05 	lds	r25, 0x0599	; 0x800599 <_ZN9EtherCard8delaycntE+0x1>
    1e2c:	01 96       	adiw	r24, 0x01	; 1
    1e2e:	90 93 99 05 	sts	0x0599, r25	; 0x800599 <_ZN9EtherCard8delaycntE+0x1>
    1e32:	80 93 98 05 	sts	0x0598, r24	; 0x800598 <_ZN9EtherCard8delaycntE>

#if ETHERCARD_TCPCLIENT
        //Initiate TCP/IP session if pending
        if (tcp_client_state==TCP_STATE_SENDSYN && (waitgwmac & WGW_HAVE_GW_MAC)) { // send a syn
    1e36:	80 91 e0 05 	lds	r24, 0x05E0	; 0x8005e0 <_ZL16tcp_client_state>
    1e3a:	81 30       	cpi	r24, 0x01	; 1
    1e3c:	09 f0       	breq	.+2      	; 0x1e40 <_ZN9EtherCard10packetLoopEj+0x66>
    1e3e:	68 c0       	rjmp	.+208    	; 0x1f10 <_ZN9EtherCard10packetLoopEj+0x136>
    1e40:	80 91 c7 05 	lds	r24, 0x05C7	; 0x8005c7 <_ZL9waitgwmac>
    1e44:	81 ff       	sbrs	r24, 1
    1e46:	64 c0       	rjmp	.+200    	; 0x1f10 <_ZN9EtherCard10packetLoopEj+0x136>
            tcp_client_state = TCP_STATE_SYNSENT;
    1e48:	82 e0       	ldi	r24, 0x02	; 2
    1e4a:	80 93 e0 05 	sts	0x05E0, r24	; 0x8005e0 <_ZL16tcp_client_state>
            tcpclient_src_port_l++; // allocate a new port
    1e4e:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <_ZL20tcpclient_src_port_l>
    1e52:	8f 5f       	subi	r24, 0xFF	; 255
    1e54:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <_ZL20tcpclient_src_port_l>
            client_syn(((tcp_fd<<5) | (0x1f & tcpclient_src_port_l)),tcp_client_port_h,tcp_client_port_l);
    1e58:	f0 90 de 05 	lds	r15, 0x05DE	; 0x8005de <_ZL17tcp_client_port_l>
    1e5c:	e0 90 df 05 	lds	r14, 0x05DF	; 0x8005df <_ZL17tcp_client_port_h>
    1e60:	20 91 e1 05 	lds	r18, 0x05E1	; 0x8005e1 <_ZL6tcp_fd>
    1e64:	90 e2       	ldi	r25, 0x20	; 32
    1e66:	29 9f       	mul	r18, r25
    1e68:	90 01       	movw	r18, r0
    1e6a:	11 24       	eor	r1, r1
    1e6c:	8f 71       	andi	r24, 0x1F	; 31
    1e6e:	18 2f       	mov	r17, r24
    1e70:	12 2b       	or	r17, r18
    for(uint8_t i=0; i<IP_LEN; i++)
        broadcastip[i] = myip[i] | ~netmask[i];
}

static void client_syn(uint8_t srcport,uint8_t dstport_h,uint8_t dstport_l) {
    if(is_lan(EtherCard::myip, EtherCard::hisip)) {
    1e72:	6c e9       	ldi	r22, 0x9C	; 156
    1e74:	75 e0       	ldi	r23, 0x05	; 5
    1e76:	84 eb       	ldi	r24, 0xB4	; 180
    1e78:	95 e0       	ldi	r25, 0x05	; 5
    1e7a:	5e dd       	rcall	.-1348   	; 0x1938 <_ZL6is_lanPKhS0_>
    1e7c:	88 23       	and	r24, r24
    1e7e:	31 f0       	breq	.+12     	; 0x1e8c <_ZN9EtherCard10packetLoopEj+0xb2>
        setMACandIPs(destmacaddr, EtherCard::hisip);
    1e80:	6c e9       	ldi	r22, 0x9C	; 156
    1e82:	75 e0       	ldi	r23, 0x05	; 5
    1e84:	82 ed       	ldi	r24, 0xD2	; 210
    1e86:	95 e0       	ldi	r25, 0x05	; 5
    1e88:	0c de       	rcall	.-1000   	; 0x1aa2 <_ZL12setMACandIPsPKhS0_>
    1e8a:	05 c0       	rjmp	.+10     	; 0x1e96 <_ZN9EtherCard10packetLoopEj+0xbc>
    } else {
        setMACandIPs(gwmacaddr, EtherCard::hisip);
    1e8c:	6c e9       	ldi	r22, 0x9C	; 156
    1e8e:	75 e0       	ldi	r23, 0x05	; 5
    1e90:	88 ec       	ldi	r24, 0xC8	; 200
    1e92:	95 e0       	ldi	r25, 0x05	; 5
    1e94:	06 de       	rcall	.-1012   	; 0x1aa2 <_ZL12setMACandIPsPKhS0_>
    1e96:	c8 e9       	ldi	r28, 0x98	; 152
    }
    gPB[ETH_TYPE_H_P] = ETHTYPE_IP_H_V;
    1e98:	d3 e0       	ldi	r29, 0x03	; 3
    1e9a:	08 e0       	ldi	r16, 0x08	; 8
    1e9c:	0c 87       	std	Y+12, r16	; 0x0c
    1e9e:	1d 86       	std	Y+13, r1	; 0x0d
    gPB[ETH_TYPE_L_P] = ETHTYPE_IP_L_V;
    1ea0:	49 e0       	ldi	r20, 0x09	; 9
    memcpy_P(gPB + IP_P,iphdr,sizeof iphdr);
    1ea2:	50 e0       	ldi	r21, 0x00	; 0
    1ea4:	6a e7       	ldi	r22, 0x7A	; 122
    1ea6:	72 e0       	ldi	r23, 0x02	; 2
    1ea8:	86 ea       	ldi	r24, 0xA6	; 166
    1eaa:	93 e0       	ldi	r25, 0x03	; 3
    1eac:	0e 94 5f 20 	call	0x40be	; 0x40be <memcpy_P>
    gPB[IP_TOTLEN_L_P] = 44; // good for syn
    1eb0:	8c e2       	ldi	r24, 0x2C	; 44
    1eb2:	89 8b       	std	Y+17, r24	; 0x11
    gPB[IP_PROTO_P] = IP_PROTO_TCP_V;
    1eb4:	86 e0       	ldi	r24, 0x06	; 6
    1eb6:	8f 8b       	std	Y+23, r24	; 0x17
    fill_ip_hdr_checksum();
    1eb8:	69 dd       	rcall	.-1326   	; 0x198c <_ZL20fill_ip_hdr_checksumv>
    1eba:	ec a2       	std	Y+36, r14	; 0x24
    gPB[TCP_DST_PORT_H_P] = dstport_h;
    1ebc:	fd a2       	std	Y+37, r15	; 0x25
    gPB[TCP_DST_PORT_L_P] = dstport_l;
    1ebe:	8b e0       	ldi	r24, 0x0B	; 11
    gPB[TCP_SRC_PORT_H_P] = TCPCLIENT_SRC_PORT_H;
    1ec0:	8a a3       	std	Y+34, r24	; 0x22
    1ec2:	1b a3       	std	Y+35, r17	; 0x23
    gPB[TCP_SRC_PORT_L_P] = srcport; // lower 8 bit of src port
    1ec4:	ee eb       	ldi	r30, 0xBE	; 190
    memset(gPB + TCP_SEQ_H_P, 0, 8);
    1ec6:	f3 e0       	ldi	r31, 0x03	; 3
    1ec8:	df 01       	movw	r26, r30
    1eca:	1d 92       	st	X+, r1
    1ecc:	0a 95       	dec	r16
    1ece:	e9 f7       	brne	.-6      	; 0x1eca <_ZN9EtherCard10packetLoopEj+0xf0>
    1ed0:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <_ZL6seqnum>
    gPB[TCP_SEQ_H_P+2] = seqnum;
    1ed4:	88 a7       	std	Y+40, r24	; 0x28
    1ed6:	8d 5f       	subi	r24, 0xFD	; 253
    seqnum += 3;
    1ed8:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <_ZL6seqnum>
    1edc:	80 e6       	ldi	r24, 0x60	; 96
    gPB[TCP_HEADER_LEN_P] = 0x60; // 0x60=24 len: (0x60>>4) * 4
    1ede:	8e a7       	std	Y+46, r24	; 0x2e
    1ee0:	82 e0       	ldi	r24, 0x02	; 2
    gPB[TCP_FLAGS_P] = TCP_FLAGS_SYN_V;
    1ee2:	8f a7       	std	Y+47, r24	; 0x2f
    1ee4:	93 e0       	ldi	r25, 0x03	; 3
    gPB[TCP_WIN_SIZE] = 0x3; // 1024 = 0x400 768 = 0x300, initial window
    1ee6:	98 ab       	std	Y+48, r25	; 0x30
    1ee8:	19 aa       	std	Y+49, r1	; 0x31
    gPB[TCP_WIN_SIZE+1] = 0x0;
    1eea:	1a aa       	std	Y+50, r1	; 0x32
    gPB[TCP_CHECKSUM_H_P] = 0;
    1eec:	1b aa       	std	Y+51, r1	; 0x33
    gPB[TCP_CHECKSUM_L_P] = 0;
    1eee:	1c aa       	std	Y+52, r1	; 0x34
    gPB[TCP_CHECKSUM_L_P+1] = 0;
    1ef0:	1d aa       	std	Y+53, r1	; 0x35
    gPB[TCP_CHECKSUM_L_P+2] = 0;
    1ef2:	8e ab       	std	Y+54, r24	; 0x36
    gPB[TCP_OPTIONS_P] = 2;
    1ef4:	94 e0       	ldi	r25, 0x04	; 4
    gPB[TCP_OPTIONS_P+1] = 4;
    1ef6:	9f ab       	std	Y+55, r25	; 0x37
    1ef8:	88 af       	std	Y+56, r24	; 0x38
    gPB[TCP_OPTIONS_P+2] = (CLIENTMSS>>8);
    1efa:	86 e2       	ldi	r24, 0x26	; 38
    gPB[TCP_OPTIONS_P+3] = (uint8_t) CLIENTMSS;
    1efc:	89 af       	std	Y+57, r24	; 0x39
    fill_checksum(TCP_CHECKSUM_H_P, IP_SRC_P, 8 +TCP_HEADER_LEN_PLAIN+4,2);
    1efe:	22 e0       	ldi	r18, 0x02	; 2
    1f00:	40 e2       	ldi	r20, 0x20	; 32
    1f02:	50 e0       	ldi	r21, 0x00	; 0
    1f04:	6a e1       	ldi	r22, 0x1A	; 26
    1f06:	82 e3       	ldi	r24, 0x32	; 50
    1f08:	a6 dc       	rcall	.-1716   	; 0x1856 <_ZL13fill_checksumhhjh>
    // 4 is the tcp mss option:
    EtherCard::packetSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+ETH_HEADER_LEN+4);
    1f0a:	8a e3       	ldi	r24, 0x3A	; 58
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	66 db       	rcall	.-2356   	; 0x15dc <_ZN8ENC28J6010packetSendEj>
    1f10:	60 ea       	ldi	r22, 0xA0	; 160
            client_syn(((tcp_fd<<5) | (0x1f & tcpclient_src_port_l)),tcp_client_port_h,tcp_client_port_l);
        }
#endif

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, dnsip) && !has_dns_mac && !waiting_for_dns_mac) {
    1f12:	75 e0       	ldi	r23, 0x05	; 5
    1f14:	84 eb       	ldi	r24, 0xB4	; 180
    1f16:	95 e0       	ldi	r25, 0x05	; 5
    1f18:	0f dd       	rcall	.-1506   	; 0x1938 <_ZL6is_lanPKhS0_>
    1f1a:	88 23       	and	r24, r24
    1f1c:	49 f0       	breq	.+18     	; 0x1f30 <_ZN9EtherCard10packetLoopEj+0x156>
    1f1e:	80 91 d0 05 	lds	r24, 0x05D0	; 0x8005d0 <_ZL11has_dns_mac>
    1f22:	81 11       	cpse	r24, r1
    1f24:	05 c0       	rjmp	.+10     	; 0x1f30 <_ZN9EtherCard10packetLoopEj+0x156>
    1f26:	80 91 d1 05 	lds	r24, 0x05D1	; 0x8005d1 <_ZL19waiting_for_dns_mac>
    1f2a:	88 23       	and	r24, r24
    1f2c:	09 f4       	brne	.+2      	; 0x1f30 <_ZN9EtherCard10packetLoopEj+0x156>
    1f2e:	e7 c1       	rjmp	.+974    	; 0x22fe <__stack+0xff>
    1f30:	6c e9       	ldi	r22, 0x9C	; 156
            client_arp_whohas(dnsip);
            waiting_for_dns_mac = true;
        }

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, hisip) && !has_dest_mac && !waiting_for_dest_mac) {
    1f32:	75 e0       	ldi	r23, 0x05	; 5
    1f34:	84 eb       	ldi	r24, 0xB4	; 180
    1f36:	95 e0       	ldi	r25, 0x05	; 5
    1f38:	ff dc       	rcall	.-1538   	; 0x1938 <_ZL6is_lanPKhS0_>
    1f3a:	88 23       	and	r24, r24
    1f3c:	09 f4       	brne	.+2      	; 0x1f40 <_ZN9EtherCard10packetLoopEj+0x166>
    1f3e:	af c1       	rjmp	.+862    	; 0x229e <__stack+0x9f>
    1f40:	80 91 ce 05 	lds	r24, 0x05CE	; 0x8005ce <_ZL12has_dest_mac>
    1f44:	81 11       	cpse	r24, r1
    1f46:	ae c1       	rjmp	.+860    	; 0x22a4 <__stack+0xa5>
    1f48:	80 91 cf 05 	lds	r24, 0x05CF	; 0x8005cf <_ZL20waiting_for_dest_mac>
    1f4c:	81 11       	cpse	r24, r1
    1f4e:	ad c1       	rjmp	.+858    	; 0x22aa <__stack+0xab>
    1f50:	dd c1       	rjmp	.+954    	; 0x230c <__stack+0x10d>
    1f52:	c9 32       	cpi	r28, 0x29	; 41
    1f54:	d1 05       	cpc	r29, r1
    return true;
}

static uint8_t eth_type_is_arp_and_my_ip(uint16_t len) {
    return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
    1f56:	08 f4       	brcc	.+2      	; 0x1f5a <_ZN9EtherCard10packetLoopEj+0x180>
    1f58:	e2 c1       	rjmp	.+964    	; 0x231e <__stack+0x11f>
    1f5a:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <_ZN8ENC28J606bufferE+0xc>
        }
    return true;
}

static uint8_t eth_type_is_arp_and_my_ip(uint16_t len) {
    return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
    1f5e:	88 30       	cpi	r24, 0x08	; 8
    1f60:	09 f0       	breq	.+2      	; 0x1f64 <_ZN9EtherCard10packetLoopEj+0x18a>
    1f62:	a6 c1       	rjmp	.+844    	; 0x22b0 <__stack+0xb1>
    1f64:	80 91 a5 03 	lds	r24, 0x03A5	; 0x8003a5 <_ZN8ENC28J606bufferE+0xd>
    1f68:	86 30       	cpi	r24, 0x06	; 6
    1f6a:	09 f0       	breq	.+2      	; 0x1f6e <_ZN9EtherCard10packetLoopEj+0x194>
    1f6c:	f7 c1       	rjmp	.+1006   	; 0x235c <__stack+0x15d>
    1f6e:	44 e0       	ldi	r20, 0x04	; 4
    1f70:	50 e0       	ldi	r21, 0x00	; 0
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
           memcmp(gPB + ETH_ARP_DST_IP_P, EtherCard::myip, IP_LEN) == 0;
    1f72:	64 eb       	ldi	r22, 0xB4	; 180
    1f74:	75 e0       	ldi	r23, 0x05	; 5
    1f76:	8e eb       	ldi	r24, 0xBE	; 190
    1f78:	93 e0       	ldi	r25, 0x03	; 3
    1f7a:	0e 94 68 20 	call	0x40d0	; 0x40d0 <memcmp>
    1f7e:	89 2b       	or	r24, r25
    return true;
}

static uint8_t eth_type_is_arp_and_my_ip(uint16_t len) {
    return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
    1f80:	09 f0       	breq	.+2      	; 0x1f84 <_ZN9EtherCard10packetLoopEj+0x1aa>
    1f82:	ec c1       	rjmp	.+984    	; 0x235c <__stack+0x15d>
    1f84:	d3 c1       	rjmp	.+934    	; 0x232c <__stack+0x12d>
    1f86:	8e e9       	ldi	r24, 0x9E	; 158
    gPB[TCP_CHECKSUM_L_P] = 0;
    gPB[TCP_HEADER_LEN_P] = 0x50;
}

static void make_arp_answer_from_request() {
    setMACs(gPB + ETH_SRC_MAC);
    1f88:	93 e0       	ldi	r25, 0x03	; 3
    1f8a:	4f dd       	rcall	.-1378   	; 0x1a2a <_ZL7setMACsPKh>
    1f8c:	e8 e9       	ldi	r30, 0x98	; 152
    gPB[ETH_ARP_OPCODE_H_P] = ETH_ARP_OPCODE_REPLY_H_V;
    1f8e:	f3 e0       	ldi	r31, 0x03	; 3
    1f90:	14 8a       	std	Z+20, r1	; 0x14
    gPB[ETH_ARP_OPCODE_L_P] = ETH_ARP_OPCODE_REPLY_L_V;
    1f92:	82 e0       	ldi	r24, 0x02	; 2
    1f94:	85 8b       	std	Z+21, r24	; 0x15
    EtherCard::copyMac(gPB + ETH_ARP_DST_MAC_P, gPB + ETH_ARP_SRC_MAC_P);
    1f96:	6e ea       	ldi	r22, 0xAE	; 174
    1f98:	73 e0       	ldi	r23, 0x03	; 3
    1f9a:	88 eb       	ldi	r24, 0xB8	; 184
    1f9c:	93 e0       	ldi	r25, 0x03	; 3
    1f9e:	7c d2       	rcall	.+1272   	; 0x2498 <_ZN9EtherCard7copyMacEPhPKh>
    EtherCard::copyMac(gPB + ETH_ARP_SRC_MAC_P, EtherCard::mymac);
    1fa0:	68 eb       	ldi	r22, 0xB8	; 184
    1fa2:	75 e0       	ldi	r23, 0x05	; 5
    1fa4:	8e ea       	ldi	r24, 0xAE	; 174
    1fa6:	93 e0       	ldi	r25, 0x03	; 3
    EtherCard::copyIp(gPB + ETH_ARP_DST_IP_P, gPB + ETH_ARP_SRC_IP_P);
    1fa8:	77 d2       	rcall	.+1262   	; 0x2498 <_ZN9EtherCard7copyMacEPhPKh>
    1faa:	64 eb       	ldi	r22, 0xB4	; 180
    1fac:	73 e0       	ldi	r23, 0x03	; 3
    1fae:	8e eb       	ldi	r24, 0xBE	; 190
    1fb0:	93 e0       	ldi	r25, 0x03	; 3
    1fb2:	65 d2       	rcall	.+1226   	; 0x247e <_ZN9EtherCard6copyIpEPhPKh>
    EtherCard::copyIp(gPB + ETH_ARP_SRC_IP_P, EtherCard::myip);
    1fb4:	64 eb       	ldi	r22, 0xB4	; 180
    1fb6:	75 e0       	ldi	r23, 0x05	; 5
    1fb8:	84 eb       	ldi	r24, 0xB4	; 180
    1fba:	93 e0       	ldi	r25, 0x03	; 3
    1fbc:	60 d2       	rcall	.+1216   	; 0x247e <_ZN9EtherCard6copyIpEPhPKh>
    EtherCard::packetSend(42);
    1fbe:	8a e2       	ldi	r24, 0x2A	; 42
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	0c db       	rcall	.-2536   	; 0x15dc <_ZN8ENC28J6010packetSendEj>
    1fc4:	80 91 c7 05 	lds	r24, 0x05C7	; 0x8005c7 <_ZL9waitgwmac>

    if (eth_type_is_arp_and_my_ip(plen))
    {   //Service ARP request
        if (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REQ_L_V)
            make_arp_answer_from_request();
        if (waitgwmac & WGW_ACCEPT_ARP_REPLY && (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REPLY_L_V) && client_store_mac(gwip, gwmacaddr))
    1fc8:	83 ff       	sbrs	r24, 3
    1fca:	0e c0       	rjmp	.+28     	; 0x1fe8 <_ZN9EtherCard10packetLoopEj+0x20e>
    1fcc:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <_ZN8ENC28J606bufferE+0x15>
    1fd0:	82 30       	cpi	r24, 0x02	; 2
    1fd2:	51 f4       	brne	.+20     	; 0x1fe8 <_ZN9EtherCard10packetLoopEj+0x20e>
    1fd4:	68 ec       	ldi	r22, 0xC8	; 200
    1fd6:	75 e0       	ldi	r23, 0x05	; 5
    1fd8:	88 ea       	ldi	r24, 0xA8	; 168
    1fda:	95 e0       	ldi	r25, 0x05	; 5
    1fdc:	a2 dd       	rcall	.-1212   	; 0x1b22 <_ZL16client_store_macPhS_>
    1fde:	88 23       	and	r24, r24
    1fe0:	19 f0       	breq	.+6      	; 0x1fe8 <_ZN9EtherCard10packetLoopEj+0x20e>
    1fe2:	82 e0       	ldi	r24, 0x02	; 2
            waitgwmac = WGW_HAVE_GW_MAC;
    1fe4:	80 93 c7 05 	sts	0x05C7, r24	; 0x8005c7 <_ZL9waitgwmac>
    1fe8:	80 91 d0 05 	lds	r24, 0x05D0	; 0x8005d0 <_ZL11has_dns_mac>
        if (!has_dns_mac && waiting_for_dns_mac && client_store_mac(dnsip, destmacaddr)) {
    1fec:	81 11       	cpse	r24, r1
    1fee:	10 c0       	rjmp	.+32     	; 0x2010 <_ZN9EtherCard10packetLoopEj+0x236>
    1ff0:	80 91 d1 05 	lds	r24, 0x05D1	; 0x8005d1 <_ZL19waiting_for_dns_mac>
    1ff4:	88 23       	and	r24, r24
    1ff6:	61 f0       	breq	.+24     	; 0x2010 <_ZN9EtherCard10packetLoopEj+0x236>
    1ff8:	62 ed       	ldi	r22, 0xD2	; 210
    1ffa:	75 e0       	ldi	r23, 0x05	; 5
    1ffc:	80 ea       	ldi	r24, 0xA0	; 160
    1ffe:	95 e0       	ldi	r25, 0x05	; 5
    2000:	90 dd       	rcall	.-1248   	; 0x1b22 <_ZL16client_store_macPhS_>
    2002:	88 23       	and	r24, r24
    2004:	29 f0       	breq	.+10     	; 0x2010 <_ZN9EtherCard10packetLoopEj+0x236>
    2006:	81 e0       	ldi	r24, 0x01	; 1
            has_dns_mac = true;
    2008:	80 93 d0 05 	sts	0x05D0, r24	; 0x8005d0 <_ZL11has_dns_mac>
    200c:	10 92 d1 05 	sts	0x05D1, r1	; 0x8005d1 <_ZL19waiting_for_dns_mac>
            waiting_for_dns_mac = false;
    2010:	80 91 ce 05 	lds	r24, 0x05CE	; 0x8005ce <_ZL12has_dest_mac>
        }
        if (!has_dest_mac && waiting_for_dest_mac && client_store_mac(hisip, destmacaddr)) {
    2014:	81 11       	cpse	r24, r1
    2016:	4f c1       	rjmp	.+670    	; 0x22b6 <__stack+0xb7>
    2018:	80 91 cf 05 	lds	r24, 0x05CF	; 0x8005cf <_ZL20waiting_for_dest_mac>
    201c:	88 23       	and	r24, r24
    201e:	09 f4       	brne	.+2      	; 0x2022 <_ZN9EtherCard10packetLoopEj+0x248>
    2020:	4d c1       	rjmp	.+666    	; 0x22bc <__stack+0xbd>
    2022:	62 ed       	ldi	r22, 0xD2	; 210
    2024:	75 e0       	ldi	r23, 0x05	; 5
    2026:	8c e9       	ldi	r24, 0x9C	; 156
    2028:	95 e0       	ldi	r25, 0x05	; 5
    202a:	7b dd       	rcall	.-1290   	; 0x1b22 <_ZL16client_store_macPhS_>
    202c:	88 23       	and	r24, r24
    202e:	09 f4       	brne	.+2      	; 0x2032 <_ZN9EtherCard10packetLoopEj+0x258>
    2030:	48 c1       	rjmp	.+656    	; 0x22c2 <__stack+0xc3>
    2032:	81 e0       	ldi	r24, 0x01	; 1
    2034:	80 93 ce 05 	sts	0x05CE, r24	; 0x8005ce <_ZL12has_dest_mac>
            has_dest_mac = true;
    2038:	10 92 cf 05 	sts	0x05CF, r1	; 0x8005cf <_ZL20waiting_for_dest_mac>
            waiting_for_dest_mac = false;
    203c:	80 e0       	ldi	r24, 0x00	; 0
    203e:	90 e0       	ldi	r25, 0x00	; 0
        }
        return 0;
    2040:	93 c1       	rjmp	.+806    	; 0x2368 <__stack+0x169>
    2042:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <_ZN8ENC28J606bufferE+0xc>
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
           memcmp(gPB + ETH_ARP_DST_IP_P, EtherCard::myip, IP_LEN) == 0;
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
    2046:	88 30       	cpi	r24, 0x08	; 8
    2048:	09 f0       	breq	.+2      	; 0x204c <_ZN9EtherCard10packetLoopEj+0x272>
    204a:	3e c1       	rjmp	.+636    	; 0x22c8 <__stack+0xc9>
    204c:	80 91 a5 03 	lds	r24, 0x03A5	; 0x8003a5 <_ZN8ENC28J606bufferE+0xd>
    2050:	81 11       	cpse	r24, r1
    2052:	3d c1       	rjmp	.+634    	; 0x22ce <__stack+0xcf>
    2054:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <_ZN8ENC28J606bufferE+0xe>
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
    2058:	85 34       	cpi	r24, 0x45	; 69
    205a:	09 f0       	breq	.+2      	; 0x205e <_ZN9EtherCard10packetLoopEj+0x284>
    205c:	3b c1       	rjmp	.+630    	; 0x22d4 <__stack+0xd5>
    205e:	44 e0       	ldi	r20, 0x04	; 4
    2060:	50 e0       	ldi	r21, 0x00	; 0
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
           (memcmp(gPB + IP_DST_P, EtherCard::myip, IP_LEN) == 0  //not my IP
    2062:	64 eb       	ldi	r22, 0xB4	; 180
    2064:	75 e0       	ldi	r23, 0x05	; 5
    2066:	86 eb       	ldi	r24, 0xB6	; 182
    2068:	93 e0       	ldi	r25, 0x03	; 3
    206a:	0e 94 68 20 	call	0x40d0	; 0x40d0 <memcmp>
    206e:	89 2b       	or	r24, r25
    2070:	09 f4       	brne	.+2      	; 0x2074 <_ZN9EtherCard10packetLoopEj+0x29a>
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
    2072:	62 c1       	rjmp	.+708    	; 0x2338 <__stack+0x139>
    2074:	44 e0       	ldi	r20, 0x04	; 4
    2076:	50 e0       	ldi	r21, 0x00	; 0
           (memcmp(gPB + IP_DST_P, EtherCard::myip, IP_LEN) == 0  //not my IP
            || (memcmp(gPB + IP_DST_P, EtherCard::broadcastip, IP_LEN) == 0) //not subnet broadcast
    2078:	6c ea       	ldi	r22, 0xAC	; 172
    207a:	75 e0       	ldi	r23, 0x05	; 5
    207c:	86 eb       	ldi	r24, 0xB6	; 182
    207e:	93 e0       	ldi	r25, 0x03	; 3
    2080:	0e 94 68 20 	call	0x40d0	; 0x40d0 <memcmp>
    2084:	89 2b       	or	r24, r25
    2086:	09 f4       	brne	.+2      	; 0x208a <_ZN9EtherCard10packetLoopEj+0x2b0>
    2088:	57 c1       	rjmp	.+686    	; 0x2338 <__stack+0x139>
    208a:	44 e0       	ldi	r20, 0x04	; 4
    208c:	50 e0       	ldi	r21, 0x00	; 0
            || (memcmp(gPB + IP_DST_P, allOnes, IP_LEN) == 0)); //not global broadcasts
    208e:	69 e4       	ldi	r22, 0x49	; 73
    2090:	72 e0       	ldi	r23, 0x02	; 2
    2092:	86 eb       	ldi	r24, 0xB6	; 182
    2094:	93 e0       	ldi	r25, 0x03	; 3
    2096:	0e 94 68 20 	call	0x40d0	; 0x40d0 <memcmp>
    209a:	89 2b       	or	r24, r25
    209c:	09 f4       	brne	.+2      	; 0x20a0 <_ZN9EtherCard10packetLoopEj+0x2c6>
    209e:	4c c1       	rjmp	.+664    	; 0x2338 <__stack+0x139>
    20a0:	80 e0       	ldi	r24, 0x00	; 0
    }

    if (eth_type_is_ip_and_my_ip(plen)==0)
    {   //Not IP so ignoring
        //!@todo Add other protocols (and make each optional at compile time)
        return 0;
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	61 c1       	rjmp	.+706    	; 0x2368 <__stack+0x169>
    20a6:	80 91 ba 03 	lds	r24, 0x03BA	; 0x8003ba <_ZN8ENC28J606bufferE+0x22>
    }

#if ETHERCARD_ICMP
    if (gPB[IP_PROTO_P]==IP_PROTO_ICMP_V && gPB[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V)
    20aa:	88 30       	cpi	r24, 0x08	; 8
    20ac:	d9 f4       	brne	.+54     	; 0x20e4 <_ZN9EtherCard10packetLoopEj+0x30a>
    20ae:	e0 91 d8 05 	lds	r30, 0x05D8	; 0x8005d8 <_ZL7icmp_cb>
    {   //Service ICMP echo request (ping)
        if (icmp_cb)
    20b2:	f0 91 d9 05 	lds	r31, 0x05D9	; 0x8005d9 <_ZL7icmp_cb+0x1>
    20b6:	30 97       	sbiw	r30, 0x00	; 0
    20b8:	19 f0       	breq	.+6      	; 0x20c0 <_ZN9EtherCard10packetLoopEj+0x2e6>
            (*icmp_cb)(&(gPB[IP_SRC_P]));
    20ba:	82 eb       	ldi	r24, 0xB2	; 178
    20bc:	93 e0       	ldi	r25, 0x03	; 3
    EtherCard::copyIp(gPB + ETH_ARP_SRC_IP_P, EtherCard::myip);
    EtherCard::packetSend(42);
}

static void make_echo_reply_from_request(uint16_t len) {
    make_eth_ip();
    20be:	19 95       	eicall
    20c0:	be dc       	rcall	.-1668   	; 0x1a3e <_ZL11make_eth_ipv>
    gPB[ICMP_TYPE_P] = ICMP_TYPE_ECHOREPLY_V;
    20c2:	e8 e9       	ldi	r30, 0x98	; 152
    20c4:	f3 e0       	ldi	r31, 0x03	; 3
    20c6:	12 a2       	std	Z+34, r1	; 0x22
    if (gPB[ICMP_CHECKSUM_P] > (0xFF-0x08))
    20c8:	84 a1       	ldd	r24, Z+36	; 0x24
    20ca:	88 3f       	cpi	r24, 0xF8	; 248
    20cc:	18 f0       	brcs	.+6      	; 0x20d4 <_ZN9EtherCard10packetLoopEj+0x2fa>
        gPB[ICMP_CHECKSUM_P+1]++;
    20ce:	95 a1       	ldd	r25, Z+37	; 0x25
    20d0:	9f 5f       	subi	r25, 0xFF	; 255
    20d2:	95 a3       	std	Z+37, r25	; 0x25
    gPB[ICMP_CHECKSUM_P] += 0x08;
    20d4:	88 5f       	subi	r24, 0xF8	; 248
    20d6:	80 93 bc 03 	sts	0x03BC, r24	; 0x8003bc <_ZN8ENC28J606bufferE+0x24>
    EtherCard::packetSend(len);
    20da:	ce 01       	movw	r24, r28
    20dc:	7f da       	rcall	.-2818   	; 0x15dc <_ZN8ENC28J6010packetSendEj>
    20de:	80 e0       	ldi	r24, 0x00	; 0
    if (gPB[IP_PROTO_P]==IP_PROTO_ICMP_V && gPB[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V)
    {   //Service ICMP echo request (ping)
        if (icmp_cb)
            (*icmp_cb)(&(gPB[IP_SRC_P]));
        make_echo_reply_from_request(plen);
        return 0;
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	42 c1       	rjmp	.+644    	; 0x2368 <__stack+0x169>
    20e4:	62 d1       	rcall	.+708    	; 0x23aa <_ZN9EtherCard18udpServerListeningEv>
    }
#endif
#if ETHERCARD_UDPSERVER
    if (ether.udpServerListening() && gPB[IP_PROTO_P]==IP_PROTO_UDP_V)
    20e6:	88 23       	and	r24, r24
    20e8:	29 f0       	breq	.+10     	; 0x20f4 <_ZN9EtherCard10packetLoopEj+0x31a>
    20ea:	80 91 af 03 	lds	r24, 0x03AF	; 0x8003af <_ZN8ENC28J606bufferE+0x17>
    20ee:	81 31       	cpi	r24, 0x11	; 17
    20f0:	09 f4       	brne	.+2      	; 0x20f4 <_ZN9EtherCard10packetLoopEj+0x31a>
    20f2:	28 c1       	rjmp	.+592    	; 0x2344 <__stack+0x145>
    20f4:	c6 33       	cpi	r28, 0x36	; 54
    20f6:	d1 05       	cpc	r29, r1
        if(ether.udpServerHasProcessedPacket(plen))
            return 0; //An UDP server handler (callback) has processed this packet
    }
#endif

    if (plen<54 || gPB[IP_PROTO_P]!=IP_PROTO_TCP_V )
    20f8:	08 f4       	brcc	.+2      	; 0x20fc <_ZN9EtherCard10packetLoopEj+0x322>
    20fa:	ef c0       	rjmp	.+478    	; 0x22da <__stack+0xdb>
    20fc:	80 91 af 03 	lds	r24, 0x03AF	; 0x8003af <_ZN8ENC28J606bufferE+0x17>
    2100:	86 30       	cpi	r24, 0x06	; 6
    2102:	09 f0       	breq	.+2      	; 0x2106 <_ZN9EtherCard10packetLoopEj+0x32c>
    2104:	ed c0       	rjmp	.+474    	; 0x22e0 <__stack+0xe1>
    2106:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <_ZN8ENC28J606bufferE+0x24>
        return 0; //from here on we are only interested in TCP-packets; these are longer than 54 bytes

#if ETHERCARD_TCPCLIENT
    if (gPB[TCP_DST_PORT_H_P]==TCPCLIENT_SRC_PORT_H)
    210a:	8b 30       	cpi	r24, 0x0B	; 11
    210c:	09 f0       	breq	.+2      	; 0x2110 <_ZN9EtherCard10packetLoopEj+0x336>
    210e:	c0 c0       	rjmp	.+384    	; 0x2290 <__stack+0x91>
    2110:	44 e0       	ldi	r20, 0x04	; 4
    2112:	50 e0       	ldi	r21, 0x00	; 0
    EtherCard::copyIp(gPB + IP_DST_P, dst);
    EtherCard::copyIp(gPB + IP_SRC_P, EtherCard::myip);
}

static uint8_t check_ip_message_is_from(const uint8_t *ip) {
    return memcmp(gPB + IP_SRC_P, ip, IP_LEN) == 0;
    2114:	6c e9       	ldi	r22, 0x9C	; 156
    2116:	75 e0       	ldi	r23, 0x05	; 5
    2118:	82 eb       	ldi	r24, 0xB2	; 178
    211a:	93 e0       	ldi	r25, 0x03	; 3
    211c:	0e 94 68 20 	call	0x40d0	; 0x40d0 <memcmp>
    2120:	89 2b       	or	r24, r25
    2122:	09 f0       	breq	.+2      	; 0x2126 <_ZN9EtherCard10packetLoopEj+0x34c>
        return 0; //from here on we are only interested in TCP-packets; these are longer than 54 bytes

#if ETHERCARD_TCPCLIENT
    if (gPB[TCP_DST_PORT_H_P]==TCPCLIENT_SRC_PORT_H)
    {   //Source port is in range reserved (by EtherCard) for client TCP/IP connections
        if (check_ip_message_is_from(hisip)==0)
    2124:	e0 c0       	rjmp	.+448    	; 0x22e6 <__stack+0xe7>
    2126:	10 91 c7 03 	lds	r17, 0x03C7	; 0x8003c7 <_ZN8ENC28J606bufferE+0x2f>
            return 0; //Not current TCP/IP connection (only handle one at a time)
        if (gPB[TCP_FLAGS_P] & TCP_FLAGS_RST_V)
    212a:	12 ff       	sbrs	r17, 2
    212c:	17 c0       	rjmp	.+46     	; 0x215c <_ZN9EtherCard10packetLoopEj+0x382>
    212e:	e0 91 dc 05 	lds	r30, 0x05DC	; 0x8005dc <_ZL20client_tcp_result_cb>
        {   //TCP reset flagged
            if (client_tcp_result_cb)
    2132:	f0 91 dd 05 	lds	r31, 0x05DD	; 0x8005dd <_ZL20client_tcp_result_cb+0x1>
    2136:	30 97       	sbiw	r30, 0x00	; 0
    2138:	59 f0       	breq	.+22     	; 0x2150 <_ZN9EtherCard10packetLoopEj+0x376>
    213a:	80 91 bd 03 	lds	r24, 0x03BD	; 0x8003bd <_ZN8ENC28J606bufferE+0x25>
                (*client_tcp_result_cb)((gPB[TCP_DST_PORT_L_P]>>5)&0x7,3,0,0);
    213e:	20 e0       	ldi	r18, 0x00	; 0
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	40 e0       	ldi	r20, 0x00	; 0
    2144:	50 e0       	ldi	r21, 0x00	; 0
    2146:	63 e0       	ldi	r22, 0x03	; 3
    2148:	82 95       	swap	r24
    214a:	86 95       	lsr	r24
    214c:	87 70       	andi	r24, 0x07	; 7
    214e:	19 95       	eicall
            tcp_client_state = TCP_STATE_CLOSING;
    2150:	85 e0       	ldi	r24, 0x05	; 5
    2152:	80 93 e0 05 	sts	0x05E0, r24	; 0x8005e0 <_ZL16tcp_client_state>
            return 0;
    2156:	80 e0       	ldi	r24, 0x00	; 0
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	06 c1       	rjmp	.+524    	; 0x2368 <__stack+0x169>
        }
        len = getTcpPayloadLength();
    215c:	f8 dc       	rcall	.-1552   	; 0x1b4e <_ZN9EtherCard19getTcpPayloadLengthEv>
    215e:	7c 01       	movw	r14, r24
    2160:	80 91 e0 05 	lds	r24, 0x05E0	; 0x8005e0 <_ZL16tcp_client_state>
        if (tcp_client_state==TCP_STATE_SYNSENT)
    2164:	82 30       	cpi	r24, 0x02	; 2
    2166:	89 f5       	brne	.+98     	; 0x21ca <_ZN9EtherCard10packetLoopEj+0x3f0>
    2168:	81 2f       	mov	r24, r17
    216a:	80 71       	andi	r24, 0x10	; 16
    216c:	12 71       	andi	r17, 0x12	; 18
        {   //Waiting for SYN-ACK
            if ((gPB[TCP_FLAGS_P] & TCP_FLAGS_SYN_V) && (gPB[TCP_FLAGS_P] &TCP_FLAGS_ACK_V))
    216e:	12 31       	cpi	r17, 0x12	; 18
    2170:	e9 f4       	brne	.+58     	; 0x21ac <_ZN9EtherCard10packetLoopEj+0x3d2>
    2172:	60 e0       	ldi	r22, 0x00	; 0
            {   //SYN and ACK flags set so this is an acknowledgement to our SYN
                make_tcp_ack_from_any(0,0);
    2174:	80 e0       	ldi	r24, 0x00	; 0
    2176:	90 e0       	ldi	r25, 0x00	; 0
    2178:	71 dc       	rcall	.-1822   	; 0x1a5c <_ZL21make_tcp_ack_from_anyih>
    217a:	88 e1       	ldi	r24, 0x18	; 24
                gPB[TCP_FLAGS_P] = TCP_FLAGS_ACK_V|TCP_FLAGS_PUSH_V;
    217c:	80 93 c7 03 	sts	0x03C7, r24	; 0x8003c7 <_ZN8ENC28J606bufferE+0x2f>
    2180:	e0 91 da 05 	lds	r30, 0x05DA	; 0x8005da <_ZL22client_tcp_datafill_cb>
                if (client_tcp_datafill_cb)
    2184:	f0 91 db 05 	lds	r31, 0x05DB	; 0x8005db <_ZL22client_tcp_datafill_cb+0x1>
    2188:	30 97       	sbiw	r30, 0x00	; 0
    218a:	39 f0       	breq	.+14     	; 0x219a <_ZN9EtherCard10packetLoopEj+0x3c0>
    218c:	80 91 bb 03 	lds	r24, 0x03BB	; 0x8003bb <_ZN8ENC28J606bufferE+0x23>
                    len = (*client_tcp_datafill_cb)((gPB[TCP_SRC_PORT_L_P]>>5)&0x7);
    2190:	82 95       	swap	r24
    2192:	86 95       	lsr	r24
    2194:	87 70       	andi	r24, 0x07	; 7
    2196:	19 95       	eicall
    2198:	02 c0       	rjmp	.+4      	; 0x219e <_ZN9EtherCard10packetLoopEj+0x3c4>
                else
                    len = 0;
    219a:	80 e0       	ldi	r24, 0x00	; 0
    219c:	90 e0       	ldi	r25, 0x00	; 0
                tcp_client_state = TCP_STATE_ESTABLISHED;
    219e:	23 e0       	ldi	r18, 0x03	; 3
    21a0:	20 93 e0 05 	sts	0x05E0, r18	; 0x8005e0 <_ZL16tcp_client_state>
                make_tcp_ack_with_data_noflags(len);
    21a4:	26 dc       	rcall	.-1972   	; 0x19f2 <_ZL30make_tcp_ack_with_data_noflagsj>
    21a6:	80 e0       	ldi	r24, 0x00	; 0
                len++;
                if (gPB[TCP_FLAGS_P] & TCP_FLAGS_ACK_V)
                    len = 0;
                make_tcp_ack_from_any(len,TCP_FLAGS_RST_V);
            }
            return 0;
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	de c0       	rjmp	.+444    	; 0x2368 <__stack+0x169>
                if (client_tcp_datafill_cb)
                    len = (*client_tcp_datafill_cb)((gPB[TCP_SRC_PORT_L_P]>>5)&0x7);
                else
                    len = 0;
                tcp_client_state = TCP_STATE_ESTABLISHED;
                make_tcp_ack_with_data_noflags(len);
    21ac:	91 e0       	ldi	r25, 0x01	; 1
            }
            else
            {   //Expecting SYN+ACK so reset and resend SYN
                tcp_client_state = TCP_STATE_SENDSYN; // retry
    21ae:	90 93 e0 05 	sts	0x05E0, r25	; 0x8005e0 <_ZL16tcp_client_state>
    21b2:	81 11       	cpse	r24, r1
                len++;
                if (gPB[TCP_FLAGS_P] & TCP_FLAGS_ACK_V)
    21b4:	03 c0       	rjmp	.+6      	; 0x21bc <_ZN9EtherCard10packetLoopEj+0x3e2>
    21b6:	c7 01       	movw	r24, r14
                make_tcp_ack_with_data_noflags(len);
            }
            else
            {   //Expecting SYN+ACK so reset and resend SYN
                tcp_client_state = TCP_STATE_SENDSYN; // retry
                len++;
    21b8:	01 96       	adiw	r24, 0x01	; 1
    21ba:	02 c0       	rjmp	.+4      	; 0x21c0 <_ZN9EtherCard10packetLoopEj+0x3e6>
    21bc:	80 e0       	ldi	r24, 0x00	; 0
                if (gPB[TCP_FLAGS_P] & TCP_FLAGS_ACK_V)
                    len = 0;
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	64 e0       	ldi	r22, 0x04	; 4
                make_tcp_ack_from_any(len,TCP_FLAGS_RST_V);
    21c2:	4c dc       	rcall	.-1896   	; 0x1a5c <_ZL21make_tcp_ack_from_anyih>
    21c4:	80 e0       	ldi	r24, 0x00	; 0
    21c6:	90 e0       	ldi	r25, 0x00	; 0
            }
            return 0;
    21c8:	cf c0       	rjmp	.+414    	; 0x2368 <__stack+0x169>
    21ca:	83 30       	cpi	r24, 0x03	; 3
    21cc:	09 f0       	breq	.+2      	; 0x21d0 <_ZN9EtherCard10packetLoopEj+0x3f6>
        }
        if (tcp_client_state==TCP_STATE_ESTABLISHED && len>0)
    21ce:	47 c0       	rjmp	.+142    	; 0x225e <__stack+0x5f>
    21d0:	e1 14       	cp	r14, r1
    21d2:	f1 04       	cpc	r15, r1
    21d4:	09 f4       	brne	.+2      	; 0x21d8 <_ZN9EtherCard10packetLoopEj+0x3fe>
    21d6:	bf c0       	rjmp	.+382    	; 0x2356 <__stack+0x157>
    21d8:	e0 91 dc 05 	lds	r30, 0x05DC	; 0x8005dc <_ZL20client_tcp_result_cb>
        {   //TCP connection established so read data
            if (client_tcp_result_cb) {
    21dc:	f0 91 dd 05 	lds	r31, 0x05DD	; 0x8005dd <_ZL20client_tcp_result_cb+0x1>
    21e0:	30 97       	sbiw	r30, 0x00	; 0
    21e2:	09 f4       	brne	.+2      	; 0x21e6 <_ZN9EtherCard10packetLoopEj+0x40c>
    21e4:	b8 c0       	rjmp	.+368    	; 0x2356 <__stack+0x157>
    21e6:	40 91 c6 03 	lds	r20, 0x03C6	; 0x8003c6 <_ZN8ENC28J606bufferE+0x2e>
                uint16_t tcpstart = TCP_DATA_START; // TCP_DATA_START is a formula
    21ea:	50 e0       	ldi	r21, 0x00	; 0
    21ec:	55 95       	asr	r21
    21ee:	47 95       	ror	r20
    21f0:	55 95       	asr	r21
    21f2:	47 95       	ror	r20
    21f4:	55 95       	asr	r21
    21f6:	47 95       	ror	r20
    21f8:	55 95       	asr	r21
    21fa:	47 95       	ror	r20
    21fc:	44 0f       	add	r20, r20
    21fe:	55 1f       	adc	r21, r21
    2200:	44 0f       	add	r20, r20
    2202:	55 1f       	adc	r21, r21
    2204:	ce 01       	movw	r24, r28
    2206:	08 97       	sbiw	r24, 0x08	; 8
                if (tcpstart>plen-8)
    2208:	4e 5d       	subi	r20, 0xDE	; 222
    220a:	5f 4f       	sbci	r21, 0xFF	; 255
    220c:	84 17       	cp	r24, r20
    220e:	95 07       	cpc	r25, r21
    2210:	08 f4       	brcc	.+2      	; 0x2214 <__stack+0x15>
    2212:	ac 01       	movw	r20, r24
    2214:	c7 01       	movw	r24, r14
                    tcpstart = plen-8; // dummy but save
                uint16_t save_len = len;
                if (tcpstart+len>plen)
    2216:	84 0f       	add	r24, r20
    2218:	95 1f       	adc	r25, r21
    221a:	c8 17       	cp	r28, r24
    221c:	d9 07       	cpc	r29, r25
    221e:	20 f4       	brcc	.+8      	; 0x2228 <__stack+0x29>
                    save_len = plen-tcpstart;
    2220:	9e 01       	movw	r18, r28
    2222:	24 1b       	sub	r18, r20
    2224:	35 0b       	sbc	r19, r21
    2226:	01 c0       	rjmp	.+2      	; 0x222a <__stack+0x2b>
        {   //TCP connection established so read data
            if (client_tcp_result_cb) {
                uint16_t tcpstart = TCP_DATA_START; // TCP_DATA_START is a formula
                if (tcpstart>plen-8)
                    tcpstart = plen-8; // dummy but save
                uint16_t save_len = len;
    2228:	97 01       	movw	r18, r14
                if (tcpstart+len>plen)
                    save_len = plen-tcpstart;
                (*client_tcp_result_cb)((gPB[TCP_DST_PORT_L_P]>>5)&0x7,0,tcpstart,save_len); //Call TCP handler (callback) function
    222a:	80 91 bd 03 	lds	r24, 0x03BD	; 0x8003bd <_ZN8ENC28J606bufferE+0x25>
    222e:	60 e0       	ldi	r22, 0x00	; 0
    2230:	82 95       	swap	r24
    2232:	86 95       	lsr	r24
    2234:	87 70       	andi	r24, 0x07	; 7
    2236:	19 95       	eicall

                if(persist_tcp_connection)
    2238:	80 91 9a 05 	lds	r24, 0x059A	; 0x80059a <_ZN9EtherCard22persist_tcp_connectionE>
    223c:	88 23       	and	r24, r24
                {   //Keep connection alive by sending ACK
                    make_tcp_ack_from_any(len,TCP_FLAGS_PUSH_V);
    223e:	31 f0       	breq	.+12     	; 0x224c <__stack+0x4d>
    2240:	68 e0       	ldi	r22, 0x08	; 8
    2242:	c7 01       	movw	r24, r14
    2244:	0b dc       	rcall	.-2026   	; 0x1a5c <_ZL21make_tcp_ack_from_anyih>
                else
                {   //Close connection
                    make_tcp_ack_from_any(len,TCP_FLAGS_PUSH_V|TCP_FLAGS_FIN_V);
                    tcp_client_state = TCP_STATE_CLOSED;
                }
                return 0;
    2246:	80 e0       	ldi	r24, 0x00	; 0
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	8e c0       	rjmp	.+284    	; 0x2368 <__stack+0x169>
                {   //Keep connection alive by sending ACK
                    make_tcp_ack_from_any(len,TCP_FLAGS_PUSH_V);
                }
                else
                {   //Close connection
                    make_tcp_ack_from_any(len,TCP_FLAGS_PUSH_V|TCP_FLAGS_FIN_V);
    224c:	69 e0       	ldi	r22, 0x09	; 9
    224e:	c7 01       	movw	r24, r14
    2250:	05 dc       	rcall	.-2038   	; 0x1a5c <_ZL21make_tcp_ack_from_anyih>
                    tcp_client_state = TCP_STATE_CLOSED;
    2252:	86 e0       	ldi	r24, 0x06	; 6
    2254:	80 93 e0 05 	sts	0x05E0, r24	; 0x8005e0 <_ZL16tcp_client_state>
                }
                return 0;
    2258:	80 e0       	ldi	r24, 0x00	; 0
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	85 c0       	rjmp	.+266    	; 0x2368 <__stack+0x169>
            }
        }
        if (tcp_client_state != TCP_STATE_CLOSING)
    225e:	85 30       	cpi	r24, 0x05	; 5
    2260:	09 f0       	breq	.+2      	; 0x2264 <__stack+0x65>
                tcp_client_state = TCP_STATE_CLOSED; // connection terminated
            } else if (len>0) {
                make_tcp_ack_from_any(len,0);
            }
        }
        return 0;
    2262:	76 c0       	rjmp	.+236    	; 0x2350 <__stack+0x151>
    2264:	80 e0       	ldi	r24, 0x00	; 0
    2266:	90 e0       	ldi	r25, 0x00	; 0
        {   //
            if (gPB[TCP_FLAGS_P] & TCP_FLAGS_FIN_V) {
                if(tcp_client_state == TCP_STATE_ESTABLISHED) {
                    return 0; // In some instances FIN is received *before* DATA.  If that is the case, we just return here and keep looking for the data packet
                }
                make_tcp_ack_from_any(len+1,TCP_FLAGS_PUSH_V|TCP_FLAGS_FIN_V);
    2268:	7f c0       	rjmp	.+254    	; 0x2368 <__stack+0x169>
    226a:	69 e0       	ldi	r22, 0x09	; 9
    226c:	c7 01       	movw	r24, r14
    226e:	01 96       	adiw	r24, 0x01	; 1
    2270:	f5 db       	rcall	.-2070   	; 0x1a5c <_ZL21make_tcp_ack_from_anyih>
                tcp_client_state = TCP_STATE_CLOSED; // connection terminated
    2272:	86 e0       	ldi	r24, 0x06	; 6
    2274:	80 93 e0 05 	sts	0x05E0, r24	; 0x8005e0 <_ZL16tcp_client_state>
            } else if (len>0) {
                make_tcp_ack_from_any(len,0);
            }
        }
        return 0;
    2278:	80 e0       	ldi	r24, 0x00	; 0
    227a:	90 e0       	ldi	r25, 0x00	; 0
    227c:	75 c0       	rjmp	.+234    	; 0x2368 <__stack+0x169>
                if(tcp_client_state == TCP_STATE_ESTABLISHED) {
                    return 0; // In some instances FIN is received *before* DATA.  If that is the case, we just return here and keep looking for the data packet
                }
                make_tcp_ack_from_any(len+1,TCP_FLAGS_PUSH_V|TCP_FLAGS_FIN_V);
                tcp_client_state = TCP_STATE_CLOSED; // connection terminated
            } else if (len>0) {
    227e:	e1 14       	cp	r14, r1
    2280:	f1 04       	cpc	r15, r1
    2282:	a1 f1       	breq	.+104    	; 0x22ec <__stack+0xed>
                make_tcp_ack_from_any(len,0);
    2284:	60 e0       	ldi	r22, 0x00	; 0
    2286:	c7 01       	movw	r24, r14
    2288:	e9 db       	rcall	.-2094   	; 0x1a5c <_ZL21make_tcp_ack_from_anyih>
    228a:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        return 0;
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	6c c0       	rjmp	.+216    	; 0x2368 <__stack+0x169>
    2290:	be 01       	movw	r22, r28
    }
#endif

#if ETHERCARD_TCPSERVER
    //If we are here then this is a TCP/IP packet targeted at us and not related to our client connection so accept
    return accept(hisport, plen);
    2292:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <_ZN9EtherCard7hisportE>
    2296:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <_ZN9EtherCard7hisportE+0x1>
    229a:	21 dd       	rcall	.-1470   	; 0x1cde <_ZN9EtherCard6acceptEjj>
    229c:	65 c0       	rjmp	.+202    	; 0x2368 <__stack+0x169>
    229e:	80 e0       	ldi	r24, 0x00	; 0
    22a0:	90 e0       	ldi	r25, 0x00	; 0
        if(is_lan(myip, hisip) && !has_dest_mac && !waiting_for_dest_mac) {
            client_arp_whohas(hisip);
            waiting_for_dest_mac = true;
        }

        return 0;
    22a2:	62 c0       	rjmp	.+196    	; 0x2368 <__stack+0x169>
    22a4:	80 e0       	ldi	r24, 0x00	; 0
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	5f c0       	rjmp	.+190    	; 0x2368 <__stack+0x169>
    22aa:	80 e0       	ldi	r24, 0x00	; 0
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	5c c0       	rjmp	.+184    	; 0x2368 <__stack+0x169>
    22b0:	80 e0       	ldi	r24, 0x00	; 0
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    }

    if (eth_type_is_ip_and_my_ip(plen)==0)
    {   //Not IP so ignoring
        //!@todo Add other protocols (and make each optional at compile time)
        return 0;
    22b4:	59 c0       	rjmp	.+178    	; 0x2368 <__stack+0x169>
    22b6:	80 e0       	ldi	r24, 0x00	; 0
    22b8:	90 e0       	ldi	r25, 0x00	; 0
        }
        if (!has_dest_mac && waiting_for_dest_mac && client_store_mac(hisip, destmacaddr)) {
            has_dest_mac = true;
            waiting_for_dest_mac = false;
        }
        return 0;
    22ba:	56 c0       	rjmp	.+172    	; 0x2368 <__stack+0x169>
    22bc:	80 e0       	ldi	r24, 0x00	; 0
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	53 c0       	rjmp	.+166    	; 0x2368 <__stack+0x169>
    22c2:	80 e0       	ldi	r24, 0x00	; 0
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	50 c0       	rjmp	.+160    	; 0x2368 <__stack+0x169>
    22c8:	80 e0       	ldi	r24, 0x00	; 0
    }

    if (eth_type_is_ip_and_my_ip(plen)==0)
    {   //Not IP so ignoring
        //!@todo Add other protocols (and make each optional at compile time)
        return 0;
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	4d c0       	rjmp	.+154    	; 0x2368 <__stack+0x169>
    22ce:	80 e0       	ldi	r24, 0x00	; 0
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	4a c0       	rjmp	.+148    	; 0x2368 <__stack+0x169>
    22d4:	80 e0       	ldi	r24, 0x00	; 0
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	47 c0       	rjmp	.+142    	; 0x2368 <__stack+0x169>
            return 0; //An UDP server handler (callback) has processed this packet
    }
#endif

    if (plen<54 || gPB[IP_PROTO_P]!=IP_PROTO_TCP_V )
        return 0; //from here on we are only interested in TCP-packets; these are longer than 54 bytes
    22da:	80 e0       	ldi	r24, 0x00	; 0
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	44 c0       	rjmp	.+136    	; 0x2368 <__stack+0x169>
    22e0:	80 e0       	ldi	r24, 0x00	; 0
    22e2:	90 e0       	ldi	r25, 0x00	; 0
    22e4:	41 c0       	rjmp	.+130    	; 0x2368 <__stack+0x169>

#if ETHERCARD_TCPCLIENT
    if (gPB[TCP_DST_PORT_H_P]==TCPCLIENT_SRC_PORT_H)
    {   //Source port is in range reserved (by EtherCard) for client TCP/IP connections
        if (check_ip_message_is_from(hisip)==0)
            return 0; //Not current TCP/IP connection (only handle one at a time)
    22e6:	80 e0       	ldi	r24, 0x00	; 0
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	3e c0       	rjmp	.+124    	; 0x2368 <__stack+0x169>
                tcp_client_state = TCP_STATE_CLOSED; // connection terminated
            } else if (len>0) {
                make_tcp_ack_from_any(len,0);
            }
        }
        return 0;
    22ec:	80 e0       	ldi	r24, 0x00	; 0
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	3b c0       	rjmp	.+118    	; 0x2368 <__stack+0x169>
#endif
#if ETHERCARD_UDPSERVER
    if (ether.udpServerListening() && gPB[IP_PROTO_P]==IP_PROTO_UDP_V)
    {   //Call UDP server handler (callback) if one is defined for this packet
        if(ether.udpServerHasProcessedPacket(plen))
            return 0; //An UDP server handler (callback) has processed this packet
    22f2:	80 e0       	ldi	r24, 0x00	; 0
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	38 c0       	rjmp	.+112    	; 0x2368 <__stack+0x169>
        }
        if (tcp_client_state != TCP_STATE_CLOSING)
        {   //
            if (gPB[TCP_FLAGS_P] & TCP_FLAGS_FIN_V) {
                if(tcp_client_state == TCP_STATE_ESTABLISHED) {
                    return 0; // In some instances FIN is received *before* DATA.  If that is the case, we just return here and keep looking for the data packet
    22f8:	80 e0       	ldi	r24, 0x00	; 0
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	35 c0       	rjmp	.+106    	; 0x2368 <__stack+0x169>
        }
#endif

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, dnsip) && !has_dns_mac && !waiting_for_dns_mac) {
            client_arp_whohas(dnsip);
    22fe:	80 ea       	ldi	r24, 0xA0	; 160
    2300:	95 e0       	ldi	r25, 0x05	; 5
    2302:	df db       	rcall	.-2114   	; 0x1ac2 <_ZL17client_arp_whohasPh>
    2304:	81 e0       	ldi	r24, 0x01	; 1
            waiting_for_dns_mac = true;
    2306:	80 93 d1 05 	sts	0x05D1, r24	; 0x8005d1 <_ZL19waiting_for_dns_mac>
    230a:	12 ce       	rjmp	.-988    	; 0x1f30 <_ZN9EtherCard10packetLoopEj+0x156>
        }

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, hisip) && !has_dest_mac && !waiting_for_dest_mac) {
            client_arp_whohas(hisip);
    230c:	8c e9       	ldi	r24, 0x9C	; 156
    230e:	95 e0       	ldi	r25, 0x05	; 5
    2310:	d8 db       	rcall	.-2128   	; 0x1ac2 <_ZL17client_arp_whohasPh>
    2312:	81 e0       	ldi	r24, 0x01	; 1
            waiting_for_dest_mac = true;
    2314:	80 93 cf 05 	sts	0x05CF, r24	; 0x8005cf <_ZL20waiting_for_dest_mac>
    2318:	80 e0       	ldi	r24, 0x00	; 0
        }

        return 0;
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	25 c0       	rjmp	.+74     	; 0x2368 <__stack+0x169>
    231e:	ca 32       	cpi	r28, 0x2A	; 42
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
    2320:	d1 05       	cpc	r29, r1
    2322:	08 f0       	brcs	.+2      	; 0x2326 <__stack+0x127>
    2324:	8e ce       	rjmp	.-740    	; 0x2042 <_ZN9EtherCard10packetLoopEj+0x268>
    2326:	80 e0       	ldi	r24, 0x00	; 0
    }

    if (eth_type_is_ip_and_my_ip(plen)==0)
    {   //Not IP so ignoring
        //!@todo Add other protocols (and make each optional at compile time)
        return 0;
    2328:	90 e0       	ldi	r25, 0x00	; 0
    232a:	1e c0       	rjmp	.+60     	; 0x2368 <__stack+0x169>
    232c:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <_ZN8ENC28J606bufferE+0x15>
        return 0;
    }

    if (eth_type_is_arp_and_my_ip(plen))
    {   //Service ARP request
        if (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REQ_L_V)
    2330:	81 30       	cpi	r24, 0x01	; 1
    2332:	09 f0       	breq	.+2      	; 0x2336 <__stack+0x137>
    2334:	47 ce       	rjmp	.-882    	; 0x1fc4 <_ZN9EtherCard10packetLoopEj+0x1ea>
    2336:	27 ce       	rjmp	.-946    	; 0x1f86 <_ZN9EtherCard10packetLoopEj+0x1ac>
    2338:	80 91 af 03 	lds	r24, 0x03AF	; 0x8003af <_ZN8ENC28J606bufferE+0x17>
        //!@todo Add other protocols (and make each optional at compile time)
        return 0;
    }

#if ETHERCARD_ICMP
    if (gPB[IP_PROTO_P]==IP_PROTO_ICMP_V && gPB[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V)
    233c:	81 30       	cpi	r24, 0x01	; 1
    233e:	09 f0       	breq	.+2      	; 0x2342 <__stack+0x143>
    2340:	d1 ce       	rjmp	.-606    	; 0x20e4 <_ZN9EtherCard10packetLoopEj+0x30a>
    2342:	b1 ce       	rjmp	.-670    	; 0x20a6 <_ZN9EtherCard10packetLoopEj+0x2cc>
    2344:	ce 01       	movw	r24, r28
    }
#endif
#if ETHERCARD_UDPSERVER
    if (ether.udpServerListening() && gPB[IP_PROTO_P]==IP_PROTO_UDP_V)
    {   //Call UDP server handler (callback) if one is defined for this packet
        if(ether.udpServerHasProcessedPacket(plen))
    2346:	38 d0       	rcall	.+112    	; 0x23b8 <_ZN9EtherCard27udpServerHasProcessedPacketEj>
    2348:	88 23       	and	r24, r24
    234a:	09 f4       	brne	.+2      	; 0x234e <__stack+0x14f>
    234c:	d3 ce       	rjmp	.-602    	; 0x20f4 <_ZN9EtherCard10packetLoopEj+0x31a>
    234e:	d1 cf       	rjmp	.-94     	; 0x22f2 <__stack+0xf3>
    2350:	10 ff       	sbrs	r17, 0
    2352:	95 cf       	rjmp	.-214    	; 0x227e <__stack+0x7f>
                return 0;
            }
        }
        if (tcp_client_state != TCP_STATE_CLOSING)
        {   //
            if (gPB[TCP_FLAGS_P] & TCP_FLAGS_FIN_V) {
    2354:	8a cf       	rjmp	.-236    	; 0x226a <__stack+0x6b>
    2356:	10 fd       	sbrc	r17, 0
    2358:	cf cf       	rjmp	.-98     	; 0x22f8 <__stack+0xf9>
    235a:	91 cf       	rjmp	.-222    	; 0x227e <__stack+0x7f>
    235c:	ca 32       	cpi	r28, 0x2A	; 42
    235e:	d1 05       	cpc	r29, r1
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
    2360:	08 f0       	brcs	.+2      	; 0x2364 <__stack+0x165>
    2362:	74 ce       	rjmp	.-792    	; 0x204c <_ZN9EtherCard10packetLoopEj+0x272>
    2364:	80 e0       	ldi	r24, 0x00	; 0
    2366:	90 e0       	ldi	r25, 0x00	; 0
    }

    if (eth_type_is_ip_and_my_ip(plen)==0)
    {   //Not IP so ignoring
        //!@todo Add other protocols (and make each optional at compile time)
        return 0;
    2368:	df 91       	pop	r29
    236a:	cf 91       	pop	r28

#if ETHERCARD_TCPSERVER
    //If we are here then this is a TCP/IP packet targeted at us and not related to our client connection so accept
    return accept(hisport, plen);
#endif
}
    236c:	1f 91       	pop	r17
    236e:	0f 91       	pop	r16
    2370:	ff 90       	pop	r15
    2372:	ef 90       	pop	r14
    2374:	08 95       	ret

00002376 <_ZN9EtherCard21udpServerListenOnPortEPFvjPhjPKcjEj>:
    2376:	9c 01       	movw	r18, r24
    2378:	90 91 e2 05 	lds	r25, 0x05E2	; 0x8005e2 <numListeners>
    {
        if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((uint8_t) listeners[i].port)) {
            listeners[i].listening = true;
        }
    }
}
    237c:	98 30       	cpi	r25, 0x08	; 8
    237e:	a0 f4       	brcc	.+40     	; 0x23a8 <_ZN9EtherCard21udpServerListenOnPortEPFvjPhjPKcjEj+0x32>
    2380:	e9 2f       	mov	r30, r25
    2382:	f0 e0       	ldi	r31, 0x00	; 0
    2384:	af 01       	movw	r20, r30
    2386:	44 0f       	add	r20, r20
    2388:	55 1f       	adc	r21, r21
    238a:	44 0f       	add	r20, r20
    238c:	55 1f       	adc	r21, r21
    238e:	e4 0f       	add	r30, r20
    2390:	f5 1f       	adc	r31, r21
    2392:	ed 51       	subi	r30, 0x1D	; 29
    2394:	fa 4f       	sbci	r31, 0xFA	; 250
    2396:	31 83       	std	Z+1, r19	; 0x01
    2398:	20 83       	st	Z, r18
    239a:	73 83       	std	Z+3, r23	; 0x03
    239c:	62 83       	std	Z+2, r22	; 0x02
    239e:	81 e0       	ldi	r24, 0x01	; 1
    23a0:	84 83       	std	Z+4, r24	; 0x04
    23a2:	9f 5f       	subi	r25, 0xFF	; 255
    23a4:	90 93 e2 05 	sts	0x05E2, r25	; 0x8005e2 <numListeners>
    23a8:	08 95       	ret

000023aa <_ZN9EtherCard18udpServerListeningEv>:

bool EtherCard::udpServerListening() {
    return numListeners > 0;
    23aa:	81 e0       	ldi	r24, 0x01	; 1
    23ac:	90 91 e2 05 	lds	r25, 0x05E2	; 0x8005e2 <numListeners>
    23b0:	91 11       	cpse	r25, r1
    23b2:	01 c0       	rjmp	.+2      	; 0x23b6 <_ZN9EtherCard18udpServerListeningEv+0xc>
    23b4:	80 e0       	ldi	r24, 0x00	; 0
}
    23b6:	08 95       	ret

000023b8 <_ZN9EtherCard27udpServerHasProcessedPacketEj>:

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    23b8:	8f 92       	push	r8
    23ba:	9f 92       	push	r9
    23bc:	bf 92       	push	r11
    23be:	cf 92       	push	r12
    23c0:	df 92       	push	r13
    23c2:	ef 92       	push	r14
    23c4:	ff 92       	push	r15
    23c6:	0f 93       	push	r16
    23c8:	1f 93       	push	r17
    23ca:	cf 93       	push	r28
    23cc:	df 93       	push	r29
    bool packetProcessed = false;
    for(int i = 0; i < numListeners; i++)
    23ce:	80 91 e2 05 	lds	r24, 0x05E2	; 0x8005e2 <numListeners>
    23d2:	88 23       	and	r24, r24
    23d4:	09 f4       	brne	.+2      	; 0x23d8 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x20>
    23d6:	46 c0       	rjmp	.+140    	; 0x2464 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0xac>
    23d8:	c3 ee       	ldi	r28, 0xE3	; 227
    23da:	d5 e0       	ldi	r29, 0x05	; 5
    23dc:	e1 2c       	mov	r14, r1
    23de:	f1 2c       	mov	r15, r1
    23e0:	80 e0       	ldi	r24, 0x00	; 0
    {
        if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((uint8_t) listeners[i].port) && listeners[i].listening)
    23e2:	0f 2e       	mov	r0, r31
    23e4:	f8 e9       	ldi	r31, 0x98	; 152
    23e6:	cf 2e       	mov	r12, r31
    23e8:	f3 e0       	ldi	r31, 0x03	; 3
    23ea:	df 2e       	mov	r13, r31
    23ec:	f0 2d       	mov	r31, r0
                listeners[i].port,
                gPB + IP_SRC_P,
                (gPB[UDP_SRC_PORT_H_P] << 8) | gPB[UDP_SRC_PORT_L_P],
                (const char *) (gPB + UDP_DATA_P),
                datalen);
            packetProcessed = true;
    23ee:	bb 24       	eor	r11, r11
    23f0:	b3 94       	inc	r11

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    bool packetProcessed = false;
    for(int i = 0; i < numListeners; i++)
    {
        if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((uint8_t) listeners[i].port) && listeners[i].listening)
    23f2:	aa 81       	ldd	r26, Y+2	; 0x02
    23f4:	bb 81       	ldd	r27, Y+3	; 0x03
    23f6:	f6 01       	movw	r30, r12
    23f8:	24 a1       	ldd	r18, Z+36	; 0x24
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	4b 2f       	mov	r20, r27
    23fe:	55 27       	eor	r21, r21
    2400:	24 17       	cp	r18, r20
    2402:	35 07       	cpc	r19, r21
    2404:	21 f5       	brne	.+72     	; 0x244e <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x96>
    2406:	25 a1       	ldd	r18, Z+37	; 0x25
    2408:	30 e0       	ldi	r19, 0x00	; 0
    240a:	ad 01       	movw	r20, r26
    240c:	55 27       	eor	r21, r21
    240e:	24 17       	cp	r18, r20
    2410:	35 07       	cpc	r19, r21
    2412:	e9 f4       	brne	.+58     	; 0x244e <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x96>
    2414:	9c 81       	ldd	r25, Y+4	; 0x04
    2416:	99 23       	and	r25, r25
    2418:	d1 f0       	breq	.+52     	; 0x244e <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x96>
            listeners[i].callback(
                listeners[i].port,
                gPB + IP_SRC_P,
                (gPB[UDP_SRC_PORT_H_P] << 8) | gPB[UDP_SRC_PORT_L_P],
                (const char *) (gPB + UDP_DATA_P),
                datalen);
    241a:	07 a1       	ldd	r16, Z+39	; 0x27
    241c:	10 e0       	ldi	r17, 0x00	; 0
    241e:	08 50       	subi	r16, 0x08	; 8
    2420:	11 09       	sbc	r17, r1
    2422:	86 a1       	ldd	r24, Z+38	; 0x26
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	98 2f       	mov	r25, r24
    2428:	88 27       	eor	r24, r24
    242a:	08 0f       	add	r16, r24
    242c:	19 1f       	adc	r17, r25
    242e:	42 a1       	ldd	r20, Z+34	; 0x22
    2430:	50 e0       	ldi	r21, 0x00	; 0
    2432:	54 2f       	mov	r21, r20
    2434:	44 27       	eor	r20, r20
    2436:	83 a1       	ldd	r24, Z+35	; 0x23
    2438:	48 2b       	or	r20, r24
    243a:	88 80       	ld	r8, Y
    243c:	99 80       	ldd	r9, Y+1	; 0x01
    243e:	22 ec       	ldi	r18, 0xC2	; 194
    2440:	33 e0       	ldi	r19, 0x03	; 3
    2442:	62 eb       	ldi	r22, 0xB2	; 178
    2444:	73 e0       	ldi	r23, 0x03	; 3
    2446:	cd 01       	movw	r24, r26
    2448:	f4 01       	movw	r30, r8
    244a:	19 95       	eicall
            packetProcessed = true;
    244c:	8b 2d       	mov	r24, r11
    return numListeners > 0;
}

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    bool packetProcessed = false;
    for(int i = 0; i < numListeners; i++)
    244e:	ff ef       	ldi	r31, 0xFF	; 255
    2450:	ef 1a       	sub	r14, r31
    2452:	ff 0a       	sbc	r15, r31
    2454:	25 96       	adiw	r28, 0x05	; 5
    2456:	20 91 e2 05 	lds	r18, 0x05E2	; 0x8005e2 <numListeners>
    245a:	30 e0       	ldi	r19, 0x00	; 0
    245c:	e2 16       	cp	r14, r18
    245e:	f3 06       	cpc	r15, r19
    2460:	44 f2       	brlt	.-112    	; 0x23f2 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x3a>
    2462:	01 c0       	rjmp	.+2      	; 0x2466 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0xae>
bool EtherCard::udpServerListening() {
    return numListeners > 0;
}

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    bool packetProcessed = false;
    2464:	80 e0       	ldi	r24, 0x00	; 0
                datalen);
            packetProcessed = true;
        }
    }
    return packetProcessed;
}
    2466:	df 91       	pop	r29
    2468:	cf 91       	pop	r28
    246a:	1f 91       	pop	r17
    246c:	0f 91       	pop	r16
    246e:	ff 90       	pop	r15
    2470:	ef 90       	pop	r14
    2472:	df 90       	pop	r13
    2474:	cf 90       	pop	r12
    2476:	bf 90       	pop	r11
    2478:	9f 90       	pop	r9
    247a:	8f 90       	pop	r8
    247c:	08 95       	ret

0000247e <_ZN9EtherCard6copyIpEPhPKh>:
#include "../Peripherals/HardwareSerial.h"
#include <stdlib.h>
#include <ctype.h>

void EtherCard::copyIp (uint8_t *dst, const uint8_t *src) {
    memcpy(dst, src, IP_LEN);
    247e:	fb 01       	movw	r30, r22
    2480:	20 81       	ld	r18, Z
    2482:	31 81       	ldd	r19, Z+1	; 0x01
    2484:	fc 01       	movw	r30, r24
    2486:	31 83       	std	Z+1, r19	; 0x01
    2488:	20 83       	st	Z, r18
    248a:	fb 01       	movw	r30, r22
    248c:	22 81       	ldd	r18, Z+2	; 0x02
    248e:	33 81       	ldd	r19, Z+3	; 0x03
    2490:	fc 01       	movw	r30, r24
    2492:	33 83       	std	Z+3, r19	; 0x03
    2494:	22 83       	std	Z+2, r18	; 0x02
    2496:	08 95       	ret

00002498 <_ZN9EtherCard7copyMacEPhPKh>:
}

void EtherCard::copyMac (uint8_t *dst, const uint8_t *src) {
    2498:	dc 01       	movw	r26, r24
    memcpy(dst, src, ETH_LEN);
    249a:	96 e0       	ldi	r25, 0x06	; 6
    249c:	fb 01       	movw	r30, r22
    249e:	01 90       	ld	r0, Z+
    24a0:	0d 92       	st	X+, r0
    24a2:	9a 95       	dec	r25
    24a4:	e1 f7       	brne	.-8      	; 0x249e <_ZN9EtherCard7copyMacEPhPKh+0x6>
    24a6:	08 95       	ret

000024a8 <_ZN9EtherComm13CheckChecksumEPKch>:
	}
}

bool EtherComm::CheckChecksum(const char *data, uint8_t len){
  //data++; //Ignore first byte, the start byte.
  uint8_t checksum = (uint8_t)(*(data++)); //Start by 'adding' the command to the checksum
    24a8:	fc 01       	movw	r30, r24
    24aa:	20 81       	ld	r18, Z
  checksum += (uint8_t)(*(data++));
    24ac:	dc 01       	movw	r26, r24
    24ae:	12 96       	adiw	r26, 0x02	; 2
    24b0:	81 81       	ldd	r24, Z+1	; 0x01
    24b2:	92 2f       	mov	r25, r18
    24b4:	98 0f       	add	r25, r24
  while(len-- > 0){
    24b6:	3f ef       	ldi	r19, 0xFF	; 255
    24b8:	36 0f       	add	r19, r22
    24ba:	66 23       	and	r22, r22
    24bc:	61 f0       	breq	.+24     	; 0x24d6 <_ZN9EtherComm13CheckChecksumEPKch+0x2e>
    24be:	fd 01       	movw	r30, r26
    24c0:	83 2f       	mov	r24, r19
    checksum += (uint8_t)(*(data++));
    24c2:	21 91       	ld	r18, Z+
    24c4:	92 0f       	add	r25, r18

bool EtherComm::CheckChecksum(const char *data, uint8_t len){
  //data++; //Ignore first byte, the start byte.
  uint8_t checksum = (uint8_t)(*(data++)); //Start by 'adding' the command to the checksum
  checksum += (uint8_t)(*(data++));
  while(len-- > 0){
    24c6:	81 50       	subi	r24, 0x01	; 1
    24c8:	e0 f7       	brcc	.-8      	; 0x24c2 <_ZN9EtherComm13CheckChecksumEPKch+0x1a>
    24ca:	23 2f       	mov	r18, r19
    24cc:	30 e0       	ldi	r19, 0x00	; 0
    24ce:	2f 5f       	subi	r18, 0xFF	; 255
    24d0:	3f 4f       	sbci	r19, 0xFF	; 255
    24d2:	a2 0f       	add	r26, r18
    24d4:	b3 1f       	adc	r27, r19
    checksum += (uint8_t)(*(data++));
  }
//  Serial.println((uint8_t)(checksum & CHECKSUM_MASK));
  return (checksum & CHECKSUM_MASK) == (uint8_t)(*data);
    24d6:	81 e0       	ldi	r24, 0x01	; 1
    24d8:	2c 91       	ld	r18, X
    24da:	29 13       	cpse	r18, r25
    24dc:	80 e0       	ldi	r24, 0x00	; 0
}
    24de:	08 95       	ret

000024e0 <_Z10udpReceivejPhjPKcj>:

//char EtherComm::buffer[BUFFER_SIZE];
uint8_t* EtherComm::buffer = ether.buffer + UDP_DATA_P;

//callback that prints received packets to the serial port
void udpReceive(uint16_t dest_port, uint8_t src_ip[IP_LEN], uint16_t src_port, const char *data, uint16_t packetLen){
    24e0:	0f 93       	push	r16
    24e2:	1f 93       	push	r17
    24e4:	cf 93       	push	r28
    24e6:	df 93       	push	r29
	}
	Serial.println();
	Serial.print("Checksum: ");
	Serial.println((uint8_t)(*index));
*/	
	if(packetLen >= 3){ //At minimum, start byte, command, and checksum.
    24e8:	a8 01       	movw	r20, r16
    24ea:	43 50       	subi	r20, 0x03	; 3
    24ec:	51 09       	sbc	r21, r1
    24ee:	4f 3f       	cpi	r20, 0xFF	; 255
    24f0:	51 05       	cpc	r21, r1
    24f2:	09 f0       	breq	.+2      	; 0x24f6 <_Z10udpReceivejPhjPKcj+0x16>
    24f4:	90 f4       	brcc	.+36     	; 0x251a <_Z10udpReceivejPhjPKcj+0x3a>
		if(packetLen <= 258){
			uint8_t dataLen = (uint8_t)(packetLen - 3);
			if((uint8_t)data[0] == START_BYTE){
    24f6:	f9 01       	movw	r30, r18
    24f8:	80 81       	ld	r24, Z
    24fa:	8f 3f       	cpi	r24, 0xFF	; 255
    24fc:	71 f4       	brne	.+28     	; 0x251a <_Z10udpReceivejPhjPKcj+0x3a>
    24fe:	e9 01       	movw	r28, r18
	Serial.print("Checksum: ");
	Serial.println((uint8_t)(*index));
*/	
	if(packetLen >= 3){ //At minimum, start byte, command, and checksum.
		if(packetLen <= 258){
			uint8_t dataLen = (uint8_t)(packetLen - 3);
    2500:	03 50       	subi	r16, 0x03	; 3
			if((uint8_t)data[0] == START_BYTE){
			//		Serial.print("Computed Checksum: ");
				if(EtherComm::CheckChecksum(data, dataLen)){
    2502:	60 2f       	mov	r22, r16
    2504:	c9 01       	movw	r24, r18
    2506:	d0 df       	rcall	.-96     	; 0x24a8 <_ZN9EtherComm13CheckChecksumEPKch>
    2508:	88 23       	and	r24, r24
    250a:	39 f0       	breq	.+14     	; 0x251a <_Z10udpReceivejPhjPKcj+0x3a>
					EtherComm::CommandReceived((uint8_t)data[1], (const uint8_t*)(data + 2), dataLen);
    250c:	be 01       	movw	r22, r28
    250e:	6e 5f       	subi	r22, 0xFE	; 254
    2510:	7f 4f       	sbci	r23, 0xFF	; 255
    2512:	40 2f       	mov	r20, r16
    2514:	89 81       	ldd	r24, Y+1	; 0x01
    2516:	0e 94 14 07 	call	0xe28	; 0xe28 <_ZN9EtherComm15CommandReceivedEhPKhh>
				}
			}
		}
	}
}
    251a:	df 91       	pop	r29
    251c:	cf 91       	pop	r28
    251e:	1f 91       	pop	r17
    2520:	0f 91       	pop	r16
    2522:	08 95       	ret

00002524 <_ZN9EtherComm5beginEjjRVhS1_h>:
  }
//  Serial.println((uint8_t)(checksum & CHECKSUM_MASK));
  return (checksum & CHECKSUM_MASK) == (uint8_t)(*data);
}

bool EtherComm::begin(uint16_t recvPort, uint16_t destPort, Register& csDDR, Register& csPort, uint8_t csPin){
    2524:	0f 93       	push	r16
    2526:	cf 93       	push	r28
    2528:	df 93       	push	r29
    252a:	ec 01       	movw	r28, r24
    252c:	ca 01       	movw	r24, r20
    252e:	a9 01       	movw	r20, r18
    2530:	20 2f       	mov	r18, r16
  EtherComm::_recvPort = recvPort;
    2532:	d0 93 0e 06 	sts	0x060E, r29	; 0x80060e <_ZN9EtherComm9_recvPortE+0x1>
    2536:	c0 93 0d 06 	sts	0x060D, r28	; 0x80060d <_ZN9EtherComm9_recvPortE>
  EtherComm::_destPort = destPort;
    253a:	70 93 0c 06 	sts	0x060C, r23	; 0x80060c <_ZN9EtherComm9_destPortE+0x1>
    253e:	60 93 0b 06 	sts	0x060B, r22	; 0x80060b <_ZN9EtherComm9_destPortE>
  
  if (ether.begin(EtherComm::_mymac, csDDR, csPort, csPin) == 0) return false;
    2542:	bc 01       	movw	r22, r24
    2544:	8a e2       	ldi	r24, 0x2A	; 42
    2546:	92 e0       	ldi	r25, 0x02	; 2
    2548:	0e d9       	rcall	.-3556   	; 0x1766 <_ZN9EtherCard5beginEPKhRVhS3_h>
    254a:	88 23       	and	r24, r24
    254c:	79 f0       	breq	.+30     	; 0x256c <_ZN9EtherComm5beginEjjRVhS1_h+0x48>
  ether.staticSetup(EtherComm::_myip, EtherComm::_gwip);
    254e:	20 e0       	ldi	r18, 0x00	; 0
    2550:	30 e0       	ldi	r19, 0x00	; 0
    2552:	40 e0       	ldi	r20, 0x00	; 0
    2554:	50 e0       	ldi	r21, 0x00	; 0
    2556:	60 e3       	ldi	r22, 0x30	; 48
    2558:	72 e0       	ldi	r23, 0x02	; 2
    255a:	84 e3       	ldi	r24, 0x34	; 52
    255c:	92 e0       	ldi	r25, 0x02	; 2
    255e:	25 d9       	rcall	.-3510   	; 0x17aa <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_>
  ether.printIp("GW:  ", ether.gwip);
  ether.printIp("DNS: ", ether.dnsip);
  */
  
  //Register the udpSerialPrint() method to listen to port the receive port.
  ether.udpServerListenOnPort(&udpReceive, recvPort);
    2560:	be 01       	movw	r22, r28
    2562:	80 e7       	ldi	r24, 0x70	; 112
    2564:	92 e1       	ldi	r25, 0x12	; 18
    2566:	07 df       	rcall	.-498    	; 0x2376 <_ZN9EtherCard21udpServerListenOnPortEPFvjPhjPKcjEj>
  
  return true;
    2568:	81 e0       	ldi	r24, 0x01	; 1
    256a:	01 c0       	rjmp	.+2      	; 0x256e <_ZN9EtherComm5beginEjjRVhS1_h+0x4a>

bool EtherComm::begin(uint16_t recvPort, uint16_t destPort, Register& csDDR, Register& csPort, uint8_t csPin){
  EtherComm::_recvPort = recvPort;
  EtherComm::_destPort = destPort;
  
  if (ether.begin(EtherComm::_mymac, csDDR, csPort, csPin) == 0) return false;
    256c:	80 e0       	ldi	r24, 0x00	; 0
  
  //Register the udpSerialPrint() method to listen to port the receive port.
  ether.udpServerListenOnPort(&udpReceive, recvPort);
  
  return true;
}
    256e:	df 91       	pop	r29
    2570:	cf 91       	pop	r28
    2572:	0f 91       	pop	r16
    2574:	08 95       	ret

00002576 <_ZN9EtherComm11SendCommandEhh>:

void EtherComm::SendCommand(uint8_t cmd, uint8_t len){
    2576:	0f 93       	push	r16
    2578:	1f 93       	push	r17
    257a:	cf 93       	push	r28
    257c:	df 93       	push	r29
  EtherComm::buffer[0] = START_BYTE;
    257e:	e0 91 24 02 	lds	r30, 0x0224	; 0x800224 <_ZN9EtherComm6bufferE>
    2582:	f0 91 25 02 	lds	r31, 0x0225	; 0x800225 <_ZN9EtherComm6bufferE+0x1>
    2586:	9f ef       	ldi	r25, 0xFF	; 255
    2588:	90 83       	st	Z, r25
  EtherComm::buffer[1] = cmd;
    258a:	e0 91 24 02 	lds	r30, 0x0224	; 0x800224 <_ZN9EtherComm6bufferE>
    258e:	f0 91 25 02 	lds	r31, 0x0225	; 0x800225 <_ZN9EtherComm6bufferE+0x1>
    2592:	81 83       	std	Z+1, r24	; 0x01
  //EtherComm::buffer[2] = len;
  
  uint8_t checksum = START_BYTE + cmd;
    2594:	81 50       	subi	r24, 0x01	; 1
  uint8_t* index = &EtherComm::buffer[2]; //TODO why is char* being used? convert ot uint8_t*!!
    2596:	c0 91 24 02 	lds	r28, 0x0224	; 0x800224 <_ZN9EtherComm6bufferE>
    259a:	d0 91 25 02 	lds	r29, 0x0225	; 0x800225 <_ZN9EtherComm6bufferE+0x1>
    259e:	de 01       	movw	r26, r28
    25a0:	12 96       	adiw	r26, 0x02	; 2
  uint8_t bytes = len;
  while(bytes-- > 0){
    25a2:	4f ef       	ldi	r20, 0xFF	; 255
    25a4:	46 0f       	add	r20, r22
    25a6:	66 23       	and	r22, r22
    25a8:	81 f0       	breq	.+32     	; 0x25ca <_ZN9EtherComm11SendCommandEhh+0x54>
    25aa:	fd 01       	movw	r30, r26
    25ac:	50 e0       	ldi	r21, 0x00	; 0
    25ae:	9a 01       	movw	r18, r20
    25b0:	2d 5f       	subi	r18, 0xFD	; 253
    25b2:	3f 4f       	sbci	r19, 0xFF	; 255
    25b4:	2c 0f       	add	r18, r28
    25b6:	3d 1f       	adc	r19, r29
    checksum += (uint8_t)(*(index++));  
    25b8:	91 91       	ld	r25, Z+
    25ba:	89 0f       	add	r24, r25
  //EtherComm::buffer[2] = len;
  
  uint8_t checksum = START_BYTE + cmd;
  uint8_t* index = &EtherComm::buffer[2]; //TODO why is char* being used? convert ot uint8_t*!!
  uint8_t bytes = len;
  while(bytes-- > 0){
    25bc:	e2 17       	cp	r30, r18
    25be:	f3 07       	cpc	r31, r19
    25c0:	d9 f7       	brne	.-10     	; 0x25b8 <_ZN9EtherComm11SendCommandEhh+0x42>
    25c2:	4f 5f       	subi	r20, 0xFF	; 255
    25c4:	5f 4f       	sbci	r21, 0xFF	; 255
    25c6:	a4 0f       	add	r26, r20
    25c8:	b5 1f       	adc	r27, r21
    checksum += (uint8_t)(*(index++));  
  }
  (*index) = (uint8_t)(checksum & CHECKSUM_MASK);
    25ca:	8c 93       	st	X, r24

  //Serial.print("Send: ");
  //Serial.println(len);
  ether.sendUdp(EtherComm::buffer, (uint16_t)len + (uint16_t)3, _recvPort, _destIP, _destPort);
    25cc:	00 91 0b 06 	lds	r16, 0x060B	; 0x80060b <_ZN9EtherComm9_destPortE>
    25d0:	10 91 0c 06 	lds	r17, 0x060C	; 0x80060c <_ZN9EtherComm9_destPortE+0x1>
    25d4:	40 91 0d 06 	lds	r20, 0x060D	; 0x80060d <_ZN9EtherComm9_recvPortE>
    25d8:	50 91 0e 06 	lds	r21, 0x060E	; 0x80060e <_ZN9EtherComm9_recvPortE+0x1>
    25dc:	70 e0       	ldi	r23, 0x00	; 0
    25de:	6d 5f       	subi	r22, 0xFD	; 253
    25e0:	7f 4f       	sbci	r23, 0xFF	; 255
    25e2:	26 e2       	ldi	r18, 0x26	; 38
    25e4:	32 e0       	ldi	r19, 0x02	; 2
    25e6:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <_ZN9EtherComm6bufferE>
    25ea:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <_ZN9EtherComm6bufferE+0x1>
    25ee:	3e db       	rcall	.-2436   	; 0x1c6c <_ZN9EtherCard7sendUdpEPKhjjS1_j>
}
    25f0:	df 91       	pop	r29
    25f2:	cf 91       	pop	r28
    25f4:	1f 91       	pop	r17
    25f6:	0f 91       	pop	r16
    25f8:	08 95       	ret

000025fa <main>:
#include "Peripherals/HardwareSerial.h"
#include "Robot.h"
#include "TestIMU.h"

int main(void){
	TestIMU();
    25fa:	0e 94 b3 1b 	call	0x3766	; 0x3766 <_Z7TestIMUv>
	public:
	inline HardwareSerial(
	volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
	volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
	volatile uint8_t *ucsrc, volatile uint8_t *udr);
	void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    25fe:	26 e0       	ldi	r18, 0x06	; 6
    2600:	40 e8       	ldi	r20, 0x80	; 128
    2602:	55 e2       	ldi	r21, 0x25	; 37
    2604:	60 e0       	ldi	r22, 0x00	; 0
    2606:	70 e0       	ldi	r23, 0x00	; 0
    2608:	8f e0       	ldi	r24, 0x0F	; 15
    260a:	96 e0       	ldi	r25, 0x06	; 6
    260c:	15 d1       	rcall	.+554    	; 0x2838 <_ZN14HardwareSerial5beginEmh>
	Serial.begin(9600);
	Serial.println("\nInitializing...");
    260e:	6f e4       	ldi	r22, 0x4F	; 79
    2610:	72 e0       	ldi	r23, 0x02	; 2
    2612:	8f e0       	ldi	r24, 0x0F	; 15
    2614:	96 e0       	ldi	r25, 0x06	; 6
    2616:	0e 94 27 1c 	call	0x384e	; 0x384e <_ZN5Print7printlnEPKc>
	
	if(!rov.begin()){
    261a:	6d d7       	rcall	.+3802   	; 0x34f6 <_ZN5Robot5beginEv>
    261c:	81 11       	cpse	r24, r1
    261e:	07 c0       	rjmp	.+14     	; 0x262e <main+0x34>
		Serial.println("Failed to initialize robot.");
    2620:	60 e6       	ldi	r22, 0x60	; 96
    2622:	72 e0       	ldi	r23, 0x02	; 2
    2624:	8f e0       	ldi	r24, 0x0F	; 15
    2626:	96 e0       	ldi	r25, 0x06	; 6
    2628:	0e 94 27 1c 	call	0x384e	; 0x384e <_ZN5Print7printlnEPKc>
    262c:	ff cf       	rjmp	.-2      	; 0x262c <main+0x32>
		while(1);
	}
	Serial.println("Robot initialized.");
    262e:	6c e7       	ldi	r22, 0x7C	; 124
    2630:	72 e0       	ldi	r23, 0x02	; 2
    2632:	8f e0       	ldi	r24, 0x0F	; 15
    2634:	96 e0       	ldi	r25, 0x06	; 6
    2636:	0e 94 27 1c 	call	0x384e	; 0x384e <_ZN5Print7printlnEPKc>
	
	if(!EtherComm::begin((uint16_t)6001, (uint16_t)6002, EthernetDDR, EthernetPort, EthernetPin_CS)){
    263a:	00 e2       	ldi	r16, 0x20	; 32
    263c:	22 e0       	ldi	r18, 0x02	; 2
    263e:	31 e0       	ldi	r19, 0x01	; 1
    2640:	41 e0       	ldi	r20, 0x01	; 1
    2642:	51 e0       	ldi	r21, 0x01	; 1
    2644:	62 e7       	ldi	r22, 0x72	; 114
    2646:	77 e1       	ldi	r23, 0x17	; 23
    2648:	81 e7       	ldi	r24, 0x71	; 113
    264a:	97 e1       	ldi	r25, 0x17	; 23
    264c:	6b df       	rcall	.-298    	; 0x2524 <_ZN9EtherComm5beginEjjRVhS1_h>
    264e:	81 11       	cpse	r24, r1
    2650:	07 c0       	rjmp	.+14     	; 0x2660 <main+0x66>
		Serial.println("Failed to access Ethernet controller.");
    2652:	6f e8       	ldi	r22, 0x8F	; 143
    2654:	72 e0       	ldi	r23, 0x02	; 2
    2656:	8f e0       	ldi	r24, 0x0F	; 15
    2658:	96 e0       	ldi	r25, 0x06	; 6
    265a:	0e 94 27 1c 	call	0x384e	; 0x384e <_ZN5Print7printlnEPKc>
    265e:	ff cf       	rjmp	.-2      	; 0x265e <main+0x64>
		while(1);
	}
	Serial.println("Connected to controller.");
    2660:	65 eb       	ldi	r22, 0xB5	; 181
    2662:	72 e0       	ldi	r23, 0x02	; 2
    2664:	8f e0       	ldi	r24, 0x0F	; 15
    2666:	96 e0       	ldi	r25, 0x06	; 6
    2668:	0e 94 27 1c 	call	0x384e	; 0x384e <_ZN5Print7printlnEPKc>
  static bool begin(uint16_t recvPort, uint16_t destPort, Register& csDDR, Register& csPort, uint8_t csPin);

  friend void udpReceive(uint16_t dest_port, uint8_t src_ip[IP_LEN], uint16_t src_port, const char *data, uint16_t len);

  static void Loop(){
    ether.packetLoop(ether.packetReceive());
    266c:	0e 94 2f 0b 	call	0x165e	; 0x165e <_ZN8ENC28J6013packetReceiveEv>
    2670:	b4 db       	rcall	.-2200   	; 0x1dda <_ZN9EtherCard10packetLoopEj>
    2672:	fc cf       	rjmp	.-8      	; 0x266c <main+0x72>

00002674 <_ZN14HardwareSerial9availableEv>:
	#endif
	#if defined(HAVE_HWSERIAL2)
	if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
	#endif
	#if defined(HAVE_HWSERIAL3)
	if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    2674:	fc 01       	movw	r30, r24
    2676:	97 85       	ldd	r25, Z+15	; 0x0f
    2678:	20 89       	ldd	r18, Z+16	; 0x10
    267a:	89 2f       	mov	r24, r25
    267c:	90 e0       	ldi	r25, 0x00	; 0
    267e:	80 5c       	subi	r24, 0xC0	; 192
    2680:	9f 4f       	sbci	r25, 0xFF	; 255
    2682:	82 1b       	sub	r24, r18
    2684:	91 09       	sbc	r25, r1
    2686:	8f 73       	andi	r24, 0x3F	; 63
    2688:	99 27       	eor	r25, r25
    268a:	08 95       	ret

0000268c <_ZN14HardwareSerial4peekEv>:
    268c:	fc 01       	movw	r30, r24
    268e:	97 85       	ldd	r25, Z+15	; 0x0f
    2690:	80 89       	ldd	r24, Z+16	; 0x10
    2692:	98 17       	cp	r25, r24
    2694:	31 f0       	breq	.+12     	; 0x26a2 <_ZN14HardwareSerial4peekEv+0x16>
    2696:	80 89       	ldd	r24, Z+16	; 0x10
    2698:	e8 0f       	add	r30, r24
    269a:	f1 1d       	adc	r31, r1
    269c:	83 89       	ldd	r24, Z+19	; 0x13
    269e:	90 e0       	ldi	r25, 0x00	; 0
    26a0:	08 95       	ret
    26a2:	8f ef       	ldi	r24, 0xFF	; 255
    26a4:	9f ef       	ldi	r25, 0xFF	; 255
    26a6:	08 95       	ret

000026a8 <_ZN14HardwareSerial4readEv>:
    26a8:	fc 01       	movw	r30, r24
    26aa:	97 85       	ldd	r25, Z+15	; 0x0f
    26ac:	80 89       	ldd	r24, Z+16	; 0x10
    26ae:	98 17       	cp	r25, r24
    26b0:	61 f0       	breq	.+24     	; 0x26ca <_ZN14HardwareSerial4readEv+0x22>
    26b2:	80 89       	ldd	r24, Z+16	; 0x10
    26b4:	df 01       	movw	r26, r30
    26b6:	a8 0f       	add	r26, r24
    26b8:	b1 1d       	adc	r27, r1
    26ba:	53 96       	adiw	r26, 0x13	; 19
    26bc:	8c 91       	ld	r24, X
    26be:	90 89       	ldd	r25, Z+16	; 0x10
    26c0:	9f 5f       	subi	r25, 0xFF	; 255
    26c2:	9f 73       	andi	r25, 0x3F	; 63
    26c4:	90 8b       	std	Z+16, r25	; 0x10
    26c6:	90 e0       	ldi	r25, 0x00	; 0
    26c8:	08 95       	ret
    26ca:	8f ef       	ldi	r24, 0xFF	; 255
    26cc:	9f ef       	ldi	r25, 0xFF	; 255
    26ce:	08 95       	ret

000026d0 <_ZN14HardwareSerial17availableForWriteEv>:
    26d0:	fc 01       	movw	r30, r24
    26d2:	21 89       	ldd	r18, Z+17	; 0x11
    26d4:	32 89       	ldd	r19, Z+18	; 0x12
    26d6:	23 17       	cp	r18, r19
    26d8:	38 f0       	brcs	.+14     	; 0x26e8 <_ZN14HardwareSerial17availableForWriteEv+0x18>
    26da:	8f e3       	ldi	r24, 0x3F	; 63
    26dc:	90 e0       	ldi	r25, 0x00	; 0
    26de:	82 1b       	sub	r24, r18
    26e0:	91 09       	sbc	r25, r1
    26e2:	83 0f       	add	r24, r19
    26e4:	91 1d       	adc	r25, r1
    26e6:	08 95       	ret
    26e8:	83 2f       	mov	r24, r19
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	82 1b       	sub	r24, r18
    26ee:	91 09       	sbc	r25, r1
    26f0:	01 97       	sbiw	r24, 0x01	; 1
    26f2:	08 95       	ret

000026f4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    26f4:	fc 01       	movw	r30, r24
	// If interrupts are enabled, there must be more data in the output
	// buffer. Send the next byte
	unsigned char c = _tx_buffer[_tx_buffer_tail];
    26f6:	82 89       	ldd	r24, Z+18	; 0x12
    26f8:	df 01       	movw	r26, r30
    26fa:	a8 0f       	add	r26, r24
    26fc:	b1 1d       	adc	r27, r1
    26fe:	ad 5a       	subi	r26, 0xAD	; 173
    2700:	bf 4f       	sbci	r27, 0xFF	; 255
    2702:	8c 91       	ld	r24, X
	_tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    2704:	22 89       	ldd	r18, Z+18	; 0x12
    2706:	30 e0       	ldi	r19, 0x00	; 0
    2708:	2f 5f       	subi	r18, 0xFF	; 255
    270a:	3f 4f       	sbci	r19, 0xFF	; 255
    270c:	2f 73       	andi	r18, 0x3F	; 63
    270e:	30 78       	andi	r19, 0x80	; 128
    2710:	33 23       	and	r19, r19
    2712:	34 f4       	brge	.+12     	; 0x2720 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x2c>
    2714:	21 50       	subi	r18, 0x01	; 1
    2716:	31 09       	sbc	r19, r1
    2718:	20 6c       	ori	r18, 0xC0	; 192
    271a:	3f 6f       	ori	r19, 0xFF	; 255
    271c:	2f 5f       	subi	r18, 0xFF	; 255
    271e:	3f 4f       	sbci	r19, 0xFF	; 255
    2720:	22 8b       	std	Z+18, r18	; 0x12

	*_udr = c;
    2722:	a4 85       	ldd	r26, Z+12	; 0x0c
    2724:	b5 85       	ldd	r27, Z+13	; 0x0d
    2726:	8c 93       	st	X, r24
	// location". This makes sure flush() won't return until the bytes
	// actually got written. Other r/w bits are preserved, and zeroes
	// written to the rest.

	#ifdef MPCM0
	*_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    2728:	a6 81       	ldd	r26, Z+6	; 0x06
    272a:	b7 81       	ldd	r27, Z+7	; 0x07
    272c:	8c 91       	ld	r24, X
    272e:	83 70       	andi	r24, 0x03	; 3
    2730:	80 64       	ori	r24, 0x40	; 64
    2732:	8c 93       	st	X, r24
	#else
	*_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
	#endif

	if (_tx_buffer_head == _tx_buffer_tail) {
    2734:	91 89       	ldd	r25, Z+17	; 0x11
    2736:	82 89       	ldd	r24, Z+18	; 0x12
    2738:	98 13       	cpse	r25, r24
    273a:	06 c0       	rjmp	.+12     	; 0x2748 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x54>
		// Buffer empty, so disable interrupts
		cbi(*_ucsrb, UDRIE0);
    273c:	00 84       	ldd	r0, Z+8	; 0x08
    273e:	f1 85       	ldd	r31, Z+9	; 0x09
    2740:	e0 2d       	mov	r30, r0
    2742:	80 81       	ld	r24, Z
    2744:	8f 7d       	andi	r24, 0xDF	; 223
    2746:	80 83       	st	Z, r24
    2748:	08 95       	ret

0000274a <_ZN14HardwareSerial5flushEv>:
	if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
	return tail - head - 1;
}

void HardwareSerial::flush()
{
    274a:	cf 93       	push	r28
    274c:	df 93       	push	r29
    274e:	ec 01       	movw	r28, r24
	// If we have never written a byte, no need to flush. This special
	// case is needed since there is no way to force the TXC (transmit
	// complete) bit to 1 during initialization
	if (!_written)
    2750:	8e 85       	ldd	r24, Y+14	; 0x0e
    2752:	88 23       	and	r24, r24
    2754:	d1 f0       	breq	.+52     	; 0x278a <_ZN14HardwareSerial5flushEv+0x40>
	return;

	while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    2756:	e8 85       	ldd	r30, Y+8	; 0x08
    2758:	f9 85       	ldd	r31, Y+9	; 0x09
    275a:	80 81       	ld	r24, Z
    275c:	85 fd       	sbrc	r24, 5
    275e:	05 c0       	rjmp	.+10     	; 0x276a <_ZN14HardwareSerial5flushEv+0x20>
    2760:	ae 81       	ldd	r26, Y+6	; 0x06
    2762:	bf 81       	ldd	r27, Y+7	; 0x07
    2764:	8c 91       	ld	r24, X
    2766:	86 fd       	sbrc	r24, 6
    2768:	10 c0       	rjmp	.+32     	; 0x278a <_ZN14HardwareSerial5flushEv+0x40>
		if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    276a:	0f b6       	in	r0, 0x3f	; 63
    276c:	07 fc       	sbrc	r0, 7
    276e:	f5 cf       	rjmp	.-22     	; 0x275a <_ZN14HardwareSerial5flushEv+0x10>
    2770:	80 81       	ld	r24, Z
    2772:	85 ff       	sbrs	r24, 5
    2774:	f2 cf       	rjmp	.-28     	; 0x275a <_ZN14HardwareSerial5flushEv+0x10>
    2776:	03 c0       	rjmp	.+6      	; 0x277e <_ZN14HardwareSerial5flushEv+0x34>
		// Interrupts are globally disabled, but the DR empty
		// interrupt should be enabled, so poll the DR empty flag to
		// prevent deadlock
		if (bit_is_set(*_ucsra, UDRE0))
		_tx_udr_empty_irq();
    2778:	ce 01       	movw	r24, r28
    277a:	bc df       	rcall	.-136    	; 0x26f4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    277c:	ec cf       	rjmp	.-40     	; 0x2756 <_ZN14HardwareSerial5flushEv+0xc>
	while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
		if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
		// Interrupts are globally disabled, but the DR empty
		// interrupt should be enabled, so poll the DR empty flag to
		// prevent deadlock
		if (bit_is_set(*_ucsra, UDRE0))
    277e:	ae 81       	ldd	r26, Y+6	; 0x06
    2780:	bf 81       	ldd	r27, Y+7	; 0x07
    2782:	8c 91       	ld	r24, X
    2784:	85 ff       	sbrs	r24, 5
    2786:	e9 cf       	rjmp	.-46     	; 0x275a <_ZN14HardwareSerial5flushEv+0x10>
    2788:	f7 cf       	rjmp	.-18     	; 0x2778 <_ZN14HardwareSerial5flushEv+0x2e>
		_tx_udr_empty_irq();
	}
	// If we get here, nothing is queued anymore (DRIE is disabled) and
	// the hardware finished tranmission (TXC is set).
}
    278a:	df 91       	pop	r29
    278c:	cf 91       	pop	r28
    278e:	08 95       	ret

00002790 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    2790:	0f 93       	push	r16
    2792:	1f 93       	push	r17
    2794:	cf 93       	push	r28
    2796:	df 93       	push	r29
    2798:	ec 01       	movw	r28, r24
	_written = true;
    279a:	81 e0       	ldi	r24, 0x01	; 1
    279c:	8e 87       	std	Y+14, r24	; 0x0e
	// If the buffer and the data register is empty, just write the byte
	// to the data register and be done. This shortcut helps
	// significantly improve the effective datarate at high (>
	// 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
	if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    279e:	99 89       	ldd	r25, Y+17	; 0x11
    27a0:	8a 89       	ldd	r24, Y+18	; 0x12
    27a2:	98 13       	cpse	r25, r24
    27a4:	25 c0       	rjmp	.+74     	; 0x27f0 <_ZN14HardwareSerial5writeEh+0x60>
    27a6:	ee 81       	ldd	r30, Y+6	; 0x06
    27a8:	ff 81       	ldd	r31, Y+7	; 0x07
    27aa:	80 81       	ld	r24, Z
    27ac:	85 fd       	sbrc	r24, 5
    27ae:	31 c0       	rjmp	.+98     	; 0x2812 <_ZN14HardwareSerial5writeEh+0x82>
    27b0:	1f c0       	rjmp	.+62     	; 0x27f0 <_ZN14HardwareSerial5writeEh+0x60>
	}
	tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
	// If the output buffer is full, there's nothing for it other than to
	// wait for the interrupt handler to empty it a bit
	while (i == _tx_buffer_tail) {
    27b2:	8a 89       	ldd	r24, Y+18	; 0x12
    27b4:	18 13       	cpse	r17, r24
    27b6:	0b c0       	rjmp	.+22     	; 0x27ce <_ZN14HardwareSerial5writeEh+0x3e>
		if (bit_is_clear(SREG, SREG_I)) {
    27b8:	0f b6       	in	r0, 0x3f	; 63
    27ba:	07 fc       	sbrc	r0, 7
    27bc:	fa cf       	rjmp	.-12     	; 0x27b2 <_ZN14HardwareSerial5writeEh+0x22>
			// Interrupts are disabled, so we'll have to poll the data
			// register empty flag ourselves. If it is set, pretend an
			// interrupt has happened and call the handler to free up
			// space for us.
			if(bit_is_set(*_ucsra, UDRE0))
    27be:	ee 81       	ldd	r30, Y+6	; 0x06
    27c0:	ff 81       	ldd	r31, Y+7	; 0x07
    27c2:	80 81       	ld	r24, Z
    27c4:	85 ff       	sbrs	r24, 5
    27c6:	f5 cf       	rjmp	.-22     	; 0x27b2 <_ZN14HardwareSerial5writeEh+0x22>
			_tx_udr_empty_irq();
    27c8:	ce 01       	movw	r24, r28
    27ca:	94 df       	rcall	.-216    	; 0x26f4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    27cc:	f2 cf       	rjmp	.-28     	; 0x27b2 <_ZN14HardwareSerial5writeEh+0x22>
			} else {
			// nop, the interrupt handler will free up space for us
		}
	}

	_tx_buffer[_tx_buffer_head] = c;
    27ce:	89 89       	ldd	r24, Y+17	; 0x11
    27d0:	fe 01       	movw	r30, r28
    27d2:	e8 0f       	add	r30, r24
    27d4:	f1 1d       	adc	r31, r1
    27d6:	ed 5a       	subi	r30, 0xAD	; 173
    27d8:	ff 4f       	sbci	r31, 0xFF	; 255
    27da:	00 83       	st	Z, r16

	// make atomic to prevent execution of ISR between setting the
	// head pointer and setting the interrupt flag resulting in buffer
	// retransmission
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    27dc:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    27de:	f8 94       	cli
		_tx_buffer_head = i;
    27e0:	19 8b       	std	Y+17, r17	; 0x11
		sbi(*_ucsrb, UDRIE0);
    27e2:	e8 85       	ldd	r30, Y+8	; 0x08
    27e4:	f9 85       	ldd	r31, Y+9	; 0x09
    27e6:	80 81       	ld	r24, Z
    27e8:	80 62       	ori	r24, 0x20	; 32
    27ea:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    27ec:	9f bf       	out	0x3f, r25	; 63
	}
	
	return 1;
    27ee:	1d c0       	rjmp	.+58     	; 0x282a <_ZN14HardwareSerial5writeEh+0x9a>
			*_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
			#endif
		}
		return 1;
	}
	tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    27f0:	29 89       	ldd	r18, Y+17	; 0x11
    27f2:	30 e0       	ldi	r19, 0x00	; 0
    27f4:	2f 5f       	subi	r18, 0xFF	; 255
    27f6:	3f 4f       	sbci	r19, 0xFF	; 255
    27f8:	2f 73       	andi	r18, 0x3F	; 63
    27fa:	30 78       	andi	r19, 0x80	; 128
    27fc:	33 23       	and	r19, r19
    27fe:	34 f4       	brge	.+12     	; 0x280c <_ZN14HardwareSerial5writeEh+0x7c>
    2800:	21 50       	subi	r18, 0x01	; 1
    2802:	31 09       	sbc	r19, r1
    2804:	20 6c       	ori	r18, 0xC0	; 192
    2806:	3f 6f       	ori	r19, 0xFF	; 255
    2808:	2f 5f       	subi	r18, 0xFF	; 255
    280a:	3f 4f       	sbci	r19, 0xFF	; 255
    280c:	06 2f       	mov	r16, r22
    280e:	12 2f       	mov	r17, r18
    2810:	d0 cf       	rjmp	.-96     	; 0x27b2 <_ZN14HardwareSerial5writeEh+0x22>
		// So writing UDR must happen first.
		// Writing UDR and clearing TC must be done atomically, otherwise
		// interrupts might delay the TXC clear so the byte written to UDR
		// is transmitted (setting TXC) before clearing TXC. Then TXC will
		// be cleared when no bytes are left, causing flush() to hang
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    2812:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2814:	f8 94       	cli
			*_udr = c;
    2816:	ec 85       	ldd	r30, Y+12	; 0x0c
    2818:	fd 85       	ldd	r31, Y+13	; 0x0d
    281a:	60 83       	st	Z, r22
			#ifdef MPCM0
			*_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    281c:	ee 81       	ldd	r30, Y+6	; 0x06
    281e:	ff 81       	ldd	r31, Y+7	; 0x07
    2820:	80 81       	ld	r24, Z
    2822:	83 70       	andi	r24, 0x03	; 3
    2824:	80 64       	ori	r24, 0x40	; 64
    2826:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2828:	9f bf       	out	0x3f, r25	; 63
		_tx_buffer_head = i;
		sbi(*_ucsrb, UDRIE0);
	}
	
	return 1;
}
    282a:	81 e0       	ldi	r24, 0x01	; 1
    282c:	90 e0       	ldi	r25, 0x00	; 0
    282e:	df 91       	pop	r29
    2830:	cf 91       	pop	r28
    2832:	1f 91       	pop	r17
    2834:	0f 91       	pop	r16
    2836:	08 95       	ret

00002838 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, uint8_t config)
{
    2838:	cf 92       	push	r12
    283a:	df 92       	push	r13
    283c:	ef 92       	push	r14
    283e:	ff 92       	push	r15
    2840:	1f 93       	push	r17
    2842:	cf 93       	push	r28
    2844:	df 93       	push	r29
    2846:	ec 01       	movw	r28, r24
    2848:	6a 01       	movw	r12, r20
    284a:	7b 01       	movw	r14, r22
    284c:	12 2f       	mov	r17, r18
	// Try u2x mode first
	uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
	*_ucsra = 1 << U2X0;
    284e:	ee 81       	ldd	r30, Y+6	; 0x06
    2850:	ff 81       	ldd	r31, Y+7	; 0x07
    2852:	82 e0       	ldi	r24, 0x02	; 2
    2854:	80 83       	st	Z, r24
	// hardcoded exception for 57600 for compatibility with the bootloader
	// shipped with the Duemilanove and previous boards and the firmware
	// on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
	// be > 4095, so switch back to non-u2x mode if the baud rate is too
	// low.
	if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    2856:	41 15       	cp	r20, r1
    2858:	51 4e       	sbci	r21, 0xE1	; 225
    285a:	61 05       	cpc	r22, r1
    285c:	71 05       	cpc	r23, r1
    285e:	b1 f0       	breq	.+44     	; 0x288c <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, uint8_t config)
{
	// Try u2x mode first
	uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    2860:	60 e0       	ldi	r22, 0x00	; 0
    2862:	79 e0       	ldi	r23, 0x09	; 9
    2864:	8d e3       	ldi	r24, 0x3D	; 61
    2866:	90 e0       	ldi	r25, 0x00	; 0
    2868:	a7 01       	movw	r20, r14
    286a:	96 01       	movw	r18, r12
    286c:	0e 94 1c 20 	call	0x4038	; 0x4038 <__udivmodsi4>
    2870:	da 01       	movw	r26, r20
    2872:	c9 01       	movw	r24, r18
    2874:	01 97       	sbiw	r24, 0x01	; 1
    2876:	a1 09       	sbc	r26, r1
    2878:	b1 09       	sbc	r27, r1
    287a:	b6 95       	lsr	r27
    287c:	a7 95       	ror	r26
    287e:	97 95       	ror	r25
    2880:	87 95       	ror	r24
    2882:	9c 01       	movw	r18, r24
	// hardcoded exception for 57600 for compatibility with the bootloader
	// shipped with the Duemilanove and previous boards and the firmware
	// on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
	// be > 4095, so switch back to non-u2x mode if the baud rate is too
	// low.
	if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    2884:	21 15       	cp	r18, r1
    2886:	80 e1       	ldi	r24, 0x10	; 16
    2888:	38 07       	cpc	r19, r24
    288a:	a8 f0       	brcs	.+42     	; 0x28b6 <_ZN14HardwareSerial5beginEmh+0x7e>
	{
		*_ucsra = 0;
    288c:	ee 81       	ldd	r30, Y+6	; 0x06
    288e:	ff 81       	ldd	r31, Y+7	; 0x07
    2890:	10 82       	st	Z, r1
		baud_setting = (F_CPU / 8 / baud - 1) / 2;
    2892:	60 e8       	ldi	r22, 0x80	; 128
    2894:	74 e8       	ldi	r23, 0x84	; 132
    2896:	8e e1       	ldi	r24, 0x1E	; 30
    2898:	90 e0       	ldi	r25, 0x00	; 0
    289a:	a7 01       	movw	r20, r14
    289c:	96 01       	movw	r18, r12
    289e:	0e 94 1c 20 	call	0x4038	; 0x4038 <__udivmodsi4>
    28a2:	da 01       	movw	r26, r20
    28a4:	c9 01       	movw	r24, r18
    28a6:	01 97       	sbiw	r24, 0x01	; 1
    28a8:	a1 09       	sbc	r26, r1
    28aa:	b1 09       	sbc	r27, r1
    28ac:	b6 95       	lsr	r27
    28ae:	a7 95       	ror	r26
    28b0:	97 95       	ror	r25
    28b2:	87 95       	ror	r24
    28b4:	9c 01       	movw	r18, r24
	}

	// assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
	*_ubrrh = baud_setting >> 8;
    28b6:	ea 81       	ldd	r30, Y+2	; 0x02
    28b8:	fb 81       	ldd	r31, Y+3	; 0x03
    28ba:	30 83       	st	Z, r19
	*_ubrrl = baud_setting;
    28bc:	ec 81       	ldd	r30, Y+4	; 0x04
    28be:	fd 81       	ldd	r31, Y+5	; 0x05
    28c0:	20 83       	st	Z, r18

	_written = false;
    28c2:	1e 86       	std	Y+14, r1	; 0x0e

	//set the data bits, parity, and stop bits
	#if defined(__AVR_ATmega8__)
	config |= 0x80; // select UCSRC register (shared with UBRRH)
	#endif
	*_ucsrc = config;
    28c4:	ea 85       	ldd	r30, Y+10	; 0x0a
    28c6:	fb 85       	ldd	r31, Y+11	; 0x0b
    28c8:	10 83       	st	Z, r17
	
	sbi(*_ucsrb, RXEN0);
    28ca:	e8 85       	ldd	r30, Y+8	; 0x08
    28cc:	f9 85       	ldd	r31, Y+9	; 0x09
    28ce:	80 81       	ld	r24, Z
    28d0:	80 61       	ori	r24, 0x10	; 16
    28d2:	80 83       	st	Z, r24
	sbi(*_ucsrb, TXEN0);
    28d4:	e8 85       	ldd	r30, Y+8	; 0x08
    28d6:	f9 85       	ldd	r31, Y+9	; 0x09
    28d8:	80 81       	ld	r24, Z
    28da:	88 60       	ori	r24, 0x08	; 8
    28dc:	80 83       	st	Z, r24
	sbi(*_ucsrb, RXCIE0);
    28de:	e8 85       	ldd	r30, Y+8	; 0x08
    28e0:	f9 85       	ldd	r31, Y+9	; 0x09
    28e2:	80 81       	ld	r24, Z
    28e4:	80 68       	ori	r24, 0x80	; 128
    28e6:	80 83       	st	Z, r24
	cbi(*_ucsrb, UDRIE0);
    28e8:	e8 85       	ldd	r30, Y+8	; 0x08
    28ea:	f9 85       	ldd	r31, Y+9	; 0x09
    28ec:	80 81       	ld	r24, Z
    28ee:	8f 7d       	andi	r24, 0xDF	; 223
    28f0:	80 83       	st	Z, r24
}
    28f2:	df 91       	pop	r29
    28f4:	cf 91       	pop	r28
    28f6:	1f 91       	pop	r17
    28f8:	ff 90       	pop	r15
    28fa:	ef 90       	pop	r14
    28fc:	df 90       	pop	r13
    28fe:	cf 90       	pop	r12
    2900:	08 95       	ret

00002902 <__vector_25>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
}
    2902:	1f 92       	push	r1
    2904:	0f 92       	push	r0
    2906:	0f b6       	in	r0, 0x3f	; 63
    2908:	0f 92       	push	r0
    290a:	11 24       	eor	r1, r1
    290c:	0b b6       	in	r0, 0x3b	; 59
    290e:	0f 92       	push	r0
    2910:	2f 93       	push	r18
    2912:	8f 93       	push	r24
    2914:	9f 93       	push	r25
    2916:	af 93       	push	r26
    2918:	bf 93       	push	r27
    291a:	ef 93       	push	r30
    291c:	ff 93       	push	r31
    291e:	e0 91 15 06 	lds	r30, 0x0615	; 0x800615 <Serial+0x6>
    2922:	f0 91 16 06 	lds	r31, 0x0616	; 0x800616 <Serial+0x7>
    2926:	80 81       	ld	r24, Z
    2928:	82 fd       	sbrc	r24, 2
    292a:	14 c0       	rjmp	.+40     	; 0x2954 <__vector_25+0x52>
    292c:	ef e0       	ldi	r30, 0x0F	; 15
    292e:	f6 e0       	ldi	r31, 0x06	; 6
    2930:	a4 85       	ldd	r26, Z+12	; 0x0c
    2932:	b5 85       	ldd	r27, Z+13	; 0x0d
    2934:	2c 91       	ld	r18, X
    2936:	87 85       	ldd	r24, Z+15	; 0x0f
    2938:	8f 5f       	subi	r24, 0xFF	; 255
    293a:	8f 70       	andi	r24, 0x0F	; 15
    293c:	90 89       	ldd	r25, Z+16	; 0x10
    293e:	89 17       	cp	r24, r25
    2940:	71 f0       	breq	.+28     	; 0x295e <__vector_25+0x5c>
    2942:	df 01       	movw	r26, r30
    2944:	e7 85       	ldd	r30, Z+15	; 0x0f
    2946:	f0 e0       	ldi	r31, 0x00	; 0
    2948:	e1 5f       	subi	r30, 0xF1	; 241
    294a:	f9 4f       	sbci	r31, 0xF9	; 249
    294c:	23 8b       	std	Z+19, r18	; 0x13
    294e:	1f 96       	adiw	r26, 0x0f	; 15
    2950:	8c 93       	st	X, r24
    2952:	05 c0       	rjmp	.+10     	; 0x295e <__vector_25+0x5c>
    2954:	e0 91 1b 06 	lds	r30, 0x061B	; 0x80061b <Serial+0xc>
    2958:	f0 91 1c 06 	lds	r31, 0x061C	; 0x80061c <Serial+0xd>
    295c:	80 81       	ld	r24, Z
    295e:	ff 91       	pop	r31
    2960:	ef 91       	pop	r30
    2962:	bf 91       	pop	r27
    2964:	af 91       	pop	r26
    2966:	9f 91       	pop	r25
    2968:	8f 91       	pop	r24
    296a:	2f 91       	pop	r18
    296c:	0f 90       	pop	r0
    296e:	0b be       	out	0x3b, r0	; 59
    2970:	0f 90       	pop	r0
    2972:	0f be       	out	0x3f, r0	; 63
    2974:	0f 90       	pop	r0
    2976:	1f 90       	pop	r1
    2978:	18 95       	reti

0000297a <__vector_26>:
    297a:	1f 92       	push	r1
    297c:	0f 92       	push	r0
    297e:	0f b6       	in	r0, 0x3f	; 63
    2980:	0f 92       	push	r0
    2982:	11 24       	eor	r1, r1
    2984:	0b b6       	in	r0, 0x3b	; 59
    2986:	0f 92       	push	r0
    2988:	2f 93       	push	r18
    298a:	3f 93       	push	r19
    298c:	4f 93       	push	r20
    298e:	5f 93       	push	r21
    2990:	6f 93       	push	r22
    2992:	7f 93       	push	r23
    2994:	8f 93       	push	r24
    2996:	9f 93       	push	r25
    2998:	af 93       	push	r26
    299a:	bf 93       	push	r27
    299c:	ef 93       	push	r30
    299e:	ff 93       	push	r31
    29a0:	8f e0       	ldi	r24, 0x0F	; 15
    29a2:	96 e0       	ldi	r25, 0x06	; 6
    29a4:	a7 de       	rcall	.-690    	; 0x26f4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    29a6:	ff 91       	pop	r31
    29a8:	ef 91       	pop	r30
    29aa:	bf 91       	pop	r27
    29ac:	af 91       	pop	r26
    29ae:	9f 91       	pop	r25
    29b0:	8f 91       	pop	r24
    29b2:	7f 91       	pop	r23
    29b4:	6f 91       	pop	r22
    29b6:	5f 91       	pop	r21
    29b8:	4f 91       	pop	r20
    29ba:	3f 91       	pop	r19
    29bc:	2f 91       	pop	r18
    29be:	0f 90       	pop	r0
    29c0:	0b be       	out	0x3b, r0	; 59
    29c2:	0f 90       	pop	r0
    29c4:	0f be       	out	0x3f, r0	; 63
    29c6:	0f 90       	pop	r0
    29c8:	1f 90       	pop	r1
    29ca:	18 95       	reti

000029cc <_GLOBAL__sub_I___vector_25>:
volatile uint8_t *ucsrc, volatile uint8_t *udr) :
_ubrrh(ubrrh), _ubrrl(ubrrl),
_ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
_udr(udr),
_rx_buffer_head(0), _rx_buffer_tail(0),
_tx_buffer_head(0), _tx_buffer_tail(0)
    29cc:	ef e0       	ldi	r30, 0x0F	; 15
    29ce:	f6 e0       	ldi	r31, 0x06	; 6
    29d0:	82 ed       	ldi	r24, 0xD2	; 210
    29d2:	92 e0       	ldi	r25, 0x02	; 2
    29d4:	91 83       	std	Z+1, r25	; 0x01
    29d6:	80 83       	st	Z, r24
    29d8:	85 ec       	ldi	r24, 0xC5	; 197
    29da:	90 e0       	ldi	r25, 0x00	; 0
    29dc:	93 83       	std	Z+3, r25	; 0x03
    29de:	82 83       	std	Z+2, r24	; 0x02
    29e0:	84 ec       	ldi	r24, 0xC4	; 196
    29e2:	90 e0       	ldi	r25, 0x00	; 0
    29e4:	95 83       	std	Z+5, r25	; 0x05
    29e6:	84 83       	std	Z+4, r24	; 0x04
    29e8:	80 ec       	ldi	r24, 0xC0	; 192
    29ea:	90 e0       	ldi	r25, 0x00	; 0
    29ec:	97 83       	std	Z+7, r25	; 0x07
    29ee:	86 83       	std	Z+6, r24	; 0x06
    29f0:	81 ec       	ldi	r24, 0xC1	; 193
    29f2:	90 e0       	ldi	r25, 0x00	; 0
    29f4:	91 87       	std	Z+9, r25	; 0x09
    29f6:	80 87       	std	Z+8, r24	; 0x08
    29f8:	82 ec       	ldi	r24, 0xC2	; 194
    29fa:	90 e0       	ldi	r25, 0x00	; 0
    29fc:	93 87       	std	Z+11, r25	; 0x0b
    29fe:	82 87       	std	Z+10, r24	; 0x0a
    2a00:	86 ec       	ldi	r24, 0xC6	; 198
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	95 87       	std	Z+13, r25	; 0x0d
    2a06:	84 87       	std	Z+12, r24	; 0x0c
    2a08:	17 86       	std	Z+15, r1	; 0x0f
    2a0a:	10 8a       	std	Z+16, r1	; 0x10
    2a0c:	11 8a       	std	Z+17, r1	; 0x11
    2a0e:	12 8a       	std	Z+18, r1	; 0x12
    2a10:	08 95       	ret

00002a12 <__vector_36>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
}
    2a12:	1f 92       	push	r1
    2a14:	0f 92       	push	r0
    2a16:	0f b6       	in	r0, 0x3f	; 63
    2a18:	0f 92       	push	r0
    2a1a:	11 24       	eor	r1, r1
    2a1c:	0b b6       	in	r0, 0x3b	; 59
    2a1e:	0f 92       	push	r0
    2a20:	2f 93       	push	r18
    2a22:	8f 93       	push	r24
    2a24:	9f 93       	push	r25
    2a26:	af 93       	push	r26
    2a28:	bf 93       	push	r27
    2a2a:	ef 93       	push	r30
    2a2c:	ff 93       	push	r31
    2a2e:	e0 91 48 06 	lds	r30, 0x0648	; 0x800648 <Serial1+0x6>
    2a32:	f0 91 49 06 	lds	r31, 0x0649	; 0x800649 <Serial1+0x7>
    2a36:	80 81       	ld	r24, Z
    2a38:	82 fd       	sbrc	r24, 2
    2a3a:	14 c0       	rjmp	.+40     	; 0x2a64 <__vector_36+0x52>
    2a3c:	e2 e4       	ldi	r30, 0x42	; 66
    2a3e:	f6 e0       	ldi	r31, 0x06	; 6
    2a40:	a4 85       	ldd	r26, Z+12	; 0x0c
    2a42:	b5 85       	ldd	r27, Z+13	; 0x0d
    2a44:	2c 91       	ld	r18, X
    2a46:	87 85       	ldd	r24, Z+15	; 0x0f
    2a48:	8f 5f       	subi	r24, 0xFF	; 255
    2a4a:	8f 70       	andi	r24, 0x0F	; 15
    2a4c:	90 89       	ldd	r25, Z+16	; 0x10
    2a4e:	89 17       	cp	r24, r25
    2a50:	71 f0       	breq	.+28     	; 0x2a6e <__vector_36+0x5c>
    2a52:	df 01       	movw	r26, r30
    2a54:	e7 85       	ldd	r30, Z+15	; 0x0f
    2a56:	f0 e0       	ldi	r31, 0x00	; 0
    2a58:	ee 5b       	subi	r30, 0xBE	; 190
    2a5a:	f9 4f       	sbci	r31, 0xF9	; 249
    2a5c:	23 8b       	std	Z+19, r18	; 0x13
    2a5e:	1f 96       	adiw	r26, 0x0f	; 15
    2a60:	8c 93       	st	X, r24
    2a62:	05 c0       	rjmp	.+10     	; 0x2a6e <__vector_36+0x5c>
    2a64:	e0 91 4e 06 	lds	r30, 0x064E	; 0x80064e <Serial1+0xc>
    2a68:	f0 91 4f 06 	lds	r31, 0x064F	; 0x80064f <Serial1+0xd>
    2a6c:	80 81       	ld	r24, Z
    2a6e:	ff 91       	pop	r31
    2a70:	ef 91       	pop	r30
    2a72:	bf 91       	pop	r27
    2a74:	af 91       	pop	r26
    2a76:	9f 91       	pop	r25
    2a78:	8f 91       	pop	r24
    2a7a:	2f 91       	pop	r18
    2a7c:	0f 90       	pop	r0
    2a7e:	0b be       	out	0x3b, r0	; 59
    2a80:	0f 90       	pop	r0
    2a82:	0f be       	out	0x3f, r0	; 63
    2a84:	0f 90       	pop	r0
    2a86:	1f 90       	pop	r1
    2a88:	18 95       	reti

00002a8a <__vector_37>:
    2a8a:	1f 92       	push	r1
    2a8c:	0f 92       	push	r0
    2a8e:	0f b6       	in	r0, 0x3f	; 63
    2a90:	0f 92       	push	r0
    2a92:	11 24       	eor	r1, r1
    2a94:	0b b6       	in	r0, 0x3b	; 59
    2a96:	0f 92       	push	r0
    2a98:	2f 93       	push	r18
    2a9a:	3f 93       	push	r19
    2a9c:	4f 93       	push	r20
    2a9e:	5f 93       	push	r21
    2aa0:	6f 93       	push	r22
    2aa2:	7f 93       	push	r23
    2aa4:	8f 93       	push	r24
    2aa6:	9f 93       	push	r25
    2aa8:	af 93       	push	r26
    2aaa:	bf 93       	push	r27
    2aac:	ef 93       	push	r30
    2aae:	ff 93       	push	r31
    2ab0:	82 e4       	ldi	r24, 0x42	; 66
    2ab2:	96 e0       	ldi	r25, 0x06	; 6
    2ab4:	1f de       	rcall	.-962    	; 0x26f4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    2ab6:	ff 91       	pop	r31
    2ab8:	ef 91       	pop	r30
    2aba:	bf 91       	pop	r27
    2abc:	af 91       	pop	r26
    2abe:	9f 91       	pop	r25
    2ac0:	8f 91       	pop	r24
    2ac2:	7f 91       	pop	r23
    2ac4:	6f 91       	pop	r22
    2ac6:	5f 91       	pop	r21
    2ac8:	4f 91       	pop	r20
    2aca:	3f 91       	pop	r19
    2acc:	2f 91       	pop	r18
    2ace:	0f 90       	pop	r0
    2ad0:	0b be       	out	0x3b, r0	; 59
    2ad2:	0f 90       	pop	r0
    2ad4:	0f be       	out	0x3f, r0	; 63
    2ad6:	0f 90       	pop	r0
    2ad8:	1f 90       	pop	r1
    2ada:	18 95       	reti

00002adc <_GLOBAL__sub_I___vector_36>:
    2adc:	e2 e4       	ldi	r30, 0x42	; 66
    2ade:	f6 e0       	ldi	r31, 0x06	; 6
    2ae0:	82 ed       	ldi	r24, 0xD2	; 210
    2ae2:	92 e0       	ldi	r25, 0x02	; 2
    2ae4:	91 83       	std	Z+1, r25	; 0x01
    2ae6:	80 83       	st	Z, r24
    2ae8:	8d ec       	ldi	r24, 0xCD	; 205
    2aea:	90 e0       	ldi	r25, 0x00	; 0
    2aec:	93 83       	std	Z+3, r25	; 0x03
    2aee:	82 83       	std	Z+2, r24	; 0x02
    2af0:	8c ec       	ldi	r24, 0xCC	; 204
    2af2:	90 e0       	ldi	r25, 0x00	; 0
    2af4:	95 83       	std	Z+5, r25	; 0x05
    2af6:	84 83       	std	Z+4, r24	; 0x04
    2af8:	88 ec       	ldi	r24, 0xC8	; 200
    2afa:	90 e0       	ldi	r25, 0x00	; 0
    2afc:	97 83       	std	Z+7, r25	; 0x07
    2afe:	86 83       	std	Z+6, r24	; 0x06
    2b00:	89 ec       	ldi	r24, 0xC9	; 201
    2b02:	90 e0       	ldi	r25, 0x00	; 0
    2b04:	91 87       	std	Z+9, r25	; 0x09
    2b06:	80 87       	std	Z+8, r24	; 0x08
    2b08:	8a ec       	ldi	r24, 0xCA	; 202
    2b0a:	90 e0       	ldi	r25, 0x00	; 0
    2b0c:	93 87       	std	Z+11, r25	; 0x0b
    2b0e:	82 87       	std	Z+10, r24	; 0x0a
    2b10:	8e ec       	ldi	r24, 0xCE	; 206
    2b12:	90 e0       	ldi	r25, 0x00	; 0
    2b14:	95 87       	std	Z+13, r25	; 0x0d
    2b16:	84 87       	std	Z+12, r24	; 0x0c
    2b18:	17 86       	std	Z+15, r1	; 0x0f
    2b1a:	10 8a       	std	Z+16, r1	; 0x10
    2b1c:	11 8a       	std	Z+17, r1	; 0x11
    2b1e:	12 8a       	std	Z+18, r1	; 0x12
    2b20:	08 95       	ret

00002b22 <__vector_51>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial2_available() {
  return Serial2.available();
}
    2b22:	1f 92       	push	r1
    2b24:	0f 92       	push	r0
    2b26:	0f b6       	in	r0, 0x3f	; 63
    2b28:	0f 92       	push	r0
    2b2a:	11 24       	eor	r1, r1
    2b2c:	0b b6       	in	r0, 0x3b	; 59
    2b2e:	0f 92       	push	r0
    2b30:	2f 93       	push	r18
    2b32:	8f 93       	push	r24
    2b34:	9f 93       	push	r25
    2b36:	af 93       	push	r26
    2b38:	bf 93       	push	r27
    2b3a:	ef 93       	push	r30
    2b3c:	ff 93       	push	r31
    2b3e:	e0 91 7b 06 	lds	r30, 0x067B	; 0x80067b <Serial2+0x6>
    2b42:	f0 91 7c 06 	lds	r31, 0x067C	; 0x80067c <Serial2+0x7>
    2b46:	80 81       	ld	r24, Z
    2b48:	82 fd       	sbrc	r24, 2
    2b4a:	14 c0       	rjmp	.+40     	; 0x2b74 <__vector_51+0x52>
    2b4c:	e5 e7       	ldi	r30, 0x75	; 117
    2b4e:	f6 e0       	ldi	r31, 0x06	; 6
    2b50:	a4 85       	ldd	r26, Z+12	; 0x0c
    2b52:	b5 85       	ldd	r27, Z+13	; 0x0d
    2b54:	2c 91       	ld	r18, X
    2b56:	87 85       	ldd	r24, Z+15	; 0x0f
    2b58:	8f 5f       	subi	r24, 0xFF	; 255
    2b5a:	8f 70       	andi	r24, 0x0F	; 15
    2b5c:	90 89       	ldd	r25, Z+16	; 0x10
    2b5e:	89 17       	cp	r24, r25
    2b60:	71 f0       	breq	.+28     	; 0x2b7e <__vector_51+0x5c>
    2b62:	df 01       	movw	r26, r30
    2b64:	e7 85       	ldd	r30, Z+15	; 0x0f
    2b66:	f0 e0       	ldi	r31, 0x00	; 0
    2b68:	eb 58       	subi	r30, 0x8B	; 139
    2b6a:	f9 4f       	sbci	r31, 0xF9	; 249
    2b6c:	23 8b       	std	Z+19, r18	; 0x13
    2b6e:	1f 96       	adiw	r26, 0x0f	; 15
    2b70:	8c 93       	st	X, r24
    2b72:	05 c0       	rjmp	.+10     	; 0x2b7e <__vector_51+0x5c>
    2b74:	e0 91 81 06 	lds	r30, 0x0681	; 0x800681 <Serial2+0xc>
    2b78:	f0 91 82 06 	lds	r31, 0x0682	; 0x800682 <Serial2+0xd>
    2b7c:	80 81       	ld	r24, Z
    2b7e:	ff 91       	pop	r31
    2b80:	ef 91       	pop	r30
    2b82:	bf 91       	pop	r27
    2b84:	af 91       	pop	r26
    2b86:	9f 91       	pop	r25
    2b88:	8f 91       	pop	r24
    2b8a:	2f 91       	pop	r18
    2b8c:	0f 90       	pop	r0
    2b8e:	0b be       	out	0x3b, r0	; 59
    2b90:	0f 90       	pop	r0
    2b92:	0f be       	out	0x3f, r0	; 63
    2b94:	0f 90       	pop	r0
    2b96:	1f 90       	pop	r1
    2b98:	18 95       	reti

00002b9a <__vector_52>:
    2b9a:	1f 92       	push	r1
    2b9c:	0f 92       	push	r0
    2b9e:	0f b6       	in	r0, 0x3f	; 63
    2ba0:	0f 92       	push	r0
    2ba2:	11 24       	eor	r1, r1
    2ba4:	0b b6       	in	r0, 0x3b	; 59
    2ba6:	0f 92       	push	r0
    2ba8:	2f 93       	push	r18
    2baa:	3f 93       	push	r19
    2bac:	4f 93       	push	r20
    2bae:	5f 93       	push	r21
    2bb0:	6f 93       	push	r22
    2bb2:	7f 93       	push	r23
    2bb4:	8f 93       	push	r24
    2bb6:	9f 93       	push	r25
    2bb8:	af 93       	push	r26
    2bba:	bf 93       	push	r27
    2bbc:	ef 93       	push	r30
    2bbe:	ff 93       	push	r31
    2bc0:	85 e7       	ldi	r24, 0x75	; 117
    2bc2:	96 e0       	ldi	r25, 0x06	; 6
    2bc4:	97 dd       	rcall	.-1234   	; 0x26f4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    2bc6:	ff 91       	pop	r31
    2bc8:	ef 91       	pop	r30
    2bca:	bf 91       	pop	r27
    2bcc:	af 91       	pop	r26
    2bce:	9f 91       	pop	r25
    2bd0:	8f 91       	pop	r24
    2bd2:	7f 91       	pop	r23
    2bd4:	6f 91       	pop	r22
    2bd6:	5f 91       	pop	r21
    2bd8:	4f 91       	pop	r20
    2bda:	3f 91       	pop	r19
    2bdc:	2f 91       	pop	r18
    2bde:	0f 90       	pop	r0
    2be0:	0b be       	out	0x3b, r0	; 59
    2be2:	0f 90       	pop	r0
    2be4:	0f be       	out	0x3f, r0	; 63
    2be6:	0f 90       	pop	r0
    2be8:	1f 90       	pop	r1
    2bea:	18 95       	reti

00002bec <_GLOBAL__sub_I___vector_51>:
    2bec:	e5 e7       	ldi	r30, 0x75	; 117
    2bee:	f6 e0       	ldi	r31, 0x06	; 6
    2bf0:	82 ed       	ldi	r24, 0xD2	; 210
    2bf2:	92 e0       	ldi	r25, 0x02	; 2
    2bf4:	91 83       	std	Z+1, r25	; 0x01
    2bf6:	80 83       	st	Z, r24
    2bf8:	85 ed       	ldi	r24, 0xD5	; 213
    2bfa:	90 e0       	ldi	r25, 0x00	; 0
    2bfc:	93 83       	std	Z+3, r25	; 0x03
    2bfe:	82 83       	std	Z+2, r24	; 0x02
    2c00:	84 ed       	ldi	r24, 0xD4	; 212
    2c02:	90 e0       	ldi	r25, 0x00	; 0
    2c04:	95 83       	std	Z+5, r25	; 0x05
    2c06:	84 83       	std	Z+4, r24	; 0x04
    2c08:	80 ed       	ldi	r24, 0xD0	; 208
    2c0a:	90 e0       	ldi	r25, 0x00	; 0
    2c0c:	97 83       	std	Z+7, r25	; 0x07
    2c0e:	86 83       	std	Z+6, r24	; 0x06
    2c10:	81 ed       	ldi	r24, 0xD1	; 209
    2c12:	90 e0       	ldi	r25, 0x00	; 0
    2c14:	91 87       	std	Z+9, r25	; 0x09
    2c16:	80 87       	std	Z+8, r24	; 0x08
    2c18:	82 ed       	ldi	r24, 0xD2	; 210
    2c1a:	90 e0       	ldi	r25, 0x00	; 0
    2c1c:	93 87       	std	Z+11, r25	; 0x0b
    2c1e:	82 87       	std	Z+10, r24	; 0x0a
    2c20:	86 ed       	ldi	r24, 0xD6	; 214
    2c22:	90 e0       	ldi	r25, 0x00	; 0
    2c24:	95 87       	std	Z+13, r25	; 0x0d
    2c26:	84 87       	std	Z+12, r24	; 0x0c
    2c28:	17 86       	std	Z+15, r1	; 0x0f
    2c2a:	10 8a       	std	Z+16, r1	; 0x10
    2c2c:	11 8a       	std	Z+17, r1	; 0x11
    2c2e:	12 8a       	std	Z+18, r1	; 0x12
    2c30:	08 95       	ret

00002c32 <__vector_54>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial3_available() {
  return Serial3.available();
}
    2c32:	1f 92       	push	r1
    2c34:	0f 92       	push	r0
    2c36:	0f b6       	in	r0, 0x3f	; 63
    2c38:	0f 92       	push	r0
    2c3a:	11 24       	eor	r1, r1
    2c3c:	0b b6       	in	r0, 0x3b	; 59
    2c3e:	0f 92       	push	r0
    2c40:	2f 93       	push	r18
    2c42:	8f 93       	push	r24
    2c44:	9f 93       	push	r25
    2c46:	af 93       	push	r26
    2c48:	bf 93       	push	r27
    2c4a:	ef 93       	push	r30
    2c4c:	ff 93       	push	r31
    2c4e:	e0 91 ae 06 	lds	r30, 0x06AE	; 0x8006ae <Serial3+0x6>
    2c52:	f0 91 af 06 	lds	r31, 0x06AF	; 0x8006af <Serial3+0x7>
    2c56:	80 81       	ld	r24, Z
    2c58:	82 fd       	sbrc	r24, 2
    2c5a:	14 c0       	rjmp	.+40     	; 0x2c84 <__vector_54+0x52>
    2c5c:	e8 ea       	ldi	r30, 0xA8	; 168
    2c5e:	f6 e0       	ldi	r31, 0x06	; 6
    2c60:	a4 85       	ldd	r26, Z+12	; 0x0c
    2c62:	b5 85       	ldd	r27, Z+13	; 0x0d
    2c64:	2c 91       	ld	r18, X
    2c66:	87 85       	ldd	r24, Z+15	; 0x0f
    2c68:	8f 5f       	subi	r24, 0xFF	; 255
    2c6a:	8f 70       	andi	r24, 0x0F	; 15
    2c6c:	90 89       	ldd	r25, Z+16	; 0x10
    2c6e:	89 17       	cp	r24, r25
    2c70:	71 f0       	breq	.+28     	; 0x2c8e <__vector_54+0x5c>
    2c72:	df 01       	movw	r26, r30
    2c74:	e7 85       	ldd	r30, Z+15	; 0x0f
    2c76:	f0 e0       	ldi	r31, 0x00	; 0
    2c78:	e8 55       	subi	r30, 0x58	; 88
    2c7a:	f9 4f       	sbci	r31, 0xF9	; 249
    2c7c:	23 8b       	std	Z+19, r18	; 0x13
    2c7e:	1f 96       	adiw	r26, 0x0f	; 15
    2c80:	8c 93       	st	X, r24
    2c82:	05 c0       	rjmp	.+10     	; 0x2c8e <__vector_54+0x5c>
    2c84:	e0 91 b4 06 	lds	r30, 0x06B4	; 0x8006b4 <Serial3+0xc>
    2c88:	f0 91 b5 06 	lds	r31, 0x06B5	; 0x8006b5 <Serial3+0xd>
    2c8c:	80 81       	ld	r24, Z
    2c8e:	ff 91       	pop	r31
    2c90:	ef 91       	pop	r30
    2c92:	bf 91       	pop	r27
    2c94:	af 91       	pop	r26
    2c96:	9f 91       	pop	r25
    2c98:	8f 91       	pop	r24
    2c9a:	2f 91       	pop	r18
    2c9c:	0f 90       	pop	r0
    2c9e:	0b be       	out	0x3b, r0	; 59
    2ca0:	0f 90       	pop	r0
    2ca2:	0f be       	out	0x3f, r0	; 63
    2ca4:	0f 90       	pop	r0
    2ca6:	1f 90       	pop	r1
    2ca8:	18 95       	reti

00002caa <__vector_55>:
    2caa:	1f 92       	push	r1
    2cac:	0f 92       	push	r0
    2cae:	0f b6       	in	r0, 0x3f	; 63
    2cb0:	0f 92       	push	r0
    2cb2:	11 24       	eor	r1, r1
    2cb4:	0b b6       	in	r0, 0x3b	; 59
    2cb6:	0f 92       	push	r0
    2cb8:	2f 93       	push	r18
    2cba:	3f 93       	push	r19
    2cbc:	4f 93       	push	r20
    2cbe:	5f 93       	push	r21
    2cc0:	6f 93       	push	r22
    2cc2:	7f 93       	push	r23
    2cc4:	8f 93       	push	r24
    2cc6:	9f 93       	push	r25
    2cc8:	af 93       	push	r26
    2cca:	bf 93       	push	r27
    2ccc:	ef 93       	push	r30
    2cce:	ff 93       	push	r31
    2cd0:	88 ea       	ldi	r24, 0xA8	; 168
    2cd2:	96 e0       	ldi	r25, 0x06	; 6
    2cd4:	0f dd       	rcall	.-1506   	; 0x26f4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    2cd6:	ff 91       	pop	r31
    2cd8:	ef 91       	pop	r30
    2cda:	bf 91       	pop	r27
    2cdc:	af 91       	pop	r26
    2cde:	9f 91       	pop	r25
    2ce0:	8f 91       	pop	r24
    2ce2:	7f 91       	pop	r23
    2ce4:	6f 91       	pop	r22
    2ce6:	5f 91       	pop	r21
    2ce8:	4f 91       	pop	r20
    2cea:	3f 91       	pop	r19
    2cec:	2f 91       	pop	r18
    2cee:	0f 90       	pop	r0
    2cf0:	0b be       	out	0x3b, r0	; 59
    2cf2:	0f 90       	pop	r0
    2cf4:	0f be       	out	0x3f, r0	; 63
    2cf6:	0f 90       	pop	r0
    2cf8:	1f 90       	pop	r1
    2cfa:	18 95       	reti

00002cfc <_GLOBAL__sub_I___vector_54>:
    2cfc:	e8 ea       	ldi	r30, 0xA8	; 168
    2cfe:	f6 e0       	ldi	r31, 0x06	; 6
    2d00:	82 ed       	ldi	r24, 0xD2	; 210
    2d02:	92 e0       	ldi	r25, 0x02	; 2
    2d04:	91 83       	std	Z+1, r25	; 0x01
    2d06:	80 83       	st	Z, r24
    2d08:	85 e3       	ldi	r24, 0x35	; 53
    2d0a:	91 e0       	ldi	r25, 0x01	; 1
    2d0c:	93 83       	std	Z+3, r25	; 0x03
    2d0e:	82 83       	std	Z+2, r24	; 0x02
    2d10:	84 e3       	ldi	r24, 0x34	; 52
    2d12:	91 e0       	ldi	r25, 0x01	; 1
    2d14:	95 83       	std	Z+5, r25	; 0x05
    2d16:	84 83       	std	Z+4, r24	; 0x04
    2d18:	80 e3       	ldi	r24, 0x30	; 48
    2d1a:	91 e0       	ldi	r25, 0x01	; 1
    2d1c:	97 83       	std	Z+7, r25	; 0x07
    2d1e:	86 83       	std	Z+6, r24	; 0x06
    2d20:	81 e3       	ldi	r24, 0x31	; 49
    2d22:	91 e0       	ldi	r25, 0x01	; 1
    2d24:	91 87       	std	Z+9, r25	; 0x09
    2d26:	80 87       	std	Z+8, r24	; 0x08
    2d28:	82 e3       	ldi	r24, 0x32	; 50
    2d2a:	91 e0       	ldi	r25, 0x01	; 1
    2d2c:	93 87       	std	Z+11, r25	; 0x0b
    2d2e:	82 87       	std	Z+10, r24	; 0x0a
    2d30:	86 e3       	ldi	r24, 0x36	; 54
    2d32:	91 e0       	ldi	r25, 0x01	; 1
    2d34:	95 87       	std	Z+13, r25	; 0x0d
    2d36:	84 87       	std	Z+12, r24	; 0x0c
    2d38:	17 86       	std	Z+15, r1	; 0x0f
    2d3a:	10 8a       	std	Z+16, r1	; 0x10
    2d3c:	11 8a       	std	Z+17, r1	; 0x11
    2d3e:	12 8a       	std	Z+18, r1	; 0x12
    2d40:	08 95       	ret

00002d42 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2d42:	10 92 48 07 	sts	0x0748, r1	; 0x800748 <twi_state>
    2d46:	81 e0       	ldi	r24, 0x01	; 1
    2d48:	80 93 46 07 	sts	0x0746, r24	; 0x800746 <twi_sendStop>
    2d4c:	10 92 45 07 	sts	0x0745, r1	; 0x800745 <twi_inRepStart>
    2d50:	8b b1       	in	r24, 0x0b	; 11
    2d52:	83 60       	ori	r24, 0x03	; 3
    2d54:	8b b9       	out	0x0b, r24	; 11
    2d56:	e9 eb       	ldi	r30, 0xB9	; 185
    2d58:	f0 e0       	ldi	r31, 0x00	; 0
    2d5a:	80 81       	ld	r24, Z
    2d5c:	8e 7f       	andi	r24, 0xFE	; 254
    2d5e:	80 83       	st	Z, r24
    2d60:	80 81       	ld	r24, Z
    2d62:	8d 7f       	andi	r24, 0xFD	; 253
    2d64:	80 83       	st	Z, r24
    2d66:	88 e4       	ldi	r24, 0x48	; 72
    2d68:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    2d6c:	85 e4       	ldi	r24, 0x45	; 69
    2d6e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2d72:	08 95       	ret

00002d74 <twi_readFrom>:
    2d74:	41 32       	cpi	r20, 0x21	; 33
    2d76:	08 f0       	brcs	.+2      	; 0x2d7a <twi_readFrom+0x6>
    2d78:	4c c0       	rjmp	.+152    	; 0x2e12 <twi_readFrom+0x9e>
    2d7a:	90 91 48 07 	lds	r25, 0x0748	; 0x800748 <twi_state>
    2d7e:	91 11       	cpse	r25, r1
    2d80:	fc cf       	rjmp	.-8      	; 0x2d7a <twi_readFrom+0x6>
    2d82:	31 e0       	ldi	r19, 0x01	; 1
    2d84:	30 93 48 07 	sts	0x0748, r19	; 0x800748 <twi_state>
    2d88:	20 93 46 07 	sts	0x0746, r18	; 0x800746 <twi_sendStop>
    2d8c:	2f ef       	ldi	r18, 0xFF	; 255
    2d8e:	20 93 db 06 	sts	0x06DB, r18	; 0x8006db <twi_error>
    2d92:	10 92 20 07 	sts	0x0720, r1	; 0x800720 <twi_masterBufferIndex>
    2d96:	24 0f       	add	r18, r20
    2d98:	20 93 1f 07 	sts	0x071F, r18	; 0x80071f <twi_masterBufferLength>
    2d9c:	30 93 47 07 	sts	0x0747, r19	; 0x800747 <twi_slarw>
    2da0:	20 91 47 07 	lds	r18, 0x0747	; 0x800747 <twi_slarw>
    2da4:	88 0f       	add	r24, r24
    2da6:	82 2b       	or	r24, r18
    2da8:	80 93 47 07 	sts	0x0747, r24	; 0x800747 <twi_slarw>
    2dac:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <twi_inRepStart>
    2db0:	81 30       	cpi	r24, 0x01	; 1
    2db2:	81 f4       	brne	.+32     	; 0x2dd4 <twi_readFrom+0x60>
    2db4:	10 92 45 07 	sts	0x0745, r1	; 0x800745 <twi_inRepStart>
    2db8:	ab eb       	ldi	r26, 0xBB	; 187
    2dba:	b0 e0       	ldi	r27, 0x00	; 0
    2dbc:	ec eb       	ldi	r30, 0xBC	; 188
    2dbe:	f0 e0       	ldi	r31, 0x00	; 0
    2dc0:	80 91 47 07 	lds	r24, 0x0747	; 0x800747 <twi_slarw>
    2dc4:	8c 93       	st	X, r24
    2dc6:	80 81       	ld	r24, Z
    2dc8:	83 fd       	sbrc	r24, 3
    2dca:	fa cf       	rjmp	.-12     	; 0x2dc0 <twi_readFrom+0x4c>
    2dcc:	85 ec       	ldi	r24, 0xC5	; 197
    2dce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2dd2:	03 c0       	rjmp	.+6      	; 0x2dda <twi_readFrom+0x66>
    2dd4:	85 ee       	ldi	r24, 0xE5	; 229
    2dd6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2dda:	80 91 48 07 	lds	r24, 0x0748	; 0x800748 <twi_state>
    2dde:	81 30       	cpi	r24, 0x01	; 1
    2de0:	e1 f3       	breq	.-8      	; 0x2dda <twi_readFrom+0x66>
    2de2:	80 91 20 07 	lds	r24, 0x0720	; 0x800720 <twi_masterBufferIndex>
    2de6:	84 17       	cp	r24, r20
    2de8:	10 f4       	brcc	.+4      	; 0x2dee <twi_readFrom+0x7a>
    2dea:	40 91 20 07 	lds	r20, 0x0720	; 0x800720 <twi_masterBufferIndex>
    2dee:	44 23       	and	r20, r20
    2df0:	89 f0       	breq	.+34     	; 0x2e14 <twi_readFrom+0xa0>
    2df2:	e1 e2       	ldi	r30, 0x21	; 33
    2df4:	f7 e0       	ldi	r31, 0x07	; 7
    2df6:	a6 2f       	mov	r26, r22
    2df8:	b7 2f       	mov	r27, r23
    2dfa:	2f ef       	ldi	r18, 0xFF	; 255
    2dfc:	24 0f       	add	r18, r20
    2dfe:	30 e0       	ldi	r19, 0x00	; 0
    2e00:	2e 5d       	subi	r18, 0xDE	; 222
    2e02:	38 4f       	sbci	r19, 0xF8	; 248
    2e04:	81 91       	ld	r24, Z+
    2e06:	8d 93       	st	X+, r24
    2e08:	e2 17       	cp	r30, r18
    2e0a:	f3 07       	cpc	r31, r19
    2e0c:	d9 f7       	brne	.-10     	; 0x2e04 <twi_readFrom+0x90>
    2e0e:	94 2f       	mov	r25, r20
    2e10:	01 c0       	rjmp	.+2      	; 0x2e14 <twi_readFrom+0xa0>
    2e12:	90 e0       	ldi	r25, 0x00	; 0
    2e14:	89 2f       	mov	r24, r25
    2e16:	08 95       	ret

00002e18 <twi_writeTo>:
    2e18:	0f 93       	push	r16
    2e1a:	41 32       	cpi	r20, 0x21	; 33
    2e1c:	08 f0       	brcs	.+2      	; 0x2e20 <twi_writeTo+0x8>
    2e1e:	57 c0       	rjmp	.+174    	; 0x2ece <twi_writeTo+0xb6>
    2e20:	30 91 48 07 	lds	r19, 0x0748	; 0x800748 <twi_state>
    2e24:	31 11       	cpse	r19, r1
    2e26:	fc cf       	rjmp	.-8      	; 0x2e20 <twi_writeTo+0x8>
    2e28:	92 e0       	ldi	r25, 0x02	; 2
    2e2a:	90 93 48 07 	sts	0x0748, r25	; 0x800748 <twi_state>
    2e2e:	00 93 46 07 	sts	0x0746, r16	; 0x800746 <twi_sendStop>
    2e32:	9f ef       	ldi	r25, 0xFF	; 255
    2e34:	90 93 db 06 	sts	0x06DB, r25	; 0x8006db <twi_error>
    2e38:	10 92 20 07 	sts	0x0720, r1	; 0x800720 <twi_masterBufferIndex>
    2e3c:	40 93 1f 07 	sts	0x071F, r20	; 0x80071f <twi_masterBufferLength>
    2e40:	44 23       	and	r20, r20
    2e42:	71 f0       	breq	.+28     	; 0x2e60 <twi_writeTo+0x48>
    2e44:	fb 01       	movw	r30, r22
    2e46:	a1 e2       	ldi	r26, 0x21	; 33
    2e48:	b7 e0       	ldi	r27, 0x07	; 7
    2e4a:	41 50       	subi	r20, 0x01	; 1
    2e4c:	50 e0       	ldi	r21, 0x00	; 0
    2e4e:	4f 5f       	subi	r20, 0xFF	; 255
    2e50:	5f 4f       	sbci	r21, 0xFF	; 255
    2e52:	64 0f       	add	r22, r20
    2e54:	75 1f       	adc	r23, r21
    2e56:	91 91       	ld	r25, Z+
    2e58:	9d 93       	st	X+, r25
    2e5a:	e6 17       	cp	r30, r22
    2e5c:	f7 07       	cpc	r31, r23
    2e5e:	d9 f7       	brne	.-10     	; 0x2e56 <twi_writeTo+0x3e>
    2e60:	10 92 47 07 	sts	0x0747, r1	; 0x800747 <twi_slarw>
    2e64:	90 91 47 07 	lds	r25, 0x0747	; 0x800747 <twi_slarw>
    2e68:	88 0f       	add	r24, r24
    2e6a:	89 2b       	or	r24, r25
    2e6c:	80 93 47 07 	sts	0x0747, r24	; 0x800747 <twi_slarw>
    2e70:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <twi_inRepStart>
    2e74:	81 30       	cpi	r24, 0x01	; 1
    2e76:	81 f4       	brne	.+32     	; 0x2e98 <twi_writeTo+0x80>
    2e78:	10 92 45 07 	sts	0x0745, r1	; 0x800745 <twi_inRepStart>
    2e7c:	ab eb       	ldi	r26, 0xBB	; 187
    2e7e:	b0 e0       	ldi	r27, 0x00	; 0
    2e80:	ec eb       	ldi	r30, 0xBC	; 188
    2e82:	f0 e0       	ldi	r31, 0x00	; 0
    2e84:	80 91 47 07 	lds	r24, 0x0747	; 0x800747 <twi_slarw>
    2e88:	8c 93       	st	X, r24
    2e8a:	80 81       	ld	r24, Z
    2e8c:	83 fd       	sbrc	r24, 3
    2e8e:	fa cf       	rjmp	.-12     	; 0x2e84 <twi_writeTo+0x6c>
    2e90:	85 ec       	ldi	r24, 0xC5	; 197
    2e92:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2e96:	03 c0       	rjmp	.+6      	; 0x2e9e <twi_writeTo+0x86>
    2e98:	85 ee       	ldi	r24, 0xE5	; 229
    2e9a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2e9e:	22 23       	and	r18, r18
    2ea0:	41 f0       	breq	.+16     	; 0x2eb2 <twi_writeTo+0x9a>
    2ea2:	80 91 48 07 	lds	r24, 0x0748	; 0x800748 <twi_state>
    2ea6:	82 30       	cpi	r24, 0x02	; 2
    2ea8:	21 f4       	brne	.+8      	; 0x2eb2 <twi_writeTo+0x9a>
    2eaa:	80 91 48 07 	lds	r24, 0x0748	; 0x800748 <twi_state>
    2eae:	82 30       	cpi	r24, 0x02	; 2
    2eb0:	e1 f3       	breq	.-8      	; 0x2eaa <twi_writeTo+0x92>
    2eb2:	80 91 db 06 	lds	r24, 0x06DB	; 0x8006db <twi_error>
    2eb6:	8f 3f       	cpi	r24, 0xFF	; 255
    2eb8:	79 f0       	breq	.+30     	; 0x2ed8 <twi_writeTo+0xc0>
    2eba:	80 91 db 06 	lds	r24, 0x06DB	; 0x8006db <twi_error>
    2ebe:	80 32       	cpi	r24, 0x20	; 32
    2ec0:	41 f0       	breq	.+16     	; 0x2ed2 <twi_writeTo+0xba>
    2ec2:	80 91 db 06 	lds	r24, 0x06DB	; 0x8006db <twi_error>
    2ec6:	80 33       	cpi	r24, 0x30	; 48
    2ec8:	31 f0       	breq	.+12     	; 0x2ed6 <twi_writeTo+0xbe>
    2eca:	34 e0       	ldi	r19, 0x04	; 4
    2ecc:	05 c0       	rjmp	.+10     	; 0x2ed8 <twi_writeTo+0xc0>
    2ece:	31 e0       	ldi	r19, 0x01	; 1
    2ed0:	03 c0       	rjmp	.+6      	; 0x2ed8 <twi_writeTo+0xc0>
    2ed2:	32 e0       	ldi	r19, 0x02	; 2
    2ed4:	01 c0       	rjmp	.+2      	; 0x2ed8 <twi_writeTo+0xc0>
    2ed6:	33 e0       	ldi	r19, 0x03	; 3
    2ed8:	83 2f       	mov	r24, r19
    2eda:	0f 91       	pop	r16
    2edc:	08 95       	ret

00002ede <twi_transmit>:
    2ede:	40 91 fd 06 	lds	r20, 0x06FD	; 0x8006fd <twi_txBufferLength>
    2ee2:	26 2f       	mov	r18, r22
    2ee4:	30 e0       	ldi	r19, 0x00	; 0
    2ee6:	24 0f       	add	r18, r20
    2ee8:	31 1d       	adc	r19, r1
    2eea:	21 32       	cpi	r18, 0x21	; 33
    2eec:	31 05       	cpc	r19, r1
    2eee:	ec f4       	brge	.+58     	; 0x2f2a <twi_transmit+0x4c>
    2ef0:	20 91 48 07 	lds	r18, 0x0748	; 0x800748 <twi_state>
    2ef4:	24 30       	cpi	r18, 0x04	; 4
    2ef6:	d9 f4       	brne	.+54     	; 0x2f2e <twi_transmit+0x50>
    2ef8:	66 23       	and	r22, r22
    2efa:	81 f0       	breq	.+32     	; 0x2f1c <twi_transmit+0x3e>
    2efc:	a8 2f       	mov	r26, r24
    2efe:	b9 2f       	mov	r27, r25
    2f00:	80 e0       	ldi	r24, 0x00	; 0
    2f02:	90 e0       	ldi	r25, 0x00	; 0
    2f04:	30 91 fd 06 	lds	r19, 0x06FD	; 0x8006fd <twi_txBufferLength>
    2f08:	2d 91       	ld	r18, X+
    2f0a:	fc 01       	movw	r30, r24
    2f0c:	e1 50       	subi	r30, 0x01	; 1
    2f0e:	f9 4f       	sbci	r31, 0xF9	; 249
    2f10:	e3 0f       	add	r30, r19
    2f12:	f1 1d       	adc	r31, r1
    2f14:	20 83       	st	Z, r18
    2f16:	01 96       	adiw	r24, 0x01	; 1
    2f18:	86 17       	cp	r24, r22
    2f1a:	a0 f3       	brcs	.-24     	; 0x2f04 <twi_transmit+0x26>
    2f1c:	80 91 fd 06 	lds	r24, 0x06FD	; 0x8006fd <twi_txBufferLength>
    2f20:	68 0f       	add	r22, r24
    2f22:	60 93 fd 06 	sts	0x06FD, r22	; 0x8006fd <twi_txBufferLength>
    2f26:	80 e0       	ldi	r24, 0x00	; 0
    2f28:	08 95       	ret
    2f2a:	81 e0       	ldi	r24, 0x01	; 1
    2f2c:	08 95       	ret
    2f2e:	82 e0       	ldi	r24, 0x02	; 2
    2f30:	08 95       	ret

00002f32 <twi_attachSlaveRxEvent>:
    2f32:	90 93 42 07 	sts	0x0742, r25	; 0x800742 <twi_onSlaveReceive+0x1>
    2f36:	80 93 41 07 	sts	0x0741, r24	; 0x800741 <twi_onSlaveReceive>
    2f3a:	08 95       	ret

00002f3c <twi_attachSlaveTxEvent>:
    2f3c:	90 93 44 07 	sts	0x0744, r25	; 0x800744 <twi_onSlaveTransmit+0x1>
    2f40:	80 93 43 07 	sts	0x0743, r24	; 0x800743 <twi_onSlaveTransmit>
    2f44:	08 95       	ret

00002f46 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    2f46:	85 ed       	ldi	r24, 0xD5	; 213
    2f48:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    2f4c:	ec eb       	ldi	r30, 0xBC	; 188
    2f4e:	f0 e0       	ldi	r31, 0x00	; 0
    2f50:	80 81       	ld	r24, Z
    2f52:	84 fd       	sbrc	r24, 4
    2f54:	fd cf       	rjmp	.-6      	; 0x2f50 <twi_stop+0xa>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    2f56:	10 92 48 07 	sts	0x0748, r1	; 0x800748 <twi_state>
    2f5a:	08 95       	ret

00002f5c <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    2f5c:	85 ec       	ldi	r24, 0xC5	; 197
    2f5e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // update twi state
  twi_state = TWI_READY;
    2f62:	10 92 48 07 	sts	0x0748, r1	; 0x800748 <twi_state>
    2f66:	08 95       	ret

00002f68 <__vector_39>:
}

ISR(TWI_vect)
{
    2f68:	1f 92       	push	r1
    2f6a:	0f 92       	push	r0
    2f6c:	0f b6       	in	r0, 0x3f	; 63
    2f6e:	0f 92       	push	r0
    2f70:	11 24       	eor	r1, r1
    2f72:	0b b6       	in	r0, 0x3b	; 59
    2f74:	0f 92       	push	r0
    2f76:	2f 93       	push	r18
    2f78:	3f 93       	push	r19
    2f7a:	4f 93       	push	r20
    2f7c:	5f 93       	push	r21
    2f7e:	6f 93       	push	r22
    2f80:	7f 93       	push	r23
    2f82:	8f 93       	push	r24
    2f84:	9f 93       	push	r25
    2f86:	af 93       	push	r26
    2f88:	bf 93       	push	r27
    2f8a:	ef 93       	push	r30
    2f8c:	ff 93       	push	r31
  switch(TW_STATUS){
    2f8e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    2f92:	88 7f       	andi	r24, 0xF8	; 248
    2f94:	90 e0       	ldi	r25, 0x00	; 0
    2f96:	89 3c       	cpi	r24, 0xC9	; 201
    2f98:	91 05       	cpc	r25, r1
    2f9a:	08 f0       	brcs	.+2      	; 0x2f9e <__vector_39+0x36>
    2f9c:	ef c0       	rjmp	.+478    	; 0x317c <__vector_39+0x214>
    2f9e:	fc 01       	movw	r30, r24
    2fa0:	88 27       	eor	r24, r24
    2fa2:	ee 58       	subi	r30, 0x8E	; 142
    2fa4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa6:	8f 4f       	sbci	r24, 0xFF	; 255
    2fa8:	0c 94 3e 20 	jmp	0x407c	; 0x407c <__tablejump2__>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    2fac:	80 91 47 07 	lds	r24, 0x0747	; 0x800747 <twi_slarw>
    2fb0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2fb4:	85 ec       	ldi	r24, 0xC5	; 197
    2fb6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2fba:	e0 c0       	rjmp	.+448    	; 0x317c <__vector_39+0x214>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2fbc:	90 91 20 07 	lds	r25, 0x0720	; 0x800720 <twi_masterBufferIndex>
    2fc0:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <twi_masterBufferLength>
    2fc4:	98 17       	cp	r25, r24
    2fc6:	80 f4       	brcc	.+32     	; 0x2fe8 <__vector_39+0x80>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2fc8:	e0 91 20 07 	lds	r30, 0x0720	; 0x800720 <twi_masterBufferIndex>
    2fcc:	81 e0       	ldi	r24, 0x01	; 1
    2fce:	8e 0f       	add	r24, r30
    2fd0:	80 93 20 07 	sts	0x0720, r24	; 0x800720 <twi_masterBufferIndex>
    2fd4:	f0 e0       	ldi	r31, 0x00	; 0
    2fd6:	ef 5d       	subi	r30, 0xDF	; 223
    2fd8:	f8 4f       	sbci	r31, 0xF8	; 248
    2fda:	80 81       	ld	r24, Z
    2fdc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2fe0:	85 ec       	ldi	r24, 0xC5	; 197
    2fe2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2fe6:	ca c0       	rjmp	.+404    	; 0x317c <__vector_39+0x214>
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
        twi_reply(1);
      }else{
	if (twi_sendStop)
    2fe8:	80 91 46 07 	lds	r24, 0x0746	; 0x800746 <twi_sendStop>
    2fec:	88 23       	and	r24, r24
    2fee:	11 f0       	breq	.+4      	; 0x2ff4 <__vector_39+0x8c>
          twi_stop();
    2ff0:	aa df       	rcall	.-172    	; 0x2f46 <twi_stop>
    2ff2:	c4 c0       	rjmp	.+392    	; 0x317c <__vector_39+0x214>
	else {
	  twi_inRepStart = 1;	// we're gonna send the START
    2ff4:	81 e0       	ldi	r24, 0x01	; 1
    2ff6:	80 93 45 07 	sts	0x0745, r24	; 0x800745 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2ffa:	84 ea       	ldi	r24, 0xA4	; 164
    2ffc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	  twi_state = TWI_READY;
    3000:	10 92 48 07 	sts	0x0748, r1	; 0x800748 <twi_state>
    3004:	bb c0       	rjmp	.+374    	; 0x317c <__vector_39+0x214>
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    3006:	80 e2       	ldi	r24, 0x20	; 32
    3008:	80 93 db 06 	sts	0x06DB, r24	; 0x8006db <twi_error>
      twi_stop();
    300c:	9c df       	rcall	.-200    	; 0x2f46 <twi_stop>
      break;
    300e:	b6 c0       	rjmp	.+364    	; 0x317c <__vector_39+0x214>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    3010:	80 e3       	ldi	r24, 0x30	; 48
    3012:	80 93 db 06 	sts	0x06DB, r24	; 0x8006db <twi_error>
      twi_stop();
    3016:	97 df       	rcall	.-210    	; 0x2f46 <twi_stop>
      break;
    3018:	b1 c0       	rjmp	.+354    	; 0x317c <__vector_39+0x214>
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    301a:	88 e3       	ldi	r24, 0x38	; 56
    301c:	80 93 db 06 	sts	0x06DB, r24	; 0x8006db <twi_error>
      twi_releaseBus();
    3020:	9d df       	rcall	.-198    	; 0x2f5c <twi_releaseBus>
      break;
    3022:	ac c0       	rjmp	.+344    	; 0x317c <__vector_39+0x214>

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    3024:	e0 91 20 07 	lds	r30, 0x0720	; 0x800720 <twi_masterBufferIndex>
    3028:	81 e0       	ldi	r24, 0x01	; 1
    302a:	8e 0f       	add	r24, r30
    302c:	80 93 20 07 	sts	0x0720, r24	; 0x800720 <twi_masterBufferIndex>
    3030:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    3034:	f0 e0       	ldi	r31, 0x00	; 0
    3036:	ef 5d       	subi	r30, 0xDF	; 223
    3038:	f8 4f       	sbci	r31, 0xF8	; 248
    303a:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    303c:	90 91 20 07 	lds	r25, 0x0720	; 0x800720 <twi_masterBufferIndex>
    3040:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <twi_masterBufferLength>
    3044:	98 17       	cp	r25, r24
    3046:	20 f4       	brcc	.+8      	; 0x3050 <__vector_39+0xe8>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3048:	85 ec       	ldi	r24, 0xC5	; 197
    304a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    304e:	96 c0       	rjmp	.+300    	; 0x317c <__vector_39+0x214>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3050:	85 e8       	ldi	r24, 0x85	; 133
    3052:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3056:	92 c0       	rjmp	.+292    	; 0x317c <__vector_39+0x214>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    3058:	e0 91 20 07 	lds	r30, 0x0720	; 0x800720 <twi_masterBufferIndex>
    305c:	81 e0       	ldi	r24, 0x01	; 1
    305e:	8e 0f       	add	r24, r30
    3060:	80 93 20 07 	sts	0x0720, r24	; 0x800720 <twi_masterBufferIndex>
    3064:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    3068:	f0 e0       	ldi	r31, 0x00	; 0
    306a:	ef 5d       	subi	r30, 0xDF	; 223
    306c:	f8 4f       	sbci	r31, 0xF8	; 248
    306e:	80 83       	st	Z, r24
	if (twi_sendStop)
    3070:	80 91 46 07 	lds	r24, 0x0746	; 0x800746 <twi_sendStop>
    3074:	88 23       	and	r24, r24
          twi_stop();
    3076:	11 f0       	breq	.+4      	; 0x307c <__vector_39+0x114>
    3078:	66 df       	rcall	.-308    	; 0x2f46 <twi_stop>
    307a:	80 c0       	rjmp	.+256    	; 0x317c <__vector_39+0x214>
	else {
	  twi_inRepStart = 1;	// we're gonna send the START
    307c:	81 e0       	ldi	r24, 0x01	; 1
    307e:	80 93 45 07 	sts	0x0745, r24	; 0x800745 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    3082:	84 ea       	ldi	r24, 0xA4	; 164
    3084:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	  twi_state = TWI_READY;
    3088:	10 92 48 07 	sts	0x0748, r1	; 0x800748 <twi_state>
	}    
	break;
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
    308c:	77 c0       	rjmp	.+238    	; 0x317c <__vector_39+0x214>
    308e:	5b df       	rcall	.-330    	; 0x2f46 <twi_stop>
      break;
    3090:	75 c0       	rjmp	.+234    	; 0x317c <__vector_39+0x214>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    3092:	83 e0       	ldi	r24, 0x03	; 3
    3094:	80 93 48 07 	sts	0x0748, r24	; 0x800748 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    3098:	10 92 dc 06 	sts	0x06DC, r1	; 0x8006dc <twi_rxBufferIndex>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    309c:	85 ec       	ldi	r24, 0xC5	; 197
    309e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    30a2:	6c c0       	rjmp	.+216    	; 0x317c <__vector_39+0x214>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    30a4:	80 91 dc 06 	lds	r24, 0x06DC	; 0x8006dc <twi_rxBufferIndex>
    30a8:	80 32       	cpi	r24, 0x20	; 32
    30aa:	80 f4       	brcc	.+32     	; 0x30cc <__vector_39+0x164>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    30ac:	e0 91 dc 06 	lds	r30, 0x06DC	; 0x8006dc <twi_rxBufferIndex>
    30b0:	81 e0       	ldi	r24, 0x01	; 1
    30b2:	8e 0f       	add	r24, r30
    30b4:	80 93 dc 06 	sts	0x06DC, r24	; 0x8006dc <twi_rxBufferIndex>
    30b8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    30bc:	f0 e0       	ldi	r31, 0x00	; 0
    30be:	e3 52       	subi	r30, 0x23	; 35
    30c0:	f9 4f       	sbci	r31, 0xF9	; 249
    30c2:	80 83       	st	Z, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    30c4:	85 ec       	ldi	r24, 0xC5	; 197
    30c6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    30ca:	58 c0       	rjmp	.+176    	; 0x317c <__vector_39+0x214>
    30cc:	85 e8       	ldi	r24, 0x85	; 133
    30ce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    30d2:	54 c0       	rjmp	.+168    	; 0x317c <__vector_39+0x214>
    30d4:	43 df       	rcall	.-378    	; 0x2f5c <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    30d6:	80 91 dc 06 	lds	r24, 0x06DC	; 0x8006dc <twi_rxBufferIndex>
    30da:	80 32       	cpi	r24, 0x20	; 32
    30dc:	30 f4       	brcc	.+12     	; 0x30ea <__vector_39+0x182>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    30de:	e0 91 dc 06 	lds	r30, 0x06DC	; 0x8006dc <twi_rxBufferIndex>
    30e2:	f0 e0       	ldi	r31, 0x00	; 0
    30e4:	e3 52       	subi	r30, 0x23	; 35
    30e6:	f9 4f       	sbci	r31, 0xF9	; 249
    30e8:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    30ea:	60 91 dc 06 	lds	r22, 0x06DC	; 0x8006dc <twi_rxBufferIndex>
    30ee:	70 e0       	ldi	r23, 0x00	; 0
    30f0:	e0 91 41 07 	lds	r30, 0x0741	; 0x800741 <twi_onSlaveReceive>
    30f4:	f0 91 42 07 	lds	r31, 0x0742	; 0x800742 <twi_onSlaveReceive+0x1>
    30f8:	8d ed       	ldi	r24, 0xDD	; 221
    30fa:	96 e0       	ldi	r25, 0x06	; 6
    30fc:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    30fe:	10 92 dc 06 	sts	0x06DC, r1	; 0x8006dc <twi_rxBufferIndex>
      break;
    3102:	3c c0       	rjmp	.+120    	; 0x317c <__vector_39+0x214>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3104:	85 e8       	ldi	r24, 0x85	; 133
    3106:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    310a:	38 c0       	rjmp	.+112    	; 0x317c <__vector_39+0x214>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    310c:	84 e0       	ldi	r24, 0x04	; 4
    310e:	80 93 48 07 	sts	0x0748, r24	; 0x800748 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    3112:	10 92 fe 06 	sts	0x06FE, r1	; 0x8006fe <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    3116:	10 92 fd 06 	sts	0x06FD, r1	; 0x8006fd <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    311a:	e0 91 43 07 	lds	r30, 0x0743	; 0x800743 <twi_onSlaveTransmit>
    311e:	f0 91 44 07 	lds	r31, 0x0744	; 0x800744 <twi_onSlaveTransmit+0x1>
    3122:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    3124:	80 91 fd 06 	lds	r24, 0x06FD	; 0x8006fd <twi_txBufferLength>
    3128:	81 11       	cpse	r24, r1
    312a:	05 c0       	rjmp	.+10     	; 0x3136 <__vector_39+0x1ce>
        twi_txBufferLength = 1;
    312c:	81 e0       	ldi	r24, 0x01	; 1
    312e:	80 93 fd 06 	sts	0x06FD, r24	; 0x8006fd <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    3132:	10 92 ff 06 	sts	0x06FF, r1	; 0x8006ff <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    3136:	e0 91 fe 06 	lds	r30, 0x06FE	; 0x8006fe <twi_txBufferIndex>
    313a:	81 e0       	ldi	r24, 0x01	; 1
    313c:	8e 0f       	add	r24, r30
    313e:	80 93 fe 06 	sts	0x06FE, r24	; 0x8006fe <twi_txBufferIndex>
    3142:	f0 e0       	ldi	r31, 0x00	; 0
    3144:	e1 50       	subi	r30, 0x01	; 1
    3146:	f9 4f       	sbci	r31, 0xF9	; 249
    3148:	80 81       	ld	r24, Z
    314a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    314e:	90 91 fe 06 	lds	r25, 0x06FE	; 0x8006fe <twi_txBufferIndex>
    3152:	80 91 fd 06 	lds	r24, 0x06FD	; 0x8006fd <twi_txBufferLength>
    3156:	98 17       	cp	r25, r24
    3158:	20 f4       	brcc	.+8      	; 0x3162 <__vector_39+0x1fa>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    315a:	85 ec       	ldi	r24, 0xC5	; 197
    315c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3160:	0d c0       	rjmp	.+26     	; 0x317c <__vector_39+0x214>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3162:	85 e8       	ldi	r24, 0x85	; 133
    3164:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3168:	09 c0       	rjmp	.+18     	; 0x317c <__vector_39+0x214>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    316a:	85 ec       	ldi	r24, 0xC5	; 197
    316c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    3170:	10 92 48 07 	sts	0x0748, r1	; 0x800748 <twi_state>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    3174:	03 c0       	rjmp	.+6      	; 0x317c <__vector_39+0x214>
    3176:	10 92 db 06 	sts	0x06DB, r1	; 0x8006db <twi_error>
      twi_stop();
    317a:	e5 de       	rcall	.-566    	; 0x2f46 <twi_stop>
      break;
  }
}
    317c:	ff 91       	pop	r31
    317e:	ef 91       	pop	r30
    3180:	bf 91       	pop	r27
    3182:	af 91       	pop	r26
    3184:	9f 91       	pop	r25
    3186:	8f 91       	pop	r24
    3188:	7f 91       	pop	r23
    318a:	6f 91       	pop	r22
    318c:	5f 91       	pop	r21
    318e:	4f 91       	pop	r20
    3190:	3f 91       	pop	r19
    3192:	2f 91       	pop	r18
    3194:	0f 90       	pop	r0
    3196:	0b be       	out	0x3b, r0	; 59
    3198:	0f 90       	pop	r0
    319a:	0f be       	out	0x3f, r0	; 63
    319c:	0f 90       	pop	r0
    319e:	1f 90       	pop	r1
    31a0:	18 95       	reti

000031a2 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
	user_onRequest = function;
    31a2:	80 91 73 07 	lds	r24, 0x0773	; 0x800773 <_ZN7TwoWire14rxBufferLengthE>
    31a6:	90 e0       	ldi	r25, 0x00	; 0
    31a8:	20 91 74 07 	lds	r18, 0x0774	; 0x800774 <_ZN7TwoWire13rxBufferIndexE>
    31ac:	82 1b       	sub	r24, r18
    31ae:	91 09       	sbc	r25, r1
    31b0:	08 95       	ret

000031b2 <_ZN7TwoWire4readEv>:
    31b2:	90 91 74 07 	lds	r25, 0x0774	; 0x800774 <_ZN7TwoWire13rxBufferIndexE>
    31b6:	80 91 73 07 	lds	r24, 0x0773	; 0x800773 <_ZN7TwoWire14rxBufferLengthE>
    31ba:	98 17       	cp	r25, r24
    31bc:	50 f4       	brcc	.+20     	; 0x31d2 <_ZN7TwoWire4readEv+0x20>
    31be:	e9 2f       	mov	r30, r25
    31c0:	f0 e0       	ldi	r31, 0x00	; 0
    31c2:	eb 58       	subi	r30, 0x8B	; 139
    31c4:	f8 4f       	sbci	r31, 0xF8	; 248
    31c6:	20 81       	ld	r18, Z
    31c8:	30 e0       	ldi	r19, 0x00	; 0
    31ca:	9f 5f       	subi	r25, 0xFF	; 255
    31cc:	90 93 74 07 	sts	0x0774, r25	; 0x800774 <_ZN7TwoWire13rxBufferIndexE>
    31d0:	02 c0       	rjmp	.+4      	; 0x31d6 <_ZN7TwoWire4readEv+0x24>
    31d2:	2f ef       	ldi	r18, 0xFF	; 255
    31d4:	3f ef       	ldi	r19, 0xFF	; 255
    31d6:	c9 01       	movw	r24, r18
    31d8:	08 95       	ret

000031da <_ZN7TwoWire4peekEv>:
    31da:	e0 91 74 07 	lds	r30, 0x0774	; 0x800774 <_ZN7TwoWire13rxBufferIndexE>
    31de:	80 91 73 07 	lds	r24, 0x0773	; 0x800773 <_ZN7TwoWire14rxBufferLengthE>
    31e2:	e8 17       	cp	r30, r24
    31e4:	30 f4       	brcc	.+12     	; 0x31f2 <_ZN7TwoWire4peekEv+0x18>
    31e6:	f0 e0       	ldi	r31, 0x00	; 0
    31e8:	eb 58       	subi	r30, 0x8B	; 139
    31ea:	f8 4f       	sbci	r31, 0xF8	; 248
    31ec:	80 81       	ld	r24, Z
    31ee:	90 e0       	ldi	r25, 0x00	; 0
    31f0:	08 95       	ret
    31f2:	8f ef       	ldi	r24, 0xFF	; 255
    31f4:	9f ef       	ldi	r25, 0xFF	; 255
    31f6:	08 95       	ret

000031f8 <_ZN7TwoWire5flushEv>:
    31f8:	08 95       	ret

000031fa <_ZN7TwoWire16onReceiveServiceEPhi>:
    31fa:	cf 93       	push	r28
    31fc:	df 93       	push	r29
    31fe:	ec 01       	movw	r28, r24
    3200:	e0 91 4b 07 	lds	r30, 0x074B	; 0x80074b <_ZN7TwoWire14user_onReceiveE>
    3204:	f0 91 4c 07 	lds	r31, 0x074C	; 0x80074c <_ZN7TwoWire14user_onReceiveE+0x1>
    3208:	30 97       	sbiw	r30, 0x00	; 0
    320a:	01 f1       	breq	.+64     	; 0x324c <_ZN7TwoWire16onReceiveServiceEPhi+0x52>
    320c:	90 91 74 07 	lds	r25, 0x0774	; 0x800774 <_ZN7TwoWire13rxBufferIndexE>
    3210:	80 91 73 07 	lds	r24, 0x0773	; 0x800773 <_ZN7TwoWire14rxBufferLengthE>
    3214:	98 17       	cp	r25, r24
    3216:	d0 f0       	brcs	.+52     	; 0x324c <_ZN7TwoWire16onReceiveServiceEPhi+0x52>
    3218:	16 16       	cp	r1, r22
    321a:	17 06       	cpc	r1, r23
    321c:	8c f4       	brge	.+34     	; 0x3240 <_ZN7TwoWire16onReceiveServiceEPhi+0x46>
    321e:	20 e0       	ldi	r18, 0x00	; 0
    3220:	30 e0       	ldi	r19, 0x00	; 0
    3222:	90 e0       	ldi	r25, 0x00	; 0
    3224:	de 01       	movw	r26, r28
    3226:	a9 0f       	add	r26, r25
    3228:	b1 1d       	adc	r27, r1
    322a:	4c 91       	ld	r20, X
    322c:	d9 01       	movw	r26, r18
    322e:	ab 58       	subi	r26, 0x8B	; 139
    3230:	b8 4f       	sbci	r27, 0xF8	; 248
    3232:	4c 93       	st	X, r20
    3234:	9f 5f       	subi	r25, 0xFF	; 255
    3236:	29 2f       	mov	r18, r25
    3238:	30 e0       	ldi	r19, 0x00	; 0
    323a:	26 17       	cp	r18, r22
    323c:	37 07       	cpc	r19, r23
    323e:	94 f3       	brlt	.-28     	; 0x3224 <_ZN7TwoWire16onReceiveServiceEPhi+0x2a>
    3240:	cb 01       	movw	r24, r22
    3242:	10 92 74 07 	sts	0x0774, r1	; 0x800774 <_ZN7TwoWire13rxBufferIndexE>
    3246:	60 93 73 07 	sts	0x0773, r22	; 0x800773 <_ZN7TwoWire14rxBufferLengthE>
    324a:	19 95       	eicall
    324c:	df 91       	pop	r29
    324e:	cf 91       	pop	r28
    3250:	08 95       	ret

00003252 <_ZN7TwoWire16onRequestServiceEv>:
    3252:	e0 91 4d 07 	lds	r30, 0x074D	; 0x80074d <_ZN7TwoWire14user_onRequestE>
    3256:	f0 91 4e 07 	lds	r31, 0x074E	; 0x80074e <_ZN7TwoWire14user_onRequestE+0x1>
    325a:	30 97       	sbiw	r30, 0x00	; 0
    325c:	29 f0       	breq	.+10     	; 0x3268 <_ZN7TwoWire16onRequestServiceEv+0x16>
    325e:	10 92 51 07 	sts	0x0751, r1	; 0x800751 <_ZN7TwoWire13txBufferIndexE>
    3262:	10 92 50 07 	sts	0x0750, r1	; 0x800750 <_ZN7TwoWire14txBufferLengthE>
    3266:	19 95       	eicall
    3268:	08 95       	ret

0000326a <_ZN7TwoWire5writeEh>:
    326a:	cf 93       	push	r28
    326c:	df 93       	push	r29
    326e:	1f 92       	push	r1
    3270:	cd b7       	in	r28, 0x3d	; 61
    3272:	de b7       	in	r29, 0x3e	; 62
    3274:	69 83       	std	Y+1, r22	; 0x01
    3276:	80 91 4f 07 	lds	r24, 0x074F	; 0x80074f <_ZN7TwoWire12transmittingE>
    327a:	88 23       	and	r24, r24
    327c:	99 f0       	breq	.+38     	; 0x32a4 <_ZN7TwoWire5writeEh+0x3a>
    327e:	80 91 50 07 	lds	r24, 0x0750	; 0x800750 <_ZN7TwoWire14txBufferLengthE>
    3282:	80 32       	cpi	r24, 0x20	; 32
    3284:	b0 f4       	brcc	.+44     	; 0x32b2 <_ZN7TwoWire5writeEh+0x48>
    3286:	80 91 51 07 	lds	r24, 0x0751	; 0x800751 <_ZN7TwoWire13txBufferIndexE>
    328a:	e8 2f       	mov	r30, r24
    328c:	f0 e0       	ldi	r31, 0x00	; 0
    328e:	ee 5a       	subi	r30, 0xAE	; 174
    3290:	f8 4f       	sbci	r31, 0xF8	; 248
    3292:	60 83       	st	Z, r22
    3294:	8f 5f       	subi	r24, 0xFF	; 255
    3296:	80 93 51 07 	sts	0x0751, r24	; 0x800751 <_ZN7TwoWire13txBufferIndexE>
    329a:	80 93 50 07 	sts	0x0750, r24	; 0x800750 <_ZN7TwoWire14txBufferLengthE>
    329e:	81 e0       	ldi	r24, 0x01	; 1
    32a0:	90 e0       	ldi	r25, 0x00	; 0
    32a2:	09 c0       	rjmp	.+18     	; 0x32b6 <_ZN7TwoWire5writeEh+0x4c>
    32a4:	61 e0       	ldi	r22, 0x01	; 1
    32a6:	ce 01       	movw	r24, r28
    32a8:	01 96       	adiw	r24, 0x01	; 1
    32aa:	19 de       	rcall	.-974    	; 0x2ede <twi_transmit>
    32ac:	81 e0       	ldi	r24, 0x01	; 1
    32ae:	90 e0       	ldi	r25, 0x00	; 0
    32b0:	02 c0       	rjmp	.+4      	; 0x32b6 <_ZN7TwoWire5writeEh+0x4c>
    32b2:	80 e0       	ldi	r24, 0x00	; 0
    32b4:	90 e0       	ldi	r25, 0x00	; 0
    32b6:	0f 90       	pop	r0
    32b8:	df 91       	pop	r29
    32ba:	cf 91       	pop	r28
    32bc:	08 95       	ret

000032be <_ZN7TwoWire5writeEPKhj>:
    32be:	cf 92       	push	r12
    32c0:	df 92       	push	r13
    32c2:	ef 92       	push	r14
    32c4:	ff 92       	push	r15
    32c6:	0f 93       	push	r16
    32c8:	1f 93       	push	r17
    32ca:	cf 93       	push	r28
    32cc:	df 93       	push	r29
    32ce:	8c 01       	movw	r16, r24
    32d0:	cb 01       	movw	r24, r22
    32d2:	6a 01       	movw	r12, r20
    32d4:	20 91 4f 07 	lds	r18, 0x074F	; 0x80074f <_ZN7TwoWire12transmittingE>
    32d8:	22 23       	and	r18, r18
    32da:	a1 f0       	breq	.+40     	; 0x3304 <_ZN7TwoWire5writeEPKhj+0x46>
    32dc:	41 15       	cp	r20, r1
    32de:	51 05       	cpc	r21, r1
    32e0:	99 f0       	breq	.+38     	; 0x3308 <_ZN7TwoWire5writeEPKhj+0x4a>
    32e2:	eb 01       	movw	r28, r22
    32e4:	7b 01       	movw	r14, r22
    32e6:	e4 0e       	add	r14, r20
    32e8:	f5 1e       	adc	r15, r21
    32ea:	69 91       	ld	r22, Y+
    32ec:	d8 01       	movw	r26, r16
    32ee:	ed 91       	ld	r30, X+
    32f0:	fc 91       	ld	r31, X
    32f2:	01 90       	ld	r0, Z+
    32f4:	f0 81       	ld	r31, Z
    32f6:	e0 2d       	mov	r30, r0
    32f8:	c8 01       	movw	r24, r16
    32fa:	19 95       	eicall
    32fc:	ce 15       	cp	r28, r14
    32fe:	df 05       	cpc	r29, r15
    3300:	a1 f7       	brne	.-24     	; 0x32ea <_ZN7TwoWire5writeEPKhj+0x2c>
    3302:	02 c0       	rjmp	.+4      	; 0x3308 <_ZN7TwoWire5writeEPKhj+0x4a>
    3304:	64 2f       	mov	r22, r20
    3306:	eb dd       	rcall	.-1066   	; 0x2ede <twi_transmit>
    3308:	c6 01       	movw	r24, r12
    330a:	df 91       	pop	r29
    330c:	cf 91       	pop	r28
    330e:	1f 91       	pop	r17
    3310:	0f 91       	pop	r16
    3312:	ff 90       	pop	r15
    3314:	ef 90       	pop	r14
    3316:	df 90       	pop	r13
    3318:	cf 90       	pop	r12
    331a:	08 95       	ret

0000331c <_ZN7TwoWire5beginEv>:
    331c:	10 92 74 07 	sts	0x0774, r1	; 0x800774 <_ZN7TwoWire13rxBufferIndexE>
    3320:	10 92 73 07 	sts	0x0773, r1	; 0x800773 <_ZN7TwoWire14rxBufferLengthE>
    3324:	10 92 51 07 	sts	0x0751, r1	; 0x800751 <_ZN7TwoWire13txBufferIndexE>
    3328:	10 92 50 07 	sts	0x0750, r1	; 0x800750 <_ZN7TwoWire14txBufferLengthE>
    332c:	0a dd       	rcall	.-1516   	; 0x2d42 <twi_init>
    332e:	89 e2       	ldi	r24, 0x29	; 41
    3330:	99 e1       	ldi	r25, 0x19	; 25
    3332:	04 de       	rcall	.-1016   	; 0x2f3c <twi_attachSlaveTxEvent>
    3334:	8d ef       	ldi	r24, 0xFD	; 253
    3336:	98 e1       	ldi	r25, 0x18	; 24
    3338:	fc cd       	rjmp	.-1032   	; 0x2f32 <twi_attachSlaveRxEvent>
    333a:	08 95       	ret

0000333c <_ZN7TwoWire17beginTransmissionEh>:
    333c:	81 e0       	ldi	r24, 0x01	; 1
    333e:	80 93 4f 07 	sts	0x074F, r24	; 0x80074f <_ZN7TwoWire12transmittingE>
    3342:	60 93 72 07 	sts	0x0772, r22	; 0x800772 <_ZN7TwoWire9txAddressE>
    3346:	10 92 51 07 	sts	0x0751, r1	; 0x800751 <_ZN7TwoWire13txBufferIndexE>
    334a:	10 92 50 07 	sts	0x0750, r1	; 0x800750 <_ZN7TwoWire14txBufferLengthE>
    334e:	08 95       	ret

00003350 <_ZN7TwoWire15endTransmissionEh>:
    3350:	0f 93       	push	r16
    3352:	06 2f       	mov	r16, r22
    3354:	21 e0       	ldi	r18, 0x01	; 1
    3356:	40 91 50 07 	lds	r20, 0x0750	; 0x800750 <_ZN7TwoWire14txBufferLengthE>
    335a:	62 e5       	ldi	r22, 0x52	; 82
    335c:	77 e0       	ldi	r23, 0x07	; 7
    335e:	80 91 72 07 	lds	r24, 0x0772	; 0x800772 <_ZN7TwoWire9txAddressE>
    3362:	5a dd       	rcall	.-1356   	; 0x2e18 <twi_writeTo>
    3364:	10 92 51 07 	sts	0x0751, r1	; 0x800751 <_ZN7TwoWire13txBufferIndexE>
    3368:	10 92 50 07 	sts	0x0750, r1	; 0x800750 <_ZN7TwoWire14txBufferLengthE>
    336c:	10 92 4f 07 	sts	0x074F, r1	; 0x80074f <_ZN7TwoWire12transmittingE>
    3370:	0f 91       	pop	r16
    3372:	08 95       	ret

00003374 <_ZN7TwoWire11requestFromEhhmhh>:
    3374:	4f 92       	push	r4
    3376:	5f 92       	push	r5
    3378:	6f 92       	push	r6
    337a:	7f 92       	push	r7
    337c:	af 92       	push	r10
    337e:	bf 92       	push	r11
    3380:	cf 92       	push	r12
    3382:	ef 92       	push	r14
    3384:	ff 92       	push	r15
    3386:	0f 93       	push	r16
    3388:	1f 93       	push	r17
    338a:	cf 93       	push	r28
    338c:	df 93       	push	r29
    338e:	5c 01       	movw	r10, r24
    3390:	f6 2e       	mov	r15, r22
    3392:	d4 2f       	mov	r29, r20
    3394:	28 01       	movw	r4, r16
    3396:	39 01       	movw	r6, r18
    3398:	ee 20       	and	r14, r14
    339a:	39 f1       	breq	.+78     	; 0x33ea <_ZN7TwoWire11requestFromEhhmhh+0x76>
    339c:	cf df       	rcall	.-98     	; 0x333c <_ZN7TwoWire17beginTransmissionEh>
    339e:	8e 2d       	mov	r24, r14
    33a0:	84 30       	cpi	r24, 0x04	; 4
    33a2:	08 f0       	brcs	.+2      	; 0x33a6 <_ZN7TwoWire11requestFromEhhmhh+0x32>
    33a4:	83 e0       	ldi	r24, 0x03	; 3
    33a6:	cf ef       	ldi	r28, 0xFF	; 255
    33a8:	c8 0f       	add	r28, r24
    33aa:	88 23       	and	r24, r24
    33ac:	d9 f0       	breq	.+54     	; 0x33e4 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    33ae:	8c 2f       	mov	r24, r28
    33b0:	88 0f       	add	r24, r24
    33b2:	88 0f       	add	r24, r24
    33b4:	88 0f       	add	r24, r24
    33b6:	a3 01       	movw	r20, r6
    33b8:	92 01       	movw	r18, r4
    33ba:	04 c0       	rjmp	.+8      	; 0x33c4 <_ZN7TwoWire11requestFromEhhmhh+0x50>
    33bc:	56 95       	lsr	r21
    33be:	47 95       	ror	r20
    33c0:	37 95       	ror	r19
    33c2:	27 95       	ror	r18
    33c4:	8a 95       	dec	r24
    33c6:	d2 f7       	brpl	.-12     	; 0x33bc <_ZN7TwoWire11requestFromEhhmhh+0x48>
    33c8:	ca 01       	movw	r24, r20
    33ca:	b9 01       	movw	r22, r18
    33cc:	d5 01       	movw	r26, r10
    33ce:	ed 91       	ld	r30, X+
    33d0:	fc 91       	ld	r31, X
    33d2:	01 90       	ld	r0, Z+
    33d4:	f0 81       	ld	r31, Z
    33d6:	e0 2d       	mov	r30, r0
    33d8:	c5 01       	movw	r24, r10
    33da:	19 95       	eicall
    33dc:	8c 2f       	mov	r24, r28
    33de:	c1 50       	subi	r28, 0x01	; 1
    33e0:	81 11       	cpse	r24, r1
    33e2:	e5 cf       	rjmp	.-54     	; 0x33ae <_ZN7TwoWire11requestFromEhhmhh+0x3a>
    33e4:	60 e0       	ldi	r22, 0x00	; 0
    33e6:	c5 01       	movw	r24, r10
    33e8:	b3 df       	rcall	.-154    	; 0x3350 <_ZN7TwoWire15endTransmissionEh>
    33ea:	4d 2f       	mov	r20, r29
    33ec:	d1 32       	cpi	r29, 0x21	; 33
    33ee:	08 f0       	brcs	.+2      	; 0x33f2 <_ZN7TwoWire11requestFromEhhmhh+0x7e>
    33f0:	40 e2       	ldi	r20, 0x20	; 32
    33f2:	2c 2d       	mov	r18, r12
    33f4:	65 e7       	ldi	r22, 0x75	; 117
    33f6:	77 e0       	ldi	r23, 0x07	; 7
    33f8:	8f 2d       	mov	r24, r15
    33fa:	bc dc       	rcall	.-1672   	; 0x2d74 <twi_readFrom>
    33fc:	10 92 74 07 	sts	0x0774, r1	; 0x800774 <_ZN7TwoWire13rxBufferIndexE>
    3400:	80 93 73 07 	sts	0x0773, r24	; 0x800773 <_ZN7TwoWire14rxBufferLengthE>
    3404:	df 91       	pop	r29
    3406:	cf 91       	pop	r28
    3408:	1f 91       	pop	r17
    340a:	0f 91       	pop	r16
    340c:	ff 90       	pop	r15
    340e:	ef 90       	pop	r14
    3410:	cf 90       	pop	r12
    3412:	bf 90       	pop	r11
    3414:	af 90       	pop	r10
    3416:	7f 90       	pop	r7
    3418:	6f 90       	pop	r6
    341a:	5f 90       	pop	r5
    341c:	4f 90       	pop	r4
    341e:	08 95       	ret

00003420 <_ZN7TwoWire11requestFromEhhh>:
    3420:	cf 92       	push	r12
    3422:	ef 92       	push	r14
    3424:	0f 93       	push	r16
    3426:	1f 93       	push	r17
    3428:	c2 2e       	mov	r12, r18
    342a:	e1 2c       	mov	r14, r1
    342c:	00 e0       	ldi	r16, 0x00	; 0
    342e:	10 e0       	ldi	r17, 0x00	; 0
    3430:	98 01       	movw	r18, r16
    3432:	a0 df       	rcall	.-192    	; 0x3374 <_ZN7TwoWire11requestFromEhhmhh>
    3434:	1f 91       	pop	r17
    3436:	0f 91       	pop	r16
    3438:	ef 90       	pop	r14
    343a:	cf 90       	pop	r12
    343c:	08 95       	ret

0000343e <_ZN7TwoWire11requestFromEhh>:
    343e:	21 e0       	ldi	r18, 0x01	; 1
    3440:	ef cf       	rjmp	.-34     	; 0x3420 <_ZN7TwoWire11requestFromEhhh>
    3442:	08 95       	ret

00003444 <_ZN7TwoWire15endTransmissionEv>:
    3444:	61 e0       	ldi	r22, 0x01	; 1
    3446:	84 cf       	rjmp	.-248    	; 0x3350 <_ZN7TwoWire15endTransmissionEh>
    3448:	08 95       	ret

0000344a <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    344a:	84 ee       	ldi	r24, 0xE4	; 228
    344c:	92 e0       	ldi	r25, 0x02	; 2
    344e:	90 93 4a 07 	sts	0x074A, r25	; 0x80074a <Wire+0x1>
    3452:	80 93 49 07 	sts	0x0749, r24	; 0x800749 <Wire>
    3456:	08 95       	ret

00003458 <_ZN13DigitalSensor14IsValidRequestEPKhh>:

bool Robot::RegisterDevices(){
	RegisterDevice(BtnTest); //TODO return if successful
	
	return true;
}
    3458:	81 e0       	ldi	r24, 0x01	; 1
    345a:	41 11       	cpse	r20, r1
    345c:	80 e0       	ldi	r24, 0x00	; 0
    345e:	08 95       	ret

00003460 <_ZN13DigitalSensor15UpdateRequestedEPh>:
    3460:	fc 01       	movw	r30, r24
    3462:	a5 81       	ldd	r26, Z+5	; 0x05
    3464:	b6 81       	ldd	r27, Z+6	; 0x06
    3466:	9c 91       	ld	r25, X
    3468:	84 81       	ldd	r24, Z+4	; 0x04
    346a:	98 23       	and	r25, r24
    346c:	21 e0       	ldi	r18, 0x01	; 1
    346e:	09 f4       	brne	.+2      	; 0x3472 <_ZN13DigitalSensor15UpdateRequestedEPh+0x12>
    3470:	20 e0       	ldi	r18, 0x00	; 0
    3472:	87 81       	ldd	r24, Z+7	; 0x07
    3474:	82 27       	eor	r24, r18
    3476:	fb 01       	movw	r30, r22
    3478:	80 83       	st	Z, r24
    347a:	81 e0       	ldi	r24, 0x01	; 1
    347c:	08 95       	ret

0000347e <_ZN7ISensor6UpdateEPKhh>:
    347e:	cf 93       	push	r28
    3480:	df 93       	push	r29
    3482:	ec 01       	movw	r28, r24
    3484:	e8 81       	ld	r30, Y
    3486:	f9 81       	ldd	r31, Y+1	; 0x01
    3488:	02 80       	ldd	r0, Z+2	; 0x02
    348a:	f3 81       	ldd	r31, Z+3	; 0x03
    348c:	e0 2d       	mov	r30, r0
    348e:	19 95       	eicall
    3490:	88 23       	and	r24, r24
    3492:	a1 f0       	breq	.+40     	; 0x34bc <_ZN7ISensor6UpdateEPKhh+0x3e>
    3494:	e0 91 24 02 	lds	r30, 0x0224	; 0x800224 <_ZN9EtherComm6bufferE>
    3498:	f0 91 25 02 	lds	r31, 0x0225	; 0x800225 <_ZN9EtherComm6bufferE+0x1>
    349c:	8a 81       	ldd	r24, Y+2	; 0x02
    349e:	82 83       	std	Z+2, r24	; 0x02
    34a0:	bf 01       	movw	r22, r30
    34a2:	6d 5f       	subi	r22, 0xFD	; 253
    34a4:	7f 4f       	sbci	r23, 0xFF	; 255
    34a6:	e8 81       	ld	r30, Y
    34a8:	f9 81       	ldd	r31, Y+1	; 0x01
    34aa:	04 80       	ldd	r0, Z+4	; 0x04
    34ac:	f5 81       	ldd	r31, Z+5	; 0x05
    34ae:	e0 2d       	mov	r30, r0
    34b0:	ce 01       	movw	r24, r28
    34b2:	19 95       	eicall
    34b4:	61 e0       	ldi	r22, 0x01	; 1
    34b6:	68 0f       	add	r22, r24
    34b8:	83 e0       	ldi	r24, 0x03	; 3
    34ba:	5d d8       	rcall	.-3910   	; 0x2576 <_ZN9EtherComm11SendCommandEhh>
    34bc:	df 91       	pop	r29
    34be:	cf 91       	pop	r28
    34c0:	08 95       	ret

000034c2 <_ZN5Robot6SetLedEb>:
    34c2:	88 23       	and	r24, r24
    34c4:	11 f0       	breq	.+4      	; 0x34ca <_ZN5Robot6SetLedEb+0x8>
    34c6:	2f 9a       	sbi	0x05, 7	; 5
    34c8:	08 95       	ret
    34ca:	2f 98       	cbi	0x05, 7	; 5
    34cc:	08 95       	ret

000034ce <_ZN5Robot14RegisterDeviceER7ISensor>:
    34ce:	fc 01       	movw	r30, r24
    34d0:	22 81       	ldd	r18, Z+2	; 0x02
    34d2:	30 e0       	ldi	r19, 0x00	; 0
    34d4:	f9 01       	movw	r30, r18
    34d6:	ee 0f       	add	r30, r30
    34d8:	ff 1f       	adc	r31, r31
    34da:	e3 56       	subi	r30, 0x63	; 99
    34dc:	f8 4f       	sbci	r31, 0xF8	; 248
    34de:	40 81       	ld	r20, Z
    34e0:	51 81       	ldd	r21, Z+1	; 0x01
    34e2:	45 2b       	or	r20, r21
    34e4:	39 f4       	brne	.+14     	; 0x34f4 <_ZN5Robot14RegisterDeviceER7ISensor+0x26>
    34e6:	22 0f       	add	r18, r18
    34e8:	33 1f       	adc	r19, r19
    34ea:	f9 01       	movw	r30, r18
    34ec:	e3 56       	subi	r30, 0x63	; 99
    34ee:	f8 4f       	sbci	r31, 0xF8	; 248
    34f0:	91 83       	std	Z+1, r25	; 0x01
    34f2:	80 83       	st	Z, r24
    34f4:	08 95       	ret

000034f6 <_ZN5Robot5beginEv>:
bool Robot::ReadTestBtn(){
	return !((TestBtnPinPort & TestBtnPin) > 0);
}

bool Robot::begin(){
	LedDDR |= LedPin;
    34f6:	27 9a       	sbi	0x04, 7	; 4
IDevice* Robot::devices[NUM_DEVICES];

DigitalSensor BtnTest(0, TestBtnDDR, TestBtnPort, TestBtnPinPort, TestBtnPin);

bool Robot::RegisterDevices(){
	RegisterDevice(BtnTest); //TODO return if successful
    34f8:	85 e9       	ldi	r24, 0x95	; 149
    34fa:	97 e0       	ldi	r25, 0x07	; 7
    34fc:	e8 df       	rcall	.-48     	; 0x34ce <_ZN5Robot14RegisterDeviceER7ISensor>
}

bool Robot::begin(){
	LedDDR |= LedPin;
	return RegisterDevices();
}
    34fe:	81 e0       	ldi	r24, 0x01	; 1
    3500:	08 95       	ret

00003502 <_GLOBAL__sub_I__ZN5Robot7devicesE>:
	}
	
	virtual void Update(const uint8_t* data, uint8_t len) = 0;
	
protected:
	IDevice(uint8_t ID) : id(ID){
    3502:	e5 e9       	ldi	r30, 0x95	; 149
    3504:	f7 e0       	ldi	r31, 0x07	; 7
    3506:	12 82       	std	Z+2, r1	; 0x02
				//}
			}
		}
	
	protected:
		ISensor(uint8_t ID, uint8_t type) : IDevice(ID), sensorType(type) {
    3508:	81 e0       	ldi	r24, 0x01	; 1
    350a:	83 83       	std	Z+3, r24	; 0x03

#include "../ISensor.h"

class DigitalSensor : public ISensor{
public:
	DigitalSensor(uint8_t ID, Register& DDRPort, Register& PortPort, Register& PinPort, uint8_t Pin, bool Inversed = true) : ISensor(ID, SENSOR_TYPE_DIGITAL), pin(Pin), pinPort(&PinPort), inversed(Inversed) {
    350c:	26 ef       	ldi	r18, 0xF6	; 246
    350e:	32 e0       	ldi	r19, 0x02	; 2
    3510:	31 83       	std	Z+1, r19	; 0x01
    3512:	20 83       	st	Z, r18
    3514:	84 83       	std	Z+4, r24	; 0x04
    3516:	2f e2       	ldi	r18, 0x2F	; 47
    3518:	30 e0       	ldi	r19, 0x00	; 0
    351a:	36 83       	std	Z+6, r19	; 0x06
    351c:	25 83       	std	Z+5, r18	; 0x05
    351e:	87 83       	std	Z+7, r24	; 0x07
		DDRPort &= ~pin; //Enable input
    3520:	80 98       	cbi	0x10, 0	; 16
		PortPort |= pin; //Enable pullup
    3522:	88 9a       	sbi	0x11, 0	; 17
    3524:	08 95       	ret

00003526 <_Z10printEventP15sensors_event_t>:

// Check I2C device address and correct line below (by default address is 0x29 or 0x28)
//                                   id, address
Adafruit_BNO055 bno = Adafruit_BNO055(55, 0x28);

void printEvent(sensors_event_t* event) {
    3526:	4f 92       	push	r4
    3528:	5f 92       	push	r5
    352a:	6f 92       	push	r6
    352c:	7f 92       	push	r7
    352e:	8f 92       	push	r8
    3530:	9f 92       	push	r9
    3532:	af 92       	push	r10
    3534:	bf 92       	push	r11
    3536:	cf 92       	push	r12
    3538:	df 92       	push	r13
    353a:	ef 92       	push	r14
    353c:	ff 92       	push	r15
    353e:	cf 93       	push	r28
    3540:	df 93       	push	r29
    3542:	ec 01       	movw	r28, r24
	Serial.println();
    3544:	8f e0       	ldi	r24, 0x0F	; 15
    3546:	96 e0       	ldi	r25, 0x06	; 6
    3548:	76 d1       	rcall	.+748    	; 0x3836 <_ZN5Print7printlnEv>
	Serial.print(event->type);
    354a:	48 85       	ldd	r20, Y+8	; 0x08
    354c:	59 85       	ldd	r21, Y+9	; 0x09
    354e:	6a 85       	ldd	r22, Y+10	; 0x0a
    3550:	7b 85       	ldd	r23, Y+11	; 0x0b
    3552:	2a e0       	ldi	r18, 0x0A	; 10
    3554:	30 e0       	ldi	r19, 0x00	; 0
    3556:	8f e0       	ldi	r24, 0x0F	; 15
    3558:	96 e0       	ldi	r25, 0x06	; 6
    355a:	e6 d1       	rcall	.+972    	; 0x3928 <_ZN5Print5printEli>
	double x = -1000000, y = -1000000 , z = -1000000; //dumb values, easy to spot problem
	if (event->type == SENSOR_TYPE_ACCELEROMETER) {
    355c:	88 85       	ldd	r24, Y+8	; 0x08
    355e:	99 85       	ldd	r25, Y+9	; 0x09
    3560:	aa 85       	ldd	r26, Y+10	; 0x0a
    3562:	bb 85       	ldd	r27, Y+11	; 0x0b
    3564:	81 30       	cpi	r24, 0x01	; 1
    3566:	91 05       	cpc	r25, r1
    3568:	a1 05       	cpc	r26, r1
    356a:	b1 05       	cpc	r27, r1
    356c:	69 f4       	brne	.+26     	; 0x3588 <_Z10printEventP15sensors_event_t+0x62>
		x = event->acceleration.x;
    356e:	48 88       	ldd	r4, Y+16	; 0x10
    3570:	59 88       	ldd	r5, Y+17	; 0x11
    3572:	6a 88       	ldd	r6, Y+18	; 0x12
    3574:	7b 88       	ldd	r7, Y+19	; 0x13
		y = event->acceleration.y;
    3576:	8c 88       	ldd	r8, Y+20	; 0x14
    3578:	9d 88       	ldd	r9, Y+21	; 0x15
    357a:	ae 88       	ldd	r10, Y+22	; 0x16
    357c:	bf 88       	ldd	r11, Y+23	; 0x17
		z = event->acceleration.z;
    357e:	c8 8c       	ldd	r12, Y+24	; 0x18
    3580:	d9 8c       	ldd	r13, Y+25	; 0x19
    3582:	ea 8c       	ldd	r14, Y+26	; 0x1a
    3584:	fb 8c       	ldd	r15, Y+27	; 0x1b
    3586:	47 c0       	rjmp	.+142    	; 0x3616 <_Z10printEventP15sensors_event_t+0xf0>
	}
	else if (event->type == SENSOR_TYPE_ORIENTATION) {
    3588:	83 30       	cpi	r24, 0x03	; 3
    358a:	91 05       	cpc	r25, r1
    358c:	a1 05       	cpc	r26, r1
    358e:	b1 05       	cpc	r27, r1
    3590:	69 f4       	brne	.+26     	; 0x35ac <_Z10printEventP15sensors_event_t+0x86>
		x = event->orientation.x;
    3592:	48 88       	ldd	r4, Y+16	; 0x10
    3594:	59 88       	ldd	r5, Y+17	; 0x11
    3596:	6a 88       	ldd	r6, Y+18	; 0x12
    3598:	7b 88       	ldd	r7, Y+19	; 0x13
		y = event->orientation.y;
    359a:	8c 88       	ldd	r8, Y+20	; 0x14
    359c:	9d 88       	ldd	r9, Y+21	; 0x15
    359e:	ae 88       	ldd	r10, Y+22	; 0x16
    35a0:	bf 88       	ldd	r11, Y+23	; 0x17
		z = event->orientation.z;
    35a2:	c8 8c       	ldd	r12, Y+24	; 0x18
    35a4:	d9 8c       	ldd	r13, Y+25	; 0x19
    35a6:	ea 8c       	ldd	r14, Y+26	; 0x1a
    35a8:	fb 8c       	ldd	r15, Y+27	; 0x1b
    35aa:	35 c0       	rjmp	.+106    	; 0x3616 <_Z10printEventP15sensors_event_t+0xf0>
	}
	else if (event->type == SENSOR_TYPE_MAGNETIC_FIELD) {
    35ac:	82 30       	cpi	r24, 0x02	; 2
    35ae:	91 05       	cpc	r25, r1
    35b0:	a1 05       	cpc	r26, r1
    35b2:	b1 05       	cpc	r27, r1
    35b4:	69 f4       	brne	.+26     	; 0x35d0 <_Z10printEventP15sensors_event_t+0xaa>
		x = event->magnetic.x;
    35b6:	48 88       	ldd	r4, Y+16	; 0x10
    35b8:	59 88       	ldd	r5, Y+17	; 0x11
    35ba:	6a 88       	ldd	r6, Y+18	; 0x12
    35bc:	7b 88       	ldd	r7, Y+19	; 0x13
		y = event->magnetic.y;
    35be:	8c 88       	ldd	r8, Y+20	; 0x14
    35c0:	9d 88       	ldd	r9, Y+21	; 0x15
    35c2:	ae 88       	ldd	r10, Y+22	; 0x16
    35c4:	bf 88       	ldd	r11, Y+23	; 0x17
		z = event->magnetic.z;
    35c6:	c8 8c       	ldd	r12, Y+24	; 0x18
    35c8:	d9 8c       	ldd	r13, Y+25	; 0x19
    35ca:	ea 8c       	ldd	r14, Y+26	; 0x1a
    35cc:	fb 8c       	ldd	r15, Y+27	; 0x1b
    35ce:	23 c0       	rjmp	.+70     	; 0x3616 <_Z10printEventP15sensors_event_t+0xf0>
	}
	else if ((event->type == SENSOR_TYPE_GYROSCOPE) || (event->type == SENSOR_TYPE_ROTATION_VECTOR)) {
    35d0:	84 30       	cpi	r24, 0x04	; 4
    35d2:	91 05       	cpc	r25, r1
    35d4:	a1 05       	cpc	r26, r1
    35d6:	b1 05       	cpc	r27, r1
    35d8:	21 f0       	breq	.+8      	; 0x35e2 <_Z10printEventP15sensors_event_t+0xbc>
    35da:	0b 97       	sbiw	r24, 0x0b	; 11
    35dc:	a1 05       	cpc	r26, r1
    35de:	b1 05       	cpc	r27, r1
    35e0:	69 f4       	brne	.+26     	; 0x35fc <_Z10printEventP15sensors_event_t+0xd6>
		x = event->gyro.x;
    35e2:	48 88       	ldd	r4, Y+16	; 0x10
    35e4:	59 88       	ldd	r5, Y+17	; 0x11
    35e6:	6a 88       	ldd	r6, Y+18	; 0x12
    35e8:	7b 88       	ldd	r7, Y+19	; 0x13
		y = event->gyro.y;
    35ea:	8c 88       	ldd	r8, Y+20	; 0x14
    35ec:	9d 88       	ldd	r9, Y+21	; 0x15
    35ee:	ae 88       	ldd	r10, Y+22	; 0x16
    35f0:	bf 88       	ldd	r11, Y+23	; 0x17
		z = event->gyro.z;
    35f2:	c8 8c       	ldd	r12, Y+24	; 0x18
    35f4:	d9 8c       	ldd	r13, Y+25	; 0x19
    35f6:	ea 8c       	ldd	r14, Y+26	; 0x1a
    35f8:	fb 8c       	ldd	r15, Y+27	; 0x1b
    35fa:	0d c0       	rjmp	.+26     	; 0x3616 <_Z10printEventP15sensors_event_t+0xf0>
Adafruit_BNO055 bno = Adafruit_BNO055(55, 0x28);

void printEvent(sensors_event_t* event) {
	Serial.println();
	Serial.print(event->type);
	double x = -1000000, y = -1000000 , z = -1000000; //dumb values, easy to spot problem
    35fc:	0f 2e       	mov	r0, r31
    35fe:	c1 2c       	mov	r12, r1
    3600:	f4 e2       	ldi	r31, 0x24	; 36
    3602:	df 2e       	mov	r13, r31
    3604:	f4 e7       	ldi	r31, 0x74	; 116
    3606:	ef 2e       	mov	r14, r31
    3608:	f9 ec       	ldi	r31, 0xC9	; 201
    360a:	ff 2e       	mov	r15, r31
    360c:	f0 2d       	mov	r31, r0
    360e:	46 01       	movw	r8, r12
    3610:	57 01       	movw	r10, r14
    3612:	26 01       	movw	r4, r12
    3614:	37 01       	movw	r6, r14
		x = event->gyro.x;
		y = event->gyro.y;
		z = event->gyro.z;
	}

	Serial.print(": x= ");
    3616:	6c ef       	ldi	r22, 0xFC	; 252
    3618:	72 e0       	ldi	r23, 0x02	; 2
    361a:	8f e0       	ldi	r24, 0x0F	; 15
    361c:	96 e0       	ldi	r25, 0x06	; 6
    361e:	ed d0       	rcall	.+474    	; 0x37fa <_ZN5Print5printEPKc>
	Serial.print(x);
    3620:	22 e0       	ldi	r18, 0x02	; 2
    3622:	30 e0       	ldi	r19, 0x00	; 0
    3624:	b3 01       	movw	r22, r6
    3626:	a2 01       	movw	r20, r4
    3628:	8f e0       	ldi	r24, 0x0F	; 15
    362a:	96 e0       	ldi	r25, 0x06	; 6
    362c:	da d2       	rcall	.+1460   	; 0x3be2 <_ZN5Print5printEdi>
	Serial.print(" | y= ");
    362e:	62 e0       	ldi	r22, 0x02	; 2
    3630:	73 e0       	ldi	r23, 0x03	; 3
    3632:	8f e0       	ldi	r24, 0x0F	; 15
    3634:	96 e0       	ldi	r25, 0x06	; 6
    3636:	e1 d0       	rcall	.+450    	; 0x37fa <_ZN5Print5printEPKc>
	Serial.print(y);
    3638:	22 e0       	ldi	r18, 0x02	; 2
    363a:	30 e0       	ldi	r19, 0x00	; 0
    363c:	b5 01       	movw	r22, r10
    363e:	a4 01       	movw	r20, r8
    3640:	8f e0       	ldi	r24, 0x0F	; 15
    3642:	96 e0       	ldi	r25, 0x06	; 6
	Serial.print(" | z= ");
    3644:	ce d2       	rcall	.+1436   	; 0x3be2 <_ZN5Print5printEdi>
    3646:	69 e0       	ldi	r22, 0x09	; 9
    3648:	73 e0       	ldi	r23, 0x03	; 3
    364a:	8f e0       	ldi	r24, 0x0F	; 15
    364c:	96 e0       	ldi	r25, 0x06	; 6
	Serial.println(z);
    364e:	d5 d0       	rcall	.+426    	; 0x37fa <_ZN5Print5printEPKc>
    3650:	22 e0       	ldi	r18, 0x02	; 2
    3652:	30 e0       	ldi	r19, 0x00	; 0
    3654:	b7 01       	movw	r22, r14
    3656:	a6 01       	movw	r20, r12
    3658:	8f e0       	ldi	r24, 0x0F	; 15
    365a:	96 e0       	ldi	r25, 0x06	; 6
    365c:	c5 d2       	rcall	.+1418   	; 0x3be8 <_ZN5Print7printlnEdi>
}
    365e:	df 91       	pop	r29
    3660:	cf 91       	pop	r28
    3662:	ff 90       	pop	r15
    3664:	ef 90       	pop	r14
    3666:	df 90       	pop	r13
    3668:	cf 90       	pop	r12
    366a:	bf 90       	pop	r11
    366c:	af 90       	pop	r10
    366e:	9f 90       	pop	r9
    3670:	8f 90       	pop	r8
    3672:	7f 90       	pop	r7
    3674:	6f 90       	pop	r6
    3676:	5f 90       	pop	r5
    3678:	4f 90       	pop	r4
    367a:	08 95       	ret

0000367c <_Z5setupv>:

void setup(void){
	Serial.println("Orientation Sensor Test"); Serial.println("");
    367c:	60 e1       	ldi	r22, 0x10	; 16
    367e:	73 e0       	ldi	r23, 0x03	; 3
    3680:	8f e0       	ldi	r24, 0x0F	; 15
    3682:	96 e0       	ldi	r25, 0x06	; 6
    3684:	e4 d0       	rcall	.+456    	; 0x384e <_ZN5Print7printlnEPKc>
    3686:	65 e7       	ldi	r22, 0x75	; 117
    3688:	73 e0       	ldi	r23, 0x03	; 3
    368a:	8f e0       	ldi	r24, 0x0F	; 15
    368c:	96 e0       	ldi	r25, 0x06	; 6
    368e:	df d0       	rcall	.+446    	; 0x384e <_ZN5Print7printlnEPKc>

	/* Initialise the sensor */
	if (!bno.begin())
    3690:	6c e0       	ldi	r22, 0x0C	; 12
    3692:	8d e9       	ldi	r24, 0x9D	; 157
    3694:	99 e0       	ldi	r25, 0x09	; 9
    3696:	0e 94 3b 02 	call	0x476	; 0x476 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>
    369a:	81 11       	cpse	r24, r1
    369c:	06 c0       	rjmp	.+12     	; 0x36aa <_Z5setupv+0x2e>
	{
		/* There was a problem detecting the BNO055 ... check your connections */
		Serial.print("Ooops, no BNO055 detected ... Check your wiring or I2C ADDR!");
    369e:	68 e2       	ldi	r22, 0x28	; 40
    36a0:	73 e0       	ldi	r23, 0x03	; 3
    36a2:	8f e0       	ldi	r24, 0x0F	; 15
    36a4:	96 e0       	ldi	r25, 0x06	; 6
    36a6:	a9 d0       	rcall	.+338    	; 0x37fa <_ZN5Print5printEPKc>
    36a8:	ff cf       	rjmp	.-2      	; 0x36a8 <_Z5setupv+0x2c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    36aa:	2f ef       	ldi	r18, 0xFF	; 255
    36ac:	83 ed       	ldi	r24, 0xD3	; 211
    36ae:	90 e3       	ldi	r25, 0x30	; 48
    36b0:	21 50       	subi	r18, 0x01	; 1
    36b2:	80 40       	sbci	r24, 0x00	; 0
    36b4:	90 40       	sbci	r25, 0x00	; 0
    36b6:	e1 f7       	brne	.-8      	; 0x36b0 <_Z5setupv+0x34>
    36b8:	00 c0       	rjmp	.+0      	; 0x36ba <_Z5setupv+0x3e>
    36ba:	00 00       	nop
    36bc:	08 95       	ret

000036be <_Z4loopv>:
	}

	_delay_ms(1000);
}

void loop(void){
    36be:	1f 93       	push	r17
    36c0:	cf 93       	push	r28
    36c2:	df 93       	push	r29
    36c4:	cd b7       	in	r28, 0x3d	; 61
    36c6:	de b7       	in	r29, 0x3e	; 62
    36c8:	c0 56       	subi	r28, 0x60	; 96
    36ca:	d1 09       	sbc	r29, r1
    36cc:	0f b6       	in	r0, 0x3f	; 63
    36ce:	f8 94       	cli
    36d0:	de bf       	out	0x3e, r29	; 62
    36d2:	0f be       	out	0x3f, r0	; 63
    36d4:	cd bf       	out	0x3d, r28	; 61
	//could add VECTOR_ACCELEROMETER, VECTOR_MAGNETOMETER,VECTOR_GRAVITY...
	sensors_event_t orientationData , angVelocityData , linearAccelData;
	bno.getEvent(&orientationData, Adafruit_BNO055::VECTOR_EULER);
    36d6:	4a e1       	ldi	r20, 0x1A	; 26
    36d8:	be 01       	movw	r22, r28
    36da:	6f 5f       	subi	r22, 0xFF	; 255
    36dc:	7f 4f       	sbci	r23, 0xFF	; 255
    36de:	8d e9       	ldi	r24, 0x9D	; 157
    36e0:	99 e0       	ldi	r25, 0x09	; 9
    36e2:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_tNS_22adafruit_vector_type_tE>
	bno.getEvent(&angVelocityData, Adafruit_BNO055::VECTOR_GYROSCOPE);
    36e6:	44 e1       	ldi	r20, 0x14	; 20
    36e8:	be 01       	movw	r22, r28
    36ea:	6f 5d       	subi	r22, 0xDF	; 223
    36ec:	7f 4f       	sbci	r23, 0xFF	; 255
    36ee:	8d e9       	ldi	r24, 0x9D	; 157
    36f0:	99 e0       	ldi	r25, 0x09	; 9
    36f2:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_tNS_22adafruit_vector_type_tE>
	bno.getEvent(&linearAccelData, Adafruit_BNO055::VECTOR_LINEARACCEL);
    36f6:	48 e2       	ldi	r20, 0x28	; 40
    36f8:	be 01       	movw	r22, r28
    36fa:	6f 5b       	subi	r22, 0xBF	; 191
    36fc:	7f 4f       	sbci	r23, 0xFF	; 255
    36fe:	8d e9       	ldi	r24, 0x9D	; 157
    3700:	99 e0       	ldi	r25, 0x09	; 9
    3702:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_tNS_22adafruit_vector_type_tE>

	printEvent(&orientationData);
    3706:	ce 01       	movw	r24, r28
    3708:	01 96       	adiw	r24, 0x01	; 1
    370a:	0d df       	rcall	.-486    	; 0x3526 <_Z10printEventP15sensors_event_t>
	printEvent(&angVelocityData);
    370c:	ce 01       	movw	r24, r28
    370e:	81 96       	adiw	r24, 0x21	; 33
    3710:	0a df       	rcall	.-492    	; 0x3526 <_Z10printEventP15sensors_event_t>
	printEvent(&linearAccelData);
    3712:	ce 01       	movw	r24, r28
    3714:	8f 5b       	subi	r24, 0xBF	; 191
    3716:	9f 4f       	sbci	r25, 0xFF	; 255
    3718:	06 df       	rcall	.-500    	; 0x3526 <_Z10printEventP15sensors_event_t>

	int8_t boardTemp = bno.getTemp();
    371a:	8d e9       	ldi	r24, 0x9D	; 157
    371c:	99 e0       	ldi	r25, 0x09	; 9
    371e:	0e 94 a8 02 	call	0x550	; 0x550 <_ZN15Adafruit_BNO0557getTempEv>
    3722:	18 2f       	mov	r17, r24
	Serial.print("temperature: ");
    3724:	65 e6       	ldi	r22, 0x65	; 101
    3726:	73 e0       	ldi	r23, 0x03	; 3
    3728:	8f e0       	ldi	r24, 0x0F	; 15
    372a:	96 e0       	ldi	r25, 0x06	; 6
    372c:	66 d0       	rcall	.+204    	; 0x37fa <_ZN5Print5printEPKc>
	Serial.println(boardTemp);
    372e:	61 2f       	mov	r22, r17
    3730:	11 0f       	add	r17, r17
    3732:	77 0b       	sbc	r23, r23
    3734:	4a e0       	ldi	r20, 0x0A	; 10
    3736:	50 e0       	ldi	r21, 0x00	; 0
    3738:	8f e0       	ldi	r24, 0x0F	; 15
    373a:	96 e0       	ldi	r25, 0x06	; 6
    373c:	39 d1       	rcall	.+626    	; 0x39b0 <_ZN5Print7printlnEii>
    373e:	2f ef       	ldi	r18, 0xFF	; 255
    3740:	81 ee       	ldi	r24, 0xE1	; 225
    3742:	94 e0       	ldi	r25, 0x04	; 4
    3744:	21 50       	subi	r18, 0x01	; 1
    3746:	80 40       	sbci	r24, 0x00	; 0
    3748:	90 40       	sbci	r25, 0x00	; 0
    374a:	e1 f7       	brne	.-8      	; 0x3744 <_Z4loopv+0x86>
    374c:	00 c0       	rjmp	.+0      	; 0x374e <_Z4loopv+0x90>
    374e:	00 00       	nop


	_delay_ms(BNO055_SAMPLERATE_DELAY_MS);
}
    3750:	c0 5a       	subi	r28, 0xA0	; 160
    3752:	df 4f       	sbci	r29, 0xFF	; 255
    3754:	0f b6       	in	r0, 0x3f	; 63
    3756:	f8 94       	cli
    3758:	de bf       	out	0x3e, r29	; 62
    375a:	0f be       	out	0x3f, r0	; 63
    375c:	cd bf       	out	0x3d, r28	; 61
    375e:	df 91       	pop	r29
    3760:	cf 91       	pop	r28
    3762:	1f 91       	pop	r17
    3764:	08 95       	ret

00003766 <_Z7TestIMUv>:
    3766:	26 e0       	ldi	r18, 0x06	; 6
    3768:	40 e8       	ldi	r20, 0x80	; 128
    376a:	55 e2       	ldi	r21, 0x25	; 37
    376c:	60 e0       	ldi	r22, 0x00	; 0
    376e:	70 e0       	ldi	r23, 0x00	; 0
    3770:	8f e0       	ldi	r24, 0x0F	; 15
    3772:	96 e0       	ldi	r25, 0x06	; 6
    3774:	61 d8       	rcall	.-3902   	; 0x2838 <_ZN14HardwareSerial5beginEmh>

void TestIMU(){
	Serial.begin(9600);
	setup();
    3776:	82 df       	rcall	.-252    	; 0x367c <_Z5setupv>
	
	while(true){
		loop();
    3778:	a2 df       	rcall	.-188    	; 0x36be <_Z4loopv>
    377a:	fe cf       	rjmp	.-4      	; 0x3778 <_Z7TestIMUv+0x12>

0000377c <_GLOBAL__sub_I_bno>:
    377c:	0f 93       	push	r16
	}
    377e:	1f 93       	push	r17
/* Set the delay between fresh samples */
#define BNO055_SAMPLERATE_DELAY_MS 100

// Check I2C device address and correct line below (by default address is 0x29 or 0x28)
//                                   id, address
Adafruit_BNO055 bno = Adafruit_BNO055(55, 0x28);
    3780:	09 e4       	ldi	r16, 0x49	; 73
    3782:	17 e0       	ldi	r17, 0x07	; 7
    3784:	28 e2       	ldi	r18, 0x28	; 40
    3786:	47 e3       	ldi	r20, 0x37	; 55
    3788:	50 e0       	ldi	r21, 0x00	; 0
    378a:	60 e0       	ldi	r22, 0x00	; 0
    378c:	70 e0       	ldi	r23, 0x00	; 0
    378e:	8d e9       	ldi	r24, 0x9D	; 157
    3790:	99 e0       	ldi	r25, 0x09	; 9
    3792:	0e 94 c6 01 	call	0x38c	; 0x38c <_ZN15Adafruit_BNO055C1ElhP7TwoWire>
	setup();
	
	while(true){
		loop();
	}
    3796:	1f 91       	pop	r17
    3798:	0f 91       	pop	r16
    379a:	08 95       	ret

0000379c <_ZN5Print5writeEPKhj>:
uint16_t Print::println(unsigned long num, int base)
{
  uint16_t n = print(num, base);
  n += println();
  return n;
}
    379c:	cf 92       	push	r12
    379e:	df 92       	push	r13
    37a0:	ef 92       	push	r14
    37a2:	ff 92       	push	r15
    37a4:	0f 93       	push	r16
    37a6:	1f 93       	push	r17
    37a8:	cf 93       	push	r28
    37aa:	df 93       	push	r29
    37ac:	41 15       	cp	r20, r1
    37ae:	51 05       	cpc	r21, r1
    37b0:	c1 f0       	breq	.+48     	; 0x37e2 <_ZN5Print5writeEPKhj+0x46>
    37b2:	6a 01       	movw	r12, r20
    37b4:	8c 01       	movw	r16, r24
    37b6:	e6 2e       	mov	r14, r22
    37b8:	f7 2e       	mov	r15, r23
    37ba:	c0 e0       	ldi	r28, 0x00	; 0
    37bc:	d0 e0       	ldi	r29, 0x00	; 0
    37be:	d7 01       	movw	r26, r14
    37c0:	6d 91       	ld	r22, X+
    37c2:	7d 01       	movw	r14, r26
    37c4:	d8 01       	movw	r26, r16
    37c6:	ed 91       	ld	r30, X+
    37c8:	fc 91       	ld	r31, X
    37ca:	01 90       	ld	r0, Z+
    37cc:	f0 81       	ld	r31, Z
    37ce:	e0 2d       	mov	r30, r0
    37d0:	c8 01       	movw	r24, r16
    37d2:	19 95       	eicall
    37d4:	89 2b       	or	r24, r25
    37d6:	39 f0       	breq	.+14     	; 0x37e6 <_ZN5Print5writeEPKhj+0x4a>
    37d8:	21 96       	adiw	r28, 0x01	; 1
    37da:	cc 16       	cp	r12, r28
    37dc:	dd 06       	cpc	r13, r29
    37de:	79 f7       	brne	.-34     	; 0x37be <_ZN5Print5writeEPKhj+0x22>
    37e0:	02 c0       	rjmp	.+4      	; 0x37e6 <_ZN5Print5writeEPKhj+0x4a>
    37e2:	c0 e0       	ldi	r28, 0x00	; 0
    37e4:	d0 e0       	ldi	r29, 0x00	; 0
    37e6:	ce 01       	movw	r24, r28
    37e8:	df 91       	pop	r29
    37ea:	cf 91       	pop	r28
    37ec:	1f 91       	pop	r17
    37ee:	0f 91       	pop	r16
    37f0:	ff 90       	pop	r15
    37f2:	ef 90       	pop	r14
    37f4:	df 90       	pop	r13
    37f6:	cf 90       	pop	r12
    37f8:	08 95       	ret

000037fa <_ZN5Print5printEPKc>:
    37fa:	61 15       	cp	r22, r1
    37fc:	71 05       	cpc	r23, r1
    37fe:	81 f0       	breq	.+32     	; 0x3820 <_ZN5Print5printEPKc+0x26>
    3800:	fb 01       	movw	r30, r22
    3802:	01 90       	ld	r0, Z+
    3804:	00 20       	and	r0, r0
    3806:	e9 f7       	brne	.-6      	; 0x3802 <_ZN5Print5printEPKc+0x8>
    3808:	31 97       	sbiw	r30, 0x01	; 1
    380a:	af 01       	movw	r20, r30
    380c:	46 1b       	sub	r20, r22
    380e:	57 0b       	sbc	r21, r23
    3810:	dc 01       	movw	r26, r24
    3812:	ed 91       	ld	r30, X+
    3814:	fc 91       	ld	r31, X
    3816:	02 80       	ldd	r0, Z+2	; 0x02
    3818:	f3 81       	ldd	r31, Z+3	; 0x03
    381a:	e0 2d       	mov	r30, r0
    381c:	19 95       	eicall
    381e:	08 95       	ret
    3820:	80 e0       	ldi	r24, 0x00	; 0
    3822:	90 e0       	ldi	r25, 0x00	; 0
    3824:	08 95       	ret

00003826 <_ZN5Print5printEc>:
    3826:	dc 01       	movw	r26, r24
    3828:	ed 91       	ld	r30, X+
    382a:	fc 91       	ld	r31, X
    382c:	01 90       	ld	r0, Z+
    382e:	f0 81       	ld	r31, Z
    3830:	e0 2d       	mov	r30, r0
    3832:	19 95       	eicall
    3834:	08 95       	ret

00003836 <_ZN5Print7printlnEv>:
    3836:	dc 01       	movw	r26, r24
    3838:	ed 91       	ld	r30, X+
    383a:	fc 91       	ld	r31, X
    383c:	02 80       	ldd	r0, Z+2	; 0x02
    383e:	f3 81       	ldd	r31, Z+3	; 0x03
    3840:	e0 2d       	mov	r30, r0
    3842:	42 e0       	ldi	r20, 0x02	; 2
    3844:	50 e0       	ldi	r21, 0x00	; 0
    3846:	63 e7       	ldi	r22, 0x73	; 115
    3848:	73 e0       	ldi	r23, 0x03	; 3
    384a:	19 95       	eicall
    384c:	08 95       	ret

0000384e <_ZN5Print7printlnEPKc>:
    384e:	0f 93       	push	r16
    3850:	1f 93       	push	r17
    3852:	cf 93       	push	r28
    3854:	df 93       	push	r29
    3856:	ec 01       	movw	r28, r24
    3858:	d0 df       	rcall	.-96     	; 0x37fa <_ZN5Print5printEPKc>
    385a:	8c 01       	movw	r16, r24
    385c:	ce 01       	movw	r24, r28
    385e:	eb df       	rcall	.-42     	; 0x3836 <_ZN5Print7printlnEv>
    3860:	80 0f       	add	r24, r16
    3862:	91 1f       	adc	r25, r17
    3864:	df 91       	pop	r29
    3866:	cf 91       	pop	r28
    3868:	1f 91       	pop	r17
    386a:	0f 91       	pop	r16
    386c:	08 95       	ret

0000386e <_ZN5Print11printNumberEmh>:
    386e:	8f 92       	push	r8
    3870:	9f 92       	push	r9
    3872:	af 92       	push	r10
    3874:	bf 92       	push	r11
    3876:	ef 92       	push	r14
    3878:	ff 92       	push	r15
    387a:	0f 93       	push	r16
    387c:	1f 93       	push	r17
    387e:	cf 93       	push	r28
    3880:	df 93       	push	r29
    3882:	cd b7       	in	r28, 0x3d	; 61
    3884:	de b7       	in	r29, 0x3e	; 62
    3886:	a1 97       	sbiw	r28, 0x21	; 33
    3888:	0f b6       	in	r0, 0x3f	; 63
    388a:	f8 94       	cli
    388c:	de bf       	out	0x3e, r29	; 62
    388e:	0f be       	out	0x3f, r0	; 63
    3890:	cd bf       	out	0x3d, r28	; 61
    3892:	7c 01       	movw	r14, r24
    3894:	cb 01       	movw	r24, r22
    3896:	ba 01       	movw	r22, r20
    3898:	19 a2       	std	Y+33, r1	; 0x21
    389a:	22 30       	cpi	r18, 0x02	; 2
    389c:	08 f4       	brcc	.+2      	; 0x38a0 <_ZN5Print11printNumberEmh+0x32>
    389e:	2a e0       	ldi	r18, 0x0A	; 10
    38a0:	8e 01       	movw	r16, r28
    38a2:	0f 5d       	subi	r16, 0xDF	; 223
    38a4:	1f 4f       	sbci	r17, 0xFF	; 255
    38a6:	82 2e       	mov	r8, r18
    38a8:	91 2c       	mov	r9, r1
    38aa:	a1 2c       	mov	r10, r1
    38ac:	b1 2c       	mov	r11, r1
    38ae:	a5 01       	movw	r20, r10
    38b0:	94 01       	movw	r18, r8
    38b2:	c2 d3       	rcall	.+1924   	; 0x4038 <__udivmodsi4>
    38b4:	e6 2f       	mov	r30, r22
    38b6:	62 2f       	mov	r22, r18
    38b8:	73 2f       	mov	r23, r19
    38ba:	84 2f       	mov	r24, r20
    38bc:	95 2f       	mov	r25, r21
    38be:	01 50       	subi	r16, 0x01	; 1
    38c0:	11 09       	sbc	r17, r1
    38c2:	ea 30       	cpi	r30, 0x0A	; 10
    38c4:	10 f4       	brcc	.+4      	; 0x38ca <_ZN5Print11printNumberEmh+0x5c>
    38c6:	e0 5d       	subi	r30, 0xD0	; 208
    38c8:	01 c0       	rjmp	.+2      	; 0x38cc <_ZN5Print11printNumberEmh+0x5e>
    38ca:	e9 5c       	subi	r30, 0xC9	; 201
    38cc:	d8 01       	movw	r26, r16
    38ce:	ec 93       	st	X, r30
    38d0:	61 15       	cp	r22, r1
    38d2:	71 05       	cpc	r23, r1
    38d4:	81 05       	cpc	r24, r1
    38d6:	91 05       	cpc	r25, r1
    38d8:	51 f7       	brne	.-44     	; 0x38ae <_ZN5Print11printNumberEmh+0x40>
    38da:	01 15       	cp	r16, r1
    38dc:	11 05       	cpc	r17, r1
    38de:	91 f0       	breq	.+36     	; 0x3904 <_ZN5Print11printNumberEmh+0x96>
    38e0:	f8 01       	movw	r30, r16
    38e2:	01 90       	ld	r0, Z+
    38e4:	00 20       	and	r0, r0
    38e6:	e9 f7       	brne	.-6      	; 0x38e2 <_ZN5Print11printNumberEmh+0x74>
    38e8:	31 97       	sbiw	r30, 0x01	; 1
    38ea:	af 01       	movw	r20, r30
    38ec:	40 1b       	sub	r20, r16
    38ee:	51 0b       	sbc	r21, r17
    38f0:	d7 01       	movw	r26, r14
    38f2:	ed 91       	ld	r30, X+
    38f4:	fc 91       	ld	r31, X
    38f6:	02 80       	ldd	r0, Z+2	; 0x02
    38f8:	f3 81       	ldd	r31, Z+3	; 0x03
    38fa:	e0 2d       	mov	r30, r0
    38fc:	b8 01       	movw	r22, r16
    38fe:	c7 01       	movw	r24, r14
    3900:	19 95       	eicall
    3902:	01 c0       	rjmp	.+2      	; 0x3906 <_ZN5Print11printNumberEmh+0x98>
    3904:	80 e0       	ldi	r24, 0x00	; 0
    3906:	a1 96       	adiw	r28, 0x21	; 33
    3908:	0f b6       	in	r0, 0x3f	; 63
    390a:	f8 94       	cli
    390c:	de bf       	out	0x3e, r29	; 62
    390e:	0f be       	out	0x3f, r0	; 63
    3910:	cd bf       	out	0x3d, r28	; 61
    3912:	df 91       	pop	r29
    3914:	cf 91       	pop	r28
    3916:	1f 91       	pop	r17
    3918:	0f 91       	pop	r16
    391a:	ff 90       	pop	r15
    391c:	ef 90       	pop	r14
    391e:	bf 90       	pop	r11
    3920:	af 90       	pop	r10
    3922:	9f 90       	pop	r9
    3924:	8f 90       	pop	r8
    3926:	08 95       	ret

00003928 <_ZN5Print5printEli>:
    3928:	cf 92       	push	r12
    392a:	df 92       	push	r13
    392c:	ef 92       	push	r14
    392e:	ff 92       	push	r15
    3930:	0f 93       	push	r16
    3932:	1f 93       	push	r17
    3934:	cf 93       	push	r28
    3936:	df 93       	push	r29
    3938:	8c 01       	movw	r16, r24
    393a:	6a 01       	movw	r12, r20
    393c:	7b 01       	movw	r14, r22
    393e:	21 15       	cp	r18, r1
    3940:	31 05       	cpc	r19, r1
    3942:	49 f4       	brne	.+18     	; 0x3956 <_ZN5Print5printEli+0x2e>
    3944:	dc 01       	movw	r26, r24
    3946:	ed 91       	ld	r30, X+
    3948:	fc 91       	ld	r31, X
    394a:	01 90       	ld	r0, Z+
    394c:	f0 81       	ld	r31, Z
    394e:	e0 2d       	mov	r30, r0
    3950:	64 2f       	mov	r22, r20
    3952:	19 95       	eicall
    3954:	1d c0       	rjmp	.+58     	; 0x3990 <_ZN5Print5printEli+0x68>
    3956:	2a 30       	cpi	r18, 0x0A	; 10
    3958:	31 05       	cpc	r19, r1
    395a:	c1 f4       	brne	.+48     	; 0x398c <_ZN5Print5printEli+0x64>
    395c:	77 23       	and	r23, r23
    395e:	94 f4       	brge	.+36     	; 0x3984 <_ZN5Print5printEli+0x5c>
    3960:	6d e2       	ldi	r22, 0x2D	; 45
    3962:	61 df       	rcall	.-318    	; 0x3826 <_ZN5Print5printEc>
    3964:	ec 01       	movw	r28, r24
    3966:	44 27       	eor	r20, r20
    3968:	55 27       	eor	r21, r21
    396a:	ba 01       	movw	r22, r20
    396c:	4c 19       	sub	r20, r12
    396e:	5d 09       	sbc	r21, r13
    3970:	6e 09       	sbc	r22, r14
    3972:	7f 09       	sbc	r23, r15
    3974:	2a e0       	ldi	r18, 0x0A	; 10
    3976:	c8 01       	movw	r24, r16
    3978:	7a df       	rcall	.-268    	; 0x386e <_ZN5Print11printNumberEmh>
    397a:	9e 01       	movw	r18, r28
    397c:	28 0f       	add	r18, r24
    397e:	31 1d       	adc	r19, r1
    3980:	c9 01       	movw	r24, r18
    3982:	06 c0       	rjmp	.+12     	; 0x3990 <_ZN5Print5printEli+0x68>
    3984:	2a e0       	ldi	r18, 0x0A	; 10
    3986:	73 df       	rcall	.-282    	; 0x386e <_ZN5Print11printNumberEmh>
    3988:	90 e0       	ldi	r25, 0x00	; 0
    398a:	02 c0       	rjmp	.+4      	; 0x3990 <_ZN5Print5printEli+0x68>
    398c:	70 df       	rcall	.-288    	; 0x386e <_ZN5Print11printNumberEmh>
    398e:	90 e0       	ldi	r25, 0x00	; 0
    3990:	df 91       	pop	r29
    3992:	cf 91       	pop	r28
    3994:	1f 91       	pop	r17
    3996:	0f 91       	pop	r16
    3998:	ff 90       	pop	r15
    399a:	ef 90       	pop	r14
    399c:	df 90       	pop	r13
    399e:	cf 90       	pop	r12
    39a0:	08 95       	ret

000039a2 <_ZN5Print5printEii>:
    39a2:	9a 01       	movw	r18, r20
    39a4:	ab 01       	movw	r20, r22
    39a6:	77 0f       	add	r23, r23
    39a8:	66 0b       	sbc	r22, r22
    39aa:	77 0b       	sbc	r23, r23
    39ac:	bd cf       	rjmp	.-134    	; 0x3928 <_ZN5Print5printEli>
    39ae:	08 95       	ret

000039b0 <_ZN5Print7printlnEii>:
    39b0:	0f 93       	push	r16
    39b2:	1f 93       	push	r17
    39b4:	cf 93       	push	r28
    39b6:	df 93       	push	r29
    39b8:	ec 01       	movw	r28, r24
    39ba:	f3 df       	rcall	.-26     	; 0x39a2 <_ZN5Print5printEii>
    39bc:	8c 01       	movw	r16, r24
    39be:	ce 01       	movw	r24, r28
    39c0:	3a df       	rcall	.-396    	; 0x3836 <_ZN5Print7printlnEv>
    39c2:	80 0f       	add	r24, r16
    39c4:	91 1f       	adc	r25, r17
    39c6:	df 91       	pop	r29
    39c8:	cf 91       	pop	r28
    39ca:	1f 91       	pop	r17
    39cc:	0f 91       	pop	r16
    39ce:	08 95       	ret

000039d0 <_ZN5Print5printEmi>:
    39d0:	21 15       	cp	r18, r1
    39d2:	31 05       	cpc	r19, r1
    39d4:	49 f4       	brne	.+18     	; 0x39e8 <_ZN5Print5printEmi+0x18>
    39d6:	dc 01       	movw	r26, r24
    39d8:	ed 91       	ld	r30, X+
    39da:	fc 91       	ld	r31, X
    39dc:	01 90       	ld	r0, Z+
    39de:	f0 81       	ld	r31, Z
    39e0:	e0 2d       	mov	r30, r0
    39e2:	64 2f       	mov	r22, r20
    39e4:	19 95       	eicall
    39e6:	08 95       	ret
    39e8:	42 df       	rcall	.-380    	; 0x386e <_ZN5Print11printNumberEmh>
    39ea:	90 e0       	ldi	r25, 0x00	; 0
    39ec:	08 95       	ret

000039ee <_ZN5Print5printEji>:
    39ee:	9a 01       	movw	r18, r20
    39f0:	ab 01       	movw	r20, r22
    39f2:	60 e0       	ldi	r22, 0x00	; 0
    39f4:	70 e0       	ldi	r23, 0x00	; 0
    39f6:	ec cf       	rjmp	.-40     	; 0x39d0 <_ZN5Print5printEmi>
    39f8:	08 95       	ret

000039fa <_ZN5Print10printFloatEdh>:

  return write(str);
}

uint8_t Print::printFloat(double number, uint8_t digits) 
{ 
    39fa:	7f 92       	push	r7
    39fc:	8f 92       	push	r8
    39fe:	9f 92       	push	r9
    3a00:	af 92       	push	r10
    3a02:	bf 92       	push	r11
    3a04:	cf 92       	push	r12
    3a06:	df 92       	push	r13
    3a08:	ef 92       	push	r14
    3a0a:	ff 92       	push	r15
    3a0c:	0f 93       	push	r16
    3a0e:	1f 93       	push	r17
    3a10:	cf 93       	push	r28
    3a12:	df 93       	push	r29
    3a14:	00 d0       	rcall	.+0      	; 0x3a16 <_ZN5Print10printFloatEdh+0x1c>
    3a16:	1f 92       	push	r1
    3a18:	cd b7       	in	r28, 0x3d	; 61
    3a1a:	de b7       	in	r29, 0x3e	; 62
    3a1c:	8c 01       	movw	r16, r24
    3a1e:	4a 01       	movw	r8, r20
    3a20:	5b 01       	movw	r10, r22
    3a22:	72 2e       	mov	r7, r18
  uint16_t n = 0;
  
  if (isnan(number)) return print("nan");
    3a24:	9a 01       	movw	r18, r20
    3a26:	ab 01       	movw	r20, r22
    3a28:	c5 01       	movw	r24, r10
    3a2a:	b4 01       	movw	r22, r8
    3a2c:	01 d3       	rcall	.+1538   	; 0x4030 <__unordsf2>
    3a2e:	88 23       	and	r24, r24
    3a30:	29 f0       	breq	.+10     	; 0x3a3c <_ZN5Print10printFloatEdh+0x42>
    3a32:	66 e7       	ldi	r22, 0x76	; 118
    3a34:	73 e0       	ldi	r23, 0x03	; 3
    3a36:	c8 01       	movw	r24, r16
    3a38:	e0 de       	rcall	.-576    	; 0x37fa <_ZN5Print5printEPKc>
    3a3a:	c1 c0       	rjmp	.+386    	; 0x3bbe <_ZN5Print10printFloatEdh+0x1c4>
  if (isinf(number)) return print("inf");
    3a3c:	75 01       	movw	r14, r10
    3a3e:	64 01       	movw	r12, r8
    3a40:	e8 94       	clt
    3a42:	f7 f8       	bld	r15, 7
    3a44:	2f ef       	ldi	r18, 0xFF	; 255
    3a46:	3f ef       	ldi	r19, 0xFF	; 255
    3a48:	4f e7       	ldi	r20, 0x7F	; 127
    3a4a:	5f e7       	ldi	r21, 0x7F	; 127
    3a4c:	c7 01       	movw	r24, r14
    3a4e:	b6 01       	movw	r22, r12
    3a50:	ef d2       	rcall	.+1502   	; 0x4030 <__unordsf2>
    3a52:	81 11       	cpse	r24, r1
    3a54:	0e c0       	rjmp	.+28     	; 0x3a72 <_ZN5Print10printFloatEdh+0x78>
    3a56:	2f ef       	ldi	r18, 0xFF	; 255
    3a58:	3f ef       	ldi	r19, 0xFF	; 255
    3a5a:	4f e7       	ldi	r20, 0x7F	; 127
    3a5c:	5f e7       	ldi	r21, 0x7F	; 127
    3a5e:	c7 01       	movw	r24, r14
    3a60:	b6 01       	movw	r22, r12
    3a62:	35 d1       	rcall	.+618    	; 0x3cce <__cmpsf2>
    3a64:	18 16       	cp	r1, r24
    3a66:	2c f4       	brge	.+10     	; 0x3a72 <_ZN5Print10printFloatEdh+0x78>
    3a68:	6a e7       	ldi	r22, 0x7A	; 122
    3a6a:	73 e0       	ldi	r23, 0x03	; 3
    3a6c:	c8 01       	movw	r24, r16
    3a6e:	c5 de       	rcall	.-630    	; 0x37fa <_ZN5Print5printEPKc>
    3a70:	a6 c0       	rjmp	.+332    	; 0x3bbe <_ZN5Print10printFloatEdh+0x1c4>
    3a72:	2f ef       	ldi	r18, 0xFF	; 255
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    3a74:	3f ef       	ldi	r19, 0xFF	; 255
    3a76:	4f e7       	ldi	r20, 0x7F	; 127
    3a78:	5f e4       	ldi	r21, 0x4F	; 79
    3a7a:	c5 01       	movw	r24, r10
    3a7c:	b4 01       	movw	r22, r8
    3a7e:	71 d2       	rcall	.+1250   	; 0x3f62 <__gesf2>
    3a80:	18 16       	cp	r1, r24
    3a82:	2c f4       	brge	.+10     	; 0x3a8e <_ZN5Print10printFloatEdh+0x94>
    3a84:	6e e7       	ldi	r22, 0x7E	; 126
    3a86:	73 e0       	ldi	r23, 0x03	; 3
    3a88:	c8 01       	movw	r24, r16
    3a8a:	b7 de       	rcall	.-658    	; 0x37fa <_ZN5Print5printEPKc>
    3a8c:	98 c0       	rjmp	.+304    	; 0x3bbe <_ZN5Print10printFloatEdh+0x1c4>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    3a8e:	2f ef       	ldi	r18, 0xFF	; 255
    3a90:	3f ef       	ldi	r19, 0xFF	; 255
    3a92:	4f e7       	ldi	r20, 0x7F	; 127
    3a94:	5f ec       	ldi	r21, 0xCF	; 207
    3a96:	c5 01       	movw	r24, r10
    3a98:	b4 01       	movw	r22, r8
    3a9a:	19 d1       	rcall	.+562    	; 0x3cce <__cmpsf2>
    3a9c:	88 23       	and	r24, r24
    3a9e:	2c f4       	brge	.+10     	; 0x3aaa <_ZN5Print10printFloatEdh+0xb0>
    3aa0:	6e e7       	ldi	r22, 0x7E	; 126
    3aa2:	73 e0       	ldi	r23, 0x03	; 3
    3aa4:	c8 01       	movw	r24, r16
    3aa6:	a9 de       	rcall	.-686    	; 0x37fa <_ZN5Print5printEPKc>
    3aa8:	8a c0       	rjmp	.+276    	; 0x3bbe <_ZN5Print10printFloatEdh+0x1c4>
  
  // Handle negative numbers
  if (number < 0.0)
    3aaa:	20 e0       	ldi	r18, 0x00	; 0
    3aac:	30 e0       	ldi	r19, 0x00	; 0
    3aae:	a9 01       	movw	r20, r18
    3ab0:	c5 01       	movw	r24, r10
    3ab2:	b4 01       	movw	r22, r8
    3ab4:	0c d1       	rcall	.+536    	; 0x3cce <__cmpsf2>
    3ab6:	88 23       	and	r24, r24
    3ab8:	4c f4       	brge	.+18     	; 0x3acc <_ZN5Print10printFloatEdh+0xd2>
  {
     n += print('-');
    3aba:	6d e2       	ldi	r22, 0x2D	; 45
    3abc:	c8 01       	movw	r24, r16
    3abe:	b3 de       	rcall	.-666    	; 0x3826 <_ZN5Print5printEc>
    3ac0:	7c 01       	movw	r14, r24
    3ac2:	b7 fa       	bst	r11, 7
     number = -number;
    3ac4:	b0 94       	com	r11
    3ac6:	b7 f8       	bld	r11, 7
    3ac8:	b0 94       	com	r11
    3aca:	02 c0       	rjmp	.+4      	; 0x3ad0 <_ZN5Print10printFloatEdh+0xd6>
    3acc:	e1 2c       	mov	r14, r1
  return write(str);
}

uint8_t Print::printFloat(double number, uint8_t digits) 
{ 
  uint16_t n = 0;
    3ace:	f1 2c       	mov	r15, r1
    3ad0:	77 20       	and	r7, r7
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    3ad2:	09 f4       	brne	.+2      	; 0x3ad6 <_ZN5Print10printFloatEdh+0xdc>
    3ad4:	61 c0       	rjmp	.+194    	; 0x3b98 <_ZN5Print10printFloatEdh+0x19e>
    3ad6:	19 82       	std	Y+1, r1	; 0x01
    3ad8:	60 e0       	ldi	r22, 0x00	; 0
    3ada:	70 e0       	ldi	r23, 0x00	; 0
    3adc:	80 e0       	ldi	r24, 0x00	; 0
    3ade:	9f e3       	ldi	r25, 0x3F	; 63
    rounding /= 10.0;
    3ae0:	20 e0       	ldi	r18, 0x00	; 0
    3ae2:	30 e0       	ldi	r19, 0x00	; 0
    3ae4:	40 e2       	ldi	r20, 0x20	; 32
    3ae6:	51 e4       	ldi	r21, 0x41	; 65
    3ae8:	f6 d0       	rcall	.+492    	; 0x3cd6 <__divsf3>
    3aea:	29 81       	ldd	r18, Y+1	; 0x01
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    3aec:	2f 5f       	subi	r18, 0xFF	; 255
    3aee:	29 83       	std	Y+1, r18	; 0x01
    3af0:	72 12       	cpse	r7, r18
    3af2:	f6 cf       	rjmp	.-20     	; 0x3ae0 <_ZN5Print10printFloatEdh+0xe6>
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    3af4:	26 c0       	rjmp	.+76     	; 0x3b42 <_ZN5Print10printFloatEdh+0x148>
    3af6:	20 e0       	ldi	r18, 0x00	; 0
    3af8:	30 e0       	ldi	r19, 0x00	; 0
    3afa:	40 e2       	ldi	r20, 0x20	; 32
    3afc:	51 e4       	ldi	r21, 0x41	; 65
    3afe:	c5 01       	movw	r24, r10
    3b00:	b4 01       	movw	r22, r8
    3b02:	33 d2       	rcall	.+1126   	; 0x3f6a <__mulsf3>
    3b04:	4b 01       	movw	r8, r22
    unsigned int toPrint = (unsigned int)(remainder);
    3b06:	5c 01       	movw	r10, r24
    3b08:	4e d1       	rcall	.+668    	; 0x3da6 <__fixunssfsi>
    3b0a:	6b 01       	movw	r12, r22
    n += print(toPrint);
    3b0c:	7c 01       	movw	r14, r24
    3b0e:	4a e0       	ldi	r20, 0x0A	; 10
    3b10:	50 e0       	ldi	r21, 0x00	; 0
    3b12:	c8 01       	movw	r24, r16
    3b14:	6c df       	rcall	.-296    	; 0x39ee <_ZN5Print5printEji>
    3b16:	29 81       	ldd	r18, Y+1	; 0x01
    3b18:	3a 81       	ldd	r19, Y+2	; 0x02
    3b1a:	28 0f       	add	r18, r24
    3b1c:	39 1f       	adc	r19, r25
    3b1e:	3a 83       	std	Y+2, r19	; 0x02
    remainder -= toPrint; 
    3b20:	29 83       	std	Y+1, r18	; 0x01
    3b22:	b6 01       	movw	r22, r12
    3b24:	80 e0       	ldi	r24, 0x00	; 0
    3b26:	90 e0       	ldi	r25, 0x00	; 0
    3b28:	6a d1       	rcall	.+724    	; 0x3dfe <__floatunsisf>
    3b2a:	9b 01       	movw	r18, r22
    3b2c:	ac 01       	movw	r20, r24
    3b2e:	c5 01       	movw	r24, r10
    3b30:	b4 01       	movw	r22, r8
    3b32:	68 d0       	rcall	.+208    	; 0x3c04 <__subsf3>
    3b34:	4b 01       	movw	r8, r22
    3b36:	5c 01       	movw	r10, r24
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    3b38:	7a 94       	dec	r7
    3b3a:	71 10       	cpse	r7, r1
    unsigned int toPrint = (unsigned int)(remainder);
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
    3b3c:	dc cf       	rjmp	.-72     	; 0x3af6 <_ZN5Print10printFloatEdh+0xfc>
    3b3e:	89 81       	ldd	r24, Y+1	; 0x01
  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    rounding /= 10.0;
  
  number += rounding;
    3b40:	3e c0       	rjmp	.+124    	; 0x3bbe <_ZN5Print10printFloatEdh+0x1c4>
    3b42:	9b 01       	movw	r18, r22
    3b44:	ac 01       	movw	r20, r24
    3b46:	c5 01       	movw	r24, r10
    3b48:	b4 01       	movw	r22, r8
    3b4a:	5d d0       	rcall	.+186    	; 0x3c06 <__addsf3>
    3b4c:	4b 01       	movw	r8, r22

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    3b4e:	5c 01       	movw	r10, r24
    3b50:	2a d1       	rcall	.+596    	; 0x3da6 <__fixunssfsi>
    3b52:	69 83       	std	Y+1, r22	; 0x01
    3b54:	7a 83       	std	Y+2, r23	; 0x02
    3b56:	8b 83       	std	Y+3, r24	; 0x03
  double remainder = number - (double)int_part;
    3b58:	9c 83       	std	Y+4, r25	; 0x04
    3b5a:	51 d1       	rcall	.+674    	; 0x3dfe <__floatunsisf>
    3b5c:	9b 01       	movw	r18, r22
    3b5e:	ac 01       	movw	r20, r24
    3b60:	c5 01       	movw	r24, r10
    3b62:	b4 01       	movw	r22, r8
    3b64:	4f d0       	rcall	.+158    	; 0x3c04 <__subsf3>
    3b66:	4b 01       	movw	r8, r22
    3b68:	5c 01       	movw	r10, r24
  n += print(int_part);
    3b6a:	2a e0       	ldi	r18, 0x0A	; 10
    3b6c:	30 e0       	ldi	r19, 0x00	; 0
    3b6e:	49 81       	ldd	r20, Y+1	; 0x01
    3b70:	5a 81       	ldd	r21, Y+2	; 0x02
    3b72:	6b 81       	ldd	r22, Y+3	; 0x03
    3b74:	7c 81       	ldd	r23, Y+4	; 0x04
    3b76:	c8 01       	movw	r24, r16
    3b78:	2b df       	rcall	.-426    	; 0x39d0 <_ZN5Print5printEmi>
    3b7a:	9a 83       	std	Y+2, r25	; 0x02

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    3b7c:	89 83       	std	Y+1, r24	; 0x01
    3b7e:	6e e2       	ldi	r22, 0x2E	; 46
    3b80:	c8 01       	movw	r24, r16
    3b82:	51 de       	rcall	.-862    	; 0x3826 <_ZN5Print5printEc>
    3b84:	29 81       	ldd	r18, Y+1	; 0x01
    3b86:	3a 81       	ldd	r19, Y+2	; 0x02
    3b88:	82 0f       	add	r24, r18
    3b8a:	93 1f       	adc	r25, r19
    3b8c:	9c 01       	movw	r18, r24
    3b8e:	2e 0d       	add	r18, r14
    3b90:	3f 1d       	adc	r19, r15
    3b92:	3a 83       	std	Y+2, r19	; 0x02
    3b94:	29 83       	std	Y+1, r18	; 0x01
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    3b96:	af cf       	rjmp	.-162    	; 0x3af6 <_ZN5Print10printFloatEdh+0xfc>
    3b98:	20 e0       	ldi	r18, 0x00	; 0
    3b9a:	30 e0       	ldi	r19, 0x00	; 0
    3b9c:	40 e0       	ldi	r20, 0x00	; 0
    3b9e:	5f e3       	ldi	r21, 0x3F	; 63
    3ba0:	c5 01       	movw	r24, r10
    3ba2:	b4 01       	movw	r22, r8
    3ba4:	30 d0       	rcall	.+96     	; 0x3c06 <__addsf3>
    3ba6:	ff d0       	rcall	.+510    	; 0x3da6 <__fixunssfsi>
    3ba8:	ab 01       	movw	r20, r22
    3baa:	bc 01       	movw	r22, r24
    3bac:	2a e0       	ldi	r18, 0x0A	; 10
    3bae:	30 e0       	ldi	r19, 0x00	; 0
    3bb0:	c8 01       	movw	r24, r16
    3bb2:	0e df       	rcall	.-484    	; 0x39d0 <_ZN5Print5printEmi>
    3bb4:	8e 0d       	add	r24, r14
    3bb6:	9f 1d       	adc	r25, r15
    3bb8:	9a 83       	std	Y+2, r25	; 0x02
    3bba:	89 83       	std	Y+1, r24	; 0x01
    3bbc:	c0 cf       	rjmp	.-128    	; 0x3b3e <_ZN5Print10printFloatEdh+0x144>
    3bbe:	0f 90       	pop	r0
    3bc0:	0f 90       	pop	r0
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    3bc2:	0f 90       	pop	r0
    3bc4:	0f 90       	pop	r0
    3bc6:	df 91       	pop	r29
    3bc8:	cf 91       	pop	r28
    3bca:	1f 91       	pop	r17
    3bcc:	0f 91       	pop	r16
    3bce:	ff 90       	pop	r15
    3bd0:	ef 90       	pop	r14
    3bd2:	df 90       	pop	r13
    3bd4:	cf 90       	pop	r12
    3bd6:	bf 90       	pop	r11
    3bd8:	af 90       	pop	r10
    3bda:	9f 90       	pop	r9
    3bdc:	8f 90       	pop	r8
    3bde:	7f 90       	pop	r7
    3be0:	08 95       	ret

00003be2 <_ZN5Print5printEdi>:
    3be2:	0b df       	rcall	.-490    	; 0x39fa <_ZN5Print10printFloatEdh>
    3be4:	90 e0       	ldi	r25, 0x00	; 0
}

uint16_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
}
    3be6:	08 95       	ret

00003be8 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

uint16_t Print::println(double num, int digits)
{
    3be8:	1f 93       	push	r17
    3bea:	cf 93       	push	r28
    3bec:	df 93       	push	r29
    3bee:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

uint16_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    3bf0:	04 df       	rcall	.-504    	; 0x39fa <_ZN5Print10printFloatEdh>
    3bf2:	18 2f       	mov	r17, r24
}

uint16_t Print::println(double num, int digits)
{
  uint16_t n = print(num, digits);
  n += println();
    3bf4:	ce 01       	movw	r24, r28
    3bf6:	1f de       	rcall	.-962    	; 0x3836 <_ZN5Print7printlnEv>
  return n;
}
    3bf8:	81 0f       	add	r24, r17
    3bfa:	91 1d       	adc	r25, r1
    3bfc:	df 91       	pop	r29
    3bfe:	cf 91       	pop	r28
    3c00:	1f 91       	pop	r17
    3c02:	08 95       	ret

00003c04 <__subsf3>:
    3c04:	50 58       	subi	r21, 0x80	; 128

00003c06 <__addsf3>:
    3c06:	bb 27       	eor	r27, r27
    3c08:	aa 27       	eor	r26, r26
    3c0a:	0e d0       	rcall	.+28     	; 0x3c28 <__addsf3x>
    3c0c:	70 c1       	rjmp	.+736    	; 0x3eee <__fp_round>
    3c0e:	61 d1       	rcall	.+706    	; 0x3ed2 <__fp_pscA>
    3c10:	30 f0       	brcs	.+12     	; 0x3c1e <__addsf3+0x18>
    3c12:	66 d1       	rcall	.+716    	; 0x3ee0 <__fp_pscB>
    3c14:	20 f0       	brcs	.+8      	; 0x3c1e <__addsf3+0x18>
    3c16:	31 f4       	brne	.+12     	; 0x3c24 <__addsf3+0x1e>
    3c18:	9f 3f       	cpi	r25, 0xFF	; 255
    3c1a:	11 f4       	brne	.+4      	; 0x3c20 <__addsf3+0x1a>
    3c1c:	1e f4       	brtc	.+6      	; 0x3c24 <__addsf3+0x1e>
    3c1e:	56 c1       	rjmp	.+684    	; 0x3ecc <__fp_nan>
    3c20:	0e f4       	brtc	.+2      	; 0x3c24 <__addsf3+0x1e>
    3c22:	e0 95       	com	r30
    3c24:	e7 fb       	bst	r30, 7
    3c26:	4c c1       	rjmp	.+664    	; 0x3ec0 <__fp_inf>

00003c28 <__addsf3x>:
    3c28:	e9 2f       	mov	r30, r25
    3c2a:	72 d1       	rcall	.+740    	; 0x3f10 <__fp_split3>
    3c2c:	80 f3       	brcs	.-32     	; 0x3c0e <__addsf3+0x8>
    3c2e:	ba 17       	cp	r27, r26
    3c30:	62 07       	cpc	r22, r18
    3c32:	73 07       	cpc	r23, r19
    3c34:	84 07       	cpc	r24, r20
    3c36:	95 07       	cpc	r25, r21
    3c38:	18 f0       	brcs	.+6      	; 0x3c40 <__addsf3x+0x18>
    3c3a:	71 f4       	brne	.+28     	; 0x3c58 <__addsf3x+0x30>
    3c3c:	9e f5       	brtc	.+102    	; 0x3ca4 <__addsf3x+0x7c>
    3c3e:	8a c1       	rjmp	.+788    	; 0x3f54 <__fp_zero>
    3c40:	0e f4       	brtc	.+2      	; 0x3c44 <__addsf3x+0x1c>
    3c42:	e0 95       	com	r30
    3c44:	0b 2e       	mov	r0, r27
    3c46:	ba 2f       	mov	r27, r26
    3c48:	a0 2d       	mov	r26, r0
    3c4a:	0b 01       	movw	r0, r22
    3c4c:	b9 01       	movw	r22, r18
    3c4e:	90 01       	movw	r18, r0
    3c50:	0c 01       	movw	r0, r24
    3c52:	ca 01       	movw	r24, r20
    3c54:	a0 01       	movw	r20, r0
    3c56:	11 24       	eor	r1, r1
    3c58:	ff 27       	eor	r31, r31
    3c5a:	59 1b       	sub	r21, r25
    3c5c:	99 f0       	breq	.+38     	; 0x3c84 <__addsf3x+0x5c>
    3c5e:	59 3f       	cpi	r21, 0xF9	; 249
    3c60:	50 f4       	brcc	.+20     	; 0x3c76 <__addsf3x+0x4e>
    3c62:	50 3e       	cpi	r21, 0xE0	; 224
    3c64:	68 f1       	brcs	.+90     	; 0x3cc0 <__addsf3x+0x98>
    3c66:	1a 16       	cp	r1, r26
    3c68:	f0 40       	sbci	r31, 0x00	; 0
    3c6a:	a2 2f       	mov	r26, r18
    3c6c:	23 2f       	mov	r18, r19
    3c6e:	34 2f       	mov	r19, r20
    3c70:	44 27       	eor	r20, r20
    3c72:	58 5f       	subi	r21, 0xF8	; 248
    3c74:	f3 cf       	rjmp	.-26     	; 0x3c5c <__addsf3x+0x34>
    3c76:	46 95       	lsr	r20
    3c78:	37 95       	ror	r19
    3c7a:	27 95       	ror	r18
    3c7c:	a7 95       	ror	r26
    3c7e:	f0 40       	sbci	r31, 0x00	; 0
    3c80:	53 95       	inc	r21
    3c82:	c9 f7       	brne	.-14     	; 0x3c76 <__addsf3x+0x4e>
    3c84:	7e f4       	brtc	.+30     	; 0x3ca4 <__addsf3x+0x7c>
    3c86:	1f 16       	cp	r1, r31
    3c88:	ba 0b       	sbc	r27, r26
    3c8a:	62 0b       	sbc	r22, r18
    3c8c:	73 0b       	sbc	r23, r19
    3c8e:	84 0b       	sbc	r24, r20
    3c90:	ba f0       	brmi	.+46     	; 0x3cc0 <__addsf3x+0x98>
    3c92:	91 50       	subi	r25, 0x01	; 1
    3c94:	a1 f0       	breq	.+40     	; 0x3cbe <__addsf3x+0x96>
    3c96:	ff 0f       	add	r31, r31
    3c98:	bb 1f       	adc	r27, r27
    3c9a:	66 1f       	adc	r22, r22
    3c9c:	77 1f       	adc	r23, r23
    3c9e:	88 1f       	adc	r24, r24
    3ca0:	c2 f7       	brpl	.-16     	; 0x3c92 <__addsf3x+0x6a>
    3ca2:	0e c0       	rjmp	.+28     	; 0x3cc0 <__addsf3x+0x98>
    3ca4:	ba 0f       	add	r27, r26
    3ca6:	62 1f       	adc	r22, r18
    3ca8:	73 1f       	adc	r23, r19
    3caa:	84 1f       	adc	r24, r20
    3cac:	48 f4       	brcc	.+18     	; 0x3cc0 <__addsf3x+0x98>
    3cae:	87 95       	ror	r24
    3cb0:	77 95       	ror	r23
    3cb2:	67 95       	ror	r22
    3cb4:	b7 95       	ror	r27
    3cb6:	f7 95       	ror	r31
    3cb8:	9e 3f       	cpi	r25, 0xFE	; 254
    3cba:	08 f0       	brcs	.+2      	; 0x3cbe <__addsf3x+0x96>
    3cbc:	b3 cf       	rjmp	.-154    	; 0x3c24 <__addsf3+0x1e>
    3cbe:	93 95       	inc	r25
    3cc0:	88 0f       	add	r24, r24
    3cc2:	08 f0       	brcs	.+2      	; 0x3cc6 <__addsf3x+0x9e>
    3cc4:	99 27       	eor	r25, r25
    3cc6:	ee 0f       	add	r30, r30
    3cc8:	97 95       	ror	r25
    3cca:	87 95       	ror	r24
    3ccc:	08 95       	ret

00003cce <__cmpsf2>:
    3cce:	d4 d0       	rcall	.+424    	; 0x3e78 <__fp_cmp>
    3cd0:	08 f4       	brcc	.+2      	; 0x3cd4 <__cmpsf2+0x6>
    3cd2:	81 e0       	ldi	r24, 0x01	; 1
    3cd4:	08 95       	ret

00003cd6 <__divsf3>:
    3cd6:	0c d0       	rcall	.+24     	; 0x3cf0 <__divsf3x>
    3cd8:	0a c1       	rjmp	.+532    	; 0x3eee <__fp_round>
    3cda:	02 d1       	rcall	.+516    	; 0x3ee0 <__fp_pscB>
    3cdc:	40 f0       	brcs	.+16     	; 0x3cee <__divsf3+0x18>
    3cde:	f9 d0       	rcall	.+498    	; 0x3ed2 <__fp_pscA>
    3ce0:	30 f0       	brcs	.+12     	; 0x3cee <__divsf3+0x18>
    3ce2:	21 f4       	brne	.+8      	; 0x3cec <__divsf3+0x16>
    3ce4:	5f 3f       	cpi	r21, 0xFF	; 255
    3ce6:	19 f0       	breq	.+6      	; 0x3cee <__divsf3+0x18>
    3ce8:	eb c0       	rjmp	.+470    	; 0x3ec0 <__fp_inf>
    3cea:	51 11       	cpse	r21, r1
    3cec:	34 c1       	rjmp	.+616    	; 0x3f56 <__fp_szero>
    3cee:	ee c0       	rjmp	.+476    	; 0x3ecc <__fp_nan>

00003cf0 <__divsf3x>:
    3cf0:	0f d1       	rcall	.+542    	; 0x3f10 <__fp_split3>
    3cf2:	98 f3       	brcs	.-26     	; 0x3cda <__divsf3+0x4>

00003cf4 <__divsf3_pse>:
    3cf4:	99 23       	and	r25, r25
    3cf6:	c9 f3       	breq	.-14     	; 0x3cea <__divsf3+0x14>
    3cf8:	55 23       	and	r21, r21
    3cfa:	b1 f3       	breq	.-20     	; 0x3ce8 <__divsf3+0x12>
    3cfc:	95 1b       	sub	r25, r21
    3cfe:	55 0b       	sbc	r21, r21
    3d00:	bb 27       	eor	r27, r27
    3d02:	aa 27       	eor	r26, r26
    3d04:	62 17       	cp	r22, r18
    3d06:	73 07       	cpc	r23, r19
    3d08:	84 07       	cpc	r24, r20
    3d0a:	38 f0       	brcs	.+14     	; 0x3d1a <__divsf3_pse+0x26>
    3d0c:	9f 5f       	subi	r25, 0xFF	; 255
    3d0e:	5f 4f       	sbci	r21, 0xFF	; 255
    3d10:	22 0f       	add	r18, r18
    3d12:	33 1f       	adc	r19, r19
    3d14:	44 1f       	adc	r20, r20
    3d16:	aa 1f       	adc	r26, r26
    3d18:	a9 f3       	breq	.-22     	; 0x3d04 <__divsf3_pse+0x10>
    3d1a:	33 d0       	rcall	.+102    	; 0x3d82 <__divsf3_pse+0x8e>
    3d1c:	0e 2e       	mov	r0, r30
    3d1e:	3a f0       	brmi	.+14     	; 0x3d2e <__divsf3_pse+0x3a>
    3d20:	e0 e8       	ldi	r30, 0x80	; 128
    3d22:	30 d0       	rcall	.+96     	; 0x3d84 <__divsf3_pse+0x90>
    3d24:	91 50       	subi	r25, 0x01	; 1
    3d26:	50 40       	sbci	r21, 0x00	; 0
    3d28:	e6 95       	lsr	r30
    3d2a:	00 1c       	adc	r0, r0
    3d2c:	ca f7       	brpl	.-14     	; 0x3d20 <__divsf3_pse+0x2c>
    3d2e:	29 d0       	rcall	.+82     	; 0x3d82 <__divsf3_pse+0x8e>
    3d30:	fe 2f       	mov	r31, r30
    3d32:	27 d0       	rcall	.+78     	; 0x3d82 <__divsf3_pse+0x8e>
    3d34:	66 0f       	add	r22, r22
    3d36:	77 1f       	adc	r23, r23
    3d38:	88 1f       	adc	r24, r24
    3d3a:	bb 1f       	adc	r27, r27
    3d3c:	26 17       	cp	r18, r22
    3d3e:	37 07       	cpc	r19, r23
    3d40:	48 07       	cpc	r20, r24
    3d42:	ab 07       	cpc	r26, r27
    3d44:	b0 e8       	ldi	r27, 0x80	; 128
    3d46:	09 f0       	breq	.+2      	; 0x3d4a <__divsf3_pse+0x56>
    3d48:	bb 0b       	sbc	r27, r27
    3d4a:	80 2d       	mov	r24, r0
    3d4c:	bf 01       	movw	r22, r30
    3d4e:	ff 27       	eor	r31, r31
    3d50:	93 58       	subi	r25, 0x83	; 131
    3d52:	5f 4f       	sbci	r21, 0xFF	; 255
    3d54:	2a f0       	brmi	.+10     	; 0x3d60 <__divsf3_pse+0x6c>
    3d56:	9e 3f       	cpi	r25, 0xFE	; 254
    3d58:	51 05       	cpc	r21, r1
    3d5a:	68 f0       	brcs	.+26     	; 0x3d76 <__divsf3_pse+0x82>
    3d5c:	b1 c0       	rjmp	.+354    	; 0x3ec0 <__fp_inf>
    3d5e:	fb c0       	rjmp	.+502    	; 0x3f56 <__fp_szero>
    3d60:	5f 3f       	cpi	r21, 0xFF	; 255
    3d62:	ec f3       	brlt	.-6      	; 0x3d5e <__divsf3_pse+0x6a>
    3d64:	98 3e       	cpi	r25, 0xE8	; 232
    3d66:	dc f3       	brlt	.-10     	; 0x3d5e <__divsf3_pse+0x6a>
    3d68:	86 95       	lsr	r24
    3d6a:	77 95       	ror	r23
    3d6c:	67 95       	ror	r22
    3d6e:	b7 95       	ror	r27
    3d70:	f7 95       	ror	r31
    3d72:	9f 5f       	subi	r25, 0xFF	; 255
    3d74:	c9 f7       	brne	.-14     	; 0x3d68 <__divsf3_pse+0x74>
    3d76:	88 0f       	add	r24, r24
    3d78:	91 1d       	adc	r25, r1
    3d7a:	96 95       	lsr	r25
    3d7c:	87 95       	ror	r24
    3d7e:	97 f9       	bld	r25, 7
    3d80:	08 95       	ret
    3d82:	e1 e0       	ldi	r30, 0x01	; 1
    3d84:	66 0f       	add	r22, r22
    3d86:	77 1f       	adc	r23, r23
    3d88:	88 1f       	adc	r24, r24
    3d8a:	bb 1f       	adc	r27, r27
    3d8c:	62 17       	cp	r22, r18
    3d8e:	73 07       	cpc	r23, r19
    3d90:	84 07       	cpc	r24, r20
    3d92:	ba 07       	cpc	r27, r26
    3d94:	20 f0       	brcs	.+8      	; 0x3d9e <__divsf3_pse+0xaa>
    3d96:	62 1b       	sub	r22, r18
    3d98:	73 0b       	sbc	r23, r19
    3d9a:	84 0b       	sbc	r24, r20
    3d9c:	ba 0b       	sbc	r27, r26
    3d9e:	ee 1f       	adc	r30, r30
    3da0:	88 f7       	brcc	.-30     	; 0x3d84 <__divsf3_pse+0x90>
    3da2:	e0 95       	com	r30
    3da4:	08 95       	ret

00003da6 <__fixunssfsi>:
    3da6:	bc d0       	rcall	.+376    	; 0x3f20 <__fp_splitA>
    3da8:	88 f0       	brcs	.+34     	; 0x3dcc <__fixunssfsi+0x26>
    3daa:	9f 57       	subi	r25, 0x7F	; 127
    3dac:	90 f0       	brcs	.+36     	; 0x3dd2 <__fixunssfsi+0x2c>
    3dae:	b9 2f       	mov	r27, r25
    3db0:	99 27       	eor	r25, r25
    3db2:	b7 51       	subi	r27, 0x17	; 23
    3db4:	a0 f0       	brcs	.+40     	; 0x3dde <__fixunssfsi+0x38>
    3db6:	d1 f0       	breq	.+52     	; 0x3dec <__fixunssfsi+0x46>
    3db8:	66 0f       	add	r22, r22
    3dba:	77 1f       	adc	r23, r23
    3dbc:	88 1f       	adc	r24, r24
    3dbe:	99 1f       	adc	r25, r25
    3dc0:	1a f0       	brmi	.+6      	; 0x3dc8 <__fixunssfsi+0x22>
    3dc2:	ba 95       	dec	r27
    3dc4:	c9 f7       	brne	.-14     	; 0x3db8 <__fixunssfsi+0x12>
    3dc6:	12 c0       	rjmp	.+36     	; 0x3dec <__fixunssfsi+0x46>
    3dc8:	b1 30       	cpi	r27, 0x01	; 1
    3dca:	81 f0       	breq	.+32     	; 0x3dec <__fixunssfsi+0x46>
    3dcc:	c3 d0       	rcall	.+390    	; 0x3f54 <__fp_zero>
    3dce:	b1 e0       	ldi	r27, 0x01	; 1
    3dd0:	08 95       	ret
    3dd2:	c0 c0       	rjmp	.+384    	; 0x3f54 <__fp_zero>
    3dd4:	67 2f       	mov	r22, r23
    3dd6:	78 2f       	mov	r23, r24
    3dd8:	88 27       	eor	r24, r24
    3dda:	b8 5f       	subi	r27, 0xF8	; 248
    3ddc:	39 f0       	breq	.+14     	; 0x3dec <__fixunssfsi+0x46>
    3dde:	b9 3f       	cpi	r27, 0xF9	; 249
    3de0:	cc f3       	brlt	.-14     	; 0x3dd4 <__fixunssfsi+0x2e>
    3de2:	86 95       	lsr	r24
    3de4:	77 95       	ror	r23
    3de6:	67 95       	ror	r22
    3de8:	b3 95       	inc	r27
    3dea:	d9 f7       	brne	.-10     	; 0x3de2 <__fixunssfsi+0x3c>
    3dec:	3e f4       	brtc	.+14     	; 0x3dfc <__fixunssfsi+0x56>
    3dee:	90 95       	com	r25
    3df0:	80 95       	com	r24
    3df2:	70 95       	com	r23
    3df4:	61 95       	neg	r22
    3df6:	7f 4f       	sbci	r23, 0xFF	; 255
    3df8:	8f 4f       	sbci	r24, 0xFF	; 255
    3dfa:	9f 4f       	sbci	r25, 0xFF	; 255
    3dfc:	08 95       	ret

00003dfe <__floatunsisf>:
    3dfe:	e8 94       	clt
    3e00:	09 c0       	rjmp	.+18     	; 0x3e14 <__floatsisf+0x12>

00003e02 <__floatsisf>:
    3e02:	97 fb       	bst	r25, 7
    3e04:	3e f4       	brtc	.+14     	; 0x3e14 <__floatsisf+0x12>
    3e06:	90 95       	com	r25
    3e08:	80 95       	com	r24
    3e0a:	70 95       	com	r23
    3e0c:	61 95       	neg	r22
    3e0e:	7f 4f       	sbci	r23, 0xFF	; 255
    3e10:	8f 4f       	sbci	r24, 0xFF	; 255
    3e12:	9f 4f       	sbci	r25, 0xFF	; 255
    3e14:	99 23       	and	r25, r25
    3e16:	a9 f0       	breq	.+42     	; 0x3e42 <__floatsisf+0x40>
    3e18:	f9 2f       	mov	r31, r25
    3e1a:	96 e9       	ldi	r25, 0x96	; 150
    3e1c:	bb 27       	eor	r27, r27
    3e1e:	93 95       	inc	r25
    3e20:	f6 95       	lsr	r31
    3e22:	87 95       	ror	r24
    3e24:	77 95       	ror	r23
    3e26:	67 95       	ror	r22
    3e28:	b7 95       	ror	r27
    3e2a:	f1 11       	cpse	r31, r1
    3e2c:	f8 cf       	rjmp	.-16     	; 0x3e1e <__floatsisf+0x1c>
    3e2e:	fa f4       	brpl	.+62     	; 0x3e6e <__floatsisf+0x6c>
    3e30:	bb 0f       	add	r27, r27
    3e32:	11 f4       	brne	.+4      	; 0x3e38 <__floatsisf+0x36>
    3e34:	60 ff       	sbrs	r22, 0
    3e36:	1b c0       	rjmp	.+54     	; 0x3e6e <__floatsisf+0x6c>
    3e38:	6f 5f       	subi	r22, 0xFF	; 255
    3e3a:	7f 4f       	sbci	r23, 0xFF	; 255
    3e3c:	8f 4f       	sbci	r24, 0xFF	; 255
    3e3e:	9f 4f       	sbci	r25, 0xFF	; 255
    3e40:	16 c0       	rjmp	.+44     	; 0x3e6e <__floatsisf+0x6c>
    3e42:	88 23       	and	r24, r24
    3e44:	11 f0       	breq	.+4      	; 0x3e4a <__floatsisf+0x48>
    3e46:	96 e9       	ldi	r25, 0x96	; 150
    3e48:	11 c0       	rjmp	.+34     	; 0x3e6c <__floatsisf+0x6a>
    3e4a:	77 23       	and	r23, r23
    3e4c:	21 f0       	breq	.+8      	; 0x3e56 <__floatsisf+0x54>
    3e4e:	9e e8       	ldi	r25, 0x8E	; 142
    3e50:	87 2f       	mov	r24, r23
    3e52:	76 2f       	mov	r23, r22
    3e54:	05 c0       	rjmp	.+10     	; 0x3e60 <__floatsisf+0x5e>
    3e56:	66 23       	and	r22, r22
    3e58:	71 f0       	breq	.+28     	; 0x3e76 <__floatsisf+0x74>
    3e5a:	96 e8       	ldi	r25, 0x86	; 134
    3e5c:	86 2f       	mov	r24, r22
    3e5e:	70 e0       	ldi	r23, 0x00	; 0
    3e60:	60 e0       	ldi	r22, 0x00	; 0
    3e62:	2a f0       	brmi	.+10     	; 0x3e6e <__floatsisf+0x6c>
    3e64:	9a 95       	dec	r25
    3e66:	66 0f       	add	r22, r22
    3e68:	77 1f       	adc	r23, r23
    3e6a:	88 1f       	adc	r24, r24
    3e6c:	da f7       	brpl	.-10     	; 0x3e64 <__floatsisf+0x62>
    3e6e:	88 0f       	add	r24, r24
    3e70:	96 95       	lsr	r25
    3e72:	87 95       	ror	r24
    3e74:	97 f9       	bld	r25, 7
    3e76:	08 95       	ret

00003e78 <__fp_cmp>:
    3e78:	99 0f       	add	r25, r25
    3e7a:	00 08       	sbc	r0, r0
    3e7c:	55 0f       	add	r21, r21
    3e7e:	aa 0b       	sbc	r26, r26
    3e80:	e0 e8       	ldi	r30, 0x80	; 128
    3e82:	fe ef       	ldi	r31, 0xFE	; 254
    3e84:	16 16       	cp	r1, r22
    3e86:	17 06       	cpc	r1, r23
    3e88:	e8 07       	cpc	r30, r24
    3e8a:	f9 07       	cpc	r31, r25
    3e8c:	c0 f0       	brcs	.+48     	; 0x3ebe <__fp_cmp+0x46>
    3e8e:	12 16       	cp	r1, r18
    3e90:	13 06       	cpc	r1, r19
    3e92:	e4 07       	cpc	r30, r20
    3e94:	f5 07       	cpc	r31, r21
    3e96:	98 f0       	brcs	.+38     	; 0x3ebe <__fp_cmp+0x46>
    3e98:	62 1b       	sub	r22, r18
    3e9a:	73 0b       	sbc	r23, r19
    3e9c:	84 0b       	sbc	r24, r20
    3e9e:	95 0b       	sbc	r25, r21
    3ea0:	39 f4       	brne	.+14     	; 0x3eb0 <__fp_cmp+0x38>
    3ea2:	0a 26       	eor	r0, r26
    3ea4:	61 f0       	breq	.+24     	; 0x3ebe <__fp_cmp+0x46>
    3ea6:	23 2b       	or	r18, r19
    3ea8:	24 2b       	or	r18, r20
    3eaa:	25 2b       	or	r18, r21
    3eac:	21 f4       	brne	.+8      	; 0x3eb6 <__fp_cmp+0x3e>
    3eae:	08 95       	ret
    3eb0:	0a 26       	eor	r0, r26
    3eb2:	09 f4       	brne	.+2      	; 0x3eb6 <__fp_cmp+0x3e>
    3eb4:	a1 40       	sbci	r26, 0x01	; 1
    3eb6:	a6 95       	lsr	r26
    3eb8:	8f ef       	ldi	r24, 0xFF	; 255
    3eba:	81 1d       	adc	r24, r1
    3ebc:	81 1d       	adc	r24, r1
    3ebe:	08 95       	ret

00003ec0 <__fp_inf>:
    3ec0:	97 f9       	bld	r25, 7
    3ec2:	9f 67       	ori	r25, 0x7F	; 127
    3ec4:	80 e8       	ldi	r24, 0x80	; 128
    3ec6:	70 e0       	ldi	r23, 0x00	; 0
    3ec8:	60 e0       	ldi	r22, 0x00	; 0
    3eca:	08 95       	ret

00003ecc <__fp_nan>:
    3ecc:	9f ef       	ldi	r25, 0xFF	; 255
    3ece:	80 ec       	ldi	r24, 0xC0	; 192
    3ed0:	08 95       	ret

00003ed2 <__fp_pscA>:
    3ed2:	00 24       	eor	r0, r0
    3ed4:	0a 94       	dec	r0
    3ed6:	16 16       	cp	r1, r22
    3ed8:	17 06       	cpc	r1, r23
    3eda:	18 06       	cpc	r1, r24
    3edc:	09 06       	cpc	r0, r25
    3ede:	08 95       	ret

00003ee0 <__fp_pscB>:
    3ee0:	00 24       	eor	r0, r0
    3ee2:	0a 94       	dec	r0
    3ee4:	12 16       	cp	r1, r18
    3ee6:	13 06       	cpc	r1, r19
    3ee8:	14 06       	cpc	r1, r20
    3eea:	05 06       	cpc	r0, r21
    3eec:	08 95       	ret

00003eee <__fp_round>:
    3eee:	09 2e       	mov	r0, r25
    3ef0:	03 94       	inc	r0
    3ef2:	00 0c       	add	r0, r0
    3ef4:	11 f4       	brne	.+4      	; 0x3efa <__fp_round+0xc>
    3ef6:	88 23       	and	r24, r24
    3ef8:	52 f0       	brmi	.+20     	; 0x3f0e <__fp_round+0x20>
    3efa:	bb 0f       	add	r27, r27
    3efc:	40 f4       	brcc	.+16     	; 0x3f0e <__fp_round+0x20>
    3efe:	bf 2b       	or	r27, r31
    3f00:	11 f4       	brne	.+4      	; 0x3f06 <__fp_round+0x18>
    3f02:	60 ff       	sbrs	r22, 0
    3f04:	04 c0       	rjmp	.+8      	; 0x3f0e <__fp_round+0x20>
    3f06:	6f 5f       	subi	r22, 0xFF	; 255
    3f08:	7f 4f       	sbci	r23, 0xFF	; 255
    3f0a:	8f 4f       	sbci	r24, 0xFF	; 255
    3f0c:	9f 4f       	sbci	r25, 0xFF	; 255
    3f0e:	08 95       	ret

00003f10 <__fp_split3>:
    3f10:	57 fd       	sbrc	r21, 7
    3f12:	90 58       	subi	r25, 0x80	; 128
    3f14:	44 0f       	add	r20, r20
    3f16:	55 1f       	adc	r21, r21
    3f18:	59 f0       	breq	.+22     	; 0x3f30 <__fp_splitA+0x10>
    3f1a:	5f 3f       	cpi	r21, 0xFF	; 255
    3f1c:	71 f0       	breq	.+28     	; 0x3f3a <__fp_splitA+0x1a>
    3f1e:	47 95       	ror	r20

00003f20 <__fp_splitA>:
    3f20:	88 0f       	add	r24, r24
    3f22:	97 fb       	bst	r25, 7
    3f24:	99 1f       	adc	r25, r25
    3f26:	61 f0       	breq	.+24     	; 0x3f40 <__fp_splitA+0x20>
    3f28:	9f 3f       	cpi	r25, 0xFF	; 255
    3f2a:	79 f0       	breq	.+30     	; 0x3f4a <__fp_splitA+0x2a>
    3f2c:	87 95       	ror	r24
    3f2e:	08 95       	ret
    3f30:	12 16       	cp	r1, r18
    3f32:	13 06       	cpc	r1, r19
    3f34:	14 06       	cpc	r1, r20
    3f36:	55 1f       	adc	r21, r21
    3f38:	f2 cf       	rjmp	.-28     	; 0x3f1e <__fp_split3+0xe>
    3f3a:	46 95       	lsr	r20
    3f3c:	f1 df       	rcall	.-30     	; 0x3f20 <__fp_splitA>
    3f3e:	08 c0       	rjmp	.+16     	; 0x3f50 <__fp_splitA+0x30>
    3f40:	16 16       	cp	r1, r22
    3f42:	17 06       	cpc	r1, r23
    3f44:	18 06       	cpc	r1, r24
    3f46:	99 1f       	adc	r25, r25
    3f48:	f1 cf       	rjmp	.-30     	; 0x3f2c <__fp_splitA+0xc>
    3f4a:	86 95       	lsr	r24
    3f4c:	71 05       	cpc	r23, r1
    3f4e:	61 05       	cpc	r22, r1
    3f50:	08 94       	sec
    3f52:	08 95       	ret

00003f54 <__fp_zero>:
    3f54:	e8 94       	clt

00003f56 <__fp_szero>:
    3f56:	bb 27       	eor	r27, r27
    3f58:	66 27       	eor	r22, r22
    3f5a:	77 27       	eor	r23, r23
    3f5c:	cb 01       	movw	r24, r22
    3f5e:	97 f9       	bld	r25, 7
    3f60:	08 95       	ret

00003f62 <__gesf2>:
    3f62:	8a df       	rcall	.-236    	; 0x3e78 <__fp_cmp>
    3f64:	08 f4       	brcc	.+2      	; 0x3f68 <__gesf2+0x6>
    3f66:	8f ef       	ldi	r24, 0xFF	; 255
    3f68:	08 95       	ret

00003f6a <__mulsf3>:
    3f6a:	0b d0       	rcall	.+22     	; 0x3f82 <__mulsf3x>
    3f6c:	c0 cf       	rjmp	.-128    	; 0x3eee <__fp_round>
    3f6e:	b1 df       	rcall	.-158    	; 0x3ed2 <__fp_pscA>
    3f70:	28 f0       	brcs	.+10     	; 0x3f7c <__mulsf3+0x12>
    3f72:	b6 df       	rcall	.-148    	; 0x3ee0 <__fp_pscB>
    3f74:	18 f0       	brcs	.+6      	; 0x3f7c <__mulsf3+0x12>
    3f76:	95 23       	and	r25, r21
    3f78:	09 f0       	breq	.+2      	; 0x3f7c <__mulsf3+0x12>
    3f7a:	a2 cf       	rjmp	.-188    	; 0x3ec0 <__fp_inf>
    3f7c:	a7 cf       	rjmp	.-178    	; 0x3ecc <__fp_nan>
    3f7e:	11 24       	eor	r1, r1
    3f80:	ea cf       	rjmp	.-44     	; 0x3f56 <__fp_szero>

00003f82 <__mulsf3x>:
    3f82:	c6 df       	rcall	.-116    	; 0x3f10 <__fp_split3>
    3f84:	a0 f3       	brcs	.-24     	; 0x3f6e <__mulsf3+0x4>

00003f86 <__mulsf3_pse>:
    3f86:	95 9f       	mul	r25, r21
    3f88:	d1 f3       	breq	.-12     	; 0x3f7e <__mulsf3+0x14>
    3f8a:	95 0f       	add	r25, r21
    3f8c:	50 e0       	ldi	r21, 0x00	; 0
    3f8e:	55 1f       	adc	r21, r21
    3f90:	62 9f       	mul	r22, r18
    3f92:	f0 01       	movw	r30, r0
    3f94:	72 9f       	mul	r23, r18
    3f96:	bb 27       	eor	r27, r27
    3f98:	f0 0d       	add	r31, r0
    3f9a:	b1 1d       	adc	r27, r1
    3f9c:	63 9f       	mul	r22, r19
    3f9e:	aa 27       	eor	r26, r26
    3fa0:	f0 0d       	add	r31, r0
    3fa2:	b1 1d       	adc	r27, r1
    3fa4:	aa 1f       	adc	r26, r26
    3fa6:	64 9f       	mul	r22, r20
    3fa8:	66 27       	eor	r22, r22
    3faa:	b0 0d       	add	r27, r0
    3fac:	a1 1d       	adc	r26, r1
    3fae:	66 1f       	adc	r22, r22
    3fb0:	82 9f       	mul	r24, r18
    3fb2:	22 27       	eor	r18, r18
    3fb4:	b0 0d       	add	r27, r0
    3fb6:	a1 1d       	adc	r26, r1
    3fb8:	62 1f       	adc	r22, r18
    3fba:	73 9f       	mul	r23, r19
    3fbc:	b0 0d       	add	r27, r0
    3fbe:	a1 1d       	adc	r26, r1
    3fc0:	62 1f       	adc	r22, r18
    3fc2:	83 9f       	mul	r24, r19
    3fc4:	a0 0d       	add	r26, r0
    3fc6:	61 1d       	adc	r22, r1
    3fc8:	22 1f       	adc	r18, r18
    3fca:	74 9f       	mul	r23, r20
    3fcc:	33 27       	eor	r19, r19
    3fce:	a0 0d       	add	r26, r0
    3fd0:	61 1d       	adc	r22, r1
    3fd2:	23 1f       	adc	r18, r19
    3fd4:	84 9f       	mul	r24, r20
    3fd6:	60 0d       	add	r22, r0
    3fd8:	21 1d       	adc	r18, r1
    3fda:	82 2f       	mov	r24, r18
    3fdc:	76 2f       	mov	r23, r22
    3fde:	6a 2f       	mov	r22, r26
    3fe0:	11 24       	eor	r1, r1
    3fe2:	9f 57       	subi	r25, 0x7F	; 127
    3fe4:	50 40       	sbci	r21, 0x00	; 0
    3fe6:	8a f0       	brmi	.+34     	; 0x400a <__mulsf3_pse+0x84>
    3fe8:	e1 f0       	breq	.+56     	; 0x4022 <__mulsf3_pse+0x9c>
    3fea:	88 23       	and	r24, r24
    3fec:	4a f0       	brmi	.+18     	; 0x4000 <__mulsf3_pse+0x7a>
    3fee:	ee 0f       	add	r30, r30
    3ff0:	ff 1f       	adc	r31, r31
    3ff2:	bb 1f       	adc	r27, r27
    3ff4:	66 1f       	adc	r22, r22
    3ff6:	77 1f       	adc	r23, r23
    3ff8:	88 1f       	adc	r24, r24
    3ffa:	91 50       	subi	r25, 0x01	; 1
    3ffc:	50 40       	sbci	r21, 0x00	; 0
    3ffe:	a9 f7       	brne	.-22     	; 0x3fea <__mulsf3_pse+0x64>
    4000:	9e 3f       	cpi	r25, 0xFE	; 254
    4002:	51 05       	cpc	r21, r1
    4004:	70 f0       	brcs	.+28     	; 0x4022 <__mulsf3_pse+0x9c>
    4006:	5c cf       	rjmp	.-328    	; 0x3ec0 <__fp_inf>
    4008:	a6 cf       	rjmp	.-180    	; 0x3f56 <__fp_szero>
    400a:	5f 3f       	cpi	r21, 0xFF	; 255
    400c:	ec f3       	brlt	.-6      	; 0x4008 <__mulsf3_pse+0x82>
    400e:	98 3e       	cpi	r25, 0xE8	; 232
    4010:	dc f3       	brlt	.-10     	; 0x4008 <__mulsf3_pse+0x82>
    4012:	86 95       	lsr	r24
    4014:	77 95       	ror	r23
    4016:	67 95       	ror	r22
    4018:	b7 95       	ror	r27
    401a:	f7 95       	ror	r31
    401c:	e7 95       	ror	r30
    401e:	9f 5f       	subi	r25, 0xFF	; 255
    4020:	c1 f7       	brne	.-16     	; 0x4012 <__mulsf3_pse+0x8c>
    4022:	fe 2b       	or	r31, r30
    4024:	88 0f       	add	r24, r24
    4026:	91 1d       	adc	r25, r1
    4028:	96 95       	lsr	r25
    402a:	87 95       	ror	r24
    402c:	97 f9       	bld	r25, 7
    402e:	08 95       	ret

00004030 <__unordsf2>:
    4030:	23 df       	rcall	.-442    	; 0x3e78 <__fp_cmp>
    4032:	88 0b       	sbc	r24, r24
    4034:	99 0b       	sbc	r25, r25
    4036:	08 95       	ret

00004038 <__udivmodsi4>:
    4038:	a1 e2       	ldi	r26, 0x21	; 33
    403a:	1a 2e       	mov	r1, r26
    403c:	aa 1b       	sub	r26, r26
    403e:	bb 1b       	sub	r27, r27
    4040:	fd 01       	movw	r30, r26
    4042:	0d c0       	rjmp	.+26     	; 0x405e <__udivmodsi4_ep>

00004044 <__udivmodsi4_loop>:
    4044:	aa 1f       	adc	r26, r26
    4046:	bb 1f       	adc	r27, r27
    4048:	ee 1f       	adc	r30, r30
    404a:	ff 1f       	adc	r31, r31
    404c:	a2 17       	cp	r26, r18
    404e:	b3 07       	cpc	r27, r19
    4050:	e4 07       	cpc	r30, r20
    4052:	f5 07       	cpc	r31, r21
    4054:	20 f0       	brcs	.+8      	; 0x405e <__udivmodsi4_ep>
    4056:	a2 1b       	sub	r26, r18
    4058:	b3 0b       	sbc	r27, r19
    405a:	e4 0b       	sbc	r30, r20
    405c:	f5 0b       	sbc	r31, r21

0000405e <__udivmodsi4_ep>:
    405e:	66 1f       	adc	r22, r22
    4060:	77 1f       	adc	r23, r23
    4062:	88 1f       	adc	r24, r24
    4064:	99 1f       	adc	r25, r25
    4066:	1a 94       	dec	r1
    4068:	69 f7       	brne	.-38     	; 0x4044 <__udivmodsi4_loop>
    406a:	60 95       	com	r22
    406c:	70 95       	com	r23
    406e:	80 95       	com	r24
    4070:	90 95       	com	r25
    4072:	9b 01       	movw	r18, r22
    4074:	ac 01       	movw	r20, r24
    4076:	bd 01       	movw	r22, r26
    4078:	cf 01       	movw	r24, r30
    407a:	08 95       	ret

0000407c <__tablejump2__>:
    407c:	ee 0f       	add	r30, r30
    407e:	ff 1f       	adc	r31, r31
    4080:	88 1f       	adc	r24, r24
    4082:	8b bf       	out	0x3b, r24	; 59
    4084:	07 90       	elpm	r0, Z+
    4086:	f6 91       	elpm	r31, Z
    4088:	e0 2d       	mov	r30, r0
    408a:	19 94       	eijmp

0000408c <__umulhisi3>:
    408c:	a2 9f       	mul	r26, r18
    408e:	b0 01       	movw	r22, r0
    4090:	b3 9f       	mul	r27, r19
    4092:	c0 01       	movw	r24, r0
    4094:	a3 9f       	mul	r26, r19
    4096:	70 0d       	add	r23, r0
    4098:	81 1d       	adc	r24, r1
    409a:	11 24       	eor	r1, r1
    409c:	91 1d       	adc	r25, r1
    409e:	b2 9f       	mul	r27, r18
    40a0:	70 0d       	add	r23, r0
    40a2:	81 1d       	adc	r24, r1
    40a4:	11 24       	eor	r1, r1
    40a6:	91 1d       	adc	r25, r1
    40a8:	08 95       	ret

000040aa <__muluhisi3>:
    40aa:	f0 df       	rcall	.-32     	; 0x408c <__umulhisi3>
    40ac:	a5 9f       	mul	r26, r21
    40ae:	90 0d       	add	r25, r0
    40b0:	b4 9f       	mul	r27, r20
    40b2:	90 0d       	add	r25, r0
    40b4:	a4 9f       	mul	r26, r20
    40b6:	80 0d       	add	r24, r0
    40b8:	91 1d       	adc	r25, r1
    40ba:	11 24       	eor	r1, r1
    40bc:	08 95       	ret

000040be <memcpy_P>:
    40be:	fb 01       	movw	r30, r22
    40c0:	dc 01       	movw	r26, r24
    40c2:	02 c0       	rjmp	.+4      	; 0x40c8 <memcpy_P+0xa>
    40c4:	05 90       	lpm	r0, Z+
    40c6:	0d 92       	st	X+, r0
    40c8:	41 50       	subi	r20, 0x01	; 1
    40ca:	50 40       	sbci	r21, 0x00	; 0
    40cc:	d8 f7       	brcc	.-10     	; 0x40c4 <memcpy_P+0x6>
    40ce:	08 95       	ret

000040d0 <memcmp>:
    40d0:	fb 01       	movw	r30, r22
    40d2:	dc 01       	movw	r26, r24
    40d4:	04 c0       	rjmp	.+8      	; 0x40de <memcmp+0xe>
    40d6:	8d 91       	ld	r24, X+
    40d8:	01 90       	ld	r0, Z+
    40da:	80 19       	sub	r24, r0
    40dc:	21 f4       	brne	.+8      	; 0x40e6 <memcmp+0x16>
    40de:	41 50       	subi	r20, 0x01	; 1
    40e0:	50 40       	sbci	r21, 0x00	; 0
    40e2:	c8 f7       	brcc	.-14     	; 0x40d6 <memcmp+0x6>
    40e4:	88 1b       	sub	r24, r24
    40e6:	99 0b       	sbc	r25, r25
    40e8:	08 95       	ret

000040ea <strncpy>:
    40ea:	fb 01       	movw	r30, r22
    40ec:	dc 01       	movw	r26, r24
    40ee:	41 50       	subi	r20, 0x01	; 1
    40f0:	50 40       	sbci	r21, 0x00	; 0
    40f2:	48 f0       	brcs	.+18     	; 0x4106 <strncpy+0x1c>
    40f4:	01 90       	ld	r0, Z+
    40f6:	0d 92       	st	X+, r0
    40f8:	00 20       	and	r0, r0
    40fa:	c9 f7       	brne	.-14     	; 0x40ee <strncpy+0x4>
    40fc:	01 c0       	rjmp	.+2      	; 0x4100 <strncpy+0x16>
    40fe:	1d 92       	st	X+, r1
    4100:	41 50       	subi	r20, 0x01	; 1
    4102:	50 40       	sbci	r21, 0x00	; 0
    4104:	e0 f7       	brcc	.-8      	; 0x40fe <strncpy+0x14>
    4106:	08 95       	ret

00004108 <_exit>:
    4108:	f8 94       	cli

0000410a <__stop_program>:
    410a:	ff cf       	rjmp	.-2      	; 0x410a <__stop_program>
