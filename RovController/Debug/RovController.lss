
RovController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000188  00800200  00004afc  00004b90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004afc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000006e2  00800388  00800388  00004d18  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004d18  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004d48  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000af8  00000000  00000000  00004d88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00018fb1  00000000  00000000  00005880  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005c62  00000000  00000000  0001e831  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000692d  00000000  00000000  00024493  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000227c  00000000  00000000  0002adc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00006998  00000000  00000000  0002d03c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c16f  00000000  00000000  000339d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a28  00000000  00000000  0003fb43  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4f c1       	rjmp	.+670    	; 0x2a0 <__ctors_end>
       2:	00 00       	nop
       4:	7e c1       	rjmp	.+764    	; 0x302 <__bad_interrupt>
       6:	00 00       	nop
       8:	7c c1       	rjmp	.+760    	; 0x302 <__bad_interrupt>
       a:	00 00       	nop
       c:	7a c1       	rjmp	.+756    	; 0x302 <__bad_interrupt>
       e:	00 00       	nop
      10:	78 c1       	rjmp	.+752    	; 0x302 <__bad_interrupt>
      12:	00 00       	nop
      14:	76 c1       	rjmp	.+748    	; 0x302 <__bad_interrupt>
      16:	00 00       	nop
      18:	74 c1       	rjmp	.+744    	; 0x302 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	72 c1       	rjmp	.+740    	; 0x302 <__bad_interrupt>
      1e:	00 00       	nop
      20:	70 c1       	rjmp	.+736    	; 0x302 <__bad_interrupt>
      22:	00 00       	nop
      24:	6e c1       	rjmp	.+732    	; 0x302 <__bad_interrupt>
      26:	00 00       	nop
      28:	6c c1       	rjmp	.+728    	; 0x302 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	6a c1       	rjmp	.+724    	; 0x302 <__bad_interrupt>
      2e:	00 00       	nop
      30:	68 c1       	rjmp	.+720    	; 0x302 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 91 1a 	jmp	0x3522	; 0x3522 <__vector_13>
      38:	64 c1       	rjmp	.+712    	; 0x302 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	62 c1       	rjmp	.+708    	; 0x302 <__bad_interrupt>
      3e:	00 00       	nop
      40:	60 c1       	rjmp	.+704    	; 0x302 <__bad_interrupt>
      42:	00 00       	nop
      44:	5e c1       	rjmp	.+700    	; 0x302 <__bad_interrupt>
      46:	00 00       	nop
      48:	5c c1       	rjmp	.+696    	; 0x302 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	5a c1       	rjmp	.+692    	; 0x302 <__bad_interrupt>
      4e:	00 00       	nop
      50:	58 c1       	rjmp	.+688    	; 0x302 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 68 1a 	jmp	0x34d0	; 0x34d0 <__vector_21>
      58:	54 c1       	rjmp	.+680    	; 0x302 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	52 c1       	rjmp	.+676    	; 0x302 <__bad_interrupt>
      5e:	00 00       	nop
      60:	50 c1       	rjmp	.+672    	; 0x302 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 3e 16 	jmp	0x2c7c	; 0x2c7c <__vector_25>
      68:	0c 94 7a 16 	jmp	0x2cf4	; 0x2cf4 <__vector_26>
      6c:	4a c1       	rjmp	.+660    	; 0x302 <__bad_interrupt>
      6e:	00 00       	nop
      70:	48 c1       	rjmp	.+656    	; 0x302 <__bad_interrupt>
      72:	00 00       	nop
      74:	46 c1       	rjmp	.+652    	; 0x302 <__bad_interrupt>
      76:	00 00       	nop
      78:	44 c1       	rjmp	.+648    	; 0x302 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	42 c1       	rjmp	.+644    	; 0x302 <__bad_interrupt>
      7e:	00 00       	nop
      80:	40 c1       	rjmp	.+640    	; 0x302 <__bad_interrupt>
      82:	00 00       	nop
      84:	3e c1       	rjmp	.+636    	; 0x302 <__bad_interrupt>
      86:	00 00       	nop
      88:	3c c1       	rjmp	.+632    	; 0x302 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	3a c1       	rjmp	.+628    	; 0x302 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 c6 16 	jmp	0x2d8c	; 0x2d8c <__vector_36>
      94:	0c 94 02 17 	jmp	0x2e04	; 0x2e04 <__vector_37>
      98:	34 c1       	rjmp	.+616    	; 0x302 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 fa 1b 	jmp	0x37f4	; 0x37f4 <__vector_39>
      a0:	30 c1       	rjmp	.+608    	; 0x302 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	2e c1       	rjmp	.+604    	; 0x302 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	2c c1       	rjmp	.+600    	; 0x302 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	2a c1       	rjmp	.+596    	; 0x302 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	28 c1       	rjmp	.+592    	; 0x302 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	26 c1       	rjmp	.+588    	; 0x302 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	24 c1       	rjmp	.+584    	; 0x302 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	22 c1       	rjmp	.+580    	; 0x302 <__bad_interrupt>
      be:	00 00       	nop
      c0:	20 c1       	rjmp	.+576    	; 0x302 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	1e c1       	rjmp	.+572    	; 0x302 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	1c c1       	rjmp	.+568    	; 0x302 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 4e 17 	jmp	0x2e9c	; 0x2e9c <__vector_51>
      d0:	0c 94 8a 17 	jmp	0x2f14	; 0x2f14 <__vector_52>
      d4:	16 c1       	rjmp	.+556    	; 0x302 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 d6 17 	jmp	0x2fac	; 0x2fac <__vector_54>
      dc:	0c 94 12 18 	jmp	0x3024	; 0x3024 <__vector_55>
      e0:	10 c1       	rjmp	.+544    	; 0x302 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	01 1d       	adc	r16, r1
      e6:	04 1d       	adc	r16, r4
      e8:	04 1d       	adc	r16, r4
      ea:	04 1d       	adc	r16, r4
      ec:	04 1d       	adc	r16, r4
      ee:	04 1d       	adc	r16, r4
      f0:	04 1d       	adc	r16, r4
      f2:	04 1d       	adc	r16, r4
      f4:	1c 1c       	adc	r1, r12
      f6:	04 1d       	adc	r16, r4
      f8:	04 1d       	adc	r16, r4
      fa:	04 1d       	adc	r16, r4
      fc:	04 1d       	adc	r16, r4
      fe:	04 1d       	adc	r16, r4
     100:	04 1d       	adc	r16, r4
     102:	04 1d       	adc	r16, r4
     104:	1c 1c       	adc	r1, r12
     106:	04 1d       	adc	r16, r4
     108:	04 1d       	adc	r16, r4
     10a:	04 1d       	adc	r16, r4
     10c:	04 1d       	adc	r16, r4
     10e:	04 1d       	adc	r16, r4
     110:	04 1d       	adc	r16, r4
     112:	04 1d       	adc	r16, r4
     114:	24 1c       	adc	r2, r4
     116:	04 1d       	adc	r16, r4
     118:	04 1d       	adc	r16, r4
     11a:	04 1d       	adc	r16, r4
     11c:	04 1d       	adc	r16, r4
     11e:	04 1d       	adc	r16, r4
     120:	04 1d       	adc	r16, r4
     122:	04 1d       	adc	r16, r4
     124:	49 1c       	adc	r4, r9
     126:	04 1d       	adc	r16, r4
     128:	04 1d       	adc	r16, r4
     12a:	04 1d       	adc	r16, r4
     12c:	04 1d       	adc	r16, r4
     12e:	04 1d       	adc	r16, r4
     130:	04 1d       	adc	r16, r4
     132:	04 1d       	adc	r16, r4
     134:	24 1c       	adc	r2, r4
     136:	04 1d       	adc	r16, r4
     138:	04 1d       	adc	r16, r4
     13a:	04 1d       	adc	r16, r4
     13c:	04 1d       	adc	r16, r4
     13e:	04 1d       	adc	r16, r4
     140:	04 1d       	adc	r16, r4
     142:	04 1d       	adc	r16, r4
     144:	4e 1c       	adc	r4, r14
     146:	04 1d       	adc	r16, r4
     148:	04 1d       	adc	r16, r4
     14a:	04 1d       	adc	r16, r4
     14c:	04 1d       	adc	r16, r4
     14e:	04 1d       	adc	r16, r4
     150:	04 1d       	adc	r16, r4
     152:	04 1d       	adc	r16, r4
     154:	53 1c       	adc	r5, r3
     156:	04 1d       	adc	r16, r4
     158:	04 1d       	adc	r16, r4
     15a:	04 1d       	adc	r16, r4
     15c:	04 1d       	adc	r16, r4
     15e:	04 1d       	adc	r16, r4
     160:	04 1d       	adc	r16, r4
     162:	04 1d       	adc	r16, r4
     164:	64 1c       	adc	r6, r4
     166:	04 1d       	adc	r16, r4
     168:	04 1d       	adc	r16, r4
     16a:	04 1d       	adc	r16, r4
     16c:	04 1d       	adc	r16, r4
     16e:	04 1d       	adc	r16, r4
     170:	04 1d       	adc	r16, r4
     172:	04 1d       	adc	r16, r4
     174:	8d 1c       	adc	r8, r13
     176:	04 1d       	adc	r16, r4
     178:	04 1d       	adc	r16, r4
     17a:	04 1d       	adc	r16, r4
     17c:	04 1d       	adc	r16, r4
     17e:	04 1d       	adc	r16, r4
     180:	04 1d       	adc	r16, r4
     182:	04 1d       	adc	r16, r4
     184:	58 1c       	adc	r5, r8
     186:	04 1d       	adc	r16, r4
     188:	04 1d       	adc	r16, r4
     18a:	04 1d       	adc	r16, r4
     18c:	04 1d       	adc	r16, r4
     18e:	04 1d       	adc	r16, r4
     190:	04 1d       	adc	r16, r4
     192:	04 1d       	adc	r16, r4
     194:	72 1c       	adc	r7, r2
     196:	04 1d       	adc	r16, r4
     198:	04 1d       	adc	r16, r4
     19a:	04 1d       	adc	r16, r4
     19c:	04 1d       	adc	r16, r4
     19e:	04 1d       	adc	r16, r4
     1a0:	04 1d       	adc	r16, r4
     1a2:	04 1d       	adc	r16, r4
     1a4:	8f 1c       	adc	r8, r15
     1a6:	04 1d       	adc	r16, r4
     1a8:	04 1d       	adc	r16, r4
     1aa:	04 1d       	adc	r16, r4
     1ac:	04 1d       	adc	r16, r4
     1ae:	04 1d       	adc	r16, r4
     1b0:	04 1d       	adc	r16, r4
     1b2:	04 1d       	adc	r16, r4
     1b4:	8f 1c       	adc	r8, r15
     1b6:	04 1d       	adc	r16, r4
     1b8:	04 1d       	adc	r16, r4
     1ba:	04 1d       	adc	r16, r4
     1bc:	04 1d       	adc	r16, r4
     1be:	04 1d       	adc	r16, r4
     1c0:	04 1d       	adc	r16, r4
     1c2:	04 1d       	adc	r16, r4
     1c4:	8f 1c       	adc	r8, r15
     1c6:	04 1d       	adc	r16, r4
     1c8:	04 1d       	adc	r16, r4
     1ca:	04 1d       	adc	r16, r4
     1cc:	04 1d       	adc	r16, r4
     1ce:	04 1d       	adc	r16, r4
     1d0:	04 1d       	adc	r16, r4
     1d2:	04 1d       	adc	r16, r4
     1d4:	8f 1c       	adc	r8, r15
     1d6:	04 1d       	adc	r16, r4
     1d8:	04 1d       	adc	r16, r4
     1da:	04 1d       	adc	r16, r4
     1dc:	04 1d       	adc	r16, r4
     1de:	04 1d       	adc	r16, r4
     1e0:	04 1d       	adc	r16, r4
     1e2:	04 1d       	adc	r16, r4
     1e4:	98 1c       	adc	r9, r8
     1e6:	04 1d       	adc	r16, r4
     1e8:	04 1d       	adc	r16, r4
     1ea:	04 1d       	adc	r16, r4
     1ec:	04 1d       	adc	r16, r4
     1ee:	04 1d       	adc	r16, r4
     1f0:	04 1d       	adc	r16, r4
     1f2:	04 1d       	adc	r16, r4
     1f4:	c8 1c       	adc	r12, r8
     1f6:	04 1d       	adc	r16, r4
     1f8:	04 1d       	adc	r16, r4
     1fa:	04 1d       	adc	r16, r4
     1fc:	04 1d       	adc	r16, r4
     1fe:	04 1d       	adc	r16, r4
     200:	04 1d       	adc	r16, r4
     202:	04 1d       	adc	r16, r4
     204:	98 1c       	adc	r9, r8
     206:	04 1d       	adc	r16, r4
     208:	04 1d       	adc	r16, r4
     20a:	04 1d       	adc	r16, r4
     20c:	04 1d       	adc	r16, r4
     20e:	04 1d       	adc	r16, r4
     210:	04 1d       	adc	r16, r4
     212:	04 1d       	adc	r16, r4
     214:	c8 1c       	adc	r12, r8
     216:	04 1d       	adc	r16, r4
     218:	04 1d       	adc	r16, r4
     21a:	04 1d       	adc	r16, r4
     21c:	04 1d       	adc	r16, r4
     21e:	04 1d       	adc	r16, r4
     220:	04 1d       	adc	r16, r4
     222:	04 1d       	adc	r16, r4
     224:	b0 1c       	adc	r11, r0
     226:	04 1d       	adc	r16, r4
     228:	04 1d       	adc	r16, r4
     22a:	04 1d       	adc	r16, r4
     22c:	04 1d       	adc	r16, r4
     22e:	04 1d       	adc	r16, r4
     230:	04 1d       	adc	r16, r4
     232:	04 1d       	adc	r16, r4
     234:	cc 1c       	adc	r12, r12
     236:	04 1d       	adc	r16, r4
     238:	04 1d       	adc	r16, r4
     23a:	04 1d       	adc	r16, r4
     23c:	04 1d       	adc	r16, r4
     23e:	04 1d       	adc	r16, r4
     240:	04 1d       	adc	r16, r4
     242:	04 1d       	adc	r16, r4
     244:	cc 1c       	adc	r12, r12
     246:	04 1d       	adc	r16, r4
     248:	04 1d       	adc	r16, r4
     24a:	04 1d       	adc	r16, r4
     24c:	04 1d       	adc	r16, r4
     24e:	04 1d       	adc	r16, r4
     250:	04 1d       	adc	r16, r4
     252:	04 1d       	adc	r16, r4
     254:	e1 1c       	adc	r14, r1
     256:	04 1d       	adc	r16, r4
     258:	04 1d       	adc	r16, r4
     25a:	04 1d       	adc	r16, r4
     25c:	04 1d       	adc	r16, r4
     25e:	04 1d       	adc	r16, r4
     260:	04 1d       	adc	r16, r4
     262:	04 1d       	adc	r16, r4
     264:	fb 1c       	adc	r15, r11
     266:	04 1d       	adc	r16, r4
     268:	04 1d       	adc	r16, r4
     26a:	04 1d       	adc	r16, r4
     26c:	04 1d       	adc	r16, r4
     26e:	04 1d       	adc	r16, r4
     270:	04 1d       	adc	r16, r4
     272:	04 1d       	adc	r16, r4
     274:	fb 1c       	adc	r15, r11

00000276 <__trampolines_end>:
     276:	45 00       	.word	0x0045	; ????
     278:	00 82       	st	Z, r0
     27a:	00 00       	nop
     27c:	40 00       	.word	0x0040	; ????
     27e:	20 00       	Address 0x0000027e is out of bounds.
.word	0xffff	; ????

0000027f <_ZL9arpreqhdr>:
     27f:	00 01 08 00 06 04 00 01 00                          .........

00000288 <__ctors_start>:
     288:	20 05       	cpc	r18, r0
     28a:	25 0c       	add	r2, r5
     28c:	a3 16       	cp	r10, r19
     28e:	2b 17       	cp	r18, r27
     290:	b3 17       	cp	r27, r19
     292:	3b 18       	sub	r3, r11
     294:	b4 18       	sub	r11, r4
     296:	ba 1a       	sub	r11, r26
     298:	70 1e       	adc	r7, r16
     29a:	92 1f       	adc	r25, r18
     29c:	1d 21       	and	r17, r13
     29e:	cc 21       	and	r28, r12

000002a0 <__ctors_end>:
     2a0:	11 24       	eor	r1, r1
     2a2:	1f be       	out	0x3f, r1	; 63
     2a4:	cf ef       	ldi	r28, 0xFF	; 255
     2a6:	d1 e2       	ldi	r29, 0x21	; 33
     2a8:	de bf       	out	0x3e, r29	; 62
     2aa:	cd bf       	out	0x3d, r28	; 61
     2ac:	00 e0       	ldi	r16, 0x00	; 0
     2ae:	0c bf       	out	0x3c, r16	; 60

000002b0 <__do_copy_data>:
     2b0:	13 e0       	ldi	r17, 0x03	; 3
     2b2:	a0 e0       	ldi	r26, 0x00	; 0
     2b4:	b2 e0       	ldi	r27, 0x02	; 2
     2b6:	ec ef       	ldi	r30, 0xFC	; 252
     2b8:	fa e4       	ldi	r31, 0x4A	; 74
     2ba:	00 e0       	ldi	r16, 0x00	; 0
     2bc:	0b bf       	out	0x3b, r16	; 59
     2be:	02 c0       	rjmp	.+4      	; 0x2c4 <__do_copy_data+0x14>
     2c0:	07 90       	elpm	r0, Z+
     2c2:	0d 92       	st	X+, r0
     2c4:	a8 38       	cpi	r26, 0x88	; 136
     2c6:	b1 07       	cpc	r27, r17
     2c8:	d9 f7       	brne	.-10     	; 0x2c0 <__do_copy_data+0x10>

000002ca <__do_clear_bss>:
     2ca:	2a e0       	ldi	r18, 0x0A	; 10
     2cc:	a8 e8       	ldi	r26, 0x88	; 136
     2ce:	b3 e0       	ldi	r27, 0x03	; 3
     2d0:	01 c0       	rjmp	.+2      	; 0x2d4 <.do_clear_bss_start>

000002d2 <.do_clear_bss_loop>:
     2d2:	1d 92       	st	X+, r1

000002d4 <.do_clear_bss_start>:
     2d4:	aa 36       	cpi	r26, 0x6A	; 106
     2d6:	b2 07       	cpc	r27, r18
     2d8:	e1 f7       	brne	.-8      	; 0x2d2 <.do_clear_bss_loop>

000002da <__do_global_ctors>:
     2da:	11 e0       	ldi	r17, 0x01	; 1
     2dc:	c0 e5       	ldi	r28, 0x50	; 80
     2de:	d1 e0       	ldi	r29, 0x01	; 1
     2e0:	00 e0       	ldi	r16, 0x00	; 0
     2e2:	06 c0       	rjmp	.+12     	; 0x2f0 <__do_global_ctors+0x16>
     2e4:	21 97       	sbiw	r28, 0x01	; 1
     2e6:	01 09       	sbc	r16, r1
     2e8:	80 2f       	mov	r24, r16
     2ea:	fe 01       	movw	r30, r28
     2ec:	0e 94 84 24 	call	0x4908	; 0x4908 <__tablejump2__>
     2f0:	c4 34       	cpi	r28, 0x44	; 68
     2f2:	d1 07       	cpc	r29, r17
     2f4:	80 e0       	ldi	r24, 0x00	; 0
     2f6:	08 07       	cpc	r16, r24
     2f8:	a9 f7       	brne	.-22     	; 0x2e4 <__do_global_ctors+0xa>
     2fa:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <main>
     2fe:	0c 94 7c 25 	jmp	0x4af8	; 0x4af8 <_exit>

00000302 <__bad_interrupt>:
     302:	7e ce       	rjmp	.-772    	; 0x0 <__vectors>

00000304 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:

    setMode(lastMode);
    return true;
  }
  return false;
}
     304:	08 95       	ret

00000306 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>:
     306:	0f 93       	push	r16
     308:	1f 93       	push	r17
     30a:	cf 93       	push	r28
     30c:	df 93       	push	r29
     30e:	8c 01       	movw	r16, r24
     310:	eb 01       	movw	r28, r22
     312:	88 e2       	ldi	r24, 0x28	; 40
     314:	fb 01       	movw	r30, r22
     316:	11 92       	st	Z+, r1
     318:	8a 95       	dec	r24
     31a:	e9 f7       	brne	.-6      	; 0x316 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x10>
     31c:	4b e0       	ldi	r20, 0x0B	; 11
     31e:	50 e0       	ldi	r21, 0x00	; 0
     320:	64 e1       	ldi	r22, 0x14	; 20
     322:	72 e0       	ldi	r23, 0x02	; 2
     324:	ce 01       	movw	r24, r28
     326:	0e 94 6d 25 	call	0x4ada	; 0x4ada <strncpy>
     32a:	1b 86       	std	Y+11, r1	; 0x0b
     32c:	81 e0       	ldi	r24, 0x01	; 1
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	a0 e0       	ldi	r26, 0x00	; 0
     332:	b0 e0       	ldi	r27, 0x00	; 0
     334:	8c 87       	std	Y+12, r24	; 0x0c
     336:	9d 87       	std	Y+13, r25	; 0x0d
     338:	ae 87       	std	Y+14, r26	; 0x0e
     33a:	bf 87       	std	Y+15, r27	; 0x0f
     33c:	f8 01       	movw	r30, r16
     33e:	86 81       	ldd	r24, Z+6	; 0x06
     340:	97 81       	ldd	r25, Z+7	; 0x07
     342:	a0 85       	ldd	r26, Z+8	; 0x08
     344:	b1 85       	ldd	r27, Z+9	; 0x09
     346:	88 8b       	std	Y+16, r24	; 0x10
     348:	99 8b       	std	Y+17, r25	; 0x11
     34a:	aa 8b       	std	Y+18, r26	; 0x12
     34c:	bb 8b       	std	Y+19, r27	; 0x13
     34e:	83 e0       	ldi	r24, 0x03	; 3
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	a0 e0       	ldi	r26, 0x00	; 0
     354:	b0 e0       	ldi	r27, 0x00	; 0
     356:	8c 8b       	std	Y+20, r24	; 0x14
     358:	9d 8b       	std	Y+21, r25	; 0x15
     35a:	ae 8b       	std	Y+22, r26	; 0x16
     35c:	bf 8b       	std	Y+23, r27	; 0x17
     35e:	1c a2       	std	Y+36, r1	; 0x24
     360:	1d a2       	std	Y+37, r1	; 0x25
     362:	1e a2       	std	Y+38, r1	; 0x26
     364:	1f a2       	std	Y+39, r1	; 0x27
     366:	18 8e       	std	Y+24, r1	; 0x18
     368:	19 8e       	std	Y+25, r1	; 0x19
     36a:	1a 8e       	std	Y+26, r1	; 0x1a
     36c:	1b 8e       	std	Y+27, r1	; 0x1b
     36e:	1c 8e       	std	Y+28, r1	; 0x1c
     370:	1d 8e       	std	Y+29, r1	; 0x1d
     372:	1e 8e       	std	Y+30, r1	; 0x1e
     374:	1f 8e       	std	Y+31, r1	; 0x1f
     376:	8a e0       	ldi	r24, 0x0A	; 10
     378:	97 ed       	ldi	r25, 0xD7	; 215
     37a:	a3 e2       	ldi	r26, 0x23	; 35
     37c:	bc e3       	ldi	r27, 0x3C	; 60
     37e:	88 a3       	std	Y+32, r24	; 0x20
     380:	99 a3       	std	Y+33, r25	; 0x21
     382:	aa a3       	std	Y+34, r26	; 0x22
     384:	bb a3       	std	Y+35, r27	; 0x23
     386:	df 91       	pop	r29
     388:	cf 91       	pop	r28
     38a:	1f 91       	pop	r17
     38c:	0f 91       	pop	r16
     38e:	08 95       	ret

00000390 <_ZN15Adafruit_BNO055C1ElhP7TwoWire>:
     390:	0f 93       	push	r16
     392:	1f 93       	push	r17
     394:	fc 01       	movw	r30, r24
     396:	8f e1       	ldi	r24, 0x1F	; 31
     398:	92 e0       	ldi	r25, 0x02	; 2
     39a:	91 83       	std	Z+1, r25	; 0x01
     39c:	80 83       	st	Z, r24
     39e:	46 83       	std	Z+6, r20	; 0x06
     3a0:	57 83       	std	Z+7, r21	; 0x07
     3a2:	60 87       	std	Z+8, r22	; 0x08
     3a4:	71 87       	std	Z+9, r23	; 0x09
     3a6:	23 83       	std	Z+3, r18	; 0x03
     3a8:	15 83       	std	Z+5, r17	; 0x05
     3aa:	04 83       	std	Z+4, r16	; 0x04
     3ac:	1f 91       	pop	r17
     3ae:	0f 91       	pop	r16
     3b0:	08 95       	ret

000003b2 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>:
     3b2:	0f 93       	push	r16
     3b4:	1f 93       	push	r17
     3b6:	cf 93       	push	r28
     3b8:	df 93       	push	r29
     3ba:	ec 01       	movw	r28, r24
     3bc:	06 2f       	mov	r16, r22
     3be:	14 2f       	mov	r17, r20
     3c0:	6b 81       	ldd	r22, Y+3	; 0x03
     3c2:	8c 81       	ldd	r24, Y+4	; 0x04
     3c4:	9d 81       	ldd	r25, Y+5	; 0x05
     3c6:	0e 94 e4 1d 	call	0x3bc8	; 0x3bc8 <_ZN7TwoWire17beginTransmissionEh>
     3ca:	8c 81       	ldd	r24, Y+4	; 0x04
     3cc:	9d 81       	ldd	r25, Y+5	; 0x05
     3ce:	dc 01       	movw	r26, r24
     3d0:	ed 91       	ld	r30, X+
     3d2:	fc 91       	ld	r31, X
     3d4:	01 90       	ld	r0, Z+
     3d6:	f0 81       	ld	r31, Z
     3d8:	e0 2d       	mov	r30, r0
     3da:	60 2f       	mov	r22, r16
     3dc:	19 95       	eicall
     3de:	8c 81       	ldd	r24, Y+4	; 0x04
     3e0:	9d 81       	ldd	r25, Y+5	; 0x05
     3e2:	dc 01       	movw	r26, r24
     3e4:	ed 91       	ld	r30, X+
     3e6:	fc 91       	ld	r31, X
     3e8:	01 90       	ld	r0, Z+
     3ea:	f0 81       	ld	r31, Z
     3ec:	e0 2d       	mov	r30, r0
     3ee:	61 2f       	mov	r22, r17
     3f0:	19 95       	eicall
     3f2:	8c 81       	ldd	r24, Y+4	; 0x04
     3f4:	9d 81       	ldd	r25, Y+5	; 0x05
     3f6:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <_ZN7TwoWire15endTransmissionEv>
     3fa:	81 e0       	ldi	r24, 0x01	; 1
     3fc:	df 91       	pop	r29
     3fe:	cf 91       	pop	r28
     400:	1f 91       	pop	r17
     402:	0f 91       	pop	r16
     404:	08 95       	ret

00000406 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>:
     406:	46 2f       	mov	r20, r22
     408:	fc 01       	movw	r30, r24
     40a:	62 87       	std	Z+10, r22	; 0x0a
     40c:	6d e3       	ldi	r22, 0x3D	; 61
     40e:	d1 df       	rcall	.-94     	; 0x3b2 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     410:	ff ef       	ldi	r31, 0xFF	; 255
     412:	26 e7       	ldi	r18, 0x76	; 118
     414:	81 e0       	ldi	r24, 0x01	; 1
     416:	f1 50       	subi	r31, 0x01	; 1
     418:	20 40       	sbci	r18, 0x00	; 0
     41a:	80 40       	sbci	r24, 0x00	; 0
     41c:	e1 f7       	brne	.-8      	; 0x416 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE+0x10>
     41e:	00 c0       	rjmp	.+0      	; 0x420 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE+0x1a>
     420:	00 00       	nop
     422:	08 95       	ret

00000424 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>:
     424:	1f 93       	push	r17
     426:	cf 93       	push	r28
     428:	df 93       	push	r29
     42a:	ec 01       	movw	r28, r24
     42c:	16 2f       	mov	r17, r22
     42e:	6b 81       	ldd	r22, Y+3	; 0x03
     430:	8c 81       	ldd	r24, Y+4	; 0x04
     432:	9d 81       	ldd	r25, Y+5	; 0x05
     434:	0e 94 e4 1d 	call	0x3bc8	; 0x3bc8 <_ZN7TwoWire17beginTransmissionEh>
     438:	8c 81       	ldd	r24, Y+4	; 0x04
     43a:	9d 81       	ldd	r25, Y+5	; 0x05
     43c:	dc 01       	movw	r26, r24
     43e:	ed 91       	ld	r30, X+
     440:	fc 91       	ld	r31, X
     442:	01 90       	ld	r0, Z+
     444:	f0 81       	ld	r31, Z
     446:	e0 2d       	mov	r30, r0
     448:	61 2f       	mov	r22, r17
     44a:	19 95       	eicall
     44c:	8c 81       	ldd	r24, Y+4	; 0x04
     44e:	9d 81       	ldd	r25, Y+5	; 0x05
     450:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <_ZN7TwoWire15endTransmissionEv>
     454:	41 e0       	ldi	r20, 0x01	; 1
     456:	6b 81       	ldd	r22, Y+3	; 0x03
     458:	8c 81       	ldd	r24, Y+4	; 0x04
     45a:	9d 81       	ldd	r25, Y+5	; 0x05
     45c:	0e 94 67 1e 	call	0x3cce	; 0x3cce <_ZN7TwoWire11requestFromEhh>
     460:	8c 81       	ldd	r24, Y+4	; 0x04
     462:	9d 81       	ldd	r25, Y+5	; 0x05
     464:	dc 01       	movw	r26, r24
     466:	ed 91       	ld	r30, X+
     468:	fc 91       	ld	r31, X
     46a:	02 84       	ldd	r0, Z+10	; 0x0a
     46c:	f3 85       	ldd	r31, Z+11	; 0x0b
     46e:	e0 2d       	mov	r30, r0
     470:	19 95       	eicall
     472:	df 91       	pop	r29
     474:	cf 91       	pop	r28
     476:	1f 91       	pop	r17
     478:	08 95       	ret

0000047a <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>:
     47a:	1f 93       	push	r17
     47c:	cf 93       	push	r28
     47e:	df 93       	push	r29
     480:	ec 01       	movw	r28, r24
     482:	16 2f       	mov	r17, r22
     484:	8c 81       	ldd	r24, Y+4	; 0x04
     486:	9d 81       	ldd	r25, Y+5	; 0x05
     488:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <_ZN7TwoWire5beginEv>
     48c:	60 e0       	ldi	r22, 0x00	; 0
     48e:	ce 01       	movw	r24, r28
     490:	c9 df       	rcall	.-110    	; 0x424 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
     492:	80 3a       	cpi	r24, 0xA0	; 160
     494:	79 f0       	breq	.+30     	; 0x4b4 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x3a>
     496:	2f ef       	ldi	r18, 0xFF	; 255
     498:	83 ed       	ldi	r24, 0xD3	; 211
     49a:	90 e3       	ldi	r25, 0x30	; 48
     49c:	21 50       	subi	r18, 0x01	; 1
     49e:	80 40       	sbci	r24, 0x00	; 0
     4a0:	90 40       	sbci	r25, 0x00	; 0
     4a2:	e1 f7       	brne	.-8      	; 0x49c <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x22>
     4a4:	00 c0       	rjmp	.+0      	; 0x4a6 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x2c>
     4a6:	00 00       	nop
     4a8:	60 e0       	ldi	r22, 0x00	; 0
     4aa:	ce 01       	movw	r24, r28
     4ac:	bb df       	rcall	.-138    	; 0x424 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
     4ae:	80 3a       	cpi	r24, 0xA0	; 160
     4b0:	09 f0       	breq	.+2      	; 0x4b4 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x3a>
     4b2:	4b c0       	rjmp	.+150    	; 0x54a <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xd0>
     4b4:	60 e0       	ldi	r22, 0x00	; 0
     4b6:	ce 01       	movw	r24, r28
     4b8:	a6 df       	rcall	.-180    	; 0x406 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
     4ba:	40 e2       	ldi	r20, 0x20	; 32
     4bc:	6f e3       	ldi	r22, 0x3F	; 63
     4be:	ce 01       	movw	r24, r28
     4c0:	78 df       	rcall	.-272    	; 0x3b2 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     4c2:	2f ef       	ldi	r18, 0xFF	; 255
     4c4:	86 e7       	ldi	r24, 0x76	; 118
     4c6:	91 e0       	ldi	r25, 0x01	; 1
     4c8:	21 50       	subi	r18, 0x01	; 1
     4ca:	80 40       	sbci	r24, 0x00	; 0
     4cc:	90 40       	sbci	r25, 0x00	; 0
     4ce:	e1 f7       	brne	.-8      	; 0x4c8 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x4e>
     4d0:	00 c0       	rjmp	.+0      	; 0x4d2 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x58>
     4d2:	00 00       	nop
     4d4:	60 e0       	ldi	r22, 0x00	; 0
     4d6:	ce 01       	movw	r24, r28
     4d8:	a5 df       	rcall	.-182    	; 0x424 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
     4da:	80 3a       	cpi	r24, 0xA0	; 160
     4dc:	39 f0       	breq	.+14     	; 0x4ec <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x72>
     4de:	8f e3       	ldi	r24, 0x3F	; 63
     4e0:	9c e9       	ldi	r25, 0x9C	; 156
     4e2:	01 97       	sbiw	r24, 0x01	; 1
     4e4:	f1 f7       	brne	.-4      	; 0x4e2 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x68>
     4e6:	00 c0       	rjmp	.+0      	; 0x4e8 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x6e>
     4e8:	00 00       	nop
     4ea:	f4 cf       	rjmp	.-24     	; 0x4d4 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x5a>
     4ec:	9f ef       	ldi	r25, 0xFF	; 255
     4ee:	20 e7       	ldi	r18, 0x70	; 112
     4f0:	82 e0       	ldi	r24, 0x02	; 2
     4f2:	91 50       	subi	r25, 0x01	; 1
     4f4:	20 40       	sbci	r18, 0x00	; 0
     4f6:	80 40       	sbci	r24, 0x00	; 0
     4f8:	e1 f7       	brne	.-8      	; 0x4f2 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x78>
     4fa:	00 c0       	rjmp	.+0      	; 0x4fc <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x82>
     4fc:	00 00       	nop
     4fe:	40 e0       	ldi	r20, 0x00	; 0
     500:	6e e3       	ldi	r22, 0x3E	; 62
     502:	ce 01       	movw	r24, r28
     504:	56 df       	rcall	.-340    	; 0x3b2 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     506:	8f e3       	ldi	r24, 0x3F	; 63
     508:	9c e9       	ldi	r25, 0x9C	; 156
     50a:	01 97       	sbiw	r24, 0x01	; 1
     50c:	f1 f7       	brne	.-4      	; 0x50a <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x90>
     50e:	00 c0       	rjmp	.+0      	; 0x510 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x96>
     510:	00 00       	nop
     512:	40 e0       	ldi	r20, 0x00	; 0
     514:	67 e0       	ldi	r22, 0x07	; 7
     516:	ce 01       	movw	r24, r28
     518:	4c df       	rcall	.-360    	; 0x3b2 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     51a:	40 e0       	ldi	r20, 0x00	; 0
     51c:	6f e3       	ldi	r22, 0x3F	; 63
     51e:	ce 01       	movw	r24, r28
     520:	48 df       	rcall	.-368    	; 0x3b2 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     522:	8f e3       	ldi	r24, 0x3F	; 63
     524:	9c e9       	ldi	r25, 0x9C	; 156
     526:	01 97       	sbiw	r24, 0x01	; 1
     528:	f1 f7       	brne	.-4      	; 0x526 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xac>
     52a:	00 c0       	rjmp	.+0      	; 0x52c <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xb2>
     52c:	00 00       	nop
     52e:	61 2f       	mov	r22, r17
     530:	ce 01       	movw	r24, r28
     532:	69 df       	rcall	.-302    	; 0x406 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
     534:	9f ef       	ldi	r25, 0xFF	; 255
     536:	29 ef       	ldi	r18, 0xF9	; 249
     538:	80 e0       	ldi	r24, 0x00	; 0
     53a:	91 50       	subi	r25, 0x01	; 1
     53c:	20 40       	sbci	r18, 0x00	; 0
     53e:	80 40       	sbci	r24, 0x00	; 0
     540:	e1 f7       	brne	.-8      	; 0x53a <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xc0>
     542:	00 c0       	rjmp	.+0      	; 0x544 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xca>
     544:	00 00       	nop
     546:	81 e0       	ldi	r24, 0x01	; 1
     548:	01 c0       	rjmp	.+2      	; 0x54c <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xd2>
     54a:	80 e0       	ldi	r24, 0x00	; 0
     54c:	df 91       	pop	r29
     54e:	cf 91       	pop	r28
     550:	1f 91       	pop	r17
     552:	08 95       	ret

00000554 <_ZN15Adafruit_BNO0557getTempEv>:
     554:	64 e3       	ldi	r22, 0x34	; 52
     556:	66 cf       	rjmp	.-308    	; 0x424 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
     558:	08 95       	ret

0000055a <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>:
     55a:	cf 92       	push	r12
     55c:	df 92       	push	r13
     55e:	ef 92       	push	r14
     560:	ff 92       	push	r15
     562:	0f 93       	push	r16
     564:	1f 93       	push	r17
     566:	cf 93       	push	r28
     568:	df 93       	push	r29
     56a:	7c 01       	movw	r14, r24
     56c:	c6 2f       	mov	r28, r22
     56e:	6a 01       	movw	r12, r20
     570:	12 2f       	mov	r17, r18
     572:	dc 01       	movw	r26, r24
     574:	13 96       	adiw	r26, 0x03	; 3
     576:	6c 91       	ld	r22, X
     578:	13 97       	sbiw	r26, 0x03	; 3
     57a:	14 96       	adiw	r26, 0x04	; 4
     57c:	8d 91       	ld	r24, X+
     57e:	9c 91       	ld	r25, X
     580:	15 97       	sbiw	r26, 0x05	; 5
     582:	0e 94 e4 1d 	call	0x3bc8	; 0x3bc8 <_ZN7TwoWire17beginTransmissionEh>
     586:	f7 01       	movw	r30, r14
     588:	84 81       	ldd	r24, Z+4	; 0x04
     58a:	95 81       	ldd	r25, Z+5	; 0x05
     58c:	dc 01       	movw	r26, r24
     58e:	ed 91       	ld	r30, X+
     590:	fc 91       	ld	r31, X
     592:	01 90       	ld	r0, Z+
     594:	f0 81       	ld	r31, Z
     596:	e0 2d       	mov	r30, r0
     598:	6c 2f       	mov	r22, r28
     59a:	19 95       	eicall
     59c:	f7 01       	movw	r30, r14
     59e:	84 81       	ldd	r24, Z+4	; 0x04
     5a0:	95 81       	ldd	r25, Z+5	; 0x05
     5a2:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <_ZN7TwoWire15endTransmissionEv>
     5a6:	41 2f       	mov	r20, r17
     5a8:	d7 01       	movw	r26, r14
     5aa:	13 96       	adiw	r26, 0x03	; 3
     5ac:	6c 91       	ld	r22, X
     5ae:	13 97       	sbiw	r26, 0x03	; 3
     5b0:	14 96       	adiw	r26, 0x04	; 4
     5b2:	8d 91       	ld	r24, X+
     5b4:	9c 91       	ld	r25, X
     5b6:	15 97       	sbiw	r26, 0x05	; 5
     5b8:	0e 94 67 1e 	call	0x3cce	; 0x3cce <_ZN7TwoWire11requestFromEhh>
     5bc:	11 23       	and	r17, r17
     5be:	b1 f0       	breq	.+44     	; 0x5ec <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh+0x92>
     5c0:	e6 01       	movw	r28, r12
     5c2:	11 50       	subi	r17, 0x01	; 1
     5c4:	01 2f       	mov	r16, r17
     5c6:	10 e0       	ldi	r17, 0x00	; 0
     5c8:	0f 5f       	subi	r16, 0xFF	; 255
     5ca:	1f 4f       	sbci	r17, 0xFF	; 255
     5cc:	0c 0d       	add	r16, r12
     5ce:	1d 1d       	adc	r17, r13
     5d0:	f7 01       	movw	r30, r14
     5d2:	84 81       	ldd	r24, Z+4	; 0x04
     5d4:	95 81       	ldd	r25, Z+5	; 0x05
     5d6:	dc 01       	movw	r26, r24
     5d8:	ed 91       	ld	r30, X+
     5da:	fc 91       	ld	r31, X
     5dc:	02 84       	ldd	r0, Z+10	; 0x0a
     5de:	f3 85       	ldd	r31, Z+11	; 0x0b
     5e0:	e0 2d       	mov	r30, r0
     5e2:	19 95       	eicall
     5e4:	89 93       	st	Y+, r24
     5e6:	c0 17       	cp	r28, r16
     5e8:	d1 07       	cpc	r29, r17
     5ea:	91 f7       	brne	.-28     	; 0x5d0 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh+0x76>
     5ec:	81 e0       	ldi	r24, 0x01	; 1
     5ee:	df 91       	pop	r29
     5f0:	cf 91       	pop	r28
     5f2:	1f 91       	pop	r17
     5f4:	0f 91       	pop	r16
     5f6:	ff 90       	pop	r15
     5f8:	ef 90       	pop	r14
     5fa:	df 90       	pop	r13
     5fc:	cf 90       	pop	r12
     5fe:	08 95       	ret

00000600 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>:
 *            VECTOR_EULER
 *            VECTOR_LINEARACCEL
 *            VECTOR_GRAVITY]
 *  @return  vector from specified source
 */
AdafruitImu::Vector<3> Adafruit_BNO055::getVector(adafruit_vector_type_t vector_type) {
     600:	af 92       	push	r10
     602:	bf 92       	push	r11
     604:	cf 92       	push	r12
     606:	df 92       	push	r13
     608:	ff 92       	push	r15
     60a:	0f 93       	push	r16
     60c:	1f 93       	push	r17
     60e:	cf 93       	push	r28
     610:	df 93       	push	r29
     612:	00 d0       	rcall	.+0      	; 0x614 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x14>
     614:	00 d0       	rcall	.+0      	; 0x616 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x16>
     616:	cd b7       	in	r28, 0x3d	; 61
     618:	de b7       	in	r29, 0x3e	; 62
     61a:	8c 01       	movw	r16, r24
     61c:	cb 01       	movw	r24, r22
     61e:	f4 2e       	mov	r15, r20
	template <uint8_t N> class Vector
	{
		public:
		Vector()
		{
			memset(p_vec, 0, sizeof(double)*N);
     620:	2c e0       	ldi	r18, 0x0C	; 12
     622:	f8 01       	movw	r30, r16
     624:	11 92       	st	Z+, r1
     626:	2a 95       	dec	r18
     628:	e9 f7       	brne	.-6      	; 0x624 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x24>
  AdafruitImu::Vector<3> xyz;
  uint8_t buffer[6];
  memset(buffer, 0, 6);
     62a:	ae 01       	movw	r20, r28
     62c:	4f 5f       	subi	r20, 0xFF	; 255
     62e:	5f 4f       	sbci	r21, 0xFF	; 255
     630:	26 e0       	ldi	r18, 0x06	; 6
     632:	fa 01       	movw	r30, r20
     634:	11 92       	st	Z+, r1
     636:	2a 95       	dec	r18
     638:	e9 f7       	brne	.-6      	; 0x634 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x34>

  int16_t x, y, z;
  x = y = z = 0;

  /* Read vector data (6 bytes) */
  readLen((adafruit_bno055_reg_t)vector_type, buffer, 6);
     63a:	26 e0       	ldi	r18, 0x06	; 6
     63c:	6f 2d       	mov	r22, r15
     63e:	8d df       	rcall	.-230    	; 0x55a <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>

  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
     640:	6a 81       	ldd	r22, Y+2	; 0x02
     642:	70 e0       	ldi	r23, 0x00	; 0
     644:	76 2f       	mov	r23, r22
     646:	66 27       	eor	r22, r22
     648:	89 81       	ldd	r24, Y+1	; 0x01
     64a:	68 2b       	or	r22, r24
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
     64c:	8c 81       	ldd	r24, Y+4	; 0x04
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	98 2f       	mov	r25, r24
     652:	88 27       	eor	r24, r24
     654:	2b 81       	ldd	r18, Y+3	; 0x03
     656:	6c 01       	movw	r12, r24
     658:	c2 2a       	or	r12, r18
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
     65a:	8e 81       	ldd	r24, Y+6	; 0x06
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	98 2f       	mov	r25, r24
     660:	88 27       	eor	r24, r24
     662:	2d 81       	ldd	r18, Y+5	; 0x05
     664:	5c 01       	movw	r10, r24
     666:	a2 2a       	or	r10, r18

  /*!
   * Convert the value to an appropriate range (section 3.6.4)
   * and assign the value to the Vector type
   */
  switch (vector_type) {
     668:	f4 e1       	ldi	r31, 0x14	; 20
     66a:	ff 16       	cp	r15, r31
     66c:	09 f4       	brne	.+2      	; 0x670 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x70>
     66e:	4a c0       	rjmp	.+148    	; 0x704 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x104>
     670:	ff 15       	cp	r31, r15
     672:	40 f0       	brcs	.+16     	; 0x684 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x84>
     674:	88 e0       	ldi	r24, 0x08	; 8
     676:	f8 16       	cp	r15, r24
     678:	09 f4       	brne	.+2      	; 0x67c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x7c>
     67a:	ac c0       	rjmp	.+344    	; 0x7d4 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x1d4>
     67c:	ee e0       	ldi	r30, 0x0E	; 14
     67e:	fe 16       	cp	r15, r30
     680:	69 f0       	breq	.+26     	; 0x69c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x9c>
     682:	43 c1       	rjmp	.+646    	; 0x90a <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
     684:	f8 e2       	ldi	r31, 0x28	; 40
     686:	ff 16       	cp	r15, r31
     688:	09 f4       	brne	.+2      	; 0x68c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x8c>
     68a:	d8 c0       	rjmp	.+432    	; 0x83c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x23c>
     68c:	8e e2       	ldi	r24, 0x2E	; 46
     68e:	f8 16       	cp	r15, r24
     690:	09 f4       	brne	.+2      	; 0x694 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x94>
     692:	08 c1       	rjmp	.+528    	; 0x8a4 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x2a4>
     694:	ea e1       	ldi	r30, 0x1A	; 26
     696:	fe 12       	cpse	r15, r30
     698:	38 c1       	rjmp	.+624    	; 0x90a <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
     69a:	68 c0       	rjmp	.+208    	; 0x76c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x16c>
  case VECTOR_MAGNETOMETER:
    /* 1uT = 16 LSB */
    xyz[0] = ((double)x) / 16.0;
     69c:	07 2e       	mov	r0, r23
     69e:	00 0c       	add	r0, r0
     6a0:	88 0b       	sbc	r24, r24
     6a2:	99 0b       	sbc	r25, r25
     6a4:	0e 94 3c 23 	call	0x4678	; 0x4678 <__floatsisf>
     6a8:	20 e0       	ldi	r18, 0x00	; 0
     6aa:	30 e0       	ldi	r19, 0x00	; 0
     6ac:	40 e8       	ldi	r20, 0x80	; 128
     6ae:	5d e3       	ldi	r21, 0x3D	; 61
     6b0:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <__mulsf3>
     6b4:	f8 01       	movw	r30, r16
     6b6:	60 83       	st	Z, r22
     6b8:	71 83       	std	Z+1, r23	; 0x01
     6ba:	82 83       	std	Z+2, r24	; 0x02
     6bc:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 16.0;
     6be:	b6 01       	movw	r22, r12
     6c0:	dd 0c       	add	r13, r13
     6c2:	88 0b       	sbc	r24, r24
     6c4:	99 0b       	sbc	r25, r25
     6c6:	0e 94 3c 23 	call	0x4678	; 0x4678 <__floatsisf>
     6ca:	20 e0       	ldi	r18, 0x00	; 0
     6cc:	30 e0       	ldi	r19, 0x00	; 0
     6ce:	40 e8       	ldi	r20, 0x80	; 128
     6d0:	5d e3       	ldi	r21, 0x3D	; 61
     6d2:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <__mulsf3>
     6d6:	f8 01       	movw	r30, r16
     6d8:	64 83       	std	Z+4, r22	; 0x04
     6da:	75 83       	std	Z+5, r23	; 0x05
     6dc:	86 83       	std	Z+6, r24	; 0x06
     6de:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 16.0;
     6e0:	b5 01       	movw	r22, r10
     6e2:	bb 0c       	add	r11, r11
     6e4:	88 0b       	sbc	r24, r24
     6e6:	99 0b       	sbc	r25, r25
     6e8:	0e 94 3c 23 	call	0x4678	; 0x4678 <__floatsisf>
     6ec:	20 e0       	ldi	r18, 0x00	; 0
     6ee:	30 e0       	ldi	r19, 0x00	; 0
     6f0:	40 e8       	ldi	r20, 0x80	; 128
     6f2:	5d e3       	ldi	r21, 0x3D	; 61
     6f4:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <__mulsf3>
     6f8:	f8 01       	movw	r30, r16
     6fa:	60 87       	std	Z+8, r22	; 0x08
     6fc:	71 87       	std	Z+9, r23	; 0x09
     6fe:	82 87       	std	Z+10, r24	; 0x0a
     700:	93 87       	std	Z+11, r25	; 0x0b
    break;
     702:	03 c1       	rjmp	.+518    	; 0x90a <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_GYROSCOPE:
    /* 1dps = 16 LSB */
    xyz[0] = ((double)x) / 16.0;
     704:	07 2e       	mov	r0, r23
     706:	00 0c       	add	r0, r0
     708:	88 0b       	sbc	r24, r24
     70a:	99 0b       	sbc	r25, r25
     70c:	0e 94 3c 23 	call	0x4678	; 0x4678 <__floatsisf>
     710:	20 e0       	ldi	r18, 0x00	; 0
     712:	30 e0       	ldi	r19, 0x00	; 0
     714:	40 e8       	ldi	r20, 0x80	; 128
     716:	5d e3       	ldi	r21, 0x3D	; 61
     718:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <__mulsf3>
     71c:	f8 01       	movw	r30, r16
     71e:	60 83       	st	Z, r22
     720:	71 83       	std	Z+1, r23	; 0x01
     722:	82 83       	std	Z+2, r24	; 0x02
     724:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 16.0;
     726:	b6 01       	movw	r22, r12
     728:	dd 0c       	add	r13, r13
     72a:	88 0b       	sbc	r24, r24
     72c:	99 0b       	sbc	r25, r25
     72e:	0e 94 3c 23 	call	0x4678	; 0x4678 <__floatsisf>
     732:	20 e0       	ldi	r18, 0x00	; 0
     734:	30 e0       	ldi	r19, 0x00	; 0
     736:	40 e8       	ldi	r20, 0x80	; 128
     738:	5d e3       	ldi	r21, 0x3D	; 61
     73a:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <__mulsf3>
     73e:	f8 01       	movw	r30, r16
     740:	64 83       	std	Z+4, r22	; 0x04
     742:	75 83       	std	Z+5, r23	; 0x05
     744:	86 83       	std	Z+6, r24	; 0x06
     746:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 16.0;
     748:	b5 01       	movw	r22, r10
     74a:	bb 0c       	add	r11, r11
     74c:	88 0b       	sbc	r24, r24
     74e:	99 0b       	sbc	r25, r25
     750:	0e 94 3c 23 	call	0x4678	; 0x4678 <__floatsisf>
     754:	20 e0       	ldi	r18, 0x00	; 0
     756:	30 e0       	ldi	r19, 0x00	; 0
     758:	40 e8       	ldi	r20, 0x80	; 128
     75a:	5d e3       	ldi	r21, 0x3D	; 61
     75c:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <__mulsf3>
     760:	f8 01       	movw	r30, r16
     762:	60 87       	std	Z+8, r22	; 0x08
     764:	71 87       	std	Z+9, r23	; 0x09
     766:	82 87       	std	Z+10, r24	; 0x0a
     768:	93 87       	std	Z+11, r25	; 0x0b
    break;
     76a:	cf c0       	rjmp	.+414    	; 0x90a <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_EULER:
    /* 1 degree = 16 LSB */
    xyz[0] = ((double)x) / 16.0;
     76c:	07 2e       	mov	r0, r23
     76e:	00 0c       	add	r0, r0
     770:	88 0b       	sbc	r24, r24
     772:	99 0b       	sbc	r25, r25
     774:	0e 94 3c 23 	call	0x4678	; 0x4678 <__floatsisf>
     778:	20 e0       	ldi	r18, 0x00	; 0
     77a:	30 e0       	ldi	r19, 0x00	; 0
     77c:	40 e8       	ldi	r20, 0x80	; 128
     77e:	5d e3       	ldi	r21, 0x3D	; 61
     780:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <__mulsf3>
     784:	f8 01       	movw	r30, r16
     786:	60 83       	st	Z, r22
     788:	71 83       	std	Z+1, r23	; 0x01
     78a:	82 83       	std	Z+2, r24	; 0x02
     78c:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 16.0;
     78e:	b6 01       	movw	r22, r12
     790:	dd 0c       	add	r13, r13
     792:	88 0b       	sbc	r24, r24
     794:	99 0b       	sbc	r25, r25
     796:	0e 94 3c 23 	call	0x4678	; 0x4678 <__floatsisf>
     79a:	20 e0       	ldi	r18, 0x00	; 0
     79c:	30 e0       	ldi	r19, 0x00	; 0
     79e:	40 e8       	ldi	r20, 0x80	; 128
     7a0:	5d e3       	ldi	r21, 0x3D	; 61
     7a2:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <__mulsf3>
     7a6:	f8 01       	movw	r30, r16
     7a8:	64 83       	std	Z+4, r22	; 0x04
     7aa:	75 83       	std	Z+5, r23	; 0x05
     7ac:	86 83       	std	Z+6, r24	; 0x06
     7ae:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 16.0;
     7b0:	b5 01       	movw	r22, r10
     7b2:	bb 0c       	add	r11, r11
     7b4:	88 0b       	sbc	r24, r24
     7b6:	99 0b       	sbc	r25, r25
     7b8:	0e 94 3c 23 	call	0x4678	; 0x4678 <__floatsisf>
     7bc:	20 e0       	ldi	r18, 0x00	; 0
     7be:	30 e0       	ldi	r19, 0x00	; 0
     7c0:	40 e8       	ldi	r20, 0x80	; 128
     7c2:	5d e3       	ldi	r21, 0x3D	; 61
     7c4:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <__mulsf3>
     7c8:	f8 01       	movw	r30, r16
     7ca:	60 87       	std	Z+8, r22	; 0x08
     7cc:	71 87       	std	Z+9, r23	; 0x09
     7ce:	82 87       	std	Z+10, r24	; 0x0a
     7d0:	93 87       	std	Z+11, r25	; 0x0b
    break;
     7d2:	9b c0       	rjmp	.+310    	; 0x90a <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_ACCELEROMETER:
    /* 1m/s^2 = 100 LSB */
    xyz[0] = ((double)x) / 100.0;
     7d4:	07 2e       	mov	r0, r23
     7d6:	00 0c       	add	r0, r0
     7d8:	88 0b       	sbc	r24, r24
     7da:	99 0b       	sbc	r25, r25
     7dc:	0e 94 3c 23 	call	0x4678	; 0x4678 <__floatsisf>
     7e0:	20 e0       	ldi	r18, 0x00	; 0
     7e2:	30 e0       	ldi	r19, 0x00	; 0
     7e4:	48 ec       	ldi	r20, 0xC8	; 200
     7e6:	52 e4       	ldi	r21, 0x42	; 66
     7e8:	0e 94 a6 22 	call	0x454c	; 0x454c <__divsf3>
     7ec:	f8 01       	movw	r30, r16
     7ee:	60 83       	st	Z, r22
     7f0:	71 83       	std	Z+1, r23	; 0x01
     7f2:	82 83       	std	Z+2, r24	; 0x02
     7f4:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 100.0;
     7f6:	b6 01       	movw	r22, r12
     7f8:	dd 0c       	add	r13, r13
     7fa:	88 0b       	sbc	r24, r24
     7fc:	99 0b       	sbc	r25, r25
     7fe:	0e 94 3c 23 	call	0x4678	; 0x4678 <__floatsisf>
     802:	20 e0       	ldi	r18, 0x00	; 0
     804:	30 e0       	ldi	r19, 0x00	; 0
     806:	48 ec       	ldi	r20, 0xC8	; 200
     808:	52 e4       	ldi	r21, 0x42	; 66
     80a:	0e 94 a6 22 	call	0x454c	; 0x454c <__divsf3>
     80e:	f8 01       	movw	r30, r16
     810:	64 83       	std	Z+4, r22	; 0x04
     812:	75 83       	std	Z+5, r23	; 0x05
     814:	86 83       	std	Z+6, r24	; 0x06
     816:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 100.0;
     818:	b5 01       	movw	r22, r10
     81a:	bb 0c       	add	r11, r11
     81c:	88 0b       	sbc	r24, r24
     81e:	99 0b       	sbc	r25, r25
     820:	0e 94 3c 23 	call	0x4678	; 0x4678 <__floatsisf>
     824:	20 e0       	ldi	r18, 0x00	; 0
     826:	30 e0       	ldi	r19, 0x00	; 0
     828:	48 ec       	ldi	r20, 0xC8	; 200
     82a:	52 e4       	ldi	r21, 0x42	; 66
     82c:	0e 94 a6 22 	call	0x454c	; 0x454c <__divsf3>
     830:	f8 01       	movw	r30, r16
     832:	60 87       	std	Z+8, r22	; 0x08
     834:	71 87       	std	Z+9, r23	; 0x09
     836:	82 87       	std	Z+10, r24	; 0x0a
     838:	93 87       	std	Z+11, r25	; 0x0b
    break;
     83a:	67 c0       	rjmp	.+206    	; 0x90a <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_LINEARACCEL:
    /* 1m/s^2 = 100 LSB */
    xyz[0] = ((double)x) / 100.0;
     83c:	07 2e       	mov	r0, r23
     83e:	00 0c       	add	r0, r0
     840:	88 0b       	sbc	r24, r24
     842:	99 0b       	sbc	r25, r25
     844:	0e 94 3c 23 	call	0x4678	; 0x4678 <__floatsisf>
     848:	20 e0       	ldi	r18, 0x00	; 0
     84a:	30 e0       	ldi	r19, 0x00	; 0
     84c:	48 ec       	ldi	r20, 0xC8	; 200
     84e:	52 e4       	ldi	r21, 0x42	; 66
     850:	0e 94 a6 22 	call	0x454c	; 0x454c <__divsf3>
     854:	f8 01       	movw	r30, r16
     856:	60 83       	st	Z, r22
     858:	71 83       	std	Z+1, r23	; 0x01
     85a:	82 83       	std	Z+2, r24	; 0x02
     85c:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 100.0;
     85e:	b6 01       	movw	r22, r12
     860:	dd 0c       	add	r13, r13
     862:	88 0b       	sbc	r24, r24
     864:	99 0b       	sbc	r25, r25
     866:	0e 94 3c 23 	call	0x4678	; 0x4678 <__floatsisf>
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	48 ec       	ldi	r20, 0xC8	; 200
     870:	52 e4       	ldi	r21, 0x42	; 66
     872:	0e 94 a6 22 	call	0x454c	; 0x454c <__divsf3>
     876:	f8 01       	movw	r30, r16
     878:	64 83       	std	Z+4, r22	; 0x04
     87a:	75 83       	std	Z+5, r23	; 0x05
     87c:	86 83       	std	Z+6, r24	; 0x06
     87e:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 100.0;
     880:	b5 01       	movw	r22, r10
     882:	bb 0c       	add	r11, r11
     884:	88 0b       	sbc	r24, r24
     886:	99 0b       	sbc	r25, r25
     888:	0e 94 3c 23 	call	0x4678	; 0x4678 <__floatsisf>
     88c:	20 e0       	ldi	r18, 0x00	; 0
     88e:	30 e0       	ldi	r19, 0x00	; 0
     890:	48 ec       	ldi	r20, 0xC8	; 200
     892:	52 e4       	ldi	r21, 0x42	; 66
     894:	0e 94 a6 22 	call	0x454c	; 0x454c <__divsf3>
     898:	f8 01       	movw	r30, r16
     89a:	60 87       	std	Z+8, r22	; 0x08
     89c:	71 87       	std	Z+9, r23	; 0x09
     89e:	82 87       	std	Z+10, r24	; 0x0a
     8a0:	93 87       	std	Z+11, r25	; 0x0b
    break;
     8a2:	33 c0       	rjmp	.+102    	; 0x90a <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_GRAVITY:
    /* 1m/s^2 = 100 LSB */
    xyz[0] = ((double)x) / 100.0;
     8a4:	07 2e       	mov	r0, r23
     8a6:	00 0c       	add	r0, r0
     8a8:	88 0b       	sbc	r24, r24
     8aa:	99 0b       	sbc	r25, r25
     8ac:	0e 94 3c 23 	call	0x4678	; 0x4678 <__floatsisf>
     8b0:	20 e0       	ldi	r18, 0x00	; 0
     8b2:	30 e0       	ldi	r19, 0x00	; 0
     8b4:	48 ec       	ldi	r20, 0xC8	; 200
     8b6:	52 e4       	ldi	r21, 0x42	; 66
     8b8:	0e 94 a6 22 	call	0x454c	; 0x454c <__divsf3>
     8bc:	f8 01       	movw	r30, r16
     8be:	60 83       	st	Z, r22
     8c0:	71 83       	std	Z+1, r23	; 0x01
     8c2:	82 83       	std	Z+2, r24	; 0x02
     8c4:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 100.0;
     8c6:	b6 01       	movw	r22, r12
     8c8:	dd 0c       	add	r13, r13
     8ca:	88 0b       	sbc	r24, r24
     8cc:	99 0b       	sbc	r25, r25
     8ce:	0e 94 3c 23 	call	0x4678	; 0x4678 <__floatsisf>
     8d2:	20 e0       	ldi	r18, 0x00	; 0
     8d4:	30 e0       	ldi	r19, 0x00	; 0
     8d6:	48 ec       	ldi	r20, 0xC8	; 200
     8d8:	52 e4       	ldi	r21, 0x42	; 66
     8da:	0e 94 a6 22 	call	0x454c	; 0x454c <__divsf3>
     8de:	f8 01       	movw	r30, r16
     8e0:	64 83       	std	Z+4, r22	; 0x04
     8e2:	75 83       	std	Z+5, r23	; 0x05
     8e4:	86 83       	std	Z+6, r24	; 0x06
     8e6:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 100.0;
     8e8:	b5 01       	movw	r22, r10
     8ea:	bb 0c       	add	r11, r11
     8ec:	88 0b       	sbc	r24, r24
     8ee:	99 0b       	sbc	r25, r25
     8f0:	0e 94 3c 23 	call	0x4678	; 0x4678 <__floatsisf>
     8f4:	20 e0       	ldi	r18, 0x00	; 0
     8f6:	30 e0       	ldi	r19, 0x00	; 0
     8f8:	48 ec       	ldi	r20, 0xC8	; 200
     8fa:	52 e4       	ldi	r21, 0x42	; 66
     8fc:	0e 94 a6 22 	call	0x454c	; 0x454c <__divsf3>
     900:	f8 01       	movw	r30, r16
     902:	60 87       	std	Z+8, r22	; 0x08
     904:	71 87       	std	Z+9, r23	; 0x09
     906:	82 87       	std	Z+10, r24	; 0x0a
     908:	93 87       	std	Z+11, r25	; 0x0b
    break;
  }

  return xyz;
}
     90a:	c8 01       	movw	r24, r16
     90c:	26 96       	adiw	r28, 0x06	; 6
     90e:	0f b6       	in	r0, 0x3f	; 63
     910:	f8 94       	cli
     912:	de bf       	out	0x3e, r29	; 62
     914:	0f be       	out	0x3f, r0	; 63
     916:	cd bf       	out	0x3d, r28	; 61
     918:	df 91       	pop	r29
     91a:	cf 91       	pop	r28
     91c:	1f 91       	pop	r17
     91e:	0f 91       	pop	r16
     920:	ff 90       	pop	r15
     922:	df 90       	pop	r13
     924:	cf 90       	pop	r12
     926:	bf 90       	pop	r11
     928:	af 90       	pop	r10
     92a:	08 95       	ret

0000092c <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>:
/*!
 *  @brief  Reads the sensor and returns the data as a sensors_event_t
 *  @param  event
 *  @return always returns true
 */
bool Adafruit_BNO055::getEvent(sensors_event_t *event) {
     92c:	0f 93       	push	r16
     92e:	1f 93       	push	r17
     930:	cf 93       	push	r28
     932:	df 93       	push	r29
     934:	cd b7       	in	r28, 0x3d	; 61
     936:	de b7       	in	r29, 0x3e	; 62
     938:	2c 97       	sbiw	r28, 0x0c	; 12
     93a:	0f b6       	in	r0, 0x3f	; 63
     93c:	f8 94       	cli
     93e:	de bf       	out	0x3e, r29	; 62
     940:	0f be       	out	0x3f, r0	; 63
     942:	cd bf       	out	0x3d, r28	; 61
     944:	8b 01       	movw	r16, r22
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
     946:	20 e2       	ldi	r18, 0x20	; 32
     948:	fb 01       	movw	r30, r22
     94a:	11 92       	st	Z+, r1
     94c:	2a 95       	dec	r18
     94e:	e9 f7       	brne	.-6      	; 0x94a <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t+0x1e>

  event->version = sizeof(sensors_event_t);
     950:	40 e2       	ldi	r20, 0x20	; 32
     952:	50 e0       	ldi	r21, 0x00	; 0
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	f8 01       	movw	r30, r16
     95a:	40 83       	st	Z, r20
     95c:	51 83       	std	Z+1, r21	; 0x01
     95e:	62 83       	std	Z+2, r22	; 0x02
     960:	73 83       	std	Z+3, r23	; 0x03
  event->sensor_id = _sensorID;
     962:	fc 01       	movw	r30, r24
     964:	46 81       	ldd	r20, Z+6	; 0x06
     966:	57 81       	ldd	r21, Z+7	; 0x07
     968:	60 85       	ldd	r22, Z+8	; 0x08
     96a:	71 85       	ldd	r23, Z+9	; 0x09
     96c:	f8 01       	movw	r30, r16
     96e:	44 83       	std	Z+4, r20	; 0x04
     970:	55 83       	std	Z+5, r21	; 0x05
     972:	66 83       	std	Z+6, r22	; 0x06
     974:	77 83       	std	Z+7, r23	; 0x07
  event->type = SENSOR_TYPE_ORIENTATION;
     976:	43 e0       	ldi	r20, 0x03	; 3
     978:	50 e0       	ldi	r21, 0x00	; 0
     97a:	60 e0       	ldi	r22, 0x00	; 0
     97c:	70 e0       	ldi	r23, 0x00	; 0
     97e:	40 87       	std	Z+8, r20	; 0x08
     980:	51 87       	std	Z+9, r21	; 0x09
     982:	62 87       	std	Z+10, r22	; 0x0a
     984:	73 87       	std	Z+11, r23	; 0x0b
  //event->timestamp = millis();

  /* Get a Euler angle sample for orientation */
  AdafruitImu::Vector<3> euler = getVector(Adafruit_BNO055::VECTOR_EULER);
     986:	4a e1       	ldi	r20, 0x1A	; 26
     988:	bc 01       	movw	r22, r24
     98a:	ce 01       	movw	r24, r28
     98c:	01 96       	adiw	r24, 0x01	; 1
     98e:	38 de       	rcall	.-912    	; 0x600 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
  event->orientation.x = euler.x();
     990:	89 81       	ldd	r24, Y+1	; 0x01
     992:	9a 81       	ldd	r25, Y+2	; 0x02
     994:	ab 81       	ldd	r26, Y+3	; 0x03
     996:	bc 81       	ldd	r27, Y+4	; 0x04
     998:	f8 01       	movw	r30, r16
     99a:	80 8b       	std	Z+16, r24	; 0x10
     99c:	91 8b       	std	Z+17, r25	; 0x11
     99e:	a2 8b       	std	Z+18, r26	; 0x12
     9a0:	b3 8b       	std	Z+19, r27	; 0x13
  event->orientation.y = euler.y();
     9a2:	8d 81       	ldd	r24, Y+5	; 0x05
     9a4:	9e 81       	ldd	r25, Y+6	; 0x06
     9a6:	af 81       	ldd	r26, Y+7	; 0x07
     9a8:	b8 85       	ldd	r27, Y+8	; 0x08
     9aa:	84 8b       	std	Z+20, r24	; 0x14
     9ac:	95 8b       	std	Z+21, r25	; 0x15
     9ae:	a6 8b       	std	Z+22, r26	; 0x16
     9b0:	b7 8b       	std	Z+23, r27	; 0x17
  event->orientation.z = euler.z();
     9b2:	89 85       	ldd	r24, Y+9	; 0x09
     9b4:	9a 85       	ldd	r25, Y+10	; 0x0a
     9b6:	ab 85       	ldd	r26, Y+11	; 0x0b
     9b8:	bc 85       	ldd	r27, Y+12	; 0x0c
     9ba:	80 8f       	std	Z+24, r24	; 0x18
     9bc:	91 8f       	std	Z+25, r25	; 0x19
     9be:	a2 8f       	std	Z+26, r26	; 0x1a
     9c0:	b3 8f       	std	Z+27, r27	; 0x1b

  return true;
}
     9c2:	81 e0       	ldi	r24, 0x01	; 1
     9c4:	2c 96       	adiw	r28, 0x0c	; 12
     9c6:	0f b6       	in	r0, 0x3f	; 63
     9c8:	f8 94       	cli
     9ca:	de bf       	out	0x3e, r29	; 62
     9cc:	0f be       	out	0x3f, r0	; 63
     9ce:	cd bf       	out	0x3d, r28	; 61
     9d0:	df 91       	pop	r29
     9d2:	cf 91       	pop	r28
     9d4:	1f 91       	pop	r17
     9d6:	0f 91       	pop	r16
     9d8:	08 95       	ret

000009da <_Z14RunPingCommandPKhh>:
  }
  
  EtherComm::SendCommand(CMD_Echo, dataLen);
}
//TODO remove this command from both devices
void RunLedCommand(const uint8_t* data, uint8_t len){
     9da:	61 30       	cpi	r22, 0x01	; 1
     9dc:	49 f4       	brne	.+18     	; 0x9f0 <_Z14RunPingCommandPKhh+0x16>
     9de:	fc 01       	movw	r30, r24
     9e0:	80 81       	ld	r24, Z
     9e2:	e0 91 88 03 	lds	r30, 0x0388	; 0x800388 <__data_end>
     9e6:	f0 91 89 03 	lds	r31, 0x0389	; 0x800389 <__data_end+0x1>
     9ea:	80 83       	st	Z, r24
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	ac c6       	rjmp	.+3416   	; 0x1748 <_ZN9EtherComm11SendCommandEhh>
     9f0:	08 95       	ret

000009f2 <_Z14RunEchoCommandPKhh>:
     9f2:	40 91 88 03 	lds	r20, 0x0388	; 0x800388 <__data_end>
     9f6:	30 91 89 03 	lds	r19, 0x0389	; 0x800389 <__data_end+0x1>
     9fa:	2f ef       	ldi	r18, 0xFF	; 255
     9fc:	26 0f       	add	r18, r22
     9fe:	66 23       	and	r22, r22
     a00:	41 f0       	breq	.+16     	; 0xa12 <_Z14RunEchoCommandPKhh+0x20>
     a02:	a8 2f       	mov	r26, r24
     a04:	b9 2f       	mov	r27, r25
     a06:	e4 2f       	mov	r30, r20
     a08:	f3 2f       	mov	r31, r19
     a0a:	8d 91       	ld	r24, X+
     a0c:	81 93       	st	Z+, r24
     a0e:	21 50       	subi	r18, 0x01	; 1
     a10:	e0 f7       	brcc	.-8      	; 0xa0a <_Z14RunEchoCommandPKhh+0x18>
     a12:	81 e0       	ldi	r24, 0x01	; 1
     a14:	99 c6       	rjmp	.+3378   	; 0x1748 <_ZN9EtherComm11SendCommandEhh>
     a16:	08 95       	ret

00000a18 <_ZN9EtherComm15CommandReceivedEhPKhh>:
			//todo REMOVE COMMAND
		}
	}
}

void EtherComm::CommandReceived(uint8_t command, const uint8_t* data, uint8_t len){
     a18:	9b 01       	movw	r18, r22
  switch(command){
     a1a:	81 30       	cpi	r24, 0x01	; 1
     a1c:	41 f0       	breq	.+16     	; 0xa2e <_ZN9EtherComm15CommandReceivedEhPKhh+0x16>
     a1e:	18 f0       	brcs	.+6      	; 0xa26 <_ZN9EtherComm15CommandReceivedEhPKhh+0xe>
     a20:	83 30       	cpi	r24, 0x03	; 3
     a22:	49 f0       	breq	.+18     	; 0xa36 <_ZN9EtherComm15CommandReceivedEhPKhh+0x1e>
     a24:	08 95       	ret
    case CMD_Ping: RunPingCommand(data, len); break;
     a26:	64 2f       	mov	r22, r20
     a28:	c9 01       	movw	r24, r18
     a2a:	d7 cf       	rjmp	.-82     	; 0x9da <_Z14RunPingCommandPKhh>
     a2c:	08 95       	ret
    case CMD_Echo: RunEchoCommand(data, len); break;
     a2e:	64 2f       	mov	r22, r20
     a30:	c9 01       	movw	r24, r18
     a32:	df cf       	rjmp	.-66     	; 0x9f2 <_Z14RunEchoCommandPKhh>
     a34:	08 95       	ret
	case CMD_Led: RunLedCommand(data, len); break;
	case CMD_UpdateDevice: rov.CommandReceived(data, len); break;
     a36:	64 2f       	mov	r22, r20
     a38:	c9 01       	movw	r24, r18
     a3a:	0c 94 75 1f 	jmp	0x3eea	; 0x3eea <_ZN5Robot15CommandReceivedEPKhh>
     a3e:	08 95       	ret

00000a40 <_GLOBAL__sub_I__Z14RunPingCommandPKhh>:
#include "EtherComm.h"
#include "Robot.h"
#include "Commands.h"
#include <stddef.h>

uint8_t* const SendDataBuffer = (uint8_t*)(&EtherComm::buffer[2]);
     a40:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
     a44:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
     a48:	02 96       	adiw	r24, 0x02	; 2
     a4a:	90 93 89 03 	sts	0x0389, r25	; 0x800389 <__data_end+0x1>
     a4e:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <__data_end>
     a52:	08 95       	ret

00000a54 <_ZL10enableChipv>:
static Register* selectPort;
static uint8_t selectPin;

static void enableChip () {
	//cli();
	SetLow(*selectPort, selectPin); //digitalWrite(selectPin, LOW);
     a54:	e0 91 8e 03 	lds	r30, 0x038E	; 0x80038e <_ZL10selectPort>
     a58:	f0 91 8f 03 	lds	r31, 0x038F	; 0x80038f <_ZL10selectPort+0x1>
     a5c:	90 81       	ld	r25, Z
     a5e:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <_ZL9selectPin>
     a62:	80 95       	com	r24
     a64:	89 23       	and	r24, r25
     a66:	80 83       	st	Z, r24
     a68:	08 95       	ret

00000a6a <_ZL11disableChipv>:
}

static void disableChip () {
	SetHigh(*selectPort, selectPin); //digitalWrite(selectPin, HIGH);
     a6a:	e0 91 8e 03 	lds	r30, 0x038E	; 0x80038e <_ZL10selectPort>
     a6e:	f0 91 8f 03 	lds	r31, 0x038F	; 0x80038f <_ZL10selectPort+0x1>
     a72:	90 81       	ld	r25, Z
     a74:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <_ZL9selectPin>
     a78:	89 2b       	or	r24, r25
     a7a:	80 83       	st	Z, r24
     a7c:	08 95       	ret

00000a7e <_ZL6readOphh>:

	SetOutput(csDDR, selectPin);
	disableChip();
}

static uint8_t readOp (uint8_t op, uint8_t address) {
     a7e:	cf 93       	push	r28
     a80:	df 93       	push	r29
     a82:	d8 2f       	mov	r29, r24
     a84:	c6 2f       	mov	r28, r22
    enableChip();
     a86:	e6 df       	rcall	.-52     	; 0xa54 <_ZL10enableChipv>
    SPI.write8(op | (address & ADDR_MASK));
     a88:	8c 2f       	mov	r24, r28
     a8a:	cf 71       	andi	r28, 0x1F	; 31
     a8c:	cd 2b       	or	r28, r29
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     a8e:	ce bd       	out	0x2e, r28	; 46
		asm volatile("nop");
     a90:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     a92:	0d b4       	in	r0, 0x2d	; 45
     a94:	07 fe       	sbrs	r0, 7
     a96:	fd cf       	rjmp	.-6      	; 0xa92 <_ZL6readOphh+0x14>
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     a98:	1e bc       	out	0x2e, r1	; 46
		asm volatile("nop");
     a9a:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     a9c:	0d b4       	in	r0, 0x2d	; 45
     a9e:	07 fe       	sbrs	r0, 7
     aa0:	fd cf       	rjmp	.-6      	; 0xa9c <_ZL6readOphh+0x1e>
	}

	//write8, excepts also returns the received byte
	static uint8_t read_write8(uint8_t data){
		write8(data);
		return SPDR;
     aa2:	ce b5       	in	r28, 0x2e	; 46
    uint8_t result = SPI.read_write8(0x00);
    if (address & 0x80)
     aa4:	88 23       	and	r24, r24
     aa6:	34 f4       	brge	.+12     	; 0xab4 <_ZL6readOphh+0x36>
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     aa8:	1e bc       	out	0x2e, r1	; 46
		asm volatile("nop");
     aaa:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     aac:	0d b4       	in	r0, 0x2d	; 45
     aae:	07 fe       	sbrs	r0, 7
     ab0:	fd cf       	rjmp	.-6      	; 0xaac <_ZL6readOphh+0x2e>
        result = SPI.read_write8(0x00);
    disableChip();
     ab2:	ce b5       	in	r28, 0x2e	; 46
     ab4:	da df       	rcall	.-76     	; 0xa6a <_ZL11disableChipv>
    return result;
}
     ab6:	8c 2f       	mov	r24, r28
     ab8:	df 91       	pop	r29
     aba:	cf 91       	pop	r28
     abc:	08 95       	ret

00000abe <_ZL7writeOphhh>:

static void writeOp (uint8_t op, uint8_t address, uint8_t data) {
     abe:	1f 93       	push	r17
     ac0:	cf 93       	push	r28
     ac2:	df 93       	push	r29
     ac4:	c8 2f       	mov	r28, r24
     ac6:	d6 2f       	mov	r29, r22
     ac8:	14 2f       	mov	r17, r20
    enableChip();
     aca:	c4 df       	rcall	.-120    	; 0xa54 <_ZL10enableChipv>
    SPI.write8(op | (address & ADDR_MASK));
     acc:	df 71       	andi	r29, 0x1F	; 31
     ace:	cd 2b       	or	r28, r29
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     ad0:	ce bd       	out	0x2e, r28	; 46
		asm volatile("nop");
     ad2:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     ad4:	0d b4       	in	r0, 0x2d	; 45
     ad6:	07 fe       	sbrs	r0, 7
     ad8:	fd cf       	rjmp	.-6      	; 0xad4 <_ZL7writeOphhh+0x16>
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     ada:	1e bd       	out	0x2e, r17	; 46
		asm volatile("nop");
     adc:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     ade:	0d b4       	in	r0, 0x2d	; 45
     ae0:	07 fe       	sbrs	r0, 7
    SPI.write8(data);
    disableChip();
     ae2:	fd cf       	rjmp	.-6      	; 0xade <_ZL7writeOphhh+0x20>
     ae4:	c2 df       	rcall	.-124    	; 0xa6a <_ZL11disableChipv>
}
     ae6:	df 91       	pop	r29
     ae8:	cf 91       	pop	r28
     aea:	1f 91       	pop	r17
     aec:	08 95       	ret

00000aee <_ZL7readBufjPh>:

static void readBuf(uint16_t len, uint8_t* data) {
     aee:	0f 93       	push	r16
     af0:	1f 93       	push	r17
     af2:	cf 93       	push	r28
     af4:	df 93       	push	r29
     af6:	ec 01       	movw	r28, r24
     af8:	8b 01       	movw	r16, r22
    enableChip();
     afa:	ac df       	rcall	.-168    	; 0xa54 <_ZL10enableChipv>
    if (len != 0) {
     afc:	20 97       	sbiw	r28, 0x00	; 0
     afe:	99 f0       	breq	.+38     	; 0xb26 <_ZL7readBufjPh+0x38>
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     b00:	8a e3       	ldi	r24, 0x3A	; 58
     b02:	8e bd       	out	0x2e, r24	; 46
		asm volatile("nop");
     b04:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     b06:	0d b4       	in	r0, 0x2d	; 45
     b08:	07 fe       	sbrs	r0, 7
     b0a:	fd cf       	rjmp	.-6      	; 0xb06 <_ZL7readBufjPh+0x18>
     b0c:	f8 01       	movw	r30, r16
     b0e:	b8 01       	movw	r22, r16
     b10:	6c 0f       	add	r22, r28
     b12:	7d 1f       	adc	r23, r29
	static void read(void *buf, uint16_t nbyte, uint8_t dataSend = 0){
		if(nbyte == 0) return;
		
		uint8_t* buff = (uint8_t*)buf;
		while(nbyte--){
			SPDR = dataSend;
     b14:	1e bc       	out	0x2e, r1	; 46
			//asm volatile("nop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\n");
			while(!(SPSR & _BV(SPIF)));
     b16:	0d b4       	in	r0, 0x2d	; 45
     b18:	07 fe       	sbrs	r0, 7
     b1a:	fd cf       	rjmp	.-6      	; 0xb16 <_ZL7readBufjPh+0x28>
			*buff++ = SPDR;
     b1c:	9e b5       	in	r25, 0x2e	; 46
     b1e:	91 93       	st	Z+, r25
		
	static void read(void *buf, uint16_t nbyte, uint8_t dataSend = 0){
		if(nbyte == 0) return;
		
		uint8_t* buff = (uint8_t*)buf;
		while(nbyte--){
     b20:	6e 17       	cp	r22, r30
     b22:	7f 07       	cpc	r23, r31
        SPI.write8(ENC28J60_READ_BUF_MEM);
		SPI.read(data, len);
    }
    disableChip();
     b24:	b9 f7       	brne	.-18     	; 0xb14 <_ZL7readBufjPh+0x26>
     b26:	a1 df       	rcall	.-190    	; 0xa6a <_ZL11disableChipv>
}
     b28:	df 91       	pop	r29
     b2a:	cf 91       	pop	r28
     b2c:	1f 91       	pop	r17
     b2e:	0f 91       	pop	r16
     b30:	08 95       	ret

00000b32 <_ZL7SetBankh>:
        SPI.write(data, len);
    }
    disableChip();
}

static void SetBank (uint8_t address) {
     b32:	1f 93       	push	r17
     b34:	cf 93       	push	r28
     b36:	df 93       	push	r29
     b38:	18 2f       	mov	r17, r24
     b3a:	10 76       	andi	r17, 0x60	; 96
    if ((address & BANK_MASK) != Enc28j60Bank) {
     b3c:	c1 2f       	mov	r28, r17
     b3e:	d0 e0       	ldi	r29, 0x00	; 0
     b40:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <_ZL12Enc28j60Bank>
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	c8 17       	cp	r28, r24
     b48:	d9 07       	cpc	r29, r25
     b4a:	a1 f0       	breq	.+40     	; 0xb74 <_ZL7SetBankh+0x42>
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_BSEL1|ECON1_BSEL0);
     b4c:	43 e0       	ldi	r20, 0x03	; 3
     b4e:	6f e1       	ldi	r22, 0x1F	; 31
     b50:	80 ea       	ldi	r24, 0xA0	; 160
     b52:	b5 df       	rcall	.-150    	; 0xabe <_ZL7writeOphhh>
        Enc28j60Bank = address & BANK_MASK;
     b54:	10 93 90 03 	sts	0x0390, r17	; 0x800390 <_ZL12Enc28j60Bank>
        writeOp(ENC28J60_BIT_FIELD_SET, ECON1, Enc28j60Bank>>5);
     b58:	ae 01       	movw	r20, r28
     b5a:	55 95       	asr	r21
     b5c:	47 95       	ror	r20
     b5e:	55 95       	asr	r21
     b60:	47 95       	ror	r20
     b62:	55 95       	asr	r21
     b64:	47 95       	ror	r20
     b66:	55 95       	asr	r21
     b68:	47 95       	ror	r20
     b6a:	55 95       	asr	r21
     b6c:	47 95       	ror	r20
     b6e:	6f e1       	ldi	r22, 0x1F	; 31
     b70:	80 e8       	ldi	r24, 0x80	; 128
     b72:	a5 df       	rcall	.-182    	; 0xabe <_ZL7writeOphhh>
    }
}
     b74:	df 91       	pop	r29
     b76:	cf 91       	pop	r28
     b78:	1f 91       	pop	r17
     b7a:	08 95       	ret

00000b7c <_ZL11readRegByteh>:

static uint8_t readRegByte (uint8_t address) {
     b7c:	cf 93       	push	r28
     b7e:	c8 2f       	mov	r28, r24
    SetBank(address);
     b80:	d8 df       	rcall	.-80     	; 0xb32 <_ZL7SetBankh>
    return readOp(ENC28J60_READ_CTRL_REG, address);
     b82:	6c 2f       	mov	r22, r28
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	7b df       	rcall	.-266    	; 0xa7e <_ZL6readOphh>
}
     b88:	cf 91       	pop	r28
     b8a:	08 95       	ret

00000b8c <_ZL12writeRegBytehh>:

static void writeRegByte (uint8_t address, uint8_t data) {
     b8c:	cf 93       	push	r28
     b8e:	df 93       	push	r29
     b90:	c8 2f       	mov	r28, r24
     b92:	d6 2f       	mov	r29, r22
    SetBank(address);
     b94:	ce df       	rcall	.-100    	; 0xb32 <_ZL7SetBankh>
    writeOp(ENC28J60_WRITE_CTRL_REG, address, data);
     b96:	4d 2f       	mov	r20, r29
     b98:	6c 2f       	mov	r22, r28
     b9a:	80 e4       	ldi	r24, 0x40	; 64
     b9c:	90 df       	rcall	.-224    	; 0xabe <_ZL7writeOphhh>
}
     b9e:	df 91       	pop	r29
     ba0:	cf 91       	pop	r28
     ba2:	08 95       	ret

00000ba4 <_ZL8writeReghj>:

static void writeReg(uint8_t address, uint16_t data) {
     ba4:	cf 93       	push	r28
     ba6:	df 93       	push	r29
     ba8:	c8 2f       	mov	r28, r24
     baa:	d7 2f       	mov	r29, r23
    writeRegByte(address, data);
     bac:	ef df       	rcall	.-34     	; 0xb8c <_ZL12writeRegBytehh>
    writeRegByte(address + 1, data >> 8);
     bae:	6d 2f       	mov	r22, r29
     bb0:	81 e0       	ldi	r24, 0x01	; 1
     bb2:	8c 0f       	add	r24, r28
     bb4:	eb df       	rcall	.-42     	; 0xb8c <_ZL12writeRegBytehh>
}
     bb6:	df 91       	pop	r29
     bb8:	cf 91       	pop	r28
     bba:	08 95       	ret

00000bbc <_ZN8ENC28J607initSPIERVh>:
static void disableChip () {
	SetHigh(*selectPort, selectPin); //digitalWrite(selectPin, HIGH);
	//sei();
}

void ENC28J60::initSPI (Register& csDDR) {
     bbc:	fc 01       	movw	r30, r24

class SPI{
public:
	static void begin(uint8_t clock = SPI_CLOCK_DIV2){
		//SPI_DIR |= SS;
		DDR_SPI |= MASK_MOSI | MASK_SCK | MASK_SS; //Not sure why, but SS pin requires to be set as output even when not being used.
     bbe:	94 b1       	in	r25, 0x04	; 4
     bc0:	97 60       	ori	r25, 0x07	; 7
     bc2:	94 b9       	out	0x04, r25	; 4
		DDR_SPI &= ~(MASK_MISO);
     bc4:	23 98       	cbi	0x04, 3	; 4
		//disableCS();

		SPSR |= (clock >> 2);
     bc6:	9d b5       	in	r25, 0x2d	; 45
     bc8:	91 60       	ori	r25, 0x01	; 1
     bca:	9d bd       	out	0x2d, r25	; 45
		SPCR |= _BV(MSTR) | _BV(SPE) | (clock & 0x03);
     bcc:	9c b5       	in	r25, 0x2c	; 44
     bce:	90 65       	ori	r25, 0x50	; 80
     bd0:	9c bd       	out	0x2c, r25	; 44
	SPI.begin(SPI_CLOCK_DIV2);

	SetOutput(csDDR, selectPin);
     bd2:	80 81       	ld	r24, Z
     bd4:	90 91 8d 03 	lds	r25, 0x038D	; 0x80038d <_ZL9selectPin>
     bd8:	98 2b       	or	r25, r24
     bda:	90 83       	st	Z, r25
	disableChip();
     bdc:	46 cf       	rjmp	.-372    	; 0xa6a <_ZL11disableChipv>
     bde:	08 95       	ret

00000be0 <_ZN8ENC28J6010initializeEjPKhRVhS3_h>:
    writeReg(MIWR, data);
    while (readRegByte(MISTAT) & MISTAT_BUSY)
        ;
}

uint8_t ENC28J60::initialize (uint16_t size, const uint8_t* macaddr, Register& csDDR, Register& csPort, uint8_t csPin) {
     be0:	0f 93       	push	r16
     be2:	cf 93       	push	r28
     be4:	df 93       	push	r29
     be6:	eb 01       	movw	r28, r22
    bufferSize = size;
     be8:	90 93 92 03 	sts	0x0392, r25	; 0x800392 <_ZN8ENC28J6010bufferSizeE+0x1>
     bec:	80 93 91 03 	sts	0x0391, r24	; 0x800391 <_ZN8ENC28J6010bufferSizeE>
	selectPin = csPin;
     bf0:	00 93 8d 03 	sts	0x038D, r16	; 0x80038d <_ZL9selectPin>
	selectPort = &csPort;
     bf4:	30 93 8f 03 	sts	0x038F, r19	; 0x80038f <_ZL10selectPort+0x1>
     bf8:	20 93 8e 03 	sts	0x038E, r18	; 0x80038e <_ZL10selectPort>
    initSPI(csDDR);
     bfc:	ca 01       	movw	r24, r20
     bfe:	de df       	rcall	.-68     	; 0xbbc <_ZN8ENC28J607initSPIERVh>

    writeOp(ENC28J60_SOFT_RESET, 0, ENC28J60_SOFT_RESET);
     c00:	4f ef       	ldi	r20, 0xFF	; 255
     c02:	60 e0       	ldi	r22, 0x00	; 0
     c04:	8f ef       	ldi	r24, 0xFF	; 255
     c06:	5b df       	rcall	.-330    	; 0xabe <_ZL7writeOphhh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c08:	8f e3       	ldi	r24, 0x3F	; 63
     c0a:	9f e1       	ldi	r25, 0x1F	; 31
     c0c:	01 97       	sbiw	r24, 0x01	; 1
     c0e:	f1 f7       	brne	.-4      	; 0xc0c <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0x2c>
     c10:	00 c0       	rjmp	.+0      	; 0xc12 <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0x32>
     c12:	00 00       	nop
	_delay_ms(2);
    while (!readOp(ENC28J60_READ_CTRL_REG, ESTAT) & ESTAT_CLKRDY)
     c14:	6d e1       	ldi	r22, 0x1D	; 29
     c16:	80 e0       	ldi	r24, 0x00	; 0
     c18:	32 df       	rcall	.-412    	; 0xa7e <_ZL6readOphh>
     c1a:	88 23       	and	r24, r24
     c1c:	d9 f3       	breq	.-10     	; 0xc14 <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0x34>
        ;

    writeReg(ERXST, RXSTART_INIT);
     c1e:	60 e0       	ldi	r22, 0x00	; 0
     c20:	70 e0       	ldi	r23, 0x00	; 0
     c22:	88 e0       	ldi	r24, 0x08	; 8
     c24:	bf df       	rcall	.-130    	; 0xba4 <_ZL8writeReghj>
    writeReg(ERXRDPT, RXSTART_INIT);
     c26:	60 e0       	ldi	r22, 0x00	; 0
     c28:	70 e0       	ldi	r23, 0x00	; 0
     c2a:	8c e0       	ldi	r24, 0x0C	; 12
     c2c:	bb df       	rcall	.-138    	; 0xba4 <_ZL8writeReghj>
    writeReg(ERXND, RXSTOP_INIT);
     c2e:	6f ef       	ldi	r22, 0xFF	; 255
     c30:	7b e0       	ldi	r23, 0x0B	; 11
     c32:	8a e0       	ldi	r24, 0x0A	; 10
     c34:	b7 df       	rcall	.-146    	; 0xba4 <_ZL8writeReghj>
    writeReg(ETXST, TXSTART_INIT);
     c36:	60 e0       	ldi	r22, 0x00	; 0
     c38:	7c e0       	ldi	r23, 0x0C	; 12
     c3a:	84 e0       	ldi	r24, 0x04	; 4
     c3c:	b3 df       	rcall	.-154    	; 0xba4 <_ZL8writeReghj>
    writeReg(ETXND, TXSTOP_INIT);
     c3e:	6f ef       	ldi	r22, 0xFF	; 255
     c40:	71 e1       	ldi	r23, 0x11	; 17
     c42:	86 e0       	ldi	r24, 0x06	; 6
     c44:	af df       	rcall	.-162    	; 0xba4 <_ZL8writeReghj>

    writeRegByte(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN|ERXFCON_PMEN|ERXFCON_BCEN);
     c46:	61 eb       	ldi	r22, 0xB1	; 177
     c48:	88 e3       	ldi	r24, 0x38	; 56
     c4a:	a0 df       	rcall	.-192    	; 0xb8c <_ZL12writeRegBytehh>
    writeReg(EPMM0, 0x303f);
     c4c:	6f e3       	ldi	r22, 0x3F	; 63
     c4e:	70 e3       	ldi	r23, 0x30	; 48
     c50:	88 e2       	ldi	r24, 0x28	; 40
     c52:	a8 df       	rcall	.-176    	; 0xba4 <_ZL8writeReghj>
    writeReg(EPMCS, 0xf7f9);
     c54:	69 ef       	ldi	r22, 0xF9	; 249
     c56:	77 ef       	ldi	r23, 0xF7	; 247
     c58:	80 e3       	ldi	r24, 0x30	; 48
     c5a:	a4 df       	rcall	.-184    	; 0xba4 <_ZL8writeReghj>
    writeRegByte(MACON1, MACON1_MARXEN);
     c5c:	61 e0       	ldi	r22, 0x01	; 1
     c5e:	80 ec       	ldi	r24, 0xC0	; 192
     c60:	95 df       	rcall	.-214    	; 0xb8c <_ZL12writeRegBytehh>
    writeOp(ENC28J60_BIT_FIELD_SET, MACON3,
            MACON3_PADCFG0|MACON3_TXCRCEN|MACON3_FRMLNEN);
     c62:	42 e3       	ldi	r20, 0x32	; 50
     c64:	62 ec       	ldi	r22, 0xC2	; 194
     c66:	80 e8       	ldi	r24, 0x80	; 128
     c68:	2a df       	rcall	.-428    	; 0xabe <_ZL7writeOphhh>
    writeReg(MAIPG, 0x0C12);
     c6a:	62 e1       	ldi	r22, 0x12	; 18
     c6c:	7c e0       	ldi	r23, 0x0C	; 12
     c6e:	86 ec       	ldi	r24, 0xC6	; 198
    writeRegByte(MABBIPG, 0x12);
     c70:	99 df       	rcall	.-206    	; 0xba4 <_ZL8writeReghj>
     c72:	62 e1       	ldi	r22, 0x12	; 18
     c74:	84 ec       	ldi	r24, 0xC4	; 196
    writeReg(MAMXFL, MAX_FRAMELEN);
     c76:	8a df       	rcall	.-236    	; 0xb8c <_ZL12writeRegBytehh>
     c78:	6c ed       	ldi	r22, 0xDC	; 220
     c7a:	75 e0       	ldi	r23, 0x05	; 5
    writeRegByte(MAADR5, macaddr[0]);
     c7c:	8a ec       	ldi	r24, 0xCA	; 202
     c7e:	92 df       	rcall	.-220    	; 0xba4 <_ZL8writeReghj>
     c80:	68 81       	ld	r22, Y
    writeRegByte(MAADR4, macaddr[1]);
     c82:	84 ee       	ldi	r24, 0xE4	; 228
     c84:	83 df       	rcall	.-250    	; 0xb8c <_ZL12writeRegBytehh>
     c86:	69 81       	ldd	r22, Y+1	; 0x01
    writeRegByte(MAADR3, macaddr[2]);
     c88:	85 ee       	ldi	r24, 0xE5	; 229
     c8a:	80 df       	rcall	.-256    	; 0xb8c <_ZL12writeRegBytehh>
    writeRegByte(MAADR2, macaddr[3]);
     c8c:	6a 81       	ldd	r22, Y+2	; 0x02
     c8e:	82 ee       	ldi	r24, 0xE2	; 226
     c90:	7d df       	rcall	.-262    	; 0xb8c <_ZL12writeRegBytehh>
    writeRegByte(MAADR1, macaddr[4]);
     c92:	6b 81       	ldd	r22, Y+3	; 0x03
     c94:	83 ee       	ldi	r24, 0xE3	; 227
     c96:	7a df       	rcall	.-268    	; 0xb8c <_ZL12writeRegBytehh>
    writeRegByte(MAADR0, macaddr[5]);
     c98:	6c 81       	ldd	r22, Y+4	; 0x04
     c9a:	80 ee       	ldi	r24, 0xE0	; 224
     c9c:	77 df       	rcall	.-274    	; 0xb8c <_ZL12writeRegBytehh>
    writeRegByte(MICMD, 0x00);
    return readRegByte(MIRD+1);
}

static void writePhy (uint8_t address, uint16_t data) {
    writeRegByte(MIREGADR, address);
     c9e:	6d 81       	ldd	r22, Y+5	; 0x05
     ca0:	81 ee       	ldi	r24, 0xE1	; 225
     ca2:	74 df       	rcall	.-280    	; 0xb8c <_ZL12writeRegBytehh>
    writeReg(MIWR, data);
     ca4:	60 e1       	ldi	r22, 0x10	; 16
     ca6:	84 ed       	ldi	r24, 0xD4	; 212
     ca8:	71 df       	rcall	.-286    	; 0xb8c <_ZL12writeRegBytehh>
     caa:	60 e0       	ldi	r22, 0x00	; 0
     cac:	71 e0       	ldi	r23, 0x01	; 1
    while (readRegByte(MISTAT) & MISTAT_BUSY)
     cae:	86 ed       	ldi	r24, 0xD6	; 214
     cb0:	79 df       	rcall	.-270    	; 0xba4 <_ZL8writeReghj>
     cb2:	8a ee       	ldi	r24, 0xEA	; 234
     cb4:	63 df       	rcall	.-314    	; 0xb7c <_ZL11readRegByteh>
     cb6:	80 fd       	sbrc	r24, 0
    writeRegByte(MAADR3, macaddr[2]);
    writeRegByte(MAADR2, macaddr[3]);
    writeRegByte(MAADR1, macaddr[4]);
    writeRegByte(MAADR0, macaddr[5]);
    writePhy(PHCON2, PHCON2_HDLDIS);
    SetBank(ECON1);
     cb8:	fc cf       	rjmp	.-8      	; 0xcb2 <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0xd2>
     cba:	8f e1       	ldi	r24, 0x1F	; 31
     cbc:	3a df       	rcall	.-396    	; 0xb32 <_ZL7SetBankh>
    writeOp(ENC28J60_BIT_FIELD_SET, EIE, EIE_INTIE|EIE_PKTIE);
     cbe:	40 ec       	ldi	r20, 0xC0	; 192
     cc0:	6b e1       	ldi	r22, 0x1B	; 27
     cc2:	80 e8       	ldi	r24, 0x80	; 128
     cc4:	fc de       	rcall	.-520    	; 0xabe <_ZL7writeOphhh>
     cc6:	44 e0       	ldi	r20, 0x04	; 4
    writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN);
     cc8:	6f e1       	ldi	r22, 0x1F	; 31
     cca:	80 e8       	ldi	r24, 0x80	; 128
     ccc:	f8 de       	rcall	.-528    	; 0xabe <_ZL7writeOphhh>
     cce:	82 e7       	ldi	r24, 0x72	; 114
     cd0:	55 df       	rcall	.-342    	; 0xb7c <_ZL11readRegByteh>

    uint8_t rev = readRegByte(EREVID);
     cd2:	86 30       	cpi	r24, 0x06	; 6
     cd4:	08 f0       	brcs	.+2      	; 0xcd8 <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0xf8>
     cd6:	8f 5f       	subi	r24, 0xFF	; 255
    // microchip forgot to step the number on the silicon when they
    // released the revision B7. 6 is now rev B7. We still have
    // to see what they do when they release B8. At the moment
    // there is no B8 out yet
    if (rev > 5) ++rev;
     cd8:	df 91       	pop	r29
     cda:	cf 91       	pop	r28
     cdc:	0f 91       	pop	r16
    return rev;
}
     cde:	08 95       	ret

00000ce0 <_ZN8ENC28J608isLinkUpEv>:
     ce0:	61 e1       	ldi	r22, 0x11	; 17
     ce2:	84 ed       	ldi	r24, 0xD4	; 212
     ce4:	53 df       	rcall	.-346    	; 0xb8c <_ZL12writeRegBytehh>
    writeRegByte(address + 1, data >> 8);
}

static uint16_t readPhyByte (uint8_t address) {
    writeRegByte(MIREGADR, address);
    writeRegByte(MICMD, MICMD_MIIRD);
     ce6:	61 e0       	ldi	r22, 0x01	; 1
     ce8:	82 ed       	ldi	r24, 0xD2	; 210
     cea:	50 df       	rcall	.-352    	; 0xb8c <_ZL12writeRegBytehh>
    while (readRegByte(MISTAT) & MISTAT_BUSY)
     cec:	8a ee       	ldi	r24, 0xEA	; 234
     cee:	46 df       	rcall	.-372    	; 0xb7c <_ZL11readRegByteh>
     cf0:	80 fd       	sbrc	r24, 0
     cf2:	fc cf       	rjmp	.-8      	; 0xcec <_ZN8ENC28J608isLinkUpEv+0xc>
        ;
    writeRegByte(MICMD, 0x00);
     cf4:	60 e0       	ldi	r22, 0x00	; 0
     cf6:	82 ed       	ldi	r24, 0xD2	; 210
     cf8:	49 df       	rcall	.-366    	; 0xb8c <_ZL12writeRegBytehh>
    return readRegByte(MIRD+1);
     cfa:	89 ed       	ldi	r24, 0xD9	; 217
     cfc:	3f df       	rcall	.-386    	; 0xb7c <_ZL11readRegByteh>
     cfe:	82 fb       	bst	r24, 2
    return rev;
}

bool ENC28J60::isLinkUp() {
    return (readPhyByte(PHSTAT2) >> 2) & 1;
}
     d00:	88 27       	eor	r24, r24
     d02:	80 f9       	bld	r24, 0
     d04:	08 95       	ret

00000d06 <_ZN8ENC28J6010packetSendEj>:
     d06:	af 92       	push	r10

struct transmit_status_vector {
    uint8_t bytes[7];
};

void ENC28J60::packetSend(uint16_t len) {
     d08:	bf 92       	push	r11
     d0a:	cf 92       	push	r12
     d0c:	df 92       	push	r13
     d0e:	ef 92       	push	r14
     d10:	ff 92       	push	r15
     d12:	0f 93       	push	r16
     d14:	1f 93       	push	r17
     d16:	cf 93       	push	r28
     d18:	df 93       	push	r29
     d1a:	7c 01       	movw	r14, r24
        writeOp(ENC28J60_BIT_FIELD_CLR, EIR, EIR_TXERIF|EIR_TXIF);

        // prepare new transmission
        if (retry == 0) {
            writeReg(EWRPT, TXSTART_INIT);
            writeReg(ETXND, TXSTART_INIT+len);
     d1c:	6c 01       	movw	r12, r24
     d1e:	84 ef       	ldi	r24, 0xF4	; 244
     d20:	d8 1a       	sub	r13, r24

	static void write(const void *buf, uint16_t nbyte){
		if(nbyte == 0) return;
		
		const uint8_t* buff = (const uint8_t*)(buf);
		SPDR = *buff;
     d22:	0f 2e       	mov	r0, r31
     d24:	f3 e9       	ldi	r31, 0x93	; 147
     d26:	af 2e       	mov	r10, r31
     d28:	f3 e0       	ldi	r31, 0x03	; 3
     d2a:	bf 2e       	mov	r11, r31
     d2c:	f0 2d       	mov	r31, r0
     d2e:	87 01       	movw	r16, r14
     d30:	0d 56       	subi	r16, 0x6D	; 109
     d32:	1c 4f       	sbci	r17, 0xFC	; 252
        // the Microchip TCP/IP stack implementation used to first check
        // whether TXERIF is set and only then reset the transmit logic
        // but this has been changed in later versions; possibly they
        // have a reason for this; they don't mention this in the errata
        // sheet
        writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRST);
     d34:	40 e8       	ldi	r20, 0x80	; 128
     d36:	6f e1       	ldi	r22, 0x1F	; 31
     d38:	80 e8       	ldi	r24, 0x80	; 128
     d3a:	c1 de       	rcall	.-638    	; 0xabe <_ZL7writeOphhh>
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRST);
     d3c:	40 e8       	ldi	r20, 0x80	; 128
     d3e:	6f e1       	ldi	r22, 0x1F	; 31
     d40:	80 ea       	ldi	r24, 0xA0	; 160
     d42:	bd de       	rcall	.-646    	; 0xabe <_ZL7writeOphhh>
        writeOp(ENC28J60_BIT_FIELD_CLR, EIR, EIR_TXERIF|EIR_TXIF);
     d44:	4a e0       	ldi	r20, 0x0A	; 10
     d46:	6c e1       	ldi	r22, 0x1C	; 28
     d48:	80 ea       	ldi	r24, 0xA0	; 160
     d4a:	b9 de       	rcall	.-654    	; 0xabe <_ZL7writeOphhh>

        // prepare new transmission
        if (retry == 0) {
            writeReg(EWRPT, TXSTART_INIT);
     d4c:	60 e0       	ldi	r22, 0x00	; 0
     d4e:	7c e0       	ldi	r23, 0x0C	; 12
     d50:	82 e0       	ldi	r24, 0x02	; 2
            writeReg(ETXND, TXSTART_INIT+len);
     d52:	28 df       	rcall	.-432    	; 0xba4 <_ZL8writeReghj>
     d54:	b6 01       	movw	r22, r12
     d56:	86 e0       	ldi	r24, 0x06	; 6
            writeOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
     d58:	25 df       	rcall	.-438    	; 0xba4 <_ZL8writeReghj>
     d5a:	40 e0       	ldi	r20, 0x00	; 0
     d5c:	60 e0       	ldi	r22, 0x00	; 0
     d5e:	8a e7       	ldi	r24, 0x7A	; 122
     d60:	ae de       	rcall	.-676    	; 0xabe <_ZL7writeOphhh>
    }
    disableChip();
}

static void writeBuf(uint16_t len, const uint8_t* data) {
    enableChip();
     d62:	78 de       	rcall	.-784    	; 0xa54 <_ZL10enableChipv>
     d64:	e1 14       	cp	r14, r1
    if (len != 0) {
     d66:	f1 04       	cpc	r15, r1
     d68:	e1 f0       	breq	.+56     	; 0xda2 <_ZN8ENC28J6010packetSendEj+0x9c>
     d6a:	8a e7       	ldi	r24, 0x7A	; 122
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     d6c:	8e bd       	out	0x2e, r24	; 46
     d6e:	00 00       	nop
		asm volatile("nop");
     d70:	0d b4       	in	r0, 0x2d	; 45
		while(!(SPSR & _BV(SPIF)));
     d72:	07 fe       	sbrs	r0, 7
     d74:	fd cf       	rjmp	.-6      	; 0xd70 <_ZN8ENC28J6010packetSendEj+0x6a>
     d76:	f5 01       	movw	r30, r10

	static void write(const void *buf, uint16_t nbyte){
		if(nbyte == 0) return;
		
		const uint8_t* buff = (const uint8_t*)(buf);
		SPDR = *buff;
     d78:	80 81       	ld	r24, Z
     d7a:	8e bd       	out	0x2e, r24	; 46
     d7c:	f1 e0       	ldi	r31, 0x01	; 1
		while(--nbyte){
     d7e:	ef 16       	cp	r14, r31
     d80:	f1 04       	cpc	r15, r1
     d82:	59 f0       	breq	.+22     	; 0xd9a <_ZN8ENC28J6010packetSendEj+0x94>
     d84:	e4 e9       	ldi	r30, 0x94	; 148
     d86:	f3 e0       	ldi	r31, 0x03	; 3
     d88:	00 00       	nop
			asm volatile("nop");
     d8a:	0d b4       	in	r0, 0x2d	; 45
			while (!(SPSR & _BV(SPIF))) ;
     d8c:	07 fe       	sbrs	r0, 7
     d8e:	fd cf       	rjmp	.-6      	; 0xd8a <_ZN8ENC28J6010packetSendEj+0x84>
     d90:	81 91       	ld	r24, Z+
			SPDR = *++buff;
     d92:	8e bd       	out	0x2e, r24	; 46
     d94:	e0 17       	cp	r30, r16
	static void write(const void *buf, uint16_t nbyte){
		if(nbyte == 0) return;
		
		const uint8_t* buff = (const uint8_t*)(buf);
		SPDR = *buff;
		while(--nbyte){
     d96:	f1 07       	cpc	r31, r17
     d98:	b9 f7       	brne	.-18     	; 0xd88 <_ZN8ENC28J6010packetSendEj+0x82>
			asm volatile("nop");
			while (!(SPSR & _BV(SPIF))) ;
			SPDR = *++buff;
		}
		asm volatile("nop");
     d9a:	00 00       	nop
		while (!(SPSR & _BV(SPIF))) ;
     d9c:	0d b4       	in	r0, 0x2d	; 45
     d9e:	07 fe       	sbrs	r0, 7
        SPI.write8(ENC28J60_WRITE_BUF_MEM);

        SPI.write(data, len);
    }
    disableChip();
     da0:	fd cf       	rjmp	.-6      	; 0xd9c <_ZN8ENC28J6010packetSendEj+0x96>
            writeOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
            writeBuf(len, buffer);
        }

        // initiate transmission
        writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
     da2:	63 de       	rcall	.-826    	; 0xa6a <_ZL11disableChipv>
     da4:	48 e0       	ldi	r20, 0x08	; 8
     da6:	6f e1       	ldi	r22, 0x1F	; 31
     da8:	80 e8       	ldi	r24, 0x80	; 128
     daa:	89 de       	rcall	.-750    	; 0xabe <_ZL7writeOphhh>
        // wait until transmission has finished; referring to the data sheet and
        // to the errata (Errata Issue 13; Example 1) you only need to wait until either
        // TXIF or TXERIF gets set; however this leads to hangs; apparently Microchip
        // realized this and in later implementations of their tcp/ip stack they introduced
        // a counter to avoid hangs; of course they didn't update the errata sheet
        uint16_t count = 0;
     dac:	c0 e0       	ldi	r28, 0x00	; 0
     dae:	d0 e0       	ldi	r29, 0x00	; 0
        while ((readRegByte(EIR) & (EIR_TXIF | EIR_TXERIF)) == 0 && ++count < 1000U)
     db0:	8c e1       	ldi	r24, 0x1C	; 28
     db2:	e4 de       	rcall	.-568    	; 0xb7c <_ZL11readRegByteh>
     db4:	8a 70       	andi	r24, 0x0A	; 10
     db6:	31 f4       	brne	.+12     	; 0xdc4 <_ZN8ENC28J6010packetSendEj+0xbe>
     db8:	21 96       	adiw	r28, 0x01	; 1
     dba:	c8 3e       	cpi	r28, 0xE8	; 232
     dbc:	83 e0       	ldi	r24, 0x03	; 3
     dbe:	d8 07       	cpc	r29, r24
     dc0:	b9 f7       	brne	.-18     	; 0xdb0 <_ZN8ENC28J6010packetSendEj+0xaa>
     dc2:	0c c0       	rjmp	.+24     	; 0xddc <_ZN8ENC28J6010packetSendEj+0xd6>
            ;

        if (!(readRegByte(EIR) & EIR_TXERIF) && count < 1000U) {
     dc4:	8c e1       	ldi	r24, 0x1C	; 28
     dc6:	da de       	rcall	.-588    	; 0xb7c <_ZL11readRegByteh>
     dc8:	81 fd       	sbrc	r24, 1
     dca:	03 c0       	rjmp	.+6      	; 0xdd2 <_ZN8ENC28J6010packetSendEj+0xcc>
     dcc:	c8 3e       	cpi	r28, 0xE8	; 232
     dce:	d3 40       	sbci	r29, 0x03	; 3
            // no error; start new transmission
            break;
        }

        // cancel previous transmission if stuck
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRTS);
     dd0:	40 f0       	brcs	.+16     	; 0xde2 <_ZN8ENC28J6010packetSendEj+0xdc>
     dd2:	48 e0       	ldi	r20, 0x08	; 8
     dd4:	6f e1       	ldi	r22, 0x1F	; 31
     dd6:	80 ea       	ldi	r24, 0xA0	; 160
     dd8:	72 de       	rcall	.-796    	; 0xabe <_ZL7writeOphhh>
};

void ENC28J60::packetSend(uint16_t len) {
    uint8_t retry = 0;

    while (1) {
     dda:	ac cf       	rjmp	.-168    	; 0xd34 <_ZN8ENC28J6010packetSendEj+0x2e>
        // a counter to avoid hangs; of course they didn't update the errata sheet
        uint16_t count = 0;
        while ((readRegByte(EIR) & (EIR_TXIF | EIR_TXERIF)) == 0 && ++count < 1000U)
            ;

        if (!(readRegByte(EIR) & EIR_TXERIF) && count < 1000U) {
     ddc:	8c e1       	ldi	r24, 0x1C	; 28
     dde:	ce de       	rcall	.-612    	; 0xb7c <_ZL11readRegByteh>
     de0:	f8 cf       	rjmp	.-16     	; 0xdd2 <_ZN8ENC28J6010packetSendEj+0xcc>
     de2:	df 91       	pop	r29
        }

        // cancel previous transmission if stuck
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRTS);
    }
}
     de4:	cf 91       	pop	r28
     de6:	1f 91       	pop	r17
     de8:	0f 91       	pop	r16
     dea:	ff 90       	pop	r15
     dec:	ef 90       	pop	r14
     dee:	df 90       	pop	r13
     df0:	cf 90       	pop	r12
     df2:	bf 90       	pop	r11
     df4:	af 90       	pop	r10
     df6:	08 95       	ret

00000df8 <_ZN8ENC28J6013packetReceiveEv>:
     df8:	0f 93       	push	r16


uint16_t ENC28J60::packetReceive() {
     dfa:	1f 93       	push	r17
     dfc:	cf 93       	push	r28
     dfe:	df 93       	push	r29
     e00:	00 d0       	rcall	.+0      	; 0xe02 <_ZN8ENC28J6013packetReceiveEv+0xa>
     e02:	00 d0       	rcall	.+0      	; 0xe04 <_ZN8ENC28J6013packetReceiveEv+0xc>
     e04:	cd b7       	in	r28, 0x3d	; 61
     e06:	de b7       	in	r29, 0x3e	; 62
    static uint16_t gNextPacketPtr = RXSTART_INIT;
    static bool     unreleasedPacket = false;
    uint16_t len = 0;

    if (unreleasedPacket) {
     e08:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <_ZZN8ENC28J6013packetReceiveEvE16unreleasedPacket>
     e0c:	88 23       	and	r24, r24
     e0e:	91 f0       	breq	.+36     	; 0xe34 <_ZN8ENC28J6013packetReceiveEv+0x3c>
        if (gNextPacketPtr == 0)
     e10:	60 91 8a 03 	lds	r22, 0x038A	; 0x80038a <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr>
     e14:	70 91 8b 03 	lds	r23, 0x038B	; 0x80038b <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr+0x1>
     e18:	61 15       	cp	r22, r1
     e1a:	71 05       	cpc	r23, r1
     e1c:	29 f4       	brne	.+10     	; 0xe28 <_ZN8ENC28J6013packetReceiveEv+0x30>
            writeReg(ERXRDPT, RXSTOP_INIT);
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7b e0       	ldi	r23, 0x0B	; 11
     e22:	8c e0       	ldi	r24, 0x0C	; 12
     e24:	bf de       	rcall	.-642    	; 0xba4 <_ZL8writeReghj>
     e26:	04 c0       	rjmp	.+8      	; 0xe30 <_ZN8ENC28J6013packetReceiveEv+0x38>
        else
            writeReg(ERXRDPT, gNextPacketPtr - 1);
     e28:	61 50       	subi	r22, 0x01	; 1
     e2a:	71 09       	sbc	r23, r1
     e2c:	8c e0       	ldi	r24, 0x0C	; 12
     e2e:	ba de       	rcall	.-652    	; 0xba4 <_ZL8writeReghj>
        unreleasedPacket = false;
     e30:	10 92 8c 03 	sts	0x038C, r1	; 0x80038c <_ZZN8ENC28J6013packetReceiveEvE16unreleasedPacket>
    }

    if (readRegByte(EPKTCNT) > 0) {
     e34:	89 e3       	ldi	r24, 0x39	; 57
     e36:	a2 de       	rcall	.-700    	; 0xb7c <_ZL11readRegByteh>
     e38:	88 23       	and	r24, r24
     e3a:	a9 f1       	breq	.+106    	; 0xea6 <_ZN8ENC28J6013packetReceiveEv+0xae>
        writeReg(ERDPT, gNextPacketPtr);
     e3c:	60 91 8a 03 	lds	r22, 0x038A	; 0x80038a <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr>
     e40:	70 91 8b 03 	lds	r23, 0x038B	; 0x80038b <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr+0x1>
     e44:	80 e0       	ldi	r24, 0x00	; 0
     e46:	ae de       	rcall	.-676    	; 0xba4 <_ZL8writeReghj>
            uint16_t nextPacket;
            uint16_t byteCount;
            uint16_t status;
        } header;

        readBuf(sizeof header, (uint8_t*) &header);
     e48:	be 01       	movw	r22, r28
     e4a:	6f 5f       	subi	r22, 0xFF	; 255
     e4c:	7f 4f       	sbci	r23, 0xFF	; 255
     e4e:	86 e0       	ldi	r24, 0x06	; 6
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	4d de       	rcall	.-870    	; 0xaee <_ZL7readBufjPh>

        gNextPacketPtr  = header.nextPacket;
     e54:	89 81       	ldd	r24, Y+1	; 0x01
     e56:	9a 81       	ldd	r25, Y+2	; 0x02
     e58:	90 93 8b 03 	sts	0x038B, r25	; 0x80038b <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr+0x1>
     e5c:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr>
        len = header.byteCount - 4; //remove the CRC count
        if (len>bufferSize-1)
            len=bufferSize-1;
        if ((header.status & 0x80)==0)
     e60:	8d 81       	ldd	r24, Y+5	; 0x05
     e62:	87 ff       	sbrs	r24, 7
     e64:	12 c0       	rjmp	.+36     	; 0xe8a <_ZN8ENC28J6013packetReceiveEv+0x92>

        readBuf(sizeof header, (uint8_t*) &header);

        gNextPacketPtr  = header.nextPacket;
        len = header.byteCount - 4; //remove the CRC count
        if (len>bufferSize-1)
     e66:	80 91 91 03 	lds	r24, 0x0391	; 0x800391 <_ZN8ENC28J6010bufferSizeE>
     e6a:	90 91 92 03 	lds	r25, 0x0392	; 0x800392 <_ZN8ENC28J6010bufferSizeE+0x1>
     e6e:	01 97       	sbiw	r24, 0x01	; 1
        } header;

        readBuf(sizeof header, (uint8_t*) &header);

        gNextPacketPtr  = header.nextPacket;
        len = header.byteCount - 4; //remove the CRC count
     e70:	0b 81       	ldd	r16, Y+3	; 0x03
     e72:	1c 81       	ldd	r17, Y+4	; 0x04
     e74:	04 50       	subi	r16, 0x04	; 4
     e76:	11 09       	sbc	r17, r1
     e78:	80 17       	cp	r24, r16
     e7a:	91 07       	cpc	r25, r17
     e7c:	08 f4       	brcc	.+2      	; 0xe80 <_ZN8ENC28J6013packetReceiveEv+0x88>
        if (len>bufferSize-1)
            len=bufferSize-1;
        if ((header.status & 0x80)==0)
            len = 0;
        else
            readBuf(len, buffer);
     e7e:	8c 01       	movw	r16, r24
     e80:	63 e9       	ldi	r22, 0x93	; 147
     e82:	73 e0       	ldi	r23, 0x03	; 3
     e84:	c8 01       	movw	r24, r16
     e86:	33 de       	rcall	.-922    	; 0xaee <_ZL7readBufjPh>
     e88:	02 c0       	rjmp	.+4      	; 0xe8e <_ZN8ENC28J6013packetReceiveEv+0x96>
        gNextPacketPtr  = header.nextPacket;
        len = header.byteCount - 4; //remove the CRC count
        if (len>bufferSize-1)
            len=bufferSize-1;
        if ((header.status & 0x80)==0)
            len = 0;
     e8a:	00 e0       	ldi	r16, 0x00	; 0
     e8c:	10 e0       	ldi	r17, 0x00	; 0
        else
            readBuf(len, buffer);
        buffer[len] = 0;
     e8e:	f8 01       	movw	r30, r16
     e90:	ed 56       	subi	r30, 0x6D	; 109
     e92:	fc 4f       	sbci	r31, 0xFC	; 252
     e94:	10 82       	st	Z, r1
        unreleasedPacket = true;
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <_ZZN8ENC28J6013packetReceiveEvE16unreleasedPacket>

        writeOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
     e9c:	40 e4       	ldi	r20, 0x40	; 64
     e9e:	6e e1       	ldi	r22, 0x1E	; 30
     ea0:	80 e8       	ldi	r24, 0x80	; 128
     ea2:	0d de       	rcall	.-998    	; 0xabe <_ZL7writeOphhh>
     ea4:	02 c0       	rjmp	.+4      	; 0xeaa <_ZN8ENC28J6013packetReceiveEv+0xb2>


uint16_t ENC28J60::packetReceive() {
    static uint16_t gNextPacketPtr = RXSTART_INIT;
    static bool     unreleasedPacket = false;
    uint16_t len = 0;
     ea6:	00 e0       	ldi	r16, 0x00	; 0
     ea8:	10 e0       	ldi	r17, 0x00	; 0
        unreleasedPacket = true;

        writeOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
    }
    return len;
}
     eaa:	c8 01       	movw	r24, r16
     eac:	26 96       	adiw	r28, 0x06	; 6
     eae:	0f b6       	in	r0, 0x3f	; 63
     eb0:	f8 94       	cli
     eb2:	de bf       	out	0x3e, r29	; 62
     eb4:	0f be       	out	0x3f, r0	; 63
     eb6:	cd bf       	out	0x3d, r28	; 61
     eb8:	df 91       	pop	r29
     eba:	cf 91       	pop	r28
     ebc:	1f 91       	pop	r17
     ebe:	0f 91       	pop	r16
     ec0:	08 95       	ret

00000ec2 <_ZN9EtherCard5beginEPKhRVhS3_h>:
uint16_t EtherCard::delaycnt = 0; //request gateway ARP lookup

uint8_t Ethernet::buffer[ETHER_CARD_BUFFER_SIZE]; // tcp/ip send and receive buffer

uint8_t EtherCard::begin (const uint8_t* macaddr,
                          Register& csDDR, Register& csPort, uint8_t csPin) {
     ec2:	ef 92       	push	r14
     ec4:	ff 92       	push	r15
     ec6:	0f 93       	push	r16
     ec8:	cf 93       	push	r28
     eca:	df 93       	push	r29
     ecc:	eb 01       	movw	r28, r22
     ece:	7a 01       	movw	r14, r20
     ed0:	02 2f       	mov	r16, r18

    copyMac(mymac, macaddr);
     ed2:	bc 01       	movw	r22, r24
     ed4:	8d ea       	ldi	r24, 0xAD	; 173
     ed6:	95 e0       	ldi	r25, 0x05	; 5
     ed8:	c9 d3       	rcall	.+1938   	; 0x166c <_ZN9EtherCard7copyMacEPhPKh>
    return initialize(ETHER_CARD_BUFFER_SIZE, mymac, csDDR, csPort, csPin);
     eda:	97 01       	movw	r18, r14
     edc:	ae 01       	movw	r20, r28
     ede:	6d ea       	ldi	r22, 0xAD	; 173
     ee0:	75 e0       	ldi	r23, 0x05	; 5
     ee2:	80 e0       	ldi	r24, 0x00	; 0
     ee4:	92 e0       	ldi	r25, 0x02	; 2
     ee6:	7c de       	rcall	.-776    	; 0xbe0 <_ZN8ENC28J6010initializeEjPKhRVhS3_h>
}
     ee8:	df 91       	pop	r29
     eea:	cf 91       	pop	r28
     eec:	0f 91       	pop	r16
     eee:	ff 90       	pop	r15
     ef0:	ef 90       	pop	r14
     ef2:	08 95       	ret

00000ef4 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_>:

bool EtherCard::staticSetup (const uint8_t* my_ip,
                             const uint8_t* gw_ip,
                             const uint8_t* dns_ip,
                             const uint8_t* mask) {
     ef4:	ef 92       	push	r14
     ef6:	ff 92       	push	r15
     ef8:	0f 93       	push	r16
     efa:	1f 93       	push	r17
     efc:	cf 93       	push	r28
     efe:	df 93       	push	r29
     f00:	7b 01       	movw	r14, r22
     f02:	8a 01       	movw	r16, r20
     f04:	e9 01       	movw	r28, r18

    if (my_ip != 0)
     f06:	00 97       	sbiw	r24, 0x00	; 0
     f08:	21 f0       	breq	.+8      	; 0xf12 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x1e>
        copyIp(myip, my_ip);
     f0a:	bc 01       	movw	r22, r24
     f0c:	89 ea       	ldi	r24, 0xA9	; 169
     f0e:	95 e0       	ldi	r25, 0x05	; 5
     f10:	a0 d3       	rcall	.+1856   	; 0x1652 <_ZN9EtherCard6copyIpEPhPKh>
    if (gw_ip != 0)
     f12:	e1 14       	cp	r14, r1
     f14:	f1 04       	cpc	r15, r1
     f16:	11 f0       	breq	.+4      	; 0xf1c <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x28>
        setGwIp(gw_ip);
     f18:	c7 01       	movw	r24, r14
     f1a:	bd d1       	rcall	.+890    	; 0x1296 <_ZN9EtherCard7setGwIpEPKh>
    if (dns_ip != 0)
     f1c:	01 15       	cp	r16, r1
     f1e:	11 05       	cpc	r17, r1
     f20:	21 f0       	breq	.+8      	; 0xf2a <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x36>
        copyIp(dnsip, dns_ip);
     f22:	b8 01       	movw	r22, r16
     f24:	89 e9       	ldi	r24, 0x99	; 153
     f26:	95 e0       	ldi	r25, 0x05	; 5
     f28:	94 d3       	rcall	.+1832   	; 0x1652 <_ZN9EtherCard6copyIpEPhPKh>
    if(mask != 0)
     f2a:	20 97       	sbiw	r28, 0x00	; 0
     f2c:	21 f0       	breq	.+8      	; 0xf36 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x42>
        copyIp(netmask, mask);
     f2e:	be 01       	movw	r22, r28
     f30:	85 ea       	ldi	r24, 0xA5	; 165
     f32:	95 e0       	ldi	r25, 0x05	; 5
    updateBroadcastAddress();
     f34:	8e d3       	rcall	.+1820   	; 0x1652 <_ZN9EtherCard6copyIpEPhPKh>
     f36:	bb d1       	rcall	.+886    	; 0x12ae <_ZN9EtherCard22updateBroadcastAddressEv>
    delaycnt = 0; //request gateway ARP lookup
     f38:	10 92 94 05 	sts	0x0594, r1	; 0x800594 <_ZN9EtherCard8delaycntE+0x1>
     f3c:	10 92 93 05 	sts	0x0593, r1	; 0x800593 <_ZN9EtherCard8delaycntE>
    return true;
}
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	df 91       	pop	r29
     f44:	cf 91       	pop	r28
     f46:	1f 91       	pop	r17
     f48:	0f 91       	pop	r16
     f4a:	ff 90       	pop	r15
     f4c:	ef 90       	pop	r14
     f4e:	08 95       	ret

00000f50 <_ZL13fill_checksumhhjh>:
    for(uint8_t i=0; i<IP_LEN; i++)
        broadcastip[i] = myip[i] | ~netmask[i];
}

void EtherCard::registerPingCallback (void (*callback)(uint8_t *srcip)) {
    icmp_cb = callback;
     f50:	cf 92       	push	r12
     f52:	df 92       	push	r13
     f54:	ef 92       	push	r14
     f56:	ff 92       	push	r15
     f58:	cf 93       	push	r28
     f5a:	df 93       	push	r29
     f5c:	c6 2f       	mov	r28, r22
     f5e:	d0 e0       	ldi	r29, 0x00	; 0
     f60:	cd 56       	subi	r28, 0x6D	; 109
     f62:	dc 4f       	sbci	r29, 0xFC	; 252
     f64:	21 30       	cpi	r18, 0x01	; 1
     f66:	81 f4       	brne	.+32     	; 0xf88 <_ZL13fill_checksumhhjh+0x38>
     f68:	6a 01       	movw	r12, r20
     f6a:	99 e0       	ldi	r25, 0x09	; 9
     f6c:	c9 0e       	add	r12, r25
     f6e:	d1 1c       	adc	r13, r1
     f70:	e1 2c       	mov	r14, r1
     f72:	f1 2c       	mov	r15, r1
     f74:	03 c0       	rjmp	.+6      	; 0xf7c <_ZL13fill_checksumhhjh+0x2c>
     f76:	c1 2c       	mov	r12, r1
     f78:	d1 2c       	mov	r13, r1
     f7a:	76 01       	movw	r14, r12
     f7c:	42 30       	cpi	r20, 0x02	; 2
     f7e:	51 05       	cpc	r21, r1
     f80:	28 f1       	brcs	.+74     	; 0xfcc <_ZL13fill_checksumhhjh+0x7c>
     f82:	fe 01       	movw	r30, r28
     f84:	da 01       	movw	r26, r20
     f86:	09 c0       	rjmp	.+18     	; 0xf9a <_ZL13fill_checksumhhjh+0x4a>
     f88:	22 30       	cpi	r18, 0x02	; 2
     f8a:	a9 f7       	brne	.-22     	; 0xf76 <_ZL13fill_checksumhhjh+0x26>
     f8c:	6a 01       	movw	r12, r20
     f8e:	92 e0       	ldi	r25, 0x02	; 2
     f90:	c9 1a       	sub	r12, r25
     f92:	d1 08       	sbc	r13, r1
     f94:	e1 2c       	mov	r14, r1
     f96:	f1 2c       	mov	r15, r1
     f98:	f1 cf       	rjmp	.-30     	; 0xf7c <_ZL13fill_checksumhhjh+0x2c>
     f9a:	20 81       	ld	r18, Z
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	32 2f       	mov	r19, r18
     fa0:	22 27       	eor	r18, r18
     fa2:	91 81       	ldd	r25, Z+1	; 0x01
     fa4:	29 2b       	or	r18, r25
     fa6:	c2 0e       	add	r12, r18
     fa8:	d3 1e       	adc	r13, r19
     faa:	e1 1c       	adc	r14, r1
     fac:	f1 1c       	adc	r15, r1
     fae:	32 96       	adiw	r30, 0x02	; 2
     fb0:	12 97       	sbiw	r26, 0x02	; 2
     fb2:	a2 30       	cpi	r26, 0x02	; 2
     fb4:	b1 05       	cpc	r27, r1
     fb6:	88 f7       	brcc	.-30     	; 0xf9a <_ZL13fill_checksumhhjh+0x4a>
     fb8:	9a 01       	movw	r18, r20
     fba:	22 50       	subi	r18, 0x02	; 2
     fbc:	31 09       	sbc	r19, r1
     fbe:	2e 7f       	andi	r18, 0xFE	; 254
     fc0:	2e 5f       	subi	r18, 0xFE	; 254
     fc2:	3f 4f       	sbci	r19, 0xFF	; 255
     fc4:	c2 0f       	add	r28, r18
     fc6:	d3 1f       	adc	r29, r19
     fc8:	41 70       	andi	r20, 0x01	; 1
     fca:	55 27       	eor	r21, r21
     fcc:	45 2b       	or	r20, r21
     fce:	61 f0       	breq	.+24     	; 0xfe8 <_ZL13fill_checksumhhjh+0x98>
     fd0:	48 81       	ld	r20, Y
     fd2:	50 e0       	ldi	r21, 0x00	; 0
     fd4:	60 e0       	ldi	r22, 0x00	; 0
     fd6:	70 e0       	ldi	r23, 0x00	; 0
     fd8:	76 2f       	mov	r23, r22
     fda:	65 2f       	mov	r22, r21
     fdc:	54 2f       	mov	r21, r20
     fde:	44 27       	eor	r20, r20
     fe0:	c4 0e       	add	r12, r20
     fe2:	d5 1e       	adc	r13, r21
     fe4:	e6 1e       	adc	r14, r22
     fe6:	f7 1e       	adc	r15, r23
     fe8:	a7 01       	movw	r20, r14
     fea:	66 27       	eor	r22, r22
     fec:	77 27       	eor	r23, r23
     fee:	41 15       	cp	r20, r1
     ff0:	51 05       	cpc	r21, r1
     ff2:	61 05       	cpc	r22, r1
     ff4:	71 05       	cpc	r23, r1
     ff6:	71 f0       	breq	.+28     	; 0x1014 <_ZL13fill_checksumhhjh+0xc4>
     ff8:	ee 24       	eor	r14, r14
     ffa:	ff 24       	eor	r15, r15
     ffc:	c4 0e       	add	r12, r20
     ffe:	d5 1e       	adc	r13, r21
    1000:	e6 1e       	adc	r14, r22
    1002:	f7 1e       	adc	r15, r23
    1004:	a7 01       	movw	r20, r14
    1006:	66 27       	eor	r22, r22
    1008:	77 27       	eor	r23, r23
    100a:	41 15       	cp	r20, r1
    100c:	51 05       	cpc	r21, r1
    100e:	61 05       	cpc	r22, r1
    1010:	71 05       	cpc	r23, r1
    1012:	91 f7       	brne	.-28     	; 0xff8 <_ZL13fill_checksumhhjh+0xa8>
    1014:	c0 94       	com	r12
    1016:	d0 94       	com	r13
    1018:	e8 2f       	mov	r30, r24
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	ed 56       	subi	r30, 0x6D	; 109
    101e:	fc 4f       	sbci	r31, 0xFC	; 252
    1020:	d0 82       	st	Z, r13
    1022:	c1 82       	std	Z+1, r12	; 0x01
    1024:	df 91       	pop	r29
    1026:	cf 91       	pop	r28
    1028:	ff 90       	pop	r15
    102a:	ef 90       	pop	r14
    102c:	df 90       	pop	r13
    102e:	cf 90       	pop	r12
    1030:	08 95       	ret

00001032 <_ZL6is_lanPKhS0_>:
    1032:	cf 93       	push	r28
    1034:	df 93       	push	r29
    1036:	fc 01       	movw	r30, r24
    1038:	20 81       	ld	r18, Z
    103a:	22 23       	and	r18, r18
    103c:	d1 f0       	breq	.+52     	; 0x1072 <_ZL6is_lanPKhS0_+0x40>
    103e:	fb 01       	movw	r30, r22
    1040:	30 81       	ld	r19, Z
    1042:	33 23       	and	r19, r19
    1044:	c1 f0       	breq	.+48     	; 0x1076 <_ZL6is_lanPKhS0_+0x44>
    1046:	23 27       	eor	r18, r19
    1048:	30 91 a5 05 	lds	r19, 0x05A5	; 0x8005a5 <_ZN9EtherCard7netmaskE>
    104c:	23 23       	and	r18, r19
    104e:	a9 f4       	brne	.+42     	; 0x107a <_ZL6is_lanPKhS0_+0x48>
    1050:	dc 01       	movw	r26, r24
    1052:	11 96       	adiw	r26, 0x01	; 1
    1054:	31 96       	adiw	r30, 0x01	; 1
    1056:	c6 ea       	ldi	r28, 0xA6	; 166
    1058:	d5 e0       	ldi	r29, 0x05	; 5
    105a:	04 96       	adiw	r24, 0x04	; 4
    105c:	4d 91       	ld	r20, X+
    105e:	21 91       	ld	r18, Z+
    1060:	39 91       	ld	r19, Y+
    1062:	24 27       	eor	r18, r20
    1064:	23 23       	and	r18, r19
    1066:	59 f4       	brne	.+22     	; 0x107e <_ZL6is_lanPKhS0_+0x4c>
    1068:	a8 17       	cp	r26, r24
    106a:	b9 07       	cpc	r27, r25
    106c:	b9 f7       	brne	.-18     	; 0x105c <_ZL6is_lanPKhS0_+0x2a>
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	07 c0       	rjmp	.+14     	; 0x1080 <_ZL6is_lanPKhS0_+0x4e>
    1072:	80 e0       	ldi	r24, 0x00	; 0
    1074:	05 c0       	rjmp	.+10     	; 0x1080 <_ZL6is_lanPKhS0_+0x4e>
    1076:	80 e0       	ldi	r24, 0x00	; 0
    1078:	03 c0       	rjmp	.+6      	; 0x1080 <_ZL6is_lanPKhS0_+0x4e>
    107a:	80 e0       	ldi	r24, 0x00	; 0
    107c:	01 c0       	rjmp	.+2      	; 0x1080 <_ZL6is_lanPKhS0_+0x4e>
    107e:	80 e0       	ldi	r24, 0x00	; 0
    1080:	df 91       	pop	r29
    1082:	cf 91       	pop	r28
    1084:	08 95       	ret

00001086 <_ZL20fill_ip_hdr_checksumv>:
    1086:	e3 e9       	ldi	r30, 0x93	; 147
    1088:	f3 e0       	ldi	r31, 0x03	; 3
    108a:	10 8e       	std	Z+24, r1	; 0x18
    108c:	11 8e       	std	Z+25, r1	; 0x19
    108e:	80 e4       	ldi	r24, 0x40	; 64
    1090:	84 8b       	std	Z+20, r24	; 0x14
    1092:	15 8a       	std	Z+21, r1	; 0x15
    1094:	86 8b       	std	Z+22, r24	; 0x16
    1096:	20 e0       	ldi	r18, 0x00	; 0
    1098:	44 e1       	ldi	r20, 0x14	; 20
    109a:	50 e0       	ldi	r21, 0x00	; 0
    109c:	6e e0       	ldi	r22, 0x0E	; 14
    109e:	88 e1       	ldi	r24, 0x18	; 24
    10a0:	57 cf       	rjmp	.-338    	; 0xf50 <_ZL13fill_checksumhhjh>
    10a2:	08 95       	ret

000010a4 <_ZL7setMACsPKh>:
    10a4:	bc 01       	movw	r22, r24
    10a6:	83 e9       	ldi	r24, 0x93	; 147
    10a8:	93 e0       	ldi	r25, 0x03	; 3
    10aa:	e0 d2       	rcall	.+1472   	; 0x166c <_ZN9EtherCard7copyMacEPhPKh>
    10ac:	6d ea       	ldi	r22, 0xAD	; 173
    10ae:	75 e0       	ldi	r23, 0x05	; 5
    10b0:	89 e9       	ldi	r24, 0x99	; 153
    10b2:	93 e0       	ldi	r25, 0x03	; 3
    10b4:	db c2       	rjmp	.+1462   	; 0x166c <_ZN9EtherCard7copyMacEPhPKh>
    10b6:	08 95       	ret

000010b8 <_ZL11make_eth_ipv>:
    10b8:	89 e9       	ldi	r24, 0x99	; 153
    10ba:	93 e0       	ldi	r25, 0x03	; 3
    10bc:	f3 df       	rcall	.-26     	; 0x10a4 <_ZL7setMACsPKh>
    10be:	6d ea       	ldi	r22, 0xAD	; 173
    10c0:	73 e0       	ldi	r23, 0x03	; 3
    10c2:	81 eb       	ldi	r24, 0xB1	; 177
    10c4:	93 e0       	ldi	r25, 0x03	; 3
    10c6:	c5 d2       	rcall	.+1418   	; 0x1652 <_ZN9EtherCard6copyIpEPhPKh>
    10c8:	69 ea       	ldi	r22, 0xA9	; 169
    10ca:	75 e0       	ldi	r23, 0x05	; 5
    10cc:	8d ea       	ldi	r24, 0xAD	; 173
    10ce:	93 e0       	ldi	r25, 0x03	; 3
    10d0:	c0 d2       	rcall	.+1408   	; 0x1652 <_ZN9EtherCard6copyIpEPhPKh>
    10d2:	d9 cf       	rjmp	.-78     	; 0x1086 <_ZL20fill_ip_hdr_checksumv>
    10d4:	08 95       	ret

000010d6 <_ZL12setMACandIPsPKhS0_>:
    10d6:	cf 93       	push	r28
    10d8:	df 93       	push	r29
    10da:	eb 01       	movw	r28, r22
    10dc:	e3 df       	rcall	.-58     	; 0x10a4 <_ZL7setMACsPKh>
    10de:	be 01       	movw	r22, r28
    10e0:	81 eb       	ldi	r24, 0xB1	; 177
    10e2:	93 e0       	ldi	r25, 0x03	; 3
    10e4:	b6 d2       	rcall	.+1388   	; 0x1652 <_ZN9EtherCard6copyIpEPhPKh>
    10e6:	69 ea       	ldi	r22, 0xA9	; 169
    10e8:	75 e0       	ldi	r23, 0x05	; 5
    10ea:	8d ea       	ldi	r24, 0xAD	; 173
    10ec:	93 e0       	ldi	r25, 0x03	; 3
    10ee:	b1 d2       	rcall	.+1378   	; 0x1652 <_ZN9EtherCard6copyIpEPhPKh>
    10f0:	df 91       	pop	r29
    10f2:	cf 91       	pop	r28
    10f4:	08 95       	ret

000010f6 <_ZL16client_store_macPhS_>:
    10f6:	cf 93       	push	r28
    10f8:	df 93       	push	r29
    10fa:	eb 01       	movw	r28, r22
    10fc:	44 e0       	ldi	r20, 0x04	; 4
    10fe:	50 e0       	ldi	r21, 0x00	; 0
    1100:	bc 01       	movw	r22, r24
    1102:	8f ea       	ldi	r24, 0xAF	; 175
    1104:	93 e0       	ldi	r25, 0x03	; 3
    1106:	0e 94 60 25 	call	0x4ac0	; 0x4ac0 <memcmp>
    110a:	89 2b       	or	r24, r25
    110c:	31 f4       	brne	.+12     	; 0x111a <_ZL16client_store_macPhS_+0x24>
    110e:	69 ea       	ldi	r22, 0xA9	; 169
    1110:	73 e0       	ldi	r23, 0x03	; 3
    1112:	ce 01       	movw	r24, r28
    1114:	ab d2       	rcall	.+1366   	; 0x166c <_ZN9EtherCard7copyMacEPhPKh>
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	01 c0       	rjmp	.+2      	; 0x111c <_ZL16client_store_macPhS_+0x26>
    111a:	80 e0       	ldi	r24, 0x00	; 0
    111c:	df 91       	pop	r29
    111e:	cf 91       	pop	r28
    1120:	08 95       	ret

00001122 <_ZL17client_arp_whohasPh>:
    1122:	0f 93       	push	r16
    1124:	1f 93       	push	r17
    1126:	cf 93       	push	r28
    1128:	8c 01       	movw	r16, r24
    112a:	85 e2       	ldi	r24, 0x25	; 37
    112c:	92 e0       	ldi	r25, 0x02	; 2
    112e:	ba df       	rcall	.-140    	; 0x10a4 <_ZL7setMACsPKh>
    1130:	e3 e9       	ldi	r30, 0x93	; 147
    1132:	f3 e0       	ldi	r31, 0x03	; 3
    1134:	88 e0       	ldi	r24, 0x08	; 8
    1136:	84 87       	std	Z+12, r24	; 0x0c
    1138:	c6 e0       	ldi	r28, 0x06	; 6
    113a:	c5 87       	std	Z+13, r28	; 0x0d
    113c:	48 e0       	ldi	r20, 0x08	; 8
    113e:	50 e0       	ldi	r21, 0x00	; 0
    1140:	6f e7       	ldi	r22, 0x7F	; 127
    1142:	72 e0       	ldi	r23, 0x02	; 2
    1144:	81 ea       	ldi	r24, 0xA1	; 161
    1146:	93 e0       	ldi	r25, 0x03	; 3
    1148:	0e 94 57 25 	call	0x4aae	; 0x4aae <memcpy_P>
    114c:	e3 eb       	ldi	r30, 0xB3	; 179
    114e:	f3 e0       	ldi	r31, 0x03	; 3
    1150:	df 01       	movw	r26, r30
    1152:	1d 92       	st	X+, r1
    1154:	ca 95       	dec	r28
    1156:	e9 f7       	brne	.-6      	; 0x1152 <_ZL17client_arp_whohasPh+0x30>
    1158:	6d ea       	ldi	r22, 0xAD	; 173
    115a:	75 e0       	ldi	r23, 0x05	; 5
    115c:	89 ea       	ldi	r24, 0xA9	; 169
    115e:	93 e0       	ldi	r25, 0x03	; 3
    1160:	85 d2       	rcall	.+1290   	; 0x166c <_ZN9EtherCard7copyMacEPhPKh>
    1162:	b8 01       	movw	r22, r16
    1164:	89 eb       	ldi	r24, 0xB9	; 185
    1166:	93 e0       	ldi	r25, 0x03	; 3
    1168:	74 d2       	rcall	.+1256   	; 0x1652 <_ZN9EtherCard6copyIpEPhPKh>
    116a:	69 ea       	ldi	r22, 0xA9	; 169
    116c:	75 e0       	ldi	r23, 0x05	; 5
    116e:	8f ea       	ldi	r24, 0xAF	; 175
    1170:	93 e0       	ldi	r25, 0x03	; 3
    1172:	6f d2       	rcall	.+1246   	; 0x1652 <_ZN9EtherCard6copyIpEPhPKh>
    1174:	8a e2       	ldi	r24, 0x2A	; 42
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	c6 dd       	rcall	.-1140   	; 0xd06 <_ZN8ENC28J6010packetSendEj>
    117a:	cf 91       	pop	r28
    117c:	1f 91       	pop	r17
    117e:	0f 91       	pop	r16
    1180:	08 95       	ret

00001182 <_ZN9EtherCard10udpPrepareEjPKhj>:
    1182:	ef 92       	push	r14
    1184:	ff 92       	push	r15
    1186:	0f 93       	push	r16
    1188:	1f 93       	push	r17
    118a:	cf 93       	push	r28
    118c:	df 93       	push	r29
    118e:	18 2f       	mov	r17, r24
    1190:	09 2f       	mov	r16, r25
    1192:	eb 01       	movw	r28, r22
    1194:	f4 2e       	mov	r15, r20
    1196:	e5 2e       	mov	r14, r21
    1198:	89 ea       	ldi	r24, 0xA9	; 169
    119a:	95 e0       	ldi	r25, 0x05	; 5
    119c:	4a df       	rcall	.-364    	; 0x1032 <_ZL6is_lanPKhS0_>
    119e:	88 23       	and	r24, r24
    11a0:	29 f0       	breq	.+10     	; 0x11ac <_ZN9EtherCard10udpPrepareEjPKhj+0x2a>
    11a2:	be 01       	movw	r22, r28
    11a4:	8e eb       	ldi	r24, 0xBE	; 190
    11a6:	95 e0       	ldi	r25, 0x05	; 5
    11a8:	96 df       	rcall	.-212    	; 0x10d6 <_ZL12setMACandIPsPKhS0_>
    11aa:	04 c0       	rjmp	.+8      	; 0x11b4 <_ZN9EtherCard10udpPrepareEjPKhj+0x32>
    11ac:	be 01       	movw	r22, r28
    11ae:	84 eb       	ldi	r24, 0xB4	; 180
    11b0:	95 e0       	ldi	r25, 0x05	; 5
    11b2:	91 df       	rcall	.-222    	; 0x10d6 <_ZL12setMACandIPsPKhS0_>
    11b4:	88 81       	ld	r24, Y
    11b6:	80 7f       	andi	r24, 0xF0	; 240
    11b8:	80 3e       	cpi	r24, 0xE0	; 224
    11ba:	91 f0       	breq	.+36     	; 0x11e0 <_ZN9EtherCard10udpPrepareEjPKhj+0x5e>
    11bc:	88 81       	ld	r24, Y
    11be:	99 81       	ldd	r25, Y+1	; 0x01
    11c0:	aa 81       	ldd	r26, Y+2	; 0x02
    11c2:	bb 81       	ldd	r27, Y+3	; 0x03
    11c4:	8f 3f       	cpi	r24, 0xFF	; 255
    11c6:	9f 4f       	sbci	r25, 0xFF	; 255
    11c8:	af 4f       	sbci	r26, 0xFF	; 255
    11ca:	bf 4f       	sbci	r27, 0xFF	; 255
    11cc:	49 f0       	breq	.+18     	; 0x11e0 <_ZN9EtherCard10udpPrepareEjPKhj+0x5e>
    11ce:	44 e0       	ldi	r20, 0x04	; 4
    11d0:	50 e0       	ldi	r21, 0x00	; 0
    11d2:	be 01       	movw	r22, r28
    11d4:	81 ea       	ldi	r24, 0xA1	; 161
    11d6:	95 e0       	ldi	r25, 0x05	; 5
    11d8:	0e 94 60 25 	call	0x4ac0	; 0x4ac0 <memcmp>
    11dc:	89 2b       	or	r24, r25
    11de:	29 f4       	brne	.+10     	; 0x11ea <_ZN9EtherCard10udpPrepareEjPKhj+0x68>
    11e0:	65 e2       	ldi	r22, 0x25	; 37
    11e2:	72 e0       	ldi	r23, 0x02	; 2
    11e4:	83 e9       	ldi	r24, 0x93	; 147
    11e6:	93 e0       	ldi	r25, 0x03	; 3
    11e8:	41 d2       	rcall	.+1154   	; 0x166c <_ZN9EtherCard7copyMacEPhPKh>
    11ea:	c3 e9       	ldi	r28, 0x93	; 147
    11ec:	d3 e0       	ldi	r29, 0x03	; 3
    11ee:	88 e0       	ldi	r24, 0x08	; 8
    11f0:	8c 87       	std	Y+12, r24	; 0x0c
    11f2:	1d 86       	std	Y+13, r1	; 0x0d
    11f4:	49 e0       	ldi	r20, 0x09	; 9
    11f6:	50 e0       	ldi	r21, 0x00	; 0
    11f8:	66 e7       	ldi	r22, 0x76	; 118
    11fa:	72 e0       	ldi	r23, 0x02	; 2
    11fc:	81 ea       	ldi	r24, 0xA1	; 161
    11fe:	93 e0       	ldi	r25, 0x03	; 3
    1200:	0e 94 57 25 	call	0x4aae	; 0x4aae <memcpy_P>
    1204:	18 8a       	std	Y+16, r1	; 0x10
    1206:	81 e1       	ldi	r24, 0x11	; 17
    1208:	8f 8b       	std	Y+23, r24	; 0x17
    120a:	ec a2       	std	Y+36, r14	; 0x24
    120c:	fd a2       	std	Y+37, r15	; 0x25
    120e:	0a a3       	std	Y+34, r16	; 0x22
    1210:	1b a3       	std	Y+35, r17	; 0x23
    1212:	1e a2       	std	Y+38, r1	; 0x26
    1214:	18 a6       	std	Y+40, r1	; 0x28
    1216:	19 a6       	std	Y+41, r1	; 0x29
    1218:	df 91       	pop	r29
    121a:	cf 91       	pop	r28
    121c:	1f 91       	pop	r17
    121e:	0f 91       	pop	r16
    1220:	ff 90       	pop	r15
    1222:	ef 90       	pop	r14
    1224:	08 95       	ret

00001226 <_ZN9EtherCard11udpTransmitEj>:
    1226:	0f 93       	push	r16
    1228:	1f 93       	push	r17
    122a:	cf 93       	push	r28
    122c:	df 93       	push	r29
    122e:	ec 01       	movw	r28, r24
    1230:	03 e9       	ldi	r16, 0x93	; 147
    1232:	13 e0       	ldi	r17, 0x03	; 3
    1234:	4c 96       	adiw	r24, 0x1c	; 28
    1236:	f8 01       	movw	r30, r16
    1238:	90 8b       	std	Z+16, r25	; 0x10
    123a:	81 8b       	std	Z+17, r24	; 0x11
    123c:	24 df       	rcall	.-440    	; 0x1086 <_ZL20fill_ip_hdr_checksumv>
    123e:	ce 01       	movw	r24, r28
    1240:	08 96       	adiw	r24, 0x08	; 8
    1242:	f8 01       	movw	r30, r16
    1244:	96 a3       	std	Z+38, r25	; 0x26
    1246:	87 a3       	std	Z+39, r24	; 0x27
    1248:	ae 01       	movw	r20, r28
    124a:	40 5f       	subi	r20, 0xF0	; 240
    124c:	5f 4f       	sbci	r21, 0xFF	; 255
    124e:	21 e0       	ldi	r18, 0x01	; 1
    1250:	6a e1       	ldi	r22, 0x1A	; 26
    1252:	88 e2       	ldi	r24, 0x28	; 40
    1254:	7d de       	rcall	.-774    	; 0xf50 <_ZL13fill_checksumhhjh>
    1256:	ce 01       	movw	r24, r28
    1258:	8a 96       	adiw	r24, 0x2a	; 42
    125a:	55 dd       	rcall	.-1366   	; 0xd06 <_ZN8ENC28J6010packetSendEj>
    125c:	df 91       	pop	r29
    125e:	cf 91       	pop	r28
    1260:	1f 91       	pop	r17
    1262:	0f 91       	pop	r16
    1264:	08 95       	ret

00001266 <_ZN9EtherCard7sendUdpEPKhjjS1_j>:
    1266:	0f 93       	push	r16
    1268:	1f 93       	push	r17
    126a:	cf 93       	push	r28
    126c:	df 93       	push	r29
    126e:	d6 2f       	mov	r29, r22
    1270:	c7 2f       	mov	r28, r23
    1272:	ca 01       	movw	r24, r20
    1274:	a8 01       	movw	r20, r16
    1276:	b9 01       	movw	r22, r18
    1278:	84 df       	rcall	.-248    	; 0x1182 <_ZN9EtherCard10udpPrepareEjPKhj>
    127a:	8d 2f       	mov	r24, r29
    127c:	9c 2f       	mov	r25, r28
    127e:	81 30       	cpi	r24, 0x01	; 1
    1280:	22 e0       	ldi	r18, 0x02	; 2
    1282:	92 07       	cpc	r25, r18
    1284:	10 f0       	brcs	.+4      	; 0x128a <_ZN9EtherCard7sendUdpEPKhjjS1_j+0x24>
    1286:	80 e0       	ldi	r24, 0x00	; 0
    1288:	92 e0       	ldi	r25, 0x02	; 2
    128a:	cd df       	rcall	.-102    	; 0x1226 <_ZN9EtherCard11udpTransmitEj>
    128c:	df 91       	pop	r29
    128e:	cf 91       	pop	r28
    1290:	1f 91       	pop	r17
    1292:	0f 91       	pop	r16
    1294:	08 95       	ret

00001296 <_ZN9EtherCard7setGwIpEPKh>:
    1296:	10 92 94 05 	sts	0x0594, r1	; 0x800594 <_ZN9EtherCard8delaycntE+0x1>
    129a:	10 92 93 05 	sts	0x0593, r1	; 0x800593 <_ZN9EtherCard8delaycntE>
    129e:	21 e0       	ldi	r18, 0x01	; 1
    12a0:	20 93 b3 05 	sts	0x05B3, r18	; 0x8005b3 <_ZL9waitgwmac>
    12a4:	bc 01       	movw	r22, r24
    12a6:	8d e9       	ldi	r24, 0x9D	; 157
    12a8:	95 e0       	ldi	r25, 0x05	; 5
    12aa:	d3 c1       	rjmp	.+934    	; 0x1652 <_ZN9EtherCard6copyIpEPhPKh>
    12ac:	08 95       	ret

000012ae <_ZN9EtherCard22updateBroadcastAddressEv>:
    12ae:	cf 93       	push	r28
    12b0:	df 93       	push	r29
    12b2:	e9 ea       	ldi	r30, 0xA9	; 169
    12b4:	f5 e0       	ldi	r31, 0x05	; 5
    12b6:	c5 ea       	ldi	r28, 0xA5	; 165
    12b8:	d5 e0       	ldi	r29, 0x05	; 5
    12ba:	a1 ea       	ldi	r26, 0xA1	; 161
    12bc:	b5 e0       	ldi	r27, 0x05	; 5
    12be:	2d ea       	ldi	r18, 0xAD	; 173
    12c0:	35 e0       	ldi	r19, 0x05	; 5
    12c2:	91 91       	ld	r25, Z+
    12c4:	89 91       	ld	r24, Y+
    12c6:	80 95       	com	r24
    12c8:	89 2b       	or	r24, r25
    12ca:	8d 93       	st	X+, r24
    12cc:	e2 17       	cp	r30, r18
    12ce:	f3 07       	cpc	r31, r19
    12d0:	c1 f7       	brne	.-16     	; 0x12c2 <_ZN9EtherCard22updateBroadcastAddressEv+0x14>
    12d2:	df 91       	pop	r29
    12d4:	cf 91       	pop	r28
    12d6:	08 95       	ret

000012d8 <_ZN9EtherCard10packetLoopEj>:
	gPB[ICMP_CHECKSUM_P+1]++;
	gPB[ICMP_CHECKSUM_P] += 0x08;
	EtherCard::packetSend(len);
}

uint16_t EtherCard::packetLoop (uint16_t plen) {
    12d8:	cf 93       	push	r28
    12da:	df 93       	push	r29
    12dc:	ec 01       	movw	r28, r24
    if (plen==0) {
    12de:	00 97       	sbiw	r24, 0x00	; 0
    12e0:	09 f0       	breq	.+2      	; 0x12e4 <_ZN9EtherCard10packetLoopEj+0xc>
    12e2:	3f c0       	rjmp	.+126    	; 0x1362 <_ZN9EtherCard10packetLoopEj+0x8a>
        //Check every 65536 (no-packet) cycles whether we need to retry ARP request for gateway
        if ((waitgwmac & WGW_INITIAL_ARP || waitgwmac & WGW_REFRESHING) &&
    12e4:	80 91 b3 05 	lds	r24, 0x05B3	; 0x8005b3 <_ZL9waitgwmac>
    12e8:	85 70       	andi	r24, 0x05	; 5
    12ea:	89 f0       	breq	.+34     	; 0x130e <_ZN9EtherCard10packetLoopEj+0x36>
    12ec:	80 91 93 05 	lds	r24, 0x0593	; 0x800593 <_ZN9EtherCard8delaycntE>
    12f0:	90 91 94 05 	lds	r25, 0x0594	; 0x800594 <_ZN9EtherCard8delaycntE+0x1>
    12f4:	89 2b       	or	r24, r25
    12f6:	59 f4       	brne	.+22     	; 0x130e <_ZN9EtherCard10packetLoopEj+0x36>
                delaycnt==0 && isLinkUp()) {
    12f8:	f3 dc       	rcall	.-1562   	; 0xce0 <_ZN8ENC28J608isLinkUpEv>
}

uint16_t EtherCard::packetLoop (uint16_t plen) {
    if (plen==0) {
        //Check every 65536 (no-packet) cycles whether we need to retry ARP request for gateway
        if ((waitgwmac & WGW_INITIAL_ARP || waitgwmac & WGW_REFRESHING) &&
    12fa:	88 23       	and	r24, r24
    12fc:	41 f0       	breq	.+16     	; 0x130e <_ZN9EtherCard10packetLoopEj+0x36>
                delaycnt==0 && isLinkUp()) {
            client_arp_whohas(gwip);
    12fe:	8d e9       	ldi	r24, 0x9D	; 157
    1300:	95 e0       	ldi	r25, 0x05	; 5
    1302:	0f df       	rcall	.-482    	; 0x1122 <_ZL17client_arp_whohasPh>
            waitgwmac |= WGW_ACCEPT_ARP_REPLY;
    1304:	80 91 b3 05 	lds	r24, 0x05B3	; 0x8005b3 <_ZL9waitgwmac>
    1308:	88 60       	ori	r24, 0x08	; 8
    130a:	80 93 b3 05 	sts	0x05B3, r24	; 0x8005b3 <_ZL9waitgwmac>
        }
        delaycnt++;
    130e:	80 91 93 05 	lds	r24, 0x0593	; 0x800593 <_ZN9EtherCard8delaycntE>
    1312:	90 91 94 05 	lds	r25, 0x0594	; 0x800594 <_ZN9EtherCard8delaycntE+0x1>
    1316:	01 96       	adiw	r24, 0x01	; 1
    1318:	90 93 94 05 	sts	0x0594, r25	; 0x800594 <_ZN9EtherCard8delaycntE+0x1>
    131c:	80 93 93 05 	sts	0x0593, r24	; 0x800593 <_ZN9EtherCard8delaycntE>

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, dnsip) && !has_dns_mac && !waiting_for_dns_mac) {
    1320:	69 e9       	ldi	r22, 0x99	; 153
    1322:	75 e0       	ldi	r23, 0x05	; 5
    1324:	89 ea       	ldi	r24, 0xA9	; 169
    1326:	95 e0       	ldi	r25, 0x05	; 5
    1328:	84 de       	rcall	.-760    	; 0x1032 <_ZL6is_lanPKhS0_>
    132a:	88 23       	and	r24, r24
    132c:	49 f0       	breq	.+18     	; 0x1340 <_ZN9EtherCard10packetLoopEj+0x68>
    132e:	80 91 bc 05 	lds	r24, 0x05BC	; 0x8005bc <_ZL11has_dns_mac>
    1332:	81 11       	cpse	r24, r1
    1334:	05 c0       	rjmp	.+10     	; 0x1340 <_ZN9EtherCard10packetLoopEj+0x68>
    1336:	80 91 bd 05 	lds	r24, 0x05BD	; 0x8005bd <_ZL19waiting_for_dns_mac>
    133a:	88 23       	and	r24, r24
    133c:	09 f4       	brne	.+2      	; 0x1340 <_ZN9EtherCard10packetLoopEj+0x68>
    133e:	dc c0       	rjmp	.+440    	; 0x14f8 <_ZN9EtherCard10packetLoopEj+0x220>
            client_arp_whohas(dnsip);
            waiting_for_dns_mac = true;
        }

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, hisip) && !has_dest_mac && !waiting_for_dest_mac) {
    1340:	65 e9       	ldi	r22, 0x95	; 149
    1342:	75 e0       	ldi	r23, 0x05	; 5
    1344:	89 ea       	ldi	r24, 0xA9	; 169
    1346:	95 e0       	ldi	r25, 0x05	; 5
    1348:	74 de       	rcall	.-792    	; 0x1032 <_ZL6is_lanPKhS0_>
    134a:	88 23       	and	r24, r24
    134c:	09 f4       	brne	.+2      	; 0x1350 <_ZN9EtherCard10packetLoopEj+0x78>
    134e:	f8 c0       	rjmp	.+496    	; 0x1540 <_ZN9EtherCard10packetLoopEj+0x268>
    1350:	80 91 ba 05 	lds	r24, 0x05BA	; 0x8005ba <_ZL12has_dest_mac>
    1354:	81 11       	cpse	r24, r1
    1356:	f4 c0       	rjmp	.+488    	; 0x1540 <_ZN9EtherCard10packetLoopEj+0x268>
    1358:	80 91 bb 05 	lds	r24, 0x05BB	; 0x8005bb <_ZL20waiting_for_dest_mac>
    135c:	81 11       	cpse	r24, r1
    135e:	f0 c0       	rjmp	.+480    	; 0x1540 <_ZN9EtherCard10packetLoopEj+0x268>
    1360:	d2 c0       	rjmp	.+420    	; 0x1506 <_ZN9EtherCard10packetLoopEj+0x22e>
    return true;
}

static uint8_t eth_type_is_arp_and_my_ip(uint16_t len) {
    return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
    1362:	89 32       	cpi	r24, 0x29	; 41
    1364:	91 05       	cpc	r25, r1
    1366:	08 f4       	brcc	.+2      	; 0x136a <_ZN9EtherCard10packetLoopEj+0x92>
    1368:	d5 c0       	rjmp	.+426    	; 0x1514 <_ZN9EtherCard10packetLoopEj+0x23c>
        }
    return true;
}

static uint8_t eth_type_is_arp_and_my_ip(uint16_t len) {
    return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
    136a:	80 91 9f 03 	lds	r24, 0x039F	; 0x80039f <_ZN8ENC28J606bufferE+0xc>
    136e:	88 30       	cpi	r24, 0x08	; 8
    1370:	09 f0       	breq	.+2      	; 0x1374 <_ZN9EtherCard10packetLoopEj+0x9c>
    1372:	e6 c0       	rjmp	.+460    	; 0x1540 <_ZN9EtherCard10packetLoopEj+0x268>
    1374:	80 91 a0 03 	lds	r24, 0x03A0	; 0x8003a0 <_ZN8ENC28J606bufferE+0xd>
    1378:	86 30       	cpi	r24, 0x06	; 6
    137a:	09 f0       	breq	.+2      	; 0x137e <_ZN9EtherCard10packetLoopEj+0xa6>
    137c:	dd c0       	rjmp	.+442    	; 0x1538 <_ZN9EtherCard10packetLoopEj+0x260>
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
           memcmp(gPB + ETH_ARP_DST_IP_P, EtherCard::myip, IP_LEN) == 0;
    137e:	44 e0       	ldi	r20, 0x04	; 4
    1380:	50 e0       	ldi	r21, 0x00	; 0
    1382:	69 ea       	ldi	r22, 0xA9	; 169
    1384:	75 e0       	ldi	r23, 0x05	; 5
    1386:	89 eb       	ldi	r24, 0xB9	; 185
    1388:	93 e0       	ldi	r25, 0x03	; 3
    138a:	0e 94 60 25 	call	0x4ac0	; 0x4ac0 <memcmp>
    return true;
}

static uint8_t eth_type_is_arp_and_my_ip(uint16_t len) {
    return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
    138e:	89 2b       	or	r24, r25
    1390:	09 f0       	breq	.+2      	; 0x1394 <_ZN9EtherCard10packetLoopEj+0xbc>
    1392:	d2 c0       	rjmp	.+420    	; 0x1538 <_ZN9EtherCard10packetLoopEj+0x260>
    EtherCard::copyIp(gPB + IP_SRC_P, EtherCard::myip);
    fill_ip_hdr_checksum();
}

static void make_arp_answer_from_request() {
    setMACs(gPB + ETH_SRC_MAC);
    1394:	c3 c0       	rjmp	.+390    	; 0x151c <_ZN9EtherCard10packetLoopEj+0x244>
    1396:	89 e9       	ldi	r24, 0x99	; 153
    1398:	93 e0       	ldi	r25, 0x03	; 3
    139a:	84 de       	rcall	.-760    	; 0x10a4 <_ZL7setMACsPKh>
    gPB[ETH_ARP_OPCODE_H_P] = ETH_ARP_OPCODE_REPLY_H_V;
    139c:	e3 e9       	ldi	r30, 0x93	; 147
    139e:	f3 e0       	ldi	r31, 0x03	; 3
    13a0:	14 8a       	std	Z+20, r1	; 0x14
    gPB[ETH_ARP_OPCODE_L_P] = ETH_ARP_OPCODE_REPLY_L_V;
    13a2:	82 e0       	ldi	r24, 0x02	; 2
    EtherCard::copyMac(gPB + ETH_ARP_DST_MAC_P, gPB + ETH_ARP_SRC_MAC_P);
    13a4:	85 8b       	std	Z+21, r24	; 0x15
    13a6:	69 ea       	ldi	r22, 0xA9	; 169
    13a8:	73 e0       	ldi	r23, 0x03	; 3
    13aa:	83 eb       	ldi	r24, 0xB3	; 179
    13ac:	93 e0       	ldi	r25, 0x03	; 3
    EtherCard::copyMac(gPB + ETH_ARP_SRC_MAC_P, EtherCard::mymac);
    13ae:	5e d1       	rcall	.+700    	; 0x166c <_ZN9EtherCard7copyMacEPhPKh>
    13b0:	6d ea       	ldi	r22, 0xAD	; 173
    13b2:	75 e0       	ldi	r23, 0x05	; 5
    13b4:	89 ea       	ldi	r24, 0xA9	; 169
    13b6:	93 e0       	ldi	r25, 0x03	; 3
    EtherCard::copyIp(gPB + ETH_ARP_DST_IP_P, gPB + ETH_ARP_SRC_IP_P);
    13b8:	59 d1       	rcall	.+690    	; 0x166c <_ZN9EtherCard7copyMacEPhPKh>
    13ba:	6f ea       	ldi	r22, 0xAF	; 175
    13bc:	73 e0       	ldi	r23, 0x03	; 3
    13be:	89 eb       	ldi	r24, 0xB9	; 185
    13c0:	93 e0       	ldi	r25, 0x03	; 3
    EtherCard::copyIp(gPB + ETH_ARP_SRC_IP_P, EtherCard::myip);
    13c2:	47 d1       	rcall	.+654    	; 0x1652 <_ZN9EtherCard6copyIpEPhPKh>
    13c4:	69 ea       	ldi	r22, 0xA9	; 169
    13c6:	75 e0       	ldi	r23, 0x05	; 5
    13c8:	8f ea       	ldi	r24, 0xAF	; 175
    13ca:	93 e0       	ldi	r25, 0x03	; 3
    13cc:	42 d1       	rcall	.+644    	; 0x1652 <_ZN9EtherCard6copyIpEPhPKh>
    EtherCard::packetSend(42);
    13ce:	8a e2       	ldi	r24, 0x2A	; 42
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	99 dc       	rcall	.-1742   	; 0xd06 <_ZN8ENC28J6010packetSendEj>
    13d4:	80 91 b3 05 	lds	r24, 0x05B3	; 0x8005b3 <_ZL9waitgwmac>

    if (eth_type_is_arp_and_my_ip(plen))
    {   //Service ARP request
        if (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REQ_L_V)
            make_arp_answer_from_request();
        if (waitgwmac & WGW_ACCEPT_ARP_REPLY && (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REPLY_L_V) && client_store_mac(gwip, gwmacaddr))
    13d8:	83 ff       	sbrs	r24, 3
    13da:	0e c0       	rjmp	.+28     	; 0x13f8 <_ZN9EtherCard10packetLoopEj+0x120>
    13dc:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <_ZN8ENC28J606bufferE+0x15>
    13e0:	82 30       	cpi	r24, 0x02	; 2
    13e2:	51 f4       	brne	.+20     	; 0x13f8 <_ZN9EtherCard10packetLoopEj+0x120>
    13e4:	64 eb       	ldi	r22, 0xB4	; 180
    13e6:	75 e0       	ldi	r23, 0x05	; 5
    13e8:	8d e9       	ldi	r24, 0x9D	; 157
    13ea:	95 e0       	ldi	r25, 0x05	; 5
    13ec:	84 de       	rcall	.-760    	; 0x10f6 <_ZL16client_store_macPhS_>
    13ee:	88 23       	and	r24, r24
    13f0:	19 f0       	breq	.+6      	; 0x13f8 <_ZN9EtherCard10packetLoopEj+0x120>
    13f2:	82 e0       	ldi	r24, 0x02	; 2
            waitgwmac = WGW_HAVE_GW_MAC;
    13f4:	80 93 b3 05 	sts	0x05B3, r24	; 0x8005b3 <_ZL9waitgwmac>
    13f8:	80 91 bc 05 	lds	r24, 0x05BC	; 0x8005bc <_ZL11has_dns_mac>
        if (!has_dns_mac && waiting_for_dns_mac && client_store_mac(dnsip, destmacaddr)) {
    13fc:	81 11       	cpse	r24, r1
    13fe:	10 c0       	rjmp	.+32     	; 0x1420 <_ZN9EtherCard10packetLoopEj+0x148>
    1400:	80 91 bd 05 	lds	r24, 0x05BD	; 0x8005bd <_ZL19waiting_for_dns_mac>
    1404:	88 23       	and	r24, r24
    1406:	61 f0       	breq	.+24     	; 0x1420 <_ZN9EtherCard10packetLoopEj+0x148>
    1408:	6e eb       	ldi	r22, 0xBE	; 190
    140a:	75 e0       	ldi	r23, 0x05	; 5
    140c:	89 e9       	ldi	r24, 0x99	; 153
    140e:	95 e0       	ldi	r25, 0x05	; 5
    1410:	72 de       	rcall	.-796    	; 0x10f6 <_ZL16client_store_macPhS_>
    1412:	88 23       	and	r24, r24
    1414:	29 f0       	breq	.+10     	; 0x1420 <_ZN9EtherCard10packetLoopEj+0x148>
    1416:	81 e0       	ldi	r24, 0x01	; 1
            has_dns_mac = true;
    1418:	80 93 bc 05 	sts	0x05BC, r24	; 0x8005bc <_ZL11has_dns_mac>
    141c:	10 92 bd 05 	sts	0x05BD, r1	; 0x8005bd <_ZL19waiting_for_dns_mac>
            waiting_for_dns_mac = false;
    1420:	80 91 ba 05 	lds	r24, 0x05BA	; 0x8005ba <_ZL12has_dest_mac>
        }
        if (!has_dest_mac && waiting_for_dest_mac && client_store_mac(hisip, destmacaddr)) {
    1424:	81 11       	cpse	r24, r1
    1426:	8c c0       	rjmp	.+280    	; 0x1540 <_ZN9EtherCard10packetLoopEj+0x268>
    1428:	80 91 bb 05 	lds	r24, 0x05BB	; 0x8005bb <_ZL20waiting_for_dest_mac>
    142c:	88 23       	and	r24, r24
    142e:	09 f4       	brne	.+2      	; 0x1432 <_ZN9EtherCard10packetLoopEj+0x15a>
    1430:	87 c0       	rjmp	.+270    	; 0x1540 <_ZN9EtherCard10packetLoopEj+0x268>
    1432:	6e eb       	ldi	r22, 0xBE	; 190
    1434:	75 e0       	ldi	r23, 0x05	; 5
    1436:	85 e9       	ldi	r24, 0x95	; 149
    1438:	95 e0       	ldi	r25, 0x05	; 5
    143a:	5d de       	rcall	.-838    	; 0x10f6 <_ZL16client_store_macPhS_>
    143c:	88 23       	and	r24, r24
    143e:	09 f4       	brne	.+2      	; 0x1442 <_ZN9EtherCard10packetLoopEj+0x16a>
    1440:	7f c0       	rjmp	.+254    	; 0x1540 <_ZN9EtherCard10packetLoopEj+0x268>
    1442:	81 e0       	ldi	r24, 0x01	; 1
            has_dest_mac = true;
    1444:	80 93 ba 05 	sts	0x05BA, r24	; 0x8005ba <_ZL12has_dest_mac>
    1448:	10 92 bb 05 	sts	0x05BB, r1	; 0x8005bb <_ZL20waiting_for_dest_mac>
            waiting_for_dest_mac = false;
    144c:	79 c0       	rjmp	.+242    	; 0x1540 <_ZN9EtherCard10packetLoopEj+0x268>
    144e:	80 91 9f 03 	lds	r24, 0x039F	; 0x80039f <_ZN8ENC28J606bufferE+0xc>
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
           memcmp(gPB + ETH_ARP_DST_IP_P, EtherCard::myip, IP_LEN) == 0;
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
    1452:	88 30       	cpi	r24, 0x08	; 8
    1454:	09 f0       	breq	.+2      	; 0x1458 <_ZN9EtherCard10packetLoopEj+0x180>
    1456:	74 c0       	rjmp	.+232    	; 0x1540 <_ZN9EtherCard10packetLoopEj+0x268>
    1458:	80 91 a0 03 	lds	r24, 0x03A0	; 0x8003a0 <_ZN8ENC28J606bufferE+0xd>
    145c:	81 11       	cpse	r24, r1
    145e:	70 c0       	rjmp	.+224    	; 0x1540 <_ZN9EtherCard10packetLoopEj+0x268>
    1460:	80 91 a1 03 	lds	r24, 0x03A1	; 0x8003a1 <_ZN8ENC28J606bufferE+0xe>
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
    1464:	85 34       	cpi	r24, 0x45	; 69
    1466:	09 f0       	breq	.+2      	; 0x146a <_ZN9EtherCard10packetLoopEj+0x192>
    1468:	6b c0       	rjmp	.+214    	; 0x1540 <_ZN9EtherCard10packetLoopEj+0x268>
    146a:	44 e0       	ldi	r20, 0x04	; 4
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
           (memcmp(gPB + IP_DST_P, EtherCard::myip, IP_LEN) == 0  //not my IP
    146c:	50 e0       	ldi	r21, 0x00	; 0
    146e:	69 ea       	ldi	r22, 0xA9	; 169
    1470:	75 e0       	ldi	r23, 0x05	; 5
    1472:	81 eb       	ldi	r24, 0xB1	; 177
    1474:	93 e0       	ldi	r25, 0x03	; 3
    1476:	0e 94 60 25 	call	0x4ac0	; 0x4ac0 <memcmp>
    147a:	89 2b       	or	r24, r25
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
    147c:	09 f4       	brne	.+2      	; 0x1480 <_ZN9EtherCard10packetLoopEj+0x1a8>
    147e:	54 c0       	rjmp	.+168    	; 0x1528 <_ZN9EtherCard10packetLoopEj+0x250>
    1480:	44 e0       	ldi	r20, 0x04	; 4
           (memcmp(gPB + IP_DST_P, EtherCard::myip, IP_LEN) == 0  //not my IP
            || (memcmp(gPB + IP_DST_P, EtherCard::broadcastip, IP_LEN) == 0) //not subnet broadcast
    1482:	50 e0       	ldi	r21, 0x00	; 0
    1484:	61 ea       	ldi	r22, 0xA1	; 161
    1486:	75 e0       	ldi	r23, 0x05	; 5
    1488:	81 eb       	ldi	r24, 0xB1	; 177
    148a:	93 e0       	ldi	r25, 0x03	; 3
    148c:	0e 94 60 25 	call	0x4ac0	; 0x4ac0 <memcmp>
    1490:	89 2b       	or	r24, r25
    1492:	09 f4       	brne	.+2      	; 0x1496 <_ZN9EtherCard10packetLoopEj+0x1be>
    1494:	49 c0       	rjmp	.+146    	; 0x1528 <_ZN9EtherCard10packetLoopEj+0x250>
    1496:	44 e0       	ldi	r20, 0x04	; 4
            || (memcmp(gPB + IP_DST_P, allOnes, IP_LEN) == 0)); //not global broadcasts
    1498:	50 e0       	ldi	r21, 0x00	; 0
    149a:	65 e2       	ldi	r22, 0x25	; 37
    149c:	72 e0       	ldi	r23, 0x02	; 2
    149e:	81 eb       	ldi	r24, 0xB1	; 177
    14a0:	93 e0       	ldi	r25, 0x03	; 3
    14a2:	0e 94 60 25 	call	0x4ac0	; 0x4ac0 <memcmp>
    14a6:	89 2b       	or	r24, r25
    14a8:	09 f0       	breq	.+2      	; 0x14ac <_ZN9EtherCard10packetLoopEj+0x1d4>
    14aa:	4a c0       	rjmp	.+148    	; 0x1540 <_ZN9EtherCard10packetLoopEj+0x268>
    14ac:	3d c0       	rjmp	.+122    	; 0x1528 <_ZN9EtherCard10packetLoopEj+0x250>
    14ae:	80 91 b5 03 	lds	r24, 0x03B5	; 0x8003b5 <_ZN8ENC28J606bufferE+0x22>
        //!@todo Add other protocols (and make each optional at compile time)
        return 0;
    }
	
	//To handle pinging
	if (gPB[IP_PROTO_P]==IP_PROTO_ICMP_V && gPB[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V)
    14b2:	88 30       	cpi	r24, 0x08	; 8
    14b4:	c9 f4       	brne	.+50     	; 0x14e8 <_ZN9EtherCard10packetLoopEj+0x210>
	{   //Service ICMP echo request (ping)
		if (icmp_cb)
    14b6:	e0 91 c4 05 	lds	r30, 0x05C4	; 0x8005c4 <_ZL7icmp_cb>
    14ba:	f0 91 c5 05 	lds	r31, 0x05C5	; 0x8005c5 <_ZL7icmp_cb+0x1>
    14be:	30 97       	sbiw	r30, 0x00	; 0
    14c0:	19 f0       	breq	.+6      	; 0x14c8 <_ZN9EtherCard10packetLoopEj+0x1f0>
		(*icmp_cb)(&(gPB[IP_SRC_P]));
    14c2:	8d ea       	ldi	r24, 0xAD	; 173
    14c4:	93 e0       	ldi	r25, 0x03	; 3
    14c6:	19 95       	eicall
void EtherCard::registerPingCallback (void (*callback)(uint8_t *srcip)) {
    icmp_cb = callback;
}

static void make_echo_reply_from_request(uint16_t len) {
	make_eth_ip();
    14c8:	f7 dd       	rcall	.-1042   	; 0x10b8 <_ZL11make_eth_ipv>
	gPB[ICMP_TYPE_P] = ICMP_TYPE_ECHOREPLY_V;
    14ca:	e3 e9       	ldi	r30, 0x93	; 147
    14cc:	f3 e0       	ldi	r31, 0x03	; 3
	if (gPB[ICMP_CHECKSUM_P] > (0xFF-0x08))
    14ce:	12 a2       	std	Z+34, r1	; 0x22
    14d0:	84 a1       	ldd	r24, Z+36	; 0x24
    14d2:	88 3f       	cpi	r24, 0xF8	; 248
	gPB[ICMP_CHECKSUM_P+1]++;
    14d4:	18 f0       	brcs	.+6      	; 0x14dc <_ZN9EtherCard10packetLoopEj+0x204>
    14d6:	95 a1       	ldd	r25, Z+37	; 0x25
    14d8:	9f 5f       	subi	r25, 0xFF	; 255
	gPB[ICMP_CHECKSUM_P] += 0x08;
    14da:	95 a3       	std	Z+37, r25	; 0x25
    14dc:	88 5f       	subi	r24, 0xF8	; 248
	EtherCard::packetSend(len);
    14de:	80 93 b7 03 	sts	0x03B7, r24	; 0x8003b7 <_ZN8ENC28J606bufferE+0x24>
    14e2:	ce 01       	movw	r24, r28
    14e4:	10 dc       	rcall	.-2016   	; 0xd06 <_ZN8ENC28J6010packetSendEj>
		make_echo_reply_from_request(plen);
		return 0;
	}

#if ETHERCARD_UDPSERVER
    if (ether.udpServerListening() && gPB[IP_PROTO_P]==IP_PROTO_UDP_V)
    14e6:	2c c0       	rjmp	.+88     	; 0x1540 <_ZN9EtherCard10packetLoopEj+0x268>
    14e8:	4a d0       	rcall	.+148    	; 0x157e <_ZN9EtherCard18udpServerListeningEv>
    14ea:	88 23       	and	r24, r24
    14ec:	49 f1       	breq	.+82     	; 0x1540 <_ZN9EtherCard10packetLoopEj+0x268>
    14ee:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <_ZN8ENC28J606bufferE+0x17>
    14f2:	81 31       	cpi	r24, 0x11	; 17
    14f4:	29 f5       	brne	.+74     	; 0x1540 <_ZN9EtherCard10packetLoopEj+0x268>
        }
        delaycnt++;

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, dnsip) && !has_dns_mac && !waiting_for_dns_mac) {
            client_arp_whohas(dnsip);
    14f6:	1d c0       	rjmp	.+58     	; 0x1532 <_ZN9EtherCard10packetLoopEj+0x25a>
    14f8:	89 e9       	ldi	r24, 0x99	; 153
    14fa:	95 e0       	ldi	r25, 0x05	; 5
    14fc:	12 de       	rcall	.-988    	; 0x1122 <_ZL17client_arp_whohasPh>
            waiting_for_dns_mac = true;
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	80 93 bd 05 	sts	0x05BD, r24	; 0x8005bd <_ZL19waiting_for_dns_mac>
    1504:	1d cf       	rjmp	.-454    	; 0x1340 <_ZN9EtherCard10packetLoopEj+0x68>
        }

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, hisip) && !has_dest_mac && !waiting_for_dest_mac) {
            client_arp_whohas(hisip);
    1506:	85 e9       	ldi	r24, 0x95	; 149
    1508:	95 e0       	ldi	r25, 0x05	; 5
    150a:	0b de       	rcall	.-1002   	; 0x1122 <_ZL17client_arp_whohasPh>
    150c:	81 e0       	ldi	r24, 0x01	; 1
            waiting_for_dest_mac = true;
    150e:	80 93 bb 05 	sts	0x05BB, r24	; 0x8005bb <_ZL20waiting_for_dest_mac>
    1512:	16 c0       	rjmp	.+44     	; 0x1540 <_ZN9EtherCard10packetLoopEj+0x268>
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
    1514:	8a 97       	sbiw	r24, 0x2a	; 42
    1516:	08 f0       	brcs	.+2      	; 0x151a <_ZN9EtherCard10packetLoopEj+0x242>
    1518:	9a cf       	rjmp	.-204    	; 0x144e <_ZN9EtherCard10packetLoopEj+0x176>
    151a:	12 c0       	rjmp	.+36     	; 0x1540 <_ZN9EtherCard10packetLoopEj+0x268>
        return 0;
    }

    if (eth_type_is_arp_and_my_ip(plen))
    {   //Service ARP request
        if (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REQ_L_V)
    151c:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <_ZN8ENC28J606bufferE+0x15>
    1520:	81 30       	cpi	r24, 0x01	; 1
    1522:	09 f0       	breq	.+2      	; 0x1526 <_ZN9EtherCard10packetLoopEj+0x24e>
    1524:	57 cf       	rjmp	.-338    	; 0x13d4 <_ZN9EtherCard10packetLoopEj+0xfc>
    1526:	37 cf       	rjmp	.-402    	; 0x1396 <_ZN9EtherCard10packetLoopEj+0xbe>
        //!@todo Add other protocols (and make each optional at compile time)
        return 0;
    }
	
	//To handle pinging
	if (gPB[IP_PROTO_P]==IP_PROTO_ICMP_V && gPB[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V)
    1528:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <_ZN8ENC28J606bufferE+0x17>
    152c:	81 30       	cpi	r24, 0x01	; 1
    152e:	e1 f6       	brne	.-72     	; 0x14e8 <_ZN9EtherCard10packetLoopEj+0x210>
    1530:	be cf       	rjmp	.-132    	; 0x14ae <_ZN9EtherCard10packetLoopEj+0x1d6>
	}

#if ETHERCARD_UDPSERVER
    if (ether.udpServerListening() && gPB[IP_PROTO_P]==IP_PROTO_UDP_V)
    {   //Call UDP server handler (callback) if one is defined for this packet
        if(ether.udpServerHasProcessedPacket(plen))
    1532:	ce 01       	movw	r24, r28
    1534:	2b d0       	rcall	.+86     	; 0x158c <_ZN9EtherCard27udpServerHasProcessedPacketEj>
    1536:	04 c0       	rjmp	.+8      	; 0x1540 <_ZN9EtherCard10packetLoopEj+0x268>
    1538:	ca 32       	cpi	r28, 0x2A	; 42
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
    153a:	d1 05       	cpc	r29, r1
    153c:	08 f0       	brcs	.+2      	; 0x1540 <_ZN9EtherCard10packetLoopEj+0x268>
    153e:	8c cf       	rjmp	.-232    	; 0x1458 <_ZN9EtherCard10packetLoopEj+0x180>
    1540:	80 e0       	ldi	r24, 0x00	; 0

    if (plen<54 || gPB[IP_PROTO_P]!=IP_PROTO_TCP_V )
        return 0; //from here on we are only interested in TCP-packets; these are longer than 54 bytes
		
	return 0;
}
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	df 91       	pop	r29
    1546:	cf 91       	pop	r28
    1548:	08 95       	ret

0000154a <_ZN9EtherCard21udpServerListenOnPortEPFvjPhjPKcjEj>:
    154a:	9c 01       	movw	r18, r24
    {
        if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((uint8_t) listeners[i].port)) {
            listeners[i].listening = true;
        }
    }
}
    154c:	90 91 c6 05 	lds	r25, 0x05C6	; 0x8005c6 <numListeners>
    1550:	98 30       	cpi	r25, 0x08	; 8
    1552:	a0 f4       	brcc	.+40     	; 0x157c <_ZN9EtherCard21udpServerListenOnPortEPFvjPhjPKcjEj+0x32>
    1554:	e9 2f       	mov	r30, r25
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	af 01       	movw	r20, r30
    155a:	44 0f       	add	r20, r20
    155c:	55 1f       	adc	r21, r21
    155e:	44 0f       	add	r20, r20
    1560:	55 1f       	adc	r21, r21
    1562:	e4 0f       	add	r30, r20
    1564:	f5 1f       	adc	r31, r21
    1566:	e9 53       	subi	r30, 0x39	; 57
    1568:	fa 4f       	sbci	r31, 0xFA	; 250
    156a:	31 83       	std	Z+1, r19	; 0x01
    156c:	20 83       	st	Z, r18
    156e:	73 83       	std	Z+3, r23	; 0x03
    1570:	62 83       	std	Z+2, r22	; 0x02
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	84 83       	std	Z+4, r24	; 0x04
    1576:	9f 5f       	subi	r25, 0xFF	; 255
    1578:	90 93 c6 05 	sts	0x05C6, r25	; 0x8005c6 <numListeners>
    157c:	08 95       	ret

0000157e <_ZN9EtherCard18udpServerListeningEv>:

bool EtherCard::udpServerListening() {
    return numListeners > 0;
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	90 91 c6 05 	lds	r25, 0x05C6	; 0x8005c6 <numListeners>
    1584:	91 11       	cpse	r25, r1
    1586:	01 c0       	rjmp	.+2      	; 0x158a <_ZN9EtherCard18udpServerListeningEv+0xc>
    1588:	80 e0       	ldi	r24, 0x00	; 0
}
    158a:	08 95       	ret

0000158c <_ZN9EtherCard27udpServerHasProcessedPacketEj>:

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    158c:	8f 92       	push	r8
    158e:	9f 92       	push	r9
    1590:	bf 92       	push	r11
    1592:	cf 92       	push	r12
    1594:	df 92       	push	r13
    1596:	ef 92       	push	r14
    1598:	ff 92       	push	r15
    159a:	0f 93       	push	r16
    159c:	1f 93       	push	r17
    159e:	cf 93       	push	r28
    15a0:	df 93       	push	r29
    bool packetProcessed = false;
    for(int i = 0; i < numListeners; i++)
    15a2:	80 91 c6 05 	lds	r24, 0x05C6	; 0x8005c6 <numListeners>
    15a6:	88 23       	and	r24, r24
    15a8:	09 f4       	brne	.+2      	; 0x15ac <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x20>
    15aa:	46 c0       	rjmp	.+140    	; 0x1638 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0xac>
    15ac:	c7 ec       	ldi	r28, 0xC7	; 199
    15ae:	d5 e0       	ldi	r29, 0x05	; 5
    15b0:	e1 2c       	mov	r14, r1
    15b2:	f1 2c       	mov	r15, r1
    15b4:	80 e0       	ldi	r24, 0x00	; 0
    {
        if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((uint8_t) listeners[i].port) && listeners[i].listening)
    15b6:	0f 2e       	mov	r0, r31
    15b8:	f3 e9       	ldi	r31, 0x93	; 147
    15ba:	cf 2e       	mov	r12, r31
    15bc:	f3 e0       	ldi	r31, 0x03	; 3
    15be:	df 2e       	mov	r13, r31
    15c0:	f0 2d       	mov	r31, r0
                listeners[i].port,
                gPB + IP_SRC_P,
                (gPB[UDP_SRC_PORT_H_P] << 8) | gPB[UDP_SRC_PORT_L_P],
                (const char *) (gPB + UDP_DATA_P),
                datalen);
            packetProcessed = true;
    15c2:	bb 24       	eor	r11, r11
    15c4:	b3 94       	inc	r11

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    bool packetProcessed = false;
    for(int i = 0; i < numListeners; i++)
    {
        if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((uint8_t) listeners[i].port) && listeners[i].listening)
    15c6:	aa 81       	ldd	r26, Y+2	; 0x02
    15c8:	bb 81       	ldd	r27, Y+3	; 0x03
    15ca:	f6 01       	movw	r30, r12
    15cc:	24 a1       	ldd	r18, Z+36	; 0x24
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	4b 2f       	mov	r20, r27
    15d2:	55 27       	eor	r21, r21
    15d4:	24 17       	cp	r18, r20
    15d6:	35 07       	cpc	r19, r21
    15d8:	21 f5       	brne	.+72     	; 0x1622 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x96>
    15da:	25 a1       	ldd	r18, Z+37	; 0x25
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	ad 01       	movw	r20, r26
    15e0:	55 27       	eor	r21, r21
    15e2:	24 17       	cp	r18, r20
    15e4:	35 07       	cpc	r19, r21
    15e6:	e9 f4       	brne	.+58     	; 0x1622 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x96>
    15e8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ea:	99 23       	and	r25, r25
    15ec:	d1 f0       	breq	.+52     	; 0x1622 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x96>
            listeners[i].callback(
                listeners[i].port,
                gPB + IP_SRC_P,
                (gPB[UDP_SRC_PORT_H_P] << 8) | gPB[UDP_SRC_PORT_L_P],
                (const char *) (gPB + UDP_DATA_P),
                datalen);
    15ee:	07 a1       	ldd	r16, Z+39	; 0x27
    15f0:	10 e0       	ldi	r17, 0x00	; 0
    15f2:	08 50       	subi	r16, 0x08	; 8
    15f4:	11 09       	sbc	r17, r1
    15f6:	86 a1       	ldd	r24, Z+38	; 0x26
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	98 2f       	mov	r25, r24
    15fc:	88 27       	eor	r24, r24
    15fe:	08 0f       	add	r16, r24
    1600:	19 1f       	adc	r17, r25
    1602:	42 a1       	ldd	r20, Z+34	; 0x22
    1604:	50 e0       	ldi	r21, 0x00	; 0
    1606:	54 2f       	mov	r21, r20
    1608:	44 27       	eor	r20, r20
    160a:	83 a1       	ldd	r24, Z+35	; 0x23
    160c:	48 2b       	or	r20, r24
    160e:	88 80       	ld	r8, Y
    1610:	99 80       	ldd	r9, Y+1	; 0x01
    1612:	2d eb       	ldi	r18, 0xBD	; 189
    1614:	33 e0       	ldi	r19, 0x03	; 3
    1616:	6d ea       	ldi	r22, 0xAD	; 173
    1618:	73 e0       	ldi	r23, 0x03	; 3
    161a:	cd 01       	movw	r24, r26
    161c:	f4 01       	movw	r30, r8
    161e:	19 95       	eicall
            packetProcessed = true;
    1620:	8b 2d       	mov	r24, r11
    return numListeners > 0;
}

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    bool packetProcessed = false;
    for(int i = 0; i < numListeners; i++)
    1622:	ff ef       	ldi	r31, 0xFF	; 255
    1624:	ef 1a       	sub	r14, r31
    1626:	ff 0a       	sbc	r15, r31
    1628:	25 96       	adiw	r28, 0x05	; 5
    162a:	20 91 c6 05 	lds	r18, 0x05C6	; 0x8005c6 <numListeners>
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	e2 16       	cp	r14, r18
    1632:	f3 06       	cpc	r15, r19
    1634:	44 f2       	brlt	.-112    	; 0x15c6 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x3a>
    1636:	01 c0       	rjmp	.+2      	; 0x163a <_ZN9EtherCard27udpServerHasProcessedPacketEj+0xae>
bool EtherCard::udpServerListening() {
    return numListeners > 0;
}

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    bool packetProcessed = false;
    1638:	80 e0       	ldi	r24, 0x00	; 0
                datalen);
            packetProcessed = true;
        }
    }
    return packetProcessed;
}
    163a:	df 91       	pop	r29
    163c:	cf 91       	pop	r28
    163e:	1f 91       	pop	r17
    1640:	0f 91       	pop	r16
    1642:	ff 90       	pop	r15
    1644:	ef 90       	pop	r14
    1646:	df 90       	pop	r13
    1648:	cf 90       	pop	r12
    164a:	bf 90       	pop	r11
    164c:	9f 90       	pop	r9
    164e:	8f 90       	pop	r8
    1650:	08 95       	ret

00001652 <_ZN9EtherCard6copyIpEPhPKh>:
#include "../Peripherals/HardwareSerial.h"
#include <stdlib.h>
#include <ctype.h>

void EtherCard::copyIp (uint8_t *dst, const uint8_t *src) {
    memcpy(dst, src, IP_LEN);
    1652:	fb 01       	movw	r30, r22
    1654:	20 81       	ld	r18, Z
    1656:	31 81       	ldd	r19, Z+1	; 0x01
    1658:	fc 01       	movw	r30, r24
    165a:	31 83       	std	Z+1, r19	; 0x01
    165c:	20 83       	st	Z, r18
    165e:	fb 01       	movw	r30, r22
    1660:	22 81       	ldd	r18, Z+2	; 0x02
    1662:	33 81       	ldd	r19, Z+3	; 0x03
    1664:	fc 01       	movw	r30, r24
    1666:	33 83       	std	Z+3, r19	; 0x03
    1668:	22 83       	std	Z+2, r18	; 0x02
    166a:	08 95       	ret

0000166c <_ZN9EtherCard7copyMacEPhPKh>:
}

void EtherCard::copyMac (uint8_t *dst, const uint8_t *src) {
    166c:	dc 01       	movw	r26, r24
    memcpy(dst, src, ETH_LEN);
    166e:	96 e0       	ldi	r25, 0x06	; 6
    1670:	fb 01       	movw	r30, r22
    1672:	01 90       	ld	r0, Z+
    1674:	0d 92       	st	X+, r0
    1676:	9a 95       	dec	r25
    1678:	e1 f7       	brne	.-8      	; 0x1672 <_ZN9EtherCard7copyMacEPhPKh+0x6>
    167a:	08 95       	ret

0000167c <_ZN9EtherComm13CheckChecksumEPKch>:
	}
}

bool EtherComm::CheckChecksum(const char *data, uint8_t len){
  //data++; //Ignore first byte, the start byte.
  uint8_t checksum = (uint8_t)(*(data++)); //Start by 'adding' the command to the checksum
    167c:	fc 01       	movw	r30, r24
    167e:	20 81       	ld	r18, Z
  checksum += (uint8_t)(*(data++));
    1680:	dc 01       	movw	r26, r24
    1682:	12 96       	adiw	r26, 0x02	; 2
    1684:	81 81       	ldd	r24, Z+1	; 0x01
    1686:	92 2f       	mov	r25, r18
    1688:	98 0f       	add	r25, r24
  while(len-- > 0){
    168a:	3f ef       	ldi	r19, 0xFF	; 255
    168c:	36 0f       	add	r19, r22
    168e:	66 23       	and	r22, r22
    1690:	61 f0       	breq	.+24     	; 0x16aa <_ZN9EtherComm13CheckChecksumEPKch+0x2e>
    1692:	fd 01       	movw	r30, r26
    1694:	83 2f       	mov	r24, r19
    checksum += (uint8_t)(*(data++));
    1696:	21 91       	ld	r18, Z+
    1698:	92 0f       	add	r25, r18

bool EtherComm::CheckChecksum(const char *data, uint8_t len){
  //data++; //Ignore first byte, the start byte.
  uint8_t checksum = (uint8_t)(*(data++)); //Start by 'adding' the command to the checksum
  checksum += (uint8_t)(*(data++));
  while(len-- > 0){
    169a:	81 50       	subi	r24, 0x01	; 1
    169c:	e0 f7       	brcc	.-8      	; 0x1696 <_ZN9EtherComm13CheckChecksumEPKch+0x1a>
    169e:	23 2f       	mov	r18, r19
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	2f 5f       	subi	r18, 0xFF	; 255
    16a4:	3f 4f       	sbci	r19, 0xFF	; 255
    16a6:	a2 0f       	add	r26, r18
    16a8:	b3 1f       	adc	r27, r19
    checksum += (uint8_t)(*(data++));
  }
//  Serial.println((uint8_t)(checksum & CHECKSUM_MASK));
  return (checksum & CHECKSUM_MASK) == (uint8_t)(*data);
    16aa:	81 e0       	ldi	r24, 0x01	; 1
    16ac:	2c 91       	ld	r18, X
    16ae:	29 13       	cpse	r18, r25
    16b0:	80 e0       	ldi	r24, 0x00	; 0
}
    16b2:	08 95       	ret

000016b4 <_Z10udpReceivejPhjPKcj>:

//char EtherComm::buffer[BUFFER_SIZE];
uint8_t* EtherComm::buffer = ether.buffer + UDP_DATA_P;

//callback that prints received packets to the serial port
void udpReceive(uint16_t dest_port, uint8_t src_ip[IP_LEN], uint16_t src_port, const char *data, uint16_t packetLen){
    16b4:	0f 93       	push	r16
    16b6:	1f 93       	push	r17
    16b8:	cf 93       	push	r28
    16ba:	df 93       	push	r29
	}
	Serial.println();
	Serial.print("Checksum: ");
	Serial.println((uint8_t)(*index));
*/	
	if(packetLen >= 3){ //At minimum, start byte, command, and checksum.
    16bc:	a8 01       	movw	r20, r16
    16be:	43 50       	subi	r20, 0x03	; 3
    16c0:	51 09       	sbc	r21, r1
    16c2:	4f 3f       	cpi	r20, 0xFF	; 255
    16c4:	51 05       	cpc	r21, r1
    16c6:	09 f0       	breq	.+2      	; 0x16ca <_Z10udpReceivejPhjPKcj+0x16>
    16c8:	88 f4       	brcc	.+34     	; 0x16ec <_Z10udpReceivejPhjPKcj+0x38>
		if(packetLen <= 258){
			uint8_t dataLen = (uint8_t)(packetLen - 3);
			if((uint8_t)data[0] == START_BYTE){
    16ca:	f9 01       	movw	r30, r18
    16cc:	80 81       	ld	r24, Z
    16ce:	8f 3f       	cpi	r24, 0xFF	; 255
    16d0:	69 f4       	brne	.+26     	; 0x16ec <_Z10udpReceivejPhjPKcj+0x38>
    16d2:	e9 01       	movw	r28, r18
	Serial.print("Checksum: ");
	Serial.println((uint8_t)(*index));
*/	
	if(packetLen >= 3){ //At minimum, start byte, command, and checksum.
		if(packetLen <= 258){
			uint8_t dataLen = (uint8_t)(packetLen - 3);
    16d4:	03 50       	subi	r16, 0x03	; 3
			if((uint8_t)data[0] == START_BYTE){
			//		Serial.print("Computed Checksum: ");
				if(EtherComm::CheckChecksum(data, dataLen)){
    16d6:	60 2f       	mov	r22, r16
    16d8:	c9 01       	movw	r24, r18
    16da:	d0 df       	rcall	.-96     	; 0x167c <_ZN9EtherComm13CheckChecksumEPKch>
    16dc:	88 23       	and	r24, r24
    16de:	31 f0       	breq	.+12     	; 0x16ec <_Z10udpReceivejPhjPKcj+0x38>
					EtherComm::CommandReceived((uint8_t)data[1], (const uint8_t*)(data + 2), dataLen);
    16e0:	be 01       	movw	r22, r28
    16e2:	6e 5f       	subi	r22, 0xFE	; 254
    16e4:	7f 4f       	sbci	r23, 0xFF	; 255
    16e6:	40 2f       	mov	r20, r16
    16e8:	89 81       	ldd	r24, Y+1	; 0x01
    16ea:	96 d9       	rcall	.-3284   	; 0xa18 <_ZN9EtherComm15CommandReceivedEhPKhh>
				}
			}
		}
	}
}
    16ec:	df 91       	pop	r29
    16ee:	cf 91       	pop	r28
    16f0:	1f 91       	pop	r17
    16f2:	0f 91       	pop	r16
    16f4:	08 95       	ret

000016f6 <_ZN9EtherComm5beginEjjRVhS1_h>:
  }
//  Serial.println((uint8_t)(checksum & CHECKSUM_MASK));
  return (checksum & CHECKSUM_MASK) == (uint8_t)(*data);
}

bool EtherComm::begin(uint16_t recvPort, uint16_t destPort, Register& csDDR, Register& csPort, uint8_t csPin){
    16f6:	0f 93       	push	r16
    16f8:	cf 93       	push	r28
    16fa:	df 93       	push	r29
    16fc:	ec 01       	movw	r28, r24
    16fe:	ca 01       	movw	r24, r20
    1700:	a9 01       	movw	r20, r18
    1702:	20 2f       	mov	r18, r16
  EtherComm::_recvPort = recvPort;
    1704:	d0 93 f2 05 	sts	0x05F2, r29	; 0x8005f2 <_ZN9EtherComm9_recvPortE+0x1>
    1708:	c0 93 f1 05 	sts	0x05F1, r28	; 0x8005f1 <_ZN9EtherComm9_recvPortE>
  EtherComm::_destPort = destPort;
    170c:	70 93 f0 05 	sts	0x05F0, r23	; 0x8005f0 <_ZN9EtherComm9_destPortE+0x1>
    1710:	60 93 ef 05 	sts	0x05EF, r22	; 0x8005ef <_ZN9EtherComm9_destPortE>
  
  if (ether.begin(EtherComm::_mymac, csDDR, csPort, csPin) == 0) return false;
    1714:	bc 01       	movw	r22, r24
    1716:	86 e0       	ldi	r24, 0x06	; 6
    1718:	92 e0       	ldi	r25, 0x02	; 2
    171a:	d3 db       	rcall	.-2138   	; 0xec2 <_ZN9EtherCard5beginEPKhRVhS3_h>
    171c:	88 23       	and	r24, r24
    171e:	79 f0       	breq	.+30     	; 0x173e <_ZN9EtherComm5beginEjjRVhS1_h+0x48>
  ether.staticSetup(EtherComm::_myip, EtherComm::_gwip);
    1720:	20 e0       	ldi	r18, 0x00	; 0
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	40 e0       	ldi	r20, 0x00	; 0
    1726:	50 e0       	ldi	r21, 0x00	; 0
    1728:	6c e0       	ldi	r22, 0x0C	; 12
    172a:	72 e0       	ldi	r23, 0x02	; 2
    172c:	80 e1       	ldi	r24, 0x10	; 16
    172e:	92 e0       	ldi	r25, 0x02	; 2
    1730:	e1 db       	rcall	.-2110   	; 0xef4 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_>
  ether.printIp("GW:  ", ether.gwip);
  ether.printIp("DNS: ", ether.dnsip);
  */
  
  //Register the udpSerialPrint() method to listen to port the receive port.
  ether.udpServerListenOnPort(&udpReceive, recvPort);
    1732:	be 01       	movw	r22, r28
    1734:	8a e5       	ldi	r24, 0x5A	; 90
    1736:	9b e0       	ldi	r25, 0x0B	; 11
    1738:	08 df       	rcall	.-496    	; 0x154a <_ZN9EtherCard21udpServerListenOnPortEPFvjPhjPKcjEj>
  
  return true;
    173a:	81 e0       	ldi	r24, 0x01	; 1
    173c:	01 c0       	rjmp	.+2      	; 0x1740 <_ZN9EtherComm5beginEjjRVhS1_h+0x4a>

bool EtherComm::begin(uint16_t recvPort, uint16_t destPort, Register& csDDR, Register& csPort, uint8_t csPin){
  EtherComm::_recvPort = recvPort;
  EtherComm::_destPort = destPort;
  
  if (ether.begin(EtherComm::_mymac, csDDR, csPort, csPin) == 0) return false;
    173e:	80 e0       	ldi	r24, 0x00	; 0
  
  //Register the udpSerialPrint() method to listen to port the receive port.
  ether.udpServerListenOnPort(&udpReceive, recvPort);
  
  return true;
}
    1740:	df 91       	pop	r29
    1742:	cf 91       	pop	r28
    1744:	0f 91       	pop	r16
    1746:	08 95       	ret

00001748 <_ZN9EtherComm11SendCommandEhh>:

void EtherComm::SendCommand(uint8_t cmd, uint8_t len){
    1748:	0f 93       	push	r16
    174a:	1f 93       	push	r17
    174c:	cf 93       	push	r28
    174e:	df 93       	push	r29
  EtherComm::buffer[0] = START_BYTE;
    1750:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    1754:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    1758:	9f ef       	ldi	r25, 0xFF	; 255
    175a:	90 83       	st	Z, r25
  EtherComm::buffer[1] = cmd;
    175c:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    1760:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    1764:	81 83       	std	Z+1, r24	; 0x01
  //EtherComm::buffer[2] = len;
  
  uint8_t checksum = START_BYTE + cmd;
    1766:	81 50       	subi	r24, 0x01	; 1
  uint8_t* index = &EtherComm::buffer[2]; //TODO why is char* being used? convert ot uint8_t*!!
    1768:	c0 91 00 02 	lds	r28, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    176c:	d0 91 01 02 	lds	r29, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    1770:	de 01       	movw	r26, r28
    1772:	12 96       	adiw	r26, 0x02	; 2
  uint8_t bytes = len;
  while(bytes-- > 0){
    1774:	4f ef       	ldi	r20, 0xFF	; 255
    1776:	46 0f       	add	r20, r22
    1778:	66 23       	and	r22, r22
    177a:	81 f0       	breq	.+32     	; 0x179c <_ZN9EtherComm11SendCommandEhh+0x54>
    177c:	fd 01       	movw	r30, r26
    177e:	50 e0       	ldi	r21, 0x00	; 0
    1780:	9a 01       	movw	r18, r20
    1782:	2d 5f       	subi	r18, 0xFD	; 253
    1784:	3f 4f       	sbci	r19, 0xFF	; 255
    1786:	2c 0f       	add	r18, r28
    1788:	3d 1f       	adc	r19, r29
    checksum += (uint8_t)(*(index++));  
    178a:	91 91       	ld	r25, Z+
    178c:	89 0f       	add	r24, r25
  //EtherComm::buffer[2] = len;
  
  uint8_t checksum = START_BYTE + cmd;
  uint8_t* index = &EtherComm::buffer[2]; //TODO why is char* being used? convert ot uint8_t*!!
  uint8_t bytes = len;
  while(bytes-- > 0){
    178e:	e2 17       	cp	r30, r18
    1790:	f3 07       	cpc	r31, r19
    1792:	d9 f7       	brne	.-10     	; 0x178a <_ZN9EtherComm11SendCommandEhh+0x42>
    1794:	4f 5f       	subi	r20, 0xFF	; 255
    1796:	5f 4f       	sbci	r21, 0xFF	; 255
    1798:	a4 0f       	add	r26, r20
    179a:	b5 1f       	adc	r27, r21
    checksum += (uint8_t)(*(index++));  
  }
  (*index) = (uint8_t)(checksum & CHECKSUM_MASK);
    179c:	8c 93       	st	X, r24

  //Serial.print("Send: ");
  //Serial.println(len);
  ether.sendUdp(EtherComm::buffer, (uint16_t)len + (uint16_t)3, _recvPort, _destIP, _destPort);
    179e:	00 91 ef 05 	lds	r16, 0x05EF	; 0x8005ef <_ZN9EtherComm9_destPortE>
    17a2:	10 91 f0 05 	lds	r17, 0x05F0	; 0x8005f0 <_ZN9EtherComm9_destPortE+0x1>
    17a6:	40 91 f1 05 	lds	r20, 0x05F1	; 0x8005f1 <_ZN9EtherComm9_recvPortE>
    17aa:	50 91 f2 05 	lds	r21, 0x05F2	; 0x8005f2 <_ZN9EtherComm9_recvPortE+0x1>
    17ae:	70 e0       	ldi	r23, 0x00	; 0
    17b0:	6d 5f       	subi	r22, 0xFD	; 253
    17b2:	7f 4f       	sbci	r23, 0xFF	; 255
    17b4:	22 e0       	ldi	r18, 0x02	; 2
    17b6:	32 e0       	ldi	r19, 0x02	; 2
    17b8:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    17bc:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    17c0:	52 dd       	rcall	.-1372   	; 0x1266 <_ZN9EtherCard7sendUdpEPKhjjS1_j>
}
    17c2:	df 91       	pop	r29
    17c4:	cf 91       	pop	r28
    17c6:	1f 91       	pop	r17
    17c8:	0f 91       	pop	r16
    17ca:	08 95       	ret

000017cc <main>:
#define MIN 550
#define MAX 2400

int main(void){
	//TestIMU();
	sei(); //Enable global interrupts
    17cc:	78 94       	sei
	public:
	inline HardwareSerial(
	volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
	volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
	volatile uint8_t *ucsrc, volatile uint8_t *udr);
	void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    17ce:	26 e0       	ldi	r18, 0x06	; 6
    17d0:	40 e8       	ldi	r20, 0x80	; 128
    17d2:	55 e2       	ldi	r21, 0x25	; 37
    17d4:	60 e0       	ldi	r22, 0x00	; 0
    17d6:	70 e0       	ldi	r23, 0x00	; 0
    17d8:	88 ef       	ldi	r24, 0xF8	; 248
    17da:	95 e0       	ldi	r25, 0x05	; 5
    17dc:	0e 94 d6 15 	call	0x2bac	; 0x2bac <_ZN14HardwareSerial5beginEmh>
	Serial.begin(9600);
	Serial.println("\nInitializing...");
    17e0:	6b e2       	ldi	r22, 0x2B	; 43
    17e2:	72 e0       	ldi	r23, 0x02	; 2
    17e4:	88 ef       	ldi	r24, 0xF8	; 248
    17e6:	95 e0       	ldi	r25, 0x05	; 5
    17e8:	0e 94 2d 22 	call	0x445a	; 0x445a <_ZN5Print7printlnEPKc>
	
	if(!rov.begin()){
    17ec:	0e 94 c0 1f 	call	0x3f80	; 0x3f80 <_ZN5Robot5beginEv>
    17f0:	81 11       	cpse	r24, r1
    17f2:	07 c0       	rjmp	.+14     	; 0x1802 <main+0x36>
		Serial.println("Failed to initialize robot.");
    17f4:	6c e3       	ldi	r22, 0x3C	; 60
    17f6:	72 e0       	ldi	r23, 0x02	; 2
    17f8:	88 ef       	ldi	r24, 0xF8	; 248
    17fa:	95 e0       	ldi	r25, 0x05	; 5
    17fc:	0e 94 2d 22 	call	0x445a	; 0x445a <_ZN5Print7printlnEPKc>
    1800:	ff cf       	rjmp	.-2      	; 0x1800 <main+0x34>
		while(1);
	}
	Serial.println("Robot initialized.");
    1802:	68 e5       	ldi	r22, 0x58	; 88
    1804:	72 e0       	ldi	r23, 0x02	; 2
    1806:	88 ef       	ldi	r24, 0xF8	; 248
    1808:	95 e0       	ldi	r25, 0x05	; 5
    180a:	0e 94 2d 22 	call	0x445a	; 0x445a <_ZN5Print7printlnEPKc>
		while(1);
	}*/ //TODO send error codes for intialization debugging
	
	//Serial.println("Initialized pressure sensor.");
	
	if(!EtherComm::begin((uint16_t)6001, (uint16_t)6002, DDR_ENC, PORT_ENC, MASK_ENC_CS)){
    180e:	01 e0       	ldi	r16, 0x01	; 1
    1810:	25 e2       	ldi	r18, 0x25	; 37
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	44 e2       	ldi	r20, 0x24	; 36
    1816:	50 e0       	ldi	r21, 0x00	; 0
    1818:	62 e7       	ldi	r22, 0x72	; 114
    181a:	77 e1       	ldi	r23, 0x17	; 23
    181c:	81 e7       	ldi	r24, 0x71	; 113
    181e:	97 e1       	ldi	r25, 0x17	; 23
    1820:	6a df       	rcall	.-300    	; 0x16f6 <_ZN9EtherComm5beginEjjRVhS1_h>
    1822:	81 11       	cpse	r24, r1
    1824:	07 c0       	rjmp	.+14     	; 0x1834 <main+0x68>
		Serial.println("Failed to access Ethernet controller.");
    1826:	6b e6       	ldi	r22, 0x6B	; 107
    1828:	72 e0       	ldi	r23, 0x02	; 2
    182a:	88 ef       	ldi	r24, 0xF8	; 248
    182c:	95 e0       	ldi	r25, 0x05	; 5
    182e:	0e 94 2d 22 	call	0x445a	; 0x445a <_ZN5Print7printlnEPKc>
    1832:	ff cf       	rjmp	.-2      	; 0x1832 <main+0x66>
		while(1);
	}
	Serial.println("Connected to controller.");
    1834:	61 e9       	ldi	r22, 0x91	; 145
    1836:	72 e0       	ldi	r23, 0x02	; 2
    1838:	88 ef       	ldi	r24, 0xF8	; 248
    183a:	95 e0       	ldi	r25, 0x05	; 5
    183c:	0e 94 2d 22 	call	0x445a	; 0x445a <_ZN5Print7printlnEPKc>
  static bool begin(uint16_t recvPort, uint16_t destPort, Register& csDDR, Register& csPort, uint8_t csPin);

  friend void udpReceive(uint16_t dest_port, uint8_t src_ip[IP_LEN], uint16_t src_port, const char *data, uint16_t len);

  static void Loop(){
    ether.packetLoop(ether.packetReceive());
    1840:	db da       	rcall	.-2634   	; 0xdf8 <_ZN8ENC28J6013packetReceiveEv>
    1842:	4a dd       	rcall	.-1388   	; 0x12d8 <_ZN9EtherCard10packetLoopEj>
	*/
    /* Replace with your application code */
	//TwiServo.begin();
    while (1) {
		EtherComm::Loop();
		rov.Loop();
    1844:	0e 94 31 20 	call	0x4062	; 0x4062 <_ZN5Robot4LoopEv>
    1848:	fb cf       	rjmp	.-10     	; 0x1840 <main+0x74>

0000184a <_GLOBAL__sub_I_dir>:
int8_t dir = 1;
uint8_t pos = 128;
#include "Utils/CpuFreq.h"
#include <util/delay.h>

TwiServoController TwiServo(0x40);
    184a:	60 e4       	ldi	r22, 0x40	; 64
    184c:	83 ef       	ldi	r24, 0xF3	; 243
    184e:	95 e0       	ldi	r25, 0x05	; 5
    1850:	0c 94 f2 14 	jmp	0x29e4	; 0x29e4 <_ZN18TwiServoControllerC1Eh>
    1854:	08 95       	ret

00001856 <_ZN6MS5837C1ER13HardwareTimer>:
const float MS5837::mbar = 1.0f;
*/
const uint8_t MS5837::MS5837_30BA = 0;
const uint8_t MS5837::MS5837_02BA = 1;

MS5837::MS5837(HardwareTimer &timer) : _timer(&timer) {
    1856:	fc 01       	movw	r30, r24
    1858:	73 a3       	std	Z+35, r23	; 0x23
    185a:	62 a3       	std	Z+34, r22	; 0x22
	fluidDensity = 1029;
    185c:	40 e0       	ldi	r20, 0x00	; 0
    185e:	50 ea       	ldi	r21, 0xA0	; 160
    1860:	60 e8       	ldi	r22, 0x80	; 128
    1862:	74 e4       	ldi	r23, 0x44	; 68
    1864:	44 a3       	std	Z+36, r20	; 0x24
    1866:	55 a3       	std	Z+37, r21	; 0x25
    1868:	66 a3       	std	Z+38, r22	; 0x26
    186a:	77 a3       	std	Z+39, r23	; 0x27
    186c:	08 95       	ret

0000186e <_ZN6MS58378setModelEh>:

	return false; // CRC fail
}

void MS5837::setModel(uint8_t model) {
	_model = model;
    186e:	fc 01       	movw	r30, r24
    1870:	60 a3       	std	Z+32, r22	; 0x20
    1872:	08 95       	ret

00001874 <_ZN6MS58379startReadEv>:
	D2 = (D2 << 8) | Wire.read();

	calculate();
}*/

bool MS5837::startRead(){
    1874:	cf 93       	push	r28
    1876:	df 93       	push	r29
	if(_state == STATE_FINISHED){
    1878:	fc 01       	movw	r30, r24
    187a:	21 a1       	ldd	r18, Z+33	; 0x21
    187c:	21 11       	cpse	r18, r1
    187e:	1f c0       	rjmp	.+62     	; 0x18be <_ZN6MS58379startReadEv+0x4a>
    1880:	ec 01       	movw	r28, r24
		_state = STATE_READ_D1; // Request D1 conversion
    1882:	81 e0       	ldi	r24, 0x01	; 1
    1884:	81 a3       	std	Z+33, r24	; 0x21
		
		Wire.beginTransmission(MS5837_ADDR);
    1886:	66 e7       	ldi	r22, 0x76	; 118
    1888:	70 e0       	ldi	r23, 0x00	; 0
    188a:	8e eb       	ldi	r24, 0xBE	; 190
    188c:	97 e0       	ldi	r25, 0x07	; 7
    188e:	0e 94 ee 1d 	call	0x3bdc	; 0x3bdc <_ZN7TwoWire17beginTransmissionEi>
	void onRequest( void (*)(void) );

	inline size_t write(unsigned long n) { return write((uint8_t)n); }
	inline size_t write(long n) { return write((uint8_t)n); }
	inline size_t write(unsigned int n) { return write((uint8_t)n); }
	inline size_t write(int n) { return write((uint8_t)n); }
    1892:	e0 91 be 07 	lds	r30, 0x07BE	; 0x8007be <Wire>
    1896:	f0 91 bf 07 	lds	r31, 0x07BF	; 0x8007bf <Wire+0x1>
    189a:	01 90       	ld	r0, Z+
    189c:	f0 81       	ld	r31, Z
    189e:	e0 2d       	mov	r30, r0
    18a0:	6a e4       	ldi	r22, 0x4A	; 74
    18a2:	8e eb       	ldi	r24, 0xBE	; 190
    18a4:	97 e0       	ldi	r25, 0x07	; 7
    18a6:	19 95       	eicall
		Wire.write(MS5837_CONVERT_D1_8192);
		Wire.endTransmission();
    18a8:	8e eb       	ldi	r24, 0xBE	; 190
    18aa:	97 e0       	ldi	r25, 0x07	; 7
    18ac:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <_ZN7TwoWire15endTransmissionEv>

		_timer->start(2); // Max conversion time, 20ms per datasheet
    18b0:	62 e0       	ldi	r22, 0x02	; 2
    18b2:	8a a1       	ldd	r24, Y+34	; 0x22
    18b4:	9b a1       	ldd	r25, Y+35	; 0x23
    18b6:	0e 94 47 1a 	call	0x348e	; 0x348e <_ZN13HardwareTimer5startEh>
		return true;
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	01 c0       	rjmp	.+2      	; 0x18c0 <_ZN6MS58379startReadEv+0x4c>
	}else{
		return false;
    18be:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    18c0:	df 91       	pop	r29
    18c2:	cf 91       	pop	r28
    18c4:	08 95       	ret

000018c6 <_ZN6MS58378finishedEv>:
		}
	}
}

bool MS5837::finished(){
	return _state == STATE_FINISHED;
    18c6:	21 e0       	ldi	r18, 0x01	; 1
    18c8:	fc 01       	movw	r30, r24
    18ca:	81 a1       	ldd	r24, Z+33	; 0x21
    18cc:	81 11       	cpse	r24, r1
    18ce:	20 e0       	ldi	r18, 0x00	; 0
}
    18d0:	82 2f       	mov	r24, r18
    18d2:	08 95       	ret

000018d4 <_ZN6MS58379calculateEv>:

void MS5837::calculate() {
    18d4:	2f 92       	push	r2
    18d6:	3f 92       	push	r3
    18d8:	4f 92       	push	r4
    18da:	5f 92       	push	r5
    18dc:	6f 92       	push	r6
    18de:	7f 92       	push	r7
    18e0:	8f 92       	push	r8
    18e2:	9f 92       	push	r9
    18e4:	af 92       	push	r10
    18e6:	bf 92       	push	r11
    18e8:	cf 92       	push	r12
    18ea:	df 92       	push	r13
    18ec:	ef 92       	push	r14
    18ee:	ff 92       	push	r15
    18f0:	0f 93       	push	r16
    18f2:	1f 93       	push	r17
    18f4:	cf 93       	push	r28
    18f6:	df 93       	push	r29
    18f8:	cd b7       	in	r28, 0x3d	; 61
    18fa:	de b7       	in	r29, 0x3e	; 62
    18fc:	a5 97       	sbiw	r28, 0x25	; 37
    18fe:	0f b6       	in	r0, 0x3f	; 63
    1900:	f8 94       	cli
    1902:	de bf       	out	0x3e, r29	; 62
    1904:	0f be       	out	0x3f, r0	; 63
    1906:	cd bf       	out	0x3d, r28	; 61
    1908:	1c 01       	movw	r2, r24
	int32_t Ti = 0;
	int64_t OFF2 = 0;
	int64_t SENS2 = 0;
	
	// Terms called
	dT = D2-uint32_t(C[5])*256l;
    190a:	dc 01       	movw	r26, r24
    190c:	1a 96       	adiw	r26, 0x0a	; 10
    190e:	8d 91       	ld	r24, X+
    1910:	9c 91       	ld	r25, X
    1912:	1b 97       	sbiw	r26, 0x0b	; 11
    1914:	a0 e0       	ldi	r26, 0x00	; 0
    1916:	b0 e0       	ldi	r27, 0x00	; 0
    1918:	ba 2f       	mov	r27, r26
    191a:	a9 2f       	mov	r26, r25
    191c:	98 2f       	mov	r25, r24
    191e:	88 27       	eor	r24, r24
    1920:	f1 01       	movw	r30, r2
    1922:	44 89       	ldd	r20, Z+20	; 0x14
    1924:	55 89       	ldd	r21, Z+21	; 0x15
    1926:	66 89       	ldd	r22, Z+22	; 0x16
    1928:	77 89       	ldd	r23, Z+23	; 0x17
    192a:	3a 01       	movw	r6, r20
    192c:	4b 01       	movw	r8, r22
    192e:	68 1a       	sub	r6, r24
    1930:	79 0a       	sbc	r7, r25
    1932:	8a 0a       	sbc	r8, r26
    1934:	9b 0a       	sbc	r9, r27
    1936:	69 82       	std	Y+1, r6	; 0x01
    1938:	7a 82       	std	Y+2, r7	; 0x02
    193a:	8b 82       	std	Y+3, r8	; 0x03
    193c:	9c 82       	std	Y+4, r9	; 0x04
	if ( _model == MS5837_02BA ) {
    193e:	80 a1       	ldd	r24, Z+32	; 0x20
    1940:	81 30       	cpi	r24, 0x01	; 1
    1942:	09 f0       	breq	.+2      	; 0x1946 <_ZN6MS58379calculateEv+0x72>
    1944:	58 c1       	rjmp	.+688    	; 0x1bf6 <_ZN6MS58379calculateEv+0x322>
		SENS = int64_t(C[1])*65536l+(int64_t(C[3])*dT)/128l;
    1946:	99 0c       	add	r9, r9
    1948:	66 08       	sbc	r6, r6
    194a:	76 2c       	mov	r7, r6
    194c:	43 01       	movw	r8, r6
    194e:	6d 82       	std	Y+5, r6	; 0x05
    1950:	7e 82       	std	Y+6, r7	; 0x06
    1952:	8f 82       	std	Y+7, r8	; 0x07
    1954:	98 86       	std	Y+8, r9	; 0x08
    1956:	86 81       	ldd	r24, Z+6	; 0x06
    1958:	97 81       	ldd	r25, Z+7	; 0x07
    195a:	3c 01       	movw	r6, r24
    195c:	81 2c       	mov	r8, r1
    195e:	91 2c       	mov	r9, r1
    1960:	a1 2c       	mov	r10, r1
    1962:	b1 2c       	mov	r11, r1
    1964:	65 01       	movw	r12, r10
    1966:	8d 8f       	std	Y+29, r24	; 0x1d
    1968:	7e 8e       	std	Y+30, r7	; 0x1e
    196a:	8f 8e       	std	Y+31, r8	; 0x1f
    196c:	98 a2       	std	Y+32, r9	; 0x20
    196e:	a9 a2       	std	Y+33, r10	; 0x21
    1970:	ba a2       	std	Y+34, r11	; 0x22
    1972:	cb a2       	std	Y+35, r12	; 0x23
    1974:	dc a2       	std	Y+36, r13	; 0x24
    1976:	a9 80       	ldd	r10, Y+1	; 0x01
    1978:	ba 80       	ldd	r11, Y+2	; 0x02
    197a:	cb 80       	ldd	r12, Y+3	; 0x03
    197c:	dc 80       	ldd	r13, Y+4	; 0x04
    197e:	ed 80       	ldd	r14, Y+5	; 0x05
    1980:	fe 2c       	mov	r15, r14
    1982:	0e 2d       	mov	r16, r14
    1984:	1e 2d       	mov	r17, r14
    1986:	28 2f       	mov	r18, r24
    1988:	37 2d       	mov	r19, r7
    198a:	40 e0       	ldi	r20, 0x00	; 0
    198c:	50 e0       	ldi	r21, 0x00	; 0
    198e:	60 e0       	ldi	r22, 0x00	; 0
    1990:	70 e0       	ldi	r23, 0x00	; 0
    1992:	80 e0       	ldi	r24, 0x00	; 0
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	0e 94 a5 24 	call	0x494a	; 0x494a <__muldi3>
    199a:	12 2f       	mov	r17, r18
    199c:	3e 87       	std	Y+14, r19	; 0x0e
    199e:	4d 87       	std	Y+13, r20	; 0x0d
    19a0:	b5 2f       	mov	r27, r21
    19a2:	f6 2f       	mov	r31, r22
    19a4:	e7 2f       	mov	r30, r23
    19a6:	78 2e       	mov	r7, r24
    19a8:	89 2e       	mov	r8, r25
    19aa:	a0 e0       	ldi	r26, 0x00	; 0
    19ac:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <__cmpdi2_s8>
    19b0:	5c f4       	brge	.+22     	; 0x19c8 <_ZN6MS58379calculateEv+0xf4>
    19b2:	af e7       	ldi	r26, 0x7F	; 127
    19b4:	0e 94 36 25 	call	0x4a6c	; 0x4a6c <__adddi3_s8>
    19b8:	12 2f       	mov	r17, r18
    19ba:	3e 87       	std	Y+14, r19	; 0x0e
    19bc:	4d 87       	std	Y+13, r20	; 0x0d
    19be:	b5 2f       	mov	r27, r21
    19c0:	f6 2f       	mov	r31, r22
    19c2:	e7 2f       	mov	r30, r23
    19c4:	78 2e       	mov	r7, r24
    19c6:	89 2e       	mov	r8, r25
    19c8:	21 2f       	mov	r18, r17
    19ca:	3e 85       	ldd	r19, Y+14	; 0x0e
    19cc:	4d 85       	ldd	r20, Y+13	; 0x0d
    19ce:	5b 2f       	mov	r21, r27
    19d0:	6f 2f       	mov	r22, r31
    19d2:	7e 2f       	mov	r23, r30
    19d4:	87 2d       	mov	r24, r7
    19d6:	98 2d       	mov	r25, r8
    19d8:	07 e0       	ldi	r16, 0x07	; 7
    19da:	0e 94 0f 25 	call	0x4a1e	; 0x4a1e <__ashrdi3>
    19de:	82 2e       	mov	r8, r18
    19e0:	93 2e       	mov	r9, r19
    19e2:	74 2e       	mov	r7, r20
    19e4:	65 2e       	mov	r6, r21
    19e6:	b6 2f       	mov	r27, r22
    19e8:	a7 2f       	mov	r26, r23
    19ea:	58 2e       	mov	r5, r24
    19ec:	49 2e       	mov	r4, r25
    19ee:	f1 01       	movw	r30, r2
    19f0:	a2 80       	ldd	r10, Z+2	; 0x02
    19f2:	b3 80       	ldd	r11, Z+3	; 0x03
    19f4:	2a 2d       	mov	r18, r10
    19f6:	3b 2d       	mov	r19, r11
    19f8:	40 e0       	ldi	r20, 0x00	; 0
    19fa:	50 e0       	ldi	r21, 0x00	; 0
    19fc:	60 e0       	ldi	r22, 0x00	; 0
    19fe:	70 e0       	ldi	r23, 0x00	; 0
    1a00:	80 e0       	ldi	r24, 0x00	; 0
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	00 e1       	ldi	r16, 0x10	; 16
    1a06:	0e 94 f6 24 	call	0x49ec	; 0x49ec <__ashldi3>
    1a0a:	a2 2e       	mov	r10, r18
    1a0c:	b3 2e       	mov	r11, r19
    1a0e:	c4 2e       	mov	r12, r20
    1a10:	d5 2e       	mov	r13, r21
    1a12:	e6 2e       	mov	r14, r22
    1a14:	f7 2e       	mov	r15, r23
    1a16:	08 2f       	mov	r16, r24
    1a18:	19 2f       	mov	r17, r25
    1a1a:	28 2d       	mov	r18, r8
    1a1c:	39 2d       	mov	r19, r9
    1a1e:	47 2d       	mov	r20, r7
    1a20:	56 2d       	mov	r21, r6
    1a22:	6b 2f       	mov	r22, r27
    1a24:	7a 2f       	mov	r23, r26
    1a26:	85 2d       	mov	r24, r5
    1a28:	94 2d       	mov	r25, r4
    1a2a:	0e 94 2d 25 	call	0x4a5a	; 0x4a5a <__adddi3>
    1a2e:	2d 87       	std	Y+13, r18	; 0x0d
    1a30:	3e 87       	std	Y+14, r19	; 0x0e
    1a32:	4f 87       	std	Y+15, r20	; 0x0f
    1a34:	58 8b       	std	Y+16, r21	; 0x10
    1a36:	69 8b       	std	Y+17, r22	; 0x11
    1a38:	7a 8b       	std	Y+18, r23	; 0x12
    1a3a:	8b 8b       	std	Y+19, r24	; 0x13
    1a3c:	9c 8b       	std	Y+20, r25	; 0x14
		OFF = int64_t(C[2])*131072l+(int64_t(C[4])*dT)/64l;
    1a3e:	80 85       	ldd	r24, Z+8	; 0x08
    1a40:	91 85       	ldd	r25, Z+9	; 0x09
    1a42:	3c 01       	movw	r6, r24
    1a44:	81 2c       	mov	r8, r1
    1a46:	91 2c       	mov	r9, r1
    1a48:	a1 2c       	mov	r10, r1
    1a4a:	b1 2c       	mov	r11, r1
    1a4c:	65 01       	movw	r12, r10
    1a4e:	8d 8f       	std	Y+29, r24	; 0x1d
    1a50:	7e 8e       	std	Y+30, r7	; 0x1e
    1a52:	8f 8e       	std	Y+31, r8	; 0x1f
    1a54:	98 a2       	std	Y+32, r9	; 0x20
    1a56:	a9 a2       	std	Y+33, r10	; 0x21
    1a58:	ba a2       	std	Y+34, r11	; 0x22
    1a5a:	cb a2       	std	Y+35, r12	; 0x23
    1a5c:	dc a2       	std	Y+36, r13	; 0x24
    1a5e:	a9 80       	ldd	r10, Y+1	; 0x01
    1a60:	ba 80       	ldd	r11, Y+2	; 0x02
    1a62:	cb 80       	ldd	r12, Y+3	; 0x03
    1a64:	dc 80       	ldd	r13, Y+4	; 0x04
    1a66:	ed 80       	ldd	r14, Y+5	; 0x05
    1a68:	fe 2c       	mov	r15, r14
    1a6a:	0e 2d       	mov	r16, r14
    1a6c:	1e 2d       	mov	r17, r14
    1a6e:	28 2f       	mov	r18, r24
    1a70:	37 2d       	mov	r19, r7
    1a72:	40 e0       	ldi	r20, 0x00	; 0
    1a74:	50 e0       	ldi	r21, 0x00	; 0
    1a76:	60 e0       	ldi	r22, 0x00	; 0
    1a78:	70 e0       	ldi	r23, 0x00	; 0
    1a7a:	80 e0       	ldi	r24, 0x00	; 0
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	0e 94 a5 24 	call	0x494a	; 0x494a <__muldi3>
    1a82:	12 2f       	mov	r17, r18
    1a84:	3e 8b       	std	Y+22, r19	; 0x16
    1a86:	4d 8b       	std	Y+21, r20	; 0x15
    1a88:	b5 2f       	mov	r27, r21
    1a8a:	f6 2f       	mov	r31, r22
    1a8c:	e7 2f       	mov	r30, r23
    1a8e:	78 2e       	mov	r7, r24
    1a90:	89 2e       	mov	r8, r25
    1a92:	a0 e0       	ldi	r26, 0x00	; 0
    1a94:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <__cmpdi2_s8>
    1a98:	5c f4       	brge	.+22     	; 0x1ab0 <_ZN6MS58379calculateEv+0x1dc>
    1a9a:	af e3       	ldi	r26, 0x3F	; 63
    1a9c:	0e 94 36 25 	call	0x4a6c	; 0x4a6c <__adddi3_s8>
    1aa0:	12 2f       	mov	r17, r18
    1aa2:	3e 8b       	std	Y+22, r19	; 0x16
    1aa4:	4d 8b       	std	Y+21, r20	; 0x15
    1aa6:	b5 2f       	mov	r27, r21
    1aa8:	f6 2f       	mov	r31, r22
    1aaa:	e7 2f       	mov	r30, r23
    1aac:	78 2e       	mov	r7, r24
    1aae:	89 2e       	mov	r8, r25
    1ab0:	21 2f       	mov	r18, r17
    1ab2:	3e 89       	ldd	r19, Y+22	; 0x16
    1ab4:	4d 89       	ldd	r20, Y+21	; 0x15
    1ab6:	5b 2f       	mov	r21, r27
    1ab8:	6f 2f       	mov	r22, r31
    1aba:	7e 2f       	mov	r23, r30
    1abc:	87 2d       	mov	r24, r7
    1abe:	98 2d       	mov	r25, r8
    1ac0:	06 e0       	ldi	r16, 0x06	; 6
    1ac2:	0e 94 0f 25 	call	0x4a1e	; 0x4a1e <__ashrdi3>
    1ac6:	82 2e       	mov	r8, r18
    1ac8:	93 2e       	mov	r9, r19
    1aca:	74 2e       	mov	r7, r20
    1acc:	65 2e       	mov	r6, r21
    1ace:	b6 2f       	mov	r27, r22
    1ad0:	a7 2f       	mov	r26, r23
    1ad2:	58 2e       	mov	r5, r24
    1ad4:	49 2e       	mov	r4, r25
    1ad6:	f1 01       	movw	r30, r2
    1ad8:	24 81       	ldd	r18, Z+4	; 0x04
    1ada:	35 81       	ldd	r19, Z+5	; 0x05
    1adc:	59 01       	movw	r10, r18
    1ade:	3b 2d       	mov	r19, r11
    1ae0:	40 e0       	ldi	r20, 0x00	; 0
    1ae2:	50 e0       	ldi	r21, 0x00	; 0
    1ae4:	60 e0       	ldi	r22, 0x00	; 0
    1ae6:	70 e0       	ldi	r23, 0x00	; 0
    1ae8:	80 e0       	ldi	r24, 0x00	; 0
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	01 e1       	ldi	r16, 0x11	; 17
    1aee:	0e 94 f6 24 	call	0x49ec	; 0x49ec <__ashldi3>
    1af2:	a2 2e       	mov	r10, r18
    1af4:	b3 2e       	mov	r11, r19
    1af6:	c4 2e       	mov	r12, r20
    1af8:	d5 2e       	mov	r13, r21
    1afa:	e6 2e       	mov	r14, r22
    1afc:	f7 2e       	mov	r15, r23
    1afe:	08 2f       	mov	r16, r24
    1b00:	19 2f       	mov	r17, r25
    1b02:	28 2d       	mov	r18, r8
    1b04:	39 2d       	mov	r19, r9
    1b06:	47 2d       	mov	r20, r7
    1b08:	56 2d       	mov	r21, r6
    1b0a:	6b 2f       	mov	r22, r27
    1b0c:	7a 2f       	mov	r23, r26
    1b0e:	85 2d       	mov	r24, r5
    1b10:	94 2d       	mov	r25, r4
    1b12:	0e 94 2d 25 	call	0x4a5a	; 0x4a5a <__adddi3>
    1b16:	2d 8b       	std	Y+21, r18	; 0x15
    1b18:	3e 8b       	std	Y+22, r19	; 0x16
    1b1a:	4f 8b       	std	Y+23, r20	; 0x17
    1b1c:	58 8f       	std	Y+24, r21	; 0x18
    1b1e:	69 8f       	std	Y+25, r22	; 0x19
    1b20:	7a 8f       	std	Y+26, r23	; 0x1a
    1b22:	8b 8f       	std	Y+27, r24	; 0x1b
    1b24:	9c 8f       	std	Y+28, r25	; 0x1c
		OFF = int64_t(C[2])*65536l+(int64_t(C[4])*dT)/128l;
		P = (D1*SENS/(2097152l)-OFF)/(8192l);
	}
	
	// Temp conversion
	TEMP = 2000l+int64_t(dT)*C[6]/8388608LL;
    1b26:	84 85       	ldd	r24, Z+12	; 0x0c
    1b28:	95 85       	ldd	r25, Z+13	; 0x0d
    1b2a:	3c 01       	movw	r6, r24
    1b2c:	81 2c       	mov	r8, r1
    1b2e:	91 2c       	mov	r9, r1
    1b30:	a1 2c       	mov	r10, r1
    1b32:	b1 2c       	mov	r11, r1
    1b34:	65 01       	movw	r12, r10
    1b36:	8d 8f       	std	Y+29, r24	; 0x1d
    1b38:	7e 8e       	std	Y+30, r7	; 0x1e
    1b3a:	8f 8e       	std	Y+31, r8	; 0x1f
    1b3c:	98 a2       	std	Y+32, r9	; 0x20
    1b3e:	a9 a2       	std	Y+33, r10	; 0x21
    1b40:	ba a2       	std	Y+34, r11	; 0x22
    1b42:	cb a2       	std	Y+35, r12	; 0x23
    1b44:	dc a2       	std	Y+36, r13	; 0x24
    1b46:	a9 80       	ldd	r10, Y+1	; 0x01
    1b48:	ba 80       	ldd	r11, Y+2	; 0x02
    1b4a:	cb 80       	ldd	r12, Y+3	; 0x03
    1b4c:	dc 80       	ldd	r13, Y+4	; 0x04
    1b4e:	ed 80       	ldd	r14, Y+5	; 0x05
    1b50:	fe 2c       	mov	r15, r14
    1b52:	0e 2d       	mov	r16, r14
    1b54:	1e 2d       	mov	r17, r14
    1b56:	28 2f       	mov	r18, r24
    1b58:	37 2d       	mov	r19, r7
    1b5a:	40 e0       	ldi	r20, 0x00	; 0
    1b5c:	50 e0       	ldi	r21, 0x00	; 0
    1b5e:	60 e0       	ldi	r22, 0x00	; 0
    1b60:	70 e0       	ldi	r23, 0x00	; 0
    1b62:	80 e0       	ldi	r24, 0x00	; 0
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	0e 94 a5 24 	call	0x494a	; 0x494a <__muldi3>
    1b6a:	12 2f       	mov	r17, r18
    1b6c:	3d a3       	std	Y+37, r19	; 0x25
    1b6e:	4d 8f       	std	Y+29, r20	; 0x1d
    1b70:	b5 2f       	mov	r27, r21
    1b72:	f6 2f       	mov	r31, r22
    1b74:	e7 2f       	mov	r30, r23
    1b76:	78 2e       	mov	r7, r24
    1b78:	89 2e       	mov	r8, r25
    1b7a:	a0 e0       	ldi	r26, 0x00	; 0
    1b7c:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <__cmpdi2_s8>
    1b80:	84 f4       	brge	.+32     	; 0x1ba2 <_ZN6MS58379calculateEv+0x2ce>
    1b82:	21 50       	subi	r18, 0x01	; 1
    1b84:	31 09       	sbc	r19, r1
    1b86:	40 48       	sbci	r20, 0x80	; 128
    1b88:	5f 4f       	sbci	r21, 0xFF	; 255
    1b8a:	6f 4f       	sbci	r22, 0xFF	; 255
    1b8c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b8e:	8f 4f       	sbci	r24, 0xFF	; 255
    1b90:	9f 4f       	sbci	r25, 0xFF	; 255
    1b92:	12 2f       	mov	r17, r18
    1b94:	3d a3       	std	Y+37, r19	; 0x25
    1b96:	4d 8f       	std	Y+29, r20	; 0x1d
    1b98:	b5 2f       	mov	r27, r21
    1b9a:	f6 2f       	mov	r31, r22
    1b9c:	e7 2f       	mov	r30, r23
    1b9e:	78 2e       	mov	r7, r24
    1ba0:	89 2e       	mov	r8, r25
    1ba2:	21 2f       	mov	r18, r17
    1ba4:	3d a1       	ldd	r19, Y+37	; 0x25
    1ba6:	4d 8d       	ldd	r20, Y+29	; 0x1d
    1ba8:	5b 2f       	mov	r21, r27
    1baa:	6f 2f       	mov	r22, r31
    1bac:	7e 2f       	mov	r23, r30
    1bae:	87 2d       	mov	r24, r7
    1bb0:	98 2d       	mov	r25, r8
    1bb2:	07 e1       	ldi	r16, 0x17	; 23
    1bb4:	0e 94 0f 25 	call	0x4a1e	; 0x4a1e <__ashrdi3>
    1bb8:	82 2e       	mov	r8, r18
    1bba:	93 2e       	mov	r9, r19
    1bbc:	a4 2e       	mov	r10, r20
    1bbe:	b5 2e       	mov	r11, r21
    1bc0:	24 01       	movw	r4, r8
    1bc2:	35 01       	movw	r6, r10
    1bc4:	00 ed       	ldi	r16, 0xD0	; 208
    1bc6:	40 0e       	add	r4, r16
    1bc8:	07 e0       	ldi	r16, 0x07	; 7
    1bca:	50 1e       	adc	r5, r16
    1bcc:	61 1c       	adc	r6, r1
    1bce:	71 1c       	adc	r7, r1
	
	//Second order compensation
	if ( _model == MS5837_02BA ) {
		if((TEMP/100)<20){         //Low temp
    1bd0:	10 ed       	ldi	r17, 0xD0	; 208
    1bd2:	41 16       	cp	r4, r17
    1bd4:	17 e0       	ldi	r17, 0x07	; 7
    1bd6:	51 06       	cpc	r5, r17
    1bd8:	61 04       	cpc	r6, r1
    1bda:	71 04       	cpc	r7, r1
    1bdc:	0c f4       	brge	.+2      	; 0x1be0 <_ZN6MS58379calculateEv+0x30c>
    1bde:	62 c1       	rjmp	.+708    	; 0x1ea4 <_ZN6MS58379calculateEv+0x5d0>
	int32_t dT = 0;
	int64_t SENS = 0;
	int64_t OFF = 0;
	int32_t SENSi = 0;
	int32_t OFFi = 0;
	int32_t Ti = 0;
    1be0:	81 2c       	mov	r8, r1
    1be2:	91 2c       	mov	r9, r1
    1be4:	54 01       	movw	r10, r8
	
	int32_t dT = 0;
	int64_t SENS = 0;
	int64_t OFF = 0;
	int32_t SENSi = 0;
	int32_t OFFi = 0;
    1be6:	19 82       	std	Y+1, r1	; 0x01
    1be8:	1a 82       	std	Y+2, r1	; 0x02
    1bea:	1b 82       	std	Y+3, r1	; 0x03
    1bec:	1c 82       	std	Y+4, r1	; 0x04
	// Do conversion first and then second order temp compensation
	
	int32_t dT = 0;
	int64_t SENS = 0;
	int64_t OFF = 0;
	int32_t SENSi = 0;
    1bee:	e1 2c       	mov	r14, r1
    1bf0:	f1 2c       	mov	r15, r1
    1bf2:	87 01       	movw	r16, r14
    1bf4:	4c c3       	rjmp	.+1688   	; 0x228e <__stack+0x8f>
	if ( _model == MS5837_02BA ) {
		SENS = int64_t(C[1])*65536l+(int64_t(C[3])*dT)/128l;
		OFF = int64_t(C[2])*131072l+(int64_t(C[4])*dT)/64l;
		P = (D1*SENS/(2097152l)-OFF)/(32768l);
	} else {
		SENS = int64_t(C[1])*32768l+(int64_t(C[3])*dT)/256l;
    1bf6:	69 80       	ldd	r6, Y+1	; 0x01
    1bf8:	7a 80       	ldd	r7, Y+2	; 0x02
    1bfa:	8b 80       	ldd	r8, Y+3	; 0x03
    1bfc:	9c 80       	ldd	r9, Y+4	; 0x04
    1bfe:	99 0c       	add	r9, r9
    1c00:	66 08       	sbc	r6, r6
    1c02:	76 2c       	mov	r7, r6
    1c04:	43 01       	movw	r8, r6
    1c06:	6d 82       	std	Y+5, r6	; 0x05
    1c08:	7e 82       	std	Y+6, r7	; 0x06
    1c0a:	8f 82       	std	Y+7, r8	; 0x07
    1c0c:	98 86       	std	Y+8, r9	; 0x08
    1c0e:	86 81       	ldd	r24, Z+6	; 0x06
    1c10:	97 81       	ldd	r25, Z+7	; 0x07
    1c12:	3c 01       	movw	r6, r24
    1c14:	81 2c       	mov	r8, r1
    1c16:	91 2c       	mov	r9, r1
    1c18:	a1 2c       	mov	r10, r1
    1c1a:	b1 2c       	mov	r11, r1
    1c1c:	65 01       	movw	r12, r10
    1c1e:	8d 8f       	std	Y+29, r24	; 0x1d
    1c20:	7e 8e       	std	Y+30, r7	; 0x1e
    1c22:	8f 8e       	std	Y+31, r8	; 0x1f
    1c24:	98 a2       	std	Y+32, r9	; 0x20
    1c26:	a9 a2       	std	Y+33, r10	; 0x21
    1c28:	ba a2       	std	Y+34, r11	; 0x22
    1c2a:	cb a2       	std	Y+35, r12	; 0x23
    1c2c:	dc a2       	std	Y+36, r13	; 0x24
    1c2e:	a9 80       	ldd	r10, Y+1	; 0x01
    1c30:	ba 80       	ldd	r11, Y+2	; 0x02
    1c32:	cb 80       	ldd	r12, Y+3	; 0x03
    1c34:	dc 80       	ldd	r13, Y+4	; 0x04
    1c36:	ed 80       	ldd	r14, Y+5	; 0x05
    1c38:	fe 2c       	mov	r15, r14
    1c3a:	0e 2d       	mov	r16, r14
    1c3c:	1e 2d       	mov	r17, r14
    1c3e:	28 2f       	mov	r18, r24
    1c40:	37 2d       	mov	r19, r7
    1c42:	40 e0       	ldi	r20, 0x00	; 0
    1c44:	50 e0       	ldi	r21, 0x00	; 0
    1c46:	60 e0       	ldi	r22, 0x00	; 0
    1c48:	70 e0       	ldi	r23, 0x00	; 0
    1c4a:	80 e0       	ldi	r24, 0x00	; 0
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	0e 94 a5 24 	call	0x494a	; 0x494a <__muldi3>
    1c52:	12 2f       	mov	r17, r18
    1c54:	3e 87       	std	Y+14, r19	; 0x0e
    1c56:	4d 87       	std	Y+13, r20	; 0x0d
    1c58:	b5 2f       	mov	r27, r21
    1c5a:	f6 2f       	mov	r31, r22
    1c5c:	e7 2f       	mov	r30, r23
    1c5e:	78 2e       	mov	r7, r24
    1c60:	89 2e       	mov	r8, r25
    1c62:	a0 e0       	ldi	r26, 0x00	; 0
    1c64:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <__cmpdi2_s8>
    1c68:	84 f4       	brge	.+32     	; 0x1c8a <_ZN6MS58379calculateEv+0x3b6>
    1c6a:	21 50       	subi	r18, 0x01	; 1
    1c6c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c6e:	4f 4f       	sbci	r20, 0xFF	; 255
    1c70:	5f 4f       	sbci	r21, 0xFF	; 255
    1c72:	6f 4f       	sbci	r22, 0xFF	; 255
    1c74:	7f 4f       	sbci	r23, 0xFF	; 255
    1c76:	8f 4f       	sbci	r24, 0xFF	; 255
    1c78:	9f 4f       	sbci	r25, 0xFF	; 255
    1c7a:	12 2f       	mov	r17, r18
    1c7c:	3e 87       	std	Y+14, r19	; 0x0e
    1c7e:	4d 87       	std	Y+13, r20	; 0x0d
    1c80:	b5 2f       	mov	r27, r21
    1c82:	f6 2f       	mov	r31, r22
    1c84:	e7 2f       	mov	r30, r23
    1c86:	78 2e       	mov	r7, r24
    1c88:	89 2e       	mov	r8, r25
    1c8a:	21 2f       	mov	r18, r17
    1c8c:	3e 85       	ldd	r19, Y+14	; 0x0e
    1c8e:	4d 85       	ldd	r20, Y+13	; 0x0d
    1c90:	5b 2f       	mov	r21, r27
    1c92:	6f 2f       	mov	r22, r31
    1c94:	7e 2f       	mov	r23, r30
    1c96:	87 2d       	mov	r24, r7
    1c98:	98 2d       	mov	r25, r8
    1c9a:	08 e0       	ldi	r16, 0x08	; 8
    1c9c:	0e 94 0f 25 	call	0x4a1e	; 0x4a1e <__ashrdi3>
    1ca0:	82 2e       	mov	r8, r18
    1ca2:	93 2e       	mov	r9, r19
    1ca4:	74 2e       	mov	r7, r20
    1ca6:	65 2e       	mov	r6, r21
    1ca8:	b6 2f       	mov	r27, r22
    1caa:	a7 2f       	mov	r26, r23
    1cac:	58 2e       	mov	r5, r24
    1cae:	49 2e       	mov	r4, r25
    1cb0:	f1 01       	movw	r30, r2
    1cb2:	a2 80       	ldd	r10, Z+2	; 0x02
    1cb4:	b3 80       	ldd	r11, Z+3	; 0x03
    1cb6:	2a 2d       	mov	r18, r10
    1cb8:	3b 2d       	mov	r19, r11
    1cba:	40 e0       	ldi	r20, 0x00	; 0
    1cbc:	50 e0       	ldi	r21, 0x00	; 0
    1cbe:	60 e0       	ldi	r22, 0x00	; 0
    1cc0:	70 e0       	ldi	r23, 0x00	; 0
    1cc2:	80 e0       	ldi	r24, 0x00	; 0
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	0f e0       	ldi	r16, 0x0F	; 15
    1cc8:	0e 94 f6 24 	call	0x49ec	; 0x49ec <__ashldi3>
    1ccc:	a2 2e       	mov	r10, r18
    1cce:	b3 2e       	mov	r11, r19
    1cd0:	c4 2e       	mov	r12, r20
    1cd2:	d5 2e       	mov	r13, r21
    1cd4:	e6 2e       	mov	r14, r22
    1cd6:	f7 2e       	mov	r15, r23
    1cd8:	08 2f       	mov	r16, r24
    1cda:	19 2f       	mov	r17, r25
    1cdc:	28 2d       	mov	r18, r8
    1cde:	39 2d       	mov	r19, r9
    1ce0:	47 2d       	mov	r20, r7
    1ce2:	56 2d       	mov	r21, r6
    1ce4:	6b 2f       	mov	r22, r27
    1ce6:	7a 2f       	mov	r23, r26
    1ce8:	85 2d       	mov	r24, r5
    1cea:	94 2d       	mov	r25, r4
    1cec:	0e 94 2d 25 	call	0x4a5a	; 0x4a5a <__adddi3>
    1cf0:	2d 8b       	std	Y+21, r18	; 0x15
    1cf2:	3e 8b       	std	Y+22, r19	; 0x16
    1cf4:	4f 8b       	std	Y+23, r20	; 0x17
    1cf6:	58 8f       	std	Y+24, r21	; 0x18
    1cf8:	69 8f       	std	Y+25, r22	; 0x19
    1cfa:	7a 8f       	std	Y+26, r23	; 0x1a
    1cfc:	8b 8f       	std	Y+27, r24	; 0x1b
    1cfe:	9c 8f       	std	Y+28, r25	; 0x1c
		OFF = int64_t(C[2])*65536l+(int64_t(C[4])*dT)/128l;
    1d00:	80 85       	ldd	r24, Z+8	; 0x08
    1d02:	91 85       	ldd	r25, Z+9	; 0x09
    1d04:	3c 01       	movw	r6, r24
    1d06:	81 2c       	mov	r8, r1
    1d08:	91 2c       	mov	r9, r1
    1d0a:	a1 2c       	mov	r10, r1
    1d0c:	b1 2c       	mov	r11, r1
    1d0e:	65 01       	movw	r12, r10
    1d10:	8d 8f       	std	Y+29, r24	; 0x1d
    1d12:	7e 8e       	std	Y+30, r7	; 0x1e
    1d14:	8f 8e       	std	Y+31, r8	; 0x1f
    1d16:	98 a2       	std	Y+32, r9	; 0x20
    1d18:	a9 a2       	std	Y+33, r10	; 0x21
    1d1a:	ba a2       	std	Y+34, r11	; 0x22
    1d1c:	cb a2       	std	Y+35, r12	; 0x23
    1d1e:	dc a2       	std	Y+36, r13	; 0x24
    1d20:	a9 80       	ldd	r10, Y+1	; 0x01
    1d22:	ba 80       	ldd	r11, Y+2	; 0x02
    1d24:	cb 80       	ldd	r12, Y+3	; 0x03
    1d26:	dc 80       	ldd	r13, Y+4	; 0x04
    1d28:	ed 80       	ldd	r14, Y+5	; 0x05
    1d2a:	fe 2c       	mov	r15, r14
    1d2c:	0e 2d       	mov	r16, r14
    1d2e:	1e 2d       	mov	r17, r14
    1d30:	28 2f       	mov	r18, r24
    1d32:	37 2d       	mov	r19, r7
    1d34:	40 e0       	ldi	r20, 0x00	; 0
    1d36:	50 e0       	ldi	r21, 0x00	; 0
    1d38:	60 e0       	ldi	r22, 0x00	; 0
    1d3a:	70 e0       	ldi	r23, 0x00	; 0
    1d3c:	80 e0       	ldi	r24, 0x00	; 0
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	0e 94 a5 24 	call	0x494a	; 0x494a <__muldi3>
    1d44:	12 2f       	mov	r17, r18
    1d46:	3e 87       	std	Y+14, r19	; 0x0e
    1d48:	4d 87       	std	Y+13, r20	; 0x0d
    1d4a:	b5 2f       	mov	r27, r21
    1d4c:	f6 2f       	mov	r31, r22
    1d4e:	e7 2f       	mov	r30, r23
    1d50:	78 2e       	mov	r7, r24
    1d52:	89 2e       	mov	r8, r25
    1d54:	a0 e0       	ldi	r26, 0x00	; 0
    1d56:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <__cmpdi2_s8>
    1d5a:	5c f4       	brge	.+22     	; 0x1d72 <_ZN6MS58379calculateEv+0x49e>
    1d5c:	af e7       	ldi	r26, 0x7F	; 127
    1d5e:	0e 94 36 25 	call	0x4a6c	; 0x4a6c <__adddi3_s8>
    1d62:	12 2f       	mov	r17, r18
    1d64:	3e 87       	std	Y+14, r19	; 0x0e
    1d66:	4d 87       	std	Y+13, r20	; 0x0d
    1d68:	b5 2f       	mov	r27, r21
    1d6a:	f6 2f       	mov	r31, r22
    1d6c:	e7 2f       	mov	r30, r23
    1d6e:	78 2e       	mov	r7, r24
    1d70:	89 2e       	mov	r8, r25
    1d72:	21 2f       	mov	r18, r17
    1d74:	3e 85       	ldd	r19, Y+14	; 0x0e
    1d76:	4d 85       	ldd	r20, Y+13	; 0x0d
    1d78:	5b 2f       	mov	r21, r27
    1d7a:	6f 2f       	mov	r22, r31
    1d7c:	7e 2f       	mov	r23, r30
    1d7e:	87 2d       	mov	r24, r7
    1d80:	98 2d       	mov	r25, r8
    1d82:	07 e0       	ldi	r16, 0x07	; 7
    1d84:	0e 94 0f 25 	call	0x4a1e	; 0x4a1e <__ashrdi3>
    1d88:	82 2e       	mov	r8, r18
    1d8a:	93 2e       	mov	r9, r19
    1d8c:	74 2e       	mov	r7, r20
    1d8e:	65 2e       	mov	r6, r21
    1d90:	b6 2f       	mov	r27, r22
    1d92:	a7 2f       	mov	r26, r23
    1d94:	58 2e       	mov	r5, r24
    1d96:	49 2e       	mov	r4, r25
    1d98:	f1 01       	movw	r30, r2
    1d9a:	24 81       	ldd	r18, Z+4	; 0x04
    1d9c:	35 81       	ldd	r19, Z+5	; 0x05
    1d9e:	59 01       	movw	r10, r18
    1da0:	3b 2d       	mov	r19, r11
    1da2:	40 e0       	ldi	r20, 0x00	; 0
    1da4:	50 e0       	ldi	r21, 0x00	; 0
    1da6:	60 e0       	ldi	r22, 0x00	; 0
    1da8:	70 e0       	ldi	r23, 0x00	; 0
    1daa:	80 e0       	ldi	r24, 0x00	; 0
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	00 e1       	ldi	r16, 0x10	; 16
    1db0:	0e 94 f6 24 	call	0x49ec	; 0x49ec <__ashldi3>
    1db4:	a2 2e       	mov	r10, r18
    1db6:	b3 2e       	mov	r11, r19
    1db8:	c4 2e       	mov	r12, r20
    1dba:	d5 2e       	mov	r13, r21
    1dbc:	e6 2e       	mov	r14, r22
    1dbe:	f7 2e       	mov	r15, r23
    1dc0:	08 2f       	mov	r16, r24
    1dc2:	19 2f       	mov	r17, r25
    1dc4:	28 2d       	mov	r18, r8
    1dc6:	39 2d       	mov	r19, r9
    1dc8:	47 2d       	mov	r20, r7
    1dca:	56 2d       	mov	r21, r6
    1dcc:	6b 2f       	mov	r22, r27
    1dce:	7a 2f       	mov	r23, r26
    1dd0:	85 2d       	mov	r24, r5
    1dd2:	94 2d       	mov	r25, r4
    1dd4:	0e 94 2d 25 	call	0x4a5a	; 0x4a5a <__adddi3>
    1dd8:	2d 87       	std	Y+13, r18	; 0x0d
    1dda:	3e 87       	std	Y+14, r19	; 0x0e
    1ddc:	4f 87       	std	Y+15, r20	; 0x0f
    1dde:	58 8b       	std	Y+16, r21	; 0x10
    1de0:	69 8b       	std	Y+17, r22	; 0x11
    1de2:	7a 8b       	std	Y+18, r23	; 0x12
    1de4:	8b 8b       	std	Y+19, r24	; 0x13
    1de6:	9c 8b       	std	Y+20, r25	; 0x14
		P = (D1*SENS/(2097152l)-OFF)/(8192l);
	}
	
	// Temp conversion
	TEMP = 2000l+int64_t(dT)*C[6]/8388608LL;
    1de8:	84 85       	ldd	r24, Z+12	; 0x0c
    1dea:	95 85       	ldd	r25, Z+13	; 0x0d
    1dec:	3c 01       	movw	r6, r24
    1dee:	81 2c       	mov	r8, r1
    1df0:	91 2c       	mov	r9, r1
    1df2:	a1 2c       	mov	r10, r1
    1df4:	b1 2c       	mov	r11, r1
    1df6:	65 01       	movw	r12, r10
    1df8:	8d 8f       	std	Y+29, r24	; 0x1d
    1dfa:	7e 8e       	std	Y+30, r7	; 0x1e
    1dfc:	8f 8e       	std	Y+31, r8	; 0x1f
    1dfe:	98 a2       	std	Y+32, r9	; 0x20
    1e00:	a9 a2       	std	Y+33, r10	; 0x21
    1e02:	ba a2       	std	Y+34, r11	; 0x22
    1e04:	cb a2       	std	Y+35, r12	; 0x23
    1e06:	dc a2       	std	Y+36, r13	; 0x24
    1e08:	a9 80       	ldd	r10, Y+1	; 0x01
    1e0a:	ba 80       	ldd	r11, Y+2	; 0x02
    1e0c:	cb 80       	ldd	r12, Y+3	; 0x03
    1e0e:	dc 80       	ldd	r13, Y+4	; 0x04
    1e10:	ed 80       	ldd	r14, Y+5	; 0x05
    1e12:	fe 2c       	mov	r15, r14
    1e14:	0e 2d       	mov	r16, r14
    1e16:	1e 2d       	mov	r17, r14
    1e18:	28 2f       	mov	r18, r24
    1e1a:	37 2d       	mov	r19, r7
    1e1c:	40 e0       	ldi	r20, 0x00	; 0
    1e1e:	50 e0       	ldi	r21, 0x00	; 0
    1e20:	60 e0       	ldi	r22, 0x00	; 0
    1e22:	70 e0       	ldi	r23, 0x00	; 0
    1e24:	80 e0       	ldi	r24, 0x00	; 0
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	0e 94 a5 24 	call	0x494a	; 0x494a <__muldi3>
    1e2c:	12 2f       	mov	r17, r18
    1e2e:	3d a3       	std	Y+37, r19	; 0x25
    1e30:	4d 8f       	std	Y+29, r20	; 0x1d
    1e32:	b5 2f       	mov	r27, r21
    1e34:	f6 2f       	mov	r31, r22
    1e36:	e7 2f       	mov	r30, r23
    1e38:	78 2e       	mov	r7, r24
    1e3a:	89 2e       	mov	r8, r25
    1e3c:	a0 e0       	ldi	r26, 0x00	; 0
    1e3e:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <__cmpdi2_s8>
    1e42:	84 f4       	brge	.+32     	; 0x1e64 <_ZN6MS58379calculateEv+0x590>
    1e44:	21 50       	subi	r18, 0x01	; 1
    1e46:	31 09       	sbc	r19, r1
    1e48:	40 48       	sbci	r20, 0x80	; 128
    1e4a:	5f 4f       	sbci	r21, 0xFF	; 255
    1e4c:	6f 4f       	sbci	r22, 0xFF	; 255
    1e4e:	7f 4f       	sbci	r23, 0xFF	; 255
    1e50:	8f 4f       	sbci	r24, 0xFF	; 255
    1e52:	9f 4f       	sbci	r25, 0xFF	; 255
    1e54:	12 2f       	mov	r17, r18
    1e56:	3d a3       	std	Y+37, r19	; 0x25
    1e58:	4d 8f       	std	Y+29, r20	; 0x1d
    1e5a:	b5 2f       	mov	r27, r21
    1e5c:	f6 2f       	mov	r31, r22
    1e5e:	e7 2f       	mov	r30, r23
    1e60:	78 2e       	mov	r7, r24
    1e62:	89 2e       	mov	r8, r25
    1e64:	21 2f       	mov	r18, r17
    1e66:	3d a1       	ldd	r19, Y+37	; 0x25
    1e68:	4d 8d       	ldd	r20, Y+29	; 0x1d
    1e6a:	5b 2f       	mov	r21, r27
    1e6c:	6f 2f       	mov	r22, r31
    1e6e:	7e 2f       	mov	r23, r30
    1e70:	87 2d       	mov	r24, r7
    1e72:	98 2d       	mov	r25, r8
    1e74:	07 e1       	ldi	r16, 0x17	; 23
    1e76:	0e 94 0f 25 	call	0x4a1e	; 0x4a1e <__ashrdi3>
    1e7a:	82 2e       	mov	r8, r18
    1e7c:	93 2e       	mov	r9, r19
    1e7e:	a4 2e       	mov	r10, r20
    1e80:	b5 2e       	mov	r11, r21
    1e82:	24 01       	movw	r4, r8
    1e84:	35 01       	movw	r6, r10
    1e86:	00 ed       	ldi	r16, 0xD0	; 208
    1e88:	40 0e       	add	r4, r16
    1e8a:	07 e0       	ldi	r16, 0x07	; 7
    1e8c:	50 1e       	adc	r5, r16
    1e8e:	61 1c       	adc	r6, r1
    1e90:	71 1c       	adc	r7, r1
			Ti = (11*int64_t(dT)*int64_t(dT))/(34359738368LL);
			OFFi = (31*(TEMP-2000)*(TEMP-2000))/8;
			SENSi = (63*(TEMP-2000)*(TEMP-2000))/32;
		}
		} else {
		if((TEMP/100)<20){         //Low temp
    1e92:	10 ed       	ldi	r17, 0xD0	; 208
    1e94:	41 16       	cp	r4, r17
    1e96:	17 e0       	ldi	r17, 0x07	; 7
    1e98:	51 06       	cpc	r5, r17
    1e9a:	61 04       	cpc	r6, r1
    1e9c:	71 04       	cpc	r7, r1
    1e9e:	0c f4       	brge	.+2      	; 0x1ea2 <_ZN6MS58379calculateEv+0x5ce>
    1ea0:	af c0       	rjmp	.+350    	; 0x2000 <_ZN6MS58379calculateEv+0x72c>
    1ea2:	8a c1       	rjmp	.+788    	; 0x21b8 <_ZN6MS58379calculateEv+0x8e4>
	TEMP = 2000l+int64_t(dT)*C[6]/8388608LL;
	
	//Second order compensation
	if ( _model == MS5837_02BA ) {
		if((TEMP/100)<20){         //Low temp
			Ti = (11*int64_t(dT)*int64_t(dT))/(34359738368LL);
    1ea4:	29 81       	ldd	r18, Y+1	; 0x01
    1ea6:	3a 81       	ldd	r19, Y+2	; 0x02
    1ea8:	4b 81       	ldd	r20, Y+3	; 0x03
    1eaa:	5c 81       	ldd	r21, Y+4	; 0x04
    1eac:	6d 81       	ldd	r22, Y+5	; 0x05
    1eae:	76 2f       	mov	r23, r22
    1eb0:	86 2f       	mov	r24, r22
    1eb2:	96 2f       	mov	r25, r22
    1eb4:	02 e0       	ldi	r16, 0x02	; 2
    1eb6:	0e 94 f6 24 	call	0x49ec	; 0x49ec <__ashldi3>
    1eba:	a2 2e       	mov	r10, r18
    1ebc:	b3 2e       	mov	r11, r19
    1ebe:	c4 2e       	mov	r12, r20
    1ec0:	d5 2e       	mov	r13, r21
    1ec2:	e6 2e       	mov	r14, r22
    1ec4:	f7 2e       	mov	r15, r23
    1ec6:	e8 2f       	mov	r30, r24
    1ec8:	19 2f       	mov	r17, r25
    1eca:	0e 94 f6 24 	call	0x49ec	; 0x49ec <__ashldi3>
    1ece:	0e 2f       	mov	r16, r30
    1ed0:	0e 94 42 25 	call	0x4a84	; 0x4a84 <__subdi3>
    1ed4:	a9 80       	ldd	r10, Y+1	; 0x01
    1ed6:	ba 80       	ldd	r11, Y+2	; 0x02
    1ed8:	cb 80       	ldd	r12, Y+3	; 0x03
    1eda:	dc 80       	ldd	r13, Y+4	; 0x04
    1edc:	ed 80       	ldd	r14, Y+5	; 0x05
    1ede:	fe 2c       	mov	r15, r14
    1ee0:	0e 2d       	mov	r16, r14
    1ee2:	1e 2d       	mov	r17, r14
    1ee4:	0e 94 42 25 	call	0x4a84	; 0x4a84 <__subdi3>
    1ee8:	e0 2e       	mov	r14, r16
    1eea:	0f 2d       	mov	r16, r15
    1eec:	0e 94 a5 24 	call	0x494a	; 0x494a <__muldi3>
    1ef0:	12 2f       	mov	r17, r18
    1ef2:	3d 8f       	std	Y+29, r19	; 0x1d
    1ef4:	4d 83       	std	Y+5, r20	; 0x05
    1ef6:	b5 2f       	mov	r27, r21
    1ef8:	f6 2f       	mov	r31, r22
    1efa:	e7 2f       	mov	r30, r23
    1efc:	89 83       	std	Y+1, r24	; 0x01
    1efe:	89 2e       	mov	r8, r25
    1f00:	a0 e0       	ldi	r26, 0x00	; 0
    1f02:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <__cmpdi2_s8>
    1f06:	84 f4       	brge	.+32     	; 0x1f28 <_ZN6MS58379calculateEv+0x654>
    1f08:	21 50       	subi	r18, 0x01	; 1
    1f0a:	31 09       	sbc	r19, r1
    1f0c:	41 09       	sbc	r20, r1
    1f0e:	51 09       	sbc	r21, r1
    1f10:	68 4f       	sbci	r22, 0xF8	; 248
    1f12:	7f 4f       	sbci	r23, 0xFF	; 255
    1f14:	8f 4f       	sbci	r24, 0xFF	; 255
    1f16:	9f 4f       	sbci	r25, 0xFF	; 255
    1f18:	12 2f       	mov	r17, r18
    1f1a:	3d 8f       	std	Y+29, r19	; 0x1d
    1f1c:	4d 83       	std	Y+5, r20	; 0x05
    1f1e:	b5 2f       	mov	r27, r21
    1f20:	f6 2f       	mov	r31, r22
    1f22:	e7 2f       	mov	r30, r23
    1f24:	89 83       	std	Y+1, r24	; 0x01
    1f26:	89 2e       	mov	r8, r25
    1f28:	21 2f       	mov	r18, r17
    1f2a:	3d 8d       	ldd	r19, Y+29	; 0x1d
    1f2c:	4d 81       	ldd	r20, Y+5	; 0x05
    1f2e:	5b 2f       	mov	r21, r27
    1f30:	6f 2f       	mov	r22, r31
    1f32:	7e 2f       	mov	r23, r30
    1f34:	89 81       	ldd	r24, Y+1	; 0x01
    1f36:	98 2d       	mov	r25, r8
    1f38:	03 e2       	ldi	r16, 0x23	; 35
    1f3a:	0e 94 0f 25 	call	0x4a1e	; 0x4a1e <__ashrdi3>
    1f3e:	82 2e       	mov	r8, r18
    1f40:	93 2e       	mov	r9, r19
    1f42:	a4 2e       	mov	r10, r20
    1f44:	b5 2e       	mov	r11, r21
			OFFi = (31*(TEMP-2000)*(TEMP-2000))/8;
    1f46:	73 01       	movw	r14, r6
    1f48:	62 01       	movw	r12, r4
    1f4a:	20 ed       	ldi	r18, 0xD0	; 208
    1f4c:	c2 1a       	sub	r12, r18
    1f4e:	27 e0       	ldi	r18, 0x07	; 7
    1f50:	d2 0a       	sbc	r13, r18
    1f52:	e1 08       	sbc	r14, r1
    1f54:	f1 08       	sbc	r15, r1
    1f56:	d7 01       	movw	r26, r14
    1f58:	c6 01       	movw	r24, r12
    1f5a:	88 0f       	add	r24, r24
    1f5c:	99 1f       	adc	r25, r25
    1f5e:	aa 1f       	adc	r26, r26
    1f60:	bb 1f       	adc	r27, r27
    1f62:	88 0f       	add	r24, r24
    1f64:	99 1f       	adc	r25, r25
    1f66:	aa 1f       	adc	r26, r26
    1f68:	bb 1f       	adc	r27, r27
    1f6a:	88 0f       	add	r24, r24
    1f6c:	99 1f       	adc	r25, r25
    1f6e:	aa 1f       	adc	r26, r26
    1f70:	bb 1f       	adc	r27, r27
    1f72:	88 0f       	add	r24, r24
    1f74:	99 1f       	adc	r25, r25
    1f76:	aa 1f       	adc	r26, r26
    1f78:	bb 1f       	adc	r27, r27
    1f7a:	88 0f       	add	r24, r24
    1f7c:	99 1f       	adc	r25, r25
    1f7e:	aa 1f       	adc	r26, r26
    1f80:	bb 1f       	adc	r27, r27
    1f82:	9c 01       	movw	r18, r24
    1f84:	ad 01       	movw	r20, r26
    1f86:	2c 19       	sub	r18, r12
    1f88:	3d 09       	sbc	r19, r13
    1f8a:	4e 09       	sbc	r20, r14
    1f8c:	5f 09       	sbc	r21, r15
    1f8e:	c7 01       	movw	r24, r14
    1f90:	b6 01       	movw	r22, r12
    1f92:	0e 94 53 24 	call	0x48a6	; 0x48a6 <__mulsi3>
    1f96:	8b 01       	movw	r16, r22
    1f98:	9c 01       	movw	r18, r24
    1f9a:	99 23       	and	r25, r25
    1f9c:	24 f4       	brge	.+8      	; 0x1fa6 <_ZN6MS58379calculateEv+0x6d2>
    1f9e:	09 5f       	subi	r16, 0xF9	; 249
    1fa0:	1f 4f       	sbci	r17, 0xFF	; 255
    1fa2:	2f 4f       	sbci	r18, 0xFF	; 255
    1fa4:	3f 4f       	sbci	r19, 0xFF	; 255
    1fa6:	b9 01       	movw	r22, r18
    1fa8:	a8 01       	movw	r20, r16
    1faa:	68 94       	set
    1fac:	12 f8       	bld	r1, 2
    1fae:	75 95       	asr	r23
    1fb0:	67 95       	ror	r22
    1fb2:	57 95       	ror	r21
    1fb4:	47 95       	ror	r20
    1fb6:	16 94       	lsr	r1
    1fb8:	d1 f7       	brne	.-12     	; 0x1fae <_ZN6MS58379calculateEv+0x6da>
    1fba:	49 83       	std	Y+1, r20	; 0x01
    1fbc:	5a 83       	std	Y+2, r21	; 0x02
    1fbe:	6b 83       	std	Y+3, r22	; 0x03
    1fc0:	7c 83       	std	Y+4, r23	; 0x04
			SENSi = (63*(TEMP-2000)*(TEMP-2000))/32;
    1fc2:	af e3       	ldi	r26, 0x3F	; 63
    1fc4:	b0 e0       	ldi	r27, 0x00	; 0
    1fc6:	a7 01       	movw	r20, r14
    1fc8:	96 01       	movw	r18, r12
    1fca:	0e 94 9b 24 	call	0x4936	; 0x4936 <__muluhisi3>
    1fce:	9b 01       	movw	r18, r22
    1fd0:	ac 01       	movw	r20, r24
    1fd2:	c7 01       	movw	r24, r14
    1fd4:	b6 01       	movw	r22, r12
    1fd6:	0e 94 53 24 	call	0x48a6	; 0x48a6 <__mulsi3>
    1fda:	8b 01       	movw	r16, r22
    1fdc:	9c 01       	movw	r18, r24
    1fde:	99 23       	and	r25, r25
    1fe0:	24 f4       	brge	.+8      	; 0x1fea <_ZN6MS58379calculateEv+0x716>
    1fe2:	01 5e       	subi	r16, 0xE1	; 225
    1fe4:	1f 4f       	sbci	r17, 0xFF	; 255
    1fe6:	2f 4f       	sbci	r18, 0xFF	; 255
    1fe8:	3f 4f       	sbci	r19, 0xFF	; 255
    1fea:	78 01       	movw	r14, r16
    1fec:	89 01       	movw	r16, r18
    1fee:	68 94       	set
    1ff0:	14 f8       	bld	r1, 4
    1ff2:	15 95       	asr	r17
    1ff4:	07 95       	ror	r16
    1ff6:	f7 94       	ror	r15
    1ff8:	e7 94       	ror	r14
    1ffa:	16 94       	lsr	r1
    1ffc:	d1 f7       	brne	.-12     	; 0x1ff2 <_ZN6MS58379calculateEv+0x71e>
    1ffe:	47 c1       	rjmp	.+654    	; 0x228e <__stack+0x8f>
		}
		} else {
		if((TEMP/100)<20){         //Low temp
			Ti = (3*int64_t(dT)*int64_t(dT))/(8589934592LL);
    2000:	29 81       	ldd	r18, Y+1	; 0x01
    2002:	3a 81       	ldd	r19, Y+2	; 0x02
    2004:	4b 81       	ldd	r20, Y+3	; 0x03
    2006:	5c 81       	ldd	r21, Y+4	; 0x04
    2008:	6d 81       	ldd	r22, Y+5	; 0x05
    200a:	76 2f       	mov	r23, r22
    200c:	86 2f       	mov	r24, r22
    200e:	96 2f       	mov	r25, r22
    2010:	01 e0       	ldi	r16, 0x01	; 1
    2012:	0e 94 f6 24 	call	0x49ec	; 0x49ec <__ashldi3>
    2016:	a9 80       	ldd	r10, Y+1	; 0x01
    2018:	ba 80       	ldd	r11, Y+2	; 0x02
    201a:	cb 80       	ldd	r12, Y+3	; 0x03
    201c:	dc 80       	ldd	r13, Y+4	; 0x04
    201e:	ed 80       	ldd	r14, Y+5	; 0x05
    2020:	fe 2c       	mov	r15, r14
    2022:	0e 2d       	mov	r16, r14
    2024:	1e 2d       	mov	r17, r14
    2026:	0e 94 2d 25 	call	0x4a5a	; 0x4a5a <__adddi3>
    202a:	e0 2e       	mov	r14, r16
    202c:	0f 2d       	mov	r16, r15
    202e:	0e 94 a5 24 	call	0x494a	; 0x494a <__muldi3>
    2032:	12 2f       	mov	r17, r18
    2034:	3d 8f       	std	Y+29, r19	; 0x1d
    2036:	4d 83       	std	Y+5, r20	; 0x05
    2038:	b5 2f       	mov	r27, r21
    203a:	f6 2f       	mov	r31, r22
    203c:	e7 2f       	mov	r30, r23
    203e:	89 83       	std	Y+1, r24	; 0x01
    2040:	89 2e       	mov	r8, r25
    2042:	a0 e0       	ldi	r26, 0x00	; 0
    2044:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <__cmpdi2_s8>
    2048:	84 f4       	brge	.+32     	; 0x206a <_ZN6MS58379calculateEv+0x796>
    204a:	21 50       	subi	r18, 0x01	; 1
    204c:	31 09       	sbc	r19, r1
    204e:	41 09       	sbc	r20, r1
    2050:	51 09       	sbc	r21, r1
    2052:	6e 4f       	sbci	r22, 0xFE	; 254
    2054:	7f 4f       	sbci	r23, 0xFF	; 255
    2056:	8f 4f       	sbci	r24, 0xFF	; 255
    2058:	9f 4f       	sbci	r25, 0xFF	; 255
    205a:	12 2f       	mov	r17, r18
    205c:	3d 8f       	std	Y+29, r19	; 0x1d
    205e:	4d 83       	std	Y+5, r20	; 0x05
    2060:	b5 2f       	mov	r27, r21
    2062:	f6 2f       	mov	r31, r22
    2064:	e7 2f       	mov	r30, r23
    2066:	89 83       	std	Y+1, r24	; 0x01
    2068:	89 2e       	mov	r8, r25
    206a:	21 2f       	mov	r18, r17
    206c:	3d 8d       	ldd	r19, Y+29	; 0x1d
    206e:	4d 81       	ldd	r20, Y+5	; 0x05
    2070:	5b 2f       	mov	r21, r27
    2072:	6f 2f       	mov	r22, r31
    2074:	7e 2f       	mov	r23, r30
    2076:	89 81       	ldd	r24, Y+1	; 0x01
    2078:	98 2d       	mov	r25, r8
    207a:	01 e2       	ldi	r16, 0x21	; 33
    207c:	0e 94 0f 25 	call	0x4a1e	; 0x4a1e <__ashrdi3>
    2080:	2d 83       	std	Y+5, r18	; 0x05
    2082:	3e 83       	std	Y+6, r19	; 0x06
    2084:	4f 83       	std	Y+7, r20	; 0x07
    2086:	58 87       	std	Y+8, r21	; 0x08
			OFFi = (3*(TEMP-2000)*(TEMP-2000))/2;
    2088:	53 01       	movw	r10, r6
    208a:	42 01       	movw	r8, r4
    208c:	50 ed       	ldi	r21, 0xD0	; 208
    208e:	85 1a       	sub	r8, r21
    2090:	57 e0       	ldi	r21, 0x07	; 7
    2092:	95 0a       	sbc	r9, r21
    2094:	a1 08       	sbc	r10, r1
    2096:	b1 08       	sbc	r11, r1
    2098:	d5 01       	movw	r26, r10
    209a:	c4 01       	movw	r24, r8
    209c:	88 0f       	add	r24, r24
    209e:	99 1f       	adc	r25, r25
    20a0:	aa 1f       	adc	r26, r26
    20a2:	bb 1f       	adc	r27, r27
    20a4:	9c 01       	movw	r18, r24
    20a6:	ad 01       	movw	r20, r26
    20a8:	28 0d       	add	r18, r8
    20aa:	39 1d       	adc	r19, r9
    20ac:	4a 1d       	adc	r20, r10
    20ae:	5b 1d       	adc	r21, r11
    20b0:	c5 01       	movw	r24, r10
    20b2:	b4 01       	movw	r22, r8
    20b4:	0e 94 53 24 	call	0x48a6	; 0x48a6 <__mulsi3>
    20b8:	8b 01       	movw	r16, r22
    20ba:	9c 01       	movw	r18, r24
    20bc:	99 23       	and	r25, r25
    20be:	24 f4       	brge	.+8      	; 0x20c8 <_ZN6MS58379calculateEv+0x7f4>
    20c0:	0f 5f       	subi	r16, 0xFF	; 255
    20c2:	1f 4f       	sbci	r17, 0xFF	; 255
    20c4:	2f 4f       	sbci	r18, 0xFF	; 255
    20c6:	3f 4f       	sbci	r19, 0xFF	; 255
    20c8:	c9 01       	movw	r24, r18
    20ca:	b8 01       	movw	r22, r16
    20cc:	95 95       	asr	r25
    20ce:	87 95       	ror	r24
    20d0:	77 95       	ror	r23
    20d2:	67 95       	ror	r22
    20d4:	69 83       	std	Y+1, r22	; 0x01
    20d6:	7a 83       	std	Y+2, r23	; 0x02
    20d8:	8b 83       	std	Y+3, r24	; 0x03
    20da:	9c 83       	std	Y+4, r25	; 0x04
			SENSi = (5*(TEMP-2000)*(TEMP-2000))/8;
    20dc:	d5 01       	movw	r26, r10
    20de:	c4 01       	movw	r24, r8
    20e0:	88 0f       	add	r24, r24
    20e2:	99 1f       	adc	r25, r25
    20e4:	aa 1f       	adc	r26, r26
    20e6:	bb 1f       	adc	r27, r27
    20e8:	88 0f       	add	r24, r24
    20ea:	99 1f       	adc	r25, r25
    20ec:	aa 1f       	adc	r26, r26
    20ee:	bb 1f       	adc	r27, r27
    20f0:	9c 01       	movw	r18, r24
    20f2:	ad 01       	movw	r20, r26
    20f4:	28 0d       	add	r18, r8
    20f6:	39 1d       	adc	r19, r9
    20f8:	4a 1d       	adc	r20, r10
    20fa:	5b 1d       	adc	r21, r11
    20fc:	c5 01       	movw	r24, r10
    20fe:	b4 01       	movw	r22, r8
    2100:	0e 94 53 24 	call	0x48a6	; 0x48a6 <__mulsi3>
    2104:	8b 01       	movw	r16, r22
    2106:	9c 01       	movw	r18, r24
    2108:	99 23       	and	r25, r25
    210a:	24 f4       	brge	.+8      	; 0x2114 <_ZN6MS58379calculateEv+0x840>
    210c:	09 5f       	subi	r16, 0xF9	; 249
    210e:	1f 4f       	sbci	r17, 0xFF	; 255
    2110:	2f 4f       	sbci	r18, 0xFF	; 255
    2112:	3f 4f       	sbci	r19, 0xFF	; 255
    2114:	78 01       	movw	r14, r16
    2116:	89 01       	movw	r16, r18
    2118:	68 94       	set
    211a:	12 f8       	bld	r1, 2
    211c:	15 95       	asr	r17
    211e:	07 95       	ror	r16
    2120:	f7 94       	ror	r15
    2122:	e7 94       	ror	r14
    2124:	16 94       	lsr	r1
    2126:	d1 f7       	brne	.-12     	; 0x211c <_ZN6MS58379calculateEv+0x848>
			if((TEMP/100)<-15){    //Very low temp
    2128:	71 ec       	ldi	r23, 0xC1	; 193
    212a:	47 16       	cp	r4, r23
    212c:	79 ef       	ldi	r23, 0xF9	; 249
    212e:	57 06       	cpc	r5, r23
    2130:	7f ef       	ldi	r23, 0xFF	; 255
    2132:	67 06       	cpc	r6, r23
    2134:	77 06       	cpc	r7, r23
    2136:	0c f0       	brlt	.+2      	; 0x213a <_ZN6MS58379calculateEv+0x866>
    2138:	7f c1       	rjmp	.+766    	; 0x2438 <__stack+0x239>
				OFFi = OFFi+7*(TEMP+1500l)*(TEMP+1500l);
    213a:	53 01       	movw	r10, r6
    213c:	42 01       	movw	r8, r4
    213e:	8c ed       	ldi	r24, 0xDC	; 220
    2140:	88 0e       	add	r8, r24
    2142:	85 e0       	ldi	r24, 0x05	; 5
    2144:	98 1e       	adc	r9, r24
    2146:	a1 1c       	adc	r10, r1
    2148:	b1 1c       	adc	r11, r1
    214a:	d5 01       	movw	r26, r10
    214c:	c4 01       	movw	r24, r8
    214e:	88 0f       	add	r24, r24
    2150:	99 1f       	adc	r25, r25
    2152:	aa 1f       	adc	r26, r26
    2154:	bb 1f       	adc	r27, r27
    2156:	88 0f       	add	r24, r24
    2158:	99 1f       	adc	r25, r25
    215a:	aa 1f       	adc	r26, r26
    215c:	bb 1f       	adc	r27, r27
    215e:	88 0f       	add	r24, r24
    2160:	99 1f       	adc	r25, r25
    2162:	aa 1f       	adc	r26, r26
    2164:	bb 1f       	adc	r27, r27
    2166:	9c 01       	movw	r18, r24
    2168:	ad 01       	movw	r20, r26
    216a:	28 19       	sub	r18, r8
    216c:	39 09       	sbc	r19, r9
    216e:	4a 09       	sbc	r20, r10
    2170:	5b 09       	sbc	r21, r11
    2172:	c5 01       	movw	r24, r10
    2174:	b4 01       	movw	r22, r8
    2176:	0e 94 53 24 	call	0x48a6	; 0x48a6 <__mulsi3>
    217a:	29 81       	ldd	r18, Y+1	; 0x01
    217c:	3a 81       	ldd	r19, Y+2	; 0x02
    217e:	4b 81       	ldd	r20, Y+3	; 0x03
    2180:	5c 81       	ldd	r21, Y+4	; 0x04
    2182:	26 0f       	add	r18, r22
    2184:	37 1f       	adc	r19, r23
    2186:	48 1f       	adc	r20, r24
    2188:	59 1f       	adc	r21, r25
    218a:	29 83       	std	Y+1, r18	; 0x01
    218c:	3a 83       	std	Y+2, r19	; 0x02
    218e:	4b 83       	std	Y+3, r20	; 0x03
    2190:	5c 83       	std	Y+4, r21	; 0x04
				SENSi = SENSi+4*(TEMP+1500l)*(TEMP+1500l);
    2192:	a5 01       	movw	r20, r10
    2194:	94 01       	movw	r18, r8
    2196:	22 0f       	add	r18, r18
    2198:	33 1f       	adc	r19, r19
    219a:	44 1f       	adc	r20, r20
    219c:	55 1f       	adc	r21, r21
    219e:	22 0f       	add	r18, r18
    21a0:	33 1f       	adc	r19, r19
    21a2:	44 1f       	adc	r20, r20
    21a4:	55 1f       	adc	r21, r21
    21a6:	c5 01       	movw	r24, r10
    21a8:	b4 01       	movw	r22, r8
    21aa:	0e 94 53 24 	call	0x48a6	; 0x48a6 <__mulsi3>
    21ae:	e6 0e       	add	r14, r22
    21b0:	f7 1e       	adc	r15, r23
    21b2:	08 1f       	adc	r16, r24
    21b4:	19 1f       	adc	r17, r25
    21b6:	40 c1       	rjmp	.+640    	; 0x2438 <__stack+0x239>
			}
		}
		else if((TEMP/100)>=20){    //High temp
			Ti = 2*(dT*dT)/(137438953472LL);
    21b8:	29 81       	ldd	r18, Y+1	; 0x01
    21ba:	3a 81       	ldd	r19, Y+2	; 0x02
    21bc:	4b 81       	ldd	r20, Y+3	; 0x03
    21be:	5c 81       	ldd	r21, Y+4	; 0x04
    21c0:	ca 01       	movw	r24, r20
    21c2:	b9 01       	movw	r22, r18
    21c4:	0e 94 53 24 	call	0x48a6	; 0x48a6 <__mulsi3>
    21c8:	4b 01       	movw	r8, r22
    21ca:	5c 01       	movw	r10, r24
    21cc:	88 0c       	add	r8, r8
    21ce:	99 1c       	adc	r9, r9
    21d0:	aa 1c       	adc	r10, r10
    21d2:	bb 1c       	adc	r11, r11
    21d4:	75 01       	movw	r14, r10
    21d6:	64 01       	movw	r12, r8
    21d8:	ff 0c       	add	r15, r15
    21da:	cc 08       	sbc	r12, r12
    21dc:	dc 2c       	mov	r13, r12
    21de:	76 01       	movw	r14, r12
    21e0:	18 2d       	mov	r17, r8
    21e2:	9d 8e       	std	Y+29, r9	; 0x1d
    21e4:	ad 82       	std	Y+5, r10	; 0x05
    21e6:	bb 2d       	mov	r27, r11
    21e8:	fc 2d       	mov	r31, r12
    21ea:	ec 2d       	mov	r30, r12
    21ec:	c9 82       	std	Y+1, r12	; 0x01
    21ee:	0c 2d       	mov	r16, r12
    21f0:	28 2d       	mov	r18, r8
    21f2:	39 2d       	mov	r19, r9
    21f4:	4a 2d       	mov	r20, r10
    21f6:	5b 2d       	mov	r21, r11
    21f8:	6c 2d       	mov	r22, r12
    21fa:	7c 2d       	mov	r23, r12
    21fc:	8c 2d       	mov	r24, r12
    21fe:	9c 2d       	mov	r25, r12
    2200:	a0 e0       	ldi	r26, 0x00	; 0
    2202:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <__cmpdi2_s8>
    2206:	84 f4       	brge	.+32     	; 0x2228 <__stack+0x29>
    2208:	21 50       	subi	r18, 0x01	; 1
    220a:	31 09       	sbc	r19, r1
    220c:	41 09       	sbc	r20, r1
    220e:	51 09       	sbc	r21, r1
    2210:	60 4e       	sbci	r22, 0xE0	; 224
    2212:	7f 4f       	sbci	r23, 0xFF	; 255
    2214:	8f 4f       	sbci	r24, 0xFF	; 255
    2216:	9f 4f       	sbci	r25, 0xFF	; 255
    2218:	12 2f       	mov	r17, r18
    221a:	3d 8f       	std	Y+29, r19	; 0x1d
    221c:	4d 83       	std	Y+5, r20	; 0x05
    221e:	b5 2f       	mov	r27, r21
    2220:	f6 2f       	mov	r31, r22
    2222:	e7 2f       	mov	r30, r23
    2224:	89 83       	std	Y+1, r24	; 0x01
    2226:	09 2f       	mov	r16, r25
    2228:	21 2f       	mov	r18, r17
    222a:	3d 8d       	ldd	r19, Y+29	; 0x1d
    222c:	4d 81       	ldd	r20, Y+5	; 0x05
    222e:	5b 2f       	mov	r21, r27
    2230:	6f 2f       	mov	r22, r31
    2232:	7e 2f       	mov	r23, r30
    2234:	89 81       	ldd	r24, Y+1	; 0x01
    2236:	90 2f       	mov	r25, r16
    2238:	05 e2       	ldi	r16, 0x25	; 37
    223a:	0e 94 0f 25 	call	0x4a1e	; 0x4a1e <__ashrdi3>
    223e:	2d 83       	std	Y+5, r18	; 0x05
    2240:	3e 83       	std	Y+6, r19	; 0x06
    2242:	4f 83       	std	Y+7, r20	; 0x07
    2244:	58 87       	std	Y+8, r21	; 0x08
			OFFi = (1*(TEMP-2000)*(TEMP-2000))/16;
    2246:	c3 01       	movw	r24, r6
    2248:	b2 01       	movw	r22, r4
    224a:	60 5d       	subi	r22, 0xD0	; 208
    224c:	77 40       	sbci	r23, 0x07	; 7
    224e:	81 09       	sbc	r24, r1
    2250:	91 09       	sbc	r25, r1
    2252:	9b 01       	movw	r18, r22
    2254:	ac 01       	movw	r20, r24
    2256:	0e 94 53 24 	call	0x48a6	; 0x48a6 <__mulsi3>
    225a:	8b 01       	movw	r16, r22
    225c:	9c 01       	movw	r18, r24
    225e:	99 23       	and	r25, r25
    2260:	24 f4       	brge	.+8      	; 0x226a <__stack+0x6b>
    2262:	01 5f       	subi	r16, 0xF1	; 241
    2264:	1f 4f       	sbci	r17, 0xFF	; 255
    2266:	2f 4f       	sbci	r18, 0xFF	; 255
    2268:	3f 4f       	sbci	r19, 0xFF	; 255
    226a:	48 01       	movw	r8, r16
    226c:	59 01       	movw	r10, r18
    226e:	68 94       	set
    2270:	13 f8       	bld	r1, 3
    2272:	b5 94       	asr	r11
    2274:	a7 94       	ror	r10
    2276:	97 94       	ror	r9
    2278:	87 94       	ror	r8
    227a:	16 94       	lsr	r1
    227c:	d1 f7       	brne	.-12     	; 0x2272 <__stack+0x73>
    227e:	89 82       	std	Y+1, r8	; 0x01
    2280:	9a 82       	std	Y+2, r9	; 0x02
    2282:	ab 82       	std	Y+3, r10	; 0x03
    2284:	bc 82       	std	Y+4, r11	; 0x04
			SENSi = 0;
    2286:	e1 2c       	mov	r14, r1
    2288:	f1 2c       	mov	r15, r1
    228a:	87 01       	movw	r16, r14
    228c:	d5 c0       	rjmp	.+426    	; 0x2438 <__stack+0x239>
	}
	
	OFF2 = OFF-OFFi;           //Calculate pressure and temp second order
	SENS2 = SENS-SENSi;
	
	TEMP = (TEMP-Ti);
    228e:	d3 01       	movw	r26, r6
    2290:	c2 01       	movw	r24, r4
    2292:	88 19       	sub	r24, r8
    2294:	99 09       	sbc	r25, r9
    2296:	aa 09       	sbc	r26, r10
    2298:	bb 09       	sbc	r27, r11
    229a:	f1 01       	movw	r30, r2
    229c:	80 8f       	std	Z+24, r24	; 0x18
    229e:	91 8f       	std	Z+25, r25	; 0x19
    22a0:	a2 8f       	std	Z+26, r26	; 0x1a
    22a2:	b3 8f       	std	Z+27, r27	; 0x1b
	
	if ( _model == MS5837_02BA ) {
		P = (((D1*SENS2)/2097152l-OFF2)/32768l);
    22a4:	80 89       	ldd	r24, Z+16	; 0x10
    22a6:	91 89       	ldd	r25, Z+17	; 0x11
    22a8:	a2 89       	ldd	r26, Z+18	; 0x12
    22aa:	b3 89       	ldd	r27, Z+19	; 0x13
    22ac:	3c 01       	movw	r6, r24
    22ae:	4d 01       	movw	r8, r26
    22b0:	a1 2c       	mov	r10, r1
    22b2:	b1 2c       	mov	r11, r1
    22b4:	65 01       	movw	r12, r10
    22b6:	8d 83       	std	Y+5, r24	; 0x05
    22b8:	7e 82       	std	Y+6, r7	; 0x06
    22ba:	8f 82       	std	Y+7, r8	; 0x07
    22bc:	98 86       	std	Y+8, r9	; 0x08
    22be:	a9 86       	std	Y+9, r10	; 0x09
    22c0:	ba 86       	std	Y+10, r11	; 0x0a
    22c2:	cb 86       	std	Y+11, r12	; 0x0b
    22c4:	dc 86       	std	Y+12, r13	; 0x0c
    22c6:	27 01       	movw	r4, r14
    22c8:	38 01       	movw	r6, r16
    22ca:	77 0c       	add	r7, r7
    22cc:	44 08       	sbc	r4, r4
    22ce:	54 2c       	mov	r5, r4
    22d0:	32 01       	movw	r6, r4
    22d2:	2d 85       	ldd	r18, Y+13	; 0x0d
    22d4:	3e 85       	ldd	r19, Y+14	; 0x0e
    22d6:	4f 85       	ldd	r20, Y+15	; 0x0f
    22d8:	58 89       	ldd	r21, Y+16	; 0x10
    22da:	69 89       	ldd	r22, Y+17	; 0x11
    22dc:	7a 89       	ldd	r23, Y+18	; 0x12
    22de:	8b 89       	ldd	r24, Y+19	; 0x13
    22e0:	9c 89       	ldd	r25, Y+20	; 0x14
    22e2:	ae 2c       	mov	r10, r14
    22e4:	bf 2c       	mov	r11, r15
    22e6:	c0 2e       	mov	r12, r16
    22e8:	d1 2e       	mov	r13, r17
    22ea:	e4 2c       	mov	r14, r4
    22ec:	f4 2c       	mov	r15, r4
    22ee:	04 2d       	mov	r16, r4
    22f0:	14 2d       	mov	r17, r4
    22f2:	0e 94 42 25 	call	0x4a84	; 0x4a84 <__subdi3>
    22f6:	a2 2e       	mov	r10, r18
    22f8:	b3 2e       	mov	r11, r19
    22fa:	c4 2e       	mov	r12, r20
    22fc:	d5 2e       	mov	r13, r21
    22fe:	e6 2e       	mov	r14, r22
    2300:	f7 2e       	mov	r15, r23
    2302:	08 2f       	mov	r16, r24
    2304:	19 2f       	mov	r17, r25
    2306:	2d 81       	ldd	r18, Y+5	; 0x05
    2308:	3e 81       	ldd	r19, Y+6	; 0x06
    230a:	48 2d       	mov	r20, r8
    230c:	59 2d       	mov	r21, r9
    230e:	60 e0       	ldi	r22, 0x00	; 0
    2310:	70 e0       	ldi	r23, 0x00	; 0
    2312:	80 e0       	ldi	r24, 0x00	; 0
    2314:	90 e0       	ldi	r25, 0x00	; 0
    2316:	0e 94 a5 24 	call	0x494a	; 0x494a <__muldi3>
    231a:	12 2f       	mov	r17, r18
    231c:	3d 87       	std	Y+13, r19	; 0x0d
    231e:	4d 83       	std	Y+5, r20	; 0x05
    2320:	b5 2f       	mov	r27, r21
    2322:	f6 2f       	mov	r31, r22
    2324:	e7 2f       	mov	r30, r23
    2326:	78 2e       	mov	r7, r24
    2328:	89 2e       	mov	r8, r25
    232a:	a0 e0       	ldi	r26, 0x00	; 0
    232c:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <__cmpdi2_s8>
    2330:	84 f4       	brge	.+32     	; 0x2352 <__stack+0x153>
    2332:	21 50       	subi	r18, 0x01	; 1
    2334:	31 09       	sbc	r19, r1
    2336:	40 4e       	sbci	r20, 0xE0	; 224
    2338:	5f 4f       	sbci	r21, 0xFF	; 255
    233a:	6f 4f       	sbci	r22, 0xFF	; 255
    233c:	7f 4f       	sbci	r23, 0xFF	; 255
    233e:	8f 4f       	sbci	r24, 0xFF	; 255
    2340:	9f 4f       	sbci	r25, 0xFF	; 255
    2342:	12 2f       	mov	r17, r18
    2344:	3d 87       	std	Y+13, r19	; 0x0d
    2346:	4d 83       	std	Y+5, r20	; 0x05
    2348:	b5 2f       	mov	r27, r21
    234a:	f6 2f       	mov	r31, r22
    234c:	e7 2f       	mov	r30, r23
    234e:	78 2e       	mov	r7, r24
    2350:	89 2e       	mov	r8, r25
    2352:	21 2f       	mov	r18, r17
    2354:	3d 85       	ldd	r19, Y+13	; 0x0d
    2356:	4d 81       	ldd	r20, Y+5	; 0x05
    2358:	5b 2f       	mov	r21, r27
    235a:	6f 2f       	mov	r22, r31
    235c:	7e 2f       	mov	r23, r30
    235e:	87 2d       	mov	r24, r7
    2360:	98 2d       	mov	r25, r8
    2362:	05 e1       	ldi	r16, 0x15	; 21
    2364:	0e 94 0f 25 	call	0x4a1e	; 0x4a1e <__ashrdi3>
    2368:	82 2e       	mov	r8, r18
    236a:	93 2e       	mov	r9, r19
    236c:	4d 87       	std	Y+13, r20	; 0x0d
    236e:	5d 83       	std	Y+5, r21	; 0x05
    2370:	b6 2f       	mov	r27, r22
    2372:	a7 2f       	mov	r26, r23
    2374:	f8 2f       	mov	r31, r24
    2376:	e9 2f       	mov	r30, r25
    2378:	49 80       	ldd	r4, Y+1	; 0x01
    237a:	5a 80       	ldd	r5, Y+2	; 0x02
    237c:	6b 80       	ldd	r6, Y+3	; 0x03
    237e:	7c 80       	ldd	r7, Y+4	; 0x04
    2380:	77 0c       	add	r7, r7
    2382:	44 08       	sbc	r4, r4
    2384:	54 2c       	mov	r5, r4
    2386:	32 01       	movw	r6, r4
    2388:	2d 89       	ldd	r18, Y+21	; 0x15
    238a:	3e 89       	ldd	r19, Y+22	; 0x16
    238c:	4f 89       	ldd	r20, Y+23	; 0x17
    238e:	58 8d       	ldd	r21, Y+24	; 0x18
    2390:	69 8d       	ldd	r22, Y+25	; 0x19
    2392:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2394:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2396:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2398:	a9 80       	ldd	r10, Y+1	; 0x01
    239a:	ba 80       	ldd	r11, Y+2	; 0x02
    239c:	cb 80       	ldd	r12, Y+3	; 0x03
    239e:	dc 80       	ldd	r13, Y+4	; 0x04
    23a0:	e4 2c       	mov	r14, r4
    23a2:	f4 2c       	mov	r15, r4
    23a4:	04 2d       	mov	r16, r4
    23a6:	14 2d       	mov	r17, r4
    23a8:	0e 94 42 25 	call	0x4a84	; 0x4a84 <__subdi3>
    23ac:	a2 2e       	mov	r10, r18
    23ae:	b3 2e       	mov	r11, r19
    23b0:	c4 2e       	mov	r12, r20
    23b2:	d5 2e       	mov	r13, r21
    23b4:	e6 2e       	mov	r14, r22
    23b6:	f7 2e       	mov	r15, r23
    23b8:	08 2f       	mov	r16, r24
    23ba:	19 2f       	mov	r17, r25
    23bc:	28 2d       	mov	r18, r8
    23be:	39 2d       	mov	r19, r9
    23c0:	4d 85       	ldd	r20, Y+13	; 0x0d
    23c2:	5d 81       	ldd	r21, Y+5	; 0x05
    23c4:	6b 2f       	mov	r22, r27
    23c6:	7a 2f       	mov	r23, r26
    23c8:	8f 2f       	mov	r24, r31
    23ca:	9e 2f       	mov	r25, r30
    23cc:	0e 94 42 25 	call	0x4a84	; 0x4a84 <__subdi3>
    23d0:	12 2f       	mov	r17, r18
    23d2:	3d 83       	std	Y+5, r19	; 0x05
    23d4:	49 83       	std	Y+1, r20	; 0x01
    23d6:	b5 2f       	mov	r27, r21
    23d8:	f6 2f       	mov	r31, r22
    23da:	e7 2f       	mov	r30, r23
    23dc:	78 2e       	mov	r7, r24
    23de:	89 2e       	mov	r8, r25
    23e0:	a0 e0       	ldi	r26, 0x00	; 0
    23e2:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <__cmpdi2_s8>
    23e6:	84 f4       	brge	.+32     	; 0x2408 <__stack+0x209>
    23e8:	21 50       	subi	r18, 0x01	; 1
    23ea:	30 48       	sbci	r19, 0x80	; 128
    23ec:	4f 4f       	sbci	r20, 0xFF	; 255
    23ee:	5f 4f       	sbci	r21, 0xFF	; 255
    23f0:	6f 4f       	sbci	r22, 0xFF	; 255
    23f2:	7f 4f       	sbci	r23, 0xFF	; 255
    23f4:	8f 4f       	sbci	r24, 0xFF	; 255
    23f6:	9f 4f       	sbci	r25, 0xFF	; 255
    23f8:	12 2f       	mov	r17, r18
    23fa:	3d 83       	std	Y+5, r19	; 0x05
    23fc:	49 83       	std	Y+1, r20	; 0x01
    23fe:	b5 2f       	mov	r27, r21
    2400:	f6 2f       	mov	r31, r22
    2402:	e7 2f       	mov	r30, r23
    2404:	78 2e       	mov	r7, r24
    2406:	89 2e       	mov	r8, r25
    2408:	21 2f       	mov	r18, r17
    240a:	3d 81       	ldd	r19, Y+5	; 0x05
    240c:	49 81       	ldd	r20, Y+1	; 0x01
    240e:	5b 2f       	mov	r21, r27
    2410:	6f 2f       	mov	r22, r31
    2412:	7e 2f       	mov	r23, r30
    2414:	87 2d       	mov	r24, r7
    2416:	98 2d       	mov	r25, r8
    2418:	0f e0       	ldi	r16, 0x0F	; 15
    241a:	0e 94 0f 25 	call	0x4a1e	; 0x4a1e <__ashrdi3>
    241e:	d1 01       	movw	r26, r2
    2420:	5c 96       	adiw	r26, 0x1c	; 28
    2422:	2c 93       	st	X, r18
    2424:	5c 97       	sbiw	r26, 0x1c	; 28
    2426:	5d 96       	adiw	r26, 0x1d	; 29
    2428:	3c 93       	st	X, r19
    242a:	5d 97       	sbiw	r26, 0x1d	; 29
    242c:	5e 96       	adiw	r26, 0x1e	; 30
    242e:	4c 93       	st	X, r20
    2430:	5e 97       	sbiw	r26, 0x1e	; 30
    2432:	5f 96       	adiw	r26, 0x1f	; 31
    2434:	5c 93       	st	X, r21
    2436:	da c0       	rjmp	.+436    	; 0x25ec <__stack+0x3ed>
	}
	
	OFF2 = OFF-OFFi;           //Calculate pressure and temp second order
	SENS2 = SENS-SENSi;
	
	TEMP = (TEMP-Ti);
    2438:	8d 80       	ldd	r8, Y+5	; 0x05
    243a:	9e 80       	ldd	r9, Y+6	; 0x06
    243c:	af 80       	ldd	r10, Y+7	; 0x07
    243e:	b8 84       	ldd	r11, Y+8	; 0x08
    2440:	48 18       	sub	r4, r8
    2442:	59 08       	sbc	r5, r9
    2444:	6a 08       	sbc	r6, r10
    2446:	7b 08       	sbc	r7, r11
    2448:	d1 01       	movw	r26, r2
    244a:	58 96       	adiw	r26, 0x18	; 24
    244c:	4d 92       	st	X+, r4
    244e:	5d 92       	st	X+, r5
    2450:	6d 92       	st	X+, r6
    2452:	7c 92       	st	X, r7
    2454:	5b 97       	sbiw	r26, 0x1b	; 27
	
	if ( _model == MS5837_02BA ) {
		P = (((D1*SENS2)/2097152l-OFF2)/32768l);
	} else {
		P = (((D1*SENS2)/2097152l-OFF2)/8192l);
    2456:	50 96       	adiw	r26, 0x10	; 16
    2458:	8d 91       	ld	r24, X+
    245a:	9d 91       	ld	r25, X+
    245c:	0d 90       	ld	r0, X+
    245e:	bc 91       	ld	r27, X
    2460:	a0 2d       	mov	r26, r0
    2462:	3c 01       	movw	r6, r24
    2464:	4d 01       	movw	r8, r26
    2466:	a1 2c       	mov	r10, r1
    2468:	b1 2c       	mov	r11, r1
    246a:	65 01       	movw	r12, r10
    246c:	8d 83       	std	Y+5, r24	; 0x05
    246e:	7e 82       	std	Y+6, r7	; 0x06
    2470:	8f 82       	std	Y+7, r8	; 0x07
    2472:	98 86       	std	Y+8, r9	; 0x08
    2474:	a9 86       	std	Y+9, r10	; 0x09
    2476:	ba 86       	std	Y+10, r11	; 0x0a
    2478:	cb 86       	std	Y+11, r12	; 0x0b
    247a:	dc 86       	std	Y+12, r13	; 0x0c
    247c:	27 01       	movw	r4, r14
    247e:	38 01       	movw	r6, r16
    2480:	77 0c       	add	r7, r7
    2482:	44 08       	sbc	r4, r4
    2484:	54 2c       	mov	r5, r4
    2486:	32 01       	movw	r6, r4
    2488:	2d 89       	ldd	r18, Y+21	; 0x15
    248a:	3e 89       	ldd	r19, Y+22	; 0x16
    248c:	4f 89       	ldd	r20, Y+23	; 0x17
    248e:	58 8d       	ldd	r21, Y+24	; 0x18
    2490:	69 8d       	ldd	r22, Y+25	; 0x19
    2492:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2494:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2496:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2498:	ae 2c       	mov	r10, r14
    249a:	bf 2c       	mov	r11, r15
    249c:	c0 2e       	mov	r12, r16
    249e:	d1 2e       	mov	r13, r17
    24a0:	e4 2c       	mov	r14, r4
    24a2:	f4 2c       	mov	r15, r4
    24a4:	04 2d       	mov	r16, r4
    24a6:	14 2d       	mov	r17, r4
    24a8:	0e 94 42 25 	call	0x4a84	; 0x4a84 <__subdi3>
    24ac:	a2 2e       	mov	r10, r18
    24ae:	b3 2e       	mov	r11, r19
    24b0:	c4 2e       	mov	r12, r20
    24b2:	d5 2e       	mov	r13, r21
    24b4:	e6 2e       	mov	r14, r22
    24b6:	f7 2e       	mov	r15, r23
    24b8:	08 2f       	mov	r16, r24
    24ba:	19 2f       	mov	r17, r25
    24bc:	2d 81       	ldd	r18, Y+5	; 0x05
    24be:	3e 81       	ldd	r19, Y+6	; 0x06
    24c0:	48 2d       	mov	r20, r8
    24c2:	59 2d       	mov	r21, r9
    24c4:	60 e0       	ldi	r22, 0x00	; 0
    24c6:	70 e0       	ldi	r23, 0x00	; 0
    24c8:	80 e0       	ldi	r24, 0x00	; 0
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	0e 94 a5 24 	call	0x494a	; 0x494a <__muldi3>
    24d0:	12 2f       	mov	r17, r18
    24d2:	3d 8b       	std	Y+21, r19	; 0x15
    24d4:	4d 83       	std	Y+5, r20	; 0x05
    24d6:	b5 2f       	mov	r27, r21
    24d8:	f6 2f       	mov	r31, r22
    24da:	e7 2f       	mov	r30, r23
    24dc:	58 2e       	mov	r5, r24
    24de:	69 2e       	mov	r6, r25
    24e0:	a0 e0       	ldi	r26, 0x00	; 0
    24e2:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <__cmpdi2_s8>
    24e6:	84 f4       	brge	.+32     	; 0x2508 <__stack+0x309>
    24e8:	21 50       	subi	r18, 0x01	; 1
    24ea:	31 09       	sbc	r19, r1
    24ec:	40 4e       	sbci	r20, 0xE0	; 224
    24ee:	5f 4f       	sbci	r21, 0xFF	; 255
    24f0:	6f 4f       	sbci	r22, 0xFF	; 255
    24f2:	7f 4f       	sbci	r23, 0xFF	; 255
    24f4:	8f 4f       	sbci	r24, 0xFF	; 255
    24f6:	9f 4f       	sbci	r25, 0xFF	; 255
    24f8:	12 2f       	mov	r17, r18
    24fa:	3d 8b       	std	Y+21, r19	; 0x15
    24fc:	4d 83       	std	Y+5, r20	; 0x05
    24fe:	b5 2f       	mov	r27, r21
    2500:	f6 2f       	mov	r31, r22
    2502:	e7 2f       	mov	r30, r23
    2504:	58 2e       	mov	r5, r24
    2506:	69 2e       	mov	r6, r25
    2508:	21 2f       	mov	r18, r17
    250a:	3d 89       	ldd	r19, Y+21	; 0x15
    250c:	4d 81       	ldd	r20, Y+5	; 0x05
    250e:	5b 2f       	mov	r21, r27
    2510:	6f 2f       	mov	r22, r31
    2512:	7e 2f       	mov	r23, r30
    2514:	85 2d       	mov	r24, r5
    2516:	96 2d       	mov	r25, r6
    2518:	05 e1       	ldi	r16, 0x15	; 21
    251a:	0e 94 0f 25 	call	0x4a1e	; 0x4a1e <__ashrdi3>
    251e:	82 2e       	mov	r8, r18
    2520:	93 2e       	mov	r9, r19
    2522:	4d 8b       	std	Y+21, r20	; 0x15
    2524:	5d 83       	std	Y+5, r21	; 0x05
    2526:	b6 2f       	mov	r27, r22
    2528:	a7 2f       	mov	r26, r23
    252a:	f8 2f       	mov	r31, r24
    252c:	e9 2f       	mov	r30, r25
    252e:	49 80       	ldd	r4, Y+1	; 0x01
    2530:	5a 80       	ldd	r5, Y+2	; 0x02
    2532:	6b 80       	ldd	r6, Y+3	; 0x03
    2534:	7c 80       	ldd	r7, Y+4	; 0x04
    2536:	77 0c       	add	r7, r7
    2538:	44 08       	sbc	r4, r4
    253a:	54 2c       	mov	r5, r4
    253c:	32 01       	movw	r6, r4
    253e:	2d 85       	ldd	r18, Y+13	; 0x0d
    2540:	3e 85       	ldd	r19, Y+14	; 0x0e
    2542:	4f 85       	ldd	r20, Y+15	; 0x0f
    2544:	58 89       	ldd	r21, Y+16	; 0x10
    2546:	69 89       	ldd	r22, Y+17	; 0x11
    2548:	7a 89       	ldd	r23, Y+18	; 0x12
    254a:	8b 89       	ldd	r24, Y+19	; 0x13
    254c:	9c 89       	ldd	r25, Y+20	; 0x14
    254e:	a9 80       	ldd	r10, Y+1	; 0x01
    2550:	ba 80       	ldd	r11, Y+2	; 0x02
    2552:	cb 80       	ldd	r12, Y+3	; 0x03
    2554:	dc 80       	ldd	r13, Y+4	; 0x04
    2556:	e4 2c       	mov	r14, r4
    2558:	f4 2c       	mov	r15, r4
    255a:	04 2d       	mov	r16, r4
    255c:	14 2d       	mov	r17, r4
    255e:	0e 94 42 25 	call	0x4a84	; 0x4a84 <__subdi3>
    2562:	a2 2e       	mov	r10, r18
    2564:	b3 2e       	mov	r11, r19
    2566:	c4 2e       	mov	r12, r20
    2568:	d5 2e       	mov	r13, r21
    256a:	e6 2e       	mov	r14, r22
    256c:	f7 2e       	mov	r15, r23
    256e:	08 2f       	mov	r16, r24
    2570:	19 2f       	mov	r17, r25
    2572:	28 2d       	mov	r18, r8
    2574:	39 2d       	mov	r19, r9
    2576:	4d 89       	ldd	r20, Y+21	; 0x15
    2578:	5d 81       	ldd	r21, Y+5	; 0x05
    257a:	6b 2f       	mov	r22, r27
    257c:	7a 2f       	mov	r23, r26
    257e:	8f 2f       	mov	r24, r31
    2580:	9e 2f       	mov	r25, r30
    2582:	0e 94 42 25 	call	0x4a84	; 0x4a84 <__subdi3>
    2586:	92 2e       	mov	r9, r18
    2588:	a3 2e       	mov	r10, r19
    258a:	b4 2e       	mov	r11, r20
    258c:	c5 2e       	mov	r12, r21
    258e:	d6 2e       	mov	r13, r22
    2590:	e7 2e       	mov	r14, r23
    2592:	78 2e       	mov	r7, r24
    2594:	89 2e       	mov	r8, r25
    2596:	a0 e0       	ldi	r26, 0x00	; 0
    2598:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <__cmpdi2_s8>
    259c:	84 f4       	brge	.+32     	; 0x25be <__stack+0x3bf>
    259e:	21 50       	subi	r18, 0x01	; 1
    25a0:	30 4e       	sbci	r19, 0xE0	; 224
    25a2:	4f 4f       	sbci	r20, 0xFF	; 255
    25a4:	5f 4f       	sbci	r21, 0xFF	; 255
    25a6:	6f 4f       	sbci	r22, 0xFF	; 255
    25a8:	7f 4f       	sbci	r23, 0xFF	; 255
    25aa:	8f 4f       	sbci	r24, 0xFF	; 255
    25ac:	9f 4f       	sbci	r25, 0xFF	; 255
    25ae:	92 2e       	mov	r9, r18
    25b0:	a3 2e       	mov	r10, r19
    25b2:	b4 2e       	mov	r11, r20
    25b4:	c5 2e       	mov	r12, r21
    25b6:	d6 2e       	mov	r13, r22
    25b8:	e7 2e       	mov	r14, r23
    25ba:	78 2e       	mov	r7, r24
    25bc:	89 2e       	mov	r8, r25
    25be:	29 2d       	mov	r18, r9
    25c0:	3a 2d       	mov	r19, r10
    25c2:	4b 2d       	mov	r20, r11
    25c4:	5c 2d       	mov	r21, r12
    25c6:	6d 2d       	mov	r22, r13
    25c8:	7e 2d       	mov	r23, r14
    25ca:	87 2d       	mov	r24, r7
    25cc:	98 2d       	mov	r25, r8
    25ce:	0d e0       	ldi	r16, 0x0D	; 13
    25d0:	0e 94 0f 25 	call	0x4a1e	; 0x4a1e <__ashrdi3>
    25d4:	d1 01       	movw	r26, r2
    25d6:	5c 96       	adiw	r26, 0x1c	; 28
    25d8:	2c 93       	st	X, r18
    25da:	5c 97       	sbiw	r26, 0x1c	; 28
    25dc:	5d 96       	adiw	r26, 0x1d	; 29
    25de:	3c 93       	st	X, r19
    25e0:	5d 97       	sbiw	r26, 0x1d	; 29
    25e2:	5e 96       	adiw	r26, 0x1e	; 30
    25e4:	4c 93       	st	X, r20
    25e6:	5e 97       	sbiw	r26, 0x1e	; 30
    25e8:	5f 96       	adiw	r26, 0x1f	; 31
    25ea:	5c 93       	st	X, r21
	}
}
    25ec:	a5 96       	adiw	r28, 0x25	; 37
    25ee:	0f b6       	in	r0, 0x3f	; 63
    25f0:	f8 94       	cli
    25f2:	de bf       	out	0x3e, r29	; 62
    25f4:	0f be       	out	0x3f, r0	; 63
    25f6:	cd bf       	out	0x3d, r28	; 61
    25f8:	df 91       	pop	r29
    25fa:	cf 91       	pop	r28
    25fc:	1f 91       	pop	r17
    25fe:	0f 91       	pop	r16
    2600:	ff 90       	pop	r15
    2602:	ef 90       	pop	r14
    2604:	df 90       	pop	r13
    2606:	cf 90       	pop	r12
    2608:	bf 90       	pop	r11
    260a:	af 90       	pop	r10
    260c:	9f 90       	pop	r9
    260e:	8f 90       	pop	r8
    2610:	7f 90       	pop	r7
    2612:	6f 90       	pop	r6
    2614:	5f 90       	pop	r5
    2616:	4f 90       	pop	r4
    2618:	3f 90       	pop	r3
    261a:	2f 90       	pop	r2
    261c:	08 95       	ret

0000261e <_ZN6MS58378pressureEf>:

float MS5837::pressure(float conversion) {
    261e:	cf 92       	push	r12
    2620:	df 92       	push	r13
    2622:	ef 92       	push	r14
    2624:	ff 92       	push	r15
    2626:	6a 01       	movw	r12, r20
    2628:	7b 01       	movw	r14, r22
	if ( _model == MS5837_02BA ) {
    262a:	fc 01       	movw	r30, r24
    262c:	20 a1       	ldd	r18, Z+32	; 0x20
    262e:	21 30       	cpi	r18, 0x01	; 1
    2630:	89 f4       	brne	.+34     	; 0x2654 <_ZN6MS58378pressureEf+0x36>
		return P*conversion/100.0f;
    2632:	64 8d       	ldd	r22, Z+28	; 0x1c
    2634:	75 8d       	ldd	r23, Z+29	; 0x1d
    2636:	86 8d       	ldd	r24, Z+30	; 0x1e
    2638:	97 8d       	ldd	r25, Z+31	; 0x1f
    263a:	0e 94 3c 23 	call	0x4678	; 0x4678 <__floatsisf>
    263e:	a7 01       	movw	r20, r14
    2640:	96 01       	movw	r18, r12
    2642:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <__mulsf3>
    2646:	20 e0       	ldi	r18, 0x00	; 0
    2648:	30 e0       	ldi	r19, 0x00	; 0
    264a:	48 ec       	ldi	r20, 0xC8	; 200
    264c:	52 e4       	ldi	r21, 0x42	; 66
    264e:	0e 94 a6 22 	call	0x454c	; 0x454c <__divsf3>
    2652:	11 c0       	rjmp	.+34     	; 0x2676 <_ZN6MS58378pressureEf+0x58>
	}
	else {
		return P*conversion/10.0f;
    2654:	fc 01       	movw	r30, r24
    2656:	64 8d       	ldd	r22, Z+28	; 0x1c
    2658:	75 8d       	ldd	r23, Z+29	; 0x1d
    265a:	86 8d       	ldd	r24, Z+30	; 0x1e
    265c:	97 8d       	ldd	r25, Z+31	; 0x1f
    265e:	0e 94 3c 23 	call	0x4678	; 0x4678 <__floatsisf>
    2662:	a7 01       	movw	r20, r14
    2664:	96 01       	movw	r18, r12
    2666:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <__mulsf3>
    266a:	20 e0       	ldi	r18, 0x00	; 0
    266c:	30 e0       	ldi	r19, 0x00	; 0
    266e:	40 e2       	ldi	r20, 0x20	; 32
    2670:	51 e4       	ldi	r21, 0x41	; 65
    2672:	0e 94 a6 22 	call	0x454c	; 0x454c <__divsf3>
	}
}
    2676:	ff 90       	pop	r15
    2678:	ef 90       	pop	r14
    267a:	df 90       	pop	r13
    267c:	cf 90       	pop	r12
    267e:	08 95       	ret

00002680 <_ZN6MS583711temperatureEv>:

float MS5837::temperature() {
	return TEMP/100.0f;
    2680:	fc 01       	movw	r30, r24
    2682:	60 8d       	ldd	r22, Z+24	; 0x18
    2684:	71 8d       	ldd	r23, Z+25	; 0x19
    2686:	82 8d       	ldd	r24, Z+26	; 0x1a
    2688:	93 8d       	ldd	r25, Z+27	; 0x1b
    268a:	0e 94 3c 23 	call	0x4678	; 0x4678 <__floatsisf>
    268e:	20 e0       	ldi	r18, 0x00	; 0
    2690:	30 e0       	ldi	r19, 0x00	; 0
    2692:	48 ec       	ldi	r20, 0xC8	; 200
    2694:	52 e4       	ldi	r21, 0x42	; 66
    2696:	0c 94 a6 22 	jmp	0x454c	; 0x454c <__divsf3>
}
    269a:	08 95       	ret

0000269c <_ZN6MS58374crc4EPj>:
float MS5837::altitude() {
	return (1-pow((pressure()/1013.25),.190284))*145366.45*.3048;
}*/


uint8_t MS5837::crc4(uint16_t n_prom[]) {
    269c:	cf 93       	push	r28
    269e:	df 93       	push	r29
    26a0:	eb 01       	movw	r28, r22
	uint16_t n_rem = 0;

	n_prom[0] = ((n_prom[0]) & 0x0FFF);
    26a2:	88 81       	ld	r24, Y
    26a4:	99 81       	ldd	r25, Y+1	; 0x01
    26a6:	9f 70       	andi	r25, 0x0F	; 15
    26a8:	99 83       	std	Y+1, r25	; 0x01
    26aa:	88 83       	st	Y, r24
	n_prom[7] = 0;
    26ac:	1f 86       	std	Y+15, r1	; 0x0f
    26ae:	1e 86       	std	Y+14, r1	; 0x0e
    26b0:	40 e0       	ldi	r20, 0x00	; 0
    26b2:	50 e0       	ldi	r21, 0x00	; 0
	return (1-pow((pressure()/1013.25),.190284))*145366.45*.3048;
}*/


uint8_t MS5837::crc4(uint16_t n_prom[]) {
	uint16_t n_rem = 0;
    26b4:	80 e0       	ldi	r24, 0x00	; 0
    26b6:	90 e0       	ldi	r25, 0x00	; 0

	n_prom[0] = ((n_prom[0]) & 0x0FFF);
	n_prom[7] = 0;

	for ( uint8_t i = 0 ; i < 16; i++ ) {
		if ( i%2 == 1 ) {
    26b8:	40 ff       	sbrs	r20, 0
    26ba:	07 c0       	rjmp	.+14     	; 0x26ca <_ZN6MS58374crc4EPj+0x2e>
			n_rem ^= (uint16_t)((n_prom[i>>1]) & 0x00FF);
    26bc:	fa 01       	movw	r30, r20
    26be:	ee 7f       	andi	r30, 0xFE	; 254
    26c0:	ec 0f       	add	r30, r28
    26c2:	fd 1f       	adc	r31, r29
    26c4:	20 81       	ld	r18, Z
    26c6:	82 27       	eor	r24, r18
    26c8:	1d c0       	rjmp	.+58     	; 0x2704 <_ZN6MS58374crc4EPj+0x68>
			} else {
			n_rem ^= (uint16_t)(n_prom[i>>1] >> 8);
    26ca:	fa 01       	movw	r30, r20
    26cc:	ee 7f       	andi	r30, 0xFE	; 254
    26ce:	ec 0f       	add	r30, r28
    26d0:	fd 1f       	adc	r31, r29
    26d2:	a1 81       	ldd	r26, Z+1	; 0x01
    26d4:	b0 e0       	ldi	r27, 0x00	; 0
    26d6:	8a 27       	eor	r24, r26
    26d8:	9b 27       	eor	r25, r27
    26da:	14 c0       	rjmp	.+40     	; 0x2704 <_ZN6MS58374crc4EPj+0x68>
		}
		for ( uint8_t n_bit = 8 ; n_bit > 0 ; n_bit-- ) {
			if ( n_rem & 0x8000 ) {
    26dc:	99 23       	and	r25, r25
    26de:	2c f4       	brge	.+10     	; 0x26ea <_ZN6MS58374crc4EPj+0x4e>
				n_rem = (n_rem << 1) ^ 0x3000;
    26e0:	88 0f       	add	r24, r24
    26e2:	99 1f       	adc	r25, r25
    26e4:	30 e3       	ldi	r19, 0x30	; 48
    26e6:	93 27       	eor	r25, r19
    26e8:	02 c0       	rjmp	.+4      	; 0x26ee <_ZN6MS58374crc4EPj+0x52>
				} else {
				n_rem = (n_rem << 1);
    26ea:	88 0f       	add	r24, r24
    26ec:	99 1f       	adc	r25, r25
    26ee:	21 50       	subi	r18, 0x01	; 1
		if ( i%2 == 1 ) {
			n_rem ^= (uint16_t)((n_prom[i>>1]) & 0x00FF);
			} else {
			n_rem ^= (uint16_t)(n_prom[i>>1] >> 8);
		}
		for ( uint8_t n_bit = 8 ; n_bit > 0 ; n_bit-- ) {
    26f0:	a9 f7       	brne	.-22     	; 0x26dc <_ZN6MS58374crc4EPj+0x40>
    26f2:	4f 5f       	subi	r20, 0xFF	; 255
    26f4:	5f 4f       	sbci	r21, 0xFF	; 255
	uint16_t n_rem = 0;

	n_prom[0] = ((n_prom[0]) & 0x0FFF);
	n_prom[7] = 0;

	for ( uint8_t i = 0 ; i < 16; i++ ) {
    26f6:	40 31       	cpi	r20, 0x10	; 16
    26f8:	51 05       	cpc	r21, r1
    26fa:	f1 f6       	brne	.-68     	; 0x26b8 <_ZN6MS58374crc4EPj+0x1c>
		}
	}
	
	n_rem = ((n_rem >> 12) & 0x000F);

	return n_rem ^ 0x00;
    26fc:	89 2f       	mov	r24, r25
    26fe:	82 95       	swap	r24
    2700:	8f 70       	andi	r24, 0x0F	; 15
    2702:	02 c0       	rjmp	.+4      	; 0x2708 <_ZN6MS58374crc4EPj+0x6c>
	return (1-pow((pressure()/1013.25),.190284))*145366.45*.3048;
}*/


uint8_t MS5837::crc4(uint16_t n_prom[]) {
	uint16_t n_rem = 0;
    2704:	28 e0       	ldi	r18, 0x08	; 8
    2706:	ea cf       	rjmp	.-44     	; 0x26dc <_ZN6MS58374crc4EPj+0x40>
	}
	
	n_rem = ((n_rem >> 12) & 0x000F);

	return n_rem ^ 0x00;
    2708:	df 91       	pop	r29
    270a:	cf 91       	pop	r28
    270c:	08 95       	ret

0000270e <_ZN6MS58375beginEv>:

MS5837::MS5837(HardwareTimer &timer) : _timer(&timer) {
	fluidDensity = 1029;
}

bool MS5837::begin() {
    270e:	cf 92       	push	r12
    2710:	df 92       	push	r13
    2712:	ef 92       	push	r14
    2714:	ff 92       	push	r15
    2716:	0f 93       	push	r16
    2718:	1f 93       	push	r17
    271a:	cf 93       	push	r28
    271c:	df 93       	push	r29
    271e:	6c 01       	movw	r12, r24
	Wire.begin();
    2720:	8e eb       	ldi	r24, 0xBE	; 190
    2722:	97 e0       	ldi	r25, 0x07	; 7
    2724:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <_ZN7TwoWire5beginEv>
	_timer->beginMs(10);
    2728:	40 e0       	ldi	r20, 0x00	; 0
    272a:	50 e0       	ldi	r21, 0x00	; 0
    272c:	60 e2       	ldi	r22, 0x20	; 32
    272e:	71 e4       	ldi	r23, 0x41	; 65
    2730:	f6 01       	movw	r30, r12
    2732:	82 a1       	ldd	r24, Z+34	; 0x22
    2734:	93 a1       	ldd	r25, Z+35	; 0x23
    2736:	3c d6       	rcall	.+3192   	; 0x33b0 <_ZN13HardwareTimer7beginMsEf>
	
	// Reset the MS5837, per datasheet
	Wire.beginTransmission(MS5837_ADDR);
    2738:	66 e7       	ldi	r22, 0x76	; 118
    273a:	70 e0       	ldi	r23, 0x00	; 0
    273c:	8e eb       	ldi	r24, 0xBE	; 190
    273e:	97 e0       	ldi	r25, 0x07	; 7
    2740:	0e 94 ee 1d 	call	0x3bdc	; 0x3bdc <_ZN7TwoWire17beginTransmissionEi>
    2744:	e0 91 be 07 	lds	r30, 0x07BE	; 0x8007be <Wire>
    2748:	f0 91 bf 07 	lds	r31, 0x07BF	; 0x8007bf <Wire+0x1>
    274c:	01 90       	ld	r0, Z+
    274e:	f0 81       	ld	r31, Z
    2750:	e0 2d       	mov	r30, r0
    2752:	6e e1       	ldi	r22, 0x1E	; 30
    2754:	8e eb       	ldi	r24, 0xBE	; 190
    2756:	97 e0       	ldi	r25, 0x07	; 7
    2758:	19 95       	eicall
	Wire.write(MS5837_RESET);
	Wire.endTransmission();
    275a:	8e eb       	ldi	r24, 0xBE	; 190
    275c:	97 e0       	ldi	r25, 0x07	; 7
    275e:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <_ZN7TwoWire15endTransmissionEv>

	// Wait for reset to complete
	//_delay_ms(10);
	_timer->start(1);
    2762:	61 e0       	ldi	r22, 0x01	; 1
    2764:	f6 01       	movw	r30, r12
    2766:	82 a1       	ldd	r24, Z+34	; 0x22
    2768:	93 a1       	ldd	r25, Z+35	; 0x23
    276a:	91 d6       	rcall	.+3362   	; 0x348e <_ZN13HardwareTimer5startEh>
	_timer->waitForFinish();
    276c:	f6 01       	movw	r30, r12
    276e:	82 a1       	ldd	r24, Z+34	; 0x22
    2770:	93 a1       	ldd	r25, Z+35	; 0x23
    2772:	a1 d6       	rcall	.+3394   	; 0x34b6 <_ZN13HardwareTimer13waitForFinishEv>
    2774:	76 01       	movw	r14, r12
    2776:	c0 ea       	ldi	r28, 0xA0	; 160

	// Read calibration values and CRC
	for ( uint8_t i = 0 ; i < 7 ; i++ ) {
		Wire.beginTransmission(MS5837_ADDR);
    2778:	66 e7       	ldi	r22, 0x76	; 118
    277a:	70 e0       	ldi	r23, 0x00	; 0
    277c:	8e eb       	ldi	r24, 0xBE	; 190
    277e:	97 e0       	ldi	r25, 0x07	; 7
    2780:	0e 94 ee 1d 	call	0x3bdc	; 0x3bdc <_ZN7TwoWire17beginTransmissionEi>
    2784:	e0 91 be 07 	lds	r30, 0x07BE	; 0x8007be <Wire>
    2788:	f0 91 bf 07 	lds	r31, 0x07BF	; 0x8007bf <Wire+0x1>
    278c:	01 90       	ld	r0, Z+
    278e:	f0 81       	ld	r31, Z
    2790:	e0 2d       	mov	r30, r0
    2792:	6c 2f       	mov	r22, r28
    2794:	8e eb       	ldi	r24, 0xBE	; 190
    2796:	97 e0       	ldi	r25, 0x07	; 7
    2798:	19 95       	eicall
		Wire.write(MS5837_PROM_READ+i*2);
		Wire.endTransmission();
    279a:	8e eb       	ldi	r24, 0xBE	; 190
    279c:	97 e0       	ldi	r25, 0x07	; 7
    279e:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <_ZN7TwoWire15endTransmissionEv>

		Wire.requestFrom(MS5837_ADDR,2);
    27a2:	42 e0       	ldi	r20, 0x02	; 2
    27a4:	50 e0       	ldi	r21, 0x00	; 0
    27a6:	66 e7       	ldi	r22, 0x76	; 118
    27a8:	70 e0       	ldi	r23, 0x00	; 0
    27aa:	8e eb       	ldi	r24, 0xBE	; 190
    27ac:	97 e0       	ldi	r25, 0x07	; 7
    27ae:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <_ZN7TwoWire11requestFromEii>
		C[i] = (Wire.read() << 8) | Wire.read();
    27b2:	8e eb       	ldi	r24, 0xBE	; 190
    27b4:	97 e0       	ldi	r25, 0x07	; 7
    27b6:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <_ZN7TwoWire4readEv>
    27ba:	d8 2f       	mov	r29, r24
    27bc:	8e eb       	ldi	r24, 0xBE	; 190
    27be:	97 e0       	ldi	r25, 0x07	; 7
    27c0:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <_ZN7TwoWire4readEv>
    27c4:	1d 2f       	mov	r17, r29
    27c6:	00 e0       	ldi	r16, 0x00	; 0
    27c8:	80 2b       	or	r24, r16
    27ca:	91 2b       	or	r25, r17
    27cc:	f7 01       	movw	r30, r14
    27ce:	81 93       	st	Z+, r24
    27d0:	91 93       	st	Z+, r25
    27d2:	7f 01       	movw	r14, r30
    27d4:	ce 5f       	subi	r28, 0xFE	; 254
	//_delay_ms(10);
	_timer->start(1);
	_timer->waitForFinish();

	// Read calibration values and CRC
	for ( uint8_t i = 0 ; i < 7 ; i++ ) {
    27d6:	ce 3a       	cpi	r28, 0xAE	; 174
    27d8:	79 f6       	brne	.-98     	; 0x2778 <_ZN6MS58375beginEv+0x6a>
		Wire.requestFrom(MS5837_ADDR,2);
		C[i] = (Wire.read() << 8) | Wire.read();
	}

	// Verify that data is correct with CRC
	uint8_t crcRead = C[0] >> 12;
    27da:	f6 01       	movw	r30, r12
    27dc:	c1 81       	ldd	r28, Z+1	; 0x01
    27de:	c2 95       	swap	r28
	uint8_t crcCalculated = crc4(C);
    27e0:	cf 70       	andi	r28, 0x0F	; 15
    27e2:	b6 01       	movw	r22, r12
    27e4:	c6 01       	movw	r24, r12
    27e6:	5a df       	rcall	.-332    	; 0x269c <_ZN6MS58374crc4EPj>
    27e8:	91 e0       	ldi	r25, 0x01	; 1
    27ea:	c8 13       	cpse	r28, r24
    27ec:	90 e0       	ldi	r25, 0x00	; 0
	if ( crcCalculated == crcRead ) {
		return true; // Initialization success
	}

	return false; // CRC fail
}
    27ee:	89 2f       	mov	r24, r25
    27f0:	df 91       	pop	r29
    27f2:	cf 91       	pop	r28
    27f4:	1f 91       	pop	r17
    27f6:	0f 91       	pop	r16
    27f8:	ff 90       	pop	r15
    27fa:	ef 90       	pop	r14
    27fc:	df 90       	pop	r13
    27fe:	cf 90       	pop	r12
    2800:	08 95       	ret

00002802 <_ZN6MS58376updateEv>:
	}else{
		return false;
	}
}

void MS5837::update(){
    2802:	8f 92       	push	r8
    2804:	9f 92       	push	r9
    2806:	af 92       	push	r10
    2808:	bf 92       	push	r11
    280a:	cf 92       	push	r12
    280c:	df 92       	push	r13
    280e:	ef 92       	push	r14
    2810:	ff 92       	push	r15
    2812:	0f 93       	push	r16
    2814:	1f 93       	push	r17
    2816:	cf 93       	push	r28
    2818:	df 93       	push	r29
	if(_state != STATE_FINISHED){
    281a:	dc 01       	movw	r26, r24
    281c:	91 96       	adiw	r26, 0x21	; 33
    281e:	2c 91       	ld	r18, X
    2820:	22 23       	and	r18, r18
    2822:	09 f4       	brne	.+2      	; 0x2826 <_ZN6MS58376updateEv+0x24>
    2824:	cf c0       	rjmp	.+414    	; 0x29c4 <_ZN6MS58376updateEv+0x1c2>
    2826:	ec 01       	movw	r28, r24
		if(_timer->finished()){
    2828:	8a a1       	ldd	r24, Y+34	; 0x22
    282a:	9b a1       	ldd	r25, Y+35	; 0x23
    282c:	3e d6       	rcall	.+3196   	; 0x34aa <_ZN13HardwareTimer8finishedEv>
    282e:	88 23       	and	r24, r24
    2830:	09 f4       	brne	.+2      	; 0x2834 <_ZN6MS58376updateEv+0x32>
    2832:	c8 c0       	rjmp	.+400    	; 0x29c4 <_ZN6MS58376updateEv+0x1c2>
			if(_state == STATE_READ_D1){
    2834:	89 a1       	ldd	r24, Y+33	; 0x21
    2836:	81 30       	cpi	r24, 0x01	; 1
    2838:	09 f0       	breq	.+2      	; 0x283c <_ZN6MS58376updateEv+0x3a>
    283a:	68 c0       	rjmp	.+208    	; 0x290c <_ZN6MS58376updateEv+0x10a>
				//Read D1 conversion and Request D2 conversion
				Wire.beginTransmission(MS5837_ADDR);
    283c:	66 e7       	ldi	r22, 0x76	; 118
    283e:	70 e0       	ldi	r23, 0x00	; 0
    2840:	8e eb       	ldi	r24, 0xBE	; 190
    2842:	97 e0       	ldi	r25, 0x07	; 7
    2844:	0e 94 ee 1d 	call	0x3bdc	; 0x3bdc <_ZN7TwoWire17beginTransmissionEi>
    2848:	0e eb       	ldi	r16, 0xBE	; 190
    284a:	17 e0       	ldi	r17, 0x07	; 7
    284c:	d8 01       	movw	r26, r16
    284e:	ed 91       	ld	r30, X+
    2850:	fc 91       	ld	r31, X
    2852:	01 90       	ld	r0, Z+
    2854:	f0 81       	ld	r31, Z
    2856:	e0 2d       	mov	r30, r0
    2858:	60 e0       	ldi	r22, 0x00	; 0
    285a:	c8 01       	movw	r24, r16
    285c:	19 95       	eicall
				Wire.write(MS5837_ADC_READ);
				Wire.endTransmission();
    285e:	c8 01       	movw	r24, r16
    2860:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <_ZN7TwoWire15endTransmissionEv>

				Wire.requestFrom(MS5837_ADDR,3);
    2864:	43 e0       	ldi	r20, 0x03	; 3
    2866:	50 e0       	ldi	r21, 0x00	; 0
    2868:	66 e7       	ldi	r22, 0x76	; 118
    286a:	70 e0       	ldi	r23, 0x00	; 0
    286c:	c8 01       	movw	r24, r16
    286e:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <_ZN7TwoWire11requestFromEii>
				D1 = 0;
    2872:	18 8a       	std	Y+16, r1	; 0x10
    2874:	19 8a       	std	Y+17, r1	; 0x11
    2876:	1a 8a       	std	Y+18, r1	; 0x12
    2878:	1b 8a       	std	Y+19, r1	; 0x13
				D1 = Wire.read();
    287a:	c8 01       	movw	r24, r16
    287c:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <_ZN7TwoWire4readEv>
    2880:	4c 01       	movw	r8, r24
    2882:	99 0f       	add	r25, r25
    2884:	aa 08       	sbc	r10, r10
    2886:	bb 08       	sbc	r11, r11
    2888:	88 8a       	std	Y+16, r8	; 0x10
    288a:	99 8a       	std	Y+17, r9	; 0x11
    288c:	aa 8a       	std	Y+18, r10	; 0x12
    288e:	bb 8a       	std	Y+19, r11	; 0x13
				D1 = (D1 << 8) | Wire.read();
    2890:	c8 01       	movw	r24, r16
    2892:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <_ZN7TwoWire4readEv>
    2896:	ba 2c       	mov	r11, r10
    2898:	a9 2c       	mov	r10, r9
    289a:	98 2c       	mov	r9, r8
    289c:	88 24       	eor	r8, r8
    289e:	6c 01       	movw	r12, r24
    28a0:	99 0f       	add	r25, r25
    28a2:	ee 08       	sbc	r14, r14
    28a4:	ff 08       	sbc	r15, r15
    28a6:	c8 28       	or	r12, r8
    28a8:	d9 28       	or	r13, r9
    28aa:	ea 28       	or	r14, r10
    28ac:	fb 28       	or	r15, r11
    28ae:	c8 8a       	std	Y+16, r12	; 0x10
    28b0:	d9 8a       	std	Y+17, r13	; 0x11
    28b2:	ea 8a       	std	Y+18, r14	; 0x12
    28b4:	fb 8a       	std	Y+19, r15	; 0x13
				D1 = (D1 << 8) | Wire.read();
    28b6:	c8 01       	movw	r24, r16
    28b8:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <_ZN7TwoWire4readEv>
    28bc:	fe 2c       	mov	r15, r14
    28be:	ed 2c       	mov	r14, r13
    28c0:	dc 2c       	mov	r13, r12
    28c2:	cc 24       	eor	r12, r12
    28c4:	09 2e       	mov	r0, r25
    28c6:	00 0c       	add	r0, r0
    28c8:	aa 0b       	sbc	r26, r26
    28ca:	bb 0b       	sbc	r27, r27
    28cc:	c8 2a       	or	r12, r24
    28ce:	d9 2a       	or	r13, r25
    28d0:	ea 2a       	or	r14, r26
    28d2:	fb 2a       	or	r15, r27
    28d4:	c8 8a       	std	Y+16, r12	; 0x10
    28d6:	d9 8a       	std	Y+17, r13	; 0x11
    28d8:	ea 8a       	std	Y+18, r14	; 0x12
    28da:	fb 8a       	std	Y+19, r15	; 0x13
		
				// Request D2 conversion
				Wire.beginTransmission(MS5837_ADDR);
    28dc:	66 e7       	ldi	r22, 0x76	; 118
    28de:	70 e0       	ldi	r23, 0x00	; 0
    28e0:	c8 01       	movw	r24, r16
    28e2:	0e 94 ee 1d 	call	0x3bdc	; 0x3bdc <_ZN7TwoWire17beginTransmissionEi>
    28e6:	d8 01       	movw	r26, r16
    28e8:	ed 91       	ld	r30, X+
    28ea:	fc 91       	ld	r31, X
    28ec:	01 90       	ld	r0, Z+
    28ee:	f0 81       	ld	r31, Z
    28f0:	e0 2d       	mov	r30, r0
    28f2:	6a e5       	ldi	r22, 0x5A	; 90
    28f4:	c8 01       	movw	r24, r16
    28f6:	19 95       	eicall
				Wire.write(MS5837_CONVERT_D2_8192);
				Wire.endTransmission();
    28f8:	c8 01       	movw	r24, r16
    28fa:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <_ZN7TwoWire15endTransmissionEv>

				Timer0.start(2);
    28fe:	62 e0       	ldi	r22, 0x02	; 2
    2900:	84 e4       	ldi	r24, 0x44	; 68
    2902:	97 e0       	ldi	r25, 0x07	; 7
    2904:	c4 d5       	rcall	.+2952   	; 0x348e <_ZN13HardwareTimer5startEh>
				_state = STATE_READ_D2;
    2906:	82 e0       	ldi	r24, 0x02	; 2
    2908:	89 a3       	std	Y+33, r24	; 0x21
    290a:	5c c0       	rjmp	.+184    	; 0x29c4 <_ZN6MS58376updateEv+0x1c2>
			}else if(_state == STATE_READ_D2){
    290c:	82 30       	cpi	r24, 0x02	; 2
    290e:	09 f0       	breq	.+2      	; 0x2912 <_ZN6MS58376updateEv+0x110>
    2910:	59 c0       	rjmp	.+178    	; 0x29c4 <_ZN6MS58376updateEv+0x1c2>
				// Read D2 conversion and calculate readings
				Wire.beginTransmission(MS5837_ADDR);
    2912:	66 e7       	ldi	r22, 0x76	; 118
    2914:	70 e0       	ldi	r23, 0x00	; 0
    2916:	8e eb       	ldi	r24, 0xBE	; 190
    2918:	97 e0       	ldi	r25, 0x07	; 7
    291a:	0e 94 ee 1d 	call	0x3bdc	; 0x3bdc <_ZN7TwoWire17beginTransmissionEi>
    291e:	e0 91 be 07 	lds	r30, 0x07BE	; 0x8007be <Wire>
    2922:	f0 91 bf 07 	lds	r31, 0x07BF	; 0x8007bf <Wire+0x1>
    2926:	01 90       	ld	r0, Z+
    2928:	f0 81       	ld	r31, Z
    292a:	e0 2d       	mov	r30, r0
    292c:	60 e0       	ldi	r22, 0x00	; 0
    292e:	8e eb       	ldi	r24, 0xBE	; 190
    2930:	97 e0       	ldi	r25, 0x07	; 7
    2932:	19 95       	eicall
				Wire.write(MS5837_ADC_READ);
				Wire.endTransmission();
    2934:	8e eb       	ldi	r24, 0xBE	; 190
    2936:	97 e0       	ldi	r25, 0x07	; 7
    2938:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <_ZN7TwoWire15endTransmissionEv>

				Wire.requestFrom(MS5837_ADDR,3);
    293c:	43 e0       	ldi	r20, 0x03	; 3
    293e:	50 e0       	ldi	r21, 0x00	; 0
    2940:	66 e7       	ldi	r22, 0x76	; 118
    2942:	70 e0       	ldi	r23, 0x00	; 0
    2944:	8e eb       	ldi	r24, 0xBE	; 190
    2946:	97 e0       	ldi	r25, 0x07	; 7
    2948:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <_ZN7TwoWire11requestFromEii>
				D2 = 0;
    294c:	1c 8a       	std	Y+20, r1	; 0x14
    294e:	1d 8a       	std	Y+21, r1	; 0x15
    2950:	1e 8a       	std	Y+22, r1	; 0x16
    2952:	1f 8a       	std	Y+23, r1	; 0x17
				D2 = Wire.read();
    2954:	8e eb       	ldi	r24, 0xBE	; 190
    2956:	97 e0       	ldi	r25, 0x07	; 7
    2958:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <_ZN7TwoWire4readEv>
    295c:	4c 01       	movw	r8, r24
    295e:	99 0f       	add	r25, r25
    2960:	aa 08       	sbc	r10, r10
    2962:	bb 08       	sbc	r11, r11
    2964:	8c 8a       	std	Y+20, r8	; 0x14
    2966:	9d 8a       	std	Y+21, r9	; 0x15
    2968:	ae 8a       	std	Y+22, r10	; 0x16
    296a:	bf 8a       	std	Y+23, r11	; 0x17
				D2 = (D2 << 8) | Wire.read();
    296c:	8e eb       	ldi	r24, 0xBE	; 190
    296e:	97 e0       	ldi	r25, 0x07	; 7
    2970:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <_ZN7TwoWire4readEv>
    2974:	ba 2c       	mov	r11, r10
    2976:	a9 2c       	mov	r10, r9
    2978:	98 2c       	mov	r9, r8
    297a:	88 24       	eor	r8, r8
    297c:	6c 01       	movw	r12, r24
    297e:	99 0f       	add	r25, r25
    2980:	ee 08       	sbc	r14, r14
    2982:	ff 08       	sbc	r15, r15
    2984:	c8 28       	or	r12, r8
    2986:	d9 28       	or	r13, r9
    2988:	ea 28       	or	r14, r10
    298a:	fb 28       	or	r15, r11
    298c:	cc 8a       	std	Y+20, r12	; 0x14
    298e:	dd 8a       	std	Y+21, r13	; 0x15
    2990:	ee 8a       	std	Y+22, r14	; 0x16
    2992:	ff 8a       	std	Y+23, r15	; 0x17
				D2 = (D2 << 8) | Wire.read();
    2994:	8e eb       	ldi	r24, 0xBE	; 190
    2996:	97 e0       	ldi	r25, 0x07	; 7
    2998:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <_ZN7TwoWire4readEv>
    299c:	fe 2c       	mov	r15, r14
    299e:	ed 2c       	mov	r14, r13
    29a0:	dc 2c       	mov	r13, r12
    29a2:	cc 24       	eor	r12, r12
    29a4:	09 2e       	mov	r0, r25
    29a6:	00 0c       	add	r0, r0
    29a8:	aa 0b       	sbc	r26, r26
    29aa:	bb 0b       	sbc	r27, r27
    29ac:	c8 2a       	or	r12, r24
    29ae:	d9 2a       	or	r13, r25
    29b0:	ea 2a       	or	r14, r26
    29b2:	fb 2a       	or	r15, r27
    29b4:	cc 8a       	std	Y+20, r12	; 0x14
    29b6:	dd 8a       	std	Y+21, r13	; 0x15
    29b8:	ee 8a       	std	Y+22, r14	; 0x16
    29ba:	ff 8a       	std	Y+23, r15	; 0x17

				calculate();
    29bc:	ce 01       	movw	r24, r28
    29be:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <_ZN6MS58379calculateEv>
				_state = STATE_FINISHED;
    29c2:	19 a2       	std	Y+33, r1	; 0x21
			}
		}
	}
}
    29c4:	df 91       	pop	r29
    29c6:	cf 91       	pop	r28
    29c8:	1f 91       	pop	r17
    29ca:	0f 91       	pop	r16
    29cc:	ff 90       	pop	r15
    29ce:	ef 90       	pop	r14
    29d0:	df 90       	pop	r13
    29d2:	cf 90       	pop	r12
    29d4:	bf 90       	pop	r11
    29d6:	af 90       	pop	r10
    29d8:	9f 90       	pop	r9
    29da:	8f 90       	pop	r8
    29dc:	08 95       	ret

000029de <_ZN7PCA9685C1Eh>:
#define FREQUENCY_OSCILLATOR 25000000 /**< Int. osc. frequency in datasheet */

#define PCA9685_PRESCALE_MIN 3   /**< minimum prescale value */
#define PCA9685_PRESCALE_MAX 255 /**< maximum prescale value */

PCA9685::PCA9685(const uint8_t addr) : _addr(addr){
    29de:	fc 01       	movw	r30, r24
    29e0:	60 83       	st	Z, r22
    29e2:	08 95       	ret

000029e4 <_ZN18TwiServoControllerC1Eh>:

#include "TwiServoController.h"
#include "../Utils/CpuFreq.h"
#include <util/delay.h>

TwiServoController::TwiServoController(const uint8_t addr) : controller(addr){
    29e4:	fc cf       	rjmp	.-8      	; 0x29de <_ZN7PCA9685C1Eh>
    29e6:	08 95       	ret

000029e8 <_ZN14HardwareSerial9availableEv>:
	#endif
	#if defined(HAVE_HWSERIAL2)
	if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
	#endif
	#if defined(HAVE_HWSERIAL3)
	if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    29e8:	fc 01       	movw	r30, r24
    29ea:	97 85       	ldd	r25, Z+15	; 0x0f
    29ec:	20 89       	ldd	r18, Z+16	; 0x10
    29ee:	89 2f       	mov	r24, r25
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	80 5c       	subi	r24, 0xC0	; 192
    29f4:	9f 4f       	sbci	r25, 0xFF	; 255
    29f6:	82 1b       	sub	r24, r18
    29f8:	91 09       	sbc	r25, r1
    29fa:	8f 73       	andi	r24, 0x3F	; 63
    29fc:	99 27       	eor	r25, r25
    29fe:	08 95       	ret

00002a00 <_ZN14HardwareSerial4peekEv>:
    2a00:	fc 01       	movw	r30, r24
    2a02:	97 85       	ldd	r25, Z+15	; 0x0f
    2a04:	80 89       	ldd	r24, Z+16	; 0x10
    2a06:	98 17       	cp	r25, r24
    2a08:	31 f0       	breq	.+12     	; 0x2a16 <_ZN14HardwareSerial4peekEv+0x16>
    2a0a:	80 89       	ldd	r24, Z+16	; 0x10
    2a0c:	e8 0f       	add	r30, r24
    2a0e:	f1 1d       	adc	r31, r1
    2a10:	83 89       	ldd	r24, Z+19	; 0x13
    2a12:	90 e0       	ldi	r25, 0x00	; 0
    2a14:	08 95       	ret
    2a16:	8f ef       	ldi	r24, 0xFF	; 255
    2a18:	9f ef       	ldi	r25, 0xFF	; 255
    2a1a:	08 95       	ret

00002a1c <_ZN14HardwareSerial4readEv>:
    2a1c:	fc 01       	movw	r30, r24
    2a1e:	97 85       	ldd	r25, Z+15	; 0x0f
    2a20:	80 89       	ldd	r24, Z+16	; 0x10
    2a22:	98 17       	cp	r25, r24
    2a24:	61 f0       	breq	.+24     	; 0x2a3e <_ZN14HardwareSerial4readEv+0x22>
    2a26:	80 89       	ldd	r24, Z+16	; 0x10
    2a28:	df 01       	movw	r26, r30
    2a2a:	a8 0f       	add	r26, r24
    2a2c:	b1 1d       	adc	r27, r1
    2a2e:	53 96       	adiw	r26, 0x13	; 19
    2a30:	8c 91       	ld	r24, X
    2a32:	90 89       	ldd	r25, Z+16	; 0x10
    2a34:	9f 5f       	subi	r25, 0xFF	; 255
    2a36:	9f 73       	andi	r25, 0x3F	; 63
    2a38:	90 8b       	std	Z+16, r25	; 0x10
    2a3a:	90 e0       	ldi	r25, 0x00	; 0
    2a3c:	08 95       	ret
    2a3e:	8f ef       	ldi	r24, 0xFF	; 255
    2a40:	9f ef       	ldi	r25, 0xFF	; 255
    2a42:	08 95       	ret

00002a44 <_ZN14HardwareSerial17availableForWriteEv>:
    2a44:	fc 01       	movw	r30, r24
    2a46:	21 89       	ldd	r18, Z+17	; 0x11
    2a48:	32 89       	ldd	r19, Z+18	; 0x12
    2a4a:	23 17       	cp	r18, r19
    2a4c:	38 f0       	brcs	.+14     	; 0x2a5c <_ZN14HardwareSerial17availableForWriteEv+0x18>
    2a4e:	8f e3       	ldi	r24, 0x3F	; 63
    2a50:	90 e0       	ldi	r25, 0x00	; 0
    2a52:	82 1b       	sub	r24, r18
    2a54:	91 09       	sbc	r25, r1
    2a56:	83 0f       	add	r24, r19
    2a58:	91 1d       	adc	r25, r1
    2a5a:	08 95       	ret
    2a5c:	83 2f       	mov	r24, r19
    2a5e:	90 e0       	ldi	r25, 0x00	; 0
    2a60:	82 1b       	sub	r24, r18
    2a62:	91 09       	sbc	r25, r1
    2a64:	01 97       	sbiw	r24, 0x01	; 1
    2a66:	08 95       	ret

00002a68 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    2a68:	fc 01       	movw	r30, r24
	// If interrupts are enabled, there must be more data in the output
	// buffer. Send the next byte
	unsigned char c = _tx_buffer[_tx_buffer_tail];
    2a6a:	82 89       	ldd	r24, Z+18	; 0x12
    2a6c:	df 01       	movw	r26, r30
    2a6e:	a8 0f       	add	r26, r24
    2a70:	b1 1d       	adc	r27, r1
    2a72:	ad 5a       	subi	r26, 0xAD	; 173
    2a74:	bf 4f       	sbci	r27, 0xFF	; 255
    2a76:	8c 91       	ld	r24, X
	_tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    2a78:	22 89       	ldd	r18, Z+18	; 0x12
    2a7a:	30 e0       	ldi	r19, 0x00	; 0
    2a7c:	2f 5f       	subi	r18, 0xFF	; 255
    2a7e:	3f 4f       	sbci	r19, 0xFF	; 255
    2a80:	2f 73       	andi	r18, 0x3F	; 63
    2a82:	30 78       	andi	r19, 0x80	; 128
    2a84:	33 23       	and	r19, r19
    2a86:	34 f4       	brge	.+12     	; 0x2a94 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x2c>
    2a88:	21 50       	subi	r18, 0x01	; 1
    2a8a:	31 09       	sbc	r19, r1
    2a8c:	20 6c       	ori	r18, 0xC0	; 192
    2a8e:	3f 6f       	ori	r19, 0xFF	; 255
    2a90:	2f 5f       	subi	r18, 0xFF	; 255
    2a92:	3f 4f       	sbci	r19, 0xFF	; 255
    2a94:	22 8b       	std	Z+18, r18	; 0x12

	*_udr = c;
    2a96:	a4 85       	ldd	r26, Z+12	; 0x0c
    2a98:	b5 85       	ldd	r27, Z+13	; 0x0d
    2a9a:	8c 93       	st	X, r24
	// location". This makes sure flush() won't return until the bytes
	// actually got written. Other r/w bits are preserved, and zeroes
	// written to the rest.

	#ifdef MPCM0
	*_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    2a9c:	a6 81       	ldd	r26, Z+6	; 0x06
    2a9e:	b7 81       	ldd	r27, Z+7	; 0x07
    2aa0:	8c 91       	ld	r24, X
    2aa2:	83 70       	andi	r24, 0x03	; 3
    2aa4:	80 64       	ori	r24, 0x40	; 64
    2aa6:	8c 93       	st	X, r24
	#else
	*_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
	#endif

	if (_tx_buffer_head == _tx_buffer_tail) {
    2aa8:	91 89       	ldd	r25, Z+17	; 0x11
    2aaa:	82 89       	ldd	r24, Z+18	; 0x12
    2aac:	98 13       	cpse	r25, r24
    2aae:	06 c0       	rjmp	.+12     	; 0x2abc <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x54>
		// Buffer empty, so disable interrupts
		cbi(*_ucsrb, UDRIE0);
    2ab0:	00 84       	ldd	r0, Z+8	; 0x08
    2ab2:	f1 85       	ldd	r31, Z+9	; 0x09
    2ab4:	e0 2d       	mov	r30, r0
    2ab6:	80 81       	ld	r24, Z
    2ab8:	8f 7d       	andi	r24, 0xDF	; 223
    2aba:	80 83       	st	Z, r24
    2abc:	08 95       	ret

00002abe <_ZN14HardwareSerial5flushEv>:
	if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
	return tail - head - 1;
}

void HardwareSerial::flush()
{
    2abe:	cf 93       	push	r28
    2ac0:	df 93       	push	r29
    2ac2:	ec 01       	movw	r28, r24
	// If we have never written a byte, no need to flush. This special
	// case is needed since there is no way to force the TXC (transmit
	// complete) bit to 1 during initialization
	if (!_written)
    2ac4:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ac6:	88 23       	and	r24, r24
    2ac8:	d1 f0       	breq	.+52     	; 0x2afe <_ZN14HardwareSerial5flushEv+0x40>
	return;

	while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    2aca:	e8 85       	ldd	r30, Y+8	; 0x08
    2acc:	f9 85       	ldd	r31, Y+9	; 0x09
    2ace:	80 81       	ld	r24, Z
    2ad0:	85 fd       	sbrc	r24, 5
    2ad2:	05 c0       	rjmp	.+10     	; 0x2ade <_ZN14HardwareSerial5flushEv+0x20>
    2ad4:	ae 81       	ldd	r26, Y+6	; 0x06
    2ad6:	bf 81       	ldd	r27, Y+7	; 0x07
    2ad8:	8c 91       	ld	r24, X
    2ada:	86 fd       	sbrc	r24, 6
    2adc:	10 c0       	rjmp	.+32     	; 0x2afe <_ZN14HardwareSerial5flushEv+0x40>
		if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    2ade:	0f b6       	in	r0, 0x3f	; 63
    2ae0:	07 fc       	sbrc	r0, 7
    2ae2:	f5 cf       	rjmp	.-22     	; 0x2ace <_ZN14HardwareSerial5flushEv+0x10>
    2ae4:	80 81       	ld	r24, Z
    2ae6:	85 ff       	sbrs	r24, 5
    2ae8:	f2 cf       	rjmp	.-28     	; 0x2ace <_ZN14HardwareSerial5flushEv+0x10>
    2aea:	03 c0       	rjmp	.+6      	; 0x2af2 <_ZN14HardwareSerial5flushEv+0x34>
		// Interrupts are globally disabled, but the DR empty
		// interrupt should be enabled, so poll the DR empty flag to
		// prevent deadlock
		if (bit_is_set(*_ucsra, UDRE0))
		_tx_udr_empty_irq();
    2aec:	ce 01       	movw	r24, r28
    2aee:	bc df       	rcall	.-136    	; 0x2a68 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    2af0:	ec cf       	rjmp	.-40     	; 0x2aca <_ZN14HardwareSerial5flushEv+0xc>
	while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
		if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
		// Interrupts are globally disabled, but the DR empty
		// interrupt should be enabled, so poll the DR empty flag to
		// prevent deadlock
		if (bit_is_set(*_ucsra, UDRE0))
    2af2:	ae 81       	ldd	r26, Y+6	; 0x06
    2af4:	bf 81       	ldd	r27, Y+7	; 0x07
    2af6:	8c 91       	ld	r24, X
    2af8:	85 ff       	sbrs	r24, 5
    2afa:	e9 cf       	rjmp	.-46     	; 0x2ace <_ZN14HardwareSerial5flushEv+0x10>
    2afc:	f7 cf       	rjmp	.-18     	; 0x2aec <_ZN14HardwareSerial5flushEv+0x2e>
		_tx_udr_empty_irq();
	}
	// If we get here, nothing is queued anymore (DRIE is disabled) and
	// the hardware finished tranmission (TXC is set).
}
    2afe:	df 91       	pop	r29
    2b00:	cf 91       	pop	r28
    2b02:	08 95       	ret

00002b04 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    2b04:	0f 93       	push	r16
    2b06:	1f 93       	push	r17
    2b08:	cf 93       	push	r28
    2b0a:	df 93       	push	r29
    2b0c:	ec 01       	movw	r28, r24
	_written = true;
    2b0e:	81 e0       	ldi	r24, 0x01	; 1
    2b10:	8e 87       	std	Y+14, r24	; 0x0e
	// If the buffer and the data register is empty, just write the byte
	// to the data register and be done. This shortcut helps
	// significantly improve the effective datarate at high (>
	// 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
	if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    2b12:	99 89       	ldd	r25, Y+17	; 0x11
    2b14:	8a 89       	ldd	r24, Y+18	; 0x12
    2b16:	98 13       	cpse	r25, r24
    2b18:	25 c0       	rjmp	.+74     	; 0x2b64 <_ZN14HardwareSerial5writeEh+0x60>
    2b1a:	ee 81       	ldd	r30, Y+6	; 0x06
    2b1c:	ff 81       	ldd	r31, Y+7	; 0x07
    2b1e:	80 81       	ld	r24, Z
    2b20:	85 fd       	sbrc	r24, 5
    2b22:	31 c0       	rjmp	.+98     	; 0x2b86 <_ZN14HardwareSerial5writeEh+0x82>
    2b24:	1f c0       	rjmp	.+62     	; 0x2b64 <_ZN14HardwareSerial5writeEh+0x60>
	}
	tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
	// If the output buffer is full, there's nothing for it other than to
	// wait for the interrupt handler to empty it a bit
	while (i == _tx_buffer_tail) {
    2b26:	8a 89       	ldd	r24, Y+18	; 0x12
    2b28:	18 13       	cpse	r17, r24
    2b2a:	0b c0       	rjmp	.+22     	; 0x2b42 <_ZN14HardwareSerial5writeEh+0x3e>
		if (bit_is_clear(SREG, SREG_I)) {
    2b2c:	0f b6       	in	r0, 0x3f	; 63
    2b2e:	07 fc       	sbrc	r0, 7
    2b30:	fa cf       	rjmp	.-12     	; 0x2b26 <_ZN14HardwareSerial5writeEh+0x22>
			// Interrupts are disabled, so we'll have to poll the data
			// register empty flag ourselves. If it is set, pretend an
			// interrupt has happened and call the handler to free up
			// space for us.
			if(bit_is_set(*_ucsra, UDRE0))
    2b32:	ee 81       	ldd	r30, Y+6	; 0x06
    2b34:	ff 81       	ldd	r31, Y+7	; 0x07
    2b36:	80 81       	ld	r24, Z
    2b38:	85 ff       	sbrs	r24, 5
    2b3a:	f5 cf       	rjmp	.-22     	; 0x2b26 <_ZN14HardwareSerial5writeEh+0x22>
			_tx_udr_empty_irq();
    2b3c:	ce 01       	movw	r24, r28
    2b3e:	94 df       	rcall	.-216    	; 0x2a68 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    2b40:	f2 cf       	rjmp	.-28     	; 0x2b26 <_ZN14HardwareSerial5writeEh+0x22>
			} else {
			// nop, the interrupt handler will free up space for us
		}
	}

	_tx_buffer[_tx_buffer_head] = c;
    2b42:	89 89       	ldd	r24, Y+17	; 0x11
    2b44:	fe 01       	movw	r30, r28
    2b46:	e8 0f       	add	r30, r24
    2b48:	f1 1d       	adc	r31, r1
    2b4a:	ed 5a       	subi	r30, 0xAD	; 173
    2b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b4e:	00 83       	st	Z, r16

	// make atomic to prevent execution of ISR between setting the
	// head pointer and setting the interrupt flag resulting in buffer
	// retransmission
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    2b50:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2b52:	f8 94       	cli
		_tx_buffer_head = i;
    2b54:	19 8b       	std	Y+17, r17	; 0x11
		sbi(*_ucsrb, UDRIE0);
    2b56:	e8 85       	ldd	r30, Y+8	; 0x08
    2b58:	f9 85       	ldd	r31, Y+9	; 0x09
    2b5a:	80 81       	ld	r24, Z
    2b5c:	80 62       	ori	r24, 0x20	; 32
    2b5e:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2b60:	9f bf       	out	0x3f, r25	; 63
	}
	
	return 1;
    2b62:	1d c0       	rjmp	.+58     	; 0x2b9e <_ZN14HardwareSerial5writeEh+0x9a>
			*_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
			#endif
		}
		return 1;
	}
	tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    2b64:	29 89       	ldd	r18, Y+17	; 0x11
    2b66:	30 e0       	ldi	r19, 0x00	; 0
    2b68:	2f 5f       	subi	r18, 0xFF	; 255
    2b6a:	3f 4f       	sbci	r19, 0xFF	; 255
    2b6c:	2f 73       	andi	r18, 0x3F	; 63
    2b6e:	30 78       	andi	r19, 0x80	; 128
    2b70:	33 23       	and	r19, r19
    2b72:	34 f4       	brge	.+12     	; 0x2b80 <_ZN14HardwareSerial5writeEh+0x7c>
    2b74:	21 50       	subi	r18, 0x01	; 1
    2b76:	31 09       	sbc	r19, r1
    2b78:	20 6c       	ori	r18, 0xC0	; 192
    2b7a:	3f 6f       	ori	r19, 0xFF	; 255
    2b7c:	2f 5f       	subi	r18, 0xFF	; 255
    2b7e:	3f 4f       	sbci	r19, 0xFF	; 255
    2b80:	06 2f       	mov	r16, r22
    2b82:	12 2f       	mov	r17, r18
    2b84:	d0 cf       	rjmp	.-96     	; 0x2b26 <_ZN14HardwareSerial5writeEh+0x22>
		// So writing UDR must happen first.
		// Writing UDR and clearing TC must be done atomically, otherwise
		// interrupts might delay the TXC clear so the byte written to UDR
		// is transmitted (setting TXC) before clearing TXC. Then TXC will
		// be cleared when no bytes are left, causing flush() to hang
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    2b86:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2b88:	f8 94       	cli
			*_udr = c;
    2b8a:	ec 85       	ldd	r30, Y+12	; 0x0c
    2b8c:	fd 85       	ldd	r31, Y+13	; 0x0d
    2b8e:	60 83       	st	Z, r22
			#ifdef MPCM0
			*_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    2b90:	ee 81       	ldd	r30, Y+6	; 0x06
    2b92:	ff 81       	ldd	r31, Y+7	; 0x07
    2b94:	80 81       	ld	r24, Z
    2b96:	83 70       	andi	r24, 0x03	; 3
    2b98:	80 64       	ori	r24, 0x40	; 64
    2b9a:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2b9c:	9f bf       	out	0x3f, r25	; 63
		_tx_buffer_head = i;
		sbi(*_ucsrb, UDRIE0);
	}
	
	return 1;
}
    2b9e:	81 e0       	ldi	r24, 0x01	; 1
    2ba0:	90 e0       	ldi	r25, 0x00	; 0
    2ba2:	df 91       	pop	r29
    2ba4:	cf 91       	pop	r28
    2ba6:	1f 91       	pop	r17
    2ba8:	0f 91       	pop	r16
    2baa:	08 95       	ret

00002bac <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, uint8_t config)
{
    2bac:	cf 92       	push	r12
    2bae:	df 92       	push	r13
    2bb0:	ef 92       	push	r14
    2bb2:	ff 92       	push	r15
    2bb4:	1f 93       	push	r17
    2bb6:	cf 93       	push	r28
    2bb8:	df 93       	push	r29
    2bba:	ec 01       	movw	r28, r24
    2bbc:	6a 01       	movw	r12, r20
    2bbe:	7b 01       	movw	r14, r22
    2bc0:	12 2f       	mov	r17, r18
	// Try u2x mode first
	uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
	*_ucsra = 1 << U2X0;
    2bc2:	ee 81       	ldd	r30, Y+6	; 0x06
    2bc4:	ff 81       	ldd	r31, Y+7	; 0x07
    2bc6:	82 e0       	ldi	r24, 0x02	; 2
    2bc8:	80 83       	st	Z, r24
	// hardcoded exception for 57600 for compatibility with the bootloader
	// shipped with the Duemilanove and previous boards and the firmware
	// on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
	// be > 4095, so switch back to non-u2x mode if the baud rate is too
	// low.
	if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    2bca:	41 15       	cp	r20, r1
    2bcc:	51 4e       	sbci	r21, 0xE1	; 225
    2bce:	61 05       	cpc	r22, r1
    2bd0:	71 05       	cpc	r23, r1
    2bd2:	b1 f0       	breq	.+44     	; 0x2c00 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, uint8_t config)
{
	// Try u2x mode first
	uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    2bd4:	60 e0       	ldi	r22, 0x00	; 0
    2bd6:	79 e0       	ldi	r23, 0x09	; 9
    2bd8:	8d e3       	ldi	r24, 0x3D	; 61
    2bda:	90 e0       	ldi	r25, 0x00	; 0
    2bdc:	a7 01       	movw	r20, r14
    2bde:	96 01       	movw	r18, r12
    2be0:	0e 94 62 24 	call	0x48c4	; 0x48c4 <__udivmodsi4>
    2be4:	da 01       	movw	r26, r20
    2be6:	c9 01       	movw	r24, r18
    2be8:	01 97       	sbiw	r24, 0x01	; 1
    2bea:	a1 09       	sbc	r26, r1
    2bec:	b1 09       	sbc	r27, r1
    2bee:	b6 95       	lsr	r27
    2bf0:	a7 95       	ror	r26
    2bf2:	97 95       	ror	r25
    2bf4:	87 95       	ror	r24
    2bf6:	9c 01       	movw	r18, r24
	// hardcoded exception for 57600 for compatibility with the bootloader
	// shipped with the Duemilanove and previous boards and the firmware
	// on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
	// be > 4095, so switch back to non-u2x mode if the baud rate is too
	// low.
	if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    2bf8:	21 15       	cp	r18, r1
    2bfa:	80 e1       	ldi	r24, 0x10	; 16
    2bfc:	38 07       	cpc	r19, r24
    2bfe:	a8 f0       	brcs	.+42     	; 0x2c2a <_ZN14HardwareSerial5beginEmh+0x7e>
	{
		*_ucsra = 0;
    2c00:	ee 81       	ldd	r30, Y+6	; 0x06
    2c02:	ff 81       	ldd	r31, Y+7	; 0x07
    2c04:	10 82       	st	Z, r1
		baud_setting = (F_CPU / 8 / baud - 1) / 2;
    2c06:	60 e8       	ldi	r22, 0x80	; 128
    2c08:	74 e8       	ldi	r23, 0x84	; 132
    2c0a:	8e e1       	ldi	r24, 0x1E	; 30
    2c0c:	90 e0       	ldi	r25, 0x00	; 0
    2c0e:	a7 01       	movw	r20, r14
    2c10:	96 01       	movw	r18, r12
    2c12:	0e 94 62 24 	call	0x48c4	; 0x48c4 <__udivmodsi4>
    2c16:	da 01       	movw	r26, r20
    2c18:	c9 01       	movw	r24, r18
    2c1a:	01 97       	sbiw	r24, 0x01	; 1
    2c1c:	a1 09       	sbc	r26, r1
    2c1e:	b1 09       	sbc	r27, r1
    2c20:	b6 95       	lsr	r27
    2c22:	a7 95       	ror	r26
    2c24:	97 95       	ror	r25
    2c26:	87 95       	ror	r24
    2c28:	9c 01       	movw	r18, r24
	}

	// assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
	*_ubrrh = baud_setting >> 8;
    2c2a:	ea 81       	ldd	r30, Y+2	; 0x02
    2c2c:	fb 81       	ldd	r31, Y+3	; 0x03
    2c2e:	30 83       	st	Z, r19
	*_ubrrl = baud_setting;
    2c30:	ec 81       	ldd	r30, Y+4	; 0x04
    2c32:	fd 81       	ldd	r31, Y+5	; 0x05
    2c34:	20 83       	st	Z, r18

	_written = false;
    2c36:	1e 86       	std	Y+14, r1	; 0x0e

	//set the data bits, parity, and stop bits
	#if defined(__AVR_ATmega8__)
	config |= 0x80; // select UCSRC register (shared with UBRRH)
	#endif
	*_ucsrc = config;
    2c38:	ea 85       	ldd	r30, Y+10	; 0x0a
    2c3a:	fb 85       	ldd	r31, Y+11	; 0x0b
    2c3c:	10 83       	st	Z, r17
	
	sbi(*_ucsrb, RXEN0);
    2c3e:	e8 85       	ldd	r30, Y+8	; 0x08
    2c40:	f9 85       	ldd	r31, Y+9	; 0x09
    2c42:	80 81       	ld	r24, Z
    2c44:	80 61       	ori	r24, 0x10	; 16
    2c46:	80 83       	st	Z, r24
	sbi(*_ucsrb, TXEN0);
    2c48:	e8 85       	ldd	r30, Y+8	; 0x08
    2c4a:	f9 85       	ldd	r31, Y+9	; 0x09
    2c4c:	80 81       	ld	r24, Z
    2c4e:	88 60       	ori	r24, 0x08	; 8
    2c50:	80 83       	st	Z, r24
	sbi(*_ucsrb, RXCIE0);
    2c52:	e8 85       	ldd	r30, Y+8	; 0x08
    2c54:	f9 85       	ldd	r31, Y+9	; 0x09
    2c56:	80 81       	ld	r24, Z
    2c58:	80 68       	ori	r24, 0x80	; 128
    2c5a:	80 83       	st	Z, r24
	cbi(*_ucsrb, UDRIE0);
    2c5c:	e8 85       	ldd	r30, Y+8	; 0x08
    2c5e:	f9 85       	ldd	r31, Y+9	; 0x09
    2c60:	80 81       	ld	r24, Z
    2c62:	8f 7d       	andi	r24, 0xDF	; 223
    2c64:	80 83       	st	Z, r24
}
    2c66:	df 91       	pop	r29
    2c68:	cf 91       	pop	r28
    2c6a:	1f 91       	pop	r17
    2c6c:	ff 90       	pop	r15
    2c6e:	ef 90       	pop	r14
    2c70:	df 90       	pop	r13
    2c72:	cf 90       	pop	r12
    2c74:	08 95       	ret

00002c76 <_ZN5Print17availableForWriteEv>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
}
    2c76:	80 e0       	ldi	r24, 0x00	; 0
    2c78:	90 e0       	ldi	r25, 0x00	; 0
    2c7a:	08 95       	ret

00002c7c <__vector_25>:
    2c7c:	1f 92       	push	r1
    2c7e:	0f 92       	push	r0
    2c80:	0f b6       	in	r0, 0x3f	; 63
    2c82:	0f 92       	push	r0
    2c84:	11 24       	eor	r1, r1
    2c86:	0b b6       	in	r0, 0x3b	; 59
    2c88:	0f 92       	push	r0
    2c8a:	2f 93       	push	r18
    2c8c:	8f 93       	push	r24
    2c8e:	9f 93       	push	r25
    2c90:	af 93       	push	r26
    2c92:	bf 93       	push	r27
    2c94:	ef 93       	push	r30
    2c96:	ff 93       	push	r31
    2c98:	e0 91 fe 05 	lds	r30, 0x05FE	; 0x8005fe <Serial+0x6>
    2c9c:	f0 91 ff 05 	lds	r31, 0x05FF	; 0x8005ff <Serial+0x7>
    2ca0:	80 81       	ld	r24, Z
    2ca2:	82 fd       	sbrc	r24, 2
    2ca4:	14 c0       	rjmp	.+40     	; 0x2cce <__vector_25+0x52>
    2ca6:	e8 ef       	ldi	r30, 0xF8	; 248
    2ca8:	f5 e0       	ldi	r31, 0x05	; 5
    2caa:	a4 85       	ldd	r26, Z+12	; 0x0c
    2cac:	b5 85       	ldd	r27, Z+13	; 0x0d
    2cae:	2c 91       	ld	r18, X
    2cb0:	87 85       	ldd	r24, Z+15	; 0x0f
    2cb2:	8f 5f       	subi	r24, 0xFF	; 255
    2cb4:	8f 70       	andi	r24, 0x0F	; 15
    2cb6:	90 89       	ldd	r25, Z+16	; 0x10
    2cb8:	89 17       	cp	r24, r25
    2cba:	71 f0       	breq	.+28     	; 0x2cd8 <__vector_25+0x5c>
    2cbc:	df 01       	movw	r26, r30
    2cbe:	e7 85       	ldd	r30, Z+15	; 0x0f
    2cc0:	f0 e0       	ldi	r31, 0x00	; 0
    2cc2:	e8 50       	subi	r30, 0x08	; 8
    2cc4:	fa 4f       	sbci	r31, 0xFA	; 250
    2cc6:	23 8b       	std	Z+19, r18	; 0x13
    2cc8:	1f 96       	adiw	r26, 0x0f	; 15
    2cca:	8c 93       	st	X, r24
    2ccc:	05 c0       	rjmp	.+10     	; 0x2cd8 <__vector_25+0x5c>
    2cce:	e0 91 04 06 	lds	r30, 0x0604	; 0x800604 <Serial+0xc>
    2cd2:	f0 91 05 06 	lds	r31, 0x0605	; 0x800605 <Serial+0xd>
    2cd6:	80 81       	ld	r24, Z
    2cd8:	ff 91       	pop	r31
    2cda:	ef 91       	pop	r30
    2cdc:	bf 91       	pop	r27
    2cde:	af 91       	pop	r26
    2ce0:	9f 91       	pop	r25
    2ce2:	8f 91       	pop	r24
    2ce4:	2f 91       	pop	r18
    2ce6:	0f 90       	pop	r0
    2ce8:	0b be       	out	0x3b, r0	; 59
    2cea:	0f 90       	pop	r0
    2cec:	0f be       	out	0x3f, r0	; 63
    2cee:	0f 90       	pop	r0
    2cf0:	1f 90       	pop	r1
    2cf2:	18 95       	reti

00002cf4 <__vector_26>:
    2cf4:	1f 92       	push	r1
    2cf6:	0f 92       	push	r0
    2cf8:	0f b6       	in	r0, 0x3f	; 63
    2cfa:	0f 92       	push	r0
    2cfc:	11 24       	eor	r1, r1
    2cfe:	0b b6       	in	r0, 0x3b	; 59
    2d00:	0f 92       	push	r0
    2d02:	2f 93       	push	r18
    2d04:	3f 93       	push	r19
    2d06:	4f 93       	push	r20
    2d08:	5f 93       	push	r21
    2d0a:	6f 93       	push	r22
    2d0c:	7f 93       	push	r23
    2d0e:	8f 93       	push	r24
    2d10:	9f 93       	push	r25
    2d12:	af 93       	push	r26
    2d14:	bf 93       	push	r27
    2d16:	ef 93       	push	r30
    2d18:	ff 93       	push	r31
    2d1a:	88 ef       	ldi	r24, 0xF8	; 248
    2d1c:	95 e0       	ldi	r25, 0x05	; 5
    2d1e:	a4 de       	rcall	.-696    	; 0x2a68 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    2d20:	ff 91       	pop	r31
    2d22:	ef 91       	pop	r30
    2d24:	bf 91       	pop	r27
    2d26:	af 91       	pop	r26
    2d28:	9f 91       	pop	r25
    2d2a:	8f 91       	pop	r24
    2d2c:	7f 91       	pop	r23
    2d2e:	6f 91       	pop	r22
    2d30:	5f 91       	pop	r21
    2d32:	4f 91       	pop	r20
    2d34:	3f 91       	pop	r19
    2d36:	2f 91       	pop	r18
    2d38:	0f 90       	pop	r0
    2d3a:	0b be       	out	0x3b, r0	; 59
    2d3c:	0f 90       	pop	r0
    2d3e:	0f be       	out	0x3f, r0	; 63
    2d40:	0f 90       	pop	r0
    2d42:	1f 90       	pop	r1
    2d44:	18 95       	reti

00002d46 <_GLOBAL__sub_I___vector_25>:
volatile uint8_t *ucsrc, volatile uint8_t *udr) :
_ubrrh(ubrrh), _ubrrl(ubrrl),
_ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
_udr(udr),
_rx_buffer_head(0), _rx_buffer_tail(0),
_tx_buffer_head(0), _tx_buffer_tail(0)
    2d46:	e8 ef       	ldi	r30, 0xF8	; 248
    2d48:	f5 e0       	ldi	r31, 0x05	; 5
    2d4a:	8f ea       	ldi	r24, 0xAF	; 175
    2d4c:	92 e0       	ldi	r25, 0x02	; 2
    2d4e:	91 83       	std	Z+1, r25	; 0x01
    2d50:	80 83       	st	Z, r24
    2d52:	85 ec       	ldi	r24, 0xC5	; 197
    2d54:	90 e0       	ldi	r25, 0x00	; 0
    2d56:	93 83       	std	Z+3, r25	; 0x03
    2d58:	82 83       	std	Z+2, r24	; 0x02
    2d5a:	84 ec       	ldi	r24, 0xC4	; 196
    2d5c:	90 e0       	ldi	r25, 0x00	; 0
    2d5e:	95 83       	std	Z+5, r25	; 0x05
    2d60:	84 83       	std	Z+4, r24	; 0x04
    2d62:	80 ec       	ldi	r24, 0xC0	; 192
    2d64:	90 e0       	ldi	r25, 0x00	; 0
    2d66:	97 83       	std	Z+7, r25	; 0x07
    2d68:	86 83       	std	Z+6, r24	; 0x06
    2d6a:	81 ec       	ldi	r24, 0xC1	; 193
    2d6c:	90 e0       	ldi	r25, 0x00	; 0
    2d6e:	91 87       	std	Z+9, r25	; 0x09
    2d70:	80 87       	std	Z+8, r24	; 0x08
    2d72:	82 ec       	ldi	r24, 0xC2	; 194
    2d74:	90 e0       	ldi	r25, 0x00	; 0
    2d76:	93 87       	std	Z+11, r25	; 0x0b
    2d78:	82 87       	std	Z+10, r24	; 0x0a
    2d7a:	86 ec       	ldi	r24, 0xC6	; 198
    2d7c:	90 e0       	ldi	r25, 0x00	; 0
    2d7e:	95 87       	std	Z+13, r25	; 0x0d
    2d80:	84 87       	std	Z+12, r24	; 0x0c
    2d82:	17 86       	std	Z+15, r1	; 0x0f
    2d84:	10 8a       	std	Z+16, r1	; 0x10
    2d86:	11 8a       	std	Z+17, r1	; 0x11
    2d88:	12 8a       	std	Z+18, r1	; 0x12
    2d8a:	08 95       	ret

00002d8c <__vector_36>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
}
    2d8c:	1f 92       	push	r1
    2d8e:	0f 92       	push	r0
    2d90:	0f b6       	in	r0, 0x3f	; 63
    2d92:	0f 92       	push	r0
    2d94:	11 24       	eor	r1, r1
    2d96:	0b b6       	in	r0, 0x3b	; 59
    2d98:	0f 92       	push	r0
    2d9a:	2f 93       	push	r18
    2d9c:	8f 93       	push	r24
    2d9e:	9f 93       	push	r25
    2da0:	af 93       	push	r26
    2da2:	bf 93       	push	r27
    2da4:	ef 93       	push	r30
    2da6:	ff 93       	push	r31
    2da8:	e0 91 31 06 	lds	r30, 0x0631	; 0x800631 <Serial1+0x6>
    2dac:	f0 91 32 06 	lds	r31, 0x0632	; 0x800632 <Serial1+0x7>
    2db0:	80 81       	ld	r24, Z
    2db2:	82 fd       	sbrc	r24, 2
    2db4:	14 c0       	rjmp	.+40     	; 0x2dde <__vector_36+0x52>
    2db6:	eb e2       	ldi	r30, 0x2B	; 43
    2db8:	f6 e0       	ldi	r31, 0x06	; 6
    2dba:	a4 85       	ldd	r26, Z+12	; 0x0c
    2dbc:	b5 85       	ldd	r27, Z+13	; 0x0d
    2dbe:	2c 91       	ld	r18, X
    2dc0:	87 85       	ldd	r24, Z+15	; 0x0f
    2dc2:	8f 5f       	subi	r24, 0xFF	; 255
    2dc4:	8f 70       	andi	r24, 0x0F	; 15
    2dc6:	90 89       	ldd	r25, Z+16	; 0x10
    2dc8:	89 17       	cp	r24, r25
    2dca:	71 f0       	breq	.+28     	; 0x2de8 <__vector_36+0x5c>
    2dcc:	df 01       	movw	r26, r30
    2dce:	e7 85       	ldd	r30, Z+15	; 0x0f
    2dd0:	f0 e0       	ldi	r31, 0x00	; 0
    2dd2:	e5 5d       	subi	r30, 0xD5	; 213
    2dd4:	f9 4f       	sbci	r31, 0xF9	; 249
    2dd6:	23 8b       	std	Z+19, r18	; 0x13
    2dd8:	1f 96       	adiw	r26, 0x0f	; 15
    2dda:	8c 93       	st	X, r24
    2ddc:	05 c0       	rjmp	.+10     	; 0x2de8 <__vector_36+0x5c>
    2dde:	e0 91 37 06 	lds	r30, 0x0637	; 0x800637 <Serial1+0xc>
    2de2:	f0 91 38 06 	lds	r31, 0x0638	; 0x800638 <Serial1+0xd>
    2de6:	80 81       	ld	r24, Z
    2de8:	ff 91       	pop	r31
    2dea:	ef 91       	pop	r30
    2dec:	bf 91       	pop	r27
    2dee:	af 91       	pop	r26
    2df0:	9f 91       	pop	r25
    2df2:	8f 91       	pop	r24
    2df4:	2f 91       	pop	r18
    2df6:	0f 90       	pop	r0
    2df8:	0b be       	out	0x3b, r0	; 59
    2dfa:	0f 90       	pop	r0
    2dfc:	0f be       	out	0x3f, r0	; 63
    2dfe:	0f 90       	pop	r0
    2e00:	1f 90       	pop	r1
    2e02:	18 95       	reti

00002e04 <__vector_37>:
    2e04:	1f 92       	push	r1
    2e06:	0f 92       	push	r0
    2e08:	0f b6       	in	r0, 0x3f	; 63
    2e0a:	0f 92       	push	r0
    2e0c:	11 24       	eor	r1, r1
    2e0e:	0b b6       	in	r0, 0x3b	; 59
    2e10:	0f 92       	push	r0
    2e12:	2f 93       	push	r18
    2e14:	3f 93       	push	r19
    2e16:	4f 93       	push	r20
    2e18:	5f 93       	push	r21
    2e1a:	6f 93       	push	r22
    2e1c:	7f 93       	push	r23
    2e1e:	8f 93       	push	r24
    2e20:	9f 93       	push	r25
    2e22:	af 93       	push	r26
    2e24:	bf 93       	push	r27
    2e26:	ef 93       	push	r30
    2e28:	ff 93       	push	r31
    2e2a:	8b e2       	ldi	r24, 0x2B	; 43
    2e2c:	96 e0       	ldi	r25, 0x06	; 6
    2e2e:	1c de       	rcall	.-968    	; 0x2a68 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    2e30:	ff 91       	pop	r31
    2e32:	ef 91       	pop	r30
    2e34:	bf 91       	pop	r27
    2e36:	af 91       	pop	r26
    2e38:	9f 91       	pop	r25
    2e3a:	8f 91       	pop	r24
    2e3c:	7f 91       	pop	r23
    2e3e:	6f 91       	pop	r22
    2e40:	5f 91       	pop	r21
    2e42:	4f 91       	pop	r20
    2e44:	3f 91       	pop	r19
    2e46:	2f 91       	pop	r18
    2e48:	0f 90       	pop	r0
    2e4a:	0b be       	out	0x3b, r0	; 59
    2e4c:	0f 90       	pop	r0
    2e4e:	0f be       	out	0x3f, r0	; 63
    2e50:	0f 90       	pop	r0
    2e52:	1f 90       	pop	r1
    2e54:	18 95       	reti

00002e56 <_GLOBAL__sub_I___vector_36>:
    2e56:	eb e2       	ldi	r30, 0x2B	; 43
    2e58:	f6 e0       	ldi	r31, 0x06	; 6
    2e5a:	8f ea       	ldi	r24, 0xAF	; 175
    2e5c:	92 e0       	ldi	r25, 0x02	; 2
    2e5e:	91 83       	std	Z+1, r25	; 0x01
    2e60:	80 83       	st	Z, r24
    2e62:	8d ec       	ldi	r24, 0xCD	; 205
    2e64:	90 e0       	ldi	r25, 0x00	; 0
    2e66:	93 83       	std	Z+3, r25	; 0x03
    2e68:	82 83       	std	Z+2, r24	; 0x02
    2e6a:	8c ec       	ldi	r24, 0xCC	; 204
    2e6c:	90 e0       	ldi	r25, 0x00	; 0
    2e6e:	95 83       	std	Z+5, r25	; 0x05
    2e70:	84 83       	std	Z+4, r24	; 0x04
    2e72:	88 ec       	ldi	r24, 0xC8	; 200
    2e74:	90 e0       	ldi	r25, 0x00	; 0
    2e76:	97 83       	std	Z+7, r25	; 0x07
    2e78:	86 83       	std	Z+6, r24	; 0x06
    2e7a:	89 ec       	ldi	r24, 0xC9	; 201
    2e7c:	90 e0       	ldi	r25, 0x00	; 0
    2e7e:	91 87       	std	Z+9, r25	; 0x09
    2e80:	80 87       	std	Z+8, r24	; 0x08
    2e82:	8a ec       	ldi	r24, 0xCA	; 202
    2e84:	90 e0       	ldi	r25, 0x00	; 0
    2e86:	93 87       	std	Z+11, r25	; 0x0b
    2e88:	82 87       	std	Z+10, r24	; 0x0a
    2e8a:	8e ec       	ldi	r24, 0xCE	; 206
    2e8c:	90 e0       	ldi	r25, 0x00	; 0
    2e8e:	95 87       	std	Z+13, r25	; 0x0d
    2e90:	84 87       	std	Z+12, r24	; 0x0c
    2e92:	17 86       	std	Z+15, r1	; 0x0f
    2e94:	10 8a       	std	Z+16, r1	; 0x10
    2e96:	11 8a       	std	Z+17, r1	; 0x11
    2e98:	12 8a       	std	Z+18, r1	; 0x12
    2e9a:	08 95       	ret

00002e9c <__vector_51>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial2_available() {
  return Serial2.available();
}
    2e9c:	1f 92       	push	r1
    2e9e:	0f 92       	push	r0
    2ea0:	0f b6       	in	r0, 0x3f	; 63
    2ea2:	0f 92       	push	r0
    2ea4:	11 24       	eor	r1, r1
    2ea6:	0b b6       	in	r0, 0x3b	; 59
    2ea8:	0f 92       	push	r0
    2eaa:	2f 93       	push	r18
    2eac:	8f 93       	push	r24
    2eae:	9f 93       	push	r25
    2eb0:	af 93       	push	r26
    2eb2:	bf 93       	push	r27
    2eb4:	ef 93       	push	r30
    2eb6:	ff 93       	push	r31
    2eb8:	e0 91 64 06 	lds	r30, 0x0664	; 0x800664 <Serial2+0x6>
    2ebc:	f0 91 65 06 	lds	r31, 0x0665	; 0x800665 <Serial2+0x7>
    2ec0:	80 81       	ld	r24, Z
    2ec2:	82 fd       	sbrc	r24, 2
    2ec4:	14 c0       	rjmp	.+40     	; 0x2eee <__vector_51+0x52>
    2ec6:	ee e5       	ldi	r30, 0x5E	; 94
    2ec8:	f6 e0       	ldi	r31, 0x06	; 6
    2eca:	a4 85       	ldd	r26, Z+12	; 0x0c
    2ecc:	b5 85       	ldd	r27, Z+13	; 0x0d
    2ece:	2c 91       	ld	r18, X
    2ed0:	87 85       	ldd	r24, Z+15	; 0x0f
    2ed2:	8f 5f       	subi	r24, 0xFF	; 255
    2ed4:	8f 70       	andi	r24, 0x0F	; 15
    2ed6:	90 89       	ldd	r25, Z+16	; 0x10
    2ed8:	89 17       	cp	r24, r25
    2eda:	71 f0       	breq	.+28     	; 0x2ef8 <__vector_51+0x5c>
    2edc:	df 01       	movw	r26, r30
    2ede:	e7 85       	ldd	r30, Z+15	; 0x0f
    2ee0:	f0 e0       	ldi	r31, 0x00	; 0
    2ee2:	e2 5a       	subi	r30, 0xA2	; 162
    2ee4:	f9 4f       	sbci	r31, 0xF9	; 249
    2ee6:	23 8b       	std	Z+19, r18	; 0x13
    2ee8:	1f 96       	adiw	r26, 0x0f	; 15
    2eea:	8c 93       	st	X, r24
    2eec:	05 c0       	rjmp	.+10     	; 0x2ef8 <__vector_51+0x5c>
    2eee:	e0 91 6a 06 	lds	r30, 0x066A	; 0x80066a <Serial2+0xc>
    2ef2:	f0 91 6b 06 	lds	r31, 0x066B	; 0x80066b <Serial2+0xd>
    2ef6:	80 81       	ld	r24, Z
    2ef8:	ff 91       	pop	r31
    2efa:	ef 91       	pop	r30
    2efc:	bf 91       	pop	r27
    2efe:	af 91       	pop	r26
    2f00:	9f 91       	pop	r25
    2f02:	8f 91       	pop	r24
    2f04:	2f 91       	pop	r18
    2f06:	0f 90       	pop	r0
    2f08:	0b be       	out	0x3b, r0	; 59
    2f0a:	0f 90       	pop	r0
    2f0c:	0f be       	out	0x3f, r0	; 63
    2f0e:	0f 90       	pop	r0
    2f10:	1f 90       	pop	r1
    2f12:	18 95       	reti

00002f14 <__vector_52>:
    2f14:	1f 92       	push	r1
    2f16:	0f 92       	push	r0
    2f18:	0f b6       	in	r0, 0x3f	; 63
    2f1a:	0f 92       	push	r0
    2f1c:	11 24       	eor	r1, r1
    2f1e:	0b b6       	in	r0, 0x3b	; 59
    2f20:	0f 92       	push	r0
    2f22:	2f 93       	push	r18
    2f24:	3f 93       	push	r19
    2f26:	4f 93       	push	r20
    2f28:	5f 93       	push	r21
    2f2a:	6f 93       	push	r22
    2f2c:	7f 93       	push	r23
    2f2e:	8f 93       	push	r24
    2f30:	9f 93       	push	r25
    2f32:	af 93       	push	r26
    2f34:	bf 93       	push	r27
    2f36:	ef 93       	push	r30
    2f38:	ff 93       	push	r31
    2f3a:	8e e5       	ldi	r24, 0x5E	; 94
    2f3c:	96 e0       	ldi	r25, 0x06	; 6
    2f3e:	94 dd       	rcall	.-1240   	; 0x2a68 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    2f40:	ff 91       	pop	r31
    2f42:	ef 91       	pop	r30
    2f44:	bf 91       	pop	r27
    2f46:	af 91       	pop	r26
    2f48:	9f 91       	pop	r25
    2f4a:	8f 91       	pop	r24
    2f4c:	7f 91       	pop	r23
    2f4e:	6f 91       	pop	r22
    2f50:	5f 91       	pop	r21
    2f52:	4f 91       	pop	r20
    2f54:	3f 91       	pop	r19
    2f56:	2f 91       	pop	r18
    2f58:	0f 90       	pop	r0
    2f5a:	0b be       	out	0x3b, r0	; 59
    2f5c:	0f 90       	pop	r0
    2f5e:	0f be       	out	0x3f, r0	; 63
    2f60:	0f 90       	pop	r0
    2f62:	1f 90       	pop	r1
    2f64:	18 95       	reti

00002f66 <_GLOBAL__sub_I___vector_51>:
    2f66:	ee e5       	ldi	r30, 0x5E	; 94
    2f68:	f6 e0       	ldi	r31, 0x06	; 6
    2f6a:	8f ea       	ldi	r24, 0xAF	; 175
    2f6c:	92 e0       	ldi	r25, 0x02	; 2
    2f6e:	91 83       	std	Z+1, r25	; 0x01
    2f70:	80 83       	st	Z, r24
    2f72:	85 ed       	ldi	r24, 0xD5	; 213
    2f74:	90 e0       	ldi	r25, 0x00	; 0
    2f76:	93 83       	std	Z+3, r25	; 0x03
    2f78:	82 83       	std	Z+2, r24	; 0x02
    2f7a:	84 ed       	ldi	r24, 0xD4	; 212
    2f7c:	90 e0       	ldi	r25, 0x00	; 0
    2f7e:	95 83       	std	Z+5, r25	; 0x05
    2f80:	84 83       	std	Z+4, r24	; 0x04
    2f82:	80 ed       	ldi	r24, 0xD0	; 208
    2f84:	90 e0       	ldi	r25, 0x00	; 0
    2f86:	97 83       	std	Z+7, r25	; 0x07
    2f88:	86 83       	std	Z+6, r24	; 0x06
    2f8a:	81 ed       	ldi	r24, 0xD1	; 209
    2f8c:	90 e0       	ldi	r25, 0x00	; 0
    2f8e:	91 87       	std	Z+9, r25	; 0x09
    2f90:	80 87       	std	Z+8, r24	; 0x08
    2f92:	82 ed       	ldi	r24, 0xD2	; 210
    2f94:	90 e0       	ldi	r25, 0x00	; 0
    2f96:	93 87       	std	Z+11, r25	; 0x0b
    2f98:	82 87       	std	Z+10, r24	; 0x0a
    2f9a:	86 ed       	ldi	r24, 0xD6	; 214
    2f9c:	90 e0       	ldi	r25, 0x00	; 0
    2f9e:	95 87       	std	Z+13, r25	; 0x0d
    2fa0:	84 87       	std	Z+12, r24	; 0x0c
    2fa2:	17 86       	std	Z+15, r1	; 0x0f
    2fa4:	10 8a       	std	Z+16, r1	; 0x10
    2fa6:	11 8a       	std	Z+17, r1	; 0x11
    2fa8:	12 8a       	std	Z+18, r1	; 0x12
    2faa:	08 95       	ret

00002fac <__vector_54>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial3_available() {
  return Serial3.available();
}
    2fac:	1f 92       	push	r1
    2fae:	0f 92       	push	r0
    2fb0:	0f b6       	in	r0, 0x3f	; 63
    2fb2:	0f 92       	push	r0
    2fb4:	11 24       	eor	r1, r1
    2fb6:	0b b6       	in	r0, 0x3b	; 59
    2fb8:	0f 92       	push	r0
    2fba:	2f 93       	push	r18
    2fbc:	8f 93       	push	r24
    2fbe:	9f 93       	push	r25
    2fc0:	af 93       	push	r26
    2fc2:	bf 93       	push	r27
    2fc4:	ef 93       	push	r30
    2fc6:	ff 93       	push	r31
    2fc8:	e0 91 97 06 	lds	r30, 0x0697	; 0x800697 <Serial3+0x6>
    2fcc:	f0 91 98 06 	lds	r31, 0x0698	; 0x800698 <Serial3+0x7>
    2fd0:	80 81       	ld	r24, Z
    2fd2:	82 fd       	sbrc	r24, 2
    2fd4:	14 c0       	rjmp	.+40     	; 0x2ffe <__vector_54+0x52>
    2fd6:	e1 e9       	ldi	r30, 0x91	; 145
    2fd8:	f6 e0       	ldi	r31, 0x06	; 6
    2fda:	a4 85       	ldd	r26, Z+12	; 0x0c
    2fdc:	b5 85       	ldd	r27, Z+13	; 0x0d
    2fde:	2c 91       	ld	r18, X
    2fe0:	87 85       	ldd	r24, Z+15	; 0x0f
    2fe2:	8f 5f       	subi	r24, 0xFF	; 255
    2fe4:	8f 70       	andi	r24, 0x0F	; 15
    2fe6:	90 89       	ldd	r25, Z+16	; 0x10
    2fe8:	89 17       	cp	r24, r25
    2fea:	71 f0       	breq	.+28     	; 0x3008 <__vector_54+0x5c>
    2fec:	df 01       	movw	r26, r30
    2fee:	e7 85       	ldd	r30, Z+15	; 0x0f
    2ff0:	f0 e0       	ldi	r31, 0x00	; 0
    2ff2:	ef 56       	subi	r30, 0x6F	; 111
    2ff4:	f9 4f       	sbci	r31, 0xF9	; 249
    2ff6:	23 8b       	std	Z+19, r18	; 0x13
    2ff8:	1f 96       	adiw	r26, 0x0f	; 15
    2ffa:	8c 93       	st	X, r24
    2ffc:	05 c0       	rjmp	.+10     	; 0x3008 <__vector_54+0x5c>
    2ffe:	e0 91 9d 06 	lds	r30, 0x069D	; 0x80069d <Serial3+0xc>
    3002:	f0 91 9e 06 	lds	r31, 0x069E	; 0x80069e <Serial3+0xd>
    3006:	80 81       	ld	r24, Z
    3008:	ff 91       	pop	r31
    300a:	ef 91       	pop	r30
    300c:	bf 91       	pop	r27
    300e:	af 91       	pop	r26
    3010:	9f 91       	pop	r25
    3012:	8f 91       	pop	r24
    3014:	2f 91       	pop	r18
    3016:	0f 90       	pop	r0
    3018:	0b be       	out	0x3b, r0	; 59
    301a:	0f 90       	pop	r0
    301c:	0f be       	out	0x3f, r0	; 63
    301e:	0f 90       	pop	r0
    3020:	1f 90       	pop	r1
    3022:	18 95       	reti

00003024 <__vector_55>:
    3024:	1f 92       	push	r1
    3026:	0f 92       	push	r0
    3028:	0f b6       	in	r0, 0x3f	; 63
    302a:	0f 92       	push	r0
    302c:	11 24       	eor	r1, r1
    302e:	0b b6       	in	r0, 0x3b	; 59
    3030:	0f 92       	push	r0
    3032:	2f 93       	push	r18
    3034:	3f 93       	push	r19
    3036:	4f 93       	push	r20
    3038:	5f 93       	push	r21
    303a:	6f 93       	push	r22
    303c:	7f 93       	push	r23
    303e:	8f 93       	push	r24
    3040:	9f 93       	push	r25
    3042:	af 93       	push	r26
    3044:	bf 93       	push	r27
    3046:	ef 93       	push	r30
    3048:	ff 93       	push	r31
    304a:	81 e9       	ldi	r24, 0x91	; 145
    304c:	96 e0       	ldi	r25, 0x06	; 6
    304e:	0c dd       	rcall	.-1512   	; 0x2a68 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3050:	ff 91       	pop	r31
    3052:	ef 91       	pop	r30
    3054:	bf 91       	pop	r27
    3056:	af 91       	pop	r26
    3058:	9f 91       	pop	r25
    305a:	8f 91       	pop	r24
    305c:	7f 91       	pop	r23
    305e:	6f 91       	pop	r22
    3060:	5f 91       	pop	r21
    3062:	4f 91       	pop	r20
    3064:	3f 91       	pop	r19
    3066:	2f 91       	pop	r18
    3068:	0f 90       	pop	r0
    306a:	0b be       	out	0x3b, r0	; 59
    306c:	0f 90       	pop	r0
    306e:	0f be       	out	0x3f, r0	; 63
    3070:	0f 90       	pop	r0
    3072:	1f 90       	pop	r1
    3074:	18 95       	reti

00003076 <_GLOBAL__sub_I___vector_54>:
    3076:	e1 e9       	ldi	r30, 0x91	; 145
    3078:	f6 e0       	ldi	r31, 0x06	; 6
    307a:	8f ea       	ldi	r24, 0xAF	; 175
    307c:	92 e0       	ldi	r25, 0x02	; 2
    307e:	91 83       	std	Z+1, r25	; 0x01
    3080:	80 83       	st	Z, r24
    3082:	85 e3       	ldi	r24, 0x35	; 53
    3084:	91 e0       	ldi	r25, 0x01	; 1
    3086:	93 83       	std	Z+3, r25	; 0x03
    3088:	82 83       	std	Z+2, r24	; 0x02
    308a:	84 e3       	ldi	r24, 0x34	; 52
    308c:	91 e0       	ldi	r25, 0x01	; 1
    308e:	95 83       	std	Z+5, r25	; 0x05
    3090:	84 83       	std	Z+4, r24	; 0x04
    3092:	80 e3       	ldi	r24, 0x30	; 48
    3094:	91 e0       	ldi	r25, 0x01	; 1
    3096:	97 83       	std	Z+7, r25	; 0x07
    3098:	86 83       	std	Z+6, r24	; 0x06
    309a:	81 e3       	ldi	r24, 0x31	; 49
    309c:	91 e0       	ldi	r25, 0x01	; 1
    309e:	91 87       	std	Z+9, r25	; 0x09
    30a0:	80 87       	std	Z+8, r24	; 0x08
    30a2:	82 e3       	ldi	r24, 0x32	; 50
    30a4:	91 e0       	ldi	r25, 0x01	; 1
    30a6:	93 87       	std	Z+11, r25	; 0x0b
    30a8:	82 87       	std	Z+10, r24	; 0x0a
    30aa:	86 e3       	ldi	r24, 0x36	; 54
    30ac:	91 e0       	ldi	r25, 0x01	; 1
    30ae:	95 87       	std	Z+13, r25	; 0x0d
    30b0:	84 87       	std	Z+12, r24	; 0x0c
    30b2:	17 86       	std	Z+15, r1	; 0x0f
    30b4:	10 8a       	std	Z+16, r1	; 0x10
    30b6:	11 8a       	std	Z+17, r1	; 0x11
    30b8:	12 8a       	std	Z+18, r1	; 0x12
    30ba:	08 95       	ret

000030bc <_ZN13HardwareServo5beginEv>:
void HardwareServo::setMaxA(uint16_t us){
	_maxA = us;
}

void HardwareServo::setMaxB(uint16_t us){
	_maxB = us;
    30bc:	fc 01       	movw	r30, r24
    30be:	a2 81       	ldd	r26, Z+2	; 0x02
    30c0:	b3 81       	ldd	r27, Z+3	; 0x03
    30c2:	82 e0       	ldi	r24, 0x02	; 2
    30c4:	8c 93       	st	X, r24
    30c6:	a4 81       	ldd	r26, Z+4	; 0x04
    30c8:	b5 81       	ldd	r27, Z+5	; 0x05
    30ca:	8a e1       	ldi	r24, 0x1A	; 26
    30cc:	8c 93       	st	X, r24
    30ce:	01 90       	ld	r0, Z+
    30d0:	f0 81       	ld	r31, Z
    30d2:	e0 2d       	mov	r30, r0
    30d4:	80 e4       	ldi	r24, 0x40	; 64
    30d6:	9c e9       	ldi	r25, 0x9C	; 156
    30d8:	91 83       	std	Z+1, r25	; 0x01
    30da:	80 83       	st	Z, r24
    30dc:	08 95       	ret

000030de <_ZN13HardwareServo7EnableCEv>:
    30de:	fc 01       	movw	r30, r24
    30e0:	a2 81       	ldd	r26, Z+2	; 0x02
    30e2:	b3 81       	ldd	r27, Z+3	; 0x03
    30e4:	8c 91       	ld	r24, X
    30e6:	88 60       	ori	r24, 0x08	; 8
    30e8:	8c 93       	st	X, r24
    30ea:	a4 85       	ldd	r26, Z+12	; 0x0c
    30ec:	b5 85       	ldd	r27, Z+13	; 0x0d
    30ee:	9c 91       	ld	r25, X
    30f0:	80 89       	ldd	r24, Z+16	; 0x10
    30f2:	89 2b       	or	r24, r25
    30f4:	8c 93       	st	X, r24
    30f6:	08 95       	ret

000030f8 <_ZN13HardwareServo8DisableCEv>:
    30f8:	dc 01       	movw	r26, r24
    30fa:	12 96       	adiw	r26, 0x02	; 2
    30fc:	ed 91       	ld	r30, X+
    30fe:	fc 91       	ld	r31, X
    3100:	13 97       	sbiw	r26, 0x03	; 3
    3102:	80 81       	ld	r24, Z
    3104:	87 7f       	andi	r24, 0xF7	; 247
    3106:	80 83       	st	Z, r24
    3108:	08 95       	ret

0000310a <_ZN13HardwareServo9setPulseCEh>:
    310a:	0f 93       	push	r16
    310c:	1f 93       	push	r17
    310e:	cf 93       	push	r28
    3110:	df 93       	push	r29
    3112:	fc 01       	movw	r30, r24
    3114:	c2 85       	ldd	r28, Z+10	; 0x0a
    3116:	d3 85       	ldd	r29, Z+11	; 0x0b
    3118:	05 89       	ldd	r16, Z+21	; 0x15
    311a:	16 89       	ldd	r17, Z+22	; 0x16
    311c:	23 8d       	ldd	r18, Z+27	; 0x1b
    311e:	34 8d       	ldd	r19, Z+28	; 0x1c
    3120:	20 1b       	sub	r18, r16
    3122:	31 0b       	sbc	r19, r17
    3124:	a6 2f       	mov	r26, r22
    3126:	b0 e0       	ldi	r27, 0x00	; 0
    3128:	0e 94 8c 24 	call	0x4918	; 0x4918 <__umulhisi3>
    312c:	2f ef       	ldi	r18, 0xFF	; 255
    312e:	30 e0       	ldi	r19, 0x00	; 0
    3130:	40 e0       	ldi	r20, 0x00	; 0
    3132:	50 e0       	ldi	r21, 0x00	; 0
    3134:	0e 94 62 24 	call	0x48c4	; 0x48c4 <__udivmodsi4>
    3138:	da 01       	movw	r26, r20
    313a:	c9 01       	movw	r24, r18
    313c:	80 0f       	add	r24, r16
    313e:	91 1f       	adc	r25, r17
    3140:	a1 1d       	adc	r26, r1
    3142:	b1 1d       	adc	r27, r1
    3144:	9c 01       	movw	r18, r24
    3146:	22 0f       	add	r18, r18
    3148:	33 1f       	adc	r19, r19
    314a:	39 83       	std	Y+1, r19	; 0x01
    314c:	28 83       	st	Y, r18
    314e:	df 91       	pop	r29
    3150:	cf 91       	pop	r28
    3152:	1f 91       	pop	r17
    3154:	0f 91       	pop	r16
    3156:	08 95       	ret

00003158 <_ZN13HardwareServo7setMinCEj>:
    3158:	fc 01       	movw	r30, r24
    315a:	76 8b       	std	Z+22, r23	; 0x16
    315c:	65 8b       	std	Z+21, r22	; 0x15
    315e:	08 95       	ret

00003160 <_ZN13HardwareServo7setMaxCEj>:
}

void HardwareServo::setMaxC(uint16_t us){
	_maxC = us;
    3160:	fc 01       	movw	r30, r24
    3162:	74 8f       	std	Z+28, r23	; 0x1c
    3164:	63 8f       	std	Z+27, r22	; 0x1b
    3166:	08 95       	ret

00003168 <_GLOBAL__sub_I__ZN13HardwareServoC2ERVjRVhS3_S1_S1_S1_S3_hhh>:
#define CLK_DIV_1024 (_B(CS02) | _BV(CS00))

HardwareServo::HardwareServo(Register16 &icr, Register &tccrA, Register &tccrB, Register16 &ocrA, Register16 &ocrB, Register16 &ocrC, Register &ddr, const uint8_t pinA, const uint8_t pinB, const uint8_t pinC)
 : _icr(&icr), _tccrA(&tccrA), _tccrB(&tccrB), _ocrA(&ocrA), _ocrB(&ocrB), _ocrC(&ocrC),
  _DDR(&ddr), _PINA(pinA), _PINB(pinB), _PINC(pinC),
  _minA(1000), _minB(1000), _minC(1000), _maxA(2000), _maxB(2000), _maxC(2000)
    3168:	eb e1       	ldi	r30, 0x1B	; 27
    316a:	f7 e0       	ldi	r31, 0x07	; 7
    316c:	86 e8       	ldi	r24, 0x86	; 134
    316e:	90 e0       	ldi	r25, 0x00	; 0
    3170:	91 83       	std	Z+1, r25	; 0x01
    3172:	80 83       	st	Z, r24
    3174:	80 e8       	ldi	r24, 0x80	; 128
    3176:	90 e0       	ldi	r25, 0x00	; 0
    3178:	93 83       	std	Z+3, r25	; 0x03
    317a:	82 83       	std	Z+2, r24	; 0x02
    317c:	81 e8       	ldi	r24, 0x81	; 129
    317e:	90 e0       	ldi	r25, 0x00	; 0
    3180:	95 83       	std	Z+5, r25	; 0x05
    3182:	84 83       	std	Z+4, r24	; 0x04
    3184:	88 e8       	ldi	r24, 0x88	; 136
    3186:	90 e0       	ldi	r25, 0x00	; 0
    3188:	97 83       	std	Z+7, r25	; 0x07
    318a:	86 83       	std	Z+6, r24	; 0x06
    318c:	8a e8       	ldi	r24, 0x8A	; 138
    318e:	90 e0       	ldi	r25, 0x00	; 0
    3190:	91 87       	std	Z+9, r25	; 0x09
    3192:	80 87       	std	Z+8, r24	; 0x08
    3194:	8c e8       	ldi	r24, 0x8C	; 140
    3196:	90 e0       	ldi	r25, 0x00	; 0
    3198:	93 87       	std	Z+11, r25	; 0x0b
    319a:	82 87       	std	Z+10, r24	; 0x0a
    319c:	84 e2       	ldi	r24, 0x24	; 36
    319e:	90 e0       	ldi	r25, 0x00	; 0
    31a0:	95 87       	std	Z+13, r25	; 0x0d
    31a2:	84 87       	std	Z+12, r24	; 0x0c
    31a4:	40 e2       	ldi	r20, 0x20	; 32
    31a6:	46 87       	std	Z+14, r20	; 0x0e
    31a8:	80 e4       	ldi	r24, 0x40	; 64
    31aa:	87 87       	std	Z+15, r24	; 0x0f
    31ac:	80 e8       	ldi	r24, 0x80	; 128
    31ae:	80 8b       	std	Z+16, r24	; 0x10
    31b0:	28 ee       	ldi	r18, 0xE8	; 232
    31b2:	33 e0       	ldi	r19, 0x03	; 3
    31b4:	32 8b       	std	Z+18, r19	; 0x12
    31b6:	21 8b       	std	Z+17, r18	; 0x11
    31b8:	34 8b       	std	Z+20, r19	; 0x14
    31ba:	23 8b       	std	Z+19, r18	; 0x13
    31bc:	36 8b       	std	Z+22, r19	; 0x16
    31be:	25 8b       	std	Z+21, r18	; 0x15
    31c0:	80 ed       	ldi	r24, 0xD0	; 208
    31c2:	97 e0       	ldi	r25, 0x07	; 7
    31c4:	90 8f       	std	Z+24, r25	; 0x18
    31c6:	87 8b       	std	Z+23, r24	; 0x17
    31c8:	92 8f       	std	Z+26, r25	; 0x1a
    31ca:	81 8f       	std	Z+25, r24	; 0x19
    31cc:	94 8f       	std	Z+28, r25	; 0x1c
    31ce:	83 8f       	std	Z+27, r24	; 0x1b
    31d0:	ee ef       	ldi	r30, 0xFE	; 254
    31d2:	f6 e0       	ldi	r31, 0x06	; 6
    31d4:	66 e9       	ldi	r22, 0x96	; 150
    31d6:	70 e0       	ldi	r23, 0x00	; 0
    31d8:	71 83       	std	Z+1, r23	; 0x01
    31da:	60 83       	st	Z, r22
    31dc:	60 e9       	ldi	r22, 0x90	; 144
    31de:	70 e0       	ldi	r23, 0x00	; 0
    31e0:	73 83       	std	Z+3, r23	; 0x03
    31e2:	62 83       	std	Z+2, r22	; 0x02
    31e4:	61 e9       	ldi	r22, 0x91	; 145
    31e6:	70 e0       	ldi	r23, 0x00	; 0
    31e8:	75 83       	std	Z+5, r23	; 0x05
    31ea:	64 83       	std	Z+4, r22	; 0x04
    31ec:	68 e9       	ldi	r22, 0x98	; 152
    31ee:	70 e0       	ldi	r23, 0x00	; 0
    31f0:	77 83       	std	Z+7, r23	; 0x07
    31f2:	66 83       	std	Z+6, r22	; 0x06
    31f4:	6a e9       	ldi	r22, 0x9A	; 154
    31f6:	70 e0       	ldi	r23, 0x00	; 0
    31f8:	71 87       	std	Z+9, r23	; 0x09
    31fa:	60 87       	std	Z+8, r22	; 0x08
    31fc:	6c e9       	ldi	r22, 0x9C	; 156
    31fe:	70 e0       	ldi	r23, 0x00	; 0
    3200:	73 87       	std	Z+11, r23	; 0x0b
    3202:	62 87       	std	Z+10, r22	; 0x0a
    3204:	6d e2       	ldi	r22, 0x2D	; 45
    3206:	70 e0       	ldi	r23, 0x00	; 0
    3208:	75 87       	std	Z+13, r23	; 0x0d
    320a:	64 87       	std	Z+12, r22	; 0x0c
    320c:	68 e0       	ldi	r22, 0x08	; 8
    320e:	66 87       	std	Z+14, r22	; 0x0e
    3210:	50 e1       	ldi	r21, 0x10	; 16
    3212:	57 87       	std	Z+15, r21	; 0x0f
    3214:	40 8b       	std	Z+16, r20	; 0x10
    3216:	32 8b       	std	Z+18, r19	; 0x12
    3218:	21 8b       	std	Z+17, r18	; 0x11
    321a:	34 8b       	std	Z+20, r19	; 0x14
    321c:	23 8b       	std	Z+19, r18	; 0x13
    321e:	36 8b       	std	Z+22, r19	; 0x16
    3220:	25 8b       	std	Z+21, r18	; 0x15
    3222:	90 8f       	std	Z+24, r25	; 0x18
    3224:	87 8b       	std	Z+23, r24	; 0x17
    3226:	92 8f       	std	Z+26, r25	; 0x1a
    3228:	81 8f       	std	Z+25, r24	; 0x19
    322a:	94 8f       	std	Z+28, r25	; 0x1c
    322c:	83 8f       	std	Z+27, r24	; 0x1b
    322e:	e1 ee       	ldi	r30, 0xE1	; 225
    3230:	f6 e0       	ldi	r31, 0x06	; 6
    3232:	a6 ea       	ldi	r26, 0xA6	; 166
    3234:	b0 e0       	ldi	r27, 0x00	; 0
    3236:	b1 83       	std	Z+1, r27	; 0x01
    3238:	a0 83       	st	Z, r26
    323a:	a0 ea       	ldi	r26, 0xA0	; 160
    323c:	b0 e0       	ldi	r27, 0x00	; 0
    323e:	b3 83       	std	Z+3, r27	; 0x03
    3240:	a2 83       	std	Z+2, r26	; 0x02
    3242:	a1 ea       	ldi	r26, 0xA1	; 161
    3244:	b0 e0       	ldi	r27, 0x00	; 0
    3246:	b5 83       	std	Z+5, r27	; 0x05
    3248:	a4 83       	std	Z+4, r26	; 0x04
    324a:	a8 ea       	ldi	r26, 0xA8	; 168
    324c:	b0 e0       	ldi	r27, 0x00	; 0
    324e:	b7 83       	std	Z+7, r27	; 0x07
    3250:	a6 83       	std	Z+6, r26	; 0x06
    3252:	aa ea       	ldi	r26, 0xAA	; 170
    3254:	b0 e0       	ldi	r27, 0x00	; 0
    3256:	b1 87       	std	Z+9, r27	; 0x09
    3258:	a0 87       	std	Z+8, r26	; 0x08
    325a:	ac ea       	ldi	r26, 0xAC	; 172
    325c:	b0 e0       	ldi	r27, 0x00	; 0
    325e:	b3 87       	std	Z+11, r27	; 0x0b
    3260:	a2 87       	std	Z+10, r26	; 0x0a
    3262:	a1 e0       	ldi	r26, 0x01	; 1
    3264:	b1 e0       	ldi	r27, 0x01	; 1
    3266:	b5 87       	std	Z+13, r27	; 0x0d
    3268:	a4 87       	std	Z+12, r26	; 0x0c
    326a:	66 87       	std	Z+14, r22	; 0x0e
    326c:	57 87       	std	Z+15, r21	; 0x0f
    326e:	40 8b       	std	Z+16, r20	; 0x10
    3270:	32 8b       	std	Z+18, r19	; 0x12
    3272:	21 8b       	std	Z+17, r18	; 0x11
    3274:	34 8b       	std	Z+20, r19	; 0x14
    3276:	23 8b       	std	Z+19, r18	; 0x13
    3278:	36 8b       	std	Z+22, r19	; 0x16
    327a:	25 8b       	std	Z+21, r18	; 0x15
    327c:	90 8f       	std	Z+24, r25	; 0x18
    327e:	87 8b       	std	Z+23, r24	; 0x17
    3280:	92 8f       	std	Z+26, r25	; 0x1a
    3282:	81 8f       	std	Z+25, r24	; 0x19
    3284:	94 8f       	std	Z+28, r25	; 0x1c
    3286:	83 8f       	std	Z+27, r24	; 0x1b
    3288:	e4 ec       	ldi	r30, 0xC4	; 196
    328a:	f6 e0       	ldi	r31, 0x06	; 6
    328c:	a6 e2       	ldi	r26, 0x26	; 38
    328e:	b1 e0       	ldi	r27, 0x01	; 1
    3290:	b1 83       	std	Z+1, r27	; 0x01
    3292:	a0 83       	st	Z, r26
    3294:	a0 e2       	ldi	r26, 0x20	; 32
    3296:	b1 e0       	ldi	r27, 0x01	; 1
    3298:	b3 83       	std	Z+3, r27	; 0x03
    329a:	a2 83       	std	Z+2, r26	; 0x02
    329c:	a1 e2       	ldi	r26, 0x21	; 33
    329e:	b1 e0       	ldi	r27, 0x01	; 1
    32a0:	b5 83       	std	Z+5, r27	; 0x05
    32a2:	a4 83       	std	Z+4, r26	; 0x04
    32a4:	a8 e2       	ldi	r26, 0x28	; 40
    32a6:	b1 e0       	ldi	r27, 0x01	; 1
    32a8:	b7 83       	std	Z+7, r27	; 0x07
    32aa:	a6 83       	std	Z+6, r26	; 0x06
    32ac:	aa e2       	ldi	r26, 0x2A	; 42
    32ae:	b1 e0       	ldi	r27, 0x01	; 1
    32b0:	b1 87       	std	Z+9, r27	; 0x09
    32b2:	a0 87       	std	Z+8, r26	; 0x08
    32b4:	ac e2       	ldi	r26, 0x2C	; 44
    32b6:	b1 e0       	ldi	r27, 0x01	; 1
    32b8:	b3 87       	std	Z+11, r27	; 0x0b
    32ba:	a2 87       	std	Z+10, r26	; 0x0a
    32bc:	aa e0       	ldi	r26, 0x0A	; 10
    32be:	b1 e0       	ldi	r27, 0x01	; 1
    32c0:	b5 87       	std	Z+13, r27	; 0x0d
    32c2:	a4 87       	std	Z+12, r26	; 0x0c
    32c4:	66 87       	std	Z+14, r22	; 0x0e
    32c6:	57 87       	std	Z+15, r21	; 0x0f
    32c8:	40 8b       	std	Z+16, r20	; 0x10
    32ca:	32 8b       	std	Z+18, r19	; 0x12
    32cc:	21 8b       	std	Z+17, r18	; 0x11
    32ce:	34 8b       	std	Z+20, r19	; 0x14
    32d0:	23 8b       	std	Z+19, r18	; 0x13
    32d2:	36 8b       	std	Z+22, r19	; 0x16
    32d4:	25 8b       	std	Z+21, r18	; 0x15
    32d6:	90 8f       	std	Z+24, r25	; 0x18
    32d8:	87 8b       	std	Z+23, r24	; 0x17
    32da:	92 8f       	std	Z+26, r25	; 0x1a
    32dc:	81 8f       	std	Z+25, r24	; 0x19
    32de:	94 8f       	std	Z+28, r25	; 0x1c
    32e0:	83 8f       	std	Z+27, r24	; 0x1b
    32e2:	08 95       	ret

000032e4 <_ZN13HardwareTimer12findPrescaleEf>:
	beginMs(us / 1000.0);
}

void HardwareTimer::beginNs(float ns){
	beginMs(ns / 1000000.0);
}
    32e4:	cf 92       	push	r12
    32e6:	df 92       	push	r13
    32e8:	ef 92       	push	r14
    32ea:	ff 92       	push	r15
    32ec:	cf 93       	push	r28
    32ee:	df 93       	push	r29
    32f0:	ec 01       	movw	r28, r24
    32f2:	cb 01       	movw	r24, r22
    32f4:	ba 01       	movw	r22, r20
    32f6:	20 e0       	ldi	r18, 0x00	; 0
    32f8:	30 e0       	ldi	r19, 0x00	; 0
    32fa:	4a e7       	ldi	r20, 0x7A	; 122
    32fc:	56 e4       	ldi	r21, 0x46	; 70
    32fe:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <__mulsf3>
    3302:	20 e0       	ldi	r18, 0x00	; 0
    3304:	30 e0       	ldi	r19, 0x00	; 0
    3306:	40 e8       	ldi	r20, 0x80	; 128
    3308:	5b e3       	ldi	r21, 0x3B	; 59
    330a:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <__mulsf3>
    330e:	6b 01       	movw	r12, r22
    3310:	7c 01       	movw	r14, r24
    3312:	20 e0       	ldi	r18, 0x00	; 0
    3314:	30 e0       	ldi	r19, 0x00	; 0
    3316:	40 e8       	ldi	r20, 0x80	; 128
    3318:	5f e3       	ldi	r21, 0x3F	; 63
    331a:	0e 94 a2 22 	call	0x4544	; 0x4544 <__cmpsf2>
    331e:	18 16       	cp	r1, r24
    3320:	3c f0       	brlt	.+14     	; 0x3330 <_ZN13HardwareTimer12findPrescaleEf+0x4c>
    3322:	81 e0       	ldi	r24, 0x01	; 1
    3324:	8a 87       	std	Y+10, r24	; 0x0a
    3326:	60 e0       	ldi	r22, 0x00	; 0
    3328:	70 e0       	ldi	r23, 0x00	; 0
    332a:	80 e8       	ldi	r24, 0x80	; 128
    332c:	9f e3       	ldi	r25, 0x3F	; 63
    332e:	39 c0       	rjmp	.+114    	; 0x33a2 <_ZN13HardwareTimer12findPrescaleEf+0xbe>
    3330:	20 e0       	ldi	r18, 0x00	; 0
    3332:	30 e0       	ldi	r19, 0x00	; 0
    3334:	40 e0       	ldi	r20, 0x00	; 0
    3336:	51 e4       	ldi	r21, 0x41	; 65
    3338:	c7 01       	movw	r24, r14
    333a:	b6 01       	movw	r22, r12
    333c:	0e 94 a2 22 	call	0x4544	; 0x4544 <__cmpsf2>
    3340:	18 16       	cp	r1, r24
    3342:	3c f0       	brlt	.+14     	; 0x3352 <_ZN13HardwareTimer12findPrescaleEf+0x6e>
    3344:	82 e0       	ldi	r24, 0x02	; 2
    3346:	8a 87       	std	Y+10, r24	; 0x0a
    3348:	60 e0       	ldi	r22, 0x00	; 0
    334a:	70 e0       	ldi	r23, 0x00	; 0
    334c:	80 e0       	ldi	r24, 0x00	; 0
    334e:	91 e4       	ldi	r25, 0x41	; 65
    3350:	28 c0       	rjmp	.+80     	; 0x33a2 <_ZN13HardwareTimer12findPrescaleEf+0xbe>
    3352:	20 e0       	ldi	r18, 0x00	; 0
    3354:	30 e0       	ldi	r19, 0x00	; 0
    3356:	40 e8       	ldi	r20, 0x80	; 128
    3358:	52 e4       	ldi	r21, 0x42	; 66
    335a:	c7 01       	movw	r24, r14
    335c:	b6 01       	movw	r22, r12
    335e:	0e 94 a2 22 	call	0x4544	; 0x4544 <__cmpsf2>
    3362:	18 16       	cp	r1, r24
    3364:	3c f0       	brlt	.+14     	; 0x3374 <_ZN13HardwareTimer12findPrescaleEf+0x90>
    3366:	83 e0       	ldi	r24, 0x03	; 3
    3368:	8a 87       	std	Y+10, r24	; 0x0a
    336a:	60 e0       	ldi	r22, 0x00	; 0
    336c:	70 e0       	ldi	r23, 0x00	; 0
    336e:	80 e8       	ldi	r24, 0x80	; 128
    3370:	92 e4       	ldi	r25, 0x42	; 66
    3372:	17 c0       	rjmp	.+46     	; 0x33a2 <_ZN13HardwareTimer12findPrescaleEf+0xbe>
    3374:	20 e0       	ldi	r18, 0x00	; 0
    3376:	30 e0       	ldi	r19, 0x00	; 0
    3378:	40 e8       	ldi	r20, 0x80	; 128
    337a:	53 e4       	ldi	r21, 0x43	; 67
    337c:	c7 01       	movw	r24, r14
    337e:	b6 01       	movw	r22, r12
    3380:	0e 94 a2 22 	call	0x4544	; 0x4544 <__cmpsf2>
    3384:	18 16       	cp	r1, r24
    3386:	3c f0       	brlt	.+14     	; 0x3396 <_ZN13HardwareTimer12findPrescaleEf+0xb2>
    3388:	84 e0       	ldi	r24, 0x04	; 4
    338a:	8a 87       	std	Y+10, r24	; 0x0a
    338c:	60 e0       	ldi	r22, 0x00	; 0
    338e:	70 e0       	ldi	r23, 0x00	; 0
    3390:	80 e8       	ldi	r24, 0x80	; 128
    3392:	93 e4       	ldi	r25, 0x43	; 67
    3394:	06 c0       	rjmp	.+12     	; 0x33a2 <_ZN13HardwareTimer12findPrescaleEf+0xbe>
    3396:	85 e0       	ldi	r24, 0x05	; 5
    3398:	8a 87       	std	Y+10, r24	; 0x0a
    339a:	60 e0       	ldi	r22, 0x00	; 0
    339c:	70 e0       	ldi	r23, 0x00	; 0
    339e:	80 e8       	ldi	r24, 0x80	; 128
    33a0:	94 e4       	ldi	r25, 0x44	; 68
    33a2:	df 91       	pop	r29
    33a4:	cf 91       	pop	r28
    33a6:	ff 90       	pop	r15
    33a8:	ef 90       	pop	r14
    33aa:	df 90       	pop	r13
    33ac:	cf 90       	pop	r12
    33ae:	08 95       	ret

000033b0 <_ZN13HardwareTimer7beginMsEf>:
    33b0:	8f 92       	push	r8
    33b2:	9f 92       	push	r9
    33b4:	af 92       	push	r10
    33b6:	bf 92       	push	r11
    33b8:	cf 92       	push	r12
    33ba:	df 92       	push	r13
    33bc:	ef 92       	push	r14
    33be:	ff 92       	push	r15
    33c0:	cf 93       	push	r28
    33c2:	df 93       	push	r29
    33c4:	ec 01       	movw	r28, r24
    33c6:	6a 01       	movw	r12, r20
    33c8:	7b 01       	movw	r14, r22
    33ca:	e8 81       	ld	r30, Y
    33cc:	f9 81       	ldd	r31, Y+1	; 0x01
    33ce:	82 e0       	ldi	r24, 0x02	; 2
    33d0:	80 83       	st	Z, r24
    33d2:	ea 81       	ldd	r30, Y+2	; 0x02
    33d4:	fb 81       	ldd	r31, Y+3	; 0x03
    33d6:	10 82       	st	Z, r1
    33d8:	ec 81       	ldd	r30, Y+4	; 0x04
    33da:	fd 81       	ldd	r31, Y+5	; 0x05
    33dc:	80 83       	st	Z, r24
    33de:	78 94       	sei
    33e0:	ce 01       	movw	r24, r28
    33e2:	80 df       	rcall	.-256    	; 0x32e4 <_ZN13HardwareTimer12findPrescaleEf>
    33e4:	4b 01       	movw	r8, r22
    33e6:	5c 01       	movw	r10, r24
    33e8:	20 e0       	ldi	r18, 0x00	; 0
    33ea:	34 e2       	ldi	r19, 0x24	; 36
    33ec:	44 e7       	ldi	r20, 0x74	; 116
    33ee:	5b e4       	ldi	r21, 0x4B	; 75
    33f0:	c7 01       	movw	r24, r14
    33f2:	b6 01       	movw	r22, r12
    33f4:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <__mulsf3>
    33f8:	6b 01       	movw	r12, r22
    33fa:	7c 01       	movw	r14, r24
    33fc:	20 e0       	ldi	r18, 0x00	; 0
    33fe:	30 e0       	ldi	r19, 0x00	; 0
    3400:	4a e7       	ldi	r20, 0x7A	; 122
    3402:	54 e4       	ldi	r21, 0x44	; 68
    3404:	c5 01       	movw	r24, r10
    3406:	b4 01       	movw	r22, r8
    3408:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <__mulsf3>
    340c:	9b 01       	movw	r18, r22
    340e:	ac 01       	movw	r20, r24
    3410:	c7 01       	movw	r24, r14
    3412:	b6 01       	movw	r22, r12
    3414:	0e 94 a6 22 	call	0x454c	; 0x454c <__divsf3>
    3418:	20 e0       	ldi	r18, 0x00	; 0
    341a:	30 e0       	ldi	r19, 0x00	; 0
    341c:	40 e8       	ldi	r20, 0x80	; 128
    341e:	5f e3       	ldi	r21, 0x3F	; 63
    3420:	0e 94 3d 22 	call	0x447a	; 0x447a <__subsf3>
    3424:	6b 01       	movw	r12, r22
    3426:	7c 01       	movw	r14, r24
    3428:	20 e0       	ldi	r18, 0x00	; 0
    342a:	30 e0       	ldi	r19, 0x00	; 0
    342c:	4f e7       	ldi	r20, 0x7F	; 127
    342e:	53 e4       	ldi	r21, 0x43	; 67
    3430:	0e 94 ec 23 	call	0x47d8	; 0x47d8 <__gesf2>
    3434:	18 16       	cp	r1, r24
    3436:	2c f4       	brge	.+10     	; 0x3442 <_ZN13HardwareTimer7beginMsEf+0x92>
    3438:	e8 85       	ldd	r30, Y+8	; 0x08
    343a:	f9 85       	ldd	r31, Y+9	; 0x09
    343c:	8f ef       	ldi	r24, 0xFF	; 255
    343e:	80 83       	st	Z, r24
    3440:	1b c0       	rjmp	.+54     	; 0x3478 <_ZN13HardwareTimer7beginMsEf+0xc8>
    3442:	20 e0       	ldi	r18, 0x00	; 0
    3444:	30 e0       	ldi	r19, 0x00	; 0
    3446:	a9 01       	movw	r20, r18
    3448:	c7 01       	movw	r24, r14
    344a:	b6 01       	movw	r22, r12
    344c:	0e 94 a2 22 	call	0x4544	; 0x4544 <__cmpsf2>
    3450:	88 23       	and	r24, r24
    3452:	24 f4       	brge	.+8      	; 0x345c <_ZN13HardwareTimer7beginMsEf+0xac>
    3454:	e8 85       	ldd	r30, Y+8	; 0x08
    3456:	f9 85       	ldd	r31, Y+9	; 0x09
    3458:	10 82       	st	Z, r1
    345a:	0e c0       	rjmp	.+28     	; 0x3478 <_ZN13HardwareTimer7beginMsEf+0xc8>
    345c:	08 84       	ldd	r0, Y+8	; 0x08
    345e:	d9 85       	ldd	r29, Y+9	; 0x09
    3460:	c0 2d       	mov	r28, r0
    3462:	20 e0       	ldi	r18, 0x00	; 0
    3464:	30 e0       	ldi	r19, 0x00	; 0
    3466:	40 e0       	ldi	r20, 0x00	; 0
    3468:	5f e3       	ldi	r21, 0x3F	; 63
    346a:	c7 01       	movw	r24, r14
    346c:	b6 01       	movw	r22, r12
    346e:	0e 94 3e 22 	call	0x447c	; 0x447c <__addsf3>
    3472:	0e 94 0e 23 	call	0x461c	; 0x461c <__fixunssfsi>
    3476:	68 83       	st	Y, r22
    3478:	df 91       	pop	r29
    347a:	cf 91       	pop	r28
    347c:	ff 90       	pop	r15
    347e:	ef 90       	pop	r14
    3480:	df 90       	pop	r13
    3482:	cf 90       	pop	r12
    3484:	bf 90       	pop	r11
    3486:	af 90       	pop	r10
    3488:	9f 90       	pop	r9
    348a:	8f 90       	pop	r8
    348c:	08 95       	ret

0000348e <_ZN13HardwareTimer5startEh>:

void HardwareTimer::start(uint8_t ticks/*= 1*/){
    348e:	fc 01       	movw	r30, r24
	*_tccrB = 0; //Disable timer
    3490:	a2 81       	ldd	r26, Z+2	; 0x02
    3492:	b3 81       	ldd	r27, Z+3	; 0x03
    3494:	1c 92       	st	X, r1
	ovfRemaining = ticks;
    3496:	63 87       	std	Z+11, r22	; 0x0b
	*_tcnt = 0; //Reset timer
    3498:	a6 81       	ldd	r26, Z+6	; 0x06
    349a:	b7 81       	ldd	r27, Z+7	; 0x07
    349c:	1c 92       	st	X, r1
	*_tccrB = CLK_DIV_1024; 
    349e:	02 80       	ldd	r0, Z+2	; 0x02
    34a0:	f3 81       	ldd	r31, Z+3	; 0x03
    34a2:	e0 2d       	mov	r30, r0
    34a4:	85 e0       	ldi	r24, 0x05	; 5
    34a6:	80 83       	st	Z, r24
    34a8:	08 95       	ret

000034aa <_ZN13HardwareTimer8finishedEv>:
}

bool HardwareTimer::finished(){
	return ovfRemaining == 0;
    34aa:	fc 01       	movw	r30, r24
    34ac:	93 85       	ldd	r25, Z+11	; 0x0b
    34ae:	81 e0       	ldi	r24, 0x01	; 1
    34b0:	91 11       	cpse	r25, r1
    34b2:	80 e0       	ldi	r24, 0x00	; 0
}
    34b4:	08 95       	ret

000034b6 <_ZN13HardwareTimer13waitForFinishEv>:

void HardwareTimer::waitForFinish(){
    34b6:	fc 01       	movw	r30, r24
	while(ovfRemaining != 0){
    34b8:	93 85       	ldd	r25, Z+11	; 0x0b
    34ba:	91 11       	cpse	r25, r1
    34bc:	fd cf       	rjmp	.-6      	; 0x34b8 <_ZN13HardwareTimer13waitForFinishEv+0x2>
	}
}
    34be:	08 95       	ret

000034c0 <_ZN13HardwareTimer14isr_timer_compEv>:

void HardwareTimer::isr_timer_comp(){
    34c0:	fc 01       	movw	r30, r24
	if(ovfRemaining > 0) ovfRemaining--;
    34c2:	83 85       	ldd	r24, Z+11	; 0x0b
    34c4:	88 23       	and	r24, r24
    34c6:	19 f0       	breq	.+6      	; 0x34ce <_ZN13HardwareTimer14isr_timer_compEv+0xe>
    34c8:	83 85       	ldd	r24, Z+11	; 0x0b
    34ca:	81 50       	subi	r24, 0x01	; 1
    34cc:	83 87       	std	Z+11, r24	; 0x0b
    34ce:	08 95       	ret

000034d0 <__vector_21>:
}

#ifdef USE_TIMER_0
HardwareTimer Timer0(TCCR0A, TCCR0B, TIMSK0, TCNT0, OCR0A);

ISR(TIMER0_COMPA_vect){
    34d0:	1f 92       	push	r1
    34d2:	0f 92       	push	r0
    34d4:	0f b6       	in	r0, 0x3f	; 63
    34d6:	0f 92       	push	r0
    34d8:	11 24       	eor	r1, r1
    34da:	0b b6       	in	r0, 0x3b	; 59
    34dc:	0f 92       	push	r0
    34de:	2f 93       	push	r18
    34e0:	3f 93       	push	r19
    34e2:	4f 93       	push	r20
    34e4:	5f 93       	push	r21
    34e6:	6f 93       	push	r22
    34e8:	7f 93       	push	r23
    34ea:	8f 93       	push	r24
    34ec:	9f 93       	push	r25
    34ee:	af 93       	push	r26
    34f0:	bf 93       	push	r27
    34f2:	ef 93       	push	r30
    34f4:	ff 93       	push	r31
	Timer0.isr_timer_comp();
    34f6:	84 e4       	ldi	r24, 0x44	; 68
    34f8:	97 e0       	ldi	r25, 0x07	; 7
    34fa:	e2 df       	rcall	.-60     	; 0x34c0 <_ZN13HardwareTimer14isr_timer_compEv>
}
    34fc:	ff 91       	pop	r31
    34fe:	ef 91       	pop	r30
    3500:	bf 91       	pop	r27
    3502:	af 91       	pop	r26
    3504:	9f 91       	pop	r25
    3506:	8f 91       	pop	r24
    3508:	7f 91       	pop	r23
    350a:	6f 91       	pop	r22
    350c:	5f 91       	pop	r21
    350e:	4f 91       	pop	r20
    3510:	3f 91       	pop	r19
    3512:	2f 91       	pop	r18
    3514:	0f 90       	pop	r0
    3516:	0b be       	out	0x3b, r0	; 59
    3518:	0f 90       	pop	r0
    351a:	0f be       	out	0x3f, r0	; 63
    351c:	0f 90       	pop	r0
    351e:	1f 90       	pop	r1
    3520:	18 95       	reti

00003522 <__vector_13>:
#endif

#ifdef USE_TIMER_2
HardwareTimer Timer2(TCCR2A, TCCR2B, TIMSK2, TCNT2, OCR2A);

ISR(TIMER2_COMPA_vect){
    3522:	1f 92       	push	r1
    3524:	0f 92       	push	r0
    3526:	0f b6       	in	r0, 0x3f	; 63
    3528:	0f 92       	push	r0
    352a:	11 24       	eor	r1, r1
    352c:	0b b6       	in	r0, 0x3b	; 59
    352e:	0f 92       	push	r0
    3530:	2f 93       	push	r18
    3532:	3f 93       	push	r19
    3534:	4f 93       	push	r20
    3536:	5f 93       	push	r21
    3538:	6f 93       	push	r22
    353a:	7f 93       	push	r23
    353c:	8f 93       	push	r24
    353e:	9f 93       	push	r25
    3540:	af 93       	push	r26
    3542:	bf 93       	push	r27
    3544:	ef 93       	push	r30
    3546:	ff 93       	push	r31
	Timer2.isr_timer_comp();
    3548:	88 e3       	ldi	r24, 0x38	; 56
    354a:	97 e0       	ldi	r25, 0x07	; 7
    354c:	b9 df       	rcall	.-142    	; 0x34c0 <_ZN13HardwareTimer14isr_timer_compEv>
}
    354e:	ff 91       	pop	r31
    3550:	ef 91       	pop	r30
    3552:	bf 91       	pop	r27
    3554:	af 91       	pop	r26
    3556:	9f 91       	pop	r25
    3558:	8f 91       	pop	r24
    355a:	7f 91       	pop	r23
    355c:	6f 91       	pop	r22
    355e:	5f 91       	pop	r21
    3560:	4f 91       	pop	r20
    3562:	3f 91       	pop	r19
    3564:	2f 91       	pop	r18
    3566:	0f 90       	pop	r0
    3568:	0b be       	out	0x3b, r0	; 59
    356a:	0f 90       	pop	r0
    356c:	0f be       	out	0x3f, r0	; 63
    356e:	0f 90       	pop	r0
    3570:	1f 90       	pop	r1
    3572:	18 95       	reti

00003574 <_GLOBAL__sub_I__ZN13HardwareTimerC2ERVhS1_S1_S1_S1_>:
#define CLK_DIV_64 (_BV(CS01) | _BV(CS00))
#define CLK_DIV_256 (_BV(CS02))
#define CLK_DIV_1024 (_BV(CS02) | _BV(CS00))

HardwareTimer::HardwareTimer(Register &tccrA, Register &tccrB, Register &timsk, Register &tcnt, Register &ocra)
: _tccrA(&tccrA), _tccrB(&tccrB), _timsk(&timsk), _tcnt(&tcnt), _ocra(&ocra)
    3574:	e4 e4       	ldi	r30, 0x44	; 68
    3576:	f7 e0       	ldi	r31, 0x07	; 7
    3578:	84 e4       	ldi	r24, 0x44	; 68
    357a:	90 e0       	ldi	r25, 0x00	; 0
    357c:	91 83       	std	Z+1, r25	; 0x01
    357e:	80 83       	st	Z, r24
    3580:	85 e4       	ldi	r24, 0x45	; 69
    3582:	90 e0       	ldi	r25, 0x00	; 0
    3584:	93 83       	std	Z+3, r25	; 0x03
    3586:	82 83       	std	Z+2, r24	; 0x02
    3588:	8e e6       	ldi	r24, 0x6E	; 110
    358a:	90 e0       	ldi	r25, 0x00	; 0
    358c:	95 83       	std	Z+5, r25	; 0x05
    358e:	84 83       	std	Z+4, r24	; 0x04
    3590:	86 e4       	ldi	r24, 0x46	; 70
    3592:	90 e0       	ldi	r25, 0x00	; 0
    3594:	97 83       	std	Z+7, r25	; 0x07
    3596:	86 83       	std	Z+6, r24	; 0x06
    3598:	87 e4       	ldi	r24, 0x47	; 71
    359a:	90 e0       	ldi	r25, 0x00	; 0
    359c:	91 87       	std	Z+9, r25	; 0x09
    359e:	80 87       	std	Z+8, r24	; 0x08
    35a0:	e8 e3       	ldi	r30, 0x38	; 56
    35a2:	f7 e0       	ldi	r31, 0x07	; 7
    35a4:	80 eb       	ldi	r24, 0xB0	; 176
    35a6:	90 e0       	ldi	r25, 0x00	; 0
    35a8:	91 83       	std	Z+1, r25	; 0x01
    35aa:	80 83       	st	Z, r24
    35ac:	81 eb       	ldi	r24, 0xB1	; 177
    35ae:	90 e0       	ldi	r25, 0x00	; 0
    35b0:	93 83       	std	Z+3, r25	; 0x03
    35b2:	82 83       	std	Z+2, r24	; 0x02
    35b4:	80 e7       	ldi	r24, 0x70	; 112
    35b6:	90 e0       	ldi	r25, 0x00	; 0
    35b8:	95 83       	std	Z+5, r25	; 0x05
    35ba:	84 83       	std	Z+4, r24	; 0x04
    35bc:	82 eb       	ldi	r24, 0xB2	; 178
    35be:	90 e0       	ldi	r25, 0x00	; 0
    35c0:	97 83       	std	Z+7, r25	; 0x07
    35c2:	86 83       	std	Z+6, r24	; 0x06
    35c4:	83 eb       	ldi	r24, 0xB3	; 179
    35c6:	90 e0       	ldi	r25, 0x00	; 0
    35c8:	91 87       	std	Z+9, r25	; 0x09
    35ca:	80 87       	std	Z+8, r24	; 0x08
    35cc:	08 95       	ret

000035ce <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    35ce:	10 92 bd 07 	sts	0x07BD, r1	; 0x8007bd <twi_state>
    35d2:	81 e0       	ldi	r24, 0x01	; 1
    35d4:	80 93 bb 07 	sts	0x07BB, r24	; 0x8007bb <twi_sendStop>
    35d8:	10 92 ba 07 	sts	0x07BA, r1	; 0x8007ba <twi_inRepStart>
    35dc:	8b b1       	in	r24, 0x0b	; 11
    35de:	83 60       	ori	r24, 0x03	; 3
    35e0:	8b b9       	out	0x0b, r24	; 11
    35e2:	e9 eb       	ldi	r30, 0xB9	; 185
    35e4:	f0 e0       	ldi	r31, 0x00	; 0
    35e6:	80 81       	ld	r24, Z
    35e8:	8e 7f       	andi	r24, 0xFE	; 254
    35ea:	80 83       	st	Z, r24
    35ec:	80 81       	ld	r24, Z
    35ee:	8d 7f       	andi	r24, 0xFD	; 253
    35f0:	80 83       	st	Z, r24
    35f2:	88 e4       	ldi	r24, 0x48	; 72
    35f4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    35f8:	85 e4       	ldi	r24, 0x45	; 69
    35fa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    35fe:	08 95       	ret

00003600 <twi_readFrom>:
    3600:	41 32       	cpi	r20, 0x21	; 33
    3602:	08 f0       	brcs	.+2      	; 0x3606 <twi_readFrom+0x6>
    3604:	4c c0       	rjmp	.+152    	; 0x369e <twi_readFrom+0x9e>
    3606:	90 91 bd 07 	lds	r25, 0x07BD	; 0x8007bd <twi_state>
    360a:	91 11       	cpse	r25, r1
    360c:	fc cf       	rjmp	.-8      	; 0x3606 <twi_readFrom+0x6>
    360e:	31 e0       	ldi	r19, 0x01	; 1
    3610:	30 93 bd 07 	sts	0x07BD, r19	; 0x8007bd <twi_state>
    3614:	20 93 bb 07 	sts	0x07BB, r18	; 0x8007bb <twi_sendStop>
    3618:	2f ef       	ldi	r18, 0xFF	; 255
    361a:	20 93 50 07 	sts	0x0750, r18	; 0x800750 <twi_error>
    361e:	10 92 95 07 	sts	0x0795, r1	; 0x800795 <twi_masterBufferIndex>
    3622:	24 0f       	add	r18, r20
    3624:	20 93 94 07 	sts	0x0794, r18	; 0x800794 <twi_masterBufferLength>
    3628:	30 93 bc 07 	sts	0x07BC, r19	; 0x8007bc <twi_slarw>
    362c:	20 91 bc 07 	lds	r18, 0x07BC	; 0x8007bc <twi_slarw>
    3630:	88 0f       	add	r24, r24
    3632:	82 2b       	or	r24, r18
    3634:	80 93 bc 07 	sts	0x07BC, r24	; 0x8007bc <twi_slarw>
    3638:	80 91 ba 07 	lds	r24, 0x07BA	; 0x8007ba <twi_inRepStart>
    363c:	81 30       	cpi	r24, 0x01	; 1
    363e:	81 f4       	brne	.+32     	; 0x3660 <twi_readFrom+0x60>
    3640:	10 92 ba 07 	sts	0x07BA, r1	; 0x8007ba <twi_inRepStart>
    3644:	ab eb       	ldi	r26, 0xBB	; 187
    3646:	b0 e0       	ldi	r27, 0x00	; 0
    3648:	ec eb       	ldi	r30, 0xBC	; 188
    364a:	f0 e0       	ldi	r31, 0x00	; 0
    364c:	80 91 bc 07 	lds	r24, 0x07BC	; 0x8007bc <twi_slarw>
    3650:	8c 93       	st	X, r24
    3652:	80 81       	ld	r24, Z
    3654:	83 fd       	sbrc	r24, 3
    3656:	fa cf       	rjmp	.-12     	; 0x364c <twi_readFrom+0x4c>
    3658:	85 ec       	ldi	r24, 0xC5	; 197
    365a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    365e:	03 c0       	rjmp	.+6      	; 0x3666 <twi_readFrom+0x66>
    3660:	85 ee       	ldi	r24, 0xE5	; 229
    3662:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3666:	80 91 bd 07 	lds	r24, 0x07BD	; 0x8007bd <twi_state>
    366a:	81 30       	cpi	r24, 0x01	; 1
    366c:	e1 f3       	breq	.-8      	; 0x3666 <twi_readFrom+0x66>
    366e:	80 91 95 07 	lds	r24, 0x0795	; 0x800795 <twi_masterBufferIndex>
    3672:	84 17       	cp	r24, r20
    3674:	10 f4       	brcc	.+4      	; 0x367a <twi_readFrom+0x7a>
    3676:	40 91 95 07 	lds	r20, 0x0795	; 0x800795 <twi_masterBufferIndex>
    367a:	44 23       	and	r20, r20
    367c:	89 f0       	breq	.+34     	; 0x36a0 <twi_readFrom+0xa0>
    367e:	e6 e9       	ldi	r30, 0x96	; 150
    3680:	f7 e0       	ldi	r31, 0x07	; 7
    3682:	a6 2f       	mov	r26, r22
    3684:	b7 2f       	mov	r27, r23
    3686:	2f ef       	ldi	r18, 0xFF	; 255
    3688:	24 0f       	add	r18, r20
    368a:	30 e0       	ldi	r19, 0x00	; 0
    368c:	29 56       	subi	r18, 0x69	; 105
    368e:	38 4f       	sbci	r19, 0xF8	; 248
    3690:	81 91       	ld	r24, Z+
    3692:	8d 93       	st	X+, r24
    3694:	e2 17       	cp	r30, r18
    3696:	f3 07       	cpc	r31, r19
    3698:	d9 f7       	brne	.-10     	; 0x3690 <twi_readFrom+0x90>
    369a:	94 2f       	mov	r25, r20
    369c:	01 c0       	rjmp	.+2      	; 0x36a0 <twi_readFrom+0xa0>
    369e:	90 e0       	ldi	r25, 0x00	; 0
    36a0:	89 2f       	mov	r24, r25
    36a2:	08 95       	ret

000036a4 <twi_writeTo>:
    36a4:	0f 93       	push	r16
    36a6:	41 32       	cpi	r20, 0x21	; 33
    36a8:	08 f0       	brcs	.+2      	; 0x36ac <twi_writeTo+0x8>
    36aa:	57 c0       	rjmp	.+174    	; 0x375a <twi_writeTo+0xb6>
    36ac:	30 91 bd 07 	lds	r19, 0x07BD	; 0x8007bd <twi_state>
    36b0:	31 11       	cpse	r19, r1
    36b2:	fc cf       	rjmp	.-8      	; 0x36ac <twi_writeTo+0x8>
    36b4:	92 e0       	ldi	r25, 0x02	; 2
    36b6:	90 93 bd 07 	sts	0x07BD, r25	; 0x8007bd <twi_state>
    36ba:	00 93 bb 07 	sts	0x07BB, r16	; 0x8007bb <twi_sendStop>
    36be:	9f ef       	ldi	r25, 0xFF	; 255
    36c0:	90 93 50 07 	sts	0x0750, r25	; 0x800750 <twi_error>
    36c4:	10 92 95 07 	sts	0x0795, r1	; 0x800795 <twi_masterBufferIndex>
    36c8:	40 93 94 07 	sts	0x0794, r20	; 0x800794 <twi_masterBufferLength>
    36cc:	44 23       	and	r20, r20
    36ce:	71 f0       	breq	.+28     	; 0x36ec <twi_writeTo+0x48>
    36d0:	fb 01       	movw	r30, r22
    36d2:	a6 e9       	ldi	r26, 0x96	; 150
    36d4:	b7 e0       	ldi	r27, 0x07	; 7
    36d6:	41 50       	subi	r20, 0x01	; 1
    36d8:	50 e0       	ldi	r21, 0x00	; 0
    36da:	4f 5f       	subi	r20, 0xFF	; 255
    36dc:	5f 4f       	sbci	r21, 0xFF	; 255
    36de:	64 0f       	add	r22, r20
    36e0:	75 1f       	adc	r23, r21
    36e2:	91 91       	ld	r25, Z+
    36e4:	9d 93       	st	X+, r25
    36e6:	e6 17       	cp	r30, r22
    36e8:	f7 07       	cpc	r31, r23
    36ea:	d9 f7       	brne	.-10     	; 0x36e2 <twi_writeTo+0x3e>
    36ec:	10 92 bc 07 	sts	0x07BC, r1	; 0x8007bc <twi_slarw>
    36f0:	90 91 bc 07 	lds	r25, 0x07BC	; 0x8007bc <twi_slarw>
    36f4:	88 0f       	add	r24, r24
    36f6:	89 2b       	or	r24, r25
    36f8:	80 93 bc 07 	sts	0x07BC, r24	; 0x8007bc <twi_slarw>
    36fc:	80 91 ba 07 	lds	r24, 0x07BA	; 0x8007ba <twi_inRepStart>
    3700:	81 30       	cpi	r24, 0x01	; 1
    3702:	81 f4       	brne	.+32     	; 0x3724 <twi_writeTo+0x80>
    3704:	10 92 ba 07 	sts	0x07BA, r1	; 0x8007ba <twi_inRepStart>
    3708:	ab eb       	ldi	r26, 0xBB	; 187
    370a:	b0 e0       	ldi	r27, 0x00	; 0
    370c:	ec eb       	ldi	r30, 0xBC	; 188
    370e:	f0 e0       	ldi	r31, 0x00	; 0
    3710:	80 91 bc 07 	lds	r24, 0x07BC	; 0x8007bc <twi_slarw>
    3714:	8c 93       	st	X, r24
    3716:	80 81       	ld	r24, Z
    3718:	83 fd       	sbrc	r24, 3
    371a:	fa cf       	rjmp	.-12     	; 0x3710 <twi_writeTo+0x6c>
    371c:	85 ec       	ldi	r24, 0xC5	; 197
    371e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3722:	03 c0       	rjmp	.+6      	; 0x372a <twi_writeTo+0x86>
    3724:	85 ee       	ldi	r24, 0xE5	; 229
    3726:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    372a:	22 23       	and	r18, r18
    372c:	41 f0       	breq	.+16     	; 0x373e <twi_writeTo+0x9a>
    372e:	80 91 bd 07 	lds	r24, 0x07BD	; 0x8007bd <twi_state>
    3732:	82 30       	cpi	r24, 0x02	; 2
    3734:	21 f4       	brne	.+8      	; 0x373e <twi_writeTo+0x9a>
    3736:	80 91 bd 07 	lds	r24, 0x07BD	; 0x8007bd <twi_state>
    373a:	82 30       	cpi	r24, 0x02	; 2
    373c:	e1 f3       	breq	.-8      	; 0x3736 <twi_writeTo+0x92>
    373e:	80 91 50 07 	lds	r24, 0x0750	; 0x800750 <twi_error>
    3742:	8f 3f       	cpi	r24, 0xFF	; 255
    3744:	79 f0       	breq	.+30     	; 0x3764 <twi_writeTo+0xc0>
    3746:	80 91 50 07 	lds	r24, 0x0750	; 0x800750 <twi_error>
    374a:	80 32       	cpi	r24, 0x20	; 32
    374c:	41 f0       	breq	.+16     	; 0x375e <twi_writeTo+0xba>
    374e:	80 91 50 07 	lds	r24, 0x0750	; 0x800750 <twi_error>
    3752:	80 33       	cpi	r24, 0x30	; 48
    3754:	31 f0       	breq	.+12     	; 0x3762 <twi_writeTo+0xbe>
    3756:	34 e0       	ldi	r19, 0x04	; 4
    3758:	05 c0       	rjmp	.+10     	; 0x3764 <twi_writeTo+0xc0>
    375a:	31 e0       	ldi	r19, 0x01	; 1
    375c:	03 c0       	rjmp	.+6      	; 0x3764 <twi_writeTo+0xc0>
    375e:	32 e0       	ldi	r19, 0x02	; 2
    3760:	01 c0       	rjmp	.+2      	; 0x3764 <twi_writeTo+0xc0>
    3762:	33 e0       	ldi	r19, 0x03	; 3
    3764:	83 2f       	mov	r24, r19
    3766:	0f 91       	pop	r16
    3768:	08 95       	ret

0000376a <twi_transmit>:
    376a:	40 91 72 07 	lds	r20, 0x0772	; 0x800772 <twi_txBufferLength>
    376e:	26 2f       	mov	r18, r22
    3770:	30 e0       	ldi	r19, 0x00	; 0
    3772:	24 0f       	add	r18, r20
    3774:	31 1d       	adc	r19, r1
    3776:	21 32       	cpi	r18, 0x21	; 33
    3778:	31 05       	cpc	r19, r1
    377a:	ec f4       	brge	.+58     	; 0x37b6 <twi_transmit+0x4c>
    377c:	20 91 bd 07 	lds	r18, 0x07BD	; 0x8007bd <twi_state>
    3780:	24 30       	cpi	r18, 0x04	; 4
    3782:	d9 f4       	brne	.+54     	; 0x37ba <twi_transmit+0x50>
    3784:	66 23       	and	r22, r22
    3786:	81 f0       	breq	.+32     	; 0x37a8 <twi_transmit+0x3e>
    3788:	a8 2f       	mov	r26, r24
    378a:	b9 2f       	mov	r27, r25
    378c:	80 e0       	ldi	r24, 0x00	; 0
    378e:	90 e0       	ldi	r25, 0x00	; 0
    3790:	30 91 72 07 	lds	r19, 0x0772	; 0x800772 <twi_txBufferLength>
    3794:	2d 91       	ld	r18, X+
    3796:	fc 01       	movw	r30, r24
    3798:	ec 58       	subi	r30, 0x8C	; 140
    379a:	f8 4f       	sbci	r31, 0xF8	; 248
    379c:	e3 0f       	add	r30, r19
    379e:	f1 1d       	adc	r31, r1
    37a0:	20 83       	st	Z, r18
    37a2:	01 96       	adiw	r24, 0x01	; 1
    37a4:	86 17       	cp	r24, r22
    37a6:	a0 f3       	brcs	.-24     	; 0x3790 <twi_transmit+0x26>
    37a8:	80 91 72 07 	lds	r24, 0x0772	; 0x800772 <twi_txBufferLength>
    37ac:	68 0f       	add	r22, r24
    37ae:	60 93 72 07 	sts	0x0772, r22	; 0x800772 <twi_txBufferLength>
    37b2:	80 e0       	ldi	r24, 0x00	; 0
    37b4:	08 95       	ret
    37b6:	81 e0       	ldi	r24, 0x01	; 1
    37b8:	08 95       	ret
    37ba:	82 e0       	ldi	r24, 0x02	; 2
    37bc:	08 95       	ret

000037be <twi_attachSlaveRxEvent>:
    37be:	90 93 b7 07 	sts	0x07B7, r25	; 0x8007b7 <twi_onSlaveReceive+0x1>
    37c2:	80 93 b6 07 	sts	0x07B6, r24	; 0x8007b6 <twi_onSlaveReceive>
    37c6:	08 95       	ret

000037c8 <twi_attachSlaveTxEvent>:
    37c8:	90 93 b9 07 	sts	0x07B9, r25	; 0x8007b9 <twi_onSlaveTransmit+0x1>
    37cc:	80 93 b8 07 	sts	0x07B8, r24	; 0x8007b8 <twi_onSlaveTransmit>
    37d0:	08 95       	ret

000037d2 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    37d2:	85 ed       	ldi	r24, 0xD5	; 213
    37d4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    37d8:	ec eb       	ldi	r30, 0xBC	; 188
    37da:	f0 e0       	ldi	r31, 0x00	; 0
    37dc:	80 81       	ld	r24, Z
    37de:	84 fd       	sbrc	r24, 4
    37e0:	fd cf       	rjmp	.-6      	; 0x37dc <twi_stop+0xa>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    37e2:	10 92 bd 07 	sts	0x07BD, r1	; 0x8007bd <twi_state>
    37e6:	08 95       	ret

000037e8 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    37e8:	85 ec       	ldi	r24, 0xC5	; 197
    37ea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // update twi state
  twi_state = TWI_READY;
    37ee:	10 92 bd 07 	sts	0x07BD, r1	; 0x8007bd <twi_state>
    37f2:	08 95       	ret

000037f4 <__vector_39>:
}

ISR(TWI_vect)
{
    37f4:	1f 92       	push	r1
    37f6:	0f 92       	push	r0
    37f8:	0f b6       	in	r0, 0x3f	; 63
    37fa:	0f 92       	push	r0
    37fc:	11 24       	eor	r1, r1
    37fe:	0b b6       	in	r0, 0x3b	; 59
    3800:	0f 92       	push	r0
    3802:	2f 93       	push	r18
    3804:	3f 93       	push	r19
    3806:	4f 93       	push	r20
    3808:	5f 93       	push	r21
    380a:	6f 93       	push	r22
    380c:	7f 93       	push	r23
    380e:	8f 93       	push	r24
    3810:	9f 93       	push	r25
    3812:	af 93       	push	r26
    3814:	bf 93       	push	r27
    3816:	ef 93       	push	r30
    3818:	ff 93       	push	r31
  switch(TW_STATUS){
    381a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    381e:	88 7f       	andi	r24, 0xF8	; 248
    3820:	90 e0       	ldi	r25, 0x00	; 0
    3822:	89 3c       	cpi	r24, 0xC9	; 201
    3824:	91 05       	cpc	r25, r1
    3826:	08 f0       	brcs	.+2      	; 0x382a <__vector_39+0x36>
    3828:	ef c0       	rjmp	.+478    	; 0x3a08 <__vector_39+0x214>
    382a:	fc 01       	movw	r30, r24
    382c:	88 27       	eor	r24, r24
    382e:	ee 58       	subi	r30, 0x8E	; 142
    3830:	ff 4f       	sbci	r31, 0xFF	; 255
    3832:	8f 4f       	sbci	r24, 0xFF	; 255
    3834:	0c 94 84 24 	jmp	0x4908	; 0x4908 <__tablejump2__>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    3838:	80 91 bc 07 	lds	r24, 0x07BC	; 0x8007bc <twi_slarw>
    383c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3840:	85 ec       	ldi	r24, 0xC5	; 197
    3842:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3846:	e0 c0       	rjmp	.+448    	; 0x3a08 <__vector_39+0x214>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    3848:	90 91 95 07 	lds	r25, 0x0795	; 0x800795 <twi_masterBufferIndex>
    384c:	80 91 94 07 	lds	r24, 0x0794	; 0x800794 <twi_masterBufferLength>
    3850:	98 17       	cp	r25, r24
    3852:	80 f4       	brcc	.+32     	; 0x3874 <__vector_39+0x80>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    3854:	e0 91 95 07 	lds	r30, 0x0795	; 0x800795 <twi_masterBufferIndex>
    3858:	81 e0       	ldi	r24, 0x01	; 1
    385a:	8e 0f       	add	r24, r30
    385c:	80 93 95 07 	sts	0x0795, r24	; 0x800795 <twi_masterBufferIndex>
    3860:	f0 e0       	ldi	r31, 0x00	; 0
    3862:	ea 56       	subi	r30, 0x6A	; 106
    3864:	f8 4f       	sbci	r31, 0xF8	; 248
    3866:	80 81       	ld	r24, Z
    3868:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    386c:	85 ec       	ldi	r24, 0xC5	; 197
    386e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3872:	ca c0       	rjmp	.+404    	; 0x3a08 <__vector_39+0x214>
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
        twi_reply(1);
      }else{
	if (twi_sendStop)
    3874:	80 91 bb 07 	lds	r24, 0x07BB	; 0x8007bb <twi_sendStop>
    3878:	88 23       	and	r24, r24
    387a:	11 f0       	breq	.+4      	; 0x3880 <__vector_39+0x8c>
          twi_stop();
    387c:	aa df       	rcall	.-172    	; 0x37d2 <twi_stop>
    387e:	c4 c0       	rjmp	.+392    	; 0x3a08 <__vector_39+0x214>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    3880:	81 e0       	ldi	r24, 0x01	; 1
    3882:	80 93 ba 07 	sts	0x07BA, r24	; 0x8007ba <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    3886:	84 ea       	ldi	r24, 0xA4	; 164
    3888:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	  twi_state = TWI_READY;
    388c:	10 92 bd 07 	sts	0x07BD, r1	; 0x8007bd <twi_state>
    3890:	bb c0       	rjmp	.+374    	; 0x3a08 <__vector_39+0x214>
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    3892:	80 e2       	ldi	r24, 0x20	; 32
    3894:	80 93 50 07 	sts	0x0750, r24	; 0x800750 <twi_error>
      twi_stop();
    3898:	9c df       	rcall	.-200    	; 0x37d2 <twi_stop>
      break;
    389a:	b6 c0       	rjmp	.+364    	; 0x3a08 <__vector_39+0x214>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    389c:	80 e3       	ldi	r24, 0x30	; 48
    389e:	80 93 50 07 	sts	0x0750, r24	; 0x800750 <twi_error>
      twi_stop();
    38a2:	97 df       	rcall	.-210    	; 0x37d2 <twi_stop>
      break;
    38a4:	b1 c0       	rjmp	.+354    	; 0x3a08 <__vector_39+0x214>
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    38a6:	88 e3       	ldi	r24, 0x38	; 56
    38a8:	80 93 50 07 	sts	0x0750, r24	; 0x800750 <twi_error>
      twi_releaseBus();
    38ac:	9d df       	rcall	.-198    	; 0x37e8 <twi_releaseBus>
      break;
    38ae:	ac c0       	rjmp	.+344    	; 0x3a08 <__vector_39+0x214>

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    38b0:	e0 91 95 07 	lds	r30, 0x0795	; 0x800795 <twi_masterBufferIndex>
    38b4:	81 e0       	ldi	r24, 0x01	; 1
    38b6:	8e 0f       	add	r24, r30
    38b8:	80 93 95 07 	sts	0x0795, r24	; 0x800795 <twi_masterBufferIndex>
    38bc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    38c0:	f0 e0       	ldi	r31, 0x00	; 0
    38c2:	ea 56       	subi	r30, 0x6A	; 106
    38c4:	f8 4f       	sbci	r31, 0xF8	; 248
    38c6:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    38c8:	90 91 95 07 	lds	r25, 0x0795	; 0x800795 <twi_masterBufferIndex>
    38cc:	80 91 94 07 	lds	r24, 0x0794	; 0x800794 <twi_masterBufferLength>
    38d0:	98 17       	cp	r25, r24
    38d2:	20 f4       	brcc	.+8      	; 0x38dc <__vector_39+0xe8>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    38d4:	85 ec       	ldi	r24, 0xC5	; 197
    38d6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    38da:	96 c0       	rjmp	.+300    	; 0x3a08 <__vector_39+0x214>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    38dc:	85 e8       	ldi	r24, 0x85	; 133
    38de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    38e2:	92 c0       	rjmp	.+292    	; 0x3a08 <__vector_39+0x214>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    38e4:	e0 91 95 07 	lds	r30, 0x0795	; 0x800795 <twi_masterBufferIndex>
    38e8:	81 e0       	ldi	r24, 0x01	; 1
    38ea:	8e 0f       	add	r24, r30
    38ec:	80 93 95 07 	sts	0x0795, r24	; 0x800795 <twi_masterBufferIndex>
    38f0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    38f4:	f0 e0       	ldi	r31, 0x00	; 0
    38f6:	ea 56       	subi	r30, 0x6A	; 106
    38f8:	f8 4f       	sbci	r31, 0xF8	; 248
    38fa:	80 83       	st	Z, r24
	if (twi_sendStop)
    38fc:	80 91 bb 07 	lds	r24, 0x07BB	; 0x8007bb <twi_sendStop>
    3900:	88 23       	and	r24, r24
          twi_stop();
    3902:	11 f0       	breq	.+4      	; 0x3908 <__vector_39+0x114>
    3904:	66 df       	rcall	.-308    	; 0x37d2 <twi_stop>
    3906:	80 c0       	rjmp	.+256    	; 0x3a08 <__vector_39+0x214>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    3908:	81 e0       	ldi	r24, 0x01	; 1
    390a:	80 93 ba 07 	sts	0x07BA, r24	; 0x8007ba <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    390e:	84 ea       	ldi	r24, 0xA4	; 164
    3910:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	  twi_state = TWI_READY;
    3914:	10 92 bd 07 	sts	0x07BD, r1	; 0x8007bd <twi_state>
	}    
	break;
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
    3918:	77 c0       	rjmp	.+238    	; 0x3a08 <__vector_39+0x214>
    391a:	5b df       	rcall	.-330    	; 0x37d2 <twi_stop>
      break;
    391c:	75 c0       	rjmp	.+234    	; 0x3a08 <__vector_39+0x214>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    391e:	83 e0       	ldi	r24, 0x03	; 3
    3920:	80 93 bd 07 	sts	0x07BD, r24	; 0x8007bd <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    3924:	10 92 51 07 	sts	0x0751, r1	; 0x800751 <twi_rxBufferIndex>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3928:	85 ec       	ldi	r24, 0xC5	; 197
    392a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    392e:	6c c0       	rjmp	.+216    	; 0x3a08 <__vector_39+0x214>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    3930:	80 91 51 07 	lds	r24, 0x0751	; 0x800751 <twi_rxBufferIndex>
    3934:	80 32       	cpi	r24, 0x20	; 32
    3936:	80 f4       	brcc	.+32     	; 0x3958 <__vector_39+0x164>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    3938:	e0 91 51 07 	lds	r30, 0x0751	; 0x800751 <twi_rxBufferIndex>
    393c:	81 e0       	ldi	r24, 0x01	; 1
    393e:	8e 0f       	add	r24, r30
    3940:	80 93 51 07 	sts	0x0751, r24	; 0x800751 <twi_rxBufferIndex>
    3944:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    3948:	f0 e0       	ldi	r31, 0x00	; 0
    394a:	ee 5a       	subi	r30, 0xAE	; 174
    394c:	f8 4f       	sbci	r31, 0xF8	; 248
    394e:	80 83       	st	Z, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3950:	85 ec       	ldi	r24, 0xC5	; 197
    3952:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3956:	58 c0       	rjmp	.+176    	; 0x3a08 <__vector_39+0x214>
    3958:	85 e8       	ldi	r24, 0x85	; 133
    395a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    395e:	54 c0       	rjmp	.+168    	; 0x3a08 <__vector_39+0x214>
    3960:	43 df       	rcall	.-378    	; 0x37e8 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    3962:	80 91 51 07 	lds	r24, 0x0751	; 0x800751 <twi_rxBufferIndex>
    3966:	80 32       	cpi	r24, 0x20	; 32
    3968:	30 f4       	brcc	.+12     	; 0x3976 <__vector_39+0x182>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    396a:	e0 91 51 07 	lds	r30, 0x0751	; 0x800751 <twi_rxBufferIndex>
    396e:	f0 e0       	ldi	r31, 0x00	; 0
    3970:	ee 5a       	subi	r30, 0xAE	; 174
    3972:	f8 4f       	sbci	r31, 0xF8	; 248
    3974:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    3976:	60 91 51 07 	lds	r22, 0x0751	; 0x800751 <twi_rxBufferIndex>
    397a:	70 e0       	ldi	r23, 0x00	; 0
    397c:	e0 91 b6 07 	lds	r30, 0x07B6	; 0x8007b6 <twi_onSlaveReceive>
    3980:	f0 91 b7 07 	lds	r31, 0x07B7	; 0x8007b7 <twi_onSlaveReceive+0x1>
    3984:	82 e5       	ldi	r24, 0x52	; 82
    3986:	97 e0       	ldi	r25, 0x07	; 7
    3988:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    398a:	10 92 51 07 	sts	0x0751, r1	; 0x800751 <twi_rxBufferIndex>
      break;
    398e:	3c c0       	rjmp	.+120    	; 0x3a08 <__vector_39+0x214>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3990:	85 e8       	ldi	r24, 0x85	; 133
    3992:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3996:	38 c0       	rjmp	.+112    	; 0x3a08 <__vector_39+0x214>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    3998:	84 e0       	ldi	r24, 0x04	; 4
    399a:	80 93 bd 07 	sts	0x07BD, r24	; 0x8007bd <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    399e:	10 92 73 07 	sts	0x0773, r1	; 0x800773 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    39a2:	10 92 72 07 	sts	0x0772, r1	; 0x800772 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    39a6:	e0 91 b8 07 	lds	r30, 0x07B8	; 0x8007b8 <twi_onSlaveTransmit>
    39aa:	f0 91 b9 07 	lds	r31, 0x07B9	; 0x8007b9 <twi_onSlaveTransmit+0x1>
    39ae:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    39b0:	80 91 72 07 	lds	r24, 0x0772	; 0x800772 <twi_txBufferLength>
    39b4:	81 11       	cpse	r24, r1
    39b6:	05 c0       	rjmp	.+10     	; 0x39c2 <__vector_39+0x1ce>
        twi_txBufferLength = 1;
    39b8:	81 e0       	ldi	r24, 0x01	; 1
    39ba:	80 93 72 07 	sts	0x0772, r24	; 0x800772 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    39be:	10 92 74 07 	sts	0x0774, r1	; 0x800774 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    39c2:	e0 91 73 07 	lds	r30, 0x0773	; 0x800773 <twi_txBufferIndex>
    39c6:	81 e0       	ldi	r24, 0x01	; 1
    39c8:	8e 0f       	add	r24, r30
    39ca:	80 93 73 07 	sts	0x0773, r24	; 0x800773 <twi_txBufferIndex>
    39ce:	f0 e0       	ldi	r31, 0x00	; 0
    39d0:	ec 58       	subi	r30, 0x8C	; 140
    39d2:	f8 4f       	sbci	r31, 0xF8	; 248
    39d4:	80 81       	ld	r24, Z
    39d6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    39da:	90 91 73 07 	lds	r25, 0x0773	; 0x800773 <twi_txBufferIndex>
    39de:	80 91 72 07 	lds	r24, 0x0772	; 0x800772 <twi_txBufferLength>
    39e2:	98 17       	cp	r25, r24
    39e4:	20 f4       	brcc	.+8      	; 0x39ee <__vector_39+0x1fa>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    39e6:	85 ec       	ldi	r24, 0xC5	; 197
    39e8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    39ec:	0d c0       	rjmp	.+26     	; 0x3a08 <__vector_39+0x214>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    39ee:	85 e8       	ldi	r24, 0x85	; 133
    39f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    39f4:	09 c0       	rjmp	.+18     	; 0x3a08 <__vector_39+0x214>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    39f6:	85 ec       	ldi	r24, 0xC5	; 197
    39f8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    39fc:	10 92 bd 07 	sts	0x07BD, r1	; 0x8007bd <twi_state>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    3a00:	03 c0       	rjmp	.+6      	; 0x3a08 <__vector_39+0x214>
    3a02:	10 92 50 07 	sts	0x0750, r1	; 0x800750 <twi_error>
      twi_stop();
    3a06:	e5 de       	rcall	.-566    	; 0x37d2 <twi_stop>
      break;
  }
    3a08:	ff 91       	pop	r31
    3a0a:	ef 91       	pop	r30
    3a0c:	bf 91       	pop	r27
    3a0e:	af 91       	pop	r26
    3a10:	9f 91       	pop	r25
    3a12:	8f 91       	pop	r24
    3a14:	7f 91       	pop	r23
    3a16:	6f 91       	pop	r22
    3a18:	5f 91       	pop	r21
    3a1a:	4f 91       	pop	r20
    3a1c:	3f 91       	pop	r19
    3a1e:	2f 91       	pop	r18
    3a20:	0f 90       	pop	r0
    3a22:	0b be       	out	0x3b, r0	; 59
    3a24:	0f 90       	pop	r0
    3a26:	0f be       	out	0x3f, r0	; 63
    3a28:	0f 90       	pop	r0
    3a2a:	1f 90       	pop	r1
    3a2c:	18 95       	reti

00003a2e <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
	user_onRequest = function;
    3a2e:	80 91 e8 07 	lds	r24, 0x07E8	; 0x8007e8 <_ZN7TwoWire14rxBufferLengthE>
    3a32:	90 e0       	ldi	r25, 0x00	; 0
    3a34:	20 91 e9 07 	lds	r18, 0x07E9	; 0x8007e9 <_ZN7TwoWire13rxBufferIndexE>
    3a38:	82 1b       	sub	r24, r18
    3a3a:	91 09       	sbc	r25, r1
    3a3c:	08 95       	ret

00003a3e <_ZN7TwoWire4readEv>:
    3a3e:	90 91 e9 07 	lds	r25, 0x07E9	; 0x8007e9 <_ZN7TwoWire13rxBufferIndexE>
    3a42:	80 91 e8 07 	lds	r24, 0x07E8	; 0x8007e8 <_ZN7TwoWire14rxBufferLengthE>
    3a46:	98 17       	cp	r25, r24
    3a48:	50 f4       	brcc	.+20     	; 0x3a5e <_ZN7TwoWire4readEv+0x20>
    3a4a:	e9 2f       	mov	r30, r25
    3a4c:	f0 e0       	ldi	r31, 0x00	; 0
    3a4e:	e6 51       	subi	r30, 0x16	; 22
    3a50:	f8 4f       	sbci	r31, 0xF8	; 248
    3a52:	20 81       	ld	r18, Z
    3a54:	30 e0       	ldi	r19, 0x00	; 0
    3a56:	9f 5f       	subi	r25, 0xFF	; 255
    3a58:	90 93 e9 07 	sts	0x07E9, r25	; 0x8007e9 <_ZN7TwoWire13rxBufferIndexE>
    3a5c:	02 c0       	rjmp	.+4      	; 0x3a62 <_ZN7TwoWire4readEv+0x24>
    3a5e:	2f ef       	ldi	r18, 0xFF	; 255
    3a60:	3f ef       	ldi	r19, 0xFF	; 255
    3a62:	c9 01       	movw	r24, r18
    3a64:	08 95       	ret

00003a66 <_ZN7TwoWire4peekEv>:
    3a66:	e0 91 e9 07 	lds	r30, 0x07E9	; 0x8007e9 <_ZN7TwoWire13rxBufferIndexE>
    3a6a:	80 91 e8 07 	lds	r24, 0x07E8	; 0x8007e8 <_ZN7TwoWire14rxBufferLengthE>
    3a6e:	e8 17       	cp	r30, r24
    3a70:	30 f4       	brcc	.+12     	; 0x3a7e <_ZN7TwoWire4peekEv+0x18>
    3a72:	f0 e0       	ldi	r31, 0x00	; 0
    3a74:	e6 51       	subi	r30, 0x16	; 22
    3a76:	f8 4f       	sbci	r31, 0xF8	; 248
    3a78:	80 81       	ld	r24, Z
    3a7a:	90 e0       	ldi	r25, 0x00	; 0
    3a7c:	08 95       	ret
    3a7e:	8f ef       	ldi	r24, 0xFF	; 255
    3a80:	9f ef       	ldi	r25, 0xFF	; 255
    3a82:	08 95       	ret

00003a84 <_ZN7TwoWire5flushEv>:
    3a84:	08 95       	ret

00003a86 <_ZN7TwoWire16onReceiveServiceEPhi>:
    3a86:	cf 93       	push	r28
    3a88:	df 93       	push	r29
    3a8a:	ec 01       	movw	r28, r24
    3a8c:	e0 91 c0 07 	lds	r30, 0x07C0	; 0x8007c0 <_ZN7TwoWire14user_onReceiveE>
    3a90:	f0 91 c1 07 	lds	r31, 0x07C1	; 0x8007c1 <_ZN7TwoWire14user_onReceiveE+0x1>
    3a94:	30 97       	sbiw	r30, 0x00	; 0
    3a96:	01 f1       	breq	.+64     	; 0x3ad8 <_ZN7TwoWire16onReceiveServiceEPhi+0x52>
    3a98:	90 91 e9 07 	lds	r25, 0x07E9	; 0x8007e9 <_ZN7TwoWire13rxBufferIndexE>
    3a9c:	80 91 e8 07 	lds	r24, 0x07E8	; 0x8007e8 <_ZN7TwoWire14rxBufferLengthE>
    3aa0:	98 17       	cp	r25, r24
    3aa2:	d0 f0       	brcs	.+52     	; 0x3ad8 <_ZN7TwoWire16onReceiveServiceEPhi+0x52>
    3aa4:	16 16       	cp	r1, r22
    3aa6:	17 06       	cpc	r1, r23
    3aa8:	8c f4       	brge	.+34     	; 0x3acc <_ZN7TwoWire16onReceiveServiceEPhi+0x46>
    3aaa:	20 e0       	ldi	r18, 0x00	; 0
    3aac:	30 e0       	ldi	r19, 0x00	; 0
    3aae:	90 e0       	ldi	r25, 0x00	; 0
    3ab0:	de 01       	movw	r26, r28
    3ab2:	a9 0f       	add	r26, r25
    3ab4:	b1 1d       	adc	r27, r1
    3ab6:	4c 91       	ld	r20, X
    3ab8:	d9 01       	movw	r26, r18
    3aba:	a6 51       	subi	r26, 0x16	; 22
    3abc:	b8 4f       	sbci	r27, 0xF8	; 248
    3abe:	4c 93       	st	X, r20
    3ac0:	9f 5f       	subi	r25, 0xFF	; 255
    3ac2:	29 2f       	mov	r18, r25
    3ac4:	30 e0       	ldi	r19, 0x00	; 0
    3ac6:	26 17       	cp	r18, r22
    3ac8:	37 07       	cpc	r19, r23
    3aca:	94 f3       	brlt	.-28     	; 0x3ab0 <_ZN7TwoWire16onReceiveServiceEPhi+0x2a>
    3acc:	cb 01       	movw	r24, r22
    3ace:	10 92 e9 07 	sts	0x07E9, r1	; 0x8007e9 <_ZN7TwoWire13rxBufferIndexE>
    3ad2:	60 93 e8 07 	sts	0x07E8, r22	; 0x8007e8 <_ZN7TwoWire14rxBufferLengthE>
    3ad6:	19 95       	eicall
    3ad8:	df 91       	pop	r29
    3ada:	cf 91       	pop	r28
    3adc:	08 95       	ret

00003ade <_ZN7TwoWire16onRequestServiceEv>:
    3ade:	e0 91 c2 07 	lds	r30, 0x07C2	; 0x8007c2 <_ZN7TwoWire14user_onRequestE>
    3ae2:	f0 91 c3 07 	lds	r31, 0x07C3	; 0x8007c3 <_ZN7TwoWire14user_onRequestE+0x1>
    3ae6:	30 97       	sbiw	r30, 0x00	; 0
    3ae8:	29 f0       	breq	.+10     	; 0x3af4 <_ZN7TwoWire16onRequestServiceEv+0x16>
    3aea:	10 92 c6 07 	sts	0x07C6, r1	; 0x8007c6 <_ZN7TwoWire13txBufferIndexE>
    3aee:	10 92 c5 07 	sts	0x07C5, r1	; 0x8007c5 <_ZN7TwoWire14txBufferLengthE>
    3af2:	19 95       	eicall
    3af4:	08 95       	ret

00003af6 <_ZN7TwoWire5writeEh>:
    3af6:	cf 93       	push	r28
    3af8:	df 93       	push	r29
    3afa:	1f 92       	push	r1
    3afc:	cd b7       	in	r28, 0x3d	; 61
    3afe:	de b7       	in	r29, 0x3e	; 62
    3b00:	69 83       	std	Y+1, r22	; 0x01
    3b02:	80 91 c4 07 	lds	r24, 0x07C4	; 0x8007c4 <_ZN7TwoWire12transmittingE>
    3b06:	88 23       	and	r24, r24
    3b08:	99 f0       	breq	.+38     	; 0x3b30 <_ZN7TwoWire5writeEh+0x3a>
    3b0a:	80 91 c5 07 	lds	r24, 0x07C5	; 0x8007c5 <_ZN7TwoWire14txBufferLengthE>
    3b0e:	80 32       	cpi	r24, 0x20	; 32
    3b10:	b0 f4       	brcc	.+44     	; 0x3b3e <_ZN7TwoWire5writeEh+0x48>
    3b12:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <_ZN7TwoWire13txBufferIndexE>
    3b16:	e8 2f       	mov	r30, r24
    3b18:	f0 e0       	ldi	r31, 0x00	; 0
    3b1a:	e9 53       	subi	r30, 0x39	; 57
    3b1c:	f8 4f       	sbci	r31, 0xF8	; 248
    3b1e:	60 83       	st	Z, r22
    3b20:	8f 5f       	subi	r24, 0xFF	; 255
    3b22:	80 93 c6 07 	sts	0x07C6, r24	; 0x8007c6 <_ZN7TwoWire13txBufferIndexE>
    3b26:	80 93 c5 07 	sts	0x07C5, r24	; 0x8007c5 <_ZN7TwoWire14txBufferLengthE>
    3b2a:	81 e0       	ldi	r24, 0x01	; 1
    3b2c:	90 e0       	ldi	r25, 0x00	; 0
    3b2e:	09 c0       	rjmp	.+18     	; 0x3b42 <_ZN7TwoWire5writeEh+0x4c>
    3b30:	61 e0       	ldi	r22, 0x01	; 1
    3b32:	ce 01       	movw	r24, r28
    3b34:	01 96       	adiw	r24, 0x01	; 1
    3b36:	19 de       	rcall	.-974    	; 0x376a <twi_transmit>
    3b38:	81 e0       	ldi	r24, 0x01	; 1
    3b3a:	90 e0       	ldi	r25, 0x00	; 0
    3b3c:	02 c0       	rjmp	.+4      	; 0x3b42 <_ZN7TwoWire5writeEh+0x4c>
    3b3e:	80 e0       	ldi	r24, 0x00	; 0
    3b40:	90 e0       	ldi	r25, 0x00	; 0
    3b42:	0f 90       	pop	r0
    3b44:	df 91       	pop	r29
    3b46:	cf 91       	pop	r28
    3b48:	08 95       	ret

00003b4a <_ZN7TwoWire5writeEPKhj>:
    3b4a:	cf 92       	push	r12
    3b4c:	df 92       	push	r13
    3b4e:	ef 92       	push	r14
    3b50:	ff 92       	push	r15
    3b52:	0f 93       	push	r16
    3b54:	1f 93       	push	r17
    3b56:	cf 93       	push	r28
    3b58:	df 93       	push	r29
    3b5a:	8c 01       	movw	r16, r24
    3b5c:	cb 01       	movw	r24, r22
    3b5e:	6a 01       	movw	r12, r20
    3b60:	20 91 c4 07 	lds	r18, 0x07C4	; 0x8007c4 <_ZN7TwoWire12transmittingE>
    3b64:	22 23       	and	r18, r18
    3b66:	a1 f0       	breq	.+40     	; 0x3b90 <_ZN7TwoWire5writeEPKhj+0x46>
    3b68:	41 15       	cp	r20, r1
    3b6a:	51 05       	cpc	r21, r1
    3b6c:	99 f0       	breq	.+38     	; 0x3b94 <_ZN7TwoWire5writeEPKhj+0x4a>
    3b6e:	eb 01       	movw	r28, r22
    3b70:	7b 01       	movw	r14, r22
    3b72:	e4 0e       	add	r14, r20
    3b74:	f5 1e       	adc	r15, r21
    3b76:	69 91       	ld	r22, Y+
    3b78:	d8 01       	movw	r26, r16
    3b7a:	ed 91       	ld	r30, X+
    3b7c:	fc 91       	ld	r31, X
    3b7e:	01 90       	ld	r0, Z+
    3b80:	f0 81       	ld	r31, Z
    3b82:	e0 2d       	mov	r30, r0
    3b84:	c8 01       	movw	r24, r16
    3b86:	19 95       	eicall
    3b88:	ce 15       	cp	r28, r14
    3b8a:	df 05       	cpc	r29, r15
    3b8c:	a1 f7       	brne	.-24     	; 0x3b76 <_ZN7TwoWire5writeEPKhj+0x2c>
    3b8e:	02 c0       	rjmp	.+4      	; 0x3b94 <_ZN7TwoWire5writeEPKhj+0x4a>
    3b90:	64 2f       	mov	r22, r20
    3b92:	eb dd       	rcall	.-1066   	; 0x376a <twi_transmit>
    3b94:	c6 01       	movw	r24, r12
    3b96:	df 91       	pop	r29
    3b98:	cf 91       	pop	r28
    3b9a:	1f 91       	pop	r17
    3b9c:	0f 91       	pop	r16
    3b9e:	ff 90       	pop	r15
    3ba0:	ef 90       	pop	r14
    3ba2:	df 90       	pop	r13
    3ba4:	cf 90       	pop	r12
    3ba6:	08 95       	ret

00003ba8 <_ZN7TwoWire5beginEv>:
    3ba8:	10 92 e9 07 	sts	0x07E9, r1	; 0x8007e9 <_ZN7TwoWire13rxBufferIndexE>
    3bac:	10 92 e8 07 	sts	0x07E8, r1	; 0x8007e8 <_ZN7TwoWire14rxBufferLengthE>
    3bb0:	10 92 c6 07 	sts	0x07C6, r1	; 0x8007c6 <_ZN7TwoWire13txBufferIndexE>
    3bb4:	10 92 c5 07 	sts	0x07C5, r1	; 0x8007c5 <_ZN7TwoWire14txBufferLengthE>
    3bb8:	0a dd       	rcall	.-1516   	; 0x35ce <twi_init>
    3bba:	8f e6       	ldi	r24, 0x6F	; 111
    3bbc:	9d e1       	ldi	r25, 0x1D	; 29
    3bbe:	04 de       	rcall	.-1016   	; 0x37c8 <twi_attachSlaveTxEvent>
    3bc0:	83 e4       	ldi	r24, 0x43	; 67
    3bc2:	9d e1       	ldi	r25, 0x1D	; 29
    3bc4:	fc cd       	rjmp	.-1032   	; 0x37be <twi_attachSlaveRxEvent>
    3bc6:	08 95       	ret

00003bc8 <_ZN7TwoWire17beginTransmissionEh>:
    3bc8:	81 e0       	ldi	r24, 0x01	; 1
    3bca:	80 93 c4 07 	sts	0x07C4, r24	; 0x8007c4 <_ZN7TwoWire12transmittingE>
    3bce:	60 93 e7 07 	sts	0x07E7, r22	; 0x8007e7 <_ZN7TwoWire9txAddressE>
    3bd2:	10 92 c6 07 	sts	0x07C6, r1	; 0x8007c6 <_ZN7TwoWire13txBufferIndexE>
    3bd6:	10 92 c5 07 	sts	0x07C5, r1	; 0x8007c5 <_ZN7TwoWire14txBufferLengthE>
    3bda:	08 95       	ret

00003bdc <_ZN7TwoWire17beginTransmissionEi>:
    3bdc:	f5 cf       	rjmp	.-22     	; 0x3bc8 <_ZN7TwoWire17beginTransmissionEh>
    3bde:	08 95       	ret

00003be0 <_ZN7TwoWire15endTransmissionEh>:
    3be0:	0f 93       	push	r16
    3be2:	06 2f       	mov	r16, r22
    3be4:	21 e0       	ldi	r18, 0x01	; 1
    3be6:	40 91 c5 07 	lds	r20, 0x07C5	; 0x8007c5 <_ZN7TwoWire14txBufferLengthE>
    3bea:	67 ec       	ldi	r22, 0xC7	; 199
    3bec:	77 e0       	ldi	r23, 0x07	; 7
    3bee:	80 91 e7 07 	lds	r24, 0x07E7	; 0x8007e7 <_ZN7TwoWire9txAddressE>
    3bf2:	58 dd       	rcall	.-1360   	; 0x36a4 <twi_writeTo>
    3bf4:	10 92 c6 07 	sts	0x07C6, r1	; 0x8007c6 <_ZN7TwoWire13txBufferIndexE>
    3bf8:	10 92 c5 07 	sts	0x07C5, r1	; 0x8007c5 <_ZN7TwoWire14txBufferLengthE>
    3bfc:	10 92 c4 07 	sts	0x07C4, r1	; 0x8007c4 <_ZN7TwoWire12transmittingE>
    3c00:	0f 91       	pop	r16
    3c02:	08 95       	ret

00003c04 <_ZN7TwoWire11requestFromEhhmhh>:
    3c04:	4f 92       	push	r4
    3c06:	5f 92       	push	r5
    3c08:	6f 92       	push	r6
    3c0a:	7f 92       	push	r7
    3c0c:	af 92       	push	r10
    3c0e:	bf 92       	push	r11
    3c10:	cf 92       	push	r12
    3c12:	ef 92       	push	r14
    3c14:	ff 92       	push	r15
    3c16:	0f 93       	push	r16
    3c18:	1f 93       	push	r17
    3c1a:	cf 93       	push	r28
    3c1c:	df 93       	push	r29
    3c1e:	5c 01       	movw	r10, r24
    3c20:	f6 2e       	mov	r15, r22
    3c22:	d4 2f       	mov	r29, r20
    3c24:	28 01       	movw	r4, r16
    3c26:	39 01       	movw	r6, r18
    3c28:	ee 20       	and	r14, r14
    3c2a:	39 f1       	breq	.+78     	; 0x3c7a <_ZN7TwoWire11requestFromEhhmhh+0x76>
    3c2c:	cd df       	rcall	.-102    	; 0x3bc8 <_ZN7TwoWire17beginTransmissionEh>
    3c2e:	8e 2d       	mov	r24, r14
    3c30:	84 30       	cpi	r24, 0x04	; 4
    3c32:	08 f0       	brcs	.+2      	; 0x3c36 <_ZN7TwoWire11requestFromEhhmhh+0x32>
    3c34:	83 e0       	ldi	r24, 0x03	; 3
    3c36:	cf ef       	ldi	r28, 0xFF	; 255
    3c38:	c8 0f       	add	r28, r24
    3c3a:	88 23       	and	r24, r24
    3c3c:	d9 f0       	breq	.+54     	; 0x3c74 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    3c3e:	8c 2f       	mov	r24, r28
    3c40:	88 0f       	add	r24, r24
    3c42:	88 0f       	add	r24, r24
    3c44:	88 0f       	add	r24, r24
    3c46:	a3 01       	movw	r20, r6
    3c48:	92 01       	movw	r18, r4
    3c4a:	04 c0       	rjmp	.+8      	; 0x3c54 <_ZN7TwoWire11requestFromEhhmhh+0x50>
    3c4c:	56 95       	lsr	r21
    3c4e:	47 95       	ror	r20
    3c50:	37 95       	ror	r19
    3c52:	27 95       	ror	r18
    3c54:	8a 95       	dec	r24
    3c56:	d2 f7       	brpl	.-12     	; 0x3c4c <_ZN7TwoWire11requestFromEhhmhh+0x48>
    3c58:	ca 01       	movw	r24, r20
    3c5a:	b9 01       	movw	r22, r18
    3c5c:	d5 01       	movw	r26, r10
    3c5e:	ed 91       	ld	r30, X+
    3c60:	fc 91       	ld	r31, X
    3c62:	01 90       	ld	r0, Z+
    3c64:	f0 81       	ld	r31, Z
    3c66:	e0 2d       	mov	r30, r0
    3c68:	c5 01       	movw	r24, r10
    3c6a:	19 95       	eicall
    3c6c:	8c 2f       	mov	r24, r28
    3c6e:	c1 50       	subi	r28, 0x01	; 1
    3c70:	81 11       	cpse	r24, r1
    3c72:	e5 cf       	rjmp	.-54     	; 0x3c3e <_ZN7TwoWire11requestFromEhhmhh+0x3a>
    3c74:	60 e0       	ldi	r22, 0x00	; 0
    3c76:	c5 01       	movw	r24, r10
    3c78:	b3 df       	rcall	.-154    	; 0x3be0 <_ZN7TwoWire15endTransmissionEh>
    3c7a:	4d 2f       	mov	r20, r29
    3c7c:	d1 32       	cpi	r29, 0x21	; 33
    3c7e:	08 f0       	brcs	.+2      	; 0x3c82 <_ZN7TwoWire11requestFromEhhmhh+0x7e>
    3c80:	40 e2       	ldi	r20, 0x20	; 32
    3c82:	2c 2d       	mov	r18, r12
    3c84:	6a ee       	ldi	r22, 0xEA	; 234
    3c86:	77 e0       	ldi	r23, 0x07	; 7
    3c88:	8f 2d       	mov	r24, r15
    3c8a:	ba dc       	rcall	.-1676   	; 0x3600 <twi_readFrom>
    3c8c:	10 92 e9 07 	sts	0x07E9, r1	; 0x8007e9 <_ZN7TwoWire13rxBufferIndexE>
    3c90:	80 93 e8 07 	sts	0x07E8, r24	; 0x8007e8 <_ZN7TwoWire14rxBufferLengthE>
    3c94:	df 91       	pop	r29
    3c96:	cf 91       	pop	r28
    3c98:	1f 91       	pop	r17
    3c9a:	0f 91       	pop	r16
    3c9c:	ff 90       	pop	r15
    3c9e:	ef 90       	pop	r14
    3ca0:	cf 90       	pop	r12
    3ca2:	bf 90       	pop	r11
    3ca4:	af 90       	pop	r10
    3ca6:	7f 90       	pop	r7
    3ca8:	6f 90       	pop	r6
    3caa:	5f 90       	pop	r5
    3cac:	4f 90       	pop	r4
    3cae:	08 95       	ret

00003cb0 <_ZN7TwoWire11requestFromEhhh>:
    3cb0:	cf 92       	push	r12
    3cb2:	ef 92       	push	r14
    3cb4:	0f 93       	push	r16
    3cb6:	1f 93       	push	r17
    3cb8:	c2 2e       	mov	r12, r18
    3cba:	e1 2c       	mov	r14, r1
    3cbc:	00 e0       	ldi	r16, 0x00	; 0
    3cbe:	10 e0       	ldi	r17, 0x00	; 0
    3cc0:	98 01       	movw	r18, r16
    3cc2:	a0 df       	rcall	.-192    	; 0x3c04 <_ZN7TwoWire11requestFromEhhmhh>
    3cc4:	1f 91       	pop	r17
    3cc6:	0f 91       	pop	r16
    3cc8:	ef 90       	pop	r14
    3cca:	cf 90       	pop	r12
    3ccc:	08 95       	ret

00003cce <_ZN7TwoWire11requestFromEhh>:
    3cce:	21 e0       	ldi	r18, 0x01	; 1
    3cd0:	ef cf       	rjmp	.-34     	; 0x3cb0 <_ZN7TwoWire11requestFromEhhh>
    3cd2:	08 95       	ret

00003cd4 <_ZN7TwoWire11requestFromEii>:
    3cd4:	21 e0       	ldi	r18, 0x01	; 1
    3cd6:	ec cf       	rjmp	.-40     	; 0x3cb0 <_ZN7TwoWire11requestFromEhhh>
    3cd8:	08 95       	ret

00003cda <_ZN7TwoWire15endTransmissionEv>:
    3cda:	61 e0       	ldi	r22, 0x01	; 1
    3cdc:	81 cf       	rjmp	.-254    	; 0x3be0 <_ZN7TwoWire15endTransmissionEh>
    3cde:	08 95       	ret

00003ce0 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    3ce0:	81 ec       	ldi	r24, 0xC1	; 193
    3ce2:	92 e0       	ldi	r25, 0x02	; 2
    3ce4:	90 93 bf 07 	sts	0x07BF, r25	; 0x8007bf <Wire+0x1>
    3ce8:	80 93 be 07 	sts	0x07BE, r24	; 0x8007be <Wire>
    3cec:	08 95       	ret

00003cee <_ZN9IReadable15CommandReceivedEhPKhh>:
#include "EtherComm.h"

class IReadable : public IDevice {
public:
	void CommandReceived(uint8_t id, const uint8_t* data, uint8_t len){
		if(len == 0){
    3cee:	21 11       	cpse	r18, r1
    3cf0:	0d c0       	rjmp	.+26     	; 0x3d0c <_ZN9IReadable15CommandReceivedEhPKhh+0x1e>
			ReadRegisterRequested(id, EtherComm::buffer + 3);
    3cf2:	40 91 00 02 	lds	r20, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    3cf6:	50 91 01 02 	lds	r21, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    3cfa:	4d 5f       	subi	r20, 0xFD	; 253
    3cfc:	5f 4f       	sbci	r21, 0xFF	; 255
    3cfe:	dc 01       	movw	r26, r24
    3d00:	ed 91       	ld	r30, X+
    3d02:	fc 91       	ld	r31, X
    3d04:	06 80       	ldd	r0, Z+6	; 0x06
    3d06:	f7 81       	ldd	r31, Z+7	; 0x07
    3d08:	e0 2d       	mov	r30, r0
    3d0a:	19 95       	eicall
    3d0c:	08 95       	ret

00003d0e <_ZN13DigitalSensor6UpdateEPh>:
	
	bool begin(){ //override
		return rov.RegisterDevice(_id, this);
	}
	
	void Update(uint8_t* buffer) { //override
    3d0e:	08 95       	ret

00003d10 <_ZN9IWritable15CommandReceivedEhPKhh>:

class IWritable : public IDevice {
public:
	inline void CommandReceived(uint8_t id, const uint8_t* data, uint8_t len){
		//if(len == 0){
			WriteRegisterRequested(id, data, len);
    3d10:	dc 01       	movw	r26, r24
    3d12:	ed 91       	ld	r30, X+
    3d14:	fc 91       	ld	r31, X
    3d16:	06 80       	ldd	r0, Z+6	; 0x06
    3d18:	f7 81       	ldd	r31, Z+7	; 0x07
    3d1a:	e0 2d       	mov	r30, r0
    3d1c:	19 95       	eicall
    3d1e:	08 95       	ret

00003d20 <_ZN13ServoActuator6UpdateEPh>:
		//Servo_A1_enable();
		
		return true;	
	}
	
	void Update(uint8_t* buffer){ //Override
    3d20:	08 95       	ret

00003d22 <_ZN13DigitalSensor21ReadRegisterRequestedEhPh>:
	void ReadRegisterRequested(uint8_t id, uint8_t* buffer) { //override
		/*Serial.print("My id: ");
		Serial.print(_id);
		Serial.print("    Reg id: ");
		Serial.println(id);*/
		if(id == _id){
    3d22:	dc 01       	movw	r26, r24
    3d24:	12 96       	adiw	r26, 0x02	; 2
    3d26:	2c 91       	ld	r18, X
    3d28:	12 97       	sbiw	r26, 0x02	; 2
    3d2a:	26 13       	cpse	r18, r22
    3d2c:	1a c0       	rjmp	.+52     	; 0x3d62 <_ZN13DigitalSensor21ReadRegisterRequestedEhPh+0x40>
			buffer[0] = ((*pinPort & pin) > 0) ^ inversed;
    3d2e:	14 96       	adiw	r26, 0x04	; 4
    3d30:	ed 91       	ld	r30, X+
    3d32:	fc 91       	ld	r31, X
    3d34:	15 97       	sbiw	r26, 0x05	; 5
    3d36:	60 81       	ld	r22, Z
    3d38:	13 96       	adiw	r26, 0x03	; 3
    3d3a:	3c 91       	ld	r19, X
    3d3c:	36 23       	and	r19, r22
    3d3e:	61 e0       	ldi	r22, 0x01	; 1
    3d40:	09 f4       	brne	.+2      	; 0x3d44 <_ZN13DigitalSensor21ReadRegisterRequestedEhPh+0x22>
    3d42:	60 e0       	ldi	r22, 0x00	; 0
    3d44:	fa 01       	movw	r30, r20
    3d46:	dc 01       	movw	r26, r24
    3d48:	16 96       	adiw	r26, 0x06	; 6
    3d4a:	8c 91       	ld	r24, X
    3d4c:	86 27       	eor	r24, r22
    3d4e:	80 83       	st	Z, r24
	virtual void CommandReceived(uint8_t id, const uint8_t* data, uint8_t len) = 0;
	virtual void Update(uint8_t* buffer) = 0;
	
protected:
	void inline SendCommand(uint8_t id, uint8_t len){
		EtherComm::buffer[2] = id;
    3d50:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    3d54:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    3d58:	22 83       	std	Z+2, r18	; 0x02
		EtherComm::SendCommand(CMD_UpdateDevice, len + 1);
    3d5a:	62 e0       	ldi	r22, 0x02	; 2
    3d5c:	83 e0       	ldi	r24, 0x03	; 3
    3d5e:	0c 94 a4 0b 	jmp	0x1748	; 0x1748 <_ZN9EtherComm11SendCommandEhh>
    3d62:	08 95       	ret

00003d64 <_ZN13ServoActuator22WriteRegisterRequestedEhPKhh>:
		
	}
	
protected:
	void WriteRegisterRequested(uint8_t id, const uint8_t* data, uint8_t len){ //Override
    3d64:	0f 93       	push	r16
    3d66:	1f 93       	push	r17
    3d68:	cf 93       	push	r28
    3d6a:	df 93       	push	r29
    3d6c:	8c 01       	movw	r16, r24
    3d6e:	c6 2f       	mov	r28, r22
		//Serial.print("Id: ");
		//Serial.println(id);
		if(id == _id){
    3d70:	fc 01       	movw	r30, r24
    3d72:	d2 81       	ldd	r29, Z+2	; 0x02
    3d74:	d6 13       	cpse	r29, r22
    3d76:	16 c0       	rjmp	.+44     	; 0x3da4 <_ZN13ServoActuator22WriteRegisterRequestedEhPKhh+0x40>
			//Serial.print("Data Len: ");
			//Serial.println(len);
			if(len == 1){
    3d78:	21 30       	cpi	r18, 0x01	; 1
    3d7a:	09 f0       	breq	.+2      	; 0x3d7e <_ZN13ServoActuator22WriteRegisterRequestedEhPKhh+0x1a>
    3d7c:	64 c0       	rjmp	.+200    	; 0x3e46 <_ZN13ServoActuator22WriteRegisterRequestedEhPKhh+0xe2>
				//Serial.println("Recvd.");
				lastPos = data[0];
    3d7e:	fa 01       	movw	r30, r20
    3d80:	80 81       	ld	r24, Z
    3d82:	f8 01       	movw	r30, r16
    3d84:	86 83       	std	Z+6, r24	; 0x06
				Servo_A1_setPulse(data[0]);
    3d86:	fa 01       	movw	r30, r20
    3d88:	60 81       	ld	r22, Z
    3d8a:	84 ec       	ldi	r24, 0xC4	; 196
    3d8c:	96 e0       	ldi	r25, 0x06	; 6
    3d8e:	bd d9       	rcall	.-3206   	; 0x310a <_ZN13HardwareServo9setPulseCEh>
	}

protected:
	virtual void WriteRegisterRequested(uint8_t id, const uint8_t* data, uint8_t len);
	void SendConfirmation(uint8_t id){
		EtherComm::buffer[2] = id;
    3d90:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    3d94:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    3d98:	d2 83       	std	Z+2, r29	; 0x02
		EtherComm::SendCommand(CMD_UpdateDevice, 1);
    3d9a:	61 e0       	ldi	r22, 0x01	; 1
    3d9c:	83 e0       	ldi	r24, 0x03	; 3
    3d9e:	0e 94 a4 0b 	call	0x1748	; 0x1748 <_ZN9EtherComm11SendCommandEhh>
    3da2:	51 c0       	rjmp	.+162    	; 0x3e46 <_ZN13ServoActuator22WriteRegisterRequestedEhPKhh+0xe2>
				//Servo_A1_setPulse(lastPos++);
				//Servo_A2_setPulse(255);
				SendConfirmation(id);
			}
		}else if(id == _minId){
    3da4:	fc 01       	movw	r30, r24
    3da6:	83 81       	ldd	r24, Z+3	; 0x03
    3da8:	68 13       	cpse	r22, r24
    3daa:	18 c0       	rjmp	.+48     	; 0x3ddc <_ZN13ServoActuator22WriteRegisterRequestedEhPKhh+0x78>
			if(len == 2){
    3dac:	22 30       	cpi	r18, 0x02	; 2
    3dae:	09 f0       	breq	.+2      	; 0x3db2 <_ZN13ServoActuator22WriteRegisterRequestedEhPKhh+0x4e>
    3db0:	4a c0       	rjmp	.+148    	; 0x3e46 <_ZN13ServoActuator22WriteRegisterRequestedEhPKhh+0xe2>
				Servo_A1_setMin(*((uint16_t*)data));
    3db2:	fa 01       	movw	r30, r20
    3db4:	60 81       	ld	r22, Z
    3db6:	71 81       	ldd	r23, Z+1	; 0x01
    3db8:	84 ec       	ldi	r24, 0xC4	; 196
    3dba:	96 e0       	ldi	r25, 0x06	; 6
    3dbc:	cd d9       	rcall	.-3174   	; 0x3158 <_ZN13HardwareServo7setMinCEj>
				Servo_A1_setPulse(lastPos);
    3dbe:	f8 01       	movw	r30, r16
    3dc0:	66 81       	ldd	r22, Z+6	; 0x06
    3dc2:	84 ec       	ldi	r24, 0xC4	; 196
    3dc4:	96 e0       	ldi	r25, 0x06	; 6
    3dc6:	a1 d9       	rcall	.-3262   	; 0x310a <_ZN13HardwareServo9setPulseCEh>
	}

protected:
	virtual void WriteRegisterRequested(uint8_t id, const uint8_t* data, uint8_t len);
	void SendConfirmation(uint8_t id){
		EtherComm::buffer[2] = id;
    3dc8:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    3dcc:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    3dd0:	c2 83       	std	Z+2, r28	; 0x02
		EtherComm::SendCommand(CMD_UpdateDevice, 1);
    3dd2:	61 e0       	ldi	r22, 0x01	; 1
    3dd4:	83 e0       	ldi	r24, 0x03	; 3
    3dd6:	0e 94 a4 0b 	call	0x1748	; 0x1748 <_ZN9EtherComm11SendCommandEhh>
    3dda:	35 c0       	rjmp	.+106    	; 0x3e46 <_ZN13ServoActuator22WriteRegisterRequestedEhPKhh+0xe2>
				SendConfirmation(id);
			}
		}else if(id == _maxId){
    3ddc:	f8 01       	movw	r30, r16
    3dde:	84 81       	ldd	r24, Z+4	; 0x04
    3de0:	68 13       	cpse	r22, r24
    3de2:	17 c0       	rjmp	.+46     	; 0x3e12 <_ZN13ServoActuator22WriteRegisterRequestedEhPKhh+0xae>
			if(len == 2){
    3de4:	22 30       	cpi	r18, 0x02	; 2
    3de6:	79 f5       	brne	.+94     	; 0x3e46 <_ZN13ServoActuator22WriteRegisterRequestedEhPKhh+0xe2>
				Servo_A1_setMax(*((uint16_t*)data));
    3de8:	fa 01       	movw	r30, r20
    3dea:	60 81       	ld	r22, Z
    3dec:	71 81       	ldd	r23, Z+1	; 0x01
    3dee:	84 ec       	ldi	r24, 0xC4	; 196
    3df0:	96 e0       	ldi	r25, 0x06	; 6
    3df2:	b6 d9       	rcall	.-3220   	; 0x3160 <_ZN13HardwareServo7setMaxCEj>
				Servo_A1_setPulse(lastPos);
    3df4:	f8 01       	movw	r30, r16
    3df6:	66 81       	ldd	r22, Z+6	; 0x06
    3df8:	84 ec       	ldi	r24, 0xC4	; 196
    3dfa:	96 e0       	ldi	r25, 0x06	; 6
    3dfc:	86 d9       	rcall	.-3316   	; 0x310a <_ZN13HardwareServo9setPulseCEh>
	}

protected:
	virtual void WriteRegisterRequested(uint8_t id, const uint8_t* data, uint8_t len);
	void SendConfirmation(uint8_t id){
		EtherComm::buffer[2] = id;
    3dfe:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    3e02:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    3e06:	c2 83       	std	Z+2, r28	; 0x02
		EtherComm::SendCommand(CMD_UpdateDevice, 1);
    3e08:	61 e0       	ldi	r22, 0x01	; 1
    3e0a:	83 e0       	ldi	r24, 0x03	; 3
    3e0c:	0e 94 a4 0b 	call	0x1748	; 0x1748 <_ZN9EtherComm11SendCommandEhh>
    3e10:	1a c0       	rjmp	.+52     	; 0x3e46 <_ZN13ServoActuator22WriteRegisterRequestedEhPKhh+0xe2>
				SendConfirmation(id);
			}
		}else if(id == _enId){
    3e12:	f8 01       	movw	r30, r16
    3e14:	85 81       	ldd	r24, Z+5	; 0x05
    3e16:	68 13       	cpse	r22, r24
    3e18:	16 c0       	rjmp	.+44     	; 0x3e46 <_ZN13ServoActuator22WriteRegisterRequestedEhPKhh+0xe2>
			if(len == 1){
    3e1a:	21 30       	cpi	r18, 0x01	; 1
    3e1c:	a1 f4       	brne	.+40     	; 0x3e46 <_ZN13ServoActuator22WriteRegisterRequestedEhPKhh+0xe2>
				if(data[0] == 0) Servo_A1_disable();
    3e1e:	fa 01       	movw	r30, r20
    3e20:	80 81       	ld	r24, Z
    3e22:	81 11       	cpse	r24, r1
    3e24:	04 c0       	rjmp	.+8      	; 0x3e2e <_ZN13ServoActuator22WriteRegisterRequestedEhPKhh+0xca>
    3e26:	84 ec       	ldi	r24, 0xC4	; 196
    3e28:	96 e0       	ldi	r25, 0x06	; 6
    3e2a:	66 d9       	rcall	.-3380   	; 0x30f8 <_ZN13HardwareServo8DisableCEv>
				else Servo_A1_enable();
    3e2c:	03 c0       	rjmp	.+6      	; 0x3e34 <_ZN13ServoActuator22WriteRegisterRequestedEhPKhh+0xd0>
    3e2e:	84 ec       	ldi	r24, 0xC4	; 196
    3e30:	96 e0       	ldi	r25, 0x06	; 6
    3e32:	55 d9       	rcall	.-3414   	; 0x30de <_ZN13HardwareServo7EnableCEv>
	}

protected:
	virtual void WriteRegisterRequested(uint8_t id, const uint8_t* data, uint8_t len);
	void SendConfirmation(uint8_t id){
		EtherComm::buffer[2] = id;
    3e34:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    3e38:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    3e3c:	c2 83       	std	Z+2, r28	; 0x02
		EtherComm::SendCommand(CMD_UpdateDevice, 1);
    3e3e:	61 e0       	ldi	r22, 0x01	; 1
    3e40:	83 e0       	ldi	r24, 0x03	; 3
    3e42:	0e 94 a4 0b 	call	0x1748	; 0x1748 <_ZN9EtherComm11SendCommandEhh>
				SendConfirmation(id);
			}
		}
	}
    3e46:	df 91       	pop	r29
    3e48:	cf 91       	pop	r28
    3e4a:	1f 91       	pop	r17
    3e4c:	0f 91       	pop	r16
    3e4e:	08 95       	ret

00003e50 <_ZN5Robot14RegisterDeviceEhP7IDevice>:
	return true;
}


bool Robot::RegisterDevice(uint8_t id, IDevice* device){
	if(registers[id] == NULL){
    3e50:	90 e0       	ldi	r25, 0x00	; 0
    3e52:	fc 01       	movw	r30, r24
    3e54:	ee 0f       	add	r30, r30
    3e56:	ff 1f       	adc	r31, r31
    3e58:	ed 5a       	subi	r30, 0xAD	; 173
    3e5a:	f7 4f       	sbci	r31, 0xF7	; 247
    3e5c:	20 81       	ld	r18, Z
    3e5e:	31 81       	ldd	r19, Z+1	; 0x01
    3e60:	23 2b       	or	r18, r19
    3e62:	49 f4       	brne	.+18     	; 0x3e76 <_ZN5Robot14RegisterDeviceEhP7IDevice+0x26>
		//if(sensor.begin()){
		registers[id] = device; //TODO error handling
    3e64:	88 0f       	add	r24, r24
    3e66:	99 1f       	adc	r25, r25
    3e68:	fc 01       	movw	r30, r24
    3e6a:	ed 5a       	subi	r30, 0xAD	; 173
    3e6c:	f7 4f       	sbci	r31, 0xF7	; 247
    3e6e:	71 83       	std	Z+1, r23	; 0x01
    3e70:	60 83       	st	Z, r22
		//}
		return true;
    3e72:	81 e0       	ldi	r24, 0x01	; 1
    3e74:	08 95       	ret
	}else{
		//TODO id collisions
		return false;
    3e76:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    3e78:	08 95       	ret

00003e7a <_ZN13DigitalSensor5beginEv>:
		rov.RegisterDevice(0, this);
		//TODO move to begin?
	}
	
	bool begin(){ //override
		return rov.RegisterDevice(_id, this);
    3e7a:	bc 01       	movw	r22, r24
    3e7c:	fc 01       	movw	r30, r24
    3e7e:	82 81       	ldd	r24, Z+2	; 0x02
    3e80:	e7 cf       	rjmp	.-50     	; 0x3e50 <_ZN5Robot14RegisterDeviceEhP7IDevice>
	}
    3e82:	08 95       	ret

00003e84 <_ZN13ServoActuator5beginEv>:
		: _id(id), _minId(minId), _maxId(maxId), _enId(enId)
	{
		
	}
	
	bool begin(){ //Override
    3e84:	0f 93       	push	r16
    3e86:	1f 93       	push	r17
    3e88:	cf 93       	push	r28
    3e8a:	8c 01       	movw	r16, r24
		if(!rov.RegisterDevice(_id, this)) return false;
    3e8c:	bc 01       	movw	r22, r24
    3e8e:	fc 01       	movw	r30, r24
    3e90:	82 81       	ldd	r24, Z+2	; 0x02
    3e92:	de df       	rcall	.-68     	; 0x3e50 <_ZN5Robot14RegisterDeviceEhP7IDevice>
    3e94:	c8 2f       	mov	r28, r24
    3e96:	88 23       	and	r24, r24
    3e98:	19 f1       	breq	.+70     	; 0x3ee0 <_ZN13ServoActuator5beginEv+0x5c>
		if(!rov.RegisterDevice(_minId, this)) return false;
    3e9a:	b8 01       	movw	r22, r16
    3e9c:	f8 01       	movw	r30, r16
    3e9e:	83 81       	ldd	r24, Z+3	; 0x03
    3ea0:	d7 df       	rcall	.-82     	; 0x3e50 <_ZN5Robot14RegisterDeviceEhP7IDevice>
    3ea2:	c8 2f       	mov	r28, r24
    3ea4:	88 23       	and	r24, r24
    3ea6:	e1 f0       	breq	.+56     	; 0x3ee0 <_ZN13ServoActuator5beginEv+0x5c>
		if(!rov.RegisterDevice(_maxId, this)) return false;
    3ea8:	b8 01       	movw	r22, r16
    3eaa:	f8 01       	movw	r30, r16
    3eac:	84 81       	ldd	r24, Z+4	; 0x04
    3eae:	d0 df       	rcall	.-96     	; 0x3e50 <_ZN5Robot14RegisterDeviceEhP7IDevice>
    3eb0:	c8 2f       	mov	r28, r24
    3eb2:	88 23       	and	r24, r24
    3eb4:	a9 f0       	breq	.+42     	; 0x3ee0 <_ZN13ServoActuator5beginEv+0x5c>
		if(!rov.RegisterDevice(_enId, this)) return false;
    3eb6:	b8 01       	movw	r22, r16
    3eb8:	f8 01       	movw	r30, r16
    3eba:	85 81       	ldd	r24, Z+5	; 0x05
    3ebc:	c9 df       	rcall	.-110    	; 0x3e50 <_ZN5Robot14RegisterDeviceEhP7IDevice>
    3ebe:	c8 2f       	mov	r28, r24
    3ec0:	88 23       	and	r24, r24
    3ec2:	71 f0       	breq	.+28     	; 0x3ee0 <_ZN13ServoActuator5beginEv+0x5c>
		
		Servo_A1_setMin(550);
    3ec4:	66 e2       	ldi	r22, 0x26	; 38
    3ec6:	72 e0       	ldi	r23, 0x02	; 2
    3ec8:	84 ec       	ldi	r24, 0xC4	; 196
    3eca:	96 e0       	ldi	r25, 0x06	; 6
    3ecc:	45 d9       	rcall	.-3446   	; 0x3158 <_ZN13HardwareServo7setMinCEj>
		Servo_A1_setMax(2400);
    3ece:	60 e6       	ldi	r22, 0x60	; 96
    3ed0:	79 e0       	ldi	r23, 0x09	; 9
    3ed2:	84 ec       	ldi	r24, 0xC4	; 196
    3ed4:	96 e0       	ldi	r25, 0x06	; 6
    3ed6:	44 d9       	rcall	.-3448   	; 0x3160 <_ZN13HardwareServo7setMaxCEj>
		Servo_A1_setPulse(127);
    3ed8:	6f e7       	ldi	r22, 0x7F	; 127
    3eda:	84 ec       	ldi	r24, 0xC4	; 196
    3edc:	96 e0       	ldi	r25, 0x06	; 6
    3ede:	15 d9       	rcall	.-3542   	; 0x310a <_ZN13HardwareServo9setPulseCEh>
    3ee0:	8c 2f       	mov	r24, r28
		//Servo_A1_setPulse(0);
		//Servo_A1_enable();
		
		return true;	
	}
    3ee2:	cf 91       	pop	r28
    3ee4:	1f 91       	pop	r17
    3ee6:	0f 91       	pop	r16
    3ee8:	08 95       	ret

00003eea <_ZN5Robot15CommandReceivedEPKhh>:
    3eea:	66 23       	and	r22, r22
	for(uint8_t i = 0; i < len; i++){
		Serial.print(' ');
		Serial.print(data[i], HEX);
	}
	Serial.println();*/
	if(len >= 1){
    3eec:	d1 f0       	breq	.+52     	; 0x3f22 <_ZN5Robot15CommandReceivedEPKhh+0x38>
		if(registers[data[0]] != NULL){
    3eee:	fc 01       	movw	r30, r24
    3ef0:	30 81       	ld	r19, Z
    3ef2:	e3 2f       	mov	r30, r19
    3ef4:	f0 e0       	ldi	r31, 0x00	; 0
    3ef6:	ee 0f       	add	r30, r30
    3ef8:	ff 1f       	adc	r31, r31
    3efa:	ed 5a       	subi	r30, 0xAD	; 173
    3efc:	f7 4f       	sbci	r31, 0xF7	; 247
    3efe:	a0 81       	ld	r26, Z
    3f00:	b1 81       	ldd	r27, Z+1	; 0x01
    3f02:	10 97       	sbiw	r26, 0x00	; 0
    3f04:	71 f0       	breq	.+28     	; 0x3f22 <_ZN5Robot15CommandReceivedEPKhh+0x38>
    3f06:	26 2f       	mov	r18, r22
    3f08:	ac 01       	movw	r20, r24
			registers[data[0]]->CommandReceived(data[0], data + 1, len - 1);
    3f0a:	21 50       	subi	r18, 0x01	; 1
    3f0c:	4f 5f       	subi	r20, 0xFF	; 255
    3f0e:	5f 4f       	sbci	r21, 0xFF	; 255
    3f10:	ed 91       	ld	r30, X+
    3f12:	fc 91       	ld	r31, X
    3f14:	11 97       	sbiw	r26, 0x01	; 1
    3f16:	02 80       	ldd	r0, Z+2	; 0x02
    3f18:	f3 81       	ldd	r31, Z+3	; 0x03
    3f1a:	e0 2d       	mov	r30, r0
    3f1c:	63 2f       	mov	r22, r19
    3f1e:	cd 01       	movw	r24, r26
    3f20:	19 95       	eicall
    3f22:	08 95       	ret

00003f24 <_GLOBAL__sub_I__ZN5Robot9registersE>:

#include "../IReadable.h"

class DigitalSensor : public IReadable {
public:
	DigitalSensor(const uint8_t ID, Register& DDRPort, Register& PortPort, Register& PinPort, uint8_t Pin, bool Inversed = true) : _id(ID), pin(Pin), pinPort(&PinPort), inversed(Inversed) {
    3f24:	ec e4       	ldi	r30, 0x4C	; 76
    3f26:	f8 e0       	ldi	r31, 0x08	; 8
    3f28:	8d e4       	ldi	r24, 0x4D	; 77
    3f2a:	93 e0       	ldi	r25, 0x03	; 3
    3f2c:	91 83       	std	Z+1, r25	; 0x01
    3f2e:	80 83       	st	Z, r24
    3f30:	12 82       	std	Z+2, r1	; 0x02
    3f32:	82 e0       	ldi	r24, 0x02	; 2
    3f34:	83 83       	std	Z+3, r24	; 0x03
    3f36:	81 e3       	ldi	r24, 0x31	; 49
    3f38:	90 e0       	ldi	r25, 0x00	; 0
    3f3a:	95 83       	std	Z+5, r25	; 0x05
    3f3c:	84 83       	std	Z+4, r24	; 0x04
    3f3e:	81 e0       	ldi	r24, 0x01	; 1
    3f40:	86 83       	std	Z+6, r24	; 0x06
		DDRPort &= ~pin; //Enable input
    3f42:	81 98       	cbi	0x10, 1	; 16
		PortPort |= pin; //Enable pullup
    3f44:	89 9a       	sbi	0x11, 1	; 17
		rov.RegisterDevice(0, this);
    3f46:	bf 01       	movw	r22, r30
    3f48:	80 e0       	ldi	r24, 0x00	; 0
    3f4a:	82 df       	rcall	.-252    	; 0x3e50 <_ZN5Robot14RegisterDeviceEhP7IDevice>
#define ID_IMU_TEMPERATURE 1
#define ID_IMU_ACCELEROMETER 2
#define ID_PRESSURE_SENSOR 4

DigitalSensor BtnTest(ID_TEST_BUTTON, DDR_BTN0, PORT_BTN0, PIN_BTN0, MASK_BTN0);
ImuSensor Imu(ID_IMU_TEMPERATURE, ID_IMU_ACCELEROMETER);
    3f4c:	42 e0       	ldi	r20, 0x02	; 2
    3f4e:	61 e0       	ldi	r22, 0x01	; 1
    3f50:	8d e3       	ldi	r24, 0x3D	; 61
    3f52:	98 e0       	ldi	r25, 0x08	; 8
    3f54:	51 d1       	rcall	.+674    	; 0x41f8 <_ZN9ImuSensorC1Ehh>
PressureSensor Pressure(ID_PRESSURE_SENSOR, Timer0);
    3f56:	44 e4       	ldi	r20, 0x44	; 68
    3f58:	57 e0       	ldi	r21, 0x07	; 7
    3f5a:	64 e0       	ldi	r22, 0x04	; 4
    3f5c:	81 e1       	ldi	r24, 0x11	; 17
    3f5e:	98 e0       	ldi	r25, 0x08	; 8
    3f60:	08 d2       	rcall	.+1040   	; 0x4372 <_ZN14PressureSensorC1EhR13HardwareTimer>
//#include "../Peripherals/HardwareSerial.h"

class ServoActuator : public IWritable {
public:
	ServoActuator(const uint8_t id, const uint8_t minId, const uint8_t maxId, const uint8_t enId)
		: _id(id), _minId(minId), _maxId(maxId), _enId(enId)
    3f62:	ea e0       	ldi	r30, 0x0A	; 10
    3f64:	f8 e0       	ldi	r31, 0x08	; 8
    3f66:	89 e5       	ldi	r24, 0x59	; 89
    3f68:	93 e0       	ldi	r25, 0x03	; 3
    3f6a:	91 83       	std	Z+1, r25	; 0x01
    3f6c:	80 83       	st	Z, r24
    3f6e:	85 e0       	ldi	r24, 0x05	; 5
    3f70:	82 83       	std	Z+2, r24	; 0x02
    3f72:	86 e0       	ldi	r24, 0x06	; 6
    3f74:	83 83       	std	Z+3, r24	; 0x03
    3f76:	87 e0       	ldi	r24, 0x07	; 7
    3f78:	84 83       	std	Z+4, r24	; 0x04
    3f7a:	88 e0       	ldi	r24, 0x08	; 8
    3f7c:	85 83       	std	Z+5, r24	; 0x05
    3f7e:	08 95       	ret

00003f80 <_ZN5Robot5beginEv>:
	RegisterDevice(Imu);
	
	return true;
}*/

bool Robot::begin(){
    3f80:	cf 93       	push	r28
    3f82:	e3 e5       	ldi	r30, 0x53	; 83
    3f84:	f8 e0       	ldi	r31, 0x08	; 8
    3f86:	83 e5       	ldi	r24, 0x53	; 83
    3f88:	9a e0       	ldi	r25, 0x0A	; 10
	for(uint16_t i = 0; i < NUM_DEVICES; i++){
		registers[i] = NULL;
    3f8a:	11 92       	st	Z+, r1
    3f8c:	11 92       	st	Z+, r1
	
	return true;
}*/

bool Robot::begin(){
	for(uint16_t i = 0; i < NUM_DEVICES; i++){
    3f8e:	e8 17       	cp	r30, r24
    3f90:	f9 07       	cpc	r31, r25
    3f92:	d9 f7       	brne	.-10     	; 0x3f8a <_ZN5Robot5beginEv+0xa>
		registers[i] = NULL;
	}
	
	Servo1.begin();
    3f94:	8b e1       	ldi	r24, 0x1B	; 27
    3f96:	97 e0       	ldi	r25, 0x07	; 7
    3f98:	91 d8       	rcall	.-3806   	; 0x30bc <_ZN13HardwareServo5beginEv>
	Servo3.begin();
    3f9a:	8e ef       	ldi	r24, 0xFE	; 254
    3f9c:	96 e0       	ldi	r25, 0x06	; 6
    3f9e:	8e d8       	rcall	.-3812   	; 0x30bc <_ZN13HardwareServo5beginEv>
	Servo4.begin();
    3fa0:	81 ee       	ldi	r24, 0xE1	; 225
    3fa2:	96 e0       	ldi	r25, 0x06	; 6
    3fa4:	8b d8       	rcall	.-3818   	; 0x30bc <_ZN13HardwareServo5beginEv>
	Servo5.begin();
    3fa6:	84 ec       	ldi	r24, 0xC4	; 196
    3fa8:	96 e0       	ldi	r25, 0x06	; 6
    3faa:	88 d8       	rcall	.-3824   	; 0x30bc <_ZN13HardwareServo5beginEv>
    3fac:	6c e4       	ldi	r22, 0x4C	; 76
		//TODO move to begin?
	}
	
	bool begin(){ //override
		return rov.RegisterDevice(_id, this);
    3fae:	78 e0       	ldi	r23, 0x08	; 8
    3fb0:	80 91 4e 08 	lds	r24, 0x084E	; 0x80084e <BtnTest+0x2>
    3fb4:	4d df       	rcall	.-358    	; 0x3e50 <_ZN5Robot14RegisterDeviceEhP7IDevice>
    3fb6:	c8 2f       	mov	r28, r24
    3fb8:	81 11       	cpse	r24, r1
	
	//LedDDR |= LedPin;
	if(!BtnTest.begin()){
    3fba:	06 c0       	rjmp	.+12     	; 0x3fc8 <_ZN5Robot5beginEv+0x48>
    3fbc:	6f ec       	ldi	r22, 0xCF	; 207
		Serial.println("Unable to initialize BtnTest.");
    3fbe:	72 e0       	ldi	r23, 0x02	; 2
    3fc0:	88 ef       	ldi	r24, 0xF8	; 248
    3fc2:	95 e0       	ldi	r25, 0x05	; 5
    3fc4:	4a d2       	rcall	.+1172   	; 0x445a <_ZN5Print7printlnEPKc>
    3fc6:	4a c0       	rjmp	.+148    	; 0x405c <_ZN5Robot5beginEv+0xdc>
		return false;
    3fc8:	8d e3       	ldi	r24, 0x3D	; 61
	}
	if(!Imu.begin()){
    3fca:	98 e0       	ldi	r25, 0x08	; 8
    3fcc:	5e d0       	rcall	.+188    	; 0x408a <_ZN9ImuSensor5beginEv>
    3fce:	c8 2f       	mov	r28, r24
    3fd0:	81 11       	cpse	r24, r1
    3fd2:	06 c0       	rjmp	.+12     	; 0x3fe0 <_ZN5Robot5beginEv+0x60>
    3fd4:	6d ee       	ldi	r22, 0xED	; 237
		Serial.println("Unable to initialize IMU.");
    3fd6:	72 e0       	ldi	r23, 0x02	; 2
    3fd8:	88 ef       	ldi	r24, 0xF8	; 248
    3fda:	95 e0       	ldi	r25, 0x05	; 5
    3fdc:	3e d2       	rcall	.+1148   	; 0x445a <_ZN5Print7printlnEPKc>
    3fde:	3e c0       	rjmp	.+124    	; 0x405c <_ZN5Robot5beginEv+0xdc>
		return false;
    3fe0:	81 e1       	ldi	r24, 0x11	; 17
	}
	if(!Pressure.begin()){ //TODO automatically?
    3fe2:	98 e0       	ldi	r25, 0x08	; 8
    3fe4:	32 d1       	rcall	.+612    	; 0x424a <_ZN14PressureSensor5beginEv>
    3fe6:	c8 2f       	mov	r28, r24
    3fe8:	81 11       	cpse	r24, r1
    3fea:	06 c0       	rjmp	.+12     	; 0x3ff8 <_ZN5Robot5beginEv+0x78>
    3fec:	67 e0       	ldi	r22, 0x07	; 7
		Serial.println("Unable to initialize Pressure Sensor.");
    3fee:	73 e0       	ldi	r23, 0x03	; 3
    3ff0:	88 ef       	ldi	r24, 0xF8	; 248
    3ff2:	95 e0       	ldi	r25, 0x05	; 5
    3ff4:	32 d2       	rcall	.+1124   	; 0x445a <_ZN5Print7printlnEPKc>
    3ff6:	32 c0       	rjmp	.+100    	; 0x405c <_ZN5Robot5beginEv+0xdc>
		return false;
    3ff8:	6a e0       	ldi	r22, 0x0A	; 10
	{
		
	}
	
	bool begin(){ //Override
		if(!rov.RegisterDevice(_id, this)) return false;
    3ffa:	78 e0       	ldi	r23, 0x08	; 8
    3ffc:	80 91 0c 08 	lds	r24, 0x080C	; 0x80080c <TestServo+0x2>
    4000:	27 df       	rcall	.-434    	; 0x3e50 <_ZN5Robot14RegisterDeviceEhP7IDevice>
    4002:	88 23       	and	r24, r24
    4004:	29 f1       	breq	.+74     	; 0x4050 <_ZN5Robot5beginEv+0xd0>
    4006:	6a e0       	ldi	r22, 0x0A	; 10
		if(!rov.RegisterDevice(_minId, this)) return false;
    4008:	78 e0       	ldi	r23, 0x08	; 8
    400a:	80 91 0d 08 	lds	r24, 0x080D	; 0x80080d <TestServo+0x3>
    400e:	20 df       	rcall	.-448    	; 0x3e50 <_ZN5Robot14RegisterDeviceEhP7IDevice>
    4010:	88 23       	and	r24, r24
    4012:	f1 f0       	breq	.+60     	; 0x4050 <_ZN5Robot5beginEv+0xd0>
    4014:	6a e0       	ldi	r22, 0x0A	; 10
		if(!rov.RegisterDevice(_maxId, this)) return false;
    4016:	78 e0       	ldi	r23, 0x08	; 8
    4018:	80 91 0e 08 	lds	r24, 0x080E	; 0x80080e <TestServo+0x4>
    401c:	19 df       	rcall	.-462    	; 0x3e50 <_ZN5Robot14RegisterDeviceEhP7IDevice>
    401e:	88 23       	and	r24, r24
    4020:	b9 f0       	breq	.+46     	; 0x4050 <_ZN5Robot5beginEv+0xd0>
    4022:	6a e0       	ldi	r22, 0x0A	; 10
		if(!rov.RegisterDevice(_enId, this)) return false;
    4024:	78 e0       	ldi	r23, 0x08	; 8
    4026:	80 91 0f 08 	lds	r24, 0x080F	; 0x80080f <TestServo+0x5>
    402a:	12 df       	rcall	.-476    	; 0x3e50 <_ZN5Robot14RegisterDeviceEhP7IDevice>
    402c:	c8 2f       	mov	r28, r24
    402e:	88 23       	and	r24, r24
    4030:	79 f0       	breq	.+30     	; 0x4050 <_ZN5Robot5beginEv+0xd0>
    4032:	66 e2       	ldi	r22, 0x26	; 38
		
		Servo_A1_setMin(550);
    4034:	72 e0       	ldi	r23, 0x02	; 2
    4036:	84 ec       	ldi	r24, 0xC4	; 196
    4038:	96 e0       	ldi	r25, 0x06	; 6
    403a:	8e d8       	rcall	.-3812   	; 0x3158 <_ZN13HardwareServo7setMinCEj>
    403c:	60 e6       	ldi	r22, 0x60	; 96
    403e:	79 e0       	ldi	r23, 0x09	; 9
		Servo_A1_setMax(2400);
    4040:	84 ec       	ldi	r24, 0xC4	; 196
    4042:	96 e0       	ldi	r25, 0x06	; 6
    4044:	8d d8       	rcall	.-3814   	; 0x3160 <_ZN13HardwareServo7setMaxCEj>
    4046:	6f e7       	ldi	r22, 0x7F	; 127
    4048:	84 ec       	ldi	r24, 0xC4	; 196
    404a:	96 e0       	ldi	r25, 0x06	; 6
		Servo_A1_setPulse(127);
    404c:	5e d8       	rcall	.-3908   	; 0x310a <_ZN13HardwareServo9setPulseCEh>
    404e:	06 c0       	rjmp	.+12     	; 0x405c <_ZN5Robot5beginEv+0xdc>
    4050:	6d e2       	ldi	r22, 0x2D	; 45
    4052:	73 e0       	ldi	r23, 0x03	; 3
    4054:	88 ef       	ldi	r24, 0xF8	; 248
	} 
	if(!TestServo.begin()){
		Serial.println("Unable to initialize Servo.");
    4056:	95 e0       	ldi	r25, 0x05	; 5
    4058:	00 d2       	rcall	.+1024   	; 0x445a <_ZN5Print7printlnEPKc>
    405a:	c0 e0       	ldi	r28, 0x00	; 0
    405c:	8c 2f       	mov	r24, r28
    405e:	cf 91       	pop	r28
    4060:	08 95       	ret

00004062 <_ZN5Robot4LoopEv>:
		return false;
    4062:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
	}
	
	return true;
}
    4066:	70 91 01 02 	lds	r23, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
bool Robot::ReadTestBtn(){ //TODO remove
	return !((TestBtnPinPort & TestBtnPin) > 0);
}*/

void Robot::Loop(){
	Imu.Update(EtherComm::buffer + 3);
    406a:	6d 5f       	subi	r22, 0xFD	; 253
    406c:	7f 4f       	sbci	r23, 0xFF	; 255
    406e:	8d e3       	ldi	r24, 0x3D	; 61
    4070:	98 e0       	ldi	r25, 0x08	; 8
    4072:	0a d0       	rcall	.+20     	; 0x4088 <_ZN9ImuSensor6UpdateEPh>
	Pressure.Update(EtherComm::buffer + 3);
    4074:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    4078:	70 91 01 02 	lds	r23, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    407c:	6d 5f       	subi	r22, 0xFD	; 253
    407e:	7f 4f       	sbci	r23, 0xFF	; 255
    4080:	81 e1       	ldi	r24, 0x11	; 17
    4082:	98 e0       	ldi	r25, 0x08	; 8
    4084:	0b c1       	rjmp	.+534    	; 0x429c <_ZN14PressureSensor6UpdateEPh>
    4086:	08 95       	ret

00004088 <_ZN9ImuSensor6UpdateEPh>:
		rov.RegisterDevice(tempId, this)
		&& rov.RegisterDevice(accelId, this)
		&& imu.begin();
}

void ImuSensor::Update(uint8_t* buffer){
    4088:	08 95       	ret

0000408a <_ZN9ImuSensor5beginEv>:

ImuSensor::ImuSensor(const uint8_t TempId, const uint8_t AccelId) : imu(55, 0x28), tempId(TempId), accelId(AccelId) {
	
}

bool ImuSensor::begin(){
    408a:	cf 93       	push	r28
    408c:	df 93       	push	r29
    408e:	ec 01       	movw	r28, r24
	return 
		rov.RegisterDevice(tempId, this)
    4090:	bc 01       	movw	r22, r24
    4092:	8d 85       	ldd	r24, Y+13	; 0x0d
    4094:	dd de       	rcall	.-582    	; 0x3e50 <_ZN5Robot14RegisterDeviceEhP7IDevice>
		&& rov.RegisterDevice(accelId, this)
		&& imu.begin();
    4096:	88 23       	and	r24, r24
    4098:	51 f0       	breq	.+20     	; 0x40ae <_ZN9ImuSensor5beginEv+0x24>
}

bool ImuSensor::begin(){
	return 
		rov.RegisterDevice(tempId, this)
		&& rov.RegisterDevice(accelId, this)
    409a:	be 01       	movw	r22, r28
    409c:	8e 85       	ldd	r24, Y+14	; 0x0e
    409e:	d8 de       	rcall	.-592    	; 0x3e50 <_ZN5Robot14RegisterDeviceEhP7IDevice>
    40a0:	88 23       	and	r24, r24
    40a2:	29 f0       	breq	.+10     	; 0x40ae <_ZN9ImuSensor5beginEv+0x24>
		&& imu.begin();
    40a4:	6c e0       	ldi	r22, 0x0C	; 12
    40a6:	ce 01       	movw	r24, r28
    40a8:	02 96       	adiw	r24, 0x02	; 2
    40aa:	0e 94 3d 02 	call	0x47a	; 0x47a <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>
}
    40ae:	df 91       	pop	r29
    40b0:	cf 91       	pop	r28
    40b2:	08 95       	ret

000040b4 <_ZN9ImuSensor21ReadRegisterRequestedEhPh>:
	*buffer++ = *val++;
}

AdafruitImu::Vector<3> vector;

void ImuSensor::ReadRegisterRequested(uint8_t id, uint8_t* buffer){
    40b4:	ef 92       	push	r14
    40b6:	ff 92       	push	r15
    40b8:	0f 93       	push	r16
    40ba:	1f 93       	push	r17
    40bc:	cf 93       	push	r28
    40be:	df 93       	push	r29
    40c0:	cd b7       	in	r28, 0x3d	; 61
    40c2:	de b7       	in	r29, 0x3e	; 62
    40c4:	68 97       	sbiw	r28, 0x18	; 24
    40c6:	0f b6       	in	r0, 0x3f	; 63
    40c8:	f8 94       	cli
    40ca:	de bf       	out	0x3e, r29	; 62
    40cc:	0f be       	out	0x3f, r0	; 63
    40ce:	cd bf       	out	0x3d, r28	; 61
    40d0:	f6 2e       	mov	r15, r22
    40d2:	8a 01       	movw	r16, r20
	if(id == tempId){
    40d4:	dc 01       	movw	r26, r24
    40d6:	1d 96       	adiw	r26, 0x0d	; 13
    40d8:	ec 90       	ld	r14, X
    40da:	e6 12       	cpse	r14, r22
    40dc:	0f c0       	rjmp	.+30     	; 0x40fc <_ZN9ImuSensor21ReadRegisterRequestedEhPh+0x48>
		buffer[0] = imu.getTemp();
    40de:	02 96       	adiw	r24, 0x02	; 2
    40e0:	0e 94 aa 02 	call	0x554	; 0x554 <_ZN15Adafruit_BNO0557getTempEv>
    40e4:	f8 01       	movw	r30, r16
    40e6:	80 83       	st	Z, r24
	virtual void CommandReceived(uint8_t id, const uint8_t* data, uint8_t len) = 0;
	virtual void Update(uint8_t* buffer) = 0;
	
protected:
	void inline SendCommand(uint8_t id, uint8_t len){
		EtherComm::buffer[2] = id;
    40e8:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    40ec:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    40f0:	e2 82       	std	Z+2, r14	; 0x02
		EtherComm::SendCommand(CMD_UpdateDevice, len + 1);
    40f2:	62 e0       	ldi	r22, 0x02	; 2
    40f4:	83 e0       	ldi	r24, 0x03	; 3
    40f6:	0e 94 a4 0b 	call	0x1748	; 0x1748 <_ZN9EtherComm11SendCommandEhh>
    40fa:	71 c0       	rjmp	.+226    	; 0x41de <_ZN9ImuSensor21ReadRegisterRequestedEhPh+0x12a>
		SendCommand(id, 1);
	}else if(id == accelId){
    40fc:	dc 01       	movw	r26, r24
    40fe:	1e 96       	adiw	r26, 0x0e	; 14
    4100:	2c 91       	ld	r18, X
    4102:	62 13       	cpse	r22, r18
    4104:	6c c0       	rjmp	.+216    	; 0x41de <_ZN9ImuSensor21ReadRegisterRequestedEhPh+0x12a>
		vector = imu.getVector(Adafruit_BNO055::VECTOR_ACCELEROMETER );
    4106:	bc 01       	movw	r22, r24
    4108:	6e 5f       	subi	r22, 0xFE	; 254
    410a:	7f 4f       	sbci	r23, 0xFF	; 255
    410c:	48 e0       	ldi	r20, 0x08	; 8
    410e:	ce 01       	movw	r24, r28
    4110:	01 96       	adiw	r24, 0x01	; 1
    4112:	0e 94 00 03 	call	0x600	; 0x600 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
    4116:	fe 01       	movw	r30, r28
    4118:	31 96       	adiw	r30, 0x01	; 1
    411a:	a3 e5       	ldi	r26, 0x53	; 83
    411c:	ba e0       	ldi	r27, 0x0A	; 10
    411e:	ce 01       	movw	r24, r28
    4120:	0d 96       	adiw	r24, 0x0d	; 13
		}

		Vector& operator=(const Vector& v)
		{
			for (int x = 0; x < N; x++ )
			p_vec[x] = v.p_vec[x];
    4122:	41 91       	ld	r20, Z+
    4124:	51 91       	ld	r21, Z+
    4126:	61 91       	ld	r22, Z+
    4128:	71 91       	ld	r23, Z+
    412a:	4d 93       	st	X+, r20
    412c:	5d 93       	st	X+, r21
    412e:	6d 93       	st	X+, r22
    4130:	7d 93       	st	X+, r23
			return ret;
		}

		Vector& operator=(const Vector& v)
		{
			for (int x = 0; x < N; x++ )
    4132:	e8 17       	cp	r30, r24
    4134:	f9 07       	cpc	r31, r25
    4136:	a9 f7       	brne	.-22     	; 0x4122 <_ZN9ImuSensor21ReadRegisterRequestedEhPh+0x6e>
		saveFloat(vector.x(), buffer + 0);
    4138:	e3 e5       	ldi	r30, 0x53	; 83
    413a:	fa e0       	ldi	r31, 0x0A	; 10
    413c:	20 81       	ld	r18, Z
    413e:	51 81       	ldd	r21, Z+1	; 0x01
    4140:	42 81       	ldd	r20, Z+2	; 0x02
    4142:	33 81       	ldd	r19, Z+3	; 0x03
    4144:	82 2f       	mov	r24, r18
    4146:	95 2f       	mov	r25, r21
    4148:	a4 2f       	mov	r26, r20
    414a:	b3 2f       	mov	r27, r19
    414c:	8d 87       	std	Y+13, r24	; 0x0d
    414e:	9e 87       	std	Y+14, r25	; 0x0e
    4150:	af 87       	std	Y+15, r26	; 0x0f
    4152:	b8 8b       	std	Y+16, r27	; 0x10
	
}

static void saveFloat(float f, uint8_t* buffer){ //TODO put in IRegister? Used in PressureSensor too
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    4154:	d8 01       	movw	r26, r16
    4156:	2c 93       	st	X, r18
	*buffer++ = *val++;
    4158:	8e 85       	ldd	r24, Y+14	; 0x0e
    415a:	11 96       	adiw	r26, 0x01	; 1
    415c:	8c 93       	st	X, r24
    415e:	11 97       	sbiw	r26, 0x01	; 1
	*buffer++ = *val++;
    4160:	8f 85       	ldd	r24, Y+15	; 0x0f
    4162:	12 96       	adiw	r26, 0x02	; 2
    4164:	8c 93       	st	X, r24
    4166:	12 97       	sbiw	r26, 0x02	; 2
	*buffer++ = *val++;
    4168:	88 89       	ldd	r24, Y+16	; 0x10
    416a:	13 96       	adiw	r26, 0x03	; 3
    416c:	8c 93       	st	X, r24
    416e:	24 81       	ldd	r18, Z+4	; 0x04
    4170:	55 81       	ldd	r21, Z+5	; 0x05
    4172:	46 81       	ldd	r20, Z+6	; 0x06
    4174:	37 81       	ldd	r19, Z+7	; 0x07
    4176:	82 2f       	mov	r24, r18
    4178:	95 2f       	mov	r25, r21
    417a:	a4 2f       	mov	r26, r20
    417c:	b3 2f       	mov	r27, r19
    417e:	89 8b       	std	Y+17, r24	; 0x11
    4180:	9a 8b       	std	Y+18, r25	; 0x12
    4182:	ab 8b       	std	Y+19, r26	; 0x13
    4184:	bc 8b       	std	Y+20, r27	; 0x14
	
}

static void saveFloat(float f, uint8_t* buffer){ //TODO put in IRegister? Used in PressureSensor too
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    4186:	d8 01       	movw	r26, r16
    4188:	14 96       	adiw	r26, 0x04	; 4
    418a:	2c 93       	st	X, r18
    418c:	14 97       	sbiw	r26, 0x04	; 4
	*buffer++ = *val++;
    418e:	8a 89       	ldd	r24, Y+18	; 0x12
    4190:	15 96       	adiw	r26, 0x05	; 5
    4192:	8c 93       	st	X, r24
    4194:	15 97       	sbiw	r26, 0x05	; 5
	*buffer++ = *val++;
    4196:	8b 89       	ldd	r24, Y+19	; 0x13
    4198:	16 96       	adiw	r26, 0x06	; 6
    419a:	8c 93       	st	X, r24
    419c:	16 97       	sbiw	r26, 0x06	; 6
	*buffer++ = *val++;
    419e:	8c 89       	ldd	r24, Y+20	; 0x14
    41a0:	17 96       	adiw	r26, 0x07	; 7
    41a2:	8c 93       	st	X, r24
    41a4:	20 85       	ldd	r18, Z+8	; 0x08
    41a6:	51 85       	ldd	r21, Z+9	; 0x09
    41a8:	42 85       	ldd	r20, Z+10	; 0x0a
    41aa:	33 85       	ldd	r19, Z+11	; 0x0b
    41ac:	82 2f       	mov	r24, r18
    41ae:	95 2f       	mov	r25, r21
    41b0:	a4 2f       	mov	r26, r20
    41b2:	b3 2f       	mov	r27, r19
    41b4:	8d 8b       	std	Y+21, r24	; 0x15
    41b6:	9e 8b       	std	Y+22, r25	; 0x16
    41b8:	af 8b       	std	Y+23, r26	; 0x17
    41ba:	b8 8f       	std	Y+24, r27	; 0x18
	
}

static void saveFloat(float f, uint8_t* buffer){ //TODO put in IRegister? Used in PressureSensor too
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    41bc:	f8 01       	movw	r30, r16
    41be:	20 87       	std	Z+8, r18	; 0x08
	*buffer++ = *val++;
    41c0:	8e 89       	ldd	r24, Y+22	; 0x16
    41c2:	81 87       	std	Z+9, r24	; 0x09
	*buffer++ = *val++;
    41c4:	8f 89       	ldd	r24, Y+23	; 0x17
    41c6:	82 87       	std	Z+10, r24	; 0x0a
	*buffer++ = *val++;
    41c8:	88 8d       	ldd	r24, Y+24	; 0x18
    41ca:	83 87       	std	Z+11, r24	; 0x0b
	virtual void CommandReceived(uint8_t id, const uint8_t* data, uint8_t len) = 0;
	virtual void Update(uint8_t* buffer) = 0;
	
protected:
	void inline SendCommand(uint8_t id, uint8_t len){
		EtherComm::buffer[2] = id;
    41cc:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    41d0:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    41d4:	f2 82       	std	Z+2, r15	; 0x02
		EtherComm::SendCommand(CMD_UpdateDevice, len + 1);
    41d6:	6d e0       	ldi	r22, 0x0D	; 13
    41d8:	83 e0       	ldi	r24, 0x03	; 3
    41da:	0e 94 a4 0b 	call	0x1748	; 0x1748 <_ZN9EtherComm11SendCommandEhh>
	saveFloat(vector.x(), buffer + 14);
	saveFloat(vector.y(), buffer + 18);
	saveFloat(vector.z(), buffer + 22);
	
	return 1 + 1 + 6*4;*/
    41de:	68 96       	adiw	r28, 0x18	; 24
    41e0:	0f b6       	in	r0, 0x3f	; 63
    41e2:	f8 94       	cli
    41e4:	de bf       	out	0x3e, r29	; 62
    41e6:	0f be       	out	0x3f, r0	; 63
    41e8:	cd bf       	out	0x3d, r28	; 61
    41ea:	df 91       	pop	r29
    41ec:	cf 91       	pop	r28
    41ee:	1f 91       	pop	r17
    41f0:	0f 91       	pop	r16
    41f2:	ff 90       	pop	r15
    41f4:	ef 90       	pop	r14
    41f6:	08 95       	ret

000041f8 <_ZN9ImuSensorC1Ehh>:
#define ID_TEMP 1
#define ID_ACCEL 2
//#include "../BNO055/utility/vector.h"
//Adafruit_BNO055 ImuSensor::imu;

ImuSensor::ImuSensor(const uint8_t TempId, const uint8_t AccelId) : imu(55, 0x28), tempId(TempId), accelId(AccelId) {
    41f8:	ef 92       	push	r14
    41fa:	ff 92       	push	r15
    41fc:	0f 93       	push	r16
    41fe:	1f 93       	push	r17
    4200:	cf 93       	push	r28
    4202:	df 93       	push	r29
    4204:	ec 01       	movw	r28, r24
    4206:	e6 2e       	mov	r14, r22
    4208:	f4 2e       	mov	r15, r20
    420a:	25 e6       	ldi	r18, 0x65	; 101
    420c:	33 e0       	ldi	r19, 0x03	; 3
    420e:	fc 01       	movw	r30, r24
    4210:	21 93       	st	Z+, r18
    4212:	31 93       	st	Z+, r19
    4214:	cf 01       	movw	r24, r30
    4216:	0e eb       	ldi	r16, 0xBE	; 190
    4218:	17 e0       	ldi	r17, 0x07	; 7
    421a:	28 e2       	ldi	r18, 0x28	; 40
    421c:	47 e3       	ldi	r20, 0x37	; 55
    421e:	50 e0       	ldi	r21, 0x00	; 0
    4220:	60 e0       	ldi	r22, 0x00	; 0
    4222:	70 e0       	ldi	r23, 0x00	; 0
    4224:	0e 94 c8 01 	call	0x390	; 0x390 <_ZN15Adafruit_BNO055C1ElhP7TwoWire>
    4228:	ed 86       	std	Y+13, r14	; 0x0d
    422a:	fe 86       	std	Y+14, r15	; 0x0e
	
}
    422c:	df 91       	pop	r29
    422e:	cf 91       	pop	r28
    4230:	1f 91       	pop	r17
    4232:	0f 91       	pop	r16
    4234:	ff 90       	pop	r15
    4236:	ef 90       	pop	r14
    4238:	08 95       	ret

0000423a <_GLOBAL__sub_I__ZN9ImuSensorC2Ehh>:
	template <uint8_t N> class Vector
	{
		public:
		Vector()
		{
			memset(p_vec, 0, sizeof(double)*N);
    423a:	8c e0       	ldi	r24, 0x0C	; 12
    423c:	e3 e5       	ldi	r30, 0x53	; 83
    423e:	fa e0       	ldi	r31, 0x0A	; 10
    4240:	df 01       	movw	r26, r30
    4242:	1d 92       	st	X+, r1
    4244:	8a 95       	dec	r24
    4246:	e9 f7       	brne	.-6      	; 0x4242 <_GLOBAL__sub_I__ZN9ImuSensorC2Ehh+0x8>
    4248:	08 95       	ret

0000424a <_ZN14PressureSensor5beginEv>:

PressureSensor::PressureSensor(const uint8_t id, HardwareTimer &timer) : sensor(timer), _id(id) {
	
}

bool PressureSensor::begin(){
    424a:	1f 93       	push	r17
    424c:	cf 93       	push	r28
    424e:	df 93       	push	r29
    4250:	ec 01       	movw	r28, r24
	if(!rov.RegisterDevice(_id, this)) return false;
    4252:	bc 01       	movw	r22, r24
    4254:	8a a5       	ldd	r24, Y+42	; 0x2a
    4256:	fc dd       	rcall	.-1032   	; 0x3e50 <_ZN5Robot14RegisterDeviceEhP7IDevice>
    4258:	18 2f       	mov	r17, r24
    425a:	88 23       	and	r24, r24
    425c:	61 f0       	breq	.+24     	; 0x4276 <_ZN14PressureSensor5beginEv+0x2c>
	if(sensor.begin()){
    425e:	22 96       	adiw	r28, 0x02	; 2
    4260:	ce 01       	movw	r24, r28
    4262:	0e 94 87 13 	call	0x270e	; 0x270e <_ZN6MS58375beginEv>
    4266:	18 2f       	mov	r17, r24
    4268:	88 23       	and	r24, r24
    426a:	29 f0       	breq	.+10     	; 0x4276 <_ZN14PressureSensor5beginEv+0x2c>
		sensor.setModel(MS5837::MS5837_30BA);
    426c:	60 91 aa 02 	lds	r22, 0x02AA	; 0x8002aa <_ZN6MS583711MS5837_30BAE>
    4270:	ce 01       	movw	r24, r28
    4272:	0e 94 37 0c 	call	0x186e	; 0x186e <_ZN6MS58378setModelEh>
		//sensor.setFluidDensity(997); //Freshwater
		return true;
	}
	
	return false;
}
    4276:	81 2f       	mov	r24, r17
    4278:	df 91       	pop	r29
    427a:	cf 91       	pop	r28
    427c:	1f 91       	pop	r17
    427e:	08 95       	ret

00004280 <_ZN14PressureSensor21ReadRegisterRequestedEhPh>:
			reading = false;
		}
	}
}

void PressureSensor::ReadRegisterRequested(uint8_t id, uint8_t* buffer){
    4280:	cf 93       	push	r28
    4282:	df 93       	push	r29
	if(!reading){
    4284:	fc 01       	movw	r30, r24
    4286:	23 a5       	ldd	r18, Z+43	; 0x2b
    4288:	21 11       	cpse	r18, r1
    428a:	05 c0       	rjmp	.+10     	; 0x4296 <_ZN14PressureSensor21ReadRegisterRequestedEhPh+0x16>
    428c:	ec 01       	movw	r28, r24
		reading = sensor.startRead();
    428e:	02 96       	adiw	r24, 0x02	; 2
    4290:	0e 94 3a 0c 	call	0x1874	; 0x1874 <_ZN6MS58379startReadEv>
    4294:	8b a7       	std	Y+43, r24	; 0x2b
	}
    4296:	df 91       	pop	r29
    4298:	cf 91       	pop	r28
    429a:	08 95       	ret

0000429c <_ZN14PressureSensor6UpdateEPh>:
	*buffer++ = *val++;
	*buffer++ = *val++;
	*buffer++ = *val++;
}

void PressureSensor::Update(uint8_t* buffer){
    429c:	cf 92       	push	r12
    429e:	df 92       	push	r13
    42a0:	ef 92       	push	r14
    42a2:	ff 92       	push	r15
    42a4:	0f 93       	push	r16
    42a6:	1f 93       	push	r17
    42a8:	cf 93       	push	r28
    42aa:	df 93       	push	r29
    42ac:	cd b7       	in	r28, 0x3d	; 61
    42ae:	de b7       	in	r29, 0x3e	; 62
    42b0:	28 97       	sbiw	r28, 0x08	; 8
    42b2:	0f b6       	in	r0, 0x3f	; 63
    42b4:	f8 94       	cli
    42b6:	de bf       	out	0x3e, r29	; 62
    42b8:	0f be       	out	0x3f, r0	; 63
    42ba:	cd bf       	out	0x3d, r28	; 61
	if(reading){
    42bc:	fc 01       	movw	r30, r24
    42be:	23 a5       	ldd	r18, Z+43	; 0x2b
    42c0:	22 23       	and	r18, r18
    42c2:	09 f4       	brne	.+2      	; 0x42c6 <_ZN14PressureSensor6UpdateEPh+0x2a>
    42c4:	47 c0       	rjmp	.+142    	; 0x4354 <_ZN14PressureSensor6UpdateEPh+0xb8>
    42c6:	7b 01       	movw	r14, r22
    42c8:	8c 01       	movw	r16, r24
		sensor.update();
    42ca:	6c 01       	movw	r12, r24
    42cc:	f2 e0       	ldi	r31, 0x02	; 2
    42ce:	cf 0e       	add	r12, r31
    42d0:	d1 1c       	adc	r13, r1
    42d2:	c6 01       	movw	r24, r12
    42d4:	0e 94 01 14 	call	0x2802	; 0x2802 <_ZN6MS58376updateEv>
		if(sensor.finished()){
    42d8:	c6 01       	movw	r24, r12
    42da:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <_ZN6MS58378finishedEv>
    42de:	88 23       	and	r24, r24
    42e0:	c9 f1       	breq	.+114    	; 0x4354 <_ZN14PressureSensor6UpdateEPh+0xb8>
			saveFloat(sensor.pressure(), buffer);
    42e2:	40 e0       	ldi	r20, 0x00	; 0
    42e4:	50 e0       	ldi	r21, 0x00	; 0
    42e6:	60 e8       	ldi	r22, 0x80	; 128
    42e8:	7f e3       	ldi	r23, 0x3F	; 63
    42ea:	c6 01       	movw	r24, r12
    42ec:	0e 94 0f 13 	call	0x261e	; 0x261e <_ZN6MS58378pressureEf>
    42f0:	26 2f       	mov	r18, r22
    42f2:	46 2f       	mov	r20, r22
    42f4:	57 2f       	mov	r21, r23
    42f6:	68 2f       	mov	r22, r24
    42f8:	79 2f       	mov	r23, r25
    42fa:	49 83       	std	Y+1, r20	; 0x01
    42fc:	5a 83       	std	Y+2, r21	; 0x02
    42fe:	6b 83       	std	Y+3, r22	; 0x03
    4300:	7c 83       	std	Y+4, r23	; 0x04
	return false;
}

static void saveFloat(float f, uint8_t* buffer){ //TODO put in IRegister? Used in IMU too
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    4302:	f7 01       	movw	r30, r14
    4304:	20 83       	st	Z, r18
	*buffer++ = *val++;
    4306:	8a 81       	ldd	r24, Y+2	; 0x02
    4308:	81 83       	std	Z+1, r24	; 0x01
	*buffer++ = *val++;
    430a:	8b 81       	ldd	r24, Y+3	; 0x03
    430c:	82 83       	std	Z+2, r24	; 0x02
	*buffer++ = *val++;
    430e:	8c 81       	ldd	r24, Y+4	; 0x04
    4310:	83 83       	std	Z+3, r24	; 0x03
void PressureSensor::Update(uint8_t* buffer){
	if(reading){
		sensor.update();
		if(sensor.finished()){
			saveFloat(sensor.pressure(), buffer);
			saveFloat(sensor.temperature(), buffer + 4);
    4312:	c6 01       	movw	r24, r12
    4314:	0e 94 40 13 	call	0x2680	; 0x2680 <_ZN6MS583711temperatureEv>
    4318:	26 2f       	mov	r18, r22
    431a:	46 2f       	mov	r20, r22
    431c:	57 2f       	mov	r21, r23
    431e:	68 2f       	mov	r22, r24
    4320:	79 2f       	mov	r23, r25
    4322:	4d 83       	std	Y+5, r20	; 0x05
    4324:	5e 83       	std	Y+6, r21	; 0x06
    4326:	6f 83       	std	Y+7, r22	; 0x07
    4328:	78 87       	std	Y+8, r23	; 0x08
	return false;
}

static void saveFloat(float f, uint8_t* buffer){ //TODO put in IRegister? Used in IMU too
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    432a:	f7 01       	movw	r30, r14
    432c:	24 83       	std	Z+4, r18	; 0x04
	*buffer++ = *val++;
    432e:	8e 81       	ldd	r24, Y+6	; 0x06
    4330:	85 83       	std	Z+5, r24	; 0x05
	*buffer++ = *val++;
    4332:	8f 81       	ldd	r24, Y+7	; 0x07
    4334:	86 83       	std	Z+6, r24	; 0x06
	*buffer++ = *val++;
    4336:	88 85       	ldd	r24, Y+8	; 0x08
    4338:	87 83       	std	Z+7, r24	; 0x07
	if(reading){
		sensor.update();
		if(sensor.finished()){
			saveFloat(sensor.pressure(), buffer);
			saveFloat(sensor.temperature(), buffer + 4);
			SendCommand(_id, 8);
    433a:	f8 01       	movw	r30, r16
    433c:	82 a5       	ldd	r24, Z+42	; 0x2a
	virtual void CommandReceived(uint8_t id, const uint8_t* data, uint8_t len) = 0;
	virtual void Update(uint8_t* buffer) = 0;
	
protected:
	void inline SendCommand(uint8_t id, uint8_t len){
		EtherComm::buffer[2] = id;
    433e:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    4342:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    4346:	82 83       	std	Z+2, r24	; 0x02
		EtherComm::SendCommand(CMD_UpdateDevice, len + 1);
    4348:	69 e0       	ldi	r22, 0x09	; 9
    434a:	83 e0       	ldi	r24, 0x03	; 3
    434c:	0e 94 a4 0b 	call	0x1748	; 0x1748 <_ZN9EtherComm11SendCommandEhh>
			reading = false;
    4350:	f8 01       	movw	r30, r16
    4352:	13 a6       	std	Z+43, r1	; 0x2b
		}
	}
}
    4354:	28 96       	adiw	r28, 0x08	; 8
    4356:	0f b6       	in	r0, 0x3f	; 63
    4358:	f8 94       	cli
    435a:	de bf       	out	0x3e, r29	; 62
    435c:	0f be       	out	0x3f, r0	; 63
    435e:	cd bf       	out	0x3d, r28	; 61
    4360:	df 91       	pop	r29
    4362:	cf 91       	pop	r28
    4364:	1f 91       	pop	r17
    4366:	0f 91       	pop	r16
    4368:	ff 90       	pop	r15
    436a:	ef 90       	pop	r14
    436c:	df 90       	pop	r13
    436e:	cf 90       	pop	r12
    4370:	08 95       	ret

00004372 <_ZN14PressureSensorC1EhR13HardwareTimer>:
 */ 

#include "PressureSensor.h"
#include "../Robot.h"

PressureSensor::PressureSensor(const uint8_t id, HardwareTimer &timer) : sensor(timer), _id(id) {
    4372:	1f 93       	push	r17
    4374:	cf 93       	push	r28
    4376:	df 93       	push	r29
    4378:	ec 01       	movw	r28, r24
    437a:	16 2f       	mov	r17, r22
    437c:	21 e7       	ldi	r18, 0x71	; 113
    437e:	33 e0       	ldi	r19, 0x03	; 3
    4380:	fc 01       	movw	r30, r24
    4382:	21 93       	st	Z+, r18
    4384:	31 93       	st	Z+, r19
    4386:	cf 01       	movw	r24, r30
    4388:	ba 01       	movw	r22, r20
    438a:	0e 94 2b 0c 	call	0x1856	; 0x1856 <_ZN6MS5837C1ER13HardwareTimer>
    438e:	1a a7       	std	Y+42, r17	; 0x2a
	
}
    4390:	df 91       	pop	r29
    4392:	cf 91       	pop	r28
    4394:	1f 91       	pop	r17
    4396:	08 95       	ret

00004398 <_GLOBAL__sub_I_bno>:
	setup();
	
	while(true){
		loop();
	}
    4398:	0f 93       	push	r16
    439a:	1f 93       	push	r17
/* Set the delay between fresh samples */
#define BNO055_SAMPLERATE_DELAY_MS 100

// Check I2C device address and correct line below (by default address is 0x29 or 0x28)
//                                   id, address
Adafruit_BNO055 bno = Adafruit_BNO055(55, 0x28);
    439c:	0e eb       	ldi	r16, 0xBE	; 190
    439e:	17 e0       	ldi	r17, 0x07	; 7
    43a0:	28 e2       	ldi	r18, 0x28	; 40
    43a2:	47 e3       	ldi	r20, 0x37	; 55
    43a4:	50 e0       	ldi	r21, 0x00	; 0
    43a6:	60 e0       	ldi	r22, 0x00	; 0
    43a8:	70 e0       	ldi	r23, 0x00	; 0
    43aa:	8f e5       	ldi	r24, 0x5F	; 95
    43ac:	9a e0       	ldi	r25, 0x0A	; 10
    43ae:	0e 94 c8 01 	call	0x390	; 0x390 <_ZN15Adafruit_BNO055C1ElhP7TwoWire>
	setup();
	
	while(true){
		loop();
	}
    43b2:	1f 91       	pop	r17
    43b4:	0f 91       	pop	r16
    43b6:	08 95       	ret

000043b8 <_ZN5Print5writeEPKhj>:
}

uint16_t Print::print(char c)
{
  return write(c);
}
    43b8:	cf 92       	push	r12
    43ba:	df 92       	push	r13
    43bc:	ef 92       	push	r14
    43be:	ff 92       	push	r15
    43c0:	0f 93       	push	r16
    43c2:	1f 93       	push	r17
    43c4:	cf 93       	push	r28
    43c6:	df 93       	push	r29
    43c8:	41 15       	cp	r20, r1
    43ca:	51 05       	cpc	r21, r1
    43cc:	c1 f0       	breq	.+48     	; 0x43fe <_ZN5Print5writeEPKhj+0x46>
    43ce:	6a 01       	movw	r12, r20
    43d0:	8c 01       	movw	r16, r24
    43d2:	e6 2e       	mov	r14, r22
    43d4:	f7 2e       	mov	r15, r23
    43d6:	c0 e0       	ldi	r28, 0x00	; 0
    43d8:	d0 e0       	ldi	r29, 0x00	; 0
    43da:	d7 01       	movw	r26, r14
    43dc:	6d 91       	ld	r22, X+
    43de:	7d 01       	movw	r14, r26
    43e0:	d8 01       	movw	r26, r16
    43e2:	ed 91       	ld	r30, X+
    43e4:	fc 91       	ld	r31, X
    43e6:	01 90       	ld	r0, Z+
    43e8:	f0 81       	ld	r31, Z
    43ea:	e0 2d       	mov	r30, r0
    43ec:	c8 01       	movw	r24, r16
    43ee:	19 95       	eicall
    43f0:	89 2b       	or	r24, r25
    43f2:	39 f0       	breq	.+14     	; 0x4402 <_ZN5Print5writeEPKhj+0x4a>
    43f4:	21 96       	adiw	r28, 0x01	; 1
    43f6:	cc 16       	cp	r12, r28
    43f8:	dd 06       	cpc	r13, r29
    43fa:	79 f7       	brne	.-34     	; 0x43da <_ZN5Print5writeEPKhj+0x22>
    43fc:	02 c0       	rjmp	.+4      	; 0x4402 <_ZN5Print5writeEPKhj+0x4a>
    43fe:	c0 e0       	ldi	r28, 0x00	; 0
    4400:	d0 e0       	ldi	r29, 0x00	; 0
    4402:	ce 01       	movw	r24, r28
    4404:	df 91       	pop	r29
    4406:	cf 91       	pop	r28
    4408:	1f 91       	pop	r17
    440a:	0f 91       	pop	r16
    440c:	ff 90       	pop	r15
    440e:	ef 90       	pop	r14
    4410:	df 90       	pop	r13
    4412:	cf 90       	pop	r12
    4414:	08 95       	ret

00004416 <_ZN5Print5printEPKc>:
    4416:	61 15       	cp	r22, r1
    4418:	71 05       	cpc	r23, r1
    441a:	81 f0       	breq	.+32     	; 0x443c <_ZN5Print5printEPKc+0x26>
    441c:	fb 01       	movw	r30, r22
    441e:	01 90       	ld	r0, Z+
    4420:	00 20       	and	r0, r0
    4422:	e9 f7       	brne	.-6      	; 0x441e <_ZN5Print5printEPKc+0x8>
    4424:	31 97       	sbiw	r30, 0x01	; 1
    4426:	af 01       	movw	r20, r30
    4428:	46 1b       	sub	r20, r22
    442a:	57 0b       	sbc	r21, r23
    442c:	dc 01       	movw	r26, r24
    442e:	ed 91       	ld	r30, X+
    4430:	fc 91       	ld	r31, X
    4432:	02 80       	ldd	r0, Z+2	; 0x02
    4434:	f3 81       	ldd	r31, Z+3	; 0x03
    4436:	e0 2d       	mov	r30, r0
    4438:	19 95       	eicall
    443a:	08 95       	ret
    443c:	80 e0       	ldi	r24, 0x00	; 0
    443e:	90 e0       	ldi	r25, 0x00	; 0
    4440:	08 95       	ret

00004442 <_ZN5Print7printlnEv>:
  //void clearWriteError() { setWriteError(0); }
  
  virtual uint16_t write(uint8_t) = 0;
  uint16_t write(const char *str) {
	  if (str == NULL) return 0;
	  return write((const uint8_t *)str, strlen(str));
    4442:	dc 01       	movw	r26, r24
    4444:	ed 91       	ld	r30, X+
    4446:	fc 91       	ld	r31, X
    4448:	02 80       	ldd	r0, Z+2	; 0x02
    444a:	f3 81       	ldd	r31, Z+3	; 0x03
    444c:	e0 2d       	mov	r30, r0
    444e:	42 e0       	ldi	r20, 0x02	; 2
    4450:	50 e0       	ldi	r21, 0x00	; 0
    4452:	69 e7       	ldi	r22, 0x79	; 121
    4454:	73 e0       	ldi	r23, 0x03	; 3
    4456:	19 95       	eicall
}
*/
uint16_t Print::println(void)
{
  return write("\r\n");
}
    4458:	08 95       	ret

0000445a <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}
*/
uint16_t Print::println(const char c[])
{
    445a:	0f 93       	push	r16
    445c:	1f 93       	push	r17
    445e:	cf 93       	push	r28
    4460:	df 93       	push	r29
    4462:	ec 01       	movw	r28, r24
  uint16_t n = print(c);
    4464:	d8 df       	rcall	.-80     	; 0x4416 <_ZN5Print5printEPKc>
    4466:	8c 01       	movw	r16, r24
  n += println();
    4468:	ce 01       	movw	r24, r28
    446a:	eb df       	rcall	.-42     	; 0x4442 <_ZN5Print7printlnEv>
  return n;
}
    446c:	80 0f       	add	r24, r16
    446e:	91 1f       	adc	r25, r17
    4470:	df 91       	pop	r29
    4472:	cf 91       	pop	r28
    4474:	1f 91       	pop	r17
    4476:	0f 91       	pop	r16
    4478:	08 95       	ret

0000447a <__subsf3>:
    447a:	50 58       	subi	r21, 0x80	; 128

0000447c <__addsf3>:
    447c:	bb 27       	eor	r27, r27
    447e:	aa 27       	eor	r26, r26
    4480:	0e d0       	rcall	.+28     	; 0x449e <__addsf3x>
    4482:	70 c1       	rjmp	.+736    	; 0x4764 <__fp_round>
    4484:	61 d1       	rcall	.+706    	; 0x4748 <__fp_pscA>
    4486:	30 f0       	brcs	.+12     	; 0x4494 <__addsf3+0x18>
    4488:	66 d1       	rcall	.+716    	; 0x4756 <__fp_pscB>
    448a:	20 f0       	brcs	.+8      	; 0x4494 <__addsf3+0x18>
    448c:	31 f4       	brne	.+12     	; 0x449a <__addsf3+0x1e>
    448e:	9f 3f       	cpi	r25, 0xFF	; 255
    4490:	11 f4       	brne	.+4      	; 0x4496 <__addsf3+0x1a>
    4492:	1e f4       	brtc	.+6      	; 0x449a <__addsf3+0x1e>
    4494:	56 c1       	rjmp	.+684    	; 0x4742 <__fp_nan>
    4496:	0e f4       	brtc	.+2      	; 0x449a <__addsf3+0x1e>
    4498:	e0 95       	com	r30
    449a:	e7 fb       	bst	r30, 7
    449c:	4c c1       	rjmp	.+664    	; 0x4736 <__fp_inf>

0000449e <__addsf3x>:
    449e:	e9 2f       	mov	r30, r25
    44a0:	72 d1       	rcall	.+740    	; 0x4786 <__fp_split3>
    44a2:	80 f3       	brcs	.-32     	; 0x4484 <__addsf3+0x8>
    44a4:	ba 17       	cp	r27, r26
    44a6:	62 07       	cpc	r22, r18
    44a8:	73 07       	cpc	r23, r19
    44aa:	84 07       	cpc	r24, r20
    44ac:	95 07       	cpc	r25, r21
    44ae:	18 f0       	brcs	.+6      	; 0x44b6 <__addsf3x+0x18>
    44b0:	71 f4       	brne	.+28     	; 0x44ce <__addsf3x+0x30>
    44b2:	9e f5       	brtc	.+102    	; 0x451a <__addsf3x+0x7c>
    44b4:	8a c1       	rjmp	.+788    	; 0x47ca <__fp_zero>
    44b6:	0e f4       	brtc	.+2      	; 0x44ba <__addsf3x+0x1c>
    44b8:	e0 95       	com	r30
    44ba:	0b 2e       	mov	r0, r27
    44bc:	ba 2f       	mov	r27, r26
    44be:	a0 2d       	mov	r26, r0
    44c0:	0b 01       	movw	r0, r22
    44c2:	b9 01       	movw	r22, r18
    44c4:	90 01       	movw	r18, r0
    44c6:	0c 01       	movw	r0, r24
    44c8:	ca 01       	movw	r24, r20
    44ca:	a0 01       	movw	r20, r0
    44cc:	11 24       	eor	r1, r1
    44ce:	ff 27       	eor	r31, r31
    44d0:	59 1b       	sub	r21, r25
    44d2:	99 f0       	breq	.+38     	; 0x44fa <__addsf3x+0x5c>
    44d4:	59 3f       	cpi	r21, 0xF9	; 249
    44d6:	50 f4       	brcc	.+20     	; 0x44ec <__addsf3x+0x4e>
    44d8:	50 3e       	cpi	r21, 0xE0	; 224
    44da:	68 f1       	brcs	.+90     	; 0x4536 <__addsf3x+0x98>
    44dc:	1a 16       	cp	r1, r26
    44de:	f0 40       	sbci	r31, 0x00	; 0
    44e0:	a2 2f       	mov	r26, r18
    44e2:	23 2f       	mov	r18, r19
    44e4:	34 2f       	mov	r19, r20
    44e6:	44 27       	eor	r20, r20
    44e8:	58 5f       	subi	r21, 0xF8	; 248
    44ea:	f3 cf       	rjmp	.-26     	; 0x44d2 <__addsf3x+0x34>
    44ec:	46 95       	lsr	r20
    44ee:	37 95       	ror	r19
    44f0:	27 95       	ror	r18
    44f2:	a7 95       	ror	r26
    44f4:	f0 40       	sbci	r31, 0x00	; 0
    44f6:	53 95       	inc	r21
    44f8:	c9 f7       	brne	.-14     	; 0x44ec <__addsf3x+0x4e>
    44fa:	7e f4       	brtc	.+30     	; 0x451a <__addsf3x+0x7c>
    44fc:	1f 16       	cp	r1, r31
    44fe:	ba 0b       	sbc	r27, r26
    4500:	62 0b       	sbc	r22, r18
    4502:	73 0b       	sbc	r23, r19
    4504:	84 0b       	sbc	r24, r20
    4506:	ba f0       	brmi	.+46     	; 0x4536 <__addsf3x+0x98>
    4508:	91 50       	subi	r25, 0x01	; 1
    450a:	a1 f0       	breq	.+40     	; 0x4534 <__addsf3x+0x96>
    450c:	ff 0f       	add	r31, r31
    450e:	bb 1f       	adc	r27, r27
    4510:	66 1f       	adc	r22, r22
    4512:	77 1f       	adc	r23, r23
    4514:	88 1f       	adc	r24, r24
    4516:	c2 f7       	brpl	.-16     	; 0x4508 <__addsf3x+0x6a>
    4518:	0e c0       	rjmp	.+28     	; 0x4536 <__addsf3x+0x98>
    451a:	ba 0f       	add	r27, r26
    451c:	62 1f       	adc	r22, r18
    451e:	73 1f       	adc	r23, r19
    4520:	84 1f       	adc	r24, r20
    4522:	48 f4       	brcc	.+18     	; 0x4536 <__addsf3x+0x98>
    4524:	87 95       	ror	r24
    4526:	77 95       	ror	r23
    4528:	67 95       	ror	r22
    452a:	b7 95       	ror	r27
    452c:	f7 95       	ror	r31
    452e:	9e 3f       	cpi	r25, 0xFE	; 254
    4530:	08 f0       	brcs	.+2      	; 0x4534 <__addsf3x+0x96>
    4532:	b3 cf       	rjmp	.-154    	; 0x449a <__addsf3+0x1e>
    4534:	93 95       	inc	r25
    4536:	88 0f       	add	r24, r24
    4538:	08 f0       	brcs	.+2      	; 0x453c <__addsf3x+0x9e>
    453a:	99 27       	eor	r25, r25
    453c:	ee 0f       	add	r30, r30
    453e:	97 95       	ror	r25
    4540:	87 95       	ror	r24
    4542:	08 95       	ret

00004544 <__cmpsf2>:
    4544:	d4 d0       	rcall	.+424    	; 0x46ee <__fp_cmp>
    4546:	08 f4       	brcc	.+2      	; 0x454a <__cmpsf2+0x6>
    4548:	81 e0       	ldi	r24, 0x01	; 1
    454a:	08 95       	ret

0000454c <__divsf3>:
    454c:	0c d0       	rcall	.+24     	; 0x4566 <__divsf3x>
    454e:	0a c1       	rjmp	.+532    	; 0x4764 <__fp_round>
    4550:	02 d1       	rcall	.+516    	; 0x4756 <__fp_pscB>
    4552:	40 f0       	brcs	.+16     	; 0x4564 <__divsf3+0x18>
    4554:	f9 d0       	rcall	.+498    	; 0x4748 <__fp_pscA>
    4556:	30 f0       	brcs	.+12     	; 0x4564 <__divsf3+0x18>
    4558:	21 f4       	brne	.+8      	; 0x4562 <__divsf3+0x16>
    455a:	5f 3f       	cpi	r21, 0xFF	; 255
    455c:	19 f0       	breq	.+6      	; 0x4564 <__divsf3+0x18>
    455e:	eb c0       	rjmp	.+470    	; 0x4736 <__fp_inf>
    4560:	51 11       	cpse	r21, r1
    4562:	34 c1       	rjmp	.+616    	; 0x47cc <__fp_szero>
    4564:	ee c0       	rjmp	.+476    	; 0x4742 <__fp_nan>

00004566 <__divsf3x>:
    4566:	0f d1       	rcall	.+542    	; 0x4786 <__fp_split3>
    4568:	98 f3       	brcs	.-26     	; 0x4550 <__divsf3+0x4>

0000456a <__divsf3_pse>:
    456a:	99 23       	and	r25, r25
    456c:	c9 f3       	breq	.-14     	; 0x4560 <__divsf3+0x14>
    456e:	55 23       	and	r21, r21
    4570:	b1 f3       	breq	.-20     	; 0x455e <__divsf3+0x12>
    4572:	95 1b       	sub	r25, r21
    4574:	55 0b       	sbc	r21, r21
    4576:	bb 27       	eor	r27, r27
    4578:	aa 27       	eor	r26, r26
    457a:	62 17       	cp	r22, r18
    457c:	73 07       	cpc	r23, r19
    457e:	84 07       	cpc	r24, r20
    4580:	38 f0       	brcs	.+14     	; 0x4590 <__divsf3_pse+0x26>
    4582:	9f 5f       	subi	r25, 0xFF	; 255
    4584:	5f 4f       	sbci	r21, 0xFF	; 255
    4586:	22 0f       	add	r18, r18
    4588:	33 1f       	adc	r19, r19
    458a:	44 1f       	adc	r20, r20
    458c:	aa 1f       	adc	r26, r26
    458e:	a9 f3       	breq	.-22     	; 0x457a <__divsf3_pse+0x10>
    4590:	33 d0       	rcall	.+102    	; 0x45f8 <__divsf3_pse+0x8e>
    4592:	0e 2e       	mov	r0, r30
    4594:	3a f0       	brmi	.+14     	; 0x45a4 <__divsf3_pse+0x3a>
    4596:	e0 e8       	ldi	r30, 0x80	; 128
    4598:	30 d0       	rcall	.+96     	; 0x45fa <__divsf3_pse+0x90>
    459a:	91 50       	subi	r25, 0x01	; 1
    459c:	50 40       	sbci	r21, 0x00	; 0
    459e:	e6 95       	lsr	r30
    45a0:	00 1c       	adc	r0, r0
    45a2:	ca f7       	brpl	.-14     	; 0x4596 <__divsf3_pse+0x2c>
    45a4:	29 d0       	rcall	.+82     	; 0x45f8 <__divsf3_pse+0x8e>
    45a6:	fe 2f       	mov	r31, r30
    45a8:	27 d0       	rcall	.+78     	; 0x45f8 <__divsf3_pse+0x8e>
    45aa:	66 0f       	add	r22, r22
    45ac:	77 1f       	adc	r23, r23
    45ae:	88 1f       	adc	r24, r24
    45b0:	bb 1f       	adc	r27, r27
    45b2:	26 17       	cp	r18, r22
    45b4:	37 07       	cpc	r19, r23
    45b6:	48 07       	cpc	r20, r24
    45b8:	ab 07       	cpc	r26, r27
    45ba:	b0 e8       	ldi	r27, 0x80	; 128
    45bc:	09 f0       	breq	.+2      	; 0x45c0 <__divsf3_pse+0x56>
    45be:	bb 0b       	sbc	r27, r27
    45c0:	80 2d       	mov	r24, r0
    45c2:	bf 01       	movw	r22, r30
    45c4:	ff 27       	eor	r31, r31
    45c6:	93 58       	subi	r25, 0x83	; 131
    45c8:	5f 4f       	sbci	r21, 0xFF	; 255
    45ca:	2a f0       	brmi	.+10     	; 0x45d6 <__divsf3_pse+0x6c>
    45cc:	9e 3f       	cpi	r25, 0xFE	; 254
    45ce:	51 05       	cpc	r21, r1
    45d0:	68 f0       	brcs	.+26     	; 0x45ec <__divsf3_pse+0x82>
    45d2:	b1 c0       	rjmp	.+354    	; 0x4736 <__fp_inf>
    45d4:	fb c0       	rjmp	.+502    	; 0x47cc <__fp_szero>
    45d6:	5f 3f       	cpi	r21, 0xFF	; 255
    45d8:	ec f3       	brlt	.-6      	; 0x45d4 <__divsf3_pse+0x6a>
    45da:	98 3e       	cpi	r25, 0xE8	; 232
    45dc:	dc f3       	brlt	.-10     	; 0x45d4 <__divsf3_pse+0x6a>
    45de:	86 95       	lsr	r24
    45e0:	77 95       	ror	r23
    45e2:	67 95       	ror	r22
    45e4:	b7 95       	ror	r27
    45e6:	f7 95       	ror	r31
    45e8:	9f 5f       	subi	r25, 0xFF	; 255
    45ea:	c9 f7       	brne	.-14     	; 0x45de <__divsf3_pse+0x74>
    45ec:	88 0f       	add	r24, r24
    45ee:	91 1d       	adc	r25, r1
    45f0:	96 95       	lsr	r25
    45f2:	87 95       	ror	r24
    45f4:	97 f9       	bld	r25, 7
    45f6:	08 95       	ret
    45f8:	e1 e0       	ldi	r30, 0x01	; 1
    45fa:	66 0f       	add	r22, r22
    45fc:	77 1f       	adc	r23, r23
    45fe:	88 1f       	adc	r24, r24
    4600:	bb 1f       	adc	r27, r27
    4602:	62 17       	cp	r22, r18
    4604:	73 07       	cpc	r23, r19
    4606:	84 07       	cpc	r24, r20
    4608:	ba 07       	cpc	r27, r26
    460a:	20 f0       	brcs	.+8      	; 0x4614 <__divsf3_pse+0xaa>
    460c:	62 1b       	sub	r22, r18
    460e:	73 0b       	sbc	r23, r19
    4610:	84 0b       	sbc	r24, r20
    4612:	ba 0b       	sbc	r27, r26
    4614:	ee 1f       	adc	r30, r30
    4616:	88 f7       	brcc	.-30     	; 0x45fa <__divsf3_pse+0x90>
    4618:	e0 95       	com	r30
    461a:	08 95       	ret

0000461c <__fixunssfsi>:
    461c:	bc d0       	rcall	.+376    	; 0x4796 <__fp_splitA>
    461e:	88 f0       	brcs	.+34     	; 0x4642 <__fixunssfsi+0x26>
    4620:	9f 57       	subi	r25, 0x7F	; 127
    4622:	90 f0       	brcs	.+36     	; 0x4648 <__fixunssfsi+0x2c>
    4624:	b9 2f       	mov	r27, r25
    4626:	99 27       	eor	r25, r25
    4628:	b7 51       	subi	r27, 0x17	; 23
    462a:	a0 f0       	brcs	.+40     	; 0x4654 <__fixunssfsi+0x38>
    462c:	d1 f0       	breq	.+52     	; 0x4662 <__fixunssfsi+0x46>
    462e:	66 0f       	add	r22, r22
    4630:	77 1f       	adc	r23, r23
    4632:	88 1f       	adc	r24, r24
    4634:	99 1f       	adc	r25, r25
    4636:	1a f0       	brmi	.+6      	; 0x463e <__fixunssfsi+0x22>
    4638:	ba 95       	dec	r27
    463a:	c9 f7       	brne	.-14     	; 0x462e <__fixunssfsi+0x12>
    463c:	12 c0       	rjmp	.+36     	; 0x4662 <__fixunssfsi+0x46>
    463e:	b1 30       	cpi	r27, 0x01	; 1
    4640:	81 f0       	breq	.+32     	; 0x4662 <__fixunssfsi+0x46>
    4642:	c3 d0       	rcall	.+390    	; 0x47ca <__fp_zero>
    4644:	b1 e0       	ldi	r27, 0x01	; 1
    4646:	08 95       	ret
    4648:	c0 c0       	rjmp	.+384    	; 0x47ca <__fp_zero>
    464a:	67 2f       	mov	r22, r23
    464c:	78 2f       	mov	r23, r24
    464e:	88 27       	eor	r24, r24
    4650:	b8 5f       	subi	r27, 0xF8	; 248
    4652:	39 f0       	breq	.+14     	; 0x4662 <__fixunssfsi+0x46>
    4654:	b9 3f       	cpi	r27, 0xF9	; 249
    4656:	cc f3       	brlt	.-14     	; 0x464a <__fixunssfsi+0x2e>
    4658:	86 95       	lsr	r24
    465a:	77 95       	ror	r23
    465c:	67 95       	ror	r22
    465e:	b3 95       	inc	r27
    4660:	d9 f7       	brne	.-10     	; 0x4658 <__fixunssfsi+0x3c>
    4662:	3e f4       	brtc	.+14     	; 0x4672 <__fixunssfsi+0x56>
    4664:	90 95       	com	r25
    4666:	80 95       	com	r24
    4668:	70 95       	com	r23
    466a:	61 95       	neg	r22
    466c:	7f 4f       	sbci	r23, 0xFF	; 255
    466e:	8f 4f       	sbci	r24, 0xFF	; 255
    4670:	9f 4f       	sbci	r25, 0xFF	; 255
    4672:	08 95       	ret

00004674 <__floatunsisf>:
    4674:	e8 94       	clt
    4676:	09 c0       	rjmp	.+18     	; 0x468a <__floatsisf+0x12>

00004678 <__floatsisf>:
    4678:	97 fb       	bst	r25, 7
    467a:	3e f4       	brtc	.+14     	; 0x468a <__floatsisf+0x12>
    467c:	90 95       	com	r25
    467e:	80 95       	com	r24
    4680:	70 95       	com	r23
    4682:	61 95       	neg	r22
    4684:	7f 4f       	sbci	r23, 0xFF	; 255
    4686:	8f 4f       	sbci	r24, 0xFF	; 255
    4688:	9f 4f       	sbci	r25, 0xFF	; 255
    468a:	99 23       	and	r25, r25
    468c:	a9 f0       	breq	.+42     	; 0x46b8 <__floatsisf+0x40>
    468e:	f9 2f       	mov	r31, r25
    4690:	96 e9       	ldi	r25, 0x96	; 150
    4692:	bb 27       	eor	r27, r27
    4694:	93 95       	inc	r25
    4696:	f6 95       	lsr	r31
    4698:	87 95       	ror	r24
    469a:	77 95       	ror	r23
    469c:	67 95       	ror	r22
    469e:	b7 95       	ror	r27
    46a0:	f1 11       	cpse	r31, r1
    46a2:	f8 cf       	rjmp	.-16     	; 0x4694 <__floatsisf+0x1c>
    46a4:	fa f4       	brpl	.+62     	; 0x46e4 <__floatsisf+0x6c>
    46a6:	bb 0f       	add	r27, r27
    46a8:	11 f4       	brne	.+4      	; 0x46ae <__floatsisf+0x36>
    46aa:	60 ff       	sbrs	r22, 0
    46ac:	1b c0       	rjmp	.+54     	; 0x46e4 <__floatsisf+0x6c>
    46ae:	6f 5f       	subi	r22, 0xFF	; 255
    46b0:	7f 4f       	sbci	r23, 0xFF	; 255
    46b2:	8f 4f       	sbci	r24, 0xFF	; 255
    46b4:	9f 4f       	sbci	r25, 0xFF	; 255
    46b6:	16 c0       	rjmp	.+44     	; 0x46e4 <__floatsisf+0x6c>
    46b8:	88 23       	and	r24, r24
    46ba:	11 f0       	breq	.+4      	; 0x46c0 <__floatsisf+0x48>
    46bc:	96 e9       	ldi	r25, 0x96	; 150
    46be:	11 c0       	rjmp	.+34     	; 0x46e2 <__floatsisf+0x6a>
    46c0:	77 23       	and	r23, r23
    46c2:	21 f0       	breq	.+8      	; 0x46cc <__floatsisf+0x54>
    46c4:	9e e8       	ldi	r25, 0x8E	; 142
    46c6:	87 2f       	mov	r24, r23
    46c8:	76 2f       	mov	r23, r22
    46ca:	05 c0       	rjmp	.+10     	; 0x46d6 <__floatsisf+0x5e>
    46cc:	66 23       	and	r22, r22
    46ce:	71 f0       	breq	.+28     	; 0x46ec <__floatsisf+0x74>
    46d0:	96 e8       	ldi	r25, 0x86	; 134
    46d2:	86 2f       	mov	r24, r22
    46d4:	70 e0       	ldi	r23, 0x00	; 0
    46d6:	60 e0       	ldi	r22, 0x00	; 0
    46d8:	2a f0       	brmi	.+10     	; 0x46e4 <__floatsisf+0x6c>
    46da:	9a 95       	dec	r25
    46dc:	66 0f       	add	r22, r22
    46de:	77 1f       	adc	r23, r23
    46e0:	88 1f       	adc	r24, r24
    46e2:	da f7       	brpl	.-10     	; 0x46da <__floatsisf+0x62>
    46e4:	88 0f       	add	r24, r24
    46e6:	96 95       	lsr	r25
    46e8:	87 95       	ror	r24
    46ea:	97 f9       	bld	r25, 7
    46ec:	08 95       	ret

000046ee <__fp_cmp>:
    46ee:	99 0f       	add	r25, r25
    46f0:	00 08       	sbc	r0, r0
    46f2:	55 0f       	add	r21, r21
    46f4:	aa 0b       	sbc	r26, r26
    46f6:	e0 e8       	ldi	r30, 0x80	; 128
    46f8:	fe ef       	ldi	r31, 0xFE	; 254
    46fa:	16 16       	cp	r1, r22
    46fc:	17 06       	cpc	r1, r23
    46fe:	e8 07       	cpc	r30, r24
    4700:	f9 07       	cpc	r31, r25
    4702:	c0 f0       	brcs	.+48     	; 0x4734 <__fp_cmp+0x46>
    4704:	12 16       	cp	r1, r18
    4706:	13 06       	cpc	r1, r19
    4708:	e4 07       	cpc	r30, r20
    470a:	f5 07       	cpc	r31, r21
    470c:	98 f0       	brcs	.+38     	; 0x4734 <__fp_cmp+0x46>
    470e:	62 1b       	sub	r22, r18
    4710:	73 0b       	sbc	r23, r19
    4712:	84 0b       	sbc	r24, r20
    4714:	95 0b       	sbc	r25, r21
    4716:	39 f4       	brne	.+14     	; 0x4726 <__fp_cmp+0x38>
    4718:	0a 26       	eor	r0, r26
    471a:	61 f0       	breq	.+24     	; 0x4734 <__fp_cmp+0x46>
    471c:	23 2b       	or	r18, r19
    471e:	24 2b       	or	r18, r20
    4720:	25 2b       	or	r18, r21
    4722:	21 f4       	brne	.+8      	; 0x472c <__fp_cmp+0x3e>
    4724:	08 95       	ret
    4726:	0a 26       	eor	r0, r26
    4728:	09 f4       	brne	.+2      	; 0x472c <__fp_cmp+0x3e>
    472a:	a1 40       	sbci	r26, 0x01	; 1
    472c:	a6 95       	lsr	r26
    472e:	8f ef       	ldi	r24, 0xFF	; 255
    4730:	81 1d       	adc	r24, r1
    4732:	81 1d       	adc	r24, r1
    4734:	08 95       	ret

00004736 <__fp_inf>:
    4736:	97 f9       	bld	r25, 7
    4738:	9f 67       	ori	r25, 0x7F	; 127
    473a:	80 e8       	ldi	r24, 0x80	; 128
    473c:	70 e0       	ldi	r23, 0x00	; 0
    473e:	60 e0       	ldi	r22, 0x00	; 0
    4740:	08 95       	ret

00004742 <__fp_nan>:
    4742:	9f ef       	ldi	r25, 0xFF	; 255
    4744:	80 ec       	ldi	r24, 0xC0	; 192
    4746:	08 95       	ret

00004748 <__fp_pscA>:
    4748:	00 24       	eor	r0, r0
    474a:	0a 94       	dec	r0
    474c:	16 16       	cp	r1, r22
    474e:	17 06       	cpc	r1, r23
    4750:	18 06       	cpc	r1, r24
    4752:	09 06       	cpc	r0, r25
    4754:	08 95       	ret

00004756 <__fp_pscB>:
    4756:	00 24       	eor	r0, r0
    4758:	0a 94       	dec	r0
    475a:	12 16       	cp	r1, r18
    475c:	13 06       	cpc	r1, r19
    475e:	14 06       	cpc	r1, r20
    4760:	05 06       	cpc	r0, r21
    4762:	08 95       	ret

00004764 <__fp_round>:
    4764:	09 2e       	mov	r0, r25
    4766:	03 94       	inc	r0
    4768:	00 0c       	add	r0, r0
    476a:	11 f4       	brne	.+4      	; 0x4770 <__fp_round+0xc>
    476c:	88 23       	and	r24, r24
    476e:	52 f0       	brmi	.+20     	; 0x4784 <__fp_round+0x20>
    4770:	bb 0f       	add	r27, r27
    4772:	40 f4       	brcc	.+16     	; 0x4784 <__fp_round+0x20>
    4774:	bf 2b       	or	r27, r31
    4776:	11 f4       	brne	.+4      	; 0x477c <__fp_round+0x18>
    4778:	60 ff       	sbrs	r22, 0
    477a:	04 c0       	rjmp	.+8      	; 0x4784 <__fp_round+0x20>
    477c:	6f 5f       	subi	r22, 0xFF	; 255
    477e:	7f 4f       	sbci	r23, 0xFF	; 255
    4780:	8f 4f       	sbci	r24, 0xFF	; 255
    4782:	9f 4f       	sbci	r25, 0xFF	; 255
    4784:	08 95       	ret

00004786 <__fp_split3>:
    4786:	57 fd       	sbrc	r21, 7
    4788:	90 58       	subi	r25, 0x80	; 128
    478a:	44 0f       	add	r20, r20
    478c:	55 1f       	adc	r21, r21
    478e:	59 f0       	breq	.+22     	; 0x47a6 <__fp_splitA+0x10>
    4790:	5f 3f       	cpi	r21, 0xFF	; 255
    4792:	71 f0       	breq	.+28     	; 0x47b0 <__fp_splitA+0x1a>
    4794:	47 95       	ror	r20

00004796 <__fp_splitA>:
    4796:	88 0f       	add	r24, r24
    4798:	97 fb       	bst	r25, 7
    479a:	99 1f       	adc	r25, r25
    479c:	61 f0       	breq	.+24     	; 0x47b6 <__fp_splitA+0x20>
    479e:	9f 3f       	cpi	r25, 0xFF	; 255
    47a0:	79 f0       	breq	.+30     	; 0x47c0 <__fp_splitA+0x2a>
    47a2:	87 95       	ror	r24
    47a4:	08 95       	ret
    47a6:	12 16       	cp	r1, r18
    47a8:	13 06       	cpc	r1, r19
    47aa:	14 06       	cpc	r1, r20
    47ac:	55 1f       	adc	r21, r21
    47ae:	f2 cf       	rjmp	.-28     	; 0x4794 <__fp_split3+0xe>
    47b0:	46 95       	lsr	r20
    47b2:	f1 df       	rcall	.-30     	; 0x4796 <__fp_splitA>
    47b4:	08 c0       	rjmp	.+16     	; 0x47c6 <__fp_splitA+0x30>
    47b6:	16 16       	cp	r1, r22
    47b8:	17 06       	cpc	r1, r23
    47ba:	18 06       	cpc	r1, r24
    47bc:	99 1f       	adc	r25, r25
    47be:	f1 cf       	rjmp	.-30     	; 0x47a2 <__fp_splitA+0xc>
    47c0:	86 95       	lsr	r24
    47c2:	71 05       	cpc	r23, r1
    47c4:	61 05       	cpc	r22, r1
    47c6:	08 94       	sec
    47c8:	08 95       	ret

000047ca <__fp_zero>:
    47ca:	e8 94       	clt

000047cc <__fp_szero>:
    47cc:	bb 27       	eor	r27, r27
    47ce:	66 27       	eor	r22, r22
    47d0:	77 27       	eor	r23, r23
    47d2:	cb 01       	movw	r24, r22
    47d4:	97 f9       	bld	r25, 7
    47d6:	08 95       	ret

000047d8 <__gesf2>:
    47d8:	8a df       	rcall	.-236    	; 0x46ee <__fp_cmp>
    47da:	08 f4       	brcc	.+2      	; 0x47de <__gesf2+0x6>
    47dc:	8f ef       	ldi	r24, 0xFF	; 255
    47de:	08 95       	ret

000047e0 <__mulsf3>:
    47e0:	0b d0       	rcall	.+22     	; 0x47f8 <__mulsf3x>
    47e2:	c0 cf       	rjmp	.-128    	; 0x4764 <__fp_round>
    47e4:	b1 df       	rcall	.-158    	; 0x4748 <__fp_pscA>
    47e6:	28 f0       	brcs	.+10     	; 0x47f2 <__mulsf3+0x12>
    47e8:	b6 df       	rcall	.-148    	; 0x4756 <__fp_pscB>
    47ea:	18 f0       	brcs	.+6      	; 0x47f2 <__mulsf3+0x12>
    47ec:	95 23       	and	r25, r21
    47ee:	09 f0       	breq	.+2      	; 0x47f2 <__mulsf3+0x12>
    47f0:	a2 cf       	rjmp	.-188    	; 0x4736 <__fp_inf>
    47f2:	a7 cf       	rjmp	.-178    	; 0x4742 <__fp_nan>
    47f4:	11 24       	eor	r1, r1
    47f6:	ea cf       	rjmp	.-44     	; 0x47cc <__fp_szero>

000047f8 <__mulsf3x>:
    47f8:	c6 df       	rcall	.-116    	; 0x4786 <__fp_split3>
    47fa:	a0 f3       	brcs	.-24     	; 0x47e4 <__mulsf3+0x4>

000047fc <__mulsf3_pse>:
    47fc:	95 9f       	mul	r25, r21
    47fe:	d1 f3       	breq	.-12     	; 0x47f4 <__mulsf3+0x14>
    4800:	95 0f       	add	r25, r21
    4802:	50 e0       	ldi	r21, 0x00	; 0
    4804:	55 1f       	adc	r21, r21
    4806:	62 9f       	mul	r22, r18
    4808:	f0 01       	movw	r30, r0
    480a:	72 9f       	mul	r23, r18
    480c:	bb 27       	eor	r27, r27
    480e:	f0 0d       	add	r31, r0
    4810:	b1 1d       	adc	r27, r1
    4812:	63 9f       	mul	r22, r19
    4814:	aa 27       	eor	r26, r26
    4816:	f0 0d       	add	r31, r0
    4818:	b1 1d       	adc	r27, r1
    481a:	aa 1f       	adc	r26, r26
    481c:	64 9f       	mul	r22, r20
    481e:	66 27       	eor	r22, r22
    4820:	b0 0d       	add	r27, r0
    4822:	a1 1d       	adc	r26, r1
    4824:	66 1f       	adc	r22, r22
    4826:	82 9f       	mul	r24, r18
    4828:	22 27       	eor	r18, r18
    482a:	b0 0d       	add	r27, r0
    482c:	a1 1d       	adc	r26, r1
    482e:	62 1f       	adc	r22, r18
    4830:	73 9f       	mul	r23, r19
    4832:	b0 0d       	add	r27, r0
    4834:	a1 1d       	adc	r26, r1
    4836:	62 1f       	adc	r22, r18
    4838:	83 9f       	mul	r24, r19
    483a:	a0 0d       	add	r26, r0
    483c:	61 1d       	adc	r22, r1
    483e:	22 1f       	adc	r18, r18
    4840:	74 9f       	mul	r23, r20
    4842:	33 27       	eor	r19, r19
    4844:	a0 0d       	add	r26, r0
    4846:	61 1d       	adc	r22, r1
    4848:	23 1f       	adc	r18, r19
    484a:	84 9f       	mul	r24, r20
    484c:	60 0d       	add	r22, r0
    484e:	21 1d       	adc	r18, r1
    4850:	82 2f       	mov	r24, r18
    4852:	76 2f       	mov	r23, r22
    4854:	6a 2f       	mov	r22, r26
    4856:	11 24       	eor	r1, r1
    4858:	9f 57       	subi	r25, 0x7F	; 127
    485a:	50 40       	sbci	r21, 0x00	; 0
    485c:	8a f0       	brmi	.+34     	; 0x4880 <__mulsf3_pse+0x84>
    485e:	e1 f0       	breq	.+56     	; 0x4898 <__mulsf3_pse+0x9c>
    4860:	88 23       	and	r24, r24
    4862:	4a f0       	brmi	.+18     	; 0x4876 <__mulsf3_pse+0x7a>
    4864:	ee 0f       	add	r30, r30
    4866:	ff 1f       	adc	r31, r31
    4868:	bb 1f       	adc	r27, r27
    486a:	66 1f       	adc	r22, r22
    486c:	77 1f       	adc	r23, r23
    486e:	88 1f       	adc	r24, r24
    4870:	91 50       	subi	r25, 0x01	; 1
    4872:	50 40       	sbci	r21, 0x00	; 0
    4874:	a9 f7       	brne	.-22     	; 0x4860 <__mulsf3_pse+0x64>
    4876:	9e 3f       	cpi	r25, 0xFE	; 254
    4878:	51 05       	cpc	r21, r1
    487a:	70 f0       	brcs	.+28     	; 0x4898 <__mulsf3_pse+0x9c>
    487c:	5c cf       	rjmp	.-328    	; 0x4736 <__fp_inf>
    487e:	a6 cf       	rjmp	.-180    	; 0x47cc <__fp_szero>
    4880:	5f 3f       	cpi	r21, 0xFF	; 255
    4882:	ec f3       	brlt	.-6      	; 0x487e <__mulsf3_pse+0x82>
    4884:	98 3e       	cpi	r25, 0xE8	; 232
    4886:	dc f3       	brlt	.-10     	; 0x487e <__mulsf3_pse+0x82>
    4888:	86 95       	lsr	r24
    488a:	77 95       	ror	r23
    488c:	67 95       	ror	r22
    488e:	b7 95       	ror	r27
    4890:	f7 95       	ror	r31
    4892:	e7 95       	ror	r30
    4894:	9f 5f       	subi	r25, 0xFF	; 255
    4896:	c1 f7       	brne	.-16     	; 0x4888 <__mulsf3_pse+0x8c>
    4898:	fe 2b       	or	r31, r30
    489a:	88 0f       	add	r24, r24
    489c:	91 1d       	adc	r25, r1
    489e:	96 95       	lsr	r25
    48a0:	87 95       	ror	r24
    48a2:	97 f9       	bld	r25, 7
    48a4:	08 95       	ret

000048a6 <__mulsi3>:
    48a6:	db 01       	movw	r26, r22
    48a8:	8f 93       	push	r24
    48aa:	9f 93       	push	r25
    48ac:	44 d0       	rcall	.+136    	; 0x4936 <__muluhisi3>
    48ae:	bf 91       	pop	r27
    48b0:	af 91       	pop	r26
    48b2:	a2 9f       	mul	r26, r18
    48b4:	80 0d       	add	r24, r0
    48b6:	91 1d       	adc	r25, r1
    48b8:	a3 9f       	mul	r26, r19
    48ba:	90 0d       	add	r25, r0
    48bc:	b2 9f       	mul	r27, r18
    48be:	90 0d       	add	r25, r0
    48c0:	11 24       	eor	r1, r1
    48c2:	08 95       	ret

000048c4 <__udivmodsi4>:
    48c4:	a1 e2       	ldi	r26, 0x21	; 33
    48c6:	1a 2e       	mov	r1, r26
    48c8:	aa 1b       	sub	r26, r26
    48ca:	bb 1b       	sub	r27, r27
    48cc:	fd 01       	movw	r30, r26
    48ce:	0d c0       	rjmp	.+26     	; 0x48ea <__udivmodsi4_ep>

000048d0 <__udivmodsi4_loop>:
    48d0:	aa 1f       	adc	r26, r26
    48d2:	bb 1f       	adc	r27, r27
    48d4:	ee 1f       	adc	r30, r30
    48d6:	ff 1f       	adc	r31, r31
    48d8:	a2 17       	cp	r26, r18
    48da:	b3 07       	cpc	r27, r19
    48dc:	e4 07       	cpc	r30, r20
    48de:	f5 07       	cpc	r31, r21
    48e0:	20 f0       	brcs	.+8      	; 0x48ea <__udivmodsi4_ep>
    48e2:	a2 1b       	sub	r26, r18
    48e4:	b3 0b       	sbc	r27, r19
    48e6:	e4 0b       	sbc	r30, r20
    48e8:	f5 0b       	sbc	r31, r21

000048ea <__udivmodsi4_ep>:
    48ea:	66 1f       	adc	r22, r22
    48ec:	77 1f       	adc	r23, r23
    48ee:	88 1f       	adc	r24, r24
    48f0:	99 1f       	adc	r25, r25
    48f2:	1a 94       	dec	r1
    48f4:	69 f7       	brne	.-38     	; 0x48d0 <__udivmodsi4_loop>
    48f6:	60 95       	com	r22
    48f8:	70 95       	com	r23
    48fa:	80 95       	com	r24
    48fc:	90 95       	com	r25
    48fe:	9b 01       	movw	r18, r22
    4900:	ac 01       	movw	r20, r24
    4902:	bd 01       	movw	r22, r26
    4904:	cf 01       	movw	r24, r30
    4906:	08 95       	ret

00004908 <__tablejump2__>:
    4908:	ee 0f       	add	r30, r30
    490a:	ff 1f       	adc	r31, r31
    490c:	88 1f       	adc	r24, r24
    490e:	8b bf       	out	0x3b, r24	; 59
    4910:	07 90       	elpm	r0, Z+
    4912:	f6 91       	elpm	r31, Z
    4914:	e0 2d       	mov	r30, r0
    4916:	19 94       	eijmp

00004918 <__umulhisi3>:
    4918:	a2 9f       	mul	r26, r18
    491a:	b0 01       	movw	r22, r0
    491c:	b3 9f       	mul	r27, r19
    491e:	c0 01       	movw	r24, r0
    4920:	a3 9f       	mul	r26, r19
    4922:	70 0d       	add	r23, r0
    4924:	81 1d       	adc	r24, r1
    4926:	11 24       	eor	r1, r1
    4928:	91 1d       	adc	r25, r1
    492a:	b2 9f       	mul	r27, r18
    492c:	70 0d       	add	r23, r0
    492e:	81 1d       	adc	r24, r1
    4930:	11 24       	eor	r1, r1
    4932:	91 1d       	adc	r25, r1
    4934:	08 95       	ret

00004936 <__muluhisi3>:
    4936:	f0 df       	rcall	.-32     	; 0x4918 <__umulhisi3>
    4938:	a5 9f       	mul	r26, r21
    493a:	90 0d       	add	r25, r0
    493c:	b4 9f       	mul	r27, r20
    493e:	90 0d       	add	r25, r0
    4940:	a4 9f       	mul	r26, r20
    4942:	80 0d       	add	r24, r0
    4944:	91 1d       	adc	r25, r1
    4946:	11 24       	eor	r1, r1
    4948:	08 95       	ret

0000494a <__muldi3>:
    494a:	df 93       	push	r29
    494c:	cf 93       	push	r28
    494e:	1f 93       	push	r17
    4950:	0f 93       	push	r16
    4952:	9a 9d       	mul	r25, r10
    4954:	f0 2d       	mov	r31, r0
    4956:	21 9f       	mul	r18, r17
    4958:	f0 0d       	add	r31, r0
    495a:	8b 9d       	mul	r24, r11
    495c:	f0 0d       	add	r31, r0
    495e:	8a 9d       	mul	r24, r10
    4960:	e0 2d       	mov	r30, r0
    4962:	f1 0d       	add	r31, r1
    4964:	03 9f       	mul	r16, r19
    4966:	f0 0d       	add	r31, r0
    4968:	02 9f       	mul	r16, r18
    496a:	e0 0d       	add	r30, r0
    496c:	f1 1d       	adc	r31, r1
    496e:	4e 9d       	mul	r20, r14
    4970:	e0 0d       	add	r30, r0
    4972:	f1 1d       	adc	r31, r1
    4974:	5e 9d       	mul	r21, r14
    4976:	f0 0d       	add	r31, r0
    4978:	4f 9d       	mul	r20, r15
    497a:	f0 0d       	add	r31, r0
    497c:	7f 93       	push	r23
    497e:	6f 93       	push	r22
    4980:	bf 92       	push	r11
    4982:	af 92       	push	r10
    4984:	5f 93       	push	r21
    4986:	4f 93       	push	r20
    4988:	d5 01       	movw	r26, r10
    498a:	c6 df       	rcall	.-116    	; 0x4918 <__umulhisi3>
    498c:	8b 01       	movw	r16, r22
    498e:	ac 01       	movw	r20, r24
    4990:	d7 01       	movw	r26, r14
    4992:	c2 df       	rcall	.-124    	; 0x4918 <__umulhisi3>
    4994:	eb 01       	movw	r28, r22
    4996:	e8 0f       	add	r30, r24
    4998:	f9 1f       	adc	r31, r25
    499a:	d6 01       	movw	r26, r12
    499c:	1f d0       	rcall	.+62     	; 0x49dc <__muldi3_6>
    499e:	2f 91       	pop	r18
    49a0:	3f 91       	pop	r19
    49a2:	d6 01       	movw	r26, r12
    49a4:	b9 df       	rcall	.-142    	; 0x4918 <__umulhisi3>
    49a6:	c6 0f       	add	r28, r22
    49a8:	d7 1f       	adc	r29, r23
    49aa:	e8 1f       	adc	r30, r24
    49ac:	f9 1f       	adc	r31, r25
    49ae:	af 91       	pop	r26
    49b0:	bf 91       	pop	r27
    49b2:	14 d0       	rcall	.+40     	; 0x49dc <__muldi3_6>
    49b4:	2f 91       	pop	r18
    49b6:	3f 91       	pop	r19
    49b8:	af df       	rcall	.-162    	; 0x4918 <__umulhisi3>
    49ba:	c6 0f       	add	r28, r22
    49bc:	d7 1f       	adc	r29, r23
    49be:	e8 1f       	adc	r30, r24
    49c0:	f9 1f       	adc	r31, r25
    49c2:	d6 01       	movw	r26, r12
    49c4:	a9 df       	rcall	.-174    	; 0x4918 <__umulhisi3>
    49c6:	e6 0f       	add	r30, r22
    49c8:	f7 1f       	adc	r31, r23
    49ca:	98 01       	movw	r18, r16
    49cc:	be 01       	movw	r22, r28
    49ce:	cf 01       	movw	r24, r30
    49d0:	11 24       	eor	r1, r1
    49d2:	0f 91       	pop	r16
    49d4:	1f 91       	pop	r17
    49d6:	cf 91       	pop	r28
    49d8:	df 91       	pop	r29
    49da:	08 95       	ret

000049dc <__muldi3_6>:
    49dc:	9d df       	rcall	.-198    	; 0x4918 <__umulhisi3>
    49de:	46 0f       	add	r20, r22
    49e0:	57 1f       	adc	r21, r23
    49e2:	c8 1f       	adc	r28, r24
    49e4:	d9 1f       	adc	r29, r25
    49e6:	08 f4       	brcc	.+2      	; 0x49ea <__muldi3_6+0xe>
    49e8:	31 96       	adiw	r30, 0x01	; 1
    49ea:	08 95       	ret

000049ec <__ashldi3>:
    49ec:	0f 93       	push	r16
    49ee:	08 30       	cpi	r16, 0x08	; 8
    49f0:	90 f0       	brcs	.+36     	; 0x4a16 <__ashldi3+0x2a>
    49f2:	98 2f       	mov	r25, r24
    49f4:	87 2f       	mov	r24, r23
    49f6:	76 2f       	mov	r23, r22
    49f8:	65 2f       	mov	r22, r21
    49fa:	54 2f       	mov	r21, r20
    49fc:	43 2f       	mov	r20, r19
    49fe:	32 2f       	mov	r19, r18
    4a00:	22 27       	eor	r18, r18
    4a02:	08 50       	subi	r16, 0x08	; 8
    4a04:	f4 cf       	rjmp	.-24     	; 0x49ee <__ashldi3+0x2>
    4a06:	22 0f       	add	r18, r18
    4a08:	33 1f       	adc	r19, r19
    4a0a:	44 1f       	adc	r20, r20
    4a0c:	55 1f       	adc	r21, r21
    4a0e:	66 1f       	adc	r22, r22
    4a10:	77 1f       	adc	r23, r23
    4a12:	88 1f       	adc	r24, r24
    4a14:	99 1f       	adc	r25, r25
    4a16:	0a 95       	dec	r16
    4a18:	b2 f7       	brpl	.-20     	; 0x4a06 <__ashldi3+0x1a>
    4a1a:	0f 91       	pop	r16
    4a1c:	08 95       	ret

00004a1e <__ashrdi3>:
    4a1e:	97 fb       	bst	r25, 7
    4a20:	10 f8       	bld	r1, 0

00004a22 <__lshrdi3>:
    4a22:	16 94       	lsr	r1
    4a24:	00 08       	sbc	r0, r0
    4a26:	0f 93       	push	r16
    4a28:	08 30       	cpi	r16, 0x08	; 8
    4a2a:	98 f0       	brcs	.+38     	; 0x4a52 <__lshrdi3+0x30>
    4a2c:	08 50       	subi	r16, 0x08	; 8
    4a2e:	23 2f       	mov	r18, r19
    4a30:	34 2f       	mov	r19, r20
    4a32:	45 2f       	mov	r20, r21
    4a34:	56 2f       	mov	r21, r22
    4a36:	67 2f       	mov	r22, r23
    4a38:	78 2f       	mov	r23, r24
    4a3a:	89 2f       	mov	r24, r25
    4a3c:	90 2d       	mov	r25, r0
    4a3e:	f4 cf       	rjmp	.-24     	; 0x4a28 <__lshrdi3+0x6>
    4a40:	05 94       	asr	r0
    4a42:	97 95       	ror	r25
    4a44:	87 95       	ror	r24
    4a46:	77 95       	ror	r23
    4a48:	67 95       	ror	r22
    4a4a:	57 95       	ror	r21
    4a4c:	47 95       	ror	r20
    4a4e:	37 95       	ror	r19
    4a50:	27 95       	ror	r18
    4a52:	0a 95       	dec	r16
    4a54:	aa f7       	brpl	.-22     	; 0x4a40 <__lshrdi3+0x1e>
    4a56:	0f 91       	pop	r16
    4a58:	08 95       	ret

00004a5a <__adddi3>:
    4a5a:	2a 0d       	add	r18, r10
    4a5c:	3b 1d       	adc	r19, r11
    4a5e:	4c 1d       	adc	r20, r12
    4a60:	5d 1d       	adc	r21, r13
    4a62:	6e 1d       	adc	r22, r14
    4a64:	7f 1d       	adc	r23, r15
    4a66:	80 1f       	adc	r24, r16
    4a68:	91 1f       	adc	r25, r17
    4a6a:	08 95       	ret

00004a6c <__adddi3_s8>:
    4a6c:	00 24       	eor	r0, r0
    4a6e:	a7 fd       	sbrc	r26, 7
    4a70:	00 94       	com	r0
    4a72:	2a 0f       	add	r18, r26
    4a74:	30 1d       	adc	r19, r0
    4a76:	40 1d       	adc	r20, r0
    4a78:	50 1d       	adc	r21, r0
    4a7a:	60 1d       	adc	r22, r0
    4a7c:	70 1d       	adc	r23, r0
    4a7e:	80 1d       	adc	r24, r0
    4a80:	90 1d       	adc	r25, r0
    4a82:	08 95       	ret

00004a84 <__subdi3>:
    4a84:	2a 19       	sub	r18, r10
    4a86:	3b 09       	sbc	r19, r11
    4a88:	4c 09       	sbc	r20, r12
    4a8a:	5d 09       	sbc	r21, r13
    4a8c:	6e 09       	sbc	r22, r14
    4a8e:	7f 09       	sbc	r23, r15
    4a90:	80 0b       	sbc	r24, r16
    4a92:	91 0b       	sbc	r25, r17
    4a94:	08 95       	ret

00004a96 <__cmpdi2_s8>:
    4a96:	00 24       	eor	r0, r0
    4a98:	a7 fd       	sbrc	r26, 7
    4a9a:	00 94       	com	r0
    4a9c:	2a 17       	cp	r18, r26
    4a9e:	30 05       	cpc	r19, r0
    4aa0:	40 05       	cpc	r20, r0
    4aa2:	50 05       	cpc	r21, r0
    4aa4:	60 05       	cpc	r22, r0
    4aa6:	70 05       	cpc	r23, r0
    4aa8:	80 05       	cpc	r24, r0
    4aaa:	90 05       	cpc	r25, r0
    4aac:	08 95       	ret

00004aae <memcpy_P>:
    4aae:	fb 01       	movw	r30, r22
    4ab0:	dc 01       	movw	r26, r24
    4ab2:	02 c0       	rjmp	.+4      	; 0x4ab8 <memcpy_P+0xa>
    4ab4:	05 90       	lpm	r0, Z+
    4ab6:	0d 92       	st	X+, r0
    4ab8:	41 50       	subi	r20, 0x01	; 1
    4aba:	50 40       	sbci	r21, 0x00	; 0
    4abc:	d8 f7       	brcc	.-10     	; 0x4ab4 <memcpy_P+0x6>
    4abe:	08 95       	ret

00004ac0 <memcmp>:
    4ac0:	fb 01       	movw	r30, r22
    4ac2:	dc 01       	movw	r26, r24
    4ac4:	04 c0       	rjmp	.+8      	; 0x4ace <memcmp+0xe>
    4ac6:	8d 91       	ld	r24, X+
    4ac8:	01 90       	ld	r0, Z+
    4aca:	80 19       	sub	r24, r0
    4acc:	21 f4       	brne	.+8      	; 0x4ad6 <memcmp+0x16>
    4ace:	41 50       	subi	r20, 0x01	; 1
    4ad0:	50 40       	sbci	r21, 0x00	; 0
    4ad2:	c8 f7       	brcc	.-14     	; 0x4ac6 <memcmp+0x6>
    4ad4:	88 1b       	sub	r24, r24
    4ad6:	99 0b       	sbc	r25, r25
    4ad8:	08 95       	ret

00004ada <strncpy>:
    4ada:	fb 01       	movw	r30, r22
    4adc:	dc 01       	movw	r26, r24
    4ade:	41 50       	subi	r20, 0x01	; 1
    4ae0:	50 40       	sbci	r21, 0x00	; 0
    4ae2:	48 f0       	brcs	.+18     	; 0x4af6 <strncpy+0x1c>
    4ae4:	01 90       	ld	r0, Z+
    4ae6:	0d 92       	st	X+, r0
    4ae8:	00 20       	and	r0, r0
    4aea:	c9 f7       	brne	.-14     	; 0x4ade <strncpy+0x4>
    4aec:	01 c0       	rjmp	.+2      	; 0x4af0 <strncpy+0x16>
    4aee:	1d 92       	st	X+, r1
    4af0:	41 50       	subi	r20, 0x01	; 1
    4af2:	50 40       	sbci	r21, 0x00	; 0
    4af4:	e0 f7       	brcc	.-8      	; 0x4aee <strncpy+0x14>
    4af6:	08 95       	ret

00004af8 <_exit>:
    4af8:	f8 94       	cli

00004afa <__stop_program>:
    4afa:	ff cf       	rjmp	.-2      	; 0x4afa <__stop_program>
