
RovController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b0  00800200  000021e4  00002278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000021e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000359  008002b0  008002b0  00002328  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002328  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002358  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000768  00000000  00000000  00002398  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00011e72  00000000  00000000  00002b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004300  00000000  00000000  00014972  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004be7  00000000  00000000  00018c72  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000017bc  00000000  00000000  0001d85c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003311  00000000  00000000  0001f018  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008131  00000000  00000000  00022329  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000840  00000000  00000000  0002a45a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	81 c0       	rjmp	.+258    	; 0x104 <__ctors_end>
       2:	00 00       	nop
       4:	b0 c0       	rjmp	.+352    	; 0x166 <__bad_interrupt>
       6:	00 00       	nop
       8:	ae c0       	rjmp	.+348    	; 0x166 <__bad_interrupt>
       a:	00 00       	nop
       c:	ac c0       	rjmp	.+344    	; 0x166 <__bad_interrupt>
       e:	00 00       	nop
      10:	aa c0       	rjmp	.+340    	; 0x166 <__bad_interrupt>
      12:	00 00       	nop
      14:	a8 c0       	rjmp	.+336    	; 0x166 <__bad_interrupt>
      16:	00 00       	nop
      18:	a6 c0       	rjmp	.+332    	; 0x166 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a4 c0       	rjmp	.+328    	; 0x166 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a2 c0       	rjmp	.+324    	; 0x166 <__bad_interrupt>
      22:	00 00       	nop
      24:	a0 c0       	rjmp	.+320    	; 0x166 <__bad_interrupt>
      26:	00 00       	nop
      28:	9e c0       	rjmp	.+316    	; 0x166 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	9c c0       	rjmp	.+312    	; 0x166 <__bad_interrupt>
      2e:	00 00       	nop
      30:	9a c0       	rjmp	.+308    	; 0x166 <__bad_interrupt>
      32:	00 00       	nop
      34:	98 c0       	rjmp	.+304    	; 0x166 <__bad_interrupt>
      36:	00 00       	nop
      38:	96 c0       	rjmp	.+300    	; 0x166 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	94 c0       	rjmp	.+296    	; 0x166 <__bad_interrupt>
      3e:	00 00       	nop
      40:	92 c0       	rjmp	.+292    	; 0x166 <__bad_interrupt>
      42:	00 00       	nop
      44:	90 c0       	rjmp	.+288    	; 0x166 <__bad_interrupt>
      46:	00 00       	nop
      48:	8e c0       	rjmp	.+284    	; 0x166 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8c c0       	rjmp	.+280    	; 0x166 <__bad_interrupt>
      4e:	00 00       	nop
      50:	8a c0       	rjmp	.+276    	; 0x166 <__bad_interrupt>
      52:	00 00       	nop
      54:	88 c0       	rjmp	.+272    	; 0x166 <__bad_interrupt>
      56:	00 00       	nop
      58:	86 c0       	rjmp	.+268    	; 0x166 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	84 c0       	rjmp	.+264    	; 0x166 <__bad_interrupt>
      5e:	00 00       	nop
      60:	82 c0       	rjmp	.+260    	; 0x166 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 16 0e 	jmp	0x1c2c	; 0x1c2c <__vector_25>
      68:	0c 94 52 0e 	jmp	0x1ca4	; 0x1ca4 <__vector_26>
      6c:	7c c0       	rjmp	.+248    	; 0x166 <__bad_interrupt>
      6e:	00 00       	nop
      70:	7a c0       	rjmp	.+244    	; 0x166 <__bad_interrupt>
      72:	00 00       	nop
      74:	78 c0       	rjmp	.+240    	; 0x166 <__bad_interrupt>
      76:	00 00       	nop
      78:	76 c0       	rjmp	.+236    	; 0x166 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	74 c0       	rjmp	.+232    	; 0x166 <__bad_interrupt>
      7e:	00 00       	nop
      80:	72 c0       	rjmp	.+228    	; 0x166 <__bad_interrupt>
      82:	00 00       	nop
      84:	70 c0       	rjmp	.+224    	; 0x166 <__bad_interrupt>
      86:	00 00       	nop
      88:	6e c0       	rjmp	.+220    	; 0x166 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	6c c0       	rjmp	.+216    	; 0x166 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 9e 0e 	jmp	0x1d3c	; 0x1d3c <__vector_36>
      94:	0c 94 da 0e 	jmp	0x1db4	; 0x1db4 <__vector_37>
      98:	66 c0       	rjmp	.+204    	; 0x166 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	64 c0       	rjmp	.+200    	; 0x166 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	62 c0       	rjmp	.+196    	; 0x166 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	60 c0       	rjmp	.+192    	; 0x166 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	5e c0       	rjmp	.+188    	; 0x166 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	5c c0       	rjmp	.+184    	; 0x166 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	5a c0       	rjmp	.+180    	; 0x166 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	58 c0       	rjmp	.+176    	; 0x166 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	56 c0       	rjmp	.+172    	; 0x166 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	54 c0       	rjmp	.+168    	; 0x166 <__bad_interrupt>
      be:	00 00       	nop
      c0:	52 c0       	rjmp	.+164    	; 0x166 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	50 c0       	rjmp	.+160    	; 0x166 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	4e c0       	rjmp	.+156    	; 0x166 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 26 0f 	jmp	0x1e4c	; 0x1e4c <__vector_51>
      d0:	0c 94 62 0f 	jmp	0x1ec4	; 0x1ec4 <__vector_52>
      d4:	48 c0       	rjmp	.+144    	; 0x166 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 ae 0f 	jmp	0x1f5c	; 0x1f5c <__vector_54>
      dc:	0c 94 ea 0f 	jmp	0x1fd4	; 0x1fd4 <__vector_55>
      e0:	42 c0       	rjmp	.+132    	; 0x166 <__bad_interrupt>
	...

000000e4 <__trampolines_end>:
      e4:	63 82       	std	Z+3, r6	; 0x03
      e6:	53 63       	ori	r21, 0x33	; 51

000000e8 <_ZL5iphdr>:
      e8:	45 00 00 82 00 00 40 00 20                          E.....@. 

000000f1 <_ZL9arpreqhdr>:
      f1:	00 01 08 00 06 04 00 01 00                          .........

000000fa <__ctors_start>:
      fa:	e3 00       	.word	0x00e3	; ????
      fc:	7b 0e       	add	r7, r27
      fe:	03 0f       	add	r16, r19
     100:	8b 0f       	add	r24, r27
     102:	13 10       	cpse	r1, r3

00000104 <__ctors_end>:
     104:	11 24       	eor	r1, r1
     106:	1f be       	out	0x3f, r1	; 63
     108:	cf ef       	ldi	r28, 0xFF	; 255
     10a:	d1 e2       	ldi	r29, 0x21	; 33
     10c:	de bf       	out	0x3e, r29	; 62
     10e:	cd bf       	out	0x3d, r28	; 61
     110:	00 e0       	ldi	r16, 0x00	; 0
     112:	0c bf       	out	0x3c, r16	; 60

00000114 <__do_copy_data>:
     114:	12 e0       	ldi	r17, 0x02	; 2
     116:	a0 e0       	ldi	r26, 0x00	; 0
     118:	b2 e0       	ldi	r27, 0x02	; 2
     11a:	e4 ee       	ldi	r30, 0xE4	; 228
     11c:	f1 e2       	ldi	r31, 0x21	; 33
     11e:	00 e0       	ldi	r16, 0x00	; 0
     120:	0b bf       	out	0x3b, r16	; 59
     122:	02 c0       	rjmp	.+4      	; 0x128 <__do_copy_data+0x14>
     124:	07 90       	elpm	r0, Z+
     126:	0d 92       	st	X+, r0
     128:	a0 3b       	cpi	r26, 0xB0	; 176
     12a:	b1 07       	cpc	r27, r17
     12c:	d9 f7       	brne	.-10     	; 0x124 <__do_copy_data+0x10>

0000012e <__do_clear_bss>:
     12e:	26 e0       	ldi	r18, 0x06	; 6
     130:	a0 eb       	ldi	r26, 0xB0	; 176
     132:	b2 e0       	ldi	r27, 0x02	; 2
     134:	01 c0       	rjmp	.+2      	; 0x138 <.do_clear_bss_start>

00000136 <.do_clear_bss_loop>:
     136:	1d 92       	st	X+, r1

00000138 <.do_clear_bss_start>:
     138:	a9 30       	cpi	r26, 0x09	; 9
     13a:	b2 07       	cpc	r27, r18
     13c:	e1 f7       	brne	.-8      	; 0x136 <.do_clear_bss_loop>

0000013e <__do_global_ctors>:
     13e:	10 e0       	ldi	r17, 0x00	; 0
     140:	c2 e8       	ldi	r28, 0x82	; 130
     142:	d0 e0       	ldi	r29, 0x00	; 0
     144:	00 e0       	ldi	r16, 0x00	; 0
     146:	06 c0       	rjmp	.+12     	; 0x154 <__do_global_ctors+0x16>
     148:	21 97       	sbiw	r28, 0x01	; 1
     14a:	01 09       	sbc	r16, r1
     14c:	80 2f       	mov	r24, r16
     14e:	fe 01       	movw	r30, r28
     150:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <__tablejump2__>
     154:	cd 37       	cpi	r28, 0x7D	; 125
     156:	d1 07       	cpc	r29, r17
     158:	80 e0       	ldi	r24, 0x00	; 0
     15a:	08 07       	cpc	r16, r24
     15c:	a9 f7       	brne	.-22     	; 0x148 <__do_global_ctors+0xa>
     15e:	0e 94 aa 0c 	call	0x1954	; 0x1954 <main>
     162:	0c 94 f0 10 	jmp	0x21e0	; 0x21e0 <_exit>

00000166 <__bad_interrupt>:
     166:	4c cf       	rjmp	.-360    	; 0x0 <__vectors>

00000168 <_Z14RunPingCommandPKhh>:

#define CMD_PING 0
#define CMD_ECHO 1

void RunPingCommand(const uint8_t* data, uint8_t len){
  if(len == 1){
     168:	61 30       	cpi	r22, 0x01	; 1
     16a:	51 f4       	brne	.+20     	; 0x180 <_Z14RunPingCommandPKhh+0x18>
     16c:	fc 01       	movw	r30, r24
    SendDataBuffer[0] = data[0];
     16e:	80 81       	ld	r24, Z
     170:	e0 91 b0 02 	lds	r30, 0x02B0	; 0x8002b0 <__data_end>
     174:	f0 91 b1 02 	lds	r31, 0x02B1	; 0x8002b1 <__data_end+0x1>
     178:	80 83       	st	Z, r24
    EtherComm::SendCommand(CMD_PING, 1);
     17a:	80 e0       	ldi	r24, 0x00	; 0
     17c:	0c 94 68 0c 	jmp	0x18d0	; 0x18d0 <_ZN9EtherComm11SendCommandEhh>
     180:	08 95       	ret

00000182 <_Z14RunEchoCommandPKhh>:
  }
}

void RunEchoCommand(const uint8_t* data, uint8_t len){
  uint8_t* index = SendDataBuffer;
     182:	40 91 b0 02 	lds	r20, 0x02B0	; 0x8002b0 <__data_end>
     186:	30 91 b1 02 	lds	r19, 0x02B1	; 0x8002b1 <__data_end+0x1>
  uint8_t dataLen = len;
  while(len-- > 0){
     18a:	2f ef       	ldi	r18, 0xFF	; 255
     18c:	26 0f       	add	r18, r22
     18e:	66 23       	and	r22, r22
     190:	41 f0       	breq	.+16     	; 0x1a2 <_Z14RunEchoCommandPKhh+0x20>
     192:	a8 2f       	mov	r26, r24
     194:	b9 2f       	mov	r27, r25
     196:	e4 2f       	mov	r30, r20
     198:	f3 2f       	mov	r31, r19
    *(index++) = *(data++);
     19a:	8d 91       	ld	r24, X+
     19c:	81 93       	st	Z+, r24
}

void RunEchoCommand(const uint8_t* data, uint8_t len){
  uint8_t* index = SendDataBuffer;
  uint8_t dataLen = len;
  while(len-- > 0){
     19e:	21 50       	subi	r18, 0x01	; 1
     1a0:	e0 f7       	brcc	.-8      	; 0x19a <_Z14RunEchoCommandPKhh+0x18>
    *(index++) = *(data++);
  }
  
  EtherComm::SendCommand(CMD_ECHO, dataLen);
     1a2:	81 e0       	ldi	r24, 0x01	; 1
     1a4:	0c 94 68 0c 	jmp	0x18d0	; 0x18d0 <_ZN9EtherComm11SendCommandEhh>
     1a8:	08 95       	ret

000001aa <_ZN9EtherComm15CommandReceivedEhPKhh>:
}

void EtherComm::CommandReceived(uint8_t command, const uint8_t* data, uint8_t len){
     1aa:	9b 01       	movw	r18, r22
  switch(command){
     1ac:	88 23       	and	r24, r24
     1ae:	19 f0       	breq	.+6      	; 0x1b6 <_ZN9EtherComm15CommandReceivedEhPKhh+0xc>
     1b0:	81 30       	cpi	r24, 0x01	; 1
     1b2:	29 f0       	breq	.+10     	; 0x1be <_ZN9EtherComm15CommandReceivedEhPKhh+0x14>
     1b4:	08 95       	ret
    case CMD_PING: RunPingCommand(data, len); break;
     1b6:	64 2f       	mov	r22, r20
     1b8:	c9 01       	movw	r24, r18
     1ba:	d6 cf       	rjmp	.-84     	; 0x168 <_Z14RunPingCommandPKhh>
     1bc:	08 95       	ret
    case CMD_ECHO: RunEchoCommand(data, len); break;
     1be:	64 2f       	mov	r22, r20
     1c0:	c9 01       	movw	r24, r18
     1c2:	df cf       	rjmp	.-66     	; 0x182 <_Z14RunEchoCommandPKhh>
     1c4:	08 95       	ret

000001c6 <_GLOBAL__sub_I__Z14RunPingCommandPKhh>:
#include "EtherComm.h"

uint8_t* const SendDataBuffer = (uint8_t*)(&EtherComm::buffer[2]);
     1c6:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <_ZN9EtherComm6bufferE>
     1ca:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <_ZN9EtherComm6bufferE+0x1>
     1ce:	02 96       	adiw	r24, 0x02	; 2
     1d0:	90 93 b1 02 	sts	0x02B1, r25	; 0x8002b1 <__data_end+0x1>
     1d4:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <__data_end>
     1d8:	08 95       	ret

000001da <_ZL8addToBufh>:
}

void EtherCard::dhcpAddOptionCallback(uint8_t option, DhcpOptionCallback callback)
{
    dhcpCustomOptionNum = option;
    dhcpCustomOptionCallback = callback;
     1da:	e0 91 b5 02 	lds	r30, 0x02B5	; 0x8002b5 <_ZL6bufPtr>
     1de:	f0 91 b6 02 	lds	r31, 0x02B6	; 0x8002b6 <_ZL6bufPtr+0x1>
     1e2:	9f 01       	movw	r18, r30
     1e4:	2f 5f       	subi	r18, 0xFF	; 255
     1e6:	3f 4f       	sbci	r19, 0xFF	; 255
     1e8:	30 93 b6 02 	sts	0x02B6, r19	; 0x8002b6 <_ZL6bufPtr+0x1>
     1ec:	20 93 b5 02 	sts	0x02B5, r18	; 0x8002b5 <_ZL6bufPtr>
     1f0:	80 83       	st	Z, r24
     1f2:	08 95       	ret

000001f4 <_ZL8addByteshPKh>:
     1f4:	0f 93       	push	r16
     1f6:	1f 93       	push	r17
     1f8:	cf 93       	push	r28
     1fa:	df 93       	push	r29
     1fc:	9f ef       	ldi	r25, 0xFF	; 255
     1fe:	98 0f       	add	r25, r24
     200:	88 23       	and	r24, r24
     202:	61 f0       	breq	.+24     	; 0x21c <_ZL8addByteshPKh+0x28>
     204:	eb 01       	movw	r28, r22
     206:	09 2f       	mov	r16, r25
     208:	10 e0       	ldi	r17, 0x00	; 0
     20a:	0f 5f       	subi	r16, 0xFF	; 255
     20c:	1f 4f       	sbci	r17, 0xFF	; 255
     20e:	06 0f       	add	r16, r22
     210:	17 1f       	adc	r17, r23
     212:	89 91       	ld	r24, Y+
     214:	e2 df       	rcall	.-60     	; 0x1da <_ZL8addToBufh>
     216:	c0 17       	cp	r28, r16
     218:	d1 07       	cpc	r29, r17
     21a:	d9 f7       	brne	.-10     	; 0x212 <_ZL8addByteshPKh+0x1e>
     21c:	df 91       	pop	r29
     21e:	cf 91       	pop	r28
     220:	1f 91       	pop	r17
     222:	0f 91       	pop	r16
     224:	08 95       	ret

00000226 <_ZL26dhcp_received_message_typejh>:
     226:	0f 93       	push	r16
     228:	1f 93       	push	r17
     22a:	86 34       	cpi	r24, 0x46	; 70
     22c:	91 05       	cpc	r25, r1
     22e:	30 f1       	brcs	.+76     	; 0x27c <_ZL26dhcp_received_message_typejh+0x56>
     230:	20 91 e9 02 	lds	r18, 0x02E9	; 0x8002e9 <_ZN8ENC28J606bufferE+0x23>
     234:	23 34       	cpi	r18, 0x43	; 67
     236:	21 f5       	brne	.+72     	; 0x280 <_ZL26dhcp_received_message_typejh+0x5a>
     238:	00 91 f4 02 	lds	r16, 0x02F4	; 0x8002f4 <_ZN8ENC28J606bufferE+0x2e>
     23c:	10 91 f5 02 	lds	r17, 0x02F5	; 0x8002f5 <_ZN8ENC28J606bufferE+0x2f>
     240:	20 91 f6 02 	lds	r18, 0x02F6	; 0x8002f6 <_ZN8ENC28J606bufferE+0x30>
     244:	30 91 f7 02 	lds	r19, 0x02F7	; 0x8002f7 <_ZN8ENC28J606bufferE+0x31>
     248:	01 2b       	or	r16, r17
     24a:	02 2b       	or	r16, r18
     24c:	03 2b       	or	r16, r19
     24e:	d1 f4       	brne	.+52     	; 0x284 <_ZL26dhcp_received_message_typejh+0x5e>
     250:	e0 ee       	ldi	r30, 0xE0	; 224
     252:	f3 e0       	ldi	r31, 0x03	; 3
     254:	8a 53       	subi	r24, 0x3A	; 58
     256:	9d 4f       	sbci	r25, 0xFD	; 253
     258:	af 01       	movw	r20, r30
     25a:	4e 5f       	subi	r20, 0xFE	; 254
     25c:	5f 4f       	sbci	r21, 0xFF	; 255
     25e:	31 81       	ldd	r19, Z+1	; 0x01
     260:	20 81       	ld	r18, Z
     262:	25 33       	cpi	r18, 0x35	; 53
     264:	19 f4       	brne	.+6      	; 0x26c <_ZL26dhcp_received_message_typejh+0x46>
     266:	22 81       	ldd	r18, Z+2	; 0x02
     268:	26 17       	cp	r18, r22
     26a:	71 f0       	breq	.+28     	; 0x288 <_ZL26dhcp_received_message_typejh+0x62>
     26c:	fa 01       	movw	r30, r20
     26e:	e3 0f       	add	r30, r19
     270:	f1 1d       	adc	r31, r1
     272:	e8 17       	cp	r30, r24
     274:	f9 07       	cpc	r31, r25
     276:	80 f3       	brcs	.-32     	; 0x258 <_ZL26dhcp_received_message_typejh+0x32>
     278:	80 e0       	ldi	r24, 0x00	; 0
     27a:	07 c0       	rjmp	.+14     	; 0x28a <_ZL26dhcp_received_message_typejh+0x64>
     27c:	80 e0       	ldi	r24, 0x00	; 0
     27e:	05 c0       	rjmp	.+10     	; 0x28a <_ZL26dhcp_received_message_typejh+0x64>
     280:	80 e0       	ldi	r24, 0x00	; 0
     282:	03 c0       	rjmp	.+6      	; 0x28a <_ZL26dhcp_received_message_typejh+0x64>
     284:	80 e0       	ldi	r24, 0x00	; 0
     286:	01 c0       	rjmp	.+2      	; 0x28a <_ZL26dhcp_received_message_typejh+0x64>
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	1f 91       	pop	r17
     28c:	0f 91       	pop	r16
     28e:	08 95       	ret

00000290 <_ZL17send_dhcp_messagePh>:
     290:	ef 92       	push	r14
     292:	ff 92       	push	r15
     294:	0f 93       	push	r16
     296:	1f 93       	push	r17
     298:	cf 93       	push	r28
     29a:	df 93       	push	r29
     29c:	7c 01       	movw	r14, r24
     29e:	86 e1       	ldi	r24, 0x16	; 22
     2a0:	91 e0       	ldi	r25, 0x01	; 1
     2a2:	e6 ec       	ldi	r30, 0xC6	; 198
     2a4:	f2 e0       	ldi	r31, 0x02	; 2
     2a6:	df 01       	movw	r26, r30
     2a8:	9c 01       	movw	r18, r24
     2aa:	1d 92       	st	X+, r1
     2ac:	21 50       	subi	r18, 0x01	; 1
     2ae:	30 40       	sbci	r19, 0x00	; 0
     2b0:	e1 f7       	brne	.-8      	; 0x2aa <_ZL17send_dhcp_messagePh+0x1a>
     2b2:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <_ZL9dhcpState>
     2b6:	83 30       	cpi	r24, 0x03	; 3
     2b8:	19 f0       	breq	.+6      	; 0x2c0 <_ZL17send_dhcp_messagePh+0x30>
     2ba:	68 e3       	ldi	r22, 0x38	; 56
     2bc:	72 e0       	ldi	r23, 0x02	; 2
     2be:	02 c0       	rjmp	.+4      	; 0x2c4 <_ZL17send_dhcp_messagePh+0x34>
     2c0:	62 ed       	ldi	r22, 0xD2	; 210
     2c2:	74 e0       	ldi	r23, 0x04	; 4
     2c4:	43 e4       	ldi	r20, 0x43	; 67
     2c6:	50 e0       	ldi	r21, 0x00	; 0
     2c8:	84 e4       	ldi	r24, 0x44	; 68
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	10 d6       	rcall	.+3104   	; 0xeee <_ZN9EtherCard10udpPrepareEjPKhj>
     2ce:	68 e3       	ldi	r22, 0x38	; 56
     2d0:	72 e0       	ldi	r23, 0x02	; 2
     2d2:	86 ec       	ldi	r24, 0xC6	; 198
     2d4:	92 e0       	ldi	r25, 0x02	; 2
     2d6:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <_ZN9EtherCard7copyMacEPhPKh>
     2da:	e6 ec       	ldi	r30, 0xC6	; 198
     2dc:	f2 e0       	ldi	r31, 0x02	; 2
     2de:	81 e0       	ldi	r24, 0x01	; 1
     2e0:	82 a7       	std	Z+42, r24	; 0x2a
     2e2:	83 a7       	std	Z+43, r24	; 0x2b
     2e4:	86 e0       	ldi	r24, 0x06	; 6
     2e6:	84 a7       	std	Z+44, r24	; 0x2c
     2e8:	16 a6       	std	Z+46, r1	; 0x2e
     2ea:	17 a6       	std	Z+47, r1	; 0x2f
     2ec:	10 aa       	std	Z+48, r1	; 0x30
     2ee:	11 aa       	std	Z+49, r1	; 0x31
     2f0:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <_ZL9dhcpState>
     2f4:	83 30       	cpi	r24, 0x03	; 3
     2f6:	31 f4       	brne	.+12     	; 0x304 <_ZL17send_dhcp_messagePh+0x74>
     2f8:	62 ee       	ldi	r22, 0xE2	; 226
     2fa:	74 e0       	ldi	r23, 0x04	; 4
     2fc:	8c ef       	ldi	r24, 0xFC	; 252
     2fe:	92 e0       	ldi	r25, 0x02	; 2
     300:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <_ZN9EtherCard6copyIpEPhPKh>
     304:	66 ee       	ldi	r22, 0xE6	; 230
     306:	74 e0       	ldi	r23, 0x04	; 4
     308:	8c e0       	ldi	r24, 0x0C	; 12
     30a:	93 e0       	ldi	r25, 0x03	; 3
     30c:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <_ZN9EtherCard7copyMacEPhPKh>
     310:	8c ed       	ldi	r24, 0xDC	; 220
     312:	93 e0       	ldi	r25, 0x03	; 3
     314:	90 93 b6 02 	sts	0x02B6, r25	; 0x8002b6 <_ZL6bufPtr+0x1>
     318:	80 93 b5 02 	sts	0x02B5, r24	; 0x8002b5 <_ZL6bufPtr>
     31c:	c4 ee       	ldi	r28, 0xE4	; 228
     31e:	d0 e0       	ldi	r29, 0x00	; 0
     320:	08 ee       	ldi	r16, 0xE8	; 232
     322:	10 e0       	ldi	r17, 0x00	; 0
     324:	fe 01       	movw	r30, r28
     326:	84 91       	lpm	r24, Z
     328:	58 df       	rcall	.-336    	; 0x1da <_ZL8addToBufh>
     32a:	21 96       	adiw	r28, 0x01	; 1
     32c:	0c 17       	cp	r16, r28
     32e:	1d 07       	cpc	r17, r29
     330:	c9 f7       	brne	.-14     	; 0x324 <_ZL17send_dhcp_messagePh+0x94>
     332:	85 e3       	ldi	r24, 0x35	; 53
     334:	52 df       	rcall	.-348    	; 0x1da <_ZL8addToBufh>
     336:	81 e0       	ldi	r24, 0x01	; 1
     338:	50 df       	rcall	.-352    	; 0x1da <_ZL8addToBufh>
     33a:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <_ZL9dhcpState>
     33e:	88 23       	and	r24, r24
     340:	11 f0       	breq	.+4      	; 0x346 <_ZL17send_dhcp_messagePh+0xb6>
     342:	83 e0       	ldi	r24, 0x03	; 3
     344:	01 c0       	rjmp	.+2      	; 0x348 <_ZL17send_dhcp_messagePh+0xb8>
     346:	81 e0       	ldi	r24, 0x01	; 1
     348:	48 df       	rcall	.-368    	; 0x1da <_ZL8addToBufh>
     34a:	8d e3       	ldi	r24, 0x3D	; 61
     34c:	46 df       	rcall	.-372    	; 0x1da <_ZL8addToBufh>
     34e:	87 e0       	ldi	r24, 0x07	; 7
     350:	44 df       	rcall	.-376    	; 0x1da <_ZL8addToBufh>
     352:	81 e0       	ldi	r24, 0x01	; 1
     354:	42 df       	rcall	.-380    	; 0x1da <_ZL8addToBufh>
     356:	66 ee       	ldi	r22, 0xE6	; 230
     358:	74 e0       	ldi	r23, 0x04	; 4
     35a:	86 e0       	ldi	r24, 0x06	; 6
     35c:	4b df       	rcall	.-362    	; 0x1f4 <_ZL8addByteshPKh>
     35e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
     362:	88 23       	and	r24, r24
     364:	89 f0       	breq	.+34     	; 0x388 <_ZL17send_dhcp_messagePh+0xf8>
     366:	e0 e0       	ldi	r30, 0x00	; 0
     368:	f2 e0       	ldi	r31, 0x02	; 2
     36a:	01 90       	ld	r0, Z+
     36c:	00 20       	and	r0, r0
     36e:	e9 f7       	brne	.-6      	; 0x36a <_ZL17send_dhcp_messagePh+0xda>
     370:	31 97       	sbiw	r30, 0x01	; 1
     372:	ef 01       	movw	r28, r30
     374:	c0 50       	subi	r28, 0x00	; 0
     376:	d2 40       	sbci	r29, 0x02	; 2
     378:	8c e0       	ldi	r24, 0x0C	; 12
     37a:	2f df       	rcall	.-418    	; 0x1da <_ZL8addToBufh>
     37c:	8c 2f       	mov	r24, r28
     37e:	2d df       	rcall	.-422    	; 0x1da <_ZL8addToBufh>
     380:	60 e0       	ldi	r22, 0x00	; 0
     382:	72 e0       	ldi	r23, 0x02	; 2
     384:	8c 2f       	mov	r24, r28
     386:	36 df       	rcall	.-404    	; 0x1f4 <_ZL8addByteshPKh>
     388:	e1 14       	cp	r14, r1
     38a:	f1 04       	cpc	r15, r1
     38c:	79 f0       	breq	.+30     	; 0x3ac <_ZL17send_dhcp_messagePh+0x11c>
     38e:	82 e3       	ldi	r24, 0x32	; 50
     390:	24 df       	rcall	.-440    	; 0x1da <_ZL8addToBufh>
     392:	84 e0       	ldi	r24, 0x04	; 4
     394:	22 df       	rcall	.-444    	; 0x1da <_ZL8addToBufh>
     396:	b7 01       	movw	r22, r14
     398:	84 e0       	ldi	r24, 0x04	; 4
     39a:	2c df       	rcall	.-424    	; 0x1f4 <_ZL8addByteshPKh>
     39c:	86 e3       	ldi	r24, 0x36	; 54
     39e:	1d df       	rcall	.-454    	; 0x1da <_ZL8addToBufh>
     3a0:	84 e0       	ldi	r24, 0x04	; 4
     3a2:	1b df       	rcall	.-458    	; 0x1da <_ZL8addToBufh>
     3a4:	62 ed       	ldi	r22, 0xD2	; 210
     3a6:	74 e0       	ldi	r23, 0x04	; 4
     3a8:	84 e0       	ldi	r24, 0x04	; 4
     3aa:	24 df       	rcall	.-440    	; 0x1f4 <_ZL8addByteshPKh>
     3ac:	c0 91 b4 02 	lds	r28, 0x02B4	; 0x8002b4 <_ZL19dhcpCustomOptionNum>
     3b0:	c1 11       	cpse	r28, r1
     3b2:	0b c0       	rjmp	.+22     	; 0x3ca <_ZL17send_dhcp_messagePh+0x13a>
     3b4:	17 c0       	rjmp	.+46     	; 0x3e4 <_ZL17send_dhcp_messagePh+0x154>
     3b6:	8f ef       	ldi	r24, 0xFF	; 255
     3b8:	10 df       	rcall	.-480    	; 0x1da <_ZL8addToBufh>
     3ba:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <_ZL6bufPtr>
     3be:	90 91 b6 02 	lds	r25, 0x02B6	; 0x8002b6 <_ZL6bufPtr+0x1>
     3c2:	80 5f       	subi	r24, 0xF0	; 240
     3c4:	92 40       	sbci	r25, 0x02	; 2
     3c6:	e5 d5       	rcall	.+3018   	; 0xf92 <_ZN9EtherCard11udpTransmitEj>
     3c8:	18 c0       	rjmp	.+48     	; 0x3fa <_ZL17send_dhcp_messagePh+0x16a>
     3ca:	87 e3       	ldi	r24, 0x37	; 55
     3cc:	06 df       	rcall	.-500    	; 0x1da <_ZL8addToBufh>
     3ce:	84 e0       	ldi	r24, 0x04	; 4
     3d0:	04 df       	rcall	.-504    	; 0x1da <_ZL8addToBufh>
     3d2:	81 e0       	ldi	r24, 0x01	; 1
     3d4:	02 df       	rcall	.-508    	; 0x1da <_ZL8addToBufh>
     3d6:	83 e0       	ldi	r24, 0x03	; 3
     3d8:	00 df       	rcall	.-512    	; 0x1da <_ZL8addToBufh>
     3da:	86 e0       	ldi	r24, 0x06	; 6
     3dc:	fe de       	rcall	.-516    	; 0x1da <_ZL8addToBufh>
     3de:	8c 2f       	mov	r24, r28
     3e0:	fc de       	rcall	.-520    	; 0x1da <_ZL8addToBufh>
     3e2:	e9 cf       	rjmp	.-46     	; 0x3b6 <_ZL17send_dhcp_messagePh+0x126>
     3e4:	87 e3       	ldi	r24, 0x37	; 55
     3e6:	f9 de       	rcall	.-526    	; 0x1da <_ZL8addToBufh>
     3e8:	83 e0       	ldi	r24, 0x03	; 3
     3ea:	f7 de       	rcall	.-530    	; 0x1da <_ZL8addToBufh>
     3ec:	81 e0       	ldi	r24, 0x01	; 1
     3ee:	f5 de       	rcall	.-534    	; 0x1da <_ZL8addToBufh>
     3f0:	83 e0       	ldi	r24, 0x03	; 3
     3f2:	f3 de       	rcall	.-538    	; 0x1da <_ZL8addToBufh>
     3f4:	86 e0       	ldi	r24, 0x06	; 6
     3f6:	f1 de       	rcall	.-542    	; 0x1da <_ZL8addToBufh>
     3f8:	de cf       	rjmp	.-68     	; 0x3b6 <_ZL17send_dhcp_messagePh+0x126>
     3fa:	df 91       	pop	r29
     3fc:	cf 91       	pop	r28
     3fe:	1f 91       	pop	r17
     400:	0f 91       	pop	r16
     402:	ff 90       	pop	r15
     404:	ef 90       	pop	r14
     406:	08 95       	ret

00000408 <_ZN9EtherCard16DhcpStateMachineEj>:
}

void EtherCard::DhcpStateMachine (uint16_t len)
{
     408:	9f 92       	push	r9
     40a:	af 92       	push	r10
     40c:	bf 92       	push	r11
     40e:	cf 92       	push	r12
     410:	df 92       	push	r13
     412:	ef 92       	push	r14
     414:	ff 92       	push	r15
     416:	0f 93       	push	r16
     418:	1f 93       	push	r17
     41a:	cf 93       	push	r28
     41c:	df 93       	push	r29
     41e:	00 d0       	rcall	.+0      	; 0x420 <_ZN9EtherCard16DhcpStateMachineEj+0x18>
     420:	1f 92       	push	r1
     422:	cd b7       	in	r28, 0x3d	; 61
     424:	de b7       	in	r29, 0x3e	; 62
     426:	8c 01       	movw	r16, r24
        Serial.println("Renew");
        break;
    }
#endif

    switch (dhcpState) {
     428:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <_ZL9dhcpState>
     42c:	82 30       	cpi	r24, 0x02	; 2
     42e:	09 f4       	brne	.+2      	; 0x432 <_ZN9EtherCard16DhcpStateMachineEj+0x2a>
     430:	5a c0       	rjmp	.+180    	; 0x4e6 <_ZN9EtherCard16DhcpStateMachineEj+0xde>
     432:	28 f4       	brcc	.+10     	; 0x43e <_ZN9EtherCard16DhcpStateMachineEj+0x36>
     434:	88 23       	and	r24, r24
     436:	f1 f0       	breq	.+60     	; 0x474 <_ZN9EtherCard16DhcpStateMachineEj+0x6c>
     438:	81 30       	cpi	r24, 0x01	; 1
     43a:	61 f1       	breq	.+88     	; 0x494 <_ZN9EtherCard16DhcpStateMachineEj+0x8c>
     43c:	e3 c0       	rjmp	.+454    	; 0x604 <_ZN9EtherCard16DhcpStateMachineEj+0x1fc>
     43e:	83 30       	cpi	r24, 0x03	; 3
     440:	21 f0       	breq	.+8      	; 0x44a <_ZN9EtherCard16DhcpStateMachineEj+0x42>
     442:	84 30       	cpi	r24, 0x04	; 4
     444:	09 f4       	brne	.+2      	; 0x448 <_ZN9EtherCard16DhcpStateMachineEj+0x40>
     446:	4f c0       	rjmp	.+158    	; 0x4e6 <_ZN9EtherCard16DhcpStateMachineEj+0xde>
     448:	dd c0       	rjmp	.+442    	; 0x604 <_ZN9EtherCard16DhcpStateMachineEj+0x1fc>

    case DHCP_STATE_BOUND:
        //!@todo Due to millis() wrap-around, DHCP renewal may not work if leaseTime is larger than 49days
		//TODO replaced millis()
		if (leaseTime != DHCP_INFINITE_LEASE /*&& millis() - leaseStart >= leaseTime*/) {
     44a:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <_ZL9leaseTime>
     44e:	90 91 b8 02 	lds	r25, 0x02B8	; 0x8002b8 <_ZL9leaseTime+0x1>
     452:	a0 91 b9 02 	lds	r26, 0x02B9	; 0x8002b9 <_ZL9leaseTime+0x2>
     456:	b0 91 ba 02 	lds	r27, 0x02BA	; 0x8002ba <_ZL9leaseTime+0x3>
     45a:	8f 3f       	cpi	r24, 0xFF	; 255
     45c:	9f 4f       	sbci	r25, 0xFF	; 255
     45e:	af 4f       	sbci	r26, 0xFF	; 255
     460:	bf 4f       	sbci	r27, 0xFF	; 255
     462:	09 f4       	brne	.+2      	; 0x466 <_ZN9EtherCard16DhcpStateMachineEj+0x5e>
     464:	cf c0       	rjmp	.+414    	; 0x604 <_ZN9EtherCard16DhcpStateMachineEj+0x1fc>
            send_dhcp_message(myip);
     466:	82 ee       	ldi	r24, 0xE2	; 226
     468:	94 e0       	ldi	r25, 0x04	; 4
     46a:	12 df       	rcall	.-476    	; 0x290 <_ZL17send_dhcp_messagePh>
            dhcpState = DHCP_STATE_RENEWING;
     46c:	84 e0       	ldi	r24, 0x04	; 4
     46e:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <_ZL9dhcpState>
     472:	c8 c0       	rjmp	.+400    	; 0x604 <_ZN9EtherCard16DhcpStateMachineEj+0x1fc>
        break;

    case DHCP_STATE_INIT:
		//TODO replaced millis()
        //currentXid = millis();
        memset(myip,0,IP_LEN); // force ip 0.0.0.0
     474:	84 e0       	ldi	r24, 0x04	; 4
     476:	e2 ee       	ldi	r30, 0xE2	; 226
     478:	f4 e0       	ldi	r31, 0x04	; 4
     47a:	df 01       	movw	r26, r30
     47c:	1d 92       	st	X+, r1
     47e:	8a 95       	dec	r24
     480:	e9 f7       	brne	.-6      	; 0x47c <_ZN9EtherCard16DhcpStateMachineEj+0x74>
        send_dhcp_message(NULL);
     482:	80 e0       	ldi	r24, 0x00	; 0
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	04 df       	rcall	.-504    	; 0x290 <_ZL17send_dhcp_messagePh>
        enableBroadcast(true); //Temporarily enable broadcasts
     488:	81 e0       	ldi	r24, 0x01	; 1
     48a:	04 d3       	rcall	.+1544   	; 0xa94 <_ZN8ENC28J6015enableBroadcastEb>
     48c:	81 e0       	ldi	r24, 0x01	; 1
        dhcpState = DHCP_STATE_SELECTING;
     48e:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <_ZL9dhcpState>
     492:	b8 c0       	rjmp	.+368    	; 0x604 <_ZN9EtherCard16DhcpStateMachineEj+0x1fc>
		//TODO replaced millis()
        //stateTimer = millis();
        break;

    case DHCP_STATE_SELECTING:
        if (dhcp_received_message_type(len, DHCP_OFFER)) {
     494:	62 e0       	ldi	r22, 0x02	; 2
     496:	c8 01       	movw	r24, r16
     498:	c6 de       	rcall	.-628    	; 0x226 <_ZL26dhcp_received_message_typejh>
     49a:	88 23       	and	r24, r24
     49c:	09 f4       	brne	.+2      	; 0x4a0 <_ZN9EtherCard16DhcpStateMachineEj+0x98>
     49e:	b2 c0       	rjmp	.+356    	; 0x604 <_ZN9EtherCard16DhcpStateMachineEj+0x1fc>
     4a0:	60 e0       	ldi	r22, 0x00	; 0
static void process_dhcp_offer(uint16_t len, uint8_t *offeredip) {
    // Map struct onto payload
    DHCPdata *dhcpPtr = (DHCPdata*) (gPB + UDP_DATA_P);

    // Offered IP address is in yiaddr
    EtherCard::copyIp(offeredip, dhcpPtr->yiaddr);
     4a2:	73 e0       	ldi	r23, 0x03	; 3
     4a4:	ce 01       	movw	r24, r28
     4a6:	01 96       	adiw	r24, 0x01	; 1
     4a8:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <_ZN9EtherCard6copyIpEPhPKh>
     4ac:	e0 ee       	ldi	r30, 0xE0	; 224

    // Search for the server IP
    uint8_t *ptr = (uint8_t*) (dhcpPtr + 1) + 4;
     4ae:	f3 e0       	ldi	r31, 0x03	; 3
     4b0:	0a 53       	subi	r16, 0x3A	; 58
        if (option == DHCP_OPT_SERVER_IDENTIFIER) {
            EtherCard::copyIp(EtherCard::dhcpip, ptr);
            break;
        }
        ptr += optionLen;
    } while (ptr < gPB + len);
     4b2:	1d 4f       	sbci	r17, 0xFD	; 253
     4b4:	bf 01       	movw	r22, r30

    // Search for the server IP
    uint8_t *ptr = (uint8_t*) (dhcpPtr + 1) + 4;
    do {
        uint8_t option = *ptr++;
        uint8_t optionLen = *ptr++;
     4b6:	6e 5f       	subi	r22, 0xFE	; 254
     4b8:	7f 4f       	sbci	r23, 0xFF	; 255
     4ba:	91 81       	ldd	r25, Z+1	; 0x01
     4bc:	80 81       	ld	r24, Z
        if (option == DHCP_OPT_SERVER_IDENTIFIER) {
     4be:	86 33       	cpi	r24, 0x36	; 54
     4c0:	29 f4       	brne	.+10     	; 0x4cc <_ZN9EtherCard16DhcpStateMachineEj+0xc4>
     4c2:	82 ed       	ldi	r24, 0xD2	; 210
            EtherCard::copyIp(EtherCard::dhcpip, ptr);
     4c4:	94 e0       	ldi	r25, 0x04	; 4
     4c6:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <_ZN9EtherCard6copyIpEPhPKh>
     4ca:	06 c0       	rjmp	.+12     	; 0x4d8 <_ZN9EtherCard16DhcpStateMachineEj+0xd0>
     4cc:	fb 01       	movw	r30, r22
            break;
        }
        ptr += optionLen;
     4ce:	e9 0f       	add	r30, r25
     4d0:	f1 1d       	adc	r31, r1
     4d2:	e0 17       	cp	r30, r16
    } while (ptr < gPB + len);
     4d4:	f1 07       	cpc	r31, r17
     4d6:	70 f3       	brcs	.-36     	; 0x4b4 <_ZN9EtherCard16DhcpStateMachineEj+0xac>

    case DHCP_STATE_SELECTING:
        if (dhcp_received_message_type(len, DHCP_OFFER)) {
            uint8_t offeredip[IP_LEN];
            process_dhcp_offer(len, offeredip);
            send_dhcp_message(offeredip);
     4d8:	ce 01       	movw	r24, r28
     4da:	01 96       	adiw	r24, 0x01	; 1
     4dc:	d9 de       	rcall	.-590    	; 0x290 <_ZL17send_dhcp_messagePh>
     4de:	82 e0       	ldi	r24, 0x02	; 2
            dhcpState = DHCP_STATE_REQUESTING;
     4e0:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <_ZL9dhcpState>
     4e4:	8f c0       	rjmp	.+286    	; 0x604 <_ZN9EtherCard16DhcpStateMachineEj+0x1fc>
        }
        break;

    case DHCP_STATE_REQUESTING:
    case DHCP_STATE_RENEWING:
        if (dhcp_received_message_type(len, DHCP_ACK)) {
     4e6:	65 e0       	ldi	r22, 0x05	; 5
     4e8:	c8 01       	movw	r24, r16
     4ea:	9d de       	rcall	.-710    	; 0x226 <_ZL26dhcp_received_message_typejh>
     4ec:	88 23       	and	r24, r24
     4ee:	09 f4       	brne	.+2      	; 0x4f2 <_ZN9EtherCard16DhcpStateMachineEj+0xea>
     4f0:	89 c0       	rjmp	.+274    	; 0x604 <_ZN9EtherCard16DhcpStateMachineEj+0x1fc>
            disableBroadcast(true); //Disable broadcast after temporary enable
     4f2:	81 e0       	ldi	r24, 0x01	; 1
     4f4:	de d2       	rcall	.+1468   	; 0xab2 <_ZN8ENC28J6016disableBroadcastEb>
     4f6:	60 e0       	ldi	r22, 0x00	; 0
static void process_dhcp_ack(uint16_t len) {
    // Map struct onto payload
    DHCPdata *dhcpPtr = (DHCPdata*) (gPB + UDP_DATA_P);

    // Allocated IP address is in yiaddr
    EtherCard::copyIp(EtherCard::myip, dhcpPtr->yiaddr);
     4f8:	73 e0       	ldi	r23, 0x03	; 3
     4fa:	82 ee       	ldi	r24, 0xE2	; 226
     4fc:	94 e0       	ldi	r25, 0x04	; 4
     4fe:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <_ZN9EtherCard6copyIpEPhPKh>
     502:	e0 ee       	ldi	r30, 0xE0	; 224

    // Scan through variable length option list identifying options we want
    uint8_t *ptr = (uint8_t*) (dhcpPtr + 1) + 4;
     504:	f3 e0       	ldi	r31, 0x03	; 3
     506:	91 2c       	mov	r9, r1
     508:	a1 2c       	mov	r10, r1
     50a:	b1 2c       	mov	r11, r1
     50c:	c1 2c       	mov	r12, r1
     50e:	0a 53       	subi	r16, 0x3A	; 58
                dhcpCustomOptionCallback(option, ptr, optionLen);
            }
        }
        }
        ptr += optionLen;
    } while (!done && ptr < gPB + len);
     510:	1d 4f       	sbci	r17, 0xFD	; 253
     512:	80 81       	ld	r24, Z

    // Scan through variable length option list identifying options we want
    uint8_t *ptr = (uint8_t*) (dhcpPtr + 1) + 4;
    bool done = false;
    do {
        uint8_t option = *ptr++;
     514:	7f 01       	movw	r14, r30
        uint8_t optionLen = *ptr++;
     516:	b2 e0       	ldi	r27, 0x02	; 2
     518:	eb 0e       	add	r14, r27
     51a:	f1 1c       	adc	r15, r1
     51c:	d1 80       	ldd	r13, Z+1	; 0x01
     51e:	86 30       	cpi	r24, 0x06	; 6
        switch (option) {
     520:	d9 f0       	breq	.+54     	; 0x558 <_ZN9EtherCard16DhcpStateMachineEj+0x150>
     522:	28 f4       	brcc	.+10     	; 0x52e <_ZN9EtherCard16DhcpStateMachineEj+0x126>
     524:	81 30       	cpi	r24, 0x01	; 1
     526:	61 f0       	breq	.+24     	; 0x540 <_ZN9EtherCard16DhcpStateMachineEj+0x138>
     528:	83 30       	cpi	r24, 0x03	; 3
     52a:	81 f0       	breq	.+32     	; 0x54c <_ZN9EtherCard16DhcpStateMachineEj+0x144>
     52c:	4a c0       	rjmp	.+148    	; 0x5c2 <_ZN9EtherCard16DhcpStateMachineEj+0x1ba>
     52e:	8a 33       	cpi	r24, 0x3A	; 58
     530:	c9 f0       	breq	.+50     	; 0x564 <_ZN9EtherCard16DhcpStateMachineEj+0x15c>
     532:	8f 3f       	cpi	r24, 0xFF	; 255
     534:	09 f4       	brne	.+2      	; 0x538 <_ZN9EtherCard16DhcpStateMachineEj+0x130>
     536:	53 c0       	rjmp	.+166    	; 0x5de <_ZN9EtherCard16DhcpStateMachineEj+0x1d6>
     538:	83 33       	cpi	r24, 0x33	; 51
     53a:	09 f0       	breq	.+2      	; 0x53e <_ZN9EtherCard16DhcpStateMachineEj+0x136>
     53c:	42 c0       	rjmp	.+132    	; 0x5c2 <_ZN9EtherCard16DhcpStateMachineEj+0x1ba>
     53e:	12 c0       	rjmp	.+36     	; 0x564 <_ZN9EtherCard16DhcpStateMachineEj+0x15c>
     540:	b7 01       	movw	r22, r14
        case DHCP_OPT_SUBNET_MASK:
            EtherCard::copyIp(EtherCard::netmask, ptr);
     542:	8e ed       	ldi	r24, 0xDE	; 222
     544:	94 e0       	ldi	r25, 0x04	; 4
     546:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <_ZN9EtherCard6copyIpEPhPKh>
     54a:	54 c0       	rjmp	.+168    	; 0x5f4 <_ZN9EtherCard16DhcpStateMachineEj+0x1ec>
     54c:	b7 01       	movw	r22, r14
            break;
        case DHCP_OPT_ROUTERS:
            EtherCard::copyIp(EtherCard::gwip, ptr);
     54e:	86 ed       	ldi	r24, 0xD6	; 214
     550:	94 e0       	ldi	r25, 0x04	; 4
     552:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <_ZN9EtherCard6copyIpEPhPKh>
     556:	4e c0       	rjmp	.+156    	; 0x5f4 <_ZN9EtherCard16DhcpStateMachineEj+0x1ec>
     558:	b7 01       	movw	r22, r14
            break;
        case DHCP_OPT_DOMAIN_NAME_SERVERS:
            EtherCard::copyIp(EtherCard::dnsip, ptr);
     55a:	8e ec       	ldi	r24, 0xCE	; 206
     55c:	94 e0       	ldi	r25, 0x04	; 4
     55e:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <_ZN9EtherCard6copyIpEPhPKh>
     562:	48 c0       	rjmp	.+144    	; 0x5f4 <_ZN9EtherCard16DhcpStateMachineEj+0x1ec>
     564:	d7 01       	movw	r26, r14
     566:	36 96       	adiw	r30, 0x06	; 6
     568:	29 2d       	mov	r18, r9
     56a:	3a 2d       	mov	r19, r10
     56c:	4b 2d       	mov	r20, r11
     56e:	5c 2d       	mov	r21, r12
     570:	8d 91       	ld	r24, X+
            break;
        case DHCP_OPT_LEASE_TIME:
        case DHCP_OPT_RENEWAL_TIME:
            leaseTime = 0;
            for (uint8_t i = 0; i<4; i++)
                leaseTime = (leaseTime << 8) + ptr[i];
     572:	74 2f       	mov	r23, r20
     574:	63 2f       	mov	r22, r19
     576:	52 2f       	mov	r21, r18
     578:	44 27       	eor	r20, r20
     57a:	9a 01       	movw	r18, r20
     57c:	ab 01       	movw	r20, r22
     57e:	28 0f       	add	r18, r24
     580:	31 1d       	adc	r19, r1
     582:	41 1d       	adc	r20, r1
     584:	51 1d       	adc	r21, r1
     586:	ae 17       	cp	r26, r30
            EtherCard::copyIp(EtherCard::dnsip, ptr);
            break;
        case DHCP_OPT_LEASE_TIME:
        case DHCP_OPT_RENEWAL_TIME:
            leaseTime = 0;
            for (uint8_t i = 0; i<4; i++)
     588:	bf 07       	cpc	r27, r31
     58a:	91 f7       	brne	.-28     	; 0x570 <_ZN9EtherCard16DhcpStateMachineEj+0x168>
     58c:	20 93 b7 02 	sts	0x02B7, r18	; 0x8002b7 <_ZL9leaseTime>
     590:	30 93 b8 02 	sts	0x02B8, r19	; 0x8002b8 <_ZL9leaseTime+0x1>
     594:	40 93 b9 02 	sts	0x02B9, r20	; 0x8002b9 <_ZL9leaseTime+0x2>
     598:	50 93 ba 02 	sts	0x02BA, r21	; 0x8002ba <_ZL9leaseTime+0x3>
     59c:	2f 3f       	cpi	r18, 0xFF	; 255
                leaseTime = (leaseTime << 8) + ptr[i];
            if (leaseTime != DHCP_INFINITE_LEASE) {
     59e:	8f ef       	ldi	r24, 0xFF	; 255
     5a0:	38 07       	cpc	r19, r24
     5a2:	48 07       	cpc	r20, r24
     5a4:	58 07       	cpc	r21, r24
     5a6:	31 f1       	breq	.+76     	; 0x5f4 <_ZN9EtherCard16DhcpStateMachineEj+0x1ec>
     5a8:	a8 ee       	ldi	r26, 0xE8	; 232
                leaseTime *= 1000;      // milliseconds
     5aa:	b3 e0       	ldi	r27, 0x03	; 3
     5ac:	0e 94 c8 10 	call	0x2190	; 0x2190 <__muluhisi3>
     5b0:	60 93 b7 02 	sts	0x02B7, r22	; 0x8002b7 <_ZL9leaseTime>
     5b4:	70 93 b8 02 	sts	0x02B8, r23	; 0x8002b8 <_ZL9leaseTime+0x1>
     5b8:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <_ZL9leaseTime+0x2>
     5bc:	90 93 ba 02 	sts	0x02BA, r25	; 0x8002ba <_ZL9leaseTime+0x3>
     5c0:	19 c0       	rjmp	.+50     	; 0x5f4 <_ZN9EtherCard16DhcpStateMachineEj+0x1ec>
     5c2:	e0 91 b2 02 	lds	r30, 0x02B2	; 0x8002b2 <_ZL24dhcpCustomOptionCallback>
        case DHCP_OPT_END:
            done = true;
            break;
        default: {
            // Is is a custom configured option?
            if (dhcpCustomOptionCallback && option == dhcpCustomOptionNum) {
     5c6:	f0 91 b3 02 	lds	r31, 0x02B3	; 0x8002b3 <_ZL24dhcpCustomOptionCallback+0x1>
     5ca:	30 97       	sbiw	r30, 0x00	; 0
     5cc:	99 f0       	breq	.+38     	; 0x5f4 <_ZN9EtherCard16DhcpStateMachineEj+0x1ec>
     5ce:	90 91 b4 02 	lds	r25, 0x02B4	; 0x8002b4 <_ZL19dhcpCustomOptionNum>
     5d2:	89 13       	cpse	r24, r25
     5d4:	0f c0       	rjmp	.+30     	; 0x5f4 <_ZN9EtherCard16DhcpStateMachineEj+0x1ec>
     5d6:	4d 2d       	mov	r20, r13
                dhcpCustomOptionCallback(option, ptr, optionLen);
     5d8:	b7 01       	movw	r22, r14
     5da:	19 95       	eicall
     5dc:	0b c0       	rjmp	.+22     	; 0x5f4 <_ZN9EtherCard16DhcpStateMachineEj+0x1ec>
        if (dhcp_received_message_type(len, DHCP_ACK)) {
            disableBroadcast(true); //Disable broadcast after temporary enable
            process_dhcp_ack(len);
			//TODO repalced millis()
            //leaseStart = millis();
            if (gwip[0] != 0) setGwIp(gwip); // why is this? because it initiates an arp request
     5de:	80 91 d6 04 	lds	r24, 0x04D6	; 0x8004d6 <_ZN9EtherCard4gwipE>
     5e2:	88 23       	and	r24, r24
     5e4:	19 f0       	breq	.+6      	; 0x5ec <_ZN9EtherCard16DhcpStateMachineEj+0x1e4>
     5e6:	86 ed       	ldi	r24, 0xD6	; 214
     5e8:	94 e0       	ldi	r25, 0x04	; 4
     5ea:	0b d5       	rcall	.+2582   	; 0x1002 <_ZN9EtherCard7setGwIpEPKh>
     5ec:	83 e0       	ldi	r24, 0x03	; 3
            dhcpState = DHCP_STATE_BOUND;
     5ee:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <_ZL9dhcpState>
     5f2:	08 c0       	rjmp	.+16     	; 0x604 <_ZN9EtherCard16DhcpStateMachineEj+0x1fc>
            }*/
        }
        break;

    }
}
     5f4:	f7 01       	movw	r30, r14
            if (dhcpCustomOptionCallback && option == dhcpCustomOptionNum) {
                dhcpCustomOptionCallback(option, ptr, optionLen);
            }
        }
        }
        ptr += optionLen;
     5f6:	ed 0d       	add	r30, r13
     5f8:	f1 1d       	adc	r31, r1
     5fa:	e0 17       	cp	r30, r16
    } while (!done && ptr < gPB + len);
     5fc:	f1 07       	cpc	r31, r17
     5fe:	08 f4       	brcc	.+2      	; 0x602 <_ZN9EtherCard16DhcpStateMachineEj+0x1fa>
     600:	88 cf       	rjmp	.-240    	; 0x512 <_ZN9EtherCard16DhcpStateMachineEj+0x10a>
     602:	ed cf       	rjmp	.-38     	; 0x5de <_ZN9EtherCard16DhcpStateMachineEj+0x1d6>
     604:	0f 90       	pop	r0
            }*/
        }
        break;

    }
}
     606:	0f 90       	pop	r0
     608:	0f 90       	pop	r0
     60a:	0f 90       	pop	r0
     60c:	df 91       	pop	r29
     60e:	cf 91       	pop	r28
     610:	1f 91       	pop	r17
     612:	0f 91       	pop	r16
     614:	ff 90       	pop	r15
     616:	ef 90       	pop	r14
     618:	df 90       	pop	r13
     61a:	cf 90       	pop	r12
     61c:	bf 90       	pop	r11
     61e:	af 90       	pop	r10
     620:	9f 90       	pop	r9
     622:	08 95       	ret

00000624 <_ZL10enableChipv>:
     624:	f8 94       	cli
}

void ENC28J60::powerUp() {
    writeOp(ENC28J60_BIT_FIELD_CLR, ECON2, ECON2_PWRSV);
    while(!readRegByte(ESTAT) & ESTAT_CLKRDY);
    writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN);
     626:	e0 91 c0 02 	lds	r30, 0x02C0	; 0x8002c0 <_ZL10selectPort>
     62a:	f0 91 c1 02 	lds	r31, 0x02C1	; 0x8002c1 <_ZL10selectPort+0x1>
     62e:	90 81       	ld	r25, Z
     630:	80 91 bf 02 	lds	r24, 0x02BF	; 0x8002bf <_ZL9selectPin>
     634:	80 95       	com	r24
     636:	89 23       	and	r24, r25
     638:	80 83       	st	Z, r24
     63a:	08 95       	ret

0000063c <_ZL11disableChipv>:
     63c:	e0 91 c0 02 	lds	r30, 0x02C0	; 0x8002c0 <_ZL10selectPort>
     640:	f0 91 c1 02 	lds	r31, 0x02C1	; 0x8002c1 <_ZL10selectPort+0x1>
     644:	90 81       	ld	r25, Z
     646:	80 91 bf 02 	lds	r24, 0x02BF	; 0x8002bf <_ZL9selectPin>
     64a:	89 2b       	or	r24, r25
     64c:	80 83       	st	Z, r24
     64e:	78 94       	sei
     650:	08 95       	ret

00000652 <_ZL7xferSPIh>:
     652:	8e bd       	out	0x2e, r24	; 46
     654:	0d b4       	in	r0, 0x2d	; 45
     656:	07 fe       	sbrs	r0, 7
     658:	fd cf       	rjmp	.-6      	; 0x654 <_ZL7xferSPIh+0x2>
     65a:	08 95       	ret

0000065c <_ZL7writeOphhh>:
     65c:	1f 93       	push	r17
     65e:	cf 93       	push	r28
     660:	df 93       	push	r29
     662:	18 2f       	mov	r17, r24
     664:	c6 2f       	mov	r28, r22
     666:	d4 2f       	mov	r29, r20
     668:	dd df       	rcall	.-70     	; 0x624 <_ZL10enableChipv>
     66a:	8c 2f       	mov	r24, r28
     66c:	8f 71       	andi	r24, 0x1F	; 31
     66e:	81 2b       	or	r24, r17
     670:	f0 df       	rcall	.-32     	; 0x652 <_ZL7xferSPIh>
     672:	8d 2f       	mov	r24, r29
     674:	ee df       	rcall	.-36     	; 0x652 <_ZL7xferSPIh>
     676:	e2 df       	rcall	.-60     	; 0x63c <_ZL11disableChipv>
     678:	df 91       	pop	r29
     67a:	cf 91       	pop	r28
     67c:	1f 91       	pop	r17
     67e:	08 95       	ret

00000680 <_ZL7readBufjPh>:
     680:	0f 93       	push	r16
     682:	1f 93       	push	r17
     684:	cf 93       	push	r28
     686:	df 93       	push	r29
     688:	ec 01       	movw	r28, r24
     68a:	8b 01       	movw	r16, r22
     68c:	cb df       	rcall	.-106    	; 0x624 <_ZL10enableChipv>
     68e:	20 97       	sbiw	r28, 0x00	; 0
     690:	c1 f0       	breq	.+48     	; 0x6c2 <_ZL7readBufjPh+0x42>
     692:	8a e3       	ldi	r24, 0x3A	; 58
     694:	de df       	rcall	.-68     	; 0x652 <_ZL7xferSPIh>
     696:	1e bc       	out	0x2e, r1	; 46
     698:	21 97       	sbiw	r28, 0x01	; 1
     69a:	69 f0       	breq	.+26     	; 0x6b6 <_ZL7readBufjPh+0x36>
     69c:	f8 01       	movw	r30, r16
     69e:	0c 0f       	add	r16, r28
     6a0:	1d 1f       	adc	r17, r29
     6a2:	98 01       	movw	r18, r16
     6a4:	0d b4       	in	r0, 0x2d	; 45
     6a6:	07 fe       	sbrs	r0, 7
     6a8:	fd cf       	rjmp	.-6      	; 0x6a4 <_ZL7readBufjPh+0x24>
     6aa:	8e b5       	in	r24, 0x2e	; 46
     6ac:	1e bc       	out	0x2e, r1	; 46
     6ae:	81 93       	st	Z+, r24
     6b0:	e2 17       	cp	r30, r18
     6b2:	f3 07       	cpc	r31, r19
     6b4:	b9 f7       	brne	.-18     	; 0x6a4 <_ZL7readBufjPh+0x24>
     6b6:	0d b4       	in	r0, 0x2d	; 45
     6b8:	07 fe       	sbrs	r0, 7
     6ba:	fd cf       	rjmp	.-6      	; 0x6b6 <_ZL7readBufjPh+0x36>
     6bc:	8e b5       	in	r24, 0x2e	; 46
     6be:	f8 01       	movw	r30, r16
     6c0:	80 83       	st	Z, r24
     6c2:	bc df       	rcall	.-136    	; 0x63c <_ZL11disableChipv>
     6c4:	df 91       	pop	r29
     6c6:	cf 91       	pop	r28
     6c8:	1f 91       	pop	r17
     6ca:	0f 91       	pop	r16
     6cc:	08 95       	ret

000006ce <_ZL8writeBufjPKh>:
     6ce:	0f 93       	push	r16
     6d0:	1f 93       	push	r17
     6d2:	cf 93       	push	r28
     6d4:	df 93       	push	r29
     6d6:	ec 01       	movw	r28, r24
     6d8:	8b 01       	movw	r16, r22
     6da:	a4 df       	rcall	.-184    	; 0x624 <_ZL10enableChipv>
     6dc:	20 97       	sbiw	r28, 0x00	; 0
     6de:	c1 f0       	breq	.+48     	; 0x710 <_ZL8writeBufjPKh+0x42>
     6e0:	8a e7       	ldi	r24, 0x7A	; 122
     6e2:	b7 df       	rcall	.-146    	; 0x652 <_ZL7xferSPIh>
     6e4:	f8 01       	movw	r30, r16
     6e6:	31 96       	adiw	r30, 0x01	; 1
     6e8:	d8 01       	movw	r26, r16
     6ea:	8c 91       	ld	r24, X
     6ec:	8e bd       	out	0x2e, r24	; 46
     6ee:	c1 30       	cpi	r28, 0x01	; 1
     6f0:	d1 05       	cpc	r29, r1
     6f2:	59 f0       	breq	.+22     	; 0x70a <_ZL8writeBufjPKh+0x3c>
     6f4:	b8 01       	movw	r22, r16
     6f6:	6c 0f       	add	r22, r28
     6f8:	7d 1f       	adc	r23, r29
     6fa:	91 91       	ld	r25, Z+
     6fc:	0d b4       	in	r0, 0x2d	; 45
     6fe:	07 fe       	sbrs	r0, 7
     700:	fd cf       	rjmp	.-6      	; 0x6fc <_ZL8writeBufjPKh+0x2e>
     702:	9e bd       	out	0x2e, r25	; 46
     704:	e6 17       	cp	r30, r22
     706:	f7 07       	cpc	r31, r23
     708:	c1 f7       	brne	.-16     	; 0x6fa <_ZL8writeBufjPKh+0x2c>
     70a:	0d b4       	in	r0, 0x2d	; 45
     70c:	07 fe       	sbrs	r0, 7
     70e:	fd cf       	rjmp	.-6      	; 0x70a <_ZL8writeBufjPKh+0x3c>
     710:	95 df       	rcall	.-214    	; 0x63c <_ZL11disableChipv>
     712:	df 91       	pop	r29
     714:	cf 91       	pop	r28
     716:	1f 91       	pop	r17
     718:	0f 91       	pop	r16
     71a:	08 95       	ret

0000071c <_ZL7SetBankh>:
     71c:	1f 93       	push	r17
     71e:	cf 93       	push	r28
     720:	df 93       	push	r29
     722:	18 2f       	mov	r17, r24
     724:	10 76       	andi	r17, 0x60	; 96
     726:	c1 2f       	mov	r28, r17
     728:	d0 e0       	ldi	r29, 0x00	; 0
     72a:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <_ZL12Enc28j60Bank>
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	c8 17       	cp	r28, r24
     732:	d9 07       	cpc	r29, r25
     734:	a1 f0       	breq	.+40     	; 0x75e <_ZL7SetBankh+0x42>
     736:	43 e0       	ldi	r20, 0x03	; 3
     738:	6f e1       	ldi	r22, 0x1F	; 31
     73a:	80 ea       	ldi	r24, 0xA0	; 160
     73c:	8f df       	rcall	.-226    	; 0x65c <_ZL7writeOphhh>
     73e:	10 93 c2 02 	sts	0x02C2, r17	; 0x8002c2 <_ZL12Enc28j60Bank>
     742:	ae 01       	movw	r20, r28
     744:	55 95       	asr	r21
     746:	47 95       	ror	r20
     748:	55 95       	asr	r21
     74a:	47 95       	ror	r20
     74c:	55 95       	asr	r21
     74e:	47 95       	ror	r20
     750:	55 95       	asr	r21
     752:	47 95       	ror	r20
     754:	55 95       	asr	r21
     756:	47 95       	ror	r20
     758:	6f e1       	ldi	r22, 0x1F	; 31
     75a:	80 e8       	ldi	r24, 0x80	; 128
     75c:	7f df       	rcall	.-258    	; 0x65c <_ZL7writeOphhh>
     75e:	df 91       	pop	r29
     760:	cf 91       	pop	r28
     762:	1f 91       	pop	r17
     764:	08 95       	ret

00000766 <_ZL11readRegByteh>:
     766:	cf 93       	push	r28
     768:	c8 2f       	mov	r28, r24
     76a:	d8 df       	rcall	.-80     	; 0x71c <_ZL7SetBankh>
     76c:	5b df       	rcall	.-330    	; 0x624 <_ZL10enableChipv>
     76e:	8c 2f       	mov	r24, r28
     770:	8f 71       	andi	r24, 0x1F	; 31
     772:	6f df       	rcall	.-290    	; 0x652 <_ZL7xferSPIh>
     774:	80 e0       	ldi	r24, 0x00	; 0
     776:	6d df       	rcall	.-294    	; 0x652 <_ZL7xferSPIh>
     778:	cc 23       	and	r28, r28
     77a:	14 f4       	brge	.+4      	; 0x780 <_ZL11readRegByteh+0x1a>
     77c:	80 e0       	ldi	r24, 0x00	; 0
     77e:	69 df       	rcall	.-302    	; 0x652 <_ZL7xferSPIh>
     780:	ce b5       	in	r28, 0x2e	; 46
     782:	5c df       	rcall	.-328    	; 0x63c <_ZL11disableChipv>
     784:	8c 2f       	mov	r24, r28
     786:	cf 91       	pop	r28
     788:	08 95       	ret

0000078a <_ZL12writeRegBytehh>:
     78a:	cf 93       	push	r28
     78c:	df 93       	push	r29
     78e:	c8 2f       	mov	r28, r24
     790:	d6 2f       	mov	r29, r22
     792:	c4 df       	rcall	.-120    	; 0x71c <_ZL7SetBankh>
     794:	4d 2f       	mov	r20, r29
     796:	6c 2f       	mov	r22, r28
     798:	80 e4       	ldi	r24, 0x40	; 64
     79a:	60 df       	rcall	.-320    	; 0x65c <_ZL7writeOphhh>
     79c:	df 91       	pop	r29
     79e:	cf 91       	pop	r28
     7a0:	08 95       	ret

000007a2 <_ZL8writeReghj>:
     7a2:	cf 93       	push	r28
     7a4:	df 93       	push	r29
     7a6:	c8 2f       	mov	r28, r24
     7a8:	d7 2f       	mov	r29, r23
     7aa:	ef df       	rcall	.-34     	; 0x78a <_ZL12writeRegBytehh>
     7ac:	6d 2f       	mov	r22, r29
     7ae:	81 e0       	ldi	r24, 0x01	; 1
     7b0:	8c 0f       	add	r24, r28
     7b2:	eb df       	rcall	.-42     	; 0x78a <_ZL12writeRegBytehh>
     7b4:	df 91       	pop	r29
     7b6:	cf 91       	pop	r28
     7b8:	08 95       	ret

000007ba <_ZL8writePhyhj>:
     7ba:	cf 93       	push	r28
     7bc:	df 93       	push	r29
     7be:	eb 01       	movw	r28, r22
     7c0:	68 2f       	mov	r22, r24
     7c2:	84 ed       	ldi	r24, 0xD4	; 212
     7c4:	e2 df       	rcall	.-60     	; 0x78a <_ZL12writeRegBytehh>
     7c6:	be 01       	movw	r22, r28
     7c8:	86 ed       	ldi	r24, 0xD6	; 214
     7ca:	eb df       	rcall	.-42     	; 0x7a2 <_ZL8writeReghj>
     7cc:	8a ee       	ldi	r24, 0xEA	; 234
     7ce:	cb df       	rcall	.-106    	; 0x766 <_ZL11readRegByteh>
     7d0:	80 fd       	sbrc	r24, 0
     7d2:	fc cf       	rjmp	.-8      	; 0x7cc <_ZL8writePhyhj+0x12>
     7d4:	df 91       	pop	r29
     7d6:	cf 91       	pop	r28
     7d8:	08 95       	ret

000007da <_ZN8ENC28J607initSPIEv>:
     7da:	20 9a       	sbi	0x04, 0	; 4
     7dc:	28 9a       	sbi	0x05, 0	; 5
     7de:	22 9a       	sbi	0x04, 2	; 4
     7e0:	21 9a       	sbi	0x04, 1	; 4
     7e2:	23 98       	cbi	0x04, 3	; 4
     7e4:	2a 9a       	sbi	0x05, 2	; 5
     7e6:	2a 98       	cbi	0x05, 2	; 5
     7e8:	29 98       	cbi	0x05, 1	; 5
     7ea:	80 e5       	ldi	r24, 0x50	; 80
     7ec:	8c bd       	out	0x2c, r24	; 44
     7ee:	8d b5       	in	r24, 0x2d	; 45
     7f0:	81 60       	ori	r24, 0x01	; 1
     7f2:	8d bd       	out	0x2d, r24	; 45
     7f4:	08 95       	ret

000007f6 <_ZN8ENC28J6010initializeEjPKhRVhS3_h>:
     7f6:	cf 92       	push	r12
     7f8:	df 92       	push	r13
     7fa:	ef 92       	push	r14
     7fc:	ff 92       	push	r15
     7fe:	0f 93       	push	r16
     800:	cf 93       	push	r28
     802:	df 93       	push	r29
     804:	7b 01       	movw	r14, r22
     806:	ea 01       	movw	r28, r20
     808:	69 01       	movw	r12, r18
     80a:	90 93 c5 02 	sts	0x02C5, r25	; 0x8002c5 <_ZN8ENC28J6010bufferSizeE+0x1>
     80e:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <_ZN8ENC28J6010bufferSizeE>
     812:	0c b4       	in	r0, 0x2c	; 44
     814:	06 fe       	sbrs	r0, 6
     816:	e1 df       	rcall	.-62     	; 0x7da <_ZN8ENC28J607initSPIEv>
     818:	00 93 bf 02 	sts	0x02BF, r16	; 0x8002bf <_ZL9selectPin>
     81c:	d0 92 c1 02 	sts	0x02C1, r13	; 0x8002c1 <_ZL10selectPort+0x1>
     820:	c0 92 c0 02 	sts	0x02C0, r12	; 0x8002c0 <_ZL10selectPort>
     824:	88 81       	ld	r24, Y
     826:	08 2b       	or	r16, r24
     828:	08 83       	st	Y, r16
     82a:	08 df       	rcall	.-496    	; 0x63c <_ZL11disableChipv>
     82c:	4f ef       	ldi	r20, 0xFF	; 255
     82e:	60 e0       	ldi	r22, 0x00	; 0
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	14 df       	rcall	.-472    	; 0x65c <_ZL7writeOphhh>
     834:	83 ef       	ldi	r24, 0xF3	; 243
     836:	91 e0       	ldi	r25, 0x01	; 1
     838:	01 97       	sbiw	r24, 0x01	; 1
     83a:	f1 f7       	brne	.-4      	; 0x838 <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0x42>
     83c:	00 c0       	rjmp	.+0      	; 0x83e <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0x48>
     83e:	00 00       	nop
     840:	f1 de       	rcall	.-542    	; 0x624 <_ZL10enableChipv>
     842:	8d e1       	ldi	r24, 0x1D	; 29
     844:	06 df       	rcall	.-500    	; 0x652 <_ZL7xferSPIh>
     846:	80 e0       	ldi	r24, 0x00	; 0
     848:	04 df       	rcall	.-504    	; 0x652 <_ZL7xferSPIh>
     84a:	ce b5       	in	r28, 0x2e	; 46
     84c:	f7 de       	rcall	.-530    	; 0x63c <_ZL11disableChipv>
     84e:	cc 23       	and	r28, r28
     850:	b9 f3       	breq	.-18     	; 0x840 <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0x4a>
     852:	60 e0       	ldi	r22, 0x00	; 0
     854:	70 e0       	ldi	r23, 0x00	; 0
     856:	88 e0       	ldi	r24, 0x08	; 8
     858:	a4 df       	rcall	.-184    	; 0x7a2 <_ZL8writeReghj>
     85a:	60 e0       	ldi	r22, 0x00	; 0
     85c:	70 e0       	ldi	r23, 0x00	; 0
     85e:	8c e0       	ldi	r24, 0x0C	; 12
     860:	a0 df       	rcall	.-192    	; 0x7a2 <_ZL8writeReghj>
     862:	6f ef       	ldi	r22, 0xFF	; 255
     864:	7b e0       	ldi	r23, 0x0B	; 11
     866:	8a e0       	ldi	r24, 0x0A	; 10
     868:	9c df       	rcall	.-200    	; 0x7a2 <_ZL8writeReghj>
     86a:	60 e0       	ldi	r22, 0x00	; 0
     86c:	7c e0       	ldi	r23, 0x0C	; 12
     86e:	84 e0       	ldi	r24, 0x04	; 4
     870:	98 df       	rcall	.-208    	; 0x7a2 <_ZL8writeReghj>
     872:	6f ef       	ldi	r22, 0xFF	; 255
     874:	71 e1       	ldi	r23, 0x11	; 17
     876:	86 e0       	ldi	r24, 0x06	; 6
     878:	94 df       	rcall	.-216    	; 0x7a2 <_ZL8writeReghj>
     87a:	66 e7       	ldi	r22, 0x76	; 118
     87c:	74 e0       	ldi	r23, 0x04	; 4
     87e:	84 e1       	ldi	r24, 0x14	; 20
     880:	9c df       	rcall	.-200    	; 0x7ba <_ZL8writePhyhj>
     882:	61 eb       	ldi	r22, 0xB1	; 177
     884:	88 e3       	ldi	r24, 0x38	; 56
     886:	81 df       	rcall	.-254    	; 0x78a <_ZL12writeRegBytehh>
     888:	6f e3       	ldi	r22, 0x3F	; 63
     88a:	70 e3       	ldi	r23, 0x30	; 48
     88c:	88 e2       	ldi	r24, 0x28	; 40
     88e:	89 df       	rcall	.-238    	; 0x7a2 <_ZL8writeReghj>
     890:	69 ef       	ldi	r22, 0xF9	; 249
     892:	77 ef       	ldi	r23, 0xF7	; 247
     894:	80 e3       	ldi	r24, 0x30	; 48
     896:	85 df       	rcall	.-246    	; 0x7a2 <_ZL8writeReghj>
     898:	61 e0       	ldi	r22, 0x01	; 1
     89a:	80 ec       	ldi	r24, 0xC0	; 192
     89c:	76 df       	rcall	.-276    	; 0x78a <_ZL12writeRegBytehh>
     89e:	42 e3       	ldi	r20, 0x32	; 50
     8a0:	62 ec       	ldi	r22, 0xC2	; 194
     8a2:	80 e8       	ldi	r24, 0x80	; 128
     8a4:	db de       	rcall	.-586    	; 0x65c <_ZL7writeOphhh>
     8a6:	62 e1       	ldi	r22, 0x12	; 18
     8a8:	7c e0       	ldi	r23, 0x0C	; 12
     8aa:	86 ec       	ldi	r24, 0xC6	; 198
     8ac:	7a df       	rcall	.-268    	; 0x7a2 <_ZL8writeReghj>
     8ae:	62 e1       	ldi	r22, 0x12	; 18
     8b0:	84 ec       	ldi	r24, 0xC4	; 196
     8b2:	6b df       	rcall	.-298    	; 0x78a <_ZL12writeRegBytehh>
     8b4:	6c ed       	ldi	r22, 0xDC	; 220
     8b6:	75 e0       	ldi	r23, 0x05	; 5
     8b8:	8a ec       	ldi	r24, 0xCA	; 202
     8ba:	73 df       	rcall	.-282    	; 0x7a2 <_ZL8writeReghj>
     8bc:	f7 01       	movw	r30, r14
     8be:	60 81       	ld	r22, Z
     8c0:	84 ee       	ldi	r24, 0xE4	; 228
     8c2:	63 df       	rcall	.-314    	; 0x78a <_ZL12writeRegBytehh>
     8c4:	f7 01       	movw	r30, r14
     8c6:	61 81       	ldd	r22, Z+1	; 0x01
     8c8:	85 ee       	ldi	r24, 0xE5	; 229
     8ca:	5f df       	rcall	.-322    	; 0x78a <_ZL12writeRegBytehh>
     8cc:	f7 01       	movw	r30, r14
     8ce:	62 81       	ldd	r22, Z+2	; 0x02
     8d0:	82 ee       	ldi	r24, 0xE2	; 226
     8d2:	5b df       	rcall	.-330    	; 0x78a <_ZL12writeRegBytehh>
     8d4:	f7 01       	movw	r30, r14
     8d6:	63 81       	ldd	r22, Z+3	; 0x03
     8d8:	83 ee       	ldi	r24, 0xE3	; 227
     8da:	57 df       	rcall	.-338    	; 0x78a <_ZL12writeRegBytehh>
     8dc:	f7 01       	movw	r30, r14
     8de:	64 81       	ldd	r22, Z+4	; 0x04
     8e0:	80 ee       	ldi	r24, 0xE0	; 224
     8e2:	53 df       	rcall	.-346    	; 0x78a <_ZL12writeRegBytehh>
     8e4:	f7 01       	movw	r30, r14
     8e6:	65 81       	ldd	r22, Z+5	; 0x05
     8e8:	81 ee       	ldi	r24, 0xE1	; 225
     8ea:	4f df       	rcall	.-354    	; 0x78a <_ZL12writeRegBytehh>
     8ec:	60 e0       	ldi	r22, 0x00	; 0
     8ee:	71 e0       	ldi	r23, 0x01	; 1
     8f0:	80 e1       	ldi	r24, 0x10	; 16
     8f2:	63 df       	rcall	.-314    	; 0x7ba <_ZL8writePhyhj>
     8f4:	8f e1       	ldi	r24, 0x1F	; 31
     8f6:	12 df       	rcall	.-476    	; 0x71c <_ZL7SetBankh>
     8f8:	40 ec       	ldi	r20, 0xC0	; 192
     8fa:	6b e1       	ldi	r22, 0x1B	; 27
     8fc:	80 e8       	ldi	r24, 0x80	; 128
     8fe:	ae de       	rcall	.-676    	; 0x65c <_ZL7writeOphhh>
     900:	44 e0       	ldi	r20, 0x04	; 4
     902:	6f e1       	ldi	r22, 0x1F	; 31
     904:	80 e8       	ldi	r24, 0x80	; 128
     906:	aa de       	rcall	.-684    	; 0x65c <_ZL7writeOphhh>
     908:	82 e7       	ldi	r24, 0x72	; 114
     90a:	2d df       	rcall	.-422    	; 0x766 <_ZL11readRegByteh>
     90c:	86 30       	cpi	r24, 0x06	; 6
     90e:	08 f0       	brcs	.+2      	; 0x912 <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0x11c>
     910:	8f 5f       	subi	r24, 0xFF	; 255
     912:	df 91       	pop	r29
     914:	cf 91       	pop	r28
     916:	0f 91       	pop	r16
     918:	ff 90       	pop	r15
     91a:	ef 90       	pop	r14
     91c:	df 90       	pop	r13
     91e:	cf 90       	pop	r12
     920:	08 95       	ret

00000922 <_ZN8ENC28J608isLinkUpEv>:
     922:	61 e1       	ldi	r22, 0x11	; 17
     924:	84 ed       	ldi	r24, 0xD4	; 212
     926:	31 df       	rcall	.-414    	; 0x78a <_ZL12writeRegBytehh>
     928:	61 e0       	ldi	r22, 0x01	; 1
     92a:	82 ed       	ldi	r24, 0xD2	; 210
     92c:	2e df       	rcall	.-420    	; 0x78a <_ZL12writeRegBytehh>
     92e:	8a ee       	ldi	r24, 0xEA	; 234
     930:	1a df       	rcall	.-460    	; 0x766 <_ZL11readRegByteh>
     932:	80 fd       	sbrc	r24, 0
     934:	fc cf       	rjmp	.-8      	; 0x92e <_ZN8ENC28J608isLinkUpEv+0xc>
     936:	60 e0       	ldi	r22, 0x00	; 0
     938:	82 ed       	ldi	r24, 0xD2	; 210
     93a:	27 df       	rcall	.-434    	; 0x78a <_ZL12writeRegBytehh>
     93c:	89 ed       	ldi	r24, 0xD9	; 217
     93e:	13 df       	rcall	.-474    	; 0x766 <_ZL11readRegByteh>
     940:	82 fb       	bst	r24, 2
     942:	88 27       	eor	r24, r24
     944:	80 f9       	bld	r24, 0
     946:	08 95       	ret

00000948 <_ZN8ENC28J6010packetSendEj>:
     948:	cf 93       	push	r28
     94a:	df 93       	push	r29
     94c:	ec 01       	movw	r28, r24
     94e:	40 e8       	ldi	r20, 0x80	; 128
     950:	6f e1       	ldi	r22, 0x1F	; 31
     952:	80 e8       	ldi	r24, 0x80	; 128
     954:	83 de       	rcall	.-762    	; 0x65c <_ZL7writeOphhh>
     956:	40 e8       	ldi	r20, 0x80	; 128
     958:	6f e1       	ldi	r22, 0x1F	; 31
     95a:	80 ea       	ldi	r24, 0xA0	; 160
     95c:	7f de       	rcall	.-770    	; 0x65c <_ZL7writeOphhh>
     95e:	4a e0       	ldi	r20, 0x0A	; 10
     960:	6c e1       	ldi	r22, 0x1C	; 28
     962:	80 ea       	ldi	r24, 0xA0	; 160
     964:	7b de       	rcall	.-778    	; 0x65c <_ZL7writeOphhh>
     966:	60 e0       	ldi	r22, 0x00	; 0
     968:	7c e0       	ldi	r23, 0x0C	; 12
     96a:	82 e0       	ldi	r24, 0x02	; 2
     96c:	1a df       	rcall	.-460    	; 0x7a2 <_ZL8writeReghj>
     96e:	be 01       	movw	r22, r28
     970:	74 5f       	subi	r23, 0xF4	; 244
     972:	86 e0       	ldi	r24, 0x06	; 6
     974:	16 df       	rcall	.-468    	; 0x7a2 <_ZL8writeReghj>
     976:	40 e0       	ldi	r20, 0x00	; 0
     978:	60 e0       	ldi	r22, 0x00	; 0
     97a:	8a e7       	ldi	r24, 0x7A	; 122
     97c:	6f de       	rcall	.-802    	; 0x65c <_ZL7writeOphhh>
     97e:	66 ec       	ldi	r22, 0xC6	; 198
     980:	72 e0       	ldi	r23, 0x02	; 2
     982:	ce 01       	movw	r24, r28
     984:	a4 de       	rcall	.-696    	; 0x6ce <_ZL8writeBufjPKh>
     986:	48 e0       	ldi	r20, 0x08	; 8
     988:	6f e1       	ldi	r22, 0x1F	; 31
     98a:	80 e8       	ldi	r24, 0x80	; 128
     98c:	67 de       	rcall	.-818    	; 0x65c <_ZL7writeOphhh>
     98e:	c0 e0       	ldi	r28, 0x00	; 0
     990:	d0 e0       	ldi	r29, 0x00	; 0
     992:	8c e1       	ldi	r24, 0x1C	; 28
     994:	e8 de       	rcall	.-560    	; 0x766 <_ZL11readRegByteh>
     996:	8a 70       	andi	r24, 0x0A	; 10
     998:	31 f4       	brne	.+12     	; 0x9a6 <_ZN8ENC28J6010packetSendEj+0x5e>
     99a:	21 96       	adiw	r28, 0x01	; 1
     99c:	c8 3e       	cpi	r28, 0xE8	; 232
     99e:	83 e0       	ldi	r24, 0x03	; 3
     9a0:	d8 07       	cpc	r29, r24
     9a2:	b9 f7       	brne	.-18     	; 0x992 <_ZN8ENC28J6010packetSendEj+0x4a>
     9a4:	0c c0       	rjmp	.+24     	; 0x9be <_ZN8ENC28J6010packetSendEj+0x76>
     9a6:	8c e1       	ldi	r24, 0x1C	; 28
     9a8:	de de       	rcall	.-580    	; 0x766 <_ZL11readRegByteh>
     9aa:	81 fd       	sbrc	r24, 1
     9ac:	03 c0       	rjmp	.+6      	; 0x9b4 <_ZN8ENC28J6010packetSendEj+0x6c>
     9ae:	c8 3e       	cpi	r28, 0xE8	; 232
     9b0:	d3 40       	sbci	r29, 0x03	; 3
     9b2:	40 f0       	brcs	.+16     	; 0x9c4 <_ZN8ENC28J6010packetSendEj+0x7c>
     9b4:	48 e0       	ldi	r20, 0x08	; 8
     9b6:	6f e1       	ldi	r22, 0x1F	; 31
     9b8:	80 ea       	ldi	r24, 0xA0	; 160
     9ba:	50 de       	rcall	.-864    	; 0x65c <_ZL7writeOphhh>
     9bc:	03 c0       	rjmp	.+6      	; 0x9c4 <_ZN8ENC28J6010packetSendEj+0x7c>
     9be:	8c e1       	ldi	r24, 0x1C	; 28
     9c0:	d2 de       	rcall	.-604    	; 0x766 <_ZL11readRegByteh>
     9c2:	f8 cf       	rjmp	.-16     	; 0x9b4 <_ZN8ENC28J6010packetSendEj+0x6c>
     9c4:	df 91       	pop	r29
     9c6:	cf 91       	pop	r28
     9c8:	08 95       	ret

000009ca <_ZN8ENC28J6013packetReceiveEv>:
     9ca:	0f 93       	push	r16
     9cc:	1f 93       	push	r17
     9ce:	cf 93       	push	r28
     9d0:	df 93       	push	r29
     9d2:	00 d0       	rcall	.+0      	; 0x9d4 <_ZN8ENC28J6013packetReceiveEv+0xa>
     9d4:	00 d0       	rcall	.+0      	; 0x9d6 <_ZN8ENC28J6013packetReceiveEv+0xc>
     9d6:	cd b7       	in	r28, 0x3d	; 61
     9d8:	de b7       	in	r29, 0x3e	; 62
     9da:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <_ZZN8ENC28J6013packetReceiveEvE16unreleasedPacket>
     9de:	88 23       	and	r24, r24
     9e0:	91 f0       	breq	.+36     	; 0xa06 <_ZN8ENC28J6013packetReceiveEv+0x3c>
     9e2:	60 91 bc 02 	lds	r22, 0x02BC	; 0x8002bc <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr>
     9e6:	70 91 bd 02 	lds	r23, 0x02BD	; 0x8002bd <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr+0x1>
     9ea:	61 15       	cp	r22, r1
     9ec:	71 05       	cpc	r23, r1
     9ee:	29 f4       	brne	.+10     	; 0x9fa <_ZN8ENC28J6013packetReceiveEv+0x30>
     9f0:	6f ef       	ldi	r22, 0xFF	; 255
     9f2:	7b e0       	ldi	r23, 0x0B	; 11
     9f4:	8c e0       	ldi	r24, 0x0C	; 12
     9f6:	d5 de       	rcall	.-598    	; 0x7a2 <_ZL8writeReghj>
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <_ZN8ENC28J6013packetReceiveEv+0x38>
     9fa:	61 50       	subi	r22, 0x01	; 1
     9fc:	71 09       	sbc	r23, r1
     9fe:	8c e0       	ldi	r24, 0x0C	; 12
     a00:	d0 de       	rcall	.-608    	; 0x7a2 <_ZL8writeReghj>
     a02:	10 92 be 02 	sts	0x02BE, r1	; 0x8002be <_ZZN8ENC28J6013packetReceiveEvE16unreleasedPacket>
     a06:	89 e3       	ldi	r24, 0x39	; 57
     a08:	ae de       	rcall	.-676    	; 0x766 <_ZL11readRegByteh>
     a0a:	88 23       	and	r24, r24
     a0c:	a9 f1       	breq	.+106    	; 0xa78 <_ZN8ENC28J6013packetReceiveEv+0xae>
     a0e:	60 91 bc 02 	lds	r22, 0x02BC	; 0x8002bc <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr>
     a12:	70 91 bd 02 	lds	r23, 0x02BD	; 0x8002bd <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr+0x1>
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	c4 de       	rcall	.-632    	; 0x7a2 <_ZL8writeReghj>
     a1a:	be 01       	movw	r22, r28
     a1c:	6f 5f       	subi	r22, 0xFF	; 255
     a1e:	7f 4f       	sbci	r23, 0xFF	; 255
     a20:	86 e0       	ldi	r24, 0x06	; 6
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	2d de       	rcall	.-934    	; 0x680 <_ZL7readBufjPh>
     a26:	89 81       	ldd	r24, Y+1	; 0x01
     a28:	9a 81       	ldd	r25, Y+2	; 0x02
     a2a:	90 93 bd 02 	sts	0x02BD, r25	; 0x8002bd <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr+0x1>
     a2e:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr>
     a32:	8d 81       	ldd	r24, Y+5	; 0x05
     a34:	87 ff       	sbrs	r24, 7
     a36:	12 c0       	rjmp	.+36     	; 0xa5c <_ZN8ENC28J6013packetReceiveEv+0x92>
     a38:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <_ZN8ENC28J6010bufferSizeE>
     a3c:	90 91 c5 02 	lds	r25, 0x02C5	; 0x8002c5 <_ZN8ENC28J6010bufferSizeE+0x1>
     a40:	01 97       	sbiw	r24, 0x01	; 1
     a42:	0b 81       	ldd	r16, Y+3	; 0x03
     a44:	1c 81       	ldd	r17, Y+4	; 0x04
     a46:	04 50       	subi	r16, 0x04	; 4
     a48:	11 09       	sbc	r17, r1
     a4a:	80 17       	cp	r24, r16
     a4c:	91 07       	cpc	r25, r17
     a4e:	08 f4       	brcc	.+2      	; 0xa52 <_ZN8ENC28J6013packetReceiveEv+0x88>
     a50:	8c 01       	movw	r16, r24
     a52:	66 ec       	ldi	r22, 0xC6	; 198
     a54:	72 e0       	ldi	r23, 0x02	; 2
     a56:	c8 01       	movw	r24, r16
     a58:	13 de       	rcall	.-986    	; 0x680 <_ZL7readBufjPh>
     a5a:	02 c0       	rjmp	.+4      	; 0xa60 <_ZN8ENC28J6013packetReceiveEv+0x96>
     a5c:	00 e0       	ldi	r16, 0x00	; 0
     a5e:	10 e0       	ldi	r17, 0x00	; 0
     a60:	f8 01       	movw	r30, r16
     a62:	ea 53       	subi	r30, 0x3A	; 58
     a64:	fd 4f       	sbci	r31, 0xFD	; 253
     a66:	10 82       	st	Z, r1
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	80 93 be 02 	sts	0x02BE, r24	; 0x8002be <_ZZN8ENC28J6013packetReceiveEvE16unreleasedPacket>
     a6e:	40 e4       	ldi	r20, 0x40	; 64
     a70:	6e e1       	ldi	r22, 0x1E	; 30
     a72:	80 e8       	ldi	r24, 0x80	; 128
     a74:	f3 dd       	rcall	.-1050   	; 0x65c <_ZL7writeOphhh>
     a76:	02 c0       	rjmp	.+4      	; 0xa7c <_ZN8ENC28J6013packetReceiveEv+0xb2>
     a78:	00 e0       	ldi	r16, 0x00	; 0
     a7a:	10 e0       	ldi	r17, 0x00	; 0
     a7c:	c8 01       	movw	r24, r16
     a7e:	26 96       	adiw	r28, 0x06	; 6
     a80:	0f b6       	in	r0, 0x3f	; 63
     a82:	f8 94       	cli
     a84:	de bf       	out	0x3e, r29	; 62
     a86:	0f be       	out	0x3f, r0	; 63
     a88:	cd bf       	out	0x3d, r28	; 61
     a8a:	df 91       	pop	r29
     a8c:	cf 91       	pop	r28
     a8e:	1f 91       	pop	r17
     a90:	0f 91       	pop	r16
     a92:	08 95       	ret

00000a94 <_ZN8ENC28J6015enableBroadcastEb>:
}

void ENC28J60::enableBroadcast (bool temporary) {
     a94:	cf 93       	push	r28
     a96:	c8 2f       	mov	r28, r24
    writeRegByte(ERXFCON, readRegByte(ERXFCON) | ERXFCON_BCEN);
     a98:	88 e3       	ldi	r24, 0x38	; 56
     a9a:	65 de       	rcall	.-822    	; 0x766 <_ZL11readRegByteh>
     a9c:	68 2f       	mov	r22, r24
     a9e:	61 60       	ori	r22, 0x01	; 1
     aa0:	88 e3       	ldi	r24, 0x38	; 56
     aa2:	73 de       	rcall	.-794    	; 0x78a <_ZL12writeRegBytehh>
    if(!temporary)
     aa4:	c1 11       	cpse	r28, r1
     aa6:	03 c0       	rjmp	.+6      	; 0xaae <_ZN8ENC28J6015enableBroadcastEb+0x1a>
        broadcast_enabled = true;
     aa8:	81 e0       	ldi	r24, 0x01	; 1
     aaa:	80 93 c3 02 	sts	0x02C3, r24	; 0x8002c3 <_ZN8ENC28J6017broadcast_enabledE>
}
     aae:	cf 91       	pop	r28
     ab0:	08 95       	ret

00000ab2 <_ZN8ENC28J6016disableBroadcastEb>:

void ENC28J60::disableBroadcast (bool temporary) {
    if(!temporary)
     ab2:	81 11       	cpse	r24, r1
     ab4:	03 c0       	rjmp	.+6      	; 0xabc <_ZN8ENC28J6016disableBroadcastEb+0xa>
        broadcast_enabled = false;
     ab6:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <_ZN8ENC28J6017broadcast_enabledE>
     aba:	04 c0       	rjmp	.+8      	; 0xac4 <_ZN8ENC28J6016disableBroadcastEb+0x12>
    if(!broadcast_enabled)
     abc:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <_ZN8ENC28J6017broadcast_enabledE>
     ac0:	81 11       	cpse	r24, r1
     ac2:	06 c0       	rjmp	.+12     	; 0xad0 <_ZN8ENC28J6016disableBroadcastEb+0x1e>
        writeRegByte(ERXFCON, readRegByte(ERXFCON) & ~ERXFCON_BCEN);
     ac4:	88 e3       	ldi	r24, 0x38	; 56
     ac6:	4f de       	rcall	.-866    	; 0x766 <_ZL11readRegByteh>
     ac8:	68 2f       	mov	r22, r24
     aca:	6e 7f       	andi	r22, 0xFE	; 254
     acc:	88 e3       	ldi	r24, 0x38	; 56
     ace:	5d ce       	rjmp	.-838    	; 0x78a <_ZL12writeRegBytehh>
     ad0:	08 95       	ret

00000ad2 <_ZN9EtherCard5beginEPKhRVhS3_h>:
uint16_t EtherCard::delaycnt = 0; //request gateway ARP lookup

uint8_t Ethernet::buffer[ETHER_CARD_BUFFER_SIZE]; // tcp/ip send and receive buffer

uint8_t EtherCard::begin (const uint8_t* macaddr,
                          Register& csDDR, Register& csPort, uint8_t csPin) {
     ad2:	cf 92       	push	r12
     ad4:	df 92       	push	r13
     ad6:	ef 92       	push	r14
     ad8:	ff 92       	push	r15
     ada:	0f 93       	push	r16
     adc:	cf 93       	push	r28
     ade:	df 93       	push	r29
     ae0:	6c 01       	movw	r12, r24
     ae2:	eb 01       	movw	r28, r22
     ae4:	7a 01       	movw	r14, r20
     ae6:	02 2f       	mov	r16, r18
    using_dhcp = false;
     ae8:	10 92 c9 04 	sts	0x04C9, r1	; 0x8004c9 <_ZN9EtherCard10using_dhcpE>
#if ETHERCARD_STASH
    Stash::initMap();
     aec:	88 e3       	ldi	r24, 0x38	; 56
     aee:	5e d0       	rcall	.+188    	; 0xbac <_ZN5Stash7initMapEh>
#endif
    copyMac(mymac, macaddr);
     af0:	b6 01       	movw	r22, r12
     af2:	86 ee       	ldi	r24, 0xE6	; 230
     af4:	94 e0       	ldi	r25, 0x04	; 4
     af6:	7d d6       	rcall	.+3322   	; 0x17f2 <_ZN9EtherCard7copyMacEPhPKh>
    return initialize(ETHER_CARD_BUFFER_SIZE, mymac, csDDR, csPort, csPin);
     af8:	97 01       	movw	r18, r14
     afa:	ae 01       	movw	r20, r28
     afc:	66 ee       	ldi	r22, 0xE6	; 230
     afe:	74 e0       	ldi	r23, 0x04	; 4
     b00:	80 e0       	ldi	r24, 0x00	; 0
     b02:	92 e0       	ldi	r25, 0x02	; 2
     b04:	78 de       	rcall	.-784    	; 0x7f6 <_ZN8ENC28J6010initializeEjPKhRVhS3_h>
}
     b06:	df 91       	pop	r29
     b08:	cf 91       	pop	r28
     b0a:	0f 91       	pop	r16
     b0c:	ff 90       	pop	r15
     b0e:	ef 90       	pop	r14
     b10:	df 90       	pop	r13
     b12:	cf 90       	pop	r12
     b14:	08 95       	ret

00000b16 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_>:

bool EtherCard::staticSetup (const uint8_t* my_ip,
                             const uint8_t* gw_ip,
                             const uint8_t* dns_ip,
                             const uint8_t* mask) {
     b16:	ef 92       	push	r14
     b18:	ff 92       	push	r15
     b1a:	0f 93       	push	r16
     b1c:	1f 93       	push	r17
     b1e:	cf 93       	push	r28
     b20:	df 93       	push	r29
     b22:	7b 01       	movw	r14, r22
     b24:	8a 01       	movw	r16, r20
     b26:	e9 01       	movw	r28, r18
    using_dhcp = false;
     b28:	10 92 c9 04 	sts	0x04C9, r1	; 0x8004c9 <_ZN9EtherCard10using_dhcpE>

    if (my_ip != 0)
     b2c:	00 97       	sbiw	r24, 0x00	; 0
     b2e:	21 f0       	breq	.+8      	; 0xb38 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x22>
        copyIp(myip, my_ip);
     b30:	bc 01       	movw	r22, r24
     b32:	82 ee       	ldi	r24, 0xE2	; 226
     b34:	94 e0       	ldi	r25, 0x04	; 4
     b36:	50 d6       	rcall	.+3232   	; 0x17d8 <_ZN9EtherCard6copyIpEPhPKh>
    if (gw_ip != 0)
     b38:	e1 14       	cp	r14, r1
     b3a:	f1 04       	cpc	r15, r1
     b3c:	11 f0       	breq	.+4      	; 0xb42 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x2c>
        setGwIp(gw_ip);
     b3e:	c7 01       	movw	r24, r14
     b40:	60 d2       	rcall	.+1216   	; 0x1002 <_ZN9EtherCard7setGwIpEPKh>
    if (dns_ip != 0)
     b42:	01 15       	cp	r16, r1
     b44:	11 05       	cpc	r17, r1
     b46:	21 f0       	breq	.+8      	; 0xb50 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x3a>
        copyIp(dnsip, dns_ip);
     b48:	b8 01       	movw	r22, r16
     b4a:	8e ec       	ldi	r24, 0xCE	; 206
     b4c:	94 e0       	ldi	r25, 0x04	; 4
     b4e:	44 d6       	rcall	.+3208   	; 0x17d8 <_ZN9EtherCard6copyIpEPhPKh>
    if(mask != 0)
     b50:	20 97       	sbiw	r28, 0x00	; 0
     b52:	21 f0       	breq	.+8      	; 0xb5c <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x46>
        copyIp(netmask, mask);
     b54:	be 01       	movw	r22, r28
     b56:	8e ed       	ldi	r24, 0xDE	; 222
     b58:	94 e0       	ldi	r25, 0x04	; 4
    updateBroadcastAddress();
     b5a:	3e d6       	rcall	.+3196   	; 0x17d8 <_ZN9EtherCard6copyIpEPhPKh>
     b5c:	5e d2       	rcall	.+1212   	; 0x101a <_ZN9EtherCard22updateBroadcastAddressEv>
    delaycnt = 0; //request gateway ARP lookup
     b5e:	10 92 c7 04 	sts	0x04C7, r1	; 0x8004c7 <_ZN9EtherCard8delaycntE+0x1>
     b62:	10 92 c6 04 	sts	0x04C6, r1	; 0x8004c6 <_ZN9EtherCard8delaycntE>
    return true;
}
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	df 91       	pop	r29
     b6a:	cf 91       	pop	r28
     b6c:	1f 91       	pop	r17
     b6e:	0f 91       	pop	r16
     b70:	ff 90       	pop	r15
     b72:	ef 90       	pop	r14
     b74:	08 95       	ret

00000b76 <_ZN5Stash9freeBlockEh>:

uint8_t Stash::fetchByte (uint8_t blk, uint8_t off) {
    return blk == bufs[WRITEBUF].bnum ? bufs[WRITEBUF].bytes[off] :
           blk == bufs[READBUF].bnum ? bufs[READBUF].bytes[off] :
           ether.peekin(blk, off);
}
     b76:	e8 2f       	mov	r30, r24
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	f5 95       	asr	r31
     b7c:	e7 95       	ror	r30
     b7e:	f5 95       	asr	r31
     b80:	e7 95       	ror	r30
     b82:	f5 95       	asr	r31
     b84:	e7 95       	ror	r30
     b86:	e4 51       	subi	r30, 0x14	; 20
     b88:	fb 4f       	sbci	r31, 0xFB	; 251
     b8a:	28 2f       	mov	r18, r24
     b8c:	27 70       	andi	r18, 0x07	; 7
     b8e:	81 e0       	ldi	r24, 0x01	; 1
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	a0 e0       	ldi	r26, 0x00	; 0
     b94:	b0 e0       	ldi	r27, 0x00	; 0
     b96:	04 c0       	rjmp	.+8      	; 0xba0 <_ZN5Stash9freeBlockEh+0x2a>
     b98:	88 0f       	add	r24, r24
     b9a:	99 1f       	adc	r25, r25
     b9c:	aa 1f       	adc	r26, r26
     b9e:	bb 1f       	adc	r27, r27
     ba0:	2a 95       	dec	r18
     ba2:	d2 f7       	brpl	.-12     	; 0xb98 <_ZN5Stash9freeBlockEh+0x22>
     ba4:	20 81       	ld	r18, Z
     ba6:	82 2b       	or	r24, r18
     ba8:	80 83       	st	Z, r24
     baa:	08 95       	ret

00000bac <_ZN5Stash7initMapEh>:


// block 0 is special since always occupied
void Stash::initMap (uint8_t last /*=SCRATCH_PAGE_NUM*/) {
     bac:	cf 93       	push	r28
     bae:	c7 e3       	ldi	r28, 0x37	; 55
    last = SCRATCH_PAGE_NUM;
    while (--last > 0)
        freeBlock(last);
     bb0:	8c 2f       	mov	r24, r28
     bb2:	e1 df       	rcall	.-62     	; 0xb76 <_ZN5Stash9freeBlockEh>


// block 0 is special since always occupied
void Stash::initMap (uint8_t last /*=SCRATCH_PAGE_NUM*/) {
    last = SCRATCH_PAGE_NUM;
    while (--last > 0)
     bb4:	c1 50       	subi	r28, 0x01	; 1
     bb6:	e1 f7       	brne	.-8      	; 0xbb0 <_ZN5Stash7initMapEh+0x4>
        freeBlock(last);
}
     bb8:	cf 91       	pop	r28
     bba:	08 95       	ret

00000bbc <_ZL13fill_checksumhhjh>:
uint8_t EtherCard::packetLoopIcmpCheckReply (const uint8_t *ip_monitoredhost) {
    return gPB[IP_PROTO_P]==IP_PROTO_ICMP_V &&
           gPB[ICMP_TYPE_P]==ICMP_TYPE_ECHOREPLY_V &&
           gPB[ICMP_DATA_P]== PINGPATTERN &&
           check_ip_message_is_from(ip_monitoredhost);
}
     bbc:	cf 92       	push	r12
     bbe:	df 92       	push	r13
     bc0:	ef 92       	push	r14
     bc2:	ff 92       	push	r15
     bc4:	cf 93       	push	r28
     bc6:	df 93       	push	r29
     bc8:	c6 2f       	mov	r28, r22
     bca:	d0 e0       	ldi	r29, 0x00	; 0
     bcc:	ca 53       	subi	r28, 0x3A	; 58
     bce:	dd 4f       	sbci	r29, 0xFD	; 253
     bd0:	21 30       	cpi	r18, 0x01	; 1
     bd2:	81 f4       	brne	.+32     	; 0xbf4 <_ZL13fill_checksumhhjh+0x38>
     bd4:	6a 01       	movw	r12, r20
     bd6:	99 e0       	ldi	r25, 0x09	; 9
     bd8:	c9 0e       	add	r12, r25
     bda:	d1 1c       	adc	r13, r1
     bdc:	e1 2c       	mov	r14, r1
     bde:	f1 2c       	mov	r15, r1
     be0:	03 c0       	rjmp	.+6      	; 0xbe8 <_ZL13fill_checksumhhjh+0x2c>
     be2:	c1 2c       	mov	r12, r1
     be4:	d1 2c       	mov	r13, r1
     be6:	76 01       	movw	r14, r12
     be8:	42 30       	cpi	r20, 0x02	; 2
     bea:	51 05       	cpc	r21, r1
     bec:	28 f1       	brcs	.+74     	; 0xc38 <_ZL13fill_checksumhhjh+0x7c>
     bee:	fe 01       	movw	r30, r28
     bf0:	da 01       	movw	r26, r20
     bf2:	09 c0       	rjmp	.+18     	; 0xc06 <_ZL13fill_checksumhhjh+0x4a>
     bf4:	22 30       	cpi	r18, 0x02	; 2
     bf6:	a9 f7       	brne	.-22     	; 0xbe2 <_ZL13fill_checksumhhjh+0x26>
     bf8:	6a 01       	movw	r12, r20
     bfa:	92 e0       	ldi	r25, 0x02	; 2
     bfc:	c9 1a       	sub	r12, r25
     bfe:	d1 08       	sbc	r13, r1
     c00:	e1 2c       	mov	r14, r1
     c02:	f1 2c       	mov	r15, r1
     c04:	f1 cf       	rjmp	.-30     	; 0xbe8 <_ZL13fill_checksumhhjh+0x2c>
     c06:	20 81       	ld	r18, Z
     c08:	30 e0       	ldi	r19, 0x00	; 0
     c0a:	32 2f       	mov	r19, r18
     c0c:	22 27       	eor	r18, r18
     c0e:	91 81       	ldd	r25, Z+1	; 0x01
     c10:	29 2b       	or	r18, r25
     c12:	c2 0e       	add	r12, r18
     c14:	d3 1e       	adc	r13, r19
     c16:	e1 1c       	adc	r14, r1
     c18:	f1 1c       	adc	r15, r1
     c1a:	32 96       	adiw	r30, 0x02	; 2
     c1c:	12 97       	sbiw	r26, 0x02	; 2
     c1e:	a2 30       	cpi	r26, 0x02	; 2
     c20:	b1 05       	cpc	r27, r1
     c22:	88 f7       	brcc	.-30     	; 0xc06 <_ZL13fill_checksumhhjh+0x4a>
     c24:	9a 01       	movw	r18, r20
     c26:	22 50       	subi	r18, 0x02	; 2
     c28:	31 09       	sbc	r19, r1
     c2a:	2e 7f       	andi	r18, 0xFE	; 254
     c2c:	2e 5f       	subi	r18, 0xFE	; 254
     c2e:	3f 4f       	sbci	r19, 0xFF	; 255
     c30:	c2 0f       	add	r28, r18
     c32:	d3 1f       	adc	r29, r19
     c34:	41 70       	andi	r20, 0x01	; 1
     c36:	55 27       	eor	r21, r21
     c38:	45 2b       	or	r20, r21
     c3a:	61 f0       	breq	.+24     	; 0xc54 <_ZL13fill_checksumhhjh+0x98>
     c3c:	48 81       	ld	r20, Y
     c3e:	50 e0       	ldi	r21, 0x00	; 0
     c40:	60 e0       	ldi	r22, 0x00	; 0
     c42:	70 e0       	ldi	r23, 0x00	; 0
     c44:	76 2f       	mov	r23, r22
     c46:	65 2f       	mov	r22, r21
     c48:	54 2f       	mov	r21, r20
     c4a:	44 27       	eor	r20, r20
     c4c:	c4 0e       	add	r12, r20
     c4e:	d5 1e       	adc	r13, r21
     c50:	e6 1e       	adc	r14, r22
     c52:	f7 1e       	adc	r15, r23
     c54:	a7 01       	movw	r20, r14
     c56:	66 27       	eor	r22, r22
     c58:	77 27       	eor	r23, r23
     c5a:	41 15       	cp	r20, r1
     c5c:	51 05       	cpc	r21, r1
     c5e:	61 05       	cpc	r22, r1
     c60:	71 05       	cpc	r23, r1
     c62:	71 f0       	breq	.+28     	; 0xc80 <_ZL13fill_checksumhhjh+0xc4>
     c64:	ee 24       	eor	r14, r14
     c66:	ff 24       	eor	r15, r15
     c68:	c4 0e       	add	r12, r20
     c6a:	d5 1e       	adc	r13, r21
     c6c:	e6 1e       	adc	r14, r22
     c6e:	f7 1e       	adc	r15, r23
     c70:	a7 01       	movw	r20, r14
     c72:	66 27       	eor	r22, r22
     c74:	77 27       	eor	r23, r23
     c76:	41 15       	cp	r20, r1
     c78:	51 05       	cpc	r21, r1
     c7a:	61 05       	cpc	r22, r1
     c7c:	71 05       	cpc	r23, r1
     c7e:	91 f7       	brne	.-28     	; 0xc64 <_ZL13fill_checksumhhjh+0xa8>
     c80:	c0 94       	com	r12
     c82:	d0 94       	com	r13
     c84:	e8 2f       	mov	r30, r24
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	ea 53       	subi	r30, 0x3A	; 58
     c8a:	fd 4f       	sbci	r31, 0xFD	; 253
     c8c:	d0 82       	st	Z, r13
     c8e:	c1 82       	std	Z+1, r12	; 0x01
     c90:	df 91       	pop	r29
     c92:	cf 91       	pop	r28
     c94:	ff 90       	pop	r15
     c96:	ef 90       	pop	r14
     c98:	df 90       	pop	r13
     c9a:	cf 90       	pop	r12
     c9c:	08 95       	ret

00000c9e <_ZL6is_lanPKhS0_>:
     c9e:	cf 93       	push	r28
     ca0:	df 93       	push	r29
     ca2:	fc 01       	movw	r30, r24
     ca4:	20 81       	ld	r18, Z
     ca6:	22 23       	and	r18, r18
     ca8:	d1 f0       	breq	.+52     	; 0xcde <_ZL6is_lanPKhS0_+0x40>
     caa:	fb 01       	movw	r30, r22
     cac:	30 81       	ld	r19, Z
     cae:	33 23       	and	r19, r19
     cb0:	c1 f0       	breq	.+48     	; 0xce2 <_ZL6is_lanPKhS0_+0x44>
     cb2:	23 27       	eor	r18, r19
     cb4:	30 91 de 04 	lds	r19, 0x04DE	; 0x8004de <_ZN9EtherCard7netmaskE>
     cb8:	23 23       	and	r18, r19
     cba:	a9 f4       	brne	.+42     	; 0xce6 <_ZL6is_lanPKhS0_+0x48>
     cbc:	dc 01       	movw	r26, r24
     cbe:	11 96       	adiw	r26, 0x01	; 1
     cc0:	31 96       	adiw	r30, 0x01	; 1
     cc2:	cf ed       	ldi	r28, 0xDF	; 223
     cc4:	d4 e0       	ldi	r29, 0x04	; 4
     cc6:	04 96       	adiw	r24, 0x04	; 4
     cc8:	4d 91       	ld	r20, X+
     cca:	21 91       	ld	r18, Z+
     ccc:	39 91       	ld	r19, Y+
     cce:	24 27       	eor	r18, r20
     cd0:	23 23       	and	r18, r19
     cd2:	59 f4       	brne	.+22     	; 0xcea <_ZL6is_lanPKhS0_+0x4c>
     cd4:	a8 17       	cp	r26, r24
     cd6:	b9 07       	cpc	r27, r25
     cd8:	b9 f7       	brne	.-18     	; 0xcc8 <_ZL6is_lanPKhS0_+0x2a>
     cda:	81 e0       	ldi	r24, 0x01	; 1
     cdc:	07 c0       	rjmp	.+14     	; 0xcec <_ZL6is_lanPKhS0_+0x4e>
     cde:	80 e0       	ldi	r24, 0x00	; 0
     ce0:	05 c0       	rjmp	.+10     	; 0xcec <_ZL6is_lanPKhS0_+0x4e>
     ce2:	80 e0       	ldi	r24, 0x00	; 0
     ce4:	03 c0       	rjmp	.+6      	; 0xcec <_ZL6is_lanPKhS0_+0x4e>
     ce6:	80 e0       	ldi	r24, 0x00	; 0
     ce8:	01 c0       	rjmp	.+2      	; 0xcec <_ZL6is_lanPKhS0_+0x4e>
     cea:	80 e0       	ldi	r24, 0x00	; 0
     cec:	df 91       	pop	r29
     cee:	cf 91       	pop	r28
     cf0:	08 95       	ret

00000cf2 <_ZL20fill_ip_hdr_checksumv>:
     cf2:	e6 ec       	ldi	r30, 0xC6	; 198
     cf4:	f2 e0       	ldi	r31, 0x02	; 2
     cf6:	10 8e       	std	Z+24, r1	; 0x18
     cf8:	11 8e       	std	Z+25, r1	; 0x19
     cfa:	80 e4       	ldi	r24, 0x40	; 64
     cfc:	84 8b       	std	Z+20, r24	; 0x14
     cfe:	15 8a       	std	Z+21, r1	; 0x15
     d00:	86 8b       	std	Z+22, r24	; 0x16
     d02:	20 e0       	ldi	r18, 0x00	; 0
     d04:	44 e1       	ldi	r20, 0x14	; 20
     d06:	50 e0       	ldi	r21, 0x00	; 0
     d08:	6e e0       	ldi	r22, 0x0E	; 14
     d0a:	88 e1       	ldi	r24, 0x18	; 24
     d0c:	57 cf       	rjmp	.-338    	; 0xbbc <_ZL13fill_checksumhhjh>
     d0e:	08 95       	ret

00000d10 <_ZL12make_tcpheadjh>:
     d10:	e6 ec       	ldi	r30, 0xC6	; 198
     d12:	f2 e0       	ldi	r31, 0x02	; 2
     d14:	24 a1       	ldd	r18, Z+36	; 0x24
     d16:	32 a1       	ldd	r19, Z+34	; 0x22
     d18:	34 a3       	std	Z+36, r19	; 0x24
     d1a:	22 a3       	std	Z+34, r18	; 0x22
     d1c:	25 a1       	ldd	r18, Z+37	; 0x25
     d1e:	33 a1       	ldd	r19, Z+35	; 0x23
     d20:	35 a3       	std	Z+37, r19	; 0x25
     d22:	23 a3       	std	Z+35, r18	; 0x23
     d24:	e0 ef       	ldi	r30, 0xF0	; 240
     d26:	f2 e0       	ldi	r31, 0x02	; 2
     d28:	4c ee       	ldi	r20, 0xEC	; 236
     d2a:	52 e0       	ldi	r21, 0x02	; 2
     d2c:	22 91       	ld	r18, -Z
     d2e:	82 0f       	add	r24, r18
     d30:	91 1d       	adc	r25, r1
     d32:	24 81       	ldd	r18, Z+4	; 0x04
     d34:	84 83       	std	Z+4, r24	; 0x04
     d36:	66 23       	and	r22, r22
     d38:	11 f0       	breq	.+4      	; 0xd3e <_ZL12make_tcpheadjh+0x2e>
     d3a:	20 83       	st	Z, r18
     d3c:	01 c0       	rjmp	.+2      	; 0xd40 <_ZL12make_tcpheadjh+0x30>
     d3e:	10 82       	st	Z, r1
     d40:	89 2f       	mov	r24, r25
     d42:	99 27       	eor	r25, r25
     d44:	e4 17       	cp	r30, r20
     d46:	f5 07       	cpc	r31, r21
     d48:	89 f7       	brne	.-30     	; 0xd2c <_ZL12make_tcpheadjh+0x1c>
     d4a:	e6 ec       	ldi	r30, 0xC6	; 198
     d4c:	f2 e0       	ldi	r31, 0x02	; 2
     d4e:	12 aa       	std	Z+50, r1	; 0x32
     d50:	13 aa       	std	Z+51, r1	; 0x33
     d52:	80 e5       	ldi	r24, 0x50	; 80
     d54:	86 a7       	std	Z+46, r24	; 0x2e
     d56:	08 95       	ret

00000d58 <_ZL30make_tcp_ack_with_data_noflagsj>:
     d58:	0f 93       	push	r16
     d5a:	1f 93       	push	r17
     d5c:	cf 93       	push	r28
     d5e:	df 93       	push	r29
     d60:	8c 01       	movw	r16, r24
     d62:	88 96       	adiw	r24, 0x28	; 40
     d64:	c6 ec       	ldi	r28, 0xC6	; 198
     d66:	d2 e0       	ldi	r29, 0x02	; 2
     d68:	98 8b       	std	Y+16, r25	; 0x10
     d6a:	89 8b       	std	Y+17, r24	; 0x11
     d6c:	c2 df       	rcall	.-124    	; 0xcf2 <_ZL20fill_ip_hdr_checksumv>
     d6e:	1a aa       	std	Y+50, r1	; 0x32
     d70:	1b aa       	std	Y+51, r1	; 0x33
     d72:	a8 01       	movw	r20, r16
     d74:	44 5e       	subi	r20, 0xE4	; 228
     d76:	5f 4f       	sbci	r21, 0xFF	; 255
     d78:	22 e0       	ldi	r18, 0x02	; 2
     d7a:	6a e1       	ldi	r22, 0x1A	; 26
     d7c:	82 e3       	ldi	r24, 0x32	; 50
     d7e:	1e df       	rcall	.-452    	; 0xbbc <_ZL13fill_checksumhhjh>
     d80:	c8 01       	movw	r24, r16
     d82:	c6 96       	adiw	r24, 0x36	; 54
     d84:	e1 dd       	rcall	.-1086   	; 0x948 <_ZN8ENC28J6010packetSendEj>
     d86:	df 91       	pop	r29
     d88:	cf 91       	pop	r28
     d8a:	1f 91       	pop	r17
     d8c:	0f 91       	pop	r16
     d8e:	08 95       	ret

00000d90 <_ZL7setMACsPKh>:
     d90:	bc 01       	movw	r22, r24
     d92:	86 ec       	ldi	r24, 0xC6	; 198
     d94:	92 e0       	ldi	r25, 0x02	; 2
     d96:	2d d5       	rcall	.+2650   	; 0x17f2 <_ZN9EtherCard7copyMacEPhPKh>
     d98:	66 ee       	ldi	r22, 0xE6	; 230
     d9a:	74 e0       	ldi	r23, 0x04	; 4
     d9c:	8c ec       	ldi	r24, 0xCC	; 204
     d9e:	92 e0       	ldi	r25, 0x02	; 2
     da0:	28 c5       	rjmp	.+2640   	; 0x17f2 <_ZN9EtherCard7copyMacEPhPKh>
     da2:	08 95       	ret

00000da4 <_ZL11make_eth_ipv>:
     da4:	8c ec       	ldi	r24, 0xCC	; 204
     da6:	92 e0       	ldi	r25, 0x02	; 2
     da8:	f3 df       	rcall	.-26     	; 0xd90 <_ZL7setMACsPKh>
     daa:	60 ee       	ldi	r22, 0xE0	; 224
     dac:	72 e0       	ldi	r23, 0x02	; 2
     dae:	84 ee       	ldi	r24, 0xE4	; 228
     db0:	92 e0       	ldi	r25, 0x02	; 2
     db2:	12 d5       	rcall	.+2596   	; 0x17d8 <_ZN9EtherCard6copyIpEPhPKh>
     db4:	62 ee       	ldi	r22, 0xE2	; 226
     db6:	74 e0       	ldi	r23, 0x04	; 4
     db8:	80 ee       	ldi	r24, 0xE0	; 224
     dba:	92 e0       	ldi	r25, 0x02	; 2
     dbc:	0d d5       	rcall	.+2586   	; 0x17d8 <_ZN9EtherCard6copyIpEPhPKh>
     dbe:	99 cf       	rjmp	.-206    	; 0xcf2 <_ZL20fill_ip_hdr_checksumv>
     dc0:	08 95       	ret

00000dc2 <_ZL21make_tcp_ack_from_anyih>:
     dc2:	cf 93       	push	r28
     dc4:	df 93       	push	r29
     dc6:	26 2f       	mov	r18, r22
     dc8:	20 61       	ori	r18, 0x10	; 16
     dca:	20 93 f5 02 	sts	0x02F5, r18	; 0x8002f5 <_ZN8ENC28J606bufferE+0x2f>
     dce:	64 30       	cpi	r22, 0x04	; 4
     dd0:	21 f0       	breq	.+8      	; 0xdda <_ZL21make_tcp_ack_from_anyih+0x18>
     dd2:	00 97       	sbiw	r24, 0x00	; 0
     dd4:	11 f4       	brne	.+4      	; 0xdda <_ZL21make_tcp_ack_from_anyih+0x18>
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	61 e0       	ldi	r22, 0x01	; 1
     ddc:	99 df       	rcall	.-206    	; 0xd10 <_ZL12make_tcpheadjh>
     dde:	c6 ec       	ldi	r28, 0xC6	; 198
     de0:	d2 e0       	ldi	r29, 0x02	; 2
     de2:	18 8a       	std	Y+16, r1	; 0x10
     de4:	88 e2       	ldi	r24, 0x28	; 40
     de6:	89 8b       	std	Y+17, r24	; 0x11
     de8:	dd df       	rcall	.-70     	; 0xda4 <_ZL11make_eth_ipv>
     dea:	84 e0       	ldi	r24, 0x04	; 4
     dec:	88 ab       	std	Y+48, r24	; 0x30
     dee:	19 aa       	std	Y+49, r1	; 0x31
     df0:	22 e0       	ldi	r18, 0x02	; 2
     df2:	4c e1       	ldi	r20, 0x1C	; 28
     df4:	50 e0       	ldi	r21, 0x00	; 0
     df6:	6a e1       	ldi	r22, 0x1A	; 26
     df8:	82 e3       	ldi	r24, 0x32	; 50
     dfa:	e0 de       	rcall	.-576    	; 0xbbc <_ZL13fill_checksumhhjh>
     dfc:	86 e3       	ldi	r24, 0x36	; 54
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	a3 dd       	rcall	.-1210   	; 0x948 <_ZN8ENC28J6010packetSendEj>
     e02:	df 91       	pop	r29
     e04:	cf 91       	pop	r28
     e06:	08 95       	ret

00000e08 <_ZL12setMACandIPsPKhS0_>:
     e08:	cf 93       	push	r28
     e0a:	df 93       	push	r29
     e0c:	eb 01       	movw	r28, r22
     e0e:	c0 df       	rcall	.-128    	; 0xd90 <_ZL7setMACsPKh>
     e10:	be 01       	movw	r22, r28
     e12:	84 ee       	ldi	r24, 0xE4	; 228
     e14:	92 e0       	ldi	r25, 0x02	; 2
     e16:	e0 d4       	rcall	.+2496   	; 0x17d8 <_ZN9EtherCard6copyIpEPhPKh>
     e18:	62 ee       	ldi	r22, 0xE2	; 226
     e1a:	74 e0       	ldi	r23, 0x04	; 4
     e1c:	80 ee       	ldi	r24, 0xE0	; 224
     e1e:	92 e0       	ldi	r25, 0x02	; 2
     e20:	db d4       	rcall	.+2486   	; 0x17d8 <_ZN9EtherCard6copyIpEPhPKh>
     e22:	df 91       	pop	r29
     e24:	cf 91       	pop	r28
     e26:	08 95       	ret

00000e28 <_ZL17client_arp_whohasPh>:
     e28:	0f 93       	push	r16
     e2a:	1f 93       	push	r17
     e2c:	cf 93       	push	r28
     e2e:	8c 01       	movw	r16, r24
     e30:	88 e3       	ldi	r24, 0x38	; 56
     e32:	92 e0       	ldi	r25, 0x02	; 2
     e34:	ad df       	rcall	.-166    	; 0xd90 <_ZL7setMACsPKh>
     e36:	e6 ec       	ldi	r30, 0xC6	; 198
     e38:	f2 e0       	ldi	r31, 0x02	; 2
     e3a:	88 e0       	ldi	r24, 0x08	; 8
     e3c:	84 87       	std	Z+12, r24	; 0x0c
     e3e:	c6 e0       	ldi	r28, 0x06	; 6
     e40:	c5 87       	std	Z+13, r28	; 0x0d
     e42:	48 e0       	ldi	r20, 0x08	; 8
     e44:	50 e0       	ldi	r21, 0x00	; 0
     e46:	61 ef       	ldi	r22, 0xF1	; 241
     e48:	70 e0       	ldi	r23, 0x00	; 0
     e4a:	84 ed       	ldi	r24, 0xD4	; 212
     e4c:	92 e0       	ldi	r25, 0x02	; 2
     e4e:	0e 94 da 10 	call	0x21b4	; 0x21b4 <memcpy_P>
     e52:	e6 ee       	ldi	r30, 0xE6	; 230
     e54:	f2 e0       	ldi	r31, 0x02	; 2
     e56:	df 01       	movw	r26, r30
     e58:	1d 92       	st	X+, r1
     e5a:	ca 95       	dec	r28
     e5c:	e9 f7       	brne	.-6      	; 0xe58 <_ZL17client_arp_whohasPh+0x30>
     e5e:	66 ee       	ldi	r22, 0xE6	; 230
     e60:	74 e0       	ldi	r23, 0x04	; 4
     e62:	8c ed       	ldi	r24, 0xDC	; 220
     e64:	92 e0       	ldi	r25, 0x02	; 2
     e66:	c5 d4       	rcall	.+2442   	; 0x17f2 <_ZN9EtherCard7copyMacEPhPKh>
     e68:	b8 01       	movw	r22, r16
     e6a:	8c ee       	ldi	r24, 0xEC	; 236
     e6c:	92 e0       	ldi	r25, 0x02	; 2
     e6e:	b4 d4       	rcall	.+2408   	; 0x17d8 <_ZN9EtherCard6copyIpEPhPKh>
     e70:	62 ee       	ldi	r22, 0xE2	; 226
     e72:	74 e0       	ldi	r23, 0x04	; 4
     e74:	82 ee       	ldi	r24, 0xE2	; 226
     e76:	92 e0       	ldi	r25, 0x02	; 2
     e78:	af d4       	rcall	.+2398   	; 0x17d8 <_ZN9EtherCard6copyIpEPhPKh>
     e7a:	8a e2       	ldi	r24, 0x2A	; 42
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	64 dd       	rcall	.-1336   	; 0x948 <_ZN8ENC28J6010packetSendEj>
     e80:	cf 91       	pop	r28
     e82:	1f 91       	pop	r17
     e84:	0f 91       	pop	r16
     e86:	08 95       	ret

00000e88 <_ZL16client_store_macPhS_>:
     e88:	cf 93       	push	r28
     e8a:	df 93       	push	r29
     e8c:	eb 01       	movw	r28, r22
     e8e:	44 e0       	ldi	r20, 0x04	; 4
     e90:	50 e0       	ldi	r21, 0x00	; 0
     e92:	bc 01       	movw	r22, r24
     e94:	82 ee       	ldi	r24, 0xE2	; 226
     e96:	92 e0       	ldi	r25, 0x02	; 2
     e98:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <memcmp>
     e9c:	89 2b       	or	r24, r25
     e9e:	31 f4       	brne	.+12     	; 0xeac <_ZL16client_store_macPhS_+0x24>
     ea0:	6c ed       	ldi	r22, 0xDC	; 220
     ea2:	72 e0       	ldi	r23, 0x02	; 2
     ea4:	ce 01       	movw	r24, r28
     ea6:	a5 d4       	rcall	.+2378   	; 0x17f2 <_ZN9EtherCard7copyMacEPhPKh>
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	01 c0       	rjmp	.+2      	; 0xeae <_ZL16client_store_macPhS_+0x26>
     eac:	80 e0       	ldi	r24, 0x00	; 0
     eae:	df 91       	pop	r29
     eb0:	cf 91       	pop	r28
     eb2:	08 95       	ret

00000eb4 <_ZN9EtherCard19getTcpPayloadLengthEv>:
     eb4:	e6 ec       	ldi	r30, 0xC6	; 198
     eb6:	f2 e0       	ldi	r31, 0x02	; 2
     eb8:	80 89       	ldd	r24, Z+16	; 0x10
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	98 2f       	mov	r25, r24
     ebe:	88 27       	eor	r24, r24
     ec0:	21 89       	ldd	r18, Z+17	; 0x11
     ec2:	82 2b       	or	r24, r18
     ec4:	44 97       	sbiw	r24, 0x14	; 20
     ec6:	26 a5       	ldd	r18, Z+46	; 0x2e
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	35 95       	asr	r19
     ecc:	27 95       	ror	r18
     ece:	35 95       	asr	r19
     ed0:	27 95       	ror	r18
     ed2:	35 95       	asr	r19
     ed4:	27 95       	ror	r18
     ed6:	35 95       	asr	r19
     ed8:	27 95       	ror	r18
     eda:	22 0f       	add	r18, r18
     edc:	33 1f       	adc	r19, r19
     ede:	22 0f       	add	r18, r18
     ee0:	33 1f       	adc	r19, r19
     ee2:	82 1b       	sub	r24, r18
     ee4:	93 0b       	sbc	r25, r19
     ee6:	12 f4       	brpl	.+4      	; 0xeec <_ZN9EtherCard19getTcpPayloadLengthEv+0x38>
     ee8:	80 e0       	ldi	r24, 0x00	; 0
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	08 95       	ret

00000eee <_ZN9EtherCard10udpPrepareEjPKhj>:
     eee:	ef 92       	push	r14
     ef0:	ff 92       	push	r15
     ef2:	0f 93       	push	r16
     ef4:	1f 93       	push	r17
     ef6:	cf 93       	push	r28
     ef8:	df 93       	push	r29
     efa:	18 2f       	mov	r17, r24
     efc:	09 2f       	mov	r16, r25
     efe:	eb 01       	movw	r28, r22
     f00:	f4 2e       	mov	r15, r20
     f02:	e5 2e       	mov	r14, r21
     f04:	82 ee       	ldi	r24, 0xE2	; 226
     f06:	94 e0       	ldi	r25, 0x04	; 4
     f08:	ca de       	rcall	.-620    	; 0xc9e <_ZL6is_lanPKhS0_>
     f0a:	88 23       	and	r24, r24
     f0c:	29 f0       	breq	.+10     	; 0xf18 <_ZN9EtherCard10udpPrepareEjPKhj+0x2a>
     f0e:	be 01       	movw	r22, r28
     f10:	80 e0       	ldi	r24, 0x00	; 0
     f12:	95 e0       	ldi	r25, 0x05	; 5
     f14:	79 df       	rcall	.-270    	; 0xe08 <_ZL12setMACandIPsPKhS0_>
     f16:	04 c0       	rjmp	.+8      	; 0xf20 <_ZN9EtherCard10udpPrepareEjPKhj+0x32>
     f18:	be 01       	movw	r22, r28
     f1a:	86 ef       	ldi	r24, 0xF6	; 246
     f1c:	94 e0       	ldi	r25, 0x04	; 4
     f1e:	74 df       	rcall	.-280    	; 0xe08 <_ZL12setMACandIPsPKhS0_>
     f20:	88 81       	ld	r24, Y
     f22:	80 7f       	andi	r24, 0xF0	; 240
     f24:	80 3e       	cpi	r24, 0xE0	; 224
     f26:	91 f0       	breq	.+36     	; 0xf4c <_ZN9EtherCard10udpPrepareEjPKhj+0x5e>
     f28:	88 81       	ld	r24, Y
     f2a:	99 81       	ldd	r25, Y+1	; 0x01
     f2c:	aa 81       	ldd	r26, Y+2	; 0x02
     f2e:	bb 81       	ldd	r27, Y+3	; 0x03
     f30:	8f 3f       	cpi	r24, 0xFF	; 255
     f32:	9f 4f       	sbci	r25, 0xFF	; 255
     f34:	af 4f       	sbci	r26, 0xFF	; 255
     f36:	bf 4f       	sbci	r27, 0xFF	; 255
     f38:	49 f0       	breq	.+18     	; 0xf4c <_ZN9EtherCard10udpPrepareEjPKhj+0x5e>
     f3a:	44 e0       	ldi	r20, 0x04	; 4
     f3c:	50 e0       	ldi	r21, 0x00	; 0
     f3e:	be 01       	movw	r22, r28
     f40:	8a ed       	ldi	r24, 0xDA	; 218
     f42:	94 e0       	ldi	r25, 0x04	; 4
     f44:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <memcmp>
     f48:	89 2b       	or	r24, r25
     f4a:	29 f4       	brne	.+10     	; 0xf56 <_ZN9EtherCard10udpPrepareEjPKhj+0x68>
     f4c:	68 e3       	ldi	r22, 0x38	; 56
     f4e:	72 e0       	ldi	r23, 0x02	; 2
     f50:	86 ec       	ldi	r24, 0xC6	; 198
     f52:	92 e0       	ldi	r25, 0x02	; 2
     f54:	4e d4       	rcall	.+2204   	; 0x17f2 <_ZN9EtherCard7copyMacEPhPKh>
     f56:	c6 ec       	ldi	r28, 0xC6	; 198
     f58:	d2 e0       	ldi	r29, 0x02	; 2
     f5a:	88 e0       	ldi	r24, 0x08	; 8
     f5c:	8c 87       	std	Y+12, r24	; 0x0c
     f5e:	1d 86       	std	Y+13, r1	; 0x0d
     f60:	49 e0       	ldi	r20, 0x09	; 9
     f62:	50 e0       	ldi	r21, 0x00	; 0
     f64:	68 ee       	ldi	r22, 0xE8	; 232
     f66:	70 e0       	ldi	r23, 0x00	; 0
     f68:	84 ed       	ldi	r24, 0xD4	; 212
     f6a:	92 e0       	ldi	r25, 0x02	; 2
     f6c:	0e 94 da 10 	call	0x21b4	; 0x21b4 <memcpy_P>
     f70:	18 8a       	std	Y+16, r1	; 0x10
     f72:	81 e1       	ldi	r24, 0x11	; 17
     f74:	8f 8b       	std	Y+23, r24	; 0x17
     f76:	ec a2       	std	Y+36, r14	; 0x24
     f78:	fd a2       	std	Y+37, r15	; 0x25
     f7a:	0a a3       	std	Y+34, r16	; 0x22
     f7c:	1b a3       	std	Y+35, r17	; 0x23
     f7e:	1e a2       	std	Y+38, r1	; 0x26
     f80:	18 a6       	std	Y+40, r1	; 0x28
     f82:	19 a6       	std	Y+41, r1	; 0x29
     f84:	df 91       	pop	r29
     f86:	cf 91       	pop	r28
     f88:	1f 91       	pop	r17
     f8a:	0f 91       	pop	r16
     f8c:	ff 90       	pop	r15
     f8e:	ef 90       	pop	r14
     f90:	08 95       	ret

00000f92 <_ZN9EtherCard11udpTransmitEj>:
     f92:	0f 93       	push	r16
     f94:	1f 93       	push	r17
     f96:	cf 93       	push	r28
     f98:	df 93       	push	r29
     f9a:	ec 01       	movw	r28, r24
     f9c:	06 ec       	ldi	r16, 0xC6	; 198
     f9e:	12 e0       	ldi	r17, 0x02	; 2
     fa0:	4c 96       	adiw	r24, 0x1c	; 28
     fa2:	f8 01       	movw	r30, r16
     fa4:	90 8b       	std	Z+16, r25	; 0x10
     fa6:	81 8b       	std	Z+17, r24	; 0x11
     fa8:	a4 de       	rcall	.-696    	; 0xcf2 <_ZL20fill_ip_hdr_checksumv>
     faa:	ce 01       	movw	r24, r28
     fac:	08 96       	adiw	r24, 0x08	; 8
     fae:	f8 01       	movw	r30, r16
     fb0:	96 a3       	std	Z+38, r25	; 0x26
     fb2:	87 a3       	std	Z+39, r24	; 0x27
     fb4:	ae 01       	movw	r20, r28
     fb6:	40 5f       	subi	r20, 0xF0	; 240
     fb8:	5f 4f       	sbci	r21, 0xFF	; 255
     fba:	21 e0       	ldi	r18, 0x01	; 1
     fbc:	6a e1       	ldi	r22, 0x1A	; 26
     fbe:	88 e2       	ldi	r24, 0x28	; 40
     fc0:	fd dd       	rcall	.-1030   	; 0xbbc <_ZL13fill_checksumhhjh>
     fc2:	ce 01       	movw	r24, r28
     fc4:	8a 96       	adiw	r24, 0x2a	; 42
     fc6:	c0 dc       	rcall	.-1664   	; 0x948 <_ZN8ENC28J6010packetSendEj>
     fc8:	df 91       	pop	r29
     fca:	cf 91       	pop	r28
     fcc:	1f 91       	pop	r17
     fce:	0f 91       	pop	r16
     fd0:	08 95       	ret

00000fd2 <_ZN9EtherCard7sendUdpEPKhjjS1_j>:
     fd2:	0f 93       	push	r16
     fd4:	1f 93       	push	r17
     fd6:	cf 93       	push	r28
     fd8:	df 93       	push	r29
     fda:	d6 2f       	mov	r29, r22
     fdc:	c7 2f       	mov	r28, r23
     fde:	ca 01       	movw	r24, r20
     fe0:	a8 01       	movw	r20, r16
     fe2:	b9 01       	movw	r22, r18
     fe4:	84 df       	rcall	.-248    	; 0xeee <_ZN9EtherCard10udpPrepareEjPKhj>
     fe6:	8d 2f       	mov	r24, r29
     fe8:	9c 2f       	mov	r25, r28
     fea:	81 30       	cpi	r24, 0x01	; 1
     fec:	22 e0       	ldi	r18, 0x02	; 2
     fee:	92 07       	cpc	r25, r18
     ff0:	10 f0       	brcs	.+4      	; 0xff6 <_ZN9EtherCard7sendUdpEPKhjjS1_j+0x24>
     ff2:	80 e0       	ldi	r24, 0x00	; 0
     ff4:	92 e0       	ldi	r25, 0x02	; 2
     ff6:	cd df       	rcall	.-102    	; 0xf92 <_ZN9EtherCard11udpTransmitEj>
     ff8:	df 91       	pop	r29
     ffa:	cf 91       	pop	r28
     ffc:	1f 91       	pop	r17
     ffe:	0f 91       	pop	r16
    1000:	08 95       	ret

00001002 <_ZN9EtherCard7setGwIpEPKh>:
    1002:	10 92 c7 04 	sts	0x04C7, r1	; 0x8004c7 <_ZN9EtherCard8delaycntE+0x1>
    1006:	10 92 c6 04 	sts	0x04C6, r1	; 0x8004c6 <_ZN9EtherCard8delaycntE>
    100a:	21 e0       	ldi	r18, 0x01	; 1
    100c:	20 93 f5 04 	sts	0x04F5, r18	; 0x8004f5 <_ZL9waitgwmac>
    1010:	bc 01       	movw	r22, r24
    1012:	86 ed       	ldi	r24, 0xD6	; 214
    1014:	94 e0       	ldi	r25, 0x04	; 4
    1016:	e0 c3       	rjmp	.+1984   	; 0x17d8 <_ZN9EtherCard6copyIpEPhPKh>
    1018:	08 95       	ret

0000101a <_ZN9EtherCard22updateBroadcastAddressEv>:
    101a:	cf 93       	push	r28
    101c:	df 93       	push	r29
    101e:	e2 ee       	ldi	r30, 0xE2	; 226
    1020:	f4 e0       	ldi	r31, 0x04	; 4
    1022:	ce ed       	ldi	r28, 0xDE	; 222
    1024:	d4 e0       	ldi	r29, 0x04	; 4
    1026:	aa ed       	ldi	r26, 0xDA	; 218
    1028:	b4 e0       	ldi	r27, 0x04	; 4
    102a:	26 ee       	ldi	r18, 0xE6	; 230
    102c:	34 e0       	ldi	r19, 0x04	; 4
    102e:	91 91       	ld	r25, Z+
    1030:	89 91       	ld	r24, Y+
    1032:	80 95       	com	r24
    1034:	89 2b       	or	r24, r25
    1036:	8d 93       	st	X+, r24
    1038:	e2 17       	cp	r30, r18
    103a:	f3 07       	cpc	r31, r19
    103c:	c1 f7       	brne	.-16     	; 0x102e <_ZN9EtherCard22updateBroadcastAddressEv+0x14>
    103e:	df 91       	pop	r29
    1040:	cf 91       	pop	r28
    1042:	08 95       	ret

00001044 <_ZN9EtherCard6acceptEjj>:

uint16_t EtherCard::accept(const uint16_t port, uint16_t plen) {
    1044:	ff 92       	push	r15
    1046:	0f 93       	push	r16
    1048:	1f 93       	push	r17
    104a:	cf 93       	push	r28
    104c:	df 93       	push	r29
    uint16_t pos;

    if (gPB[TCP_DST_PORT_H_P] == (port >> 8) &&
    104e:	20 91 ea 02 	lds	r18, 0x02EA	; 0x8002ea <_ZN8ENC28J606bufferE+0x24>
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	49 2f       	mov	r20, r25
    1056:	55 27       	eor	r21, r21
    1058:	24 17       	cp	r18, r20
    105a:	35 07       	cpc	r19, r21
    105c:	09 f0       	breq	.+2      	; 0x1060 <_ZN9EtherCard6acceptEjj+0x1c>
    105e:	61 c0       	rjmp	.+194    	; 0x1122 <_ZN9EtherCard6acceptEjj+0xde>
    1060:	20 91 eb 02 	lds	r18, 0x02EB	; 0x8002eb <_ZN8ENC28J606bufferE+0x25>
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	99 27       	eor	r25, r25
    1068:	28 17       	cp	r18, r24
    106a:	39 07       	cpc	r19, r25
    106c:	09 f0       	breq	.+2      	; 0x1070 <_ZN9EtherCard6acceptEjj+0x2c>
    106e:	5c c0       	rjmp	.+184    	; 0x1128 <_ZN9EtherCard6acceptEjj+0xe4>
    1070:	8b 01       	movw	r16, r22
            gPB[TCP_DST_PORT_L_P] == ((uint8_t) port))
    {   //Packet targeted at specified port
        if (gPB[TCP_FLAGS_P] & TCP_FLAGS_SYN_V)
    1072:	f0 90 f5 02 	lds	r15, 0x02F5	; 0x8002f5 <_ZN8ENC28J606bufferE+0x2f>
    1076:	f1 fe       	sbrs	r15, 1
    1078:	2d c0       	rjmp	.+90     	; 0x10d4 <_ZN9EtherCard6acceptEjj+0x90>
    fill_checksum(UDP_CHECKSUM_H_P, IP_SRC_P, 16 + datalen,1);
    packetSend(UDP_HEADER_LEN+IP_HEADER_LEN+ETH_HEADER_LEN+datalen);
}

static void make_tcp_synack_from_syn() {
    gPB[IP_TOTLEN_H_P] = 0;
    107a:	c6 ec       	ldi	r28, 0xC6	; 198
    107c:	d2 e0       	ldi	r29, 0x02	; 2
    107e:	18 8a       	std	Y+16, r1	; 0x10
    gPB[IP_TOTLEN_L_P] = IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+4;
    1080:	8c e2       	ldi	r24, 0x2C	; 44
    1082:	89 8b       	std	Y+17, r24	; 0x11
    make_eth_ip();
    1084:	8f de       	rcall	.-738    	; 0xda4 <_ZL11make_eth_ipv>
    gPB[TCP_FLAGS_P] = TCP_FLAGS_SYNACK_V;
    1086:	82 e1       	ldi	r24, 0x12	; 18
    1088:	8f a7       	std	Y+47, r24	; 0x2f
    make_tcphead(1,0);
    108a:	60 e0       	ldi	r22, 0x00	; 0
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	3f de       	rcall	.-898    	; 0xd10 <_ZL12make_tcpheadjh>
    gPB[TCP_SEQ_H_P+0] = 0;
    1092:	1e a2       	std	Y+38, r1	; 0x26
    gPB[TCP_SEQ_H_P+1] = 0;
    1094:	1f a2       	std	Y+39, r1	; 0x27
    gPB[TCP_SEQ_H_P+2] = seqnum;
    1096:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <_ZL6seqnum>
    109a:	88 a7       	std	Y+40, r24	; 0x28
    gPB[TCP_SEQ_H_P+3] = 0;
    109c:	19 a6       	std	Y+41, r1	; 0x29
    seqnum += 3;
    109e:	8d 5f       	subi	r24, 0xFD	; 253
    10a0:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <_ZL6seqnum>
    gPB[TCP_OPTIONS_P] = 2;
    10a4:	82 e0       	ldi	r24, 0x02	; 2
    10a6:	8e ab       	std	Y+54, r24	; 0x36
    gPB[TCP_OPTIONS_P+1] = 4;
    10a8:	84 e0       	ldi	r24, 0x04	; 4
    10aa:	8f ab       	std	Y+55, r24	; 0x37
    gPB[TCP_OPTIONS_P+2] = 0x05;
    10ac:	85 e0       	ldi	r24, 0x05	; 5
    10ae:	88 af       	std	Y+56, r24	; 0x38
    gPB[TCP_OPTIONS_P+3] = 0x0;
    10b0:	19 ae       	std	Y+57, r1	; 0x39
    gPB[TCP_HEADER_LEN_P] = 0x60;
    10b2:	90 e6       	ldi	r25, 0x60	; 96
    10b4:	9e a7       	std	Y+46, r25	; 0x2e
    gPB[TCP_WIN_SIZE] = 0x5; // 1400=0x578
    10b6:	88 ab       	std	Y+48, r24	; 0x30
    gPB[TCP_WIN_SIZE+1] = 0x78;
    10b8:	88 e7       	ldi	r24, 0x78	; 120
    10ba:	89 ab       	std	Y+49, r24	; 0x31
    fill_checksum(TCP_CHECKSUM_H_P, IP_SRC_P, 8+TCP_HEADER_LEN_PLAIN+4,2);
    10bc:	22 e0       	ldi	r18, 0x02	; 2
    10be:	40 e2       	ldi	r20, 0x20	; 32
    10c0:	50 e0       	ldi	r21, 0x00	; 0
    10c2:	6a e1       	ldi	r22, 0x1A	; 26
    10c4:	82 e3       	ldi	r24, 0x32	; 50
    10c6:	7a dd       	rcall	.-1292   	; 0xbbc <_ZL13fill_checksumhhjh>
    EtherCard::packetSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+4+ETH_HEADER_LEN);
    10c8:	8a e3       	ldi	r24, 0x3A	; 58
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	3d dc       	rcall	.-1926   	; 0x948 <_ZN8ENC28J6010packetSendEj>
    10ce:	c0 e0       	ldi	r28, 0x00	; 0
            }
            else if (gPB[TCP_FLAGS_P] & TCP_FLAGS_FIN_V)
                make_tcp_ack_from_any(0,0); //No data so close connection
        }
    }
    return 0;
    10d0:	d0 e0       	ldi	r29, 0x00	; 0
    10d2:	2f c0       	rjmp	.+94     	; 0x1132 <_ZN9EtherCard6acceptEjj+0xee>
    if (gPB[TCP_DST_PORT_H_P] == (port >> 8) &&
            gPB[TCP_DST_PORT_L_P] == ((uint8_t) port))
    {   //Packet targeted at specified port
        if (gPB[TCP_FLAGS_P] & TCP_FLAGS_SYN_V)
            make_tcp_synack_from_syn(); //send SYN+ACK
        else if (gPB[TCP_FLAGS_P] & TCP_FLAGS_ACK_V)
    10d4:	f4 fe       	sbrs	r15, 4
    10d6:	2b c0       	rjmp	.+86     	; 0x112e <_ZN9EtherCard6acceptEjj+0xea>
        {   //This is an acknowledgement to our SYN+ACK so let's start processing that payload
            info_data_len = getTcpPayloadLength();
    10d8:	ed de       	rcall	.-550    	; 0xeb4 <_ZN9EtherCard19getTcpPayloadLengthEv>
    10da:	ec 01       	movw	r28, r24
    10dc:	90 93 f4 04 	sts	0x04F4, r25	; 0x8004f4 <_ZL13info_data_len+0x1>
    10e0:	80 93 f3 04 	sts	0x04F3, r24	; 0x8004f3 <_ZL13info_data_len>
    10e4:	89 2b       	or	r24, r25
            if (info_data_len > 0)
    10e6:	b1 f0       	breq	.+44     	; 0x1114 <_ZN9EtherCard6acceptEjj+0xd0>
    10e8:	c0 91 f4 02 	lds	r28, 0x02F4	; 0x8002f4 <_ZN8ENC28J606bufferE+0x2e>
            {   //Got some data
                pos = TCP_DATA_START; // TCP_DATA_START is a formula
    10ec:	d0 e0       	ldi	r29, 0x00	; 0
    10ee:	d5 95       	asr	r29
    10f0:	c7 95       	ror	r28
    10f2:	d5 95       	asr	r29
    10f4:	c7 95       	ror	r28
    10f6:	d5 95       	asr	r29
    10f8:	c7 95       	ror	r28
    10fa:	d5 95       	asr	r29
    10fc:	c7 95       	ror	r28
    10fe:	cc 0f       	add	r28, r28
    1100:	dd 1f       	adc	r29, r29
    1102:	cc 0f       	add	r28, r28
    1104:	dd 1f       	adc	r29, r29
    1106:	a2 96       	adiw	r28, 0x22	; 34
    1108:	0c 17       	cp	r16, r28
                //!@todo no idea what this check pos<=plen-8 does; changed this to pos<=plen as otw. perfectly valid tcp packets are ignored; still if anybody has any idea please leave a comment
                if (pos <= plen)
    110a:	1d 07       	cpc	r17, r29
    110c:	90 f4       	brcc	.+36     	; 0x1132 <_ZN9EtherCard6acceptEjj+0xee>
    110e:	c0 e0       	ldi	r28, 0x00	; 0
            }
            else if (gPB[TCP_FLAGS_P] & TCP_FLAGS_FIN_V)
                make_tcp_ack_from_any(0,0); //No data so close connection
        }
    }
    return 0;
    1110:	d0 e0       	ldi	r29, 0x00	; 0
    1112:	0f c0       	rjmp	.+30     	; 0x1132 <_ZN9EtherCard6acceptEjj+0xee>
    1114:	f0 fe       	sbrs	r15, 0
                pos = TCP_DATA_START; // TCP_DATA_START is a formula
                //!@todo no idea what this check pos<=plen-8 does; changed this to pos<=plen as otw. perfectly valid tcp packets are ignored; still if anybody has any idea please leave a comment
                if (pos <= plen)
                    return pos;
            }
            else if (gPB[TCP_FLAGS_P] & TCP_FLAGS_FIN_V)
    1116:	0d c0       	rjmp	.+26     	; 0x1132 <_ZN9EtherCard6acceptEjj+0xee>
                make_tcp_ack_from_any(0,0); //No data so close connection
    1118:	60 e0       	ldi	r22, 0x00	; 0
    111a:	80 e0       	ldi	r24, 0x00	; 0
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	51 de       	rcall	.-862    	; 0xdc2 <_ZL21make_tcp_ack_from_anyih>
    1120:	08 c0       	rjmp	.+16     	; 0x1132 <_ZN9EtherCard6acceptEjj+0xee>
    1122:	c0 e0       	ldi	r28, 0x00	; 0
        }
    }
    return 0;
    1124:	d0 e0       	ldi	r29, 0x00	; 0
    1126:	05 c0       	rjmp	.+10     	; 0x1132 <_ZN9EtherCard6acceptEjj+0xee>
    1128:	c0 e0       	ldi	r28, 0x00	; 0
    112a:	d0 e0       	ldi	r29, 0x00	; 0
    112c:	02 c0       	rjmp	.+4      	; 0x1132 <_ZN9EtherCard6acceptEjj+0xee>
    112e:	c0 e0       	ldi	r28, 0x00	; 0
    1130:	d0 e0       	ldi	r29, 0x00	; 0
    1132:	ce 01       	movw	r24, r28
}
    1134:	df 91       	pop	r29
    1136:	cf 91       	pop	r28
    1138:	1f 91       	pop	r17
    113a:	0f 91       	pop	r16
    113c:	ff 90       	pop	r15
    113e:	08 95       	ret

00001140 <_ZN9EtherCard10packetLoopEj>:
    1140:	ef 92       	push	r14

uint16_t EtherCard::packetLoop (uint16_t plen) {
    1142:	ff 92       	push	r15
    1144:	0f 93       	push	r16
    1146:	1f 93       	push	r17
    1148:	cf 93       	push	r28
    114a:	df 93       	push	r29
    114c:	ec 01       	movw	r28, r24
    uint16_t len;

#if ETHERCARD_DHCP
    if(using_dhcp) {
    114e:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <_ZN9EtherCard10using_dhcpE>
    1152:	88 23       	and	r24, r24
    1154:	11 f0       	breq	.+4      	; 0x115a <_ZN9EtherCard10packetLoopEj+0x1a>
        ether.DhcpStateMachine(plen);
    1156:	ce 01       	movw	r24, r28
    1158:	57 d9       	rcall	.-3410   	; 0x408 <_ZN9EtherCard16DhcpStateMachineEj>
    }
#endif

    if (plen==0) {
    115a:	20 97       	sbiw	r28, 0x00	; 0
    115c:	09 f0       	breq	.+2      	; 0x1160 <_ZN9EtherCard10packetLoopEj+0x20>
    115e:	ab c0       	rjmp	.+342    	; 0x12b6 <_ZN9EtherCard10packetLoopEj+0x176>
        //Check every 65536 (no-packet) cycles whether we need to retry ARP request for gateway
        if ((waitgwmac & WGW_INITIAL_ARP || waitgwmac & WGW_REFRESHING) &&
    1160:	80 91 f5 04 	lds	r24, 0x04F5	; 0x8004f5 <_ZL9waitgwmac>
    1164:	85 70       	andi	r24, 0x05	; 5
    1166:	89 f0       	breq	.+34     	; 0x118a <_ZN9EtherCard10packetLoopEj+0x4a>
    1168:	80 91 c6 04 	lds	r24, 0x04C6	; 0x8004c6 <_ZN9EtherCard8delaycntE>
    116c:	90 91 c7 04 	lds	r25, 0x04C7	; 0x8004c7 <_ZN9EtherCard8delaycntE+0x1>
    1170:	89 2b       	or	r24, r25
                delaycnt==0 && isLinkUp()) {
    1172:	59 f4       	brne	.+22     	; 0x118a <_ZN9EtherCard10packetLoopEj+0x4a>
    1174:	d6 db       	rcall	.-2132   	; 0x922 <_ZN8ENC28J608isLinkUpEv>
    }
#endif

    if (plen==0) {
        //Check every 65536 (no-packet) cycles whether we need to retry ARP request for gateway
        if ((waitgwmac & WGW_INITIAL_ARP || waitgwmac & WGW_REFRESHING) &&
    1176:	88 23       	and	r24, r24
    1178:	41 f0       	breq	.+16     	; 0x118a <_ZN9EtherCard10packetLoopEj+0x4a>
                delaycnt==0 && isLinkUp()) {
            client_arp_whohas(gwip);
    117a:	86 ed       	ldi	r24, 0xD6	; 214
    117c:	94 e0       	ldi	r25, 0x04	; 4
    117e:	54 de       	rcall	.-856    	; 0xe28 <_ZL17client_arp_whohasPh>
            waitgwmac |= WGW_ACCEPT_ARP_REPLY;
    1180:	80 91 f5 04 	lds	r24, 0x04F5	; 0x8004f5 <_ZL9waitgwmac>
    1184:	88 60       	ori	r24, 0x08	; 8
    1186:	80 93 f5 04 	sts	0x04F5, r24	; 0x8004f5 <_ZL9waitgwmac>
        }
        delaycnt++;
    118a:	80 91 c6 04 	lds	r24, 0x04C6	; 0x8004c6 <_ZN9EtherCard8delaycntE>
    118e:	90 91 c7 04 	lds	r25, 0x04C7	; 0x8004c7 <_ZN9EtherCard8delaycntE+0x1>
    1192:	01 96       	adiw	r24, 0x01	; 1
    1194:	90 93 c7 04 	sts	0x04C7, r25	; 0x8004c7 <_ZN9EtherCard8delaycntE+0x1>
    1198:	80 93 c6 04 	sts	0x04C6, r24	; 0x8004c6 <_ZN9EtherCard8delaycntE>

#if ETHERCARD_TCPCLIENT
        //Initiate TCP/IP session if pending
        if (tcp_client_state==TCP_STATE_SENDSYN && (waitgwmac & WGW_HAVE_GW_MAC)) { // send a syn
    119c:	80 91 0e 05 	lds	r24, 0x050E	; 0x80050e <_ZL16tcp_client_state>
    11a0:	81 30       	cpi	r24, 0x01	; 1
    11a2:	09 f0       	breq	.+2      	; 0x11a6 <_ZN9EtherCard10packetLoopEj+0x66>
    11a4:	67 c0       	rjmp	.+206    	; 0x1274 <_ZN9EtherCard10packetLoopEj+0x134>
    11a6:	80 91 f5 04 	lds	r24, 0x04F5	; 0x8004f5 <_ZL9waitgwmac>
    11aa:	81 ff       	sbrs	r24, 1
    11ac:	63 c0       	rjmp	.+198    	; 0x1274 <_ZN9EtherCard10packetLoopEj+0x134>
            tcp_client_state = TCP_STATE_SYNSENT;
    11ae:	82 e0       	ldi	r24, 0x02	; 2
    11b0:	80 93 0e 05 	sts	0x050E, r24	; 0x80050e <_ZL16tcp_client_state>
            tcpclient_src_port_l++; // allocate a new port
    11b4:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <_ZL20tcpclient_src_port_l>
    11b8:	8f 5f       	subi	r24, 0xFF	; 255
    11ba:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <_ZL20tcpclient_src_port_l>
            client_syn(((tcp_fd<<5) | (0x1f & tcpclient_src_port_l)),tcp_client_port_h,tcp_client_port_l);
    11be:	f0 90 0c 05 	lds	r15, 0x050C	; 0x80050c <_ZL17tcp_client_port_l>
    11c2:	e0 90 0d 05 	lds	r14, 0x050D	; 0x80050d <_ZL17tcp_client_port_h>
    11c6:	20 91 0f 05 	lds	r18, 0x050F	; 0x80050f <_ZL6tcp_fd>
    11ca:	90 e2       	ldi	r25, 0x20	; 32
    11cc:	29 9f       	mul	r18, r25
    11ce:	90 01       	movw	r18, r0
    11d0:	11 24       	eor	r1, r1
    11d2:	8f 71       	andi	r24, 0x1F	; 31
    11d4:	18 2f       	mov	r17, r24
    11d6:	12 2b       	or	r17, r18
    for(uint8_t i=0; i<IP_LEN; i++)
        broadcastip[i] = myip[i] | ~netmask[i];
}

static void client_syn(uint8_t srcport,uint8_t dstport_h,uint8_t dstport_l) {
    if(is_lan(EtherCard::myip, EtherCard::hisip)) {
    11d8:	6a ec       	ldi	r22, 0xCA	; 202
    11da:	74 e0       	ldi	r23, 0x04	; 4
    11dc:	82 ee       	ldi	r24, 0xE2	; 226
    11de:	94 e0       	ldi	r25, 0x04	; 4
    11e0:	5e dd       	rcall	.-1348   	; 0xc9e <_ZL6is_lanPKhS0_>
    11e2:	88 23       	and	r24, r24
    11e4:	31 f0       	breq	.+12     	; 0x11f2 <_ZN9EtherCard10packetLoopEj+0xb2>
        setMACandIPs(destmacaddr, EtherCard::hisip);
    11e6:	6a ec       	ldi	r22, 0xCA	; 202
    11e8:	74 e0       	ldi	r23, 0x04	; 4
    11ea:	80 e0       	ldi	r24, 0x00	; 0
    11ec:	95 e0       	ldi	r25, 0x05	; 5
    11ee:	0c de       	rcall	.-1000   	; 0xe08 <_ZL12setMACandIPsPKhS0_>
    11f0:	05 c0       	rjmp	.+10     	; 0x11fc <_ZN9EtherCard10packetLoopEj+0xbc>
    } else {
        setMACandIPs(gwmacaddr, EtherCard::hisip);
    11f2:	6a ec       	ldi	r22, 0xCA	; 202
    11f4:	74 e0       	ldi	r23, 0x04	; 4
    11f6:	86 ef       	ldi	r24, 0xF6	; 246
    11f8:	94 e0       	ldi	r25, 0x04	; 4
    11fa:	06 de       	rcall	.-1012   	; 0xe08 <_ZL12setMACandIPsPKhS0_>
    11fc:	c6 ec       	ldi	r28, 0xC6	; 198
    }
    gPB[ETH_TYPE_H_P] = ETHTYPE_IP_H_V;
    11fe:	d2 e0       	ldi	r29, 0x02	; 2
    1200:	08 e0       	ldi	r16, 0x08	; 8
    1202:	0c 87       	std	Y+12, r16	; 0x0c
    1204:	1d 86       	std	Y+13, r1	; 0x0d
    gPB[ETH_TYPE_L_P] = ETHTYPE_IP_L_V;
    1206:	49 e0       	ldi	r20, 0x09	; 9
    memcpy_P(gPB + IP_P,iphdr,sizeof iphdr);
    1208:	50 e0       	ldi	r21, 0x00	; 0
    120a:	68 ee       	ldi	r22, 0xE8	; 232
    120c:	70 e0       	ldi	r23, 0x00	; 0
    120e:	84 ed       	ldi	r24, 0xD4	; 212
    1210:	92 e0       	ldi	r25, 0x02	; 2
    1212:	d0 d7       	rcall	.+4000   	; 0x21b4 <memcpy_P>
    gPB[IP_TOTLEN_L_P] = 44; // good for syn
    1214:	8c e2       	ldi	r24, 0x2C	; 44
    1216:	89 8b       	std	Y+17, r24	; 0x11
    gPB[IP_PROTO_P] = IP_PROTO_TCP_V;
    1218:	86 e0       	ldi	r24, 0x06	; 6
    121a:	8f 8b       	std	Y+23, r24	; 0x17
    fill_ip_hdr_checksum();
    121c:	6a dd       	rcall	.-1324   	; 0xcf2 <_ZL20fill_ip_hdr_checksumv>
    121e:	ec a2       	std	Y+36, r14	; 0x24
    gPB[TCP_DST_PORT_H_P] = dstport_h;
    1220:	fd a2       	std	Y+37, r15	; 0x25
    gPB[TCP_DST_PORT_L_P] = dstport_l;
    1222:	8b e0       	ldi	r24, 0x0B	; 11
    gPB[TCP_SRC_PORT_H_P] = TCPCLIENT_SRC_PORT_H;
    1224:	8a a3       	std	Y+34, r24	; 0x22
    1226:	1b a3       	std	Y+35, r17	; 0x23
    gPB[TCP_SRC_PORT_L_P] = srcport; // lower 8 bit of src port
    1228:	ec ee       	ldi	r30, 0xEC	; 236
    memset(gPB + TCP_SEQ_H_P, 0, 8);
    122a:	f2 e0       	ldi	r31, 0x02	; 2
    122c:	df 01       	movw	r26, r30
    122e:	1d 92       	st	X+, r1
    1230:	0a 95       	dec	r16
    1232:	e9 f7       	brne	.-6      	; 0x122e <_ZN9EtherCard10packetLoopEj+0xee>
    1234:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <_ZL6seqnum>
    gPB[TCP_SEQ_H_P+2] = seqnum;
    1238:	88 a7       	std	Y+40, r24	; 0x28
    123a:	8d 5f       	subi	r24, 0xFD	; 253
    seqnum += 3;
    123c:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <_ZL6seqnum>
    1240:	80 e6       	ldi	r24, 0x60	; 96
    gPB[TCP_HEADER_LEN_P] = 0x60; // 0x60=24 len: (0x60>>4) * 4
    1242:	8e a7       	std	Y+46, r24	; 0x2e
    1244:	82 e0       	ldi	r24, 0x02	; 2
    gPB[TCP_FLAGS_P] = TCP_FLAGS_SYN_V;
    1246:	8f a7       	std	Y+47, r24	; 0x2f
    1248:	93 e0       	ldi	r25, 0x03	; 3
    gPB[TCP_WIN_SIZE] = 0x3; // 1024 = 0x400 768 = 0x300, initial window
    124a:	98 ab       	std	Y+48, r25	; 0x30
    124c:	19 aa       	std	Y+49, r1	; 0x31
    gPB[TCP_WIN_SIZE+1] = 0x0;
    124e:	1a aa       	std	Y+50, r1	; 0x32
    gPB[TCP_CHECKSUM_H_P] = 0;
    1250:	1b aa       	std	Y+51, r1	; 0x33
    gPB[TCP_CHECKSUM_L_P] = 0;
    1252:	1c aa       	std	Y+52, r1	; 0x34
    gPB[TCP_CHECKSUM_L_P+1] = 0;
    1254:	1d aa       	std	Y+53, r1	; 0x35
    gPB[TCP_CHECKSUM_L_P+2] = 0;
    1256:	8e ab       	std	Y+54, r24	; 0x36
    gPB[TCP_OPTIONS_P] = 2;
    1258:	94 e0       	ldi	r25, 0x04	; 4
    gPB[TCP_OPTIONS_P+1] = 4;
    125a:	9f ab       	std	Y+55, r25	; 0x37
    125c:	88 af       	std	Y+56, r24	; 0x38
    gPB[TCP_OPTIONS_P+2] = (CLIENTMSS>>8);
    125e:	86 e2       	ldi	r24, 0x26	; 38
    gPB[TCP_OPTIONS_P+3] = (uint8_t) CLIENTMSS;
    1260:	89 af       	std	Y+57, r24	; 0x39
    fill_checksum(TCP_CHECKSUM_H_P, IP_SRC_P, 8 +TCP_HEADER_LEN_PLAIN+4,2);
    1262:	22 e0       	ldi	r18, 0x02	; 2
    1264:	40 e2       	ldi	r20, 0x20	; 32
    1266:	50 e0       	ldi	r21, 0x00	; 0
    1268:	6a e1       	ldi	r22, 0x1A	; 26
    126a:	82 e3       	ldi	r24, 0x32	; 50
    126c:	a7 dc       	rcall	.-1714   	; 0xbbc <_ZL13fill_checksumhhjh>
    // 4 is the tcp mss option:
    EtherCard::packetSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+ETH_HEADER_LEN+4);
    126e:	8a e3       	ldi	r24, 0x3A	; 58
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	6a db       	rcall	.-2348   	; 0x948 <_ZN8ENC28J6010packetSendEj>
    1274:	6e ec       	ldi	r22, 0xCE	; 206
            client_syn(((tcp_fd<<5) | (0x1f & tcpclient_src_port_l)),tcp_client_port_h,tcp_client_port_l);
        }
#endif

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, dnsip) && !has_dns_mac && !waiting_for_dns_mac) {
    1276:	74 e0       	ldi	r23, 0x04	; 4
    1278:	82 ee       	ldi	r24, 0xE2	; 226
    127a:	94 e0       	ldi	r25, 0x04	; 4
    127c:	10 dd       	rcall	.-1504   	; 0xc9e <_ZL6is_lanPKhS0_>
    127e:	88 23       	and	r24, r24
    1280:	49 f0       	breq	.+18     	; 0x1294 <_ZN9EtherCard10packetLoopEj+0x154>
    1282:	80 91 fe 04 	lds	r24, 0x04FE	; 0x8004fe <_ZL11has_dns_mac>
    1286:	81 11       	cpse	r24, r1
    1288:	05 c0       	rjmp	.+10     	; 0x1294 <_ZN9EtherCard10packetLoopEj+0x154>
    128a:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <_ZL19waiting_for_dns_mac>
    128e:	88 23       	and	r24, r24
    1290:	09 f4       	brne	.+2      	; 0x1294 <_ZN9EtherCard10packetLoopEj+0x154>
    1292:	e2 c1       	rjmp	.+964    	; 0x1658 <_ZN9EtherCard10packetLoopEj+0x518>
    1294:	6a ec       	ldi	r22, 0xCA	; 202
            client_arp_whohas(dnsip);
            waiting_for_dns_mac = true;
        }

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, hisip) && !has_dest_mac && !waiting_for_dest_mac) {
    1296:	74 e0       	ldi	r23, 0x04	; 4
    1298:	82 ee       	ldi	r24, 0xE2	; 226
    129a:	94 e0       	ldi	r25, 0x04	; 4
    129c:	00 dd       	rcall	.-1536   	; 0xc9e <_ZL6is_lanPKhS0_>
    129e:	88 23       	and	r24, r24
    12a0:	09 f4       	brne	.+2      	; 0x12a4 <_ZN9EtherCard10packetLoopEj+0x164>
    12a2:	aa c1       	rjmp	.+852    	; 0x15f8 <_ZN9EtherCard10packetLoopEj+0x4b8>
    12a4:	80 91 fc 04 	lds	r24, 0x04FC	; 0x8004fc <_ZL12has_dest_mac>
    12a8:	81 11       	cpse	r24, r1
    12aa:	a9 c1       	rjmp	.+850    	; 0x15fe <_ZN9EtherCard10packetLoopEj+0x4be>
    12ac:	80 91 fd 04 	lds	r24, 0x04FD	; 0x8004fd <_ZL20waiting_for_dest_mac>
    12b0:	81 11       	cpse	r24, r1
    12b2:	a8 c1       	rjmp	.+848    	; 0x1604 <_ZN9EtherCard10packetLoopEj+0x4c4>
    12b4:	d8 c1       	rjmp	.+944    	; 0x1666 <_ZN9EtherCard10packetLoopEj+0x526>
    12b6:	c9 32       	cpi	r28, 0x29	; 41
    12b8:	d1 05       	cpc	r29, r1
    return true;
}

static uint8_t eth_type_is_arp_and_my_ip(uint16_t len) {
    return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
    12ba:	08 f4       	brcc	.+2      	; 0x12be <_ZN9EtherCard10packetLoopEj+0x17e>
    12bc:	dd c1       	rjmp	.+954    	; 0x1678 <_ZN9EtherCard10packetLoopEj+0x538>
    12be:	80 91 d2 02 	lds	r24, 0x02D2	; 0x8002d2 <_ZN8ENC28J606bufferE+0xc>
        }
    return true;
}

static uint8_t eth_type_is_arp_and_my_ip(uint16_t len) {
    return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
    12c2:	88 30       	cpi	r24, 0x08	; 8
    12c4:	09 f0       	breq	.+2      	; 0x12c8 <_ZN9EtherCard10packetLoopEj+0x188>
    12c6:	a1 c1       	rjmp	.+834    	; 0x160a <_ZN9EtherCard10packetLoopEj+0x4ca>
    12c8:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <_ZN8ENC28J606bufferE+0xd>
    12cc:	86 30       	cpi	r24, 0x06	; 6
    12ce:	09 f0       	breq	.+2      	; 0x12d2 <_ZN9EtherCard10packetLoopEj+0x192>
    12d0:	f2 c1       	rjmp	.+996    	; 0x16b6 <_ZN9EtherCard10packetLoopEj+0x576>
    12d2:	44 e0       	ldi	r20, 0x04	; 4
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
           memcmp(gPB + ETH_ARP_DST_IP_P, EtherCard::myip, IP_LEN) == 0;
    12d4:	50 e0       	ldi	r21, 0x00	; 0
    12d6:	62 ee       	ldi	r22, 0xE2	; 226
    12d8:	74 e0       	ldi	r23, 0x04	; 4
    12da:	8c ee       	ldi	r24, 0xEC	; 236
    12dc:	92 e0       	ldi	r25, 0x02	; 2
    12de:	73 d7       	rcall	.+3814   	; 0x21c6 <memcmp>
    12e0:	89 2b       	or	r24, r25
    return true;
}

static uint8_t eth_type_is_arp_and_my_ip(uint16_t len) {
    return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
    12e2:	09 f0       	breq	.+2      	; 0x12e6 <_ZN9EtherCard10packetLoopEj+0x1a6>
    12e4:	e8 c1       	rjmp	.+976    	; 0x16b6 <_ZN9EtherCard10packetLoopEj+0x576>
    12e6:	cf c1       	rjmp	.+926    	; 0x1686 <_ZN9EtherCard10packetLoopEj+0x546>
    12e8:	8c ec       	ldi	r24, 0xCC	; 204
    gPB[TCP_CHECKSUM_L_P] = 0;
    gPB[TCP_HEADER_LEN_P] = 0x50;
}

static void make_arp_answer_from_request() {
    setMACs(gPB + ETH_SRC_MAC);
    12ea:	92 e0       	ldi	r25, 0x02	; 2
    12ec:	51 dd       	rcall	.-1374   	; 0xd90 <_ZL7setMACsPKh>
    12ee:	e6 ec       	ldi	r30, 0xC6	; 198
    gPB[ETH_ARP_OPCODE_H_P] = ETH_ARP_OPCODE_REPLY_H_V;
    12f0:	f2 e0       	ldi	r31, 0x02	; 2
    12f2:	14 8a       	std	Z+20, r1	; 0x14
    gPB[ETH_ARP_OPCODE_L_P] = ETH_ARP_OPCODE_REPLY_L_V;
    12f4:	82 e0       	ldi	r24, 0x02	; 2
    12f6:	85 8b       	std	Z+21, r24	; 0x15
    EtherCard::copyMac(gPB + ETH_ARP_DST_MAC_P, gPB + ETH_ARP_SRC_MAC_P);
    12f8:	6c ed       	ldi	r22, 0xDC	; 220
    12fa:	72 e0       	ldi	r23, 0x02	; 2
    12fc:	86 ee       	ldi	r24, 0xE6	; 230
    12fe:	92 e0       	ldi	r25, 0x02	; 2
    1300:	78 d2       	rcall	.+1264   	; 0x17f2 <_ZN9EtherCard7copyMacEPhPKh>
    EtherCard::copyMac(gPB + ETH_ARP_SRC_MAC_P, EtherCard::mymac);
    1302:	66 ee       	ldi	r22, 0xE6	; 230
    1304:	74 e0       	ldi	r23, 0x04	; 4
    1306:	8c ed       	ldi	r24, 0xDC	; 220
    1308:	92 e0       	ldi	r25, 0x02	; 2
    EtherCard::copyIp(gPB + ETH_ARP_DST_IP_P, gPB + ETH_ARP_SRC_IP_P);
    130a:	73 d2       	rcall	.+1254   	; 0x17f2 <_ZN9EtherCard7copyMacEPhPKh>
    130c:	62 ee       	ldi	r22, 0xE2	; 226
    130e:	72 e0       	ldi	r23, 0x02	; 2
    1310:	8c ee       	ldi	r24, 0xEC	; 236
    1312:	92 e0       	ldi	r25, 0x02	; 2
    1314:	61 d2       	rcall	.+1218   	; 0x17d8 <_ZN9EtherCard6copyIpEPhPKh>
    EtherCard::copyIp(gPB + ETH_ARP_SRC_IP_P, EtherCard::myip);
    1316:	62 ee       	ldi	r22, 0xE2	; 226
    1318:	74 e0       	ldi	r23, 0x04	; 4
    131a:	82 ee       	ldi	r24, 0xE2	; 226
    131c:	92 e0       	ldi	r25, 0x02	; 2
    131e:	5c d2       	rcall	.+1208   	; 0x17d8 <_ZN9EtherCard6copyIpEPhPKh>
    EtherCard::packetSend(42);
    1320:	8a e2       	ldi	r24, 0x2A	; 42
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	11 db       	rcall	.-2526   	; 0x948 <_ZN8ENC28J6010packetSendEj>
    1326:	80 91 f5 04 	lds	r24, 0x04F5	; 0x8004f5 <_ZL9waitgwmac>

    if (eth_type_is_arp_and_my_ip(plen))
    {   //Service ARP request
        if (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REQ_L_V)
            make_arp_answer_from_request();
        if (waitgwmac & WGW_ACCEPT_ARP_REPLY && (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REPLY_L_V) && client_store_mac(gwip, gwmacaddr))
    132a:	83 ff       	sbrs	r24, 3
    132c:	0e c0       	rjmp	.+28     	; 0x134a <_ZN9EtherCard10packetLoopEj+0x20a>
    132e:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <_ZN8ENC28J606bufferE+0x15>
    1332:	82 30       	cpi	r24, 0x02	; 2
    1334:	51 f4       	brne	.+20     	; 0x134a <_ZN9EtherCard10packetLoopEj+0x20a>
    1336:	66 ef       	ldi	r22, 0xF6	; 246
    1338:	74 e0       	ldi	r23, 0x04	; 4
    133a:	86 ed       	ldi	r24, 0xD6	; 214
    133c:	94 e0       	ldi	r25, 0x04	; 4
    133e:	a4 dd       	rcall	.-1208   	; 0xe88 <_ZL16client_store_macPhS_>
    1340:	88 23       	and	r24, r24
    1342:	19 f0       	breq	.+6      	; 0x134a <_ZN9EtherCard10packetLoopEj+0x20a>
    1344:	82 e0       	ldi	r24, 0x02	; 2
            waitgwmac = WGW_HAVE_GW_MAC;
    1346:	80 93 f5 04 	sts	0x04F5, r24	; 0x8004f5 <_ZL9waitgwmac>
    134a:	80 91 fe 04 	lds	r24, 0x04FE	; 0x8004fe <_ZL11has_dns_mac>
        if (!has_dns_mac && waiting_for_dns_mac && client_store_mac(dnsip, destmacaddr)) {
    134e:	81 11       	cpse	r24, r1
    1350:	10 c0       	rjmp	.+32     	; 0x1372 <_ZN9EtherCard10packetLoopEj+0x232>
    1352:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <_ZL19waiting_for_dns_mac>
    1356:	88 23       	and	r24, r24
    1358:	61 f0       	breq	.+24     	; 0x1372 <_ZN9EtherCard10packetLoopEj+0x232>
    135a:	60 e0       	ldi	r22, 0x00	; 0
    135c:	75 e0       	ldi	r23, 0x05	; 5
    135e:	8e ec       	ldi	r24, 0xCE	; 206
    1360:	94 e0       	ldi	r25, 0x04	; 4
    1362:	92 dd       	rcall	.-1244   	; 0xe88 <_ZL16client_store_macPhS_>
    1364:	88 23       	and	r24, r24
    1366:	29 f0       	breq	.+10     	; 0x1372 <_ZN9EtherCard10packetLoopEj+0x232>
    1368:	81 e0       	ldi	r24, 0x01	; 1
            has_dns_mac = true;
    136a:	80 93 fe 04 	sts	0x04FE, r24	; 0x8004fe <_ZL11has_dns_mac>
    136e:	10 92 ff 04 	sts	0x04FF, r1	; 0x8004ff <_ZL19waiting_for_dns_mac>
            waiting_for_dns_mac = false;
    1372:	80 91 fc 04 	lds	r24, 0x04FC	; 0x8004fc <_ZL12has_dest_mac>
        }
        if (!has_dest_mac && waiting_for_dest_mac && client_store_mac(hisip, destmacaddr)) {
    1376:	81 11       	cpse	r24, r1
    1378:	4b c1       	rjmp	.+662    	; 0x1610 <_ZN9EtherCard10packetLoopEj+0x4d0>
    137a:	80 91 fd 04 	lds	r24, 0x04FD	; 0x8004fd <_ZL20waiting_for_dest_mac>
    137e:	88 23       	and	r24, r24
    1380:	09 f4       	brne	.+2      	; 0x1384 <_ZN9EtherCard10packetLoopEj+0x244>
    1382:	49 c1       	rjmp	.+658    	; 0x1616 <_ZN9EtherCard10packetLoopEj+0x4d6>
    1384:	60 e0       	ldi	r22, 0x00	; 0
    1386:	75 e0       	ldi	r23, 0x05	; 5
    1388:	8a ec       	ldi	r24, 0xCA	; 202
    138a:	94 e0       	ldi	r25, 0x04	; 4
    138c:	7d dd       	rcall	.-1286   	; 0xe88 <_ZL16client_store_macPhS_>
    138e:	88 23       	and	r24, r24
    1390:	09 f4       	brne	.+2      	; 0x1394 <_ZN9EtherCard10packetLoopEj+0x254>
    1392:	44 c1       	rjmp	.+648    	; 0x161c <_ZN9EtherCard10packetLoopEj+0x4dc>
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	80 93 fc 04 	sts	0x04FC, r24	; 0x8004fc <_ZL12has_dest_mac>
            has_dest_mac = true;
    139a:	10 92 fd 04 	sts	0x04FD, r1	; 0x8004fd <_ZL20waiting_for_dest_mac>
            waiting_for_dest_mac = false;
    139e:	80 e0       	ldi	r24, 0x00	; 0
    13a0:	90 e0       	ldi	r25, 0x00	; 0
        }
        return 0;
    13a2:	8f c1       	rjmp	.+798    	; 0x16c2 <_ZN9EtherCard10packetLoopEj+0x582>
    13a4:	80 91 d2 02 	lds	r24, 0x02D2	; 0x8002d2 <_ZN8ENC28J606bufferE+0xc>
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
           memcmp(gPB + ETH_ARP_DST_IP_P, EtherCard::myip, IP_LEN) == 0;
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
    13a8:	88 30       	cpi	r24, 0x08	; 8
    13aa:	09 f0       	breq	.+2      	; 0x13ae <_ZN9EtherCard10packetLoopEj+0x26e>
    13ac:	3a c1       	rjmp	.+628    	; 0x1622 <_ZN9EtherCard10packetLoopEj+0x4e2>
    13ae:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <_ZN8ENC28J606bufferE+0xd>
    13b2:	81 11       	cpse	r24, r1
    13b4:	39 c1       	rjmp	.+626    	; 0x1628 <_ZN9EtherCard10packetLoopEj+0x4e8>
    13b6:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <_ZN8ENC28J606bufferE+0xe>
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
    13ba:	85 34       	cpi	r24, 0x45	; 69
    13bc:	09 f0       	breq	.+2      	; 0x13c0 <_ZN9EtherCard10packetLoopEj+0x280>
    13be:	37 c1       	rjmp	.+622    	; 0x162e <_ZN9EtherCard10packetLoopEj+0x4ee>
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
           (memcmp(gPB + IP_DST_P, EtherCard::myip, IP_LEN) == 0  //not my IP
    13c0:	44 e0       	ldi	r20, 0x04	; 4
    13c2:	50 e0       	ldi	r21, 0x00	; 0
    13c4:	62 ee       	ldi	r22, 0xE2	; 226
    13c6:	74 e0       	ldi	r23, 0x04	; 4
    13c8:	84 ee       	ldi	r24, 0xE4	; 228
    13ca:	92 e0       	ldi	r25, 0x02	; 2
    13cc:	fc d6       	rcall	.+3576   	; 0x21c6 <memcmp>
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
    13ce:	89 2b       	or	r24, r25
    13d0:	09 f4       	brne	.+2      	; 0x13d4 <_ZN9EtherCard10packetLoopEj+0x294>
    13d2:	5f c1       	rjmp	.+702    	; 0x1692 <_ZN9EtherCard10packetLoopEj+0x552>
           (memcmp(gPB + IP_DST_P, EtherCard::myip, IP_LEN) == 0  //not my IP
            || (memcmp(gPB + IP_DST_P, EtherCard::broadcastip, IP_LEN) == 0) //not subnet broadcast
    13d4:	44 e0       	ldi	r20, 0x04	; 4
    13d6:	50 e0       	ldi	r21, 0x00	; 0
    13d8:	6a ed       	ldi	r22, 0xDA	; 218
    13da:	74 e0       	ldi	r23, 0x04	; 4
    13dc:	84 ee       	ldi	r24, 0xE4	; 228
    13de:	92 e0       	ldi	r25, 0x02	; 2
    13e0:	f2 d6       	rcall	.+3556   	; 0x21c6 <memcmp>
    13e2:	89 2b       	or	r24, r25
    13e4:	09 f4       	brne	.+2      	; 0x13e8 <_ZN9EtherCard10packetLoopEj+0x2a8>
    13e6:	55 c1       	rjmp	.+682    	; 0x1692 <_ZN9EtherCard10packetLoopEj+0x552>
    13e8:	44 e0       	ldi	r20, 0x04	; 4
            || (memcmp(gPB + IP_DST_P, allOnes, IP_LEN) == 0)); //not global broadcasts
    13ea:	50 e0       	ldi	r21, 0x00	; 0
    13ec:	68 e3       	ldi	r22, 0x38	; 56
    13ee:	72 e0       	ldi	r23, 0x02	; 2
    13f0:	84 ee       	ldi	r24, 0xE4	; 228
    13f2:	92 e0       	ldi	r25, 0x02	; 2
    13f4:	e8 d6       	rcall	.+3536   	; 0x21c6 <memcmp>
    13f6:	89 2b       	or	r24, r25
    13f8:	09 f4       	brne	.+2      	; 0x13fc <_ZN9EtherCard10packetLoopEj+0x2bc>
    13fa:	4b c1       	rjmp	.+662    	; 0x1692 <_ZN9EtherCard10packetLoopEj+0x552>
    13fc:	80 e0       	ldi	r24, 0x00	; 0
    }

    if (eth_type_is_ip_and_my_ip(plen)==0)
    {   //Not IP so ignoring
        //!@todo Add other protocols (and make each optional at compile time)
        return 0;
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	60 c1       	rjmp	.+704    	; 0x16c2 <_ZN9EtherCard10packetLoopEj+0x582>
    1402:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <_ZN8ENC28J606bufferE+0x22>
    }

#if ETHERCARD_ICMP
    if (gPB[IP_PROTO_P]==IP_PROTO_ICMP_V && gPB[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V)
    1406:	88 30       	cpi	r24, 0x08	; 8
    1408:	d9 f4       	brne	.+54     	; 0x1440 <_ZN9EtherCard10packetLoopEj+0x300>
    {   //Service ICMP echo request (ping)
        if (icmp_cb)
    140a:	e0 91 06 05 	lds	r30, 0x0506	; 0x800506 <_ZL7icmp_cb>
    140e:	f0 91 07 05 	lds	r31, 0x0507	; 0x800507 <_ZL7icmp_cb+0x1>
    1412:	30 97       	sbiw	r30, 0x00	; 0
            (*icmp_cb)(&(gPB[IP_SRC_P]));
    1414:	19 f0       	breq	.+6      	; 0x141c <_ZN9EtherCard10packetLoopEj+0x2dc>
    1416:	80 ee       	ldi	r24, 0xE0	; 224
    1418:	92 e0       	ldi	r25, 0x02	; 2
    EtherCard::copyIp(gPB + ETH_ARP_SRC_IP_P, EtherCard::myip);
    EtherCard::packetSend(42);
}

static void make_echo_reply_from_request(uint16_t len) {
    make_eth_ip();
    141a:	19 95       	eicall
    141c:	c3 dc       	rcall	.-1658   	; 0xda4 <_ZL11make_eth_ipv>
    gPB[ICMP_TYPE_P] = ICMP_TYPE_ECHOREPLY_V;
    141e:	e6 ec       	ldi	r30, 0xC6	; 198
    1420:	f2 e0       	ldi	r31, 0x02	; 2
    1422:	12 a2       	std	Z+34, r1	; 0x22
    if (gPB[ICMP_CHECKSUM_P] > (0xFF-0x08))
    1424:	84 a1       	ldd	r24, Z+36	; 0x24
    1426:	88 3f       	cpi	r24, 0xF8	; 248
    1428:	18 f0       	brcs	.+6      	; 0x1430 <_ZN9EtherCard10packetLoopEj+0x2f0>
        gPB[ICMP_CHECKSUM_P+1]++;
    142a:	95 a1       	ldd	r25, Z+37	; 0x25
    142c:	9f 5f       	subi	r25, 0xFF	; 255
    142e:	95 a3       	std	Z+37, r25	; 0x25
    gPB[ICMP_CHECKSUM_P] += 0x08;
    1430:	88 5f       	subi	r24, 0xF8	; 248
    1432:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <_ZN8ENC28J606bufferE+0x24>
    EtherCard::packetSend(len);
    1436:	ce 01       	movw	r24, r28
    1438:	87 da       	rcall	.-2802   	; 0x948 <_ZN8ENC28J6010packetSendEj>
    143a:	80 e0       	ldi	r24, 0x00	; 0
    if (gPB[IP_PROTO_P]==IP_PROTO_ICMP_V && gPB[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V)
    {   //Service ICMP echo request (ping)
        if (icmp_cb)
            (*icmp_cb)(&(gPB[IP_SRC_P]));
        make_echo_reply_from_request(plen);
        return 0;
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	41 c1       	rjmp	.+642    	; 0x16c2 <_ZN9EtherCard10packetLoopEj+0x582>
    1440:	61 d1       	rcall	.+706    	; 0x1704 <_ZN9EtherCard18udpServerListeningEv>
    }
#endif
#if ETHERCARD_UDPSERVER
    if (ether.udpServerListening() && gPB[IP_PROTO_P]==IP_PROTO_UDP_V)
    1442:	88 23       	and	r24, r24
    1444:	29 f0       	breq	.+10     	; 0x1450 <_ZN9EtherCard10packetLoopEj+0x310>
    1446:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <_ZN8ENC28J606bufferE+0x17>
    144a:	81 31       	cpi	r24, 0x11	; 17
    144c:	09 f4       	brne	.+2      	; 0x1450 <_ZN9EtherCard10packetLoopEj+0x310>
    144e:	27 c1       	rjmp	.+590    	; 0x169e <_ZN9EtherCard10packetLoopEj+0x55e>
    1450:	c6 33       	cpi	r28, 0x36	; 54
        if(ether.udpServerHasProcessedPacket(plen))
            return 0; //An UDP server handler (callback) has processed this packet
    }
#endif

    if (plen<54 || gPB[IP_PROTO_P]!=IP_PROTO_TCP_V )
    1452:	d1 05       	cpc	r29, r1
    1454:	08 f4       	brcc	.+2      	; 0x1458 <_ZN9EtherCard10packetLoopEj+0x318>
    1456:	ee c0       	rjmp	.+476    	; 0x1634 <_ZN9EtherCard10packetLoopEj+0x4f4>
    1458:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <_ZN8ENC28J606bufferE+0x17>
    145c:	86 30       	cpi	r24, 0x06	; 6
    145e:	09 f0       	breq	.+2      	; 0x1462 <_ZN9EtherCard10packetLoopEj+0x322>
    1460:	ec c0       	rjmp	.+472    	; 0x163a <_ZN9EtherCard10packetLoopEj+0x4fa>
    1462:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <_ZN8ENC28J606bufferE+0x24>
        return 0; //from here on we are only interested in TCP-packets; these are longer than 54 bytes

#if ETHERCARD_TCPCLIENT
    if (gPB[TCP_DST_PORT_H_P]==TCPCLIENT_SRC_PORT_H)
    1466:	8b 30       	cpi	r24, 0x0B	; 11
    1468:	09 f0       	breq	.+2      	; 0x146c <_ZN9EtherCard10packetLoopEj+0x32c>
    146a:	bf c0       	rjmp	.+382    	; 0x15ea <_ZN9EtherCard10packetLoopEj+0x4aa>
    146c:	44 e0       	ldi	r20, 0x04	; 4
    EtherCard::copyIp(gPB + IP_DST_P, dst);
    EtherCard::copyIp(gPB + IP_SRC_P, EtherCard::myip);
}

static uint8_t check_ip_message_is_from(const uint8_t *ip) {
    return memcmp(gPB + IP_SRC_P, ip, IP_LEN) == 0;
    146e:	50 e0       	ldi	r21, 0x00	; 0
    1470:	6a ec       	ldi	r22, 0xCA	; 202
    1472:	74 e0       	ldi	r23, 0x04	; 4
    1474:	80 ee       	ldi	r24, 0xE0	; 224
    1476:	92 e0       	ldi	r25, 0x02	; 2
    1478:	a6 d6       	rcall	.+3404   	; 0x21c6 <memcmp>
    147a:	89 2b       	or	r24, r25
    147c:	09 f0       	breq	.+2      	; 0x1480 <_ZN9EtherCard10packetLoopEj+0x340>
        return 0; //from here on we are only interested in TCP-packets; these are longer than 54 bytes

#if ETHERCARD_TCPCLIENT
    if (gPB[TCP_DST_PORT_H_P]==TCPCLIENT_SRC_PORT_H)
    {   //Source port is in range reserved (by EtherCard) for client TCP/IP connections
        if (check_ip_message_is_from(hisip)==0)
    147e:	e0 c0       	rjmp	.+448    	; 0x1640 <_ZN9EtherCard10packetLoopEj+0x500>
    1480:	10 91 f5 02 	lds	r17, 0x02F5	; 0x8002f5 <_ZN8ENC28J606bufferE+0x2f>
            return 0; //Not current TCP/IP connection (only handle one at a time)
        if (gPB[TCP_FLAGS_P] & TCP_FLAGS_RST_V)
    1484:	12 ff       	sbrs	r17, 2
    1486:	17 c0       	rjmp	.+46     	; 0x14b6 <_ZN9EtherCard10packetLoopEj+0x376>
    1488:	e0 91 0a 05 	lds	r30, 0x050A	; 0x80050a <_ZL20client_tcp_result_cb>
        {   //TCP reset flagged
            if (client_tcp_result_cb)
    148c:	f0 91 0b 05 	lds	r31, 0x050B	; 0x80050b <_ZL20client_tcp_result_cb+0x1>
    1490:	30 97       	sbiw	r30, 0x00	; 0
    1492:	59 f0       	breq	.+22     	; 0x14aa <_ZN9EtherCard10packetLoopEj+0x36a>
    1494:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <_ZN8ENC28J606bufferE+0x25>
                (*client_tcp_result_cb)((gPB[TCP_DST_PORT_L_P]>>5)&0x7,3,0,0);
    1498:	20 e0       	ldi	r18, 0x00	; 0
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	40 e0       	ldi	r20, 0x00	; 0
    149e:	50 e0       	ldi	r21, 0x00	; 0
    14a0:	63 e0       	ldi	r22, 0x03	; 3
    14a2:	82 95       	swap	r24
    14a4:	86 95       	lsr	r24
    14a6:	87 70       	andi	r24, 0x07	; 7
    14a8:	19 95       	eicall
            tcp_client_state = TCP_STATE_CLOSING;
    14aa:	85 e0       	ldi	r24, 0x05	; 5
    14ac:	80 93 0e 05 	sts	0x050E, r24	; 0x80050e <_ZL16tcp_client_state>
            return 0;
    14b0:	80 e0       	ldi	r24, 0x00	; 0
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	06 c1       	rjmp	.+524    	; 0x16c2 <_ZN9EtherCard10packetLoopEj+0x582>
        }
        len = getTcpPayloadLength();
    14b6:	fe dc       	rcall	.-1540   	; 0xeb4 <_ZN9EtherCard19getTcpPayloadLengthEv>
    14b8:	7c 01       	movw	r14, r24
    14ba:	80 91 0e 05 	lds	r24, 0x050E	; 0x80050e <_ZL16tcp_client_state>
        if (tcp_client_state==TCP_STATE_SYNSENT)
    14be:	82 30       	cpi	r24, 0x02	; 2
    14c0:	89 f5       	brne	.+98     	; 0x1524 <_ZN9EtherCard10packetLoopEj+0x3e4>
    14c2:	81 2f       	mov	r24, r17
    14c4:	80 71       	andi	r24, 0x10	; 16
        {   //Waiting for SYN-ACK
            if ((gPB[TCP_FLAGS_P] & TCP_FLAGS_SYN_V) && (gPB[TCP_FLAGS_P] &TCP_FLAGS_ACK_V))
    14c6:	12 71       	andi	r17, 0x12	; 18
    14c8:	12 31       	cpi	r17, 0x12	; 18
    14ca:	e9 f4       	brne	.+58     	; 0x1506 <_ZN9EtherCard10packetLoopEj+0x3c6>
            {   //SYN and ACK flags set so this is an acknowledgement to our SYN
                make_tcp_ack_from_any(0,0);
    14cc:	60 e0       	ldi	r22, 0x00	; 0
    14ce:	80 e0       	ldi	r24, 0x00	; 0
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	77 dc       	rcall	.-1810   	; 0xdc2 <_ZL21make_tcp_ack_from_anyih>
    14d4:	88 e1       	ldi	r24, 0x18	; 24
                gPB[TCP_FLAGS_P] = TCP_FLAGS_ACK_V|TCP_FLAGS_PUSH_V;
    14d6:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <_ZN8ENC28J606bufferE+0x2f>
    14da:	e0 91 08 05 	lds	r30, 0x0508	; 0x800508 <_ZL22client_tcp_datafill_cb>
                if (client_tcp_datafill_cb)
    14de:	f0 91 09 05 	lds	r31, 0x0509	; 0x800509 <_ZL22client_tcp_datafill_cb+0x1>
    14e2:	30 97       	sbiw	r30, 0x00	; 0
    14e4:	39 f0       	breq	.+14     	; 0x14f4 <_ZN9EtherCard10packetLoopEj+0x3b4>
                    len = (*client_tcp_datafill_cb)((gPB[TCP_SRC_PORT_L_P]>>5)&0x7);
    14e6:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <_ZN8ENC28J606bufferE+0x23>
    14ea:	82 95       	swap	r24
    14ec:	86 95       	lsr	r24
    14ee:	87 70       	andi	r24, 0x07	; 7
    14f0:	19 95       	eicall
    14f2:	02 c0       	rjmp	.+4      	; 0x14f8 <_ZN9EtherCard10packetLoopEj+0x3b8>
                else
                    len = 0;
    14f4:	80 e0       	ldi	r24, 0x00	; 0
    14f6:	90 e0       	ldi	r25, 0x00	; 0
                tcp_client_state = TCP_STATE_ESTABLISHED;
    14f8:	23 e0       	ldi	r18, 0x03	; 3
    14fa:	20 93 0e 05 	sts	0x050E, r18	; 0x80050e <_ZL16tcp_client_state>
                make_tcp_ack_with_data_noflags(len);
    14fe:	2c dc       	rcall	.-1960   	; 0xd58 <_ZL30make_tcp_ack_with_data_noflagsj>
    1500:	80 e0       	ldi	r24, 0x00	; 0
                len++;
                if (gPB[TCP_FLAGS_P] & TCP_FLAGS_ACK_V)
                    len = 0;
                make_tcp_ack_from_any(len,TCP_FLAGS_RST_V);
            }
            return 0;
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	de c0       	rjmp	.+444    	; 0x16c2 <_ZN9EtherCard10packetLoopEj+0x582>
                if (client_tcp_datafill_cb)
                    len = (*client_tcp_datafill_cb)((gPB[TCP_SRC_PORT_L_P]>>5)&0x7);
                else
                    len = 0;
                tcp_client_state = TCP_STATE_ESTABLISHED;
                make_tcp_ack_with_data_noflags(len);
    1506:	91 e0       	ldi	r25, 0x01	; 1
            }
            else
            {   //Expecting SYN+ACK so reset and resend SYN
                tcp_client_state = TCP_STATE_SENDSYN; // retry
    1508:	90 93 0e 05 	sts	0x050E, r25	; 0x80050e <_ZL16tcp_client_state>
    150c:	81 11       	cpse	r24, r1
                len++;
                if (gPB[TCP_FLAGS_P] & TCP_FLAGS_ACK_V)
    150e:	03 c0       	rjmp	.+6      	; 0x1516 <_ZN9EtherCard10packetLoopEj+0x3d6>
    1510:	c7 01       	movw	r24, r14
                make_tcp_ack_with_data_noflags(len);
            }
            else
            {   //Expecting SYN+ACK so reset and resend SYN
                tcp_client_state = TCP_STATE_SENDSYN; // retry
                len++;
    1512:	01 96       	adiw	r24, 0x01	; 1
    1514:	02 c0       	rjmp	.+4      	; 0x151a <_ZN9EtherCard10packetLoopEj+0x3da>
    1516:	80 e0       	ldi	r24, 0x00	; 0
                if (gPB[TCP_FLAGS_P] & TCP_FLAGS_ACK_V)
                    len = 0;
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	64 e0       	ldi	r22, 0x04	; 4
                make_tcp_ack_from_any(len,TCP_FLAGS_RST_V);
    151c:	52 dc       	rcall	.-1884   	; 0xdc2 <_ZL21make_tcp_ack_from_anyih>
    151e:	80 e0       	ldi	r24, 0x00	; 0
    1520:	90 e0       	ldi	r25, 0x00	; 0
            }
            return 0;
    1522:	cf c0       	rjmp	.+414    	; 0x16c2 <_ZN9EtherCard10packetLoopEj+0x582>
    1524:	83 30       	cpi	r24, 0x03	; 3
    1526:	09 f0       	breq	.+2      	; 0x152a <_ZN9EtherCard10packetLoopEj+0x3ea>
        }
        if (tcp_client_state==TCP_STATE_ESTABLISHED && len>0)
    1528:	47 c0       	rjmp	.+142    	; 0x15b8 <_ZN9EtherCard10packetLoopEj+0x478>
    152a:	e1 14       	cp	r14, r1
    152c:	f1 04       	cpc	r15, r1
    152e:	09 f4       	brne	.+2      	; 0x1532 <_ZN9EtherCard10packetLoopEj+0x3f2>
    1530:	bf c0       	rjmp	.+382    	; 0x16b0 <_ZN9EtherCard10packetLoopEj+0x570>
    1532:	e0 91 0a 05 	lds	r30, 0x050A	; 0x80050a <_ZL20client_tcp_result_cb>
        {   //TCP connection established so read data
            if (client_tcp_result_cb) {
    1536:	f0 91 0b 05 	lds	r31, 0x050B	; 0x80050b <_ZL20client_tcp_result_cb+0x1>
    153a:	30 97       	sbiw	r30, 0x00	; 0
    153c:	09 f4       	brne	.+2      	; 0x1540 <_ZN9EtherCard10packetLoopEj+0x400>
    153e:	b8 c0       	rjmp	.+368    	; 0x16b0 <_ZN9EtherCard10packetLoopEj+0x570>
    1540:	40 91 f4 02 	lds	r20, 0x02F4	; 0x8002f4 <_ZN8ENC28J606bufferE+0x2e>
                uint16_t tcpstart = TCP_DATA_START; // TCP_DATA_START is a formula
    1544:	50 e0       	ldi	r21, 0x00	; 0
    1546:	55 95       	asr	r21
    1548:	47 95       	ror	r20
    154a:	55 95       	asr	r21
    154c:	47 95       	ror	r20
    154e:	55 95       	asr	r21
    1550:	47 95       	ror	r20
    1552:	55 95       	asr	r21
    1554:	47 95       	ror	r20
    1556:	44 0f       	add	r20, r20
    1558:	55 1f       	adc	r21, r21
    155a:	44 0f       	add	r20, r20
    155c:	55 1f       	adc	r21, r21
    155e:	ce 01       	movw	r24, r28
    1560:	08 97       	sbiw	r24, 0x08	; 8
                if (tcpstart>plen-8)
    1562:	4e 5d       	subi	r20, 0xDE	; 222
    1564:	5f 4f       	sbci	r21, 0xFF	; 255
    1566:	84 17       	cp	r24, r20
    1568:	95 07       	cpc	r25, r21
    156a:	08 f4       	brcc	.+2      	; 0x156e <_ZN9EtherCard10packetLoopEj+0x42e>
    156c:	ac 01       	movw	r20, r24
                    tcpstart = plen-8; // dummy but save
                uint16_t save_len = len;
                if (tcpstart+len>plen)
    156e:	c7 01       	movw	r24, r14
    1570:	84 0f       	add	r24, r20
    1572:	95 1f       	adc	r25, r21
    1574:	c8 17       	cp	r28, r24
    1576:	d9 07       	cpc	r29, r25
    1578:	20 f4       	brcc	.+8      	; 0x1582 <_ZN9EtherCard10packetLoopEj+0x442>
                    save_len = plen-tcpstart;
    157a:	9e 01       	movw	r18, r28
    157c:	24 1b       	sub	r18, r20
    157e:	35 0b       	sbc	r19, r21
    1580:	01 c0       	rjmp	.+2      	; 0x1584 <_ZN9EtherCard10packetLoopEj+0x444>
        {   //TCP connection established so read data
            if (client_tcp_result_cb) {
                uint16_t tcpstart = TCP_DATA_START; // TCP_DATA_START is a formula
                if (tcpstart>plen-8)
                    tcpstart = plen-8; // dummy but save
                uint16_t save_len = len;
    1582:	97 01       	movw	r18, r14
                if (tcpstart+len>plen)
                    save_len = plen-tcpstart;
                (*client_tcp_result_cb)((gPB[TCP_DST_PORT_L_P]>>5)&0x7,0,tcpstart,save_len); //Call TCP handler (callback) function
    1584:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <_ZN8ENC28J606bufferE+0x25>
    1588:	60 e0       	ldi	r22, 0x00	; 0
    158a:	82 95       	swap	r24
    158c:	86 95       	lsr	r24
    158e:	87 70       	andi	r24, 0x07	; 7

                if(persist_tcp_connection)
    1590:	19 95       	eicall
    1592:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <_ZN9EtherCard22persist_tcp_connectionE>
    1596:	88 23       	and	r24, r24
                {   //Keep connection alive by sending ACK
                    make_tcp_ack_from_any(len,TCP_FLAGS_PUSH_V);
    1598:	31 f0       	breq	.+12     	; 0x15a6 <_ZN9EtherCard10packetLoopEj+0x466>
    159a:	68 e0       	ldi	r22, 0x08	; 8
    159c:	c7 01       	movw	r24, r14
    159e:	11 dc       	rcall	.-2014   	; 0xdc2 <_ZL21make_tcp_ack_from_anyih>
                else
                {   //Close connection
                    make_tcp_ack_from_any(len,TCP_FLAGS_PUSH_V|TCP_FLAGS_FIN_V);
                    tcp_client_state = TCP_STATE_CLOSED;
                }
                return 0;
    15a0:	80 e0       	ldi	r24, 0x00	; 0
    15a2:	90 e0       	ldi	r25, 0x00	; 0
                {   //Keep connection alive by sending ACK
                    make_tcp_ack_from_any(len,TCP_FLAGS_PUSH_V);
                }
                else
                {   //Close connection
                    make_tcp_ack_from_any(len,TCP_FLAGS_PUSH_V|TCP_FLAGS_FIN_V);
    15a4:	8e c0       	rjmp	.+284    	; 0x16c2 <_ZN9EtherCard10packetLoopEj+0x582>
    15a6:	69 e0       	ldi	r22, 0x09	; 9
    15a8:	c7 01       	movw	r24, r14
    15aa:	0b dc       	rcall	.-2026   	; 0xdc2 <_ZL21make_tcp_ack_from_anyih>
                    tcp_client_state = TCP_STATE_CLOSED;
    15ac:	86 e0       	ldi	r24, 0x06	; 6
    15ae:	80 93 0e 05 	sts	0x050E, r24	; 0x80050e <_ZL16tcp_client_state>
                }
                return 0;
    15b2:	80 e0       	ldi	r24, 0x00	; 0
    15b4:	90 e0       	ldi	r25, 0x00	; 0
            }
        }
        if (tcp_client_state != TCP_STATE_CLOSING)
    15b6:	85 c0       	rjmp	.+266    	; 0x16c2 <_ZN9EtherCard10packetLoopEj+0x582>
    15b8:	85 30       	cpi	r24, 0x05	; 5
    15ba:	09 f0       	breq	.+2      	; 0x15be <_ZN9EtherCard10packetLoopEj+0x47e>
                tcp_client_state = TCP_STATE_CLOSED; // connection terminated
            } else if (len>0) {
                make_tcp_ack_from_any(len,0);
            }
        }
        return 0;
    15bc:	76 c0       	rjmp	.+236    	; 0x16aa <_ZN9EtherCard10packetLoopEj+0x56a>
    15be:	80 e0       	ldi	r24, 0x00	; 0
    15c0:	90 e0       	ldi	r25, 0x00	; 0
        {   //
            if (gPB[TCP_FLAGS_P] & TCP_FLAGS_FIN_V) {
                if(tcp_client_state == TCP_STATE_ESTABLISHED) {
                    return 0; // In some instances FIN is received *before* DATA.  If that is the case, we just return here and keep looking for the data packet
                }
                make_tcp_ack_from_any(len+1,TCP_FLAGS_PUSH_V|TCP_FLAGS_FIN_V);
    15c2:	7f c0       	rjmp	.+254    	; 0x16c2 <_ZN9EtherCard10packetLoopEj+0x582>
    15c4:	69 e0       	ldi	r22, 0x09	; 9
    15c6:	c7 01       	movw	r24, r14
    15c8:	01 96       	adiw	r24, 0x01	; 1
    15ca:	fb db       	rcall	.-2058   	; 0xdc2 <_ZL21make_tcp_ack_from_anyih>
                tcp_client_state = TCP_STATE_CLOSED; // connection terminated
    15cc:	86 e0       	ldi	r24, 0x06	; 6
    15ce:	80 93 0e 05 	sts	0x050E, r24	; 0x80050e <_ZL16tcp_client_state>
            } else if (len>0) {
                make_tcp_ack_from_any(len,0);
            }
        }
        return 0;
    15d2:	80 e0       	ldi	r24, 0x00	; 0
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	75 c0       	rjmp	.+234    	; 0x16c2 <_ZN9EtherCard10packetLoopEj+0x582>
                if(tcp_client_state == TCP_STATE_ESTABLISHED) {
                    return 0; // In some instances FIN is received *before* DATA.  If that is the case, we just return here and keep looking for the data packet
                }
                make_tcp_ack_from_any(len+1,TCP_FLAGS_PUSH_V|TCP_FLAGS_FIN_V);
                tcp_client_state = TCP_STATE_CLOSED; // connection terminated
            } else if (len>0) {
    15d8:	e1 14       	cp	r14, r1
    15da:	f1 04       	cpc	r15, r1
    15dc:	a1 f1       	breq	.+104    	; 0x1646 <_ZN9EtherCard10packetLoopEj+0x506>
                make_tcp_ack_from_any(len,0);
    15de:	60 e0       	ldi	r22, 0x00	; 0
    15e0:	c7 01       	movw	r24, r14
    15e2:	ef db       	rcall	.-2082   	; 0xdc2 <_ZL21make_tcp_ack_from_anyih>
    15e4:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        return 0;
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	6c c0       	rjmp	.+216    	; 0x16c2 <_ZN9EtherCard10packetLoopEj+0x582>
    15ea:	be 01       	movw	r22, r28
    }
#endif

#if ETHERCARD_TCPSERVER
    //If we are here then this is a TCP/IP packet targeted at us and not related to our client connection so accept
    return accept(hisport, plen);
    15ec:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <_ZN9EtherCard7hisportE>
    15f0:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <_ZN9EtherCard7hisportE+0x1>
    15f4:	27 dd       	rcall	.-1458   	; 0x1044 <_ZN9EtherCard6acceptEjj>
    15f6:	65 c0       	rjmp	.+202    	; 0x16c2 <_ZN9EtherCard10packetLoopEj+0x582>
    15f8:	80 e0       	ldi	r24, 0x00	; 0
    15fa:	90 e0       	ldi	r25, 0x00	; 0
        if(is_lan(myip, hisip) && !has_dest_mac && !waiting_for_dest_mac) {
            client_arp_whohas(hisip);
            waiting_for_dest_mac = true;
        }

        return 0;
    15fc:	62 c0       	rjmp	.+196    	; 0x16c2 <_ZN9EtherCard10packetLoopEj+0x582>
    15fe:	80 e0       	ldi	r24, 0x00	; 0
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	5f c0       	rjmp	.+190    	; 0x16c2 <_ZN9EtherCard10packetLoopEj+0x582>
    1604:	80 e0       	ldi	r24, 0x00	; 0
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	5c c0       	rjmp	.+184    	; 0x16c2 <_ZN9EtherCard10packetLoopEj+0x582>
    160a:	80 e0       	ldi	r24, 0x00	; 0
    160c:	90 e0       	ldi	r25, 0x00	; 0
    }

    if (eth_type_is_ip_and_my_ip(plen)==0)
    {   //Not IP so ignoring
        //!@todo Add other protocols (and make each optional at compile time)
        return 0;
    160e:	59 c0       	rjmp	.+178    	; 0x16c2 <_ZN9EtherCard10packetLoopEj+0x582>
    1610:	80 e0       	ldi	r24, 0x00	; 0
    1612:	90 e0       	ldi	r25, 0x00	; 0
        }
        if (!has_dest_mac && waiting_for_dest_mac && client_store_mac(hisip, destmacaddr)) {
            has_dest_mac = true;
            waiting_for_dest_mac = false;
        }
        return 0;
    1614:	56 c0       	rjmp	.+172    	; 0x16c2 <_ZN9EtherCard10packetLoopEj+0x582>
    1616:	80 e0       	ldi	r24, 0x00	; 0
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	53 c0       	rjmp	.+166    	; 0x16c2 <_ZN9EtherCard10packetLoopEj+0x582>
    161c:	80 e0       	ldi	r24, 0x00	; 0
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	50 c0       	rjmp	.+160    	; 0x16c2 <_ZN9EtherCard10packetLoopEj+0x582>
    1622:	80 e0       	ldi	r24, 0x00	; 0
    }

    if (eth_type_is_ip_and_my_ip(plen)==0)
    {   //Not IP so ignoring
        //!@todo Add other protocols (and make each optional at compile time)
        return 0;
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	4d c0       	rjmp	.+154    	; 0x16c2 <_ZN9EtherCard10packetLoopEj+0x582>
    1628:	80 e0       	ldi	r24, 0x00	; 0
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	4a c0       	rjmp	.+148    	; 0x16c2 <_ZN9EtherCard10packetLoopEj+0x582>
    162e:	80 e0       	ldi	r24, 0x00	; 0
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	47 c0       	rjmp	.+142    	; 0x16c2 <_ZN9EtherCard10packetLoopEj+0x582>
    1634:	80 e0       	ldi	r24, 0x00	; 0
            return 0; //An UDP server handler (callback) has processed this packet
    }
#endif

    if (plen<54 || gPB[IP_PROTO_P]!=IP_PROTO_TCP_V )
        return 0; //from here on we are only interested in TCP-packets; these are longer than 54 bytes
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	44 c0       	rjmp	.+136    	; 0x16c2 <_ZN9EtherCard10packetLoopEj+0x582>
    163a:	80 e0       	ldi	r24, 0x00	; 0
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	41 c0       	rjmp	.+130    	; 0x16c2 <_ZN9EtherCard10packetLoopEj+0x582>
    1640:	80 e0       	ldi	r24, 0x00	; 0

#if ETHERCARD_TCPCLIENT
    if (gPB[TCP_DST_PORT_H_P]==TCPCLIENT_SRC_PORT_H)
    {   //Source port is in range reserved (by EtherCard) for client TCP/IP connections
        if (check_ip_message_is_from(hisip)==0)
            return 0; //Not current TCP/IP connection (only handle one at a time)
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	3e c0       	rjmp	.+124    	; 0x16c2 <_ZN9EtherCard10packetLoopEj+0x582>
    1646:	80 e0       	ldi	r24, 0x00	; 0
                tcp_client_state = TCP_STATE_CLOSED; // connection terminated
            } else if (len>0) {
                make_tcp_ack_from_any(len,0);
            }
        }
        return 0;
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	3b c0       	rjmp	.+118    	; 0x16c2 <_ZN9EtherCard10packetLoopEj+0x582>
    164c:	80 e0       	ldi	r24, 0x00	; 0
#endif
#if ETHERCARD_UDPSERVER
    if (ether.udpServerListening() && gPB[IP_PROTO_P]==IP_PROTO_UDP_V)
    {   //Call UDP server handler (callback) if one is defined for this packet
        if(ether.udpServerHasProcessedPacket(plen))
            return 0; //An UDP server handler (callback) has processed this packet
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	38 c0       	rjmp	.+112    	; 0x16c2 <_ZN9EtherCard10packetLoopEj+0x582>
    1652:	80 e0       	ldi	r24, 0x00	; 0
        }
        if (tcp_client_state != TCP_STATE_CLOSING)
        {   //
            if (gPB[TCP_FLAGS_P] & TCP_FLAGS_FIN_V) {
                if(tcp_client_state == TCP_STATE_ESTABLISHED) {
                    return 0; // In some instances FIN is received *before* DATA.  If that is the case, we just return here and keep looking for the data packet
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	35 c0       	rjmp	.+106    	; 0x16c2 <_ZN9EtherCard10packetLoopEj+0x582>
        }
#endif

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, dnsip) && !has_dns_mac && !waiting_for_dns_mac) {
            client_arp_whohas(dnsip);
    1658:	8e ec       	ldi	r24, 0xCE	; 206
    165a:	94 e0       	ldi	r25, 0x04	; 4
    165c:	e5 db       	rcall	.-2102   	; 0xe28 <_ZL17client_arp_whohasPh>
    165e:	81 e0       	ldi	r24, 0x01	; 1
            waiting_for_dns_mac = true;
    1660:	80 93 ff 04 	sts	0x04FF, r24	; 0x8004ff <_ZL19waiting_for_dns_mac>
    1664:	17 ce       	rjmp	.-978    	; 0x1294 <_ZN9EtherCard10packetLoopEj+0x154>
    1666:	8a ec       	ldi	r24, 0xCA	; 202
        }

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, hisip) && !has_dest_mac && !waiting_for_dest_mac) {
            client_arp_whohas(hisip);
    1668:	94 e0       	ldi	r25, 0x04	; 4
    166a:	de db       	rcall	.-2116   	; 0xe28 <_ZL17client_arp_whohasPh>
    166c:	81 e0       	ldi	r24, 0x01	; 1
    166e:	80 93 fd 04 	sts	0x04FD, r24	; 0x8004fd <_ZL20waiting_for_dest_mac>
            waiting_for_dest_mac = true;
    1672:	80 e0       	ldi	r24, 0x00	; 0
    1674:	90 e0       	ldi	r25, 0x00	; 0
        }

        return 0;
    1676:	25 c0       	rjmp	.+74     	; 0x16c2 <_ZN9EtherCard10packetLoopEj+0x582>
    1678:	ca 32       	cpi	r28, 0x2A	; 42
    167a:	d1 05       	cpc	r29, r1
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
    167c:	08 f0       	brcs	.+2      	; 0x1680 <_ZN9EtherCard10packetLoopEj+0x540>
    167e:	92 ce       	rjmp	.-732    	; 0x13a4 <_ZN9EtherCard10packetLoopEj+0x264>
    1680:	80 e0       	ldi	r24, 0x00	; 0
    1682:	90 e0       	ldi	r25, 0x00	; 0
    }

    if (eth_type_is_ip_and_my_ip(plen)==0)
    {   //Not IP so ignoring
        //!@todo Add other protocols (and make each optional at compile time)
        return 0;
    1684:	1e c0       	rjmp	.+60     	; 0x16c2 <_ZN9EtherCard10packetLoopEj+0x582>
    1686:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <_ZN8ENC28J606bufferE+0x15>
        return 0;
    }

    if (eth_type_is_arp_and_my_ip(plen))
    {   //Service ARP request
        if (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REQ_L_V)
    168a:	81 30       	cpi	r24, 0x01	; 1
    168c:	09 f0       	breq	.+2      	; 0x1690 <_ZN9EtherCard10packetLoopEj+0x550>
    168e:	4b ce       	rjmp	.-874    	; 0x1326 <_ZN9EtherCard10packetLoopEj+0x1e6>
    1690:	2b ce       	rjmp	.-938    	; 0x12e8 <_ZN9EtherCard10packetLoopEj+0x1a8>
    1692:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <_ZN8ENC28J606bufferE+0x17>
        //!@todo Add other protocols (and make each optional at compile time)
        return 0;
    }

#if ETHERCARD_ICMP
    if (gPB[IP_PROTO_P]==IP_PROTO_ICMP_V && gPB[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V)
    1696:	81 30       	cpi	r24, 0x01	; 1
    1698:	09 f0       	breq	.+2      	; 0x169c <_ZN9EtherCard10packetLoopEj+0x55c>
    169a:	d2 ce       	rjmp	.-604    	; 0x1440 <_ZN9EtherCard10packetLoopEj+0x300>
    169c:	b2 ce       	rjmp	.-668    	; 0x1402 <_ZN9EtherCard10packetLoopEj+0x2c2>
    169e:	ce 01       	movw	r24, r28
    16a0:	38 d0       	rcall	.+112    	; 0x1712 <_ZN9EtherCard27udpServerHasProcessedPacketEj>
    }
#endif
#if ETHERCARD_UDPSERVER
    if (ether.udpServerListening() && gPB[IP_PROTO_P]==IP_PROTO_UDP_V)
    {   //Call UDP server handler (callback) if one is defined for this packet
        if(ether.udpServerHasProcessedPacket(plen))
    16a2:	88 23       	and	r24, r24
    16a4:	09 f4       	brne	.+2      	; 0x16a8 <_ZN9EtherCard10packetLoopEj+0x568>
    16a6:	d4 ce       	rjmp	.-600    	; 0x1450 <_ZN9EtherCard10packetLoopEj+0x310>
    16a8:	d1 cf       	rjmp	.-94     	; 0x164c <_ZN9EtherCard10packetLoopEj+0x50c>
    16aa:	10 ff       	sbrs	r17, 0
    16ac:	95 cf       	rjmp	.-214    	; 0x15d8 <_ZN9EtherCard10packetLoopEj+0x498>
    16ae:	8a cf       	rjmp	.-236    	; 0x15c4 <_ZN9EtherCard10packetLoopEj+0x484>
                return 0;
            }
        }
        if (tcp_client_state != TCP_STATE_CLOSING)
        {   //
            if (gPB[TCP_FLAGS_P] & TCP_FLAGS_FIN_V) {
    16b0:	10 fd       	sbrc	r17, 0
    16b2:	cf cf       	rjmp	.-98     	; 0x1652 <_ZN9EtherCard10packetLoopEj+0x512>
    16b4:	91 cf       	rjmp	.-222    	; 0x15d8 <_ZN9EtherCard10packetLoopEj+0x498>
    16b6:	ca 32       	cpi	r28, 0x2A	; 42
    16b8:	d1 05       	cpc	r29, r1
    16ba:	08 f0       	brcs	.+2      	; 0x16be <_ZN9EtherCard10packetLoopEj+0x57e>
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
    16bc:	78 ce       	rjmp	.-784    	; 0x13ae <_ZN9EtherCard10packetLoopEj+0x26e>
    16be:	80 e0       	ldi	r24, 0x00	; 0
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	df 91       	pop	r29
    }

    if (eth_type_is_ip_and_my_ip(plen)==0)
    {   //Not IP so ignoring
        //!@todo Add other protocols (and make each optional at compile time)
        return 0;
    16c4:	cf 91       	pop	r28
    16c6:	1f 91       	pop	r17

#if ETHERCARD_TCPSERVER
    //If we are here then this is a TCP/IP packet targeted at us and not related to our client connection so accept
    return accept(hisport, plen);
#endif
}
    16c8:	0f 91       	pop	r16
    16ca:	ff 90       	pop	r15
    16cc:	ef 90       	pop	r14
    16ce:	08 95       	ret

000016d0 <_ZN9EtherCard21udpServerListenOnPortEPFvjPhjPKcjEj>:
    16d0:	9c 01       	movw	r18, r24
    16d2:	90 91 10 05 	lds	r25, 0x0510	; 0x800510 <numListeners>
    {
        if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((uint8_t) listeners[i].port)) {
            listeners[i].listening = true;
        }
    }
}
    16d6:	98 30       	cpi	r25, 0x08	; 8
    16d8:	a0 f4       	brcc	.+40     	; 0x1702 <_ZN9EtherCard21udpServerListenOnPortEPFvjPhjPKcjEj+0x32>
    16da:	e9 2f       	mov	r30, r25
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	af 01       	movw	r20, r30
    16e0:	44 0f       	add	r20, r20
    16e2:	55 1f       	adc	r21, r21
    16e4:	44 0f       	add	r20, r20
    16e6:	55 1f       	adc	r21, r21
    16e8:	e4 0f       	add	r30, r20
    16ea:	f5 1f       	adc	r31, r21
    16ec:	ef 5e       	subi	r30, 0xEF	; 239
    16ee:	fa 4f       	sbci	r31, 0xFA	; 250
    16f0:	31 83       	std	Z+1, r19	; 0x01
    16f2:	20 83       	st	Z, r18
    16f4:	73 83       	std	Z+3, r23	; 0x03
    16f6:	62 83       	std	Z+2, r22	; 0x02
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	84 83       	std	Z+4, r24	; 0x04
    16fc:	9f 5f       	subi	r25, 0xFF	; 255
    16fe:	90 93 10 05 	sts	0x0510, r25	; 0x800510 <numListeners>
    1702:	08 95       	ret

00001704 <_ZN9EtherCard18udpServerListeningEv>:

bool EtherCard::udpServerListening() {
    return numListeners > 0;
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	90 91 10 05 	lds	r25, 0x0510	; 0x800510 <numListeners>
    170a:	91 11       	cpse	r25, r1
    170c:	01 c0       	rjmp	.+2      	; 0x1710 <_ZN9EtherCard18udpServerListeningEv+0xc>
    170e:	80 e0       	ldi	r24, 0x00	; 0
}
    1710:	08 95       	ret

00001712 <_ZN9EtherCard27udpServerHasProcessedPacketEj>:

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    1712:	8f 92       	push	r8
    1714:	9f 92       	push	r9
    1716:	bf 92       	push	r11
    1718:	cf 92       	push	r12
    171a:	df 92       	push	r13
    171c:	ef 92       	push	r14
    171e:	ff 92       	push	r15
    1720:	0f 93       	push	r16
    1722:	1f 93       	push	r17
    1724:	cf 93       	push	r28
    1726:	df 93       	push	r29
    bool packetProcessed = false;
    for(int i = 0; i < numListeners; i++)
    1728:	80 91 10 05 	lds	r24, 0x0510	; 0x800510 <numListeners>
    172c:	88 23       	and	r24, r24
    172e:	09 f4       	brne	.+2      	; 0x1732 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x20>
    1730:	46 c0       	rjmp	.+140    	; 0x17be <_ZN9EtherCard27udpServerHasProcessedPacketEj+0xac>
    1732:	c1 e1       	ldi	r28, 0x11	; 17
    1734:	d5 e0       	ldi	r29, 0x05	; 5
    1736:	e1 2c       	mov	r14, r1
    1738:	f1 2c       	mov	r15, r1
    173a:	80 e0       	ldi	r24, 0x00	; 0
    {
        if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((uint8_t) listeners[i].port) && listeners[i].listening)
    173c:	0f 2e       	mov	r0, r31
    173e:	f6 ec       	ldi	r31, 0xC6	; 198
    1740:	cf 2e       	mov	r12, r31
    1742:	f2 e0       	ldi	r31, 0x02	; 2
    1744:	df 2e       	mov	r13, r31
    1746:	f0 2d       	mov	r31, r0
                listeners[i].port,
                gPB + IP_SRC_P,
                (gPB[UDP_SRC_PORT_H_P] << 8) | gPB[UDP_SRC_PORT_L_P],
                (const char *) (gPB + UDP_DATA_P),
                datalen);
            packetProcessed = true;
    1748:	bb 24       	eor	r11, r11
    174a:	b3 94       	inc	r11

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    bool packetProcessed = false;
    for(int i = 0; i < numListeners; i++)
    {
        if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((uint8_t) listeners[i].port) && listeners[i].listening)
    174c:	aa 81       	ldd	r26, Y+2	; 0x02
    174e:	bb 81       	ldd	r27, Y+3	; 0x03
    1750:	f6 01       	movw	r30, r12
    1752:	24 a1       	ldd	r18, Z+36	; 0x24
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	4b 2f       	mov	r20, r27
    1758:	55 27       	eor	r21, r21
    175a:	24 17       	cp	r18, r20
    175c:	35 07       	cpc	r19, r21
    175e:	21 f5       	brne	.+72     	; 0x17a8 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x96>
    1760:	25 a1       	ldd	r18, Z+37	; 0x25
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	ad 01       	movw	r20, r26
    1766:	55 27       	eor	r21, r21
    1768:	24 17       	cp	r18, r20
    176a:	35 07       	cpc	r19, r21
    176c:	e9 f4       	brne	.+58     	; 0x17a8 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x96>
    176e:	9c 81       	ldd	r25, Y+4	; 0x04
    1770:	99 23       	and	r25, r25
    1772:	d1 f0       	breq	.+52     	; 0x17a8 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x96>
            listeners[i].callback(
                listeners[i].port,
                gPB + IP_SRC_P,
                (gPB[UDP_SRC_PORT_H_P] << 8) | gPB[UDP_SRC_PORT_L_P],
                (const char *) (gPB + UDP_DATA_P),
                datalen);
    1774:	07 a1       	ldd	r16, Z+39	; 0x27
    1776:	10 e0       	ldi	r17, 0x00	; 0
    1778:	08 50       	subi	r16, 0x08	; 8
    177a:	11 09       	sbc	r17, r1
    177c:	86 a1       	ldd	r24, Z+38	; 0x26
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	98 2f       	mov	r25, r24
    1782:	88 27       	eor	r24, r24
    1784:	08 0f       	add	r16, r24
    1786:	19 1f       	adc	r17, r25
    1788:	42 a1       	ldd	r20, Z+34	; 0x22
    178a:	50 e0       	ldi	r21, 0x00	; 0
    178c:	54 2f       	mov	r21, r20
    178e:	44 27       	eor	r20, r20
    1790:	83 a1       	ldd	r24, Z+35	; 0x23
    1792:	48 2b       	or	r20, r24
    1794:	88 80       	ld	r8, Y
    1796:	99 80       	ldd	r9, Y+1	; 0x01
    1798:	20 ef       	ldi	r18, 0xF0	; 240
    179a:	32 e0       	ldi	r19, 0x02	; 2
    179c:	60 ee       	ldi	r22, 0xE0	; 224
    179e:	72 e0       	ldi	r23, 0x02	; 2
    17a0:	cd 01       	movw	r24, r26
    17a2:	f4 01       	movw	r30, r8
    17a4:	19 95       	eicall
            packetProcessed = true;
    17a6:	8b 2d       	mov	r24, r11
    return numListeners > 0;
}

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    bool packetProcessed = false;
    for(int i = 0; i < numListeners; i++)
    17a8:	ff ef       	ldi	r31, 0xFF	; 255
    17aa:	ef 1a       	sub	r14, r31
    17ac:	ff 0a       	sbc	r15, r31
    17ae:	25 96       	adiw	r28, 0x05	; 5
    17b0:	20 91 10 05 	lds	r18, 0x0510	; 0x800510 <numListeners>
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	e2 16       	cp	r14, r18
    17b8:	f3 06       	cpc	r15, r19
    17ba:	44 f2       	brlt	.-112    	; 0x174c <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x3a>
    17bc:	01 c0       	rjmp	.+2      	; 0x17c0 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0xae>
bool EtherCard::udpServerListening() {
    return numListeners > 0;
}

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    bool packetProcessed = false;
    17be:	80 e0       	ldi	r24, 0x00	; 0
                datalen);
            packetProcessed = true;
        }
    }
    return packetProcessed;
}
    17c0:	df 91       	pop	r29
    17c2:	cf 91       	pop	r28
    17c4:	1f 91       	pop	r17
    17c6:	0f 91       	pop	r16
    17c8:	ff 90       	pop	r15
    17ca:	ef 90       	pop	r14
    17cc:	df 90       	pop	r13
    17ce:	cf 90       	pop	r12
    17d0:	bf 90       	pop	r11
    17d2:	9f 90       	pop	r9
    17d4:	8f 90       	pop	r8
    17d6:	08 95       	ret

000017d8 <_ZN9EtherCard6copyIpEPhPKh>:
#include "../Peripherals/HardwareSerial.h"
#include <stdlib.h>
#include <ctype.h>

void EtherCard::copyIp (uint8_t *dst, const uint8_t *src) {
    memcpy(dst, src, IP_LEN);
    17d8:	fb 01       	movw	r30, r22
    17da:	20 81       	ld	r18, Z
    17dc:	31 81       	ldd	r19, Z+1	; 0x01
    17de:	fc 01       	movw	r30, r24
    17e0:	31 83       	std	Z+1, r19	; 0x01
    17e2:	20 83       	st	Z, r18
    17e4:	fb 01       	movw	r30, r22
    17e6:	22 81       	ldd	r18, Z+2	; 0x02
    17e8:	33 81       	ldd	r19, Z+3	; 0x03
    17ea:	fc 01       	movw	r30, r24
    17ec:	33 83       	std	Z+3, r19	; 0x03
    17ee:	22 83       	std	Z+2, r18	; 0x02
    17f0:	08 95       	ret

000017f2 <_ZN9EtherCard7copyMacEPhPKh>:
}

void EtherCard::copyMac (uint8_t *dst, const uint8_t *src) {
    17f2:	dc 01       	movw	r26, r24
    memcpy(dst, src, ETH_LEN);
    17f4:	96 e0       	ldi	r25, 0x06	; 6
    17f6:	fb 01       	movw	r30, r22
    17f8:	01 90       	ld	r0, Z+
    17fa:	0d 92       	st	X+, r0
    17fc:	9a 95       	dec	r25
    17fe:	e1 f7       	brne	.-8      	; 0x17f8 <_ZN9EtherCard7copyMacEPhPKh+0x6>
    1800:	08 95       	ret

00001802 <_ZN9EtherComm13CheckChecksumEPKch>:
	}
}

bool EtherComm::CheckChecksum(const char *data, uint8_t len){
  //data++; //Ignore first byte, the start byte.
  uint8_t checksum = (uint8_t)(*(data++)); //Start by 'adding' the command to the checksum
    1802:	fc 01       	movw	r30, r24
    1804:	20 81       	ld	r18, Z
  checksum += (uint8_t)(*(data++));
    1806:	dc 01       	movw	r26, r24
    1808:	12 96       	adiw	r26, 0x02	; 2
    180a:	81 81       	ldd	r24, Z+1	; 0x01
    180c:	92 2f       	mov	r25, r18
    180e:	98 0f       	add	r25, r24
  while(len-- > 0){
    1810:	3f ef       	ldi	r19, 0xFF	; 255
    1812:	36 0f       	add	r19, r22
    1814:	66 23       	and	r22, r22
    1816:	61 f0       	breq	.+24     	; 0x1830 <_ZN9EtherComm13CheckChecksumEPKch+0x2e>
    1818:	fd 01       	movw	r30, r26
    181a:	83 2f       	mov	r24, r19
    checksum += (uint8_t)(*(data++));
    181c:	21 91       	ld	r18, Z+
    181e:	92 0f       	add	r25, r18

bool EtherComm::CheckChecksum(const char *data, uint8_t len){
  //data++; //Ignore first byte, the start byte.
  uint8_t checksum = (uint8_t)(*(data++)); //Start by 'adding' the command to the checksum
  checksum += (uint8_t)(*(data++));
  while(len-- > 0){
    1820:	81 50       	subi	r24, 0x01	; 1
    1822:	e0 f7       	brcc	.-8      	; 0x181c <_ZN9EtherComm13CheckChecksumEPKch+0x1a>
    1824:	23 2f       	mov	r18, r19
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	2f 5f       	subi	r18, 0xFF	; 255
    182a:	3f 4f       	sbci	r19, 0xFF	; 255
    182c:	a2 0f       	add	r26, r18
    182e:	b3 1f       	adc	r27, r19
    checksum += (uint8_t)(*(data++));
  }
//  Serial.println((uint8_t)(checksum & CHECKSUM_MASK));
  return (checksum & CHECKSUM_MASK) == (uint8_t)(*data);
    1830:	81 e0       	ldi	r24, 0x01	; 1
    1832:	2c 91       	ld	r18, X
    1834:	29 13       	cpse	r18, r25
    1836:	80 e0       	ldi	r24, 0x00	; 0
}
    1838:	08 95       	ret

0000183a <_Z10udpReceivejPhjPKcj>:

//char EtherComm::buffer[BUFFER_SIZE];
uint8_t* EtherComm::buffer = ether.buffer + UDP_DATA_P;

//callback that prints received packets to the serial port
void udpReceive(uint16_t dest_port, uint8_t src_ip[IP_LEN], uint16_t src_port, const char *data, uint16_t packetLen){
    183a:	0f 93       	push	r16
    183c:	1f 93       	push	r17
    183e:	cf 93       	push	r28
    1840:	df 93       	push	r29
	}
	Serial.println();
	Serial.print("Checksum: ");
	Serial.println((uint8_t)(*index));
*/	
	if(packetLen >= 3){ //At minimum, start byte, command, and checksum.
    1842:	a8 01       	movw	r20, r16
    1844:	43 50       	subi	r20, 0x03	; 3
    1846:	51 09       	sbc	r21, r1
    1848:	4f 3f       	cpi	r20, 0xFF	; 255
    184a:	51 05       	cpc	r21, r1
    184c:	09 f0       	breq	.+2      	; 0x1850 <_Z10udpReceivejPhjPKcj+0x16>
    184e:	90 f4       	brcc	.+36     	; 0x1874 <_Z10udpReceivejPhjPKcj+0x3a>
		if(packetLen <= 258){
			uint8_t dataLen = (uint8_t)(packetLen - 3);
			if((uint8_t)data[0] == START_BYTE){
    1850:	f9 01       	movw	r30, r18
    1852:	80 81       	ld	r24, Z
    1854:	8f 3f       	cpi	r24, 0xFF	; 255
    1856:	71 f4       	brne	.+28     	; 0x1874 <_Z10udpReceivejPhjPKcj+0x3a>
    1858:	e9 01       	movw	r28, r18
	Serial.print("Checksum: ");
	Serial.println((uint8_t)(*index));
*/	
	if(packetLen >= 3){ //At minimum, start byte, command, and checksum.
		if(packetLen <= 258){
			uint8_t dataLen = (uint8_t)(packetLen - 3);
    185a:	03 50       	subi	r16, 0x03	; 3
			if((uint8_t)data[0] == START_BYTE){
			//		Serial.print("Computed Checksum: ");
				if(EtherComm::CheckChecksum(data, dataLen)){
    185c:	60 2f       	mov	r22, r16
    185e:	c9 01       	movw	r24, r18
    1860:	d0 df       	rcall	.-96     	; 0x1802 <_ZN9EtherComm13CheckChecksumEPKch>
    1862:	88 23       	and	r24, r24
    1864:	39 f0       	breq	.+14     	; 0x1874 <_Z10udpReceivejPhjPKcj+0x3a>
					EtherComm::CommandReceived((uint8_t)data[1], (const uint8_t*)(data + 2), dataLen);
    1866:	be 01       	movw	r22, r28
    1868:	6e 5f       	subi	r22, 0xFE	; 254
    186a:	7f 4f       	sbci	r23, 0xFF	; 255
    186c:	40 2f       	mov	r20, r16
    186e:	89 81       	ldd	r24, Y+1	; 0x01
    1870:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_ZN9EtherComm15CommandReceivedEhPKhh>
				}
			}
		}
	}
}
    1874:	df 91       	pop	r29
    1876:	cf 91       	pop	r28
    1878:	1f 91       	pop	r17
    187a:	0f 91       	pop	r16
    187c:	08 95       	ret

0000187e <_ZN9EtherComm5beginEjjRVhS1_h>:
  }
//  Serial.println((uint8_t)(checksum & CHECKSUM_MASK));
  return (checksum & CHECKSUM_MASK) == (uint8_t)(*data);
}

bool EtherComm::begin(uint16_t recvPort, uint16_t destPort, Register& csDDR, Register& csPort, uint8_t csPin){
    187e:	0f 93       	push	r16
    1880:	cf 93       	push	r28
    1882:	df 93       	push	r29
    1884:	ec 01       	movw	r28, r24
    1886:	ca 01       	movw	r24, r20
    1888:	a9 01       	movw	r20, r18
    188a:	20 2f       	mov	r18, r16
  EtherComm::_recvPort = recvPort;
    188c:	d0 93 3c 05 	sts	0x053C, r29	; 0x80053c <_ZN9EtherComm9_recvPortE+0x1>
    1890:	c0 93 3b 05 	sts	0x053B, r28	; 0x80053b <_ZN9EtherComm9_recvPortE>
  EtherComm::_destPort = destPort;
    1894:	70 93 3a 05 	sts	0x053A, r23	; 0x80053a <_ZN9EtherComm9_destPortE+0x1>
    1898:	60 93 39 05 	sts	0x0539, r22	; 0x800539 <_ZN9EtherComm9_destPortE>
  
  if (ether.begin(EtherComm::_mymac, csDDR, csPort, csPin) == 0) return false;
    189c:	bc 01       	movw	r22, r24
    189e:	8a e2       	ldi	r24, 0x2A	; 42
    18a0:	92 e0       	ldi	r25, 0x02	; 2
    18a2:	17 d9       	rcall	.-3538   	; 0xad2 <_ZN9EtherCard5beginEPKhRVhS3_h>
    18a4:	88 23       	and	r24, r24
    18a6:	79 f0       	breq	.+30     	; 0x18c6 <_ZN9EtherComm5beginEjjRVhS1_h+0x48>
  ether.staticSetup(EtherComm::_myip, EtherComm::_gwip);
    18a8:	20 e0       	ldi	r18, 0x00	; 0
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	40 e0       	ldi	r20, 0x00	; 0
    18ae:	50 e0       	ldi	r21, 0x00	; 0
    18b0:	60 e3       	ldi	r22, 0x30	; 48
    18b2:	72 e0       	ldi	r23, 0x02	; 2
    18b4:	84 e3       	ldi	r24, 0x34	; 52
    18b6:	92 e0       	ldi	r25, 0x02	; 2
    18b8:	2e d9       	rcall	.-3492   	; 0xb16 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_>
  ether.printIp("GW:  ", ether.gwip);
  ether.printIp("DNS: ", ether.dnsip);
  */
  
  //Register the udpSerialPrint() method to listen to port the receive port.
  ether.udpServerListenOnPort(&udpReceive, recvPort);
    18ba:	be 01       	movw	r22, r28
    18bc:	8d e1       	ldi	r24, 0x1D	; 29
    18be:	9c e0       	ldi	r25, 0x0C	; 12
    18c0:	07 df       	rcall	.-498    	; 0x16d0 <_ZN9EtherCard21udpServerListenOnPortEPFvjPhjPKcjEj>
  
  return true;
    18c2:	81 e0       	ldi	r24, 0x01	; 1
    18c4:	01 c0       	rjmp	.+2      	; 0x18c8 <_ZN9EtherComm5beginEjjRVhS1_h+0x4a>

bool EtherComm::begin(uint16_t recvPort, uint16_t destPort, Register& csDDR, Register& csPort, uint8_t csPin){
  EtherComm::_recvPort = recvPort;
  EtherComm::_destPort = destPort;
  
  if (ether.begin(EtherComm::_mymac, csDDR, csPort, csPin) == 0) return false;
    18c6:	80 e0       	ldi	r24, 0x00	; 0
  
  //Register the udpSerialPrint() method to listen to port the receive port.
  ether.udpServerListenOnPort(&udpReceive, recvPort);
  
  return true;
}
    18c8:	df 91       	pop	r29
    18ca:	cf 91       	pop	r28
    18cc:	0f 91       	pop	r16
    18ce:	08 95       	ret

000018d0 <_ZN9EtherComm11SendCommandEhh>:

void EtherComm::SendCommand(uint8_t cmd, uint8_t len){
    18d0:	0f 93       	push	r16
    18d2:	1f 93       	push	r17
    18d4:	cf 93       	push	r28
    18d6:	df 93       	push	r29
  EtherComm::buffer[0] = START_BYTE;
    18d8:	e0 91 24 02 	lds	r30, 0x0224	; 0x800224 <_ZN9EtherComm6bufferE>
    18dc:	f0 91 25 02 	lds	r31, 0x0225	; 0x800225 <_ZN9EtherComm6bufferE+0x1>
    18e0:	9f ef       	ldi	r25, 0xFF	; 255
    18e2:	90 83       	st	Z, r25
  EtherComm::buffer[1] = cmd;
    18e4:	e0 91 24 02 	lds	r30, 0x0224	; 0x800224 <_ZN9EtherComm6bufferE>
    18e8:	f0 91 25 02 	lds	r31, 0x0225	; 0x800225 <_ZN9EtherComm6bufferE+0x1>
    18ec:	81 83       	std	Z+1, r24	; 0x01
  //EtherComm::buffer[2] = len;
  
  uint8_t checksum = START_BYTE + cmd;
    18ee:	81 50       	subi	r24, 0x01	; 1
  uint8_t* index = &EtherComm::buffer[2]; //TODO why is char* being used? convert ot uint8_t*!!
    18f0:	c0 91 24 02 	lds	r28, 0x0224	; 0x800224 <_ZN9EtherComm6bufferE>
    18f4:	d0 91 25 02 	lds	r29, 0x0225	; 0x800225 <_ZN9EtherComm6bufferE+0x1>
    18f8:	de 01       	movw	r26, r28
    18fa:	12 96       	adiw	r26, 0x02	; 2
  uint8_t bytes = len;
  while(bytes-- > 0){
    18fc:	4f ef       	ldi	r20, 0xFF	; 255
    18fe:	46 0f       	add	r20, r22
    1900:	66 23       	and	r22, r22
    1902:	81 f0       	breq	.+32     	; 0x1924 <_ZN9EtherComm11SendCommandEhh+0x54>
    1904:	fd 01       	movw	r30, r26
    1906:	50 e0       	ldi	r21, 0x00	; 0
    1908:	9a 01       	movw	r18, r20
    190a:	2d 5f       	subi	r18, 0xFD	; 253
    190c:	3f 4f       	sbci	r19, 0xFF	; 255
    190e:	2c 0f       	add	r18, r28
    1910:	3d 1f       	adc	r19, r29
    checksum += (uint8_t)(*(index++));  
    1912:	91 91       	ld	r25, Z+
    1914:	89 0f       	add	r24, r25
  //EtherComm::buffer[2] = len;
  
  uint8_t checksum = START_BYTE + cmd;
  uint8_t* index = &EtherComm::buffer[2]; //TODO why is char* being used? convert ot uint8_t*!!
  uint8_t bytes = len;
  while(bytes-- > 0){
    1916:	e2 17       	cp	r30, r18
    1918:	f3 07       	cpc	r31, r19
    191a:	d9 f7       	brne	.-10     	; 0x1912 <_ZN9EtherComm11SendCommandEhh+0x42>
    191c:	4f 5f       	subi	r20, 0xFF	; 255
    191e:	5f 4f       	sbci	r21, 0xFF	; 255
    1920:	a4 0f       	add	r26, r20
    1922:	b5 1f       	adc	r27, r21
    checksum += (uint8_t)(*(index++));  
  }
  (*index) = (uint8_t)(checksum & CHECKSUM_MASK);
    1924:	8c 93       	st	X, r24

  //Serial.print("Send: ");
  //Serial.println(len);
  ether.sendUdp(EtherComm::buffer, (uint16_t)len + (uint16_t)3, _recvPort, _destIP, _destPort);
    1926:	00 91 39 05 	lds	r16, 0x0539	; 0x800539 <_ZN9EtherComm9_destPortE>
    192a:	10 91 3a 05 	lds	r17, 0x053A	; 0x80053a <_ZN9EtherComm9_destPortE+0x1>
    192e:	40 91 3b 05 	lds	r20, 0x053B	; 0x80053b <_ZN9EtherComm9_recvPortE>
    1932:	50 91 3c 05 	lds	r21, 0x053C	; 0x80053c <_ZN9EtherComm9_recvPortE+0x1>
    1936:	70 e0       	ldi	r23, 0x00	; 0
    1938:	6d 5f       	subi	r22, 0xFD	; 253
    193a:	7f 4f       	sbci	r23, 0xFF	; 255
    193c:	26 e2       	ldi	r18, 0x26	; 38
    193e:	32 e0       	ldi	r19, 0x02	; 2
    1940:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <_ZN9EtherComm6bufferE>
    1944:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <_ZN9EtherComm6bufferE+0x1>
    1948:	44 db       	rcall	.-2424   	; 0xfd2 <_ZN9EtherCard7sendUdpEPKhjjS1_j>
}
    194a:	df 91       	pop	r29
    194c:	cf 91       	pop	r28
    194e:	1f 91       	pop	r17
    1950:	0f 91       	pop	r16
    1952:	08 95       	ret

00001954 <main>:
	public:
	inline HardwareSerial(
	volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
	volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
	volatile uint8_t *ucsrc, volatile uint8_t *udr);
	void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    1954:	26 e0       	ldi	r18, 0x06	; 6
    1956:	40 e8       	ldi	r20, 0x80	; 128
    1958:	55 e2       	ldi	r21, 0x25	; 37
    195a:	60 e0       	ldi	r22, 0x00	; 0
    195c:	70 e0       	ldi	r23, 0x00	; 0
    195e:	8d e3       	ldi	r24, 0x3D	; 61
    1960:	95 e0       	ldi	r25, 0x05	; 5
    1962:	01 d1       	rcall	.+514    	; 0x1b66 <_ZN14HardwareSerial5beginEmh>
#include "Peripherals/HardwareSerial.h"


int main(void){
	Serial.begin(9600);
	Serial.println("\nInitializing...");
    1964:	6e e3       	ldi	r22, 0x3E	; 62
    1966:	72 e0       	ldi	r23, 0x02	; 2
    1968:	8d e3       	ldi	r24, 0x3D	; 61
    196a:	95 e0       	ldi	r25, 0x05	; 5
    196c:	d0 d3       	rcall	.+1952   	; 0x210e <_ZN5Print7printlnEPKc>
	
	
	if(!EtherComm::begin((uint16_t)6001, (uint16_t)6002, EthernetDDR, EthernetPort, EthernetPin_CS)){
    196e:	00 e2       	ldi	r16, 0x20	; 32
    1970:	22 e0       	ldi	r18, 0x02	; 2
    1972:	31 e0       	ldi	r19, 0x01	; 1
    1974:	41 e0       	ldi	r20, 0x01	; 1
    1976:	51 e0       	ldi	r21, 0x01	; 1
    1978:	62 e7       	ldi	r22, 0x72	; 114
    197a:	77 e1       	ldi	r23, 0x17	; 23
    197c:	81 e7       	ldi	r24, 0x71	; 113
    197e:	97 e1       	ldi	r25, 0x17	; 23
    1980:	7e df       	rcall	.-260    	; 0x187e <_ZN9EtherComm5beginEjjRVhS1_h>
    1982:	81 11       	cpse	r24, r1
    1984:	06 c0       	rjmp	.+12     	; 0x1992 <main+0x3e>
		Serial.println("Failed to access Ethernet controller.");
    1986:	6f e4       	ldi	r22, 0x4F	; 79
    1988:	72 e0       	ldi	r23, 0x02	; 2
    198a:	8d e3       	ldi	r24, 0x3D	; 61
    198c:	95 e0       	ldi	r25, 0x05	; 5
    198e:	bf d3       	rcall	.+1918   	; 0x210e <_ZN5Print7printlnEPKc>
    1990:	ff cf       	rjmp	.-2      	; 0x1990 <main+0x3c>
		while(1);
	}
	Serial.println("Connected to controller.");
    1992:	65 e7       	ldi	r22, 0x75	; 117
    1994:	72 e0       	ldi	r23, 0x02	; 2
    1996:	8d e3       	ldi	r24, 0x3D	; 61
  static bool begin(uint16_t recvPort, uint16_t destPort, Register& csDDR, Register& csPort, uint8_t csPin);

  friend void udpReceive(uint16_t dest_port, uint8_t src_ip[IP_LEN], uint16_t src_port, const char *data, uint16_t len);

  static void Loop(){
    ether.packetLoop(ether.packetReceive());
    1998:	95 e0       	ldi	r25, 0x05	; 5
    199a:	b9 d3       	rcall	.+1906   	; 0x210e <_ZN5Print7printlnEPKc>
    199c:	16 d8       	rcall	.-4052   	; 0x9ca <_ZN8ENC28J6013packetReceiveEv>
    199e:	d0 db       	rcall	.-2144   	; 0x1140 <_ZN9EtherCard10packetLoopEj>
    19a0:	fd cf       	rjmp	.-6      	; 0x199c <main+0x48>

000019a2 <_ZN14HardwareSerial9availableEv>:
	#endif
	#if defined(HAVE_HWSERIAL2)
	if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
	#endif
	#if defined(HAVE_HWSERIAL3)
	if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    19a2:	fc 01       	movw	r30, r24
    19a4:	97 85       	ldd	r25, Z+15	; 0x0f
    19a6:	20 89       	ldd	r18, Z+16	; 0x10
    19a8:	89 2f       	mov	r24, r25
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	80 5c       	subi	r24, 0xC0	; 192
    19ae:	9f 4f       	sbci	r25, 0xFF	; 255
    19b0:	82 1b       	sub	r24, r18
    19b2:	91 09       	sbc	r25, r1
    19b4:	8f 73       	andi	r24, 0x3F	; 63
    19b6:	99 27       	eor	r25, r25
    19b8:	08 95       	ret

000019ba <_ZN14HardwareSerial4peekEv>:
    19ba:	fc 01       	movw	r30, r24
    19bc:	97 85       	ldd	r25, Z+15	; 0x0f
    19be:	80 89       	ldd	r24, Z+16	; 0x10
    19c0:	98 17       	cp	r25, r24
    19c2:	31 f0       	breq	.+12     	; 0x19d0 <_ZN14HardwareSerial4peekEv+0x16>
    19c4:	80 89       	ldd	r24, Z+16	; 0x10
    19c6:	e8 0f       	add	r30, r24
    19c8:	f1 1d       	adc	r31, r1
    19ca:	83 89       	ldd	r24, Z+19	; 0x13
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	08 95       	ret
    19d0:	8f ef       	ldi	r24, 0xFF	; 255
    19d2:	9f ef       	ldi	r25, 0xFF	; 255
    19d4:	08 95       	ret

000019d6 <_ZN14HardwareSerial4readEv>:
    19d6:	fc 01       	movw	r30, r24
    19d8:	97 85       	ldd	r25, Z+15	; 0x0f
    19da:	80 89       	ldd	r24, Z+16	; 0x10
    19dc:	98 17       	cp	r25, r24
    19de:	61 f0       	breq	.+24     	; 0x19f8 <_ZN14HardwareSerial4readEv+0x22>
    19e0:	80 89       	ldd	r24, Z+16	; 0x10
    19e2:	df 01       	movw	r26, r30
    19e4:	a8 0f       	add	r26, r24
    19e6:	b1 1d       	adc	r27, r1
    19e8:	53 96       	adiw	r26, 0x13	; 19
    19ea:	8c 91       	ld	r24, X
    19ec:	90 89       	ldd	r25, Z+16	; 0x10
    19ee:	9f 5f       	subi	r25, 0xFF	; 255
    19f0:	9f 73       	andi	r25, 0x3F	; 63
    19f2:	90 8b       	std	Z+16, r25	; 0x10
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	08 95       	ret
    19f8:	8f ef       	ldi	r24, 0xFF	; 255
    19fa:	9f ef       	ldi	r25, 0xFF	; 255
    19fc:	08 95       	ret

000019fe <_ZN14HardwareSerial17availableForWriteEv>:
    19fe:	fc 01       	movw	r30, r24
    1a00:	21 89       	ldd	r18, Z+17	; 0x11
    1a02:	32 89       	ldd	r19, Z+18	; 0x12
    1a04:	23 17       	cp	r18, r19
    1a06:	38 f0       	brcs	.+14     	; 0x1a16 <_ZN14HardwareSerial17availableForWriteEv+0x18>
    1a08:	8f e3       	ldi	r24, 0x3F	; 63
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	82 1b       	sub	r24, r18
    1a0e:	91 09       	sbc	r25, r1
    1a10:	83 0f       	add	r24, r19
    1a12:	91 1d       	adc	r25, r1
    1a14:	08 95       	ret
    1a16:	83 2f       	mov	r24, r19
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	82 1b       	sub	r24, r18
    1a1c:	91 09       	sbc	r25, r1
    1a1e:	01 97       	sbiw	r24, 0x01	; 1
    1a20:	08 95       	ret

00001a22 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1a22:	fc 01       	movw	r30, r24
	// If interrupts are enabled, there must be more data in the output
	// buffer. Send the next byte
	unsigned char c = _tx_buffer[_tx_buffer_tail];
    1a24:	82 89       	ldd	r24, Z+18	; 0x12
    1a26:	df 01       	movw	r26, r30
    1a28:	a8 0f       	add	r26, r24
    1a2a:	b1 1d       	adc	r27, r1
    1a2c:	ad 5a       	subi	r26, 0xAD	; 173
    1a2e:	bf 4f       	sbci	r27, 0xFF	; 255
    1a30:	8c 91       	ld	r24, X
	_tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1a32:	22 89       	ldd	r18, Z+18	; 0x12
    1a34:	30 e0       	ldi	r19, 0x00	; 0
    1a36:	2f 5f       	subi	r18, 0xFF	; 255
    1a38:	3f 4f       	sbci	r19, 0xFF	; 255
    1a3a:	2f 73       	andi	r18, 0x3F	; 63
    1a3c:	30 78       	andi	r19, 0x80	; 128
    1a3e:	33 23       	and	r19, r19
    1a40:	34 f4       	brge	.+12     	; 0x1a4e <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x2c>
    1a42:	21 50       	subi	r18, 0x01	; 1
    1a44:	31 09       	sbc	r19, r1
    1a46:	20 6c       	ori	r18, 0xC0	; 192
    1a48:	3f 6f       	ori	r19, 0xFF	; 255
    1a4a:	2f 5f       	subi	r18, 0xFF	; 255
    1a4c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a4e:	22 8b       	std	Z+18, r18	; 0x12

	*_udr = c;
    1a50:	a4 85       	ldd	r26, Z+12	; 0x0c
    1a52:	b5 85       	ldd	r27, Z+13	; 0x0d
    1a54:	8c 93       	st	X, r24
	// location". This makes sure flush() won't return until the bytes
	// actually got written. Other r/w bits are preserved, and zeroes
	// written to the rest.

	#ifdef MPCM0
	*_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1a56:	a6 81       	ldd	r26, Z+6	; 0x06
    1a58:	b7 81       	ldd	r27, Z+7	; 0x07
    1a5a:	8c 91       	ld	r24, X
    1a5c:	83 70       	andi	r24, 0x03	; 3
    1a5e:	80 64       	ori	r24, 0x40	; 64
    1a60:	8c 93       	st	X, r24
	#else
	*_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
	#endif

	if (_tx_buffer_head == _tx_buffer_tail) {
    1a62:	91 89       	ldd	r25, Z+17	; 0x11
    1a64:	82 89       	ldd	r24, Z+18	; 0x12
    1a66:	98 13       	cpse	r25, r24
    1a68:	06 c0       	rjmp	.+12     	; 0x1a76 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x54>
		// Buffer empty, so disable interrupts
		cbi(*_ucsrb, UDRIE0);
    1a6a:	00 84       	ldd	r0, Z+8	; 0x08
    1a6c:	f1 85       	ldd	r31, Z+9	; 0x09
    1a6e:	e0 2d       	mov	r30, r0
    1a70:	80 81       	ld	r24, Z
    1a72:	8f 7d       	andi	r24, 0xDF	; 223
    1a74:	80 83       	st	Z, r24
    1a76:	08 95       	ret

00001a78 <_ZN14HardwareSerial5flushEv>:
	if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
	return tail - head - 1;
}

void HardwareSerial::flush()
{
    1a78:	cf 93       	push	r28
    1a7a:	df 93       	push	r29
    1a7c:	ec 01       	movw	r28, r24
	// If we have never written a byte, no need to flush. This special
	// case is needed since there is no way to force the TXC (transmit
	// complete) bit to 1 during initialization
	if (!_written)
    1a7e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a80:	88 23       	and	r24, r24
    1a82:	d1 f0       	breq	.+52     	; 0x1ab8 <_ZN14HardwareSerial5flushEv+0x40>
	return;

	while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1a84:	e8 85       	ldd	r30, Y+8	; 0x08
    1a86:	f9 85       	ldd	r31, Y+9	; 0x09
    1a88:	80 81       	ld	r24, Z
    1a8a:	85 fd       	sbrc	r24, 5
    1a8c:	05 c0       	rjmp	.+10     	; 0x1a98 <_ZN14HardwareSerial5flushEv+0x20>
    1a8e:	ae 81       	ldd	r26, Y+6	; 0x06
    1a90:	bf 81       	ldd	r27, Y+7	; 0x07
    1a92:	8c 91       	ld	r24, X
    1a94:	86 fd       	sbrc	r24, 6
    1a96:	10 c0       	rjmp	.+32     	; 0x1ab8 <_ZN14HardwareSerial5flushEv+0x40>
		if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1a98:	0f b6       	in	r0, 0x3f	; 63
    1a9a:	07 fc       	sbrc	r0, 7
    1a9c:	f5 cf       	rjmp	.-22     	; 0x1a88 <_ZN14HardwareSerial5flushEv+0x10>
    1a9e:	80 81       	ld	r24, Z
    1aa0:	85 ff       	sbrs	r24, 5
    1aa2:	f2 cf       	rjmp	.-28     	; 0x1a88 <_ZN14HardwareSerial5flushEv+0x10>
    1aa4:	03 c0       	rjmp	.+6      	; 0x1aac <_ZN14HardwareSerial5flushEv+0x34>
		// Interrupts are globally disabled, but the DR empty
		// interrupt should be enabled, so poll the DR empty flag to
		// prevent deadlock
		if (bit_is_set(*_ucsra, UDRE0))
		_tx_udr_empty_irq();
    1aa6:	ce 01       	movw	r24, r28
    1aa8:	bc df       	rcall	.-136    	; 0x1a22 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1aaa:	ec cf       	rjmp	.-40     	; 0x1a84 <_ZN14HardwareSerial5flushEv+0xc>
	while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
		if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
		// Interrupts are globally disabled, but the DR empty
		// interrupt should be enabled, so poll the DR empty flag to
		// prevent deadlock
		if (bit_is_set(*_ucsra, UDRE0))
    1aac:	ae 81       	ldd	r26, Y+6	; 0x06
    1aae:	bf 81       	ldd	r27, Y+7	; 0x07
    1ab0:	8c 91       	ld	r24, X
    1ab2:	85 ff       	sbrs	r24, 5
    1ab4:	e9 cf       	rjmp	.-46     	; 0x1a88 <_ZN14HardwareSerial5flushEv+0x10>
    1ab6:	f7 cf       	rjmp	.-18     	; 0x1aa6 <_ZN14HardwareSerial5flushEv+0x2e>
		_tx_udr_empty_irq();
	}
	// If we get here, nothing is queued anymore (DRIE is disabled) and
	// the hardware finished tranmission (TXC is set).
}
    1ab8:	df 91       	pop	r29
    1aba:	cf 91       	pop	r28
    1abc:	08 95       	ret

00001abe <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    1abe:	0f 93       	push	r16
    1ac0:	1f 93       	push	r17
    1ac2:	cf 93       	push	r28
    1ac4:	df 93       	push	r29
    1ac6:	ec 01       	movw	r28, r24
	_written = true;
    1ac8:	81 e0       	ldi	r24, 0x01	; 1
    1aca:	8e 87       	std	Y+14, r24	; 0x0e
	// If the buffer and the data register is empty, just write the byte
	// to the data register and be done. This shortcut helps
	// significantly improve the effective datarate at high (>
	// 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
	if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1acc:	99 89       	ldd	r25, Y+17	; 0x11
    1ace:	8a 89       	ldd	r24, Y+18	; 0x12
    1ad0:	98 13       	cpse	r25, r24
    1ad2:	25 c0       	rjmp	.+74     	; 0x1b1e <_ZN14HardwareSerial5writeEh+0x60>
    1ad4:	ee 81       	ldd	r30, Y+6	; 0x06
    1ad6:	ff 81       	ldd	r31, Y+7	; 0x07
    1ad8:	80 81       	ld	r24, Z
    1ada:	85 fd       	sbrc	r24, 5
    1adc:	31 c0       	rjmp	.+98     	; 0x1b40 <_ZN14HardwareSerial5writeEh+0x82>
    1ade:	1f c0       	rjmp	.+62     	; 0x1b1e <_ZN14HardwareSerial5writeEh+0x60>
	}
	tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
	// If the output buffer is full, there's nothing for it other than to
	// wait for the interrupt handler to empty it a bit
	while (i == _tx_buffer_tail) {
    1ae0:	8a 89       	ldd	r24, Y+18	; 0x12
    1ae2:	18 13       	cpse	r17, r24
    1ae4:	0b c0       	rjmp	.+22     	; 0x1afc <_ZN14HardwareSerial5writeEh+0x3e>
		if (bit_is_clear(SREG, SREG_I)) {
    1ae6:	0f b6       	in	r0, 0x3f	; 63
    1ae8:	07 fc       	sbrc	r0, 7
    1aea:	fa cf       	rjmp	.-12     	; 0x1ae0 <_ZN14HardwareSerial5writeEh+0x22>
			// Interrupts are disabled, so we'll have to poll the data
			// register empty flag ourselves. If it is set, pretend an
			// interrupt has happened and call the handler to free up
			// space for us.
			if(bit_is_set(*_ucsra, UDRE0))
    1aec:	ee 81       	ldd	r30, Y+6	; 0x06
    1aee:	ff 81       	ldd	r31, Y+7	; 0x07
    1af0:	80 81       	ld	r24, Z
    1af2:	85 ff       	sbrs	r24, 5
    1af4:	f5 cf       	rjmp	.-22     	; 0x1ae0 <_ZN14HardwareSerial5writeEh+0x22>
			_tx_udr_empty_irq();
    1af6:	ce 01       	movw	r24, r28
    1af8:	94 df       	rcall	.-216    	; 0x1a22 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1afa:	f2 cf       	rjmp	.-28     	; 0x1ae0 <_ZN14HardwareSerial5writeEh+0x22>
			} else {
			// nop, the interrupt handler will free up space for us
		}
	}

	_tx_buffer[_tx_buffer_head] = c;
    1afc:	89 89       	ldd	r24, Y+17	; 0x11
    1afe:	fe 01       	movw	r30, r28
    1b00:	e8 0f       	add	r30, r24
    1b02:	f1 1d       	adc	r31, r1
    1b04:	ed 5a       	subi	r30, 0xAD	; 173
    1b06:	ff 4f       	sbci	r31, 0xFF	; 255
    1b08:	00 83       	st	Z, r16

	// make atomic to prevent execution of ISR between setting the
	// head pointer and setting the interrupt flag resulting in buffer
	// retransmission
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1b0a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1b0c:	f8 94       	cli
		_tx_buffer_head = i;
    1b0e:	19 8b       	std	Y+17, r17	; 0x11
		sbi(*_ucsrb, UDRIE0);
    1b10:	e8 85       	ldd	r30, Y+8	; 0x08
    1b12:	f9 85       	ldd	r31, Y+9	; 0x09
    1b14:	80 81       	ld	r24, Z
    1b16:	80 62       	ori	r24, 0x20	; 32
    1b18:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1b1a:	9f bf       	out	0x3f, r25	; 63
	}
	
	return 1;
    1b1c:	1d c0       	rjmp	.+58     	; 0x1b58 <_ZN14HardwareSerial5writeEh+0x9a>
			*_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
			#endif
		}
		return 1;
	}
	tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1b1e:	29 89       	ldd	r18, Y+17	; 0x11
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	2f 5f       	subi	r18, 0xFF	; 255
    1b24:	3f 4f       	sbci	r19, 0xFF	; 255
    1b26:	2f 73       	andi	r18, 0x3F	; 63
    1b28:	30 78       	andi	r19, 0x80	; 128
    1b2a:	33 23       	and	r19, r19
    1b2c:	34 f4       	brge	.+12     	; 0x1b3a <_ZN14HardwareSerial5writeEh+0x7c>
    1b2e:	21 50       	subi	r18, 0x01	; 1
    1b30:	31 09       	sbc	r19, r1
    1b32:	20 6c       	ori	r18, 0xC0	; 192
    1b34:	3f 6f       	ori	r19, 0xFF	; 255
    1b36:	2f 5f       	subi	r18, 0xFF	; 255
    1b38:	3f 4f       	sbci	r19, 0xFF	; 255
    1b3a:	06 2f       	mov	r16, r22
    1b3c:	12 2f       	mov	r17, r18
    1b3e:	d0 cf       	rjmp	.-96     	; 0x1ae0 <_ZN14HardwareSerial5writeEh+0x22>
		// So writing UDR must happen first.
		// Writing UDR and clearing TC must be done atomically, otherwise
		// interrupts might delay the TXC clear so the byte written to UDR
		// is transmitted (setting TXC) before clearing TXC. Then TXC will
		// be cleared when no bytes are left, causing flush() to hang
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1b40:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1b42:	f8 94       	cli
			*_udr = c;
    1b44:	ec 85       	ldd	r30, Y+12	; 0x0c
    1b46:	fd 85       	ldd	r31, Y+13	; 0x0d
    1b48:	60 83       	st	Z, r22
			#ifdef MPCM0
			*_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1b4a:	ee 81       	ldd	r30, Y+6	; 0x06
    1b4c:	ff 81       	ldd	r31, Y+7	; 0x07
    1b4e:	80 81       	ld	r24, Z
    1b50:	83 70       	andi	r24, 0x03	; 3
    1b52:	80 64       	ori	r24, 0x40	; 64
    1b54:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1b56:	9f bf       	out	0x3f, r25	; 63
		_tx_buffer_head = i;
		sbi(*_ucsrb, UDRIE0);
	}
	
	return 1;
}
    1b58:	81 e0       	ldi	r24, 0x01	; 1
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	df 91       	pop	r29
    1b5e:	cf 91       	pop	r28
    1b60:	1f 91       	pop	r17
    1b62:	0f 91       	pop	r16
    1b64:	08 95       	ret

00001b66 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, uint8_t config)
{
    1b66:	cf 92       	push	r12
    1b68:	df 92       	push	r13
    1b6a:	ef 92       	push	r14
    1b6c:	ff 92       	push	r15
    1b6e:	1f 93       	push	r17
    1b70:	cf 93       	push	r28
    1b72:	df 93       	push	r29
    1b74:	ec 01       	movw	r28, r24
    1b76:	6a 01       	movw	r12, r20
    1b78:	7b 01       	movw	r14, r22
    1b7a:	12 2f       	mov	r17, r18
	// Try u2x mode first
	uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
	*_ucsra = 1 << U2X0;
    1b7c:	ee 81       	ldd	r30, Y+6	; 0x06
    1b7e:	ff 81       	ldd	r31, Y+7	; 0x07
    1b80:	82 e0       	ldi	r24, 0x02	; 2
    1b82:	80 83       	st	Z, r24
	// hardcoded exception for 57600 for compatibility with the bootloader
	// shipped with the Duemilanove and previous boards and the firmware
	// on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
	// be > 4095, so switch back to non-u2x mode if the baud rate is too
	// low.
	if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1b84:	41 15       	cp	r20, r1
    1b86:	51 4e       	sbci	r21, 0xE1	; 225
    1b88:	61 05       	cpc	r22, r1
    1b8a:	71 05       	cpc	r23, r1
    1b8c:	a9 f0       	breq	.+42     	; 0x1bb8 <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, uint8_t config)
{
	// Try u2x mode first
	uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1b8e:	60 e0       	ldi	r22, 0x00	; 0
    1b90:	79 e0       	ldi	r23, 0x09	; 9
    1b92:	8d e3       	ldi	r24, 0x3D	; 61
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	a7 01       	movw	r20, r14
    1b98:	96 01       	movw	r18, r12
    1b9a:	c9 d2       	rcall	.+1426   	; 0x212e <__udivmodsi4>
    1b9c:	da 01       	movw	r26, r20
    1b9e:	c9 01       	movw	r24, r18
    1ba0:	01 97       	sbiw	r24, 0x01	; 1
    1ba2:	a1 09       	sbc	r26, r1
    1ba4:	b1 09       	sbc	r27, r1
    1ba6:	b6 95       	lsr	r27
    1ba8:	a7 95       	ror	r26
    1baa:	97 95       	ror	r25
    1bac:	87 95       	ror	r24
    1bae:	9c 01       	movw	r18, r24
	// hardcoded exception for 57600 for compatibility with the bootloader
	// shipped with the Duemilanove and previous boards and the firmware
	// on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
	// be > 4095, so switch back to non-u2x mode if the baud rate is too
	// low.
	if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1bb0:	21 15       	cp	r18, r1
    1bb2:	80 e1       	ldi	r24, 0x10	; 16
    1bb4:	38 07       	cpc	r19, r24
    1bb6:	a0 f0       	brcs	.+40     	; 0x1be0 <_ZN14HardwareSerial5beginEmh+0x7a>
	{
		*_ucsra = 0;
    1bb8:	ee 81       	ldd	r30, Y+6	; 0x06
    1bba:	ff 81       	ldd	r31, Y+7	; 0x07
    1bbc:	10 82       	st	Z, r1
		baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1bbe:	60 e8       	ldi	r22, 0x80	; 128
    1bc0:	74 e8       	ldi	r23, 0x84	; 132
    1bc2:	8e e1       	ldi	r24, 0x1E	; 30
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	a7 01       	movw	r20, r14
    1bc8:	96 01       	movw	r18, r12
    1bca:	b1 d2       	rcall	.+1378   	; 0x212e <__udivmodsi4>
    1bcc:	da 01       	movw	r26, r20
    1bce:	c9 01       	movw	r24, r18
    1bd0:	01 97       	sbiw	r24, 0x01	; 1
    1bd2:	a1 09       	sbc	r26, r1
    1bd4:	b1 09       	sbc	r27, r1
    1bd6:	b6 95       	lsr	r27
    1bd8:	a7 95       	ror	r26
    1bda:	97 95       	ror	r25
    1bdc:	87 95       	ror	r24
    1bde:	9c 01       	movw	r18, r24
	}

	// assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
	*_ubrrh = baud_setting >> 8;
    1be0:	ea 81       	ldd	r30, Y+2	; 0x02
    1be2:	fb 81       	ldd	r31, Y+3	; 0x03
    1be4:	30 83       	st	Z, r19
	*_ubrrl = baud_setting;
    1be6:	ec 81       	ldd	r30, Y+4	; 0x04
    1be8:	fd 81       	ldd	r31, Y+5	; 0x05
    1bea:	20 83       	st	Z, r18

	_written = false;
    1bec:	1e 86       	std	Y+14, r1	; 0x0e

	//set the data bits, parity, and stop bits
	#if defined(__AVR_ATmega8__)
	config |= 0x80; // select UCSRC register (shared with UBRRH)
	#endif
	*_ucsrc = config;
    1bee:	ea 85       	ldd	r30, Y+10	; 0x0a
    1bf0:	fb 85       	ldd	r31, Y+11	; 0x0b
    1bf2:	10 83       	st	Z, r17
	
	sbi(*_ucsrb, RXEN0);
    1bf4:	e8 85       	ldd	r30, Y+8	; 0x08
    1bf6:	f9 85       	ldd	r31, Y+9	; 0x09
    1bf8:	80 81       	ld	r24, Z
    1bfa:	80 61       	ori	r24, 0x10	; 16
    1bfc:	80 83       	st	Z, r24
	sbi(*_ucsrb, TXEN0);
    1bfe:	e8 85       	ldd	r30, Y+8	; 0x08
    1c00:	f9 85       	ldd	r31, Y+9	; 0x09
    1c02:	80 81       	ld	r24, Z
    1c04:	88 60       	ori	r24, 0x08	; 8
    1c06:	80 83       	st	Z, r24
	sbi(*_ucsrb, RXCIE0);
    1c08:	e8 85       	ldd	r30, Y+8	; 0x08
    1c0a:	f9 85       	ldd	r31, Y+9	; 0x09
    1c0c:	80 81       	ld	r24, Z
    1c0e:	80 68       	ori	r24, 0x80	; 128
    1c10:	80 83       	st	Z, r24
	cbi(*_ucsrb, UDRIE0);
    1c12:	e8 85       	ldd	r30, Y+8	; 0x08
    1c14:	f9 85       	ldd	r31, Y+9	; 0x09
    1c16:	80 81       	ld	r24, Z
    1c18:	8f 7d       	andi	r24, 0xDF	; 223
    1c1a:	80 83       	st	Z, r24
}
    1c1c:	df 91       	pop	r29
    1c1e:	cf 91       	pop	r28
    1c20:	1f 91       	pop	r17
    1c22:	ff 90       	pop	r15
    1c24:	ef 90       	pop	r14
    1c26:	df 90       	pop	r13
    1c28:	cf 90       	pop	r12
    1c2a:	08 95       	ret

00001c2c <__vector_25>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
}
    1c2c:	1f 92       	push	r1
    1c2e:	0f 92       	push	r0
    1c30:	0f b6       	in	r0, 0x3f	; 63
    1c32:	0f 92       	push	r0
    1c34:	11 24       	eor	r1, r1
    1c36:	0b b6       	in	r0, 0x3b	; 59
    1c38:	0f 92       	push	r0
    1c3a:	2f 93       	push	r18
    1c3c:	8f 93       	push	r24
    1c3e:	9f 93       	push	r25
    1c40:	af 93       	push	r26
    1c42:	bf 93       	push	r27
    1c44:	ef 93       	push	r30
    1c46:	ff 93       	push	r31
    1c48:	e0 91 43 05 	lds	r30, 0x0543	; 0x800543 <Serial+0x6>
    1c4c:	f0 91 44 05 	lds	r31, 0x0544	; 0x800544 <Serial+0x7>
    1c50:	80 81       	ld	r24, Z
    1c52:	82 fd       	sbrc	r24, 2
    1c54:	14 c0       	rjmp	.+40     	; 0x1c7e <__vector_25+0x52>
    1c56:	ed e3       	ldi	r30, 0x3D	; 61
    1c58:	f5 e0       	ldi	r31, 0x05	; 5
    1c5a:	a4 85       	ldd	r26, Z+12	; 0x0c
    1c5c:	b5 85       	ldd	r27, Z+13	; 0x0d
    1c5e:	2c 91       	ld	r18, X
    1c60:	87 85       	ldd	r24, Z+15	; 0x0f
    1c62:	8f 5f       	subi	r24, 0xFF	; 255
    1c64:	8f 70       	andi	r24, 0x0F	; 15
    1c66:	90 89       	ldd	r25, Z+16	; 0x10
    1c68:	89 17       	cp	r24, r25
    1c6a:	71 f0       	breq	.+28     	; 0x1c88 <__vector_25+0x5c>
    1c6c:	df 01       	movw	r26, r30
    1c6e:	e7 85       	ldd	r30, Z+15	; 0x0f
    1c70:	f0 e0       	ldi	r31, 0x00	; 0
    1c72:	e3 5c       	subi	r30, 0xC3	; 195
    1c74:	fa 4f       	sbci	r31, 0xFA	; 250
    1c76:	23 8b       	std	Z+19, r18	; 0x13
    1c78:	1f 96       	adiw	r26, 0x0f	; 15
    1c7a:	8c 93       	st	X, r24
    1c7c:	05 c0       	rjmp	.+10     	; 0x1c88 <__vector_25+0x5c>
    1c7e:	e0 91 49 05 	lds	r30, 0x0549	; 0x800549 <Serial+0xc>
    1c82:	f0 91 4a 05 	lds	r31, 0x054A	; 0x80054a <Serial+0xd>
    1c86:	80 81       	ld	r24, Z
    1c88:	ff 91       	pop	r31
    1c8a:	ef 91       	pop	r30
    1c8c:	bf 91       	pop	r27
    1c8e:	af 91       	pop	r26
    1c90:	9f 91       	pop	r25
    1c92:	8f 91       	pop	r24
    1c94:	2f 91       	pop	r18
    1c96:	0f 90       	pop	r0
    1c98:	0b be       	out	0x3b, r0	; 59
    1c9a:	0f 90       	pop	r0
    1c9c:	0f be       	out	0x3f, r0	; 63
    1c9e:	0f 90       	pop	r0
    1ca0:	1f 90       	pop	r1
    1ca2:	18 95       	reti

00001ca4 <__vector_26>:
    1ca4:	1f 92       	push	r1
    1ca6:	0f 92       	push	r0
    1ca8:	0f b6       	in	r0, 0x3f	; 63
    1caa:	0f 92       	push	r0
    1cac:	11 24       	eor	r1, r1
    1cae:	0b b6       	in	r0, 0x3b	; 59
    1cb0:	0f 92       	push	r0
    1cb2:	2f 93       	push	r18
    1cb4:	3f 93       	push	r19
    1cb6:	4f 93       	push	r20
    1cb8:	5f 93       	push	r21
    1cba:	6f 93       	push	r22
    1cbc:	7f 93       	push	r23
    1cbe:	8f 93       	push	r24
    1cc0:	9f 93       	push	r25
    1cc2:	af 93       	push	r26
    1cc4:	bf 93       	push	r27
    1cc6:	ef 93       	push	r30
    1cc8:	ff 93       	push	r31
    1cca:	8d e3       	ldi	r24, 0x3D	; 61
    1ccc:	95 e0       	ldi	r25, 0x05	; 5
    1cce:	a9 de       	rcall	.-686    	; 0x1a22 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1cd0:	ff 91       	pop	r31
    1cd2:	ef 91       	pop	r30
    1cd4:	bf 91       	pop	r27
    1cd6:	af 91       	pop	r26
    1cd8:	9f 91       	pop	r25
    1cda:	8f 91       	pop	r24
    1cdc:	7f 91       	pop	r23
    1cde:	6f 91       	pop	r22
    1ce0:	5f 91       	pop	r21
    1ce2:	4f 91       	pop	r20
    1ce4:	3f 91       	pop	r19
    1ce6:	2f 91       	pop	r18
    1ce8:	0f 90       	pop	r0
    1cea:	0b be       	out	0x3b, r0	; 59
    1cec:	0f 90       	pop	r0
    1cee:	0f be       	out	0x3f, r0	; 63
    1cf0:	0f 90       	pop	r0
    1cf2:	1f 90       	pop	r1
    1cf4:	18 95       	reti

00001cf6 <_GLOBAL__sub_I___vector_25>:
volatile uint8_t *ucsrc, volatile uint8_t *udr) :
_ubrrh(ubrrh), _ubrrl(ubrrl),
_ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
_udr(udr),
_rx_buffer_head(0), _rx_buffer_tail(0),
_tx_buffer_head(0), _tx_buffer_tail(0)
    1cf6:	ed e3       	ldi	r30, 0x3D	; 61
    1cf8:	f5 e0       	ldi	r31, 0x05	; 5
    1cfa:	82 e9       	ldi	r24, 0x92	; 146
    1cfc:	92 e0       	ldi	r25, 0x02	; 2
    1cfe:	91 83       	std	Z+1, r25	; 0x01
    1d00:	80 83       	st	Z, r24
    1d02:	85 ec       	ldi	r24, 0xC5	; 197
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	93 83       	std	Z+3, r25	; 0x03
    1d08:	82 83       	std	Z+2, r24	; 0x02
    1d0a:	84 ec       	ldi	r24, 0xC4	; 196
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	95 83       	std	Z+5, r25	; 0x05
    1d10:	84 83       	std	Z+4, r24	; 0x04
    1d12:	80 ec       	ldi	r24, 0xC0	; 192
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	97 83       	std	Z+7, r25	; 0x07
    1d18:	86 83       	std	Z+6, r24	; 0x06
    1d1a:	81 ec       	ldi	r24, 0xC1	; 193
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	91 87       	std	Z+9, r25	; 0x09
    1d20:	80 87       	std	Z+8, r24	; 0x08
    1d22:	82 ec       	ldi	r24, 0xC2	; 194
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	93 87       	std	Z+11, r25	; 0x0b
    1d28:	82 87       	std	Z+10, r24	; 0x0a
    1d2a:	86 ec       	ldi	r24, 0xC6	; 198
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	95 87       	std	Z+13, r25	; 0x0d
    1d30:	84 87       	std	Z+12, r24	; 0x0c
    1d32:	17 86       	std	Z+15, r1	; 0x0f
    1d34:	10 8a       	std	Z+16, r1	; 0x10
    1d36:	11 8a       	std	Z+17, r1	; 0x11
    1d38:	12 8a       	std	Z+18, r1	; 0x12
    1d3a:	08 95       	ret

00001d3c <__vector_36>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
}
    1d3c:	1f 92       	push	r1
    1d3e:	0f 92       	push	r0
    1d40:	0f b6       	in	r0, 0x3f	; 63
    1d42:	0f 92       	push	r0
    1d44:	11 24       	eor	r1, r1
    1d46:	0b b6       	in	r0, 0x3b	; 59
    1d48:	0f 92       	push	r0
    1d4a:	2f 93       	push	r18
    1d4c:	8f 93       	push	r24
    1d4e:	9f 93       	push	r25
    1d50:	af 93       	push	r26
    1d52:	bf 93       	push	r27
    1d54:	ef 93       	push	r30
    1d56:	ff 93       	push	r31
    1d58:	e0 91 76 05 	lds	r30, 0x0576	; 0x800576 <Serial1+0x6>
    1d5c:	f0 91 77 05 	lds	r31, 0x0577	; 0x800577 <Serial1+0x7>
    1d60:	80 81       	ld	r24, Z
    1d62:	82 fd       	sbrc	r24, 2
    1d64:	14 c0       	rjmp	.+40     	; 0x1d8e <__vector_36+0x52>
    1d66:	e0 e7       	ldi	r30, 0x70	; 112
    1d68:	f5 e0       	ldi	r31, 0x05	; 5
    1d6a:	a4 85       	ldd	r26, Z+12	; 0x0c
    1d6c:	b5 85       	ldd	r27, Z+13	; 0x0d
    1d6e:	2c 91       	ld	r18, X
    1d70:	87 85       	ldd	r24, Z+15	; 0x0f
    1d72:	8f 5f       	subi	r24, 0xFF	; 255
    1d74:	8f 70       	andi	r24, 0x0F	; 15
    1d76:	90 89       	ldd	r25, Z+16	; 0x10
    1d78:	89 17       	cp	r24, r25
    1d7a:	71 f0       	breq	.+28     	; 0x1d98 <__vector_36+0x5c>
    1d7c:	df 01       	movw	r26, r30
    1d7e:	e7 85       	ldd	r30, Z+15	; 0x0f
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	e0 59       	subi	r30, 0x90	; 144
    1d84:	fa 4f       	sbci	r31, 0xFA	; 250
    1d86:	23 8b       	std	Z+19, r18	; 0x13
    1d88:	1f 96       	adiw	r26, 0x0f	; 15
    1d8a:	8c 93       	st	X, r24
    1d8c:	05 c0       	rjmp	.+10     	; 0x1d98 <__vector_36+0x5c>
    1d8e:	e0 91 7c 05 	lds	r30, 0x057C	; 0x80057c <Serial1+0xc>
    1d92:	f0 91 7d 05 	lds	r31, 0x057D	; 0x80057d <Serial1+0xd>
    1d96:	80 81       	ld	r24, Z
    1d98:	ff 91       	pop	r31
    1d9a:	ef 91       	pop	r30
    1d9c:	bf 91       	pop	r27
    1d9e:	af 91       	pop	r26
    1da0:	9f 91       	pop	r25
    1da2:	8f 91       	pop	r24
    1da4:	2f 91       	pop	r18
    1da6:	0f 90       	pop	r0
    1da8:	0b be       	out	0x3b, r0	; 59
    1daa:	0f 90       	pop	r0
    1dac:	0f be       	out	0x3f, r0	; 63
    1dae:	0f 90       	pop	r0
    1db0:	1f 90       	pop	r1
    1db2:	18 95       	reti

00001db4 <__vector_37>:
    1db4:	1f 92       	push	r1
    1db6:	0f 92       	push	r0
    1db8:	0f b6       	in	r0, 0x3f	; 63
    1dba:	0f 92       	push	r0
    1dbc:	11 24       	eor	r1, r1
    1dbe:	0b b6       	in	r0, 0x3b	; 59
    1dc0:	0f 92       	push	r0
    1dc2:	2f 93       	push	r18
    1dc4:	3f 93       	push	r19
    1dc6:	4f 93       	push	r20
    1dc8:	5f 93       	push	r21
    1dca:	6f 93       	push	r22
    1dcc:	7f 93       	push	r23
    1dce:	8f 93       	push	r24
    1dd0:	9f 93       	push	r25
    1dd2:	af 93       	push	r26
    1dd4:	bf 93       	push	r27
    1dd6:	ef 93       	push	r30
    1dd8:	ff 93       	push	r31
    1dda:	80 e7       	ldi	r24, 0x70	; 112
    1ddc:	95 e0       	ldi	r25, 0x05	; 5
    1dde:	21 de       	rcall	.-958    	; 0x1a22 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1de0:	ff 91       	pop	r31
    1de2:	ef 91       	pop	r30
    1de4:	bf 91       	pop	r27
    1de6:	af 91       	pop	r26
    1de8:	9f 91       	pop	r25
    1dea:	8f 91       	pop	r24
    1dec:	7f 91       	pop	r23
    1dee:	6f 91       	pop	r22
    1df0:	5f 91       	pop	r21
    1df2:	4f 91       	pop	r20
    1df4:	3f 91       	pop	r19
    1df6:	2f 91       	pop	r18
    1df8:	0f 90       	pop	r0
    1dfa:	0b be       	out	0x3b, r0	; 59
    1dfc:	0f 90       	pop	r0
    1dfe:	0f be       	out	0x3f, r0	; 63
    1e00:	0f 90       	pop	r0
    1e02:	1f 90       	pop	r1
    1e04:	18 95       	reti

00001e06 <_GLOBAL__sub_I___vector_36>:
    1e06:	e0 e7       	ldi	r30, 0x70	; 112
    1e08:	f5 e0       	ldi	r31, 0x05	; 5
    1e0a:	82 e9       	ldi	r24, 0x92	; 146
    1e0c:	92 e0       	ldi	r25, 0x02	; 2
    1e0e:	91 83       	std	Z+1, r25	; 0x01
    1e10:	80 83       	st	Z, r24
    1e12:	8d ec       	ldi	r24, 0xCD	; 205
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	93 83       	std	Z+3, r25	; 0x03
    1e18:	82 83       	std	Z+2, r24	; 0x02
    1e1a:	8c ec       	ldi	r24, 0xCC	; 204
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	95 83       	std	Z+5, r25	; 0x05
    1e20:	84 83       	std	Z+4, r24	; 0x04
    1e22:	88 ec       	ldi	r24, 0xC8	; 200
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	97 83       	std	Z+7, r25	; 0x07
    1e28:	86 83       	std	Z+6, r24	; 0x06
    1e2a:	89 ec       	ldi	r24, 0xC9	; 201
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	91 87       	std	Z+9, r25	; 0x09
    1e30:	80 87       	std	Z+8, r24	; 0x08
    1e32:	8a ec       	ldi	r24, 0xCA	; 202
    1e34:	90 e0       	ldi	r25, 0x00	; 0
    1e36:	93 87       	std	Z+11, r25	; 0x0b
    1e38:	82 87       	std	Z+10, r24	; 0x0a
    1e3a:	8e ec       	ldi	r24, 0xCE	; 206
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	95 87       	std	Z+13, r25	; 0x0d
    1e40:	84 87       	std	Z+12, r24	; 0x0c
    1e42:	17 86       	std	Z+15, r1	; 0x0f
    1e44:	10 8a       	std	Z+16, r1	; 0x10
    1e46:	11 8a       	std	Z+17, r1	; 0x11
    1e48:	12 8a       	std	Z+18, r1	; 0x12
    1e4a:	08 95       	ret

00001e4c <__vector_51>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial2_available() {
  return Serial2.available();
}
    1e4c:	1f 92       	push	r1
    1e4e:	0f 92       	push	r0
    1e50:	0f b6       	in	r0, 0x3f	; 63
    1e52:	0f 92       	push	r0
    1e54:	11 24       	eor	r1, r1
    1e56:	0b b6       	in	r0, 0x3b	; 59
    1e58:	0f 92       	push	r0
    1e5a:	2f 93       	push	r18
    1e5c:	8f 93       	push	r24
    1e5e:	9f 93       	push	r25
    1e60:	af 93       	push	r26
    1e62:	bf 93       	push	r27
    1e64:	ef 93       	push	r30
    1e66:	ff 93       	push	r31
    1e68:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <Serial2+0x6>
    1e6c:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <Serial2+0x7>
    1e70:	80 81       	ld	r24, Z
    1e72:	82 fd       	sbrc	r24, 2
    1e74:	14 c0       	rjmp	.+40     	; 0x1e9e <__vector_51+0x52>
    1e76:	e3 ea       	ldi	r30, 0xA3	; 163
    1e78:	f5 e0       	ldi	r31, 0x05	; 5
    1e7a:	a4 85       	ldd	r26, Z+12	; 0x0c
    1e7c:	b5 85       	ldd	r27, Z+13	; 0x0d
    1e7e:	2c 91       	ld	r18, X
    1e80:	87 85       	ldd	r24, Z+15	; 0x0f
    1e82:	8f 5f       	subi	r24, 0xFF	; 255
    1e84:	8f 70       	andi	r24, 0x0F	; 15
    1e86:	90 89       	ldd	r25, Z+16	; 0x10
    1e88:	89 17       	cp	r24, r25
    1e8a:	71 f0       	breq	.+28     	; 0x1ea8 <__vector_51+0x5c>
    1e8c:	df 01       	movw	r26, r30
    1e8e:	e7 85       	ldd	r30, Z+15	; 0x0f
    1e90:	f0 e0       	ldi	r31, 0x00	; 0
    1e92:	ed 55       	subi	r30, 0x5D	; 93
    1e94:	fa 4f       	sbci	r31, 0xFA	; 250
    1e96:	23 8b       	std	Z+19, r18	; 0x13
    1e98:	1f 96       	adiw	r26, 0x0f	; 15
    1e9a:	8c 93       	st	X, r24
    1e9c:	05 c0       	rjmp	.+10     	; 0x1ea8 <__vector_51+0x5c>
    1e9e:	e0 91 af 05 	lds	r30, 0x05AF	; 0x8005af <Serial2+0xc>
    1ea2:	f0 91 b0 05 	lds	r31, 0x05B0	; 0x8005b0 <Serial2+0xd>
    1ea6:	80 81       	ld	r24, Z
    1ea8:	ff 91       	pop	r31
    1eaa:	ef 91       	pop	r30
    1eac:	bf 91       	pop	r27
    1eae:	af 91       	pop	r26
    1eb0:	9f 91       	pop	r25
    1eb2:	8f 91       	pop	r24
    1eb4:	2f 91       	pop	r18
    1eb6:	0f 90       	pop	r0
    1eb8:	0b be       	out	0x3b, r0	; 59
    1eba:	0f 90       	pop	r0
    1ebc:	0f be       	out	0x3f, r0	; 63
    1ebe:	0f 90       	pop	r0
    1ec0:	1f 90       	pop	r1
    1ec2:	18 95       	reti

00001ec4 <__vector_52>:
    1ec4:	1f 92       	push	r1
    1ec6:	0f 92       	push	r0
    1ec8:	0f b6       	in	r0, 0x3f	; 63
    1eca:	0f 92       	push	r0
    1ecc:	11 24       	eor	r1, r1
    1ece:	0b b6       	in	r0, 0x3b	; 59
    1ed0:	0f 92       	push	r0
    1ed2:	2f 93       	push	r18
    1ed4:	3f 93       	push	r19
    1ed6:	4f 93       	push	r20
    1ed8:	5f 93       	push	r21
    1eda:	6f 93       	push	r22
    1edc:	7f 93       	push	r23
    1ede:	8f 93       	push	r24
    1ee0:	9f 93       	push	r25
    1ee2:	af 93       	push	r26
    1ee4:	bf 93       	push	r27
    1ee6:	ef 93       	push	r30
    1ee8:	ff 93       	push	r31
    1eea:	83 ea       	ldi	r24, 0xA3	; 163
    1eec:	95 e0       	ldi	r25, 0x05	; 5
    1eee:	99 dd       	rcall	.-1230   	; 0x1a22 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1ef0:	ff 91       	pop	r31
    1ef2:	ef 91       	pop	r30
    1ef4:	bf 91       	pop	r27
    1ef6:	af 91       	pop	r26
    1ef8:	9f 91       	pop	r25
    1efa:	8f 91       	pop	r24
    1efc:	7f 91       	pop	r23
    1efe:	6f 91       	pop	r22
    1f00:	5f 91       	pop	r21
    1f02:	4f 91       	pop	r20
    1f04:	3f 91       	pop	r19
    1f06:	2f 91       	pop	r18
    1f08:	0f 90       	pop	r0
    1f0a:	0b be       	out	0x3b, r0	; 59
    1f0c:	0f 90       	pop	r0
    1f0e:	0f be       	out	0x3f, r0	; 63
    1f10:	0f 90       	pop	r0
    1f12:	1f 90       	pop	r1
    1f14:	18 95       	reti

00001f16 <_GLOBAL__sub_I___vector_51>:
    1f16:	e3 ea       	ldi	r30, 0xA3	; 163
    1f18:	f5 e0       	ldi	r31, 0x05	; 5
    1f1a:	82 e9       	ldi	r24, 0x92	; 146
    1f1c:	92 e0       	ldi	r25, 0x02	; 2
    1f1e:	91 83       	std	Z+1, r25	; 0x01
    1f20:	80 83       	st	Z, r24
    1f22:	85 ed       	ldi	r24, 0xD5	; 213
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	93 83       	std	Z+3, r25	; 0x03
    1f28:	82 83       	std	Z+2, r24	; 0x02
    1f2a:	84 ed       	ldi	r24, 0xD4	; 212
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	95 83       	std	Z+5, r25	; 0x05
    1f30:	84 83       	std	Z+4, r24	; 0x04
    1f32:	80 ed       	ldi	r24, 0xD0	; 208
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	97 83       	std	Z+7, r25	; 0x07
    1f38:	86 83       	std	Z+6, r24	; 0x06
    1f3a:	81 ed       	ldi	r24, 0xD1	; 209
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	91 87       	std	Z+9, r25	; 0x09
    1f40:	80 87       	std	Z+8, r24	; 0x08
    1f42:	82 ed       	ldi	r24, 0xD2	; 210
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	93 87       	std	Z+11, r25	; 0x0b
    1f48:	82 87       	std	Z+10, r24	; 0x0a
    1f4a:	86 ed       	ldi	r24, 0xD6	; 214
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	95 87       	std	Z+13, r25	; 0x0d
    1f50:	84 87       	std	Z+12, r24	; 0x0c
    1f52:	17 86       	std	Z+15, r1	; 0x0f
    1f54:	10 8a       	std	Z+16, r1	; 0x10
    1f56:	11 8a       	std	Z+17, r1	; 0x11
    1f58:	12 8a       	std	Z+18, r1	; 0x12
    1f5a:	08 95       	ret

00001f5c <__vector_54>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial3_available() {
  return Serial3.available();
}
    1f5c:	1f 92       	push	r1
    1f5e:	0f 92       	push	r0
    1f60:	0f b6       	in	r0, 0x3f	; 63
    1f62:	0f 92       	push	r0
    1f64:	11 24       	eor	r1, r1
    1f66:	0b b6       	in	r0, 0x3b	; 59
    1f68:	0f 92       	push	r0
    1f6a:	2f 93       	push	r18
    1f6c:	8f 93       	push	r24
    1f6e:	9f 93       	push	r25
    1f70:	af 93       	push	r26
    1f72:	bf 93       	push	r27
    1f74:	ef 93       	push	r30
    1f76:	ff 93       	push	r31
    1f78:	e0 91 dc 05 	lds	r30, 0x05DC	; 0x8005dc <Serial3+0x6>
    1f7c:	f0 91 dd 05 	lds	r31, 0x05DD	; 0x8005dd <Serial3+0x7>
    1f80:	80 81       	ld	r24, Z
    1f82:	82 fd       	sbrc	r24, 2
    1f84:	14 c0       	rjmp	.+40     	; 0x1fae <__vector_54+0x52>
    1f86:	e6 ed       	ldi	r30, 0xD6	; 214
    1f88:	f5 e0       	ldi	r31, 0x05	; 5
    1f8a:	a4 85       	ldd	r26, Z+12	; 0x0c
    1f8c:	b5 85       	ldd	r27, Z+13	; 0x0d
    1f8e:	2c 91       	ld	r18, X
    1f90:	87 85       	ldd	r24, Z+15	; 0x0f
    1f92:	8f 5f       	subi	r24, 0xFF	; 255
    1f94:	8f 70       	andi	r24, 0x0F	; 15
    1f96:	90 89       	ldd	r25, Z+16	; 0x10
    1f98:	89 17       	cp	r24, r25
    1f9a:	71 f0       	breq	.+28     	; 0x1fb8 <__vector_54+0x5c>
    1f9c:	df 01       	movw	r26, r30
    1f9e:	e7 85       	ldd	r30, Z+15	; 0x0f
    1fa0:	f0 e0       	ldi	r31, 0x00	; 0
    1fa2:	ea 52       	subi	r30, 0x2A	; 42
    1fa4:	fa 4f       	sbci	r31, 0xFA	; 250
    1fa6:	23 8b       	std	Z+19, r18	; 0x13
    1fa8:	1f 96       	adiw	r26, 0x0f	; 15
    1faa:	8c 93       	st	X, r24
    1fac:	05 c0       	rjmp	.+10     	; 0x1fb8 <__vector_54+0x5c>
    1fae:	e0 91 e2 05 	lds	r30, 0x05E2	; 0x8005e2 <Serial3+0xc>
    1fb2:	f0 91 e3 05 	lds	r31, 0x05E3	; 0x8005e3 <Serial3+0xd>
    1fb6:	80 81       	ld	r24, Z
    1fb8:	ff 91       	pop	r31
    1fba:	ef 91       	pop	r30
    1fbc:	bf 91       	pop	r27
    1fbe:	af 91       	pop	r26
    1fc0:	9f 91       	pop	r25
    1fc2:	8f 91       	pop	r24
    1fc4:	2f 91       	pop	r18
    1fc6:	0f 90       	pop	r0
    1fc8:	0b be       	out	0x3b, r0	; 59
    1fca:	0f 90       	pop	r0
    1fcc:	0f be       	out	0x3f, r0	; 63
    1fce:	0f 90       	pop	r0
    1fd0:	1f 90       	pop	r1
    1fd2:	18 95       	reti

00001fd4 <__vector_55>:
    1fd4:	1f 92       	push	r1
    1fd6:	0f 92       	push	r0
    1fd8:	0f b6       	in	r0, 0x3f	; 63
    1fda:	0f 92       	push	r0
    1fdc:	11 24       	eor	r1, r1
    1fde:	0b b6       	in	r0, 0x3b	; 59
    1fe0:	0f 92       	push	r0
    1fe2:	2f 93       	push	r18
    1fe4:	3f 93       	push	r19
    1fe6:	4f 93       	push	r20
    1fe8:	5f 93       	push	r21
    1fea:	6f 93       	push	r22
    1fec:	7f 93       	push	r23
    1fee:	8f 93       	push	r24
    1ff0:	9f 93       	push	r25
    1ff2:	af 93       	push	r26
    1ff4:	bf 93       	push	r27
    1ff6:	ef 93       	push	r30
    1ff8:	ff 93       	push	r31
    1ffa:	86 ed       	ldi	r24, 0xD6	; 214
    1ffc:	95 e0       	ldi	r25, 0x05	; 5
    1ffe:	11 dd       	rcall	.-1502   	; 0x1a22 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    2000:	ff 91       	pop	r31
    2002:	ef 91       	pop	r30
    2004:	bf 91       	pop	r27
    2006:	af 91       	pop	r26
    2008:	9f 91       	pop	r25
    200a:	8f 91       	pop	r24
    200c:	7f 91       	pop	r23
    200e:	6f 91       	pop	r22
    2010:	5f 91       	pop	r21
    2012:	4f 91       	pop	r20
    2014:	3f 91       	pop	r19
    2016:	2f 91       	pop	r18
    2018:	0f 90       	pop	r0
    201a:	0b be       	out	0x3b, r0	; 59
    201c:	0f 90       	pop	r0
    201e:	0f be       	out	0x3f, r0	; 63
    2020:	0f 90       	pop	r0
    2022:	1f 90       	pop	r1
    2024:	18 95       	reti

00002026 <_GLOBAL__sub_I___vector_54>:
    2026:	e6 ed       	ldi	r30, 0xD6	; 214
    2028:	f5 e0       	ldi	r31, 0x05	; 5
    202a:	82 e9       	ldi	r24, 0x92	; 146
    202c:	92 e0       	ldi	r25, 0x02	; 2
    202e:	91 83       	std	Z+1, r25	; 0x01
    2030:	80 83       	st	Z, r24
    2032:	85 e3       	ldi	r24, 0x35	; 53
    2034:	91 e0       	ldi	r25, 0x01	; 1
    2036:	93 83       	std	Z+3, r25	; 0x03
    2038:	82 83       	std	Z+2, r24	; 0x02
    203a:	84 e3       	ldi	r24, 0x34	; 52
    203c:	91 e0       	ldi	r25, 0x01	; 1
    203e:	95 83       	std	Z+5, r25	; 0x05
    2040:	84 83       	std	Z+4, r24	; 0x04
    2042:	80 e3       	ldi	r24, 0x30	; 48
    2044:	91 e0       	ldi	r25, 0x01	; 1
    2046:	97 83       	std	Z+7, r25	; 0x07
    2048:	86 83       	std	Z+6, r24	; 0x06
    204a:	81 e3       	ldi	r24, 0x31	; 49
    204c:	91 e0       	ldi	r25, 0x01	; 1
    204e:	91 87       	std	Z+9, r25	; 0x09
    2050:	80 87       	std	Z+8, r24	; 0x08
    2052:	82 e3       	ldi	r24, 0x32	; 50
    2054:	91 e0       	ldi	r25, 0x01	; 1
    2056:	93 87       	std	Z+11, r25	; 0x0b
    2058:	82 87       	std	Z+10, r24	; 0x0a
    205a:	86 e3       	ldi	r24, 0x36	; 54
    205c:	91 e0       	ldi	r25, 0x01	; 1
    205e:	95 87       	std	Z+13, r25	; 0x0d
    2060:	84 87       	std	Z+12, r24	; 0x0c
    2062:	17 86       	std	Z+15, r1	; 0x0f
    2064:	10 8a       	std	Z+16, r1	; 0x10
    2066:	11 8a       	std	Z+17, r1	; 0x11
    2068:	12 8a       	std	Z+18, r1	; 0x12
    206a:	08 95       	ret

0000206c <_ZN5Print5writeEPKhj>:
}

uint16_t Print::print(char c)
{
  return write(c);
}
    206c:	cf 92       	push	r12
    206e:	df 92       	push	r13
    2070:	ef 92       	push	r14
    2072:	ff 92       	push	r15
    2074:	0f 93       	push	r16
    2076:	1f 93       	push	r17
    2078:	cf 93       	push	r28
    207a:	df 93       	push	r29
    207c:	41 15       	cp	r20, r1
    207e:	51 05       	cpc	r21, r1
    2080:	c1 f0       	breq	.+48     	; 0x20b2 <_ZN5Print5writeEPKhj+0x46>
    2082:	6a 01       	movw	r12, r20
    2084:	8c 01       	movw	r16, r24
    2086:	e6 2e       	mov	r14, r22
    2088:	f7 2e       	mov	r15, r23
    208a:	c0 e0       	ldi	r28, 0x00	; 0
    208c:	d0 e0       	ldi	r29, 0x00	; 0
    208e:	d7 01       	movw	r26, r14
    2090:	6d 91       	ld	r22, X+
    2092:	7d 01       	movw	r14, r26
    2094:	d8 01       	movw	r26, r16
    2096:	ed 91       	ld	r30, X+
    2098:	fc 91       	ld	r31, X
    209a:	01 90       	ld	r0, Z+
    209c:	f0 81       	ld	r31, Z
    209e:	e0 2d       	mov	r30, r0
    20a0:	c8 01       	movw	r24, r16
    20a2:	19 95       	eicall
    20a4:	89 2b       	or	r24, r25
    20a6:	39 f0       	breq	.+14     	; 0x20b6 <_ZN5Print5writeEPKhj+0x4a>
    20a8:	21 96       	adiw	r28, 0x01	; 1
    20aa:	cc 16       	cp	r12, r28
    20ac:	dd 06       	cpc	r13, r29
    20ae:	79 f7       	brne	.-34     	; 0x208e <_ZN5Print5writeEPKhj+0x22>
    20b0:	02 c0       	rjmp	.+4      	; 0x20b6 <_ZN5Print5writeEPKhj+0x4a>
    20b2:	c0 e0       	ldi	r28, 0x00	; 0
    20b4:	d0 e0       	ldi	r29, 0x00	; 0
    20b6:	ce 01       	movw	r24, r28
    20b8:	df 91       	pop	r29
    20ba:	cf 91       	pop	r28
    20bc:	1f 91       	pop	r17
    20be:	0f 91       	pop	r16
    20c0:	ff 90       	pop	r15
    20c2:	ef 90       	pop	r14
    20c4:	df 90       	pop	r13
    20c6:	cf 90       	pop	r12
    20c8:	08 95       	ret

000020ca <_ZN5Print5printEPKc>:
    20ca:	61 15       	cp	r22, r1
    20cc:	71 05       	cpc	r23, r1
    20ce:	81 f0       	breq	.+32     	; 0x20f0 <_ZN5Print5printEPKc+0x26>
    20d0:	fb 01       	movw	r30, r22
    20d2:	01 90       	ld	r0, Z+
    20d4:	00 20       	and	r0, r0
    20d6:	e9 f7       	brne	.-6      	; 0x20d2 <_ZN5Print5printEPKc+0x8>
    20d8:	31 97       	sbiw	r30, 0x01	; 1
    20da:	af 01       	movw	r20, r30
    20dc:	46 1b       	sub	r20, r22
    20de:	57 0b       	sbc	r21, r23
    20e0:	dc 01       	movw	r26, r24
    20e2:	ed 91       	ld	r30, X+
    20e4:	fc 91       	ld	r31, X
    20e6:	02 80       	ldd	r0, Z+2	; 0x02
    20e8:	f3 81       	ldd	r31, Z+3	; 0x03
    20ea:	e0 2d       	mov	r30, r0
    20ec:	19 95       	eicall
    20ee:	08 95       	ret
    20f0:	80 e0       	ldi	r24, 0x00	; 0
    20f2:	90 e0       	ldi	r25, 0x00	; 0
    20f4:	08 95       	ret

000020f6 <_ZN5Print7printlnEv>:
  //void clearWriteError() { setWriteError(0); }
  
  virtual uint16_t write(uint8_t) = 0;
  uint16_t write(const char *str) {
	  if (str == NULL) return 0;
	  return write((const uint8_t *)str, strlen(str));
    20f6:	dc 01       	movw	r26, r24
    20f8:	ed 91       	ld	r30, X+
    20fa:	fc 91       	ld	r31, X
    20fc:	02 80       	ldd	r0, Z+2	; 0x02
    20fe:	f3 81       	ldd	r31, Z+3	; 0x03
    2100:	e0 2d       	mov	r30, r0
    2102:	42 e0       	ldi	r20, 0x02	; 2
    2104:	50 e0       	ldi	r21, 0x00	; 0
    2106:	60 ea       	ldi	r22, 0xA0	; 160
    2108:	72 e0       	ldi	r23, 0x02	; 2
    210a:	19 95       	eicall
}
*/
uint16_t Print::println(void)
{
  return write("\r\n");
}
    210c:	08 95       	ret

0000210e <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}
*/
uint16_t Print::println(const char c[])
{
    210e:	0f 93       	push	r16
    2110:	1f 93       	push	r17
    2112:	cf 93       	push	r28
    2114:	df 93       	push	r29
    2116:	ec 01       	movw	r28, r24
  uint16_t n = print(c);
    2118:	d8 df       	rcall	.-80     	; 0x20ca <_ZN5Print5printEPKc>
    211a:	8c 01       	movw	r16, r24
  n += println();
    211c:	ce 01       	movw	r24, r28
    211e:	eb df       	rcall	.-42     	; 0x20f6 <_ZN5Print7printlnEv>
  return n;
}
    2120:	80 0f       	add	r24, r16
    2122:	91 1f       	adc	r25, r17
    2124:	df 91       	pop	r29
    2126:	cf 91       	pop	r28
    2128:	1f 91       	pop	r17
    212a:	0f 91       	pop	r16
    212c:	08 95       	ret

0000212e <__udivmodsi4>:
    212e:	a1 e2       	ldi	r26, 0x21	; 33
    2130:	1a 2e       	mov	r1, r26
    2132:	aa 1b       	sub	r26, r26
    2134:	bb 1b       	sub	r27, r27
    2136:	fd 01       	movw	r30, r26
    2138:	0d c0       	rjmp	.+26     	; 0x2154 <__udivmodsi4_ep>

0000213a <__udivmodsi4_loop>:
    213a:	aa 1f       	adc	r26, r26
    213c:	bb 1f       	adc	r27, r27
    213e:	ee 1f       	adc	r30, r30
    2140:	ff 1f       	adc	r31, r31
    2142:	a2 17       	cp	r26, r18
    2144:	b3 07       	cpc	r27, r19
    2146:	e4 07       	cpc	r30, r20
    2148:	f5 07       	cpc	r31, r21
    214a:	20 f0       	brcs	.+8      	; 0x2154 <__udivmodsi4_ep>
    214c:	a2 1b       	sub	r26, r18
    214e:	b3 0b       	sbc	r27, r19
    2150:	e4 0b       	sbc	r30, r20
    2152:	f5 0b       	sbc	r31, r21

00002154 <__udivmodsi4_ep>:
    2154:	66 1f       	adc	r22, r22
    2156:	77 1f       	adc	r23, r23
    2158:	88 1f       	adc	r24, r24
    215a:	99 1f       	adc	r25, r25
    215c:	1a 94       	dec	r1
    215e:	69 f7       	brne	.-38     	; 0x213a <__udivmodsi4_loop>
    2160:	60 95       	com	r22
    2162:	70 95       	com	r23
    2164:	80 95       	com	r24
    2166:	90 95       	com	r25
    2168:	9b 01       	movw	r18, r22
    216a:	ac 01       	movw	r20, r24
    216c:	bd 01       	movw	r22, r26
    216e:	cf 01       	movw	r24, r30
    2170:	08 95       	ret

00002172 <__umulhisi3>:
    2172:	a2 9f       	mul	r26, r18
    2174:	b0 01       	movw	r22, r0
    2176:	b3 9f       	mul	r27, r19
    2178:	c0 01       	movw	r24, r0
    217a:	a3 9f       	mul	r26, r19
    217c:	70 0d       	add	r23, r0
    217e:	81 1d       	adc	r24, r1
    2180:	11 24       	eor	r1, r1
    2182:	91 1d       	adc	r25, r1
    2184:	b2 9f       	mul	r27, r18
    2186:	70 0d       	add	r23, r0
    2188:	81 1d       	adc	r24, r1
    218a:	11 24       	eor	r1, r1
    218c:	91 1d       	adc	r25, r1
    218e:	08 95       	ret

00002190 <__muluhisi3>:
    2190:	f0 df       	rcall	.-32     	; 0x2172 <__umulhisi3>
    2192:	a5 9f       	mul	r26, r21
    2194:	90 0d       	add	r25, r0
    2196:	b4 9f       	mul	r27, r20
    2198:	90 0d       	add	r25, r0
    219a:	a4 9f       	mul	r26, r20
    219c:	80 0d       	add	r24, r0
    219e:	91 1d       	adc	r25, r1
    21a0:	11 24       	eor	r1, r1
    21a2:	08 95       	ret

000021a4 <__tablejump2__>:
    21a4:	ee 0f       	add	r30, r30
    21a6:	ff 1f       	adc	r31, r31
    21a8:	88 1f       	adc	r24, r24
    21aa:	8b bf       	out	0x3b, r24	; 59
    21ac:	07 90       	elpm	r0, Z+
    21ae:	f6 91       	elpm	r31, Z
    21b0:	e0 2d       	mov	r30, r0
    21b2:	19 94       	eijmp

000021b4 <memcpy_P>:
    21b4:	fb 01       	movw	r30, r22
    21b6:	dc 01       	movw	r26, r24
    21b8:	02 c0       	rjmp	.+4      	; 0x21be <memcpy_P+0xa>
    21ba:	05 90       	lpm	r0, Z+
    21bc:	0d 92       	st	X+, r0
    21be:	41 50       	subi	r20, 0x01	; 1
    21c0:	50 40       	sbci	r21, 0x00	; 0
    21c2:	d8 f7       	brcc	.-10     	; 0x21ba <memcpy_P+0x6>
    21c4:	08 95       	ret

000021c6 <memcmp>:
    21c6:	fb 01       	movw	r30, r22
    21c8:	dc 01       	movw	r26, r24
    21ca:	04 c0       	rjmp	.+8      	; 0x21d4 <memcmp+0xe>
    21cc:	8d 91       	ld	r24, X+
    21ce:	01 90       	ld	r0, Z+
    21d0:	80 19       	sub	r24, r0
    21d2:	21 f4       	brne	.+8      	; 0x21dc <memcmp+0x16>
    21d4:	41 50       	subi	r20, 0x01	; 1
    21d6:	50 40       	sbci	r21, 0x00	; 0
    21d8:	c8 f7       	brcc	.-14     	; 0x21cc <memcmp+0x6>
    21da:	88 1b       	sub	r24, r24
    21dc:	99 0b       	sbc	r25, r25
    21de:	08 95       	ret

000021e0 <_exit>:
    21e0:	f8 94       	cli

000021e2 <__stop_program>:
    21e2:	ff cf       	rjmp	.-2      	; 0x21e2 <__stop_program>
