
RovController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000074  00800200  0000403e  000040d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000403e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000069f  00800274  00800274  00004146  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004146  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004178  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000ab8  00000000  00000000  000041b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00018901  00000000  00000000  00004c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005a0f  00000000  00000000  0001d571  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006726  00000000  00000000  00022f80  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000021b0  00000000  00000000  000296a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00006930  00000000  00000000  0002b858  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c012  00000000  00000000  00032188  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000009e0  00000000  00000000  0003e19a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4b c1       	rjmp	.+662    	; 0x298 <__ctors_end>
       2:	00 00       	nop
       4:	79 c1       	rjmp	.+754    	; 0x2f8 <__bad_interrupt>
       6:	00 00       	nop
       8:	77 c1       	rjmp	.+750    	; 0x2f8 <__bad_interrupt>
       a:	00 00       	nop
       c:	75 c1       	rjmp	.+746    	; 0x2f8 <__bad_interrupt>
       e:	00 00       	nop
      10:	73 c1       	rjmp	.+742    	; 0x2f8 <__bad_interrupt>
      12:	00 00       	nop
      14:	71 c1       	rjmp	.+738    	; 0x2f8 <__bad_interrupt>
      16:	00 00       	nop
      18:	6f c1       	rjmp	.+734    	; 0x2f8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	6d c1       	rjmp	.+730    	; 0x2f8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	6b c1       	rjmp	.+726    	; 0x2f8 <__bad_interrupt>
      22:	00 00       	nop
      24:	69 c1       	rjmp	.+722    	; 0x2f8 <__bad_interrupt>
      26:	00 00       	nop
      28:	67 c1       	rjmp	.+718    	; 0x2f8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	65 c1       	rjmp	.+714    	; 0x2f8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	63 c1       	rjmp	.+710    	; 0x2f8 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 36 16 	jmp	0x2c6c	; 0x2c6c <__vector_13>
      38:	5f c1       	rjmp	.+702    	; 0x2f8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	5d c1       	rjmp	.+698    	; 0x2f8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	5b c1       	rjmp	.+694    	; 0x2f8 <__bad_interrupt>
      42:	00 00       	nop
      44:	59 c1       	rjmp	.+690    	; 0x2f8 <__bad_interrupt>
      46:	00 00       	nop
      48:	57 c1       	rjmp	.+686    	; 0x2f8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	55 c1       	rjmp	.+682    	; 0x2f8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	53 c1       	rjmp	.+678    	; 0x2f8 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 0d 16 	jmp	0x2c1a	; 0x2c1a <__vector_21>
      58:	4f c1       	rjmp	.+670    	; 0x2f8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	4d c1       	rjmp	.+666    	; 0x2f8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	4b c1       	rjmp	.+662    	; 0x2f8 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 b8 11 	jmp	0x2370	; 0x2370 <__vector_25>
      68:	0c 94 f4 11 	jmp	0x23e8	; 0x23e8 <__vector_26>
      6c:	45 c1       	rjmp	.+650    	; 0x2f8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	43 c1       	rjmp	.+646    	; 0x2f8 <__bad_interrupt>
      72:	00 00       	nop
      74:	41 c1       	rjmp	.+642    	; 0x2f8 <__bad_interrupt>
      76:	00 00       	nop
      78:	3f c1       	rjmp	.+638    	; 0x2f8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	3d c1       	rjmp	.+634    	; 0x2f8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	3b c1       	rjmp	.+630    	; 0x2f8 <__bad_interrupt>
      82:	00 00       	nop
      84:	39 c1       	rjmp	.+626    	; 0x2f8 <__bad_interrupt>
      86:	00 00       	nop
      88:	37 c1       	rjmp	.+622    	; 0x2f8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	35 c1       	rjmp	.+618    	; 0x2f8 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 40 12 	jmp	0x2480	; 0x2480 <__vector_36>
      94:	0c 94 7c 12 	jmp	0x24f8	; 0x24f8 <__vector_37>
      98:	2f c1       	rjmp	.+606    	; 0x2f8 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 9f 17 	jmp	0x2f3e	; 0x2f3e <__vector_39>
      a0:	2b c1       	rjmp	.+598    	; 0x2f8 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	29 c1       	rjmp	.+594    	; 0x2f8 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	27 c1       	rjmp	.+590    	; 0x2f8 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	25 c1       	rjmp	.+586    	; 0x2f8 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	23 c1       	rjmp	.+582    	; 0x2f8 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	21 c1       	rjmp	.+578    	; 0x2f8 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	1f c1       	rjmp	.+574    	; 0x2f8 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	1d c1       	rjmp	.+570    	; 0x2f8 <__bad_interrupt>
      be:	00 00       	nop
      c0:	1b c1       	rjmp	.+566    	; 0x2f8 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	19 c1       	rjmp	.+562    	; 0x2f8 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	17 c1       	rjmp	.+558    	; 0x2f8 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 c8 12 	jmp	0x2590	; 0x2590 <__vector_51>
      d0:	0c 94 04 13 	jmp	0x2608	; 0x2608 <__vector_52>
      d4:	11 c1       	rjmp	.+546    	; 0x2f8 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 50 13 	jmp	0x26a0	; 0x26a0 <__vector_54>
      dc:	0c 94 8c 13 	jmp	0x2718	; 0x2718 <__vector_55>
      e0:	0b c1       	rjmp	.+534    	; 0x2f8 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	a5 18       	sub	r10, r5
      e6:	a8 18       	sub	r10, r8
      e8:	a8 18       	sub	r10, r8
      ea:	a8 18       	sub	r10, r8
      ec:	a8 18       	sub	r10, r8
      ee:	a8 18       	sub	r10, r8
      f0:	a8 18       	sub	r10, r8
      f2:	a8 18       	sub	r10, r8
      f4:	c0 17       	cp	r28, r16
      f6:	a8 18       	sub	r10, r8
      f8:	a8 18       	sub	r10, r8
      fa:	a8 18       	sub	r10, r8
      fc:	a8 18       	sub	r10, r8
      fe:	a8 18       	sub	r10, r8
     100:	a8 18       	sub	r10, r8
     102:	a8 18       	sub	r10, r8
     104:	c0 17       	cp	r28, r16
     106:	a8 18       	sub	r10, r8
     108:	a8 18       	sub	r10, r8
     10a:	a8 18       	sub	r10, r8
     10c:	a8 18       	sub	r10, r8
     10e:	a8 18       	sub	r10, r8
     110:	a8 18       	sub	r10, r8
     112:	a8 18       	sub	r10, r8
     114:	c8 17       	cp	r28, r24
     116:	a8 18       	sub	r10, r8
     118:	a8 18       	sub	r10, r8
     11a:	a8 18       	sub	r10, r8
     11c:	a8 18       	sub	r10, r8
     11e:	a8 18       	sub	r10, r8
     120:	a8 18       	sub	r10, r8
     122:	a8 18       	sub	r10, r8
     124:	ed 17       	cp	r30, r29
     126:	a8 18       	sub	r10, r8
     128:	a8 18       	sub	r10, r8
     12a:	a8 18       	sub	r10, r8
     12c:	a8 18       	sub	r10, r8
     12e:	a8 18       	sub	r10, r8
     130:	a8 18       	sub	r10, r8
     132:	a8 18       	sub	r10, r8
     134:	c8 17       	cp	r28, r24
     136:	a8 18       	sub	r10, r8
     138:	a8 18       	sub	r10, r8
     13a:	a8 18       	sub	r10, r8
     13c:	a8 18       	sub	r10, r8
     13e:	a8 18       	sub	r10, r8
     140:	a8 18       	sub	r10, r8
     142:	a8 18       	sub	r10, r8
     144:	f2 17       	cp	r31, r18
     146:	a8 18       	sub	r10, r8
     148:	a8 18       	sub	r10, r8
     14a:	a8 18       	sub	r10, r8
     14c:	a8 18       	sub	r10, r8
     14e:	a8 18       	sub	r10, r8
     150:	a8 18       	sub	r10, r8
     152:	a8 18       	sub	r10, r8
     154:	f7 17       	cp	r31, r23
     156:	a8 18       	sub	r10, r8
     158:	a8 18       	sub	r10, r8
     15a:	a8 18       	sub	r10, r8
     15c:	a8 18       	sub	r10, r8
     15e:	a8 18       	sub	r10, r8
     160:	a8 18       	sub	r10, r8
     162:	a8 18       	sub	r10, r8
     164:	08 18       	sub	r0, r8
     166:	a8 18       	sub	r10, r8
     168:	a8 18       	sub	r10, r8
     16a:	a8 18       	sub	r10, r8
     16c:	a8 18       	sub	r10, r8
     16e:	a8 18       	sub	r10, r8
     170:	a8 18       	sub	r10, r8
     172:	a8 18       	sub	r10, r8
     174:	31 18       	sub	r3, r1
     176:	a8 18       	sub	r10, r8
     178:	a8 18       	sub	r10, r8
     17a:	a8 18       	sub	r10, r8
     17c:	a8 18       	sub	r10, r8
     17e:	a8 18       	sub	r10, r8
     180:	a8 18       	sub	r10, r8
     182:	a8 18       	sub	r10, r8
     184:	fc 17       	cp	r31, r28
     186:	a8 18       	sub	r10, r8
     188:	a8 18       	sub	r10, r8
     18a:	a8 18       	sub	r10, r8
     18c:	a8 18       	sub	r10, r8
     18e:	a8 18       	sub	r10, r8
     190:	a8 18       	sub	r10, r8
     192:	a8 18       	sub	r10, r8
     194:	16 18       	sub	r1, r6
     196:	a8 18       	sub	r10, r8
     198:	a8 18       	sub	r10, r8
     19a:	a8 18       	sub	r10, r8
     19c:	a8 18       	sub	r10, r8
     19e:	a8 18       	sub	r10, r8
     1a0:	a8 18       	sub	r10, r8
     1a2:	a8 18       	sub	r10, r8
     1a4:	33 18       	sub	r3, r3
     1a6:	a8 18       	sub	r10, r8
     1a8:	a8 18       	sub	r10, r8
     1aa:	a8 18       	sub	r10, r8
     1ac:	a8 18       	sub	r10, r8
     1ae:	a8 18       	sub	r10, r8
     1b0:	a8 18       	sub	r10, r8
     1b2:	a8 18       	sub	r10, r8
     1b4:	33 18       	sub	r3, r3
     1b6:	a8 18       	sub	r10, r8
     1b8:	a8 18       	sub	r10, r8
     1ba:	a8 18       	sub	r10, r8
     1bc:	a8 18       	sub	r10, r8
     1be:	a8 18       	sub	r10, r8
     1c0:	a8 18       	sub	r10, r8
     1c2:	a8 18       	sub	r10, r8
     1c4:	33 18       	sub	r3, r3
     1c6:	a8 18       	sub	r10, r8
     1c8:	a8 18       	sub	r10, r8
     1ca:	a8 18       	sub	r10, r8
     1cc:	a8 18       	sub	r10, r8
     1ce:	a8 18       	sub	r10, r8
     1d0:	a8 18       	sub	r10, r8
     1d2:	a8 18       	sub	r10, r8
     1d4:	33 18       	sub	r3, r3
     1d6:	a8 18       	sub	r10, r8
     1d8:	a8 18       	sub	r10, r8
     1da:	a8 18       	sub	r10, r8
     1dc:	a8 18       	sub	r10, r8
     1de:	a8 18       	sub	r10, r8
     1e0:	a8 18       	sub	r10, r8
     1e2:	a8 18       	sub	r10, r8
     1e4:	3c 18       	sub	r3, r12
     1e6:	a8 18       	sub	r10, r8
     1e8:	a8 18       	sub	r10, r8
     1ea:	a8 18       	sub	r10, r8
     1ec:	a8 18       	sub	r10, r8
     1ee:	a8 18       	sub	r10, r8
     1f0:	a8 18       	sub	r10, r8
     1f2:	a8 18       	sub	r10, r8
     1f4:	6c 18       	sub	r6, r12
     1f6:	a8 18       	sub	r10, r8
     1f8:	a8 18       	sub	r10, r8
     1fa:	a8 18       	sub	r10, r8
     1fc:	a8 18       	sub	r10, r8
     1fe:	a8 18       	sub	r10, r8
     200:	a8 18       	sub	r10, r8
     202:	a8 18       	sub	r10, r8
     204:	3c 18       	sub	r3, r12
     206:	a8 18       	sub	r10, r8
     208:	a8 18       	sub	r10, r8
     20a:	a8 18       	sub	r10, r8
     20c:	a8 18       	sub	r10, r8
     20e:	a8 18       	sub	r10, r8
     210:	a8 18       	sub	r10, r8
     212:	a8 18       	sub	r10, r8
     214:	6c 18       	sub	r6, r12
     216:	a8 18       	sub	r10, r8
     218:	a8 18       	sub	r10, r8
     21a:	a8 18       	sub	r10, r8
     21c:	a8 18       	sub	r10, r8
     21e:	a8 18       	sub	r10, r8
     220:	a8 18       	sub	r10, r8
     222:	a8 18       	sub	r10, r8
     224:	54 18       	sub	r5, r4
     226:	a8 18       	sub	r10, r8
     228:	a8 18       	sub	r10, r8
     22a:	a8 18       	sub	r10, r8
     22c:	a8 18       	sub	r10, r8
     22e:	a8 18       	sub	r10, r8
     230:	a8 18       	sub	r10, r8
     232:	a8 18       	sub	r10, r8
     234:	70 18       	sub	r7, r0
     236:	a8 18       	sub	r10, r8
     238:	a8 18       	sub	r10, r8
     23a:	a8 18       	sub	r10, r8
     23c:	a8 18       	sub	r10, r8
     23e:	a8 18       	sub	r10, r8
     240:	a8 18       	sub	r10, r8
     242:	a8 18       	sub	r10, r8
     244:	70 18       	sub	r7, r0
     246:	a8 18       	sub	r10, r8
     248:	a8 18       	sub	r10, r8
     24a:	a8 18       	sub	r10, r8
     24c:	a8 18       	sub	r10, r8
     24e:	a8 18       	sub	r10, r8
     250:	a8 18       	sub	r10, r8
     252:	a8 18       	sub	r10, r8
     254:	85 18       	sub	r8, r5
     256:	a8 18       	sub	r10, r8
     258:	a8 18       	sub	r10, r8
     25a:	a8 18       	sub	r10, r8
     25c:	a8 18       	sub	r10, r8
     25e:	a8 18       	sub	r10, r8
     260:	a8 18       	sub	r10, r8
     262:	a8 18       	sub	r10, r8
     264:	9f 18       	sub	r9, r15
     266:	a8 18       	sub	r10, r8
     268:	a8 18       	sub	r10, r8
     26a:	a8 18       	sub	r10, r8
     26c:	a8 18       	sub	r10, r8
     26e:	a8 18       	sub	r10, r8
     270:	a8 18       	sub	r10, r8
     272:	a8 18       	sub	r10, r8
     274:	9f 18       	sub	r9, r15

00000276 <__trampolines_end>:
     276:	45 00       	.word	0x0045	; ????
     278:	00 82       	st	Z, r0
     27a:	00 00       	nop
     27c:	40 00       	.word	0x0040	; ????
     27e:	20 00       	.word	0x0020	; ????

00000280 <__ctors_start>:
     280:	e8 04       	cpc	r14, r8
     282:	04 08       	sbc	r0, r4
     284:	1d 12       	cpse	r1, r29
     286:	a5 12       	cpse	r10, r21
     288:	2d 13       	cpse	r18, r29
     28a:	b5 13       	cpse	r27, r21
     28c:	61 14       	cp	r6, r1
     28e:	5f 16       	cp	r5, r31
     290:	14 1a       	sub	r1, r20
     292:	e9 1a       	sub	r14, r25
     294:	f0 1b       	sub	r31, r16
     296:	9f 1c       	adc	r9, r15

00000298 <__ctors_end>:
     298:	11 24       	eor	r1, r1
     29a:	1f be       	out	0x3f, r1	; 63
     29c:	cf ef       	ldi	r28, 0xFF	; 255
     29e:	d1 e2       	ldi	r29, 0x21	; 33
     2a0:	de bf       	out	0x3e, r29	; 62
     2a2:	cd bf       	out	0x3d, r28	; 61
     2a4:	00 e0       	ldi	r16, 0x00	; 0
     2a6:	0c bf       	out	0x3c, r16	; 60

000002a8 <__do_copy_data>:
     2a8:	12 e0       	ldi	r17, 0x02	; 2
     2aa:	a0 e0       	ldi	r26, 0x00	; 0
     2ac:	b2 e0       	ldi	r27, 0x02	; 2
     2ae:	ee e3       	ldi	r30, 0x3E	; 62
     2b0:	f0 e4       	ldi	r31, 0x40	; 64
     2b2:	00 e0       	ldi	r16, 0x00	; 0
     2b4:	0b bf       	out	0x3b, r16	; 59
     2b6:	02 c0       	rjmp	.+4      	; 0x2bc <__do_copy_data+0x14>
     2b8:	07 90       	elpm	r0, Z+
     2ba:	0d 92       	st	X+, r0
     2bc:	a4 37       	cpi	r26, 0x74	; 116
     2be:	b1 07       	cpc	r27, r17
     2c0:	d9 f7       	brne	.-10     	; 0x2b8 <__do_copy_data+0x10>

000002c2 <__do_clear_bss>:
     2c2:	29 e0       	ldi	r18, 0x09	; 9
     2c4:	a4 e7       	ldi	r26, 0x74	; 116
     2c6:	b2 e0       	ldi	r27, 0x02	; 2
     2c8:	01 c0       	rjmp	.+2      	; 0x2cc <.do_clear_bss_start>

000002ca <.do_clear_bss_loop>:
     2ca:	1d 92       	st	X+, r1

000002cc <.do_clear_bss_start>:
     2cc:	a3 31       	cpi	r26, 0x13	; 19
     2ce:	b2 07       	cpc	r27, r18
     2d0:	e1 f7       	brne	.-8      	; 0x2ca <.do_clear_bss_loop>

000002d2 <__do_global_ctors>:
     2d2:	11 e0       	ldi	r17, 0x01	; 1
     2d4:	cc e4       	ldi	r28, 0x4C	; 76
     2d6:	d1 e0       	ldi	r29, 0x01	; 1
     2d8:	00 e0       	ldi	r16, 0x00	; 0
     2da:	06 c0       	rjmp	.+12     	; 0x2e8 <__do_global_ctors+0x16>
     2dc:	21 97       	sbiw	r28, 0x01	; 1
     2de:	01 09       	sbc	r16, r1
     2e0:	80 2f       	mov	r24, r16
     2e2:	fe 01       	movw	r30, r28
     2e4:	0e 94 25 1f 	call	0x3e4a	; 0x3e4a <__tablejump2__>
     2e8:	c0 34       	cpi	r28, 0x40	; 64
     2ea:	d1 07       	cpc	r29, r17
     2ec:	80 e0       	ldi	r24, 0x00	; 0
     2ee:	08 07       	cpc	r16, r24
     2f0:	a9 f7       	brne	.-22     	; 0x2dc <__do_global_ctors+0xa>
     2f2:	28 d6       	rcall	.+3152   	; 0xf44 <main>
     2f4:	0c 94 1d 20 	jmp	0x403a	; 0x403a <_exit>

000002f8 <__bad_interrupt>:
     2f8:	83 ce       	rjmp	.-762    	; 0x0 <__vectors>

000002fa <_ZN15Adafruit_Sensor15enableAutoRangeEb>:

    setMode(lastMode);
    return true;
  }
  return false;
}
     2fa:	08 95       	ret

000002fc <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>:
     2fc:	0f 93       	push	r16
     2fe:	1f 93       	push	r17
     300:	cf 93       	push	r28
     302:	df 93       	push	r29
     304:	8c 01       	movw	r16, r24
     306:	eb 01       	movw	r28, r22
     308:	88 e2       	ldi	r24, 0x28	; 40
     30a:	fb 01       	movw	r30, r22
     30c:	11 92       	st	Z+, r1
     30e:	8a 95       	dec	r24
     310:	e9 f7       	brne	.-6      	; 0x30c <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x10>
     312:	4b e0       	ldi	r20, 0x0B	; 11
     314:	50 e0       	ldi	r21, 0x00	; 0
     316:	68 e0       	ldi	r22, 0x08	; 8
     318:	72 e0       	ldi	r23, 0x02	; 2
     31a:	ce 01       	movw	r24, r28
     31c:	0e 94 0e 20 	call	0x401c	; 0x401c <strncpy>
     320:	1b 86       	std	Y+11, r1	; 0x0b
     322:	81 e0       	ldi	r24, 0x01	; 1
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	a0 e0       	ldi	r26, 0x00	; 0
     328:	b0 e0       	ldi	r27, 0x00	; 0
     32a:	8c 87       	std	Y+12, r24	; 0x0c
     32c:	9d 87       	std	Y+13, r25	; 0x0d
     32e:	ae 87       	std	Y+14, r26	; 0x0e
     330:	bf 87       	std	Y+15, r27	; 0x0f
     332:	f8 01       	movw	r30, r16
     334:	86 81       	ldd	r24, Z+6	; 0x06
     336:	97 81       	ldd	r25, Z+7	; 0x07
     338:	a0 85       	ldd	r26, Z+8	; 0x08
     33a:	b1 85       	ldd	r27, Z+9	; 0x09
     33c:	88 8b       	std	Y+16, r24	; 0x10
     33e:	99 8b       	std	Y+17, r25	; 0x11
     340:	aa 8b       	std	Y+18, r26	; 0x12
     342:	bb 8b       	std	Y+19, r27	; 0x13
     344:	83 e0       	ldi	r24, 0x03	; 3
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	a0 e0       	ldi	r26, 0x00	; 0
     34a:	b0 e0       	ldi	r27, 0x00	; 0
     34c:	8c 8b       	std	Y+20, r24	; 0x14
     34e:	9d 8b       	std	Y+21, r25	; 0x15
     350:	ae 8b       	std	Y+22, r26	; 0x16
     352:	bf 8b       	std	Y+23, r27	; 0x17
     354:	1c a2       	std	Y+36, r1	; 0x24
     356:	1d a2       	std	Y+37, r1	; 0x25
     358:	1e a2       	std	Y+38, r1	; 0x26
     35a:	1f a2       	std	Y+39, r1	; 0x27
     35c:	18 8e       	std	Y+24, r1	; 0x18
     35e:	19 8e       	std	Y+25, r1	; 0x19
     360:	1a 8e       	std	Y+26, r1	; 0x1a
     362:	1b 8e       	std	Y+27, r1	; 0x1b
     364:	1c 8e       	std	Y+28, r1	; 0x1c
     366:	1d 8e       	std	Y+29, r1	; 0x1d
     368:	1e 8e       	std	Y+30, r1	; 0x1e
     36a:	1f 8e       	std	Y+31, r1	; 0x1f
     36c:	8a e0       	ldi	r24, 0x0A	; 10
     36e:	97 ed       	ldi	r25, 0xD7	; 215
     370:	a3 e2       	ldi	r26, 0x23	; 35
     372:	bc e3       	ldi	r27, 0x3C	; 60
     374:	88 a3       	std	Y+32, r24	; 0x20
     376:	99 a3       	std	Y+33, r25	; 0x21
     378:	aa a3       	std	Y+34, r26	; 0x22
     37a:	bb a3       	std	Y+35, r27	; 0x23
     37c:	df 91       	pop	r29
     37e:	cf 91       	pop	r28
     380:	1f 91       	pop	r17
     382:	0f 91       	pop	r16
     384:	08 95       	ret

00000386 <_ZN15Adafruit_BNO055C1ElhP7TwoWire>:
     386:	0f 93       	push	r16
     388:	1f 93       	push	r17
     38a:	fc 01       	movw	r30, r24
     38c:	83 e1       	ldi	r24, 0x13	; 19
     38e:	92 e0       	ldi	r25, 0x02	; 2
     390:	91 83       	std	Z+1, r25	; 0x01
     392:	80 83       	st	Z, r24
     394:	46 83       	std	Z+6, r20	; 0x06
     396:	57 83       	std	Z+7, r21	; 0x07
     398:	60 87       	std	Z+8, r22	; 0x08
     39a:	71 87       	std	Z+9, r23	; 0x09
     39c:	23 83       	std	Z+3, r18	; 0x03
     39e:	15 83       	std	Z+5, r17	; 0x05
     3a0:	04 83       	std	Z+4, r16	; 0x04
     3a2:	1f 91       	pop	r17
     3a4:	0f 91       	pop	r16
     3a6:	08 95       	ret

000003a8 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>:
     3a8:	0f 93       	push	r16
     3aa:	1f 93       	push	r17
     3ac:	cf 93       	push	r28
     3ae:	df 93       	push	r29
     3b0:	ec 01       	movw	r28, r24
     3b2:	06 2f       	mov	r16, r22
     3b4:	14 2f       	mov	r17, r20
     3b6:	6b 81       	ldd	r22, Y+3	; 0x03
     3b8:	8c 81       	ldd	r24, Y+4	; 0x04
     3ba:	9d 81       	ldd	r25, Y+5	; 0x05
     3bc:	0e 94 88 19 	call	0x3310	; 0x3310 <_ZN7TwoWire17beginTransmissionEh>
     3c0:	8c 81       	ldd	r24, Y+4	; 0x04
     3c2:	9d 81       	ldd	r25, Y+5	; 0x05
     3c4:	dc 01       	movw	r26, r24
     3c6:	ed 91       	ld	r30, X+
     3c8:	fc 91       	ld	r31, X
     3ca:	01 90       	ld	r0, Z+
     3cc:	f0 81       	ld	r31, Z
     3ce:	e0 2d       	mov	r30, r0
     3d0:	60 2f       	mov	r22, r16
     3d2:	19 95       	eicall
     3d4:	8c 81       	ldd	r24, Y+4	; 0x04
     3d6:	9d 81       	ldd	r25, Y+5	; 0x05
     3d8:	dc 01       	movw	r26, r24
     3da:	ed 91       	ld	r30, X+
     3dc:	fc 91       	ld	r31, X
     3de:	01 90       	ld	r0, Z+
     3e0:	f0 81       	ld	r31, Z
     3e2:	e0 2d       	mov	r30, r0
     3e4:	61 2f       	mov	r22, r17
     3e6:	19 95       	eicall
     3e8:	8c 81       	ldd	r24, Y+4	; 0x04
     3ea:	9d 81       	ldd	r25, Y+5	; 0x05
     3ec:	0e 94 11 1a 	call	0x3422	; 0x3422 <_ZN7TwoWire15endTransmissionEv>
     3f0:	81 e0       	ldi	r24, 0x01	; 1
     3f2:	df 91       	pop	r29
     3f4:	cf 91       	pop	r28
     3f6:	1f 91       	pop	r17
     3f8:	0f 91       	pop	r16
     3fa:	08 95       	ret

000003fc <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>:
     3fc:	46 2f       	mov	r20, r22
     3fe:	fc 01       	movw	r30, r24
     400:	62 87       	std	Z+10, r22	; 0x0a
     402:	6d e3       	ldi	r22, 0x3D	; 61
     404:	d1 df       	rcall	.-94     	; 0x3a8 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     406:	ff ef       	ldi	r31, 0xFF	; 255
     408:	26 e7       	ldi	r18, 0x76	; 118
     40a:	81 e0       	ldi	r24, 0x01	; 1
     40c:	f1 50       	subi	r31, 0x01	; 1
     40e:	20 40       	sbci	r18, 0x00	; 0
     410:	80 40       	sbci	r24, 0x00	; 0
     412:	e1 f7       	brne	.-8      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     414:	00 c0       	rjmp	.+0      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     416:	00 00       	nop
     418:	08 95       	ret

0000041a <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>:
     41a:	1f 93       	push	r17
     41c:	cf 93       	push	r28
     41e:	df 93       	push	r29
     420:	ec 01       	movw	r28, r24
     422:	16 2f       	mov	r17, r22
     424:	6b 81       	ldd	r22, Y+3	; 0x03
     426:	8c 81       	ldd	r24, Y+4	; 0x04
     428:	9d 81       	ldd	r25, Y+5	; 0x05
     42a:	0e 94 88 19 	call	0x3310	; 0x3310 <_ZN7TwoWire17beginTransmissionEh>
     42e:	8c 81       	ldd	r24, Y+4	; 0x04
     430:	9d 81       	ldd	r25, Y+5	; 0x05
     432:	dc 01       	movw	r26, r24
     434:	ed 91       	ld	r30, X+
     436:	fc 91       	ld	r31, X
     438:	01 90       	ld	r0, Z+
     43a:	f0 81       	ld	r31, Z
     43c:	e0 2d       	mov	r30, r0
     43e:	61 2f       	mov	r22, r17
     440:	19 95       	eicall
     442:	8c 81       	ldd	r24, Y+4	; 0x04
     444:	9d 81       	ldd	r25, Y+5	; 0x05
     446:	0e 94 11 1a 	call	0x3422	; 0x3422 <_ZN7TwoWire15endTransmissionEv>
     44a:	41 e0       	ldi	r20, 0x01	; 1
     44c:	6b 81       	ldd	r22, Y+3	; 0x03
     44e:	8c 81       	ldd	r24, Y+4	; 0x04
     450:	9d 81       	ldd	r25, Y+5	; 0x05
     452:	0e 94 0b 1a 	call	0x3416	; 0x3416 <_ZN7TwoWire11requestFromEhh>
     456:	8c 81       	ldd	r24, Y+4	; 0x04
     458:	9d 81       	ldd	r25, Y+5	; 0x05
     45a:	dc 01       	movw	r26, r24
     45c:	ed 91       	ld	r30, X+
     45e:	fc 91       	ld	r31, X
     460:	02 84       	ldd	r0, Z+10	; 0x0a
     462:	f3 85       	ldd	r31, Z+11	; 0x0b
     464:	e0 2d       	mov	r30, r0
     466:	19 95       	eicall
     468:	df 91       	pop	r29
     46a:	cf 91       	pop	r28
     46c:	1f 91       	pop	r17
     46e:	08 95       	ret

00000470 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>:
     470:	1f 93       	push	r17
     472:	cf 93       	push	r28
     474:	df 93       	push	r29
     476:	ec 01       	movw	r28, r24
     478:	16 2f       	mov	r17, r22
     47a:	8c 81       	ldd	r24, Y+4	; 0x04
     47c:	9d 81       	ldd	r25, Y+5	; 0x05
     47e:	0e 94 78 19 	call	0x32f0	; 0x32f0 <_ZN7TwoWire5beginEv>
     482:	60 e0       	ldi	r22, 0x00	; 0
     484:	ce 01       	movw	r24, r28
     486:	c9 df       	rcall	.-110    	; 0x41a <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
     488:	80 3a       	cpi	r24, 0xA0	; 160
     48a:	79 f0       	breq	.+30     	; 0x4aa <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x3a>
     48c:	2f ef       	ldi	r18, 0xFF	; 255
     48e:	83 ed       	ldi	r24, 0xD3	; 211
     490:	90 e3       	ldi	r25, 0x30	; 48
     492:	21 50       	subi	r18, 0x01	; 1
     494:	80 40       	sbci	r24, 0x00	; 0
     496:	90 40       	sbci	r25, 0x00	; 0
     498:	e1 f7       	brne	.-8      	; 0x492 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x22>
     49a:	00 c0       	rjmp	.+0      	; 0x49c <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x2c>
     49c:	00 00       	nop
     49e:	60 e0       	ldi	r22, 0x00	; 0
     4a0:	ce 01       	movw	r24, r28
     4a2:	bb df       	rcall	.-138    	; 0x41a <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
     4a4:	80 3a       	cpi	r24, 0xA0	; 160
     4a6:	09 f0       	breq	.+2      	; 0x4aa <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x3a>
     4a8:	4b c0       	rjmp	.+150    	; 0x540 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xd0>
     4aa:	60 e0       	ldi	r22, 0x00	; 0
     4ac:	ce 01       	movw	r24, r28
     4ae:	a6 df       	rcall	.-180    	; 0x3fc <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
     4b0:	40 e2       	ldi	r20, 0x20	; 32
     4b2:	6f e3       	ldi	r22, 0x3F	; 63
     4b4:	ce 01       	movw	r24, r28
     4b6:	78 df       	rcall	.-272    	; 0x3a8 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     4b8:	2f ef       	ldi	r18, 0xFF	; 255
     4ba:	86 e7       	ldi	r24, 0x76	; 118
     4bc:	91 e0       	ldi	r25, 0x01	; 1
     4be:	21 50       	subi	r18, 0x01	; 1
     4c0:	80 40       	sbci	r24, 0x00	; 0
     4c2:	90 40       	sbci	r25, 0x00	; 0
     4c4:	e1 f7       	brne	.-8      	; 0x4be <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x4e>
     4c6:	00 c0       	rjmp	.+0      	; 0x4c8 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x58>
     4c8:	00 00       	nop
     4ca:	60 e0       	ldi	r22, 0x00	; 0
     4cc:	ce 01       	movw	r24, r28
     4ce:	a5 df       	rcall	.-182    	; 0x41a <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
     4d0:	80 3a       	cpi	r24, 0xA0	; 160
     4d2:	39 f0       	breq	.+14     	; 0x4e2 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x72>
     4d4:	8f e3       	ldi	r24, 0x3F	; 63
     4d6:	9c e9       	ldi	r25, 0x9C	; 156
     4d8:	01 97       	sbiw	r24, 0x01	; 1
     4da:	f1 f7       	brne	.-4      	; 0x4d8 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x68>
     4dc:	00 c0       	rjmp	.+0      	; 0x4de <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x6e>
     4de:	00 00       	nop
     4e0:	f4 cf       	rjmp	.-24     	; 0x4ca <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x5a>
     4e2:	9f ef       	ldi	r25, 0xFF	; 255
     4e4:	20 e7       	ldi	r18, 0x70	; 112
     4e6:	82 e0       	ldi	r24, 0x02	; 2
     4e8:	91 50       	subi	r25, 0x01	; 1
     4ea:	20 40       	sbci	r18, 0x00	; 0
     4ec:	80 40       	sbci	r24, 0x00	; 0
     4ee:	e1 f7       	brne	.-8      	; 0x4e8 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x78>
     4f0:	00 c0       	rjmp	.+0      	; 0x4f2 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x82>
     4f2:	00 00       	nop
     4f4:	40 e0       	ldi	r20, 0x00	; 0
     4f6:	6e e3       	ldi	r22, 0x3E	; 62
     4f8:	ce 01       	movw	r24, r28
     4fa:	56 df       	rcall	.-340    	; 0x3a8 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     4fc:	8f e3       	ldi	r24, 0x3F	; 63
     4fe:	9c e9       	ldi	r25, 0x9C	; 156
     500:	01 97       	sbiw	r24, 0x01	; 1
     502:	f1 f7       	brne	.-4      	; 0x500 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x90>
     504:	00 c0       	rjmp	.+0      	; 0x506 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x96>
     506:	00 00       	nop
     508:	40 e0       	ldi	r20, 0x00	; 0
     50a:	67 e0       	ldi	r22, 0x07	; 7
     50c:	ce 01       	movw	r24, r28
     50e:	4c df       	rcall	.-360    	; 0x3a8 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     510:	40 e0       	ldi	r20, 0x00	; 0
     512:	6f e3       	ldi	r22, 0x3F	; 63
     514:	ce 01       	movw	r24, r28
     516:	48 df       	rcall	.-368    	; 0x3a8 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     518:	8f e3       	ldi	r24, 0x3F	; 63
     51a:	9c e9       	ldi	r25, 0x9C	; 156
     51c:	01 97       	sbiw	r24, 0x01	; 1
     51e:	f1 f7       	brne	.-4      	; 0x51c <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xac>
     520:	00 c0       	rjmp	.+0      	; 0x522 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xb2>
     522:	00 00       	nop
     524:	61 2f       	mov	r22, r17
     526:	ce 01       	movw	r24, r28
     528:	69 df       	rcall	.-302    	; 0x3fc <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
     52a:	9f ef       	ldi	r25, 0xFF	; 255
     52c:	29 ef       	ldi	r18, 0xF9	; 249
     52e:	80 e0       	ldi	r24, 0x00	; 0
     530:	91 50       	subi	r25, 0x01	; 1
     532:	20 40       	sbci	r18, 0x00	; 0
     534:	80 40       	sbci	r24, 0x00	; 0
     536:	e1 f7       	brne	.-8      	; 0x530 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xc0>
     538:	00 c0       	rjmp	.+0      	; 0x53a <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xca>
     53a:	00 00       	nop
     53c:	81 e0       	ldi	r24, 0x01	; 1
     53e:	01 c0       	rjmp	.+2      	; 0x542 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xd2>
     540:	80 e0       	ldi	r24, 0x00	; 0
     542:	df 91       	pop	r29
     544:	cf 91       	pop	r28
     546:	1f 91       	pop	r17
     548:	08 95       	ret

0000054a <_ZN15Adafruit_BNO0557getTempEv>:
     54a:	64 e3       	ldi	r22, 0x34	; 52
     54c:	66 cf       	rjmp	.-308    	; 0x41a <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
     54e:	08 95       	ret

00000550 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>:
     550:	cf 92       	push	r12
     552:	df 92       	push	r13
     554:	ef 92       	push	r14
     556:	ff 92       	push	r15
     558:	0f 93       	push	r16
     55a:	1f 93       	push	r17
     55c:	cf 93       	push	r28
     55e:	df 93       	push	r29
     560:	7c 01       	movw	r14, r24
     562:	c6 2f       	mov	r28, r22
     564:	6a 01       	movw	r12, r20
     566:	12 2f       	mov	r17, r18
     568:	dc 01       	movw	r26, r24
     56a:	13 96       	adiw	r26, 0x03	; 3
     56c:	6c 91       	ld	r22, X
     56e:	13 97       	sbiw	r26, 0x03	; 3
     570:	14 96       	adiw	r26, 0x04	; 4
     572:	8d 91       	ld	r24, X+
     574:	9c 91       	ld	r25, X
     576:	15 97       	sbiw	r26, 0x05	; 5
     578:	0e 94 88 19 	call	0x3310	; 0x3310 <_ZN7TwoWire17beginTransmissionEh>
     57c:	f7 01       	movw	r30, r14
     57e:	84 81       	ldd	r24, Z+4	; 0x04
     580:	95 81       	ldd	r25, Z+5	; 0x05
     582:	dc 01       	movw	r26, r24
     584:	ed 91       	ld	r30, X+
     586:	fc 91       	ld	r31, X
     588:	01 90       	ld	r0, Z+
     58a:	f0 81       	ld	r31, Z
     58c:	e0 2d       	mov	r30, r0
     58e:	6c 2f       	mov	r22, r28
     590:	19 95       	eicall
     592:	f7 01       	movw	r30, r14
     594:	84 81       	ldd	r24, Z+4	; 0x04
     596:	95 81       	ldd	r25, Z+5	; 0x05
     598:	0e 94 11 1a 	call	0x3422	; 0x3422 <_ZN7TwoWire15endTransmissionEv>
     59c:	41 2f       	mov	r20, r17
     59e:	d7 01       	movw	r26, r14
     5a0:	13 96       	adiw	r26, 0x03	; 3
     5a2:	6c 91       	ld	r22, X
     5a4:	13 97       	sbiw	r26, 0x03	; 3
     5a6:	14 96       	adiw	r26, 0x04	; 4
     5a8:	8d 91       	ld	r24, X+
     5aa:	9c 91       	ld	r25, X
     5ac:	15 97       	sbiw	r26, 0x05	; 5
     5ae:	0e 94 0b 1a 	call	0x3416	; 0x3416 <_ZN7TwoWire11requestFromEhh>
     5b2:	11 23       	and	r17, r17
     5b4:	b1 f0       	breq	.+44     	; 0x5e2 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh+0x92>
     5b6:	e6 01       	movw	r28, r12
     5b8:	11 50       	subi	r17, 0x01	; 1
     5ba:	01 2f       	mov	r16, r17
     5bc:	10 e0       	ldi	r17, 0x00	; 0
     5be:	0f 5f       	subi	r16, 0xFF	; 255
     5c0:	1f 4f       	sbci	r17, 0xFF	; 255
     5c2:	0c 0d       	add	r16, r12
     5c4:	1d 1d       	adc	r17, r13
     5c6:	f7 01       	movw	r30, r14
     5c8:	84 81       	ldd	r24, Z+4	; 0x04
     5ca:	95 81       	ldd	r25, Z+5	; 0x05
     5cc:	dc 01       	movw	r26, r24
     5ce:	ed 91       	ld	r30, X+
     5d0:	fc 91       	ld	r31, X
     5d2:	02 84       	ldd	r0, Z+10	; 0x0a
     5d4:	f3 85       	ldd	r31, Z+11	; 0x0b
     5d6:	e0 2d       	mov	r30, r0
     5d8:	19 95       	eicall
     5da:	89 93       	st	Y+, r24
     5dc:	c0 17       	cp	r28, r16
     5de:	d1 07       	cpc	r29, r17
     5e0:	91 f7       	brne	.-28     	; 0x5c6 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh+0x76>
     5e2:	81 e0       	ldi	r24, 0x01	; 1
     5e4:	df 91       	pop	r29
     5e6:	cf 91       	pop	r28
     5e8:	1f 91       	pop	r17
     5ea:	0f 91       	pop	r16
     5ec:	ff 90       	pop	r15
     5ee:	ef 90       	pop	r14
     5f0:	df 90       	pop	r13
     5f2:	cf 90       	pop	r12
     5f4:	08 95       	ret

000005f6 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>:
 *            VECTOR_EULER
 *            VECTOR_LINEARACCEL
 *            VECTOR_GRAVITY]
 *  @return  vector from specified source
 */
AdafruitImu::Vector<3> Adafruit_BNO055::getVector(adafruit_vector_type_t vector_type) {
     5f6:	af 92       	push	r10
     5f8:	bf 92       	push	r11
     5fa:	cf 92       	push	r12
     5fc:	df 92       	push	r13
     5fe:	ff 92       	push	r15
     600:	0f 93       	push	r16
     602:	1f 93       	push	r17
     604:	cf 93       	push	r28
     606:	df 93       	push	r29
     608:	00 d0       	rcall	.+0      	; 0x60a <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x14>
     60a:	00 d0       	rcall	.+0      	; 0x60c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x16>
     60c:	cd b7       	in	r28, 0x3d	; 61
     60e:	de b7       	in	r29, 0x3e	; 62
     610:	8c 01       	movw	r16, r24
     612:	cb 01       	movw	r24, r22
     614:	f4 2e       	mov	r15, r20
	template <uint8_t N> class Vector
	{
		public:
		Vector()
		{
			memset(p_vec, 0, sizeof(double)*N);
     616:	2c e0       	ldi	r18, 0x0C	; 12
     618:	f8 01       	movw	r30, r16
     61a:	11 92       	st	Z+, r1
     61c:	2a 95       	dec	r18
     61e:	e9 f7       	brne	.-6      	; 0x61a <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x24>
  AdafruitImu::Vector<3> xyz;
  uint8_t buffer[6];
  memset(buffer, 0, 6);
     620:	ae 01       	movw	r20, r28
     622:	4f 5f       	subi	r20, 0xFF	; 255
     624:	5f 4f       	sbci	r21, 0xFF	; 255
     626:	26 e0       	ldi	r18, 0x06	; 6
     628:	fa 01       	movw	r30, r20
     62a:	11 92       	st	Z+, r1
     62c:	2a 95       	dec	r18
     62e:	e9 f7       	brne	.-6      	; 0x62a <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x34>

  int16_t x, y, z;
  x = y = z = 0;

  /* Read vector data (6 bytes) */
  readLen((adafruit_bno055_reg_t)vector_type, buffer, 6);
     630:	26 e0       	ldi	r18, 0x06	; 6
     632:	6f 2d       	mov	r22, r15
     634:	8d df       	rcall	.-230    	; 0x550 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>

  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
     636:	6a 81       	ldd	r22, Y+2	; 0x02
     638:	70 e0       	ldi	r23, 0x00	; 0
     63a:	76 2f       	mov	r23, r22
     63c:	66 27       	eor	r22, r22
     63e:	89 81       	ldd	r24, Y+1	; 0x01
     640:	68 2b       	or	r22, r24
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
     642:	8c 81       	ldd	r24, Y+4	; 0x04
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	98 2f       	mov	r25, r24
     648:	88 27       	eor	r24, r24
     64a:	2b 81       	ldd	r18, Y+3	; 0x03
     64c:	6c 01       	movw	r12, r24
     64e:	c2 2a       	or	r12, r18
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
     650:	8e 81       	ldd	r24, Y+6	; 0x06
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	98 2f       	mov	r25, r24
     656:	88 27       	eor	r24, r24
     658:	2d 81       	ldd	r18, Y+5	; 0x05
     65a:	5c 01       	movw	r10, r24
     65c:	a2 2a       	or	r10, r18

  /*!
   * Convert the value to an appropriate range (section 3.6.4)
   * and assign the value to the Vector type
   */
  switch (vector_type) {
     65e:	f4 e1       	ldi	r31, 0x14	; 20
     660:	ff 16       	cp	r15, r31
     662:	09 f4       	brne	.+2      	; 0x666 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x70>
     664:	4a c0       	rjmp	.+148    	; 0x6fa <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x104>
     666:	ff 15       	cp	r31, r15
     668:	40 f0       	brcs	.+16     	; 0x67a <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x84>
     66a:	88 e0       	ldi	r24, 0x08	; 8
     66c:	f8 16       	cp	r15, r24
     66e:	09 f4       	brne	.+2      	; 0x672 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x7c>
     670:	ac c0       	rjmp	.+344    	; 0x7ca <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x1d4>
     672:	ee e0       	ldi	r30, 0x0E	; 14
     674:	fe 16       	cp	r15, r30
     676:	69 f0       	breq	.+26     	; 0x692 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x9c>
     678:	43 c1       	rjmp	.+646    	; 0x900 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
     67a:	f8 e2       	ldi	r31, 0x28	; 40
     67c:	ff 16       	cp	r15, r31
     67e:	09 f4       	brne	.+2      	; 0x682 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x8c>
     680:	d8 c0       	rjmp	.+432    	; 0x832 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x23c>
     682:	8e e2       	ldi	r24, 0x2E	; 46
     684:	f8 16       	cp	r15, r24
     686:	09 f4       	brne	.+2      	; 0x68a <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x94>
     688:	08 c1       	rjmp	.+528    	; 0x89a <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x2a4>
     68a:	ea e1       	ldi	r30, 0x1A	; 26
     68c:	fe 12       	cpse	r15, r30
     68e:	38 c1       	rjmp	.+624    	; 0x900 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
     690:	68 c0       	rjmp	.+208    	; 0x762 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x16c>
  case VECTOR_MAGNETOMETER:
    /* 1uT = 16 LSB */
    xyz[0] = ((double)x) / 16.0;
     692:	07 2e       	mov	r0, r23
     694:	00 0c       	add	r0, r0
     696:	88 0b       	sbc	r24, r24
     698:	99 0b       	sbc	r25, r25
     69a:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <__floatsisf>
     69e:	20 e0       	ldi	r18, 0x00	; 0
     6a0:	30 e0       	ldi	r19, 0x00	; 0
     6a2:	40 e8       	ldi	r20, 0x80	; 128
     6a4:	5d e3       	ldi	r21, 0x3D	; 61
     6a6:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <__mulsf3>
     6aa:	f8 01       	movw	r30, r16
     6ac:	60 83       	st	Z, r22
     6ae:	71 83       	std	Z+1, r23	; 0x01
     6b0:	82 83       	std	Z+2, r24	; 0x02
     6b2:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 16.0;
     6b4:	b6 01       	movw	r22, r12
     6b6:	dd 0c       	add	r13, r13
     6b8:	88 0b       	sbc	r24, r24
     6ba:	99 0b       	sbc	r25, r25
     6bc:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <__floatsisf>
     6c0:	20 e0       	ldi	r18, 0x00	; 0
     6c2:	30 e0       	ldi	r19, 0x00	; 0
     6c4:	40 e8       	ldi	r20, 0x80	; 128
     6c6:	5d e3       	ldi	r21, 0x3D	; 61
     6c8:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <__mulsf3>
     6cc:	f8 01       	movw	r30, r16
     6ce:	64 83       	std	Z+4, r22	; 0x04
     6d0:	75 83       	std	Z+5, r23	; 0x05
     6d2:	86 83       	std	Z+6, r24	; 0x06
     6d4:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 16.0;
     6d6:	b5 01       	movw	r22, r10
     6d8:	bb 0c       	add	r11, r11
     6da:	88 0b       	sbc	r24, r24
     6dc:	99 0b       	sbc	r25, r25
     6de:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <__floatsisf>
     6e2:	20 e0       	ldi	r18, 0x00	; 0
     6e4:	30 e0       	ldi	r19, 0x00	; 0
     6e6:	40 e8       	ldi	r20, 0x80	; 128
     6e8:	5d e3       	ldi	r21, 0x3D	; 61
     6ea:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <__mulsf3>
     6ee:	f8 01       	movw	r30, r16
     6f0:	60 87       	std	Z+8, r22	; 0x08
     6f2:	71 87       	std	Z+9, r23	; 0x09
     6f4:	82 87       	std	Z+10, r24	; 0x0a
     6f6:	93 87       	std	Z+11, r25	; 0x0b
    break;
     6f8:	03 c1       	rjmp	.+518    	; 0x900 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_GYROSCOPE:
    /* 1dps = 16 LSB */
    xyz[0] = ((double)x) / 16.0;
     6fa:	07 2e       	mov	r0, r23
     6fc:	00 0c       	add	r0, r0
     6fe:	88 0b       	sbc	r24, r24
     700:	99 0b       	sbc	r25, r25
     702:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <__floatsisf>
     706:	20 e0       	ldi	r18, 0x00	; 0
     708:	30 e0       	ldi	r19, 0x00	; 0
     70a:	40 e8       	ldi	r20, 0x80	; 128
     70c:	5d e3       	ldi	r21, 0x3D	; 61
     70e:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <__mulsf3>
     712:	f8 01       	movw	r30, r16
     714:	60 83       	st	Z, r22
     716:	71 83       	std	Z+1, r23	; 0x01
     718:	82 83       	std	Z+2, r24	; 0x02
     71a:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 16.0;
     71c:	b6 01       	movw	r22, r12
     71e:	dd 0c       	add	r13, r13
     720:	88 0b       	sbc	r24, r24
     722:	99 0b       	sbc	r25, r25
     724:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <__floatsisf>
     728:	20 e0       	ldi	r18, 0x00	; 0
     72a:	30 e0       	ldi	r19, 0x00	; 0
     72c:	40 e8       	ldi	r20, 0x80	; 128
     72e:	5d e3       	ldi	r21, 0x3D	; 61
     730:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <__mulsf3>
     734:	f8 01       	movw	r30, r16
     736:	64 83       	std	Z+4, r22	; 0x04
     738:	75 83       	std	Z+5, r23	; 0x05
     73a:	86 83       	std	Z+6, r24	; 0x06
     73c:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 16.0;
     73e:	b5 01       	movw	r22, r10
     740:	bb 0c       	add	r11, r11
     742:	88 0b       	sbc	r24, r24
     744:	99 0b       	sbc	r25, r25
     746:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <__floatsisf>
     74a:	20 e0       	ldi	r18, 0x00	; 0
     74c:	30 e0       	ldi	r19, 0x00	; 0
     74e:	40 e8       	ldi	r20, 0x80	; 128
     750:	5d e3       	ldi	r21, 0x3D	; 61
     752:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <__mulsf3>
     756:	f8 01       	movw	r30, r16
     758:	60 87       	std	Z+8, r22	; 0x08
     75a:	71 87       	std	Z+9, r23	; 0x09
     75c:	82 87       	std	Z+10, r24	; 0x0a
     75e:	93 87       	std	Z+11, r25	; 0x0b
    break;
     760:	cf c0       	rjmp	.+414    	; 0x900 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_EULER:
    /* 1 degree = 16 LSB */
    xyz[0] = ((double)x) / 16.0;
     762:	07 2e       	mov	r0, r23
     764:	00 0c       	add	r0, r0
     766:	88 0b       	sbc	r24, r24
     768:	99 0b       	sbc	r25, r25
     76a:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <__floatsisf>
     76e:	20 e0       	ldi	r18, 0x00	; 0
     770:	30 e0       	ldi	r19, 0x00	; 0
     772:	40 e8       	ldi	r20, 0x80	; 128
     774:	5d e3       	ldi	r21, 0x3D	; 61
     776:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <__mulsf3>
     77a:	f8 01       	movw	r30, r16
     77c:	60 83       	st	Z, r22
     77e:	71 83       	std	Z+1, r23	; 0x01
     780:	82 83       	std	Z+2, r24	; 0x02
     782:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 16.0;
     784:	b6 01       	movw	r22, r12
     786:	dd 0c       	add	r13, r13
     788:	88 0b       	sbc	r24, r24
     78a:	99 0b       	sbc	r25, r25
     78c:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <__floatsisf>
     790:	20 e0       	ldi	r18, 0x00	; 0
     792:	30 e0       	ldi	r19, 0x00	; 0
     794:	40 e8       	ldi	r20, 0x80	; 128
     796:	5d e3       	ldi	r21, 0x3D	; 61
     798:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <__mulsf3>
     79c:	f8 01       	movw	r30, r16
     79e:	64 83       	std	Z+4, r22	; 0x04
     7a0:	75 83       	std	Z+5, r23	; 0x05
     7a2:	86 83       	std	Z+6, r24	; 0x06
     7a4:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 16.0;
     7a6:	b5 01       	movw	r22, r10
     7a8:	bb 0c       	add	r11, r11
     7aa:	88 0b       	sbc	r24, r24
     7ac:	99 0b       	sbc	r25, r25
     7ae:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <__floatsisf>
     7b2:	20 e0       	ldi	r18, 0x00	; 0
     7b4:	30 e0       	ldi	r19, 0x00	; 0
     7b6:	40 e8       	ldi	r20, 0x80	; 128
     7b8:	5d e3       	ldi	r21, 0x3D	; 61
     7ba:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <__mulsf3>
     7be:	f8 01       	movw	r30, r16
     7c0:	60 87       	std	Z+8, r22	; 0x08
     7c2:	71 87       	std	Z+9, r23	; 0x09
     7c4:	82 87       	std	Z+10, r24	; 0x0a
     7c6:	93 87       	std	Z+11, r25	; 0x0b
    break;
     7c8:	9b c0       	rjmp	.+310    	; 0x900 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_ACCELEROMETER:
    /* 1m/s^2 = 100 LSB */
    xyz[0] = ((double)x) / 100.0;
     7ca:	07 2e       	mov	r0, r23
     7cc:	00 0c       	add	r0, r0
     7ce:	88 0b       	sbc	r24, r24
     7d0:	99 0b       	sbc	r25, r25
     7d2:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <__floatsisf>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	48 ec       	ldi	r20, 0xC8	; 200
     7dc:	52 e4       	ldi	r21, 0x42	; 66
     7de:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <__divsf3>
     7e2:	f8 01       	movw	r30, r16
     7e4:	60 83       	st	Z, r22
     7e6:	71 83       	std	Z+1, r23	; 0x01
     7e8:	82 83       	std	Z+2, r24	; 0x02
     7ea:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 100.0;
     7ec:	b6 01       	movw	r22, r12
     7ee:	dd 0c       	add	r13, r13
     7f0:	88 0b       	sbc	r24, r24
     7f2:	99 0b       	sbc	r25, r25
     7f4:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <__floatsisf>
     7f8:	20 e0       	ldi	r18, 0x00	; 0
     7fa:	30 e0       	ldi	r19, 0x00	; 0
     7fc:	48 ec       	ldi	r20, 0xC8	; 200
     7fe:	52 e4       	ldi	r21, 0x42	; 66
     800:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <__divsf3>
     804:	f8 01       	movw	r30, r16
     806:	64 83       	std	Z+4, r22	; 0x04
     808:	75 83       	std	Z+5, r23	; 0x05
     80a:	86 83       	std	Z+6, r24	; 0x06
     80c:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 100.0;
     80e:	b5 01       	movw	r22, r10
     810:	bb 0c       	add	r11, r11
     812:	88 0b       	sbc	r24, r24
     814:	99 0b       	sbc	r25, r25
     816:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <__floatsisf>
     81a:	20 e0       	ldi	r18, 0x00	; 0
     81c:	30 e0       	ldi	r19, 0x00	; 0
     81e:	48 ec       	ldi	r20, 0xC8	; 200
     820:	52 e4       	ldi	r21, 0x42	; 66
     822:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <__divsf3>
     826:	f8 01       	movw	r30, r16
     828:	60 87       	std	Z+8, r22	; 0x08
     82a:	71 87       	std	Z+9, r23	; 0x09
     82c:	82 87       	std	Z+10, r24	; 0x0a
     82e:	93 87       	std	Z+11, r25	; 0x0b
    break;
     830:	67 c0       	rjmp	.+206    	; 0x900 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_LINEARACCEL:
    /* 1m/s^2 = 100 LSB */
    xyz[0] = ((double)x) / 100.0;
     832:	07 2e       	mov	r0, r23
     834:	00 0c       	add	r0, r0
     836:	88 0b       	sbc	r24, r24
     838:	99 0b       	sbc	r25, r25
     83a:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <__floatsisf>
     83e:	20 e0       	ldi	r18, 0x00	; 0
     840:	30 e0       	ldi	r19, 0x00	; 0
     842:	48 ec       	ldi	r20, 0xC8	; 200
     844:	52 e4       	ldi	r21, 0x42	; 66
     846:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <__divsf3>
     84a:	f8 01       	movw	r30, r16
     84c:	60 83       	st	Z, r22
     84e:	71 83       	std	Z+1, r23	; 0x01
     850:	82 83       	std	Z+2, r24	; 0x02
     852:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 100.0;
     854:	b6 01       	movw	r22, r12
     856:	dd 0c       	add	r13, r13
     858:	88 0b       	sbc	r24, r24
     85a:	99 0b       	sbc	r25, r25
     85c:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <__floatsisf>
     860:	20 e0       	ldi	r18, 0x00	; 0
     862:	30 e0       	ldi	r19, 0x00	; 0
     864:	48 ec       	ldi	r20, 0xC8	; 200
     866:	52 e4       	ldi	r21, 0x42	; 66
     868:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <__divsf3>
     86c:	f8 01       	movw	r30, r16
     86e:	64 83       	std	Z+4, r22	; 0x04
     870:	75 83       	std	Z+5, r23	; 0x05
     872:	86 83       	std	Z+6, r24	; 0x06
     874:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 100.0;
     876:	b5 01       	movw	r22, r10
     878:	bb 0c       	add	r11, r11
     87a:	88 0b       	sbc	r24, r24
     87c:	99 0b       	sbc	r25, r25
     87e:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <__floatsisf>
     882:	20 e0       	ldi	r18, 0x00	; 0
     884:	30 e0       	ldi	r19, 0x00	; 0
     886:	48 ec       	ldi	r20, 0xC8	; 200
     888:	52 e4       	ldi	r21, 0x42	; 66
     88a:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <__divsf3>
     88e:	f8 01       	movw	r30, r16
     890:	60 87       	std	Z+8, r22	; 0x08
     892:	71 87       	std	Z+9, r23	; 0x09
     894:	82 87       	std	Z+10, r24	; 0x0a
     896:	93 87       	std	Z+11, r25	; 0x0b
    break;
     898:	33 c0       	rjmp	.+102    	; 0x900 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_GRAVITY:
    /* 1m/s^2 = 100 LSB */
    xyz[0] = ((double)x) / 100.0;
     89a:	07 2e       	mov	r0, r23
     89c:	00 0c       	add	r0, r0
     89e:	88 0b       	sbc	r24, r24
     8a0:	99 0b       	sbc	r25, r25
     8a2:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <__floatsisf>
     8a6:	20 e0       	ldi	r18, 0x00	; 0
     8a8:	30 e0       	ldi	r19, 0x00	; 0
     8aa:	48 ec       	ldi	r20, 0xC8	; 200
     8ac:	52 e4       	ldi	r21, 0x42	; 66
     8ae:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <__divsf3>
     8b2:	f8 01       	movw	r30, r16
     8b4:	60 83       	st	Z, r22
     8b6:	71 83       	std	Z+1, r23	; 0x01
     8b8:	82 83       	std	Z+2, r24	; 0x02
     8ba:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 100.0;
     8bc:	b6 01       	movw	r22, r12
     8be:	dd 0c       	add	r13, r13
     8c0:	88 0b       	sbc	r24, r24
     8c2:	99 0b       	sbc	r25, r25
     8c4:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <__floatsisf>
     8c8:	20 e0       	ldi	r18, 0x00	; 0
     8ca:	30 e0       	ldi	r19, 0x00	; 0
     8cc:	48 ec       	ldi	r20, 0xC8	; 200
     8ce:	52 e4       	ldi	r21, 0x42	; 66
     8d0:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <__divsf3>
     8d4:	f8 01       	movw	r30, r16
     8d6:	64 83       	std	Z+4, r22	; 0x04
     8d8:	75 83       	std	Z+5, r23	; 0x05
     8da:	86 83       	std	Z+6, r24	; 0x06
     8dc:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 100.0;
     8de:	b5 01       	movw	r22, r10
     8e0:	bb 0c       	add	r11, r11
     8e2:	88 0b       	sbc	r24, r24
     8e4:	99 0b       	sbc	r25, r25
     8e6:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <__floatsisf>
     8ea:	20 e0       	ldi	r18, 0x00	; 0
     8ec:	30 e0       	ldi	r19, 0x00	; 0
     8ee:	48 ec       	ldi	r20, 0xC8	; 200
     8f0:	52 e4       	ldi	r21, 0x42	; 66
     8f2:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <__divsf3>
     8f6:	f8 01       	movw	r30, r16
     8f8:	60 87       	std	Z+8, r22	; 0x08
     8fa:	71 87       	std	Z+9, r23	; 0x09
     8fc:	82 87       	std	Z+10, r24	; 0x0a
     8fe:	93 87       	std	Z+11, r25	; 0x0b
    break;
  }

  return xyz;
}
     900:	c8 01       	movw	r24, r16
     902:	26 96       	adiw	r28, 0x06	; 6
     904:	0f b6       	in	r0, 0x3f	; 63
     906:	f8 94       	cli
     908:	de bf       	out	0x3e, r29	; 62
     90a:	0f be       	out	0x3f, r0	; 63
     90c:	cd bf       	out	0x3d, r28	; 61
     90e:	df 91       	pop	r29
     910:	cf 91       	pop	r28
     912:	1f 91       	pop	r17
     914:	0f 91       	pop	r16
     916:	ff 90       	pop	r15
     918:	df 90       	pop	r13
     91a:	cf 90       	pop	r12
     91c:	bf 90       	pop	r11
     91e:	af 90       	pop	r10
     920:	08 95       	ret

00000922 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>:
/*!
 *  @brief  Reads the sensor and returns the data as a sensors_event_t
 *  @param  event
 *  @return always returns true
 */
bool Adafruit_BNO055::getEvent(sensors_event_t *event) {
     922:	0f 93       	push	r16
     924:	1f 93       	push	r17
     926:	cf 93       	push	r28
     928:	df 93       	push	r29
     92a:	cd b7       	in	r28, 0x3d	; 61
     92c:	de b7       	in	r29, 0x3e	; 62
     92e:	2c 97       	sbiw	r28, 0x0c	; 12
     930:	0f b6       	in	r0, 0x3f	; 63
     932:	f8 94       	cli
     934:	de bf       	out	0x3e, r29	; 62
     936:	0f be       	out	0x3f, r0	; 63
     938:	cd bf       	out	0x3d, r28	; 61
     93a:	8b 01       	movw	r16, r22
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
     93c:	20 e2       	ldi	r18, 0x20	; 32
     93e:	fb 01       	movw	r30, r22
     940:	11 92       	st	Z+, r1
     942:	2a 95       	dec	r18
     944:	e9 f7       	brne	.-6      	; 0x940 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t+0x1e>

  event->version = sizeof(sensors_event_t);
     946:	40 e2       	ldi	r20, 0x20	; 32
     948:	50 e0       	ldi	r21, 0x00	; 0
     94a:	60 e0       	ldi	r22, 0x00	; 0
     94c:	70 e0       	ldi	r23, 0x00	; 0
     94e:	f8 01       	movw	r30, r16
     950:	40 83       	st	Z, r20
     952:	51 83       	std	Z+1, r21	; 0x01
     954:	62 83       	std	Z+2, r22	; 0x02
     956:	73 83       	std	Z+3, r23	; 0x03
  event->sensor_id = _sensorID;
     958:	fc 01       	movw	r30, r24
     95a:	46 81       	ldd	r20, Z+6	; 0x06
     95c:	57 81       	ldd	r21, Z+7	; 0x07
     95e:	60 85       	ldd	r22, Z+8	; 0x08
     960:	71 85       	ldd	r23, Z+9	; 0x09
     962:	f8 01       	movw	r30, r16
     964:	44 83       	std	Z+4, r20	; 0x04
     966:	55 83       	std	Z+5, r21	; 0x05
     968:	66 83       	std	Z+6, r22	; 0x06
     96a:	77 83       	std	Z+7, r23	; 0x07
  event->type = SENSOR_TYPE_ORIENTATION;
     96c:	43 e0       	ldi	r20, 0x03	; 3
     96e:	50 e0       	ldi	r21, 0x00	; 0
     970:	60 e0       	ldi	r22, 0x00	; 0
     972:	70 e0       	ldi	r23, 0x00	; 0
     974:	40 87       	std	Z+8, r20	; 0x08
     976:	51 87       	std	Z+9, r21	; 0x09
     978:	62 87       	std	Z+10, r22	; 0x0a
     97a:	73 87       	std	Z+11, r23	; 0x0b
  //event->timestamp = millis();

  /* Get a Euler angle sample for orientation */
  AdafruitImu::Vector<3> euler = getVector(Adafruit_BNO055::VECTOR_EULER);
     97c:	4a e1       	ldi	r20, 0x1A	; 26
     97e:	bc 01       	movw	r22, r24
     980:	ce 01       	movw	r24, r28
     982:	01 96       	adiw	r24, 0x01	; 1
     984:	38 de       	rcall	.-912    	; 0x5f6 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
  event->orientation.x = euler.x();
     986:	89 81       	ldd	r24, Y+1	; 0x01
     988:	9a 81       	ldd	r25, Y+2	; 0x02
     98a:	ab 81       	ldd	r26, Y+3	; 0x03
     98c:	bc 81       	ldd	r27, Y+4	; 0x04
     98e:	f8 01       	movw	r30, r16
     990:	80 8b       	std	Z+16, r24	; 0x10
     992:	91 8b       	std	Z+17, r25	; 0x11
     994:	a2 8b       	std	Z+18, r26	; 0x12
     996:	b3 8b       	std	Z+19, r27	; 0x13
  event->orientation.y = euler.y();
     998:	8d 81       	ldd	r24, Y+5	; 0x05
     99a:	9e 81       	ldd	r25, Y+6	; 0x06
     99c:	af 81       	ldd	r26, Y+7	; 0x07
     99e:	b8 85       	ldd	r27, Y+8	; 0x08
     9a0:	84 8b       	std	Z+20, r24	; 0x14
     9a2:	95 8b       	std	Z+21, r25	; 0x15
     9a4:	a6 8b       	std	Z+22, r26	; 0x16
     9a6:	b7 8b       	std	Z+23, r27	; 0x17
  event->orientation.z = euler.z();
     9a8:	89 85       	ldd	r24, Y+9	; 0x09
     9aa:	9a 85       	ldd	r25, Y+10	; 0x0a
     9ac:	ab 85       	ldd	r26, Y+11	; 0x0b
     9ae:	bc 85       	ldd	r27, Y+12	; 0x0c
     9b0:	80 8f       	std	Z+24, r24	; 0x18
     9b2:	91 8f       	std	Z+25, r25	; 0x19
     9b4:	a2 8f       	std	Z+26, r26	; 0x1a
     9b6:	b3 8f       	std	Z+27, r27	; 0x1b

  return true;
}
     9b8:	81 e0       	ldi	r24, 0x01	; 1
     9ba:	2c 96       	adiw	r28, 0x0c	; 12
     9bc:	0f b6       	in	r0, 0x3f	; 63
     9be:	f8 94       	cli
     9c0:	de bf       	out	0x3e, r29	; 62
     9c2:	0f be       	out	0x3f, r0	; 63
     9c4:	cd bf       	out	0x3d, r28	; 61
     9c6:	df 91       	pop	r29
     9c8:	cf 91       	pop	r28
     9ca:	1f 91       	pop	r17
     9cc:	0f 91       	pop	r16
     9ce:	08 95       	ret

000009d0 <_GLOBAL__sub_I__Z14RunPingCommandPKhh>:
#include "EtherComm.h"
#include "Robot.h"
#include "Commands.h"
#include <stddef.h>

uint8_t* const SendDataBuffer = (uint8_t*)(&EtherComm::buffer[2]);
     9d0:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
     9d4:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
     9d8:	02 96       	adiw	r24, 0x02	; 2
     9da:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <__data_end+0x1>
     9de:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <__data_end>
     9e2:	08 95       	ret

000009e4 <_ZL10enableChipv>:
    return rev;
}

bool ENC28J60::isLinkUp() {
    return (readPhyByte(PHSTAT2) >> 2) & 1;
}
     9e4:	e0 91 77 02 	lds	r30, 0x0277	; 0x800277 <_ZL10selectPort>
     9e8:	f0 91 78 02 	lds	r31, 0x0278	; 0x800278 <_ZL10selectPort+0x1>
     9ec:	90 81       	ld	r25, Z
     9ee:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <_ZL9selectPin>
     9f2:	80 95       	com	r24
     9f4:	89 23       	and	r24, r25
     9f6:	80 83       	st	Z, r24
     9f8:	08 95       	ret

000009fa <_ZL11disableChipv>:
     9fa:	e0 91 77 02 	lds	r30, 0x0277	; 0x800277 <_ZL10selectPort>
     9fe:	f0 91 78 02 	lds	r31, 0x0278	; 0x800278 <_ZL10selectPort+0x1>
     a02:	90 81       	ld	r25, Z
     a04:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <_ZL9selectPin>
     a08:	89 2b       	or	r24, r25
     a0a:	80 83       	st	Z, r24
     a0c:	08 95       	ret

00000a0e <_ZL6readOphh>:
     a0e:	cf 93       	push	r28
     a10:	df 93       	push	r29
     a12:	d8 2f       	mov	r29, r24
     a14:	c6 2f       	mov	r28, r22
     a16:	e6 df       	rcall	.-52     	; 0x9e4 <_ZL10enableChipv>
     a18:	8c 2f       	mov	r24, r28
     a1a:	cf 71       	andi	r28, 0x1F	; 31
     a1c:	cd 2b       	or	r28, r29
     a1e:	ce bd       	out	0x2e, r28	; 46
     a20:	00 00       	nop
     a22:	0d b4       	in	r0, 0x2d	; 45
     a24:	07 fe       	sbrs	r0, 7
     a26:	fd cf       	rjmp	.-6      	; 0xa22 <_ZL6readOphh+0x14>
     a28:	1e bc       	out	0x2e, r1	; 46
     a2a:	00 00       	nop
     a2c:	0d b4       	in	r0, 0x2d	; 45
     a2e:	07 fe       	sbrs	r0, 7
     a30:	fd cf       	rjmp	.-6      	; 0xa2c <_ZL6readOphh+0x1e>
     a32:	ce b5       	in	r28, 0x2e	; 46
     a34:	88 23       	and	r24, r24
     a36:	34 f4       	brge	.+12     	; 0xa44 <_ZL6readOphh+0x36>
     a38:	1e bc       	out	0x2e, r1	; 46
     a3a:	00 00       	nop
     a3c:	0d b4       	in	r0, 0x2d	; 45
     a3e:	07 fe       	sbrs	r0, 7
     a40:	fd cf       	rjmp	.-6      	; 0xa3c <_ZL6readOphh+0x2e>
     a42:	ce b5       	in	r28, 0x2e	; 46
     a44:	da df       	rcall	.-76     	; 0x9fa <_ZL11disableChipv>
     a46:	8c 2f       	mov	r24, r28
     a48:	df 91       	pop	r29
     a4a:	cf 91       	pop	r28
     a4c:	08 95       	ret

00000a4e <_ZL7writeOphhh>:
     a4e:	1f 93       	push	r17
     a50:	cf 93       	push	r28
     a52:	df 93       	push	r29
     a54:	c8 2f       	mov	r28, r24
     a56:	d6 2f       	mov	r29, r22
     a58:	14 2f       	mov	r17, r20
     a5a:	c4 df       	rcall	.-120    	; 0x9e4 <_ZL10enableChipv>
     a5c:	df 71       	andi	r29, 0x1F	; 31
     a5e:	cd 2b       	or	r28, r29
     a60:	ce bd       	out	0x2e, r28	; 46
     a62:	00 00       	nop
     a64:	0d b4       	in	r0, 0x2d	; 45
     a66:	07 fe       	sbrs	r0, 7
     a68:	fd cf       	rjmp	.-6      	; 0xa64 <_ZL7writeOphhh+0x16>
     a6a:	1e bd       	out	0x2e, r17	; 46
     a6c:	00 00       	nop
     a6e:	0d b4       	in	r0, 0x2d	; 45
     a70:	07 fe       	sbrs	r0, 7
     a72:	fd cf       	rjmp	.-6      	; 0xa6e <_ZL7writeOphhh+0x20>
     a74:	c2 df       	rcall	.-124    	; 0x9fa <_ZL11disableChipv>
     a76:	df 91       	pop	r29
     a78:	cf 91       	pop	r28
     a7a:	1f 91       	pop	r17
     a7c:	08 95       	ret

00000a7e <_ZL7SetBankh>:
     a7e:	1f 93       	push	r17
     a80:	cf 93       	push	r28
     a82:	df 93       	push	r29
     a84:	18 2f       	mov	r17, r24
     a86:	10 76       	andi	r17, 0x60	; 96
     a88:	c1 2f       	mov	r28, r17
     a8a:	d0 e0       	ldi	r29, 0x00	; 0
     a8c:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <_ZL12Enc28j60Bank>
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	c8 17       	cp	r28, r24
     a94:	d9 07       	cpc	r29, r25
     a96:	a1 f0       	breq	.+40     	; 0xac0 <_ZL7SetBankh+0x42>
     a98:	43 e0       	ldi	r20, 0x03	; 3
     a9a:	6f e1       	ldi	r22, 0x1F	; 31
     a9c:	80 ea       	ldi	r24, 0xA0	; 160
     a9e:	d7 df       	rcall	.-82     	; 0xa4e <_ZL7writeOphhh>
     aa0:	10 93 79 02 	sts	0x0279, r17	; 0x800279 <_ZL12Enc28j60Bank>
     aa4:	ae 01       	movw	r20, r28
     aa6:	55 95       	asr	r21
     aa8:	47 95       	ror	r20
     aaa:	55 95       	asr	r21
     aac:	47 95       	ror	r20
     aae:	55 95       	asr	r21
     ab0:	47 95       	ror	r20
     ab2:	55 95       	asr	r21
     ab4:	47 95       	ror	r20
     ab6:	55 95       	asr	r21
     ab8:	47 95       	ror	r20
     aba:	6f e1       	ldi	r22, 0x1F	; 31
     abc:	80 e8       	ldi	r24, 0x80	; 128
     abe:	c7 df       	rcall	.-114    	; 0xa4e <_ZL7writeOphhh>
     ac0:	df 91       	pop	r29
     ac2:	cf 91       	pop	r28
     ac4:	1f 91       	pop	r17
     ac6:	08 95       	ret

00000ac8 <_ZL11readRegByteh>:
     ac8:	cf 93       	push	r28
     aca:	c8 2f       	mov	r28, r24
     acc:	d8 df       	rcall	.-80     	; 0xa7e <_ZL7SetBankh>
     ace:	6c 2f       	mov	r22, r28
     ad0:	80 e0       	ldi	r24, 0x00	; 0
     ad2:	9d df       	rcall	.-198    	; 0xa0e <_ZL6readOphh>
     ad4:	cf 91       	pop	r28
     ad6:	08 95       	ret

00000ad8 <_ZL12writeRegBytehh>:
     ad8:	cf 93       	push	r28
     ada:	df 93       	push	r29
     adc:	c8 2f       	mov	r28, r24
     ade:	d6 2f       	mov	r29, r22
     ae0:	ce df       	rcall	.-100    	; 0xa7e <_ZL7SetBankh>
     ae2:	4d 2f       	mov	r20, r29
     ae4:	6c 2f       	mov	r22, r28
     ae6:	80 e4       	ldi	r24, 0x40	; 64
     ae8:	b2 df       	rcall	.-156    	; 0xa4e <_ZL7writeOphhh>
     aea:	df 91       	pop	r29
     aec:	cf 91       	pop	r28
     aee:	08 95       	ret

00000af0 <_ZL8writeReghj>:
     af0:	cf 93       	push	r28
     af2:	df 93       	push	r29
     af4:	c8 2f       	mov	r28, r24
     af6:	d7 2f       	mov	r29, r23
     af8:	ef df       	rcall	.-34     	; 0xad8 <_ZL12writeRegBytehh>
     afa:	6d 2f       	mov	r22, r29
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	8c 0f       	add	r24, r28
     b00:	eb df       	rcall	.-42     	; 0xad8 <_ZL12writeRegBytehh>
     b02:	df 91       	pop	r29
     b04:	cf 91       	pop	r28
     b06:	08 95       	ret

00000b08 <_ZN8ENC28J6010packetSendEj>:

struct transmit_status_vector {
    uint8_t bytes[7];
};

void ENC28J60::packetSend(uint16_t len) {
     b08:	af 92       	push	r10
     b0a:	bf 92       	push	r11
     b0c:	cf 92       	push	r12
     b0e:	df 92       	push	r13
     b10:	ef 92       	push	r14
     b12:	ff 92       	push	r15
     b14:	0f 93       	push	r16
     b16:	1f 93       	push	r17
     b18:	cf 93       	push	r28
     b1a:	df 93       	push	r29
     b1c:	7c 01       	movw	r14, r24
        writeOp(ENC28J60_BIT_FIELD_CLR, EIR, EIR_TXERIF|EIR_TXIF);

        // prepare new transmission
        if (retry == 0) {
            writeReg(EWRPT, TXSTART_INIT);
            writeReg(ETXND, TXSTART_INIT+len);
     b1e:	6c 01       	movw	r12, r24
     b20:	84 ef       	ldi	r24, 0xF4	; 244
     b22:	d8 1a       	sub	r13, r24

	static void write(const void *buf, uint16_t nbyte){
		if(nbyte == 0) return;
		
		const uint8_t* buff = (const uint8_t*)(buf);
		SPDR = *buff;
     b24:	0f 2e       	mov	r0, r31
     b26:	fa e7       	ldi	r31, 0x7A	; 122
     b28:	af 2e       	mov	r10, r31
     b2a:	f2 e0       	ldi	r31, 0x02	; 2
     b2c:	bf 2e       	mov	r11, r31
     b2e:	f0 2d       	mov	r31, r0
     b30:	87 01       	movw	r16, r14
     b32:	06 58       	subi	r16, 0x86	; 134
     b34:	1d 4f       	sbci	r17, 0xFD	; 253
        // the Microchip TCP/IP stack implementation used to first check
        // whether TXERIF is set and only then reset the transmit logic
        // but this has been changed in later versions; possibly they
        // have a reason for this; they don't mention this in the errata
        // sheet
        writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRST);
     b36:	40 e8       	ldi	r20, 0x80	; 128
     b38:	6f e1       	ldi	r22, 0x1F	; 31
     b3a:	80 e8       	ldi	r24, 0x80	; 128
     b3c:	88 df       	rcall	.-240    	; 0xa4e <_ZL7writeOphhh>
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRST);
     b3e:	40 e8       	ldi	r20, 0x80	; 128
     b40:	6f e1       	ldi	r22, 0x1F	; 31
     b42:	80 ea       	ldi	r24, 0xA0	; 160
     b44:	84 df       	rcall	.-248    	; 0xa4e <_ZL7writeOphhh>
        writeOp(ENC28J60_BIT_FIELD_CLR, EIR, EIR_TXERIF|EIR_TXIF);
     b46:	4a e0       	ldi	r20, 0x0A	; 10
     b48:	6c e1       	ldi	r22, 0x1C	; 28
     b4a:	80 ea       	ldi	r24, 0xA0	; 160
     b4c:	80 df       	rcall	.-256    	; 0xa4e <_ZL7writeOphhh>

        // prepare new transmission
        if (retry == 0) {
            writeReg(EWRPT, TXSTART_INIT);
     b4e:	60 e0       	ldi	r22, 0x00	; 0
     b50:	7c e0       	ldi	r23, 0x0C	; 12
     b52:	82 e0       	ldi	r24, 0x02	; 2
            writeReg(ETXND, TXSTART_INIT+len);
     b54:	cd df       	rcall	.-102    	; 0xaf0 <_ZL8writeReghj>
     b56:	b6 01       	movw	r22, r12
     b58:	86 e0       	ldi	r24, 0x06	; 6
            writeOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
     b5a:	ca df       	rcall	.-108    	; 0xaf0 <_ZL8writeReghj>
     b5c:	40 e0       	ldi	r20, 0x00	; 0
     b5e:	60 e0       	ldi	r22, 0x00	; 0
     b60:	8a e7       	ldi	r24, 0x7A	; 122
     b62:	75 df       	rcall	.-278    	; 0xa4e <_ZL7writeOphhh>
    }
    disableChip();
}

static void writeBuf(uint16_t len, const uint8_t* data) {
    enableChip();
     b64:	3f df       	rcall	.-386    	; 0x9e4 <_ZL10enableChipv>
     b66:	e1 14       	cp	r14, r1
    if (len != 0) {
     b68:	f1 04       	cpc	r15, r1
     b6a:	e1 f0       	breq	.+56     	; 0xba4 <_ZN8ENC28J6010packetSendEj+0x9c>
     b6c:	8a e7       	ldi	r24, 0x7A	; 122
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     b6e:	8e bd       	out	0x2e, r24	; 46
     b70:	00 00       	nop
		asm volatile("nop");
     b72:	0d b4       	in	r0, 0x2d	; 45
		while(!(SPSR & _BV(SPIF)));
     b74:	07 fe       	sbrs	r0, 7
     b76:	fd cf       	rjmp	.-6      	; 0xb72 <_ZN8ENC28J6010packetSendEj+0x6a>
     b78:	f5 01       	movw	r30, r10

	static void write(const void *buf, uint16_t nbyte){
		if(nbyte == 0) return;
		
		const uint8_t* buff = (const uint8_t*)(buf);
		SPDR = *buff;
     b7a:	80 81       	ld	r24, Z
     b7c:	8e bd       	out	0x2e, r24	; 46
     b7e:	f1 e0       	ldi	r31, 0x01	; 1
		while(--nbyte){
     b80:	ef 16       	cp	r14, r31
     b82:	f1 04       	cpc	r15, r1
     b84:	59 f0       	breq	.+22     	; 0xb9c <_ZN8ENC28J6010packetSendEj+0x94>
     b86:	eb e7       	ldi	r30, 0x7B	; 123
     b88:	f2 e0       	ldi	r31, 0x02	; 2
     b8a:	00 00       	nop
			asm volatile("nop");
     b8c:	0d b4       	in	r0, 0x2d	; 45
			while (!(SPSR & _BV(SPIF))) ;
     b8e:	07 fe       	sbrs	r0, 7
     b90:	fd cf       	rjmp	.-6      	; 0xb8c <_ZN8ENC28J6010packetSendEj+0x84>
     b92:	81 91       	ld	r24, Z+
			SPDR = *++buff;
     b94:	8e bd       	out	0x2e, r24	; 46
     b96:	e0 17       	cp	r30, r16
	static void write(const void *buf, uint16_t nbyte){
		if(nbyte == 0) return;
		
		const uint8_t* buff = (const uint8_t*)(buf);
		SPDR = *buff;
		while(--nbyte){
     b98:	f1 07       	cpc	r31, r17
     b9a:	b9 f7       	brne	.-18     	; 0xb8a <_ZN8ENC28J6010packetSendEj+0x82>
			asm volatile("nop");
			while (!(SPSR & _BV(SPIF))) ;
			SPDR = *++buff;
		}
		asm volatile("nop");
     b9c:	00 00       	nop
		while (!(SPSR & _BV(SPIF))) ;
     b9e:	0d b4       	in	r0, 0x2d	; 45
     ba0:	07 fe       	sbrs	r0, 7
        SPI.write8(ENC28J60_WRITE_BUF_MEM);

        SPI.write(data, len);
    }
    disableChip();
     ba2:	fd cf       	rjmp	.-6      	; 0xb9e <_ZN8ENC28J6010packetSendEj+0x96>
            writeOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
            writeBuf(len, buffer);
        }

        // initiate transmission
        writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
     ba4:	2a df       	rcall	.-428    	; 0x9fa <_ZL11disableChipv>
     ba6:	48 e0       	ldi	r20, 0x08	; 8
     ba8:	6f e1       	ldi	r22, 0x1F	; 31
     baa:	80 e8       	ldi	r24, 0x80	; 128
     bac:	50 df       	rcall	.-352    	; 0xa4e <_ZL7writeOphhh>
        // wait until transmission has finished; referring to the data sheet and
        // to the errata (Errata Issue 13; Example 1) you only need to wait until either
        // TXIF or TXERIF gets set; however this leads to hangs; apparently Microchip
        // realized this and in later implementations of their tcp/ip stack they introduced
        // a counter to avoid hangs; of course they didn't update the errata sheet
        uint16_t count = 0;
     bae:	c0 e0       	ldi	r28, 0x00	; 0
     bb0:	d0 e0       	ldi	r29, 0x00	; 0
        while ((readRegByte(EIR) & (EIR_TXIF | EIR_TXERIF)) == 0 && ++count < 1000U)
     bb2:	8c e1       	ldi	r24, 0x1C	; 28
     bb4:	89 df       	rcall	.-238    	; 0xac8 <_ZL11readRegByteh>
     bb6:	8a 70       	andi	r24, 0x0A	; 10
     bb8:	31 f4       	brne	.+12     	; 0xbc6 <_ZN8ENC28J6010packetSendEj+0xbe>
     bba:	21 96       	adiw	r28, 0x01	; 1
     bbc:	c8 3e       	cpi	r28, 0xE8	; 232
     bbe:	83 e0       	ldi	r24, 0x03	; 3
     bc0:	d8 07       	cpc	r29, r24
     bc2:	b9 f7       	brne	.-18     	; 0xbb2 <_ZN8ENC28J6010packetSendEj+0xaa>
     bc4:	0c c0       	rjmp	.+24     	; 0xbde <_ZN8ENC28J6010packetSendEj+0xd6>
            ;

        if (!(readRegByte(EIR) & EIR_TXERIF) && count < 1000U) {
     bc6:	8c e1       	ldi	r24, 0x1C	; 28
     bc8:	7f df       	rcall	.-258    	; 0xac8 <_ZL11readRegByteh>
     bca:	81 fd       	sbrc	r24, 1
     bcc:	03 c0       	rjmp	.+6      	; 0xbd4 <_ZN8ENC28J6010packetSendEj+0xcc>
     bce:	c8 3e       	cpi	r28, 0xE8	; 232
     bd0:	d3 40       	sbci	r29, 0x03	; 3
            // no error; start new transmission
            break;
        }

        // cancel previous transmission if stuck
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRTS);
     bd2:	40 f0       	brcs	.+16     	; 0xbe4 <_ZN8ENC28J6010packetSendEj+0xdc>
     bd4:	48 e0       	ldi	r20, 0x08	; 8
     bd6:	6f e1       	ldi	r22, 0x1F	; 31
     bd8:	80 ea       	ldi	r24, 0xA0	; 160
     bda:	39 df       	rcall	.-398    	; 0xa4e <_ZL7writeOphhh>
};

void ENC28J60::packetSend(uint16_t len) {
    uint8_t retry = 0;

    while (1) {
     bdc:	ac cf       	rjmp	.-168    	; 0xb36 <_ZN8ENC28J6010packetSendEj+0x2e>
        // a counter to avoid hangs; of course they didn't update the errata sheet
        uint16_t count = 0;
        while ((readRegByte(EIR) & (EIR_TXIF | EIR_TXERIF)) == 0 && ++count < 1000U)
            ;

        if (!(readRegByte(EIR) & EIR_TXERIF) && count < 1000U) {
     bde:	8c e1       	ldi	r24, 0x1C	; 28
     be0:	73 df       	rcall	.-282    	; 0xac8 <_ZL11readRegByteh>
     be2:	f8 cf       	rjmp	.-16     	; 0xbd4 <_ZN8ENC28J6010packetSendEj+0xcc>
     be4:	df 91       	pop	r29
        }

        // cancel previous transmission if stuck
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRTS);
    }
}
     be6:	cf 91       	pop	r28
     be8:	1f 91       	pop	r17
     bea:	0f 91       	pop	r16
     bec:	ff 90       	pop	r15
     bee:	ef 90       	pop	r14
     bf0:	df 90       	pop	r13
     bf2:	cf 90       	pop	r12
     bf4:	bf 90       	pop	r11
     bf6:	af 90       	pop	r10
     bf8:	08 95       	ret

00000bfa <_ZL13fill_checksumhhjh>:
     bfa:	cf 92       	push	r12
    gPB[UDP_CHECKSUM_H_P] = 0;
    gPB[UDP_CHECKSUM_L_P] = 0;
    memcpy(gPB + UDP_DATA_P, data, datalen);
    fill_checksum(UDP_CHECKSUM_H_P, IP_SRC_P, 16 + datalen,1);
    packetSend(UDP_HEADER_LEN+IP_HEADER_LEN+ETH_HEADER_LEN+datalen);
}
     bfc:	df 92       	push	r13
     bfe:	ef 92       	push	r14
     c00:	ff 92       	push	r15
     c02:	cf 93       	push	r28
     c04:	df 93       	push	r29
     c06:	c6 2f       	mov	r28, r22
     c08:	d0 e0       	ldi	r29, 0x00	; 0
     c0a:	c6 58       	subi	r28, 0x86	; 134
     c0c:	dd 4f       	sbci	r29, 0xFD	; 253
     c0e:	21 30       	cpi	r18, 0x01	; 1
     c10:	81 f4       	brne	.+32     	; 0xc32 <_ZL13fill_checksumhhjh+0x38>
     c12:	6a 01       	movw	r12, r20
     c14:	99 e0       	ldi	r25, 0x09	; 9
     c16:	c9 0e       	add	r12, r25
     c18:	d1 1c       	adc	r13, r1
     c1a:	e1 2c       	mov	r14, r1
     c1c:	f1 2c       	mov	r15, r1
     c1e:	03 c0       	rjmp	.+6      	; 0xc26 <_ZL13fill_checksumhhjh+0x2c>
     c20:	c1 2c       	mov	r12, r1
     c22:	d1 2c       	mov	r13, r1
     c24:	76 01       	movw	r14, r12
     c26:	42 30       	cpi	r20, 0x02	; 2
     c28:	51 05       	cpc	r21, r1
     c2a:	28 f1       	brcs	.+74     	; 0xc76 <_ZL13fill_checksumhhjh+0x7c>
     c2c:	fe 01       	movw	r30, r28
     c2e:	da 01       	movw	r26, r20
     c30:	09 c0       	rjmp	.+18     	; 0xc44 <_ZL13fill_checksumhhjh+0x4a>
     c32:	22 30       	cpi	r18, 0x02	; 2
     c34:	a9 f7       	brne	.-22     	; 0xc20 <_ZL13fill_checksumhhjh+0x26>
     c36:	6a 01       	movw	r12, r20
     c38:	92 e0       	ldi	r25, 0x02	; 2
     c3a:	c9 1a       	sub	r12, r25
     c3c:	d1 08       	sbc	r13, r1
     c3e:	e1 2c       	mov	r14, r1
     c40:	f1 2c       	mov	r15, r1
     c42:	f1 cf       	rjmp	.-30     	; 0xc26 <_ZL13fill_checksumhhjh+0x2c>
     c44:	20 81       	ld	r18, Z
     c46:	30 e0       	ldi	r19, 0x00	; 0
     c48:	32 2f       	mov	r19, r18
     c4a:	22 27       	eor	r18, r18
     c4c:	91 81       	ldd	r25, Z+1	; 0x01
     c4e:	29 2b       	or	r18, r25
     c50:	c2 0e       	add	r12, r18
     c52:	d3 1e       	adc	r13, r19
     c54:	e1 1c       	adc	r14, r1
     c56:	f1 1c       	adc	r15, r1
     c58:	32 96       	adiw	r30, 0x02	; 2
     c5a:	12 97       	sbiw	r26, 0x02	; 2
     c5c:	a2 30       	cpi	r26, 0x02	; 2
     c5e:	b1 05       	cpc	r27, r1
     c60:	88 f7       	brcc	.-30     	; 0xc44 <_ZL13fill_checksumhhjh+0x4a>
     c62:	9a 01       	movw	r18, r20
     c64:	22 50       	subi	r18, 0x02	; 2
     c66:	31 09       	sbc	r19, r1
     c68:	2e 7f       	andi	r18, 0xFE	; 254
     c6a:	2e 5f       	subi	r18, 0xFE	; 254
     c6c:	3f 4f       	sbci	r19, 0xFF	; 255
     c6e:	c2 0f       	add	r28, r18
     c70:	d3 1f       	adc	r29, r19
     c72:	41 70       	andi	r20, 0x01	; 1
     c74:	55 27       	eor	r21, r21
     c76:	45 2b       	or	r20, r21
     c78:	61 f0       	breq	.+24     	; 0xc92 <_ZL13fill_checksumhhjh+0x98>
     c7a:	48 81       	ld	r20, Y
     c7c:	50 e0       	ldi	r21, 0x00	; 0
     c7e:	60 e0       	ldi	r22, 0x00	; 0
     c80:	70 e0       	ldi	r23, 0x00	; 0
     c82:	76 2f       	mov	r23, r22
     c84:	65 2f       	mov	r22, r21
     c86:	54 2f       	mov	r21, r20
     c88:	44 27       	eor	r20, r20
     c8a:	c4 0e       	add	r12, r20
     c8c:	d5 1e       	adc	r13, r21
     c8e:	e6 1e       	adc	r14, r22
     c90:	f7 1e       	adc	r15, r23
     c92:	a7 01       	movw	r20, r14
     c94:	66 27       	eor	r22, r22
     c96:	77 27       	eor	r23, r23
     c98:	41 15       	cp	r20, r1
     c9a:	51 05       	cpc	r21, r1
     c9c:	61 05       	cpc	r22, r1
     c9e:	71 05       	cpc	r23, r1
     ca0:	71 f0       	breq	.+28     	; 0xcbe <_ZL13fill_checksumhhjh+0xc4>
     ca2:	ee 24       	eor	r14, r14
     ca4:	ff 24       	eor	r15, r15
     ca6:	c4 0e       	add	r12, r20
     ca8:	d5 1e       	adc	r13, r21
     caa:	e6 1e       	adc	r14, r22
     cac:	f7 1e       	adc	r15, r23
     cae:	a7 01       	movw	r20, r14
     cb0:	66 27       	eor	r22, r22
     cb2:	77 27       	eor	r23, r23
     cb4:	41 15       	cp	r20, r1
     cb6:	51 05       	cpc	r21, r1
     cb8:	61 05       	cpc	r22, r1
     cba:	71 05       	cpc	r23, r1
     cbc:	91 f7       	brne	.-28     	; 0xca2 <_ZL13fill_checksumhhjh+0xa8>
     cbe:	c0 94       	com	r12
     cc0:	d0 94       	com	r13
     cc2:	e8 2f       	mov	r30, r24
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	e6 58       	subi	r30, 0x86	; 134
     cc8:	fd 4f       	sbci	r31, 0xFD	; 253
     cca:	d0 82       	st	Z, r13
     ccc:	c1 82       	std	Z+1, r12	; 0x01
     cce:	df 91       	pop	r29
     cd0:	cf 91       	pop	r28
     cd2:	ff 90       	pop	r15
     cd4:	ef 90       	pop	r14
     cd6:	df 90       	pop	r13
     cd8:	cf 90       	pop	r12
     cda:	08 95       	ret

00000cdc <_ZL6is_lanPKhS0_>:
     cdc:	cf 93       	push	r28
     cde:	df 93       	push	r29
     ce0:	fc 01       	movw	r30, r24
     ce2:	20 81       	ld	r18, Z
     ce4:	22 23       	and	r18, r18
     ce6:	d1 f0       	breq	.+52     	; 0xd1c <_ZL6is_lanPKhS0_+0x40>
     ce8:	fb 01       	movw	r30, r22
     cea:	30 81       	ld	r19, Z
     cec:	33 23       	and	r19, r19
     cee:	c1 f0       	breq	.+48     	; 0xd20 <_ZL6is_lanPKhS0_+0x44>
     cf0:	23 27       	eor	r18, r19
     cf2:	30 91 7e 04 	lds	r19, 0x047E	; 0x80047e <_ZN9EtherCard7netmaskE>
     cf6:	23 23       	and	r18, r19
     cf8:	a9 f4       	brne	.+42     	; 0xd24 <_ZL6is_lanPKhS0_+0x48>
     cfa:	dc 01       	movw	r26, r24
     cfc:	11 96       	adiw	r26, 0x01	; 1
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	cf e7       	ldi	r28, 0x7F	; 127
     d02:	d4 e0       	ldi	r29, 0x04	; 4
     d04:	04 96       	adiw	r24, 0x04	; 4
     d06:	4d 91       	ld	r20, X+
     d08:	21 91       	ld	r18, Z+
     d0a:	39 91       	ld	r19, Y+
     d0c:	24 27       	eor	r18, r20
     d0e:	23 23       	and	r18, r19
     d10:	59 f4       	brne	.+22     	; 0xd28 <_ZL6is_lanPKhS0_+0x4c>
     d12:	a8 17       	cp	r26, r24
     d14:	b9 07       	cpc	r27, r25
     d16:	b9 f7       	brne	.-18     	; 0xd06 <_ZL6is_lanPKhS0_+0x2a>
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	07 c0       	rjmp	.+14     	; 0xd2a <_ZL6is_lanPKhS0_+0x4e>
     d1c:	80 e0       	ldi	r24, 0x00	; 0
     d1e:	05 c0       	rjmp	.+10     	; 0xd2a <_ZL6is_lanPKhS0_+0x4e>
     d20:	80 e0       	ldi	r24, 0x00	; 0
     d22:	03 c0       	rjmp	.+6      	; 0xd2a <_ZL6is_lanPKhS0_+0x4e>
     d24:	80 e0       	ldi	r24, 0x00	; 0
     d26:	01 c0       	rjmp	.+2      	; 0xd2a <_ZL6is_lanPKhS0_+0x4e>
     d28:	80 e0       	ldi	r24, 0x00	; 0
     d2a:	df 91       	pop	r29
     d2c:	cf 91       	pop	r28
     d2e:	08 95       	ret

00000d30 <_ZL20fill_ip_hdr_checksumv>:
     d30:	ea e7       	ldi	r30, 0x7A	; 122
     d32:	f2 e0       	ldi	r31, 0x02	; 2
     d34:	10 8e       	std	Z+24, r1	; 0x18
     d36:	11 8e       	std	Z+25, r1	; 0x19
     d38:	80 e4       	ldi	r24, 0x40	; 64
     d3a:	84 8b       	std	Z+20, r24	; 0x14
     d3c:	15 8a       	std	Z+21, r1	; 0x15
     d3e:	86 8b       	std	Z+22, r24	; 0x16
     d40:	20 e0       	ldi	r18, 0x00	; 0
     d42:	44 e1       	ldi	r20, 0x14	; 20
     d44:	50 e0       	ldi	r21, 0x00	; 0
     d46:	6e e0       	ldi	r22, 0x0E	; 14
     d48:	88 e1       	ldi	r24, 0x18	; 24
     d4a:	57 cf       	rjmp	.-338    	; 0xbfa <_ZL13fill_checksumhhjh>
     d4c:	08 95       	ret

00000d4e <_ZL7setMACsPKh>:
     d4e:	bc 01       	movw	r22, r24
     d50:	8a e7       	ldi	r24, 0x7A	; 122
     d52:	92 e0       	ldi	r25, 0x02	; 2
     d54:	ad d0       	rcall	.+346    	; 0xeb0 <_ZN9EtherCard7copyMacEPhPKh>
     d56:	66 e8       	ldi	r22, 0x86	; 134
     d58:	74 e0       	ldi	r23, 0x04	; 4
     d5a:	80 e8       	ldi	r24, 0x80	; 128
     d5c:	92 e0       	ldi	r25, 0x02	; 2
     d5e:	a8 c0       	rjmp	.+336    	; 0xeb0 <_ZN9EtherCard7copyMacEPhPKh>
     d60:	08 95       	ret

00000d62 <_ZL12setMACandIPsPKhS0_>:
     d62:	cf 93       	push	r28
     d64:	df 93       	push	r29
     d66:	eb 01       	movw	r28, r22
     d68:	f2 df       	rcall	.-28     	; 0xd4e <_ZL7setMACsPKh>
     d6a:	be 01       	movw	r22, r28
     d6c:	88 e9       	ldi	r24, 0x98	; 152
     d6e:	92 e0       	ldi	r25, 0x02	; 2
     d70:	92 d0       	rcall	.+292    	; 0xe96 <_ZN9EtherCard6copyIpEPhPKh>
     d72:	62 e8       	ldi	r22, 0x82	; 130
     d74:	74 e0       	ldi	r23, 0x04	; 4
     d76:	84 e9       	ldi	r24, 0x94	; 148
     d78:	92 e0       	ldi	r25, 0x02	; 2
     d7a:	8d d0       	rcall	.+282    	; 0xe96 <_ZN9EtherCard6copyIpEPhPKh>
     d7c:	df 91       	pop	r29
     d7e:	cf 91       	pop	r28
     d80:	08 95       	ret

00000d82 <_ZN9EtherCard10udpPrepareEjPKhj>:

//TODO UdpPrepare
void EtherCard::udpPrepare (uint16_t sport, const uint8_t *dip, uint16_t dport) {
     d82:	ef 92       	push	r14
     d84:	ff 92       	push	r15
     d86:	0f 93       	push	r16
     d88:	1f 93       	push	r17
     d8a:	cf 93       	push	r28
     d8c:	df 93       	push	r29
     d8e:	18 2f       	mov	r17, r24
     d90:	09 2f       	mov	r16, r25
     d92:	eb 01       	movw	r28, r22
     d94:	f4 2e       	mov	r15, r20
     d96:	e5 2e       	mov	r14, r21
    if(is_lan(myip, dip)) {                    // this works because both dns mac and destinations mac are stored in same variable - destmacaddr
     d98:	82 e8       	ldi	r24, 0x82	; 130
     d9a:	94 e0       	ldi	r25, 0x04	; 4
     d9c:	9f df       	rcall	.-194    	; 0xcdc <_ZL6is_lanPKhS0_>
     d9e:	88 23       	and	r24, r24
     da0:	29 f0       	breq	.+10     	; 0xdac <_ZN9EtherCard10udpPrepareEjPKhj+0x2a>
        setMACandIPs(destmacaddr, dip);        // at different times. The program could have separate variable for dns mac, then here should be
     da2:	be 01       	movw	r22, r28
     da4:	82 e9       	ldi	r24, 0x92	; 146
     da6:	94 e0       	ldi	r25, 0x04	; 4
     da8:	dc df       	rcall	.-72     	; 0xd62 <_ZL12setMACandIPsPKhS0_>
     daa:	04 c0       	rjmp	.+8      	; 0xdb4 <_ZN9EtherCard10udpPrepareEjPKhj+0x32>
    } else {                                   // checked if dip is dns ip and separately if dip is hisip and then use correct mac.
        setMACandIPs(gwmacaddr, dip);
     dac:	be 01       	movw	r22, r28
     dae:	8c e8       	ldi	r24, 0x8C	; 140
     db0:	94 e0       	ldi	r25, 0x04	; 4
     db2:	d7 df       	rcall	.-82     	; 0xd62 <_ZL12setMACandIPsPKhS0_>
    }
    // see http://tldp.org/HOWTO/Multicast-HOWTO-2.html
    // multicast or broadcast address, https://github.com/njh/EtherCard/issues/59
    if ((dip[0] & 0xF0) == 0xE0 || *((unsigned long*) dip) == 0xFFFFFFFF || !memcmp(broadcastip,dip,IP_LEN))
     db4:	88 81       	ld	r24, Y
     db6:	80 7f       	andi	r24, 0xF0	; 240
     db8:	80 3e       	cpi	r24, 0xE0	; 224
     dba:	91 f0       	breq	.+36     	; 0xde0 <_ZN9EtherCard10udpPrepareEjPKhj+0x5e>
     dbc:	88 81       	ld	r24, Y
     dbe:	99 81       	ldd	r25, Y+1	; 0x01
     dc0:	aa 81       	ldd	r26, Y+2	; 0x02
     dc2:	bb 81       	ldd	r27, Y+3	; 0x03
     dc4:	8f 3f       	cpi	r24, 0xFF	; 255
     dc6:	9f 4f       	sbci	r25, 0xFF	; 255
     dc8:	af 4f       	sbci	r26, 0xFF	; 255
     dca:	bf 4f       	sbci	r27, 0xFF	; 255
     dcc:	49 f0       	breq	.+18     	; 0xde0 <_ZN9EtherCard10udpPrepareEjPKhj+0x5e>
     dce:	44 e0       	ldi	r20, 0x04	; 4
     dd0:	50 e0       	ldi	r21, 0x00	; 0
     dd2:	be 01       	movw	r22, r28
     dd4:	8a e7       	ldi	r24, 0x7A	; 122
     dd6:	94 e0       	ldi	r25, 0x04	; 4
     dd8:	0e 94 01 20 	call	0x4002	; 0x4002 <memcmp>
     ddc:	89 2b       	or	r24, r25
     dde:	29 f4       	brne	.+10     	; 0xdea <_ZN9EtherCard10udpPrepareEjPKhj+0x68>
        EtherCard::copyMac(gPB + ETH_DST_MAC, allOnes);
     de0:	69 e1       	ldi	r22, 0x19	; 25
     de2:	72 e0       	ldi	r23, 0x02	; 2
     de4:	8a e7       	ldi	r24, 0x7A	; 122
     de6:	92 e0       	ldi	r25, 0x02	; 2
     de8:	63 d0       	rcall	.+198    	; 0xeb0 <_ZN9EtherCard7copyMacEPhPKh>
    gPB[ETH_TYPE_H_P] = ETHTYPE_IP_H_V;
     dea:	ca e7       	ldi	r28, 0x7A	; 122
     dec:	d2 e0       	ldi	r29, 0x02	; 2
     dee:	88 e0       	ldi	r24, 0x08	; 8
     df0:	8c 87       	std	Y+12, r24	; 0x0c
    gPB[ETH_TYPE_L_P] = ETHTYPE_IP_L_V;
     df2:	1d 86       	std	Y+13, r1	; 0x0d
    memcpy_P(gPB + IP_P,iphdr,sizeof iphdr);
     df4:	49 e0       	ldi	r20, 0x09	; 9
     df6:	50 e0       	ldi	r21, 0x00	; 0
     df8:	66 e7       	ldi	r22, 0x76	; 118
     dfa:	72 e0       	ldi	r23, 0x02	; 2
     dfc:	88 e8       	ldi	r24, 0x88	; 136
     dfe:	92 e0       	ldi	r25, 0x02	; 2
     e00:	0e 94 f8 1f 	call	0x3ff0	; 0x3ff0 <memcpy_P>
    gPB[IP_TOTLEN_H_P] = 0;
     e04:	18 8a       	std	Y+16, r1	; 0x10
    gPB[IP_PROTO_P] = IP_PROTO_UDP_V;
     e06:	81 e1       	ldi	r24, 0x11	; 17
     e08:	8f 8b       	std	Y+23, r24	; 0x17
    gPB[UDP_DST_PORT_H_P] = (dport>>8);
     e0a:	ec a2       	std	Y+36, r14	; 0x24
    gPB[UDP_DST_PORT_L_P] = dport;
     e0c:	fd a2       	std	Y+37, r15	; 0x25
    gPB[UDP_SRC_PORT_H_P] = (sport>>8);
     e0e:	0a a3       	std	Y+34, r16	; 0x22
    gPB[UDP_SRC_PORT_L_P] = sport;
     e10:	1b a3       	std	Y+35, r17	; 0x23
    gPB[UDP_LEN_H_P] = 0;
     e12:	1e a2       	std	Y+38, r1	; 0x26
    gPB[UDP_CHECKSUM_H_P] = 0;
     e14:	18 a6       	std	Y+40, r1	; 0x28
    gPB[UDP_CHECKSUM_L_P] = 0;
     e16:	19 a6       	std	Y+41, r1	; 0x29
}
     e18:	df 91       	pop	r29
     e1a:	cf 91       	pop	r28
     e1c:	1f 91       	pop	r17
     e1e:	0f 91       	pop	r16
     e20:	ff 90       	pop	r15
     e22:	ef 90       	pop	r14
     e24:	08 95       	ret

00000e26 <_ZN9EtherCard11udpTransmitEj>:

//TODO udp transmit
void EtherCard::udpTransmit (uint16_t datalen) {
     e26:	0f 93       	push	r16
     e28:	1f 93       	push	r17
     e2a:	cf 93       	push	r28
     e2c:	df 93       	push	r29
     e2e:	ec 01       	movw	r28, r24
    gPB[IP_TOTLEN_H_P] = (IP_HEADER_LEN+UDP_HEADER_LEN+datalen) >> 8;
     e30:	0a e7       	ldi	r16, 0x7A	; 122
     e32:	12 e0       	ldi	r17, 0x02	; 2
     e34:	4c 96       	adiw	r24, 0x1c	; 28
     e36:	f8 01       	movw	r30, r16
     e38:	90 8b       	std	Z+16, r25	; 0x10
    gPB[IP_TOTLEN_L_P] = IP_HEADER_LEN+UDP_HEADER_LEN+datalen;
     e3a:	81 8b       	std	Z+17, r24	; 0x11
    fill_ip_hdr_checksum();
     e3c:	79 df       	rcall	.-270    	; 0xd30 <_ZL20fill_ip_hdr_checksumv>
    gPB[UDP_LEN_H_P] = (UDP_HEADER_LEN+datalen) >>8;
     e3e:	ce 01       	movw	r24, r28
     e40:	08 96       	adiw	r24, 0x08	; 8
     e42:	f8 01       	movw	r30, r16
     e44:	96 a3       	std	Z+38, r25	; 0x26
    gPB[UDP_LEN_L_P] = UDP_HEADER_LEN+datalen;
     e46:	87 a3       	std	Z+39, r24	; 0x27
    fill_checksum(UDP_CHECKSUM_H_P, IP_SRC_P, 16 + datalen,1);
     e48:	ae 01       	movw	r20, r28
     e4a:	40 5f       	subi	r20, 0xF0	; 240
     e4c:	5f 4f       	sbci	r21, 0xFF	; 255
     e4e:	21 e0       	ldi	r18, 0x01	; 1
     e50:	6a e1       	ldi	r22, 0x1A	; 26
     e52:	88 e2       	ldi	r24, 0x28	; 40
     e54:	d2 de       	rcall	.-604    	; 0xbfa <_ZL13fill_checksumhhjh>
    packetSend(UDP_HEADER_LEN+IP_HEADER_LEN+ETH_HEADER_LEN+datalen);
     e56:	ce 01       	movw	r24, r28
     e58:	8a 96       	adiw	r24, 0x2a	; 42
     e5a:	56 de       	rcall	.-852    	; 0xb08 <_ZN8ENC28J6010packetSendEj>
}
     e5c:	df 91       	pop	r29
     e5e:	cf 91       	pop	r28
     e60:	1f 91       	pop	r17
     e62:	0f 91       	pop	r16
     e64:	08 95       	ret

00000e66 <_ZN9EtherCard7sendUdpEPKhjjS1_j>:

//TODO send UDP function
void EtherCard::sendUdp (const uint8_t *data, uint16_t datalen, uint16_t sport,
                         const uint8_t *dip, uint16_t dport) {
     e66:	0f 93       	push	r16
     e68:	1f 93       	push	r17
     e6a:	cf 93       	push	r28
     e6c:	df 93       	push	r29
     e6e:	d6 2f       	mov	r29, r22
     e70:	c7 2f       	mov	r28, r23
     e72:	ca 01       	movw	r24, r20
     e74:	a8 01       	movw	r20, r16
    udpPrepare(sport, dip, dport);
     e76:	b9 01       	movw	r22, r18
     e78:	84 df       	rcall	.-248    	; 0xd82 <_ZN9EtherCard10udpPrepareEjPKhj>
    if (datalen>ETHER_CARD_BUFFER_SIZE)
        datalen = ETHER_CARD_BUFFER_SIZE;
    //memcpy(gPB + UDP_DATA_P, data, datalen); //memcopy? why?
    udpTransmit(datalen);
     e7a:	8d 2f       	mov	r24, r29
     e7c:	9c 2f       	mov	r25, r28
     e7e:	81 30       	cpi	r24, 0x01	; 1
     e80:	22 e0       	ldi	r18, 0x02	; 2
     e82:	92 07       	cpc	r25, r18
     e84:	10 f0       	brcs	.+4      	; 0xe8a <_ZN9EtherCard7sendUdpEPKhjjS1_j+0x24>
     e86:	80 e0       	ldi	r24, 0x00	; 0
     e88:	92 e0       	ldi	r25, 0x02	; 2
     e8a:	cd df       	rcall	.-102    	; 0xe26 <_ZN9EtherCard11udpTransmitEj>
}
     e8c:	df 91       	pop	r29
     e8e:	cf 91       	pop	r28
     e90:	1f 91       	pop	r17
     e92:	0f 91       	pop	r16
     e94:	08 95       	ret

00000e96 <_ZN9EtherCard6copyIpEPhPKh>:
#include "../Peripherals/HardwareSerial.h"
#include <stdlib.h>
#include <ctype.h>

void EtherCard::copyIp (uint8_t *dst, const uint8_t *src) {
    memcpy(dst, src, IP_LEN);
     e96:	fb 01       	movw	r30, r22
     e98:	20 81       	ld	r18, Z
     e9a:	31 81       	ldd	r19, Z+1	; 0x01
     e9c:	fc 01       	movw	r30, r24
     e9e:	31 83       	std	Z+1, r19	; 0x01
     ea0:	20 83       	st	Z, r18
     ea2:	fb 01       	movw	r30, r22
     ea4:	22 81       	ldd	r18, Z+2	; 0x02
     ea6:	33 81       	ldd	r19, Z+3	; 0x03
     ea8:	fc 01       	movw	r30, r24
     eaa:	33 83       	std	Z+3, r19	; 0x03
     eac:	22 83       	std	Z+2, r18	; 0x02
     eae:	08 95       	ret

00000eb0 <_ZN9EtherCard7copyMacEPhPKh>:
}

void EtherCard::copyMac (uint8_t *dst, const uint8_t *src) {
     eb0:	dc 01       	movw	r26, r24
    memcpy(dst, src, ETH_LEN);
     eb2:	96 e0       	ldi	r25, 0x06	; 6
     eb4:	fb 01       	movw	r30, r22
     eb6:	01 90       	ld	r0, Z+
     eb8:	0d 92       	st	X+, r0
     eba:	9a 95       	dec	r25
     ebc:	e1 f7       	brne	.-8      	; 0xeb6 <_ZN9EtherCard7copyMacEPhPKh+0x6>
     ebe:	08 95       	ret

00000ec0 <_ZN9EtherComm11SendCommandEhh>:
  ether.udpServerListenOnPort(&udpReceive, recvPort);
  
  return true;
}

void EtherComm::SendCommand(uint8_t cmd, uint8_t len){
     ec0:	0f 93       	push	r16
     ec2:	1f 93       	push	r17
     ec4:	cf 93       	push	r28
     ec6:	df 93       	push	r29
  EtherComm::buffer[0] = START_BYTE;
     ec8:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
     ecc:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
     ed0:	9f ef       	ldi	r25, 0xFF	; 255
     ed2:	90 83       	st	Z, r25
  EtherComm::buffer[1] = cmd;
     ed4:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
     ed8:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
     edc:	81 83       	std	Z+1, r24	; 0x01
  //EtherComm::buffer[2] = len;
  
  uint8_t checksum = START_BYTE + cmd;
     ede:	81 50       	subi	r24, 0x01	; 1
  uint8_t* index = &EtherComm::buffer[2]; //TODO why is char* being used? convert ot uint8_t*!!
     ee0:	c0 91 00 02 	lds	r28, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
     ee4:	d0 91 01 02 	lds	r29, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
     ee8:	de 01       	movw	r26, r28
     eea:	12 96       	adiw	r26, 0x02	; 2
  uint8_t bytes = len;
  while(bytes-- > 0){
     eec:	4f ef       	ldi	r20, 0xFF	; 255
     eee:	46 0f       	add	r20, r22
     ef0:	66 23       	and	r22, r22
     ef2:	81 f0       	breq	.+32     	; 0xf14 <_ZN9EtherComm11SendCommandEhh+0x54>
     ef4:	fd 01       	movw	r30, r26
     ef6:	50 e0       	ldi	r21, 0x00	; 0
     ef8:	9a 01       	movw	r18, r20
     efa:	2d 5f       	subi	r18, 0xFD	; 253
     efc:	3f 4f       	sbci	r19, 0xFF	; 255
     efe:	2c 0f       	add	r18, r28
     f00:	3d 1f       	adc	r19, r29
    checksum += (uint8_t)(*(index++));  
     f02:	91 91       	ld	r25, Z+
     f04:	89 0f       	add	r24, r25
  //EtherComm::buffer[2] = len;
  
  uint8_t checksum = START_BYTE + cmd;
  uint8_t* index = &EtherComm::buffer[2]; //TODO why is char* being used? convert ot uint8_t*!!
  uint8_t bytes = len;
  while(bytes-- > 0){
     f06:	e2 17       	cp	r30, r18
     f08:	f3 07       	cpc	r31, r19
     f0a:	d9 f7       	brne	.-10     	; 0xf02 <_ZN9EtherComm11SendCommandEhh+0x42>
     f0c:	4f 5f       	subi	r20, 0xFF	; 255
     f0e:	5f 4f       	sbci	r21, 0xFF	; 255
     f10:	a4 0f       	add	r26, r20
     f12:	b5 1f       	adc	r27, r21
    checksum += (uint8_t)(*(index++));  
  }
  (*index) = (uint8_t)(checksum & CHECKSUM_MASK);
     f14:	8c 93       	st	X, r24

  //Serial.print("Send: ");
  //Serial.println(len);
  ether.sendUdp(EtherComm::buffer, (uint16_t)len + (uint16_t)3, _recvPort, _destIP, _destPort);
     f16:	00 91 98 04 	lds	r16, 0x0498	; 0x800498 <_ZN9EtherComm9_destPortE>
     f1a:	10 91 99 04 	lds	r17, 0x0499	; 0x800499 <_ZN9EtherComm9_destPortE+0x1>
     f1e:	40 91 9a 04 	lds	r20, 0x049A	; 0x80049a <_ZN9EtherComm9_recvPortE>
     f22:	50 91 9b 04 	lds	r21, 0x049B	; 0x80049b <_ZN9EtherComm9_recvPortE+0x1>
     f26:	70 e0       	ldi	r23, 0x00	; 0
     f28:	6d 5f       	subi	r22, 0xFD	; 253
     f2a:	7f 4f       	sbci	r23, 0xFF	; 255
     f2c:	22 e0       	ldi	r18, 0x02	; 2
     f2e:	32 e0       	ldi	r19, 0x02	; 2
     f30:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
     f34:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
     f38:	96 df       	rcall	.-212    	; 0xe66 <_ZN9EtherCard7sendUdpEPKhjjS1_j>
}
     f3a:	df 91       	pop	r29
     f3c:	cf 91       	pop	r28
     f3e:	1f 91       	pop	r17
     f40:	0f 91       	pop	r16
     f42:	08 95       	ret

00000f44 <main>:
#define MIN 550
#define MAX 2400

int main(void){
	//TestIMU();
	sei(); //Enable global interrupts
     f44:	78 94       	sei
		while(1);
	}
	Serial.println("Connected to controller.");*/
	
	//Should no longer be needed. Needs tested first tho
	DDRB |= _BV(PINB5) | _BV(PINB6);
     f46:	84 b1       	in	r24, 0x04	; 4
     f48:	80 66       	ori	r24, 0x60	; 96
     f4a:	84 b9       	out	0x04, r24	; 4
	DDRE |= _BV(PINE3) | _BV(PINE4) | _BV(PINE5);
     f4c:	8d b1       	in	r24, 0x0d	; 13
     f4e:	88 63       	ori	r24, 0x38	; 56
     f50:	8d b9       	out	0x0d, r24	; 13
	DDRH |= _BV(PINH3) | _BV(PINH4) | _BV(PINH5);
     f52:	e1 e0       	ldi	r30, 0x01	; 1
     f54:	f1 e0       	ldi	r31, 0x01	; 1
     f56:	80 81       	ld	r24, Z
     f58:	88 63       	ori	r24, 0x38	; 56
     f5a:	80 83       	st	Z, r24
	DDRL |= _BV(PINL3) | _BV(PINL4) | _BV(PINL5);
     f5c:	ea e0       	ldi	r30, 0x0A	; 10
     f5e:	f1 e0       	ldi	r31, 0x01	; 1
     f60:	80 81       	ld	r24, Z
     f62:	88 63       	ori	r24, 0x38	; 56
     f64:	80 83       	st	Z, r24
	
	Servo1.begin();
     f66:	84 ec       	ldi	r24, 0xC4	; 196
     f68:	95 e0       	ldi	r25, 0x05	; 5
     f6a:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <_ZN13HardwareServo5beginEv>
	Servo3.begin();
     f6e:	87 ea       	ldi	r24, 0xA7	; 167
     f70:	95 e0       	ldi	r25, 0x05	; 5
     f72:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <_ZN13HardwareServo5beginEv>
	Servo4.begin();
     f76:	8a e8       	ldi	r24, 0x8A	; 138
     f78:	95 e0       	ldi	r25, 0x05	; 5
     f7a:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <_ZN13HardwareServo5beginEv>
	Servo5.begin();
     f7e:	8d e6       	ldi	r24, 0x6D	; 109
     f80:	95 e0       	ldi	r25, 0x05	; 5
     f82:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <_ZN13HardwareServo5beginEv>
	/*
	Servo_A1_setMin(MIN);
	Servo_A1_setMax(MAX);
	Servo_A1_enable();
	*/
	Servo5.setMinC(MIN);
     f86:	66 e2       	ldi	r22, 0x26	; 38
     f88:	72 e0       	ldi	r23, 0x02	; 2
     f8a:	8d e6       	ldi	r24, 0x6D	; 109
     f8c:	95 e0       	ldi	r25, 0x05	; 5
     f8e:	0e 94 55 14 	call	0x28aa	; 0x28aa <_ZN13HardwareServo7setMinCEj>
	Servo5.setMaxC(MAX);
     f92:	60 e6       	ldi	r22, 0x60	; 96
     f94:	79 e0       	ldi	r23, 0x09	; 9
     f96:	8d e6       	ldi	r24, 0x6D	; 109
     f98:	95 e0       	ldi	r25, 0x05	; 5
     f9a:	0e 94 5d 14 	call	0x28ba	; 0x28ba <_ZN13HardwareServo7setMaxCEj>
	Servo5.EnableC();
     f9e:	8d e6       	ldi	r24, 0x6D	; 109
     fa0:	95 e0       	ldi	r25, 0x05	; 5
     fa2:	0e 94 f6 13 	call	0x27ec	; 0x27ec <_ZN13HardwareServo7EnableCEv>
		pos += dir;
		if(pos == 255){
			dir = -1;
			_delay_ms(500);
		} else if(pos == 0) {
			dir = 1;
     fa6:	c1 e0       	ldi	r28, 0x01	; 1
		Servo5.setPulseB(pos);
		Servo5.setPulseC(pos);
		*/
		pos += dir;
		if(pos == 255){
			dir = -1;
     fa8:	df ef       	ldi	r29, 0xFF	; 255
	//TwiServo.begin();
    while (1) {
		//EtherComm::Loop();
		//rov.Loop();
		//Servo_A1_setPulse(pos);
		Servo5.setPulseC(pos);
     faa:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <pos>
     fae:	8d e6       	ldi	r24, 0x6D	; 109
     fb0:	95 e0       	ldi	r25, 0x05	; 5
     fb2:	0e 94 2a 14 	call	0x2854	; 0x2854 <_ZN13HardwareServo9setPulseCEh>
		Servo4.setPulseC(pos);
		Servo5.setPulseA(pos);
		Servo5.setPulseB(pos);
		Servo5.setPulseC(pos);
		*/
		pos += dir;
     fb6:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <pos>
     fba:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <dir>
     fbe:	89 0f       	add	r24, r25
     fc0:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <pos>
		if(pos == 255){
     fc4:	8f 3f       	cpi	r24, 0xFF	; 255
     fc6:	61 f4       	brne	.+24     	; 0xfe0 <main+0x9c>
			dir = -1;
     fc8:	d0 93 07 02 	sts	0x0207, r29	; 0x800207 <dir>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     fcc:	2f ef       	ldi	r18, 0xFF	; 255
     fce:	89 e6       	ldi	r24, 0x69	; 105
     fd0:	98 e1       	ldi	r25, 0x18	; 24
     fd2:	21 50       	subi	r18, 0x01	; 1
     fd4:	80 40       	sbci	r24, 0x00	; 0
     fd6:	90 40       	sbci	r25, 0x00	; 0
     fd8:	e1 f7       	brne	.-8      	; 0xfd2 <main+0x8e>
     fda:	00 c0       	rjmp	.+0      	; 0xfdc <main+0x98>
     fdc:	00 00       	nop
     fde:	0d c0       	rjmp	.+26     	; 0xffa <main+0xb6>
			_delay_ms(500);
		} else if(pos == 0) {
     fe0:	81 11       	cpse	r24, r1
     fe2:	0b c0       	rjmp	.+22     	; 0xffa <main+0xb6>
			dir = 1;
     fe4:	c0 93 07 02 	sts	0x0207, r28	; 0x800207 <dir>
     fe8:	2f ef       	ldi	r18, 0xFF	; 255
     fea:	89 e6       	ldi	r24, 0x69	; 105
     fec:	98 e1       	ldi	r25, 0x18	; 24
     fee:	21 50       	subi	r18, 0x01	; 1
     ff0:	80 40       	sbci	r24, 0x00	; 0
     ff2:	90 40       	sbci	r25, 0x00	; 0
     ff4:	e1 f7       	brne	.-8      	; 0xfee <main+0xaa>
     ff6:	00 c0       	rjmp	.+0      	; 0xff8 <main+0xb4>
     ff8:	00 00       	nop
     ffa:	8f e1       	ldi	r24, 0x1F	; 31
     ffc:	9e e4       	ldi	r25, 0x4E	; 78
     ffe:	01 97       	sbiw	r24, 0x01	; 1
    1000:	f1 f7       	brne	.-4      	; 0xffe <main+0xba>
    1002:	00 c0       	rjmp	.+0      	; 0x1004 <main+0xc0>
    1004:	00 00       	nop
    1006:	d1 cf       	rjmp	.-94     	; 0xfaa <main+0x66>

00001008 <_GLOBAL__sub_I_dir>:
int8_t dir = 1;
uint8_t pos = 128;
#include "Utils/CpuFreq.h"
#include <util/delay.h>

TwiServoController TwiServo(0x40);
    1008:	60 e4       	ldi	r22, 0x40	; 64
    100a:	8c e9       	ldi	r24, 0x9C	; 156
    100c:	94 e0       	ldi	r25, 0x04	; 4
    100e:	0c 94 d1 10 	jmp	0x21a2	; 0x21a2 <_ZN18TwiServoControllerC1Eh>
    1012:	08 95       	ret

00001014 <_ZN6MS5837C1ER13HardwareTimer>:
const float MS5837::mbar = 1.0f;
*/
const uint8_t MS5837::MS5837_30BA = 0;
const uint8_t MS5837::MS5837_02BA = 1;

MS5837::MS5837(HardwareTimer &timer) : _timer(&timer) {
    1014:	fc 01       	movw	r30, r24
    1016:	73 a3       	std	Z+35, r23	; 0x23
    1018:	62 a3       	std	Z+34, r22	; 0x22
	fluidDensity = 1029;
    101a:	40 e0       	ldi	r20, 0x00	; 0
    101c:	50 ea       	ldi	r21, 0xA0	; 160
    101e:	60 e8       	ldi	r22, 0x80	; 128
    1020:	74 e4       	ldi	r23, 0x44	; 68
    1022:	44 a3       	std	Z+36, r20	; 0x24
    1024:	55 a3       	std	Z+37, r21	; 0x25
    1026:	66 a3       	std	Z+38, r22	; 0x26
    1028:	77 a3       	std	Z+39, r23	; 0x27
    102a:	08 95       	ret

0000102c <_ZN6MS58378setModelEh>:

	return false; // CRC fail
}

void MS5837::setModel(uint8_t model) {
	_model = model;
    102c:	fc 01       	movw	r30, r24
    102e:	60 a3       	std	Z+32, r22	; 0x20
    1030:	08 95       	ret

00001032 <_ZN6MS58379startReadEv>:
	D2 = (D2 << 8) | Wire.read();

	calculate();
}*/

bool MS5837::startRead(){
    1032:	cf 93       	push	r28
    1034:	df 93       	push	r29
	if(_state == STATE_FINISHED){
    1036:	fc 01       	movw	r30, r24
    1038:	21 a1       	ldd	r18, Z+33	; 0x21
    103a:	21 11       	cpse	r18, r1
    103c:	1f c0       	rjmp	.+62     	; 0x107c <_ZN6MS58379startReadEv+0x4a>
    103e:	ec 01       	movw	r28, r24
		_state = STATE_READ_D1; // Request D1 conversion
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	81 a3       	std	Z+33, r24	; 0x21
		
		Wire.beginTransmission(MS5837_ADDR);
    1044:	66 e7       	ldi	r22, 0x76	; 118
    1046:	70 e0       	ldi	r23, 0x00	; 0
    1048:	87 e6       	ldi	r24, 0x67	; 103
    104a:	96 e0       	ldi	r25, 0x06	; 6
    104c:	0e 94 92 19 	call	0x3324	; 0x3324 <_ZN7TwoWire17beginTransmissionEi>
	void onRequest( void (*)(void) );

	inline size_t write(unsigned long n) { return write((uint8_t)n); }
	inline size_t write(long n) { return write((uint8_t)n); }
	inline size_t write(unsigned int n) { return write((uint8_t)n); }
	inline size_t write(int n) { return write((uint8_t)n); }
    1050:	e0 91 67 06 	lds	r30, 0x0667	; 0x800667 <Wire>
    1054:	f0 91 68 06 	lds	r31, 0x0668	; 0x800668 <Wire+0x1>
    1058:	01 90       	ld	r0, Z+
    105a:	f0 81       	ld	r31, Z
    105c:	e0 2d       	mov	r30, r0
    105e:	6a e4       	ldi	r22, 0x4A	; 74
    1060:	87 e6       	ldi	r24, 0x67	; 103
    1062:	96 e0       	ldi	r25, 0x06	; 6
    1064:	19 95       	eicall
		Wire.write(MS5837_CONVERT_D1_8192);
		Wire.endTransmission();
    1066:	87 e6       	ldi	r24, 0x67	; 103
    1068:	96 e0       	ldi	r25, 0x06	; 6
    106a:	0e 94 11 1a 	call	0x3422	; 0x3422 <_ZN7TwoWire15endTransmissionEv>

		_timer->start(2); // Max conversion time, 20ms per datasheet
    106e:	62 e0       	ldi	r22, 0x02	; 2
    1070:	8a a1       	ldd	r24, Y+34	; 0x22
    1072:	9b a1       	ldd	r25, Y+35	; 0x23
    1074:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <_ZN13HardwareTimer5startEh>
		return true;
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	01 c0       	rjmp	.+2      	; 0x107e <_ZN6MS58379startReadEv+0x4c>
	}else{
		return false;
    107c:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    107e:	df 91       	pop	r29
    1080:	cf 91       	pop	r28
    1082:	08 95       	ret

00001084 <_ZN6MS58378finishedEv>:
		}
	}
}

bool MS5837::finished(){
	return _state == STATE_FINISHED;
    1084:	21 e0       	ldi	r18, 0x01	; 1
    1086:	fc 01       	movw	r30, r24
    1088:	81 a1       	ldd	r24, Z+33	; 0x21
    108a:	81 11       	cpse	r24, r1
    108c:	20 e0       	ldi	r18, 0x00	; 0
}
    108e:	82 2f       	mov	r24, r18
    1090:	08 95       	ret

00001092 <_ZN6MS58379calculateEv>:

void MS5837::calculate() {
    1092:	2f 92       	push	r2
    1094:	3f 92       	push	r3
    1096:	4f 92       	push	r4
    1098:	5f 92       	push	r5
    109a:	6f 92       	push	r6
    109c:	7f 92       	push	r7
    109e:	8f 92       	push	r8
    10a0:	9f 92       	push	r9
    10a2:	af 92       	push	r10
    10a4:	bf 92       	push	r11
    10a6:	cf 92       	push	r12
    10a8:	df 92       	push	r13
    10aa:	ef 92       	push	r14
    10ac:	ff 92       	push	r15
    10ae:	0f 93       	push	r16
    10b0:	1f 93       	push	r17
    10b2:	cf 93       	push	r28
    10b4:	df 93       	push	r29
    10b6:	cd b7       	in	r28, 0x3d	; 61
    10b8:	de b7       	in	r29, 0x3e	; 62
    10ba:	a5 97       	sbiw	r28, 0x25	; 37
    10bc:	0f b6       	in	r0, 0x3f	; 63
    10be:	f8 94       	cli
    10c0:	de bf       	out	0x3e, r29	; 62
    10c2:	0f be       	out	0x3f, r0	; 63
    10c4:	cd bf       	out	0x3d, r28	; 61
    10c6:	1c 01       	movw	r2, r24
	int32_t Ti = 0;
	int64_t OFF2 = 0;
	int64_t SENS2 = 0;
	
	// Terms called
	dT = D2-uint32_t(C[5])*256l;
    10c8:	dc 01       	movw	r26, r24
    10ca:	1a 96       	adiw	r26, 0x0a	; 10
    10cc:	8d 91       	ld	r24, X+
    10ce:	9c 91       	ld	r25, X
    10d0:	1b 97       	sbiw	r26, 0x0b	; 11
    10d2:	a0 e0       	ldi	r26, 0x00	; 0
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	ba 2f       	mov	r27, r26
    10d8:	a9 2f       	mov	r26, r25
    10da:	98 2f       	mov	r25, r24
    10dc:	88 27       	eor	r24, r24
    10de:	f1 01       	movw	r30, r2
    10e0:	44 89       	ldd	r20, Z+20	; 0x14
    10e2:	55 89       	ldd	r21, Z+21	; 0x15
    10e4:	66 89       	ldd	r22, Z+22	; 0x16
    10e6:	77 89       	ldd	r23, Z+23	; 0x17
    10e8:	3a 01       	movw	r6, r20
    10ea:	4b 01       	movw	r8, r22
    10ec:	68 1a       	sub	r6, r24
    10ee:	79 0a       	sbc	r7, r25
    10f0:	8a 0a       	sbc	r8, r26
    10f2:	9b 0a       	sbc	r9, r27
    10f4:	69 82       	std	Y+1, r6	; 0x01
    10f6:	7a 82       	std	Y+2, r7	; 0x02
    10f8:	8b 82       	std	Y+3, r8	; 0x03
    10fa:	9c 82       	std	Y+4, r9	; 0x04
	if ( _model == MS5837_02BA ) {
    10fc:	80 a1       	ldd	r24, Z+32	; 0x20
    10fe:	81 30       	cpi	r24, 0x01	; 1
    1100:	09 f0       	breq	.+2      	; 0x1104 <_ZN6MS58379calculateEv+0x72>
    1102:	58 c1       	rjmp	.+688    	; 0x13b4 <_ZN6MS58379calculateEv+0x322>
		SENS = int64_t(C[1])*65536l+(int64_t(C[3])*dT)/128l;
    1104:	99 0c       	add	r9, r9
    1106:	66 08       	sbc	r6, r6
    1108:	76 2c       	mov	r7, r6
    110a:	43 01       	movw	r8, r6
    110c:	6d 82       	std	Y+5, r6	; 0x05
    110e:	7e 82       	std	Y+6, r7	; 0x06
    1110:	8f 82       	std	Y+7, r8	; 0x07
    1112:	98 86       	std	Y+8, r9	; 0x08
    1114:	86 81       	ldd	r24, Z+6	; 0x06
    1116:	97 81       	ldd	r25, Z+7	; 0x07
    1118:	3c 01       	movw	r6, r24
    111a:	81 2c       	mov	r8, r1
    111c:	91 2c       	mov	r9, r1
    111e:	a1 2c       	mov	r10, r1
    1120:	b1 2c       	mov	r11, r1
    1122:	65 01       	movw	r12, r10
    1124:	8d 8f       	std	Y+29, r24	; 0x1d
    1126:	7e 8e       	std	Y+30, r7	; 0x1e
    1128:	8f 8e       	std	Y+31, r8	; 0x1f
    112a:	98 a2       	std	Y+32, r9	; 0x20
    112c:	a9 a2       	std	Y+33, r10	; 0x21
    112e:	ba a2       	std	Y+34, r11	; 0x22
    1130:	cb a2       	std	Y+35, r12	; 0x23
    1132:	dc a2       	std	Y+36, r13	; 0x24
    1134:	a9 80       	ldd	r10, Y+1	; 0x01
    1136:	ba 80       	ldd	r11, Y+2	; 0x02
    1138:	cb 80       	ldd	r12, Y+3	; 0x03
    113a:	dc 80       	ldd	r13, Y+4	; 0x04
    113c:	ed 80       	ldd	r14, Y+5	; 0x05
    113e:	fe 2c       	mov	r15, r14
    1140:	0e 2d       	mov	r16, r14
    1142:	1e 2d       	mov	r17, r14
    1144:	28 2f       	mov	r18, r24
    1146:	37 2d       	mov	r19, r7
    1148:	40 e0       	ldi	r20, 0x00	; 0
    114a:	50 e0       	ldi	r21, 0x00	; 0
    114c:	60 e0       	ldi	r22, 0x00	; 0
    114e:	70 e0       	ldi	r23, 0x00	; 0
    1150:	80 e0       	ldi	r24, 0x00	; 0
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <__muldi3>
    1158:	12 2f       	mov	r17, r18
    115a:	3e 87       	std	Y+14, r19	; 0x0e
    115c:	4d 87       	std	Y+13, r20	; 0x0d
    115e:	b5 2f       	mov	r27, r21
    1160:	f6 2f       	mov	r31, r22
    1162:	e7 2f       	mov	r30, r23
    1164:	78 2e       	mov	r7, r24
    1166:	89 2e       	mov	r8, r25
    1168:	a0 e0       	ldi	r26, 0x00	; 0
    116a:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <__cmpdi2_s8>
    116e:	5c f4       	brge	.+22     	; 0x1186 <_ZN6MS58379calculateEv+0xf4>
    1170:	af e7       	ldi	r26, 0x7F	; 127
    1172:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <__adddi3_s8>
    1176:	12 2f       	mov	r17, r18
    1178:	3e 87       	std	Y+14, r19	; 0x0e
    117a:	4d 87       	std	Y+13, r20	; 0x0d
    117c:	b5 2f       	mov	r27, r21
    117e:	f6 2f       	mov	r31, r22
    1180:	e7 2f       	mov	r30, r23
    1182:	78 2e       	mov	r7, r24
    1184:	89 2e       	mov	r8, r25
    1186:	21 2f       	mov	r18, r17
    1188:	3e 85       	ldd	r19, Y+14	; 0x0e
    118a:	4d 85       	ldd	r20, Y+13	; 0x0d
    118c:	5b 2f       	mov	r21, r27
    118e:	6f 2f       	mov	r22, r31
    1190:	7e 2f       	mov	r23, r30
    1192:	87 2d       	mov	r24, r7
    1194:	98 2d       	mov	r25, r8
    1196:	07 e0       	ldi	r16, 0x07	; 7
    1198:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <__ashrdi3>
    119c:	82 2e       	mov	r8, r18
    119e:	93 2e       	mov	r9, r19
    11a0:	74 2e       	mov	r7, r20
    11a2:	65 2e       	mov	r6, r21
    11a4:	b6 2f       	mov	r27, r22
    11a6:	a7 2f       	mov	r26, r23
    11a8:	58 2e       	mov	r5, r24
    11aa:	49 2e       	mov	r4, r25
    11ac:	f1 01       	movw	r30, r2
    11ae:	a2 80       	ldd	r10, Z+2	; 0x02
    11b0:	b3 80       	ldd	r11, Z+3	; 0x03
    11b2:	2a 2d       	mov	r18, r10
    11b4:	3b 2d       	mov	r19, r11
    11b6:	40 e0       	ldi	r20, 0x00	; 0
    11b8:	50 e0       	ldi	r21, 0x00	; 0
    11ba:	60 e0       	ldi	r22, 0x00	; 0
    11bc:	70 e0       	ldi	r23, 0x00	; 0
    11be:	80 e0       	ldi	r24, 0x00	; 0
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	00 e1       	ldi	r16, 0x10	; 16
    11c4:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <__ashldi3>
    11c8:	a2 2e       	mov	r10, r18
    11ca:	b3 2e       	mov	r11, r19
    11cc:	c4 2e       	mov	r12, r20
    11ce:	d5 2e       	mov	r13, r21
    11d0:	e6 2e       	mov	r14, r22
    11d2:	f7 2e       	mov	r15, r23
    11d4:	08 2f       	mov	r16, r24
    11d6:	19 2f       	mov	r17, r25
    11d8:	28 2d       	mov	r18, r8
    11da:	39 2d       	mov	r19, r9
    11dc:	47 2d       	mov	r20, r7
    11de:	56 2d       	mov	r21, r6
    11e0:	6b 2f       	mov	r22, r27
    11e2:	7a 2f       	mov	r23, r26
    11e4:	85 2d       	mov	r24, r5
    11e6:	94 2d       	mov	r25, r4
    11e8:	0e 94 ce 1f 	call	0x3f9c	; 0x3f9c <__adddi3>
    11ec:	2d 87       	std	Y+13, r18	; 0x0d
    11ee:	3e 87       	std	Y+14, r19	; 0x0e
    11f0:	4f 87       	std	Y+15, r20	; 0x0f
    11f2:	58 8b       	std	Y+16, r21	; 0x10
    11f4:	69 8b       	std	Y+17, r22	; 0x11
    11f6:	7a 8b       	std	Y+18, r23	; 0x12
    11f8:	8b 8b       	std	Y+19, r24	; 0x13
    11fa:	9c 8b       	std	Y+20, r25	; 0x14
		OFF = int64_t(C[2])*131072l+(int64_t(C[4])*dT)/64l;
    11fc:	80 85       	ldd	r24, Z+8	; 0x08
    11fe:	91 85       	ldd	r25, Z+9	; 0x09
    1200:	3c 01       	movw	r6, r24
    1202:	81 2c       	mov	r8, r1
    1204:	91 2c       	mov	r9, r1
    1206:	a1 2c       	mov	r10, r1
    1208:	b1 2c       	mov	r11, r1
    120a:	65 01       	movw	r12, r10
    120c:	8d 8f       	std	Y+29, r24	; 0x1d
    120e:	7e 8e       	std	Y+30, r7	; 0x1e
    1210:	8f 8e       	std	Y+31, r8	; 0x1f
    1212:	98 a2       	std	Y+32, r9	; 0x20
    1214:	a9 a2       	std	Y+33, r10	; 0x21
    1216:	ba a2       	std	Y+34, r11	; 0x22
    1218:	cb a2       	std	Y+35, r12	; 0x23
    121a:	dc a2       	std	Y+36, r13	; 0x24
    121c:	a9 80       	ldd	r10, Y+1	; 0x01
    121e:	ba 80       	ldd	r11, Y+2	; 0x02
    1220:	cb 80       	ldd	r12, Y+3	; 0x03
    1222:	dc 80       	ldd	r13, Y+4	; 0x04
    1224:	ed 80       	ldd	r14, Y+5	; 0x05
    1226:	fe 2c       	mov	r15, r14
    1228:	0e 2d       	mov	r16, r14
    122a:	1e 2d       	mov	r17, r14
    122c:	28 2f       	mov	r18, r24
    122e:	37 2d       	mov	r19, r7
    1230:	40 e0       	ldi	r20, 0x00	; 0
    1232:	50 e0       	ldi	r21, 0x00	; 0
    1234:	60 e0       	ldi	r22, 0x00	; 0
    1236:	70 e0       	ldi	r23, 0x00	; 0
    1238:	80 e0       	ldi	r24, 0x00	; 0
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <__muldi3>
    1240:	12 2f       	mov	r17, r18
    1242:	3e 8b       	std	Y+22, r19	; 0x16
    1244:	4d 8b       	std	Y+21, r20	; 0x15
    1246:	b5 2f       	mov	r27, r21
    1248:	f6 2f       	mov	r31, r22
    124a:	e7 2f       	mov	r30, r23
    124c:	78 2e       	mov	r7, r24
    124e:	89 2e       	mov	r8, r25
    1250:	a0 e0       	ldi	r26, 0x00	; 0
    1252:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <__cmpdi2_s8>
    1256:	5c f4       	brge	.+22     	; 0x126e <_ZN6MS58379calculateEv+0x1dc>
    1258:	af e3       	ldi	r26, 0x3F	; 63
    125a:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <__adddi3_s8>
    125e:	12 2f       	mov	r17, r18
    1260:	3e 8b       	std	Y+22, r19	; 0x16
    1262:	4d 8b       	std	Y+21, r20	; 0x15
    1264:	b5 2f       	mov	r27, r21
    1266:	f6 2f       	mov	r31, r22
    1268:	e7 2f       	mov	r30, r23
    126a:	78 2e       	mov	r7, r24
    126c:	89 2e       	mov	r8, r25
    126e:	21 2f       	mov	r18, r17
    1270:	3e 89       	ldd	r19, Y+22	; 0x16
    1272:	4d 89       	ldd	r20, Y+21	; 0x15
    1274:	5b 2f       	mov	r21, r27
    1276:	6f 2f       	mov	r22, r31
    1278:	7e 2f       	mov	r23, r30
    127a:	87 2d       	mov	r24, r7
    127c:	98 2d       	mov	r25, r8
    127e:	06 e0       	ldi	r16, 0x06	; 6
    1280:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <__ashrdi3>
    1284:	82 2e       	mov	r8, r18
    1286:	93 2e       	mov	r9, r19
    1288:	74 2e       	mov	r7, r20
    128a:	65 2e       	mov	r6, r21
    128c:	b6 2f       	mov	r27, r22
    128e:	a7 2f       	mov	r26, r23
    1290:	58 2e       	mov	r5, r24
    1292:	49 2e       	mov	r4, r25
    1294:	f1 01       	movw	r30, r2
    1296:	24 81       	ldd	r18, Z+4	; 0x04
    1298:	35 81       	ldd	r19, Z+5	; 0x05
    129a:	59 01       	movw	r10, r18
    129c:	3b 2d       	mov	r19, r11
    129e:	40 e0       	ldi	r20, 0x00	; 0
    12a0:	50 e0       	ldi	r21, 0x00	; 0
    12a2:	60 e0       	ldi	r22, 0x00	; 0
    12a4:	70 e0       	ldi	r23, 0x00	; 0
    12a6:	80 e0       	ldi	r24, 0x00	; 0
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	01 e1       	ldi	r16, 0x11	; 17
    12ac:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <__ashldi3>
    12b0:	a2 2e       	mov	r10, r18
    12b2:	b3 2e       	mov	r11, r19
    12b4:	c4 2e       	mov	r12, r20
    12b6:	d5 2e       	mov	r13, r21
    12b8:	e6 2e       	mov	r14, r22
    12ba:	f7 2e       	mov	r15, r23
    12bc:	08 2f       	mov	r16, r24
    12be:	19 2f       	mov	r17, r25
    12c0:	28 2d       	mov	r18, r8
    12c2:	39 2d       	mov	r19, r9
    12c4:	47 2d       	mov	r20, r7
    12c6:	56 2d       	mov	r21, r6
    12c8:	6b 2f       	mov	r22, r27
    12ca:	7a 2f       	mov	r23, r26
    12cc:	85 2d       	mov	r24, r5
    12ce:	94 2d       	mov	r25, r4
    12d0:	0e 94 ce 1f 	call	0x3f9c	; 0x3f9c <__adddi3>
    12d4:	2d 8b       	std	Y+21, r18	; 0x15
    12d6:	3e 8b       	std	Y+22, r19	; 0x16
    12d8:	4f 8b       	std	Y+23, r20	; 0x17
    12da:	58 8f       	std	Y+24, r21	; 0x18
    12dc:	69 8f       	std	Y+25, r22	; 0x19
    12de:	7a 8f       	std	Y+26, r23	; 0x1a
    12e0:	8b 8f       	std	Y+27, r24	; 0x1b
    12e2:	9c 8f       	std	Y+28, r25	; 0x1c
		OFF = int64_t(C[2])*65536l+(int64_t(C[4])*dT)/128l;
		P = (D1*SENS/(2097152l)-OFF)/(8192l);
	}
	
	// Temp conversion
	TEMP = 2000l+int64_t(dT)*C[6]/8388608LL;
    12e4:	84 85       	ldd	r24, Z+12	; 0x0c
    12e6:	95 85       	ldd	r25, Z+13	; 0x0d
    12e8:	3c 01       	movw	r6, r24
    12ea:	81 2c       	mov	r8, r1
    12ec:	91 2c       	mov	r9, r1
    12ee:	a1 2c       	mov	r10, r1
    12f0:	b1 2c       	mov	r11, r1
    12f2:	65 01       	movw	r12, r10
    12f4:	8d 8f       	std	Y+29, r24	; 0x1d
    12f6:	7e 8e       	std	Y+30, r7	; 0x1e
    12f8:	8f 8e       	std	Y+31, r8	; 0x1f
    12fa:	98 a2       	std	Y+32, r9	; 0x20
    12fc:	a9 a2       	std	Y+33, r10	; 0x21
    12fe:	ba a2       	std	Y+34, r11	; 0x22
    1300:	cb a2       	std	Y+35, r12	; 0x23
    1302:	dc a2       	std	Y+36, r13	; 0x24
    1304:	a9 80       	ldd	r10, Y+1	; 0x01
    1306:	ba 80       	ldd	r11, Y+2	; 0x02
    1308:	cb 80       	ldd	r12, Y+3	; 0x03
    130a:	dc 80       	ldd	r13, Y+4	; 0x04
    130c:	ed 80       	ldd	r14, Y+5	; 0x05
    130e:	fe 2c       	mov	r15, r14
    1310:	0e 2d       	mov	r16, r14
    1312:	1e 2d       	mov	r17, r14
    1314:	28 2f       	mov	r18, r24
    1316:	37 2d       	mov	r19, r7
    1318:	40 e0       	ldi	r20, 0x00	; 0
    131a:	50 e0       	ldi	r21, 0x00	; 0
    131c:	60 e0       	ldi	r22, 0x00	; 0
    131e:	70 e0       	ldi	r23, 0x00	; 0
    1320:	80 e0       	ldi	r24, 0x00	; 0
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <__muldi3>
    1328:	12 2f       	mov	r17, r18
    132a:	3d a3       	std	Y+37, r19	; 0x25
    132c:	4d 8f       	std	Y+29, r20	; 0x1d
    132e:	b5 2f       	mov	r27, r21
    1330:	f6 2f       	mov	r31, r22
    1332:	e7 2f       	mov	r30, r23
    1334:	78 2e       	mov	r7, r24
    1336:	89 2e       	mov	r8, r25
    1338:	a0 e0       	ldi	r26, 0x00	; 0
    133a:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <__cmpdi2_s8>
    133e:	84 f4       	brge	.+32     	; 0x1360 <_ZN6MS58379calculateEv+0x2ce>
    1340:	21 50       	subi	r18, 0x01	; 1
    1342:	31 09       	sbc	r19, r1
    1344:	40 48       	sbci	r20, 0x80	; 128
    1346:	5f 4f       	sbci	r21, 0xFF	; 255
    1348:	6f 4f       	sbci	r22, 0xFF	; 255
    134a:	7f 4f       	sbci	r23, 0xFF	; 255
    134c:	8f 4f       	sbci	r24, 0xFF	; 255
    134e:	9f 4f       	sbci	r25, 0xFF	; 255
    1350:	12 2f       	mov	r17, r18
    1352:	3d a3       	std	Y+37, r19	; 0x25
    1354:	4d 8f       	std	Y+29, r20	; 0x1d
    1356:	b5 2f       	mov	r27, r21
    1358:	f6 2f       	mov	r31, r22
    135a:	e7 2f       	mov	r30, r23
    135c:	78 2e       	mov	r7, r24
    135e:	89 2e       	mov	r8, r25
    1360:	21 2f       	mov	r18, r17
    1362:	3d a1       	ldd	r19, Y+37	; 0x25
    1364:	4d 8d       	ldd	r20, Y+29	; 0x1d
    1366:	5b 2f       	mov	r21, r27
    1368:	6f 2f       	mov	r22, r31
    136a:	7e 2f       	mov	r23, r30
    136c:	87 2d       	mov	r24, r7
    136e:	98 2d       	mov	r25, r8
    1370:	07 e1       	ldi	r16, 0x17	; 23
    1372:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <__ashrdi3>
    1376:	82 2e       	mov	r8, r18
    1378:	93 2e       	mov	r9, r19
    137a:	a4 2e       	mov	r10, r20
    137c:	b5 2e       	mov	r11, r21
    137e:	24 01       	movw	r4, r8
    1380:	35 01       	movw	r6, r10
    1382:	00 ed       	ldi	r16, 0xD0	; 208
    1384:	40 0e       	add	r4, r16
    1386:	07 e0       	ldi	r16, 0x07	; 7
    1388:	50 1e       	adc	r5, r16
    138a:	61 1c       	adc	r6, r1
    138c:	71 1c       	adc	r7, r1
	
	//Second order compensation
	if ( _model == MS5837_02BA ) {
		if((TEMP/100)<20){         //Low temp
    138e:	10 ed       	ldi	r17, 0xD0	; 208
    1390:	41 16       	cp	r4, r17
    1392:	17 e0       	ldi	r17, 0x07	; 7
    1394:	51 06       	cpc	r5, r17
    1396:	61 04       	cpc	r6, r1
    1398:	71 04       	cpc	r7, r1
    139a:	0c f4       	brge	.+2      	; 0x139e <_ZN6MS58379calculateEv+0x30c>
    139c:	62 c1       	rjmp	.+708    	; 0x1662 <_ZN6MS58379calculateEv+0x5d0>
	int32_t dT = 0;
	int64_t SENS = 0;
	int64_t OFF = 0;
	int32_t SENSi = 0;
	int32_t OFFi = 0;
	int32_t Ti = 0;
    139e:	81 2c       	mov	r8, r1
    13a0:	91 2c       	mov	r9, r1
    13a2:	54 01       	movw	r10, r8
	
	int32_t dT = 0;
	int64_t SENS = 0;
	int64_t OFF = 0;
	int32_t SENSi = 0;
	int32_t OFFi = 0;
    13a4:	19 82       	std	Y+1, r1	; 0x01
    13a6:	1a 82       	std	Y+2, r1	; 0x02
    13a8:	1b 82       	std	Y+3, r1	; 0x03
    13aa:	1c 82       	std	Y+4, r1	; 0x04
	// Do conversion first and then second order temp compensation
	
	int32_t dT = 0;
	int64_t SENS = 0;
	int64_t OFF = 0;
	int32_t SENSi = 0;
    13ac:	e1 2c       	mov	r14, r1
    13ae:	f1 2c       	mov	r15, r1
    13b0:	87 01       	movw	r16, r14
    13b2:	4c c3       	rjmp	.+1688   	; 0x1a4c <_ZN6MS58379calculateEv+0x9ba>
	if ( _model == MS5837_02BA ) {
		SENS = int64_t(C[1])*65536l+(int64_t(C[3])*dT)/128l;
		OFF = int64_t(C[2])*131072l+(int64_t(C[4])*dT)/64l;
		P = (D1*SENS/(2097152l)-OFF)/(32768l);
	} else {
		SENS = int64_t(C[1])*32768l+(int64_t(C[3])*dT)/256l;
    13b4:	69 80       	ldd	r6, Y+1	; 0x01
    13b6:	7a 80       	ldd	r7, Y+2	; 0x02
    13b8:	8b 80       	ldd	r8, Y+3	; 0x03
    13ba:	9c 80       	ldd	r9, Y+4	; 0x04
    13bc:	99 0c       	add	r9, r9
    13be:	66 08       	sbc	r6, r6
    13c0:	76 2c       	mov	r7, r6
    13c2:	43 01       	movw	r8, r6
    13c4:	6d 82       	std	Y+5, r6	; 0x05
    13c6:	7e 82       	std	Y+6, r7	; 0x06
    13c8:	8f 82       	std	Y+7, r8	; 0x07
    13ca:	98 86       	std	Y+8, r9	; 0x08
    13cc:	86 81       	ldd	r24, Z+6	; 0x06
    13ce:	97 81       	ldd	r25, Z+7	; 0x07
    13d0:	3c 01       	movw	r6, r24
    13d2:	81 2c       	mov	r8, r1
    13d4:	91 2c       	mov	r9, r1
    13d6:	a1 2c       	mov	r10, r1
    13d8:	b1 2c       	mov	r11, r1
    13da:	65 01       	movw	r12, r10
    13dc:	8d 8f       	std	Y+29, r24	; 0x1d
    13de:	7e 8e       	std	Y+30, r7	; 0x1e
    13e0:	8f 8e       	std	Y+31, r8	; 0x1f
    13e2:	98 a2       	std	Y+32, r9	; 0x20
    13e4:	a9 a2       	std	Y+33, r10	; 0x21
    13e6:	ba a2       	std	Y+34, r11	; 0x22
    13e8:	cb a2       	std	Y+35, r12	; 0x23
    13ea:	dc a2       	std	Y+36, r13	; 0x24
    13ec:	a9 80       	ldd	r10, Y+1	; 0x01
    13ee:	ba 80       	ldd	r11, Y+2	; 0x02
    13f0:	cb 80       	ldd	r12, Y+3	; 0x03
    13f2:	dc 80       	ldd	r13, Y+4	; 0x04
    13f4:	ed 80       	ldd	r14, Y+5	; 0x05
    13f6:	fe 2c       	mov	r15, r14
    13f8:	0e 2d       	mov	r16, r14
    13fa:	1e 2d       	mov	r17, r14
    13fc:	28 2f       	mov	r18, r24
    13fe:	37 2d       	mov	r19, r7
    1400:	40 e0       	ldi	r20, 0x00	; 0
    1402:	50 e0       	ldi	r21, 0x00	; 0
    1404:	60 e0       	ldi	r22, 0x00	; 0
    1406:	70 e0       	ldi	r23, 0x00	; 0
    1408:	80 e0       	ldi	r24, 0x00	; 0
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <__muldi3>
    1410:	12 2f       	mov	r17, r18
    1412:	3e 87       	std	Y+14, r19	; 0x0e
    1414:	4d 87       	std	Y+13, r20	; 0x0d
    1416:	b5 2f       	mov	r27, r21
    1418:	f6 2f       	mov	r31, r22
    141a:	e7 2f       	mov	r30, r23
    141c:	78 2e       	mov	r7, r24
    141e:	89 2e       	mov	r8, r25
    1420:	a0 e0       	ldi	r26, 0x00	; 0
    1422:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <__cmpdi2_s8>
    1426:	84 f4       	brge	.+32     	; 0x1448 <_ZN6MS58379calculateEv+0x3b6>
    1428:	21 50       	subi	r18, 0x01	; 1
    142a:	3f 4f       	sbci	r19, 0xFF	; 255
    142c:	4f 4f       	sbci	r20, 0xFF	; 255
    142e:	5f 4f       	sbci	r21, 0xFF	; 255
    1430:	6f 4f       	sbci	r22, 0xFF	; 255
    1432:	7f 4f       	sbci	r23, 0xFF	; 255
    1434:	8f 4f       	sbci	r24, 0xFF	; 255
    1436:	9f 4f       	sbci	r25, 0xFF	; 255
    1438:	12 2f       	mov	r17, r18
    143a:	3e 87       	std	Y+14, r19	; 0x0e
    143c:	4d 87       	std	Y+13, r20	; 0x0d
    143e:	b5 2f       	mov	r27, r21
    1440:	f6 2f       	mov	r31, r22
    1442:	e7 2f       	mov	r30, r23
    1444:	78 2e       	mov	r7, r24
    1446:	89 2e       	mov	r8, r25
    1448:	21 2f       	mov	r18, r17
    144a:	3e 85       	ldd	r19, Y+14	; 0x0e
    144c:	4d 85       	ldd	r20, Y+13	; 0x0d
    144e:	5b 2f       	mov	r21, r27
    1450:	6f 2f       	mov	r22, r31
    1452:	7e 2f       	mov	r23, r30
    1454:	87 2d       	mov	r24, r7
    1456:	98 2d       	mov	r25, r8
    1458:	08 e0       	ldi	r16, 0x08	; 8
    145a:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <__ashrdi3>
    145e:	82 2e       	mov	r8, r18
    1460:	93 2e       	mov	r9, r19
    1462:	74 2e       	mov	r7, r20
    1464:	65 2e       	mov	r6, r21
    1466:	b6 2f       	mov	r27, r22
    1468:	a7 2f       	mov	r26, r23
    146a:	58 2e       	mov	r5, r24
    146c:	49 2e       	mov	r4, r25
    146e:	f1 01       	movw	r30, r2
    1470:	a2 80       	ldd	r10, Z+2	; 0x02
    1472:	b3 80       	ldd	r11, Z+3	; 0x03
    1474:	2a 2d       	mov	r18, r10
    1476:	3b 2d       	mov	r19, r11
    1478:	40 e0       	ldi	r20, 0x00	; 0
    147a:	50 e0       	ldi	r21, 0x00	; 0
    147c:	60 e0       	ldi	r22, 0x00	; 0
    147e:	70 e0       	ldi	r23, 0x00	; 0
    1480:	80 e0       	ldi	r24, 0x00	; 0
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	0f e0       	ldi	r16, 0x0F	; 15
    1486:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <__ashldi3>
    148a:	a2 2e       	mov	r10, r18
    148c:	b3 2e       	mov	r11, r19
    148e:	c4 2e       	mov	r12, r20
    1490:	d5 2e       	mov	r13, r21
    1492:	e6 2e       	mov	r14, r22
    1494:	f7 2e       	mov	r15, r23
    1496:	08 2f       	mov	r16, r24
    1498:	19 2f       	mov	r17, r25
    149a:	28 2d       	mov	r18, r8
    149c:	39 2d       	mov	r19, r9
    149e:	47 2d       	mov	r20, r7
    14a0:	56 2d       	mov	r21, r6
    14a2:	6b 2f       	mov	r22, r27
    14a4:	7a 2f       	mov	r23, r26
    14a6:	85 2d       	mov	r24, r5
    14a8:	94 2d       	mov	r25, r4
    14aa:	0e 94 ce 1f 	call	0x3f9c	; 0x3f9c <__adddi3>
    14ae:	2d 8b       	std	Y+21, r18	; 0x15
    14b0:	3e 8b       	std	Y+22, r19	; 0x16
    14b2:	4f 8b       	std	Y+23, r20	; 0x17
    14b4:	58 8f       	std	Y+24, r21	; 0x18
    14b6:	69 8f       	std	Y+25, r22	; 0x19
    14b8:	7a 8f       	std	Y+26, r23	; 0x1a
    14ba:	8b 8f       	std	Y+27, r24	; 0x1b
    14bc:	9c 8f       	std	Y+28, r25	; 0x1c
		OFF = int64_t(C[2])*65536l+(int64_t(C[4])*dT)/128l;
    14be:	80 85       	ldd	r24, Z+8	; 0x08
    14c0:	91 85       	ldd	r25, Z+9	; 0x09
    14c2:	3c 01       	movw	r6, r24
    14c4:	81 2c       	mov	r8, r1
    14c6:	91 2c       	mov	r9, r1
    14c8:	a1 2c       	mov	r10, r1
    14ca:	b1 2c       	mov	r11, r1
    14cc:	65 01       	movw	r12, r10
    14ce:	8d 8f       	std	Y+29, r24	; 0x1d
    14d0:	7e 8e       	std	Y+30, r7	; 0x1e
    14d2:	8f 8e       	std	Y+31, r8	; 0x1f
    14d4:	98 a2       	std	Y+32, r9	; 0x20
    14d6:	a9 a2       	std	Y+33, r10	; 0x21
    14d8:	ba a2       	std	Y+34, r11	; 0x22
    14da:	cb a2       	std	Y+35, r12	; 0x23
    14dc:	dc a2       	std	Y+36, r13	; 0x24
    14de:	a9 80       	ldd	r10, Y+1	; 0x01
    14e0:	ba 80       	ldd	r11, Y+2	; 0x02
    14e2:	cb 80       	ldd	r12, Y+3	; 0x03
    14e4:	dc 80       	ldd	r13, Y+4	; 0x04
    14e6:	ed 80       	ldd	r14, Y+5	; 0x05
    14e8:	fe 2c       	mov	r15, r14
    14ea:	0e 2d       	mov	r16, r14
    14ec:	1e 2d       	mov	r17, r14
    14ee:	28 2f       	mov	r18, r24
    14f0:	37 2d       	mov	r19, r7
    14f2:	40 e0       	ldi	r20, 0x00	; 0
    14f4:	50 e0       	ldi	r21, 0x00	; 0
    14f6:	60 e0       	ldi	r22, 0x00	; 0
    14f8:	70 e0       	ldi	r23, 0x00	; 0
    14fa:	80 e0       	ldi	r24, 0x00	; 0
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <__muldi3>
    1502:	12 2f       	mov	r17, r18
    1504:	3e 87       	std	Y+14, r19	; 0x0e
    1506:	4d 87       	std	Y+13, r20	; 0x0d
    1508:	b5 2f       	mov	r27, r21
    150a:	f6 2f       	mov	r31, r22
    150c:	e7 2f       	mov	r30, r23
    150e:	78 2e       	mov	r7, r24
    1510:	89 2e       	mov	r8, r25
    1512:	a0 e0       	ldi	r26, 0x00	; 0
    1514:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <__cmpdi2_s8>
    1518:	5c f4       	brge	.+22     	; 0x1530 <_ZN6MS58379calculateEv+0x49e>
    151a:	af e7       	ldi	r26, 0x7F	; 127
    151c:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <__adddi3_s8>
    1520:	12 2f       	mov	r17, r18
    1522:	3e 87       	std	Y+14, r19	; 0x0e
    1524:	4d 87       	std	Y+13, r20	; 0x0d
    1526:	b5 2f       	mov	r27, r21
    1528:	f6 2f       	mov	r31, r22
    152a:	e7 2f       	mov	r30, r23
    152c:	78 2e       	mov	r7, r24
    152e:	89 2e       	mov	r8, r25
    1530:	21 2f       	mov	r18, r17
    1532:	3e 85       	ldd	r19, Y+14	; 0x0e
    1534:	4d 85       	ldd	r20, Y+13	; 0x0d
    1536:	5b 2f       	mov	r21, r27
    1538:	6f 2f       	mov	r22, r31
    153a:	7e 2f       	mov	r23, r30
    153c:	87 2d       	mov	r24, r7
    153e:	98 2d       	mov	r25, r8
    1540:	07 e0       	ldi	r16, 0x07	; 7
    1542:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <__ashrdi3>
    1546:	82 2e       	mov	r8, r18
    1548:	93 2e       	mov	r9, r19
    154a:	74 2e       	mov	r7, r20
    154c:	65 2e       	mov	r6, r21
    154e:	b6 2f       	mov	r27, r22
    1550:	a7 2f       	mov	r26, r23
    1552:	58 2e       	mov	r5, r24
    1554:	49 2e       	mov	r4, r25
    1556:	f1 01       	movw	r30, r2
    1558:	24 81       	ldd	r18, Z+4	; 0x04
    155a:	35 81       	ldd	r19, Z+5	; 0x05
    155c:	59 01       	movw	r10, r18
    155e:	3b 2d       	mov	r19, r11
    1560:	40 e0       	ldi	r20, 0x00	; 0
    1562:	50 e0       	ldi	r21, 0x00	; 0
    1564:	60 e0       	ldi	r22, 0x00	; 0
    1566:	70 e0       	ldi	r23, 0x00	; 0
    1568:	80 e0       	ldi	r24, 0x00	; 0
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	00 e1       	ldi	r16, 0x10	; 16
    156e:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <__ashldi3>
    1572:	a2 2e       	mov	r10, r18
    1574:	b3 2e       	mov	r11, r19
    1576:	c4 2e       	mov	r12, r20
    1578:	d5 2e       	mov	r13, r21
    157a:	e6 2e       	mov	r14, r22
    157c:	f7 2e       	mov	r15, r23
    157e:	08 2f       	mov	r16, r24
    1580:	19 2f       	mov	r17, r25
    1582:	28 2d       	mov	r18, r8
    1584:	39 2d       	mov	r19, r9
    1586:	47 2d       	mov	r20, r7
    1588:	56 2d       	mov	r21, r6
    158a:	6b 2f       	mov	r22, r27
    158c:	7a 2f       	mov	r23, r26
    158e:	85 2d       	mov	r24, r5
    1590:	94 2d       	mov	r25, r4
    1592:	0e 94 ce 1f 	call	0x3f9c	; 0x3f9c <__adddi3>
    1596:	2d 87       	std	Y+13, r18	; 0x0d
    1598:	3e 87       	std	Y+14, r19	; 0x0e
    159a:	4f 87       	std	Y+15, r20	; 0x0f
    159c:	58 8b       	std	Y+16, r21	; 0x10
    159e:	69 8b       	std	Y+17, r22	; 0x11
    15a0:	7a 8b       	std	Y+18, r23	; 0x12
    15a2:	8b 8b       	std	Y+19, r24	; 0x13
    15a4:	9c 8b       	std	Y+20, r25	; 0x14
		P = (D1*SENS/(2097152l)-OFF)/(8192l);
	}
	
	// Temp conversion
	TEMP = 2000l+int64_t(dT)*C[6]/8388608LL;
    15a6:	84 85       	ldd	r24, Z+12	; 0x0c
    15a8:	95 85       	ldd	r25, Z+13	; 0x0d
    15aa:	3c 01       	movw	r6, r24
    15ac:	81 2c       	mov	r8, r1
    15ae:	91 2c       	mov	r9, r1
    15b0:	a1 2c       	mov	r10, r1
    15b2:	b1 2c       	mov	r11, r1
    15b4:	65 01       	movw	r12, r10
    15b6:	8d 8f       	std	Y+29, r24	; 0x1d
    15b8:	7e 8e       	std	Y+30, r7	; 0x1e
    15ba:	8f 8e       	std	Y+31, r8	; 0x1f
    15bc:	98 a2       	std	Y+32, r9	; 0x20
    15be:	a9 a2       	std	Y+33, r10	; 0x21
    15c0:	ba a2       	std	Y+34, r11	; 0x22
    15c2:	cb a2       	std	Y+35, r12	; 0x23
    15c4:	dc a2       	std	Y+36, r13	; 0x24
    15c6:	a9 80       	ldd	r10, Y+1	; 0x01
    15c8:	ba 80       	ldd	r11, Y+2	; 0x02
    15ca:	cb 80       	ldd	r12, Y+3	; 0x03
    15cc:	dc 80       	ldd	r13, Y+4	; 0x04
    15ce:	ed 80       	ldd	r14, Y+5	; 0x05
    15d0:	fe 2c       	mov	r15, r14
    15d2:	0e 2d       	mov	r16, r14
    15d4:	1e 2d       	mov	r17, r14
    15d6:	28 2f       	mov	r18, r24
    15d8:	37 2d       	mov	r19, r7
    15da:	40 e0       	ldi	r20, 0x00	; 0
    15dc:	50 e0       	ldi	r21, 0x00	; 0
    15de:	60 e0       	ldi	r22, 0x00	; 0
    15e0:	70 e0       	ldi	r23, 0x00	; 0
    15e2:	80 e0       	ldi	r24, 0x00	; 0
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <__muldi3>
    15ea:	12 2f       	mov	r17, r18
    15ec:	3d a3       	std	Y+37, r19	; 0x25
    15ee:	4d 8f       	std	Y+29, r20	; 0x1d
    15f0:	b5 2f       	mov	r27, r21
    15f2:	f6 2f       	mov	r31, r22
    15f4:	e7 2f       	mov	r30, r23
    15f6:	78 2e       	mov	r7, r24
    15f8:	89 2e       	mov	r8, r25
    15fa:	a0 e0       	ldi	r26, 0x00	; 0
    15fc:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <__cmpdi2_s8>
    1600:	84 f4       	brge	.+32     	; 0x1622 <_ZN6MS58379calculateEv+0x590>
    1602:	21 50       	subi	r18, 0x01	; 1
    1604:	31 09       	sbc	r19, r1
    1606:	40 48       	sbci	r20, 0x80	; 128
    1608:	5f 4f       	sbci	r21, 0xFF	; 255
    160a:	6f 4f       	sbci	r22, 0xFF	; 255
    160c:	7f 4f       	sbci	r23, 0xFF	; 255
    160e:	8f 4f       	sbci	r24, 0xFF	; 255
    1610:	9f 4f       	sbci	r25, 0xFF	; 255
    1612:	12 2f       	mov	r17, r18
    1614:	3d a3       	std	Y+37, r19	; 0x25
    1616:	4d 8f       	std	Y+29, r20	; 0x1d
    1618:	b5 2f       	mov	r27, r21
    161a:	f6 2f       	mov	r31, r22
    161c:	e7 2f       	mov	r30, r23
    161e:	78 2e       	mov	r7, r24
    1620:	89 2e       	mov	r8, r25
    1622:	21 2f       	mov	r18, r17
    1624:	3d a1       	ldd	r19, Y+37	; 0x25
    1626:	4d 8d       	ldd	r20, Y+29	; 0x1d
    1628:	5b 2f       	mov	r21, r27
    162a:	6f 2f       	mov	r22, r31
    162c:	7e 2f       	mov	r23, r30
    162e:	87 2d       	mov	r24, r7
    1630:	98 2d       	mov	r25, r8
    1632:	07 e1       	ldi	r16, 0x17	; 23
    1634:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <__ashrdi3>
    1638:	82 2e       	mov	r8, r18
    163a:	93 2e       	mov	r9, r19
    163c:	a4 2e       	mov	r10, r20
    163e:	b5 2e       	mov	r11, r21
    1640:	24 01       	movw	r4, r8
    1642:	35 01       	movw	r6, r10
    1644:	00 ed       	ldi	r16, 0xD0	; 208
    1646:	40 0e       	add	r4, r16
    1648:	07 e0       	ldi	r16, 0x07	; 7
    164a:	50 1e       	adc	r5, r16
    164c:	61 1c       	adc	r6, r1
    164e:	71 1c       	adc	r7, r1
			Ti = (11*int64_t(dT)*int64_t(dT))/(34359738368LL);
			OFFi = (31*(TEMP-2000)*(TEMP-2000))/8;
			SENSi = (63*(TEMP-2000)*(TEMP-2000))/32;
		}
		} else {
		if((TEMP/100)<20){         //Low temp
    1650:	10 ed       	ldi	r17, 0xD0	; 208
    1652:	41 16       	cp	r4, r17
    1654:	17 e0       	ldi	r17, 0x07	; 7
    1656:	51 06       	cpc	r5, r17
    1658:	61 04       	cpc	r6, r1
    165a:	71 04       	cpc	r7, r1
    165c:	0c f4       	brge	.+2      	; 0x1660 <_ZN6MS58379calculateEv+0x5ce>
    165e:	af c0       	rjmp	.+350    	; 0x17be <_ZN6MS58379calculateEv+0x72c>
    1660:	8a c1       	rjmp	.+788    	; 0x1976 <_ZN6MS58379calculateEv+0x8e4>
	TEMP = 2000l+int64_t(dT)*C[6]/8388608LL;
	
	//Second order compensation
	if ( _model == MS5837_02BA ) {
		if((TEMP/100)<20){         //Low temp
			Ti = (11*int64_t(dT)*int64_t(dT))/(34359738368LL);
    1662:	29 81       	ldd	r18, Y+1	; 0x01
    1664:	3a 81       	ldd	r19, Y+2	; 0x02
    1666:	4b 81       	ldd	r20, Y+3	; 0x03
    1668:	5c 81       	ldd	r21, Y+4	; 0x04
    166a:	6d 81       	ldd	r22, Y+5	; 0x05
    166c:	76 2f       	mov	r23, r22
    166e:	86 2f       	mov	r24, r22
    1670:	96 2f       	mov	r25, r22
    1672:	02 e0       	ldi	r16, 0x02	; 2
    1674:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <__ashldi3>
    1678:	a2 2e       	mov	r10, r18
    167a:	b3 2e       	mov	r11, r19
    167c:	c4 2e       	mov	r12, r20
    167e:	d5 2e       	mov	r13, r21
    1680:	e6 2e       	mov	r14, r22
    1682:	f7 2e       	mov	r15, r23
    1684:	e8 2f       	mov	r30, r24
    1686:	19 2f       	mov	r17, r25
    1688:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <__ashldi3>
    168c:	0e 2f       	mov	r16, r30
    168e:	0e 94 e3 1f 	call	0x3fc6	; 0x3fc6 <__subdi3>
    1692:	a9 80       	ldd	r10, Y+1	; 0x01
    1694:	ba 80       	ldd	r11, Y+2	; 0x02
    1696:	cb 80       	ldd	r12, Y+3	; 0x03
    1698:	dc 80       	ldd	r13, Y+4	; 0x04
    169a:	ed 80       	ldd	r14, Y+5	; 0x05
    169c:	fe 2c       	mov	r15, r14
    169e:	0e 2d       	mov	r16, r14
    16a0:	1e 2d       	mov	r17, r14
    16a2:	0e 94 e3 1f 	call	0x3fc6	; 0x3fc6 <__subdi3>
    16a6:	e0 2e       	mov	r14, r16
    16a8:	0f 2d       	mov	r16, r15
    16aa:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <__muldi3>
    16ae:	12 2f       	mov	r17, r18
    16b0:	3d 8f       	std	Y+29, r19	; 0x1d
    16b2:	4d 83       	std	Y+5, r20	; 0x05
    16b4:	b5 2f       	mov	r27, r21
    16b6:	f6 2f       	mov	r31, r22
    16b8:	e7 2f       	mov	r30, r23
    16ba:	89 83       	std	Y+1, r24	; 0x01
    16bc:	89 2e       	mov	r8, r25
    16be:	a0 e0       	ldi	r26, 0x00	; 0
    16c0:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <__cmpdi2_s8>
    16c4:	84 f4       	brge	.+32     	; 0x16e6 <_ZN6MS58379calculateEv+0x654>
    16c6:	21 50       	subi	r18, 0x01	; 1
    16c8:	31 09       	sbc	r19, r1
    16ca:	41 09       	sbc	r20, r1
    16cc:	51 09       	sbc	r21, r1
    16ce:	68 4f       	sbci	r22, 0xF8	; 248
    16d0:	7f 4f       	sbci	r23, 0xFF	; 255
    16d2:	8f 4f       	sbci	r24, 0xFF	; 255
    16d4:	9f 4f       	sbci	r25, 0xFF	; 255
    16d6:	12 2f       	mov	r17, r18
    16d8:	3d 8f       	std	Y+29, r19	; 0x1d
    16da:	4d 83       	std	Y+5, r20	; 0x05
    16dc:	b5 2f       	mov	r27, r21
    16de:	f6 2f       	mov	r31, r22
    16e0:	e7 2f       	mov	r30, r23
    16e2:	89 83       	std	Y+1, r24	; 0x01
    16e4:	89 2e       	mov	r8, r25
    16e6:	21 2f       	mov	r18, r17
    16e8:	3d 8d       	ldd	r19, Y+29	; 0x1d
    16ea:	4d 81       	ldd	r20, Y+5	; 0x05
    16ec:	5b 2f       	mov	r21, r27
    16ee:	6f 2f       	mov	r22, r31
    16f0:	7e 2f       	mov	r23, r30
    16f2:	89 81       	ldd	r24, Y+1	; 0x01
    16f4:	98 2d       	mov	r25, r8
    16f6:	03 e2       	ldi	r16, 0x23	; 35
    16f8:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <__ashrdi3>
    16fc:	82 2e       	mov	r8, r18
    16fe:	93 2e       	mov	r9, r19
    1700:	a4 2e       	mov	r10, r20
    1702:	b5 2e       	mov	r11, r21
			OFFi = (31*(TEMP-2000)*(TEMP-2000))/8;
    1704:	73 01       	movw	r14, r6
    1706:	62 01       	movw	r12, r4
    1708:	20 ed       	ldi	r18, 0xD0	; 208
    170a:	c2 1a       	sub	r12, r18
    170c:	27 e0       	ldi	r18, 0x07	; 7
    170e:	d2 0a       	sbc	r13, r18
    1710:	e1 08       	sbc	r14, r1
    1712:	f1 08       	sbc	r15, r1
    1714:	d7 01       	movw	r26, r14
    1716:	c6 01       	movw	r24, r12
    1718:	88 0f       	add	r24, r24
    171a:	99 1f       	adc	r25, r25
    171c:	aa 1f       	adc	r26, r26
    171e:	bb 1f       	adc	r27, r27
    1720:	88 0f       	add	r24, r24
    1722:	99 1f       	adc	r25, r25
    1724:	aa 1f       	adc	r26, r26
    1726:	bb 1f       	adc	r27, r27
    1728:	88 0f       	add	r24, r24
    172a:	99 1f       	adc	r25, r25
    172c:	aa 1f       	adc	r26, r26
    172e:	bb 1f       	adc	r27, r27
    1730:	88 0f       	add	r24, r24
    1732:	99 1f       	adc	r25, r25
    1734:	aa 1f       	adc	r26, r26
    1736:	bb 1f       	adc	r27, r27
    1738:	88 0f       	add	r24, r24
    173a:	99 1f       	adc	r25, r25
    173c:	aa 1f       	adc	r26, r26
    173e:	bb 1f       	adc	r27, r27
    1740:	9c 01       	movw	r18, r24
    1742:	ad 01       	movw	r20, r26
    1744:	2c 19       	sub	r18, r12
    1746:	3d 09       	sbc	r19, r13
    1748:	4e 09       	sbc	r20, r14
    174a:	5f 09       	sbc	r21, r15
    174c:	c7 01       	movw	r24, r14
    174e:	b6 01       	movw	r22, r12
    1750:	0e 94 f4 1e 	call	0x3de8	; 0x3de8 <__mulsi3>
    1754:	8b 01       	movw	r16, r22
    1756:	9c 01       	movw	r18, r24
    1758:	99 23       	and	r25, r25
    175a:	24 f4       	brge	.+8      	; 0x1764 <_ZN6MS58379calculateEv+0x6d2>
    175c:	09 5f       	subi	r16, 0xF9	; 249
    175e:	1f 4f       	sbci	r17, 0xFF	; 255
    1760:	2f 4f       	sbci	r18, 0xFF	; 255
    1762:	3f 4f       	sbci	r19, 0xFF	; 255
    1764:	b9 01       	movw	r22, r18
    1766:	a8 01       	movw	r20, r16
    1768:	68 94       	set
    176a:	12 f8       	bld	r1, 2
    176c:	75 95       	asr	r23
    176e:	67 95       	ror	r22
    1770:	57 95       	ror	r21
    1772:	47 95       	ror	r20
    1774:	16 94       	lsr	r1
    1776:	d1 f7       	brne	.-12     	; 0x176c <_ZN6MS58379calculateEv+0x6da>
    1778:	49 83       	std	Y+1, r20	; 0x01
    177a:	5a 83       	std	Y+2, r21	; 0x02
    177c:	6b 83       	std	Y+3, r22	; 0x03
    177e:	7c 83       	std	Y+4, r23	; 0x04
			SENSi = (63*(TEMP-2000)*(TEMP-2000))/32;
    1780:	af e3       	ldi	r26, 0x3F	; 63
    1782:	b0 e0       	ldi	r27, 0x00	; 0
    1784:	a7 01       	movw	r20, r14
    1786:	96 01       	movw	r18, r12
    1788:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <__muluhisi3>
    178c:	9b 01       	movw	r18, r22
    178e:	ac 01       	movw	r20, r24
    1790:	c7 01       	movw	r24, r14
    1792:	b6 01       	movw	r22, r12
    1794:	0e 94 f4 1e 	call	0x3de8	; 0x3de8 <__mulsi3>
    1798:	8b 01       	movw	r16, r22
    179a:	9c 01       	movw	r18, r24
    179c:	99 23       	and	r25, r25
    179e:	24 f4       	brge	.+8      	; 0x17a8 <_ZN6MS58379calculateEv+0x716>
    17a0:	01 5e       	subi	r16, 0xE1	; 225
    17a2:	1f 4f       	sbci	r17, 0xFF	; 255
    17a4:	2f 4f       	sbci	r18, 0xFF	; 255
    17a6:	3f 4f       	sbci	r19, 0xFF	; 255
    17a8:	78 01       	movw	r14, r16
    17aa:	89 01       	movw	r16, r18
    17ac:	68 94       	set
    17ae:	14 f8       	bld	r1, 4
    17b0:	15 95       	asr	r17
    17b2:	07 95       	ror	r16
    17b4:	f7 94       	ror	r15
    17b6:	e7 94       	ror	r14
    17b8:	16 94       	lsr	r1
    17ba:	d1 f7       	brne	.-12     	; 0x17b0 <_ZN6MS58379calculateEv+0x71e>
    17bc:	47 c1       	rjmp	.+654    	; 0x1a4c <_ZN6MS58379calculateEv+0x9ba>
		}
		} else {
		if((TEMP/100)<20){         //Low temp
			Ti = (3*int64_t(dT)*int64_t(dT))/(8589934592LL);
    17be:	29 81       	ldd	r18, Y+1	; 0x01
    17c0:	3a 81       	ldd	r19, Y+2	; 0x02
    17c2:	4b 81       	ldd	r20, Y+3	; 0x03
    17c4:	5c 81       	ldd	r21, Y+4	; 0x04
    17c6:	6d 81       	ldd	r22, Y+5	; 0x05
    17c8:	76 2f       	mov	r23, r22
    17ca:	86 2f       	mov	r24, r22
    17cc:	96 2f       	mov	r25, r22
    17ce:	01 e0       	ldi	r16, 0x01	; 1
    17d0:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <__ashldi3>
    17d4:	a9 80       	ldd	r10, Y+1	; 0x01
    17d6:	ba 80       	ldd	r11, Y+2	; 0x02
    17d8:	cb 80       	ldd	r12, Y+3	; 0x03
    17da:	dc 80       	ldd	r13, Y+4	; 0x04
    17dc:	ed 80       	ldd	r14, Y+5	; 0x05
    17de:	fe 2c       	mov	r15, r14
    17e0:	0e 2d       	mov	r16, r14
    17e2:	1e 2d       	mov	r17, r14
    17e4:	0e 94 ce 1f 	call	0x3f9c	; 0x3f9c <__adddi3>
    17e8:	e0 2e       	mov	r14, r16
    17ea:	0f 2d       	mov	r16, r15
    17ec:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <__muldi3>
    17f0:	12 2f       	mov	r17, r18
    17f2:	3d 8f       	std	Y+29, r19	; 0x1d
    17f4:	4d 83       	std	Y+5, r20	; 0x05
    17f6:	b5 2f       	mov	r27, r21
    17f8:	f6 2f       	mov	r31, r22
    17fa:	e7 2f       	mov	r30, r23
    17fc:	89 83       	std	Y+1, r24	; 0x01
    17fe:	89 2e       	mov	r8, r25
    1800:	a0 e0       	ldi	r26, 0x00	; 0
    1802:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <__cmpdi2_s8>
    1806:	84 f4       	brge	.+32     	; 0x1828 <_ZN6MS58379calculateEv+0x796>
    1808:	21 50       	subi	r18, 0x01	; 1
    180a:	31 09       	sbc	r19, r1
    180c:	41 09       	sbc	r20, r1
    180e:	51 09       	sbc	r21, r1
    1810:	6e 4f       	sbci	r22, 0xFE	; 254
    1812:	7f 4f       	sbci	r23, 0xFF	; 255
    1814:	8f 4f       	sbci	r24, 0xFF	; 255
    1816:	9f 4f       	sbci	r25, 0xFF	; 255
    1818:	12 2f       	mov	r17, r18
    181a:	3d 8f       	std	Y+29, r19	; 0x1d
    181c:	4d 83       	std	Y+5, r20	; 0x05
    181e:	b5 2f       	mov	r27, r21
    1820:	f6 2f       	mov	r31, r22
    1822:	e7 2f       	mov	r30, r23
    1824:	89 83       	std	Y+1, r24	; 0x01
    1826:	89 2e       	mov	r8, r25
    1828:	21 2f       	mov	r18, r17
    182a:	3d 8d       	ldd	r19, Y+29	; 0x1d
    182c:	4d 81       	ldd	r20, Y+5	; 0x05
    182e:	5b 2f       	mov	r21, r27
    1830:	6f 2f       	mov	r22, r31
    1832:	7e 2f       	mov	r23, r30
    1834:	89 81       	ldd	r24, Y+1	; 0x01
    1836:	98 2d       	mov	r25, r8
    1838:	01 e2       	ldi	r16, 0x21	; 33
    183a:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <__ashrdi3>
    183e:	2d 83       	std	Y+5, r18	; 0x05
    1840:	3e 83       	std	Y+6, r19	; 0x06
    1842:	4f 83       	std	Y+7, r20	; 0x07
    1844:	58 87       	std	Y+8, r21	; 0x08
			OFFi = (3*(TEMP-2000)*(TEMP-2000))/2;
    1846:	53 01       	movw	r10, r6
    1848:	42 01       	movw	r8, r4
    184a:	50 ed       	ldi	r21, 0xD0	; 208
    184c:	85 1a       	sub	r8, r21
    184e:	57 e0       	ldi	r21, 0x07	; 7
    1850:	95 0a       	sbc	r9, r21
    1852:	a1 08       	sbc	r10, r1
    1854:	b1 08       	sbc	r11, r1
    1856:	d5 01       	movw	r26, r10
    1858:	c4 01       	movw	r24, r8
    185a:	88 0f       	add	r24, r24
    185c:	99 1f       	adc	r25, r25
    185e:	aa 1f       	adc	r26, r26
    1860:	bb 1f       	adc	r27, r27
    1862:	9c 01       	movw	r18, r24
    1864:	ad 01       	movw	r20, r26
    1866:	28 0d       	add	r18, r8
    1868:	39 1d       	adc	r19, r9
    186a:	4a 1d       	adc	r20, r10
    186c:	5b 1d       	adc	r21, r11
    186e:	c5 01       	movw	r24, r10
    1870:	b4 01       	movw	r22, r8
    1872:	0e 94 f4 1e 	call	0x3de8	; 0x3de8 <__mulsi3>
    1876:	8b 01       	movw	r16, r22
    1878:	9c 01       	movw	r18, r24
    187a:	99 23       	and	r25, r25
    187c:	24 f4       	brge	.+8      	; 0x1886 <_ZN6MS58379calculateEv+0x7f4>
    187e:	0f 5f       	subi	r16, 0xFF	; 255
    1880:	1f 4f       	sbci	r17, 0xFF	; 255
    1882:	2f 4f       	sbci	r18, 0xFF	; 255
    1884:	3f 4f       	sbci	r19, 0xFF	; 255
    1886:	c9 01       	movw	r24, r18
    1888:	b8 01       	movw	r22, r16
    188a:	95 95       	asr	r25
    188c:	87 95       	ror	r24
    188e:	77 95       	ror	r23
    1890:	67 95       	ror	r22
    1892:	69 83       	std	Y+1, r22	; 0x01
    1894:	7a 83       	std	Y+2, r23	; 0x02
    1896:	8b 83       	std	Y+3, r24	; 0x03
    1898:	9c 83       	std	Y+4, r25	; 0x04
			SENSi = (5*(TEMP-2000)*(TEMP-2000))/8;
    189a:	d5 01       	movw	r26, r10
    189c:	c4 01       	movw	r24, r8
    189e:	88 0f       	add	r24, r24
    18a0:	99 1f       	adc	r25, r25
    18a2:	aa 1f       	adc	r26, r26
    18a4:	bb 1f       	adc	r27, r27
    18a6:	88 0f       	add	r24, r24
    18a8:	99 1f       	adc	r25, r25
    18aa:	aa 1f       	adc	r26, r26
    18ac:	bb 1f       	adc	r27, r27
    18ae:	9c 01       	movw	r18, r24
    18b0:	ad 01       	movw	r20, r26
    18b2:	28 0d       	add	r18, r8
    18b4:	39 1d       	adc	r19, r9
    18b6:	4a 1d       	adc	r20, r10
    18b8:	5b 1d       	adc	r21, r11
    18ba:	c5 01       	movw	r24, r10
    18bc:	b4 01       	movw	r22, r8
    18be:	0e 94 f4 1e 	call	0x3de8	; 0x3de8 <__mulsi3>
    18c2:	8b 01       	movw	r16, r22
    18c4:	9c 01       	movw	r18, r24
    18c6:	99 23       	and	r25, r25
    18c8:	24 f4       	brge	.+8      	; 0x18d2 <_ZN6MS58379calculateEv+0x840>
    18ca:	09 5f       	subi	r16, 0xF9	; 249
    18cc:	1f 4f       	sbci	r17, 0xFF	; 255
    18ce:	2f 4f       	sbci	r18, 0xFF	; 255
    18d0:	3f 4f       	sbci	r19, 0xFF	; 255
    18d2:	78 01       	movw	r14, r16
    18d4:	89 01       	movw	r16, r18
    18d6:	68 94       	set
    18d8:	12 f8       	bld	r1, 2
    18da:	15 95       	asr	r17
    18dc:	07 95       	ror	r16
    18de:	f7 94       	ror	r15
    18e0:	e7 94       	ror	r14
    18e2:	16 94       	lsr	r1
    18e4:	d1 f7       	brne	.-12     	; 0x18da <_ZN6MS58379calculateEv+0x848>
			if((TEMP/100)<-15){    //Very low temp
    18e6:	71 ec       	ldi	r23, 0xC1	; 193
    18e8:	47 16       	cp	r4, r23
    18ea:	79 ef       	ldi	r23, 0xF9	; 249
    18ec:	57 06       	cpc	r5, r23
    18ee:	7f ef       	ldi	r23, 0xFF	; 255
    18f0:	67 06       	cpc	r6, r23
    18f2:	77 06       	cpc	r7, r23
    18f4:	0c f0       	brlt	.+2      	; 0x18f8 <_ZN6MS58379calculateEv+0x866>
    18f6:	7f c1       	rjmp	.+766    	; 0x1bf6 <_ZN6MS58379calculateEv+0xb64>
				OFFi = OFFi+7*(TEMP+1500l)*(TEMP+1500l);
    18f8:	53 01       	movw	r10, r6
    18fa:	42 01       	movw	r8, r4
    18fc:	8c ed       	ldi	r24, 0xDC	; 220
    18fe:	88 0e       	add	r8, r24
    1900:	85 e0       	ldi	r24, 0x05	; 5
    1902:	98 1e       	adc	r9, r24
    1904:	a1 1c       	adc	r10, r1
    1906:	b1 1c       	adc	r11, r1
    1908:	d5 01       	movw	r26, r10
    190a:	c4 01       	movw	r24, r8
    190c:	88 0f       	add	r24, r24
    190e:	99 1f       	adc	r25, r25
    1910:	aa 1f       	adc	r26, r26
    1912:	bb 1f       	adc	r27, r27
    1914:	88 0f       	add	r24, r24
    1916:	99 1f       	adc	r25, r25
    1918:	aa 1f       	adc	r26, r26
    191a:	bb 1f       	adc	r27, r27
    191c:	88 0f       	add	r24, r24
    191e:	99 1f       	adc	r25, r25
    1920:	aa 1f       	adc	r26, r26
    1922:	bb 1f       	adc	r27, r27
    1924:	9c 01       	movw	r18, r24
    1926:	ad 01       	movw	r20, r26
    1928:	28 19       	sub	r18, r8
    192a:	39 09       	sbc	r19, r9
    192c:	4a 09       	sbc	r20, r10
    192e:	5b 09       	sbc	r21, r11
    1930:	c5 01       	movw	r24, r10
    1932:	b4 01       	movw	r22, r8
    1934:	0e 94 f4 1e 	call	0x3de8	; 0x3de8 <__mulsi3>
    1938:	29 81       	ldd	r18, Y+1	; 0x01
    193a:	3a 81       	ldd	r19, Y+2	; 0x02
    193c:	4b 81       	ldd	r20, Y+3	; 0x03
    193e:	5c 81       	ldd	r21, Y+4	; 0x04
    1940:	26 0f       	add	r18, r22
    1942:	37 1f       	adc	r19, r23
    1944:	48 1f       	adc	r20, r24
    1946:	59 1f       	adc	r21, r25
    1948:	29 83       	std	Y+1, r18	; 0x01
    194a:	3a 83       	std	Y+2, r19	; 0x02
    194c:	4b 83       	std	Y+3, r20	; 0x03
    194e:	5c 83       	std	Y+4, r21	; 0x04
				SENSi = SENSi+4*(TEMP+1500l)*(TEMP+1500l);
    1950:	a5 01       	movw	r20, r10
    1952:	94 01       	movw	r18, r8
    1954:	22 0f       	add	r18, r18
    1956:	33 1f       	adc	r19, r19
    1958:	44 1f       	adc	r20, r20
    195a:	55 1f       	adc	r21, r21
    195c:	22 0f       	add	r18, r18
    195e:	33 1f       	adc	r19, r19
    1960:	44 1f       	adc	r20, r20
    1962:	55 1f       	adc	r21, r21
    1964:	c5 01       	movw	r24, r10
    1966:	b4 01       	movw	r22, r8
    1968:	0e 94 f4 1e 	call	0x3de8	; 0x3de8 <__mulsi3>
    196c:	e6 0e       	add	r14, r22
    196e:	f7 1e       	adc	r15, r23
    1970:	08 1f       	adc	r16, r24
    1972:	19 1f       	adc	r17, r25
    1974:	40 c1       	rjmp	.+640    	; 0x1bf6 <_ZN6MS58379calculateEv+0xb64>
			}
		}
		else if((TEMP/100)>=20){    //High temp
			Ti = 2*(dT*dT)/(137438953472LL);
    1976:	29 81       	ldd	r18, Y+1	; 0x01
    1978:	3a 81       	ldd	r19, Y+2	; 0x02
    197a:	4b 81       	ldd	r20, Y+3	; 0x03
    197c:	5c 81       	ldd	r21, Y+4	; 0x04
    197e:	ca 01       	movw	r24, r20
    1980:	b9 01       	movw	r22, r18
    1982:	0e 94 f4 1e 	call	0x3de8	; 0x3de8 <__mulsi3>
    1986:	4b 01       	movw	r8, r22
    1988:	5c 01       	movw	r10, r24
    198a:	88 0c       	add	r8, r8
    198c:	99 1c       	adc	r9, r9
    198e:	aa 1c       	adc	r10, r10
    1990:	bb 1c       	adc	r11, r11
    1992:	75 01       	movw	r14, r10
    1994:	64 01       	movw	r12, r8
    1996:	ff 0c       	add	r15, r15
    1998:	cc 08       	sbc	r12, r12
    199a:	dc 2c       	mov	r13, r12
    199c:	76 01       	movw	r14, r12
    199e:	18 2d       	mov	r17, r8
    19a0:	9d 8e       	std	Y+29, r9	; 0x1d
    19a2:	ad 82       	std	Y+5, r10	; 0x05
    19a4:	bb 2d       	mov	r27, r11
    19a6:	fc 2d       	mov	r31, r12
    19a8:	ec 2d       	mov	r30, r12
    19aa:	c9 82       	std	Y+1, r12	; 0x01
    19ac:	0c 2d       	mov	r16, r12
    19ae:	28 2d       	mov	r18, r8
    19b0:	39 2d       	mov	r19, r9
    19b2:	4a 2d       	mov	r20, r10
    19b4:	5b 2d       	mov	r21, r11
    19b6:	6c 2d       	mov	r22, r12
    19b8:	7c 2d       	mov	r23, r12
    19ba:	8c 2d       	mov	r24, r12
    19bc:	9c 2d       	mov	r25, r12
    19be:	a0 e0       	ldi	r26, 0x00	; 0
    19c0:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <__cmpdi2_s8>
    19c4:	84 f4       	brge	.+32     	; 0x19e6 <_ZN6MS58379calculateEv+0x954>
    19c6:	21 50       	subi	r18, 0x01	; 1
    19c8:	31 09       	sbc	r19, r1
    19ca:	41 09       	sbc	r20, r1
    19cc:	51 09       	sbc	r21, r1
    19ce:	60 4e       	sbci	r22, 0xE0	; 224
    19d0:	7f 4f       	sbci	r23, 0xFF	; 255
    19d2:	8f 4f       	sbci	r24, 0xFF	; 255
    19d4:	9f 4f       	sbci	r25, 0xFF	; 255
    19d6:	12 2f       	mov	r17, r18
    19d8:	3d 8f       	std	Y+29, r19	; 0x1d
    19da:	4d 83       	std	Y+5, r20	; 0x05
    19dc:	b5 2f       	mov	r27, r21
    19de:	f6 2f       	mov	r31, r22
    19e0:	e7 2f       	mov	r30, r23
    19e2:	89 83       	std	Y+1, r24	; 0x01
    19e4:	09 2f       	mov	r16, r25
    19e6:	21 2f       	mov	r18, r17
    19e8:	3d 8d       	ldd	r19, Y+29	; 0x1d
    19ea:	4d 81       	ldd	r20, Y+5	; 0x05
    19ec:	5b 2f       	mov	r21, r27
    19ee:	6f 2f       	mov	r22, r31
    19f0:	7e 2f       	mov	r23, r30
    19f2:	89 81       	ldd	r24, Y+1	; 0x01
    19f4:	90 2f       	mov	r25, r16
    19f6:	05 e2       	ldi	r16, 0x25	; 37
    19f8:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <__ashrdi3>
    19fc:	2d 83       	std	Y+5, r18	; 0x05
    19fe:	3e 83       	std	Y+6, r19	; 0x06
    1a00:	4f 83       	std	Y+7, r20	; 0x07
    1a02:	58 87       	std	Y+8, r21	; 0x08
			OFFi = (1*(TEMP-2000)*(TEMP-2000))/16;
    1a04:	c3 01       	movw	r24, r6
    1a06:	b2 01       	movw	r22, r4
    1a08:	60 5d       	subi	r22, 0xD0	; 208
    1a0a:	77 40       	sbci	r23, 0x07	; 7
    1a0c:	81 09       	sbc	r24, r1
    1a0e:	91 09       	sbc	r25, r1
    1a10:	9b 01       	movw	r18, r22
    1a12:	ac 01       	movw	r20, r24
    1a14:	0e 94 f4 1e 	call	0x3de8	; 0x3de8 <__mulsi3>
    1a18:	8b 01       	movw	r16, r22
    1a1a:	9c 01       	movw	r18, r24
    1a1c:	99 23       	and	r25, r25
    1a1e:	24 f4       	brge	.+8      	; 0x1a28 <_ZN6MS58379calculateEv+0x996>
    1a20:	01 5f       	subi	r16, 0xF1	; 241
    1a22:	1f 4f       	sbci	r17, 0xFF	; 255
    1a24:	2f 4f       	sbci	r18, 0xFF	; 255
    1a26:	3f 4f       	sbci	r19, 0xFF	; 255
    1a28:	48 01       	movw	r8, r16
    1a2a:	59 01       	movw	r10, r18
    1a2c:	68 94       	set
    1a2e:	13 f8       	bld	r1, 3
    1a30:	b5 94       	asr	r11
    1a32:	a7 94       	ror	r10
    1a34:	97 94       	ror	r9
    1a36:	87 94       	ror	r8
    1a38:	16 94       	lsr	r1
    1a3a:	d1 f7       	brne	.-12     	; 0x1a30 <_ZN6MS58379calculateEv+0x99e>
    1a3c:	89 82       	std	Y+1, r8	; 0x01
    1a3e:	9a 82       	std	Y+2, r9	; 0x02
    1a40:	ab 82       	std	Y+3, r10	; 0x03
    1a42:	bc 82       	std	Y+4, r11	; 0x04
			SENSi = 0;
    1a44:	e1 2c       	mov	r14, r1
    1a46:	f1 2c       	mov	r15, r1
    1a48:	87 01       	movw	r16, r14
    1a4a:	d5 c0       	rjmp	.+426    	; 0x1bf6 <_ZN6MS58379calculateEv+0xb64>
	}
	
	OFF2 = OFF-OFFi;           //Calculate pressure and temp second order
	SENS2 = SENS-SENSi;
	
	TEMP = (TEMP-Ti);
    1a4c:	d3 01       	movw	r26, r6
    1a4e:	c2 01       	movw	r24, r4
    1a50:	88 19       	sub	r24, r8
    1a52:	99 09       	sbc	r25, r9
    1a54:	aa 09       	sbc	r26, r10
    1a56:	bb 09       	sbc	r27, r11
    1a58:	f1 01       	movw	r30, r2
    1a5a:	80 8f       	std	Z+24, r24	; 0x18
    1a5c:	91 8f       	std	Z+25, r25	; 0x19
    1a5e:	a2 8f       	std	Z+26, r26	; 0x1a
    1a60:	b3 8f       	std	Z+27, r27	; 0x1b
	
	if ( _model == MS5837_02BA ) {
		P = (((D1*SENS2)/2097152l-OFF2)/32768l);
    1a62:	80 89       	ldd	r24, Z+16	; 0x10
    1a64:	91 89       	ldd	r25, Z+17	; 0x11
    1a66:	a2 89       	ldd	r26, Z+18	; 0x12
    1a68:	b3 89       	ldd	r27, Z+19	; 0x13
    1a6a:	3c 01       	movw	r6, r24
    1a6c:	4d 01       	movw	r8, r26
    1a6e:	a1 2c       	mov	r10, r1
    1a70:	b1 2c       	mov	r11, r1
    1a72:	65 01       	movw	r12, r10
    1a74:	8d 83       	std	Y+5, r24	; 0x05
    1a76:	7e 82       	std	Y+6, r7	; 0x06
    1a78:	8f 82       	std	Y+7, r8	; 0x07
    1a7a:	98 86       	std	Y+8, r9	; 0x08
    1a7c:	a9 86       	std	Y+9, r10	; 0x09
    1a7e:	ba 86       	std	Y+10, r11	; 0x0a
    1a80:	cb 86       	std	Y+11, r12	; 0x0b
    1a82:	dc 86       	std	Y+12, r13	; 0x0c
    1a84:	27 01       	movw	r4, r14
    1a86:	38 01       	movw	r6, r16
    1a88:	77 0c       	add	r7, r7
    1a8a:	44 08       	sbc	r4, r4
    1a8c:	54 2c       	mov	r5, r4
    1a8e:	32 01       	movw	r6, r4
    1a90:	2d 85       	ldd	r18, Y+13	; 0x0d
    1a92:	3e 85       	ldd	r19, Y+14	; 0x0e
    1a94:	4f 85       	ldd	r20, Y+15	; 0x0f
    1a96:	58 89       	ldd	r21, Y+16	; 0x10
    1a98:	69 89       	ldd	r22, Y+17	; 0x11
    1a9a:	7a 89       	ldd	r23, Y+18	; 0x12
    1a9c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a9e:	9c 89       	ldd	r25, Y+20	; 0x14
    1aa0:	ae 2c       	mov	r10, r14
    1aa2:	bf 2c       	mov	r11, r15
    1aa4:	c0 2e       	mov	r12, r16
    1aa6:	d1 2e       	mov	r13, r17
    1aa8:	e4 2c       	mov	r14, r4
    1aaa:	f4 2c       	mov	r15, r4
    1aac:	04 2d       	mov	r16, r4
    1aae:	14 2d       	mov	r17, r4
    1ab0:	0e 94 e3 1f 	call	0x3fc6	; 0x3fc6 <__subdi3>
    1ab4:	a2 2e       	mov	r10, r18
    1ab6:	b3 2e       	mov	r11, r19
    1ab8:	c4 2e       	mov	r12, r20
    1aba:	d5 2e       	mov	r13, r21
    1abc:	e6 2e       	mov	r14, r22
    1abe:	f7 2e       	mov	r15, r23
    1ac0:	08 2f       	mov	r16, r24
    1ac2:	19 2f       	mov	r17, r25
    1ac4:	2d 81       	ldd	r18, Y+5	; 0x05
    1ac6:	3e 81       	ldd	r19, Y+6	; 0x06
    1ac8:	48 2d       	mov	r20, r8
    1aca:	59 2d       	mov	r21, r9
    1acc:	60 e0       	ldi	r22, 0x00	; 0
    1ace:	70 e0       	ldi	r23, 0x00	; 0
    1ad0:	80 e0       	ldi	r24, 0x00	; 0
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <__muldi3>
    1ad8:	12 2f       	mov	r17, r18
    1ada:	3d 87       	std	Y+13, r19	; 0x0d
    1adc:	4d 83       	std	Y+5, r20	; 0x05
    1ade:	b5 2f       	mov	r27, r21
    1ae0:	f6 2f       	mov	r31, r22
    1ae2:	e7 2f       	mov	r30, r23
    1ae4:	78 2e       	mov	r7, r24
    1ae6:	89 2e       	mov	r8, r25
    1ae8:	a0 e0       	ldi	r26, 0x00	; 0
    1aea:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <__cmpdi2_s8>
    1aee:	84 f4       	brge	.+32     	; 0x1b10 <_ZN6MS58379calculateEv+0xa7e>
    1af0:	21 50       	subi	r18, 0x01	; 1
    1af2:	31 09       	sbc	r19, r1
    1af4:	40 4e       	sbci	r20, 0xE0	; 224
    1af6:	5f 4f       	sbci	r21, 0xFF	; 255
    1af8:	6f 4f       	sbci	r22, 0xFF	; 255
    1afa:	7f 4f       	sbci	r23, 0xFF	; 255
    1afc:	8f 4f       	sbci	r24, 0xFF	; 255
    1afe:	9f 4f       	sbci	r25, 0xFF	; 255
    1b00:	12 2f       	mov	r17, r18
    1b02:	3d 87       	std	Y+13, r19	; 0x0d
    1b04:	4d 83       	std	Y+5, r20	; 0x05
    1b06:	b5 2f       	mov	r27, r21
    1b08:	f6 2f       	mov	r31, r22
    1b0a:	e7 2f       	mov	r30, r23
    1b0c:	78 2e       	mov	r7, r24
    1b0e:	89 2e       	mov	r8, r25
    1b10:	21 2f       	mov	r18, r17
    1b12:	3d 85       	ldd	r19, Y+13	; 0x0d
    1b14:	4d 81       	ldd	r20, Y+5	; 0x05
    1b16:	5b 2f       	mov	r21, r27
    1b18:	6f 2f       	mov	r22, r31
    1b1a:	7e 2f       	mov	r23, r30
    1b1c:	87 2d       	mov	r24, r7
    1b1e:	98 2d       	mov	r25, r8
    1b20:	05 e1       	ldi	r16, 0x15	; 21
    1b22:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <__ashrdi3>
    1b26:	82 2e       	mov	r8, r18
    1b28:	93 2e       	mov	r9, r19
    1b2a:	4d 87       	std	Y+13, r20	; 0x0d
    1b2c:	5d 83       	std	Y+5, r21	; 0x05
    1b2e:	b6 2f       	mov	r27, r22
    1b30:	a7 2f       	mov	r26, r23
    1b32:	f8 2f       	mov	r31, r24
    1b34:	e9 2f       	mov	r30, r25
    1b36:	49 80       	ldd	r4, Y+1	; 0x01
    1b38:	5a 80       	ldd	r5, Y+2	; 0x02
    1b3a:	6b 80       	ldd	r6, Y+3	; 0x03
    1b3c:	7c 80       	ldd	r7, Y+4	; 0x04
    1b3e:	77 0c       	add	r7, r7
    1b40:	44 08       	sbc	r4, r4
    1b42:	54 2c       	mov	r5, r4
    1b44:	32 01       	movw	r6, r4
    1b46:	2d 89       	ldd	r18, Y+21	; 0x15
    1b48:	3e 89       	ldd	r19, Y+22	; 0x16
    1b4a:	4f 89       	ldd	r20, Y+23	; 0x17
    1b4c:	58 8d       	ldd	r21, Y+24	; 0x18
    1b4e:	69 8d       	ldd	r22, Y+25	; 0x19
    1b50:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b52:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b54:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b56:	a9 80       	ldd	r10, Y+1	; 0x01
    1b58:	ba 80       	ldd	r11, Y+2	; 0x02
    1b5a:	cb 80       	ldd	r12, Y+3	; 0x03
    1b5c:	dc 80       	ldd	r13, Y+4	; 0x04
    1b5e:	e4 2c       	mov	r14, r4
    1b60:	f4 2c       	mov	r15, r4
    1b62:	04 2d       	mov	r16, r4
    1b64:	14 2d       	mov	r17, r4
    1b66:	0e 94 e3 1f 	call	0x3fc6	; 0x3fc6 <__subdi3>
    1b6a:	a2 2e       	mov	r10, r18
    1b6c:	b3 2e       	mov	r11, r19
    1b6e:	c4 2e       	mov	r12, r20
    1b70:	d5 2e       	mov	r13, r21
    1b72:	e6 2e       	mov	r14, r22
    1b74:	f7 2e       	mov	r15, r23
    1b76:	08 2f       	mov	r16, r24
    1b78:	19 2f       	mov	r17, r25
    1b7a:	28 2d       	mov	r18, r8
    1b7c:	39 2d       	mov	r19, r9
    1b7e:	4d 85       	ldd	r20, Y+13	; 0x0d
    1b80:	5d 81       	ldd	r21, Y+5	; 0x05
    1b82:	6b 2f       	mov	r22, r27
    1b84:	7a 2f       	mov	r23, r26
    1b86:	8f 2f       	mov	r24, r31
    1b88:	9e 2f       	mov	r25, r30
    1b8a:	0e 94 e3 1f 	call	0x3fc6	; 0x3fc6 <__subdi3>
    1b8e:	12 2f       	mov	r17, r18
    1b90:	3d 83       	std	Y+5, r19	; 0x05
    1b92:	49 83       	std	Y+1, r20	; 0x01
    1b94:	b5 2f       	mov	r27, r21
    1b96:	f6 2f       	mov	r31, r22
    1b98:	e7 2f       	mov	r30, r23
    1b9a:	78 2e       	mov	r7, r24
    1b9c:	89 2e       	mov	r8, r25
    1b9e:	a0 e0       	ldi	r26, 0x00	; 0
    1ba0:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <__cmpdi2_s8>
    1ba4:	84 f4       	brge	.+32     	; 0x1bc6 <_ZN6MS58379calculateEv+0xb34>
    1ba6:	21 50       	subi	r18, 0x01	; 1
    1ba8:	30 48       	sbci	r19, 0x80	; 128
    1baa:	4f 4f       	sbci	r20, 0xFF	; 255
    1bac:	5f 4f       	sbci	r21, 0xFF	; 255
    1bae:	6f 4f       	sbci	r22, 0xFF	; 255
    1bb0:	7f 4f       	sbci	r23, 0xFF	; 255
    1bb2:	8f 4f       	sbci	r24, 0xFF	; 255
    1bb4:	9f 4f       	sbci	r25, 0xFF	; 255
    1bb6:	12 2f       	mov	r17, r18
    1bb8:	3d 83       	std	Y+5, r19	; 0x05
    1bba:	49 83       	std	Y+1, r20	; 0x01
    1bbc:	b5 2f       	mov	r27, r21
    1bbe:	f6 2f       	mov	r31, r22
    1bc0:	e7 2f       	mov	r30, r23
    1bc2:	78 2e       	mov	r7, r24
    1bc4:	89 2e       	mov	r8, r25
    1bc6:	21 2f       	mov	r18, r17
    1bc8:	3d 81       	ldd	r19, Y+5	; 0x05
    1bca:	49 81       	ldd	r20, Y+1	; 0x01
    1bcc:	5b 2f       	mov	r21, r27
    1bce:	6f 2f       	mov	r22, r31
    1bd0:	7e 2f       	mov	r23, r30
    1bd2:	87 2d       	mov	r24, r7
    1bd4:	98 2d       	mov	r25, r8
    1bd6:	0f e0       	ldi	r16, 0x0F	; 15
    1bd8:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <__ashrdi3>
    1bdc:	d1 01       	movw	r26, r2
    1bde:	5c 96       	adiw	r26, 0x1c	; 28
    1be0:	2c 93       	st	X, r18
    1be2:	5c 97       	sbiw	r26, 0x1c	; 28
    1be4:	5d 96       	adiw	r26, 0x1d	; 29
    1be6:	3c 93       	st	X, r19
    1be8:	5d 97       	sbiw	r26, 0x1d	; 29
    1bea:	5e 96       	adiw	r26, 0x1e	; 30
    1bec:	4c 93       	st	X, r20
    1bee:	5e 97       	sbiw	r26, 0x1e	; 30
    1bf0:	5f 96       	adiw	r26, 0x1f	; 31
    1bf2:	5c 93       	st	X, r21
    1bf4:	da c0       	rjmp	.+436    	; 0x1daa <_ZN6MS58379calculateEv+0xd18>
	}
	
	OFF2 = OFF-OFFi;           //Calculate pressure and temp second order
	SENS2 = SENS-SENSi;
	
	TEMP = (TEMP-Ti);
    1bf6:	8d 80       	ldd	r8, Y+5	; 0x05
    1bf8:	9e 80       	ldd	r9, Y+6	; 0x06
    1bfa:	af 80       	ldd	r10, Y+7	; 0x07
    1bfc:	b8 84       	ldd	r11, Y+8	; 0x08
    1bfe:	48 18       	sub	r4, r8
    1c00:	59 08       	sbc	r5, r9
    1c02:	6a 08       	sbc	r6, r10
    1c04:	7b 08       	sbc	r7, r11
    1c06:	d1 01       	movw	r26, r2
    1c08:	58 96       	adiw	r26, 0x18	; 24
    1c0a:	4d 92       	st	X+, r4
    1c0c:	5d 92       	st	X+, r5
    1c0e:	6d 92       	st	X+, r6
    1c10:	7c 92       	st	X, r7
    1c12:	5b 97       	sbiw	r26, 0x1b	; 27
	
	if ( _model == MS5837_02BA ) {
		P = (((D1*SENS2)/2097152l-OFF2)/32768l);
	} else {
		P = (((D1*SENS2)/2097152l-OFF2)/8192l);
    1c14:	50 96       	adiw	r26, 0x10	; 16
    1c16:	8d 91       	ld	r24, X+
    1c18:	9d 91       	ld	r25, X+
    1c1a:	0d 90       	ld	r0, X+
    1c1c:	bc 91       	ld	r27, X
    1c1e:	a0 2d       	mov	r26, r0
    1c20:	3c 01       	movw	r6, r24
    1c22:	4d 01       	movw	r8, r26
    1c24:	a1 2c       	mov	r10, r1
    1c26:	b1 2c       	mov	r11, r1
    1c28:	65 01       	movw	r12, r10
    1c2a:	8d 83       	std	Y+5, r24	; 0x05
    1c2c:	7e 82       	std	Y+6, r7	; 0x06
    1c2e:	8f 82       	std	Y+7, r8	; 0x07
    1c30:	98 86       	std	Y+8, r9	; 0x08
    1c32:	a9 86       	std	Y+9, r10	; 0x09
    1c34:	ba 86       	std	Y+10, r11	; 0x0a
    1c36:	cb 86       	std	Y+11, r12	; 0x0b
    1c38:	dc 86       	std	Y+12, r13	; 0x0c
    1c3a:	27 01       	movw	r4, r14
    1c3c:	38 01       	movw	r6, r16
    1c3e:	77 0c       	add	r7, r7
    1c40:	44 08       	sbc	r4, r4
    1c42:	54 2c       	mov	r5, r4
    1c44:	32 01       	movw	r6, r4
    1c46:	2d 89       	ldd	r18, Y+21	; 0x15
    1c48:	3e 89       	ldd	r19, Y+22	; 0x16
    1c4a:	4f 89       	ldd	r20, Y+23	; 0x17
    1c4c:	58 8d       	ldd	r21, Y+24	; 0x18
    1c4e:	69 8d       	ldd	r22, Y+25	; 0x19
    1c50:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c52:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c54:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c56:	ae 2c       	mov	r10, r14
    1c58:	bf 2c       	mov	r11, r15
    1c5a:	c0 2e       	mov	r12, r16
    1c5c:	d1 2e       	mov	r13, r17
    1c5e:	e4 2c       	mov	r14, r4
    1c60:	f4 2c       	mov	r15, r4
    1c62:	04 2d       	mov	r16, r4
    1c64:	14 2d       	mov	r17, r4
    1c66:	0e 94 e3 1f 	call	0x3fc6	; 0x3fc6 <__subdi3>
    1c6a:	a2 2e       	mov	r10, r18
    1c6c:	b3 2e       	mov	r11, r19
    1c6e:	c4 2e       	mov	r12, r20
    1c70:	d5 2e       	mov	r13, r21
    1c72:	e6 2e       	mov	r14, r22
    1c74:	f7 2e       	mov	r15, r23
    1c76:	08 2f       	mov	r16, r24
    1c78:	19 2f       	mov	r17, r25
    1c7a:	2d 81       	ldd	r18, Y+5	; 0x05
    1c7c:	3e 81       	ldd	r19, Y+6	; 0x06
    1c7e:	48 2d       	mov	r20, r8
    1c80:	59 2d       	mov	r21, r9
    1c82:	60 e0       	ldi	r22, 0x00	; 0
    1c84:	70 e0       	ldi	r23, 0x00	; 0
    1c86:	80 e0       	ldi	r24, 0x00	; 0
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <__muldi3>
    1c8e:	12 2f       	mov	r17, r18
    1c90:	3d 8b       	std	Y+21, r19	; 0x15
    1c92:	4d 83       	std	Y+5, r20	; 0x05
    1c94:	b5 2f       	mov	r27, r21
    1c96:	f6 2f       	mov	r31, r22
    1c98:	e7 2f       	mov	r30, r23
    1c9a:	58 2e       	mov	r5, r24
    1c9c:	69 2e       	mov	r6, r25
    1c9e:	a0 e0       	ldi	r26, 0x00	; 0
    1ca0:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <__cmpdi2_s8>
    1ca4:	84 f4       	brge	.+32     	; 0x1cc6 <_ZN6MS58379calculateEv+0xc34>
    1ca6:	21 50       	subi	r18, 0x01	; 1
    1ca8:	31 09       	sbc	r19, r1
    1caa:	40 4e       	sbci	r20, 0xE0	; 224
    1cac:	5f 4f       	sbci	r21, 0xFF	; 255
    1cae:	6f 4f       	sbci	r22, 0xFF	; 255
    1cb0:	7f 4f       	sbci	r23, 0xFF	; 255
    1cb2:	8f 4f       	sbci	r24, 0xFF	; 255
    1cb4:	9f 4f       	sbci	r25, 0xFF	; 255
    1cb6:	12 2f       	mov	r17, r18
    1cb8:	3d 8b       	std	Y+21, r19	; 0x15
    1cba:	4d 83       	std	Y+5, r20	; 0x05
    1cbc:	b5 2f       	mov	r27, r21
    1cbe:	f6 2f       	mov	r31, r22
    1cc0:	e7 2f       	mov	r30, r23
    1cc2:	58 2e       	mov	r5, r24
    1cc4:	69 2e       	mov	r6, r25
    1cc6:	21 2f       	mov	r18, r17
    1cc8:	3d 89       	ldd	r19, Y+21	; 0x15
    1cca:	4d 81       	ldd	r20, Y+5	; 0x05
    1ccc:	5b 2f       	mov	r21, r27
    1cce:	6f 2f       	mov	r22, r31
    1cd0:	7e 2f       	mov	r23, r30
    1cd2:	85 2d       	mov	r24, r5
    1cd4:	96 2d       	mov	r25, r6
    1cd6:	05 e1       	ldi	r16, 0x15	; 21
    1cd8:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <__ashrdi3>
    1cdc:	82 2e       	mov	r8, r18
    1cde:	93 2e       	mov	r9, r19
    1ce0:	4d 8b       	std	Y+21, r20	; 0x15
    1ce2:	5d 83       	std	Y+5, r21	; 0x05
    1ce4:	b6 2f       	mov	r27, r22
    1ce6:	a7 2f       	mov	r26, r23
    1ce8:	f8 2f       	mov	r31, r24
    1cea:	e9 2f       	mov	r30, r25
    1cec:	49 80       	ldd	r4, Y+1	; 0x01
    1cee:	5a 80       	ldd	r5, Y+2	; 0x02
    1cf0:	6b 80       	ldd	r6, Y+3	; 0x03
    1cf2:	7c 80       	ldd	r7, Y+4	; 0x04
    1cf4:	77 0c       	add	r7, r7
    1cf6:	44 08       	sbc	r4, r4
    1cf8:	54 2c       	mov	r5, r4
    1cfa:	32 01       	movw	r6, r4
    1cfc:	2d 85       	ldd	r18, Y+13	; 0x0d
    1cfe:	3e 85       	ldd	r19, Y+14	; 0x0e
    1d00:	4f 85       	ldd	r20, Y+15	; 0x0f
    1d02:	58 89       	ldd	r21, Y+16	; 0x10
    1d04:	69 89       	ldd	r22, Y+17	; 0x11
    1d06:	7a 89       	ldd	r23, Y+18	; 0x12
    1d08:	8b 89       	ldd	r24, Y+19	; 0x13
    1d0a:	9c 89       	ldd	r25, Y+20	; 0x14
    1d0c:	a9 80       	ldd	r10, Y+1	; 0x01
    1d0e:	ba 80       	ldd	r11, Y+2	; 0x02
    1d10:	cb 80       	ldd	r12, Y+3	; 0x03
    1d12:	dc 80       	ldd	r13, Y+4	; 0x04
    1d14:	e4 2c       	mov	r14, r4
    1d16:	f4 2c       	mov	r15, r4
    1d18:	04 2d       	mov	r16, r4
    1d1a:	14 2d       	mov	r17, r4
    1d1c:	0e 94 e3 1f 	call	0x3fc6	; 0x3fc6 <__subdi3>
    1d20:	a2 2e       	mov	r10, r18
    1d22:	b3 2e       	mov	r11, r19
    1d24:	c4 2e       	mov	r12, r20
    1d26:	d5 2e       	mov	r13, r21
    1d28:	e6 2e       	mov	r14, r22
    1d2a:	f7 2e       	mov	r15, r23
    1d2c:	08 2f       	mov	r16, r24
    1d2e:	19 2f       	mov	r17, r25
    1d30:	28 2d       	mov	r18, r8
    1d32:	39 2d       	mov	r19, r9
    1d34:	4d 89       	ldd	r20, Y+21	; 0x15
    1d36:	5d 81       	ldd	r21, Y+5	; 0x05
    1d38:	6b 2f       	mov	r22, r27
    1d3a:	7a 2f       	mov	r23, r26
    1d3c:	8f 2f       	mov	r24, r31
    1d3e:	9e 2f       	mov	r25, r30
    1d40:	0e 94 e3 1f 	call	0x3fc6	; 0x3fc6 <__subdi3>
    1d44:	92 2e       	mov	r9, r18
    1d46:	a3 2e       	mov	r10, r19
    1d48:	b4 2e       	mov	r11, r20
    1d4a:	c5 2e       	mov	r12, r21
    1d4c:	d6 2e       	mov	r13, r22
    1d4e:	e7 2e       	mov	r14, r23
    1d50:	78 2e       	mov	r7, r24
    1d52:	89 2e       	mov	r8, r25
    1d54:	a0 e0       	ldi	r26, 0x00	; 0
    1d56:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <__cmpdi2_s8>
    1d5a:	84 f4       	brge	.+32     	; 0x1d7c <_ZN6MS58379calculateEv+0xcea>
    1d5c:	21 50       	subi	r18, 0x01	; 1
    1d5e:	30 4e       	sbci	r19, 0xE0	; 224
    1d60:	4f 4f       	sbci	r20, 0xFF	; 255
    1d62:	5f 4f       	sbci	r21, 0xFF	; 255
    1d64:	6f 4f       	sbci	r22, 0xFF	; 255
    1d66:	7f 4f       	sbci	r23, 0xFF	; 255
    1d68:	8f 4f       	sbci	r24, 0xFF	; 255
    1d6a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d6c:	92 2e       	mov	r9, r18
    1d6e:	a3 2e       	mov	r10, r19
    1d70:	b4 2e       	mov	r11, r20
    1d72:	c5 2e       	mov	r12, r21
    1d74:	d6 2e       	mov	r13, r22
    1d76:	e7 2e       	mov	r14, r23
    1d78:	78 2e       	mov	r7, r24
    1d7a:	89 2e       	mov	r8, r25
    1d7c:	29 2d       	mov	r18, r9
    1d7e:	3a 2d       	mov	r19, r10
    1d80:	4b 2d       	mov	r20, r11
    1d82:	5c 2d       	mov	r21, r12
    1d84:	6d 2d       	mov	r22, r13
    1d86:	7e 2d       	mov	r23, r14
    1d88:	87 2d       	mov	r24, r7
    1d8a:	98 2d       	mov	r25, r8
    1d8c:	0d e0       	ldi	r16, 0x0D	; 13
    1d8e:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <__ashrdi3>
    1d92:	d1 01       	movw	r26, r2
    1d94:	5c 96       	adiw	r26, 0x1c	; 28
    1d96:	2c 93       	st	X, r18
    1d98:	5c 97       	sbiw	r26, 0x1c	; 28
    1d9a:	5d 96       	adiw	r26, 0x1d	; 29
    1d9c:	3c 93       	st	X, r19
    1d9e:	5d 97       	sbiw	r26, 0x1d	; 29
    1da0:	5e 96       	adiw	r26, 0x1e	; 30
    1da2:	4c 93       	st	X, r20
    1da4:	5e 97       	sbiw	r26, 0x1e	; 30
    1da6:	5f 96       	adiw	r26, 0x1f	; 31
    1da8:	5c 93       	st	X, r21
	}
}
    1daa:	a5 96       	adiw	r28, 0x25	; 37
    1dac:	0f b6       	in	r0, 0x3f	; 63
    1dae:	f8 94       	cli
    1db0:	de bf       	out	0x3e, r29	; 62
    1db2:	0f be       	out	0x3f, r0	; 63
    1db4:	cd bf       	out	0x3d, r28	; 61
    1db6:	df 91       	pop	r29
    1db8:	cf 91       	pop	r28
    1dba:	1f 91       	pop	r17
    1dbc:	0f 91       	pop	r16
    1dbe:	ff 90       	pop	r15
    1dc0:	ef 90       	pop	r14
    1dc2:	df 90       	pop	r13
    1dc4:	cf 90       	pop	r12
    1dc6:	bf 90       	pop	r11
    1dc8:	af 90       	pop	r10
    1dca:	9f 90       	pop	r9
    1dcc:	8f 90       	pop	r8
    1dce:	7f 90       	pop	r7
    1dd0:	6f 90       	pop	r6
    1dd2:	5f 90       	pop	r5
    1dd4:	4f 90       	pop	r4
    1dd6:	3f 90       	pop	r3
    1dd8:	2f 90       	pop	r2
    1dda:	08 95       	ret

00001ddc <_ZN6MS58378pressureEf>:

float MS5837::pressure(float conversion) {
    1ddc:	cf 92       	push	r12
    1dde:	df 92       	push	r13
    1de0:	ef 92       	push	r14
    1de2:	ff 92       	push	r15
    1de4:	6a 01       	movw	r12, r20
    1de6:	7b 01       	movw	r14, r22
	if ( _model == MS5837_02BA ) {
    1de8:	fc 01       	movw	r30, r24
    1dea:	20 a1       	ldd	r18, Z+32	; 0x20
    1dec:	21 30       	cpi	r18, 0x01	; 1
    1dee:	89 f4       	brne	.+34     	; 0x1e12 <_ZN6MS58378pressureEf+0x36>
		return P*conversion/100.0f;
    1df0:	64 8d       	ldd	r22, Z+28	; 0x1c
    1df2:	75 8d       	ldd	r23, Z+29	; 0x1d
    1df4:	86 8d       	ldd	r24, Z+30	; 0x1e
    1df6:	97 8d       	ldd	r25, Z+31	; 0x1f
    1df8:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <__floatsisf>
    1dfc:	a7 01       	movw	r20, r14
    1dfe:	96 01       	movw	r18, r12
    1e00:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <__mulsf3>
    1e04:	20 e0       	ldi	r18, 0x00	; 0
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	48 ec       	ldi	r20, 0xC8	; 200
    1e0a:	52 e4       	ldi	r21, 0x42	; 66
    1e0c:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <__divsf3>
    1e10:	11 c0       	rjmp	.+34     	; 0x1e34 <_ZN6MS58378pressureEf+0x58>
	}
	else {
		return P*conversion/10.0f;
    1e12:	fc 01       	movw	r30, r24
    1e14:	64 8d       	ldd	r22, Z+28	; 0x1c
    1e16:	75 8d       	ldd	r23, Z+29	; 0x1d
    1e18:	86 8d       	ldd	r24, Z+30	; 0x1e
    1e1a:	97 8d       	ldd	r25, Z+31	; 0x1f
    1e1c:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <__floatsisf>
    1e20:	a7 01       	movw	r20, r14
    1e22:	96 01       	movw	r18, r12
    1e24:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <__mulsf3>
    1e28:	20 e0       	ldi	r18, 0x00	; 0
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	40 e2       	ldi	r20, 0x20	; 32
    1e2e:	51 e4       	ldi	r21, 0x41	; 65
    1e30:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <__divsf3>
	}
}
    1e34:	ff 90       	pop	r15
    1e36:	ef 90       	pop	r14
    1e38:	df 90       	pop	r13
    1e3a:	cf 90       	pop	r12
    1e3c:	08 95       	ret

00001e3e <_ZN6MS583711temperatureEv>:

float MS5837::temperature() {
	return TEMP/100.0f;
    1e3e:	fc 01       	movw	r30, r24
    1e40:	60 8d       	ldd	r22, Z+24	; 0x18
    1e42:	71 8d       	ldd	r23, Z+25	; 0x19
    1e44:	82 8d       	ldd	r24, Z+26	; 0x1a
    1e46:	93 8d       	ldd	r25, Z+27	; 0x1b
    1e48:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <__floatsisf>
    1e4c:	20 e0       	ldi	r18, 0x00	; 0
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	48 ec       	ldi	r20, 0xC8	; 200
    1e52:	52 e4       	ldi	r21, 0x42	; 66
    1e54:	0c 94 47 1d 	jmp	0x3a8e	; 0x3a8e <__divsf3>
}
    1e58:	08 95       	ret

00001e5a <_ZN6MS58374crc4EPj>:
float MS5837::altitude() {
	return (1-pow((pressure()/1013.25),.190284))*145366.45*.3048;
}*/


uint8_t MS5837::crc4(uint16_t n_prom[]) {
    1e5a:	cf 93       	push	r28
    1e5c:	df 93       	push	r29
    1e5e:	eb 01       	movw	r28, r22
	uint16_t n_rem = 0;

	n_prom[0] = ((n_prom[0]) & 0x0FFF);
    1e60:	88 81       	ld	r24, Y
    1e62:	99 81       	ldd	r25, Y+1	; 0x01
    1e64:	9f 70       	andi	r25, 0x0F	; 15
    1e66:	99 83       	std	Y+1, r25	; 0x01
    1e68:	88 83       	st	Y, r24
	n_prom[7] = 0;
    1e6a:	1f 86       	std	Y+15, r1	; 0x0f
    1e6c:	1e 86       	std	Y+14, r1	; 0x0e
    1e6e:	40 e0       	ldi	r20, 0x00	; 0
    1e70:	50 e0       	ldi	r21, 0x00	; 0
	return (1-pow((pressure()/1013.25),.190284))*145366.45*.3048;
}*/


uint8_t MS5837::crc4(uint16_t n_prom[]) {
	uint16_t n_rem = 0;
    1e72:	80 e0       	ldi	r24, 0x00	; 0
    1e74:	90 e0       	ldi	r25, 0x00	; 0

	n_prom[0] = ((n_prom[0]) & 0x0FFF);
	n_prom[7] = 0;

	for ( uint8_t i = 0 ; i < 16; i++ ) {
		if ( i%2 == 1 ) {
    1e76:	40 ff       	sbrs	r20, 0
    1e78:	07 c0       	rjmp	.+14     	; 0x1e88 <_ZN6MS58374crc4EPj+0x2e>
			n_rem ^= (uint16_t)((n_prom[i>>1]) & 0x00FF);
    1e7a:	fa 01       	movw	r30, r20
    1e7c:	ee 7f       	andi	r30, 0xFE	; 254
    1e7e:	ec 0f       	add	r30, r28
    1e80:	fd 1f       	adc	r31, r29
    1e82:	20 81       	ld	r18, Z
    1e84:	82 27       	eor	r24, r18
    1e86:	1d c0       	rjmp	.+58     	; 0x1ec2 <_ZN6MS58374crc4EPj+0x68>
			} else {
			n_rem ^= (uint16_t)(n_prom[i>>1] >> 8);
    1e88:	fa 01       	movw	r30, r20
    1e8a:	ee 7f       	andi	r30, 0xFE	; 254
    1e8c:	ec 0f       	add	r30, r28
    1e8e:	fd 1f       	adc	r31, r29
    1e90:	a1 81       	ldd	r26, Z+1	; 0x01
    1e92:	b0 e0       	ldi	r27, 0x00	; 0
    1e94:	8a 27       	eor	r24, r26
    1e96:	9b 27       	eor	r25, r27
    1e98:	14 c0       	rjmp	.+40     	; 0x1ec2 <_ZN6MS58374crc4EPj+0x68>
		}
		for ( uint8_t n_bit = 8 ; n_bit > 0 ; n_bit-- ) {
			if ( n_rem & 0x8000 ) {
    1e9a:	99 23       	and	r25, r25
    1e9c:	2c f4       	brge	.+10     	; 0x1ea8 <_ZN6MS58374crc4EPj+0x4e>
				n_rem = (n_rem << 1) ^ 0x3000;
    1e9e:	88 0f       	add	r24, r24
    1ea0:	99 1f       	adc	r25, r25
    1ea2:	30 e3       	ldi	r19, 0x30	; 48
    1ea4:	93 27       	eor	r25, r19
    1ea6:	02 c0       	rjmp	.+4      	; 0x1eac <_ZN6MS58374crc4EPj+0x52>
				} else {
				n_rem = (n_rem << 1);
    1ea8:	88 0f       	add	r24, r24
    1eaa:	99 1f       	adc	r25, r25
    1eac:	21 50       	subi	r18, 0x01	; 1
		if ( i%2 == 1 ) {
			n_rem ^= (uint16_t)((n_prom[i>>1]) & 0x00FF);
			} else {
			n_rem ^= (uint16_t)(n_prom[i>>1] >> 8);
		}
		for ( uint8_t n_bit = 8 ; n_bit > 0 ; n_bit-- ) {
    1eae:	a9 f7       	brne	.-22     	; 0x1e9a <_ZN6MS58374crc4EPj+0x40>
    1eb0:	4f 5f       	subi	r20, 0xFF	; 255
    1eb2:	5f 4f       	sbci	r21, 0xFF	; 255
	uint16_t n_rem = 0;

	n_prom[0] = ((n_prom[0]) & 0x0FFF);
	n_prom[7] = 0;

	for ( uint8_t i = 0 ; i < 16; i++ ) {
    1eb4:	40 31       	cpi	r20, 0x10	; 16
    1eb6:	51 05       	cpc	r21, r1
    1eb8:	f1 f6       	brne	.-68     	; 0x1e76 <_ZN6MS58374crc4EPj+0x1c>
		}
	}
	
	n_rem = ((n_rem >> 12) & 0x000F);

	return n_rem ^ 0x00;
    1eba:	89 2f       	mov	r24, r25
    1ebc:	82 95       	swap	r24
    1ebe:	8f 70       	andi	r24, 0x0F	; 15
    1ec0:	02 c0       	rjmp	.+4      	; 0x1ec6 <_ZN6MS58374crc4EPj+0x6c>
	return (1-pow((pressure()/1013.25),.190284))*145366.45*.3048;
}*/


uint8_t MS5837::crc4(uint16_t n_prom[]) {
	uint16_t n_rem = 0;
    1ec2:	28 e0       	ldi	r18, 0x08	; 8
    1ec4:	ea cf       	rjmp	.-44     	; 0x1e9a <_ZN6MS58374crc4EPj+0x40>
	}
	
	n_rem = ((n_rem >> 12) & 0x000F);

	return n_rem ^ 0x00;
    1ec6:	df 91       	pop	r29
    1ec8:	cf 91       	pop	r28
    1eca:	08 95       	ret

00001ecc <_ZN6MS58375beginEv>:

MS5837::MS5837(HardwareTimer &timer) : _timer(&timer) {
	fluidDensity = 1029;
}

bool MS5837::begin() {
    1ecc:	cf 92       	push	r12
    1ece:	df 92       	push	r13
    1ed0:	ef 92       	push	r14
    1ed2:	ff 92       	push	r15
    1ed4:	0f 93       	push	r16
    1ed6:	1f 93       	push	r17
    1ed8:	cf 93       	push	r28
    1eda:	df 93       	push	r29
    1edc:	6c 01       	movw	r12, r24
	Wire.begin();
    1ede:	87 e6       	ldi	r24, 0x67	; 103
    1ee0:	96 e0       	ldi	r25, 0x06	; 6
    1ee2:	0e 94 78 19 	call	0x32f0	; 0x32f0 <_ZN7TwoWire5beginEv>
	_timer->beginMs(10);
    1ee6:	40 e0       	ldi	r20, 0x00	; 0
    1ee8:	50 e0       	ldi	r21, 0x00	; 0
    1eea:	60 e2       	ldi	r22, 0x20	; 32
    1eec:	71 e4       	ldi	r23, 0x41	; 65
    1eee:	f6 01       	movw	r30, r12
    1ef0:	82 a1       	ldd	r24, Z+34	; 0x22
    1ef2:	93 a1       	ldd	r25, Z+35	; 0x23
    1ef4:	07 d6       	rcall	.+3086   	; 0x2b04 <_ZN13HardwareTimer7beginMsEf>
	
	// Reset the MS5837, per datasheet
	Wire.beginTransmission(MS5837_ADDR);
    1ef6:	66 e7       	ldi	r22, 0x76	; 118
    1ef8:	70 e0       	ldi	r23, 0x00	; 0
    1efa:	87 e6       	ldi	r24, 0x67	; 103
    1efc:	96 e0       	ldi	r25, 0x06	; 6
    1efe:	0e 94 92 19 	call	0x3324	; 0x3324 <_ZN7TwoWire17beginTransmissionEi>
    1f02:	e0 91 67 06 	lds	r30, 0x0667	; 0x800667 <Wire>
    1f06:	f0 91 68 06 	lds	r31, 0x0668	; 0x800668 <Wire+0x1>
    1f0a:	01 90       	ld	r0, Z+
    1f0c:	f0 81       	ld	r31, Z
    1f0e:	e0 2d       	mov	r30, r0
    1f10:	6e e1       	ldi	r22, 0x1E	; 30
    1f12:	87 e6       	ldi	r24, 0x67	; 103
    1f14:	96 e0       	ldi	r25, 0x06	; 6
    1f16:	19 95       	eicall
	Wire.write(MS5837_RESET);
	Wire.endTransmission();
    1f18:	87 e6       	ldi	r24, 0x67	; 103
    1f1a:	96 e0       	ldi	r25, 0x06	; 6
    1f1c:	0e 94 11 1a 	call	0x3422	; 0x3422 <_ZN7TwoWire15endTransmissionEv>

	// Wait for reset to complete
	//_delay_ms(10);
	_timer->start(1);
    1f20:	61 e0       	ldi	r22, 0x01	; 1
    1f22:	f6 01       	movw	r30, r12
    1f24:	82 a1       	ldd	r24, Z+34	; 0x22
    1f26:	93 a1       	ldd	r25, Z+35	; 0x23
    1f28:	57 d6       	rcall	.+3246   	; 0x2bd8 <_ZN13HardwareTimer5startEh>
	_timer->waitForFinish();
    1f2a:	f6 01       	movw	r30, r12
    1f2c:	82 a1       	ldd	r24, Z+34	; 0x22
    1f2e:	93 a1       	ldd	r25, Z+35	; 0x23
    1f30:	67 d6       	rcall	.+3278   	; 0x2c00 <_ZN13HardwareTimer13waitForFinishEv>
    1f32:	76 01       	movw	r14, r12
    1f34:	c0 ea       	ldi	r28, 0xA0	; 160

	// Read calibration values and CRC
	for ( uint8_t i = 0 ; i < 7 ; i++ ) {
		Wire.beginTransmission(MS5837_ADDR);
    1f36:	66 e7       	ldi	r22, 0x76	; 118
    1f38:	70 e0       	ldi	r23, 0x00	; 0
    1f3a:	87 e6       	ldi	r24, 0x67	; 103
    1f3c:	96 e0       	ldi	r25, 0x06	; 6
    1f3e:	0e 94 92 19 	call	0x3324	; 0x3324 <_ZN7TwoWire17beginTransmissionEi>
    1f42:	e0 91 67 06 	lds	r30, 0x0667	; 0x800667 <Wire>
    1f46:	f0 91 68 06 	lds	r31, 0x0668	; 0x800668 <Wire+0x1>
    1f4a:	01 90       	ld	r0, Z+
    1f4c:	f0 81       	ld	r31, Z
    1f4e:	e0 2d       	mov	r30, r0
    1f50:	6c 2f       	mov	r22, r28
    1f52:	87 e6       	ldi	r24, 0x67	; 103
    1f54:	96 e0       	ldi	r25, 0x06	; 6
    1f56:	19 95       	eicall
		Wire.write(MS5837_PROM_READ+i*2);
		Wire.endTransmission();
    1f58:	87 e6       	ldi	r24, 0x67	; 103
    1f5a:	96 e0       	ldi	r25, 0x06	; 6
    1f5c:	0e 94 11 1a 	call	0x3422	; 0x3422 <_ZN7TwoWire15endTransmissionEv>

		Wire.requestFrom(MS5837_ADDR,2);
    1f60:	42 e0       	ldi	r20, 0x02	; 2
    1f62:	50 e0       	ldi	r21, 0x00	; 0
    1f64:	66 e7       	ldi	r22, 0x76	; 118
    1f66:	70 e0       	ldi	r23, 0x00	; 0
    1f68:	87 e6       	ldi	r24, 0x67	; 103
    1f6a:	96 e0       	ldi	r25, 0x06	; 6
    1f6c:	0e 94 0e 1a 	call	0x341c	; 0x341c <_ZN7TwoWire11requestFromEii>
		C[i] = (Wire.read() << 8) | Wire.read();
    1f70:	87 e6       	ldi	r24, 0x67	; 103
    1f72:	96 e0       	ldi	r25, 0x06	; 6
    1f74:	0e 94 c3 18 	call	0x3186	; 0x3186 <_ZN7TwoWire4readEv>
    1f78:	d8 2f       	mov	r29, r24
    1f7a:	87 e6       	ldi	r24, 0x67	; 103
    1f7c:	96 e0       	ldi	r25, 0x06	; 6
    1f7e:	0e 94 c3 18 	call	0x3186	; 0x3186 <_ZN7TwoWire4readEv>
    1f82:	1d 2f       	mov	r17, r29
    1f84:	00 e0       	ldi	r16, 0x00	; 0
    1f86:	80 2b       	or	r24, r16
    1f88:	91 2b       	or	r25, r17
    1f8a:	f7 01       	movw	r30, r14
    1f8c:	81 93       	st	Z+, r24
    1f8e:	91 93       	st	Z+, r25
    1f90:	7f 01       	movw	r14, r30
    1f92:	ce 5f       	subi	r28, 0xFE	; 254
	//_delay_ms(10);
	_timer->start(1);
	_timer->waitForFinish();

	// Read calibration values and CRC
	for ( uint8_t i = 0 ; i < 7 ; i++ ) {
    1f94:	ce 3a       	cpi	r28, 0xAE	; 174
    1f96:	79 f6       	brne	.-98     	; 0x1f36 <_ZN6MS58375beginEv+0x6a>
		Wire.requestFrom(MS5837_ADDR,2);
		C[i] = (Wire.read() << 8) | Wire.read();
	}

	// Verify that data is correct with CRC
	uint8_t crcRead = C[0] >> 12;
    1f98:	f6 01       	movw	r30, r12
    1f9a:	c1 81       	ldd	r28, Z+1	; 0x01
    1f9c:	c2 95       	swap	r28
	uint8_t crcCalculated = crc4(C);
    1f9e:	cf 70       	andi	r28, 0x0F	; 15
    1fa0:	b6 01       	movw	r22, r12
    1fa2:	c6 01       	movw	r24, r12
    1fa4:	5a df       	rcall	.-332    	; 0x1e5a <_ZN6MS58374crc4EPj>
    1fa6:	91 e0       	ldi	r25, 0x01	; 1
    1fa8:	c8 13       	cpse	r28, r24
    1faa:	90 e0       	ldi	r25, 0x00	; 0
	if ( crcCalculated == crcRead ) {
		return true; // Initialization success
	}

	return false; // CRC fail
}
    1fac:	89 2f       	mov	r24, r25
    1fae:	df 91       	pop	r29
    1fb0:	cf 91       	pop	r28
    1fb2:	1f 91       	pop	r17
    1fb4:	0f 91       	pop	r16
    1fb6:	ff 90       	pop	r15
    1fb8:	ef 90       	pop	r14
    1fba:	df 90       	pop	r13
    1fbc:	cf 90       	pop	r12
    1fbe:	08 95       	ret

00001fc0 <_ZN6MS58376updateEv>:
	}else{
		return false;
	}
}

void MS5837::update(){
    1fc0:	8f 92       	push	r8
    1fc2:	9f 92       	push	r9
    1fc4:	af 92       	push	r10
    1fc6:	bf 92       	push	r11
    1fc8:	cf 92       	push	r12
    1fca:	df 92       	push	r13
    1fcc:	ef 92       	push	r14
    1fce:	ff 92       	push	r15
    1fd0:	0f 93       	push	r16
    1fd2:	1f 93       	push	r17
    1fd4:	cf 93       	push	r28
    1fd6:	df 93       	push	r29
	if(_state != STATE_FINISHED){
    1fd8:	dc 01       	movw	r26, r24
    1fda:	91 96       	adiw	r26, 0x21	; 33
    1fdc:	2c 91       	ld	r18, X
    1fde:	22 23       	and	r18, r18
    1fe0:	09 f4       	brne	.+2      	; 0x1fe4 <_ZN6MS58376updateEv+0x24>
    1fe2:	cf c0       	rjmp	.+414    	; 0x2182 <_ZN6MS58376updateEv+0x1c2>
    1fe4:	ec 01       	movw	r28, r24
		if(_timer->finished()){
    1fe6:	8a a1       	ldd	r24, Y+34	; 0x22
    1fe8:	9b a1       	ldd	r25, Y+35	; 0x23
    1fea:	04 d6       	rcall	.+3080   	; 0x2bf4 <_ZN13HardwareTimer8finishedEv>
    1fec:	88 23       	and	r24, r24
    1fee:	09 f4       	brne	.+2      	; 0x1ff2 <_ZN6MS58376updateEv+0x32>
    1ff0:	c8 c0       	rjmp	.+400    	; 0x2182 <_ZN6MS58376updateEv+0x1c2>
			if(_state == STATE_READ_D1){
    1ff2:	89 a1       	ldd	r24, Y+33	; 0x21
    1ff4:	81 30       	cpi	r24, 0x01	; 1
    1ff6:	09 f0       	breq	.+2      	; 0x1ffa <_ZN6MS58376updateEv+0x3a>
    1ff8:	68 c0       	rjmp	.+208    	; 0x20ca <_ZN6MS58376updateEv+0x10a>
				//Read D1 conversion and Request D2 conversion
				Wire.beginTransmission(MS5837_ADDR);
    1ffa:	66 e7       	ldi	r22, 0x76	; 118
    1ffc:	70 e0       	ldi	r23, 0x00	; 0
    1ffe:	87 e6       	ldi	r24, 0x67	; 103
    2000:	96 e0       	ldi	r25, 0x06	; 6
    2002:	0e 94 92 19 	call	0x3324	; 0x3324 <_ZN7TwoWire17beginTransmissionEi>
    2006:	07 e6       	ldi	r16, 0x67	; 103
    2008:	16 e0       	ldi	r17, 0x06	; 6
    200a:	d8 01       	movw	r26, r16
    200c:	ed 91       	ld	r30, X+
    200e:	fc 91       	ld	r31, X
    2010:	01 90       	ld	r0, Z+
    2012:	f0 81       	ld	r31, Z
    2014:	e0 2d       	mov	r30, r0
    2016:	60 e0       	ldi	r22, 0x00	; 0
    2018:	c8 01       	movw	r24, r16
    201a:	19 95       	eicall
				Wire.write(MS5837_ADC_READ);
				Wire.endTransmission();
    201c:	c8 01       	movw	r24, r16
    201e:	0e 94 11 1a 	call	0x3422	; 0x3422 <_ZN7TwoWire15endTransmissionEv>

				Wire.requestFrom(MS5837_ADDR,3);
    2022:	43 e0       	ldi	r20, 0x03	; 3
    2024:	50 e0       	ldi	r21, 0x00	; 0
    2026:	66 e7       	ldi	r22, 0x76	; 118
    2028:	70 e0       	ldi	r23, 0x00	; 0
    202a:	c8 01       	movw	r24, r16
    202c:	0e 94 0e 1a 	call	0x341c	; 0x341c <_ZN7TwoWire11requestFromEii>
				D1 = 0;
    2030:	18 8a       	std	Y+16, r1	; 0x10
    2032:	19 8a       	std	Y+17, r1	; 0x11
    2034:	1a 8a       	std	Y+18, r1	; 0x12
    2036:	1b 8a       	std	Y+19, r1	; 0x13
				D1 = Wire.read();
    2038:	c8 01       	movw	r24, r16
    203a:	0e 94 c3 18 	call	0x3186	; 0x3186 <_ZN7TwoWire4readEv>
    203e:	4c 01       	movw	r8, r24
    2040:	99 0f       	add	r25, r25
    2042:	aa 08       	sbc	r10, r10
    2044:	bb 08       	sbc	r11, r11
    2046:	88 8a       	std	Y+16, r8	; 0x10
    2048:	99 8a       	std	Y+17, r9	; 0x11
    204a:	aa 8a       	std	Y+18, r10	; 0x12
    204c:	bb 8a       	std	Y+19, r11	; 0x13
				D1 = (D1 << 8) | Wire.read();
    204e:	c8 01       	movw	r24, r16
    2050:	0e 94 c3 18 	call	0x3186	; 0x3186 <_ZN7TwoWire4readEv>
    2054:	ba 2c       	mov	r11, r10
    2056:	a9 2c       	mov	r10, r9
    2058:	98 2c       	mov	r9, r8
    205a:	88 24       	eor	r8, r8
    205c:	6c 01       	movw	r12, r24
    205e:	99 0f       	add	r25, r25
    2060:	ee 08       	sbc	r14, r14
    2062:	ff 08       	sbc	r15, r15
    2064:	c8 28       	or	r12, r8
    2066:	d9 28       	or	r13, r9
    2068:	ea 28       	or	r14, r10
    206a:	fb 28       	or	r15, r11
    206c:	c8 8a       	std	Y+16, r12	; 0x10
    206e:	d9 8a       	std	Y+17, r13	; 0x11
    2070:	ea 8a       	std	Y+18, r14	; 0x12
    2072:	fb 8a       	std	Y+19, r15	; 0x13
				D1 = (D1 << 8) | Wire.read();
    2074:	c8 01       	movw	r24, r16
    2076:	0e 94 c3 18 	call	0x3186	; 0x3186 <_ZN7TwoWire4readEv>
    207a:	fe 2c       	mov	r15, r14
    207c:	ed 2c       	mov	r14, r13
    207e:	dc 2c       	mov	r13, r12
    2080:	cc 24       	eor	r12, r12
    2082:	09 2e       	mov	r0, r25
    2084:	00 0c       	add	r0, r0
    2086:	aa 0b       	sbc	r26, r26
    2088:	bb 0b       	sbc	r27, r27
    208a:	c8 2a       	or	r12, r24
    208c:	d9 2a       	or	r13, r25
    208e:	ea 2a       	or	r14, r26
    2090:	fb 2a       	or	r15, r27
    2092:	c8 8a       	std	Y+16, r12	; 0x10
    2094:	d9 8a       	std	Y+17, r13	; 0x11
    2096:	ea 8a       	std	Y+18, r14	; 0x12
    2098:	fb 8a       	std	Y+19, r15	; 0x13
		
				// Request D2 conversion
				Wire.beginTransmission(MS5837_ADDR);
    209a:	66 e7       	ldi	r22, 0x76	; 118
    209c:	70 e0       	ldi	r23, 0x00	; 0
    209e:	c8 01       	movw	r24, r16
    20a0:	0e 94 92 19 	call	0x3324	; 0x3324 <_ZN7TwoWire17beginTransmissionEi>
    20a4:	d8 01       	movw	r26, r16
    20a6:	ed 91       	ld	r30, X+
    20a8:	fc 91       	ld	r31, X
    20aa:	01 90       	ld	r0, Z+
    20ac:	f0 81       	ld	r31, Z
    20ae:	e0 2d       	mov	r30, r0
    20b0:	6a e5       	ldi	r22, 0x5A	; 90
    20b2:	c8 01       	movw	r24, r16
    20b4:	19 95       	eicall
				Wire.write(MS5837_CONVERT_D2_8192);
				Wire.endTransmission();
    20b6:	c8 01       	movw	r24, r16
    20b8:	0e 94 11 1a 	call	0x3422	; 0x3422 <_ZN7TwoWire15endTransmissionEv>

				Timer0.start(2);
    20bc:	62 e0       	ldi	r22, 0x02	; 2
    20be:	8d ee       	ldi	r24, 0xED	; 237
    20c0:	95 e0       	ldi	r25, 0x05	; 5
    20c2:	8a d5       	rcall	.+2836   	; 0x2bd8 <_ZN13HardwareTimer5startEh>
				_state = STATE_READ_D2;
    20c4:	82 e0       	ldi	r24, 0x02	; 2
    20c6:	89 a3       	std	Y+33, r24	; 0x21
    20c8:	5c c0       	rjmp	.+184    	; 0x2182 <_ZN6MS58376updateEv+0x1c2>
			}else if(_state == STATE_READ_D2){
    20ca:	82 30       	cpi	r24, 0x02	; 2
    20cc:	09 f0       	breq	.+2      	; 0x20d0 <_ZN6MS58376updateEv+0x110>
    20ce:	59 c0       	rjmp	.+178    	; 0x2182 <_ZN6MS58376updateEv+0x1c2>
				// Read D2 conversion and calculate readings
				Wire.beginTransmission(MS5837_ADDR);
    20d0:	66 e7       	ldi	r22, 0x76	; 118
    20d2:	70 e0       	ldi	r23, 0x00	; 0
    20d4:	87 e6       	ldi	r24, 0x67	; 103
    20d6:	96 e0       	ldi	r25, 0x06	; 6
    20d8:	0e 94 92 19 	call	0x3324	; 0x3324 <_ZN7TwoWire17beginTransmissionEi>
    20dc:	e0 91 67 06 	lds	r30, 0x0667	; 0x800667 <Wire>
    20e0:	f0 91 68 06 	lds	r31, 0x0668	; 0x800668 <Wire+0x1>
    20e4:	01 90       	ld	r0, Z+
    20e6:	f0 81       	ld	r31, Z
    20e8:	e0 2d       	mov	r30, r0
    20ea:	60 e0       	ldi	r22, 0x00	; 0
    20ec:	87 e6       	ldi	r24, 0x67	; 103
    20ee:	96 e0       	ldi	r25, 0x06	; 6
    20f0:	19 95       	eicall
				Wire.write(MS5837_ADC_READ);
				Wire.endTransmission();
    20f2:	87 e6       	ldi	r24, 0x67	; 103
    20f4:	96 e0       	ldi	r25, 0x06	; 6
    20f6:	0e 94 11 1a 	call	0x3422	; 0x3422 <_ZN7TwoWire15endTransmissionEv>

				Wire.requestFrom(MS5837_ADDR,3);
    20fa:	43 e0       	ldi	r20, 0x03	; 3
    20fc:	50 e0       	ldi	r21, 0x00	; 0
    20fe:	66 e7       	ldi	r22, 0x76	; 118
    2100:	70 e0       	ldi	r23, 0x00	; 0
    2102:	87 e6       	ldi	r24, 0x67	; 103
    2104:	96 e0       	ldi	r25, 0x06	; 6
    2106:	0e 94 0e 1a 	call	0x341c	; 0x341c <_ZN7TwoWire11requestFromEii>
				D2 = 0;
    210a:	1c 8a       	std	Y+20, r1	; 0x14
    210c:	1d 8a       	std	Y+21, r1	; 0x15
    210e:	1e 8a       	std	Y+22, r1	; 0x16
    2110:	1f 8a       	std	Y+23, r1	; 0x17
				D2 = Wire.read();
    2112:	87 e6       	ldi	r24, 0x67	; 103
    2114:	96 e0       	ldi	r25, 0x06	; 6
    2116:	0e 94 c3 18 	call	0x3186	; 0x3186 <_ZN7TwoWire4readEv>
    211a:	4c 01       	movw	r8, r24
    211c:	99 0f       	add	r25, r25
    211e:	aa 08       	sbc	r10, r10
    2120:	bb 08       	sbc	r11, r11
    2122:	8c 8a       	std	Y+20, r8	; 0x14
    2124:	9d 8a       	std	Y+21, r9	; 0x15
    2126:	ae 8a       	std	Y+22, r10	; 0x16
    2128:	bf 8a       	std	Y+23, r11	; 0x17
				D2 = (D2 << 8) | Wire.read();
    212a:	87 e6       	ldi	r24, 0x67	; 103
    212c:	96 e0       	ldi	r25, 0x06	; 6
    212e:	0e 94 c3 18 	call	0x3186	; 0x3186 <_ZN7TwoWire4readEv>
    2132:	ba 2c       	mov	r11, r10
    2134:	a9 2c       	mov	r10, r9
    2136:	98 2c       	mov	r9, r8
    2138:	88 24       	eor	r8, r8
    213a:	6c 01       	movw	r12, r24
    213c:	99 0f       	add	r25, r25
    213e:	ee 08       	sbc	r14, r14
    2140:	ff 08       	sbc	r15, r15
    2142:	c8 28       	or	r12, r8
    2144:	d9 28       	or	r13, r9
    2146:	ea 28       	or	r14, r10
    2148:	fb 28       	or	r15, r11
    214a:	cc 8a       	std	Y+20, r12	; 0x14
    214c:	dd 8a       	std	Y+21, r13	; 0x15
    214e:	ee 8a       	std	Y+22, r14	; 0x16
    2150:	ff 8a       	std	Y+23, r15	; 0x17
				D2 = (D2 << 8) | Wire.read();
    2152:	87 e6       	ldi	r24, 0x67	; 103
    2154:	96 e0       	ldi	r25, 0x06	; 6
    2156:	0e 94 c3 18 	call	0x3186	; 0x3186 <_ZN7TwoWire4readEv>
    215a:	fe 2c       	mov	r15, r14
    215c:	ed 2c       	mov	r14, r13
    215e:	dc 2c       	mov	r13, r12
    2160:	cc 24       	eor	r12, r12
    2162:	09 2e       	mov	r0, r25
    2164:	00 0c       	add	r0, r0
    2166:	aa 0b       	sbc	r26, r26
    2168:	bb 0b       	sbc	r27, r27
    216a:	c8 2a       	or	r12, r24
    216c:	d9 2a       	or	r13, r25
    216e:	ea 2a       	or	r14, r26
    2170:	fb 2a       	or	r15, r27
    2172:	cc 8a       	std	Y+20, r12	; 0x14
    2174:	dd 8a       	std	Y+21, r13	; 0x15
    2176:	ee 8a       	std	Y+22, r14	; 0x16
    2178:	ff 8a       	std	Y+23, r15	; 0x17

				calculate();
    217a:	ce 01       	movw	r24, r28
    217c:	0e 94 49 08 	call	0x1092	; 0x1092 <_ZN6MS58379calculateEv>
				_state = STATE_FINISHED;
    2180:	19 a2       	std	Y+33, r1	; 0x21
			}
		}
	}
}
    2182:	df 91       	pop	r29
    2184:	cf 91       	pop	r28
    2186:	1f 91       	pop	r17
    2188:	0f 91       	pop	r16
    218a:	ff 90       	pop	r15
    218c:	ef 90       	pop	r14
    218e:	df 90       	pop	r13
    2190:	cf 90       	pop	r12
    2192:	bf 90       	pop	r11
    2194:	af 90       	pop	r10
    2196:	9f 90       	pop	r9
    2198:	8f 90       	pop	r8
    219a:	08 95       	ret

0000219c <_ZN7PCA9685C1Eh>:
#define FREQUENCY_OSCILLATOR 25000000 /**< Int. osc. frequency in datasheet */

#define PCA9685_PRESCALE_MIN 3   /**< minimum prescale value */
#define PCA9685_PRESCALE_MAX 255 /**< maximum prescale value */

PCA9685::PCA9685(const uint8_t addr) : _addr(addr){
    219c:	fc 01       	movw	r30, r24
    219e:	60 83       	st	Z, r22
    21a0:	08 95       	ret

000021a2 <_ZN18TwiServoControllerC1Eh>:

#include "TwiServoController.h"
#include "../Utils/CpuFreq.h"
#include <util/delay.h>

TwiServoController::TwiServoController(const uint8_t addr) : controller(addr){
    21a2:	fc cf       	rjmp	.-8      	; 0x219c <_ZN7PCA9685C1Eh>
    21a4:	08 95       	ret

000021a6 <_ZN14HardwareSerial9availableEv>:
	#endif
	#if defined(HAVE_HWSERIAL2)
	if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
	#endif
	#if defined(HAVE_HWSERIAL3)
	if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    21a6:	fc 01       	movw	r30, r24
    21a8:	97 85       	ldd	r25, Z+15	; 0x0f
    21aa:	20 89       	ldd	r18, Z+16	; 0x10
    21ac:	89 2f       	mov	r24, r25
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	80 5c       	subi	r24, 0xC0	; 192
    21b2:	9f 4f       	sbci	r25, 0xFF	; 255
    21b4:	82 1b       	sub	r24, r18
    21b6:	91 09       	sbc	r25, r1
    21b8:	8f 73       	andi	r24, 0x3F	; 63
    21ba:	99 27       	eor	r25, r25
    21bc:	08 95       	ret

000021be <_ZN14HardwareSerial4peekEv>:
    21be:	fc 01       	movw	r30, r24
    21c0:	97 85       	ldd	r25, Z+15	; 0x0f
    21c2:	80 89       	ldd	r24, Z+16	; 0x10
    21c4:	98 17       	cp	r25, r24
    21c6:	31 f0       	breq	.+12     	; 0x21d4 <_ZN14HardwareSerial4peekEv+0x16>
    21c8:	80 89       	ldd	r24, Z+16	; 0x10
    21ca:	e8 0f       	add	r30, r24
    21cc:	f1 1d       	adc	r31, r1
    21ce:	83 89       	ldd	r24, Z+19	; 0x13
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	08 95       	ret
    21d4:	8f ef       	ldi	r24, 0xFF	; 255
    21d6:	9f ef       	ldi	r25, 0xFF	; 255
    21d8:	08 95       	ret

000021da <_ZN14HardwareSerial4readEv>:
    21da:	fc 01       	movw	r30, r24
    21dc:	97 85       	ldd	r25, Z+15	; 0x0f
    21de:	80 89       	ldd	r24, Z+16	; 0x10
    21e0:	98 17       	cp	r25, r24
    21e2:	61 f0       	breq	.+24     	; 0x21fc <_ZN14HardwareSerial4readEv+0x22>
    21e4:	80 89       	ldd	r24, Z+16	; 0x10
    21e6:	df 01       	movw	r26, r30
    21e8:	a8 0f       	add	r26, r24
    21ea:	b1 1d       	adc	r27, r1
    21ec:	53 96       	adiw	r26, 0x13	; 19
    21ee:	8c 91       	ld	r24, X
    21f0:	90 89       	ldd	r25, Z+16	; 0x10
    21f2:	9f 5f       	subi	r25, 0xFF	; 255
    21f4:	9f 73       	andi	r25, 0x3F	; 63
    21f6:	90 8b       	std	Z+16, r25	; 0x10
    21f8:	90 e0       	ldi	r25, 0x00	; 0
    21fa:	08 95       	ret
    21fc:	8f ef       	ldi	r24, 0xFF	; 255
    21fe:	9f ef       	ldi	r25, 0xFF	; 255
    2200:	08 95       	ret

00002202 <_ZN14HardwareSerial17availableForWriteEv>:
    2202:	fc 01       	movw	r30, r24
    2204:	21 89       	ldd	r18, Z+17	; 0x11
    2206:	32 89       	ldd	r19, Z+18	; 0x12
    2208:	23 17       	cp	r18, r19
    220a:	38 f0       	brcs	.+14     	; 0x221a <_ZN14HardwareSerial17availableForWriteEv+0x18>
    220c:	8f e3       	ldi	r24, 0x3F	; 63
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	82 1b       	sub	r24, r18
    2212:	91 09       	sbc	r25, r1
    2214:	83 0f       	add	r24, r19
    2216:	91 1d       	adc	r25, r1
    2218:	08 95       	ret
    221a:	83 2f       	mov	r24, r19
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	82 1b       	sub	r24, r18
    2220:	91 09       	sbc	r25, r1
    2222:	01 97       	sbiw	r24, 0x01	; 1
    2224:	08 95       	ret

00002226 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    2226:	fc 01       	movw	r30, r24
	// If interrupts are enabled, there must be more data in the output
	// buffer. Send the next byte
	unsigned char c = _tx_buffer[_tx_buffer_tail];
    2228:	82 89       	ldd	r24, Z+18	; 0x12
    222a:	df 01       	movw	r26, r30
    222c:	a8 0f       	add	r26, r24
    222e:	b1 1d       	adc	r27, r1
    2230:	ad 5a       	subi	r26, 0xAD	; 173
    2232:	bf 4f       	sbci	r27, 0xFF	; 255
    2234:	8c 91       	ld	r24, X
	_tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    2236:	22 89       	ldd	r18, Z+18	; 0x12
    2238:	30 e0       	ldi	r19, 0x00	; 0
    223a:	2f 5f       	subi	r18, 0xFF	; 255
    223c:	3f 4f       	sbci	r19, 0xFF	; 255
    223e:	2f 73       	andi	r18, 0x3F	; 63
    2240:	30 78       	andi	r19, 0x80	; 128
    2242:	33 23       	and	r19, r19
    2244:	34 f4       	brge	.+12     	; 0x2252 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x2c>
    2246:	21 50       	subi	r18, 0x01	; 1
    2248:	31 09       	sbc	r19, r1
    224a:	20 6c       	ori	r18, 0xC0	; 192
    224c:	3f 6f       	ori	r19, 0xFF	; 255
    224e:	2f 5f       	subi	r18, 0xFF	; 255
    2250:	3f 4f       	sbci	r19, 0xFF	; 255
    2252:	22 8b       	std	Z+18, r18	; 0x12

	*_udr = c;
    2254:	a4 85       	ldd	r26, Z+12	; 0x0c
    2256:	b5 85       	ldd	r27, Z+13	; 0x0d
    2258:	8c 93       	st	X, r24
	// location". This makes sure flush() won't return until the bytes
	// actually got written. Other r/w bits are preserved, and zeroes
	// written to the rest.

	#ifdef MPCM0
	*_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    225a:	a6 81       	ldd	r26, Z+6	; 0x06
    225c:	b7 81       	ldd	r27, Z+7	; 0x07
    225e:	8c 91       	ld	r24, X
    2260:	83 70       	andi	r24, 0x03	; 3
    2262:	80 64       	ori	r24, 0x40	; 64
    2264:	8c 93       	st	X, r24
	#else
	*_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
	#endif

	if (_tx_buffer_head == _tx_buffer_tail) {
    2266:	91 89       	ldd	r25, Z+17	; 0x11
    2268:	82 89       	ldd	r24, Z+18	; 0x12
    226a:	98 13       	cpse	r25, r24
    226c:	06 c0       	rjmp	.+12     	; 0x227a <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x54>
		// Buffer empty, so disable interrupts
		cbi(*_ucsrb, UDRIE0);
    226e:	00 84       	ldd	r0, Z+8	; 0x08
    2270:	f1 85       	ldd	r31, Z+9	; 0x09
    2272:	e0 2d       	mov	r30, r0
    2274:	80 81       	ld	r24, Z
    2276:	8f 7d       	andi	r24, 0xDF	; 223
    2278:	80 83       	st	Z, r24
    227a:	08 95       	ret

0000227c <_ZN14HardwareSerial5flushEv>:
	if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
	return tail - head - 1;
}

void HardwareSerial::flush()
{
    227c:	cf 93       	push	r28
    227e:	df 93       	push	r29
    2280:	ec 01       	movw	r28, r24
	// If we have never written a byte, no need to flush. This special
	// case is needed since there is no way to force the TXC (transmit
	// complete) bit to 1 during initialization
	if (!_written)
    2282:	8e 85       	ldd	r24, Y+14	; 0x0e
    2284:	88 23       	and	r24, r24
    2286:	d1 f0       	breq	.+52     	; 0x22bc <_ZN14HardwareSerial5flushEv+0x40>
	return;

	while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    2288:	e8 85       	ldd	r30, Y+8	; 0x08
    228a:	f9 85       	ldd	r31, Y+9	; 0x09
    228c:	80 81       	ld	r24, Z
    228e:	85 fd       	sbrc	r24, 5
    2290:	05 c0       	rjmp	.+10     	; 0x229c <_ZN14HardwareSerial5flushEv+0x20>
    2292:	ae 81       	ldd	r26, Y+6	; 0x06
    2294:	bf 81       	ldd	r27, Y+7	; 0x07
    2296:	8c 91       	ld	r24, X
    2298:	86 fd       	sbrc	r24, 6
    229a:	10 c0       	rjmp	.+32     	; 0x22bc <_ZN14HardwareSerial5flushEv+0x40>
		if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    229c:	0f b6       	in	r0, 0x3f	; 63
    229e:	07 fc       	sbrc	r0, 7
    22a0:	f5 cf       	rjmp	.-22     	; 0x228c <_ZN14HardwareSerial5flushEv+0x10>
    22a2:	80 81       	ld	r24, Z
    22a4:	85 ff       	sbrs	r24, 5
    22a6:	f2 cf       	rjmp	.-28     	; 0x228c <_ZN14HardwareSerial5flushEv+0x10>
    22a8:	03 c0       	rjmp	.+6      	; 0x22b0 <_ZN14HardwareSerial5flushEv+0x34>
		// Interrupts are globally disabled, but the DR empty
		// interrupt should be enabled, so poll the DR empty flag to
		// prevent deadlock
		if (bit_is_set(*_ucsra, UDRE0))
		_tx_udr_empty_irq();
    22aa:	ce 01       	movw	r24, r28
    22ac:	bc df       	rcall	.-136    	; 0x2226 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    22ae:	ec cf       	rjmp	.-40     	; 0x2288 <_ZN14HardwareSerial5flushEv+0xc>
	while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
		if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
		// Interrupts are globally disabled, but the DR empty
		// interrupt should be enabled, so poll the DR empty flag to
		// prevent deadlock
		if (bit_is_set(*_ucsra, UDRE0))
    22b0:	ae 81       	ldd	r26, Y+6	; 0x06
    22b2:	bf 81       	ldd	r27, Y+7	; 0x07
    22b4:	8c 91       	ld	r24, X
    22b6:	85 ff       	sbrs	r24, 5
    22b8:	e9 cf       	rjmp	.-46     	; 0x228c <_ZN14HardwareSerial5flushEv+0x10>
    22ba:	f7 cf       	rjmp	.-18     	; 0x22aa <_ZN14HardwareSerial5flushEv+0x2e>
		_tx_udr_empty_irq();
	}
	// If we get here, nothing is queued anymore (DRIE is disabled) and
	// the hardware finished tranmission (TXC is set).
}
    22bc:	df 91       	pop	r29
    22be:	cf 91       	pop	r28
    22c0:	08 95       	ret

000022c2 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    22c2:	0f 93       	push	r16
    22c4:	1f 93       	push	r17
    22c6:	cf 93       	push	r28
    22c8:	df 93       	push	r29
    22ca:	ec 01       	movw	r28, r24
	_written = true;
    22cc:	81 e0       	ldi	r24, 0x01	; 1
    22ce:	8e 87       	std	Y+14, r24	; 0x0e
	// If the buffer and the data register is empty, just write the byte
	// to the data register and be done. This shortcut helps
	// significantly improve the effective datarate at high (>
	// 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
	if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    22d0:	99 89       	ldd	r25, Y+17	; 0x11
    22d2:	8a 89       	ldd	r24, Y+18	; 0x12
    22d4:	98 13       	cpse	r25, r24
    22d6:	25 c0       	rjmp	.+74     	; 0x2322 <_ZN14HardwareSerial5writeEh+0x60>
    22d8:	ee 81       	ldd	r30, Y+6	; 0x06
    22da:	ff 81       	ldd	r31, Y+7	; 0x07
    22dc:	80 81       	ld	r24, Z
    22de:	85 fd       	sbrc	r24, 5
    22e0:	31 c0       	rjmp	.+98     	; 0x2344 <_ZN14HardwareSerial5writeEh+0x82>
    22e2:	1f c0       	rjmp	.+62     	; 0x2322 <_ZN14HardwareSerial5writeEh+0x60>
	}
	tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
	// If the output buffer is full, there's nothing for it other than to
	// wait for the interrupt handler to empty it a bit
	while (i == _tx_buffer_tail) {
    22e4:	8a 89       	ldd	r24, Y+18	; 0x12
    22e6:	18 13       	cpse	r17, r24
    22e8:	0b c0       	rjmp	.+22     	; 0x2300 <_ZN14HardwareSerial5writeEh+0x3e>
		if (bit_is_clear(SREG, SREG_I)) {
    22ea:	0f b6       	in	r0, 0x3f	; 63
    22ec:	07 fc       	sbrc	r0, 7
    22ee:	fa cf       	rjmp	.-12     	; 0x22e4 <_ZN14HardwareSerial5writeEh+0x22>
			// Interrupts are disabled, so we'll have to poll the data
			// register empty flag ourselves. If it is set, pretend an
			// interrupt has happened and call the handler to free up
			// space for us.
			if(bit_is_set(*_ucsra, UDRE0))
    22f0:	ee 81       	ldd	r30, Y+6	; 0x06
    22f2:	ff 81       	ldd	r31, Y+7	; 0x07
    22f4:	80 81       	ld	r24, Z
    22f6:	85 ff       	sbrs	r24, 5
    22f8:	f5 cf       	rjmp	.-22     	; 0x22e4 <_ZN14HardwareSerial5writeEh+0x22>
			_tx_udr_empty_irq();
    22fa:	ce 01       	movw	r24, r28
    22fc:	94 df       	rcall	.-216    	; 0x2226 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    22fe:	f2 cf       	rjmp	.-28     	; 0x22e4 <_ZN14HardwareSerial5writeEh+0x22>
			} else {
			// nop, the interrupt handler will free up space for us
		}
	}

	_tx_buffer[_tx_buffer_head] = c;
    2300:	89 89       	ldd	r24, Y+17	; 0x11
    2302:	fe 01       	movw	r30, r28
    2304:	e8 0f       	add	r30, r24
    2306:	f1 1d       	adc	r31, r1
    2308:	ed 5a       	subi	r30, 0xAD	; 173
    230a:	ff 4f       	sbci	r31, 0xFF	; 255
    230c:	00 83       	st	Z, r16

	// make atomic to prevent execution of ISR between setting the
	// head pointer and setting the interrupt flag resulting in buffer
	// retransmission
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    230e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2310:	f8 94       	cli
		_tx_buffer_head = i;
    2312:	19 8b       	std	Y+17, r17	; 0x11
		sbi(*_ucsrb, UDRIE0);
    2314:	e8 85       	ldd	r30, Y+8	; 0x08
    2316:	f9 85       	ldd	r31, Y+9	; 0x09
    2318:	80 81       	ld	r24, Z
    231a:	80 62       	ori	r24, 0x20	; 32
    231c:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    231e:	9f bf       	out	0x3f, r25	; 63
	}
	
	return 1;
    2320:	1d c0       	rjmp	.+58     	; 0x235c <_ZN14HardwareSerial5writeEh+0x9a>
			*_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
			#endif
		}
		return 1;
	}
	tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    2322:	29 89       	ldd	r18, Y+17	; 0x11
    2324:	30 e0       	ldi	r19, 0x00	; 0
    2326:	2f 5f       	subi	r18, 0xFF	; 255
    2328:	3f 4f       	sbci	r19, 0xFF	; 255
    232a:	2f 73       	andi	r18, 0x3F	; 63
    232c:	30 78       	andi	r19, 0x80	; 128
    232e:	33 23       	and	r19, r19
    2330:	34 f4       	brge	.+12     	; 0x233e <_ZN14HardwareSerial5writeEh+0x7c>
    2332:	21 50       	subi	r18, 0x01	; 1
    2334:	31 09       	sbc	r19, r1
    2336:	20 6c       	ori	r18, 0xC0	; 192
    2338:	3f 6f       	ori	r19, 0xFF	; 255
    233a:	2f 5f       	subi	r18, 0xFF	; 255
    233c:	3f 4f       	sbci	r19, 0xFF	; 255
    233e:	06 2f       	mov	r16, r22
    2340:	12 2f       	mov	r17, r18
    2342:	d0 cf       	rjmp	.-96     	; 0x22e4 <_ZN14HardwareSerial5writeEh+0x22>
		// So writing UDR must happen first.
		// Writing UDR and clearing TC must be done atomically, otherwise
		// interrupts might delay the TXC clear so the byte written to UDR
		// is transmitted (setting TXC) before clearing TXC. Then TXC will
		// be cleared when no bytes are left, causing flush() to hang
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    2344:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2346:	f8 94       	cli
			*_udr = c;
    2348:	ec 85       	ldd	r30, Y+12	; 0x0c
    234a:	fd 85       	ldd	r31, Y+13	; 0x0d
    234c:	60 83       	st	Z, r22
			#ifdef MPCM0
			*_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    234e:	ee 81       	ldd	r30, Y+6	; 0x06
    2350:	ff 81       	ldd	r31, Y+7	; 0x07
    2352:	80 81       	ld	r24, Z
    2354:	83 70       	andi	r24, 0x03	; 3
    2356:	80 64       	ori	r24, 0x40	; 64
    2358:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    235a:	9f bf       	out	0x3f, r25	; 63
		_tx_buffer_head = i;
		sbi(*_ucsrb, UDRIE0);
	}
	
	return 1;
}
    235c:	81 e0       	ldi	r24, 0x01	; 1
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	df 91       	pop	r29
    2362:	cf 91       	pop	r28
    2364:	1f 91       	pop	r17
    2366:	0f 91       	pop	r16
    2368:	08 95       	ret

0000236a <_ZN5Print17availableForWriteEv>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
}
    236a:	80 e0       	ldi	r24, 0x00	; 0
    236c:	90 e0       	ldi	r25, 0x00	; 0
    236e:	08 95       	ret

00002370 <__vector_25>:
    2370:	1f 92       	push	r1
    2372:	0f 92       	push	r0
    2374:	0f b6       	in	r0, 0x3f	; 63
    2376:	0f 92       	push	r0
    2378:	11 24       	eor	r1, r1
    237a:	0b b6       	in	r0, 0x3b	; 59
    237c:	0f 92       	push	r0
    237e:	2f 93       	push	r18
    2380:	8f 93       	push	r24
    2382:	9f 93       	push	r25
    2384:	af 93       	push	r26
    2386:	bf 93       	push	r27
    2388:	ef 93       	push	r30
    238a:	ff 93       	push	r31
    238c:	e0 91 a7 04 	lds	r30, 0x04A7	; 0x8004a7 <Serial+0x6>
    2390:	f0 91 a8 04 	lds	r31, 0x04A8	; 0x8004a8 <Serial+0x7>
    2394:	80 81       	ld	r24, Z
    2396:	82 fd       	sbrc	r24, 2
    2398:	14 c0       	rjmp	.+40     	; 0x23c2 <__vector_25+0x52>
    239a:	e1 ea       	ldi	r30, 0xA1	; 161
    239c:	f4 e0       	ldi	r31, 0x04	; 4
    239e:	a4 85       	ldd	r26, Z+12	; 0x0c
    23a0:	b5 85       	ldd	r27, Z+13	; 0x0d
    23a2:	2c 91       	ld	r18, X
    23a4:	87 85       	ldd	r24, Z+15	; 0x0f
    23a6:	8f 5f       	subi	r24, 0xFF	; 255
    23a8:	8f 70       	andi	r24, 0x0F	; 15
    23aa:	90 89       	ldd	r25, Z+16	; 0x10
    23ac:	89 17       	cp	r24, r25
    23ae:	71 f0       	breq	.+28     	; 0x23cc <__vector_25+0x5c>
    23b0:	df 01       	movw	r26, r30
    23b2:	e7 85       	ldd	r30, Z+15	; 0x0f
    23b4:	f0 e0       	ldi	r31, 0x00	; 0
    23b6:	ef 55       	subi	r30, 0x5F	; 95
    23b8:	fb 4f       	sbci	r31, 0xFB	; 251
    23ba:	23 8b       	std	Z+19, r18	; 0x13
    23bc:	1f 96       	adiw	r26, 0x0f	; 15
    23be:	8c 93       	st	X, r24
    23c0:	05 c0       	rjmp	.+10     	; 0x23cc <__vector_25+0x5c>
    23c2:	e0 91 ad 04 	lds	r30, 0x04AD	; 0x8004ad <Serial+0xc>
    23c6:	f0 91 ae 04 	lds	r31, 0x04AE	; 0x8004ae <Serial+0xd>
    23ca:	80 81       	ld	r24, Z
    23cc:	ff 91       	pop	r31
    23ce:	ef 91       	pop	r30
    23d0:	bf 91       	pop	r27
    23d2:	af 91       	pop	r26
    23d4:	9f 91       	pop	r25
    23d6:	8f 91       	pop	r24
    23d8:	2f 91       	pop	r18
    23da:	0f 90       	pop	r0
    23dc:	0b be       	out	0x3b, r0	; 59
    23de:	0f 90       	pop	r0
    23e0:	0f be       	out	0x3f, r0	; 63
    23e2:	0f 90       	pop	r0
    23e4:	1f 90       	pop	r1
    23e6:	18 95       	reti

000023e8 <__vector_26>:
    23e8:	1f 92       	push	r1
    23ea:	0f 92       	push	r0
    23ec:	0f b6       	in	r0, 0x3f	; 63
    23ee:	0f 92       	push	r0
    23f0:	11 24       	eor	r1, r1
    23f2:	0b b6       	in	r0, 0x3b	; 59
    23f4:	0f 92       	push	r0
    23f6:	2f 93       	push	r18
    23f8:	3f 93       	push	r19
    23fa:	4f 93       	push	r20
    23fc:	5f 93       	push	r21
    23fe:	6f 93       	push	r22
    2400:	7f 93       	push	r23
    2402:	8f 93       	push	r24
    2404:	9f 93       	push	r25
    2406:	af 93       	push	r26
    2408:	bf 93       	push	r27
    240a:	ef 93       	push	r30
    240c:	ff 93       	push	r31
    240e:	81 ea       	ldi	r24, 0xA1	; 161
    2410:	94 e0       	ldi	r25, 0x04	; 4
    2412:	09 df       	rcall	.-494    	; 0x2226 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    2414:	ff 91       	pop	r31
    2416:	ef 91       	pop	r30
    2418:	bf 91       	pop	r27
    241a:	af 91       	pop	r26
    241c:	9f 91       	pop	r25
    241e:	8f 91       	pop	r24
    2420:	7f 91       	pop	r23
    2422:	6f 91       	pop	r22
    2424:	5f 91       	pop	r21
    2426:	4f 91       	pop	r20
    2428:	3f 91       	pop	r19
    242a:	2f 91       	pop	r18
    242c:	0f 90       	pop	r0
    242e:	0b be       	out	0x3b, r0	; 59
    2430:	0f 90       	pop	r0
    2432:	0f be       	out	0x3f, r0	; 63
    2434:	0f 90       	pop	r0
    2436:	1f 90       	pop	r1
    2438:	18 95       	reti

0000243a <_GLOBAL__sub_I___vector_25>:
volatile uint8_t *ucsrc, volatile uint8_t *udr) :
_ubrrh(ubrrh), _ubrrl(ubrrl),
_ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
_udr(udr),
_rx_buffer_head(0), _rx_buffer_tail(0),
_tx_buffer_head(0), _tx_buffer_tail(0)
    243a:	e1 ea       	ldi	r30, 0xA1	; 161
    243c:	f4 e0       	ldi	r31, 0x04	; 4
    243e:	84 e2       	ldi	r24, 0x24	; 36
    2440:	92 e0       	ldi	r25, 0x02	; 2
    2442:	91 83       	std	Z+1, r25	; 0x01
    2444:	80 83       	st	Z, r24
    2446:	85 ec       	ldi	r24, 0xC5	; 197
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	93 83       	std	Z+3, r25	; 0x03
    244c:	82 83       	std	Z+2, r24	; 0x02
    244e:	84 ec       	ldi	r24, 0xC4	; 196
    2450:	90 e0       	ldi	r25, 0x00	; 0
    2452:	95 83       	std	Z+5, r25	; 0x05
    2454:	84 83       	std	Z+4, r24	; 0x04
    2456:	80 ec       	ldi	r24, 0xC0	; 192
    2458:	90 e0       	ldi	r25, 0x00	; 0
    245a:	97 83       	std	Z+7, r25	; 0x07
    245c:	86 83       	std	Z+6, r24	; 0x06
    245e:	81 ec       	ldi	r24, 0xC1	; 193
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	91 87       	std	Z+9, r25	; 0x09
    2464:	80 87       	std	Z+8, r24	; 0x08
    2466:	82 ec       	ldi	r24, 0xC2	; 194
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	93 87       	std	Z+11, r25	; 0x0b
    246c:	82 87       	std	Z+10, r24	; 0x0a
    246e:	86 ec       	ldi	r24, 0xC6	; 198
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	95 87       	std	Z+13, r25	; 0x0d
    2474:	84 87       	std	Z+12, r24	; 0x0c
    2476:	17 86       	std	Z+15, r1	; 0x0f
    2478:	10 8a       	std	Z+16, r1	; 0x10
    247a:	11 8a       	std	Z+17, r1	; 0x11
    247c:	12 8a       	std	Z+18, r1	; 0x12
    247e:	08 95       	ret

00002480 <__vector_36>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
}
    2480:	1f 92       	push	r1
    2482:	0f 92       	push	r0
    2484:	0f b6       	in	r0, 0x3f	; 63
    2486:	0f 92       	push	r0
    2488:	11 24       	eor	r1, r1
    248a:	0b b6       	in	r0, 0x3b	; 59
    248c:	0f 92       	push	r0
    248e:	2f 93       	push	r18
    2490:	8f 93       	push	r24
    2492:	9f 93       	push	r25
    2494:	af 93       	push	r26
    2496:	bf 93       	push	r27
    2498:	ef 93       	push	r30
    249a:	ff 93       	push	r31
    249c:	e0 91 da 04 	lds	r30, 0x04DA	; 0x8004da <Serial1+0x6>
    24a0:	f0 91 db 04 	lds	r31, 0x04DB	; 0x8004db <Serial1+0x7>
    24a4:	80 81       	ld	r24, Z
    24a6:	82 fd       	sbrc	r24, 2
    24a8:	14 c0       	rjmp	.+40     	; 0x24d2 <__vector_36+0x52>
    24aa:	e4 ed       	ldi	r30, 0xD4	; 212
    24ac:	f4 e0       	ldi	r31, 0x04	; 4
    24ae:	a4 85       	ldd	r26, Z+12	; 0x0c
    24b0:	b5 85       	ldd	r27, Z+13	; 0x0d
    24b2:	2c 91       	ld	r18, X
    24b4:	87 85       	ldd	r24, Z+15	; 0x0f
    24b6:	8f 5f       	subi	r24, 0xFF	; 255
    24b8:	8f 70       	andi	r24, 0x0F	; 15
    24ba:	90 89       	ldd	r25, Z+16	; 0x10
    24bc:	89 17       	cp	r24, r25
    24be:	71 f0       	breq	.+28     	; 0x24dc <__vector_36+0x5c>
    24c0:	df 01       	movw	r26, r30
    24c2:	e7 85       	ldd	r30, Z+15	; 0x0f
    24c4:	f0 e0       	ldi	r31, 0x00	; 0
    24c6:	ec 52       	subi	r30, 0x2C	; 44
    24c8:	fb 4f       	sbci	r31, 0xFB	; 251
    24ca:	23 8b       	std	Z+19, r18	; 0x13
    24cc:	1f 96       	adiw	r26, 0x0f	; 15
    24ce:	8c 93       	st	X, r24
    24d0:	05 c0       	rjmp	.+10     	; 0x24dc <__vector_36+0x5c>
    24d2:	e0 91 e0 04 	lds	r30, 0x04E0	; 0x8004e0 <Serial1+0xc>
    24d6:	f0 91 e1 04 	lds	r31, 0x04E1	; 0x8004e1 <Serial1+0xd>
    24da:	80 81       	ld	r24, Z
    24dc:	ff 91       	pop	r31
    24de:	ef 91       	pop	r30
    24e0:	bf 91       	pop	r27
    24e2:	af 91       	pop	r26
    24e4:	9f 91       	pop	r25
    24e6:	8f 91       	pop	r24
    24e8:	2f 91       	pop	r18
    24ea:	0f 90       	pop	r0
    24ec:	0b be       	out	0x3b, r0	; 59
    24ee:	0f 90       	pop	r0
    24f0:	0f be       	out	0x3f, r0	; 63
    24f2:	0f 90       	pop	r0
    24f4:	1f 90       	pop	r1
    24f6:	18 95       	reti

000024f8 <__vector_37>:
    24f8:	1f 92       	push	r1
    24fa:	0f 92       	push	r0
    24fc:	0f b6       	in	r0, 0x3f	; 63
    24fe:	0f 92       	push	r0
    2500:	11 24       	eor	r1, r1
    2502:	0b b6       	in	r0, 0x3b	; 59
    2504:	0f 92       	push	r0
    2506:	2f 93       	push	r18
    2508:	3f 93       	push	r19
    250a:	4f 93       	push	r20
    250c:	5f 93       	push	r21
    250e:	6f 93       	push	r22
    2510:	7f 93       	push	r23
    2512:	8f 93       	push	r24
    2514:	9f 93       	push	r25
    2516:	af 93       	push	r26
    2518:	bf 93       	push	r27
    251a:	ef 93       	push	r30
    251c:	ff 93       	push	r31
    251e:	84 ed       	ldi	r24, 0xD4	; 212
    2520:	94 e0       	ldi	r25, 0x04	; 4
    2522:	81 de       	rcall	.-766    	; 0x2226 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    2524:	ff 91       	pop	r31
    2526:	ef 91       	pop	r30
    2528:	bf 91       	pop	r27
    252a:	af 91       	pop	r26
    252c:	9f 91       	pop	r25
    252e:	8f 91       	pop	r24
    2530:	7f 91       	pop	r23
    2532:	6f 91       	pop	r22
    2534:	5f 91       	pop	r21
    2536:	4f 91       	pop	r20
    2538:	3f 91       	pop	r19
    253a:	2f 91       	pop	r18
    253c:	0f 90       	pop	r0
    253e:	0b be       	out	0x3b, r0	; 59
    2540:	0f 90       	pop	r0
    2542:	0f be       	out	0x3f, r0	; 63
    2544:	0f 90       	pop	r0
    2546:	1f 90       	pop	r1
    2548:	18 95       	reti

0000254a <_GLOBAL__sub_I___vector_36>:
    254a:	e4 ed       	ldi	r30, 0xD4	; 212
    254c:	f4 e0       	ldi	r31, 0x04	; 4
    254e:	84 e2       	ldi	r24, 0x24	; 36
    2550:	92 e0       	ldi	r25, 0x02	; 2
    2552:	91 83       	std	Z+1, r25	; 0x01
    2554:	80 83       	st	Z, r24
    2556:	8d ec       	ldi	r24, 0xCD	; 205
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	93 83       	std	Z+3, r25	; 0x03
    255c:	82 83       	std	Z+2, r24	; 0x02
    255e:	8c ec       	ldi	r24, 0xCC	; 204
    2560:	90 e0       	ldi	r25, 0x00	; 0
    2562:	95 83       	std	Z+5, r25	; 0x05
    2564:	84 83       	std	Z+4, r24	; 0x04
    2566:	88 ec       	ldi	r24, 0xC8	; 200
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	97 83       	std	Z+7, r25	; 0x07
    256c:	86 83       	std	Z+6, r24	; 0x06
    256e:	89 ec       	ldi	r24, 0xC9	; 201
    2570:	90 e0       	ldi	r25, 0x00	; 0
    2572:	91 87       	std	Z+9, r25	; 0x09
    2574:	80 87       	std	Z+8, r24	; 0x08
    2576:	8a ec       	ldi	r24, 0xCA	; 202
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	93 87       	std	Z+11, r25	; 0x0b
    257c:	82 87       	std	Z+10, r24	; 0x0a
    257e:	8e ec       	ldi	r24, 0xCE	; 206
    2580:	90 e0       	ldi	r25, 0x00	; 0
    2582:	95 87       	std	Z+13, r25	; 0x0d
    2584:	84 87       	std	Z+12, r24	; 0x0c
    2586:	17 86       	std	Z+15, r1	; 0x0f
    2588:	10 8a       	std	Z+16, r1	; 0x10
    258a:	11 8a       	std	Z+17, r1	; 0x11
    258c:	12 8a       	std	Z+18, r1	; 0x12
    258e:	08 95       	ret

00002590 <__vector_51>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial2_available() {
  return Serial2.available();
}
    2590:	1f 92       	push	r1
    2592:	0f 92       	push	r0
    2594:	0f b6       	in	r0, 0x3f	; 63
    2596:	0f 92       	push	r0
    2598:	11 24       	eor	r1, r1
    259a:	0b b6       	in	r0, 0x3b	; 59
    259c:	0f 92       	push	r0
    259e:	2f 93       	push	r18
    25a0:	8f 93       	push	r24
    25a2:	9f 93       	push	r25
    25a4:	af 93       	push	r26
    25a6:	bf 93       	push	r27
    25a8:	ef 93       	push	r30
    25aa:	ff 93       	push	r31
    25ac:	e0 91 0d 05 	lds	r30, 0x050D	; 0x80050d <Serial2+0x6>
    25b0:	f0 91 0e 05 	lds	r31, 0x050E	; 0x80050e <Serial2+0x7>
    25b4:	80 81       	ld	r24, Z
    25b6:	82 fd       	sbrc	r24, 2
    25b8:	14 c0       	rjmp	.+40     	; 0x25e2 <__vector_51+0x52>
    25ba:	e7 e0       	ldi	r30, 0x07	; 7
    25bc:	f5 e0       	ldi	r31, 0x05	; 5
    25be:	a4 85       	ldd	r26, Z+12	; 0x0c
    25c0:	b5 85       	ldd	r27, Z+13	; 0x0d
    25c2:	2c 91       	ld	r18, X
    25c4:	87 85       	ldd	r24, Z+15	; 0x0f
    25c6:	8f 5f       	subi	r24, 0xFF	; 255
    25c8:	8f 70       	andi	r24, 0x0F	; 15
    25ca:	90 89       	ldd	r25, Z+16	; 0x10
    25cc:	89 17       	cp	r24, r25
    25ce:	71 f0       	breq	.+28     	; 0x25ec <__vector_51+0x5c>
    25d0:	df 01       	movw	r26, r30
    25d2:	e7 85       	ldd	r30, Z+15	; 0x0f
    25d4:	f0 e0       	ldi	r31, 0x00	; 0
    25d6:	e9 5f       	subi	r30, 0xF9	; 249
    25d8:	fa 4f       	sbci	r31, 0xFA	; 250
    25da:	23 8b       	std	Z+19, r18	; 0x13
    25dc:	1f 96       	adiw	r26, 0x0f	; 15
    25de:	8c 93       	st	X, r24
    25e0:	05 c0       	rjmp	.+10     	; 0x25ec <__vector_51+0x5c>
    25e2:	e0 91 13 05 	lds	r30, 0x0513	; 0x800513 <Serial2+0xc>
    25e6:	f0 91 14 05 	lds	r31, 0x0514	; 0x800514 <Serial2+0xd>
    25ea:	80 81       	ld	r24, Z
    25ec:	ff 91       	pop	r31
    25ee:	ef 91       	pop	r30
    25f0:	bf 91       	pop	r27
    25f2:	af 91       	pop	r26
    25f4:	9f 91       	pop	r25
    25f6:	8f 91       	pop	r24
    25f8:	2f 91       	pop	r18
    25fa:	0f 90       	pop	r0
    25fc:	0b be       	out	0x3b, r0	; 59
    25fe:	0f 90       	pop	r0
    2600:	0f be       	out	0x3f, r0	; 63
    2602:	0f 90       	pop	r0
    2604:	1f 90       	pop	r1
    2606:	18 95       	reti

00002608 <__vector_52>:
    2608:	1f 92       	push	r1
    260a:	0f 92       	push	r0
    260c:	0f b6       	in	r0, 0x3f	; 63
    260e:	0f 92       	push	r0
    2610:	11 24       	eor	r1, r1
    2612:	0b b6       	in	r0, 0x3b	; 59
    2614:	0f 92       	push	r0
    2616:	2f 93       	push	r18
    2618:	3f 93       	push	r19
    261a:	4f 93       	push	r20
    261c:	5f 93       	push	r21
    261e:	6f 93       	push	r22
    2620:	7f 93       	push	r23
    2622:	8f 93       	push	r24
    2624:	9f 93       	push	r25
    2626:	af 93       	push	r26
    2628:	bf 93       	push	r27
    262a:	ef 93       	push	r30
    262c:	ff 93       	push	r31
    262e:	87 e0       	ldi	r24, 0x07	; 7
    2630:	95 e0       	ldi	r25, 0x05	; 5
    2632:	f9 dd       	rcall	.-1038   	; 0x2226 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    2634:	ff 91       	pop	r31
    2636:	ef 91       	pop	r30
    2638:	bf 91       	pop	r27
    263a:	af 91       	pop	r26
    263c:	9f 91       	pop	r25
    263e:	8f 91       	pop	r24
    2640:	7f 91       	pop	r23
    2642:	6f 91       	pop	r22
    2644:	5f 91       	pop	r21
    2646:	4f 91       	pop	r20
    2648:	3f 91       	pop	r19
    264a:	2f 91       	pop	r18
    264c:	0f 90       	pop	r0
    264e:	0b be       	out	0x3b, r0	; 59
    2650:	0f 90       	pop	r0
    2652:	0f be       	out	0x3f, r0	; 63
    2654:	0f 90       	pop	r0
    2656:	1f 90       	pop	r1
    2658:	18 95       	reti

0000265a <_GLOBAL__sub_I___vector_51>:
    265a:	e7 e0       	ldi	r30, 0x07	; 7
    265c:	f5 e0       	ldi	r31, 0x05	; 5
    265e:	84 e2       	ldi	r24, 0x24	; 36
    2660:	92 e0       	ldi	r25, 0x02	; 2
    2662:	91 83       	std	Z+1, r25	; 0x01
    2664:	80 83       	st	Z, r24
    2666:	85 ed       	ldi	r24, 0xD5	; 213
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	93 83       	std	Z+3, r25	; 0x03
    266c:	82 83       	std	Z+2, r24	; 0x02
    266e:	84 ed       	ldi	r24, 0xD4	; 212
    2670:	90 e0       	ldi	r25, 0x00	; 0
    2672:	95 83       	std	Z+5, r25	; 0x05
    2674:	84 83       	std	Z+4, r24	; 0x04
    2676:	80 ed       	ldi	r24, 0xD0	; 208
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	97 83       	std	Z+7, r25	; 0x07
    267c:	86 83       	std	Z+6, r24	; 0x06
    267e:	81 ed       	ldi	r24, 0xD1	; 209
    2680:	90 e0       	ldi	r25, 0x00	; 0
    2682:	91 87       	std	Z+9, r25	; 0x09
    2684:	80 87       	std	Z+8, r24	; 0x08
    2686:	82 ed       	ldi	r24, 0xD2	; 210
    2688:	90 e0       	ldi	r25, 0x00	; 0
    268a:	93 87       	std	Z+11, r25	; 0x0b
    268c:	82 87       	std	Z+10, r24	; 0x0a
    268e:	86 ed       	ldi	r24, 0xD6	; 214
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	95 87       	std	Z+13, r25	; 0x0d
    2694:	84 87       	std	Z+12, r24	; 0x0c
    2696:	17 86       	std	Z+15, r1	; 0x0f
    2698:	10 8a       	std	Z+16, r1	; 0x10
    269a:	11 8a       	std	Z+17, r1	; 0x11
    269c:	12 8a       	std	Z+18, r1	; 0x12
    269e:	08 95       	ret

000026a0 <__vector_54>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial3_available() {
  return Serial3.available();
}
    26a0:	1f 92       	push	r1
    26a2:	0f 92       	push	r0
    26a4:	0f b6       	in	r0, 0x3f	; 63
    26a6:	0f 92       	push	r0
    26a8:	11 24       	eor	r1, r1
    26aa:	0b b6       	in	r0, 0x3b	; 59
    26ac:	0f 92       	push	r0
    26ae:	2f 93       	push	r18
    26b0:	8f 93       	push	r24
    26b2:	9f 93       	push	r25
    26b4:	af 93       	push	r26
    26b6:	bf 93       	push	r27
    26b8:	ef 93       	push	r30
    26ba:	ff 93       	push	r31
    26bc:	e0 91 40 05 	lds	r30, 0x0540	; 0x800540 <Serial3+0x6>
    26c0:	f0 91 41 05 	lds	r31, 0x0541	; 0x800541 <Serial3+0x7>
    26c4:	80 81       	ld	r24, Z
    26c6:	82 fd       	sbrc	r24, 2
    26c8:	14 c0       	rjmp	.+40     	; 0x26f2 <__vector_54+0x52>
    26ca:	ea e3       	ldi	r30, 0x3A	; 58
    26cc:	f5 e0       	ldi	r31, 0x05	; 5
    26ce:	a4 85       	ldd	r26, Z+12	; 0x0c
    26d0:	b5 85       	ldd	r27, Z+13	; 0x0d
    26d2:	2c 91       	ld	r18, X
    26d4:	87 85       	ldd	r24, Z+15	; 0x0f
    26d6:	8f 5f       	subi	r24, 0xFF	; 255
    26d8:	8f 70       	andi	r24, 0x0F	; 15
    26da:	90 89       	ldd	r25, Z+16	; 0x10
    26dc:	89 17       	cp	r24, r25
    26de:	71 f0       	breq	.+28     	; 0x26fc <__vector_54+0x5c>
    26e0:	df 01       	movw	r26, r30
    26e2:	e7 85       	ldd	r30, Z+15	; 0x0f
    26e4:	f0 e0       	ldi	r31, 0x00	; 0
    26e6:	e6 5c       	subi	r30, 0xC6	; 198
    26e8:	fa 4f       	sbci	r31, 0xFA	; 250
    26ea:	23 8b       	std	Z+19, r18	; 0x13
    26ec:	1f 96       	adiw	r26, 0x0f	; 15
    26ee:	8c 93       	st	X, r24
    26f0:	05 c0       	rjmp	.+10     	; 0x26fc <__vector_54+0x5c>
    26f2:	e0 91 46 05 	lds	r30, 0x0546	; 0x800546 <Serial3+0xc>
    26f6:	f0 91 47 05 	lds	r31, 0x0547	; 0x800547 <Serial3+0xd>
    26fa:	80 81       	ld	r24, Z
    26fc:	ff 91       	pop	r31
    26fe:	ef 91       	pop	r30
    2700:	bf 91       	pop	r27
    2702:	af 91       	pop	r26
    2704:	9f 91       	pop	r25
    2706:	8f 91       	pop	r24
    2708:	2f 91       	pop	r18
    270a:	0f 90       	pop	r0
    270c:	0b be       	out	0x3b, r0	; 59
    270e:	0f 90       	pop	r0
    2710:	0f be       	out	0x3f, r0	; 63
    2712:	0f 90       	pop	r0
    2714:	1f 90       	pop	r1
    2716:	18 95       	reti

00002718 <__vector_55>:
    2718:	1f 92       	push	r1
    271a:	0f 92       	push	r0
    271c:	0f b6       	in	r0, 0x3f	; 63
    271e:	0f 92       	push	r0
    2720:	11 24       	eor	r1, r1
    2722:	0b b6       	in	r0, 0x3b	; 59
    2724:	0f 92       	push	r0
    2726:	2f 93       	push	r18
    2728:	3f 93       	push	r19
    272a:	4f 93       	push	r20
    272c:	5f 93       	push	r21
    272e:	6f 93       	push	r22
    2730:	7f 93       	push	r23
    2732:	8f 93       	push	r24
    2734:	9f 93       	push	r25
    2736:	af 93       	push	r26
    2738:	bf 93       	push	r27
    273a:	ef 93       	push	r30
    273c:	ff 93       	push	r31
    273e:	8a e3       	ldi	r24, 0x3A	; 58
    2740:	95 e0       	ldi	r25, 0x05	; 5
    2742:	71 dd       	rcall	.-1310   	; 0x2226 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    2744:	ff 91       	pop	r31
    2746:	ef 91       	pop	r30
    2748:	bf 91       	pop	r27
    274a:	af 91       	pop	r26
    274c:	9f 91       	pop	r25
    274e:	8f 91       	pop	r24
    2750:	7f 91       	pop	r23
    2752:	6f 91       	pop	r22
    2754:	5f 91       	pop	r21
    2756:	4f 91       	pop	r20
    2758:	3f 91       	pop	r19
    275a:	2f 91       	pop	r18
    275c:	0f 90       	pop	r0
    275e:	0b be       	out	0x3b, r0	; 59
    2760:	0f 90       	pop	r0
    2762:	0f be       	out	0x3f, r0	; 63
    2764:	0f 90       	pop	r0
    2766:	1f 90       	pop	r1
    2768:	18 95       	reti

0000276a <_GLOBAL__sub_I___vector_54>:
    276a:	ea e3       	ldi	r30, 0x3A	; 58
    276c:	f5 e0       	ldi	r31, 0x05	; 5
    276e:	84 e2       	ldi	r24, 0x24	; 36
    2770:	92 e0       	ldi	r25, 0x02	; 2
    2772:	91 83       	std	Z+1, r25	; 0x01
    2774:	80 83       	st	Z, r24
    2776:	85 e3       	ldi	r24, 0x35	; 53
    2778:	91 e0       	ldi	r25, 0x01	; 1
    277a:	93 83       	std	Z+3, r25	; 0x03
    277c:	82 83       	std	Z+2, r24	; 0x02
    277e:	84 e3       	ldi	r24, 0x34	; 52
    2780:	91 e0       	ldi	r25, 0x01	; 1
    2782:	95 83       	std	Z+5, r25	; 0x05
    2784:	84 83       	std	Z+4, r24	; 0x04
    2786:	80 e3       	ldi	r24, 0x30	; 48
    2788:	91 e0       	ldi	r25, 0x01	; 1
    278a:	97 83       	std	Z+7, r25	; 0x07
    278c:	86 83       	std	Z+6, r24	; 0x06
    278e:	81 e3       	ldi	r24, 0x31	; 49
    2790:	91 e0       	ldi	r25, 0x01	; 1
    2792:	91 87       	std	Z+9, r25	; 0x09
    2794:	80 87       	std	Z+8, r24	; 0x08
    2796:	82 e3       	ldi	r24, 0x32	; 50
    2798:	91 e0       	ldi	r25, 0x01	; 1
    279a:	93 87       	std	Z+11, r25	; 0x0b
    279c:	82 87       	std	Z+10, r24	; 0x0a
    279e:	86 e3       	ldi	r24, 0x36	; 54
    27a0:	91 e0       	ldi	r25, 0x01	; 1
    27a2:	95 87       	std	Z+13, r25	; 0x0d
    27a4:	84 87       	std	Z+12, r24	; 0x0c
    27a6:	17 86       	std	Z+15, r1	; 0x0f
    27a8:	10 8a       	std	Z+16, r1	; 0x10
    27aa:	11 8a       	std	Z+17, r1	; 0x11
    27ac:	12 8a       	std	Z+18, r1	; 0x12
    27ae:	08 95       	ret

000027b0 <_ZN13HardwareServo5beginEv>:
void HardwareServo::setMaxA(uint16_t us){
	_maxA = us;
}

void HardwareServo::setMaxB(uint16_t us){
	_maxB = us;
    27b0:	fc 01       	movw	r30, r24
    27b2:	a2 81       	ldd	r26, Z+2	; 0x02
    27b4:	b3 81       	ldd	r27, Z+3	; 0x03
    27b6:	82 e0       	ldi	r24, 0x02	; 2
    27b8:	8c 93       	st	X, r24
    27ba:	a4 81       	ldd	r26, Z+4	; 0x04
    27bc:	b5 81       	ldd	r27, Z+5	; 0x05
    27be:	8a e1       	ldi	r24, 0x1A	; 26
    27c0:	8c 93       	st	X, r24
    27c2:	01 90       	ld	r0, Z+
    27c4:	f0 81       	ld	r31, Z
    27c6:	e0 2d       	mov	r30, r0
    27c8:	80 e4       	ldi	r24, 0x40	; 64
    27ca:	9c e9       	ldi	r25, 0x9C	; 156
    27cc:	91 83       	std	Z+1, r25	; 0x01
    27ce:	80 83       	st	Z, r24
    27d0:	08 95       	ret

000027d2 <_ZN13HardwareServo7EnableAEv>:
    27d2:	fc 01       	movw	r30, r24
    27d4:	a2 81       	ldd	r26, Z+2	; 0x02
    27d6:	b3 81       	ldd	r27, Z+3	; 0x03
    27d8:	8c 91       	ld	r24, X
    27da:	80 68       	ori	r24, 0x80	; 128
    27dc:	8c 93       	st	X, r24
    27de:	a4 85       	ldd	r26, Z+12	; 0x0c
    27e0:	b5 85       	ldd	r27, Z+13	; 0x0d
    27e2:	9c 91       	ld	r25, X
    27e4:	86 85       	ldd	r24, Z+14	; 0x0e
    27e6:	89 2b       	or	r24, r25
    27e8:	8c 93       	st	X, r24
    27ea:	08 95       	ret

000027ec <_ZN13HardwareServo7EnableCEv>:
    27ec:	fc 01       	movw	r30, r24
    27ee:	a2 81       	ldd	r26, Z+2	; 0x02
    27f0:	b3 81       	ldd	r27, Z+3	; 0x03
    27f2:	8c 91       	ld	r24, X
    27f4:	88 60       	ori	r24, 0x08	; 8
    27f6:	8c 93       	st	X, r24
    27f8:	a4 85       	ldd	r26, Z+12	; 0x0c
    27fa:	b5 85       	ldd	r27, Z+13	; 0x0d
    27fc:	9c 91       	ld	r25, X
    27fe:	80 89       	ldd	r24, Z+16	; 0x10
    2800:	89 2b       	or	r24, r25
    2802:	8c 93       	st	X, r24
    2804:	08 95       	ret

00002806 <_ZN13HardwareServo9setPulseAEh>:
    2806:	0f 93       	push	r16
    2808:	1f 93       	push	r17
    280a:	cf 93       	push	r28
    280c:	df 93       	push	r29
    280e:	fc 01       	movw	r30, r24
    2810:	c6 81       	ldd	r28, Z+6	; 0x06
    2812:	d7 81       	ldd	r29, Z+7	; 0x07
    2814:	01 89       	ldd	r16, Z+17	; 0x11
    2816:	12 89       	ldd	r17, Z+18	; 0x12
    2818:	27 89       	ldd	r18, Z+23	; 0x17
    281a:	30 8d       	ldd	r19, Z+24	; 0x18
    281c:	20 1b       	sub	r18, r16
    281e:	31 0b       	sbc	r19, r17
    2820:	a6 2f       	mov	r26, r22
    2822:	b0 e0       	ldi	r27, 0x00	; 0
    2824:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <__umulhisi3>
    2828:	2f ef       	ldi	r18, 0xFF	; 255
    282a:	30 e0       	ldi	r19, 0x00	; 0
    282c:	40 e0       	ldi	r20, 0x00	; 0
    282e:	50 e0       	ldi	r21, 0x00	; 0
    2830:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <__udivmodsi4>
    2834:	da 01       	movw	r26, r20
    2836:	c9 01       	movw	r24, r18
    2838:	80 0f       	add	r24, r16
    283a:	91 1f       	adc	r25, r17
    283c:	a1 1d       	adc	r26, r1
    283e:	b1 1d       	adc	r27, r1
    2840:	9c 01       	movw	r18, r24
    2842:	22 0f       	add	r18, r18
    2844:	33 1f       	adc	r19, r19
    2846:	39 83       	std	Y+1, r19	; 0x01
    2848:	28 83       	st	Y, r18
    284a:	df 91       	pop	r29
    284c:	cf 91       	pop	r28
    284e:	1f 91       	pop	r17
    2850:	0f 91       	pop	r16
    2852:	08 95       	ret

00002854 <_ZN13HardwareServo9setPulseCEh>:
    2854:	0f 93       	push	r16
    2856:	1f 93       	push	r17
    2858:	cf 93       	push	r28
    285a:	df 93       	push	r29
    285c:	fc 01       	movw	r30, r24
    285e:	c2 85       	ldd	r28, Z+10	; 0x0a
    2860:	d3 85       	ldd	r29, Z+11	; 0x0b
    2862:	05 89       	ldd	r16, Z+21	; 0x15
    2864:	16 89       	ldd	r17, Z+22	; 0x16
    2866:	23 8d       	ldd	r18, Z+27	; 0x1b
    2868:	34 8d       	ldd	r19, Z+28	; 0x1c
    286a:	20 1b       	sub	r18, r16
    286c:	31 0b       	sbc	r19, r17
    286e:	a6 2f       	mov	r26, r22
    2870:	b0 e0       	ldi	r27, 0x00	; 0
    2872:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <__umulhisi3>
    2876:	2f ef       	ldi	r18, 0xFF	; 255
    2878:	30 e0       	ldi	r19, 0x00	; 0
    287a:	40 e0       	ldi	r20, 0x00	; 0
    287c:	50 e0       	ldi	r21, 0x00	; 0
    287e:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <__udivmodsi4>
    2882:	da 01       	movw	r26, r20
    2884:	c9 01       	movw	r24, r18
    2886:	80 0f       	add	r24, r16
    2888:	91 1f       	adc	r25, r17
    288a:	a1 1d       	adc	r26, r1
    288c:	b1 1d       	adc	r27, r1
    288e:	9c 01       	movw	r18, r24
    2890:	22 0f       	add	r18, r18
    2892:	33 1f       	adc	r19, r19
    2894:	39 83       	std	Y+1, r19	; 0x01
    2896:	28 83       	st	Y, r18
    2898:	df 91       	pop	r29
    289a:	cf 91       	pop	r28
    289c:	1f 91       	pop	r17
    289e:	0f 91       	pop	r16
    28a0:	08 95       	ret

000028a2 <_ZN13HardwareServo7setMinAEj>:
    28a2:	fc 01       	movw	r30, r24
    28a4:	72 8b       	std	Z+18, r23	; 0x12
    28a6:	61 8b       	std	Z+17, r22	; 0x11
    28a8:	08 95       	ret

000028aa <_ZN13HardwareServo7setMinCEj>:
    28aa:	fc 01       	movw	r30, r24
    28ac:	76 8b       	std	Z+22, r23	; 0x16
    28ae:	65 8b       	std	Z+21, r22	; 0x15
    28b0:	08 95       	ret

000028b2 <_ZN13HardwareServo7setMaxAEj>:
    28b2:	fc 01       	movw	r30, r24
    28b4:	70 8f       	std	Z+24, r23	; 0x18
    28b6:	67 8b       	std	Z+23, r22	; 0x17
    28b8:	08 95       	ret

000028ba <_ZN13HardwareServo7setMaxCEj>:
}

void HardwareServo::setMaxC(uint16_t us){
	_maxC = us;
    28ba:	fc 01       	movw	r30, r24
    28bc:	74 8f       	std	Z+28, r23	; 0x1c
    28be:	63 8f       	std	Z+27, r22	; 0x1b
    28c0:	08 95       	ret

000028c2 <_GLOBAL__sub_I__ZN13HardwareServoC2ERVjRVhS3_S1_S1_S1_S3_hhh>:
#define CLK_DIV_1024 (_B(CS02) | _BV(CS00))

HardwareServo::HardwareServo(Register16 &icr, Register &tccrA, Register &tccrB, Register16 &ocrA, Register16 &ocrB, Register16 &ocrC, Register &ddr, const uint8_t pinA, const uint8_t pinB, const uint8_t pinC)
 : _icr(&icr), _tccrA(&tccrA), _tccrB(&tccrB), _ocrA(&ocrA), _ocrB(&ocrB), _ocrC(&ocrC),
  _DDR(&ddr), _PINA(pinA), _PINB(pinB), _PINC(pinC),
  _minA(1000), _minB(1000), _minC(1000), _maxA(2000), _maxB(2000), _maxC(2000)
    28c2:	e4 ec       	ldi	r30, 0xC4	; 196
    28c4:	f5 e0       	ldi	r31, 0x05	; 5
    28c6:	86 e8       	ldi	r24, 0x86	; 134
    28c8:	90 e0       	ldi	r25, 0x00	; 0
    28ca:	91 83       	std	Z+1, r25	; 0x01
    28cc:	80 83       	st	Z, r24
    28ce:	80 e8       	ldi	r24, 0x80	; 128
    28d0:	90 e0       	ldi	r25, 0x00	; 0
    28d2:	93 83       	std	Z+3, r25	; 0x03
    28d4:	82 83       	std	Z+2, r24	; 0x02
    28d6:	81 e8       	ldi	r24, 0x81	; 129
    28d8:	90 e0       	ldi	r25, 0x00	; 0
    28da:	95 83       	std	Z+5, r25	; 0x05
    28dc:	84 83       	std	Z+4, r24	; 0x04
    28de:	88 e8       	ldi	r24, 0x88	; 136
    28e0:	90 e0       	ldi	r25, 0x00	; 0
    28e2:	97 83       	std	Z+7, r25	; 0x07
    28e4:	86 83       	std	Z+6, r24	; 0x06
    28e6:	8a e8       	ldi	r24, 0x8A	; 138
    28e8:	90 e0       	ldi	r25, 0x00	; 0
    28ea:	91 87       	std	Z+9, r25	; 0x09
    28ec:	80 87       	std	Z+8, r24	; 0x08
    28ee:	8c e8       	ldi	r24, 0x8C	; 140
    28f0:	90 e0       	ldi	r25, 0x00	; 0
    28f2:	93 87       	std	Z+11, r25	; 0x0b
    28f4:	82 87       	std	Z+10, r24	; 0x0a
    28f6:	84 e2       	ldi	r24, 0x24	; 36
    28f8:	90 e0       	ldi	r25, 0x00	; 0
    28fa:	95 87       	std	Z+13, r25	; 0x0d
    28fc:	84 87       	std	Z+12, r24	; 0x0c
    28fe:	40 e2       	ldi	r20, 0x20	; 32
    2900:	46 87       	std	Z+14, r20	; 0x0e
    2902:	80 e4       	ldi	r24, 0x40	; 64
    2904:	87 87       	std	Z+15, r24	; 0x0f
    2906:	80 e8       	ldi	r24, 0x80	; 128
    2908:	80 8b       	std	Z+16, r24	; 0x10
    290a:	28 ee       	ldi	r18, 0xE8	; 232
    290c:	33 e0       	ldi	r19, 0x03	; 3
    290e:	32 8b       	std	Z+18, r19	; 0x12
    2910:	21 8b       	std	Z+17, r18	; 0x11
    2912:	34 8b       	std	Z+20, r19	; 0x14
    2914:	23 8b       	std	Z+19, r18	; 0x13
    2916:	36 8b       	std	Z+22, r19	; 0x16
    2918:	25 8b       	std	Z+21, r18	; 0x15
    291a:	80 ed       	ldi	r24, 0xD0	; 208
    291c:	97 e0       	ldi	r25, 0x07	; 7
    291e:	90 8f       	std	Z+24, r25	; 0x18
    2920:	87 8b       	std	Z+23, r24	; 0x17
    2922:	92 8f       	std	Z+26, r25	; 0x1a
    2924:	81 8f       	std	Z+25, r24	; 0x19
    2926:	94 8f       	std	Z+28, r25	; 0x1c
    2928:	83 8f       	std	Z+27, r24	; 0x1b
    292a:	e7 ea       	ldi	r30, 0xA7	; 167
    292c:	f5 e0       	ldi	r31, 0x05	; 5
    292e:	66 e9       	ldi	r22, 0x96	; 150
    2930:	70 e0       	ldi	r23, 0x00	; 0
    2932:	71 83       	std	Z+1, r23	; 0x01
    2934:	60 83       	st	Z, r22
    2936:	60 e9       	ldi	r22, 0x90	; 144
    2938:	70 e0       	ldi	r23, 0x00	; 0
    293a:	73 83       	std	Z+3, r23	; 0x03
    293c:	62 83       	std	Z+2, r22	; 0x02
    293e:	61 e9       	ldi	r22, 0x91	; 145
    2940:	70 e0       	ldi	r23, 0x00	; 0
    2942:	75 83       	std	Z+5, r23	; 0x05
    2944:	64 83       	std	Z+4, r22	; 0x04
    2946:	68 e9       	ldi	r22, 0x98	; 152
    2948:	70 e0       	ldi	r23, 0x00	; 0
    294a:	77 83       	std	Z+7, r23	; 0x07
    294c:	66 83       	std	Z+6, r22	; 0x06
    294e:	6a e9       	ldi	r22, 0x9A	; 154
    2950:	70 e0       	ldi	r23, 0x00	; 0
    2952:	71 87       	std	Z+9, r23	; 0x09
    2954:	60 87       	std	Z+8, r22	; 0x08
    2956:	6c e9       	ldi	r22, 0x9C	; 156
    2958:	70 e0       	ldi	r23, 0x00	; 0
    295a:	73 87       	std	Z+11, r23	; 0x0b
    295c:	62 87       	std	Z+10, r22	; 0x0a
    295e:	6d e2       	ldi	r22, 0x2D	; 45
    2960:	70 e0       	ldi	r23, 0x00	; 0
    2962:	75 87       	std	Z+13, r23	; 0x0d
    2964:	64 87       	std	Z+12, r22	; 0x0c
    2966:	68 e0       	ldi	r22, 0x08	; 8
    2968:	66 87       	std	Z+14, r22	; 0x0e
    296a:	50 e1       	ldi	r21, 0x10	; 16
    296c:	57 87       	std	Z+15, r21	; 0x0f
    296e:	40 8b       	std	Z+16, r20	; 0x10
    2970:	32 8b       	std	Z+18, r19	; 0x12
    2972:	21 8b       	std	Z+17, r18	; 0x11
    2974:	34 8b       	std	Z+20, r19	; 0x14
    2976:	23 8b       	std	Z+19, r18	; 0x13
    2978:	36 8b       	std	Z+22, r19	; 0x16
    297a:	25 8b       	std	Z+21, r18	; 0x15
    297c:	90 8f       	std	Z+24, r25	; 0x18
    297e:	87 8b       	std	Z+23, r24	; 0x17
    2980:	92 8f       	std	Z+26, r25	; 0x1a
    2982:	81 8f       	std	Z+25, r24	; 0x19
    2984:	94 8f       	std	Z+28, r25	; 0x1c
    2986:	83 8f       	std	Z+27, r24	; 0x1b
    2988:	ea e8       	ldi	r30, 0x8A	; 138
    298a:	f5 e0       	ldi	r31, 0x05	; 5
    298c:	a6 ea       	ldi	r26, 0xA6	; 166
    298e:	b0 e0       	ldi	r27, 0x00	; 0
    2990:	b1 83       	std	Z+1, r27	; 0x01
    2992:	a0 83       	st	Z, r26
    2994:	a0 ea       	ldi	r26, 0xA0	; 160
    2996:	b0 e0       	ldi	r27, 0x00	; 0
    2998:	b3 83       	std	Z+3, r27	; 0x03
    299a:	a2 83       	std	Z+2, r26	; 0x02
    299c:	a1 ea       	ldi	r26, 0xA1	; 161
    299e:	b0 e0       	ldi	r27, 0x00	; 0
    29a0:	b5 83       	std	Z+5, r27	; 0x05
    29a2:	a4 83       	std	Z+4, r26	; 0x04
    29a4:	a8 ea       	ldi	r26, 0xA8	; 168
    29a6:	b0 e0       	ldi	r27, 0x00	; 0
    29a8:	b7 83       	std	Z+7, r27	; 0x07
    29aa:	a6 83       	std	Z+6, r26	; 0x06
    29ac:	aa ea       	ldi	r26, 0xAA	; 170
    29ae:	b0 e0       	ldi	r27, 0x00	; 0
    29b0:	b1 87       	std	Z+9, r27	; 0x09
    29b2:	a0 87       	std	Z+8, r26	; 0x08
    29b4:	ac ea       	ldi	r26, 0xAC	; 172
    29b6:	b0 e0       	ldi	r27, 0x00	; 0
    29b8:	b3 87       	std	Z+11, r27	; 0x0b
    29ba:	a2 87       	std	Z+10, r26	; 0x0a
    29bc:	a1 e0       	ldi	r26, 0x01	; 1
    29be:	b1 e0       	ldi	r27, 0x01	; 1
    29c0:	b5 87       	std	Z+13, r27	; 0x0d
    29c2:	a4 87       	std	Z+12, r26	; 0x0c
    29c4:	66 87       	std	Z+14, r22	; 0x0e
    29c6:	57 87       	std	Z+15, r21	; 0x0f
    29c8:	40 8b       	std	Z+16, r20	; 0x10
    29ca:	32 8b       	std	Z+18, r19	; 0x12
    29cc:	21 8b       	std	Z+17, r18	; 0x11
    29ce:	34 8b       	std	Z+20, r19	; 0x14
    29d0:	23 8b       	std	Z+19, r18	; 0x13
    29d2:	36 8b       	std	Z+22, r19	; 0x16
    29d4:	25 8b       	std	Z+21, r18	; 0x15
    29d6:	90 8f       	std	Z+24, r25	; 0x18
    29d8:	87 8b       	std	Z+23, r24	; 0x17
    29da:	92 8f       	std	Z+26, r25	; 0x1a
    29dc:	81 8f       	std	Z+25, r24	; 0x19
    29de:	94 8f       	std	Z+28, r25	; 0x1c
    29e0:	83 8f       	std	Z+27, r24	; 0x1b
    29e2:	ed e6       	ldi	r30, 0x6D	; 109
    29e4:	f5 e0       	ldi	r31, 0x05	; 5
    29e6:	a6 e2       	ldi	r26, 0x26	; 38
    29e8:	b1 e0       	ldi	r27, 0x01	; 1
    29ea:	b1 83       	std	Z+1, r27	; 0x01
    29ec:	a0 83       	st	Z, r26
    29ee:	a0 e2       	ldi	r26, 0x20	; 32
    29f0:	b1 e0       	ldi	r27, 0x01	; 1
    29f2:	b3 83       	std	Z+3, r27	; 0x03
    29f4:	a2 83       	std	Z+2, r26	; 0x02
    29f6:	a1 e2       	ldi	r26, 0x21	; 33
    29f8:	b1 e0       	ldi	r27, 0x01	; 1
    29fa:	b5 83       	std	Z+5, r27	; 0x05
    29fc:	a4 83       	std	Z+4, r26	; 0x04
    29fe:	a8 e2       	ldi	r26, 0x28	; 40
    2a00:	b1 e0       	ldi	r27, 0x01	; 1
    2a02:	b7 83       	std	Z+7, r27	; 0x07
    2a04:	a6 83       	std	Z+6, r26	; 0x06
    2a06:	aa e2       	ldi	r26, 0x2A	; 42
    2a08:	b1 e0       	ldi	r27, 0x01	; 1
    2a0a:	b1 87       	std	Z+9, r27	; 0x09
    2a0c:	a0 87       	std	Z+8, r26	; 0x08
    2a0e:	ac e2       	ldi	r26, 0x2C	; 44
    2a10:	b1 e0       	ldi	r27, 0x01	; 1
    2a12:	b3 87       	std	Z+11, r27	; 0x0b
    2a14:	a2 87       	std	Z+10, r26	; 0x0a
    2a16:	aa e0       	ldi	r26, 0x0A	; 10
    2a18:	b1 e0       	ldi	r27, 0x01	; 1
    2a1a:	b5 87       	std	Z+13, r27	; 0x0d
    2a1c:	a4 87       	std	Z+12, r26	; 0x0c
    2a1e:	66 87       	std	Z+14, r22	; 0x0e
    2a20:	57 87       	std	Z+15, r21	; 0x0f
    2a22:	40 8b       	std	Z+16, r20	; 0x10
    2a24:	32 8b       	std	Z+18, r19	; 0x12
    2a26:	21 8b       	std	Z+17, r18	; 0x11
    2a28:	34 8b       	std	Z+20, r19	; 0x14
    2a2a:	23 8b       	std	Z+19, r18	; 0x13
    2a2c:	36 8b       	std	Z+22, r19	; 0x16
    2a2e:	25 8b       	std	Z+21, r18	; 0x15
    2a30:	90 8f       	std	Z+24, r25	; 0x18
    2a32:	87 8b       	std	Z+23, r24	; 0x17
    2a34:	92 8f       	std	Z+26, r25	; 0x1a
    2a36:	81 8f       	std	Z+25, r24	; 0x19
    2a38:	94 8f       	std	Z+28, r25	; 0x1c
    2a3a:	83 8f       	std	Z+27, r24	; 0x1b
    2a3c:	08 95       	ret

00002a3e <_ZN13HardwareTimer12findPrescaleEf>:
	beginMs(us / 1000.0);
}

void HardwareTimer::beginNs(float ns){
	beginMs(ns / 1000000.0);
}
    2a3e:	cf 92       	push	r12
    2a40:	df 92       	push	r13
    2a42:	ef 92       	push	r14
    2a44:	ff 92       	push	r15
    2a46:	cf 93       	push	r28
    2a48:	df 93       	push	r29
    2a4a:	ec 01       	movw	r28, r24
    2a4c:	cb 01       	movw	r24, r22
    2a4e:	ba 01       	movw	r22, r20
    2a50:	20 e0       	ldi	r18, 0x00	; 0
    2a52:	30 e0       	ldi	r19, 0x00	; 0
    2a54:	4a e7       	ldi	r20, 0x7A	; 122
    2a56:	56 e4       	ldi	r21, 0x46	; 70
    2a58:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <__mulsf3>
    2a5c:	20 e0       	ldi	r18, 0x00	; 0
    2a5e:	30 e0       	ldi	r19, 0x00	; 0
    2a60:	40 e8       	ldi	r20, 0x80	; 128
    2a62:	5b e3       	ldi	r21, 0x3B	; 59
    2a64:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <__mulsf3>
    2a68:	6b 01       	movw	r12, r22
    2a6a:	7c 01       	movw	r14, r24
    2a6c:	20 e0       	ldi	r18, 0x00	; 0
    2a6e:	30 e0       	ldi	r19, 0x00	; 0
    2a70:	40 e8       	ldi	r20, 0x80	; 128
    2a72:	5f e3       	ldi	r21, 0x3F	; 63
    2a74:	0e 94 43 1d 	call	0x3a86	; 0x3a86 <__cmpsf2>
    2a78:	18 16       	cp	r1, r24
    2a7a:	3c f0       	brlt	.+14     	; 0x2a8a <_ZN13HardwareTimer12findPrescaleEf+0x4c>
    2a7c:	81 e0       	ldi	r24, 0x01	; 1
    2a7e:	8a 87       	std	Y+10, r24	; 0x0a
    2a80:	60 e0       	ldi	r22, 0x00	; 0
    2a82:	70 e0       	ldi	r23, 0x00	; 0
    2a84:	80 e8       	ldi	r24, 0x80	; 128
    2a86:	9f e3       	ldi	r25, 0x3F	; 63
    2a88:	36 c0       	rjmp	.+108    	; 0x2af6 <_ZN13HardwareTimer12findPrescaleEf+0xb8>
    2a8a:	20 e0       	ldi	r18, 0x00	; 0
    2a8c:	30 e0       	ldi	r19, 0x00	; 0
    2a8e:	40 e0       	ldi	r20, 0x00	; 0
    2a90:	51 e4       	ldi	r21, 0x41	; 65
    2a92:	c7 01       	movw	r24, r14
    2a94:	b6 01       	movw	r22, r12
    2a96:	f7 d7       	rcall	.+4078   	; 0x3a86 <__cmpsf2>
    2a98:	18 16       	cp	r1, r24
    2a9a:	3c f0       	brlt	.+14     	; 0x2aaa <_ZN13HardwareTimer12findPrescaleEf+0x6c>
    2a9c:	82 e0       	ldi	r24, 0x02	; 2
    2a9e:	8a 87       	std	Y+10, r24	; 0x0a
    2aa0:	60 e0       	ldi	r22, 0x00	; 0
    2aa2:	70 e0       	ldi	r23, 0x00	; 0
    2aa4:	80 e0       	ldi	r24, 0x00	; 0
    2aa6:	91 e4       	ldi	r25, 0x41	; 65
    2aa8:	26 c0       	rjmp	.+76     	; 0x2af6 <_ZN13HardwareTimer12findPrescaleEf+0xb8>
    2aaa:	20 e0       	ldi	r18, 0x00	; 0
    2aac:	30 e0       	ldi	r19, 0x00	; 0
    2aae:	40 e8       	ldi	r20, 0x80	; 128
    2ab0:	52 e4       	ldi	r21, 0x42	; 66
    2ab2:	c7 01       	movw	r24, r14
    2ab4:	b6 01       	movw	r22, r12
    2ab6:	e7 d7       	rcall	.+4046   	; 0x3a86 <__cmpsf2>
    2ab8:	18 16       	cp	r1, r24
    2aba:	3c f0       	brlt	.+14     	; 0x2aca <_ZN13HardwareTimer12findPrescaleEf+0x8c>
    2abc:	83 e0       	ldi	r24, 0x03	; 3
    2abe:	8a 87       	std	Y+10, r24	; 0x0a
    2ac0:	60 e0       	ldi	r22, 0x00	; 0
    2ac2:	70 e0       	ldi	r23, 0x00	; 0
    2ac4:	80 e8       	ldi	r24, 0x80	; 128
    2ac6:	92 e4       	ldi	r25, 0x42	; 66
    2ac8:	16 c0       	rjmp	.+44     	; 0x2af6 <_ZN13HardwareTimer12findPrescaleEf+0xb8>
    2aca:	20 e0       	ldi	r18, 0x00	; 0
    2acc:	30 e0       	ldi	r19, 0x00	; 0
    2ace:	40 e8       	ldi	r20, 0x80	; 128
    2ad0:	53 e4       	ldi	r21, 0x43	; 67
    2ad2:	c7 01       	movw	r24, r14
    2ad4:	b6 01       	movw	r22, r12
    2ad6:	d7 d7       	rcall	.+4014   	; 0x3a86 <__cmpsf2>
    2ad8:	18 16       	cp	r1, r24
    2ada:	3c f0       	brlt	.+14     	; 0x2aea <_ZN13HardwareTimer12findPrescaleEf+0xac>
    2adc:	84 e0       	ldi	r24, 0x04	; 4
    2ade:	8a 87       	std	Y+10, r24	; 0x0a
    2ae0:	60 e0       	ldi	r22, 0x00	; 0
    2ae2:	70 e0       	ldi	r23, 0x00	; 0
    2ae4:	80 e8       	ldi	r24, 0x80	; 128
    2ae6:	93 e4       	ldi	r25, 0x43	; 67
    2ae8:	06 c0       	rjmp	.+12     	; 0x2af6 <_ZN13HardwareTimer12findPrescaleEf+0xb8>
    2aea:	85 e0       	ldi	r24, 0x05	; 5
    2aec:	8a 87       	std	Y+10, r24	; 0x0a
    2aee:	60 e0       	ldi	r22, 0x00	; 0
    2af0:	70 e0       	ldi	r23, 0x00	; 0
    2af2:	80 e8       	ldi	r24, 0x80	; 128
    2af4:	94 e4       	ldi	r25, 0x44	; 68
    2af6:	df 91       	pop	r29
    2af8:	cf 91       	pop	r28
    2afa:	ff 90       	pop	r15
    2afc:	ef 90       	pop	r14
    2afe:	df 90       	pop	r13
    2b00:	cf 90       	pop	r12
    2b02:	08 95       	ret

00002b04 <_ZN13HardwareTimer7beginMsEf>:
    2b04:	8f 92       	push	r8
    2b06:	9f 92       	push	r9
    2b08:	af 92       	push	r10
    2b0a:	bf 92       	push	r11
    2b0c:	cf 92       	push	r12
    2b0e:	df 92       	push	r13
    2b10:	ef 92       	push	r14
    2b12:	ff 92       	push	r15
    2b14:	cf 93       	push	r28
    2b16:	df 93       	push	r29
    2b18:	ec 01       	movw	r28, r24
    2b1a:	6a 01       	movw	r12, r20
    2b1c:	7b 01       	movw	r14, r22
    2b1e:	e8 81       	ld	r30, Y
    2b20:	f9 81       	ldd	r31, Y+1	; 0x01
    2b22:	82 e0       	ldi	r24, 0x02	; 2
    2b24:	80 83       	st	Z, r24
    2b26:	ea 81       	ldd	r30, Y+2	; 0x02
    2b28:	fb 81       	ldd	r31, Y+3	; 0x03
    2b2a:	10 82       	st	Z, r1
    2b2c:	ec 81       	ldd	r30, Y+4	; 0x04
    2b2e:	fd 81       	ldd	r31, Y+5	; 0x05
    2b30:	80 83       	st	Z, r24
    2b32:	78 94       	sei
    2b34:	ce 01       	movw	r24, r28
    2b36:	83 df       	rcall	.-250    	; 0x2a3e <_ZN13HardwareTimer12findPrescaleEf>
    2b38:	4b 01       	movw	r8, r22
    2b3a:	5c 01       	movw	r10, r24
    2b3c:	20 e0       	ldi	r18, 0x00	; 0
    2b3e:	34 e2       	ldi	r19, 0x24	; 36
    2b40:	44 e7       	ldi	r20, 0x74	; 116
    2b42:	5b e4       	ldi	r21, 0x4B	; 75
    2b44:	c7 01       	movw	r24, r14
    2b46:	b6 01       	movw	r22, r12
    2b48:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <__mulsf3>
    2b4c:	6b 01       	movw	r12, r22
    2b4e:	7c 01       	movw	r14, r24
    2b50:	20 e0       	ldi	r18, 0x00	; 0
    2b52:	30 e0       	ldi	r19, 0x00	; 0
    2b54:	4a e7       	ldi	r20, 0x7A	; 122
    2b56:	54 e4       	ldi	r21, 0x44	; 68
    2b58:	c5 01       	movw	r24, r10
    2b5a:	b4 01       	movw	r22, r8
    2b5c:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <__mulsf3>
    2b60:	9b 01       	movw	r18, r22
    2b62:	ac 01       	movw	r20, r24
    2b64:	c7 01       	movw	r24, r14
    2b66:	b6 01       	movw	r22, r12
    2b68:	92 d7       	rcall	.+3876   	; 0x3a8e <__divsf3>
    2b6a:	20 e0       	ldi	r18, 0x00	; 0
    2b6c:	30 e0       	ldi	r19, 0x00	; 0
    2b6e:	40 e8       	ldi	r20, 0x80	; 128
    2b70:	5f e3       	ldi	r21, 0x3F	; 63
    2b72:	24 d7       	rcall	.+3656   	; 0x39bc <__subsf3>
    2b74:	6b 01       	movw	r12, r22
    2b76:	7c 01       	movw	r14, r24
    2b78:	20 e0       	ldi	r18, 0x00	; 0
    2b7a:	30 e0       	ldi	r19, 0x00	; 0
    2b7c:	4f e7       	ldi	r20, 0x7F	; 127
    2b7e:	53 e4       	ldi	r21, 0x43	; 67
    2b80:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <__gesf2>
    2b84:	18 16       	cp	r1, r24
    2b86:	2c f4       	brge	.+10     	; 0x2b92 <_ZN13HardwareTimer7beginMsEf+0x8e>
    2b88:	e8 85       	ldd	r30, Y+8	; 0x08
    2b8a:	f9 85       	ldd	r31, Y+9	; 0x09
    2b8c:	8f ef       	ldi	r24, 0xFF	; 255
    2b8e:	80 83       	st	Z, r24
    2b90:	18 c0       	rjmp	.+48     	; 0x2bc2 <_ZN13HardwareTimer7beginMsEf+0xbe>
    2b92:	20 e0       	ldi	r18, 0x00	; 0
    2b94:	30 e0       	ldi	r19, 0x00	; 0
    2b96:	a9 01       	movw	r20, r18
    2b98:	c7 01       	movw	r24, r14
    2b9a:	b6 01       	movw	r22, r12
    2b9c:	74 d7       	rcall	.+3816   	; 0x3a86 <__cmpsf2>
    2b9e:	88 23       	and	r24, r24
    2ba0:	24 f4       	brge	.+8      	; 0x2baa <_ZN13HardwareTimer7beginMsEf+0xa6>
    2ba2:	e8 85       	ldd	r30, Y+8	; 0x08
    2ba4:	f9 85       	ldd	r31, Y+9	; 0x09
    2ba6:	10 82       	st	Z, r1
    2ba8:	0c c0       	rjmp	.+24     	; 0x2bc2 <_ZN13HardwareTimer7beginMsEf+0xbe>
    2baa:	08 84       	ldd	r0, Y+8	; 0x08
    2bac:	d9 85       	ldd	r29, Y+9	; 0x09
    2bae:	c0 2d       	mov	r28, r0
    2bb0:	20 e0       	ldi	r18, 0x00	; 0
    2bb2:	30 e0       	ldi	r19, 0x00	; 0
    2bb4:	40 e0       	ldi	r20, 0x00	; 0
    2bb6:	5f e3       	ldi	r21, 0x3F	; 63
    2bb8:	c7 01       	movw	r24, r14
    2bba:	b6 01       	movw	r22, r12
    2bbc:	00 d7       	rcall	.+3584   	; 0x39be <__addsf3>
    2bbe:	cf d7       	rcall	.+3998   	; 0x3b5e <__fixunssfsi>
    2bc0:	68 83       	st	Y, r22
    2bc2:	df 91       	pop	r29
    2bc4:	cf 91       	pop	r28
    2bc6:	ff 90       	pop	r15
    2bc8:	ef 90       	pop	r14
    2bca:	df 90       	pop	r13
    2bcc:	cf 90       	pop	r12
    2bce:	bf 90       	pop	r11
    2bd0:	af 90       	pop	r10
    2bd2:	9f 90       	pop	r9
    2bd4:	8f 90       	pop	r8
    2bd6:	08 95       	ret

00002bd8 <_ZN13HardwareTimer5startEh>:

void HardwareTimer::start(uint8_t ticks/*= 1*/){
    2bd8:	fc 01       	movw	r30, r24
	*_tccrB = 0; //Disable timer
    2bda:	a2 81       	ldd	r26, Z+2	; 0x02
    2bdc:	b3 81       	ldd	r27, Z+3	; 0x03
    2bde:	1c 92       	st	X, r1
	ovfRemaining = ticks;
    2be0:	63 87       	std	Z+11, r22	; 0x0b
	*_tcnt = 0; //Reset timer
    2be2:	a6 81       	ldd	r26, Z+6	; 0x06
    2be4:	b7 81       	ldd	r27, Z+7	; 0x07
    2be6:	1c 92       	st	X, r1
	*_tccrB = CLK_DIV_1024; 
    2be8:	02 80       	ldd	r0, Z+2	; 0x02
    2bea:	f3 81       	ldd	r31, Z+3	; 0x03
    2bec:	e0 2d       	mov	r30, r0
    2bee:	85 e0       	ldi	r24, 0x05	; 5
    2bf0:	80 83       	st	Z, r24
    2bf2:	08 95       	ret

00002bf4 <_ZN13HardwareTimer8finishedEv>:
}

bool HardwareTimer::finished(){
	return ovfRemaining == 0;
    2bf4:	fc 01       	movw	r30, r24
    2bf6:	93 85       	ldd	r25, Z+11	; 0x0b
    2bf8:	81 e0       	ldi	r24, 0x01	; 1
    2bfa:	91 11       	cpse	r25, r1
    2bfc:	80 e0       	ldi	r24, 0x00	; 0
}
    2bfe:	08 95       	ret

00002c00 <_ZN13HardwareTimer13waitForFinishEv>:

void HardwareTimer::waitForFinish(){
    2c00:	fc 01       	movw	r30, r24
	while(ovfRemaining != 0){
    2c02:	93 85       	ldd	r25, Z+11	; 0x0b
    2c04:	91 11       	cpse	r25, r1
    2c06:	fd cf       	rjmp	.-6      	; 0x2c02 <_ZN13HardwareTimer13waitForFinishEv+0x2>
	}
}
    2c08:	08 95       	ret

00002c0a <_ZN13HardwareTimer14isr_timer_compEv>:

void HardwareTimer::isr_timer_comp(){
    2c0a:	fc 01       	movw	r30, r24
	if(ovfRemaining > 0) ovfRemaining--;
    2c0c:	83 85       	ldd	r24, Z+11	; 0x0b
    2c0e:	88 23       	and	r24, r24
    2c10:	19 f0       	breq	.+6      	; 0x2c18 <_ZN13HardwareTimer14isr_timer_compEv+0xe>
    2c12:	83 85       	ldd	r24, Z+11	; 0x0b
    2c14:	81 50       	subi	r24, 0x01	; 1
    2c16:	83 87       	std	Z+11, r24	; 0x0b
    2c18:	08 95       	ret

00002c1a <__vector_21>:
}

#ifdef USE_TIMER_0
HardwareTimer Timer0(TCCR0A, TCCR0B, TIMSK0, TCNT0, OCR0A);

ISR(TIMER0_COMPA_vect){
    2c1a:	1f 92       	push	r1
    2c1c:	0f 92       	push	r0
    2c1e:	0f b6       	in	r0, 0x3f	; 63
    2c20:	0f 92       	push	r0
    2c22:	11 24       	eor	r1, r1
    2c24:	0b b6       	in	r0, 0x3b	; 59
    2c26:	0f 92       	push	r0
    2c28:	2f 93       	push	r18
    2c2a:	3f 93       	push	r19
    2c2c:	4f 93       	push	r20
    2c2e:	5f 93       	push	r21
    2c30:	6f 93       	push	r22
    2c32:	7f 93       	push	r23
    2c34:	8f 93       	push	r24
    2c36:	9f 93       	push	r25
    2c38:	af 93       	push	r26
    2c3a:	bf 93       	push	r27
    2c3c:	ef 93       	push	r30
    2c3e:	ff 93       	push	r31
	Timer0.isr_timer_comp();
    2c40:	8d ee       	ldi	r24, 0xED	; 237
    2c42:	95 e0       	ldi	r25, 0x05	; 5
    2c44:	e2 df       	rcall	.-60     	; 0x2c0a <_ZN13HardwareTimer14isr_timer_compEv>
}
    2c46:	ff 91       	pop	r31
    2c48:	ef 91       	pop	r30
    2c4a:	bf 91       	pop	r27
    2c4c:	af 91       	pop	r26
    2c4e:	9f 91       	pop	r25
    2c50:	8f 91       	pop	r24
    2c52:	7f 91       	pop	r23
    2c54:	6f 91       	pop	r22
    2c56:	5f 91       	pop	r21
    2c58:	4f 91       	pop	r20
    2c5a:	3f 91       	pop	r19
    2c5c:	2f 91       	pop	r18
    2c5e:	0f 90       	pop	r0
    2c60:	0b be       	out	0x3b, r0	; 59
    2c62:	0f 90       	pop	r0
    2c64:	0f be       	out	0x3f, r0	; 63
    2c66:	0f 90       	pop	r0
    2c68:	1f 90       	pop	r1
    2c6a:	18 95       	reti

00002c6c <__vector_13>:
#endif

#ifdef USE_TIMER_2
HardwareTimer Timer2(TCCR2A, TCCR2B, TIMSK2, TCNT2, OCR2A);

ISR(TIMER2_COMPA_vect){
    2c6c:	1f 92       	push	r1
    2c6e:	0f 92       	push	r0
    2c70:	0f b6       	in	r0, 0x3f	; 63
    2c72:	0f 92       	push	r0
    2c74:	11 24       	eor	r1, r1
    2c76:	0b b6       	in	r0, 0x3b	; 59
    2c78:	0f 92       	push	r0
    2c7a:	2f 93       	push	r18
    2c7c:	3f 93       	push	r19
    2c7e:	4f 93       	push	r20
    2c80:	5f 93       	push	r21
    2c82:	6f 93       	push	r22
    2c84:	7f 93       	push	r23
    2c86:	8f 93       	push	r24
    2c88:	9f 93       	push	r25
    2c8a:	af 93       	push	r26
    2c8c:	bf 93       	push	r27
    2c8e:	ef 93       	push	r30
    2c90:	ff 93       	push	r31
	Timer2.isr_timer_comp();
    2c92:	81 ee       	ldi	r24, 0xE1	; 225
    2c94:	95 e0       	ldi	r25, 0x05	; 5
    2c96:	b9 df       	rcall	.-142    	; 0x2c0a <_ZN13HardwareTimer14isr_timer_compEv>
}
    2c98:	ff 91       	pop	r31
    2c9a:	ef 91       	pop	r30
    2c9c:	bf 91       	pop	r27
    2c9e:	af 91       	pop	r26
    2ca0:	9f 91       	pop	r25
    2ca2:	8f 91       	pop	r24
    2ca4:	7f 91       	pop	r23
    2ca6:	6f 91       	pop	r22
    2ca8:	5f 91       	pop	r21
    2caa:	4f 91       	pop	r20
    2cac:	3f 91       	pop	r19
    2cae:	2f 91       	pop	r18
    2cb0:	0f 90       	pop	r0
    2cb2:	0b be       	out	0x3b, r0	; 59
    2cb4:	0f 90       	pop	r0
    2cb6:	0f be       	out	0x3f, r0	; 63
    2cb8:	0f 90       	pop	r0
    2cba:	1f 90       	pop	r1
    2cbc:	18 95       	reti

00002cbe <_GLOBAL__sub_I__ZN13HardwareTimerC2ERVhS1_S1_S1_S1_>:
#define CLK_DIV_64 (_BV(CS01) | _BV(CS00))
#define CLK_DIV_256 (_BV(CS02))
#define CLK_DIV_1024 (_BV(CS02) | _BV(CS00))

HardwareTimer::HardwareTimer(Register &tccrA, Register &tccrB, Register &timsk, Register &tcnt, Register &ocra)
: _tccrA(&tccrA), _tccrB(&tccrB), _timsk(&timsk), _tcnt(&tcnt), _ocra(&ocra)
    2cbe:	ed ee       	ldi	r30, 0xED	; 237
    2cc0:	f5 e0       	ldi	r31, 0x05	; 5
    2cc2:	84 e4       	ldi	r24, 0x44	; 68
    2cc4:	90 e0       	ldi	r25, 0x00	; 0
    2cc6:	91 83       	std	Z+1, r25	; 0x01
    2cc8:	80 83       	st	Z, r24
    2cca:	85 e4       	ldi	r24, 0x45	; 69
    2ccc:	90 e0       	ldi	r25, 0x00	; 0
    2cce:	93 83       	std	Z+3, r25	; 0x03
    2cd0:	82 83       	std	Z+2, r24	; 0x02
    2cd2:	8e e6       	ldi	r24, 0x6E	; 110
    2cd4:	90 e0       	ldi	r25, 0x00	; 0
    2cd6:	95 83       	std	Z+5, r25	; 0x05
    2cd8:	84 83       	std	Z+4, r24	; 0x04
    2cda:	86 e4       	ldi	r24, 0x46	; 70
    2cdc:	90 e0       	ldi	r25, 0x00	; 0
    2cde:	97 83       	std	Z+7, r25	; 0x07
    2ce0:	86 83       	std	Z+6, r24	; 0x06
    2ce2:	87 e4       	ldi	r24, 0x47	; 71
    2ce4:	90 e0       	ldi	r25, 0x00	; 0
    2ce6:	91 87       	std	Z+9, r25	; 0x09
    2ce8:	80 87       	std	Z+8, r24	; 0x08
    2cea:	e1 ee       	ldi	r30, 0xE1	; 225
    2cec:	f5 e0       	ldi	r31, 0x05	; 5
    2cee:	80 eb       	ldi	r24, 0xB0	; 176
    2cf0:	90 e0       	ldi	r25, 0x00	; 0
    2cf2:	91 83       	std	Z+1, r25	; 0x01
    2cf4:	80 83       	st	Z, r24
    2cf6:	81 eb       	ldi	r24, 0xB1	; 177
    2cf8:	90 e0       	ldi	r25, 0x00	; 0
    2cfa:	93 83       	std	Z+3, r25	; 0x03
    2cfc:	82 83       	std	Z+2, r24	; 0x02
    2cfe:	80 e7       	ldi	r24, 0x70	; 112
    2d00:	90 e0       	ldi	r25, 0x00	; 0
    2d02:	95 83       	std	Z+5, r25	; 0x05
    2d04:	84 83       	std	Z+4, r24	; 0x04
    2d06:	82 eb       	ldi	r24, 0xB2	; 178
    2d08:	90 e0       	ldi	r25, 0x00	; 0
    2d0a:	97 83       	std	Z+7, r25	; 0x07
    2d0c:	86 83       	std	Z+6, r24	; 0x06
    2d0e:	83 eb       	ldi	r24, 0xB3	; 179
    2d10:	90 e0       	ldi	r25, 0x00	; 0
    2d12:	91 87       	std	Z+9, r25	; 0x09
    2d14:	80 87       	std	Z+8, r24	; 0x08
    2d16:	08 95       	ret

00002d18 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2d18:	10 92 66 06 	sts	0x0666, r1	; 0x800666 <twi_state>
    2d1c:	81 e0       	ldi	r24, 0x01	; 1
    2d1e:	80 93 64 06 	sts	0x0664, r24	; 0x800664 <twi_sendStop>
    2d22:	10 92 63 06 	sts	0x0663, r1	; 0x800663 <twi_inRepStart>
    2d26:	8b b1       	in	r24, 0x0b	; 11
    2d28:	83 60       	ori	r24, 0x03	; 3
    2d2a:	8b b9       	out	0x0b, r24	; 11
    2d2c:	e9 eb       	ldi	r30, 0xB9	; 185
    2d2e:	f0 e0       	ldi	r31, 0x00	; 0
    2d30:	80 81       	ld	r24, Z
    2d32:	8e 7f       	andi	r24, 0xFE	; 254
    2d34:	80 83       	st	Z, r24
    2d36:	80 81       	ld	r24, Z
    2d38:	8d 7f       	andi	r24, 0xFD	; 253
    2d3a:	80 83       	st	Z, r24
    2d3c:	88 e4       	ldi	r24, 0x48	; 72
    2d3e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    2d42:	85 e4       	ldi	r24, 0x45	; 69
    2d44:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2d48:	08 95       	ret

00002d4a <twi_readFrom>:
    2d4a:	41 32       	cpi	r20, 0x21	; 33
    2d4c:	08 f0       	brcs	.+2      	; 0x2d50 <twi_readFrom+0x6>
    2d4e:	4c c0       	rjmp	.+152    	; 0x2de8 <twi_readFrom+0x9e>
    2d50:	90 91 66 06 	lds	r25, 0x0666	; 0x800666 <twi_state>
    2d54:	91 11       	cpse	r25, r1
    2d56:	fc cf       	rjmp	.-8      	; 0x2d50 <twi_readFrom+0x6>
    2d58:	31 e0       	ldi	r19, 0x01	; 1
    2d5a:	30 93 66 06 	sts	0x0666, r19	; 0x800666 <twi_state>
    2d5e:	20 93 64 06 	sts	0x0664, r18	; 0x800664 <twi_sendStop>
    2d62:	2f ef       	ldi	r18, 0xFF	; 255
    2d64:	20 93 f9 05 	sts	0x05F9, r18	; 0x8005f9 <twi_error>
    2d68:	10 92 3e 06 	sts	0x063E, r1	; 0x80063e <twi_masterBufferIndex>
    2d6c:	24 0f       	add	r18, r20
    2d6e:	20 93 3d 06 	sts	0x063D, r18	; 0x80063d <twi_masterBufferLength>
    2d72:	30 93 65 06 	sts	0x0665, r19	; 0x800665 <twi_slarw>
    2d76:	20 91 65 06 	lds	r18, 0x0665	; 0x800665 <twi_slarw>
    2d7a:	88 0f       	add	r24, r24
    2d7c:	82 2b       	or	r24, r18
    2d7e:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <twi_slarw>
    2d82:	80 91 63 06 	lds	r24, 0x0663	; 0x800663 <twi_inRepStart>
    2d86:	81 30       	cpi	r24, 0x01	; 1
    2d88:	81 f4       	brne	.+32     	; 0x2daa <twi_readFrom+0x60>
    2d8a:	10 92 63 06 	sts	0x0663, r1	; 0x800663 <twi_inRepStart>
    2d8e:	ab eb       	ldi	r26, 0xBB	; 187
    2d90:	b0 e0       	ldi	r27, 0x00	; 0
    2d92:	ec eb       	ldi	r30, 0xBC	; 188
    2d94:	f0 e0       	ldi	r31, 0x00	; 0
    2d96:	80 91 65 06 	lds	r24, 0x0665	; 0x800665 <twi_slarw>
    2d9a:	8c 93       	st	X, r24
    2d9c:	80 81       	ld	r24, Z
    2d9e:	83 fd       	sbrc	r24, 3
    2da0:	fa cf       	rjmp	.-12     	; 0x2d96 <twi_readFrom+0x4c>
    2da2:	85 ec       	ldi	r24, 0xC5	; 197
    2da4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2da8:	03 c0       	rjmp	.+6      	; 0x2db0 <twi_readFrom+0x66>
    2daa:	85 ee       	ldi	r24, 0xE5	; 229
    2dac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2db0:	80 91 66 06 	lds	r24, 0x0666	; 0x800666 <twi_state>
    2db4:	81 30       	cpi	r24, 0x01	; 1
    2db6:	e1 f3       	breq	.-8      	; 0x2db0 <twi_readFrom+0x66>
    2db8:	80 91 3e 06 	lds	r24, 0x063E	; 0x80063e <twi_masterBufferIndex>
    2dbc:	84 17       	cp	r24, r20
    2dbe:	10 f4       	brcc	.+4      	; 0x2dc4 <twi_readFrom+0x7a>
    2dc0:	40 91 3e 06 	lds	r20, 0x063E	; 0x80063e <twi_masterBufferIndex>
    2dc4:	44 23       	and	r20, r20
    2dc6:	89 f0       	breq	.+34     	; 0x2dea <twi_readFrom+0xa0>
    2dc8:	ef e3       	ldi	r30, 0x3F	; 63
    2dca:	f6 e0       	ldi	r31, 0x06	; 6
    2dcc:	a6 2f       	mov	r26, r22
    2dce:	b7 2f       	mov	r27, r23
    2dd0:	2f ef       	ldi	r18, 0xFF	; 255
    2dd2:	24 0f       	add	r18, r20
    2dd4:	30 e0       	ldi	r19, 0x00	; 0
    2dd6:	20 5c       	subi	r18, 0xC0	; 192
    2dd8:	39 4f       	sbci	r19, 0xF9	; 249
    2dda:	81 91       	ld	r24, Z+
    2ddc:	8d 93       	st	X+, r24
    2dde:	e2 17       	cp	r30, r18
    2de0:	f3 07       	cpc	r31, r19
    2de2:	d9 f7       	brne	.-10     	; 0x2dda <twi_readFrom+0x90>
    2de4:	94 2f       	mov	r25, r20
    2de6:	01 c0       	rjmp	.+2      	; 0x2dea <twi_readFrom+0xa0>
    2de8:	90 e0       	ldi	r25, 0x00	; 0
    2dea:	89 2f       	mov	r24, r25
    2dec:	08 95       	ret

00002dee <twi_writeTo>:
    2dee:	0f 93       	push	r16
    2df0:	41 32       	cpi	r20, 0x21	; 33
    2df2:	08 f0       	brcs	.+2      	; 0x2df6 <twi_writeTo+0x8>
    2df4:	57 c0       	rjmp	.+174    	; 0x2ea4 <twi_writeTo+0xb6>
    2df6:	30 91 66 06 	lds	r19, 0x0666	; 0x800666 <twi_state>
    2dfa:	31 11       	cpse	r19, r1
    2dfc:	fc cf       	rjmp	.-8      	; 0x2df6 <twi_writeTo+0x8>
    2dfe:	92 e0       	ldi	r25, 0x02	; 2
    2e00:	90 93 66 06 	sts	0x0666, r25	; 0x800666 <twi_state>
    2e04:	00 93 64 06 	sts	0x0664, r16	; 0x800664 <twi_sendStop>
    2e08:	9f ef       	ldi	r25, 0xFF	; 255
    2e0a:	90 93 f9 05 	sts	0x05F9, r25	; 0x8005f9 <twi_error>
    2e0e:	10 92 3e 06 	sts	0x063E, r1	; 0x80063e <twi_masterBufferIndex>
    2e12:	40 93 3d 06 	sts	0x063D, r20	; 0x80063d <twi_masterBufferLength>
    2e16:	44 23       	and	r20, r20
    2e18:	71 f0       	breq	.+28     	; 0x2e36 <twi_writeTo+0x48>
    2e1a:	fb 01       	movw	r30, r22
    2e1c:	af e3       	ldi	r26, 0x3F	; 63
    2e1e:	b6 e0       	ldi	r27, 0x06	; 6
    2e20:	41 50       	subi	r20, 0x01	; 1
    2e22:	50 e0       	ldi	r21, 0x00	; 0
    2e24:	4f 5f       	subi	r20, 0xFF	; 255
    2e26:	5f 4f       	sbci	r21, 0xFF	; 255
    2e28:	64 0f       	add	r22, r20
    2e2a:	75 1f       	adc	r23, r21
    2e2c:	91 91       	ld	r25, Z+
    2e2e:	9d 93       	st	X+, r25
    2e30:	e6 17       	cp	r30, r22
    2e32:	f7 07       	cpc	r31, r23
    2e34:	d9 f7       	brne	.-10     	; 0x2e2c <twi_writeTo+0x3e>
    2e36:	10 92 65 06 	sts	0x0665, r1	; 0x800665 <twi_slarw>
    2e3a:	90 91 65 06 	lds	r25, 0x0665	; 0x800665 <twi_slarw>
    2e3e:	88 0f       	add	r24, r24
    2e40:	89 2b       	or	r24, r25
    2e42:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <twi_slarw>
    2e46:	80 91 63 06 	lds	r24, 0x0663	; 0x800663 <twi_inRepStart>
    2e4a:	81 30       	cpi	r24, 0x01	; 1
    2e4c:	81 f4       	brne	.+32     	; 0x2e6e <twi_writeTo+0x80>
    2e4e:	10 92 63 06 	sts	0x0663, r1	; 0x800663 <twi_inRepStart>
    2e52:	ab eb       	ldi	r26, 0xBB	; 187
    2e54:	b0 e0       	ldi	r27, 0x00	; 0
    2e56:	ec eb       	ldi	r30, 0xBC	; 188
    2e58:	f0 e0       	ldi	r31, 0x00	; 0
    2e5a:	80 91 65 06 	lds	r24, 0x0665	; 0x800665 <twi_slarw>
    2e5e:	8c 93       	st	X, r24
    2e60:	80 81       	ld	r24, Z
    2e62:	83 fd       	sbrc	r24, 3
    2e64:	fa cf       	rjmp	.-12     	; 0x2e5a <twi_writeTo+0x6c>
    2e66:	85 ec       	ldi	r24, 0xC5	; 197
    2e68:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2e6c:	03 c0       	rjmp	.+6      	; 0x2e74 <twi_writeTo+0x86>
    2e6e:	85 ee       	ldi	r24, 0xE5	; 229
    2e70:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2e74:	22 23       	and	r18, r18
    2e76:	41 f0       	breq	.+16     	; 0x2e88 <twi_writeTo+0x9a>
    2e78:	80 91 66 06 	lds	r24, 0x0666	; 0x800666 <twi_state>
    2e7c:	82 30       	cpi	r24, 0x02	; 2
    2e7e:	21 f4       	brne	.+8      	; 0x2e88 <twi_writeTo+0x9a>
    2e80:	80 91 66 06 	lds	r24, 0x0666	; 0x800666 <twi_state>
    2e84:	82 30       	cpi	r24, 0x02	; 2
    2e86:	e1 f3       	breq	.-8      	; 0x2e80 <twi_writeTo+0x92>
    2e88:	80 91 f9 05 	lds	r24, 0x05F9	; 0x8005f9 <twi_error>
    2e8c:	8f 3f       	cpi	r24, 0xFF	; 255
    2e8e:	79 f0       	breq	.+30     	; 0x2eae <twi_writeTo+0xc0>
    2e90:	80 91 f9 05 	lds	r24, 0x05F9	; 0x8005f9 <twi_error>
    2e94:	80 32       	cpi	r24, 0x20	; 32
    2e96:	41 f0       	breq	.+16     	; 0x2ea8 <twi_writeTo+0xba>
    2e98:	80 91 f9 05 	lds	r24, 0x05F9	; 0x8005f9 <twi_error>
    2e9c:	80 33       	cpi	r24, 0x30	; 48
    2e9e:	31 f0       	breq	.+12     	; 0x2eac <twi_writeTo+0xbe>
    2ea0:	34 e0       	ldi	r19, 0x04	; 4
    2ea2:	05 c0       	rjmp	.+10     	; 0x2eae <twi_writeTo+0xc0>
    2ea4:	31 e0       	ldi	r19, 0x01	; 1
    2ea6:	03 c0       	rjmp	.+6      	; 0x2eae <twi_writeTo+0xc0>
    2ea8:	32 e0       	ldi	r19, 0x02	; 2
    2eaa:	01 c0       	rjmp	.+2      	; 0x2eae <twi_writeTo+0xc0>
    2eac:	33 e0       	ldi	r19, 0x03	; 3
    2eae:	83 2f       	mov	r24, r19
    2eb0:	0f 91       	pop	r16
    2eb2:	08 95       	ret

00002eb4 <twi_transmit>:
    2eb4:	40 91 1b 06 	lds	r20, 0x061B	; 0x80061b <twi_txBufferLength>
    2eb8:	26 2f       	mov	r18, r22
    2eba:	30 e0       	ldi	r19, 0x00	; 0
    2ebc:	24 0f       	add	r18, r20
    2ebe:	31 1d       	adc	r19, r1
    2ec0:	21 32       	cpi	r18, 0x21	; 33
    2ec2:	31 05       	cpc	r19, r1
    2ec4:	ec f4       	brge	.+58     	; 0x2f00 <twi_transmit+0x4c>
    2ec6:	20 91 66 06 	lds	r18, 0x0666	; 0x800666 <twi_state>
    2eca:	24 30       	cpi	r18, 0x04	; 4
    2ecc:	d9 f4       	brne	.+54     	; 0x2f04 <twi_transmit+0x50>
    2ece:	66 23       	and	r22, r22
    2ed0:	81 f0       	breq	.+32     	; 0x2ef2 <twi_transmit+0x3e>
    2ed2:	a8 2f       	mov	r26, r24
    2ed4:	b9 2f       	mov	r27, r25
    2ed6:	80 e0       	ldi	r24, 0x00	; 0
    2ed8:	90 e0       	ldi	r25, 0x00	; 0
    2eda:	30 91 1b 06 	lds	r19, 0x061B	; 0x80061b <twi_txBufferLength>
    2ede:	2d 91       	ld	r18, X+
    2ee0:	fc 01       	movw	r30, r24
    2ee2:	e3 5e       	subi	r30, 0xE3	; 227
    2ee4:	f9 4f       	sbci	r31, 0xF9	; 249
    2ee6:	e3 0f       	add	r30, r19
    2ee8:	f1 1d       	adc	r31, r1
    2eea:	20 83       	st	Z, r18
    2eec:	01 96       	adiw	r24, 0x01	; 1
    2eee:	86 17       	cp	r24, r22
    2ef0:	a0 f3       	brcs	.-24     	; 0x2eda <twi_transmit+0x26>
    2ef2:	80 91 1b 06 	lds	r24, 0x061B	; 0x80061b <twi_txBufferLength>
    2ef6:	68 0f       	add	r22, r24
    2ef8:	60 93 1b 06 	sts	0x061B, r22	; 0x80061b <twi_txBufferLength>
    2efc:	80 e0       	ldi	r24, 0x00	; 0
    2efe:	08 95       	ret
    2f00:	81 e0       	ldi	r24, 0x01	; 1
    2f02:	08 95       	ret
    2f04:	82 e0       	ldi	r24, 0x02	; 2
    2f06:	08 95       	ret

00002f08 <twi_attachSlaveRxEvent>:
    2f08:	90 93 60 06 	sts	0x0660, r25	; 0x800660 <twi_onSlaveReceive+0x1>
    2f0c:	80 93 5f 06 	sts	0x065F, r24	; 0x80065f <twi_onSlaveReceive>
    2f10:	08 95       	ret

00002f12 <twi_attachSlaveTxEvent>:
    2f12:	90 93 62 06 	sts	0x0662, r25	; 0x800662 <twi_onSlaveTransmit+0x1>
    2f16:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <twi_onSlaveTransmit>
    2f1a:	08 95       	ret

00002f1c <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    2f1c:	85 ed       	ldi	r24, 0xD5	; 213
    2f1e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    2f22:	ec eb       	ldi	r30, 0xBC	; 188
    2f24:	f0 e0       	ldi	r31, 0x00	; 0
    2f26:	80 81       	ld	r24, Z
    2f28:	84 fd       	sbrc	r24, 4
    2f2a:	fd cf       	rjmp	.-6      	; 0x2f26 <twi_stop+0xa>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    2f2c:	10 92 66 06 	sts	0x0666, r1	; 0x800666 <twi_state>
    2f30:	08 95       	ret

00002f32 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    2f32:	85 ec       	ldi	r24, 0xC5	; 197
    2f34:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // update twi state
  twi_state = TWI_READY;
    2f38:	10 92 66 06 	sts	0x0666, r1	; 0x800666 <twi_state>
    2f3c:	08 95       	ret

00002f3e <__vector_39>:
}

ISR(TWI_vect)
{
    2f3e:	1f 92       	push	r1
    2f40:	0f 92       	push	r0
    2f42:	0f b6       	in	r0, 0x3f	; 63
    2f44:	0f 92       	push	r0
    2f46:	11 24       	eor	r1, r1
    2f48:	0b b6       	in	r0, 0x3b	; 59
    2f4a:	0f 92       	push	r0
    2f4c:	2f 93       	push	r18
    2f4e:	3f 93       	push	r19
    2f50:	4f 93       	push	r20
    2f52:	5f 93       	push	r21
    2f54:	6f 93       	push	r22
    2f56:	7f 93       	push	r23
    2f58:	8f 93       	push	r24
    2f5a:	9f 93       	push	r25
    2f5c:	af 93       	push	r26
    2f5e:	bf 93       	push	r27
    2f60:	ef 93       	push	r30
    2f62:	ff 93       	push	r31
  switch(TW_STATUS){
    2f64:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    2f68:	88 7f       	andi	r24, 0xF8	; 248
    2f6a:	90 e0       	ldi	r25, 0x00	; 0
    2f6c:	89 3c       	cpi	r24, 0xC9	; 201
    2f6e:	91 05       	cpc	r25, r1
    2f70:	08 f0       	brcs	.+2      	; 0x2f74 <__vector_39+0x36>
    2f72:	ee c0       	rjmp	.+476    	; 0x3150 <__vector_39+0x212>
    2f74:	fc 01       	movw	r30, r24
    2f76:	88 27       	eor	r24, r24
    2f78:	ee 58       	subi	r30, 0x8E	; 142
    2f7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f7c:	8f 4f       	sbci	r24, 0xFF	; 255
    2f7e:	65 c7       	rjmp	.+3786   	; 0x3e4a <__tablejump2__>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    2f80:	80 91 65 06 	lds	r24, 0x0665	; 0x800665 <twi_slarw>
    2f84:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2f88:	85 ec       	ldi	r24, 0xC5	; 197
    2f8a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2f8e:	e0 c0       	rjmp	.+448    	; 0x3150 <__vector_39+0x212>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2f90:	90 91 3e 06 	lds	r25, 0x063E	; 0x80063e <twi_masterBufferIndex>
    2f94:	80 91 3d 06 	lds	r24, 0x063D	; 0x80063d <twi_masterBufferLength>
    2f98:	98 17       	cp	r25, r24
    2f9a:	80 f4       	brcc	.+32     	; 0x2fbc <__vector_39+0x7e>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2f9c:	e0 91 3e 06 	lds	r30, 0x063E	; 0x80063e <twi_masterBufferIndex>
    2fa0:	81 e0       	ldi	r24, 0x01	; 1
    2fa2:	8e 0f       	add	r24, r30
    2fa4:	80 93 3e 06 	sts	0x063E, r24	; 0x80063e <twi_masterBufferIndex>
    2fa8:	f0 e0       	ldi	r31, 0x00	; 0
    2faa:	e1 5c       	subi	r30, 0xC1	; 193
    2fac:	f9 4f       	sbci	r31, 0xF9	; 249
    2fae:	80 81       	ld	r24, Z
    2fb0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2fb4:	85 ec       	ldi	r24, 0xC5	; 197
    2fb6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2fba:	ca c0       	rjmp	.+404    	; 0x3150 <__vector_39+0x212>
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
        twi_reply(1);
      }else{
	if (twi_sendStop)
    2fbc:	80 91 64 06 	lds	r24, 0x0664	; 0x800664 <twi_sendStop>
    2fc0:	88 23       	and	r24, r24
          twi_stop();
    2fc2:	11 f0       	breq	.+4      	; 0x2fc8 <__vector_39+0x8a>
    2fc4:	ab df       	rcall	.-170    	; 0x2f1c <twi_stop>
    2fc6:	c4 c0       	rjmp	.+392    	; 0x3150 <__vector_39+0x212>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    2fc8:	81 e0       	ldi	r24, 0x01	; 1
    2fca:	80 93 63 06 	sts	0x0663, r24	; 0x800663 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2fce:	84 ea       	ldi	r24, 0xA4	; 164
    2fd0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	  twi_state = TWI_READY;
    2fd4:	10 92 66 06 	sts	0x0666, r1	; 0x800666 <twi_state>
    2fd8:	bb c0       	rjmp	.+374    	; 0x3150 <__vector_39+0x212>
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    2fda:	80 e2       	ldi	r24, 0x20	; 32
    2fdc:	80 93 f9 05 	sts	0x05F9, r24	; 0x8005f9 <twi_error>
      twi_stop();
    2fe0:	9d df       	rcall	.-198    	; 0x2f1c <twi_stop>
      break;
    2fe2:	b6 c0       	rjmp	.+364    	; 0x3150 <__vector_39+0x212>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    2fe4:	80 e3       	ldi	r24, 0x30	; 48
    2fe6:	80 93 f9 05 	sts	0x05F9, r24	; 0x8005f9 <twi_error>
      twi_stop();
    2fea:	98 df       	rcall	.-208    	; 0x2f1c <twi_stop>
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    2fec:	b1 c0       	rjmp	.+354    	; 0x3150 <__vector_39+0x212>
    2fee:	88 e3       	ldi	r24, 0x38	; 56
    2ff0:	80 93 f9 05 	sts	0x05F9, r24	; 0x8005f9 <twi_error>
      twi_releaseBus();
    2ff4:	9e df       	rcall	.-196    	; 0x2f32 <twi_releaseBus>
      break;
    2ff6:	ac c0       	rjmp	.+344    	; 0x3150 <__vector_39+0x212>

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2ff8:	e0 91 3e 06 	lds	r30, 0x063E	; 0x80063e <twi_masterBufferIndex>
    2ffc:	81 e0       	ldi	r24, 0x01	; 1
    2ffe:	8e 0f       	add	r24, r30
    3000:	80 93 3e 06 	sts	0x063E, r24	; 0x80063e <twi_masterBufferIndex>
    3004:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    3008:	f0 e0       	ldi	r31, 0x00	; 0
    300a:	e1 5c       	subi	r30, 0xC1	; 193
    300c:	f9 4f       	sbci	r31, 0xF9	; 249
    300e:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    3010:	90 91 3e 06 	lds	r25, 0x063E	; 0x80063e <twi_masterBufferIndex>
    3014:	80 91 3d 06 	lds	r24, 0x063D	; 0x80063d <twi_masterBufferLength>
    3018:	98 17       	cp	r25, r24
    301a:	20 f4       	brcc	.+8      	; 0x3024 <__vector_39+0xe6>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    301c:	85 ec       	ldi	r24, 0xC5	; 197
    301e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3022:	96 c0       	rjmp	.+300    	; 0x3150 <__vector_39+0x212>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3024:	85 e8       	ldi	r24, 0x85	; 133
    3026:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    302a:	92 c0       	rjmp	.+292    	; 0x3150 <__vector_39+0x212>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    302c:	e0 91 3e 06 	lds	r30, 0x063E	; 0x80063e <twi_masterBufferIndex>
    3030:	81 e0       	ldi	r24, 0x01	; 1
    3032:	8e 0f       	add	r24, r30
    3034:	80 93 3e 06 	sts	0x063E, r24	; 0x80063e <twi_masterBufferIndex>
    3038:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    303c:	f0 e0       	ldi	r31, 0x00	; 0
    303e:	e1 5c       	subi	r30, 0xC1	; 193
    3040:	f9 4f       	sbci	r31, 0xF9	; 249
	if (twi_sendStop)
    3042:	80 83       	st	Z, r24
    3044:	80 91 64 06 	lds	r24, 0x0664	; 0x800664 <twi_sendStop>
    3048:	88 23       	and	r24, r24
          twi_stop();
    304a:	11 f0       	breq	.+4      	; 0x3050 <__vector_39+0x112>
    304c:	67 df       	rcall	.-306    	; 0x2f1c <twi_stop>
    304e:	80 c0       	rjmp	.+256    	; 0x3150 <__vector_39+0x212>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    3050:	81 e0       	ldi	r24, 0x01	; 1
    3052:	80 93 63 06 	sts	0x0663, r24	; 0x800663 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    3056:	84 ea       	ldi	r24, 0xA4	; 164
    3058:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	  twi_state = TWI_READY;
    305c:	10 92 66 06 	sts	0x0666, r1	; 0x800666 <twi_state>
	}    
	break;
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
    3060:	77 c0       	rjmp	.+238    	; 0x3150 <__vector_39+0x212>
    3062:	5c df       	rcall	.-328    	; 0x2f1c <twi_stop>
      break;
    3064:	75 c0       	rjmp	.+234    	; 0x3150 <__vector_39+0x212>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    3066:	83 e0       	ldi	r24, 0x03	; 3
    3068:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    306c:	10 92 fa 05 	sts	0x05FA, r1	; 0x8005fa <twi_rxBufferIndex>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3070:	85 ec       	ldi	r24, 0xC5	; 197
    3072:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3076:	6c c0       	rjmp	.+216    	; 0x3150 <__vector_39+0x212>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    3078:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <twi_rxBufferIndex>
    307c:	80 32       	cpi	r24, 0x20	; 32
    307e:	80 f4       	brcc	.+32     	; 0x30a0 <__vector_39+0x162>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    3080:	e0 91 fa 05 	lds	r30, 0x05FA	; 0x8005fa <twi_rxBufferIndex>
    3084:	81 e0       	ldi	r24, 0x01	; 1
    3086:	8e 0f       	add	r24, r30
    3088:	80 93 fa 05 	sts	0x05FA, r24	; 0x8005fa <twi_rxBufferIndex>
    308c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    3090:	f0 e0       	ldi	r31, 0x00	; 0
    3092:	e5 50       	subi	r30, 0x05	; 5
    3094:	fa 4f       	sbci	r31, 0xFA	; 250
    3096:	80 83       	st	Z, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3098:	85 ec       	ldi	r24, 0xC5	; 197
    309a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    309e:	58 c0       	rjmp	.+176    	; 0x3150 <__vector_39+0x212>
    30a0:	85 e8       	ldi	r24, 0x85	; 133
    30a2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    30a6:	54 c0       	rjmp	.+168    	; 0x3150 <__vector_39+0x212>
    30a8:	44 df       	rcall	.-376    	; 0x2f32 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    30aa:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <twi_rxBufferIndex>
    30ae:	80 32       	cpi	r24, 0x20	; 32
    30b0:	30 f4       	brcc	.+12     	; 0x30be <__vector_39+0x180>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    30b2:	e0 91 fa 05 	lds	r30, 0x05FA	; 0x8005fa <twi_rxBufferIndex>
    30b6:	f0 e0       	ldi	r31, 0x00	; 0
    30b8:	e5 50       	subi	r30, 0x05	; 5
    30ba:	fa 4f       	sbci	r31, 0xFA	; 250
    30bc:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    30be:	60 91 fa 05 	lds	r22, 0x05FA	; 0x8005fa <twi_rxBufferIndex>
    30c2:	70 e0       	ldi	r23, 0x00	; 0
    30c4:	e0 91 5f 06 	lds	r30, 0x065F	; 0x80065f <twi_onSlaveReceive>
    30c8:	f0 91 60 06 	lds	r31, 0x0660	; 0x800660 <twi_onSlaveReceive+0x1>
    30cc:	8b ef       	ldi	r24, 0xFB	; 251
    30ce:	95 e0       	ldi	r25, 0x05	; 5
    30d0:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    30d2:	10 92 fa 05 	sts	0x05FA, r1	; 0x8005fa <twi_rxBufferIndex>
      break;
    30d6:	3c c0       	rjmp	.+120    	; 0x3150 <__vector_39+0x212>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    30d8:	85 e8       	ldi	r24, 0x85	; 133
    30da:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    30de:	38 c0       	rjmp	.+112    	; 0x3150 <__vector_39+0x212>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    30e0:	84 e0       	ldi	r24, 0x04	; 4
    30e2:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    30e6:	10 92 1c 06 	sts	0x061C, r1	; 0x80061c <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    30ea:	10 92 1b 06 	sts	0x061B, r1	; 0x80061b <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    30ee:	e0 91 61 06 	lds	r30, 0x0661	; 0x800661 <twi_onSlaveTransmit>
    30f2:	f0 91 62 06 	lds	r31, 0x0662	; 0x800662 <twi_onSlaveTransmit+0x1>
    30f6:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    30f8:	80 91 1b 06 	lds	r24, 0x061B	; 0x80061b <twi_txBufferLength>
    30fc:	81 11       	cpse	r24, r1
    30fe:	05 c0       	rjmp	.+10     	; 0x310a <__vector_39+0x1cc>
        twi_txBufferLength = 1;
    3100:	81 e0       	ldi	r24, 0x01	; 1
    3102:	80 93 1b 06 	sts	0x061B, r24	; 0x80061b <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    3106:	10 92 1d 06 	sts	0x061D, r1	; 0x80061d <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    310a:	e0 91 1c 06 	lds	r30, 0x061C	; 0x80061c <twi_txBufferIndex>
    310e:	81 e0       	ldi	r24, 0x01	; 1
    3110:	8e 0f       	add	r24, r30
    3112:	80 93 1c 06 	sts	0x061C, r24	; 0x80061c <twi_txBufferIndex>
    3116:	f0 e0       	ldi	r31, 0x00	; 0
    3118:	e3 5e       	subi	r30, 0xE3	; 227
    311a:	f9 4f       	sbci	r31, 0xF9	; 249
    311c:	80 81       	ld	r24, Z
    311e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    3122:	90 91 1c 06 	lds	r25, 0x061C	; 0x80061c <twi_txBufferIndex>
    3126:	80 91 1b 06 	lds	r24, 0x061B	; 0x80061b <twi_txBufferLength>
    312a:	98 17       	cp	r25, r24
    312c:	20 f4       	brcc	.+8      	; 0x3136 <__vector_39+0x1f8>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    312e:	85 ec       	ldi	r24, 0xC5	; 197
    3130:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3134:	0d c0       	rjmp	.+26     	; 0x3150 <__vector_39+0x212>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3136:	85 e8       	ldi	r24, 0x85	; 133
    3138:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    313c:	09 c0       	rjmp	.+18     	; 0x3150 <__vector_39+0x212>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    313e:	85 ec       	ldi	r24, 0xC5	; 197
    3140:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    3144:	10 92 66 06 	sts	0x0666, r1	; 0x800666 <twi_state>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    3148:	03 c0       	rjmp	.+6      	; 0x3150 <__vector_39+0x212>
    314a:	10 92 f9 05 	sts	0x05F9, r1	; 0x8005f9 <twi_error>
      twi_stop();
    314e:	e6 de       	rcall	.-564    	; 0x2f1c <twi_stop>
      break;
  }
    3150:	ff 91       	pop	r31
    3152:	ef 91       	pop	r30
    3154:	bf 91       	pop	r27
    3156:	af 91       	pop	r26
    3158:	9f 91       	pop	r25
    315a:	8f 91       	pop	r24
    315c:	7f 91       	pop	r23
    315e:	6f 91       	pop	r22
    3160:	5f 91       	pop	r21
    3162:	4f 91       	pop	r20
    3164:	3f 91       	pop	r19
    3166:	2f 91       	pop	r18
    3168:	0f 90       	pop	r0
    316a:	0b be       	out	0x3b, r0	; 59
    316c:	0f 90       	pop	r0
    316e:	0f be       	out	0x3f, r0	; 63
    3170:	0f 90       	pop	r0
    3172:	1f 90       	pop	r1
    3174:	18 95       	reti

00003176 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
	user_onRequest = function;
    3176:	80 91 91 06 	lds	r24, 0x0691	; 0x800691 <_ZN7TwoWire14rxBufferLengthE>
    317a:	90 e0       	ldi	r25, 0x00	; 0
    317c:	20 91 92 06 	lds	r18, 0x0692	; 0x800692 <_ZN7TwoWire13rxBufferIndexE>
    3180:	82 1b       	sub	r24, r18
    3182:	91 09       	sbc	r25, r1
    3184:	08 95       	ret

00003186 <_ZN7TwoWire4readEv>:
    3186:	90 91 92 06 	lds	r25, 0x0692	; 0x800692 <_ZN7TwoWire13rxBufferIndexE>
    318a:	80 91 91 06 	lds	r24, 0x0691	; 0x800691 <_ZN7TwoWire14rxBufferLengthE>
    318e:	98 17       	cp	r25, r24
    3190:	50 f4       	brcc	.+20     	; 0x31a6 <_ZN7TwoWire4readEv+0x20>
    3192:	e9 2f       	mov	r30, r25
    3194:	f0 e0       	ldi	r31, 0x00	; 0
    3196:	ed 56       	subi	r30, 0x6D	; 109
    3198:	f9 4f       	sbci	r31, 0xF9	; 249
    319a:	20 81       	ld	r18, Z
    319c:	30 e0       	ldi	r19, 0x00	; 0
    319e:	9f 5f       	subi	r25, 0xFF	; 255
    31a0:	90 93 92 06 	sts	0x0692, r25	; 0x800692 <_ZN7TwoWire13rxBufferIndexE>
    31a4:	02 c0       	rjmp	.+4      	; 0x31aa <_ZN7TwoWire4readEv+0x24>
    31a6:	2f ef       	ldi	r18, 0xFF	; 255
    31a8:	3f ef       	ldi	r19, 0xFF	; 255
    31aa:	c9 01       	movw	r24, r18
    31ac:	08 95       	ret

000031ae <_ZN7TwoWire4peekEv>:
    31ae:	e0 91 92 06 	lds	r30, 0x0692	; 0x800692 <_ZN7TwoWire13rxBufferIndexE>
    31b2:	80 91 91 06 	lds	r24, 0x0691	; 0x800691 <_ZN7TwoWire14rxBufferLengthE>
    31b6:	e8 17       	cp	r30, r24
    31b8:	30 f4       	brcc	.+12     	; 0x31c6 <_ZN7TwoWire4peekEv+0x18>
    31ba:	f0 e0       	ldi	r31, 0x00	; 0
    31bc:	ed 56       	subi	r30, 0x6D	; 109
    31be:	f9 4f       	sbci	r31, 0xF9	; 249
    31c0:	80 81       	ld	r24, Z
    31c2:	90 e0       	ldi	r25, 0x00	; 0
    31c4:	08 95       	ret
    31c6:	8f ef       	ldi	r24, 0xFF	; 255
    31c8:	9f ef       	ldi	r25, 0xFF	; 255
    31ca:	08 95       	ret

000031cc <_ZN7TwoWire5flushEv>:
    31cc:	08 95       	ret

000031ce <_ZN7TwoWire16onReceiveServiceEPhi>:
    31ce:	cf 93       	push	r28
    31d0:	df 93       	push	r29
    31d2:	ec 01       	movw	r28, r24
    31d4:	e0 91 69 06 	lds	r30, 0x0669	; 0x800669 <_ZN7TwoWire14user_onReceiveE>
    31d8:	f0 91 6a 06 	lds	r31, 0x066A	; 0x80066a <_ZN7TwoWire14user_onReceiveE+0x1>
    31dc:	30 97       	sbiw	r30, 0x00	; 0
    31de:	01 f1       	breq	.+64     	; 0x3220 <_ZN7TwoWire16onReceiveServiceEPhi+0x52>
    31e0:	90 91 92 06 	lds	r25, 0x0692	; 0x800692 <_ZN7TwoWire13rxBufferIndexE>
    31e4:	80 91 91 06 	lds	r24, 0x0691	; 0x800691 <_ZN7TwoWire14rxBufferLengthE>
    31e8:	98 17       	cp	r25, r24
    31ea:	d0 f0       	brcs	.+52     	; 0x3220 <_ZN7TwoWire16onReceiveServiceEPhi+0x52>
    31ec:	16 16       	cp	r1, r22
    31ee:	17 06       	cpc	r1, r23
    31f0:	8c f4       	brge	.+34     	; 0x3214 <_ZN7TwoWire16onReceiveServiceEPhi+0x46>
    31f2:	20 e0       	ldi	r18, 0x00	; 0
    31f4:	30 e0       	ldi	r19, 0x00	; 0
    31f6:	90 e0       	ldi	r25, 0x00	; 0
    31f8:	de 01       	movw	r26, r28
    31fa:	a9 0f       	add	r26, r25
    31fc:	b1 1d       	adc	r27, r1
    31fe:	4c 91       	ld	r20, X
    3200:	d9 01       	movw	r26, r18
    3202:	ad 56       	subi	r26, 0x6D	; 109
    3204:	b9 4f       	sbci	r27, 0xF9	; 249
    3206:	4c 93       	st	X, r20
    3208:	9f 5f       	subi	r25, 0xFF	; 255
    320a:	29 2f       	mov	r18, r25
    320c:	30 e0       	ldi	r19, 0x00	; 0
    320e:	26 17       	cp	r18, r22
    3210:	37 07       	cpc	r19, r23
    3212:	94 f3       	brlt	.-28     	; 0x31f8 <_ZN7TwoWire16onReceiveServiceEPhi+0x2a>
    3214:	cb 01       	movw	r24, r22
    3216:	10 92 92 06 	sts	0x0692, r1	; 0x800692 <_ZN7TwoWire13rxBufferIndexE>
    321a:	60 93 91 06 	sts	0x0691, r22	; 0x800691 <_ZN7TwoWire14rxBufferLengthE>
    321e:	19 95       	eicall
    3220:	df 91       	pop	r29
    3222:	cf 91       	pop	r28
    3224:	08 95       	ret

00003226 <_ZN7TwoWire16onRequestServiceEv>:
    3226:	e0 91 6b 06 	lds	r30, 0x066B	; 0x80066b <_ZN7TwoWire14user_onRequestE>
    322a:	f0 91 6c 06 	lds	r31, 0x066C	; 0x80066c <_ZN7TwoWire14user_onRequestE+0x1>
    322e:	30 97       	sbiw	r30, 0x00	; 0
    3230:	29 f0       	breq	.+10     	; 0x323c <_ZN7TwoWire16onRequestServiceEv+0x16>
    3232:	10 92 6f 06 	sts	0x066F, r1	; 0x80066f <_ZN7TwoWire13txBufferIndexE>
    3236:	10 92 6e 06 	sts	0x066E, r1	; 0x80066e <_ZN7TwoWire14txBufferLengthE>
    323a:	19 95       	eicall
    323c:	08 95       	ret

0000323e <_ZN7TwoWire5writeEh>:
    323e:	cf 93       	push	r28
    3240:	df 93       	push	r29
    3242:	1f 92       	push	r1
    3244:	cd b7       	in	r28, 0x3d	; 61
    3246:	de b7       	in	r29, 0x3e	; 62
    3248:	69 83       	std	Y+1, r22	; 0x01
    324a:	80 91 6d 06 	lds	r24, 0x066D	; 0x80066d <_ZN7TwoWire12transmittingE>
    324e:	88 23       	and	r24, r24
    3250:	99 f0       	breq	.+38     	; 0x3278 <_ZN7TwoWire5writeEh+0x3a>
    3252:	80 91 6e 06 	lds	r24, 0x066E	; 0x80066e <_ZN7TwoWire14txBufferLengthE>
    3256:	80 32       	cpi	r24, 0x20	; 32
    3258:	b0 f4       	brcc	.+44     	; 0x3286 <_ZN7TwoWire5writeEh+0x48>
    325a:	80 91 6f 06 	lds	r24, 0x066F	; 0x80066f <_ZN7TwoWire13txBufferIndexE>
    325e:	e8 2f       	mov	r30, r24
    3260:	f0 e0       	ldi	r31, 0x00	; 0
    3262:	e0 59       	subi	r30, 0x90	; 144
    3264:	f9 4f       	sbci	r31, 0xF9	; 249
    3266:	60 83       	st	Z, r22
    3268:	8f 5f       	subi	r24, 0xFF	; 255
    326a:	80 93 6f 06 	sts	0x066F, r24	; 0x80066f <_ZN7TwoWire13txBufferIndexE>
    326e:	80 93 6e 06 	sts	0x066E, r24	; 0x80066e <_ZN7TwoWire14txBufferLengthE>
    3272:	81 e0       	ldi	r24, 0x01	; 1
    3274:	90 e0       	ldi	r25, 0x00	; 0
    3276:	09 c0       	rjmp	.+18     	; 0x328a <_ZN7TwoWire5writeEh+0x4c>
    3278:	61 e0       	ldi	r22, 0x01	; 1
    327a:	ce 01       	movw	r24, r28
    327c:	01 96       	adiw	r24, 0x01	; 1
    327e:	1a de       	rcall	.-972    	; 0x2eb4 <twi_transmit>
    3280:	81 e0       	ldi	r24, 0x01	; 1
    3282:	90 e0       	ldi	r25, 0x00	; 0
    3284:	02 c0       	rjmp	.+4      	; 0x328a <_ZN7TwoWire5writeEh+0x4c>
    3286:	80 e0       	ldi	r24, 0x00	; 0
    3288:	90 e0       	ldi	r25, 0x00	; 0
    328a:	0f 90       	pop	r0
    328c:	df 91       	pop	r29
    328e:	cf 91       	pop	r28
    3290:	08 95       	ret

00003292 <_ZN7TwoWire5writeEPKhj>:
    3292:	cf 92       	push	r12
    3294:	df 92       	push	r13
    3296:	ef 92       	push	r14
    3298:	ff 92       	push	r15
    329a:	0f 93       	push	r16
    329c:	1f 93       	push	r17
    329e:	cf 93       	push	r28
    32a0:	df 93       	push	r29
    32a2:	8c 01       	movw	r16, r24
    32a4:	cb 01       	movw	r24, r22
    32a6:	6a 01       	movw	r12, r20
    32a8:	20 91 6d 06 	lds	r18, 0x066D	; 0x80066d <_ZN7TwoWire12transmittingE>
    32ac:	22 23       	and	r18, r18
    32ae:	a1 f0       	breq	.+40     	; 0x32d8 <_ZN7TwoWire5writeEPKhj+0x46>
    32b0:	41 15       	cp	r20, r1
    32b2:	51 05       	cpc	r21, r1
    32b4:	99 f0       	breq	.+38     	; 0x32dc <_ZN7TwoWire5writeEPKhj+0x4a>
    32b6:	eb 01       	movw	r28, r22
    32b8:	7b 01       	movw	r14, r22
    32ba:	e4 0e       	add	r14, r20
    32bc:	f5 1e       	adc	r15, r21
    32be:	69 91       	ld	r22, Y+
    32c0:	d8 01       	movw	r26, r16
    32c2:	ed 91       	ld	r30, X+
    32c4:	fc 91       	ld	r31, X
    32c6:	01 90       	ld	r0, Z+
    32c8:	f0 81       	ld	r31, Z
    32ca:	e0 2d       	mov	r30, r0
    32cc:	c8 01       	movw	r24, r16
    32ce:	19 95       	eicall
    32d0:	ce 15       	cp	r28, r14
    32d2:	df 05       	cpc	r29, r15
    32d4:	a1 f7       	brne	.-24     	; 0x32be <_ZN7TwoWire5writeEPKhj+0x2c>
    32d6:	02 c0       	rjmp	.+4      	; 0x32dc <_ZN7TwoWire5writeEPKhj+0x4a>
    32d8:	64 2f       	mov	r22, r20
    32da:	ec dd       	rcall	.-1064   	; 0x2eb4 <twi_transmit>
    32dc:	c6 01       	movw	r24, r12
    32de:	df 91       	pop	r29
    32e0:	cf 91       	pop	r28
    32e2:	1f 91       	pop	r17
    32e4:	0f 91       	pop	r16
    32e6:	ff 90       	pop	r15
    32e8:	ef 90       	pop	r14
    32ea:	df 90       	pop	r13
    32ec:	cf 90       	pop	r12
    32ee:	08 95       	ret

000032f0 <_ZN7TwoWire5beginEv>:
    32f0:	10 92 92 06 	sts	0x0692, r1	; 0x800692 <_ZN7TwoWire13rxBufferIndexE>
    32f4:	10 92 91 06 	sts	0x0691, r1	; 0x800691 <_ZN7TwoWire14rxBufferLengthE>
    32f8:	10 92 6f 06 	sts	0x066F, r1	; 0x80066f <_ZN7TwoWire13txBufferIndexE>
    32fc:	10 92 6e 06 	sts	0x066E, r1	; 0x80066e <_ZN7TwoWire14txBufferLengthE>
    3300:	0b dd       	rcall	.-1514   	; 0x2d18 <twi_init>
    3302:	83 e1       	ldi	r24, 0x13	; 19
    3304:	99 e1       	ldi	r25, 0x19	; 25
    3306:	05 de       	rcall	.-1014   	; 0x2f12 <twi_attachSlaveTxEvent>
    3308:	87 ee       	ldi	r24, 0xE7	; 231
    330a:	98 e1       	ldi	r25, 0x18	; 24
    330c:	fd cd       	rjmp	.-1030   	; 0x2f08 <twi_attachSlaveRxEvent>
    330e:	08 95       	ret

00003310 <_ZN7TwoWire17beginTransmissionEh>:
    3310:	81 e0       	ldi	r24, 0x01	; 1
    3312:	80 93 6d 06 	sts	0x066D, r24	; 0x80066d <_ZN7TwoWire12transmittingE>
    3316:	60 93 90 06 	sts	0x0690, r22	; 0x800690 <_ZN7TwoWire9txAddressE>
    331a:	10 92 6f 06 	sts	0x066F, r1	; 0x80066f <_ZN7TwoWire13txBufferIndexE>
    331e:	10 92 6e 06 	sts	0x066E, r1	; 0x80066e <_ZN7TwoWire14txBufferLengthE>
    3322:	08 95       	ret

00003324 <_ZN7TwoWire17beginTransmissionEi>:
    3324:	f5 cf       	rjmp	.-22     	; 0x3310 <_ZN7TwoWire17beginTransmissionEh>
    3326:	08 95       	ret

00003328 <_ZN7TwoWire15endTransmissionEh>:
    3328:	0f 93       	push	r16
    332a:	06 2f       	mov	r16, r22
    332c:	21 e0       	ldi	r18, 0x01	; 1
    332e:	40 91 6e 06 	lds	r20, 0x066E	; 0x80066e <_ZN7TwoWire14txBufferLengthE>
    3332:	60 e7       	ldi	r22, 0x70	; 112
    3334:	76 e0       	ldi	r23, 0x06	; 6
    3336:	80 91 90 06 	lds	r24, 0x0690	; 0x800690 <_ZN7TwoWire9txAddressE>
    333a:	59 dd       	rcall	.-1358   	; 0x2dee <twi_writeTo>
    333c:	10 92 6f 06 	sts	0x066F, r1	; 0x80066f <_ZN7TwoWire13txBufferIndexE>
    3340:	10 92 6e 06 	sts	0x066E, r1	; 0x80066e <_ZN7TwoWire14txBufferLengthE>
    3344:	10 92 6d 06 	sts	0x066D, r1	; 0x80066d <_ZN7TwoWire12transmittingE>
    3348:	0f 91       	pop	r16
    334a:	08 95       	ret

0000334c <_ZN7TwoWire11requestFromEhhmhh>:
    334c:	4f 92       	push	r4
    334e:	5f 92       	push	r5
    3350:	6f 92       	push	r6
    3352:	7f 92       	push	r7
    3354:	af 92       	push	r10
    3356:	bf 92       	push	r11
    3358:	cf 92       	push	r12
    335a:	ef 92       	push	r14
    335c:	ff 92       	push	r15
    335e:	0f 93       	push	r16
    3360:	1f 93       	push	r17
    3362:	cf 93       	push	r28
    3364:	df 93       	push	r29
    3366:	5c 01       	movw	r10, r24
    3368:	f6 2e       	mov	r15, r22
    336a:	d4 2f       	mov	r29, r20
    336c:	28 01       	movw	r4, r16
    336e:	39 01       	movw	r6, r18
    3370:	ee 20       	and	r14, r14
    3372:	39 f1       	breq	.+78     	; 0x33c2 <_ZN7TwoWire11requestFromEhhmhh+0x76>
    3374:	cd df       	rcall	.-102    	; 0x3310 <_ZN7TwoWire17beginTransmissionEh>
    3376:	8e 2d       	mov	r24, r14
    3378:	84 30       	cpi	r24, 0x04	; 4
    337a:	08 f0       	brcs	.+2      	; 0x337e <_ZN7TwoWire11requestFromEhhmhh+0x32>
    337c:	83 e0       	ldi	r24, 0x03	; 3
    337e:	cf ef       	ldi	r28, 0xFF	; 255
    3380:	c8 0f       	add	r28, r24
    3382:	88 23       	and	r24, r24
    3384:	d9 f0       	breq	.+54     	; 0x33bc <_ZN7TwoWire11requestFromEhhmhh+0x70>
    3386:	8c 2f       	mov	r24, r28
    3388:	88 0f       	add	r24, r24
    338a:	88 0f       	add	r24, r24
    338c:	88 0f       	add	r24, r24
    338e:	a3 01       	movw	r20, r6
    3390:	92 01       	movw	r18, r4
    3392:	04 c0       	rjmp	.+8      	; 0x339c <_ZN7TwoWire11requestFromEhhmhh+0x50>
    3394:	56 95       	lsr	r21
    3396:	47 95       	ror	r20
    3398:	37 95       	ror	r19
    339a:	27 95       	ror	r18
    339c:	8a 95       	dec	r24
    339e:	d2 f7       	brpl	.-12     	; 0x3394 <_ZN7TwoWire11requestFromEhhmhh+0x48>
    33a0:	ca 01       	movw	r24, r20
    33a2:	b9 01       	movw	r22, r18
    33a4:	d5 01       	movw	r26, r10
    33a6:	ed 91       	ld	r30, X+
    33a8:	fc 91       	ld	r31, X
    33aa:	01 90       	ld	r0, Z+
    33ac:	f0 81       	ld	r31, Z
    33ae:	e0 2d       	mov	r30, r0
    33b0:	c5 01       	movw	r24, r10
    33b2:	19 95       	eicall
    33b4:	8c 2f       	mov	r24, r28
    33b6:	c1 50       	subi	r28, 0x01	; 1
    33b8:	81 11       	cpse	r24, r1
    33ba:	e5 cf       	rjmp	.-54     	; 0x3386 <_ZN7TwoWire11requestFromEhhmhh+0x3a>
    33bc:	60 e0       	ldi	r22, 0x00	; 0
    33be:	c5 01       	movw	r24, r10
    33c0:	b3 df       	rcall	.-154    	; 0x3328 <_ZN7TwoWire15endTransmissionEh>
    33c2:	4d 2f       	mov	r20, r29
    33c4:	d1 32       	cpi	r29, 0x21	; 33
    33c6:	08 f0       	brcs	.+2      	; 0x33ca <_ZN7TwoWire11requestFromEhhmhh+0x7e>
    33c8:	40 e2       	ldi	r20, 0x20	; 32
    33ca:	2c 2d       	mov	r18, r12
    33cc:	63 e9       	ldi	r22, 0x93	; 147
    33ce:	76 e0       	ldi	r23, 0x06	; 6
    33d0:	8f 2d       	mov	r24, r15
    33d2:	bb dc       	rcall	.-1674   	; 0x2d4a <twi_readFrom>
    33d4:	10 92 92 06 	sts	0x0692, r1	; 0x800692 <_ZN7TwoWire13rxBufferIndexE>
    33d8:	80 93 91 06 	sts	0x0691, r24	; 0x800691 <_ZN7TwoWire14rxBufferLengthE>
    33dc:	df 91       	pop	r29
    33de:	cf 91       	pop	r28
    33e0:	1f 91       	pop	r17
    33e2:	0f 91       	pop	r16
    33e4:	ff 90       	pop	r15
    33e6:	ef 90       	pop	r14
    33e8:	cf 90       	pop	r12
    33ea:	bf 90       	pop	r11
    33ec:	af 90       	pop	r10
    33ee:	7f 90       	pop	r7
    33f0:	6f 90       	pop	r6
    33f2:	5f 90       	pop	r5
    33f4:	4f 90       	pop	r4
    33f6:	08 95       	ret

000033f8 <_ZN7TwoWire11requestFromEhhh>:
    33f8:	cf 92       	push	r12
    33fa:	ef 92       	push	r14
    33fc:	0f 93       	push	r16
    33fe:	1f 93       	push	r17
    3400:	c2 2e       	mov	r12, r18
    3402:	e1 2c       	mov	r14, r1
    3404:	00 e0       	ldi	r16, 0x00	; 0
    3406:	10 e0       	ldi	r17, 0x00	; 0
    3408:	98 01       	movw	r18, r16
    340a:	a0 df       	rcall	.-192    	; 0x334c <_ZN7TwoWire11requestFromEhhmhh>
    340c:	1f 91       	pop	r17
    340e:	0f 91       	pop	r16
    3410:	ef 90       	pop	r14
    3412:	cf 90       	pop	r12
    3414:	08 95       	ret

00003416 <_ZN7TwoWire11requestFromEhh>:
    3416:	21 e0       	ldi	r18, 0x01	; 1
    3418:	ef cf       	rjmp	.-34     	; 0x33f8 <_ZN7TwoWire11requestFromEhhh>
    341a:	08 95       	ret

0000341c <_ZN7TwoWire11requestFromEii>:
    341c:	21 e0       	ldi	r18, 0x01	; 1
    341e:	ec cf       	rjmp	.-40     	; 0x33f8 <_ZN7TwoWire11requestFromEhhh>
    3420:	08 95       	ret

00003422 <_ZN7TwoWire15endTransmissionEv>:
    3422:	61 e0       	ldi	r22, 0x01	; 1
    3424:	81 cf       	rjmp	.-254    	; 0x3328 <_ZN7TwoWire15endTransmissionEh>
    3426:	08 95       	ret

00003428 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    3428:	86 e3       	ldi	r24, 0x36	; 54
    342a:	92 e0       	ldi	r25, 0x02	; 2
    342c:	90 93 68 06 	sts	0x0668, r25	; 0x800668 <Wire+0x1>
    3430:	80 93 67 06 	sts	0x0667, r24	; 0x800667 <Wire>
    3434:	08 95       	ret

00003436 <_ZN9IReadable15CommandReceivedEhPKhh>:
#include "EtherComm.h"

class IReadable : public IDevice {
public:
	void CommandReceived(uint8_t id, const uint8_t* data, uint8_t len){
		if(len == 0){
    3436:	21 11       	cpse	r18, r1
    3438:	0d c0       	rjmp	.+26     	; 0x3454 <_ZN9IReadable15CommandReceivedEhPKhh+0x1e>
			ReadRegisterRequested(id, EtherComm::buffer + 3);
    343a:	40 91 00 02 	lds	r20, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    343e:	50 91 01 02 	lds	r21, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    3442:	4d 5f       	subi	r20, 0xFD	; 253
    3444:	5f 4f       	sbci	r21, 0xFF	; 255
    3446:	dc 01       	movw	r26, r24
    3448:	ed 91       	ld	r30, X+
    344a:	fc 91       	ld	r31, X
    344c:	06 80       	ldd	r0, Z+6	; 0x06
    344e:	f7 81       	ldd	r31, Z+7	; 0x07
    3450:	e0 2d       	mov	r30, r0
    3452:	19 95       	eicall
    3454:	08 95       	ret

00003456 <_ZN13DigitalSensor6UpdateEPh>:
		Serial.print(data[i], HEX);
	}
	Serial.println();*/
	if(len >= 1){
		if(registers[data[0]] != NULL){
			registers[data[0]]->CommandReceived(data[0], data + 1, len - 1);
    3456:	08 95       	ret

00003458 <_ZN9IWritable15CommandReceivedEhPKhh>:
    3458:	dc 01       	movw	r26, r24
    345a:	ed 91       	ld	r30, X+
    345c:	fc 91       	ld	r31, X
    345e:	06 80       	ldd	r0, Z+6	; 0x06
    3460:	f7 81       	ldd	r31, Z+7	; 0x07
    3462:	e0 2d       	mov	r30, r0
    3464:	19 95       	eicall
    3466:	08 95       	ret

00003468 <_ZN13ServoActuator6UpdateEPh>:
    3468:	08 95       	ret

0000346a <_ZN13DigitalSensor21ReadRegisterRequestedEhPh>:
    346a:	dc 01       	movw	r26, r24
    346c:	12 96       	adiw	r26, 0x02	; 2
    346e:	2c 91       	ld	r18, X
    3470:	12 97       	sbiw	r26, 0x02	; 2
    3472:	26 13       	cpse	r18, r22
    3474:	1a c0       	rjmp	.+52     	; 0x34aa <_ZN13DigitalSensor21ReadRegisterRequestedEhPh+0x40>
    3476:	14 96       	adiw	r26, 0x04	; 4
    3478:	ed 91       	ld	r30, X+
    347a:	fc 91       	ld	r31, X
    347c:	15 97       	sbiw	r26, 0x05	; 5
    347e:	60 81       	ld	r22, Z
    3480:	13 96       	adiw	r26, 0x03	; 3
    3482:	3c 91       	ld	r19, X
    3484:	36 23       	and	r19, r22
    3486:	61 e0       	ldi	r22, 0x01	; 1
    3488:	09 f4       	brne	.+2      	; 0x348c <_ZN13DigitalSensor21ReadRegisterRequestedEhPh+0x22>
    348a:	60 e0       	ldi	r22, 0x00	; 0
    348c:	fa 01       	movw	r30, r20
    348e:	dc 01       	movw	r26, r24
    3490:	16 96       	adiw	r26, 0x06	; 6
    3492:	8c 91       	ld	r24, X
    3494:	86 27       	eor	r24, r22
    3496:	80 83       	st	Z, r24
    3498:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    349c:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    34a0:	22 83       	std	Z+2, r18	; 0x02
    34a2:	62 e0       	ldi	r22, 0x02	; 2
    34a4:	83 e0       	ldi	r24, 0x03	; 3
    34a6:	0c 94 60 07 	jmp	0xec0	; 0xec0 <_ZN9EtherComm11SendCommandEhh>
    34aa:	08 95       	ret

000034ac <_ZN13ServoActuator22WriteRegisterRequestedEhPKhh>:
    34ac:	cf 93       	push	r28
    34ae:	fc 01       	movw	r30, r24
    34b0:	c2 81       	ldd	r28, Z+2	; 0x02
    34b2:	c6 13       	cpse	r28, r22
    34b4:	10 c0       	rjmp	.+32     	; 0x34d6 <_ZN13ServoActuator22WriteRegisterRequestedEhPKhh+0x2a>
    34b6:	21 30       	cpi	r18, 0x01	; 1
    34b8:	d1 f5       	brne	.+116    	; 0x352e <_ZN13ServoActuator22WriteRegisterRequestedEhPKhh+0x82>
    34ba:	6f ef       	ldi	r22, 0xFF	; 255
    34bc:	8d e6       	ldi	r24, 0x6D	; 109
    34be:	95 e0       	ldi	r25, 0x05	; 5
    34c0:	a2 d9       	rcall	.-3260   	; 0x2806 <_ZN13HardwareServo9setPulseAEh>
    34c2:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    34c6:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    34ca:	c2 83       	std	Z+2, r28	; 0x02
    34cc:	61 e0       	ldi	r22, 0x01	; 1
    34ce:	83 e0       	ldi	r24, 0x03	; 3
    34d0:	0e 94 60 07 	call	0xec0	; 0xec0 <_ZN9EtherComm11SendCommandEhh>
    34d4:	2c c0       	rjmp	.+88     	; 0x352e <_ZN13ServoActuator22WriteRegisterRequestedEhPKhh+0x82>
    34d6:	83 81       	ldd	r24, Z+3	; 0x03
    34d8:	68 13       	cpse	r22, r24
    34da:	0c c0       	rjmp	.+24     	; 0x34f4 <_ZN13ServoActuator22WriteRegisterRequestedEhPKhh+0x48>
    34dc:	22 30       	cpi	r18, 0x02	; 2
    34de:	39 f5       	brne	.+78     	; 0x352e <_ZN13ServoActuator22WriteRegisterRequestedEhPKhh+0x82>
    34e0:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    34e4:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    34e8:	62 83       	std	Z+2, r22	; 0x02
    34ea:	61 e0       	ldi	r22, 0x01	; 1
    34ec:	83 e0       	ldi	r24, 0x03	; 3
    34ee:	0e 94 60 07 	call	0xec0	; 0xec0 <_ZN9EtherComm11SendCommandEhh>
    34f2:	1d c0       	rjmp	.+58     	; 0x352e <_ZN13ServoActuator22WriteRegisterRequestedEhPKhh+0x82>
    34f4:	84 81       	ldd	r24, Z+4	; 0x04
    34f6:	68 13       	cpse	r22, r24
    34f8:	0c c0       	rjmp	.+24     	; 0x3512 <_ZN13ServoActuator22WriteRegisterRequestedEhPKhh+0x66>
    34fa:	22 30       	cpi	r18, 0x02	; 2
    34fc:	c1 f4       	brne	.+48     	; 0x352e <_ZN13ServoActuator22WriteRegisterRequestedEhPKhh+0x82>
    34fe:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    3502:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    3506:	62 83       	std	Z+2, r22	; 0x02
    3508:	61 e0       	ldi	r22, 0x01	; 1
    350a:	83 e0       	ldi	r24, 0x03	; 3
    350c:	0e 94 60 07 	call	0xec0	; 0xec0 <_ZN9EtherComm11SendCommandEhh>
    3510:	0e c0       	rjmp	.+28     	; 0x352e <_ZN13ServoActuator22WriteRegisterRequestedEhPKhh+0x82>
    3512:	85 81       	ldd	r24, Z+5	; 0x05
    3514:	68 13       	cpse	r22, r24
    3516:	0b c0       	rjmp	.+22     	; 0x352e <_ZN13ServoActuator22WriteRegisterRequestedEhPKhh+0x82>
    3518:	21 30       	cpi	r18, 0x01	; 1
    351a:	49 f4       	brne	.+18     	; 0x352e <_ZN13ServoActuator22WriteRegisterRequestedEhPKhh+0x82>
    351c:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    3520:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    3524:	62 83       	std	Z+2, r22	; 0x02
    3526:	61 e0       	ldi	r22, 0x01	; 1
    3528:	83 e0       	ldi	r24, 0x03	; 3
    352a:	0e 94 60 07 	call	0xec0	; 0xec0 <_ZN9EtherComm11SendCommandEhh>
    352e:	cf 91       	pop	r28
    3530:	08 95       	ret

00003532 <_ZN5Robot14RegisterDeviceEhP7IDevice>:
    3532:	90 e0       	ldi	r25, 0x00	; 0
    3534:	fc 01       	movw	r30, r24
    3536:	ee 0f       	add	r30, r30
    3538:	ff 1f       	adc	r31, r31
    353a:	e4 50       	subi	r30, 0x04	; 4
    353c:	f9 4f       	sbci	r31, 0xF9	; 249
    353e:	20 81       	ld	r18, Z
    3540:	31 81       	ldd	r19, Z+1	; 0x01
    3542:	23 2b       	or	r18, r19
    3544:	49 f4       	brne	.+18     	; 0x3558 <_ZN5Robot14RegisterDeviceEhP7IDevice+0x26>
    3546:	88 0f       	add	r24, r24
    3548:	99 1f       	adc	r25, r25
    354a:	fc 01       	movw	r30, r24
    354c:	e4 50       	subi	r30, 0x04	; 4
    354e:	f9 4f       	sbci	r31, 0xF9	; 249
    3550:	71 83       	std	Z+1, r23	; 0x01
    3552:	60 83       	st	Z, r22
    3554:	81 e0       	ldi	r24, 0x01	; 1
    3556:	08 95       	ret
    3558:	80 e0       	ldi	r24, 0x00	; 0
    355a:	08 95       	ret

0000355c <_ZN13DigitalSensor5beginEv>:
    355c:	bc 01       	movw	r22, r24
    355e:	fc 01       	movw	r30, r24
    3560:	82 81       	ldd	r24, Z+2	; 0x02
    3562:	e7 cf       	rjmp	.-50     	; 0x3532 <_ZN5Robot14RegisterDeviceEhP7IDevice>
    3564:	08 95       	ret

00003566 <_ZN13ServoActuator5beginEv>:
    3566:	0f 93       	push	r16
    3568:	1f 93       	push	r17
    356a:	cf 93       	push	r28
    356c:	8c 01       	movw	r16, r24
    356e:	bc 01       	movw	r22, r24
    3570:	fc 01       	movw	r30, r24
    3572:	82 81       	ldd	r24, Z+2	; 0x02
    3574:	de df       	rcall	.-68     	; 0x3532 <_ZN5Robot14RegisterDeviceEhP7IDevice>
    3576:	c8 2f       	mov	r28, r24
    3578:	88 23       	and	r24, r24
    357a:	31 f1       	breq	.+76     	; 0x35c8 <_ZN13ServoActuator5beginEv+0x62>
    357c:	b8 01       	movw	r22, r16
    357e:	f8 01       	movw	r30, r16
    3580:	83 81       	ldd	r24, Z+3	; 0x03
    3582:	d7 df       	rcall	.-82     	; 0x3532 <_ZN5Robot14RegisterDeviceEhP7IDevice>
    3584:	c8 2f       	mov	r28, r24
    3586:	88 23       	and	r24, r24
    3588:	f9 f0       	breq	.+62     	; 0x35c8 <_ZN13ServoActuator5beginEv+0x62>
    358a:	b8 01       	movw	r22, r16
    358c:	f8 01       	movw	r30, r16
    358e:	84 81       	ldd	r24, Z+4	; 0x04
    3590:	d0 df       	rcall	.-96     	; 0x3532 <_ZN5Robot14RegisterDeviceEhP7IDevice>
    3592:	c8 2f       	mov	r28, r24
    3594:	88 23       	and	r24, r24
    3596:	c1 f0       	breq	.+48     	; 0x35c8 <_ZN13ServoActuator5beginEv+0x62>
    3598:	b8 01       	movw	r22, r16
    359a:	f8 01       	movw	r30, r16
    359c:	85 81       	ldd	r24, Z+5	; 0x05
    359e:	c9 df       	rcall	.-110    	; 0x3532 <_ZN5Robot14RegisterDeviceEhP7IDevice>
    35a0:	c8 2f       	mov	r28, r24
    35a2:	88 23       	and	r24, r24
    35a4:	89 f0       	breq	.+34     	; 0x35c8 <_ZN13ServoActuator5beginEv+0x62>
    35a6:	66 e2       	ldi	r22, 0x26	; 38
    35a8:	72 e0       	ldi	r23, 0x02	; 2
    35aa:	8d e6       	ldi	r24, 0x6D	; 109
    35ac:	95 e0       	ldi	r25, 0x05	; 5
    35ae:	79 d9       	rcall	.-3342   	; 0x28a2 <_ZN13HardwareServo7setMinAEj>
    35b0:	60 e6       	ldi	r22, 0x60	; 96
    35b2:	79 e0       	ldi	r23, 0x09	; 9
    35b4:	8d e6       	ldi	r24, 0x6D	; 109
    35b6:	95 e0       	ldi	r25, 0x05	; 5
    35b8:	7c d9       	rcall	.-3336   	; 0x28b2 <_ZN13HardwareServo7setMaxAEj>
    35ba:	60 e0       	ldi	r22, 0x00	; 0
    35bc:	8d e6       	ldi	r24, 0x6D	; 109
    35be:	95 e0       	ldi	r25, 0x05	; 5
    35c0:	22 d9       	rcall	.-3516   	; 0x2806 <_ZN13HardwareServo9setPulseAEh>
    35c2:	8d e6       	ldi	r24, 0x6D	; 109
    35c4:	95 e0       	ldi	r25, 0x05	; 5
    35c6:	05 d9       	rcall	.-3574   	; 0x27d2 <_ZN13HardwareServo7EnableAEv>
    35c8:	8c 2f       	mov	r24, r28
    35ca:	cf 91       	pop	r28
    35cc:	1f 91       	pop	r17
    35ce:	0f 91       	pop	r16
    35d0:	08 95       	ret

000035d2 <_GLOBAL__sub_I__ZN5Robot9registersE>:

#include "../IReadable.h"

class DigitalSensor : public IReadable {
public:
	DigitalSensor(const uint8_t ID, Register& DDRPort, Register& PortPort, Register& PinPort, uint8_t Pin, bool Inversed = true) : _id(ID), pin(Pin), pinPort(&PinPort), inversed(Inversed) {
    35d2:	e5 ef       	ldi	r30, 0xF5	; 245
    35d4:	f6 e0       	ldi	r31, 0x06	; 6
    35d6:	88 e4       	ldi	r24, 0x48	; 72
    35d8:	92 e0       	ldi	r25, 0x02	; 2
    35da:	91 83       	std	Z+1, r25	; 0x01
    35dc:	80 83       	st	Z, r24
    35de:	12 82       	std	Z+2, r1	; 0x02
    35e0:	82 e0       	ldi	r24, 0x02	; 2
    35e2:	83 83       	std	Z+3, r24	; 0x03
    35e4:	81 e3       	ldi	r24, 0x31	; 49
    35e6:	90 e0       	ldi	r25, 0x00	; 0
    35e8:	95 83       	std	Z+5, r25	; 0x05
    35ea:	84 83       	std	Z+4, r24	; 0x04
    35ec:	81 e0       	ldi	r24, 0x01	; 1
    35ee:	86 83       	std	Z+6, r24	; 0x06
		DDRPort &= ~pin; //Enable input
    35f0:	81 98       	cbi	0x10, 1	; 16
		PortPort |= pin; //Enable pullup
    35f2:	89 9a       	sbi	0x11, 1	; 17
		rov.RegisterDevice(0, this);
    35f4:	bf 01       	movw	r22, r30
    35f6:	80 e0       	ldi	r24, 0x00	; 0
    35f8:	9c df       	rcall	.-200    	; 0x3532 <_ZN5Robot14RegisterDeviceEhP7IDevice>
#define ID_IMU_TEMPERATURE 1
#define ID_IMU_ACCELEROMETER 2
#define ID_PRESSURE_SENSOR 4

DigitalSensor BtnTest(ID_TEST_BUTTON, DDR_BTN0, PORT_BTN0, PIN_BTN0, MASK_BTN0);
ImuSensor Imu(ID_IMU_TEMPERATURE, ID_IMU_ACCELEROMETER);
    35fa:	42 e0       	ldi	r20, 0x02	; 2
    35fc:	61 e0       	ldi	r22, 0x01	; 1
    35fe:	86 ee       	ldi	r24, 0xE6	; 230
    3600:	96 e0       	ldi	r25, 0x06	; 6
    3602:	cd d0       	rcall	.+410    	; 0x379e <_ZN9ImuSensorC1Ehh>
PressureSensor Pressure(ID_PRESSURE_SENSOR, Timer0);
    3604:	4d ee       	ldi	r20, 0xED	; 237
    3606:	55 e0       	ldi	r21, 0x05	; 5
    3608:	64 e0       	ldi	r22, 0x04	; 4
    360a:	8a eb       	ldi	r24, 0xBA	; 186
    360c:	96 e0       	ldi	r25, 0x06	; 6
    360e:	84 d1       	rcall	.+776    	; 0x3918 <_ZN14PressureSensorC1EhR13HardwareTimer>
#include "../PinDefinitions/PCBPins.h"

class ServoActuator : public IWritable {
public:
	ServoActuator(const uint8_t id, const uint8_t minId, const uint8_t maxId, const uint8_t enId)
		: _id(id), _minId(minId), _maxId(maxId), _enId(enId)
    3610:	e3 eb       	ldi	r30, 0xB3	; 179
    3612:	f6 e0       	ldi	r31, 0x06	; 6
    3614:	84 e5       	ldi	r24, 0x54	; 84
    3616:	92 e0       	ldi	r25, 0x02	; 2
    3618:	91 83       	std	Z+1, r25	; 0x01
    361a:	80 83       	st	Z, r24
    361c:	85 e0       	ldi	r24, 0x05	; 5
    361e:	82 83       	std	Z+2, r24	; 0x02
    3620:	86 e0       	ldi	r24, 0x06	; 6
    3622:	83 83       	std	Z+3, r24	; 0x03
    3624:	87 e0       	ldi	r24, 0x07	; 7
    3626:	84 83       	std	Z+4, r24	; 0x04
    3628:	88 e0       	ldi	r24, 0x08	; 8
    362a:	85 83       	std	Z+5, r24	; 0x05
    362c:	08 95       	ret

0000362e <_ZN9ImuSensor6UpdateEPh>:
		rov.RegisterDevice(tempId, this)
		&& rov.RegisterDevice(accelId, this)
		&& imu.begin();
}

void ImuSensor::Update(uint8_t* buffer){
    362e:	08 95       	ret

00003630 <_ZN9ImuSensor5beginEv>:

ImuSensor::ImuSensor(const uint8_t TempId, const uint8_t AccelId) : imu(55, 0x28), tempId(TempId), accelId(AccelId) {
	
}

bool ImuSensor::begin(){
    3630:	cf 93       	push	r28
    3632:	df 93       	push	r29
    3634:	ec 01       	movw	r28, r24
	return 
		rov.RegisterDevice(tempId, this)
    3636:	bc 01       	movw	r22, r24
    3638:	8d 85       	ldd	r24, Y+13	; 0x0d
    363a:	7b df       	rcall	.-266    	; 0x3532 <_ZN5Robot14RegisterDeviceEhP7IDevice>
		&& rov.RegisterDevice(accelId, this)
		&& imu.begin();
    363c:	88 23       	and	r24, r24
    363e:	51 f0       	breq	.+20     	; 0x3654 <_ZN9ImuSensor5beginEv+0x24>
}

bool ImuSensor::begin(){
	return 
		rov.RegisterDevice(tempId, this)
		&& rov.RegisterDevice(accelId, this)
    3640:	be 01       	movw	r22, r28
    3642:	8e 85       	ldd	r24, Y+14	; 0x0e
    3644:	76 df       	rcall	.-276    	; 0x3532 <_ZN5Robot14RegisterDeviceEhP7IDevice>
    3646:	88 23       	and	r24, r24
    3648:	29 f0       	breq	.+10     	; 0x3654 <_ZN9ImuSensor5beginEv+0x24>
		&& imu.begin();
    364a:	6c e0       	ldi	r22, 0x0C	; 12
    364c:	ce 01       	movw	r24, r28
    364e:	02 96       	adiw	r24, 0x02	; 2
    3650:	0e 94 38 02 	call	0x470	; 0x470 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>
}
    3654:	df 91       	pop	r29
    3656:	cf 91       	pop	r28
    3658:	08 95       	ret

0000365a <_ZN9ImuSensor21ReadRegisterRequestedEhPh>:
	*buffer++ = *val++;
}

AdafruitImu::Vector<3> vector;

void ImuSensor::ReadRegisterRequested(uint8_t id, uint8_t* buffer){
    365a:	ef 92       	push	r14
    365c:	ff 92       	push	r15
    365e:	0f 93       	push	r16
    3660:	1f 93       	push	r17
    3662:	cf 93       	push	r28
    3664:	df 93       	push	r29
    3666:	cd b7       	in	r28, 0x3d	; 61
    3668:	de b7       	in	r29, 0x3e	; 62
    366a:	68 97       	sbiw	r28, 0x18	; 24
    366c:	0f b6       	in	r0, 0x3f	; 63
    366e:	f8 94       	cli
    3670:	de bf       	out	0x3e, r29	; 62
    3672:	0f be       	out	0x3f, r0	; 63
    3674:	cd bf       	out	0x3d, r28	; 61
    3676:	f6 2e       	mov	r15, r22
    3678:	8a 01       	movw	r16, r20
	if(id == tempId){
    367a:	dc 01       	movw	r26, r24
    367c:	1d 96       	adiw	r26, 0x0d	; 13
    367e:	ec 90       	ld	r14, X
    3680:	e6 12       	cpse	r14, r22
    3682:	0f c0       	rjmp	.+30     	; 0x36a2 <_ZN9ImuSensor21ReadRegisterRequestedEhPh+0x48>
		buffer[0] = imu.getTemp();
    3684:	02 96       	adiw	r24, 0x02	; 2
    3686:	0e 94 a5 02 	call	0x54a	; 0x54a <_ZN15Adafruit_BNO0557getTempEv>
    368a:	f8 01       	movw	r30, r16
    368c:	80 83       	st	Z, r24
	virtual void CommandReceived(uint8_t id, const uint8_t* data, uint8_t len) = 0;
	virtual void Update(uint8_t* buffer) = 0;
	
protected:
	void inline SendCommand(uint8_t id, uint8_t len){
		EtherComm::buffer[2] = id;
    368e:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    3692:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    3696:	e2 82       	std	Z+2, r14	; 0x02
		EtherComm::SendCommand(CMD_UpdateDevice, len + 1);
    3698:	62 e0       	ldi	r22, 0x02	; 2
    369a:	83 e0       	ldi	r24, 0x03	; 3
    369c:	0e 94 60 07 	call	0xec0	; 0xec0 <_ZN9EtherComm11SendCommandEhh>
    36a0:	71 c0       	rjmp	.+226    	; 0x3784 <_ZN9ImuSensor21ReadRegisterRequestedEhPh+0x12a>
		SendCommand(id, 1);
	}else if(id == accelId){
    36a2:	dc 01       	movw	r26, r24
    36a4:	1e 96       	adiw	r26, 0x0e	; 14
    36a6:	2c 91       	ld	r18, X
    36a8:	62 13       	cpse	r22, r18
    36aa:	6c c0       	rjmp	.+216    	; 0x3784 <_ZN9ImuSensor21ReadRegisterRequestedEhPh+0x12a>
		vector = imu.getVector(Adafruit_BNO055::VECTOR_ACCELEROMETER );
    36ac:	bc 01       	movw	r22, r24
    36ae:	6e 5f       	subi	r22, 0xFE	; 254
    36b0:	7f 4f       	sbci	r23, 0xFF	; 255
    36b2:	48 e0       	ldi	r20, 0x08	; 8
    36b4:	ce 01       	movw	r24, r28
    36b6:	01 96       	adiw	r24, 0x01	; 1
    36b8:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
    36bc:	fe 01       	movw	r30, r28
    36be:	31 96       	adiw	r30, 0x01	; 1
    36c0:	ac ef       	ldi	r26, 0xFC	; 252
    36c2:	b8 e0       	ldi	r27, 0x08	; 8
    36c4:	ce 01       	movw	r24, r28
    36c6:	0d 96       	adiw	r24, 0x0d	; 13
		}

		Vector& operator=(const Vector& v)
		{
			for (int x = 0; x < N; x++ )
			p_vec[x] = v.p_vec[x];
    36c8:	41 91       	ld	r20, Z+
    36ca:	51 91       	ld	r21, Z+
    36cc:	61 91       	ld	r22, Z+
    36ce:	71 91       	ld	r23, Z+
    36d0:	4d 93       	st	X+, r20
    36d2:	5d 93       	st	X+, r21
    36d4:	6d 93       	st	X+, r22
    36d6:	7d 93       	st	X+, r23
			return ret;
		}

		Vector& operator=(const Vector& v)
		{
			for (int x = 0; x < N; x++ )
    36d8:	e8 17       	cp	r30, r24
    36da:	f9 07       	cpc	r31, r25
    36dc:	a9 f7       	brne	.-22     	; 0x36c8 <_ZN9ImuSensor21ReadRegisterRequestedEhPh+0x6e>
		saveFloat(vector.x(), buffer + 0);
    36de:	ec ef       	ldi	r30, 0xFC	; 252
    36e0:	f8 e0       	ldi	r31, 0x08	; 8
    36e2:	20 81       	ld	r18, Z
    36e4:	51 81       	ldd	r21, Z+1	; 0x01
    36e6:	42 81       	ldd	r20, Z+2	; 0x02
    36e8:	33 81       	ldd	r19, Z+3	; 0x03
    36ea:	82 2f       	mov	r24, r18
    36ec:	95 2f       	mov	r25, r21
    36ee:	a4 2f       	mov	r26, r20
    36f0:	b3 2f       	mov	r27, r19
    36f2:	8d 87       	std	Y+13, r24	; 0x0d
    36f4:	9e 87       	std	Y+14, r25	; 0x0e
    36f6:	af 87       	std	Y+15, r26	; 0x0f
    36f8:	b8 8b       	std	Y+16, r27	; 0x10
	
}

static void saveFloat(float f, uint8_t* buffer){ //TODO put in IRegister? Used in PressureSensor too
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    36fa:	d8 01       	movw	r26, r16
    36fc:	2c 93       	st	X, r18
	*buffer++ = *val++;
    36fe:	8e 85       	ldd	r24, Y+14	; 0x0e
    3700:	11 96       	adiw	r26, 0x01	; 1
    3702:	8c 93       	st	X, r24
    3704:	11 97       	sbiw	r26, 0x01	; 1
	*buffer++ = *val++;
    3706:	8f 85       	ldd	r24, Y+15	; 0x0f
    3708:	12 96       	adiw	r26, 0x02	; 2
    370a:	8c 93       	st	X, r24
    370c:	12 97       	sbiw	r26, 0x02	; 2
	*buffer++ = *val++;
    370e:	88 89       	ldd	r24, Y+16	; 0x10
    3710:	13 96       	adiw	r26, 0x03	; 3
    3712:	8c 93       	st	X, r24
    3714:	24 81       	ldd	r18, Z+4	; 0x04
    3716:	55 81       	ldd	r21, Z+5	; 0x05
    3718:	46 81       	ldd	r20, Z+6	; 0x06
    371a:	37 81       	ldd	r19, Z+7	; 0x07
    371c:	82 2f       	mov	r24, r18
    371e:	95 2f       	mov	r25, r21
    3720:	a4 2f       	mov	r26, r20
    3722:	b3 2f       	mov	r27, r19
    3724:	89 8b       	std	Y+17, r24	; 0x11
    3726:	9a 8b       	std	Y+18, r25	; 0x12
    3728:	ab 8b       	std	Y+19, r26	; 0x13
    372a:	bc 8b       	std	Y+20, r27	; 0x14
	
}

static void saveFloat(float f, uint8_t* buffer){ //TODO put in IRegister? Used in PressureSensor too
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    372c:	d8 01       	movw	r26, r16
    372e:	14 96       	adiw	r26, 0x04	; 4
    3730:	2c 93       	st	X, r18
    3732:	14 97       	sbiw	r26, 0x04	; 4
	*buffer++ = *val++;
    3734:	8a 89       	ldd	r24, Y+18	; 0x12
    3736:	15 96       	adiw	r26, 0x05	; 5
    3738:	8c 93       	st	X, r24
    373a:	15 97       	sbiw	r26, 0x05	; 5
	*buffer++ = *val++;
    373c:	8b 89       	ldd	r24, Y+19	; 0x13
    373e:	16 96       	adiw	r26, 0x06	; 6
    3740:	8c 93       	st	X, r24
    3742:	16 97       	sbiw	r26, 0x06	; 6
	*buffer++ = *val++;
    3744:	8c 89       	ldd	r24, Y+20	; 0x14
    3746:	17 96       	adiw	r26, 0x07	; 7
    3748:	8c 93       	st	X, r24
    374a:	20 85       	ldd	r18, Z+8	; 0x08
    374c:	51 85       	ldd	r21, Z+9	; 0x09
    374e:	42 85       	ldd	r20, Z+10	; 0x0a
    3750:	33 85       	ldd	r19, Z+11	; 0x0b
    3752:	82 2f       	mov	r24, r18
    3754:	95 2f       	mov	r25, r21
    3756:	a4 2f       	mov	r26, r20
    3758:	b3 2f       	mov	r27, r19
    375a:	8d 8b       	std	Y+21, r24	; 0x15
    375c:	9e 8b       	std	Y+22, r25	; 0x16
    375e:	af 8b       	std	Y+23, r26	; 0x17
    3760:	b8 8f       	std	Y+24, r27	; 0x18
	
}

static void saveFloat(float f, uint8_t* buffer){ //TODO put in IRegister? Used in PressureSensor too
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    3762:	f8 01       	movw	r30, r16
    3764:	20 87       	std	Z+8, r18	; 0x08
	*buffer++ = *val++;
    3766:	8e 89       	ldd	r24, Y+22	; 0x16
    3768:	81 87       	std	Z+9, r24	; 0x09
	*buffer++ = *val++;
    376a:	8f 89       	ldd	r24, Y+23	; 0x17
    376c:	82 87       	std	Z+10, r24	; 0x0a
	*buffer++ = *val++;
    376e:	88 8d       	ldd	r24, Y+24	; 0x18
    3770:	83 87       	std	Z+11, r24	; 0x0b
	virtual void CommandReceived(uint8_t id, const uint8_t* data, uint8_t len) = 0;
	virtual void Update(uint8_t* buffer) = 0;
	
protected:
	void inline SendCommand(uint8_t id, uint8_t len){
		EtherComm::buffer[2] = id;
    3772:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    3776:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    377a:	f2 82       	std	Z+2, r15	; 0x02
		EtherComm::SendCommand(CMD_UpdateDevice, len + 1);
    377c:	6d e0       	ldi	r22, 0x0D	; 13
    377e:	83 e0       	ldi	r24, 0x03	; 3
    3780:	0e 94 60 07 	call	0xec0	; 0xec0 <_ZN9EtherComm11SendCommandEhh>
	saveFloat(vector.x(), buffer + 14);
	saveFloat(vector.y(), buffer + 18);
	saveFloat(vector.z(), buffer + 22);
	
	return 1 + 1 + 6*4;*/
    3784:	68 96       	adiw	r28, 0x18	; 24
    3786:	0f b6       	in	r0, 0x3f	; 63
    3788:	f8 94       	cli
    378a:	de bf       	out	0x3e, r29	; 62
    378c:	0f be       	out	0x3f, r0	; 63
    378e:	cd bf       	out	0x3d, r28	; 61
    3790:	df 91       	pop	r29
    3792:	cf 91       	pop	r28
    3794:	1f 91       	pop	r17
    3796:	0f 91       	pop	r16
    3798:	ff 90       	pop	r15
    379a:	ef 90       	pop	r14
    379c:	08 95       	ret

0000379e <_ZN9ImuSensorC1Ehh>:
#define ID_TEMP 1
#define ID_ACCEL 2
//#include "../BNO055/utility/vector.h"
//Adafruit_BNO055 ImuSensor::imu;

ImuSensor::ImuSensor(const uint8_t TempId, const uint8_t AccelId) : imu(55, 0x28), tempId(TempId), accelId(AccelId) {
    379e:	ef 92       	push	r14
    37a0:	ff 92       	push	r15
    37a2:	0f 93       	push	r16
    37a4:	1f 93       	push	r17
    37a6:	cf 93       	push	r28
    37a8:	df 93       	push	r29
    37aa:	ec 01       	movw	r28, r24
    37ac:	e6 2e       	mov	r14, r22
    37ae:	f4 2e       	mov	r15, r20
    37b0:	20 e6       	ldi	r18, 0x60	; 96
    37b2:	32 e0       	ldi	r19, 0x02	; 2
    37b4:	fc 01       	movw	r30, r24
    37b6:	21 93       	st	Z+, r18
    37b8:	31 93       	st	Z+, r19
    37ba:	cf 01       	movw	r24, r30
    37bc:	07 e6       	ldi	r16, 0x67	; 103
    37be:	16 e0       	ldi	r17, 0x06	; 6
    37c0:	28 e2       	ldi	r18, 0x28	; 40
    37c2:	47 e3       	ldi	r20, 0x37	; 55
    37c4:	50 e0       	ldi	r21, 0x00	; 0
    37c6:	60 e0       	ldi	r22, 0x00	; 0
    37c8:	70 e0       	ldi	r23, 0x00	; 0
    37ca:	0e 94 c3 01 	call	0x386	; 0x386 <_ZN15Adafruit_BNO055C1ElhP7TwoWire>
    37ce:	ed 86       	std	Y+13, r14	; 0x0d
    37d0:	fe 86       	std	Y+14, r15	; 0x0e
	
}
    37d2:	df 91       	pop	r29
    37d4:	cf 91       	pop	r28
    37d6:	1f 91       	pop	r17
    37d8:	0f 91       	pop	r16
    37da:	ff 90       	pop	r15
    37dc:	ef 90       	pop	r14
    37de:	08 95       	ret

000037e0 <_GLOBAL__sub_I__ZN9ImuSensorC2Ehh>:
	template <uint8_t N> class Vector
	{
		public:
		Vector()
		{
			memset(p_vec, 0, sizeof(double)*N);
    37e0:	8c e0       	ldi	r24, 0x0C	; 12
    37e2:	ec ef       	ldi	r30, 0xFC	; 252
    37e4:	f8 e0       	ldi	r31, 0x08	; 8
    37e6:	df 01       	movw	r26, r30
    37e8:	1d 92       	st	X+, r1
    37ea:	8a 95       	dec	r24
    37ec:	e9 f7       	brne	.-6      	; 0x37e8 <_GLOBAL__sub_I__ZN9ImuSensorC2Ehh+0x8>
    37ee:	08 95       	ret

000037f0 <_ZN14PressureSensor5beginEv>:

PressureSensor::PressureSensor(const uint8_t id, HardwareTimer &timer) : sensor(timer), _id(id) {
	
}

bool PressureSensor::begin(){
    37f0:	1f 93       	push	r17
    37f2:	cf 93       	push	r28
    37f4:	df 93       	push	r29
    37f6:	ec 01       	movw	r28, r24
	if(!rov.RegisterDevice(_id, this)) return false;
    37f8:	bc 01       	movw	r22, r24
    37fa:	8a a5       	ldd	r24, Y+42	; 0x2a
    37fc:	9a de       	rcall	.-716    	; 0x3532 <_ZN5Robot14RegisterDeviceEhP7IDevice>
    37fe:	18 2f       	mov	r17, r24
    3800:	88 23       	and	r24, r24
    3802:	61 f0       	breq	.+24     	; 0x381c <_ZN14PressureSensor5beginEv+0x2c>
	if(sensor.begin()){
    3804:	22 96       	adiw	r28, 0x02	; 2
    3806:	ce 01       	movw	r24, r28
    3808:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <_ZN6MS58375beginEv>
    380c:	18 2f       	mov	r17, r24
    380e:	88 23       	and	r24, r24
    3810:	29 f0       	breq	.+10     	; 0x381c <_ZN14PressureSensor5beginEv+0x2c>
		sensor.setModel(MS5837::MS5837_30BA);
    3812:	60 91 1f 02 	lds	r22, 0x021F	; 0x80021f <_ZN6MS583711MS5837_30BAE>
    3816:	ce 01       	movw	r24, r28
    3818:	0e 94 16 08 	call	0x102c	; 0x102c <_ZN6MS58378setModelEh>
		//sensor.setFluidDensity(997); //Freshwater
		return true;
	}
	
	return false;
}
    381c:	81 2f       	mov	r24, r17
    381e:	df 91       	pop	r29
    3820:	cf 91       	pop	r28
    3822:	1f 91       	pop	r17
    3824:	08 95       	ret

00003826 <_ZN14PressureSensor21ReadRegisterRequestedEhPh>:
			reading = false;
		}
	}
}

void PressureSensor::ReadRegisterRequested(uint8_t id, uint8_t* buffer){
    3826:	cf 93       	push	r28
    3828:	df 93       	push	r29
	if(!reading){
    382a:	fc 01       	movw	r30, r24
    382c:	23 a5       	ldd	r18, Z+43	; 0x2b
    382e:	21 11       	cpse	r18, r1
    3830:	05 c0       	rjmp	.+10     	; 0x383c <_ZN14PressureSensor21ReadRegisterRequestedEhPh+0x16>
    3832:	ec 01       	movw	r28, r24
		reading = sensor.startRead();
    3834:	02 96       	adiw	r24, 0x02	; 2
    3836:	0e 94 19 08 	call	0x1032	; 0x1032 <_ZN6MS58379startReadEv>
    383a:	8b a7       	std	Y+43, r24	; 0x2b
	}
    383c:	df 91       	pop	r29
    383e:	cf 91       	pop	r28
    3840:	08 95       	ret

00003842 <_ZN14PressureSensor6UpdateEPh>:
	*buffer++ = *val++;
	*buffer++ = *val++;
	*buffer++ = *val++;
}

void PressureSensor::Update(uint8_t* buffer){
    3842:	cf 92       	push	r12
    3844:	df 92       	push	r13
    3846:	ef 92       	push	r14
    3848:	ff 92       	push	r15
    384a:	0f 93       	push	r16
    384c:	1f 93       	push	r17
    384e:	cf 93       	push	r28
    3850:	df 93       	push	r29
    3852:	cd b7       	in	r28, 0x3d	; 61
    3854:	de b7       	in	r29, 0x3e	; 62
    3856:	28 97       	sbiw	r28, 0x08	; 8
    3858:	0f b6       	in	r0, 0x3f	; 63
    385a:	f8 94       	cli
    385c:	de bf       	out	0x3e, r29	; 62
    385e:	0f be       	out	0x3f, r0	; 63
    3860:	cd bf       	out	0x3d, r28	; 61
	if(reading){
    3862:	fc 01       	movw	r30, r24
    3864:	23 a5       	ldd	r18, Z+43	; 0x2b
    3866:	22 23       	and	r18, r18
    3868:	09 f4       	brne	.+2      	; 0x386c <_ZN14PressureSensor6UpdateEPh+0x2a>
    386a:	47 c0       	rjmp	.+142    	; 0x38fa <_ZN14PressureSensor6UpdateEPh+0xb8>
    386c:	7b 01       	movw	r14, r22
    386e:	8c 01       	movw	r16, r24
		sensor.update();
    3870:	6c 01       	movw	r12, r24
    3872:	f2 e0       	ldi	r31, 0x02	; 2
    3874:	cf 0e       	add	r12, r31
    3876:	d1 1c       	adc	r13, r1
    3878:	c6 01       	movw	r24, r12
    387a:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <_ZN6MS58376updateEv>
		if(sensor.finished()){
    387e:	c6 01       	movw	r24, r12
    3880:	0e 94 42 08 	call	0x1084	; 0x1084 <_ZN6MS58378finishedEv>
    3884:	88 23       	and	r24, r24
    3886:	c9 f1       	breq	.+114    	; 0x38fa <_ZN14PressureSensor6UpdateEPh+0xb8>
			saveFloat(sensor.pressure(), buffer);
    3888:	40 e0       	ldi	r20, 0x00	; 0
    388a:	50 e0       	ldi	r21, 0x00	; 0
    388c:	60 e8       	ldi	r22, 0x80	; 128
    388e:	7f e3       	ldi	r23, 0x3F	; 63
    3890:	c6 01       	movw	r24, r12
    3892:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN6MS58378pressureEf>
    3896:	26 2f       	mov	r18, r22
    3898:	46 2f       	mov	r20, r22
    389a:	57 2f       	mov	r21, r23
    389c:	68 2f       	mov	r22, r24
    389e:	79 2f       	mov	r23, r25
    38a0:	49 83       	std	Y+1, r20	; 0x01
    38a2:	5a 83       	std	Y+2, r21	; 0x02
    38a4:	6b 83       	std	Y+3, r22	; 0x03
    38a6:	7c 83       	std	Y+4, r23	; 0x04
	return false;
}

static void saveFloat(float f, uint8_t* buffer){ //TODO put in IRegister? Used in IMU too
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    38a8:	f7 01       	movw	r30, r14
    38aa:	20 83       	st	Z, r18
	*buffer++ = *val++;
    38ac:	8a 81       	ldd	r24, Y+2	; 0x02
    38ae:	81 83       	std	Z+1, r24	; 0x01
	*buffer++ = *val++;
    38b0:	8b 81       	ldd	r24, Y+3	; 0x03
    38b2:	82 83       	std	Z+2, r24	; 0x02
	*buffer++ = *val++;
    38b4:	8c 81       	ldd	r24, Y+4	; 0x04
    38b6:	83 83       	std	Z+3, r24	; 0x03
void PressureSensor::Update(uint8_t* buffer){
	if(reading){
		sensor.update();
		if(sensor.finished()){
			saveFloat(sensor.pressure(), buffer);
			saveFloat(sensor.temperature(), buffer + 4);
    38b8:	c6 01       	movw	r24, r12
    38ba:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <_ZN6MS583711temperatureEv>
    38be:	26 2f       	mov	r18, r22
    38c0:	46 2f       	mov	r20, r22
    38c2:	57 2f       	mov	r21, r23
    38c4:	68 2f       	mov	r22, r24
    38c6:	79 2f       	mov	r23, r25
    38c8:	4d 83       	std	Y+5, r20	; 0x05
    38ca:	5e 83       	std	Y+6, r21	; 0x06
    38cc:	6f 83       	std	Y+7, r22	; 0x07
    38ce:	78 87       	std	Y+8, r23	; 0x08
	return false;
}

static void saveFloat(float f, uint8_t* buffer){ //TODO put in IRegister? Used in IMU too
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    38d0:	f7 01       	movw	r30, r14
    38d2:	24 83       	std	Z+4, r18	; 0x04
	*buffer++ = *val++;
    38d4:	8e 81       	ldd	r24, Y+6	; 0x06
    38d6:	85 83       	std	Z+5, r24	; 0x05
	*buffer++ = *val++;
    38d8:	8f 81       	ldd	r24, Y+7	; 0x07
    38da:	86 83       	std	Z+6, r24	; 0x06
	*buffer++ = *val++;
    38dc:	88 85       	ldd	r24, Y+8	; 0x08
    38de:	87 83       	std	Z+7, r24	; 0x07
	if(reading){
		sensor.update();
		if(sensor.finished()){
			saveFloat(sensor.pressure(), buffer);
			saveFloat(sensor.temperature(), buffer + 4);
			SendCommand(_id, 8);
    38e0:	f8 01       	movw	r30, r16
    38e2:	82 a5       	ldd	r24, Z+42	; 0x2a
	virtual void CommandReceived(uint8_t id, const uint8_t* data, uint8_t len) = 0;
	virtual void Update(uint8_t* buffer) = 0;
	
protected:
	void inline SendCommand(uint8_t id, uint8_t len){
		EtherComm::buffer[2] = id;
    38e4:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    38e8:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    38ec:	82 83       	std	Z+2, r24	; 0x02
		EtherComm::SendCommand(CMD_UpdateDevice, len + 1);
    38ee:	69 e0       	ldi	r22, 0x09	; 9
    38f0:	83 e0       	ldi	r24, 0x03	; 3
    38f2:	0e 94 60 07 	call	0xec0	; 0xec0 <_ZN9EtherComm11SendCommandEhh>
			reading = false;
    38f6:	f8 01       	movw	r30, r16
    38f8:	13 a6       	std	Z+43, r1	; 0x2b
		}
	}
}
    38fa:	28 96       	adiw	r28, 0x08	; 8
    38fc:	0f b6       	in	r0, 0x3f	; 63
    38fe:	f8 94       	cli
    3900:	de bf       	out	0x3e, r29	; 62
    3902:	0f be       	out	0x3f, r0	; 63
    3904:	cd bf       	out	0x3d, r28	; 61
    3906:	df 91       	pop	r29
    3908:	cf 91       	pop	r28
    390a:	1f 91       	pop	r17
    390c:	0f 91       	pop	r16
    390e:	ff 90       	pop	r15
    3910:	ef 90       	pop	r14
    3912:	df 90       	pop	r13
    3914:	cf 90       	pop	r12
    3916:	08 95       	ret

00003918 <_ZN14PressureSensorC1EhR13HardwareTimer>:
 */ 

#include "PressureSensor.h"
#include "../Robot.h"

PressureSensor::PressureSensor(const uint8_t id, HardwareTimer &timer) : sensor(timer), _id(id) {
    3918:	1f 93       	push	r17
    391a:	cf 93       	push	r28
    391c:	df 93       	push	r29
    391e:	ec 01       	movw	r28, r24
    3920:	16 2f       	mov	r17, r22
    3922:	2c e6       	ldi	r18, 0x6C	; 108
    3924:	32 e0       	ldi	r19, 0x02	; 2
    3926:	fc 01       	movw	r30, r24
    3928:	21 93       	st	Z+, r18
    392a:	31 93       	st	Z+, r19
    392c:	cf 01       	movw	r24, r30
    392e:	ba 01       	movw	r22, r20
    3930:	0e 94 0a 08 	call	0x1014	; 0x1014 <_ZN6MS5837C1ER13HardwareTimer>
    3934:	1a a7       	std	Y+42, r17	; 0x2a
	
}
    3936:	df 91       	pop	r29
    3938:	cf 91       	pop	r28
    393a:	1f 91       	pop	r17
    393c:	08 95       	ret

0000393e <_GLOBAL__sub_I_bno>:
	setup();
	
	while(true){
		loop();
	}
    393e:	0f 93       	push	r16
    3940:	1f 93       	push	r17
/* Set the delay between fresh samples */
#define BNO055_SAMPLERATE_DELAY_MS 100

// Check I2C device address and correct line below (by default address is 0x29 or 0x28)
//                                   id, address
Adafruit_BNO055 bno = Adafruit_BNO055(55, 0x28);
    3942:	07 e6       	ldi	r16, 0x67	; 103
    3944:	16 e0       	ldi	r17, 0x06	; 6
    3946:	28 e2       	ldi	r18, 0x28	; 40
    3948:	47 e3       	ldi	r20, 0x37	; 55
    394a:	50 e0       	ldi	r21, 0x00	; 0
    394c:	60 e0       	ldi	r22, 0x00	; 0
    394e:	70 e0       	ldi	r23, 0x00	; 0
    3950:	88 e0       	ldi	r24, 0x08	; 8
    3952:	99 e0       	ldi	r25, 0x09	; 9
    3954:	0e 94 c3 01 	call	0x386	; 0x386 <_ZN15Adafruit_BNO055C1ElhP7TwoWire>
	setup();
	
	while(true){
		loop();
	}
    3958:	1f 91       	pop	r17
    395a:	0f 91       	pop	r16
    395c:	08 95       	ret

0000395e <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
uint16_t Print::write(const uint8_t *buffer, uint16_t size)
{
    395e:	cf 92       	push	r12
    3960:	df 92       	push	r13
    3962:	ef 92       	push	r14
    3964:	ff 92       	push	r15
    3966:	0f 93       	push	r16
    3968:	1f 93       	push	r17
    396a:	cf 93       	push	r28
    396c:	df 93       	push	r29
  uint16_t n = 0;
  while (size--) {
    396e:	41 15       	cp	r20, r1
    3970:	51 05       	cpc	r21, r1
    3972:	c1 f0       	breq	.+48     	; 0x39a4 <_ZN5Print5writeEPKhj+0x46>
    3974:	6a 01       	movw	r12, r20
    3976:	8c 01       	movw	r16, r24
    3978:	e6 2e       	mov	r14, r22
    397a:	f7 2e       	mov	r15, r23
    397c:	c0 e0       	ldi	r28, 0x00	; 0
    397e:	d0 e0       	ldi	r29, 0x00	; 0
    if (write(*buffer++)) n++;
    3980:	d7 01       	movw	r26, r14
    3982:	6d 91       	ld	r22, X+
    3984:	7d 01       	movw	r14, r26
    3986:	d8 01       	movw	r26, r16
    3988:	ed 91       	ld	r30, X+
    398a:	fc 91       	ld	r31, X
    398c:	01 90       	ld	r0, Z+
    398e:	f0 81       	ld	r31, Z
    3990:	e0 2d       	mov	r30, r0
    3992:	c8 01       	movw	r24, r16
    3994:	19 95       	eicall
    3996:	89 2b       	or	r24, r25
    3998:	39 f0       	breq	.+14     	; 0x39a8 <_ZN5Print5writeEPKhj+0x4a>
    399a:	21 96       	adiw	r28, 0x01	; 1

/* default implementation: may be overridden */
uint16_t Print::write(const uint8_t *buffer, uint16_t size)
{
  uint16_t n = 0;
  while (size--) {
    399c:	cc 16       	cp	r12, r28
    399e:	dd 06       	cpc	r13, r29
    39a0:	79 f7       	brne	.-34     	; 0x3980 <_ZN5Print5writeEPKhj+0x22>
    39a2:	02 c0       	rjmp	.+4      	; 0x39a8 <_ZN5Print5writeEPKhj+0x4a>
// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
uint16_t Print::write(const uint8_t *buffer, uint16_t size)
{
  uint16_t n = 0;
    39a4:	c0 e0       	ldi	r28, 0x00	; 0
    39a6:	d0 e0       	ldi	r29, 0x00	; 0
  while (size--) {
    if (write(*buffer++)) n++;
    else break;
  }
  return n;
}
    39a8:	ce 01       	movw	r24, r28
    39aa:	df 91       	pop	r29
    39ac:	cf 91       	pop	r28
    39ae:	1f 91       	pop	r17
    39b0:	0f 91       	pop	r16
    39b2:	ff 90       	pop	r15
    39b4:	ef 90       	pop	r14
    39b6:	df 90       	pop	r13
    39b8:	cf 90       	pop	r12
    39ba:	08 95       	ret

000039bc <__subsf3>:
    39bc:	50 58       	subi	r21, 0x80	; 128

000039be <__addsf3>:
    39be:	bb 27       	eor	r27, r27
    39c0:	aa 27       	eor	r26, r26
    39c2:	0e d0       	rcall	.+28     	; 0x39e0 <__addsf3x>
    39c4:	70 c1       	rjmp	.+736    	; 0x3ca6 <__fp_round>
    39c6:	61 d1       	rcall	.+706    	; 0x3c8a <__fp_pscA>
    39c8:	30 f0       	brcs	.+12     	; 0x39d6 <__addsf3+0x18>
    39ca:	66 d1       	rcall	.+716    	; 0x3c98 <__fp_pscB>
    39cc:	20 f0       	brcs	.+8      	; 0x39d6 <__addsf3+0x18>
    39ce:	31 f4       	brne	.+12     	; 0x39dc <__addsf3+0x1e>
    39d0:	9f 3f       	cpi	r25, 0xFF	; 255
    39d2:	11 f4       	brne	.+4      	; 0x39d8 <__addsf3+0x1a>
    39d4:	1e f4       	brtc	.+6      	; 0x39dc <__addsf3+0x1e>
    39d6:	56 c1       	rjmp	.+684    	; 0x3c84 <__fp_nan>
    39d8:	0e f4       	brtc	.+2      	; 0x39dc <__addsf3+0x1e>
    39da:	e0 95       	com	r30
    39dc:	e7 fb       	bst	r30, 7
    39de:	4c c1       	rjmp	.+664    	; 0x3c78 <__fp_inf>

000039e0 <__addsf3x>:
    39e0:	e9 2f       	mov	r30, r25
    39e2:	72 d1       	rcall	.+740    	; 0x3cc8 <__fp_split3>
    39e4:	80 f3       	brcs	.-32     	; 0x39c6 <__addsf3+0x8>
    39e6:	ba 17       	cp	r27, r26
    39e8:	62 07       	cpc	r22, r18
    39ea:	73 07       	cpc	r23, r19
    39ec:	84 07       	cpc	r24, r20
    39ee:	95 07       	cpc	r25, r21
    39f0:	18 f0       	brcs	.+6      	; 0x39f8 <__addsf3x+0x18>
    39f2:	71 f4       	brne	.+28     	; 0x3a10 <__addsf3x+0x30>
    39f4:	9e f5       	brtc	.+102    	; 0x3a5c <__addsf3x+0x7c>
    39f6:	8a c1       	rjmp	.+788    	; 0x3d0c <__fp_zero>
    39f8:	0e f4       	brtc	.+2      	; 0x39fc <__addsf3x+0x1c>
    39fa:	e0 95       	com	r30
    39fc:	0b 2e       	mov	r0, r27
    39fe:	ba 2f       	mov	r27, r26
    3a00:	a0 2d       	mov	r26, r0
    3a02:	0b 01       	movw	r0, r22
    3a04:	b9 01       	movw	r22, r18
    3a06:	90 01       	movw	r18, r0
    3a08:	0c 01       	movw	r0, r24
    3a0a:	ca 01       	movw	r24, r20
    3a0c:	a0 01       	movw	r20, r0
    3a0e:	11 24       	eor	r1, r1
    3a10:	ff 27       	eor	r31, r31
    3a12:	59 1b       	sub	r21, r25
    3a14:	99 f0       	breq	.+38     	; 0x3a3c <__addsf3x+0x5c>
    3a16:	59 3f       	cpi	r21, 0xF9	; 249
    3a18:	50 f4       	brcc	.+20     	; 0x3a2e <__addsf3x+0x4e>
    3a1a:	50 3e       	cpi	r21, 0xE0	; 224
    3a1c:	68 f1       	brcs	.+90     	; 0x3a78 <__addsf3x+0x98>
    3a1e:	1a 16       	cp	r1, r26
    3a20:	f0 40       	sbci	r31, 0x00	; 0
    3a22:	a2 2f       	mov	r26, r18
    3a24:	23 2f       	mov	r18, r19
    3a26:	34 2f       	mov	r19, r20
    3a28:	44 27       	eor	r20, r20
    3a2a:	58 5f       	subi	r21, 0xF8	; 248
    3a2c:	f3 cf       	rjmp	.-26     	; 0x3a14 <__addsf3x+0x34>
    3a2e:	46 95       	lsr	r20
    3a30:	37 95       	ror	r19
    3a32:	27 95       	ror	r18
    3a34:	a7 95       	ror	r26
    3a36:	f0 40       	sbci	r31, 0x00	; 0
    3a38:	53 95       	inc	r21
    3a3a:	c9 f7       	brne	.-14     	; 0x3a2e <__addsf3x+0x4e>
    3a3c:	7e f4       	brtc	.+30     	; 0x3a5c <__addsf3x+0x7c>
    3a3e:	1f 16       	cp	r1, r31
    3a40:	ba 0b       	sbc	r27, r26
    3a42:	62 0b       	sbc	r22, r18
    3a44:	73 0b       	sbc	r23, r19
    3a46:	84 0b       	sbc	r24, r20
    3a48:	ba f0       	brmi	.+46     	; 0x3a78 <__addsf3x+0x98>
    3a4a:	91 50       	subi	r25, 0x01	; 1
    3a4c:	a1 f0       	breq	.+40     	; 0x3a76 <__addsf3x+0x96>
    3a4e:	ff 0f       	add	r31, r31
    3a50:	bb 1f       	adc	r27, r27
    3a52:	66 1f       	adc	r22, r22
    3a54:	77 1f       	adc	r23, r23
    3a56:	88 1f       	adc	r24, r24
    3a58:	c2 f7       	brpl	.-16     	; 0x3a4a <__addsf3x+0x6a>
    3a5a:	0e c0       	rjmp	.+28     	; 0x3a78 <__addsf3x+0x98>
    3a5c:	ba 0f       	add	r27, r26
    3a5e:	62 1f       	adc	r22, r18
    3a60:	73 1f       	adc	r23, r19
    3a62:	84 1f       	adc	r24, r20
    3a64:	48 f4       	brcc	.+18     	; 0x3a78 <__addsf3x+0x98>
    3a66:	87 95       	ror	r24
    3a68:	77 95       	ror	r23
    3a6a:	67 95       	ror	r22
    3a6c:	b7 95       	ror	r27
    3a6e:	f7 95       	ror	r31
    3a70:	9e 3f       	cpi	r25, 0xFE	; 254
    3a72:	08 f0       	brcs	.+2      	; 0x3a76 <__addsf3x+0x96>
    3a74:	b3 cf       	rjmp	.-154    	; 0x39dc <__addsf3+0x1e>
    3a76:	93 95       	inc	r25
    3a78:	88 0f       	add	r24, r24
    3a7a:	08 f0       	brcs	.+2      	; 0x3a7e <__addsf3x+0x9e>
    3a7c:	99 27       	eor	r25, r25
    3a7e:	ee 0f       	add	r30, r30
    3a80:	97 95       	ror	r25
    3a82:	87 95       	ror	r24
    3a84:	08 95       	ret

00003a86 <__cmpsf2>:
    3a86:	d4 d0       	rcall	.+424    	; 0x3c30 <__fp_cmp>
    3a88:	08 f4       	brcc	.+2      	; 0x3a8c <__cmpsf2+0x6>
    3a8a:	81 e0       	ldi	r24, 0x01	; 1
    3a8c:	08 95       	ret

00003a8e <__divsf3>:
    3a8e:	0c d0       	rcall	.+24     	; 0x3aa8 <__divsf3x>
    3a90:	0a c1       	rjmp	.+532    	; 0x3ca6 <__fp_round>
    3a92:	02 d1       	rcall	.+516    	; 0x3c98 <__fp_pscB>
    3a94:	40 f0       	brcs	.+16     	; 0x3aa6 <__divsf3+0x18>
    3a96:	f9 d0       	rcall	.+498    	; 0x3c8a <__fp_pscA>
    3a98:	30 f0       	brcs	.+12     	; 0x3aa6 <__divsf3+0x18>
    3a9a:	21 f4       	brne	.+8      	; 0x3aa4 <__divsf3+0x16>
    3a9c:	5f 3f       	cpi	r21, 0xFF	; 255
    3a9e:	19 f0       	breq	.+6      	; 0x3aa6 <__divsf3+0x18>
    3aa0:	eb c0       	rjmp	.+470    	; 0x3c78 <__fp_inf>
    3aa2:	51 11       	cpse	r21, r1
    3aa4:	34 c1       	rjmp	.+616    	; 0x3d0e <__fp_szero>
    3aa6:	ee c0       	rjmp	.+476    	; 0x3c84 <__fp_nan>

00003aa8 <__divsf3x>:
    3aa8:	0f d1       	rcall	.+542    	; 0x3cc8 <__fp_split3>
    3aaa:	98 f3       	brcs	.-26     	; 0x3a92 <__divsf3+0x4>

00003aac <__divsf3_pse>:
    3aac:	99 23       	and	r25, r25
    3aae:	c9 f3       	breq	.-14     	; 0x3aa2 <__divsf3+0x14>
    3ab0:	55 23       	and	r21, r21
    3ab2:	b1 f3       	breq	.-20     	; 0x3aa0 <__divsf3+0x12>
    3ab4:	95 1b       	sub	r25, r21
    3ab6:	55 0b       	sbc	r21, r21
    3ab8:	bb 27       	eor	r27, r27
    3aba:	aa 27       	eor	r26, r26
    3abc:	62 17       	cp	r22, r18
    3abe:	73 07       	cpc	r23, r19
    3ac0:	84 07       	cpc	r24, r20
    3ac2:	38 f0       	brcs	.+14     	; 0x3ad2 <__divsf3_pse+0x26>
    3ac4:	9f 5f       	subi	r25, 0xFF	; 255
    3ac6:	5f 4f       	sbci	r21, 0xFF	; 255
    3ac8:	22 0f       	add	r18, r18
    3aca:	33 1f       	adc	r19, r19
    3acc:	44 1f       	adc	r20, r20
    3ace:	aa 1f       	adc	r26, r26
    3ad0:	a9 f3       	breq	.-22     	; 0x3abc <__divsf3_pse+0x10>
    3ad2:	33 d0       	rcall	.+102    	; 0x3b3a <__divsf3_pse+0x8e>
    3ad4:	0e 2e       	mov	r0, r30
    3ad6:	3a f0       	brmi	.+14     	; 0x3ae6 <__divsf3_pse+0x3a>
    3ad8:	e0 e8       	ldi	r30, 0x80	; 128
    3ada:	30 d0       	rcall	.+96     	; 0x3b3c <__divsf3_pse+0x90>
    3adc:	91 50       	subi	r25, 0x01	; 1
    3ade:	50 40       	sbci	r21, 0x00	; 0
    3ae0:	e6 95       	lsr	r30
    3ae2:	00 1c       	adc	r0, r0
    3ae4:	ca f7       	brpl	.-14     	; 0x3ad8 <__divsf3_pse+0x2c>
    3ae6:	29 d0       	rcall	.+82     	; 0x3b3a <__divsf3_pse+0x8e>
    3ae8:	fe 2f       	mov	r31, r30
    3aea:	27 d0       	rcall	.+78     	; 0x3b3a <__divsf3_pse+0x8e>
    3aec:	66 0f       	add	r22, r22
    3aee:	77 1f       	adc	r23, r23
    3af0:	88 1f       	adc	r24, r24
    3af2:	bb 1f       	adc	r27, r27
    3af4:	26 17       	cp	r18, r22
    3af6:	37 07       	cpc	r19, r23
    3af8:	48 07       	cpc	r20, r24
    3afa:	ab 07       	cpc	r26, r27
    3afc:	b0 e8       	ldi	r27, 0x80	; 128
    3afe:	09 f0       	breq	.+2      	; 0x3b02 <__divsf3_pse+0x56>
    3b00:	bb 0b       	sbc	r27, r27
    3b02:	80 2d       	mov	r24, r0
    3b04:	bf 01       	movw	r22, r30
    3b06:	ff 27       	eor	r31, r31
    3b08:	93 58       	subi	r25, 0x83	; 131
    3b0a:	5f 4f       	sbci	r21, 0xFF	; 255
    3b0c:	2a f0       	brmi	.+10     	; 0x3b18 <__divsf3_pse+0x6c>
    3b0e:	9e 3f       	cpi	r25, 0xFE	; 254
    3b10:	51 05       	cpc	r21, r1
    3b12:	68 f0       	brcs	.+26     	; 0x3b2e <__divsf3_pse+0x82>
    3b14:	b1 c0       	rjmp	.+354    	; 0x3c78 <__fp_inf>
    3b16:	fb c0       	rjmp	.+502    	; 0x3d0e <__fp_szero>
    3b18:	5f 3f       	cpi	r21, 0xFF	; 255
    3b1a:	ec f3       	brlt	.-6      	; 0x3b16 <__divsf3_pse+0x6a>
    3b1c:	98 3e       	cpi	r25, 0xE8	; 232
    3b1e:	dc f3       	brlt	.-10     	; 0x3b16 <__divsf3_pse+0x6a>
    3b20:	86 95       	lsr	r24
    3b22:	77 95       	ror	r23
    3b24:	67 95       	ror	r22
    3b26:	b7 95       	ror	r27
    3b28:	f7 95       	ror	r31
    3b2a:	9f 5f       	subi	r25, 0xFF	; 255
    3b2c:	c9 f7       	brne	.-14     	; 0x3b20 <__divsf3_pse+0x74>
    3b2e:	88 0f       	add	r24, r24
    3b30:	91 1d       	adc	r25, r1
    3b32:	96 95       	lsr	r25
    3b34:	87 95       	ror	r24
    3b36:	97 f9       	bld	r25, 7
    3b38:	08 95       	ret
    3b3a:	e1 e0       	ldi	r30, 0x01	; 1
    3b3c:	66 0f       	add	r22, r22
    3b3e:	77 1f       	adc	r23, r23
    3b40:	88 1f       	adc	r24, r24
    3b42:	bb 1f       	adc	r27, r27
    3b44:	62 17       	cp	r22, r18
    3b46:	73 07       	cpc	r23, r19
    3b48:	84 07       	cpc	r24, r20
    3b4a:	ba 07       	cpc	r27, r26
    3b4c:	20 f0       	brcs	.+8      	; 0x3b56 <__divsf3_pse+0xaa>
    3b4e:	62 1b       	sub	r22, r18
    3b50:	73 0b       	sbc	r23, r19
    3b52:	84 0b       	sbc	r24, r20
    3b54:	ba 0b       	sbc	r27, r26
    3b56:	ee 1f       	adc	r30, r30
    3b58:	88 f7       	brcc	.-30     	; 0x3b3c <__divsf3_pse+0x90>
    3b5a:	e0 95       	com	r30
    3b5c:	08 95       	ret

00003b5e <__fixunssfsi>:
    3b5e:	bc d0       	rcall	.+376    	; 0x3cd8 <__fp_splitA>
    3b60:	88 f0       	brcs	.+34     	; 0x3b84 <__fixunssfsi+0x26>
    3b62:	9f 57       	subi	r25, 0x7F	; 127
    3b64:	90 f0       	brcs	.+36     	; 0x3b8a <__fixunssfsi+0x2c>
    3b66:	b9 2f       	mov	r27, r25
    3b68:	99 27       	eor	r25, r25
    3b6a:	b7 51       	subi	r27, 0x17	; 23
    3b6c:	a0 f0       	brcs	.+40     	; 0x3b96 <__fixunssfsi+0x38>
    3b6e:	d1 f0       	breq	.+52     	; 0x3ba4 <__fixunssfsi+0x46>
    3b70:	66 0f       	add	r22, r22
    3b72:	77 1f       	adc	r23, r23
    3b74:	88 1f       	adc	r24, r24
    3b76:	99 1f       	adc	r25, r25
    3b78:	1a f0       	brmi	.+6      	; 0x3b80 <__fixunssfsi+0x22>
    3b7a:	ba 95       	dec	r27
    3b7c:	c9 f7       	brne	.-14     	; 0x3b70 <__fixunssfsi+0x12>
    3b7e:	12 c0       	rjmp	.+36     	; 0x3ba4 <__fixunssfsi+0x46>
    3b80:	b1 30       	cpi	r27, 0x01	; 1
    3b82:	81 f0       	breq	.+32     	; 0x3ba4 <__fixunssfsi+0x46>
    3b84:	c3 d0       	rcall	.+390    	; 0x3d0c <__fp_zero>
    3b86:	b1 e0       	ldi	r27, 0x01	; 1
    3b88:	08 95       	ret
    3b8a:	c0 c0       	rjmp	.+384    	; 0x3d0c <__fp_zero>
    3b8c:	67 2f       	mov	r22, r23
    3b8e:	78 2f       	mov	r23, r24
    3b90:	88 27       	eor	r24, r24
    3b92:	b8 5f       	subi	r27, 0xF8	; 248
    3b94:	39 f0       	breq	.+14     	; 0x3ba4 <__fixunssfsi+0x46>
    3b96:	b9 3f       	cpi	r27, 0xF9	; 249
    3b98:	cc f3       	brlt	.-14     	; 0x3b8c <__fixunssfsi+0x2e>
    3b9a:	86 95       	lsr	r24
    3b9c:	77 95       	ror	r23
    3b9e:	67 95       	ror	r22
    3ba0:	b3 95       	inc	r27
    3ba2:	d9 f7       	brne	.-10     	; 0x3b9a <__fixunssfsi+0x3c>
    3ba4:	3e f4       	brtc	.+14     	; 0x3bb4 <__fixunssfsi+0x56>
    3ba6:	90 95       	com	r25
    3ba8:	80 95       	com	r24
    3baa:	70 95       	com	r23
    3bac:	61 95       	neg	r22
    3bae:	7f 4f       	sbci	r23, 0xFF	; 255
    3bb0:	8f 4f       	sbci	r24, 0xFF	; 255
    3bb2:	9f 4f       	sbci	r25, 0xFF	; 255
    3bb4:	08 95       	ret

00003bb6 <__floatunsisf>:
    3bb6:	e8 94       	clt
    3bb8:	09 c0       	rjmp	.+18     	; 0x3bcc <__floatsisf+0x12>

00003bba <__floatsisf>:
    3bba:	97 fb       	bst	r25, 7
    3bbc:	3e f4       	brtc	.+14     	; 0x3bcc <__floatsisf+0x12>
    3bbe:	90 95       	com	r25
    3bc0:	80 95       	com	r24
    3bc2:	70 95       	com	r23
    3bc4:	61 95       	neg	r22
    3bc6:	7f 4f       	sbci	r23, 0xFF	; 255
    3bc8:	8f 4f       	sbci	r24, 0xFF	; 255
    3bca:	9f 4f       	sbci	r25, 0xFF	; 255
    3bcc:	99 23       	and	r25, r25
    3bce:	a9 f0       	breq	.+42     	; 0x3bfa <__floatsisf+0x40>
    3bd0:	f9 2f       	mov	r31, r25
    3bd2:	96 e9       	ldi	r25, 0x96	; 150
    3bd4:	bb 27       	eor	r27, r27
    3bd6:	93 95       	inc	r25
    3bd8:	f6 95       	lsr	r31
    3bda:	87 95       	ror	r24
    3bdc:	77 95       	ror	r23
    3bde:	67 95       	ror	r22
    3be0:	b7 95       	ror	r27
    3be2:	f1 11       	cpse	r31, r1
    3be4:	f8 cf       	rjmp	.-16     	; 0x3bd6 <__floatsisf+0x1c>
    3be6:	fa f4       	brpl	.+62     	; 0x3c26 <__floatsisf+0x6c>
    3be8:	bb 0f       	add	r27, r27
    3bea:	11 f4       	brne	.+4      	; 0x3bf0 <__floatsisf+0x36>
    3bec:	60 ff       	sbrs	r22, 0
    3bee:	1b c0       	rjmp	.+54     	; 0x3c26 <__floatsisf+0x6c>
    3bf0:	6f 5f       	subi	r22, 0xFF	; 255
    3bf2:	7f 4f       	sbci	r23, 0xFF	; 255
    3bf4:	8f 4f       	sbci	r24, 0xFF	; 255
    3bf6:	9f 4f       	sbci	r25, 0xFF	; 255
    3bf8:	16 c0       	rjmp	.+44     	; 0x3c26 <__floatsisf+0x6c>
    3bfa:	88 23       	and	r24, r24
    3bfc:	11 f0       	breq	.+4      	; 0x3c02 <__floatsisf+0x48>
    3bfe:	96 e9       	ldi	r25, 0x96	; 150
    3c00:	11 c0       	rjmp	.+34     	; 0x3c24 <__floatsisf+0x6a>
    3c02:	77 23       	and	r23, r23
    3c04:	21 f0       	breq	.+8      	; 0x3c0e <__floatsisf+0x54>
    3c06:	9e e8       	ldi	r25, 0x8E	; 142
    3c08:	87 2f       	mov	r24, r23
    3c0a:	76 2f       	mov	r23, r22
    3c0c:	05 c0       	rjmp	.+10     	; 0x3c18 <__floatsisf+0x5e>
    3c0e:	66 23       	and	r22, r22
    3c10:	71 f0       	breq	.+28     	; 0x3c2e <__floatsisf+0x74>
    3c12:	96 e8       	ldi	r25, 0x86	; 134
    3c14:	86 2f       	mov	r24, r22
    3c16:	70 e0       	ldi	r23, 0x00	; 0
    3c18:	60 e0       	ldi	r22, 0x00	; 0
    3c1a:	2a f0       	brmi	.+10     	; 0x3c26 <__floatsisf+0x6c>
    3c1c:	9a 95       	dec	r25
    3c1e:	66 0f       	add	r22, r22
    3c20:	77 1f       	adc	r23, r23
    3c22:	88 1f       	adc	r24, r24
    3c24:	da f7       	brpl	.-10     	; 0x3c1c <__floatsisf+0x62>
    3c26:	88 0f       	add	r24, r24
    3c28:	96 95       	lsr	r25
    3c2a:	87 95       	ror	r24
    3c2c:	97 f9       	bld	r25, 7
    3c2e:	08 95       	ret

00003c30 <__fp_cmp>:
    3c30:	99 0f       	add	r25, r25
    3c32:	00 08       	sbc	r0, r0
    3c34:	55 0f       	add	r21, r21
    3c36:	aa 0b       	sbc	r26, r26
    3c38:	e0 e8       	ldi	r30, 0x80	; 128
    3c3a:	fe ef       	ldi	r31, 0xFE	; 254
    3c3c:	16 16       	cp	r1, r22
    3c3e:	17 06       	cpc	r1, r23
    3c40:	e8 07       	cpc	r30, r24
    3c42:	f9 07       	cpc	r31, r25
    3c44:	c0 f0       	brcs	.+48     	; 0x3c76 <__fp_cmp+0x46>
    3c46:	12 16       	cp	r1, r18
    3c48:	13 06       	cpc	r1, r19
    3c4a:	e4 07       	cpc	r30, r20
    3c4c:	f5 07       	cpc	r31, r21
    3c4e:	98 f0       	brcs	.+38     	; 0x3c76 <__fp_cmp+0x46>
    3c50:	62 1b       	sub	r22, r18
    3c52:	73 0b       	sbc	r23, r19
    3c54:	84 0b       	sbc	r24, r20
    3c56:	95 0b       	sbc	r25, r21
    3c58:	39 f4       	brne	.+14     	; 0x3c68 <__fp_cmp+0x38>
    3c5a:	0a 26       	eor	r0, r26
    3c5c:	61 f0       	breq	.+24     	; 0x3c76 <__fp_cmp+0x46>
    3c5e:	23 2b       	or	r18, r19
    3c60:	24 2b       	or	r18, r20
    3c62:	25 2b       	or	r18, r21
    3c64:	21 f4       	brne	.+8      	; 0x3c6e <__fp_cmp+0x3e>
    3c66:	08 95       	ret
    3c68:	0a 26       	eor	r0, r26
    3c6a:	09 f4       	brne	.+2      	; 0x3c6e <__fp_cmp+0x3e>
    3c6c:	a1 40       	sbci	r26, 0x01	; 1
    3c6e:	a6 95       	lsr	r26
    3c70:	8f ef       	ldi	r24, 0xFF	; 255
    3c72:	81 1d       	adc	r24, r1
    3c74:	81 1d       	adc	r24, r1
    3c76:	08 95       	ret

00003c78 <__fp_inf>:
    3c78:	97 f9       	bld	r25, 7
    3c7a:	9f 67       	ori	r25, 0x7F	; 127
    3c7c:	80 e8       	ldi	r24, 0x80	; 128
    3c7e:	70 e0       	ldi	r23, 0x00	; 0
    3c80:	60 e0       	ldi	r22, 0x00	; 0
    3c82:	08 95       	ret

00003c84 <__fp_nan>:
    3c84:	9f ef       	ldi	r25, 0xFF	; 255
    3c86:	80 ec       	ldi	r24, 0xC0	; 192
    3c88:	08 95       	ret

00003c8a <__fp_pscA>:
    3c8a:	00 24       	eor	r0, r0
    3c8c:	0a 94       	dec	r0
    3c8e:	16 16       	cp	r1, r22
    3c90:	17 06       	cpc	r1, r23
    3c92:	18 06       	cpc	r1, r24
    3c94:	09 06       	cpc	r0, r25
    3c96:	08 95       	ret

00003c98 <__fp_pscB>:
    3c98:	00 24       	eor	r0, r0
    3c9a:	0a 94       	dec	r0
    3c9c:	12 16       	cp	r1, r18
    3c9e:	13 06       	cpc	r1, r19
    3ca0:	14 06       	cpc	r1, r20
    3ca2:	05 06       	cpc	r0, r21
    3ca4:	08 95       	ret

00003ca6 <__fp_round>:
    3ca6:	09 2e       	mov	r0, r25
    3ca8:	03 94       	inc	r0
    3caa:	00 0c       	add	r0, r0
    3cac:	11 f4       	brne	.+4      	; 0x3cb2 <__fp_round+0xc>
    3cae:	88 23       	and	r24, r24
    3cb0:	52 f0       	brmi	.+20     	; 0x3cc6 <__fp_round+0x20>
    3cb2:	bb 0f       	add	r27, r27
    3cb4:	40 f4       	brcc	.+16     	; 0x3cc6 <__fp_round+0x20>
    3cb6:	bf 2b       	or	r27, r31
    3cb8:	11 f4       	brne	.+4      	; 0x3cbe <__fp_round+0x18>
    3cba:	60 ff       	sbrs	r22, 0
    3cbc:	04 c0       	rjmp	.+8      	; 0x3cc6 <__fp_round+0x20>
    3cbe:	6f 5f       	subi	r22, 0xFF	; 255
    3cc0:	7f 4f       	sbci	r23, 0xFF	; 255
    3cc2:	8f 4f       	sbci	r24, 0xFF	; 255
    3cc4:	9f 4f       	sbci	r25, 0xFF	; 255
    3cc6:	08 95       	ret

00003cc8 <__fp_split3>:
    3cc8:	57 fd       	sbrc	r21, 7
    3cca:	90 58       	subi	r25, 0x80	; 128
    3ccc:	44 0f       	add	r20, r20
    3cce:	55 1f       	adc	r21, r21
    3cd0:	59 f0       	breq	.+22     	; 0x3ce8 <__fp_splitA+0x10>
    3cd2:	5f 3f       	cpi	r21, 0xFF	; 255
    3cd4:	71 f0       	breq	.+28     	; 0x3cf2 <__fp_splitA+0x1a>
    3cd6:	47 95       	ror	r20

00003cd8 <__fp_splitA>:
    3cd8:	88 0f       	add	r24, r24
    3cda:	97 fb       	bst	r25, 7
    3cdc:	99 1f       	adc	r25, r25
    3cde:	61 f0       	breq	.+24     	; 0x3cf8 <__fp_splitA+0x20>
    3ce0:	9f 3f       	cpi	r25, 0xFF	; 255
    3ce2:	79 f0       	breq	.+30     	; 0x3d02 <__fp_splitA+0x2a>
    3ce4:	87 95       	ror	r24
    3ce6:	08 95       	ret
    3ce8:	12 16       	cp	r1, r18
    3cea:	13 06       	cpc	r1, r19
    3cec:	14 06       	cpc	r1, r20
    3cee:	55 1f       	adc	r21, r21
    3cf0:	f2 cf       	rjmp	.-28     	; 0x3cd6 <__fp_split3+0xe>
    3cf2:	46 95       	lsr	r20
    3cf4:	f1 df       	rcall	.-30     	; 0x3cd8 <__fp_splitA>
    3cf6:	08 c0       	rjmp	.+16     	; 0x3d08 <__fp_splitA+0x30>
    3cf8:	16 16       	cp	r1, r22
    3cfa:	17 06       	cpc	r1, r23
    3cfc:	18 06       	cpc	r1, r24
    3cfe:	99 1f       	adc	r25, r25
    3d00:	f1 cf       	rjmp	.-30     	; 0x3ce4 <__fp_splitA+0xc>
    3d02:	86 95       	lsr	r24
    3d04:	71 05       	cpc	r23, r1
    3d06:	61 05       	cpc	r22, r1
    3d08:	08 94       	sec
    3d0a:	08 95       	ret

00003d0c <__fp_zero>:
    3d0c:	e8 94       	clt

00003d0e <__fp_szero>:
    3d0e:	bb 27       	eor	r27, r27
    3d10:	66 27       	eor	r22, r22
    3d12:	77 27       	eor	r23, r23
    3d14:	cb 01       	movw	r24, r22
    3d16:	97 f9       	bld	r25, 7
    3d18:	08 95       	ret

00003d1a <__gesf2>:
    3d1a:	8a df       	rcall	.-236    	; 0x3c30 <__fp_cmp>
    3d1c:	08 f4       	brcc	.+2      	; 0x3d20 <__gesf2+0x6>
    3d1e:	8f ef       	ldi	r24, 0xFF	; 255
    3d20:	08 95       	ret

00003d22 <__mulsf3>:
    3d22:	0b d0       	rcall	.+22     	; 0x3d3a <__mulsf3x>
    3d24:	c0 cf       	rjmp	.-128    	; 0x3ca6 <__fp_round>
    3d26:	b1 df       	rcall	.-158    	; 0x3c8a <__fp_pscA>
    3d28:	28 f0       	brcs	.+10     	; 0x3d34 <__mulsf3+0x12>
    3d2a:	b6 df       	rcall	.-148    	; 0x3c98 <__fp_pscB>
    3d2c:	18 f0       	brcs	.+6      	; 0x3d34 <__mulsf3+0x12>
    3d2e:	95 23       	and	r25, r21
    3d30:	09 f0       	breq	.+2      	; 0x3d34 <__mulsf3+0x12>
    3d32:	a2 cf       	rjmp	.-188    	; 0x3c78 <__fp_inf>
    3d34:	a7 cf       	rjmp	.-178    	; 0x3c84 <__fp_nan>
    3d36:	11 24       	eor	r1, r1
    3d38:	ea cf       	rjmp	.-44     	; 0x3d0e <__fp_szero>

00003d3a <__mulsf3x>:
    3d3a:	c6 df       	rcall	.-116    	; 0x3cc8 <__fp_split3>
    3d3c:	a0 f3       	brcs	.-24     	; 0x3d26 <__mulsf3+0x4>

00003d3e <__mulsf3_pse>:
    3d3e:	95 9f       	mul	r25, r21
    3d40:	d1 f3       	breq	.-12     	; 0x3d36 <__mulsf3+0x14>
    3d42:	95 0f       	add	r25, r21
    3d44:	50 e0       	ldi	r21, 0x00	; 0
    3d46:	55 1f       	adc	r21, r21
    3d48:	62 9f       	mul	r22, r18
    3d4a:	f0 01       	movw	r30, r0
    3d4c:	72 9f       	mul	r23, r18
    3d4e:	bb 27       	eor	r27, r27
    3d50:	f0 0d       	add	r31, r0
    3d52:	b1 1d       	adc	r27, r1
    3d54:	63 9f       	mul	r22, r19
    3d56:	aa 27       	eor	r26, r26
    3d58:	f0 0d       	add	r31, r0
    3d5a:	b1 1d       	adc	r27, r1
    3d5c:	aa 1f       	adc	r26, r26
    3d5e:	64 9f       	mul	r22, r20
    3d60:	66 27       	eor	r22, r22
    3d62:	b0 0d       	add	r27, r0
    3d64:	a1 1d       	adc	r26, r1
    3d66:	66 1f       	adc	r22, r22
    3d68:	82 9f       	mul	r24, r18
    3d6a:	22 27       	eor	r18, r18
    3d6c:	b0 0d       	add	r27, r0
    3d6e:	a1 1d       	adc	r26, r1
    3d70:	62 1f       	adc	r22, r18
    3d72:	73 9f       	mul	r23, r19
    3d74:	b0 0d       	add	r27, r0
    3d76:	a1 1d       	adc	r26, r1
    3d78:	62 1f       	adc	r22, r18
    3d7a:	83 9f       	mul	r24, r19
    3d7c:	a0 0d       	add	r26, r0
    3d7e:	61 1d       	adc	r22, r1
    3d80:	22 1f       	adc	r18, r18
    3d82:	74 9f       	mul	r23, r20
    3d84:	33 27       	eor	r19, r19
    3d86:	a0 0d       	add	r26, r0
    3d88:	61 1d       	adc	r22, r1
    3d8a:	23 1f       	adc	r18, r19
    3d8c:	84 9f       	mul	r24, r20
    3d8e:	60 0d       	add	r22, r0
    3d90:	21 1d       	adc	r18, r1
    3d92:	82 2f       	mov	r24, r18
    3d94:	76 2f       	mov	r23, r22
    3d96:	6a 2f       	mov	r22, r26
    3d98:	11 24       	eor	r1, r1
    3d9a:	9f 57       	subi	r25, 0x7F	; 127
    3d9c:	50 40       	sbci	r21, 0x00	; 0
    3d9e:	8a f0       	brmi	.+34     	; 0x3dc2 <__mulsf3_pse+0x84>
    3da0:	e1 f0       	breq	.+56     	; 0x3dda <__mulsf3_pse+0x9c>
    3da2:	88 23       	and	r24, r24
    3da4:	4a f0       	brmi	.+18     	; 0x3db8 <__mulsf3_pse+0x7a>
    3da6:	ee 0f       	add	r30, r30
    3da8:	ff 1f       	adc	r31, r31
    3daa:	bb 1f       	adc	r27, r27
    3dac:	66 1f       	adc	r22, r22
    3dae:	77 1f       	adc	r23, r23
    3db0:	88 1f       	adc	r24, r24
    3db2:	91 50       	subi	r25, 0x01	; 1
    3db4:	50 40       	sbci	r21, 0x00	; 0
    3db6:	a9 f7       	brne	.-22     	; 0x3da2 <__mulsf3_pse+0x64>
    3db8:	9e 3f       	cpi	r25, 0xFE	; 254
    3dba:	51 05       	cpc	r21, r1
    3dbc:	70 f0       	brcs	.+28     	; 0x3dda <__mulsf3_pse+0x9c>
    3dbe:	5c cf       	rjmp	.-328    	; 0x3c78 <__fp_inf>
    3dc0:	a6 cf       	rjmp	.-180    	; 0x3d0e <__fp_szero>
    3dc2:	5f 3f       	cpi	r21, 0xFF	; 255
    3dc4:	ec f3       	brlt	.-6      	; 0x3dc0 <__mulsf3_pse+0x82>
    3dc6:	98 3e       	cpi	r25, 0xE8	; 232
    3dc8:	dc f3       	brlt	.-10     	; 0x3dc0 <__mulsf3_pse+0x82>
    3dca:	86 95       	lsr	r24
    3dcc:	77 95       	ror	r23
    3dce:	67 95       	ror	r22
    3dd0:	b7 95       	ror	r27
    3dd2:	f7 95       	ror	r31
    3dd4:	e7 95       	ror	r30
    3dd6:	9f 5f       	subi	r25, 0xFF	; 255
    3dd8:	c1 f7       	brne	.-16     	; 0x3dca <__mulsf3_pse+0x8c>
    3dda:	fe 2b       	or	r31, r30
    3ddc:	88 0f       	add	r24, r24
    3dde:	91 1d       	adc	r25, r1
    3de0:	96 95       	lsr	r25
    3de2:	87 95       	ror	r24
    3de4:	97 f9       	bld	r25, 7
    3de6:	08 95       	ret

00003de8 <__mulsi3>:
    3de8:	db 01       	movw	r26, r22
    3dea:	8f 93       	push	r24
    3dec:	9f 93       	push	r25
    3dee:	44 d0       	rcall	.+136    	; 0x3e78 <__muluhisi3>
    3df0:	bf 91       	pop	r27
    3df2:	af 91       	pop	r26
    3df4:	a2 9f       	mul	r26, r18
    3df6:	80 0d       	add	r24, r0
    3df8:	91 1d       	adc	r25, r1
    3dfa:	a3 9f       	mul	r26, r19
    3dfc:	90 0d       	add	r25, r0
    3dfe:	b2 9f       	mul	r27, r18
    3e00:	90 0d       	add	r25, r0
    3e02:	11 24       	eor	r1, r1
    3e04:	08 95       	ret

00003e06 <__udivmodsi4>:
    3e06:	a1 e2       	ldi	r26, 0x21	; 33
    3e08:	1a 2e       	mov	r1, r26
    3e0a:	aa 1b       	sub	r26, r26
    3e0c:	bb 1b       	sub	r27, r27
    3e0e:	fd 01       	movw	r30, r26
    3e10:	0d c0       	rjmp	.+26     	; 0x3e2c <__udivmodsi4_ep>

00003e12 <__udivmodsi4_loop>:
    3e12:	aa 1f       	adc	r26, r26
    3e14:	bb 1f       	adc	r27, r27
    3e16:	ee 1f       	adc	r30, r30
    3e18:	ff 1f       	adc	r31, r31
    3e1a:	a2 17       	cp	r26, r18
    3e1c:	b3 07       	cpc	r27, r19
    3e1e:	e4 07       	cpc	r30, r20
    3e20:	f5 07       	cpc	r31, r21
    3e22:	20 f0       	brcs	.+8      	; 0x3e2c <__udivmodsi4_ep>
    3e24:	a2 1b       	sub	r26, r18
    3e26:	b3 0b       	sbc	r27, r19
    3e28:	e4 0b       	sbc	r30, r20
    3e2a:	f5 0b       	sbc	r31, r21

00003e2c <__udivmodsi4_ep>:
    3e2c:	66 1f       	adc	r22, r22
    3e2e:	77 1f       	adc	r23, r23
    3e30:	88 1f       	adc	r24, r24
    3e32:	99 1f       	adc	r25, r25
    3e34:	1a 94       	dec	r1
    3e36:	69 f7       	brne	.-38     	; 0x3e12 <__udivmodsi4_loop>
    3e38:	60 95       	com	r22
    3e3a:	70 95       	com	r23
    3e3c:	80 95       	com	r24
    3e3e:	90 95       	com	r25
    3e40:	9b 01       	movw	r18, r22
    3e42:	ac 01       	movw	r20, r24
    3e44:	bd 01       	movw	r22, r26
    3e46:	cf 01       	movw	r24, r30
    3e48:	08 95       	ret

00003e4a <__tablejump2__>:
    3e4a:	ee 0f       	add	r30, r30
    3e4c:	ff 1f       	adc	r31, r31
    3e4e:	88 1f       	adc	r24, r24
    3e50:	8b bf       	out	0x3b, r24	; 59
    3e52:	07 90       	elpm	r0, Z+
    3e54:	f6 91       	elpm	r31, Z
    3e56:	e0 2d       	mov	r30, r0
    3e58:	19 94       	eijmp

00003e5a <__umulhisi3>:
    3e5a:	a2 9f       	mul	r26, r18
    3e5c:	b0 01       	movw	r22, r0
    3e5e:	b3 9f       	mul	r27, r19
    3e60:	c0 01       	movw	r24, r0
    3e62:	a3 9f       	mul	r26, r19
    3e64:	70 0d       	add	r23, r0
    3e66:	81 1d       	adc	r24, r1
    3e68:	11 24       	eor	r1, r1
    3e6a:	91 1d       	adc	r25, r1
    3e6c:	b2 9f       	mul	r27, r18
    3e6e:	70 0d       	add	r23, r0
    3e70:	81 1d       	adc	r24, r1
    3e72:	11 24       	eor	r1, r1
    3e74:	91 1d       	adc	r25, r1
    3e76:	08 95       	ret

00003e78 <__muluhisi3>:
    3e78:	f0 df       	rcall	.-32     	; 0x3e5a <__umulhisi3>
    3e7a:	a5 9f       	mul	r26, r21
    3e7c:	90 0d       	add	r25, r0
    3e7e:	b4 9f       	mul	r27, r20
    3e80:	90 0d       	add	r25, r0
    3e82:	a4 9f       	mul	r26, r20
    3e84:	80 0d       	add	r24, r0
    3e86:	91 1d       	adc	r25, r1
    3e88:	11 24       	eor	r1, r1
    3e8a:	08 95       	ret

00003e8c <__muldi3>:
    3e8c:	df 93       	push	r29
    3e8e:	cf 93       	push	r28
    3e90:	1f 93       	push	r17
    3e92:	0f 93       	push	r16
    3e94:	9a 9d       	mul	r25, r10
    3e96:	f0 2d       	mov	r31, r0
    3e98:	21 9f       	mul	r18, r17
    3e9a:	f0 0d       	add	r31, r0
    3e9c:	8b 9d       	mul	r24, r11
    3e9e:	f0 0d       	add	r31, r0
    3ea0:	8a 9d       	mul	r24, r10
    3ea2:	e0 2d       	mov	r30, r0
    3ea4:	f1 0d       	add	r31, r1
    3ea6:	03 9f       	mul	r16, r19
    3ea8:	f0 0d       	add	r31, r0
    3eaa:	02 9f       	mul	r16, r18
    3eac:	e0 0d       	add	r30, r0
    3eae:	f1 1d       	adc	r31, r1
    3eb0:	4e 9d       	mul	r20, r14
    3eb2:	e0 0d       	add	r30, r0
    3eb4:	f1 1d       	adc	r31, r1
    3eb6:	5e 9d       	mul	r21, r14
    3eb8:	f0 0d       	add	r31, r0
    3eba:	4f 9d       	mul	r20, r15
    3ebc:	f0 0d       	add	r31, r0
    3ebe:	7f 93       	push	r23
    3ec0:	6f 93       	push	r22
    3ec2:	bf 92       	push	r11
    3ec4:	af 92       	push	r10
    3ec6:	5f 93       	push	r21
    3ec8:	4f 93       	push	r20
    3eca:	d5 01       	movw	r26, r10
    3ecc:	c6 df       	rcall	.-116    	; 0x3e5a <__umulhisi3>
    3ece:	8b 01       	movw	r16, r22
    3ed0:	ac 01       	movw	r20, r24
    3ed2:	d7 01       	movw	r26, r14
    3ed4:	c2 df       	rcall	.-124    	; 0x3e5a <__umulhisi3>
    3ed6:	eb 01       	movw	r28, r22
    3ed8:	e8 0f       	add	r30, r24
    3eda:	f9 1f       	adc	r31, r25
    3edc:	d6 01       	movw	r26, r12
    3ede:	1f d0       	rcall	.+62     	; 0x3f1e <__muldi3_6>
    3ee0:	2f 91       	pop	r18
    3ee2:	3f 91       	pop	r19
    3ee4:	d6 01       	movw	r26, r12
    3ee6:	b9 df       	rcall	.-142    	; 0x3e5a <__umulhisi3>
    3ee8:	c6 0f       	add	r28, r22
    3eea:	d7 1f       	adc	r29, r23
    3eec:	e8 1f       	adc	r30, r24
    3eee:	f9 1f       	adc	r31, r25
    3ef0:	af 91       	pop	r26
    3ef2:	bf 91       	pop	r27
    3ef4:	14 d0       	rcall	.+40     	; 0x3f1e <__muldi3_6>
    3ef6:	2f 91       	pop	r18
    3ef8:	3f 91       	pop	r19
    3efa:	af df       	rcall	.-162    	; 0x3e5a <__umulhisi3>
    3efc:	c6 0f       	add	r28, r22
    3efe:	d7 1f       	adc	r29, r23
    3f00:	e8 1f       	adc	r30, r24
    3f02:	f9 1f       	adc	r31, r25
    3f04:	d6 01       	movw	r26, r12
    3f06:	a9 df       	rcall	.-174    	; 0x3e5a <__umulhisi3>
    3f08:	e6 0f       	add	r30, r22
    3f0a:	f7 1f       	adc	r31, r23
    3f0c:	98 01       	movw	r18, r16
    3f0e:	be 01       	movw	r22, r28
    3f10:	cf 01       	movw	r24, r30
    3f12:	11 24       	eor	r1, r1
    3f14:	0f 91       	pop	r16
    3f16:	1f 91       	pop	r17
    3f18:	cf 91       	pop	r28
    3f1a:	df 91       	pop	r29
    3f1c:	08 95       	ret

00003f1e <__muldi3_6>:
    3f1e:	9d df       	rcall	.-198    	; 0x3e5a <__umulhisi3>
    3f20:	46 0f       	add	r20, r22
    3f22:	57 1f       	adc	r21, r23
    3f24:	c8 1f       	adc	r28, r24
    3f26:	d9 1f       	adc	r29, r25
    3f28:	08 f4       	brcc	.+2      	; 0x3f2c <__muldi3_6+0xe>
    3f2a:	31 96       	adiw	r30, 0x01	; 1
    3f2c:	08 95       	ret

00003f2e <__ashldi3>:
    3f2e:	0f 93       	push	r16
    3f30:	08 30       	cpi	r16, 0x08	; 8
    3f32:	90 f0       	brcs	.+36     	; 0x3f58 <__ashldi3+0x2a>
    3f34:	98 2f       	mov	r25, r24
    3f36:	87 2f       	mov	r24, r23
    3f38:	76 2f       	mov	r23, r22
    3f3a:	65 2f       	mov	r22, r21
    3f3c:	54 2f       	mov	r21, r20
    3f3e:	43 2f       	mov	r20, r19
    3f40:	32 2f       	mov	r19, r18
    3f42:	22 27       	eor	r18, r18
    3f44:	08 50       	subi	r16, 0x08	; 8
    3f46:	f4 cf       	rjmp	.-24     	; 0x3f30 <__ashldi3+0x2>
    3f48:	22 0f       	add	r18, r18
    3f4a:	33 1f       	adc	r19, r19
    3f4c:	44 1f       	adc	r20, r20
    3f4e:	55 1f       	adc	r21, r21
    3f50:	66 1f       	adc	r22, r22
    3f52:	77 1f       	adc	r23, r23
    3f54:	88 1f       	adc	r24, r24
    3f56:	99 1f       	adc	r25, r25
    3f58:	0a 95       	dec	r16
    3f5a:	b2 f7       	brpl	.-20     	; 0x3f48 <__ashldi3+0x1a>
    3f5c:	0f 91       	pop	r16
    3f5e:	08 95       	ret

00003f60 <__ashrdi3>:
    3f60:	97 fb       	bst	r25, 7
    3f62:	10 f8       	bld	r1, 0

00003f64 <__lshrdi3>:
    3f64:	16 94       	lsr	r1
    3f66:	00 08       	sbc	r0, r0
    3f68:	0f 93       	push	r16
    3f6a:	08 30       	cpi	r16, 0x08	; 8
    3f6c:	98 f0       	brcs	.+38     	; 0x3f94 <__lshrdi3+0x30>
    3f6e:	08 50       	subi	r16, 0x08	; 8
    3f70:	23 2f       	mov	r18, r19
    3f72:	34 2f       	mov	r19, r20
    3f74:	45 2f       	mov	r20, r21
    3f76:	56 2f       	mov	r21, r22
    3f78:	67 2f       	mov	r22, r23
    3f7a:	78 2f       	mov	r23, r24
    3f7c:	89 2f       	mov	r24, r25
    3f7e:	90 2d       	mov	r25, r0
    3f80:	f4 cf       	rjmp	.-24     	; 0x3f6a <__lshrdi3+0x6>
    3f82:	05 94       	asr	r0
    3f84:	97 95       	ror	r25
    3f86:	87 95       	ror	r24
    3f88:	77 95       	ror	r23
    3f8a:	67 95       	ror	r22
    3f8c:	57 95       	ror	r21
    3f8e:	47 95       	ror	r20
    3f90:	37 95       	ror	r19
    3f92:	27 95       	ror	r18
    3f94:	0a 95       	dec	r16
    3f96:	aa f7       	brpl	.-22     	; 0x3f82 <__lshrdi3+0x1e>
    3f98:	0f 91       	pop	r16
    3f9a:	08 95       	ret

00003f9c <__adddi3>:
    3f9c:	2a 0d       	add	r18, r10
    3f9e:	3b 1d       	adc	r19, r11
    3fa0:	4c 1d       	adc	r20, r12
    3fa2:	5d 1d       	adc	r21, r13
    3fa4:	6e 1d       	adc	r22, r14
    3fa6:	7f 1d       	adc	r23, r15
    3fa8:	80 1f       	adc	r24, r16
    3faa:	91 1f       	adc	r25, r17
    3fac:	08 95       	ret

00003fae <__adddi3_s8>:
    3fae:	00 24       	eor	r0, r0
    3fb0:	a7 fd       	sbrc	r26, 7
    3fb2:	00 94       	com	r0
    3fb4:	2a 0f       	add	r18, r26
    3fb6:	30 1d       	adc	r19, r0
    3fb8:	40 1d       	adc	r20, r0
    3fba:	50 1d       	adc	r21, r0
    3fbc:	60 1d       	adc	r22, r0
    3fbe:	70 1d       	adc	r23, r0
    3fc0:	80 1d       	adc	r24, r0
    3fc2:	90 1d       	adc	r25, r0
    3fc4:	08 95       	ret

00003fc6 <__subdi3>:
    3fc6:	2a 19       	sub	r18, r10
    3fc8:	3b 09       	sbc	r19, r11
    3fca:	4c 09       	sbc	r20, r12
    3fcc:	5d 09       	sbc	r21, r13
    3fce:	6e 09       	sbc	r22, r14
    3fd0:	7f 09       	sbc	r23, r15
    3fd2:	80 0b       	sbc	r24, r16
    3fd4:	91 0b       	sbc	r25, r17
    3fd6:	08 95       	ret

00003fd8 <__cmpdi2_s8>:
    3fd8:	00 24       	eor	r0, r0
    3fda:	a7 fd       	sbrc	r26, 7
    3fdc:	00 94       	com	r0
    3fde:	2a 17       	cp	r18, r26
    3fe0:	30 05       	cpc	r19, r0
    3fe2:	40 05       	cpc	r20, r0
    3fe4:	50 05       	cpc	r21, r0
    3fe6:	60 05       	cpc	r22, r0
    3fe8:	70 05       	cpc	r23, r0
    3fea:	80 05       	cpc	r24, r0
    3fec:	90 05       	cpc	r25, r0
    3fee:	08 95       	ret

00003ff0 <memcpy_P>:
    3ff0:	fb 01       	movw	r30, r22
    3ff2:	dc 01       	movw	r26, r24
    3ff4:	02 c0       	rjmp	.+4      	; 0x3ffa <memcpy_P+0xa>
    3ff6:	05 90       	lpm	r0, Z+
    3ff8:	0d 92       	st	X+, r0
    3ffa:	41 50       	subi	r20, 0x01	; 1
    3ffc:	50 40       	sbci	r21, 0x00	; 0
    3ffe:	d8 f7       	brcc	.-10     	; 0x3ff6 <memcpy_P+0x6>
    4000:	08 95       	ret

00004002 <memcmp>:
    4002:	fb 01       	movw	r30, r22
    4004:	dc 01       	movw	r26, r24
    4006:	04 c0       	rjmp	.+8      	; 0x4010 <memcmp+0xe>
    4008:	8d 91       	ld	r24, X+
    400a:	01 90       	ld	r0, Z+
    400c:	80 19       	sub	r24, r0
    400e:	21 f4       	brne	.+8      	; 0x4018 <memcmp+0x16>
    4010:	41 50       	subi	r20, 0x01	; 1
    4012:	50 40       	sbci	r21, 0x00	; 0
    4014:	c8 f7       	brcc	.-14     	; 0x4008 <memcmp+0x6>
    4016:	88 1b       	sub	r24, r24
    4018:	99 0b       	sbc	r25, r25
    401a:	08 95       	ret

0000401c <strncpy>:
    401c:	fb 01       	movw	r30, r22
    401e:	dc 01       	movw	r26, r24
    4020:	41 50       	subi	r20, 0x01	; 1
    4022:	50 40       	sbci	r21, 0x00	; 0
    4024:	48 f0       	brcs	.+18     	; 0x4038 <strncpy+0x1c>
    4026:	01 90       	ld	r0, Z+
    4028:	0d 92       	st	X+, r0
    402a:	00 20       	and	r0, r0
    402c:	c9 f7       	brne	.-14     	; 0x4020 <strncpy+0x4>
    402e:	01 c0       	rjmp	.+2      	; 0x4032 <strncpy+0x16>
    4030:	1d 92       	st	X+, r1
    4032:	41 50       	subi	r20, 0x01	; 1
    4034:	50 40       	sbci	r21, 0x00	; 0
    4036:	e0 f7       	brcc	.-8      	; 0x4030 <strncpy+0x14>
    4038:	08 95       	ret

0000403a <_exit>:
    403a:	f8 94       	cli

0000403c <__stop_program>:
    403c:	ff cf       	rjmp	.-2      	; 0x403c <__stop_program>
