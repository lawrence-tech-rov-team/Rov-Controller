
RovController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e4  00800200  000028aa  0000293e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000028aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000575  008002e4  008002e4  00002a22  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002a22  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002a54  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000760  00000000  00000000  00002a94  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00012f4e  00000000  00000000  000031f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004a52  00000000  00000000  00016142  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004b6a  00000000  00000000  0001ab94  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001794  00000000  00000000  0001f700  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000576e  00000000  00000000  00020e94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000831e  00000000  00000000  00026602  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006e8  00000000  00000000  0002e920  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	db c0       	rjmp	.+438    	; 0x1b8 <__ctors_end>
       2:	00 00       	nop
       4:	0a c1       	rjmp	.+532    	; 0x21a <__bad_interrupt>
       6:	00 00       	nop
       8:	08 c1       	rjmp	.+528    	; 0x21a <__bad_interrupt>
       a:	00 00       	nop
       c:	06 c1       	rjmp	.+524    	; 0x21a <__bad_interrupt>
       e:	00 00       	nop
      10:	04 c1       	rjmp	.+520    	; 0x21a <__bad_interrupt>
      12:	00 00       	nop
      14:	02 c1       	rjmp	.+516    	; 0x21a <__bad_interrupt>
      16:	00 00       	nop
      18:	00 c1       	rjmp	.+512    	; 0x21a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	fe c0       	rjmp	.+508    	; 0x21a <__bad_interrupt>
      1e:	00 00       	nop
      20:	fc c0       	rjmp	.+504    	; 0x21a <__bad_interrupt>
      22:	00 00       	nop
      24:	fa c0       	rjmp	.+500    	; 0x21a <__bad_interrupt>
      26:	00 00       	nop
      28:	f8 c0       	rjmp	.+496    	; 0x21a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f6 c0       	rjmp	.+492    	; 0x21a <__bad_interrupt>
      2e:	00 00       	nop
      30:	f4 c0       	rjmp	.+488    	; 0x21a <__bad_interrupt>
      32:	00 00       	nop
      34:	f2 c0       	rjmp	.+484    	; 0x21a <__bad_interrupt>
      36:	00 00       	nop
      38:	f0 c0       	rjmp	.+480    	; 0x21a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	ee c0       	rjmp	.+476    	; 0x21a <__bad_interrupt>
      3e:	00 00       	nop
      40:	ec c0       	rjmp	.+472    	; 0x21a <__bad_interrupt>
      42:	00 00       	nop
      44:	ea c0       	rjmp	.+468    	; 0x21a <__bad_interrupt>
      46:	00 00       	nop
      48:	e8 c0       	rjmp	.+464    	; 0x21a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e6 c0       	rjmp	.+460    	; 0x21a <__bad_interrupt>
      4e:	00 00       	nop
      50:	e4 c0       	rjmp	.+456    	; 0x21a <__bad_interrupt>
      52:	00 00       	nop
      54:	e2 c0       	rjmp	.+452    	; 0x21a <__bad_interrupt>
      56:	00 00       	nop
      58:	e0 c0       	rjmp	.+448    	; 0x21a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	de c0       	rjmp	.+444    	; 0x21a <__bad_interrupt>
      5e:	00 00       	nop
      60:	dc c0       	rjmp	.+440    	; 0x21a <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 ee 0c 	jmp	0x19dc	; 0x19dc <__vector_25>
      68:	0c 94 2a 0d 	jmp	0x1a54	; 0x1a54 <__vector_26>
      6c:	d6 c0       	rjmp	.+428    	; 0x21a <__bad_interrupt>
      6e:	00 00       	nop
      70:	d4 c0       	rjmp	.+424    	; 0x21a <__bad_interrupt>
      72:	00 00       	nop
      74:	d2 c0       	rjmp	.+420    	; 0x21a <__bad_interrupt>
      76:	00 00       	nop
      78:	d0 c0       	rjmp	.+416    	; 0x21a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ce c0       	rjmp	.+412    	; 0x21a <__bad_interrupt>
      7e:	00 00       	nop
      80:	cc c0       	rjmp	.+408    	; 0x21a <__bad_interrupt>
      82:	00 00       	nop
      84:	ca c0       	rjmp	.+404    	; 0x21a <__bad_interrupt>
      86:	00 00       	nop
      88:	c8 c0       	rjmp	.+400    	; 0x21a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c6 c0       	rjmp	.+396    	; 0x21a <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 76 0d 	jmp	0x1aec	; 0x1aec <__vector_36>
      94:	0c 94 b2 0d 	jmp	0x1b64	; 0x1b64 <__vector_37>
      98:	c0 c0       	rjmp	.+384    	; 0x21a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 0e 10 	jmp	0x201c	; 0x201c <__vector_39>
      a0:	bc c0       	rjmp	.+376    	; 0x21a <__bad_interrupt>
      a2:	00 00       	nop
      a4:	ba c0       	rjmp	.+372    	; 0x21a <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b8 c0       	rjmp	.+368    	; 0x21a <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b6 c0       	rjmp	.+364    	; 0x21a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	b4 c0       	rjmp	.+360    	; 0x21a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	b2 c0       	rjmp	.+356    	; 0x21a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	b0 c0       	rjmp	.+352    	; 0x21a <__bad_interrupt>
      ba:	00 00       	nop
      bc:	ae c0       	rjmp	.+348    	; 0x21a <__bad_interrupt>
      be:	00 00       	nop
      c0:	ac c0       	rjmp	.+344    	; 0x21a <__bad_interrupt>
      c2:	00 00       	nop
      c4:	aa c0       	rjmp	.+340    	; 0x21a <__bad_interrupt>
      c6:	00 00       	nop
      c8:	a8 c0       	rjmp	.+336    	; 0x21a <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 fe 0d 	jmp	0x1bfc	; 0x1bfc <__vector_51>
      d0:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__vector_52>
      d4:	a2 c0       	rjmp	.+324    	; 0x21a <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 86 0e 	jmp	0x1d0c	; 0x1d0c <__vector_54>
      dc:	0c 94 c2 0e 	jmp	0x1d84	; 0x1d84 <__vector_55>
      e0:	9c c0       	rjmp	.+312    	; 0x21a <__bad_interrupt>
      e2:	00 00       	nop
      e4:	d0 10       	cpse	r13, r0
      e6:	d3 10       	cpse	r13, r3
      e8:	d3 10       	cpse	r13, r3
      ea:	d3 10       	cpse	r13, r3
      ec:	d3 10       	cpse	r13, r3
      ee:	d3 10       	cpse	r13, r3
      f0:	d3 10       	cpse	r13, r3
      f2:	d3 10       	cpse	r13, r3
      f4:	2f 10       	cpse	r2, r15
      f6:	d3 10       	cpse	r13, r3
      f8:	d3 10       	cpse	r13, r3
      fa:	d3 10       	cpse	r13, r3
      fc:	d3 10       	cpse	r13, r3
      fe:	d3 10       	cpse	r13, r3
     100:	d3 10       	cpse	r13, r3
     102:	d3 10       	cpse	r13, r3
     104:	2f 10       	cpse	r2, r15
     106:	d3 10       	cpse	r13, r3
     108:	d3 10       	cpse	r13, r3
     10a:	d3 10       	cpse	r13, r3
     10c:	d3 10       	cpse	r13, r3
     10e:	d3 10       	cpse	r13, r3
     110:	d3 10       	cpse	r13, r3
     112:	d3 10       	cpse	r13, r3
     114:	37 10       	cpse	r3, r7
     116:	d3 10       	cpse	r13, r3
     118:	d3 10       	cpse	r13, r3
     11a:	d3 10       	cpse	r13, r3
     11c:	d3 10       	cpse	r13, r3
     11e:	d3 10       	cpse	r13, r3
     120:	d3 10       	cpse	r13, r3
     122:	d3 10       	cpse	r13, r3
     124:	7a 10       	cpse	r7, r10
     126:	d3 10       	cpse	r13, r3
     128:	d3 10       	cpse	r13, r3
     12a:	d3 10       	cpse	r13, r3
     12c:	d3 10       	cpse	r13, r3
     12e:	d3 10       	cpse	r13, r3
     130:	d3 10       	cpse	r13, r3
     132:	d3 10       	cpse	r13, r3
     134:	37 10       	cpse	r3, r7
     136:	d3 10       	cpse	r13, r3
     138:	d3 10       	cpse	r13, r3
     13a:	d3 10       	cpse	r13, r3
     13c:	d3 10       	cpse	r13, r3
     13e:	d3 10       	cpse	r13, r3
     140:	d3 10       	cpse	r13, r3
     142:	d3 10       	cpse	r13, r3
     144:	81 10       	cpse	r8, r1
     146:	d3 10       	cpse	r13, r3
     148:	d3 10       	cpse	r13, r3
     14a:	d3 10       	cpse	r13, r3
     14c:	d3 10       	cpse	r13, r3
     14e:	d3 10       	cpse	r13, r3
     150:	d3 10       	cpse	r13, r3
     152:	d3 10       	cpse	r13, r3
     154:	88 10       	cpse	r8, r8
     156:	d3 10       	cpse	r13, r3
     158:	d3 10       	cpse	r13, r3
     15a:	d3 10       	cpse	r13, r3
     15c:	d3 10       	cpse	r13, r3
     15e:	d3 10       	cpse	r13, r3
     160:	d3 10       	cpse	r13, r3
     162:	d3 10       	cpse	r13, r3
     164:	9e 10       	cpse	r9, r14
     166:	d3 10       	cpse	r13, r3
     168:	d3 10       	cpse	r13, r3
     16a:	d3 10       	cpse	r13, r3
     16c:	d3 10       	cpse	r13, r3
     16e:	d3 10       	cpse	r13, r3
     170:	d3 10       	cpse	r13, r3
     172:	d3 10       	cpse	r13, r3
     174:	cc 10       	cpse	r12, r12
     176:	d3 10       	cpse	r13, r3
     178:	d3 10       	cpse	r13, r3
     17a:	d3 10       	cpse	r13, r3
     17c:	d3 10       	cpse	r13, r3
     17e:	d3 10       	cpse	r13, r3
     180:	d3 10       	cpse	r13, r3
     182:	d3 10       	cpse	r13, r3
     184:	8f 10       	cpse	r8, r15
     186:	d3 10       	cpse	r13, r3
     188:	d3 10       	cpse	r13, r3
     18a:	d3 10       	cpse	r13, r3
     18c:	d3 10       	cpse	r13, r3
     18e:	d3 10       	cpse	r13, r3
     190:	d3 10       	cpse	r13, r3
     192:	d3 10       	cpse	r13, r3
     194:	ac 10       	cpse	r10, r12

00000196 <__trampolines_end>:
     196:	45 00       	.word	0x0045	; ????
     198:	00 82       	st	Z, r0
     19a:	00 00       	nop
     19c:	40 00       	.word	0x0040	; ????
     19e:	20 00       	Address 0x0000019e is out of bounds.
.word	0xffff	; ????

0000019f <_ZL9arpreqhdr>:
     19f:	00 01 08 00 06 04 00 01 00                          .........

000001a8 <__ctors_start>:
     1a8:	ad 04       	cpc	r10, r13
     1aa:	53 0d       	add	r21, r3
     1ac:	db 0d       	add	r29, r11
     1ae:	63 0e       	add	r6, r19
     1b0:	eb 0e       	add	r14, r27
     1b2:	54 11       	cpse	r21, r4
     1b4:	af 11       	cpse	r26, r15
     1b6:	b7 11       	cpse	r27, r7

000001b8 <__ctors_end>:
     1b8:	11 24       	eor	r1, r1
     1ba:	1f be       	out	0x3f, r1	; 63
     1bc:	cf ef       	ldi	r28, 0xFF	; 255
     1be:	d1 e2       	ldi	r29, 0x21	; 33
     1c0:	de bf       	out	0x3e, r29	; 62
     1c2:	cd bf       	out	0x3d, r28	; 61
     1c4:	00 e0       	ldi	r16, 0x00	; 0
     1c6:	0c bf       	out	0x3c, r16	; 60

000001c8 <__do_copy_data>:
     1c8:	12 e0       	ldi	r17, 0x02	; 2
     1ca:	a0 e0       	ldi	r26, 0x00	; 0
     1cc:	b2 e0       	ldi	r27, 0x02	; 2
     1ce:	ea ea       	ldi	r30, 0xAA	; 170
     1d0:	f8 e2       	ldi	r31, 0x28	; 40
     1d2:	00 e0       	ldi	r16, 0x00	; 0
     1d4:	0b bf       	out	0x3b, r16	; 59
     1d6:	02 c0       	rjmp	.+4      	; 0x1dc <__do_copy_data+0x14>
     1d8:	07 90       	elpm	r0, Z+
     1da:	0d 92       	st	X+, r0
     1dc:	a4 3e       	cpi	r26, 0xE4	; 228
     1de:	b1 07       	cpc	r27, r17
     1e0:	d9 f7       	brne	.-10     	; 0x1d8 <__do_copy_data+0x10>

000001e2 <__do_clear_bss>:
     1e2:	28 e0       	ldi	r18, 0x08	; 8
     1e4:	a4 ee       	ldi	r26, 0xE4	; 228
     1e6:	b2 e0       	ldi	r27, 0x02	; 2
     1e8:	01 c0       	rjmp	.+2      	; 0x1ec <.do_clear_bss_start>

000001ea <.do_clear_bss_loop>:
     1ea:	1d 92       	st	X+, r1

000001ec <.do_clear_bss_start>:
     1ec:	a9 35       	cpi	r26, 0x59	; 89
     1ee:	b2 07       	cpc	r27, r18
     1f0:	e1 f7       	brne	.-8      	; 0x1ea <.do_clear_bss_loop>

000001f2 <__do_global_ctors>:
     1f2:	10 e0       	ldi	r17, 0x00	; 0
     1f4:	cc ed       	ldi	r28, 0xDC	; 220
     1f6:	d0 e0       	ldi	r29, 0x00	; 0
     1f8:	00 e0       	ldi	r16, 0x00	; 0
     1fa:	06 c0       	rjmp	.+12     	; 0x208 <__do_global_ctors+0x16>
     1fc:	21 97       	sbiw	r28, 0x01	; 1
     1fe:	01 09       	sbc	r16, r1
     200:	80 2f       	mov	r24, r16
     202:	fe 01       	movw	r30, r28
     204:	0e 94 26 14 	call	0x284c	; 0x284c <__tablejump2__>
     208:	c4 3d       	cpi	r28, 0xD4	; 212
     20a:	d1 07       	cpc	r29, r17
     20c:	80 e0       	ldi	r24, 0x00	; 0
     20e:	08 07       	cpc	r16, r24
     210:	a9 f7       	brne	.-22     	; 0x1fc <__do_global_ctors+0xa>
     212:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <main>
     216:	0c 94 53 14 	jmp	0x28a6	; 0x28a6 <_exit>

0000021a <__bad_interrupt>:
     21a:	f2 ce       	rjmp	.-540    	; 0x0 <__vectors>

0000021c <_ZN15Adafruit_Sensor15enableAutoRangeEb>:

    setMode(lastMode);
    return true;
  }
  return false;
}
     21c:	08 95       	ret

0000021e <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>:
     21e:	0f 93       	push	r16
     220:	1f 93       	push	r17
     222:	cf 93       	push	r28
     224:	df 93       	push	r29
     226:	8c 01       	movw	r16, r24
     228:	eb 01       	movw	r28, r22
     22a:	88 e2       	ldi	r24, 0x28	; 40
     22c:	fb 01       	movw	r30, r22
     22e:	11 92       	st	Z+, r1
     230:	8a 95       	dec	r24
     232:	e9 f7       	brne	.-6      	; 0x22e <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x10>
     234:	4b e0       	ldi	r20, 0x0B	; 11
     236:	50 e0       	ldi	r21, 0x00	; 0
     238:	64 e1       	ldi	r22, 0x14	; 20
     23a:	72 e0       	ldi	r23, 0x02	; 2
     23c:	ce 01       	movw	r24, r28
     23e:	0e 94 44 14 	call	0x2888	; 0x2888 <strncpy>
     242:	1b 86       	std	Y+11, r1	; 0x0b
     244:	81 e0       	ldi	r24, 0x01	; 1
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	a0 e0       	ldi	r26, 0x00	; 0
     24a:	b0 e0       	ldi	r27, 0x00	; 0
     24c:	8c 87       	std	Y+12, r24	; 0x0c
     24e:	9d 87       	std	Y+13, r25	; 0x0d
     250:	ae 87       	std	Y+14, r26	; 0x0e
     252:	bf 87       	std	Y+15, r27	; 0x0f
     254:	f8 01       	movw	r30, r16
     256:	86 81       	ldd	r24, Z+6	; 0x06
     258:	97 81       	ldd	r25, Z+7	; 0x07
     25a:	a0 85       	ldd	r26, Z+8	; 0x08
     25c:	b1 85       	ldd	r27, Z+9	; 0x09
     25e:	88 8b       	std	Y+16, r24	; 0x10
     260:	99 8b       	std	Y+17, r25	; 0x11
     262:	aa 8b       	std	Y+18, r26	; 0x12
     264:	bb 8b       	std	Y+19, r27	; 0x13
     266:	83 e0       	ldi	r24, 0x03	; 3
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	a0 e0       	ldi	r26, 0x00	; 0
     26c:	b0 e0       	ldi	r27, 0x00	; 0
     26e:	8c 8b       	std	Y+20, r24	; 0x14
     270:	9d 8b       	std	Y+21, r25	; 0x15
     272:	ae 8b       	std	Y+22, r26	; 0x16
     274:	bf 8b       	std	Y+23, r27	; 0x17
     276:	1c a2       	std	Y+36, r1	; 0x24
     278:	1d a2       	std	Y+37, r1	; 0x25
     27a:	1e a2       	std	Y+38, r1	; 0x26
     27c:	1f a2       	std	Y+39, r1	; 0x27
     27e:	18 8e       	std	Y+24, r1	; 0x18
     280:	19 8e       	std	Y+25, r1	; 0x19
     282:	1a 8e       	std	Y+26, r1	; 0x1a
     284:	1b 8e       	std	Y+27, r1	; 0x1b
     286:	1c 8e       	std	Y+28, r1	; 0x1c
     288:	1d 8e       	std	Y+29, r1	; 0x1d
     28a:	1e 8e       	std	Y+30, r1	; 0x1e
     28c:	1f 8e       	std	Y+31, r1	; 0x1f
     28e:	8a e0       	ldi	r24, 0x0A	; 10
     290:	97 ed       	ldi	r25, 0xD7	; 215
     292:	a3 e2       	ldi	r26, 0x23	; 35
     294:	bc e3       	ldi	r27, 0x3C	; 60
     296:	88 a3       	std	Y+32, r24	; 0x20
     298:	99 a3       	std	Y+33, r25	; 0x21
     29a:	aa a3       	std	Y+34, r26	; 0x22
     29c:	bb a3       	std	Y+35, r27	; 0x23
     29e:	df 91       	pop	r29
     2a0:	cf 91       	pop	r28
     2a2:	1f 91       	pop	r17
     2a4:	0f 91       	pop	r16
     2a6:	08 95       	ret

000002a8 <_ZN15Adafruit_BNO055C1ElhP3TWI>:
     2a8:	0f 93       	push	r16
     2aa:	1f 93       	push	r17
     2ac:	fc 01       	movw	r30, r24
     2ae:	8f e1       	ldi	r24, 0x1F	; 31
     2b0:	92 e0       	ldi	r25, 0x02	; 2
     2b2:	91 83       	std	Z+1, r25	; 0x01
     2b4:	80 83       	st	Z, r24
     2b6:	46 83       	std	Z+6, r20	; 0x06
     2b8:	57 83       	std	Z+7, r21	; 0x07
     2ba:	60 87       	std	Z+8, r22	; 0x08
     2bc:	71 87       	std	Z+9, r23	; 0x09
     2be:	23 83       	std	Z+3, r18	; 0x03
     2c0:	15 83       	std	Z+5, r17	; 0x05
     2c2:	04 83       	std	Z+4, r16	; 0x04
     2c4:	1f 91       	pop	r17
     2c6:	0f 91       	pop	r16
     2c8:	08 95       	ret

000002ca <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>:
     2ca:	af 92       	push	r10
     2cc:	bf 92       	push	r11
     2ce:	cf 92       	push	r12
     2d0:	ef 92       	push	r14
     2d2:	0f 93       	push	r16
     2d4:	1f 93       	push	r17
     2d6:	cf 93       	push	r28
     2d8:	df 93       	push	r29
     2da:	1f 92       	push	r1
     2dc:	cd b7       	in	r28, 0x3d	; 61
     2de:	de b7       	in	r29, 0x3e	; 62
     2e0:	5c 01       	movw	r10, r24
     2e2:	49 83       	std	Y+1, r20	; 0x01
     2e4:	60 93 e4 02 	sts	0x02E4, r22	; 0x8002e4 <__data_end>
     2e8:	cc 24       	eor	r12, r12
     2ea:	c3 94       	inc	r12
     2ec:	ee 24       	eor	r14, r14
     2ee:	e3 94       	inc	r14
     2f0:	04 ee       	ldi	r16, 0xE4	; 228
     2f2:	12 e0       	ldi	r17, 0x02	; 2
     2f4:	21 e0       	ldi	r18, 0x01	; 1
     2f6:	ae 01       	movw	r20, r28
     2f8:	4f 5f       	subi	r20, 0xFF	; 255
     2fa:	5f 4f       	sbci	r21, 0xFF	; 255
     2fc:	f5 01       	movw	r30, r10
     2fe:	63 81       	ldd	r22, Z+3	; 0x03
     300:	84 81       	ldd	r24, Z+4	; 0x04
     302:	95 81       	ldd	r25, Z+5	; 0x05
     304:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <_ZN3TWI10writeAsyncEhPhhS0_hb>
     308:	88 23       	and	r24, r24
     30a:	71 f3       	breq	.-36     	; 0x2e8 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh+0x1e>
     30c:	f5 01       	movw	r30, r10
     30e:	84 81       	ldd	r24, Z+4	; 0x04
     310:	95 81       	ldd	r25, Z+5	; 0x05
     312:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <_ZN3TWI9availableEv>
     316:	88 23       	and	r24, r24
     318:	c9 f3       	breq	.-14     	; 0x30c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh+0x42>
     31a:	81 e0       	ldi	r24, 0x01	; 1
     31c:	0f 90       	pop	r0
     31e:	df 91       	pop	r29
     320:	cf 91       	pop	r28
     322:	1f 91       	pop	r17
     324:	0f 91       	pop	r16
     326:	ef 90       	pop	r14
     328:	cf 90       	pop	r12
     32a:	bf 90       	pop	r11
     32c:	af 90       	pop	r10
     32e:	08 95       	ret

00000330 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>:
     330:	46 2f       	mov	r20, r22
     332:	fc 01       	movw	r30, r24
     334:	62 87       	std	Z+10, r22	; 0x0a
     336:	6d e3       	ldi	r22, 0x3D	; 61
     338:	c8 df       	rcall	.-112    	; 0x2ca <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     33a:	ff ef       	ldi	r31, 0xFF	; 255
     33c:	26 e7       	ldi	r18, 0x76	; 118
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	f1 50       	subi	r31, 0x01	; 1
     342:	20 40       	sbci	r18, 0x00	; 0
     344:	80 40       	sbci	r24, 0x00	; 0
     346:	e1 f7       	brne	.-8      	; 0x340 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE+0x10>
     348:	00 c0       	rjmp	.+0      	; 0x34a <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE+0x1a>
     34a:	00 00       	nop
     34c:	08 95       	ret

0000034e <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>:
     34e:	af 92       	push	r10
     350:	bf 92       	push	r11
     352:	cf 92       	push	r12
     354:	ef 92       	push	r14
     356:	ff 92       	push	r15
     358:	0f 93       	push	r16
     35a:	1f 93       	push	r17
     35c:	cf 93       	push	r28
     35e:	df 93       	push	r29
     360:	ec 01       	movw	r28, r24
     362:	5a 01       	movw	r10, r20
     364:	f2 2e       	mov	r15, r18
     366:	60 93 e4 02 	sts	0x02E4, r22	; 0x8002e4 <__data_end>
     36a:	cc 24       	eor	r12, r12
     36c:	c3 94       	inc	r12
     36e:	ee 24       	eor	r14, r14
     370:	e3 94       	inc	r14
     372:	04 ee       	ldi	r16, 0xE4	; 228
     374:	12 e0       	ldi	r17, 0x02	; 2
     376:	2f 2d       	mov	r18, r15
     378:	4b 81       	ldd	r20, Y+3	; 0x03
     37a:	b5 01       	movw	r22, r10
     37c:	8c 81       	ldd	r24, Y+4	; 0x04
     37e:	9d 81       	ldd	r25, Y+5	; 0x05
     380:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <_ZN3TWI9readAsyncEPhhhS0_hb>
     384:	88 23       	and	r24, r24
     386:	89 f3       	breq	.-30     	; 0x36a <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh+0x1c>
     388:	8c 81       	ldd	r24, Y+4	; 0x04
     38a:	9d 81       	ldd	r25, Y+5	; 0x05
     38c:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <_ZN3TWI9availableEv>
     390:	88 23       	and	r24, r24
     392:	d1 f3       	breq	.-12     	; 0x388 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh+0x3a>
     394:	8c 81       	ldd	r24, Y+4	; 0x04
     396:	9d 81       	ldd	r25, Y+5	; 0x05
     398:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <_ZN3TWI8getErrorEv>
     39c:	4a e0       	ldi	r20, 0x0A	; 10
     39e:	50 e0       	ldi	r21, 0x00	; 0
     3a0:	68 2f       	mov	r22, r24
     3a2:	80 e5       	ldi	r24, 0x50	; 80
     3a4:	95 e0       	ldi	r25, 0x05	; 5
     3a6:	0e 94 9b 12 	call	0x2536	; 0x2536 <_ZN5Print7printlnEhi>
     3aa:	81 e0       	ldi	r24, 0x01	; 1
     3ac:	df 91       	pop	r29
     3ae:	cf 91       	pop	r28
     3b0:	1f 91       	pop	r17
     3b2:	0f 91       	pop	r16
     3b4:	ff 90       	pop	r15
     3b6:	ef 90       	pop	r14
     3b8:	cf 90       	pop	r12
     3ba:	bf 90       	pop	r11
     3bc:	af 90       	pop	r10
     3be:	08 95       	ret

000003c0 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>:
     3c0:	cf 93       	push	r28
     3c2:	df 93       	push	r29
     3c4:	1f 92       	push	r1
     3c6:	cd b7       	in	r28, 0x3d	; 61
     3c8:	de b7       	in	r29, 0x3e	; 62
     3ca:	19 82       	std	Y+1, r1	; 0x01
     3cc:	21 e0       	ldi	r18, 0x01	; 1
     3ce:	ae 01       	movw	r20, r28
     3d0:	4f 5f       	subi	r20, 0xFF	; 255
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	bc df       	rcall	.-136    	; 0x34e <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>
     3d6:	89 81       	ldd	r24, Y+1	; 0x01
     3d8:	0f 90       	pop	r0
     3da:	df 91       	pop	r29
     3dc:	cf 91       	pop	r28
     3de:	08 95       	ret

000003e0 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>:
     3e0:	1f 93       	push	r17
     3e2:	cf 93       	push	r28
     3e4:	df 93       	push	r29
     3e6:	ec 01       	movw	r28, r24
     3e8:	16 2f       	mov	r17, r22
     3ea:	8c 81       	ldd	r24, Y+4	; 0x04
     3ec:	9d 81       	ldd	r25, Y+5	; 0x05
     3ee:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <_ZN3TWI5beginEv>
     3f2:	60 e0       	ldi	r22, 0x00	; 0
     3f4:	ce 01       	movw	r24, r28
     3f6:	e4 df       	rcall	.-56     	; 0x3c0 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
     3f8:	80 3a       	cpi	r24, 0xA0	; 160
     3fa:	79 f0       	breq	.+30     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     3fc:	2f ef       	ldi	r18, 0xFF	; 255
     3fe:	83 ed       	ldi	r24, 0xD3	; 211
     400:	90 e3       	ldi	r25, 0x30	; 48
     402:	21 50       	subi	r18, 0x01	; 1
     404:	80 40       	sbci	r24, 0x00	; 0
     406:	90 40       	sbci	r25, 0x00	; 0
     408:	e1 f7       	brne	.-8      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     40a:	00 c0       	rjmp	.+0      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     40c:	00 00       	nop
     40e:	60 e0       	ldi	r22, 0x00	; 0
     410:	ce 01       	movw	r24, r28
     412:	d6 df       	rcall	.-84     	; 0x3c0 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
     414:	80 3a       	cpi	r24, 0xA0	; 160
     416:	09 f0       	breq	.+2      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     418:	4b c0       	rjmp	.+150    	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
     41a:	60 e0       	ldi	r22, 0x00	; 0
     41c:	ce 01       	movw	r24, r28
     41e:	88 df       	rcall	.-240    	; 0x330 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
     420:	40 e2       	ldi	r20, 0x20	; 32
     422:	6f e3       	ldi	r22, 0x3F	; 63
     424:	ce 01       	movw	r24, r28
     426:	51 df       	rcall	.-350    	; 0x2ca <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     428:	2f ef       	ldi	r18, 0xFF	; 255
     42a:	86 e7       	ldi	r24, 0x76	; 118
     42c:	91 e0       	ldi	r25, 0x01	; 1
     42e:	21 50       	subi	r18, 0x01	; 1
     430:	80 40       	sbci	r24, 0x00	; 0
     432:	90 40       	sbci	r25, 0x00	; 0
     434:	e1 f7       	brne	.-8      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     436:	00 c0       	rjmp	.+0      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     438:	00 00       	nop
     43a:	60 e0       	ldi	r22, 0x00	; 0
     43c:	ce 01       	movw	r24, r28
     43e:	c0 df       	rcall	.-128    	; 0x3c0 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
     440:	80 3a       	cpi	r24, 0xA0	; 160
     442:	39 f0       	breq	.+14     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
     444:	8f e3       	ldi	r24, 0x3F	; 63
     446:	9c e9       	ldi	r25, 0x9C	; 156
     448:	01 97       	sbiw	r24, 0x01	; 1
     44a:	f1 f7       	brne	.-4      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     44c:	00 c0       	rjmp	.+0      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     44e:	00 00       	nop
     450:	f4 cf       	rjmp	.-24     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     452:	9f ef       	ldi	r25, 0xFF	; 255
     454:	20 e7       	ldi	r18, 0x70	; 112
     456:	82 e0       	ldi	r24, 0x02	; 2
     458:	91 50       	subi	r25, 0x01	; 1
     45a:	20 40       	sbci	r18, 0x00	; 0
     45c:	80 40       	sbci	r24, 0x00	; 0
     45e:	e1 f7       	brne	.-8      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     460:	00 c0       	rjmp	.+0      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     462:	00 00       	nop
     464:	40 e0       	ldi	r20, 0x00	; 0
     466:	6e e3       	ldi	r22, 0x3E	; 62
     468:	ce 01       	movw	r24, r28
     46a:	2f df       	rcall	.-418    	; 0x2ca <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     46c:	8f e3       	ldi	r24, 0x3F	; 63
     46e:	9c e9       	ldi	r25, 0x9C	; 156
     470:	01 97       	sbiw	r24, 0x01	; 1
     472:	f1 f7       	brne	.-4      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
     474:	00 c0       	rjmp	.+0      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
     476:	00 00       	nop
     478:	40 e0       	ldi	r20, 0x00	; 0
     47a:	67 e0       	ldi	r22, 0x07	; 7
     47c:	ce 01       	movw	r24, r28
     47e:	25 df       	rcall	.-438    	; 0x2ca <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     480:	40 e0       	ldi	r20, 0x00	; 0
     482:	6f e3       	ldi	r22, 0x3F	; 63
     484:	ce 01       	movw	r24, r28
     486:	21 df       	rcall	.-446    	; 0x2ca <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     488:	8f e3       	ldi	r24, 0x3F	; 63
     48a:	9c e9       	ldi	r25, 0x9C	; 156
     48c:	01 97       	sbiw	r24, 0x01	; 1
     48e:	f1 f7       	brne	.-4      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
     490:	00 c0       	rjmp	.+0      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
     492:	00 00       	nop
     494:	61 2f       	mov	r22, r17
     496:	ce 01       	movw	r24, r28
     498:	4b df       	rcall	.-362    	; 0x330 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
     49a:	9f ef       	ldi	r25, 0xFF	; 255
     49c:	29 ef       	ldi	r18, 0xF9	; 249
     49e:	80 e0       	ldi	r24, 0x00	; 0
     4a0:	91 50       	subi	r25, 0x01	; 1
     4a2:	20 40       	sbci	r18, 0x00	; 0
     4a4:	80 40       	sbci	r24, 0x00	; 0
     4a6:	e1 f7       	brne	.-8      	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
     4a8:	00 c0       	rjmp	.+0      	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
     4aa:	00 00       	nop
     4ac:	81 e0       	ldi	r24, 0x01	; 1
     4ae:	01 c0       	rjmp	.+2      	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
     4b0:	80 e0       	ldi	r24, 0x00	; 0
     4b2:	df 91       	pop	r29
     4b4:	cf 91       	pop	r28
     4b6:	1f 91       	pop	r17
     4b8:	08 95       	ret

000004ba <_ZN15Adafruit_BNO0557getTempEv>:
     4ba:	64 e3       	ldi	r22, 0x34	; 52
     4bc:	81 cf       	rjmp	.-254    	; 0x3c0 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
     4be:	08 95       	ret

000004c0 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>:
 *            VECTOR_EULER
 *            VECTOR_LINEARACCEL
 *            VECTOR_GRAVITY]
 *  @return  vector from specified source
 */
AdafruitImu::Vector<3> Adafruit_BNO055::getVector(adafruit_vector_type_t vector_type) {
     4c0:	af 92       	push	r10
     4c2:	bf 92       	push	r11
     4c4:	cf 92       	push	r12
     4c6:	df 92       	push	r13
     4c8:	ff 92       	push	r15
     4ca:	0f 93       	push	r16
     4cc:	1f 93       	push	r17
     4ce:	cf 93       	push	r28
     4d0:	df 93       	push	r29
     4d2:	00 d0       	rcall	.+0      	; 0x4d4 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x14>
     4d4:	00 d0       	rcall	.+0      	; 0x4d6 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x16>
     4d6:	cd b7       	in	r28, 0x3d	; 61
     4d8:	de b7       	in	r29, 0x3e	; 62
     4da:	8c 01       	movw	r16, r24
     4dc:	cb 01       	movw	r24, r22
     4de:	f4 2e       	mov	r15, r20
	template <uint8_t N> class Vector
	{
		public:
		Vector()
		{
			memset(p_vec, 0, sizeof(double)*N);
     4e0:	2c e0       	ldi	r18, 0x0C	; 12
     4e2:	f8 01       	movw	r30, r16
     4e4:	11 92       	st	Z+, r1
     4e6:	2a 95       	dec	r18
     4e8:	e9 f7       	brne	.-6      	; 0x4e4 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x24>
  AdafruitImu::Vector<3> xyz;
  uint8_t buffer[6];
  memset(buffer, 0, 6);
     4ea:	ae 01       	movw	r20, r28
     4ec:	4f 5f       	subi	r20, 0xFF	; 255
     4ee:	5f 4f       	sbci	r21, 0xFF	; 255
     4f0:	26 e0       	ldi	r18, 0x06	; 6
     4f2:	fa 01       	movw	r30, r20
     4f4:	11 92       	st	Z+, r1
     4f6:	2a 95       	dec	r18
     4f8:	e9 f7       	brne	.-6      	; 0x4f4 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x34>

  int16_t x, y, z;
  x = y = z = 0;

  /* Read vector data (6 bytes) */
  readLen((adafruit_bno055_reg_t)vector_type, buffer, 6);
     4fa:	26 e0       	ldi	r18, 0x06	; 6
     4fc:	6f 2d       	mov	r22, r15
     4fe:	27 df       	rcall	.-434    	; 0x34e <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>

  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
     500:	6a 81       	ldd	r22, Y+2	; 0x02
     502:	70 e0       	ldi	r23, 0x00	; 0
     504:	76 2f       	mov	r23, r22
     506:	66 27       	eor	r22, r22
     508:	89 81       	ldd	r24, Y+1	; 0x01
     50a:	68 2b       	or	r22, r24
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
     50c:	8c 81       	ldd	r24, Y+4	; 0x04
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	98 2f       	mov	r25, r24
     512:	88 27       	eor	r24, r24
     514:	2b 81       	ldd	r18, Y+3	; 0x03
     516:	6c 01       	movw	r12, r24
     518:	c2 2a       	or	r12, r18
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
     51a:	8e 81       	ldd	r24, Y+6	; 0x06
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	98 2f       	mov	r25, r24
     520:	88 27       	eor	r24, r24
     522:	2d 81       	ldd	r18, Y+5	; 0x05
     524:	5c 01       	movw	r10, r24
     526:	a2 2a       	or	r10, r18

  /*!
   * Convert the value to an appropriate range (section 3.6.4)
   * and assign the value to the Vector type
   */
  switch (vector_type) {
     528:	f4 e1       	ldi	r31, 0x14	; 20
     52a:	ff 16       	cp	r15, r31
     52c:	09 f4       	brne	.+2      	; 0x530 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x70>
     52e:	4a c0       	rjmp	.+148    	; 0x5c4 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x104>
     530:	ff 15       	cp	r31, r15
     532:	40 f0       	brcs	.+16     	; 0x544 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x84>
     534:	88 e0       	ldi	r24, 0x08	; 8
     536:	f8 16       	cp	r15, r24
     538:	09 f4       	brne	.+2      	; 0x53c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x7c>
     53a:	ac c0       	rjmp	.+344    	; 0x694 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x1d4>
     53c:	ee e0       	ldi	r30, 0x0E	; 14
     53e:	fe 16       	cp	r15, r30
     540:	69 f0       	breq	.+26     	; 0x55c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x9c>
     542:	43 c1       	rjmp	.+646    	; 0x7ca <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
     544:	f8 e2       	ldi	r31, 0x28	; 40
     546:	ff 16       	cp	r15, r31
     548:	09 f4       	brne	.+2      	; 0x54c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x8c>
     54a:	d8 c0       	rjmp	.+432    	; 0x6fc <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x23c>
     54c:	8e e2       	ldi	r24, 0x2E	; 46
     54e:	f8 16       	cp	r15, r24
     550:	09 f4       	brne	.+2      	; 0x554 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x94>
     552:	08 c1       	rjmp	.+528    	; 0x764 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x2a4>
     554:	ea e1       	ldi	r30, 0x1A	; 26
     556:	fe 12       	cpse	r15, r30
     558:	38 c1       	rjmp	.+624    	; 0x7ca <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
     55a:	68 c0       	rjmp	.+208    	; 0x62c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x16c>
  case VECTOR_MAGNETOMETER:
    /* 1uT = 16 LSB */
    xyz[0] = ((double)x) / 16.0;
     55c:	07 2e       	mov	r0, r23
     55e:	00 0c       	add	r0, r0
     560:	88 0b       	sbc	r24, r24
     562:	99 0b       	sbc	r25, r25
     564:	0e 94 15 13 	call	0x262a	; 0x262a <__floatsisf>
     568:	20 e0       	ldi	r18, 0x00	; 0
     56a:	30 e0       	ldi	r19, 0x00	; 0
     56c:	40 e8       	ldi	r20, 0x80	; 128
     56e:	5d e3       	ldi	r21, 0x3D	; 61
     570:	0e 94 a1 13 	call	0x2742	; 0x2742 <__mulsf3>
     574:	f8 01       	movw	r30, r16
     576:	60 83       	st	Z, r22
     578:	71 83       	std	Z+1, r23	; 0x01
     57a:	82 83       	std	Z+2, r24	; 0x02
     57c:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 16.0;
     57e:	b6 01       	movw	r22, r12
     580:	dd 0c       	add	r13, r13
     582:	88 0b       	sbc	r24, r24
     584:	99 0b       	sbc	r25, r25
     586:	0e 94 15 13 	call	0x262a	; 0x262a <__floatsisf>
     58a:	20 e0       	ldi	r18, 0x00	; 0
     58c:	30 e0       	ldi	r19, 0x00	; 0
     58e:	40 e8       	ldi	r20, 0x80	; 128
     590:	5d e3       	ldi	r21, 0x3D	; 61
     592:	0e 94 a1 13 	call	0x2742	; 0x2742 <__mulsf3>
     596:	f8 01       	movw	r30, r16
     598:	64 83       	std	Z+4, r22	; 0x04
     59a:	75 83       	std	Z+5, r23	; 0x05
     59c:	86 83       	std	Z+6, r24	; 0x06
     59e:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 16.0;
     5a0:	b5 01       	movw	r22, r10
     5a2:	bb 0c       	add	r11, r11
     5a4:	88 0b       	sbc	r24, r24
     5a6:	99 0b       	sbc	r25, r25
     5a8:	0e 94 15 13 	call	0x262a	; 0x262a <__floatsisf>
     5ac:	20 e0       	ldi	r18, 0x00	; 0
     5ae:	30 e0       	ldi	r19, 0x00	; 0
     5b0:	40 e8       	ldi	r20, 0x80	; 128
     5b2:	5d e3       	ldi	r21, 0x3D	; 61
     5b4:	0e 94 a1 13 	call	0x2742	; 0x2742 <__mulsf3>
     5b8:	f8 01       	movw	r30, r16
     5ba:	60 87       	std	Z+8, r22	; 0x08
     5bc:	71 87       	std	Z+9, r23	; 0x09
     5be:	82 87       	std	Z+10, r24	; 0x0a
     5c0:	93 87       	std	Z+11, r25	; 0x0b
    break;
     5c2:	03 c1       	rjmp	.+518    	; 0x7ca <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_GYROSCOPE:
    /* 1dps = 16 LSB */
    xyz[0] = ((double)x) / 16.0;
     5c4:	07 2e       	mov	r0, r23
     5c6:	00 0c       	add	r0, r0
     5c8:	88 0b       	sbc	r24, r24
     5ca:	99 0b       	sbc	r25, r25
     5cc:	0e 94 15 13 	call	0x262a	; 0x262a <__floatsisf>
     5d0:	20 e0       	ldi	r18, 0x00	; 0
     5d2:	30 e0       	ldi	r19, 0x00	; 0
     5d4:	40 e8       	ldi	r20, 0x80	; 128
     5d6:	5d e3       	ldi	r21, 0x3D	; 61
     5d8:	0e 94 a1 13 	call	0x2742	; 0x2742 <__mulsf3>
     5dc:	f8 01       	movw	r30, r16
     5de:	60 83       	st	Z, r22
     5e0:	71 83       	std	Z+1, r23	; 0x01
     5e2:	82 83       	std	Z+2, r24	; 0x02
     5e4:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 16.0;
     5e6:	b6 01       	movw	r22, r12
     5e8:	dd 0c       	add	r13, r13
     5ea:	88 0b       	sbc	r24, r24
     5ec:	99 0b       	sbc	r25, r25
     5ee:	0e 94 15 13 	call	0x262a	; 0x262a <__floatsisf>
     5f2:	20 e0       	ldi	r18, 0x00	; 0
     5f4:	30 e0       	ldi	r19, 0x00	; 0
     5f6:	40 e8       	ldi	r20, 0x80	; 128
     5f8:	5d e3       	ldi	r21, 0x3D	; 61
     5fa:	0e 94 a1 13 	call	0x2742	; 0x2742 <__mulsf3>
     5fe:	f8 01       	movw	r30, r16
     600:	64 83       	std	Z+4, r22	; 0x04
     602:	75 83       	std	Z+5, r23	; 0x05
     604:	86 83       	std	Z+6, r24	; 0x06
     606:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 16.0;
     608:	b5 01       	movw	r22, r10
     60a:	bb 0c       	add	r11, r11
     60c:	88 0b       	sbc	r24, r24
     60e:	99 0b       	sbc	r25, r25
     610:	0e 94 15 13 	call	0x262a	; 0x262a <__floatsisf>
     614:	20 e0       	ldi	r18, 0x00	; 0
     616:	30 e0       	ldi	r19, 0x00	; 0
     618:	40 e8       	ldi	r20, 0x80	; 128
     61a:	5d e3       	ldi	r21, 0x3D	; 61
     61c:	0e 94 a1 13 	call	0x2742	; 0x2742 <__mulsf3>
     620:	f8 01       	movw	r30, r16
     622:	60 87       	std	Z+8, r22	; 0x08
     624:	71 87       	std	Z+9, r23	; 0x09
     626:	82 87       	std	Z+10, r24	; 0x0a
     628:	93 87       	std	Z+11, r25	; 0x0b
    break;
     62a:	cf c0       	rjmp	.+414    	; 0x7ca <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_EULER:
    /* 1 degree = 16 LSB */
    xyz[0] = ((double)x) / 16.0;
     62c:	07 2e       	mov	r0, r23
     62e:	00 0c       	add	r0, r0
     630:	88 0b       	sbc	r24, r24
     632:	99 0b       	sbc	r25, r25
     634:	0e 94 15 13 	call	0x262a	; 0x262a <__floatsisf>
     638:	20 e0       	ldi	r18, 0x00	; 0
     63a:	30 e0       	ldi	r19, 0x00	; 0
     63c:	40 e8       	ldi	r20, 0x80	; 128
     63e:	5d e3       	ldi	r21, 0x3D	; 61
     640:	0e 94 a1 13 	call	0x2742	; 0x2742 <__mulsf3>
     644:	f8 01       	movw	r30, r16
     646:	60 83       	st	Z, r22
     648:	71 83       	std	Z+1, r23	; 0x01
     64a:	82 83       	std	Z+2, r24	; 0x02
     64c:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 16.0;
     64e:	b6 01       	movw	r22, r12
     650:	dd 0c       	add	r13, r13
     652:	88 0b       	sbc	r24, r24
     654:	99 0b       	sbc	r25, r25
     656:	0e 94 15 13 	call	0x262a	; 0x262a <__floatsisf>
     65a:	20 e0       	ldi	r18, 0x00	; 0
     65c:	30 e0       	ldi	r19, 0x00	; 0
     65e:	40 e8       	ldi	r20, 0x80	; 128
     660:	5d e3       	ldi	r21, 0x3D	; 61
     662:	0e 94 a1 13 	call	0x2742	; 0x2742 <__mulsf3>
     666:	f8 01       	movw	r30, r16
     668:	64 83       	std	Z+4, r22	; 0x04
     66a:	75 83       	std	Z+5, r23	; 0x05
     66c:	86 83       	std	Z+6, r24	; 0x06
     66e:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 16.0;
     670:	b5 01       	movw	r22, r10
     672:	bb 0c       	add	r11, r11
     674:	88 0b       	sbc	r24, r24
     676:	99 0b       	sbc	r25, r25
     678:	0e 94 15 13 	call	0x262a	; 0x262a <__floatsisf>
     67c:	20 e0       	ldi	r18, 0x00	; 0
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	40 e8       	ldi	r20, 0x80	; 128
     682:	5d e3       	ldi	r21, 0x3D	; 61
     684:	0e 94 a1 13 	call	0x2742	; 0x2742 <__mulsf3>
     688:	f8 01       	movw	r30, r16
     68a:	60 87       	std	Z+8, r22	; 0x08
     68c:	71 87       	std	Z+9, r23	; 0x09
     68e:	82 87       	std	Z+10, r24	; 0x0a
     690:	93 87       	std	Z+11, r25	; 0x0b
    break;
     692:	9b c0       	rjmp	.+310    	; 0x7ca <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_ACCELEROMETER:
    /* 1m/s^2 = 100 LSB */
    xyz[0] = ((double)x) / 100.0;
     694:	07 2e       	mov	r0, r23
     696:	00 0c       	add	r0, r0
     698:	88 0b       	sbc	r24, r24
     69a:	99 0b       	sbc	r25, r25
     69c:	0e 94 15 13 	call	0x262a	; 0x262a <__floatsisf>
     6a0:	20 e0       	ldi	r18, 0x00	; 0
     6a2:	30 e0       	ldi	r19, 0x00	; 0
     6a4:	48 ec       	ldi	r20, 0xC8	; 200
     6a6:	52 e4       	ldi	r21, 0x42	; 66
     6a8:	0e 94 ab 12 	call	0x2556	; 0x2556 <__divsf3>
     6ac:	f8 01       	movw	r30, r16
     6ae:	60 83       	st	Z, r22
     6b0:	71 83       	std	Z+1, r23	; 0x01
     6b2:	82 83       	std	Z+2, r24	; 0x02
     6b4:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 100.0;
     6b6:	b6 01       	movw	r22, r12
     6b8:	dd 0c       	add	r13, r13
     6ba:	88 0b       	sbc	r24, r24
     6bc:	99 0b       	sbc	r25, r25
     6be:	0e 94 15 13 	call	0x262a	; 0x262a <__floatsisf>
     6c2:	20 e0       	ldi	r18, 0x00	; 0
     6c4:	30 e0       	ldi	r19, 0x00	; 0
     6c6:	48 ec       	ldi	r20, 0xC8	; 200
     6c8:	52 e4       	ldi	r21, 0x42	; 66
     6ca:	0e 94 ab 12 	call	0x2556	; 0x2556 <__divsf3>
     6ce:	f8 01       	movw	r30, r16
     6d0:	64 83       	std	Z+4, r22	; 0x04
     6d2:	75 83       	std	Z+5, r23	; 0x05
     6d4:	86 83       	std	Z+6, r24	; 0x06
     6d6:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 100.0;
     6d8:	b5 01       	movw	r22, r10
     6da:	bb 0c       	add	r11, r11
     6dc:	88 0b       	sbc	r24, r24
     6de:	99 0b       	sbc	r25, r25
     6e0:	0e 94 15 13 	call	0x262a	; 0x262a <__floatsisf>
     6e4:	20 e0       	ldi	r18, 0x00	; 0
     6e6:	30 e0       	ldi	r19, 0x00	; 0
     6e8:	48 ec       	ldi	r20, 0xC8	; 200
     6ea:	52 e4       	ldi	r21, 0x42	; 66
     6ec:	0e 94 ab 12 	call	0x2556	; 0x2556 <__divsf3>
     6f0:	f8 01       	movw	r30, r16
     6f2:	60 87       	std	Z+8, r22	; 0x08
     6f4:	71 87       	std	Z+9, r23	; 0x09
     6f6:	82 87       	std	Z+10, r24	; 0x0a
     6f8:	93 87       	std	Z+11, r25	; 0x0b
    break;
     6fa:	67 c0       	rjmp	.+206    	; 0x7ca <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_LINEARACCEL:
    /* 1m/s^2 = 100 LSB */
    xyz[0] = ((double)x) / 100.0;
     6fc:	07 2e       	mov	r0, r23
     6fe:	00 0c       	add	r0, r0
     700:	88 0b       	sbc	r24, r24
     702:	99 0b       	sbc	r25, r25
     704:	0e 94 15 13 	call	0x262a	; 0x262a <__floatsisf>
     708:	20 e0       	ldi	r18, 0x00	; 0
     70a:	30 e0       	ldi	r19, 0x00	; 0
     70c:	48 ec       	ldi	r20, 0xC8	; 200
     70e:	52 e4       	ldi	r21, 0x42	; 66
     710:	0e 94 ab 12 	call	0x2556	; 0x2556 <__divsf3>
     714:	f8 01       	movw	r30, r16
     716:	60 83       	st	Z, r22
     718:	71 83       	std	Z+1, r23	; 0x01
     71a:	82 83       	std	Z+2, r24	; 0x02
     71c:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 100.0;
     71e:	b6 01       	movw	r22, r12
     720:	dd 0c       	add	r13, r13
     722:	88 0b       	sbc	r24, r24
     724:	99 0b       	sbc	r25, r25
     726:	0e 94 15 13 	call	0x262a	; 0x262a <__floatsisf>
     72a:	20 e0       	ldi	r18, 0x00	; 0
     72c:	30 e0       	ldi	r19, 0x00	; 0
     72e:	48 ec       	ldi	r20, 0xC8	; 200
     730:	52 e4       	ldi	r21, 0x42	; 66
     732:	0e 94 ab 12 	call	0x2556	; 0x2556 <__divsf3>
     736:	f8 01       	movw	r30, r16
     738:	64 83       	std	Z+4, r22	; 0x04
     73a:	75 83       	std	Z+5, r23	; 0x05
     73c:	86 83       	std	Z+6, r24	; 0x06
     73e:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 100.0;
     740:	b5 01       	movw	r22, r10
     742:	bb 0c       	add	r11, r11
     744:	88 0b       	sbc	r24, r24
     746:	99 0b       	sbc	r25, r25
     748:	0e 94 15 13 	call	0x262a	; 0x262a <__floatsisf>
     74c:	20 e0       	ldi	r18, 0x00	; 0
     74e:	30 e0       	ldi	r19, 0x00	; 0
     750:	48 ec       	ldi	r20, 0xC8	; 200
     752:	52 e4       	ldi	r21, 0x42	; 66
     754:	0e 94 ab 12 	call	0x2556	; 0x2556 <__divsf3>
     758:	f8 01       	movw	r30, r16
     75a:	60 87       	std	Z+8, r22	; 0x08
     75c:	71 87       	std	Z+9, r23	; 0x09
     75e:	82 87       	std	Z+10, r24	; 0x0a
     760:	93 87       	std	Z+11, r25	; 0x0b
    break;
     762:	33 c0       	rjmp	.+102    	; 0x7ca <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_GRAVITY:
    /* 1m/s^2 = 100 LSB */
    xyz[0] = ((double)x) / 100.0;
     764:	07 2e       	mov	r0, r23
     766:	00 0c       	add	r0, r0
     768:	88 0b       	sbc	r24, r24
     76a:	99 0b       	sbc	r25, r25
     76c:	0e 94 15 13 	call	0x262a	; 0x262a <__floatsisf>
     770:	20 e0       	ldi	r18, 0x00	; 0
     772:	30 e0       	ldi	r19, 0x00	; 0
     774:	48 ec       	ldi	r20, 0xC8	; 200
     776:	52 e4       	ldi	r21, 0x42	; 66
     778:	0e 94 ab 12 	call	0x2556	; 0x2556 <__divsf3>
     77c:	f8 01       	movw	r30, r16
     77e:	60 83       	st	Z, r22
     780:	71 83       	std	Z+1, r23	; 0x01
     782:	82 83       	std	Z+2, r24	; 0x02
     784:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 100.0;
     786:	b6 01       	movw	r22, r12
     788:	dd 0c       	add	r13, r13
     78a:	88 0b       	sbc	r24, r24
     78c:	99 0b       	sbc	r25, r25
     78e:	0e 94 15 13 	call	0x262a	; 0x262a <__floatsisf>
     792:	20 e0       	ldi	r18, 0x00	; 0
     794:	30 e0       	ldi	r19, 0x00	; 0
     796:	48 ec       	ldi	r20, 0xC8	; 200
     798:	52 e4       	ldi	r21, 0x42	; 66
     79a:	0e 94 ab 12 	call	0x2556	; 0x2556 <__divsf3>
     79e:	f8 01       	movw	r30, r16
     7a0:	64 83       	std	Z+4, r22	; 0x04
     7a2:	75 83       	std	Z+5, r23	; 0x05
     7a4:	86 83       	std	Z+6, r24	; 0x06
     7a6:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 100.0;
     7a8:	b5 01       	movw	r22, r10
     7aa:	bb 0c       	add	r11, r11
     7ac:	88 0b       	sbc	r24, r24
     7ae:	99 0b       	sbc	r25, r25
     7b0:	0e 94 15 13 	call	0x262a	; 0x262a <__floatsisf>
     7b4:	20 e0       	ldi	r18, 0x00	; 0
     7b6:	30 e0       	ldi	r19, 0x00	; 0
     7b8:	48 ec       	ldi	r20, 0xC8	; 200
     7ba:	52 e4       	ldi	r21, 0x42	; 66
     7bc:	0e 94 ab 12 	call	0x2556	; 0x2556 <__divsf3>
     7c0:	f8 01       	movw	r30, r16
     7c2:	60 87       	std	Z+8, r22	; 0x08
     7c4:	71 87       	std	Z+9, r23	; 0x09
     7c6:	82 87       	std	Z+10, r24	; 0x0a
     7c8:	93 87       	std	Z+11, r25	; 0x0b
    break;
  }

  return xyz;
}
     7ca:	c8 01       	movw	r24, r16
     7cc:	26 96       	adiw	r28, 0x06	; 6
     7ce:	0f b6       	in	r0, 0x3f	; 63
     7d0:	f8 94       	cli
     7d2:	de bf       	out	0x3e, r29	; 62
     7d4:	0f be       	out	0x3f, r0	; 63
     7d6:	cd bf       	out	0x3d, r28	; 61
     7d8:	df 91       	pop	r29
     7da:	cf 91       	pop	r28
     7dc:	1f 91       	pop	r17
     7de:	0f 91       	pop	r16
     7e0:	ff 90       	pop	r15
     7e2:	df 90       	pop	r13
     7e4:	cf 90       	pop	r12
     7e6:	bf 90       	pop	r11
     7e8:	af 90       	pop	r10
     7ea:	08 95       	ret

000007ec <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>:
/*!
 *  @brief  Reads the sensor and returns the data as a sensors_event_t
 *  @param  event
 *  @return always returns true
 */
bool Adafruit_BNO055::getEvent(sensors_event_t *event) {
     7ec:	0f 93       	push	r16
     7ee:	1f 93       	push	r17
     7f0:	cf 93       	push	r28
     7f2:	df 93       	push	r29
     7f4:	cd b7       	in	r28, 0x3d	; 61
     7f6:	de b7       	in	r29, 0x3e	; 62
     7f8:	2c 97       	sbiw	r28, 0x0c	; 12
     7fa:	0f b6       	in	r0, 0x3f	; 63
     7fc:	f8 94       	cli
     7fe:	de bf       	out	0x3e, r29	; 62
     800:	0f be       	out	0x3f, r0	; 63
     802:	cd bf       	out	0x3d, r28	; 61
     804:	8b 01       	movw	r16, r22
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
     806:	20 e2       	ldi	r18, 0x20	; 32
     808:	fb 01       	movw	r30, r22
     80a:	11 92       	st	Z+, r1
     80c:	2a 95       	dec	r18
     80e:	e9 f7       	brne	.-6      	; 0x80a <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t+0x1e>

  event->version = sizeof(sensors_event_t);
     810:	40 e2       	ldi	r20, 0x20	; 32
     812:	50 e0       	ldi	r21, 0x00	; 0
     814:	60 e0       	ldi	r22, 0x00	; 0
     816:	70 e0       	ldi	r23, 0x00	; 0
     818:	f8 01       	movw	r30, r16
     81a:	40 83       	st	Z, r20
     81c:	51 83       	std	Z+1, r21	; 0x01
     81e:	62 83       	std	Z+2, r22	; 0x02
     820:	73 83       	std	Z+3, r23	; 0x03
  event->sensor_id = _sensorID;
     822:	fc 01       	movw	r30, r24
     824:	46 81       	ldd	r20, Z+6	; 0x06
     826:	57 81       	ldd	r21, Z+7	; 0x07
     828:	60 85       	ldd	r22, Z+8	; 0x08
     82a:	71 85       	ldd	r23, Z+9	; 0x09
     82c:	f8 01       	movw	r30, r16
     82e:	44 83       	std	Z+4, r20	; 0x04
     830:	55 83       	std	Z+5, r21	; 0x05
     832:	66 83       	std	Z+6, r22	; 0x06
     834:	77 83       	std	Z+7, r23	; 0x07
  event->type = SENSOR_TYPE_ORIENTATION;
     836:	43 e0       	ldi	r20, 0x03	; 3
     838:	50 e0       	ldi	r21, 0x00	; 0
     83a:	60 e0       	ldi	r22, 0x00	; 0
     83c:	70 e0       	ldi	r23, 0x00	; 0
     83e:	40 87       	std	Z+8, r20	; 0x08
     840:	51 87       	std	Z+9, r21	; 0x09
     842:	62 87       	std	Z+10, r22	; 0x0a
     844:	73 87       	std	Z+11, r23	; 0x0b
  //event->timestamp = millis();

  /* Get a Euler angle sample for orientation */
  AdafruitImu::Vector<3> euler = getVector(Adafruit_BNO055::VECTOR_EULER);
     846:	4a e1       	ldi	r20, 0x1A	; 26
     848:	bc 01       	movw	r22, r24
     84a:	ce 01       	movw	r24, r28
     84c:	01 96       	adiw	r24, 0x01	; 1
     84e:	38 de       	rcall	.-912    	; 0x4c0 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
  event->orientation.x = euler.x();
     850:	89 81       	ldd	r24, Y+1	; 0x01
     852:	9a 81       	ldd	r25, Y+2	; 0x02
     854:	ab 81       	ldd	r26, Y+3	; 0x03
     856:	bc 81       	ldd	r27, Y+4	; 0x04
     858:	f8 01       	movw	r30, r16
     85a:	80 8b       	std	Z+16, r24	; 0x10
     85c:	91 8b       	std	Z+17, r25	; 0x11
     85e:	a2 8b       	std	Z+18, r26	; 0x12
     860:	b3 8b       	std	Z+19, r27	; 0x13
  event->orientation.y = euler.y();
     862:	8d 81       	ldd	r24, Y+5	; 0x05
     864:	9e 81       	ldd	r25, Y+6	; 0x06
     866:	af 81       	ldd	r26, Y+7	; 0x07
     868:	b8 85       	ldd	r27, Y+8	; 0x08
     86a:	84 8b       	std	Z+20, r24	; 0x14
     86c:	95 8b       	std	Z+21, r25	; 0x15
     86e:	a6 8b       	std	Z+22, r26	; 0x16
     870:	b7 8b       	std	Z+23, r27	; 0x17
  event->orientation.z = euler.z();
     872:	89 85       	ldd	r24, Y+9	; 0x09
     874:	9a 85       	ldd	r25, Y+10	; 0x0a
     876:	ab 85       	ldd	r26, Y+11	; 0x0b
     878:	bc 85       	ldd	r27, Y+12	; 0x0c
     87a:	80 8f       	std	Z+24, r24	; 0x18
     87c:	91 8f       	std	Z+25, r25	; 0x19
     87e:	a2 8f       	std	Z+26, r26	; 0x1a
     880:	b3 8f       	std	Z+27, r27	; 0x1b

  return true;
}
     882:	81 e0       	ldi	r24, 0x01	; 1
     884:	2c 96       	adiw	r28, 0x0c	; 12
     886:	0f b6       	in	r0, 0x3f	; 63
     888:	f8 94       	cli
     88a:	de bf       	out	0x3e, r29	; 62
     88c:	0f be       	out	0x3f, r0	; 63
     88e:	cd bf       	out	0x3d, r28	; 61
     890:	df 91       	pop	r29
     892:	cf 91       	pop	r28
     894:	1f 91       	pop	r17
     896:	0f 91       	pop	r16
     898:	08 95       	ret

0000089a <_Z14RunPingCommandPKhh>:
#include <stddef.h>

uint8_t* const SendDataBuffer = (uint8_t*)(&EtherComm::buffer[2]);

void RunPingCommand(const uint8_t* data, uint8_t len){
  if(len == 1){
     89a:	61 30       	cpi	r22, 0x01	; 1
     89c:	49 f4       	brne	.+18     	; 0x8b0 <_Z14RunPingCommandPKhh+0x16>
     89e:	fc 01       	movw	r30, r24
    SendDataBuffer[0] = data[0];
     8a0:	80 81       	ld	r24, Z
     8a2:	e0 91 e5 02 	lds	r30, 0x02E5	; 0x8002e5 <_ZL14SendDataBuffer>
     8a6:	f0 91 e6 02 	lds	r31, 0x02E6	; 0x8002e6 <_ZL14SendDataBuffer+0x1>
     8aa:	80 83       	st	Z, r24
    EtherComm::SendCommand(CMD_Ping, 1);
     8ac:	80 e0       	ldi	r24, 0x00	; 0
     8ae:	d9 c6       	rjmp	.+3506   	; 0x1662 <_ZN9EtherComm11SendCommandEhh>
     8b0:	08 95       	ret

000008b2 <_Z14RunEchoCommandPKhh>:
  }
}

void RunEchoCommand(const uint8_t* data, uint8_t len){
  uint8_t* index = SendDataBuffer;
     8b2:	40 91 e5 02 	lds	r20, 0x02E5	; 0x8002e5 <_ZL14SendDataBuffer>
     8b6:	30 91 e6 02 	lds	r19, 0x02E6	; 0x8002e6 <_ZL14SendDataBuffer+0x1>
  uint8_t dataLen = len;
  while(len-- > 0){
     8ba:	2f ef       	ldi	r18, 0xFF	; 255
     8bc:	26 0f       	add	r18, r22
     8be:	66 23       	and	r22, r22
     8c0:	41 f0       	breq	.+16     	; 0x8d2 <_Z14RunEchoCommandPKhh+0x20>
     8c2:	a8 2f       	mov	r26, r24
     8c4:	b9 2f       	mov	r27, r25
     8c6:	e4 2f       	mov	r30, r20
     8c8:	f3 2f       	mov	r31, r19
    *(index++) = *(data++);
     8ca:	8d 91       	ld	r24, X+
     8cc:	81 93       	st	Z+, r24
}

void RunEchoCommand(const uint8_t* data, uint8_t len){
  uint8_t* index = SendDataBuffer;
  uint8_t dataLen = len;
  while(len-- > 0){
     8ce:	21 50       	subi	r18, 0x01	; 1
     8d0:	e0 f7       	brcc	.-8      	; 0x8ca <_Z14RunEchoCommandPKhh+0x18>
    *(index++) = *(data++);
  }
  
  EtherComm::SendCommand(CMD_Echo, dataLen);
     8d2:	81 e0       	ldi	r24, 0x01	; 1
     8d4:	c6 c6       	rjmp	.+3468   	; 0x1662 <_ZN9EtherComm11SendCommandEhh>
     8d6:	08 95       	ret

000008d8 <_Z13RunLedCommandPKhh>:
}

void RunLedCommand(const uint8_t* data, uint8_t len){
	if(len == 1){
     8d8:	61 30       	cpi	r22, 0x01	; 1
     8da:	51 f4       	brne	.+20     	; 0x8f0 <_Z13RunLedCommandPKhh+0x18>
		uint8_t state = *data;
     8dc:	fc 01       	movw	r30, r24
     8de:	90 81       	ld	r25, Z
		if(state <= 1){
     8e0:	92 30       	cpi	r25, 0x02	; 2
     8e2:	30 f4       	brcc	.+12     	; 0x8f0 <_Z13RunLedCommandPKhh+0x18>
			rov.SetLed(state > 0);
     8e4:	81 e0       	ldi	r24, 0x01	; 1
     8e6:	91 11       	cpse	r25, r1
     8e8:	01 c0       	rjmp	.+2      	; 0x8ec <_Z13RunLedCommandPKhh+0x14>
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	0c 94 1d 11 	jmp	0x223a	; 0x223a <_ZN5Robot6SetLedEb>
     8f0:	08 95       	ret

000008f2 <_Z22RunUpdateDeviceCommandPKhh>:
		}
	}
}

void RunUpdateDeviceCommand(const uint8_t* data, uint8_t len){
	if(len > 0){
     8f2:	66 23       	and	r22, r22
     8f4:	c1 f0       	breq	.+48     	; 0x926 <_Z22RunUpdateDeviceCommandPKhh+0x34>
		if(Robot::devices[data[0]] != NULL){
     8f6:	dc 01       	movw	r26, r24
     8f8:	ec 91       	ld	r30, X
     8fa:	f0 e0       	ldi	r31, 0x00	; 0
     8fc:	ee 0f       	add	r30, r30
     8fe:	ff 1f       	adc	r31, r31
     900:	ee 5b       	subi	r30, 0xBE	; 190
     902:	f9 4f       	sbci	r31, 0xF9	; 249
     904:	a0 81       	ld	r26, Z
     906:	b1 81       	ldd	r27, Z+1	; 0x01
     908:	10 97       	sbiw	r26, 0x00	; 0
     90a:	69 f0       	breq	.+26     	; 0x926 <_Z22RunUpdateDeviceCommandPKhh+0x34>
     90c:	46 2f       	mov	r20, r22
     90e:	bc 01       	movw	r22, r24
			Robot::devices[data[0]]->Update(data + 1, len - 1);
     910:	41 50       	subi	r20, 0x01	; 1
     912:	6f 5f       	subi	r22, 0xFF	; 255
     914:	7f 4f       	sbci	r23, 0xFF	; 255
     916:	ed 91       	ld	r30, X+
     918:	fc 91       	ld	r31, X
     91a:	11 97       	sbiw	r26, 0x01	; 1
     91c:	01 90       	ld	r0, Z+
     91e:	f0 81       	ld	r31, Z
     920:	e0 2d       	mov	r30, r0
     922:	cd 01       	movw	r24, r26
     924:	19 95       	eicall
     926:	08 95       	ret

00000928 <_ZN9EtherComm15CommandReceivedEhPKhh>:
		}
	}
}

void EtherComm::CommandReceived(uint8_t command, const uint8_t* data, uint8_t len){
     928:	9b 01       	movw	r18, r22
  switch(command){
     92a:	81 30       	cpi	r24, 0x01	; 1
     92c:	51 f0       	breq	.+20     	; 0x942 <_ZN9EtherComm15CommandReceivedEhPKhh+0x1a>
     92e:	28 f0       	brcs	.+10     	; 0x93a <_ZN9EtherComm15CommandReceivedEhPKhh+0x12>
     930:	82 30       	cpi	r24, 0x02	; 2
     932:	59 f0       	breq	.+22     	; 0x94a <_ZN9EtherComm15CommandReceivedEhPKhh+0x22>
     934:	83 30       	cpi	r24, 0x03	; 3
     936:	69 f0       	breq	.+26     	; 0x952 <_ZN9EtherComm15CommandReceivedEhPKhh+0x2a>
     938:	08 95       	ret
    case CMD_Ping: RunPingCommand(data, len); break;
     93a:	64 2f       	mov	r22, r20
     93c:	c9 01       	movw	r24, r18
     93e:	ad cf       	rjmp	.-166    	; 0x89a <_Z14RunPingCommandPKhh>
     940:	08 95       	ret
    case CMD_Echo: RunEchoCommand(data, len); break;
     942:	64 2f       	mov	r22, r20
     944:	c9 01       	movw	r24, r18
     946:	b5 cf       	rjmp	.-150    	; 0x8b2 <_Z14RunEchoCommandPKhh>
     948:	08 95       	ret
	case CMD_Led: RunLedCommand(data, len); break;
     94a:	64 2f       	mov	r22, r20
     94c:	c9 01       	movw	r24, r18
     94e:	c4 cf       	rjmp	.-120    	; 0x8d8 <_Z13RunLedCommandPKhh>
     950:	08 95       	ret
	case CMD_UpdateDevice: RunUpdateDeviceCommand(data, len); break;
     952:	64 2f       	mov	r22, r20
     954:	c9 01       	movw	r24, r18
     956:	cd cf       	rjmp	.-102    	; 0x8f2 <_Z22RunUpdateDeviceCommandPKhh>
     958:	08 95       	ret

0000095a <_GLOBAL__sub_I__Z14RunPingCommandPKhh>:
     95a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
#include "EtherComm.h"
#include "Robot.h"
#include "Commands.h"
#include <stddef.h>

uint8_t* const SendDataBuffer = (uint8_t*)(&EtherComm::buffer[2]);
     95e:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
     962:	02 96       	adiw	r24, 0x02	; 2
     964:	90 93 e6 02 	sts	0x02E6, r25	; 0x8002e6 <_ZL14SendDataBuffer+0x1>
     968:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <_ZL14SendDataBuffer>
     96c:	08 95       	ret

0000096e <_ZL10enableChipv>:
static Register* selectPort;
static uint8_t selectPin;

static void enableChip () {
	//cli();
	SetLow(*selectPort, selectPin); //digitalWrite(selectPin, LOW);
     96e:	e0 91 eb 02 	lds	r30, 0x02EB	; 0x8002eb <_ZL10selectPort>
     972:	f0 91 ec 02 	lds	r31, 0x02EC	; 0x8002ec <_ZL10selectPort+0x1>
     976:	90 81       	ld	r25, Z
     978:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <_ZL9selectPin>
     97c:	80 95       	com	r24
     97e:	89 23       	and	r24, r25
     980:	80 83       	st	Z, r24
     982:	08 95       	ret

00000984 <_ZL11disableChipv>:
}

static void disableChip () {
	SetHigh(*selectPort, selectPin); //digitalWrite(selectPin, HIGH);
     984:	e0 91 eb 02 	lds	r30, 0x02EB	; 0x8002eb <_ZL10selectPort>
     988:	f0 91 ec 02 	lds	r31, 0x02EC	; 0x8002ec <_ZL10selectPort+0x1>
     98c:	90 81       	ld	r25, Z
     98e:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <_ZL9selectPin>
     992:	89 2b       	or	r24, r25
     994:	80 83       	st	Z, r24
     996:	08 95       	ret

00000998 <_ZL6readOphh>:

	SetOutput(csDDR, selectPin);
	disableChip();
}

static uint8_t readOp (uint8_t op, uint8_t address) {
     998:	cf 93       	push	r28
     99a:	df 93       	push	r29
     99c:	d8 2f       	mov	r29, r24
     99e:	c6 2f       	mov	r28, r22
    enableChip();
     9a0:	e6 df       	rcall	.-52     	; 0x96e <_ZL10enableChipv>
    SPI.write8(op | (address & ADDR_MASK));
     9a2:	8c 2f       	mov	r24, r28
     9a4:	cf 71       	andi	r28, 0x1F	; 31
     9a6:	cd 2b       	or	r28, r29
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     9a8:	ce bd       	out	0x2e, r28	; 46
		asm volatile("nop");
     9aa:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     9ac:	0d b4       	in	r0, 0x2d	; 45
     9ae:	07 fe       	sbrs	r0, 7
     9b0:	fd cf       	rjmp	.-6      	; 0x9ac <_ZL6readOphh+0x14>
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     9b2:	1e bc       	out	0x2e, r1	; 46
		asm volatile("nop");
     9b4:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     9b6:	0d b4       	in	r0, 0x2d	; 45
     9b8:	07 fe       	sbrs	r0, 7
     9ba:	fd cf       	rjmp	.-6      	; 0x9b6 <_ZL6readOphh+0x1e>
	}

	//write8, excepts also returns the received byte
	static uint8_t read_write8(uint8_t data){
		write8(data);
		return SPDR;
     9bc:	ce b5       	in	r28, 0x2e	; 46
    uint8_t result = SPI.read_write8(0x00);
    if (address & 0x80)
     9be:	88 23       	and	r24, r24
     9c0:	34 f4       	brge	.+12     	; 0x9ce <_ZL6readOphh+0x36>
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     9c2:	1e bc       	out	0x2e, r1	; 46
		asm volatile("nop");
     9c4:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     9c6:	0d b4       	in	r0, 0x2d	; 45
     9c8:	07 fe       	sbrs	r0, 7
     9ca:	fd cf       	rjmp	.-6      	; 0x9c6 <_ZL6readOphh+0x2e>
        result = SPI.read_write8(0x00);
    disableChip();
     9cc:	ce b5       	in	r28, 0x2e	; 46
     9ce:	da df       	rcall	.-76     	; 0x984 <_ZL11disableChipv>
    return result;
}
     9d0:	8c 2f       	mov	r24, r28
     9d2:	df 91       	pop	r29
     9d4:	cf 91       	pop	r28
     9d6:	08 95       	ret

000009d8 <_ZL7writeOphhh>:

static void writeOp (uint8_t op, uint8_t address, uint8_t data) {
     9d8:	1f 93       	push	r17
     9da:	cf 93       	push	r28
     9dc:	df 93       	push	r29
     9de:	c8 2f       	mov	r28, r24
     9e0:	d6 2f       	mov	r29, r22
     9e2:	14 2f       	mov	r17, r20
    enableChip();
     9e4:	c4 df       	rcall	.-120    	; 0x96e <_ZL10enableChipv>
    SPI.write8(op | (address & ADDR_MASK));
     9e6:	df 71       	andi	r29, 0x1F	; 31
     9e8:	cd 2b       	or	r28, r29
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     9ea:	ce bd       	out	0x2e, r28	; 46
		asm volatile("nop");
     9ec:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     9ee:	0d b4       	in	r0, 0x2d	; 45
     9f0:	07 fe       	sbrs	r0, 7
     9f2:	fd cf       	rjmp	.-6      	; 0x9ee <_ZL7writeOphhh+0x16>
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     9f4:	1e bd       	out	0x2e, r17	; 46
		asm volatile("nop");
     9f6:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     9f8:	0d b4       	in	r0, 0x2d	; 45
     9fa:	07 fe       	sbrs	r0, 7
    SPI.write8(data);
    disableChip();
     9fc:	fd cf       	rjmp	.-6      	; 0x9f8 <_ZL7writeOphhh+0x20>
     9fe:	c2 df       	rcall	.-124    	; 0x984 <_ZL11disableChipv>
}
     a00:	df 91       	pop	r29
     a02:	cf 91       	pop	r28
     a04:	1f 91       	pop	r17
     a06:	08 95       	ret

00000a08 <_ZL7readBufjPh>:

static void readBuf(uint16_t len, uint8_t* data) {
     a08:	0f 93       	push	r16
     a0a:	1f 93       	push	r17
     a0c:	cf 93       	push	r28
     a0e:	df 93       	push	r29
     a10:	ec 01       	movw	r28, r24
     a12:	8b 01       	movw	r16, r22
    enableChip();
     a14:	ac df       	rcall	.-168    	; 0x96e <_ZL10enableChipv>
    if (len != 0) {
     a16:	20 97       	sbiw	r28, 0x00	; 0
     a18:	99 f0       	breq	.+38     	; 0xa40 <_ZL7readBufjPh+0x38>
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     a1a:	8a e3       	ldi	r24, 0x3A	; 58
     a1c:	8e bd       	out	0x2e, r24	; 46
		asm volatile("nop");
     a1e:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     a20:	0d b4       	in	r0, 0x2d	; 45
     a22:	07 fe       	sbrs	r0, 7
     a24:	fd cf       	rjmp	.-6      	; 0xa20 <_ZL7readBufjPh+0x18>
     a26:	f8 01       	movw	r30, r16
     a28:	b8 01       	movw	r22, r16
     a2a:	6c 0f       	add	r22, r28
     a2c:	7d 1f       	adc	r23, r29
	static void read(void *buf, uint16_t nbyte, uint8_t dataSend = 0){
		if(nbyte == 0) return;
		
		uint8_t* buff = (uint8_t*)buf;
		while(nbyte--){
			SPDR = dataSend;
     a2e:	1e bc       	out	0x2e, r1	; 46
			//asm volatile("nop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\n");
			while(!(SPSR & _BV(SPIF)));
     a30:	0d b4       	in	r0, 0x2d	; 45
     a32:	07 fe       	sbrs	r0, 7
     a34:	fd cf       	rjmp	.-6      	; 0xa30 <_ZL7readBufjPh+0x28>
			*buff++ = SPDR;
     a36:	9e b5       	in	r25, 0x2e	; 46
     a38:	91 93       	st	Z+, r25
		
	static void read(void *buf, uint16_t nbyte, uint8_t dataSend = 0){
		if(nbyte == 0) return;
		
		uint8_t* buff = (uint8_t*)buf;
		while(nbyte--){
     a3a:	6e 17       	cp	r22, r30
     a3c:	7f 07       	cpc	r23, r31
        SPI.write8(ENC28J60_READ_BUF_MEM);
		SPI.read(data, len);
    }
    disableChip();
     a3e:	b9 f7       	brne	.-18     	; 0xa2e <_ZL7readBufjPh+0x26>
     a40:	a1 df       	rcall	.-190    	; 0x984 <_ZL11disableChipv>
}
     a42:	df 91       	pop	r29
     a44:	cf 91       	pop	r28
     a46:	1f 91       	pop	r17
     a48:	0f 91       	pop	r16
     a4a:	08 95       	ret

00000a4c <_ZL7SetBankh>:
        SPI.write(data, len);
    }
    disableChip();
}

static void SetBank (uint8_t address) {
     a4c:	1f 93       	push	r17
     a4e:	cf 93       	push	r28
     a50:	df 93       	push	r29
     a52:	18 2f       	mov	r17, r24
     a54:	10 76       	andi	r17, 0x60	; 96
    if ((address & BANK_MASK) != Enc28j60Bank) {
     a56:	c1 2f       	mov	r28, r17
     a58:	d0 e0       	ldi	r29, 0x00	; 0
     a5a:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <_ZL12Enc28j60Bank>
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	c8 17       	cp	r28, r24
     a62:	d9 07       	cpc	r29, r25
     a64:	a1 f0       	breq	.+40     	; 0xa8e <_ZL7SetBankh+0x42>
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_BSEL1|ECON1_BSEL0);
     a66:	43 e0       	ldi	r20, 0x03	; 3
     a68:	6f e1       	ldi	r22, 0x1F	; 31
     a6a:	80 ea       	ldi	r24, 0xA0	; 160
     a6c:	b5 df       	rcall	.-150    	; 0x9d8 <_ZL7writeOphhh>
        Enc28j60Bank = address & BANK_MASK;
     a6e:	10 93 ed 02 	sts	0x02ED, r17	; 0x8002ed <_ZL12Enc28j60Bank>
        writeOp(ENC28J60_BIT_FIELD_SET, ECON1, Enc28j60Bank>>5);
     a72:	ae 01       	movw	r20, r28
     a74:	55 95       	asr	r21
     a76:	47 95       	ror	r20
     a78:	55 95       	asr	r21
     a7a:	47 95       	ror	r20
     a7c:	55 95       	asr	r21
     a7e:	47 95       	ror	r20
     a80:	55 95       	asr	r21
     a82:	47 95       	ror	r20
     a84:	55 95       	asr	r21
     a86:	47 95       	ror	r20
     a88:	6f e1       	ldi	r22, 0x1F	; 31
     a8a:	80 e8       	ldi	r24, 0x80	; 128
     a8c:	a5 df       	rcall	.-182    	; 0x9d8 <_ZL7writeOphhh>
    }
}
     a8e:	df 91       	pop	r29
     a90:	cf 91       	pop	r28
     a92:	1f 91       	pop	r17
     a94:	08 95       	ret

00000a96 <_ZL11readRegByteh>:

static uint8_t readRegByte (uint8_t address) {
     a96:	cf 93       	push	r28
     a98:	c8 2f       	mov	r28, r24
    SetBank(address);
     a9a:	d8 df       	rcall	.-80     	; 0xa4c <_ZL7SetBankh>
    return readOp(ENC28J60_READ_CTRL_REG, address);
     a9c:	6c 2f       	mov	r22, r28
     a9e:	80 e0       	ldi	r24, 0x00	; 0
     aa0:	7b df       	rcall	.-266    	; 0x998 <_ZL6readOphh>
}
     aa2:	cf 91       	pop	r28
     aa4:	08 95       	ret

00000aa6 <_ZL12writeRegBytehh>:

static void writeRegByte (uint8_t address, uint8_t data) {
     aa6:	cf 93       	push	r28
     aa8:	df 93       	push	r29
     aaa:	c8 2f       	mov	r28, r24
     aac:	d6 2f       	mov	r29, r22
    SetBank(address);
     aae:	ce df       	rcall	.-100    	; 0xa4c <_ZL7SetBankh>
    writeOp(ENC28J60_WRITE_CTRL_REG, address, data);
     ab0:	4d 2f       	mov	r20, r29
     ab2:	6c 2f       	mov	r22, r28
     ab4:	80 e4       	ldi	r24, 0x40	; 64
     ab6:	90 df       	rcall	.-224    	; 0x9d8 <_ZL7writeOphhh>
}
     ab8:	df 91       	pop	r29
     aba:	cf 91       	pop	r28
     abc:	08 95       	ret

00000abe <_ZL8writeReghj>:

static void writeReg(uint8_t address, uint16_t data) {
     abe:	cf 93       	push	r28
     ac0:	df 93       	push	r29
     ac2:	c8 2f       	mov	r28, r24
     ac4:	d7 2f       	mov	r29, r23
    writeRegByte(address, data);
     ac6:	ef df       	rcall	.-34     	; 0xaa6 <_ZL12writeRegBytehh>
    writeRegByte(address + 1, data >> 8);
     ac8:	6d 2f       	mov	r22, r29
     aca:	81 e0       	ldi	r24, 0x01	; 1
     acc:	8c 0f       	add	r24, r28
     ace:	eb df       	rcall	.-42     	; 0xaa6 <_ZL12writeRegBytehh>
}
     ad0:	df 91       	pop	r29
     ad2:	cf 91       	pop	r28
     ad4:	08 95       	ret

00000ad6 <_ZN8ENC28J607initSPIERVh>:
static void disableChip () {
	SetHigh(*selectPort, selectPin); //digitalWrite(selectPin, HIGH);
	//sei();
}

void ENC28J60::initSPI (Register& csDDR) {
     ad6:	fc 01       	movw	r30, r24

class SPI{
public:
	static void begin(uint8_t clock = SPI_CLOCK_DIV2){
		//SPI_DIR |= SS;
		SPI_DIR |= SPI_MOSI | SPI_SCK | SPI_SS; //Not sure why, but SS pin requires to be set as output even when not being used.
     ad8:	94 b1       	in	r25, 0x04	; 4
     ada:	97 60       	ori	r25, 0x07	; 7
     adc:	94 b9       	out	0x04, r25	; 4
		SPI_DIR &= ~(SPI_MISO);
     ade:	23 98       	cbi	0x04, 3	; 4
		//disableCS();

		SPSR |= (clock >> 2);
     ae0:	9d b5       	in	r25, 0x2d	; 45
     ae2:	91 60       	ori	r25, 0x01	; 1
     ae4:	9d bd       	out	0x2d, r25	; 45
		SPCR |= _BV(MSTR) | _BV(SPE) | (clock & 0x03);
     ae6:	9c b5       	in	r25, 0x2c	; 44
     ae8:	90 65       	ori	r25, 0x50	; 80
     aea:	9c bd       	out	0x2c, r25	; 44
	SPI.begin(SPI_CLOCK_DIV2);

	SetOutput(csDDR, selectPin);
     aec:	80 81       	ld	r24, Z
     aee:	90 91 ea 02 	lds	r25, 0x02EA	; 0x8002ea <_ZL9selectPin>
     af2:	98 2b       	or	r25, r24
     af4:	90 83       	st	Z, r25
	disableChip();
     af6:	46 cf       	rjmp	.-372    	; 0x984 <_ZL11disableChipv>
     af8:	08 95       	ret

00000afa <_ZN8ENC28J6010initializeEjPKhRVhS3_h>:
    writeReg(MIWR, data);
    while (readRegByte(MISTAT) & MISTAT_BUSY)
        ;
}

uint8_t ENC28J60::initialize (uint16_t size, const uint8_t* macaddr, Register& csDDR, Register& csPort, uint8_t csPin) {
     afa:	0f 93       	push	r16
     afc:	cf 93       	push	r28
     afe:	df 93       	push	r29
     b00:	eb 01       	movw	r28, r22
    bufferSize = size;
     b02:	90 93 ef 02 	sts	0x02EF, r25	; 0x8002ef <_ZN8ENC28J6010bufferSizeE+0x1>
     b06:	80 93 ee 02 	sts	0x02EE, r24	; 0x8002ee <_ZN8ENC28J6010bufferSizeE>
	selectPin = csPin;
     b0a:	00 93 ea 02 	sts	0x02EA, r16	; 0x8002ea <_ZL9selectPin>
	selectPort = &csPort;
     b0e:	30 93 ec 02 	sts	0x02EC, r19	; 0x8002ec <_ZL10selectPort+0x1>
     b12:	20 93 eb 02 	sts	0x02EB, r18	; 0x8002eb <_ZL10selectPort>
    initSPI(csDDR);
     b16:	ca 01       	movw	r24, r20
     b18:	de df       	rcall	.-68     	; 0xad6 <_ZN8ENC28J607initSPIERVh>

    writeOp(ENC28J60_SOFT_RESET, 0, ENC28J60_SOFT_RESET);
     b1a:	4f ef       	ldi	r20, 0xFF	; 255
     b1c:	60 e0       	ldi	r22, 0x00	; 0
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	5b df       	rcall	.-330    	; 0x9d8 <_ZL7writeOphhh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b22:	8f e3       	ldi	r24, 0x3F	; 63
     b24:	9f e1       	ldi	r25, 0x1F	; 31
     b26:	01 97       	sbiw	r24, 0x01	; 1
     b28:	f1 f7       	brne	.-4      	; 0xb26 <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0x2c>
     b2a:	00 c0       	rjmp	.+0      	; 0xb2c <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0x32>
     b2c:	00 00       	nop
	_delay_ms(2);
    while (!readOp(ENC28J60_READ_CTRL_REG, ESTAT) & ESTAT_CLKRDY)
     b2e:	6d e1       	ldi	r22, 0x1D	; 29
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	32 df       	rcall	.-412    	; 0x998 <_ZL6readOphh>
     b34:	88 23       	and	r24, r24
     b36:	d9 f3       	breq	.-10     	; 0xb2e <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0x34>
        ;

    writeReg(ERXST, RXSTART_INIT);
     b38:	60 e0       	ldi	r22, 0x00	; 0
     b3a:	70 e0       	ldi	r23, 0x00	; 0
     b3c:	88 e0       	ldi	r24, 0x08	; 8
     b3e:	bf df       	rcall	.-130    	; 0xabe <_ZL8writeReghj>
    writeReg(ERXRDPT, RXSTART_INIT);
     b40:	60 e0       	ldi	r22, 0x00	; 0
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	8c e0       	ldi	r24, 0x0C	; 12
     b46:	bb df       	rcall	.-138    	; 0xabe <_ZL8writeReghj>
    writeReg(ERXND, RXSTOP_INIT);
     b48:	6f ef       	ldi	r22, 0xFF	; 255
     b4a:	7b e0       	ldi	r23, 0x0B	; 11
     b4c:	8a e0       	ldi	r24, 0x0A	; 10
     b4e:	b7 df       	rcall	.-146    	; 0xabe <_ZL8writeReghj>
    writeReg(ETXST, TXSTART_INIT);
     b50:	60 e0       	ldi	r22, 0x00	; 0
     b52:	7c e0       	ldi	r23, 0x0C	; 12
     b54:	84 e0       	ldi	r24, 0x04	; 4
     b56:	b3 df       	rcall	.-154    	; 0xabe <_ZL8writeReghj>
    writeReg(ETXND, TXSTOP_INIT);
     b58:	6f ef       	ldi	r22, 0xFF	; 255
     b5a:	71 e1       	ldi	r23, 0x11	; 17
     b5c:	86 e0       	ldi	r24, 0x06	; 6
     b5e:	af df       	rcall	.-162    	; 0xabe <_ZL8writeReghj>

    writeRegByte(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN|ERXFCON_PMEN|ERXFCON_BCEN);
     b60:	61 eb       	ldi	r22, 0xB1	; 177
     b62:	88 e3       	ldi	r24, 0x38	; 56
     b64:	a0 df       	rcall	.-192    	; 0xaa6 <_ZL12writeRegBytehh>
    writeReg(EPMM0, 0x303f);
     b66:	6f e3       	ldi	r22, 0x3F	; 63
     b68:	70 e3       	ldi	r23, 0x30	; 48
     b6a:	88 e2       	ldi	r24, 0x28	; 40
     b6c:	a8 df       	rcall	.-176    	; 0xabe <_ZL8writeReghj>
    writeReg(EPMCS, 0xf7f9);
     b6e:	69 ef       	ldi	r22, 0xF9	; 249
     b70:	77 ef       	ldi	r23, 0xF7	; 247
     b72:	80 e3       	ldi	r24, 0x30	; 48
     b74:	a4 df       	rcall	.-184    	; 0xabe <_ZL8writeReghj>
    writeRegByte(MACON1, MACON1_MARXEN);
     b76:	61 e0       	ldi	r22, 0x01	; 1
     b78:	80 ec       	ldi	r24, 0xC0	; 192
     b7a:	95 df       	rcall	.-214    	; 0xaa6 <_ZL12writeRegBytehh>
    writeOp(ENC28J60_BIT_FIELD_SET, MACON3,
            MACON3_PADCFG0|MACON3_TXCRCEN|MACON3_FRMLNEN);
     b7c:	42 e3       	ldi	r20, 0x32	; 50
     b7e:	62 ec       	ldi	r22, 0xC2	; 194
     b80:	80 e8       	ldi	r24, 0x80	; 128
     b82:	2a df       	rcall	.-428    	; 0x9d8 <_ZL7writeOphhh>
    writeReg(MAIPG, 0x0C12);
     b84:	62 e1       	ldi	r22, 0x12	; 18
     b86:	7c e0       	ldi	r23, 0x0C	; 12
     b88:	86 ec       	ldi	r24, 0xC6	; 198
    writeRegByte(MABBIPG, 0x12);
     b8a:	99 df       	rcall	.-206    	; 0xabe <_ZL8writeReghj>
     b8c:	62 e1       	ldi	r22, 0x12	; 18
     b8e:	84 ec       	ldi	r24, 0xC4	; 196
    writeReg(MAMXFL, MAX_FRAMELEN);
     b90:	8a df       	rcall	.-236    	; 0xaa6 <_ZL12writeRegBytehh>
     b92:	6c ed       	ldi	r22, 0xDC	; 220
     b94:	75 e0       	ldi	r23, 0x05	; 5
    writeRegByte(MAADR5, macaddr[0]);
     b96:	8a ec       	ldi	r24, 0xCA	; 202
     b98:	92 df       	rcall	.-220    	; 0xabe <_ZL8writeReghj>
     b9a:	68 81       	ld	r22, Y
    writeRegByte(MAADR4, macaddr[1]);
     b9c:	84 ee       	ldi	r24, 0xE4	; 228
     b9e:	83 df       	rcall	.-250    	; 0xaa6 <_ZL12writeRegBytehh>
     ba0:	69 81       	ldd	r22, Y+1	; 0x01
    writeRegByte(MAADR3, macaddr[2]);
     ba2:	85 ee       	ldi	r24, 0xE5	; 229
     ba4:	80 df       	rcall	.-256    	; 0xaa6 <_ZL12writeRegBytehh>
    writeRegByte(MAADR2, macaddr[3]);
     ba6:	6a 81       	ldd	r22, Y+2	; 0x02
     ba8:	82 ee       	ldi	r24, 0xE2	; 226
     baa:	7d df       	rcall	.-262    	; 0xaa6 <_ZL12writeRegBytehh>
    writeRegByte(MAADR1, macaddr[4]);
     bac:	6b 81       	ldd	r22, Y+3	; 0x03
     bae:	83 ee       	ldi	r24, 0xE3	; 227
     bb0:	7a df       	rcall	.-268    	; 0xaa6 <_ZL12writeRegBytehh>
    writeRegByte(MAADR0, macaddr[5]);
     bb2:	6c 81       	ldd	r22, Y+4	; 0x04
     bb4:	80 ee       	ldi	r24, 0xE0	; 224
     bb6:	77 df       	rcall	.-274    	; 0xaa6 <_ZL12writeRegBytehh>
    writeRegByte(MICMD, 0x00);
    return readRegByte(MIRD+1);
}

static void writePhy (uint8_t address, uint16_t data) {
    writeRegByte(MIREGADR, address);
     bb8:	6d 81       	ldd	r22, Y+5	; 0x05
     bba:	81 ee       	ldi	r24, 0xE1	; 225
     bbc:	74 df       	rcall	.-280    	; 0xaa6 <_ZL12writeRegBytehh>
    writeReg(MIWR, data);
     bbe:	60 e1       	ldi	r22, 0x10	; 16
     bc0:	84 ed       	ldi	r24, 0xD4	; 212
     bc2:	71 df       	rcall	.-286    	; 0xaa6 <_ZL12writeRegBytehh>
     bc4:	60 e0       	ldi	r22, 0x00	; 0
     bc6:	71 e0       	ldi	r23, 0x01	; 1
    while (readRegByte(MISTAT) & MISTAT_BUSY)
     bc8:	86 ed       	ldi	r24, 0xD6	; 214
     bca:	79 df       	rcall	.-270    	; 0xabe <_ZL8writeReghj>
     bcc:	8a ee       	ldi	r24, 0xEA	; 234
     bce:	63 df       	rcall	.-314    	; 0xa96 <_ZL11readRegByteh>
     bd0:	80 fd       	sbrc	r24, 0
    writeRegByte(MAADR3, macaddr[2]);
    writeRegByte(MAADR2, macaddr[3]);
    writeRegByte(MAADR1, macaddr[4]);
    writeRegByte(MAADR0, macaddr[5]);
    writePhy(PHCON2, PHCON2_HDLDIS);
    SetBank(ECON1);
     bd2:	fc cf       	rjmp	.-8      	; 0xbcc <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0xd2>
     bd4:	8f e1       	ldi	r24, 0x1F	; 31
     bd6:	3a df       	rcall	.-396    	; 0xa4c <_ZL7SetBankh>
    writeOp(ENC28J60_BIT_FIELD_SET, EIE, EIE_INTIE|EIE_PKTIE);
     bd8:	40 ec       	ldi	r20, 0xC0	; 192
     bda:	6b e1       	ldi	r22, 0x1B	; 27
     bdc:	80 e8       	ldi	r24, 0x80	; 128
     bde:	fc de       	rcall	.-520    	; 0x9d8 <_ZL7writeOphhh>
     be0:	44 e0       	ldi	r20, 0x04	; 4
    writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN);
     be2:	6f e1       	ldi	r22, 0x1F	; 31
     be4:	80 e8       	ldi	r24, 0x80	; 128
     be6:	f8 de       	rcall	.-528    	; 0x9d8 <_ZL7writeOphhh>
     be8:	82 e7       	ldi	r24, 0x72	; 114
     bea:	55 df       	rcall	.-342    	; 0xa96 <_ZL11readRegByteh>

    uint8_t rev = readRegByte(EREVID);
     bec:	86 30       	cpi	r24, 0x06	; 6
     bee:	08 f0       	brcs	.+2      	; 0xbf2 <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0xf8>
     bf0:	8f 5f       	subi	r24, 0xFF	; 255
    // microchip forgot to step the number on the silicon when they
    // released the revision B7. 6 is now rev B7. We still have
    // to see what they do when they release B8. At the moment
    // there is no B8 out yet
    if (rev > 5) ++rev;
     bf2:	df 91       	pop	r29
     bf4:	cf 91       	pop	r28
     bf6:	0f 91       	pop	r16
    return rev;
}
     bf8:	08 95       	ret

00000bfa <_ZN8ENC28J608isLinkUpEv>:
     bfa:	61 e1       	ldi	r22, 0x11	; 17
     bfc:	84 ed       	ldi	r24, 0xD4	; 212
     bfe:	53 df       	rcall	.-346    	; 0xaa6 <_ZL12writeRegBytehh>
    writeRegByte(address + 1, data >> 8);
}

static uint16_t readPhyByte (uint8_t address) {
    writeRegByte(MIREGADR, address);
    writeRegByte(MICMD, MICMD_MIIRD);
     c00:	61 e0       	ldi	r22, 0x01	; 1
     c02:	82 ed       	ldi	r24, 0xD2	; 210
     c04:	50 df       	rcall	.-352    	; 0xaa6 <_ZL12writeRegBytehh>
    while (readRegByte(MISTAT) & MISTAT_BUSY)
     c06:	8a ee       	ldi	r24, 0xEA	; 234
     c08:	46 df       	rcall	.-372    	; 0xa96 <_ZL11readRegByteh>
     c0a:	80 fd       	sbrc	r24, 0
     c0c:	fc cf       	rjmp	.-8      	; 0xc06 <_ZN8ENC28J608isLinkUpEv+0xc>
        ;
    writeRegByte(MICMD, 0x00);
     c0e:	60 e0       	ldi	r22, 0x00	; 0
     c10:	82 ed       	ldi	r24, 0xD2	; 210
     c12:	49 df       	rcall	.-366    	; 0xaa6 <_ZL12writeRegBytehh>
    return readRegByte(MIRD+1);
     c14:	89 ed       	ldi	r24, 0xD9	; 217
     c16:	3f df       	rcall	.-386    	; 0xa96 <_ZL11readRegByteh>
     c18:	82 fb       	bst	r24, 2
    return rev;
}

bool ENC28J60::isLinkUp() {
    return (readPhyByte(PHSTAT2) >> 2) & 1;
}
     c1a:	88 27       	eor	r24, r24
     c1c:	80 f9       	bld	r24, 0
     c1e:	08 95       	ret

00000c20 <_ZN8ENC28J6010packetSendEj>:
     c20:	af 92       	push	r10

struct transmit_status_vector {
    uint8_t bytes[7];
};

void ENC28J60::packetSend(uint16_t len) {
     c22:	bf 92       	push	r11
     c24:	cf 92       	push	r12
     c26:	df 92       	push	r13
     c28:	ef 92       	push	r14
     c2a:	ff 92       	push	r15
     c2c:	0f 93       	push	r16
     c2e:	1f 93       	push	r17
     c30:	cf 93       	push	r28
     c32:	df 93       	push	r29
     c34:	7c 01       	movw	r14, r24
        writeOp(ENC28J60_BIT_FIELD_CLR, EIR, EIR_TXERIF|EIR_TXIF);

        // prepare new transmission
        if (retry == 0) {
            writeReg(EWRPT, TXSTART_INIT);
            writeReg(ETXND, TXSTART_INIT+len);
     c36:	6c 01       	movw	r12, r24
     c38:	84 ef       	ldi	r24, 0xF4	; 244
     c3a:	d8 1a       	sub	r13, r24

	static void write(const void *buf, uint16_t nbyte){
		if(nbyte == 0) return;
		
		const uint8_t* buff = (const uint8_t*)(buf);
		SPDR = *buff;
     c3c:	0f 2e       	mov	r0, r31
     c3e:	f0 ef       	ldi	r31, 0xF0	; 240
     c40:	af 2e       	mov	r10, r31
     c42:	f2 e0       	ldi	r31, 0x02	; 2
     c44:	bf 2e       	mov	r11, r31
     c46:	f0 2d       	mov	r31, r0
     c48:	87 01       	movw	r16, r14
     c4a:	00 51       	subi	r16, 0x10	; 16
     c4c:	1d 4f       	sbci	r17, 0xFD	; 253
        // the Microchip TCP/IP stack implementation used to first check
        // whether TXERIF is set and only then reset the transmit logic
        // but this has been changed in later versions; possibly they
        // have a reason for this; they don't mention this in the errata
        // sheet
        writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRST);
     c4e:	40 e8       	ldi	r20, 0x80	; 128
     c50:	6f e1       	ldi	r22, 0x1F	; 31
     c52:	80 e8       	ldi	r24, 0x80	; 128
     c54:	c1 de       	rcall	.-638    	; 0x9d8 <_ZL7writeOphhh>
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRST);
     c56:	40 e8       	ldi	r20, 0x80	; 128
     c58:	6f e1       	ldi	r22, 0x1F	; 31
     c5a:	80 ea       	ldi	r24, 0xA0	; 160
     c5c:	bd de       	rcall	.-646    	; 0x9d8 <_ZL7writeOphhh>
        writeOp(ENC28J60_BIT_FIELD_CLR, EIR, EIR_TXERIF|EIR_TXIF);
     c5e:	4a e0       	ldi	r20, 0x0A	; 10
     c60:	6c e1       	ldi	r22, 0x1C	; 28
     c62:	80 ea       	ldi	r24, 0xA0	; 160
     c64:	b9 de       	rcall	.-654    	; 0x9d8 <_ZL7writeOphhh>

        // prepare new transmission
        if (retry == 0) {
            writeReg(EWRPT, TXSTART_INIT);
     c66:	60 e0       	ldi	r22, 0x00	; 0
     c68:	7c e0       	ldi	r23, 0x0C	; 12
     c6a:	82 e0       	ldi	r24, 0x02	; 2
            writeReg(ETXND, TXSTART_INIT+len);
     c6c:	28 df       	rcall	.-432    	; 0xabe <_ZL8writeReghj>
     c6e:	b6 01       	movw	r22, r12
     c70:	86 e0       	ldi	r24, 0x06	; 6
            writeOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
     c72:	25 df       	rcall	.-438    	; 0xabe <_ZL8writeReghj>
     c74:	40 e0       	ldi	r20, 0x00	; 0
     c76:	60 e0       	ldi	r22, 0x00	; 0
     c78:	8a e7       	ldi	r24, 0x7A	; 122
     c7a:	ae de       	rcall	.-676    	; 0x9d8 <_ZL7writeOphhh>
    }
    disableChip();
}

static void writeBuf(uint16_t len, const uint8_t* data) {
    enableChip();
     c7c:	78 de       	rcall	.-784    	; 0x96e <_ZL10enableChipv>
     c7e:	e1 14       	cp	r14, r1
    if (len != 0) {
     c80:	f1 04       	cpc	r15, r1
     c82:	e1 f0       	breq	.+56     	; 0xcbc <_ZN8ENC28J6010packetSendEj+0x9c>
     c84:	8a e7       	ldi	r24, 0x7A	; 122
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     c86:	8e bd       	out	0x2e, r24	; 46
     c88:	00 00       	nop
		asm volatile("nop");
     c8a:	0d b4       	in	r0, 0x2d	; 45
		while(!(SPSR & _BV(SPIF)));
     c8c:	07 fe       	sbrs	r0, 7
     c8e:	fd cf       	rjmp	.-6      	; 0xc8a <_ZN8ENC28J6010packetSendEj+0x6a>
     c90:	f5 01       	movw	r30, r10

	static void write(const void *buf, uint16_t nbyte){
		if(nbyte == 0) return;
		
		const uint8_t* buff = (const uint8_t*)(buf);
		SPDR = *buff;
     c92:	80 81       	ld	r24, Z
     c94:	8e bd       	out	0x2e, r24	; 46
     c96:	f1 e0       	ldi	r31, 0x01	; 1
		while(--nbyte){
     c98:	ef 16       	cp	r14, r31
     c9a:	f1 04       	cpc	r15, r1
     c9c:	59 f0       	breq	.+22     	; 0xcb4 <_ZN8ENC28J6010packetSendEj+0x94>
     c9e:	e1 ef       	ldi	r30, 0xF1	; 241
     ca0:	f2 e0       	ldi	r31, 0x02	; 2
     ca2:	00 00       	nop
			asm volatile("nop");
     ca4:	0d b4       	in	r0, 0x2d	; 45
			while (!(SPSR & _BV(SPIF))) ;
     ca6:	07 fe       	sbrs	r0, 7
     ca8:	fd cf       	rjmp	.-6      	; 0xca4 <_ZN8ENC28J6010packetSendEj+0x84>
     caa:	81 91       	ld	r24, Z+
			SPDR = *++buff;
     cac:	8e bd       	out	0x2e, r24	; 46
     cae:	e0 17       	cp	r30, r16
	static void write(const void *buf, uint16_t nbyte){
		if(nbyte == 0) return;
		
		const uint8_t* buff = (const uint8_t*)(buf);
		SPDR = *buff;
		while(--nbyte){
     cb0:	f1 07       	cpc	r31, r17
     cb2:	b9 f7       	brne	.-18     	; 0xca2 <_ZN8ENC28J6010packetSendEj+0x82>
			asm volatile("nop");
			while (!(SPSR & _BV(SPIF))) ;
			SPDR = *++buff;
		}
		asm volatile("nop");
     cb4:	00 00       	nop
		while (!(SPSR & _BV(SPIF))) ;
     cb6:	0d b4       	in	r0, 0x2d	; 45
     cb8:	07 fe       	sbrs	r0, 7
        SPI.write8(ENC28J60_WRITE_BUF_MEM);

        SPI.write(data, len);
    }
    disableChip();
     cba:	fd cf       	rjmp	.-6      	; 0xcb6 <_ZN8ENC28J6010packetSendEj+0x96>
            writeOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
            writeBuf(len, buffer);
        }

        // initiate transmission
        writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
     cbc:	63 de       	rcall	.-826    	; 0x984 <_ZL11disableChipv>
     cbe:	48 e0       	ldi	r20, 0x08	; 8
     cc0:	6f e1       	ldi	r22, 0x1F	; 31
     cc2:	80 e8       	ldi	r24, 0x80	; 128
     cc4:	89 de       	rcall	.-750    	; 0x9d8 <_ZL7writeOphhh>
        // wait until transmission has finished; referring to the data sheet and
        // to the errata (Errata Issue 13; Example 1) you only need to wait until either
        // TXIF or TXERIF gets set; however this leads to hangs; apparently Microchip
        // realized this and in later implementations of their tcp/ip stack they introduced
        // a counter to avoid hangs; of course they didn't update the errata sheet
        uint16_t count = 0;
     cc6:	c0 e0       	ldi	r28, 0x00	; 0
     cc8:	d0 e0       	ldi	r29, 0x00	; 0
        while ((readRegByte(EIR) & (EIR_TXIF | EIR_TXERIF)) == 0 && ++count < 1000U)
     cca:	8c e1       	ldi	r24, 0x1C	; 28
     ccc:	e4 de       	rcall	.-568    	; 0xa96 <_ZL11readRegByteh>
     cce:	8a 70       	andi	r24, 0x0A	; 10
     cd0:	31 f4       	brne	.+12     	; 0xcde <_ZN8ENC28J6010packetSendEj+0xbe>
     cd2:	21 96       	adiw	r28, 0x01	; 1
     cd4:	c8 3e       	cpi	r28, 0xE8	; 232
     cd6:	83 e0       	ldi	r24, 0x03	; 3
     cd8:	d8 07       	cpc	r29, r24
     cda:	b9 f7       	brne	.-18     	; 0xcca <_ZN8ENC28J6010packetSendEj+0xaa>
     cdc:	0c c0       	rjmp	.+24     	; 0xcf6 <_ZN8ENC28J6010packetSendEj+0xd6>
            ;

        if (!(readRegByte(EIR) & EIR_TXERIF) && count < 1000U) {
     cde:	8c e1       	ldi	r24, 0x1C	; 28
     ce0:	da de       	rcall	.-588    	; 0xa96 <_ZL11readRegByteh>
     ce2:	81 fd       	sbrc	r24, 1
     ce4:	03 c0       	rjmp	.+6      	; 0xcec <_ZN8ENC28J6010packetSendEj+0xcc>
     ce6:	c8 3e       	cpi	r28, 0xE8	; 232
     ce8:	d3 40       	sbci	r29, 0x03	; 3
            // no error; start new transmission
            break;
        }

        // cancel previous transmission if stuck
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRTS);
     cea:	40 f0       	brcs	.+16     	; 0xcfc <_ZN8ENC28J6010packetSendEj+0xdc>
     cec:	48 e0       	ldi	r20, 0x08	; 8
     cee:	6f e1       	ldi	r22, 0x1F	; 31
     cf0:	80 ea       	ldi	r24, 0xA0	; 160
     cf2:	72 de       	rcall	.-796    	; 0x9d8 <_ZL7writeOphhh>
};

void ENC28J60::packetSend(uint16_t len) {
    uint8_t retry = 0;

    while (1) {
     cf4:	ac cf       	rjmp	.-168    	; 0xc4e <_ZN8ENC28J6010packetSendEj+0x2e>
        // a counter to avoid hangs; of course they didn't update the errata sheet
        uint16_t count = 0;
        while ((readRegByte(EIR) & (EIR_TXIF | EIR_TXERIF)) == 0 && ++count < 1000U)
            ;

        if (!(readRegByte(EIR) & EIR_TXERIF) && count < 1000U) {
     cf6:	8c e1       	ldi	r24, 0x1C	; 28
     cf8:	ce de       	rcall	.-612    	; 0xa96 <_ZL11readRegByteh>
     cfa:	f8 cf       	rjmp	.-16     	; 0xcec <_ZN8ENC28J6010packetSendEj+0xcc>
     cfc:	df 91       	pop	r29
        }

        // cancel previous transmission if stuck
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRTS);
    }
}
     cfe:	cf 91       	pop	r28
     d00:	1f 91       	pop	r17
     d02:	0f 91       	pop	r16
     d04:	ff 90       	pop	r15
     d06:	ef 90       	pop	r14
     d08:	df 90       	pop	r13
     d0a:	cf 90       	pop	r12
     d0c:	bf 90       	pop	r11
     d0e:	af 90       	pop	r10
     d10:	08 95       	ret

00000d12 <_ZN8ENC28J6013packetReceiveEv>:
     d12:	0f 93       	push	r16


uint16_t ENC28J60::packetReceive() {
     d14:	1f 93       	push	r17
     d16:	cf 93       	push	r28
     d18:	df 93       	push	r29
     d1a:	00 d0       	rcall	.+0      	; 0xd1c <_ZN8ENC28J6013packetReceiveEv+0xa>
     d1c:	00 d0       	rcall	.+0      	; 0xd1e <_ZN8ENC28J6013packetReceiveEv+0xc>
     d1e:	cd b7       	in	r28, 0x3d	; 61
     d20:	de b7       	in	r29, 0x3e	; 62
    static uint16_t gNextPacketPtr = RXSTART_INIT;
    static bool     unreleasedPacket = false;
    uint16_t len = 0;

    if (unreleasedPacket) {
     d22:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <_ZZN8ENC28J6013packetReceiveEvE16unreleasedPacket>
     d26:	88 23       	and	r24, r24
     d28:	91 f0       	breq	.+36     	; 0xd4e <_ZN8ENC28J6013packetReceiveEv+0x3c>
        if (gNextPacketPtr == 0)
     d2a:	60 91 e7 02 	lds	r22, 0x02E7	; 0x8002e7 <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr>
     d2e:	70 91 e8 02 	lds	r23, 0x02E8	; 0x8002e8 <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr+0x1>
     d32:	61 15       	cp	r22, r1
     d34:	71 05       	cpc	r23, r1
     d36:	29 f4       	brne	.+10     	; 0xd42 <_ZN8ENC28J6013packetReceiveEv+0x30>
            writeReg(ERXRDPT, RXSTOP_INIT);
     d38:	6f ef       	ldi	r22, 0xFF	; 255
     d3a:	7b e0       	ldi	r23, 0x0B	; 11
     d3c:	8c e0       	ldi	r24, 0x0C	; 12
     d3e:	bf de       	rcall	.-642    	; 0xabe <_ZL8writeReghj>
     d40:	04 c0       	rjmp	.+8      	; 0xd4a <_ZN8ENC28J6013packetReceiveEv+0x38>
        else
            writeReg(ERXRDPT, gNextPacketPtr - 1);
     d42:	61 50       	subi	r22, 0x01	; 1
     d44:	71 09       	sbc	r23, r1
     d46:	8c e0       	ldi	r24, 0x0C	; 12
     d48:	ba de       	rcall	.-652    	; 0xabe <_ZL8writeReghj>
        unreleasedPacket = false;
     d4a:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <_ZZN8ENC28J6013packetReceiveEvE16unreleasedPacket>
    }

    if (readRegByte(EPKTCNT) > 0) {
     d4e:	89 e3       	ldi	r24, 0x39	; 57
     d50:	a2 de       	rcall	.-700    	; 0xa96 <_ZL11readRegByteh>
     d52:	88 23       	and	r24, r24
     d54:	a9 f1       	breq	.+106    	; 0xdc0 <_ZN8ENC28J6013packetReceiveEv+0xae>
        writeReg(ERDPT, gNextPacketPtr);
     d56:	60 91 e7 02 	lds	r22, 0x02E7	; 0x8002e7 <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr>
     d5a:	70 91 e8 02 	lds	r23, 0x02E8	; 0x8002e8 <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr+0x1>
     d5e:	80 e0       	ldi	r24, 0x00	; 0
     d60:	ae de       	rcall	.-676    	; 0xabe <_ZL8writeReghj>
            uint16_t nextPacket;
            uint16_t byteCount;
            uint16_t status;
        } header;

        readBuf(sizeof header, (uint8_t*) &header);
     d62:	be 01       	movw	r22, r28
     d64:	6f 5f       	subi	r22, 0xFF	; 255
     d66:	7f 4f       	sbci	r23, 0xFF	; 255
     d68:	86 e0       	ldi	r24, 0x06	; 6
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	4d de       	rcall	.-870    	; 0xa08 <_ZL7readBufjPh>

        gNextPacketPtr  = header.nextPacket;
     d6e:	89 81       	ldd	r24, Y+1	; 0x01
     d70:	9a 81       	ldd	r25, Y+2	; 0x02
     d72:	90 93 e8 02 	sts	0x02E8, r25	; 0x8002e8 <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr+0x1>
     d76:	80 93 e7 02 	sts	0x02E7, r24	; 0x8002e7 <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr>
        len = header.byteCount - 4; //remove the CRC count
        if (len>bufferSize-1)
            len=bufferSize-1;
        if ((header.status & 0x80)==0)
     d7a:	8d 81       	ldd	r24, Y+5	; 0x05
     d7c:	87 ff       	sbrs	r24, 7
     d7e:	12 c0       	rjmp	.+36     	; 0xda4 <_ZN8ENC28J6013packetReceiveEv+0x92>

        readBuf(sizeof header, (uint8_t*) &header);

        gNextPacketPtr  = header.nextPacket;
        len = header.byteCount - 4; //remove the CRC count
        if (len>bufferSize-1)
     d80:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <_ZN8ENC28J6010bufferSizeE>
     d84:	90 91 ef 02 	lds	r25, 0x02EF	; 0x8002ef <_ZN8ENC28J6010bufferSizeE+0x1>
     d88:	01 97       	sbiw	r24, 0x01	; 1
        } header;

        readBuf(sizeof header, (uint8_t*) &header);

        gNextPacketPtr  = header.nextPacket;
        len = header.byteCount - 4; //remove the CRC count
     d8a:	0b 81       	ldd	r16, Y+3	; 0x03
     d8c:	1c 81       	ldd	r17, Y+4	; 0x04
     d8e:	04 50       	subi	r16, 0x04	; 4
     d90:	11 09       	sbc	r17, r1
     d92:	80 17       	cp	r24, r16
     d94:	91 07       	cpc	r25, r17
     d96:	08 f4       	brcc	.+2      	; 0xd9a <_ZN8ENC28J6013packetReceiveEv+0x88>
        if (len>bufferSize-1)
            len=bufferSize-1;
        if ((header.status & 0x80)==0)
            len = 0;
        else
            readBuf(len, buffer);
     d98:	8c 01       	movw	r16, r24
     d9a:	60 ef       	ldi	r22, 0xF0	; 240
     d9c:	72 e0       	ldi	r23, 0x02	; 2
     d9e:	c8 01       	movw	r24, r16
     da0:	33 de       	rcall	.-922    	; 0xa08 <_ZL7readBufjPh>
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <_ZN8ENC28J6013packetReceiveEv+0x96>
        gNextPacketPtr  = header.nextPacket;
        len = header.byteCount - 4; //remove the CRC count
        if (len>bufferSize-1)
            len=bufferSize-1;
        if ((header.status & 0x80)==0)
            len = 0;
     da4:	00 e0       	ldi	r16, 0x00	; 0
     da6:	10 e0       	ldi	r17, 0x00	; 0
        else
            readBuf(len, buffer);
        buffer[len] = 0;
     da8:	f8 01       	movw	r30, r16
     daa:	e0 51       	subi	r30, 0x10	; 16
     dac:	fd 4f       	sbci	r31, 0xFD	; 253
     dae:	10 82       	st	Z, r1
        unreleasedPacket = true;
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <_ZZN8ENC28J6013packetReceiveEvE16unreleasedPacket>

        writeOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
     db6:	40 e4       	ldi	r20, 0x40	; 64
     db8:	6e e1       	ldi	r22, 0x1E	; 30
     dba:	80 e8       	ldi	r24, 0x80	; 128
     dbc:	0d de       	rcall	.-998    	; 0x9d8 <_ZL7writeOphhh>
     dbe:	02 c0       	rjmp	.+4      	; 0xdc4 <_ZN8ENC28J6013packetReceiveEv+0xb2>


uint16_t ENC28J60::packetReceive() {
    static uint16_t gNextPacketPtr = RXSTART_INIT;
    static bool     unreleasedPacket = false;
    uint16_t len = 0;
     dc0:	00 e0       	ldi	r16, 0x00	; 0
     dc2:	10 e0       	ldi	r17, 0x00	; 0
        unreleasedPacket = true;

        writeOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
    }
    return len;
}
     dc4:	c8 01       	movw	r24, r16
     dc6:	26 96       	adiw	r28, 0x06	; 6
     dc8:	0f b6       	in	r0, 0x3f	; 63
     dca:	f8 94       	cli
     dcc:	de bf       	out	0x3e, r29	; 62
     dce:	0f be       	out	0x3f, r0	; 63
     dd0:	cd bf       	out	0x3d, r28	; 61
     dd2:	df 91       	pop	r29
     dd4:	cf 91       	pop	r28
     dd6:	1f 91       	pop	r17
     dd8:	0f 91       	pop	r16
     dda:	08 95       	ret

00000ddc <_ZN9EtherCard5beginEPKhRVhS3_h>:
uint16_t EtherCard::delaycnt = 0; //request gateway ARP lookup

uint8_t Ethernet::buffer[ETHER_CARD_BUFFER_SIZE]; // tcp/ip send and receive buffer

uint8_t EtherCard::begin (const uint8_t* macaddr,
                          Register& csDDR, Register& csPort, uint8_t csPin) {
     ddc:	ef 92       	push	r14
     dde:	ff 92       	push	r15
     de0:	0f 93       	push	r16
     de2:	cf 93       	push	r28
     de4:	df 93       	push	r29
     de6:	eb 01       	movw	r28, r22
     de8:	7a 01       	movw	r14, r20
     dea:	02 2f       	mov	r16, r18

    copyMac(mymac, macaddr);
     dec:	bc 01       	movw	r22, r24
     dee:	8a e0       	ldi	r24, 0x0A	; 10
     df0:	95 e0       	ldi	r25, 0x05	; 5
     df2:	c9 d3       	rcall	.+1938   	; 0x1586 <_ZN9EtherCard7copyMacEPhPKh>
    return initialize(ETHER_CARD_BUFFER_SIZE, mymac, csDDR, csPort, csPin);
     df4:	97 01       	movw	r18, r14
     df6:	ae 01       	movw	r20, r28
     df8:	6a e0       	ldi	r22, 0x0A	; 10
     dfa:	75 e0       	ldi	r23, 0x05	; 5
     dfc:	80 e0       	ldi	r24, 0x00	; 0
     dfe:	92 e0       	ldi	r25, 0x02	; 2
     e00:	7c de       	rcall	.-776    	; 0xafa <_ZN8ENC28J6010initializeEjPKhRVhS3_h>
}
     e02:	df 91       	pop	r29
     e04:	cf 91       	pop	r28
     e06:	0f 91       	pop	r16
     e08:	ff 90       	pop	r15
     e0a:	ef 90       	pop	r14
     e0c:	08 95       	ret

00000e0e <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_>:

bool EtherCard::staticSetup (const uint8_t* my_ip,
                             const uint8_t* gw_ip,
                             const uint8_t* dns_ip,
                             const uint8_t* mask) {
     e0e:	ef 92       	push	r14
     e10:	ff 92       	push	r15
     e12:	0f 93       	push	r16
     e14:	1f 93       	push	r17
     e16:	cf 93       	push	r28
     e18:	df 93       	push	r29
     e1a:	7b 01       	movw	r14, r22
     e1c:	8a 01       	movw	r16, r20
     e1e:	e9 01       	movw	r28, r18

    if (my_ip != 0)
     e20:	00 97       	sbiw	r24, 0x00	; 0
     e22:	21 f0       	breq	.+8      	; 0xe2c <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x1e>
        copyIp(myip, my_ip);
     e24:	bc 01       	movw	r22, r24
     e26:	86 e0       	ldi	r24, 0x06	; 6
     e28:	95 e0       	ldi	r25, 0x05	; 5
     e2a:	a0 d3       	rcall	.+1856   	; 0x156c <_ZN9EtherCard6copyIpEPhPKh>
    if (gw_ip != 0)
     e2c:	e1 14       	cp	r14, r1
     e2e:	f1 04       	cpc	r15, r1
     e30:	11 f0       	breq	.+4      	; 0xe36 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x28>
        setGwIp(gw_ip);
     e32:	c7 01       	movw	r24, r14
     e34:	bd d1       	rcall	.+890    	; 0x11b0 <_ZN9EtherCard7setGwIpEPKh>
    if (dns_ip != 0)
     e36:	01 15       	cp	r16, r1
     e38:	11 05       	cpc	r17, r1
     e3a:	21 f0       	breq	.+8      	; 0xe44 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x36>
        copyIp(dnsip, dns_ip);
     e3c:	b8 01       	movw	r22, r16
     e3e:	86 ef       	ldi	r24, 0xF6	; 246
     e40:	94 e0       	ldi	r25, 0x04	; 4
     e42:	94 d3       	rcall	.+1832   	; 0x156c <_ZN9EtherCard6copyIpEPhPKh>
    if(mask != 0)
     e44:	20 97       	sbiw	r28, 0x00	; 0
     e46:	21 f0       	breq	.+8      	; 0xe50 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x42>
        copyIp(netmask, mask);
     e48:	be 01       	movw	r22, r28
     e4a:	82 e0       	ldi	r24, 0x02	; 2
     e4c:	95 e0       	ldi	r25, 0x05	; 5
    updateBroadcastAddress();
     e4e:	8e d3       	rcall	.+1820   	; 0x156c <_ZN9EtherCard6copyIpEPhPKh>
     e50:	bb d1       	rcall	.+886    	; 0x11c8 <_ZN9EtherCard22updateBroadcastAddressEv>
    delaycnt = 0; //request gateway ARP lookup
     e52:	10 92 f1 04 	sts	0x04F1, r1	; 0x8004f1 <_ZN9EtherCard8delaycntE+0x1>
     e56:	10 92 f0 04 	sts	0x04F0, r1	; 0x8004f0 <_ZN9EtherCard8delaycntE>
    return true;
}
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	df 91       	pop	r29
     e5e:	cf 91       	pop	r28
     e60:	1f 91       	pop	r17
     e62:	0f 91       	pop	r16
     e64:	ff 90       	pop	r15
     e66:	ef 90       	pop	r14
     e68:	08 95       	ret

00000e6a <_ZL13fill_checksumhhjh>:
    for(uint8_t i=0; i<IP_LEN; i++)
        broadcastip[i] = myip[i] | ~netmask[i];
}

void EtherCard::registerPingCallback (void (*callback)(uint8_t *srcip)) {
    icmp_cb = callback;
     e6a:	cf 92       	push	r12
     e6c:	df 92       	push	r13
     e6e:	ef 92       	push	r14
     e70:	ff 92       	push	r15
     e72:	cf 93       	push	r28
     e74:	df 93       	push	r29
     e76:	c6 2f       	mov	r28, r22
     e78:	d0 e0       	ldi	r29, 0x00	; 0
     e7a:	c0 51       	subi	r28, 0x10	; 16
     e7c:	dd 4f       	sbci	r29, 0xFD	; 253
     e7e:	21 30       	cpi	r18, 0x01	; 1
     e80:	81 f4       	brne	.+32     	; 0xea2 <_ZL13fill_checksumhhjh+0x38>
     e82:	6a 01       	movw	r12, r20
     e84:	99 e0       	ldi	r25, 0x09	; 9
     e86:	c9 0e       	add	r12, r25
     e88:	d1 1c       	adc	r13, r1
     e8a:	e1 2c       	mov	r14, r1
     e8c:	f1 2c       	mov	r15, r1
     e8e:	03 c0       	rjmp	.+6      	; 0xe96 <_ZL13fill_checksumhhjh+0x2c>
     e90:	c1 2c       	mov	r12, r1
     e92:	d1 2c       	mov	r13, r1
     e94:	76 01       	movw	r14, r12
     e96:	42 30       	cpi	r20, 0x02	; 2
     e98:	51 05       	cpc	r21, r1
     e9a:	28 f1       	brcs	.+74     	; 0xee6 <_ZL13fill_checksumhhjh+0x7c>
     e9c:	fe 01       	movw	r30, r28
     e9e:	da 01       	movw	r26, r20
     ea0:	09 c0       	rjmp	.+18     	; 0xeb4 <_ZL13fill_checksumhhjh+0x4a>
     ea2:	22 30       	cpi	r18, 0x02	; 2
     ea4:	a9 f7       	brne	.-22     	; 0xe90 <_ZL13fill_checksumhhjh+0x26>
     ea6:	6a 01       	movw	r12, r20
     ea8:	92 e0       	ldi	r25, 0x02	; 2
     eaa:	c9 1a       	sub	r12, r25
     eac:	d1 08       	sbc	r13, r1
     eae:	e1 2c       	mov	r14, r1
     eb0:	f1 2c       	mov	r15, r1
     eb2:	f1 cf       	rjmp	.-30     	; 0xe96 <_ZL13fill_checksumhhjh+0x2c>
     eb4:	20 81       	ld	r18, Z
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	32 2f       	mov	r19, r18
     eba:	22 27       	eor	r18, r18
     ebc:	91 81       	ldd	r25, Z+1	; 0x01
     ebe:	29 2b       	or	r18, r25
     ec0:	c2 0e       	add	r12, r18
     ec2:	d3 1e       	adc	r13, r19
     ec4:	e1 1c       	adc	r14, r1
     ec6:	f1 1c       	adc	r15, r1
     ec8:	32 96       	adiw	r30, 0x02	; 2
     eca:	12 97       	sbiw	r26, 0x02	; 2
     ecc:	a2 30       	cpi	r26, 0x02	; 2
     ece:	b1 05       	cpc	r27, r1
     ed0:	88 f7       	brcc	.-30     	; 0xeb4 <_ZL13fill_checksumhhjh+0x4a>
     ed2:	9a 01       	movw	r18, r20
     ed4:	22 50       	subi	r18, 0x02	; 2
     ed6:	31 09       	sbc	r19, r1
     ed8:	2e 7f       	andi	r18, 0xFE	; 254
     eda:	2e 5f       	subi	r18, 0xFE	; 254
     edc:	3f 4f       	sbci	r19, 0xFF	; 255
     ede:	c2 0f       	add	r28, r18
     ee0:	d3 1f       	adc	r29, r19
     ee2:	41 70       	andi	r20, 0x01	; 1
     ee4:	55 27       	eor	r21, r21
     ee6:	45 2b       	or	r20, r21
     ee8:	61 f0       	breq	.+24     	; 0xf02 <_ZL13fill_checksumhhjh+0x98>
     eea:	48 81       	ld	r20, Y
     eec:	50 e0       	ldi	r21, 0x00	; 0
     eee:	60 e0       	ldi	r22, 0x00	; 0
     ef0:	70 e0       	ldi	r23, 0x00	; 0
     ef2:	76 2f       	mov	r23, r22
     ef4:	65 2f       	mov	r22, r21
     ef6:	54 2f       	mov	r21, r20
     ef8:	44 27       	eor	r20, r20
     efa:	c4 0e       	add	r12, r20
     efc:	d5 1e       	adc	r13, r21
     efe:	e6 1e       	adc	r14, r22
     f00:	f7 1e       	adc	r15, r23
     f02:	a7 01       	movw	r20, r14
     f04:	66 27       	eor	r22, r22
     f06:	77 27       	eor	r23, r23
     f08:	41 15       	cp	r20, r1
     f0a:	51 05       	cpc	r21, r1
     f0c:	61 05       	cpc	r22, r1
     f0e:	71 05       	cpc	r23, r1
     f10:	71 f0       	breq	.+28     	; 0xf2e <_ZL13fill_checksumhhjh+0xc4>
     f12:	ee 24       	eor	r14, r14
     f14:	ff 24       	eor	r15, r15
     f16:	c4 0e       	add	r12, r20
     f18:	d5 1e       	adc	r13, r21
     f1a:	e6 1e       	adc	r14, r22
     f1c:	f7 1e       	adc	r15, r23
     f1e:	a7 01       	movw	r20, r14
     f20:	66 27       	eor	r22, r22
     f22:	77 27       	eor	r23, r23
     f24:	41 15       	cp	r20, r1
     f26:	51 05       	cpc	r21, r1
     f28:	61 05       	cpc	r22, r1
     f2a:	71 05       	cpc	r23, r1
     f2c:	91 f7       	brne	.-28     	; 0xf12 <_ZL13fill_checksumhhjh+0xa8>
     f2e:	c0 94       	com	r12
     f30:	d0 94       	com	r13
     f32:	e8 2f       	mov	r30, r24
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	e0 51       	subi	r30, 0x10	; 16
     f38:	fd 4f       	sbci	r31, 0xFD	; 253
     f3a:	d0 82       	st	Z, r13
     f3c:	c1 82       	std	Z+1, r12	; 0x01
     f3e:	df 91       	pop	r29
     f40:	cf 91       	pop	r28
     f42:	ff 90       	pop	r15
     f44:	ef 90       	pop	r14
     f46:	df 90       	pop	r13
     f48:	cf 90       	pop	r12
     f4a:	08 95       	ret

00000f4c <_ZL6is_lanPKhS0_>:
     f4c:	cf 93       	push	r28
     f4e:	df 93       	push	r29
     f50:	fc 01       	movw	r30, r24
     f52:	20 81       	ld	r18, Z
     f54:	22 23       	and	r18, r18
     f56:	d1 f0       	breq	.+52     	; 0xf8c <_ZL6is_lanPKhS0_+0x40>
     f58:	fb 01       	movw	r30, r22
     f5a:	30 81       	ld	r19, Z
     f5c:	33 23       	and	r19, r19
     f5e:	c1 f0       	breq	.+48     	; 0xf90 <_ZL6is_lanPKhS0_+0x44>
     f60:	23 27       	eor	r18, r19
     f62:	30 91 02 05 	lds	r19, 0x0502	; 0x800502 <_ZN9EtherCard7netmaskE>
     f66:	23 23       	and	r18, r19
     f68:	a9 f4       	brne	.+42     	; 0xf94 <_ZL6is_lanPKhS0_+0x48>
     f6a:	dc 01       	movw	r26, r24
     f6c:	11 96       	adiw	r26, 0x01	; 1
     f6e:	31 96       	adiw	r30, 0x01	; 1
     f70:	c3 e0       	ldi	r28, 0x03	; 3
     f72:	d5 e0       	ldi	r29, 0x05	; 5
     f74:	04 96       	adiw	r24, 0x04	; 4
     f76:	4d 91       	ld	r20, X+
     f78:	21 91       	ld	r18, Z+
     f7a:	39 91       	ld	r19, Y+
     f7c:	24 27       	eor	r18, r20
     f7e:	23 23       	and	r18, r19
     f80:	59 f4       	brne	.+22     	; 0xf98 <_ZL6is_lanPKhS0_+0x4c>
     f82:	a8 17       	cp	r26, r24
     f84:	b9 07       	cpc	r27, r25
     f86:	b9 f7       	brne	.-18     	; 0xf76 <_ZL6is_lanPKhS0_+0x2a>
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	07 c0       	rjmp	.+14     	; 0xf9a <_ZL6is_lanPKhS0_+0x4e>
     f8c:	80 e0       	ldi	r24, 0x00	; 0
     f8e:	05 c0       	rjmp	.+10     	; 0xf9a <_ZL6is_lanPKhS0_+0x4e>
     f90:	80 e0       	ldi	r24, 0x00	; 0
     f92:	03 c0       	rjmp	.+6      	; 0xf9a <_ZL6is_lanPKhS0_+0x4e>
     f94:	80 e0       	ldi	r24, 0x00	; 0
     f96:	01 c0       	rjmp	.+2      	; 0xf9a <_ZL6is_lanPKhS0_+0x4e>
     f98:	80 e0       	ldi	r24, 0x00	; 0
     f9a:	df 91       	pop	r29
     f9c:	cf 91       	pop	r28
     f9e:	08 95       	ret

00000fa0 <_ZL20fill_ip_hdr_checksumv>:
     fa0:	e0 ef       	ldi	r30, 0xF0	; 240
     fa2:	f2 e0       	ldi	r31, 0x02	; 2
     fa4:	10 8e       	std	Z+24, r1	; 0x18
     fa6:	11 8e       	std	Z+25, r1	; 0x19
     fa8:	80 e4       	ldi	r24, 0x40	; 64
     faa:	84 8b       	std	Z+20, r24	; 0x14
     fac:	15 8a       	std	Z+21, r1	; 0x15
     fae:	86 8b       	std	Z+22, r24	; 0x16
     fb0:	20 e0       	ldi	r18, 0x00	; 0
     fb2:	44 e1       	ldi	r20, 0x14	; 20
     fb4:	50 e0       	ldi	r21, 0x00	; 0
     fb6:	6e e0       	ldi	r22, 0x0E	; 14
     fb8:	88 e1       	ldi	r24, 0x18	; 24
     fba:	57 cf       	rjmp	.-338    	; 0xe6a <_ZL13fill_checksumhhjh>
     fbc:	08 95       	ret

00000fbe <_ZL7setMACsPKh>:
     fbe:	bc 01       	movw	r22, r24
     fc0:	80 ef       	ldi	r24, 0xF0	; 240
     fc2:	92 e0       	ldi	r25, 0x02	; 2
     fc4:	e0 d2       	rcall	.+1472   	; 0x1586 <_ZN9EtherCard7copyMacEPhPKh>
     fc6:	6a e0       	ldi	r22, 0x0A	; 10
     fc8:	75 e0       	ldi	r23, 0x05	; 5
     fca:	86 ef       	ldi	r24, 0xF6	; 246
     fcc:	92 e0       	ldi	r25, 0x02	; 2
     fce:	db c2       	rjmp	.+1462   	; 0x1586 <_ZN9EtherCard7copyMacEPhPKh>
     fd0:	08 95       	ret

00000fd2 <_ZL11make_eth_ipv>:
     fd2:	86 ef       	ldi	r24, 0xF6	; 246
     fd4:	92 e0       	ldi	r25, 0x02	; 2
     fd6:	f3 df       	rcall	.-26     	; 0xfbe <_ZL7setMACsPKh>
     fd8:	6a e0       	ldi	r22, 0x0A	; 10
     fda:	73 e0       	ldi	r23, 0x03	; 3
     fdc:	8e e0       	ldi	r24, 0x0E	; 14
     fde:	93 e0       	ldi	r25, 0x03	; 3
     fe0:	c5 d2       	rcall	.+1418   	; 0x156c <_ZN9EtherCard6copyIpEPhPKh>
     fe2:	66 e0       	ldi	r22, 0x06	; 6
     fe4:	75 e0       	ldi	r23, 0x05	; 5
     fe6:	8a e0       	ldi	r24, 0x0A	; 10
     fe8:	93 e0       	ldi	r25, 0x03	; 3
     fea:	c0 d2       	rcall	.+1408   	; 0x156c <_ZN9EtherCard6copyIpEPhPKh>
     fec:	d9 cf       	rjmp	.-78     	; 0xfa0 <_ZL20fill_ip_hdr_checksumv>
     fee:	08 95       	ret

00000ff0 <_ZL12setMACandIPsPKhS0_>:
     ff0:	cf 93       	push	r28
     ff2:	df 93       	push	r29
     ff4:	eb 01       	movw	r28, r22
     ff6:	e3 df       	rcall	.-58     	; 0xfbe <_ZL7setMACsPKh>
     ff8:	be 01       	movw	r22, r28
     ffa:	8e e0       	ldi	r24, 0x0E	; 14
     ffc:	93 e0       	ldi	r25, 0x03	; 3
     ffe:	b6 d2       	rcall	.+1388   	; 0x156c <_ZN9EtherCard6copyIpEPhPKh>
    1000:	66 e0       	ldi	r22, 0x06	; 6
    1002:	75 e0       	ldi	r23, 0x05	; 5
    1004:	8a e0       	ldi	r24, 0x0A	; 10
    1006:	93 e0       	ldi	r25, 0x03	; 3
    1008:	b1 d2       	rcall	.+1378   	; 0x156c <_ZN9EtherCard6copyIpEPhPKh>
    100a:	df 91       	pop	r29
    100c:	cf 91       	pop	r28
    100e:	08 95       	ret

00001010 <_ZL16client_store_macPhS_>:
    1010:	cf 93       	push	r28
    1012:	df 93       	push	r29
    1014:	eb 01       	movw	r28, r22
    1016:	44 e0       	ldi	r20, 0x04	; 4
    1018:	50 e0       	ldi	r21, 0x00	; 0
    101a:	bc 01       	movw	r22, r24
    101c:	8c e0       	ldi	r24, 0x0C	; 12
    101e:	93 e0       	ldi	r25, 0x03	; 3
    1020:	0e 94 37 14 	call	0x286e	; 0x286e <memcmp>
    1024:	89 2b       	or	r24, r25
    1026:	31 f4       	brne	.+12     	; 0x1034 <_ZL16client_store_macPhS_+0x24>
    1028:	66 e0       	ldi	r22, 0x06	; 6
    102a:	73 e0       	ldi	r23, 0x03	; 3
    102c:	ce 01       	movw	r24, r28
    102e:	ab d2       	rcall	.+1366   	; 0x1586 <_ZN9EtherCard7copyMacEPhPKh>
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	01 c0       	rjmp	.+2      	; 0x1036 <_ZL16client_store_macPhS_+0x26>
    1034:	80 e0       	ldi	r24, 0x00	; 0
    1036:	df 91       	pop	r29
    1038:	cf 91       	pop	r28
    103a:	08 95       	ret

0000103c <_ZL17client_arp_whohasPh>:
    103c:	0f 93       	push	r16
    103e:	1f 93       	push	r17
    1040:	cf 93       	push	r28
    1042:	8c 01       	movw	r16, r24
    1044:	85 e2       	ldi	r24, 0x25	; 37
    1046:	92 e0       	ldi	r25, 0x02	; 2
    1048:	ba df       	rcall	.-140    	; 0xfbe <_ZL7setMACsPKh>
    104a:	e0 ef       	ldi	r30, 0xF0	; 240
    104c:	f2 e0       	ldi	r31, 0x02	; 2
    104e:	88 e0       	ldi	r24, 0x08	; 8
    1050:	84 87       	std	Z+12, r24	; 0x0c
    1052:	c6 e0       	ldi	r28, 0x06	; 6
    1054:	c5 87       	std	Z+13, r28	; 0x0d
    1056:	48 e0       	ldi	r20, 0x08	; 8
    1058:	50 e0       	ldi	r21, 0x00	; 0
    105a:	6f e9       	ldi	r22, 0x9F	; 159
    105c:	71 e0       	ldi	r23, 0x01	; 1
    105e:	8e ef       	ldi	r24, 0xFE	; 254
    1060:	92 e0       	ldi	r25, 0x02	; 2
    1062:	0e 94 2e 14 	call	0x285c	; 0x285c <memcpy_P>
    1066:	e0 e1       	ldi	r30, 0x10	; 16
    1068:	f3 e0       	ldi	r31, 0x03	; 3
    106a:	df 01       	movw	r26, r30
    106c:	1d 92       	st	X+, r1
    106e:	ca 95       	dec	r28
    1070:	e9 f7       	brne	.-6      	; 0x106c <_ZL17client_arp_whohasPh+0x30>
    1072:	6a e0       	ldi	r22, 0x0A	; 10
    1074:	75 e0       	ldi	r23, 0x05	; 5
    1076:	86 e0       	ldi	r24, 0x06	; 6
    1078:	93 e0       	ldi	r25, 0x03	; 3
    107a:	85 d2       	rcall	.+1290   	; 0x1586 <_ZN9EtherCard7copyMacEPhPKh>
    107c:	b8 01       	movw	r22, r16
    107e:	86 e1       	ldi	r24, 0x16	; 22
    1080:	93 e0       	ldi	r25, 0x03	; 3
    1082:	74 d2       	rcall	.+1256   	; 0x156c <_ZN9EtherCard6copyIpEPhPKh>
    1084:	66 e0       	ldi	r22, 0x06	; 6
    1086:	75 e0       	ldi	r23, 0x05	; 5
    1088:	8c e0       	ldi	r24, 0x0C	; 12
    108a:	93 e0       	ldi	r25, 0x03	; 3
    108c:	6f d2       	rcall	.+1246   	; 0x156c <_ZN9EtherCard6copyIpEPhPKh>
    108e:	8a e2       	ldi	r24, 0x2A	; 42
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	c6 dd       	rcall	.-1140   	; 0xc20 <_ZN8ENC28J6010packetSendEj>
    1094:	cf 91       	pop	r28
    1096:	1f 91       	pop	r17
    1098:	0f 91       	pop	r16
    109a:	08 95       	ret

0000109c <_ZN9EtherCard10udpPrepareEjPKhj>:
    109c:	ef 92       	push	r14
    109e:	ff 92       	push	r15
    10a0:	0f 93       	push	r16
    10a2:	1f 93       	push	r17
    10a4:	cf 93       	push	r28
    10a6:	df 93       	push	r29
    10a8:	18 2f       	mov	r17, r24
    10aa:	09 2f       	mov	r16, r25
    10ac:	eb 01       	movw	r28, r22
    10ae:	f4 2e       	mov	r15, r20
    10b0:	e5 2e       	mov	r14, r21
    10b2:	86 e0       	ldi	r24, 0x06	; 6
    10b4:	95 e0       	ldi	r25, 0x05	; 5
    10b6:	4a df       	rcall	.-364    	; 0xf4c <_ZL6is_lanPKhS0_>
    10b8:	88 23       	and	r24, r24
    10ba:	29 f0       	breq	.+10     	; 0x10c6 <_ZN9EtherCard10udpPrepareEjPKhj+0x2a>
    10bc:	be 01       	movw	r22, r28
    10be:	8b e1       	ldi	r24, 0x1B	; 27
    10c0:	95 e0       	ldi	r25, 0x05	; 5
    10c2:	96 df       	rcall	.-212    	; 0xff0 <_ZL12setMACandIPsPKhS0_>
    10c4:	04 c0       	rjmp	.+8      	; 0x10ce <_ZN9EtherCard10udpPrepareEjPKhj+0x32>
    10c6:	be 01       	movw	r22, r28
    10c8:	81 e1       	ldi	r24, 0x11	; 17
    10ca:	95 e0       	ldi	r25, 0x05	; 5
    10cc:	91 df       	rcall	.-222    	; 0xff0 <_ZL12setMACandIPsPKhS0_>
    10ce:	88 81       	ld	r24, Y
    10d0:	80 7f       	andi	r24, 0xF0	; 240
    10d2:	80 3e       	cpi	r24, 0xE0	; 224
    10d4:	91 f0       	breq	.+36     	; 0x10fa <_ZN9EtherCard10udpPrepareEjPKhj+0x5e>
    10d6:	88 81       	ld	r24, Y
    10d8:	99 81       	ldd	r25, Y+1	; 0x01
    10da:	aa 81       	ldd	r26, Y+2	; 0x02
    10dc:	bb 81       	ldd	r27, Y+3	; 0x03
    10de:	8f 3f       	cpi	r24, 0xFF	; 255
    10e0:	9f 4f       	sbci	r25, 0xFF	; 255
    10e2:	af 4f       	sbci	r26, 0xFF	; 255
    10e4:	bf 4f       	sbci	r27, 0xFF	; 255
    10e6:	49 f0       	breq	.+18     	; 0x10fa <_ZN9EtherCard10udpPrepareEjPKhj+0x5e>
    10e8:	44 e0       	ldi	r20, 0x04	; 4
    10ea:	50 e0       	ldi	r21, 0x00	; 0
    10ec:	be 01       	movw	r22, r28
    10ee:	8e ef       	ldi	r24, 0xFE	; 254
    10f0:	94 e0       	ldi	r25, 0x04	; 4
    10f2:	0e 94 37 14 	call	0x286e	; 0x286e <memcmp>
    10f6:	89 2b       	or	r24, r25
    10f8:	29 f4       	brne	.+10     	; 0x1104 <_ZN9EtherCard10udpPrepareEjPKhj+0x68>
    10fa:	65 e2       	ldi	r22, 0x25	; 37
    10fc:	72 e0       	ldi	r23, 0x02	; 2
    10fe:	80 ef       	ldi	r24, 0xF0	; 240
    1100:	92 e0       	ldi	r25, 0x02	; 2
    1102:	41 d2       	rcall	.+1154   	; 0x1586 <_ZN9EtherCard7copyMacEPhPKh>
    1104:	c0 ef       	ldi	r28, 0xF0	; 240
    1106:	d2 e0       	ldi	r29, 0x02	; 2
    1108:	88 e0       	ldi	r24, 0x08	; 8
    110a:	8c 87       	std	Y+12, r24	; 0x0c
    110c:	1d 86       	std	Y+13, r1	; 0x0d
    110e:	49 e0       	ldi	r20, 0x09	; 9
    1110:	50 e0       	ldi	r21, 0x00	; 0
    1112:	66 e9       	ldi	r22, 0x96	; 150
    1114:	71 e0       	ldi	r23, 0x01	; 1
    1116:	8e ef       	ldi	r24, 0xFE	; 254
    1118:	92 e0       	ldi	r25, 0x02	; 2
    111a:	0e 94 2e 14 	call	0x285c	; 0x285c <memcpy_P>
    111e:	18 8a       	std	Y+16, r1	; 0x10
    1120:	81 e1       	ldi	r24, 0x11	; 17
    1122:	8f 8b       	std	Y+23, r24	; 0x17
    1124:	ec a2       	std	Y+36, r14	; 0x24
    1126:	fd a2       	std	Y+37, r15	; 0x25
    1128:	0a a3       	std	Y+34, r16	; 0x22
    112a:	1b a3       	std	Y+35, r17	; 0x23
    112c:	1e a2       	std	Y+38, r1	; 0x26
    112e:	18 a6       	std	Y+40, r1	; 0x28
    1130:	19 a6       	std	Y+41, r1	; 0x29
    1132:	df 91       	pop	r29
    1134:	cf 91       	pop	r28
    1136:	1f 91       	pop	r17
    1138:	0f 91       	pop	r16
    113a:	ff 90       	pop	r15
    113c:	ef 90       	pop	r14
    113e:	08 95       	ret

00001140 <_ZN9EtherCard11udpTransmitEj>:
    1140:	0f 93       	push	r16
    1142:	1f 93       	push	r17
    1144:	cf 93       	push	r28
    1146:	df 93       	push	r29
    1148:	ec 01       	movw	r28, r24
    114a:	00 ef       	ldi	r16, 0xF0	; 240
    114c:	12 e0       	ldi	r17, 0x02	; 2
    114e:	4c 96       	adiw	r24, 0x1c	; 28
    1150:	f8 01       	movw	r30, r16
    1152:	90 8b       	std	Z+16, r25	; 0x10
    1154:	81 8b       	std	Z+17, r24	; 0x11
    1156:	24 df       	rcall	.-440    	; 0xfa0 <_ZL20fill_ip_hdr_checksumv>
    1158:	ce 01       	movw	r24, r28
    115a:	08 96       	adiw	r24, 0x08	; 8
    115c:	f8 01       	movw	r30, r16
    115e:	96 a3       	std	Z+38, r25	; 0x26
    1160:	87 a3       	std	Z+39, r24	; 0x27
    1162:	ae 01       	movw	r20, r28
    1164:	40 5f       	subi	r20, 0xF0	; 240
    1166:	5f 4f       	sbci	r21, 0xFF	; 255
    1168:	21 e0       	ldi	r18, 0x01	; 1
    116a:	6a e1       	ldi	r22, 0x1A	; 26
    116c:	88 e2       	ldi	r24, 0x28	; 40
    116e:	7d de       	rcall	.-774    	; 0xe6a <_ZL13fill_checksumhhjh>
    1170:	ce 01       	movw	r24, r28
    1172:	8a 96       	adiw	r24, 0x2a	; 42
    1174:	55 dd       	rcall	.-1366   	; 0xc20 <_ZN8ENC28J6010packetSendEj>
    1176:	df 91       	pop	r29
    1178:	cf 91       	pop	r28
    117a:	1f 91       	pop	r17
    117c:	0f 91       	pop	r16
    117e:	08 95       	ret

00001180 <_ZN9EtherCard7sendUdpEPKhjjS1_j>:
    1180:	0f 93       	push	r16
    1182:	1f 93       	push	r17
    1184:	cf 93       	push	r28
    1186:	df 93       	push	r29
    1188:	d6 2f       	mov	r29, r22
    118a:	c7 2f       	mov	r28, r23
    118c:	ca 01       	movw	r24, r20
    118e:	a8 01       	movw	r20, r16
    1190:	b9 01       	movw	r22, r18
    1192:	84 df       	rcall	.-248    	; 0x109c <_ZN9EtherCard10udpPrepareEjPKhj>
    1194:	8d 2f       	mov	r24, r29
    1196:	9c 2f       	mov	r25, r28
    1198:	81 30       	cpi	r24, 0x01	; 1
    119a:	22 e0       	ldi	r18, 0x02	; 2
    119c:	92 07       	cpc	r25, r18
    119e:	10 f0       	brcs	.+4      	; 0x11a4 <_ZN9EtherCard7sendUdpEPKhjjS1_j+0x24>
    11a0:	80 e0       	ldi	r24, 0x00	; 0
    11a2:	92 e0       	ldi	r25, 0x02	; 2
    11a4:	cd df       	rcall	.-102    	; 0x1140 <_ZN9EtherCard11udpTransmitEj>
    11a6:	df 91       	pop	r29
    11a8:	cf 91       	pop	r28
    11aa:	1f 91       	pop	r17
    11ac:	0f 91       	pop	r16
    11ae:	08 95       	ret

000011b0 <_ZN9EtherCard7setGwIpEPKh>:
    11b0:	10 92 f1 04 	sts	0x04F1, r1	; 0x8004f1 <_ZN9EtherCard8delaycntE+0x1>
    11b4:	10 92 f0 04 	sts	0x04F0, r1	; 0x8004f0 <_ZN9EtherCard8delaycntE>
    11b8:	21 e0       	ldi	r18, 0x01	; 1
    11ba:	20 93 10 05 	sts	0x0510, r18	; 0x800510 <_ZL9waitgwmac>
    11be:	bc 01       	movw	r22, r24
    11c0:	8a ef       	ldi	r24, 0xFA	; 250
    11c2:	94 e0       	ldi	r25, 0x04	; 4
    11c4:	d3 c1       	rjmp	.+934    	; 0x156c <_ZN9EtherCard6copyIpEPhPKh>
    11c6:	08 95       	ret

000011c8 <_ZN9EtherCard22updateBroadcastAddressEv>:
    11c8:	cf 93       	push	r28
    11ca:	df 93       	push	r29
    11cc:	e6 e0       	ldi	r30, 0x06	; 6
    11ce:	f5 e0       	ldi	r31, 0x05	; 5
    11d0:	c2 e0       	ldi	r28, 0x02	; 2
    11d2:	d5 e0       	ldi	r29, 0x05	; 5
    11d4:	ae ef       	ldi	r26, 0xFE	; 254
    11d6:	b4 e0       	ldi	r27, 0x04	; 4
    11d8:	2a e0       	ldi	r18, 0x0A	; 10
    11da:	35 e0       	ldi	r19, 0x05	; 5
    11dc:	91 91       	ld	r25, Z+
    11de:	89 91       	ld	r24, Y+
    11e0:	80 95       	com	r24
    11e2:	89 2b       	or	r24, r25
    11e4:	8d 93       	st	X+, r24
    11e6:	e2 17       	cp	r30, r18
    11e8:	f3 07       	cpc	r31, r19
    11ea:	c1 f7       	brne	.-16     	; 0x11dc <_ZN9EtherCard22updateBroadcastAddressEv+0x14>
    11ec:	df 91       	pop	r29
    11ee:	cf 91       	pop	r28
    11f0:	08 95       	ret

000011f2 <_ZN9EtherCard10packetLoopEj>:
	gPB[ICMP_CHECKSUM_P+1]++;
	gPB[ICMP_CHECKSUM_P] += 0x08;
	EtherCard::packetSend(len);
}

uint16_t EtherCard::packetLoop (uint16_t plen) {
    11f2:	cf 93       	push	r28
    11f4:	df 93       	push	r29
    11f6:	ec 01       	movw	r28, r24
    if (plen==0) {
    11f8:	00 97       	sbiw	r24, 0x00	; 0
    11fa:	09 f0       	breq	.+2      	; 0x11fe <_ZN9EtherCard10packetLoopEj+0xc>
    11fc:	3f c0       	rjmp	.+126    	; 0x127c <_ZN9EtherCard10packetLoopEj+0x8a>
        //Check every 65536 (no-packet) cycles whether we need to retry ARP request for gateway
        if ((waitgwmac & WGW_INITIAL_ARP || waitgwmac & WGW_REFRESHING) &&
    11fe:	80 91 10 05 	lds	r24, 0x0510	; 0x800510 <_ZL9waitgwmac>
    1202:	85 70       	andi	r24, 0x05	; 5
    1204:	89 f0       	breq	.+34     	; 0x1228 <_ZN9EtherCard10packetLoopEj+0x36>
    1206:	80 91 f0 04 	lds	r24, 0x04F0	; 0x8004f0 <_ZN9EtherCard8delaycntE>
    120a:	90 91 f1 04 	lds	r25, 0x04F1	; 0x8004f1 <_ZN9EtherCard8delaycntE+0x1>
    120e:	89 2b       	or	r24, r25
    1210:	59 f4       	brne	.+22     	; 0x1228 <_ZN9EtherCard10packetLoopEj+0x36>
                delaycnt==0 && isLinkUp()) {
    1212:	f3 dc       	rcall	.-1562   	; 0xbfa <_ZN8ENC28J608isLinkUpEv>
}

uint16_t EtherCard::packetLoop (uint16_t plen) {
    if (plen==0) {
        //Check every 65536 (no-packet) cycles whether we need to retry ARP request for gateway
        if ((waitgwmac & WGW_INITIAL_ARP || waitgwmac & WGW_REFRESHING) &&
    1214:	88 23       	and	r24, r24
    1216:	41 f0       	breq	.+16     	; 0x1228 <_ZN9EtherCard10packetLoopEj+0x36>
                delaycnt==0 && isLinkUp()) {
            client_arp_whohas(gwip);
    1218:	8a ef       	ldi	r24, 0xFA	; 250
    121a:	94 e0       	ldi	r25, 0x04	; 4
    121c:	0f df       	rcall	.-482    	; 0x103c <_ZL17client_arp_whohasPh>
            waitgwmac |= WGW_ACCEPT_ARP_REPLY;
    121e:	80 91 10 05 	lds	r24, 0x0510	; 0x800510 <_ZL9waitgwmac>
    1222:	88 60       	ori	r24, 0x08	; 8
    1224:	80 93 10 05 	sts	0x0510, r24	; 0x800510 <_ZL9waitgwmac>
        }
        delaycnt++;
    1228:	80 91 f0 04 	lds	r24, 0x04F0	; 0x8004f0 <_ZN9EtherCard8delaycntE>
    122c:	90 91 f1 04 	lds	r25, 0x04F1	; 0x8004f1 <_ZN9EtherCard8delaycntE+0x1>
    1230:	01 96       	adiw	r24, 0x01	; 1
    1232:	90 93 f1 04 	sts	0x04F1, r25	; 0x8004f1 <_ZN9EtherCard8delaycntE+0x1>
    1236:	80 93 f0 04 	sts	0x04F0, r24	; 0x8004f0 <_ZN9EtherCard8delaycntE>

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, dnsip) && !has_dns_mac && !waiting_for_dns_mac) {
    123a:	66 ef       	ldi	r22, 0xF6	; 246
    123c:	74 e0       	ldi	r23, 0x04	; 4
    123e:	86 e0       	ldi	r24, 0x06	; 6
    1240:	95 e0       	ldi	r25, 0x05	; 5
    1242:	84 de       	rcall	.-760    	; 0xf4c <_ZL6is_lanPKhS0_>
    1244:	88 23       	and	r24, r24
    1246:	49 f0       	breq	.+18     	; 0x125a <_ZN9EtherCard10packetLoopEj+0x68>
    1248:	80 91 19 05 	lds	r24, 0x0519	; 0x800519 <_ZL11has_dns_mac>
    124c:	81 11       	cpse	r24, r1
    124e:	05 c0       	rjmp	.+10     	; 0x125a <_ZN9EtherCard10packetLoopEj+0x68>
    1250:	80 91 1a 05 	lds	r24, 0x051A	; 0x80051a <_ZL19waiting_for_dns_mac>
    1254:	88 23       	and	r24, r24
    1256:	09 f4       	brne	.+2      	; 0x125a <_ZN9EtherCard10packetLoopEj+0x68>
    1258:	dc c0       	rjmp	.+440    	; 0x1412 <_ZN9EtherCard10packetLoopEj+0x220>
            client_arp_whohas(dnsip);
            waiting_for_dns_mac = true;
        }

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, hisip) && !has_dest_mac && !waiting_for_dest_mac) {
    125a:	62 ef       	ldi	r22, 0xF2	; 242
    125c:	74 e0       	ldi	r23, 0x04	; 4
    125e:	86 e0       	ldi	r24, 0x06	; 6
    1260:	95 e0       	ldi	r25, 0x05	; 5
    1262:	74 de       	rcall	.-792    	; 0xf4c <_ZL6is_lanPKhS0_>
    1264:	88 23       	and	r24, r24
    1266:	09 f4       	brne	.+2      	; 0x126a <_ZN9EtherCard10packetLoopEj+0x78>
    1268:	f8 c0       	rjmp	.+496    	; 0x145a <_ZN9EtherCard10packetLoopEj+0x268>
    126a:	80 91 17 05 	lds	r24, 0x0517	; 0x800517 <_ZL12has_dest_mac>
    126e:	81 11       	cpse	r24, r1
    1270:	f4 c0       	rjmp	.+488    	; 0x145a <_ZN9EtherCard10packetLoopEj+0x268>
    1272:	80 91 18 05 	lds	r24, 0x0518	; 0x800518 <_ZL20waiting_for_dest_mac>
    1276:	81 11       	cpse	r24, r1
    1278:	f0 c0       	rjmp	.+480    	; 0x145a <_ZN9EtherCard10packetLoopEj+0x268>
    127a:	d2 c0       	rjmp	.+420    	; 0x1420 <_ZN9EtherCard10packetLoopEj+0x22e>
    return true;
}

static uint8_t eth_type_is_arp_and_my_ip(uint16_t len) {
    return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
    127c:	89 32       	cpi	r24, 0x29	; 41
    127e:	91 05       	cpc	r25, r1
    1280:	08 f4       	brcc	.+2      	; 0x1284 <_ZN9EtherCard10packetLoopEj+0x92>
    1282:	d5 c0       	rjmp	.+426    	; 0x142e <_ZN9EtherCard10packetLoopEj+0x23c>
        }
    return true;
}

static uint8_t eth_type_is_arp_and_my_ip(uint16_t len) {
    return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
    1284:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <_ZN8ENC28J606bufferE+0xc>
    1288:	88 30       	cpi	r24, 0x08	; 8
    128a:	09 f0       	breq	.+2      	; 0x128e <_ZN9EtherCard10packetLoopEj+0x9c>
    128c:	e6 c0       	rjmp	.+460    	; 0x145a <_ZN9EtherCard10packetLoopEj+0x268>
    128e:	80 91 fd 02 	lds	r24, 0x02FD	; 0x8002fd <_ZN8ENC28J606bufferE+0xd>
    1292:	86 30       	cpi	r24, 0x06	; 6
    1294:	09 f0       	breq	.+2      	; 0x1298 <_ZN9EtherCard10packetLoopEj+0xa6>
    1296:	dd c0       	rjmp	.+442    	; 0x1452 <_ZN9EtherCard10packetLoopEj+0x260>
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
           memcmp(gPB + ETH_ARP_DST_IP_P, EtherCard::myip, IP_LEN) == 0;
    1298:	44 e0       	ldi	r20, 0x04	; 4
    129a:	50 e0       	ldi	r21, 0x00	; 0
    129c:	66 e0       	ldi	r22, 0x06	; 6
    129e:	75 e0       	ldi	r23, 0x05	; 5
    12a0:	86 e1       	ldi	r24, 0x16	; 22
    12a2:	93 e0       	ldi	r25, 0x03	; 3
    12a4:	0e 94 37 14 	call	0x286e	; 0x286e <memcmp>
    return true;
}

static uint8_t eth_type_is_arp_and_my_ip(uint16_t len) {
    return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
    12a8:	89 2b       	or	r24, r25
    12aa:	09 f0       	breq	.+2      	; 0x12ae <_ZN9EtherCard10packetLoopEj+0xbc>
    12ac:	d2 c0       	rjmp	.+420    	; 0x1452 <_ZN9EtherCard10packetLoopEj+0x260>
    EtherCard::copyIp(gPB + IP_SRC_P, EtherCard::myip);
    fill_ip_hdr_checksum();
}

static void make_arp_answer_from_request() {
    setMACs(gPB + ETH_SRC_MAC);
    12ae:	c3 c0       	rjmp	.+390    	; 0x1436 <_ZN9EtherCard10packetLoopEj+0x244>
    12b0:	86 ef       	ldi	r24, 0xF6	; 246
    12b2:	92 e0       	ldi	r25, 0x02	; 2
    12b4:	84 de       	rcall	.-760    	; 0xfbe <_ZL7setMACsPKh>
    gPB[ETH_ARP_OPCODE_H_P] = ETH_ARP_OPCODE_REPLY_H_V;
    12b6:	e0 ef       	ldi	r30, 0xF0	; 240
    12b8:	f2 e0       	ldi	r31, 0x02	; 2
    12ba:	14 8a       	std	Z+20, r1	; 0x14
    gPB[ETH_ARP_OPCODE_L_P] = ETH_ARP_OPCODE_REPLY_L_V;
    12bc:	82 e0       	ldi	r24, 0x02	; 2
    EtherCard::copyMac(gPB + ETH_ARP_DST_MAC_P, gPB + ETH_ARP_SRC_MAC_P);
    12be:	85 8b       	std	Z+21, r24	; 0x15
    12c0:	66 e0       	ldi	r22, 0x06	; 6
    12c2:	73 e0       	ldi	r23, 0x03	; 3
    12c4:	80 e1       	ldi	r24, 0x10	; 16
    12c6:	93 e0       	ldi	r25, 0x03	; 3
    EtherCard::copyMac(gPB + ETH_ARP_SRC_MAC_P, EtherCard::mymac);
    12c8:	5e d1       	rcall	.+700    	; 0x1586 <_ZN9EtherCard7copyMacEPhPKh>
    12ca:	6a e0       	ldi	r22, 0x0A	; 10
    12cc:	75 e0       	ldi	r23, 0x05	; 5
    12ce:	86 e0       	ldi	r24, 0x06	; 6
    12d0:	93 e0       	ldi	r25, 0x03	; 3
    EtherCard::copyIp(gPB + ETH_ARP_DST_IP_P, gPB + ETH_ARP_SRC_IP_P);
    12d2:	59 d1       	rcall	.+690    	; 0x1586 <_ZN9EtherCard7copyMacEPhPKh>
    12d4:	6c e0       	ldi	r22, 0x0C	; 12
    12d6:	73 e0       	ldi	r23, 0x03	; 3
    12d8:	86 e1       	ldi	r24, 0x16	; 22
    12da:	93 e0       	ldi	r25, 0x03	; 3
    EtherCard::copyIp(gPB + ETH_ARP_SRC_IP_P, EtherCard::myip);
    12dc:	47 d1       	rcall	.+654    	; 0x156c <_ZN9EtherCard6copyIpEPhPKh>
    12de:	66 e0       	ldi	r22, 0x06	; 6
    12e0:	75 e0       	ldi	r23, 0x05	; 5
    12e2:	8c e0       	ldi	r24, 0x0C	; 12
    12e4:	93 e0       	ldi	r25, 0x03	; 3
    12e6:	42 d1       	rcall	.+644    	; 0x156c <_ZN9EtherCard6copyIpEPhPKh>
    EtherCard::packetSend(42);
    12e8:	8a e2       	ldi	r24, 0x2A	; 42
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	99 dc       	rcall	.-1742   	; 0xc20 <_ZN8ENC28J6010packetSendEj>
    12ee:	80 91 10 05 	lds	r24, 0x0510	; 0x800510 <_ZL9waitgwmac>

    if (eth_type_is_arp_and_my_ip(plen))
    {   //Service ARP request
        if (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REQ_L_V)
            make_arp_answer_from_request();
        if (waitgwmac & WGW_ACCEPT_ARP_REPLY && (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REPLY_L_V) && client_store_mac(gwip, gwmacaddr))
    12f2:	83 ff       	sbrs	r24, 3
    12f4:	0e c0       	rjmp	.+28     	; 0x1312 <_ZN9EtherCard10packetLoopEj+0x120>
    12f6:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <_ZN8ENC28J606bufferE+0x15>
    12fa:	82 30       	cpi	r24, 0x02	; 2
    12fc:	51 f4       	brne	.+20     	; 0x1312 <_ZN9EtherCard10packetLoopEj+0x120>
    12fe:	61 e1       	ldi	r22, 0x11	; 17
    1300:	75 e0       	ldi	r23, 0x05	; 5
    1302:	8a ef       	ldi	r24, 0xFA	; 250
    1304:	94 e0       	ldi	r25, 0x04	; 4
    1306:	84 de       	rcall	.-760    	; 0x1010 <_ZL16client_store_macPhS_>
    1308:	88 23       	and	r24, r24
    130a:	19 f0       	breq	.+6      	; 0x1312 <_ZN9EtherCard10packetLoopEj+0x120>
    130c:	82 e0       	ldi	r24, 0x02	; 2
            waitgwmac = WGW_HAVE_GW_MAC;
    130e:	80 93 10 05 	sts	0x0510, r24	; 0x800510 <_ZL9waitgwmac>
    1312:	80 91 19 05 	lds	r24, 0x0519	; 0x800519 <_ZL11has_dns_mac>
        if (!has_dns_mac && waiting_for_dns_mac && client_store_mac(dnsip, destmacaddr)) {
    1316:	81 11       	cpse	r24, r1
    1318:	10 c0       	rjmp	.+32     	; 0x133a <_ZN9EtherCard10packetLoopEj+0x148>
    131a:	80 91 1a 05 	lds	r24, 0x051A	; 0x80051a <_ZL19waiting_for_dns_mac>
    131e:	88 23       	and	r24, r24
    1320:	61 f0       	breq	.+24     	; 0x133a <_ZN9EtherCard10packetLoopEj+0x148>
    1322:	6b e1       	ldi	r22, 0x1B	; 27
    1324:	75 e0       	ldi	r23, 0x05	; 5
    1326:	86 ef       	ldi	r24, 0xF6	; 246
    1328:	94 e0       	ldi	r25, 0x04	; 4
    132a:	72 de       	rcall	.-796    	; 0x1010 <_ZL16client_store_macPhS_>
    132c:	88 23       	and	r24, r24
    132e:	29 f0       	breq	.+10     	; 0x133a <_ZN9EtherCard10packetLoopEj+0x148>
    1330:	81 e0       	ldi	r24, 0x01	; 1
            has_dns_mac = true;
    1332:	80 93 19 05 	sts	0x0519, r24	; 0x800519 <_ZL11has_dns_mac>
    1336:	10 92 1a 05 	sts	0x051A, r1	; 0x80051a <_ZL19waiting_for_dns_mac>
            waiting_for_dns_mac = false;
    133a:	80 91 17 05 	lds	r24, 0x0517	; 0x800517 <_ZL12has_dest_mac>
        }
        if (!has_dest_mac && waiting_for_dest_mac && client_store_mac(hisip, destmacaddr)) {
    133e:	81 11       	cpse	r24, r1
    1340:	8c c0       	rjmp	.+280    	; 0x145a <_ZN9EtherCard10packetLoopEj+0x268>
    1342:	80 91 18 05 	lds	r24, 0x0518	; 0x800518 <_ZL20waiting_for_dest_mac>
    1346:	88 23       	and	r24, r24
    1348:	09 f4       	brne	.+2      	; 0x134c <_ZN9EtherCard10packetLoopEj+0x15a>
    134a:	87 c0       	rjmp	.+270    	; 0x145a <_ZN9EtherCard10packetLoopEj+0x268>
    134c:	6b e1       	ldi	r22, 0x1B	; 27
    134e:	75 e0       	ldi	r23, 0x05	; 5
    1350:	82 ef       	ldi	r24, 0xF2	; 242
    1352:	94 e0       	ldi	r25, 0x04	; 4
    1354:	5d de       	rcall	.-838    	; 0x1010 <_ZL16client_store_macPhS_>
    1356:	88 23       	and	r24, r24
    1358:	09 f4       	brne	.+2      	; 0x135c <_ZN9EtherCard10packetLoopEj+0x16a>
    135a:	7f c0       	rjmp	.+254    	; 0x145a <_ZN9EtherCard10packetLoopEj+0x268>
    135c:	81 e0       	ldi	r24, 0x01	; 1
            has_dest_mac = true;
    135e:	80 93 17 05 	sts	0x0517, r24	; 0x800517 <_ZL12has_dest_mac>
    1362:	10 92 18 05 	sts	0x0518, r1	; 0x800518 <_ZL20waiting_for_dest_mac>
            waiting_for_dest_mac = false;
    1366:	79 c0       	rjmp	.+242    	; 0x145a <_ZN9EtherCard10packetLoopEj+0x268>
    1368:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <_ZN8ENC28J606bufferE+0xc>
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
           memcmp(gPB + ETH_ARP_DST_IP_P, EtherCard::myip, IP_LEN) == 0;
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
    136c:	88 30       	cpi	r24, 0x08	; 8
    136e:	09 f0       	breq	.+2      	; 0x1372 <_ZN9EtherCard10packetLoopEj+0x180>
    1370:	74 c0       	rjmp	.+232    	; 0x145a <_ZN9EtherCard10packetLoopEj+0x268>
    1372:	80 91 fd 02 	lds	r24, 0x02FD	; 0x8002fd <_ZN8ENC28J606bufferE+0xd>
    1376:	81 11       	cpse	r24, r1
    1378:	70 c0       	rjmp	.+224    	; 0x145a <_ZN9EtherCard10packetLoopEj+0x268>
    137a:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <_ZN8ENC28J606bufferE+0xe>
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
    137e:	85 34       	cpi	r24, 0x45	; 69
    1380:	09 f0       	breq	.+2      	; 0x1384 <_ZN9EtherCard10packetLoopEj+0x192>
    1382:	6b c0       	rjmp	.+214    	; 0x145a <_ZN9EtherCard10packetLoopEj+0x268>
    1384:	44 e0       	ldi	r20, 0x04	; 4
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
           (memcmp(gPB + IP_DST_P, EtherCard::myip, IP_LEN) == 0  //not my IP
    1386:	50 e0       	ldi	r21, 0x00	; 0
    1388:	66 e0       	ldi	r22, 0x06	; 6
    138a:	75 e0       	ldi	r23, 0x05	; 5
    138c:	8e e0       	ldi	r24, 0x0E	; 14
    138e:	93 e0       	ldi	r25, 0x03	; 3
    1390:	0e 94 37 14 	call	0x286e	; 0x286e <memcmp>
    1394:	89 2b       	or	r24, r25
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
    1396:	09 f4       	brne	.+2      	; 0x139a <_ZN9EtherCard10packetLoopEj+0x1a8>
    1398:	54 c0       	rjmp	.+168    	; 0x1442 <_ZN9EtherCard10packetLoopEj+0x250>
    139a:	44 e0       	ldi	r20, 0x04	; 4
           (memcmp(gPB + IP_DST_P, EtherCard::myip, IP_LEN) == 0  //not my IP
            || (memcmp(gPB + IP_DST_P, EtherCard::broadcastip, IP_LEN) == 0) //not subnet broadcast
    139c:	50 e0       	ldi	r21, 0x00	; 0
    139e:	6e ef       	ldi	r22, 0xFE	; 254
    13a0:	74 e0       	ldi	r23, 0x04	; 4
    13a2:	8e e0       	ldi	r24, 0x0E	; 14
    13a4:	93 e0       	ldi	r25, 0x03	; 3
    13a6:	0e 94 37 14 	call	0x286e	; 0x286e <memcmp>
    13aa:	89 2b       	or	r24, r25
    13ac:	09 f4       	brne	.+2      	; 0x13b0 <_ZN9EtherCard10packetLoopEj+0x1be>
    13ae:	49 c0       	rjmp	.+146    	; 0x1442 <_ZN9EtherCard10packetLoopEj+0x250>
    13b0:	44 e0       	ldi	r20, 0x04	; 4
            || (memcmp(gPB + IP_DST_P, allOnes, IP_LEN) == 0)); //not global broadcasts
    13b2:	50 e0       	ldi	r21, 0x00	; 0
    13b4:	65 e2       	ldi	r22, 0x25	; 37
    13b6:	72 e0       	ldi	r23, 0x02	; 2
    13b8:	8e e0       	ldi	r24, 0x0E	; 14
    13ba:	93 e0       	ldi	r25, 0x03	; 3
    13bc:	0e 94 37 14 	call	0x286e	; 0x286e <memcmp>
    13c0:	89 2b       	or	r24, r25
    13c2:	09 f0       	breq	.+2      	; 0x13c6 <_ZN9EtherCard10packetLoopEj+0x1d4>
    13c4:	4a c0       	rjmp	.+148    	; 0x145a <_ZN9EtherCard10packetLoopEj+0x268>
    13c6:	3d c0       	rjmp	.+122    	; 0x1442 <_ZN9EtherCard10packetLoopEj+0x250>
    13c8:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <_ZN8ENC28J606bufferE+0x22>
        //!@todo Add other protocols (and make each optional at compile time)
        return 0;
    }
	
	//To handle pinging
	if (gPB[IP_PROTO_P]==IP_PROTO_ICMP_V && gPB[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V)
    13cc:	88 30       	cpi	r24, 0x08	; 8
    13ce:	c9 f4       	brne	.+50     	; 0x1402 <_ZN9EtherCard10packetLoopEj+0x210>
	{   //Service ICMP echo request (ping)
		if (icmp_cb)
    13d0:	e0 91 21 05 	lds	r30, 0x0521	; 0x800521 <_ZL7icmp_cb>
    13d4:	f0 91 22 05 	lds	r31, 0x0522	; 0x800522 <_ZL7icmp_cb+0x1>
    13d8:	30 97       	sbiw	r30, 0x00	; 0
    13da:	19 f0       	breq	.+6      	; 0x13e2 <_ZN9EtherCard10packetLoopEj+0x1f0>
		(*icmp_cb)(&(gPB[IP_SRC_P]));
    13dc:	8a e0       	ldi	r24, 0x0A	; 10
    13de:	93 e0       	ldi	r25, 0x03	; 3
    13e0:	19 95       	eicall
void EtherCard::registerPingCallback (void (*callback)(uint8_t *srcip)) {
    icmp_cb = callback;
}

static void make_echo_reply_from_request(uint16_t len) {
	make_eth_ip();
    13e2:	f7 dd       	rcall	.-1042   	; 0xfd2 <_ZL11make_eth_ipv>
	gPB[ICMP_TYPE_P] = ICMP_TYPE_ECHOREPLY_V;
    13e4:	e0 ef       	ldi	r30, 0xF0	; 240
    13e6:	f2 e0       	ldi	r31, 0x02	; 2
	if (gPB[ICMP_CHECKSUM_P] > (0xFF-0x08))
    13e8:	12 a2       	std	Z+34, r1	; 0x22
    13ea:	84 a1       	ldd	r24, Z+36	; 0x24
    13ec:	88 3f       	cpi	r24, 0xF8	; 248
	gPB[ICMP_CHECKSUM_P+1]++;
    13ee:	18 f0       	brcs	.+6      	; 0x13f6 <_ZN9EtherCard10packetLoopEj+0x204>
    13f0:	95 a1       	ldd	r25, Z+37	; 0x25
    13f2:	9f 5f       	subi	r25, 0xFF	; 255
	gPB[ICMP_CHECKSUM_P] += 0x08;
    13f4:	95 a3       	std	Z+37, r25	; 0x25
    13f6:	88 5f       	subi	r24, 0xF8	; 248
	EtherCard::packetSend(len);
    13f8:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <_ZN8ENC28J606bufferE+0x24>
    13fc:	ce 01       	movw	r24, r28
    13fe:	10 dc       	rcall	.-2016   	; 0xc20 <_ZN8ENC28J6010packetSendEj>
		make_echo_reply_from_request(plen);
		return 0;
	}

#if ETHERCARD_UDPSERVER
    if (ether.udpServerListening() && gPB[IP_PROTO_P]==IP_PROTO_UDP_V)
    1400:	2c c0       	rjmp	.+88     	; 0x145a <_ZN9EtherCard10packetLoopEj+0x268>
    1402:	4a d0       	rcall	.+148    	; 0x1498 <_ZN9EtherCard18udpServerListeningEv>
    1404:	88 23       	and	r24, r24
    1406:	49 f1       	breq	.+82     	; 0x145a <_ZN9EtherCard10packetLoopEj+0x268>
    1408:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <_ZN8ENC28J606bufferE+0x17>
    140c:	81 31       	cpi	r24, 0x11	; 17
    140e:	29 f5       	brne	.+74     	; 0x145a <_ZN9EtherCard10packetLoopEj+0x268>
        }
        delaycnt++;

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, dnsip) && !has_dns_mac && !waiting_for_dns_mac) {
            client_arp_whohas(dnsip);
    1410:	1d c0       	rjmp	.+58     	; 0x144c <_ZN9EtherCard10packetLoopEj+0x25a>
    1412:	86 ef       	ldi	r24, 0xF6	; 246
    1414:	94 e0       	ldi	r25, 0x04	; 4
    1416:	12 de       	rcall	.-988    	; 0x103c <_ZL17client_arp_whohasPh>
            waiting_for_dns_mac = true;
    1418:	81 e0       	ldi	r24, 0x01	; 1
    141a:	80 93 1a 05 	sts	0x051A, r24	; 0x80051a <_ZL19waiting_for_dns_mac>
    141e:	1d cf       	rjmp	.-454    	; 0x125a <_ZN9EtherCard10packetLoopEj+0x68>
        }

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, hisip) && !has_dest_mac && !waiting_for_dest_mac) {
            client_arp_whohas(hisip);
    1420:	82 ef       	ldi	r24, 0xF2	; 242
    1422:	94 e0       	ldi	r25, 0x04	; 4
    1424:	0b de       	rcall	.-1002   	; 0x103c <_ZL17client_arp_whohasPh>
    1426:	81 e0       	ldi	r24, 0x01	; 1
            waiting_for_dest_mac = true;
    1428:	80 93 18 05 	sts	0x0518, r24	; 0x800518 <_ZL20waiting_for_dest_mac>
    142c:	16 c0       	rjmp	.+44     	; 0x145a <_ZN9EtherCard10packetLoopEj+0x268>
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
    142e:	8a 97       	sbiw	r24, 0x2a	; 42
    1430:	08 f0       	brcs	.+2      	; 0x1434 <_ZN9EtherCard10packetLoopEj+0x242>
    1432:	9a cf       	rjmp	.-204    	; 0x1368 <_ZN9EtherCard10packetLoopEj+0x176>
    1434:	12 c0       	rjmp	.+36     	; 0x145a <_ZN9EtherCard10packetLoopEj+0x268>
        return 0;
    }

    if (eth_type_is_arp_and_my_ip(plen))
    {   //Service ARP request
        if (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REQ_L_V)
    1436:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <_ZN8ENC28J606bufferE+0x15>
    143a:	81 30       	cpi	r24, 0x01	; 1
    143c:	09 f0       	breq	.+2      	; 0x1440 <_ZN9EtherCard10packetLoopEj+0x24e>
    143e:	57 cf       	rjmp	.-338    	; 0x12ee <_ZN9EtherCard10packetLoopEj+0xfc>
    1440:	37 cf       	rjmp	.-402    	; 0x12b0 <_ZN9EtherCard10packetLoopEj+0xbe>
        //!@todo Add other protocols (and make each optional at compile time)
        return 0;
    }
	
	//To handle pinging
	if (gPB[IP_PROTO_P]==IP_PROTO_ICMP_V && gPB[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V)
    1442:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <_ZN8ENC28J606bufferE+0x17>
    1446:	81 30       	cpi	r24, 0x01	; 1
    1448:	e1 f6       	brne	.-72     	; 0x1402 <_ZN9EtherCard10packetLoopEj+0x210>
    144a:	be cf       	rjmp	.-132    	; 0x13c8 <_ZN9EtherCard10packetLoopEj+0x1d6>
	}

#if ETHERCARD_UDPSERVER
    if (ether.udpServerListening() && gPB[IP_PROTO_P]==IP_PROTO_UDP_V)
    {   //Call UDP server handler (callback) if one is defined for this packet
        if(ether.udpServerHasProcessedPacket(plen))
    144c:	ce 01       	movw	r24, r28
    144e:	2b d0       	rcall	.+86     	; 0x14a6 <_ZN9EtherCard27udpServerHasProcessedPacketEj>
    1450:	04 c0       	rjmp	.+8      	; 0x145a <_ZN9EtherCard10packetLoopEj+0x268>
    1452:	ca 32       	cpi	r28, 0x2A	; 42
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
    1454:	d1 05       	cpc	r29, r1
    1456:	08 f0       	brcs	.+2      	; 0x145a <_ZN9EtherCard10packetLoopEj+0x268>
    1458:	8c cf       	rjmp	.-232    	; 0x1372 <_ZN9EtherCard10packetLoopEj+0x180>
    145a:	80 e0       	ldi	r24, 0x00	; 0

    if (plen<54 || gPB[IP_PROTO_P]!=IP_PROTO_TCP_V )
        return 0; //from here on we are only interested in TCP-packets; these are longer than 54 bytes
		
	return 0;
}
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	df 91       	pop	r29
    1460:	cf 91       	pop	r28
    1462:	08 95       	ret

00001464 <_ZN9EtherCard21udpServerListenOnPortEPFvjPhjPKcjEj>:
    1464:	9c 01       	movw	r18, r24
    {
        if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((uint8_t) listeners[i].port)) {
            listeners[i].listening = true;
        }
    }
}
    1466:	90 91 23 05 	lds	r25, 0x0523	; 0x800523 <numListeners>
    146a:	98 30       	cpi	r25, 0x08	; 8
    146c:	a0 f4       	brcc	.+40     	; 0x1496 <_ZN9EtherCard21udpServerListenOnPortEPFvjPhjPKcjEj+0x32>
    146e:	e9 2f       	mov	r30, r25
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	af 01       	movw	r20, r30
    1474:	44 0f       	add	r20, r20
    1476:	55 1f       	adc	r21, r21
    1478:	44 0f       	add	r20, r20
    147a:	55 1f       	adc	r21, r21
    147c:	e4 0f       	add	r30, r20
    147e:	f5 1f       	adc	r31, r21
    1480:	ec 5d       	subi	r30, 0xDC	; 220
    1482:	fa 4f       	sbci	r31, 0xFA	; 250
    1484:	31 83       	std	Z+1, r19	; 0x01
    1486:	20 83       	st	Z, r18
    1488:	73 83       	std	Z+3, r23	; 0x03
    148a:	62 83       	std	Z+2, r22	; 0x02
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	84 83       	std	Z+4, r24	; 0x04
    1490:	9f 5f       	subi	r25, 0xFF	; 255
    1492:	90 93 23 05 	sts	0x0523, r25	; 0x800523 <numListeners>
    1496:	08 95       	ret

00001498 <_ZN9EtherCard18udpServerListeningEv>:

bool EtherCard::udpServerListening() {
    return numListeners > 0;
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	90 91 23 05 	lds	r25, 0x0523	; 0x800523 <numListeners>
    149e:	91 11       	cpse	r25, r1
    14a0:	01 c0       	rjmp	.+2      	; 0x14a4 <_ZN9EtherCard18udpServerListeningEv+0xc>
    14a2:	80 e0       	ldi	r24, 0x00	; 0
}
    14a4:	08 95       	ret

000014a6 <_ZN9EtherCard27udpServerHasProcessedPacketEj>:

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    14a6:	8f 92       	push	r8
    14a8:	9f 92       	push	r9
    14aa:	bf 92       	push	r11
    14ac:	cf 92       	push	r12
    14ae:	df 92       	push	r13
    14b0:	ef 92       	push	r14
    14b2:	ff 92       	push	r15
    14b4:	0f 93       	push	r16
    14b6:	1f 93       	push	r17
    14b8:	cf 93       	push	r28
    14ba:	df 93       	push	r29
    bool packetProcessed = false;
    for(int i = 0; i < numListeners; i++)
    14bc:	80 91 23 05 	lds	r24, 0x0523	; 0x800523 <numListeners>
    14c0:	88 23       	and	r24, r24
    14c2:	09 f4       	brne	.+2      	; 0x14c6 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x20>
    14c4:	46 c0       	rjmp	.+140    	; 0x1552 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0xac>
    14c6:	c4 e2       	ldi	r28, 0x24	; 36
    14c8:	d5 e0       	ldi	r29, 0x05	; 5
    14ca:	e1 2c       	mov	r14, r1
    14cc:	f1 2c       	mov	r15, r1
    14ce:	80 e0       	ldi	r24, 0x00	; 0
    {
        if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((uint8_t) listeners[i].port) && listeners[i].listening)
    14d0:	0f 2e       	mov	r0, r31
    14d2:	f0 ef       	ldi	r31, 0xF0	; 240
    14d4:	cf 2e       	mov	r12, r31
    14d6:	f2 e0       	ldi	r31, 0x02	; 2
    14d8:	df 2e       	mov	r13, r31
    14da:	f0 2d       	mov	r31, r0
                listeners[i].port,
                gPB + IP_SRC_P,
                (gPB[UDP_SRC_PORT_H_P] << 8) | gPB[UDP_SRC_PORT_L_P],
                (const char *) (gPB + UDP_DATA_P),
                datalen);
            packetProcessed = true;
    14dc:	bb 24       	eor	r11, r11
    14de:	b3 94       	inc	r11

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    bool packetProcessed = false;
    for(int i = 0; i < numListeners; i++)
    {
        if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((uint8_t) listeners[i].port) && listeners[i].listening)
    14e0:	aa 81       	ldd	r26, Y+2	; 0x02
    14e2:	bb 81       	ldd	r27, Y+3	; 0x03
    14e4:	f6 01       	movw	r30, r12
    14e6:	24 a1       	ldd	r18, Z+36	; 0x24
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	4b 2f       	mov	r20, r27
    14ec:	55 27       	eor	r21, r21
    14ee:	24 17       	cp	r18, r20
    14f0:	35 07       	cpc	r19, r21
    14f2:	21 f5       	brne	.+72     	; 0x153c <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x96>
    14f4:	25 a1       	ldd	r18, Z+37	; 0x25
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	ad 01       	movw	r20, r26
    14fa:	55 27       	eor	r21, r21
    14fc:	24 17       	cp	r18, r20
    14fe:	35 07       	cpc	r19, r21
    1500:	e9 f4       	brne	.+58     	; 0x153c <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x96>
    1502:	9c 81       	ldd	r25, Y+4	; 0x04
    1504:	99 23       	and	r25, r25
    1506:	d1 f0       	breq	.+52     	; 0x153c <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x96>
            listeners[i].callback(
                listeners[i].port,
                gPB + IP_SRC_P,
                (gPB[UDP_SRC_PORT_H_P] << 8) | gPB[UDP_SRC_PORT_L_P],
                (const char *) (gPB + UDP_DATA_P),
                datalen);
    1508:	07 a1       	ldd	r16, Z+39	; 0x27
    150a:	10 e0       	ldi	r17, 0x00	; 0
    150c:	08 50       	subi	r16, 0x08	; 8
    150e:	11 09       	sbc	r17, r1
    1510:	86 a1       	ldd	r24, Z+38	; 0x26
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	98 2f       	mov	r25, r24
    1516:	88 27       	eor	r24, r24
    1518:	08 0f       	add	r16, r24
    151a:	19 1f       	adc	r17, r25
    151c:	42 a1       	ldd	r20, Z+34	; 0x22
    151e:	50 e0       	ldi	r21, 0x00	; 0
    1520:	54 2f       	mov	r21, r20
    1522:	44 27       	eor	r20, r20
    1524:	83 a1       	ldd	r24, Z+35	; 0x23
    1526:	48 2b       	or	r20, r24
    1528:	88 80       	ld	r8, Y
    152a:	99 80       	ldd	r9, Y+1	; 0x01
    152c:	2a e1       	ldi	r18, 0x1A	; 26
    152e:	33 e0       	ldi	r19, 0x03	; 3
    1530:	6a e0       	ldi	r22, 0x0A	; 10
    1532:	73 e0       	ldi	r23, 0x03	; 3
    1534:	cd 01       	movw	r24, r26
    1536:	f4 01       	movw	r30, r8
    1538:	19 95       	eicall
            packetProcessed = true;
    153a:	8b 2d       	mov	r24, r11
    return numListeners > 0;
}

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    bool packetProcessed = false;
    for(int i = 0; i < numListeners; i++)
    153c:	ff ef       	ldi	r31, 0xFF	; 255
    153e:	ef 1a       	sub	r14, r31
    1540:	ff 0a       	sbc	r15, r31
    1542:	25 96       	adiw	r28, 0x05	; 5
    1544:	20 91 23 05 	lds	r18, 0x0523	; 0x800523 <numListeners>
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	e2 16       	cp	r14, r18
    154c:	f3 06       	cpc	r15, r19
    154e:	44 f2       	brlt	.-112    	; 0x14e0 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x3a>
    1550:	01 c0       	rjmp	.+2      	; 0x1554 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0xae>
bool EtherCard::udpServerListening() {
    return numListeners > 0;
}

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    bool packetProcessed = false;
    1552:	80 e0       	ldi	r24, 0x00	; 0
                datalen);
            packetProcessed = true;
        }
    }
    return packetProcessed;
}
    1554:	df 91       	pop	r29
    1556:	cf 91       	pop	r28
    1558:	1f 91       	pop	r17
    155a:	0f 91       	pop	r16
    155c:	ff 90       	pop	r15
    155e:	ef 90       	pop	r14
    1560:	df 90       	pop	r13
    1562:	cf 90       	pop	r12
    1564:	bf 90       	pop	r11
    1566:	9f 90       	pop	r9
    1568:	8f 90       	pop	r8
    156a:	08 95       	ret

0000156c <_ZN9EtherCard6copyIpEPhPKh>:
#include "../Peripherals/HardwareSerial.h"
#include <stdlib.h>
#include <ctype.h>

void EtherCard::copyIp (uint8_t *dst, const uint8_t *src) {
    memcpy(dst, src, IP_LEN);
    156c:	fb 01       	movw	r30, r22
    156e:	20 81       	ld	r18, Z
    1570:	31 81       	ldd	r19, Z+1	; 0x01
    1572:	fc 01       	movw	r30, r24
    1574:	31 83       	std	Z+1, r19	; 0x01
    1576:	20 83       	st	Z, r18
    1578:	fb 01       	movw	r30, r22
    157a:	22 81       	ldd	r18, Z+2	; 0x02
    157c:	33 81       	ldd	r19, Z+3	; 0x03
    157e:	fc 01       	movw	r30, r24
    1580:	33 83       	std	Z+3, r19	; 0x03
    1582:	22 83       	std	Z+2, r18	; 0x02
    1584:	08 95       	ret

00001586 <_ZN9EtherCard7copyMacEPhPKh>:
}

void EtherCard::copyMac (uint8_t *dst, const uint8_t *src) {
    1586:	dc 01       	movw	r26, r24
    memcpy(dst, src, ETH_LEN);
    1588:	96 e0       	ldi	r25, 0x06	; 6
    158a:	fb 01       	movw	r30, r22
    158c:	01 90       	ld	r0, Z+
    158e:	0d 92       	st	X+, r0
    1590:	9a 95       	dec	r25
    1592:	e1 f7       	brne	.-8      	; 0x158c <_ZN9EtherCard7copyMacEPhPKh+0x6>
    1594:	08 95       	ret

00001596 <_ZN9EtherComm13CheckChecksumEPKch>:
	}
}

bool EtherComm::CheckChecksum(const char *data, uint8_t len){
  //data++; //Ignore first byte, the start byte.
  uint8_t checksum = (uint8_t)(*(data++)); //Start by 'adding' the command to the checksum
    1596:	fc 01       	movw	r30, r24
    1598:	20 81       	ld	r18, Z
  checksum += (uint8_t)(*(data++));
    159a:	dc 01       	movw	r26, r24
    159c:	12 96       	adiw	r26, 0x02	; 2
    159e:	81 81       	ldd	r24, Z+1	; 0x01
    15a0:	92 2f       	mov	r25, r18
    15a2:	98 0f       	add	r25, r24
  while(len-- > 0){
    15a4:	3f ef       	ldi	r19, 0xFF	; 255
    15a6:	36 0f       	add	r19, r22
    15a8:	66 23       	and	r22, r22
    15aa:	61 f0       	breq	.+24     	; 0x15c4 <_ZN9EtherComm13CheckChecksumEPKch+0x2e>
    15ac:	fd 01       	movw	r30, r26
    15ae:	83 2f       	mov	r24, r19
    checksum += (uint8_t)(*(data++));
    15b0:	21 91       	ld	r18, Z+
    15b2:	92 0f       	add	r25, r18

bool EtherComm::CheckChecksum(const char *data, uint8_t len){
  //data++; //Ignore first byte, the start byte.
  uint8_t checksum = (uint8_t)(*(data++)); //Start by 'adding' the command to the checksum
  checksum += (uint8_t)(*(data++));
  while(len-- > 0){
    15b4:	81 50       	subi	r24, 0x01	; 1
    15b6:	e0 f7       	brcc	.-8      	; 0x15b0 <_ZN9EtherComm13CheckChecksumEPKch+0x1a>
    15b8:	23 2f       	mov	r18, r19
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	2f 5f       	subi	r18, 0xFF	; 255
    15be:	3f 4f       	sbci	r19, 0xFF	; 255
    15c0:	a2 0f       	add	r26, r18
    15c2:	b3 1f       	adc	r27, r19
    checksum += (uint8_t)(*(data++));
  }
//  Serial.println((uint8_t)(checksum & CHECKSUM_MASK));
  return (checksum & CHECKSUM_MASK) == (uint8_t)(*data);
    15c4:	81 e0       	ldi	r24, 0x01	; 1
    15c6:	2c 91       	ld	r18, X
    15c8:	29 13       	cpse	r18, r25
    15ca:	80 e0       	ldi	r24, 0x00	; 0
}
    15cc:	08 95       	ret

000015ce <_Z10udpReceivejPhjPKcj>:

//char EtherComm::buffer[BUFFER_SIZE];
uint8_t* EtherComm::buffer = ether.buffer + UDP_DATA_P;

//callback that prints received packets to the serial port
void udpReceive(uint16_t dest_port, uint8_t src_ip[IP_LEN], uint16_t src_port, const char *data, uint16_t packetLen){
    15ce:	0f 93       	push	r16
    15d0:	1f 93       	push	r17
    15d2:	cf 93       	push	r28
    15d4:	df 93       	push	r29
	}
	Serial.println();
	Serial.print("Checksum: ");
	Serial.println((uint8_t)(*index));
*/	
	if(packetLen >= 3){ //At minimum, start byte, command, and checksum.
    15d6:	a8 01       	movw	r20, r16
    15d8:	43 50       	subi	r20, 0x03	; 3
    15da:	51 09       	sbc	r21, r1
    15dc:	4f 3f       	cpi	r20, 0xFF	; 255
    15de:	51 05       	cpc	r21, r1
    15e0:	09 f0       	breq	.+2      	; 0x15e4 <_Z10udpReceivejPhjPKcj+0x16>
    15e2:	88 f4       	brcc	.+34     	; 0x1606 <_Z10udpReceivejPhjPKcj+0x38>
		if(packetLen <= 258){
			uint8_t dataLen = (uint8_t)(packetLen - 3);
			if((uint8_t)data[0] == START_BYTE){
    15e4:	f9 01       	movw	r30, r18
    15e6:	80 81       	ld	r24, Z
    15e8:	8f 3f       	cpi	r24, 0xFF	; 255
    15ea:	69 f4       	brne	.+26     	; 0x1606 <_Z10udpReceivejPhjPKcj+0x38>
    15ec:	e9 01       	movw	r28, r18
	Serial.print("Checksum: ");
	Serial.println((uint8_t)(*index));
*/	
	if(packetLen >= 3){ //At minimum, start byte, command, and checksum.
		if(packetLen <= 258){
			uint8_t dataLen = (uint8_t)(packetLen - 3);
    15ee:	03 50       	subi	r16, 0x03	; 3
			if((uint8_t)data[0] == START_BYTE){
			//		Serial.print("Computed Checksum: ");
				if(EtherComm::CheckChecksum(data, dataLen)){
    15f0:	60 2f       	mov	r22, r16
    15f2:	c9 01       	movw	r24, r18
    15f4:	d0 df       	rcall	.-96     	; 0x1596 <_ZN9EtherComm13CheckChecksumEPKch>
    15f6:	88 23       	and	r24, r24
    15f8:	31 f0       	breq	.+12     	; 0x1606 <_Z10udpReceivejPhjPKcj+0x38>
					EtherComm::CommandReceived((uint8_t)data[1], (const uint8_t*)(data + 2), dataLen);
    15fa:	be 01       	movw	r22, r28
    15fc:	6e 5f       	subi	r22, 0xFE	; 254
    15fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1600:	40 2f       	mov	r20, r16
    1602:	89 81       	ldd	r24, Y+1	; 0x01
    1604:	91 d9       	rcall	.-3294   	; 0x928 <_ZN9EtherComm15CommandReceivedEhPKhh>
				}
			}
		}
	}
}
    1606:	df 91       	pop	r29
    1608:	cf 91       	pop	r28
    160a:	1f 91       	pop	r17
    160c:	0f 91       	pop	r16
    160e:	08 95       	ret

00001610 <_ZN9EtherComm5beginEjjRVhS1_h>:
  }
//  Serial.println((uint8_t)(checksum & CHECKSUM_MASK));
  return (checksum & CHECKSUM_MASK) == (uint8_t)(*data);
}

bool EtherComm::begin(uint16_t recvPort, uint16_t destPort, Register& csDDR, Register& csPort, uint8_t csPin){
    1610:	0f 93       	push	r16
    1612:	cf 93       	push	r28
    1614:	df 93       	push	r29
    1616:	ec 01       	movw	r28, r24
    1618:	ca 01       	movw	r24, r20
    161a:	a9 01       	movw	r20, r18
    161c:	20 2f       	mov	r18, r16
  EtherComm::_recvPort = recvPort;
    161e:	d0 93 4f 05 	sts	0x054F, r29	; 0x80054f <_ZN9EtherComm9_recvPortE+0x1>
    1622:	c0 93 4e 05 	sts	0x054E, r28	; 0x80054e <_ZN9EtherComm9_recvPortE>
  EtherComm::_destPort = destPort;
    1626:	70 93 4d 05 	sts	0x054D, r23	; 0x80054d <_ZN9EtherComm9_destPortE+0x1>
    162a:	60 93 4c 05 	sts	0x054C, r22	; 0x80054c <_ZN9EtherComm9_destPortE>
  
  if (ether.begin(EtherComm::_mymac, csDDR, csPort, csPin) == 0) return false;
    162e:	bc 01       	movw	r22, r24
    1630:	86 e0       	ldi	r24, 0x06	; 6
    1632:	92 e0       	ldi	r25, 0x02	; 2
    1634:	d3 db       	rcall	.-2138   	; 0xddc <_ZN9EtherCard5beginEPKhRVhS3_h>
    1636:	88 23       	and	r24, r24
    1638:	79 f0       	breq	.+30     	; 0x1658 <_ZN9EtherComm5beginEjjRVhS1_h+0x48>
  ether.staticSetup(EtherComm::_myip, EtherComm::_gwip);
    163a:	20 e0       	ldi	r18, 0x00	; 0
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	40 e0       	ldi	r20, 0x00	; 0
    1640:	50 e0       	ldi	r21, 0x00	; 0
    1642:	6c e0       	ldi	r22, 0x0C	; 12
    1644:	72 e0       	ldi	r23, 0x02	; 2
    1646:	80 e1       	ldi	r24, 0x10	; 16
    1648:	92 e0       	ldi	r25, 0x02	; 2
    164a:	e1 db       	rcall	.-2110   	; 0xe0e <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_>
  ether.printIp("GW:  ", ether.gwip);
  ether.printIp("DNS: ", ether.dnsip);
  */
  
  //Register the udpSerialPrint() method to listen to port the receive port.
  ether.udpServerListenOnPort(&udpReceive, recvPort);
    164c:	be 01       	movw	r22, r28
    164e:	87 ee       	ldi	r24, 0xE7	; 231
    1650:	9a e0       	ldi	r25, 0x0A	; 10
    1652:	08 df       	rcall	.-496    	; 0x1464 <_ZN9EtherCard21udpServerListenOnPortEPFvjPhjPKcjEj>
  
  return true;
    1654:	81 e0       	ldi	r24, 0x01	; 1
    1656:	01 c0       	rjmp	.+2      	; 0x165a <_ZN9EtherComm5beginEjjRVhS1_h+0x4a>

bool EtherComm::begin(uint16_t recvPort, uint16_t destPort, Register& csDDR, Register& csPort, uint8_t csPin){
  EtherComm::_recvPort = recvPort;
  EtherComm::_destPort = destPort;
  
  if (ether.begin(EtherComm::_mymac, csDDR, csPort, csPin) == 0) return false;
    1658:	80 e0       	ldi	r24, 0x00	; 0
  
  //Register the udpSerialPrint() method to listen to port the receive port.
  ether.udpServerListenOnPort(&udpReceive, recvPort);
  
  return true;
}
    165a:	df 91       	pop	r29
    165c:	cf 91       	pop	r28
    165e:	0f 91       	pop	r16
    1660:	08 95       	ret

00001662 <_ZN9EtherComm11SendCommandEhh>:

void EtherComm::SendCommand(uint8_t cmd, uint8_t len){
    1662:	0f 93       	push	r16
    1664:	1f 93       	push	r17
    1666:	cf 93       	push	r28
    1668:	df 93       	push	r29
  EtherComm::buffer[0] = START_BYTE;
    166a:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    166e:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    1672:	9f ef       	ldi	r25, 0xFF	; 255
    1674:	90 83       	st	Z, r25
  EtherComm::buffer[1] = cmd;
    1676:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    167a:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    167e:	81 83       	std	Z+1, r24	; 0x01
  //EtherComm::buffer[2] = len;
  
  uint8_t checksum = START_BYTE + cmd;
    1680:	81 50       	subi	r24, 0x01	; 1
  uint8_t* index = &EtherComm::buffer[2]; //TODO why is char* being used? convert ot uint8_t*!!
    1682:	c0 91 00 02 	lds	r28, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    1686:	d0 91 01 02 	lds	r29, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    168a:	de 01       	movw	r26, r28
    168c:	12 96       	adiw	r26, 0x02	; 2
  uint8_t bytes = len;
  while(bytes-- > 0){
    168e:	4f ef       	ldi	r20, 0xFF	; 255
    1690:	46 0f       	add	r20, r22
    1692:	66 23       	and	r22, r22
    1694:	81 f0       	breq	.+32     	; 0x16b6 <_ZN9EtherComm11SendCommandEhh+0x54>
    1696:	fd 01       	movw	r30, r26
    1698:	50 e0       	ldi	r21, 0x00	; 0
    169a:	9a 01       	movw	r18, r20
    169c:	2d 5f       	subi	r18, 0xFD	; 253
    169e:	3f 4f       	sbci	r19, 0xFF	; 255
    16a0:	2c 0f       	add	r18, r28
    16a2:	3d 1f       	adc	r19, r29
    checksum += (uint8_t)(*(index++));  
    16a4:	91 91       	ld	r25, Z+
    16a6:	89 0f       	add	r24, r25
  //EtherComm::buffer[2] = len;
  
  uint8_t checksum = START_BYTE + cmd;
  uint8_t* index = &EtherComm::buffer[2]; //TODO why is char* being used? convert ot uint8_t*!!
  uint8_t bytes = len;
  while(bytes-- > 0){
    16a8:	e2 17       	cp	r30, r18
    16aa:	f3 07       	cpc	r31, r19
    16ac:	d9 f7       	brne	.-10     	; 0x16a4 <_ZN9EtherComm11SendCommandEhh+0x42>
    16ae:	4f 5f       	subi	r20, 0xFF	; 255
    16b0:	5f 4f       	sbci	r21, 0xFF	; 255
    16b2:	a4 0f       	add	r26, r20
    16b4:	b5 1f       	adc	r27, r21
    checksum += (uint8_t)(*(index++));  
  }
  (*index) = (uint8_t)(checksum & CHECKSUM_MASK);
    16b6:	8c 93       	st	X, r24

  //Serial.print("Send: ");
  //Serial.println(len);
  ether.sendUdp(EtherComm::buffer, (uint16_t)len + (uint16_t)3, _recvPort, _destIP, _destPort);
    16b8:	00 91 4c 05 	lds	r16, 0x054C	; 0x80054c <_ZN9EtherComm9_destPortE>
    16bc:	10 91 4d 05 	lds	r17, 0x054D	; 0x80054d <_ZN9EtherComm9_destPortE+0x1>
    16c0:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <_ZN9EtherComm9_recvPortE>
    16c4:	50 91 4f 05 	lds	r21, 0x054F	; 0x80054f <_ZN9EtherComm9_recvPortE+0x1>
    16c8:	70 e0       	ldi	r23, 0x00	; 0
    16ca:	6d 5f       	subi	r22, 0xFD	; 253
    16cc:	7f 4f       	sbci	r23, 0xFF	; 255
    16ce:	22 e0       	ldi	r18, 0x02	; 2
    16d0:	32 e0       	ldi	r19, 0x02	; 2
    16d2:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    16d6:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    16da:	52 dd       	rcall	.-1372   	; 0x1180 <_ZN9EtherCard7sendUdpEPKhjjS1_j>
}
    16dc:	df 91       	pop	r29
    16de:	cf 91       	pop	r28
    16e0:	1f 91       	pop	r17
    16e2:	0f 91       	pop	r16
    16e4:	08 95       	ret

000016e6 <main>:
#include "TestIMU.h"
#include <avr/interrupt.h>

int main(void){
	//TestIMU();
	sei(); //Enable global interrupts
    16e6:	78 94       	sei
	public:
	inline HardwareSerial(
	volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
	volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
	volatile uint8_t *ucsrc, volatile uint8_t *udr);
	void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    16e8:	26 e0       	ldi	r18, 0x06	; 6
    16ea:	40 e8       	ldi	r20, 0x80	; 128
    16ec:	55 e2       	ldi	r21, 0x25	; 37
    16ee:	60 e0       	ldi	r22, 0x00	; 0
    16f0:	70 e0       	ldi	r23, 0x00	; 0
    16f2:	80 e5       	ldi	r24, 0x50	; 80
    16f4:	95 e0       	ldi	r25, 0x05	; 5
    16f6:	0f d1       	rcall	.+542    	; 0x1916 <_ZN14HardwareSerial5beginEmh>
	Serial.begin(9600);
	Serial.println("\nInitializing...");
    16f8:	6b e2       	ldi	r22, 0x2B	; 43
    16fa:	72 e0       	ldi	r23, 0x02	; 2
    16fc:	80 e5       	ldi	r24, 0x50	; 80
    16fe:	95 e0       	ldi	r25, 0x05	; 5
	
	if(!rov.begin()){
    1700:	97 d6       	rcall	.+3374   	; 0x2430 <_ZN5Print7printlnEPKc>
    1702:	cf d5       	rcall	.+2974   	; 0x22a2 <_ZN5Robot5beginEv>
    1704:	81 11       	cpse	r24, r1
    1706:	06 c0       	rjmp	.+12     	; 0x1714 <main+0x2e>
		Serial.println("Failed to initialize robot.");
    1708:	6c e3       	ldi	r22, 0x3C	; 60
    170a:	72 e0       	ldi	r23, 0x02	; 2
    170c:	80 e5       	ldi	r24, 0x50	; 80
    170e:	95 e0       	ldi	r25, 0x05	; 5
    1710:	8f d6       	rcall	.+3358   	; 0x2430 <_ZN5Print7printlnEPKc>
    1712:	ff cf       	rjmp	.-2      	; 0x1712 <main+0x2c>
		while(1);
	}
	Serial.println("Robot initialized.");
    1714:	68 e5       	ldi	r22, 0x58	; 88
    1716:	72 e0       	ldi	r23, 0x02	; 2
    1718:	80 e5       	ldi	r24, 0x50	; 80
    171a:	95 e0       	ldi	r25, 0x05	; 5
    171c:	89 d6       	rcall	.+3346   	; 0x2430 <_ZN5Print7printlnEPKc>
	
	if(!EtherComm::begin((uint16_t)6001, (uint16_t)6002, EthernetDDR, EthernetPort, EthernetPin_CS)){
    171e:	00 e2       	ldi	r16, 0x20	; 32
    1720:	22 e0       	ldi	r18, 0x02	; 2
    1722:	31 e0       	ldi	r19, 0x01	; 1
    1724:	41 e0       	ldi	r20, 0x01	; 1
    1726:	51 e0       	ldi	r21, 0x01	; 1
    1728:	62 e7       	ldi	r22, 0x72	; 114
    172a:	77 e1       	ldi	r23, 0x17	; 23
    172c:	81 e7       	ldi	r24, 0x71	; 113
    172e:	97 e1       	ldi	r25, 0x17	; 23
    1730:	6f df       	rcall	.-290    	; 0x1610 <_ZN9EtherComm5beginEjjRVhS1_h>
    1732:	81 11       	cpse	r24, r1
		Serial.println("Failed to access Ethernet controller.");
    1734:	06 c0       	rjmp	.+12     	; 0x1742 <main+0x5c>
    1736:	6b e6       	ldi	r22, 0x6B	; 107
    1738:	72 e0       	ldi	r23, 0x02	; 2
    173a:	80 e5       	ldi	r24, 0x50	; 80
    173c:	95 e0       	ldi	r25, 0x05	; 5
		while(1);
	}
	Serial.println("Connected to controller.");
    173e:	78 d6       	rcall	.+3312   	; 0x2430 <_ZN5Print7printlnEPKc>
    1740:	ff cf       	rjmp	.-2      	; 0x1740 <main+0x5a>
    1742:	61 e9       	ldi	r22, 0x91	; 145
    1744:	72 e0       	ldi	r23, 0x02	; 2
    1746:	80 e5       	ldi	r24, 0x50	; 80
    1748:	95 e0       	ldi	r25, 0x05	; 5
  static bool begin(uint16_t recvPort, uint16_t destPort, Register& csDDR, Register& csPort, uint8_t csPin);

  friend void udpReceive(uint16_t dest_port, uint8_t src_ip[IP_LEN], uint16_t src_port, const char *data, uint16_t len);

  static void Loop(){
    ether.packetLoop(ether.packetReceive());
    174a:	72 d6       	rcall	.+3300   	; 0x2430 <_ZN5Print7printlnEPKc>
    174c:	e2 da       	rcall	.-2620   	; 0xd12 <_ZN8ENC28J6013packetReceiveEv>
    174e:	51 dd       	rcall	.-1374   	; 0x11f2 <_ZN9EtherCard10packetLoopEj>
    1750:	fd cf       	rjmp	.-6      	; 0x174c <main+0x66>

00001752 <_ZN14HardwareSerial9availableEv>:
    1752:	fc 01       	movw	r30, r24
	#endif
	#if defined(HAVE_HWSERIAL2)
	if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
	#endif
	#if defined(HAVE_HWSERIAL3)
	if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    1754:	97 85       	ldd	r25, Z+15	; 0x0f
    1756:	20 89       	ldd	r18, Z+16	; 0x10
    1758:	89 2f       	mov	r24, r25
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	80 5c       	subi	r24, 0xC0	; 192
    175e:	9f 4f       	sbci	r25, 0xFF	; 255
    1760:	82 1b       	sub	r24, r18
    1762:	91 09       	sbc	r25, r1
    1764:	8f 73       	andi	r24, 0x3F	; 63
    1766:	99 27       	eor	r25, r25
    1768:	08 95       	ret

0000176a <_ZN14HardwareSerial4peekEv>:
    176a:	fc 01       	movw	r30, r24
    176c:	97 85       	ldd	r25, Z+15	; 0x0f
    176e:	80 89       	ldd	r24, Z+16	; 0x10
    1770:	98 17       	cp	r25, r24
    1772:	31 f0       	breq	.+12     	; 0x1780 <_ZN14HardwareSerial4peekEv+0x16>
    1774:	80 89       	ldd	r24, Z+16	; 0x10
    1776:	e8 0f       	add	r30, r24
    1778:	f1 1d       	adc	r31, r1
    177a:	83 89       	ldd	r24, Z+19	; 0x13
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	08 95       	ret
    1780:	8f ef       	ldi	r24, 0xFF	; 255
    1782:	9f ef       	ldi	r25, 0xFF	; 255
    1784:	08 95       	ret

00001786 <_ZN14HardwareSerial4readEv>:
    1786:	fc 01       	movw	r30, r24
    1788:	97 85       	ldd	r25, Z+15	; 0x0f
    178a:	80 89       	ldd	r24, Z+16	; 0x10
    178c:	98 17       	cp	r25, r24
    178e:	61 f0       	breq	.+24     	; 0x17a8 <_ZN14HardwareSerial4readEv+0x22>
    1790:	80 89       	ldd	r24, Z+16	; 0x10
    1792:	df 01       	movw	r26, r30
    1794:	a8 0f       	add	r26, r24
    1796:	b1 1d       	adc	r27, r1
    1798:	53 96       	adiw	r26, 0x13	; 19
    179a:	8c 91       	ld	r24, X
    179c:	90 89       	ldd	r25, Z+16	; 0x10
    179e:	9f 5f       	subi	r25, 0xFF	; 255
    17a0:	9f 73       	andi	r25, 0x3F	; 63
    17a2:	90 8b       	std	Z+16, r25	; 0x10
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	08 95       	ret
    17a8:	8f ef       	ldi	r24, 0xFF	; 255
    17aa:	9f ef       	ldi	r25, 0xFF	; 255
    17ac:	08 95       	ret

000017ae <_ZN14HardwareSerial17availableForWriteEv>:
    17ae:	fc 01       	movw	r30, r24
    17b0:	21 89       	ldd	r18, Z+17	; 0x11
    17b2:	32 89       	ldd	r19, Z+18	; 0x12
    17b4:	23 17       	cp	r18, r19
    17b6:	38 f0       	brcs	.+14     	; 0x17c6 <_ZN14HardwareSerial17availableForWriteEv+0x18>
    17b8:	8f e3       	ldi	r24, 0x3F	; 63
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	82 1b       	sub	r24, r18
    17be:	91 09       	sbc	r25, r1
    17c0:	83 0f       	add	r24, r19
    17c2:	91 1d       	adc	r25, r1
    17c4:	08 95       	ret
    17c6:	83 2f       	mov	r24, r19
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	82 1b       	sub	r24, r18
    17cc:	91 09       	sbc	r25, r1
    17ce:	01 97       	sbiw	r24, 0x01	; 1
    17d0:	08 95       	ret

000017d2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    17d2:	fc 01       	movw	r30, r24
	// If interrupts are enabled, there must be more data in the output
	// buffer. Send the next byte
	unsigned char c = _tx_buffer[_tx_buffer_tail];
    17d4:	82 89       	ldd	r24, Z+18	; 0x12
    17d6:	df 01       	movw	r26, r30
    17d8:	a8 0f       	add	r26, r24
    17da:	b1 1d       	adc	r27, r1
    17dc:	ad 5a       	subi	r26, 0xAD	; 173
    17de:	bf 4f       	sbci	r27, 0xFF	; 255
    17e0:	8c 91       	ld	r24, X
	_tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    17e2:	22 89       	ldd	r18, Z+18	; 0x12
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	2f 5f       	subi	r18, 0xFF	; 255
    17e8:	3f 4f       	sbci	r19, 0xFF	; 255
    17ea:	2f 73       	andi	r18, 0x3F	; 63
    17ec:	30 78       	andi	r19, 0x80	; 128
    17ee:	33 23       	and	r19, r19
    17f0:	34 f4       	brge	.+12     	; 0x17fe <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x2c>
    17f2:	21 50       	subi	r18, 0x01	; 1
    17f4:	31 09       	sbc	r19, r1
    17f6:	20 6c       	ori	r18, 0xC0	; 192
    17f8:	3f 6f       	ori	r19, 0xFF	; 255
    17fa:	2f 5f       	subi	r18, 0xFF	; 255
    17fc:	3f 4f       	sbci	r19, 0xFF	; 255
    17fe:	22 8b       	std	Z+18, r18	; 0x12

	*_udr = c;
    1800:	a4 85       	ldd	r26, Z+12	; 0x0c
    1802:	b5 85       	ldd	r27, Z+13	; 0x0d
    1804:	8c 93       	st	X, r24
	// location". This makes sure flush() won't return until the bytes
	// actually got written. Other r/w bits are preserved, and zeroes
	// written to the rest.

	#ifdef MPCM0
	*_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1806:	a6 81       	ldd	r26, Z+6	; 0x06
    1808:	b7 81       	ldd	r27, Z+7	; 0x07
    180a:	8c 91       	ld	r24, X
    180c:	83 70       	andi	r24, 0x03	; 3
    180e:	80 64       	ori	r24, 0x40	; 64
    1810:	8c 93       	st	X, r24
	#else
	*_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
	#endif

	if (_tx_buffer_head == _tx_buffer_tail) {
    1812:	91 89       	ldd	r25, Z+17	; 0x11
    1814:	82 89       	ldd	r24, Z+18	; 0x12
    1816:	98 13       	cpse	r25, r24
    1818:	06 c0       	rjmp	.+12     	; 0x1826 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x54>
		// Buffer empty, so disable interrupts
		cbi(*_ucsrb, UDRIE0);
    181a:	00 84       	ldd	r0, Z+8	; 0x08
    181c:	f1 85       	ldd	r31, Z+9	; 0x09
    181e:	e0 2d       	mov	r30, r0
    1820:	80 81       	ld	r24, Z
    1822:	8f 7d       	andi	r24, 0xDF	; 223
    1824:	80 83       	st	Z, r24
    1826:	08 95       	ret

00001828 <_ZN14HardwareSerial5flushEv>:
	if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
	return tail - head - 1;
}

void HardwareSerial::flush()
{
    1828:	cf 93       	push	r28
    182a:	df 93       	push	r29
    182c:	ec 01       	movw	r28, r24
	// If we have never written a byte, no need to flush. This special
	// case is needed since there is no way to force the TXC (transmit
	// complete) bit to 1 during initialization
	if (!_written)
    182e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1830:	88 23       	and	r24, r24
    1832:	d1 f0       	breq	.+52     	; 0x1868 <_ZN14HardwareSerial5flushEv+0x40>
	return;

	while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1834:	e8 85       	ldd	r30, Y+8	; 0x08
    1836:	f9 85       	ldd	r31, Y+9	; 0x09
    1838:	80 81       	ld	r24, Z
    183a:	85 fd       	sbrc	r24, 5
    183c:	05 c0       	rjmp	.+10     	; 0x1848 <_ZN14HardwareSerial5flushEv+0x20>
    183e:	ae 81       	ldd	r26, Y+6	; 0x06
    1840:	bf 81       	ldd	r27, Y+7	; 0x07
    1842:	8c 91       	ld	r24, X
    1844:	86 fd       	sbrc	r24, 6
    1846:	10 c0       	rjmp	.+32     	; 0x1868 <_ZN14HardwareSerial5flushEv+0x40>
		if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1848:	0f b6       	in	r0, 0x3f	; 63
    184a:	07 fc       	sbrc	r0, 7
    184c:	f5 cf       	rjmp	.-22     	; 0x1838 <_ZN14HardwareSerial5flushEv+0x10>
    184e:	80 81       	ld	r24, Z
    1850:	85 ff       	sbrs	r24, 5
    1852:	f2 cf       	rjmp	.-28     	; 0x1838 <_ZN14HardwareSerial5flushEv+0x10>
    1854:	03 c0       	rjmp	.+6      	; 0x185c <_ZN14HardwareSerial5flushEv+0x34>
		// Interrupts are globally disabled, but the DR empty
		// interrupt should be enabled, so poll the DR empty flag to
		// prevent deadlock
		if (bit_is_set(*_ucsra, UDRE0))
		_tx_udr_empty_irq();
    1856:	ce 01       	movw	r24, r28
    1858:	bc df       	rcall	.-136    	; 0x17d2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    185a:	ec cf       	rjmp	.-40     	; 0x1834 <_ZN14HardwareSerial5flushEv+0xc>
	while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
		if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
		// Interrupts are globally disabled, but the DR empty
		// interrupt should be enabled, so poll the DR empty flag to
		// prevent deadlock
		if (bit_is_set(*_ucsra, UDRE0))
    185c:	ae 81       	ldd	r26, Y+6	; 0x06
    185e:	bf 81       	ldd	r27, Y+7	; 0x07
    1860:	8c 91       	ld	r24, X
    1862:	85 ff       	sbrs	r24, 5
    1864:	e9 cf       	rjmp	.-46     	; 0x1838 <_ZN14HardwareSerial5flushEv+0x10>
    1866:	f7 cf       	rjmp	.-18     	; 0x1856 <_ZN14HardwareSerial5flushEv+0x2e>
		_tx_udr_empty_irq();
	}
	// If we get here, nothing is queued anymore (DRIE is disabled) and
	// the hardware finished tranmission (TXC is set).
}
    1868:	df 91       	pop	r29
    186a:	cf 91       	pop	r28
    186c:	08 95       	ret

0000186e <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    186e:	0f 93       	push	r16
    1870:	1f 93       	push	r17
    1872:	cf 93       	push	r28
    1874:	df 93       	push	r29
    1876:	ec 01       	movw	r28, r24
	_written = true;
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	8e 87       	std	Y+14, r24	; 0x0e
	// If the buffer and the data register is empty, just write the byte
	// to the data register and be done. This shortcut helps
	// significantly improve the effective datarate at high (>
	// 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
	if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    187c:	99 89       	ldd	r25, Y+17	; 0x11
    187e:	8a 89       	ldd	r24, Y+18	; 0x12
    1880:	98 13       	cpse	r25, r24
    1882:	25 c0       	rjmp	.+74     	; 0x18ce <_ZN14HardwareSerial5writeEh+0x60>
    1884:	ee 81       	ldd	r30, Y+6	; 0x06
    1886:	ff 81       	ldd	r31, Y+7	; 0x07
    1888:	80 81       	ld	r24, Z
    188a:	85 fd       	sbrc	r24, 5
    188c:	31 c0       	rjmp	.+98     	; 0x18f0 <_ZN14HardwareSerial5writeEh+0x82>
    188e:	1f c0       	rjmp	.+62     	; 0x18ce <_ZN14HardwareSerial5writeEh+0x60>
	}
	tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
	// If the output buffer is full, there's nothing for it other than to
	// wait for the interrupt handler to empty it a bit
	while (i == _tx_buffer_tail) {
    1890:	8a 89       	ldd	r24, Y+18	; 0x12
    1892:	18 13       	cpse	r17, r24
    1894:	0b c0       	rjmp	.+22     	; 0x18ac <_ZN14HardwareSerial5writeEh+0x3e>
		if (bit_is_clear(SREG, SREG_I)) {
    1896:	0f b6       	in	r0, 0x3f	; 63
    1898:	07 fc       	sbrc	r0, 7
    189a:	fa cf       	rjmp	.-12     	; 0x1890 <_ZN14HardwareSerial5writeEh+0x22>
			// Interrupts are disabled, so we'll have to poll the data
			// register empty flag ourselves. If it is set, pretend an
			// interrupt has happened and call the handler to free up
			// space for us.
			if(bit_is_set(*_ucsra, UDRE0))
    189c:	ee 81       	ldd	r30, Y+6	; 0x06
    189e:	ff 81       	ldd	r31, Y+7	; 0x07
    18a0:	80 81       	ld	r24, Z
    18a2:	85 ff       	sbrs	r24, 5
    18a4:	f5 cf       	rjmp	.-22     	; 0x1890 <_ZN14HardwareSerial5writeEh+0x22>
			_tx_udr_empty_irq();
    18a6:	ce 01       	movw	r24, r28
    18a8:	94 df       	rcall	.-216    	; 0x17d2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    18aa:	f2 cf       	rjmp	.-28     	; 0x1890 <_ZN14HardwareSerial5writeEh+0x22>
			} else {
			// nop, the interrupt handler will free up space for us
		}
	}

	_tx_buffer[_tx_buffer_head] = c;
    18ac:	89 89       	ldd	r24, Y+17	; 0x11
    18ae:	fe 01       	movw	r30, r28
    18b0:	e8 0f       	add	r30, r24
    18b2:	f1 1d       	adc	r31, r1
    18b4:	ed 5a       	subi	r30, 0xAD	; 173
    18b6:	ff 4f       	sbci	r31, 0xFF	; 255
    18b8:	00 83       	st	Z, r16

	// make atomic to prevent execution of ISR between setting the
	// head pointer and setting the interrupt flag resulting in buffer
	// retransmission
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    18ba:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    18bc:	f8 94       	cli
		_tx_buffer_head = i;
    18be:	19 8b       	std	Y+17, r17	; 0x11
		sbi(*_ucsrb, UDRIE0);
    18c0:	e8 85       	ldd	r30, Y+8	; 0x08
    18c2:	f9 85       	ldd	r31, Y+9	; 0x09
    18c4:	80 81       	ld	r24, Z
    18c6:	80 62       	ori	r24, 0x20	; 32
    18c8:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    18ca:	9f bf       	out	0x3f, r25	; 63
	}
	
	return 1;
    18cc:	1d c0       	rjmp	.+58     	; 0x1908 <_ZN14HardwareSerial5writeEh+0x9a>
			*_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
			#endif
		}
		return 1;
	}
	tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    18ce:	29 89       	ldd	r18, Y+17	; 0x11
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	2f 5f       	subi	r18, 0xFF	; 255
    18d4:	3f 4f       	sbci	r19, 0xFF	; 255
    18d6:	2f 73       	andi	r18, 0x3F	; 63
    18d8:	30 78       	andi	r19, 0x80	; 128
    18da:	33 23       	and	r19, r19
    18dc:	34 f4       	brge	.+12     	; 0x18ea <_ZN14HardwareSerial5writeEh+0x7c>
    18de:	21 50       	subi	r18, 0x01	; 1
    18e0:	31 09       	sbc	r19, r1
    18e2:	20 6c       	ori	r18, 0xC0	; 192
    18e4:	3f 6f       	ori	r19, 0xFF	; 255
    18e6:	2f 5f       	subi	r18, 0xFF	; 255
    18e8:	3f 4f       	sbci	r19, 0xFF	; 255
    18ea:	06 2f       	mov	r16, r22
    18ec:	12 2f       	mov	r17, r18
    18ee:	d0 cf       	rjmp	.-96     	; 0x1890 <_ZN14HardwareSerial5writeEh+0x22>
		// So writing UDR must happen first.
		// Writing UDR and clearing TC must be done atomically, otherwise
		// interrupts might delay the TXC clear so the byte written to UDR
		// is transmitted (setting TXC) before clearing TXC. Then TXC will
		// be cleared when no bytes are left, causing flush() to hang
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    18f0:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    18f2:	f8 94       	cli
			*_udr = c;
    18f4:	ec 85       	ldd	r30, Y+12	; 0x0c
    18f6:	fd 85       	ldd	r31, Y+13	; 0x0d
    18f8:	60 83       	st	Z, r22
			#ifdef MPCM0
			*_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    18fa:	ee 81       	ldd	r30, Y+6	; 0x06
    18fc:	ff 81       	ldd	r31, Y+7	; 0x07
    18fe:	80 81       	ld	r24, Z
    1900:	83 70       	andi	r24, 0x03	; 3
    1902:	80 64       	ori	r24, 0x40	; 64
    1904:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1906:	9f bf       	out	0x3f, r25	; 63
		_tx_buffer_head = i;
		sbi(*_ucsrb, UDRIE0);
	}
	
	return 1;
}
    1908:	81 e0       	ldi	r24, 0x01	; 1
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	df 91       	pop	r29
    190e:	cf 91       	pop	r28
    1910:	1f 91       	pop	r17
    1912:	0f 91       	pop	r16
    1914:	08 95       	ret

00001916 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, uint8_t config)
{
    1916:	cf 92       	push	r12
    1918:	df 92       	push	r13
    191a:	ef 92       	push	r14
    191c:	ff 92       	push	r15
    191e:	1f 93       	push	r17
    1920:	cf 93       	push	r28
    1922:	df 93       	push	r29
    1924:	ec 01       	movw	r28, r24
    1926:	6a 01       	movw	r12, r20
    1928:	7b 01       	movw	r14, r22
    192a:	12 2f       	mov	r17, r18
	// Try u2x mode first
	uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
	*_ucsra = 1 << U2X0;
    192c:	ee 81       	ldd	r30, Y+6	; 0x06
    192e:	ff 81       	ldd	r31, Y+7	; 0x07
    1930:	82 e0       	ldi	r24, 0x02	; 2
    1932:	80 83       	st	Z, r24
	// hardcoded exception for 57600 for compatibility with the bootloader
	// shipped with the Duemilanove and previous boards and the firmware
	// on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
	// be > 4095, so switch back to non-u2x mode if the baud rate is too
	// low.
	if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1934:	41 15       	cp	r20, r1
    1936:	51 4e       	sbci	r21, 0xE1	; 225
    1938:	61 05       	cpc	r22, r1
    193a:	71 05       	cpc	r23, r1
    193c:	a9 f0       	breq	.+42     	; 0x1968 <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, uint8_t config)
{
	// Try u2x mode first
	uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    193e:	60 e0       	ldi	r22, 0x00	; 0
    1940:	79 e0       	ldi	r23, 0x09	; 9
    1942:	8d e3       	ldi	r24, 0x3D	; 61
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	a7 01       	movw	r20, r14
    1948:	96 01       	movw	r18, r12
    194a:	5e d7       	rcall	.+3772   	; 0x2808 <__udivmodsi4>
    194c:	da 01       	movw	r26, r20
    194e:	c9 01       	movw	r24, r18
    1950:	01 97       	sbiw	r24, 0x01	; 1
    1952:	a1 09       	sbc	r26, r1
    1954:	b1 09       	sbc	r27, r1
    1956:	b6 95       	lsr	r27
    1958:	a7 95       	ror	r26
    195a:	97 95       	ror	r25
    195c:	87 95       	ror	r24
    195e:	9c 01       	movw	r18, r24
	// hardcoded exception for 57600 for compatibility with the bootloader
	// shipped with the Duemilanove and previous boards and the firmware
	// on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
	// be > 4095, so switch back to non-u2x mode if the baud rate is too
	// low.
	if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1960:	21 15       	cp	r18, r1
    1962:	80 e1       	ldi	r24, 0x10	; 16
    1964:	38 07       	cpc	r19, r24
    1966:	a0 f0       	brcs	.+40     	; 0x1990 <_ZN14HardwareSerial5beginEmh+0x7a>
	{
		*_ucsra = 0;
    1968:	ee 81       	ldd	r30, Y+6	; 0x06
    196a:	ff 81       	ldd	r31, Y+7	; 0x07
    196c:	10 82       	st	Z, r1
		baud_setting = (F_CPU / 8 / baud - 1) / 2;
    196e:	60 e8       	ldi	r22, 0x80	; 128
    1970:	74 e8       	ldi	r23, 0x84	; 132
    1972:	8e e1       	ldi	r24, 0x1E	; 30
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	a7 01       	movw	r20, r14
    1978:	96 01       	movw	r18, r12
    197a:	46 d7       	rcall	.+3724   	; 0x2808 <__udivmodsi4>
    197c:	da 01       	movw	r26, r20
    197e:	c9 01       	movw	r24, r18
    1980:	01 97       	sbiw	r24, 0x01	; 1
    1982:	a1 09       	sbc	r26, r1
    1984:	b1 09       	sbc	r27, r1
    1986:	b6 95       	lsr	r27
    1988:	a7 95       	ror	r26
    198a:	97 95       	ror	r25
    198c:	87 95       	ror	r24
    198e:	9c 01       	movw	r18, r24
	}

	// assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
	*_ubrrh = baud_setting >> 8;
    1990:	ea 81       	ldd	r30, Y+2	; 0x02
    1992:	fb 81       	ldd	r31, Y+3	; 0x03
    1994:	30 83       	st	Z, r19
	*_ubrrl = baud_setting;
    1996:	ec 81       	ldd	r30, Y+4	; 0x04
    1998:	fd 81       	ldd	r31, Y+5	; 0x05
    199a:	20 83       	st	Z, r18

	_written = false;
    199c:	1e 86       	std	Y+14, r1	; 0x0e

	//set the data bits, parity, and stop bits
	#if defined(__AVR_ATmega8__)
	config |= 0x80; // select UCSRC register (shared with UBRRH)
	#endif
	*_ucsrc = config;
    199e:	ea 85       	ldd	r30, Y+10	; 0x0a
    19a0:	fb 85       	ldd	r31, Y+11	; 0x0b
    19a2:	10 83       	st	Z, r17
	
	sbi(*_ucsrb, RXEN0);
    19a4:	e8 85       	ldd	r30, Y+8	; 0x08
    19a6:	f9 85       	ldd	r31, Y+9	; 0x09
    19a8:	80 81       	ld	r24, Z
    19aa:	80 61       	ori	r24, 0x10	; 16
    19ac:	80 83       	st	Z, r24
	sbi(*_ucsrb, TXEN0);
    19ae:	e8 85       	ldd	r30, Y+8	; 0x08
    19b0:	f9 85       	ldd	r31, Y+9	; 0x09
    19b2:	80 81       	ld	r24, Z
    19b4:	88 60       	ori	r24, 0x08	; 8
    19b6:	80 83       	st	Z, r24
	sbi(*_ucsrb, RXCIE0);
    19b8:	e8 85       	ldd	r30, Y+8	; 0x08
    19ba:	f9 85       	ldd	r31, Y+9	; 0x09
    19bc:	80 81       	ld	r24, Z
    19be:	80 68       	ori	r24, 0x80	; 128
    19c0:	80 83       	st	Z, r24
	cbi(*_ucsrb, UDRIE0);
    19c2:	e8 85       	ldd	r30, Y+8	; 0x08
    19c4:	f9 85       	ldd	r31, Y+9	; 0x09
    19c6:	80 81       	ld	r24, Z
    19c8:	8f 7d       	andi	r24, 0xDF	; 223
    19ca:	80 83       	st	Z, r24
}
    19cc:	df 91       	pop	r29
    19ce:	cf 91       	pop	r28
    19d0:	1f 91       	pop	r17
    19d2:	ff 90       	pop	r15
    19d4:	ef 90       	pop	r14
    19d6:	df 90       	pop	r13
    19d8:	cf 90       	pop	r12
    19da:	08 95       	ret

000019dc <__vector_25>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
}
    19dc:	1f 92       	push	r1
    19de:	0f 92       	push	r0
    19e0:	0f b6       	in	r0, 0x3f	; 63
    19e2:	0f 92       	push	r0
    19e4:	11 24       	eor	r1, r1
    19e6:	0b b6       	in	r0, 0x3b	; 59
    19e8:	0f 92       	push	r0
    19ea:	2f 93       	push	r18
    19ec:	8f 93       	push	r24
    19ee:	9f 93       	push	r25
    19f0:	af 93       	push	r26
    19f2:	bf 93       	push	r27
    19f4:	ef 93       	push	r30
    19f6:	ff 93       	push	r31
    19f8:	e0 91 56 05 	lds	r30, 0x0556	; 0x800556 <Serial+0x6>
    19fc:	f0 91 57 05 	lds	r31, 0x0557	; 0x800557 <Serial+0x7>
    1a00:	80 81       	ld	r24, Z
    1a02:	82 fd       	sbrc	r24, 2
    1a04:	14 c0       	rjmp	.+40     	; 0x1a2e <__vector_25+0x52>
    1a06:	e0 e5       	ldi	r30, 0x50	; 80
    1a08:	f5 e0       	ldi	r31, 0x05	; 5
    1a0a:	a4 85       	ldd	r26, Z+12	; 0x0c
    1a0c:	b5 85       	ldd	r27, Z+13	; 0x0d
    1a0e:	2c 91       	ld	r18, X
    1a10:	87 85       	ldd	r24, Z+15	; 0x0f
    1a12:	8f 5f       	subi	r24, 0xFF	; 255
    1a14:	8f 70       	andi	r24, 0x0F	; 15
    1a16:	90 89       	ldd	r25, Z+16	; 0x10
    1a18:	89 17       	cp	r24, r25
    1a1a:	71 f0       	breq	.+28     	; 0x1a38 <__vector_25+0x5c>
    1a1c:	df 01       	movw	r26, r30
    1a1e:	e7 85       	ldd	r30, Z+15	; 0x0f
    1a20:	f0 e0       	ldi	r31, 0x00	; 0
    1a22:	e0 5b       	subi	r30, 0xB0	; 176
    1a24:	fa 4f       	sbci	r31, 0xFA	; 250
    1a26:	23 8b       	std	Z+19, r18	; 0x13
    1a28:	1f 96       	adiw	r26, 0x0f	; 15
    1a2a:	8c 93       	st	X, r24
    1a2c:	05 c0       	rjmp	.+10     	; 0x1a38 <__vector_25+0x5c>
    1a2e:	e0 91 5c 05 	lds	r30, 0x055C	; 0x80055c <Serial+0xc>
    1a32:	f0 91 5d 05 	lds	r31, 0x055D	; 0x80055d <Serial+0xd>
    1a36:	80 81       	ld	r24, Z
    1a38:	ff 91       	pop	r31
    1a3a:	ef 91       	pop	r30
    1a3c:	bf 91       	pop	r27
    1a3e:	af 91       	pop	r26
    1a40:	9f 91       	pop	r25
    1a42:	8f 91       	pop	r24
    1a44:	2f 91       	pop	r18
    1a46:	0f 90       	pop	r0
    1a48:	0b be       	out	0x3b, r0	; 59
    1a4a:	0f 90       	pop	r0
    1a4c:	0f be       	out	0x3f, r0	; 63
    1a4e:	0f 90       	pop	r0
    1a50:	1f 90       	pop	r1
    1a52:	18 95       	reti

00001a54 <__vector_26>:
    1a54:	1f 92       	push	r1
    1a56:	0f 92       	push	r0
    1a58:	0f b6       	in	r0, 0x3f	; 63
    1a5a:	0f 92       	push	r0
    1a5c:	11 24       	eor	r1, r1
    1a5e:	0b b6       	in	r0, 0x3b	; 59
    1a60:	0f 92       	push	r0
    1a62:	2f 93       	push	r18
    1a64:	3f 93       	push	r19
    1a66:	4f 93       	push	r20
    1a68:	5f 93       	push	r21
    1a6a:	6f 93       	push	r22
    1a6c:	7f 93       	push	r23
    1a6e:	8f 93       	push	r24
    1a70:	9f 93       	push	r25
    1a72:	af 93       	push	r26
    1a74:	bf 93       	push	r27
    1a76:	ef 93       	push	r30
    1a78:	ff 93       	push	r31
    1a7a:	80 e5       	ldi	r24, 0x50	; 80
    1a7c:	95 e0       	ldi	r25, 0x05	; 5
    1a7e:	a9 de       	rcall	.-686    	; 0x17d2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1a80:	ff 91       	pop	r31
    1a82:	ef 91       	pop	r30
    1a84:	bf 91       	pop	r27
    1a86:	af 91       	pop	r26
    1a88:	9f 91       	pop	r25
    1a8a:	8f 91       	pop	r24
    1a8c:	7f 91       	pop	r23
    1a8e:	6f 91       	pop	r22
    1a90:	5f 91       	pop	r21
    1a92:	4f 91       	pop	r20
    1a94:	3f 91       	pop	r19
    1a96:	2f 91       	pop	r18
    1a98:	0f 90       	pop	r0
    1a9a:	0b be       	out	0x3b, r0	; 59
    1a9c:	0f 90       	pop	r0
    1a9e:	0f be       	out	0x3f, r0	; 63
    1aa0:	0f 90       	pop	r0
    1aa2:	1f 90       	pop	r1
    1aa4:	18 95       	reti

00001aa6 <_GLOBAL__sub_I___vector_25>:
volatile uint8_t *ucsrc, volatile uint8_t *udr) :
_ubrrh(ubrrh), _ubrrl(ubrrl),
_ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
_udr(udr),
_rx_buffer_head(0), _rx_buffer_tail(0),
_tx_buffer_head(0), _tx_buffer_tail(0)
    1aa6:	e0 e5       	ldi	r30, 0x50	; 80
    1aa8:	f5 e0       	ldi	r31, 0x05	; 5
    1aaa:	8e ea       	ldi	r24, 0xAE	; 174
    1aac:	92 e0       	ldi	r25, 0x02	; 2
    1aae:	91 83       	std	Z+1, r25	; 0x01
    1ab0:	80 83       	st	Z, r24
    1ab2:	85 ec       	ldi	r24, 0xC5	; 197
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	93 83       	std	Z+3, r25	; 0x03
    1ab8:	82 83       	std	Z+2, r24	; 0x02
    1aba:	84 ec       	ldi	r24, 0xC4	; 196
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	95 83       	std	Z+5, r25	; 0x05
    1ac0:	84 83       	std	Z+4, r24	; 0x04
    1ac2:	80 ec       	ldi	r24, 0xC0	; 192
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	97 83       	std	Z+7, r25	; 0x07
    1ac8:	86 83       	std	Z+6, r24	; 0x06
    1aca:	81 ec       	ldi	r24, 0xC1	; 193
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	91 87       	std	Z+9, r25	; 0x09
    1ad0:	80 87       	std	Z+8, r24	; 0x08
    1ad2:	82 ec       	ldi	r24, 0xC2	; 194
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	93 87       	std	Z+11, r25	; 0x0b
    1ad8:	82 87       	std	Z+10, r24	; 0x0a
    1ada:	86 ec       	ldi	r24, 0xC6	; 198
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	95 87       	std	Z+13, r25	; 0x0d
    1ae0:	84 87       	std	Z+12, r24	; 0x0c
    1ae2:	17 86       	std	Z+15, r1	; 0x0f
    1ae4:	10 8a       	std	Z+16, r1	; 0x10
    1ae6:	11 8a       	std	Z+17, r1	; 0x11
    1ae8:	12 8a       	std	Z+18, r1	; 0x12
    1aea:	08 95       	ret

00001aec <__vector_36>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
}
    1aec:	1f 92       	push	r1
    1aee:	0f 92       	push	r0
    1af0:	0f b6       	in	r0, 0x3f	; 63
    1af2:	0f 92       	push	r0
    1af4:	11 24       	eor	r1, r1
    1af6:	0b b6       	in	r0, 0x3b	; 59
    1af8:	0f 92       	push	r0
    1afa:	2f 93       	push	r18
    1afc:	8f 93       	push	r24
    1afe:	9f 93       	push	r25
    1b00:	af 93       	push	r26
    1b02:	bf 93       	push	r27
    1b04:	ef 93       	push	r30
    1b06:	ff 93       	push	r31
    1b08:	e0 91 89 05 	lds	r30, 0x0589	; 0x800589 <Serial1+0x6>
    1b0c:	f0 91 8a 05 	lds	r31, 0x058A	; 0x80058a <Serial1+0x7>
    1b10:	80 81       	ld	r24, Z
    1b12:	82 fd       	sbrc	r24, 2
    1b14:	14 c0       	rjmp	.+40     	; 0x1b3e <__vector_36+0x52>
    1b16:	e3 e8       	ldi	r30, 0x83	; 131
    1b18:	f5 e0       	ldi	r31, 0x05	; 5
    1b1a:	a4 85       	ldd	r26, Z+12	; 0x0c
    1b1c:	b5 85       	ldd	r27, Z+13	; 0x0d
    1b1e:	2c 91       	ld	r18, X
    1b20:	87 85       	ldd	r24, Z+15	; 0x0f
    1b22:	8f 5f       	subi	r24, 0xFF	; 255
    1b24:	8f 70       	andi	r24, 0x0F	; 15
    1b26:	90 89       	ldd	r25, Z+16	; 0x10
    1b28:	89 17       	cp	r24, r25
    1b2a:	71 f0       	breq	.+28     	; 0x1b48 <__vector_36+0x5c>
    1b2c:	df 01       	movw	r26, r30
    1b2e:	e7 85       	ldd	r30, Z+15	; 0x0f
    1b30:	f0 e0       	ldi	r31, 0x00	; 0
    1b32:	ed 57       	subi	r30, 0x7D	; 125
    1b34:	fa 4f       	sbci	r31, 0xFA	; 250
    1b36:	23 8b       	std	Z+19, r18	; 0x13
    1b38:	1f 96       	adiw	r26, 0x0f	; 15
    1b3a:	8c 93       	st	X, r24
    1b3c:	05 c0       	rjmp	.+10     	; 0x1b48 <__vector_36+0x5c>
    1b3e:	e0 91 8f 05 	lds	r30, 0x058F	; 0x80058f <Serial1+0xc>
    1b42:	f0 91 90 05 	lds	r31, 0x0590	; 0x800590 <Serial1+0xd>
    1b46:	80 81       	ld	r24, Z
    1b48:	ff 91       	pop	r31
    1b4a:	ef 91       	pop	r30
    1b4c:	bf 91       	pop	r27
    1b4e:	af 91       	pop	r26
    1b50:	9f 91       	pop	r25
    1b52:	8f 91       	pop	r24
    1b54:	2f 91       	pop	r18
    1b56:	0f 90       	pop	r0
    1b58:	0b be       	out	0x3b, r0	; 59
    1b5a:	0f 90       	pop	r0
    1b5c:	0f be       	out	0x3f, r0	; 63
    1b5e:	0f 90       	pop	r0
    1b60:	1f 90       	pop	r1
    1b62:	18 95       	reti

00001b64 <__vector_37>:
    1b64:	1f 92       	push	r1
    1b66:	0f 92       	push	r0
    1b68:	0f b6       	in	r0, 0x3f	; 63
    1b6a:	0f 92       	push	r0
    1b6c:	11 24       	eor	r1, r1
    1b6e:	0b b6       	in	r0, 0x3b	; 59
    1b70:	0f 92       	push	r0
    1b72:	2f 93       	push	r18
    1b74:	3f 93       	push	r19
    1b76:	4f 93       	push	r20
    1b78:	5f 93       	push	r21
    1b7a:	6f 93       	push	r22
    1b7c:	7f 93       	push	r23
    1b7e:	8f 93       	push	r24
    1b80:	9f 93       	push	r25
    1b82:	af 93       	push	r26
    1b84:	bf 93       	push	r27
    1b86:	ef 93       	push	r30
    1b88:	ff 93       	push	r31
    1b8a:	83 e8       	ldi	r24, 0x83	; 131
    1b8c:	95 e0       	ldi	r25, 0x05	; 5
    1b8e:	21 de       	rcall	.-958    	; 0x17d2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1b90:	ff 91       	pop	r31
    1b92:	ef 91       	pop	r30
    1b94:	bf 91       	pop	r27
    1b96:	af 91       	pop	r26
    1b98:	9f 91       	pop	r25
    1b9a:	8f 91       	pop	r24
    1b9c:	7f 91       	pop	r23
    1b9e:	6f 91       	pop	r22
    1ba0:	5f 91       	pop	r21
    1ba2:	4f 91       	pop	r20
    1ba4:	3f 91       	pop	r19
    1ba6:	2f 91       	pop	r18
    1ba8:	0f 90       	pop	r0
    1baa:	0b be       	out	0x3b, r0	; 59
    1bac:	0f 90       	pop	r0
    1bae:	0f be       	out	0x3f, r0	; 63
    1bb0:	0f 90       	pop	r0
    1bb2:	1f 90       	pop	r1
    1bb4:	18 95       	reti

00001bb6 <_GLOBAL__sub_I___vector_36>:
    1bb6:	e3 e8       	ldi	r30, 0x83	; 131
    1bb8:	f5 e0       	ldi	r31, 0x05	; 5
    1bba:	8e ea       	ldi	r24, 0xAE	; 174
    1bbc:	92 e0       	ldi	r25, 0x02	; 2
    1bbe:	91 83       	std	Z+1, r25	; 0x01
    1bc0:	80 83       	st	Z, r24
    1bc2:	8d ec       	ldi	r24, 0xCD	; 205
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	93 83       	std	Z+3, r25	; 0x03
    1bc8:	82 83       	std	Z+2, r24	; 0x02
    1bca:	8c ec       	ldi	r24, 0xCC	; 204
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	95 83       	std	Z+5, r25	; 0x05
    1bd0:	84 83       	std	Z+4, r24	; 0x04
    1bd2:	88 ec       	ldi	r24, 0xC8	; 200
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	97 83       	std	Z+7, r25	; 0x07
    1bd8:	86 83       	std	Z+6, r24	; 0x06
    1bda:	89 ec       	ldi	r24, 0xC9	; 201
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	91 87       	std	Z+9, r25	; 0x09
    1be0:	80 87       	std	Z+8, r24	; 0x08
    1be2:	8a ec       	ldi	r24, 0xCA	; 202
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	93 87       	std	Z+11, r25	; 0x0b
    1be8:	82 87       	std	Z+10, r24	; 0x0a
    1bea:	8e ec       	ldi	r24, 0xCE	; 206
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	95 87       	std	Z+13, r25	; 0x0d
    1bf0:	84 87       	std	Z+12, r24	; 0x0c
    1bf2:	17 86       	std	Z+15, r1	; 0x0f
    1bf4:	10 8a       	std	Z+16, r1	; 0x10
    1bf6:	11 8a       	std	Z+17, r1	; 0x11
    1bf8:	12 8a       	std	Z+18, r1	; 0x12
    1bfa:	08 95       	ret

00001bfc <__vector_51>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial2_available() {
  return Serial2.available();
}
    1bfc:	1f 92       	push	r1
    1bfe:	0f 92       	push	r0
    1c00:	0f b6       	in	r0, 0x3f	; 63
    1c02:	0f 92       	push	r0
    1c04:	11 24       	eor	r1, r1
    1c06:	0b b6       	in	r0, 0x3b	; 59
    1c08:	0f 92       	push	r0
    1c0a:	2f 93       	push	r18
    1c0c:	8f 93       	push	r24
    1c0e:	9f 93       	push	r25
    1c10:	af 93       	push	r26
    1c12:	bf 93       	push	r27
    1c14:	ef 93       	push	r30
    1c16:	ff 93       	push	r31
    1c18:	e0 91 bc 05 	lds	r30, 0x05BC	; 0x8005bc <Serial2+0x6>
    1c1c:	f0 91 bd 05 	lds	r31, 0x05BD	; 0x8005bd <Serial2+0x7>
    1c20:	80 81       	ld	r24, Z
    1c22:	82 fd       	sbrc	r24, 2
    1c24:	14 c0       	rjmp	.+40     	; 0x1c4e <__vector_51+0x52>
    1c26:	e6 eb       	ldi	r30, 0xB6	; 182
    1c28:	f5 e0       	ldi	r31, 0x05	; 5
    1c2a:	a4 85       	ldd	r26, Z+12	; 0x0c
    1c2c:	b5 85       	ldd	r27, Z+13	; 0x0d
    1c2e:	2c 91       	ld	r18, X
    1c30:	87 85       	ldd	r24, Z+15	; 0x0f
    1c32:	8f 5f       	subi	r24, 0xFF	; 255
    1c34:	8f 70       	andi	r24, 0x0F	; 15
    1c36:	90 89       	ldd	r25, Z+16	; 0x10
    1c38:	89 17       	cp	r24, r25
    1c3a:	71 f0       	breq	.+28     	; 0x1c58 <__vector_51+0x5c>
    1c3c:	df 01       	movw	r26, r30
    1c3e:	e7 85       	ldd	r30, Z+15	; 0x0f
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	ea 54       	subi	r30, 0x4A	; 74
    1c44:	fa 4f       	sbci	r31, 0xFA	; 250
    1c46:	23 8b       	std	Z+19, r18	; 0x13
    1c48:	1f 96       	adiw	r26, 0x0f	; 15
    1c4a:	8c 93       	st	X, r24
    1c4c:	05 c0       	rjmp	.+10     	; 0x1c58 <__vector_51+0x5c>
    1c4e:	e0 91 c2 05 	lds	r30, 0x05C2	; 0x8005c2 <Serial2+0xc>
    1c52:	f0 91 c3 05 	lds	r31, 0x05C3	; 0x8005c3 <Serial2+0xd>
    1c56:	80 81       	ld	r24, Z
    1c58:	ff 91       	pop	r31
    1c5a:	ef 91       	pop	r30
    1c5c:	bf 91       	pop	r27
    1c5e:	af 91       	pop	r26
    1c60:	9f 91       	pop	r25
    1c62:	8f 91       	pop	r24
    1c64:	2f 91       	pop	r18
    1c66:	0f 90       	pop	r0
    1c68:	0b be       	out	0x3b, r0	; 59
    1c6a:	0f 90       	pop	r0
    1c6c:	0f be       	out	0x3f, r0	; 63
    1c6e:	0f 90       	pop	r0
    1c70:	1f 90       	pop	r1
    1c72:	18 95       	reti

00001c74 <__vector_52>:
    1c74:	1f 92       	push	r1
    1c76:	0f 92       	push	r0
    1c78:	0f b6       	in	r0, 0x3f	; 63
    1c7a:	0f 92       	push	r0
    1c7c:	11 24       	eor	r1, r1
    1c7e:	0b b6       	in	r0, 0x3b	; 59
    1c80:	0f 92       	push	r0
    1c82:	2f 93       	push	r18
    1c84:	3f 93       	push	r19
    1c86:	4f 93       	push	r20
    1c88:	5f 93       	push	r21
    1c8a:	6f 93       	push	r22
    1c8c:	7f 93       	push	r23
    1c8e:	8f 93       	push	r24
    1c90:	9f 93       	push	r25
    1c92:	af 93       	push	r26
    1c94:	bf 93       	push	r27
    1c96:	ef 93       	push	r30
    1c98:	ff 93       	push	r31
    1c9a:	86 eb       	ldi	r24, 0xB6	; 182
    1c9c:	95 e0       	ldi	r25, 0x05	; 5
    1c9e:	99 dd       	rcall	.-1230   	; 0x17d2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1ca0:	ff 91       	pop	r31
    1ca2:	ef 91       	pop	r30
    1ca4:	bf 91       	pop	r27
    1ca6:	af 91       	pop	r26
    1ca8:	9f 91       	pop	r25
    1caa:	8f 91       	pop	r24
    1cac:	7f 91       	pop	r23
    1cae:	6f 91       	pop	r22
    1cb0:	5f 91       	pop	r21
    1cb2:	4f 91       	pop	r20
    1cb4:	3f 91       	pop	r19
    1cb6:	2f 91       	pop	r18
    1cb8:	0f 90       	pop	r0
    1cba:	0b be       	out	0x3b, r0	; 59
    1cbc:	0f 90       	pop	r0
    1cbe:	0f be       	out	0x3f, r0	; 63
    1cc0:	0f 90       	pop	r0
    1cc2:	1f 90       	pop	r1
    1cc4:	18 95       	reti

00001cc6 <_GLOBAL__sub_I___vector_51>:
    1cc6:	e6 eb       	ldi	r30, 0xB6	; 182
    1cc8:	f5 e0       	ldi	r31, 0x05	; 5
    1cca:	8e ea       	ldi	r24, 0xAE	; 174
    1ccc:	92 e0       	ldi	r25, 0x02	; 2
    1cce:	91 83       	std	Z+1, r25	; 0x01
    1cd0:	80 83       	st	Z, r24
    1cd2:	85 ed       	ldi	r24, 0xD5	; 213
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	93 83       	std	Z+3, r25	; 0x03
    1cd8:	82 83       	std	Z+2, r24	; 0x02
    1cda:	84 ed       	ldi	r24, 0xD4	; 212
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	95 83       	std	Z+5, r25	; 0x05
    1ce0:	84 83       	std	Z+4, r24	; 0x04
    1ce2:	80 ed       	ldi	r24, 0xD0	; 208
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	97 83       	std	Z+7, r25	; 0x07
    1ce8:	86 83       	std	Z+6, r24	; 0x06
    1cea:	81 ed       	ldi	r24, 0xD1	; 209
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	91 87       	std	Z+9, r25	; 0x09
    1cf0:	80 87       	std	Z+8, r24	; 0x08
    1cf2:	82 ed       	ldi	r24, 0xD2	; 210
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	93 87       	std	Z+11, r25	; 0x0b
    1cf8:	82 87       	std	Z+10, r24	; 0x0a
    1cfa:	86 ed       	ldi	r24, 0xD6	; 214
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	95 87       	std	Z+13, r25	; 0x0d
    1d00:	84 87       	std	Z+12, r24	; 0x0c
    1d02:	17 86       	std	Z+15, r1	; 0x0f
    1d04:	10 8a       	std	Z+16, r1	; 0x10
    1d06:	11 8a       	std	Z+17, r1	; 0x11
    1d08:	12 8a       	std	Z+18, r1	; 0x12
    1d0a:	08 95       	ret

00001d0c <__vector_54>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial3_available() {
  return Serial3.available();
}
    1d0c:	1f 92       	push	r1
    1d0e:	0f 92       	push	r0
    1d10:	0f b6       	in	r0, 0x3f	; 63
    1d12:	0f 92       	push	r0
    1d14:	11 24       	eor	r1, r1
    1d16:	0b b6       	in	r0, 0x3b	; 59
    1d18:	0f 92       	push	r0
    1d1a:	2f 93       	push	r18
    1d1c:	8f 93       	push	r24
    1d1e:	9f 93       	push	r25
    1d20:	af 93       	push	r26
    1d22:	bf 93       	push	r27
    1d24:	ef 93       	push	r30
    1d26:	ff 93       	push	r31
    1d28:	e0 91 ef 05 	lds	r30, 0x05EF	; 0x8005ef <Serial3+0x6>
    1d2c:	f0 91 f0 05 	lds	r31, 0x05F0	; 0x8005f0 <Serial3+0x7>
    1d30:	80 81       	ld	r24, Z
    1d32:	82 fd       	sbrc	r24, 2
    1d34:	14 c0       	rjmp	.+40     	; 0x1d5e <__vector_54+0x52>
    1d36:	e9 ee       	ldi	r30, 0xE9	; 233
    1d38:	f5 e0       	ldi	r31, 0x05	; 5
    1d3a:	a4 85       	ldd	r26, Z+12	; 0x0c
    1d3c:	b5 85       	ldd	r27, Z+13	; 0x0d
    1d3e:	2c 91       	ld	r18, X
    1d40:	87 85       	ldd	r24, Z+15	; 0x0f
    1d42:	8f 5f       	subi	r24, 0xFF	; 255
    1d44:	8f 70       	andi	r24, 0x0F	; 15
    1d46:	90 89       	ldd	r25, Z+16	; 0x10
    1d48:	89 17       	cp	r24, r25
    1d4a:	71 f0       	breq	.+28     	; 0x1d68 <__vector_54+0x5c>
    1d4c:	df 01       	movw	r26, r30
    1d4e:	e7 85       	ldd	r30, Z+15	; 0x0f
    1d50:	f0 e0       	ldi	r31, 0x00	; 0
    1d52:	e7 51       	subi	r30, 0x17	; 23
    1d54:	fa 4f       	sbci	r31, 0xFA	; 250
    1d56:	23 8b       	std	Z+19, r18	; 0x13
    1d58:	1f 96       	adiw	r26, 0x0f	; 15
    1d5a:	8c 93       	st	X, r24
    1d5c:	05 c0       	rjmp	.+10     	; 0x1d68 <__vector_54+0x5c>
    1d5e:	e0 91 f5 05 	lds	r30, 0x05F5	; 0x8005f5 <Serial3+0xc>
    1d62:	f0 91 f6 05 	lds	r31, 0x05F6	; 0x8005f6 <Serial3+0xd>
    1d66:	80 81       	ld	r24, Z
    1d68:	ff 91       	pop	r31
    1d6a:	ef 91       	pop	r30
    1d6c:	bf 91       	pop	r27
    1d6e:	af 91       	pop	r26
    1d70:	9f 91       	pop	r25
    1d72:	8f 91       	pop	r24
    1d74:	2f 91       	pop	r18
    1d76:	0f 90       	pop	r0
    1d78:	0b be       	out	0x3b, r0	; 59
    1d7a:	0f 90       	pop	r0
    1d7c:	0f be       	out	0x3f, r0	; 63
    1d7e:	0f 90       	pop	r0
    1d80:	1f 90       	pop	r1
    1d82:	18 95       	reti

00001d84 <__vector_55>:
    1d84:	1f 92       	push	r1
    1d86:	0f 92       	push	r0
    1d88:	0f b6       	in	r0, 0x3f	; 63
    1d8a:	0f 92       	push	r0
    1d8c:	11 24       	eor	r1, r1
    1d8e:	0b b6       	in	r0, 0x3b	; 59
    1d90:	0f 92       	push	r0
    1d92:	2f 93       	push	r18
    1d94:	3f 93       	push	r19
    1d96:	4f 93       	push	r20
    1d98:	5f 93       	push	r21
    1d9a:	6f 93       	push	r22
    1d9c:	7f 93       	push	r23
    1d9e:	8f 93       	push	r24
    1da0:	9f 93       	push	r25
    1da2:	af 93       	push	r26
    1da4:	bf 93       	push	r27
    1da6:	ef 93       	push	r30
    1da8:	ff 93       	push	r31
    1daa:	89 ee       	ldi	r24, 0xE9	; 233
    1dac:	95 e0       	ldi	r25, 0x05	; 5
    1dae:	11 dd       	rcall	.-1502   	; 0x17d2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1db0:	ff 91       	pop	r31
    1db2:	ef 91       	pop	r30
    1db4:	bf 91       	pop	r27
    1db6:	af 91       	pop	r26
    1db8:	9f 91       	pop	r25
    1dba:	8f 91       	pop	r24
    1dbc:	7f 91       	pop	r23
    1dbe:	6f 91       	pop	r22
    1dc0:	5f 91       	pop	r21
    1dc2:	4f 91       	pop	r20
    1dc4:	3f 91       	pop	r19
    1dc6:	2f 91       	pop	r18
    1dc8:	0f 90       	pop	r0
    1dca:	0b be       	out	0x3b, r0	; 59
    1dcc:	0f 90       	pop	r0
    1dce:	0f be       	out	0x3f, r0	; 63
    1dd0:	0f 90       	pop	r0
    1dd2:	1f 90       	pop	r1
    1dd4:	18 95       	reti

00001dd6 <_GLOBAL__sub_I___vector_54>:
    1dd6:	e9 ee       	ldi	r30, 0xE9	; 233
    1dd8:	f5 e0       	ldi	r31, 0x05	; 5
    1dda:	8e ea       	ldi	r24, 0xAE	; 174
    1ddc:	92 e0       	ldi	r25, 0x02	; 2
    1dde:	91 83       	std	Z+1, r25	; 0x01
    1de0:	80 83       	st	Z, r24
    1de2:	85 e3       	ldi	r24, 0x35	; 53
    1de4:	91 e0       	ldi	r25, 0x01	; 1
    1de6:	93 83       	std	Z+3, r25	; 0x03
    1de8:	82 83       	std	Z+2, r24	; 0x02
    1dea:	84 e3       	ldi	r24, 0x34	; 52
    1dec:	91 e0       	ldi	r25, 0x01	; 1
    1dee:	95 83       	std	Z+5, r25	; 0x05
    1df0:	84 83       	std	Z+4, r24	; 0x04
    1df2:	80 e3       	ldi	r24, 0x30	; 48
    1df4:	91 e0       	ldi	r25, 0x01	; 1
    1df6:	97 83       	std	Z+7, r25	; 0x07
    1df8:	86 83       	std	Z+6, r24	; 0x06
    1dfa:	81 e3       	ldi	r24, 0x31	; 49
    1dfc:	91 e0       	ldi	r25, 0x01	; 1
    1dfe:	91 87       	std	Z+9, r25	; 0x09
    1e00:	80 87       	std	Z+8, r24	; 0x08
    1e02:	82 e3       	ldi	r24, 0x32	; 50
    1e04:	91 e0       	ldi	r25, 0x01	; 1
    1e06:	93 87       	std	Z+11, r25	; 0x0b
    1e08:	82 87       	std	Z+10, r24	; 0x0a
    1e0a:	86 e3       	ldi	r24, 0x36	; 54
    1e0c:	91 e0       	ldi	r25, 0x01	; 1
    1e0e:	95 87       	std	Z+13, r25	; 0x0d
    1e10:	84 87       	std	Z+12, r24	; 0x0c
    1e12:	17 86       	std	Z+15, r1	; 0x0f
    1e14:	10 8a       	std	Z+16, r1	; 0x10
    1e16:	11 8a       	std	Z+17, r1	; 0x11
    1e18:	12 8a       	std	Z+18, r1	; 0x12
    1e1a:	08 95       	ret

00001e1c <_ZN3TWI5beginEv>:

void reply(bool ack) {
	if(ack){ // transmit master read ready signal, with or without ack
		TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
	}else{
		TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1e1c:	10 92 29 06 	sts	0x0629, r1	; 0x800629 <_ZL9twi_state>
    1e20:	81 e0       	ldi	r24, 0x01	; 1
    1e22:	80 93 27 06 	sts	0x0627, r24	; 0x800627 <_ZL12twi_sendStop>
    1e26:	10 92 26 06 	sts	0x0626, r1	; 0x800626 <_ZL14twi_inRepStart>
    1e2a:	8b b1       	in	r24, 0x0b	; 11
    1e2c:	83 60       	ori	r24, 0x03	; 3
    1e2e:	8b b9       	out	0x0b, r24	; 11
    1e30:	e9 eb       	ldi	r30, 0xB9	; 185
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	80 81       	ld	r24, Z
    1e36:	8e 7f       	andi	r24, 0xFE	; 254
    1e38:	80 83       	st	Z, r24
    1e3a:	88 e4       	ldi	r24, 0x48	; 72
    1e3c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    1e40:	85 e4       	ldi	r24, 0x45	; 69
    1e42:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1e46:	08 95       	ret

00001e48 <_Z8readFromhPhhS_hb>:
    1e48:	ef 92       	push	r14
    1e4a:	0f 93       	push	r16
    1e4c:	90 91 29 06 	lds	r25, 0x0629	; 0x800629 <_ZL9twi_state>
    1e50:	91 11       	cpse	r25, r1
    1e52:	fc cf       	rjmp	.-8      	; 0x1e4c <_Z8readFromhPhhS_hb+0x4>
    1e54:	91 e0       	ldi	r25, 0x01	; 1
    1e56:	90 93 29 06 	sts	0x0629, r25	; 0x800629 <_ZL9twi_state>
    1e5a:	e0 92 27 06 	sts	0x0627, r14	; 0x800627 <_ZL12twi_sendStop>
    1e5e:	9f ef       	ldi	r25, 0xFF	; 255
    1e60:	90 93 1d 06 	sts	0x061D, r25	; 0x80061d <_ZL9twi_error>
    1e64:	00 23       	and	r16, r16
    1e66:	21 f0       	breq	.+8      	; 0x1e70 <_Z8readFromhPhhS_hb+0x28>
    1e68:	30 93 21 06 	sts	0x0621, r19	; 0x800621 <_ZL13twi_regBuffer+0x1>
    1e6c:	20 93 20 06 	sts	0x0620, r18	; 0x800620 <_ZL13twi_regBuffer>
    1e70:	10 92 1f 06 	sts	0x061F, r1	; 0x80061f <_ZL18twi_regBufferIndex>
    1e74:	00 93 1e 06 	sts	0x061E, r16	; 0x80061e <_ZL19twi_regBufferLength>
    1e78:	70 93 25 06 	sts	0x0625, r23	; 0x800625 <_ZL16twi_masterBuffer+0x1>
    1e7c:	60 93 24 06 	sts	0x0624, r22	; 0x800624 <_ZL16twi_masterBuffer>
    1e80:	10 92 23 06 	sts	0x0623, r1	; 0x800623 <_ZL21twi_masterBufferIndex>
    1e84:	41 50       	subi	r20, 0x01	; 1
    1e86:	40 93 22 06 	sts	0x0622, r20	; 0x800622 <_ZL22twi_masterBufferLength>
    1e8a:	91 e0       	ldi	r25, 0x01	; 1
    1e8c:	90 93 28 06 	sts	0x0628, r25	; 0x800628 <_ZL9twi_slarw>
    1e90:	90 91 28 06 	lds	r25, 0x0628	; 0x800628 <_ZL9twi_slarw>
    1e94:	88 0f       	add	r24, r24
    1e96:	89 2b       	or	r24, r25
    1e98:	80 93 28 06 	sts	0x0628, r24	; 0x800628 <_ZL9twi_slarw>
    1e9c:	80 91 26 06 	lds	r24, 0x0626	; 0x800626 <_ZL14twi_inRepStart>
    1ea0:	81 30       	cpi	r24, 0x01	; 1
    1ea2:	81 f4       	brne	.+32     	; 0x1ec4 <_Z8readFromhPhhS_hb+0x7c>
    1ea4:	10 92 26 06 	sts	0x0626, r1	; 0x800626 <_ZL14twi_inRepStart>
    1ea8:	ab eb       	ldi	r26, 0xBB	; 187
    1eaa:	b0 e0       	ldi	r27, 0x00	; 0
    1eac:	ec eb       	ldi	r30, 0xBC	; 188
    1eae:	f0 e0       	ldi	r31, 0x00	; 0
    1eb0:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <_ZL9twi_slarw>
    1eb4:	8c 93       	st	X, r24
    1eb6:	80 81       	ld	r24, Z
    1eb8:	83 fd       	sbrc	r24, 3
    1eba:	fa cf       	rjmp	.-12     	; 0x1eb0 <_Z8readFromhPhhS_hb+0x68>
    1ebc:	85 ec       	ldi	r24, 0xC5	; 197
    1ebe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1ec2:	03 c0       	rjmp	.+6      	; 0x1eca <_Z8readFromhPhhS_hb+0x82>
    1ec4:	85 ee       	ldi	r24, 0xE5	; 229
    1ec6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1eca:	0f 91       	pop	r16
    1ecc:	ef 90       	pop	r14
    1ece:	08 95       	ret

00001ed0 <_ZN3TWI9readAsyncEPhhhS0_hb>:
    1ed0:	cf 92       	push	r12
    1ed2:	ef 92       	push	r14
    1ed4:	0f 93       	push	r16
    1ed6:	1f 93       	push	r17
    1ed8:	80 91 2a 06 	lds	r24, 0x062A	; 0x80062a <_ZL12transmitting>
    1edc:	81 11       	cpse	r24, r1
    1ede:	0e c0       	rjmp	.+28     	; 0x1efc <_ZN3TWI9readAsyncEPhhhS0_hb+0x2c>
    1ee0:	3e 2d       	mov	r19, r14
    1ee2:	f8 01       	movw	r30, r16
    1ee4:	92 2f       	mov	r25, r18
    1ee6:	84 2f       	mov	r24, r20
    1ee8:	21 e0       	ldi	r18, 0x01	; 1
    1eea:	20 93 2a 06 	sts	0x062A, r18	; 0x80062a <_ZL12transmitting>
    1eee:	ec 2c       	mov	r14, r12
    1ef0:	03 2f       	mov	r16, r19
    1ef2:	9f 01       	movw	r18, r30
    1ef4:	49 2f       	mov	r20, r25
    1ef6:	a8 df       	rcall	.-176    	; 0x1e48 <_Z8readFromhPhhS_hb>
    1ef8:	81 e0       	ldi	r24, 0x01	; 1
    1efa:	01 c0       	rjmp	.+2      	; 0x1efe <_ZN3TWI9readAsyncEPhhhS0_hb+0x2e>
    1efc:	80 e0       	ldi	r24, 0x00	; 0
    1efe:	1f 91       	pop	r17
    1f00:	0f 91       	pop	r16
    1f02:	ef 90       	pop	r14
    1f04:	cf 90       	pop	r12
    1f06:	08 95       	ret

00001f08 <_ZN3TWI8getErrorEv>:
    1f08:	80 91 1d 06 	lds	r24, 0x061D	; 0x80061d <_ZL9twi_error>
    1f0c:	8f 3f       	cpi	r24, 0xFF	; 255
    1f0e:	51 f0       	breq	.+20     	; 0x1f24 <_ZN3TWI8getErrorEv+0x1c>
    1f10:	80 91 1d 06 	lds	r24, 0x061D	; 0x80061d <_ZL9twi_error>
    1f14:	80 32       	cpi	r24, 0x20	; 32
    1f16:	41 f0       	breq	.+16     	; 0x1f28 <_ZN3TWI8getErrorEv+0x20>
    1f18:	80 91 1d 06 	lds	r24, 0x061D	; 0x80061d <_ZL9twi_error>
    1f1c:	80 33       	cpi	r24, 0x30	; 48
    1f1e:	31 f0       	breq	.+12     	; 0x1f2c <_ZN3TWI8getErrorEv+0x24>
    1f20:	84 e0       	ldi	r24, 0x04	; 4
    1f22:	08 95       	ret
    1f24:	80 e0       	ldi	r24, 0x00	; 0
    1f26:	08 95       	ret
    1f28:	82 e0       	ldi	r24, 0x02	; 2
    1f2a:	08 95       	ret
    1f2c:	83 e0       	ldi	r24, 0x03	; 3
    1f2e:	08 95       	ret

00001f30 <_Z7writeTohPhhS_hb>:
    1f30:	ef 92       	push	r14
    1f32:	0f 93       	push	r16
    1f34:	90 91 29 06 	lds	r25, 0x0629	; 0x800629 <_ZL9twi_state>
    1f38:	91 11       	cpse	r25, r1
    1f3a:	fc cf       	rjmp	.-8      	; 0x1f34 <_Z7writeTohPhhS_hb+0x4>
    1f3c:	92 e0       	ldi	r25, 0x02	; 2
    1f3e:	90 93 29 06 	sts	0x0629, r25	; 0x800629 <_ZL9twi_state>
    1f42:	e0 92 27 06 	sts	0x0627, r14	; 0x800627 <_ZL12twi_sendStop>
    1f46:	9f ef       	ldi	r25, 0xFF	; 255
    1f48:	90 93 1d 06 	sts	0x061D, r25	; 0x80061d <_ZL9twi_error>
    1f4c:	00 23       	and	r16, r16
    1f4e:	21 f0       	breq	.+8      	; 0x1f58 <_Z7writeTohPhhS_hb+0x28>
    1f50:	30 93 21 06 	sts	0x0621, r19	; 0x800621 <_ZL13twi_regBuffer+0x1>
    1f54:	20 93 20 06 	sts	0x0620, r18	; 0x800620 <_ZL13twi_regBuffer>
    1f58:	10 92 1f 06 	sts	0x061F, r1	; 0x80061f <_ZL18twi_regBufferIndex>
    1f5c:	00 93 1e 06 	sts	0x061E, r16	; 0x80061e <_ZL19twi_regBufferLength>
    1f60:	70 93 25 06 	sts	0x0625, r23	; 0x800625 <_ZL16twi_masterBuffer+0x1>
    1f64:	60 93 24 06 	sts	0x0624, r22	; 0x800624 <_ZL16twi_masterBuffer>
    1f68:	10 92 23 06 	sts	0x0623, r1	; 0x800623 <_ZL21twi_masterBufferIndex>
    1f6c:	40 93 22 06 	sts	0x0622, r20	; 0x800622 <_ZL22twi_masterBufferLength>
    1f70:	10 92 28 06 	sts	0x0628, r1	; 0x800628 <_ZL9twi_slarw>
    1f74:	90 91 28 06 	lds	r25, 0x0628	; 0x800628 <_ZL9twi_slarw>
    1f78:	88 0f       	add	r24, r24
    1f7a:	89 2b       	or	r24, r25
    1f7c:	80 93 28 06 	sts	0x0628, r24	; 0x800628 <_ZL9twi_slarw>
    1f80:	80 91 26 06 	lds	r24, 0x0626	; 0x800626 <_ZL14twi_inRepStart>
    1f84:	81 30       	cpi	r24, 0x01	; 1
    1f86:	81 f4       	brne	.+32     	; 0x1fa8 <_Z7writeTohPhhS_hb+0x78>
    1f88:	10 92 26 06 	sts	0x0626, r1	; 0x800626 <_ZL14twi_inRepStart>
    1f8c:	ab eb       	ldi	r26, 0xBB	; 187
    1f8e:	b0 e0       	ldi	r27, 0x00	; 0
    1f90:	ec eb       	ldi	r30, 0xBC	; 188
    1f92:	f0 e0       	ldi	r31, 0x00	; 0
    1f94:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <_ZL9twi_slarw>
    1f98:	8c 93       	st	X, r24
    1f9a:	80 81       	ld	r24, Z
    1f9c:	83 fd       	sbrc	r24, 3
    1f9e:	fa cf       	rjmp	.-12     	; 0x1f94 <_Z7writeTohPhhS_hb+0x64>
    1fa0:	85 ec       	ldi	r24, 0xC5	; 197
    1fa2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1fa6:	03 c0       	rjmp	.+6      	; 0x1fae <_Z7writeTohPhhS_hb+0x7e>
    1fa8:	85 ee       	ldi	r24, 0xE5	; 229
    1faa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1fae:	0f 91       	pop	r16
    1fb0:	ef 90       	pop	r14
    1fb2:	08 95       	ret

00001fb4 <_ZN3TWI10writeAsyncEhPhhS0_hb>:
    1fb4:	cf 92       	push	r12
    1fb6:	ef 92       	push	r14
    1fb8:	0f 93       	push	r16
    1fba:	1f 93       	push	r17
    1fbc:	80 91 2a 06 	lds	r24, 0x062A	; 0x80062a <_ZL12transmitting>
    1fc0:	81 11       	cpse	r24, r1
    1fc2:	10 c0       	rjmp	.+32     	; 0x1fe4 <_ZN3TWI10writeAsyncEhPhhS0_hb+0x30>
    1fc4:	3e 2d       	mov	r19, r14
    1fc6:	d8 01       	movw	r26, r16
    1fc8:	92 2f       	mov	r25, r18
    1fca:	fa 01       	movw	r30, r20
    1fcc:	86 2f       	mov	r24, r22
    1fce:	21 e0       	ldi	r18, 0x01	; 1
    1fd0:	20 93 2a 06 	sts	0x062A, r18	; 0x80062a <_ZL12transmitting>
    1fd4:	ec 2c       	mov	r14, r12
    1fd6:	03 2f       	mov	r16, r19
    1fd8:	9d 01       	movw	r18, r26
    1fda:	49 2f       	mov	r20, r25
    1fdc:	bf 01       	movw	r22, r30
    1fde:	a8 df       	rcall	.-176    	; 0x1f30 <_Z7writeTohPhhS_hb>
    1fe0:	81 e0       	ldi	r24, 0x01	; 1
    1fe2:	01 c0       	rjmp	.+2      	; 0x1fe6 <_ZN3TWI10writeAsyncEhPhhS0_hb+0x32>
    1fe4:	80 e0       	ldi	r24, 0x00	; 0
    1fe6:	1f 91       	pop	r17
    1fe8:	0f 91       	pop	r16
    1fea:	ef 90       	pop	r14
    1fec:	cf 90       	pop	r12
    1fee:	08 95       	ret

00001ff0 <_ZN3TWI9availableEv>:
    1ff0:	90 91 2a 06 	lds	r25, 0x062A	; 0x80062a <_ZL12transmitting>
    1ff4:	81 e0       	ldi	r24, 0x01	; 1
    1ff6:	89 27       	eor	r24, r25
    1ff8:	08 95       	ret

00001ffa <_Z4stopv>:
	}
}

void stop(void){
	TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);// send stop condition
    1ffa:	85 ed       	ldi	r24, 0xD5	; 213
    1ffc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

	// wait for stop condition to be exectued on bus. TWINT is not set after a stop condition!
	while(TWCR & _BV(TWSTO)){
    2000:	ec eb       	ldi	r30, 0xBC	; 188
    2002:	f0 e0       	ldi	r31, 0x00	; 0
    2004:	80 81       	ld	r24, Z
    2006:	84 fd       	sbrc	r24, 4
    2008:	fd cf       	rjmp	.-6      	; 0x2004 <_Z4stopv+0xa>
		continue;
	}

	twi_state = TWI_READY; //update twi state
    200a:	10 92 29 06 	sts	0x0629, r1	; 0x800629 <_ZL9twi_state>
    200e:	08 95       	ret

00002010 <_Z10releaseBusv>:
}

void releaseBus(void) {
	TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT); //release bus
    2010:	85 ec       	ldi	r24, 0xC5	; 197
    2012:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	twi_state = TWI_READY;// update twi state
    2016:	10 92 29 06 	sts	0x0629, r1	; 0x800629 <_ZL9twi_state>
    201a:	08 95       	ret

0000201c <__vector_39>:
}

ISR(TWI_vect){
    201c:	1f 92       	push	r1
    201e:	0f 92       	push	r0
    2020:	0f b6       	in	r0, 0x3f	; 63
    2022:	0f 92       	push	r0
    2024:	11 24       	eor	r1, r1
    2026:	0b b6       	in	r0, 0x3b	; 59
    2028:	0f 92       	push	r0
    202a:	2f 93       	push	r18
    202c:	3f 93       	push	r19
    202e:	4f 93       	push	r20
    2030:	5f 93       	push	r21
    2032:	6f 93       	push	r22
    2034:	7f 93       	push	r23
    2036:	8f 93       	push	r24
    2038:	9f 93       	push	r25
    203a:	af 93       	push	r26
    203c:	bf 93       	push	r27
    203e:	ef 93       	push	r30
    2040:	ff 93       	push	r31
	switch(TW_STATUS){
    2042:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    2046:	88 7f       	andi	r24, 0xF8	; 248
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	89 35       	cpi	r24, 0x59	; 89
    204c:	91 05       	cpc	r25, r1
    204e:	08 f0       	brcs	.+2      	; 0x2052 <__vector_39+0x36>
    2050:	aa c0       	rjmp	.+340    	; 0x21a6 <__vector_39+0x18a>
    2052:	fc 01       	movw	r30, r24
    2054:	88 27       	eor	r24, r24
    2056:	ee 58       	subi	r30, 0x8E	; 142
    2058:	ff 4f       	sbci	r31, 0xFF	; 255
    205a:	8f 4f       	sbci	r24, 0xFF	; 255
    205c:	f7 c3       	rjmp	.+2030   	; 0x284c <__tablejump2__>
		// All Master
		case TW_START:     // sent start condition
		case TW_REP_START: // sent repeated start condition
			// copy device address and r/w bit to output register and ack
			TWDR = twi_slarw;
    205e:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <_ZL9twi_slarw>
    2062:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>

//=======================Interrupt Functions=========================//

void reply(bool ack) {
	if(ack){ // transmit master read ready signal, with or without ack
		TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2066:	85 ec       	ldi	r24, 0xC5	; 197
    2068:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    206c:	9c c0       	rjmp	.+312    	; 0x21a6 <__vector_39+0x18a>

		// Master Transmitter
		case TW_MT_SLA_ACK:  // slave receiver acked address
		case TW_MT_DATA_ACK: // slave receiver acked data
			// if there is data to send, send it, otherwise stop
			if(twi_regBufferIndex < twi_regBufferLength){
    206e:	90 91 1f 06 	lds	r25, 0x061F	; 0x80061f <_ZL18twi_regBufferIndex>
    2072:	80 91 1e 06 	lds	r24, 0x061E	; 0x80061e <_ZL19twi_regBufferLength>
    2076:	98 17       	cp	r25, r24
    2078:	98 f4       	brcc	.+38     	; 0x20a0 <__vector_39+0x84>
				TWDR = twi_regBuffer[twi_regBufferIndex++];
    207a:	e0 91 20 06 	lds	r30, 0x0620	; 0x800620 <_ZL13twi_regBuffer>
    207e:	f0 91 21 06 	lds	r31, 0x0621	; 0x800621 <_ZL13twi_regBuffer+0x1>
    2082:	80 91 1f 06 	lds	r24, 0x061F	; 0x80061f <_ZL18twi_regBufferIndex>
    2086:	91 e0       	ldi	r25, 0x01	; 1
    2088:	98 0f       	add	r25, r24
    208a:	90 93 1f 06 	sts	0x061F, r25	; 0x80061f <_ZL18twi_regBufferIndex>
    208e:	e8 0f       	add	r30, r24
    2090:	f1 1d       	adc	r31, r1
    2092:	80 81       	ld	r24, Z
    2094:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>

//=======================Interrupt Functions=========================//

void reply(bool ack) {
	if(ack){ // transmit master read ready signal, with or without ack
		TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2098:	85 ec       	ldi	r24, 0xC5	; 197
    209a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    209e:	83 c0       	rjmp	.+262    	; 0x21a6 <__vector_39+0x18a>
		case TW_MT_DATA_ACK: // slave receiver acked data
			// if there is data to send, send it, otherwise stop
			if(twi_regBufferIndex < twi_regBufferLength){
				TWDR = twi_regBuffer[twi_regBufferIndex++];
				reply(true);
			}else if(twi_masterBufferIndex < twi_masterBufferLength){
    20a0:	90 91 23 06 	lds	r25, 0x0623	; 0x800623 <_ZL21twi_masterBufferIndex>
    20a4:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <_ZL22twi_masterBufferLength>
    20a8:	98 17       	cp	r25, r24
    20aa:	98 f4       	brcc	.+38     	; 0x20d2 <__vector_39+0xb6>
				// copy data to output register and ack
				TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    20ac:	e0 91 24 06 	lds	r30, 0x0624	; 0x800624 <_ZL16twi_masterBuffer>
    20b0:	f0 91 25 06 	lds	r31, 0x0625	; 0x800625 <_ZL16twi_masterBuffer+0x1>
    20b4:	80 91 23 06 	lds	r24, 0x0623	; 0x800623 <_ZL21twi_masterBufferIndex>
    20b8:	91 e0       	ldi	r25, 0x01	; 1
    20ba:	98 0f       	add	r25, r24
    20bc:	90 93 23 06 	sts	0x0623, r25	; 0x800623 <_ZL21twi_masterBufferIndex>
    20c0:	e8 0f       	add	r30, r24
    20c2:	f1 1d       	adc	r31, r1
    20c4:	80 81       	ld	r24, Z
    20c6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>

//=======================Interrupt Functions=========================//

void reply(bool ack) {
	if(ack){ // transmit master read ready signal, with or without ack
		TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    20ca:	85 ec       	ldi	r24, 0xC5	; 197
    20cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    20d0:	6a c0       	rjmp	.+212    	; 0x21a6 <__vector_39+0x18a>
			}else if(twi_masterBufferIndex < twi_masterBufferLength){
				// copy data to output register and ack
				TWDR = twi_masterBuffer[twi_masterBufferIndex++];
				reply(true);
			}else{
				if (twi_sendStop){
    20d2:	80 91 27 06 	lds	r24, 0x0627	; 0x800627 <_ZL12twi_sendStop>
    20d6:	88 23       	and	r24, r24
					stop();
    20d8:	21 f0       	breq	.+8      	; 0x20e2 <__vector_39+0xc6>
    20da:	8f df       	rcall	.-226    	; 0x1ffa <_Z4stopv>
					transmitting = false; //TODO can this go inside of stop()?
    20dc:	10 92 2a 06 	sts	0x062A, r1	; 0x80062a <_ZL12transmitting>
    20e0:	62 c0       	rjmp	.+196    	; 0x21a6 <__vector_39+0x18a>
				}else {
					twi_inRepStart = true;	// we're gonna send the START
    20e2:	81 e0       	ldi	r24, 0x01	; 1
    20e4:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <_ZL14twi_inRepStart>
					// don't enable the interrupt. We'll generate the start, but we
					// avoid handling the interrupt until we're in the next transaction,
					// at the point where we would normally issue the start.
					TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    20e8:	84 ea       	ldi	r24, 0xA4	; 164
    20ea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
					twi_state = TWI_READY;
    20ee:	10 92 29 06 	sts	0x0629, r1	; 0x800629 <_ZL9twi_state>
    20f2:	59 c0       	rjmp	.+178    	; 0x21a6 <__vector_39+0x18a>
				}
			}
			break;
		case TW_MT_SLA_NACK:  // address sent, nack received
			twi_error = TW_MT_SLA_NACK;
    20f4:	80 e2       	ldi	r24, 0x20	; 32
    20f6:	80 93 1d 06 	sts	0x061D, r24	; 0x80061d <_ZL9twi_error>
			stop();
    20fa:	7f df       	rcall	.-258    	; 0x1ffa <_Z4stopv>
			transmitting = false;
    20fc:	10 92 2a 06 	sts	0x062A, r1	; 0x80062a <_ZL12transmitting>
			break;
    2100:	52 c0       	rjmp	.+164    	; 0x21a6 <__vector_39+0x18a>
		case TW_MT_DATA_NACK: // data sent, nack received
			twi_error = TW_MT_DATA_NACK;
    2102:	80 e3       	ldi	r24, 0x30	; 48
    2104:	80 93 1d 06 	sts	0x061D, r24	; 0x80061d <_ZL9twi_error>
			stop();
    2108:	78 df       	rcall	.-272    	; 0x1ffa <_Z4stopv>
			transmitting = false;
    210a:	10 92 2a 06 	sts	0x062A, r1	; 0x80062a <_ZL12transmitting>
			break;
		case TW_MT_ARB_LOST: // lost bus arbitration
			twi_error = TW_MT_ARB_LOST;
    210e:	4b c0       	rjmp	.+150    	; 0x21a6 <__vector_39+0x18a>
    2110:	88 e3       	ldi	r24, 0x38	; 56
    2112:	80 93 1d 06 	sts	0x061D, r24	; 0x80061d <_ZL9twi_error>
			releaseBus();
    2116:	7c df       	rcall	.-264    	; 0x2010 <_Z10releaseBusv>
			transmitting = false;
    2118:	10 92 2a 06 	sts	0x062A, r1	; 0x80062a <_ZL12transmitting>
			break;
    211c:	44 c0       	rjmp	.+136    	; 0x21a6 <__vector_39+0x18a>

		// Master Receiver
		case TW_MR_DATA_ACK: // data received, ack sent
			// put byte into buffer
			twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    211e:	e0 91 24 06 	lds	r30, 0x0624	; 0x800624 <_ZL16twi_masterBuffer>
    2122:	f0 91 25 06 	lds	r31, 0x0625	; 0x800625 <_ZL16twi_masterBuffer+0x1>
    2126:	80 91 23 06 	lds	r24, 0x0623	; 0x800623 <_ZL21twi_masterBufferIndex>
    212a:	91 e0       	ldi	r25, 0x01	; 1
    212c:	98 0f       	add	r25, r24
    212e:	90 93 23 06 	sts	0x0623, r25	; 0x800623 <_ZL21twi_masterBufferIndex>
    2132:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2136:	e8 0f       	add	r30, r24
    2138:	f1 1d       	adc	r31, r1
    213a:	90 83       	st	Z, r25
		case TW_MR_SLA_ACK:  // address sent, ack received
			// ack if more bytes are expected, otherwise nack
			if(twi_masterBufferIndex < twi_masterBufferLength){
    213c:	90 91 23 06 	lds	r25, 0x0623	; 0x800623 <_ZL21twi_masterBufferIndex>
    2140:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <_ZL22twi_masterBufferLength>
    2144:	98 17       	cp	r25, r24
    2146:	20 f4       	brcc	.+8      	; 0x2150 <__vector_39+0x134>

//=======================Interrupt Functions=========================//

void reply(bool ack) {
	if(ack){ // transmit master read ready signal, with or without ack
		TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2148:	85 ec       	ldi	r24, 0xC5	; 197
    214a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    214e:	2b c0       	rjmp	.+86     	; 0x21a6 <__vector_39+0x18a>
	}else{
		TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2150:	85 e8       	ldi	r24, 0x85	; 133
    2152:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2156:	27 c0       	rjmp	.+78     	; 0x21a6 <__vector_39+0x18a>
				reply(false);
			}
			break;
		case TW_MR_DATA_NACK: // data received, nack sent
			// put final byte into buffer
			twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2158:	e0 91 24 06 	lds	r30, 0x0624	; 0x800624 <_ZL16twi_masterBuffer>
    215c:	f0 91 25 06 	lds	r31, 0x0625	; 0x800625 <_ZL16twi_masterBuffer+0x1>
    2160:	80 91 23 06 	lds	r24, 0x0623	; 0x800623 <_ZL21twi_masterBufferIndex>
    2164:	91 e0       	ldi	r25, 0x01	; 1
    2166:	98 0f       	add	r25, r24
    2168:	90 93 23 06 	sts	0x0623, r25	; 0x800623 <_ZL21twi_masterBufferIndex>
    216c:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2170:	e8 0f       	add	r30, r24
    2172:	f1 1d       	adc	r31, r1
			if (twi_sendStop){
    2174:	90 83       	st	Z, r25
    2176:	80 91 27 06 	lds	r24, 0x0627	; 0x800627 <_ZL12twi_sendStop>
    217a:	88 23       	and	r24, r24
				stop();
    217c:	21 f0       	breq	.+8      	; 0x2186 <__vector_39+0x16a>
    217e:	3d df       	rcall	.-390    	; 0x1ffa <_Z4stopv>
				transmitting = false;
    2180:	10 92 2a 06 	sts	0x062A, r1	; 0x80062a <_ZL12transmitting>
    2184:	10 c0       	rjmp	.+32     	; 0x21a6 <__vector_39+0x18a>
			}else {
				twi_inRepStart = true;	// we're gonna send the START
    2186:	81 e0       	ldi	r24, 0x01	; 1
    2188:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <_ZL14twi_inRepStart>
				// don't enable the interrupt. We'll generate the start, but we
				// avoid handling the interrupt until we're in the next transaction,
				// at the point where we would normally issue the start.
				TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    218c:	84 ea       	ldi	r24, 0xA4	; 164
    218e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
				twi_state = TWI_READY;
    2192:	10 92 29 06 	sts	0x0629, r1	; 0x800629 <_ZL9twi_state>
			}
			break;
		case TW_MR_SLA_NACK: // address sent, nack received
			stop();
    2196:	07 c0       	rjmp	.+14     	; 0x21a6 <__vector_39+0x18a>
			transmitting = false;
    2198:	30 df       	rcall	.-416    	; 0x1ffa <_Z4stopv>
    219a:	10 92 2a 06 	sts	0x062A, r1	; 0x80062a <_ZL12transmitting>
*/
		// All
		case TW_NO_INFO:   // no state information
			break;
		case TW_BUS_ERROR: // bus error, illegal stop/start
			twi_error = TW_BUS_ERROR;
    219e:	03 c0       	rjmp	.+6      	; 0x21a6 <__vector_39+0x18a>
    21a0:	10 92 1d 06 	sts	0x061D, r1	; 0x80061d <_ZL9twi_error>
			stop();
    21a4:	2a df       	rcall	.-428    	; 0x1ffa <_Z4stopv>
			break;
	}
}
    21a6:	ff 91       	pop	r31
    21a8:	ef 91       	pop	r30
    21aa:	bf 91       	pop	r27
    21ac:	af 91       	pop	r26
    21ae:	9f 91       	pop	r25
    21b0:	8f 91       	pop	r24
    21b2:	7f 91       	pop	r23
    21b4:	6f 91       	pop	r22
    21b6:	5f 91       	pop	r21
    21b8:	4f 91       	pop	r20
    21ba:	3f 91       	pop	r19
    21bc:	2f 91       	pop	r18
    21be:	0f 90       	pop	r0
    21c0:	0b be       	out	0x3b, r0	; 59
    21c2:	0f 90       	pop	r0
    21c4:	0f be       	out	0x3f, r0	; 63
    21c6:	0f 90       	pop	r0
    21c8:	1f 90       	pop	r1
    21ca:	18 95       	reti

000021cc <_ZN13DigitalSensor5beginEv>:
	else LedPort &= ~LedPin;
}

bool Robot::ReadTestBtn(){
	return !((TestBtnPinPort & TestBtnPin) > 0);
}
    21cc:	81 e0       	ldi	r24, 0x01	; 1
    21ce:	08 95       	ret

000021d0 <_ZN13DigitalSensor14IsValidRequestEPKhh>:
    21d0:	81 e0       	ldi	r24, 0x01	; 1
    21d2:	41 11       	cpse	r20, r1
    21d4:	80 e0       	ldi	r24, 0x00	; 0
    21d6:	08 95       	ret

000021d8 <_ZN13DigitalSensor15UpdateRequestedEPh>:
    21d8:	fc 01       	movw	r30, r24
    21da:	a5 81       	ldd	r26, Z+5	; 0x05
    21dc:	b6 81       	ldd	r27, Z+6	; 0x06
    21de:	9c 91       	ld	r25, X
    21e0:	84 81       	ldd	r24, Z+4	; 0x04
    21e2:	98 23       	and	r25, r24
    21e4:	21 e0       	ldi	r18, 0x01	; 1
    21e6:	09 f4       	brne	.+2      	; 0x21ea <_ZN13DigitalSensor15UpdateRequestedEPh+0x12>
    21e8:	20 e0       	ldi	r18, 0x00	; 0
    21ea:	87 81       	ldd	r24, Z+7	; 0x07
    21ec:	82 27       	eor	r24, r18
    21ee:	fb 01       	movw	r30, r22
    21f0:	80 83       	st	Z, r24
    21f2:	81 e0       	ldi	r24, 0x01	; 1
    21f4:	08 95       	ret

000021f6 <_ZN7ISensor6UpdateEPKhh>:
    21f6:	cf 93       	push	r28
    21f8:	df 93       	push	r29
    21fa:	ec 01       	movw	r28, r24
    21fc:	e8 81       	ld	r30, Y
    21fe:	f9 81       	ldd	r31, Y+1	; 0x01
    2200:	04 80       	ldd	r0, Z+4	; 0x04
    2202:	f5 81       	ldd	r31, Z+5	; 0x05
    2204:	e0 2d       	mov	r30, r0
    2206:	19 95       	eicall
    2208:	88 23       	and	r24, r24
    220a:	a1 f0       	breq	.+40     	; 0x2234 <__stack+0x35>
    220c:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    2210:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    2214:	8a 81       	ldd	r24, Y+2	; 0x02
    2216:	82 83       	std	Z+2, r24	; 0x02
    2218:	bf 01       	movw	r22, r30
    221a:	6d 5f       	subi	r22, 0xFD	; 253
    221c:	7f 4f       	sbci	r23, 0xFF	; 255
    221e:	e8 81       	ld	r30, Y
    2220:	f9 81       	ldd	r31, Y+1	; 0x01
    2222:	06 80       	ldd	r0, Z+6	; 0x06
    2224:	f7 81       	ldd	r31, Z+7	; 0x07
    2226:	e0 2d       	mov	r30, r0
    2228:	ce 01       	movw	r24, r28
    222a:	19 95       	eicall
    222c:	61 e0       	ldi	r22, 0x01	; 1
    222e:	68 0f       	add	r22, r24
    2230:	83 e0       	ldi	r24, 0x03	; 3
    2232:	17 da       	rcall	.-3026   	; 0x1662 <_ZN9EtherComm11SendCommandEhh>
    2234:	df 91       	pop	r29
    2236:	cf 91       	pop	r28
    2238:	08 95       	ret

0000223a <_ZN5Robot6SetLedEb>:
    223a:	88 23       	and	r24, r24
    223c:	11 f0       	breq	.+4      	; 0x2242 <_ZN5Robot6SetLedEb+0x8>
    223e:	2f 9a       	sbi	0x05, 7	; 5
    2240:	08 95       	ret
    2242:	2f 98       	cbi	0x05, 7	; 5
    2244:	08 95       	ret

00002246 <_ZN5Robot14RegisterDeviceER7ISensor>:
bool Robot::begin(){
	LedDDR |= LedPin;
	return RegisterDevices();
}

void Robot::RegisterDevice(ISensor& sensor){
    2246:	0f 93       	push	r16
    2248:	1f 93       	push	r17
    224a:	cf 93       	push	r28
    224c:	df 93       	push	r29
	uint8_t id = sensor.getId();
	if(devices[id] == NULL){
    224e:	dc 01       	movw	r26, r24
    2250:	12 96       	adiw	r26, 0x02	; 2
    2252:	cc 91       	ld	r28, X
    2254:	12 97       	sbiw	r26, 0x02	; 2
    2256:	d0 e0       	ldi	r29, 0x00	; 0
    2258:	fe 01       	movw	r30, r28
    225a:	ee 0f       	add	r30, r30
    225c:	ff 1f       	adc	r31, r31
    225e:	ee 5b       	subi	r30, 0xBE	; 190
    2260:	f9 4f       	sbci	r31, 0xF9	; 249
    2262:	20 81       	ld	r18, Z
    2264:	31 81       	ldd	r19, Z+1	; 0x01
    2266:	23 2b       	or	r18, r19
    2268:	79 f4       	brne	.+30     	; 0x2288 <_ZN5Robot14RegisterDeviceER7ISensor+0x42>
    226a:	8c 01       	movw	r16, r24
		if(sensor.begin()){
    226c:	ed 91       	ld	r30, X+
    226e:	fc 91       	ld	r31, X
    2270:	02 80       	ldd	r0, Z+2	; 0x02
    2272:	f3 81       	ldd	r31, Z+3	; 0x03
    2274:	e0 2d       	mov	r30, r0
    2276:	19 95       	eicall
    2278:	88 23       	and	r24, r24
    227a:	31 f0       	breq	.+12     	; 0x2288 <_ZN5Robot14RegisterDeviceER7ISensor+0x42>
			devices[id] = &sensor; //TODO error handling
    227c:	cc 0f       	add	r28, r28
    227e:	dd 1f       	adc	r29, r29
    2280:	ce 5b       	subi	r28, 0xBE	; 190
    2282:	d9 4f       	sbci	r29, 0xF9	; 249
    2284:	19 83       	std	Y+1, r17	; 0x01
    2286:	08 83       	st	Y, r16
		}
	}else{
		//TODO id collisions
	}
}
    2288:	df 91       	pop	r29
    228a:	cf 91       	pop	r28
    228c:	1f 91       	pop	r17
    228e:	0f 91       	pop	r16
    2290:	08 95       	ret

00002292 <_ZN5Robot15RegisterDevicesEv>:

DigitalSensor BtnTest(0, TestBtnDDR, TestBtnPort, TestBtnPinPort, TestBtnPin);
ImuSensor Imu(1);

bool Robot::RegisterDevices(){
	RegisterDevice(BtnTest); //TODO return if successful
    2292:	8a e3       	ldi	r24, 0x3A	; 58
    2294:	96 e0       	ldi	r25, 0x06	; 6
    2296:	d7 df       	rcall	.-82     	; 0x2246 <_ZN5Robot14RegisterDeviceER7ISensor>
	RegisterDevice(Imu);
    2298:	8b e2       	ldi	r24, 0x2B	; 43
    229a:	96 e0       	ldi	r25, 0x06	; 6
    229c:	d4 df       	rcall	.-88     	; 0x2246 <_ZN5Robot14RegisterDeviceER7ISensor>
	
	return true;
}
    229e:	81 e0       	ldi	r24, 0x01	; 1
    22a0:	08 95       	ret

000022a2 <_ZN5Robot5beginEv>:
bool Robot::ReadTestBtn(){
	return !((TestBtnPinPort & TestBtnPin) > 0);
}

bool Robot::begin(){
	LedDDR |= LedPin;
    22a2:	27 9a       	sbi	0x04, 7	; 4
	return RegisterDevices();
    22a4:	f6 cf       	rjmp	.-20     	; 0x2292 <_ZN5Robot15RegisterDevicesEv>
}
    22a6:	08 95       	ret

000022a8 <_GLOBAL__sub_I__ZN5Robot7devicesE>:
	
	virtual void Update(const uint8_t* data, uint8_t len) = 0;
	virtual bool begin() = 0;
	
protected:
	IDevice(uint8_t ID) : id(ID){
    22a8:	ea e3       	ldi	r30, 0x3A	; 58
    22aa:	f6 e0       	ldi	r31, 0x06	; 6
    22ac:	12 82       	std	Z+2, r1	; 0x02
				//}
			}
		}
	
	protected:
		ISensor(uint8_t ID, uint8_t type) : IDevice(ID), sensorType(type) {
    22ae:	81 e0       	ldi	r24, 0x01	; 1
    22b0:	83 83       	std	Z+3, r24	; 0x03

#include "../ISensor.h"

class DigitalSensor : public ISensor{
public:
	DigitalSensor(uint8_t ID, Register& DDRPort, Register& PortPort, Register& PinPort, uint8_t Pin, bool Inversed = true) : ISensor(ID, SENSOR_TYPE_DIGITAL), pin(Pin), pinPort(&PinPort), inversed(Inversed) {
    22b2:	20 ec       	ldi	r18, 0xC0	; 192
    22b4:	32 e0       	ldi	r19, 0x02	; 2
    22b6:	31 83       	std	Z+1, r19	; 0x01
    22b8:	20 83       	st	Z, r18
    22ba:	84 83       	std	Z+4, r24	; 0x04
    22bc:	2f e2       	ldi	r18, 0x2F	; 47
    22be:	30 e0       	ldi	r19, 0x00	; 0
    22c0:	36 83       	std	Z+6, r19	; 0x06
    22c2:	25 83       	std	Z+5, r18	; 0x05
    22c4:	87 83       	std	Z+7, r24	; 0x07
		DDRPort &= ~pin; //Enable input
    22c6:	80 98       	cbi	0x10, 0	; 16
		PortPort |= pin; //Enable pullup
    22c8:	88 9a       	sbi	0x11, 0	; 17
#include <stddef.h>

IDevice* Robot::devices[NUM_DEVICES];

DigitalSensor BtnTest(0, TestBtnDDR, TestBtnPort, TestBtnPinPort, TestBtnPin);
ImuSensor Imu(1);
    22ca:	61 e0       	ldi	r22, 0x01	; 1
    22cc:	8b e2       	ldi	r24, 0x2B	; 43
    22ce:	96 e0       	ldi	r25, 0x06	; 6
    22d0:	2f c0       	rjmp	.+94     	; 0x2330 <_ZN9ImuSensorC1Eh>
    22d2:	08 95       	ret

000022d4 <_ZN9ImuSensor14IsValidRequestEPKhh>:
						len = UpdateRequested(EtherComm::buffer + /*4*/3);
						EtherComm::SendCommand(CMD_UpdateDevice, len +  /*2*/1);
					}
				//}
			}
		}
    22d4:	81 e0       	ldi	r24, 0x01	; 1
    22d6:	41 11       	cpse	r20, r1
    22d8:	80 e0       	ldi	r24, 0x00	; 0
    22da:	08 95       	ret

000022dc <_ZN9ImuSensor5beginEv>:
ImuSensor::ImuSensor(uint8_t ID) : ISensor(ID, SENSOR_TYPE_DIGITAL), imu(55, 0x28) {
	
}

bool ImuSensor::begin(){
	return imu.begin();
    22dc:	6c e0       	ldi	r22, 0x0C	; 12
    22de:	04 96       	adiw	r24, 0x04	; 4
    22e0:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>
}
    22e4:	08 95       	ret

000022e6 <_ZN9ImuSensor15UpdateRequestedEPh>:
	*buffer++ = *val++;
}

AdafruitImu::Vector<3> vector;

uint8_t ImuSensor::UpdateRequested(uint8_t* buffer){
    22e6:	cf 93       	push	r28
    22e8:	df 93       	push	r29
    22ea:	eb 01       	movw	r28, r22
	buffer[0] = 0b01111111;
    22ec:	2f e7       	ldi	r18, 0x7F	; 127
    22ee:	28 83       	st	Y, r18
	buffer[1] = imu.getTemp();
    22f0:	04 96       	adiw	r24, 0x04	; 4
    22f2:	0e 94 5d 02 	call	0x4ba	; 0x4ba <_ZN15Adafruit_BNO0557getTempEv>
    22f6:	89 83       	std	Y+1, r24	; 0x01
	return imu.begin();
}

static void saveFloat(float f, uint8_t* buffer){
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    22f8:	1a 82       	std	Y+2, r1	; 0x02
	*buffer++ = *val++;
    22fa:	1b 82       	std	Y+3, r1	; 0x03
	*buffer++ = *val++;
    22fc:	1c 82       	std	Y+4, r1	; 0x04
	*buffer++ = *val++;
    22fe:	1d 82       	std	Y+5, r1	; 0x05
	return imu.begin();
}

static void saveFloat(float f, uint8_t* buffer){
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    2300:	1e 82       	std	Y+6, r1	; 0x06
	*buffer++ = *val++;
    2302:	1f 82       	std	Y+7, r1	; 0x07
	*buffer++ = *val++;
    2304:	18 86       	std	Y+8, r1	; 0x08
	*buffer++ = *val++;
    2306:	19 86       	std	Y+9, r1	; 0x09
	return imu.begin();
}

static void saveFloat(float f, uint8_t* buffer){
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    2308:	1a 86       	std	Y+10, r1	; 0x0a
	*buffer++ = *val++;
    230a:	1b 86       	std	Y+11, r1	; 0x0b
	*buffer++ = *val++;
    230c:	1c 86       	std	Y+12, r1	; 0x0c
	*buffer++ = *val++;
    230e:	1d 86       	std	Y+13, r1	; 0x0d
	return imu.begin();
}

static void saveFloat(float f, uint8_t* buffer){
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    2310:	1e 86       	std	Y+14, r1	; 0x0e
	*buffer++ = *val++;
    2312:	1f 86       	std	Y+15, r1	; 0x0f
	*buffer++ = *val++;
    2314:	18 8a       	std	Y+16, r1	; 0x10
	*buffer++ = *val++;
    2316:	19 8a       	std	Y+17, r1	; 0x11
	return imu.begin();
}

static void saveFloat(float f, uint8_t* buffer){
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    2318:	1a 8a       	std	Y+18, r1	; 0x12
	*buffer++ = *val++;
    231a:	1b 8a       	std	Y+19, r1	; 0x13
	*buffer++ = *val++;
    231c:	1c 8a       	std	Y+20, r1	; 0x14
	*buffer++ = *val++;
    231e:	1d 8a       	std	Y+21, r1	; 0x15
	return imu.begin();
}

static void saveFloat(float f, uint8_t* buffer){
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    2320:	1e 8a       	std	Y+22, r1	; 0x16
	*buffer++ = *val++;
    2322:	1f 8a       	std	Y+23, r1	; 0x17
	*buffer++ = *val++;
    2324:	18 8e       	std	Y+24, r1	; 0x18
	*buffer++ = *val++;
    2326:	19 8e       	std	Y+25, r1	; 0x19
	saveFloat(/*vector.x()*/0.0, buffer + 14);
	saveFloat(/*vector.y()*/0.0, buffer + 18);
	saveFloat(/*vector.z()*/0.0, buffer + 22);
	
	return 1 + 1 + 6*4;
    2328:	8a e1       	ldi	r24, 0x1A	; 26
    232a:	df 91       	pop	r29
    232c:	cf 91       	pop	r28
    232e:	08 95       	ret

00002330 <_ZN9ImuSensorC1Eh>:

#include "ImuSensor.h"
//#include "../BNO055/utility/vector.h"
//Adafruit_BNO055 ImuSensor::imu;

ImuSensor::ImuSensor(uint8_t ID) : ISensor(ID, SENSOR_TYPE_DIGITAL), imu(55, 0x28) {
    2330:	0f 93       	push	r16
    2332:	1f 93       	push	r17
	
	virtual void Update(const uint8_t* data, uint8_t len) = 0;
	virtual bool begin() = 0;
	
protected:
	IDevice(uint8_t ID) : id(ID){
    2334:	fc 01       	movw	r30, r24
    2336:	62 83       	std	Z+2, r22	; 0x02
	
	protected:
		ISensor(uint8_t ID, uint8_t type) : IDevice(ID), sensorType(type) {
    2338:	21 e0       	ldi	r18, 0x01	; 1
    233a:	23 83       	std	Z+3, r18	; 0x03
    233c:	2c ec       	ldi	r18, 0xCC	; 204
    233e:	32 e0       	ldi	r19, 0x02	; 2
    2340:	31 83       	std	Z+1, r19	; 0x01
    2342:	20 83       	st	Z, r18
    2344:	0c e1       	ldi	r16, 0x1C	; 28
    2346:	16 e0       	ldi	r17, 0x06	; 6
    2348:	28 e2       	ldi	r18, 0x28	; 40
    234a:	47 e3       	ldi	r20, 0x37	; 55
    234c:	50 e0       	ldi	r21, 0x00	; 0
    234e:	60 e0       	ldi	r22, 0x00	; 0
    2350:	70 e0       	ldi	r23, 0x00	; 0
    2352:	04 96       	adiw	r24, 0x04	; 4
    2354:	0e 94 54 01 	call	0x2a8	; 0x2a8 <_ZN15Adafruit_BNO055C1ElhP3TWI>
	
}
    2358:	1f 91       	pop	r17
    235a:	0f 91       	pop	r16
    235c:	08 95       	ret

0000235e <_GLOBAL__sub_I__ZN9ImuSensorC2Eh>:
	template <uint8_t N> class Vector
	{
		public:
		Vector()
		{
			memset(p_vec, 0, sizeof(double)*N);
    235e:	8c e0       	ldi	r24, 0x0C	; 12
    2360:	e2 e4       	ldi	r30, 0x42	; 66
    2362:	f8 e0       	ldi	r31, 0x08	; 8
    2364:	df 01       	movw	r26, r30
    2366:	1d 92       	st	X+, r1
    2368:	8a 95       	dec	r24
    236a:	e9 f7       	brne	.-6      	; 0x2366 <_GLOBAL__sub_I__ZN9ImuSensorC2Eh+0x8>
    236c:	08 95       	ret

0000236e <_GLOBAL__sub_I_bno>:
	setup();
	
	while(true){
		loop();
	}
    236e:	0f 93       	push	r16
    2370:	1f 93       	push	r17
/* Set the delay between fresh samples */
#define BNO055_SAMPLERATE_DELAY_MS 100

// Check I2C device address and correct line below (by default address is 0x29 or 0x28)
//                                   id, address
Adafruit_BNO055 bno = Adafruit_BNO055(55, 0x28);
    2372:	0c e1       	ldi	r16, 0x1C	; 28
    2374:	16 e0       	ldi	r17, 0x06	; 6
    2376:	28 e2       	ldi	r18, 0x28	; 40
    2378:	47 e3       	ldi	r20, 0x37	; 55
    237a:	50 e0       	ldi	r21, 0x00	; 0
    237c:	60 e0       	ldi	r22, 0x00	; 0
    237e:	70 e0       	ldi	r23, 0x00	; 0
    2380:	8e e4       	ldi	r24, 0x4E	; 78
    2382:	98 e0       	ldi	r25, 0x08	; 8
    2384:	0e 94 54 01 	call	0x2a8	; 0x2a8 <_ZN15Adafruit_BNO055C1ElhP3TWI>
	setup();
	
	while(true){
		loop();
	}
    2388:	1f 91       	pop	r17
    238a:	0f 91       	pop	r16
    238c:	08 95       	ret

0000238e <_ZN5Print5writeEPKhj>:
uint16_t Print::println(long num, int base)
{
  uint16_t n = print(num, base);
  n += println();
  return n;
}
    238e:	cf 92       	push	r12
    2390:	df 92       	push	r13
    2392:	ef 92       	push	r14
    2394:	ff 92       	push	r15
    2396:	0f 93       	push	r16
    2398:	1f 93       	push	r17
    239a:	cf 93       	push	r28
    239c:	df 93       	push	r29
    239e:	41 15       	cp	r20, r1
    23a0:	51 05       	cpc	r21, r1
    23a2:	c1 f0       	breq	.+48     	; 0x23d4 <_ZN5Print5writeEPKhj+0x46>
    23a4:	6a 01       	movw	r12, r20
    23a6:	8c 01       	movw	r16, r24
    23a8:	e6 2e       	mov	r14, r22
    23aa:	f7 2e       	mov	r15, r23
    23ac:	c0 e0       	ldi	r28, 0x00	; 0
    23ae:	d0 e0       	ldi	r29, 0x00	; 0
    23b0:	d7 01       	movw	r26, r14
    23b2:	6d 91       	ld	r22, X+
    23b4:	7d 01       	movw	r14, r26
    23b6:	d8 01       	movw	r26, r16
    23b8:	ed 91       	ld	r30, X+
    23ba:	fc 91       	ld	r31, X
    23bc:	01 90       	ld	r0, Z+
    23be:	f0 81       	ld	r31, Z
    23c0:	e0 2d       	mov	r30, r0
    23c2:	c8 01       	movw	r24, r16
    23c4:	19 95       	eicall
    23c6:	89 2b       	or	r24, r25
    23c8:	39 f0       	breq	.+14     	; 0x23d8 <_ZN5Print5writeEPKhj+0x4a>
    23ca:	21 96       	adiw	r28, 0x01	; 1
    23cc:	cc 16       	cp	r12, r28
    23ce:	dd 06       	cpc	r13, r29
    23d0:	79 f7       	brne	.-34     	; 0x23b0 <_ZN5Print5writeEPKhj+0x22>
    23d2:	02 c0       	rjmp	.+4      	; 0x23d8 <_ZN5Print5writeEPKhj+0x4a>
    23d4:	c0 e0       	ldi	r28, 0x00	; 0
    23d6:	d0 e0       	ldi	r29, 0x00	; 0
    23d8:	ce 01       	movw	r24, r28
    23da:	df 91       	pop	r29
    23dc:	cf 91       	pop	r28
    23de:	1f 91       	pop	r17
    23e0:	0f 91       	pop	r16
    23e2:	ff 90       	pop	r15
    23e4:	ef 90       	pop	r14
    23e6:	df 90       	pop	r13
    23e8:	cf 90       	pop	r12
    23ea:	08 95       	ret

000023ec <_ZN5Print5printEPKc>:
    23ec:	61 15       	cp	r22, r1
    23ee:	71 05       	cpc	r23, r1
    23f0:	81 f0       	breq	.+32     	; 0x2412 <_ZN5Print5printEPKc+0x26>
    23f2:	fb 01       	movw	r30, r22
    23f4:	01 90       	ld	r0, Z+
    23f6:	00 20       	and	r0, r0
    23f8:	e9 f7       	brne	.-6      	; 0x23f4 <_ZN5Print5printEPKc+0x8>
    23fa:	31 97       	sbiw	r30, 0x01	; 1
    23fc:	af 01       	movw	r20, r30
    23fe:	46 1b       	sub	r20, r22
    2400:	57 0b       	sbc	r21, r23
    2402:	dc 01       	movw	r26, r24
    2404:	ed 91       	ld	r30, X+
    2406:	fc 91       	ld	r31, X
    2408:	02 80       	ldd	r0, Z+2	; 0x02
    240a:	f3 81       	ldd	r31, Z+3	; 0x03
    240c:	e0 2d       	mov	r30, r0
    240e:	19 95       	eicall
    2410:	08 95       	ret
    2412:	80 e0       	ldi	r24, 0x00	; 0
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	08 95       	ret

00002418 <_ZN5Print7printlnEv>:
    2418:	dc 01       	movw	r26, r24
    241a:	ed 91       	ld	r30, X+
    241c:	fc 91       	ld	r31, X
    241e:	02 80       	ldd	r0, Z+2	; 0x02
    2420:	f3 81       	ldd	r31, Z+3	; 0x03
    2422:	e0 2d       	mov	r30, r0
    2424:	42 e0       	ldi	r20, 0x02	; 2
    2426:	50 e0       	ldi	r21, 0x00	; 0
    2428:	64 ed       	ldi	r22, 0xD4	; 212
    242a:	72 e0       	ldi	r23, 0x02	; 2
    242c:	19 95       	eicall
    242e:	08 95       	ret

00002430 <_ZN5Print7printlnEPKc>:
    2430:	0f 93       	push	r16
    2432:	1f 93       	push	r17
    2434:	cf 93       	push	r28
    2436:	df 93       	push	r29
    2438:	ec 01       	movw	r28, r24
    243a:	d8 df       	rcall	.-80     	; 0x23ec <_ZN5Print5printEPKc>
    243c:	8c 01       	movw	r16, r24
    243e:	ce 01       	movw	r24, r28
    2440:	eb df       	rcall	.-42     	; 0x2418 <_ZN5Print7printlnEv>
    2442:	80 0f       	add	r24, r16
    2444:	91 1f       	adc	r25, r17
    2446:	df 91       	pop	r29
    2448:	cf 91       	pop	r28
    244a:	1f 91       	pop	r17
    244c:	0f 91       	pop	r16
    244e:	08 95       	ret

00002450 <_ZN5Print11printNumberEmh>:
    2450:	8f 92       	push	r8
    2452:	9f 92       	push	r9
    2454:	af 92       	push	r10
    2456:	bf 92       	push	r11
    2458:	ef 92       	push	r14
    245a:	ff 92       	push	r15
    245c:	0f 93       	push	r16
    245e:	1f 93       	push	r17
    2460:	cf 93       	push	r28
    2462:	df 93       	push	r29
    2464:	cd b7       	in	r28, 0x3d	; 61
    2466:	de b7       	in	r29, 0x3e	; 62
    2468:	a1 97       	sbiw	r28, 0x21	; 33
    246a:	0f b6       	in	r0, 0x3f	; 63
    246c:	f8 94       	cli
    246e:	de bf       	out	0x3e, r29	; 62
    2470:	0f be       	out	0x3f, r0	; 63
    2472:	cd bf       	out	0x3d, r28	; 61
    2474:	7c 01       	movw	r14, r24
    2476:	cb 01       	movw	r24, r22
    2478:	ba 01       	movw	r22, r20
    247a:	19 a2       	std	Y+33, r1	; 0x21
    247c:	22 30       	cpi	r18, 0x02	; 2
    247e:	08 f4       	brcc	.+2      	; 0x2482 <_ZN5Print11printNumberEmh+0x32>
    2480:	2a e0       	ldi	r18, 0x0A	; 10
    2482:	8e 01       	movw	r16, r28
    2484:	0f 5d       	subi	r16, 0xDF	; 223
    2486:	1f 4f       	sbci	r17, 0xFF	; 255
    2488:	82 2e       	mov	r8, r18
    248a:	91 2c       	mov	r9, r1
    248c:	a1 2c       	mov	r10, r1
    248e:	b1 2c       	mov	r11, r1
    2490:	a5 01       	movw	r20, r10
    2492:	94 01       	movw	r18, r8
    2494:	b9 d1       	rcall	.+882    	; 0x2808 <__udivmodsi4>
    2496:	e6 2f       	mov	r30, r22
    2498:	62 2f       	mov	r22, r18
    249a:	73 2f       	mov	r23, r19
    249c:	84 2f       	mov	r24, r20
    249e:	95 2f       	mov	r25, r21
    24a0:	01 50       	subi	r16, 0x01	; 1
    24a2:	11 09       	sbc	r17, r1
    24a4:	ea 30       	cpi	r30, 0x0A	; 10
    24a6:	10 f4       	brcc	.+4      	; 0x24ac <_ZN5Print11printNumberEmh+0x5c>
    24a8:	e0 5d       	subi	r30, 0xD0	; 208
    24aa:	01 c0       	rjmp	.+2      	; 0x24ae <_ZN5Print11printNumberEmh+0x5e>
    24ac:	e9 5c       	subi	r30, 0xC9	; 201
    24ae:	d8 01       	movw	r26, r16
    24b0:	ec 93       	st	X, r30
    24b2:	61 15       	cp	r22, r1
    24b4:	71 05       	cpc	r23, r1
    24b6:	81 05       	cpc	r24, r1
    24b8:	91 05       	cpc	r25, r1
    24ba:	51 f7       	brne	.-44     	; 0x2490 <_ZN5Print11printNumberEmh+0x40>
    24bc:	01 15       	cp	r16, r1
    24be:	11 05       	cpc	r17, r1
    24c0:	91 f0       	breq	.+36     	; 0x24e6 <_ZN5Print11printNumberEmh+0x96>
    24c2:	f8 01       	movw	r30, r16
    24c4:	01 90       	ld	r0, Z+
    24c6:	00 20       	and	r0, r0
    24c8:	e9 f7       	brne	.-6      	; 0x24c4 <_ZN5Print11printNumberEmh+0x74>
    24ca:	31 97       	sbiw	r30, 0x01	; 1
    24cc:	af 01       	movw	r20, r30
    24ce:	40 1b       	sub	r20, r16
    24d0:	51 0b       	sbc	r21, r17
    24d2:	d7 01       	movw	r26, r14
    24d4:	ed 91       	ld	r30, X+
    24d6:	fc 91       	ld	r31, X
    24d8:	02 80       	ldd	r0, Z+2	; 0x02
    24da:	f3 81       	ldd	r31, Z+3	; 0x03
    24dc:	e0 2d       	mov	r30, r0
    24de:	b8 01       	movw	r22, r16
    24e0:	c7 01       	movw	r24, r14
    24e2:	19 95       	eicall
    24e4:	01 c0       	rjmp	.+2      	; 0x24e8 <_ZN5Print11printNumberEmh+0x98>
    24e6:	80 e0       	ldi	r24, 0x00	; 0
    24e8:	a1 96       	adiw	r28, 0x21	; 33
    24ea:	0f b6       	in	r0, 0x3f	; 63
    24ec:	f8 94       	cli
    24ee:	de bf       	out	0x3e, r29	; 62
    24f0:	0f be       	out	0x3f, r0	; 63
    24f2:	cd bf       	out	0x3d, r28	; 61
    24f4:	df 91       	pop	r29
    24f6:	cf 91       	pop	r28
    24f8:	1f 91       	pop	r17
    24fa:	0f 91       	pop	r16
    24fc:	ff 90       	pop	r15
    24fe:	ef 90       	pop	r14
    2500:	bf 90       	pop	r11
    2502:	af 90       	pop	r10
    2504:	9f 90       	pop	r9
    2506:	8f 90       	pop	r8
    2508:	08 95       	ret

0000250a <_ZN5Print5printEmi>:
  }
}

uint16_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
    250a:	21 15       	cp	r18, r1
    250c:	31 05       	cpc	r19, r1
    250e:	49 f4       	brne	.+18     	; 0x2522 <_ZN5Print5printEmi+0x18>
    2510:	dc 01       	movw	r26, r24
    2512:	ed 91       	ld	r30, X+
    2514:	fc 91       	ld	r31, X
    2516:	01 90       	ld	r0, Z+
    2518:	f0 81       	ld	r31, Z
    251a:	e0 2d       	mov	r30, r0
    251c:	64 2f       	mov	r22, r20
    251e:	19 95       	eicall
    2520:	08 95       	ret
  else return printNumber(n, base);
    2522:	96 df       	rcall	.-212    	; 0x2450 <_ZN5Print11printNumberEmh>
    2524:	90 e0       	ldi	r25, 0x00	; 0
}
    2526:	08 95       	ret

00002528 <_ZN5Print5printEhi>:
{
  return write(c);
}

uint16_t Print::print(unsigned char b, int base)
{
    2528:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
    252a:	46 2f       	mov	r20, r22
    252c:	50 e0       	ldi	r21, 0x00	; 0
    252e:	60 e0       	ldi	r22, 0x00	; 0
    2530:	70 e0       	ldi	r23, 0x00	; 0
    2532:	eb cf       	rjmp	.-42     	; 0x250a <_ZN5Print5printEmi>
}
    2534:	08 95       	ret

00002536 <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

uint16_t Print::println(unsigned char b, int base)
{
    2536:	0f 93       	push	r16
    2538:	1f 93       	push	r17
    253a:	cf 93       	push	r28
    253c:	df 93       	push	r29
    253e:	ec 01       	movw	r28, r24
  uint16_t n = print(b, base);
    2540:	f3 df       	rcall	.-26     	; 0x2528 <_ZN5Print5printEhi>
    2542:	8c 01       	movw	r16, r24
  n += println();
    2544:	ce 01       	movw	r24, r28
    2546:	68 df       	rcall	.-304    	; 0x2418 <_ZN5Print7printlnEv>
  return n;
}
    2548:	80 0f       	add	r24, r16
    254a:	91 1f       	adc	r25, r17
    254c:	df 91       	pop	r29
    254e:	cf 91       	pop	r28
    2550:	1f 91       	pop	r17
    2552:	0f 91       	pop	r16
    2554:	08 95       	ret

00002556 <__divsf3>:
    2556:	0c d0       	rcall	.+24     	; 0x2570 <__divsf3x>
    2558:	ba c0       	rjmp	.+372    	; 0x26ce <__fp_round>
    255a:	b2 d0       	rcall	.+356    	; 0x26c0 <__fp_pscB>
    255c:	40 f0       	brcs	.+16     	; 0x256e <__divsf3+0x18>
    255e:	a9 d0       	rcall	.+338    	; 0x26b2 <__fp_pscA>
    2560:	30 f0       	brcs	.+12     	; 0x256e <__divsf3+0x18>
    2562:	21 f4       	brne	.+8      	; 0x256c <__divsf3+0x16>
    2564:	5f 3f       	cpi	r21, 0xFF	; 255
    2566:	19 f0       	breq	.+6      	; 0x256e <__divsf3+0x18>
    2568:	9b c0       	rjmp	.+310    	; 0x26a0 <__fp_inf>
    256a:	51 11       	cpse	r21, r1
    256c:	e4 c0       	rjmp	.+456    	; 0x2736 <__fp_szero>
    256e:	9e c0       	rjmp	.+316    	; 0x26ac <__fp_nan>

00002570 <__divsf3x>:
    2570:	bf d0       	rcall	.+382    	; 0x26f0 <__fp_split3>
    2572:	98 f3       	brcs	.-26     	; 0x255a <__divsf3+0x4>

00002574 <__divsf3_pse>:
    2574:	99 23       	and	r25, r25
    2576:	c9 f3       	breq	.-14     	; 0x256a <__divsf3+0x14>
    2578:	55 23       	and	r21, r21
    257a:	b1 f3       	breq	.-20     	; 0x2568 <__divsf3+0x12>
    257c:	95 1b       	sub	r25, r21
    257e:	55 0b       	sbc	r21, r21
    2580:	bb 27       	eor	r27, r27
    2582:	aa 27       	eor	r26, r26
    2584:	62 17       	cp	r22, r18
    2586:	73 07       	cpc	r23, r19
    2588:	84 07       	cpc	r24, r20
    258a:	38 f0       	brcs	.+14     	; 0x259a <__divsf3_pse+0x26>
    258c:	9f 5f       	subi	r25, 0xFF	; 255
    258e:	5f 4f       	sbci	r21, 0xFF	; 255
    2590:	22 0f       	add	r18, r18
    2592:	33 1f       	adc	r19, r19
    2594:	44 1f       	adc	r20, r20
    2596:	aa 1f       	adc	r26, r26
    2598:	a9 f3       	breq	.-22     	; 0x2584 <__divsf3_pse+0x10>
    259a:	33 d0       	rcall	.+102    	; 0x2602 <__divsf3_pse+0x8e>
    259c:	0e 2e       	mov	r0, r30
    259e:	3a f0       	brmi	.+14     	; 0x25ae <__divsf3_pse+0x3a>
    25a0:	e0 e8       	ldi	r30, 0x80	; 128
    25a2:	30 d0       	rcall	.+96     	; 0x2604 <__divsf3_pse+0x90>
    25a4:	91 50       	subi	r25, 0x01	; 1
    25a6:	50 40       	sbci	r21, 0x00	; 0
    25a8:	e6 95       	lsr	r30
    25aa:	00 1c       	adc	r0, r0
    25ac:	ca f7       	brpl	.-14     	; 0x25a0 <__divsf3_pse+0x2c>
    25ae:	29 d0       	rcall	.+82     	; 0x2602 <__divsf3_pse+0x8e>
    25b0:	fe 2f       	mov	r31, r30
    25b2:	27 d0       	rcall	.+78     	; 0x2602 <__divsf3_pse+0x8e>
    25b4:	66 0f       	add	r22, r22
    25b6:	77 1f       	adc	r23, r23
    25b8:	88 1f       	adc	r24, r24
    25ba:	bb 1f       	adc	r27, r27
    25bc:	26 17       	cp	r18, r22
    25be:	37 07       	cpc	r19, r23
    25c0:	48 07       	cpc	r20, r24
    25c2:	ab 07       	cpc	r26, r27
    25c4:	b0 e8       	ldi	r27, 0x80	; 128
    25c6:	09 f0       	breq	.+2      	; 0x25ca <__divsf3_pse+0x56>
    25c8:	bb 0b       	sbc	r27, r27
    25ca:	80 2d       	mov	r24, r0
    25cc:	bf 01       	movw	r22, r30
    25ce:	ff 27       	eor	r31, r31
    25d0:	93 58       	subi	r25, 0x83	; 131
    25d2:	5f 4f       	sbci	r21, 0xFF	; 255
    25d4:	2a f0       	brmi	.+10     	; 0x25e0 <__divsf3_pse+0x6c>
    25d6:	9e 3f       	cpi	r25, 0xFE	; 254
    25d8:	51 05       	cpc	r21, r1
    25da:	68 f0       	brcs	.+26     	; 0x25f6 <__divsf3_pse+0x82>
    25dc:	61 c0       	rjmp	.+194    	; 0x26a0 <__fp_inf>
    25de:	ab c0       	rjmp	.+342    	; 0x2736 <__fp_szero>
    25e0:	5f 3f       	cpi	r21, 0xFF	; 255
    25e2:	ec f3       	brlt	.-6      	; 0x25de <__divsf3_pse+0x6a>
    25e4:	98 3e       	cpi	r25, 0xE8	; 232
    25e6:	dc f3       	brlt	.-10     	; 0x25de <__divsf3_pse+0x6a>
    25e8:	86 95       	lsr	r24
    25ea:	77 95       	ror	r23
    25ec:	67 95       	ror	r22
    25ee:	b7 95       	ror	r27
    25f0:	f7 95       	ror	r31
    25f2:	9f 5f       	subi	r25, 0xFF	; 255
    25f4:	c9 f7       	brne	.-14     	; 0x25e8 <__divsf3_pse+0x74>
    25f6:	88 0f       	add	r24, r24
    25f8:	91 1d       	adc	r25, r1
    25fa:	96 95       	lsr	r25
    25fc:	87 95       	ror	r24
    25fe:	97 f9       	bld	r25, 7
    2600:	08 95       	ret
    2602:	e1 e0       	ldi	r30, 0x01	; 1
    2604:	66 0f       	add	r22, r22
    2606:	77 1f       	adc	r23, r23
    2608:	88 1f       	adc	r24, r24
    260a:	bb 1f       	adc	r27, r27
    260c:	62 17       	cp	r22, r18
    260e:	73 07       	cpc	r23, r19
    2610:	84 07       	cpc	r24, r20
    2612:	ba 07       	cpc	r27, r26
    2614:	20 f0       	brcs	.+8      	; 0x261e <__divsf3_pse+0xaa>
    2616:	62 1b       	sub	r22, r18
    2618:	73 0b       	sbc	r23, r19
    261a:	84 0b       	sbc	r24, r20
    261c:	ba 0b       	sbc	r27, r26
    261e:	ee 1f       	adc	r30, r30
    2620:	88 f7       	brcc	.-30     	; 0x2604 <__divsf3_pse+0x90>
    2622:	e0 95       	com	r30
    2624:	08 95       	ret

00002626 <__floatunsisf>:
    2626:	e8 94       	clt
    2628:	09 c0       	rjmp	.+18     	; 0x263c <__floatsisf+0x12>

0000262a <__floatsisf>:
    262a:	97 fb       	bst	r25, 7
    262c:	3e f4       	brtc	.+14     	; 0x263c <__floatsisf+0x12>
    262e:	90 95       	com	r25
    2630:	80 95       	com	r24
    2632:	70 95       	com	r23
    2634:	61 95       	neg	r22
    2636:	7f 4f       	sbci	r23, 0xFF	; 255
    2638:	8f 4f       	sbci	r24, 0xFF	; 255
    263a:	9f 4f       	sbci	r25, 0xFF	; 255
    263c:	99 23       	and	r25, r25
    263e:	a9 f0       	breq	.+42     	; 0x266a <__floatsisf+0x40>
    2640:	f9 2f       	mov	r31, r25
    2642:	96 e9       	ldi	r25, 0x96	; 150
    2644:	bb 27       	eor	r27, r27
    2646:	93 95       	inc	r25
    2648:	f6 95       	lsr	r31
    264a:	87 95       	ror	r24
    264c:	77 95       	ror	r23
    264e:	67 95       	ror	r22
    2650:	b7 95       	ror	r27
    2652:	f1 11       	cpse	r31, r1
    2654:	f8 cf       	rjmp	.-16     	; 0x2646 <__floatsisf+0x1c>
    2656:	fa f4       	brpl	.+62     	; 0x2696 <__floatsisf+0x6c>
    2658:	bb 0f       	add	r27, r27
    265a:	11 f4       	brne	.+4      	; 0x2660 <__floatsisf+0x36>
    265c:	60 ff       	sbrs	r22, 0
    265e:	1b c0       	rjmp	.+54     	; 0x2696 <__floatsisf+0x6c>
    2660:	6f 5f       	subi	r22, 0xFF	; 255
    2662:	7f 4f       	sbci	r23, 0xFF	; 255
    2664:	8f 4f       	sbci	r24, 0xFF	; 255
    2666:	9f 4f       	sbci	r25, 0xFF	; 255
    2668:	16 c0       	rjmp	.+44     	; 0x2696 <__floatsisf+0x6c>
    266a:	88 23       	and	r24, r24
    266c:	11 f0       	breq	.+4      	; 0x2672 <__floatsisf+0x48>
    266e:	96 e9       	ldi	r25, 0x96	; 150
    2670:	11 c0       	rjmp	.+34     	; 0x2694 <__floatsisf+0x6a>
    2672:	77 23       	and	r23, r23
    2674:	21 f0       	breq	.+8      	; 0x267e <__floatsisf+0x54>
    2676:	9e e8       	ldi	r25, 0x8E	; 142
    2678:	87 2f       	mov	r24, r23
    267a:	76 2f       	mov	r23, r22
    267c:	05 c0       	rjmp	.+10     	; 0x2688 <__floatsisf+0x5e>
    267e:	66 23       	and	r22, r22
    2680:	71 f0       	breq	.+28     	; 0x269e <__floatsisf+0x74>
    2682:	96 e8       	ldi	r25, 0x86	; 134
    2684:	86 2f       	mov	r24, r22
    2686:	70 e0       	ldi	r23, 0x00	; 0
    2688:	60 e0       	ldi	r22, 0x00	; 0
    268a:	2a f0       	brmi	.+10     	; 0x2696 <__floatsisf+0x6c>
    268c:	9a 95       	dec	r25
    268e:	66 0f       	add	r22, r22
    2690:	77 1f       	adc	r23, r23
    2692:	88 1f       	adc	r24, r24
    2694:	da f7       	brpl	.-10     	; 0x268c <__floatsisf+0x62>
    2696:	88 0f       	add	r24, r24
    2698:	96 95       	lsr	r25
    269a:	87 95       	ror	r24
    269c:	97 f9       	bld	r25, 7
    269e:	08 95       	ret

000026a0 <__fp_inf>:
    26a0:	97 f9       	bld	r25, 7
    26a2:	9f 67       	ori	r25, 0x7F	; 127
    26a4:	80 e8       	ldi	r24, 0x80	; 128
    26a6:	70 e0       	ldi	r23, 0x00	; 0
    26a8:	60 e0       	ldi	r22, 0x00	; 0
    26aa:	08 95       	ret

000026ac <__fp_nan>:
    26ac:	9f ef       	ldi	r25, 0xFF	; 255
    26ae:	80 ec       	ldi	r24, 0xC0	; 192
    26b0:	08 95       	ret

000026b2 <__fp_pscA>:
    26b2:	00 24       	eor	r0, r0
    26b4:	0a 94       	dec	r0
    26b6:	16 16       	cp	r1, r22
    26b8:	17 06       	cpc	r1, r23
    26ba:	18 06       	cpc	r1, r24
    26bc:	09 06       	cpc	r0, r25
    26be:	08 95       	ret

000026c0 <__fp_pscB>:
    26c0:	00 24       	eor	r0, r0
    26c2:	0a 94       	dec	r0
    26c4:	12 16       	cp	r1, r18
    26c6:	13 06       	cpc	r1, r19
    26c8:	14 06       	cpc	r1, r20
    26ca:	05 06       	cpc	r0, r21
    26cc:	08 95       	ret

000026ce <__fp_round>:
    26ce:	09 2e       	mov	r0, r25
    26d0:	03 94       	inc	r0
    26d2:	00 0c       	add	r0, r0
    26d4:	11 f4       	brne	.+4      	; 0x26da <__fp_round+0xc>
    26d6:	88 23       	and	r24, r24
    26d8:	52 f0       	brmi	.+20     	; 0x26ee <__fp_round+0x20>
    26da:	bb 0f       	add	r27, r27
    26dc:	40 f4       	brcc	.+16     	; 0x26ee <__fp_round+0x20>
    26de:	bf 2b       	or	r27, r31
    26e0:	11 f4       	brne	.+4      	; 0x26e6 <__fp_round+0x18>
    26e2:	60 ff       	sbrs	r22, 0
    26e4:	04 c0       	rjmp	.+8      	; 0x26ee <__fp_round+0x20>
    26e6:	6f 5f       	subi	r22, 0xFF	; 255
    26e8:	7f 4f       	sbci	r23, 0xFF	; 255
    26ea:	8f 4f       	sbci	r24, 0xFF	; 255
    26ec:	9f 4f       	sbci	r25, 0xFF	; 255
    26ee:	08 95       	ret

000026f0 <__fp_split3>:
    26f0:	57 fd       	sbrc	r21, 7
    26f2:	90 58       	subi	r25, 0x80	; 128
    26f4:	44 0f       	add	r20, r20
    26f6:	55 1f       	adc	r21, r21
    26f8:	59 f0       	breq	.+22     	; 0x2710 <__fp_splitA+0x10>
    26fa:	5f 3f       	cpi	r21, 0xFF	; 255
    26fc:	71 f0       	breq	.+28     	; 0x271a <__fp_splitA+0x1a>
    26fe:	47 95       	ror	r20

00002700 <__fp_splitA>:
    2700:	88 0f       	add	r24, r24
    2702:	97 fb       	bst	r25, 7
    2704:	99 1f       	adc	r25, r25
    2706:	61 f0       	breq	.+24     	; 0x2720 <__fp_splitA+0x20>
    2708:	9f 3f       	cpi	r25, 0xFF	; 255
    270a:	79 f0       	breq	.+30     	; 0x272a <__fp_splitA+0x2a>
    270c:	87 95       	ror	r24
    270e:	08 95       	ret
    2710:	12 16       	cp	r1, r18
    2712:	13 06       	cpc	r1, r19
    2714:	14 06       	cpc	r1, r20
    2716:	55 1f       	adc	r21, r21
    2718:	f2 cf       	rjmp	.-28     	; 0x26fe <__fp_split3+0xe>
    271a:	46 95       	lsr	r20
    271c:	f1 df       	rcall	.-30     	; 0x2700 <__fp_splitA>
    271e:	08 c0       	rjmp	.+16     	; 0x2730 <__fp_splitA+0x30>
    2720:	16 16       	cp	r1, r22
    2722:	17 06       	cpc	r1, r23
    2724:	18 06       	cpc	r1, r24
    2726:	99 1f       	adc	r25, r25
    2728:	f1 cf       	rjmp	.-30     	; 0x270c <__fp_splitA+0xc>
    272a:	86 95       	lsr	r24
    272c:	71 05       	cpc	r23, r1
    272e:	61 05       	cpc	r22, r1
    2730:	08 94       	sec
    2732:	08 95       	ret

00002734 <__fp_zero>:
    2734:	e8 94       	clt

00002736 <__fp_szero>:
    2736:	bb 27       	eor	r27, r27
    2738:	66 27       	eor	r22, r22
    273a:	77 27       	eor	r23, r23
    273c:	cb 01       	movw	r24, r22
    273e:	97 f9       	bld	r25, 7
    2740:	08 95       	ret

00002742 <__mulsf3>:
    2742:	0b d0       	rcall	.+22     	; 0x275a <__mulsf3x>
    2744:	c4 cf       	rjmp	.-120    	; 0x26ce <__fp_round>
    2746:	b5 df       	rcall	.-150    	; 0x26b2 <__fp_pscA>
    2748:	28 f0       	brcs	.+10     	; 0x2754 <__mulsf3+0x12>
    274a:	ba df       	rcall	.-140    	; 0x26c0 <__fp_pscB>
    274c:	18 f0       	brcs	.+6      	; 0x2754 <__mulsf3+0x12>
    274e:	95 23       	and	r25, r21
    2750:	09 f0       	breq	.+2      	; 0x2754 <__mulsf3+0x12>
    2752:	a6 cf       	rjmp	.-180    	; 0x26a0 <__fp_inf>
    2754:	ab cf       	rjmp	.-170    	; 0x26ac <__fp_nan>
    2756:	11 24       	eor	r1, r1
    2758:	ee cf       	rjmp	.-36     	; 0x2736 <__fp_szero>

0000275a <__mulsf3x>:
    275a:	ca df       	rcall	.-108    	; 0x26f0 <__fp_split3>
    275c:	a0 f3       	brcs	.-24     	; 0x2746 <__mulsf3+0x4>

0000275e <__mulsf3_pse>:
    275e:	95 9f       	mul	r25, r21
    2760:	d1 f3       	breq	.-12     	; 0x2756 <__mulsf3+0x14>
    2762:	95 0f       	add	r25, r21
    2764:	50 e0       	ldi	r21, 0x00	; 0
    2766:	55 1f       	adc	r21, r21
    2768:	62 9f       	mul	r22, r18
    276a:	f0 01       	movw	r30, r0
    276c:	72 9f       	mul	r23, r18
    276e:	bb 27       	eor	r27, r27
    2770:	f0 0d       	add	r31, r0
    2772:	b1 1d       	adc	r27, r1
    2774:	63 9f       	mul	r22, r19
    2776:	aa 27       	eor	r26, r26
    2778:	f0 0d       	add	r31, r0
    277a:	b1 1d       	adc	r27, r1
    277c:	aa 1f       	adc	r26, r26
    277e:	64 9f       	mul	r22, r20
    2780:	66 27       	eor	r22, r22
    2782:	b0 0d       	add	r27, r0
    2784:	a1 1d       	adc	r26, r1
    2786:	66 1f       	adc	r22, r22
    2788:	82 9f       	mul	r24, r18
    278a:	22 27       	eor	r18, r18
    278c:	b0 0d       	add	r27, r0
    278e:	a1 1d       	adc	r26, r1
    2790:	62 1f       	adc	r22, r18
    2792:	73 9f       	mul	r23, r19
    2794:	b0 0d       	add	r27, r0
    2796:	a1 1d       	adc	r26, r1
    2798:	62 1f       	adc	r22, r18
    279a:	83 9f       	mul	r24, r19
    279c:	a0 0d       	add	r26, r0
    279e:	61 1d       	adc	r22, r1
    27a0:	22 1f       	adc	r18, r18
    27a2:	74 9f       	mul	r23, r20
    27a4:	33 27       	eor	r19, r19
    27a6:	a0 0d       	add	r26, r0
    27a8:	61 1d       	adc	r22, r1
    27aa:	23 1f       	adc	r18, r19
    27ac:	84 9f       	mul	r24, r20
    27ae:	60 0d       	add	r22, r0
    27b0:	21 1d       	adc	r18, r1
    27b2:	82 2f       	mov	r24, r18
    27b4:	76 2f       	mov	r23, r22
    27b6:	6a 2f       	mov	r22, r26
    27b8:	11 24       	eor	r1, r1
    27ba:	9f 57       	subi	r25, 0x7F	; 127
    27bc:	50 40       	sbci	r21, 0x00	; 0
    27be:	8a f0       	brmi	.+34     	; 0x27e2 <__mulsf3_pse+0x84>
    27c0:	e1 f0       	breq	.+56     	; 0x27fa <__mulsf3_pse+0x9c>
    27c2:	88 23       	and	r24, r24
    27c4:	4a f0       	brmi	.+18     	; 0x27d8 <__mulsf3_pse+0x7a>
    27c6:	ee 0f       	add	r30, r30
    27c8:	ff 1f       	adc	r31, r31
    27ca:	bb 1f       	adc	r27, r27
    27cc:	66 1f       	adc	r22, r22
    27ce:	77 1f       	adc	r23, r23
    27d0:	88 1f       	adc	r24, r24
    27d2:	91 50       	subi	r25, 0x01	; 1
    27d4:	50 40       	sbci	r21, 0x00	; 0
    27d6:	a9 f7       	brne	.-22     	; 0x27c2 <__mulsf3_pse+0x64>
    27d8:	9e 3f       	cpi	r25, 0xFE	; 254
    27da:	51 05       	cpc	r21, r1
    27dc:	70 f0       	brcs	.+28     	; 0x27fa <__mulsf3_pse+0x9c>
    27de:	60 cf       	rjmp	.-320    	; 0x26a0 <__fp_inf>
    27e0:	aa cf       	rjmp	.-172    	; 0x2736 <__fp_szero>
    27e2:	5f 3f       	cpi	r21, 0xFF	; 255
    27e4:	ec f3       	brlt	.-6      	; 0x27e0 <__mulsf3_pse+0x82>
    27e6:	98 3e       	cpi	r25, 0xE8	; 232
    27e8:	dc f3       	brlt	.-10     	; 0x27e0 <__mulsf3_pse+0x82>
    27ea:	86 95       	lsr	r24
    27ec:	77 95       	ror	r23
    27ee:	67 95       	ror	r22
    27f0:	b7 95       	ror	r27
    27f2:	f7 95       	ror	r31
    27f4:	e7 95       	ror	r30
    27f6:	9f 5f       	subi	r25, 0xFF	; 255
    27f8:	c1 f7       	brne	.-16     	; 0x27ea <__mulsf3_pse+0x8c>
    27fa:	fe 2b       	or	r31, r30
    27fc:	88 0f       	add	r24, r24
    27fe:	91 1d       	adc	r25, r1
    2800:	96 95       	lsr	r25
    2802:	87 95       	ror	r24
    2804:	97 f9       	bld	r25, 7
    2806:	08 95       	ret

00002808 <__udivmodsi4>:
    2808:	a1 e2       	ldi	r26, 0x21	; 33
    280a:	1a 2e       	mov	r1, r26
    280c:	aa 1b       	sub	r26, r26
    280e:	bb 1b       	sub	r27, r27
    2810:	fd 01       	movw	r30, r26
    2812:	0d c0       	rjmp	.+26     	; 0x282e <__udivmodsi4_ep>

00002814 <__udivmodsi4_loop>:
    2814:	aa 1f       	adc	r26, r26
    2816:	bb 1f       	adc	r27, r27
    2818:	ee 1f       	adc	r30, r30
    281a:	ff 1f       	adc	r31, r31
    281c:	a2 17       	cp	r26, r18
    281e:	b3 07       	cpc	r27, r19
    2820:	e4 07       	cpc	r30, r20
    2822:	f5 07       	cpc	r31, r21
    2824:	20 f0       	brcs	.+8      	; 0x282e <__udivmodsi4_ep>
    2826:	a2 1b       	sub	r26, r18
    2828:	b3 0b       	sbc	r27, r19
    282a:	e4 0b       	sbc	r30, r20
    282c:	f5 0b       	sbc	r31, r21

0000282e <__udivmodsi4_ep>:
    282e:	66 1f       	adc	r22, r22
    2830:	77 1f       	adc	r23, r23
    2832:	88 1f       	adc	r24, r24
    2834:	99 1f       	adc	r25, r25
    2836:	1a 94       	dec	r1
    2838:	69 f7       	brne	.-38     	; 0x2814 <__udivmodsi4_loop>
    283a:	60 95       	com	r22
    283c:	70 95       	com	r23
    283e:	80 95       	com	r24
    2840:	90 95       	com	r25
    2842:	9b 01       	movw	r18, r22
    2844:	ac 01       	movw	r20, r24
    2846:	bd 01       	movw	r22, r26
    2848:	cf 01       	movw	r24, r30
    284a:	08 95       	ret

0000284c <__tablejump2__>:
    284c:	ee 0f       	add	r30, r30
    284e:	ff 1f       	adc	r31, r31
    2850:	88 1f       	adc	r24, r24
    2852:	8b bf       	out	0x3b, r24	; 59
    2854:	07 90       	elpm	r0, Z+
    2856:	f6 91       	elpm	r31, Z
    2858:	e0 2d       	mov	r30, r0
    285a:	19 94       	eijmp

0000285c <memcpy_P>:
    285c:	fb 01       	movw	r30, r22
    285e:	dc 01       	movw	r26, r24
    2860:	02 c0       	rjmp	.+4      	; 0x2866 <memcpy_P+0xa>
    2862:	05 90       	lpm	r0, Z+
    2864:	0d 92       	st	X+, r0
    2866:	41 50       	subi	r20, 0x01	; 1
    2868:	50 40       	sbci	r21, 0x00	; 0
    286a:	d8 f7       	brcc	.-10     	; 0x2862 <memcpy_P+0x6>
    286c:	08 95       	ret

0000286e <memcmp>:
    286e:	fb 01       	movw	r30, r22
    2870:	dc 01       	movw	r26, r24
    2872:	04 c0       	rjmp	.+8      	; 0x287c <memcmp+0xe>
    2874:	8d 91       	ld	r24, X+
    2876:	01 90       	ld	r0, Z+
    2878:	80 19       	sub	r24, r0
    287a:	21 f4       	brne	.+8      	; 0x2884 <memcmp+0x16>
    287c:	41 50       	subi	r20, 0x01	; 1
    287e:	50 40       	sbci	r21, 0x00	; 0
    2880:	c8 f7       	brcc	.-14     	; 0x2874 <memcmp+0x6>
    2882:	88 1b       	sub	r24, r24
    2884:	99 0b       	sbc	r25, r25
    2886:	08 95       	ret

00002888 <strncpy>:
    2888:	fb 01       	movw	r30, r22
    288a:	dc 01       	movw	r26, r24
    288c:	41 50       	subi	r20, 0x01	; 1
    288e:	50 40       	sbci	r21, 0x00	; 0
    2890:	48 f0       	brcs	.+18     	; 0x28a4 <strncpy+0x1c>
    2892:	01 90       	ld	r0, Z+
    2894:	0d 92       	st	X+, r0
    2896:	00 20       	and	r0, r0
    2898:	c9 f7       	brne	.-14     	; 0x288c <strncpy+0x4>
    289a:	01 c0       	rjmp	.+2      	; 0x289e <strncpy+0x16>
    289c:	1d 92       	st	X+, r1
    289e:	41 50       	subi	r20, 0x01	; 1
    28a0:	50 40       	sbci	r21, 0x00	; 0
    28a2:	e0 f7       	brcc	.-8      	; 0x289c <strncpy+0x14>
    28a4:	08 95       	ret

000028a6 <_exit>:
    28a6:	f8 94       	cli

000028a8 <__stop_program>:
    28a8:	ff cf       	rjmp	.-2      	; 0x28a8 <__stop_program>
