
RovController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f8  00800200  000032be  00003352  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000032be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000067e  008002f8  008002f8  0000344a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000344a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000347c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000968  00000000  00000000  000034bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00015cfa  00000000  00000000  00003e24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005123  00000000  00000000  00019b1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005a37  00000000  00000000  0001ec41  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001c2c  00000000  00000000  00024678  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00006051  00000000  00000000  000262a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000091f7  00000000  00000000  0002c2f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000890  00000000  00000000  000354ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	50 c1       	rjmp	.+672    	; 0x2a2 <__ctors_end>
       2:	00 00       	nop
       4:	7f c1       	rjmp	.+766    	; 0x304 <__bad_interrupt>
       6:	00 00       	nop
       8:	7d c1       	rjmp	.+762    	; 0x304 <__bad_interrupt>
       a:	00 00       	nop
       c:	7b c1       	rjmp	.+758    	; 0x304 <__bad_interrupt>
       e:	00 00       	nop
      10:	79 c1       	rjmp	.+754    	; 0x304 <__bad_interrupt>
      12:	00 00       	nop
      14:	77 c1       	rjmp	.+750    	; 0x304 <__bad_interrupt>
      16:	00 00       	nop
      18:	75 c1       	rjmp	.+746    	; 0x304 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	73 c1       	rjmp	.+742    	; 0x304 <__bad_interrupt>
      1e:	00 00       	nop
      20:	71 c1       	rjmp	.+738    	; 0x304 <__bad_interrupt>
      22:	00 00       	nop
      24:	6f c1       	rjmp	.+734    	; 0x304 <__bad_interrupt>
      26:	00 00       	nop
      28:	6d c1       	rjmp	.+730    	; 0x304 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	6b c1       	rjmp	.+726    	; 0x304 <__bad_interrupt>
      2e:	00 00       	nop
      30:	69 c1       	rjmp	.+722    	; 0x304 <__bad_interrupt>
      32:	00 00       	nop
      34:	67 c1       	rjmp	.+718    	; 0x304 <__bad_interrupt>
      36:	00 00       	nop
      38:	65 c1       	rjmp	.+714    	; 0x304 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	63 c1       	rjmp	.+710    	; 0x304 <__bad_interrupt>
      3e:	00 00       	nop
      40:	61 c1       	rjmp	.+706    	; 0x304 <__bad_interrupt>
      42:	00 00       	nop
      44:	5f c1       	rjmp	.+702    	; 0x304 <__bad_interrupt>
      46:	00 00       	nop
      48:	5d c1       	rjmp	.+698    	; 0x304 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	5b c1       	rjmp	.+694    	; 0x304 <__bad_interrupt>
      4e:	00 00       	nop
      50:	59 c1       	rjmp	.+690    	; 0x304 <__bad_interrupt>
      52:	00 00       	nop
      54:	57 c1       	rjmp	.+686    	; 0x304 <__bad_interrupt>
      56:	00 00       	nop
      58:	55 c1       	rjmp	.+682    	; 0x304 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	53 c1       	rjmp	.+678    	; 0x304 <__bad_interrupt>
      5e:	00 00       	nop
      60:	51 c1       	rjmp	.+674    	; 0x304 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 9b 0e 	jmp	0x1d36	; 0x1d36 <__vector_25>
      68:	0c 94 d7 0e 	jmp	0x1dae	; 0x1dae <__vector_26>
      6c:	4b c1       	rjmp	.+662    	; 0x304 <__bad_interrupt>
      6e:	00 00       	nop
      70:	49 c1       	rjmp	.+658    	; 0x304 <__bad_interrupt>
      72:	00 00       	nop
      74:	47 c1       	rjmp	.+654    	; 0x304 <__bad_interrupt>
      76:	00 00       	nop
      78:	45 c1       	rjmp	.+650    	; 0x304 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	43 c1       	rjmp	.+646    	; 0x304 <__bad_interrupt>
      7e:	00 00       	nop
      80:	41 c1       	rjmp	.+642    	; 0x304 <__bad_interrupt>
      82:	00 00       	nop
      84:	3f c1       	rjmp	.+638    	; 0x304 <__bad_interrupt>
      86:	00 00       	nop
      88:	3d c1       	rjmp	.+634    	; 0x304 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	3b c1       	rjmp	.+630    	; 0x304 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 23 0f 	jmp	0x1e46	; 0x1e46 <__vector_36>
      94:	0c 94 5f 0f 	jmp	0x1ebe	; 0x1ebe <__vector_37>
      98:	35 c1       	rjmp	.+618    	; 0x304 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 36 13 	jmp	0x266c	; 0x266c <__vector_39>
      a0:	31 c1       	rjmp	.+610    	; 0x304 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	2f c1       	rjmp	.+606    	; 0x304 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	2d c1       	rjmp	.+602    	; 0x304 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	2b c1       	rjmp	.+598    	; 0x304 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	29 c1       	rjmp	.+594    	; 0x304 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	27 c1       	rjmp	.+590    	; 0x304 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	25 c1       	rjmp	.+586    	; 0x304 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	23 c1       	rjmp	.+582    	; 0x304 <__bad_interrupt>
      be:	00 00       	nop
      c0:	21 c1       	rjmp	.+578    	; 0x304 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	1f c1       	rjmp	.+574    	; 0x304 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	1d c1       	rjmp	.+570    	; 0x304 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 ab 0f 	jmp	0x1f56	; 0x1f56 <__vector_51>
      d0:	0c 94 e7 0f 	jmp	0x1fce	; 0x1fce <__vector_52>
      d4:	17 c1       	rjmp	.+558    	; 0x304 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 33 10 	jmp	0x2066	; 0x2066 <__vector_54>
      dc:	0c 94 6f 10 	jmp	0x20de	; 0x20de <__vector_55>
      e0:	11 c1       	rjmp	.+546    	; 0x304 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	3c 14       	cp	r3, r12
      e6:	3f 14       	cp	r3, r15
      e8:	3f 14       	cp	r3, r15
      ea:	3f 14       	cp	r3, r15
      ec:	3f 14       	cp	r3, r15
      ee:	3f 14       	cp	r3, r15
      f0:	3f 14       	cp	r3, r15
      f2:	3f 14       	cp	r3, r15
      f4:	57 13       	cpse	r21, r23
      f6:	3f 14       	cp	r3, r15
      f8:	3f 14       	cp	r3, r15
      fa:	3f 14       	cp	r3, r15
      fc:	3f 14       	cp	r3, r15
      fe:	3f 14       	cp	r3, r15
     100:	3f 14       	cp	r3, r15
     102:	3f 14       	cp	r3, r15
     104:	57 13       	cpse	r21, r23
     106:	3f 14       	cp	r3, r15
     108:	3f 14       	cp	r3, r15
     10a:	3f 14       	cp	r3, r15
     10c:	3f 14       	cp	r3, r15
     10e:	3f 14       	cp	r3, r15
     110:	3f 14       	cp	r3, r15
     112:	3f 14       	cp	r3, r15
     114:	5f 13       	cpse	r21, r31
     116:	3f 14       	cp	r3, r15
     118:	3f 14       	cp	r3, r15
     11a:	3f 14       	cp	r3, r15
     11c:	3f 14       	cp	r3, r15
     11e:	3f 14       	cp	r3, r15
     120:	3f 14       	cp	r3, r15
     122:	3f 14       	cp	r3, r15
     124:	84 13       	cpse	r24, r20
     126:	3f 14       	cp	r3, r15
     128:	3f 14       	cp	r3, r15
     12a:	3f 14       	cp	r3, r15
     12c:	3f 14       	cp	r3, r15
     12e:	3f 14       	cp	r3, r15
     130:	3f 14       	cp	r3, r15
     132:	3f 14       	cp	r3, r15
     134:	5f 13       	cpse	r21, r31
     136:	3f 14       	cp	r3, r15
     138:	3f 14       	cp	r3, r15
     13a:	3f 14       	cp	r3, r15
     13c:	3f 14       	cp	r3, r15
     13e:	3f 14       	cp	r3, r15
     140:	3f 14       	cp	r3, r15
     142:	3f 14       	cp	r3, r15
     144:	89 13       	cpse	r24, r25
     146:	3f 14       	cp	r3, r15
     148:	3f 14       	cp	r3, r15
     14a:	3f 14       	cp	r3, r15
     14c:	3f 14       	cp	r3, r15
     14e:	3f 14       	cp	r3, r15
     150:	3f 14       	cp	r3, r15
     152:	3f 14       	cp	r3, r15
     154:	8e 13       	cpse	r24, r30
     156:	3f 14       	cp	r3, r15
     158:	3f 14       	cp	r3, r15
     15a:	3f 14       	cp	r3, r15
     15c:	3f 14       	cp	r3, r15
     15e:	3f 14       	cp	r3, r15
     160:	3f 14       	cp	r3, r15
     162:	3f 14       	cp	r3, r15
     164:	9f 13       	cpse	r25, r31
     166:	3f 14       	cp	r3, r15
     168:	3f 14       	cp	r3, r15
     16a:	3f 14       	cp	r3, r15
     16c:	3f 14       	cp	r3, r15
     16e:	3f 14       	cp	r3, r15
     170:	3f 14       	cp	r3, r15
     172:	3f 14       	cp	r3, r15
     174:	c8 13       	cpse	r28, r24
     176:	3f 14       	cp	r3, r15
     178:	3f 14       	cp	r3, r15
     17a:	3f 14       	cp	r3, r15
     17c:	3f 14       	cp	r3, r15
     17e:	3f 14       	cp	r3, r15
     180:	3f 14       	cp	r3, r15
     182:	3f 14       	cp	r3, r15
     184:	93 13       	cpse	r25, r19
     186:	3f 14       	cp	r3, r15
     188:	3f 14       	cp	r3, r15
     18a:	3f 14       	cp	r3, r15
     18c:	3f 14       	cp	r3, r15
     18e:	3f 14       	cp	r3, r15
     190:	3f 14       	cp	r3, r15
     192:	3f 14       	cp	r3, r15
     194:	ad 13       	cpse	r26, r29
     196:	3f 14       	cp	r3, r15
     198:	3f 14       	cp	r3, r15
     19a:	3f 14       	cp	r3, r15
     19c:	3f 14       	cp	r3, r15
     19e:	3f 14       	cp	r3, r15
     1a0:	3f 14       	cp	r3, r15
     1a2:	3f 14       	cp	r3, r15
     1a4:	ca 13       	cpse	r28, r26
     1a6:	3f 14       	cp	r3, r15
     1a8:	3f 14       	cp	r3, r15
     1aa:	3f 14       	cp	r3, r15
     1ac:	3f 14       	cp	r3, r15
     1ae:	3f 14       	cp	r3, r15
     1b0:	3f 14       	cp	r3, r15
     1b2:	3f 14       	cp	r3, r15
     1b4:	ca 13       	cpse	r28, r26
     1b6:	3f 14       	cp	r3, r15
     1b8:	3f 14       	cp	r3, r15
     1ba:	3f 14       	cp	r3, r15
     1bc:	3f 14       	cp	r3, r15
     1be:	3f 14       	cp	r3, r15
     1c0:	3f 14       	cp	r3, r15
     1c2:	3f 14       	cp	r3, r15
     1c4:	ca 13       	cpse	r28, r26
     1c6:	3f 14       	cp	r3, r15
     1c8:	3f 14       	cp	r3, r15
     1ca:	3f 14       	cp	r3, r15
     1cc:	3f 14       	cp	r3, r15
     1ce:	3f 14       	cp	r3, r15
     1d0:	3f 14       	cp	r3, r15
     1d2:	3f 14       	cp	r3, r15
     1d4:	ca 13       	cpse	r28, r26
     1d6:	3f 14       	cp	r3, r15
     1d8:	3f 14       	cp	r3, r15
     1da:	3f 14       	cp	r3, r15
     1dc:	3f 14       	cp	r3, r15
     1de:	3f 14       	cp	r3, r15
     1e0:	3f 14       	cp	r3, r15
     1e2:	3f 14       	cp	r3, r15
     1e4:	d3 13       	cpse	r29, r19
     1e6:	3f 14       	cp	r3, r15
     1e8:	3f 14       	cp	r3, r15
     1ea:	3f 14       	cp	r3, r15
     1ec:	3f 14       	cp	r3, r15
     1ee:	3f 14       	cp	r3, r15
     1f0:	3f 14       	cp	r3, r15
     1f2:	3f 14       	cp	r3, r15
     1f4:	03 14       	cp	r0, r3
     1f6:	3f 14       	cp	r3, r15
     1f8:	3f 14       	cp	r3, r15
     1fa:	3f 14       	cp	r3, r15
     1fc:	3f 14       	cp	r3, r15
     1fe:	3f 14       	cp	r3, r15
     200:	3f 14       	cp	r3, r15
     202:	3f 14       	cp	r3, r15
     204:	d3 13       	cpse	r29, r19
     206:	3f 14       	cp	r3, r15
     208:	3f 14       	cp	r3, r15
     20a:	3f 14       	cp	r3, r15
     20c:	3f 14       	cp	r3, r15
     20e:	3f 14       	cp	r3, r15
     210:	3f 14       	cp	r3, r15
     212:	3f 14       	cp	r3, r15
     214:	03 14       	cp	r0, r3
     216:	3f 14       	cp	r3, r15
     218:	3f 14       	cp	r3, r15
     21a:	3f 14       	cp	r3, r15
     21c:	3f 14       	cp	r3, r15
     21e:	3f 14       	cp	r3, r15
     220:	3f 14       	cp	r3, r15
     222:	3f 14       	cp	r3, r15
     224:	eb 13       	cpse	r30, r27
     226:	3f 14       	cp	r3, r15
     228:	3f 14       	cp	r3, r15
     22a:	3f 14       	cp	r3, r15
     22c:	3f 14       	cp	r3, r15
     22e:	3f 14       	cp	r3, r15
     230:	3f 14       	cp	r3, r15
     232:	3f 14       	cp	r3, r15
     234:	07 14       	cp	r0, r7
     236:	3f 14       	cp	r3, r15
     238:	3f 14       	cp	r3, r15
     23a:	3f 14       	cp	r3, r15
     23c:	3f 14       	cp	r3, r15
     23e:	3f 14       	cp	r3, r15
     240:	3f 14       	cp	r3, r15
     242:	3f 14       	cp	r3, r15
     244:	07 14       	cp	r0, r7
     246:	3f 14       	cp	r3, r15
     248:	3f 14       	cp	r3, r15
     24a:	3f 14       	cp	r3, r15
     24c:	3f 14       	cp	r3, r15
     24e:	3f 14       	cp	r3, r15
     250:	3f 14       	cp	r3, r15
     252:	3f 14       	cp	r3, r15
     254:	1c 14       	cp	r1, r12
     256:	3f 14       	cp	r3, r15
     258:	3f 14       	cp	r3, r15
     25a:	3f 14       	cp	r3, r15
     25c:	3f 14       	cp	r3, r15
     25e:	3f 14       	cp	r3, r15
     260:	3f 14       	cp	r3, r15
     262:	3f 14       	cp	r3, r15
     264:	36 14       	cp	r3, r6
     266:	3f 14       	cp	r3, r15
     268:	3f 14       	cp	r3, r15
     26a:	3f 14       	cp	r3, r15
     26c:	3f 14       	cp	r3, r15
     26e:	3f 14       	cp	r3, r15
     270:	3f 14       	cp	r3, r15
     272:	3f 14       	cp	r3, r15
     274:	36 14       	cp	r3, r6

00000276 <__trampolines_end>:
     276:	45 00       	.word	0x0045	; ????
     278:	00 82       	st	Z, r0
     27a:	00 00       	nop
     27c:	40 00       	.word	0x0040	; ????
     27e:	20 00       	Address 0x0000027e is out of bounds.
.word	0xffff	; ????

0000027f <_ZL9arpreqhdr>:
     27f:	00 01 08 00 06 04 00 01 00                          .........

00000288 <__ctors_start>:
     288:	34 05       	cpc	r19, r4
     28a:	00 0f       	add	r16, r16
     28c:	88 0f       	add	r24, r24
     28e:	10 10       	cpse	r1, r0
     290:	98 10       	cpse	r9, r8
     292:	99 11       	cpse	r25, r9
     294:	bb 11       	cpse	r27, r11
     296:	dd 11       	cpse	r29, r13
     298:	ff 11       	cpse	r31, r15
     29a:	a6 15       	cp	r26, r6
     29c:	1c 16       	cp	r1, r28
     29e:	2d 17       	cp	r18, r29
     2a0:	35 17       	cp	r19, r21

000002a2 <__ctors_end>:
     2a2:	11 24       	eor	r1, r1
     2a4:	1f be       	out	0x3f, r1	; 63
     2a6:	cf ef       	ldi	r28, 0xFF	; 255
     2a8:	d1 e2       	ldi	r29, 0x21	; 33
     2aa:	de bf       	out	0x3e, r29	; 62
     2ac:	cd bf       	out	0x3d, r28	; 61
     2ae:	00 e0       	ldi	r16, 0x00	; 0
     2b0:	0c bf       	out	0x3c, r16	; 60

000002b2 <__do_copy_data>:
     2b2:	12 e0       	ldi	r17, 0x02	; 2
     2b4:	a0 e0       	ldi	r26, 0x00	; 0
     2b6:	b2 e0       	ldi	r27, 0x02	; 2
     2b8:	ee eb       	ldi	r30, 0xBE	; 190
     2ba:	f2 e3       	ldi	r31, 0x32	; 50
     2bc:	00 e0       	ldi	r16, 0x00	; 0
     2be:	0b bf       	out	0x3b, r16	; 59
     2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <__do_copy_data+0x14>
     2c2:	07 90       	elpm	r0, Z+
     2c4:	0d 92       	st	X+, r0
     2c6:	a8 3f       	cpi	r26, 0xF8	; 248
     2c8:	b1 07       	cpc	r27, r17
     2ca:	d9 f7       	brne	.-10     	; 0x2c2 <__do_copy_data+0x10>

000002cc <__do_clear_bss>:
     2cc:	29 e0       	ldi	r18, 0x09	; 9
     2ce:	a8 ef       	ldi	r26, 0xF8	; 248
     2d0:	b2 e0       	ldi	r27, 0x02	; 2
     2d2:	01 c0       	rjmp	.+2      	; 0x2d6 <.do_clear_bss_start>

000002d4 <.do_clear_bss_loop>:
     2d4:	1d 92       	st	X+, r1

000002d6 <.do_clear_bss_start>:
     2d6:	a6 37       	cpi	r26, 0x76	; 118
     2d8:	b2 07       	cpc	r27, r18
     2da:	e1 f7       	brne	.-8      	; 0x2d4 <.do_clear_bss_loop>

000002dc <__do_global_ctors>:
     2dc:	11 e0       	ldi	r17, 0x01	; 1
     2de:	c1 e5       	ldi	r28, 0x51	; 81
     2e0:	d1 e0       	ldi	r29, 0x01	; 1
     2e2:	00 e0       	ldi	r16, 0x00	; 0
     2e4:	06 c0       	rjmp	.+12     	; 0x2f2 <__do_global_ctors+0x16>
     2e6:	21 97       	sbiw	r28, 0x01	; 1
     2e8:	01 09       	sbc	r16, r1
     2ea:	80 2f       	mov	r24, r16
     2ec:	fe 01       	movw	r30, r28
     2ee:	0e 94 21 19 	call	0x3242	; 0x3242 <__tablejump2__>
     2f2:	c4 34       	cpi	r28, 0x44	; 68
     2f4:	d1 07       	cpc	r29, r17
     2f6:	80 e0       	ldi	r24, 0x00	; 0
     2f8:	08 07       	cpc	r16, r24
     2fa:	a9 f7       	brne	.-22     	; 0x2e6 <__do_global_ctors+0xa>
     2fc:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <main>
     300:	0c 94 5d 19 	jmp	0x32ba	; 0x32ba <_exit>

00000304 <__bad_interrupt>:
     304:	7d ce       	rjmp	.-774    	; 0x0 <__vectors>

00000306 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:

    setMode(lastMode);
    return true;
  }
  return false;
}
     306:	08 95       	ret

00000308 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>:
     308:	0f 93       	push	r16
     30a:	1f 93       	push	r17
     30c:	cf 93       	push	r28
     30e:	df 93       	push	r29
     310:	8c 01       	movw	r16, r24
     312:	eb 01       	movw	r28, r22
     314:	88 e2       	ldi	r24, 0x28	; 40
     316:	fb 01       	movw	r30, r22
     318:	11 92       	st	Z+, r1
     31a:	8a 95       	dec	r24
     31c:	e9 f7       	brne	.-6      	; 0x318 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x10>
     31e:	4b e0       	ldi	r20, 0x0B	; 11
     320:	50 e0       	ldi	r21, 0x00	; 0
     322:	66 e1       	ldi	r22, 0x16	; 22
     324:	72 e0       	ldi	r23, 0x02	; 2
     326:	ce 01       	movw	r24, r28
     328:	0e 94 4e 19 	call	0x329c	; 0x329c <strncpy>
     32c:	1b 86       	std	Y+11, r1	; 0x0b
     32e:	81 e0       	ldi	r24, 0x01	; 1
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	a0 e0       	ldi	r26, 0x00	; 0
     334:	b0 e0       	ldi	r27, 0x00	; 0
     336:	8c 87       	std	Y+12, r24	; 0x0c
     338:	9d 87       	std	Y+13, r25	; 0x0d
     33a:	ae 87       	std	Y+14, r26	; 0x0e
     33c:	bf 87       	std	Y+15, r27	; 0x0f
     33e:	f8 01       	movw	r30, r16
     340:	86 81       	ldd	r24, Z+6	; 0x06
     342:	97 81       	ldd	r25, Z+7	; 0x07
     344:	a0 85       	ldd	r26, Z+8	; 0x08
     346:	b1 85       	ldd	r27, Z+9	; 0x09
     348:	88 8b       	std	Y+16, r24	; 0x10
     34a:	99 8b       	std	Y+17, r25	; 0x11
     34c:	aa 8b       	std	Y+18, r26	; 0x12
     34e:	bb 8b       	std	Y+19, r27	; 0x13
     350:	83 e0       	ldi	r24, 0x03	; 3
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	a0 e0       	ldi	r26, 0x00	; 0
     356:	b0 e0       	ldi	r27, 0x00	; 0
     358:	8c 8b       	std	Y+20, r24	; 0x14
     35a:	9d 8b       	std	Y+21, r25	; 0x15
     35c:	ae 8b       	std	Y+22, r26	; 0x16
     35e:	bf 8b       	std	Y+23, r27	; 0x17
     360:	1c a2       	std	Y+36, r1	; 0x24
     362:	1d a2       	std	Y+37, r1	; 0x25
     364:	1e a2       	std	Y+38, r1	; 0x26
     366:	1f a2       	std	Y+39, r1	; 0x27
     368:	18 8e       	std	Y+24, r1	; 0x18
     36a:	19 8e       	std	Y+25, r1	; 0x19
     36c:	1a 8e       	std	Y+26, r1	; 0x1a
     36e:	1b 8e       	std	Y+27, r1	; 0x1b
     370:	1c 8e       	std	Y+28, r1	; 0x1c
     372:	1d 8e       	std	Y+29, r1	; 0x1d
     374:	1e 8e       	std	Y+30, r1	; 0x1e
     376:	1f 8e       	std	Y+31, r1	; 0x1f
     378:	8a e0       	ldi	r24, 0x0A	; 10
     37a:	97 ed       	ldi	r25, 0xD7	; 215
     37c:	a3 e2       	ldi	r26, 0x23	; 35
     37e:	bc e3       	ldi	r27, 0x3C	; 60
     380:	88 a3       	std	Y+32, r24	; 0x20
     382:	99 a3       	std	Y+33, r25	; 0x21
     384:	aa a3       	std	Y+34, r26	; 0x22
     386:	bb a3       	std	Y+35, r27	; 0x23
     388:	df 91       	pop	r29
     38a:	cf 91       	pop	r28
     38c:	1f 91       	pop	r17
     38e:	0f 91       	pop	r16
     390:	08 95       	ret

00000392 <_ZN15Adafruit_BNO055C1ElhP7TwoWire>:
     392:	0f 93       	push	r16
     394:	1f 93       	push	r17
     396:	fc 01       	movw	r30, r24
     398:	81 e2       	ldi	r24, 0x21	; 33
     39a:	92 e0       	ldi	r25, 0x02	; 2
     39c:	91 83       	std	Z+1, r25	; 0x01
     39e:	80 83       	st	Z, r24
     3a0:	46 83       	std	Z+6, r20	; 0x06
     3a2:	57 83       	std	Z+7, r21	; 0x07
     3a4:	60 87       	std	Z+8, r22	; 0x08
     3a6:	71 87       	std	Z+9, r23	; 0x09
     3a8:	23 83       	std	Z+3, r18	; 0x03
     3aa:	15 83       	std	Z+5, r17	; 0x05
     3ac:	04 83       	std	Z+4, r16	; 0x04
     3ae:	1f 91       	pop	r17
     3b0:	0f 91       	pop	r16
     3b2:	08 95       	ret

000003b4 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>:
     3b4:	0f 93       	push	r16
     3b6:	1f 93       	push	r17
     3b8:	cf 93       	push	r28
     3ba:	df 93       	push	r29
     3bc:	ec 01       	movw	r28, r24
     3be:	06 2f       	mov	r16, r22
     3c0:	14 2f       	mov	r17, r20
     3c2:	6b 81       	ldd	r22, Y+3	; 0x03
     3c4:	8c 81       	ldd	r24, Y+4	; 0x04
     3c6:	9d 81       	ldd	r25, Y+5	; 0x05
     3c8:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <_ZN7TwoWire17beginTransmissionEh>
     3cc:	8c 81       	ldd	r24, Y+4	; 0x04
     3ce:	9d 81       	ldd	r25, Y+5	; 0x05
     3d0:	dc 01       	movw	r26, r24
     3d2:	ed 91       	ld	r30, X+
     3d4:	fc 91       	ld	r31, X
     3d6:	01 90       	ld	r0, Z+
     3d8:	f0 81       	ld	r31, Z
     3da:	e0 2d       	mov	r30, r0
     3dc:	60 2f       	mov	r22, r16
     3de:	19 95       	eicall
     3e0:	8c 81       	ldd	r24, Y+4	; 0x04
     3e2:	9d 81       	ldd	r25, Y+5	; 0x05
     3e4:	dc 01       	movw	r26, r24
     3e6:	ed 91       	ld	r30, X+
     3e8:	fc 91       	ld	r31, X
     3ea:	01 90       	ld	r0, Z+
     3ec:	f0 81       	ld	r31, Z
     3ee:	e0 2d       	mov	r30, r0
     3f0:	61 2f       	mov	r22, r17
     3f2:	19 95       	eicall
     3f4:	8c 81       	ldd	r24, Y+4	; 0x04
     3f6:	9d 81       	ldd	r25, Y+5	; 0x05
     3f8:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <_ZN7TwoWire15endTransmissionEv>
     3fc:	81 e0       	ldi	r24, 0x01	; 1
     3fe:	df 91       	pop	r29
     400:	cf 91       	pop	r28
     402:	1f 91       	pop	r17
     404:	0f 91       	pop	r16
     406:	08 95       	ret

00000408 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>:
     408:	46 2f       	mov	r20, r22
     40a:	fc 01       	movw	r30, r24
     40c:	62 87       	std	Z+10, r22	; 0x0a
     40e:	6d e3       	ldi	r22, 0x3D	; 61
     410:	d1 df       	rcall	.-94     	; 0x3b4 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     412:	ff ef       	ldi	r31, 0xFF	; 255
     414:	26 e7       	ldi	r18, 0x76	; 118
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	f1 50       	subi	r31, 0x01	; 1
     41a:	20 40       	sbci	r18, 0x00	; 0
     41c:	80 40       	sbci	r24, 0x00	; 0
     41e:	e1 f7       	brne	.-8      	; 0x418 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE+0x10>
     420:	00 c0       	rjmp	.+0      	; 0x422 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE+0x1a>
     422:	00 00       	nop
     424:	08 95       	ret

00000426 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>:
     426:	1f 93       	push	r17
     428:	cf 93       	push	r28
     42a:	df 93       	push	r29
     42c:	ec 01       	movw	r28, r24
     42e:	16 2f       	mov	r17, r22
     430:	6b 81       	ldd	r22, Y+3	; 0x03
     432:	8c 81       	ldd	r24, Y+4	; 0x04
     434:	9d 81       	ldd	r25, Y+5	; 0x05
     436:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <_ZN7TwoWire17beginTransmissionEh>
     43a:	8c 81       	ldd	r24, Y+4	; 0x04
     43c:	9d 81       	ldd	r25, Y+5	; 0x05
     43e:	dc 01       	movw	r26, r24
     440:	ed 91       	ld	r30, X+
     442:	fc 91       	ld	r31, X
     444:	01 90       	ld	r0, Z+
     446:	f0 81       	ld	r31, Z
     448:	e0 2d       	mov	r30, r0
     44a:	61 2f       	mov	r22, r17
     44c:	19 95       	eicall
     44e:	8c 81       	ldd	r24, Y+4	; 0x04
     450:	9d 81       	ldd	r25, Y+5	; 0x05
     452:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <_ZN7TwoWire15endTransmissionEv>
     456:	41 e0       	ldi	r20, 0x01	; 1
     458:	6b 81       	ldd	r22, Y+3	; 0x03
     45a:	8c 81       	ldd	r24, Y+4	; 0x04
     45c:	9d 81       	ldd	r25, Y+5	; 0x05
     45e:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <_ZN7TwoWire11requestFromEhh>
     462:	8c 81       	ldd	r24, Y+4	; 0x04
     464:	9d 81       	ldd	r25, Y+5	; 0x05
     466:	dc 01       	movw	r26, r24
     468:	ed 91       	ld	r30, X+
     46a:	fc 91       	ld	r31, X
     46c:	02 84       	ldd	r0, Z+10	; 0x0a
     46e:	f3 85       	ldd	r31, Z+11	; 0x0b
     470:	e0 2d       	mov	r30, r0
     472:	19 95       	eicall
     474:	df 91       	pop	r29
     476:	cf 91       	pop	r28
     478:	1f 91       	pop	r17
     47a:	08 95       	ret

0000047c <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>:
     47c:	1f 93       	push	r17
     47e:	cf 93       	push	r28
     480:	df 93       	push	r29
     482:	ec 01       	movw	r28, r24
     484:	16 2f       	mov	r17, r22
     486:	8c 81       	ldd	r24, Y+4	; 0x04
     488:	9d 81       	ldd	r25, Y+5	; 0x05
     48a:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <_ZN7TwoWire5beginEv>
     48e:	60 e0       	ldi	r22, 0x00	; 0
     490:	ce 01       	movw	r24, r28
     492:	c9 df       	rcall	.-110    	; 0x426 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
     494:	80 3a       	cpi	r24, 0xA0	; 160
     496:	79 f0       	breq	.+30     	; 0x4b6 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x3a>
     498:	2f ef       	ldi	r18, 0xFF	; 255
     49a:	83 ed       	ldi	r24, 0xD3	; 211
     49c:	90 e3       	ldi	r25, 0x30	; 48
     49e:	21 50       	subi	r18, 0x01	; 1
     4a0:	80 40       	sbci	r24, 0x00	; 0
     4a2:	90 40       	sbci	r25, 0x00	; 0
     4a4:	e1 f7       	brne	.-8      	; 0x49e <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x22>
     4a6:	00 c0       	rjmp	.+0      	; 0x4a8 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x2c>
     4a8:	00 00       	nop
     4aa:	60 e0       	ldi	r22, 0x00	; 0
     4ac:	ce 01       	movw	r24, r28
     4ae:	bb df       	rcall	.-138    	; 0x426 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
     4b0:	80 3a       	cpi	r24, 0xA0	; 160
     4b2:	09 f0       	breq	.+2      	; 0x4b6 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x3a>
     4b4:	4b c0       	rjmp	.+150    	; 0x54c <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xd0>
     4b6:	60 e0       	ldi	r22, 0x00	; 0
     4b8:	ce 01       	movw	r24, r28
     4ba:	a6 df       	rcall	.-180    	; 0x408 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
     4bc:	40 e2       	ldi	r20, 0x20	; 32
     4be:	6f e3       	ldi	r22, 0x3F	; 63
     4c0:	ce 01       	movw	r24, r28
     4c2:	78 df       	rcall	.-272    	; 0x3b4 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     4c4:	2f ef       	ldi	r18, 0xFF	; 255
     4c6:	86 e7       	ldi	r24, 0x76	; 118
     4c8:	91 e0       	ldi	r25, 0x01	; 1
     4ca:	21 50       	subi	r18, 0x01	; 1
     4cc:	80 40       	sbci	r24, 0x00	; 0
     4ce:	90 40       	sbci	r25, 0x00	; 0
     4d0:	e1 f7       	brne	.-8      	; 0x4ca <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x4e>
     4d2:	00 c0       	rjmp	.+0      	; 0x4d4 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x58>
     4d4:	00 00       	nop
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	ce 01       	movw	r24, r28
     4da:	a5 df       	rcall	.-182    	; 0x426 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
     4dc:	80 3a       	cpi	r24, 0xA0	; 160
     4de:	39 f0       	breq	.+14     	; 0x4ee <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x72>
     4e0:	8f e3       	ldi	r24, 0x3F	; 63
     4e2:	9c e9       	ldi	r25, 0x9C	; 156
     4e4:	01 97       	sbiw	r24, 0x01	; 1
     4e6:	f1 f7       	brne	.-4      	; 0x4e4 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x68>
     4e8:	00 c0       	rjmp	.+0      	; 0x4ea <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x6e>
     4ea:	00 00       	nop
     4ec:	f4 cf       	rjmp	.-24     	; 0x4d6 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x5a>
     4ee:	9f ef       	ldi	r25, 0xFF	; 255
     4f0:	20 e7       	ldi	r18, 0x70	; 112
     4f2:	82 e0       	ldi	r24, 0x02	; 2
     4f4:	91 50       	subi	r25, 0x01	; 1
     4f6:	20 40       	sbci	r18, 0x00	; 0
     4f8:	80 40       	sbci	r24, 0x00	; 0
     4fa:	e1 f7       	brne	.-8      	; 0x4f4 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x78>
     4fc:	00 c0       	rjmp	.+0      	; 0x4fe <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x82>
     4fe:	00 00       	nop
     500:	40 e0       	ldi	r20, 0x00	; 0
     502:	6e e3       	ldi	r22, 0x3E	; 62
     504:	ce 01       	movw	r24, r28
     506:	56 df       	rcall	.-340    	; 0x3b4 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     508:	8f e3       	ldi	r24, 0x3F	; 63
     50a:	9c e9       	ldi	r25, 0x9C	; 156
     50c:	01 97       	sbiw	r24, 0x01	; 1
     50e:	f1 f7       	brne	.-4      	; 0x50c <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x90>
     510:	00 c0       	rjmp	.+0      	; 0x512 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x96>
     512:	00 00       	nop
     514:	40 e0       	ldi	r20, 0x00	; 0
     516:	67 e0       	ldi	r22, 0x07	; 7
     518:	ce 01       	movw	r24, r28
     51a:	4c df       	rcall	.-360    	; 0x3b4 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     51c:	40 e0       	ldi	r20, 0x00	; 0
     51e:	6f e3       	ldi	r22, 0x3F	; 63
     520:	ce 01       	movw	r24, r28
     522:	48 df       	rcall	.-368    	; 0x3b4 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     524:	8f e3       	ldi	r24, 0x3F	; 63
     526:	9c e9       	ldi	r25, 0x9C	; 156
     528:	01 97       	sbiw	r24, 0x01	; 1
     52a:	f1 f7       	brne	.-4      	; 0x528 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xac>
     52c:	00 c0       	rjmp	.+0      	; 0x52e <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xb2>
     52e:	00 00       	nop
     530:	61 2f       	mov	r22, r17
     532:	ce 01       	movw	r24, r28
     534:	69 df       	rcall	.-302    	; 0x408 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
     536:	9f ef       	ldi	r25, 0xFF	; 255
     538:	29 ef       	ldi	r18, 0xF9	; 249
     53a:	80 e0       	ldi	r24, 0x00	; 0
     53c:	91 50       	subi	r25, 0x01	; 1
     53e:	20 40       	sbci	r18, 0x00	; 0
     540:	80 40       	sbci	r24, 0x00	; 0
     542:	e1 f7       	brne	.-8      	; 0x53c <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xc0>
     544:	00 c0       	rjmp	.+0      	; 0x546 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xca>
     546:	00 00       	nop
     548:	81 e0       	ldi	r24, 0x01	; 1
     54a:	01 c0       	rjmp	.+2      	; 0x54e <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xd2>
     54c:	80 e0       	ldi	r24, 0x00	; 0
     54e:	df 91       	pop	r29
     550:	cf 91       	pop	r28
     552:	1f 91       	pop	r17
     554:	08 95       	ret

00000556 <_ZN15Adafruit_BNO0557getTempEv>:
     556:	64 e3       	ldi	r22, 0x34	; 52
     558:	66 cf       	rjmp	.-308    	; 0x426 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
     55a:	08 95       	ret

0000055c <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>:
     55c:	cf 92       	push	r12
     55e:	df 92       	push	r13
     560:	ef 92       	push	r14
     562:	ff 92       	push	r15
     564:	0f 93       	push	r16
     566:	1f 93       	push	r17
     568:	cf 93       	push	r28
     56a:	df 93       	push	r29
     56c:	7c 01       	movw	r14, r24
     56e:	c6 2f       	mov	r28, r22
     570:	6a 01       	movw	r12, r20
     572:	12 2f       	mov	r17, r18
     574:	dc 01       	movw	r26, r24
     576:	13 96       	adiw	r26, 0x03	; 3
     578:	6c 91       	ld	r22, X
     57a:	13 97       	sbiw	r26, 0x03	; 3
     57c:	14 96       	adiw	r26, 0x04	; 4
     57e:	8d 91       	ld	r24, X+
     580:	9c 91       	ld	r25, X
     582:	15 97       	sbiw	r26, 0x05	; 5
     584:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <_ZN7TwoWire17beginTransmissionEh>
     588:	f7 01       	movw	r30, r14
     58a:	84 81       	ldd	r24, Z+4	; 0x04
     58c:	95 81       	ldd	r25, Z+5	; 0x05
     58e:	dc 01       	movw	r26, r24
     590:	ed 91       	ld	r30, X+
     592:	fc 91       	ld	r31, X
     594:	01 90       	ld	r0, Z+
     596:	f0 81       	ld	r31, Z
     598:	e0 2d       	mov	r30, r0
     59a:	6c 2f       	mov	r22, r28
     59c:	19 95       	eicall
     59e:	f7 01       	movw	r30, r14
     5a0:	84 81       	ldd	r24, Z+4	; 0x04
     5a2:	95 81       	ldd	r25, Z+5	; 0x05
     5a4:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <_ZN7TwoWire15endTransmissionEv>
     5a8:	41 2f       	mov	r20, r17
     5aa:	d7 01       	movw	r26, r14
     5ac:	13 96       	adiw	r26, 0x03	; 3
     5ae:	6c 91       	ld	r22, X
     5b0:	13 97       	sbiw	r26, 0x03	; 3
     5b2:	14 96       	adiw	r26, 0x04	; 4
     5b4:	8d 91       	ld	r24, X+
     5b6:	9c 91       	ld	r25, X
     5b8:	15 97       	sbiw	r26, 0x05	; 5
     5ba:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <_ZN7TwoWire11requestFromEhh>
     5be:	11 23       	and	r17, r17
     5c0:	b1 f0       	breq	.+44     	; 0x5ee <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh+0x92>
     5c2:	e6 01       	movw	r28, r12
     5c4:	11 50       	subi	r17, 0x01	; 1
     5c6:	01 2f       	mov	r16, r17
     5c8:	10 e0       	ldi	r17, 0x00	; 0
     5ca:	0f 5f       	subi	r16, 0xFF	; 255
     5cc:	1f 4f       	sbci	r17, 0xFF	; 255
     5ce:	0c 0d       	add	r16, r12
     5d0:	1d 1d       	adc	r17, r13
     5d2:	f7 01       	movw	r30, r14
     5d4:	84 81       	ldd	r24, Z+4	; 0x04
     5d6:	95 81       	ldd	r25, Z+5	; 0x05
     5d8:	dc 01       	movw	r26, r24
     5da:	ed 91       	ld	r30, X+
     5dc:	fc 91       	ld	r31, X
     5de:	02 84       	ldd	r0, Z+10	; 0x0a
     5e0:	f3 85       	ldd	r31, Z+11	; 0x0b
     5e2:	e0 2d       	mov	r30, r0
     5e4:	19 95       	eicall
     5e6:	89 93       	st	Y+, r24
     5e8:	c0 17       	cp	r28, r16
     5ea:	d1 07       	cpc	r29, r17
     5ec:	91 f7       	brne	.-28     	; 0x5d2 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh+0x76>
     5ee:	81 e0       	ldi	r24, 0x01	; 1
     5f0:	df 91       	pop	r29
     5f2:	cf 91       	pop	r28
     5f4:	1f 91       	pop	r17
     5f6:	0f 91       	pop	r16
     5f8:	ff 90       	pop	r15
     5fa:	ef 90       	pop	r14
     5fc:	df 90       	pop	r13
     5fe:	cf 90       	pop	r12
     600:	08 95       	ret

00000602 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>:
 *            VECTOR_EULER
 *            VECTOR_LINEARACCEL
 *            VECTOR_GRAVITY]
 *  @return  vector from specified source
 */
AdafruitImu::Vector<3> Adafruit_BNO055::getVector(adafruit_vector_type_t vector_type) {
     602:	af 92       	push	r10
     604:	bf 92       	push	r11
     606:	cf 92       	push	r12
     608:	df 92       	push	r13
     60a:	ff 92       	push	r15
     60c:	0f 93       	push	r16
     60e:	1f 93       	push	r17
     610:	cf 93       	push	r28
     612:	df 93       	push	r29
     614:	00 d0       	rcall	.+0      	; 0x616 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x14>
     616:	00 d0       	rcall	.+0      	; 0x618 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x16>
     618:	cd b7       	in	r28, 0x3d	; 61
     61a:	de b7       	in	r29, 0x3e	; 62
     61c:	8c 01       	movw	r16, r24
     61e:	cb 01       	movw	r24, r22
     620:	f4 2e       	mov	r15, r20
	template <uint8_t N> class Vector
	{
		public:
		Vector()
		{
			memset(p_vec, 0, sizeof(double)*N);
     622:	2c e0       	ldi	r18, 0x0C	; 12
     624:	f8 01       	movw	r30, r16
     626:	11 92       	st	Z+, r1
     628:	2a 95       	dec	r18
     62a:	e9 f7       	brne	.-6      	; 0x626 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x24>
  AdafruitImu::Vector<3> xyz;
  uint8_t buffer[6];
  memset(buffer, 0, 6);
     62c:	ae 01       	movw	r20, r28
     62e:	4f 5f       	subi	r20, 0xFF	; 255
     630:	5f 4f       	sbci	r21, 0xFF	; 255
     632:	26 e0       	ldi	r18, 0x06	; 6
     634:	fa 01       	movw	r30, r20
     636:	11 92       	st	Z+, r1
     638:	2a 95       	dec	r18
     63a:	e9 f7       	brne	.-6      	; 0x636 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x34>

  int16_t x, y, z;
  x = y = z = 0;

  /* Read vector data (6 bytes) */
  readLen((adafruit_bno055_reg_t)vector_type, buffer, 6);
     63c:	26 e0       	ldi	r18, 0x06	; 6
     63e:	6f 2d       	mov	r22, r15
     640:	8d df       	rcall	.-230    	; 0x55c <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>

  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
     642:	6a 81       	ldd	r22, Y+2	; 0x02
     644:	70 e0       	ldi	r23, 0x00	; 0
     646:	76 2f       	mov	r23, r22
     648:	66 27       	eor	r22, r22
     64a:	89 81       	ldd	r24, Y+1	; 0x01
     64c:	68 2b       	or	r22, r24
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
     64e:	8c 81       	ldd	r24, Y+4	; 0x04
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	98 2f       	mov	r25, r24
     654:	88 27       	eor	r24, r24
     656:	2b 81       	ldd	r18, Y+3	; 0x03
     658:	6c 01       	movw	r12, r24
     65a:	c2 2a       	or	r12, r18
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
     65c:	8e 81       	ldd	r24, Y+6	; 0x06
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	98 2f       	mov	r25, r24
     662:	88 27       	eor	r24, r24
     664:	2d 81       	ldd	r18, Y+5	; 0x05
     666:	5c 01       	movw	r10, r24
     668:	a2 2a       	or	r10, r18

  /*!
   * Convert the value to an appropriate range (section 3.6.4)
   * and assign the value to the Vector type
   */
  switch (vector_type) {
     66a:	f4 e1       	ldi	r31, 0x14	; 20
     66c:	ff 16       	cp	r15, r31
     66e:	09 f4       	brne	.+2      	; 0x672 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x70>
     670:	4a c0       	rjmp	.+148    	; 0x706 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x104>
     672:	ff 15       	cp	r31, r15
     674:	40 f0       	brcs	.+16     	; 0x686 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x84>
     676:	88 e0       	ldi	r24, 0x08	; 8
     678:	f8 16       	cp	r15, r24
     67a:	09 f4       	brne	.+2      	; 0x67e <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x7c>
     67c:	ac c0       	rjmp	.+344    	; 0x7d6 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x1d4>
     67e:	ee e0       	ldi	r30, 0x0E	; 14
     680:	fe 16       	cp	r15, r30
     682:	69 f0       	breq	.+26     	; 0x69e <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x9c>
     684:	43 c1       	rjmp	.+646    	; 0x90c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
     686:	f8 e2       	ldi	r31, 0x28	; 40
     688:	ff 16       	cp	r15, r31
     68a:	09 f4       	brne	.+2      	; 0x68e <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x8c>
     68c:	d8 c0       	rjmp	.+432    	; 0x83e <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x23c>
     68e:	8e e2       	ldi	r24, 0x2E	; 46
     690:	f8 16       	cp	r15, r24
     692:	09 f4       	brne	.+2      	; 0x696 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x94>
     694:	08 c1       	rjmp	.+528    	; 0x8a6 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x2a4>
     696:	ea e1       	ldi	r30, 0x1A	; 26
     698:	fe 12       	cpse	r15, r30
     69a:	38 c1       	rjmp	.+624    	; 0x90c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
     69c:	68 c0       	rjmp	.+208    	; 0x76e <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x16c>
  case VECTOR_MAGNETOMETER:
    /* 1uT = 16 LSB */
    xyz[0] = ((double)x) / 16.0;
     69e:	07 2e       	mov	r0, r23
     6a0:	00 0c       	add	r0, r0
     6a2:	88 0b       	sbc	r24, r24
     6a4:	99 0b       	sbc	r25, r25
     6a6:	0e 94 10 18 	call	0x3020	; 0x3020 <__floatsisf>
     6aa:	20 e0       	ldi	r18, 0x00	; 0
     6ac:	30 e0       	ldi	r19, 0x00	; 0
     6ae:	40 e8       	ldi	r20, 0x80	; 128
     6b0:	5d e3       	ldi	r21, 0x3D	; 61
     6b2:	0e 94 9c 18 	call	0x3138	; 0x3138 <__mulsf3>
     6b6:	f8 01       	movw	r30, r16
     6b8:	60 83       	st	Z, r22
     6ba:	71 83       	std	Z+1, r23	; 0x01
     6bc:	82 83       	std	Z+2, r24	; 0x02
     6be:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 16.0;
     6c0:	b6 01       	movw	r22, r12
     6c2:	dd 0c       	add	r13, r13
     6c4:	88 0b       	sbc	r24, r24
     6c6:	99 0b       	sbc	r25, r25
     6c8:	0e 94 10 18 	call	0x3020	; 0x3020 <__floatsisf>
     6cc:	20 e0       	ldi	r18, 0x00	; 0
     6ce:	30 e0       	ldi	r19, 0x00	; 0
     6d0:	40 e8       	ldi	r20, 0x80	; 128
     6d2:	5d e3       	ldi	r21, 0x3D	; 61
     6d4:	0e 94 9c 18 	call	0x3138	; 0x3138 <__mulsf3>
     6d8:	f8 01       	movw	r30, r16
     6da:	64 83       	std	Z+4, r22	; 0x04
     6dc:	75 83       	std	Z+5, r23	; 0x05
     6de:	86 83       	std	Z+6, r24	; 0x06
     6e0:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 16.0;
     6e2:	b5 01       	movw	r22, r10
     6e4:	bb 0c       	add	r11, r11
     6e6:	88 0b       	sbc	r24, r24
     6e8:	99 0b       	sbc	r25, r25
     6ea:	0e 94 10 18 	call	0x3020	; 0x3020 <__floatsisf>
     6ee:	20 e0       	ldi	r18, 0x00	; 0
     6f0:	30 e0       	ldi	r19, 0x00	; 0
     6f2:	40 e8       	ldi	r20, 0x80	; 128
     6f4:	5d e3       	ldi	r21, 0x3D	; 61
     6f6:	0e 94 9c 18 	call	0x3138	; 0x3138 <__mulsf3>
     6fa:	f8 01       	movw	r30, r16
     6fc:	60 87       	std	Z+8, r22	; 0x08
     6fe:	71 87       	std	Z+9, r23	; 0x09
     700:	82 87       	std	Z+10, r24	; 0x0a
     702:	93 87       	std	Z+11, r25	; 0x0b
    break;
     704:	03 c1       	rjmp	.+518    	; 0x90c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_GYROSCOPE:
    /* 1dps = 16 LSB */
    xyz[0] = ((double)x) / 16.0;
     706:	07 2e       	mov	r0, r23
     708:	00 0c       	add	r0, r0
     70a:	88 0b       	sbc	r24, r24
     70c:	99 0b       	sbc	r25, r25
     70e:	0e 94 10 18 	call	0x3020	; 0x3020 <__floatsisf>
     712:	20 e0       	ldi	r18, 0x00	; 0
     714:	30 e0       	ldi	r19, 0x00	; 0
     716:	40 e8       	ldi	r20, 0x80	; 128
     718:	5d e3       	ldi	r21, 0x3D	; 61
     71a:	0e 94 9c 18 	call	0x3138	; 0x3138 <__mulsf3>
     71e:	f8 01       	movw	r30, r16
     720:	60 83       	st	Z, r22
     722:	71 83       	std	Z+1, r23	; 0x01
     724:	82 83       	std	Z+2, r24	; 0x02
     726:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 16.0;
     728:	b6 01       	movw	r22, r12
     72a:	dd 0c       	add	r13, r13
     72c:	88 0b       	sbc	r24, r24
     72e:	99 0b       	sbc	r25, r25
     730:	0e 94 10 18 	call	0x3020	; 0x3020 <__floatsisf>
     734:	20 e0       	ldi	r18, 0x00	; 0
     736:	30 e0       	ldi	r19, 0x00	; 0
     738:	40 e8       	ldi	r20, 0x80	; 128
     73a:	5d e3       	ldi	r21, 0x3D	; 61
     73c:	0e 94 9c 18 	call	0x3138	; 0x3138 <__mulsf3>
     740:	f8 01       	movw	r30, r16
     742:	64 83       	std	Z+4, r22	; 0x04
     744:	75 83       	std	Z+5, r23	; 0x05
     746:	86 83       	std	Z+6, r24	; 0x06
     748:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 16.0;
     74a:	b5 01       	movw	r22, r10
     74c:	bb 0c       	add	r11, r11
     74e:	88 0b       	sbc	r24, r24
     750:	99 0b       	sbc	r25, r25
     752:	0e 94 10 18 	call	0x3020	; 0x3020 <__floatsisf>
     756:	20 e0       	ldi	r18, 0x00	; 0
     758:	30 e0       	ldi	r19, 0x00	; 0
     75a:	40 e8       	ldi	r20, 0x80	; 128
     75c:	5d e3       	ldi	r21, 0x3D	; 61
     75e:	0e 94 9c 18 	call	0x3138	; 0x3138 <__mulsf3>
     762:	f8 01       	movw	r30, r16
     764:	60 87       	std	Z+8, r22	; 0x08
     766:	71 87       	std	Z+9, r23	; 0x09
     768:	82 87       	std	Z+10, r24	; 0x0a
     76a:	93 87       	std	Z+11, r25	; 0x0b
    break;
     76c:	cf c0       	rjmp	.+414    	; 0x90c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_EULER:
    /* 1 degree = 16 LSB */
    xyz[0] = ((double)x) / 16.0;
     76e:	07 2e       	mov	r0, r23
     770:	00 0c       	add	r0, r0
     772:	88 0b       	sbc	r24, r24
     774:	99 0b       	sbc	r25, r25
     776:	0e 94 10 18 	call	0x3020	; 0x3020 <__floatsisf>
     77a:	20 e0       	ldi	r18, 0x00	; 0
     77c:	30 e0       	ldi	r19, 0x00	; 0
     77e:	40 e8       	ldi	r20, 0x80	; 128
     780:	5d e3       	ldi	r21, 0x3D	; 61
     782:	0e 94 9c 18 	call	0x3138	; 0x3138 <__mulsf3>
     786:	f8 01       	movw	r30, r16
     788:	60 83       	st	Z, r22
     78a:	71 83       	std	Z+1, r23	; 0x01
     78c:	82 83       	std	Z+2, r24	; 0x02
     78e:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 16.0;
     790:	b6 01       	movw	r22, r12
     792:	dd 0c       	add	r13, r13
     794:	88 0b       	sbc	r24, r24
     796:	99 0b       	sbc	r25, r25
     798:	0e 94 10 18 	call	0x3020	; 0x3020 <__floatsisf>
     79c:	20 e0       	ldi	r18, 0x00	; 0
     79e:	30 e0       	ldi	r19, 0x00	; 0
     7a0:	40 e8       	ldi	r20, 0x80	; 128
     7a2:	5d e3       	ldi	r21, 0x3D	; 61
     7a4:	0e 94 9c 18 	call	0x3138	; 0x3138 <__mulsf3>
     7a8:	f8 01       	movw	r30, r16
     7aa:	64 83       	std	Z+4, r22	; 0x04
     7ac:	75 83       	std	Z+5, r23	; 0x05
     7ae:	86 83       	std	Z+6, r24	; 0x06
     7b0:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 16.0;
     7b2:	b5 01       	movw	r22, r10
     7b4:	bb 0c       	add	r11, r11
     7b6:	88 0b       	sbc	r24, r24
     7b8:	99 0b       	sbc	r25, r25
     7ba:	0e 94 10 18 	call	0x3020	; 0x3020 <__floatsisf>
     7be:	20 e0       	ldi	r18, 0x00	; 0
     7c0:	30 e0       	ldi	r19, 0x00	; 0
     7c2:	40 e8       	ldi	r20, 0x80	; 128
     7c4:	5d e3       	ldi	r21, 0x3D	; 61
     7c6:	0e 94 9c 18 	call	0x3138	; 0x3138 <__mulsf3>
     7ca:	f8 01       	movw	r30, r16
     7cc:	60 87       	std	Z+8, r22	; 0x08
     7ce:	71 87       	std	Z+9, r23	; 0x09
     7d0:	82 87       	std	Z+10, r24	; 0x0a
     7d2:	93 87       	std	Z+11, r25	; 0x0b
    break;
     7d4:	9b c0       	rjmp	.+310    	; 0x90c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_ACCELEROMETER:
    /* 1m/s^2 = 100 LSB */
    xyz[0] = ((double)x) / 100.0;
     7d6:	07 2e       	mov	r0, r23
     7d8:	00 0c       	add	r0, r0
     7da:	88 0b       	sbc	r24, r24
     7dc:	99 0b       	sbc	r25, r25
     7de:	0e 94 10 18 	call	0x3020	; 0x3020 <__floatsisf>
     7e2:	20 e0       	ldi	r18, 0x00	; 0
     7e4:	30 e0       	ldi	r19, 0x00	; 0
     7e6:	48 ec       	ldi	r20, 0xC8	; 200
     7e8:	52 e4       	ldi	r21, 0x42	; 66
     7ea:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <__divsf3>
     7ee:	f8 01       	movw	r30, r16
     7f0:	60 83       	st	Z, r22
     7f2:	71 83       	std	Z+1, r23	; 0x01
     7f4:	82 83       	std	Z+2, r24	; 0x02
     7f6:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 100.0;
     7f8:	b6 01       	movw	r22, r12
     7fa:	dd 0c       	add	r13, r13
     7fc:	88 0b       	sbc	r24, r24
     7fe:	99 0b       	sbc	r25, r25
     800:	0e 94 10 18 	call	0x3020	; 0x3020 <__floatsisf>
     804:	20 e0       	ldi	r18, 0x00	; 0
     806:	30 e0       	ldi	r19, 0x00	; 0
     808:	48 ec       	ldi	r20, 0xC8	; 200
     80a:	52 e4       	ldi	r21, 0x42	; 66
     80c:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <__divsf3>
     810:	f8 01       	movw	r30, r16
     812:	64 83       	std	Z+4, r22	; 0x04
     814:	75 83       	std	Z+5, r23	; 0x05
     816:	86 83       	std	Z+6, r24	; 0x06
     818:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 100.0;
     81a:	b5 01       	movw	r22, r10
     81c:	bb 0c       	add	r11, r11
     81e:	88 0b       	sbc	r24, r24
     820:	99 0b       	sbc	r25, r25
     822:	0e 94 10 18 	call	0x3020	; 0x3020 <__floatsisf>
     826:	20 e0       	ldi	r18, 0x00	; 0
     828:	30 e0       	ldi	r19, 0x00	; 0
     82a:	48 ec       	ldi	r20, 0xC8	; 200
     82c:	52 e4       	ldi	r21, 0x42	; 66
     82e:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <__divsf3>
     832:	f8 01       	movw	r30, r16
     834:	60 87       	std	Z+8, r22	; 0x08
     836:	71 87       	std	Z+9, r23	; 0x09
     838:	82 87       	std	Z+10, r24	; 0x0a
     83a:	93 87       	std	Z+11, r25	; 0x0b
    break;
     83c:	67 c0       	rjmp	.+206    	; 0x90c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_LINEARACCEL:
    /* 1m/s^2 = 100 LSB */
    xyz[0] = ((double)x) / 100.0;
     83e:	07 2e       	mov	r0, r23
     840:	00 0c       	add	r0, r0
     842:	88 0b       	sbc	r24, r24
     844:	99 0b       	sbc	r25, r25
     846:	0e 94 10 18 	call	0x3020	; 0x3020 <__floatsisf>
     84a:	20 e0       	ldi	r18, 0x00	; 0
     84c:	30 e0       	ldi	r19, 0x00	; 0
     84e:	48 ec       	ldi	r20, 0xC8	; 200
     850:	52 e4       	ldi	r21, 0x42	; 66
     852:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <__divsf3>
     856:	f8 01       	movw	r30, r16
     858:	60 83       	st	Z, r22
     85a:	71 83       	std	Z+1, r23	; 0x01
     85c:	82 83       	std	Z+2, r24	; 0x02
     85e:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 100.0;
     860:	b6 01       	movw	r22, r12
     862:	dd 0c       	add	r13, r13
     864:	88 0b       	sbc	r24, r24
     866:	99 0b       	sbc	r25, r25
     868:	0e 94 10 18 	call	0x3020	; 0x3020 <__floatsisf>
     86c:	20 e0       	ldi	r18, 0x00	; 0
     86e:	30 e0       	ldi	r19, 0x00	; 0
     870:	48 ec       	ldi	r20, 0xC8	; 200
     872:	52 e4       	ldi	r21, 0x42	; 66
     874:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <__divsf3>
     878:	f8 01       	movw	r30, r16
     87a:	64 83       	std	Z+4, r22	; 0x04
     87c:	75 83       	std	Z+5, r23	; 0x05
     87e:	86 83       	std	Z+6, r24	; 0x06
     880:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 100.0;
     882:	b5 01       	movw	r22, r10
     884:	bb 0c       	add	r11, r11
     886:	88 0b       	sbc	r24, r24
     888:	99 0b       	sbc	r25, r25
     88a:	0e 94 10 18 	call	0x3020	; 0x3020 <__floatsisf>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	48 ec       	ldi	r20, 0xC8	; 200
     894:	52 e4       	ldi	r21, 0x42	; 66
     896:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <__divsf3>
     89a:	f8 01       	movw	r30, r16
     89c:	60 87       	std	Z+8, r22	; 0x08
     89e:	71 87       	std	Z+9, r23	; 0x09
     8a0:	82 87       	std	Z+10, r24	; 0x0a
     8a2:	93 87       	std	Z+11, r25	; 0x0b
    break;
     8a4:	33 c0       	rjmp	.+102    	; 0x90c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_GRAVITY:
    /* 1m/s^2 = 100 LSB */
    xyz[0] = ((double)x) / 100.0;
     8a6:	07 2e       	mov	r0, r23
     8a8:	00 0c       	add	r0, r0
     8aa:	88 0b       	sbc	r24, r24
     8ac:	99 0b       	sbc	r25, r25
     8ae:	0e 94 10 18 	call	0x3020	; 0x3020 <__floatsisf>
     8b2:	20 e0       	ldi	r18, 0x00	; 0
     8b4:	30 e0       	ldi	r19, 0x00	; 0
     8b6:	48 ec       	ldi	r20, 0xC8	; 200
     8b8:	52 e4       	ldi	r21, 0x42	; 66
     8ba:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <__divsf3>
     8be:	f8 01       	movw	r30, r16
     8c0:	60 83       	st	Z, r22
     8c2:	71 83       	std	Z+1, r23	; 0x01
     8c4:	82 83       	std	Z+2, r24	; 0x02
     8c6:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 100.0;
     8c8:	b6 01       	movw	r22, r12
     8ca:	dd 0c       	add	r13, r13
     8cc:	88 0b       	sbc	r24, r24
     8ce:	99 0b       	sbc	r25, r25
     8d0:	0e 94 10 18 	call	0x3020	; 0x3020 <__floatsisf>
     8d4:	20 e0       	ldi	r18, 0x00	; 0
     8d6:	30 e0       	ldi	r19, 0x00	; 0
     8d8:	48 ec       	ldi	r20, 0xC8	; 200
     8da:	52 e4       	ldi	r21, 0x42	; 66
     8dc:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <__divsf3>
     8e0:	f8 01       	movw	r30, r16
     8e2:	64 83       	std	Z+4, r22	; 0x04
     8e4:	75 83       	std	Z+5, r23	; 0x05
     8e6:	86 83       	std	Z+6, r24	; 0x06
     8e8:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 100.0;
     8ea:	b5 01       	movw	r22, r10
     8ec:	bb 0c       	add	r11, r11
     8ee:	88 0b       	sbc	r24, r24
     8f0:	99 0b       	sbc	r25, r25
     8f2:	0e 94 10 18 	call	0x3020	; 0x3020 <__floatsisf>
     8f6:	20 e0       	ldi	r18, 0x00	; 0
     8f8:	30 e0       	ldi	r19, 0x00	; 0
     8fa:	48 ec       	ldi	r20, 0xC8	; 200
     8fc:	52 e4       	ldi	r21, 0x42	; 66
     8fe:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <__divsf3>
     902:	f8 01       	movw	r30, r16
     904:	60 87       	std	Z+8, r22	; 0x08
     906:	71 87       	std	Z+9, r23	; 0x09
     908:	82 87       	std	Z+10, r24	; 0x0a
     90a:	93 87       	std	Z+11, r25	; 0x0b
    break;
  }

  return xyz;
}
     90c:	c8 01       	movw	r24, r16
     90e:	26 96       	adiw	r28, 0x06	; 6
     910:	0f b6       	in	r0, 0x3f	; 63
     912:	f8 94       	cli
     914:	de bf       	out	0x3e, r29	; 62
     916:	0f be       	out	0x3f, r0	; 63
     918:	cd bf       	out	0x3d, r28	; 61
     91a:	df 91       	pop	r29
     91c:	cf 91       	pop	r28
     91e:	1f 91       	pop	r17
     920:	0f 91       	pop	r16
     922:	ff 90       	pop	r15
     924:	df 90       	pop	r13
     926:	cf 90       	pop	r12
     928:	bf 90       	pop	r11
     92a:	af 90       	pop	r10
     92c:	08 95       	ret

0000092e <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>:
/*!
 *  @brief  Reads the sensor and returns the data as a sensors_event_t
 *  @param  event
 *  @return always returns true
 */
bool Adafruit_BNO055::getEvent(sensors_event_t *event) {
     92e:	0f 93       	push	r16
     930:	1f 93       	push	r17
     932:	cf 93       	push	r28
     934:	df 93       	push	r29
     936:	cd b7       	in	r28, 0x3d	; 61
     938:	de b7       	in	r29, 0x3e	; 62
     93a:	2c 97       	sbiw	r28, 0x0c	; 12
     93c:	0f b6       	in	r0, 0x3f	; 63
     93e:	f8 94       	cli
     940:	de bf       	out	0x3e, r29	; 62
     942:	0f be       	out	0x3f, r0	; 63
     944:	cd bf       	out	0x3d, r28	; 61
     946:	8b 01       	movw	r16, r22
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
     948:	20 e2       	ldi	r18, 0x20	; 32
     94a:	fb 01       	movw	r30, r22
     94c:	11 92       	st	Z+, r1
     94e:	2a 95       	dec	r18
     950:	e9 f7       	brne	.-6      	; 0x94c <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t+0x1e>

  event->version = sizeof(sensors_event_t);
     952:	40 e2       	ldi	r20, 0x20	; 32
     954:	50 e0       	ldi	r21, 0x00	; 0
     956:	60 e0       	ldi	r22, 0x00	; 0
     958:	70 e0       	ldi	r23, 0x00	; 0
     95a:	f8 01       	movw	r30, r16
     95c:	40 83       	st	Z, r20
     95e:	51 83       	std	Z+1, r21	; 0x01
     960:	62 83       	std	Z+2, r22	; 0x02
     962:	73 83       	std	Z+3, r23	; 0x03
  event->sensor_id = _sensorID;
     964:	fc 01       	movw	r30, r24
     966:	46 81       	ldd	r20, Z+6	; 0x06
     968:	57 81       	ldd	r21, Z+7	; 0x07
     96a:	60 85       	ldd	r22, Z+8	; 0x08
     96c:	71 85       	ldd	r23, Z+9	; 0x09
     96e:	f8 01       	movw	r30, r16
     970:	44 83       	std	Z+4, r20	; 0x04
     972:	55 83       	std	Z+5, r21	; 0x05
     974:	66 83       	std	Z+6, r22	; 0x06
     976:	77 83       	std	Z+7, r23	; 0x07
  event->type = SENSOR_TYPE_ORIENTATION;
     978:	43 e0       	ldi	r20, 0x03	; 3
     97a:	50 e0       	ldi	r21, 0x00	; 0
     97c:	60 e0       	ldi	r22, 0x00	; 0
     97e:	70 e0       	ldi	r23, 0x00	; 0
     980:	40 87       	std	Z+8, r20	; 0x08
     982:	51 87       	std	Z+9, r21	; 0x09
     984:	62 87       	std	Z+10, r22	; 0x0a
     986:	73 87       	std	Z+11, r23	; 0x0b
  //event->timestamp = millis();

  /* Get a Euler angle sample for orientation */
  AdafruitImu::Vector<3> euler = getVector(Adafruit_BNO055::VECTOR_EULER);
     988:	4a e1       	ldi	r20, 0x1A	; 26
     98a:	bc 01       	movw	r22, r24
     98c:	ce 01       	movw	r24, r28
     98e:	01 96       	adiw	r24, 0x01	; 1
     990:	38 de       	rcall	.-912    	; 0x602 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
  event->orientation.x = euler.x();
     992:	89 81       	ldd	r24, Y+1	; 0x01
     994:	9a 81       	ldd	r25, Y+2	; 0x02
     996:	ab 81       	ldd	r26, Y+3	; 0x03
     998:	bc 81       	ldd	r27, Y+4	; 0x04
     99a:	f8 01       	movw	r30, r16
     99c:	80 8b       	std	Z+16, r24	; 0x10
     99e:	91 8b       	std	Z+17, r25	; 0x11
     9a0:	a2 8b       	std	Z+18, r26	; 0x12
     9a2:	b3 8b       	std	Z+19, r27	; 0x13
  event->orientation.y = euler.y();
     9a4:	8d 81       	ldd	r24, Y+5	; 0x05
     9a6:	9e 81       	ldd	r25, Y+6	; 0x06
     9a8:	af 81       	ldd	r26, Y+7	; 0x07
     9aa:	b8 85       	ldd	r27, Y+8	; 0x08
     9ac:	84 8b       	std	Z+20, r24	; 0x14
     9ae:	95 8b       	std	Z+21, r25	; 0x15
     9b0:	a6 8b       	std	Z+22, r26	; 0x16
     9b2:	b7 8b       	std	Z+23, r27	; 0x17
  event->orientation.z = euler.z();
     9b4:	89 85       	ldd	r24, Y+9	; 0x09
     9b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     9b8:	ab 85       	ldd	r26, Y+11	; 0x0b
     9ba:	bc 85       	ldd	r27, Y+12	; 0x0c
     9bc:	80 8f       	std	Z+24, r24	; 0x18
     9be:	91 8f       	std	Z+25, r25	; 0x19
     9c0:	a2 8f       	std	Z+26, r26	; 0x1a
     9c2:	b3 8f       	std	Z+27, r27	; 0x1b

  return true;
}
     9c4:	81 e0       	ldi	r24, 0x01	; 1
     9c6:	2c 96       	adiw	r28, 0x0c	; 12
     9c8:	0f b6       	in	r0, 0x3f	; 63
     9ca:	f8 94       	cli
     9cc:	de bf       	out	0x3e, r29	; 62
     9ce:	0f be       	out	0x3f, r0	; 63
     9d0:	cd bf       	out	0x3d, r28	; 61
     9d2:	df 91       	pop	r29
     9d4:	cf 91       	pop	r28
     9d6:	1f 91       	pop	r17
     9d8:	0f 91       	pop	r16
     9da:	08 95       	ret

000009dc <_Z14RunPingCommandPKhh>:
#include <stddef.h>

uint8_t* const SendDataBuffer = (uint8_t*)(&EtherComm::buffer[2]);

void RunPingCommand(const uint8_t* data, uint8_t len){
  if(len == 1){
     9dc:	61 30       	cpi	r22, 0x01	; 1
     9de:	49 f4       	brne	.+18     	; 0x9f2 <_Z14RunPingCommandPKhh+0x16>
     9e0:	fc 01       	movw	r30, r24
    SendDataBuffer[0] = data[0];
     9e2:	80 81       	ld	r24, Z
     9e4:	e0 91 f8 02 	lds	r30, 0x02F8	; 0x8002f8 <__data_end>
     9e8:	f0 91 f9 02 	lds	r31, 0x02F9	; 0x8002f9 <__data_end+0x1>
     9ec:	80 83       	st	Z, r24
    EtherComm::SendCommand(CMD_Ping, 1);
     9ee:	80 e0       	ldi	r24, 0x00	; 0
     9f0:	bf c6       	rjmp	.+3454   	; 0x1770 <_ZN9EtherComm11SendCommandEhh>
     9f2:	08 95       	ret

000009f4 <_Z14RunEchoCommandPKhh>:
  }
}

void RunEchoCommand(const uint8_t* data, uint8_t len){
  uint8_t* index = SendDataBuffer;
     9f4:	40 91 f8 02 	lds	r20, 0x02F8	; 0x8002f8 <__data_end>
     9f8:	30 91 f9 02 	lds	r19, 0x02F9	; 0x8002f9 <__data_end+0x1>
  uint8_t dataLen = len;
  while(len-- > 0){
     9fc:	2f ef       	ldi	r18, 0xFF	; 255
     9fe:	26 0f       	add	r18, r22
     a00:	66 23       	and	r22, r22
     a02:	41 f0       	breq	.+16     	; 0xa14 <_Z14RunEchoCommandPKhh+0x20>
     a04:	a8 2f       	mov	r26, r24
     a06:	b9 2f       	mov	r27, r25
     a08:	e4 2f       	mov	r30, r20
     a0a:	f3 2f       	mov	r31, r19
    *(index++) = *(data++);
     a0c:	8d 91       	ld	r24, X+
     a0e:	81 93       	st	Z+, r24
}

void RunEchoCommand(const uint8_t* data, uint8_t len){
  uint8_t* index = SendDataBuffer;
  uint8_t dataLen = len;
  while(len-- > 0){
     a10:	21 50       	subi	r18, 0x01	; 1
     a12:	e0 f7       	brcc	.-8      	; 0xa0c <_Z14RunEchoCommandPKhh+0x18>
    *(index++) = *(data++);
  }
  
  EtherComm::SendCommand(CMD_Echo, dataLen);
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	ac c6       	rjmp	.+3416   	; 0x1770 <_ZN9EtherComm11SendCommandEhh>
     a18:	08 95       	ret

00000a1a <_Z13RunLedCommandPKhh>:
}
//TODO remove this command from both devices
void RunLedCommand(const uint8_t* data, uint8_t len){
	if(len == 1){
     a1a:	61 30       	cpi	r22, 0x01	; 1
     a1c:	51 f4       	brne	.+20     	; 0xa32 <_Z13RunLedCommandPKhh+0x18>
		uint8_t state = *data;
     a1e:	fc 01       	movw	r30, r24
     a20:	90 81       	ld	r25, Z
		if(state <= 1){
     a22:	92 30       	cpi	r25, 0x02	; 2
     a24:	30 f4       	brcc	.+12     	; 0xa32 <_Z13RunLedCommandPKhh+0x18>
			rov.SetLed(state > 0);
     a26:	81 e0       	ldi	r24, 0x01	; 1
     a28:	91 11       	cpse	r25, r1
     a2a:	01 c0       	rjmp	.+2      	; 0xa2e <_Z13RunLedCommandPKhh+0x14>
     a2c:	80 e0       	ldi	r24, 0x00	; 0
     a2e:	0c 94 f9 15 	jmp	0x2bf2	; 0x2bf2 <_ZN5Robot6SetLedEb>
     a32:	08 95       	ret

00000a34 <_ZN9EtherComm15CommandReceivedEhPKhh>:
		}
	}
}

void EtherComm::CommandReceived(uint8_t command, const uint8_t* data, uint8_t len){
     a34:	9b 01       	movw	r18, r22
  switch(command){
     a36:	81 30       	cpi	r24, 0x01	; 1
     a38:	51 f0       	breq	.+20     	; 0xa4e <_ZN9EtherComm15CommandReceivedEhPKhh+0x1a>
     a3a:	28 f0       	brcs	.+10     	; 0xa46 <_ZN9EtherComm15CommandReceivedEhPKhh+0x12>
     a3c:	82 30       	cpi	r24, 0x02	; 2
     a3e:	59 f0       	breq	.+22     	; 0xa56 <_ZN9EtherComm15CommandReceivedEhPKhh+0x22>
     a40:	83 30       	cpi	r24, 0x03	; 3
     a42:	69 f0       	breq	.+26     	; 0xa5e <_ZN9EtherComm15CommandReceivedEhPKhh+0x2a>
     a44:	08 95       	ret
    case CMD_Ping: RunPingCommand(data, len); break;
     a46:	64 2f       	mov	r22, r20
     a48:	c9 01       	movw	r24, r18
     a4a:	c8 cf       	rjmp	.-112    	; 0x9dc <_Z14RunPingCommandPKhh>
     a4c:	08 95       	ret
    case CMD_Echo: RunEchoCommand(data, len); break;
     a4e:	64 2f       	mov	r22, r20
     a50:	c9 01       	movw	r24, r18
     a52:	d0 cf       	rjmp	.-96     	; 0x9f4 <_Z14RunEchoCommandPKhh>
     a54:	08 95       	ret
	case CMD_Led: RunLedCommand(data, len); break;
     a56:	64 2f       	mov	r22, r20
     a58:	c9 01       	movw	r24, r18
     a5a:	df cf       	rjmp	.-66     	; 0xa1a <_Z13RunLedCommandPKhh>
     a5c:	08 95       	ret
	case CMD_UpdateDevice: rov.CommandReceived(data, len); break;
     a5e:	64 2f       	mov	r22, r20
     a60:	c9 01       	movw	r24, r18
     a62:	0c 94 ff 15 	jmp	0x2bfe	; 0x2bfe <_ZN5Robot15CommandReceivedEPKhh>
     a66:	08 95       	ret

00000a68 <_GLOBAL__sub_I__Z14RunPingCommandPKhh>:
#include "EtherComm.h"
#include "Robot.h"
#include "Commands.h"
#include <stddef.h>

uint8_t* const SendDataBuffer = (uint8_t*)(&EtherComm::buffer[2]);
     a68:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
     a6c:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
     a70:	02 96       	adiw	r24, 0x02	; 2
     a72:	90 93 f9 02 	sts	0x02F9, r25	; 0x8002f9 <__data_end+0x1>
     a76:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <__data_end>
     a7a:	08 95       	ret

00000a7c <_ZL10enableChipv>:
static Register* selectPort;
static uint8_t selectPin;

static void enableChip () {
	//cli();
	SetLow(*selectPort, selectPin); //digitalWrite(selectPin, LOW);
     a7c:	e0 91 fe 02 	lds	r30, 0x02FE	; 0x8002fe <_ZL10selectPort>
     a80:	f0 91 ff 02 	lds	r31, 0x02FF	; 0x8002ff <_ZL10selectPort+0x1>
     a84:	90 81       	ld	r25, Z
     a86:	80 91 fd 02 	lds	r24, 0x02FD	; 0x8002fd <_ZL9selectPin>
     a8a:	80 95       	com	r24
     a8c:	89 23       	and	r24, r25
     a8e:	80 83       	st	Z, r24
     a90:	08 95       	ret

00000a92 <_ZL11disableChipv>:
}

static void disableChip () {
	SetHigh(*selectPort, selectPin); //digitalWrite(selectPin, HIGH);
     a92:	e0 91 fe 02 	lds	r30, 0x02FE	; 0x8002fe <_ZL10selectPort>
     a96:	f0 91 ff 02 	lds	r31, 0x02FF	; 0x8002ff <_ZL10selectPort+0x1>
     a9a:	90 81       	ld	r25, Z
     a9c:	80 91 fd 02 	lds	r24, 0x02FD	; 0x8002fd <_ZL9selectPin>
     aa0:	89 2b       	or	r24, r25
     aa2:	80 83       	st	Z, r24
     aa4:	08 95       	ret

00000aa6 <_ZL6readOphh>:

	SetOutput(csDDR, selectPin);
	disableChip();
}

static uint8_t readOp (uint8_t op, uint8_t address) {
     aa6:	cf 93       	push	r28
     aa8:	df 93       	push	r29
     aaa:	d8 2f       	mov	r29, r24
     aac:	c6 2f       	mov	r28, r22
    enableChip();
     aae:	e6 df       	rcall	.-52     	; 0xa7c <_ZL10enableChipv>
    SPI.write8(op | (address & ADDR_MASK));
     ab0:	8c 2f       	mov	r24, r28
     ab2:	cf 71       	andi	r28, 0x1F	; 31
     ab4:	cd 2b       	or	r28, r29
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     ab6:	ce bd       	out	0x2e, r28	; 46
		asm volatile("nop");
     ab8:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     aba:	0d b4       	in	r0, 0x2d	; 45
     abc:	07 fe       	sbrs	r0, 7
     abe:	fd cf       	rjmp	.-6      	; 0xaba <_ZL6readOphh+0x14>
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     ac0:	1e bc       	out	0x2e, r1	; 46
		asm volatile("nop");
     ac2:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     ac4:	0d b4       	in	r0, 0x2d	; 45
     ac6:	07 fe       	sbrs	r0, 7
     ac8:	fd cf       	rjmp	.-6      	; 0xac4 <_ZL6readOphh+0x1e>
	}

	//write8, excepts also returns the received byte
	static uint8_t read_write8(uint8_t data){
		write8(data);
		return SPDR;
     aca:	ce b5       	in	r28, 0x2e	; 46
    uint8_t result = SPI.read_write8(0x00);
    if (address & 0x80)
     acc:	88 23       	and	r24, r24
     ace:	34 f4       	brge	.+12     	; 0xadc <_ZL6readOphh+0x36>
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     ad0:	1e bc       	out	0x2e, r1	; 46
		asm volatile("nop");
     ad2:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     ad4:	0d b4       	in	r0, 0x2d	; 45
     ad6:	07 fe       	sbrs	r0, 7
     ad8:	fd cf       	rjmp	.-6      	; 0xad4 <_ZL6readOphh+0x2e>
        result = SPI.read_write8(0x00);
    disableChip();
     ada:	ce b5       	in	r28, 0x2e	; 46
     adc:	da df       	rcall	.-76     	; 0xa92 <_ZL11disableChipv>
    return result;
}
     ade:	8c 2f       	mov	r24, r28
     ae0:	df 91       	pop	r29
     ae2:	cf 91       	pop	r28
     ae4:	08 95       	ret

00000ae6 <_ZL7writeOphhh>:

static void writeOp (uint8_t op, uint8_t address, uint8_t data) {
     ae6:	1f 93       	push	r17
     ae8:	cf 93       	push	r28
     aea:	df 93       	push	r29
     aec:	c8 2f       	mov	r28, r24
     aee:	d6 2f       	mov	r29, r22
     af0:	14 2f       	mov	r17, r20
    enableChip();
     af2:	c4 df       	rcall	.-120    	; 0xa7c <_ZL10enableChipv>
    SPI.write8(op | (address & ADDR_MASK));
     af4:	df 71       	andi	r29, 0x1F	; 31
     af6:	cd 2b       	or	r28, r29
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     af8:	ce bd       	out	0x2e, r28	; 46
		asm volatile("nop");
     afa:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     afc:	0d b4       	in	r0, 0x2d	; 45
     afe:	07 fe       	sbrs	r0, 7
     b00:	fd cf       	rjmp	.-6      	; 0xafc <_ZL7writeOphhh+0x16>
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     b02:	1e bd       	out	0x2e, r17	; 46
		asm volatile("nop");
     b04:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     b06:	0d b4       	in	r0, 0x2d	; 45
     b08:	07 fe       	sbrs	r0, 7
    SPI.write8(data);
    disableChip();
     b0a:	fd cf       	rjmp	.-6      	; 0xb06 <_ZL7writeOphhh+0x20>
     b0c:	c2 df       	rcall	.-124    	; 0xa92 <_ZL11disableChipv>
}
     b0e:	df 91       	pop	r29
     b10:	cf 91       	pop	r28
     b12:	1f 91       	pop	r17
     b14:	08 95       	ret

00000b16 <_ZL7readBufjPh>:

static void readBuf(uint16_t len, uint8_t* data) {
     b16:	0f 93       	push	r16
     b18:	1f 93       	push	r17
     b1a:	cf 93       	push	r28
     b1c:	df 93       	push	r29
     b1e:	ec 01       	movw	r28, r24
     b20:	8b 01       	movw	r16, r22
    enableChip();
     b22:	ac df       	rcall	.-168    	; 0xa7c <_ZL10enableChipv>
    if (len != 0) {
     b24:	20 97       	sbiw	r28, 0x00	; 0
     b26:	99 f0       	breq	.+38     	; 0xb4e <_ZL7readBufjPh+0x38>
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     b28:	8a e3       	ldi	r24, 0x3A	; 58
     b2a:	8e bd       	out	0x2e, r24	; 46
		asm volatile("nop");
     b2c:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     b2e:	0d b4       	in	r0, 0x2d	; 45
     b30:	07 fe       	sbrs	r0, 7
     b32:	fd cf       	rjmp	.-6      	; 0xb2e <_ZL7readBufjPh+0x18>
     b34:	f8 01       	movw	r30, r16
     b36:	b8 01       	movw	r22, r16
     b38:	6c 0f       	add	r22, r28
     b3a:	7d 1f       	adc	r23, r29
	static void read(void *buf, uint16_t nbyte, uint8_t dataSend = 0){
		if(nbyte == 0) return;
		
		uint8_t* buff = (uint8_t*)buf;
		while(nbyte--){
			SPDR = dataSend;
     b3c:	1e bc       	out	0x2e, r1	; 46
			//asm volatile("nop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\n");
			while(!(SPSR & _BV(SPIF)));
     b3e:	0d b4       	in	r0, 0x2d	; 45
     b40:	07 fe       	sbrs	r0, 7
     b42:	fd cf       	rjmp	.-6      	; 0xb3e <_ZL7readBufjPh+0x28>
			*buff++ = SPDR;
     b44:	9e b5       	in	r25, 0x2e	; 46
     b46:	91 93       	st	Z+, r25
		
	static void read(void *buf, uint16_t nbyte, uint8_t dataSend = 0){
		if(nbyte == 0) return;
		
		uint8_t* buff = (uint8_t*)buf;
		while(nbyte--){
     b48:	6e 17       	cp	r22, r30
     b4a:	7f 07       	cpc	r23, r31
        SPI.write8(ENC28J60_READ_BUF_MEM);
		SPI.read(data, len);
    }
    disableChip();
     b4c:	b9 f7       	brne	.-18     	; 0xb3c <_ZL7readBufjPh+0x26>
     b4e:	a1 df       	rcall	.-190    	; 0xa92 <_ZL11disableChipv>
}
     b50:	df 91       	pop	r29
     b52:	cf 91       	pop	r28
     b54:	1f 91       	pop	r17
     b56:	0f 91       	pop	r16
     b58:	08 95       	ret

00000b5a <_ZL7SetBankh>:
        SPI.write(data, len);
    }
    disableChip();
}

static void SetBank (uint8_t address) {
     b5a:	1f 93       	push	r17
     b5c:	cf 93       	push	r28
     b5e:	df 93       	push	r29
     b60:	18 2f       	mov	r17, r24
     b62:	10 76       	andi	r17, 0x60	; 96
    if ((address & BANK_MASK) != Enc28j60Bank) {
     b64:	c1 2f       	mov	r28, r17
     b66:	d0 e0       	ldi	r29, 0x00	; 0
     b68:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <_ZL12Enc28j60Bank>
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	c8 17       	cp	r28, r24
     b70:	d9 07       	cpc	r29, r25
     b72:	a1 f0       	breq	.+40     	; 0xb9c <_ZL7SetBankh+0x42>
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_BSEL1|ECON1_BSEL0);
     b74:	43 e0       	ldi	r20, 0x03	; 3
     b76:	6f e1       	ldi	r22, 0x1F	; 31
     b78:	80 ea       	ldi	r24, 0xA0	; 160
     b7a:	b5 df       	rcall	.-150    	; 0xae6 <_ZL7writeOphhh>
        Enc28j60Bank = address & BANK_MASK;
     b7c:	10 93 00 03 	sts	0x0300, r17	; 0x800300 <_ZL12Enc28j60Bank>
        writeOp(ENC28J60_BIT_FIELD_SET, ECON1, Enc28j60Bank>>5);
     b80:	ae 01       	movw	r20, r28
     b82:	55 95       	asr	r21
     b84:	47 95       	ror	r20
     b86:	55 95       	asr	r21
     b88:	47 95       	ror	r20
     b8a:	55 95       	asr	r21
     b8c:	47 95       	ror	r20
     b8e:	55 95       	asr	r21
     b90:	47 95       	ror	r20
     b92:	55 95       	asr	r21
     b94:	47 95       	ror	r20
     b96:	6f e1       	ldi	r22, 0x1F	; 31
     b98:	80 e8       	ldi	r24, 0x80	; 128
     b9a:	a5 df       	rcall	.-182    	; 0xae6 <_ZL7writeOphhh>
    }
}
     b9c:	df 91       	pop	r29
     b9e:	cf 91       	pop	r28
     ba0:	1f 91       	pop	r17
     ba2:	08 95       	ret

00000ba4 <_ZL11readRegByteh>:

static uint8_t readRegByte (uint8_t address) {
     ba4:	cf 93       	push	r28
     ba6:	c8 2f       	mov	r28, r24
    SetBank(address);
     ba8:	d8 df       	rcall	.-80     	; 0xb5a <_ZL7SetBankh>
    return readOp(ENC28J60_READ_CTRL_REG, address);
     baa:	6c 2f       	mov	r22, r28
     bac:	80 e0       	ldi	r24, 0x00	; 0
     bae:	7b df       	rcall	.-266    	; 0xaa6 <_ZL6readOphh>
}
     bb0:	cf 91       	pop	r28
     bb2:	08 95       	ret

00000bb4 <_ZL12writeRegBytehh>:

static void writeRegByte (uint8_t address, uint8_t data) {
     bb4:	cf 93       	push	r28
     bb6:	df 93       	push	r29
     bb8:	c8 2f       	mov	r28, r24
     bba:	d6 2f       	mov	r29, r22
    SetBank(address);
     bbc:	ce df       	rcall	.-100    	; 0xb5a <_ZL7SetBankh>
    writeOp(ENC28J60_WRITE_CTRL_REG, address, data);
     bbe:	4d 2f       	mov	r20, r29
     bc0:	6c 2f       	mov	r22, r28
     bc2:	80 e4       	ldi	r24, 0x40	; 64
     bc4:	90 df       	rcall	.-224    	; 0xae6 <_ZL7writeOphhh>
}
     bc6:	df 91       	pop	r29
     bc8:	cf 91       	pop	r28
     bca:	08 95       	ret

00000bcc <_ZL8writeReghj>:

static void writeReg(uint8_t address, uint16_t data) {
     bcc:	cf 93       	push	r28
     bce:	df 93       	push	r29
     bd0:	c8 2f       	mov	r28, r24
     bd2:	d7 2f       	mov	r29, r23
    writeRegByte(address, data);
     bd4:	ef df       	rcall	.-34     	; 0xbb4 <_ZL12writeRegBytehh>
    writeRegByte(address + 1, data >> 8);
     bd6:	6d 2f       	mov	r22, r29
     bd8:	81 e0       	ldi	r24, 0x01	; 1
     bda:	8c 0f       	add	r24, r28
     bdc:	eb df       	rcall	.-42     	; 0xbb4 <_ZL12writeRegBytehh>
}
     bde:	df 91       	pop	r29
     be0:	cf 91       	pop	r28
     be2:	08 95       	ret

00000be4 <_ZN8ENC28J607initSPIERVh>:
static void disableChip () {
	SetHigh(*selectPort, selectPin); //digitalWrite(selectPin, HIGH);
	//sei();
}

void ENC28J60::initSPI (Register& csDDR) {
     be4:	fc 01       	movw	r30, r24

class SPI{
public:
	static void begin(uint8_t clock = SPI_CLOCK_DIV2){
		//SPI_DIR |= SS;
		SPI_DIR |= SPI_MOSI | SPI_SCK | SPI_SS; //Not sure why, but SS pin requires to be set as output even when not being used.
     be6:	94 b1       	in	r25, 0x04	; 4
     be8:	97 60       	ori	r25, 0x07	; 7
     bea:	94 b9       	out	0x04, r25	; 4
		SPI_DIR &= ~(SPI_MISO);
     bec:	23 98       	cbi	0x04, 3	; 4
		//disableCS();

		SPSR |= (clock >> 2);
     bee:	9d b5       	in	r25, 0x2d	; 45
     bf0:	91 60       	ori	r25, 0x01	; 1
     bf2:	9d bd       	out	0x2d, r25	; 45
		SPCR |= _BV(MSTR) | _BV(SPE) | (clock & 0x03);
     bf4:	9c b5       	in	r25, 0x2c	; 44
     bf6:	90 65       	ori	r25, 0x50	; 80
     bf8:	9c bd       	out	0x2c, r25	; 44
	SPI.begin(SPI_CLOCK_DIV2);

	SetOutput(csDDR, selectPin);
     bfa:	80 81       	ld	r24, Z
     bfc:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <_ZL9selectPin>
     c00:	98 2b       	or	r25, r24
     c02:	90 83       	st	Z, r25
	disableChip();
     c04:	46 cf       	rjmp	.-372    	; 0xa92 <_ZL11disableChipv>
     c06:	08 95       	ret

00000c08 <_ZN8ENC28J6010initializeEjPKhRVhS3_h>:
    writeReg(MIWR, data);
    while (readRegByte(MISTAT) & MISTAT_BUSY)
        ;
}

uint8_t ENC28J60::initialize (uint16_t size, const uint8_t* macaddr, Register& csDDR, Register& csPort, uint8_t csPin) {
     c08:	0f 93       	push	r16
     c0a:	cf 93       	push	r28
     c0c:	df 93       	push	r29
     c0e:	eb 01       	movw	r28, r22
    bufferSize = size;
     c10:	90 93 02 03 	sts	0x0302, r25	; 0x800302 <_ZN8ENC28J6010bufferSizeE+0x1>
     c14:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <_ZN8ENC28J6010bufferSizeE>
	selectPin = csPin;
     c18:	00 93 fd 02 	sts	0x02FD, r16	; 0x8002fd <_ZL9selectPin>
	selectPort = &csPort;
     c1c:	30 93 ff 02 	sts	0x02FF, r19	; 0x8002ff <_ZL10selectPort+0x1>
     c20:	20 93 fe 02 	sts	0x02FE, r18	; 0x8002fe <_ZL10selectPort>
    initSPI(csDDR);
     c24:	ca 01       	movw	r24, r20
     c26:	de df       	rcall	.-68     	; 0xbe4 <_ZN8ENC28J607initSPIERVh>

    writeOp(ENC28J60_SOFT_RESET, 0, ENC28J60_SOFT_RESET);
     c28:	4f ef       	ldi	r20, 0xFF	; 255
     c2a:	60 e0       	ldi	r22, 0x00	; 0
     c2c:	8f ef       	ldi	r24, 0xFF	; 255
     c2e:	5b df       	rcall	.-330    	; 0xae6 <_ZL7writeOphhh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c30:	8f e3       	ldi	r24, 0x3F	; 63
     c32:	9f e1       	ldi	r25, 0x1F	; 31
     c34:	01 97       	sbiw	r24, 0x01	; 1
     c36:	f1 f7       	brne	.-4      	; 0xc34 <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0x2c>
     c38:	00 c0       	rjmp	.+0      	; 0xc3a <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0x32>
     c3a:	00 00       	nop
	_delay_ms(2);
    while (!readOp(ENC28J60_READ_CTRL_REG, ESTAT) & ESTAT_CLKRDY)
     c3c:	6d e1       	ldi	r22, 0x1D	; 29
     c3e:	80 e0       	ldi	r24, 0x00	; 0
     c40:	32 df       	rcall	.-412    	; 0xaa6 <_ZL6readOphh>
     c42:	88 23       	and	r24, r24
     c44:	d9 f3       	breq	.-10     	; 0xc3c <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0x34>
        ;

    writeReg(ERXST, RXSTART_INIT);
     c46:	60 e0       	ldi	r22, 0x00	; 0
     c48:	70 e0       	ldi	r23, 0x00	; 0
     c4a:	88 e0       	ldi	r24, 0x08	; 8
     c4c:	bf df       	rcall	.-130    	; 0xbcc <_ZL8writeReghj>
    writeReg(ERXRDPT, RXSTART_INIT);
     c4e:	60 e0       	ldi	r22, 0x00	; 0
     c50:	70 e0       	ldi	r23, 0x00	; 0
     c52:	8c e0       	ldi	r24, 0x0C	; 12
     c54:	bb df       	rcall	.-138    	; 0xbcc <_ZL8writeReghj>
    writeReg(ERXND, RXSTOP_INIT);
     c56:	6f ef       	ldi	r22, 0xFF	; 255
     c58:	7b e0       	ldi	r23, 0x0B	; 11
     c5a:	8a e0       	ldi	r24, 0x0A	; 10
     c5c:	b7 df       	rcall	.-146    	; 0xbcc <_ZL8writeReghj>
    writeReg(ETXST, TXSTART_INIT);
     c5e:	60 e0       	ldi	r22, 0x00	; 0
     c60:	7c e0       	ldi	r23, 0x0C	; 12
     c62:	84 e0       	ldi	r24, 0x04	; 4
     c64:	b3 df       	rcall	.-154    	; 0xbcc <_ZL8writeReghj>
    writeReg(ETXND, TXSTOP_INIT);
     c66:	6f ef       	ldi	r22, 0xFF	; 255
     c68:	71 e1       	ldi	r23, 0x11	; 17
     c6a:	86 e0       	ldi	r24, 0x06	; 6
     c6c:	af df       	rcall	.-162    	; 0xbcc <_ZL8writeReghj>

    writeRegByte(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN|ERXFCON_PMEN|ERXFCON_BCEN);
     c6e:	61 eb       	ldi	r22, 0xB1	; 177
     c70:	88 e3       	ldi	r24, 0x38	; 56
     c72:	a0 df       	rcall	.-192    	; 0xbb4 <_ZL12writeRegBytehh>
    writeReg(EPMM0, 0x303f);
     c74:	6f e3       	ldi	r22, 0x3F	; 63
     c76:	70 e3       	ldi	r23, 0x30	; 48
     c78:	88 e2       	ldi	r24, 0x28	; 40
     c7a:	a8 df       	rcall	.-176    	; 0xbcc <_ZL8writeReghj>
    writeReg(EPMCS, 0xf7f9);
     c7c:	69 ef       	ldi	r22, 0xF9	; 249
     c7e:	77 ef       	ldi	r23, 0xF7	; 247
     c80:	80 e3       	ldi	r24, 0x30	; 48
     c82:	a4 df       	rcall	.-184    	; 0xbcc <_ZL8writeReghj>
    writeRegByte(MACON1, MACON1_MARXEN);
     c84:	61 e0       	ldi	r22, 0x01	; 1
     c86:	80 ec       	ldi	r24, 0xC0	; 192
     c88:	95 df       	rcall	.-214    	; 0xbb4 <_ZL12writeRegBytehh>
    writeOp(ENC28J60_BIT_FIELD_SET, MACON3,
            MACON3_PADCFG0|MACON3_TXCRCEN|MACON3_FRMLNEN);
     c8a:	42 e3       	ldi	r20, 0x32	; 50
     c8c:	62 ec       	ldi	r22, 0xC2	; 194
     c8e:	80 e8       	ldi	r24, 0x80	; 128
     c90:	2a df       	rcall	.-428    	; 0xae6 <_ZL7writeOphhh>
    writeReg(MAIPG, 0x0C12);
     c92:	62 e1       	ldi	r22, 0x12	; 18
     c94:	7c e0       	ldi	r23, 0x0C	; 12
     c96:	86 ec       	ldi	r24, 0xC6	; 198
    writeRegByte(MABBIPG, 0x12);
     c98:	99 df       	rcall	.-206    	; 0xbcc <_ZL8writeReghj>
     c9a:	62 e1       	ldi	r22, 0x12	; 18
     c9c:	84 ec       	ldi	r24, 0xC4	; 196
    writeReg(MAMXFL, MAX_FRAMELEN);
     c9e:	8a df       	rcall	.-236    	; 0xbb4 <_ZL12writeRegBytehh>
     ca0:	6c ed       	ldi	r22, 0xDC	; 220
     ca2:	75 e0       	ldi	r23, 0x05	; 5
    writeRegByte(MAADR5, macaddr[0]);
     ca4:	8a ec       	ldi	r24, 0xCA	; 202
     ca6:	92 df       	rcall	.-220    	; 0xbcc <_ZL8writeReghj>
     ca8:	68 81       	ld	r22, Y
    writeRegByte(MAADR4, macaddr[1]);
     caa:	84 ee       	ldi	r24, 0xE4	; 228
     cac:	83 df       	rcall	.-250    	; 0xbb4 <_ZL12writeRegBytehh>
     cae:	69 81       	ldd	r22, Y+1	; 0x01
    writeRegByte(MAADR3, macaddr[2]);
     cb0:	85 ee       	ldi	r24, 0xE5	; 229
     cb2:	80 df       	rcall	.-256    	; 0xbb4 <_ZL12writeRegBytehh>
    writeRegByte(MAADR2, macaddr[3]);
     cb4:	6a 81       	ldd	r22, Y+2	; 0x02
     cb6:	82 ee       	ldi	r24, 0xE2	; 226
     cb8:	7d df       	rcall	.-262    	; 0xbb4 <_ZL12writeRegBytehh>
    writeRegByte(MAADR1, macaddr[4]);
     cba:	6b 81       	ldd	r22, Y+3	; 0x03
     cbc:	83 ee       	ldi	r24, 0xE3	; 227
     cbe:	7a df       	rcall	.-268    	; 0xbb4 <_ZL12writeRegBytehh>
    writeRegByte(MAADR0, macaddr[5]);
     cc0:	6c 81       	ldd	r22, Y+4	; 0x04
     cc2:	80 ee       	ldi	r24, 0xE0	; 224
     cc4:	77 df       	rcall	.-274    	; 0xbb4 <_ZL12writeRegBytehh>
    writeRegByte(MICMD, 0x00);
    return readRegByte(MIRD+1);
}

static void writePhy (uint8_t address, uint16_t data) {
    writeRegByte(MIREGADR, address);
     cc6:	6d 81       	ldd	r22, Y+5	; 0x05
     cc8:	81 ee       	ldi	r24, 0xE1	; 225
     cca:	74 df       	rcall	.-280    	; 0xbb4 <_ZL12writeRegBytehh>
    writeReg(MIWR, data);
     ccc:	60 e1       	ldi	r22, 0x10	; 16
     cce:	84 ed       	ldi	r24, 0xD4	; 212
     cd0:	71 df       	rcall	.-286    	; 0xbb4 <_ZL12writeRegBytehh>
     cd2:	60 e0       	ldi	r22, 0x00	; 0
     cd4:	71 e0       	ldi	r23, 0x01	; 1
    while (readRegByte(MISTAT) & MISTAT_BUSY)
     cd6:	86 ed       	ldi	r24, 0xD6	; 214
     cd8:	79 df       	rcall	.-270    	; 0xbcc <_ZL8writeReghj>
     cda:	8a ee       	ldi	r24, 0xEA	; 234
     cdc:	63 df       	rcall	.-314    	; 0xba4 <_ZL11readRegByteh>
     cde:	80 fd       	sbrc	r24, 0
    writeRegByte(MAADR3, macaddr[2]);
    writeRegByte(MAADR2, macaddr[3]);
    writeRegByte(MAADR1, macaddr[4]);
    writeRegByte(MAADR0, macaddr[5]);
    writePhy(PHCON2, PHCON2_HDLDIS);
    SetBank(ECON1);
     ce0:	fc cf       	rjmp	.-8      	; 0xcda <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0xd2>
     ce2:	8f e1       	ldi	r24, 0x1F	; 31
     ce4:	3a df       	rcall	.-396    	; 0xb5a <_ZL7SetBankh>
    writeOp(ENC28J60_BIT_FIELD_SET, EIE, EIE_INTIE|EIE_PKTIE);
     ce6:	40 ec       	ldi	r20, 0xC0	; 192
     ce8:	6b e1       	ldi	r22, 0x1B	; 27
     cea:	80 e8       	ldi	r24, 0x80	; 128
     cec:	fc de       	rcall	.-520    	; 0xae6 <_ZL7writeOphhh>
     cee:	44 e0       	ldi	r20, 0x04	; 4
    writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN);
     cf0:	6f e1       	ldi	r22, 0x1F	; 31
     cf2:	80 e8       	ldi	r24, 0x80	; 128
     cf4:	f8 de       	rcall	.-528    	; 0xae6 <_ZL7writeOphhh>
     cf6:	82 e7       	ldi	r24, 0x72	; 114
     cf8:	55 df       	rcall	.-342    	; 0xba4 <_ZL11readRegByteh>

    uint8_t rev = readRegByte(EREVID);
     cfa:	86 30       	cpi	r24, 0x06	; 6
     cfc:	08 f0       	brcs	.+2      	; 0xd00 <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0xf8>
     cfe:	8f 5f       	subi	r24, 0xFF	; 255
    // microchip forgot to step the number on the silicon when they
    // released the revision B7. 6 is now rev B7. We still have
    // to see what they do when they release B8. At the moment
    // there is no B8 out yet
    if (rev > 5) ++rev;
     d00:	df 91       	pop	r29
     d02:	cf 91       	pop	r28
     d04:	0f 91       	pop	r16
    return rev;
}
     d06:	08 95       	ret

00000d08 <_ZN8ENC28J608isLinkUpEv>:
     d08:	61 e1       	ldi	r22, 0x11	; 17
     d0a:	84 ed       	ldi	r24, 0xD4	; 212
     d0c:	53 df       	rcall	.-346    	; 0xbb4 <_ZL12writeRegBytehh>
    writeRegByte(address + 1, data >> 8);
}

static uint16_t readPhyByte (uint8_t address) {
    writeRegByte(MIREGADR, address);
    writeRegByte(MICMD, MICMD_MIIRD);
     d0e:	61 e0       	ldi	r22, 0x01	; 1
     d10:	82 ed       	ldi	r24, 0xD2	; 210
     d12:	50 df       	rcall	.-352    	; 0xbb4 <_ZL12writeRegBytehh>
    while (readRegByte(MISTAT) & MISTAT_BUSY)
     d14:	8a ee       	ldi	r24, 0xEA	; 234
     d16:	46 df       	rcall	.-372    	; 0xba4 <_ZL11readRegByteh>
     d18:	80 fd       	sbrc	r24, 0
     d1a:	fc cf       	rjmp	.-8      	; 0xd14 <_ZN8ENC28J608isLinkUpEv+0xc>
        ;
    writeRegByte(MICMD, 0x00);
     d1c:	60 e0       	ldi	r22, 0x00	; 0
     d1e:	82 ed       	ldi	r24, 0xD2	; 210
     d20:	49 df       	rcall	.-366    	; 0xbb4 <_ZL12writeRegBytehh>
    return readRegByte(MIRD+1);
     d22:	89 ed       	ldi	r24, 0xD9	; 217
     d24:	3f df       	rcall	.-386    	; 0xba4 <_ZL11readRegByteh>
     d26:	82 fb       	bst	r24, 2
    return rev;
}

bool ENC28J60::isLinkUp() {
    return (readPhyByte(PHSTAT2) >> 2) & 1;
}
     d28:	88 27       	eor	r24, r24
     d2a:	80 f9       	bld	r24, 0
     d2c:	08 95       	ret

00000d2e <_ZN8ENC28J6010packetSendEj>:
     d2e:	af 92       	push	r10

struct transmit_status_vector {
    uint8_t bytes[7];
};

void ENC28J60::packetSend(uint16_t len) {
     d30:	bf 92       	push	r11
     d32:	cf 92       	push	r12
     d34:	df 92       	push	r13
     d36:	ef 92       	push	r14
     d38:	ff 92       	push	r15
     d3a:	0f 93       	push	r16
     d3c:	1f 93       	push	r17
     d3e:	cf 93       	push	r28
     d40:	df 93       	push	r29
     d42:	7c 01       	movw	r14, r24
        writeOp(ENC28J60_BIT_FIELD_CLR, EIR, EIR_TXERIF|EIR_TXIF);

        // prepare new transmission
        if (retry == 0) {
            writeReg(EWRPT, TXSTART_INIT);
            writeReg(ETXND, TXSTART_INIT+len);
     d44:	6c 01       	movw	r12, r24
     d46:	84 ef       	ldi	r24, 0xF4	; 244
     d48:	d8 1a       	sub	r13, r24

	static void write(const void *buf, uint16_t nbyte){
		if(nbyte == 0) return;
		
		const uint8_t* buff = (const uint8_t*)(buf);
		SPDR = *buff;
     d4a:	0f 2e       	mov	r0, r31
     d4c:	f3 e0       	ldi	r31, 0x03	; 3
     d4e:	af 2e       	mov	r10, r31
     d50:	f3 e0       	ldi	r31, 0x03	; 3
     d52:	bf 2e       	mov	r11, r31
     d54:	f0 2d       	mov	r31, r0
     d56:	87 01       	movw	r16, r14
     d58:	0d 5f       	subi	r16, 0xFD	; 253
     d5a:	1c 4f       	sbci	r17, 0xFC	; 252
        // the Microchip TCP/IP stack implementation used to first check
        // whether TXERIF is set and only then reset the transmit logic
        // but this has been changed in later versions; possibly they
        // have a reason for this; they don't mention this in the errata
        // sheet
        writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRST);
     d5c:	40 e8       	ldi	r20, 0x80	; 128
     d5e:	6f e1       	ldi	r22, 0x1F	; 31
     d60:	80 e8       	ldi	r24, 0x80	; 128
     d62:	c1 de       	rcall	.-638    	; 0xae6 <_ZL7writeOphhh>
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRST);
     d64:	40 e8       	ldi	r20, 0x80	; 128
     d66:	6f e1       	ldi	r22, 0x1F	; 31
     d68:	80 ea       	ldi	r24, 0xA0	; 160
     d6a:	bd de       	rcall	.-646    	; 0xae6 <_ZL7writeOphhh>
        writeOp(ENC28J60_BIT_FIELD_CLR, EIR, EIR_TXERIF|EIR_TXIF);
     d6c:	4a e0       	ldi	r20, 0x0A	; 10
     d6e:	6c e1       	ldi	r22, 0x1C	; 28
     d70:	80 ea       	ldi	r24, 0xA0	; 160
     d72:	b9 de       	rcall	.-654    	; 0xae6 <_ZL7writeOphhh>

        // prepare new transmission
        if (retry == 0) {
            writeReg(EWRPT, TXSTART_INIT);
     d74:	60 e0       	ldi	r22, 0x00	; 0
     d76:	7c e0       	ldi	r23, 0x0C	; 12
     d78:	82 e0       	ldi	r24, 0x02	; 2
            writeReg(ETXND, TXSTART_INIT+len);
     d7a:	28 df       	rcall	.-432    	; 0xbcc <_ZL8writeReghj>
     d7c:	b6 01       	movw	r22, r12
     d7e:	86 e0       	ldi	r24, 0x06	; 6
            writeOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
     d80:	25 df       	rcall	.-438    	; 0xbcc <_ZL8writeReghj>
     d82:	40 e0       	ldi	r20, 0x00	; 0
     d84:	60 e0       	ldi	r22, 0x00	; 0
     d86:	8a e7       	ldi	r24, 0x7A	; 122
     d88:	ae de       	rcall	.-676    	; 0xae6 <_ZL7writeOphhh>
    }
    disableChip();
}

static void writeBuf(uint16_t len, const uint8_t* data) {
    enableChip();
     d8a:	78 de       	rcall	.-784    	; 0xa7c <_ZL10enableChipv>
     d8c:	e1 14       	cp	r14, r1
    if (len != 0) {
     d8e:	f1 04       	cpc	r15, r1
     d90:	e1 f0       	breq	.+56     	; 0xdca <_ZN8ENC28J6010packetSendEj+0x9c>
     d92:	8a e7       	ldi	r24, 0x7A	; 122
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     d94:	8e bd       	out	0x2e, r24	; 46
     d96:	00 00       	nop
		asm volatile("nop");
     d98:	0d b4       	in	r0, 0x2d	; 45
		while(!(SPSR & _BV(SPIF)));
     d9a:	07 fe       	sbrs	r0, 7
     d9c:	fd cf       	rjmp	.-6      	; 0xd98 <_ZN8ENC28J6010packetSendEj+0x6a>
     d9e:	f5 01       	movw	r30, r10

	static void write(const void *buf, uint16_t nbyte){
		if(nbyte == 0) return;
		
		const uint8_t* buff = (const uint8_t*)(buf);
		SPDR = *buff;
     da0:	80 81       	ld	r24, Z
     da2:	8e bd       	out	0x2e, r24	; 46
     da4:	f1 e0       	ldi	r31, 0x01	; 1
		while(--nbyte){
     da6:	ef 16       	cp	r14, r31
     da8:	f1 04       	cpc	r15, r1
     daa:	59 f0       	breq	.+22     	; 0xdc2 <_ZN8ENC28J6010packetSendEj+0x94>
     dac:	e4 e0       	ldi	r30, 0x04	; 4
     dae:	f3 e0       	ldi	r31, 0x03	; 3
     db0:	00 00       	nop
			asm volatile("nop");
     db2:	0d b4       	in	r0, 0x2d	; 45
			while (!(SPSR & _BV(SPIF))) ;
     db4:	07 fe       	sbrs	r0, 7
     db6:	fd cf       	rjmp	.-6      	; 0xdb2 <_ZN8ENC28J6010packetSendEj+0x84>
     db8:	81 91       	ld	r24, Z+
			SPDR = *++buff;
     dba:	8e bd       	out	0x2e, r24	; 46
     dbc:	e0 17       	cp	r30, r16
	static void write(const void *buf, uint16_t nbyte){
		if(nbyte == 0) return;
		
		const uint8_t* buff = (const uint8_t*)(buf);
		SPDR = *buff;
		while(--nbyte){
     dbe:	f1 07       	cpc	r31, r17
     dc0:	b9 f7       	brne	.-18     	; 0xdb0 <_ZN8ENC28J6010packetSendEj+0x82>
			asm volatile("nop");
			while (!(SPSR & _BV(SPIF))) ;
			SPDR = *++buff;
		}
		asm volatile("nop");
     dc2:	00 00       	nop
		while (!(SPSR & _BV(SPIF))) ;
     dc4:	0d b4       	in	r0, 0x2d	; 45
     dc6:	07 fe       	sbrs	r0, 7
        SPI.write8(ENC28J60_WRITE_BUF_MEM);

        SPI.write(data, len);
    }
    disableChip();
     dc8:	fd cf       	rjmp	.-6      	; 0xdc4 <_ZN8ENC28J6010packetSendEj+0x96>
            writeOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
            writeBuf(len, buffer);
        }

        // initiate transmission
        writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
     dca:	63 de       	rcall	.-826    	; 0xa92 <_ZL11disableChipv>
     dcc:	48 e0       	ldi	r20, 0x08	; 8
     dce:	6f e1       	ldi	r22, 0x1F	; 31
     dd0:	80 e8       	ldi	r24, 0x80	; 128
     dd2:	89 de       	rcall	.-750    	; 0xae6 <_ZL7writeOphhh>
        // wait until transmission has finished; referring to the data sheet and
        // to the errata (Errata Issue 13; Example 1) you only need to wait until either
        // TXIF or TXERIF gets set; however this leads to hangs; apparently Microchip
        // realized this and in later implementations of their tcp/ip stack they introduced
        // a counter to avoid hangs; of course they didn't update the errata sheet
        uint16_t count = 0;
     dd4:	c0 e0       	ldi	r28, 0x00	; 0
     dd6:	d0 e0       	ldi	r29, 0x00	; 0
        while ((readRegByte(EIR) & (EIR_TXIF | EIR_TXERIF)) == 0 && ++count < 1000U)
     dd8:	8c e1       	ldi	r24, 0x1C	; 28
     dda:	e4 de       	rcall	.-568    	; 0xba4 <_ZL11readRegByteh>
     ddc:	8a 70       	andi	r24, 0x0A	; 10
     dde:	31 f4       	brne	.+12     	; 0xdec <_ZN8ENC28J6010packetSendEj+0xbe>
     de0:	21 96       	adiw	r28, 0x01	; 1
     de2:	c8 3e       	cpi	r28, 0xE8	; 232
     de4:	83 e0       	ldi	r24, 0x03	; 3
     de6:	d8 07       	cpc	r29, r24
     de8:	b9 f7       	brne	.-18     	; 0xdd8 <_ZN8ENC28J6010packetSendEj+0xaa>
     dea:	0c c0       	rjmp	.+24     	; 0xe04 <_ZN8ENC28J6010packetSendEj+0xd6>
            ;

        if (!(readRegByte(EIR) & EIR_TXERIF) && count < 1000U) {
     dec:	8c e1       	ldi	r24, 0x1C	; 28
     dee:	da de       	rcall	.-588    	; 0xba4 <_ZL11readRegByteh>
     df0:	81 fd       	sbrc	r24, 1
     df2:	03 c0       	rjmp	.+6      	; 0xdfa <_ZN8ENC28J6010packetSendEj+0xcc>
     df4:	c8 3e       	cpi	r28, 0xE8	; 232
     df6:	d3 40       	sbci	r29, 0x03	; 3
            // no error; start new transmission
            break;
        }

        // cancel previous transmission if stuck
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRTS);
     df8:	40 f0       	brcs	.+16     	; 0xe0a <_ZN8ENC28J6010packetSendEj+0xdc>
     dfa:	48 e0       	ldi	r20, 0x08	; 8
     dfc:	6f e1       	ldi	r22, 0x1F	; 31
     dfe:	80 ea       	ldi	r24, 0xA0	; 160
     e00:	72 de       	rcall	.-796    	; 0xae6 <_ZL7writeOphhh>
};

void ENC28J60::packetSend(uint16_t len) {
    uint8_t retry = 0;

    while (1) {
     e02:	ac cf       	rjmp	.-168    	; 0xd5c <_ZN8ENC28J6010packetSendEj+0x2e>
        // a counter to avoid hangs; of course they didn't update the errata sheet
        uint16_t count = 0;
        while ((readRegByte(EIR) & (EIR_TXIF | EIR_TXERIF)) == 0 && ++count < 1000U)
            ;

        if (!(readRegByte(EIR) & EIR_TXERIF) && count < 1000U) {
     e04:	8c e1       	ldi	r24, 0x1C	; 28
     e06:	ce de       	rcall	.-612    	; 0xba4 <_ZL11readRegByteh>
     e08:	f8 cf       	rjmp	.-16     	; 0xdfa <_ZN8ENC28J6010packetSendEj+0xcc>
     e0a:	df 91       	pop	r29
        }

        // cancel previous transmission if stuck
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRTS);
    }
}
     e0c:	cf 91       	pop	r28
     e0e:	1f 91       	pop	r17
     e10:	0f 91       	pop	r16
     e12:	ff 90       	pop	r15
     e14:	ef 90       	pop	r14
     e16:	df 90       	pop	r13
     e18:	cf 90       	pop	r12
     e1a:	bf 90       	pop	r11
     e1c:	af 90       	pop	r10
     e1e:	08 95       	ret

00000e20 <_ZN8ENC28J6013packetReceiveEv>:
     e20:	0f 93       	push	r16


uint16_t ENC28J60::packetReceive() {
     e22:	1f 93       	push	r17
     e24:	cf 93       	push	r28
     e26:	df 93       	push	r29
     e28:	00 d0       	rcall	.+0      	; 0xe2a <_ZN8ENC28J6013packetReceiveEv+0xa>
     e2a:	00 d0       	rcall	.+0      	; 0xe2c <_ZN8ENC28J6013packetReceiveEv+0xc>
     e2c:	cd b7       	in	r28, 0x3d	; 61
     e2e:	de b7       	in	r29, 0x3e	; 62
    static uint16_t gNextPacketPtr = RXSTART_INIT;
    static bool     unreleasedPacket = false;
    uint16_t len = 0;

    if (unreleasedPacket) {
     e30:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <_ZZN8ENC28J6013packetReceiveEvE16unreleasedPacket>
     e34:	88 23       	and	r24, r24
     e36:	91 f0       	breq	.+36     	; 0xe5c <_ZN8ENC28J6013packetReceiveEv+0x3c>
        if (gNextPacketPtr == 0)
     e38:	60 91 fa 02 	lds	r22, 0x02FA	; 0x8002fa <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr>
     e3c:	70 91 fb 02 	lds	r23, 0x02FB	; 0x8002fb <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr+0x1>
     e40:	61 15       	cp	r22, r1
     e42:	71 05       	cpc	r23, r1
     e44:	29 f4       	brne	.+10     	; 0xe50 <_ZN8ENC28J6013packetReceiveEv+0x30>
            writeReg(ERXRDPT, RXSTOP_INIT);
     e46:	6f ef       	ldi	r22, 0xFF	; 255
     e48:	7b e0       	ldi	r23, 0x0B	; 11
     e4a:	8c e0       	ldi	r24, 0x0C	; 12
     e4c:	bf de       	rcall	.-642    	; 0xbcc <_ZL8writeReghj>
     e4e:	04 c0       	rjmp	.+8      	; 0xe58 <_ZN8ENC28J6013packetReceiveEv+0x38>
        else
            writeReg(ERXRDPT, gNextPacketPtr - 1);
     e50:	61 50       	subi	r22, 0x01	; 1
     e52:	71 09       	sbc	r23, r1
     e54:	8c e0       	ldi	r24, 0x0C	; 12
     e56:	ba de       	rcall	.-652    	; 0xbcc <_ZL8writeReghj>
        unreleasedPacket = false;
     e58:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <_ZZN8ENC28J6013packetReceiveEvE16unreleasedPacket>
    }

    if (readRegByte(EPKTCNT) > 0) {
     e5c:	89 e3       	ldi	r24, 0x39	; 57
     e5e:	a2 de       	rcall	.-700    	; 0xba4 <_ZL11readRegByteh>
     e60:	88 23       	and	r24, r24
     e62:	a9 f1       	breq	.+106    	; 0xece <_ZN8ENC28J6013packetReceiveEv+0xae>
        writeReg(ERDPT, gNextPacketPtr);
     e64:	60 91 fa 02 	lds	r22, 0x02FA	; 0x8002fa <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr>
     e68:	70 91 fb 02 	lds	r23, 0x02FB	; 0x8002fb <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr+0x1>
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	ae de       	rcall	.-676    	; 0xbcc <_ZL8writeReghj>
            uint16_t nextPacket;
            uint16_t byteCount;
            uint16_t status;
        } header;

        readBuf(sizeof header, (uint8_t*) &header);
     e70:	be 01       	movw	r22, r28
     e72:	6f 5f       	subi	r22, 0xFF	; 255
     e74:	7f 4f       	sbci	r23, 0xFF	; 255
     e76:	86 e0       	ldi	r24, 0x06	; 6
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	4d de       	rcall	.-870    	; 0xb16 <_ZL7readBufjPh>

        gNextPacketPtr  = header.nextPacket;
     e7c:	89 81       	ldd	r24, Y+1	; 0x01
     e7e:	9a 81       	ldd	r25, Y+2	; 0x02
     e80:	90 93 fb 02 	sts	0x02FB, r25	; 0x8002fb <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr+0x1>
     e84:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr>
        len = header.byteCount - 4; //remove the CRC count
        if (len>bufferSize-1)
            len=bufferSize-1;
        if ((header.status & 0x80)==0)
     e88:	8d 81       	ldd	r24, Y+5	; 0x05
     e8a:	87 ff       	sbrs	r24, 7
     e8c:	12 c0       	rjmp	.+36     	; 0xeb2 <_ZN8ENC28J6013packetReceiveEv+0x92>

        readBuf(sizeof header, (uint8_t*) &header);

        gNextPacketPtr  = header.nextPacket;
        len = header.byteCount - 4; //remove the CRC count
        if (len>bufferSize-1)
     e8e:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <_ZN8ENC28J6010bufferSizeE>
     e92:	90 91 02 03 	lds	r25, 0x0302	; 0x800302 <_ZN8ENC28J6010bufferSizeE+0x1>
     e96:	01 97       	sbiw	r24, 0x01	; 1
        } header;

        readBuf(sizeof header, (uint8_t*) &header);

        gNextPacketPtr  = header.nextPacket;
        len = header.byteCount - 4; //remove the CRC count
     e98:	0b 81       	ldd	r16, Y+3	; 0x03
     e9a:	1c 81       	ldd	r17, Y+4	; 0x04
     e9c:	04 50       	subi	r16, 0x04	; 4
     e9e:	11 09       	sbc	r17, r1
     ea0:	80 17       	cp	r24, r16
     ea2:	91 07       	cpc	r25, r17
     ea4:	08 f4       	brcc	.+2      	; 0xea8 <_ZN8ENC28J6013packetReceiveEv+0x88>
        if (len>bufferSize-1)
            len=bufferSize-1;
        if ((header.status & 0x80)==0)
            len = 0;
        else
            readBuf(len, buffer);
     ea6:	8c 01       	movw	r16, r24
     ea8:	63 e0       	ldi	r22, 0x03	; 3
     eaa:	73 e0       	ldi	r23, 0x03	; 3
     eac:	c8 01       	movw	r24, r16
     eae:	33 de       	rcall	.-922    	; 0xb16 <_ZL7readBufjPh>
     eb0:	02 c0       	rjmp	.+4      	; 0xeb6 <_ZN8ENC28J6013packetReceiveEv+0x96>
        gNextPacketPtr  = header.nextPacket;
        len = header.byteCount - 4; //remove the CRC count
        if (len>bufferSize-1)
            len=bufferSize-1;
        if ((header.status & 0x80)==0)
            len = 0;
     eb2:	00 e0       	ldi	r16, 0x00	; 0
     eb4:	10 e0       	ldi	r17, 0x00	; 0
        else
            readBuf(len, buffer);
        buffer[len] = 0;
     eb6:	f8 01       	movw	r30, r16
     eb8:	ed 5f       	subi	r30, 0xFD	; 253
     eba:	fc 4f       	sbci	r31, 0xFC	; 252
     ebc:	10 82       	st	Z, r1
        unreleasedPacket = true;
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <_ZZN8ENC28J6013packetReceiveEvE16unreleasedPacket>

        writeOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
     ec4:	40 e4       	ldi	r20, 0x40	; 64
     ec6:	6e e1       	ldi	r22, 0x1E	; 30
     ec8:	80 e8       	ldi	r24, 0x80	; 128
     eca:	0d de       	rcall	.-998    	; 0xae6 <_ZL7writeOphhh>
     ecc:	02 c0       	rjmp	.+4      	; 0xed2 <_ZN8ENC28J6013packetReceiveEv+0xb2>


uint16_t ENC28J60::packetReceive() {
    static uint16_t gNextPacketPtr = RXSTART_INIT;
    static bool     unreleasedPacket = false;
    uint16_t len = 0;
     ece:	00 e0       	ldi	r16, 0x00	; 0
     ed0:	10 e0       	ldi	r17, 0x00	; 0
        unreleasedPacket = true;

        writeOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
    }
    return len;
}
     ed2:	c8 01       	movw	r24, r16
     ed4:	26 96       	adiw	r28, 0x06	; 6
     ed6:	0f b6       	in	r0, 0x3f	; 63
     ed8:	f8 94       	cli
     eda:	de bf       	out	0x3e, r29	; 62
     edc:	0f be       	out	0x3f, r0	; 63
     ede:	cd bf       	out	0x3d, r28	; 61
     ee0:	df 91       	pop	r29
     ee2:	cf 91       	pop	r28
     ee4:	1f 91       	pop	r17
     ee6:	0f 91       	pop	r16
     ee8:	08 95       	ret

00000eea <_ZN9EtherCard5beginEPKhRVhS3_h>:
uint16_t EtherCard::delaycnt = 0; //request gateway ARP lookup

uint8_t Ethernet::buffer[ETHER_CARD_BUFFER_SIZE]; // tcp/ip send and receive buffer

uint8_t EtherCard::begin (const uint8_t* macaddr,
                          Register& csDDR, Register& csPort, uint8_t csPin) {
     eea:	ef 92       	push	r14
     eec:	ff 92       	push	r15
     eee:	0f 93       	push	r16
     ef0:	cf 93       	push	r28
     ef2:	df 93       	push	r29
     ef4:	eb 01       	movw	r28, r22
     ef6:	7a 01       	movw	r14, r20
     ef8:	02 2f       	mov	r16, r18

    copyMac(mymac, macaddr);
     efa:	bc 01       	movw	r22, r24
     efc:	8d e1       	ldi	r24, 0x1D	; 29
     efe:	95 e0       	ldi	r25, 0x05	; 5
     f00:	c9 d3       	rcall	.+1938   	; 0x1694 <_ZN9EtherCard7copyMacEPhPKh>
    return initialize(ETHER_CARD_BUFFER_SIZE, mymac, csDDR, csPort, csPin);
     f02:	97 01       	movw	r18, r14
     f04:	ae 01       	movw	r20, r28
     f06:	6d e1       	ldi	r22, 0x1D	; 29
     f08:	75 e0       	ldi	r23, 0x05	; 5
     f0a:	80 e0       	ldi	r24, 0x00	; 0
     f0c:	92 e0       	ldi	r25, 0x02	; 2
     f0e:	7c de       	rcall	.-776    	; 0xc08 <_ZN8ENC28J6010initializeEjPKhRVhS3_h>
}
     f10:	df 91       	pop	r29
     f12:	cf 91       	pop	r28
     f14:	0f 91       	pop	r16
     f16:	ff 90       	pop	r15
     f18:	ef 90       	pop	r14
     f1a:	08 95       	ret

00000f1c <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_>:

bool EtherCard::staticSetup (const uint8_t* my_ip,
                             const uint8_t* gw_ip,
                             const uint8_t* dns_ip,
                             const uint8_t* mask) {
     f1c:	ef 92       	push	r14
     f1e:	ff 92       	push	r15
     f20:	0f 93       	push	r16
     f22:	1f 93       	push	r17
     f24:	cf 93       	push	r28
     f26:	df 93       	push	r29
     f28:	7b 01       	movw	r14, r22
     f2a:	8a 01       	movw	r16, r20
     f2c:	e9 01       	movw	r28, r18

    if (my_ip != 0)
     f2e:	00 97       	sbiw	r24, 0x00	; 0
     f30:	21 f0       	breq	.+8      	; 0xf3a <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x1e>
        copyIp(myip, my_ip);
     f32:	bc 01       	movw	r22, r24
     f34:	89 e1       	ldi	r24, 0x19	; 25
     f36:	95 e0       	ldi	r25, 0x05	; 5
     f38:	a0 d3       	rcall	.+1856   	; 0x167a <_ZN9EtherCard6copyIpEPhPKh>
    if (gw_ip != 0)
     f3a:	e1 14       	cp	r14, r1
     f3c:	f1 04       	cpc	r15, r1
     f3e:	11 f0       	breq	.+4      	; 0xf44 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x28>
        setGwIp(gw_ip);
     f40:	c7 01       	movw	r24, r14
     f42:	bd d1       	rcall	.+890    	; 0x12be <_ZN9EtherCard7setGwIpEPKh>
    if (dns_ip != 0)
     f44:	01 15       	cp	r16, r1
     f46:	11 05       	cpc	r17, r1
     f48:	21 f0       	breq	.+8      	; 0xf52 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x36>
        copyIp(dnsip, dns_ip);
     f4a:	b8 01       	movw	r22, r16
     f4c:	89 e0       	ldi	r24, 0x09	; 9
     f4e:	95 e0       	ldi	r25, 0x05	; 5
     f50:	94 d3       	rcall	.+1832   	; 0x167a <_ZN9EtherCard6copyIpEPhPKh>
    if(mask != 0)
     f52:	20 97       	sbiw	r28, 0x00	; 0
     f54:	21 f0       	breq	.+8      	; 0xf5e <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x42>
        copyIp(netmask, mask);
     f56:	be 01       	movw	r22, r28
     f58:	85 e1       	ldi	r24, 0x15	; 21
     f5a:	95 e0       	ldi	r25, 0x05	; 5
    updateBroadcastAddress();
     f5c:	8e d3       	rcall	.+1820   	; 0x167a <_ZN9EtherCard6copyIpEPhPKh>
     f5e:	bb d1       	rcall	.+886    	; 0x12d6 <_ZN9EtherCard22updateBroadcastAddressEv>
    delaycnt = 0; //request gateway ARP lookup
     f60:	10 92 04 05 	sts	0x0504, r1	; 0x800504 <_ZN9EtherCard8delaycntE+0x1>
     f64:	10 92 03 05 	sts	0x0503, r1	; 0x800503 <_ZN9EtherCard8delaycntE>
    return true;
}
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	df 91       	pop	r29
     f6c:	cf 91       	pop	r28
     f6e:	1f 91       	pop	r17
     f70:	0f 91       	pop	r16
     f72:	ff 90       	pop	r15
     f74:	ef 90       	pop	r14
     f76:	08 95       	ret

00000f78 <_ZL13fill_checksumhhjh>:
    for(uint8_t i=0; i<IP_LEN; i++)
        broadcastip[i] = myip[i] | ~netmask[i];
}

void EtherCard::registerPingCallback (void (*callback)(uint8_t *srcip)) {
    icmp_cb = callback;
     f78:	cf 92       	push	r12
     f7a:	df 92       	push	r13
     f7c:	ef 92       	push	r14
     f7e:	ff 92       	push	r15
     f80:	cf 93       	push	r28
     f82:	df 93       	push	r29
     f84:	c6 2f       	mov	r28, r22
     f86:	d0 e0       	ldi	r29, 0x00	; 0
     f88:	cd 5f       	subi	r28, 0xFD	; 253
     f8a:	dc 4f       	sbci	r29, 0xFC	; 252
     f8c:	21 30       	cpi	r18, 0x01	; 1
     f8e:	81 f4       	brne	.+32     	; 0xfb0 <_ZL13fill_checksumhhjh+0x38>
     f90:	6a 01       	movw	r12, r20
     f92:	99 e0       	ldi	r25, 0x09	; 9
     f94:	c9 0e       	add	r12, r25
     f96:	d1 1c       	adc	r13, r1
     f98:	e1 2c       	mov	r14, r1
     f9a:	f1 2c       	mov	r15, r1
     f9c:	03 c0       	rjmp	.+6      	; 0xfa4 <_ZL13fill_checksumhhjh+0x2c>
     f9e:	c1 2c       	mov	r12, r1
     fa0:	d1 2c       	mov	r13, r1
     fa2:	76 01       	movw	r14, r12
     fa4:	42 30       	cpi	r20, 0x02	; 2
     fa6:	51 05       	cpc	r21, r1
     fa8:	28 f1       	brcs	.+74     	; 0xff4 <_ZL13fill_checksumhhjh+0x7c>
     faa:	fe 01       	movw	r30, r28
     fac:	da 01       	movw	r26, r20
     fae:	09 c0       	rjmp	.+18     	; 0xfc2 <_ZL13fill_checksumhhjh+0x4a>
     fb0:	22 30       	cpi	r18, 0x02	; 2
     fb2:	a9 f7       	brne	.-22     	; 0xf9e <_ZL13fill_checksumhhjh+0x26>
     fb4:	6a 01       	movw	r12, r20
     fb6:	92 e0       	ldi	r25, 0x02	; 2
     fb8:	c9 1a       	sub	r12, r25
     fba:	d1 08       	sbc	r13, r1
     fbc:	e1 2c       	mov	r14, r1
     fbe:	f1 2c       	mov	r15, r1
     fc0:	f1 cf       	rjmp	.-30     	; 0xfa4 <_ZL13fill_checksumhhjh+0x2c>
     fc2:	20 81       	ld	r18, Z
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	32 2f       	mov	r19, r18
     fc8:	22 27       	eor	r18, r18
     fca:	91 81       	ldd	r25, Z+1	; 0x01
     fcc:	29 2b       	or	r18, r25
     fce:	c2 0e       	add	r12, r18
     fd0:	d3 1e       	adc	r13, r19
     fd2:	e1 1c       	adc	r14, r1
     fd4:	f1 1c       	adc	r15, r1
     fd6:	32 96       	adiw	r30, 0x02	; 2
     fd8:	12 97       	sbiw	r26, 0x02	; 2
     fda:	a2 30       	cpi	r26, 0x02	; 2
     fdc:	b1 05       	cpc	r27, r1
     fde:	88 f7       	brcc	.-30     	; 0xfc2 <_ZL13fill_checksumhhjh+0x4a>
     fe0:	9a 01       	movw	r18, r20
     fe2:	22 50       	subi	r18, 0x02	; 2
     fe4:	31 09       	sbc	r19, r1
     fe6:	2e 7f       	andi	r18, 0xFE	; 254
     fe8:	2e 5f       	subi	r18, 0xFE	; 254
     fea:	3f 4f       	sbci	r19, 0xFF	; 255
     fec:	c2 0f       	add	r28, r18
     fee:	d3 1f       	adc	r29, r19
     ff0:	41 70       	andi	r20, 0x01	; 1
     ff2:	55 27       	eor	r21, r21
     ff4:	45 2b       	or	r20, r21
     ff6:	61 f0       	breq	.+24     	; 0x1010 <_ZL13fill_checksumhhjh+0x98>
     ff8:	48 81       	ld	r20, Y
     ffa:	50 e0       	ldi	r21, 0x00	; 0
     ffc:	60 e0       	ldi	r22, 0x00	; 0
     ffe:	70 e0       	ldi	r23, 0x00	; 0
    1000:	76 2f       	mov	r23, r22
    1002:	65 2f       	mov	r22, r21
    1004:	54 2f       	mov	r21, r20
    1006:	44 27       	eor	r20, r20
    1008:	c4 0e       	add	r12, r20
    100a:	d5 1e       	adc	r13, r21
    100c:	e6 1e       	adc	r14, r22
    100e:	f7 1e       	adc	r15, r23
    1010:	a7 01       	movw	r20, r14
    1012:	66 27       	eor	r22, r22
    1014:	77 27       	eor	r23, r23
    1016:	41 15       	cp	r20, r1
    1018:	51 05       	cpc	r21, r1
    101a:	61 05       	cpc	r22, r1
    101c:	71 05       	cpc	r23, r1
    101e:	71 f0       	breq	.+28     	; 0x103c <_ZL13fill_checksumhhjh+0xc4>
    1020:	ee 24       	eor	r14, r14
    1022:	ff 24       	eor	r15, r15
    1024:	c4 0e       	add	r12, r20
    1026:	d5 1e       	adc	r13, r21
    1028:	e6 1e       	adc	r14, r22
    102a:	f7 1e       	adc	r15, r23
    102c:	a7 01       	movw	r20, r14
    102e:	66 27       	eor	r22, r22
    1030:	77 27       	eor	r23, r23
    1032:	41 15       	cp	r20, r1
    1034:	51 05       	cpc	r21, r1
    1036:	61 05       	cpc	r22, r1
    1038:	71 05       	cpc	r23, r1
    103a:	91 f7       	brne	.-28     	; 0x1020 <_ZL13fill_checksumhhjh+0xa8>
    103c:	c0 94       	com	r12
    103e:	d0 94       	com	r13
    1040:	e8 2f       	mov	r30, r24
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	ed 5f       	subi	r30, 0xFD	; 253
    1046:	fc 4f       	sbci	r31, 0xFC	; 252
    1048:	d0 82       	st	Z, r13
    104a:	c1 82       	std	Z+1, r12	; 0x01
    104c:	df 91       	pop	r29
    104e:	cf 91       	pop	r28
    1050:	ff 90       	pop	r15
    1052:	ef 90       	pop	r14
    1054:	df 90       	pop	r13
    1056:	cf 90       	pop	r12
    1058:	08 95       	ret

0000105a <_ZL6is_lanPKhS0_>:
    105a:	cf 93       	push	r28
    105c:	df 93       	push	r29
    105e:	fc 01       	movw	r30, r24
    1060:	20 81       	ld	r18, Z
    1062:	22 23       	and	r18, r18
    1064:	d1 f0       	breq	.+52     	; 0x109a <_ZL6is_lanPKhS0_+0x40>
    1066:	fb 01       	movw	r30, r22
    1068:	30 81       	ld	r19, Z
    106a:	33 23       	and	r19, r19
    106c:	c1 f0       	breq	.+48     	; 0x109e <_ZL6is_lanPKhS0_+0x44>
    106e:	23 27       	eor	r18, r19
    1070:	30 91 15 05 	lds	r19, 0x0515	; 0x800515 <_ZN9EtherCard7netmaskE>
    1074:	23 23       	and	r18, r19
    1076:	a9 f4       	brne	.+42     	; 0x10a2 <_ZL6is_lanPKhS0_+0x48>
    1078:	dc 01       	movw	r26, r24
    107a:	11 96       	adiw	r26, 0x01	; 1
    107c:	31 96       	adiw	r30, 0x01	; 1
    107e:	c6 e1       	ldi	r28, 0x16	; 22
    1080:	d5 e0       	ldi	r29, 0x05	; 5
    1082:	04 96       	adiw	r24, 0x04	; 4
    1084:	4d 91       	ld	r20, X+
    1086:	21 91       	ld	r18, Z+
    1088:	39 91       	ld	r19, Y+
    108a:	24 27       	eor	r18, r20
    108c:	23 23       	and	r18, r19
    108e:	59 f4       	brne	.+22     	; 0x10a6 <_ZL6is_lanPKhS0_+0x4c>
    1090:	a8 17       	cp	r26, r24
    1092:	b9 07       	cpc	r27, r25
    1094:	b9 f7       	brne	.-18     	; 0x1084 <_ZL6is_lanPKhS0_+0x2a>
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	07 c0       	rjmp	.+14     	; 0x10a8 <_ZL6is_lanPKhS0_+0x4e>
    109a:	80 e0       	ldi	r24, 0x00	; 0
    109c:	05 c0       	rjmp	.+10     	; 0x10a8 <_ZL6is_lanPKhS0_+0x4e>
    109e:	80 e0       	ldi	r24, 0x00	; 0
    10a0:	03 c0       	rjmp	.+6      	; 0x10a8 <_ZL6is_lanPKhS0_+0x4e>
    10a2:	80 e0       	ldi	r24, 0x00	; 0
    10a4:	01 c0       	rjmp	.+2      	; 0x10a8 <_ZL6is_lanPKhS0_+0x4e>
    10a6:	80 e0       	ldi	r24, 0x00	; 0
    10a8:	df 91       	pop	r29
    10aa:	cf 91       	pop	r28
    10ac:	08 95       	ret

000010ae <_ZL20fill_ip_hdr_checksumv>:
    10ae:	e3 e0       	ldi	r30, 0x03	; 3
    10b0:	f3 e0       	ldi	r31, 0x03	; 3
    10b2:	10 8e       	std	Z+24, r1	; 0x18
    10b4:	11 8e       	std	Z+25, r1	; 0x19
    10b6:	80 e4       	ldi	r24, 0x40	; 64
    10b8:	84 8b       	std	Z+20, r24	; 0x14
    10ba:	15 8a       	std	Z+21, r1	; 0x15
    10bc:	86 8b       	std	Z+22, r24	; 0x16
    10be:	20 e0       	ldi	r18, 0x00	; 0
    10c0:	44 e1       	ldi	r20, 0x14	; 20
    10c2:	50 e0       	ldi	r21, 0x00	; 0
    10c4:	6e e0       	ldi	r22, 0x0E	; 14
    10c6:	88 e1       	ldi	r24, 0x18	; 24
    10c8:	57 cf       	rjmp	.-338    	; 0xf78 <_ZL13fill_checksumhhjh>
    10ca:	08 95       	ret

000010cc <_ZL7setMACsPKh>:
    10cc:	bc 01       	movw	r22, r24
    10ce:	83 e0       	ldi	r24, 0x03	; 3
    10d0:	93 e0       	ldi	r25, 0x03	; 3
    10d2:	e0 d2       	rcall	.+1472   	; 0x1694 <_ZN9EtherCard7copyMacEPhPKh>
    10d4:	6d e1       	ldi	r22, 0x1D	; 29
    10d6:	75 e0       	ldi	r23, 0x05	; 5
    10d8:	89 e0       	ldi	r24, 0x09	; 9
    10da:	93 e0       	ldi	r25, 0x03	; 3
    10dc:	db c2       	rjmp	.+1462   	; 0x1694 <_ZN9EtherCard7copyMacEPhPKh>
    10de:	08 95       	ret

000010e0 <_ZL11make_eth_ipv>:
    10e0:	89 e0       	ldi	r24, 0x09	; 9
    10e2:	93 e0       	ldi	r25, 0x03	; 3
    10e4:	f3 df       	rcall	.-26     	; 0x10cc <_ZL7setMACsPKh>
    10e6:	6d e1       	ldi	r22, 0x1D	; 29
    10e8:	73 e0       	ldi	r23, 0x03	; 3
    10ea:	81 e2       	ldi	r24, 0x21	; 33
    10ec:	93 e0       	ldi	r25, 0x03	; 3
    10ee:	c5 d2       	rcall	.+1418   	; 0x167a <_ZN9EtherCard6copyIpEPhPKh>
    10f0:	69 e1       	ldi	r22, 0x19	; 25
    10f2:	75 e0       	ldi	r23, 0x05	; 5
    10f4:	8d e1       	ldi	r24, 0x1D	; 29
    10f6:	93 e0       	ldi	r25, 0x03	; 3
    10f8:	c0 d2       	rcall	.+1408   	; 0x167a <_ZN9EtherCard6copyIpEPhPKh>
    10fa:	d9 cf       	rjmp	.-78     	; 0x10ae <_ZL20fill_ip_hdr_checksumv>
    10fc:	08 95       	ret

000010fe <_ZL12setMACandIPsPKhS0_>:
    10fe:	cf 93       	push	r28
    1100:	df 93       	push	r29
    1102:	eb 01       	movw	r28, r22
    1104:	e3 df       	rcall	.-58     	; 0x10cc <_ZL7setMACsPKh>
    1106:	be 01       	movw	r22, r28
    1108:	81 e2       	ldi	r24, 0x21	; 33
    110a:	93 e0       	ldi	r25, 0x03	; 3
    110c:	b6 d2       	rcall	.+1388   	; 0x167a <_ZN9EtherCard6copyIpEPhPKh>
    110e:	69 e1       	ldi	r22, 0x19	; 25
    1110:	75 e0       	ldi	r23, 0x05	; 5
    1112:	8d e1       	ldi	r24, 0x1D	; 29
    1114:	93 e0       	ldi	r25, 0x03	; 3
    1116:	b1 d2       	rcall	.+1378   	; 0x167a <_ZN9EtherCard6copyIpEPhPKh>
    1118:	df 91       	pop	r29
    111a:	cf 91       	pop	r28
    111c:	08 95       	ret

0000111e <_ZL16client_store_macPhS_>:
    111e:	cf 93       	push	r28
    1120:	df 93       	push	r29
    1122:	eb 01       	movw	r28, r22
    1124:	44 e0       	ldi	r20, 0x04	; 4
    1126:	50 e0       	ldi	r21, 0x00	; 0
    1128:	bc 01       	movw	r22, r24
    112a:	8f e1       	ldi	r24, 0x1F	; 31
    112c:	93 e0       	ldi	r25, 0x03	; 3
    112e:	0e 94 41 19 	call	0x3282	; 0x3282 <memcmp>
    1132:	89 2b       	or	r24, r25
    1134:	31 f4       	brne	.+12     	; 0x1142 <_ZL16client_store_macPhS_+0x24>
    1136:	69 e1       	ldi	r22, 0x19	; 25
    1138:	73 e0       	ldi	r23, 0x03	; 3
    113a:	ce 01       	movw	r24, r28
    113c:	ab d2       	rcall	.+1366   	; 0x1694 <_ZN9EtherCard7copyMacEPhPKh>
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	01 c0       	rjmp	.+2      	; 0x1144 <_ZL16client_store_macPhS_+0x26>
    1142:	80 e0       	ldi	r24, 0x00	; 0
    1144:	df 91       	pop	r29
    1146:	cf 91       	pop	r28
    1148:	08 95       	ret

0000114a <_ZL17client_arp_whohasPh>:
    114a:	0f 93       	push	r16
    114c:	1f 93       	push	r17
    114e:	cf 93       	push	r28
    1150:	8c 01       	movw	r16, r24
    1152:	87 e2       	ldi	r24, 0x27	; 39
    1154:	92 e0       	ldi	r25, 0x02	; 2
    1156:	ba df       	rcall	.-140    	; 0x10cc <_ZL7setMACsPKh>
    1158:	e3 e0       	ldi	r30, 0x03	; 3
    115a:	f3 e0       	ldi	r31, 0x03	; 3
    115c:	88 e0       	ldi	r24, 0x08	; 8
    115e:	84 87       	std	Z+12, r24	; 0x0c
    1160:	c6 e0       	ldi	r28, 0x06	; 6
    1162:	c5 87       	std	Z+13, r28	; 0x0d
    1164:	48 e0       	ldi	r20, 0x08	; 8
    1166:	50 e0       	ldi	r21, 0x00	; 0
    1168:	6f e7       	ldi	r22, 0x7F	; 127
    116a:	72 e0       	ldi	r23, 0x02	; 2
    116c:	81 e1       	ldi	r24, 0x11	; 17
    116e:	93 e0       	ldi	r25, 0x03	; 3
    1170:	0e 94 38 19 	call	0x3270	; 0x3270 <memcpy_P>
    1174:	e3 e2       	ldi	r30, 0x23	; 35
    1176:	f3 e0       	ldi	r31, 0x03	; 3
    1178:	df 01       	movw	r26, r30
    117a:	1d 92       	st	X+, r1
    117c:	ca 95       	dec	r28
    117e:	e9 f7       	brne	.-6      	; 0x117a <_ZL17client_arp_whohasPh+0x30>
    1180:	6d e1       	ldi	r22, 0x1D	; 29
    1182:	75 e0       	ldi	r23, 0x05	; 5
    1184:	89 e1       	ldi	r24, 0x19	; 25
    1186:	93 e0       	ldi	r25, 0x03	; 3
    1188:	85 d2       	rcall	.+1290   	; 0x1694 <_ZN9EtherCard7copyMacEPhPKh>
    118a:	b8 01       	movw	r22, r16
    118c:	89 e2       	ldi	r24, 0x29	; 41
    118e:	93 e0       	ldi	r25, 0x03	; 3
    1190:	74 d2       	rcall	.+1256   	; 0x167a <_ZN9EtherCard6copyIpEPhPKh>
    1192:	69 e1       	ldi	r22, 0x19	; 25
    1194:	75 e0       	ldi	r23, 0x05	; 5
    1196:	8f e1       	ldi	r24, 0x1F	; 31
    1198:	93 e0       	ldi	r25, 0x03	; 3
    119a:	6f d2       	rcall	.+1246   	; 0x167a <_ZN9EtherCard6copyIpEPhPKh>
    119c:	8a e2       	ldi	r24, 0x2A	; 42
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	c6 dd       	rcall	.-1140   	; 0xd2e <_ZN8ENC28J6010packetSendEj>
    11a2:	cf 91       	pop	r28
    11a4:	1f 91       	pop	r17
    11a6:	0f 91       	pop	r16
    11a8:	08 95       	ret

000011aa <_ZN9EtherCard10udpPrepareEjPKhj>:
    11aa:	ef 92       	push	r14
    11ac:	ff 92       	push	r15
    11ae:	0f 93       	push	r16
    11b0:	1f 93       	push	r17
    11b2:	cf 93       	push	r28
    11b4:	df 93       	push	r29
    11b6:	18 2f       	mov	r17, r24
    11b8:	09 2f       	mov	r16, r25
    11ba:	eb 01       	movw	r28, r22
    11bc:	f4 2e       	mov	r15, r20
    11be:	e5 2e       	mov	r14, r21
    11c0:	89 e1       	ldi	r24, 0x19	; 25
    11c2:	95 e0       	ldi	r25, 0x05	; 5
    11c4:	4a df       	rcall	.-364    	; 0x105a <_ZL6is_lanPKhS0_>
    11c6:	88 23       	and	r24, r24
    11c8:	29 f0       	breq	.+10     	; 0x11d4 <_ZN9EtherCard10udpPrepareEjPKhj+0x2a>
    11ca:	be 01       	movw	r22, r28
    11cc:	8e e2       	ldi	r24, 0x2E	; 46
    11ce:	95 e0       	ldi	r25, 0x05	; 5
    11d0:	96 df       	rcall	.-212    	; 0x10fe <_ZL12setMACandIPsPKhS0_>
    11d2:	04 c0       	rjmp	.+8      	; 0x11dc <_ZN9EtherCard10udpPrepareEjPKhj+0x32>
    11d4:	be 01       	movw	r22, r28
    11d6:	84 e2       	ldi	r24, 0x24	; 36
    11d8:	95 e0       	ldi	r25, 0x05	; 5
    11da:	91 df       	rcall	.-222    	; 0x10fe <_ZL12setMACandIPsPKhS0_>
    11dc:	88 81       	ld	r24, Y
    11de:	80 7f       	andi	r24, 0xF0	; 240
    11e0:	80 3e       	cpi	r24, 0xE0	; 224
    11e2:	91 f0       	breq	.+36     	; 0x1208 <_ZN9EtherCard10udpPrepareEjPKhj+0x5e>
    11e4:	88 81       	ld	r24, Y
    11e6:	99 81       	ldd	r25, Y+1	; 0x01
    11e8:	aa 81       	ldd	r26, Y+2	; 0x02
    11ea:	bb 81       	ldd	r27, Y+3	; 0x03
    11ec:	8f 3f       	cpi	r24, 0xFF	; 255
    11ee:	9f 4f       	sbci	r25, 0xFF	; 255
    11f0:	af 4f       	sbci	r26, 0xFF	; 255
    11f2:	bf 4f       	sbci	r27, 0xFF	; 255
    11f4:	49 f0       	breq	.+18     	; 0x1208 <_ZN9EtherCard10udpPrepareEjPKhj+0x5e>
    11f6:	44 e0       	ldi	r20, 0x04	; 4
    11f8:	50 e0       	ldi	r21, 0x00	; 0
    11fa:	be 01       	movw	r22, r28
    11fc:	81 e1       	ldi	r24, 0x11	; 17
    11fe:	95 e0       	ldi	r25, 0x05	; 5
    1200:	0e 94 41 19 	call	0x3282	; 0x3282 <memcmp>
    1204:	89 2b       	or	r24, r25
    1206:	29 f4       	brne	.+10     	; 0x1212 <_ZN9EtherCard10udpPrepareEjPKhj+0x68>
    1208:	67 e2       	ldi	r22, 0x27	; 39
    120a:	72 e0       	ldi	r23, 0x02	; 2
    120c:	83 e0       	ldi	r24, 0x03	; 3
    120e:	93 e0       	ldi	r25, 0x03	; 3
    1210:	41 d2       	rcall	.+1154   	; 0x1694 <_ZN9EtherCard7copyMacEPhPKh>
    1212:	c3 e0       	ldi	r28, 0x03	; 3
    1214:	d3 e0       	ldi	r29, 0x03	; 3
    1216:	88 e0       	ldi	r24, 0x08	; 8
    1218:	8c 87       	std	Y+12, r24	; 0x0c
    121a:	1d 86       	std	Y+13, r1	; 0x0d
    121c:	49 e0       	ldi	r20, 0x09	; 9
    121e:	50 e0       	ldi	r21, 0x00	; 0
    1220:	66 e7       	ldi	r22, 0x76	; 118
    1222:	72 e0       	ldi	r23, 0x02	; 2
    1224:	81 e1       	ldi	r24, 0x11	; 17
    1226:	93 e0       	ldi	r25, 0x03	; 3
    1228:	0e 94 38 19 	call	0x3270	; 0x3270 <memcpy_P>
    122c:	18 8a       	std	Y+16, r1	; 0x10
    122e:	81 e1       	ldi	r24, 0x11	; 17
    1230:	8f 8b       	std	Y+23, r24	; 0x17
    1232:	ec a2       	std	Y+36, r14	; 0x24
    1234:	fd a2       	std	Y+37, r15	; 0x25
    1236:	0a a3       	std	Y+34, r16	; 0x22
    1238:	1b a3       	std	Y+35, r17	; 0x23
    123a:	1e a2       	std	Y+38, r1	; 0x26
    123c:	18 a6       	std	Y+40, r1	; 0x28
    123e:	19 a6       	std	Y+41, r1	; 0x29
    1240:	df 91       	pop	r29
    1242:	cf 91       	pop	r28
    1244:	1f 91       	pop	r17
    1246:	0f 91       	pop	r16
    1248:	ff 90       	pop	r15
    124a:	ef 90       	pop	r14
    124c:	08 95       	ret

0000124e <_ZN9EtherCard11udpTransmitEj>:
    124e:	0f 93       	push	r16
    1250:	1f 93       	push	r17
    1252:	cf 93       	push	r28
    1254:	df 93       	push	r29
    1256:	ec 01       	movw	r28, r24
    1258:	03 e0       	ldi	r16, 0x03	; 3
    125a:	13 e0       	ldi	r17, 0x03	; 3
    125c:	4c 96       	adiw	r24, 0x1c	; 28
    125e:	f8 01       	movw	r30, r16
    1260:	90 8b       	std	Z+16, r25	; 0x10
    1262:	81 8b       	std	Z+17, r24	; 0x11
    1264:	24 df       	rcall	.-440    	; 0x10ae <_ZL20fill_ip_hdr_checksumv>
    1266:	ce 01       	movw	r24, r28
    1268:	08 96       	adiw	r24, 0x08	; 8
    126a:	f8 01       	movw	r30, r16
    126c:	96 a3       	std	Z+38, r25	; 0x26
    126e:	87 a3       	std	Z+39, r24	; 0x27
    1270:	ae 01       	movw	r20, r28
    1272:	40 5f       	subi	r20, 0xF0	; 240
    1274:	5f 4f       	sbci	r21, 0xFF	; 255
    1276:	21 e0       	ldi	r18, 0x01	; 1
    1278:	6a e1       	ldi	r22, 0x1A	; 26
    127a:	88 e2       	ldi	r24, 0x28	; 40
    127c:	7d de       	rcall	.-774    	; 0xf78 <_ZL13fill_checksumhhjh>
    127e:	ce 01       	movw	r24, r28
    1280:	8a 96       	adiw	r24, 0x2a	; 42
    1282:	55 dd       	rcall	.-1366   	; 0xd2e <_ZN8ENC28J6010packetSendEj>
    1284:	df 91       	pop	r29
    1286:	cf 91       	pop	r28
    1288:	1f 91       	pop	r17
    128a:	0f 91       	pop	r16
    128c:	08 95       	ret

0000128e <_ZN9EtherCard7sendUdpEPKhjjS1_j>:
    128e:	0f 93       	push	r16
    1290:	1f 93       	push	r17
    1292:	cf 93       	push	r28
    1294:	df 93       	push	r29
    1296:	d6 2f       	mov	r29, r22
    1298:	c7 2f       	mov	r28, r23
    129a:	ca 01       	movw	r24, r20
    129c:	a8 01       	movw	r20, r16
    129e:	b9 01       	movw	r22, r18
    12a0:	84 df       	rcall	.-248    	; 0x11aa <_ZN9EtherCard10udpPrepareEjPKhj>
    12a2:	8d 2f       	mov	r24, r29
    12a4:	9c 2f       	mov	r25, r28
    12a6:	81 30       	cpi	r24, 0x01	; 1
    12a8:	22 e0       	ldi	r18, 0x02	; 2
    12aa:	92 07       	cpc	r25, r18
    12ac:	10 f0       	brcs	.+4      	; 0x12b2 <_ZN9EtherCard7sendUdpEPKhjjS1_j+0x24>
    12ae:	80 e0       	ldi	r24, 0x00	; 0
    12b0:	92 e0       	ldi	r25, 0x02	; 2
    12b2:	cd df       	rcall	.-102    	; 0x124e <_ZN9EtherCard11udpTransmitEj>
    12b4:	df 91       	pop	r29
    12b6:	cf 91       	pop	r28
    12b8:	1f 91       	pop	r17
    12ba:	0f 91       	pop	r16
    12bc:	08 95       	ret

000012be <_ZN9EtherCard7setGwIpEPKh>:
    12be:	10 92 04 05 	sts	0x0504, r1	; 0x800504 <_ZN9EtherCard8delaycntE+0x1>
    12c2:	10 92 03 05 	sts	0x0503, r1	; 0x800503 <_ZN9EtherCard8delaycntE>
    12c6:	21 e0       	ldi	r18, 0x01	; 1
    12c8:	20 93 23 05 	sts	0x0523, r18	; 0x800523 <_ZL9waitgwmac>
    12cc:	bc 01       	movw	r22, r24
    12ce:	8d e0       	ldi	r24, 0x0D	; 13
    12d0:	95 e0       	ldi	r25, 0x05	; 5
    12d2:	d3 c1       	rjmp	.+934    	; 0x167a <_ZN9EtherCard6copyIpEPhPKh>
    12d4:	08 95       	ret

000012d6 <_ZN9EtherCard22updateBroadcastAddressEv>:
    12d6:	cf 93       	push	r28
    12d8:	df 93       	push	r29
    12da:	e9 e1       	ldi	r30, 0x19	; 25
    12dc:	f5 e0       	ldi	r31, 0x05	; 5
    12de:	c5 e1       	ldi	r28, 0x15	; 21
    12e0:	d5 e0       	ldi	r29, 0x05	; 5
    12e2:	a1 e1       	ldi	r26, 0x11	; 17
    12e4:	b5 e0       	ldi	r27, 0x05	; 5
    12e6:	2d e1       	ldi	r18, 0x1D	; 29
    12e8:	35 e0       	ldi	r19, 0x05	; 5
    12ea:	91 91       	ld	r25, Z+
    12ec:	89 91       	ld	r24, Y+
    12ee:	80 95       	com	r24
    12f0:	89 2b       	or	r24, r25
    12f2:	8d 93       	st	X+, r24
    12f4:	e2 17       	cp	r30, r18
    12f6:	f3 07       	cpc	r31, r19
    12f8:	c1 f7       	brne	.-16     	; 0x12ea <_ZN9EtherCard22updateBroadcastAddressEv+0x14>
    12fa:	df 91       	pop	r29
    12fc:	cf 91       	pop	r28
    12fe:	08 95       	ret

00001300 <_ZN9EtherCard10packetLoopEj>:
	gPB[ICMP_CHECKSUM_P+1]++;
	gPB[ICMP_CHECKSUM_P] += 0x08;
	EtherCard::packetSend(len);
}

uint16_t EtherCard::packetLoop (uint16_t plen) {
    1300:	cf 93       	push	r28
    1302:	df 93       	push	r29
    1304:	ec 01       	movw	r28, r24
    if (plen==0) {
    1306:	00 97       	sbiw	r24, 0x00	; 0
    1308:	09 f0       	breq	.+2      	; 0x130c <_ZN9EtherCard10packetLoopEj+0xc>
    130a:	3f c0       	rjmp	.+126    	; 0x138a <_ZN9EtherCard10packetLoopEj+0x8a>
        //Check every 65536 (no-packet) cycles whether we need to retry ARP request for gateway
        if ((waitgwmac & WGW_INITIAL_ARP || waitgwmac & WGW_REFRESHING) &&
    130c:	80 91 23 05 	lds	r24, 0x0523	; 0x800523 <_ZL9waitgwmac>
    1310:	85 70       	andi	r24, 0x05	; 5
    1312:	89 f0       	breq	.+34     	; 0x1336 <_ZN9EtherCard10packetLoopEj+0x36>
    1314:	80 91 03 05 	lds	r24, 0x0503	; 0x800503 <_ZN9EtherCard8delaycntE>
    1318:	90 91 04 05 	lds	r25, 0x0504	; 0x800504 <_ZN9EtherCard8delaycntE+0x1>
    131c:	89 2b       	or	r24, r25
    131e:	59 f4       	brne	.+22     	; 0x1336 <_ZN9EtherCard10packetLoopEj+0x36>
                delaycnt==0 && isLinkUp()) {
    1320:	f3 dc       	rcall	.-1562   	; 0xd08 <_ZN8ENC28J608isLinkUpEv>
}

uint16_t EtherCard::packetLoop (uint16_t plen) {
    if (plen==0) {
        //Check every 65536 (no-packet) cycles whether we need to retry ARP request for gateway
        if ((waitgwmac & WGW_INITIAL_ARP || waitgwmac & WGW_REFRESHING) &&
    1322:	88 23       	and	r24, r24
    1324:	41 f0       	breq	.+16     	; 0x1336 <_ZN9EtherCard10packetLoopEj+0x36>
                delaycnt==0 && isLinkUp()) {
            client_arp_whohas(gwip);
    1326:	8d e0       	ldi	r24, 0x0D	; 13
    1328:	95 e0       	ldi	r25, 0x05	; 5
    132a:	0f df       	rcall	.-482    	; 0x114a <_ZL17client_arp_whohasPh>
            waitgwmac |= WGW_ACCEPT_ARP_REPLY;
    132c:	80 91 23 05 	lds	r24, 0x0523	; 0x800523 <_ZL9waitgwmac>
    1330:	88 60       	ori	r24, 0x08	; 8
    1332:	80 93 23 05 	sts	0x0523, r24	; 0x800523 <_ZL9waitgwmac>
        }
        delaycnt++;
    1336:	80 91 03 05 	lds	r24, 0x0503	; 0x800503 <_ZN9EtherCard8delaycntE>
    133a:	90 91 04 05 	lds	r25, 0x0504	; 0x800504 <_ZN9EtherCard8delaycntE+0x1>
    133e:	01 96       	adiw	r24, 0x01	; 1
    1340:	90 93 04 05 	sts	0x0504, r25	; 0x800504 <_ZN9EtherCard8delaycntE+0x1>
    1344:	80 93 03 05 	sts	0x0503, r24	; 0x800503 <_ZN9EtherCard8delaycntE>

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, dnsip) && !has_dns_mac && !waiting_for_dns_mac) {
    1348:	69 e0       	ldi	r22, 0x09	; 9
    134a:	75 e0       	ldi	r23, 0x05	; 5
    134c:	89 e1       	ldi	r24, 0x19	; 25
    134e:	95 e0       	ldi	r25, 0x05	; 5
    1350:	84 de       	rcall	.-760    	; 0x105a <_ZL6is_lanPKhS0_>
    1352:	88 23       	and	r24, r24
    1354:	49 f0       	breq	.+18     	; 0x1368 <_ZN9EtherCard10packetLoopEj+0x68>
    1356:	80 91 2c 05 	lds	r24, 0x052C	; 0x80052c <_ZL11has_dns_mac>
    135a:	81 11       	cpse	r24, r1
    135c:	05 c0       	rjmp	.+10     	; 0x1368 <_ZN9EtherCard10packetLoopEj+0x68>
    135e:	80 91 2d 05 	lds	r24, 0x052D	; 0x80052d <_ZL19waiting_for_dns_mac>
    1362:	88 23       	and	r24, r24
    1364:	09 f4       	brne	.+2      	; 0x1368 <_ZN9EtherCard10packetLoopEj+0x68>
    1366:	dc c0       	rjmp	.+440    	; 0x1520 <_ZN9EtherCard10packetLoopEj+0x220>
            client_arp_whohas(dnsip);
            waiting_for_dns_mac = true;
        }

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, hisip) && !has_dest_mac && !waiting_for_dest_mac) {
    1368:	65 e0       	ldi	r22, 0x05	; 5
    136a:	75 e0       	ldi	r23, 0x05	; 5
    136c:	89 e1       	ldi	r24, 0x19	; 25
    136e:	95 e0       	ldi	r25, 0x05	; 5
    1370:	74 de       	rcall	.-792    	; 0x105a <_ZL6is_lanPKhS0_>
    1372:	88 23       	and	r24, r24
    1374:	09 f4       	brne	.+2      	; 0x1378 <_ZN9EtherCard10packetLoopEj+0x78>
    1376:	f8 c0       	rjmp	.+496    	; 0x1568 <_ZN9EtherCard10packetLoopEj+0x268>
    1378:	80 91 2a 05 	lds	r24, 0x052A	; 0x80052a <_ZL12has_dest_mac>
    137c:	81 11       	cpse	r24, r1
    137e:	f4 c0       	rjmp	.+488    	; 0x1568 <_ZN9EtherCard10packetLoopEj+0x268>
    1380:	80 91 2b 05 	lds	r24, 0x052B	; 0x80052b <_ZL20waiting_for_dest_mac>
    1384:	81 11       	cpse	r24, r1
    1386:	f0 c0       	rjmp	.+480    	; 0x1568 <_ZN9EtherCard10packetLoopEj+0x268>
    1388:	d2 c0       	rjmp	.+420    	; 0x152e <_ZN9EtherCard10packetLoopEj+0x22e>
    return true;
}

static uint8_t eth_type_is_arp_and_my_ip(uint16_t len) {
    return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
    138a:	89 32       	cpi	r24, 0x29	; 41
    138c:	91 05       	cpc	r25, r1
    138e:	08 f4       	brcc	.+2      	; 0x1392 <_ZN9EtherCard10packetLoopEj+0x92>
    1390:	d5 c0       	rjmp	.+426    	; 0x153c <_ZN9EtherCard10packetLoopEj+0x23c>
        }
    return true;
}

static uint8_t eth_type_is_arp_and_my_ip(uint16_t len) {
    return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
    1392:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <_ZN8ENC28J606bufferE+0xc>
    1396:	88 30       	cpi	r24, 0x08	; 8
    1398:	09 f0       	breq	.+2      	; 0x139c <_ZN9EtherCard10packetLoopEj+0x9c>
    139a:	e6 c0       	rjmp	.+460    	; 0x1568 <_ZN9EtherCard10packetLoopEj+0x268>
    139c:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <_ZN8ENC28J606bufferE+0xd>
    13a0:	86 30       	cpi	r24, 0x06	; 6
    13a2:	09 f0       	breq	.+2      	; 0x13a6 <_ZN9EtherCard10packetLoopEj+0xa6>
    13a4:	dd c0       	rjmp	.+442    	; 0x1560 <_ZN9EtherCard10packetLoopEj+0x260>
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
           memcmp(gPB + ETH_ARP_DST_IP_P, EtherCard::myip, IP_LEN) == 0;
    13a6:	44 e0       	ldi	r20, 0x04	; 4
    13a8:	50 e0       	ldi	r21, 0x00	; 0
    13aa:	69 e1       	ldi	r22, 0x19	; 25
    13ac:	75 e0       	ldi	r23, 0x05	; 5
    13ae:	89 e2       	ldi	r24, 0x29	; 41
    13b0:	93 e0       	ldi	r25, 0x03	; 3
    13b2:	0e 94 41 19 	call	0x3282	; 0x3282 <memcmp>
    return true;
}

static uint8_t eth_type_is_arp_and_my_ip(uint16_t len) {
    return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
    13b6:	89 2b       	or	r24, r25
    13b8:	09 f0       	breq	.+2      	; 0x13bc <_ZN9EtherCard10packetLoopEj+0xbc>
    13ba:	d2 c0       	rjmp	.+420    	; 0x1560 <_ZN9EtherCard10packetLoopEj+0x260>
    EtherCard::copyIp(gPB + IP_SRC_P, EtherCard::myip);
    fill_ip_hdr_checksum();
}

static void make_arp_answer_from_request() {
    setMACs(gPB + ETH_SRC_MAC);
    13bc:	c3 c0       	rjmp	.+390    	; 0x1544 <_ZN9EtherCard10packetLoopEj+0x244>
    13be:	89 e0       	ldi	r24, 0x09	; 9
    13c0:	93 e0       	ldi	r25, 0x03	; 3
    13c2:	84 de       	rcall	.-760    	; 0x10cc <_ZL7setMACsPKh>
    gPB[ETH_ARP_OPCODE_H_P] = ETH_ARP_OPCODE_REPLY_H_V;
    13c4:	e3 e0       	ldi	r30, 0x03	; 3
    13c6:	f3 e0       	ldi	r31, 0x03	; 3
    13c8:	14 8a       	std	Z+20, r1	; 0x14
    gPB[ETH_ARP_OPCODE_L_P] = ETH_ARP_OPCODE_REPLY_L_V;
    13ca:	82 e0       	ldi	r24, 0x02	; 2
    EtherCard::copyMac(gPB + ETH_ARP_DST_MAC_P, gPB + ETH_ARP_SRC_MAC_P);
    13cc:	85 8b       	std	Z+21, r24	; 0x15
    13ce:	69 e1       	ldi	r22, 0x19	; 25
    13d0:	73 e0       	ldi	r23, 0x03	; 3
    13d2:	83 e2       	ldi	r24, 0x23	; 35
    13d4:	93 e0       	ldi	r25, 0x03	; 3
    EtherCard::copyMac(gPB + ETH_ARP_SRC_MAC_P, EtherCard::mymac);
    13d6:	5e d1       	rcall	.+700    	; 0x1694 <_ZN9EtherCard7copyMacEPhPKh>
    13d8:	6d e1       	ldi	r22, 0x1D	; 29
    13da:	75 e0       	ldi	r23, 0x05	; 5
    13dc:	89 e1       	ldi	r24, 0x19	; 25
    13de:	93 e0       	ldi	r25, 0x03	; 3
    EtherCard::copyIp(gPB + ETH_ARP_DST_IP_P, gPB + ETH_ARP_SRC_IP_P);
    13e0:	59 d1       	rcall	.+690    	; 0x1694 <_ZN9EtherCard7copyMacEPhPKh>
    13e2:	6f e1       	ldi	r22, 0x1F	; 31
    13e4:	73 e0       	ldi	r23, 0x03	; 3
    13e6:	89 e2       	ldi	r24, 0x29	; 41
    13e8:	93 e0       	ldi	r25, 0x03	; 3
    EtherCard::copyIp(gPB + ETH_ARP_SRC_IP_P, EtherCard::myip);
    13ea:	47 d1       	rcall	.+654    	; 0x167a <_ZN9EtherCard6copyIpEPhPKh>
    13ec:	69 e1       	ldi	r22, 0x19	; 25
    13ee:	75 e0       	ldi	r23, 0x05	; 5
    13f0:	8f e1       	ldi	r24, 0x1F	; 31
    13f2:	93 e0       	ldi	r25, 0x03	; 3
    13f4:	42 d1       	rcall	.+644    	; 0x167a <_ZN9EtherCard6copyIpEPhPKh>
    EtherCard::packetSend(42);
    13f6:	8a e2       	ldi	r24, 0x2A	; 42
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	99 dc       	rcall	.-1742   	; 0xd2e <_ZN8ENC28J6010packetSendEj>
    13fc:	80 91 23 05 	lds	r24, 0x0523	; 0x800523 <_ZL9waitgwmac>

    if (eth_type_is_arp_and_my_ip(plen))
    {   //Service ARP request
        if (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REQ_L_V)
            make_arp_answer_from_request();
        if (waitgwmac & WGW_ACCEPT_ARP_REPLY && (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REPLY_L_V) && client_store_mac(gwip, gwmacaddr))
    1400:	83 ff       	sbrs	r24, 3
    1402:	0e c0       	rjmp	.+28     	; 0x1420 <_ZN9EtherCard10packetLoopEj+0x120>
    1404:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <_ZN8ENC28J606bufferE+0x15>
    1408:	82 30       	cpi	r24, 0x02	; 2
    140a:	51 f4       	brne	.+20     	; 0x1420 <_ZN9EtherCard10packetLoopEj+0x120>
    140c:	64 e2       	ldi	r22, 0x24	; 36
    140e:	75 e0       	ldi	r23, 0x05	; 5
    1410:	8d e0       	ldi	r24, 0x0D	; 13
    1412:	95 e0       	ldi	r25, 0x05	; 5
    1414:	84 de       	rcall	.-760    	; 0x111e <_ZL16client_store_macPhS_>
    1416:	88 23       	and	r24, r24
    1418:	19 f0       	breq	.+6      	; 0x1420 <_ZN9EtherCard10packetLoopEj+0x120>
    141a:	82 e0       	ldi	r24, 0x02	; 2
            waitgwmac = WGW_HAVE_GW_MAC;
    141c:	80 93 23 05 	sts	0x0523, r24	; 0x800523 <_ZL9waitgwmac>
    1420:	80 91 2c 05 	lds	r24, 0x052C	; 0x80052c <_ZL11has_dns_mac>
        if (!has_dns_mac && waiting_for_dns_mac && client_store_mac(dnsip, destmacaddr)) {
    1424:	81 11       	cpse	r24, r1
    1426:	10 c0       	rjmp	.+32     	; 0x1448 <_ZN9EtherCard10packetLoopEj+0x148>
    1428:	80 91 2d 05 	lds	r24, 0x052D	; 0x80052d <_ZL19waiting_for_dns_mac>
    142c:	88 23       	and	r24, r24
    142e:	61 f0       	breq	.+24     	; 0x1448 <_ZN9EtherCard10packetLoopEj+0x148>
    1430:	6e e2       	ldi	r22, 0x2E	; 46
    1432:	75 e0       	ldi	r23, 0x05	; 5
    1434:	89 e0       	ldi	r24, 0x09	; 9
    1436:	95 e0       	ldi	r25, 0x05	; 5
    1438:	72 de       	rcall	.-796    	; 0x111e <_ZL16client_store_macPhS_>
    143a:	88 23       	and	r24, r24
    143c:	29 f0       	breq	.+10     	; 0x1448 <_ZN9EtherCard10packetLoopEj+0x148>
    143e:	81 e0       	ldi	r24, 0x01	; 1
            has_dns_mac = true;
    1440:	80 93 2c 05 	sts	0x052C, r24	; 0x80052c <_ZL11has_dns_mac>
    1444:	10 92 2d 05 	sts	0x052D, r1	; 0x80052d <_ZL19waiting_for_dns_mac>
            waiting_for_dns_mac = false;
    1448:	80 91 2a 05 	lds	r24, 0x052A	; 0x80052a <_ZL12has_dest_mac>
        }
        if (!has_dest_mac && waiting_for_dest_mac && client_store_mac(hisip, destmacaddr)) {
    144c:	81 11       	cpse	r24, r1
    144e:	8c c0       	rjmp	.+280    	; 0x1568 <_ZN9EtherCard10packetLoopEj+0x268>
    1450:	80 91 2b 05 	lds	r24, 0x052B	; 0x80052b <_ZL20waiting_for_dest_mac>
    1454:	88 23       	and	r24, r24
    1456:	09 f4       	brne	.+2      	; 0x145a <_ZN9EtherCard10packetLoopEj+0x15a>
    1458:	87 c0       	rjmp	.+270    	; 0x1568 <_ZN9EtherCard10packetLoopEj+0x268>
    145a:	6e e2       	ldi	r22, 0x2E	; 46
    145c:	75 e0       	ldi	r23, 0x05	; 5
    145e:	85 e0       	ldi	r24, 0x05	; 5
    1460:	95 e0       	ldi	r25, 0x05	; 5
    1462:	5d de       	rcall	.-838    	; 0x111e <_ZL16client_store_macPhS_>
    1464:	88 23       	and	r24, r24
    1466:	09 f4       	brne	.+2      	; 0x146a <_ZN9EtherCard10packetLoopEj+0x16a>
    1468:	7f c0       	rjmp	.+254    	; 0x1568 <_ZN9EtherCard10packetLoopEj+0x268>
    146a:	81 e0       	ldi	r24, 0x01	; 1
            has_dest_mac = true;
    146c:	80 93 2a 05 	sts	0x052A, r24	; 0x80052a <_ZL12has_dest_mac>
    1470:	10 92 2b 05 	sts	0x052B, r1	; 0x80052b <_ZL20waiting_for_dest_mac>
            waiting_for_dest_mac = false;
    1474:	79 c0       	rjmp	.+242    	; 0x1568 <_ZN9EtherCard10packetLoopEj+0x268>
    1476:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <_ZN8ENC28J606bufferE+0xc>
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
           memcmp(gPB + ETH_ARP_DST_IP_P, EtherCard::myip, IP_LEN) == 0;
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
    147a:	88 30       	cpi	r24, 0x08	; 8
    147c:	09 f0       	breq	.+2      	; 0x1480 <_ZN9EtherCard10packetLoopEj+0x180>
    147e:	74 c0       	rjmp	.+232    	; 0x1568 <_ZN9EtherCard10packetLoopEj+0x268>
    1480:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <_ZN8ENC28J606bufferE+0xd>
    1484:	81 11       	cpse	r24, r1
    1486:	70 c0       	rjmp	.+224    	; 0x1568 <_ZN9EtherCard10packetLoopEj+0x268>
    1488:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <_ZN8ENC28J606bufferE+0xe>
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
    148c:	85 34       	cpi	r24, 0x45	; 69
    148e:	09 f0       	breq	.+2      	; 0x1492 <_ZN9EtherCard10packetLoopEj+0x192>
    1490:	6b c0       	rjmp	.+214    	; 0x1568 <_ZN9EtherCard10packetLoopEj+0x268>
    1492:	44 e0       	ldi	r20, 0x04	; 4
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
           (memcmp(gPB + IP_DST_P, EtherCard::myip, IP_LEN) == 0  //not my IP
    1494:	50 e0       	ldi	r21, 0x00	; 0
    1496:	69 e1       	ldi	r22, 0x19	; 25
    1498:	75 e0       	ldi	r23, 0x05	; 5
    149a:	81 e2       	ldi	r24, 0x21	; 33
    149c:	93 e0       	ldi	r25, 0x03	; 3
    149e:	0e 94 41 19 	call	0x3282	; 0x3282 <memcmp>
    14a2:	89 2b       	or	r24, r25
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
    14a4:	09 f4       	brne	.+2      	; 0x14a8 <_ZN9EtherCard10packetLoopEj+0x1a8>
    14a6:	54 c0       	rjmp	.+168    	; 0x1550 <_ZN9EtherCard10packetLoopEj+0x250>
    14a8:	44 e0       	ldi	r20, 0x04	; 4
           (memcmp(gPB + IP_DST_P, EtherCard::myip, IP_LEN) == 0  //not my IP
            || (memcmp(gPB + IP_DST_P, EtherCard::broadcastip, IP_LEN) == 0) //not subnet broadcast
    14aa:	50 e0       	ldi	r21, 0x00	; 0
    14ac:	61 e1       	ldi	r22, 0x11	; 17
    14ae:	75 e0       	ldi	r23, 0x05	; 5
    14b0:	81 e2       	ldi	r24, 0x21	; 33
    14b2:	93 e0       	ldi	r25, 0x03	; 3
    14b4:	0e 94 41 19 	call	0x3282	; 0x3282 <memcmp>
    14b8:	89 2b       	or	r24, r25
    14ba:	09 f4       	brne	.+2      	; 0x14be <_ZN9EtherCard10packetLoopEj+0x1be>
    14bc:	49 c0       	rjmp	.+146    	; 0x1550 <_ZN9EtherCard10packetLoopEj+0x250>
    14be:	44 e0       	ldi	r20, 0x04	; 4
            || (memcmp(gPB + IP_DST_P, allOnes, IP_LEN) == 0)); //not global broadcasts
    14c0:	50 e0       	ldi	r21, 0x00	; 0
    14c2:	67 e2       	ldi	r22, 0x27	; 39
    14c4:	72 e0       	ldi	r23, 0x02	; 2
    14c6:	81 e2       	ldi	r24, 0x21	; 33
    14c8:	93 e0       	ldi	r25, 0x03	; 3
    14ca:	0e 94 41 19 	call	0x3282	; 0x3282 <memcmp>
    14ce:	89 2b       	or	r24, r25
    14d0:	09 f0       	breq	.+2      	; 0x14d4 <_ZN9EtherCard10packetLoopEj+0x1d4>
    14d2:	4a c0       	rjmp	.+148    	; 0x1568 <_ZN9EtherCard10packetLoopEj+0x268>
    14d4:	3d c0       	rjmp	.+122    	; 0x1550 <_ZN9EtherCard10packetLoopEj+0x250>
    14d6:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <_ZN8ENC28J606bufferE+0x22>
        //!@todo Add other protocols (and make each optional at compile time)
        return 0;
    }
	
	//To handle pinging
	if (gPB[IP_PROTO_P]==IP_PROTO_ICMP_V && gPB[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V)
    14da:	88 30       	cpi	r24, 0x08	; 8
    14dc:	c9 f4       	brne	.+50     	; 0x1510 <_ZN9EtherCard10packetLoopEj+0x210>
	{   //Service ICMP echo request (ping)
		if (icmp_cb)
    14de:	e0 91 34 05 	lds	r30, 0x0534	; 0x800534 <_ZL7icmp_cb>
    14e2:	f0 91 35 05 	lds	r31, 0x0535	; 0x800535 <_ZL7icmp_cb+0x1>
    14e6:	30 97       	sbiw	r30, 0x00	; 0
    14e8:	19 f0       	breq	.+6      	; 0x14f0 <_ZN9EtherCard10packetLoopEj+0x1f0>
		(*icmp_cb)(&(gPB[IP_SRC_P]));
    14ea:	8d e1       	ldi	r24, 0x1D	; 29
    14ec:	93 e0       	ldi	r25, 0x03	; 3
    14ee:	19 95       	eicall
void EtherCard::registerPingCallback (void (*callback)(uint8_t *srcip)) {
    icmp_cb = callback;
}

static void make_echo_reply_from_request(uint16_t len) {
	make_eth_ip();
    14f0:	f7 dd       	rcall	.-1042   	; 0x10e0 <_ZL11make_eth_ipv>
	gPB[ICMP_TYPE_P] = ICMP_TYPE_ECHOREPLY_V;
    14f2:	e3 e0       	ldi	r30, 0x03	; 3
    14f4:	f3 e0       	ldi	r31, 0x03	; 3
	if (gPB[ICMP_CHECKSUM_P] > (0xFF-0x08))
    14f6:	12 a2       	std	Z+34, r1	; 0x22
    14f8:	84 a1       	ldd	r24, Z+36	; 0x24
    14fa:	88 3f       	cpi	r24, 0xF8	; 248
	gPB[ICMP_CHECKSUM_P+1]++;
    14fc:	18 f0       	brcs	.+6      	; 0x1504 <_ZN9EtherCard10packetLoopEj+0x204>
    14fe:	95 a1       	ldd	r25, Z+37	; 0x25
    1500:	9f 5f       	subi	r25, 0xFF	; 255
	gPB[ICMP_CHECKSUM_P] += 0x08;
    1502:	95 a3       	std	Z+37, r25	; 0x25
    1504:	88 5f       	subi	r24, 0xF8	; 248
	EtherCard::packetSend(len);
    1506:	80 93 27 03 	sts	0x0327, r24	; 0x800327 <_ZN8ENC28J606bufferE+0x24>
    150a:	ce 01       	movw	r24, r28
    150c:	10 dc       	rcall	.-2016   	; 0xd2e <_ZN8ENC28J6010packetSendEj>
		make_echo_reply_from_request(plen);
		return 0;
	}

#if ETHERCARD_UDPSERVER
    if (ether.udpServerListening() && gPB[IP_PROTO_P]==IP_PROTO_UDP_V)
    150e:	2c c0       	rjmp	.+88     	; 0x1568 <_ZN9EtherCard10packetLoopEj+0x268>
    1510:	4a d0       	rcall	.+148    	; 0x15a6 <_ZN9EtherCard18udpServerListeningEv>
    1512:	88 23       	and	r24, r24
    1514:	49 f1       	breq	.+82     	; 0x1568 <_ZN9EtherCard10packetLoopEj+0x268>
    1516:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <_ZN8ENC28J606bufferE+0x17>
    151a:	81 31       	cpi	r24, 0x11	; 17
    151c:	29 f5       	brne	.+74     	; 0x1568 <_ZN9EtherCard10packetLoopEj+0x268>
        }
        delaycnt++;

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, dnsip) && !has_dns_mac && !waiting_for_dns_mac) {
            client_arp_whohas(dnsip);
    151e:	1d c0       	rjmp	.+58     	; 0x155a <_ZN9EtherCard10packetLoopEj+0x25a>
    1520:	89 e0       	ldi	r24, 0x09	; 9
    1522:	95 e0       	ldi	r25, 0x05	; 5
    1524:	12 de       	rcall	.-988    	; 0x114a <_ZL17client_arp_whohasPh>
            waiting_for_dns_mac = true;
    1526:	81 e0       	ldi	r24, 0x01	; 1
    1528:	80 93 2d 05 	sts	0x052D, r24	; 0x80052d <_ZL19waiting_for_dns_mac>
    152c:	1d cf       	rjmp	.-454    	; 0x1368 <_ZN9EtherCard10packetLoopEj+0x68>
        }

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, hisip) && !has_dest_mac && !waiting_for_dest_mac) {
            client_arp_whohas(hisip);
    152e:	85 e0       	ldi	r24, 0x05	; 5
    1530:	95 e0       	ldi	r25, 0x05	; 5
    1532:	0b de       	rcall	.-1002   	; 0x114a <_ZL17client_arp_whohasPh>
    1534:	81 e0       	ldi	r24, 0x01	; 1
            waiting_for_dest_mac = true;
    1536:	80 93 2b 05 	sts	0x052B, r24	; 0x80052b <_ZL20waiting_for_dest_mac>
    153a:	16 c0       	rjmp	.+44     	; 0x1568 <_ZN9EtherCard10packetLoopEj+0x268>
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
    153c:	8a 97       	sbiw	r24, 0x2a	; 42
    153e:	08 f0       	brcs	.+2      	; 0x1542 <_ZN9EtherCard10packetLoopEj+0x242>
    1540:	9a cf       	rjmp	.-204    	; 0x1476 <_ZN9EtherCard10packetLoopEj+0x176>
    1542:	12 c0       	rjmp	.+36     	; 0x1568 <_ZN9EtherCard10packetLoopEj+0x268>
        return 0;
    }

    if (eth_type_is_arp_and_my_ip(plen))
    {   //Service ARP request
        if (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REQ_L_V)
    1544:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <_ZN8ENC28J606bufferE+0x15>
    1548:	81 30       	cpi	r24, 0x01	; 1
    154a:	09 f0       	breq	.+2      	; 0x154e <_ZN9EtherCard10packetLoopEj+0x24e>
    154c:	57 cf       	rjmp	.-338    	; 0x13fc <_ZN9EtherCard10packetLoopEj+0xfc>
    154e:	37 cf       	rjmp	.-402    	; 0x13be <_ZN9EtherCard10packetLoopEj+0xbe>
        //!@todo Add other protocols (and make each optional at compile time)
        return 0;
    }
	
	//To handle pinging
	if (gPB[IP_PROTO_P]==IP_PROTO_ICMP_V && gPB[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V)
    1550:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <_ZN8ENC28J606bufferE+0x17>
    1554:	81 30       	cpi	r24, 0x01	; 1
    1556:	e1 f6       	brne	.-72     	; 0x1510 <_ZN9EtherCard10packetLoopEj+0x210>
    1558:	be cf       	rjmp	.-132    	; 0x14d6 <_ZN9EtherCard10packetLoopEj+0x1d6>
	}

#if ETHERCARD_UDPSERVER
    if (ether.udpServerListening() && gPB[IP_PROTO_P]==IP_PROTO_UDP_V)
    {   //Call UDP server handler (callback) if one is defined for this packet
        if(ether.udpServerHasProcessedPacket(plen))
    155a:	ce 01       	movw	r24, r28
    155c:	2b d0       	rcall	.+86     	; 0x15b4 <_ZN9EtherCard27udpServerHasProcessedPacketEj>
    155e:	04 c0       	rjmp	.+8      	; 0x1568 <_ZN9EtherCard10packetLoopEj+0x268>
    1560:	ca 32       	cpi	r28, 0x2A	; 42
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
    1562:	d1 05       	cpc	r29, r1
    1564:	08 f0       	brcs	.+2      	; 0x1568 <_ZN9EtherCard10packetLoopEj+0x268>
    1566:	8c cf       	rjmp	.-232    	; 0x1480 <_ZN9EtherCard10packetLoopEj+0x180>
    1568:	80 e0       	ldi	r24, 0x00	; 0

    if (plen<54 || gPB[IP_PROTO_P]!=IP_PROTO_TCP_V )
        return 0; //from here on we are only interested in TCP-packets; these are longer than 54 bytes
		
	return 0;
}
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	df 91       	pop	r29
    156e:	cf 91       	pop	r28
    1570:	08 95       	ret

00001572 <_ZN9EtherCard21udpServerListenOnPortEPFvjPhjPKcjEj>:
    1572:	9c 01       	movw	r18, r24
    {
        if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((uint8_t) listeners[i].port)) {
            listeners[i].listening = true;
        }
    }
}
    1574:	90 91 36 05 	lds	r25, 0x0536	; 0x800536 <numListeners>
    1578:	98 30       	cpi	r25, 0x08	; 8
    157a:	a0 f4       	brcc	.+40     	; 0x15a4 <_ZN9EtherCard21udpServerListenOnPortEPFvjPhjPKcjEj+0x32>
    157c:	e9 2f       	mov	r30, r25
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	af 01       	movw	r20, r30
    1582:	44 0f       	add	r20, r20
    1584:	55 1f       	adc	r21, r21
    1586:	44 0f       	add	r20, r20
    1588:	55 1f       	adc	r21, r21
    158a:	e4 0f       	add	r30, r20
    158c:	f5 1f       	adc	r31, r21
    158e:	e9 5c       	subi	r30, 0xC9	; 201
    1590:	fa 4f       	sbci	r31, 0xFA	; 250
    1592:	31 83       	std	Z+1, r19	; 0x01
    1594:	20 83       	st	Z, r18
    1596:	73 83       	std	Z+3, r23	; 0x03
    1598:	62 83       	std	Z+2, r22	; 0x02
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	84 83       	std	Z+4, r24	; 0x04
    159e:	9f 5f       	subi	r25, 0xFF	; 255
    15a0:	90 93 36 05 	sts	0x0536, r25	; 0x800536 <numListeners>
    15a4:	08 95       	ret

000015a6 <_ZN9EtherCard18udpServerListeningEv>:

bool EtherCard::udpServerListening() {
    return numListeners > 0;
    15a6:	81 e0       	ldi	r24, 0x01	; 1
    15a8:	90 91 36 05 	lds	r25, 0x0536	; 0x800536 <numListeners>
    15ac:	91 11       	cpse	r25, r1
    15ae:	01 c0       	rjmp	.+2      	; 0x15b2 <_ZN9EtherCard18udpServerListeningEv+0xc>
    15b0:	80 e0       	ldi	r24, 0x00	; 0
}
    15b2:	08 95       	ret

000015b4 <_ZN9EtherCard27udpServerHasProcessedPacketEj>:

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    15b4:	8f 92       	push	r8
    15b6:	9f 92       	push	r9
    15b8:	bf 92       	push	r11
    15ba:	cf 92       	push	r12
    15bc:	df 92       	push	r13
    15be:	ef 92       	push	r14
    15c0:	ff 92       	push	r15
    15c2:	0f 93       	push	r16
    15c4:	1f 93       	push	r17
    15c6:	cf 93       	push	r28
    15c8:	df 93       	push	r29
    bool packetProcessed = false;
    for(int i = 0; i < numListeners; i++)
    15ca:	80 91 36 05 	lds	r24, 0x0536	; 0x800536 <numListeners>
    15ce:	88 23       	and	r24, r24
    15d0:	09 f4       	brne	.+2      	; 0x15d4 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x20>
    15d2:	46 c0       	rjmp	.+140    	; 0x1660 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0xac>
    15d4:	c7 e3       	ldi	r28, 0x37	; 55
    15d6:	d5 e0       	ldi	r29, 0x05	; 5
    15d8:	e1 2c       	mov	r14, r1
    15da:	f1 2c       	mov	r15, r1
    15dc:	80 e0       	ldi	r24, 0x00	; 0
    {
        if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((uint8_t) listeners[i].port) && listeners[i].listening)
    15de:	0f 2e       	mov	r0, r31
    15e0:	f3 e0       	ldi	r31, 0x03	; 3
    15e2:	cf 2e       	mov	r12, r31
    15e4:	f3 e0       	ldi	r31, 0x03	; 3
    15e6:	df 2e       	mov	r13, r31
    15e8:	f0 2d       	mov	r31, r0
                listeners[i].port,
                gPB + IP_SRC_P,
                (gPB[UDP_SRC_PORT_H_P] << 8) | gPB[UDP_SRC_PORT_L_P],
                (const char *) (gPB + UDP_DATA_P),
                datalen);
            packetProcessed = true;
    15ea:	bb 24       	eor	r11, r11
    15ec:	b3 94       	inc	r11

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    bool packetProcessed = false;
    for(int i = 0; i < numListeners; i++)
    {
        if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((uint8_t) listeners[i].port) && listeners[i].listening)
    15ee:	aa 81       	ldd	r26, Y+2	; 0x02
    15f0:	bb 81       	ldd	r27, Y+3	; 0x03
    15f2:	f6 01       	movw	r30, r12
    15f4:	24 a1       	ldd	r18, Z+36	; 0x24
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	4b 2f       	mov	r20, r27
    15fa:	55 27       	eor	r21, r21
    15fc:	24 17       	cp	r18, r20
    15fe:	35 07       	cpc	r19, r21
    1600:	21 f5       	brne	.+72     	; 0x164a <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x96>
    1602:	25 a1       	ldd	r18, Z+37	; 0x25
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	ad 01       	movw	r20, r26
    1608:	55 27       	eor	r21, r21
    160a:	24 17       	cp	r18, r20
    160c:	35 07       	cpc	r19, r21
    160e:	e9 f4       	brne	.+58     	; 0x164a <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x96>
    1610:	9c 81       	ldd	r25, Y+4	; 0x04
    1612:	99 23       	and	r25, r25
    1614:	d1 f0       	breq	.+52     	; 0x164a <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x96>
            listeners[i].callback(
                listeners[i].port,
                gPB + IP_SRC_P,
                (gPB[UDP_SRC_PORT_H_P] << 8) | gPB[UDP_SRC_PORT_L_P],
                (const char *) (gPB + UDP_DATA_P),
                datalen);
    1616:	07 a1       	ldd	r16, Z+39	; 0x27
    1618:	10 e0       	ldi	r17, 0x00	; 0
    161a:	08 50       	subi	r16, 0x08	; 8
    161c:	11 09       	sbc	r17, r1
    161e:	86 a1       	ldd	r24, Z+38	; 0x26
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	98 2f       	mov	r25, r24
    1624:	88 27       	eor	r24, r24
    1626:	08 0f       	add	r16, r24
    1628:	19 1f       	adc	r17, r25
    162a:	42 a1       	ldd	r20, Z+34	; 0x22
    162c:	50 e0       	ldi	r21, 0x00	; 0
    162e:	54 2f       	mov	r21, r20
    1630:	44 27       	eor	r20, r20
    1632:	83 a1       	ldd	r24, Z+35	; 0x23
    1634:	48 2b       	or	r20, r24
    1636:	88 80       	ld	r8, Y
    1638:	99 80       	ldd	r9, Y+1	; 0x01
    163a:	2d e2       	ldi	r18, 0x2D	; 45
    163c:	33 e0       	ldi	r19, 0x03	; 3
    163e:	6d e1       	ldi	r22, 0x1D	; 29
    1640:	73 e0       	ldi	r23, 0x03	; 3
    1642:	cd 01       	movw	r24, r26
    1644:	f4 01       	movw	r30, r8
    1646:	19 95       	eicall
            packetProcessed = true;
    1648:	8b 2d       	mov	r24, r11
    return numListeners > 0;
}

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    bool packetProcessed = false;
    for(int i = 0; i < numListeners; i++)
    164a:	ff ef       	ldi	r31, 0xFF	; 255
    164c:	ef 1a       	sub	r14, r31
    164e:	ff 0a       	sbc	r15, r31
    1650:	25 96       	adiw	r28, 0x05	; 5
    1652:	20 91 36 05 	lds	r18, 0x0536	; 0x800536 <numListeners>
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	e2 16       	cp	r14, r18
    165a:	f3 06       	cpc	r15, r19
    165c:	44 f2       	brlt	.-112    	; 0x15ee <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x3a>
    165e:	01 c0       	rjmp	.+2      	; 0x1662 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0xae>
bool EtherCard::udpServerListening() {
    return numListeners > 0;
}

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    bool packetProcessed = false;
    1660:	80 e0       	ldi	r24, 0x00	; 0
                datalen);
            packetProcessed = true;
        }
    }
    return packetProcessed;
}
    1662:	df 91       	pop	r29
    1664:	cf 91       	pop	r28
    1666:	1f 91       	pop	r17
    1668:	0f 91       	pop	r16
    166a:	ff 90       	pop	r15
    166c:	ef 90       	pop	r14
    166e:	df 90       	pop	r13
    1670:	cf 90       	pop	r12
    1672:	bf 90       	pop	r11
    1674:	9f 90       	pop	r9
    1676:	8f 90       	pop	r8
    1678:	08 95       	ret

0000167a <_ZN9EtherCard6copyIpEPhPKh>:
#include "../Peripherals/HardwareSerial.h"
#include <stdlib.h>
#include <ctype.h>

void EtherCard::copyIp (uint8_t *dst, const uint8_t *src) {
    memcpy(dst, src, IP_LEN);
    167a:	fb 01       	movw	r30, r22
    167c:	20 81       	ld	r18, Z
    167e:	31 81       	ldd	r19, Z+1	; 0x01
    1680:	fc 01       	movw	r30, r24
    1682:	31 83       	std	Z+1, r19	; 0x01
    1684:	20 83       	st	Z, r18
    1686:	fb 01       	movw	r30, r22
    1688:	22 81       	ldd	r18, Z+2	; 0x02
    168a:	33 81       	ldd	r19, Z+3	; 0x03
    168c:	fc 01       	movw	r30, r24
    168e:	33 83       	std	Z+3, r19	; 0x03
    1690:	22 83       	std	Z+2, r18	; 0x02
    1692:	08 95       	ret

00001694 <_ZN9EtherCard7copyMacEPhPKh>:
}

void EtherCard::copyMac (uint8_t *dst, const uint8_t *src) {
    1694:	dc 01       	movw	r26, r24
    memcpy(dst, src, ETH_LEN);
    1696:	96 e0       	ldi	r25, 0x06	; 6
    1698:	fb 01       	movw	r30, r22
    169a:	01 90       	ld	r0, Z+
    169c:	0d 92       	st	X+, r0
    169e:	9a 95       	dec	r25
    16a0:	e1 f7       	brne	.-8      	; 0x169a <_ZN9EtherCard7copyMacEPhPKh+0x6>
    16a2:	08 95       	ret

000016a4 <_ZN9EtherComm13CheckChecksumEPKch>:
	}
}

bool EtherComm::CheckChecksum(const char *data, uint8_t len){
  //data++; //Ignore first byte, the start byte.
  uint8_t checksum = (uint8_t)(*(data++)); //Start by 'adding' the command to the checksum
    16a4:	fc 01       	movw	r30, r24
    16a6:	20 81       	ld	r18, Z
  checksum += (uint8_t)(*(data++));
    16a8:	dc 01       	movw	r26, r24
    16aa:	12 96       	adiw	r26, 0x02	; 2
    16ac:	81 81       	ldd	r24, Z+1	; 0x01
    16ae:	92 2f       	mov	r25, r18
    16b0:	98 0f       	add	r25, r24
  while(len-- > 0){
    16b2:	3f ef       	ldi	r19, 0xFF	; 255
    16b4:	36 0f       	add	r19, r22
    16b6:	66 23       	and	r22, r22
    16b8:	61 f0       	breq	.+24     	; 0x16d2 <_ZN9EtherComm13CheckChecksumEPKch+0x2e>
    16ba:	fd 01       	movw	r30, r26
    16bc:	83 2f       	mov	r24, r19
    checksum += (uint8_t)(*(data++));
    16be:	21 91       	ld	r18, Z+
    16c0:	92 0f       	add	r25, r18

bool EtherComm::CheckChecksum(const char *data, uint8_t len){
  //data++; //Ignore first byte, the start byte.
  uint8_t checksum = (uint8_t)(*(data++)); //Start by 'adding' the command to the checksum
  checksum += (uint8_t)(*(data++));
  while(len-- > 0){
    16c2:	81 50       	subi	r24, 0x01	; 1
    16c4:	e0 f7       	brcc	.-8      	; 0x16be <_ZN9EtherComm13CheckChecksumEPKch+0x1a>
    16c6:	23 2f       	mov	r18, r19
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	2f 5f       	subi	r18, 0xFF	; 255
    16cc:	3f 4f       	sbci	r19, 0xFF	; 255
    16ce:	a2 0f       	add	r26, r18
    16d0:	b3 1f       	adc	r27, r19
    checksum += (uint8_t)(*(data++));
  }
//  Serial.println((uint8_t)(checksum & CHECKSUM_MASK));
  return (checksum & CHECKSUM_MASK) == (uint8_t)(*data);
    16d2:	81 e0       	ldi	r24, 0x01	; 1
    16d4:	2c 91       	ld	r18, X
    16d6:	29 13       	cpse	r18, r25
    16d8:	80 e0       	ldi	r24, 0x00	; 0
}
    16da:	08 95       	ret

000016dc <_Z10udpReceivejPhjPKcj>:

//char EtherComm::buffer[BUFFER_SIZE];
uint8_t* EtherComm::buffer = ether.buffer + UDP_DATA_P;

//callback that prints received packets to the serial port
void udpReceive(uint16_t dest_port, uint8_t src_ip[IP_LEN], uint16_t src_port, const char *data, uint16_t packetLen){
    16dc:	0f 93       	push	r16
    16de:	1f 93       	push	r17
    16e0:	cf 93       	push	r28
    16e2:	df 93       	push	r29
	}
	Serial.println();
	Serial.print("Checksum: ");
	Serial.println((uint8_t)(*index));
*/	
	if(packetLen >= 3){ //At minimum, start byte, command, and checksum.
    16e4:	a8 01       	movw	r20, r16
    16e6:	43 50       	subi	r20, 0x03	; 3
    16e8:	51 09       	sbc	r21, r1
    16ea:	4f 3f       	cpi	r20, 0xFF	; 255
    16ec:	51 05       	cpc	r21, r1
    16ee:	09 f0       	breq	.+2      	; 0x16f2 <_Z10udpReceivejPhjPKcj+0x16>
    16f0:	88 f4       	brcc	.+34     	; 0x1714 <_Z10udpReceivejPhjPKcj+0x38>
		if(packetLen <= 258){
			uint8_t dataLen = (uint8_t)(packetLen - 3);
			if((uint8_t)data[0] == START_BYTE){
    16f2:	f9 01       	movw	r30, r18
    16f4:	80 81       	ld	r24, Z
    16f6:	8f 3f       	cpi	r24, 0xFF	; 255
    16f8:	69 f4       	brne	.+26     	; 0x1714 <_Z10udpReceivejPhjPKcj+0x38>
    16fa:	e9 01       	movw	r28, r18
	Serial.print("Checksum: ");
	Serial.println((uint8_t)(*index));
*/	
	if(packetLen >= 3){ //At minimum, start byte, command, and checksum.
		if(packetLen <= 258){
			uint8_t dataLen = (uint8_t)(packetLen - 3);
    16fc:	03 50       	subi	r16, 0x03	; 3
			if((uint8_t)data[0] == START_BYTE){
			//		Serial.print("Computed Checksum: ");
				if(EtherComm::CheckChecksum(data, dataLen)){
    16fe:	60 2f       	mov	r22, r16
    1700:	c9 01       	movw	r24, r18
    1702:	d0 df       	rcall	.-96     	; 0x16a4 <_ZN9EtherComm13CheckChecksumEPKch>
    1704:	88 23       	and	r24, r24
    1706:	31 f0       	breq	.+12     	; 0x1714 <_Z10udpReceivejPhjPKcj+0x38>
					EtherComm::CommandReceived((uint8_t)data[1], (const uint8_t*)(data + 2), dataLen);
    1708:	be 01       	movw	r22, r28
    170a:	6e 5f       	subi	r22, 0xFE	; 254
    170c:	7f 4f       	sbci	r23, 0xFF	; 255
    170e:	40 2f       	mov	r20, r16
    1710:	89 81       	ldd	r24, Y+1	; 0x01
    1712:	90 d9       	rcall	.-3296   	; 0xa34 <_ZN9EtherComm15CommandReceivedEhPKhh>
				}
			}
		}
	}
}
    1714:	df 91       	pop	r29
    1716:	cf 91       	pop	r28
    1718:	1f 91       	pop	r17
    171a:	0f 91       	pop	r16
    171c:	08 95       	ret

0000171e <_ZN9EtherComm5beginEjjRVhS1_h>:
  }
//  Serial.println((uint8_t)(checksum & CHECKSUM_MASK));
  return (checksum & CHECKSUM_MASK) == (uint8_t)(*data);
}

bool EtherComm::begin(uint16_t recvPort, uint16_t destPort, Register& csDDR, Register& csPort, uint8_t csPin){
    171e:	0f 93       	push	r16
    1720:	cf 93       	push	r28
    1722:	df 93       	push	r29
    1724:	ec 01       	movw	r28, r24
    1726:	ca 01       	movw	r24, r20
    1728:	a9 01       	movw	r20, r18
    172a:	20 2f       	mov	r18, r16
  EtherComm::_recvPort = recvPort;
    172c:	d0 93 62 05 	sts	0x0562, r29	; 0x800562 <_ZN9EtherComm9_recvPortE+0x1>
    1730:	c0 93 61 05 	sts	0x0561, r28	; 0x800561 <_ZN9EtherComm9_recvPortE>
  EtherComm::_destPort = destPort;
    1734:	70 93 60 05 	sts	0x0560, r23	; 0x800560 <_ZN9EtherComm9_destPortE+0x1>
    1738:	60 93 5f 05 	sts	0x055F, r22	; 0x80055f <_ZN9EtherComm9_destPortE>
  
  if (ether.begin(EtherComm::_mymac, csDDR, csPort, csPin) == 0) return false;
    173c:	bc 01       	movw	r22, r24
    173e:	86 e0       	ldi	r24, 0x06	; 6
    1740:	92 e0       	ldi	r25, 0x02	; 2
    1742:	d3 db       	rcall	.-2138   	; 0xeea <_ZN9EtherCard5beginEPKhRVhS3_h>
    1744:	88 23       	and	r24, r24
    1746:	79 f0       	breq	.+30     	; 0x1766 <_ZN9EtherComm5beginEjjRVhS1_h+0x48>
  ether.staticSetup(EtherComm::_myip, EtherComm::_gwip);
    1748:	20 e0       	ldi	r18, 0x00	; 0
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	40 e0       	ldi	r20, 0x00	; 0
    174e:	50 e0       	ldi	r21, 0x00	; 0
    1750:	6c e0       	ldi	r22, 0x0C	; 12
    1752:	72 e0       	ldi	r23, 0x02	; 2
    1754:	80 e1       	ldi	r24, 0x10	; 16
    1756:	92 e0       	ldi	r25, 0x02	; 2
    1758:	e1 db       	rcall	.-2110   	; 0xf1c <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_>
  ether.printIp("GW:  ", ether.gwip);
  ether.printIp("DNS: ", ether.dnsip);
  */
  
  //Register the udpSerialPrint() method to listen to port the receive port.
  ether.udpServerListenOnPort(&udpReceive, recvPort);
    175a:	be 01       	movw	r22, r28
    175c:	8e e6       	ldi	r24, 0x6E	; 110
    175e:	9b e0       	ldi	r25, 0x0B	; 11
    1760:	08 df       	rcall	.-496    	; 0x1572 <_ZN9EtherCard21udpServerListenOnPortEPFvjPhjPKcjEj>
  
  return true;
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	01 c0       	rjmp	.+2      	; 0x1768 <_ZN9EtherComm5beginEjjRVhS1_h+0x4a>

bool EtherComm::begin(uint16_t recvPort, uint16_t destPort, Register& csDDR, Register& csPort, uint8_t csPin){
  EtherComm::_recvPort = recvPort;
  EtherComm::_destPort = destPort;
  
  if (ether.begin(EtherComm::_mymac, csDDR, csPort, csPin) == 0) return false;
    1766:	80 e0       	ldi	r24, 0x00	; 0
  
  //Register the udpSerialPrint() method to listen to port the receive port.
  ether.udpServerListenOnPort(&udpReceive, recvPort);
  
  return true;
}
    1768:	df 91       	pop	r29
    176a:	cf 91       	pop	r28
    176c:	0f 91       	pop	r16
    176e:	08 95       	ret

00001770 <_ZN9EtherComm11SendCommandEhh>:

void EtherComm::SendCommand(uint8_t cmd, uint8_t len){
    1770:	0f 93       	push	r16
    1772:	1f 93       	push	r17
    1774:	cf 93       	push	r28
    1776:	df 93       	push	r29
  EtherComm::buffer[0] = START_BYTE;
    1778:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    177c:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    1780:	9f ef       	ldi	r25, 0xFF	; 255
    1782:	90 83       	st	Z, r25
  EtherComm::buffer[1] = cmd;
    1784:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    1788:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    178c:	81 83       	std	Z+1, r24	; 0x01
  //EtherComm::buffer[2] = len;
  
  uint8_t checksum = START_BYTE + cmd;
    178e:	81 50       	subi	r24, 0x01	; 1
  uint8_t* index = &EtherComm::buffer[2]; //TODO why is char* being used? convert ot uint8_t*!!
    1790:	c0 91 00 02 	lds	r28, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    1794:	d0 91 01 02 	lds	r29, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    1798:	de 01       	movw	r26, r28
    179a:	12 96       	adiw	r26, 0x02	; 2
  uint8_t bytes = len;
  while(bytes-- > 0){
    179c:	4f ef       	ldi	r20, 0xFF	; 255
    179e:	46 0f       	add	r20, r22
    17a0:	66 23       	and	r22, r22
    17a2:	81 f0       	breq	.+32     	; 0x17c4 <_ZN9EtherComm11SendCommandEhh+0x54>
    17a4:	fd 01       	movw	r30, r26
    17a6:	50 e0       	ldi	r21, 0x00	; 0
    17a8:	9a 01       	movw	r18, r20
    17aa:	2d 5f       	subi	r18, 0xFD	; 253
    17ac:	3f 4f       	sbci	r19, 0xFF	; 255
    17ae:	2c 0f       	add	r18, r28
    17b0:	3d 1f       	adc	r19, r29
    checksum += (uint8_t)(*(index++));  
    17b2:	91 91       	ld	r25, Z+
    17b4:	89 0f       	add	r24, r25
  //EtherComm::buffer[2] = len;
  
  uint8_t checksum = START_BYTE + cmd;
  uint8_t* index = &EtherComm::buffer[2]; //TODO why is char* being used? convert ot uint8_t*!!
  uint8_t bytes = len;
  while(bytes-- > 0){
    17b6:	e2 17       	cp	r30, r18
    17b8:	f3 07       	cpc	r31, r19
    17ba:	d9 f7       	brne	.-10     	; 0x17b2 <_ZN9EtherComm11SendCommandEhh+0x42>
    17bc:	4f 5f       	subi	r20, 0xFF	; 255
    17be:	5f 4f       	sbci	r21, 0xFF	; 255
    17c0:	a4 0f       	add	r26, r20
    17c2:	b5 1f       	adc	r27, r21
    checksum += (uint8_t)(*(index++));  
  }
  (*index) = (uint8_t)(checksum & CHECKSUM_MASK);
    17c4:	8c 93       	st	X, r24

  //Serial.print("Send: ");
  //Serial.println(len);
  ether.sendUdp(EtherComm::buffer, (uint16_t)len + (uint16_t)3, _recvPort, _destIP, _destPort);
    17c6:	00 91 5f 05 	lds	r16, 0x055F	; 0x80055f <_ZN9EtherComm9_destPortE>
    17ca:	10 91 60 05 	lds	r17, 0x0560	; 0x800560 <_ZN9EtherComm9_destPortE+0x1>
    17ce:	40 91 61 05 	lds	r20, 0x0561	; 0x800561 <_ZN9EtherComm9_recvPortE>
    17d2:	50 91 62 05 	lds	r21, 0x0562	; 0x800562 <_ZN9EtherComm9_recvPortE+0x1>
    17d6:	70 e0       	ldi	r23, 0x00	; 0
    17d8:	6d 5f       	subi	r22, 0xFD	; 253
    17da:	7f 4f       	sbci	r23, 0xFF	; 255
    17dc:	22 e0       	ldi	r18, 0x02	; 2
    17de:	32 e0       	ldi	r19, 0x02	; 2
    17e0:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    17e4:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    17e8:	52 dd       	rcall	.-1372   	; 0x128e <_ZN9EtherCard7sendUdpEPKhjjS1_j>
}
    17ea:	df 91       	pop	r29
    17ec:	cf 91       	pop	r28
    17ee:	1f 91       	pop	r17
    17f0:	0f 91       	pop	r16
    17f2:	08 95       	ret

000017f4 <main>:
#define MIN 550
#define MAX 2400

int main(void){
	//TestIMU();
	sei(); //Enable global interrupts
    17f4:	78 94       	sei
	public:
	inline HardwareSerial(
	volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
	volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
	volatile uint8_t *ucsrc, volatile uint8_t *udr);
	void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    17f6:	26 e0       	ldi	r18, 0x06	; 6
    17f8:	40 e8       	ldi	r20, 0x80	; 128
    17fa:	55 e2       	ldi	r21, 0x25	; 37
    17fc:	60 e0       	ldi	r22, 0x00	; 0
    17fe:	70 e0       	ldi	r23, 0x00	; 0
    1800:	83 e6       	ldi	r24, 0x63	; 99
    1802:	95 e0       	ldi	r25, 0x05	; 5
    1804:	30 d2       	rcall	.+1120   	; 0x1c66 <_ZN14HardwareSerial5beginEmh>
	Serial.begin(9600);
	Serial.println("\nInitializing...");
    1806:	6d e2       	ldi	r22, 0x2D	; 45
    1808:	72 e0       	ldi	r23, 0x02	; 2
    180a:	83 e6       	ldi	r24, 0x63	; 99
    180c:	95 e0       	ldi	r25, 0x05	; 5
    180e:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <_ZN5Print7printlnEPKc>
	
	if(!rov.begin()){
    1812:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <_ZN5Robot5beginEv>
    1816:	81 11       	cpse	r24, r1
    1818:	07 c0       	rjmp	.+14     	; 0x1828 <main+0x34>
		Serial.println("Failed to initialize robot.");
    181a:	6e e3       	ldi	r22, 0x3E	; 62
    181c:	72 e0       	ldi	r23, 0x02	; 2
    181e:	83 e6       	ldi	r24, 0x63	; 99
    1820:	95 e0       	ldi	r25, 0x05	; 5
    1822:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <_ZN5Print7printlnEPKc>
    1826:	ff cf       	rjmp	.-2      	; 0x1826 <main+0x32>
		while(1);
	}
	Serial.println("Robot initialized.");
    1828:	6a e5       	ldi	r22, 0x5A	; 90
    182a:	72 e0       	ldi	r23, 0x02	; 2
    182c:	83 e6       	ldi	r24, 0x63	; 99
    182e:	95 e0       	ldi	r25, 0x05	; 5
    1830:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <_ZN5Print7printlnEPKc>
	
	if(!EtherComm::begin((uint16_t)6001, (uint16_t)6002, EthernetDDR, EthernetPort, EthernetPin_CS)){
    1834:	01 e0       	ldi	r16, 0x01	; 1
    1836:	25 e2       	ldi	r18, 0x25	; 37
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	44 e2       	ldi	r20, 0x24	; 36
    183c:	50 e0       	ldi	r21, 0x00	; 0
    183e:	62 e7       	ldi	r22, 0x72	; 114
    1840:	77 e1       	ldi	r23, 0x17	; 23
    1842:	81 e7       	ldi	r24, 0x71	; 113
    1844:	97 e1       	ldi	r25, 0x17	; 23
    1846:	6b df       	rcall	.-298    	; 0x171e <_ZN9EtherComm5beginEjjRVhS1_h>
    1848:	81 11       	cpse	r24, r1
    184a:	07 c0       	rjmp	.+14     	; 0x185a <main+0x66>
		Serial.println("Failed to access Ethernet controller.");
    184c:	6d e6       	ldi	r22, 0x6D	; 109
    184e:	72 e0       	ldi	r23, 0x02	; 2
    1850:	83 e6       	ldi	r24, 0x63	; 99
    1852:	95 e0       	ldi	r25, 0x05	; 5
    1854:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <_ZN5Print7printlnEPKc>
    1858:	ff cf       	rjmp	.-2      	; 0x1858 <main+0x64>
		while(1);
	}
	Serial.println("Connected to controller.");
    185a:	63 e9       	ldi	r22, 0x93	; 147
    185c:	72 e0       	ldi	r23, 0x02	; 2
    185e:	83 e6       	ldi	r24, 0x63	; 99
    1860:	95 e0       	ldi	r25, 0x05	; 5
    1862:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <_ZN5Print7printlnEPKc>
	
	DDRB |= _BV(PINB5) | _BV(PINB6);
    1866:	84 b1       	in	r24, 0x04	; 4
    1868:	80 66       	ori	r24, 0x60	; 96
    186a:	84 b9       	out	0x04, r24	; 4
	DDRE |= _BV(PINE3) | _BV(PINE4) | _BV(PINE5);
    186c:	8d b1       	in	r24, 0x0d	; 13
    186e:	88 63       	ori	r24, 0x38	; 56
    1870:	8d b9       	out	0x0d, r24	; 13
	DDRH |= _BV(PINH3) | _BV(PINH4) | _BV(PINH5);
    1872:	e1 e0       	ldi	r30, 0x01	; 1
    1874:	f1 e0       	ldi	r31, 0x01	; 1
    1876:	80 81       	ld	r24, Z
    1878:	88 63       	ori	r24, 0x38	; 56
    187a:	80 83       	st	Z, r24
	DDRL |= _BV(PINL3) | _BV(PINL4) | _BV(PINL5);
    187c:	ea e0       	ldi	r30, 0x0A	; 10
    187e:	f1 e0       	ldi	r31, 0x01	; 1
    1880:	80 81       	ld	r24, Z
    1882:	88 63       	ori	r24, 0x38	; 56
    1884:	80 83       	st	Z, r24
	
	
	Servo1.begin();
    1886:	8f e2       	ldi	r24, 0x2F	; 47
    1888:	96 e0       	ldi	r25, 0x06	; 6
    188a:	9f d4       	rcall	.+2366   	; 0x21ca <_ZN13HardwareServo5beginEv>
	Servo1.setMinA(MIN);
    188c:	66 e2       	ldi	r22, 0x26	; 38
    188e:	72 e0       	ldi	r23, 0x02	; 2
    1890:	8f e2       	ldi	r24, 0x2F	; 47
    1892:	96 e0       	ldi	r25, 0x06	; 6
    1894:	36 d5       	rcall	.+2668   	; 0x2302 <_ZN13HardwareServo7setMinAEj>
	Servo1.setMinB(MIN);
    1896:	66 e2       	ldi	r22, 0x26	; 38
    1898:	72 e0       	ldi	r23, 0x02	; 2
    189a:	8f e2       	ldi	r24, 0x2F	; 47
    189c:	96 e0       	ldi	r25, 0x06	; 6
    189e:	35 d5       	rcall	.+2666   	; 0x230a <_ZN13HardwareServo7setMinBEj>
	//Servo1.setMinC(MIN);
	Servo1.setMaxA(MAX);
    18a0:	60 e6       	ldi	r22, 0x60	; 96
    18a2:	79 e0       	ldi	r23, 0x09	; 9
    18a4:	8f e2       	ldi	r24, 0x2F	; 47
    18a6:	96 e0       	ldi	r25, 0x06	; 6
    18a8:	38 d5       	rcall	.+2672   	; 0x231a <_ZN13HardwareServo7setMaxAEj>
	Servo1.setMaxB(MAX);
    18aa:	60 e6       	ldi	r22, 0x60	; 96
    18ac:	79 e0       	ldi	r23, 0x09	; 9
    18ae:	8f e2       	ldi	r24, 0x2F	; 47
    18b0:	96 e0       	ldi	r25, 0x06	; 6
    18b2:	37 d5       	rcall	.+2670   	; 0x2322 <_ZN13HardwareServo7setMaxBEj>
	Servo1.setMaxC(MAX);
    18b4:	60 e6       	ldi	r22, 0x60	; 96
    18b6:	79 e0       	ldi	r23, 0x09	; 9
    18b8:	8f e2       	ldi	r24, 0x2F	; 47
    18ba:	96 e0       	ldi	r25, 0x06	; 6
	Servo1.EnableA();
    18bc:	36 d5       	rcall	.+2668   	; 0x232a <_ZN13HardwareServo7setMaxCEj>
    18be:	8f e2       	ldi	r24, 0x2F	; 47
    18c0:	96 e0       	ldi	r25, 0x06	; 6
	Servo1.EnableB();
    18c2:	94 d4       	rcall	.+2344   	; 0x21ec <_ZN13HardwareServo7EnableAEv>
    18c4:	8f e2       	ldi	r24, 0x2F	; 47
    18c6:	96 e0       	ldi	r25, 0x06	; 6
    18c8:	9a d4       	rcall	.+2356   	; 0x21fe <_ZN13HardwareServo7EnableBEv>
	Servo1.EnableC();
    18ca:	8f e2       	ldi	r24, 0x2F	; 47
    18cc:	96 e0       	ldi	r25, 0x06	; 6
    18ce:	a0 d4       	rcall	.+2368   	; 0x2210 <_ZN13HardwareServo7EnableCEv>
	
	Servo3.begin();
    18d0:	87 e4       	ldi	r24, 0x47	; 71
    18d2:	96 e0       	ldi	r25, 0x06	; 6
    18d4:	7a d4       	rcall	.+2292   	; 0x21ca <_ZN13HardwareServo5beginEv>
	Servo3.setMinA(MIN);
    18d6:	66 e2       	ldi	r22, 0x26	; 38
    18d8:	72 e0       	ldi	r23, 0x02	; 2
    18da:	87 e4       	ldi	r24, 0x47	; 71
    18dc:	96 e0       	ldi	r25, 0x06	; 6
    18de:	11 d5       	rcall	.+2594   	; 0x2302 <_ZN13HardwareServo7setMinAEj>
	Servo3.setMinB(MIN);
    18e0:	66 e2       	ldi	r22, 0x26	; 38
    18e2:	72 e0       	ldi	r23, 0x02	; 2
    18e4:	87 e4       	ldi	r24, 0x47	; 71
    18e6:	96 e0       	ldi	r25, 0x06	; 6
    18e8:	10 d5       	rcall	.+2592   	; 0x230a <_ZN13HardwareServo7setMinBEj>
	Servo3.setMinC(MIN);
    18ea:	66 e2       	ldi	r22, 0x26	; 38
    18ec:	72 e0       	ldi	r23, 0x02	; 2
    18ee:	87 e4       	ldi	r24, 0x47	; 71
    18f0:	96 e0       	ldi	r25, 0x06	; 6
    18f2:	0f d5       	rcall	.+2590   	; 0x2312 <_ZN13HardwareServo7setMinCEj>
	Servo3.setMaxA(MAX);
    18f4:	60 e6       	ldi	r22, 0x60	; 96
    18f6:	79 e0       	ldi	r23, 0x09	; 9
    18f8:	87 e4       	ldi	r24, 0x47	; 71
    18fa:	96 e0       	ldi	r25, 0x06	; 6
    18fc:	0e d5       	rcall	.+2588   	; 0x231a <_ZN13HardwareServo7setMaxAEj>
	Servo3.setMaxB(MAX);
    18fe:	60 e6       	ldi	r22, 0x60	; 96
    1900:	79 e0       	ldi	r23, 0x09	; 9
    1902:	87 e4       	ldi	r24, 0x47	; 71
    1904:	96 e0       	ldi	r25, 0x06	; 6
    1906:	0d d5       	rcall	.+2586   	; 0x2322 <_ZN13HardwareServo7setMaxBEj>
	Servo3.setMaxC(MAX);
    1908:	60 e6       	ldi	r22, 0x60	; 96
    190a:	79 e0       	ldi	r23, 0x09	; 9
    190c:	87 e4       	ldi	r24, 0x47	; 71
    190e:	96 e0       	ldi	r25, 0x06	; 6
    1910:	0c d5       	rcall	.+2584   	; 0x232a <_ZN13HardwareServo7setMaxCEj>
	Servo3.EnableA();
    1912:	87 e4       	ldi	r24, 0x47	; 71
    1914:	96 e0       	ldi	r25, 0x06	; 6
    1916:	6a d4       	rcall	.+2260   	; 0x21ec <_ZN13HardwareServo7EnableAEv>
	Servo3.EnableB();
    1918:	87 e4       	ldi	r24, 0x47	; 71
    191a:	96 e0       	ldi	r25, 0x06	; 6
    191c:	70 d4       	rcall	.+2272   	; 0x21fe <_ZN13HardwareServo7EnableBEv>
    191e:	87 e4       	ldi	r24, 0x47	; 71
	Servo3.EnableC();
    1920:	96 e0       	ldi	r25, 0x06	; 6
    1922:	76 d4       	rcall	.+2284   	; 0x2210 <_ZN13HardwareServo7EnableCEv>
    1924:	8f e5       	ldi	r24, 0x5F	; 95
	
	Servo4.begin();
    1926:	96 e0       	ldi	r25, 0x06	; 6
    1928:	50 d4       	rcall	.+2208   	; 0x21ca <_ZN13HardwareServo5beginEv>
    192a:	66 e2       	ldi	r22, 0x26	; 38
	Servo4.setMinA(MIN);
    192c:	72 e0       	ldi	r23, 0x02	; 2
    192e:	8f e5       	ldi	r24, 0x5F	; 95
    1930:	96 e0       	ldi	r25, 0x06	; 6
    1932:	e7 d4       	rcall	.+2510   	; 0x2302 <_ZN13HardwareServo7setMinAEj>
    1934:	66 e2       	ldi	r22, 0x26	; 38
	Servo4.setMinB(MIN);
    1936:	72 e0       	ldi	r23, 0x02	; 2
    1938:	8f e5       	ldi	r24, 0x5F	; 95
    193a:	96 e0       	ldi	r25, 0x06	; 6
    193c:	e6 d4       	rcall	.+2508   	; 0x230a <_ZN13HardwareServo7setMinBEj>
	Servo4.setMinC(MIN);
    193e:	66 e2       	ldi	r22, 0x26	; 38
    1940:	72 e0       	ldi	r23, 0x02	; 2
    1942:	8f e5       	ldi	r24, 0x5F	; 95
    1944:	96 e0       	ldi	r25, 0x06	; 6
	Servo4.setMaxA(MAX);
    1946:	e5 d4       	rcall	.+2506   	; 0x2312 <_ZN13HardwareServo7setMinCEj>
    1948:	60 e6       	ldi	r22, 0x60	; 96
    194a:	79 e0       	ldi	r23, 0x09	; 9
    194c:	8f e5       	ldi	r24, 0x5F	; 95
    194e:	96 e0       	ldi	r25, 0x06	; 6
	Servo4.setMaxB(MAX);
    1950:	e4 d4       	rcall	.+2504   	; 0x231a <_ZN13HardwareServo7setMaxAEj>
    1952:	60 e6       	ldi	r22, 0x60	; 96
    1954:	79 e0       	ldi	r23, 0x09	; 9
    1956:	8f e5       	ldi	r24, 0x5F	; 95
    1958:	96 e0       	ldi	r25, 0x06	; 6
	Servo4.setMaxC(MAX);
    195a:	e3 d4       	rcall	.+2502   	; 0x2322 <_ZN13HardwareServo7setMaxBEj>
    195c:	60 e6       	ldi	r22, 0x60	; 96
    195e:	79 e0       	ldi	r23, 0x09	; 9
    1960:	8f e5       	ldi	r24, 0x5F	; 95
    1962:	96 e0       	ldi	r25, 0x06	; 6
	Servo4.EnableA();
    1964:	e2 d4       	rcall	.+2500   	; 0x232a <_ZN13HardwareServo7setMaxCEj>
    1966:	8f e5       	ldi	r24, 0x5F	; 95
    1968:	96 e0       	ldi	r25, 0x06	; 6
	Servo4.EnableB();
    196a:	40 d4       	rcall	.+2176   	; 0x21ec <_ZN13HardwareServo7EnableAEv>
    196c:	8f e5       	ldi	r24, 0x5F	; 95
    196e:	96 e0       	ldi	r25, 0x06	; 6
    1970:	46 d4       	rcall	.+2188   	; 0x21fe <_ZN13HardwareServo7EnableBEv>
	Servo4.EnableC();
    1972:	8f e5       	ldi	r24, 0x5F	; 95
    1974:	96 e0       	ldi	r25, 0x06	; 6
    1976:	4c d4       	rcall	.+2200   	; 0x2210 <_ZN13HardwareServo7EnableCEv>
	
	Servo5.begin();
    1978:	87 e7       	ldi	r24, 0x77	; 119
    197a:	96 e0       	ldi	r25, 0x06	; 6
    197c:	26 d4       	rcall	.+2124   	; 0x21ca <_ZN13HardwareServo5beginEv>
	Servo5.setMinA(MIN);
    197e:	66 e2       	ldi	r22, 0x26	; 38
    1980:	72 e0       	ldi	r23, 0x02	; 2
    1982:	87 e7       	ldi	r24, 0x77	; 119
    1984:	96 e0       	ldi	r25, 0x06	; 6
	Servo5.setMinB(MIN);
    1986:	bd d4       	rcall	.+2426   	; 0x2302 <_ZN13HardwareServo7setMinAEj>
    1988:	66 e2       	ldi	r22, 0x26	; 38
    198a:	72 e0       	ldi	r23, 0x02	; 2
    198c:	87 e7       	ldi	r24, 0x77	; 119
	Servo5.setMinC(MIN);
    198e:	96 e0       	ldi	r25, 0x06	; 6
    1990:	bc d4       	rcall	.+2424   	; 0x230a <_ZN13HardwareServo7setMinBEj>
    1992:	66 e2       	ldi	r22, 0x26	; 38
    1994:	72 e0       	ldi	r23, 0x02	; 2
    1996:	87 e7       	ldi	r24, 0x77	; 119
	Servo5.setMaxA(MAX);
    1998:	96 e0       	ldi	r25, 0x06	; 6
    199a:	bb d4       	rcall	.+2422   	; 0x2312 <_ZN13HardwareServo7setMinCEj>
    199c:	60 e6       	ldi	r22, 0x60	; 96
    199e:	79 e0       	ldi	r23, 0x09	; 9
    19a0:	87 e7       	ldi	r24, 0x77	; 119
	Servo5.setMaxB(MAX);
    19a2:	96 e0       	ldi	r25, 0x06	; 6
    19a4:	ba d4       	rcall	.+2420   	; 0x231a <_ZN13HardwareServo7setMaxAEj>
    19a6:	60 e6       	ldi	r22, 0x60	; 96
    19a8:	79 e0       	ldi	r23, 0x09	; 9
    19aa:	87 e7       	ldi	r24, 0x77	; 119
	Servo5.setMaxC(MAX);
    19ac:	96 e0       	ldi	r25, 0x06	; 6
    19ae:	b9 d4       	rcall	.+2418   	; 0x2322 <_ZN13HardwareServo7setMaxBEj>
    19b0:	60 e6       	ldi	r22, 0x60	; 96
    19b2:	79 e0       	ldi	r23, 0x09	; 9
    19b4:	87 e7       	ldi	r24, 0x77	; 119
	Servo5.EnableA();
    19b6:	96 e0       	ldi	r25, 0x06	; 6
    19b8:	b8 d4       	rcall	.+2416   	; 0x232a <_ZN13HardwareServo7setMaxCEj>
    19ba:	87 e7       	ldi	r24, 0x77	; 119
	Servo5.EnableB();
    19bc:	96 e0       	ldi	r25, 0x06	; 6
    19be:	16 d4       	rcall	.+2092   	; 0x21ec <_ZN13HardwareServo7EnableAEv>
    19c0:	87 e7       	ldi	r24, 0x77	; 119
	Servo5.EnableC();
    19c2:	96 e0       	ldi	r25, 0x06	; 6
    19c4:	1c d4       	rcall	.+2104   	; 0x21fe <_ZN13HardwareServo7EnableBEv>
    19c6:	87 e7       	ldi	r24, 0x77	; 119
		pos += dir;
		if(pos == 255){
			dir = -1;
			_delay_ms(500);
		} else if(pos == 0) {
			dir = 1;
    19c8:	96 e0       	ldi	r25, 0x06	; 6
		Servo5.setPulseA(pos);
		Servo5.setPulseB(pos);
		Servo5.setPulseC(pos);
		pos += dir;
		if(pos == 255){
			dir = -1;
    19ca:	22 d4       	rcall	.+2116   	; 0x2210 <_ZN13HardwareServo7EnableCEv>
  static bool begin(uint16_t recvPort, uint16_t destPort, Register& csDDR, Register& csPort, uint8_t csPin);

  friend void udpReceive(uint16_t dest_port, uint8_t src_ip[IP_LEN], uint16_t src_port, const char *data, uint16_t len);

  static void Loop(){
    ether.packetLoop(ether.packetReceive());
    19cc:	c1 e0       	ldi	r28, 0x01	; 1
    19ce:	df ef       	ldi	r29, 0xFF	; 255
    19d0:	27 da       	rcall	.-2994   	; 0xe20 <_ZN8ENC28J6013packetReceiveEv>
	Servo5.EnableC();
	
    /* Replace with your application code */
    while (1) {
		EtherComm::Loop();
		rov.Loop();
    19d2:	96 dc       	rcall	.-1748   	; 0x1300 <_ZN9EtherCard10packetLoopEj>
    19d4:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <_ZN5Robot4LoopEv>
		Servo1.setPulseA(pos);
    19d8:	60 91 14 02 	lds	r22, 0x0214	; 0x800214 <pos>
    19dc:	8f e2       	ldi	r24, 0x2F	; 47
    19de:	96 e0       	ldi	r25, 0x06	; 6
		Servo1.setPulseB(pos);
    19e0:	20 d4       	rcall	.+2112   	; 0x2222 <_ZN13HardwareServo9setPulseAEh>
    19e2:	60 91 14 02 	lds	r22, 0x0214	; 0x800214 <pos>
    19e6:	8f e2       	ldi	r24, 0x2F	; 47
    19e8:	96 e0       	ldi	r25, 0x06	; 6
		Servo1.setPulseC(pos);
    19ea:	41 d4       	rcall	.+2178   	; 0x226e <_ZN13HardwareServo9setPulseBEh>
    19ec:	60 91 14 02 	lds	r22, 0x0214	; 0x800214 <pos>
    19f0:	8f e2       	ldi	r24, 0x2F	; 47
    19f2:	96 e0       	ldi	r25, 0x06	; 6
		Servo3.setPulseA(pos);
    19f4:	61 d4       	rcall	.+2242   	; 0x22b8 <_ZN13HardwareServo9setPulseCEh>
    19f6:	60 91 14 02 	lds	r22, 0x0214	; 0x800214 <pos>
    19fa:	87 e4       	ldi	r24, 0x47	; 71
    19fc:	96 e0       	ldi	r25, 0x06	; 6
    19fe:	11 d4       	rcall	.+2082   	; 0x2222 <_ZN13HardwareServo9setPulseAEh>
		Servo3.setPulseB(pos);
    1a00:	60 91 14 02 	lds	r22, 0x0214	; 0x800214 <pos>
    1a04:	87 e4       	ldi	r24, 0x47	; 71
    1a06:	96 e0       	ldi	r25, 0x06	; 6
    1a08:	32 d4       	rcall	.+2148   	; 0x226e <_ZN13HardwareServo9setPulseBEh>
    1a0a:	60 91 14 02 	lds	r22, 0x0214	; 0x800214 <pos>
		Servo3.setPulseC(pos);
    1a0e:	87 e4       	ldi	r24, 0x47	; 71
    1a10:	96 e0       	ldi	r25, 0x06	; 6
    1a12:	52 d4       	rcall	.+2212   	; 0x22b8 <_ZN13HardwareServo9setPulseCEh>
    1a14:	60 91 14 02 	lds	r22, 0x0214	; 0x800214 <pos>
		Servo4.setPulseA(pos);
    1a18:	8f e5       	ldi	r24, 0x5F	; 95
    1a1a:	96 e0       	ldi	r25, 0x06	; 6
    1a1c:	02 d4       	rcall	.+2052   	; 0x2222 <_ZN13HardwareServo9setPulseAEh>
    1a1e:	60 91 14 02 	lds	r22, 0x0214	; 0x800214 <pos>
    1a22:	8f e5       	ldi	r24, 0x5F	; 95
		Servo4.setPulseB(pos);
    1a24:	96 e0       	ldi	r25, 0x06	; 6
    1a26:	23 d4       	rcall	.+2118   	; 0x226e <_ZN13HardwareServo9setPulseBEh>
    1a28:	60 91 14 02 	lds	r22, 0x0214	; 0x800214 <pos>
    1a2c:	8f e5       	ldi	r24, 0x5F	; 95
    1a2e:	96 e0       	ldi	r25, 0x06	; 6
		Servo4.setPulseC(pos);
    1a30:	43 d4       	rcall	.+2182   	; 0x22b8 <_ZN13HardwareServo9setPulseCEh>
    1a32:	60 91 14 02 	lds	r22, 0x0214	; 0x800214 <pos>
    1a36:	87 e7       	ldi	r24, 0x77	; 119
    1a38:	96 e0       	ldi	r25, 0x06	; 6
    1a3a:	f3 d3       	rcall	.+2022   	; 0x2222 <_ZN13HardwareServo9setPulseAEh>
		Servo5.setPulseA(pos);
    1a3c:	60 91 14 02 	lds	r22, 0x0214	; 0x800214 <pos>
    1a40:	87 e7       	ldi	r24, 0x77	; 119
    1a42:	96 e0       	ldi	r25, 0x06	; 6
    1a44:	14 d4       	rcall	.+2088   	; 0x226e <_ZN13HardwareServo9setPulseBEh>
    1a46:	60 91 14 02 	lds	r22, 0x0214	; 0x800214 <pos>
		Servo5.setPulseB(pos);
    1a4a:	87 e7       	ldi	r24, 0x77	; 119
    1a4c:	96 e0       	ldi	r25, 0x06	; 6
    1a4e:	34 d4       	rcall	.+2152   	; 0x22b8 <_ZN13HardwareServo9setPulseCEh>
    1a50:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <pos>
		Servo5.setPulseC(pos);
    1a54:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <dir>
    1a58:	89 0f       	add	r24, r25
    1a5a:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <pos>
    1a5e:	8f 3f       	cpi	r24, 0xFF	; 255
		pos += dir;
    1a60:	61 f4       	brne	.+24     	; 0x1a7a <main+0x286>
    1a62:	d0 93 15 02 	sts	0x0215, r29	; 0x800215 <dir>
    1a66:	2f ef       	ldi	r18, 0xFF	; 255
    1a68:	89 e6       	ldi	r24, 0x69	; 105
    1a6a:	98 e1       	ldi	r25, 0x18	; 24
    1a6c:	21 50       	subi	r18, 0x01	; 1
		if(pos == 255){
    1a6e:	80 40       	sbci	r24, 0x00	; 0
    1a70:	90 40       	sbci	r25, 0x00	; 0
			dir = -1;
    1a72:	e1 f7       	brne	.-8      	; 0x1a6c <main+0x278>
    1a74:	00 c0       	rjmp	.+0      	; 0x1a76 <main+0x282>
    1a76:	00 00       	nop
    1a78:	0d c0       	rjmp	.+26     	; 0x1a94 <main+0x2a0>
    1a7a:	81 11       	cpse	r24, r1
    1a7c:	0b c0       	rjmp	.+22     	; 0x1a94 <main+0x2a0>
    1a7e:	c0 93 15 02 	sts	0x0215, r28	; 0x800215 <dir>
    1a82:	2f ef       	ldi	r18, 0xFF	; 255
    1a84:	89 e6       	ldi	r24, 0x69	; 105
    1a86:	98 e1       	ldi	r25, 0x18	; 24
    1a88:	21 50       	subi	r18, 0x01	; 1
			_delay_ms(500);
		} else if(pos == 0) {
    1a8a:	80 40       	sbci	r24, 0x00	; 0
    1a8c:	90 40       	sbci	r25, 0x00	; 0
			dir = 1;
    1a8e:	e1 f7       	brne	.-8      	; 0x1a88 <main+0x294>
    1a90:	00 c0       	rjmp	.+0      	; 0x1a92 <main+0x29e>
    1a92:	00 00       	nop
    1a94:	8f e1       	ldi	r24, 0x1F	; 31
    1a96:	9e e4       	ldi	r25, 0x4E	; 78
    1a98:	01 97       	sbiw	r24, 0x01	; 1
    1a9a:	f1 f7       	brne	.-4      	; 0x1a98 <main+0x2a4>
    1a9c:	00 c0       	rjmp	.+0      	; 0x1a9e <main+0x2aa>
    1a9e:	00 00       	nop
    1aa0:	97 cf       	rjmp	.-210    	; 0x19d0 <main+0x1dc>

00001aa2 <_ZN14HardwareSerial9availableEv>:
    1aa2:	fc 01       	movw	r30, r24
    1aa4:	97 85       	ldd	r25, Z+15	; 0x0f
    1aa6:	20 89       	ldd	r18, Z+16	; 0x10
    1aa8:	89 2f       	mov	r24, r25
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	80 5c       	subi	r24, 0xC0	; 192
    1aae:	9f 4f       	sbci	r25, 0xFF	; 255
    1ab0:	82 1b       	sub	r24, r18
	#endif
	#if defined(HAVE_HWSERIAL2)
	if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
	#endif
	#if defined(HAVE_HWSERIAL3)
	if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    1ab2:	91 09       	sbc	r25, r1
    1ab4:	8f 73       	andi	r24, 0x3F	; 63
    1ab6:	99 27       	eor	r25, r25
    1ab8:	08 95       	ret

00001aba <_ZN14HardwareSerial4peekEv>:
    1aba:	fc 01       	movw	r30, r24
    1abc:	97 85       	ldd	r25, Z+15	; 0x0f
    1abe:	80 89       	ldd	r24, Z+16	; 0x10
    1ac0:	98 17       	cp	r25, r24
    1ac2:	31 f0       	breq	.+12     	; 0x1ad0 <_ZN14HardwareSerial4peekEv+0x16>
    1ac4:	80 89       	ldd	r24, Z+16	; 0x10
    1ac6:	e8 0f       	add	r30, r24
    1ac8:	f1 1d       	adc	r31, r1
    1aca:	83 89       	ldd	r24, Z+19	; 0x13
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	08 95       	ret
    1ad0:	8f ef       	ldi	r24, 0xFF	; 255
    1ad2:	9f ef       	ldi	r25, 0xFF	; 255
    1ad4:	08 95       	ret

00001ad6 <_ZN14HardwareSerial4readEv>:
    1ad6:	fc 01       	movw	r30, r24
    1ad8:	97 85       	ldd	r25, Z+15	; 0x0f
    1ada:	80 89       	ldd	r24, Z+16	; 0x10
    1adc:	98 17       	cp	r25, r24
    1ade:	61 f0       	breq	.+24     	; 0x1af8 <_ZN14HardwareSerial4readEv+0x22>
    1ae0:	80 89       	ldd	r24, Z+16	; 0x10
    1ae2:	df 01       	movw	r26, r30
    1ae4:	a8 0f       	add	r26, r24
    1ae6:	b1 1d       	adc	r27, r1
    1ae8:	53 96       	adiw	r26, 0x13	; 19
    1aea:	8c 91       	ld	r24, X
    1aec:	90 89       	ldd	r25, Z+16	; 0x10
    1aee:	9f 5f       	subi	r25, 0xFF	; 255
    1af0:	9f 73       	andi	r25, 0x3F	; 63
    1af2:	90 8b       	std	Z+16, r25	; 0x10
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	08 95       	ret
    1af8:	8f ef       	ldi	r24, 0xFF	; 255
    1afa:	9f ef       	ldi	r25, 0xFF	; 255
    1afc:	08 95       	ret

00001afe <_ZN14HardwareSerial17availableForWriteEv>:
    1afe:	fc 01       	movw	r30, r24
    1b00:	21 89       	ldd	r18, Z+17	; 0x11
    1b02:	32 89       	ldd	r19, Z+18	; 0x12
    1b04:	23 17       	cp	r18, r19
    1b06:	38 f0       	brcs	.+14     	; 0x1b16 <_ZN14HardwareSerial17availableForWriteEv+0x18>
    1b08:	8f e3       	ldi	r24, 0x3F	; 63
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	82 1b       	sub	r24, r18
    1b0e:	91 09       	sbc	r25, r1
    1b10:	83 0f       	add	r24, r19
    1b12:	91 1d       	adc	r25, r1
    1b14:	08 95       	ret
    1b16:	83 2f       	mov	r24, r19
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	82 1b       	sub	r24, r18
    1b1c:	91 09       	sbc	r25, r1
    1b1e:	01 97       	sbiw	r24, 0x01	; 1
    1b20:	08 95       	ret

00001b22 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1b22:	fc 01       	movw	r30, r24
	// If interrupts are enabled, there must be more data in the output
	// buffer. Send the next byte
	unsigned char c = _tx_buffer[_tx_buffer_tail];
    1b24:	82 89       	ldd	r24, Z+18	; 0x12
    1b26:	df 01       	movw	r26, r30
    1b28:	a8 0f       	add	r26, r24
    1b2a:	b1 1d       	adc	r27, r1
    1b2c:	ad 5a       	subi	r26, 0xAD	; 173
    1b2e:	bf 4f       	sbci	r27, 0xFF	; 255
    1b30:	8c 91       	ld	r24, X
	_tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1b32:	22 89       	ldd	r18, Z+18	; 0x12
    1b34:	30 e0       	ldi	r19, 0x00	; 0
    1b36:	2f 5f       	subi	r18, 0xFF	; 255
    1b38:	3f 4f       	sbci	r19, 0xFF	; 255
    1b3a:	2f 73       	andi	r18, 0x3F	; 63
    1b3c:	30 78       	andi	r19, 0x80	; 128
    1b3e:	33 23       	and	r19, r19
    1b40:	34 f4       	brge	.+12     	; 0x1b4e <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x2c>
    1b42:	21 50       	subi	r18, 0x01	; 1
    1b44:	31 09       	sbc	r19, r1
    1b46:	20 6c       	ori	r18, 0xC0	; 192
    1b48:	3f 6f       	ori	r19, 0xFF	; 255
    1b4a:	2f 5f       	subi	r18, 0xFF	; 255
    1b4c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b4e:	22 8b       	std	Z+18, r18	; 0x12

	*_udr = c;
    1b50:	a4 85       	ldd	r26, Z+12	; 0x0c
    1b52:	b5 85       	ldd	r27, Z+13	; 0x0d
    1b54:	8c 93       	st	X, r24
	// location". This makes sure flush() won't return until the bytes
	// actually got written. Other r/w bits are preserved, and zeroes
	// written to the rest.

	#ifdef MPCM0
	*_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1b56:	a6 81       	ldd	r26, Z+6	; 0x06
    1b58:	b7 81       	ldd	r27, Z+7	; 0x07
    1b5a:	8c 91       	ld	r24, X
    1b5c:	83 70       	andi	r24, 0x03	; 3
    1b5e:	80 64       	ori	r24, 0x40	; 64
    1b60:	8c 93       	st	X, r24
	#else
	*_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
	#endif

	if (_tx_buffer_head == _tx_buffer_tail) {
    1b62:	91 89       	ldd	r25, Z+17	; 0x11
    1b64:	82 89       	ldd	r24, Z+18	; 0x12
    1b66:	98 13       	cpse	r25, r24
    1b68:	06 c0       	rjmp	.+12     	; 0x1b76 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x54>
		// Buffer empty, so disable interrupts
		cbi(*_ucsrb, UDRIE0);
    1b6a:	00 84       	ldd	r0, Z+8	; 0x08
    1b6c:	f1 85       	ldd	r31, Z+9	; 0x09
    1b6e:	e0 2d       	mov	r30, r0
    1b70:	80 81       	ld	r24, Z
    1b72:	8f 7d       	andi	r24, 0xDF	; 223
    1b74:	80 83       	st	Z, r24
    1b76:	08 95       	ret

00001b78 <_ZN14HardwareSerial5flushEv>:
	if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
	return tail - head - 1;
}

void HardwareSerial::flush()
{
    1b78:	cf 93       	push	r28
    1b7a:	df 93       	push	r29
    1b7c:	ec 01       	movw	r28, r24
	// If we have never written a byte, no need to flush. This special
	// case is needed since there is no way to force the TXC (transmit
	// complete) bit to 1 during initialization
	if (!_written)
    1b7e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b80:	88 23       	and	r24, r24
    1b82:	d1 f0       	breq	.+52     	; 0x1bb8 <_ZN14HardwareSerial5flushEv+0x40>
	return;

	while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1b84:	e8 85       	ldd	r30, Y+8	; 0x08
    1b86:	f9 85       	ldd	r31, Y+9	; 0x09
    1b88:	80 81       	ld	r24, Z
    1b8a:	85 fd       	sbrc	r24, 5
    1b8c:	05 c0       	rjmp	.+10     	; 0x1b98 <_ZN14HardwareSerial5flushEv+0x20>
    1b8e:	ae 81       	ldd	r26, Y+6	; 0x06
    1b90:	bf 81       	ldd	r27, Y+7	; 0x07
    1b92:	8c 91       	ld	r24, X
    1b94:	86 fd       	sbrc	r24, 6
    1b96:	10 c0       	rjmp	.+32     	; 0x1bb8 <_ZN14HardwareSerial5flushEv+0x40>
		if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1b98:	0f b6       	in	r0, 0x3f	; 63
    1b9a:	07 fc       	sbrc	r0, 7
    1b9c:	f5 cf       	rjmp	.-22     	; 0x1b88 <_ZN14HardwareSerial5flushEv+0x10>
    1b9e:	80 81       	ld	r24, Z
    1ba0:	85 ff       	sbrs	r24, 5
    1ba2:	f2 cf       	rjmp	.-28     	; 0x1b88 <_ZN14HardwareSerial5flushEv+0x10>
    1ba4:	03 c0       	rjmp	.+6      	; 0x1bac <_ZN14HardwareSerial5flushEv+0x34>
		// Interrupts are globally disabled, but the DR empty
		// interrupt should be enabled, so poll the DR empty flag to
		// prevent deadlock
		if (bit_is_set(*_ucsra, UDRE0))
		_tx_udr_empty_irq();
    1ba6:	ce 01       	movw	r24, r28
    1ba8:	bc df       	rcall	.-136    	; 0x1b22 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1baa:	ec cf       	rjmp	.-40     	; 0x1b84 <_ZN14HardwareSerial5flushEv+0xc>
	while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
		if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
		// Interrupts are globally disabled, but the DR empty
		// interrupt should be enabled, so poll the DR empty flag to
		// prevent deadlock
		if (bit_is_set(*_ucsra, UDRE0))
    1bac:	ae 81       	ldd	r26, Y+6	; 0x06
    1bae:	bf 81       	ldd	r27, Y+7	; 0x07
    1bb0:	8c 91       	ld	r24, X
    1bb2:	85 ff       	sbrs	r24, 5
    1bb4:	e9 cf       	rjmp	.-46     	; 0x1b88 <_ZN14HardwareSerial5flushEv+0x10>
    1bb6:	f7 cf       	rjmp	.-18     	; 0x1ba6 <_ZN14HardwareSerial5flushEv+0x2e>
		_tx_udr_empty_irq();
	}
	// If we get here, nothing is queued anymore (DRIE is disabled) and
	// the hardware finished tranmission (TXC is set).
}
    1bb8:	df 91       	pop	r29
    1bba:	cf 91       	pop	r28
    1bbc:	08 95       	ret

00001bbe <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    1bbe:	0f 93       	push	r16
    1bc0:	1f 93       	push	r17
    1bc2:	cf 93       	push	r28
    1bc4:	df 93       	push	r29
    1bc6:	ec 01       	movw	r28, r24
	_written = true;
    1bc8:	81 e0       	ldi	r24, 0x01	; 1
    1bca:	8e 87       	std	Y+14, r24	; 0x0e
	// If the buffer and the data register is empty, just write the byte
	// to the data register and be done. This shortcut helps
	// significantly improve the effective datarate at high (>
	// 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
	if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1bcc:	99 89       	ldd	r25, Y+17	; 0x11
    1bce:	8a 89       	ldd	r24, Y+18	; 0x12
    1bd0:	98 13       	cpse	r25, r24
    1bd2:	25 c0       	rjmp	.+74     	; 0x1c1e <_ZN14HardwareSerial5writeEh+0x60>
    1bd4:	ee 81       	ldd	r30, Y+6	; 0x06
    1bd6:	ff 81       	ldd	r31, Y+7	; 0x07
    1bd8:	80 81       	ld	r24, Z
    1bda:	85 fd       	sbrc	r24, 5
    1bdc:	31 c0       	rjmp	.+98     	; 0x1c40 <_ZN14HardwareSerial5writeEh+0x82>
    1bde:	1f c0       	rjmp	.+62     	; 0x1c1e <_ZN14HardwareSerial5writeEh+0x60>
	}
	tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
	// If the output buffer is full, there's nothing for it other than to
	// wait for the interrupt handler to empty it a bit
	while (i == _tx_buffer_tail) {
    1be0:	8a 89       	ldd	r24, Y+18	; 0x12
    1be2:	18 13       	cpse	r17, r24
    1be4:	0b c0       	rjmp	.+22     	; 0x1bfc <_ZN14HardwareSerial5writeEh+0x3e>
		if (bit_is_clear(SREG, SREG_I)) {
    1be6:	0f b6       	in	r0, 0x3f	; 63
    1be8:	07 fc       	sbrc	r0, 7
    1bea:	fa cf       	rjmp	.-12     	; 0x1be0 <_ZN14HardwareSerial5writeEh+0x22>
			// Interrupts are disabled, so we'll have to poll the data
			// register empty flag ourselves. If it is set, pretend an
			// interrupt has happened and call the handler to free up
			// space for us.
			if(bit_is_set(*_ucsra, UDRE0))
    1bec:	ee 81       	ldd	r30, Y+6	; 0x06
    1bee:	ff 81       	ldd	r31, Y+7	; 0x07
    1bf0:	80 81       	ld	r24, Z
    1bf2:	85 ff       	sbrs	r24, 5
    1bf4:	f5 cf       	rjmp	.-22     	; 0x1be0 <_ZN14HardwareSerial5writeEh+0x22>
			_tx_udr_empty_irq();
    1bf6:	ce 01       	movw	r24, r28
    1bf8:	94 df       	rcall	.-216    	; 0x1b22 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1bfa:	f2 cf       	rjmp	.-28     	; 0x1be0 <_ZN14HardwareSerial5writeEh+0x22>
			} else {
			// nop, the interrupt handler will free up space for us
		}
	}

	_tx_buffer[_tx_buffer_head] = c;
    1bfc:	89 89       	ldd	r24, Y+17	; 0x11
    1bfe:	fe 01       	movw	r30, r28
    1c00:	e8 0f       	add	r30, r24
    1c02:	f1 1d       	adc	r31, r1
    1c04:	ed 5a       	subi	r30, 0xAD	; 173
    1c06:	ff 4f       	sbci	r31, 0xFF	; 255
    1c08:	00 83       	st	Z, r16

	// make atomic to prevent execution of ISR between setting the
	// head pointer and setting the interrupt flag resulting in buffer
	// retransmission
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1c0a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1c0c:	f8 94       	cli
		_tx_buffer_head = i;
    1c0e:	19 8b       	std	Y+17, r17	; 0x11
		sbi(*_ucsrb, UDRIE0);
    1c10:	e8 85       	ldd	r30, Y+8	; 0x08
    1c12:	f9 85       	ldd	r31, Y+9	; 0x09
    1c14:	80 81       	ld	r24, Z
    1c16:	80 62       	ori	r24, 0x20	; 32
    1c18:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1c1a:	9f bf       	out	0x3f, r25	; 63
	}
	
	return 1;
    1c1c:	1d c0       	rjmp	.+58     	; 0x1c58 <_ZN14HardwareSerial5writeEh+0x9a>
			*_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
			#endif
		}
		return 1;
	}
	tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1c1e:	29 89       	ldd	r18, Y+17	; 0x11
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	2f 5f       	subi	r18, 0xFF	; 255
    1c24:	3f 4f       	sbci	r19, 0xFF	; 255
    1c26:	2f 73       	andi	r18, 0x3F	; 63
    1c28:	30 78       	andi	r19, 0x80	; 128
    1c2a:	33 23       	and	r19, r19
    1c2c:	34 f4       	brge	.+12     	; 0x1c3a <_ZN14HardwareSerial5writeEh+0x7c>
    1c2e:	21 50       	subi	r18, 0x01	; 1
    1c30:	31 09       	sbc	r19, r1
    1c32:	20 6c       	ori	r18, 0xC0	; 192
    1c34:	3f 6f       	ori	r19, 0xFF	; 255
    1c36:	2f 5f       	subi	r18, 0xFF	; 255
    1c38:	3f 4f       	sbci	r19, 0xFF	; 255
    1c3a:	06 2f       	mov	r16, r22
    1c3c:	12 2f       	mov	r17, r18
    1c3e:	d0 cf       	rjmp	.-96     	; 0x1be0 <_ZN14HardwareSerial5writeEh+0x22>
		// So writing UDR must happen first.
		// Writing UDR and clearing TC must be done atomically, otherwise
		// interrupts might delay the TXC clear so the byte written to UDR
		// is transmitted (setting TXC) before clearing TXC. Then TXC will
		// be cleared when no bytes are left, causing flush() to hang
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1c40:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1c42:	f8 94       	cli
			*_udr = c;
    1c44:	ec 85       	ldd	r30, Y+12	; 0x0c
    1c46:	fd 85       	ldd	r31, Y+13	; 0x0d
    1c48:	60 83       	st	Z, r22
			#ifdef MPCM0
			*_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1c4a:	ee 81       	ldd	r30, Y+6	; 0x06
    1c4c:	ff 81       	ldd	r31, Y+7	; 0x07
    1c4e:	80 81       	ld	r24, Z
    1c50:	83 70       	andi	r24, 0x03	; 3
    1c52:	80 64       	ori	r24, 0x40	; 64
    1c54:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1c56:	9f bf       	out	0x3f, r25	; 63
		_tx_buffer_head = i;
		sbi(*_ucsrb, UDRIE0);
	}
	
	return 1;
}
    1c58:	81 e0       	ldi	r24, 0x01	; 1
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	df 91       	pop	r29
    1c5e:	cf 91       	pop	r28
    1c60:	1f 91       	pop	r17
    1c62:	0f 91       	pop	r16
    1c64:	08 95       	ret

00001c66 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, uint8_t config)
{
    1c66:	cf 92       	push	r12
    1c68:	df 92       	push	r13
    1c6a:	ef 92       	push	r14
    1c6c:	ff 92       	push	r15
    1c6e:	1f 93       	push	r17
    1c70:	cf 93       	push	r28
    1c72:	df 93       	push	r29
    1c74:	ec 01       	movw	r28, r24
    1c76:	6a 01       	movw	r12, r20
    1c78:	7b 01       	movw	r14, r22
    1c7a:	12 2f       	mov	r17, r18
	// Try u2x mode first
	uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
	*_ucsra = 1 << U2X0;
    1c7c:	ee 81       	ldd	r30, Y+6	; 0x06
    1c7e:	ff 81       	ldd	r31, Y+7	; 0x07
    1c80:	82 e0       	ldi	r24, 0x02	; 2
    1c82:	80 83       	st	Z, r24
	// hardcoded exception for 57600 for compatibility with the bootloader
	// shipped with the Duemilanove and previous boards and the firmware
	// on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
	// be > 4095, so switch back to non-u2x mode if the baud rate is too
	// low.
	if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1c84:	41 15       	cp	r20, r1
    1c86:	51 4e       	sbci	r21, 0xE1	; 225
    1c88:	61 05       	cpc	r22, r1
    1c8a:	71 05       	cpc	r23, r1
    1c8c:	b1 f0       	breq	.+44     	; 0x1cba <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, uint8_t config)
{
	// Try u2x mode first
	uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1c8e:	60 e0       	ldi	r22, 0x00	; 0
    1c90:	79 e0       	ldi	r23, 0x09	; 9
    1c92:	8d e3       	ldi	r24, 0x3D	; 61
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	a7 01       	movw	r20, r14
    1c98:	96 01       	movw	r18, r12
    1c9a:	0e 94 ff 18 	call	0x31fe	; 0x31fe <__udivmodsi4>
    1c9e:	da 01       	movw	r26, r20
    1ca0:	c9 01       	movw	r24, r18
    1ca2:	01 97       	sbiw	r24, 0x01	; 1
    1ca4:	a1 09       	sbc	r26, r1
    1ca6:	b1 09       	sbc	r27, r1
    1ca8:	b6 95       	lsr	r27
    1caa:	a7 95       	ror	r26
    1cac:	97 95       	ror	r25
    1cae:	87 95       	ror	r24
    1cb0:	9c 01       	movw	r18, r24
	// hardcoded exception for 57600 for compatibility with the bootloader
	// shipped with the Duemilanove and previous boards and the firmware
	// on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
	// be > 4095, so switch back to non-u2x mode if the baud rate is too
	// low.
	if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1cb2:	21 15       	cp	r18, r1
    1cb4:	80 e1       	ldi	r24, 0x10	; 16
    1cb6:	38 07       	cpc	r19, r24
    1cb8:	a8 f0       	brcs	.+42     	; 0x1ce4 <_ZN14HardwareSerial5beginEmh+0x7e>
	{
		*_ucsra = 0;
    1cba:	ee 81       	ldd	r30, Y+6	; 0x06
    1cbc:	ff 81       	ldd	r31, Y+7	; 0x07
    1cbe:	10 82       	st	Z, r1
		baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1cc0:	60 e8       	ldi	r22, 0x80	; 128
    1cc2:	74 e8       	ldi	r23, 0x84	; 132
    1cc4:	8e e1       	ldi	r24, 0x1E	; 30
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	a7 01       	movw	r20, r14
    1cca:	96 01       	movw	r18, r12
    1ccc:	0e 94 ff 18 	call	0x31fe	; 0x31fe <__udivmodsi4>
    1cd0:	da 01       	movw	r26, r20
    1cd2:	c9 01       	movw	r24, r18
    1cd4:	01 97       	sbiw	r24, 0x01	; 1
    1cd6:	a1 09       	sbc	r26, r1
    1cd8:	b1 09       	sbc	r27, r1
    1cda:	b6 95       	lsr	r27
    1cdc:	a7 95       	ror	r26
    1cde:	97 95       	ror	r25
    1ce0:	87 95       	ror	r24
    1ce2:	9c 01       	movw	r18, r24
	}

	// assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
	*_ubrrh = baud_setting >> 8;
    1ce4:	ea 81       	ldd	r30, Y+2	; 0x02
    1ce6:	fb 81       	ldd	r31, Y+3	; 0x03
    1ce8:	30 83       	st	Z, r19
	*_ubrrl = baud_setting;
    1cea:	ec 81       	ldd	r30, Y+4	; 0x04
    1cec:	fd 81       	ldd	r31, Y+5	; 0x05
    1cee:	20 83       	st	Z, r18

	_written = false;
    1cf0:	1e 86       	std	Y+14, r1	; 0x0e

	//set the data bits, parity, and stop bits
	#if defined(__AVR_ATmega8__)
	config |= 0x80; // select UCSRC register (shared with UBRRH)
	#endif
	*_ucsrc = config;
    1cf2:	ea 85       	ldd	r30, Y+10	; 0x0a
    1cf4:	fb 85       	ldd	r31, Y+11	; 0x0b
    1cf6:	10 83       	st	Z, r17
	
	sbi(*_ucsrb, RXEN0);
    1cf8:	e8 85       	ldd	r30, Y+8	; 0x08
    1cfa:	f9 85       	ldd	r31, Y+9	; 0x09
    1cfc:	80 81       	ld	r24, Z
    1cfe:	80 61       	ori	r24, 0x10	; 16
    1d00:	80 83       	st	Z, r24
	sbi(*_ucsrb, TXEN0);
    1d02:	e8 85       	ldd	r30, Y+8	; 0x08
    1d04:	f9 85       	ldd	r31, Y+9	; 0x09
    1d06:	80 81       	ld	r24, Z
    1d08:	88 60       	ori	r24, 0x08	; 8
    1d0a:	80 83       	st	Z, r24
	sbi(*_ucsrb, RXCIE0);
    1d0c:	e8 85       	ldd	r30, Y+8	; 0x08
    1d0e:	f9 85       	ldd	r31, Y+9	; 0x09
    1d10:	80 81       	ld	r24, Z
    1d12:	80 68       	ori	r24, 0x80	; 128
    1d14:	80 83       	st	Z, r24
	cbi(*_ucsrb, UDRIE0);
    1d16:	e8 85       	ldd	r30, Y+8	; 0x08
    1d18:	f9 85       	ldd	r31, Y+9	; 0x09
    1d1a:	80 81       	ld	r24, Z
    1d1c:	8f 7d       	andi	r24, 0xDF	; 223
    1d1e:	80 83       	st	Z, r24
}
    1d20:	df 91       	pop	r29
    1d22:	cf 91       	pop	r28
    1d24:	1f 91       	pop	r17
    1d26:	ff 90       	pop	r15
    1d28:	ef 90       	pop	r14
    1d2a:	df 90       	pop	r13
    1d2c:	cf 90       	pop	r12
    1d2e:	08 95       	ret

00001d30 <_ZN5Print17availableForWriteEv>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
}
    1d30:	80 e0       	ldi	r24, 0x00	; 0
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	08 95       	ret

00001d36 <__vector_25>:
    1d36:	1f 92       	push	r1
    1d38:	0f 92       	push	r0
    1d3a:	0f b6       	in	r0, 0x3f	; 63
    1d3c:	0f 92       	push	r0
    1d3e:	11 24       	eor	r1, r1
    1d40:	0b b6       	in	r0, 0x3b	; 59
    1d42:	0f 92       	push	r0
    1d44:	2f 93       	push	r18
    1d46:	8f 93       	push	r24
    1d48:	9f 93       	push	r25
    1d4a:	af 93       	push	r26
    1d4c:	bf 93       	push	r27
    1d4e:	ef 93       	push	r30
    1d50:	ff 93       	push	r31
    1d52:	e0 91 69 05 	lds	r30, 0x0569	; 0x800569 <Serial+0x6>
    1d56:	f0 91 6a 05 	lds	r31, 0x056A	; 0x80056a <Serial+0x7>
    1d5a:	80 81       	ld	r24, Z
    1d5c:	82 fd       	sbrc	r24, 2
    1d5e:	14 c0       	rjmp	.+40     	; 0x1d88 <__vector_25+0x52>
    1d60:	e3 e6       	ldi	r30, 0x63	; 99
    1d62:	f5 e0       	ldi	r31, 0x05	; 5
    1d64:	a4 85       	ldd	r26, Z+12	; 0x0c
    1d66:	b5 85       	ldd	r27, Z+13	; 0x0d
    1d68:	2c 91       	ld	r18, X
    1d6a:	87 85       	ldd	r24, Z+15	; 0x0f
    1d6c:	8f 5f       	subi	r24, 0xFF	; 255
    1d6e:	8f 70       	andi	r24, 0x0F	; 15
    1d70:	90 89       	ldd	r25, Z+16	; 0x10
    1d72:	89 17       	cp	r24, r25
    1d74:	71 f0       	breq	.+28     	; 0x1d92 <__vector_25+0x5c>
    1d76:	df 01       	movw	r26, r30
    1d78:	e7 85       	ldd	r30, Z+15	; 0x0f
    1d7a:	f0 e0       	ldi	r31, 0x00	; 0
    1d7c:	ed 59       	subi	r30, 0x9D	; 157
    1d7e:	fa 4f       	sbci	r31, 0xFA	; 250
    1d80:	23 8b       	std	Z+19, r18	; 0x13
    1d82:	1f 96       	adiw	r26, 0x0f	; 15
    1d84:	8c 93       	st	X, r24
    1d86:	05 c0       	rjmp	.+10     	; 0x1d92 <__vector_25+0x5c>
    1d88:	e0 91 6f 05 	lds	r30, 0x056F	; 0x80056f <Serial+0xc>
    1d8c:	f0 91 70 05 	lds	r31, 0x0570	; 0x800570 <Serial+0xd>
    1d90:	80 81       	ld	r24, Z
    1d92:	ff 91       	pop	r31
    1d94:	ef 91       	pop	r30
    1d96:	bf 91       	pop	r27
    1d98:	af 91       	pop	r26
    1d9a:	9f 91       	pop	r25
    1d9c:	8f 91       	pop	r24
    1d9e:	2f 91       	pop	r18
    1da0:	0f 90       	pop	r0
    1da2:	0b be       	out	0x3b, r0	; 59
    1da4:	0f 90       	pop	r0
    1da6:	0f be       	out	0x3f, r0	; 63
    1da8:	0f 90       	pop	r0
    1daa:	1f 90       	pop	r1
    1dac:	18 95       	reti

00001dae <__vector_26>:
    1dae:	1f 92       	push	r1
    1db0:	0f 92       	push	r0
    1db2:	0f b6       	in	r0, 0x3f	; 63
    1db4:	0f 92       	push	r0
    1db6:	11 24       	eor	r1, r1
    1db8:	0b b6       	in	r0, 0x3b	; 59
    1dba:	0f 92       	push	r0
    1dbc:	2f 93       	push	r18
    1dbe:	3f 93       	push	r19
    1dc0:	4f 93       	push	r20
    1dc2:	5f 93       	push	r21
    1dc4:	6f 93       	push	r22
    1dc6:	7f 93       	push	r23
    1dc8:	8f 93       	push	r24
    1dca:	9f 93       	push	r25
    1dcc:	af 93       	push	r26
    1dce:	bf 93       	push	r27
    1dd0:	ef 93       	push	r30
    1dd2:	ff 93       	push	r31
    1dd4:	83 e6       	ldi	r24, 0x63	; 99
    1dd6:	95 e0       	ldi	r25, 0x05	; 5
    1dd8:	a4 de       	rcall	.-696    	; 0x1b22 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1dda:	ff 91       	pop	r31
    1ddc:	ef 91       	pop	r30
    1dde:	bf 91       	pop	r27
    1de0:	af 91       	pop	r26
    1de2:	9f 91       	pop	r25
    1de4:	8f 91       	pop	r24
    1de6:	7f 91       	pop	r23
    1de8:	6f 91       	pop	r22
    1dea:	5f 91       	pop	r21
    1dec:	4f 91       	pop	r20
    1dee:	3f 91       	pop	r19
    1df0:	2f 91       	pop	r18
    1df2:	0f 90       	pop	r0
    1df4:	0b be       	out	0x3b, r0	; 59
    1df6:	0f 90       	pop	r0
    1df8:	0f be       	out	0x3f, r0	; 63
    1dfa:	0f 90       	pop	r0
    1dfc:	1f 90       	pop	r1
    1dfe:	18 95       	reti

00001e00 <_GLOBAL__sub_I___vector_25>:
volatile uint8_t *ucsrc, volatile uint8_t *udr) :
_ubrrh(ubrrh), _ubrrl(ubrrl),
_ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
_udr(udr),
_rx_buffer_head(0), _rx_buffer_tail(0),
_tx_buffer_head(0), _tx_buffer_tail(0)
    1e00:	e3 e6       	ldi	r30, 0x63	; 99
    1e02:	f5 e0       	ldi	r31, 0x05	; 5
    1e04:	80 eb       	ldi	r24, 0xB0	; 176
    1e06:	92 e0       	ldi	r25, 0x02	; 2
    1e08:	91 83       	std	Z+1, r25	; 0x01
    1e0a:	80 83       	st	Z, r24
    1e0c:	85 ec       	ldi	r24, 0xC5	; 197
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	93 83       	std	Z+3, r25	; 0x03
    1e12:	82 83       	std	Z+2, r24	; 0x02
    1e14:	84 ec       	ldi	r24, 0xC4	; 196
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	95 83       	std	Z+5, r25	; 0x05
    1e1a:	84 83       	std	Z+4, r24	; 0x04
    1e1c:	80 ec       	ldi	r24, 0xC0	; 192
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	97 83       	std	Z+7, r25	; 0x07
    1e22:	86 83       	std	Z+6, r24	; 0x06
    1e24:	81 ec       	ldi	r24, 0xC1	; 193
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	91 87       	std	Z+9, r25	; 0x09
    1e2a:	80 87       	std	Z+8, r24	; 0x08
    1e2c:	82 ec       	ldi	r24, 0xC2	; 194
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	93 87       	std	Z+11, r25	; 0x0b
    1e32:	82 87       	std	Z+10, r24	; 0x0a
    1e34:	86 ec       	ldi	r24, 0xC6	; 198
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	95 87       	std	Z+13, r25	; 0x0d
    1e3a:	84 87       	std	Z+12, r24	; 0x0c
    1e3c:	17 86       	std	Z+15, r1	; 0x0f
    1e3e:	10 8a       	std	Z+16, r1	; 0x10
    1e40:	11 8a       	std	Z+17, r1	; 0x11
    1e42:	12 8a       	std	Z+18, r1	; 0x12
    1e44:	08 95       	ret

00001e46 <__vector_36>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
}
    1e46:	1f 92       	push	r1
    1e48:	0f 92       	push	r0
    1e4a:	0f b6       	in	r0, 0x3f	; 63
    1e4c:	0f 92       	push	r0
    1e4e:	11 24       	eor	r1, r1
    1e50:	0b b6       	in	r0, 0x3b	; 59
    1e52:	0f 92       	push	r0
    1e54:	2f 93       	push	r18
    1e56:	8f 93       	push	r24
    1e58:	9f 93       	push	r25
    1e5a:	af 93       	push	r26
    1e5c:	bf 93       	push	r27
    1e5e:	ef 93       	push	r30
    1e60:	ff 93       	push	r31
    1e62:	e0 91 9c 05 	lds	r30, 0x059C	; 0x80059c <Serial1+0x6>
    1e66:	f0 91 9d 05 	lds	r31, 0x059D	; 0x80059d <Serial1+0x7>
    1e6a:	80 81       	ld	r24, Z
    1e6c:	82 fd       	sbrc	r24, 2
    1e6e:	14 c0       	rjmp	.+40     	; 0x1e98 <__vector_36+0x52>
    1e70:	e6 e9       	ldi	r30, 0x96	; 150
    1e72:	f5 e0       	ldi	r31, 0x05	; 5
    1e74:	a4 85       	ldd	r26, Z+12	; 0x0c
    1e76:	b5 85       	ldd	r27, Z+13	; 0x0d
    1e78:	2c 91       	ld	r18, X
    1e7a:	87 85       	ldd	r24, Z+15	; 0x0f
    1e7c:	8f 5f       	subi	r24, 0xFF	; 255
    1e7e:	8f 70       	andi	r24, 0x0F	; 15
    1e80:	90 89       	ldd	r25, Z+16	; 0x10
    1e82:	89 17       	cp	r24, r25
    1e84:	71 f0       	breq	.+28     	; 0x1ea2 <__vector_36+0x5c>
    1e86:	df 01       	movw	r26, r30
    1e88:	e7 85       	ldd	r30, Z+15	; 0x0f
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	ea 56       	subi	r30, 0x6A	; 106
    1e8e:	fa 4f       	sbci	r31, 0xFA	; 250
    1e90:	23 8b       	std	Z+19, r18	; 0x13
    1e92:	1f 96       	adiw	r26, 0x0f	; 15
    1e94:	8c 93       	st	X, r24
    1e96:	05 c0       	rjmp	.+10     	; 0x1ea2 <__vector_36+0x5c>
    1e98:	e0 91 a2 05 	lds	r30, 0x05A2	; 0x8005a2 <Serial1+0xc>
    1e9c:	f0 91 a3 05 	lds	r31, 0x05A3	; 0x8005a3 <Serial1+0xd>
    1ea0:	80 81       	ld	r24, Z
    1ea2:	ff 91       	pop	r31
    1ea4:	ef 91       	pop	r30
    1ea6:	bf 91       	pop	r27
    1ea8:	af 91       	pop	r26
    1eaa:	9f 91       	pop	r25
    1eac:	8f 91       	pop	r24
    1eae:	2f 91       	pop	r18
    1eb0:	0f 90       	pop	r0
    1eb2:	0b be       	out	0x3b, r0	; 59
    1eb4:	0f 90       	pop	r0
    1eb6:	0f be       	out	0x3f, r0	; 63
    1eb8:	0f 90       	pop	r0
    1eba:	1f 90       	pop	r1
    1ebc:	18 95       	reti

00001ebe <__vector_37>:
    1ebe:	1f 92       	push	r1
    1ec0:	0f 92       	push	r0
    1ec2:	0f b6       	in	r0, 0x3f	; 63
    1ec4:	0f 92       	push	r0
    1ec6:	11 24       	eor	r1, r1
    1ec8:	0b b6       	in	r0, 0x3b	; 59
    1eca:	0f 92       	push	r0
    1ecc:	2f 93       	push	r18
    1ece:	3f 93       	push	r19
    1ed0:	4f 93       	push	r20
    1ed2:	5f 93       	push	r21
    1ed4:	6f 93       	push	r22
    1ed6:	7f 93       	push	r23
    1ed8:	8f 93       	push	r24
    1eda:	9f 93       	push	r25
    1edc:	af 93       	push	r26
    1ede:	bf 93       	push	r27
    1ee0:	ef 93       	push	r30
    1ee2:	ff 93       	push	r31
    1ee4:	86 e9       	ldi	r24, 0x96	; 150
    1ee6:	95 e0       	ldi	r25, 0x05	; 5
    1ee8:	1c de       	rcall	.-968    	; 0x1b22 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1eea:	ff 91       	pop	r31
    1eec:	ef 91       	pop	r30
    1eee:	bf 91       	pop	r27
    1ef0:	af 91       	pop	r26
    1ef2:	9f 91       	pop	r25
    1ef4:	8f 91       	pop	r24
    1ef6:	7f 91       	pop	r23
    1ef8:	6f 91       	pop	r22
    1efa:	5f 91       	pop	r21
    1efc:	4f 91       	pop	r20
    1efe:	3f 91       	pop	r19
    1f00:	2f 91       	pop	r18
    1f02:	0f 90       	pop	r0
    1f04:	0b be       	out	0x3b, r0	; 59
    1f06:	0f 90       	pop	r0
    1f08:	0f be       	out	0x3f, r0	; 63
    1f0a:	0f 90       	pop	r0
    1f0c:	1f 90       	pop	r1
    1f0e:	18 95       	reti

00001f10 <_GLOBAL__sub_I___vector_36>:
    1f10:	e6 e9       	ldi	r30, 0x96	; 150
    1f12:	f5 e0       	ldi	r31, 0x05	; 5
    1f14:	80 eb       	ldi	r24, 0xB0	; 176
    1f16:	92 e0       	ldi	r25, 0x02	; 2
    1f18:	91 83       	std	Z+1, r25	; 0x01
    1f1a:	80 83       	st	Z, r24
    1f1c:	8d ec       	ldi	r24, 0xCD	; 205
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	93 83       	std	Z+3, r25	; 0x03
    1f22:	82 83       	std	Z+2, r24	; 0x02
    1f24:	8c ec       	ldi	r24, 0xCC	; 204
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	95 83       	std	Z+5, r25	; 0x05
    1f2a:	84 83       	std	Z+4, r24	; 0x04
    1f2c:	88 ec       	ldi	r24, 0xC8	; 200
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	97 83       	std	Z+7, r25	; 0x07
    1f32:	86 83       	std	Z+6, r24	; 0x06
    1f34:	89 ec       	ldi	r24, 0xC9	; 201
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	91 87       	std	Z+9, r25	; 0x09
    1f3a:	80 87       	std	Z+8, r24	; 0x08
    1f3c:	8a ec       	ldi	r24, 0xCA	; 202
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	93 87       	std	Z+11, r25	; 0x0b
    1f42:	82 87       	std	Z+10, r24	; 0x0a
    1f44:	8e ec       	ldi	r24, 0xCE	; 206
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	95 87       	std	Z+13, r25	; 0x0d
    1f4a:	84 87       	std	Z+12, r24	; 0x0c
    1f4c:	17 86       	std	Z+15, r1	; 0x0f
    1f4e:	10 8a       	std	Z+16, r1	; 0x10
    1f50:	11 8a       	std	Z+17, r1	; 0x11
    1f52:	12 8a       	std	Z+18, r1	; 0x12
    1f54:	08 95       	ret

00001f56 <__vector_51>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial2_available() {
  return Serial2.available();
}
    1f56:	1f 92       	push	r1
    1f58:	0f 92       	push	r0
    1f5a:	0f b6       	in	r0, 0x3f	; 63
    1f5c:	0f 92       	push	r0
    1f5e:	11 24       	eor	r1, r1
    1f60:	0b b6       	in	r0, 0x3b	; 59
    1f62:	0f 92       	push	r0
    1f64:	2f 93       	push	r18
    1f66:	8f 93       	push	r24
    1f68:	9f 93       	push	r25
    1f6a:	af 93       	push	r26
    1f6c:	bf 93       	push	r27
    1f6e:	ef 93       	push	r30
    1f70:	ff 93       	push	r31
    1f72:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <Serial2+0x6>
    1f76:	f0 91 d0 05 	lds	r31, 0x05D0	; 0x8005d0 <Serial2+0x7>
    1f7a:	80 81       	ld	r24, Z
    1f7c:	82 fd       	sbrc	r24, 2
    1f7e:	14 c0       	rjmp	.+40     	; 0x1fa8 <__vector_51+0x52>
    1f80:	e9 ec       	ldi	r30, 0xC9	; 201
    1f82:	f5 e0       	ldi	r31, 0x05	; 5
    1f84:	a4 85       	ldd	r26, Z+12	; 0x0c
    1f86:	b5 85       	ldd	r27, Z+13	; 0x0d
    1f88:	2c 91       	ld	r18, X
    1f8a:	87 85       	ldd	r24, Z+15	; 0x0f
    1f8c:	8f 5f       	subi	r24, 0xFF	; 255
    1f8e:	8f 70       	andi	r24, 0x0F	; 15
    1f90:	90 89       	ldd	r25, Z+16	; 0x10
    1f92:	89 17       	cp	r24, r25
    1f94:	71 f0       	breq	.+28     	; 0x1fb2 <__vector_51+0x5c>
    1f96:	df 01       	movw	r26, r30
    1f98:	e7 85       	ldd	r30, Z+15	; 0x0f
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	e7 53       	subi	r30, 0x37	; 55
    1f9e:	fa 4f       	sbci	r31, 0xFA	; 250
    1fa0:	23 8b       	std	Z+19, r18	; 0x13
    1fa2:	1f 96       	adiw	r26, 0x0f	; 15
    1fa4:	8c 93       	st	X, r24
    1fa6:	05 c0       	rjmp	.+10     	; 0x1fb2 <__vector_51+0x5c>
    1fa8:	e0 91 d5 05 	lds	r30, 0x05D5	; 0x8005d5 <Serial2+0xc>
    1fac:	f0 91 d6 05 	lds	r31, 0x05D6	; 0x8005d6 <Serial2+0xd>
    1fb0:	80 81       	ld	r24, Z
    1fb2:	ff 91       	pop	r31
    1fb4:	ef 91       	pop	r30
    1fb6:	bf 91       	pop	r27
    1fb8:	af 91       	pop	r26
    1fba:	9f 91       	pop	r25
    1fbc:	8f 91       	pop	r24
    1fbe:	2f 91       	pop	r18
    1fc0:	0f 90       	pop	r0
    1fc2:	0b be       	out	0x3b, r0	; 59
    1fc4:	0f 90       	pop	r0
    1fc6:	0f be       	out	0x3f, r0	; 63
    1fc8:	0f 90       	pop	r0
    1fca:	1f 90       	pop	r1
    1fcc:	18 95       	reti

00001fce <__vector_52>:
    1fce:	1f 92       	push	r1
    1fd0:	0f 92       	push	r0
    1fd2:	0f b6       	in	r0, 0x3f	; 63
    1fd4:	0f 92       	push	r0
    1fd6:	11 24       	eor	r1, r1
    1fd8:	0b b6       	in	r0, 0x3b	; 59
    1fda:	0f 92       	push	r0
    1fdc:	2f 93       	push	r18
    1fde:	3f 93       	push	r19
    1fe0:	4f 93       	push	r20
    1fe2:	5f 93       	push	r21
    1fe4:	6f 93       	push	r22
    1fe6:	7f 93       	push	r23
    1fe8:	8f 93       	push	r24
    1fea:	9f 93       	push	r25
    1fec:	af 93       	push	r26
    1fee:	bf 93       	push	r27
    1ff0:	ef 93       	push	r30
    1ff2:	ff 93       	push	r31
    1ff4:	89 ec       	ldi	r24, 0xC9	; 201
    1ff6:	95 e0       	ldi	r25, 0x05	; 5
    1ff8:	94 dd       	rcall	.-1240   	; 0x1b22 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1ffa:	ff 91       	pop	r31
    1ffc:	ef 91       	pop	r30
    1ffe:	bf 91       	pop	r27
    2000:	af 91       	pop	r26
    2002:	9f 91       	pop	r25
    2004:	8f 91       	pop	r24
    2006:	7f 91       	pop	r23
    2008:	6f 91       	pop	r22
    200a:	5f 91       	pop	r21
    200c:	4f 91       	pop	r20
    200e:	3f 91       	pop	r19
    2010:	2f 91       	pop	r18
    2012:	0f 90       	pop	r0
    2014:	0b be       	out	0x3b, r0	; 59
    2016:	0f 90       	pop	r0
    2018:	0f be       	out	0x3f, r0	; 63
    201a:	0f 90       	pop	r0
    201c:	1f 90       	pop	r1
    201e:	18 95       	reti

00002020 <_GLOBAL__sub_I___vector_51>:
    2020:	e9 ec       	ldi	r30, 0xC9	; 201
    2022:	f5 e0       	ldi	r31, 0x05	; 5
    2024:	80 eb       	ldi	r24, 0xB0	; 176
    2026:	92 e0       	ldi	r25, 0x02	; 2
    2028:	91 83       	std	Z+1, r25	; 0x01
    202a:	80 83       	st	Z, r24
    202c:	85 ed       	ldi	r24, 0xD5	; 213
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	93 83       	std	Z+3, r25	; 0x03
    2032:	82 83       	std	Z+2, r24	; 0x02
    2034:	84 ed       	ldi	r24, 0xD4	; 212
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	95 83       	std	Z+5, r25	; 0x05
    203a:	84 83       	std	Z+4, r24	; 0x04
    203c:	80 ed       	ldi	r24, 0xD0	; 208
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	97 83       	std	Z+7, r25	; 0x07
    2042:	86 83       	std	Z+6, r24	; 0x06
    2044:	81 ed       	ldi	r24, 0xD1	; 209
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	91 87       	std	Z+9, r25	; 0x09
    204a:	80 87       	std	Z+8, r24	; 0x08
    204c:	82 ed       	ldi	r24, 0xD2	; 210
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	93 87       	std	Z+11, r25	; 0x0b
    2052:	82 87       	std	Z+10, r24	; 0x0a
    2054:	86 ed       	ldi	r24, 0xD6	; 214
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	95 87       	std	Z+13, r25	; 0x0d
    205a:	84 87       	std	Z+12, r24	; 0x0c
    205c:	17 86       	std	Z+15, r1	; 0x0f
    205e:	10 8a       	std	Z+16, r1	; 0x10
    2060:	11 8a       	std	Z+17, r1	; 0x11
    2062:	12 8a       	std	Z+18, r1	; 0x12
    2064:	08 95       	ret

00002066 <__vector_54>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial3_available() {
  return Serial3.available();
}
    2066:	1f 92       	push	r1
    2068:	0f 92       	push	r0
    206a:	0f b6       	in	r0, 0x3f	; 63
    206c:	0f 92       	push	r0
    206e:	11 24       	eor	r1, r1
    2070:	0b b6       	in	r0, 0x3b	; 59
    2072:	0f 92       	push	r0
    2074:	2f 93       	push	r18
    2076:	8f 93       	push	r24
    2078:	9f 93       	push	r25
    207a:	af 93       	push	r26
    207c:	bf 93       	push	r27
    207e:	ef 93       	push	r30
    2080:	ff 93       	push	r31
    2082:	e0 91 02 06 	lds	r30, 0x0602	; 0x800602 <Serial3+0x6>
    2086:	f0 91 03 06 	lds	r31, 0x0603	; 0x800603 <Serial3+0x7>
    208a:	80 81       	ld	r24, Z
    208c:	82 fd       	sbrc	r24, 2
    208e:	14 c0       	rjmp	.+40     	; 0x20b8 <__vector_54+0x52>
    2090:	ec ef       	ldi	r30, 0xFC	; 252
    2092:	f5 e0       	ldi	r31, 0x05	; 5
    2094:	a4 85       	ldd	r26, Z+12	; 0x0c
    2096:	b5 85       	ldd	r27, Z+13	; 0x0d
    2098:	2c 91       	ld	r18, X
    209a:	87 85       	ldd	r24, Z+15	; 0x0f
    209c:	8f 5f       	subi	r24, 0xFF	; 255
    209e:	8f 70       	andi	r24, 0x0F	; 15
    20a0:	90 89       	ldd	r25, Z+16	; 0x10
    20a2:	89 17       	cp	r24, r25
    20a4:	71 f0       	breq	.+28     	; 0x20c2 <__vector_54+0x5c>
    20a6:	df 01       	movw	r26, r30
    20a8:	e7 85       	ldd	r30, Z+15	; 0x0f
    20aa:	f0 e0       	ldi	r31, 0x00	; 0
    20ac:	e4 50       	subi	r30, 0x04	; 4
    20ae:	fa 4f       	sbci	r31, 0xFA	; 250
    20b0:	23 8b       	std	Z+19, r18	; 0x13
    20b2:	1f 96       	adiw	r26, 0x0f	; 15
    20b4:	8c 93       	st	X, r24
    20b6:	05 c0       	rjmp	.+10     	; 0x20c2 <__vector_54+0x5c>
    20b8:	e0 91 08 06 	lds	r30, 0x0608	; 0x800608 <Serial3+0xc>
    20bc:	f0 91 09 06 	lds	r31, 0x0609	; 0x800609 <Serial3+0xd>
    20c0:	80 81       	ld	r24, Z
    20c2:	ff 91       	pop	r31
    20c4:	ef 91       	pop	r30
    20c6:	bf 91       	pop	r27
    20c8:	af 91       	pop	r26
    20ca:	9f 91       	pop	r25
    20cc:	8f 91       	pop	r24
    20ce:	2f 91       	pop	r18
    20d0:	0f 90       	pop	r0
    20d2:	0b be       	out	0x3b, r0	; 59
    20d4:	0f 90       	pop	r0
    20d6:	0f be       	out	0x3f, r0	; 63
    20d8:	0f 90       	pop	r0
    20da:	1f 90       	pop	r1
    20dc:	18 95       	reti

000020de <__vector_55>:
    20de:	1f 92       	push	r1
    20e0:	0f 92       	push	r0
    20e2:	0f b6       	in	r0, 0x3f	; 63
    20e4:	0f 92       	push	r0
    20e6:	11 24       	eor	r1, r1
    20e8:	0b b6       	in	r0, 0x3b	; 59
    20ea:	0f 92       	push	r0
    20ec:	2f 93       	push	r18
    20ee:	3f 93       	push	r19
    20f0:	4f 93       	push	r20
    20f2:	5f 93       	push	r21
    20f4:	6f 93       	push	r22
    20f6:	7f 93       	push	r23
    20f8:	8f 93       	push	r24
    20fa:	9f 93       	push	r25
    20fc:	af 93       	push	r26
    20fe:	bf 93       	push	r27
    2100:	ef 93       	push	r30
    2102:	ff 93       	push	r31
    2104:	8c ef       	ldi	r24, 0xFC	; 252
    2106:	95 e0       	ldi	r25, 0x05	; 5
    2108:	0c dd       	rcall	.-1512   	; 0x1b22 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    210a:	ff 91       	pop	r31
    210c:	ef 91       	pop	r30
    210e:	bf 91       	pop	r27
    2110:	af 91       	pop	r26
    2112:	9f 91       	pop	r25
    2114:	8f 91       	pop	r24
    2116:	7f 91       	pop	r23
    2118:	6f 91       	pop	r22
    211a:	5f 91       	pop	r21
    211c:	4f 91       	pop	r20
    211e:	3f 91       	pop	r19
    2120:	2f 91       	pop	r18
    2122:	0f 90       	pop	r0
    2124:	0b be       	out	0x3b, r0	; 59
    2126:	0f 90       	pop	r0
    2128:	0f be       	out	0x3f, r0	; 63
    212a:	0f 90       	pop	r0
    212c:	1f 90       	pop	r1
    212e:	18 95       	reti

00002130 <_GLOBAL__sub_I___vector_54>:
    2130:	ec ef       	ldi	r30, 0xFC	; 252
    2132:	f5 e0       	ldi	r31, 0x05	; 5
    2134:	80 eb       	ldi	r24, 0xB0	; 176
    2136:	92 e0       	ldi	r25, 0x02	; 2
    2138:	91 83       	std	Z+1, r25	; 0x01
    213a:	80 83       	st	Z, r24
    213c:	85 e3       	ldi	r24, 0x35	; 53
    213e:	91 e0       	ldi	r25, 0x01	; 1
    2140:	93 83       	std	Z+3, r25	; 0x03
    2142:	82 83       	std	Z+2, r24	; 0x02
    2144:	84 e3       	ldi	r24, 0x34	; 52
    2146:	91 e0       	ldi	r25, 0x01	; 1
    2148:	95 83       	std	Z+5, r25	; 0x05
    214a:	84 83       	std	Z+4, r24	; 0x04
    214c:	80 e3       	ldi	r24, 0x30	; 48
    214e:	91 e0       	ldi	r25, 0x01	; 1
    2150:	97 83       	std	Z+7, r25	; 0x07
    2152:	86 83       	std	Z+6, r24	; 0x06
    2154:	81 e3       	ldi	r24, 0x31	; 49
    2156:	91 e0       	ldi	r25, 0x01	; 1
    2158:	91 87       	std	Z+9, r25	; 0x09
    215a:	80 87       	std	Z+8, r24	; 0x08
    215c:	82 e3       	ldi	r24, 0x32	; 50
    215e:	91 e0       	ldi	r25, 0x01	; 1
    2160:	93 87       	std	Z+11, r25	; 0x0b
    2162:	82 87       	std	Z+10, r24	; 0x0a
    2164:	86 e3       	ldi	r24, 0x36	; 54
    2166:	91 e0       	ldi	r25, 0x01	; 1
    2168:	95 87       	std	Z+13, r25	; 0x0d
    216a:	84 87       	std	Z+12, r24	; 0x0c
    216c:	17 86       	std	Z+15, r1	; 0x0f
    216e:	10 8a       	std	Z+16, r1	; 0x10
    2170:	11 8a       	std	Z+17, r1	; 0x11
    2172:	12 8a       	std	Z+18, r1	; 0x12
    2174:	08 95       	ret

00002176 <_ZN13HardwareServoC1ERVjRVhS3_S1_S1_S1_>:
void HardwareServo::DisableB(){
	*_tccrA &= ~_BV(COM1B1);
}

void HardwareServo::DisableC(){
	*_tccrA &= ~_BV(COM1C1);	
    2176:	cf 92       	push	r12
    2178:	df 92       	push	r13
    217a:	ef 92       	push	r14
    217c:	ff 92       	push	r15
    217e:	0f 93       	push	r16
    2180:	1f 93       	push	r17
    2182:	fc 01       	movw	r30, r24
    2184:	71 83       	std	Z+1, r23	; 0x01
    2186:	60 83       	st	Z, r22
    2188:	53 83       	std	Z+3, r21	; 0x03
    218a:	42 83       	std	Z+2, r20	; 0x02
    218c:	35 83       	std	Z+5, r19	; 0x05
    218e:	24 83       	std	Z+4, r18	; 0x04
    2190:	17 83       	std	Z+7, r17	; 0x07
    2192:	06 83       	std	Z+6, r16	; 0x06
    2194:	f1 86       	std	Z+9, r15	; 0x09
    2196:	e0 86       	std	Z+8, r14	; 0x08
    2198:	d3 86       	std	Z+11, r13	; 0x0b
    219a:	c2 86       	std	Z+10, r12	; 0x0a
    219c:	88 ee       	ldi	r24, 0xE8	; 232
    219e:	93 e0       	ldi	r25, 0x03	; 3
    21a0:	95 87       	std	Z+13, r25	; 0x0d
    21a2:	84 87       	std	Z+12, r24	; 0x0c
    21a4:	97 87       	std	Z+15, r25	; 0x0f
    21a6:	86 87       	std	Z+14, r24	; 0x0e
    21a8:	91 8b       	std	Z+17, r25	; 0x11
    21aa:	80 8b       	std	Z+16, r24	; 0x10
    21ac:	80 ed       	ldi	r24, 0xD0	; 208
    21ae:	97 e0       	ldi	r25, 0x07	; 7
    21b0:	93 8b       	std	Z+19, r25	; 0x13
    21b2:	82 8b       	std	Z+18, r24	; 0x12
    21b4:	95 8b       	std	Z+21, r25	; 0x15
    21b6:	84 8b       	std	Z+20, r24	; 0x14
    21b8:	97 8b       	std	Z+23, r25	; 0x17
    21ba:	86 8b       	std	Z+22, r24	; 0x16
    21bc:	1f 91       	pop	r17
    21be:	0f 91       	pop	r16
    21c0:	ff 90       	pop	r15
    21c2:	ef 90       	pop	r14
    21c4:	df 90       	pop	r13
    21c6:	cf 90       	pop	r12
    21c8:	08 95       	ret

000021ca <_ZN13HardwareServo5beginEv>:
    21ca:	fc 01       	movw	r30, r24
    21cc:	a2 81       	ldd	r26, Z+2	; 0x02
    21ce:	b3 81       	ldd	r27, Z+3	; 0x03
    21d0:	82 e0       	ldi	r24, 0x02	; 2
    21d2:	8c 93       	st	X, r24
    21d4:	a4 81       	ldd	r26, Z+4	; 0x04
    21d6:	b5 81       	ldd	r27, Z+5	; 0x05
    21d8:	8a e1       	ldi	r24, 0x1A	; 26
    21da:	8c 93       	st	X, r24
    21dc:	01 90       	ld	r0, Z+
    21de:	f0 81       	ld	r31, Z
    21e0:	e0 2d       	mov	r30, r0
    21e2:	80 e4       	ldi	r24, 0x40	; 64
    21e4:	9c e9       	ldi	r25, 0x9C	; 156
    21e6:	91 83       	std	Z+1, r25	; 0x01
    21e8:	80 83       	st	Z, r24
    21ea:	08 95       	ret

000021ec <_ZN13HardwareServo7EnableAEv>:
    21ec:	dc 01       	movw	r26, r24
    21ee:	12 96       	adiw	r26, 0x02	; 2
    21f0:	ed 91       	ld	r30, X+
    21f2:	fc 91       	ld	r31, X
    21f4:	13 97       	sbiw	r26, 0x03	; 3
    21f6:	80 81       	ld	r24, Z
    21f8:	80 68       	ori	r24, 0x80	; 128
    21fa:	80 83       	st	Z, r24
    21fc:	08 95       	ret

000021fe <_ZN13HardwareServo7EnableBEv>:
    21fe:	dc 01       	movw	r26, r24
    2200:	12 96       	adiw	r26, 0x02	; 2
    2202:	ed 91       	ld	r30, X+
    2204:	fc 91       	ld	r31, X
    2206:	13 97       	sbiw	r26, 0x03	; 3
    2208:	80 81       	ld	r24, Z
    220a:	80 62       	ori	r24, 0x20	; 32
    220c:	80 83       	st	Z, r24
    220e:	08 95       	ret

00002210 <_ZN13HardwareServo7EnableCEv>:
    2210:	dc 01       	movw	r26, r24
    2212:	12 96       	adiw	r26, 0x02	; 2
    2214:	ed 91       	ld	r30, X+
    2216:	fc 91       	ld	r31, X
    2218:	13 97       	sbiw	r26, 0x03	; 3
    221a:	80 81       	ld	r24, Z
    221c:	88 60       	ori	r24, 0x08	; 8
    221e:	80 83       	st	Z, r24
    2220:	08 95       	ret

00002222 <_ZN13HardwareServo9setPulseAEh>:
}

void HardwareServo::setPulseA(uint8_t pulse){
    2222:	0f 93       	push	r16
    2224:	1f 93       	push	r17
    2226:	cf 93       	push	r28
    2228:	df 93       	push	r29
    222a:	fc 01       	movw	r30, r24
	*_ocrA = (uint16_t)((((uint32_t)pulse * (_maxA - _minA)) / 255 + _minA) * CPU_CONST);
    222c:	c6 81       	ldd	r28, Z+6	; 0x06
    222e:	d7 81       	ldd	r29, Z+7	; 0x07
    2230:	04 85       	ldd	r16, Z+12	; 0x0c
    2232:	15 85       	ldd	r17, Z+13	; 0x0d
    2234:	22 89       	ldd	r18, Z+18	; 0x12
    2236:	33 89       	ldd	r19, Z+19	; 0x13
    2238:	20 1b       	sub	r18, r16
    223a:	31 0b       	sbc	r19, r17
    223c:	a6 2f       	mov	r26, r22
    223e:	b0 e0       	ldi	r27, 0x00	; 0
    2240:	0e 94 29 19 	call	0x3252	; 0x3252 <__umulhisi3>
    2244:	2f ef       	ldi	r18, 0xFF	; 255
    2246:	30 e0       	ldi	r19, 0x00	; 0
    2248:	40 e0       	ldi	r20, 0x00	; 0
    224a:	50 e0       	ldi	r21, 0x00	; 0
    224c:	d8 d7       	rcall	.+4016   	; 0x31fe <__udivmodsi4>
    224e:	da 01       	movw	r26, r20
    2250:	c9 01       	movw	r24, r18
    2252:	80 0f       	add	r24, r16
    2254:	91 1f       	adc	r25, r17
    2256:	a1 1d       	adc	r26, r1
    2258:	b1 1d       	adc	r27, r1
    225a:	9c 01       	movw	r18, r24
    225c:	22 0f       	add	r18, r18
    225e:	33 1f       	adc	r19, r19
    2260:	39 83       	std	Y+1, r19	; 0x01
    2262:	28 83       	st	Y, r18
}
    2264:	df 91       	pop	r29
    2266:	cf 91       	pop	r28
    2268:	1f 91       	pop	r17
    226a:	0f 91       	pop	r16
    226c:	08 95       	ret

0000226e <_ZN13HardwareServo9setPulseBEh>:

void HardwareServo::setPulseB(uint8_t pulse){
    226e:	0f 93       	push	r16
    2270:	1f 93       	push	r17
    2272:	cf 93       	push	r28
    2274:	df 93       	push	r29
    2276:	fc 01       	movw	r30, r24
	*_ocrB = (uint16_t)((((uint32_t)pulse * (_maxB - _minB)) / 255 + _minB) * CPU_CONST);	
    2278:	c0 85       	ldd	r28, Z+8	; 0x08
    227a:	d1 85       	ldd	r29, Z+9	; 0x09
    227c:	06 85       	ldd	r16, Z+14	; 0x0e
    227e:	17 85       	ldd	r17, Z+15	; 0x0f
    2280:	24 89       	ldd	r18, Z+20	; 0x14
    2282:	35 89       	ldd	r19, Z+21	; 0x15
    2284:	20 1b       	sub	r18, r16
    2286:	31 0b       	sbc	r19, r17
    2288:	a6 2f       	mov	r26, r22
    228a:	b0 e0       	ldi	r27, 0x00	; 0
    228c:	e2 d7       	rcall	.+4036   	; 0x3252 <__umulhisi3>
    228e:	2f ef       	ldi	r18, 0xFF	; 255
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	40 e0       	ldi	r20, 0x00	; 0
    2294:	50 e0       	ldi	r21, 0x00	; 0
    2296:	b3 d7       	rcall	.+3942   	; 0x31fe <__udivmodsi4>
    2298:	da 01       	movw	r26, r20
    229a:	c9 01       	movw	r24, r18
    229c:	80 0f       	add	r24, r16
    229e:	91 1f       	adc	r25, r17
    22a0:	a1 1d       	adc	r26, r1
    22a2:	b1 1d       	adc	r27, r1
    22a4:	9c 01       	movw	r18, r24
    22a6:	22 0f       	add	r18, r18
    22a8:	33 1f       	adc	r19, r19
    22aa:	39 83       	std	Y+1, r19	; 0x01
    22ac:	28 83       	st	Y, r18
}
    22ae:	df 91       	pop	r29
    22b0:	cf 91       	pop	r28
    22b2:	1f 91       	pop	r17
    22b4:	0f 91       	pop	r16
    22b6:	08 95       	ret

000022b8 <_ZN13HardwareServo9setPulseCEh>:

void HardwareServo::setPulseC(uint8_t pulse){
    22b8:	0f 93       	push	r16
    22ba:	1f 93       	push	r17
    22bc:	cf 93       	push	r28
    22be:	df 93       	push	r29
    22c0:	fc 01       	movw	r30, r24
	*_ocrC = (uint16_t)((((uint32_t)pulse * (_maxC - _minC)) / 255 + _minC) * CPU_CONST);	
    22c2:	c2 85       	ldd	r28, Z+10	; 0x0a
    22c4:	d3 85       	ldd	r29, Z+11	; 0x0b
    22c6:	00 89       	ldd	r16, Z+16	; 0x10
    22c8:	11 89       	ldd	r17, Z+17	; 0x11
    22ca:	26 89       	ldd	r18, Z+22	; 0x16
    22cc:	37 89       	ldd	r19, Z+23	; 0x17
    22ce:	20 1b       	sub	r18, r16
    22d0:	31 0b       	sbc	r19, r17
    22d2:	a6 2f       	mov	r26, r22
    22d4:	b0 e0       	ldi	r27, 0x00	; 0
    22d6:	bd d7       	rcall	.+3962   	; 0x3252 <__umulhisi3>
    22d8:	2f ef       	ldi	r18, 0xFF	; 255
    22da:	30 e0       	ldi	r19, 0x00	; 0
    22dc:	40 e0       	ldi	r20, 0x00	; 0
    22de:	50 e0       	ldi	r21, 0x00	; 0
    22e0:	8e d7       	rcall	.+3868   	; 0x31fe <__udivmodsi4>
    22e2:	da 01       	movw	r26, r20
    22e4:	c9 01       	movw	r24, r18
    22e6:	80 0f       	add	r24, r16
    22e8:	91 1f       	adc	r25, r17
    22ea:	a1 1d       	adc	r26, r1
    22ec:	b1 1d       	adc	r27, r1
    22ee:	9c 01       	movw	r18, r24
    22f0:	22 0f       	add	r18, r18
    22f2:	33 1f       	adc	r19, r19
    22f4:	39 83       	std	Y+1, r19	; 0x01
    22f6:	28 83       	st	Y, r18
}
    22f8:	df 91       	pop	r29
    22fa:	cf 91       	pop	r28
    22fc:	1f 91       	pop	r17
    22fe:	0f 91       	pop	r16
    2300:	08 95       	ret

00002302 <_ZN13HardwareServo7setMinAEj>:

void HardwareServo::setMinA(uint16_t us){
	_minA = us;
    2302:	fc 01       	movw	r30, r24
    2304:	75 87       	std	Z+13, r23	; 0x0d
    2306:	64 87       	std	Z+12, r22	; 0x0c
    2308:	08 95       	ret

0000230a <_ZN13HardwareServo7setMinBEj>:
}

void HardwareServo::setMinB(uint16_t us){
	_minB = us;
    230a:	fc 01       	movw	r30, r24
    230c:	77 87       	std	Z+15, r23	; 0x0f
    230e:	66 87       	std	Z+14, r22	; 0x0e
    2310:	08 95       	ret

00002312 <_ZN13HardwareServo7setMinCEj>:
}

void HardwareServo::setMinC(uint16_t us){
	_minC = us;
    2312:	fc 01       	movw	r30, r24
    2314:	71 8b       	std	Z+17, r23	; 0x11
    2316:	60 8b       	std	Z+16, r22	; 0x10
    2318:	08 95       	ret

0000231a <_ZN13HardwareServo7setMaxAEj>:
}

void HardwareServo::setMaxA(uint16_t us){
	_maxA = us;
    231a:	fc 01       	movw	r30, r24
    231c:	73 8b       	std	Z+19, r23	; 0x13
    231e:	62 8b       	std	Z+18, r22	; 0x12
    2320:	08 95       	ret

00002322 <_ZN13HardwareServo7setMaxBEj>:
}

void HardwareServo::setMaxB(uint16_t us){
	_maxB = us;
    2322:	fc 01       	movw	r30, r24
    2324:	75 8b       	std	Z+21, r23	; 0x15
    2326:	64 8b       	std	Z+20, r22	; 0x14
    2328:	08 95       	ret

0000232a <_ZN13HardwareServo7setMaxCEj>:
}

void HardwareServo::setMaxC(uint16_t us){
	_maxC = us;
    232a:	fc 01       	movw	r30, r24
    232c:	77 8b       	std	Z+23, r23	; 0x17
    232e:	66 8b       	std	Z+22, r22	; 0x16
    2330:	08 95       	ret

00002332 <_GLOBAL__sub_I_Servo1>:
 *  Author: zcarey
 */ 

#include "HardwareServo.h"

    2332:	cf 92       	push	r12
    2334:	df 92       	push	r13
    2336:	ef 92       	push	r14
    2338:	ff 92       	push	r15
    233a:	0f 93       	push	r16
    233c:	1f 93       	push	r17
    233e:	0f 2e       	mov	r0, r31
    2340:	fc e8       	ldi	r31, 0x8C	; 140
    2342:	cf 2e       	mov	r12, r31
    2344:	d1 2c       	mov	r13, r1
    2346:	f0 2d       	mov	r31, r0
    2348:	0f 2e       	mov	r0, r31
    234a:	fa e8       	ldi	r31, 0x8A	; 138
    234c:	ef 2e       	mov	r14, r31
    234e:	f1 2c       	mov	r15, r1
    2350:	f0 2d       	mov	r31, r0
    2352:	08 e8       	ldi	r16, 0x88	; 136
    2354:	10 e0       	ldi	r17, 0x00	; 0
    2356:	21 e8       	ldi	r18, 0x81	; 129
    2358:	30 e0       	ldi	r19, 0x00	; 0
    235a:	40 e8       	ldi	r20, 0x80	; 128
    235c:	50 e0       	ldi	r21, 0x00	; 0
    235e:	66 e8       	ldi	r22, 0x86	; 134
    2360:	70 e0       	ldi	r23, 0x00	; 0
    2362:	8f e2       	ldi	r24, 0x2F	; 47
    2364:	96 e0       	ldi	r25, 0x06	; 6
    2366:	07 df       	rcall	.-498    	; 0x2176 <_ZN13HardwareServoC1ERVjRVhS3_S1_S1_S1_>
    2368:	1f 91       	pop	r17
    236a:	0f 91       	pop	r16
    236c:	ff 90       	pop	r15
    236e:	ef 90       	pop	r14
    2370:	df 90       	pop	r13
    2372:	cf 90       	pop	r12
    2374:	08 95       	ret

00002376 <_GLOBAL__sub_I_Servo3>:
 *  Author: zcarey
 */ 

#include "HardwareServo.h"

    2376:	cf 92       	push	r12
    2378:	df 92       	push	r13
    237a:	ef 92       	push	r14
    237c:	ff 92       	push	r15
    237e:	0f 93       	push	r16
    2380:	1f 93       	push	r17
    2382:	0f 2e       	mov	r0, r31
    2384:	fc e9       	ldi	r31, 0x9C	; 156
    2386:	cf 2e       	mov	r12, r31
    2388:	d1 2c       	mov	r13, r1
    238a:	f0 2d       	mov	r31, r0
    238c:	0f 2e       	mov	r0, r31
    238e:	fa e9       	ldi	r31, 0x9A	; 154
    2390:	ef 2e       	mov	r14, r31
    2392:	f1 2c       	mov	r15, r1
    2394:	f0 2d       	mov	r31, r0
    2396:	08 e9       	ldi	r16, 0x98	; 152
    2398:	10 e0       	ldi	r17, 0x00	; 0
    239a:	21 e9       	ldi	r18, 0x91	; 145
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	40 e9       	ldi	r20, 0x90	; 144
    23a0:	50 e0       	ldi	r21, 0x00	; 0
    23a2:	66 e9       	ldi	r22, 0x96	; 150
    23a4:	70 e0       	ldi	r23, 0x00	; 0
    23a6:	87 e4       	ldi	r24, 0x47	; 71
    23a8:	96 e0       	ldi	r25, 0x06	; 6
    23aa:	e5 de       	rcall	.-566    	; 0x2176 <_ZN13HardwareServoC1ERVjRVhS3_S1_S1_S1_>
    23ac:	1f 91       	pop	r17
    23ae:	0f 91       	pop	r16
    23b0:	ff 90       	pop	r15
    23b2:	ef 90       	pop	r14
    23b4:	df 90       	pop	r13
    23b6:	cf 90       	pop	r12
    23b8:	08 95       	ret

000023ba <_GLOBAL__sub_I_Servo4>:
 *  Author: zcarey
 */ 

#include "HardwareServo.h"

HardwareServo Servo4(ICR4, TCCR4A, TCCR4B, OCR4A, OCR4B, OCR4C);
    23ba:	cf 92       	push	r12
    23bc:	df 92       	push	r13
    23be:	ef 92       	push	r14
    23c0:	ff 92       	push	r15
    23c2:	0f 93       	push	r16
    23c4:	1f 93       	push	r17
    23c6:	0f 2e       	mov	r0, r31
    23c8:	fc ea       	ldi	r31, 0xAC	; 172
    23ca:	cf 2e       	mov	r12, r31
    23cc:	d1 2c       	mov	r13, r1
    23ce:	f0 2d       	mov	r31, r0
    23d0:	0f 2e       	mov	r0, r31
    23d2:	fa ea       	ldi	r31, 0xAA	; 170
    23d4:	ef 2e       	mov	r14, r31
    23d6:	f1 2c       	mov	r15, r1
    23d8:	f0 2d       	mov	r31, r0
    23da:	08 ea       	ldi	r16, 0xA8	; 168
    23dc:	10 e0       	ldi	r17, 0x00	; 0
    23de:	21 ea       	ldi	r18, 0xA1	; 161
    23e0:	30 e0       	ldi	r19, 0x00	; 0
    23e2:	40 ea       	ldi	r20, 0xA0	; 160
    23e4:	50 e0       	ldi	r21, 0x00	; 0
    23e6:	66 ea       	ldi	r22, 0xA6	; 166
    23e8:	70 e0       	ldi	r23, 0x00	; 0
    23ea:	8f e5       	ldi	r24, 0x5F	; 95
    23ec:	96 e0       	ldi	r25, 0x06	; 6
    23ee:	c3 de       	rcall	.-634    	; 0x2176 <_ZN13HardwareServoC1ERVjRVhS3_S1_S1_S1_>
    23f0:	1f 91       	pop	r17
    23f2:	0f 91       	pop	r16
    23f4:	ff 90       	pop	r15
    23f6:	ef 90       	pop	r14
    23f8:	df 90       	pop	r13
    23fa:	cf 90       	pop	r12
    23fc:	08 95       	ret

000023fe <_GLOBAL__sub_I_Servo5>:
 */ 


#include "HardwareServo.h"

HardwareServo Servo5(ICR5, TCCR5A, TCCR5B, OCR5A, OCR5B, OCR5C);
    23fe:	cf 92       	push	r12
    2400:	df 92       	push	r13
    2402:	ef 92       	push	r14
    2404:	ff 92       	push	r15
    2406:	0f 93       	push	r16
    2408:	1f 93       	push	r17
    240a:	0f 2e       	mov	r0, r31
    240c:	fc e2       	ldi	r31, 0x2C	; 44
    240e:	cf 2e       	mov	r12, r31
    2410:	dd 24       	eor	r13, r13
    2412:	d3 94       	inc	r13
    2414:	f0 2d       	mov	r31, r0
    2416:	0f 2e       	mov	r0, r31
    2418:	fa e2       	ldi	r31, 0x2A	; 42
    241a:	ef 2e       	mov	r14, r31
    241c:	ff 24       	eor	r15, r15
    241e:	f3 94       	inc	r15
    2420:	f0 2d       	mov	r31, r0
    2422:	08 e2       	ldi	r16, 0x28	; 40
    2424:	11 e0       	ldi	r17, 0x01	; 1
    2426:	21 e2       	ldi	r18, 0x21	; 33
    2428:	31 e0       	ldi	r19, 0x01	; 1
    242a:	40 e2       	ldi	r20, 0x20	; 32
    242c:	51 e0       	ldi	r21, 0x01	; 1
    242e:	66 e2       	ldi	r22, 0x26	; 38
    2430:	71 e0       	ldi	r23, 0x01	; 1
    2432:	87 e7       	ldi	r24, 0x77	; 119
    2434:	96 e0       	ldi	r25, 0x06	; 6
    2436:	9f de       	rcall	.-706    	; 0x2176 <_ZN13HardwareServoC1ERVjRVhS3_S1_S1_S1_>
    2438:	1f 91       	pop	r17
    243a:	0f 91       	pop	r16
    243c:	ff 90       	pop	r15
    243e:	ef 90       	pop	r14
    2440:	df 90       	pop	r13
    2442:	cf 90       	pop	r12
    2444:	08 95       	ret

00002446 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2446:	10 92 fc 06 	sts	0x06FC, r1	; 0x8006fc <twi_state>
    244a:	81 e0       	ldi	r24, 0x01	; 1
    244c:	80 93 fa 06 	sts	0x06FA, r24	; 0x8006fa <twi_sendStop>
    2450:	10 92 f9 06 	sts	0x06F9, r1	; 0x8006f9 <twi_inRepStart>
    2454:	8b b1       	in	r24, 0x0b	; 11
    2456:	83 60       	ori	r24, 0x03	; 3
    2458:	8b b9       	out	0x0b, r24	; 11
    245a:	e9 eb       	ldi	r30, 0xB9	; 185
    245c:	f0 e0       	ldi	r31, 0x00	; 0
    245e:	80 81       	ld	r24, Z
    2460:	8e 7f       	andi	r24, 0xFE	; 254
    2462:	80 83       	st	Z, r24
    2464:	80 81       	ld	r24, Z
    2466:	8d 7f       	andi	r24, 0xFD	; 253
    2468:	80 83       	st	Z, r24
    246a:	88 e4       	ldi	r24, 0x48	; 72
    246c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    2470:	85 e4       	ldi	r24, 0x45	; 69
    2472:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2476:	08 95       	ret

00002478 <twi_readFrom>:
    2478:	41 32       	cpi	r20, 0x21	; 33
    247a:	08 f0       	brcs	.+2      	; 0x247e <twi_readFrom+0x6>
    247c:	4c c0       	rjmp	.+152    	; 0x2516 <twi_readFrom+0x9e>
    247e:	90 91 fc 06 	lds	r25, 0x06FC	; 0x8006fc <twi_state>
    2482:	91 11       	cpse	r25, r1
    2484:	fc cf       	rjmp	.-8      	; 0x247e <twi_readFrom+0x6>
    2486:	31 e0       	ldi	r19, 0x01	; 1
    2488:	30 93 fc 06 	sts	0x06FC, r19	; 0x8006fc <twi_state>
    248c:	20 93 fa 06 	sts	0x06FA, r18	; 0x8006fa <twi_sendStop>
    2490:	2f ef       	ldi	r18, 0xFF	; 255
    2492:	20 93 8f 06 	sts	0x068F, r18	; 0x80068f <twi_error>
    2496:	10 92 d4 06 	sts	0x06D4, r1	; 0x8006d4 <twi_masterBufferIndex>
    249a:	24 0f       	add	r18, r20
    249c:	20 93 d3 06 	sts	0x06D3, r18	; 0x8006d3 <twi_masterBufferLength>
    24a0:	30 93 fb 06 	sts	0x06FB, r19	; 0x8006fb <twi_slarw>
    24a4:	20 91 fb 06 	lds	r18, 0x06FB	; 0x8006fb <twi_slarw>
    24a8:	88 0f       	add	r24, r24
    24aa:	82 2b       	or	r24, r18
    24ac:	80 93 fb 06 	sts	0x06FB, r24	; 0x8006fb <twi_slarw>
    24b0:	80 91 f9 06 	lds	r24, 0x06F9	; 0x8006f9 <twi_inRepStart>
    24b4:	81 30       	cpi	r24, 0x01	; 1
    24b6:	81 f4       	brne	.+32     	; 0x24d8 <twi_readFrom+0x60>
    24b8:	10 92 f9 06 	sts	0x06F9, r1	; 0x8006f9 <twi_inRepStart>
    24bc:	ab eb       	ldi	r26, 0xBB	; 187
    24be:	b0 e0       	ldi	r27, 0x00	; 0
    24c0:	ec eb       	ldi	r30, 0xBC	; 188
    24c2:	f0 e0       	ldi	r31, 0x00	; 0
    24c4:	80 91 fb 06 	lds	r24, 0x06FB	; 0x8006fb <twi_slarw>
    24c8:	8c 93       	st	X, r24
    24ca:	80 81       	ld	r24, Z
    24cc:	83 fd       	sbrc	r24, 3
    24ce:	fa cf       	rjmp	.-12     	; 0x24c4 <twi_readFrom+0x4c>
    24d0:	85 ec       	ldi	r24, 0xC5	; 197
    24d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    24d6:	03 c0       	rjmp	.+6      	; 0x24de <twi_readFrom+0x66>
    24d8:	85 ee       	ldi	r24, 0xE5	; 229
    24da:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    24de:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <twi_state>
    24e2:	81 30       	cpi	r24, 0x01	; 1
    24e4:	e1 f3       	breq	.-8      	; 0x24de <twi_readFrom+0x66>
    24e6:	80 91 d4 06 	lds	r24, 0x06D4	; 0x8006d4 <twi_masterBufferIndex>
    24ea:	84 17       	cp	r24, r20
    24ec:	10 f4       	brcc	.+4      	; 0x24f2 <twi_readFrom+0x7a>
    24ee:	40 91 d4 06 	lds	r20, 0x06D4	; 0x8006d4 <twi_masterBufferIndex>
    24f2:	44 23       	and	r20, r20
    24f4:	89 f0       	breq	.+34     	; 0x2518 <twi_readFrom+0xa0>
    24f6:	e5 ed       	ldi	r30, 0xD5	; 213
    24f8:	f6 e0       	ldi	r31, 0x06	; 6
    24fa:	a6 2f       	mov	r26, r22
    24fc:	b7 2f       	mov	r27, r23
    24fe:	2f ef       	ldi	r18, 0xFF	; 255
    2500:	24 0f       	add	r18, r20
    2502:	30 e0       	ldi	r19, 0x00	; 0
    2504:	2a 52       	subi	r18, 0x2A	; 42
    2506:	39 4f       	sbci	r19, 0xF9	; 249
    2508:	81 91       	ld	r24, Z+
    250a:	8d 93       	st	X+, r24
    250c:	e2 17       	cp	r30, r18
    250e:	f3 07       	cpc	r31, r19
    2510:	d9 f7       	brne	.-10     	; 0x2508 <twi_readFrom+0x90>
    2512:	94 2f       	mov	r25, r20
    2514:	01 c0       	rjmp	.+2      	; 0x2518 <twi_readFrom+0xa0>
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	89 2f       	mov	r24, r25
    251a:	08 95       	ret

0000251c <twi_writeTo>:
    251c:	0f 93       	push	r16
    251e:	41 32       	cpi	r20, 0x21	; 33
    2520:	08 f0       	brcs	.+2      	; 0x2524 <twi_writeTo+0x8>
    2522:	57 c0       	rjmp	.+174    	; 0x25d2 <twi_writeTo+0xb6>
    2524:	30 91 fc 06 	lds	r19, 0x06FC	; 0x8006fc <twi_state>
    2528:	31 11       	cpse	r19, r1
    252a:	fc cf       	rjmp	.-8      	; 0x2524 <twi_writeTo+0x8>
    252c:	92 e0       	ldi	r25, 0x02	; 2
    252e:	90 93 fc 06 	sts	0x06FC, r25	; 0x8006fc <twi_state>
    2532:	00 93 fa 06 	sts	0x06FA, r16	; 0x8006fa <twi_sendStop>
    2536:	9f ef       	ldi	r25, 0xFF	; 255
    2538:	90 93 8f 06 	sts	0x068F, r25	; 0x80068f <twi_error>
    253c:	10 92 d4 06 	sts	0x06D4, r1	; 0x8006d4 <twi_masterBufferIndex>
    2540:	40 93 d3 06 	sts	0x06D3, r20	; 0x8006d3 <twi_masterBufferLength>
    2544:	44 23       	and	r20, r20
    2546:	71 f0       	breq	.+28     	; 0x2564 <twi_writeTo+0x48>
    2548:	fb 01       	movw	r30, r22
    254a:	a5 ed       	ldi	r26, 0xD5	; 213
    254c:	b6 e0       	ldi	r27, 0x06	; 6
    254e:	41 50       	subi	r20, 0x01	; 1
    2550:	50 e0       	ldi	r21, 0x00	; 0
    2552:	4f 5f       	subi	r20, 0xFF	; 255
    2554:	5f 4f       	sbci	r21, 0xFF	; 255
    2556:	64 0f       	add	r22, r20
    2558:	75 1f       	adc	r23, r21
    255a:	91 91       	ld	r25, Z+
    255c:	9d 93       	st	X+, r25
    255e:	e6 17       	cp	r30, r22
    2560:	f7 07       	cpc	r31, r23
    2562:	d9 f7       	brne	.-10     	; 0x255a <twi_writeTo+0x3e>
    2564:	10 92 fb 06 	sts	0x06FB, r1	; 0x8006fb <twi_slarw>
    2568:	90 91 fb 06 	lds	r25, 0x06FB	; 0x8006fb <twi_slarw>
    256c:	88 0f       	add	r24, r24
    256e:	89 2b       	or	r24, r25
    2570:	80 93 fb 06 	sts	0x06FB, r24	; 0x8006fb <twi_slarw>
    2574:	80 91 f9 06 	lds	r24, 0x06F9	; 0x8006f9 <twi_inRepStart>
    2578:	81 30       	cpi	r24, 0x01	; 1
    257a:	81 f4       	brne	.+32     	; 0x259c <twi_writeTo+0x80>
    257c:	10 92 f9 06 	sts	0x06F9, r1	; 0x8006f9 <twi_inRepStart>
    2580:	ab eb       	ldi	r26, 0xBB	; 187
    2582:	b0 e0       	ldi	r27, 0x00	; 0
    2584:	ec eb       	ldi	r30, 0xBC	; 188
    2586:	f0 e0       	ldi	r31, 0x00	; 0
    2588:	80 91 fb 06 	lds	r24, 0x06FB	; 0x8006fb <twi_slarw>
    258c:	8c 93       	st	X, r24
    258e:	80 81       	ld	r24, Z
    2590:	83 fd       	sbrc	r24, 3
    2592:	fa cf       	rjmp	.-12     	; 0x2588 <twi_writeTo+0x6c>
    2594:	85 ec       	ldi	r24, 0xC5	; 197
    2596:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    259a:	03 c0       	rjmp	.+6      	; 0x25a2 <twi_writeTo+0x86>
    259c:	85 ee       	ldi	r24, 0xE5	; 229
    259e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    25a2:	22 23       	and	r18, r18
    25a4:	41 f0       	breq	.+16     	; 0x25b6 <twi_writeTo+0x9a>
    25a6:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <twi_state>
    25aa:	82 30       	cpi	r24, 0x02	; 2
    25ac:	21 f4       	brne	.+8      	; 0x25b6 <twi_writeTo+0x9a>
    25ae:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <twi_state>
    25b2:	82 30       	cpi	r24, 0x02	; 2
    25b4:	e1 f3       	breq	.-8      	; 0x25ae <twi_writeTo+0x92>
    25b6:	80 91 8f 06 	lds	r24, 0x068F	; 0x80068f <twi_error>
    25ba:	8f 3f       	cpi	r24, 0xFF	; 255
    25bc:	79 f0       	breq	.+30     	; 0x25dc <twi_writeTo+0xc0>
    25be:	80 91 8f 06 	lds	r24, 0x068F	; 0x80068f <twi_error>
    25c2:	80 32       	cpi	r24, 0x20	; 32
    25c4:	41 f0       	breq	.+16     	; 0x25d6 <twi_writeTo+0xba>
    25c6:	80 91 8f 06 	lds	r24, 0x068F	; 0x80068f <twi_error>
    25ca:	80 33       	cpi	r24, 0x30	; 48
    25cc:	31 f0       	breq	.+12     	; 0x25da <twi_writeTo+0xbe>
    25ce:	34 e0       	ldi	r19, 0x04	; 4
    25d0:	05 c0       	rjmp	.+10     	; 0x25dc <twi_writeTo+0xc0>
    25d2:	31 e0       	ldi	r19, 0x01	; 1
    25d4:	03 c0       	rjmp	.+6      	; 0x25dc <twi_writeTo+0xc0>
    25d6:	32 e0       	ldi	r19, 0x02	; 2
    25d8:	01 c0       	rjmp	.+2      	; 0x25dc <twi_writeTo+0xc0>
    25da:	33 e0       	ldi	r19, 0x03	; 3
    25dc:	83 2f       	mov	r24, r19
    25de:	0f 91       	pop	r16
    25e0:	08 95       	ret

000025e2 <twi_transmit>:
    25e2:	40 91 b1 06 	lds	r20, 0x06B1	; 0x8006b1 <twi_txBufferLength>
    25e6:	26 2f       	mov	r18, r22
    25e8:	30 e0       	ldi	r19, 0x00	; 0
    25ea:	24 0f       	add	r18, r20
    25ec:	31 1d       	adc	r19, r1
    25ee:	21 32       	cpi	r18, 0x21	; 33
    25f0:	31 05       	cpc	r19, r1
    25f2:	ec f4       	brge	.+58     	; 0x262e <twi_transmit+0x4c>
    25f4:	20 91 fc 06 	lds	r18, 0x06FC	; 0x8006fc <twi_state>
    25f8:	24 30       	cpi	r18, 0x04	; 4
    25fa:	d9 f4       	brne	.+54     	; 0x2632 <twi_transmit+0x50>
    25fc:	66 23       	and	r22, r22
    25fe:	81 f0       	breq	.+32     	; 0x2620 <twi_transmit+0x3e>
    2600:	a8 2f       	mov	r26, r24
    2602:	b9 2f       	mov	r27, r25
    2604:	80 e0       	ldi	r24, 0x00	; 0
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	30 91 b1 06 	lds	r19, 0x06B1	; 0x8006b1 <twi_txBufferLength>
    260c:	2d 91       	ld	r18, X+
    260e:	fc 01       	movw	r30, r24
    2610:	ed 54       	subi	r30, 0x4D	; 77
    2612:	f9 4f       	sbci	r31, 0xF9	; 249
    2614:	e3 0f       	add	r30, r19
    2616:	f1 1d       	adc	r31, r1
    2618:	20 83       	st	Z, r18
    261a:	01 96       	adiw	r24, 0x01	; 1
    261c:	86 17       	cp	r24, r22
    261e:	a0 f3       	brcs	.-24     	; 0x2608 <twi_transmit+0x26>
    2620:	80 91 b1 06 	lds	r24, 0x06B1	; 0x8006b1 <twi_txBufferLength>
    2624:	68 0f       	add	r22, r24
    2626:	60 93 b1 06 	sts	0x06B1, r22	; 0x8006b1 <twi_txBufferLength>
    262a:	80 e0       	ldi	r24, 0x00	; 0
    262c:	08 95       	ret
    262e:	81 e0       	ldi	r24, 0x01	; 1
    2630:	08 95       	ret
    2632:	82 e0       	ldi	r24, 0x02	; 2
    2634:	08 95       	ret

00002636 <twi_attachSlaveRxEvent>:
    2636:	90 93 f6 06 	sts	0x06F6, r25	; 0x8006f6 <twi_onSlaveReceive+0x1>
    263a:	80 93 f5 06 	sts	0x06F5, r24	; 0x8006f5 <twi_onSlaveReceive>
    263e:	08 95       	ret

00002640 <twi_attachSlaveTxEvent>:
    2640:	90 93 f8 06 	sts	0x06F8, r25	; 0x8006f8 <twi_onSlaveTransmit+0x1>
    2644:	80 93 f7 06 	sts	0x06F7, r24	; 0x8006f7 <twi_onSlaveTransmit>
    2648:	08 95       	ret

0000264a <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    264a:	85 ed       	ldi	r24, 0xD5	; 213
    264c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    2650:	ec eb       	ldi	r30, 0xBC	; 188
    2652:	f0 e0       	ldi	r31, 0x00	; 0
    2654:	80 81       	ld	r24, Z
    2656:	84 fd       	sbrc	r24, 4
    2658:	fd cf       	rjmp	.-6      	; 0x2654 <twi_stop+0xa>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    265a:	10 92 fc 06 	sts	0x06FC, r1	; 0x8006fc <twi_state>
    265e:	08 95       	ret

00002660 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    2660:	85 ec       	ldi	r24, 0xC5	; 197
    2662:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // update twi state
  twi_state = TWI_READY;
    2666:	10 92 fc 06 	sts	0x06FC, r1	; 0x8006fc <twi_state>
    266a:	08 95       	ret

0000266c <__vector_39>:
}

ISR(TWI_vect)
{
    266c:	1f 92       	push	r1
    266e:	0f 92       	push	r0
    2670:	0f b6       	in	r0, 0x3f	; 63
    2672:	0f 92       	push	r0
    2674:	11 24       	eor	r1, r1
    2676:	0b b6       	in	r0, 0x3b	; 59
    2678:	0f 92       	push	r0
    267a:	2f 93       	push	r18
    267c:	3f 93       	push	r19
    267e:	4f 93       	push	r20
    2680:	5f 93       	push	r21
    2682:	6f 93       	push	r22
    2684:	7f 93       	push	r23
    2686:	8f 93       	push	r24
    2688:	9f 93       	push	r25
    268a:	af 93       	push	r26
    268c:	bf 93       	push	r27
    268e:	ef 93       	push	r30
    2690:	ff 93       	push	r31
  switch(TW_STATUS){
    2692:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    2696:	88 7f       	andi	r24, 0xF8	; 248
    2698:	90 e0       	ldi	r25, 0x00	; 0
    269a:	89 3c       	cpi	r24, 0xC9	; 201
    269c:	91 05       	cpc	r25, r1
    269e:	08 f0       	brcs	.+2      	; 0x26a2 <__vector_39+0x36>
    26a0:	ee c0       	rjmp	.+476    	; 0x287e <__vector_39+0x212>
    26a2:	fc 01       	movw	r30, r24
    26a4:	88 27       	eor	r24, r24
    26a6:	ee 58       	subi	r30, 0x8E	; 142
    26a8:	ff 4f       	sbci	r31, 0xFF	; 255
    26aa:	8f 4f       	sbci	r24, 0xFF	; 255
    26ac:	ca c5       	rjmp	.+2964   	; 0x3242 <__tablejump2__>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    26ae:	80 91 fb 06 	lds	r24, 0x06FB	; 0x8006fb <twi_slarw>
    26b2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    26b6:	85 ec       	ldi	r24, 0xC5	; 197
    26b8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    26bc:	e0 c0       	rjmp	.+448    	; 0x287e <__vector_39+0x212>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    26be:	90 91 d4 06 	lds	r25, 0x06D4	; 0x8006d4 <twi_masterBufferIndex>
    26c2:	80 91 d3 06 	lds	r24, 0x06D3	; 0x8006d3 <twi_masterBufferLength>
    26c6:	98 17       	cp	r25, r24
    26c8:	80 f4       	brcc	.+32     	; 0x26ea <__vector_39+0x7e>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    26ca:	e0 91 d4 06 	lds	r30, 0x06D4	; 0x8006d4 <twi_masterBufferIndex>
    26ce:	81 e0       	ldi	r24, 0x01	; 1
    26d0:	8e 0f       	add	r24, r30
    26d2:	80 93 d4 06 	sts	0x06D4, r24	; 0x8006d4 <twi_masterBufferIndex>
    26d6:	f0 e0       	ldi	r31, 0x00	; 0
    26d8:	eb 52       	subi	r30, 0x2B	; 43
    26da:	f9 4f       	sbci	r31, 0xF9	; 249
    26dc:	80 81       	ld	r24, Z
    26de:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    26e2:	85 ec       	ldi	r24, 0xC5	; 197
    26e4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    26e8:	ca c0       	rjmp	.+404    	; 0x287e <__vector_39+0x212>
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
        twi_reply(1);
      }else{
	if (twi_sendStop)
    26ea:	80 91 fa 06 	lds	r24, 0x06FA	; 0x8006fa <twi_sendStop>
    26ee:	88 23       	and	r24, r24
          twi_stop();
    26f0:	11 f0       	breq	.+4      	; 0x26f6 <__vector_39+0x8a>
    26f2:	ab df       	rcall	.-170    	; 0x264a <twi_stop>
    26f4:	c4 c0       	rjmp	.+392    	; 0x287e <__vector_39+0x212>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    26f6:	81 e0       	ldi	r24, 0x01	; 1
    26f8:	80 93 f9 06 	sts	0x06F9, r24	; 0x8006f9 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    26fc:	84 ea       	ldi	r24, 0xA4	; 164
    26fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	  twi_state = TWI_READY;
    2702:	10 92 fc 06 	sts	0x06FC, r1	; 0x8006fc <twi_state>
    2706:	bb c0       	rjmp	.+374    	; 0x287e <__vector_39+0x212>
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    2708:	80 e2       	ldi	r24, 0x20	; 32
    270a:	80 93 8f 06 	sts	0x068F, r24	; 0x80068f <twi_error>
      twi_stop();
    270e:	9d df       	rcall	.-198    	; 0x264a <twi_stop>
      break;
    2710:	b6 c0       	rjmp	.+364    	; 0x287e <__vector_39+0x212>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    2712:	80 e3       	ldi	r24, 0x30	; 48
    2714:	80 93 8f 06 	sts	0x068F, r24	; 0x80068f <twi_error>
      twi_stop();
    2718:	98 df       	rcall	.-208    	; 0x264a <twi_stop>
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    271a:	b1 c0       	rjmp	.+354    	; 0x287e <__vector_39+0x212>
    271c:	88 e3       	ldi	r24, 0x38	; 56
    271e:	80 93 8f 06 	sts	0x068F, r24	; 0x80068f <twi_error>
      twi_releaseBus();
    2722:	9e df       	rcall	.-196    	; 0x2660 <twi_releaseBus>
      break;
    2724:	ac c0       	rjmp	.+344    	; 0x287e <__vector_39+0x212>

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2726:	e0 91 d4 06 	lds	r30, 0x06D4	; 0x8006d4 <twi_masterBufferIndex>
    272a:	81 e0       	ldi	r24, 0x01	; 1
    272c:	8e 0f       	add	r24, r30
    272e:	80 93 d4 06 	sts	0x06D4, r24	; 0x8006d4 <twi_masterBufferIndex>
    2732:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2736:	f0 e0       	ldi	r31, 0x00	; 0
    2738:	eb 52       	subi	r30, 0x2B	; 43
    273a:	f9 4f       	sbci	r31, 0xF9	; 249
    273c:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    273e:	90 91 d4 06 	lds	r25, 0x06D4	; 0x8006d4 <twi_masterBufferIndex>
    2742:	80 91 d3 06 	lds	r24, 0x06D3	; 0x8006d3 <twi_masterBufferLength>
    2746:	98 17       	cp	r25, r24
    2748:	20 f4       	brcc	.+8      	; 0x2752 <__vector_39+0xe6>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    274a:	85 ec       	ldi	r24, 0xC5	; 197
    274c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2750:	96 c0       	rjmp	.+300    	; 0x287e <__vector_39+0x212>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2752:	85 e8       	ldi	r24, 0x85	; 133
    2754:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2758:	92 c0       	rjmp	.+292    	; 0x287e <__vector_39+0x212>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    275a:	e0 91 d4 06 	lds	r30, 0x06D4	; 0x8006d4 <twi_masterBufferIndex>
    275e:	81 e0       	ldi	r24, 0x01	; 1
    2760:	8e 0f       	add	r24, r30
    2762:	80 93 d4 06 	sts	0x06D4, r24	; 0x8006d4 <twi_masterBufferIndex>
    2766:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    276a:	f0 e0       	ldi	r31, 0x00	; 0
    276c:	eb 52       	subi	r30, 0x2B	; 43
    276e:	f9 4f       	sbci	r31, 0xF9	; 249
	if (twi_sendStop)
    2770:	80 83       	st	Z, r24
    2772:	80 91 fa 06 	lds	r24, 0x06FA	; 0x8006fa <twi_sendStop>
    2776:	88 23       	and	r24, r24
          twi_stop();
    2778:	11 f0       	breq	.+4      	; 0x277e <__vector_39+0x112>
    277a:	67 df       	rcall	.-306    	; 0x264a <twi_stop>
    277c:	80 c0       	rjmp	.+256    	; 0x287e <__vector_39+0x212>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    277e:	81 e0       	ldi	r24, 0x01	; 1
    2780:	80 93 f9 06 	sts	0x06F9, r24	; 0x8006f9 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2784:	84 ea       	ldi	r24, 0xA4	; 164
    2786:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	  twi_state = TWI_READY;
    278a:	10 92 fc 06 	sts	0x06FC, r1	; 0x8006fc <twi_state>
	}    
	break;
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
    278e:	77 c0       	rjmp	.+238    	; 0x287e <__vector_39+0x212>
    2790:	5c df       	rcall	.-328    	; 0x264a <twi_stop>
      break;
    2792:	75 c0       	rjmp	.+234    	; 0x287e <__vector_39+0x212>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    2794:	83 e0       	ldi	r24, 0x03	; 3
    2796:	80 93 fc 06 	sts	0x06FC, r24	; 0x8006fc <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    279a:	10 92 90 06 	sts	0x0690, r1	; 0x800690 <twi_rxBufferIndex>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    279e:	85 ec       	ldi	r24, 0xC5	; 197
    27a0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    27a4:	6c c0       	rjmp	.+216    	; 0x287e <__vector_39+0x212>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    27a6:	80 91 90 06 	lds	r24, 0x0690	; 0x800690 <twi_rxBufferIndex>
    27aa:	80 32       	cpi	r24, 0x20	; 32
    27ac:	80 f4       	brcc	.+32     	; 0x27ce <__vector_39+0x162>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    27ae:	e0 91 90 06 	lds	r30, 0x0690	; 0x800690 <twi_rxBufferIndex>
    27b2:	81 e0       	ldi	r24, 0x01	; 1
    27b4:	8e 0f       	add	r24, r30
    27b6:	80 93 90 06 	sts	0x0690, r24	; 0x800690 <twi_rxBufferIndex>
    27ba:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    27be:	f0 e0       	ldi	r31, 0x00	; 0
    27c0:	ef 56       	subi	r30, 0x6F	; 111
    27c2:	f9 4f       	sbci	r31, 0xF9	; 249
    27c4:	80 83       	st	Z, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    27c6:	85 ec       	ldi	r24, 0xC5	; 197
    27c8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    27cc:	58 c0       	rjmp	.+176    	; 0x287e <__vector_39+0x212>
    27ce:	85 e8       	ldi	r24, 0x85	; 133
    27d0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    27d4:	54 c0       	rjmp	.+168    	; 0x287e <__vector_39+0x212>
    27d6:	44 df       	rcall	.-376    	; 0x2660 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    27d8:	80 91 90 06 	lds	r24, 0x0690	; 0x800690 <twi_rxBufferIndex>
    27dc:	80 32       	cpi	r24, 0x20	; 32
    27de:	30 f4       	brcc	.+12     	; 0x27ec <__vector_39+0x180>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    27e0:	e0 91 90 06 	lds	r30, 0x0690	; 0x800690 <twi_rxBufferIndex>
    27e4:	f0 e0       	ldi	r31, 0x00	; 0
    27e6:	ef 56       	subi	r30, 0x6F	; 111
    27e8:	f9 4f       	sbci	r31, 0xF9	; 249
    27ea:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    27ec:	60 91 90 06 	lds	r22, 0x0690	; 0x800690 <twi_rxBufferIndex>
    27f0:	70 e0       	ldi	r23, 0x00	; 0
    27f2:	e0 91 f5 06 	lds	r30, 0x06F5	; 0x8006f5 <twi_onSlaveReceive>
    27f6:	f0 91 f6 06 	lds	r31, 0x06F6	; 0x8006f6 <twi_onSlaveReceive+0x1>
    27fa:	81 e9       	ldi	r24, 0x91	; 145
    27fc:	96 e0       	ldi	r25, 0x06	; 6
    27fe:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    2800:	10 92 90 06 	sts	0x0690, r1	; 0x800690 <twi_rxBufferIndex>
      break;
    2804:	3c c0       	rjmp	.+120    	; 0x287e <__vector_39+0x212>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2806:	85 e8       	ldi	r24, 0x85	; 133
    2808:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    280c:	38 c0       	rjmp	.+112    	; 0x287e <__vector_39+0x212>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    280e:	84 e0       	ldi	r24, 0x04	; 4
    2810:	80 93 fc 06 	sts	0x06FC, r24	; 0x8006fc <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    2814:	10 92 b2 06 	sts	0x06B2, r1	; 0x8006b2 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    2818:	10 92 b1 06 	sts	0x06B1, r1	; 0x8006b1 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    281c:	e0 91 f7 06 	lds	r30, 0x06F7	; 0x8006f7 <twi_onSlaveTransmit>
    2820:	f0 91 f8 06 	lds	r31, 0x06F8	; 0x8006f8 <twi_onSlaveTransmit+0x1>
    2824:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    2826:	80 91 b1 06 	lds	r24, 0x06B1	; 0x8006b1 <twi_txBufferLength>
    282a:	81 11       	cpse	r24, r1
    282c:	05 c0       	rjmp	.+10     	; 0x2838 <__vector_39+0x1cc>
        twi_txBufferLength = 1;
    282e:	81 e0       	ldi	r24, 0x01	; 1
    2830:	80 93 b1 06 	sts	0x06B1, r24	; 0x8006b1 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    2834:	10 92 b3 06 	sts	0x06B3, r1	; 0x8006b3 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    2838:	e0 91 b2 06 	lds	r30, 0x06B2	; 0x8006b2 <twi_txBufferIndex>
    283c:	81 e0       	ldi	r24, 0x01	; 1
    283e:	8e 0f       	add	r24, r30
    2840:	80 93 b2 06 	sts	0x06B2, r24	; 0x8006b2 <twi_txBufferIndex>
    2844:	f0 e0       	ldi	r31, 0x00	; 0
    2846:	ed 54       	subi	r30, 0x4D	; 77
    2848:	f9 4f       	sbci	r31, 0xF9	; 249
    284a:	80 81       	ld	r24, Z
    284c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2850:	90 91 b2 06 	lds	r25, 0x06B2	; 0x8006b2 <twi_txBufferIndex>
    2854:	80 91 b1 06 	lds	r24, 0x06B1	; 0x8006b1 <twi_txBufferLength>
    2858:	98 17       	cp	r25, r24
    285a:	20 f4       	brcc	.+8      	; 0x2864 <__vector_39+0x1f8>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    285c:	85 ec       	ldi	r24, 0xC5	; 197
    285e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2862:	0d c0       	rjmp	.+26     	; 0x287e <__vector_39+0x212>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2864:	85 e8       	ldi	r24, 0x85	; 133
    2866:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    286a:	09 c0       	rjmp	.+18     	; 0x287e <__vector_39+0x212>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    286c:	85 ec       	ldi	r24, 0xC5	; 197
    286e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    2872:	10 92 fc 06 	sts	0x06FC, r1	; 0x8006fc <twi_state>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    2876:	03 c0       	rjmp	.+6      	; 0x287e <__vector_39+0x212>
    2878:	10 92 8f 06 	sts	0x068F, r1	; 0x80068f <twi_error>
      twi_stop();
    287c:	e6 de       	rcall	.-564    	; 0x264a <twi_stop>
      break;
  }
    287e:	ff 91       	pop	r31
    2880:	ef 91       	pop	r30
    2882:	bf 91       	pop	r27
    2884:	af 91       	pop	r26
    2886:	9f 91       	pop	r25
    2888:	8f 91       	pop	r24
    288a:	7f 91       	pop	r23
    288c:	6f 91       	pop	r22
    288e:	5f 91       	pop	r21
    2890:	4f 91       	pop	r20
    2892:	3f 91       	pop	r19
    2894:	2f 91       	pop	r18
    2896:	0f 90       	pop	r0
    2898:	0b be       	out	0x3b, r0	; 59
    289a:	0f 90       	pop	r0
    289c:	0f be       	out	0x3f, r0	; 63
    289e:	0f 90       	pop	r0
    28a0:	1f 90       	pop	r1
    28a2:	18 95       	reti

000028a4 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
	user_onRequest = function;
    28a4:	80 91 27 07 	lds	r24, 0x0727	; 0x800727 <_ZN7TwoWire14rxBufferLengthE>
    28a8:	90 e0       	ldi	r25, 0x00	; 0
    28aa:	20 91 28 07 	lds	r18, 0x0728	; 0x800728 <_ZN7TwoWire13rxBufferIndexE>
    28ae:	82 1b       	sub	r24, r18
    28b0:	91 09       	sbc	r25, r1
    28b2:	08 95       	ret

000028b4 <_ZN7TwoWire4readEv>:
    28b4:	90 91 28 07 	lds	r25, 0x0728	; 0x800728 <_ZN7TwoWire13rxBufferIndexE>
    28b8:	80 91 27 07 	lds	r24, 0x0727	; 0x800727 <_ZN7TwoWire14rxBufferLengthE>
    28bc:	98 17       	cp	r25, r24
    28be:	50 f4       	brcc	.+20     	; 0x28d4 <_ZN7TwoWire4readEv+0x20>
    28c0:	e9 2f       	mov	r30, r25
    28c2:	f0 e0       	ldi	r31, 0x00	; 0
    28c4:	e7 5d       	subi	r30, 0xD7	; 215
    28c6:	f8 4f       	sbci	r31, 0xF8	; 248
    28c8:	20 81       	ld	r18, Z
    28ca:	30 e0       	ldi	r19, 0x00	; 0
    28cc:	9f 5f       	subi	r25, 0xFF	; 255
    28ce:	90 93 28 07 	sts	0x0728, r25	; 0x800728 <_ZN7TwoWire13rxBufferIndexE>
    28d2:	02 c0       	rjmp	.+4      	; 0x28d8 <_ZN7TwoWire4readEv+0x24>
    28d4:	2f ef       	ldi	r18, 0xFF	; 255
    28d6:	3f ef       	ldi	r19, 0xFF	; 255
    28d8:	c9 01       	movw	r24, r18
    28da:	08 95       	ret

000028dc <_ZN7TwoWire4peekEv>:
    28dc:	e0 91 28 07 	lds	r30, 0x0728	; 0x800728 <_ZN7TwoWire13rxBufferIndexE>
    28e0:	80 91 27 07 	lds	r24, 0x0727	; 0x800727 <_ZN7TwoWire14rxBufferLengthE>
    28e4:	e8 17       	cp	r30, r24
    28e6:	30 f4       	brcc	.+12     	; 0x28f4 <_ZN7TwoWire4peekEv+0x18>
    28e8:	f0 e0       	ldi	r31, 0x00	; 0
    28ea:	e7 5d       	subi	r30, 0xD7	; 215
    28ec:	f8 4f       	sbci	r31, 0xF8	; 248
    28ee:	80 81       	ld	r24, Z
    28f0:	90 e0       	ldi	r25, 0x00	; 0
    28f2:	08 95       	ret
    28f4:	8f ef       	ldi	r24, 0xFF	; 255
    28f6:	9f ef       	ldi	r25, 0xFF	; 255
    28f8:	08 95       	ret

000028fa <_ZN7TwoWire5flushEv>:
    28fa:	08 95       	ret

000028fc <_ZN7TwoWire16onReceiveServiceEPhi>:
    28fc:	cf 93       	push	r28
    28fe:	df 93       	push	r29
    2900:	ec 01       	movw	r28, r24
    2902:	e0 91 ff 06 	lds	r30, 0x06FF	; 0x8006ff <_ZN7TwoWire14user_onReceiveE>
    2906:	f0 91 00 07 	lds	r31, 0x0700	; 0x800700 <_ZN7TwoWire14user_onReceiveE+0x1>
    290a:	30 97       	sbiw	r30, 0x00	; 0
    290c:	01 f1       	breq	.+64     	; 0x294e <_ZN7TwoWire16onReceiveServiceEPhi+0x52>
    290e:	90 91 28 07 	lds	r25, 0x0728	; 0x800728 <_ZN7TwoWire13rxBufferIndexE>
    2912:	80 91 27 07 	lds	r24, 0x0727	; 0x800727 <_ZN7TwoWire14rxBufferLengthE>
    2916:	98 17       	cp	r25, r24
    2918:	d0 f0       	brcs	.+52     	; 0x294e <_ZN7TwoWire16onReceiveServiceEPhi+0x52>
    291a:	16 16       	cp	r1, r22
    291c:	17 06       	cpc	r1, r23
    291e:	8c f4       	brge	.+34     	; 0x2942 <_ZN7TwoWire16onReceiveServiceEPhi+0x46>
    2920:	20 e0       	ldi	r18, 0x00	; 0
    2922:	30 e0       	ldi	r19, 0x00	; 0
    2924:	90 e0       	ldi	r25, 0x00	; 0
    2926:	de 01       	movw	r26, r28
    2928:	a9 0f       	add	r26, r25
    292a:	b1 1d       	adc	r27, r1
    292c:	4c 91       	ld	r20, X
    292e:	d9 01       	movw	r26, r18
    2930:	a7 5d       	subi	r26, 0xD7	; 215
    2932:	b8 4f       	sbci	r27, 0xF8	; 248
    2934:	4c 93       	st	X, r20
    2936:	9f 5f       	subi	r25, 0xFF	; 255
    2938:	29 2f       	mov	r18, r25
    293a:	30 e0       	ldi	r19, 0x00	; 0
    293c:	26 17       	cp	r18, r22
    293e:	37 07       	cpc	r19, r23
    2940:	94 f3       	brlt	.-28     	; 0x2926 <_ZN7TwoWire16onReceiveServiceEPhi+0x2a>
    2942:	cb 01       	movw	r24, r22
    2944:	10 92 28 07 	sts	0x0728, r1	; 0x800728 <_ZN7TwoWire13rxBufferIndexE>
    2948:	60 93 27 07 	sts	0x0727, r22	; 0x800727 <_ZN7TwoWire14rxBufferLengthE>
    294c:	19 95       	eicall
    294e:	df 91       	pop	r29
    2950:	cf 91       	pop	r28
    2952:	08 95       	ret

00002954 <_ZN7TwoWire16onRequestServiceEv>:
    2954:	e0 91 01 07 	lds	r30, 0x0701	; 0x800701 <_ZN7TwoWire14user_onRequestE>
    2958:	f0 91 02 07 	lds	r31, 0x0702	; 0x800702 <_ZN7TwoWire14user_onRequestE+0x1>
    295c:	30 97       	sbiw	r30, 0x00	; 0
    295e:	29 f0       	breq	.+10     	; 0x296a <_ZN7TwoWire16onRequestServiceEv+0x16>
    2960:	10 92 05 07 	sts	0x0705, r1	; 0x800705 <_ZN7TwoWire13txBufferIndexE>
    2964:	10 92 04 07 	sts	0x0704, r1	; 0x800704 <_ZN7TwoWire14txBufferLengthE>
    2968:	19 95       	eicall
    296a:	08 95       	ret

0000296c <_ZN7TwoWire5writeEh>:
    296c:	cf 93       	push	r28
    296e:	df 93       	push	r29
    2970:	1f 92       	push	r1
    2972:	cd b7       	in	r28, 0x3d	; 61
    2974:	de b7       	in	r29, 0x3e	; 62
    2976:	69 83       	std	Y+1, r22	; 0x01
    2978:	80 91 03 07 	lds	r24, 0x0703	; 0x800703 <_ZN7TwoWire12transmittingE>
    297c:	88 23       	and	r24, r24
    297e:	99 f0       	breq	.+38     	; 0x29a6 <_ZN7TwoWire5writeEh+0x3a>
    2980:	80 91 04 07 	lds	r24, 0x0704	; 0x800704 <_ZN7TwoWire14txBufferLengthE>
    2984:	80 32       	cpi	r24, 0x20	; 32
    2986:	b0 f4       	brcc	.+44     	; 0x29b4 <_ZN7TwoWire5writeEh+0x48>
    2988:	80 91 05 07 	lds	r24, 0x0705	; 0x800705 <_ZN7TwoWire13txBufferIndexE>
    298c:	e8 2f       	mov	r30, r24
    298e:	f0 e0       	ldi	r31, 0x00	; 0
    2990:	ea 5f       	subi	r30, 0xFA	; 250
    2992:	f8 4f       	sbci	r31, 0xF8	; 248
    2994:	60 83       	st	Z, r22
    2996:	8f 5f       	subi	r24, 0xFF	; 255
    2998:	80 93 05 07 	sts	0x0705, r24	; 0x800705 <_ZN7TwoWire13txBufferIndexE>
    299c:	80 93 04 07 	sts	0x0704, r24	; 0x800704 <_ZN7TwoWire14txBufferLengthE>
    29a0:	81 e0       	ldi	r24, 0x01	; 1
    29a2:	90 e0       	ldi	r25, 0x00	; 0
    29a4:	09 c0       	rjmp	.+18     	; 0x29b8 <_ZN7TwoWire5writeEh+0x4c>
    29a6:	61 e0       	ldi	r22, 0x01	; 1
    29a8:	ce 01       	movw	r24, r28
    29aa:	01 96       	adiw	r24, 0x01	; 1
    29ac:	1a de       	rcall	.-972    	; 0x25e2 <twi_transmit>
    29ae:	81 e0       	ldi	r24, 0x01	; 1
    29b0:	90 e0       	ldi	r25, 0x00	; 0
    29b2:	02 c0       	rjmp	.+4      	; 0x29b8 <_ZN7TwoWire5writeEh+0x4c>
    29b4:	80 e0       	ldi	r24, 0x00	; 0
    29b6:	90 e0       	ldi	r25, 0x00	; 0
    29b8:	0f 90       	pop	r0
    29ba:	df 91       	pop	r29
    29bc:	cf 91       	pop	r28
    29be:	08 95       	ret

000029c0 <_ZN7TwoWire5writeEPKhj>:
    29c0:	cf 92       	push	r12
    29c2:	df 92       	push	r13
    29c4:	ef 92       	push	r14
    29c6:	ff 92       	push	r15
    29c8:	0f 93       	push	r16
    29ca:	1f 93       	push	r17
    29cc:	cf 93       	push	r28
    29ce:	df 93       	push	r29
    29d0:	8c 01       	movw	r16, r24
    29d2:	cb 01       	movw	r24, r22
    29d4:	6a 01       	movw	r12, r20
    29d6:	20 91 03 07 	lds	r18, 0x0703	; 0x800703 <_ZN7TwoWire12transmittingE>
    29da:	22 23       	and	r18, r18
    29dc:	a1 f0       	breq	.+40     	; 0x2a06 <_ZN7TwoWire5writeEPKhj+0x46>
    29de:	41 15       	cp	r20, r1
    29e0:	51 05       	cpc	r21, r1
    29e2:	99 f0       	breq	.+38     	; 0x2a0a <_ZN7TwoWire5writeEPKhj+0x4a>
    29e4:	eb 01       	movw	r28, r22
    29e6:	7b 01       	movw	r14, r22
    29e8:	e4 0e       	add	r14, r20
    29ea:	f5 1e       	adc	r15, r21
    29ec:	69 91       	ld	r22, Y+
    29ee:	d8 01       	movw	r26, r16
    29f0:	ed 91       	ld	r30, X+
    29f2:	fc 91       	ld	r31, X
    29f4:	01 90       	ld	r0, Z+
    29f6:	f0 81       	ld	r31, Z
    29f8:	e0 2d       	mov	r30, r0
    29fa:	c8 01       	movw	r24, r16
    29fc:	19 95       	eicall
    29fe:	ce 15       	cp	r28, r14
    2a00:	df 05       	cpc	r29, r15
    2a02:	a1 f7       	brne	.-24     	; 0x29ec <_ZN7TwoWire5writeEPKhj+0x2c>
    2a04:	02 c0       	rjmp	.+4      	; 0x2a0a <_ZN7TwoWire5writeEPKhj+0x4a>
    2a06:	64 2f       	mov	r22, r20
    2a08:	ec dd       	rcall	.-1064   	; 0x25e2 <twi_transmit>
    2a0a:	c6 01       	movw	r24, r12
    2a0c:	df 91       	pop	r29
    2a0e:	cf 91       	pop	r28
    2a10:	1f 91       	pop	r17
    2a12:	0f 91       	pop	r16
    2a14:	ff 90       	pop	r15
    2a16:	ef 90       	pop	r14
    2a18:	df 90       	pop	r13
    2a1a:	cf 90       	pop	r12
    2a1c:	08 95       	ret

00002a1e <_ZN7TwoWire5beginEv>:
    2a1e:	10 92 28 07 	sts	0x0728, r1	; 0x800728 <_ZN7TwoWire13rxBufferIndexE>
    2a22:	10 92 27 07 	sts	0x0727, r1	; 0x800727 <_ZN7TwoWire14rxBufferLengthE>
    2a26:	10 92 05 07 	sts	0x0705, r1	; 0x800705 <_ZN7TwoWire13txBufferIndexE>
    2a2a:	10 92 04 07 	sts	0x0704, r1	; 0x800704 <_ZN7TwoWire14txBufferLengthE>
    2a2e:	0b dd       	rcall	.-1514   	; 0x2446 <twi_init>
    2a30:	8a ea       	ldi	r24, 0xAA	; 170
    2a32:	94 e1       	ldi	r25, 0x14	; 20
    2a34:	05 de       	rcall	.-1014   	; 0x2640 <twi_attachSlaveTxEvent>
    2a36:	8e e7       	ldi	r24, 0x7E	; 126
    2a38:	94 e1       	ldi	r25, 0x14	; 20
    2a3a:	fd cd       	rjmp	.-1030   	; 0x2636 <twi_attachSlaveRxEvent>
    2a3c:	08 95       	ret

00002a3e <_ZN7TwoWire17beginTransmissionEh>:
    2a3e:	81 e0       	ldi	r24, 0x01	; 1
    2a40:	80 93 03 07 	sts	0x0703, r24	; 0x800703 <_ZN7TwoWire12transmittingE>
    2a44:	60 93 26 07 	sts	0x0726, r22	; 0x800726 <_ZN7TwoWire9txAddressE>
    2a48:	10 92 05 07 	sts	0x0705, r1	; 0x800705 <_ZN7TwoWire13txBufferIndexE>
    2a4c:	10 92 04 07 	sts	0x0704, r1	; 0x800704 <_ZN7TwoWire14txBufferLengthE>
    2a50:	08 95       	ret

00002a52 <_ZN7TwoWire15endTransmissionEh>:
    2a52:	0f 93       	push	r16
    2a54:	06 2f       	mov	r16, r22
    2a56:	21 e0       	ldi	r18, 0x01	; 1
    2a58:	40 91 04 07 	lds	r20, 0x0704	; 0x800704 <_ZN7TwoWire14txBufferLengthE>
    2a5c:	66 e0       	ldi	r22, 0x06	; 6
    2a5e:	77 e0       	ldi	r23, 0x07	; 7
    2a60:	80 91 26 07 	lds	r24, 0x0726	; 0x800726 <_ZN7TwoWire9txAddressE>
    2a64:	5b dd       	rcall	.-1354   	; 0x251c <twi_writeTo>
    2a66:	10 92 05 07 	sts	0x0705, r1	; 0x800705 <_ZN7TwoWire13txBufferIndexE>
    2a6a:	10 92 04 07 	sts	0x0704, r1	; 0x800704 <_ZN7TwoWire14txBufferLengthE>
    2a6e:	10 92 03 07 	sts	0x0703, r1	; 0x800703 <_ZN7TwoWire12transmittingE>
    2a72:	0f 91       	pop	r16
    2a74:	08 95       	ret

00002a76 <_ZN7TwoWire11requestFromEhhmhh>:
    2a76:	4f 92       	push	r4
    2a78:	5f 92       	push	r5
    2a7a:	6f 92       	push	r6
    2a7c:	7f 92       	push	r7
    2a7e:	af 92       	push	r10
    2a80:	bf 92       	push	r11
    2a82:	cf 92       	push	r12
    2a84:	ef 92       	push	r14
    2a86:	ff 92       	push	r15
    2a88:	0f 93       	push	r16
    2a8a:	1f 93       	push	r17
    2a8c:	cf 93       	push	r28
    2a8e:	df 93       	push	r29
    2a90:	5c 01       	movw	r10, r24
    2a92:	f6 2e       	mov	r15, r22
    2a94:	d4 2f       	mov	r29, r20
    2a96:	28 01       	movw	r4, r16
    2a98:	39 01       	movw	r6, r18
    2a9a:	ee 20       	and	r14, r14
    2a9c:	39 f1       	breq	.+78     	; 0x2aec <_ZN7TwoWire11requestFromEhhmhh+0x76>
    2a9e:	cf df       	rcall	.-98     	; 0x2a3e <_ZN7TwoWire17beginTransmissionEh>
    2aa0:	8e 2d       	mov	r24, r14
    2aa2:	84 30       	cpi	r24, 0x04	; 4
    2aa4:	08 f0       	brcs	.+2      	; 0x2aa8 <_ZN7TwoWire11requestFromEhhmhh+0x32>
    2aa6:	83 e0       	ldi	r24, 0x03	; 3
    2aa8:	cf ef       	ldi	r28, 0xFF	; 255
    2aaa:	c8 0f       	add	r28, r24
    2aac:	88 23       	and	r24, r24
    2aae:	d9 f0       	breq	.+54     	; 0x2ae6 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    2ab0:	8c 2f       	mov	r24, r28
    2ab2:	88 0f       	add	r24, r24
    2ab4:	88 0f       	add	r24, r24
    2ab6:	88 0f       	add	r24, r24
    2ab8:	a3 01       	movw	r20, r6
    2aba:	92 01       	movw	r18, r4
    2abc:	04 c0       	rjmp	.+8      	; 0x2ac6 <_ZN7TwoWire11requestFromEhhmhh+0x50>
    2abe:	56 95       	lsr	r21
    2ac0:	47 95       	ror	r20
    2ac2:	37 95       	ror	r19
    2ac4:	27 95       	ror	r18
    2ac6:	8a 95       	dec	r24
    2ac8:	d2 f7       	brpl	.-12     	; 0x2abe <_ZN7TwoWire11requestFromEhhmhh+0x48>
    2aca:	ca 01       	movw	r24, r20
    2acc:	b9 01       	movw	r22, r18
    2ace:	d5 01       	movw	r26, r10
    2ad0:	ed 91       	ld	r30, X+
    2ad2:	fc 91       	ld	r31, X
    2ad4:	01 90       	ld	r0, Z+
    2ad6:	f0 81       	ld	r31, Z
    2ad8:	e0 2d       	mov	r30, r0
    2ada:	c5 01       	movw	r24, r10
    2adc:	19 95       	eicall
    2ade:	8c 2f       	mov	r24, r28
    2ae0:	c1 50       	subi	r28, 0x01	; 1
    2ae2:	81 11       	cpse	r24, r1
    2ae4:	e5 cf       	rjmp	.-54     	; 0x2ab0 <_ZN7TwoWire11requestFromEhhmhh+0x3a>
    2ae6:	60 e0       	ldi	r22, 0x00	; 0
    2ae8:	c5 01       	movw	r24, r10
    2aea:	b3 df       	rcall	.-154    	; 0x2a52 <_ZN7TwoWire15endTransmissionEh>
    2aec:	4d 2f       	mov	r20, r29
    2aee:	d1 32       	cpi	r29, 0x21	; 33
    2af0:	08 f0       	brcs	.+2      	; 0x2af4 <_ZN7TwoWire11requestFromEhhmhh+0x7e>
    2af2:	40 e2       	ldi	r20, 0x20	; 32
    2af4:	2c 2d       	mov	r18, r12
    2af6:	69 e2       	ldi	r22, 0x29	; 41
    2af8:	77 e0       	ldi	r23, 0x07	; 7
    2afa:	8f 2d       	mov	r24, r15
    2afc:	bd dc       	rcall	.-1670   	; 0x2478 <twi_readFrom>
    2afe:	10 92 28 07 	sts	0x0728, r1	; 0x800728 <_ZN7TwoWire13rxBufferIndexE>
    2b02:	80 93 27 07 	sts	0x0727, r24	; 0x800727 <_ZN7TwoWire14rxBufferLengthE>
    2b06:	df 91       	pop	r29
    2b08:	cf 91       	pop	r28
    2b0a:	1f 91       	pop	r17
    2b0c:	0f 91       	pop	r16
    2b0e:	ff 90       	pop	r15
    2b10:	ef 90       	pop	r14
    2b12:	cf 90       	pop	r12
    2b14:	bf 90       	pop	r11
    2b16:	af 90       	pop	r10
    2b18:	7f 90       	pop	r7
    2b1a:	6f 90       	pop	r6
    2b1c:	5f 90       	pop	r5
    2b1e:	4f 90       	pop	r4
    2b20:	08 95       	ret

00002b22 <_ZN7TwoWire11requestFromEhhh>:
    2b22:	cf 92       	push	r12
    2b24:	ef 92       	push	r14
    2b26:	0f 93       	push	r16
    2b28:	1f 93       	push	r17
    2b2a:	c2 2e       	mov	r12, r18
    2b2c:	e1 2c       	mov	r14, r1
    2b2e:	00 e0       	ldi	r16, 0x00	; 0
    2b30:	10 e0       	ldi	r17, 0x00	; 0
    2b32:	98 01       	movw	r18, r16
    2b34:	a0 df       	rcall	.-192    	; 0x2a76 <_ZN7TwoWire11requestFromEhhmhh>
    2b36:	1f 91       	pop	r17
    2b38:	0f 91       	pop	r16
    2b3a:	ef 90       	pop	r14
    2b3c:	cf 90       	pop	r12
    2b3e:	08 95       	ret

00002b40 <_ZN7TwoWire11requestFromEhh>:
    2b40:	21 e0       	ldi	r18, 0x01	; 1
    2b42:	ef cf       	rjmp	.-34     	; 0x2b22 <_ZN7TwoWire11requestFromEhhh>
    2b44:	08 95       	ret

00002b46 <_ZN7TwoWire15endTransmissionEv>:
    2b46:	61 e0       	ldi	r22, 0x01	; 1
    2b48:	84 cf       	rjmp	.-248    	; 0x2a52 <_ZN7TwoWire15endTransmissionEh>
    2b4a:	08 95       	ret

00002b4c <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    2b4c:	82 ec       	ldi	r24, 0xC2	; 194
    2b4e:	92 e0       	ldi	r25, 0x02	; 2
    2b50:	90 93 fe 06 	sts	0x06FE, r25	; 0x8006fe <Wire+0x1>
    2b54:	80 93 fd 06 	sts	0x06FD, r24	; 0x8006fd <Wire>
    2b58:	08 95       	ret

00002b5a <_ZN9IReadable15CommandReceivedEhPKhh>:
#include "EtherComm.h"

class IReadable : public IDevice {
public:
	void CommandReceived(uint8_t id, const uint8_t* data, uint8_t len){
		if(len == 0){
    2b5a:	21 11       	cpse	r18, r1
    2b5c:	0d c0       	rjmp	.+26     	; 0x2b78 <_ZN9IReadable15CommandReceivedEhPKhh+0x1e>
			ReadRegisterRequested(id, EtherComm::buffer + 3);
    2b5e:	40 91 00 02 	lds	r20, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    2b62:	50 91 01 02 	lds	r21, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    2b66:	4d 5f       	subi	r20, 0xFD	; 253
    2b68:	5f 4f       	sbci	r21, 0xFF	; 255
    2b6a:	dc 01       	movw	r26, r24
    2b6c:	ed 91       	ld	r30, X+
    2b6e:	fc 91       	ld	r31, X
    2b70:	06 80       	ldd	r0, Z+6	; 0x06
    2b72:	f7 81       	ldd	r31, Z+7	; 0x07
    2b74:	e0 2d       	mov	r30, r0
    2b76:	19 95       	eicall
    2b78:	08 95       	ret

00002b7a <_ZN13DigitalSensor6UpdateEPh>:
	else LedPort &= ~LedPin;
}

bool Robot::ReadTestBtn(){ //TODO remove
	return !((TestBtnPinPort & TestBtnPin) > 0);
}
    2b7a:	08 95       	ret

00002b7c <_ZN13DigitalSensor21ReadRegisterRequestedEhPh>:
    2b7c:	dc 01       	movw	r26, r24
    2b7e:	12 96       	adiw	r26, 0x02	; 2
    2b80:	2c 91       	ld	r18, X
    2b82:	12 97       	sbiw	r26, 0x02	; 2
    2b84:	26 13       	cpse	r18, r22
    2b86:	1a c0       	rjmp	.+52     	; 0x2bbc <_ZN13DigitalSensor21ReadRegisterRequestedEhPh+0x40>
    2b88:	14 96       	adiw	r26, 0x04	; 4
    2b8a:	ed 91       	ld	r30, X+
    2b8c:	fc 91       	ld	r31, X
    2b8e:	15 97       	sbiw	r26, 0x05	; 5
    2b90:	60 81       	ld	r22, Z
    2b92:	13 96       	adiw	r26, 0x03	; 3
    2b94:	3c 91       	ld	r19, X
    2b96:	36 23       	and	r19, r22
    2b98:	61 e0       	ldi	r22, 0x01	; 1
    2b9a:	09 f4       	brne	.+2      	; 0x2b9e <_ZN13DigitalSensor21ReadRegisterRequestedEhPh+0x22>
    2b9c:	60 e0       	ldi	r22, 0x00	; 0
    2b9e:	fa 01       	movw	r30, r20
    2ba0:	dc 01       	movw	r26, r24
    2ba2:	16 96       	adiw	r26, 0x06	; 6
    2ba4:	8c 91       	ld	r24, X
    2ba6:	86 27       	eor	r24, r22
    2ba8:	80 83       	st	Z, r24
    2baa:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    2bae:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    2bb2:	22 83       	std	Z+2, r18	; 0x02
    2bb4:	62 e0       	ldi	r22, 0x02	; 2
    2bb6:	83 e0       	ldi	r24, 0x03	; 3
    2bb8:	0c 94 b8 0b 	jmp	0x1770	; 0x1770 <_ZN9EtherComm11SendCommandEhh>
    2bbc:	08 95       	ret

00002bbe <_ZN5Robot14RegisterDeviceEhP7IDevice>:
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	fc 01       	movw	r30, r24
    2bc2:	ee 0f       	add	r30, r30
    2bc4:	ff 1f       	adc	r31, r31
    2bc6:	e1 5a       	subi	r30, 0xA1	; 161
    2bc8:	f8 4f       	sbci	r31, 0xF8	; 248
    2bca:	20 81       	ld	r18, Z
    2bcc:	31 81       	ldd	r19, Z+1	; 0x01
    2bce:	23 2b       	or	r18, r19
    2bd0:	49 f4       	brne	.+18     	; 0x2be4 <_ZN5Robot14RegisterDeviceEhP7IDevice+0x26>
    2bd2:	88 0f       	add	r24, r24
    2bd4:	99 1f       	adc	r25, r25
    2bd6:	fc 01       	movw	r30, r24
    2bd8:	e1 5a       	subi	r30, 0xA1	; 161
    2bda:	f8 4f       	sbci	r31, 0xF8	; 248
    2bdc:	71 83       	std	Z+1, r23	; 0x01
    2bde:	60 83       	st	Z, r22
    2be0:	81 e0       	ldi	r24, 0x01	; 1
    2be2:	08 95       	ret
    2be4:	80 e0       	ldi	r24, 0x00	; 0
    2be6:	08 95       	ret

00002be8 <_ZN13DigitalSensor5beginEv>:
    2be8:	bc 01       	movw	r22, r24
    2bea:	fc 01       	movw	r30, r24
    2bec:	82 81       	ldd	r24, Z+2	; 0x02
    2bee:	e7 cf       	rjmp	.-50     	; 0x2bbe <_ZN5Robot14RegisterDeviceEhP7IDevice>
    2bf0:	08 95       	ret

00002bf2 <_ZN5Robot6SetLedEb>:
    2bf2:	88 23       	and	r24, r24
    2bf4:	11 f0       	breq	.+4      	; 0x2bfa <_ZN5Robot6SetLedEb+0x8>
    2bf6:	2f 9a       	sbi	0x05, 7	; 5
    2bf8:	08 95       	ret
    2bfa:	2f 98       	cbi	0x05, 7	; 5
    2bfc:	08 95       	ret

00002bfe <_ZN5Robot15CommandReceivedEPKhh>:
	for(uint8_t i = 0; i < len; i++){
		Serial.print(' ');
		Serial.print(data[i], HEX);
	}
	Serial.println();*/
	if(len >= 1){
    2bfe:	66 23       	and	r22, r22
    2c00:	d1 f0       	breq	.+52     	; 0x2c36 <_ZN5Robot15CommandReceivedEPKhh+0x38>
		if(registers[data[0]] != NULL){
    2c02:	fc 01       	movw	r30, r24
    2c04:	30 81       	ld	r19, Z
    2c06:	e3 2f       	mov	r30, r19
    2c08:	f0 e0       	ldi	r31, 0x00	; 0
    2c0a:	ee 0f       	add	r30, r30
    2c0c:	ff 1f       	adc	r31, r31
    2c0e:	e1 5a       	subi	r30, 0xA1	; 161
    2c10:	f8 4f       	sbci	r31, 0xF8	; 248
    2c12:	a0 81       	ld	r26, Z
    2c14:	b1 81       	ldd	r27, Z+1	; 0x01
    2c16:	10 97       	sbiw	r26, 0x00	; 0
    2c18:	71 f0       	breq	.+28     	; 0x2c36 <_ZN5Robot15CommandReceivedEPKhh+0x38>
    2c1a:	26 2f       	mov	r18, r22
    2c1c:	ac 01       	movw	r20, r24
			registers[data[0]]->CommandReceived(data[0], data + 1, len - 1);
    2c1e:	21 50       	subi	r18, 0x01	; 1
    2c20:	4f 5f       	subi	r20, 0xFF	; 255
    2c22:	5f 4f       	sbci	r21, 0xFF	; 255
    2c24:	ed 91       	ld	r30, X+
    2c26:	fc 91       	ld	r31, X
    2c28:	11 97       	sbiw	r26, 0x01	; 1
    2c2a:	02 80       	ldd	r0, Z+2	; 0x02
    2c2c:	f3 81       	ldd	r31, Z+3	; 0x03
    2c2e:	e0 2d       	mov	r30, r0
    2c30:	63 2f       	mov	r22, r19
    2c32:	cd 01       	movw	r24, r26
    2c34:	19 95       	eicall
    2c36:	08 95       	ret

00002c38 <_GLOBAL__sub_I__ZN5Robot9registersE>:

#include "../IReadable.h"

class DigitalSensor : public IReadable {
public:
	DigitalSensor(const uint8_t ID, Register& DDRPort, Register& PortPort, Register& PinPort, uint8_t Pin, bool Inversed = true) : _id(ID), pin(Pin), pinPort(&PinPort), inversed(Inversed) {
    2c38:	e8 e5       	ldi	r30, 0x58	; 88
    2c3a:	f7 e0       	ldi	r31, 0x07	; 7
    2c3c:	84 ed       	ldi	r24, 0xD4	; 212
    2c3e:	92 e0       	ldi	r25, 0x02	; 2
    2c40:	91 83       	std	Z+1, r25	; 0x01
    2c42:	80 83       	st	Z, r24
    2c44:	12 82       	std	Z+2, r1	; 0x02
    2c46:	82 e0       	ldi	r24, 0x02	; 2
    2c48:	83 83       	std	Z+3, r24	; 0x03
    2c4a:	8f e2       	ldi	r24, 0x2F	; 47
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	95 83       	std	Z+5, r25	; 0x05
    2c50:	84 83       	std	Z+4, r24	; 0x04
    2c52:	81 e0       	ldi	r24, 0x01	; 1
    2c54:	86 83       	std	Z+6, r24	; 0x06
		DDRPort &= ~pin; //Enable input
    2c56:	81 98       	cbi	0x10, 1	; 16
		PortPort |= pin; //Enable pullup
    2c58:	89 9a       	sbi	0x11, 1	; 17
		rov.RegisterDevice(0, this);
    2c5a:	bf 01       	movw	r22, r30
    2c5c:	80 e0       	ldi	r24, 0x00	; 0
    2c5e:	af df       	rcall	.-162    	; 0x2bbe <_ZN5Robot14RegisterDeviceEhP7IDevice>
#define ID_TEST_BUTTON 0
#define ID_IMU_TEMPERATURE 1
#define ID_IMU_ACCELEROMETER 2

DigitalSensor BtnTest(0, TestBtnDDR, TestBtnPort, TestBtnPinPort, TestBtnPin);
ImuSensor Imu(1, 2);
    2c60:	42 e0       	ldi	r20, 0x02	; 2
    2c62:	61 e0       	ldi	r22, 0x01	; 1
    2c64:	89 e4       	ldi	r24, 0x49	; 73
    2c66:	97 e0       	ldi	r25, 0x07	; 7
    2c68:	d7 c0       	rjmp	.+430    	; 0x2e18 <_ZN9ImuSensorC1Ehh>
    2c6a:	08 95       	ret

00002c6c <_ZN5Robot5beginEv>:
	RegisterDevice(Imu);
	
	return true;
}*/

bool Robot::begin(){
    2c6c:	ef e5       	ldi	r30, 0x5F	; 95
    2c6e:	f7 e0       	ldi	r31, 0x07	; 7
    2c70:	8f e5       	ldi	r24, 0x5F	; 95
    2c72:	99 e0       	ldi	r25, 0x09	; 9
	for(uint16_t i = 0; i < NUM_DEVICES; i++){
		registers[i] = NULL;
    2c74:	11 92       	st	Z+, r1
    2c76:	11 92       	st	Z+, r1
	
	return true;
}*/

bool Robot::begin(){
	for(uint16_t i = 0; i < NUM_DEVICES; i++){
    2c78:	e8 17       	cp	r30, r24
    2c7a:	f9 07       	cpc	r31, r25
    2c7c:	d9 f7       	brne	.-10     	; 0x2c74 <_ZN5Robot5beginEv+0x8>
		registers[i] = NULL;
	}
	
	LedDDR |= LedPin;
    2c7e:	27 9a       	sbi	0x04, 7	; 4
		//TODO move to begin?
	}
	
	bool begin(){ //override
		return rov.RegisterDevice(_id, this);
    2c80:	68 e5       	ldi	r22, 0x58	; 88
    2c82:	77 e0       	ldi	r23, 0x07	; 7
    2c84:	80 91 5a 07 	lds	r24, 0x075A	; 0x80075a <BtnTest+0x2>
    2c88:	9a df       	rcall	.-204    	; 0x2bbe <_ZN5Robot14RegisterDeviceEhP7IDevice>
	BtnTest.begin();
	Imu.begin();
    2c8a:	89 e4       	ldi	r24, 0x49	; 73
    2c8c:	97 e0       	ldi	r25, 0x07	; 7
    2c8e:	0d d0       	rcall	.+26     	; 0x2caa <_ZN9ImuSensor5beginEv>
	return true;
}
    2c90:	81 e0       	ldi	r24, 0x01	; 1
    2c92:	08 95       	ret

00002c94 <_ZN5Robot4LoopEv>:
bool Robot::ReadTestBtn(){ //TODO remove
	return !((TestBtnPinPort & TestBtnPin) > 0);
}

void Robot::Loop(){
	Imu.Update(EtherComm::buffer + 3);
    2c94:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    2c98:	70 91 01 02 	lds	r23, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    2c9c:	6d 5f       	subi	r22, 0xFD	; 253
    2c9e:	7f 4f       	sbci	r23, 0xFF	; 255
    2ca0:	89 e4       	ldi	r24, 0x49	; 73
    2ca2:	97 e0       	ldi	r25, 0x07	; 7
    2ca4:	01 c0       	rjmp	.+2      	; 0x2ca8 <_ZN9ImuSensor6UpdateEPh>
    2ca6:	08 95       	ret

00002ca8 <_ZN9ImuSensor6UpdateEPh>:
		rov.RegisterDevice(tempId, this)
		&& rov.RegisterDevice(accelId, this)
		&& imu.begin();
}

void ImuSensor::Update(uint8_t* buffer){
    2ca8:	08 95       	ret

00002caa <_ZN9ImuSensor5beginEv>:

ImuSensor::ImuSensor(const uint8_t TempId, const uint8_t AccelId) : imu(55, 0x28), tempId(TempId), accelId(AccelId) {
	
}

bool ImuSensor::begin(){
    2caa:	cf 93       	push	r28
    2cac:	df 93       	push	r29
    2cae:	ec 01       	movw	r28, r24
	return 
		rov.RegisterDevice(tempId, this)
    2cb0:	bc 01       	movw	r22, r24
    2cb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cb4:	84 df       	rcall	.-248    	; 0x2bbe <_ZN5Robot14RegisterDeviceEhP7IDevice>
		&& rov.RegisterDevice(accelId, this)
		&& imu.begin();
    2cb6:	88 23       	and	r24, r24
    2cb8:	51 f0       	breq	.+20     	; 0x2cce <_ZN9ImuSensor5beginEv+0x24>
}

bool ImuSensor::begin(){
	return 
		rov.RegisterDevice(tempId, this)
		&& rov.RegisterDevice(accelId, this)
    2cba:	be 01       	movw	r22, r28
    2cbc:	8e 85       	ldd	r24, Y+14	; 0x0e
    2cbe:	7f df       	rcall	.-258    	; 0x2bbe <_ZN5Robot14RegisterDeviceEhP7IDevice>
    2cc0:	88 23       	and	r24, r24
    2cc2:	29 f0       	breq	.+10     	; 0x2cce <_ZN9ImuSensor5beginEv+0x24>
		&& imu.begin();
    2cc4:	6c e0       	ldi	r22, 0x0C	; 12
    2cc6:	ce 01       	movw	r24, r28
    2cc8:	02 96       	adiw	r24, 0x02	; 2
    2cca:	0e 94 3e 02 	call	0x47c	; 0x47c <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>
}
    2cce:	df 91       	pop	r29
    2cd0:	cf 91       	pop	r28
    2cd2:	08 95       	ret

00002cd4 <_ZN9ImuSensor21ReadRegisterRequestedEhPh>:
	*buffer++ = *val++;
}

AdafruitImu::Vector<3> vector;

void ImuSensor::ReadRegisterRequested(uint8_t id, uint8_t* buffer){
    2cd4:	ef 92       	push	r14
    2cd6:	ff 92       	push	r15
    2cd8:	0f 93       	push	r16
    2cda:	1f 93       	push	r17
    2cdc:	cf 93       	push	r28
    2cde:	df 93       	push	r29
    2ce0:	cd b7       	in	r28, 0x3d	; 61
    2ce2:	de b7       	in	r29, 0x3e	; 62
    2ce4:	68 97       	sbiw	r28, 0x18	; 24
    2ce6:	0f b6       	in	r0, 0x3f	; 63
    2ce8:	f8 94       	cli
    2cea:	de bf       	out	0x3e, r29	; 62
    2cec:	0f be       	out	0x3f, r0	; 63
    2cee:	cd bf       	out	0x3d, r28	; 61
    2cf0:	f6 2e       	mov	r15, r22
    2cf2:	8a 01       	movw	r16, r20
	if(id == tempId){
    2cf4:	dc 01       	movw	r26, r24
    2cf6:	1d 96       	adiw	r26, 0x0d	; 13
    2cf8:	ec 90       	ld	r14, X
    2cfa:	e6 12       	cpse	r14, r22
    2cfc:	0f c0       	rjmp	.+30     	; 0x2d1c <_ZN9ImuSensor21ReadRegisterRequestedEhPh+0x48>
		buffer[0] = imu.getTemp();
    2cfe:	02 96       	adiw	r24, 0x02	; 2
    2d00:	0e 94 ab 02 	call	0x556	; 0x556 <_ZN15Adafruit_BNO0557getTempEv>
    2d04:	f8 01       	movw	r30, r16
    2d06:	80 83       	st	Z, r24
	virtual void CommandReceived(uint8_t id, const uint8_t* data, uint8_t len) = 0;
	virtual void Update(uint8_t* buffer) = 0;
	
protected:
	void inline SendCommand(uint8_t id, uint8_t len){
		EtherComm::buffer[2] = id;
    2d08:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    2d0c:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    2d10:	e2 82       	std	Z+2, r14	; 0x02
		EtherComm::SendCommand(CMD_UpdateDevice, len + 1);
    2d12:	62 e0       	ldi	r22, 0x02	; 2
    2d14:	83 e0       	ldi	r24, 0x03	; 3
    2d16:	0e 94 b8 0b 	call	0x1770	; 0x1770 <_ZN9EtherComm11SendCommandEhh>
    2d1a:	71 c0       	rjmp	.+226    	; 0x2dfe <_ZN9ImuSensor21ReadRegisterRequestedEhPh+0x12a>
		SendCommand(id, 1);
	}else if(id == accelId){
    2d1c:	dc 01       	movw	r26, r24
    2d1e:	1e 96       	adiw	r26, 0x0e	; 14
    2d20:	2c 91       	ld	r18, X
    2d22:	62 13       	cpse	r22, r18
    2d24:	6c c0       	rjmp	.+216    	; 0x2dfe <_ZN9ImuSensor21ReadRegisterRequestedEhPh+0x12a>
		vector = imu.getVector(Adafruit_BNO055::VECTOR_ACCELEROMETER );
    2d26:	bc 01       	movw	r22, r24
    2d28:	6e 5f       	subi	r22, 0xFE	; 254
    2d2a:	7f 4f       	sbci	r23, 0xFF	; 255
    2d2c:	48 e0       	ldi	r20, 0x08	; 8
    2d2e:	ce 01       	movw	r24, r28
    2d30:	01 96       	adiw	r24, 0x01	; 1
    2d32:	0e 94 01 03 	call	0x602	; 0x602 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
    2d36:	fe 01       	movw	r30, r28
    2d38:	31 96       	adiw	r30, 0x01	; 1
    2d3a:	af e5       	ldi	r26, 0x5F	; 95
    2d3c:	b9 e0       	ldi	r27, 0x09	; 9
    2d3e:	ce 01       	movw	r24, r28
    2d40:	0d 96       	adiw	r24, 0x0d	; 13
		}

		Vector& operator=(const Vector& v)
		{
			for (int x = 0; x < N; x++ )
			p_vec[x] = v.p_vec[x];
    2d42:	41 91       	ld	r20, Z+
    2d44:	51 91       	ld	r21, Z+
    2d46:	61 91       	ld	r22, Z+
    2d48:	71 91       	ld	r23, Z+
    2d4a:	4d 93       	st	X+, r20
    2d4c:	5d 93       	st	X+, r21
    2d4e:	6d 93       	st	X+, r22
    2d50:	7d 93       	st	X+, r23
			return ret;
		}

		Vector& operator=(const Vector& v)
		{
			for (int x = 0; x < N; x++ )
    2d52:	e8 17       	cp	r30, r24
    2d54:	f9 07       	cpc	r31, r25
    2d56:	a9 f7       	brne	.-22     	; 0x2d42 <_ZN9ImuSensor21ReadRegisterRequestedEhPh+0x6e>
		saveFloat(vector.x(), buffer + 0);
    2d58:	ef e5       	ldi	r30, 0x5F	; 95
    2d5a:	f9 e0       	ldi	r31, 0x09	; 9
    2d5c:	20 81       	ld	r18, Z
    2d5e:	51 81       	ldd	r21, Z+1	; 0x01
    2d60:	42 81       	ldd	r20, Z+2	; 0x02
    2d62:	33 81       	ldd	r19, Z+3	; 0x03
    2d64:	82 2f       	mov	r24, r18
    2d66:	95 2f       	mov	r25, r21
    2d68:	a4 2f       	mov	r26, r20
    2d6a:	b3 2f       	mov	r27, r19
    2d6c:	8d 87       	std	Y+13, r24	; 0x0d
    2d6e:	9e 87       	std	Y+14, r25	; 0x0e
    2d70:	af 87       	std	Y+15, r26	; 0x0f
    2d72:	b8 8b       	std	Y+16, r27	; 0x10
	
}

static void saveFloat(float f, uint8_t* buffer){
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    2d74:	d8 01       	movw	r26, r16
    2d76:	2c 93       	st	X, r18
	*buffer++ = *val++;
    2d78:	8e 85       	ldd	r24, Y+14	; 0x0e
    2d7a:	11 96       	adiw	r26, 0x01	; 1
    2d7c:	8c 93       	st	X, r24
    2d7e:	11 97       	sbiw	r26, 0x01	; 1
	*buffer++ = *val++;
    2d80:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d82:	12 96       	adiw	r26, 0x02	; 2
    2d84:	8c 93       	st	X, r24
    2d86:	12 97       	sbiw	r26, 0x02	; 2
	*buffer++ = *val++;
    2d88:	88 89       	ldd	r24, Y+16	; 0x10
    2d8a:	13 96       	adiw	r26, 0x03	; 3
    2d8c:	8c 93       	st	X, r24
    2d8e:	24 81       	ldd	r18, Z+4	; 0x04
    2d90:	55 81       	ldd	r21, Z+5	; 0x05
    2d92:	46 81       	ldd	r20, Z+6	; 0x06
    2d94:	37 81       	ldd	r19, Z+7	; 0x07
    2d96:	82 2f       	mov	r24, r18
    2d98:	95 2f       	mov	r25, r21
    2d9a:	a4 2f       	mov	r26, r20
    2d9c:	b3 2f       	mov	r27, r19
    2d9e:	89 8b       	std	Y+17, r24	; 0x11
    2da0:	9a 8b       	std	Y+18, r25	; 0x12
    2da2:	ab 8b       	std	Y+19, r26	; 0x13
    2da4:	bc 8b       	std	Y+20, r27	; 0x14
	
}

static void saveFloat(float f, uint8_t* buffer){
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    2da6:	d8 01       	movw	r26, r16
    2da8:	14 96       	adiw	r26, 0x04	; 4
    2daa:	2c 93       	st	X, r18
    2dac:	14 97       	sbiw	r26, 0x04	; 4
	*buffer++ = *val++;
    2dae:	8a 89       	ldd	r24, Y+18	; 0x12
    2db0:	15 96       	adiw	r26, 0x05	; 5
    2db2:	8c 93       	st	X, r24
    2db4:	15 97       	sbiw	r26, 0x05	; 5
	*buffer++ = *val++;
    2db6:	8b 89       	ldd	r24, Y+19	; 0x13
    2db8:	16 96       	adiw	r26, 0x06	; 6
    2dba:	8c 93       	st	X, r24
    2dbc:	16 97       	sbiw	r26, 0x06	; 6
	*buffer++ = *val++;
    2dbe:	8c 89       	ldd	r24, Y+20	; 0x14
    2dc0:	17 96       	adiw	r26, 0x07	; 7
    2dc2:	8c 93       	st	X, r24
    2dc4:	20 85       	ldd	r18, Z+8	; 0x08
    2dc6:	51 85       	ldd	r21, Z+9	; 0x09
    2dc8:	42 85       	ldd	r20, Z+10	; 0x0a
    2dca:	33 85       	ldd	r19, Z+11	; 0x0b
    2dcc:	82 2f       	mov	r24, r18
    2dce:	95 2f       	mov	r25, r21
    2dd0:	a4 2f       	mov	r26, r20
    2dd2:	b3 2f       	mov	r27, r19
    2dd4:	8d 8b       	std	Y+21, r24	; 0x15
    2dd6:	9e 8b       	std	Y+22, r25	; 0x16
    2dd8:	af 8b       	std	Y+23, r26	; 0x17
    2dda:	b8 8f       	std	Y+24, r27	; 0x18
	
}

static void saveFloat(float f, uint8_t* buffer){
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    2ddc:	f8 01       	movw	r30, r16
    2dde:	20 87       	std	Z+8, r18	; 0x08
	*buffer++ = *val++;
    2de0:	8e 89       	ldd	r24, Y+22	; 0x16
    2de2:	81 87       	std	Z+9, r24	; 0x09
	*buffer++ = *val++;
    2de4:	8f 89       	ldd	r24, Y+23	; 0x17
    2de6:	82 87       	std	Z+10, r24	; 0x0a
	*buffer++ = *val++;
    2de8:	88 8d       	ldd	r24, Y+24	; 0x18
    2dea:	83 87       	std	Z+11, r24	; 0x0b
	virtual void CommandReceived(uint8_t id, const uint8_t* data, uint8_t len) = 0;
	virtual void Update(uint8_t* buffer) = 0;
	
protected:
	void inline SendCommand(uint8_t id, uint8_t len){
		EtherComm::buffer[2] = id;
    2dec:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    2df0:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    2df4:	f2 82       	std	Z+2, r15	; 0x02
		EtherComm::SendCommand(CMD_UpdateDevice, len + 1);
    2df6:	6d e0       	ldi	r22, 0x0D	; 13
    2df8:	83 e0       	ldi	r24, 0x03	; 3
    2dfa:	0e 94 b8 0b 	call	0x1770	; 0x1770 <_ZN9EtherComm11SendCommandEhh>
	saveFloat(vector.x(), buffer + 14);
	saveFloat(vector.y(), buffer + 18);
	saveFloat(vector.z(), buffer + 22);
	
	return 1 + 1 + 6*4;*/
    2dfe:	68 96       	adiw	r28, 0x18	; 24
    2e00:	0f b6       	in	r0, 0x3f	; 63
    2e02:	f8 94       	cli
    2e04:	de bf       	out	0x3e, r29	; 62
    2e06:	0f be       	out	0x3f, r0	; 63
    2e08:	cd bf       	out	0x3d, r28	; 61
    2e0a:	df 91       	pop	r29
    2e0c:	cf 91       	pop	r28
    2e0e:	1f 91       	pop	r17
    2e10:	0f 91       	pop	r16
    2e12:	ff 90       	pop	r15
    2e14:	ef 90       	pop	r14
    2e16:	08 95       	ret

00002e18 <_ZN9ImuSensorC1Ehh>:
#define ID_TEMP 1
#define ID_ACCEL 2
//#include "../BNO055/utility/vector.h"
//Adafruit_BNO055 ImuSensor::imu;

ImuSensor::ImuSensor(const uint8_t TempId, const uint8_t AccelId) : imu(55, 0x28), tempId(TempId), accelId(AccelId) {
    2e18:	ef 92       	push	r14
    2e1a:	ff 92       	push	r15
    2e1c:	0f 93       	push	r16
    2e1e:	1f 93       	push	r17
    2e20:	cf 93       	push	r28
    2e22:	df 93       	push	r29
    2e24:	ec 01       	movw	r28, r24
    2e26:	e6 2e       	mov	r14, r22
    2e28:	f4 2e       	mov	r15, r20
    2e2a:	20 ee       	ldi	r18, 0xE0	; 224
    2e2c:	32 e0       	ldi	r19, 0x02	; 2
    2e2e:	fc 01       	movw	r30, r24
    2e30:	21 93       	st	Z+, r18
    2e32:	31 93       	st	Z+, r19
    2e34:	cf 01       	movw	r24, r30
    2e36:	0d ef       	ldi	r16, 0xFD	; 253
    2e38:	16 e0       	ldi	r17, 0x06	; 6
    2e3a:	28 e2       	ldi	r18, 0x28	; 40
    2e3c:	47 e3       	ldi	r20, 0x37	; 55
    2e3e:	50 e0       	ldi	r21, 0x00	; 0
    2e40:	60 e0       	ldi	r22, 0x00	; 0
    2e42:	70 e0       	ldi	r23, 0x00	; 0
    2e44:	0e 94 c9 01 	call	0x392	; 0x392 <_ZN15Adafruit_BNO055C1ElhP7TwoWire>
    2e48:	ed 86       	std	Y+13, r14	; 0x0d
    2e4a:	fe 86       	std	Y+14, r15	; 0x0e
	
}
    2e4c:	df 91       	pop	r29
    2e4e:	cf 91       	pop	r28
    2e50:	1f 91       	pop	r17
    2e52:	0f 91       	pop	r16
    2e54:	ff 90       	pop	r15
    2e56:	ef 90       	pop	r14
    2e58:	08 95       	ret

00002e5a <_GLOBAL__sub_I__ZN9ImuSensorC2Ehh>:
	template <uint8_t N> class Vector
	{
		public:
		Vector()
		{
			memset(p_vec, 0, sizeof(double)*N);
    2e5a:	8c e0       	ldi	r24, 0x0C	; 12
    2e5c:	ef e5       	ldi	r30, 0x5F	; 95
    2e5e:	f9 e0       	ldi	r31, 0x09	; 9
    2e60:	df 01       	movw	r26, r30
    2e62:	1d 92       	st	X+, r1
    2e64:	8a 95       	dec	r24
    2e66:	e9 f7       	brne	.-6      	; 0x2e62 <_GLOBAL__sub_I__ZN9ImuSensorC2Ehh+0x8>
    2e68:	08 95       	ret

00002e6a <_GLOBAL__sub_I_bno>:
	setup();
	
	while(true){
		loop();
	}
    2e6a:	0f 93       	push	r16
    2e6c:	1f 93       	push	r17
/* Set the delay between fresh samples */
#define BNO055_SAMPLERATE_DELAY_MS 100

// Check I2C device address and correct line below (by default address is 0x29 or 0x28)
//                                   id, address
Adafruit_BNO055 bno = Adafruit_BNO055(55, 0x28);
    2e6e:	0d ef       	ldi	r16, 0xFD	; 253
    2e70:	16 e0       	ldi	r17, 0x06	; 6
    2e72:	28 e2       	ldi	r18, 0x28	; 40
    2e74:	47 e3       	ldi	r20, 0x37	; 55
    2e76:	50 e0       	ldi	r21, 0x00	; 0
    2e78:	60 e0       	ldi	r22, 0x00	; 0
    2e7a:	70 e0       	ldi	r23, 0x00	; 0
    2e7c:	8b e6       	ldi	r24, 0x6B	; 107
    2e7e:	99 e0       	ldi	r25, 0x09	; 9
    2e80:	0e 94 c9 01 	call	0x392	; 0x392 <_ZN15Adafruit_BNO055C1ElhP7TwoWire>
	setup();
	
	while(true){
		loop();
	}
    2e84:	1f 91       	pop	r17
    2e86:	0f 91       	pop	r16
    2e88:	08 95       	ret

00002e8a <_ZN5Print5writeEPKhj>:
}

uint16_t Print::print(char c)
{
  return write(c);
}
    2e8a:	cf 92       	push	r12
    2e8c:	df 92       	push	r13
    2e8e:	ef 92       	push	r14
    2e90:	ff 92       	push	r15
    2e92:	0f 93       	push	r16
    2e94:	1f 93       	push	r17
    2e96:	cf 93       	push	r28
    2e98:	df 93       	push	r29
    2e9a:	41 15       	cp	r20, r1
    2e9c:	51 05       	cpc	r21, r1
    2e9e:	c1 f0       	breq	.+48     	; 0x2ed0 <_ZN5Print5writeEPKhj+0x46>
    2ea0:	6a 01       	movw	r12, r20
    2ea2:	8c 01       	movw	r16, r24
    2ea4:	e6 2e       	mov	r14, r22
    2ea6:	f7 2e       	mov	r15, r23
    2ea8:	c0 e0       	ldi	r28, 0x00	; 0
    2eaa:	d0 e0       	ldi	r29, 0x00	; 0
    2eac:	d7 01       	movw	r26, r14
    2eae:	6d 91       	ld	r22, X+
    2eb0:	7d 01       	movw	r14, r26
    2eb2:	d8 01       	movw	r26, r16
    2eb4:	ed 91       	ld	r30, X+
    2eb6:	fc 91       	ld	r31, X
    2eb8:	01 90       	ld	r0, Z+
    2eba:	f0 81       	ld	r31, Z
    2ebc:	e0 2d       	mov	r30, r0
    2ebe:	c8 01       	movw	r24, r16
    2ec0:	19 95       	eicall
    2ec2:	89 2b       	or	r24, r25
    2ec4:	39 f0       	breq	.+14     	; 0x2ed4 <_ZN5Print5writeEPKhj+0x4a>
    2ec6:	21 96       	adiw	r28, 0x01	; 1
    2ec8:	cc 16       	cp	r12, r28
    2eca:	dd 06       	cpc	r13, r29
    2ecc:	79 f7       	brne	.-34     	; 0x2eac <_ZN5Print5writeEPKhj+0x22>
    2ece:	02 c0       	rjmp	.+4      	; 0x2ed4 <_ZN5Print5writeEPKhj+0x4a>
    2ed0:	c0 e0       	ldi	r28, 0x00	; 0
    2ed2:	d0 e0       	ldi	r29, 0x00	; 0
    2ed4:	ce 01       	movw	r24, r28
    2ed6:	df 91       	pop	r29
    2ed8:	cf 91       	pop	r28
    2eda:	1f 91       	pop	r17
    2edc:	0f 91       	pop	r16
    2ede:	ff 90       	pop	r15
    2ee0:	ef 90       	pop	r14
    2ee2:	df 90       	pop	r13
    2ee4:	cf 90       	pop	r12
    2ee6:	08 95       	ret

00002ee8 <_ZN5Print5printEPKc>:
    2ee8:	61 15       	cp	r22, r1
    2eea:	71 05       	cpc	r23, r1
    2eec:	81 f0       	breq	.+32     	; 0x2f0e <_ZN5Print5printEPKc+0x26>
    2eee:	fb 01       	movw	r30, r22
    2ef0:	01 90       	ld	r0, Z+
    2ef2:	00 20       	and	r0, r0
    2ef4:	e9 f7       	brne	.-6      	; 0x2ef0 <_ZN5Print5printEPKc+0x8>
    2ef6:	31 97       	sbiw	r30, 0x01	; 1
    2ef8:	af 01       	movw	r20, r30
    2efa:	46 1b       	sub	r20, r22
    2efc:	57 0b       	sbc	r21, r23
    2efe:	dc 01       	movw	r26, r24
    2f00:	ed 91       	ld	r30, X+
    2f02:	fc 91       	ld	r31, X
    2f04:	02 80       	ldd	r0, Z+2	; 0x02
    2f06:	f3 81       	ldd	r31, Z+3	; 0x03
    2f08:	e0 2d       	mov	r30, r0
    2f0a:	19 95       	eicall
    2f0c:	08 95       	ret
    2f0e:	80 e0       	ldi	r24, 0x00	; 0
    2f10:	90 e0       	ldi	r25, 0x00	; 0
    2f12:	08 95       	ret

00002f14 <_ZN5Print7printlnEv>:
  //void clearWriteError() { setWriteError(0); }
  
  virtual uint16_t write(uint8_t) = 0;
  uint16_t write(const char *str) {
	  if (str == NULL) return 0;
	  return write((const uint8_t *)str, strlen(str));
    2f14:	dc 01       	movw	r26, r24
    2f16:	ed 91       	ld	r30, X+
    2f18:	fc 91       	ld	r31, X
    2f1a:	02 80       	ldd	r0, Z+2	; 0x02
    2f1c:	f3 81       	ldd	r31, Z+3	; 0x03
    2f1e:	e0 2d       	mov	r30, r0
    2f20:	42 e0       	ldi	r20, 0x02	; 2
    2f22:	50 e0       	ldi	r21, 0x00	; 0
    2f24:	68 ee       	ldi	r22, 0xE8	; 232
    2f26:	72 e0       	ldi	r23, 0x02	; 2
    2f28:	19 95       	eicall
}
*/
uint16_t Print::println(void)
{
  return write("\r\n");
}
    2f2a:	08 95       	ret

00002f2c <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}
*/
uint16_t Print::println(const char c[])
{
    2f2c:	0f 93       	push	r16
    2f2e:	1f 93       	push	r17
    2f30:	cf 93       	push	r28
    2f32:	df 93       	push	r29
    2f34:	ec 01       	movw	r28, r24
  uint16_t n = print(c);
    2f36:	d8 df       	rcall	.-80     	; 0x2ee8 <_ZN5Print5printEPKc>
    2f38:	8c 01       	movw	r16, r24
  n += println();
    2f3a:	ce 01       	movw	r24, r28
    2f3c:	eb df       	rcall	.-42     	; 0x2f14 <_ZN5Print7printlnEv>
  return n;
}
    2f3e:	80 0f       	add	r24, r16
    2f40:	91 1f       	adc	r25, r17
    2f42:	df 91       	pop	r29
    2f44:	cf 91       	pop	r28
    2f46:	1f 91       	pop	r17
    2f48:	0f 91       	pop	r16
    2f4a:	08 95       	ret

00002f4c <__divsf3>:
    2f4c:	0c d0       	rcall	.+24     	; 0x2f66 <__divsf3x>
    2f4e:	ba c0       	rjmp	.+372    	; 0x30c4 <__fp_round>
    2f50:	b2 d0       	rcall	.+356    	; 0x30b6 <__fp_pscB>
    2f52:	40 f0       	brcs	.+16     	; 0x2f64 <__divsf3+0x18>
    2f54:	a9 d0       	rcall	.+338    	; 0x30a8 <__fp_pscA>
    2f56:	30 f0       	brcs	.+12     	; 0x2f64 <__divsf3+0x18>
    2f58:	21 f4       	brne	.+8      	; 0x2f62 <__divsf3+0x16>
    2f5a:	5f 3f       	cpi	r21, 0xFF	; 255
    2f5c:	19 f0       	breq	.+6      	; 0x2f64 <__divsf3+0x18>
    2f5e:	9b c0       	rjmp	.+310    	; 0x3096 <__fp_inf>
    2f60:	51 11       	cpse	r21, r1
    2f62:	e4 c0       	rjmp	.+456    	; 0x312c <__fp_szero>
    2f64:	9e c0       	rjmp	.+316    	; 0x30a2 <__fp_nan>

00002f66 <__divsf3x>:
    2f66:	bf d0       	rcall	.+382    	; 0x30e6 <__fp_split3>
    2f68:	98 f3       	brcs	.-26     	; 0x2f50 <__divsf3+0x4>

00002f6a <__divsf3_pse>:
    2f6a:	99 23       	and	r25, r25
    2f6c:	c9 f3       	breq	.-14     	; 0x2f60 <__divsf3+0x14>
    2f6e:	55 23       	and	r21, r21
    2f70:	b1 f3       	breq	.-20     	; 0x2f5e <__divsf3+0x12>
    2f72:	95 1b       	sub	r25, r21
    2f74:	55 0b       	sbc	r21, r21
    2f76:	bb 27       	eor	r27, r27
    2f78:	aa 27       	eor	r26, r26
    2f7a:	62 17       	cp	r22, r18
    2f7c:	73 07       	cpc	r23, r19
    2f7e:	84 07       	cpc	r24, r20
    2f80:	38 f0       	brcs	.+14     	; 0x2f90 <__divsf3_pse+0x26>
    2f82:	9f 5f       	subi	r25, 0xFF	; 255
    2f84:	5f 4f       	sbci	r21, 0xFF	; 255
    2f86:	22 0f       	add	r18, r18
    2f88:	33 1f       	adc	r19, r19
    2f8a:	44 1f       	adc	r20, r20
    2f8c:	aa 1f       	adc	r26, r26
    2f8e:	a9 f3       	breq	.-22     	; 0x2f7a <__divsf3_pse+0x10>
    2f90:	33 d0       	rcall	.+102    	; 0x2ff8 <__divsf3_pse+0x8e>
    2f92:	0e 2e       	mov	r0, r30
    2f94:	3a f0       	brmi	.+14     	; 0x2fa4 <__divsf3_pse+0x3a>
    2f96:	e0 e8       	ldi	r30, 0x80	; 128
    2f98:	30 d0       	rcall	.+96     	; 0x2ffa <__divsf3_pse+0x90>
    2f9a:	91 50       	subi	r25, 0x01	; 1
    2f9c:	50 40       	sbci	r21, 0x00	; 0
    2f9e:	e6 95       	lsr	r30
    2fa0:	00 1c       	adc	r0, r0
    2fa2:	ca f7       	brpl	.-14     	; 0x2f96 <__divsf3_pse+0x2c>
    2fa4:	29 d0       	rcall	.+82     	; 0x2ff8 <__divsf3_pse+0x8e>
    2fa6:	fe 2f       	mov	r31, r30
    2fa8:	27 d0       	rcall	.+78     	; 0x2ff8 <__divsf3_pse+0x8e>
    2faa:	66 0f       	add	r22, r22
    2fac:	77 1f       	adc	r23, r23
    2fae:	88 1f       	adc	r24, r24
    2fb0:	bb 1f       	adc	r27, r27
    2fb2:	26 17       	cp	r18, r22
    2fb4:	37 07       	cpc	r19, r23
    2fb6:	48 07       	cpc	r20, r24
    2fb8:	ab 07       	cpc	r26, r27
    2fba:	b0 e8       	ldi	r27, 0x80	; 128
    2fbc:	09 f0       	breq	.+2      	; 0x2fc0 <__divsf3_pse+0x56>
    2fbe:	bb 0b       	sbc	r27, r27
    2fc0:	80 2d       	mov	r24, r0
    2fc2:	bf 01       	movw	r22, r30
    2fc4:	ff 27       	eor	r31, r31
    2fc6:	93 58       	subi	r25, 0x83	; 131
    2fc8:	5f 4f       	sbci	r21, 0xFF	; 255
    2fca:	2a f0       	brmi	.+10     	; 0x2fd6 <__divsf3_pse+0x6c>
    2fcc:	9e 3f       	cpi	r25, 0xFE	; 254
    2fce:	51 05       	cpc	r21, r1
    2fd0:	68 f0       	brcs	.+26     	; 0x2fec <__divsf3_pse+0x82>
    2fd2:	61 c0       	rjmp	.+194    	; 0x3096 <__fp_inf>
    2fd4:	ab c0       	rjmp	.+342    	; 0x312c <__fp_szero>
    2fd6:	5f 3f       	cpi	r21, 0xFF	; 255
    2fd8:	ec f3       	brlt	.-6      	; 0x2fd4 <__divsf3_pse+0x6a>
    2fda:	98 3e       	cpi	r25, 0xE8	; 232
    2fdc:	dc f3       	brlt	.-10     	; 0x2fd4 <__divsf3_pse+0x6a>
    2fde:	86 95       	lsr	r24
    2fe0:	77 95       	ror	r23
    2fe2:	67 95       	ror	r22
    2fe4:	b7 95       	ror	r27
    2fe6:	f7 95       	ror	r31
    2fe8:	9f 5f       	subi	r25, 0xFF	; 255
    2fea:	c9 f7       	brne	.-14     	; 0x2fde <__divsf3_pse+0x74>
    2fec:	88 0f       	add	r24, r24
    2fee:	91 1d       	adc	r25, r1
    2ff0:	96 95       	lsr	r25
    2ff2:	87 95       	ror	r24
    2ff4:	97 f9       	bld	r25, 7
    2ff6:	08 95       	ret
    2ff8:	e1 e0       	ldi	r30, 0x01	; 1
    2ffa:	66 0f       	add	r22, r22
    2ffc:	77 1f       	adc	r23, r23
    2ffe:	88 1f       	adc	r24, r24
    3000:	bb 1f       	adc	r27, r27
    3002:	62 17       	cp	r22, r18
    3004:	73 07       	cpc	r23, r19
    3006:	84 07       	cpc	r24, r20
    3008:	ba 07       	cpc	r27, r26
    300a:	20 f0       	brcs	.+8      	; 0x3014 <__divsf3_pse+0xaa>
    300c:	62 1b       	sub	r22, r18
    300e:	73 0b       	sbc	r23, r19
    3010:	84 0b       	sbc	r24, r20
    3012:	ba 0b       	sbc	r27, r26
    3014:	ee 1f       	adc	r30, r30
    3016:	88 f7       	brcc	.-30     	; 0x2ffa <__divsf3_pse+0x90>
    3018:	e0 95       	com	r30
    301a:	08 95       	ret

0000301c <__floatunsisf>:
    301c:	e8 94       	clt
    301e:	09 c0       	rjmp	.+18     	; 0x3032 <__floatsisf+0x12>

00003020 <__floatsisf>:
    3020:	97 fb       	bst	r25, 7
    3022:	3e f4       	brtc	.+14     	; 0x3032 <__floatsisf+0x12>
    3024:	90 95       	com	r25
    3026:	80 95       	com	r24
    3028:	70 95       	com	r23
    302a:	61 95       	neg	r22
    302c:	7f 4f       	sbci	r23, 0xFF	; 255
    302e:	8f 4f       	sbci	r24, 0xFF	; 255
    3030:	9f 4f       	sbci	r25, 0xFF	; 255
    3032:	99 23       	and	r25, r25
    3034:	a9 f0       	breq	.+42     	; 0x3060 <__floatsisf+0x40>
    3036:	f9 2f       	mov	r31, r25
    3038:	96 e9       	ldi	r25, 0x96	; 150
    303a:	bb 27       	eor	r27, r27
    303c:	93 95       	inc	r25
    303e:	f6 95       	lsr	r31
    3040:	87 95       	ror	r24
    3042:	77 95       	ror	r23
    3044:	67 95       	ror	r22
    3046:	b7 95       	ror	r27
    3048:	f1 11       	cpse	r31, r1
    304a:	f8 cf       	rjmp	.-16     	; 0x303c <__floatsisf+0x1c>
    304c:	fa f4       	brpl	.+62     	; 0x308c <__floatsisf+0x6c>
    304e:	bb 0f       	add	r27, r27
    3050:	11 f4       	brne	.+4      	; 0x3056 <__floatsisf+0x36>
    3052:	60 ff       	sbrs	r22, 0
    3054:	1b c0       	rjmp	.+54     	; 0x308c <__floatsisf+0x6c>
    3056:	6f 5f       	subi	r22, 0xFF	; 255
    3058:	7f 4f       	sbci	r23, 0xFF	; 255
    305a:	8f 4f       	sbci	r24, 0xFF	; 255
    305c:	9f 4f       	sbci	r25, 0xFF	; 255
    305e:	16 c0       	rjmp	.+44     	; 0x308c <__floatsisf+0x6c>
    3060:	88 23       	and	r24, r24
    3062:	11 f0       	breq	.+4      	; 0x3068 <__floatsisf+0x48>
    3064:	96 e9       	ldi	r25, 0x96	; 150
    3066:	11 c0       	rjmp	.+34     	; 0x308a <__floatsisf+0x6a>
    3068:	77 23       	and	r23, r23
    306a:	21 f0       	breq	.+8      	; 0x3074 <__floatsisf+0x54>
    306c:	9e e8       	ldi	r25, 0x8E	; 142
    306e:	87 2f       	mov	r24, r23
    3070:	76 2f       	mov	r23, r22
    3072:	05 c0       	rjmp	.+10     	; 0x307e <__floatsisf+0x5e>
    3074:	66 23       	and	r22, r22
    3076:	71 f0       	breq	.+28     	; 0x3094 <__floatsisf+0x74>
    3078:	96 e8       	ldi	r25, 0x86	; 134
    307a:	86 2f       	mov	r24, r22
    307c:	70 e0       	ldi	r23, 0x00	; 0
    307e:	60 e0       	ldi	r22, 0x00	; 0
    3080:	2a f0       	brmi	.+10     	; 0x308c <__floatsisf+0x6c>
    3082:	9a 95       	dec	r25
    3084:	66 0f       	add	r22, r22
    3086:	77 1f       	adc	r23, r23
    3088:	88 1f       	adc	r24, r24
    308a:	da f7       	brpl	.-10     	; 0x3082 <__floatsisf+0x62>
    308c:	88 0f       	add	r24, r24
    308e:	96 95       	lsr	r25
    3090:	87 95       	ror	r24
    3092:	97 f9       	bld	r25, 7
    3094:	08 95       	ret

00003096 <__fp_inf>:
    3096:	97 f9       	bld	r25, 7
    3098:	9f 67       	ori	r25, 0x7F	; 127
    309a:	80 e8       	ldi	r24, 0x80	; 128
    309c:	70 e0       	ldi	r23, 0x00	; 0
    309e:	60 e0       	ldi	r22, 0x00	; 0
    30a0:	08 95       	ret

000030a2 <__fp_nan>:
    30a2:	9f ef       	ldi	r25, 0xFF	; 255
    30a4:	80 ec       	ldi	r24, 0xC0	; 192
    30a6:	08 95       	ret

000030a8 <__fp_pscA>:
    30a8:	00 24       	eor	r0, r0
    30aa:	0a 94       	dec	r0
    30ac:	16 16       	cp	r1, r22
    30ae:	17 06       	cpc	r1, r23
    30b0:	18 06       	cpc	r1, r24
    30b2:	09 06       	cpc	r0, r25
    30b4:	08 95       	ret

000030b6 <__fp_pscB>:
    30b6:	00 24       	eor	r0, r0
    30b8:	0a 94       	dec	r0
    30ba:	12 16       	cp	r1, r18
    30bc:	13 06       	cpc	r1, r19
    30be:	14 06       	cpc	r1, r20
    30c0:	05 06       	cpc	r0, r21
    30c2:	08 95       	ret

000030c4 <__fp_round>:
    30c4:	09 2e       	mov	r0, r25
    30c6:	03 94       	inc	r0
    30c8:	00 0c       	add	r0, r0
    30ca:	11 f4       	brne	.+4      	; 0x30d0 <__fp_round+0xc>
    30cc:	88 23       	and	r24, r24
    30ce:	52 f0       	brmi	.+20     	; 0x30e4 <__fp_round+0x20>
    30d0:	bb 0f       	add	r27, r27
    30d2:	40 f4       	brcc	.+16     	; 0x30e4 <__fp_round+0x20>
    30d4:	bf 2b       	or	r27, r31
    30d6:	11 f4       	brne	.+4      	; 0x30dc <__fp_round+0x18>
    30d8:	60 ff       	sbrs	r22, 0
    30da:	04 c0       	rjmp	.+8      	; 0x30e4 <__fp_round+0x20>
    30dc:	6f 5f       	subi	r22, 0xFF	; 255
    30de:	7f 4f       	sbci	r23, 0xFF	; 255
    30e0:	8f 4f       	sbci	r24, 0xFF	; 255
    30e2:	9f 4f       	sbci	r25, 0xFF	; 255
    30e4:	08 95       	ret

000030e6 <__fp_split3>:
    30e6:	57 fd       	sbrc	r21, 7
    30e8:	90 58       	subi	r25, 0x80	; 128
    30ea:	44 0f       	add	r20, r20
    30ec:	55 1f       	adc	r21, r21
    30ee:	59 f0       	breq	.+22     	; 0x3106 <__fp_splitA+0x10>
    30f0:	5f 3f       	cpi	r21, 0xFF	; 255
    30f2:	71 f0       	breq	.+28     	; 0x3110 <__fp_splitA+0x1a>
    30f4:	47 95       	ror	r20

000030f6 <__fp_splitA>:
    30f6:	88 0f       	add	r24, r24
    30f8:	97 fb       	bst	r25, 7
    30fa:	99 1f       	adc	r25, r25
    30fc:	61 f0       	breq	.+24     	; 0x3116 <__fp_splitA+0x20>
    30fe:	9f 3f       	cpi	r25, 0xFF	; 255
    3100:	79 f0       	breq	.+30     	; 0x3120 <__fp_splitA+0x2a>
    3102:	87 95       	ror	r24
    3104:	08 95       	ret
    3106:	12 16       	cp	r1, r18
    3108:	13 06       	cpc	r1, r19
    310a:	14 06       	cpc	r1, r20
    310c:	55 1f       	adc	r21, r21
    310e:	f2 cf       	rjmp	.-28     	; 0x30f4 <__fp_split3+0xe>
    3110:	46 95       	lsr	r20
    3112:	f1 df       	rcall	.-30     	; 0x30f6 <__fp_splitA>
    3114:	08 c0       	rjmp	.+16     	; 0x3126 <__fp_splitA+0x30>
    3116:	16 16       	cp	r1, r22
    3118:	17 06       	cpc	r1, r23
    311a:	18 06       	cpc	r1, r24
    311c:	99 1f       	adc	r25, r25
    311e:	f1 cf       	rjmp	.-30     	; 0x3102 <__fp_splitA+0xc>
    3120:	86 95       	lsr	r24
    3122:	71 05       	cpc	r23, r1
    3124:	61 05       	cpc	r22, r1
    3126:	08 94       	sec
    3128:	08 95       	ret

0000312a <__fp_zero>:
    312a:	e8 94       	clt

0000312c <__fp_szero>:
    312c:	bb 27       	eor	r27, r27
    312e:	66 27       	eor	r22, r22
    3130:	77 27       	eor	r23, r23
    3132:	cb 01       	movw	r24, r22
    3134:	97 f9       	bld	r25, 7
    3136:	08 95       	ret

00003138 <__mulsf3>:
    3138:	0b d0       	rcall	.+22     	; 0x3150 <__mulsf3x>
    313a:	c4 cf       	rjmp	.-120    	; 0x30c4 <__fp_round>
    313c:	b5 df       	rcall	.-150    	; 0x30a8 <__fp_pscA>
    313e:	28 f0       	brcs	.+10     	; 0x314a <__mulsf3+0x12>
    3140:	ba df       	rcall	.-140    	; 0x30b6 <__fp_pscB>
    3142:	18 f0       	brcs	.+6      	; 0x314a <__mulsf3+0x12>
    3144:	95 23       	and	r25, r21
    3146:	09 f0       	breq	.+2      	; 0x314a <__mulsf3+0x12>
    3148:	a6 cf       	rjmp	.-180    	; 0x3096 <__fp_inf>
    314a:	ab cf       	rjmp	.-170    	; 0x30a2 <__fp_nan>
    314c:	11 24       	eor	r1, r1
    314e:	ee cf       	rjmp	.-36     	; 0x312c <__fp_szero>

00003150 <__mulsf3x>:
    3150:	ca df       	rcall	.-108    	; 0x30e6 <__fp_split3>
    3152:	a0 f3       	brcs	.-24     	; 0x313c <__mulsf3+0x4>

00003154 <__mulsf3_pse>:
    3154:	95 9f       	mul	r25, r21
    3156:	d1 f3       	breq	.-12     	; 0x314c <__mulsf3+0x14>
    3158:	95 0f       	add	r25, r21
    315a:	50 e0       	ldi	r21, 0x00	; 0
    315c:	55 1f       	adc	r21, r21
    315e:	62 9f       	mul	r22, r18
    3160:	f0 01       	movw	r30, r0
    3162:	72 9f       	mul	r23, r18
    3164:	bb 27       	eor	r27, r27
    3166:	f0 0d       	add	r31, r0
    3168:	b1 1d       	adc	r27, r1
    316a:	63 9f       	mul	r22, r19
    316c:	aa 27       	eor	r26, r26
    316e:	f0 0d       	add	r31, r0
    3170:	b1 1d       	adc	r27, r1
    3172:	aa 1f       	adc	r26, r26
    3174:	64 9f       	mul	r22, r20
    3176:	66 27       	eor	r22, r22
    3178:	b0 0d       	add	r27, r0
    317a:	a1 1d       	adc	r26, r1
    317c:	66 1f       	adc	r22, r22
    317e:	82 9f       	mul	r24, r18
    3180:	22 27       	eor	r18, r18
    3182:	b0 0d       	add	r27, r0
    3184:	a1 1d       	adc	r26, r1
    3186:	62 1f       	adc	r22, r18
    3188:	73 9f       	mul	r23, r19
    318a:	b0 0d       	add	r27, r0
    318c:	a1 1d       	adc	r26, r1
    318e:	62 1f       	adc	r22, r18
    3190:	83 9f       	mul	r24, r19
    3192:	a0 0d       	add	r26, r0
    3194:	61 1d       	adc	r22, r1
    3196:	22 1f       	adc	r18, r18
    3198:	74 9f       	mul	r23, r20
    319a:	33 27       	eor	r19, r19
    319c:	a0 0d       	add	r26, r0
    319e:	61 1d       	adc	r22, r1
    31a0:	23 1f       	adc	r18, r19
    31a2:	84 9f       	mul	r24, r20
    31a4:	60 0d       	add	r22, r0
    31a6:	21 1d       	adc	r18, r1
    31a8:	82 2f       	mov	r24, r18
    31aa:	76 2f       	mov	r23, r22
    31ac:	6a 2f       	mov	r22, r26
    31ae:	11 24       	eor	r1, r1
    31b0:	9f 57       	subi	r25, 0x7F	; 127
    31b2:	50 40       	sbci	r21, 0x00	; 0
    31b4:	8a f0       	brmi	.+34     	; 0x31d8 <__mulsf3_pse+0x84>
    31b6:	e1 f0       	breq	.+56     	; 0x31f0 <__mulsf3_pse+0x9c>
    31b8:	88 23       	and	r24, r24
    31ba:	4a f0       	brmi	.+18     	; 0x31ce <__mulsf3_pse+0x7a>
    31bc:	ee 0f       	add	r30, r30
    31be:	ff 1f       	adc	r31, r31
    31c0:	bb 1f       	adc	r27, r27
    31c2:	66 1f       	adc	r22, r22
    31c4:	77 1f       	adc	r23, r23
    31c6:	88 1f       	adc	r24, r24
    31c8:	91 50       	subi	r25, 0x01	; 1
    31ca:	50 40       	sbci	r21, 0x00	; 0
    31cc:	a9 f7       	brne	.-22     	; 0x31b8 <__mulsf3_pse+0x64>
    31ce:	9e 3f       	cpi	r25, 0xFE	; 254
    31d0:	51 05       	cpc	r21, r1
    31d2:	70 f0       	brcs	.+28     	; 0x31f0 <__mulsf3_pse+0x9c>
    31d4:	60 cf       	rjmp	.-320    	; 0x3096 <__fp_inf>
    31d6:	aa cf       	rjmp	.-172    	; 0x312c <__fp_szero>
    31d8:	5f 3f       	cpi	r21, 0xFF	; 255
    31da:	ec f3       	brlt	.-6      	; 0x31d6 <__mulsf3_pse+0x82>
    31dc:	98 3e       	cpi	r25, 0xE8	; 232
    31de:	dc f3       	brlt	.-10     	; 0x31d6 <__mulsf3_pse+0x82>
    31e0:	86 95       	lsr	r24
    31e2:	77 95       	ror	r23
    31e4:	67 95       	ror	r22
    31e6:	b7 95       	ror	r27
    31e8:	f7 95       	ror	r31
    31ea:	e7 95       	ror	r30
    31ec:	9f 5f       	subi	r25, 0xFF	; 255
    31ee:	c1 f7       	brne	.-16     	; 0x31e0 <__mulsf3_pse+0x8c>
    31f0:	fe 2b       	or	r31, r30
    31f2:	88 0f       	add	r24, r24
    31f4:	91 1d       	adc	r25, r1
    31f6:	96 95       	lsr	r25
    31f8:	87 95       	ror	r24
    31fa:	97 f9       	bld	r25, 7
    31fc:	08 95       	ret

000031fe <__udivmodsi4>:
    31fe:	a1 e2       	ldi	r26, 0x21	; 33
    3200:	1a 2e       	mov	r1, r26
    3202:	aa 1b       	sub	r26, r26
    3204:	bb 1b       	sub	r27, r27
    3206:	fd 01       	movw	r30, r26
    3208:	0d c0       	rjmp	.+26     	; 0x3224 <__udivmodsi4_ep>

0000320a <__udivmodsi4_loop>:
    320a:	aa 1f       	adc	r26, r26
    320c:	bb 1f       	adc	r27, r27
    320e:	ee 1f       	adc	r30, r30
    3210:	ff 1f       	adc	r31, r31
    3212:	a2 17       	cp	r26, r18
    3214:	b3 07       	cpc	r27, r19
    3216:	e4 07       	cpc	r30, r20
    3218:	f5 07       	cpc	r31, r21
    321a:	20 f0       	brcs	.+8      	; 0x3224 <__udivmodsi4_ep>
    321c:	a2 1b       	sub	r26, r18
    321e:	b3 0b       	sbc	r27, r19
    3220:	e4 0b       	sbc	r30, r20
    3222:	f5 0b       	sbc	r31, r21

00003224 <__udivmodsi4_ep>:
    3224:	66 1f       	adc	r22, r22
    3226:	77 1f       	adc	r23, r23
    3228:	88 1f       	adc	r24, r24
    322a:	99 1f       	adc	r25, r25
    322c:	1a 94       	dec	r1
    322e:	69 f7       	brne	.-38     	; 0x320a <__udivmodsi4_loop>
    3230:	60 95       	com	r22
    3232:	70 95       	com	r23
    3234:	80 95       	com	r24
    3236:	90 95       	com	r25
    3238:	9b 01       	movw	r18, r22
    323a:	ac 01       	movw	r20, r24
    323c:	bd 01       	movw	r22, r26
    323e:	cf 01       	movw	r24, r30
    3240:	08 95       	ret

00003242 <__tablejump2__>:
    3242:	ee 0f       	add	r30, r30
    3244:	ff 1f       	adc	r31, r31
    3246:	88 1f       	adc	r24, r24
    3248:	8b bf       	out	0x3b, r24	; 59
    324a:	07 90       	elpm	r0, Z+
    324c:	f6 91       	elpm	r31, Z
    324e:	e0 2d       	mov	r30, r0
    3250:	19 94       	eijmp

00003252 <__umulhisi3>:
    3252:	a2 9f       	mul	r26, r18
    3254:	b0 01       	movw	r22, r0
    3256:	b3 9f       	mul	r27, r19
    3258:	c0 01       	movw	r24, r0
    325a:	a3 9f       	mul	r26, r19
    325c:	70 0d       	add	r23, r0
    325e:	81 1d       	adc	r24, r1
    3260:	11 24       	eor	r1, r1
    3262:	91 1d       	adc	r25, r1
    3264:	b2 9f       	mul	r27, r18
    3266:	70 0d       	add	r23, r0
    3268:	81 1d       	adc	r24, r1
    326a:	11 24       	eor	r1, r1
    326c:	91 1d       	adc	r25, r1
    326e:	08 95       	ret

00003270 <memcpy_P>:
    3270:	fb 01       	movw	r30, r22
    3272:	dc 01       	movw	r26, r24
    3274:	02 c0       	rjmp	.+4      	; 0x327a <memcpy_P+0xa>
    3276:	05 90       	lpm	r0, Z+
    3278:	0d 92       	st	X+, r0
    327a:	41 50       	subi	r20, 0x01	; 1
    327c:	50 40       	sbci	r21, 0x00	; 0
    327e:	d8 f7       	brcc	.-10     	; 0x3276 <memcpy_P+0x6>
    3280:	08 95       	ret

00003282 <memcmp>:
    3282:	fb 01       	movw	r30, r22
    3284:	dc 01       	movw	r26, r24
    3286:	04 c0       	rjmp	.+8      	; 0x3290 <memcmp+0xe>
    3288:	8d 91       	ld	r24, X+
    328a:	01 90       	ld	r0, Z+
    328c:	80 19       	sub	r24, r0
    328e:	21 f4       	brne	.+8      	; 0x3298 <memcmp+0x16>
    3290:	41 50       	subi	r20, 0x01	; 1
    3292:	50 40       	sbci	r21, 0x00	; 0
    3294:	c8 f7       	brcc	.-14     	; 0x3288 <memcmp+0x6>
    3296:	88 1b       	sub	r24, r24
    3298:	99 0b       	sbc	r25, r25
    329a:	08 95       	ret

0000329c <strncpy>:
    329c:	fb 01       	movw	r30, r22
    329e:	dc 01       	movw	r26, r24
    32a0:	41 50       	subi	r20, 0x01	; 1
    32a2:	50 40       	sbci	r21, 0x00	; 0
    32a4:	48 f0       	brcs	.+18     	; 0x32b8 <strncpy+0x1c>
    32a6:	01 90       	ld	r0, Z+
    32a8:	0d 92       	st	X+, r0
    32aa:	00 20       	and	r0, r0
    32ac:	c9 f7       	brne	.-14     	; 0x32a0 <strncpy+0x4>
    32ae:	01 c0       	rjmp	.+2      	; 0x32b2 <strncpy+0x16>
    32b0:	1d 92       	st	X+, r1
    32b2:	41 50       	subi	r20, 0x01	; 1
    32b4:	50 40       	sbci	r21, 0x00	; 0
    32b6:	e0 f7       	brcc	.-8      	; 0x32b0 <strncpy+0x14>
    32b8:	08 95       	ret

000032ba <_exit>:
    32ba:	f8 94       	cli

000032bc <__stop_program>:
    32bc:	ff cf       	rjmp	.-2      	; 0x32bc <__stop_program>
