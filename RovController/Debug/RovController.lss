
RovController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f6  00800200  000036da  0000376e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000036da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000062f  008002f6  008002f6  00003864  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003864  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003894  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000848  00000000  00000000  000038d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000151f0  00000000  00000000  0000411c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004d4e  00000000  00000000  0001930c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000556d  00000000  00000000  0001e05a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000019e8  00000000  00000000  000235c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005c82  00000000  00000000  00024fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009536  00000000  00000000  0002ac32  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007c0  00000000  00000000  00034168  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4c c1       	rjmp	.+664    	; 0x29a <__ctors_end>
       2:	00 00       	nop
       4:	7b c1       	rjmp	.+758    	; 0x2fc <__bad_interrupt>
       6:	00 00       	nop
       8:	79 c1       	rjmp	.+754    	; 0x2fc <__bad_interrupt>
       a:	00 00       	nop
       c:	77 c1       	rjmp	.+750    	; 0x2fc <__bad_interrupt>
       e:	00 00       	nop
      10:	75 c1       	rjmp	.+746    	; 0x2fc <__bad_interrupt>
      12:	00 00       	nop
      14:	73 c1       	rjmp	.+742    	; 0x2fc <__bad_interrupt>
      16:	00 00       	nop
      18:	71 c1       	rjmp	.+738    	; 0x2fc <__bad_interrupt>
      1a:	00 00       	nop
      1c:	6f c1       	rjmp	.+734    	; 0x2fc <__bad_interrupt>
      1e:	00 00       	nop
      20:	6d c1       	rjmp	.+730    	; 0x2fc <__bad_interrupt>
      22:	00 00       	nop
      24:	6b c1       	rjmp	.+726    	; 0x2fc <__bad_interrupt>
      26:	00 00       	nop
      28:	69 c1       	rjmp	.+722    	; 0x2fc <__bad_interrupt>
      2a:	00 00       	nop
      2c:	67 c1       	rjmp	.+718    	; 0x2fc <__bad_interrupt>
      2e:	00 00       	nop
      30:	65 c1       	rjmp	.+714    	; 0x2fc <__bad_interrupt>
      32:	00 00       	nop
      34:	63 c1       	rjmp	.+710    	; 0x2fc <__bad_interrupt>
      36:	00 00       	nop
      38:	61 c1       	rjmp	.+706    	; 0x2fc <__bad_interrupt>
      3a:	00 00       	nop
      3c:	5f c1       	rjmp	.+702    	; 0x2fc <__bad_interrupt>
      3e:	00 00       	nop
      40:	5d c1       	rjmp	.+698    	; 0x2fc <__bad_interrupt>
      42:	00 00       	nop
      44:	5b c1       	rjmp	.+694    	; 0x2fc <__bad_interrupt>
      46:	00 00       	nop
      48:	59 c1       	rjmp	.+690    	; 0x2fc <__bad_interrupt>
      4a:	00 00       	nop
      4c:	57 c1       	rjmp	.+686    	; 0x2fc <__bad_interrupt>
      4e:	00 00       	nop
      50:	55 c1       	rjmp	.+682    	; 0x2fc <__bad_interrupt>
      52:	00 00       	nop
      54:	53 c1       	rjmp	.+678    	; 0x2fc <__bad_interrupt>
      56:	00 00       	nop
      58:	51 c1       	rjmp	.+674    	; 0x2fc <__bad_interrupt>
      5a:	00 00       	nop
      5c:	4f c1       	rjmp	.+670    	; 0x2fc <__bad_interrupt>
      5e:	00 00       	nop
      60:	4d c1       	rjmp	.+666    	; 0x2fc <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 31 0e 	jmp	0x1c62	; 0x1c62 <__vector_25>
      68:	0c 94 6d 0e 	jmp	0x1cda	; 0x1cda <__vector_26>
      6c:	47 c1       	rjmp	.+654    	; 0x2fc <__bad_interrupt>
      6e:	00 00       	nop
      70:	45 c1       	rjmp	.+650    	; 0x2fc <__bad_interrupt>
      72:	00 00       	nop
      74:	43 c1       	rjmp	.+646    	; 0x2fc <__bad_interrupt>
      76:	00 00       	nop
      78:	41 c1       	rjmp	.+642    	; 0x2fc <__bad_interrupt>
      7a:	00 00       	nop
      7c:	3f c1       	rjmp	.+638    	; 0x2fc <__bad_interrupt>
      7e:	00 00       	nop
      80:	3d c1       	rjmp	.+634    	; 0x2fc <__bad_interrupt>
      82:	00 00       	nop
      84:	3b c1       	rjmp	.+630    	; 0x2fc <__bad_interrupt>
      86:	00 00       	nop
      88:	39 c1       	rjmp	.+626    	; 0x2fc <__bad_interrupt>
      8a:	00 00       	nop
      8c:	37 c1       	rjmp	.+622    	; 0x2fc <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 b9 0e 	jmp	0x1d72	; 0x1d72 <__vector_36>
      94:	0c 94 f5 0e 	jmp	0x1dea	; 0x1dea <__vector_37>
      98:	31 c1       	rjmp	.+610    	; 0x2fc <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 64 11 	jmp	0x22c8	; 0x22c8 <__vector_39>
      a0:	2d c1       	rjmp	.+602    	; 0x2fc <__bad_interrupt>
      a2:	00 00       	nop
      a4:	2b c1       	rjmp	.+598    	; 0x2fc <__bad_interrupt>
      a6:	00 00       	nop
      a8:	29 c1       	rjmp	.+594    	; 0x2fc <__bad_interrupt>
      aa:	00 00       	nop
      ac:	27 c1       	rjmp	.+590    	; 0x2fc <__bad_interrupt>
      ae:	00 00       	nop
      b0:	25 c1       	rjmp	.+586    	; 0x2fc <__bad_interrupt>
      b2:	00 00       	nop
      b4:	23 c1       	rjmp	.+582    	; 0x2fc <__bad_interrupt>
      b6:	00 00       	nop
      b8:	21 c1       	rjmp	.+578    	; 0x2fc <__bad_interrupt>
      ba:	00 00       	nop
      bc:	1f c1       	rjmp	.+574    	; 0x2fc <__bad_interrupt>
      be:	00 00       	nop
      c0:	1d c1       	rjmp	.+570    	; 0x2fc <__bad_interrupt>
      c2:	00 00       	nop
      c4:	1b c1       	rjmp	.+566    	; 0x2fc <__bad_interrupt>
      c6:	00 00       	nop
      c8:	19 c1       	rjmp	.+562    	; 0x2fc <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 41 0f 	jmp	0x1e82	; 0x1e82 <__vector_51>
      d0:	0c 94 7d 0f 	jmp	0x1efa	; 0x1efa <__vector_52>
      d4:	13 c1       	rjmp	.+550    	; 0x2fc <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 c9 0f 	jmp	0x1f92	; 0x1f92 <__vector_54>
      dc:	0c 94 05 10 	jmp	0x200a	; 0x200a <__vector_55>
      e0:	0d c1       	rjmp	.+538    	; 0x2fc <__bad_interrupt>
      e2:	00 00       	nop
      e4:	6b 12       	cpse	r6, r27
      e6:	6e 12       	cpse	r6, r30
      e8:	6e 12       	cpse	r6, r30
      ea:	6e 12       	cpse	r6, r30
      ec:	6e 12       	cpse	r6, r30
      ee:	6e 12       	cpse	r6, r30
      f0:	6e 12       	cpse	r6, r30
      f2:	6e 12       	cpse	r6, r30
      f4:	86 11       	cpse	r24, r6
      f6:	6e 12       	cpse	r6, r30
      f8:	6e 12       	cpse	r6, r30
      fa:	6e 12       	cpse	r6, r30
      fc:	6e 12       	cpse	r6, r30
      fe:	6e 12       	cpse	r6, r30
     100:	6e 12       	cpse	r6, r30
     102:	6e 12       	cpse	r6, r30
     104:	86 11       	cpse	r24, r6
     106:	6e 12       	cpse	r6, r30
     108:	6e 12       	cpse	r6, r30
     10a:	6e 12       	cpse	r6, r30
     10c:	6e 12       	cpse	r6, r30
     10e:	6e 12       	cpse	r6, r30
     110:	6e 12       	cpse	r6, r30
     112:	6e 12       	cpse	r6, r30
     114:	8e 11       	cpse	r24, r14
     116:	6e 12       	cpse	r6, r30
     118:	6e 12       	cpse	r6, r30
     11a:	6e 12       	cpse	r6, r30
     11c:	6e 12       	cpse	r6, r30
     11e:	6e 12       	cpse	r6, r30
     120:	6e 12       	cpse	r6, r30
     122:	6e 12       	cpse	r6, r30
     124:	b3 11       	cpse	r27, r3
     126:	6e 12       	cpse	r6, r30
     128:	6e 12       	cpse	r6, r30
     12a:	6e 12       	cpse	r6, r30
     12c:	6e 12       	cpse	r6, r30
     12e:	6e 12       	cpse	r6, r30
     130:	6e 12       	cpse	r6, r30
     132:	6e 12       	cpse	r6, r30
     134:	8e 11       	cpse	r24, r14
     136:	6e 12       	cpse	r6, r30
     138:	6e 12       	cpse	r6, r30
     13a:	6e 12       	cpse	r6, r30
     13c:	6e 12       	cpse	r6, r30
     13e:	6e 12       	cpse	r6, r30
     140:	6e 12       	cpse	r6, r30
     142:	6e 12       	cpse	r6, r30
     144:	b8 11       	cpse	r27, r8
     146:	6e 12       	cpse	r6, r30
     148:	6e 12       	cpse	r6, r30
     14a:	6e 12       	cpse	r6, r30
     14c:	6e 12       	cpse	r6, r30
     14e:	6e 12       	cpse	r6, r30
     150:	6e 12       	cpse	r6, r30
     152:	6e 12       	cpse	r6, r30
     154:	bd 11       	cpse	r27, r13
     156:	6e 12       	cpse	r6, r30
     158:	6e 12       	cpse	r6, r30
     15a:	6e 12       	cpse	r6, r30
     15c:	6e 12       	cpse	r6, r30
     15e:	6e 12       	cpse	r6, r30
     160:	6e 12       	cpse	r6, r30
     162:	6e 12       	cpse	r6, r30
     164:	ce 11       	cpse	r28, r14
     166:	6e 12       	cpse	r6, r30
     168:	6e 12       	cpse	r6, r30
     16a:	6e 12       	cpse	r6, r30
     16c:	6e 12       	cpse	r6, r30
     16e:	6e 12       	cpse	r6, r30
     170:	6e 12       	cpse	r6, r30
     172:	6e 12       	cpse	r6, r30
     174:	f7 11       	cpse	r31, r7
     176:	6e 12       	cpse	r6, r30
     178:	6e 12       	cpse	r6, r30
     17a:	6e 12       	cpse	r6, r30
     17c:	6e 12       	cpse	r6, r30
     17e:	6e 12       	cpse	r6, r30
     180:	6e 12       	cpse	r6, r30
     182:	6e 12       	cpse	r6, r30
     184:	c2 11       	cpse	r28, r2
     186:	6e 12       	cpse	r6, r30
     188:	6e 12       	cpse	r6, r30
     18a:	6e 12       	cpse	r6, r30
     18c:	6e 12       	cpse	r6, r30
     18e:	6e 12       	cpse	r6, r30
     190:	6e 12       	cpse	r6, r30
     192:	6e 12       	cpse	r6, r30
     194:	dc 11       	cpse	r29, r12
     196:	6e 12       	cpse	r6, r30
     198:	6e 12       	cpse	r6, r30
     19a:	6e 12       	cpse	r6, r30
     19c:	6e 12       	cpse	r6, r30
     19e:	6e 12       	cpse	r6, r30
     1a0:	6e 12       	cpse	r6, r30
     1a2:	6e 12       	cpse	r6, r30
     1a4:	f9 11       	cpse	r31, r9
     1a6:	6e 12       	cpse	r6, r30
     1a8:	6e 12       	cpse	r6, r30
     1aa:	6e 12       	cpse	r6, r30
     1ac:	6e 12       	cpse	r6, r30
     1ae:	6e 12       	cpse	r6, r30
     1b0:	6e 12       	cpse	r6, r30
     1b2:	6e 12       	cpse	r6, r30
     1b4:	f9 11       	cpse	r31, r9
     1b6:	6e 12       	cpse	r6, r30
     1b8:	6e 12       	cpse	r6, r30
     1ba:	6e 12       	cpse	r6, r30
     1bc:	6e 12       	cpse	r6, r30
     1be:	6e 12       	cpse	r6, r30
     1c0:	6e 12       	cpse	r6, r30
     1c2:	6e 12       	cpse	r6, r30
     1c4:	f9 11       	cpse	r31, r9
     1c6:	6e 12       	cpse	r6, r30
     1c8:	6e 12       	cpse	r6, r30
     1ca:	6e 12       	cpse	r6, r30
     1cc:	6e 12       	cpse	r6, r30
     1ce:	6e 12       	cpse	r6, r30
     1d0:	6e 12       	cpse	r6, r30
     1d2:	6e 12       	cpse	r6, r30
     1d4:	f9 11       	cpse	r31, r9
     1d6:	6e 12       	cpse	r6, r30
     1d8:	6e 12       	cpse	r6, r30
     1da:	6e 12       	cpse	r6, r30
     1dc:	6e 12       	cpse	r6, r30
     1de:	6e 12       	cpse	r6, r30
     1e0:	6e 12       	cpse	r6, r30
     1e2:	6e 12       	cpse	r6, r30
     1e4:	02 12       	cpse	r0, r18
     1e6:	6e 12       	cpse	r6, r30
     1e8:	6e 12       	cpse	r6, r30
     1ea:	6e 12       	cpse	r6, r30
     1ec:	6e 12       	cpse	r6, r30
     1ee:	6e 12       	cpse	r6, r30
     1f0:	6e 12       	cpse	r6, r30
     1f2:	6e 12       	cpse	r6, r30
     1f4:	32 12       	cpse	r3, r18
     1f6:	6e 12       	cpse	r6, r30
     1f8:	6e 12       	cpse	r6, r30
     1fa:	6e 12       	cpse	r6, r30
     1fc:	6e 12       	cpse	r6, r30
     1fe:	6e 12       	cpse	r6, r30
     200:	6e 12       	cpse	r6, r30
     202:	6e 12       	cpse	r6, r30
     204:	02 12       	cpse	r0, r18
     206:	6e 12       	cpse	r6, r30
     208:	6e 12       	cpse	r6, r30
     20a:	6e 12       	cpse	r6, r30
     20c:	6e 12       	cpse	r6, r30
     20e:	6e 12       	cpse	r6, r30
     210:	6e 12       	cpse	r6, r30
     212:	6e 12       	cpse	r6, r30
     214:	32 12       	cpse	r3, r18
     216:	6e 12       	cpse	r6, r30
     218:	6e 12       	cpse	r6, r30
     21a:	6e 12       	cpse	r6, r30
     21c:	6e 12       	cpse	r6, r30
     21e:	6e 12       	cpse	r6, r30
     220:	6e 12       	cpse	r6, r30
     222:	6e 12       	cpse	r6, r30
     224:	1a 12       	cpse	r1, r26
     226:	6e 12       	cpse	r6, r30
     228:	6e 12       	cpse	r6, r30
     22a:	6e 12       	cpse	r6, r30
     22c:	6e 12       	cpse	r6, r30
     22e:	6e 12       	cpse	r6, r30
     230:	6e 12       	cpse	r6, r30
     232:	6e 12       	cpse	r6, r30
     234:	36 12       	cpse	r3, r22
     236:	6e 12       	cpse	r6, r30
     238:	6e 12       	cpse	r6, r30
     23a:	6e 12       	cpse	r6, r30
     23c:	6e 12       	cpse	r6, r30
     23e:	6e 12       	cpse	r6, r30
     240:	6e 12       	cpse	r6, r30
     242:	6e 12       	cpse	r6, r30
     244:	36 12       	cpse	r3, r22
     246:	6e 12       	cpse	r6, r30
     248:	6e 12       	cpse	r6, r30
     24a:	6e 12       	cpse	r6, r30
     24c:	6e 12       	cpse	r6, r30
     24e:	6e 12       	cpse	r6, r30
     250:	6e 12       	cpse	r6, r30
     252:	6e 12       	cpse	r6, r30
     254:	4b 12       	cpse	r4, r27
     256:	6e 12       	cpse	r6, r30
     258:	6e 12       	cpse	r6, r30
     25a:	6e 12       	cpse	r6, r30
     25c:	6e 12       	cpse	r6, r30
     25e:	6e 12       	cpse	r6, r30
     260:	6e 12       	cpse	r6, r30
     262:	6e 12       	cpse	r6, r30
     264:	65 12       	cpse	r6, r21
     266:	6e 12       	cpse	r6, r30
     268:	6e 12       	cpse	r6, r30
     26a:	6e 12       	cpse	r6, r30
     26c:	6e 12       	cpse	r6, r30
     26e:	6e 12       	cpse	r6, r30
     270:	6e 12       	cpse	r6, r30
     272:	6e 12       	cpse	r6, r30
     274:	65 12       	cpse	r6, r21

00000276 <__trampolines_end>:
     276:	45 00       	.word	0x0045	; ????
     278:	00 82       	st	Z, r0
     27a:	00 00       	nop
     27c:	40 00       	.word	0x0040	; ????
     27e:	20 00       	Address 0x0000027e is out of bounds.
.word	0xffff	; ????

0000027f <_ZL9arpreqhdr>:
     27f:	00 01 08 00 06 04 00 01 00                          .........

00000288 <__ctors_start>:
     288:	e6 05       	cpc	r30, r6
     28a:	96 0e       	add	r9, r22
     28c:	1e 0f       	add	r17, r30
     28e:	a6 0f       	add	r26, r22
     290:	2e 10       	cpse	r2, r14
     292:	d5 13       	cpse	r29, r21
     294:	5a 14       	cp	r5, r10
     296:	34 19       	sub	r19, r4
     298:	52 19       	sub	r21, r2

0000029a <__ctors_end>:
     29a:	11 24       	eor	r1, r1
     29c:	1f be       	out	0x3f, r1	; 63
     29e:	cf ef       	ldi	r28, 0xFF	; 255
     2a0:	d1 e2       	ldi	r29, 0x21	; 33
     2a2:	de bf       	out	0x3e, r29	; 62
     2a4:	cd bf       	out	0x3d, r28	; 61
     2a6:	00 e0       	ldi	r16, 0x00	; 0
     2a8:	0c bf       	out	0x3c, r16	; 60

000002aa <__do_copy_data>:
     2aa:	12 e0       	ldi	r17, 0x02	; 2
     2ac:	a0 e0       	ldi	r26, 0x00	; 0
     2ae:	b2 e0       	ldi	r27, 0x02	; 2
     2b0:	ea ed       	ldi	r30, 0xDA	; 218
     2b2:	f6 e3       	ldi	r31, 0x36	; 54
     2b4:	00 e0       	ldi	r16, 0x00	; 0
     2b6:	0b bf       	out	0x3b, r16	; 59
     2b8:	02 c0       	rjmp	.+4      	; 0x2be <__do_copy_data+0x14>
     2ba:	07 90       	elpm	r0, Z+
     2bc:	0d 92       	st	X+, r0
     2be:	a6 3f       	cpi	r26, 0xF6	; 246
     2c0:	b1 07       	cpc	r27, r17
     2c2:	d9 f7       	brne	.-10     	; 0x2ba <__do_copy_data+0x10>

000002c4 <__do_clear_bss>:
     2c4:	29 e0       	ldi	r18, 0x09	; 9
     2c6:	a6 ef       	ldi	r26, 0xF6	; 246
     2c8:	b2 e0       	ldi	r27, 0x02	; 2
     2ca:	01 c0       	rjmp	.+2      	; 0x2ce <.do_clear_bss_start>

000002cc <.do_clear_bss_loop>:
     2cc:	1d 92       	st	X+, r1

000002ce <.do_clear_bss_start>:
     2ce:	a5 32       	cpi	r26, 0x25	; 37
     2d0:	b2 07       	cpc	r27, r18
     2d2:	e1 f7       	brne	.-8      	; 0x2cc <.do_clear_bss_loop>

000002d4 <__do_global_ctors>:
     2d4:	11 e0       	ldi	r17, 0x01	; 1
     2d6:	cd e4       	ldi	r28, 0x4D	; 77
     2d8:	d1 e0       	ldi	r29, 0x01	; 1
     2da:	00 e0       	ldi	r16, 0x00	; 0
     2dc:	06 c0       	rjmp	.+12     	; 0x2ea <__do_global_ctors+0x16>
     2de:	21 97       	sbiw	r28, 0x01	; 1
     2e0:	01 09       	sbc	r16, r1
     2e2:	80 2f       	mov	r24, r16
     2e4:	fe 01       	movw	r30, r28
     2e6:	0e 94 3e 1b 	call	0x367c	; 0x367c <__tablejump2__>
     2ea:	c4 34       	cpi	r28, 0x44	; 68
     2ec:	d1 07       	cpc	r29, r17
     2ee:	80 e0       	ldi	r24, 0x00	; 0
     2f0:	08 07       	cpc	r16, r24
     2f2:	a9 f7       	brne	.-22     	; 0x2de <__do_global_ctors+0xa>
     2f4:	0e 94 ac 0c 	call	0x1958	; 0x1958 <main>
     2f8:	0c 94 6b 1b 	jmp	0x36d6	; 0x36d6 <_exit>

000002fc <__bad_interrupt>:
     2fc:	81 ce       	rjmp	.-766    	; 0x0 <__vectors>

000002fe <_ZN15Adafruit_Sensor15enableAutoRangeEb>:

    setMode(lastMode);
    return true;
  }
  return false;
}
     2fe:	08 95       	ret

00000300 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>:
     300:	0f 93       	push	r16
     302:	1f 93       	push	r17
     304:	cf 93       	push	r28
     306:	df 93       	push	r29
     308:	8c 01       	movw	r16, r24
     30a:	eb 01       	movw	r28, r22
     30c:	88 e2       	ldi	r24, 0x28	; 40
     30e:	fb 01       	movw	r30, r22
     310:	11 92       	st	Z+, r1
     312:	8a 95       	dec	r24
     314:	e9 f7       	brne	.-6      	; 0x310 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x10>
     316:	4b e0       	ldi	r20, 0x0B	; 11
     318:	50 e0       	ldi	r21, 0x00	; 0
     31a:	64 e1       	ldi	r22, 0x14	; 20
     31c:	72 e0       	ldi	r23, 0x02	; 2
     31e:	ce 01       	movw	r24, r28
     320:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <strncpy>
     324:	1b 86       	std	Y+11, r1	; 0x0b
     326:	81 e0       	ldi	r24, 0x01	; 1
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	a0 e0       	ldi	r26, 0x00	; 0
     32c:	b0 e0       	ldi	r27, 0x00	; 0
     32e:	8c 87       	std	Y+12, r24	; 0x0c
     330:	9d 87       	std	Y+13, r25	; 0x0d
     332:	ae 87       	std	Y+14, r26	; 0x0e
     334:	bf 87       	std	Y+15, r27	; 0x0f
     336:	f8 01       	movw	r30, r16
     338:	86 81       	ldd	r24, Z+6	; 0x06
     33a:	97 81       	ldd	r25, Z+7	; 0x07
     33c:	a0 85       	ldd	r26, Z+8	; 0x08
     33e:	b1 85       	ldd	r27, Z+9	; 0x09
     340:	88 8b       	std	Y+16, r24	; 0x10
     342:	99 8b       	std	Y+17, r25	; 0x11
     344:	aa 8b       	std	Y+18, r26	; 0x12
     346:	bb 8b       	std	Y+19, r27	; 0x13
     348:	83 e0       	ldi	r24, 0x03	; 3
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	a0 e0       	ldi	r26, 0x00	; 0
     34e:	b0 e0       	ldi	r27, 0x00	; 0
     350:	8c 8b       	std	Y+20, r24	; 0x14
     352:	9d 8b       	std	Y+21, r25	; 0x15
     354:	ae 8b       	std	Y+22, r26	; 0x16
     356:	bf 8b       	std	Y+23, r27	; 0x17
     358:	1c a2       	std	Y+36, r1	; 0x24
     35a:	1d a2       	std	Y+37, r1	; 0x25
     35c:	1e a2       	std	Y+38, r1	; 0x26
     35e:	1f a2       	std	Y+39, r1	; 0x27
     360:	18 8e       	std	Y+24, r1	; 0x18
     362:	19 8e       	std	Y+25, r1	; 0x19
     364:	1a 8e       	std	Y+26, r1	; 0x1a
     366:	1b 8e       	std	Y+27, r1	; 0x1b
     368:	1c 8e       	std	Y+28, r1	; 0x1c
     36a:	1d 8e       	std	Y+29, r1	; 0x1d
     36c:	1e 8e       	std	Y+30, r1	; 0x1e
     36e:	1f 8e       	std	Y+31, r1	; 0x1f
     370:	8a e0       	ldi	r24, 0x0A	; 10
     372:	97 ed       	ldi	r25, 0xD7	; 215
     374:	a3 e2       	ldi	r26, 0x23	; 35
     376:	bc e3       	ldi	r27, 0x3C	; 60
     378:	88 a3       	std	Y+32, r24	; 0x20
     37a:	99 a3       	std	Y+33, r25	; 0x21
     37c:	aa a3       	std	Y+34, r26	; 0x22
     37e:	bb a3       	std	Y+35, r27	; 0x23
     380:	df 91       	pop	r29
     382:	cf 91       	pop	r28
     384:	1f 91       	pop	r17
     386:	0f 91       	pop	r16
     388:	08 95       	ret

0000038a <_ZN15Adafruit_BNO055C1ElhP7TwoWire>:
     38a:	0f 93       	push	r16
     38c:	1f 93       	push	r17
     38e:	fc 01       	movw	r30, r24
     390:	8f e1       	ldi	r24, 0x1F	; 31
     392:	92 e0       	ldi	r25, 0x02	; 2
     394:	91 83       	std	Z+1, r25	; 0x01
     396:	80 83       	st	Z, r24
     398:	46 83       	std	Z+6, r20	; 0x06
     39a:	57 83       	std	Z+7, r21	; 0x07
     39c:	60 87       	std	Z+8, r22	; 0x08
     39e:	71 87       	std	Z+9, r23	; 0x09
     3a0:	23 83       	std	Z+3, r18	; 0x03
     3a2:	15 83       	std	Z+5, r17	; 0x05
     3a4:	04 83       	std	Z+4, r16	; 0x04
     3a6:	1f 91       	pop	r17
     3a8:	0f 91       	pop	r16
     3aa:	08 95       	ret

000003ac <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>:
     3ac:	0f 93       	push	r16
     3ae:	1f 93       	push	r17
     3b0:	cf 93       	push	r28
     3b2:	df 93       	push	r29
     3b4:	ec 01       	movw	r28, r24
     3b6:	06 2f       	mov	r16, r22
     3b8:	14 2f       	mov	r17, r20
     3ba:	6b 81       	ldd	r22, Y+3	; 0x03
     3bc:	8c 81       	ldd	r24, Y+4	; 0x04
     3be:	9d 81       	ldd	r25, Y+5	; 0x05
     3c0:	0e 94 4e 13 	call	0x269c	; 0x269c <_ZN7TwoWire17beginTransmissionEh>
     3c4:	8c 81       	ldd	r24, Y+4	; 0x04
     3c6:	9d 81       	ldd	r25, Y+5	; 0x05
     3c8:	dc 01       	movw	r26, r24
     3ca:	ed 91       	ld	r30, X+
     3cc:	fc 91       	ld	r31, X
     3ce:	01 90       	ld	r0, Z+
     3d0:	f0 81       	ld	r31, Z
     3d2:	e0 2d       	mov	r30, r0
     3d4:	60 2f       	mov	r22, r16
     3d6:	19 95       	eicall
     3d8:	8c 81       	ldd	r24, Y+4	; 0x04
     3da:	9d 81       	ldd	r25, Y+5	; 0x05
     3dc:	dc 01       	movw	r26, r24
     3de:	ed 91       	ld	r30, X+
     3e0:	fc 91       	ld	r31, X
     3e2:	01 90       	ld	r0, Z+
     3e4:	f0 81       	ld	r31, Z
     3e6:	e0 2d       	mov	r30, r0
     3e8:	61 2f       	mov	r22, r17
     3ea:	19 95       	eicall
     3ec:	8c 81       	ldd	r24, Y+4	; 0x04
     3ee:	9d 81       	ldd	r25, Y+5	; 0x05
     3f0:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <_ZN7TwoWire15endTransmissionEv>
     3f4:	81 e0       	ldi	r24, 0x01	; 1
     3f6:	df 91       	pop	r29
     3f8:	cf 91       	pop	r28
     3fa:	1f 91       	pop	r17
     3fc:	0f 91       	pop	r16
     3fe:	08 95       	ret

00000400 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>:
     400:	46 2f       	mov	r20, r22
     402:	fc 01       	movw	r30, r24
     404:	62 87       	std	Z+10, r22	; 0x0a
     406:	6d e3       	ldi	r22, 0x3D	; 61
     408:	d1 df       	rcall	.-94     	; 0x3ac <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     40a:	ff ef       	ldi	r31, 0xFF	; 255
     40c:	26 e7       	ldi	r18, 0x76	; 118
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	f1 50       	subi	r31, 0x01	; 1
     412:	20 40       	sbci	r18, 0x00	; 0
     414:	80 40       	sbci	r24, 0x00	; 0
     416:	e1 f7       	brne	.-8      	; 0x410 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE+0x10>
     418:	00 c0       	rjmp	.+0      	; 0x41a <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE+0x1a>
     41a:	00 00       	nop
     41c:	08 95       	ret

0000041e <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>:
     41e:	1f 93       	push	r17
     420:	cf 93       	push	r28
     422:	df 93       	push	r29
     424:	ec 01       	movw	r28, r24
     426:	16 2f       	mov	r17, r22
     428:	6b 81       	ldd	r22, Y+3	; 0x03
     42a:	8c 81       	ldd	r24, Y+4	; 0x04
     42c:	9d 81       	ldd	r25, Y+5	; 0x05
     42e:	0e 94 4e 13 	call	0x269c	; 0x269c <_ZN7TwoWire17beginTransmissionEh>
     432:	8c 81       	ldd	r24, Y+4	; 0x04
     434:	9d 81       	ldd	r25, Y+5	; 0x05
     436:	dc 01       	movw	r26, r24
     438:	ed 91       	ld	r30, X+
     43a:	fc 91       	ld	r31, X
     43c:	01 90       	ld	r0, Z+
     43e:	f0 81       	ld	r31, Z
     440:	e0 2d       	mov	r30, r0
     442:	61 2f       	mov	r22, r17
     444:	19 95       	eicall
     446:	8c 81       	ldd	r24, Y+4	; 0x04
     448:	9d 81       	ldd	r25, Y+5	; 0x05
     44a:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <_ZN7TwoWire15endTransmissionEv>
     44e:	41 e0       	ldi	r20, 0x01	; 1
     450:	6b 81       	ldd	r22, Y+3	; 0x03
     452:	8c 81       	ldd	r24, Y+4	; 0x04
     454:	9d 81       	ldd	r25, Y+5	; 0x05
     456:	0e 94 cf 13 	call	0x279e	; 0x279e <_ZN7TwoWire11requestFromEhh>
     45a:	8c 81       	ldd	r24, Y+4	; 0x04
     45c:	9d 81       	ldd	r25, Y+5	; 0x05
     45e:	dc 01       	movw	r26, r24
     460:	ed 91       	ld	r30, X+
     462:	fc 91       	ld	r31, X
     464:	02 84       	ldd	r0, Z+10	; 0x0a
     466:	f3 85       	ldd	r31, Z+11	; 0x0b
     468:	e0 2d       	mov	r30, r0
     46a:	19 95       	eicall
     46c:	df 91       	pop	r29
     46e:	cf 91       	pop	r28
     470:	1f 91       	pop	r17
     472:	08 95       	ret

00000474 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>:
     474:	1f 93       	push	r17
     476:	cf 93       	push	r28
     478:	df 93       	push	r29
     47a:	ec 01       	movw	r28, r24
     47c:	16 2f       	mov	r17, r22
     47e:	8c 81       	ldd	r24, Y+4	; 0x04
     480:	9d 81       	ldd	r25, Y+5	; 0x05
     482:	0e 94 3e 13 	call	0x267c	; 0x267c <_ZN7TwoWire5beginEv>
     486:	60 e0       	ldi	r22, 0x00	; 0
     488:	ce 01       	movw	r24, r28
     48a:	c9 df       	rcall	.-110    	; 0x41e <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
     48c:	80 3a       	cpi	r24, 0xA0	; 160
     48e:	79 f0       	breq	.+30     	; 0x4ae <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x3a>
     490:	2f ef       	ldi	r18, 0xFF	; 255
     492:	83 ed       	ldi	r24, 0xD3	; 211
     494:	90 e3       	ldi	r25, 0x30	; 48
     496:	21 50       	subi	r18, 0x01	; 1
     498:	80 40       	sbci	r24, 0x00	; 0
     49a:	90 40       	sbci	r25, 0x00	; 0
     49c:	e1 f7       	brne	.-8      	; 0x496 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x22>
     49e:	00 c0       	rjmp	.+0      	; 0x4a0 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x2c>
     4a0:	00 00       	nop
     4a2:	60 e0       	ldi	r22, 0x00	; 0
     4a4:	ce 01       	movw	r24, r28
     4a6:	bb df       	rcall	.-138    	; 0x41e <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
     4a8:	80 3a       	cpi	r24, 0xA0	; 160
     4aa:	09 f0       	breq	.+2      	; 0x4ae <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x3a>
     4ac:	4b c0       	rjmp	.+150    	; 0x544 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xd0>
     4ae:	60 e0       	ldi	r22, 0x00	; 0
     4b0:	ce 01       	movw	r24, r28
     4b2:	a6 df       	rcall	.-180    	; 0x400 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
     4b4:	40 e2       	ldi	r20, 0x20	; 32
     4b6:	6f e3       	ldi	r22, 0x3F	; 63
     4b8:	ce 01       	movw	r24, r28
     4ba:	78 df       	rcall	.-272    	; 0x3ac <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     4bc:	2f ef       	ldi	r18, 0xFF	; 255
     4be:	86 e7       	ldi	r24, 0x76	; 118
     4c0:	91 e0       	ldi	r25, 0x01	; 1
     4c2:	21 50       	subi	r18, 0x01	; 1
     4c4:	80 40       	sbci	r24, 0x00	; 0
     4c6:	90 40       	sbci	r25, 0x00	; 0
     4c8:	e1 f7       	brne	.-8      	; 0x4c2 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x4e>
     4ca:	00 c0       	rjmp	.+0      	; 0x4cc <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x58>
     4cc:	00 00       	nop
     4ce:	60 e0       	ldi	r22, 0x00	; 0
     4d0:	ce 01       	movw	r24, r28
     4d2:	a5 df       	rcall	.-182    	; 0x41e <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
     4d4:	80 3a       	cpi	r24, 0xA0	; 160
     4d6:	39 f0       	breq	.+14     	; 0x4e6 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x72>
     4d8:	8f e3       	ldi	r24, 0x3F	; 63
     4da:	9c e9       	ldi	r25, 0x9C	; 156
     4dc:	01 97       	sbiw	r24, 0x01	; 1
     4de:	f1 f7       	brne	.-4      	; 0x4dc <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x68>
     4e0:	00 c0       	rjmp	.+0      	; 0x4e2 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x6e>
     4e2:	00 00       	nop
     4e4:	f4 cf       	rjmp	.-24     	; 0x4ce <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x5a>
     4e6:	9f ef       	ldi	r25, 0xFF	; 255
     4e8:	20 e7       	ldi	r18, 0x70	; 112
     4ea:	82 e0       	ldi	r24, 0x02	; 2
     4ec:	91 50       	subi	r25, 0x01	; 1
     4ee:	20 40       	sbci	r18, 0x00	; 0
     4f0:	80 40       	sbci	r24, 0x00	; 0
     4f2:	e1 f7       	brne	.-8      	; 0x4ec <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x78>
     4f4:	00 c0       	rjmp	.+0      	; 0x4f6 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x82>
     4f6:	00 00       	nop
     4f8:	40 e0       	ldi	r20, 0x00	; 0
     4fa:	6e e3       	ldi	r22, 0x3E	; 62
     4fc:	ce 01       	movw	r24, r28
     4fe:	56 df       	rcall	.-340    	; 0x3ac <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     500:	8f e3       	ldi	r24, 0x3F	; 63
     502:	9c e9       	ldi	r25, 0x9C	; 156
     504:	01 97       	sbiw	r24, 0x01	; 1
     506:	f1 f7       	brne	.-4      	; 0x504 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x90>
     508:	00 c0       	rjmp	.+0      	; 0x50a <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x96>
     50a:	00 00       	nop
     50c:	40 e0       	ldi	r20, 0x00	; 0
     50e:	67 e0       	ldi	r22, 0x07	; 7
     510:	ce 01       	movw	r24, r28
     512:	4c df       	rcall	.-360    	; 0x3ac <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     514:	40 e0       	ldi	r20, 0x00	; 0
     516:	6f e3       	ldi	r22, 0x3F	; 63
     518:	ce 01       	movw	r24, r28
     51a:	48 df       	rcall	.-368    	; 0x3ac <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     51c:	8f e3       	ldi	r24, 0x3F	; 63
     51e:	9c e9       	ldi	r25, 0x9C	; 156
     520:	01 97       	sbiw	r24, 0x01	; 1
     522:	f1 f7       	brne	.-4      	; 0x520 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xac>
     524:	00 c0       	rjmp	.+0      	; 0x526 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xb2>
     526:	00 00       	nop
     528:	61 2f       	mov	r22, r17
     52a:	ce 01       	movw	r24, r28
     52c:	69 df       	rcall	.-302    	; 0x400 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
     52e:	9f ef       	ldi	r25, 0xFF	; 255
     530:	29 ef       	ldi	r18, 0xF9	; 249
     532:	80 e0       	ldi	r24, 0x00	; 0
     534:	91 50       	subi	r25, 0x01	; 1
     536:	20 40       	sbci	r18, 0x00	; 0
     538:	80 40       	sbci	r24, 0x00	; 0
     53a:	e1 f7       	brne	.-8      	; 0x534 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xc0>
     53c:	00 c0       	rjmp	.+0      	; 0x53e <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xca>
     53e:	00 00       	nop
     540:	81 e0       	ldi	r24, 0x01	; 1
     542:	01 c0       	rjmp	.+2      	; 0x546 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xd2>
     544:	80 e0       	ldi	r24, 0x00	; 0
     546:	df 91       	pop	r29
     548:	cf 91       	pop	r28
     54a:	1f 91       	pop	r17
     54c:	08 95       	ret

0000054e <_ZN15Adafruit_BNO0557getTempEv>:
     54e:	64 e3       	ldi	r22, 0x34	; 52
     550:	66 cf       	rjmp	.-308    	; 0x41e <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
     552:	08 95       	ret

00000554 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>:
     554:	cf 92       	push	r12
     556:	df 92       	push	r13
     558:	ef 92       	push	r14
     55a:	ff 92       	push	r15
     55c:	0f 93       	push	r16
     55e:	1f 93       	push	r17
     560:	cf 93       	push	r28
     562:	df 93       	push	r29
     564:	7c 01       	movw	r14, r24
     566:	c6 2f       	mov	r28, r22
     568:	6a 01       	movw	r12, r20
     56a:	12 2f       	mov	r17, r18
     56c:	dc 01       	movw	r26, r24
     56e:	13 96       	adiw	r26, 0x03	; 3
     570:	6c 91       	ld	r22, X
     572:	13 97       	sbiw	r26, 0x03	; 3
     574:	14 96       	adiw	r26, 0x04	; 4
     576:	8d 91       	ld	r24, X+
     578:	9c 91       	ld	r25, X
     57a:	15 97       	sbiw	r26, 0x05	; 5
     57c:	0e 94 4e 13 	call	0x269c	; 0x269c <_ZN7TwoWire17beginTransmissionEh>
     580:	f7 01       	movw	r30, r14
     582:	84 81       	ldd	r24, Z+4	; 0x04
     584:	95 81       	ldd	r25, Z+5	; 0x05
     586:	dc 01       	movw	r26, r24
     588:	ed 91       	ld	r30, X+
     58a:	fc 91       	ld	r31, X
     58c:	01 90       	ld	r0, Z+
     58e:	f0 81       	ld	r31, Z
     590:	e0 2d       	mov	r30, r0
     592:	6c 2f       	mov	r22, r28
     594:	19 95       	eicall
     596:	f7 01       	movw	r30, r14
     598:	84 81       	ldd	r24, Z+4	; 0x04
     59a:	95 81       	ldd	r25, Z+5	; 0x05
     59c:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <_ZN7TwoWire15endTransmissionEv>
     5a0:	41 2f       	mov	r20, r17
     5a2:	d7 01       	movw	r26, r14
     5a4:	13 96       	adiw	r26, 0x03	; 3
     5a6:	6c 91       	ld	r22, X
     5a8:	13 97       	sbiw	r26, 0x03	; 3
     5aa:	14 96       	adiw	r26, 0x04	; 4
     5ac:	8d 91       	ld	r24, X+
     5ae:	9c 91       	ld	r25, X
     5b0:	15 97       	sbiw	r26, 0x05	; 5
     5b2:	0e 94 cf 13 	call	0x279e	; 0x279e <_ZN7TwoWire11requestFromEhh>
     5b6:	11 23       	and	r17, r17
     5b8:	b1 f0       	breq	.+44     	; 0x5e6 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh+0x92>
     5ba:	e6 01       	movw	r28, r12
     5bc:	11 50       	subi	r17, 0x01	; 1
     5be:	01 2f       	mov	r16, r17
     5c0:	10 e0       	ldi	r17, 0x00	; 0
     5c2:	0f 5f       	subi	r16, 0xFF	; 255
     5c4:	1f 4f       	sbci	r17, 0xFF	; 255
     5c6:	0c 0d       	add	r16, r12
     5c8:	1d 1d       	adc	r17, r13
     5ca:	f7 01       	movw	r30, r14
     5cc:	84 81       	ldd	r24, Z+4	; 0x04
     5ce:	95 81       	ldd	r25, Z+5	; 0x05
     5d0:	dc 01       	movw	r26, r24
     5d2:	ed 91       	ld	r30, X+
     5d4:	fc 91       	ld	r31, X
     5d6:	02 84       	ldd	r0, Z+10	; 0x0a
     5d8:	f3 85       	ldd	r31, Z+11	; 0x0b
     5da:	e0 2d       	mov	r30, r0
     5dc:	19 95       	eicall
     5de:	89 93       	st	Y+, r24
     5e0:	c0 17       	cp	r28, r16
     5e2:	d1 07       	cpc	r29, r17
     5e4:	91 f7       	brne	.-28     	; 0x5ca <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh+0x76>
     5e6:	81 e0       	ldi	r24, 0x01	; 1
     5e8:	df 91       	pop	r29
     5ea:	cf 91       	pop	r28
     5ec:	1f 91       	pop	r17
     5ee:	0f 91       	pop	r16
     5f0:	ff 90       	pop	r15
     5f2:	ef 90       	pop	r14
     5f4:	df 90       	pop	r13
     5f6:	cf 90       	pop	r12
     5f8:	08 95       	ret

000005fa <_ZN15Adafruit_BNO0557getQuatEv>:
     5fa:	4f 92       	push	r4
     5fc:	5f 92       	push	r5
     5fe:	6f 92       	push	r6
     600:	7f 92       	push	r7
     602:	8f 92       	push	r8
     604:	9f 92       	push	r9
     606:	af 92       	push	r10
     608:	bf 92       	push	r11
     60a:	cf 92       	push	r12
     60c:	df 92       	push	r13
     60e:	ef 92       	push	r14
     610:	ff 92       	push	r15
     612:	0f 93       	push	r16
     614:	1f 93       	push	r17
     616:	cf 93       	push	r28
     618:	df 93       	push	r29
     61a:	cd b7       	in	r28, 0x3d	; 61
     61c:	de b7       	in	r29, 0x3e	; 62
     61e:	28 97       	sbiw	r28, 0x08	; 8
     620:	0f b6       	in	r0, 0x3f	; 63
     622:	f8 94       	cli
     624:	de bf       	out	0x3e, r29	; 62
     626:	0f be       	out	0x3f, r0	; 63
     628:	cd bf       	out	0x3d, r28	; 61
     62a:	8c 01       	movw	r16, r24
     62c:	cb 01       	movw	r24, r22
     62e:	ae 01       	movw	r20, r28
     630:	4f 5f       	subi	r20, 0xFF	; 255
     632:	5f 4f       	sbci	r21, 0xFF	; 255
     634:	28 e0       	ldi	r18, 0x08	; 8
     636:	fa 01       	movw	r30, r20
     638:	11 92       	st	Z+, r1
     63a:	2a 95       	dec	r18
     63c:	e9 f7       	brne	.-6      	; 0x638 <_ZN15Adafruit_BNO0557getQuatEv+0x3e>
     63e:	28 e0       	ldi	r18, 0x08	; 8
     640:	60 e2       	ldi	r22, 0x20	; 32
     642:	88 df       	rcall	.-240    	; 0x554 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>
     644:	68 85       	ldd	r22, Y+8	; 0x08
     646:	70 e0       	ldi	r23, 0x00	; 0
     648:	76 2f       	mov	r23, r22
     64a:	66 27       	eor	r22, r22
     64c:	8f 81       	ldd	r24, Y+7	; 0x07
     64e:	68 2b       	or	r22, r24
     650:	07 2e       	mov	r0, r23
     652:	00 0c       	add	r0, r0
     654:	88 0b       	sbc	r24, r24
     656:	99 0b       	sbc	r25, r25
     658:	0e 94 2d 1a 	call	0x345a	; 0x345a <__floatsisf>
     65c:	20 e0       	ldi	r18, 0x00	; 0
     65e:	30 e0       	ldi	r19, 0x00	; 0
     660:	40 e8       	ldi	r20, 0x80	; 128
     662:	58 e3       	ldi	r21, 0x38	; 56
     664:	0e 94 b9 1a 	call	0x3572	; 0x3572 <__mulsf3>
     668:	6b 01       	movw	r12, r22
     66a:	7c 01       	movw	r14, r24
     66c:	6e 81       	ldd	r22, Y+6	; 0x06
     66e:	70 e0       	ldi	r23, 0x00	; 0
     670:	76 2f       	mov	r23, r22
     672:	66 27       	eor	r22, r22
     674:	8d 81       	ldd	r24, Y+5	; 0x05
     676:	68 2b       	or	r22, r24
     678:	07 2e       	mov	r0, r23
     67a:	00 0c       	add	r0, r0
     67c:	88 0b       	sbc	r24, r24
     67e:	99 0b       	sbc	r25, r25
     680:	0e 94 2d 1a 	call	0x345a	; 0x345a <__floatsisf>
     684:	20 e0       	ldi	r18, 0x00	; 0
     686:	30 e0       	ldi	r19, 0x00	; 0
     688:	40 e8       	ldi	r20, 0x80	; 128
     68a:	58 e3       	ldi	r21, 0x38	; 56
     68c:	0e 94 b9 1a 	call	0x3572	; 0x3572 <__mulsf3>
     690:	4b 01       	movw	r8, r22
     692:	5c 01       	movw	r10, r24
     694:	6c 81       	ldd	r22, Y+4	; 0x04
     696:	70 e0       	ldi	r23, 0x00	; 0
     698:	76 2f       	mov	r23, r22
     69a:	66 27       	eor	r22, r22
     69c:	8b 81       	ldd	r24, Y+3	; 0x03
     69e:	68 2b       	or	r22, r24
     6a0:	07 2e       	mov	r0, r23
     6a2:	00 0c       	add	r0, r0
     6a4:	88 0b       	sbc	r24, r24
     6a6:	99 0b       	sbc	r25, r25
     6a8:	0e 94 2d 1a 	call	0x345a	; 0x345a <__floatsisf>
     6ac:	20 e0       	ldi	r18, 0x00	; 0
     6ae:	30 e0       	ldi	r19, 0x00	; 0
     6b0:	40 e8       	ldi	r20, 0x80	; 128
     6b2:	58 e3       	ldi	r21, 0x38	; 56
     6b4:	0e 94 b9 1a 	call	0x3572	; 0x3572 <__mulsf3>
     6b8:	2b 01       	movw	r4, r22
     6ba:	3c 01       	movw	r6, r24
     6bc:	6a 81       	ldd	r22, Y+2	; 0x02
     6be:	70 e0       	ldi	r23, 0x00	; 0
     6c0:	76 2f       	mov	r23, r22
     6c2:	66 27       	eor	r22, r22
     6c4:	89 81       	ldd	r24, Y+1	; 0x01
     6c6:	68 2b       	or	r22, r24
     6c8:	07 2e       	mov	r0, r23
     6ca:	00 0c       	add	r0, r0
     6cc:	88 0b       	sbc	r24, r24
     6ce:	99 0b       	sbc	r25, r25
     6d0:	0e 94 2d 1a 	call	0x345a	; 0x345a <__floatsisf>
     6d4:	20 e0       	ldi	r18, 0x00	; 0
     6d6:	30 e0       	ldi	r19, 0x00	; 0
     6d8:	40 e8       	ldi	r20, 0x80	; 128
     6da:	58 e3       	ldi	r21, 0x38	; 56
     6dc:	0e 94 b9 1a 	call	0x3572	; 0x3572 <__mulsf3>
     6e0:	f8 01       	movw	r30, r16
     6e2:	60 83       	st	Z, r22
     6e4:	71 83       	std	Z+1, r23	; 0x01
     6e6:	82 83       	std	Z+2, r24	; 0x02
     6e8:	93 83       	std	Z+3, r25	; 0x03
     6ea:	44 82       	std	Z+4, r4	; 0x04
     6ec:	55 82       	std	Z+5, r5	; 0x05
     6ee:	66 82       	std	Z+6, r6	; 0x06
     6f0:	77 82       	std	Z+7, r7	; 0x07
     6f2:	80 86       	std	Z+8, r8	; 0x08
     6f4:	91 86       	std	Z+9, r9	; 0x09
     6f6:	a2 86       	std	Z+10, r10	; 0x0a
     6f8:	b3 86       	std	Z+11, r11	; 0x0b
     6fa:	c4 86       	std	Z+12, r12	; 0x0c
     6fc:	d5 86       	std	Z+13, r13	; 0x0d
     6fe:	e6 86       	std	Z+14, r14	; 0x0e
     700:	f7 86       	std	Z+15, r15	; 0x0f
     702:	c8 01       	movw	r24, r16
     704:	28 96       	adiw	r28, 0x08	; 8
     706:	0f b6       	in	r0, 0x3f	; 63
     708:	f8 94       	cli
     70a:	de bf       	out	0x3e, r29	; 62
     70c:	0f be       	out	0x3f, r0	; 63
     70e:	cd bf       	out	0x3d, r28	; 61
     710:	df 91       	pop	r29
     712:	cf 91       	pop	r28
     714:	1f 91       	pop	r17
     716:	0f 91       	pop	r16
     718:	ff 90       	pop	r15
     71a:	ef 90       	pop	r14
     71c:	df 90       	pop	r13
     71e:	cf 90       	pop	r12
     720:	bf 90       	pop	r11
     722:	af 90       	pop	r10
     724:	9f 90       	pop	r9
     726:	8f 90       	pop	r8
     728:	7f 90       	pop	r7
     72a:	6f 90       	pop	r6
     72c:	5f 90       	pop	r5
     72e:	4f 90       	pop	r4
     730:	08 95       	ret

00000732 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>:
 *            VECTOR_EULER
 *            VECTOR_LINEARACCEL
 *            VECTOR_GRAVITY]
 *  @return  vector from specified source
 */
AdafruitImu::Vector<3> Adafruit_BNO055::getVector(adafruit_vector_type_t vector_type) {
     732:	af 92       	push	r10
     734:	bf 92       	push	r11
     736:	cf 92       	push	r12
     738:	df 92       	push	r13
     73a:	ff 92       	push	r15
     73c:	0f 93       	push	r16
     73e:	1f 93       	push	r17
     740:	cf 93       	push	r28
     742:	df 93       	push	r29
     744:	00 d0       	rcall	.+0      	; 0x746 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x14>
     746:	00 d0       	rcall	.+0      	; 0x748 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x16>
     748:	cd b7       	in	r28, 0x3d	; 61
     74a:	de b7       	in	r29, 0x3e	; 62
     74c:	8c 01       	movw	r16, r24
     74e:	cb 01       	movw	r24, r22
     750:	f4 2e       	mov	r15, r20
	template <uint8_t N> class Vector
	{
		public:
		Vector()
		{
			memset(p_vec, 0, sizeof(double)*N);
     752:	2c e0       	ldi	r18, 0x0C	; 12
     754:	f8 01       	movw	r30, r16
     756:	11 92       	st	Z+, r1
     758:	2a 95       	dec	r18
     75a:	e9 f7       	brne	.-6      	; 0x756 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x24>
  AdafruitImu::Vector<3> xyz;
  uint8_t buffer[6];
  memset(buffer, 0, 6);
     75c:	ae 01       	movw	r20, r28
     75e:	4f 5f       	subi	r20, 0xFF	; 255
     760:	5f 4f       	sbci	r21, 0xFF	; 255
     762:	26 e0       	ldi	r18, 0x06	; 6
     764:	fa 01       	movw	r30, r20
     766:	11 92       	st	Z+, r1
     768:	2a 95       	dec	r18
     76a:	e9 f7       	brne	.-6      	; 0x766 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x34>

  int16_t x, y, z;
  x = y = z = 0;

  /* Read vector data (6 bytes) */
  readLen((adafruit_bno055_reg_t)vector_type, buffer, 6);
     76c:	26 e0       	ldi	r18, 0x06	; 6
     76e:	6f 2d       	mov	r22, r15
     770:	f1 de       	rcall	.-542    	; 0x554 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>

  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
     772:	6a 81       	ldd	r22, Y+2	; 0x02
     774:	70 e0       	ldi	r23, 0x00	; 0
     776:	76 2f       	mov	r23, r22
     778:	66 27       	eor	r22, r22
     77a:	89 81       	ldd	r24, Y+1	; 0x01
     77c:	68 2b       	or	r22, r24
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
     77e:	8c 81       	ldd	r24, Y+4	; 0x04
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	98 2f       	mov	r25, r24
     784:	88 27       	eor	r24, r24
     786:	2b 81       	ldd	r18, Y+3	; 0x03
     788:	6c 01       	movw	r12, r24
     78a:	c2 2a       	or	r12, r18
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
     78c:	8e 81       	ldd	r24, Y+6	; 0x06
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	98 2f       	mov	r25, r24
     792:	88 27       	eor	r24, r24
     794:	2d 81       	ldd	r18, Y+5	; 0x05
     796:	5c 01       	movw	r10, r24
     798:	a2 2a       	or	r10, r18

  /*!
   * Convert the value to an appropriate range (section 3.6.4)
   * and assign the value to the Vector type
   */
  switch (vector_type) {
     79a:	f4 e1       	ldi	r31, 0x14	; 20
     79c:	ff 16       	cp	r15, r31
     79e:	09 f4       	brne	.+2      	; 0x7a2 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x70>
     7a0:	4a c0       	rjmp	.+148    	; 0x836 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x104>
     7a2:	ff 15       	cp	r31, r15
     7a4:	40 f0       	brcs	.+16     	; 0x7b6 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x84>
     7a6:	88 e0       	ldi	r24, 0x08	; 8
     7a8:	f8 16       	cp	r15, r24
     7aa:	09 f4       	brne	.+2      	; 0x7ae <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x7c>
     7ac:	ac c0       	rjmp	.+344    	; 0x906 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x1d4>
     7ae:	ee e0       	ldi	r30, 0x0E	; 14
     7b0:	fe 16       	cp	r15, r30
     7b2:	69 f0       	breq	.+26     	; 0x7ce <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x9c>
     7b4:	43 c1       	rjmp	.+646    	; 0xa3c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
     7b6:	f8 e2       	ldi	r31, 0x28	; 40
     7b8:	ff 16       	cp	r15, r31
     7ba:	09 f4       	brne	.+2      	; 0x7be <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x8c>
     7bc:	d8 c0       	rjmp	.+432    	; 0x96e <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x23c>
     7be:	8e e2       	ldi	r24, 0x2E	; 46
     7c0:	f8 16       	cp	r15, r24
     7c2:	09 f4       	brne	.+2      	; 0x7c6 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x94>
     7c4:	08 c1       	rjmp	.+528    	; 0x9d6 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x2a4>
     7c6:	ea e1       	ldi	r30, 0x1A	; 26
     7c8:	fe 12       	cpse	r15, r30
     7ca:	38 c1       	rjmp	.+624    	; 0xa3c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
     7cc:	68 c0       	rjmp	.+208    	; 0x89e <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x16c>
  case VECTOR_MAGNETOMETER:
    /* 1uT = 16 LSB */
    xyz[0] = ((double)x) / 16.0;
     7ce:	07 2e       	mov	r0, r23
     7d0:	00 0c       	add	r0, r0
     7d2:	88 0b       	sbc	r24, r24
     7d4:	99 0b       	sbc	r25, r25
     7d6:	0e 94 2d 1a 	call	0x345a	; 0x345a <__floatsisf>
     7da:	20 e0       	ldi	r18, 0x00	; 0
     7dc:	30 e0       	ldi	r19, 0x00	; 0
     7de:	40 e8       	ldi	r20, 0x80	; 128
     7e0:	5d e3       	ldi	r21, 0x3D	; 61
     7e2:	0e 94 b9 1a 	call	0x3572	; 0x3572 <__mulsf3>
     7e6:	f8 01       	movw	r30, r16
     7e8:	60 83       	st	Z, r22
     7ea:	71 83       	std	Z+1, r23	; 0x01
     7ec:	82 83       	std	Z+2, r24	; 0x02
     7ee:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 16.0;
     7f0:	b6 01       	movw	r22, r12
     7f2:	dd 0c       	add	r13, r13
     7f4:	88 0b       	sbc	r24, r24
     7f6:	99 0b       	sbc	r25, r25
     7f8:	0e 94 2d 1a 	call	0x345a	; 0x345a <__floatsisf>
     7fc:	20 e0       	ldi	r18, 0x00	; 0
     7fe:	30 e0       	ldi	r19, 0x00	; 0
     800:	40 e8       	ldi	r20, 0x80	; 128
     802:	5d e3       	ldi	r21, 0x3D	; 61
     804:	0e 94 b9 1a 	call	0x3572	; 0x3572 <__mulsf3>
     808:	f8 01       	movw	r30, r16
     80a:	64 83       	std	Z+4, r22	; 0x04
     80c:	75 83       	std	Z+5, r23	; 0x05
     80e:	86 83       	std	Z+6, r24	; 0x06
     810:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 16.0;
     812:	b5 01       	movw	r22, r10
     814:	bb 0c       	add	r11, r11
     816:	88 0b       	sbc	r24, r24
     818:	99 0b       	sbc	r25, r25
     81a:	0e 94 2d 1a 	call	0x345a	; 0x345a <__floatsisf>
     81e:	20 e0       	ldi	r18, 0x00	; 0
     820:	30 e0       	ldi	r19, 0x00	; 0
     822:	40 e8       	ldi	r20, 0x80	; 128
     824:	5d e3       	ldi	r21, 0x3D	; 61
     826:	0e 94 b9 1a 	call	0x3572	; 0x3572 <__mulsf3>
     82a:	f8 01       	movw	r30, r16
     82c:	60 87       	std	Z+8, r22	; 0x08
     82e:	71 87       	std	Z+9, r23	; 0x09
     830:	82 87       	std	Z+10, r24	; 0x0a
     832:	93 87       	std	Z+11, r25	; 0x0b
    break;
     834:	03 c1       	rjmp	.+518    	; 0xa3c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_GYROSCOPE:
    /* 1dps = 16 LSB */
    xyz[0] = ((double)x) / 16.0;
     836:	07 2e       	mov	r0, r23
     838:	00 0c       	add	r0, r0
     83a:	88 0b       	sbc	r24, r24
     83c:	99 0b       	sbc	r25, r25
     83e:	0e 94 2d 1a 	call	0x345a	; 0x345a <__floatsisf>
     842:	20 e0       	ldi	r18, 0x00	; 0
     844:	30 e0       	ldi	r19, 0x00	; 0
     846:	40 e8       	ldi	r20, 0x80	; 128
     848:	5d e3       	ldi	r21, 0x3D	; 61
     84a:	0e 94 b9 1a 	call	0x3572	; 0x3572 <__mulsf3>
     84e:	f8 01       	movw	r30, r16
     850:	60 83       	st	Z, r22
     852:	71 83       	std	Z+1, r23	; 0x01
     854:	82 83       	std	Z+2, r24	; 0x02
     856:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 16.0;
     858:	b6 01       	movw	r22, r12
     85a:	dd 0c       	add	r13, r13
     85c:	88 0b       	sbc	r24, r24
     85e:	99 0b       	sbc	r25, r25
     860:	0e 94 2d 1a 	call	0x345a	; 0x345a <__floatsisf>
     864:	20 e0       	ldi	r18, 0x00	; 0
     866:	30 e0       	ldi	r19, 0x00	; 0
     868:	40 e8       	ldi	r20, 0x80	; 128
     86a:	5d e3       	ldi	r21, 0x3D	; 61
     86c:	0e 94 b9 1a 	call	0x3572	; 0x3572 <__mulsf3>
     870:	f8 01       	movw	r30, r16
     872:	64 83       	std	Z+4, r22	; 0x04
     874:	75 83       	std	Z+5, r23	; 0x05
     876:	86 83       	std	Z+6, r24	; 0x06
     878:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 16.0;
     87a:	b5 01       	movw	r22, r10
     87c:	bb 0c       	add	r11, r11
     87e:	88 0b       	sbc	r24, r24
     880:	99 0b       	sbc	r25, r25
     882:	0e 94 2d 1a 	call	0x345a	; 0x345a <__floatsisf>
     886:	20 e0       	ldi	r18, 0x00	; 0
     888:	30 e0       	ldi	r19, 0x00	; 0
     88a:	40 e8       	ldi	r20, 0x80	; 128
     88c:	5d e3       	ldi	r21, 0x3D	; 61
     88e:	0e 94 b9 1a 	call	0x3572	; 0x3572 <__mulsf3>
     892:	f8 01       	movw	r30, r16
     894:	60 87       	std	Z+8, r22	; 0x08
     896:	71 87       	std	Z+9, r23	; 0x09
     898:	82 87       	std	Z+10, r24	; 0x0a
     89a:	93 87       	std	Z+11, r25	; 0x0b
    break;
     89c:	cf c0       	rjmp	.+414    	; 0xa3c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_EULER:
    /* 1 degree = 16 LSB */
    xyz[0] = ((double)x) / 16.0;
     89e:	07 2e       	mov	r0, r23
     8a0:	00 0c       	add	r0, r0
     8a2:	88 0b       	sbc	r24, r24
     8a4:	99 0b       	sbc	r25, r25
     8a6:	0e 94 2d 1a 	call	0x345a	; 0x345a <__floatsisf>
     8aa:	20 e0       	ldi	r18, 0x00	; 0
     8ac:	30 e0       	ldi	r19, 0x00	; 0
     8ae:	40 e8       	ldi	r20, 0x80	; 128
     8b0:	5d e3       	ldi	r21, 0x3D	; 61
     8b2:	0e 94 b9 1a 	call	0x3572	; 0x3572 <__mulsf3>
     8b6:	f8 01       	movw	r30, r16
     8b8:	60 83       	st	Z, r22
     8ba:	71 83       	std	Z+1, r23	; 0x01
     8bc:	82 83       	std	Z+2, r24	; 0x02
     8be:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 16.0;
     8c0:	b6 01       	movw	r22, r12
     8c2:	dd 0c       	add	r13, r13
     8c4:	88 0b       	sbc	r24, r24
     8c6:	99 0b       	sbc	r25, r25
     8c8:	0e 94 2d 1a 	call	0x345a	; 0x345a <__floatsisf>
     8cc:	20 e0       	ldi	r18, 0x00	; 0
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	40 e8       	ldi	r20, 0x80	; 128
     8d2:	5d e3       	ldi	r21, 0x3D	; 61
     8d4:	0e 94 b9 1a 	call	0x3572	; 0x3572 <__mulsf3>
     8d8:	f8 01       	movw	r30, r16
     8da:	64 83       	std	Z+4, r22	; 0x04
     8dc:	75 83       	std	Z+5, r23	; 0x05
     8de:	86 83       	std	Z+6, r24	; 0x06
     8e0:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 16.0;
     8e2:	b5 01       	movw	r22, r10
     8e4:	bb 0c       	add	r11, r11
     8e6:	88 0b       	sbc	r24, r24
     8e8:	99 0b       	sbc	r25, r25
     8ea:	0e 94 2d 1a 	call	0x345a	; 0x345a <__floatsisf>
     8ee:	20 e0       	ldi	r18, 0x00	; 0
     8f0:	30 e0       	ldi	r19, 0x00	; 0
     8f2:	40 e8       	ldi	r20, 0x80	; 128
     8f4:	5d e3       	ldi	r21, 0x3D	; 61
     8f6:	0e 94 b9 1a 	call	0x3572	; 0x3572 <__mulsf3>
     8fa:	f8 01       	movw	r30, r16
     8fc:	60 87       	std	Z+8, r22	; 0x08
     8fe:	71 87       	std	Z+9, r23	; 0x09
     900:	82 87       	std	Z+10, r24	; 0x0a
     902:	93 87       	std	Z+11, r25	; 0x0b
    break;
     904:	9b c0       	rjmp	.+310    	; 0xa3c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_ACCELEROMETER:
    /* 1m/s^2 = 100 LSB */
    xyz[0] = ((double)x) / 100.0;
     906:	07 2e       	mov	r0, r23
     908:	00 0c       	add	r0, r0
     90a:	88 0b       	sbc	r24, r24
     90c:	99 0b       	sbc	r25, r25
     90e:	0e 94 2d 1a 	call	0x345a	; 0x345a <__floatsisf>
     912:	20 e0       	ldi	r18, 0x00	; 0
     914:	30 e0       	ldi	r19, 0x00	; 0
     916:	48 ec       	ldi	r20, 0xC8	; 200
     918:	52 e4       	ldi	r21, 0x42	; 66
     91a:	0e 94 c3 19 	call	0x3386	; 0x3386 <__divsf3>
     91e:	f8 01       	movw	r30, r16
     920:	60 83       	st	Z, r22
     922:	71 83       	std	Z+1, r23	; 0x01
     924:	82 83       	std	Z+2, r24	; 0x02
     926:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 100.0;
     928:	b6 01       	movw	r22, r12
     92a:	dd 0c       	add	r13, r13
     92c:	88 0b       	sbc	r24, r24
     92e:	99 0b       	sbc	r25, r25
     930:	0e 94 2d 1a 	call	0x345a	; 0x345a <__floatsisf>
     934:	20 e0       	ldi	r18, 0x00	; 0
     936:	30 e0       	ldi	r19, 0x00	; 0
     938:	48 ec       	ldi	r20, 0xC8	; 200
     93a:	52 e4       	ldi	r21, 0x42	; 66
     93c:	0e 94 c3 19 	call	0x3386	; 0x3386 <__divsf3>
     940:	f8 01       	movw	r30, r16
     942:	64 83       	std	Z+4, r22	; 0x04
     944:	75 83       	std	Z+5, r23	; 0x05
     946:	86 83       	std	Z+6, r24	; 0x06
     948:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 100.0;
     94a:	b5 01       	movw	r22, r10
     94c:	bb 0c       	add	r11, r11
     94e:	88 0b       	sbc	r24, r24
     950:	99 0b       	sbc	r25, r25
     952:	0e 94 2d 1a 	call	0x345a	; 0x345a <__floatsisf>
     956:	20 e0       	ldi	r18, 0x00	; 0
     958:	30 e0       	ldi	r19, 0x00	; 0
     95a:	48 ec       	ldi	r20, 0xC8	; 200
     95c:	52 e4       	ldi	r21, 0x42	; 66
     95e:	0e 94 c3 19 	call	0x3386	; 0x3386 <__divsf3>
     962:	f8 01       	movw	r30, r16
     964:	60 87       	std	Z+8, r22	; 0x08
     966:	71 87       	std	Z+9, r23	; 0x09
     968:	82 87       	std	Z+10, r24	; 0x0a
     96a:	93 87       	std	Z+11, r25	; 0x0b
    break;
     96c:	67 c0       	rjmp	.+206    	; 0xa3c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_LINEARACCEL:
    /* 1m/s^2 = 100 LSB */
    xyz[0] = ((double)x) / 100.0;
     96e:	07 2e       	mov	r0, r23
     970:	00 0c       	add	r0, r0
     972:	88 0b       	sbc	r24, r24
     974:	99 0b       	sbc	r25, r25
     976:	0e 94 2d 1a 	call	0x345a	; 0x345a <__floatsisf>
     97a:	20 e0       	ldi	r18, 0x00	; 0
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	48 ec       	ldi	r20, 0xC8	; 200
     980:	52 e4       	ldi	r21, 0x42	; 66
     982:	0e 94 c3 19 	call	0x3386	; 0x3386 <__divsf3>
     986:	f8 01       	movw	r30, r16
     988:	60 83       	st	Z, r22
     98a:	71 83       	std	Z+1, r23	; 0x01
     98c:	82 83       	std	Z+2, r24	; 0x02
     98e:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 100.0;
     990:	b6 01       	movw	r22, r12
     992:	dd 0c       	add	r13, r13
     994:	88 0b       	sbc	r24, r24
     996:	99 0b       	sbc	r25, r25
     998:	0e 94 2d 1a 	call	0x345a	; 0x345a <__floatsisf>
     99c:	20 e0       	ldi	r18, 0x00	; 0
     99e:	30 e0       	ldi	r19, 0x00	; 0
     9a0:	48 ec       	ldi	r20, 0xC8	; 200
     9a2:	52 e4       	ldi	r21, 0x42	; 66
     9a4:	0e 94 c3 19 	call	0x3386	; 0x3386 <__divsf3>
     9a8:	f8 01       	movw	r30, r16
     9aa:	64 83       	std	Z+4, r22	; 0x04
     9ac:	75 83       	std	Z+5, r23	; 0x05
     9ae:	86 83       	std	Z+6, r24	; 0x06
     9b0:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 100.0;
     9b2:	b5 01       	movw	r22, r10
     9b4:	bb 0c       	add	r11, r11
     9b6:	88 0b       	sbc	r24, r24
     9b8:	99 0b       	sbc	r25, r25
     9ba:	0e 94 2d 1a 	call	0x345a	; 0x345a <__floatsisf>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	48 ec       	ldi	r20, 0xC8	; 200
     9c4:	52 e4       	ldi	r21, 0x42	; 66
     9c6:	0e 94 c3 19 	call	0x3386	; 0x3386 <__divsf3>
     9ca:	f8 01       	movw	r30, r16
     9cc:	60 87       	std	Z+8, r22	; 0x08
     9ce:	71 87       	std	Z+9, r23	; 0x09
     9d0:	82 87       	std	Z+10, r24	; 0x0a
     9d2:	93 87       	std	Z+11, r25	; 0x0b
    break;
     9d4:	33 c0       	rjmp	.+102    	; 0xa3c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_GRAVITY:
    /* 1m/s^2 = 100 LSB */
    xyz[0] = ((double)x) / 100.0;
     9d6:	07 2e       	mov	r0, r23
     9d8:	00 0c       	add	r0, r0
     9da:	88 0b       	sbc	r24, r24
     9dc:	99 0b       	sbc	r25, r25
     9de:	0e 94 2d 1a 	call	0x345a	; 0x345a <__floatsisf>
     9e2:	20 e0       	ldi	r18, 0x00	; 0
     9e4:	30 e0       	ldi	r19, 0x00	; 0
     9e6:	48 ec       	ldi	r20, 0xC8	; 200
     9e8:	52 e4       	ldi	r21, 0x42	; 66
     9ea:	0e 94 c3 19 	call	0x3386	; 0x3386 <__divsf3>
     9ee:	f8 01       	movw	r30, r16
     9f0:	60 83       	st	Z, r22
     9f2:	71 83       	std	Z+1, r23	; 0x01
     9f4:	82 83       	std	Z+2, r24	; 0x02
     9f6:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 100.0;
     9f8:	b6 01       	movw	r22, r12
     9fa:	dd 0c       	add	r13, r13
     9fc:	88 0b       	sbc	r24, r24
     9fe:	99 0b       	sbc	r25, r25
     a00:	0e 94 2d 1a 	call	0x345a	; 0x345a <__floatsisf>
     a04:	20 e0       	ldi	r18, 0x00	; 0
     a06:	30 e0       	ldi	r19, 0x00	; 0
     a08:	48 ec       	ldi	r20, 0xC8	; 200
     a0a:	52 e4       	ldi	r21, 0x42	; 66
     a0c:	0e 94 c3 19 	call	0x3386	; 0x3386 <__divsf3>
     a10:	f8 01       	movw	r30, r16
     a12:	64 83       	std	Z+4, r22	; 0x04
     a14:	75 83       	std	Z+5, r23	; 0x05
     a16:	86 83       	std	Z+6, r24	; 0x06
     a18:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 100.0;
     a1a:	b5 01       	movw	r22, r10
     a1c:	bb 0c       	add	r11, r11
     a1e:	88 0b       	sbc	r24, r24
     a20:	99 0b       	sbc	r25, r25
     a22:	0e 94 2d 1a 	call	0x345a	; 0x345a <__floatsisf>
     a26:	20 e0       	ldi	r18, 0x00	; 0
     a28:	30 e0       	ldi	r19, 0x00	; 0
     a2a:	48 ec       	ldi	r20, 0xC8	; 200
     a2c:	52 e4       	ldi	r21, 0x42	; 66
     a2e:	0e 94 c3 19 	call	0x3386	; 0x3386 <__divsf3>
     a32:	f8 01       	movw	r30, r16
     a34:	60 87       	std	Z+8, r22	; 0x08
     a36:	71 87       	std	Z+9, r23	; 0x09
     a38:	82 87       	std	Z+10, r24	; 0x0a
     a3a:	93 87       	std	Z+11, r25	; 0x0b
    break;
  }

  return xyz;
}
     a3c:	c8 01       	movw	r24, r16
     a3e:	26 96       	adiw	r28, 0x06	; 6
     a40:	0f b6       	in	r0, 0x3f	; 63
     a42:	f8 94       	cli
     a44:	de bf       	out	0x3e, r29	; 62
     a46:	0f be       	out	0x3f, r0	; 63
     a48:	cd bf       	out	0x3d, r28	; 61
     a4a:	df 91       	pop	r29
     a4c:	cf 91       	pop	r28
     a4e:	1f 91       	pop	r17
     a50:	0f 91       	pop	r16
     a52:	ff 90       	pop	r15
     a54:	df 90       	pop	r13
     a56:	cf 90       	pop	r12
     a58:	bf 90       	pop	r11
     a5a:	af 90       	pop	r10
     a5c:	08 95       	ret

00000a5e <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>:
/*!
 *  @brief  Reads the sensor and returns the data as a sensors_event_t
 *  @param  event
 *  @return always returns true
 */
bool Adafruit_BNO055::getEvent(sensors_event_t *event) {
     a5e:	0f 93       	push	r16
     a60:	1f 93       	push	r17
     a62:	cf 93       	push	r28
     a64:	df 93       	push	r29
     a66:	cd b7       	in	r28, 0x3d	; 61
     a68:	de b7       	in	r29, 0x3e	; 62
     a6a:	2c 97       	sbiw	r28, 0x0c	; 12
     a6c:	0f b6       	in	r0, 0x3f	; 63
     a6e:	f8 94       	cli
     a70:	de bf       	out	0x3e, r29	; 62
     a72:	0f be       	out	0x3f, r0	; 63
     a74:	cd bf       	out	0x3d, r28	; 61
     a76:	8b 01       	movw	r16, r22
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
     a78:	20 e2       	ldi	r18, 0x20	; 32
     a7a:	fb 01       	movw	r30, r22
     a7c:	11 92       	st	Z+, r1
     a7e:	2a 95       	dec	r18
     a80:	e9 f7       	brne	.-6      	; 0xa7c <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t+0x1e>

  event->version = sizeof(sensors_event_t);
     a82:	40 e2       	ldi	r20, 0x20	; 32
     a84:	50 e0       	ldi	r21, 0x00	; 0
     a86:	60 e0       	ldi	r22, 0x00	; 0
     a88:	70 e0       	ldi	r23, 0x00	; 0
     a8a:	f8 01       	movw	r30, r16
     a8c:	40 83       	st	Z, r20
     a8e:	51 83       	std	Z+1, r21	; 0x01
     a90:	62 83       	std	Z+2, r22	; 0x02
     a92:	73 83       	std	Z+3, r23	; 0x03
  event->sensor_id = _sensorID;
     a94:	fc 01       	movw	r30, r24
     a96:	46 81       	ldd	r20, Z+6	; 0x06
     a98:	57 81       	ldd	r21, Z+7	; 0x07
     a9a:	60 85       	ldd	r22, Z+8	; 0x08
     a9c:	71 85       	ldd	r23, Z+9	; 0x09
     a9e:	f8 01       	movw	r30, r16
     aa0:	44 83       	std	Z+4, r20	; 0x04
     aa2:	55 83       	std	Z+5, r21	; 0x05
     aa4:	66 83       	std	Z+6, r22	; 0x06
     aa6:	77 83       	std	Z+7, r23	; 0x07
  event->type = SENSOR_TYPE_ORIENTATION;
     aa8:	43 e0       	ldi	r20, 0x03	; 3
     aaa:	50 e0       	ldi	r21, 0x00	; 0
     aac:	60 e0       	ldi	r22, 0x00	; 0
     aae:	70 e0       	ldi	r23, 0x00	; 0
     ab0:	40 87       	std	Z+8, r20	; 0x08
     ab2:	51 87       	std	Z+9, r21	; 0x09
     ab4:	62 87       	std	Z+10, r22	; 0x0a
     ab6:	73 87       	std	Z+11, r23	; 0x0b
  //event->timestamp = millis();

  /* Get a Euler angle sample for orientation */
  AdafruitImu::Vector<3> euler = getVector(Adafruit_BNO055::VECTOR_EULER);
     ab8:	4a e1       	ldi	r20, 0x1A	; 26
     aba:	bc 01       	movw	r22, r24
     abc:	ce 01       	movw	r24, r28
     abe:	01 96       	adiw	r24, 0x01	; 1
     ac0:	38 de       	rcall	.-912    	; 0x732 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
  event->orientation.x = euler.x();
     ac2:	89 81       	ldd	r24, Y+1	; 0x01
     ac4:	9a 81       	ldd	r25, Y+2	; 0x02
     ac6:	ab 81       	ldd	r26, Y+3	; 0x03
     ac8:	bc 81       	ldd	r27, Y+4	; 0x04
     aca:	f8 01       	movw	r30, r16
     acc:	80 8b       	std	Z+16, r24	; 0x10
     ace:	91 8b       	std	Z+17, r25	; 0x11
     ad0:	a2 8b       	std	Z+18, r26	; 0x12
     ad2:	b3 8b       	std	Z+19, r27	; 0x13
  event->orientation.y = euler.y();
     ad4:	8d 81       	ldd	r24, Y+5	; 0x05
     ad6:	9e 81       	ldd	r25, Y+6	; 0x06
     ad8:	af 81       	ldd	r26, Y+7	; 0x07
     ada:	b8 85       	ldd	r27, Y+8	; 0x08
     adc:	84 8b       	std	Z+20, r24	; 0x14
     ade:	95 8b       	std	Z+21, r25	; 0x15
     ae0:	a6 8b       	std	Z+22, r26	; 0x16
     ae2:	b7 8b       	std	Z+23, r27	; 0x17
  event->orientation.z = euler.z();
     ae4:	89 85       	ldd	r24, Y+9	; 0x09
     ae6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ae8:	ab 85       	ldd	r26, Y+11	; 0x0b
     aea:	bc 85       	ldd	r27, Y+12	; 0x0c
     aec:	80 8f       	std	Z+24, r24	; 0x18
     aee:	91 8f       	std	Z+25, r25	; 0x19
     af0:	a2 8f       	std	Z+26, r26	; 0x1a
     af2:	b3 8f       	std	Z+27, r27	; 0x1b

  return true;
}
     af4:	81 e0       	ldi	r24, 0x01	; 1
     af6:	2c 96       	adiw	r28, 0x0c	; 12
     af8:	0f b6       	in	r0, 0x3f	; 63
     afa:	f8 94       	cli
     afc:	de bf       	out	0x3e, r29	; 62
     afe:	0f be       	out	0x3f, r0	; 63
     b00:	cd bf       	out	0x3d, r28	; 61
     b02:	df 91       	pop	r29
     b04:	cf 91       	pop	r28
     b06:	1f 91       	pop	r17
     b08:	0f 91       	pop	r16
     b0a:	08 95       	ret

00000b0c <_Z14RunPingCommandPKhh>:
#include <stddef.h>

uint8_t* const SendDataBuffer = (uint8_t*)(&EtherComm::buffer[2]);

void RunPingCommand(const uint8_t* data, uint8_t len){
  if(len == 1){
     b0c:	61 30       	cpi	r22, 0x01	; 1
     b0e:	49 f4       	brne	.+18     	; 0xb22 <_Z14RunPingCommandPKhh+0x16>
     b10:	fc 01       	movw	r30, r24
    SendDataBuffer[0] = data[0];
     b12:	80 81       	ld	r24, Z
     b14:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <__data_end>
     b18:	f0 91 f7 02 	lds	r31, 0x02F7	; 0x8002f7 <__data_end+0x1>
     b1c:	80 83       	st	Z, r24
    EtherComm::SendCommand(CMD_Ping, 1);
     b1e:	80 e0       	ldi	r24, 0x00	; 0
     b20:	d9 c6       	rjmp	.+3506   	; 0x18d4 <_ZN9EtherComm11SendCommandEhh>
     b22:	08 95       	ret

00000b24 <_Z14RunEchoCommandPKhh>:
  }
}

void RunEchoCommand(const uint8_t* data, uint8_t len){
  uint8_t* index = SendDataBuffer;
     b24:	40 91 f6 02 	lds	r20, 0x02F6	; 0x8002f6 <__data_end>
     b28:	30 91 f7 02 	lds	r19, 0x02F7	; 0x8002f7 <__data_end+0x1>
  uint8_t dataLen = len;
  while(len-- > 0){
     b2c:	2f ef       	ldi	r18, 0xFF	; 255
     b2e:	26 0f       	add	r18, r22
     b30:	66 23       	and	r22, r22
     b32:	41 f0       	breq	.+16     	; 0xb44 <_Z14RunEchoCommandPKhh+0x20>
     b34:	a8 2f       	mov	r26, r24
     b36:	b9 2f       	mov	r27, r25
     b38:	e4 2f       	mov	r30, r20
     b3a:	f3 2f       	mov	r31, r19
    *(index++) = *(data++);
     b3c:	8d 91       	ld	r24, X+
     b3e:	81 93       	st	Z+, r24
}

void RunEchoCommand(const uint8_t* data, uint8_t len){
  uint8_t* index = SendDataBuffer;
  uint8_t dataLen = len;
  while(len-- > 0){
     b40:	21 50       	subi	r18, 0x01	; 1
     b42:	e0 f7       	brcc	.-8      	; 0xb3c <_Z14RunEchoCommandPKhh+0x18>
    *(index++) = *(data++);
  }
  
  EtherComm::SendCommand(CMD_Echo, dataLen);
     b44:	81 e0       	ldi	r24, 0x01	; 1
     b46:	c6 c6       	rjmp	.+3468   	; 0x18d4 <_ZN9EtherComm11SendCommandEhh>
     b48:	08 95       	ret

00000b4a <_Z13RunLedCommandPKhh>:
}

void RunLedCommand(const uint8_t* data, uint8_t len){
	if(len == 1){
     b4a:	61 30       	cpi	r22, 0x01	; 1
     b4c:	51 f4       	brne	.+20     	; 0xb62 <_Z13RunLedCommandPKhh+0x18>
		uint8_t state = *data;
     b4e:	fc 01       	movw	r30, r24
     b50:	90 81       	ld	r25, Z
		if(state <= 1){
     b52:	92 30       	cpi	r25, 0x02	; 2
     b54:	30 f4       	brcc	.+12     	; 0xb62 <_Z13RunLedCommandPKhh+0x18>
			rov.SetLed(state > 0);
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	91 11       	cpse	r25, r1
     b5a:	01 c0       	rjmp	.+2      	; 0xb5e <_Z13RunLedCommandPKhh+0x14>
     b5c:	80 e0       	ldi	r24, 0x00	; 0
     b5e:	0c 94 23 14 	jmp	0x2846	; 0x2846 <_ZN5Robot6SetLedEb>
     b62:	08 95       	ret

00000b64 <_Z22RunUpdateDeviceCommandPKhh>:
		}
	}
}

void RunUpdateDeviceCommand(const uint8_t* data, uint8_t len){
	if(len > 0){
     b64:	66 23       	and	r22, r22
     b66:	c1 f0       	breq	.+48     	; 0xb98 <_Z22RunUpdateDeviceCommandPKhh+0x34>
		if(Robot::devices[data[0]] != NULL){
     b68:	dc 01       	movw	r26, r24
     b6a:	ec 91       	ld	r30, X
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	ee 0f       	add	r30, r30
     b70:	ff 1f       	adc	r31, r31
     b72:	e2 50       	subi	r30, 0x02	; 2
     b74:	f9 4f       	sbci	r31, 0xF9	; 249
     b76:	a0 81       	ld	r26, Z
     b78:	b1 81       	ldd	r27, Z+1	; 0x01
     b7a:	10 97       	sbiw	r26, 0x00	; 0
     b7c:	69 f0       	breq	.+26     	; 0xb98 <_Z22RunUpdateDeviceCommandPKhh+0x34>
     b7e:	46 2f       	mov	r20, r22
     b80:	bc 01       	movw	r22, r24
			Robot::devices[data[0]]->Update(data + 1, len - 1);
     b82:	41 50       	subi	r20, 0x01	; 1
     b84:	6f 5f       	subi	r22, 0xFF	; 255
     b86:	7f 4f       	sbci	r23, 0xFF	; 255
     b88:	ed 91       	ld	r30, X+
     b8a:	fc 91       	ld	r31, X
     b8c:	11 97       	sbiw	r26, 0x01	; 1
     b8e:	01 90       	ld	r0, Z+
     b90:	f0 81       	ld	r31, Z
     b92:	e0 2d       	mov	r30, r0
     b94:	cd 01       	movw	r24, r26
     b96:	19 95       	eicall
     b98:	08 95       	ret

00000b9a <_ZN9EtherComm15CommandReceivedEhPKhh>:
		}
	}
}

void EtherComm::CommandReceived(uint8_t command, const uint8_t* data, uint8_t len){
     b9a:	9b 01       	movw	r18, r22
  switch(command){
     b9c:	81 30       	cpi	r24, 0x01	; 1
     b9e:	51 f0       	breq	.+20     	; 0xbb4 <_ZN9EtherComm15CommandReceivedEhPKhh+0x1a>
     ba0:	28 f0       	brcs	.+10     	; 0xbac <_ZN9EtherComm15CommandReceivedEhPKhh+0x12>
     ba2:	82 30       	cpi	r24, 0x02	; 2
     ba4:	59 f0       	breq	.+22     	; 0xbbc <_ZN9EtherComm15CommandReceivedEhPKhh+0x22>
     ba6:	83 30       	cpi	r24, 0x03	; 3
     ba8:	69 f0       	breq	.+26     	; 0xbc4 <_ZN9EtherComm15CommandReceivedEhPKhh+0x2a>
     baa:	08 95       	ret
    case CMD_Ping: RunPingCommand(data, len); break;
     bac:	64 2f       	mov	r22, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	ad cf       	rjmp	.-166    	; 0xb0c <_Z14RunPingCommandPKhh>
     bb2:	08 95       	ret
    case CMD_Echo: RunEchoCommand(data, len); break;
     bb4:	64 2f       	mov	r22, r20
     bb6:	c9 01       	movw	r24, r18
     bb8:	b5 cf       	rjmp	.-150    	; 0xb24 <_Z14RunEchoCommandPKhh>
     bba:	08 95       	ret
	case CMD_Led: RunLedCommand(data, len); break;
     bbc:	64 2f       	mov	r22, r20
     bbe:	c9 01       	movw	r24, r18
     bc0:	c4 cf       	rjmp	.-120    	; 0xb4a <_Z13RunLedCommandPKhh>
     bc2:	08 95       	ret
	case CMD_UpdateDevice: RunUpdateDeviceCommand(data, len); break;
     bc4:	64 2f       	mov	r22, r20
     bc6:	c9 01       	movw	r24, r18
     bc8:	cd cf       	rjmp	.-102    	; 0xb64 <_Z22RunUpdateDeviceCommandPKhh>
     bca:	08 95       	ret

00000bcc <_GLOBAL__sub_I__Z14RunPingCommandPKhh>:
     bcc:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
#include "EtherComm.h"
#include "Robot.h"
#include "Commands.h"
#include <stddef.h>

uint8_t* const SendDataBuffer = (uint8_t*)(&EtherComm::buffer[2]);
     bd0:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
     bd4:	02 96       	adiw	r24, 0x02	; 2
     bd6:	90 93 f7 02 	sts	0x02F7, r25	; 0x8002f7 <__data_end+0x1>
     bda:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <__data_end>
     bde:	08 95       	ret

00000be0 <_ZL10enableChipv>:
static Register* selectPort;
static uint8_t selectPin;

static void enableChip () {
	//cli();
	SetLow(*selectPort, selectPin); //digitalWrite(selectPin, LOW);
     be0:	e0 91 fc 02 	lds	r30, 0x02FC	; 0x8002fc <_ZL10selectPort>
     be4:	f0 91 fd 02 	lds	r31, 0x02FD	; 0x8002fd <_ZL10selectPort+0x1>
     be8:	90 81       	ld	r25, Z
     bea:	80 91 fb 02 	lds	r24, 0x02FB	; 0x8002fb <_ZL9selectPin>
     bee:	80 95       	com	r24
     bf0:	89 23       	and	r24, r25
     bf2:	80 83       	st	Z, r24
     bf4:	08 95       	ret

00000bf6 <_ZL11disableChipv>:
}

static void disableChip () {
	SetHigh(*selectPort, selectPin); //digitalWrite(selectPin, HIGH);
     bf6:	e0 91 fc 02 	lds	r30, 0x02FC	; 0x8002fc <_ZL10selectPort>
     bfa:	f0 91 fd 02 	lds	r31, 0x02FD	; 0x8002fd <_ZL10selectPort+0x1>
     bfe:	90 81       	ld	r25, Z
     c00:	80 91 fb 02 	lds	r24, 0x02FB	; 0x8002fb <_ZL9selectPin>
     c04:	89 2b       	or	r24, r25
     c06:	80 83       	st	Z, r24
     c08:	08 95       	ret

00000c0a <_ZL6readOphh>:

	SetOutput(csDDR, selectPin);
	disableChip();
}

static uint8_t readOp (uint8_t op, uint8_t address) {
     c0a:	cf 93       	push	r28
     c0c:	df 93       	push	r29
     c0e:	d8 2f       	mov	r29, r24
     c10:	c6 2f       	mov	r28, r22
    enableChip();
     c12:	e6 df       	rcall	.-52     	; 0xbe0 <_ZL10enableChipv>
    SPI.write8(op | (address & ADDR_MASK));
     c14:	8c 2f       	mov	r24, r28
     c16:	cf 71       	andi	r28, 0x1F	; 31
     c18:	cd 2b       	or	r28, r29
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     c1a:	ce bd       	out	0x2e, r28	; 46
		asm volatile("nop");
     c1c:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     c1e:	0d b4       	in	r0, 0x2d	; 45
     c20:	07 fe       	sbrs	r0, 7
     c22:	fd cf       	rjmp	.-6      	; 0xc1e <_ZL6readOphh+0x14>
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     c24:	1e bc       	out	0x2e, r1	; 46
		asm volatile("nop");
     c26:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     c28:	0d b4       	in	r0, 0x2d	; 45
     c2a:	07 fe       	sbrs	r0, 7
     c2c:	fd cf       	rjmp	.-6      	; 0xc28 <_ZL6readOphh+0x1e>
	}

	//write8, excepts also returns the received byte
	static uint8_t read_write8(uint8_t data){
		write8(data);
		return SPDR;
     c2e:	ce b5       	in	r28, 0x2e	; 46
    uint8_t result = SPI.read_write8(0x00);
    if (address & 0x80)
     c30:	88 23       	and	r24, r24
     c32:	34 f4       	brge	.+12     	; 0xc40 <_ZL6readOphh+0x36>
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     c34:	1e bc       	out	0x2e, r1	; 46
		asm volatile("nop");
     c36:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     c38:	0d b4       	in	r0, 0x2d	; 45
     c3a:	07 fe       	sbrs	r0, 7
     c3c:	fd cf       	rjmp	.-6      	; 0xc38 <_ZL6readOphh+0x2e>
        result = SPI.read_write8(0x00);
    disableChip();
     c3e:	ce b5       	in	r28, 0x2e	; 46
     c40:	da df       	rcall	.-76     	; 0xbf6 <_ZL11disableChipv>
    return result;
}
     c42:	8c 2f       	mov	r24, r28
     c44:	df 91       	pop	r29
     c46:	cf 91       	pop	r28
     c48:	08 95       	ret

00000c4a <_ZL7writeOphhh>:

static void writeOp (uint8_t op, uint8_t address, uint8_t data) {
     c4a:	1f 93       	push	r17
     c4c:	cf 93       	push	r28
     c4e:	df 93       	push	r29
     c50:	c8 2f       	mov	r28, r24
     c52:	d6 2f       	mov	r29, r22
     c54:	14 2f       	mov	r17, r20
    enableChip();
     c56:	c4 df       	rcall	.-120    	; 0xbe0 <_ZL10enableChipv>
    SPI.write8(op | (address & ADDR_MASK));
     c58:	df 71       	andi	r29, 0x1F	; 31
     c5a:	cd 2b       	or	r28, r29
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     c5c:	ce bd       	out	0x2e, r28	; 46
		asm volatile("nop");
     c5e:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     c60:	0d b4       	in	r0, 0x2d	; 45
     c62:	07 fe       	sbrs	r0, 7
     c64:	fd cf       	rjmp	.-6      	; 0xc60 <_ZL7writeOphhh+0x16>
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     c66:	1e bd       	out	0x2e, r17	; 46
		asm volatile("nop");
     c68:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     c6a:	0d b4       	in	r0, 0x2d	; 45
     c6c:	07 fe       	sbrs	r0, 7
    SPI.write8(data);
    disableChip();
     c6e:	fd cf       	rjmp	.-6      	; 0xc6a <_ZL7writeOphhh+0x20>
     c70:	c2 df       	rcall	.-124    	; 0xbf6 <_ZL11disableChipv>
}
     c72:	df 91       	pop	r29
     c74:	cf 91       	pop	r28
     c76:	1f 91       	pop	r17
     c78:	08 95       	ret

00000c7a <_ZL7readBufjPh>:

static void readBuf(uint16_t len, uint8_t* data) {
     c7a:	0f 93       	push	r16
     c7c:	1f 93       	push	r17
     c7e:	cf 93       	push	r28
     c80:	df 93       	push	r29
     c82:	ec 01       	movw	r28, r24
     c84:	8b 01       	movw	r16, r22
    enableChip();
     c86:	ac df       	rcall	.-168    	; 0xbe0 <_ZL10enableChipv>
    if (len != 0) {
     c88:	20 97       	sbiw	r28, 0x00	; 0
     c8a:	99 f0       	breq	.+38     	; 0xcb2 <_ZL7readBufjPh+0x38>
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     c8c:	8a e3       	ldi	r24, 0x3A	; 58
     c8e:	8e bd       	out	0x2e, r24	; 46
		asm volatile("nop");
     c90:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     c92:	0d b4       	in	r0, 0x2d	; 45
     c94:	07 fe       	sbrs	r0, 7
     c96:	fd cf       	rjmp	.-6      	; 0xc92 <_ZL7readBufjPh+0x18>
     c98:	f8 01       	movw	r30, r16
     c9a:	b8 01       	movw	r22, r16
     c9c:	6c 0f       	add	r22, r28
     c9e:	7d 1f       	adc	r23, r29
	static void read(void *buf, uint16_t nbyte, uint8_t dataSend = 0){
		if(nbyte == 0) return;
		
		uint8_t* buff = (uint8_t*)buf;
		while(nbyte--){
			SPDR = dataSend;
     ca0:	1e bc       	out	0x2e, r1	; 46
			//asm volatile("nop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\n");
			while(!(SPSR & _BV(SPIF)));
     ca2:	0d b4       	in	r0, 0x2d	; 45
     ca4:	07 fe       	sbrs	r0, 7
     ca6:	fd cf       	rjmp	.-6      	; 0xca2 <_ZL7readBufjPh+0x28>
			*buff++ = SPDR;
     ca8:	9e b5       	in	r25, 0x2e	; 46
     caa:	91 93       	st	Z+, r25
		
	static void read(void *buf, uint16_t nbyte, uint8_t dataSend = 0){
		if(nbyte == 0) return;
		
		uint8_t* buff = (uint8_t*)buf;
		while(nbyte--){
     cac:	6e 17       	cp	r22, r30
     cae:	7f 07       	cpc	r23, r31
        SPI.write8(ENC28J60_READ_BUF_MEM);
		SPI.read(data, len);
    }
    disableChip();
     cb0:	b9 f7       	brne	.-18     	; 0xca0 <_ZL7readBufjPh+0x26>
     cb2:	a1 df       	rcall	.-190    	; 0xbf6 <_ZL11disableChipv>
}
     cb4:	df 91       	pop	r29
     cb6:	cf 91       	pop	r28
     cb8:	1f 91       	pop	r17
     cba:	0f 91       	pop	r16
     cbc:	08 95       	ret

00000cbe <_ZL7SetBankh>:
        SPI.write(data, len);
    }
    disableChip();
}

static void SetBank (uint8_t address) {
     cbe:	1f 93       	push	r17
     cc0:	cf 93       	push	r28
     cc2:	df 93       	push	r29
     cc4:	18 2f       	mov	r17, r24
     cc6:	10 76       	andi	r17, 0x60	; 96
    if ((address & BANK_MASK) != Enc28j60Bank) {
     cc8:	c1 2f       	mov	r28, r17
     cca:	d0 e0       	ldi	r29, 0x00	; 0
     ccc:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <_ZL12Enc28j60Bank>
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	c8 17       	cp	r28, r24
     cd4:	d9 07       	cpc	r29, r25
     cd6:	a1 f0       	breq	.+40     	; 0xd00 <_ZL7SetBankh+0x42>
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_BSEL1|ECON1_BSEL0);
     cd8:	43 e0       	ldi	r20, 0x03	; 3
     cda:	6f e1       	ldi	r22, 0x1F	; 31
     cdc:	80 ea       	ldi	r24, 0xA0	; 160
     cde:	b5 df       	rcall	.-150    	; 0xc4a <_ZL7writeOphhh>
        Enc28j60Bank = address & BANK_MASK;
     ce0:	10 93 fe 02 	sts	0x02FE, r17	; 0x8002fe <_ZL12Enc28j60Bank>
        writeOp(ENC28J60_BIT_FIELD_SET, ECON1, Enc28j60Bank>>5);
     ce4:	ae 01       	movw	r20, r28
     ce6:	55 95       	asr	r21
     ce8:	47 95       	ror	r20
     cea:	55 95       	asr	r21
     cec:	47 95       	ror	r20
     cee:	55 95       	asr	r21
     cf0:	47 95       	ror	r20
     cf2:	55 95       	asr	r21
     cf4:	47 95       	ror	r20
     cf6:	55 95       	asr	r21
     cf8:	47 95       	ror	r20
     cfa:	6f e1       	ldi	r22, 0x1F	; 31
     cfc:	80 e8       	ldi	r24, 0x80	; 128
     cfe:	a5 df       	rcall	.-182    	; 0xc4a <_ZL7writeOphhh>
    }
}
     d00:	df 91       	pop	r29
     d02:	cf 91       	pop	r28
     d04:	1f 91       	pop	r17
     d06:	08 95       	ret

00000d08 <_ZL11readRegByteh>:

static uint8_t readRegByte (uint8_t address) {
     d08:	cf 93       	push	r28
     d0a:	c8 2f       	mov	r28, r24
    SetBank(address);
     d0c:	d8 df       	rcall	.-80     	; 0xcbe <_ZL7SetBankh>
    return readOp(ENC28J60_READ_CTRL_REG, address);
     d0e:	6c 2f       	mov	r22, r28
     d10:	80 e0       	ldi	r24, 0x00	; 0
     d12:	7b df       	rcall	.-266    	; 0xc0a <_ZL6readOphh>
}
     d14:	cf 91       	pop	r28
     d16:	08 95       	ret

00000d18 <_ZL12writeRegBytehh>:

static void writeRegByte (uint8_t address, uint8_t data) {
     d18:	cf 93       	push	r28
     d1a:	df 93       	push	r29
     d1c:	c8 2f       	mov	r28, r24
     d1e:	d6 2f       	mov	r29, r22
    SetBank(address);
     d20:	ce df       	rcall	.-100    	; 0xcbe <_ZL7SetBankh>
    writeOp(ENC28J60_WRITE_CTRL_REG, address, data);
     d22:	4d 2f       	mov	r20, r29
     d24:	6c 2f       	mov	r22, r28
     d26:	80 e4       	ldi	r24, 0x40	; 64
     d28:	90 df       	rcall	.-224    	; 0xc4a <_ZL7writeOphhh>
}
     d2a:	df 91       	pop	r29
     d2c:	cf 91       	pop	r28
     d2e:	08 95       	ret

00000d30 <_ZL8writeReghj>:

static void writeReg(uint8_t address, uint16_t data) {
     d30:	cf 93       	push	r28
     d32:	df 93       	push	r29
     d34:	c8 2f       	mov	r28, r24
     d36:	d7 2f       	mov	r29, r23
    writeRegByte(address, data);
     d38:	ef df       	rcall	.-34     	; 0xd18 <_ZL12writeRegBytehh>
    writeRegByte(address + 1, data >> 8);
     d3a:	6d 2f       	mov	r22, r29
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	8c 0f       	add	r24, r28
     d40:	eb df       	rcall	.-42     	; 0xd18 <_ZL12writeRegBytehh>
}
     d42:	df 91       	pop	r29
     d44:	cf 91       	pop	r28
     d46:	08 95       	ret

00000d48 <_ZN8ENC28J607initSPIERVh>:
static void disableChip () {
	SetHigh(*selectPort, selectPin); //digitalWrite(selectPin, HIGH);
	//sei();
}

void ENC28J60::initSPI (Register& csDDR) {
     d48:	fc 01       	movw	r30, r24

class SPI{
public:
	static void begin(uint8_t clock = SPI_CLOCK_DIV2){
		//SPI_DIR |= SS;
		SPI_DIR |= SPI_MOSI | SPI_SCK | SPI_SS; //Not sure why, but SS pin requires to be set as output even when not being used.
     d4a:	94 b1       	in	r25, 0x04	; 4
     d4c:	97 60       	ori	r25, 0x07	; 7
     d4e:	94 b9       	out	0x04, r25	; 4
		SPI_DIR &= ~(SPI_MISO);
     d50:	23 98       	cbi	0x04, 3	; 4
		//disableCS();

		SPSR |= (clock >> 2);
     d52:	9d b5       	in	r25, 0x2d	; 45
     d54:	91 60       	ori	r25, 0x01	; 1
     d56:	9d bd       	out	0x2d, r25	; 45
		SPCR |= _BV(MSTR) | _BV(SPE) | (clock & 0x03);
     d58:	9c b5       	in	r25, 0x2c	; 44
     d5a:	90 65       	ori	r25, 0x50	; 80
     d5c:	9c bd       	out	0x2c, r25	; 44
	SPI.begin(SPI_CLOCK_DIV2);

	SetOutput(csDDR, selectPin);
     d5e:	80 81       	ld	r24, Z
     d60:	90 91 fb 02 	lds	r25, 0x02FB	; 0x8002fb <_ZL9selectPin>
     d64:	98 2b       	or	r25, r24
     d66:	90 83       	st	Z, r25
	disableChip();
     d68:	46 cf       	rjmp	.-372    	; 0xbf6 <_ZL11disableChipv>
     d6a:	08 95       	ret

00000d6c <_ZN8ENC28J6010initializeEjPKhRVhS3_h>:
    writeReg(MIWR, data);
    while (readRegByte(MISTAT) & MISTAT_BUSY)
        ;
}

uint8_t ENC28J60::initialize (uint16_t size, const uint8_t* macaddr, Register& csDDR, Register& csPort, uint8_t csPin) {
     d6c:	0f 93       	push	r16
     d6e:	cf 93       	push	r28
     d70:	df 93       	push	r29
     d72:	eb 01       	movw	r28, r22
    bufferSize = size;
     d74:	90 93 00 03 	sts	0x0300, r25	; 0x800300 <_ZN8ENC28J6010bufferSizeE+0x1>
     d78:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <_ZN8ENC28J6010bufferSizeE>
	selectPin = csPin;
     d7c:	00 93 fb 02 	sts	0x02FB, r16	; 0x8002fb <_ZL9selectPin>
	selectPort = &csPort;
     d80:	30 93 fd 02 	sts	0x02FD, r19	; 0x8002fd <_ZL10selectPort+0x1>
     d84:	20 93 fc 02 	sts	0x02FC, r18	; 0x8002fc <_ZL10selectPort>
    initSPI(csDDR);
     d88:	ca 01       	movw	r24, r20
     d8a:	de df       	rcall	.-68     	; 0xd48 <_ZN8ENC28J607initSPIERVh>

    writeOp(ENC28J60_SOFT_RESET, 0, ENC28J60_SOFT_RESET);
     d8c:	4f ef       	ldi	r20, 0xFF	; 255
     d8e:	60 e0       	ldi	r22, 0x00	; 0
     d90:	8f ef       	ldi	r24, 0xFF	; 255
     d92:	5b df       	rcall	.-330    	; 0xc4a <_ZL7writeOphhh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d94:	8f e3       	ldi	r24, 0x3F	; 63
     d96:	9f e1       	ldi	r25, 0x1F	; 31
     d98:	01 97       	sbiw	r24, 0x01	; 1
     d9a:	f1 f7       	brne	.-4      	; 0xd98 <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0x2c>
     d9c:	00 c0       	rjmp	.+0      	; 0xd9e <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0x32>
     d9e:	00 00       	nop
	_delay_ms(2);
    while (!readOp(ENC28J60_READ_CTRL_REG, ESTAT) & ESTAT_CLKRDY)
     da0:	6d e1       	ldi	r22, 0x1D	; 29
     da2:	80 e0       	ldi	r24, 0x00	; 0
     da4:	32 df       	rcall	.-412    	; 0xc0a <_ZL6readOphh>
     da6:	88 23       	and	r24, r24
     da8:	d9 f3       	breq	.-10     	; 0xda0 <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0x34>
        ;

    writeReg(ERXST, RXSTART_INIT);
     daa:	60 e0       	ldi	r22, 0x00	; 0
     dac:	70 e0       	ldi	r23, 0x00	; 0
     dae:	88 e0       	ldi	r24, 0x08	; 8
     db0:	bf df       	rcall	.-130    	; 0xd30 <_ZL8writeReghj>
    writeReg(ERXRDPT, RXSTART_INIT);
     db2:	60 e0       	ldi	r22, 0x00	; 0
     db4:	70 e0       	ldi	r23, 0x00	; 0
     db6:	8c e0       	ldi	r24, 0x0C	; 12
     db8:	bb df       	rcall	.-138    	; 0xd30 <_ZL8writeReghj>
    writeReg(ERXND, RXSTOP_INIT);
     dba:	6f ef       	ldi	r22, 0xFF	; 255
     dbc:	7b e0       	ldi	r23, 0x0B	; 11
     dbe:	8a e0       	ldi	r24, 0x0A	; 10
     dc0:	b7 df       	rcall	.-146    	; 0xd30 <_ZL8writeReghj>
    writeReg(ETXST, TXSTART_INIT);
     dc2:	60 e0       	ldi	r22, 0x00	; 0
     dc4:	7c e0       	ldi	r23, 0x0C	; 12
     dc6:	84 e0       	ldi	r24, 0x04	; 4
     dc8:	b3 df       	rcall	.-154    	; 0xd30 <_ZL8writeReghj>
    writeReg(ETXND, TXSTOP_INIT);
     dca:	6f ef       	ldi	r22, 0xFF	; 255
     dcc:	71 e1       	ldi	r23, 0x11	; 17
     dce:	86 e0       	ldi	r24, 0x06	; 6
     dd0:	af df       	rcall	.-162    	; 0xd30 <_ZL8writeReghj>

    writeRegByte(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN|ERXFCON_PMEN|ERXFCON_BCEN);
     dd2:	61 eb       	ldi	r22, 0xB1	; 177
     dd4:	88 e3       	ldi	r24, 0x38	; 56
     dd6:	a0 df       	rcall	.-192    	; 0xd18 <_ZL12writeRegBytehh>
    writeReg(EPMM0, 0x303f);
     dd8:	6f e3       	ldi	r22, 0x3F	; 63
     dda:	70 e3       	ldi	r23, 0x30	; 48
     ddc:	88 e2       	ldi	r24, 0x28	; 40
     dde:	a8 df       	rcall	.-176    	; 0xd30 <_ZL8writeReghj>
    writeReg(EPMCS, 0xf7f9);
     de0:	69 ef       	ldi	r22, 0xF9	; 249
     de2:	77 ef       	ldi	r23, 0xF7	; 247
     de4:	80 e3       	ldi	r24, 0x30	; 48
     de6:	a4 df       	rcall	.-184    	; 0xd30 <_ZL8writeReghj>
    writeRegByte(MACON1, MACON1_MARXEN);
     de8:	61 e0       	ldi	r22, 0x01	; 1
     dea:	80 ec       	ldi	r24, 0xC0	; 192
     dec:	95 df       	rcall	.-214    	; 0xd18 <_ZL12writeRegBytehh>
    writeOp(ENC28J60_BIT_FIELD_SET, MACON3,
            MACON3_PADCFG0|MACON3_TXCRCEN|MACON3_FRMLNEN);
     dee:	42 e3       	ldi	r20, 0x32	; 50
     df0:	62 ec       	ldi	r22, 0xC2	; 194
     df2:	80 e8       	ldi	r24, 0x80	; 128
     df4:	2a df       	rcall	.-428    	; 0xc4a <_ZL7writeOphhh>
    writeReg(MAIPG, 0x0C12);
     df6:	62 e1       	ldi	r22, 0x12	; 18
     df8:	7c e0       	ldi	r23, 0x0C	; 12
     dfa:	86 ec       	ldi	r24, 0xC6	; 198
    writeRegByte(MABBIPG, 0x12);
     dfc:	99 df       	rcall	.-206    	; 0xd30 <_ZL8writeReghj>
     dfe:	62 e1       	ldi	r22, 0x12	; 18
     e00:	84 ec       	ldi	r24, 0xC4	; 196
    writeReg(MAMXFL, MAX_FRAMELEN);
     e02:	8a df       	rcall	.-236    	; 0xd18 <_ZL12writeRegBytehh>
     e04:	6c ed       	ldi	r22, 0xDC	; 220
     e06:	75 e0       	ldi	r23, 0x05	; 5
    writeRegByte(MAADR5, macaddr[0]);
     e08:	8a ec       	ldi	r24, 0xCA	; 202
     e0a:	92 df       	rcall	.-220    	; 0xd30 <_ZL8writeReghj>
     e0c:	68 81       	ld	r22, Y
    writeRegByte(MAADR4, macaddr[1]);
     e0e:	84 ee       	ldi	r24, 0xE4	; 228
     e10:	83 df       	rcall	.-250    	; 0xd18 <_ZL12writeRegBytehh>
     e12:	69 81       	ldd	r22, Y+1	; 0x01
    writeRegByte(MAADR3, macaddr[2]);
     e14:	85 ee       	ldi	r24, 0xE5	; 229
     e16:	80 df       	rcall	.-256    	; 0xd18 <_ZL12writeRegBytehh>
    writeRegByte(MAADR2, macaddr[3]);
     e18:	6a 81       	ldd	r22, Y+2	; 0x02
     e1a:	82 ee       	ldi	r24, 0xE2	; 226
     e1c:	7d df       	rcall	.-262    	; 0xd18 <_ZL12writeRegBytehh>
    writeRegByte(MAADR1, macaddr[4]);
     e1e:	6b 81       	ldd	r22, Y+3	; 0x03
     e20:	83 ee       	ldi	r24, 0xE3	; 227
     e22:	7a df       	rcall	.-268    	; 0xd18 <_ZL12writeRegBytehh>
    writeRegByte(MAADR0, macaddr[5]);
     e24:	6c 81       	ldd	r22, Y+4	; 0x04
     e26:	80 ee       	ldi	r24, 0xE0	; 224
     e28:	77 df       	rcall	.-274    	; 0xd18 <_ZL12writeRegBytehh>
    writeRegByte(MICMD, 0x00);
    return readRegByte(MIRD+1);
}

static void writePhy (uint8_t address, uint16_t data) {
    writeRegByte(MIREGADR, address);
     e2a:	6d 81       	ldd	r22, Y+5	; 0x05
     e2c:	81 ee       	ldi	r24, 0xE1	; 225
     e2e:	74 df       	rcall	.-280    	; 0xd18 <_ZL12writeRegBytehh>
    writeReg(MIWR, data);
     e30:	60 e1       	ldi	r22, 0x10	; 16
     e32:	84 ed       	ldi	r24, 0xD4	; 212
     e34:	71 df       	rcall	.-286    	; 0xd18 <_ZL12writeRegBytehh>
     e36:	60 e0       	ldi	r22, 0x00	; 0
     e38:	71 e0       	ldi	r23, 0x01	; 1
    while (readRegByte(MISTAT) & MISTAT_BUSY)
     e3a:	86 ed       	ldi	r24, 0xD6	; 214
     e3c:	79 df       	rcall	.-270    	; 0xd30 <_ZL8writeReghj>
     e3e:	8a ee       	ldi	r24, 0xEA	; 234
     e40:	63 df       	rcall	.-314    	; 0xd08 <_ZL11readRegByteh>
     e42:	80 fd       	sbrc	r24, 0
    writeRegByte(MAADR3, macaddr[2]);
    writeRegByte(MAADR2, macaddr[3]);
    writeRegByte(MAADR1, macaddr[4]);
    writeRegByte(MAADR0, macaddr[5]);
    writePhy(PHCON2, PHCON2_HDLDIS);
    SetBank(ECON1);
     e44:	fc cf       	rjmp	.-8      	; 0xe3e <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0xd2>
     e46:	8f e1       	ldi	r24, 0x1F	; 31
     e48:	3a df       	rcall	.-396    	; 0xcbe <_ZL7SetBankh>
    writeOp(ENC28J60_BIT_FIELD_SET, EIE, EIE_INTIE|EIE_PKTIE);
     e4a:	40 ec       	ldi	r20, 0xC0	; 192
     e4c:	6b e1       	ldi	r22, 0x1B	; 27
     e4e:	80 e8       	ldi	r24, 0x80	; 128
     e50:	fc de       	rcall	.-520    	; 0xc4a <_ZL7writeOphhh>
     e52:	44 e0       	ldi	r20, 0x04	; 4
    writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN);
     e54:	6f e1       	ldi	r22, 0x1F	; 31
     e56:	80 e8       	ldi	r24, 0x80	; 128
     e58:	f8 de       	rcall	.-528    	; 0xc4a <_ZL7writeOphhh>
     e5a:	82 e7       	ldi	r24, 0x72	; 114
     e5c:	55 df       	rcall	.-342    	; 0xd08 <_ZL11readRegByteh>

    uint8_t rev = readRegByte(EREVID);
     e5e:	86 30       	cpi	r24, 0x06	; 6
     e60:	08 f0       	brcs	.+2      	; 0xe64 <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0xf8>
     e62:	8f 5f       	subi	r24, 0xFF	; 255
    // microchip forgot to step the number on the silicon when they
    // released the revision B7. 6 is now rev B7. We still have
    // to see what they do when they release B8. At the moment
    // there is no B8 out yet
    if (rev > 5) ++rev;
     e64:	df 91       	pop	r29
     e66:	cf 91       	pop	r28
     e68:	0f 91       	pop	r16
    return rev;
}
     e6a:	08 95       	ret

00000e6c <_ZN8ENC28J608isLinkUpEv>:
     e6c:	61 e1       	ldi	r22, 0x11	; 17
     e6e:	84 ed       	ldi	r24, 0xD4	; 212
     e70:	53 df       	rcall	.-346    	; 0xd18 <_ZL12writeRegBytehh>
    writeRegByte(address + 1, data >> 8);
}

static uint16_t readPhyByte (uint8_t address) {
    writeRegByte(MIREGADR, address);
    writeRegByte(MICMD, MICMD_MIIRD);
     e72:	61 e0       	ldi	r22, 0x01	; 1
     e74:	82 ed       	ldi	r24, 0xD2	; 210
     e76:	50 df       	rcall	.-352    	; 0xd18 <_ZL12writeRegBytehh>
    while (readRegByte(MISTAT) & MISTAT_BUSY)
     e78:	8a ee       	ldi	r24, 0xEA	; 234
     e7a:	46 df       	rcall	.-372    	; 0xd08 <_ZL11readRegByteh>
     e7c:	80 fd       	sbrc	r24, 0
     e7e:	fc cf       	rjmp	.-8      	; 0xe78 <_ZN8ENC28J608isLinkUpEv+0xc>
        ;
    writeRegByte(MICMD, 0x00);
     e80:	60 e0       	ldi	r22, 0x00	; 0
     e82:	82 ed       	ldi	r24, 0xD2	; 210
     e84:	49 df       	rcall	.-366    	; 0xd18 <_ZL12writeRegBytehh>
    return readRegByte(MIRD+1);
     e86:	89 ed       	ldi	r24, 0xD9	; 217
     e88:	3f df       	rcall	.-386    	; 0xd08 <_ZL11readRegByteh>
     e8a:	82 fb       	bst	r24, 2
    return rev;
}

bool ENC28J60::isLinkUp() {
    return (readPhyByte(PHSTAT2) >> 2) & 1;
}
     e8c:	88 27       	eor	r24, r24
     e8e:	80 f9       	bld	r24, 0
     e90:	08 95       	ret

00000e92 <_ZN8ENC28J6010packetSendEj>:
     e92:	af 92       	push	r10

struct transmit_status_vector {
    uint8_t bytes[7];
};

void ENC28J60::packetSend(uint16_t len) {
     e94:	bf 92       	push	r11
     e96:	cf 92       	push	r12
     e98:	df 92       	push	r13
     e9a:	ef 92       	push	r14
     e9c:	ff 92       	push	r15
     e9e:	0f 93       	push	r16
     ea0:	1f 93       	push	r17
     ea2:	cf 93       	push	r28
     ea4:	df 93       	push	r29
     ea6:	7c 01       	movw	r14, r24
        writeOp(ENC28J60_BIT_FIELD_CLR, EIR, EIR_TXERIF|EIR_TXIF);

        // prepare new transmission
        if (retry == 0) {
            writeReg(EWRPT, TXSTART_INIT);
            writeReg(ETXND, TXSTART_INIT+len);
     ea8:	6c 01       	movw	r12, r24
     eaa:	84 ef       	ldi	r24, 0xF4	; 244
     eac:	d8 1a       	sub	r13, r24

	static void write(const void *buf, uint16_t nbyte){
		if(nbyte == 0) return;
		
		const uint8_t* buff = (const uint8_t*)(buf);
		SPDR = *buff;
     eae:	0f 2e       	mov	r0, r31
     eb0:	f1 e0       	ldi	r31, 0x01	; 1
     eb2:	af 2e       	mov	r10, r31
     eb4:	f3 e0       	ldi	r31, 0x03	; 3
     eb6:	bf 2e       	mov	r11, r31
     eb8:	f0 2d       	mov	r31, r0
     eba:	87 01       	movw	r16, r14
     ebc:	0f 5f       	subi	r16, 0xFF	; 255
     ebe:	1c 4f       	sbci	r17, 0xFC	; 252
        // the Microchip TCP/IP stack implementation used to first check
        // whether TXERIF is set and only then reset the transmit logic
        // but this has been changed in later versions; possibly they
        // have a reason for this; they don't mention this in the errata
        // sheet
        writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRST);
     ec0:	40 e8       	ldi	r20, 0x80	; 128
     ec2:	6f e1       	ldi	r22, 0x1F	; 31
     ec4:	80 e8       	ldi	r24, 0x80	; 128
     ec6:	c1 de       	rcall	.-638    	; 0xc4a <_ZL7writeOphhh>
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRST);
     ec8:	40 e8       	ldi	r20, 0x80	; 128
     eca:	6f e1       	ldi	r22, 0x1F	; 31
     ecc:	80 ea       	ldi	r24, 0xA0	; 160
     ece:	bd de       	rcall	.-646    	; 0xc4a <_ZL7writeOphhh>
        writeOp(ENC28J60_BIT_FIELD_CLR, EIR, EIR_TXERIF|EIR_TXIF);
     ed0:	4a e0       	ldi	r20, 0x0A	; 10
     ed2:	6c e1       	ldi	r22, 0x1C	; 28
     ed4:	80 ea       	ldi	r24, 0xA0	; 160
     ed6:	b9 de       	rcall	.-654    	; 0xc4a <_ZL7writeOphhh>

        // prepare new transmission
        if (retry == 0) {
            writeReg(EWRPT, TXSTART_INIT);
     ed8:	60 e0       	ldi	r22, 0x00	; 0
     eda:	7c e0       	ldi	r23, 0x0C	; 12
     edc:	82 e0       	ldi	r24, 0x02	; 2
            writeReg(ETXND, TXSTART_INIT+len);
     ede:	28 df       	rcall	.-432    	; 0xd30 <_ZL8writeReghj>
     ee0:	b6 01       	movw	r22, r12
     ee2:	86 e0       	ldi	r24, 0x06	; 6
            writeOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
     ee4:	25 df       	rcall	.-438    	; 0xd30 <_ZL8writeReghj>
     ee6:	40 e0       	ldi	r20, 0x00	; 0
     ee8:	60 e0       	ldi	r22, 0x00	; 0
     eea:	8a e7       	ldi	r24, 0x7A	; 122
     eec:	ae de       	rcall	.-676    	; 0xc4a <_ZL7writeOphhh>
    }
    disableChip();
}

static void writeBuf(uint16_t len, const uint8_t* data) {
    enableChip();
     eee:	78 de       	rcall	.-784    	; 0xbe0 <_ZL10enableChipv>
     ef0:	e1 14       	cp	r14, r1
    if (len != 0) {
     ef2:	f1 04       	cpc	r15, r1
     ef4:	e1 f0       	breq	.+56     	; 0xf2e <_ZN8ENC28J6010packetSendEj+0x9c>
     ef6:	8a e7       	ldi	r24, 0x7A	; 122
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     ef8:	8e bd       	out	0x2e, r24	; 46
     efa:	00 00       	nop
		asm volatile("nop");
     efc:	0d b4       	in	r0, 0x2d	; 45
		while(!(SPSR & _BV(SPIF)));
     efe:	07 fe       	sbrs	r0, 7
     f00:	fd cf       	rjmp	.-6      	; 0xefc <_ZN8ENC28J6010packetSendEj+0x6a>
     f02:	f5 01       	movw	r30, r10

	static void write(const void *buf, uint16_t nbyte){
		if(nbyte == 0) return;
		
		const uint8_t* buff = (const uint8_t*)(buf);
		SPDR = *buff;
     f04:	80 81       	ld	r24, Z
     f06:	8e bd       	out	0x2e, r24	; 46
     f08:	f1 e0       	ldi	r31, 0x01	; 1
		while(--nbyte){
     f0a:	ef 16       	cp	r14, r31
     f0c:	f1 04       	cpc	r15, r1
     f0e:	59 f0       	breq	.+22     	; 0xf26 <_ZN8ENC28J6010packetSendEj+0x94>
     f10:	e2 e0       	ldi	r30, 0x02	; 2
     f12:	f3 e0       	ldi	r31, 0x03	; 3
     f14:	00 00       	nop
			asm volatile("nop");
     f16:	0d b4       	in	r0, 0x2d	; 45
			while (!(SPSR & _BV(SPIF))) ;
     f18:	07 fe       	sbrs	r0, 7
     f1a:	fd cf       	rjmp	.-6      	; 0xf16 <_ZN8ENC28J6010packetSendEj+0x84>
     f1c:	81 91       	ld	r24, Z+
			SPDR = *++buff;
     f1e:	8e bd       	out	0x2e, r24	; 46
     f20:	e0 17       	cp	r30, r16
	static void write(const void *buf, uint16_t nbyte){
		if(nbyte == 0) return;
		
		const uint8_t* buff = (const uint8_t*)(buf);
		SPDR = *buff;
		while(--nbyte){
     f22:	f1 07       	cpc	r31, r17
     f24:	b9 f7       	brne	.-18     	; 0xf14 <_ZN8ENC28J6010packetSendEj+0x82>
			asm volatile("nop");
			while (!(SPSR & _BV(SPIF))) ;
			SPDR = *++buff;
		}
		asm volatile("nop");
     f26:	00 00       	nop
		while (!(SPSR & _BV(SPIF))) ;
     f28:	0d b4       	in	r0, 0x2d	; 45
     f2a:	07 fe       	sbrs	r0, 7
        SPI.write8(ENC28J60_WRITE_BUF_MEM);

        SPI.write(data, len);
    }
    disableChip();
     f2c:	fd cf       	rjmp	.-6      	; 0xf28 <_ZN8ENC28J6010packetSendEj+0x96>
            writeOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
            writeBuf(len, buffer);
        }

        // initiate transmission
        writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
     f2e:	63 de       	rcall	.-826    	; 0xbf6 <_ZL11disableChipv>
     f30:	48 e0       	ldi	r20, 0x08	; 8
     f32:	6f e1       	ldi	r22, 0x1F	; 31
     f34:	80 e8       	ldi	r24, 0x80	; 128
     f36:	89 de       	rcall	.-750    	; 0xc4a <_ZL7writeOphhh>
        // wait until transmission has finished; referring to the data sheet and
        // to the errata (Errata Issue 13; Example 1) you only need to wait until either
        // TXIF or TXERIF gets set; however this leads to hangs; apparently Microchip
        // realized this and in later implementations of their tcp/ip stack they introduced
        // a counter to avoid hangs; of course they didn't update the errata sheet
        uint16_t count = 0;
     f38:	c0 e0       	ldi	r28, 0x00	; 0
     f3a:	d0 e0       	ldi	r29, 0x00	; 0
        while ((readRegByte(EIR) & (EIR_TXIF | EIR_TXERIF)) == 0 && ++count < 1000U)
     f3c:	8c e1       	ldi	r24, 0x1C	; 28
     f3e:	e4 de       	rcall	.-568    	; 0xd08 <_ZL11readRegByteh>
     f40:	8a 70       	andi	r24, 0x0A	; 10
     f42:	31 f4       	brne	.+12     	; 0xf50 <_ZN8ENC28J6010packetSendEj+0xbe>
     f44:	21 96       	adiw	r28, 0x01	; 1
     f46:	c8 3e       	cpi	r28, 0xE8	; 232
     f48:	83 e0       	ldi	r24, 0x03	; 3
     f4a:	d8 07       	cpc	r29, r24
     f4c:	b9 f7       	brne	.-18     	; 0xf3c <_ZN8ENC28J6010packetSendEj+0xaa>
     f4e:	0c c0       	rjmp	.+24     	; 0xf68 <_ZN8ENC28J6010packetSendEj+0xd6>
            ;

        if (!(readRegByte(EIR) & EIR_TXERIF) && count < 1000U) {
     f50:	8c e1       	ldi	r24, 0x1C	; 28
     f52:	da de       	rcall	.-588    	; 0xd08 <_ZL11readRegByteh>
     f54:	81 fd       	sbrc	r24, 1
     f56:	03 c0       	rjmp	.+6      	; 0xf5e <_ZN8ENC28J6010packetSendEj+0xcc>
     f58:	c8 3e       	cpi	r28, 0xE8	; 232
     f5a:	d3 40       	sbci	r29, 0x03	; 3
            // no error; start new transmission
            break;
        }

        // cancel previous transmission if stuck
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRTS);
     f5c:	40 f0       	brcs	.+16     	; 0xf6e <_ZN8ENC28J6010packetSendEj+0xdc>
     f5e:	48 e0       	ldi	r20, 0x08	; 8
     f60:	6f e1       	ldi	r22, 0x1F	; 31
     f62:	80 ea       	ldi	r24, 0xA0	; 160
     f64:	72 de       	rcall	.-796    	; 0xc4a <_ZL7writeOphhh>
};

void ENC28J60::packetSend(uint16_t len) {
    uint8_t retry = 0;

    while (1) {
     f66:	ac cf       	rjmp	.-168    	; 0xec0 <_ZN8ENC28J6010packetSendEj+0x2e>
        // a counter to avoid hangs; of course they didn't update the errata sheet
        uint16_t count = 0;
        while ((readRegByte(EIR) & (EIR_TXIF | EIR_TXERIF)) == 0 && ++count < 1000U)
            ;

        if (!(readRegByte(EIR) & EIR_TXERIF) && count < 1000U) {
     f68:	8c e1       	ldi	r24, 0x1C	; 28
     f6a:	ce de       	rcall	.-612    	; 0xd08 <_ZL11readRegByteh>
     f6c:	f8 cf       	rjmp	.-16     	; 0xf5e <_ZN8ENC28J6010packetSendEj+0xcc>
     f6e:	df 91       	pop	r29
        }

        // cancel previous transmission if stuck
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRTS);
    }
}
     f70:	cf 91       	pop	r28
     f72:	1f 91       	pop	r17
     f74:	0f 91       	pop	r16
     f76:	ff 90       	pop	r15
     f78:	ef 90       	pop	r14
     f7a:	df 90       	pop	r13
     f7c:	cf 90       	pop	r12
     f7e:	bf 90       	pop	r11
     f80:	af 90       	pop	r10
     f82:	08 95       	ret

00000f84 <_ZN8ENC28J6013packetReceiveEv>:
     f84:	0f 93       	push	r16


uint16_t ENC28J60::packetReceive() {
     f86:	1f 93       	push	r17
     f88:	cf 93       	push	r28
     f8a:	df 93       	push	r29
     f8c:	00 d0       	rcall	.+0      	; 0xf8e <_ZN8ENC28J6013packetReceiveEv+0xa>
     f8e:	00 d0       	rcall	.+0      	; 0xf90 <_ZN8ENC28J6013packetReceiveEv+0xc>
     f90:	cd b7       	in	r28, 0x3d	; 61
     f92:	de b7       	in	r29, 0x3e	; 62
    static uint16_t gNextPacketPtr = RXSTART_INIT;
    static bool     unreleasedPacket = false;
    uint16_t len = 0;

    if (unreleasedPacket) {
     f94:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <_ZZN8ENC28J6013packetReceiveEvE16unreleasedPacket>
     f98:	88 23       	and	r24, r24
     f9a:	91 f0       	breq	.+36     	; 0xfc0 <_ZN8ENC28J6013packetReceiveEv+0x3c>
        if (gNextPacketPtr == 0)
     f9c:	60 91 f8 02 	lds	r22, 0x02F8	; 0x8002f8 <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr>
     fa0:	70 91 f9 02 	lds	r23, 0x02F9	; 0x8002f9 <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr+0x1>
     fa4:	61 15       	cp	r22, r1
     fa6:	71 05       	cpc	r23, r1
     fa8:	29 f4       	brne	.+10     	; 0xfb4 <_ZN8ENC28J6013packetReceiveEv+0x30>
            writeReg(ERXRDPT, RXSTOP_INIT);
     faa:	6f ef       	ldi	r22, 0xFF	; 255
     fac:	7b e0       	ldi	r23, 0x0B	; 11
     fae:	8c e0       	ldi	r24, 0x0C	; 12
     fb0:	bf de       	rcall	.-642    	; 0xd30 <_ZL8writeReghj>
     fb2:	04 c0       	rjmp	.+8      	; 0xfbc <_ZN8ENC28J6013packetReceiveEv+0x38>
        else
            writeReg(ERXRDPT, gNextPacketPtr - 1);
     fb4:	61 50       	subi	r22, 0x01	; 1
     fb6:	71 09       	sbc	r23, r1
     fb8:	8c e0       	ldi	r24, 0x0C	; 12
     fba:	ba de       	rcall	.-652    	; 0xd30 <_ZL8writeReghj>
        unreleasedPacket = false;
     fbc:	10 92 fa 02 	sts	0x02FA, r1	; 0x8002fa <_ZZN8ENC28J6013packetReceiveEvE16unreleasedPacket>
    }

    if (readRegByte(EPKTCNT) > 0) {
     fc0:	89 e3       	ldi	r24, 0x39	; 57
     fc2:	a2 de       	rcall	.-700    	; 0xd08 <_ZL11readRegByteh>
     fc4:	88 23       	and	r24, r24
     fc6:	a9 f1       	breq	.+106    	; 0x1032 <_ZN8ENC28J6013packetReceiveEv+0xae>
        writeReg(ERDPT, gNextPacketPtr);
     fc8:	60 91 f8 02 	lds	r22, 0x02F8	; 0x8002f8 <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr>
     fcc:	70 91 f9 02 	lds	r23, 0x02F9	; 0x8002f9 <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr+0x1>
     fd0:	80 e0       	ldi	r24, 0x00	; 0
     fd2:	ae de       	rcall	.-676    	; 0xd30 <_ZL8writeReghj>
            uint16_t nextPacket;
            uint16_t byteCount;
            uint16_t status;
        } header;

        readBuf(sizeof header, (uint8_t*) &header);
     fd4:	be 01       	movw	r22, r28
     fd6:	6f 5f       	subi	r22, 0xFF	; 255
     fd8:	7f 4f       	sbci	r23, 0xFF	; 255
     fda:	86 e0       	ldi	r24, 0x06	; 6
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	4d de       	rcall	.-870    	; 0xc7a <_ZL7readBufjPh>

        gNextPacketPtr  = header.nextPacket;
     fe0:	89 81       	ldd	r24, Y+1	; 0x01
     fe2:	9a 81       	ldd	r25, Y+2	; 0x02
     fe4:	90 93 f9 02 	sts	0x02F9, r25	; 0x8002f9 <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr+0x1>
     fe8:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr>
        len = header.byteCount - 4; //remove the CRC count
        if (len>bufferSize-1)
            len=bufferSize-1;
        if ((header.status & 0x80)==0)
     fec:	8d 81       	ldd	r24, Y+5	; 0x05
     fee:	87 ff       	sbrs	r24, 7
     ff0:	12 c0       	rjmp	.+36     	; 0x1016 <_ZN8ENC28J6013packetReceiveEv+0x92>

        readBuf(sizeof header, (uint8_t*) &header);

        gNextPacketPtr  = header.nextPacket;
        len = header.byteCount - 4; //remove the CRC count
        if (len>bufferSize-1)
     ff2:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <_ZN8ENC28J6010bufferSizeE>
     ff6:	90 91 00 03 	lds	r25, 0x0300	; 0x800300 <_ZN8ENC28J6010bufferSizeE+0x1>
     ffa:	01 97       	sbiw	r24, 0x01	; 1
        } header;

        readBuf(sizeof header, (uint8_t*) &header);

        gNextPacketPtr  = header.nextPacket;
        len = header.byteCount - 4; //remove the CRC count
     ffc:	0b 81       	ldd	r16, Y+3	; 0x03
     ffe:	1c 81       	ldd	r17, Y+4	; 0x04
    1000:	04 50       	subi	r16, 0x04	; 4
    1002:	11 09       	sbc	r17, r1
    1004:	80 17       	cp	r24, r16
    1006:	91 07       	cpc	r25, r17
    1008:	08 f4       	brcc	.+2      	; 0x100c <_ZN8ENC28J6013packetReceiveEv+0x88>
        if (len>bufferSize-1)
            len=bufferSize-1;
        if ((header.status & 0x80)==0)
            len = 0;
        else
            readBuf(len, buffer);
    100a:	8c 01       	movw	r16, r24
    100c:	61 e0       	ldi	r22, 0x01	; 1
    100e:	73 e0       	ldi	r23, 0x03	; 3
    1010:	c8 01       	movw	r24, r16
    1012:	33 de       	rcall	.-922    	; 0xc7a <_ZL7readBufjPh>
    1014:	02 c0       	rjmp	.+4      	; 0x101a <_ZN8ENC28J6013packetReceiveEv+0x96>
        gNextPacketPtr  = header.nextPacket;
        len = header.byteCount - 4; //remove the CRC count
        if (len>bufferSize-1)
            len=bufferSize-1;
        if ((header.status & 0x80)==0)
            len = 0;
    1016:	00 e0       	ldi	r16, 0x00	; 0
    1018:	10 e0       	ldi	r17, 0x00	; 0
        else
            readBuf(len, buffer);
        buffer[len] = 0;
    101a:	f8 01       	movw	r30, r16
    101c:	ef 5f       	subi	r30, 0xFF	; 255
    101e:	fc 4f       	sbci	r31, 0xFC	; 252
    1020:	10 82       	st	Z, r1
        unreleasedPacket = true;
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <_ZZN8ENC28J6013packetReceiveEvE16unreleasedPacket>

        writeOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
    1028:	40 e4       	ldi	r20, 0x40	; 64
    102a:	6e e1       	ldi	r22, 0x1E	; 30
    102c:	80 e8       	ldi	r24, 0x80	; 128
    102e:	0d de       	rcall	.-998    	; 0xc4a <_ZL7writeOphhh>
    1030:	02 c0       	rjmp	.+4      	; 0x1036 <_ZN8ENC28J6013packetReceiveEv+0xb2>


uint16_t ENC28J60::packetReceive() {
    static uint16_t gNextPacketPtr = RXSTART_INIT;
    static bool     unreleasedPacket = false;
    uint16_t len = 0;
    1032:	00 e0       	ldi	r16, 0x00	; 0
    1034:	10 e0       	ldi	r17, 0x00	; 0
        unreleasedPacket = true;

        writeOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
    }
    return len;
}
    1036:	c8 01       	movw	r24, r16
    1038:	26 96       	adiw	r28, 0x06	; 6
    103a:	0f b6       	in	r0, 0x3f	; 63
    103c:	f8 94       	cli
    103e:	de bf       	out	0x3e, r29	; 62
    1040:	0f be       	out	0x3f, r0	; 63
    1042:	cd bf       	out	0x3d, r28	; 61
    1044:	df 91       	pop	r29
    1046:	cf 91       	pop	r28
    1048:	1f 91       	pop	r17
    104a:	0f 91       	pop	r16
    104c:	08 95       	ret

0000104e <_ZN9EtherCard5beginEPKhRVhS3_h>:
uint16_t EtherCard::delaycnt = 0; //request gateway ARP lookup

uint8_t Ethernet::buffer[ETHER_CARD_BUFFER_SIZE]; // tcp/ip send and receive buffer

uint8_t EtherCard::begin (const uint8_t* macaddr,
                          Register& csDDR, Register& csPort, uint8_t csPin) {
    104e:	ef 92       	push	r14
    1050:	ff 92       	push	r15
    1052:	0f 93       	push	r16
    1054:	cf 93       	push	r28
    1056:	df 93       	push	r29
    1058:	eb 01       	movw	r28, r22
    105a:	7a 01       	movw	r14, r20
    105c:	02 2f       	mov	r16, r18

    copyMac(mymac, macaddr);
    105e:	bc 01       	movw	r22, r24
    1060:	8b e1       	ldi	r24, 0x1B	; 27
    1062:	95 e0       	ldi	r25, 0x05	; 5
    1064:	c9 d3       	rcall	.+1938   	; 0x17f8 <_ZN9EtherCard7copyMacEPhPKh>
    return initialize(ETHER_CARD_BUFFER_SIZE, mymac, csDDR, csPort, csPin);
    1066:	97 01       	movw	r18, r14
    1068:	ae 01       	movw	r20, r28
    106a:	6b e1       	ldi	r22, 0x1B	; 27
    106c:	75 e0       	ldi	r23, 0x05	; 5
    106e:	80 e0       	ldi	r24, 0x00	; 0
    1070:	92 e0       	ldi	r25, 0x02	; 2
    1072:	7c de       	rcall	.-776    	; 0xd6c <_ZN8ENC28J6010initializeEjPKhRVhS3_h>
}
    1074:	df 91       	pop	r29
    1076:	cf 91       	pop	r28
    1078:	0f 91       	pop	r16
    107a:	ff 90       	pop	r15
    107c:	ef 90       	pop	r14
    107e:	08 95       	ret

00001080 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_>:

bool EtherCard::staticSetup (const uint8_t* my_ip,
                             const uint8_t* gw_ip,
                             const uint8_t* dns_ip,
                             const uint8_t* mask) {
    1080:	ef 92       	push	r14
    1082:	ff 92       	push	r15
    1084:	0f 93       	push	r16
    1086:	1f 93       	push	r17
    1088:	cf 93       	push	r28
    108a:	df 93       	push	r29
    108c:	7b 01       	movw	r14, r22
    108e:	8a 01       	movw	r16, r20
    1090:	e9 01       	movw	r28, r18

    if (my_ip != 0)
    1092:	00 97       	sbiw	r24, 0x00	; 0
    1094:	21 f0       	breq	.+8      	; 0x109e <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x1e>
        copyIp(myip, my_ip);
    1096:	bc 01       	movw	r22, r24
    1098:	87 e1       	ldi	r24, 0x17	; 23
    109a:	95 e0       	ldi	r25, 0x05	; 5
    109c:	a0 d3       	rcall	.+1856   	; 0x17de <_ZN9EtherCard6copyIpEPhPKh>
    if (gw_ip != 0)
    109e:	e1 14       	cp	r14, r1
    10a0:	f1 04       	cpc	r15, r1
    10a2:	11 f0       	breq	.+4      	; 0x10a8 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x28>
        setGwIp(gw_ip);
    10a4:	c7 01       	movw	r24, r14
    10a6:	bd d1       	rcall	.+890    	; 0x1422 <_ZN9EtherCard7setGwIpEPKh>
    if (dns_ip != 0)
    10a8:	01 15       	cp	r16, r1
    10aa:	11 05       	cpc	r17, r1
    10ac:	21 f0       	breq	.+8      	; 0x10b6 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x36>
        copyIp(dnsip, dns_ip);
    10ae:	b8 01       	movw	r22, r16
    10b0:	87 e0       	ldi	r24, 0x07	; 7
    10b2:	95 e0       	ldi	r25, 0x05	; 5
    10b4:	94 d3       	rcall	.+1832   	; 0x17de <_ZN9EtherCard6copyIpEPhPKh>
    if(mask != 0)
    10b6:	20 97       	sbiw	r28, 0x00	; 0
    10b8:	21 f0       	breq	.+8      	; 0x10c2 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x42>
        copyIp(netmask, mask);
    10ba:	be 01       	movw	r22, r28
    10bc:	83 e1       	ldi	r24, 0x13	; 19
    10be:	95 e0       	ldi	r25, 0x05	; 5
    updateBroadcastAddress();
    10c0:	8e d3       	rcall	.+1820   	; 0x17de <_ZN9EtherCard6copyIpEPhPKh>
    10c2:	bb d1       	rcall	.+886    	; 0x143a <_ZN9EtherCard22updateBroadcastAddressEv>
    delaycnt = 0; //request gateway ARP lookup
    10c4:	10 92 02 05 	sts	0x0502, r1	; 0x800502 <_ZN9EtherCard8delaycntE+0x1>
    10c8:	10 92 01 05 	sts	0x0501, r1	; 0x800501 <_ZN9EtherCard8delaycntE>
    return true;
}
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	df 91       	pop	r29
    10d0:	cf 91       	pop	r28
    10d2:	1f 91       	pop	r17
    10d4:	0f 91       	pop	r16
    10d6:	ff 90       	pop	r15
    10d8:	ef 90       	pop	r14
    10da:	08 95       	ret

000010dc <_ZL13fill_checksumhhjh>:
    for(uint8_t i=0; i<IP_LEN; i++)
        broadcastip[i] = myip[i] | ~netmask[i];
}

void EtherCard::registerPingCallback (void (*callback)(uint8_t *srcip)) {
    icmp_cb = callback;
    10dc:	cf 92       	push	r12
    10de:	df 92       	push	r13
    10e0:	ef 92       	push	r14
    10e2:	ff 92       	push	r15
    10e4:	cf 93       	push	r28
    10e6:	df 93       	push	r29
    10e8:	c6 2f       	mov	r28, r22
    10ea:	d0 e0       	ldi	r29, 0x00	; 0
    10ec:	cf 5f       	subi	r28, 0xFF	; 255
    10ee:	dc 4f       	sbci	r29, 0xFC	; 252
    10f0:	21 30       	cpi	r18, 0x01	; 1
    10f2:	81 f4       	brne	.+32     	; 0x1114 <_ZL13fill_checksumhhjh+0x38>
    10f4:	6a 01       	movw	r12, r20
    10f6:	99 e0       	ldi	r25, 0x09	; 9
    10f8:	c9 0e       	add	r12, r25
    10fa:	d1 1c       	adc	r13, r1
    10fc:	e1 2c       	mov	r14, r1
    10fe:	f1 2c       	mov	r15, r1
    1100:	03 c0       	rjmp	.+6      	; 0x1108 <_ZL13fill_checksumhhjh+0x2c>
    1102:	c1 2c       	mov	r12, r1
    1104:	d1 2c       	mov	r13, r1
    1106:	76 01       	movw	r14, r12
    1108:	42 30       	cpi	r20, 0x02	; 2
    110a:	51 05       	cpc	r21, r1
    110c:	28 f1       	brcs	.+74     	; 0x1158 <_ZL13fill_checksumhhjh+0x7c>
    110e:	fe 01       	movw	r30, r28
    1110:	da 01       	movw	r26, r20
    1112:	09 c0       	rjmp	.+18     	; 0x1126 <_ZL13fill_checksumhhjh+0x4a>
    1114:	22 30       	cpi	r18, 0x02	; 2
    1116:	a9 f7       	brne	.-22     	; 0x1102 <_ZL13fill_checksumhhjh+0x26>
    1118:	6a 01       	movw	r12, r20
    111a:	92 e0       	ldi	r25, 0x02	; 2
    111c:	c9 1a       	sub	r12, r25
    111e:	d1 08       	sbc	r13, r1
    1120:	e1 2c       	mov	r14, r1
    1122:	f1 2c       	mov	r15, r1
    1124:	f1 cf       	rjmp	.-30     	; 0x1108 <_ZL13fill_checksumhhjh+0x2c>
    1126:	20 81       	ld	r18, Z
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	32 2f       	mov	r19, r18
    112c:	22 27       	eor	r18, r18
    112e:	91 81       	ldd	r25, Z+1	; 0x01
    1130:	29 2b       	or	r18, r25
    1132:	c2 0e       	add	r12, r18
    1134:	d3 1e       	adc	r13, r19
    1136:	e1 1c       	adc	r14, r1
    1138:	f1 1c       	adc	r15, r1
    113a:	32 96       	adiw	r30, 0x02	; 2
    113c:	12 97       	sbiw	r26, 0x02	; 2
    113e:	a2 30       	cpi	r26, 0x02	; 2
    1140:	b1 05       	cpc	r27, r1
    1142:	88 f7       	brcc	.-30     	; 0x1126 <_ZL13fill_checksumhhjh+0x4a>
    1144:	9a 01       	movw	r18, r20
    1146:	22 50       	subi	r18, 0x02	; 2
    1148:	31 09       	sbc	r19, r1
    114a:	2e 7f       	andi	r18, 0xFE	; 254
    114c:	2e 5f       	subi	r18, 0xFE	; 254
    114e:	3f 4f       	sbci	r19, 0xFF	; 255
    1150:	c2 0f       	add	r28, r18
    1152:	d3 1f       	adc	r29, r19
    1154:	41 70       	andi	r20, 0x01	; 1
    1156:	55 27       	eor	r21, r21
    1158:	45 2b       	or	r20, r21
    115a:	61 f0       	breq	.+24     	; 0x1174 <_ZL13fill_checksumhhjh+0x98>
    115c:	48 81       	ld	r20, Y
    115e:	50 e0       	ldi	r21, 0x00	; 0
    1160:	60 e0       	ldi	r22, 0x00	; 0
    1162:	70 e0       	ldi	r23, 0x00	; 0
    1164:	76 2f       	mov	r23, r22
    1166:	65 2f       	mov	r22, r21
    1168:	54 2f       	mov	r21, r20
    116a:	44 27       	eor	r20, r20
    116c:	c4 0e       	add	r12, r20
    116e:	d5 1e       	adc	r13, r21
    1170:	e6 1e       	adc	r14, r22
    1172:	f7 1e       	adc	r15, r23
    1174:	a7 01       	movw	r20, r14
    1176:	66 27       	eor	r22, r22
    1178:	77 27       	eor	r23, r23
    117a:	41 15       	cp	r20, r1
    117c:	51 05       	cpc	r21, r1
    117e:	61 05       	cpc	r22, r1
    1180:	71 05       	cpc	r23, r1
    1182:	71 f0       	breq	.+28     	; 0x11a0 <_ZL13fill_checksumhhjh+0xc4>
    1184:	ee 24       	eor	r14, r14
    1186:	ff 24       	eor	r15, r15
    1188:	c4 0e       	add	r12, r20
    118a:	d5 1e       	adc	r13, r21
    118c:	e6 1e       	adc	r14, r22
    118e:	f7 1e       	adc	r15, r23
    1190:	a7 01       	movw	r20, r14
    1192:	66 27       	eor	r22, r22
    1194:	77 27       	eor	r23, r23
    1196:	41 15       	cp	r20, r1
    1198:	51 05       	cpc	r21, r1
    119a:	61 05       	cpc	r22, r1
    119c:	71 05       	cpc	r23, r1
    119e:	91 f7       	brne	.-28     	; 0x1184 <_ZL13fill_checksumhhjh+0xa8>
    11a0:	c0 94       	com	r12
    11a2:	d0 94       	com	r13
    11a4:	e8 2f       	mov	r30, r24
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	ef 5f       	subi	r30, 0xFF	; 255
    11aa:	fc 4f       	sbci	r31, 0xFC	; 252
    11ac:	d0 82       	st	Z, r13
    11ae:	c1 82       	std	Z+1, r12	; 0x01
    11b0:	df 91       	pop	r29
    11b2:	cf 91       	pop	r28
    11b4:	ff 90       	pop	r15
    11b6:	ef 90       	pop	r14
    11b8:	df 90       	pop	r13
    11ba:	cf 90       	pop	r12
    11bc:	08 95       	ret

000011be <_ZL6is_lanPKhS0_>:
    11be:	cf 93       	push	r28
    11c0:	df 93       	push	r29
    11c2:	fc 01       	movw	r30, r24
    11c4:	20 81       	ld	r18, Z
    11c6:	22 23       	and	r18, r18
    11c8:	d1 f0       	breq	.+52     	; 0x11fe <_ZL6is_lanPKhS0_+0x40>
    11ca:	fb 01       	movw	r30, r22
    11cc:	30 81       	ld	r19, Z
    11ce:	33 23       	and	r19, r19
    11d0:	c1 f0       	breq	.+48     	; 0x1202 <_ZL6is_lanPKhS0_+0x44>
    11d2:	23 27       	eor	r18, r19
    11d4:	30 91 13 05 	lds	r19, 0x0513	; 0x800513 <_ZN9EtherCard7netmaskE>
    11d8:	23 23       	and	r18, r19
    11da:	a9 f4       	brne	.+42     	; 0x1206 <_ZL6is_lanPKhS0_+0x48>
    11dc:	dc 01       	movw	r26, r24
    11de:	11 96       	adiw	r26, 0x01	; 1
    11e0:	31 96       	adiw	r30, 0x01	; 1
    11e2:	c4 e1       	ldi	r28, 0x14	; 20
    11e4:	d5 e0       	ldi	r29, 0x05	; 5
    11e6:	04 96       	adiw	r24, 0x04	; 4
    11e8:	4d 91       	ld	r20, X+
    11ea:	21 91       	ld	r18, Z+
    11ec:	39 91       	ld	r19, Y+
    11ee:	24 27       	eor	r18, r20
    11f0:	23 23       	and	r18, r19
    11f2:	59 f4       	brne	.+22     	; 0x120a <_ZL6is_lanPKhS0_+0x4c>
    11f4:	a8 17       	cp	r26, r24
    11f6:	b9 07       	cpc	r27, r25
    11f8:	b9 f7       	brne	.-18     	; 0x11e8 <_ZL6is_lanPKhS0_+0x2a>
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	07 c0       	rjmp	.+14     	; 0x120c <_ZL6is_lanPKhS0_+0x4e>
    11fe:	80 e0       	ldi	r24, 0x00	; 0
    1200:	05 c0       	rjmp	.+10     	; 0x120c <_ZL6is_lanPKhS0_+0x4e>
    1202:	80 e0       	ldi	r24, 0x00	; 0
    1204:	03 c0       	rjmp	.+6      	; 0x120c <_ZL6is_lanPKhS0_+0x4e>
    1206:	80 e0       	ldi	r24, 0x00	; 0
    1208:	01 c0       	rjmp	.+2      	; 0x120c <_ZL6is_lanPKhS0_+0x4e>
    120a:	80 e0       	ldi	r24, 0x00	; 0
    120c:	df 91       	pop	r29
    120e:	cf 91       	pop	r28
    1210:	08 95       	ret

00001212 <_ZL20fill_ip_hdr_checksumv>:
    1212:	e1 e0       	ldi	r30, 0x01	; 1
    1214:	f3 e0       	ldi	r31, 0x03	; 3
    1216:	10 8e       	std	Z+24, r1	; 0x18
    1218:	11 8e       	std	Z+25, r1	; 0x19
    121a:	80 e4       	ldi	r24, 0x40	; 64
    121c:	84 8b       	std	Z+20, r24	; 0x14
    121e:	15 8a       	std	Z+21, r1	; 0x15
    1220:	86 8b       	std	Z+22, r24	; 0x16
    1222:	20 e0       	ldi	r18, 0x00	; 0
    1224:	44 e1       	ldi	r20, 0x14	; 20
    1226:	50 e0       	ldi	r21, 0x00	; 0
    1228:	6e e0       	ldi	r22, 0x0E	; 14
    122a:	88 e1       	ldi	r24, 0x18	; 24
    122c:	57 cf       	rjmp	.-338    	; 0x10dc <_ZL13fill_checksumhhjh>
    122e:	08 95       	ret

00001230 <_ZL7setMACsPKh>:
    1230:	bc 01       	movw	r22, r24
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	93 e0       	ldi	r25, 0x03	; 3
    1236:	e0 d2       	rcall	.+1472   	; 0x17f8 <_ZN9EtherCard7copyMacEPhPKh>
    1238:	6b e1       	ldi	r22, 0x1B	; 27
    123a:	75 e0       	ldi	r23, 0x05	; 5
    123c:	87 e0       	ldi	r24, 0x07	; 7
    123e:	93 e0       	ldi	r25, 0x03	; 3
    1240:	db c2       	rjmp	.+1462   	; 0x17f8 <_ZN9EtherCard7copyMacEPhPKh>
    1242:	08 95       	ret

00001244 <_ZL11make_eth_ipv>:
    1244:	87 e0       	ldi	r24, 0x07	; 7
    1246:	93 e0       	ldi	r25, 0x03	; 3
    1248:	f3 df       	rcall	.-26     	; 0x1230 <_ZL7setMACsPKh>
    124a:	6b e1       	ldi	r22, 0x1B	; 27
    124c:	73 e0       	ldi	r23, 0x03	; 3
    124e:	8f e1       	ldi	r24, 0x1F	; 31
    1250:	93 e0       	ldi	r25, 0x03	; 3
    1252:	c5 d2       	rcall	.+1418   	; 0x17de <_ZN9EtherCard6copyIpEPhPKh>
    1254:	67 e1       	ldi	r22, 0x17	; 23
    1256:	75 e0       	ldi	r23, 0x05	; 5
    1258:	8b e1       	ldi	r24, 0x1B	; 27
    125a:	93 e0       	ldi	r25, 0x03	; 3
    125c:	c0 d2       	rcall	.+1408   	; 0x17de <_ZN9EtherCard6copyIpEPhPKh>
    125e:	d9 cf       	rjmp	.-78     	; 0x1212 <_ZL20fill_ip_hdr_checksumv>
    1260:	08 95       	ret

00001262 <_ZL12setMACandIPsPKhS0_>:
    1262:	cf 93       	push	r28
    1264:	df 93       	push	r29
    1266:	eb 01       	movw	r28, r22
    1268:	e3 df       	rcall	.-58     	; 0x1230 <_ZL7setMACsPKh>
    126a:	be 01       	movw	r22, r28
    126c:	8f e1       	ldi	r24, 0x1F	; 31
    126e:	93 e0       	ldi	r25, 0x03	; 3
    1270:	b6 d2       	rcall	.+1388   	; 0x17de <_ZN9EtherCard6copyIpEPhPKh>
    1272:	67 e1       	ldi	r22, 0x17	; 23
    1274:	75 e0       	ldi	r23, 0x05	; 5
    1276:	8b e1       	ldi	r24, 0x1B	; 27
    1278:	93 e0       	ldi	r25, 0x03	; 3
    127a:	b1 d2       	rcall	.+1378   	; 0x17de <_ZN9EtherCard6copyIpEPhPKh>
    127c:	df 91       	pop	r29
    127e:	cf 91       	pop	r28
    1280:	08 95       	ret

00001282 <_ZL16client_store_macPhS_>:
    1282:	cf 93       	push	r28
    1284:	df 93       	push	r29
    1286:	eb 01       	movw	r28, r22
    1288:	44 e0       	ldi	r20, 0x04	; 4
    128a:	50 e0       	ldi	r21, 0x00	; 0
    128c:	bc 01       	movw	r22, r24
    128e:	8d e1       	ldi	r24, 0x1D	; 29
    1290:	93 e0       	ldi	r25, 0x03	; 3
    1292:	0e 94 4f 1b 	call	0x369e	; 0x369e <memcmp>
    1296:	89 2b       	or	r24, r25
    1298:	31 f4       	brne	.+12     	; 0x12a6 <_ZL16client_store_macPhS_+0x24>
    129a:	67 e1       	ldi	r22, 0x17	; 23
    129c:	73 e0       	ldi	r23, 0x03	; 3
    129e:	ce 01       	movw	r24, r28
    12a0:	ab d2       	rcall	.+1366   	; 0x17f8 <_ZN9EtherCard7copyMacEPhPKh>
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	01 c0       	rjmp	.+2      	; 0x12a8 <_ZL16client_store_macPhS_+0x26>
    12a6:	80 e0       	ldi	r24, 0x00	; 0
    12a8:	df 91       	pop	r29
    12aa:	cf 91       	pop	r28
    12ac:	08 95       	ret

000012ae <_ZL17client_arp_whohasPh>:
    12ae:	0f 93       	push	r16
    12b0:	1f 93       	push	r17
    12b2:	cf 93       	push	r28
    12b4:	8c 01       	movw	r16, r24
    12b6:	85 e2       	ldi	r24, 0x25	; 37
    12b8:	92 e0       	ldi	r25, 0x02	; 2
    12ba:	ba df       	rcall	.-140    	; 0x1230 <_ZL7setMACsPKh>
    12bc:	e1 e0       	ldi	r30, 0x01	; 1
    12be:	f3 e0       	ldi	r31, 0x03	; 3
    12c0:	88 e0       	ldi	r24, 0x08	; 8
    12c2:	84 87       	std	Z+12, r24	; 0x0c
    12c4:	c6 e0       	ldi	r28, 0x06	; 6
    12c6:	c5 87       	std	Z+13, r28	; 0x0d
    12c8:	48 e0       	ldi	r20, 0x08	; 8
    12ca:	50 e0       	ldi	r21, 0x00	; 0
    12cc:	6f e7       	ldi	r22, 0x7F	; 127
    12ce:	72 e0       	ldi	r23, 0x02	; 2
    12d0:	8f e0       	ldi	r24, 0x0F	; 15
    12d2:	93 e0       	ldi	r25, 0x03	; 3
    12d4:	0e 94 46 1b 	call	0x368c	; 0x368c <memcpy_P>
    12d8:	e1 e2       	ldi	r30, 0x21	; 33
    12da:	f3 e0       	ldi	r31, 0x03	; 3
    12dc:	df 01       	movw	r26, r30
    12de:	1d 92       	st	X+, r1
    12e0:	ca 95       	dec	r28
    12e2:	e9 f7       	brne	.-6      	; 0x12de <_ZL17client_arp_whohasPh+0x30>
    12e4:	6b e1       	ldi	r22, 0x1B	; 27
    12e6:	75 e0       	ldi	r23, 0x05	; 5
    12e8:	87 e1       	ldi	r24, 0x17	; 23
    12ea:	93 e0       	ldi	r25, 0x03	; 3
    12ec:	85 d2       	rcall	.+1290   	; 0x17f8 <_ZN9EtherCard7copyMacEPhPKh>
    12ee:	b8 01       	movw	r22, r16
    12f0:	87 e2       	ldi	r24, 0x27	; 39
    12f2:	93 e0       	ldi	r25, 0x03	; 3
    12f4:	74 d2       	rcall	.+1256   	; 0x17de <_ZN9EtherCard6copyIpEPhPKh>
    12f6:	67 e1       	ldi	r22, 0x17	; 23
    12f8:	75 e0       	ldi	r23, 0x05	; 5
    12fa:	8d e1       	ldi	r24, 0x1D	; 29
    12fc:	93 e0       	ldi	r25, 0x03	; 3
    12fe:	6f d2       	rcall	.+1246   	; 0x17de <_ZN9EtherCard6copyIpEPhPKh>
    1300:	8a e2       	ldi	r24, 0x2A	; 42
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	c6 dd       	rcall	.-1140   	; 0xe92 <_ZN8ENC28J6010packetSendEj>
    1306:	cf 91       	pop	r28
    1308:	1f 91       	pop	r17
    130a:	0f 91       	pop	r16
    130c:	08 95       	ret

0000130e <_ZN9EtherCard10udpPrepareEjPKhj>:
    130e:	ef 92       	push	r14
    1310:	ff 92       	push	r15
    1312:	0f 93       	push	r16
    1314:	1f 93       	push	r17
    1316:	cf 93       	push	r28
    1318:	df 93       	push	r29
    131a:	18 2f       	mov	r17, r24
    131c:	09 2f       	mov	r16, r25
    131e:	eb 01       	movw	r28, r22
    1320:	f4 2e       	mov	r15, r20
    1322:	e5 2e       	mov	r14, r21
    1324:	87 e1       	ldi	r24, 0x17	; 23
    1326:	95 e0       	ldi	r25, 0x05	; 5
    1328:	4a df       	rcall	.-364    	; 0x11be <_ZL6is_lanPKhS0_>
    132a:	88 23       	and	r24, r24
    132c:	29 f0       	breq	.+10     	; 0x1338 <_ZN9EtherCard10udpPrepareEjPKhj+0x2a>
    132e:	be 01       	movw	r22, r28
    1330:	8c e2       	ldi	r24, 0x2C	; 44
    1332:	95 e0       	ldi	r25, 0x05	; 5
    1334:	96 df       	rcall	.-212    	; 0x1262 <_ZL12setMACandIPsPKhS0_>
    1336:	04 c0       	rjmp	.+8      	; 0x1340 <_ZN9EtherCard10udpPrepareEjPKhj+0x32>
    1338:	be 01       	movw	r22, r28
    133a:	82 e2       	ldi	r24, 0x22	; 34
    133c:	95 e0       	ldi	r25, 0x05	; 5
    133e:	91 df       	rcall	.-222    	; 0x1262 <_ZL12setMACandIPsPKhS0_>
    1340:	88 81       	ld	r24, Y
    1342:	80 7f       	andi	r24, 0xF0	; 240
    1344:	80 3e       	cpi	r24, 0xE0	; 224
    1346:	91 f0       	breq	.+36     	; 0x136c <_ZN9EtherCard10udpPrepareEjPKhj+0x5e>
    1348:	88 81       	ld	r24, Y
    134a:	99 81       	ldd	r25, Y+1	; 0x01
    134c:	aa 81       	ldd	r26, Y+2	; 0x02
    134e:	bb 81       	ldd	r27, Y+3	; 0x03
    1350:	8f 3f       	cpi	r24, 0xFF	; 255
    1352:	9f 4f       	sbci	r25, 0xFF	; 255
    1354:	af 4f       	sbci	r26, 0xFF	; 255
    1356:	bf 4f       	sbci	r27, 0xFF	; 255
    1358:	49 f0       	breq	.+18     	; 0x136c <_ZN9EtherCard10udpPrepareEjPKhj+0x5e>
    135a:	44 e0       	ldi	r20, 0x04	; 4
    135c:	50 e0       	ldi	r21, 0x00	; 0
    135e:	be 01       	movw	r22, r28
    1360:	8f e0       	ldi	r24, 0x0F	; 15
    1362:	95 e0       	ldi	r25, 0x05	; 5
    1364:	0e 94 4f 1b 	call	0x369e	; 0x369e <memcmp>
    1368:	89 2b       	or	r24, r25
    136a:	29 f4       	brne	.+10     	; 0x1376 <_ZN9EtherCard10udpPrepareEjPKhj+0x68>
    136c:	65 e2       	ldi	r22, 0x25	; 37
    136e:	72 e0       	ldi	r23, 0x02	; 2
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	93 e0       	ldi	r25, 0x03	; 3
    1374:	41 d2       	rcall	.+1154   	; 0x17f8 <_ZN9EtherCard7copyMacEPhPKh>
    1376:	c1 e0       	ldi	r28, 0x01	; 1
    1378:	d3 e0       	ldi	r29, 0x03	; 3
    137a:	88 e0       	ldi	r24, 0x08	; 8
    137c:	8c 87       	std	Y+12, r24	; 0x0c
    137e:	1d 86       	std	Y+13, r1	; 0x0d
    1380:	49 e0       	ldi	r20, 0x09	; 9
    1382:	50 e0       	ldi	r21, 0x00	; 0
    1384:	66 e7       	ldi	r22, 0x76	; 118
    1386:	72 e0       	ldi	r23, 0x02	; 2
    1388:	8f e0       	ldi	r24, 0x0F	; 15
    138a:	93 e0       	ldi	r25, 0x03	; 3
    138c:	0e 94 46 1b 	call	0x368c	; 0x368c <memcpy_P>
    1390:	18 8a       	std	Y+16, r1	; 0x10
    1392:	81 e1       	ldi	r24, 0x11	; 17
    1394:	8f 8b       	std	Y+23, r24	; 0x17
    1396:	ec a2       	std	Y+36, r14	; 0x24
    1398:	fd a2       	std	Y+37, r15	; 0x25
    139a:	0a a3       	std	Y+34, r16	; 0x22
    139c:	1b a3       	std	Y+35, r17	; 0x23
    139e:	1e a2       	std	Y+38, r1	; 0x26
    13a0:	18 a6       	std	Y+40, r1	; 0x28
    13a2:	19 a6       	std	Y+41, r1	; 0x29
    13a4:	df 91       	pop	r29
    13a6:	cf 91       	pop	r28
    13a8:	1f 91       	pop	r17
    13aa:	0f 91       	pop	r16
    13ac:	ff 90       	pop	r15
    13ae:	ef 90       	pop	r14
    13b0:	08 95       	ret

000013b2 <_ZN9EtherCard11udpTransmitEj>:
    13b2:	0f 93       	push	r16
    13b4:	1f 93       	push	r17
    13b6:	cf 93       	push	r28
    13b8:	df 93       	push	r29
    13ba:	ec 01       	movw	r28, r24
    13bc:	01 e0       	ldi	r16, 0x01	; 1
    13be:	13 e0       	ldi	r17, 0x03	; 3
    13c0:	4c 96       	adiw	r24, 0x1c	; 28
    13c2:	f8 01       	movw	r30, r16
    13c4:	90 8b       	std	Z+16, r25	; 0x10
    13c6:	81 8b       	std	Z+17, r24	; 0x11
    13c8:	24 df       	rcall	.-440    	; 0x1212 <_ZL20fill_ip_hdr_checksumv>
    13ca:	ce 01       	movw	r24, r28
    13cc:	08 96       	adiw	r24, 0x08	; 8
    13ce:	f8 01       	movw	r30, r16
    13d0:	96 a3       	std	Z+38, r25	; 0x26
    13d2:	87 a3       	std	Z+39, r24	; 0x27
    13d4:	ae 01       	movw	r20, r28
    13d6:	40 5f       	subi	r20, 0xF0	; 240
    13d8:	5f 4f       	sbci	r21, 0xFF	; 255
    13da:	21 e0       	ldi	r18, 0x01	; 1
    13dc:	6a e1       	ldi	r22, 0x1A	; 26
    13de:	88 e2       	ldi	r24, 0x28	; 40
    13e0:	7d de       	rcall	.-774    	; 0x10dc <_ZL13fill_checksumhhjh>
    13e2:	ce 01       	movw	r24, r28
    13e4:	8a 96       	adiw	r24, 0x2a	; 42
    13e6:	55 dd       	rcall	.-1366   	; 0xe92 <_ZN8ENC28J6010packetSendEj>
    13e8:	df 91       	pop	r29
    13ea:	cf 91       	pop	r28
    13ec:	1f 91       	pop	r17
    13ee:	0f 91       	pop	r16
    13f0:	08 95       	ret

000013f2 <_ZN9EtherCard7sendUdpEPKhjjS1_j>:
    13f2:	0f 93       	push	r16
    13f4:	1f 93       	push	r17
    13f6:	cf 93       	push	r28
    13f8:	df 93       	push	r29
    13fa:	d6 2f       	mov	r29, r22
    13fc:	c7 2f       	mov	r28, r23
    13fe:	ca 01       	movw	r24, r20
    1400:	a8 01       	movw	r20, r16
    1402:	b9 01       	movw	r22, r18
    1404:	84 df       	rcall	.-248    	; 0x130e <_ZN9EtherCard10udpPrepareEjPKhj>
    1406:	8d 2f       	mov	r24, r29
    1408:	9c 2f       	mov	r25, r28
    140a:	81 30       	cpi	r24, 0x01	; 1
    140c:	22 e0       	ldi	r18, 0x02	; 2
    140e:	92 07       	cpc	r25, r18
    1410:	10 f0       	brcs	.+4      	; 0x1416 <_ZN9EtherCard7sendUdpEPKhjjS1_j+0x24>
    1412:	80 e0       	ldi	r24, 0x00	; 0
    1414:	92 e0       	ldi	r25, 0x02	; 2
    1416:	cd df       	rcall	.-102    	; 0x13b2 <_ZN9EtherCard11udpTransmitEj>
    1418:	df 91       	pop	r29
    141a:	cf 91       	pop	r28
    141c:	1f 91       	pop	r17
    141e:	0f 91       	pop	r16
    1420:	08 95       	ret

00001422 <_ZN9EtherCard7setGwIpEPKh>:
    1422:	10 92 02 05 	sts	0x0502, r1	; 0x800502 <_ZN9EtherCard8delaycntE+0x1>
    1426:	10 92 01 05 	sts	0x0501, r1	; 0x800501 <_ZN9EtherCard8delaycntE>
    142a:	21 e0       	ldi	r18, 0x01	; 1
    142c:	20 93 21 05 	sts	0x0521, r18	; 0x800521 <_ZL9waitgwmac>
    1430:	bc 01       	movw	r22, r24
    1432:	8b e0       	ldi	r24, 0x0B	; 11
    1434:	95 e0       	ldi	r25, 0x05	; 5
    1436:	d3 c1       	rjmp	.+934    	; 0x17de <_ZN9EtherCard6copyIpEPhPKh>
    1438:	08 95       	ret

0000143a <_ZN9EtherCard22updateBroadcastAddressEv>:
    143a:	cf 93       	push	r28
    143c:	df 93       	push	r29
    143e:	e7 e1       	ldi	r30, 0x17	; 23
    1440:	f5 e0       	ldi	r31, 0x05	; 5
    1442:	c3 e1       	ldi	r28, 0x13	; 19
    1444:	d5 e0       	ldi	r29, 0x05	; 5
    1446:	af e0       	ldi	r26, 0x0F	; 15
    1448:	b5 e0       	ldi	r27, 0x05	; 5
    144a:	2b e1       	ldi	r18, 0x1B	; 27
    144c:	35 e0       	ldi	r19, 0x05	; 5
    144e:	91 91       	ld	r25, Z+
    1450:	89 91       	ld	r24, Y+
    1452:	80 95       	com	r24
    1454:	89 2b       	or	r24, r25
    1456:	8d 93       	st	X+, r24
    1458:	e2 17       	cp	r30, r18
    145a:	f3 07       	cpc	r31, r19
    145c:	c1 f7       	brne	.-16     	; 0x144e <_ZN9EtherCard22updateBroadcastAddressEv+0x14>
    145e:	df 91       	pop	r29
    1460:	cf 91       	pop	r28
    1462:	08 95       	ret

00001464 <_ZN9EtherCard10packetLoopEj>:
	gPB[ICMP_CHECKSUM_P+1]++;
	gPB[ICMP_CHECKSUM_P] += 0x08;
	EtherCard::packetSend(len);
}

uint16_t EtherCard::packetLoop (uint16_t plen) {
    1464:	cf 93       	push	r28
    1466:	df 93       	push	r29
    1468:	ec 01       	movw	r28, r24
    if (plen==0) {
    146a:	00 97       	sbiw	r24, 0x00	; 0
    146c:	09 f0       	breq	.+2      	; 0x1470 <_ZN9EtherCard10packetLoopEj+0xc>
    146e:	3f c0       	rjmp	.+126    	; 0x14ee <_ZN9EtherCard10packetLoopEj+0x8a>
        //Check every 65536 (no-packet) cycles whether we need to retry ARP request for gateway
        if ((waitgwmac & WGW_INITIAL_ARP || waitgwmac & WGW_REFRESHING) &&
    1470:	80 91 21 05 	lds	r24, 0x0521	; 0x800521 <_ZL9waitgwmac>
    1474:	85 70       	andi	r24, 0x05	; 5
    1476:	89 f0       	breq	.+34     	; 0x149a <_ZN9EtherCard10packetLoopEj+0x36>
    1478:	80 91 01 05 	lds	r24, 0x0501	; 0x800501 <_ZN9EtherCard8delaycntE>
    147c:	90 91 02 05 	lds	r25, 0x0502	; 0x800502 <_ZN9EtherCard8delaycntE+0x1>
    1480:	89 2b       	or	r24, r25
    1482:	59 f4       	brne	.+22     	; 0x149a <_ZN9EtherCard10packetLoopEj+0x36>
                delaycnt==0 && isLinkUp()) {
    1484:	f3 dc       	rcall	.-1562   	; 0xe6c <_ZN8ENC28J608isLinkUpEv>
}

uint16_t EtherCard::packetLoop (uint16_t plen) {
    if (plen==0) {
        //Check every 65536 (no-packet) cycles whether we need to retry ARP request for gateway
        if ((waitgwmac & WGW_INITIAL_ARP || waitgwmac & WGW_REFRESHING) &&
    1486:	88 23       	and	r24, r24
    1488:	41 f0       	breq	.+16     	; 0x149a <_ZN9EtherCard10packetLoopEj+0x36>
                delaycnt==0 && isLinkUp()) {
            client_arp_whohas(gwip);
    148a:	8b e0       	ldi	r24, 0x0B	; 11
    148c:	95 e0       	ldi	r25, 0x05	; 5
    148e:	0f df       	rcall	.-482    	; 0x12ae <_ZL17client_arp_whohasPh>
            waitgwmac |= WGW_ACCEPT_ARP_REPLY;
    1490:	80 91 21 05 	lds	r24, 0x0521	; 0x800521 <_ZL9waitgwmac>
    1494:	88 60       	ori	r24, 0x08	; 8
    1496:	80 93 21 05 	sts	0x0521, r24	; 0x800521 <_ZL9waitgwmac>
        }
        delaycnt++;
    149a:	80 91 01 05 	lds	r24, 0x0501	; 0x800501 <_ZN9EtherCard8delaycntE>
    149e:	90 91 02 05 	lds	r25, 0x0502	; 0x800502 <_ZN9EtherCard8delaycntE+0x1>
    14a2:	01 96       	adiw	r24, 0x01	; 1
    14a4:	90 93 02 05 	sts	0x0502, r25	; 0x800502 <_ZN9EtherCard8delaycntE+0x1>
    14a8:	80 93 01 05 	sts	0x0501, r24	; 0x800501 <_ZN9EtherCard8delaycntE>

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, dnsip) && !has_dns_mac && !waiting_for_dns_mac) {
    14ac:	67 e0       	ldi	r22, 0x07	; 7
    14ae:	75 e0       	ldi	r23, 0x05	; 5
    14b0:	87 e1       	ldi	r24, 0x17	; 23
    14b2:	95 e0       	ldi	r25, 0x05	; 5
    14b4:	84 de       	rcall	.-760    	; 0x11be <_ZL6is_lanPKhS0_>
    14b6:	88 23       	and	r24, r24
    14b8:	49 f0       	breq	.+18     	; 0x14cc <_ZN9EtherCard10packetLoopEj+0x68>
    14ba:	80 91 2a 05 	lds	r24, 0x052A	; 0x80052a <_ZL11has_dns_mac>
    14be:	81 11       	cpse	r24, r1
    14c0:	05 c0       	rjmp	.+10     	; 0x14cc <_ZN9EtherCard10packetLoopEj+0x68>
    14c2:	80 91 2b 05 	lds	r24, 0x052B	; 0x80052b <_ZL19waiting_for_dns_mac>
    14c6:	88 23       	and	r24, r24
    14c8:	09 f4       	brne	.+2      	; 0x14cc <_ZN9EtherCard10packetLoopEj+0x68>
    14ca:	dc c0       	rjmp	.+440    	; 0x1684 <_ZN9EtherCard10packetLoopEj+0x220>
            client_arp_whohas(dnsip);
            waiting_for_dns_mac = true;
        }

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, hisip) && !has_dest_mac && !waiting_for_dest_mac) {
    14cc:	63 e0       	ldi	r22, 0x03	; 3
    14ce:	75 e0       	ldi	r23, 0x05	; 5
    14d0:	87 e1       	ldi	r24, 0x17	; 23
    14d2:	95 e0       	ldi	r25, 0x05	; 5
    14d4:	74 de       	rcall	.-792    	; 0x11be <_ZL6is_lanPKhS0_>
    14d6:	88 23       	and	r24, r24
    14d8:	09 f4       	brne	.+2      	; 0x14dc <_ZN9EtherCard10packetLoopEj+0x78>
    14da:	f8 c0       	rjmp	.+496    	; 0x16cc <_ZN9EtherCard10packetLoopEj+0x268>
    14dc:	80 91 28 05 	lds	r24, 0x0528	; 0x800528 <_ZL12has_dest_mac>
    14e0:	81 11       	cpse	r24, r1
    14e2:	f4 c0       	rjmp	.+488    	; 0x16cc <_ZN9EtherCard10packetLoopEj+0x268>
    14e4:	80 91 29 05 	lds	r24, 0x0529	; 0x800529 <_ZL20waiting_for_dest_mac>
    14e8:	81 11       	cpse	r24, r1
    14ea:	f0 c0       	rjmp	.+480    	; 0x16cc <_ZN9EtherCard10packetLoopEj+0x268>
    14ec:	d2 c0       	rjmp	.+420    	; 0x1692 <_ZN9EtherCard10packetLoopEj+0x22e>
    return true;
}

static uint8_t eth_type_is_arp_and_my_ip(uint16_t len) {
    return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
    14ee:	89 32       	cpi	r24, 0x29	; 41
    14f0:	91 05       	cpc	r25, r1
    14f2:	08 f4       	brcc	.+2      	; 0x14f6 <_ZN9EtherCard10packetLoopEj+0x92>
    14f4:	d5 c0       	rjmp	.+426    	; 0x16a0 <_ZN9EtherCard10packetLoopEj+0x23c>
        }
    return true;
}

static uint8_t eth_type_is_arp_and_my_ip(uint16_t len) {
    return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
    14f6:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <_ZN8ENC28J606bufferE+0xc>
    14fa:	88 30       	cpi	r24, 0x08	; 8
    14fc:	09 f0       	breq	.+2      	; 0x1500 <_ZN9EtherCard10packetLoopEj+0x9c>
    14fe:	e6 c0       	rjmp	.+460    	; 0x16cc <_ZN9EtherCard10packetLoopEj+0x268>
    1500:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <_ZN8ENC28J606bufferE+0xd>
    1504:	86 30       	cpi	r24, 0x06	; 6
    1506:	09 f0       	breq	.+2      	; 0x150a <_ZN9EtherCard10packetLoopEj+0xa6>
    1508:	dd c0       	rjmp	.+442    	; 0x16c4 <_ZN9EtherCard10packetLoopEj+0x260>
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
           memcmp(gPB + ETH_ARP_DST_IP_P, EtherCard::myip, IP_LEN) == 0;
    150a:	44 e0       	ldi	r20, 0x04	; 4
    150c:	50 e0       	ldi	r21, 0x00	; 0
    150e:	67 e1       	ldi	r22, 0x17	; 23
    1510:	75 e0       	ldi	r23, 0x05	; 5
    1512:	87 e2       	ldi	r24, 0x27	; 39
    1514:	93 e0       	ldi	r25, 0x03	; 3
    1516:	0e 94 4f 1b 	call	0x369e	; 0x369e <memcmp>
    return true;
}

static uint8_t eth_type_is_arp_and_my_ip(uint16_t len) {
    return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
    151a:	89 2b       	or	r24, r25
    151c:	09 f0       	breq	.+2      	; 0x1520 <_ZN9EtherCard10packetLoopEj+0xbc>
    151e:	d2 c0       	rjmp	.+420    	; 0x16c4 <_ZN9EtherCard10packetLoopEj+0x260>
    EtherCard::copyIp(gPB + IP_SRC_P, EtherCard::myip);
    fill_ip_hdr_checksum();
}

static void make_arp_answer_from_request() {
    setMACs(gPB + ETH_SRC_MAC);
    1520:	c3 c0       	rjmp	.+390    	; 0x16a8 <_ZN9EtherCard10packetLoopEj+0x244>
    1522:	87 e0       	ldi	r24, 0x07	; 7
    1524:	93 e0       	ldi	r25, 0x03	; 3
    1526:	84 de       	rcall	.-760    	; 0x1230 <_ZL7setMACsPKh>
    gPB[ETH_ARP_OPCODE_H_P] = ETH_ARP_OPCODE_REPLY_H_V;
    1528:	e1 e0       	ldi	r30, 0x01	; 1
    152a:	f3 e0       	ldi	r31, 0x03	; 3
    152c:	14 8a       	std	Z+20, r1	; 0x14
    gPB[ETH_ARP_OPCODE_L_P] = ETH_ARP_OPCODE_REPLY_L_V;
    152e:	82 e0       	ldi	r24, 0x02	; 2
    EtherCard::copyMac(gPB + ETH_ARP_DST_MAC_P, gPB + ETH_ARP_SRC_MAC_P);
    1530:	85 8b       	std	Z+21, r24	; 0x15
    1532:	67 e1       	ldi	r22, 0x17	; 23
    1534:	73 e0       	ldi	r23, 0x03	; 3
    1536:	81 e2       	ldi	r24, 0x21	; 33
    1538:	93 e0       	ldi	r25, 0x03	; 3
    EtherCard::copyMac(gPB + ETH_ARP_SRC_MAC_P, EtherCard::mymac);
    153a:	5e d1       	rcall	.+700    	; 0x17f8 <_ZN9EtherCard7copyMacEPhPKh>
    153c:	6b e1       	ldi	r22, 0x1B	; 27
    153e:	75 e0       	ldi	r23, 0x05	; 5
    1540:	87 e1       	ldi	r24, 0x17	; 23
    1542:	93 e0       	ldi	r25, 0x03	; 3
    EtherCard::copyIp(gPB + ETH_ARP_DST_IP_P, gPB + ETH_ARP_SRC_IP_P);
    1544:	59 d1       	rcall	.+690    	; 0x17f8 <_ZN9EtherCard7copyMacEPhPKh>
    1546:	6d e1       	ldi	r22, 0x1D	; 29
    1548:	73 e0       	ldi	r23, 0x03	; 3
    154a:	87 e2       	ldi	r24, 0x27	; 39
    154c:	93 e0       	ldi	r25, 0x03	; 3
    EtherCard::copyIp(gPB + ETH_ARP_SRC_IP_P, EtherCard::myip);
    154e:	47 d1       	rcall	.+654    	; 0x17de <_ZN9EtherCard6copyIpEPhPKh>
    1550:	67 e1       	ldi	r22, 0x17	; 23
    1552:	75 e0       	ldi	r23, 0x05	; 5
    1554:	8d e1       	ldi	r24, 0x1D	; 29
    1556:	93 e0       	ldi	r25, 0x03	; 3
    1558:	42 d1       	rcall	.+644    	; 0x17de <_ZN9EtherCard6copyIpEPhPKh>
    EtherCard::packetSend(42);
    155a:	8a e2       	ldi	r24, 0x2A	; 42
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	99 dc       	rcall	.-1742   	; 0xe92 <_ZN8ENC28J6010packetSendEj>
    1560:	80 91 21 05 	lds	r24, 0x0521	; 0x800521 <_ZL9waitgwmac>

    if (eth_type_is_arp_and_my_ip(plen))
    {   //Service ARP request
        if (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REQ_L_V)
            make_arp_answer_from_request();
        if (waitgwmac & WGW_ACCEPT_ARP_REPLY && (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REPLY_L_V) && client_store_mac(gwip, gwmacaddr))
    1564:	83 ff       	sbrs	r24, 3
    1566:	0e c0       	rjmp	.+28     	; 0x1584 <_ZN9EtherCard10packetLoopEj+0x120>
    1568:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <_ZN8ENC28J606bufferE+0x15>
    156c:	82 30       	cpi	r24, 0x02	; 2
    156e:	51 f4       	brne	.+20     	; 0x1584 <_ZN9EtherCard10packetLoopEj+0x120>
    1570:	62 e2       	ldi	r22, 0x22	; 34
    1572:	75 e0       	ldi	r23, 0x05	; 5
    1574:	8b e0       	ldi	r24, 0x0B	; 11
    1576:	95 e0       	ldi	r25, 0x05	; 5
    1578:	84 de       	rcall	.-760    	; 0x1282 <_ZL16client_store_macPhS_>
    157a:	88 23       	and	r24, r24
    157c:	19 f0       	breq	.+6      	; 0x1584 <_ZN9EtherCard10packetLoopEj+0x120>
    157e:	82 e0       	ldi	r24, 0x02	; 2
            waitgwmac = WGW_HAVE_GW_MAC;
    1580:	80 93 21 05 	sts	0x0521, r24	; 0x800521 <_ZL9waitgwmac>
    1584:	80 91 2a 05 	lds	r24, 0x052A	; 0x80052a <_ZL11has_dns_mac>
        if (!has_dns_mac && waiting_for_dns_mac && client_store_mac(dnsip, destmacaddr)) {
    1588:	81 11       	cpse	r24, r1
    158a:	10 c0       	rjmp	.+32     	; 0x15ac <_ZN9EtherCard10packetLoopEj+0x148>
    158c:	80 91 2b 05 	lds	r24, 0x052B	; 0x80052b <_ZL19waiting_for_dns_mac>
    1590:	88 23       	and	r24, r24
    1592:	61 f0       	breq	.+24     	; 0x15ac <_ZN9EtherCard10packetLoopEj+0x148>
    1594:	6c e2       	ldi	r22, 0x2C	; 44
    1596:	75 e0       	ldi	r23, 0x05	; 5
    1598:	87 e0       	ldi	r24, 0x07	; 7
    159a:	95 e0       	ldi	r25, 0x05	; 5
    159c:	72 de       	rcall	.-796    	; 0x1282 <_ZL16client_store_macPhS_>
    159e:	88 23       	and	r24, r24
    15a0:	29 f0       	breq	.+10     	; 0x15ac <_ZN9EtherCard10packetLoopEj+0x148>
    15a2:	81 e0       	ldi	r24, 0x01	; 1
            has_dns_mac = true;
    15a4:	80 93 2a 05 	sts	0x052A, r24	; 0x80052a <_ZL11has_dns_mac>
    15a8:	10 92 2b 05 	sts	0x052B, r1	; 0x80052b <_ZL19waiting_for_dns_mac>
            waiting_for_dns_mac = false;
    15ac:	80 91 28 05 	lds	r24, 0x0528	; 0x800528 <_ZL12has_dest_mac>
        }
        if (!has_dest_mac && waiting_for_dest_mac && client_store_mac(hisip, destmacaddr)) {
    15b0:	81 11       	cpse	r24, r1
    15b2:	8c c0       	rjmp	.+280    	; 0x16cc <_ZN9EtherCard10packetLoopEj+0x268>
    15b4:	80 91 29 05 	lds	r24, 0x0529	; 0x800529 <_ZL20waiting_for_dest_mac>
    15b8:	88 23       	and	r24, r24
    15ba:	09 f4       	brne	.+2      	; 0x15be <_ZN9EtherCard10packetLoopEj+0x15a>
    15bc:	87 c0       	rjmp	.+270    	; 0x16cc <_ZN9EtherCard10packetLoopEj+0x268>
    15be:	6c e2       	ldi	r22, 0x2C	; 44
    15c0:	75 e0       	ldi	r23, 0x05	; 5
    15c2:	83 e0       	ldi	r24, 0x03	; 3
    15c4:	95 e0       	ldi	r25, 0x05	; 5
    15c6:	5d de       	rcall	.-838    	; 0x1282 <_ZL16client_store_macPhS_>
    15c8:	88 23       	and	r24, r24
    15ca:	09 f4       	brne	.+2      	; 0x15ce <_ZN9EtherCard10packetLoopEj+0x16a>
    15cc:	7f c0       	rjmp	.+254    	; 0x16cc <_ZN9EtherCard10packetLoopEj+0x268>
    15ce:	81 e0       	ldi	r24, 0x01	; 1
            has_dest_mac = true;
    15d0:	80 93 28 05 	sts	0x0528, r24	; 0x800528 <_ZL12has_dest_mac>
    15d4:	10 92 29 05 	sts	0x0529, r1	; 0x800529 <_ZL20waiting_for_dest_mac>
            waiting_for_dest_mac = false;
    15d8:	79 c0       	rjmp	.+242    	; 0x16cc <_ZN9EtherCard10packetLoopEj+0x268>
    15da:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <_ZN8ENC28J606bufferE+0xc>
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
           memcmp(gPB + ETH_ARP_DST_IP_P, EtherCard::myip, IP_LEN) == 0;
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
    15de:	88 30       	cpi	r24, 0x08	; 8
    15e0:	09 f0       	breq	.+2      	; 0x15e4 <_ZN9EtherCard10packetLoopEj+0x180>
    15e2:	74 c0       	rjmp	.+232    	; 0x16cc <_ZN9EtherCard10packetLoopEj+0x268>
    15e4:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <_ZN8ENC28J606bufferE+0xd>
    15e8:	81 11       	cpse	r24, r1
    15ea:	70 c0       	rjmp	.+224    	; 0x16cc <_ZN9EtherCard10packetLoopEj+0x268>
    15ec:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <_ZN8ENC28J606bufferE+0xe>
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
    15f0:	85 34       	cpi	r24, 0x45	; 69
    15f2:	09 f0       	breq	.+2      	; 0x15f6 <_ZN9EtherCard10packetLoopEj+0x192>
    15f4:	6b c0       	rjmp	.+214    	; 0x16cc <_ZN9EtherCard10packetLoopEj+0x268>
    15f6:	44 e0       	ldi	r20, 0x04	; 4
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
           (memcmp(gPB + IP_DST_P, EtherCard::myip, IP_LEN) == 0  //not my IP
    15f8:	50 e0       	ldi	r21, 0x00	; 0
    15fa:	67 e1       	ldi	r22, 0x17	; 23
    15fc:	75 e0       	ldi	r23, 0x05	; 5
    15fe:	8f e1       	ldi	r24, 0x1F	; 31
    1600:	93 e0       	ldi	r25, 0x03	; 3
    1602:	0e 94 4f 1b 	call	0x369e	; 0x369e <memcmp>
    1606:	89 2b       	or	r24, r25
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
    1608:	09 f4       	brne	.+2      	; 0x160c <_ZN9EtherCard10packetLoopEj+0x1a8>
    160a:	54 c0       	rjmp	.+168    	; 0x16b4 <_ZN9EtherCard10packetLoopEj+0x250>
    160c:	44 e0       	ldi	r20, 0x04	; 4
           (memcmp(gPB + IP_DST_P, EtherCard::myip, IP_LEN) == 0  //not my IP
            || (memcmp(gPB + IP_DST_P, EtherCard::broadcastip, IP_LEN) == 0) //not subnet broadcast
    160e:	50 e0       	ldi	r21, 0x00	; 0
    1610:	6f e0       	ldi	r22, 0x0F	; 15
    1612:	75 e0       	ldi	r23, 0x05	; 5
    1614:	8f e1       	ldi	r24, 0x1F	; 31
    1616:	93 e0       	ldi	r25, 0x03	; 3
    1618:	0e 94 4f 1b 	call	0x369e	; 0x369e <memcmp>
    161c:	89 2b       	or	r24, r25
    161e:	09 f4       	brne	.+2      	; 0x1622 <_ZN9EtherCard10packetLoopEj+0x1be>
    1620:	49 c0       	rjmp	.+146    	; 0x16b4 <_ZN9EtherCard10packetLoopEj+0x250>
    1622:	44 e0       	ldi	r20, 0x04	; 4
            || (memcmp(gPB + IP_DST_P, allOnes, IP_LEN) == 0)); //not global broadcasts
    1624:	50 e0       	ldi	r21, 0x00	; 0
    1626:	65 e2       	ldi	r22, 0x25	; 37
    1628:	72 e0       	ldi	r23, 0x02	; 2
    162a:	8f e1       	ldi	r24, 0x1F	; 31
    162c:	93 e0       	ldi	r25, 0x03	; 3
    162e:	0e 94 4f 1b 	call	0x369e	; 0x369e <memcmp>
    1632:	89 2b       	or	r24, r25
    1634:	09 f0       	breq	.+2      	; 0x1638 <_ZN9EtherCard10packetLoopEj+0x1d4>
    1636:	4a c0       	rjmp	.+148    	; 0x16cc <_ZN9EtherCard10packetLoopEj+0x268>
    1638:	3d c0       	rjmp	.+122    	; 0x16b4 <_ZN9EtherCard10packetLoopEj+0x250>
    163a:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <_ZN8ENC28J606bufferE+0x22>
        //!@todo Add other protocols (and make each optional at compile time)
        return 0;
    }
	
	//To handle pinging
	if (gPB[IP_PROTO_P]==IP_PROTO_ICMP_V && gPB[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V)
    163e:	88 30       	cpi	r24, 0x08	; 8
    1640:	c9 f4       	brne	.+50     	; 0x1674 <_ZN9EtherCard10packetLoopEj+0x210>
	{   //Service ICMP echo request (ping)
		if (icmp_cb)
    1642:	e0 91 32 05 	lds	r30, 0x0532	; 0x800532 <_ZL7icmp_cb>
    1646:	f0 91 33 05 	lds	r31, 0x0533	; 0x800533 <_ZL7icmp_cb+0x1>
    164a:	30 97       	sbiw	r30, 0x00	; 0
    164c:	19 f0       	breq	.+6      	; 0x1654 <_ZN9EtherCard10packetLoopEj+0x1f0>
		(*icmp_cb)(&(gPB[IP_SRC_P]));
    164e:	8b e1       	ldi	r24, 0x1B	; 27
    1650:	93 e0       	ldi	r25, 0x03	; 3
    1652:	19 95       	eicall
void EtherCard::registerPingCallback (void (*callback)(uint8_t *srcip)) {
    icmp_cb = callback;
}

static void make_echo_reply_from_request(uint16_t len) {
	make_eth_ip();
    1654:	f7 dd       	rcall	.-1042   	; 0x1244 <_ZL11make_eth_ipv>
	gPB[ICMP_TYPE_P] = ICMP_TYPE_ECHOREPLY_V;
    1656:	e1 e0       	ldi	r30, 0x01	; 1
    1658:	f3 e0       	ldi	r31, 0x03	; 3
	if (gPB[ICMP_CHECKSUM_P] > (0xFF-0x08))
    165a:	12 a2       	std	Z+34, r1	; 0x22
    165c:	84 a1       	ldd	r24, Z+36	; 0x24
    165e:	88 3f       	cpi	r24, 0xF8	; 248
	gPB[ICMP_CHECKSUM_P+1]++;
    1660:	18 f0       	brcs	.+6      	; 0x1668 <_ZN9EtherCard10packetLoopEj+0x204>
    1662:	95 a1       	ldd	r25, Z+37	; 0x25
    1664:	9f 5f       	subi	r25, 0xFF	; 255
	gPB[ICMP_CHECKSUM_P] += 0x08;
    1666:	95 a3       	std	Z+37, r25	; 0x25
    1668:	88 5f       	subi	r24, 0xF8	; 248
	EtherCard::packetSend(len);
    166a:	80 93 25 03 	sts	0x0325, r24	; 0x800325 <_ZN8ENC28J606bufferE+0x24>
    166e:	ce 01       	movw	r24, r28
    1670:	10 dc       	rcall	.-2016   	; 0xe92 <_ZN8ENC28J6010packetSendEj>
		make_echo_reply_from_request(plen);
		return 0;
	}

#if ETHERCARD_UDPSERVER
    if (ether.udpServerListening() && gPB[IP_PROTO_P]==IP_PROTO_UDP_V)
    1672:	2c c0       	rjmp	.+88     	; 0x16cc <_ZN9EtherCard10packetLoopEj+0x268>
    1674:	4a d0       	rcall	.+148    	; 0x170a <_ZN9EtherCard18udpServerListeningEv>
    1676:	88 23       	and	r24, r24
    1678:	49 f1       	breq	.+82     	; 0x16cc <_ZN9EtherCard10packetLoopEj+0x268>
    167a:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <_ZN8ENC28J606bufferE+0x17>
    167e:	81 31       	cpi	r24, 0x11	; 17
    1680:	29 f5       	brne	.+74     	; 0x16cc <_ZN9EtherCard10packetLoopEj+0x268>
        }
        delaycnt++;

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, dnsip) && !has_dns_mac && !waiting_for_dns_mac) {
            client_arp_whohas(dnsip);
    1682:	1d c0       	rjmp	.+58     	; 0x16be <_ZN9EtherCard10packetLoopEj+0x25a>
    1684:	87 e0       	ldi	r24, 0x07	; 7
    1686:	95 e0       	ldi	r25, 0x05	; 5
    1688:	12 de       	rcall	.-988    	; 0x12ae <_ZL17client_arp_whohasPh>
            waiting_for_dns_mac = true;
    168a:	81 e0       	ldi	r24, 0x01	; 1
    168c:	80 93 2b 05 	sts	0x052B, r24	; 0x80052b <_ZL19waiting_for_dns_mac>
    1690:	1d cf       	rjmp	.-454    	; 0x14cc <_ZN9EtherCard10packetLoopEj+0x68>
        }

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, hisip) && !has_dest_mac && !waiting_for_dest_mac) {
            client_arp_whohas(hisip);
    1692:	83 e0       	ldi	r24, 0x03	; 3
    1694:	95 e0       	ldi	r25, 0x05	; 5
    1696:	0b de       	rcall	.-1002   	; 0x12ae <_ZL17client_arp_whohasPh>
    1698:	81 e0       	ldi	r24, 0x01	; 1
            waiting_for_dest_mac = true;
    169a:	80 93 29 05 	sts	0x0529, r24	; 0x800529 <_ZL20waiting_for_dest_mac>
    169e:	16 c0       	rjmp	.+44     	; 0x16cc <_ZN9EtherCard10packetLoopEj+0x268>
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
    16a0:	8a 97       	sbiw	r24, 0x2a	; 42
    16a2:	08 f0       	brcs	.+2      	; 0x16a6 <_ZN9EtherCard10packetLoopEj+0x242>
    16a4:	9a cf       	rjmp	.-204    	; 0x15da <_ZN9EtherCard10packetLoopEj+0x176>
    16a6:	12 c0       	rjmp	.+36     	; 0x16cc <_ZN9EtherCard10packetLoopEj+0x268>
        return 0;
    }

    if (eth_type_is_arp_and_my_ip(plen))
    {   //Service ARP request
        if (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REQ_L_V)
    16a8:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <_ZN8ENC28J606bufferE+0x15>
    16ac:	81 30       	cpi	r24, 0x01	; 1
    16ae:	09 f0       	breq	.+2      	; 0x16b2 <_ZN9EtherCard10packetLoopEj+0x24e>
    16b0:	57 cf       	rjmp	.-338    	; 0x1560 <_ZN9EtherCard10packetLoopEj+0xfc>
    16b2:	37 cf       	rjmp	.-402    	; 0x1522 <_ZN9EtherCard10packetLoopEj+0xbe>
        //!@todo Add other protocols (and make each optional at compile time)
        return 0;
    }
	
	//To handle pinging
	if (gPB[IP_PROTO_P]==IP_PROTO_ICMP_V && gPB[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V)
    16b4:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <_ZN8ENC28J606bufferE+0x17>
    16b8:	81 30       	cpi	r24, 0x01	; 1
    16ba:	e1 f6       	brne	.-72     	; 0x1674 <_ZN9EtherCard10packetLoopEj+0x210>
    16bc:	be cf       	rjmp	.-132    	; 0x163a <_ZN9EtherCard10packetLoopEj+0x1d6>
	}

#if ETHERCARD_UDPSERVER
    if (ether.udpServerListening() && gPB[IP_PROTO_P]==IP_PROTO_UDP_V)
    {   //Call UDP server handler (callback) if one is defined for this packet
        if(ether.udpServerHasProcessedPacket(plen))
    16be:	ce 01       	movw	r24, r28
    16c0:	2b d0       	rcall	.+86     	; 0x1718 <_ZN9EtherCard27udpServerHasProcessedPacketEj>
    16c2:	04 c0       	rjmp	.+8      	; 0x16cc <_ZN9EtherCard10packetLoopEj+0x268>
    16c4:	ca 32       	cpi	r28, 0x2A	; 42
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
    16c6:	d1 05       	cpc	r29, r1
    16c8:	08 f0       	brcs	.+2      	; 0x16cc <_ZN9EtherCard10packetLoopEj+0x268>
    16ca:	8c cf       	rjmp	.-232    	; 0x15e4 <_ZN9EtherCard10packetLoopEj+0x180>
    16cc:	80 e0       	ldi	r24, 0x00	; 0

    if (plen<54 || gPB[IP_PROTO_P]!=IP_PROTO_TCP_V )
        return 0; //from here on we are only interested in TCP-packets; these are longer than 54 bytes
		
	return 0;
}
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	df 91       	pop	r29
    16d2:	cf 91       	pop	r28
    16d4:	08 95       	ret

000016d6 <_ZN9EtherCard21udpServerListenOnPortEPFvjPhjPKcjEj>:
    16d6:	9c 01       	movw	r18, r24
    {
        if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((uint8_t) listeners[i].port)) {
            listeners[i].listening = true;
        }
    }
}
    16d8:	90 91 34 05 	lds	r25, 0x0534	; 0x800534 <numListeners>
    16dc:	98 30       	cpi	r25, 0x08	; 8
    16de:	a0 f4       	brcc	.+40     	; 0x1708 <_ZN9EtherCard21udpServerListenOnPortEPFvjPhjPKcjEj+0x32>
    16e0:	e9 2f       	mov	r30, r25
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	af 01       	movw	r20, r30
    16e6:	44 0f       	add	r20, r20
    16e8:	55 1f       	adc	r21, r21
    16ea:	44 0f       	add	r20, r20
    16ec:	55 1f       	adc	r21, r21
    16ee:	e4 0f       	add	r30, r20
    16f0:	f5 1f       	adc	r31, r21
    16f2:	eb 5c       	subi	r30, 0xCB	; 203
    16f4:	fa 4f       	sbci	r31, 0xFA	; 250
    16f6:	31 83       	std	Z+1, r19	; 0x01
    16f8:	20 83       	st	Z, r18
    16fa:	73 83       	std	Z+3, r23	; 0x03
    16fc:	62 83       	std	Z+2, r22	; 0x02
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	84 83       	std	Z+4, r24	; 0x04
    1702:	9f 5f       	subi	r25, 0xFF	; 255
    1704:	90 93 34 05 	sts	0x0534, r25	; 0x800534 <numListeners>
    1708:	08 95       	ret

0000170a <_ZN9EtherCard18udpServerListeningEv>:

bool EtherCard::udpServerListening() {
    return numListeners > 0;
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	90 91 34 05 	lds	r25, 0x0534	; 0x800534 <numListeners>
    1710:	91 11       	cpse	r25, r1
    1712:	01 c0       	rjmp	.+2      	; 0x1716 <_ZN9EtherCard18udpServerListeningEv+0xc>
    1714:	80 e0       	ldi	r24, 0x00	; 0
}
    1716:	08 95       	ret

00001718 <_ZN9EtherCard27udpServerHasProcessedPacketEj>:

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    1718:	8f 92       	push	r8
    171a:	9f 92       	push	r9
    171c:	bf 92       	push	r11
    171e:	cf 92       	push	r12
    1720:	df 92       	push	r13
    1722:	ef 92       	push	r14
    1724:	ff 92       	push	r15
    1726:	0f 93       	push	r16
    1728:	1f 93       	push	r17
    172a:	cf 93       	push	r28
    172c:	df 93       	push	r29
    bool packetProcessed = false;
    for(int i = 0; i < numListeners; i++)
    172e:	80 91 34 05 	lds	r24, 0x0534	; 0x800534 <numListeners>
    1732:	88 23       	and	r24, r24
    1734:	09 f4       	brne	.+2      	; 0x1738 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x20>
    1736:	46 c0       	rjmp	.+140    	; 0x17c4 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0xac>
    1738:	c5 e3       	ldi	r28, 0x35	; 53
    173a:	d5 e0       	ldi	r29, 0x05	; 5
    173c:	e1 2c       	mov	r14, r1
    173e:	f1 2c       	mov	r15, r1
    1740:	80 e0       	ldi	r24, 0x00	; 0
    {
        if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((uint8_t) listeners[i].port) && listeners[i].listening)
    1742:	0f 2e       	mov	r0, r31
    1744:	f1 e0       	ldi	r31, 0x01	; 1
    1746:	cf 2e       	mov	r12, r31
    1748:	f3 e0       	ldi	r31, 0x03	; 3
    174a:	df 2e       	mov	r13, r31
    174c:	f0 2d       	mov	r31, r0
                listeners[i].port,
                gPB + IP_SRC_P,
                (gPB[UDP_SRC_PORT_H_P] << 8) | gPB[UDP_SRC_PORT_L_P],
                (const char *) (gPB + UDP_DATA_P),
                datalen);
            packetProcessed = true;
    174e:	bb 24       	eor	r11, r11
    1750:	b3 94       	inc	r11

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    bool packetProcessed = false;
    for(int i = 0; i < numListeners; i++)
    {
        if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((uint8_t) listeners[i].port) && listeners[i].listening)
    1752:	aa 81       	ldd	r26, Y+2	; 0x02
    1754:	bb 81       	ldd	r27, Y+3	; 0x03
    1756:	f6 01       	movw	r30, r12
    1758:	24 a1       	ldd	r18, Z+36	; 0x24
    175a:	30 e0       	ldi	r19, 0x00	; 0
    175c:	4b 2f       	mov	r20, r27
    175e:	55 27       	eor	r21, r21
    1760:	24 17       	cp	r18, r20
    1762:	35 07       	cpc	r19, r21
    1764:	21 f5       	brne	.+72     	; 0x17ae <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x96>
    1766:	25 a1       	ldd	r18, Z+37	; 0x25
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	ad 01       	movw	r20, r26
    176c:	55 27       	eor	r21, r21
    176e:	24 17       	cp	r18, r20
    1770:	35 07       	cpc	r19, r21
    1772:	e9 f4       	brne	.+58     	; 0x17ae <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x96>
    1774:	9c 81       	ldd	r25, Y+4	; 0x04
    1776:	99 23       	and	r25, r25
    1778:	d1 f0       	breq	.+52     	; 0x17ae <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x96>
            listeners[i].callback(
                listeners[i].port,
                gPB + IP_SRC_P,
                (gPB[UDP_SRC_PORT_H_P] << 8) | gPB[UDP_SRC_PORT_L_P],
                (const char *) (gPB + UDP_DATA_P),
                datalen);
    177a:	07 a1       	ldd	r16, Z+39	; 0x27
    177c:	10 e0       	ldi	r17, 0x00	; 0
    177e:	08 50       	subi	r16, 0x08	; 8
    1780:	11 09       	sbc	r17, r1
    1782:	86 a1       	ldd	r24, Z+38	; 0x26
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	98 2f       	mov	r25, r24
    1788:	88 27       	eor	r24, r24
    178a:	08 0f       	add	r16, r24
    178c:	19 1f       	adc	r17, r25
    178e:	42 a1       	ldd	r20, Z+34	; 0x22
    1790:	50 e0       	ldi	r21, 0x00	; 0
    1792:	54 2f       	mov	r21, r20
    1794:	44 27       	eor	r20, r20
    1796:	83 a1       	ldd	r24, Z+35	; 0x23
    1798:	48 2b       	or	r20, r24
    179a:	88 80       	ld	r8, Y
    179c:	99 80       	ldd	r9, Y+1	; 0x01
    179e:	2b e2       	ldi	r18, 0x2B	; 43
    17a0:	33 e0       	ldi	r19, 0x03	; 3
    17a2:	6b e1       	ldi	r22, 0x1B	; 27
    17a4:	73 e0       	ldi	r23, 0x03	; 3
    17a6:	cd 01       	movw	r24, r26
    17a8:	f4 01       	movw	r30, r8
    17aa:	19 95       	eicall
            packetProcessed = true;
    17ac:	8b 2d       	mov	r24, r11
    return numListeners > 0;
}

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    bool packetProcessed = false;
    for(int i = 0; i < numListeners; i++)
    17ae:	ff ef       	ldi	r31, 0xFF	; 255
    17b0:	ef 1a       	sub	r14, r31
    17b2:	ff 0a       	sbc	r15, r31
    17b4:	25 96       	adiw	r28, 0x05	; 5
    17b6:	20 91 34 05 	lds	r18, 0x0534	; 0x800534 <numListeners>
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	e2 16       	cp	r14, r18
    17be:	f3 06       	cpc	r15, r19
    17c0:	44 f2       	brlt	.-112    	; 0x1752 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x3a>
    17c2:	01 c0       	rjmp	.+2      	; 0x17c6 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0xae>
bool EtherCard::udpServerListening() {
    return numListeners > 0;
}

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    bool packetProcessed = false;
    17c4:	80 e0       	ldi	r24, 0x00	; 0
                datalen);
            packetProcessed = true;
        }
    }
    return packetProcessed;
}
    17c6:	df 91       	pop	r29
    17c8:	cf 91       	pop	r28
    17ca:	1f 91       	pop	r17
    17cc:	0f 91       	pop	r16
    17ce:	ff 90       	pop	r15
    17d0:	ef 90       	pop	r14
    17d2:	df 90       	pop	r13
    17d4:	cf 90       	pop	r12
    17d6:	bf 90       	pop	r11
    17d8:	9f 90       	pop	r9
    17da:	8f 90       	pop	r8
    17dc:	08 95       	ret

000017de <_ZN9EtherCard6copyIpEPhPKh>:
#include "../Peripherals/HardwareSerial.h"
#include <stdlib.h>
#include <ctype.h>

void EtherCard::copyIp (uint8_t *dst, const uint8_t *src) {
    memcpy(dst, src, IP_LEN);
    17de:	fb 01       	movw	r30, r22
    17e0:	20 81       	ld	r18, Z
    17e2:	31 81       	ldd	r19, Z+1	; 0x01
    17e4:	fc 01       	movw	r30, r24
    17e6:	31 83       	std	Z+1, r19	; 0x01
    17e8:	20 83       	st	Z, r18
    17ea:	fb 01       	movw	r30, r22
    17ec:	22 81       	ldd	r18, Z+2	; 0x02
    17ee:	33 81       	ldd	r19, Z+3	; 0x03
    17f0:	fc 01       	movw	r30, r24
    17f2:	33 83       	std	Z+3, r19	; 0x03
    17f4:	22 83       	std	Z+2, r18	; 0x02
    17f6:	08 95       	ret

000017f8 <_ZN9EtherCard7copyMacEPhPKh>:
}

void EtherCard::copyMac (uint8_t *dst, const uint8_t *src) {
    17f8:	dc 01       	movw	r26, r24
    memcpy(dst, src, ETH_LEN);
    17fa:	96 e0       	ldi	r25, 0x06	; 6
    17fc:	fb 01       	movw	r30, r22
    17fe:	01 90       	ld	r0, Z+
    1800:	0d 92       	st	X+, r0
    1802:	9a 95       	dec	r25
    1804:	e1 f7       	brne	.-8      	; 0x17fe <_ZN9EtherCard7copyMacEPhPKh+0x6>
    1806:	08 95       	ret

00001808 <_ZN9EtherComm13CheckChecksumEPKch>:
	}
}

bool EtherComm::CheckChecksum(const char *data, uint8_t len){
  //data++; //Ignore first byte, the start byte.
  uint8_t checksum = (uint8_t)(*(data++)); //Start by 'adding' the command to the checksum
    1808:	fc 01       	movw	r30, r24
    180a:	20 81       	ld	r18, Z
  checksum += (uint8_t)(*(data++));
    180c:	dc 01       	movw	r26, r24
    180e:	12 96       	adiw	r26, 0x02	; 2
    1810:	81 81       	ldd	r24, Z+1	; 0x01
    1812:	92 2f       	mov	r25, r18
    1814:	98 0f       	add	r25, r24
  while(len-- > 0){
    1816:	3f ef       	ldi	r19, 0xFF	; 255
    1818:	36 0f       	add	r19, r22
    181a:	66 23       	and	r22, r22
    181c:	61 f0       	breq	.+24     	; 0x1836 <_ZN9EtherComm13CheckChecksumEPKch+0x2e>
    181e:	fd 01       	movw	r30, r26
    1820:	83 2f       	mov	r24, r19
    checksum += (uint8_t)(*(data++));
    1822:	21 91       	ld	r18, Z+
    1824:	92 0f       	add	r25, r18

bool EtherComm::CheckChecksum(const char *data, uint8_t len){
  //data++; //Ignore first byte, the start byte.
  uint8_t checksum = (uint8_t)(*(data++)); //Start by 'adding' the command to the checksum
  checksum += (uint8_t)(*(data++));
  while(len-- > 0){
    1826:	81 50       	subi	r24, 0x01	; 1
    1828:	e0 f7       	brcc	.-8      	; 0x1822 <_ZN9EtherComm13CheckChecksumEPKch+0x1a>
    182a:	23 2f       	mov	r18, r19
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	2f 5f       	subi	r18, 0xFF	; 255
    1830:	3f 4f       	sbci	r19, 0xFF	; 255
    1832:	a2 0f       	add	r26, r18
    1834:	b3 1f       	adc	r27, r19
    checksum += (uint8_t)(*(data++));
  }
//  Serial.println((uint8_t)(checksum & CHECKSUM_MASK));
  return (checksum & CHECKSUM_MASK) == (uint8_t)(*data);
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	2c 91       	ld	r18, X
    183a:	29 13       	cpse	r18, r25
    183c:	80 e0       	ldi	r24, 0x00	; 0
}
    183e:	08 95       	ret

00001840 <_Z10udpReceivejPhjPKcj>:

//char EtherComm::buffer[BUFFER_SIZE];
uint8_t* EtherComm::buffer = ether.buffer + UDP_DATA_P;

//callback that prints received packets to the serial port
void udpReceive(uint16_t dest_port, uint8_t src_ip[IP_LEN], uint16_t src_port, const char *data, uint16_t packetLen){
    1840:	0f 93       	push	r16
    1842:	1f 93       	push	r17
    1844:	cf 93       	push	r28
    1846:	df 93       	push	r29
	}
	Serial.println();
	Serial.print("Checksum: ");
	Serial.println((uint8_t)(*index));
*/	
	if(packetLen >= 3){ //At minimum, start byte, command, and checksum.
    1848:	a8 01       	movw	r20, r16
    184a:	43 50       	subi	r20, 0x03	; 3
    184c:	51 09       	sbc	r21, r1
    184e:	4f 3f       	cpi	r20, 0xFF	; 255
    1850:	51 05       	cpc	r21, r1
    1852:	09 f0       	breq	.+2      	; 0x1856 <_Z10udpReceivejPhjPKcj+0x16>
    1854:	88 f4       	brcc	.+34     	; 0x1878 <_Z10udpReceivejPhjPKcj+0x38>
		if(packetLen <= 258){
			uint8_t dataLen = (uint8_t)(packetLen - 3);
			if((uint8_t)data[0] == START_BYTE){
    1856:	f9 01       	movw	r30, r18
    1858:	80 81       	ld	r24, Z
    185a:	8f 3f       	cpi	r24, 0xFF	; 255
    185c:	69 f4       	brne	.+26     	; 0x1878 <_Z10udpReceivejPhjPKcj+0x38>
    185e:	e9 01       	movw	r28, r18
	Serial.print("Checksum: ");
	Serial.println((uint8_t)(*index));
*/	
	if(packetLen >= 3){ //At minimum, start byte, command, and checksum.
		if(packetLen <= 258){
			uint8_t dataLen = (uint8_t)(packetLen - 3);
    1860:	03 50       	subi	r16, 0x03	; 3
			if((uint8_t)data[0] == START_BYTE){
			//		Serial.print("Computed Checksum: ");
				if(EtherComm::CheckChecksum(data, dataLen)){
    1862:	60 2f       	mov	r22, r16
    1864:	c9 01       	movw	r24, r18
    1866:	d0 df       	rcall	.-96     	; 0x1808 <_ZN9EtherComm13CheckChecksumEPKch>
    1868:	88 23       	and	r24, r24
    186a:	31 f0       	breq	.+12     	; 0x1878 <_Z10udpReceivejPhjPKcj+0x38>
					EtherComm::CommandReceived((uint8_t)data[1], (const uint8_t*)(data + 2), dataLen);
    186c:	be 01       	movw	r22, r28
    186e:	6e 5f       	subi	r22, 0xFE	; 254
    1870:	7f 4f       	sbci	r23, 0xFF	; 255
    1872:	40 2f       	mov	r20, r16
    1874:	89 81       	ldd	r24, Y+1	; 0x01
    1876:	91 d9       	rcall	.-3294   	; 0xb9a <_ZN9EtherComm15CommandReceivedEhPKhh>
				}
			}
		}
	}
}
    1878:	df 91       	pop	r29
    187a:	cf 91       	pop	r28
    187c:	1f 91       	pop	r17
    187e:	0f 91       	pop	r16
    1880:	08 95       	ret

00001882 <_ZN9EtherComm5beginEjjRVhS1_h>:
  }
//  Serial.println((uint8_t)(checksum & CHECKSUM_MASK));
  return (checksum & CHECKSUM_MASK) == (uint8_t)(*data);
}

bool EtherComm::begin(uint16_t recvPort, uint16_t destPort, Register& csDDR, Register& csPort, uint8_t csPin){
    1882:	0f 93       	push	r16
    1884:	cf 93       	push	r28
    1886:	df 93       	push	r29
    1888:	ec 01       	movw	r28, r24
    188a:	ca 01       	movw	r24, r20
    188c:	a9 01       	movw	r20, r18
    188e:	20 2f       	mov	r18, r16
  EtherComm::_recvPort = recvPort;
    1890:	d0 93 60 05 	sts	0x0560, r29	; 0x800560 <_ZN9EtherComm9_recvPortE+0x1>
    1894:	c0 93 5f 05 	sts	0x055F, r28	; 0x80055f <_ZN9EtherComm9_recvPortE>
  EtherComm::_destPort = destPort;
    1898:	70 93 5e 05 	sts	0x055E, r23	; 0x80055e <_ZN9EtherComm9_destPortE+0x1>
    189c:	60 93 5d 05 	sts	0x055D, r22	; 0x80055d <_ZN9EtherComm9_destPortE>
  
  if (ether.begin(EtherComm::_mymac, csDDR, csPort, csPin) == 0) return false;
    18a0:	bc 01       	movw	r22, r24
    18a2:	86 e0       	ldi	r24, 0x06	; 6
    18a4:	92 e0       	ldi	r25, 0x02	; 2
    18a6:	d3 db       	rcall	.-2138   	; 0x104e <_ZN9EtherCard5beginEPKhRVhS3_h>
    18a8:	88 23       	and	r24, r24
    18aa:	79 f0       	breq	.+30     	; 0x18ca <_ZN9EtherComm5beginEjjRVhS1_h+0x48>
  ether.staticSetup(EtherComm::_myip, EtherComm::_gwip);
    18ac:	20 e0       	ldi	r18, 0x00	; 0
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	40 e0       	ldi	r20, 0x00	; 0
    18b2:	50 e0       	ldi	r21, 0x00	; 0
    18b4:	6c e0       	ldi	r22, 0x0C	; 12
    18b6:	72 e0       	ldi	r23, 0x02	; 2
    18b8:	80 e1       	ldi	r24, 0x10	; 16
    18ba:	92 e0       	ldi	r25, 0x02	; 2
    18bc:	e1 db       	rcall	.-2110   	; 0x1080 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_>
  ether.printIp("GW:  ", ether.gwip);
  ether.printIp("DNS: ", ether.dnsip);
  */
  
  //Register the udpSerialPrint() method to listen to port the receive port.
  ether.udpServerListenOnPort(&udpReceive, recvPort);
    18be:	be 01       	movw	r22, r28
    18c0:	80 e2       	ldi	r24, 0x20	; 32
    18c2:	9c e0       	ldi	r25, 0x0C	; 12
    18c4:	08 df       	rcall	.-496    	; 0x16d6 <_ZN9EtherCard21udpServerListenOnPortEPFvjPhjPKcjEj>
  
  return true;
    18c6:	81 e0       	ldi	r24, 0x01	; 1
    18c8:	01 c0       	rjmp	.+2      	; 0x18cc <_ZN9EtherComm5beginEjjRVhS1_h+0x4a>

bool EtherComm::begin(uint16_t recvPort, uint16_t destPort, Register& csDDR, Register& csPort, uint8_t csPin){
  EtherComm::_recvPort = recvPort;
  EtherComm::_destPort = destPort;
  
  if (ether.begin(EtherComm::_mymac, csDDR, csPort, csPin) == 0) return false;
    18ca:	80 e0       	ldi	r24, 0x00	; 0
  
  //Register the udpSerialPrint() method to listen to port the receive port.
  ether.udpServerListenOnPort(&udpReceive, recvPort);
  
  return true;
}
    18cc:	df 91       	pop	r29
    18ce:	cf 91       	pop	r28
    18d0:	0f 91       	pop	r16
    18d2:	08 95       	ret

000018d4 <_ZN9EtherComm11SendCommandEhh>:

void EtherComm::SendCommand(uint8_t cmd, uint8_t len){
    18d4:	0f 93       	push	r16
    18d6:	1f 93       	push	r17
    18d8:	cf 93       	push	r28
    18da:	df 93       	push	r29
  EtherComm::buffer[0] = START_BYTE;
    18dc:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    18e0:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    18e4:	9f ef       	ldi	r25, 0xFF	; 255
    18e6:	90 83       	st	Z, r25
  EtherComm::buffer[1] = cmd;
    18e8:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    18ec:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    18f0:	81 83       	std	Z+1, r24	; 0x01
  //EtherComm::buffer[2] = len;
  
  uint8_t checksum = START_BYTE + cmd;
    18f2:	81 50       	subi	r24, 0x01	; 1
  uint8_t* index = &EtherComm::buffer[2]; //TODO why is char* being used? convert ot uint8_t*!!
    18f4:	c0 91 00 02 	lds	r28, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    18f8:	d0 91 01 02 	lds	r29, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    18fc:	de 01       	movw	r26, r28
    18fe:	12 96       	adiw	r26, 0x02	; 2
  uint8_t bytes = len;
  while(bytes-- > 0){
    1900:	4f ef       	ldi	r20, 0xFF	; 255
    1902:	46 0f       	add	r20, r22
    1904:	66 23       	and	r22, r22
    1906:	81 f0       	breq	.+32     	; 0x1928 <_ZN9EtherComm11SendCommandEhh+0x54>
    1908:	fd 01       	movw	r30, r26
    190a:	50 e0       	ldi	r21, 0x00	; 0
    190c:	9a 01       	movw	r18, r20
    190e:	2d 5f       	subi	r18, 0xFD	; 253
    1910:	3f 4f       	sbci	r19, 0xFF	; 255
    1912:	2c 0f       	add	r18, r28
    1914:	3d 1f       	adc	r19, r29
    checksum += (uint8_t)(*(index++));  
    1916:	91 91       	ld	r25, Z+
    1918:	89 0f       	add	r24, r25
  //EtherComm::buffer[2] = len;
  
  uint8_t checksum = START_BYTE + cmd;
  uint8_t* index = &EtherComm::buffer[2]; //TODO why is char* being used? convert ot uint8_t*!!
  uint8_t bytes = len;
  while(bytes-- > 0){
    191a:	e2 17       	cp	r30, r18
    191c:	f3 07       	cpc	r31, r19
    191e:	d9 f7       	brne	.-10     	; 0x1916 <_ZN9EtherComm11SendCommandEhh+0x42>
    1920:	4f 5f       	subi	r20, 0xFF	; 255
    1922:	5f 4f       	sbci	r21, 0xFF	; 255
    1924:	a4 0f       	add	r26, r20
    1926:	b5 1f       	adc	r27, r21
    checksum += (uint8_t)(*(index++));  
  }
  (*index) = (uint8_t)(checksum & CHECKSUM_MASK);
    1928:	8c 93       	st	X, r24

  //Serial.print("Send: ");
  //Serial.println(len);
  ether.sendUdp(EtherComm::buffer, (uint16_t)len + (uint16_t)3, _recvPort, _destIP, _destPort);
    192a:	00 91 5d 05 	lds	r16, 0x055D	; 0x80055d <_ZN9EtherComm9_destPortE>
    192e:	10 91 5e 05 	lds	r17, 0x055E	; 0x80055e <_ZN9EtherComm9_destPortE+0x1>
    1932:	40 91 5f 05 	lds	r20, 0x055F	; 0x80055f <_ZN9EtherComm9_recvPortE>
    1936:	50 91 60 05 	lds	r21, 0x0560	; 0x800560 <_ZN9EtherComm9_recvPortE+0x1>
    193a:	70 e0       	ldi	r23, 0x00	; 0
    193c:	6d 5f       	subi	r22, 0xFD	; 253
    193e:	7f 4f       	sbci	r23, 0xFF	; 255
    1940:	22 e0       	ldi	r18, 0x02	; 2
    1942:	32 e0       	ldi	r19, 0x02	; 2
    1944:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    1948:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    194c:	52 dd       	rcall	.-1372   	; 0x13f2 <_ZN9EtherCard7sendUdpEPKhjjS1_j>
}
    194e:	df 91       	pop	r29
    1950:	cf 91       	pop	r28
    1952:	1f 91       	pop	r17
    1954:	0f 91       	pop	r16
    1956:	08 95       	ret

00001958 <main>:
#include "TestIMU.h"
#include <avr/interrupt.h>

int main(void){
	//TestIMU();
	sei(); //Enable global interrupts
    1958:	78 94       	sei
	public:
	inline HardwareSerial(
	volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
	volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
	volatile uint8_t *ucsrc, volatile uint8_t *udr);
	void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    195a:	26 e0       	ldi	r18, 0x06	; 6
    195c:	40 e8       	ldi	r20, 0x80	; 128
    195e:	55 e2       	ldi	r21, 0x25	; 37
    1960:	60 e0       	ldi	r22, 0x00	; 0
    1962:	70 e0       	ldi	r23, 0x00	; 0
    1964:	81 e6       	ldi	r24, 0x61	; 97
    1966:	95 e0       	ldi	r25, 0x05	; 5
    1968:	14 d1       	rcall	.+552    	; 0x1b92 <_ZN14HardwareSerial5beginEmh>
	Serial.begin(9600);
	Serial.println("\nInitializing...");
    196a:	6b e2       	ldi	r22, 0x2B	; 43
    196c:	72 e0       	ldi	r23, 0x02	; 2
    196e:	81 e6       	ldi	r24, 0x61	; 97
    1970:	95 e0       	ldi	r25, 0x05	; 5
    1972:	0e 94 b3 19 	call	0x3366	; 0x3366 <_ZN5Print7printlnEPKc>
	
	if(!rov.begin()){
    1976:	9b d7       	rcall	.+3894   	; 0x28ae <_ZN5Robot5beginEv>
    1978:	81 11       	cpse	r24, r1
    197a:	07 c0       	rjmp	.+14     	; 0x198a <main+0x32>
		Serial.println("Failed to initialize robot.");
    197c:	6c e3       	ldi	r22, 0x3C	; 60
    197e:	72 e0       	ldi	r23, 0x02	; 2
    1980:	81 e6       	ldi	r24, 0x61	; 97
    1982:	95 e0       	ldi	r25, 0x05	; 5
    1984:	0e 94 b3 19 	call	0x3366	; 0x3366 <_ZN5Print7printlnEPKc>
    1988:	ff cf       	rjmp	.-2      	; 0x1988 <main+0x30>
		while(1);
	}
	Serial.println("Robot initialized.");
    198a:	68 e5       	ldi	r22, 0x58	; 88
    198c:	72 e0       	ldi	r23, 0x02	; 2
    198e:	81 e6       	ldi	r24, 0x61	; 97
    1990:	95 e0       	ldi	r25, 0x05	; 5
    1992:	0e 94 b3 19 	call	0x3366	; 0x3366 <_ZN5Print7printlnEPKc>
	
	if(!EtherComm::begin((uint16_t)6001, (uint16_t)6002, EthernetDDR, EthernetPort, EthernetPin_CS)){
    1996:	00 e2       	ldi	r16, 0x20	; 32
    1998:	22 e0       	ldi	r18, 0x02	; 2
    199a:	31 e0       	ldi	r19, 0x01	; 1
    199c:	41 e0       	ldi	r20, 0x01	; 1
    199e:	51 e0       	ldi	r21, 0x01	; 1
    19a0:	62 e7       	ldi	r22, 0x72	; 114
    19a2:	77 e1       	ldi	r23, 0x17	; 23
    19a4:	81 e7       	ldi	r24, 0x71	; 113
    19a6:	97 e1       	ldi	r25, 0x17	; 23
    19a8:	6c df       	rcall	.-296    	; 0x1882 <_ZN9EtherComm5beginEjjRVhS1_h>
    19aa:	81 11       	cpse	r24, r1
    19ac:	07 c0       	rjmp	.+14     	; 0x19bc <main+0x64>
		Serial.println("Failed to access Ethernet controller.");
    19ae:	6b e6       	ldi	r22, 0x6B	; 107
    19b0:	72 e0       	ldi	r23, 0x02	; 2
    19b2:	81 e6       	ldi	r24, 0x61	; 97
    19b4:	95 e0       	ldi	r25, 0x05	; 5
    19b6:	0e 94 b3 19 	call	0x3366	; 0x3366 <_ZN5Print7printlnEPKc>
    19ba:	ff cf       	rjmp	.-2      	; 0x19ba <main+0x62>
		while(1);
	}
	Serial.println("Connected to controller.");
    19bc:	61 e9       	ldi	r22, 0x91	; 145
    19be:	72 e0       	ldi	r23, 0x02	; 2
    19c0:	81 e6       	ldi	r24, 0x61	; 97
    19c2:	95 e0       	ldi	r25, 0x05	; 5
  static bool begin(uint16_t recvPort, uint16_t destPort, Register& csDDR, Register& csPort, uint8_t csPin);

  friend void udpReceive(uint16_t dest_port, uint8_t src_ip[IP_LEN], uint16_t src_port, const char *data, uint16_t len);

  static void Loop(){
    ether.packetLoop(ether.packetReceive());
    19c4:	0e 94 b3 19 	call	0x3366	; 0x3366 <_ZN5Print7printlnEPKc>
    19c8:	dd da       	rcall	.-2630   	; 0xf84 <_ZN8ENC28J6013packetReceiveEv>
    19ca:	4c dd       	rcall	.-1384   	; 0x1464 <_ZN9EtherCard10packetLoopEj>
    19cc:	fd cf       	rjmp	.-6      	; 0x19c8 <main+0x70>

000019ce <_ZN14HardwareSerial9availableEv>:
	#endif
	#if defined(HAVE_HWSERIAL2)
	if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
	#endif
	#if defined(HAVE_HWSERIAL3)
	if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    19ce:	fc 01       	movw	r30, r24
    19d0:	97 85       	ldd	r25, Z+15	; 0x0f
    19d2:	20 89       	ldd	r18, Z+16	; 0x10
    19d4:	89 2f       	mov	r24, r25
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	80 5c       	subi	r24, 0xC0	; 192
    19da:	9f 4f       	sbci	r25, 0xFF	; 255
    19dc:	82 1b       	sub	r24, r18
    19de:	91 09       	sbc	r25, r1
    19e0:	8f 73       	andi	r24, 0x3F	; 63
    19e2:	99 27       	eor	r25, r25
    19e4:	08 95       	ret

000019e6 <_ZN14HardwareSerial4peekEv>:
    19e6:	fc 01       	movw	r30, r24
    19e8:	97 85       	ldd	r25, Z+15	; 0x0f
    19ea:	80 89       	ldd	r24, Z+16	; 0x10
    19ec:	98 17       	cp	r25, r24
    19ee:	31 f0       	breq	.+12     	; 0x19fc <_ZN14HardwareSerial4peekEv+0x16>
    19f0:	80 89       	ldd	r24, Z+16	; 0x10
    19f2:	e8 0f       	add	r30, r24
    19f4:	f1 1d       	adc	r31, r1
    19f6:	83 89       	ldd	r24, Z+19	; 0x13
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	08 95       	ret
    19fc:	8f ef       	ldi	r24, 0xFF	; 255
    19fe:	9f ef       	ldi	r25, 0xFF	; 255
    1a00:	08 95       	ret

00001a02 <_ZN14HardwareSerial4readEv>:
    1a02:	fc 01       	movw	r30, r24
    1a04:	97 85       	ldd	r25, Z+15	; 0x0f
    1a06:	80 89       	ldd	r24, Z+16	; 0x10
    1a08:	98 17       	cp	r25, r24
    1a0a:	61 f0       	breq	.+24     	; 0x1a24 <_ZN14HardwareSerial4readEv+0x22>
    1a0c:	80 89       	ldd	r24, Z+16	; 0x10
    1a0e:	df 01       	movw	r26, r30
    1a10:	a8 0f       	add	r26, r24
    1a12:	b1 1d       	adc	r27, r1
    1a14:	53 96       	adiw	r26, 0x13	; 19
    1a16:	8c 91       	ld	r24, X
    1a18:	90 89       	ldd	r25, Z+16	; 0x10
    1a1a:	9f 5f       	subi	r25, 0xFF	; 255
    1a1c:	9f 73       	andi	r25, 0x3F	; 63
    1a1e:	90 8b       	std	Z+16, r25	; 0x10
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	08 95       	ret
    1a24:	8f ef       	ldi	r24, 0xFF	; 255
    1a26:	9f ef       	ldi	r25, 0xFF	; 255
    1a28:	08 95       	ret

00001a2a <_ZN14HardwareSerial17availableForWriteEv>:
    1a2a:	fc 01       	movw	r30, r24
    1a2c:	21 89       	ldd	r18, Z+17	; 0x11
    1a2e:	32 89       	ldd	r19, Z+18	; 0x12
    1a30:	23 17       	cp	r18, r19
    1a32:	38 f0       	brcs	.+14     	; 0x1a42 <_ZN14HardwareSerial17availableForWriteEv+0x18>
    1a34:	8f e3       	ldi	r24, 0x3F	; 63
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	82 1b       	sub	r24, r18
    1a3a:	91 09       	sbc	r25, r1
    1a3c:	83 0f       	add	r24, r19
    1a3e:	91 1d       	adc	r25, r1
    1a40:	08 95       	ret
    1a42:	83 2f       	mov	r24, r19
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	82 1b       	sub	r24, r18
    1a48:	91 09       	sbc	r25, r1
    1a4a:	01 97       	sbiw	r24, 0x01	; 1
    1a4c:	08 95       	ret

00001a4e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1a4e:	fc 01       	movw	r30, r24
	// If interrupts are enabled, there must be more data in the output
	// buffer. Send the next byte
	unsigned char c = _tx_buffer[_tx_buffer_tail];
    1a50:	82 89       	ldd	r24, Z+18	; 0x12
    1a52:	df 01       	movw	r26, r30
    1a54:	a8 0f       	add	r26, r24
    1a56:	b1 1d       	adc	r27, r1
    1a58:	ad 5a       	subi	r26, 0xAD	; 173
    1a5a:	bf 4f       	sbci	r27, 0xFF	; 255
    1a5c:	8c 91       	ld	r24, X
	_tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1a5e:	22 89       	ldd	r18, Z+18	; 0x12
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	2f 5f       	subi	r18, 0xFF	; 255
    1a64:	3f 4f       	sbci	r19, 0xFF	; 255
    1a66:	2f 73       	andi	r18, 0x3F	; 63
    1a68:	30 78       	andi	r19, 0x80	; 128
    1a6a:	33 23       	and	r19, r19
    1a6c:	34 f4       	brge	.+12     	; 0x1a7a <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x2c>
    1a6e:	21 50       	subi	r18, 0x01	; 1
    1a70:	31 09       	sbc	r19, r1
    1a72:	20 6c       	ori	r18, 0xC0	; 192
    1a74:	3f 6f       	ori	r19, 0xFF	; 255
    1a76:	2f 5f       	subi	r18, 0xFF	; 255
    1a78:	3f 4f       	sbci	r19, 0xFF	; 255
    1a7a:	22 8b       	std	Z+18, r18	; 0x12

	*_udr = c;
    1a7c:	a4 85       	ldd	r26, Z+12	; 0x0c
    1a7e:	b5 85       	ldd	r27, Z+13	; 0x0d
    1a80:	8c 93       	st	X, r24
	// location". This makes sure flush() won't return until the bytes
	// actually got written. Other r/w bits are preserved, and zeroes
	// written to the rest.

	#ifdef MPCM0
	*_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1a82:	a6 81       	ldd	r26, Z+6	; 0x06
    1a84:	b7 81       	ldd	r27, Z+7	; 0x07
    1a86:	8c 91       	ld	r24, X
    1a88:	83 70       	andi	r24, 0x03	; 3
    1a8a:	80 64       	ori	r24, 0x40	; 64
    1a8c:	8c 93       	st	X, r24
	#else
	*_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
	#endif

	if (_tx_buffer_head == _tx_buffer_tail) {
    1a8e:	91 89       	ldd	r25, Z+17	; 0x11
    1a90:	82 89       	ldd	r24, Z+18	; 0x12
    1a92:	98 13       	cpse	r25, r24
    1a94:	06 c0       	rjmp	.+12     	; 0x1aa2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x54>
		// Buffer empty, so disable interrupts
		cbi(*_ucsrb, UDRIE0);
    1a96:	00 84       	ldd	r0, Z+8	; 0x08
    1a98:	f1 85       	ldd	r31, Z+9	; 0x09
    1a9a:	e0 2d       	mov	r30, r0
    1a9c:	80 81       	ld	r24, Z
    1a9e:	8f 7d       	andi	r24, 0xDF	; 223
    1aa0:	80 83       	st	Z, r24
    1aa2:	08 95       	ret

00001aa4 <_ZN14HardwareSerial5flushEv>:
	if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
	return tail - head - 1;
}

void HardwareSerial::flush()
{
    1aa4:	cf 93       	push	r28
    1aa6:	df 93       	push	r29
    1aa8:	ec 01       	movw	r28, r24
	// If we have never written a byte, no need to flush. This special
	// case is needed since there is no way to force the TXC (transmit
	// complete) bit to 1 during initialization
	if (!_written)
    1aaa:	8e 85       	ldd	r24, Y+14	; 0x0e
    1aac:	88 23       	and	r24, r24
    1aae:	d1 f0       	breq	.+52     	; 0x1ae4 <_ZN14HardwareSerial5flushEv+0x40>
	return;

	while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1ab0:	e8 85       	ldd	r30, Y+8	; 0x08
    1ab2:	f9 85       	ldd	r31, Y+9	; 0x09
    1ab4:	80 81       	ld	r24, Z
    1ab6:	85 fd       	sbrc	r24, 5
    1ab8:	05 c0       	rjmp	.+10     	; 0x1ac4 <_ZN14HardwareSerial5flushEv+0x20>
    1aba:	ae 81       	ldd	r26, Y+6	; 0x06
    1abc:	bf 81       	ldd	r27, Y+7	; 0x07
    1abe:	8c 91       	ld	r24, X
    1ac0:	86 fd       	sbrc	r24, 6
    1ac2:	10 c0       	rjmp	.+32     	; 0x1ae4 <_ZN14HardwareSerial5flushEv+0x40>
		if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1ac4:	0f b6       	in	r0, 0x3f	; 63
    1ac6:	07 fc       	sbrc	r0, 7
    1ac8:	f5 cf       	rjmp	.-22     	; 0x1ab4 <_ZN14HardwareSerial5flushEv+0x10>
    1aca:	80 81       	ld	r24, Z
    1acc:	85 ff       	sbrs	r24, 5
    1ace:	f2 cf       	rjmp	.-28     	; 0x1ab4 <_ZN14HardwareSerial5flushEv+0x10>
    1ad0:	03 c0       	rjmp	.+6      	; 0x1ad8 <_ZN14HardwareSerial5flushEv+0x34>
		// Interrupts are globally disabled, but the DR empty
		// interrupt should be enabled, so poll the DR empty flag to
		// prevent deadlock
		if (bit_is_set(*_ucsra, UDRE0))
		_tx_udr_empty_irq();
    1ad2:	ce 01       	movw	r24, r28
    1ad4:	bc df       	rcall	.-136    	; 0x1a4e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1ad6:	ec cf       	rjmp	.-40     	; 0x1ab0 <_ZN14HardwareSerial5flushEv+0xc>
	while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
		if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
		// Interrupts are globally disabled, but the DR empty
		// interrupt should be enabled, so poll the DR empty flag to
		// prevent deadlock
		if (bit_is_set(*_ucsra, UDRE0))
    1ad8:	ae 81       	ldd	r26, Y+6	; 0x06
    1ada:	bf 81       	ldd	r27, Y+7	; 0x07
    1adc:	8c 91       	ld	r24, X
    1ade:	85 ff       	sbrs	r24, 5
    1ae0:	e9 cf       	rjmp	.-46     	; 0x1ab4 <_ZN14HardwareSerial5flushEv+0x10>
    1ae2:	f7 cf       	rjmp	.-18     	; 0x1ad2 <_ZN14HardwareSerial5flushEv+0x2e>
		_tx_udr_empty_irq();
	}
	// If we get here, nothing is queued anymore (DRIE is disabled) and
	// the hardware finished tranmission (TXC is set).
}
    1ae4:	df 91       	pop	r29
    1ae6:	cf 91       	pop	r28
    1ae8:	08 95       	ret

00001aea <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    1aea:	0f 93       	push	r16
    1aec:	1f 93       	push	r17
    1aee:	cf 93       	push	r28
    1af0:	df 93       	push	r29
    1af2:	ec 01       	movw	r28, r24
	_written = true;
    1af4:	81 e0       	ldi	r24, 0x01	; 1
    1af6:	8e 87       	std	Y+14, r24	; 0x0e
	// If the buffer and the data register is empty, just write the byte
	// to the data register and be done. This shortcut helps
	// significantly improve the effective datarate at high (>
	// 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
	if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1af8:	99 89       	ldd	r25, Y+17	; 0x11
    1afa:	8a 89       	ldd	r24, Y+18	; 0x12
    1afc:	98 13       	cpse	r25, r24
    1afe:	25 c0       	rjmp	.+74     	; 0x1b4a <_ZN14HardwareSerial5writeEh+0x60>
    1b00:	ee 81       	ldd	r30, Y+6	; 0x06
    1b02:	ff 81       	ldd	r31, Y+7	; 0x07
    1b04:	80 81       	ld	r24, Z
    1b06:	85 fd       	sbrc	r24, 5
    1b08:	31 c0       	rjmp	.+98     	; 0x1b6c <_ZN14HardwareSerial5writeEh+0x82>
    1b0a:	1f c0       	rjmp	.+62     	; 0x1b4a <_ZN14HardwareSerial5writeEh+0x60>
	}
	tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
	// If the output buffer is full, there's nothing for it other than to
	// wait for the interrupt handler to empty it a bit
	while (i == _tx_buffer_tail) {
    1b0c:	8a 89       	ldd	r24, Y+18	; 0x12
    1b0e:	18 13       	cpse	r17, r24
    1b10:	0b c0       	rjmp	.+22     	; 0x1b28 <_ZN14HardwareSerial5writeEh+0x3e>
		if (bit_is_clear(SREG, SREG_I)) {
    1b12:	0f b6       	in	r0, 0x3f	; 63
    1b14:	07 fc       	sbrc	r0, 7
    1b16:	fa cf       	rjmp	.-12     	; 0x1b0c <_ZN14HardwareSerial5writeEh+0x22>
			// Interrupts are disabled, so we'll have to poll the data
			// register empty flag ourselves. If it is set, pretend an
			// interrupt has happened and call the handler to free up
			// space for us.
			if(bit_is_set(*_ucsra, UDRE0))
    1b18:	ee 81       	ldd	r30, Y+6	; 0x06
    1b1a:	ff 81       	ldd	r31, Y+7	; 0x07
    1b1c:	80 81       	ld	r24, Z
    1b1e:	85 ff       	sbrs	r24, 5
    1b20:	f5 cf       	rjmp	.-22     	; 0x1b0c <_ZN14HardwareSerial5writeEh+0x22>
			_tx_udr_empty_irq();
    1b22:	ce 01       	movw	r24, r28
    1b24:	94 df       	rcall	.-216    	; 0x1a4e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1b26:	f2 cf       	rjmp	.-28     	; 0x1b0c <_ZN14HardwareSerial5writeEh+0x22>
			} else {
			// nop, the interrupt handler will free up space for us
		}
	}

	_tx_buffer[_tx_buffer_head] = c;
    1b28:	89 89       	ldd	r24, Y+17	; 0x11
    1b2a:	fe 01       	movw	r30, r28
    1b2c:	e8 0f       	add	r30, r24
    1b2e:	f1 1d       	adc	r31, r1
    1b30:	ed 5a       	subi	r30, 0xAD	; 173
    1b32:	ff 4f       	sbci	r31, 0xFF	; 255
    1b34:	00 83       	st	Z, r16

	// make atomic to prevent execution of ISR between setting the
	// head pointer and setting the interrupt flag resulting in buffer
	// retransmission
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1b36:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1b38:	f8 94       	cli
		_tx_buffer_head = i;
    1b3a:	19 8b       	std	Y+17, r17	; 0x11
		sbi(*_ucsrb, UDRIE0);
    1b3c:	e8 85       	ldd	r30, Y+8	; 0x08
    1b3e:	f9 85       	ldd	r31, Y+9	; 0x09
    1b40:	80 81       	ld	r24, Z
    1b42:	80 62       	ori	r24, 0x20	; 32
    1b44:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1b46:	9f bf       	out	0x3f, r25	; 63
	}
	
	return 1;
    1b48:	1d c0       	rjmp	.+58     	; 0x1b84 <_ZN14HardwareSerial5writeEh+0x9a>
			*_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
			#endif
		}
		return 1;
	}
	tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1b4a:	29 89       	ldd	r18, Y+17	; 0x11
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
    1b4e:	2f 5f       	subi	r18, 0xFF	; 255
    1b50:	3f 4f       	sbci	r19, 0xFF	; 255
    1b52:	2f 73       	andi	r18, 0x3F	; 63
    1b54:	30 78       	andi	r19, 0x80	; 128
    1b56:	33 23       	and	r19, r19
    1b58:	34 f4       	brge	.+12     	; 0x1b66 <_ZN14HardwareSerial5writeEh+0x7c>
    1b5a:	21 50       	subi	r18, 0x01	; 1
    1b5c:	31 09       	sbc	r19, r1
    1b5e:	20 6c       	ori	r18, 0xC0	; 192
    1b60:	3f 6f       	ori	r19, 0xFF	; 255
    1b62:	2f 5f       	subi	r18, 0xFF	; 255
    1b64:	3f 4f       	sbci	r19, 0xFF	; 255
    1b66:	06 2f       	mov	r16, r22
    1b68:	12 2f       	mov	r17, r18
    1b6a:	d0 cf       	rjmp	.-96     	; 0x1b0c <_ZN14HardwareSerial5writeEh+0x22>
		// So writing UDR must happen first.
		// Writing UDR and clearing TC must be done atomically, otherwise
		// interrupts might delay the TXC clear so the byte written to UDR
		// is transmitted (setting TXC) before clearing TXC. Then TXC will
		// be cleared when no bytes are left, causing flush() to hang
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1b6c:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1b6e:	f8 94       	cli
			*_udr = c;
    1b70:	ec 85       	ldd	r30, Y+12	; 0x0c
    1b72:	fd 85       	ldd	r31, Y+13	; 0x0d
    1b74:	60 83       	st	Z, r22
			#ifdef MPCM0
			*_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1b76:	ee 81       	ldd	r30, Y+6	; 0x06
    1b78:	ff 81       	ldd	r31, Y+7	; 0x07
    1b7a:	80 81       	ld	r24, Z
    1b7c:	83 70       	andi	r24, 0x03	; 3
    1b7e:	80 64       	ori	r24, 0x40	; 64
    1b80:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1b82:	9f bf       	out	0x3f, r25	; 63
		_tx_buffer_head = i;
		sbi(*_ucsrb, UDRIE0);
	}
	
	return 1;
}
    1b84:	81 e0       	ldi	r24, 0x01	; 1
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	df 91       	pop	r29
    1b8a:	cf 91       	pop	r28
    1b8c:	1f 91       	pop	r17
    1b8e:	0f 91       	pop	r16
    1b90:	08 95       	ret

00001b92 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, uint8_t config)
{
    1b92:	cf 92       	push	r12
    1b94:	df 92       	push	r13
    1b96:	ef 92       	push	r14
    1b98:	ff 92       	push	r15
    1b9a:	1f 93       	push	r17
    1b9c:	cf 93       	push	r28
    1b9e:	df 93       	push	r29
    1ba0:	ec 01       	movw	r28, r24
    1ba2:	6a 01       	movw	r12, r20
    1ba4:	7b 01       	movw	r14, r22
    1ba6:	12 2f       	mov	r17, r18
	// Try u2x mode first
	uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
	*_ucsra = 1 << U2X0;
    1ba8:	ee 81       	ldd	r30, Y+6	; 0x06
    1baa:	ff 81       	ldd	r31, Y+7	; 0x07
    1bac:	82 e0       	ldi	r24, 0x02	; 2
    1bae:	80 83       	st	Z, r24
	// hardcoded exception for 57600 for compatibility with the bootloader
	// shipped with the Duemilanove and previous boards and the firmware
	// on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
	// be > 4095, so switch back to non-u2x mode if the baud rate is too
	// low.
	if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1bb0:	41 15       	cp	r20, r1
    1bb2:	51 4e       	sbci	r21, 0xE1	; 225
    1bb4:	61 05       	cpc	r22, r1
    1bb6:	71 05       	cpc	r23, r1
    1bb8:	b1 f0       	breq	.+44     	; 0x1be6 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, uint8_t config)
{
	// Try u2x mode first
	uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1bba:	60 e0       	ldi	r22, 0x00	; 0
    1bbc:	79 e0       	ldi	r23, 0x09	; 9
    1bbe:	8d e3       	ldi	r24, 0x3D	; 61
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	a7 01       	movw	r20, r14
    1bc4:	96 01       	movw	r18, r12
    1bc6:	0e 94 1c 1b 	call	0x3638	; 0x3638 <__udivmodsi4>
    1bca:	da 01       	movw	r26, r20
    1bcc:	c9 01       	movw	r24, r18
    1bce:	01 97       	sbiw	r24, 0x01	; 1
    1bd0:	a1 09       	sbc	r26, r1
    1bd2:	b1 09       	sbc	r27, r1
    1bd4:	b6 95       	lsr	r27
    1bd6:	a7 95       	ror	r26
    1bd8:	97 95       	ror	r25
    1bda:	87 95       	ror	r24
    1bdc:	9c 01       	movw	r18, r24
	// hardcoded exception for 57600 for compatibility with the bootloader
	// shipped with the Duemilanove and previous boards and the firmware
	// on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
	// be > 4095, so switch back to non-u2x mode if the baud rate is too
	// low.
	if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1bde:	21 15       	cp	r18, r1
    1be0:	80 e1       	ldi	r24, 0x10	; 16
    1be2:	38 07       	cpc	r19, r24
    1be4:	a8 f0       	brcs	.+42     	; 0x1c10 <_ZN14HardwareSerial5beginEmh+0x7e>
	{
		*_ucsra = 0;
    1be6:	ee 81       	ldd	r30, Y+6	; 0x06
    1be8:	ff 81       	ldd	r31, Y+7	; 0x07
    1bea:	10 82       	st	Z, r1
		baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1bec:	60 e8       	ldi	r22, 0x80	; 128
    1bee:	74 e8       	ldi	r23, 0x84	; 132
    1bf0:	8e e1       	ldi	r24, 0x1E	; 30
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	a7 01       	movw	r20, r14
    1bf6:	96 01       	movw	r18, r12
    1bf8:	0e 94 1c 1b 	call	0x3638	; 0x3638 <__udivmodsi4>
    1bfc:	da 01       	movw	r26, r20
    1bfe:	c9 01       	movw	r24, r18
    1c00:	01 97       	sbiw	r24, 0x01	; 1
    1c02:	a1 09       	sbc	r26, r1
    1c04:	b1 09       	sbc	r27, r1
    1c06:	b6 95       	lsr	r27
    1c08:	a7 95       	ror	r26
    1c0a:	97 95       	ror	r25
    1c0c:	87 95       	ror	r24
    1c0e:	9c 01       	movw	r18, r24
	}

	// assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
	*_ubrrh = baud_setting >> 8;
    1c10:	ea 81       	ldd	r30, Y+2	; 0x02
    1c12:	fb 81       	ldd	r31, Y+3	; 0x03
    1c14:	30 83       	st	Z, r19
	*_ubrrl = baud_setting;
    1c16:	ec 81       	ldd	r30, Y+4	; 0x04
    1c18:	fd 81       	ldd	r31, Y+5	; 0x05
    1c1a:	20 83       	st	Z, r18

	_written = false;
    1c1c:	1e 86       	std	Y+14, r1	; 0x0e

	//set the data bits, parity, and stop bits
	#if defined(__AVR_ATmega8__)
	config |= 0x80; // select UCSRC register (shared with UBRRH)
	#endif
	*_ucsrc = config;
    1c1e:	ea 85       	ldd	r30, Y+10	; 0x0a
    1c20:	fb 85       	ldd	r31, Y+11	; 0x0b
    1c22:	10 83       	st	Z, r17
	
	sbi(*_ucsrb, RXEN0);
    1c24:	e8 85       	ldd	r30, Y+8	; 0x08
    1c26:	f9 85       	ldd	r31, Y+9	; 0x09
    1c28:	80 81       	ld	r24, Z
    1c2a:	80 61       	ori	r24, 0x10	; 16
    1c2c:	80 83       	st	Z, r24
	sbi(*_ucsrb, TXEN0);
    1c2e:	e8 85       	ldd	r30, Y+8	; 0x08
    1c30:	f9 85       	ldd	r31, Y+9	; 0x09
    1c32:	80 81       	ld	r24, Z
    1c34:	88 60       	ori	r24, 0x08	; 8
    1c36:	80 83       	st	Z, r24
	sbi(*_ucsrb, RXCIE0);
    1c38:	e8 85       	ldd	r30, Y+8	; 0x08
    1c3a:	f9 85       	ldd	r31, Y+9	; 0x09
    1c3c:	80 81       	ld	r24, Z
    1c3e:	80 68       	ori	r24, 0x80	; 128
    1c40:	80 83       	st	Z, r24
	cbi(*_ucsrb, UDRIE0);
    1c42:	e8 85       	ldd	r30, Y+8	; 0x08
    1c44:	f9 85       	ldd	r31, Y+9	; 0x09
    1c46:	80 81       	ld	r24, Z
    1c48:	8f 7d       	andi	r24, 0xDF	; 223
    1c4a:	80 83       	st	Z, r24
}
    1c4c:	df 91       	pop	r29
    1c4e:	cf 91       	pop	r28
    1c50:	1f 91       	pop	r17
    1c52:	ff 90       	pop	r15
    1c54:	ef 90       	pop	r14
    1c56:	df 90       	pop	r13
    1c58:	cf 90       	pop	r12
    1c5a:	08 95       	ret

00001c5c <_ZN5Print17availableForWriteEv>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
}
    1c5c:	80 e0       	ldi	r24, 0x00	; 0
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	08 95       	ret

00001c62 <__vector_25>:
    1c62:	1f 92       	push	r1
    1c64:	0f 92       	push	r0
    1c66:	0f b6       	in	r0, 0x3f	; 63
    1c68:	0f 92       	push	r0
    1c6a:	11 24       	eor	r1, r1
    1c6c:	0b b6       	in	r0, 0x3b	; 59
    1c6e:	0f 92       	push	r0
    1c70:	2f 93       	push	r18
    1c72:	8f 93       	push	r24
    1c74:	9f 93       	push	r25
    1c76:	af 93       	push	r26
    1c78:	bf 93       	push	r27
    1c7a:	ef 93       	push	r30
    1c7c:	ff 93       	push	r31
    1c7e:	e0 91 67 05 	lds	r30, 0x0567	; 0x800567 <Serial+0x6>
    1c82:	f0 91 68 05 	lds	r31, 0x0568	; 0x800568 <Serial+0x7>
    1c86:	80 81       	ld	r24, Z
    1c88:	82 fd       	sbrc	r24, 2
    1c8a:	14 c0       	rjmp	.+40     	; 0x1cb4 <__vector_25+0x52>
    1c8c:	e1 e6       	ldi	r30, 0x61	; 97
    1c8e:	f5 e0       	ldi	r31, 0x05	; 5
    1c90:	a4 85       	ldd	r26, Z+12	; 0x0c
    1c92:	b5 85       	ldd	r27, Z+13	; 0x0d
    1c94:	2c 91       	ld	r18, X
    1c96:	87 85       	ldd	r24, Z+15	; 0x0f
    1c98:	8f 5f       	subi	r24, 0xFF	; 255
    1c9a:	8f 70       	andi	r24, 0x0F	; 15
    1c9c:	90 89       	ldd	r25, Z+16	; 0x10
    1c9e:	89 17       	cp	r24, r25
    1ca0:	71 f0       	breq	.+28     	; 0x1cbe <__vector_25+0x5c>
    1ca2:	df 01       	movw	r26, r30
    1ca4:	e7 85       	ldd	r30, Z+15	; 0x0f
    1ca6:	f0 e0       	ldi	r31, 0x00	; 0
    1ca8:	ef 59       	subi	r30, 0x9F	; 159
    1caa:	fa 4f       	sbci	r31, 0xFA	; 250
    1cac:	23 8b       	std	Z+19, r18	; 0x13
    1cae:	1f 96       	adiw	r26, 0x0f	; 15
    1cb0:	8c 93       	st	X, r24
    1cb2:	05 c0       	rjmp	.+10     	; 0x1cbe <__vector_25+0x5c>
    1cb4:	e0 91 6d 05 	lds	r30, 0x056D	; 0x80056d <Serial+0xc>
    1cb8:	f0 91 6e 05 	lds	r31, 0x056E	; 0x80056e <Serial+0xd>
    1cbc:	80 81       	ld	r24, Z
    1cbe:	ff 91       	pop	r31
    1cc0:	ef 91       	pop	r30
    1cc2:	bf 91       	pop	r27
    1cc4:	af 91       	pop	r26
    1cc6:	9f 91       	pop	r25
    1cc8:	8f 91       	pop	r24
    1cca:	2f 91       	pop	r18
    1ccc:	0f 90       	pop	r0
    1cce:	0b be       	out	0x3b, r0	; 59
    1cd0:	0f 90       	pop	r0
    1cd2:	0f be       	out	0x3f, r0	; 63
    1cd4:	0f 90       	pop	r0
    1cd6:	1f 90       	pop	r1
    1cd8:	18 95       	reti

00001cda <__vector_26>:
    1cda:	1f 92       	push	r1
    1cdc:	0f 92       	push	r0
    1cde:	0f b6       	in	r0, 0x3f	; 63
    1ce0:	0f 92       	push	r0
    1ce2:	11 24       	eor	r1, r1
    1ce4:	0b b6       	in	r0, 0x3b	; 59
    1ce6:	0f 92       	push	r0
    1ce8:	2f 93       	push	r18
    1cea:	3f 93       	push	r19
    1cec:	4f 93       	push	r20
    1cee:	5f 93       	push	r21
    1cf0:	6f 93       	push	r22
    1cf2:	7f 93       	push	r23
    1cf4:	8f 93       	push	r24
    1cf6:	9f 93       	push	r25
    1cf8:	af 93       	push	r26
    1cfa:	bf 93       	push	r27
    1cfc:	ef 93       	push	r30
    1cfe:	ff 93       	push	r31
    1d00:	81 e6       	ldi	r24, 0x61	; 97
    1d02:	95 e0       	ldi	r25, 0x05	; 5
    1d04:	a4 de       	rcall	.-696    	; 0x1a4e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1d06:	ff 91       	pop	r31
    1d08:	ef 91       	pop	r30
    1d0a:	bf 91       	pop	r27
    1d0c:	af 91       	pop	r26
    1d0e:	9f 91       	pop	r25
    1d10:	8f 91       	pop	r24
    1d12:	7f 91       	pop	r23
    1d14:	6f 91       	pop	r22
    1d16:	5f 91       	pop	r21
    1d18:	4f 91       	pop	r20
    1d1a:	3f 91       	pop	r19
    1d1c:	2f 91       	pop	r18
    1d1e:	0f 90       	pop	r0
    1d20:	0b be       	out	0x3b, r0	; 59
    1d22:	0f 90       	pop	r0
    1d24:	0f be       	out	0x3f, r0	; 63
    1d26:	0f 90       	pop	r0
    1d28:	1f 90       	pop	r1
    1d2a:	18 95       	reti

00001d2c <_GLOBAL__sub_I___vector_25>:
volatile uint8_t *ucsrc, volatile uint8_t *udr) :
_ubrrh(ubrrh), _ubrrl(ubrrl),
_ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
_udr(udr),
_rx_buffer_head(0), _rx_buffer_tail(0),
_tx_buffer_head(0), _tx_buffer_tail(0)
    1d2c:	e1 e6       	ldi	r30, 0x61	; 97
    1d2e:	f5 e0       	ldi	r31, 0x05	; 5
    1d30:	8e ea       	ldi	r24, 0xAE	; 174
    1d32:	92 e0       	ldi	r25, 0x02	; 2
    1d34:	91 83       	std	Z+1, r25	; 0x01
    1d36:	80 83       	st	Z, r24
    1d38:	85 ec       	ldi	r24, 0xC5	; 197
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	93 83       	std	Z+3, r25	; 0x03
    1d3e:	82 83       	std	Z+2, r24	; 0x02
    1d40:	84 ec       	ldi	r24, 0xC4	; 196
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	95 83       	std	Z+5, r25	; 0x05
    1d46:	84 83       	std	Z+4, r24	; 0x04
    1d48:	80 ec       	ldi	r24, 0xC0	; 192
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	97 83       	std	Z+7, r25	; 0x07
    1d4e:	86 83       	std	Z+6, r24	; 0x06
    1d50:	81 ec       	ldi	r24, 0xC1	; 193
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	91 87       	std	Z+9, r25	; 0x09
    1d56:	80 87       	std	Z+8, r24	; 0x08
    1d58:	82 ec       	ldi	r24, 0xC2	; 194
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	93 87       	std	Z+11, r25	; 0x0b
    1d5e:	82 87       	std	Z+10, r24	; 0x0a
    1d60:	86 ec       	ldi	r24, 0xC6	; 198
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	95 87       	std	Z+13, r25	; 0x0d
    1d66:	84 87       	std	Z+12, r24	; 0x0c
    1d68:	17 86       	std	Z+15, r1	; 0x0f
    1d6a:	10 8a       	std	Z+16, r1	; 0x10
    1d6c:	11 8a       	std	Z+17, r1	; 0x11
    1d6e:	12 8a       	std	Z+18, r1	; 0x12
    1d70:	08 95       	ret

00001d72 <__vector_36>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
}
    1d72:	1f 92       	push	r1
    1d74:	0f 92       	push	r0
    1d76:	0f b6       	in	r0, 0x3f	; 63
    1d78:	0f 92       	push	r0
    1d7a:	11 24       	eor	r1, r1
    1d7c:	0b b6       	in	r0, 0x3b	; 59
    1d7e:	0f 92       	push	r0
    1d80:	2f 93       	push	r18
    1d82:	8f 93       	push	r24
    1d84:	9f 93       	push	r25
    1d86:	af 93       	push	r26
    1d88:	bf 93       	push	r27
    1d8a:	ef 93       	push	r30
    1d8c:	ff 93       	push	r31
    1d8e:	e0 91 9a 05 	lds	r30, 0x059A	; 0x80059a <Serial1+0x6>
    1d92:	f0 91 9b 05 	lds	r31, 0x059B	; 0x80059b <Serial1+0x7>
    1d96:	80 81       	ld	r24, Z
    1d98:	82 fd       	sbrc	r24, 2
    1d9a:	14 c0       	rjmp	.+40     	; 0x1dc4 <__vector_36+0x52>
    1d9c:	e4 e9       	ldi	r30, 0x94	; 148
    1d9e:	f5 e0       	ldi	r31, 0x05	; 5
    1da0:	a4 85       	ldd	r26, Z+12	; 0x0c
    1da2:	b5 85       	ldd	r27, Z+13	; 0x0d
    1da4:	2c 91       	ld	r18, X
    1da6:	87 85       	ldd	r24, Z+15	; 0x0f
    1da8:	8f 5f       	subi	r24, 0xFF	; 255
    1daa:	8f 70       	andi	r24, 0x0F	; 15
    1dac:	90 89       	ldd	r25, Z+16	; 0x10
    1dae:	89 17       	cp	r24, r25
    1db0:	71 f0       	breq	.+28     	; 0x1dce <__vector_36+0x5c>
    1db2:	df 01       	movw	r26, r30
    1db4:	e7 85       	ldd	r30, Z+15	; 0x0f
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	ec 56       	subi	r30, 0x6C	; 108
    1dba:	fa 4f       	sbci	r31, 0xFA	; 250
    1dbc:	23 8b       	std	Z+19, r18	; 0x13
    1dbe:	1f 96       	adiw	r26, 0x0f	; 15
    1dc0:	8c 93       	st	X, r24
    1dc2:	05 c0       	rjmp	.+10     	; 0x1dce <__vector_36+0x5c>
    1dc4:	e0 91 a0 05 	lds	r30, 0x05A0	; 0x8005a0 <Serial1+0xc>
    1dc8:	f0 91 a1 05 	lds	r31, 0x05A1	; 0x8005a1 <Serial1+0xd>
    1dcc:	80 81       	ld	r24, Z
    1dce:	ff 91       	pop	r31
    1dd0:	ef 91       	pop	r30
    1dd2:	bf 91       	pop	r27
    1dd4:	af 91       	pop	r26
    1dd6:	9f 91       	pop	r25
    1dd8:	8f 91       	pop	r24
    1dda:	2f 91       	pop	r18
    1ddc:	0f 90       	pop	r0
    1dde:	0b be       	out	0x3b, r0	; 59
    1de0:	0f 90       	pop	r0
    1de2:	0f be       	out	0x3f, r0	; 63
    1de4:	0f 90       	pop	r0
    1de6:	1f 90       	pop	r1
    1de8:	18 95       	reti

00001dea <__vector_37>:
    1dea:	1f 92       	push	r1
    1dec:	0f 92       	push	r0
    1dee:	0f b6       	in	r0, 0x3f	; 63
    1df0:	0f 92       	push	r0
    1df2:	11 24       	eor	r1, r1
    1df4:	0b b6       	in	r0, 0x3b	; 59
    1df6:	0f 92       	push	r0
    1df8:	2f 93       	push	r18
    1dfa:	3f 93       	push	r19
    1dfc:	4f 93       	push	r20
    1dfe:	5f 93       	push	r21
    1e00:	6f 93       	push	r22
    1e02:	7f 93       	push	r23
    1e04:	8f 93       	push	r24
    1e06:	9f 93       	push	r25
    1e08:	af 93       	push	r26
    1e0a:	bf 93       	push	r27
    1e0c:	ef 93       	push	r30
    1e0e:	ff 93       	push	r31
    1e10:	84 e9       	ldi	r24, 0x94	; 148
    1e12:	95 e0       	ldi	r25, 0x05	; 5
    1e14:	1c de       	rcall	.-968    	; 0x1a4e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1e16:	ff 91       	pop	r31
    1e18:	ef 91       	pop	r30
    1e1a:	bf 91       	pop	r27
    1e1c:	af 91       	pop	r26
    1e1e:	9f 91       	pop	r25
    1e20:	8f 91       	pop	r24
    1e22:	7f 91       	pop	r23
    1e24:	6f 91       	pop	r22
    1e26:	5f 91       	pop	r21
    1e28:	4f 91       	pop	r20
    1e2a:	3f 91       	pop	r19
    1e2c:	2f 91       	pop	r18
    1e2e:	0f 90       	pop	r0
    1e30:	0b be       	out	0x3b, r0	; 59
    1e32:	0f 90       	pop	r0
    1e34:	0f be       	out	0x3f, r0	; 63
    1e36:	0f 90       	pop	r0
    1e38:	1f 90       	pop	r1
    1e3a:	18 95       	reti

00001e3c <_GLOBAL__sub_I___vector_36>:
    1e3c:	e4 e9       	ldi	r30, 0x94	; 148
    1e3e:	f5 e0       	ldi	r31, 0x05	; 5
    1e40:	8e ea       	ldi	r24, 0xAE	; 174
    1e42:	92 e0       	ldi	r25, 0x02	; 2
    1e44:	91 83       	std	Z+1, r25	; 0x01
    1e46:	80 83       	st	Z, r24
    1e48:	8d ec       	ldi	r24, 0xCD	; 205
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	93 83       	std	Z+3, r25	; 0x03
    1e4e:	82 83       	std	Z+2, r24	; 0x02
    1e50:	8c ec       	ldi	r24, 0xCC	; 204
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	95 83       	std	Z+5, r25	; 0x05
    1e56:	84 83       	std	Z+4, r24	; 0x04
    1e58:	88 ec       	ldi	r24, 0xC8	; 200
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	97 83       	std	Z+7, r25	; 0x07
    1e5e:	86 83       	std	Z+6, r24	; 0x06
    1e60:	89 ec       	ldi	r24, 0xC9	; 201
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	91 87       	std	Z+9, r25	; 0x09
    1e66:	80 87       	std	Z+8, r24	; 0x08
    1e68:	8a ec       	ldi	r24, 0xCA	; 202
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	93 87       	std	Z+11, r25	; 0x0b
    1e6e:	82 87       	std	Z+10, r24	; 0x0a
    1e70:	8e ec       	ldi	r24, 0xCE	; 206
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	95 87       	std	Z+13, r25	; 0x0d
    1e76:	84 87       	std	Z+12, r24	; 0x0c
    1e78:	17 86       	std	Z+15, r1	; 0x0f
    1e7a:	10 8a       	std	Z+16, r1	; 0x10
    1e7c:	11 8a       	std	Z+17, r1	; 0x11
    1e7e:	12 8a       	std	Z+18, r1	; 0x12
    1e80:	08 95       	ret

00001e82 <__vector_51>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial2_available() {
  return Serial2.available();
}
    1e82:	1f 92       	push	r1
    1e84:	0f 92       	push	r0
    1e86:	0f b6       	in	r0, 0x3f	; 63
    1e88:	0f 92       	push	r0
    1e8a:	11 24       	eor	r1, r1
    1e8c:	0b b6       	in	r0, 0x3b	; 59
    1e8e:	0f 92       	push	r0
    1e90:	2f 93       	push	r18
    1e92:	8f 93       	push	r24
    1e94:	9f 93       	push	r25
    1e96:	af 93       	push	r26
    1e98:	bf 93       	push	r27
    1e9a:	ef 93       	push	r30
    1e9c:	ff 93       	push	r31
    1e9e:	e0 91 cd 05 	lds	r30, 0x05CD	; 0x8005cd <Serial2+0x6>
    1ea2:	f0 91 ce 05 	lds	r31, 0x05CE	; 0x8005ce <Serial2+0x7>
    1ea6:	80 81       	ld	r24, Z
    1ea8:	82 fd       	sbrc	r24, 2
    1eaa:	14 c0       	rjmp	.+40     	; 0x1ed4 <__vector_51+0x52>
    1eac:	e7 ec       	ldi	r30, 0xC7	; 199
    1eae:	f5 e0       	ldi	r31, 0x05	; 5
    1eb0:	a4 85       	ldd	r26, Z+12	; 0x0c
    1eb2:	b5 85       	ldd	r27, Z+13	; 0x0d
    1eb4:	2c 91       	ld	r18, X
    1eb6:	87 85       	ldd	r24, Z+15	; 0x0f
    1eb8:	8f 5f       	subi	r24, 0xFF	; 255
    1eba:	8f 70       	andi	r24, 0x0F	; 15
    1ebc:	90 89       	ldd	r25, Z+16	; 0x10
    1ebe:	89 17       	cp	r24, r25
    1ec0:	71 f0       	breq	.+28     	; 0x1ede <__vector_51+0x5c>
    1ec2:	df 01       	movw	r26, r30
    1ec4:	e7 85       	ldd	r30, Z+15	; 0x0f
    1ec6:	f0 e0       	ldi	r31, 0x00	; 0
    1ec8:	e9 53       	subi	r30, 0x39	; 57
    1eca:	fa 4f       	sbci	r31, 0xFA	; 250
    1ecc:	23 8b       	std	Z+19, r18	; 0x13
    1ece:	1f 96       	adiw	r26, 0x0f	; 15
    1ed0:	8c 93       	st	X, r24
    1ed2:	05 c0       	rjmp	.+10     	; 0x1ede <__vector_51+0x5c>
    1ed4:	e0 91 d3 05 	lds	r30, 0x05D3	; 0x8005d3 <Serial2+0xc>
    1ed8:	f0 91 d4 05 	lds	r31, 0x05D4	; 0x8005d4 <Serial2+0xd>
    1edc:	80 81       	ld	r24, Z
    1ede:	ff 91       	pop	r31
    1ee0:	ef 91       	pop	r30
    1ee2:	bf 91       	pop	r27
    1ee4:	af 91       	pop	r26
    1ee6:	9f 91       	pop	r25
    1ee8:	8f 91       	pop	r24
    1eea:	2f 91       	pop	r18
    1eec:	0f 90       	pop	r0
    1eee:	0b be       	out	0x3b, r0	; 59
    1ef0:	0f 90       	pop	r0
    1ef2:	0f be       	out	0x3f, r0	; 63
    1ef4:	0f 90       	pop	r0
    1ef6:	1f 90       	pop	r1
    1ef8:	18 95       	reti

00001efa <__vector_52>:
    1efa:	1f 92       	push	r1
    1efc:	0f 92       	push	r0
    1efe:	0f b6       	in	r0, 0x3f	; 63
    1f00:	0f 92       	push	r0
    1f02:	11 24       	eor	r1, r1
    1f04:	0b b6       	in	r0, 0x3b	; 59
    1f06:	0f 92       	push	r0
    1f08:	2f 93       	push	r18
    1f0a:	3f 93       	push	r19
    1f0c:	4f 93       	push	r20
    1f0e:	5f 93       	push	r21
    1f10:	6f 93       	push	r22
    1f12:	7f 93       	push	r23
    1f14:	8f 93       	push	r24
    1f16:	9f 93       	push	r25
    1f18:	af 93       	push	r26
    1f1a:	bf 93       	push	r27
    1f1c:	ef 93       	push	r30
    1f1e:	ff 93       	push	r31
    1f20:	87 ec       	ldi	r24, 0xC7	; 199
    1f22:	95 e0       	ldi	r25, 0x05	; 5
    1f24:	94 dd       	rcall	.-1240   	; 0x1a4e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1f26:	ff 91       	pop	r31
    1f28:	ef 91       	pop	r30
    1f2a:	bf 91       	pop	r27
    1f2c:	af 91       	pop	r26
    1f2e:	9f 91       	pop	r25
    1f30:	8f 91       	pop	r24
    1f32:	7f 91       	pop	r23
    1f34:	6f 91       	pop	r22
    1f36:	5f 91       	pop	r21
    1f38:	4f 91       	pop	r20
    1f3a:	3f 91       	pop	r19
    1f3c:	2f 91       	pop	r18
    1f3e:	0f 90       	pop	r0
    1f40:	0b be       	out	0x3b, r0	; 59
    1f42:	0f 90       	pop	r0
    1f44:	0f be       	out	0x3f, r0	; 63
    1f46:	0f 90       	pop	r0
    1f48:	1f 90       	pop	r1
    1f4a:	18 95       	reti

00001f4c <_GLOBAL__sub_I___vector_51>:
    1f4c:	e7 ec       	ldi	r30, 0xC7	; 199
    1f4e:	f5 e0       	ldi	r31, 0x05	; 5
    1f50:	8e ea       	ldi	r24, 0xAE	; 174
    1f52:	92 e0       	ldi	r25, 0x02	; 2
    1f54:	91 83       	std	Z+1, r25	; 0x01
    1f56:	80 83       	st	Z, r24
    1f58:	85 ed       	ldi	r24, 0xD5	; 213
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	93 83       	std	Z+3, r25	; 0x03
    1f5e:	82 83       	std	Z+2, r24	; 0x02
    1f60:	84 ed       	ldi	r24, 0xD4	; 212
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	95 83       	std	Z+5, r25	; 0x05
    1f66:	84 83       	std	Z+4, r24	; 0x04
    1f68:	80 ed       	ldi	r24, 0xD0	; 208
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	97 83       	std	Z+7, r25	; 0x07
    1f6e:	86 83       	std	Z+6, r24	; 0x06
    1f70:	81 ed       	ldi	r24, 0xD1	; 209
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	91 87       	std	Z+9, r25	; 0x09
    1f76:	80 87       	std	Z+8, r24	; 0x08
    1f78:	82 ed       	ldi	r24, 0xD2	; 210
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	93 87       	std	Z+11, r25	; 0x0b
    1f7e:	82 87       	std	Z+10, r24	; 0x0a
    1f80:	86 ed       	ldi	r24, 0xD6	; 214
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	95 87       	std	Z+13, r25	; 0x0d
    1f86:	84 87       	std	Z+12, r24	; 0x0c
    1f88:	17 86       	std	Z+15, r1	; 0x0f
    1f8a:	10 8a       	std	Z+16, r1	; 0x10
    1f8c:	11 8a       	std	Z+17, r1	; 0x11
    1f8e:	12 8a       	std	Z+18, r1	; 0x12
    1f90:	08 95       	ret

00001f92 <__vector_54>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial3_available() {
  return Serial3.available();
}
    1f92:	1f 92       	push	r1
    1f94:	0f 92       	push	r0
    1f96:	0f b6       	in	r0, 0x3f	; 63
    1f98:	0f 92       	push	r0
    1f9a:	11 24       	eor	r1, r1
    1f9c:	0b b6       	in	r0, 0x3b	; 59
    1f9e:	0f 92       	push	r0
    1fa0:	2f 93       	push	r18
    1fa2:	8f 93       	push	r24
    1fa4:	9f 93       	push	r25
    1fa6:	af 93       	push	r26
    1fa8:	bf 93       	push	r27
    1faa:	ef 93       	push	r30
    1fac:	ff 93       	push	r31
    1fae:	e0 91 00 06 	lds	r30, 0x0600	; 0x800600 <Serial3+0x6>
    1fb2:	f0 91 01 06 	lds	r31, 0x0601	; 0x800601 <Serial3+0x7>
    1fb6:	80 81       	ld	r24, Z
    1fb8:	82 fd       	sbrc	r24, 2
    1fba:	14 c0       	rjmp	.+40     	; 0x1fe4 <__vector_54+0x52>
    1fbc:	ea ef       	ldi	r30, 0xFA	; 250
    1fbe:	f5 e0       	ldi	r31, 0x05	; 5
    1fc0:	a4 85       	ldd	r26, Z+12	; 0x0c
    1fc2:	b5 85       	ldd	r27, Z+13	; 0x0d
    1fc4:	2c 91       	ld	r18, X
    1fc6:	87 85       	ldd	r24, Z+15	; 0x0f
    1fc8:	8f 5f       	subi	r24, 0xFF	; 255
    1fca:	8f 70       	andi	r24, 0x0F	; 15
    1fcc:	90 89       	ldd	r25, Z+16	; 0x10
    1fce:	89 17       	cp	r24, r25
    1fd0:	71 f0       	breq	.+28     	; 0x1fee <__vector_54+0x5c>
    1fd2:	df 01       	movw	r26, r30
    1fd4:	e7 85       	ldd	r30, Z+15	; 0x0f
    1fd6:	f0 e0       	ldi	r31, 0x00	; 0
    1fd8:	e6 50       	subi	r30, 0x06	; 6
    1fda:	fa 4f       	sbci	r31, 0xFA	; 250
    1fdc:	23 8b       	std	Z+19, r18	; 0x13
    1fde:	1f 96       	adiw	r26, 0x0f	; 15
    1fe0:	8c 93       	st	X, r24
    1fe2:	05 c0       	rjmp	.+10     	; 0x1fee <__vector_54+0x5c>
    1fe4:	e0 91 06 06 	lds	r30, 0x0606	; 0x800606 <Serial3+0xc>
    1fe8:	f0 91 07 06 	lds	r31, 0x0607	; 0x800607 <Serial3+0xd>
    1fec:	80 81       	ld	r24, Z
    1fee:	ff 91       	pop	r31
    1ff0:	ef 91       	pop	r30
    1ff2:	bf 91       	pop	r27
    1ff4:	af 91       	pop	r26
    1ff6:	9f 91       	pop	r25
    1ff8:	8f 91       	pop	r24
    1ffa:	2f 91       	pop	r18
    1ffc:	0f 90       	pop	r0
    1ffe:	0b be       	out	0x3b, r0	; 59
    2000:	0f 90       	pop	r0
    2002:	0f be       	out	0x3f, r0	; 63
    2004:	0f 90       	pop	r0
    2006:	1f 90       	pop	r1
    2008:	18 95       	reti

0000200a <__vector_55>:
    200a:	1f 92       	push	r1
    200c:	0f 92       	push	r0
    200e:	0f b6       	in	r0, 0x3f	; 63
    2010:	0f 92       	push	r0
    2012:	11 24       	eor	r1, r1
    2014:	0b b6       	in	r0, 0x3b	; 59
    2016:	0f 92       	push	r0
    2018:	2f 93       	push	r18
    201a:	3f 93       	push	r19
    201c:	4f 93       	push	r20
    201e:	5f 93       	push	r21
    2020:	6f 93       	push	r22
    2022:	7f 93       	push	r23
    2024:	8f 93       	push	r24
    2026:	9f 93       	push	r25
    2028:	af 93       	push	r26
    202a:	bf 93       	push	r27
    202c:	ef 93       	push	r30
    202e:	ff 93       	push	r31
    2030:	8a ef       	ldi	r24, 0xFA	; 250
    2032:	95 e0       	ldi	r25, 0x05	; 5
    2034:	0c dd       	rcall	.-1512   	; 0x1a4e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    2036:	ff 91       	pop	r31
    2038:	ef 91       	pop	r30
    203a:	bf 91       	pop	r27
    203c:	af 91       	pop	r26
    203e:	9f 91       	pop	r25
    2040:	8f 91       	pop	r24
    2042:	7f 91       	pop	r23
    2044:	6f 91       	pop	r22
    2046:	5f 91       	pop	r21
    2048:	4f 91       	pop	r20
    204a:	3f 91       	pop	r19
    204c:	2f 91       	pop	r18
    204e:	0f 90       	pop	r0
    2050:	0b be       	out	0x3b, r0	; 59
    2052:	0f 90       	pop	r0
    2054:	0f be       	out	0x3f, r0	; 63
    2056:	0f 90       	pop	r0
    2058:	1f 90       	pop	r1
    205a:	18 95       	reti

0000205c <_GLOBAL__sub_I___vector_54>:
    205c:	ea ef       	ldi	r30, 0xFA	; 250
    205e:	f5 e0       	ldi	r31, 0x05	; 5
    2060:	8e ea       	ldi	r24, 0xAE	; 174
    2062:	92 e0       	ldi	r25, 0x02	; 2
    2064:	91 83       	std	Z+1, r25	; 0x01
    2066:	80 83       	st	Z, r24
    2068:	85 e3       	ldi	r24, 0x35	; 53
    206a:	91 e0       	ldi	r25, 0x01	; 1
    206c:	93 83       	std	Z+3, r25	; 0x03
    206e:	82 83       	std	Z+2, r24	; 0x02
    2070:	84 e3       	ldi	r24, 0x34	; 52
    2072:	91 e0       	ldi	r25, 0x01	; 1
    2074:	95 83       	std	Z+5, r25	; 0x05
    2076:	84 83       	std	Z+4, r24	; 0x04
    2078:	80 e3       	ldi	r24, 0x30	; 48
    207a:	91 e0       	ldi	r25, 0x01	; 1
    207c:	97 83       	std	Z+7, r25	; 0x07
    207e:	86 83       	std	Z+6, r24	; 0x06
    2080:	81 e3       	ldi	r24, 0x31	; 49
    2082:	91 e0       	ldi	r25, 0x01	; 1
    2084:	91 87       	std	Z+9, r25	; 0x09
    2086:	80 87       	std	Z+8, r24	; 0x08
    2088:	82 e3       	ldi	r24, 0x32	; 50
    208a:	91 e0       	ldi	r25, 0x01	; 1
    208c:	93 87       	std	Z+11, r25	; 0x0b
    208e:	82 87       	std	Z+10, r24	; 0x0a
    2090:	86 e3       	ldi	r24, 0x36	; 54
    2092:	91 e0       	ldi	r25, 0x01	; 1
    2094:	95 87       	std	Z+13, r25	; 0x0d
    2096:	84 87       	std	Z+12, r24	; 0x0c
    2098:	17 86       	std	Z+15, r1	; 0x0f
    209a:	10 8a       	std	Z+16, r1	; 0x10
    209c:	11 8a       	std	Z+17, r1	; 0x11
    209e:	12 8a       	std	Z+18, r1	; 0x12
    20a0:	08 95       	ret

000020a2 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    20a2:	10 92 9a 06 	sts	0x069A, r1	; 0x80069a <twi_state>
    20a6:	81 e0       	ldi	r24, 0x01	; 1
    20a8:	80 93 98 06 	sts	0x0698, r24	; 0x800698 <twi_sendStop>
    20ac:	10 92 97 06 	sts	0x0697, r1	; 0x800697 <twi_inRepStart>
    20b0:	8b b1       	in	r24, 0x0b	; 11
    20b2:	83 60       	ori	r24, 0x03	; 3
    20b4:	8b b9       	out	0x0b, r24	; 11
    20b6:	e9 eb       	ldi	r30, 0xB9	; 185
    20b8:	f0 e0       	ldi	r31, 0x00	; 0
    20ba:	80 81       	ld	r24, Z
    20bc:	8e 7f       	andi	r24, 0xFE	; 254
    20be:	80 83       	st	Z, r24
    20c0:	80 81       	ld	r24, Z
    20c2:	8d 7f       	andi	r24, 0xFD	; 253
    20c4:	80 83       	st	Z, r24
    20c6:	88 e4       	ldi	r24, 0x48	; 72
    20c8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    20cc:	85 e4       	ldi	r24, 0x45	; 69
    20ce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    20d2:	08 95       	ret

000020d4 <twi_readFrom>:
    20d4:	41 32       	cpi	r20, 0x21	; 33
    20d6:	08 f0       	brcs	.+2      	; 0x20da <twi_readFrom+0x6>
    20d8:	4c c0       	rjmp	.+152    	; 0x2172 <twi_readFrom+0x9e>
    20da:	90 91 9a 06 	lds	r25, 0x069A	; 0x80069a <twi_state>
    20de:	91 11       	cpse	r25, r1
    20e0:	fc cf       	rjmp	.-8      	; 0x20da <twi_readFrom+0x6>
    20e2:	31 e0       	ldi	r19, 0x01	; 1
    20e4:	30 93 9a 06 	sts	0x069A, r19	; 0x80069a <twi_state>
    20e8:	20 93 98 06 	sts	0x0698, r18	; 0x800698 <twi_sendStop>
    20ec:	2f ef       	ldi	r18, 0xFF	; 255
    20ee:	20 93 2d 06 	sts	0x062D, r18	; 0x80062d <twi_error>
    20f2:	10 92 72 06 	sts	0x0672, r1	; 0x800672 <twi_masterBufferIndex>
    20f6:	24 0f       	add	r18, r20
    20f8:	20 93 71 06 	sts	0x0671, r18	; 0x800671 <twi_masterBufferLength>
    20fc:	30 93 99 06 	sts	0x0699, r19	; 0x800699 <twi_slarw>
    2100:	20 91 99 06 	lds	r18, 0x0699	; 0x800699 <twi_slarw>
    2104:	88 0f       	add	r24, r24
    2106:	82 2b       	or	r24, r18
    2108:	80 93 99 06 	sts	0x0699, r24	; 0x800699 <twi_slarw>
    210c:	80 91 97 06 	lds	r24, 0x0697	; 0x800697 <twi_inRepStart>
    2110:	81 30       	cpi	r24, 0x01	; 1
    2112:	81 f4       	brne	.+32     	; 0x2134 <twi_readFrom+0x60>
    2114:	10 92 97 06 	sts	0x0697, r1	; 0x800697 <twi_inRepStart>
    2118:	ab eb       	ldi	r26, 0xBB	; 187
    211a:	b0 e0       	ldi	r27, 0x00	; 0
    211c:	ec eb       	ldi	r30, 0xBC	; 188
    211e:	f0 e0       	ldi	r31, 0x00	; 0
    2120:	80 91 99 06 	lds	r24, 0x0699	; 0x800699 <twi_slarw>
    2124:	8c 93       	st	X, r24
    2126:	80 81       	ld	r24, Z
    2128:	83 fd       	sbrc	r24, 3
    212a:	fa cf       	rjmp	.-12     	; 0x2120 <twi_readFrom+0x4c>
    212c:	85 ec       	ldi	r24, 0xC5	; 197
    212e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2132:	03 c0       	rjmp	.+6      	; 0x213a <twi_readFrom+0x66>
    2134:	85 ee       	ldi	r24, 0xE5	; 229
    2136:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    213a:	80 91 9a 06 	lds	r24, 0x069A	; 0x80069a <twi_state>
    213e:	81 30       	cpi	r24, 0x01	; 1
    2140:	e1 f3       	breq	.-8      	; 0x213a <twi_readFrom+0x66>
    2142:	80 91 72 06 	lds	r24, 0x0672	; 0x800672 <twi_masterBufferIndex>
    2146:	84 17       	cp	r24, r20
    2148:	10 f4       	brcc	.+4      	; 0x214e <twi_readFrom+0x7a>
    214a:	40 91 72 06 	lds	r20, 0x0672	; 0x800672 <twi_masterBufferIndex>
    214e:	44 23       	and	r20, r20
    2150:	89 f0       	breq	.+34     	; 0x2174 <twi_readFrom+0xa0>
    2152:	e3 e7       	ldi	r30, 0x73	; 115
    2154:	f6 e0       	ldi	r31, 0x06	; 6
    2156:	a6 2f       	mov	r26, r22
    2158:	b7 2f       	mov	r27, r23
    215a:	2f ef       	ldi	r18, 0xFF	; 255
    215c:	24 0f       	add	r18, r20
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	2c 58       	subi	r18, 0x8C	; 140
    2162:	39 4f       	sbci	r19, 0xF9	; 249
    2164:	81 91       	ld	r24, Z+
    2166:	8d 93       	st	X+, r24
    2168:	e2 17       	cp	r30, r18
    216a:	f3 07       	cpc	r31, r19
    216c:	d9 f7       	brne	.-10     	; 0x2164 <twi_readFrom+0x90>
    216e:	94 2f       	mov	r25, r20
    2170:	01 c0       	rjmp	.+2      	; 0x2174 <twi_readFrom+0xa0>
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	89 2f       	mov	r24, r25
    2176:	08 95       	ret

00002178 <twi_writeTo>:
    2178:	0f 93       	push	r16
    217a:	41 32       	cpi	r20, 0x21	; 33
    217c:	08 f0       	brcs	.+2      	; 0x2180 <twi_writeTo+0x8>
    217e:	57 c0       	rjmp	.+174    	; 0x222e <__stack+0x2f>
    2180:	30 91 9a 06 	lds	r19, 0x069A	; 0x80069a <twi_state>
    2184:	31 11       	cpse	r19, r1
    2186:	fc cf       	rjmp	.-8      	; 0x2180 <twi_writeTo+0x8>
    2188:	92 e0       	ldi	r25, 0x02	; 2
    218a:	90 93 9a 06 	sts	0x069A, r25	; 0x80069a <twi_state>
    218e:	00 93 98 06 	sts	0x0698, r16	; 0x800698 <twi_sendStop>
    2192:	9f ef       	ldi	r25, 0xFF	; 255
    2194:	90 93 2d 06 	sts	0x062D, r25	; 0x80062d <twi_error>
    2198:	10 92 72 06 	sts	0x0672, r1	; 0x800672 <twi_masterBufferIndex>
    219c:	40 93 71 06 	sts	0x0671, r20	; 0x800671 <twi_masterBufferLength>
    21a0:	44 23       	and	r20, r20
    21a2:	71 f0       	breq	.+28     	; 0x21c0 <twi_writeTo+0x48>
    21a4:	fb 01       	movw	r30, r22
    21a6:	a3 e7       	ldi	r26, 0x73	; 115
    21a8:	b6 e0       	ldi	r27, 0x06	; 6
    21aa:	41 50       	subi	r20, 0x01	; 1
    21ac:	50 e0       	ldi	r21, 0x00	; 0
    21ae:	4f 5f       	subi	r20, 0xFF	; 255
    21b0:	5f 4f       	sbci	r21, 0xFF	; 255
    21b2:	64 0f       	add	r22, r20
    21b4:	75 1f       	adc	r23, r21
    21b6:	91 91       	ld	r25, Z+
    21b8:	9d 93       	st	X+, r25
    21ba:	e6 17       	cp	r30, r22
    21bc:	f7 07       	cpc	r31, r23
    21be:	d9 f7       	brne	.-10     	; 0x21b6 <twi_writeTo+0x3e>
    21c0:	10 92 99 06 	sts	0x0699, r1	; 0x800699 <twi_slarw>
    21c4:	90 91 99 06 	lds	r25, 0x0699	; 0x800699 <twi_slarw>
    21c8:	88 0f       	add	r24, r24
    21ca:	89 2b       	or	r24, r25
    21cc:	80 93 99 06 	sts	0x0699, r24	; 0x800699 <twi_slarw>
    21d0:	80 91 97 06 	lds	r24, 0x0697	; 0x800697 <twi_inRepStart>
    21d4:	81 30       	cpi	r24, 0x01	; 1
    21d6:	81 f4       	brne	.+32     	; 0x21f8 <twi_writeTo+0x80>
    21d8:	10 92 97 06 	sts	0x0697, r1	; 0x800697 <twi_inRepStart>
    21dc:	ab eb       	ldi	r26, 0xBB	; 187
    21de:	b0 e0       	ldi	r27, 0x00	; 0
    21e0:	ec eb       	ldi	r30, 0xBC	; 188
    21e2:	f0 e0       	ldi	r31, 0x00	; 0
    21e4:	80 91 99 06 	lds	r24, 0x0699	; 0x800699 <twi_slarw>
    21e8:	8c 93       	st	X, r24
    21ea:	80 81       	ld	r24, Z
    21ec:	83 fd       	sbrc	r24, 3
    21ee:	fa cf       	rjmp	.-12     	; 0x21e4 <twi_writeTo+0x6c>
    21f0:	85 ec       	ldi	r24, 0xC5	; 197
    21f2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    21f6:	03 c0       	rjmp	.+6      	; 0x21fe <twi_writeTo+0x86>
    21f8:	85 ee       	ldi	r24, 0xE5	; 229
    21fa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    21fe:	22 23       	and	r18, r18
    2200:	41 f0       	breq	.+16     	; 0x2212 <__stack+0x13>
    2202:	80 91 9a 06 	lds	r24, 0x069A	; 0x80069a <twi_state>
    2206:	82 30       	cpi	r24, 0x02	; 2
    2208:	21 f4       	brne	.+8      	; 0x2212 <__stack+0x13>
    220a:	80 91 9a 06 	lds	r24, 0x069A	; 0x80069a <twi_state>
    220e:	82 30       	cpi	r24, 0x02	; 2
    2210:	e1 f3       	breq	.-8      	; 0x220a <__stack+0xb>
    2212:	80 91 2d 06 	lds	r24, 0x062D	; 0x80062d <twi_error>
    2216:	8f 3f       	cpi	r24, 0xFF	; 255
    2218:	79 f0       	breq	.+30     	; 0x2238 <__stack+0x39>
    221a:	80 91 2d 06 	lds	r24, 0x062D	; 0x80062d <twi_error>
    221e:	80 32       	cpi	r24, 0x20	; 32
    2220:	41 f0       	breq	.+16     	; 0x2232 <__stack+0x33>
    2222:	80 91 2d 06 	lds	r24, 0x062D	; 0x80062d <twi_error>
    2226:	80 33       	cpi	r24, 0x30	; 48
    2228:	31 f0       	breq	.+12     	; 0x2236 <__stack+0x37>
    222a:	34 e0       	ldi	r19, 0x04	; 4
    222c:	05 c0       	rjmp	.+10     	; 0x2238 <__stack+0x39>
    222e:	31 e0       	ldi	r19, 0x01	; 1
    2230:	03 c0       	rjmp	.+6      	; 0x2238 <__stack+0x39>
    2232:	32 e0       	ldi	r19, 0x02	; 2
    2234:	01 c0       	rjmp	.+2      	; 0x2238 <__stack+0x39>
    2236:	33 e0       	ldi	r19, 0x03	; 3
    2238:	83 2f       	mov	r24, r19
    223a:	0f 91       	pop	r16
    223c:	08 95       	ret

0000223e <twi_transmit>:
    223e:	40 91 4f 06 	lds	r20, 0x064F	; 0x80064f <twi_txBufferLength>
    2242:	26 2f       	mov	r18, r22
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	24 0f       	add	r18, r20
    2248:	31 1d       	adc	r19, r1
    224a:	21 32       	cpi	r18, 0x21	; 33
    224c:	31 05       	cpc	r19, r1
    224e:	ec f4       	brge	.+58     	; 0x228a <twi_transmit+0x4c>
    2250:	20 91 9a 06 	lds	r18, 0x069A	; 0x80069a <twi_state>
    2254:	24 30       	cpi	r18, 0x04	; 4
    2256:	d9 f4       	brne	.+54     	; 0x228e <twi_transmit+0x50>
    2258:	66 23       	and	r22, r22
    225a:	81 f0       	breq	.+32     	; 0x227c <twi_transmit+0x3e>
    225c:	a8 2f       	mov	r26, r24
    225e:	b9 2f       	mov	r27, r25
    2260:	80 e0       	ldi	r24, 0x00	; 0
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	30 91 4f 06 	lds	r19, 0x064F	; 0x80064f <twi_txBufferLength>
    2268:	2d 91       	ld	r18, X+
    226a:	fc 01       	movw	r30, r24
    226c:	ef 5a       	subi	r30, 0xAF	; 175
    226e:	f9 4f       	sbci	r31, 0xF9	; 249
    2270:	e3 0f       	add	r30, r19
    2272:	f1 1d       	adc	r31, r1
    2274:	20 83       	st	Z, r18
    2276:	01 96       	adiw	r24, 0x01	; 1
    2278:	86 17       	cp	r24, r22
    227a:	a0 f3       	brcs	.-24     	; 0x2264 <twi_transmit+0x26>
    227c:	80 91 4f 06 	lds	r24, 0x064F	; 0x80064f <twi_txBufferLength>
    2280:	68 0f       	add	r22, r24
    2282:	60 93 4f 06 	sts	0x064F, r22	; 0x80064f <twi_txBufferLength>
    2286:	80 e0       	ldi	r24, 0x00	; 0
    2288:	08 95       	ret
    228a:	81 e0       	ldi	r24, 0x01	; 1
    228c:	08 95       	ret
    228e:	82 e0       	ldi	r24, 0x02	; 2
    2290:	08 95       	ret

00002292 <twi_attachSlaveRxEvent>:
    2292:	90 93 94 06 	sts	0x0694, r25	; 0x800694 <twi_onSlaveReceive+0x1>
    2296:	80 93 93 06 	sts	0x0693, r24	; 0x800693 <twi_onSlaveReceive>
    229a:	08 95       	ret

0000229c <twi_attachSlaveTxEvent>:
    229c:	90 93 96 06 	sts	0x0696, r25	; 0x800696 <twi_onSlaveTransmit+0x1>
    22a0:	80 93 95 06 	sts	0x0695, r24	; 0x800695 <twi_onSlaveTransmit>
    22a4:	08 95       	ret

000022a6 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    22a6:	85 ed       	ldi	r24, 0xD5	; 213
    22a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    22ac:	ec eb       	ldi	r30, 0xBC	; 188
    22ae:	f0 e0       	ldi	r31, 0x00	; 0
    22b0:	80 81       	ld	r24, Z
    22b2:	84 fd       	sbrc	r24, 4
    22b4:	fd cf       	rjmp	.-6      	; 0x22b0 <twi_stop+0xa>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    22b6:	10 92 9a 06 	sts	0x069A, r1	; 0x80069a <twi_state>
    22ba:	08 95       	ret

000022bc <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    22bc:	85 ec       	ldi	r24, 0xC5	; 197
    22be:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // update twi state
  twi_state = TWI_READY;
    22c2:	10 92 9a 06 	sts	0x069A, r1	; 0x80069a <twi_state>
    22c6:	08 95       	ret

000022c8 <__vector_39>:
}

ISR(TWI_vect)
{
    22c8:	1f 92       	push	r1
    22ca:	0f 92       	push	r0
    22cc:	0f b6       	in	r0, 0x3f	; 63
    22ce:	0f 92       	push	r0
    22d0:	11 24       	eor	r1, r1
    22d2:	0b b6       	in	r0, 0x3b	; 59
    22d4:	0f 92       	push	r0
    22d6:	2f 93       	push	r18
    22d8:	3f 93       	push	r19
    22da:	4f 93       	push	r20
    22dc:	5f 93       	push	r21
    22de:	6f 93       	push	r22
    22e0:	7f 93       	push	r23
    22e2:	8f 93       	push	r24
    22e4:	9f 93       	push	r25
    22e6:	af 93       	push	r26
    22e8:	bf 93       	push	r27
    22ea:	ef 93       	push	r30
    22ec:	ff 93       	push	r31
  switch(TW_STATUS){
    22ee:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    22f2:	88 7f       	andi	r24, 0xF8	; 248
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	89 3c       	cpi	r24, 0xC9	; 201
    22f8:	91 05       	cpc	r25, r1
    22fa:	08 f0       	brcs	.+2      	; 0x22fe <__vector_39+0x36>
    22fc:	ef c0       	rjmp	.+478    	; 0x24dc <__vector_39+0x214>
    22fe:	fc 01       	movw	r30, r24
    2300:	88 27       	eor	r24, r24
    2302:	ee 58       	subi	r30, 0x8E	; 142
    2304:	ff 4f       	sbci	r31, 0xFF	; 255
    2306:	8f 4f       	sbci	r24, 0xFF	; 255
    2308:	0c 94 3e 1b 	jmp	0x367c	; 0x367c <__tablejump2__>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    230c:	80 91 99 06 	lds	r24, 0x0699	; 0x800699 <twi_slarw>
    2310:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2314:	85 ec       	ldi	r24, 0xC5	; 197
    2316:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    231a:	e0 c0       	rjmp	.+448    	; 0x24dc <__vector_39+0x214>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    231c:	90 91 72 06 	lds	r25, 0x0672	; 0x800672 <twi_masterBufferIndex>
    2320:	80 91 71 06 	lds	r24, 0x0671	; 0x800671 <twi_masterBufferLength>
    2324:	98 17       	cp	r25, r24
    2326:	80 f4       	brcc	.+32     	; 0x2348 <__vector_39+0x80>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2328:	e0 91 72 06 	lds	r30, 0x0672	; 0x800672 <twi_masterBufferIndex>
    232c:	81 e0       	ldi	r24, 0x01	; 1
    232e:	8e 0f       	add	r24, r30
    2330:	80 93 72 06 	sts	0x0672, r24	; 0x800672 <twi_masterBufferIndex>
    2334:	f0 e0       	ldi	r31, 0x00	; 0
    2336:	ed 58       	subi	r30, 0x8D	; 141
    2338:	f9 4f       	sbci	r31, 0xF9	; 249
    233a:	80 81       	ld	r24, Z
    233c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2340:	85 ec       	ldi	r24, 0xC5	; 197
    2342:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2346:	ca c0       	rjmp	.+404    	; 0x24dc <__vector_39+0x214>
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
        twi_reply(1);
      }else{
	if (twi_sendStop)
    2348:	80 91 98 06 	lds	r24, 0x0698	; 0x800698 <twi_sendStop>
    234c:	88 23       	and	r24, r24
    234e:	11 f0       	breq	.+4      	; 0x2354 <__vector_39+0x8c>
          twi_stop();
    2350:	aa df       	rcall	.-172    	; 0x22a6 <twi_stop>
    2352:	c4 c0       	rjmp	.+392    	; 0x24dc <__vector_39+0x214>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    2354:	81 e0       	ldi	r24, 0x01	; 1
    2356:	80 93 97 06 	sts	0x0697, r24	; 0x800697 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    235a:	84 ea       	ldi	r24, 0xA4	; 164
    235c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	  twi_state = TWI_READY;
    2360:	10 92 9a 06 	sts	0x069A, r1	; 0x80069a <twi_state>
    2364:	bb c0       	rjmp	.+374    	; 0x24dc <__vector_39+0x214>
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    2366:	80 e2       	ldi	r24, 0x20	; 32
    2368:	80 93 2d 06 	sts	0x062D, r24	; 0x80062d <twi_error>
      twi_stop();
    236c:	9c df       	rcall	.-200    	; 0x22a6 <twi_stop>
      break;
    236e:	b6 c0       	rjmp	.+364    	; 0x24dc <__vector_39+0x214>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    2370:	80 e3       	ldi	r24, 0x30	; 48
    2372:	80 93 2d 06 	sts	0x062D, r24	; 0x80062d <twi_error>
      twi_stop();
    2376:	97 df       	rcall	.-210    	; 0x22a6 <twi_stop>
      break;
    2378:	b1 c0       	rjmp	.+354    	; 0x24dc <__vector_39+0x214>
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    237a:	88 e3       	ldi	r24, 0x38	; 56
    237c:	80 93 2d 06 	sts	0x062D, r24	; 0x80062d <twi_error>
      twi_releaseBus();
    2380:	9d df       	rcall	.-198    	; 0x22bc <twi_releaseBus>
      break;
    2382:	ac c0       	rjmp	.+344    	; 0x24dc <__vector_39+0x214>

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2384:	e0 91 72 06 	lds	r30, 0x0672	; 0x800672 <twi_masterBufferIndex>
    2388:	81 e0       	ldi	r24, 0x01	; 1
    238a:	8e 0f       	add	r24, r30
    238c:	80 93 72 06 	sts	0x0672, r24	; 0x800672 <twi_masterBufferIndex>
    2390:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2394:	f0 e0       	ldi	r31, 0x00	; 0
    2396:	ed 58       	subi	r30, 0x8D	; 141
    2398:	f9 4f       	sbci	r31, 0xF9	; 249
    239a:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    239c:	90 91 72 06 	lds	r25, 0x0672	; 0x800672 <twi_masterBufferIndex>
    23a0:	80 91 71 06 	lds	r24, 0x0671	; 0x800671 <twi_masterBufferLength>
    23a4:	98 17       	cp	r25, r24
    23a6:	20 f4       	brcc	.+8      	; 0x23b0 <__vector_39+0xe8>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    23a8:	85 ec       	ldi	r24, 0xC5	; 197
    23aa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    23ae:	96 c0       	rjmp	.+300    	; 0x24dc <__vector_39+0x214>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    23b0:	85 e8       	ldi	r24, 0x85	; 133
    23b2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    23b6:	92 c0       	rjmp	.+292    	; 0x24dc <__vector_39+0x214>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    23b8:	e0 91 72 06 	lds	r30, 0x0672	; 0x800672 <twi_masterBufferIndex>
    23bc:	81 e0       	ldi	r24, 0x01	; 1
    23be:	8e 0f       	add	r24, r30
    23c0:	80 93 72 06 	sts	0x0672, r24	; 0x800672 <twi_masterBufferIndex>
    23c4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    23c8:	f0 e0       	ldi	r31, 0x00	; 0
    23ca:	ed 58       	subi	r30, 0x8D	; 141
    23cc:	f9 4f       	sbci	r31, 0xF9	; 249
    23ce:	80 83       	st	Z, r24
	if (twi_sendStop)
    23d0:	80 91 98 06 	lds	r24, 0x0698	; 0x800698 <twi_sendStop>
    23d4:	88 23       	and	r24, r24
          twi_stop();
    23d6:	11 f0       	breq	.+4      	; 0x23dc <__vector_39+0x114>
    23d8:	66 df       	rcall	.-308    	; 0x22a6 <twi_stop>
    23da:	80 c0       	rjmp	.+256    	; 0x24dc <__vector_39+0x214>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    23dc:	81 e0       	ldi	r24, 0x01	; 1
    23de:	80 93 97 06 	sts	0x0697, r24	; 0x800697 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    23e2:	84 ea       	ldi	r24, 0xA4	; 164
    23e4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	  twi_state = TWI_READY;
    23e8:	10 92 9a 06 	sts	0x069A, r1	; 0x80069a <twi_state>
	}    
	break;
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
    23ec:	77 c0       	rjmp	.+238    	; 0x24dc <__vector_39+0x214>
    23ee:	5b df       	rcall	.-330    	; 0x22a6 <twi_stop>
      break;
    23f0:	75 c0       	rjmp	.+234    	; 0x24dc <__vector_39+0x214>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    23f2:	83 e0       	ldi	r24, 0x03	; 3
    23f4:	80 93 9a 06 	sts	0x069A, r24	; 0x80069a <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    23f8:	10 92 2e 06 	sts	0x062E, r1	; 0x80062e <twi_rxBufferIndex>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    23fc:	85 ec       	ldi	r24, 0xC5	; 197
    23fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2402:	6c c0       	rjmp	.+216    	; 0x24dc <__vector_39+0x214>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2404:	80 91 2e 06 	lds	r24, 0x062E	; 0x80062e <twi_rxBufferIndex>
    2408:	80 32       	cpi	r24, 0x20	; 32
    240a:	80 f4       	brcc	.+32     	; 0x242c <__vector_39+0x164>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    240c:	e0 91 2e 06 	lds	r30, 0x062E	; 0x80062e <twi_rxBufferIndex>
    2410:	81 e0       	ldi	r24, 0x01	; 1
    2412:	8e 0f       	add	r24, r30
    2414:	80 93 2e 06 	sts	0x062E, r24	; 0x80062e <twi_rxBufferIndex>
    2418:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    241c:	f0 e0       	ldi	r31, 0x00	; 0
    241e:	e1 5d       	subi	r30, 0xD1	; 209
    2420:	f9 4f       	sbci	r31, 0xF9	; 249
    2422:	80 83       	st	Z, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2424:	85 ec       	ldi	r24, 0xC5	; 197
    2426:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    242a:	58 c0       	rjmp	.+176    	; 0x24dc <__vector_39+0x214>
    242c:	85 e8       	ldi	r24, 0x85	; 133
    242e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    2432:	54 c0       	rjmp	.+168    	; 0x24dc <__vector_39+0x214>
    2434:	43 df       	rcall	.-378    	; 0x22bc <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2436:	80 91 2e 06 	lds	r24, 0x062E	; 0x80062e <twi_rxBufferIndex>
    243a:	80 32       	cpi	r24, 0x20	; 32
    243c:	30 f4       	brcc	.+12     	; 0x244a <__vector_39+0x182>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    243e:	e0 91 2e 06 	lds	r30, 0x062E	; 0x80062e <twi_rxBufferIndex>
    2442:	f0 e0       	ldi	r31, 0x00	; 0
    2444:	e1 5d       	subi	r30, 0xD1	; 209
    2446:	f9 4f       	sbci	r31, 0xF9	; 249
    2448:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    244a:	60 91 2e 06 	lds	r22, 0x062E	; 0x80062e <twi_rxBufferIndex>
    244e:	70 e0       	ldi	r23, 0x00	; 0
    2450:	e0 91 93 06 	lds	r30, 0x0693	; 0x800693 <twi_onSlaveReceive>
    2454:	f0 91 94 06 	lds	r31, 0x0694	; 0x800694 <twi_onSlaveReceive+0x1>
    2458:	8f e2       	ldi	r24, 0x2F	; 47
    245a:	96 e0       	ldi	r25, 0x06	; 6
    245c:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    245e:	10 92 2e 06 	sts	0x062E, r1	; 0x80062e <twi_rxBufferIndex>
      break;
    2462:	3c c0       	rjmp	.+120    	; 0x24dc <__vector_39+0x214>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2464:	85 e8       	ldi	r24, 0x85	; 133
    2466:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    246a:	38 c0       	rjmp	.+112    	; 0x24dc <__vector_39+0x214>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    246c:	84 e0       	ldi	r24, 0x04	; 4
    246e:	80 93 9a 06 	sts	0x069A, r24	; 0x80069a <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    2472:	10 92 50 06 	sts	0x0650, r1	; 0x800650 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    2476:	10 92 4f 06 	sts	0x064F, r1	; 0x80064f <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    247a:	e0 91 95 06 	lds	r30, 0x0695	; 0x800695 <twi_onSlaveTransmit>
    247e:	f0 91 96 06 	lds	r31, 0x0696	; 0x800696 <twi_onSlaveTransmit+0x1>
    2482:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    2484:	80 91 4f 06 	lds	r24, 0x064F	; 0x80064f <twi_txBufferLength>
    2488:	81 11       	cpse	r24, r1
    248a:	05 c0       	rjmp	.+10     	; 0x2496 <__vector_39+0x1ce>
        twi_txBufferLength = 1;
    248c:	81 e0       	ldi	r24, 0x01	; 1
    248e:	80 93 4f 06 	sts	0x064F, r24	; 0x80064f <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    2492:	10 92 51 06 	sts	0x0651, r1	; 0x800651 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    2496:	e0 91 50 06 	lds	r30, 0x0650	; 0x800650 <twi_txBufferIndex>
    249a:	81 e0       	ldi	r24, 0x01	; 1
    249c:	8e 0f       	add	r24, r30
    249e:	80 93 50 06 	sts	0x0650, r24	; 0x800650 <twi_txBufferIndex>
    24a2:	f0 e0       	ldi	r31, 0x00	; 0
    24a4:	ef 5a       	subi	r30, 0xAF	; 175
    24a6:	f9 4f       	sbci	r31, 0xF9	; 249
    24a8:	80 81       	ld	r24, Z
    24aa:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    24ae:	90 91 50 06 	lds	r25, 0x0650	; 0x800650 <twi_txBufferIndex>
    24b2:	80 91 4f 06 	lds	r24, 0x064F	; 0x80064f <twi_txBufferLength>
    24b6:	98 17       	cp	r25, r24
    24b8:	20 f4       	brcc	.+8      	; 0x24c2 <__vector_39+0x1fa>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    24ba:	85 ec       	ldi	r24, 0xC5	; 197
    24bc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    24c0:	0d c0       	rjmp	.+26     	; 0x24dc <__vector_39+0x214>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    24c2:	85 e8       	ldi	r24, 0x85	; 133
    24c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    24c8:	09 c0       	rjmp	.+18     	; 0x24dc <__vector_39+0x214>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    24ca:	85 ec       	ldi	r24, 0xC5	; 197
    24cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    24d0:	10 92 9a 06 	sts	0x069A, r1	; 0x80069a <twi_state>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    24d4:	03 c0       	rjmp	.+6      	; 0x24dc <__vector_39+0x214>
    24d6:	10 92 2d 06 	sts	0x062D, r1	; 0x80062d <twi_error>
      twi_stop();
    24da:	e5 de       	rcall	.-566    	; 0x22a6 <twi_stop>
      break;
  }
    24dc:	ff 91       	pop	r31
    24de:	ef 91       	pop	r30
    24e0:	bf 91       	pop	r27
    24e2:	af 91       	pop	r26
    24e4:	9f 91       	pop	r25
    24e6:	8f 91       	pop	r24
    24e8:	7f 91       	pop	r23
    24ea:	6f 91       	pop	r22
    24ec:	5f 91       	pop	r21
    24ee:	4f 91       	pop	r20
    24f0:	3f 91       	pop	r19
    24f2:	2f 91       	pop	r18
    24f4:	0f 90       	pop	r0
    24f6:	0b be       	out	0x3b, r0	; 59
    24f8:	0f 90       	pop	r0
    24fa:	0f be       	out	0x3f, r0	; 63
    24fc:	0f 90       	pop	r0
    24fe:	1f 90       	pop	r1
    2500:	18 95       	reti

00002502 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
	user_onRequest = function;
    2502:	80 91 c5 06 	lds	r24, 0x06C5	; 0x8006c5 <_ZN7TwoWire14rxBufferLengthE>
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	20 91 c6 06 	lds	r18, 0x06C6	; 0x8006c6 <_ZN7TwoWire13rxBufferIndexE>
    250c:	82 1b       	sub	r24, r18
    250e:	91 09       	sbc	r25, r1
    2510:	08 95       	ret

00002512 <_ZN7TwoWire4readEv>:
    2512:	90 91 c6 06 	lds	r25, 0x06C6	; 0x8006c6 <_ZN7TwoWire13rxBufferIndexE>
    2516:	80 91 c5 06 	lds	r24, 0x06C5	; 0x8006c5 <_ZN7TwoWire14rxBufferLengthE>
    251a:	98 17       	cp	r25, r24
    251c:	50 f4       	brcc	.+20     	; 0x2532 <_ZN7TwoWire4readEv+0x20>
    251e:	e9 2f       	mov	r30, r25
    2520:	f0 e0       	ldi	r31, 0x00	; 0
    2522:	e9 53       	subi	r30, 0x39	; 57
    2524:	f9 4f       	sbci	r31, 0xF9	; 249
    2526:	20 81       	ld	r18, Z
    2528:	30 e0       	ldi	r19, 0x00	; 0
    252a:	9f 5f       	subi	r25, 0xFF	; 255
    252c:	90 93 c6 06 	sts	0x06C6, r25	; 0x8006c6 <_ZN7TwoWire13rxBufferIndexE>
    2530:	02 c0       	rjmp	.+4      	; 0x2536 <_ZN7TwoWire4readEv+0x24>
    2532:	2f ef       	ldi	r18, 0xFF	; 255
    2534:	3f ef       	ldi	r19, 0xFF	; 255
    2536:	c9 01       	movw	r24, r18
    2538:	08 95       	ret

0000253a <_ZN7TwoWire4peekEv>:
    253a:	e0 91 c6 06 	lds	r30, 0x06C6	; 0x8006c6 <_ZN7TwoWire13rxBufferIndexE>
    253e:	80 91 c5 06 	lds	r24, 0x06C5	; 0x8006c5 <_ZN7TwoWire14rxBufferLengthE>
    2542:	e8 17       	cp	r30, r24
    2544:	30 f4       	brcc	.+12     	; 0x2552 <_ZN7TwoWire4peekEv+0x18>
    2546:	f0 e0       	ldi	r31, 0x00	; 0
    2548:	e9 53       	subi	r30, 0x39	; 57
    254a:	f9 4f       	sbci	r31, 0xF9	; 249
    254c:	80 81       	ld	r24, Z
    254e:	90 e0       	ldi	r25, 0x00	; 0
    2550:	08 95       	ret
    2552:	8f ef       	ldi	r24, 0xFF	; 255
    2554:	9f ef       	ldi	r25, 0xFF	; 255
    2556:	08 95       	ret

00002558 <_ZN7TwoWire5flushEv>:
    2558:	08 95       	ret

0000255a <_ZN7TwoWire16onReceiveServiceEPhi>:
    255a:	cf 93       	push	r28
    255c:	df 93       	push	r29
    255e:	ec 01       	movw	r28, r24
    2560:	e0 91 9d 06 	lds	r30, 0x069D	; 0x80069d <_ZN7TwoWire14user_onReceiveE>
    2564:	f0 91 9e 06 	lds	r31, 0x069E	; 0x80069e <_ZN7TwoWire14user_onReceiveE+0x1>
    2568:	30 97       	sbiw	r30, 0x00	; 0
    256a:	01 f1       	breq	.+64     	; 0x25ac <_ZN7TwoWire16onReceiveServiceEPhi+0x52>
    256c:	90 91 c6 06 	lds	r25, 0x06C6	; 0x8006c6 <_ZN7TwoWire13rxBufferIndexE>
    2570:	80 91 c5 06 	lds	r24, 0x06C5	; 0x8006c5 <_ZN7TwoWire14rxBufferLengthE>
    2574:	98 17       	cp	r25, r24
    2576:	d0 f0       	brcs	.+52     	; 0x25ac <_ZN7TwoWire16onReceiveServiceEPhi+0x52>
    2578:	16 16       	cp	r1, r22
    257a:	17 06       	cpc	r1, r23
    257c:	8c f4       	brge	.+34     	; 0x25a0 <_ZN7TwoWire16onReceiveServiceEPhi+0x46>
    257e:	20 e0       	ldi	r18, 0x00	; 0
    2580:	30 e0       	ldi	r19, 0x00	; 0
    2582:	90 e0       	ldi	r25, 0x00	; 0
    2584:	de 01       	movw	r26, r28
    2586:	a9 0f       	add	r26, r25
    2588:	b1 1d       	adc	r27, r1
    258a:	4c 91       	ld	r20, X
    258c:	d9 01       	movw	r26, r18
    258e:	a9 53       	subi	r26, 0x39	; 57
    2590:	b9 4f       	sbci	r27, 0xF9	; 249
    2592:	4c 93       	st	X, r20
    2594:	9f 5f       	subi	r25, 0xFF	; 255
    2596:	29 2f       	mov	r18, r25
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	26 17       	cp	r18, r22
    259c:	37 07       	cpc	r19, r23
    259e:	94 f3       	brlt	.-28     	; 0x2584 <_ZN7TwoWire16onReceiveServiceEPhi+0x2a>
    25a0:	cb 01       	movw	r24, r22
    25a2:	10 92 c6 06 	sts	0x06C6, r1	; 0x8006c6 <_ZN7TwoWire13rxBufferIndexE>
    25a6:	60 93 c5 06 	sts	0x06C5, r22	; 0x8006c5 <_ZN7TwoWire14rxBufferLengthE>
    25aa:	19 95       	eicall
    25ac:	df 91       	pop	r29
    25ae:	cf 91       	pop	r28
    25b0:	08 95       	ret

000025b2 <_ZN7TwoWire16onRequestServiceEv>:
    25b2:	e0 91 9f 06 	lds	r30, 0x069F	; 0x80069f <_ZN7TwoWire14user_onRequestE>
    25b6:	f0 91 a0 06 	lds	r31, 0x06A0	; 0x8006a0 <_ZN7TwoWire14user_onRequestE+0x1>
    25ba:	30 97       	sbiw	r30, 0x00	; 0
    25bc:	29 f0       	breq	.+10     	; 0x25c8 <_ZN7TwoWire16onRequestServiceEv+0x16>
    25be:	10 92 a3 06 	sts	0x06A3, r1	; 0x8006a3 <_ZN7TwoWire13txBufferIndexE>
    25c2:	10 92 a2 06 	sts	0x06A2, r1	; 0x8006a2 <_ZN7TwoWire14txBufferLengthE>
    25c6:	19 95       	eicall
    25c8:	08 95       	ret

000025ca <_ZN7TwoWire5writeEh>:
    25ca:	cf 93       	push	r28
    25cc:	df 93       	push	r29
    25ce:	1f 92       	push	r1
    25d0:	cd b7       	in	r28, 0x3d	; 61
    25d2:	de b7       	in	r29, 0x3e	; 62
    25d4:	69 83       	std	Y+1, r22	; 0x01
    25d6:	80 91 a1 06 	lds	r24, 0x06A1	; 0x8006a1 <_ZN7TwoWire12transmittingE>
    25da:	88 23       	and	r24, r24
    25dc:	99 f0       	breq	.+38     	; 0x2604 <_ZN7TwoWire5writeEh+0x3a>
    25de:	80 91 a2 06 	lds	r24, 0x06A2	; 0x8006a2 <_ZN7TwoWire14txBufferLengthE>
    25e2:	80 32       	cpi	r24, 0x20	; 32
    25e4:	b0 f4       	brcc	.+44     	; 0x2612 <_ZN7TwoWire5writeEh+0x48>
    25e6:	80 91 a3 06 	lds	r24, 0x06A3	; 0x8006a3 <_ZN7TwoWire13txBufferIndexE>
    25ea:	e8 2f       	mov	r30, r24
    25ec:	f0 e0       	ldi	r31, 0x00	; 0
    25ee:	ec 55       	subi	r30, 0x5C	; 92
    25f0:	f9 4f       	sbci	r31, 0xF9	; 249
    25f2:	60 83       	st	Z, r22
    25f4:	8f 5f       	subi	r24, 0xFF	; 255
    25f6:	80 93 a3 06 	sts	0x06A3, r24	; 0x8006a3 <_ZN7TwoWire13txBufferIndexE>
    25fa:	80 93 a2 06 	sts	0x06A2, r24	; 0x8006a2 <_ZN7TwoWire14txBufferLengthE>
    25fe:	81 e0       	ldi	r24, 0x01	; 1
    2600:	90 e0       	ldi	r25, 0x00	; 0
    2602:	09 c0       	rjmp	.+18     	; 0x2616 <_ZN7TwoWire5writeEh+0x4c>
    2604:	61 e0       	ldi	r22, 0x01	; 1
    2606:	ce 01       	movw	r24, r28
    2608:	01 96       	adiw	r24, 0x01	; 1
    260a:	19 de       	rcall	.-974    	; 0x223e <twi_transmit>
    260c:	81 e0       	ldi	r24, 0x01	; 1
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	02 c0       	rjmp	.+4      	; 0x2616 <_ZN7TwoWire5writeEh+0x4c>
    2612:	80 e0       	ldi	r24, 0x00	; 0
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	0f 90       	pop	r0
    2618:	df 91       	pop	r29
    261a:	cf 91       	pop	r28
    261c:	08 95       	ret

0000261e <_ZN7TwoWire5writeEPKhj>:
    261e:	cf 92       	push	r12
    2620:	df 92       	push	r13
    2622:	ef 92       	push	r14
    2624:	ff 92       	push	r15
    2626:	0f 93       	push	r16
    2628:	1f 93       	push	r17
    262a:	cf 93       	push	r28
    262c:	df 93       	push	r29
    262e:	8c 01       	movw	r16, r24
    2630:	cb 01       	movw	r24, r22
    2632:	6a 01       	movw	r12, r20
    2634:	20 91 a1 06 	lds	r18, 0x06A1	; 0x8006a1 <_ZN7TwoWire12transmittingE>
    2638:	22 23       	and	r18, r18
    263a:	a1 f0       	breq	.+40     	; 0x2664 <_ZN7TwoWire5writeEPKhj+0x46>
    263c:	41 15       	cp	r20, r1
    263e:	51 05       	cpc	r21, r1
    2640:	99 f0       	breq	.+38     	; 0x2668 <_ZN7TwoWire5writeEPKhj+0x4a>
    2642:	eb 01       	movw	r28, r22
    2644:	7b 01       	movw	r14, r22
    2646:	e4 0e       	add	r14, r20
    2648:	f5 1e       	adc	r15, r21
    264a:	69 91       	ld	r22, Y+
    264c:	d8 01       	movw	r26, r16
    264e:	ed 91       	ld	r30, X+
    2650:	fc 91       	ld	r31, X
    2652:	01 90       	ld	r0, Z+
    2654:	f0 81       	ld	r31, Z
    2656:	e0 2d       	mov	r30, r0
    2658:	c8 01       	movw	r24, r16
    265a:	19 95       	eicall
    265c:	ce 15       	cp	r28, r14
    265e:	df 05       	cpc	r29, r15
    2660:	a1 f7       	brne	.-24     	; 0x264a <_ZN7TwoWire5writeEPKhj+0x2c>
    2662:	02 c0       	rjmp	.+4      	; 0x2668 <_ZN7TwoWire5writeEPKhj+0x4a>
    2664:	64 2f       	mov	r22, r20
    2666:	eb dd       	rcall	.-1066   	; 0x223e <twi_transmit>
    2668:	c6 01       	movw	r24, r12
    266a:	df 91       	pop	r29
    266c:	cf 91       	pop	r28
    266e:	1f 91       	pop	r17
    2670:	0f 91       	pop	r16
    2672:	ff 90       	pop	r15
    2674:	ef 90       	pop	r14
    2676:	df 90       	pop	r13
    2678:	cf 90       	pop	r12
    267a:	08 95       	ret

0000267c <_ZN7TwoWire5beginEv>:
    267c:	10 92 c6 06 	sts	0x06C6, r1	; 0x8006c6 <_ZN7TwoWire13rxBufferIndexE>
    2680:	10 92 c5 06 	sts	0x06C5, r1	; 0x8006c5 <_ZN7TwoWire14rxBufferLengthE>
    2684:	10 92 a3 06 	sts	0x06A3, r1	; 0x8006a3 <_ZN7TwoWire13txBufferIndexE>
    2688:	10 92 a2 06 	sts	0x06A2, r1	; 0x8006a2 <_ZN7TwoWire14txBufferLengthE>
    268c:	0a dd       	rcall	.-1516   	; 0x20a2 <twi_init>
    268e:	89 ed       	ldi	r24, 0xD9	; 217
    2690:	92 e1       	ldi	r25, 0x12	; 18
    2692:	04 de       	rcall	.-1016   	; 0x229c <twi_attachSlaveTxEvent>
    2694:	8d ea       	ldi	r24, 0xAD	; 173
    2696:	92 e1       	ldi	r25, 0x12	; 18
    2698:	fc cd       	rjmp	.-1032   	; 0x2292 <twi_attachSlaveRxEvent>
    269a:	08 95       	ret

0000269c <_ZN7TwoWire17beginTransmissionEh>:
    269c:	81 e0       	ldi	r24, 0x01	; 1
    269e:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <_ZN7TwoWire12transmittingE>
    26a2:	60 93 c4 06 	sts	0x06C4, r22	; 0x8006c4 <_ZN7TwoWire9txAddressE>
    26a6:	10 92 a3 06 	sts	0x06A3, r1	; 0x8006a3 <_ZN7TwoWire13txBufferIndexE>
    26aa:	10 92 a2 06 	sts	0x06A2, r1	; 0x8006a2 <_ZN7TwoWire14txBufferLengthE>
    26ae:	08 95       	ret

000026b0 <_ZN7TwoWire15endTransmissionEh>:
    26b0:	0f 93       	push	r16
    26b2:	06 2f       	mov	r16, r22
    26b4:	21 e0       	ldi	r18, 0x01	; 1
    26b6:	40 91 a2 06 	lds	r20, 0x06A2	; 0x8006a2 <_ZN7TwoWire14txBufferLengthE>
    26ba:	64 ea       	ldi	r22, 0xA4	; 164
    26bc:	76 e0       	ldi	r23, 0x06	; 6
    26be:	80 91 c4 06 	lds	r24, 0x06C4	; 0x8006c4 <_ZN7TwoWire9txAddressE>
    26c2:	5a dd       	rcall	.-1356   	; 0x2178 <twi_writeTo>
    26c4:	10 92 a3 06 	sts	0x06A3, r1	; 0x8006a3 <_ZN7TwoWire13txBufferIndexE>
    26c8:	10 92 a2 06 	sts	0x06A2, r1	; 0x8006a2 <_ZN7TwoWire14txBufferLengthE>
    26cc:	10 92 a1 06 	sts	0x06A1, r1	; 0x8006a1 <_ZN7TwoWire12transmittingE>
    26d0:	0f 91       	pop	r16
    26d2:	08 95       	ret

000026d4 <_ZN7TwoWire11requestFromEhhmhh>:
    26d4:	4f 92       	push	r4
    26d6:	5f 92       	push	r5
    26d8:	6f 92       	push	r6
    26da:	7f 92       	push	r7
    26dc:	af 92       	push	r10
    26de:	bf 92       	push	r11
    26e0:	cf 92       	push	r12
    26e2:	ef 92       	push	r14
    26e4:	ff 92       	push	r15
    26e6:	0f 93       	push	r16
    26e8:	1f 93       	push	r17
    26ea:	cf 93       	push	r28
    26ec:	df 93       	push	r29
    26ee:	5c 01       	movw	r10, r24
    26f0:	f6 2e       	mov	r15, r22
    26f2:	d4 2f       	mov	r29, r20
    26f4:	28 01       	movw	r4, r16
    26f6:	39 01       	movw	r6, r18
    26f8:	ee 20       	and	r14, r14
    26fa:	39 f1       	breq	.+78     	; 0x274a <_ZN7TwoWire11requestFromEhhmhh+0x76>
    26fc:	cf df       	rcall	.-98     	; 0x269c <_ZN7TwoWire17beginTransmissionEh>
    26fe:	8e 2d       	mov	r24, r14
    2700:	84 30       	cpi	r24, 0x04	; 4
    2702:	08 f0       	brcs	.+2      	; 0x2706 <_ZN7TwoWire11requestFromEhhmhh+0x32>
    2704:	83 e0       	ldi	r24, 0x03	; 3
    2706:	cf ef       	ldi	r28, 0xFF	; 255
    2708:	c8 0f       	add	r28, r24
    270a:	88 23       	and	r24, r24
    270c:	d9 f0       	breq	.+54     	; 0x2744 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    270e:	8c 2f       	mov	r24, r28
    2710:	88 0f       	add	r24, r24
    2712:	88 0f       	add	r24, r24
    2714:	88 0f       	add	r24, r24
    2716:	a3 01       	movw	r20, r6
    2718:	92 01       	movw	r18, r4
    271a:	04 c0       	rjmp	.+8      	; 0x2724 <_ZN7TwoWire11requestFromEhhmhh+0x50>
    271c:	56 95       	lsr	r21
    271e:	47 95       	ror	r20
    2720:	37 95       	ror	r19
    2722:	27 95       	ror	r18
    2724:	8a 95       	dec	r24
    2726:	d2 f7       	brpl	.-12     	; 0x271c <_ZN7TwoWire11requestFromEhhmhh+0x48>
    2728:	ca 01       	movw	r24, r20
    272a:	b9 01       	movw	r22, r18
    272c:	d5 01       	movw	r26, r10
    272e:	ed 91       	ld	r30, X+
    2730:	fc 91       	ld	r31, X
    2732:	01 90       	ld	r0, Z+
    2734:	f0 81       	ld	r31, Z
    2736:	e0 2d       	mov	r30, r0
    2738:	c5 01       	movw	r24, r10
    273a:	19 95       	eicall
    273c:	8c 2f       	mov	r24, r28
    273e:	c1 50       	subi	r28, 0x01	; 1
    2740:	81 11       	cpse	r24, r1
    2742:	e5 cf       	rjmp	.-54     	; 0x270e <_ZN7TwoWire11requestFromEhhmhh+0x3a>
    2744:	60 e0       	ldi	r22, 0x00	; 0
    2746:	c5 01       	movw	r24, r10
    2748:	b3 df       	rcall	.-154    	; 0x26b0 <_ZN7TwoWire15endTransmissionEh>
    274a:	4d 2f       	mov	r20, r29
    274c:	d1 32       	cpi	r29, 0x21	; 33
    274e:	08 f0       	brcs	.+2      	; 0x2752 <_ZN7TwoWire11requestFromEhhmhh+0x7e>
    2750:	40 e2       	ldi	r20, 0x20	; 32
    2752:	2c 2d       	mov	r18, r12
    2754:	67 ec       	ldi	r22, 0xC7	; 199
    2756:	76 e0       	ldi	r23, 0x06	; 6
    2758:	8f 2d       	mov	r24, r15
    275a:	bc dc       	rcall	.-1672   	; 0x20d4 <twi_readFrom>
    275c:	10 92 c6 06 	sts	0x06C6, r1	; 0x8006c6 <_ZN7TwoWire13rxBufferIndexE>
    2760:	80 93 c5 06 	sts	0x06C5, r24	; 0x8006c5 <_ZN7TwoWire14rxBufferLengthE>
    2764:	df 91       	pop	r29
    2766:	cf 91       	pop	r28
    2768:	1f 91       	pop	r17
    276a:	0f 91       	pop	r16
    276c:	ff 90       	pop	r15
    276e:	ef 90       	pop	r14
    2770:	cf 90       	pop	r12
    2772:	bf 90       	pop	r11
    2774:	af 90       	pop	r10
    2776:	7f 90       	pop	r7
    2778:	6f 90       	pop	r6
    277a:	5f 90       	pop	r5
    277c:	4f 90       	pop	r4
    277e:	08 95       	ret

00002780 <_ZN7TwoWire11requestFromEhhh>:
    2780:	cf 92       	push	r12
    2782:	ef 92       	push	r14
    2784:	0f 93       	push	r16
    2786:	1f 93       	push	r17
    2788:	c2 2e       	mov	r12, r18
    278a:	e1 2c       	mov	r14, r1
    278c:	00 e0       	ldi	r16, 0x00	; 0
    278e:	10 e0       	ldi	r17, 0x00	; 0
    2790:	98 01       	movw	r18, r16
    2792:	a0 df       	rcall	.-192    	; 0x26d4 <_ZN7TwoWire11requestFromEhhmhh>
    2794:	1f 91       	pop	r17
    2796:	0f 91       	pop	r16
    2798:	ef 90       	pop	r14
    279a:	cf 90       	pop	r12
    279c:	08 95       	ret

0000279e <_ZN7TwoWire11requestFromEhh>:
    279e:	21 e0       	ldi	r18, 0x01	; 1
    27a0:	ef cf       	rjmp	.-34     	; 0x2780 <_ZN7TwoWire11requestFromEhhh>
    27a2:	08 95       	ret

000027a4 <_ZN7TwoWire15endTransmissionEv>:
    27a4:	61 e0       	ldi	r22, 0x01	; 1
    27a6:	84 cf       	rjmp	.-248    	; 0x26b0 <_ZN7TwoWire15endTransmissionEh>
    27a8:	08 95       	ret

000027aa <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    27aa:	80 ec       	ldi	r24, 0xC0	; 192
    27ac:	92 e0       	ldi	r25, 0x02	; 2
    27ae:	90 93 9c 06 	sts	0x069C, r25	; 0x80069c <Wire+0x1>
    27b2:	80 93 9b 06 	sts	0x069B, r24	; 0x80069b <Wire>
    27b6:	08 95       	ret

000027b8 <_ZN13DigitalSensor5beginEv>:
	else LedPort &= ~LedPin;
}

bool Robot::ReadTestBtn(){
	return !((TestBtnPinPort & TestBtnPin) > 0);
}
    27b8:	81 e0       	ldi	r24, 0x01	; 1
    27ba:	08 95       	ret

000027bc <_ZN13DigitalSensor14IsValidRequestEPKhh>:
    27bc:	81 e0       	ldi	r24, 0x01	; 1
    27be:	41 11       	cpse	r20, r1
    27c0:	80 e0       	ldi	r24, 0x00	; 0
    27c2:	08 95       	ret

000027c4 <_ZN13DigitalSensor15UpdateRequestedEPhh>:
    27c4:	fc 01       	movw	r30, r24
    27c6:	a5 81       	ldd	r26, Z+5	; 0x05
    27c8:	b6 81       	ldd	r27, Z+6	; 0x06
    27ca:	9c 91       	ld	r25, X
    27cc:	84 81       	ldd	r24, Z+4	; 0x04
    27ce:	98 23       	and	r25, r24
    27d0:	21 e0       	ldi	r18, 0x01	; 1
    27d2:	09 f4       	brne	.+2      	; 0x27d6 <_ZN13DigitalSensor15UpdateRequestedEPhh+0x12>
    27d4:	20 e0       	ldi	r18, 0x00	; 0
    27d6:	87 81       	ldd	r24, Z+7	; 0x07
    27d8:	82 27       	eor	r24, r18
    27da:	fb 01       	movw	r30, r22
    27dc:	80 83       	st	Z, r24
    27de:	81 e0       	ldi	r24, 0x01	; 1
    27e0:	08 95       	ret

000027e2 <_ZN7ISensor6UpdateEPKhh>:
    27e2:	ef 92       	push	r14
    27e4:	ff 92       	push	r15
    27e6:	1f 93       	push	r17
    27e8:	cf 93       	push	r28
    27ea:	df 93       	push	r29
    27ec:	ec 01       	movw	r28, r24
    27ee:	7b 01       	movw	r14, r22
    27f0:	14 2f       	mov	r17, r20
    27f2:	e8 81       	ld	r30, Y
    27f4:	f9 81       	ldd	r31, Y+1	; 0x01
    27f6:	04 80       	ldd	r0, Z+4	; 0x04
    27f8:	f5 81       	ldd	r31, Z+5	; 0x05
    27fa:	e0 2d       	mov	r30, r0
    27fc:	19 95       	eicall
    27fe:	88 23       	and	r24, r24
    2800:	e1 f0       	breq	.+56     	; 0x283a <_ZN7ISensor6UpdateEPKhh+0x58>
    2802:	a0 91 00 02 	lds	r26, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    2806:	b0 91 01 02 	lds	r27, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    280a:	8a 81       	ldd	r24, Y+2	; 0x02
    280c:	12 96       	adiw	r26, 0x02	; 2
    280e:	8c 93       	st	X, r24
    2810:	12 97       	sbiw	r26, 0x02	; 2
    2812:	e8 81       	ld	r30, Y
    2814:	f9 81       	ldd	r31, Y+1	; 0x01
    2816:	26 81       	ldd	r18, Z+6	; 0x06
    2818:	37 81       	ldd	r19, Z+7	; 0x07
    281a:	11 23       	and	r17, r17
    281c:	19 f0       	breq	.+6      	; 0x2824 <_ZN7ISensor6UpdateEPKhh+0x42>
    281e:	f7 01       	movw	r30, r14
    2820:	40 81       	ld	r20, Z
    2822:	01 c0       	rjmp	.+2      	; 0x2826 <_ZN7ISensor6UpdateEPKhh+0x44>
    2824:	40 e0       	ldi	r20, 0x00	; 0
    2826:	bd 01       	movw	r22, r26
    2828:	6d 5f       	subi	r22, 0xFD	; 253
    282a:	7f 4f       	sbci	r23, 0xFF	; 255
    282c:	ce 01       	movw	r24, r28
    282e:	f9 01       	movw	r30, r18
    2830:	19 95       	eicall
    2832:	61 e0       	ldi	r22, 0x01	; 1
    2834:	68 0f       	add	r22, r24
    2836:	83 e0       	ldi	r24, 0x03	; 3
    2838:	4d d8       	rcall	.-3942   	; 0x18d4 <_ZN9EtherComm11SendCommandEhh>
    283a:	df 91       	pop	r29
    283c:	cf 91       	pop	r28
    283e:	1f 91       	pop	r17
    2840:	ff 90       	pop	r15
    2842:	ef 90       	pop	r14
    2844:	08 95       	ret

00002846 <_ZN5Robot6SetLedEb>:
    2846:	88 23       	and	r24, r24
    2848:	11 f0       	breq	.+4      	; 0x284e <_ZN5Robot6SetLedEb+0x8>
    284a:	2f 9a       	sbi	0x05, 7	; 5
    284c:	08 95       	ret
    284e:	2f 98       	cbi	0x05, 7	; 5
    2850:	08 95       	ret

00002852 <_ZN5Robot14RegisterDeviceER7ISensor>:
bool Robot::begin(){
	LedDDR |= LedPin;
	return RegisterDevices();
}

void Robot::RegisterDevice(ISensor& sensor){
    2852:	0f 93       	push	r16
    2854:	1f 93       	push	r17
    2856:	cf 93       	push	r28
    2858:	df 93       	push	r29
	uint8_t id = sensor.getId();
	if(devices[id] == NULL){
    285a:	dc 01       	movw	r26, r24
    285c:	12 96       	adiw	r26, 0x02	; 2
    285e:	cc 91       	ld	r28, X
    2860:	12 97       	sbiw	r26, 0x02	; 2
    2862:	d0 e0       	ldi	r29, 0x00	; 0
    2864:	fe 01       	movw	r30, r28
    2866:	ee 0f       	add	r30, r30
    2868:	ff 1f       	adc	r31, r31
    286a:	e2 50       	subi	r30, 0x02	; 2
    286c:	f9 4f       	sbci	r31, 0xF9	; 249
    286e:	20 81       	ld	r18, Z
    2870:	31 81       	ldd	r19, Z+1	; 0x01
    2872:	23 2b       	or	r18, r19
    2874:	79 f4       	brne	.+30     	; 0x2894 <_ZN5Robot14RegisterDeviceER7ISensor+0x42>
    2876:	8c 01       	movw	r16, r24
		if(sensor.begin()){
    2878:	ed 91       	ld	r30, X+
    287a:	fc 91       	ld	r31, X
    287c:	02 80       	ldd	r0, Z+2	; 0x02
    287e:	f3 81       	ldd	r31, Z+3	; 0x03
    2880:	e0 2d       	mov	r30, r0
    2882:	19 95       	eicall
    2884:	88 23       	and	r24, r24
    2886:	31 f0       	breq	.+12     	; 0x2894 <_ZN5Robot14RegisterDeviceER7ISensor+0x42>
			devices[id] = &sensor; //TODO error handling
    2888:	cc 0f       	add	r28, r28
    288a:	dd 1f       	adc	r29, r29
    288c:	c2 50       	subi	r28, 0x02	; 2
    288e:	d9 4f       	sbci	r29, 0xF9	; 249
    2890:	19 83       	std	Y+1, r17	; 0x01
    2892:	08 83       	st	Y, r16
		}
	}else{
		//TODO id collisions
	}
}
    2894:	df 91       	pop	r29
    2896:	cf 91       	pop	r28
    2898:	1f 91       	pop	r17
    289a:	0f 91       	pop	r16
    289c:	08 95       	ret

0000289e <_ZN5Robot15RegisterDevicesEv>:

DigitalSensor BtnTest(0, TestBtnDDR, TestBtnPort, TestBtnPinPort, TestBtnPin);
ImuSensor Imu(1);

bool Robot::RegisterDevices(){
	RegisterDevice(BtnTest); //TODO return if successful
    289e:	86 ef       	ldi	r24, 0xF6	; 246
    28a0:	96 e0       	ldi	r25, 0x06	; 6
    28a2:	d7 df       	rcall	.-82     	; 0x2852 <_ZN5Robot14RegisterDeviceER7ISensor>
	RegisterDevice(Imu);
    28a4:	87 ee       	ldi	r24, 0xE7	; 231
    28a6:	96 e0       	ldi	r25, 0x06	; 6
    28a8:	d4 df       	rcall	.-88     	; 0x2852 <_ZN5Robot14RegisterDeviceER7ISensor>
	
	return true;
}
    28aa:	81 e0       	ldi	r24, 0x01	; 1
    28ac:	08 95       	ret

000028ae <_ZN5Robot5beginEv>:
bool Robot::ReadTestBtn(){
	return !((TestBtnPinPort & TestBtnPin) > 0);
}

bool Robot::begin(){
	LedDDR |= LedPin;
    28ae:	27 9a       	sbi	0x04, 7	; 4
	return RegisterDevices();
    28b0:	f6 cf       	rjmp	.-20     	; 0x289e <_ZN5Robot15RegisterDevicesEv>
}
    28b2:	08 95       	ret

000028b4 <_GLOBAL__sub_I__ZN5Robot7devicesE>:
	
	virtual void Update(const uint8_t* data, uint8_t len) = 0;
	virtual bool begin() = 0;
	
protected:
	IDevice(uint8_t ID) : id(ID){
    28b4:	e6 ef       	ldi	r30, 0xF6	; 246
    28b6:	f6 e0       	ldi	r31, 0x06	; 6
    28b8:	12 82       	std	Z+2, r1	; 0x02
				//}
			}
		}
	
	protected:
		ISensor(uint8_t ID, uint8_t type) : IDevice(ID), sensorType(type) {
    28ba:	81 e0       	ldi	r24, 0x01	; 1
    28bc:	83 83       	std	Z+3, r24	; 0x03

#include "../ISensor.h"

class DigitalSensor : public ISensor{
public:
	DigitalSensor(uint8_t ID, Register& DDRPort, Register& PortPort, Register& PinPort, uint8_t Pin, bool Inversed = true) : ISensor(ID, SENSOR_TYPE_DIGITAL), pin(Pin), pinPort(&PinPort), inversed(Inversed) {
    28be:	22 ed       	ldi	r18, 0xD2	; 210
    28c0:	32 e0       	ldi	r19, 0x02	; 2
    28c2:	31 83       	std	Z+1, r19	; 0x01
    28c4:	20 83       	st	Z, r18
    28c6:	84 83       	std	Z+4, r24	; 0x04
    28c8:	2f e2       	ldi	r18, 0x2F	; 47
    28ca:	30 e0       	ldi	r19, 0x00	; 0
    28cc:	36 83       	std	Z+6, r19	; 0x06
    28ce:	25 83       	std	Z+5, r18	; 0x05
    28d0:	87 83       	std	Z+7, r24	; 0x07
		DDRPort &= ~pin; //Enable input
    28d2:	80 98       	cbi	0x10, 0	; 16
		PortPort |= pin; //Enable pullup
    28d4:	88 9a       	sbi	0x11, 0	; 17
#include <stddef.h>

IDevice* Robot::devices[NUM_DEVICES];

DigitalSensor BtnTest(0, TestBtnDDR, TestBtnPort, TestBtnPinPort, TestBtnPin);
ImuSensor Imu(1);
    28d6:	61 e0       	ldi	r22, 0x01	; 1
    28d8:	87 ee       	ldi	r24, 0xE7	; 231
    28da:	96 e0       	ldi	r25, 0x06	; 6
    28dc:	ae c4       	rjmp	.+2396   	; 0x323a <_ZN9ImuSensorC1Eh>
    28de:	08 95       	ret

000028e0 <_ZN9ImuSensor14IsValidRequestEPKhh>:
						len = UpdateRequested(EtherComm::buffer + /*4*/3, (len > 0) ? data[0] : 0);
						EtherComm::SendCommand(CMD_UpdateDevice, len +  /*2*/1);
					}
				//}
			}
		}
    28e0:	81 e0       	ldi	r24, 0x01	; 1
    28e2:	41 11       	cpse	r20, r1
    28e4:	80 e0       	ldi	r24, 0x00	; 0
    28e6:	08 95       	ret

000028e8 <_ZN9ImuSensor5beginEv>:
ImuSensor::ImuSensor(uint8_t ID) : ISensor(ID, SENSOR_TYPE_DIGITAL), imu(55, 0x28) {
	
}

bool ImuSensor::begin(){
	return imu.begin();
    28e8:	6c e0       	ldi	r22, 0x0C	; 12
    28ea:	04 96       	adiw	r24, 0x04	; 4
    28ec:	0c 94 3a 02 	jmp	0x474	; 0x474 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>
}
    28f0:	08 95       	ret

000028f2 <_ZN9ImuSensor15UpdateRequestedEPhh>:
	*buffer++ = *val++;
}

AdafruitImu::Vector<3> vector;
AdafruitImu::Quaternion quat;
uint8_t ImuSensor::UpdateRequested(uint8_t* buffer, uint8_t mask){
    28f2:	8f 92       	push	r8
    28f4:	9f 92       	push	r9
    28f6:	af 92       	push	r10
    28f8:	bf 92       	push	r11
    28fa:	cf 92       	push	r12
    28fc:	df 92       	push	r13
    28fe:	ef 92       	push	r14
    2900:	ff 92       	push	r15
    2902:	0f 93       	push	r16
    2904:	1f 93       	push	r17
    2906:	cf 93       	push	r28
    2908:	df 93       	push	r29
    290a:	cd b7       	in	r28, 0x3d	; 61
    290c:	de b7       	in	r29, 0x3e	; 62
    290e:	c0 5b       	subi	r28, 0xB0	; 176
    2910:	d1 09       	sbc	r29, r1
    2912:	0f b6       	in	r0, 0x3f	; 63
    2914:	f8 94       	cli
    2916:	de bf       	out	0x3e, r29	; 62
    2918:	0f be       	out	0x3f, r0	; 63
    291a:	cd bf       	out	0x3d, r28	; 61
    291c:	6c 01       	movw	r12, r24
    291e:	8b 01       	movw	r16, r22
    2920:	f4 2e       	mov	r15, r20
	uint8_t len = 1;
	buffer[0] = 0;
	
	if(mask & IMU_SENSOR_BIT_TEMP){
    2922:	40 fd       	sbrc	r20, 0
    2924:	05 c0       	rjmp	.+10     	; 0x2930 <_ZN9ImuSensor15UpdateRequestedEPhh+0x3e>

AdafruitImu::Vector<3> vector;
AdafruitImu::Quaternion quat;
uint8_t ImuSensor::UpdateRequested(uint8_t* buffer, uint8_t mask){
	uint8_t len = 1;
	buffer[0] = 0;
    2926:	db 01       	movw	r26, r22
    2928:	1c 92       	st	X, r1
}

AdafruitImu::Vector<3> vector;
AdafruitImu::Quaternion quat;
uint8_t ImuSensor::UpdateRequested(uint8_t* buffer, uint8_t mask){
	uint8_t len = 1;
    292a:	ee 24       	eor	r14, r14
    292c:	e3 94       	inc	r14
    292e:	0d c0       	rjmp	.+26     	; 0x294a <_ZN9ImuSensor15UpdateRequestedEPhh+0x58>
	buffer[0] = 0;
	
	if(mask & IMU_SENSOR_BIT_TEMP){
		buffer[0] |= IMU_SENSOR_BIT_TEMP;
    2930:	81 e0       	ldi	r24, 0x01	; 1
    2932:	fb 01       	movw	r30, r22
    2934:	80 83       	st	Z, r24
		buffer[len++] = imu.getTemp();
    2936:	c6 01       	movw	r24, r12
    2938:	04 96       	adiw	r24, 0x04	; 4
    293a:	0e 94 a7 02 	call	0x54e	; 0x54e <_ZN15Adafruit_BNO0557getTempEv>
    293e:	d8 01       	movw	r26, r16
    2940:	11 96       	adiw	r26, 0x01	; 1
    2942:	8c 93       	st	X, r24
    2944:	68 94       	set
    2946:	ee 24       	eor	r14, r14
    2948:	e1 f8       	bld	r14, 1
	}
	if(mask & IMU_SENSOR_BIT_MAGNETOMETER){
    294a:	f1 fe       	sbrs	r15, 1
    294c:	a8 c0       	rjmp	.+336    	; 0x2a9e <_ZN9ImuSensor15UpdateRequestedEPhh+0x1ac>
		buffer[0] |= IMU_SENSOR_BIT_MAGNETOMETER;
    294e:	f8 01       	movw	r30, r16
    2950:	80 81       	ld	r24, Z
    2952:	82 60       	ori	r24, 0x02	; 2
    2954:	80 83       	st	Z, r24
	
		vector = imu.getVector(Adafruit_BNO055::VECTOR_MAGNETOMETER);
    2956:	4e e0       	ldi	r20, 0x0E	; 14
    2958:	b6 01       	movw	r22, r12
    295a:	6c 5f       	subi	r22, 0xFC	; 252
    295c:	7f 4f       	sbci	r23, 0xFF	; 255
    295e:	ce 01       	movw	r24, r28
    2960:	cd 96       	adiw	r24, 0x3d	; 61
    2962:	0e 94 99 03 	call	0x732	; 0x732 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
    2966:	fe 01       	movw	r30, r28
    2968:	fd 96       	adiw	r30, 0x3d	; 61
    296a:	ae e0       	ldi	r26, 0x0E	; 14
    296c:	b9 e0       	ldi	r27, 0x09	; 9
    296e:	cf 01       	movw	r24, r30
    2970:	0c 96       	adiw	r24, 0x0c	; 12
		}

		Vector& operator=(const Vector& v)
		{
			for (int x = 0; x < N; x++ )
			p_vec[x] = v.p_vec[x];
    2972:	41 91       	ld	r20, Z+
    2974:	51 91       	ld	r21, Z+
    2976:	61 91       	ld	r22, Z+
    2978:	71 91       	ld	r23, Z+
    297a:	4d 93       	st	X+, r20
    297c:	5d 93       	st	X+, r21
    297e:	6d 93       	st	X+, r22
    2980:	7d 93       	st	X+, r23
			return ret;
		}

		Vector& operator=(const Vector& v)
		{
			for (int x = 0; x < N; x++ )
    2982:	e8 17       	cp	r30, r24
    2984:	f9 07       	cpc	r31, r25
    2986:	a9 f7       	brne	.-22     	; 0x2972 <_ZN9ImuSensor15UpdateRequestedEPhh+0x80>
		saveFloat(vector.x(), &buffer[len]);
    2988:	8e 2c       	mov	r8, r14
    298a:	91 2c       	mov	r9, r1
    298c:	c8 01       	movw	r24, r16
    298e:	88 0d       	add	r24, r8
    2990:	99 1d       	adc	r25, r9
    2992:	ee e0       	ldi	r30, 0x0E	; 14
    2994:	f9 e0       	ldi	r31, 0x09	; 9
    2996:	20 81       	ld	r18, Z
    2998:	a1 80       	ldd	r10, Z+1	; 0x01
    299a:	b2 80       	ldd	r11, Z+2	; 0x02
    299c:	33 81       	ldd	r19, Z+3	; 0x03
    299e:	42 2f       	mov	r20, r18
    29a0:	5a 2d       	mov	r21, r10
    29a2:	6b 2d       	mov	r22, r11
    29a4:	73 2f       	mov	r23, r19
    29a6:	cb 56       	subi	r28, 0x6B	; 107
    29a8:	df 4f       	sbci	r29, 0xFF	; 255
    29aa:	48 83       	st	Y, r20
    29ac:	59 83       	std	Y+1, r21	; 0x01
    29ae:	6a 83       	std	Y+2, r22	; 0x02
    29b0:	7b 83       	std	Y+3, r23	; 0x03
    29b2:	c5 59       	subi	r28, 0x95	; 149
    29b4:	d0 40       	sbci	r29, 0x00	; 0
	return imu.begin();
}

static void saveFloat(float f, uint8_t* buffer){
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    29b6:	dc 01       	movw	r26, r24
    29b8:	2c 93       	st	X, r18
	*buffer++ = *val++;
    29ba:	ca 56       	subi	r28, 0x6A	; 106
    29bc:	df 4f       	sbci	r29, 0xFF	; 255
    29be:	28 81       	ld	r18, Y
    29c0:	c6 59       	subi	r28, 0x96	; 150
    29c2:	d0 40       	sbci	r29, 0x00	; 0
    29c4:	11 96       	adiw	r26, 0x01	; 1
    29c6:	2c 93       	st	X, r18
    29c8:	11 97       	sbiw	r26, 0x01	; 1
	*buffer++ = *val++;
    29ca:	c9 56       	subi	r28, 0x69	; 105
    29cc:	df 4f       	sbci	r29, 0xFF	; 255
    29ce:	28 81       	ld	r18, Y
    29d0:	c7 59       	subi	r28, 0x97	; 151
    29d2:	d0 40       	sbci	r29, 0x00	; 0
    29d4:	12 96       	adiw	r26, 0x02	; 2
    29d6:	2c 93       	st	X, r18
    29d8:	12 97       	sbiw	r26, 0x02	; 2
	*buffer++ = *val++;
    29da:	c8 56       	subi	r28, 0x68	; 104
    29dc:	df 4f       	sbci	r29, 0xFF	; 255
    29de:	28 81       	ld	r18, Y
    29e0:	c8 59       	subi	r28, 0x98	; 152
    29e2:	d0 40       	sbci	r29, 0x00	; 0
    29e4:	13 96       	adiw	r26, 0x03	; 3
    29e6:	2c 93       	st	X, r18
	if(mask & IMU_SENSOR_BIT_MAGNETOMETER){
		buffer[0] |= IMU_SENSOR_BIT_MAGNETOMETER;
	
		vector = imu.getVector(Adafruit_BNO055::VECTOR_MAGNETOMETER);
		saveFloat(vector.x(), &buffer[len]);
		saveFloat(vector.y(), &buffer[len + 4]);
    29e8:	c4 01       	movw	r24, r8
    29ea:	04 96       	adiw	r24, 0x04	; 4
    29ec:	80 0f       	add	r24, r16
    29ee:	91 1f       	adc	r25, r17
    29f0:	24 81       	ldd	r18, Z+4	; 0x04
    29f2:	a5 80       	ldd	r10, Z+5	; 0x05
    29f4:	b6 80       	ldd	r11, Z+6	; 0x06
    29f6:	37 81       	ldd	r19, Z+7	; 0x07
    29f8:	42 2f       	mov	r20, r18
    29fa:	5a 2d       	mov	r21, r10
    29fc:	6b 2d       	mov	r22, r11
    29fe:	73 2f       	mov	r23, r19
    2a00:	c7 56       	subi	r28, 0x67	; 103
    2a02:	df 4f       	sbci	r29, 0xFF	; 255
    2a04:	48 83       	st	Y, r20
    2a06:	59 83       	std	Y+1, r21	; 0x01
    2a08:	6a 83       	std	Y+2, r22	; 0x02
    2a0a:	7b 83       	std	Y+3, r23	; 0x03
    2a0c:	c9 59       	subi	r28, 0x99	; 153
    2a0e:	d0 40       	sbci	r29, 0x00	; 0
	return imu.begin();
}

static void saveFloat(float f, uint8_t* buffer){
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    2a10:	dc 01       	movw	r26, r24
    2a12:	2c 93       	st	X, r18
	*buffer++ = *val++;
    2a14:	c6 56       	subi	r28, 0x66	; 102
    2a16:	df 4f       	sbci	r29, 0xFF	; 255
    2a18:	28 81       	ld	r18, Y
    2a1a:	ca 59       	subi	r28, 0x9A	; 154
    2a1c:	d0 40       	sbci	r29, 0x00	; 0
    2a1e:	11 96       	adiw	r26, 0x01	; 1
    2a20:	2c 93       	st	X, r18
    2a22:	11 97       	sbiw	r26, 0x01	; 1
	*buffer++ = *val++;
    2a24:	c5 56       	subi	r28, 0x65	; 101
    2a26:	df 4f       	sbci	r29, 0xFF	; 255
    2a28:	28 81       	ld	r18, Y
    2a2a:	cb 59       	subi	r28, 0x9B	; 155
    2a2c:	d0 40       	sbci	r29, 0x00	; 0
    2a2e:	12 96       	adiw	r26, 0x02	; 2
    2a30:	2c 93       	st	X, r18
    2a32:	12 97       	sbiw	r26, 0x02	; 2
	*buffer++ = *val++;
    2a34:	c4 56       	subi	r28, 0x64	; 100
    2a36:	df 4f       	sbci	r29, 0xFF	; 255
    2a38:	28 81       	ld	r18, Y
    2a3a:	cc 59       	subi	r28, 0x9C	; 156
    2a3c:	d0 40       	sbci	r29, 0x00	; 0
    2a3e:	13 96       	adiw	r26, 0x03	; 3
    2a40:	2c 93       	st	X, r18
		buffer[0] |= IMU_SENSOR_BIT_MAGNETOMETER;
	
		vector = imu.getVector(Adafruit_BNO055::VECTOR_MAGNETOMETER);
		saveFloat(vector.x(), &buffer[len]);
		saveFloat(vector.y(), &buffer[len + 4]);
		saveFloat(vector.z(), &buffer[len + 8]);
    2a42:	d4 01       	movw	r26, r8
    2a44:	18 96       	adiw	r26, 0x08	; 8
    2a46:	a0 0f       	add	r26, r16
    2a48:	b1 1f       	adc	r27, r17
    2a4a:	80 85       	ldd	r24, Z+8	; 0x08
    2a4c:	31 85       	ldd	r19, Z+9	; 0x09
    2a4e:	22 85       	ldd	r18, Z+10	; 0x0a
    2a50:	93 85       	ldd	r25, Z+11	; 0x0b
    2a52:	48 2f       	mov	r20, r24
    2a54:	53 2f       	mov	r21, r19
    2a56:	62 2f       	mov	r22, r18
    2a58:	79 2f       	mov	r23, r25
    2a5a:	c3 56       	subi	r28, 0x63	; 99
    2a5c:	df 4f       	sbci	r29, 0xFF	; 255
    2a5e:	48 83       	st	Y, r20
    2a60:	59 83       	std	Y+1, r21	; 0x01
    2a62:	6a 83       	std	Y+2, r22	; 0x02
    2a64:	7b 83       	std	Y+3, r23	; 0x03
    2a66:	cd 59       	subi	r28, 0x9D	; 157
    2a68:	d0 40       	sbci	r29, 0x00	; 0
	return imu.begin();
}

static void saveFloat(float f, uint8_t* buffer){
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    2a6a:	8c 93       	st	X, r24
	*buffer++ = *val++;
    2a6c:	c2 56       	subi	r28, 0x62	; 98
    2a6e:	df 4f       	sbci	r29, 0xFF	; 255
    2a70:	88 81       	ld	r24, Y
    2a72:	ce 59       	subi	r28, 0x9E	; 158
    2a74:	d0 40       	sbci	r29, 0x00	; 0
    2a76:	11 96       	adiw	r26, 0x01	; 1
    2a78:	8c 93       	st	X, r24
    2a7a:	11 97       	sbiw	r26, 0x01	; 1
	*buffer++ = *val++;
    2a7c:	c1 56       	subi	r28, 0x61	; 97
    2a7e:	df 4f       	sbci	r29, 0xFF	; 255
    2a80:	88 81       	ld	r24, Y
    2a82:	cf 59       	subi	r28, 0x9F	; 159
    2a84:	d0 40       	sbci	r29, 0x00	; 0
    2a86:	12 96       	adiw	r26, 0x02	; 2
    2a88:	8c 93       	st	X, r24
    2a8a:	12 97       	sbiw	r26, 0x02	; 2
	*buffer++ = *val++;
    2a8c:	c0 56       	subi	r28, 0x60	; 96
    2a8e:	df 4f       	sbci	r29, 0xFF	; 255
    2a90:	88 81       	ld	r24, Y
    2a92:	c0 5a       	subi	r28, 0xA0	; 160
    2a94:	d0 40       	sbci	r29, 0x00	; 0
    2a96:	13 96       	adiw	r26, 0x03	; 3
    2a98:	8c 93       	st	X, r24
	
		vector = imu.getVector(Adafruit_BNO055::VECTOR_MAGNETOMETER);
		saveFloat(vector.x(), &buffer[len]);
		saveFloat(vector.y(), &buffer[len + 4]);
		saveFloat(vector.z(), &buffer[len + 8]);
		len += 12;
    2a9a:	bc e0       	ldi	r27, 0x0C	; 12
    2a9c:	eb 0e       	add	r14, r27
	}
	if(mask & IMU_SENSOR_BIT_GYROSCOPE){
    2a9e:	f2 fe       	sbrs	r15, 2
    2aa0:	a8 c0       	rjmp	.+336    	; 0x2bf2 <_ZN9ImuSensor15UpdateRequestedEPhh+0x300>
		buffer[0] |= IMU_SENSOR_BIT_GYROSCOPE;
    2aa2:	f8 01       	movw	r30, r16
    2aa4:	80 81       	ld	r24, Z
    2aa6:	84 60       	ori	r24, 0x04	; 4
    2aa8:	80 83       	st	Z, r24
		
		vector = imu.getVector(Adafruit_BNO055::VECTOR_GYROSCOPE);
    2aaa:	44 e1       	ldi	r20, 0x14	; 20
    2aac:	b6 01       	movw	r22, r12
    2aae:	6c 5f       	subi	r22, 0xFC	; 252
    2ab0:	7f 4f       	sbci	r23, 0xFF	; 255
    2ab2:	ce 01       	movw	r24, r28
    2ab4:	c1 96       	adiw	r24, 0x31	; 49
    2ab6:	0e 94 99 03 	call	0x732	; 0x732 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
    2aba:	fe 01       	movw	r30, r28
    2abc:	f1 96       	adiw	r30, 0x31	; 49
    2abe:	ae e0       	ldi	r26, 0x0E	; 14
    2ac0:	b9 e0       	ldi	r27, 0x09	; 9
    2ac2:	ce 01       	movw	r24, r28
    2ac4:	cd 96       	adiw	r24, 0x3d	; 61
			p_vec[x] = v.p_vec[x];
    2ac6:	41 91       	ld	r20, Z+
    2ac8:	51 91       	ld	r21, Z+
    2aca:	61 91       	ld	r22, Z+
    2acc:	71 91       	ld	r23, Z+
    2ace:	4d 93       	st	X+, r20
    2ad0:	5d 93       	st	X+, r21
    2ad2:	6d 93       	st	X+, r22
    2ad4:	7d 93       	st	X+, r23
			return ret;
		}

		Vector& operator=(const Vector& v)
		{
			for (int x = 0; x < N; x++ )
    2ad6:	e8 17       	cp	r30, r24
    2ad8:	f9 07       	cpc	r31, r25
    2ada:	a9 f7       	brne	.-22     	; 0x2ac6 <_ZN9ImuSensor15UpdateRequestedEPhh+0x1d4>
		saveFloat(vector.x(), &buffer[len]);
    2adc:	8e 2c       	mov	r8, r14
    2ade:	91 2c       	mov	r9, r1
    2ae0:	c8 01       	movw	r24, r16
    2ae2:	88 0d       	add	r24, r8
    2ae4:	99 1d       	adc	r25, r9
    2ae6:	ee e0       	ldi	r30, 0x0E	; 14
    2ae8:	f9 e0       	ldi	r31, 0x09	; 9
    2aea:	20 81       	ld	r18, Z
    2aec:	a1 80       	ldd	r10, Z+1	; 0x01
    2aee:	b2 80       	ldd	r11, Z+2	; 0x02
    2af0:	33 81       	ldd	r19, Z+3	; 0x03
    2af2:	42 2f       	mov	r20, r18
    2af4:	5a 2d       	mov	r21, r10
    2af6:	6b 2d       	mov	r22, r11
    2af8:	73 2f       	mov	r23, r19
    2afa:	c7 57       	subi	r28, 0x77	; 119
    2afc:	df 4f       	sbci	r29, 0xFF	; 255
    2afe:	48 83       	st	Y, r20
    2b00:	59 83       	std	Y+1, r21	; 0x01
    2b02:	6a 83       	std	Y+2, r22	; 0x02
    2b04:	7b 83       	std	Y+3, r23	; 0x03
    2b06:	c9 58       	subi	r28, 0x89	; 137
    2b08:	d0 40       	sbci	r29, 0x00	; 0
	return imu.begin();
}

static void saveFloat(float f, uint8_t* buffer){
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    2b0a:	dc 01       	movw	r26, r24
    2b0c:	2c 93       	st	X, r18
	*buffer++ = *val++;
    2b0e:	c6 57       	subi	r28, 0x76	; 118
    2b10:	df 4f       	sbci	r29, 0xFF	; 255
    2b12:	28 81       	ld	r18, Y
    2b14:	ca 58       	subi	r28, 0x8A	; 138
    2b16:	d0 40       	sbci	r29, 0x00	; 0
    2b18:	11 96       	adiw	r26, 0x01	; 1
    2b1a:	2c 93       	st	X, r18
    2b1c:	11 97       	sbiw	r26, 0x01	; 1
	*buffer++ = *val++;
    2b1e:	c5 57       	subi	r28, 0x75	; 117
    2b20:	df 4f       	sbci	r29, 0xFF	; 255
    2b22:	28 81       	ld	r18, Y
    2b24:	cb 58       	subi	r28, 0x8B	; 139
    2b26:	d0 40       	sbci	r29, 0x00	; 0
    2b28:	12 96       	adiw	r26, 0x02	; 2
    2b2a:	2c 93       	st	X, r18
    2b2c:	12 97       	sbiw	r26, 0x02	; 2
	*buffer++ = *val++;
    2b2e:	c4 57       	subi	r28, 0x74	; 116
    2b30:	df 4f       	sbci	r29, 0xFF	; 255
    2b32:	28 81       	ld	r18, Y
    2b34:	cc 58       	subi	r28, 0x8C	; 140
    2b36:	d0 40       	sbci	r29, 0x00	; 0
    2b38:	13 96       	adiw	r26, 0x03	; 3
    2b3a:	2c 93       	st	X, r18
	if(mask & IMU_SENSOR_BIT_GYROSCOPE){
		buffer[0] |= IMU_SENSOR_BIT_GYROSCOPE;
		
		vector = imu.getVector(Adafruit_BNO055::VECTOR_GYROSCOPE);
		saveFloat(vector.x(), &buffer[len]);
		saveFloat(vector.y(), &buffer[len + 4]);
    2b3c:	c4 01       	movw	r24, r8
    2b3e:	04 96       	adiw	r24, 0x04	; 4
    2b40:	80 0f       	add	r24, r16
    2b42:	91 1f       	adc	r25, r17
    2b44:	24 81       	ldd	r18, Z+4	; 0x04
    2b46:	a5 80       	ldd	r10, Z+5	; 0x05
    2b48:	b6 80       	ldd	r11, Z+6	; 0x06
    2b4a:	37 81       	ldd	r19, Z+7	; 0x07
    2b4c:	42 2f       	mov	r20, r18
    2b4e:	5a 2d       	mov	r21, r10
    2b50:	6b 2d       	mov	r22, r11
    2b52:	73 2f       	mov	r23, r19
    2b54:	c3 57       	subi	r28, 0x73	; 115
    2b56:	df 4f       	sbci	r29, 0xFF	; 255
    2b58:	48 83       	st	Y, r20
    2b5a:	59 83       	std	Y+1, r21	; 0x01
    2b5c:	6a 83       	std	Y+2, r22	; 0x02
    2b5e:	7b 83       	std	Y+3, r23	; 0x03
    2b60:	cd 58       	subi	r28, 0x8D	; 141
    2b62:	d0 40       	sbci	r29, 0x00	; 0
	return imu.begin();
}

static void saveFloat(float f, uint8_t* buffer){
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    2b64:	dc 01       	movw	r26, r24
    2b66:	2c 93       	st	X, r18
	*buffer++ = *val++;
    2b68:	c2 57       	subi	r28, 0x72	; 114
    2b6a:	df 4f       	sbci	r29, 0xFF	; 255
    2b6c:	28 81       	ld	r18, Y
    2b6e:	ce 58       	subi	r28, 0x8E	; 142
    2b70:	d0 40       	sbci	r29, 0x00	; 0
    2b72:	11 96       	adiw	r26, 0x01	; 1
    2b74:	2c 93       	st	X, r18
    2b76:	11 97       	sbiw	r26, 0x01	; 1
	*buffer++ = *val++;
    2b78:	c1 57       	subi	r28, 0x71	; 113
    2b7a:	df 4f       	sbci	r29, 0xFF	; 255
    2b7c:	28 81       	ld	r18, Y
    2b7e:	cf 58       	subi	r28, 0x8F	; 143
    2b80:	d0 40       	sbci	r29, 0x00	; 0
    2b82:	12 96       	adiw	r26, 0x02	; 2
    2b84:	2c 93       	st	X, r18
    2b86:	12 97       	sbiw	r26, 0x02	; 2
	*buffer++ = *val++;
    2b88:	c0 57       	subi	r28, 0x70	; 112
    2b8a:	df 4f       	sbci	r29, 0xFF	; 255
    2b8c:	28 81       	ld	r18, Y
    2b8e:	c0 59       	subi	r28, 0x90	; 144
    2b90:	d0 40       	sbci	r29, 0x00	; 0
    2b92:	13 96       	adiw	r26, 0x03	; 3
    2b94:	2c 93       	st	X, r18
		buffer[0] |= IMU_SENSOR_BIT_GYROSCOPE;
		
		vector = imu.getVector(Adafruit_BNO055::VECTOR_GYROSCOPE);
		saveFloat(vector.x(), &buffer[len]);
		saveFloat(vector.y(), &buffer[len + 4]);
		saveFloat(vector.z(), &buffer[len + 8]);
    2b96:	d4 01       	movw	r26, r8
    2b98:	18 96       	adiw	r26, 0x08	; 8
    2b9a:	a0 0f       	add	r26, r16
    2b9c:	b1 1f       	adc	r27, r17
    2b9e:	80 85       	ldd	r24, Z+8	; 0x08
    2ba0:	31 85       	ldd	r19, Z+9	; 0x09
    2ba2:	22 85       	ldd	r18, Z+10	; 0x0a
    2ba4:	93 85       	ldd	r25, Z+11	; 0x0b
    2ba6:	48 2f       	mov	r20, r24
    2ba8:	53 2f       	mov	r21, r19
    2baa:	62 2f       	mov	r22, r18
    2bac:	79 2f       	mov	r23, r25
    2bae:	cf 56       	subi	r28, 0x6F	; 111
    2bb0:	df 4f       	sbci	r29, 0xFF	; 255
    2bb2:	48 83       	st	Y, r20
    2bb4:	59 83       	std	Y+1, r21	; 0x01
    2bb6:	6a 83       	std	Y+2, r22	; 0x02
    2bb8:	7b 83       	std	Y+3, r23	; 0x03
    2bba:	c1 59       	subi	r28, 0x91	; 145
    2bbc:	d0 40       	sbci	r29, 0x00	; 0
	return imu.begin();
}

static void saveFloat(float f, uint8_t* buffer){
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    2bbe:	8c 93       	st	X, r24
	*buffer++ = *val++;
    2bc0:	ce 56       	subi	r28, 0x6E	; 110
    2bc2:	df 4f       	sbci	r29, 0xFF	; 255
    2bc4:	88 81       	ld	r24, Y
    2bc6:	c2 59       	subi	r28, 0x92	; 146
    2bc8:	d0 40       	sbci	r29, 0x00	; 0
    2bca:	11 96       	adiw	r26, 0x01	; 1
    2bcc:	8c 93       	st	X, r24
    2bce:	11 97       	sbiw	r26, 0x01	; 1
	*buffer++ = *val++;
    2bd0:	cd 56       	subi	r28, 0x6D	; 109
    2bd2:	df 4f       	sbci	r29, 0xFF	; 255
    2bd4:	88 81       	ld	r24, Y
    2bd6:	c3 59       	subi	r28, 0x93	; 147
    2bd8:	d0 40       	sbci	r29, 0x00	; 0
    2bda:	12 96       	adiw	r26, 0x02	; 2
    2bdc:	8c 93       	st	X, r24
    2bde:	12 97       	sbiw	r26, 0x02	; 2
	*buffer++ = *val++;
    2be0:	cc 56       	subi	r28, 0x6C	; 108
    2be2:	df 4f       	sbci	r29, 0xFF	; 255
    2be4:	88 81       	ld	r24, Y
    2be6:	c4 59       	subi	r28, 0x94	; 148
    2be8:	d0 40       	sbci	r29, 0x00	; 0
    2bea:	13 96       	adiw	r26, 0x03	; 3
    2bec:	8c 93       	st	X, r24
		
		vector = imu.getVector(Adafruit_BNO055::VECTOR_GYROSCOPE);
		saveFloat(vector.x(), &buffer[len]);
		saveFloat(vector.y(), &buffer[len + 4]);
		saveFloat(vector.z(), &buffer[len + 8]);
		len += 12;
    2bee:	bc e0       	ldi	r27, 0x0C	; 12
    2bf0:	eb 0e       	add	r14, r27
	}
	if(mask & IMU_SENSOR_BIT_EULER){
    2bf2:	f3 fe       	sbrs	r15, 3
    2bf4:	a6 c0       	rjmp	.+332    	; 0x2d42 <_ZN9ImuSensor15UpdateRequestedEPhh+0x450>
		buffer[0] |= IMU_SENSOR_BIT_EULER;
    2bf6:	f8 01       	movw	r30, r16
    2bf8:	80 81       	ld	r24, Z
    2bfa:	88 60       	ori	r24, 0x08	; 8
    2bfc:	80 83       	st	Z, r24
		
		vector = imu.getVector(Adafruit_BNO055::VECTOR_EULER);
    2bfe:	4a e1       	ldi	r20, 0x1A	; 26
    2c00:	b6 01       	movw	r22, r12
    2c02:	6c 5f       	subi	r22, 0xFC	; 252
    2c04:	7f 4f       	sbci	r23, 0xFF	; 255
    2c06:	ce 01       	movw	r24, r28
    2c08:	85 96       	adiw	r24, 0x25	; 37
    2c0a:	0e 94 99 03 	call	0x732	; 0x732 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
    2c0e:	fe 01       	movw	r30, r28
    2c10:	b5 96       	adiw	r30, 0x25	; 37
    2c12:	ae e0       	ldi	r26, 0x0E	; 14
    2c14:	b9 e0       	ldi	r27, 0x09	; 9
    2c16:	ce 01       	movw	r24, r28
    2c18:	c1 96       	adiw	r24, 0x31	; 49
			p_vec[x] = v.p_vec[x];
    2c1a:	41 91       	ld	r20, Z+
    2c1c:	51 91       	ld	r21, Z+
    2c1e:	61 91       	ld	r22, Z+
    2c20:	71 91       	ld	r23, Z+
    2c22:	4d 93       	st	X+, r20
    2c24:	5d 93       	st	X+, r21
    2c26:	6d 93       	st	X+, r22
    2c28:	7d 93       	st	X+, r23
			return ret;
		}

		Vector& operator=(const Vector& v)
		{
			for (int x = 0; x < N; x++ )
    2c2a:	e8 17       	cp	r30, r24
    2c2c:	f9 07       	cpc	r31, r25
    2c2e:	a9 f7       	brne	.-22     	; 0x2c1a <_ZN9ImuSensor15UpdateRequestedEPhh+0x328>
		saveFloat(vector.x(), &buffer[len]);
    2c30:	8e 2c       	mov	r8, r14
    2c32:	91 2c       	mov	r9, r1
    2c34:	c8 01       	movw	r24, r16
    2c36:	88 0d       	add	r24, r8
    2c38:	99 1d       	adc	r25, r9
    2c3a:	ee e0       	ldi	r30, 0x0E	; 14
    2c3c:	f9 e0       	ldi	r31, 0x09	; 9
    2c3e:	20 81       	ld	r18, Z
    2c40:	a1 80       	ldd	r10, Z+1	; 0x01
    2c42:	b2 80       	ldd	r11, Z+2	; 0x02
    2c44:	33 81       	ldd	r19, Z+3	; 0x03
    2c46:	42 2f       	mov	r20, r18
    2c48:	5a 2d       	mov	r21, r10
    2c4a:	6b 2d       	mov	r22, r11
    2c4c:	73 2f       	mov	r23, r19
    2c4e:	c3 58       	subi	r28, 0x83	; 131
    2c50:	df 4f       	sbci	r29, 0xFF	; 255
    2c52:	48 83       	st	Y, r20
    2c54:	59 83       	std	Y+1, r21	; 0x01
    2c56:	6a 83       	std	Y+2, r22	; 0x02
    2c58:	7b 83       	std	Y+3, r23	; 0x03
    2c5a:	cd 57       	subi	r28, 0x7D	; 125
    2c5c:	d0 40       	sbci	r29, 0x00	; 0
	return imu.begin();
}

static void saveFloat(float f, uint8_t* buffer){
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    2c5e:	dc 01       	movw	r26, r24
    2c60:	2c 93       	st	X, r18
	*buffer++ = *val++;
    2c62:	ef 96       	adiw	r28, 0x3f	; 63
    2c64:	2f ad       	ldd	r18, Y+63	; 0x3f
    2c66:	ef 97       	sbiw	r28, 0x3f	; 63
    2c68:	11 96       	adiw	r26, 0x01	; 1
    2c6a:	2c 93       	st	X, r18
    2c6c:	11 97       	sbiw	r26, 0x01	; 1
	*buffer++ = *val++;
    2c6e:	c1 58       	subi	r28, 0x81	; 129
    2c70:	df 4f       	sbci	r29, 0xFF	; 255
    2c72:	28 81       	ld	r18, Y
    2c74:	cf 57       	subi	r28, 0x7F	; 127
    2c76:	d0 40       	sbci	r29, 0x00	; 0
    2c78:	12 96       	adiw	r26, 0x02	; 2
    2c7a:	2c 93       	st	X, r18
    2c7c:	12 97       	sbiw	r26, 0x02	; 2
	*buffer++ = *val++;
    2c7e:	c0 58       	subi	r28, 0x80	; 128
    2c80:	df 4f       	sbci	r29, 0xFF	; 255
    2c82:	28 81       	ld	r18, Y
    2c84:	c0 58       	subi	r28, 0x80	; 128
    2c86:	d0 40       	sbci	r29, 0x00	; 0
    2c88:	13 96       	adiw	r26, 0x03	; 3
    2c8a:	2c 93       	st	X, r18
	if(mask & IMU_SENSOR_BIT_EULER){
		buffer[0] |= IMU_SENSOR_BIT_EULER;
		
		vector = imu.getVector(Adafruit_BNO055::VECTOR_EULER);
		saveFloat(vector.x(), &buffer[len]);
		saveFloat(vector.y(), &buffer[len + 4]);
    2c8c:	c4 01       	movw	r24, r8
    2c8e:	04 96       	adiw	r24, 0x04	; 4
    2c90:	80 0f       	add	r24, r16
    2c92:	91 1f       	adc	r25, r17
    2c94:	24 81       	ldd	r18, Z+4	; 0x04
    2c96:	a5 80       	ldd	r10, Z+5	; 0x05
    2c98:	b6 80       	ldd	r11, Z+6	; 0x06
    2c9a:	37 81       	ldd	r19, Z+7	; 0x07
    2c9c:	42 2f       	mov	r20, r18
    2c9e:	5a 2d       	mov	r21, r10
    2ca0:	6b 2d       	mov	r22, r11
    2ca2:	73 2f       	mov	r23, r19
    2ca4:	cf 57       	subi	r28, 0x7F	; 127
    2ca6:	df 4f       	sbci	r29, 0xFF	; 255
    2ca8:	48 83       	st	Y, r20
    2caa:	59 83       	std	Y+1, r21	; 0x01
    2cac:	6a 83       	std	Y+2, r22	; 0x02
    2cae:	7b 83       	std	Y+3, r23	; 0x03
    2cb0:	c1 58       	subi	r28, 0x81	; 129
    2cb2:	d0 40       	sbci	r29, 0x00	; 0
	return imu.begin();
}

static void saveFloat(float f, uint8_t* buffer){
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    2cb4:	dc 01       	movw	r26, r24
    2cb6:	2c 93       	st	X, r18
	*buffer++ = *val++;
    2cb8:	ce 57       	subi	r28, 0x7E	; 126
    2cba:	df 4f       	sbci	r29, 0xFF	; 255
    2cbc:	28 81       	ld	r18, Y
    2cbe:	c2 58       	subi	r28, 0x82	; 130
    2cc0:	d0 40       	sbci	r29, 0x00	; 0
    2cc2:	11 96       	adiw	r26, 0x01	; 1
    2cc4:	2c 93       	st	X, r18
    2cc6:	11 97       	sbiw	r26, 0x01	; 1
	*buffer++ = *val++;
    2cc8:	cd 57       	subi	r28, 0x7D	; 125
    2cca:	df 4f       	sbci	r29, 0xFF	; 255
    2ccc:	28 81       	ld	r18, Y
    2cce:	c3 58       	subi	r28, 0x83	; 131
    2cd0:	d0 40       	sbci	r29, 0x00	; 0
    2cd2:	12 96       	adiw	r26, 0x02	; 2
    2cd4:	2c 93       	st	X, r18
    2cd6:	12 97       	sbiw	r26, 0x02	; 2
	*buffer++ = *val++;
    2cd8:	cc 57       	subi	r28, 0x7C	; 124
    2cda:	df 4f       	sbci	r29, 0xFF	; 255
    2cdc:	28 81       	ld	r18, Y
    2cde:	c4 58       	subi	r28, 0x84	; 132
    2ce0:	d0 40       	sbci	r29, 0x00	; 0
    2ce2:	13 96       	adiw	r26, 0x03	; 3
    2ce4:	2c 93       	st	X, r18
		buffer[0] |= IMU_SENSOR_BIT_EULER;
		
		vector = imu.getVector(Adafruit_BNO055::VECTOR_EULER);
		saveFloat(vector.x(), &buffer[len]);
		saveFloat(vector.y(), &buffer[len + 4]);
		saveFloat(vector.z(), &buffer[len + 8]);
    2ce6:	d4 01       	movw	r26, r8
    2ce8:	18 96       	adiw	r26, 0x08	; 8
    2cea:	a0 0f       	add	r26, r16
    2cec:	b1 1f       	adc	r27, r17
    2cee:	80 85       	ldd	r24, Z+8	; 0x08
    2cf0:	31 85       	ldd	r19, Z+9	; 0x09
    2cf2:	22 85       	ldd	r18, Z+10	; 0x0a
    2cf4:	93 85       	ldd	r25, Z+11	; 0x0b
    2cf6:	48 2f       	mov	r20, r24
    2cf8:	53 2f       	mov	r21, r19
    2cfa:	62 2f       	mov	r22, r18
    2cfc:	79 2f       	mov	r23, r25
    2cfe:	cb 57       	subi	r28, 0x7B	; 123
    2d00:	df 4f       	sbci	r29, 0xFF	; 255
    2d02:	48 83       	st	Y, r20
    2d04:	59 83       	std	Y+1, r21	; 0x01
    2d06:	6a 83       	std	Y+2, r22	; 0x02
    2d08:	7b 83       	std	Y+3, r23	; 0x03
    2d0a:	c5 58       	subi	r28, 0x85	; 133
    2d0c:	d0 40       	sbci	r29, 0x00	; 0
	return imu.begin();
}

static void saveFloat(float f, uint8_t* buffer){
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    2d0e:	8c 93       	st	X, r24
	*buffer++ = *val++;
    2d10:	ca 57       	subi	r28, 0x7A	; 122
    2d12:	df 4f       	sbci	r29, 0xFF	; 255
    2d14:	88 81       	ld	r24, Y
    2d16:	c6 58       	subi	r28, 0x86	; 134
    2d18:	d0 40       	sbci	r29, 0x00	; 0
    2d1a:	11 96       	adiw	r26, 0x01	; 1
    2d1c:	8c 93       	st	X, r24
    2d1e:	11 97       	sbiw	r26, 0x01	; 1
	*buffer++ = *val++;
    2d20:	c9 57       	subi	r28, 0x79	; 121
    2d22:	df 4f       	sbci	r29, 0xFF	; 255
    2d24:	88 81       	ld	r24, Y
    2d26:	c7 58       	subi	r28, 0x87	; 135
    2d28:	d0 40       	sbci	r29, 0x00	; 0
    2d2a:	12 96       	adiw	r26, 0x02	; 2
    2d2c:	8c 93       	st	X, r24
    2d2e:	12 97       	sbiw	r26, 0x02	; 2
	*buffer++ = *val++;
    2d30:	c8 57       	subi	r28, 0x78	; 120
    2d32:	df 4f       	sbci	r29, 0xFF	; 255
    2d34:	88 81       	ld	r24, Y
    2d36:	c8 58       	subi	r28, 0x88	; 136
    2d38:	d0 40       	sbci	r29, 0x00	; 0
    2d3a:	13 96       	adiw	r26, 0x03	; 3
    2d3c:	8c 93       	st	X, r24
		
		vector = imu.getVector(Adafruit_BNO055::VECTOR_EULER);
		saveFloat(vector.x(), &buffer[len]);
		saveFloat(vector.y(), &buffer[len + 4]);
		saveFloat(vector.z(), &buffer[len + 8]);
		len += 12;
    2d3e:	bc e0       	ldi	r27, 0x0C	; 12
    2d40:	eb 0e       	add	r14, r27
	}
	if(mask & IMU_SENSOR_BIT_ACCELEROMETER){
    2d42:	f4 fe       	sbrs	r15, 4
    2d44:	90 c0       	rjmp	.+288    	; 0x2e66 <_ZN9ImuSensor15UpdateRequestedEPhh+0x574>
		buffer[0] |= IMU_SENSOR_BIT_ACCELEROMETER;
    2d46:	f8 01       	movw	r30, r16
    2d48:	80 81       	ld	r24, Z
    2d4a:	80 61       	ori	r24, 0x10	; 16
    2d4c:	80 83       	st	Z, r24
		
		vector = imu.getVector(Adafruit_BNO055::VECTOR_ACCELEROMETER);
    2d4e:	48 e0       	ldi	r20, 0x08	; 8
    2d50:	b6 01       	movw	r22, r12
    2d52:	6c 5f       	subi	r22, 0xFC	; 252
    2d54:	7f 4f       	sbci	r23, 0xFF	; 255
    2d56:	ce 01       	movw	r24, r28
    2d58:	49 96       	adiw	r24, 0x19	; 25
    2d5a:	0e 94 99 03 	call	0x732	; 0x732 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
    2d5e:	fe 01       	movw	r30, r28
    2d60:	79 96       	adiw	r30, 0x19	; 25
    2d62:	ae e0       	ldi	r26, 0x0E	; 14
    2d64:	b9 e0       	ldi	r27, 0x09	; 9
    2d66:	ce 01       	movw	r24, r28
    2d68:	85 96       	adiw	r24, 0x25	; 37
			p_vec[x] = v.p_vec[x];
    2d6a:	41 91       	ld	r20, Z+
    2d6c:	51 91       	ld	r21, Z+
    2d6e:	61 91       	ld	r22, Z+
    2d70:	71 91       	ld	r23, Z+
    2d72:	4d 93       	st	X+, r20
    2d74:	5d 93       	st	X+, r21
    2d76:	6d 93       	st	X+, r22
    2d78:	7d 93       	st	X+, r23
			return ret;
		}

		Vector& operator=(const Vector& v)
		{
			for (int x = 0; x < N; x++ )
    2d7a:	8e 17       	cp	r24, r30
    2d7c:	9f 07       	cpc	r25, r31
    2d7e:	a9 f7       	brne	.-22     	; 0x2d6a <_ZN9ImuSensor15UpdateRequestedEPhh+0x478>
		saveFloat(vector.x(), &buffer[len]);
    2d80:	8e 2c       	mov	r8, r14
    2d82:	91 2c       	mov	r9, r1
    2d84:	c8 01       	movw	r24, r16
    2d86:	88 0d       	add	r24, r8
    2d88:	99 1d       	adc	r25, r9
    2d8a:	ee e0       	ldi	r30, 0x0E	; 14
    2d8c:	f9 e0       	ldi	r31, 0x09	; 9
    2d8e:	20 81       	ld	r18, Z
    2d90:	a1 80       	ldd	r10, Z+1	; 0x01
    2d92:	b2 80       	ldd	r11, Z+2	; 0x02
    2d94:	33 81       	ldd	r19, Z+3	; 0x03
    2d96:	42 2f       	mov	r20, r18
    2d98:	5a 2d       	mov	r21, r10
    2d9a:	6b 2d       	mov	r22, r11
    2d9c:	73 2f       	mov	r23, r19
    2d9e:	e5 96       	adiw	r28, 0x35	; 53
    2da0:	4c af       	std	Y+60, r20	; 0x3c
    2da2:	5d af       	std	Y+61, r21	; 0x3d
    2da4:	6e af       	std	Y+62, r22	; 0x3e
    2da6:	7f af       	std	Y+63, r23	; 0x3f
    2da8:	e5 97       	sbiw	r28, 0x35	; 53
	return imu.begin();
}

static void saveFloat(float f, uint8_t* buffer){
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    2daa:	dc 01       	movw	r26, r24
    2dac:	2c 93       	st	X, r18
	*buffer++ = *val++;
    2dae:	e3 96       	adiw	r28, 0x33	; 51
    2db0:	2f ad       	ldd	r18, Y+63	; 0x3f
    2db2:	e3 97       	sbiw	r28, 0x33	; 51
    2db4:	11 96       	adiw	r26, 0x01	; 1
    2db6:	2c 93       	st	X, r18
    2db8:	11 97       	sbiw	r26, 0x01	; 1
	*buffer++ = *val++;
    2dba:	e4 96       	adiw	r28, 0x34	; 52
    2dbc:	2f ad       	ldd	r18, Y+63	; 0x3f
    2dbe:	e4 97       	sbiw	r28, 0x34	; 52
    2dc0:	12 96       	adiw	r26, 0x02	; 2
    2dc2:	2c 93       	st	X, r18
    2dc4:	12 97       	sbiw	r26, 0x02	; 2
	*buffer++ = *val++;
    2dc6:	e5 96       	adiw	r28, 0x35	; 53
    2dc8:	2f ad       	ldd	r18, Y+63	; 0x3f
    2dca:	e5 97       	sbiw	r28, 0x35	; 53
    2dcc:	13 96       	adiw	r26, 0x03	; 3
    2dce:	2c 93       	st	X, r18
	if(mask & IMU_SENSOR_BIT_ACCELEROMETER){
		buffer[0] |= IMU_SENSOR_BIT_ACCELEROMETER;
		
		vector = imu.getVector(Adafruit_BNO055::VECTOR_ACCELEROMETER);
		saveFloat(vector.x(), &buffer[len]);
		saveFloat(vector.y(), &buffer[len + 4]);
    2dd0:	c4 01       	movw	r24, r8
    2dd2:	04 96       	adiw	r24, 0x04	; 4
    2dd4:	80 0f       	add	r24, r16
    2dd6:	91 1f       	adc	r25, r17
    2dd8:	24 81       	ldd	r18, Z+4	; 0x04
    2dda:	a5 80       	ldd	r10, Z+5	; 0x05
    2ddc:	b6 80       	ldd	r11, Z+6	; 0x06
    2dde:	37 81       	ldd	r19, Z+7	; 0x07
    2de0:	42 2f       	mov	r20, r18
    2de2:	5a 2d       	mov	r21, r10
    2de4:	6b 2d       	mov	r22, r11
    2de6:	73 2f       	mov	r23, r19
    2de8:	e9 96       	adiw	r28, 0x39	; 57
    2dea:	4c af       	std	Y+60, r20	; 0x3c
    2dec:	5d af       	std	Y+61, r21	; 0x3d
    2dee:	6e af       	std	Y+62, r22	; 0x3e
    2df0:	7f af       	std	Y+63, r23	; 0x3f
    2df2:	e9 97       	sbiw	r28, 0x39	; 57
	return imu.begin();
}

static void saveFloat(float f, uint8_t* buffer){
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    2df4:	dc 01       	movw	r26, r24
    2df6:	2c 93       	st	X, r18
	*buffer++ = *val++;
    2df8:	e7 96       	adiw	r28, 0x37	; 55
    2dfa:	2f ad       	ldd	r18, Y+63	; 0x3f
    2dfc:	e7 97       	sbiw	r28, 0x37	; 55
    2dfe:	11 96       	adiw	r26, 0x01	; 1
    2e00:	2c 93       	st	X, r18
    2e02:	11 97       	sbiw	r26, 0x01	; 1
	*buffer++ = *val++;
    2e04:	e8 96       	adiw	r28, 0x38	; 56
    2e06:	2f ad       	ldd	r18, Y+63	; 0x3f
    2e08:	e8 97       	sbiw	r28, 0x38	; 56
    2e0a:	12 96       	adiw	r26, 0x02	; 2
    2e0c:	2c 93       	st	X, r18
    2e0e:	12 97       	sbiw	r26, 0x02	; 2
	*buffer++ = *val++;
    2e10:	e9 96       	adiw	r28, 0x39	; 57
    2e12:	2f ad       	ldd	r18, Y+63	; 0x3f
    2e14:	e9 97       	sbiw	r28, 0x39	; 57
    2e16:	13 96       	adiw	r26, 0x03	; 3
    2e18:	2c 93       	st	X, r18
		buffer[0] |= IMU_SENSOR_BIT_ACCELEROMETER;
		
		vector = imu.getVector(Adafruit_BNO055::VECTOR_ACCELEROMETER);
		saveFloat(vector.x(), &buffer[len]);
		saveFloat(vector.y(), &buffer[len + 4]);
		saveFloat(vector.z(), &buffer[len + 8]);
    2e1a:	d4 01       	movw	r26, r8
    2e1c:	18 96       	adiw	r26, 0x08	; 8
    2e1e:	a0 0f       	add	r26, r16
    2e20:	b1 1f       	adc	r27, r17
    2e22:	80 85       	ldd	r24, Z+8	; 0x08
    2e24:	31 85       	ldd	r19, Z+9	; 0x09
    2e26:	22 85       	ldd	r18, Z+10	; 0x0a
    2e28:	93 85       	ldd	r25, Z+11	; 0x0b
    2e2a:	48 2f       	mov	r20, r24
    2e2c:	53 2f       	mov	r21, r19
    2e2e:	62 2f       	mov	r22, r18
    2e30:	79 2f       	mov	r23, r25
    2e32:	ed 96       	adiw	r28, 0x3d	; 61
    2e34:	4c af       	std	Y+60, r20	; 0x3c
    2e36:	5d af       	std	Y+61, r21	; 0x3d
    2e38:	6e af       	std	Y+62, r22	; 0x3e
    2e3a:	7f af       	std	Y+63, r23	; 0x3f
    2e3c:	ed 97       	sbiw	r28, 0x3d	; 61
	return imu.begin();
}

static void saveFloat(float f, uint8_t* buffer){
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    2e3e:	8c 93       	st	X, r24
	*buffer++ = *val++;
    2e40:	eb 96       	adiw	r28, 0x3b	; 59
    2e42:	8f ad       	ldd	r24, Y+63	; 0x3f
    2e44:	eb 97       	sbiw	r28, 0x3b	; 59
    2e46:	11 96       	adiw	r26, 0x01	; 1
    2e48:	8c 93       	st	X, r24
    2e4a:	11 97       	sbiw	r26, 0x01	; 1
	*buffer++ = *val++;
    2e4c:	ec 96       	adiw	r28, 0x3c	; 60
    2e4e:	8f ad       	ldd	r24, Y+63	; 0x3f
    2e50:	ec 97       	sbiw	r28, 0x3c	; 60
    2e52:	12 96       	adiw	r26, 0x02	; 2
    2e54:	8c 93       	st	X, r24
    2e56:	12 97       	sbiw	r26, 0x02	; 2
	*buffer++ = *val++;
    2e58:	ed 96       	adiw	r28, 0x3d	; 61
    2e5a:	8f ad       	ldd	r24, Y+63	; 0x3f
    2e5c:	ed 97       	sbiw	r28, 0x3d	; 61
    2e5e:	13 96       	adiw	r26, 0x03	; 3
    2e60:	8c 93       	st	X, r24
		
		vector = imu.getVector(Adafruit_BNO055::VECTOR_ACCELEROMETER);
		saveFloat(vector.x(), &buffer[len]);
		saveFloat(vector.y(), &buffer[len + 4]);
		saveFloat(vector.z(), &buffer[len + 8]);
		len += 12;
    2e62:	bc e0       	ldi	r27, 0x0C	; 12
    2e64:	eb 0e       	add	r14, r27
	}
	if(mask & IMU_SENSOR_BIT_LINEARACCEL){
    2e66:	f5 fe       	sbrs	r15, 5
    2e68:	90 c0       	rjmp	.+288    	; 0x2f8a <_ZN9ImuSensor15UpdateRequestedEPhh+0x698>
		buffer[0] |= IMU_SENSOR_BIT_LINEARACCEL;
    2e6a:	f8 01       	movw	r30, r16
    2e6c:	80 81       	ld	r24, Z
    2e6e:	80 62       	ori	r24, 0x20	; 32
    2e70:	80 83       	st	Z, r24
		
		vector = imu.getVector(Adafruit_BNO055::VECTOR_LINEARACCEL);
    2e72:	48 e2       	ldi	r20, 0x28	; 40
    2e74:	b6 01       	movw	r22, r12
    2e76:	6c 5f       	subi	r22, 0xFC	; 252
    2e78:	7f 4f       	sbci	r23, 0xFF	; 255
    2e7a:	ce 01       	movw	r24, r28
    2e7c:	0d 96       	adiw	r24, 0x0d	; 13
    2e7e:	0e 94 99 03 	call	0x732	; 0x732 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
    2e82:	fe 01       	movw	r30, r28
    2e84:	3d 96       	adiw	r30, 0x0d	; 13
    2e86:	ae e0       	ldi	r26, 0x0E	; 14
    2e88:	b9 e0       	ldi	r27, 0x09	; 9
    2e8a:	ce 01       	movw	r24, r28
    2e8c:	49 96       	adiw	r24, 0x19	; 25
			p_vec[x] = v.p_vec[x];
    2e8e:	41 91       	ld	r20, Z+
    2e90:	51 91       	ld	r21, Z+
    2e92:	61 91       	ld	r22, Z+
    2e94:	71 91       	ld	r23, Z+
    2e96:	4d 93       	st	X+, r20
    2e98:	5d 93       	st	X+, r21
    2e9a:	6d 93       	st	X+, r22
    2e9c:	7d 93       	st	X+, r23
			return ret;
		}

		Vector& operator=(const Vector& v)
		{
			for (int x = 0; x < N; x++ )
    2e9e:	e8 17       	cp	r30, r24
    2ea0:	f9 07       	cpc	r31, r25
    2ea2:	a9 f7       	brne	.-22     	; 0x2e8e <_ZN9ImuSensor15UpdateRequestedEPhh+0x59c>
		saveFloat(vector.x(), &buffer[len]);
    2ea4:	8e 2c       	mov	r8, r14
    2ea6:	91 2c       	mov	r9, r1
    2ea8:	c8 01       	movw	r24, r16
    2eaa:	88 0d       	add	r24, r8
    2eac:	99 1d       	adc	r25, r9
    2eae:	ee e0       	ldi	r30, 0x0E	; 14
    2eb0:	f9 e0       	ldi	r31, 0x09	; 9
    2eb2:	20 81       	ld	r18, Z
    2eb4:	a1 80       	ldd	r10, Z+1	; 0x01
    2eb6:	b2 80       	ldd	r11, Z+2	; 0x02
    2eb8:	33 81       	ldd	r19, Z+3	; 0x03
    2eba:	42 2f       	mov	r20, r18
    2ebc:	5a 2d       	mov	r21, r10
    2ebe:	6b 2d       	mov	r22, r11
    2ec0:	73 2f       	mov	r23, r19
    2ec2:	a9 96       	adiw	r28, 0x29	; 41
    2ec4:	4c af       	std	Y+60, r20	; 0x3c
    2ec6:	5d af       	std	Y+61, r21	; 0x3d
    2ec8:	6e af       	std	Y+62, r22	; 0x3e
    2eca:	7f af       	std	Y+63, r23	; 0x3f
    2ecc:	a9 97       	sbiw	r28, 0x29	; 41
	return imu.begin();
}

static void saveFloat(float f, uint8_t* buffer){
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    2ece:	dc 01       	movw	r26, r24
    2ed0:	2c 93       	st	X, r18
	*buffer++ = *val++;
    2ed2:	a7 96       	adiw	r28, 0x27	; 39
    2ed4:	2f ad       	ldd	r18, Y+63	; 0x3f
    2ed6:	a7 97       	sbiw	r28, 0x27	; 39
    2ed8:	11 96       	adiw	r26, 0x01	; 1
    2eda:	2c 93       	st	X, r18
    2edc:	11 97       	sbiw	r26, 0x01	; 1
	*buffer++ = *val++;
    2ede:	a8 96       	adiw	r28, 0x28	; 40
    2ee0:	2f ad       	ldd	r18, Y+63	; 0x3f
    2ee2:	a8 97       	sbiw	r28, 0x28	; 40
    2ee4:	12 96       	adiw	r26, 0x02	; 2
    2ee6:	2c 93       	st	X, r18
    2ee8:	12 97       	sbiw	r26, 0x02	; 2
	*buffer++ = *val++;
    2eea:	a9 96       	adiw	r28, 0x29	; 41
    2eec:	2f ad       	ldd	r18, Y+63	; 0x3f
    2eee:	a9 97       	sbiw	r28, 0x29	; 41
    2ef0:	13 96       	adiw	r26, 0x03	; 3
    2ef2:	2c 93       	st	X, r18
	if(mask & IMU_SENSOR_BIT_LINEARACCEL){
		buffer[0] |= IMU_SENSOR_BIT_LINEARACCEL;
		
		vector = imu.getVector(Adafruit_BNO055::VECTOR_LINEARACCEL);
		saveFloat(vector.x(), &buffer[len]);
		saveFloat(vector.y(), &buffer[len + 4]);
    2ef4:	c4 01       	movw	r24, r8
    2ef6:	04 96       	adiw	r24, 0x04	; 4
    2ef8:	80 0f       	add	r24, r16
    2efa:	91 1f       	adc	r25, r17
    2efc:	24 81       	ldd	r18, Z+4	; 0x04
    2efe:	a5 80       	ldd	r10, Z+5	; 0x05
    2f00:	b6 80       	ldd	r11, Z+6	; 0x06
    2f02:	37 81       	ldd	r19, Z+7	; 0x07
    2f04:	42 2f       	mov	r20, r18
    2f06:	5a 2d       	mov	r21, r10
    2f08:	6b 2d       	mov	r22, r11
    2f0a:	73 2f       	mov	r23, r19
    2f0c:	ad 96       	adiw	r28, 0x2d	; 45
    2f0e:	4c af       	std	Y+60, r20	; 0x3c
    2f10:	5d af       	std	Y+61, r21	; 0x3d
    2f12:	6e af       	std	Y+62, r22	; 0x3e
    2f14:	7f af       	std	Y+63, r23	; 0x3f
    2f16:	ad 97       	sbiw	r28, 0x2d	; 45
	return imu.begin();
}

static void saveFloat(float f, uint8_t* buffer){
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    2f18:	dc 01       	movw	r26, r24
    2f1a:	2c 93       	st	X, r18
	*buffer++ = *val++;
    2f1c:	ab 96       	adiw	r28, 0x2b	; 43
    2f1e:	2f ad       	ldd	r18, Y+63	; 0x3f
    2f20:	ab 97       	sbiw	r28, 0x2b	; 43
    2f22:	11 96       	adiw	r26, 0x01	; 1
    2f24:	2c 93       	st	X, r18
    2f26:	11 97       	sbiw	r26, 0x01	; 1
	*buffer++ = *val++;
    2f28:	ac 96       	adiw	r28, 0x2c	; 44
    2f2a:	2f ad       	ldd	r18, Y+63	; 0x3f
    2f2c:	ac 97       	sbiw	r28, 0x2c	; 44
    2f2e:	12 96       	adiw	r26, 0x02	; 2
    2f30:	2c 93       	st	X, r18
    2f32:	12 97       	sbiw	r26, 0x02	; 2
	*buffer++ = *val++;
    2f34:	ad 96       	adiw	r28, 0x2d	; 45
    2f36:	2f ad       	ldd	r18, Y+63	; 0x3f
    2f38:	ad 97       	sbiw	r28, 0x2d	; 45
    2f3a:	13 96       	adiw	r26, 0x03	; 3
    2f3c:	2c 93       	st	X, r18
		buffer[0] |= IMU_SENSOR_BIT_LINEARACCEL;
		
		vector = imu.getVector(Adafruit_BNO055::VECTOR_LINEARACCEL);
		saveFloat(vector.x(), &buffer[len]);
		saveFloat(vector.y(), &buffer[len + 4]);
		saveFloat(vector.z(), &buffer[len + 8]);
    2f3e:	d4 01       	movw	r26, r8
    2f40:	18 96       	adiw	r26, 0x08	; 8
    2f42:	a0 0f       	add	r26, r16
    2f44:	b1 1f       	adc	r27, r17
    2f46:	80 85       	ldd	r24, Z+8	; 0x08
    2f48:	31 85       	ldd	r19, Z+9	; 0x09
    2f4a:	22 85       	ldd	r18, Z+10	; 0x0a
    2f4c:	93 85       	ldd	r25, Z+11	; 0x0b
    2f4e:	48 2f       	mov	r20, r24
    2f50:	53 2f       	mov	r21, r19
    2f52:	62 2f       	mov	r22, r18
    2f54:	79 2f       	mov	r23, r25
    2f56:	e1 96       	adiw	r28, 0x31	; 49
    2f58:	4c af       	std	Y+60, r20	; 0x3c
    2f5a:	5d af       	std	Y+61, r21	; 0x3d
    2f5c:	6e af       	std	Y+62, r22	; 0x3e
    2f5e:	7f af       	std	Y+63, r23	; 0x3f
    2f60:	e1 97       	sbiw	r28, 0x31	; 49
	return imu.begin();
}

static void saveFloat(float f, uint8_t* buffer){
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    2f62:	8c 93       	st	X, r24
	*buffer++ = *val++;
    2f64:	af 96       	adiw	r28, 0x2f	; 47
    2f66:	8f ad       	ldd	r24, Y+63	; 0x3f
    2f68:	af 97       	sbiw	r28, 0x2f	; 47
    2f6a:	11 96       	adiw	r26, 0x01	; 1
    2f6c:	8c 93       	st	X, r24
    2f6e:	11 97       	sbiw	r26, 0x01	; 1
	*buffer++ = *val++;
    2f70:	e0 96       	adiw	r28, 0x30	; 48
    2f72:	8f ad       	ldd	r24, Y+63	; 0x3f
    2f74:	e0 97       	sbiw	r28, 0x30	; 48
    2f76:	12 96       	adiw	r26, 0x02	; 2
    2f78:	8c 93       	st	X, r24
    2f7a:	12 97       	sbiw	r26, 0x02	; 2
	*buffer++ = *val++;
    2f7c:	e1 96       	adiw	r28, 0x31	; 49
    2f7e:	8f ad       	ldd	r24, Y+63	; 0x3f
    2f80:	e1 97       	sbiw	r28, 0x31	; 49
    2f82:	13 96       	adiw	r26, 0x03	; 3
    2f84:	8c 93       	st	X, r24
		
		vector = imu.getVector(Adafruit_BNO055::VECTOR_LINEARACCEL);
		saveFloat(vector.x(), &buffer[len]);
		saveFloat(vector.y(), &buffer[len + 4]);
		saveFloat(vector.z(), &buffer[len + 8]);
		len += 12;
    2f86:	bc e0       	ldi	r27, 0x0C	; 12
    2f88:	eb 0e       	add	r14, r27
	}
	if(mask & IMU_SENSOR_BIT_GRAVITY){
    2f8a:	f6 fe       	sbrs	r15, 6
    2f8c:	90 c0       	rjmp	.+288    	; 0x30ae <_ZN9ImuSensor15UpdateRequestedEPhh+0x7bc>
		buffer[0] |= IMU_SENSOR_BIT_GRAVITY;
    2f8e:	f8 01       	movw	r30, r16
    2f90:	80 81       	ld	r24, Z
    2f92:	80 64       	ori	r24, 0x40	; 64
    2f94:	80 83       	st	Z, r24
		
		vector = imu.getVector(Adafruit_BNO055::VECTOR_GRAVITY);
    2f96:	4e e2       	ldi	r20, 0x2E	; 46
    2f98:	b6 01       	movw	r22, r12
    2f9a:	6c 5f       	subi	r22, 0xFC	; 252
    2f9c:	7f 4f       	sbci	r23, 0xFF	; 255
    2f9e:	ce 01       	movw	r24, r28
    2fa0:	01 96       	adiw	r24, 0x01	; 1
    2fa2:	0e 94 99 03 	call	0x732	; 0x732 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
    2fa6:	fe 01       	movw	r30, r28
    2fa8:	31 96       	adiw	r30, 0x01	; 1
    2faa:	ae e0       	ldi	r26, 0x0E	; 14
    2fac:	b9 e0       	ldi	r27, 0x09	; 9
    2fae:	ce 01       	movw	r24, r28
    2fb0:	0d 96       	adiw	r24, 0x0d	; 13
			p_vec[x] = v.p_vec[x];
    2fb2:	41 91       	ld	r20, Z+
    2fb4:	51 91       	ld	r21, Z+
    2fb6:	61 91       	ld	r22, Z+
    2fb8:	71 91       	ld	r23, Z+
    2fba:	4d 93       	st	X+, r20
    2fbc:	5d 93       	st	X+, r21
    2fbe:	6d 93       	st	X+, r22
    2fc0:	7d 93       	st	X+, r23
			return ret;
		}

		Vector& operator=(const Vector& v)
		{
			for (int x = 0; x < N; x++ )
    2fc2:	8e 17       	cp	r24, r30
    2fc4:	9f 07       	cpc	r25, r31
    2fc6:	a9 f7       	brne	.-22     	; 0x2fb2 <_ZN9ImuSensor15UpdateRequestedEPhh+0x6c0>
		saveFloat(vector.x(), &buffer[len]);
    2fc8:	8e 2c       	mov	r8, r14
    2fca:	91 2c       	mov	r9, r1
    2fcc:	c8 01       	movw	r24, r16
    2fce:	88 0d       	add	r24, r8
    2fd0:	99 1d       	adc	r25, r9
    2fd2:	ee e0       	ldi	r30, 0x0E	; 14
    2fd4:	f9 e0       	ldi	r31, 0x09	; 9
    2fd6:	20 81       	ld	r18, Z
    2fd8:	a1 80       	ldd	r10, Z+1	; 0x01
    2fda:	b2 80       	ldd	r11, Z+2	; 0x02
    2fdc:	33 81       	ldd	r19, Z+3	; 0x03
    2fde:	42 2f       	mov	r20, r18
    2fe0:	5a 2d       	mov	r21, r10
    2fe2:	6b 2d       	mov	r22, r11
    2fe4:	73 2f       	mov	r23, r19
    2fe6:	6d 96       	adiw	r28, 0x1d	; 29
    2fe8:	4c af       	std	Y+60, r20	; 0x3c
    2fea:	5d af       	std	Y+61, r21	; 0x3d
    2fec:	6e af       	std	Y+62, r22	; 0x3e
    2fee:	7f af       	std	Y+63, r23	; 0x3f
    2ff0:	6d 97       	sbiw	r28, 0x1d	; 29
	return imu.begin();
}

static void saveFloat(float f, uint8_t* buffer){
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    2ff2:	dc 01       	movw	r26, r24
    2ff4:	2c 93       	st	X, r18
	*buffer++ = *val++;
    2ff6:	6b 96       	adiw	r28, 0x1b	; 27
    2ff8:	2f ad       	ldd	r18, Y+63	; 0x3f
    2ffa:	6b 97       	sbiw	r28, 0x1b	; 27
    2ffc:	11 96       	adiw	r26, 0x01	; 1
    2ffe:	2c 93       	st	X, r18
    3000:	11 97       	sbiw	r26, 0x01	; 1
	*buffer++ = *val++;
    3002:	6c 96       	adiw	r28, 0x1c	; 28
    3004:	2f ad       	ldd	r18, Y+63	; 0x3f
    3006:	6c 97       	sbiw	r28, 0x1c	; 28
    3008:	12 96       	adiw	r26, 0x02	; 2
    300a:	2c 93       	st	X, r18
    300c:	12 97       	sbiw	r26, 0x02	; 2
	*buffer++ = *val++;
    300e:	6d 96       	adiw	r28, 0x1d	; 29
    3010:	2f ad       	ldd	r18, Y+63	; 0x3f
    3012:	6d 97       	sbiw	r28, 0x1d	; 29
    3014:	13 96       	adiw	r26, 0x03	; 3
    3016:	2c 93       	st	X, r18
	if(mask & IMU_SENSOR_BIT_GRAVITY){
		buffer[0] |= IMU_SENSOR_BIT_GRAVITY;
		
		vector = imu.getVector(Adafruit_BNO055::VECTOR_GRAVITY);
		saveFloat(vector.x(), &buffer[len]);
		saveFloat(vector.y(), &buffer[len + 4]);
    3018:	c4 01       	movw	r24, r8
    301a:	04 96       	adiw	r24, 0x04	; 4
    301c:	80 0f       	add	r24, r16
    301e:	91 1f       	adc	r25, r17
    3020:	24 81       	ldd	r18, Z+4	; 0x04
    3022:	a5 80       	ldd	r10, Z+5	; 0x05
    3024:	b6 80       	ldd	r11, Z+6	; 0x06
    3026:	37 81       	ldd	r19, Z+7	; 0x07
    3028:	42 2f       	mov	r20, r18
    302a:	5a 2d       	mov	r21, r10
    302c:	6b 2d       	mov	r22, r11
    302e:	73 2f       	mov	r23, r19
    3030:	a1 96       	adiw	r28, 0x21	; 33
    3032:	4c af       	std	Y+60, r20	; 0x3c
    3034:	5d af       	std	Y+61, r21	; 0x3d
    3036:	6e af       	std	Y+62, r22	; 0x3e
    3038:	7f af       	std	Y+63, r23	; 0x3f
    303a:	a1 97       	sbiw	r28, 0x21	; 33
	return imu.begin();
}

static void saveFloat(float f, uint8_t* buffer){
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    303c:	dc 01       	movw	r26, r24
    303e:	2c 93       	st	X, r18
	*buffer++ = *val++;
    3040:	6f 96       	adiw	r28, 0x1f	; 31
    3042:	2f ad       	ldd	r18, Y+63	; 0x3f
    3044:	6f 97       	sbiw	r28, 0x1f	; 31
    3046:	11 96       	adiw	r26, 0x01	; 1
    3048:	2c 93       	st	X, r18
    304a:	11 97       	sbiw	r26, 0x01	; 1
	*buffer++ = *val++;
    304c:	a0 96       	adiw	r28, 0x20	; 32
    304e:	2f ad       	ldd	r18, Y+63	; 0x3f
    3050:	a0 97       	sbiw	r28, 0x20	; 32
    3052:	12 96       	adiw	r26, 0x02	; 2
    3054:	2c 93       	st	X, r18
    3056:	12 97       	sbiw	r26, 0x02	; 2
	*buffer++ = *val++;
    3058:	a1 96       	adiw	r28, 0x21	; 33
    305a:	2f ad       	ldd	r18, Y+63	; 0x3f
    305c:	a1 97       	sbiw	r28, 0x21	; 33
    305e:	13 96       	adiw	r26, 0x03	; 3
    3060:	2c 93       	st	X, r18
		buffer[0] |= IMU_SENSOR_BIT_GRAVITY;
		
		vector = imu.getVector(Adafruit_BNO055::VECTOR_GRAVITY);
		saveFloat(vector.x(), &buffer[len]);
		saveFloat(vector.y(), &buffer[len + 4]);
		saveFloat(vector.z(), &buffer[len + 8]);
    3062:	d4 01       	movw	r26, r8
    3064:	18 96       	adiw	r26, 0x08	; 8
    3066:	a0 0f       	add	r26, r16
    3068:	b1 1f       	adc	r27, r17
    306a:	80 85       	ldd	r24, Z+8	; 0x08
    306c:	31 85       	ldd	r19, Z+9	; 0x09
    306e:	22 85       	ldd	r18, Z+10	; 0x0a
    3070:	93 85       	ldd	r25, Z+11	; 0x0b
    3072:	48 2f       	mov	r20, r24
    3074:	53 2f       	mov	r21, r19
    3076:	62 2f       	mov	r22, r18
    3078:	79 2f       	mov	r23, r25
    307a:	a5 96       	adiw	r28, 0x25	; 37
    307c:	4c af       	std	Y+60, r20	; 0x3c
    307e:	5d af       	std	Y+61, r21	; 0x3d
    3080:	6e af       	std	Y+62, r22	; 0x3e
    3082:	7f af       	std	Y+63, r23	; 0x3f
    3084:	a5 97       	sbiw	r28, 0x25	; 37
	return imu.begin();
}

static void saveFloat(float f, uint8_t* buffer){
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    3086:	8c 93       	st	X, r24
	*buffer++ = *val++;
    3088:	a3 96       	adiw	r28, 0x23	; 35
    308a:	8f ad       	ldd	r24, Y+63	; 0x3f
    308c:	a3 97       	sbiw	r28, 0x23	; 35
    308e:	11 96       	adiw	r26, 0x01	; 1
    3090:	8c 93       	st	X, r24
    3092:	11 97       	sbiw	r26, 0x01	; 1
	*buffer++ = *val++;
    3094:	a4 96       	adiw	r28, 0x24	; 36
    3096:	8f ad       	ldd	r24, Y+63	; 0x3f
    3098:	a4 97       	sbiw	r28, 0x24	; 36
    309a:	12 96       	adiw	r26, 0x02	; 2
    309c:	8c 93       	st	X, r24
    309e:	12 97       	sbiw	r26, 0x02	; 2
	*buffer++ = *val++;
    30a0:	a5 96       	adiw	r28, 0x25	; 37
    30a2:	8f ad       	ldd	r24, Y+63	; 0x3f
    30a4:	a5 97       	sbiw	r28, 0x25	; 37
    30a6:	13 96       	adiw	r26, 0x03	; 3
    30a8:	8c 93       	st	X, r24
		
		vector = imu.getVector(Adafruit_BNO055::VECTOR_GRAVITY);
		saveFloat(vector.x(), &buffer[len]);
		saveFloat(vector.y(), &buffer[len + 4]);
		saveFloat(vector.z(), &buffer[len + 8]);
		len += 12;
    30aa:	bc e0       	ldi	r27, 0x0C	; 12
    30ac:	eb 0e       	add	r14, r27
	}
	if(mask & IMU_SENSOR_BIT_QUATERNION){
    30ae:	ff 20       	and	r15, r15
    30b0:	0c f0       	brlt	.+2      	; 0x30b4 <_ZN9ImuSensor15UpdateRequestedEPhh+0x7c2>
    30b2:	ae c0       	rjmp	.+348    	; 0x3210 <_ZN9ImuSensor15UpdateRequestedEPhh+0x91e>
		buffer[0] |= IMU_SENSOR_BIT_QUATERNION;
    30b4:	f8 01       	movw	r30, r16
    30b6:	80 81       	ld	r24, Z
    30b8:	80 68       	ori	r24, 0x80	; 128
    30ba:	80 83       	st	Z, r24
		
		quat = imu.getQuat();
    30bc:	b6 01       	movw	r22, r12
    30be:	6c 5f       	subi	r22, 0xFC	; 252
    30c0:	7f 4f       	sbci	r23, 0xFF	; 255
    30c2:	ce 01       	movw	r24, r28
    30c4:	8f 55       	subi	r24, 0x5F	; 95
    30c6:	9f 4f       	sbci	r25, 0xFF	; 255
    30c8:	0e 94 fd 02 	call	0x5fa	; 0x5fa <_ZN15Adafruit_BNO0557getQuatEv>
    30cc:	80 e1       	ldi	r24, 0x10	; 16
    30ce:	fe 01       	movw	r30, r28
    30d0:	ef 55       	subi	r30, 0x5F	; 95
    30d2:	ff 4f       	sbci	r31, 0xFF	; 255
    30d4:	ae ef       	ldi	r26, 0xFE	; 254
    30d6:	b8 e0       	ldi	r27, 0x08	; 8
    30d8:	01 90       	ld	r0, Z+
    30da:	0d 92       	st	X+, r0
    30dc:	8a 95       	dec	r24
    30de:	e1 f7       	brne	.-8      	; 0x30d8 <_ZN9ImuSensor15UpdateRequestedEPhh+0x7e6>
		saveFloat(quat.w(), &buffer[len]);
    30e0:	ae 2c       	mov	r10, r14
    30e2:	b1 2c       	mov	r11, r1
    30e4:	c8 01       	movw	r24, r16
    30e6:	8a 0d       	add	r24, r10
    30e8:	9b 1d       	adc	r25, r11
    30ea:	ee ef       	ldi	r30, 0xFE	; 254
    30ec:	f8 e0       	ldi	r31, 0x08	; 8
    30ee:	20 81       	ld	r18, Z
    30f0:	d1 80       	ldd	r13, Z+1	; 0x01
    30f2:	f2 80       	ldd	r15, Z+2	; 0x02
    30f4:	33 81       	ldd	r19, Z+3	; 0x03
    30f6:	42 2f       	mov	r20, r18
    30f8:	5d 2d       	mov	r21, r13
    30fa:	6f 2d       	mov	r22, r15
    30fc:	73 2f       	mov	r23, r19
    30fe:	2d 96       	adiw	r28, 0x0d	; 13
    3100:	4c af       	std	Y+60, r20	; 0x3c
    3102:	5d af       	std	Y+61, r21	; 0x3d
    3104:	6e af       	std	Y+62, r22	; 0x3e
    3106:	7f af       	std	Y+63, r23	; 0x3f
    3108:	2d 97       	sbiw	r28, 0x0d	; 13
	return imu.begin();
}

static void saveFloat(float f, uint8_t* buffer){
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    310a:	dc 01       	movw	r26, r24
    310c:	2c 93       	st	X, r18
	*buffer++ = *val++;
    310e:	2b 96       	adiw	r28, 0x0b	; 11
    3110:	2f ad       	ldd	r18, Y+63	; 0x3f
    3112:	2b 97       	sbiw	r28, 0x0b	; 11
    3114:	11 96       	adiw	r26, 0x01	; 1
    3116:	2c 93       	st	X, r18
    3118:	11 97       	sbiw	r26, 0x01	; 1
	*buffer++ = *val++;
    311a:	2c 96       	adiw	r28, 0x0c	; 12
    311c:	2f ad       	ldd	r18, Y+63	; 0x3f
    311e:	2c 97       	sbiw	r28, 0x0c	; 12
    3120:	12 96       	adiw	r26, 0x02	; 2
    3122:	2c 93       	st	X, r18
    3124:	12 97       	sbiw	r26, 0x02	; 2
	*buffer++ = *val++;
    3126:	2d 96       	adiw	r28, 0x0d	; 13
    3128:	2f ad       	ldd	r18, Y+63	; 0x3f
    312a:	2d 97       	sbiw	r28, 0x0d	; 13
    312c:	13 96       	adiw	r26, 0x03	; 3
    312e:	2c 93       	st	X, r18
	if(mask & IMU_SENSOR_BIT_QUATERNION){
		buffer[0] |= IMU_SENSOR_BIT_QUATERNION;
		
		quat = imu.getQuat();
		saveFloat(quat.w(), &buffer[len]);
		saveFloat(quat.x(), &buffer[len + 4]);
    3130:	c5 01       	movw	r24, r10
    3132:	04 96       	adiw	r24, 0x04	; 4
    3134:	80 0f       	add	r24, r16
    3136:	91 1f       	adc	r25, r17
    3138:	24 81       	ldd	r18, Z+4	; 0x04
    313a:	d5 80       	ldd	r13, Z+5	; 0x05
    313c:	f6 80       	ldd	r15, Z+6	; 0x06
    313e:	37 81       	ldd	r19, Z+7	; 0x07
    3140:	42 2f       	mov	r20, r18
    3142:	5d 2d       	mov	r21, r13
    3144:	6f 2d       	mov	r22, r15
    3146:	73 2f       	mov	r23, r19
    3148:	61 96       	adiw	r28, 0x11	; 17
    314a:	4c af       	std	Y+60, r20	; 0x3c
    314c:	5d af       	std	Y+61, r21	; 0x3d
    314e:	6e af       	std	Y+62, r22	; 0x3e
    3150:	7f af       	std	Y+63, r23	; 0x3f
    3152:	61 97       	sbiw	r28, 0x11	; 17
	return imu.begin();
}

static void saveFloat(float f, uint8_t* buffer){
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    3154:	dc 01       	movw	r26, r24
    3156:	2c 93       	st	X, r18
	*buffer++ = *val++;
    3158:	2f 96       	adiw	r28, 0x0f	; 15
    315a:	2f ad       	ldd	r18, Y+63	; 0x3f
    315c:	2f 97       	sbiw	r28, 0x0f	; 15
    315e:	11 96       	adiw	r26, 0x01	; 1
    3160:	2c 93       	st	X, r18
    3162:	11 97       	sbiw	r26, 0x01	; 1
	*buffer++ = *val++;
    3164:	60 96       	adiw	r28, 0x10	; 16
    3166:	2f ad       	ldd	r18, Y+63	; 0x3f
    3168:	60 97       	sbiw	r28, 0x10	; 16
    316a:	12 96       	adiw	r26, 0x02	; 2
    316c:	2c 93       	st	X, r18
    316e:	12 97       	sbiw	r26, 0x02	; 2
	*buffer++ = *val++;
    3170:	61 96       	adiw	r28, 0x11	; 17
    3172:	2f ad       	ldd	r18, Y+63	; 0x3f
    3174:	61 97       	sbiw	r28, 0x11	; 17
    3176:	13 96       	adiw	r26, 0x03	; 3
    3178:	2c 93       	st	X, r18
		buffer[0] |= IMU_SENSOR_BIT_QUATERNION;
		
		quat = imu.getQuat();
		saveFloat(quat.w(), &buffer[len]);
		saveFloat(quat.x(), &buffer[len + 4]);
		saveFloat(quat.y(), &buffer[len + 8]);
    317a:	c5 01       	movw	r24, r10
    317c:	08 96       	adiw	r24, 0x08	; 8
    317e:	80 0f       	add	r24, r16
    3180:	91 1f       	adc	r25, r17
    3182:	20 85       	ldd	r18, Z+8	; 0x08
    3184:	d1 84       	ldd	r13, Z+9	; 0x09
    3186:	f2 84       	ldd	r15, Z+10	; 0x0a
    3188:	33 85       	ldd	r19, Z+11	; 0x0b
    318a:	42 2f       	mov	r20, r18
    318c:	5d 2d       	mov	r21, r13
    318e:	6f 2d       	mov	r22, r15
    3190:	73 2f       	mov	r23, r19
    3192:	65 96       	adiw	r28, 0x15	; 21
    3194:	4c af       	std	Y+60, r20	; 0x3c
    3196:	5d af       	std	Y+61, r21	; 0x3d
    3198:	6e af       	std	Y+62, r22	; 0x3e
    319a:	7f af       	std	Y+63, r23	; 0x3f
    319c:	65 97       	sbiw	r28, 0x15	; 21
	return imu.begin();
}

static void saveFloat(float f, uint8_t* buffer){
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    319e:	dc 01       	movw	r26, r24
    31a0:	2c 93       	st	X, r18
	*buffer++ = *val++;
    31a2:	63 96       	adiw	r28, 0x13	; 19
    31a4:	2f ad       	ldd	r18, Y+63	; 0x3f
    31a6:	63 97       	sbiw	r28, 0x13	; 19
    31a8:	11 96       	adiw	r26, 0x01	; 1
    31aa:	2c 93       	st	X, r18
    31ac:	11 97       	sbiw	r26, 0x01	; 1
	*buffer++ = *val++;
    31ae:	64 96       	adiw	r28, 0x14	; 20
    31b0:	2f ad       	ldd	r18, Y+63	; 0x3f
    31b2:	64 97       	sbiw	r28, 0x14	; 20
    31b4:	12 96       	adiw	r26, 0x02	; 2
    31b6:	2c 93       	st	X, r18
    31b8:	12 97       	sbiw	r26, 0x02	; 2
	*buffer++ = *val++;
    31ba:	65 96       	adiw	r28, 0x15	; 21
    31bc:	2f ad       	ldd	r18, Y+63	; 0x3f
    31be:	65 97       	sbiw	r28, 0x15	; 21
    31c0:	13 96       	adiw	r26, 0x03	; 3
    31c2:	2c 93       	st	X, r18
		
		quat = imu.getQuat();
		saveFloat(quat.w(), &buffer[len]);
		saveFloat(quat.x(), &buffer[len + 4]);
		saveFloat(quat.y(), &buffer[len + 8]);
		saveFloat(quat.z(), &buffer[len + 12]);
    31c4:	d5 01       	movw	r26, r10
    31c6:	1c 96       	adiw	r26, 0x0c	; 12
    31c8:	a0 0f       	add	r26, r16
    31ca:	b1 1f       	adc	r27, r17
    31cc:	84 85       	ldd	r24, Z+12	; 0x0c
    31ce:	35 85       	ldd	r19, Z+13	; 0x0d
    31d0:	26 85       	ldd	r18, Z+14	; 0x0e
    31d2:	97 85       	ldd	r25, Z+15	; 0x0f
    31d4:	48 2f       	mov	r20, r24
    31d6:	53 2f       	mov	r21, r19
    31d8:	62 2f       	mov	r22, r18
    31da:	79 2f       	mov	r23, r25
    31dc:	69 96       	adiw	r28, 0x19	; 25
    31de:	4c af       	std	Y+60, r20	; 0x3c
    31e0:	5d af       	std	Y+61, r21	; 0x3d
    31e2:	6e af       	std	Y+62, r22	; 0x3e
    31e4:	7f af       	std	Y+63, r23	; 0x3f
    31e6:	69 97       	sbiw	r28, 0x19	; 25
	return imu.begin();
}

static void saveFloat(float f, uint8_t* buffer){
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    31e8:	8c 93       	st	X, r24
	*buffer++ = *val++;
    31ea:	67 96       	adiw	r28, 0x17	; 23
    31ec:	8f ad       	ldd	r24, Y+63	; 0x3f
    31ee:	67 97       	sbiw	r28, 0x17	; 23
    31f0:	11 96       	adiw	r26, 0x01	; 1
    31f2:	8c 93       	st	X, r24
    31f4:	11 97       	sbiw	r26, 0x01	; 1
	*buffer++ = *val++;
    31f6:	68 96       	adiw	r28, 0x18	; 24
    31f8:	8f ad       	ldd	r24, Y+63	; 0x3f
    31fa:	68 97       	sbiw	r28, 0x18	; 24
    31fc:	12 96       	adiw	r26, 0x02	; 2
    31fe:	8c 93       	st	X, r24
    3200:	12 97       	sbiw	r26, 0x02	; 2
	*buffer++ = *val++;
    3202:	69 96       	adiw	r28, 0x19	; 25
    3204:	8f ad       	ldd	r24, Y+63	; 0x3f
    3206:	69 97       	sbiw	r28, 0x19	; 25
    3208:	13 96       	adiw	r26, 0x03	; 3
    320a:	8c 93       	st	X, r24
		quat = imu.getQuat();
		saveFloat(quat.w(), &buffer[len]);
		saveFloat(quat.x(), &buffer[len + 4]);
		saveFloat(quat.y(), &buffer[len + 8]);
		saveFloat(quat.z(), &buffer[len + 12]);
		len += 16;
    320c:	b0 e1       	ldi	r27, 0x10	; 16
    320e:	eb 0e       	add	r14, r27
	}
	
	return len;
    3210:	8e 2d       	mov	r24, r14
    3212:	c0 55       	subi	r28, 0x50	; 80
    3214:	df 4f       	sbci	r29, 0xFF	; 255
    3216:	0f b6       	in	r0, 0x3f	; 63
    3218:	f8 94       	cli
    321a:	de bf       	out	0x3e, r29	; 62
    321c:	0f be       	out	0x3f, r0	; 63
    321e:	cd bf       	out	0x3d, r28	; 61
    3220:	df 91       	pop	r29
    3222:	cf 91       	pop	r28
    3224:	1f 91       	pop	r17
    3226:	0f 91       	pop	r16
    3228:	ff 90       	pop	r15
    322a:	ef 90       	pop	r14
    322c:	df 90       	pop	r13
    322e:	cf 90       	pop	r12
    3230:	bf 90       	pop	r11
    3232:	af 90       	pop	r10
    3234:	9f 90       	pop	r9
    3236:	8f 90       	pop	r8
    3238:	08 95       	ret

0000323a <_ZN9ImuSensorC1Eh>:

#include "ImuSensor.h"
//#include "../BNO055/utility/vector.h"
//Adafruit_BNO055 ImuSensor::imu;

ImuSensor::ImuSensor(uint8_t ID) : ISensor(ID, SENSOR_TYPE_DIGITAL), imu(55, 0x28) {
    323a:	0f 93       	push	r16
    323c:	1f 93       	push	r17
	
	virtual void Update(const uint8_t* data, uint8_t len) = 0;
	virtual bool begin() = 0;
	
protected:
	IDevice(uint8_t ID) : id(ID){
    323e:	fc 01       	movw	r30, r24
    3240:	62 83       	std	Z+2, r22	; 0x02
	
	protected:
		ISensor(uint8_t ID, uint8_t type) : IDevice(ID), sensorType(type) {
    3242:	21 e0       	ldi	r18, 0x01	; 1
    3244:	23 83       	std	Z+3, r18	; 0x03
    3246:	2e ed       	ldi	r18, 0xDE	; 222
    3248:	32 e0       	ldi	r19, 0x02	; 2
    324a:	31 83       	std	Z+1, r19	; 0x01
    324c:	20 83       	st	Z, r18
    324e:	0b e9       	ldi	r16, 0x9B	; 155
    3250:	16 e0       	ldi	r17, 0x06	; 6
    3252:	28 e2       	ldi	r18, 0x28	; 40
    3254:	47 e3       	ldi	r20, 0x37	; 55
    3256:	50 e0       	ldi	r21, 0x00	; 0
    3258:	60 e0       	ldi	r22, 0x00	; 0
    325a:	70 e0       	ldi	r23, 0x00	; 0
    325c:	04 96       	adiw	r24, 0x04	; 4
    325e:	0e 94 c5 01 	call	0x38a	; 0x38a <_ZN15Adafruit_BNO055C1ElhP7TwoWire>
	
}
    3262:	1f 91       	pop	r17
    3264:	0f 91       	pop	r16
    3266:	08 95       	ret

00003268 <_GLOBAL__sub_I__ZN9ImuSensorC2Eh>:
	template <uint8_t N> class Vector
	{
		public:
		Vector()
		{
			memset(p_vec, 0, sizeof(double)*N);
    3268:	8c e0       	ldi	r24, 0x0C	; 12
    326a:	ee e0       	ldi	r30, 0x0E	; 14
    326c:	f9 e0       	ldi	r31, 0x09	; 9
    326e:	df 01       	movw	r26, r30
    3270:	1d 92       	st	X+, r1
    3272:	8a 95       	dec	r24
    3274:	e9 f7       	brne	.-6      	; 0x3270 <_GLOBAL__sub_I__ZN9ImuSensorC2Eh+0x8>
{

	class Quaternion
	{
		public:
		Quaternion(): _w(1.0), _x(0.0), _y(0.0), _z(0.0) {}
    3276:	ee ef       	ldi	r30, 0xFE	; 254
    3278:	f8 e0       	ldi	r31, 0x08	; 8
    327a:	80 e0       	ldi	r24, 0x00	; 0
    327c:	90 e0       	ldi	r25, 0x00	; 0
    327e:	a0 e8       	ldi	r26, 0x80	; 128
    3280:	bf e3       	ldi	r27, 0x3F	; 63
    3282:	80 83       	st	Z, r24
    3284:	91 83       	std	Z+1, r25	; 0x01
    3286:	a2 83       	std	Z+2, r26	; 0x02
    3288:	b3 83       	std	Z+3, r27	; 0x03
    328a:	14 82       	std	Z+4, r1	; 0x04
    328c:	15 82       	std	Z+5, r1	; 0x05
    328e:	16 82       	std	Z+6, r1	; 0x06
    3290:	17 82       	std	Z+7, r1	; 0x07
    3292:	10 86       	std	Z+8, r1	; 0x08
    3294:	11 86       	std	Z+9, r1	; 0x09
    3296:	12 86       	std	Z+10, r1	; 0x0a
    3298:	13 86       	std	Z+11, r1	; 0x0b
    329a:	14 86       	std	Z+12, r1	; 0x0c
    329c:	15 86       	std	Z+13, r1	; 0x0d
    329e:	16 86       	std	Z+14, r1	; 0x0e
    32a0:	17 86       	std	Z+15, r1	; 0x0f
    32a2:	08 95       	ret

000032a4 <_GLOBAL__sub_I_bno>:
	setup();
	
	while(true){
		loop();
	}
    32a4:	0f 93       	push	r16
    32a6:	1f 93       	push	r17
/* Set the delay between fresh samples */
#define BNO055_SAMPLERATE_DELAY_MS 100

// Check I2C device address and correct line below (by default address is 0x29 or 0x28)
//                                   id, address
Adafruit_BNO055 bno = Adafruit_BNO055(55, 0x28);
    32a8:	0b e9       	ldi	r16, 0x9B	; 155
    32aa:	16 e0       	ldi	r17, 0x06	; 6
    32ac:	28 e2       	ldi	r18, 0x28	; 40
    32ae:	47 e3       	ldi	r20, 0x37	; 55
    32b0:	50 e0       	ldi	r21, 0x00	; 0
    32b2:	60 e0       	ldi	r22, 0x00	; 0
    32b4:	70 e0       	ldi	r23, 0x00	; 0
    32b6:	8a e1       	ldi	r24, 0x1A	; 26
    32b8:	99 e0       	ldi	r25, 0x09	; 9
    32ba:	0e 94 c5 01 	call	0x38a	; 0x38a <_ZN15Adafruit_BNO055C1ElhP7TwoWire>
	setup();
	
	while(true){
		loop();
	}
    32be:	1f 91       	pop	r17
    32c0:	0f 91       	pop	r16
    32c2:	08 95       	ret

000032c4 <_ZN5Print5writeEPKhj>:
}

uint16_t Print::print(char c)
{
  return write(c);
}
    32c4:	cf 92       	push	r12
    32c6:	df 92       	push	r13
    32c8:	ef 92       	push	r14
    32ca:	ff 92       	push	r15
    32cc:	0f 93       	push	r16
    32ce:	1f 93       	push	r17
    32d0:	cf 93       	push	r28
    32d2:	df 93       	push	r29
    32d4:	41 15       	cp	r20, r1
    32d6:	51 05       	cpc	r21, r1
    32d8:	c1 f0       	breq	.+48     	; 0x330a <_ZN5Print5writeEPKhj+0x46>
    32da:	6a 01       	movw	r12, r20
    32dc:	8c 01       	movw	r16, r24
    32de:	e6 2e       	mov	r14, r22
    32e0:	f7 2e       	mov	r15, r23
    32e2:	c0 e0       	ldi	r28, 0x00	; 0
    32e4:	d0 e0       	ldi	r29, 0x00	; 0
    32e6:	d7 01       	movw	r26, r14
    32e8:	6d 91       	ld	r22, X+
    32ea:	7d 01       	movw	r14, r26
    32ec:	d8 01       	movw	r26, r16
    32ee:	ed 91       	ld	r30, X+
    32f0:	fc 91       	ld	r31, X
    32f2:	01 90       	ld	r0, Z+
    32f4:	f0 81       	ld	r31, Z
    32f6:	e0 2d       	mov	r30, r0
    32f8:	c8 01       	movw	r24, r16
    32fa:	19 95       	eicall
    32fc:	89 2b       	or	r24, r25
    32fe:	39 f0       	breq	.+14     	; 0x330e <_ZN5Print5writeEPKhj+0x4a>
    3300:	21 96       	adiw	r28, 0x01	; 1
    3302:	cc 16       	cp	r12, r28
    3304:	dd 06       	cpc	r13, r29
    3306:	79 f7       	brne	.-34     	; 0x32e6 <_ZN5Print5writeEPKhj+0x22>
    3308:	02 c0       	rjmp	.+4      	; 0x330e <_ZN5Print5writeEPKhj+0x4a>
    330a:	c0 e0       	ldi	r28, 0x00	; 0
    330c:	d0 e0       	ldi	r29, 0x00	; 0
    330e:	ce 01       	movw	r24, r28
    3310:	df 91       	pop	r29
    3312:	cf 91       	pop	r28
    3314:	1f 91       	pop	r17
    3316:	0f 91       	pop	r16
    3318:	ff 90       	pop	r15
    331a:	ef 90       	pop	r14
    331c:	df 90       	pop	r13
    331e:	cf 90       	pop	r12
    3320:	08 95       	ret

00003322 <_ZN5Print5printEPKc>:
    3322:	61 15       	cp	r22, r1
    3324:	71 05       	cpc	r23, r1
    3326:	81 f0       	breq	.+32     	; 0x3348 <_ZN5Print5printEPKc+0x26>
    3328:	fb 01       	movw	r30, r22
    332a:	01 90       	ld	r0, Z+
    332c:	00 20       	and	r0, r0
    332e:	e9 f7       	brne	.-6      	; 0x332a <_ZN5Print5printEPKc+0x8>
    3330:	31 97       	sbiw	r30, 0x01	; 1
    3332:	af 01       	movw	r20, r30
    3334:	46 1b       	sub	r20, r22
    3336:	57 0b       	sbc	r21, r23
    3338:	dc 01       	movw	r26, r24
    333a:	ed 91       	ld	r30, X+
    333c:	fc 91       	ld	r31, X
    333e:	02 80       	ldd	r0, Z+2	; 0x02
    3340:	f3 81       	ldd	r31, Z+3	; 0x03
    3342:	e0 2d       	mov	r30, r0
    3344:	19 95       	eicall
    3346:	08 95       	ret
    3348:	80 e0       	ldi	r24, 0x00	; 0
    334a:	90 e0       	ldi	r25, 0x00	; 0
    334c:	08 95       	ret

0000334e <_ZN5Print7printlnEv>:
  //void clearWriteError() { setWriteError(0); }
  
  virtual uint16_t write(uint8_t) = 0;
  uint16_t write(const char *str) {
	  if (str == NULL) return 0;
	  return write((const uint8_t *)str, strlen(str));
    334e:	dc 01       	movw	r26, r24
    3350:	ed 91       	ld	r30, X+
    3352:	fc 91       	ld	r31, X
    3354:	02 80       	ldd	r0, Z+2	; 0x02
    3356:	f3 81       	ldd	r31, Z+3	; 0x03
    3358:	e0 2d       	mov	r30, r0
    335a:	42 e0       	ldi	r20, 0x02	; 2
    335c:	50 e0       	ldi	r21, 0x00	; 0
    335e:	66 ee       	ldi	r22, 0xE6	; 230
    3360:	72 e0       	ldi	r23, 0x02	; 2
    3362:	19 95       	eicall
}
*/
uint16_t Print::println(void)
{
  return write("\r\n");
}
    3364:	08 95       	ret

00003366 <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}
*/
uint16_t Print::println(const char c[])
{
    3366:	0f 93       	push	r16
    3368:	1f 93       	push	r17
    336a:	cf 93       	push	r28
    336c:	df 93       	push	r29
    336e:	ec 01       	movw	r28, r24
  uint16_t n = print(c);
    3370:	d8 df       	rcall	.-80     	; 0x3322 <_ZN5Print5printEPKc>
    3372:	8c 01       	movw	r16, r24
  n += println();
    3374:	ce 01       	movw	r24, r28
    3376:	eb df       	rcall	.-42     	; 0x334e <_ZN5Print7printlnEv>
  return n;
}
    3378:	80 0f       	add	r24, r16
    337a:	91 1f       	adc	r25, r17
    337c:	df 91       	pop	r29
    337e:	cf 91       	pop	r28
    3380:	1f 91       	pop	r17
    3382:	0f 91       	pop	r16
    3384:	08 95       	ret

00003386 <__divsf3>:
    3386:	0c d0       	rcall	.+24     	; 0x33a0 <__divsf3x>
    3388:	ba c0       	rjmp	.+372    	; 0x34fe <__fp_round>
    338a:	b2 d0       	rcall	.+356    	; 0x34f0 <__fp_pscB>
    338c:	40 f0       	brcs	.+16     	; 0x339e <__divsf3+0x18>
    338e:	a9 d0       	rcall	.+338    	; 0x34e2 <__fp_pscA>
    3390:	30 f0       	brcs	.+12     	; 0x339e <__divsf3+0x18>
    3392:	21 f4       	brne	.+8      	; 0x339c <__divsf3+0x16>
    3394:	5f 3f       	cpi	r21, 0xFF	; 255
    3396:	19 f0       	breq	.+6      	; 0x339e <__divsf3+0x18>
    3398:	9b c0       	rjmp	.+310    	; 0x34d0 <__fp_inf>
    339a:	51 11       	cpse	r21, r1
    339c:	e4 c0       	rjmp	.+456    	; 0x3566 <__fp_szero>
    339e:	9e c0       	rjmp	.+316    	; 0x34dc <__fp_nan>

000033a0 <__divsf3x>:
    33a0:	bf d0       	rcall	.+382    	; 0x3520 <__fp_split3>
    33a2:	98 f3       	brcs	.-26     	; 0x338a <__divsf3+0x4>

000033a4 <__divsf3_pse>:
    33a4:	99 23       	and	r25, r25
    33a6:	c9 f3       	breq	.-14     	; 0x339a <__divsf3+0x14>
    33a8:	55 23       	and	r21, r21
    33aa:	b1 f3       	breq	.-20     	; 0x3398 <__divsf3+0x12>
    33ac:	95 1b       	sub	r25, r21
    33ae:	55 0b       	sbc	r21, r21
    33b0:	bb 27       	eor	r27, r27
    33b2:	aa 27       	eor	r26, r26
    33b4:	62 17       	cp	r22, r18
    33b6:	73 07       	cpc	r23, r19
    33b8:	84 07       	cpc	r24, r20
    33ba:	38 f0       	brcs	.+14     	; 0x33ca <__divsf3_pse+0x26>
    33bc:	9f 5f       	subi	r25, 0xFF	; 255
    33be:	5f 4f       	sbci	r21, 0xFF	; 255
    33c0:	22 0f       	add	r18, r18
    33c2:	33 1f       	adc	r19, r19
    33c4:	44 1f       	adc	r20, r20
    33c6:	aa 1f       	adc	r26, r26
    33c8:	a9 f3       	breq	.-22     	; 0x33b4 <__divsf3_pse+0x10>
    33ca:	33 d0       	rcall	.+102    	; 0x3432 <__divsf3_pse+0x8e>
    33cc:	0e 2e       	mov	r0, r30
    33ce:	3a f0       	brmi	.+14     	; 0x33de <__divsf3_pse+0x3a>
    33d0:	e0 e8       	ldi	r30, 0x80	; 128
    33d2:	30 d0       	rcall	.+96     	; 0x3434 <__divsf3_pse+0x90>
    33d4:	91 50       	subi	r25, 0x01	; 1
    33d6:	50 40       	sbci	r21, 0x00	; 0
    33d8:	e6 95       	lsr	r30
    33da:	00 1c       	adc	r0, r0
    33dc:	ca f7       	brpl	.-14     	; 0x33d0 <__divsf3_pse+0x2c>
    33de:	29 d0       	rcall	.+82     	; 0x3432 <__divsf3_pse+0x8e>
    33e0:	fe 2f       	mov	r31, r30
    33e2:	27 d0       	rcall	.+78     	; 0x3432 <__divsf3_pse+0x8e>
    33e4:	66 0f       	add	r22, r22
    33e6:	77 1f       	adc	r23, r23
    33e8:	88 1f       	adc	r24, r24
    33ea:	bb 1f       	adc	r27, r27
    33ec:	26 17       	cp	r18, r22
    33ee:	37 07       	cpc	r19, r23
    33f0:	48 07       	cpc	r20, r24
    33f2:	ab 07       	cpc	r26, r27
    33f4:	b0 e8       	ldi	r27, 0x80	; 128
    33f6:	09 f0       	breq	.+2      	; 0x33fa <__divsf3_pse+0x56>
    33f8:	bb 0b       	sbc	r27, r27
    33fa:	80 2d       	mov	r24, r0
    33fc:	bf 01       	movw	r22, r30
    33fe:	ff 27       	eor	r31, r31
    3400:	93 58       	subi	r25, 0x83	; 131
    3402:	5f 4f       	sbci	r21, 0xFF	; 255
    3404:	2a f0       	brmi	.+10     	; 0x3410 <__divsf3_pse+0x6c>
    3406:	9e 3f       	cpi	r25, 0xFE	; 254
    3408:	51 05       	cpc	r21, r1
    340a:	68 f0       	brcs	.+26     	; 0x3426 <__divsf3_pse+0x82>
    340c:	61 c0       	rjmp	.+194    	; 0x34d0 <__fp_inf>
    340e:	ab c0       	rjmp	.+342    	; 0x3566 <__fp_szero>
    3410:	5f 3f       	cpi	r21, 0xFF	; 255
    3412:	ec f3       	brlt	.-6      	; 0x340e <__divsf3_pse+0x6a>
    3414:	98 3e       	cpi	r25, 0xE8	; 232
    3416:	dc f3       	brlt	.-10     	; 0x340e <__divsf3_pse+0x6a>
    3418:	86 95       	lsr	r24
    341a:	77 95       	ror	r23
    341c:	67 95       	ror	r22
    341e:	b7 95       	ror	r27
    3420:	f7 95       	ror	r31
    3422:	9f 5f       	subi	r25, 0xFF	; 255
    3424:	c9 f7       	brne	.-14     	; 0x3418 <__divsf3_pse+0x74>
    3426:	88 0f       	add	r24, r24
    3428:	91 1d       	adc	r25, r1
    342a:	96 95       	lsr	r25
    342c:	87 95       	ror	r24
    342e:	97 f9       	bld	r25, 7
    3430:	08 95       	ret
    3432:	e1 e0       	ldi	r30, 0x01	; 1
    3434:	66 0f       	add	r22, r22
    3436:	77 1f       	adc	r23, r23
    3438:	88 1f       	adc	r24, r24
    343a:	bb 1f       	adc	r27, r27
    343c:	62 17       	cp	r22, r18
    343e:	73 07       	cpc	r23, r19
    3440:	84 07       	cpc	r24, r20
    3442:	ba 07       	cpc	r27, r26
    3444:	20 f0       	brcs	.+8      	; 0x344e <__divsf3_pse+0xaa>
    3446:	62 1b       	sub	r22, r18
    3448:	73 0b       	sbc	r23, r19
    344a:	84 0b       	sbc	r24, r20
    344c:	ba 0b       	sbc	r27, r26
    344e:	ee 1f       	adc	r30, r30
    3450:	88 f7       	brcc	.-30     	; 0x3434 <__divsf3_pse+0x90>
    3452:	e0 95       	com	r30
    3454:	08 95       	ret

00003456 <__floatunsisf>:
    3456:	e8 94       	clt
    3458:	09 c0       	rjmp	.+18     	; 0x346c <__floatsisf+0x12>

0000345a <__floatsisf>:
    345a:	97 fb       	bst	r25, 7
    345c:	3e f4       	brtc	.+14     	; 0x346c <__floatsisf+0x12>
    345e:	90 95       	com	r25
    3460:	80 95       	com	r24
    3462:	70 95       	com	r23
    3464:	61 95       	neg	r22
    3466:	7f 4f       	sbci	r23, 0xFF	; 255
    3468:	8f 4f       	sbci	r24, 0xFF	; 255
    346a:	9f 4f       	sbci	r25, 0xFF	; 255
    346c:	99 23       	and	r25, r25
    346e:	a9 f0       	breq	.+42     	; 0x349a <__floatsisf+0x40>
    3470:	f9 2f       	mov	r31, r25
    3472:	96 e9       	ldi	r25, 0x96	; 150
    3474:	bb 27       	eor	r27, r27
    3476:	93 95       	inc	r25
    3478:	f6 95       	lsr	r31
    347a:	87 95       	ror	r24
    347c:	77 95       	ror	r23
    347e:	67 95       	ror	r22
    3480:	b7 95       	ror	r27
    3482:	f1 11       	cpse	r31, r1
    3484:	f8 cf       	rjmp	.-16     	; 0x3476 <__floatsisf+0x1c>
    3486:	fa f4       	brpl	.+62     	; 0x34c6 <__floatsisf+0x6c>
    3488:	bb 0f       	add	r27, r27
    348a:	11 f4       	brne	.+4      	; 0x3490 <__floatsisf+0x36>
    348c:	60 ff       	sbrs	r22, 0
    348e:	1b c0       	rjmp	.+54     	; 0x34c6 <__floatsisf+0x6c>
    3490:	6f 5f       	subi	r22, 0xFF	; 255
    3492:	7f 4f       	sbci	r23, 0xFF	; 255
    3494:	8f 4f       	sbci	r24, 0xFF	; 255
    3496:	9f 4f       	sbci	r25, 0xFF	; 255
    3498:	16 c0       	rjmp	.+44     	; 0x34c6 <__floatsisf+0x6c>
    349a:	88 23       	and	r24, r24
    349c:	11 f0       	breq	.+4      	; 0x34a2 <__floatsisf+0x48>
    349e:	96 e9       	ldi	r25, 0x96	; 150
    34a0:	11 c0       	rjmp	.+34     	; 0x34c4 <__floatsisf+0x6a>
    34a2:	77 23       	and	r23, r23
    34a4:	21 f0       	breq	.+8      	; 0x34ae <__floatsisf+0x54>
    34a6:	9e e8       	ldi	r25, 0x8E	; 142
    34a8:	87 2f       	mov	r24, r23
    34aa:	76 2f       	mov	r23, r22
    34ac:	05 c0       	rjmp	.+10     	; 0x34b8 <__floatsisf+0x5e>
    34ae:	66 23       	and	r22, r22
    34b0:	71 f0       	breq	.+28     	; 0x34ce <__floatsisf+0x74>
    34b2:	96 e8       	ldi	r25, 0x86	; 134
    34b4:	86 2f       	mov	r24, r22
    34b6:	70 e0       	ldi	r23, 0x00	; 0
    34b8:	60 e0       	ldi	r22, 0x00	; 0
    34ba:	2a f0       	brmi	.+10     	; 0x34c6 <__floatsisf+0x6c>
    34bc:	9a 95       	dec	r25
    34be:	66 0f       	add	r22, r22
    34c0:	77 1f       	adc	r23, r23
    34c2:	88 1f       	adc	r24, r24
    34c4:	da f7       	brpl	.-10     	; 0x34bc <__floatsisf+0x62>
    34c6:	88 0f       	add	r24, r24
    34c8:	96 95       	lsr	r25
    34ca:	87 95       	ror	r24
    34cc:	97 f9       	bld	r25, 7
    34ce:	08 95       	ret

000034d0 <__fp_inf>:
    34d0:	97 f9       	bld	r25, 7
    34d2:	9f 67       	ori	r25, 0x7F	; 127
    34d4:	80 e8       	ldi	r24, 0x80	; 128
    34d6:	70 e0       	ldi	r23, 0x00	; 0
    34d8:	60 e0       	ldi	r22, 0x00	; 0
    34da:	08 95       	ret

000034dc <__fp_nan>:
    34dc:	9f ef       	ldi	r25, 0xFF	; 255
    34de:	80 ec       	ldi	r24, 0xC0	; 192
    34e0:	08 95       	ret

000034e2 <__fp_pscA>:
    34e2:	00 24       	eor	r0, r0
    34e4:	0a 94       	dec	r0
    34e6:	16 16       	cp	r1, r22
    34e8:	17 06       	cpc	r1, r23
    34ea:	18 06       	cpc	r1, r24
    34ec:	09 06       	cpc	r0, r25
    34ee:	08 95       	ret

000034f0 <__fp_pscB>:
    34f0:	00 24       	eor	r0, r0
    34f2:	0a 94       	dec	r0
    34f4:	12 16       	cp	r1, r18
    34f6:	13 06       	cpc	r1, r19
    34f8:	14 06       	cpc	r1, r20
    34fa:	05 06       	cpc	r0, r21
    34fc:	08 95       	ret

000034fe <__fp_round>:
    34fe:	09 2e       	mov	r0, r25
    3500:	03 94       	inc	r0
    3502:	00 0c       	add	r0, r0
    3504:	11 f4       	brne	.+4      	; 0x350a <__fp_round+0xc>
    3506:	88 23       	and	r24, r24
    3508:	52 f0       	brmi	.+20     	; 0x351e <__fp_round+0x20>
    350a:	bb 0f       	add	r27, r27
    350c:	40 f4       	brcc	.+16     	; 0x351e <__fp_round+0x20>
    350e:	bf 2b       	or	r27, r31
    3510:	11 f4       	brne	.+4      	; 0x3516 <__fp_round+0x18>
    3512:	60 ff       	sbrs	r22, 0
    3514:	04 c0       	rjmp	.+8      	; 0x351e <__fp_round+0x20>
    3516:	6f 5f       	subi	r22, 0xFF	; 255
    3518:	7f 4f       	sbci	r23, 0xFF	; 255
    351a:	8f 4f       	sbci	r24, 0xFF	; 255
    351c:	9f 4f       	sbci	r25, 0xFF	; 255
    351e:	08 95       	ret

00003520 <__fp_split3>:
    3520:	57 fd       	sbrc	r21, 7
    3522:	90 58       	subi	r25, 0x80	; 128
    3524:	44 0f       	add	r20, r20
    3526:	55 1f       	adc	r21, r21
    3528:	59 f0       	breq	.+22     	; 0x3540 <__fp_splitA+0x10>
    352a:	5f 3f       	cpi	r21, 0xFF	; 255
    352c:	71 f0       	breq	.+28     	; 0x354a <__fp_splitA+0x1a>
    352e:	47 95       	ror	r20

00003530 <__fp_splitA>:
    3530:	88 0f       	add	r24, r24
    3532:	97 fb       	bst	r25, 7
    3534:	99 1f       	adc	r25, r25
    3536:	61 f0       	breq	.+24     	; 0x3550 <__fp_splitA+0x20>
    3538:	9f 3f       	cpi	r25, 0xFF	; 255
    353a:	79 f0       	breq	.+30     	; 0x355a <__fp_splitA+0x2a>
    353c:	87 95       	ror	r24
    353e:	08 95       	ret
    3540:	12 16       	cp	r1, r18
    3542:	13 06       	cpc	r1, r19
    3544:	14 06       	cpc	r1, r20
    3546:	55 1f       	adc	r21, r21
    3548:	f2 cf       	rjmp	.-28     	; 0x352e <__fp_split3+0xe>
    354a:	46 95       	lsr	r20
    354c:	f1 df       	rcall	.-30     	; 0x3530 <__fp_splitA>
    354e:	08 c0       	rjmp	.+16     	; 0x3560 <__fp_splitA+0x30>
    3550:	16 16       	cp	r1, r22
    3552:	17 06       	cpc	r1, r23
    3554:	18 06       	cpc	r1, r24
    3556:	99 1f       	adc	r25, r25
    3558:	f1 cf       	rjmp	.-30     	; 0x353c <__fp_splitA+0xc>
    355a:	86 95       	lsr	r24
    355c:	71 05       	cpc	r23, r1
    355e:	61 05       	cpc	r22, r1
    3560:	08 94       	sec
    3562:	08 95       	ret

00003564 <__fp_zero>:
    3564:	e8 94       	clt

00003566 <__fp_szero>:
    3566:	bb 27       	eor	r27, r27
    3568:	66 27       	eor	r22, r22
    356a:	77 27       	eor	r23, r23
    356c:	cb 01       	movw	r24, r22
    356e:	97 f9       	bld	r25, 7
    3570:	08 95       	ret

00003572 <__mulsf3>:
    3572:	0b d0       	rcall	.+22     	; 0x358a <__mulsf3x>
    3574:	c4 cf       	rjmp	.-120    	; 0x34fe <__fp_round>
    3576:	b5 df       	rcall	.-150    	; 0x34e2 <__fp_pscA>
    3578:	28 f0       	brcs	.+10     	; 0x3584 <__mulsf3+0x12>
    357a:	ba df       	rcall	.-140    	; 0x34f0 <__fp_pscB>
    357c:	18 f0       	brcs	.+6      	; 0x3584 <__mulsf3+0x12>
    357e:	95 23       	and	r25, r21
    3580:	09 f0       	breq	.+2      	; 0x3584 <__mulsf3+0x12>
    3582:	a6 cf       	rjmp	.-180    	; 0x34d0 <__fp_inf>
    3584:	ab cf       	rjmp	.-170    	; 0x34dc <__fp_nan>
    3586:	11 24       	eor	r1, r1
    3588:	ee cf       	rjmp	.-36     	; 0x3566 <__fp_szero>

0000358a <__mulsf3x>:
    358a:	ca df       	rcall	.-108    	; 0x3520 <__fp_split3>
    358c:	a0 f3       	brcs	.-24     	; 0x3576 <__mulsf3+0x4>

0000358e <__mulsf3_pse>:
    358e:	95 9f       	mul	r25, r21
    3590:	d1 f3       	breq	.-12     	; 0x3586 <__mulsf3+0x14>
    3592:	95 0f       	add	r25, r21
    3594:	50 e0       	ldi	r21, 0x00	; 0
    3596:	55 1f       	adc	r21, r21
    3598:	62 9f       	mul	r22, r18
    359a:	f0 01       	movw	r30, r0
    359c:	72 9f       	mul	r23, r18
    359e:	bb 27       	eor	r27, r27
    35a0:	f0 0d       	add	r31, r0
    35a2:	b1 1d       	adc	r27, r1
    35a4:	63 9f       	mul	r22, r19
    35a6:	aa 27       	eor	r26, r26
    35a8:	f0 0d       	add	r31, r0
    35aa:	b1 1d       	adc	r27, r1
    35ac:	aa 1f       	adc	r26, r26
    35ae:	64 9f       	mul	r22, r20
    35b0:	66 27       	eor	r22, r22
    35b2:	b0 0d       	add	r27, r0
    35b4:	a1 1d       	adc	r26, r1
    35b6:	66 1f       	adc	r22, r22
    35b8:	82 9f       	mul	r24, r18
    35ba:	22 27       	eor	r18, r18
    35bc:	b0 0d       	add	r27, r0
    35be:	a1 1d       	adc	r26, r1
    35c0:	62 1f       	adc	r22, r18
    35c2:	73 9f       	mul	r23, r19
    35c4:	b0 0d       	add	r27, r0
    35c6:	a1 1d       	adc	r26, r1
    35c8:	62 1f       	adc	r22, r18
    35ca:	83 9f       	mul	r24, r19
    35cc:	a0 0d       	add	r26, r0
    35ce:	61 1d       	adc	r22, r1
    35d0:	22 1f       	adc	r18, r18
    35d2:	74 9f       	mul	r23, r20
    35d4:	33 27       	eor	r19, r19
    35d6:	a0 0d       	add	r26, r0
    35d8:	61 1d       	adc	r22, r1
    35da:	23 1f       	adc	r18, r19
    35dc:	84 9f       	mul	r24, r20
    35de:	60 0d       	add	r22, r0
    35e0:	21 1d       	adc	r18, r1
    35e2:	82 2f       	mov	r24, r18
    35e4:	76 2f       	mov	r23, r22
    35e6:	6a 2f       	mov	r22, r26
    35e8:	11 24       	eor	r1, r1
    35ea:	9f 57       	subi	r25, 0x7F	; 127
    35ec:	50 40       	sbci	r21, 0x00	; 0
    35ee:	8a f0       	brmi	.+34     	; 0x3612 <__mulsf3_pse+0x84>
    35f0:	e1 f0       	breq	.+56     	; 0x362a <__mulsf3_pse+0x9c>
    35f2:	88 23       	and	r24, r24
    35f4:	4a f0       	brmi	.+18     	; 0x3608 <__mulsf3_pse+0x7a>
    35f6:	ee 0f       	add	r30, r30
    35f8:	ff 1f       	adc	r31, r31
    35fa:	bb 1f       	adc	r27, r27
    35fc:	66 1f       	adc	r22, r22
    35fe:	77 1f       	adc	r23, r23
    3600:	88 1f       	adc	r24, r24
    3602:	91 50       	subi	r25, 0x01	; 1
    3604:	50 40       	sbci	r21, 0x00	; 0
    3606:	a9 f7       	brne	.-22     	; 0x35f2 <__mulsf3_pse+0x64>
    3608:	9e 3f       	cpi	r25, 0xFE	; 254
    360a:	51 05       	cpc	r21, r1
    360c:	70 f0       	brcs	.+28     	; 0x362a <__mulsf3_pse+0x9c>
    360e:	60 cf       	rjmp	.-320    	; 0x34d0 <__fp_inf>
    3610:	aa cf       	rjmp	.-172    	; 0x3566 <__fp_szero>
    3612:	5f 3f       	cpi	r21, 0xFF	; 255
    3614:	ec f3       	brlt	.-6      	; 0x3610 <__mulsf3_pse+0x82>
    3616:	98 3e       	cpi	r25, 0xE8	; 232
    3618:	dc f3       	brlt	.-10     	; 0x3610 <__mulsf3_pse+0x82>
    361a:	86 95       	lsr	r24
    361c:	77 95       	ror	r23
    361e:	67 95       	ror	r22
    3620:	b7 95       	ror	r27
    3622:	f7 95       	ror	r31
    3624:	e7 95       	ror	r30
    3626:	9f 5f       	subi	r25, 0xFF	; 255
    3628:	c1 f7       	brne	.-16     	; 0x361a <__mulsf3_pse+0x8c>
    362a:	fe 2b       	or	r31, r30
    362c:	88 0f       	add	r24, r24
    362e:	91 1d       	adc	r25, r1
    3630:	96 95       	lsr	r25
    3632:	87 95       	ror	r24
    3634:	97 f9       	bld	r25, 7
    3636:	08 95       	ret

00003638 <__udivmodsi4>:
    3638:	a1 e2       	ldi	r26, 0x21	; 33
    363a:	1a 2e       	mov	r1, r26
    363c:	aa 1b       	sub	r26, r26
    363e:	bb 1b       	sub	r27, r27
    3640:	fd 01       	movw	r30, r26
    3642:	0d c0       	rjmp	.+26     	; 0x365e <__udivmodsi4_ep>

00003644 <__udivmodsi4_loop>:
    3644:	aa 1f       	adc	r26, r26
    3646:	bb 1f       	adc	r27, r27
    3648:	ee 1f       	adc	r30, r30
    364a:	ff 1f       	adc	r31, r31
    364c:	a2 17       	cp	r26, r18
    364e:	b3 07       	cpc	r27, r19
    3650:	e4 07       	cpc	r30, r20
    3652:	f5 07       	cpc	r31, r21
    3654:	20 f0       	brcs	.+8      	; 0x365e <__udivmodsi4_ep>
    3656:	a2 1b       	sub	r26, r18
    3658:	b3 0b       	sbc	r27, r19
    365a:	e4 0b       	sbc	r30, r20
    365c:	f5 0b       	sbc	r31, r21

0000365e <__udivmodsi4_ep>:
    365e:	66 1f       	adc	r22, r22
    3660:	77 1f       	adc	r23, r23
    3662:	88 1f       	adc	r24, r24
    3664:	99 1f       	adc	r25, r25
    3666:	1a 94       	dec	r1
    3668:	69 f7       	brne	.-38     	; 0x3644 <__udivmodsi4_loop>
    366a:	60 95       	com	r22
    366c:	70 95       	com	r23
    366e:	80 95       	com	r24
    3670:	90 95       	com	r25
    3672:	9b 01       	movw	r18, r22
    3674:	ac 01       	movw	r20, r24
    3676:	bd 01       	movw	r22, r26
    3678:	cf 01       	movw	r24, r30
    367a:	08 95       	ret

0000367c <__tablejump2__>:
    367c:	ee 0f       	add	r30, r30
    367e:	ff 1f       	adc	r31, r31
    3680:	88 1f       	adc	r24, r24
    3682:	8b bf       	out	0x3b, r24	; 59
    3684:	07 90       	elpm	r0, Z+
    3686:	f6 91       	elpm	r31, Z
    3688:	e0 2d       	mov	r30, r0
    368a:	19 94       	eijmp

0000368c <memcpy_P>:
    368c:	fb 01       	movw	r30, r22
    368e:	dc 01       	movw	r26, r24
    3690:	02 c0       	rjmp	.+4      	; 0x3696 <memcpy_P+0xa>
    3692:	05 90       	lpm	r0, Z+
    3694:	0d 92       	st	X+, r0
    3696:	41 50       	subi	r20, 0x01	; 1
    3698:	50 40       	sbci	r21, 0x00	; 0
    369a:	d8 f7       	brcc	.-10     	; 0x3692 <memcpy_P+0x6>
    369c:	08 95       	ret

0000369e <memcmp>:
    369e:	fb 01       	movw	r30, r22
    36a0:	dc 01       	movw	r26, r24
    36a2:	04 c0       	rjmp	.+8      	; 0x36ac <memcmp+0xe>
    36a4:	8d 91       	ld	r24, X+
    36a6:	01 90       	ld	r0, Z+
    36a8:	80 19       	sub	r24, r0
    36aa:	21 f4       	brne	.+8      	; 0x36b4 <memcmp+0x16>
    36ac:	41 50       	subi	r20, 0x01	; 1
    36ae:	50 40       	sbci	r21, 0x00	; 0
    36b0:	c8 f7       	brcc	.-14     	; 0x36a4 <memcmp+0x6>
    36b2:	88 1b       	sub	r24, r24
    36b4:	99 0b       	sbc	r25, r25
    36b6:	08 95       	ret

000036b8 <strncpy>:
    36b8:	fb 01       	movw	r30, r22
    36ba:	dc 01       	movw	r26, r24
    36bc:	41 50       	subi	r20, 0x01	; 1
    36be:	50 40       	sbci	r21, 0x00	; 0
    36c0:	48 f0       	brcs	.+18     	; 0x36d4 <strncpy+0x1c>
    36c2:	01 90       	ld	r0, Z+
    36c4:	0d 92       	st	X+, r0
    36c6:	00 20       	and	r0, r0
    36c8:	c9 f7       	brne	.-14     	; 0x36bc <strncpy+0x4>
    36ca:	01 c0       	rjmp	.+2      	; 0x36ce <strncpy+0x16>
    36cc:	1d 92       	st	X+, r1
    36ce:	41 50       	subi	r20, 0x01	; 1
    36d0:	50 40       	sbci	r21, 0x00	; 0
    36d2:	e0 f7       	brcc	.-8      	; 0x36cc <strncpy+0x14>
    36d4:	08 95       	ret

000036d6 <_exit>:
    36d6:	f8 94       	cli

000036d8 <__stop_program>:
    36d8:	ff cf       	rjmp	.-2      	; 0x36d8 <__stop_program>
