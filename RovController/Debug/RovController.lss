
RovController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002bc  00800200  0000504e  000050e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000504e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000006de  008004bc  008004bc  0000539e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000539e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000053d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000a18  00000000  00000000  00005410  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000178fd  00000000  00000000  00005e28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005262  00000000  00000000  0001d725  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000607e  00000000  00000000  00022987  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001e24  00000000  00000000  00028a08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000069c9  00000000  00000000  0002a82c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b882  00000000  00000000  000311f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000950  00000000  00000000  0003ca77  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4b c1       	rjmp	.+662    	; 0x298 <__ctors_end>
       2:	00 00       	nop
       4:	7a c1       	rjmp	.+756    	; 0x2fa <__bad_interrupt>
       6:	00 00       	nop
       8:	78 c1       	rjmp	.+752    	; 0x2fa <__bad_interrupt>
       a:	00 00       	nop
       c:	76 c1       	rjmp	.+748    	; 0x2fa <__bad_interrupt>
       e:	00 00       	nop
      10:	74 c1       	rjmp	.+744    	; 0x2fa <__bad_interrupt>
      12:	00 00       	nop
      14:	72 c1       	rjmp	.+740    	; 0x2fa <__bad_interrupt>
      16:	00 00       	nop
      18:	70 c1       	rjmp	.+736    	; 0x2fa <__bad_interrupt>
      1a:	00 00       	nop
      1c:	6e c1       	rjmp	.+732    	; 0x2fa <__bad_interrupt>
      1e:	00 00       	nop
      20:	6c c1       	rjmp	.+728    	; 0x2fa <__bad_interrupt>
      22:	00 00       	nop
      24:	6a c1       	rjmp	.+724    	; 0x2fa <__bad_interrupt>
      26:	00 00       	nop
      28:	68 c1       	rjmp	.+720    	; 0x2fa <__bad_interrupt>
      2a:	00 00       	nop
      2c:	66 c1       	rjmp	.+716    	; 0x2fa <__bad_interrupt>
      2e:	00 00       	nop
      30:	64 c1       	rjmp	.+712    	; 0x2fa <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 3d 0f 	jmp	0x1e7a	; 0x1e7a <__vector_13>
      38:	60 c1       	rjmp	.+704    	; 0x2fa <__bad_interrupt>
      3a:	00 00       	nop
      3c:	5e c1       	rjmp	.+700    	; 0x2fa <__bad_interrupt>
      3e:	00 00       	nop
      40:	5c c1       	rjmp	.+696    	; 0x2fa <__bad_interrupt>
      42:	00 00       	nop
      44:	5a c1       	rjmp	.+692    	; 0x2fa <__bad_interrupt>
      46:	00 00       	nop
      48:	58 c1       	rjmp	.+688    	; 0x2fa <__bad_interrupt>
      4a:	00 00       	nop
      4c:	56 c1       	rjmp	.+684    	; 0x2fa <__bad_interrupt>
      4e:	00 00       	nop
      50:	54 c1       	rjmp	.+680    	; 0x2fa <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 14 0f 	jmp	0x1e28	; 0x1e28 <__vector_21>
      58:	50 c1       	rjmp	.+672    	; 0x2fa <__bad_interrupt>
      5a:	00 00       	nop
      5c:	4e c1       	rjmp	.+668    	; 0x2fa <__bad_interrupt>
      5e:	00 00       	nop
      60:	4c c1       	rjmp	.+664    	; 0x2fa <__bad_interrupt>
      62:	00 00       	nop
      64:	4a c1       	rjmp	.+660    	; 0x2fa <__bad_interrupt>
      66:	00 00       	nop
      68:	48 c1       	rjmp	.+656    	; 0x2fa <__bad_interrupt>
      6a:	00 00       	nop
      6c:	46 c1       	rjmp	.+652    	; 0x2fa <__bad_interrupt>
      6e:	00 00       	nop
      70:	44 c1       	rjmp	.+648    	; 0x2fa <__bad_interrupt>
      72:	00 00       	nop
      74:	42 c1       	rjmp	.+644    	; 0x2fa <__bad_interrupt>
      76:	00 00       	nop
      78:	40 c1       	rjmp	.+640    	; 0x2fa <__bad_interrupt>
      7a:	00 00       	nop
      7c:	3e c1       	rjmp	.+636    	; 0x2fa <__bad_interrupt>
      7e:	00 00       	nop
      80:	3c c1       	rjmp	.+632    	; 0x2fa <__bad_interrupt>
      82:	00 00       	nop
      84:	3a c1       	rjmp	.+628    	; 0x2fa <__bad_interrupt>
      86:	00 00       	nop
      88:	38 c1       	rjmp	.+624    	; 0x2fa <__bad_interrupt>
      8a:	00 00       	nop
      8c:	36 c1       	rjmp	.+620    	; 0x2fa <__bad_interrupt>
      8e:	00 00       	nop
      90:	34 c1       	rjmp	.+616    	; 0x2fa <__bad_interrupt>
      92:	00 00       	nop
      94:	32 c1       	rjmp	.+612    	; 0x2fa <__bad_interrupt>
      96:	00 00       	nop
      98:	30 c1       	rjmp	.+608    	; 0x2fa <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 a6 10 	jmp	0x214c	; 0x214c <__vector_39>
      a0:	2c c1       	rjmp	.+600    	; 0x2fa <__bad_interrupt>
      a2:	00 00       	nop
      a4:	2a c1       	rjmp	.+596    	; 0x2fa <__bad_interrupt>
      a6:	00 00       	nop
      a8:	28 c1       	rjmp	.+592    	; 0x2fa <__bad_interrupt>
      aa:	00 00       	nop
      ac:	26 c1       	rjmp	.+588    	; 0x2fa <__bad_interrupt>
      ae:	00 00       	nop
      b0:	24 c1       	rjmp	.+584    	; 0x2fa <__bad_interrupt>
      b2:	00 00       	nop
      b4:	22 c1       	rjmp	.+580    	; 0x2fa <__bad_interrupt>
      b6:	00 00       	nop
      b8:	20 c1       	rjmp	.+576    	; 0x2fa <__bad_interrupt>
      ba:	00 00       	nop
      bc:	1e c1       	rjmp	.+572    	; 0x2fa <__bad_interrupt>
      be:	00 00       	nop
      c0:	1c c1       	rjmp	.+568    	; 0x2fa <__bad_interrupt>
      c2:	00 00       	nop
      c4:	1a c1       	rjmp	.+564    	; 0x2fa <__bad_interrupt>
      c6:	00 00       	nop
      c8:	18 c1       	rjmp	.+560    	; 0x2fa <__bad_interrupt>
      ca:	00 00       	nop
      cc:	16 c1       	rjmp	.+556    	; 0x2fa <__bad_interrupt>
      ce:	00 00       	nop
      d0:	14 c1       	rjmp	.+552    	; 0x2fa <__bad_interrupt>
      d2:	00 00       	nop
      d4:	12 c1       	rjmp	.+548    	; 0x2fa <__bad_interrupt>
      d6:	00 00       	nop
      d8:	10 c1       	rjmp	.+544    	; 0x2fa <__bad_interrupt>
      da:	00 00       	nop
      dc:	0e c1       	rjmp	.+540    	; 0x2fa <__bad_interrupt>
      de:	00 00       	nop
      e0:	0c c1       	rjmp	.+536    	; 0x2fa <__bad_interrupt>
      e2:	00 00       	nop
      e4:	ad 11       	cpse	r26, r13
      e6:	b0 11       	cpse	r27, r0
      e8:	b0 11       	cpse	r27, r0
      ea:	b0 11       	cpse	r27, r0
      ec:	b0 11       	cpse	r27, r0
      ee:	b0 11       	cpse	r27, r0
      f0:	b0 11       	cpse	r27, r0
      f2:	b0 11       	cpse	r27, r0
      f4:	c8 10       	cpse	r12, r8
      f6:	b0 11       	cpse	r27, r0
      f8:	b0 11       	cpse	r27, r0
      fa:	b0 11       	cpse	r27, r0
      fc:	b0 11       	cpse	r27, r0
      fe:	b0 11       	cpse	r27, r0
     100:	b0 11       	cpse	r27, r0
     102:	b0 11       	cpse	r27, r0
     104:	c8 10       	cpse	r12, r8
     106:	b0 11       	cpse	r27, r0
     108:	b0 11       	cpse	r27, r0
     10a:	b0 11       	cpse	r27, r0
     10c:	b0 11       	cpse	r27, r0
     10e:	b0 11       	cpse	r27, r0
     110:	b0 11       	cpse	r27, r0
     112:	b0 11       	cpse	r27, r0
     114:	d0 10       	cpse	r13, r0
     116:	b0 11       	cpse	r27, r0
     118:	b0 11       	cpse	r27, r0
     11a:	b0 11       	cpse	r27, r0
     11c:	b0 11       	cpse	r27, r0
     11e:	b0 11       	cpse	r27, r0
     120:	b0 11       	cpse	r27, r0
     122:	b0 11       	cpse	r27, r0
     124:	f5 10       	cpse	r15, r5
     126:	b0 11       	cpse	r27, r0
     128:	b0 11       	cpse	r27, r0
     12a:	b0 11       	cpse	r27, r0
     12c:	b0 11       	cpse	r27, r0
     12e:	b0 11       	cpse	r27, r0
     130:	b0 11       	cpse	r27, r0
     132:	b0 11       	cpse	r27, r0
     134:	d0 10       	cpse	r13, r0
     136:	b0 11       	cpse	r27, r0
     138:	b0 11       	cpse	r27, r0
     13a:	b0 11       	cpse	r27, r0
     13c:	b0 11       	cpse	r27, r0
     13e:	b0 11       	cpse	r27, r0
     140:	b0 11       	cpse	r27, r0
     142:	b0 11       	cpse	r27, r0
     144:	fa 10       	cpse	r15, r10
     146:	b0 11       	cpse	r27, r0
     148:	b0 11       	cpse	r27, r0
     14a:	b0 11       	cpse	r27, r0
     14c:	b0 11       	cpse	r27, r0
     14e:	b0 11       	cpse	r27, r0
     150:	b0 11       	cpse	r27, r0
     152:	b0 11       	cpse	r27, r0
     154:	ff 10       	cpse	r15, r15
     156:	b0 11       	cpse	r27, r0
     158:	b0 11       	cpse	r27, r0
     15a:	b0 11       	cpse	r27, r0
     15c:	b0 11       	cpse	r27, r0
     15e:	b0 11       	cpse	r27, r0
     160:	b0 11       	cpse	r27, r0
     162:	b0 11       	cpse	r27, r0
     164:	10 11       	cpse	r17, r0
     166:	b0 11       	cpse	r27, r0
     168:	b0 11       	cpse	r27, r0
     16a:	b0 11       	cpse	r27, r0
     16c:	b0 11       	cpse	r27, r0
     16e:	b0 11       	cpse	r27, r0
     170:	b0 11       	cpse	r27, r0
     172:	b0 11       	cpse	r27, r0
     174:	39 11       	cpse	r19, r9
     176:	b0 11       	cpse	r27, r0
     178:	b0 11       	cpse	r27, r0
     17a:	b0 11       	cpse	r27, r0
     17c:	b0 11       	cpse	r27, r0
     17e:	b0 11       	cpse	r27, r0
     180:	b0 11       	cpse	r27, r0
     182:	b0 11       	cpse	r27, r0
     184:	04 11       	cpse	r16, r4
     186:	b0 11       	cpse	r27, r0
     188:	b0 11       	cpse	r27, r0
     18a:	b0 11       	cpse	r27, r0
     18c:	b0 11       	cpse	r27, r0
     18e:	b0 11       	cpse	r27, r0
     190:	b0 11       	cpse	r27, r0
     192:	b0 11       	cpse	r27, r0
     194:	1e 11       	cpse	r17, r14
     196:	b0 11       	cpse	r27, r0
     198:	b0 11       	cpse	r27, r0
     19a:	b0 11       	cpse	r27, r0
     19c:	b0 11       	cpse	r27, r0
     19e:	b0 11       	cpse	r27, r0
     1a0:	b0 11       	cpse	r27, r0
     1a2:	b0 11       	cpse	r27, r0
     1a4:	3b 11       	cpse	r19, r11
     1a6:	b0 11       	cpse	r27, r0
     1a8:	b0 11       	cpse	r27, r0
     1aa:	b0 11       	cpse	r27, r0
     1ac:	b0 11       	cpse	r27, r0
     1ae:	b0 11       	cpse	r27, r0
     1b0:	b0 11       	cpse	r27, r0
     1b2:	b0 11       	cpse	r27, r0
     1b4:	3b 11       	cpse	r19, r11
     1b6:	b0 11       	cpse	r27, r0
     1b8:	b0 11       	cpse	r27, r0
     1ba:	b0 11       	cpse	r27, r0
     1bc:	b0 11       	cpse	r27, r0
     1be:	b0 11       	cpse	r27, r0
     1c0:	b0 11       	cpse	r27, r0
     1c2:	b0 11       	cpse	r27, r0
     1c4:	3b 11       	cpse	r19, r11
     1c6:	b0 11       	cpse	r27, r0
     1c8:	b0 11       	cpse	r27, r0
     1ca:	b0 11       	cpse	r27, r0
     1cc:	b0 11       	cpse	r27, r0
     1ce:	b0 11       	cpse	r27, r0
     1d0:	b0 11       	cpse	r27, r0
     1d2:	b0 11       	cpse	r27, r0
     1d4:	3b 11       	cpse	r19, r11
     1d6:	b0 11       	cpse	r27, r0
     1d8:	b0 11       	cpse	r27, r0
     1da:	b0 11       	cpse	r27, r0
     1dc:	b0 11       	cpse	r27, r0
     1de:	b0 11       	cpse	r27, r0
     1e0:	b0 11       	cpse	r27, r0
     1e2:	b0 11       	cpse	r27, r0
     1e4:	44 11       	cpse	r20, r4
     1e6:	b0 11       	cpse	r27, r0
     1e8:	b0 11       	cpse	r27, r0
     1ea:	b0 11       	cpse	r27, r0
     1ec:	b0 11       	cpse	r27, r0
     1ee:	b0 11       	cpse	r27, r0
     1f0:	b0 11       	cpse	r27, r0
     1f2:	b0 11       	cpse	r27, r0
     1f4:	74 11       	cpse	r23, r4
     1f6:	b0 11       	cpse	r27, r0
     1f8:	b0 11       	cpse	r27, r0
     1fa:	b0 11       	cpse	r27, r0
     1fc:	b0 11       	cpse	r27, r0
     1fe:	b0 11       	cpse	r27, r0
     200:	b0 11       	cpse	r27, r0
     202:	b0 11       	cpse	r27, r0
     204:	44 11       	cpse	r20, r4
     206:	b0 11       	cpse	r27, r0
     208:	b0 11       	cpse	r27, r0
     20a:	b0 11       	cpse	r27, r0
     20c:	b0 11       	cpse	r27, r0
     20e:	b0 11       	cpse	r27, r0
     210:	b0 11       	cpse	r27, r0
     212:	b0 11       	cpse	r27, r0
     214:	74 11       	cpse	r23, r4
     216:	b0 11       	cpse	r27, r0
     218:	b0 11       	cpse	r27, r0
     21a:	b0 11       	cpse	r27, r0
     21c:	b0 11       	cpse	r27, r0
     21e:	b0 11       	cpse	r27, r0
     220:	b0 11       	cpse	r27, r0
     222:	b0 11       	cpse	r27, r0
     224:	5c 11       	cpse	r21, r12
     226:	b0 11       	cpse	r27, r0
     228:	b0 11       	cpse	r27, r0
     22a:	b0 11       	cpse	r27, r0
     22c:	b0 11       	cpse	r27, r0
     22e:	b0 11       	cpse	r27, r0
     230:	b0 11       	cpse	r27, r0
     232:	b0 11       	cpse	r27, r0
     234:	78 11       	cpse	r23, r8
     236:	b0 11       	cpse	r27, r0
     238:	b0 11       	cpse	r27, r0
     23a:	b0 11       	cpse	r27, r0
     23c:	b0 11       	cpse	r27, r0
     23e:	b0 11       	cpse	r27, r0
     240:	b0 11       	cpse	r27, r0
     242:	b0 11       	cpse	r27, r0
     244:	78 11       	cpse	r23, r8
     246:	b0 11       	cpse	r27, r0
     248:	b0 11       	cpse	r27, r0
     24a:	b0 11       	cpse	r27, r0
     24c:	b0 11       	cpse	r27, r0
     24e:	b0 11       	cpse	r27, r0
     250:	b0 11       	cpse	r27, r0
     252:	b0 11       	cpse	r27, r0
     254:	8d 11       	cpse	r24, r13
     256:	b0 11       	cpse	r27, r0
     258:	b0 11       	cpse	r27, r0
     25a:	b0 11       	cpse	r27, r0
     25c:	b0 11       	cpse	r27, r0
     25e:	b0 11       	cpse	r27, r0
     260:	b0 11       	cpse	r27, r0
     262:	b0 11       	cpse	r27, r0
     264:	a7 11       	cpse	r26, r7
     266:	b0 11       	cpse	r27, r0
     268:	b0 11       	cpse	r27, r0
     26a:	b0 11       	cpse	r27, r0
     26c:	b0 11       	cpse	r27, r0
     26e:	b0 11       	cpse	r27, r0
     270:	b0 11       	cpse	r27, r0
     272:	b0 11       	cpse	r27, r0
     274:	a7 11       	cpse	r26, r7

00000276 <__trampolines_end>:
     276:	45 00       	.word	0x0045	; ????
     278:	00 82       	st	Z, r0
     27a:	00 00       	nop
     27c:	40 00       	.word	0x0040	; ????
     27e:	20 00       	Address 0x0000027e is out of bounds.
.word	0xffff	; ????

0000027f <_ZL9arpreqhdr>:
     27f:	00 01 08 00 06 04 00 01 00                          .........

00000288 <__ctors_start>:
     288:	1c 05       	cpc	r17, r12
     28a:	a1 0c       	add	r10, r1
     28c:	84 0d       	add	r24, r4
     28e:	66 0f       	add	r22, r22
     290:	1c 13       	cpse	r17, r28
     292:	56 1e       	adc	r5, r22
     294:	77 20       	and	r7, r7
     296:	1d 23       	and	r17, r29

00000298 <__ctors_end>:
     298:	11 24       	eor	r1, r1
     29a:	1f be       	out	0x3f, r1	; 63
     29c:	cf ef       	ldi	r28, 0xFF	; 255
     29e:	d1 e2       	ldi	r29, 0x21	; 33
     2a0:	de bf       	out	0x3e, r29	; 62
     2a2:	cd bf       	out	0x3d, r28	; 61
     2a4:	00 e0       	ldi	r16, 0x00	; 0
     2a6:	0c bf       	out	0x3c, r16	; 60

000002a8 <__do_copy_data>:
     2a8:	14 e0       	ldi	r17, 0x04	; 4
     2aa:	a0 e0       	ldi	r26, 0x00	; 0
     2ac:	b2 e0       	ldi	r27, 0x02	; 2
     2ae:	ee e4       	ldi	r30, 0x4E	; 78
     2b0:	f0 e5       	ldi	r31, 0x50	; 80
     2b2:	00 e0       	ldi	r16, 0x00	; 0
     2b4:	0b bf       	out	0x3b, r16	; 59
     2b6:	02 c0       	rjmp	.+4      	; 0x2bc <__do_copy_data+0x14>
     2b8:	07 90       	elpm	r0, Z+
     2ba:	0d 92       	st	X+, r0
     2bc:	ac 3b       	cpi	r26, 0xBC	; 188
     2be:	b1 07       	cpc	r27, r17
     2c0:	d9 f7       	brne	.-10     	; 0x2b8 <__do_copy_data+0x10>

000002c2 <__do_clear_bss>:
     2c2:	2b e0       	ldi	r18, 0x0B	; 11
     2c4:	ac eb       	ldi	r26, 0xBC	; 188
     2c6:	b4 e0       	ldi	r27, 0x04	; 4
     2c8:	01 c0       	rjmp	.+2      	; 0x2cc <.do_clear_bss_start>

000002ca <.do_clear_bss_loop>:
     2ca:	1d 92       	st	X+, r1

000002cc <.do_clear_bss_start>:
     2cc:	aa 39       	cpi	r26, 0x9A	; 154
     2ce:	b2 07       	cpc	r27, r18
     2d0:	e1 f7       	brne	.-8      	; 0x2ca <.do_clear_bss_loop>

000002d2 <__do_global_ctors>:
     2d2:	11 e0       	ldi	r17, 0x01	; 1
     2d4:	cc e4       	ldi	r28, 0x4C	; 76
     2d6:	d1 e0       	ldi	r29, 0x01	; 1
     2d8:	00 e0       	ldi	r16, 0x00	; 0
     2da:	06 c0       	rjmp	.+12     	; 0x2e8 <__do_global_ctors+0x16>
     2dc:	21 97       	sbiw	r28, 0x01	; 1
     2de:	01 09       	sbc	r16, r1
     2e0:	80 2f       	mov	r24, r16
     2e2:	fe 01       	movw	r30, r28
     2e4:	0e 94 2d 27 	call	0x4e5a	; 0x4e5a <__tablejump2__>
     2e8:	c4 34       	cpi	r28, 0x44	; 68
     2ea:	d1 07       	cpc	r29, r17
     2ec:	80 e0       	ldi	r24, 0x00	; 0
     2ee:	08 07       	cpc	r16, r24
     2f0:	a9 f7       	brne	.-22     	; 0x2dc <__do_global_ctors+0xa>
     2f2:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <main>
     2f6:	0c 94 25 28 	jmp	0x504a	; 0x504a <_exit>

000002fa <__bad_interrupt>:
     2fa:	82 ce       	rjmp	.-764    	; 0x0 <__vectors>

000002fc <_ZN15Adafruit_Sensor15enableAutoRangeEb>:

    setMode(lastMode);
    return true;
  }
  return false;
}
     2fc:	08 95       	ret

000002fe <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>:
     2fe:	0f 93       	push	r16
     300:	1f 93       	push	r17
     302:	cf 93       	push	r28
     304:	df 93       	push	r29
     306:	8c 01       	movw	r16, r24
     308:	eb 01       	movw	r28, r22
     30a:	88 e2       	ldi	r24, 0x28	; 40
     30c:	fb 01       	movw	r30, r22
     30e:	11 92       	st	Z+, r1
     310:	8a 95       	dec	r24
     312:	e9 f7       	brne	.-6      	; 0x30e <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x10>
     314:	4b e0       	ldi	r20, 0x0B	; 11
     316:	50 e0       	ldi	r21, 0x00	; 0
     318:	64 e1       	ldi	r22, 0x14	; 20
     31a:	72 e0       	ldi	r23, 0x02	; 2
     31c:	ce 01       	movw	r24, r28
     31e:	0e 94 16 28 	call	0x502c	; 0x502c <strncpy>
     322:	1b 86       	std	Y+11, r1	; 0x0b
     324:	81 e0       	ldi	r24, 0x01	; 1
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	a0 e0       	ldi	r26, 0x00	; 0
     32a:	b0 e0       	ldi	r27, 0x00	; 0
     32c:	8c 87       	std	Y+12, r24	; 0x0c
     32e:	9d 87       	std	Y+13, r25	; 0x0d
     330:	ae 87       	std	Y+14, r26	; 0x0e
     332:	bf 87       	std	Y+15, r27	; 0x0f
     334:	f8 01       	movw	r30, r16
     336:	86 81       	ldd	r24, Z+6	; 0x06
     338:	97 81       	ldd	r25, Z+7	; 0x07
     33a:	a0 85       	ldd	r26, Z+8	; 0x08
     33c:	b1 85       	ldd	r27, Z+9	; 0x09
     33e:	88 8b       	std	Y+16, r24	; 0x10
     340:	99 8b       	std	Y+17, r25	; 0x11
     342:	aa 8b       	std	Y+18, r26	; 0x12
     344:	bb 8b       	std	Y+19, r27	; 0x13
     346:	83 e0       	ldi	r24, 0x03	; 3
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	a0 e0       	ldi	r26, 0x00	; 0
     34c:	b0 e0       	ldi	r27, 0x00	; 0
     34e:	8c 8b       	std	Y+20, r24	; 0x14
     350:	9d 8b       	std	Y+21, r25	; 0x15
     352:	ae 8b       	std	Y+22, r26	; 0x16
     354:	bf 8b       	std	Y+23, r27	; 0x17
     356:	1c a2       	std	Y+36, r1	; 0x24
     358:	1d a2       	std	Y+37, r1	; 0x25
     35a:	1e a2       	std	Y+38, r1	; 0x26
     35c:	1f a2       	std	Y+39, r1	; 0x27
     35e:	18 8e       	std	Y+24, r1	; 0x18
     360:	19 8e       	std	Y+25, r1	; 0x19
     362:	1a 8e       	std	Y+26, r1	; 0x1a
     364:	1b 8e       	std	Y+27, r1	; 0x1b
     366:	1c 8e       	std	Y+28, r1	; 0x1c
     368:	1d 8e       	std	Y+29, r1	; 0x1d
     36a:	1e 8e       	std	Y+30, r1	; 0x1e
     36c:	1f 8e       	std	Y+31, r1	; 0x1f
     36e:	8a e0       	ldi	r24, 0x0A	; 10
     370:	97 ed       	ldi	r25, 0xD7	; 215
     372:	a3 e2       	ldi	r26, 0x23	; 35
     374:	bc e3       	ldi	r27, 0x3C	; 60
     376:	88 a3       	std	Y+32, r24	; 0x20
     378:	99 a3       	std	Y+33, r25	; 0x21
     37a:	aa a3       	std	Y+34, r26	; 0x22
     37c:	bb a3       	std	Y+35, r27	; 0x23
     37e:	df 91       	pop	r29
     380:	cf 91       	pop	r28
     382:	1f 91       	pop	r17
     384:	0f 91       	pop	r16
     386:	08 95       	ret

00000388 <_ZN15Adafruit_BNO055C1ElhP7TwoWire>:
     388:	0f 93       	push	r16
     38a:	1f 93       	push	r17
     38c:	fc 01       	movw	r30, r24
     38e:	8f e1       	ldi	r24, 0x1F	; 31
     390:	92 e0       	ldi	r25, 0x02	; 2
     392:	91 83       	std	Z+1, r25	; 0x01
     394:	80 83       	st	Z, r24
     396:	46 83       	std	Z+6, r20	; 0x06
     398:	57 83       	std	Z+7, r21	; 0x07
     39a:	60 87       	std	Z+8, r22	; 0x08
     39c:	71 87       	std	Z+9, r23	; 0x09
     39e:	23 83       	std	Z+3, r18	; 0x03
     3a0:	15 83       	std	Z+5, r17	; 0x05
     3a2:	04 83       	std	Z+4, r16	; 0x04
     3a4:	1f 91       	pop	r17
     3a6:	0f 91       	pop	r16
     3a8:	08 95       	ret

000003aa <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>:
     3aa:	0f 93       	push	r16
     3ac:	1f 93       	push	r17
     3ae:	cf 93       	push	r28
     3b0:	df 93       	push	r29
     3b2:	ec 01       	movw	r28, r24
     3b4:	06 2f       	mov	r16, r22
     3b6:	14 2f       	mov	r17, r20
     3b8:	6b 81       	ldd	r22, Y+3	; 0x03
     3ba:	8c 81       	ldd	r24, Y+4	; 0x04
     3bc:	9d 81       	ldd	r25, Y+5	; 0x05
     3be:	0e 94 90 12 	call	0x2520	; 0x2520 <_ZN7TwoWire17beginTransmissionEh>
     3c2:	8c 81       	ldd	r24, Y+4	; 0x04
     3c4:	9d 81       	ldd	r25, Y+5	; 0x05
     3c6:	dc 01       	movw	r26, r24
     3c8:	ed 91       	ld	r30, X+
     3ca:	fc 91       	ld	r31, X
     3cc:	01 90       	ld	r0, Z+
     3ce:	f0 81       	ld	r31, Z
     3d0:	e0 2d       	mov	r30, r0
     3d2:	60 2f       	mov	r22, r16
     3d4:	19 95       	eicall
     3d6:	8c 81       	ldd	r24, Y+4	; 0x04
     3d8:	9d 81       	ldd	r25, Y+5	; 0x05
     3da:	dc 01       	movw	r26, r24
     3dc:	ed 91       	ld	r30, X+
     3de:	fc 91       	ld	r31, X
     3e0:	01 90       	ld	r0, Z+
     3e2:	f0 81       	ld	r31, Z
     3e4:	e0 2d       	mov	r30, r0
     3e6:	61 2f       	mov	r22, r17
     3e8:	19 95       	eicall
     3ea:	8c 81       	ldd	r24, Y+4	; 0x04
     3ec:	9d 81       	ldd	r25, Y+5	; 0x05
     3ee:	0e 94 19 13 	call	0x2632	; 0x2632 <_ZN7TwoWire15endTransmissionEv>
     3f2:	81 e0       	ldi	r24, 0x01	; 1
     3f4:	df 91       	pop	r29
     3f6:	cf 91       	pop	r28
     3f8:	1f 91       	pop	r17
     3fa:	0f 91       	pop	r16
     3fc:	08 95       	ret

000003fe <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>:
     3fe:	46 2f       	mov	r20, r22
     400:	fc 01       	movw	r30, r24
     402:	62 87       	std	Z+10, r22	; 0x0a
     404:	6d e3       	ldi	r22, 0x3D	; 61
     406:	d1 df       	rcall	.-94     	; 0x3aa <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     408:	ff ef       	ldi	r31, 0xFF	; 255
     40a:	26 e7       	ldi	r18, 0x76	; 118
     40c:	81 e0       	ldi	r24, 0x01	; 1
     40e:	f1 50       	subi	r31, 0x01	; 1
     410:	20 40       	sbci	r18, 0x00	; 0
     412:	80 40       	sbci	r24, 0x00	; 0
     414:	e1 f7       	brne	.-8      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     416:	00 c0       	rjmp	.+0      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     418:	00 00       	nop
     41a:	08 95       	ret

0000041c <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>:
     41c:	1f 93       	push	r17
     41e:	cf 93       	push	r28
     420:	df 93       	push	r29
     422:	ec 01       	movw	r28, r24
     424:	16 2f       	mov	r17, r22
     426:	6b 81       	ldd	r22, Y+3	; 0x03
     428:	8c 81       	ldd	r24, Y+4	; 0x04
     42a:	9d 81       	ldd	r25, Y+5	; 0x05
     42c:	0e 94 90 12 	call	0x2520	; 0x2520 <_ZN7TwoWire17beginTransmissionEh>
     430:	8c 81       	ldd	r24, Y+4	; 0x04
     432:	9d 81       	ldd	r25, Y+5	; 0x05
     434:	dc 01       	movw	r26, r24
     436:	ed 91       	ld	r30, X+
     438:	fc 91       	ld	r31, X
     43a:	01 90       	ld	r0, Z+
     43c:	f0 81       	ld	r31, Z
     43e:	e0 2d       	mov	r30, r0
     440:	61 2f       	mov	r22, r17
     442:	19 95       	eicall
     444:	8c 81       	ldd	r24, Y+4	; 0x04
     446:	9d 81       	ldd	r25, Y+5	; 0x05
     448:	0e 94 19 13 	call	0x2632	; 0x2632 <_ZN7TwoWire15endTransmissionEv>
     44c:	41 e0       	ldi	r20, 0x01	; 1
     44e:	6b 81       	ldd	r22, Y+3	; 0x03
     450:	8c 81       	ldd	r24, Y+4	; 0x04
     452:	9d 81       	ldd	r25, Y+5	; 0x05
     454:	0e 94 13 13 	call	0x2626	; 0x2626 <_ZN7TwoWire11requestFromEhh>
     458:	8c 81       	ldd	r24, Y+4	; 0x04
     45a:	9d 81       	ldd	r25, Y+5	; 0x05
     45c:	dc 01       	movw	r26, r24
     45e:	ed 91       	ld	r30, X+
     460:	fc 91       	ld	r31, X
     462:	02 84       	ldd	r0, Z+10	; 0x0a
     464:	f3 85       	ldd	r31, Z+11	; 0x0b
     466:	e0 2d       	mov	r30, r0
     468:	19 95       	eicall
     46a:	df 91       	pop	r29
     46c:	cf 91       	pop	r28
     46e:	1f 91       	pop	r17
     470:	08 95       	ret

00000472 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>:
     472:	1f 93       	push	r17
     474:	cf 93       	push	r28
     476:	df 93       	push	r29
     478:	ec 01       	movw	r28, r24
     47a:	16 2f       	mov	r17, r22
     47c:	8c 81       	ldd	r24, Y+4	; 0x04
     47e:	9d 81       	ldd	r25, Y+5	; 0x05
     480:	0e 94 80 12 	call	0x2500	; 0x2500 <_ZN7TwoWire5beginEv>
     484:	60 e0       	ldi	r22, 0x00	; 0
     486:	ce 01       	movw	r24, r28
     488:	c9 df       	rcall	.-110    	; 0x41c <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
     48a:	80 3a       	cpi	r24, 0xA0	; 160
     48c:	79 f0       	breq	.+30     	; 0x4ac <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x3a>
     48e:	2f ef       	ldi	r18, 0xFF	; 255
     490:	83 ed       	ldi	r24, 0xD3	; 211
     492:	90 e3       	ldi	r25, 0x30	; 48
     494:	21 50       	subi	r18, 0x01	; 1
     496:	80 40       	sbci	r24, 0x00	; 0
     498:	90 40       	sbci	r25, 0x00	; 0
     49a:	e1 f7       	brne	.-8      	; 0x494 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x22>
     49c:	00 c0       	rjmp	.+0      	; 0x49e <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x2c>
     49e:	00 00       	nop
     4a0:	60 e0       	ldi	r22, 0x00	; 0
     4a2:	ce 01       	movw	r24, r28
     4a4:	bb df       	rcall	.-138    	; 0x41c <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
     4a6:	80 3a       	cpi	r24, 0xA0	; 160
     4a8:	09 f0       	breq	.+2      	; 0x4ac <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x3a>
     4aa:	4b c0       	rjmp	.+150    	; 0x542 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xd0>
     4ac:	60 e0       	ldi	r22, 0x00	; 0
     4ae:	ce 01       	movw	r24, r28
     4b0:	a6 df       	rcall	.-180    	; 0x3fe <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
     4b2:	40 e2       	ldi	r20, 0x20	; 32
     4b4:	6f e3       	ldi	r22, 0x3F	; 63
     4b6:	ce 01       	movw	r24, r28
     4b8:	78 df       	rcall	.-272    	; 0x3aa <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     4ba:	2f ef       	ldi	r18, 0xFF	; 255
     4bc:	86 e7       	ldi	r24, 0x76	; 118
     4be:	91 e0       	ldi	r25, 0x01	; 1
     4c0:	21 50       	subi	r18, 0x01	; 1
     4c2:	80 40       	sbci	r24, 0x00	; 0
     4c4:	90 40       	sbci	r25, 0x00	; 0
     4c6:	e1 f7       	brne	.-8      	; 0x4c0 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x4e>
     4c8:	00 c0       	rjmp	.+0      	; 0x4ca <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x58>
     4ca:	00 00       	nop
     4cc:	60 e0       	ldi	r22, 0x00	; 0
     4ce:	ce 01       	movw	r24, r28
     4d0:	a5 df       	rcall	.-182    	; 0x41c <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
     4d2:	80 3a       	cpi	r24, 0xA0	; 160
     4d4:	39 f0       	breq	.+14     	; 0x4e4 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x72>
     4d6:	8f e3       	ldi	r24, 0x3F	; 63
     4d8:	9c e9       	ldi	r25, 0x9C	; 156
     4da:	01 97       	sbiw	r24, 0x01	; 1
     4dc:	f1 f7       	brne	.-4      	; 0x4da <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x68>
     4de:	00 c0       	rjmp	.+0      	; 0x4e0 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x6e>
     4e0:	00 00       	nop
     4e2:	f4 cf       	rjmp	.-24     	; 0x4cc <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x5a>
     4e4:	9f ef       	ldi	r25, 0xFF	; 255
     4e6:	20 e7       	ldi	r18, 0x70	; 112
     4e8:	82 e0       	ldi	r24, 0x02	; 2
     4ea:	91 50       	subi	r25, 0x01	; 1
     4ec:	20 40       	sbci	r18, 0x00	; 0
     4ee:	80 40       	sbci	r24, 0x00	; 0
     4f0:	e1 f7       	brne	.-8      	; 0x4ea <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x78>
     4f2:	00 c0       	rjmp	.+0      	; 0x4f4 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x82>
     4f4:	00 00       	nop
     4f6:	40 e0       	ldi	r20, 0x00	; 0
     4f8:	6e e3       	ldi	r22, 0x3E	; 62
     4fa:	ce 01       	movw	r24, r28
     4fc:	56 df       	rcall	.-340    	; 0x3aa <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     4fe:	8f e3       	ldi	r24, 0x3F	; 63
     500:	9c e9       	ldi	r25, 0x9C	; 156
     502:	01 97       	sbiw	r24, 0x01	; 1
     504:	f1 f7       	brne	.-4      	; 0x502 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x90>
     506:	00 c0       	rjmp	.+0      	; 0x508 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x96>
     508:	00 00       	nop
     50a:	40 e0       	ldi	r20, 0x00	; 0
     50c:	67 e0       	ldi	r22, 0x07	; 7
     50e:	ce 01       	movw	r24, r28
     510:	4c df       	rcall	.-360    	; 0x3aa <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     512:	40 e0       	ldi	r20, 0x00	; 0
     514:	6f e3       	ldi	r22, 0x3F	; 63
     516:	ce 01       	movw	r24, r28
     518:	48 df       	rcall	.-368    	; 0x3aa <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     51a:	8f e3       	ldi	r24, 0x3F	; 63
     51c:	9c e9       	ldi	r25, 0x9C	; 156
     51e:	01 97       	sbiw	r24, 0x01	; 1
     520:	f1 f7       	brne	.-4      	; 0x51e <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xac>
     522:	00 c0       	rjmp	.+0      	; 0x524 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xb2>
     524:	00 00       	nop
     526:	61 2f       	mov	r22, r17
     528:	ce 01       	movw	r24, r28
     52a:	69 df       	rcall	.-302    	; 0x3fe <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
     52c:	9f ef       	ldi	r25, 0xFF	; 255
     52e:	29 ef       	ldi	r18, 0xF9	; 249
     530:	80 e0       	ldi	r24, 0x00	; 0
     532:	91 50       	subi	r25, 0x01	; 1
     534:	20 40       	sbci	r18, 0x00	; 0
     536:	80 40       	sbci	r24, 0x00	; 0
     538:	e1 f7       	brne	.-8      	; 0x532 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xc0>
     53a:	00 c0       	rjmp	.+0      	; 0x53c <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xca>
     53c:	00 00       	nop
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	01 c0       	rjmp	.+2      	; 0x544 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xd2>
     542:	80 e0       	ldi	r24, 0x00	; 0
     544:	df 91       	pop	r29
     546:	cf 91       	pop	r28
     548:	1f 91       	pop	r17
     54a:	08 95       	ret

0000054c <_ZN15Adafruit_BNO0557getTempEv>:
     54c:	64 e3       	ldi	r22, 0x34	; 52
     54e:	66 cf       	rjmp	.-308    	; 0x41c <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
     550:	08 95       	ret

00000552 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>:
     552:	cf 92       	push	r12
     554:	df 92       	push	r13
     556:	ef 92       	push	r14
     558:	ff 92       	push	r15
     55a:	0f 93       	push	r16
     55c:	1f 93       	push	r17
     55e:	cf 93       	push	r28
     560:	df 93       	push	r29
     562:	7c 01       	movw	r14, r24
     564:	c6 2f       	mov	r28, r22
     566:	6a 01       	movw	r12, r20
     568:	12 2f       	mov	r17, r18
     56a:	dc 01       	movw	r26, r24
     56c:	13 96       	adiw	r26, 0x03	; 3
     56e:	6c 91       	ld	r22, X
     570:	13 97       	sbiw	r26, 0x03	; 3
     572:	14 96       	adiw	r26, 0x04	; 4
     574:	8d 91       	ld	r24, X+
     576:	9c 91       	ld	r25, X
     578:	15 97       	sbiw	r26, 0x05	; 5
     57a:	0e 94 90 12 	call	0x2520	; 0x2520 <_ZN7TwoWire17beginTransmissionEh>
     57e:	f7 01       	movw	r30, r14
     580:	84 81       	ldd	r24, Z+4	; 0x04
     582:	95 81       	ldd	r25, Z+5	; 0x05
     584:	dc 01       	movw	r26, r24
     586:	ed 91       	ld	r30, X+
     588:	fc 91       	ld	r31, X
     58a:	01 90       	ld	r0, Z+
     58c:	f0 81       	ld	r31, Z
     58e:	e0 2d       	mov	r30, r0
     590:	6c 2f       	mov	r22, r28
     592:	19 95       	eicall
     594:	f7 01       	movw	r30, r14
     596:	84 81       	ldd	r24, Z+4	; 0x04
     598:	95 81       	ldd	r25, Z+5	; 0x05
     59a:	0e 94 19 13 	call	0x2632	; 0x2632 <_ZN7TwoWire15endTransmissionEv>
     59e:	41 2f       	mov	r20, r17
     5a0:	d7 01       	movw	r26, r14
     5a2:	13 96       	adiw	r26, 0x03	; 3
     5a4:	6c 91       	ld	r22, X
     5a6:	13 97       	sbiw	r26, 0x03	; 3
     5a8:	14 96       	adiw	r26, 0x04	; 4
     5aa:	8d 91       	ld	r24, X+
     5ac:	9c 91       	ld	r25, X
     5ae:	15 97       	sbiw	r26, 0x05	; 5
     5b0:	0e 94 13 13 	call	0x2626	; 0x2626 <_ZN7TwoWire11requestFromEhh>
     5b4:	11 23       	and	r17, r17
     5b6:	b1 f0       	breq	.+44     	; 0x5e4 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh+0x92>
     5b8:	e6 01       	movw	r28, r12
     5ba:	11 50       	subi	r17, 0x01	; 1
     5bc:	01 2f       	mov	r16, r17
     5be:	10 e0       	ldi	r17, 0x00	; 0
     5c0:	0f 5f       	subi	r16, 0xFF	; 255
     5c2:	1f 4f       	sbci	r17, 0xFF	; 255
     5c4:	0c 0d       	add	r16, r12
     5c6:	1d 1d       	adc	r17, r13
     5c8:	f7 01       	movw	r30, r14
     5ca:	84 81       	ldd	r24, Z+4	; 0x04
     5cc:	95 81       	ldd	r25, Z+5	; 0x05
     5ce:	dc 01       	movw	r26, r24
     5d0:	ed 91       	ld	r30, X+
     5d2:	fc 91       	ld	r31, X
     5d4:	02 84       	ldd	r0, Z+10	; 0x0a
     5d6:	f3 85       	ldd	r31, Z+11	; 0x0b
     5d8:	e0 2d       	mov	r30, r0
     5da:	19 95       	eicall
     5dc:	89 93       	st	Y+, r24
     5de:	c0 17       	cp	r28, r16
     5e0:	d1 07       	cpc	r29, r17
     5e2:	91 f7       	brne	.-28     	; 0x5c8 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh+0x76>
     5e4:	81 e0       	ldi	r24, 0x01	; 1
     5e6:	df 91       	pop	r29
     5e8:	cf 91       	pop	r28
     5ea:	1f 91       	pop	r17
     5ec:	0f 91       	pop	r16
     5ee:	ff 90       	pop	r15
     5f0:	ef 90       	pop	r14
     5f2:	df 90       	pop	r13
     5f4:	cf 90       	pop	r12
     5f6:	08 95       	ret

000005f8 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>:
 *            VECTOR_EULER
 *            VECTOR_LINEARACCEL
 *            VECTOR_GRAVITY]
 *  @return  vector from specified source
 */
AdafruitImu::Vector<3> Adafruit_BNO055::getVector(adafruit_vector_type_t vector_type) {
     5f8:	af 92       	push	r10
     5fa:	bf 92       	push	r11
     5fc:	cf 92       	push	r12
     5fe:	df 92       	push	r13
     600:	ff 92       	push	r15
     602:	0f 93       	push	r16
     604:	1f 93       	push	r17
     606:	cf 93       	push	r28
     608:	df 93       	push	r29
     60a:	00 d0       	rcall	.+0      	; 0x60c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x14>
     60c:	00 d0       	rcall	.+0      	; 0x60e <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x16>
     60e:	cd b7       	in	r28, 0x3d	; 61
     610:	de b7       	in	r29, 0x3e	; 62
     612:	8c 01       	movw	r16, r24
     614:	cb 01       	movw	r24, r22
     616:	f4 2e       	mov	r15, r20
	template <uint8_t N> class Vector
	{
		public:
		Vector()
		{
			memset(p_vec, 0, sizeof(double)*N);
     618:	2c e0       	ldi	r18, 0x0C	; 12
     61a:	f8 01       	movw	r30, r16
     61c:	11 92       	st	Z+, r1
     61e:	2a 95       	dec	r18
     620:	e9 f7       	brne	.-6      	; 0x61c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x24>
  AdafruitImu::Vector<3> xyz;
  uint8_t buffer[6];
  memset(buffer, 0, 6);
     622:	ae 01       	movw	r20, r28
     624:	4f 5f       	subi	r20, 0xFF	; 255
     626:	5f 4f       	sbci	r21, 0xFF	; 255
     628:	26 e0       	ldi	r18, 0x06	; 6
     62a:	fa 01       	movw	r30, r20
     62c:	11 92       	st	Z+, r1
     62e:	2a 95       	dec	r18
     630:	e9 f7       	brne	.-6      	; 0x62c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x34>

  int16_t x, y, z;
  x = y = z = 0;

  /* Read vector data (6 bytes) */
  readLen((adafruit_bno055_reg_t)vector_type, buffer, 6);
     632:	26 e0       	ldi	r18, 0x06	; 6
     634:	6f 2d       	mov	r22, r15
     636:	8d df       	rcall	.-230    	; 0x552 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>

  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
     638:	6a 81       	ldd	r22, Y+2	; 0x02
     63a:	70 e0       	ldi	r23, 0x00	; 0
     63c:	76 2f       	mov	r23, r22
     63e:	66 27       	eor	r22, r22
     640:	89 81       	ldd	r24, Y+1	; 0x01
     642:	68 2b       	or	r22, r24
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
     644:	8c 81       	ldd	r24, Y+4	; 0x04
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	98 2f       	mov	r25, r24
     64a:	88 27       	eor	r24, r24
     64c:	2b 81       	ldd	r18, Y+3	; 0x03
     64e:	6c 01       	movw	r12, r24
     650:	c2 2a       	or	r12, r18
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
     652:	8e 81       	ldd	r24, Y+6	; 0x06
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	98 2f       	mov	r25, r24
     658:	88 27       	eor	r24, r24
     65a:	2d 81       	ldd	r18, Y+5	; 0x05
     65c:	5c 01       	movw	r10, r24
     65e:	a2 2a       	or	r10, r18

  /*!
   * Convert the value to an appropriate range (section 3.6.4)
   * and assign the value to the Vector type
   */
  switch (vector_type) {
     660:	f4 e1       	ldi	r31, 0x14	; 20
     662:	ff 16       	cp	r15, r31
     664:	09 f4       	brne	.+2      	; 0x668 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x70>
     666:	4a c0       	rjmp	.+148    	; 0x6fc <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x104>
     668:	ff 15       	cp	r31, r15
     66a:	40 f0       	brcs	.+16     	; 0x67c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x84>
     66c:	88 e0       	ldi	r24, 0x08	; 8
     66e:	f8 16       	cp	r15, r24
     670:	09 f4       	brne	.+2      	; 0x674 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x7c>
     672:	ac c0       	rjmp	.+344    	; 0x7cc <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x1d4>
     674:	ee e0       	ldi	r30, 0x0E	; 14
     676:	fe 16       	cp	r15, r30
     678:	69 f0       	breq	.+26     	; 0x694 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x9c>
     67a:	43 c1       	rjmp	.+646    	; 0x902 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
     67c:	f8 e2       	ldi	r31, 0x28	; 40
     67e:	ff 16       	cp	r15, r31
     680:	09 f4       	brne	.+2      	; 0x684 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x8c>
     682:	d8 c0       	rjmp	.+432    	; 0x834 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x23c>
     684:	8e e2       	ldi	r24, 0x2E	; 46
     686:	f8 16       	cp	r15, r24
     688:	09 f4       	brne	.+2      	; 0x68c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x94>
     68a:	08 c1       	rjmp	.+528    	; 0x89c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x2a4>
     68c:	ea e1       	ldi	r30, 0x1A	; 26
     68e:	fe 12       	cpse	r15, r30
     690:	38 c1       	rjmp	.+624    	; 0x902 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
     692:	68 c0       	rjmp	.+208    	; 0x764 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x16c>
  case VECTOR_MAGNETOMETER:
    /* 1uT = 16 LSB */
    xyz[0] = ((double)x) / 16.0;
     694:	07 2e       	mov	r0, r23
     696:	00 0c       	add	r0, r0
     698:	88 0b       	sbc	r24, r24
     69a:	99 0b       	sbc	r25, r25
     69c:	0e 94 e5 25 	call	0x4bca	; 0x4bca <__floatsisf>
     6a0:	20 e0       	ldi	r18, 0x00	; 0
     6a2:	30 e0       	ldi	r19, 0x00	; 0
     6a4:	40 e8       	ldi	r20, 0x80	; 128
     6a6:	5d e3       	ldi	r21, 0x3D	; 61
     6a8:	0e 94 99 26 	call	0x4d32	; 0x4d32 <__mulsf3>
     6ac:	f8 01       	movw	r30, r16
     6ae:	60 83       	st	Z, r22
     6b0:	71 83       	std	Z+1, r23	; 0x01
     6b2:	82 83       	std	Z+2, r24	; 0x02
     6b4:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 16.0;
     6b6:	b6 01       	movw	r22, r12
     6b8:	dd 0c       	add	r13, r13
     6ba:	88 0b       	sbc	r24, r24
     6bc:	99 0b       	sbc	r25, r25
     6be:	0e 94 e5 25 	call	0x4bca	; 0x4bca <__floatsisf>
     6c2:	20 e0       	ldi	r18, 0x00	; 0
     6c4:	30 e0       	ldi	r19, 0x00	; 0
     6c6:	40 e8       	ldi	r20, 0x80	; 128
     6c8:	5d e3       	ldi	r21, 0x3D	; 61
     6ca:	0e 94 99 26 	call	0x4d32	; 0x4d32 <__mulsf3>
     6ce:	f8 01       	movw	r30, r16
     6d0:	64 83       	std	Z+4, r22	; 0x04
     6d2:	75 83       	std	Z+5, r23	; 0x05
     6d4:	86 83       	std	Z+6, r24	; 0x06
     6d6:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 16.0;
     6d8:	b5 01       	movw	r22, r10
     6da:	bb 0c       	add	r11, r11
     6dc:	88 0b       	sbc	r24, r24
     6de:	99 0b       	sbc	r25, r25
     6e0:	0e 94 e5 25 	call	0x4bca	; 0x4bca <__floatsisf>
     6e4:	20 e0       	ldi	r18, 0x00	; 0
     6e6:	30 e0       	ldi	r19, 0x00	; 0
     6e8:	40 e8       	ldi	r20, 0x80	; 128
     6ea:	5d e3       	ldi	r21, 0x3D	; 61
     6ec:	0e 94 99 26 	call	0x4d32	; 0x4d32 <__mulsf3>
     6f0:	f8 01       	movw	r30, r16
     6f2:	60 87       	std	Z+8, r22	; 0x08
     6f4:	71 87       	std	Z+9, r23	; 0x09
     6f6:	82 87       	std	Z+10, r24	; 0x0a
     6f8:	93 87       	std	Z+11, r25	; 0x0b
    break;
     6fa:	03 c1       	rjmp	.+518    	; 0x902 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_GYROSCOPE:
    /* 1dps = 16 LSB */
    xyz[0] = ((double)x) / 16.0;
     6fc:	07 2e       	mov	r0, r23
     6fe:	00 0c       	add	r0, r0
     700:	88 0b       	sbc	r24, r24
     702:	99 0b       	sbc	r25, r25
     704:	0e 94 e5 25 	call	0x4bca	; 0x4bca <__floatsisf>
     708:	20 e0       	ldi	r18, 0x00	; 0
     70a:	30 e0       	ldi	r19, 0x00	; 0
     70c:	40 e8       	ldi	r20, 0x80	; 128
     70e:	5d e3       	ldi	r21, 0x3D	; 61
     710:	0e 94 99 26 	call	0x4d32	; 0x4d32 <__mulsf3>
     714:	f8 01       	movw	r30, r16
     716:	60 83       	st	Z, r22
     718:	71 83       	std	Z+1, r23	; 0x01
     71a:	82 83       	std	Z+2, r24	; 0x02
     71c:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 16.0;
     71e:	b6 01       	movw	r22, r12
     720:	dd 0c       	add	r13, r13
     722:	88 0b       	sbc	r24, r24
     724:	99 0b       	sbc	r25, r25
     726:	0e 94 e5 25 	call	0x4bca	; 0x4bca <__floatsisf>
     72a:	20 e0       	ldi	r18, 0x00	; 0
     72c:	30 e0       	ldi	r19, 0x00	; 0
     72e:	40 e8       	ldi	r20, 0x80	; 128
     730:	5d e3       	ldi	r21, 0x3D	; 61
     732:	0e 94 99 26 	call	0x4d32	; 0x4d32 <__mulsf3>
     736:	f8 01       	movw	r30, r16
     738:	64 83       	std	Z+4, r22	; 0x04
     73a:	75 83       	std	Z+5, r23	; 0x05
     73c:	86 83       	std	Z+6, r24	; 0x06
     73e:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 16.0;
     740:	b5 01       	movw	r22, r10
     742:	bb 0c       	add	r11, r11
     744:	88 0b       	sbc	r24, r24
     746:	99 0b       	sbc	r25, r25
     748:	0e 94 e5 25 	call	0x4bca	; 0x4bca <__floatsisf>
     74c:	20 e0       	ldi	r18, 0x00	; 0
     74e:	30 e0       	ldi	r19, 0x00	; 0
     750:	40 e8       	ldi	r20, 0x80	; 128
     752:	5d e3       	ldi	r21, 0x3D	; 61
     754:	0e 94 99 26 	call	0x4d32	; 0x4d32 <__mulsf3>
     758:	f8 01       	movw	r30, r16
     75a:	60 87       	std	Z+8, r22	; 0x08
     75c:	71 87       	std	Z+9, r23	; 0x09
     75e:	82 87       	std	Z+10, r24	; 0x0a
     760:	93 87       	std	Z+11, r25	; 0x0b
    break;
     762:	cf c0       	rjmp	.+414    	; 0x902 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_EULER:
    /* 1 degree = 16 LSB */
    xyz[0] = ((double)x) / 16.0;
     764:	07 2e       	mov	r0, r23
     766:	00 0c       	add	r0, r0
     768:	88 0b       	sbc	r24, r24
     76a:	99 0b       	sbc	r25, r25
     76c:	0e 94 e5 25 	call	0x4bca	; 0x4bca <__floatsisf>
     770:	20 e0       	ldi	r18, 0x00	; 0
     772:	30 e0       	ldi	r19, 0x00	; 0
     774:	40 e8       	ldi	r20, 0x80	; 128
     776:	5d e3       	ldi	r21, 0x3D	; 61
     778:	0e 94 99 26 	call	0x4d32	; 0x4d32 <__mulsf3>
     77c:	f8 01       	movw	r30, r16
     77e:	60 83       	st	Z, r22
     780:	71 83       	std	Z+1, r23	; 0x01
     782:	82 83       	std	Z+2, r24	; 0x02
     784:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 16.0;
     786:	b6 01       	movw	r22, r12
     788:	dd 0c       	add	r13, r13
     78a:	88 0b       	sbc	r24, r24
     78c:	99 0b       	sbc	r25, r25
     78e:	0e 94 e5 25 	call	0x4bca	; 0x4bca <__floatsisf>
     792:	20 e0       	ldi	r18, 0x00	; 0
     794:	30 e0       	ldi	r19, 0x00	; 0
     796:	40 e8       	ldi	r20, 0x80	; 128
     798:	5d e3       	ldi	r21, 0x3D	; 61
     79a:	0e 94 99 26 	call	0x4d32	; 0x4d32 <__mulsf3>
     79e:	f8 01       	movw	r30, r16
     7a0:	64 83       	std	Z+4, r22	; 0x04
     7a2:	75 83       	std	Z+5, r23	; 0x05
     7a4:	86 83       	std	Z+6, r24	; 0x06
     7a6:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 16.0;
     7a8:	b5 01       	movw	r22, r10
     7aa:	bb 0c       	add	r11, r11
     7ac:	88 0b       	sbc	r24, r24
     7ae:	99 0b       	sbc	r25, r25
     7b0:	0e 94 e5 25 	call	0x4bca	; 0x4bca <__floatsisf>
     7b4:	20 e0       	ldi	r18, 0x00	; 0
     7b6:	30 e0       	ldi	r19, 0x00	; 0
     7b8:	40 e8       	ldi	r20, 0x80	; 128
     7ba:	5d e3       	ldi	r21, 0x3D	; 61
     7bc:	0e 94 99 26 	call	0x4d32	; 0x4d32 <__mulsf3>
     7c0:	f8 01       	movw	r30, r16
     7c2:	60 87       	std	Z+8, r22	; 0x08
     7c4:	71 87       	std	Z+9, r23	; 0x09
     7c6:	82 87       	std	Z+10, r24	; 0x0a
     7c8:	93 87       	std	Z+11, r25	; 0x0b
    break;
     7ca:	9b c0       	rjmp	.+310    	; 0x902 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_ACCELEROMETER:
    /* 1m/s^2 = 100 LSB */
    xyz[0] = ((double)x) / 100.0;
     7cc:	07 2e       	mov	r0, r23
     7ce:	00 0c       	add	r0, r0
     7d0:	88 0b       	sbc	r24, r24
     7d2:	99 0b       	sbc	r25, r25
     7d4:	0e 94 e5 25 	call	0x4bca	; 0x4bca <__floatsisf>
     7d8:	20 e0       	ldi	r18, 0x00	; 0
     7da:	30 e0       	ldi	r19, 0x00	; 0
     7dc:	48 ec       	ldi	r20, 0xC8	; 200
     7de:	52 e4       	ldi	r21, 0x42	; 66
     7e0:	0e 94 4f 25 	call	0x4a9e	; 0x4a9e <__divsf3>
     7e4:	f8 01       	movw	r30, r16
     7e6:	60 83       	st	Z, r22
     7e8:	71 83       	std	Z+1, r23	; 0x01
     7ea:	82 83       	std	Z+2, r24	; 0x02
     7ec:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 100.0;
     7ee:	b6 01       	movw	r22, r12
     7f0:	dd 0c       	add	r13, r13
     7f2:	88 0b       	sbc	r24, r24
     7f4:	99 0b       	sbc	r25, r25
     7f6:	0e 94 e5 25 	call	0x4bca	; 0x4bca <__floatsisf>
     7fa:	20 e0       	ldi	r18, 0x00	; 0
     7fc:	30 e0       	ldi	r19, 0x00	; 0
     7fe:	48 ec       	ldi	r20, 0xC8	; 200
     800:	52 e4       	ldi	r21, 0x42	; 66
     802:	0e 94 4f 25 	call	0x4a9e	; 0x4a9e <__divsf3>
     806:	f8 01       	movw	r30, r16
     808:	64 83       	std	Z+4, r22	; 0x04
     80a:	75 83       	std	Z+5, r23	; 0x05
     80c:	86 83       	std	Z+6, r24	; 0x06
     80e:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 100.0;
     810:	b5 01       	movw	r22, r10
     812:	bb 0c       	add	r11, r11
     814:	88 0b       	sbc	r24, r24
     816:	99 0b       	sbc	r25, r25
     818:	0e 94 e5 25 	call	0x4bca	; 0x4bca <__floatsisf>
     81c:	20 e0       	ldi	r18, 0x00	; 0
     81e:	30 e0       	ldi	r19, 0x00	; 0
     820:	48 ec       	ldi	r20, 0xC8	; 200
     822:	52 e4       	ldi	r21, 0x42	; 66
     824:	0e 94 4f 25 	call	0x4a9e	; 0x4a9e <__divsf3>
     828:	f8 01       	movw	r30, r16
     82a:	60 87       	std	Z+8, r22	; 0x08
     82c:	71 87       	std	Z+9, r23	; 0x09
     82e:	82 87       	std	Z+10, r24	; 0x0a
     830:	93 87       	std	Z+11, r25	; 0x0b
    break;
     832:	67 c0       	rjmp	.+206    	; 0x902 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_LINEARACCEL:
    /* 1m/s^2 = 100 LSB */
    xyz[0] = ((double)x) / 100.0;
     834:	07 2e       	mov	r0, r23
     836:	00 0c       	add	r0, r0
     838:	88 0b       	sbc	r24, r24
     83a:	99 0b       	sbc	r25, r25
     83c:	0e 94 e5 25 	call	0x4bca	; 0x4bca <__floatsisf>
     840:	20 e0       	ldi	r18, 0x00	; 0
     842:	30 e0       	ldi	r19, 0x00	; 0
     844:	48 ec       	ldi	r20, 0xC8	; 200
     846:	52 e4       	ldi	r21, 0x42	; 66
     848:	0e 94 4f 25 	call	0x4a9e	; 0x4a9e <__divsf3>
     84c:	f8 01       	movw	r30, r16
     84e:	60 83       	st	Z, r22
     850:	71 83       	std	Z+1, r23	; 0x01
     852:	82 83       	std	Z+2, r24	; 0x02
     854:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 100.0;
     856:	b6 01       	movw	r22, r12
     858:	dd 0c       	add	r13, r13
     85a:	88 0b       	sbc	r24, r24
     85c:	99 0b       	sbc	r25, r25
     85e:	0e 94 e5 25 	call	0x4bca	; 0x4bca <__floatsisf>
     862:	20 e0       	ldi	r18, 0x00	; 0
     864:	30 e0       	ldi	r19, 0x00	; 0
     866:	48 ec       	ldi	r20, 0xC8	; 200
     868:	52 e4       	ldi	r21, 0x42	; 66
     86a:	0e 94 4f 25 	call	0x4a9e	; 0x4a9e <__divsf3>
     86e:	f8 01       	movw	r30, r16
     870:	64 83       	std	Z+4, r22	; 0x04
     872:	75 83       	std	Z+5, r23	; 0x05
     874:	86 83       	std	Z+6, r24	; 0x06
     876:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 100.0;
     878:	b5 01       	movw	r22, r10
     87a:	bb 0c       	add	r11, r11
     87c:	88 0b       	sbc	r24, r24
     87e:	99 0b       	sbc	r25, r25
     880:	0e 94 e5 25 	call	0x4bca	; 0x4bca <__floatsisf>
     884:	20 e0       	ldi	r18, 0x00	; 0
     886:	30 e0       	ldi	r19, 0x00	; 0
     888:	48 ec       	ldi	r20, 0xC8	; 200
     88a:	52 e4       	ldi	r21, 0x42	; 66
     88c:	0e 94 4f 25 	call	0x4a9e	; 0x4a9e <__divsf3>
     890:	f8 01       	movw	r30, r16
     892:	60 87       	std	Z+8, r22	; 0x08
     894:	71 87       	std	Z+9, r23	; 0x09
     896:	82 87       	std	Z+10, r24	; 0x0a
     898:	93 87       	std	Z+11, r25	; 0x0b
    break;
     89a:	33 c0       	rjmp	.+102    	; 0x902 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_GRAVITY:
    /* 1m/s^2 = 100 LSB */
    xyz[0] = ((double)x) / 100.0;
     89c:	07 2e       	mov	r0, r23
     89e:	00 0c       	add	r0, r0
     8a0:	88 0b       	sbc	r24, r24
     8a2:	99 0b       	sbc	r25, r25
     8a4:	0e 94 e5 25 	call	0x4bca	; 0x4bca <__floatsisf>
     8a8:	20 e0       	ldi	r18, 0x00	; 0
     8aa:	30 e0       	ldi	r19, 0x00	; 0
     8ac:	48 ec       	ldi	r20, 0xC8	; 200
     8ae:	52 e4       	ldi	r21, 0x42	; 66
     8b0:	0e 94 4f 25 	call	0x4a9e	; 0x4a9e <__divsf3>
     8b4:	f8 01       	movw	r30, r16
     8b6:	60 83       	st	Z, r22
     8b8:	71 83       	std	Z+1, r23	; 0x01
     8ba:	82 83       	std	Z+2, r24	; 0x02
     8bc:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 100.0;
     8be:	b6 01       	movw	r22, r12
     8c0:	dd 0c       	add	r13, r13
     8c2:	88 0b       	sbc	r24, r24
     8c4:	99 0b       	sbc	r25, r25
     8c6:	0e 94 e5 25 	call	0x4bca	; 0x4bca <__floatsisf>
     8ca:	20 e0       	ldi	r18, 0x00	; 0
     8cc:	30 e0       	ldi	r19, 0x00	; 0
     8ce:	48 ec       	ldi	r20, 0xC8	; 200
     8d0:	52 e4       	ldi	r21, 0x42	; 66
     8d2:	0e 94 4f 25 	call	0x4a9e	; 0x4a9e <__divsf3>
     8d6:	f8 01       	movw	r30, r16
     8d8:	64 83       	std	Z+4, r22	; 0x04
     8da:	75 83       	std	Z+5, r23	; 0x05
     8dc:	86 83       	std	Z+6, r24	; 0x06
     8de:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 100.0;
     8e0:	b5 01       	movw	r22, r10
     8e2:	bb 0c       	add	r11, r11
     8e4:	88 0b       	sbc	r24, r24
     8e6:	99 0b       	sbc	r25, r25
     8e8:	0e 94 e5 25 	call	0x4bca	; 0x4bca <__floatsisf>
     8ec:	20 e0       	ldi	r18, 0x00	; 0
     8ee:	30 e0       	ldi	r19, 0x00	; 0
     8f0:	48 ec       	ldi	r20, 0xC8	; 200
     8f2:	52 e4       	ldi	r21, 0x42	; 66
     8f4:	0e 94 4f 25 	call	0x4a9e	; 0x4a9e <__divsf3>
     8f8:	f8 01       	movw	r30, r16
     8fa:	60 87       	std	Z+8, r22	; 0x08
     8fc:	71 87       	std	Z+9, r23	; 0x09
     8fe:	82 87       	std	Z+10, r24	; 0x0a
     900:	93 87       	std	Z+11, r25	; 0x0b
    break;
  }

  return xyz;
}
     902:	c8 01       	movw	r24, r16
     904:	26 96       	adiw	r28, 0x06	; 6
     906:	0f b6       	in	r0, 0x3f	; 63
     908:	f8 94       	cli
     90a:	de bf       	out	0x3e, r29	; 62
     90c:	0f be       	out	0x3f, r0	; 63
     90e:	cd bf       	out	0x3d, r28	; 61
     910:	df 91       	pop	r29
     912:	cf 91       	pop	r28
     914:	1f 91       	pop	r17
     916:	0f 91       	pop	r16
     918:	ff 90       	pop	r15
     91a:	df 90       	pop	r13
     91c:	cf 90       	pop	r12
     91e:	bf 90       	pop	r11
     920:	af 90       	pop	r10
     922:	08 95       	ret

00000924 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>:
/*!
 *  @brief  Reads the sensor and returns the data as a sensors_event_t
 *  @param  event
 *  @return always returns true
 */
bool Adafruit_BNO055::getEvent(sensors_event_t *event) {
     924:	0f 93       	push	r16
     926:	1f 93       	push	r17
     928:	cf 93       	push	r28
     92a:	df 93       	push	r29
     92c:	cd b7       	in	r28, 0x3d	; 61
     92e:	de b7       	in	r29, 0x3e	; 62
     930:	2c 97       	sbiw	r28, 0x0c	; 12
     932:	0f b6       	in	r0, 0x3f	; 63
     934:	f8 94       	cli
     936:	de bf       	out	0x3e, r29	; 62
     938:	0f be       	out	0x3f, r0	; 63
     93a:	cd bf       	out	0x3d, r28	; 61
     93c:	8b 01       	movw	r16, r22
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
     93e:	20 e2       	ldi	r18, 0x20	; 32
     940:	fb 01       	movw	r30, r22
     942:	11 92       	st	Z+, r1
     944:	2a 95       	dec	r18
     946:	e9 f7       	brne	.-6      	; 0x942 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t+0x1e>

  event->version = sizeof(sensors_event_t);
     948:	40 e2       	ldi	r20, 0x20	; 32
     94a:	50 e0       	ldi	r21, 0x00	; 0
     94c:	60 e0       	ldi	r22, 0x00	; 0
     94e:	70 e0       	ldi	r23, 0x00	; 0
     950:	f8 01       	movw	r30, r16
     952:	40 83       	st	Z, r20
     954:	51 83       	std	Z+1, r21	; 0x01
     956:	62 83       	std	Z+2, r22	; 0x02
     958:	73 83       	std	Z+3, r23	; 0x03
  event->sensor_id = _sensorID;
     95a:	fc 01       	movw	r30, r24
     95c:	46 81       	ldd	r20, Z+6	; 0x06
     95e:	57 81       	ldd	r21, Z+7	; 0x07
     960:	60 85       	ldd	r22, Z+8	; 0x08
     962:	71 85       	ldd	r23, Z+9	; 0x09
     964:	f8 01       	movw	r30, r16
     966:	44 83       	std	Z+4, r20	; 0x04
     968:	55 83       	std	Z+5, r21	; 0x05
     96a:	66 83       	std	Z+6, r22	; 0x06
     96c:	77 83       	std	Z+7, r23	; 0x07
  event->type = SENSOR_TYPE_ORIENTATION;
     96e:	43 e0       	ldi	r20, 0x03	; 3
     970:	50 e0       	ldi	r21, 0x00	; 0
     972:	60 e0       	ldi	r22, 0x00	; 0
     974:	70 e0       	ldi	r23, 0x00	; 0
     976:	40 87       	std	Z+8, r20	; 0x08
     978:	51 87       	std	Z+9, r21	; 0x09
     97a:	62 87       	std	Z+10, r22	; 0x0a
     97c:	73 87       	std	Z+11, r23	; 0x0b
  //event->timestamp = millis();

  /* Get a Euler angle sample for orientation */
  AdafruitImu::Vector<3> euler = getVector(Adafruit_BNO055::VECTOR_EULER);
     97e:	4a e1       	ldi	r20, 0x1A	; 26
     980:	bc 01       	movw	r22, r24
     982:	ce 01       	movw	r24, r28
     984:	01 96       	adiw	r24, 0x01	; 1
     986:	38 de       	rcall	.-912    	; 0x5f8 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
  event->orientation.x = euler.x();
     988:	89 81       	ldd	r24, Y+1	; 0x01
     98a:	9a 81       	ldd	r25, Y+2	; 0x02
     98c:	ab 81       	ldd	r26, Y+3	; 0x03
     98e:	bc 81       	ldd	r27, Y+4	; 0x04
     990:	f8 01       	movw	r30, r16
     992:	80 8b       	std	Z+16, r24	; 0x10
     994:	91 8b       	std	Z+17, r25	; 0x11
     996:	a2 8b       	std	Z+18, r26	; 0x12
     998:	b3 8b       	std	Z+19, r27	; 0x13
  event->orientation.y = euler.y();
     99a:	8d 81       	ldd	r24, Y+5	; 0x05
     99c:	9e 81       	ldd	r25, Y+6	; 0x06
     99e:	af 81       	ldd	r26, Y+7	; 0x07
     9a0:	b8 85       	ldd	r27, Y+8	; 0x08
     9a2:	84 8b       	std	Z+20, r24	; 0x14
     9a4:	95 8b       	std	Z+21, r25	; 0x15
     9a6:	a6 8b       	std	Z+22, r26	; 0x16
     9a8:	b7 8b       	std	Z+23, r27	; 0x17
  event->orientation.z = euler.z();
     9aa:	89 85       	ldd	r24, Y+9	; 0x09
     9ac:	9a 85       	ldd	r25, Y+10	; 0x0a
     9ae:	ab 85       	ldd	r26, Y+11	; 0x0b
     9b0:	bc 85       	ldd	r27, Y+12	; 0x0c
     9b2:	80 8f       	std	Z+24, r24	; 0x18
     9b4:	91 8f       	std	Z+25, r25	; 0x19
     9b6:	a2 8f       	std	Z+26, r26	; 0x1a
     9b8:	b3 8f       	std	Z+27, r27	; 0x1b

  return true;
}
     9ba:	81 e0       	ldi	r24, 0x01	; 1
     9bc:	2c 96       	adiw	r28, 0x0c	; 12
     9be:	0f b6       	in	r0, 0x3f	; 63
     9c0:	f8 94       	cli
     9c2:	de bf       	out	0x3e, r29	; 62
     9c4:	0f be       	out	0x3f, r0	; 63
     9c6:	cd bf       	out	0x3d, r28	; 61
     9c8:	df 91       	pop	r29
     9ca:	cf 91       	pop	r28
     9cc:	1f 91       	pop	r17
     9ce:	0f 91       	pop	r16
     9d0:	08 95       	ret

000009d2 <_Z14RunPingCommandPKhh>:
	}
	
	EtherComm::SendCommand(CMD_Echo, dataLen);
}
//TODO remove this command from both devices
void RunLedCommand(const uint8_t* data, uint8_t len){
     9d2:	61 30       	cpi	r22, 0x01	; 1
     9d4:	49 f4       	brne	.+18     	; 0x9e8 <_Z14RunPingCommandPKhh+0x16>
     9d6:	fc 01       	movw	r30, r24
     9d8:	80 81       	ld	r24, Z
     9da:	e0 91 bc 04 	lds	r30, 0x04BC	; 0x8004bc <__data_end>
     9de:	f0 91 bd 04 	lds	r31, 0x04BD	; 0x8004bd <__data_end+0x1>
     9e2:	80 83       	st	Z, r24
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	ac c6       	rjmp	.+3416   	; 0x1740 <_ZN9EtherComm11SendCommandEhh>
     9e8:	08 95       	ret

000009ea <_Z14RunEchoCommandPKhh>:
     9ea:	40 91 bc 04 	lds	r20, 0x04BC	; 0x8004bc <__data_end>
     9ee:	30 91 bd 04 	lds	r19, 0x04BD	; 0x8004bd <__data_end+0x1>
     9f2:	2f ef       	ldi	r18, 0xFF	; 255
     9f4:	26 0f       	add	r18, r22
     9f6:	66 23       	and	r22, r22
     9f8:	41 f0       	breq	.+16     	; 0xa0a <_Z14RunEchoCommandPKhh+0x20>
     9fa:	a8 2f       	mov	r26, r24
     9fc:	b9 2f       	mov	r27, r25
     9fe:	e4 2f       	mov	r30, r20
     a00:	f3 2f       	mov	r31, r19
     a02:	8d 91       	ld	r24, X+
     a04:	81 93       	st	Z+, r24
     a06:	21 50       	subi	r18, 0x01	; 1
     a08:	e0 f7       	brcc	.-8      	; 0xa02 <_Z14RunEchoCommandPKhh+0x18>
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	99 c6       	rjmp	.+3378   	; 0x1740 <_ZN9EtherComm11SendCommandEhh>
     a0e:	08 95       	ret

00000a10 <_ZN9EtherComm15CommandReceivedEhPKhh>:
			//todo REMOVE COMMAND
		}
	}
}

void EtherComm::CommandReceived(uint8_t command, const uint8_t* data, uint8_t len){
     a10:	9b 01       	movw	r18, r22
	switch(command){
     a12:	81 30       	cpi	r24, 0x01	; 1
     a14:	41 f0       	breq	.+16     	; 0xa26 <_ZN9EtherComm15CommandReceivedEhPKhh+0x16>
     a16:	18 f0       	brcs	.+6      	; 0xa1e <_ZN9EtherComm15CommandReceivedEhPKhh+0xe>
     a18:	83 30       	cpi	r24, 0x03	; 3
     a1a:	49 f0       	breq	.+18     	; 0xa2e <_ZN9EtherComm15CommandReceivedEhPKhh+0x1e>
     a1c:	08 95       	ret
		case CMD_Ping: RunPingCommand(data, len); break;
     a1e:	64 2f       	mov	r22, r20
     a20:	c9 01       	movw	r24, r18
     a22:	d7 cf       	rjmp	.-82     	; 0x9d2 <_Z14RunPingCommandPKhh>
     a24:	08 95       	ret
		case CMD_Echo: RunEchoCommand(data, len); break;
     a26:	64 2f       	mov	r22, r20
     a28:	c9 01       	movw	r24, r18
     a2a:	df cf       	rjmp	.-66     	; 0x9ea <_Z14RunEchoCommandPKhh>
     a2c:	08 95       	ret
		case CMD_Led: RunLedCommand(data, len); break;
		case CMD_UpdateDevice: rov.CommandReceived(data, len); break;
     a2e:	64 2f       	mov	r22, r20
     a30:	c9 01       	movw	r24, r18
     a32:	0c 94 5a 20 	jmp	0x40b4	; 0x40b4 <_ZN5Robot15CommandReceivedEPKhh>
     a36:	08 95       	ret

00000a38 <_GLOBAL__sub_I__Z14RunPingCommandPKhh>:
#include "Commands.h"
#include "EtherComm.h"
#include "Robot.h"
#include <stddef.h>

uint8_t* const SendDataBuffer = (uint8_t*)(&EtherComm::buffer[2]);
     a38:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
     a3c:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
     a40:	02 96       	adiw	r24, 0x02	; 2
     a42:	90 93 bd 04 	sts	0x04BD, r25	; 0x8004bd <__data_end+0x1>
     a46:	80 93 bc 04 	sts	0x04BC, r24	; 0x8004bc <__data_end>
     a4a:	08 95       	ret

00000a4c <_ZL10enableChipv>:
static Register* selectPort;
static uint8_t selectPin;

static void enableChip () {
	//cli();
	SetLow(*selectPort, selectPin); //digitalWrite(selectPin, LOW);
     a4c:	e0 91 c2 04 	lds	r30, 0x04C2	; 0x8004c2 <_ZL10selectPort>
     a50:	f0 91 c3 04 	lds	r31, 0x04C3	; 0x8004c3 <_ZL10selectPort+0x1>
     a54:	90 81       	ld	r25, Z
     a56:	80 91 c1 04 	lds	r24, 0x04C1	; 0x8004c1 <_ZL9selectPin>
     a5a:	80 95       	com	r24
     a5c:	89 23       	and	r24, r25
     a5e:	80 83       	st	Z, r24
     a60:	08 95       	ret

00000a62 <_ZL11disableChipv>:
}

static void disableChip () {
	SetHigh(*selectPort, selectPin); //digitalWrite(selectPin, HIGH);
     a62:	e0 91 c2 04 	lds	r30, 0x04C2	; 0x8004c2 <_ZL10selectPort>
     a66:	f0 91 c3 04 	lds	r31, 0x04C3	; 0x8004c3 <_ZL10selectPort+0x1>
     a6a:	90 81       	ld	r25, Z
     a6c:	80 91 c1 04 	lds	r24, 0x04C1	; 0x8004c1 <_ZL9selectPin>
     a70:	89 2b       	or	r24, r25
     a72:	80 83       	st	Z, r24
     a74:	08 95       	ret

00000a76 <_ZL6readOphh>:

	SetOutput(csDDR, selectPin);
	disableChip();
}

static uint8_t readOp (uint8_t op, uint8_t address) {
     a76:	cf 93       	push	r28
     a78:	df 93       	push	r29
     a7a:	d8 2f       	mov	r29, r24
     a7c:	c6 2f       	mov	r28, r22
    enableChip();
     a7e:	e6 df       	rcall	.-52     	; 0xa4c <_ZL10enableChipv>
    SPI.write8(op | (address & ADDR_MASK));
     a80:	8c 2f       	mov	r24, r28
     a82:	cf 71       	andi	r28, 0x1F	; 31
     a84:	cd 2b       	or	r28, r29
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     a86:	ce bd       	out	0x2e, r28	; 46
		asm volatile("nop");
     a88:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     a8a:	0d b4       	in	r0, 0x2d	; 45
     a8c:	07 fe       	sbrs	r0, 7
     a8e:	fd cf       	rjmp	.-6      	; 0xa8a <_ZL6readOphh+0x14>
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     a90:	1e bc       	out	0x2e, r1	; 46
		asm volatile("nop");
     a92:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     a94:	0d b4       	in	r0, 0x2d	; 45
     a96:	07 fe       	sbrs	r0, 7
     a98:	fd cf       	rjmp	.-6      	; 0xa94 <_ZL6readOphh+0x1e>
	}

	//write8, excepts also returns the received byte
	static uint8_t read_write8(uint8_t data){
		write8(data);
		return SPDR;
     a9a:	ce b5       	in	r28, 0x2e	; 46
    uint8_t result = SPI.read_write8(0x00);
    if (address & 0x80)
     a9c:	88 23       	and	r24, r24
     a9e:	34 f4       	brge	.+12     	; 0xaac <_ZL6readOphh+0x36>
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     aa0:	1e bc       	out	0x2e, r1	; 46
		asm volatile("nop");
     aa2:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     aa4:	0d b4       	in	r0, 0x2d	; 45
     aa6:	07 fe       	sbrs	r0, 7
     aa8:	fd cf       	rjmp	.-6      	; 0xaa4 <_ZL6readOphh+0x2e>
        result = SPI.read_write8(0x00);
    disableChip();
     aaa:	ce b5       	in	r28, 0x2e	; 46
     aac:	da df       	rcall	.-76     	; 0xa62 <_ZL11disableChipv>
    return result;
}
     aae:	8c 2f       	mov	r24, r28
     ab0:	df 91       	pop	r29
     ab2:	cf 91       	pop	r28
     ab4:	08 95       	ret

00000ab6 <_ZL7writeOphhh>:

static void writeOp (uint8_t op, uint8_t address, uint8_t data) {
     ab6:	1f 93       	push	r17
     ab8:	cf 93       	push	r28
     aba:	df 93       	push	r29
     abc:	c8 2f       	mov	r28, r24
     abe:	d6 2f       	mov	r29, r22
     ac0:	14 2f       	mov	r17, r20
    enableChip();
     ac2:	c4 df       	rcall	.-120    	; 0xa4c <_ZL10enableChipv>
    SPI.write8(op | (address & ADDR_MASK));
     ac4:	df 71       	andi	r29, 0x1F	; 31
     ac6:	cd 2b       	or	r28, r29
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     ac8:	ce bd       	out	0x2e, r28	; 46
		asm volatile("nop");
     aca:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     acc:	0d b4       	in	r0, 0x2d	; 45
     ace:	07 fe       	sbrs	r0, 7
     ad0:	fd cf       	rjmp	.-6      	; 0xacc <_ZL7writeOphhh+0x16>
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     ad2:	1e bd       	out	0x2e, r17	; 46
		asm volatile("nop");
     ad4:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     ad6:	0d b4       	in	r0, 0x2d	; 45
     ad8:	07 fe       	sbrs	r0, 7
    SPI.write8(data);
    disableChip();
     ada:	fd cf       	rjmp	.-6      	; 0xad6 <_ZL7writeOphhh+0x20>
     adc:	c2 df       	rcall	.-124    	; 0xa62 <_ZL11disableChipv>
}
     ade:	df 91       	pop	r29
     ae0:	cf 91       	pop	r28
     ae2:	1f 91       	pop	r17
     ae4:	08 95       	ret

00000ae6 <_ZL7readBufjPh>:

static void readBuf(uint16_t len, uint8_t* data) {
     ae6:	0f 93       	push	r16
     ae8:	1f 93       	push	r17
     aea:	cf 93       	push	r28
     aec:	df 93       	push	r29
     aee:	ec 01       	movw	r28, r24
     af0:	8b 01       	movw	r16, r22
    enableChip();
     af2:	ac df       	rcall	.-168    	; 0xa4c <_ZL10enableChipv>
    if (len != 0) {
     af4:	20 97       	sbiw	r28, 0x00	; 0
     af6:	99 f0       	breq	.+38     	; 0xb1e <_ZL7readBufjPh+0x38>
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     af8:	8a e3       	ldi	r24, 0x3A	; 58
     afa:	8e bd       	out	0x2e, r24	; 46
		asm volatile("nop");
     afc:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     afe:	0d b4       	in	r0, 0x2d	; 45
     b00:	07 fe       	sbrs	r0, 7
     b02:	fd cf       	rjmp	.-6      	; 0xafe <_ZL7readBufjPh+0x18>
     b04:	f8 01       	movw	r30, r16
     b06:	b8 01       	movw	r22, r16
     b08:	6c 0f       	add	r22, r28
     b0a:	7d 1f       	adc	r23, r29
	static void read(void *buf, uint16_t nbyte, uint8_t dataSend = 0){
		if(nbyte == 0) return;
		
		uint8_t* buff = (uint8_t*)buf;
		while(nbyte--){
			SPDR = dataSend;
     b0c:	1e bc       	out	0x2e, r1	; 46
			//asm volatile("nop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\n");
			while(!(SPSR & _BV(SPIF)));
     b0e:	0d b4       	in	r0, 0x2d	; 45
     b10:	07 fe       	sbrs	r0, 7
     b12:	fd cf       	rjmp	.-6      	; 0xb0e <_ZL7readBufjPh+0x28>
			*buff++ = SPDR;
     b14:	9e b5       	in	r25, 0x2e	; 46
     b16:	91 93       	st	Z+, r25
		
	static void read(void *buf, uint16_t nbyte, uint8_t dataSend = 0){
		if(nbyte == 0) return;
		
		uint8_t* buff = (uint8_t*)buf;
		while(nbyte--){
     b18:	6e 17       	cp	r22, r30
     b1a:	7f 07       	cpc	r23, r31
        SPI.write8(ENC28J60_READ_BUF_MEM);
		SPI.read(data, len);
    }
    disableChip();
     b1c:	b9 f7       	brne	.-18     	; 0xb0c <_ZL7readBufjPh+0x26>
     b1e:	a1 df       	rcall	.-190    	; 0xa62 <_ZL11disableChipv>
}
     b20:	df 91       	pop	r29
     b22:	cf 91       	pop	r28
     b24:	1f 91       	pop	r17
     b26:	0f 91       	pop	r16
     b28:	08 95       	ret

00000b2a <_ZL7SetBankh>:
        SPI.write(data, len);
    }
    disableChip();
}

static void SetBank (uint8_t address) {
     b2a:	1f 93       	push	r17
     b2c:	cf 93       	push	r28
     b2e:	df 93       	push	r29
     b30:	18 2f       	mov	r17, r24
     b32:	10 76       	andi	r17, 0x60	; 96
    if ((address & BANK_MASK) != Enc28j60Bank) {
     b34:	c1 2f       	mov	r28, r17
     b36:	d0 e0       	ldi	r29, 0x00	; 0
     b38:	80 91 c4 04 	lds	r24, 0x04C4	; 0x8004c4 <_ZL12Enc28j60Bank>
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	c8 17       	cp	r28, r24
     b40:	d9 07       	cpc	r29, r25
     b42:	a1 f0       	breq	.+40     	; 0xb6c <_ZL7SetBankh+0x42>
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_BSEL1|ECON1_BSEL0);
     b44:	43 e0       	ldi	r20, 0x03	; 3
     b46:	6f e1       	ldi	r22, 0x1F	; 31
     b48:	80 ea       	ldi	r24, 0xA0	; 160
     b4a:	b5 df       	rcall	.-150    	; 0xab6 <_ZL7writeOphhh>
        Enc28j60Bank = address & BANK_MASK;
     b4c:	10 93 c4 04 	sts	0x04C4, r17	; 0x8004c4 <_ZL12Enc28j60Bank>
        writeOp(ENC28J60_BIT_FIELD_SET, ECON1, Enc28j60Bank>>5);
     b50:	ae 01       	movw	r20, r28
     b52:	55 95       	asr	r21
     b54:	47 95       	ror	r20
     b56:	55 95       	asr	r21
     b58:	47 95       	ror	r20
     b5a:	55 95       	asr	r21
     b5c:	47 95       	ror	r20
     b5e:	55 95       	asr	r21
     b60:	47 95       	ror	r20
     b62:	55 95       	asr	r21
     b64:	47 95       	ror	r20
     b66:	6f e1       	ldi	r22, 0x1F	; 31
     b68:	80 e8       	ldi	r24, 0x80	; 128
     b6a:	a5 df       	rcall	.-182    	; 0xab6 <_ZL7writeOphhh>
    }
}
     b6c:	df 91       	pop	r29
     b6e:	cf 91       	pop	r28
     b70:	1f 91       	pop	r17
     b72:	08 95       	ret

00000b74 <_ZL11readRegByteh>:

static uint8_t readRegByte (uint8_t address) {
     b74:	cf 93       	push	r28
     b76:	c8 2f       	mov	r28, r24
    SetBank(address);
     b78:	d8 df       	rcall	.-80     	; 0xb2a <_ZL7SetBankh>
    return readOp(ENC28J60_READ_CTRL_REG, address);
     b7a:	6c 2f       	mov	r22, r28
     b7c:	80 e0       	ldi	r24, 0x00	; 0
     b7e:	7b df       	rcall	.-266    	; 0xa76 <_ZL6readOphh>
}
     b80:	cf 91       	pop	r28
     b82:	08 95       	ret

00000b84 <_ZL12writeRegBytehh>:

static void writeRegByte (uint8_t address, uint8_t data) {
     b84:	cf 93       	push	r28
     b86:	df 93       	push	r29
     b88:	c8 2f       	mov	r28, r24
     b8a:	d6 2f       	mov	r29, r22
    SetBank(address);
     b8c:	ce df       	rcall	.-100    	; 0xb2a <_ZL7SetBankh>
    writeOp(ENC28J60_WRITE_CTRL_REG, address, data);
     b8e:	4d 2f       	mov	r20, r29
     b90:	6c 2f       	mov	r22, r28
     b92:	80 e4       	ldi	r24, 0x40	; 64
     b94:	90 df       	rcall	.-224    	; 0xab6 <_ZL7writeOphhh>
}
     b96:	df 91       	pop	r29
     b98:	cf 91       	pop	r28
     b9a:	08 95       	ret

00000b9c <_ZL8writeReghj>:

static void writeReg(uint8_t address, uint16_t data) {
     b9c:	cf 93       	push	r28
     b9e:	df 93       	push	r29
     ba0:	c8 2f       	mov	r28, r24
     ba2:	d7 2f       	mov	r29, r23
    writeRegByte(address, data);
     ba4:	ef df       	rcall	.-34     	; 0xb84 <_ZL12writeRegBytehh>
    writeRegByte(address + 1, data >> 8);
     ba6:	6d 2f       	mov	r22, r29
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	8c 0f       	add	r24, r28
     bac:	eb df       	rcall	.-42     	; 0xb84 <_ZL12writeRegBytehh>
}
     bae:	df 91       	pop	r29
     bb0:	cf 91       	pop	r28
     bb2:	08 95       	ret

00000bb4 <_ZN8ENC28J607initSPIERVh>:
static void disableChip () {
	SetHigh(*selectPort, selectPin); //digitalWrite(selectPin, HIGH);
	//sei();
}

void ENC28J60::initSPI (Register& csDDR) {
     bb4:	fc 01       	movw	r30, r24

class SPI{
public:
	static void begin(uint8_t clock = SPI_CLOCK_DIV2){
		//SPI_DIR |= SS;
		DDR_SPI |= MASK_MOSI | MASK_SCK | MASK_SS; //Not sure why, but SS pin requires to be set as output even when not being used.
     bb6:	94 b1       	in	r25, 0x04	; 4
     bb8:	97 60       	ori	r25, 0x07	; 7
     bba:	94 b9       	out	0x04, r25	; 4
		DDR_SPI &= ~(MASK_MISO);
     bbc:	23 98       	cbi	0x04, 3	; 4
		//disableCS();

		SPSR |= (clock >> 2);
     bbe:	9d b5       	in	r25, 0x2d	; 45
     bc0:	91 60       	ori	r25, 0x01	; 1
     bc2:	9d bd       	out	0x2d, r25	; 45
		SPCR |= _BV(MSTR) | _BV(SPE) | (clock & 0x03);
     bc4:	9c b5       	in	r25, 0x2c	; 44
     bc6:	90 65       	ori	r25, 0x50	; 80
     bc8:	9c bd       	out	0x2c, r25	; 44
	SPI.begin(SPI_CLOCK_DIV2);

	SetOutput(csDDR, selectPin);
     bca:	80 81       	ld	r24, Z
     bcc:	90 91 c1 04 	lds	r25, 0x04C1	; 0x8004c1 <_ZL9selectPin>
     bd0:	98 2b       	or	r25, r24
     bd2:	90 83       	st	Z, r25
	disableChip();
     bd4:	46 cf       	rjmp	.-372    	; 0xa62 <_ZL11disableChipv>
     bd6:	08 95       	ret

00000bd8 <_ZN8ENC28J6010initializeEjPKhRVhS3_h>:
    writeReg(MIWR, data);
    while (readRegByte(MISTAT) & MISTAT_BUSY)
        ;
}

uint8_t ENC28J60::initialize (uint16_t size, const uint8_t* macaddr, Register& csDDR, Register& csPort, uint8_t csPin) {
     bd8:	0f 93       	push	r16
     bda:	cf 93       	push	r28
     bdc:	df 93       	push	r29
     bde:	eb 01       	movw	r28, r22
    bufferSize = size;
     be0:	90 93 c6 04 	sts	0x04C6, r25	; 0x8004c6 <_ZN8ENC28J6010bufferSizeE+0x1>
     be4:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <_ZN8ENC28J6010bufferSizeE>
	selectPin = csPin;
     be8:	00 93 c1 04 	sts	0x04C1, r16	; 0x8004c1 <_ZL9selectPin>
	selectPort = &csPort;
     bec:	30 93 c3 04 	sts	0x04C3, r19	; 0x8004c3 <_ZL10selectPort+0x1>
     bf0:	20 93 c2 04 	sts	0x04C2, r18	; 0x8004c2 <_ZL10selectPort>
    initSPI(csDDR);
     bf4:	ca 01       	movw	r24, r20
     bf6:	de df       	rcall	.-68     	; 0xbb4 <_ZN8ENC28J607initSPIERVh>

    writeOp(ENC28J60_SOFT_RESET, 0, ENC28J60_SOFT_RESET);
     bf8:	4f ef       	ldi	r20, 0xFF	; 255
     bfa:	60 e0       	ldi	r22, 0x00	; 0
     bfc:	8f ef       	ldi	r24, 0xFF	; 255
     bfe:	5b df       	rcall	.-330    	; 0xab6 <_ZL7writeOphhh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c00:	8f e3       	ldi	r24, 0x3F	; 63
     c02:	9f e1       	ldi	r25, 0x1F	; 31
     c04:	01 97       	sbiw	r24, 0x01	; 1
     c06:	f1 f7       	brne	.-4      	; 0xc04 <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0x2c>
     c08:	00 c0       	rjmp	.+0      	; 0xc0a <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0x32>
     c0a:	00 00       	nop
	_delay_ms(2);
    while (!readOp(ENC28J60_READ_CTRL_REG, ESTAT) & ESTAT_CLKRDY)
     c0c:	6d e1       	ldi	r22, 0x1D	; 29
     c0e:	80 e0       	ldi	r24, 0x00	; 0
     c10:	32 df       	rcall	.-412    	; 0xa76 <_ZL6readOphh>
     c12:	88 23       	and	r24, r24
     c14:	d9 f3       	breq	.-10     	; 0xc0c <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0x34>
        ;

    writeReg(ERXST, RXSTART_INIT);
     c16:	60 e0       	ldi	r22, 0x00	; 0
     c18:	70 e0       	ldi	r23, 0x00	; 0
     c1a:	88 e0       	ldi	r24, 0x08	; 8
     c1c:	bf df       	rcall	.-130    	; 0xb9c <_ZL8writeReghj>
    writeReg(ERXRDPT, RXSTART_INIT);
     c1e:	60 e0       	ldi	r22, 0x00	; 0
     c20:	70 e0       	ldi	r23, 0x00	; 0
     c22:	8c e0       	ldi	r24, 0x0C	; 12
     c24:	bb df       	rcall	.-138    	; 0xb9c <_ZL8writeReghj>
    writeReg(ERXND, RXSTOP_INIT);
     c26:	6f ef       	ldi	r22, 0xFF	; 255
     c28:	7b e0       	ldi	r23, 0x0B	; 11
     c2a:	8a e0       	ldi	r24, 0x0A	; 10
     c2c:	b7 df       	rcall	.-146    	; 0xb9c <_ZL8writeReghj>
    writeReg(ETXST, TXSTART_INIT);
     c2e:	60 e0       	ldi	r22, 0x00	; 0
     c30:	7c e0       	ldi	r23, 0x0C	; 12
     c32:	84 e0       	ldi	r24, 0x04	; 4
     c34:	b3 df       	rcall	.-154    	; 0xb9c <_ZL8writeReghj>
    writeReg(ETXND, TXSTOP_INIT);
     c36:	6f ef       	ldi	r22, 0xFF	; 255
     c38:	71 e1       	ldi	r23, 0x11	; 17
     c3a:	86 e0       	ldi	r24, 0x06	; 6
     c3c:	af df       	rcall	.-162    	; 0xb9c <_ZL8writeReghj>

    writeRegByte(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN|ERXFCON_PMEN|ERXFCON_BCEN);
     c3e:	61 eb       	ldi	r22, 0xB1	; 177
     c40:	88 e3       	ldi	r24, 0x38	; 56
     c42:	a0 df       	rcall	.-192    	; 0xb84 <_ZL12writeRegBytehh>
    writeReg(EPMM0, 0x303f);
     c44:	6f e3       	ldi	r22, 0x3F	; 63
     c46:	70 e3       	ldi	r23, 0x30	; 48
     c48:	88 e2       	ldi	r24, 0x28	; 40
     c4a:	a8 df       	rcall	.-176    	; 0xb9c <_ZL8writeReghj>
    writeReg(EPMCS, 0xf7f9);
     c4c:	69 ef       	ldi	r22, 0xF9	; 249
     c4e:	77 ef       	ldi	r23, 0xF7	; 247
     c50:	80 e3       	ldi	r24, 0x30	; 48
     c52:	a4 df       	rcall	.-184    	; 0xb9c <_ZL8writeReghj>
    writeRegByte(MACON1, MACON1_MARXEN);
     c54:	61 e0       	ldi	r22, 0x01	; 1
     c56:	80 ec       	ldi	r24, 0xC0	; 192
     c58:	95 df       	rcall	.-214    	; 0xb84 <_ZL12writeRegBytehh>
    writeOp(ENC28J60_BIT_FIELD_SET, MACON3,
            MACON3_PADCFG0|MACON3_TXCRCEN|MACON3_FRMLNEN);
     c5a:	42 e3       	ldi	r20, 0x32	; 50
     c5c:	62 ec       	ldi	r22, 0xC2	; 194
     c5e:	80 e8       	ldi	r24, 0x80	; 128
     c60:	2a df       	rcall	.-428    	; 0xab6 <_ZL7writeOphhh>
    writeReg(MAIPG, 0x0C12);
     c62:	62 e1       	ldi	r22, 0x12	; 18
     c64:	7c e0       	ldi	r23, 0x0C	; 12
     c66:	86 ec       	ldi	r24, 0xC6	; 198
    writeRegByte(MABBIPG, 0x12);
     c68:	99 df       	rcall	.-206    	; 0xb9c <_ZL8writeReghj>
     c6a:	62 e1       	ldi	r22, 0x12	; 18
     c6c:	84 ec       	ldi	r24, 0xC4	; 196
    writeReg(MAMXFL, MAX_FRAMELEN);
     c6e:	8a df       	rcall	.-236    	; 0xb84 <_ZL12writeRegBytehh>
     c70:	6c ed       	ldi	r22, 0xDC	; 220
     c72:	75 e0       	ldi	r23, 0x05	; 5
    writeRegByte(MAADR5, macaddr[0]);
     c74:	8a ec       	ldi	r24, 0xCA	; 202
     c76:	92 df       	rcall	.-220    	; 0xb9c <_ZL8writeReghj>
     c78:	68 81       	ld	r22, Y
    writeRegByte(MAADR4, macaddr[1]);
     c7a:	84 ee       	ldi	r24, 0xE4	; 228
     c7c:	83 df       	rcall	.-250    	; 0xb84 <_ZL12writeRegBytehh>
     c7e:	69 81       	ldd	r22, Y+1	; 0x01
    writeRegByte(MAADR3, macaddr[2]);
     c80:	85 ee       	ldi	r24, 0xE5	; 229
     c82:	80 df       	rcall	.-256    	; 0xb84 <_ZL12writeRegBytehh>
    writeRegByte(MAADR2, macaddr[3]);
     c84:	6a 81       	ldd	r22, Y+2	; 0x02
     c86:	82 ee       	ldi	r24, 0xE2	; 226
     c88:	7d df       	rcall	.-262    	; 0xb84 <_ZL12writeRegBytehh>
    writeRegByte(MAADR1, macaddr[4]);
     c8a:	6b 81       	ldd	r22, Y+3	; 0x03
     c8c:	83 ee       	ldi	r24, 0xE3	; 227
     c8e:	7a df       	rcall	.-268    	; 0xb84 <_ZL12writeRegBytehh>
    writeRegByte(MAADR0, macaddr[5]);
     c90:	6c 81       	ldd	r22, Y+4	; 0x04
     c92:	80 ee       	ldi	r24, 0xE0	; 224
     c94:	77 df       	rcall	.-274    	; 0xb84 <_ZL12writeRegBytehh>
    writeRegByte(MICMD, 0x00);
    return readRegByte(MIRD+1);
}

static void writePhy (uint8_t address, uint16_t data) {
    writeRegByte(MIREGADR, address);
     c96:	6d 81       	ldd	r22, Y+5	; 0x05
     c98:	81 ee       	ldi	r24, 0xE1	; 225
     c9a:	74 df       	rcall	.-280    	; 0xb84 <_ZL12writeRegBytehh>
    writeReg(MIWR, data);
     c9c:	60 e1       	ldi	r22, 0x10	; 16
     c9e:	84 ed       	ldi	r24, 0xD4	; 212
     ca0:	71 df       	rcall	.-286    	; 0xb84 <_ZL12writeRegBytehh>
     ca2:	60 e0       	ldi	r22, 0x00	; 0
     ca4:	71 e0       	ldi	r23, 0x01	; 1
    while (readRegByte(MISTAT) & MISTAT_BUSY)
     ca6:	86 ed       	ldi	r24, 0xD6	; 214
     ca8:	79 df       	rcall	.-270    	; 0xb9c <_ZL8writeReghj>
     caa:	8a ee       	ldi	r24, 0xEA	; 234
     cac:	63 df       	rcall	.-314    	; 0xb74 <_ZL11readRegByteh>
     cae:	80 fd       	sbrc	r24, 0
    writeRegByte(MAADR3, macaddr[2]);
    writeRegByte(MAADR2, macaddr[3]);
    writeRegByte(MAADR1, macaddr[4]);
    writeRegByte(MAADR0, macaddr[5]);
    writePhy(PHCON2, PHCON2_HDLDIS);
    SetBank(ECON1);
     cb0:	fc cf       	rjmp	.-8      	; 0xcaa <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0xd2>
     cb2:	8f e1       	ldi	r24, 0x1F	; 31
     cb4:	3a df       	rcall	.-396    	; 0xb2a <_ZL7SetBankh>
    writeOp(ENC28J60_BIT_FIELD_SET, EIE, EIE_INTIE|EIE_PKTIE);
     cb6:	40 ec       	ldi	r20, 0xC0	; 192
     cb8:	6b e1       	ldi	r22, 0x1B	; 27
     cba:	80 e8       	ldi	r24, 0x80	; 128
     cbc:	fc de       	rcall	.-520    	; 0xab6 <_ZL7writeOphhh>
     cbe:	44 e0       	ldi	r20, 0x04	; 4
    writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN);
     cc0:	6f e1       	ldi	r22, 0x1F	; 31
     cc2:	80 e8       	ldi	r24, 0x80	; 128
     cc4:	f8 de       	rcall	.-528    	; 0xab6 <_ZL7writeOphhh>
     cc6:	82 e7       	ldi	r24, 0x72	; 114
     cc8:	55 df       	rcall	.-342    	; 0xb74 <_ZL11readRegByteh>

    uint8_t rev = readRegByte(EREVID);
     cca:	86 30       	cpi	r24, 0x06	; 6
     ccc:	08 f0       	brcs	.+2      	; 0xcd0 <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0xf8>
     cce:	8f 5f       	subi	r24, 0xFF	; 255
    // microchip forgot to step the number on the silicon when they
    // released the revision B7. 6 is now rev B7. We still have
    // to see what they do when they release B8. At the moment
    // there is no B8 out yet
    if (rev > 5) ++rev;
     cd0:	df 91       	pop	r29
     cd2:	cf 91       	pop	r28
     cd4:	0f 91       	pop	r16
    return rev;
}
     cd6:	08 95       	ret

00000cd8 <_ZN8ENC28J608isLinkUpEv>:
     cd8:	61 e1       	ldi	r22, 0x11	; 17
     cda:	84 ed       	ldi	r24, 0xD4	; 212
     cdc:	53 df       	rcall	.-346    	; 0xb84 <_ZL12writeRegBytehh>
    writeRegByte(address + 1, data >> 8);
}

static uint16_t readPhyByte (uint8_t address) {
    writeRegByte(MIREGADR, address);
    writeRegByte(MICMD, MICMD_MIIRD);
     cde:	61 e0       	ldi	r22, 0x01	; 1
     ce0:	82 ed       	ldi	r24, 0xD2	; 210
     ce2:	50 df       	rcall	.-352    	; 0xb84 <_ZL12writeRegBytehh>
    while (readRegByte(MISTAT) & MISTAT_BUSY)
     ce4:	8a ee       	ldi	r24, 0xEA	; 234
     ce6:	46 df       	rcall	.-372    	; 0xb74 <_ZL11readRegByteh>
     ce8:	80 fd       	sbrc	r24, 0
     cea:	fc cf       	rjmp	.-8      	; 0xce4 <_ZN8ENC28J608isLinkUpEv+0xc>
        ;
    writeRegByte(MICMD, 0x00);
     cec:	60 e0       	ldi	r22, 0x00	; 0
     cee:	82 ed       	ldi	r24, 0xD2	; 210
     cf0:	49 df       	rcall	.-366    	; 0xb84 <_ZL12writeRegBytehh>
    return readRegByte(MIRD+1);
     cf2:	89 ed       	ldi	r24, 0xD9	; 217
     cf4:	3f df       	rcall	.-386    	; 0xb74 <_ZL11readRegByteh>
     cf6:	82 fb       	bst	r24, 2
    return rev;
}

bool ENC28J60::isLinkUp() {
    return (readPhyByte(PHSTAT2) >> 2) & 1;
}
     cf8:	88 27       	eor	r24, r24
     cfa:	80 f9       	bld	r24, 0
     cfc:	08 95       	ret

00000cfe <_ZN8ENC28J6010packetSendEj>:
     cfe:	af 92       	push	r10

struct transmit_status_vector {
    uint8_t bytes[7];
};

void ENC28J60::packetSend(uint16_t len) {
     d00:	bf 92       	push	r11
     d02:	cf 92       	push	r12
     d04:	df 92       	push	r13
     d06:	ef 92       	push	r14
     d08:	ff 92       	push	r15
     d0a:	0f 93       	push	r16
     d0c:	1f 93       	push	r17
     d0e:	cf 93       	push	r28
     d10:	df 93       	push	r29
     d12:	7c 01       	movw	r14, r24
        writeOp(ENC28J60_BIT_FIELD_CLR, EIR, EIR_TXERIF|EIR_TXIF);

        // prepare new transmission
        if (retry == 0) {
            writeReg(EWRPT, TXSTART_INIT);
            writeReg(ETXND, TXSTART_INIT+len);
     d14:	6c 01       	movw	r12, r24
     d16:	84 ef       	ldi	r24, 0xF4	; 244
     d18:	d8 1a       	sub	r13, r24

	static void write(const void *buf, uint16_t nbyte){
		if(nbyte == 0) return;
		
		const uint8_t* buff = (const uint8_t*)(buf);
		SPDR = *buff;
     d1a:	0f 2e       	mov	r0, r31
     d1c:	f7 ec       	ldi	r31, 0xC7	; 199
     d1e:	af 2e       	mov	r10, r31
     d20:	f4 e0       	ldi	r31, 0x04	; 4
     d22:	bf 2e       	mov	r11, r31
     d24:	f0 2d       	mov	r31, r0
     d26:	87 01       	movw	r16, r14
     d28:	09 53       	subi	r16, 0x39	; 57
     d2a:	1b 4f       	sbci	r17, 0xFB	; 251
        // the Microchip TCP/IP stack implementation used to first check
        // whether TXERIF is set and only then reset the transmit logic
        // but this has been changed in later versions; possibly they
        // have a reason for this; they don't mention this in the errata
        // sheet
        writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRST);
     d2c:	40 e8       	ldi	r20, 0x80	; 128
     d2e:	6f e1       	ldi	r22, 0x1F	; 31
     d30:	80 e8       	ldi	r24, 0x80	; 128
     d32:	c1 de       	rcall	.-638    	; 0xab6 <_ZL7writeOphhh>
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRST);
     d34:	40 e8       	ldi	r20, 0x80	; 128
     d36:	6f e1       	ldi	r22, 0x1F	; 31
     d38:	80 ea       	ldi	r24, 0xA0	; 160
     d3a:	bd de       	rcall	.-646    	; 0xab6 <_ZL7writeOphhh>
        writeOp(ENC28J60_BIT_FIELD_CLR, EIR, EIR_TXERIF|EIR_TXIF);
     d3c:	4a e0       	ldi	r20, 0x0A	; 10
     d3e:	6c e1       	ldi	r22, 0x1C	; 28
     d40:	80 ea       	ldi	r24, 0xA0	; 160
     d42:	b9 de       	rcall	.-654    	; 0xab6 <_ZL7writeOphhh>

        // prepare new transmission
        if (retry == 0) {
            writeReg(EWRPT, TXSTART_INIT);
     d44:	60 e0       	ldi	r22, 0x00	; 0
     d46:	7c e0       	ldi	r23, 0x0C	; 12
     d48:	82 e0       	ldi	r24, 0x02	; 2
            writeReg(ETXND, TXSTART_INIT+len);
     d4a:	28 df       	rcall	.-432    	; 0xb9c <_ZL8writeReghj>
     d4c:	b6 01       	movw	r22, r12
     d4e:	86 e0       	ldi	r24, 0x06	; 6
            writeOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
     d50:	25 df       	rcall	.-438    	; 0xb9c <_ZL8writeReghj>
     d52:	40 e0       	ldi	r20, 0x00	; 0
     d54:	60 e0       	ldi	r22, 0x00	; 0
     d56:	8a e7       	ldi	r24, 0x7A	; 122
     d58:	ae de       	rcall	.-676    	; 0xab6 <_ZL7writeOphhh>
    }
    disableChip();
}

static void writeBuf(uint16_t len, const uint8_t* data) {
    enableChip();
     d5a:	78 de       	rcall	.-784    	; 0xa4c <_ZL10enableChipv>
     d5c:	e1 14       	cp	r14, r1
    if (len != 0) {
     d5e:	f1 04       	cpc	r15, r1
     d60:	e1 f0       	breq	.+56     	; 0xd9a <_ZN8ENC28J6010packetSendEj+0x9c>
     d62:	8a e7       	ldi	r24, 0x7A	; 122
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     d64:	8e bd       	out	0x2e, r24	; 46
     d66:	00 00       	nop
		asm volatile("nop");
     d68:	0d b4       	in	r0, 0x2d	; 45
		while(!(SPSR & _BV(SPIF)));
     d6a:	07 fe       	sbrs	r0, 7
     d6c:	fd cf       	rjmp	.-6      	; 0xd68 <_ZN8ENC28J6010packetSendEj+0x6a>
     d6e:	f5 01       	movw	r30, r10

	static void write(const void *buf, uint16_t nbyte){
		if(nbyte == 0) return;
		
		const uint8_t* buff = (const uint8_t*)(buf);
		SPDR = *buff;
     d70:	80 81       	ld	r24, Z
     d72:	8e bd       	out	0x2e, r24	; 46
     d74:	f1 e0       	ldi	r31, 0x01	; 1
		while(--nbyte){
     d76:	ef 16       	cp	r14, r31
     d78:	f1 04       	cpc	r15, r1
     d7a:	59 f0       	breq	.+22     	; 0xd92 <_ZN8ENC28J6010packetSendEj+0x94>
     d7c:	e8 ec       	ldi	r30, 0xC8	; 200
     d7e:	f4 e0       	ldi	r31, 0x04	; 4
     d80:	00 00       	nop
			asm volatile("nop");
     d82:	0d b4       	in	r0, 0x2d	; 45
			while (!(SPSR & _BV(SPIF))) ;
     d84:	07 fe       	sbrs	r0, 7
     d86:	fd cf       	rjmp	.-6      	; 0xd82 <_ZN8ENC28J6010packetSendEj+0x84>
     d88:	81 91       	ld	r24, Z+
			SPDR = *++buff;
     d8a:	8e bd       	out	0x2e, r24	; 46
     d8c:	e0 17       	cp	r30, r16
	static void write(const void *buf, uint16_t nbyte){
		if(nbyte == 0) return;
		
		const uint8_t* buff = (const uint8_t*)(buf);
		SPDR = *buff;
		while(--nbyte){
     d8e:	f1 07       	cpc	r31, r17
     d90:	b9 f7       	brne	.-18     	; 0xd80 <_ZN8ENC28J6010packetSendEj+0x82>
			asm volatile("nop");
			while (!(SPSR & _BV(SPIF))) ;
			SPDR = *++buff;
		}
		asm volatile("nop");
     d92:	00 00       	nop
		while (!(SPSR & _BV(SPIF))) ;
     d94:	0d b4       	in	r0, 0x2d	; 45
     d96:	07 fe       	sbrs	r0, 7
        SPI.write8(ENC28J60_WRITE_BUF_MEM);

        SPI.write(data, len);
    }
    disableChip();
     d98:	fd cf       	rjmp	.-6      	; 0xd94 <_ZN8ENC28J6010packetSendEj+0x96>
            writeOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
            writeBuf(len, buffer);
        }

        // initiate transmission
        writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
     d9a:	63 de       	rcall	.-826    	; 0xa62 <_ZL11disableChipv>
     d9c:	48 e0       	ldi	r20, 0x08	; 8
     d9e:	6f e1       	ldi	r22, 0x1F	; 31
     da0:	80 e8       	ldi	r24, 0x80	; 128
     da2:	89 de       	rcall	.-750    	; 0xab6 <_ZL7writeOphhh>
        // wait until transmission has finished; referring to the data sheet and
        // to the errata (Errata Issue 13; Example 1) you only need to wait until either
        // TXIF or TXERIF gets set; however this leads to hangs; apparently Microchip
        // realized this and in later implementations of their tcp/ip stack they introduced
        // a counter to avoid hangs; of course they didn't update the errata sheet
        uint16_t count = 0;
     da4:	c0 e0       	ldi	r28, 0x00	; 0
     da6:	d0 e0       	ldi	r29, 0x00	; 0
        while ((readRegByte(EIR) & (EIR_TXIF | EIR_TXERIF)) == 0 && ++count < 1000U)
     da8:	8c e1       	ldi	r24, 0x1C	; 28
     daa:	e4 de       	rcall	.-568    	; 0xb74 <_ZL11readRegByteh>
     dac:	8a 70       	andi	r24, 0x0A	; 10
     dae:	31 f4       	brne	.+12     	; 0xdbc <_ZN8ENC28J6010packetSendEj+0xbe>
     db0:	21 96       	adiw	r28, 0x01	; 1
     db2:	c8 3e       	cpi	r28, 0xE8	; 232
     db4:	83 e0       	ldi	r24, 0x03	; 3
     db6:	d8 07       	cpc	r29, r24
     db8:	b9 f7       	brne	.-18     	; 0xda8 <_ZN8ENC28J6010packetSendEj+0xaa>
     dba:	0c c0       	rjmp	.+24     	; 0xdd4 <_ZN8ENC28J6010packetSendEj+0xd6>
            ;

        if (!(readRegByte(EIR) & EIR_TXERIF) && count < 1000U) {
     dbc:	8c e1       	ldi	r24, 0x1C	; 28
     dbe:	da de       	rcall	.-588    	; 0xb74 <_ZL11readRegByteh>
     dc0:	81 fd       	sbrc	r24, 1
     dc2:	03 c0       	rjmp	.+6      	; 0xdca <_ZN8ENC28J6010packetSendEj+0xcc>
     dc4:	c8 3e       	cpi	r28, 0xE8	; 232
     dc6:	d3 40       	sbci	r29, 0x03	; 3
            // no error; start new transmission
            break;
        }

        // cancel previous transmission if stuck
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRTS);
     dc8:	40 f0       	brcs	.+16     	; 0xdda <_ZN8ENC28J6010packetSendEj+0xdc>
     dca:	48 e0       	ldi	r20, 0x08	; 8
     dcc:	6f e1       	ldi	r22, 0x1F	; 31
     dce:	80 ea       	ldi	r24, 0xA0	; 160
     dd0:	72 de       	rcall	.-796    	; 0xab6 <_ZL7writeOphhh>
};

void ENC28J60::packetSend(uint16_t len) {
    uint8_t retry = 0;

    while (1) {
     dd2:	ac cf       	rjmp	.-168    	; 0xd2c <_ZN8ENC28J6010packetSendEj+0x2e>
        // a counter to avoid hangs; of course they didn't update the errata sheet
        uint16_t count = 0;
        while ((readRegByte(EIR) & (EIR_TXIF | EIR_TXERIF)) == 0 && ++count < 1000U)
            ;

        if (!(readRegByte(EIR) & EIR_TXERIF) && count < 1000U) {
     dd4:	8c e1       	ldi	r24, 0x1C	; 28
     dd6:	ce de       	rcall	.-612    	; 0xb74 <_ZL11readRegByteh>
     dd8:	f8 cf       	rjmp	.-16     	; 0xdca <_ZN8ENC28J6010packetSendEj+0xcc>
     dda:	df 91       	pop	r29
        }

        // cancel previous transmission if stuck
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRTS);
    }
}
     ddc:	cf 91       	pop	r28
     dde:	1f 91       	pop	r17
     de0:	0f 91       	pop	r16
     de2:	ff 90       	pop	r15
     de4:	ef 90       	pop	r14
     de6:	df 90       	pop	r13
     de8:	cf 90       	pop	r12
     dea:	bf 90       	pop	r11
     dec:	af 90       	pop	r10
     dee:	08 95       	ret

00000df0 <_ZN8ENC28J6013packetReceiveEv>:
     df0:	0f 93       	push	r16


uint16_t ENC28J60::packetReceive() {
     df2:	1f 93       	push	r17
     df4:	cf 93       	push	r28
     df6:	df 93       	push	r29
     df8:	00 d0       	rcall	.+0      	; 0xdfa <_ZN8ENC28J6013packetReceiveEv+0xa>
     dfa:	00 d0       	rcall	.+0      	; 0xdfc <_ZN8ENC28J6013packetReceiveEv+0xc>
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
    static uint16_t gNextPacketPtr = RXSTART_INIT;
    static bool     unreleasedPacket = false;
    uint16_t len = 0;

    if (unreleasedPacket) {
     e00:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <_ZZN8ENC28J6013packetReceiveEvE16unreleasedPacket>
     e04:	88 23       	and	r24, r24
     e06:	91 f0       	breq	.+36     	; 0xe2c <_ZN8ENC28J6013packetReceiveEv+0x3c>
        if (gNextPacketPtr == 0)
     e08:	60 91 be 04 	lds	r22, 0x04BE	; 0x8004be <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr>
     e0c:	70 91 bf 04 	lds	r23, 0x04BF	; 0x8004bf <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr+0x1>
     e10:	61 15       	cp	r22, r1
     e12:	71 05       	cpc	r23, r1
     e14:	29 f4       	brne	.+10     	; 0xe20 <_ZN8ENC28J6013packetReceiveEv+0x30>
            writeReg(ERXRDPT, RXSTOP_INIT);
     e16:	6f ef       	ldi	r22, 0xFF	; 255
     e18:	7b e0       	ldi	r23, 0x0B	; 11
     e1a:	8c e0       	ldi	r24, 0x0C	; 12
     e1c:	bf de       	rcall	.-642    	; 0xb9c <_ZL8writeReghj>
     e1e:	04 c0       	rjmp	.+8      	; 0xe28 <_ZN8ENC28J6013packetReceiveEv+0x38>
        else
            writeReg(ERXRDPT, gNextPacketPtr - 1);
     e20:	61 50       	subi	r22, 0x01	; 1
     e22:	71 09       	sbc	r23, r1
     e24:	8c e0       	ldi	r24, 0x0C	; 12
     e26:	ba de       	rcall	.-652    	; 0xb9c <_ZL8writeReghj>
        unreleasedPacket = false;
     e28:	10 92 c0 04 	sts	0x04C0, r1	; 0x8004c0 <_ZZN8ENC28J6013packetReceiveEvE16unreleasedPacket>
    }

    if (readRegByte(EPKTCNT) > 0) {
     e2c:	89 e3       	ldi	r24, 0x39	; 57
     e2e:	a2 de       	rcall	.-700    	; 0xb74 <_ZL11readRegByteh>
     e30:	88 23       	and	r24, r24
     e32:	a9 f1       	breq	.+106    	; 0xe9e <_ZN8ENC28J6013packetReceiveEv+0xae>
        writeReg(ERDPT, gNextPacketPtr);
     e34:	60 91 be 04 	lds	r22, 0x04BE	; 0x8004be <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr>
     e38:	70 91 bf 04 	lds	r23, 0x04BF	; 0x8004bf <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr+0x1>
     e3c:	80 e0       	ldi	r24, 0x00	; 0
     e3e:	ae de       	rcall	.-676    	; 0xb9c <_ZL8writeReghj>
            uint16_t nextPacket;
            uint16_t byteCount;
            uint16_t status;
        } header;

        readBuf(sizeof header, (uint8_t*) &header);
     e40:	be 01       	movw	r22, r28
     e42:	6f 5f       	subi	r22, 0xFF	; 255
     e44:	7f 4f       	sbci	r23, 0xFF	; 255
     e46:	86 e0       	ldi	r24, 0x06	; 6
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	4d de       	rcall	.-870    	; 0xae6 <_ZL7readBufjPh>

        gNextPacketPtr  = header.nextPacket;
     e4c:	89 81       	ldd	r24, Y+1	; 0x01
     e4e:	9a 81       	ldd	r25, Y+2	; 0x02
     e50:	90 93 bf 04 	sts	0x04BF, r25	; 0x8004bf <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr+0x1>
     e54:	80 93 be 04 	sts	0x04BE, r24	; 0x8004be <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr>
        len = header.byteCount - 4; //remove the CRC count
        if (len>bufferSize-1)
            len=bufferSize-1;
        if ((header.status & 0x80)==0)
     e58:	8d 81       	ldd	r24, Y+5	; 0x05
     e5a:	87 ff       	sbrs	r24, 7
     e5c:	12 c0       	rjmp	.+36     	; 0xe82 <_ZN8ENC28J6013packetReceiveEv+0x92>

        readBuf(sizeof header, (uint8_t*) &header);

        gNextPacketPtr  = header.nextPacket;
        len = header.byteCount - 4; //remove the CRC count
        if (len>bufferSize-1)
     e5e:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <_ZN8ENC28J6010bufferSizeE>
     e62:	90 91 c6 04 	lds	r25, 0x04C6	; 0x8004c6 <_ZN8ENC28J6010bufferSizeE+0x1>
     e66:	01 97       	sbiw	r24, 0x01	; 1
        } header;

        readBuf(sizeof header, (uint8_t*) &header);

        gNextPacketPtr  = header.nextPacket;
        len = header.byteCount - 4; //remove the CRC count
     e68:	0b 81       	ldd	r16, Y+3	; 0x03
     e6a:	1c 81       	ldd	r17, Y+4	; 0x04
     e6c:	04 50       	subi	r16, 0x04	; 4
     e6e:	11 09       	sbc	r17, r1
     e70:	80 17       	cp	r24, r16
     e72:	91 07       	cpc	r25, r17
     e74:	08 f4       	brcc	.+2      	; 0xe78 <_ZN8ENC28J6013packetReceiveEv+0x88>
        if (len>bufferSize-1)
            len=bufferSize-1;
        if ((header.status & 0x80)==0)
            len = 0;
        else
            readBuf(len, buffer);
     e76:	8c 01       	movw	r16, r24
     e78:	67 ec       	ldi	r22, 0xC7	; 199
     e7a:	74 e0       	ldi	r23, 0x04	; 4
     e7c:	c8 01       	movw	r24, r16
     e7e:	33 de       	rcall	.-922    	; 0xae6 <_ZL7readBufjPh>
     e80:	02 c0       	rjmp	.+4      	; 0xe86 <_ZN8ENC28J6013packetReceiveEv+0x96>
        gNextPacketPtr  = header.nextPacket;
        len = header.byteCount - 4; //remove the CRC count
        if (len>bufferSize-1)
            len=bufferSize-1;
        if ((header.status & 0x80)==0)
            len = 0;
     e82:	00 e0       	ldi	r16, 0x00	; 0
     e84:	10 e0       	ldi	r17, 0x00	; 0
        else
            readBuf(len, buffer);
        buffer[len] = 0;
     e86:	f8 01       	movw	r30, r16
     e88:	e9 53       	subi	r30, 0x39	; 57
     e8a:	fb 4f       	sbci	r31, 0xFB	; 251
     e8c:	10 82       	st	Z, r1
        unreleasedPacket = true;
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	80 93 c0 04 	sts	0x04C0, r24	; 0x8004c0 <_ZZN8ENC28J6013packetReceiveEvE16unreleasedPacket>

        writeOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
     e94:	40 e4       	ldi	r20, 0x40	; 64
     e96:	6e e1       	ldi	r22, 0x1E	; 30
     e98:	80 e8       	ldi	r24, 0x80	; 128
     e9a:	0d de       	rcall	.-998    	; 0xab6 <_ZL7writeOphhh>
     e9c:	02 c0       	rjmp	.+4      	; 0xea2 <_ZN8ENC28J6013packetReceiveEv+0xb2>


uint16_t ENC28J60::packetReceive() {
    static uint16_t gNextPacketPtr = RXSTART_INIT;
    static bool     unreleasedPacket = false;
    uint16_t len = 0;
     e9e:	00 e0       	ldi	r16, 0x00	; 0
     ea0:	10 e0       	ldi	r17, 0x00	; 0
        unreleasedPacket = true;

        writeOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
    }
    return len;
}
     ea2:	c8 01       	movw	r24, r16
     ea4:	26 96       	adiw	r28, 0x06	; 6
     ea6:	0f b6       	in	r0, 0x3f	; 63
     ea8:	f8 94       	cli
     eaa:	de bf       	out	0x3e, r29	; 62
     eac:	0f be       	out	0x3f, r0	; 63
     eae:	cd bf       	out	0x3d, r28	; 61
     eb0:	df 91       	pop	r29
     eb2:	cf 91       	pop	r28
     eb4:	1f 91       	pop	r17
     eb6:	0f 91       	pop	r16
     eb8:	08 95       	ret

00000eba <_ZN9EtherCard5beginEPKhRVhS3_h>:
uint16_t EtherCard::delaycnt = 0; //request gateway ARP lookup

uint8_t Ethernet::buffer[ETHER_CARD_BUFFER_SIZE]; // tcp/ip send and receive buffer

uint8_t EtherCard::begin (const uint8_t* macaddr,
                          Register& csDDR, Register& csPort, uint8_t csPin) {
     eba:	ef 92       	push	r14
     ebc:	ff 92       	push	r15
     ebe:	0f 93       	push	r16
     ec0:	cf 93       	push	r28
     ec2:	df 93       	push	r29
     ec4:	eb 01       	movw	r28, r22
     ec6:	7a 01       	movw	r14, r20
     ec8:	02 2f       	mov	r16, r18

    copyMac(mymac, macaddr);
     eca:	bc 01       	movw	r22, r24
     ecc:	81 ee       	ldi	r24, 0xE1	; 225
     ece:	96 e0       	ldi	r25, 0x06	; 6
     ed0:	c9 d3       	rcall	.+1938   	; 0x1664 <_ZN9EtherCard7copyMacEPhPKh>
    return initialize(ETHER_CARD_BUFFER_SIZE, mymac, csDDR, csPort, csPin);
     ed2:	97 01       	movw	r18, r14
     ed4:	ae 01       	movw	r20, r28
     ed6:	61 ee       	ldi	r22, 0xE1	; 225
     ed8:	76 e0       	ldi	r23, 0x06	; 6
     eda:	80 e0       	ldi	r24, 0x00	; 0
     edc:	92 e0       	ldi	r25, 0x02	; 2
     ede:	7c de       	rcall	.-776    	; 0xbd8 <_ZN8ENC28J6010initializeEjPKhRVhS3_h>
}
     ee0:	df 91       	pop	r29
     ee2:	cf 91       	pop	r28
     ee4:	0f 91       	pop	r16
     ee6:	ff 90       	pop	r15
     ee8:	ef 90       	pop	r14
     eea:	08 95       	ret

00000eec <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_>:

bool EtherCard::staticSetup (const uint8_t* my_ip,
                             const uint8_t* gw_ip,
                             const uint8_t* dns_ip,
                             const uint8_t* mask) {
     eec:	ef 92       	push	r14
     eee:	ff 92       	push	r15
     ef0:	0f 93       	push	r16
     ef2:	1f 93       	push	r17
     ef4:	cf 93       	push	r28
     ef6:	df 93       	push	r29
     ef8:	7b 01       	movw	r14, r22
     efa:	8a 01       	movw	r16, r20
     efc:	e9 01       	movw	r28, r18

    if (my_ip != 0)
     efe:	00 97       	sbiw	r24, 0x00	; 0
     f00:	21 f0       	breq	.+8      	; 0xf0a <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x1e>
        copyIp(myip, my_ip);
     f02:	bc 01       	movw	r22, r24
     f04:	8d ed       	ldi	r24, 0xDD	; 221
     f06:	96 e0       	ldi	r25, 0x06	; 6
     f08:	a0 d3       	rcall	.+1856   	; 0x164a <_ZN9EtherCard6copyIpEPhPKh>
    if (gw_ip != 0)
     f0a:	e1 14       	cp	r14, r1
     f0c:	f1 04       	cpc	r15, r1
     f0e:	11 f0       	breq	.+4      	; 0xf14 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x28>
        setGwIp(gw_ip);
     f10:	c7 01       	movw	r24, r14
     f12:	bd d1       	rcall	.+890    	; 0x128e <_ZN9EtherCard7setGwIpEPKh>
    if (dns_ip != 0)
     f14:	01 15       	cp	r16, r1
     f16:	11 05       	cpc	r17, r1
     f18:	21 f0       	breq	.+8      	; 0xf22 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x36>
        copyIp(dnsip, dns_ip);
     f1a:	b8 01       	movw	r22, r16
     f1c:	8d ec       	ldi	r24, 0xCD	; 205
     f1e:	96 e0       	ldi	r25, 0x06	; 6
     f20:	94 d3       	rcall	.+1832   	; 0x164a <_ZN9EtherCard6copyIpEPhPKh>
    if(mask != 0)
     f22:	20 97       	sbiw	r28, 0x00	; 0
     f24:	21 f0       	breq	.+8      	; 0xf2e <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x42>
        copyIp(netmask, mask);
     f26:	be 01       	movw	r22, r28
     f28:	89 ed       	ldi	r24, 0xD9	; 217
     f2a:	96 e0       	ldi	r25, 0x06	; 6
    updateBroadcastAddress();
     f2c:	8e d3       	rcall	.+1820   	; 0x164a <_ZN9EtherCard6copyIpEPhPKh>
     f2e:	bb d1       	rcall	.+886    	; 0x12a6 <_ZN9EtherCard22updateBroadcastAddressEv>
    delaycnt = 0; //request gateway ARP lookup
     f30:	10 92 c8 06 	sts	0x06C8, r1	; 0x8006c8 <_ZN9EtherCard8delaycntE+0x1>
     f34:	10 92 c7 06 	sts	0x06C7, r1	; 0x8006c7 <_ZN9EtherCard8delaycntE>
    return true;
}
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	df 91       	pop	r29
     f3c:	cf 91       	pop	r28
     f3e:	1f 91       	pop	r17
     f40:	0f 91       	pop	r16
     f42:	ff 90       	pop	r15
     f44:	ef 90       	pop	r14
     f46:	08 95       	ret

00000f48 <_ZL13fill_checksumhhjh>:
    for(uint8_t i=0; i<IP_LEN; i++)
        broadcastip[i] = myip[i] | ~netmask[i];
}

void EtherCard::registerPingCallback (void (*callback)(uint8_t *srcip)) {
    icmp_cb = callback;
     f48:	cf 92       	push	r12
     f4a:	df 92       	push	r13
     f4c:	ef 92       	push	r14
     f4e:	ff 92       	push	r15
     f50:	cf 93       	push	r28
     f52:	df 93       	push	r29
     f54:	c6 2f       	mov	r28, r22
     f56:	d0 e0       	ldi	r29, 0x00	; 0
     f58:	c9 53       	subi	r28, 0x39	; 57
     f5a:	db 4f       	sbci	r29, 0xFB	; 251
     f5c:	21 30       	cpi	r18, 0x01	; 1
     f5e:	81 f4       	brne	.+32     	; 0xf80 <_ZL13fill_checksumhhjh+0x38>
     f60:	6a 01       	movw	r12, r20
     f62:	99 e0       	ldi	r25, 0x09	; 9
     f64:	c9 0e       	add	r12, r25
     f66:	d1 1c       	adc	r13, r1
     f68:	e1 2c       	mov	r14, r1
     f6a:	f1 2c       	mov	r15, r1
     f6c:	03 c0       	rjmp	.+6      	; 0xf74 <_ZL13fill_checksumhhjh+0x2c>
     f6e:	c1 2c       	mov	r12, r1
     f70:	d1 2c       	mov	r13, r1
     f72:	76 01       	movw	r14, r12
     f74:	42 30       	cpi	r20, 0x02	; 2
     f76:	51 05       	cpc	r21, r1
     f78:	28 f1       	brcs	.+74     	; 0xfc4 <_ZL13fill_checksumhhjh+0x7c>
     f7a:	fe 01       	movw	r30, r28
     f7c:	da 01       	movw	r26, r20
     f7e:	09 c0       	rjmp	.+18     	; 0xf92 <_ZL13fill_checksumhhjh+0x4a>
     f80:	22 30       	cpi	r18, 0x02	; 2
     f82:	a9 f7       	brne	.-22     	; 0xf6e <_ZL13fill_checksumhhjh+0x26>
     f84:	6a 01       	movw	r12, r20
     f86:	92 e0       	ldi	r25, 0x02	; 2
     f88:	c9 1a       	sub	r12, r25
     f8a:	d1 08       	sbc	r13, r1
     f8c:	e1 2c       	mov	r14, r1
     f8e:	f1 2c       	mov	r15, r1
     f90:	f1 cf       	rjmp	.-30     	; 0xf74 <_ZL13fill_checksumhhjh+0x2c>
     f92:	20 81       	ld	r18, Z
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	32 2f       	mov	r19, r18
     f98:	22 27       	eor	r18, r18
     f9a:	91 81       	ldd	r25, Z+1	; 0x01
     f9c:	29 2b       	or	r18, r25
     f9e:	c2 0e       	add	r12, r18
     fa0:	d3 1e       	adc	r13, r19
     fa2:	e1 1c       	adc	r14, r1
     fa4:	f1 1c       	adc	r15, r1
     fa6:	32 96       	adiw	r30, 0x02	; 2
     fa8:	12 97       	sbiw	r26, 0x02	; 2
     faa:	a2 30       	cpi	r26, 0x02	; 2
     fac:	b1 05       	cpc	r27, r1
     fae:	88 f7       	brcc	.-30     	; 0xf92 <_ZL13fill_checksumhhjh+0x4a>
     fb0:	9a 01       	movw	r18, r20
     fb2:	22 50       	subi	r18, 0x02	; 2
     fb4:	31 09       	sbc	r19, r1
     fb6:	2e 7f       	andi	r18, 0xFE	; 254
     fb8:	2e 5f       	subi	r18, 0xFE	; 254
     fba:	3f 4f       	sbci	r19, 0xFF	; 255
     fbc:	c2 0f       	add	r28, r18
     fbe:	d3 1f       	adc	r29, r19
     fc0:	41 70       	andi	r20, 0x01	; 1
     fc2:	55 27       	eor	r21, r21
     fc4:	45 2b       	or	r20, r21
     fc6:	61 f0       	breq	.+24     	; 0xfe0 <_ZL13fill_checksumhhjh+0x98>
     fc8:	48 81       	ld	r20, Y
     fca:	50 e0       	ldi	r21, 0x00	; 0
     fcc:	60 e0       	ldi	r22, 0x00	; 0
     fce:	70 e0       	ldi	r23, 0x00	; 0
     fd0:	76 2f       	mov	r23, r22
     fd2:	65 2f       	mov	r22, r21
     fd4:	54 2f       	mov	r21, r20
     fd6:	44 27       	eor	r20, r20
     fd8:	c4 0e       	add	r12, r20
     fda:	d5 1e       	adc	r13, r21
     fdc:	e6 1e       	adc	r14, r22
     fde:	f7 1e       	adc	r15, r23
     fe0:	a7 01       	movw	r20, r14
     fe2:	66 27       	eor	r22, r22
     fe4:	77 27       	eor	r23, r23
     fe6:	41 15       	cp	r20, r1
     fe8:	51 05       	cpc	r21, r1
     fea:	61 05       	cpc	r22, r1
     fec:	71 05       	cpc	r23, r1
     fee:	71 f0       	breq	.+28     	; 0x100c <_ZL13fill_checksumhhjh+0xc4>
     ff0:	ee 24       	eor	r14, r14
     ff2:	ff 24       	eor	r15, r15
     ff4:	c4 0e       	add	r12, r20
     ff6:	d5 1e       	adc	r13, r21
     ff8:	e6 1e       	adc	r14, r22
     ffa:	f7 1e       	adc	r15, r23
     ffc:	a7 01       	movw	r20, r14
     ffe:	66 27       	eor	r22, r22
    1000:	77 27       	eor	r23, r23
    1002:	41 15       	cp	r20, r1
    1004:	51 05       	cpc	r21, r1
    1006:	61 05       	cpc	r22, r1
    1008:	71 05       	cpc	r23, r1
    100a:	91 f7       	brne	.-28     	; 0xff0 <_ZL13fill_checksumhhjh+0xa8>
    100c:	c0 94       	com	r12
    100e:	d0 94       	com	r13
    1010:	e8 2f       	mov	r30, r24
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	e9 53       	subi	r30, 0x39	; 57
    1016:	fb 4f       	sbci	r31, 0xFB	; 251
    1018:	d0 82       	st	Z, r13
    101a:	c1 82       	std	Z+1, r12	; 0x01
    101c:	df 91       	pop	r29
    101e:	cf 91       	pop	r28
    1020:	ff 90       	pop	r15
    1022:	ef 90       	pop	r14
    1024:	df 90       	pop	r13
    1026:	cf 90       	pop	r12
    1028:	08 95       	ret

0000102a <_ZL6is_lanPKhS0_>:
    102a:	cf 93       	push	r28
    102c:	df 93       	push	r29
    102e:	fc 01       	movw	r30, r24
    1030:	20 81       	ld	r18, Z
    1032:	22 23       	and	r18, r18
    1034:	d1 f0       	breq	.+52     	; 0x106a <_ZL6is_lanPKhS0_+0x40>
    1036:	fb 01       	movw	r30, r22
    1038:	30 81       	ld	r19, Z
    103a:	33 23       	and	r19, r19
    103c:	c1 f0       	breq	.+48     	; 0x106e <_ZL6is_lanPKhS0_+0x44>
    103e:	23 27       	eor	r18, r19
    1040:	30 91 d9 06 	lds	r19, 0x06D9	; 0x8006d9 <_ZN9EtherCard7netmaskE>
    1044:	23 23       	and	r18, r19
    1046:	a9 f4       	brne	.+42     	; 0x1072 <_ZL6is_lanPKhS0_+0x48>
    1048:	dc 01       	movw	r26, r24
    104a:	11 96       	adiw	r26, 0x01	; 1
    104c:	31 96       	adiw	r30, 0x01	; 1
    104e:	ca ed       	ldi	r28, 0xDA	; 218
    1050:	d6 e0       	ldi	r29, 0x06	; 6
    1052:	04 96       	adiw	r24, 0x04	; 4
    1054:	4d 91       	ld	r20, X+
    1056:	21 91       	ld	r18, Z+
    1058:	39 91       	ld	r19, Y+
    105a:	24 27       	eor	r18, r20
    105c:	23 23       	and	r18, r19
    105e:	59 f4       	brne	.+22     	; 0x1076 <_ZL6is_lanPKhS0_+0x4c>
    1060:	a8 17       	cp	r26, r24
    1062:	b9 07       	cpc	r27, r25
    1064:	b9 f7       	brne	.-18     	; 0x1054 <_ZL6is_lanPKhS0_+0x2a>
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	07 c0       	rjmp	.+14     	; 0x1078 <_ZL6is_lanPKhS0_+0x4e>
    106a:	80 e0       	ldi	r24, 0x00	; 0
    106c:	05 c0       	rjmp	.+10     	; 0x1078 <_ZL6is_lanPKhS0_+0x4e>
    106e:	80 e0       	ldi	r24, 0x00	; 0
    1070:	03 c0       	rjmp	.+6      	; 0x1078 <_ZL6is_lanPKhS0_+0x4e>
    1072:	80 e0       	ldi	r24, 0x00	; 0
    1074:	01 c0       	rjmp	.+2      	; 0x1078 <_ZL6is_lanPKhS0_+0x4e>
    1076:	80 e0       	ldi	r24, 0x00	; 0
    1078:	df 91       	pop	r29
    107a:	cf 91       	pop	r28
    107c:	08 95       	ret

0000107e <_ZL20fill_ip_hdr_checksumv>:
    107e:	e7 ec       	ldi	r30, 0xC7	; 199
    1080:	f4 e0       	ldi	r31, 0x04	; 4
    1082:	10 8e       	std	Z+24, r1	; 0x18
    1084:	11 8e       	std	Z+25, r1	; 0x19
    1086:	80 e4       	ldi	r24, 0x40	; 64
    1088:	84 8b       	std	Z+20, r24	; 0x14
    108a:	15 8a       	std	Z+21, r1	; 0x15
    108c:	86 8b       	std	Z+22, r24	; 0x16
    108e:	20 e0       	ldi	r18, 0x00	; 0
    1090:	44 e1       	ldi	r20, 0x14	; 20
    1092:	50 e0       	ldi	r21, 0x00	; 0
    1094:	6e e0       	ldi	r22, 0x0E	; 14
    1096:	88 e1       	ldi	r24, 0x18	; 24
    1098:	57 cf       	rjmp	.-338    	; 0xf48 <_ZL13fill_checksumhhjh>
    109a:	08 95       	ret

0000109c <_ZL7setMACsPKh>:
    109c:	bc 01       	movw	r22, r24
    109e:	87 ec       	ldi	r24, 0xC7	; 199
    10a0:	94 e0       	ldi	r25, 0x04	; 4
    10a2:	e0 d2       	rcall	.+1472   	; 0x1664 <_ZN9EtherCard7copyMacEPhPKh>
    10a4:	61 ee       	ldi	r22, 0xE1	; 225
    10a6:	76 e0       	ldi	r23, 0x06	; 6
    10a8:	8d ec       	ldi	r24, 0xCD	; 205
    10aa:	94 e0       	ldi	r25, 0x04	; 4
    10ac:	db c2       	rjmp	.+1462   	; 0x1664 <_ZN9EtherCard7copyMacEPhPKh>
    10ae:	08 95       	ret

000010b0 <_ZL11make_eth_ipv>:
    10b0:	8d ec       	ldi	r24, 0xCD	; 205
    10b2:	94 e0       	ldi	r25, 0x04	; 4
    10b4:	f3 df       	rcall	.-26     	; 0x109c <_ZL7setMACsPKh>
    10b6:	61 ee       	ldi	r22, 0xE1	; 225
    10b8:	74 e0       	ldi	r23, 0x04	; 4
    10ba:	85 ee       	ldi	r24, 0xE5	; 229
    10bc:	94 e0       	ldi	r25, 0x04	; 4
    10be:	c5 d2       	rcall	.+1418   	; 0x164a <_ZN9EtherCard6copyIpEPhPKh>
    10c0:	6d ed       	ldi	r22, 0xDD	; 221
    10c2:	76 e0       	ldi	r23, 0x06	; 6
    10c4:	81 ee       	ldi	r24, 0xE1	; 225
    10c6:	94 e0       	ldi	r25, 0x04	; 4
    10c8:	c0 d2       	rcall	.+1408   	; 0x164a <_ZN9EtherCard6copyIpEPhPKh>
    10ca:	d9 cf       	rjmp	.-78     	; 0x107e <_ZL20fill_ip_hdr_checksumv>
    10cc:	08 95       	ret

000010ce <_ZL12setMACandIPsPKhS0_>:
    10ce:	cf 93       	push	r28
    10d0:	df 93       	push	r29
    10d2:	eb 01       	movw	r28, r22
    10d4:	e3 df       	rcall	.-58     	; 0x109c <_ZL7setMACsPKh>
    10d6:	be 01       	movw	r22, r28
    10d8:	85 ee       	ldi	r24, 0xE5	; 229
    10da:	94 e0       	ldi	r25, 0x04	; 4
    10dc:	b6 d2       	rcall	.+1388   	; 0x164a <_ZN9EtherCard6copyIpEPhPKh>
    10de:	6d ed       	ldi	r22, 0xDD	; 221
    10e0:	76 e0       	ldi	r23, 0x06	; 6
    10e2:	81 ee       	ldi	r24, 0xE1	; 225
    10e4:	94 e0       	ldi	r25, 0x04	; 4
    10e6:	b1 d2       	rcall	.+1378   	; 0x164a <_ZN9EtherCard6copyIpEPhPKh>
    10e8:	df 91       	pop	r29
    10ea:	cf 91       	pop	r28
    10ec:	08 95       	ret

000010ee <_ZL16client_store_macPhS_>:
    10ee:	cf 93       	push	r28
    10f0:	df 93       	push	r29
    10f2:	eb 01       	movw	r28, r22
    10f4:	44 e0       	ldi	r20, 0x04	; 4
    10f6:	50 e0       	ldi	r21, 0x00	; 0
    10f8:	bc 01       	movw	r22, r24
    10fa:	83 ee       	ldi	r24, 0xE3	; 227
    10fc:	94 e0       	ldi	r25, 0x04	; 4
    10fe:	0e 94 09 28 	call	0x5012	; 0x5012 <memcmp>
    1102:	89 2b       	or	r24, r25
    1104:	31 f4       	brne	.+12     	; 0x1112 <_ZL16client_store_macPhS_+0x24>
    1106:	6d ed       	ldi	r22, 0xDD	; 221
    1108:	74 e0       	ldi	r23, 0x04	; 4
    110a:	ce 01       	movw	r24, r28
    110c:	ab d2       	rcall	.+1366   	; 0x1664 <_ZN9EtherCard7copyMacEPhPKh>
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	01 c0       	rjmp	.+2      	; 0x1114 <_ZL16client_store_macPhS_+0x26>
    1112:	80 e0       	ldi	r24, 0x00	; 0
    1114:	df 91       	pop	r29
    1116:	cf 91       	pop	r28
    1118:	08 95       	ret

0000111a <_ZL17client_arp_whohasPh>:
    111a:	0f 93       	push	r16
    111c:	1f 93       	push	r17
    111e:	cf 93       	push	r28
    1120:	8c 01       	movw	r16, r24
    1122:	85 e2       	ldi	r24, 0x25	; 37
    1124:	92 e0       	ldi	r25, 0x02	; 2
    1126:	ba df       	rcall	.-140    	; 0x109c <_ZL7setMACsPKh>
    1128:	e7 ec       	ldi	r30, 0xC7	; 199
    112a:	f4 e0       	ldi	r31, 0x04	; 4
    112c:	88 e0       	ldi	r24, 0x08	; 8
    112e:	84 87       	std	Z+12, r24	; 0x0c
    1130:	c6 e0       	ldi	r28, 0x06	; 6
    1132:	c5 87       	std	Z+13, r28	; 0x0d
    1134:	48 e0       	ldi	r20, 0x08	; 8
    1136:	50 e0       	ldi	r21, 0x00	; 0
    1138:	6f e7       	ldi	r22, 0x7F	; 127
    113a:	72 e0       	ldi	r23, 0x02	; 2
    113c:	85 ed       	ldi	r24, 0xD5	; 213
    113e:	94 e0       	ldi	r25, 0x04	; 4
    1140:	0e 94 00 28 	call	0x5000	; 0x5000 <memcpy_P>
    1144:	e7 ee       	ldi	r30, 0xE7	; 231
    1146:	f4 e0       	ldi	r31, 0x04	; 4
    1148:	df 01       	movw	r26, r30
    114a:	1d 92       	st	X+, r1
    114c:	ca 95       	dec	r28
    114e:	e9 f7       	brne	.-6      	; 0x114a <_ZL17client_arp_whohasPh+0x30>
    1150:	61 ee       	ldi	r22, 0xE1	; 225
    1152:	76 e0       	ldi	r23, 0x06	; 6
    1154:	8d ed       	ldi	r24, 0xDD	; 221
    1156:	94 e0       	ldi	r25, 0x04	; 4
    1158:	85 d2       	rcall	.+1290   	; 0x1664 <_ZN9EtherCard7copyMacEPhPKh>
    115a:	b8 01       	movw	r22, r16
    115c:	8d ee       	ldi	r24, 0xED	; 237
    115e:	94 e0       	ldi	r25, 0x04	; 4
    1160:	74 d2       	rcall	.+1256   	; 0x164a <_ZN9EtherCard6copyIpEPhPKh>
    1162:	6d ed       	ldi	r22, 0xDD	; 221
    1164:	76 e0       	ldi	r23, 0x06	; 6
    1166:	83 ee       	ldi	r24, 0xE3	; 227
    1168:	94 e0       	ldi	r25, 0x04	; 4
    116a:	6f d2       	rcall	.+1246   	; 0x164a <_ZN9EtherCard6copyIpEPhPKh>
    116c:	8a e2       	ldi	r24, 0x2A	; 42
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	c6 dd       	rcall	.-1140   	; 0xcfe <_ZN8ENC28J6010packetSendEj>
    1172:	cf 91       	pop	r28
    1174:	1f 91       	pop	r17
    1176:	0f 91       	pop	r16
    1178:	08 95       	ret

0000117a <_ZN9EtherCard10udpPrepareEjPKhj>:
    117a:	ef 92       	push	r14
    117c:	ff 92       	push	r15
    117e:	0f 93       	push	r16
    1180:	1f 93       	push	r17
    1182:	cf 93       	push	r28
    1184:	df 93       	push	r29
    1186:	18 2f       	mov	r17, r24
    1188:	09 2f       	mov	r16, r25
    118a:	eb 01       	movw	r28, r22
    118c:	f4 2e       	mov	r15, r20
    118e:	e5 2e       	mov	r14, r21
    1190:	8d ed       	ldi	r24, 0xDD	; 221
    1192:	96 e0       	ldi	r25, 0x06	; 6
    1194:	4a df       	rcall	.-364    	; 0x102a <_ZL6is_lanPKhS0_>
    1196:	88 23       	and	r24, r24
    1198:	29 f0       	breq	.+10     	; 0x11a4 <_ZN9EtherCard10udpPrepareEjPKhj+0x2a>
    119a:	be 01       	movw	r22, r28
    119c:	82 ef       	ldi	r24, 0xF2	; 242
    119e:	96 e0       	ldi	r25, 0x06	; 6
    11a0:	96 df       	rcall	.-212    	; 0x10ce <_ZL12setMACandIPsPKhS0_>
    11a2:	04 c0       	rjmp	.+8      	; 0x11ac <_ZN9EtherCard10udpPrepareEjPKhj+0x32>
    11a4:	be 01       	movw	r22, r28
    11a6:	88 ee       	ldi	r24, 0xE8	; 232
    11a8:	96 e0       	ldi	r25, 0x06	; 6
    11aa:	91 df       	rcall	.-222    	; 0x10ce <_ZL12setMACandIPsPKhS0_>
    11ac:	88 81       	ld	r24, Y
    11ae:	80 7f       	andi	r24, 0xF0	; 240
    11b0:	80 3e       	cpi	r24, 0xE0	; 224
    11b2:	91 f0       	breq	.+36     	; 0x11d8 <_ZN9EtherCard10udpPrepareEjPKhj+0x5e>
    11b4:	88 81       	ld	r24, Y
    11b6:	99 81       	ldd	r25, Y+1	; 0x01
    11b8:	aa 81       	ldd	r26, Y+2	; 0x02
    11ba:	bb 81       	ldd	r27, Y+3	; 0x03
    11bc:	8f 3f       	cpi	r24, 0xFF	; 255
    11be:	9f 4f       	sbci	r25, 0xFF	; 255
    11c0:	af 4f       	sbci	r26, 0xFF	; 255
    11c2:	bf 4f       	sbci	r27, 0xFF	; 255
    11c4:	49 f0       	breq	.+18     	; 0x11d8 <_ZN9EtherCard10udpPrepareEjPKhj+0x5e>
    11c6:	44 e0       	ldi	r20, 0x04	; 4
    11c8:	50 e0       	ldi	r21, 0x00	; 0
    11ca:	be 01       	movw	r22, r28
    11cc:	85 ed       	ldi	r24, 0xD5	; 213
    11ce:	96 e0       	ldi	r25, 0x06	; 6
    11d0:	0e 94 09 28 	call	0x5012	; 0x5012 <memcmp>
    11d4:	89 2b       	or	r24, r25
    11d6:	29 f4       	brne	.+10     	; 0x11e2 <_ZN9EtherCard10udpPrepareEjPKhj+0x68>
    11d8:	65 e2       	ldi	r22, 0x25	; 37
    11da:	72 e0       	ldi	r23, 0x02	; 2
    11dc:	87 ec       	ldi	r24, 0xC7	; 199
    11de:	94 e0       	ldi	r25, 0x04	; 4
    11e0:	41 d2       	rcall	.+1154   	; 0x1664 <_ZN9EtherCard7copyMacEPhPKh>
    11e2:	c7 ec       	ldi	r28, 0xC7	; 199
    11e4:	d4 e0       	ldi	r29, 0x04	; 4
    11e6:	88 e0       	ldi	r24, 0x08	; 8
    11e8:	8c 87       	std	Y+12, r24	; 0x0c
    11ea:	1d 86       	std	Y+13, r1	; 0x0d
    11ec:	49 e0       	ldi	r20, 0x09	; 9
    11ee:	50 e0       	ldi	r21, 0x00	; 0
    11f0:	66 e7       	ldi	r22, 0x76	; 118
    11f2:	72 e0       	ldi	r23, 0x02	; 2
    11f4:	85 ed       	ldi	r24, 0xD5	; 213
    11f6:	94 e0       	ldi	r25, 0x04	; 4
    11f8:	0e 94 00 28 	call	0x5000	; 0x5000 <memcpy_P>
    11fc:	18 8a       	std	Y+16, r1	; 0x10
    11fe:	81 e1       	ldi	r24, 0x11	; 17
    1200:	8f 8b       	std	Y+23, r24	; 0x17
    1202:	ec a2       	std	Y+36, r14	; 0x24
    1204:	fd a2       	std	Y+37, r15	; 0x25
    1206:	0a a3       	std	Y+34, r16	; 0x22
    1208:	1b a3       	std	Y+35, r17	; 0x23
    120a:	1e a2       	std	Y+38, r1	; 0x26
    120c:	18 a6       	std	Y+40, r1	; 0x28
    120e:	19 a6       	std	Y+41, r1	; 0x29
    1210:	df 91       	pop	r29
    1212:	cf 91       	pop	r28
    1214:	1f 91       	pop	r17
    1216:	0f 91       	pop	r16
    1218:	ff 90       	pop	r15
    121a:	ef 90       	pop	r14
    121c:	08 95       	ret

0000121e <_ZN9EtherCard11udpTransmitEj>:
    121e:	0f 93       	push	r16
    1220:	1f 93       	push	r17
    1222:	cf 93       	push	r28
    1224:	df 93       	push	r29
    1226:	ec 01       	movw	r28, r24
    1228:	07 ec       	ldi	r16, 0xC7	; 199
    122a:	14 e0       	ldi	r17, 0x04	; 4
    122c:	4c 96       	adiw	r24, 0x1c	; 28
    122e:	f8 01       	movw	r30, r16
    1230:	90 8b       	std	Z+16, r25	; 0x10
    1232:	81 8b       	std	Z+17, r24	; 0x11
    1234:	24 df       	rcall	.-440    	; 0x107e <_ZL20fill_ip_hdr_checksumv>
    1236:	ce 01       	movw	r24, r28
    1238:	08 96       	adiw	r24, 0x08	; 8
    123a:	f8 01       	movw	r30, r16
    123c:	96 a3       	std	Z+38, r25	; 0x26
    123e:	87 a3       	std	Z+39, r24	; 0x27
    1240:	ae 01       	movw	r20, r28
    1242:	40 5f       	subi	r20, 0xF0	; 240
    1244:	5f 4f       	sbci	r21, 0xFF	; 255
    1246:	21 e0       	ldi	r18, 0x01	; 1
    1248:	6a e1       	ldi	r22, 0x1A	; 26
    124a:	88 e2       	ldi	r24, 0x28	; 40
    124c:	7d de       	rcall	.-774    	; 0xf48 <_ZL13fill_checksumhhjh>
    124e:	ce 01       	movw	r24, r28
    1250:	8a 96       	adiw	r24, 0x2a	; 42
    1252:	55 dd       	rcall	.-1366   	; 0xcfe <_ZN8ENC28J6010packetSendEj>
    1254:	df 91       	pop	r29
    1256:	cf 91       	pop	r28
    1258:	1f 91       	pop	r17
    125a:	0f 91       	pop	r16
    125c:	08 95       	ret

0000125e <_ZN9EtherCard7sendUdpEPKhjjS1_j>:
    125e:	0f 93       	push	r16
    1260:	1f 93       	push	r17
    1262:	cf 93       	push	r28
    1264:	df 93       	push	r29
    1266:	d6 2f       	mov	r29, r22
    1268:	c7 2f       	mov	r28, r23
    126a:	ca 01       	movw	r24, r20
    126c:	a8 01       	movw	r20, r16
    126e:	b9 01       	movw	r22, r18
    1270:	84 df       	rcall	.-248    	; 0x117a <_ZN9EtherCard10udpPrepareEjPKhj>
    1272:	8d 2f       	mov	r24, r29
    1274:	9c 2f       	mov	r25, r28
    1276:	81 30       	cpi	r24, 0x01	; 1
    1278:	22 e0       	ldi	r18, 0x02	; 2
    127a:	92 07       	cpc	r25, r18
    127c:	10 f0       	brcs	.+4      	; 0x1282 <_ZN9EtherCard7sendUdpEPKhjjS1_j+0x24>
    127e:	80 e0       	ldi	r24, 0x00	; 0
    1280:	92 e0       	ldi	r25, 0x02	; 2
    1282:	cd df       	rcall	.-102    	; 0x121e <_ZN9EtherCard11udpTransmitEj>
    1284:	df 91       	pop	r29
    1286:	cf 91       	pop	r28
    1288:	1f 91       	pop	r17
    128a:	0f 91       	pop	r16
    128c:	08 95       	ret

0000128e <_ZN9EtherCard7setGwIpEPKh>:
    128e:	10 92 c8 06 	sts	0x06C8, r1	; 0x8006c8 <_ZN9EtherCard8delaycntE+0x1>
    1292:	10 92 c7 06 	sts	0x06C7, r1	; 0x8006c7 <_ZN9EtherCard8delaycntE>
    1296:	21 e0       	ldi	r18, 0x01	; 1
    1298:	20 93 e7 06 	sts	0x06E7, r18	; 0x8006e7 <_ZL9waitgwmac>
    129c:	bc 01       	movw	r22, r24
    129e:	81 ed       	ldi	r24, 0xD1	; 209
    12a0:	96 e0       	ldi	r25, 0x06	; 6
    12a2:	d3 c1       	rjmp	.+934    	; 0x164a <_ZN9EtherCard6copyIpEPhPKh>
    12a4:	08 95       	ret

000012a6 <_ZN9EtherCard22updateBroadcastAddressEv>:
    12a6:	cf 93       	push	r28
    12a8:	df 93       	push	r29
    12aa:	ed ed       	ldi	r30, 0xDD	; 221
    12ac:	f6 e0       	ldi	r31, 0x06	; 6
    12ae:	c9 ed       	ldi	r28, 0xD9	; 217
    12b0:	d6 e0       	ldi	r29, 0x06	; 6
    12b2:	a5 ed       	ldi	r26, 0xD5	; 213
    12b4:	b6 e0       	ldi	r27, 0x06	; 6
    12b6:	21 ee       	ldi	r18, 0xE1	; 225
    12b8:	36 e0       	ldi	r19, 0x06	; 6
    12ba:	91 91       	ld	r25, Z+
    12bc:	89 91       	ld	r24, Y+
    12be:	80 95       	com	r24
    12c0:	89 2b       	or	r24, r25
    12c2:	8d 93       	st	X+, r24
    12c4:	e2 17       	cp	r30, r18
    12c6:	f3 07       	cpc	r31, r19
    12c8:	c1 f7       	brne	.-16     	; 0x12ba <_ZN9EtherCard22updateBroadcastAddressEv+0x14>
    12ca:	df 91       	pop	r29
    12cc:	cf 91       	pop	r28
    12ce:	08 95       	ret

000012d0 <_ZN9EtherCard10packetLoopEj>:
	gPB[ICMP_CHECKSUM_P+1]++;
	gPB[ICMP_CHECKSUM_P] += 0x08;
	EtherCard::packetSend(len);
}

uint16_t EtherCard::packetLoop (uint16_t plen) {
    12d0:	cf 93       	push	r28
    12d2:	df 93       	push	r29
    12d4:	ec 01       	movw	r28, r24
    if (plen==0) {
    12d6:	00 97       	sbiw	r24, 0x00	; 0
    12d8:	09 f0       	breq	.+2      	; 0x12dc <_ZN9EtherCard10packetLoopEj+0xc>
    12da:	3f c0       	rjmp	.+126    	; 0x135a <_ZN9EtherCard10packetLoopEj+0x8a>
        //Check every 65536 (no-packet) cycles whether we need to retry ARP request for gateway
        if ((waitgwmac & WGW_INITIAL_ARP || waitgwmac & WGW_REFRESHING) &&
    12dc:	80 91 e7 06 	lds	r24, 0x06E7	; 0x8006e7 <_ZL9waitgwmac>
    12e0:	85 70       	andi	r24, 0x05	; 5
    12e2:	89 f0       	breq	.+34     	; 0x1306 <_ZN9EtherCard10packetLoopEj+0x36>
    12e4:	80 91 c7 06 	lds	r24, 0x06C7	; 0x8006c7 <_ZN9EtherCard8delaycntE>
    12e8:	90 91 c8 06 	lds	r25, 0x06C8	; 0x8006c8 <_ZN9EtherCard8delaycntE+0x1>
    12ec:	89 2b       	or	r24, r25
    12ee:	59 f4       	brne	.+22     	; 0x1306 <_ZN9EtherCard10packetLoopEj+0x36>
                delaycnt==0 && isLinkUp()) {
    12f0:	f3 dc       	rcall	.-1562   	; 0xcd8 <_ZN8ENC28J608isLinkUpEv>
}

uint16_t EtherCard::packetLoop (uint16_t plen) {
    if (plen==0) {
        //Check every 65536 (no-packet) cycles whether we need to retry ARP request for gateway
        if ((waitgwmac & WGW_INITIAL_ARP || waitgwmac & WGW_REFRESHING) &&
    12f2:	88 23       	and	r24, r24
    12f4:	41 f0       	breq	.+16     	; 0x1306 <_ZN9EtherCard10packetLoopEj+0x36>
                delaycnt==0 && isLinkUp()) {
            client_arp_whohas(gwip);
    12f6:	81 ed       	ldi	r24, 0xD1	; 209
    12f8:	96 e0       	ldi	r25, 0x06	; 6
    12fa:	0f df       	rcall	.-482    	; 0x111a <_ZL17client_arp_whohasPh>
            waitgwmac |= WGW_ACCEPT_ARP_REPLY;
    12fc:	80 91 e7 06 	lds	r24, 0x06E7	; 0x8006e7 <_ZL9waitgwmac>
    1300:	88 60       	ori	r24, 0x08	; 8
    1302:	80 93 e7 06 	sts	0x06E7, r24	; 0x8006e7 <_ZL9waitgwmac>
        }
        delaycnt++;
    1306:	80 91 c7 06 	lds	r24, 0x06C7	; 0x8006c7 <_ZN9EtherCard8delaycntE>
    130a:	90 91 c8 06 	lds	r25, 0x06C8	; 0x8006c8 <_ZN9EtherCard8delaycntE+0x1>
    130e:	01 96       	adiw	r24, 0x01	; 1
    1310:	90 93 c8 06 	sts	0x06C8, r25	; 0x8006c8 <_ZN9EtherCard8delaycntE+0x1>
    1314:	80 93 c7 06 	sts	0x06C7, r24	; 0x8006c7 <_ZN9EtherCard8delaycntE>

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, dnsip) && !has_dns_mac && !waiting_for_dns_mac) {
    1318:	6d ec       	ldi	r22, 0xCD	; 205
    131a:	76 e0       	ldi	r23, 0x06	; 6
    131c:	8d ed       	ldi	r24, 0xDD	; 221
    131e:	96 e0       	ldi	r25, 0x06	; 6
    1320:	84 de       	rcall	.-760    	; 0x102a <_ZL6is_lanPKhS0_>
    1322:	88 23       	and	r24, r24
    1324:	49 f0       	breq	.+18     	; 0x1338 <_ZN9EtherCard10packetLoopEj+0x68>
    1326:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <_ZL11has_dns_mac>
    132a:	81 11       	cpse	r24, r1
    132c:	05 c0       	rjmp	.+10     	; 0x1338 <_ZN9EtherCard10packetLoopEj+0x68>
    132e:	80 91 f1 06 	lds	r24, 0x06F1	; 0x8006f1 <_ZL19waiting_for_dns_mac>
    1332:	88 23       	and	r24, r24
    1334:	09 f4       	brne	.+2      	; 0x1338 <_ZN9EtherCard10packetLoopEj+0x68>
    1336:	dc c0       	rjmp	.+440    	; 0x14f0 <_ZN9EtherCard10packetLoopEj+0x220>
            client_arp_whohas(dnsip);
            waiting_for_dns_mac = true;
        }

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, hisip) && !has_dest_mac && !waiting_for_dest_mac) {
    1338:	69 ec       	ldi	r22, 0xC9	; 201
    133a:	76 e0       	ldi	r23, 0x06	; 6
    133c:	8d ed       	ldi	r24, 0xDD	; 221
    133e:	96 e0       	ldi	r25, 0x06	; 6
    1340:	74 de       	rcall	.-792    	; 0x102a <_ZL6is_lanPKhS0_>
    1342:	88 23       	and	r24, r24
    1344:	09 f4       	brne	.+2      	; 0x1348 <_ZN9EtherCard10packetLoopEj+0x78>
    1346:	f8 c0       	rjmp	.+496    	; 0x1538 <_ZN9EtherCard10packetLoopEj+0x268>
    1348:	80 91 ee 06 	lds	r24, 0x06EE	; 0x8006ee <_ZL12has_dest_mac>
    134c:	81 11       	cpse	r24, r1
    134e:	f4 c0       	rjmp	.+488    	; 0x1538 <_ZN9EtherCard10packetLoopEj+0x268>
    1350:	80 91 ef 06 	lds	r24, 0x06EF	; 0x8006ef <_ZL20waiting_for_dest_mac>
    1354:	81 11       	cpse	r24, r1
    1356:	f0 c0       	rjmp	.+480    	; 0x1538 <_ZN9EtherCard10packetLoopEj+0x268>
    1358:	d2 c0       	rjmp	.+420    	; 0x14fe <_ZN9EtherCard10packetLoopEj+0x22e>
    return true;
}

static uint8_t eth_type_is_arp_and_my_ip(uint16_t len) {
    return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
    135a:	89 32       	cpi	r24, 0x29	; 41
    135c:	91 05       	cpc	r25, r1
    135e:	08 f4       	brcc	.+2      	; 0x1362 <_ZN9EtherCard10packetLoopEj+0x92>
    1360:	d5 c0       	rjmp	.+426    	; 0x150c <_ZN9EtherCard10packetLoopEj+0x23c>
        }
    return true;
}

static uint8_t eth_type_is_arp_and_my_ip(uint16_t len) {
    return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
    1362:	80 91 d3 04 	lds	r24, 0x04D3	; 0x8004d3 <_ZN8ENC28J606bufferE+0xc>
    1366:	88 30       	cpi	r24, 0x08	; 8
    1368:	09 f0       	breq	.+2      	; 0x136c <_ZN9EtherCard10packetLoopEj+0x9c>
    136a:	e6 c0       	rjmp	.+460    	; 0x1538 <_ZN9EtherCard10packetLoopEj+0x268>
    136c:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <_ZN8ENC28J606bufferE+0xd>
    1370:	86 30       	cpi	r24, 0x06	; 6
    1372:	09 f0       	breq	.+2      	; 0x1376 <_ZN9EtherCard10packetLoopEj+0xa6>
    1374:	dd c0       	rjmp	.+442    	; 0x1530 <_ZN9EtherCard10packetLoopEj+0x260>
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
           memcmp(gPB + ETH_ARP_DST_IP_P, EtherCard::myip, IP_LEN) == 0;
    1376:	44 e0       	ldi	r20, 0x04	; 4
    1378:	50 e0       	ldi	r21, 0x00	; 0
    137a:	6d ed       	ldi	r22, 0xDD	; 221
    137c:	76 e0       	ldi	r23, 0x06	; 6
    137e:	8d ee       	ldi	r24, 0xED	; 237
    1380:	94 e0       	ldi	r25, 0x04	; 4
    1382:	0e 94 09 28 	call	0x5012	; 0x5012 <memcmp>
    return true;
}

static uint8_t eth_type_is_arp_and_my_ip(uint16_t len) {
    return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
    1386:	89 2b       	or	r24, r25
    1388:	09 f0       	breq	.+2      	; 0x138c <_ZN9EtherCard10packetLoopEj+0xbc>
    138a:	d2 c0       	rjmp	.+420    	; 0x1530 <_ZN9EtherCard10packetLoopEj+0x260>
    EtherCard::copyIp(gPB + IP_SRC_P, EtherCard::myip);
    fill_ip_hdr_checksum();
}

static void make_arp_answer_from_request() {
    setMACs(gPB + ETH_SRC_MAC);
    138c:	c3 c0       	rjmp	.+390    	; 0x1514 <_ZN9EtherCard10packetLoopEj+0x244>
    138e:	8d ec       	ldi	r24, 0xCD	; 205
    1390:	94 e0       	ldi	r25, 0x04	; 4
    1392:	84 de       	rcall	.-760    	; 0x109c <_ZL7setMACsPKh>
    gPB[ETH_ARP_OPCODE_H_P] = ETH_ARP_OPCODE_REPLY_H_V;
    1394:	e7 ec       	ldi	r30, 0xC7	; 199
    1396:	f4 e0       	ldi	r31, 0x04	; 4
    1398:	14 8a       	std	Z+20, r1	; 0x14
    gPB[ETH_ARP_OPCODE_L_P] = ETH_ARP_OPCODE_REPLY_L_V;
    139a:	82 e0       	ldi	r24, 0x02	; 2
    EtherCard::copyMac(gPB + ETH_ARP_DST_MAC_P, gPB + ETH_ARP_SRC_MAC_P);
    139c:	85 8b       	std	Z+21, r24	; 0x15
    139e:	6d ed       	ldi	r22, 0xDD	; 221
    13a0:	74 e0       	ldi	r23, 0x04	; 4
    13a2:	87 ee       	ldi	r24, 0xE7	; 231
    13a4:	94 e0       	ldi	r25, 0x04	; 4
    EtherCard::copyMac(gPB + ETH_ARP_SRC_MAC_P, EtherCard::mymac);
    13a6:	5e d1       	rcall	.+700    	; 0x1664 <_ZN9EtherCard7copyMacEPhPKh>
    13a8:	61 ee       	ldi	r22, 0xE1	; 225
    13aa:	76 e0       	ldi	r23, 0x06	; 6
    13ac:	8d ed       	ldi	r24, 0xDD	; 221
    13ae:	94 e0       	ldi	r25, 0x04	; 4
    EtherCard::copyIp(gPB + ETH_ARP_DST_IP_P, gPB + ETH_ARP_SRC_IP_P);
    13b0:	59 d1       	rcall	.+690    	; 0x1664 <_ZN9EtherCard7copyMacEPhPKh>
    13b2:	63 ee       	ldi	r22, 0xE3	; 227
    13b4:	74 e0       	ldi	r23, 0x04	; 4
    13b6:	8d ee       	ldi	r24, 0xED	; 237
    13b8:	94 e0       	ldi	r25, 0x04	; 4
    EtherCard::copyIp(gPB + ETH_ARP_SRC_IP_P, EtherCard::myip);
    13ba:	47 d1       	rcall	.+654    	; 0x164a <_ZN9EtherCard6copyIpEPhPKh>
    13bc:	6d ed       	ldi	r22, 0xDD	; 221
    13be:	76 e0       	ldi	r23, 0x06	; 6
    13c0:	83 ee       	ldi	r24, 0xE3	; 227
    13c2:	94 e0       	ldi	r25, 0x04	; 4
    13c4:	42 d1       	rcall	.+644    	; 0x164a <_ZN9EtherCard6copyIpEPhPKh>
    EtherCard::packetSend(42);
    13c6:	8a e2       	ldi	r24, 0x2A	; 42
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	99 dc       	rcall	.-1742   	; 0xcfe <_ZN8ENC28J6010packetSendEj>
    13cc:	80 91 e7 06 	lds	r24, 0x06E7	; 0x8006e7 <_ZL9waitgwmac>

    if (eth_type_is_arp_and_my_ip(plen))
    {   //Service ARP request
        if (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REQ_L_V)
            make_arp_answer_from_request();
        if (waitgwmac & WGW_ACCEPT_ARP_REPLY && (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REPLY_L_V) && client_store_mac(gwip, gwmacaddr))
    13d0:	83 ff       	sbrs	r24, 3
    13d2:	0e c0       	rjmp	.+28     	; 0x13f0 <_ZN9EtherCard10packetLoopEj+0x120>
    13d4:	80 91 dc 04 	lds	r24, 0x04DC	; 0x8004dc <_ZN8ENC28J606bufferE+0x15>
    13d8:	82 30       	cpi	r24, 0x02	; 2
    13da:	51 f4       	brne	.+20     	; 0x13f0 <_ZN9EtherCard10packetLoopEj+0x120>
    13dc:	68 ee       	ldi	r22, 0xE8	; 232
    13de:	76 e0       	ldi	r23, 0x06	; 6
    13e0:	81 ed       	ldi	r24, 0xD1	; 209
    13e2:	96 e0       	ldi	r25, 0x06	; 6
    13e4:	84 de       	rcall	.-760    	; 0x10ee <_ZL16client_store_macPhS_>
    13e6:	88 23       	and	r24, r24
    13e8:	19 f0       	breq	.+6      	; 0x13f0 <_ZN9EtherCard10packetLoopEj+0x120>
    13ea:	82 e0       	ldi	r24, 0x02	; 2
            waitgwmac = WGW_HAVE_GW_MAC;
    13ec:	80 93 e7 06 	sts	0x06E7, r24	; 0x8006e7 <_ZL9waitgwmac>
    13f0:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <_ZL11has_dns_mac>
        if (!has_dns_mac && waiting_for_dns_mac && client_store_mac(dnsip, destmacaddr)) {
    13f4:	81 11       	cpse	r24, r1
    13f6:	10 c0       	rjmp	.+32     	; 0x1418 <_ZN9EtherCard10packetLoopEj+0x148>
    13f8:	80 91 f1 06 	lds	r24, 0x06F1	; 0x8006f1 <_ZL19waiting_for_dns_mac>
    13fc:	88 23       	and	r24, r24
    13fe:	61 f0       	breq	.+24     	; 0x1418 <_ZN9EtherCard10packetLoopEj+0x148>
    1400:	62 ef       	ldi	r22, 0xF2	; 242
    1402:	76 e0       	ldi	r23, 0x06	; 6
    1404:	8d ec       	ldi	r24, 0xCD	; 205
    1406:	96 e0       	ldi	r25, 0x06	; 6
    1408:	72 de       	rcall	.-796    	; 0x10ee <_ZL16client_store_macPhS_>
    140a:	88 23       	and	r24, r24
    140c:	29 f0       	breq	.+10     	; 0x1418 <_ZN9EtherCard10packetLoopEj+0x148>
    140e:	81 e0       	ldi	r24, 0x01	; 1
            has_dns_mac = true;
    1410:	80 93 f0 06 	sts	0x06F0, r24	; 0x8006f0 <_ZL11has_dns_mac>
    1414:	10 92 f1 06 	sts	0x06F1, r1	; 0x8006f1 <_ZL19waiting_for_dns_mac>
            waiting_for_dns_mac = false;
    1418:	80 91 ee 06 	lds	r24, 0x06EE	; 0x8006ee <_ZL12has_dest_mac>
        }
        if (!has_dest_mac && waiting_for_dest_mac && client_store_mac(hisip, destmacaddr)) {
    141c:	81 11       	cpse	r24, r1
    141e:	8c c0       	rjmp	.+280    	; 0x1538 <_ZN9EtherCard10packetLoopEj+0x268>
    1420:	80 91 ef 06 	lds	r24, 0x06EF	; 0x8006ef <_ZL20waiting_for_dest_mac>
    1424:	88 23       	and	r24, r24
    1426:	09 f4       	brne	.+2      	; 0x142a <_ZN9EtherCard10packetLoopEj+0x15a>
    1428:	87 c0       	rjmp	.+270    	; 0x1538 <_ZN9EtherCard10packetLoopEj+0x268>
    142a:	62 ef       	ldi	r22, 0xF2	; 242
    142c:	76 e0       	ldi	r23, 0x06	; 6
    142e:	89 ec       	ldi	r24, 0xC9	; 201
    1430:	96 e0       	ldi	r25, 0x06	; 6
    1432:	5d de       	rcall	.-838    	; 0x10ee <_ZL16client_store_macPhS_>
    1434:	88 23       	and	r24, r24
    1436:	09 f4       	brne	.+2      	; 0x143a <_ZN9EtherCard10packetLoopEj+0x16a>
    1438:	7f c0       	rjmp	.+254    	; 0x1538 <_ZN9EtherCard10packetLoopEj+0x268>
    143a:	81 e0       	ldi	r24, 0x01	; 1
            has_dest_mac = true;
    143c:	80 93 ee 06 	sts	0x06EE, r24	; 0x8006ee <_ZL12has_dest_mac>
    1440:	10 92 ef 06 	sts	0x06EF, r1	; 0x8006ef <_ZL20waiting_for_dest_mac>
            waiting_for_dest_mac = false;
    1444:	79 c0       	rjmp	.+242    	; 0x1538 <_ZN9EtherCard10packetLoopEj+0x268>
    1446:	80 91 d3 04 	lds	r24, 0x04D3	; 0x8004d3 <_ZN8ENC28J606bufferE+0xc>
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
           memcmp(gPB + ETH_ARP_DST_IP_P, EtherCard::myip, IP_LEN) == 0;
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
    144a:	88 30       	cpi	r24, 0x08	; 8
    144c:	09 f0       	breq	.+2      	; 0x1450 <_ZN9EtherCard10packetLoopEj+0x180>
    144e:	74 c0       	rjmp	.+232    	; 0x1538 <_ZN9EtherCard10packetLoopEj+0x268>
    1450:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <_ZN8ENC28J606bufferE+0xd>
    1454:	81 11       	cpse	r24, r1
    1456:	70 c0       	rjmp	.+224    	; 0x1538 <_ZN9EtherCard10packetLoopEj+0x268>
    1458:	80 91 d5 04 	lds	r24, 0x04D5	; 0x8004d5 <_ZN8ENC28J606bufferE+0xe>
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
    145c:	85 34       	cpi	r24, 0x45	; 69
    145e:	09 f0       	breq	.+2      	; 0x1462 <_ZN9EtherCard10packetLoopEj+0x192>
    1460:	6b c0       	rjmp	.+214    	; 0x1538 <_ZN9EtherCard10packetLoopEj+0x268>
    1462:	44 e0       	ldi	r20, 0x04	; 4
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
           (memcmp(gPB + IP_DST_P, EtherCard::myip, IP_LEN) == 0  //not my IP
    1464:	50 e0       	ldi	r21, 0x00	; 0
    1466:	6d ed       	ldi	r22, 0xDD	; 221
    1468:	76 e0       	ldi	r23, 0x06	; 6
    146a:	85 ee       	ldi	r24, 0xE5	; 229
    146c:	94 e0       	ldi	r25, 0x04	; 4
    146e:	0e 94 09 28 	call	0x5012	; 0x5012 <memcmp>
    1472:	89 2b       	or	r24, r25
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
    1474:	09 f4       	brne	.+2      	; 0x1478 <_ZN9EtherCard10packetLoopEj+0x1a8>
    1476:	54 c0       	rjmp	.+168    	; 0x1520 <_ZN9EtherCard10packetLoopEj+0x250>
    1478:	44 e0       	ldi	r20, 0x04	; 4
           (memcmp(gPB + IP_DST_P, EtherCard::myip, IP_LEN) == 0  //not my IP
            || (memcmp(gPB + IP_DST_P, EtherCard::broadcastip, IP_LEN) == 0) //not subnet broadcast
    147a:	50 e0       	ldi	r21, 0x00	; 0
    147c:	65 ed       	ldi	r22, 0xD5	; 213
    147e:	76 e0       	ldi	r23, 0x06	; 6
    1480:	85 ee       	ldi	r24, 0xE5	; 229
    1482:	94 e0       	ldi	r25, 0x04	; 4
    1484:	0e 94 09 28 	call	0x5012	; 0x5012 <memcmp>
    1488:	89 2b       	or	r24, r25
    148a:	09 f4       	brne	.+2      	; 0x148e <_ZN9EtherCard10packetLoopEj+0x1be>
    148c:	49 c0       	rjmp	.+146    	; 0x1520 <_ZN9EtherCard10packetLoopEj+0x250>
    148e:	44 e0       	ldi	r20, 0x04	; 4
            || (memcmp(gPB + IP_DST_P, allOnes, IP_LEN) == 0)); //not global broadcasts
    1490:	50 e0       	ldi	r21, 0x00	; 0
    1492:	65 e2       	ldi	r22, 0x25	; 37
    1494:	72 e0       	ldi	r23, 0x02	; 2
    1496:	85 ee       	ldi	r24, 0xE5	; 229
    1498:	94 e0       	ldi	r25, 0x04	; 4
    149a:	0e 94 09 28 	call	0x5012	; 0x5012 <memcmp>
    149e:	89 2b       	or	r24, r25
    14a0:	09 f0       	breq	.+2      	; 0x14a4 <_ZN9EtherCard10packetLoopEj+0x1d4>
    14a2:	4a c0       	rjmp	.+148    	; 0x1538 <_ZN9EtherCard10packetLoopEj+0x268>
    14a4:	3d c0       	rjmp	.+122    	; 0x1520 <_ZN9EtherCard10packetLoopEj+0x250>
    14a6:	80 91 e9 04 	lds	r24, 0x04E9	; 0x8004e9 <_ZN8ENC28J606bufferE+0x22>
        //!@todo Add other protocols (and make each optional at compile time)
        return 0;
    }
	
	//To handle pinging
	if (gPB[IP_PROTO_P]==IP_PROTO_ICMP_V && gPB[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V)
    14aa:	88 30       	cpi	r24, 0x08	; 8
    14ac:	c9 f4       	brne	.+50     	; 0x14e0 <_ZN9EtherCard10packetLoopEj+0x210>
	{   //Service ICMP echo request (ping)
		if (icmp_cb)
    14ae:	e0 91 f8 06 	lds	r30, 0x06F8	; 0x8006f8 <_ZL7icmp_cb>
    14b2:	f0 91 f9 06 	lds	r31, 0x06F9	; 0x8006f9 <_ZL7icmp_cb+0x1>
    14b6:	30 97       	sbiw	r30, 0x00	; 0
    14b8:	19 f0       	breq	.+6      	; 0x14c0 <_ZN9EtherCard10packetLoopEj+0x1f0>
		(*icmp_cb)(&(gPB[IP_SRC_P]));
    14ba:	81 ee       	ldi	r24, 0xE1	; 225
    14bc:	94 e0       	ldi	r25, 0x04	; 4
    14be:	19 95       	eicall
void EtherCard::registerPingCallback (void (*callback)(uint8_t *srcip)) {
    icmp_cb = callback;
}

static void make_echo_reply_from_request(uint16_t len) {
	make_eth_ip();
    14c0:	f7 dd       	rcall	.-1042   	; 0x10b0 <_ZL11make_eth_ipv>
	gPB[ICMP_TYPE_P] = ICMP_TYPE_ECHOREPLY_V;
    14c2:	e7 ec       	ldi	r30, 0xC7	; 199
    14c4:	f4 e0       	ldi	r31, 0x04	; 4
	if (gPB[ICMP_CHECKSUM_P] > (0xFF-0x08))
    14c6:	12 a2       	std	Z+34, r1	; 0x22
    14c8:	84 a1       	ldd	r24, Z+36	; 0x24
    14ca:	88 3f       	cpi	r24, 0xF8	; 248
	gPB[ICMP_CHECKSUM_P+1]++;
    14cc:	18 f0       	brcs	.+6      	; 0x14d4 <_ZN9EtherCard10packetLoopEj+0x204>
    14ce:	95 a1       	ldd	r25, Z+37	; 0x25
    14d0:	9f 5f       	subi	r25, 0xFF	; 255
	gPB[ICMP_CHECKSUM_P] += 0x08;
    14d2:	95 a3       	std	Z+37, r25	; 0x25
    14d4:	88 5f       	subi	r24, 0xF8	; 248
	EtherCard::packetSend(len);
    14d6:	80 93 eb 04 	sts	0x04EB, r24	; 0x8004eb <_ZN8ENC28J606bufferE+0x24>
    14da:	ce 01       	movw	r24, r28
    14dc:	10 dc       	rcall	.-2016   	; 0xcfe <_ZN8ENC28J6010packetSendEj>
		make_echo_reply_from_request(plen);
		return 0;
	}

#if ETHERCARD_UDPSERVER
    if (ether.udpServerListening() && gPB[IP_PROTO_P]==IP_PROTO_UDP_V)
    14de:	2c c0       	rjmp	.+88     	; 0x1538 <_ZN9EtherCard10packetLoopEj+0x268>
    14e0:	4a d0       	rcall	.+148    	; 0x1576 <_ZN9EtherCard18udpServerListeningEv>
    14e2:	88 23       	and	r24, r24
    14e4:	49 f1       	breq	.+82     	; 0x1538 <_ZN9EtherCard10packetLoopEj+0x268>
    14e6:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <_ZN8ENC28J606bufferE+0x17>
    14ea:	81 31       	cpi	r24, 0x11	; 17
    14ec:	29 f5       	brne	.+74     	; 0x1538 <_ZN9EtherCard10packetLoopEj+0x268>
        }
        delaycnt++;

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, dnsip) && !has_dns_mac && !waiting_for_dns_mac) {
            client_arp_whohas(dnsip);
    14ee:	1d c0       	rjmp	.+58     	; 0x152a <_ZN9EtherCard10packetLoopEj+0x25a>
    14f0:	8d ec       	ldi	r24, 0xCD	; 205
    14f2:	96 e0       	ldi	r25, 0x06	; 6
    14f4:	12 de       	rcall	.-988    	; 0x111a <_ZL17client_arp_whohasPh>
            waiting_for_dns_mac = true;
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	80 93 f1 06 	sts	0x06F1, r24	; 0x8006f1 <_ZL19waiting_for_dns_mac>
    14fc:	1d cf       	rjmp	.-454    	; 0x1338 <_ZN9EtherCard10packetLoopEj+0x68>
        }

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, hisip) && !has_dest_mac && !waiting_for_dest_mac) {
            client_arp_whohas(hisip);
    14fe:	89 ec       	ldi	r24, 0xC9	; 201
    1500:	96 e0       	ldi	r25, 0x06	; 6
    1502:	0b de       	rcall	.-1002   	; 0x111a <_ZL17client_arp_whohasPh>
    1504:	81 e0       	ldi	r24, 0x01	; 1
            waiting_for_dest_mac = true;
    1506:	80 93 ef 06 	sts	0x06EF, r24	; 0x8006ef <_ZL20waiting_for_dest_mac>
    150a:	16 c0       	rjmp	.+44     	; 0x1538 <_ZN9EtherCard10packetLoopEj+0x268>
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
    150c:	8a 97       	sbiw	r24, 0x2a	; 42
    150e:	08 f0       	brcs	.+2      	; 0x1512 <_ZN9EtherCard10packetLoopEj+0x242>
    1510:	9a cf       	rjmp	.-204    	; 0x1446 <_ZN9EtherCard10packetLoopEj+0x176>
    1512:	12 c0       	rjmp	.+36     	; 0x1538 <_ZN9EtherCard10packetLoopEj+0x268>
        return 0;
    }

    if (eth_type_is_arp_and_my_ip(plen))
    {   //Service ARP request
        if (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REQ_L_V)
    1514:	80 91 dc 04 	lds	r24, 0x04DC	; 0x8004dc <_ZN8ENC28J606bufferE+0x15>
    1518:	81 30       	cpi	r24, 0x01	; 1
    151a:	09 f0       	breq	.+2      	; 0x151e <_ZN9EtherCard10packetLoopEj+0x24e>
    151c:	57 cf       	rjmp	.-338    	; 0x13cc <_ZN9EtherCard10packetLoopEj+0xfc>
    151e:	37 cf       	rjmp	.-402    	; 0x138e <_ZN9EtherCard10packetLoopEj+0xbe>
        //!@todo Add other protocols (and make each optional at compile time)
        return 0;
    }
	
	//To handle pinging
	if (gPB[IP_PROTO_P]==IP_PROTO_ICMP_V && gPB[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V)
    1520:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <_ZN8ENC28J606bufferE+0x17>
    1524:	81 30       	cpi	r24, 0x01	; 1
    1526:	e1 f6       	brne	.-72     	; 0x14e0 <_ZN9EtherCard10packetLoopEj+0x210>
    1528:	be cf       	rjmp	.-132    	; 0x14a6 <_ZN9EtherCard10packetLoopEj+0x1d6>
	}

#if ETHERCARD_UDPSERVER
    if (ether.udpServerListening() && gPB[IP_PROTO_P]==IP_PROTO_UDP_V)
    {   //Call UDP server handler (callback) if one is defined for this packet
        if(ether.udpServerHasProcessedPacket(plen))
    152a:	ce 01       	movw	r24, r28
    152c:	2b d0       	rcall	.+86     	; 0x1584 <_ZN9EtherCard27udpServerHasProcessedPacketEj>
    152e:	04 c0       	rjmp	.+8      	; 0x1538 <_ZN9EtherCard10packetLoopEj+0x268>
    1530:	ca 32       	cpi	r28, 0x2A	; 42
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
    1532:	d1 05       	cpc	r29, r1
    1534:	08 f0       	brcs	.+2      	; 0x1538 <_ZN9EtherCard10packetLoopEj+0x268>
    1536:	8c cf       	rjmp	.-232    	; 0x1450 <_ZN9EtherCard10packetLoopEj+0x180>
    1538:	80 e0       	ldi	r24, 0x00	; 0

    if (plen<54 || gPB[IP_PROTO_P]!=IP_PROTO_TCP_V )
        return 0; //from here on we are only interested in TCP-packets; these are longer than 54 bytes
		
	return 0;
}
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	df 91       	pop	r29
    153e:	cf 91       	pop	r28
    1540:	08 95       	ret

00001542 <_ZN9EtherCard21udpServerListenOnPortEPFvjPhjPKcjEj>:
    1542:	9c 01       	movw	r18, r24
    {
        if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((uint8_t) listeners[i].port)) {
            listeners[i].listening = true;
        }
    }
}
    1544:	90 91 fa 06 	lds	r25, 0x06FA	; 0x8006fa <numListeners>
    1548:	98 30       	cpi	r25, 0x08	; 8
    154a:	a0 f4       	brcc	.+40     	; 0x1574 <_ZN9EtherCard21udpServerListenOnPortEPFvjPhjPKcjEj+0x32>
    154c:	e9 2f       	mov	r30, r25
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	af 01       	movw	r20, r30
    1552:	44 0f       	add	r20, r20
    1554:	55 1f       	adc	r21, r21
    1556:	44 0f       	add	r20, r20
    1558:	55 1f       	adc	r21, r21
    155a:	e4 0f       	add	r30, r20
    155c:	f5 1f       	adc	r31, r21
    155e:	e5 50       	subi	r30, 0x05	; 5
    1560:	f9 4f       	sbci	r31, 0xF9	; 249
    1562:	31 83       	std	Z+1, r19	; 0x01
    1564:	20 83       	st	Z, r18
    1566:	73 83       	std	Z+3, r23	; 0x03
    1568:	62 83       	std	Z+2, r22	; 0x02
    156a:	81 e0       	ldi	r24, 0x01	; 1
    156c:	84 83       	std	Z+4, r24	; 0x04
    156e:	9f 5f       	subi	r25, 0xFF	; 255
    1570:	90 93 fa 06 	sts	0x06FA, r25	; 0x8006fa <numListeners>
    1574:	08 95       	ret

00001576 <_ZN9EtherCard18udpServerListeningEv>:

bool EtherCard::udpServerListening() {
    return numListeners > 0;
    1576:	81 e0       	ldi	r24, 0x01	; 1
    1578:	90 91 fa 06 	lds	r25, 0x06FA	; 0x8006fa <numListeners>
    157c:	91 11       	cpse	r25, r1
    157e:	01 c0       	rjmp	.+2      	; 0x1582 <_ZN9EtherCard18udpServerListeningEv+0xc>
    1580:	80 e0       	ldi	r24, 0x00	; 0
}
    1582:	08 95       	ret

00001584 <_ZN9EtherCard27udpServerHasProcessedPacketEj>:

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    1584:	8f 92       	push	r8
    1586:	9f 92       	push	r9
    1588:	bf 92       	push	r11
    158a:	cf 92       	push	r12
    158c:	df 92       	push	r13
    158e:	ef 92       	push	r14
    1590:	ff 92       	push	r15
    1592:	0f 93       	push	r16
    1594:	1f 93       	push	r17
    1596:	cf 93       	push	r28
    1598:	df 93       	push	r29
    bool packetProcessed = false;
    for(int i = 0; i < numListeners; i++)
    159a:	80 91 fa 06 	lds	r24, 0x06FA	; 0x8006fa <numListeners>
    159e:	88 23       	and	r24, r24
    15a0:	09 f4       	brne	.+2      	; 0x15a4 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x20>
    15a2:	46 c0       	rjmp	.+140    	; 0x1630 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0xac>
    15a4:	cb ef       	ldi	r28, 0xFB	; 251
    15a6:	d6 e0       	ldi	r29, 0x06	; 6
    15a8:	e1 2c       	mov	r14, r1
    15aa:	f1 2c       	mov	r15, r1
    15ac:	80 e0       	ldi	r24, 0x00	; 0
    {
        if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((uint8_t) listeners[i].port) && listeners[i].listening)
    15ae:	0f 2e       	mov	r0, r31
    15b0:	f7 ec       	ldi	r31, 0xC7	; 199
    15b2:	cf 2e       	mov	r12, r31
    15b4:	f4 e0       	ldi	r31, 0x04	; 4
    15b6:	df 2e       	mov	r13, r31
    15b8:	f0 2d       	mov	r31, r0
                listeners[i].port,
                gPB + IP_SRC_P,
                (gPB[UDP_SRC_PORT_H_P] << 8) | gPB[UDP_SRC_PORT_L_P],
                (const char *) (gPB + UDP_DATA_P),
                datalen);
            packetProcessed = true;
    15ba:	bb 24       	eor	r11, r11
    15bc:	b3 94       	inc	r11

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    bool packetProcessed = false;
    for(int i = 0; i < numListeners; i++)
    {
        if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((uint8_t) listeners[i].port) && listeners[i].listening)
    15be:	aa 81       	ldd	r26, Y+2	; 0x02
    15c0:	bb 81       	ldd	r27, Y+3	; 0x03
    15c2:	f6 01       	movw	r30, r12
    15c4:	24 a1       	ldd	r18, Z+36	; 0x24
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	4b 2f       	mov	r20, r27
    15ca:	55 27       	eor	r21, r21
    15cc:	24 17       	cp	r18, r20
    15ce:	35 07       	cpc	r19, r21
    15d0:	21 f5       	brne	.+72     	; 0x161a <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x96>
    15d2:	25 a1       	ldd	r18, Z+37	; 0x25
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	ad 01       	movw	r20, r26
    15d8:	55 27       	eor	r21, r21
    15da:	24 17       	cp	r18, r20
    15dc:	35 07       	cpc	r19, r21
    15de:	e9 f4       	brne	.+58     	; 0x161a <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x96>
    15e0:	9c 81       	ldd	r25, Y+4	; 0x04
    15e2:	99 23       	and	r25, r25
    15e4:	d1 f0       	breq	.+52     	; 0x161a <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x96>
            listeners[i].callback(
                listeners[i].port,
                gPB + IP_SRC_P,
                (gPB[UDP_SRC_PORT_H_P] << 8) | gPB[UDP_SRC_PORT_L_P],
                (const char *) (gPB + UDP_DATA_P),
                datalen);
    15e6:	07 a1       	ldd	r16, Z+39	; 0x27
    15e8:	10 e0       	ldi	r17, 0x00	; 0
    15ea:	08 50       	subi	r16, 0x08	; 8
    15ec:	11 09       	sbc	r17, r1
    15ee:	86 a1       	ldd	r24, Z+38	; 0x26
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	98 2f       	mov	r25, r24
    15f4:	88 27       	eor	r24, r24
    15f6:	08 0f       	add	r16, r24
    15f8:	19 1f       	adc	r17, r25
    15fa:	42 a1       	ldd	r20, Z+34	; 0x22
    15fc:	50 e0       	ldi	r21, 0x00	; 0
    15fe:	54 2f       	mov	r21, r20
    1600:	44 27       	eor	r20, r20
    1602:	83 a1       	ldd	r24, Z+35	; 0x23
    1604:	48 2b       	or	r20, r24
    1606:	88 80       	ld	r8, Y
    1608:	99 80       	ldd	r9, Y+1	; 0x01
    160a:	21 ef       	ldi	r18, 0xF1	; 241
    160c:	34 e0       	ldi	r19, 0x04	; 4
    160e:	61 ee       	ldi	r22, 0xE1	; 225
    1610:	74 e0       	ldi	r23, 0x04	; 4
    1612:	cd 01       	movw	r24, r26
    1614:	f4 01       	movw	r30, r8
    1616:	19 95       	eicall
            packetProcessed = true;
    1618:	8b 2d       	mov	r24, r11
    return numListeners > 0;
}

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    bool packetProcessed = false;
    for(int i = 0; i < numListeners; i++)
    161a:	ff ef       	ldi	r31, 0xFF	; 255
    161c:	ef 1a       	sub	r14, r31
    161e:	ff 0a       	sbc	r15, r31
    1620:	25 96       	adiw	r28, 0x05	; 5
    1622:	20 91 fa 06 	lds	r18, 0x06FA	; 0x8006fa <numListeners>
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	e2 16       	cp	r14, r18
    162a:	f3 06       	cpc	r15, r19
    162c:	44 f2       	brlt	.-112    	; 0x15be <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x3a>
    162e:	01 c0       	rjmp	.+2      	; 0x1632 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0xae>
bool EtherCard::udpServerListening() {
    return numListeners > 0;
}

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    bool packetProcessed = false;
    1630:	80 e0       	ldi	r24, 0x00	; 0
                datalen);
            packetProcessed = true;
        }
    }
    return packetProcessed;
}
    1632:	df 91       	pop	r29
    1634:	cf 91       	pop	r28
    1636:	1f 91       	pop	r17
    1638:	0f 91       	pop	r16
    163a:	ff 90       	pop	r15
    163c:	ef 90       	pop	r14
    163e:	df 90       	pop	r13
    1640:	cf 90       	pop	r12
    1642:	bf 90       	pop	r11
    1644:	9f 90       	pop	r9
    1646:	8f 90       	pop	r8
    1648:	08 95       	ret

0000164a <_ZN9EtherCard6copyIpEPhPKh>:
#include <stdlib.h>
#include <ctype.h>
#include <string.h>

void EtherCard::copyIp (uint8_t *dst, const uint8_t *src) {
    memcpy(dst, src, IP_LEN);
    164a:	fb 01       	movw	r30, r22
    164c:	20 81       	ld	r18, Z
    164e:	31 81       	ldd	r19, Z+1	; 0x01
    1650:	fc 01       	movw	r30, r24
    1652:	31 83       	std	Z+1, r19	; 0x01
    1654:	20 83       	st	Z, r18
    1656:	fb 01       	movw	r30, r22
    1658:	22 81       	ldd	r18, Z+2	; 0x02
    165a:	33 81       	ldd	r19, Z+3	; 0x03
    165c:	fc 01       	movw	r30, r24
    165e:	33 83       	std	Z+3, r19	; 0x03
    1660:	22 83       	std	Z+2, r18	; 0x02
    1662:	08 95       	ret

00001664 <_ZN9EtherCard7copyMacEPhPKh>:
}

void EtherCard::copyMac (uint8_t *dst, const uint8_t *src) {
    1664:	dc 01       	movw	r26, r24
    memcpy(dst, src, ETH_LEN);
    1666:	96 e0       	ldi	r25, 0x06	; 6
    1668:	fb 01       	movw	r30, r22
    166a:	01 90       	ld	r0, Z+
    166c:	0d 92       	st	X+, r0
    166e:	9a 95       	dec	r25
    1670:	e1 f7       	brne	.-8      	; 0x166a <_ZN9EtherCard7copyMacEPhPKh+0x6>
    1672:	08 95       	ret

00001674 <_ZN9EtherComm13CheckChecksumEPKch>:
	}
}

bool EtherComm::CheckChecksum(const char *data, uint8_t len){
  //data++; //Ignore first byte, the start byte.
  uint8_t checksum = (uint8_t)(*(data++)); //Start by 'adding' the command to the checksum
    1674:	fc 01       	movw	r30, r24
    1676:	20 81       	ld	r18, Z
  checksum += (uint8_t)(*(data++));
    1678:	dc 01       	movw	r26, r24
    167a:	12 96       	adiw	r26, 0x02	; 2
    167c:	81 81       	ldd	r24, Z+1	; 0x01
    167e:	92 2f       	mov	r25, r18
    1680:	98 0f       	add	r25, r24
  while(len-- > 0){
    1682:	3f ef       	ldi	r19, 0xFF	; 255
    1684:	36 0f       	add	r19, r22
    1686:	66 23       	and	r22, r22
    1688:	61 f0       	breq	.+24     	; 0x16a2 <_ZN9EtherComm13CheckChecksumEPKch+0x2e>
    168a:	fd 01       	movw	r30, r26
    168c:	83 2f       	mov	r24, r19
    checksum += (uint8_t)(*(data++));
    168e:	21 91       	ld	r18, Z+
    1690:	92 0f       	add	r25, r18

bool EtherComm::CheckChecksum(const char *data, uint8_t len){
  //data++; //Ignore first byte, the start byte.
  uint8_t checksum = (uint8_t)(*(data++)); //Start by 'adding' the command to the checksum
  checksum += (uint8_t)(*(data++));
  while(len-- > 0){
    1692:	81 50       	subi	r24, 0x01	; 1
    1694:	e0 f7       	brcc	.-8      	; 0x168e <_ZN9EtherComm13CheckChecksumEPKch+0x1a>
    1696:	23 2f       	mov	r18, r19
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	2f 5f       	subi	r18, 0xFF	; 255
    169c:	3f 4f       	sbci	r19, 0xFF	; 255
    169e:	a2 0f       	add	r26, r18
    16a0:	b3 1f       	adc	r27, r19
    checksum += (uint8_t)(*(data++));
  }
//  Serial.println((uint8_t)(checksum & CHECKSUM_MASK));
  return (checksum & CHECKSUM_MASK) == (uint8_t)(*data);
    16a2:	81 e0       	ldi	r24, 0x01	; 1
    16a4:	2c 91       	ld	r18, X
    16a6:	29 13       	cpse	r18, r25
    16a8:	80 e0       	ldi	r24, 0x00	; 0
}
    16aa:	08 95       	ret

000016ac <_Z10udpReceivejPhjPKcj>:

//char EtherComm::buffer[BUFFER_SIZE];
uint8_t* EtherComm::buffer = ether.buffer + UDP_DATA_P;

//callback that prints received packets to the serial port
void udpReceive(uint16_t dest_port, uint8_t src_ip[IP_LEN], uint16_t src_port, const char *data, uint16_t packetLen){
    16ac:	0f 93       	push	r16
    16ae:	1f 93       	push	r17
    16b0:	cf 93       	push	r28
    16b2:	df 93       	push	r29
	}
	Serial.println();
	Serial.print("Checksum: ");
	Serial.println((uint8_t)(*index));
*/	
	if(packetLen >= 3){ //At minimum, start byte, command, and checksum.
    16b4:	a8 01       	movw	r20, r16
    16b6:	43 50       	subi	r20, 0x03	; 3
    16b8:	51 09       	sbc	r21, r1
    16ba:	4f 3f       	cpi	r20, 0xFF	; 255
    16bc:	51 05       	cpc	r21, r1
    16be:	09 f0       	breq	.+2      	; 0x16c2 <_Z10udpReceivejPhjPKcj+0x16>
    16c0:	88 f4       	brcc	.+34     	; 0x16e4 <_Z10udpReceivejPhjPKcj+0x38>
		if(packetLen <= 258){
			uint8_t dataLen = (uint8_t)(packetLen - 3);
			if((uint8_t)data[0] == START_BYTE){
    16c2:	f9 01       	movw	r30, r18
    16c4:	80 81       	ld	r24, Z
    16c6:	8f 3f       	cpi	r24, 0xFF	; 255
    16c8:	69 f4       	brne	.+26     	; 0x16e4 <_Z10udpReceivejPhjPKcj+0x38>
    16ca:	e9 01       	movw	r28, r18
	Serial.print("Checksum: ");
	Serial.println((uint8_t)(*index));
*/	
	if(packetLen >= 3){ //At minimum, start byte, command, and checksum.
		if(packetLen <= 258){
			uint8_t dataLen = (uint8_t)(packetLen - 3);
    16cc:	03 50       	subi	r16, 0x03	; 3
			if((uint8_t)data[0] == START_BYTE){
			//		Serial.print("Computed Checksum: ");
				if(EtherComm::CheckChecksum(data, dataLen)){
    16ce:	60 2f       	mov	r22, r16
    16d0:	c9 01       	movw	r24, r18
    16d2:	d0 df       	rcall	.-96     	; 0x1674 <_ZN9EtherComm13CheckChecksumEPKch>
    16d4:	88 23       	and	r24, r24
    16d6:	31 f0       	breq	.+12     	; 0x16e4 <_Z10udpReceivejPhjPKcj+0x38>
					EtherComm::CommandReceived((uint8_t)data[1], (const uint8_t*)(data + 2), dataLen);
    16d8:	be 01       	movw	r22, r28
    16da:	6e 5f       	subi	r22, 0xFE	; 254
    16dc:	7f 4f       	sbci	r23, 0xFF	; 255
    16de:	40 2f       	mov	r20, r16
    16e0:	89 81       	ldd	r24, Y+1	; 0x01
    16e2:	96 d9       	rcall	.-3284   	; 0xa10 <_ZN9EtherComm15CommandReceivedEhPKhh>
				}
			}
		}
	}
}
    16e4:	df 91       	pop	r29
    16e6:	cf 91       	pop	r28
    16e8:	1f 91       	pop	r17
    16ea:	0f 91       	pop	r16
    16ec:	08 95       	ret

000016ee <_ZN9EtherComm5beginEjjRVhS1_h>:
  }
//  Serial.println((uint8_t)(checksum & CHECKSUM_MASK));
  return (checksum & CHECKSUM_MASK) == (uint8_t)(*data);
}

bool EtherComm::begin(uint16_t recvPort, uint16_t destPort, Register& csDDR, Register& csPort, uint8_t csPin){
    16ee:	0f 93       	push	r16
    16f0:	cf 93       	push	r28
    16f2:	df 93       	push	r29
    16f4:	ec 01       	movw	r28, r24
    16f6:	ca 01       	movw	r24, r20
    16f8:	a9 01       	movw	r20, r18
    16fa:	20 2f       	mov	r18, r16
  EtherComm::_recvPort = recvPort;
    16fc:	d0 93 26 07 	sts	0x0726, r29	; 0x800726 <_ZN9EtherComm9_recvPortE+0x1>
    1700:	c0 93 25 07 	sts	0x0725, r28	; 0x800725 <_ZN9EtherComm9_recvPortE>
  EtherComm::_destPort = destPort;
    1704:	70 93 24 07 	sts	0x0724, r23	; 0x800724 <_ZN9EtherComm9_destPortE+0x1>
    1708:	60 93 23 07 	sts	0x0723, r22	; 0x800723 <_ZN9EtherComm9_destPortE>
  
  if (ether.begin(EtherComm::_mymac, csDDR, csPort, csPin) == 0) return false;
    170c:	bc 01       	movw	r22, r24
    170e:	86 e0       	ldi	r24, 0x06	; 6
    1710:	92 e0       	ldi	r25, 0x02	; 2
    1712:	d3 db       	rcall	.-2138   	; 0xeba <_ZN9EtherCard5beginEPKhRVhS3_h>
    1714:	88 23       	and	r24, r24
    1716:	79 f0       	breq	.+30     	; 0x1736 <_ZN9EtherComm5beginEjjRVhS1_h+0x48>
  ether.staticSetup(EtherComm::_myip, EtherComm::_gwip);
    1718:	20 e0       	ldi	r18, 0x00	; 0
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	40 e0       	ldi	r20, 0x00	; 0
    171e:	50 e0       	ldi	r21, 0x00	; 0
    1720:	6c e0       	ldi	r22, 0x0C	; 12
    1722:	72 e0       	ldi	r23, 0x02	; 2
    1724:	80 e1       	ldi	r24, 0x10	; 16
    1726:	92 e0       	ldi	r25, 0x02	; 2
    1728:	e1 db       	rcall	.-2110   	; 0xeec <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_>
  ether.printIp("GW:  ", ether.gwip);
  ether.printIp("DNS: ", ether.dnsip);
  */
  
  //Register the udpSerialPrint() method to listen to port the receive port.
  ether.udpServerListenOnPort(&udpReceive, recvPort);
    172a:	be 01       	movw	r22, r28
    172c:	86 e5       	ldi	r24, 0x56	; 86
    172e:	9b e0       	ldi	r25, 0x0B	; 11
    1730:	08 df       	rcall	.-496    	; 0x1542 <_ZN9EtherCard21udpServerListenOnPortEPFvjPhjPKcjEj>
  
  return true;
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	01 c0       	rjmp	.+2      	; 0x1738 <_ZN9EtherComm5beginEjjRVhS1_h+0x4a>

bool EtherComm::begin(uint16_t recvPort, uint16_t destPort, Register& csDDR, Register& csPort, uint8_t csPin){
  EtherComm::_recvPort = recvPort;
  EtherComm::_destPort = destPort;
  
  if (ether.begin(EtherComm::_mymac, csDDR, csPort, csPin) == 0) return false;
    1736:	80 e0       	ldi	r24, 0x00	; 0
  
  //Register the udpSerialPrint() method to listen to port the receive port.
  ether.udpServerListenOnPort(&udpReceive, recvPort);
  
  return true;
}
    1738:	df 91       	pop	r29
    173a:	cf 91       	pop	r28
    173c:	0f 91       	pop	r16
    173e:	08 95       	ret

00001740 <_ZN9EtherComm11SendCommandEhh>:

void EtherComm::SendCommand(uint8_t cmd, uint8_t len){
    1740:	0f 93       	push	r16
    1742:	1f 93       	push	r17
    1744:	cf 93       	push	r28
    1746:	df 93       	push	r29
  EtherComm::buffer[0] = START_BYTE;
    1748:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    174c:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    1750:	9f ef       	ldi	r25, 0xFF	; 255
    1752:	90 83       	st	Z, r25
  EtherComm::buffer[1] = cmd;
    1754:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    1758:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    175c:	81 83       	std	Z+1, r24	; 0x01
  //EtherComm::buffer[2] = len;
  
  uint8_t checksum = START_BYTE + cmd;
    175e:	81 50       	subi	r24, 0x01	; 1
  uint8_t* index = &EtherComm::buffer[2]; //TODO why is char* being used? convert ot uint8_t*!!
    1760:	c0 91 00 02 	lds	r28, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    1764:	d0 91 01 02 	lds	r29, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    1768:	de 01       	movw	r26, r28
    176a:	12 96       	adiw	r26, 0x02	; 2
  uint8_t bytes = len;
  while(bytes-- > 0){
    176c:	4f ef       	ldi	r20, 0xFF	; 255
    176e:	46 0f       	add	r20, r22
    1770:	66 23       	and	r22, r22
    1772:	81 f0       	breq	.+32     	; 0x1794 <_ZN9EtherComm11SendCommandEhh+0x54>
    1774:	fd 01       	movw	r30, r26
    1776:	50 e0       	ldi	r21, 0x00	; 0
    1778:	9a 01       	movw	r18, r20
    177a:	2d 5f       	subi	r18, 0xFD	; 253
    177c:	3f 4f       	sbci	r19, 0xFF	; 255
    177e:	2c 0f       	add	r18, r28
    1780:	3d 1f       	adc	r19, r29
    checksum += (uint8_t)(*(index++));  
    1782:	91 91       	ld	r25, Z+
    1784:	89 0f       	add	r24, r25
  //EtherComm::buffer[2] = len;
  
  uint8_t checksum = START_BYTE + cmd;
  uint8_t* index = &EtherComm::buffer[2]; //TODO why is char* being used? convert ot uint8_t*!!
  uint8_t bytes = len;
  while(bytes-- > 0){
    1786:	e2 17       	cp	r30, r18
    1788:	f3 07       	cpc	r31, r19
    178a:	d9 f7       	brne	.-10     	; 0x1782 <_ZN9EtherComm11SendCommandEhh+0x42>
    178c:	4f 5f       	subi	r20, 0xFF	; 255
    178e:	5f 4f       	sbci	r21, 0xFF	; 255
    1790:	a4 0f       	add	r26, r20
    1792:	b5 1f       	adc	r27, r21
    checksum += (uint8_t)(*(index++));  
  }
  (*index) = (uint8_t)(checksum & CHECKSUM_MASK);
    1794:	8c 93       	st	X, r24

  //Serial.print("Send: ");
  //Serial.println(len);
  ether.sendUdp(EtherComm::buffer, (uint16_t)len + (uint16_t)3, _recvPort, _destIP, _destPort);
    1796:	00 91 23 07 	lds	r16, 0x0723	; 0x800723 <_ZN9EtherComm9_destPortE>
    179a:	10 91 24 07 	lds	r17, 0x0724	; 0x800724 <_ZN9EtherComm9_destPortE+0x1>
    179e:	40 91 25 07 	lds	r20, 0x0725	; 0x800725 <_ZN9EtherComm9_recvPortE>
    17a2:	50 91 26 07 	lds	r21, 0x0726	; 0x800726 <_ZN9EtherComm9_recvPortE+0x1>
    17a6:	70 e0       	ldi	r23, 0x00	; 0
    17a8:	6d 5f       	subi	r22, 0xFD	; 253
    17aa:	7f 4f       	sbci	r23, 0xFF	; 255
    17ac:	22 e0       	ldi	r18, 0x02	; 2
    17ae:	32 e0       	ldi	r19, 0x02	; 2
    17b0:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    17b4:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    17b8:	52 dd       	rcall	.-1372   	; 0x125e <_ZN9EtherCard7sendUdpEPKhjjS1_j>
}
    17ba:	df 91       	pop	r29
    17bc:	cf 91       	pop	r28
    17be:	1f 91       	pop	r17
    17c0:	0f 91       	pop	r16
    17c2:	08 95       	ret

000017c4 <main>:

//#include "Micro/Peripherals/HardwareServo.h"

int main(void)
{
	sei();
    17c4:	78 94       	sei
	Serial.begin(9600);
    17c6:	26 e0       	ldi	r18, 0x06	; 6
    17c8:	40 e8       	ldi	r20, 0x80	; 128
    17ca:	55 e2       	ldi	r21, 0x25	; 37
    17cc:	60 e0       	ldi	r22, 0x00	; 0
    17ce:	70 e0       	ldi	r23, 0x00	; 0
    17d0:	8b e4       	ldi	r24, 0x4B	; 75
    17d2:	97 e0       	ldi	r25, 0x07	; 7
    17d4:	64 d0       	rcall	.+200    	; 0x189e <_ZN14HardwareSerial5beginEmh>
	Serial.println("Initializing...");
    17d6:	6b e2       	ldi	r22, 0x2B	; 43
    17d8:	72 e0       	ldi	r23, 0x02	; 2
    17da:	8b e4       	ldi	r24, 0x4B	; 75
    17dc:	97 e0       	ldi	r25, 0x07	; 7
    17de:	0e 94 25 24 	call	0x484a	; 0x484a <_ZN5Print7printlnEPKc>
	
	if(!rov.begin()){
    17e2:	0e 94 ca 20 	call	0x4194	; 0x4194 <_ZN5Robot5beginEv>
    17e6:	81 11       	cpse	r24, r1
    17e8:	07 c0       	rjmp	.+14     	; 0x17f8 <main+0x34>
		Serial.println("Failed to initialize robot.");
    17ea:	6b e3       	ldi	r22, 0x3B	; 59
    17ec:	72 e0       	ldi	r23, 0x02	; 2
    17ee:	8b e4       	ldi	r24, 0x4B	; 75
    17f0:	97 e0       	ldi	r25, 0x07	; 7
    17f2:	0e 94 25 24 	call	0x484a	; 0x484a <_ZN5Print7printlnEPKc>
    17f6:	ff cf       	rjmp	.-2      	; 0x17f6 <main+0x32>
		while(true) ;
	}
	Serial.println("Initialized robot.");
    17f8:	67 e5       	ldi	r22, 0x57	; 87
    17fa:	72 e0       	ldi	r23, 0x02	; 2
    17fc:	8b e4       	ldi	r24, 0x4B	; 75
    17fe:	97 e0       	ldi	r25, 0x07	; 7
    1800:	0e 94 25 24 	call	0x484a	; 0x484a <_ZN5Print7printlnEPKc>
	//ServoA1.setPulse(i);
	//ServoA1.enable(true);
	//Servo5.setPulseC(i);
	//Servo5.EnableC();
    while (1) {
		rov.Loop();
    1804:	0e 94 2d 22 	call	0x445a	; 0x445a <_ZN5Robot4LoopEv>
    1808:	fd cf       	rjmp	.-6      	; 0x1804 <main+0x40>

0000180a <_ZN5Print17availableForWriteEv>:
	//cbi(*_ucsrb, UDRIE0);
}

void HardwareSerial::end(){
	cbi(*_ucsrb, RXEN0);
	cbi(*_ucsrb, TXEN0);
    180a:	80 e0       	ldi	r24, 0x00	; 0
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	08 95       	ret

00001810 <_ZN14HardwareSerial9availableEv>:
    1810:	dc 01       	movw	r26, r24
    1812:	14 96       	adiw	r26, 0x04	; 4
    1814:	ed 91       	ld	r30, X+
    1816:	fc 91       	ld	r31, X
    1818:	15 97       	sbiw	r26, 0x05	; 5
    181a:	80 81       	ld	r24, Z
    181c:	08 2e       	mov	r0, r24
    181e:	00 0c       	add	r0, r0
    1820:	99 0b       	sbc	r25, r25
    1822:	89 2f       	mov	r24, r25
    1824:	88 1f       	adc	r24, r24
    1826:	88 27       	eor	r24, r24
    1828:	88 1f       	adc	r24, r24
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	08 95       	ret

0000182e <_ZN14HardwareSerial4peekEv>:
    182e:	8f ef       	ldi	r24, 0xFF	; 255
    1830:	9f ef       	ldi	r25, 0xFF	; 255
    1832:	08 95       	ret

00001834 <_ZN14HardwareSerial4readEv>:
    1834:	dc 01       	movw	r26, r24
    1836:	14 96       	adiw	r26, 0x04	; 4
    1838:	ed 91       	ld	r30, X+
    183a:	fc 91       	ld	r31, X
    183c:	15 97       	sbiw	r26, 0x05	; 5
    183e:	90 81       	ld	r25, Z
    1840:	99 23       	and	r25, r25
    1842:	ec f7       	brge	.-6      	; 0x183e <_ZN14HardwareSerial4readEv+0xa>
    1844:	1a 96       	adiw	r26, 0x0a	; 10
    1846:	ed 91       	ld	r30, X+
    1848:	fc 91       	ld	r31, X
    184a:	1b 97       	sbiw	r26, 0x0b	; 11
    184c:	80 81       	ld	r24, Z
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	08 95       	ret

00001852 <_ZN14HardwareSerial17availableForWriteEv>:
    1852:	dc 01       	movw	r26, r24
    1854:	14 96       	adiw	r26, 0x04	; 4
    1856:	ed 91       	ld	r30, X+
    1858:	fc 91       	ld	r31, X
    185a:	15 97       	sbiw	r26, 0x05	; 5
    185c:	20 81       	ld	r18, Z
    185e:	81 e0       	ldi	r24, 0x01	; 1
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	25 fd       	sbrc	r18, 5
    1864:	02 c0       	rjmp	.+4      	; 0x186a <_ZN14HardwareSerial17availableForWriteEv+0x18>
    1866:	80 e0       	ldi	r24, 0x00	; 0
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	08 95       	ret

0000186c <_ZN14HardwareSerial5flushEv>:
    186c:	dc 01       	movw	r26, r24
    186e:	14 96       	adiw	r26, 0x04	; 4
    1870:	ed 91       	ld	r30, X+
    1872:	fc 91       	ld	r31, X
    1874:	15 97       	sbiw	r26, 0x05	; 5
    1876:	80 81       	ld	r24, Z
    1878:	85 ff       	sbrs	r24, 5
    187a:	fd cf       	rjmp	.-6      	; 0x1876 <_ZN14HardwareSerial5flushEv+0xa>
    187c:	08 95       	ret

0000187e <_ZN14HardwareSerial5writeEh>:
    187e:	dc 01       	movw	r26, r24
    1880:	14 96       	adiw	r26, 0x04	; 4
    1882:	ed 91       	ld	r30, X+
    1884:	fc 91       	ld	r31, X
    1886:	15 97       	sbiw	r26, 0x05	; 5
    1888:	90 81       	ld	r25, Z
    188a:	95 ff       	sbrs	r25, 5
    188c:	fd cf       	rjmp	.-6      	; 0x1888 <_ZN14HardwareSerial5writeEh+0xa>
    188e:	1a 96       	adiw	r26, 0x0a	; 10
    1890:	ed 91       	ld	r30, X+
    1892:	fc 91       	ld	r31, X
    1894:	1b 97       	sbiw	r26, 0x0b	; 11
    1896:	60 83       	st	Z, r22
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	08 95       	ret

0000189e <_ZN14HardwareSerial5beginEmh>:
    189e:	cf 92       	push	r12
    18a0:	df 92       	push	r13
    18a2:	ef 92       	push	r14
    18a4:	ff 92       	push	r15
    18a6:	1f 93       	push	r17
    18a8:	cf 93       	push	r28
    18aa:	df 93       	push	r29
    18ac:	ec 01       	movw	r28, r24
    18ae:	6a 01       	movw	r12, r20
    18b0:	7b 01       	movw	r14, r22
    18b2:	12 2f       	mov	r17, r18
    18b4:	db 01       	movw	r26, r22
    18b6:	ca 01       	movw	r24, r20
    18b8:	88 0f       	add	r24, r24
    18ba:	99 1f       	adc	r25, r25
    18bc:	aa 1f       	adc	r26, r26
    18be:	bb 1f       	adc	r27, r27
    18c0:	88 0f       	add	r24, r24
    18c2:	99 1f       	adc	r25, r25
    18c4:	aa 1f       	adc	r26, r26
    18c6:	bb 1f       	adc	r27, r27
    18c8:	9c 01       	movw	r18, r24
    18ca:	ad 01       	movw	r20, r26
    18cc:	22 0f       	add	r18, r18
    18ce:	33 1f       	adc	r19, r19
    18d0:	44 1f       	adc	r20, r20
    18d2:	55 1f       	adc	r21, r21
    18d4:	60 e0       	ldi	r22, 0x00	; 0
    18d6:	74 e2       	ldi	r23, 0x24	; 36
    18d8:	84 ef       	ldi	r24, 0xF4	; 244
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	0e 94 0b 27 	call	0x4e16	; 0x4e16 <__udivmodsi4>
    18e0:	21 50       	subi	r18, 0x01	; 1
    18e2:	31 09       	sbc	r19, r1
    18e4:	ec 81       	ldd	r30, Y+4	; 0x04
    18e6:	fd 81       	ldd	r31, Y+5	; 0x05
    18e8:	82 e0       	ldi	r24, 0x02	; 2
    18ea:	80 83       	st	Z, r24
    18ec:	21 15       	cp	r18, r1
    18ee:	80 e1       	ldi	r24, 0x10	; 16
    18f0:	38 07       	cpc	r19, r24
    18f2:	70 f0       	brcs	.+28     	; 0x1910 <_ZN14HardwareSerial5beginEmh+0x72>
    18f4:	ec 81       	ldd	r30, Y+4	; 0x04
    18f6:	fd 81       	ldd	r31, Y+5	; 0x05
    18f8:	10 82       	st	Z, r1
    18fa:	80 e4       	ldi	r24, 0x40	; 64
    18fc:	92 e4       	ldi	r25, 0x42	; 66
    18fe:	c8 9e       	mul	r12, r24
    1900:	90 01       	movw	r18, r0
    1902:	c9 9e       	mul	r12, r25
    1904:	30 0d       	add	r19, r0
    1906:	d8 9e       	mul	r13, r24
    1908:	30 0d       	add	r19, r0
    190a:	11 24       	eor	r1, r1
    190c:	21 50       	subi	r18, 0x01	; 1
    190e:	31 09       	sbc	r19, r1
    1910:	ea 81       	ldd	r30, Y+2	; 0x02
    1912:	fb 81       	ldd	r31, Y+3	; 0x03
    1914:	31 83       	std	Z+1, r19	; 0x01
    1916:	20 83       	st	Z, r18
    1918:	e8 85       	ldd	r30, Y+8	; 0x08
    191a:	f9 85       	ldd	r31, Y+9	; 0x09
    191c:	10 83       	st	Z, r17
    191e:	ee 81       	ldd	r30, Y+6	; 0x06
    1920:	ff 81       	ldd	r31, Y+7	; 0x07
    1922:	80 81       	ld	r24, Z
    1924:	80 61       	ori	r24, 0x10	; 16
    1926:	80 83       	st	Z, r24
    1928:	ee 81       	ldd	r30, Y+6	; 0x06
    192a:	ff 81       	ldd	r31, Y+7	; 0x07
    192c:	80 81       	ld	r24, Z
    192e:	88 60       	ori	r24, 0x08	; 8
    1930:	80 83       	st	Z, r24
    1932:	df 91       	pop	r29
    1934:	cf 91       	pop	r28
    1936:	1f 91       	pop	r17
    1938:	ff 90       	pop	r15
    193a:	ef 90       	pop	r14
    193c:	df 90       	pop	r13
    193e:	cf 90       	pop	r12
    1940:	08 95       	ret

00001942 <_GLOBAL__sub_I__ZN14HardwareSerialC2ERVjRVhS3_S3_S3_>:

#include "HardwareSerial.h"
#include <avr/io.h>

HardwareSerial::HardwareSerial( Register16 &ubrr, Register &ucsra, Register &ucsrb, Register &ucsrc, Register &udr )
 : _ubrr(&ubrr), _ucsra(&ucsra), _ucsrb(&ucsrb), _ucsrc(&ucsrc), _udr(&udr)
    1942:	eb e4       	ldi	r30, 0x4B	; 75
    1944:	f7 e0       	ldi	r31, 0x07	; 7
    1946:	8e e6       	ldi	r24, 0x6E	; 110
    1948:	92 e0       	ldi	r25, 0x02	; 2
    194a:	91 83       	std	Z+1, r25	; 0x01
    194c:	80 83       	st	Z, r24
    194e:	24 ec       	ldi	r18, 0xC4	; 196
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	33 83       	std	Z+3, r19	; 0x03
    1954:	22 83       	std	Z+2, r18	; 0x02
    1956:	20 ec       	ldi	r18, 0xC0	; 192
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	35 83       	std	Z+5, r19	; 0x05
    195c:	24 83       	std	Z+4, r18	; 0x04
    195e:	21 ec       	ldi	r18, 0xC1	; 193
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	37 83       	std	Z+7, r19	; 0x07
    1964:	26 83       	std	Z+6, r18	; 0x06
    1966:	22 ec       	ldi	r18, 0xC2	; 194
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	31 87       	std	Z+9, r19	; 0x09
    196c:	20 87       	std	Z+8, r18	; 0x08
    196e:	26 ec       	ldi	r18, 0xC6	; 198
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	33 87       	std	Z+11, r19	; 0x0b
    1974:	22 87       	std	Z+10, r18	; 0x0a
    1976:	ef e3       	ldi	r30, 0x3F	; 63
    1978:	f7 e0       	ldi	r31, 0x07	; 7
    197a:	91 83       	std	Z+1, r25	; 0x01
    197c:	80 83       	st	Z, r24
    197e:	2c ec       	ldi	r18, 0xCC	; 204
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	33 83       	std	Z+3, r19	; 0x03
    1984:	22 83       	std	Z+2, r18	; 0x02
    1986:	28 ec       	ldi	r18, 0xC8	; 200
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	35 83       	std	Z+5, r19	; 0x05
    198c:	24 83       	std	Z+4, r18	; 0x04
    198e:	29 ec       	ldi	r18, 0xC9	; 201
    1990:	30 e0       	ldi	r19, 0x00	; 0
    1992:	37 83       	std	Z+7, r19	; 0x07
    1994:	26 83       	std	Z+6, r18	; 0x06
    1996:	2a ec       	ldi	r18, 0xCA	; 202
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	31 87       	std	Z+9, r19	; 0x09
    199c:	20 87       	std	Z+8, r18	; 0x08
    199e:	2e ec       	ldi	r18, 0xCE	; 206
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	33 87       	std	Z+11, r19	; 0x0b
    19a4:	22 87       	std	Z+10, r18	; 0x0a
    19a6:	e3 e3       	ldi	r30, 0x33	; 51
    19a8:	f7 e0       	ldi	r31, 0x07	; 7
    19aa:	91 83       	std	Z+1, r25	; 0x01
    19ac:	80 83       	st	Z, r24
    19ae:	24 ed       	ldi	r18, 0xD4	; 212
    19b0:	30 e0       	ldi	r19, 0x00	; 0
    19b2:	33 83       	std	Z+3, r19	; 0x03
    19b4:	22 83       	std	Z+2, r18	; 0x02
    19b6:	20 ed       	ldi	r18, 0xD0	; 208
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	35 83       	std	Z+5, r19	; 0x05
    19bc:	24 83       	std	Z+4, r18	; 0x04
    19be:	21 ed       	ldi	r18, 0xD1	; 209
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	37 83       	std	Z+7, r19	; 0x07
    19c4:	26 83       	std	Z+6, r18	; 0x06
    19c6:	22 ed       	ldi	r18, 0xD2	; 210
    19c8:	30 e0       	ldi	r19, 0x00	; 0
    19ca:	31 87       	std	Z+9, r19	; 0x09
    19cc:	20 87       	std	Z+8, r18	; 0x08
    19ce:	26 ed       	ldi	r18, 0xD6	; 214
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	33 87       	std	Z+11, r19	; 0x0b
    19d4:	22 87       	std	Z+10, r18	; 0x0a
    19d6:	e7 e2       	ldi	r30, 0x27	; 39
    19d8:	f7 e0       	ldi	r31, 0x07	; 7
    19da:	91 83       	std	Z+1, r25	; 0x01
    19dc:	80 83       	st	Z, r24
    19de:	84 e3       	ldi	r24, 0x34	; 52
    19e0:	91 e0       	ldi	r25, 0x01	; 1
    19e2:	93 83       	std	Z+3, r25	; 0x03
    19e4:	82 83       	std	Z+2, r24	; 0x02
    19e6:	80 e3       	ldi	r24, 0x30	; 48
    19e8:	91 e0       	ldi	r25, 0x01	; 1
    19ea:	95 83       	std	Z+5, r25	; 0x05
    19ec:	84 83       	std	Z+4, r24	; 0x04
    19ee:	81 e3       	ldi	r24, 0x31	; 49
    19f0:	91 e0       	ldi	r25, 0x01	; 1
    19f2:	97 83       	std	Z+7, r25	; 0x07
    19f4:	86 83       	std	Z+6, r24	; 0x06
    19f6:	82 e3       	ldi	r24, 0x32	; 50
    19f8:	91 e0       	ldi	r25, 0x01	; 1
    19fa:	91 87       	std	Z+9, r25	; 0x09
    19fc:	80 87       	std	Z+8, r24	; 0x08
    19fe:	86 e3       	ldi	r24, 0x36	; 54
    1a00:	91 e0       	ldi	r25, 0x01	; 1
    1a02:	93 87       	std	Z+11, r25	; 0x0b
    1a04:	82 87       	std	Z+10, r24	; 0x0a
    1a06:	08 95       	ret

00001a08 <_ZN13HardwareServo5beginEv>:
	*_icr = 40000; //Set period to 20ms
}

void HardwareServo::end(){
	*_tccrA = 0;
	*_tccrB = 0;
    1a08:	fc 01       	movw	r30, r24
    1a0a:	a2 81       	ldd	r26, Z+2	; 0x02
    1a0c:	b3 81       	ldd	r27, Z+3	; 0x03
    1a0e:	82 e0       	ldi	r24, 0x02	; 2
    1a10:	8c 93       	st	X, r24
    1a12:	a4 81       	ldd	r26, Z+4	; 0x04
    1a14:	b5 81       	ldd	r27, Z+5	; 0x05
    1a16:	8a e1       	ldi	r24, 0x1A	; 26
    1a18:	8c 93       	st	X, r24
    1a1a:	01 90       	ld	r0, Z+
    1a1c:	f0 81       	ld	r31, Z
    1a1e:	e0 2d       	mov	r30, r0
    1a20:	80 e4       	ldi	r24, 0x40	; 64
    1a22:	9c e9       	ldi	r25, 0x9C	; 156
    1a24:	91 83       	std	Z+1, r25	; 0x01
    1a26:	80 83       	st	Z, r24
    1a28:	08 95       	ret

00001a2a <_ZN13HardwareServo7EnableAEv>:
}

void HardwareServo::EnableA(){
    1a2a:	fc 01       	movw	r30, r24
	*_tccrA |= _BV(COM1A1);
    1a2c:	a2 81       	ldd	r26, Z+2	; 0x02
    1a2e:	b3 81       	ldd	r27, Z+3	; 0x03
    1a30:	8c 91       	ld	r24, X
    1a32:	80 68       	ori	r24, 0x80	; 128
    1a34:	8c 93       	st	X, r24
	*_DDR |= _PINA;
    1a36:	a4 85       	ldd	r26, Z+12	; 0x0c
    1a38:	b5 85       	ldd	r27, Z+13	; 0x0d
    1a3a:	9c 91       	ld	r25, X
    1a3c:	80 89       	ldd	r24, Z+16	; 0x10
    1a3e:	89 2b       	or	r24, r25
    1a40:	8c 93       	st	X, r24
    1a42:	08 95       	ret

00001a44 <_ZN13HardwareServo7EnableBEv>:
}

void HardwareServo::EnableB(){
    1a44:	fc 01       	movw	r30, r24
	*_tccrA |= _BV(COM1B1);
    1a46:	a2 81       	ldd	r26, Z+2	; 0x02
    1a48:	b3 81       	ldd	r27, Z+3	; 0x03
    1a4a:	8c 91       	ld	r24, X
    1a4c:	80 62       	ori	r24, 0x20	; 32
    1a4e:	8c 93       	st	X, r24
	*_DDR |= _PINB;
    1a50:	a4 85       	ldd	r26, Z+12	; 0x0c
    1a52:	b5 85       	ldd	r27, Z+13	; 0x0d
    1a54:	9c 91       	ld	r25, X
    1a56:	81 89       	ldd	r24, Z+17	; 0x11
    1a58:	89 2b       	or	r24, r25
    1a5a:	8c 93       	st	X, r24
    1a5c:	08 95       	ret

00001a5e <_ZN13HardwareServo7EnableCEv>:
}

void HardwareServo::EnableC(){
    1a5e:	fc 01       	movw	r30, r24
	*_tccrA |= _BV(COM1C1);
    1a60:	a2 81       	ldd	r26, Z+2	; 0x02
    1a62:	b3 81       	ldd	r27, Z+3	; 0x03
    1a64:	8c 91       	ld	r24, X
    1a66:	88 60       	ori	r24, 0x08	; 8
    1a68:	8c 93       	st	X, r24
	*_DDR |= _PINC;
    1a6a:	a4 85       	ldd	r26, Z+12	; 0x0c
    1a6c:	b5 85       	ldd	r27, Z+13	; 0x0d
    1a6e:	9c 91       	ld	r25, X
    1a70:	82 89       	ldd	r24, Z+18	; 0x12
    1a72:	89 2b       	or	r24, r25
    1a74:	8c 93       	st	X, r24
    1a76:	08 95       	ret

00001a78 <_ZN13HardwareServo8DisableAEv>:
}

void HardwareServo::DisableA(){
    1a78:	fc 01       	movw	r30, r24
	*_tccrA &= ~_BV(COM1A1);
    1a7a:	a2 81       	ldd	r26, Z+2	; 0x02
    1a7c:	b3 81       	ldd	r27, Z+3	; 0x03
    1a7e:	8c 91       	ld	r24, X
    1a80:	8f 77       	andi	r24, 0x7F	; 127
    1a82:	8c 93       	st	X, r24
	*_PORT &= ~_PINA;
    1a84:	a6 85       	ldd	r26, Z+14	; 0x0e
    1a86:	b7 85       	ldd	r27, Z+15	; 0x0f
    1a88:	9c 91       	ld	r25, X
    1a8a:	80 89       	ldd	r24, Z+16	; 0x10
    1a8c:	80 95       	com	r24
    1a8e:	89 23       	and	r24, r25
    1a90:	8c 93       	st	X, r24
    1a92:	08 95       	ret

00001a94 <_ZN13HardwareServo8DisableBEv>:
}

void HardwareServo::DisableB(){
    1a94:	fc 01       	movw	r30, r24
	*_tccrA &= ~_BV(COM1B1);
    1a96:	a2 81       	ldd	r26, Z+2	; 0x02
    1a98:	b3 81       	ldd	r27, Z+3	; 0x03
    1a9a:	8c 91       	ld	r24, X
    1a9c:	8f 7d       	andi	r24, 0xDF	; 223
    1a9e:	8c 93       	st	X, r24
	*_PORT &= ~_PINB;
    1aa0:	a6 85       	ldd	r26, Z+14	; 0x0e
    1aa2:	b7 85       	ldd	r27, Z+15	; 0x0f
    1aa4:	9c 91       	ld	r25, X
    1aa6:	81 89       	ldd	r24, Z+17	; 0x11
    1aa8:	80 95       	com	r24
    1aaa:	89 23       	and	r24, r25
    1aac:	8c 93       	st	X, r24
    1aae:	08 95       	ret

00001ab0 <_ZN13HardwareServo8DisableCEv>:
}

void HardwareServo::DisableC(){
    1ab0:	fc 01       	movw	r30, r24
	*_tccrA &= ~_BV(COM1C1);
    1ab2:	a2 81       	ldd	r26, Z+2	; 0x02
    1ab4:	b3 81       	ldd	r27, Z+3	; 0x03
    1ab6:	8c 91       	ld	r24, X
    1ab8:	87 7f       	andi	r24, 0xF7	; 247
    1aba:	8c 93       	st	X, r24
	*_PORT &= ~_PINC;	
    1abc:	a6 85       	ldd	r26, Z+14	; 0x0e
    1abe:	b7 85       	ldd	r27, Z+15	; 0x0f
    1ac0:	9c 91       	ld	r25, X
    1ac2:	82 89       	ldd	r24, Z+18	; 0x12
    1ac4:	80 95       	com	r24
    1ac6:	89 23       	and	r24, r25
    1ac8:	8c 93       	st	X, r24
    1aca:	08 95       	ret

00001acc <_ZN13HardwareServo9setPulseAEj>:
}

void HardwareServo::setPulseA(uint16_t pulse){
	//*_ocrA = (uint16_t)((((uint32_t)pulse * (_maxA - _minA)) / 255 + _minA) * CPU_CONST);
	*_ocrA = (uint16_t)(pulse * CPU_CONST);
    1acc:	dc 01       	movw	r26, r24
    1ace:	16 96       	adiw	r26, 0x06	; 6
    1ad0:	ed 91       	ld	r30, X+
    1ad2:	fc 91       	ld	r31, X
    1ad4:	17 97       	sbiw	r26, 0x07	; 7
    1ad6:	66 0f       	add	r22, r22
    1ad8:	77 1f       	adc	r23, r23
    1ada:	71 83       	std	Z+1, r23	; 0x01
    1adc:	60 83       	st	Z, r22
    1ade:	08 95       	ret

00001ae0 <_ZN13HardwareServo9setPulseBEj>:
}

void HardwareServo::setPulseB(uint16_t pulse){
	//*_ocrB = (uint16_t)((((uint32_t)pulse * (_maxB - _minB)) / 255 + _minB) * CPU_CONST);	
	*_ocrB = (uint16_t)(pulse * CPU_CONST);	
    1ae0:	dc 01       	movw	r26, r24
    1ae2:	18 96       	adiw	r26, 0x08	; 8
    1ae4:	ed 91       	ld	r30, X+
    1ae6:	fc 91       	ld	r31, X
    1ae8:	19 97       	sbiw	r26, 0x09	; 9
    1aea:	66 0f       	add	r22, r22
    1aec:	77 1f       	adc	r23, r23
    1aee:	71 83       	std	Z+1, r23	; 0x01
    1af0:	60 83       	st	Z, r22
    1af2:	08 95       	ret

00001af4 <_ZN13HardwareServo9setPulseCEj>:
}

void HardwareServo::setPulseC(uint16_t pulse) {
	//*_ocrC = (uint16_t)((((uint32_t)pulse * (_maxC - _minC)) / 255 + _minC) * CPU_CONST);	
	*_ocrC = (uint16_t)(pulse * CPU_CONST);
    1af4:	dc 01       	movw	r26, r24
    1af6:	1a 96       	adiw	r26, 0x0a	; 10
    1af8:	ed 91       	ld	r30, X+
    1afa:	fc 91       	ld	r31, X
    1afc:	1b 97       	sbiw	r26, 0x0b	; 11
    1afe:	66 0f       	add	r22, r22
    1b00:	77 1f       	adc	r23, r23
    1b02:	71 83       	std	Z+1, r23	; 0x01
    1b04:	60 83       	st	Z, r22
    1b06:	08 95       	ret

00001b08 <_GLOBAL__sub_I__ZN13HardwareServoC2ERVjRVhS3_S1_S1_S1_S3_S3_hhh>:
#define CLK_DIV_256 (_BV(CS02))
#define CLK_DIV_1024 (_BV(CS02) | _BV(CS00))

HardwareServo::HardwareServo(Register16 &icr, Register &tccrA, Register &tccrB, Register16 &ocrA, Register16 &ocrB, Register16 &ocrC, Register &ddr, Register &port, const uint8_t pinA, const uint8_t pinB, const uint8_t pinC)
 : _icr(&icr), _tccrA(&tccrA), _tccrB(&tccrB), _ocrA(&ocrA), _ocrB(&ocrB), _ocrC(&ocrC),
  _DDR(&ddr), _PORT(&port), _PINA(pinA), _PINB(pinB), _PINC(pinC)/*,
    1b08:	e0 e9       	ldi	r30, 0x90	; 144
    1b0a:	f7 e0       	ldi	r31, 0x07	; 7
    1b0c:	86 e8       	ldi	r24, 0x86	; 134
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	91 83       	std	Z+1, r25	; 0x01
    1b12:	80 83       	st	Z, r24
    1b14:	80 e8       	ldi	r24, 0x80	; 128
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	93 83       	std	Z+3, r25	; 0x03
    1b1a:	82 83       	std	Z+2, r24	; 0x02
    1b1c:	81 e8       	ldi	r24, 0x81	; 129
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	95 83       	std	Z+5, r25	; 0x05
    1b22:	84 83       	std	Z+4, r24	; 0x04
    1b24:	88 e8       	ldi	r24, 0x88	; 136
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	97 83       	std	Z+7, r25	; 0x07
    1b2a:	86 83       	std	Z+6, r24	; 0x06
    1b2c:	8a e8       	ldi	r24, 0x8A	; 138
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	91 87       	std	Z+9, r25	; 0x09
    1b32:	80 87       	std	Z+8, r24	; 0x08
    1b34:	8c e8       	ldi	r24, 0x8C	; 140
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	93 87       	std	Z+11, r25	; 0x0b
    1b3a:	82 87       	std	Z+10, r24	; 0x0a
    1b3c:	84 e2       	ldi	r24, 0x24	; 36
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	95 87       	std	Z+13, r25	; 0x0d
    1b42:	84 87       	std	Z+12, r24	; 0x0c
    1b44:	85 e2       	ldi	r24, 0x25	; 37
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	97 87       	std	Z+15, r25	; 0x0f
    1b4a:	86 87       	std	Z+14, r24	; 0x0e
    1b4c:	80 e2       	ldi	r24, 0x20	; 32
    1b4e:	80 8b       	std	Z+16, r24	; 0x10
    1b50:	90 e4       	ldi	r25, 0x40	; 64
    1b52:	91 8b       	std	Z+17, r25	; 0x11
    1b54:	90 e8       	ldi	r25, 0x80	; 128
    1b56:	92 8b       	std	Z+18, r25	; 0x12
    1b58:	ed e7       	ldi	r30, 0x7D	; 125
    1b5a:	f7 e0       	ldi	r31, 0x07	; 7
    1b5c:	26 e9       	ldi	r18, 0x96	; 150
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	31 83       	std	Z+1, r19	; 0x01
    1b62:	20 83       	st	Z, r18
    1b64:	20 e9       	ldi	r18, 0x90	; 144
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	33 83       	std	Z+3, r19	; 0x03
    1b6a:	22 83       	std	Z+2, r18	; 0x02
    1b6c:	21 e9       	ldi	r18, 0x91	; 145
    1b6e:	30 e0       	ldi	r19, 0x00	; 0
    1b70:	35 83       	std	Z+5, r19	; 0x05
    1b72:	24 83       	std	Z+4, r18	; 0x04
    1b74:	28 e9       	ldi	r18, 0x98	; 152
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	37 83       	std	Z+7, r19	; 0x07
    1b7a:	26 83       	std	Z+6, r18	; 0x06
    1b7c:	2a e9       	ldi	r18, 0x9A	; 154
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	31 87       	std	Z+9, r19	; 0x09
    1b82:	20 87       	std	Z+8, r18	; 0x08
    1b84:	2c e9       	ldi	r18, 0x9C	; 156
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	33 87       	std	Z+11, r19	; 0x0b
    1b8a:	22 87       	std	Z+10, r18	; 0x0a
    1b8c:	2d e2       	ldi	r18, 0x2D	; 45
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	35 87       	std	Z+13, r19	; 0x0d
    1b92:	24 87       	std	Z+12, r18	; 0x0c
    1b94:	2e e2       	ldi	r18, 0x2E	; 46
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	37 87       	std	Z+15, r19	; 0x0f
    1b9a:	26 87       	std	Z+14, r18	; 0x0e
    1b9c:	28 e0       	ldi	r18, 0x08	; 8
    1b9e:	20 8b       	std	Z+16, r18	; 0x10
    1ba0:	90 e1       	ldi	r25, 0x10	; 16
    1ba2:	91 8b       	std	Z+17, r25	; 0x11
    1ba4:	82 8b       	std	Z+18, r24	; 0x12
    1ba6:	ea e6       	ldi	r30, 0x6A	; 106
    1ba8:	f7 e0       	ldi	r31, 0x07	; 7
    1baa:	46 ea       	ldi	r20, 0xA6	; 166
    1bac:	50 e0       	ldi	r21, 0x00	; 0
    1bae:	51 83       	std	Z+1, r21	; 0x01
    1bb0:	40 83       	st	Z, r20
    1bb2:	40 ea       	ldi	r20, 0xA0	; 160
    1bb4:	50 e0       	ldi	r21, 0x00	; 0
    1bb6:	53 83       	std	Z+3, r21	; 0x03
    1bb8:	42 83       	std	Z+2, r20	; 0x02
    1bba:	41 ea       	ldi	r20, 0xA1	; 161
    1bbc:	50 e0       	ldi	r21, 0x00	; 0
    1bbe:	55 83       	std	Z+5, r21	; 0x05
    1bc0:	44 83       	std	Z+4, r20	; 0x04
    1bc2:	48 ea       	ldi	r20, 0xA8	; 168
    1bc4:	50 e0       	ldi	r21, 0x00	; 0
    1bc6:	57 83       	std	Z+7, r21	; 0x07
    1bc8:	46 83       	std	Z+6, r20	; 0x06
    1bca:	4a ea       	ldi	r20, 0xAA	; 170
    1bcc:	50 e0       	ldi	r21, 0x00	; 0
    1bce:	51 87       	std	Z+9, r21	; 0x09
    1bd0:	40 87       	std	Z+8, r20	; 0x08
    1bd2:	4c ea       	ldi	r20, 0xAC	; 172
    1bd4:	50 e0       	ldi	r21, 0x00	; 0
    1bd6:	53 87       	std	Z+11, r21	; 0x0b
    1bd8:	42 87       	std	Z+10, r20	; 0x0a
    1bda:	41 e0       	ldi	r20, 0x01	; 1
    1bdc:	51 e0       	ldi	r21, 0x01	; 1
    1bde:	55 87       	std	Z+13, r21	; 0x0d
    1be0:	44 87       	std	Z+12, r20	; 0x0c
    1be2:	42 e0       	ldi	r20, 0x02	; 2
    1be4:	51 e0       	ldi	r21, 0x01	; 1
    1be6:	57 87       	std	Z+15, r21	; 0x0f
    1be8:	46 87       	std	Z+14, r20	; 0x0e
    1bea:	20 8b       	std	Z+16, r18	; 0x10
    1bec:	91 8b       	std	Z+17, r25	; 0x11
    1bee:	82 8b       	std	Z+18, r24	; 0x12
    1bf0:	e7 e5       	ldi	r30, 0x57	; 87
    1bf2:	f7 e0       	ldi	r31, 0x07	; 7
    1bf4:	46 e2       	ldi	r20, 0x26	; 38
    1bf6:	51 e0       	ldi	r21, 0x01	; 1
    1bf8:	51 83       	std	Z+1, r21	; 0x01
    1bfa:	40 83       	st	Z, r20
    1bfc:	40 e2       	ldi	r20, 0x20	; 32
    1bfe:	51 e0       	ldi	r21, 0x01	; 1
    1c00:	53 83       	std	Z+3, r21	; 0x03
    1c02:	42 83       	std	Z+2, r20	; 0x02
    1c04:	41 e2       	ldi	r20, 0x21	; 33
    1c06:	51 e0       	ldi	r21, 0x01	; 1
    1c08:	55 83       	std	Z+5, r21	; 0x05
    1c0a:	44 83       	std	Z+4, r20	; 0x04
    1c0c:	48 e2       	ldi	r20, 0x28	; 40
    1c0e:	51 e0       	ldi	r21, 0x01	; 1
    1c10:	57 83       	std	Z+7, r21	; 0x07
    1c12:	46 83       	std	Z+6, r20	; 0x06
    1c14:	4a e2       	ldi	r20, 0x2A	; 42
    1c16:	51 e0       	ldi	r21, 0x01	; 1
    1c18:	51 87       	std	Z+9, r21	; 0x09
    1c1a:	40 87       	std	Z+8, r20	; 0x08
    1c1c:	4c e2       	ldi	r20, 0x2C	; 44
    1c1e:	51 e0       	ldi	r21, 0x01	; 1
    1c20:	53 87       	std	Z+11, r21	; 0x0b
    1c22:	42 87       	std	Z+10, r20	; 0x0a
    1c24:	4a e0       	ldi	r20, 0x0A	; 10
    1c26:	51 e0       	ldi	r21, 0x01	; 1
    1c28:	55 87       	std	Z+13, r21	; 0x0d
    1c2a:	44 87       	std	Z+12, r20	; 0x0c
    1c2c:	4b e0       	ldi	r20, 0x0B	; 11
    1c2e:	51 e0       	ldi	r21, 0x01	; 1
    1c30:	57 87       	std	Z+15, r21	; 0x0f
    1c32:	46 87       	std	Z+14, r20	; 0x0e
    1c34:	20 8b       	std	Z+16, r18	; 0x10
    1c36:	91 8b       	std	Z+17, r25	; 0x11
    1c38:	82 8b       	std	Z+18, r24	; 0x12
    1c3a:	08 95       	ret

00001c3c <_ZN13HardwareTimer12findPrescaleEf>:
	beginMs(us / 1000.0);
}

void HardwareTimer::beginNs(float ns){
	beginMs(ns / 1000000.0);
}
    1c3c:	cf 92       	push	r12
    1c3e:	df 92       	push	r13
    1c40:	ef 92       	push	r14
    1c42:	ff 92       	push	r15
    1c44:	cf 93       	push	r28
    1c46:	df 93       	push	r29
    1c48:	ec 01       	movw	r28, r24
    1c4a:	cb 01       	movw	r24, r22
    1c4c:	ba 01       	movw	r22, r20
    1c4e:	20 e0       	ldi	r18, 0x00	; 0
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	4a e7       	ldi	r20, 0x7A	; 122
    1c54:	56 e4       	ldi	r21, 0x46	; 70
    1c56:	0e 94 99 26 	call	0x4d32	; 0x4d32 <__mulsf3>
    1c5a:	20 e0       	ldi	r18, 0x00	; 0
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	40 e8       	ldi	r20, 0x80	; 128
    1c60:	5b e3       	ldi	r21, 0x3B	; 59
    1c62:	0e 94 99 26 	call	0x4d32	; 0x4d32 <__mulsf3>
    1c66:	6b 01       	movw	r12, r22
    1c68:	7c 01       	movw	r14, r24
    1c6a:	20 e0       	ldi	r18, 0x00	; 0
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	40 e8       	ldi	r20, 0x80	; 128
    1c70:	5f e3       	ldi	r21, 0x3F	; 63
    1c72:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <__cmpsf2>
    1c76:	18 16       	cp	r1, r24
    1c78:	3c f0       	brlt	.+14     	; 0x1c88 <_ZN13HardwareTimer12findPrescaleEf+0x4c>
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
    1c7c:	8a 87       	std	Y+10, r24	; 0x0a
    1c7e:	60 e0       	ldi	r22, 0x00	; 0
    1c80:	70 e0       	ldi	r23, 0x00	; 0
    1c82:	80 e8       	ldi	r24, 0x80	; 128
    1c84:	9f e3       	ldi	r25, 0x3F	; 63
    1c86:	39 c0       	rjmp	.+114    	; 0x1cfa <_ZN13HardwareTimer12findPrescaleEf+0xbe>
    1c88:	20 e0       	ldi	r18, 0x00	; 0
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	40 e0       	ldi	r20, 0x00	; 0
    1c8e:	51 e4       	ldi	r21, 0x41	; 65
    1c90:	c7 01       	movw	r24, r14
    1c92:	b6 01       	movw	r22, r12
    1c94:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <__cmpsf2>
    1c98:	18 16       	cp	r1, r24
    1c9a:	3c f0       	brlt	.+14     	; 0x1caa <_ZN13HardwareTimer12findPrescaleEf+0x6e>
    1c9c:	82 e0       	ldi	r24, 0x02	; 2
    1c9e:	8a 87       	std	Y+10, r24	; 0x0a
    1ca0:	60 e0       	ldi	r22, 0x00	; 0
    1ca2:	70 e0       	ldi	r23, 0x00	; 0
    1ca4:	80 e0       	ldi	r24, 0x00	; 0
    1ca6:	91 e4       	ldi	r25, 0x41	; 65
    1ca8:	28 c0       	rjmp	.+80     	; 0x1cfa <_ZN13HardwareTimer12findPrescaleEf+0xbe>
    1caa:	20 e0       	ldi	r18, 0x00	; 0
    1cac:	30 e0       	ldi	r19, 0x00	; 0
    1cae:	40 e8       	ldi	r20, 0x80	; 128
    1cb0:	52 e4       	ldi	r21, 0x42	; 66
    1cb2:	c7 01       	movw	r24, r14
    1cb4:	b6 01       	movw	r22, r12
    1cb6:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <__cmpsf2>
    1cba:	18 16       	cp	r1, r24
    1cbc:	3c f0       	brlt	.+14     	; 0x1ccc <_ZN13HardwareTimer12findPrescaleEf+0x90>
    1cbe:	83 e0       	ldi	r24, 0x03	; 3
    1cc0:	8a 87       	std	Y+10, r24	; 0x0a
    1cc2:	60 e0       	ldi	r22, 0x00	; 0
    1cc4:	70 e0       	ldi	r23, 0x00	; 0
    1cc6:	80 e8       	ldi	r24, 0x80	; 128
    1cc8:	92 e4       	ldi	r25, 0x42	; 66
    1cca:	17 c0       	rjmp	.+46     	; 0x1cfa <_ZN13HardwareTimer12findPrescaleEf+0xbe>
    1ccc:	20 e0       	ldi	r18, 0x00	; 0
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	40 e8       	ldi	r20, 0x80	; 128
    1cd2:	53 e4       	ldi	r21, 0x43	; 67
    1cd4:	c7 01       	movw	r24, r14
    1cd6:	b6 01       	movw	r22, r12
    1cd8:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <__cmpsf2>
    1cdc:	18 16       	cp	r1, r24
    1cde:	3c f0       	brlt	.+14     	; 0x1cee <_ZN13HardwareTimer12findPrescaleEf+0xb2>
    1ce0:	84 e0       	ldi	r24, 0x04	; 4
    1ce2:	8a 87       	std	Y+10, r24	; 0x0a
    1ce4:	60 e0       	ldi	r22, 0x00	; 0
    1ce6:	70 e0       	ldi	r23, 0x00	; 0
    1ce8:	80 e8       	ldi	r24, 0x80	; 128
    1cea:	93 e4       	ldi	r25, 0x43	; 67
    1cec:	06 c0       	rjmp	.+12     	; 0x1cfa <_ZN13HardwareTimer12findPrescaleEf+0xbe>
    1cee:	85 e0       	ldi	r24, 0x05	; 5
    1cf0:	8a 87       	std	Y+10, r24	; 0x0a
    1cf2:	60 e0       	ldi	r22, 0x00	; 0
    1cf4:	70 e0       	ldi	r23, 0x00	; 0
    1cf6:	80 e8       	ldi	r24, 0x80	; 128
    1cf8:	94 e4       	ldi	r25, 0x44	; 68
    1cfa:	df 91       	pop	r29
    1cfc:	cf 91       	pop	r28
    1cfe:	ff 90       	pop	r15
    1d00:	ef 90       	pop	r14
    1d02:	df 90       	pop	r13
    1d04:	cf 90       	pop	r12
    1d06:	08 95       	ret

00001d08 <_ZN13HardwareTimer7beginMsEf>:
    1d08:	8f 92       	push	r8
    1d0a:	9f 92       	push	r9
    1d0c:	af 92       	push	r10
    1d0e:	bf 92       	push	r11
    1d10:	cf 92       	push	r12
    1d12:	df 92       	push	r13
    1d14:	ef 92       	push	r14
    1d16:	ff 92       	push	r15
    1d18:	cf 93       	push	r28
    1d1a:	df 93       	push	r29
    1d1c:	ec 01       	movw	r28, r24
    1d1e:	6a 01       	movw	r12, r20
    1d20:	7b 01       	movw	r14, r22
    1d22:	e8 81       	ld	r30, Y
    1d24:	f9 81       	ldd	r31, Y+1	; 0x01
    1d26:	82 e0       	ldi	r24, 0x02	; 2
    1d28:	80 83       	st	Z, r24
    1d2a:	ea 81       	ldd	r30, Y+2	; 0x02
    1d2c:	fb 81       	ldd	r31, Y+3	; 0x03
    1d2e:	10 82       	st	Z, r1
    1d30:	ec 81       	ldd	r30, Y+4	; 0x04
    1d32:	fd 81       	ldd	r31, Y+5	; 0x05
    1d34:	80 83       	st	Z, r24
    1d36:	78 94       	sei
    1d38:	ce 01       	movw	r24, r28
    1d3a:	80 df       	rcall	.-256    	; 0x1c3c <_ZN13HardwareTimer12findPrescaleEf>
    1d3c:	4b 01       	movw	r8, r22
    1d3e:	5c 01       	movw	r10, r24
    1d40:	20 e0       	ldi	r18, 0x00	; 0
    1d42:	34 e2       	ldi	r19, 0x24	; 36
    1d44:	44 e7       	ldi	r20, 0x74	; 116
    1d46:	5b e4       	ldi	r21, 0x4B	; 75
    1d48:	c7 01       	movw	r24, r14
    1d4a:	b6 01       	movw	r22, r12
    1d4c:	0e 94 99 26 	call	0x4d32	; 0x4d32 <__mulsf3>
    1d50:	6b 01       	movw	r12, r22
    1d52:	7c 01       	movw	r14, r24
    1d54:	20 e0       	ldi	r18, 0x00	; 0
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	4a e7       	ldi	r20, 0x7A	; 122
    1d5a:	54 e4       	ldi	r21, 0x44	; 68
    1d5c:	c5 01       	movw	r24, r10
    1d5e:	b4 01       	movw	r22, r8
    1d60:	0e 94 99 26 	call	0x4d32	; 0x4d32 <__mulsf3>
    1d64:	9b 01       	movw	r18, r22
    1d66:	ac 01       	movw	r20, r24
    1d68:	c7 01       	movw	r24, r14
    1d6a:	b6 01       	movw	r22, r12
    1d6c:	0e 94 4f 25 	call	0x4a9e	; 0x4a9e <__divsf3>
    1d70:	20 e0       	ldi	r18, 0x00	; 0
    1d72:	30 e0       	ldi	r19, 0x00	; 0
    1d74:	40 e8       	ldi	r20, 0x80	; 128
    1d76:	5f e3       	ldi	r21, 0x3F	; 63
    1d78:	0e 94 e6 24 	call	0x49cc	; 0x49cc <__subsf3>
    1d7c:	6b 01       	movw	r12, r22
    1d7e:	7c 01       	movw	r14, r24
    1d80:	20 e0       	ldi	r18, 0x00	; 0
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	4f e7       	ldi	r20, 0x7F	; 127
    1d86:	53 e4       	ldi	r21, 0x43	; 67
    1d88:	0e 94 95 26 	call	0x4d2a	; 0x4d2a <__gesf2>
    1d8c:	18 16       	cp	r1, r24
    1d8e:	2c f4       	brge	.+10     	; 0x1d9a <_ZN13HardwareTimer7beginMsEf+0x92>
    1d90:	e8 85       	ldd	r30, Y+8	; 0x08
    1d92:	f9 85       	ldd	r31, Y+9	; 0x09
    1d94:	8f ef       	ldi	r24, 0xFF	; 255
    1d96:	80 83       	st	Z, r24
    1d98:	1b c0       	rjmp	.+54     	; 0x1dd0 <_ZN13HardwareTimer7beginMsEf+0xc8>
    1d9a:	20 e0       	ldi	r18, 0x00	; 0
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	a9 01       	movw	r20, r18
    1da0:	c7 01       	movw	r24, r14
    1da2:	b6 01       	movw	r22, r12
    1da4:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <__cmpsf2>
    1da8:	88 23       	and	r24, r24
    1daa:	24 f4       	brge	.+8      	; 0x1db4 <_ZN13HardwareTimer7beginMsEf+0xac>
    1dac:	e8 85       	ldd	r30, Y+8	; 0x08
    1dae:	f9 85       	ldd	r31, Y+9	; 0x09
    1db0:	10 82       	st	Z, r1
    1db2:	0e c0       	rjmp	.+28     	; 0x1dd0 <_ZN13HardwareTimer7beginMsEf+0xc8>
    1db4:	08 84       	ldd	r0, Y+8	; 0x08
    1db6:	d9 85       	ldd	r29, Y+9	; 0x09
    1db8:	c0 2d       	mov	r28, r0
    1dba:	20 e0       	ldi	r18, 0x00	; 0
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	40 e0       	ldi	r20, 0x00	; 0
    1dc0:	5f e3       	ldi	r21, 0x3F	; 63
    1dc2:	c7 01       	movw	r24, r14
    1dc4:	b6 01       	movw	r22, r12
    1dc6:	0e 94 e7 24 	call	0x49ce	; 0x49ce <__addsf3>
    1dca:	0e 94 b7 25 	call	0x4b6e	; 0x4b6e <__fixunssfsi>
    1dce:	68 83       	st	Y, r22
    1dd0:	df 91       	pop	r29
    1dd2:	cf 91       	pop	r28
    1dd4:	ff 90       	pop	r15
    1dd6:	ef 90       	pop	r14
    1dd8:	df 90       	pop	r13
    1dda:	cf 90       	pop	r12
    1ddc:	bf 90       	pop	r11
    1dde:	af 90       	pop	r10
    1de0:	9f 90       	pop	r9
    1de2:	8f 90       	pop	r8
    1de4:	08 95       	ret

00001de6 <_ZN13HardwareTimer5startEh>:

void HardwareTimer::start(uint8_t ticks/*= 1*/){
    1de6:	fc 01       	movw	r30, r24
	*_tccrB = 0; //Disable timer
    1de8:	a2 81       	ldd	r26, Z+2	; 0x02
    1dea:	b3 81       	ldd	r27, Z+3	; 0x03
    1dec:	1c 92       	st	X, r1
	ovfRemaining = ticks;
    1dee:	63 87       	std	Z+11, r22	; 0x0b
	*_tcnt = 0; //Reset timer
    1df0:	a6 81       	ldd	r26, Z+6	; 0x06
    1df2:	b7 81       	ldd	r27, Z+7	; 0x07
    1df4:	1c 92       	st	X, r1
	*_tccrB = CLK_DIV_1024; 
    1df6:	02 80       	ldd	r0, Z+2	; 0x02
    1df8:	f3 81       	ldd	r31, Z+3	; 0x03
    1dfa:	e0 2d       	mov	r30, r0
    1dfc:	85 e0       	ldi	r24, 0x05	; 5
    1dfe:	80 83       	st	Z, r24
    1e00:	08 95       	ret

00001e02 <_ZN13HardwareTimer8finishedEv>:
}

bool HardwareTimer::finished(){
	return ovfRemaining == 0;
    1e02:	fc 01       	movw	r30, r24
    1e04:	93 85       	ldd	r25, Z+11	; 0x0b
    1e06:	81 e0       	ldi	r24, 0x01	; 1
    1e08:	91 11       	cpse	r25, r1
    1e0a:	80 e0       	ldi	r24, 0x00	; 0
}
    1e0c:	08 95       	ret

00001e0e <_ZN13HardwareTimer13waitForFinishEv>:

void HardwareTimer::waitForFinish(){
    1e0e:	fc 01       	movw	r30, r24
	while(ovfRemaining != 0){
    1e10:	93 85       	ldd	r25, Z+11	; 0x0b
    1e12:	91 11       	cpse	r25, r1
    1e14:	fd cf       	rjmp	.-6      	; 0x1e10 <_ZN13HardwareTimer13waitForFinishEv+0x2>
	}
}
    1e16:	08 95       	ret

00001e18 <_ZN13HardwareTimer14isr_timer_compEv>:

void HardwareTimer::isr_timer_comp(){
    1e18:	fc 01       	movw	r30, r24
	if(ovfRemaining > 0) ovfRemaining--;
    1e1a:	83 85       	ldd	r24, Z+11	; 0x0b
    1e1c:	88 23       	and	r24, r24
    1e1e:	19 f0       	breq	.+6      	; 0x1e26 <_ZN13HardwareTimer14isr_timer_compEv+0xe>
    1e20:	83 85       	ldd	r24, Z+11	; 0x0b
    1e22:	81 50       	subi	r24, 0x01	; 1
    1e24:	83 87       	std	Z+11, r24	; 0x0b
    1e26:	08 95       	ret

00001e28 <__vector_21>:
}

#ifdef USE_TIMER_0
HardwareTimer Timer0(TCCR0A, TCCR0B, TIMSK0, TCNT0, OCR0A);

ISR(TIMER0_COMPA_vect){
    1e28:	1f 92       	push	r1
    1e2a:	0f 92       	push	r0
    1e2c:	0f b6       	in	r0, 0x3f	; 63
    1e2e:	0f 92       	push	r0
    1e30:	11 24       	eor	r1, r1
    1e32:	0b b6       	in	r0, 0x3b	; 59
    1e34:	0f 92       	push	r0
    1e36:	2f 93       	push	r18
    1e38:	3f 93       	push	r19
    1e3a:	4f 93       	push	r20
    1e3c:	5f 93       	push	r21
    1e3e:	6f 93       	push	r22
    1e40:	7f 93       	push	r23
    1e42:	8f 93       	push	r24
    1e44:	9f 93       	push	r25
    1e46:	af 93       	push	r26
    1e48:	bf 93       	push	r27
    1e4a:	ef 93       	push	r30
    1e4c:	ff 93       	push	r31
	Timer0.isr_timer_comp();
    1e4e:	8f ea       	ldi	r24, 0xAF	; 175
    1e50:	97 e0       	ldi	r25, 0x07	; 7
    1e52:	e2 df       	rcall	.-60     	; 0x1e18 <_ZN13HardwareTimer14isr_timer_compEv>
}
    1e54:	ff 91       	pop	r31
    1e56:	ef 91       	pop	r30
    1e58:	bf 91       	pop	r27
    1e5a:	af 91       	pop	r26
    1e5c:	9f 91       	pop	r25
    1e5e:	8f 91       	pop	r24
    1e60:	7f 91       	pop	r23
    1e62:	6f 91       	pop	r22
    1e64:	5f 91       	pop	r21
    1e66:	4f 91       	pop	r20
    1e68:	3f 91       	pop	r19
    1e6a:	2f 91       	pop	r18
    1e6c:	0f 90       	pop	r0
    1e6e:	0b be       	out	0x3b, r0	; 59
    1e70:	0f 90       	pop	r0
    1e72:	0f be       	out	0x3f, r0	; 63
    1e74:	0f 90       	pop	r0
    1e76:	1f 90       	pop	r1
    1e78:	18 95       	reti

00001e7a <__vector_13>:
#endif

#ifdef USE_TIMER_2
HardwareTimer Timer2(TCCR2A, TCCR2B, TIMSK2, TCNT2, OCR2A);

ISR(TIMER2_COMPA_vect){
    1e7a:	1f 92       	push	r1
    1e7c:	0f 92       	push	r0
    1e7e:	0f b6       	in	r0, 0x3f	; 63
    1e80:	0f 92       	push	r0
    1e82:	11 24       	eor	r1, r1
    1e84:	0b b6       	in	r0, 0x3b	; 59
    1e86:	0f 92       	push	r0
    1e88:	2f 93       	push	r18
    1e8a:	3f 93       	push	r19
    1e8c:	4f 93       	push	r20
    1e8e:	5f 93       	push	r21
    1e90:	6f 93       	push	r22
    1e92:	7f 93       	push	r23
    1e94:	8f 93       	push	r24
    1e96:	9f 93       	push	r25
    1e98:	af 93       	push	r26
    1e9a:	bf 93       	push	r27
    1e9c:	ef 93       	push	r30
    1e9e:	ff 93       	push	r31
	Timer2.isr_timer_comp();
    1ea0:	83 ea       	ldi	r24, 0xA3	; 163
    1ea2:	97 e0       	ldi	r25, 0x07	; 7
    1ea4:	b9 df       	rcall	.-142    	; 0x1e18 <_ZN13HardwareTimer14isr_timer_compEv>
}
    1ea6:	ff 91       	pop	r31
    1ea8:	ef 91       	pop	r30
    1eaa:	bf 91       	pop	r27
    1eac:	af 91       	pop	r26
    1eae:	9f 91       	pop	r25
    1eb0:	8f 91       	pop	r24
    1eb2:	7f 91       	pop	r23
    1eb4:	6f 91       	pop	r22
    1eb6:	5f 91       	pop	r21
    1eb8:	4f 91       	pop	r20
    1eba:	3f 91       	pop	r19
    1ebc:	2f 91       	pop	r18
    1ebe:	0f 90       	pop	r0
    1ec0:	0b be       	out	0x3b, r0	; 59
    1ec2:	0f 90       	pop	r0
    1ec4:	0f be       	out	0x3f, r0	; 63
    1ec6:	0f 90       	pop	r0
    1ec8:	1f 90       	pop	r1
    1eca:	18 95       	reti

00001ecc <_GLOBAL__sub_I__ZN13HardwareTimerC2ERVhS1_S1_S1_S1_>:
#define CLK_DIV_64 (_BV(CS01) | _BV(CS00))
#define CLK_DIV_256 (_BV(CS02))
#define CLK_DIV_1024 (_BV(CS02) | _BV(CS00))

HardwareTimer::HardwareTimer(Register &tccrA, Register &tccrB, Register &timsk, Register &tcnt, Register &ocra)
: _tccrA(&tccrA), _tccrB(&tccrB), _timsk(&timsk), _tcnt(&tcnt), _ocra(&ocra)
    1ecc:	ef ea       	ldi	r30, 0xAF	; 175
    1ece:	f7 e0       	ldi	r31, 0x07	; 7
    1ed0:	84 e4       	ldi	r24, 0x44	; 68
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	91 83       	std	Z+1, r25	; 0x01
    1ed6:	80 83       	st	Z, r24
    1ed8:	85 e4       	ldi	r24, 0x45	; 69
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	93 83       	std	Z+3, r25	; 0x03
    1ede:	82 83       	std	Z+2, r24	; 0x02
    1ee0:	8e e6       	ldi	r24, 0x6E	; 110
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	95 83       	std	Z+5, r25	; 0x05
    1ee6:	84 83       	std	Z+4, r24	; 0x04
    1ee8:	86 e4       	ldi	r24, 0x46	; 70
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	97 83       	std	Z+7, r25	; 0x07
    1eee:	86 83       	std	Z+6, r24	; 0x06
    1ef0:	87 e4       	ldi	r24, 0x47	; 71
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	91 87       	std	Z+9, r25	; 0x09
    1ef6:	80 87       	std	Z+8, r24	; 0x08
    1ef8:	e3 ea       	ldi	r30, 0xA3	; 163
    1efa:	f7 e0       	ldi	r31, 0x07	; 7
    1efc:	80 eb       	ldi	r24, 0xB0	; 176
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	91 83       	std	Z+1, r25	; 0x01
    1f02:	80 83       	st	Z, r24
    1f04:	81 eb       	ldi	r24, 0xB1	; 177
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	93 83       	std	Z+3, r25	; 0x03
    1f0a:	82 83       	std	Z+2, r24	; 0x02
    1f0c:	80 e7       	ldi	r24, 0x70	; 112
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	95 83       	std	Z+5, r25	; 0x05
    1f12:	84 83       	std	Z+4, r24	; 0x04
    1f14:	82 eb       	ldi	r24, 0xB2	; 178
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	97 83       	std	Z+7, r25	; 0x07
    1f1a:	86 83       	std	Z+6, r24	; 0x06
    1f1c:	83 eb       	ldi	r24, 0xB3	; 179
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	91 87       	std	Z+9, r25	; 0x09
    1f22:	80 87       	std	Z+8, r24	; 0x08
    1f24:	08 95       	ret

00001f26 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1f26:	10 92 28 08 	sts	0x0828, r1	; 0x800828 <twi_state>
    1f2a:	81 e0       	ldi	r24, 0x01	; 1
    1f2c:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <twi_sendStop>
    1f30:	10 92 25 08 	sts	0x0825, r1	; 0x800825 <twi_inRepStart>
    1f34:	8b b1       	in	r24, 0x0b	; 11
    1f36:	83 60       	ori	r24, 0x03	; 3
    1f38:	8b b9       	out	0x0b, r24	; 11
    1f3a:	e9 eb       	ldi	r30, 0xB9	; 185
    1f3c:	f0 e0       	ldi	r31, 0x00	; 0
    1f3e:	80 81       	ld	r24, Z
    1f40:	8e 7f       	andi	r24, 0xFE	; 254
    1f42:	80 83       	st	Z, r24
    1f44:	80 81       	ld	r24, Z
    1f46:	8d 7f       	andi	r24, 0xFD	; 253
    1f48:	80 83       	st	Z, r24
    1f4a:	88 e4       	ldi	r24, 0x48	; 72
    1f4c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    1f50:	85 e4       	ldi	r24, 0x45	; 69
    1f52:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1f56:	08 95       	ret

00001f58 <twi_readFrom>:
    1f58:	41 32       	cpi	r20, 0x21	; 33
    1f5a:	08 f0       	brcs	.+2      	; 0x1f5e <twi_readFrom+0x6>
    1f5c:	4c c0       	rjmp	.+152    	; 0x1ff6 <twi_readFrom+0x9e>
    1f5e:	90 91 28 08 	lds	r25, 0x0828	; 0x800828 <twi_state>
    1f62:	91 11       	cpse	r25, r1
    1f64:	fc cf       	rjmp	.-8      	; 0x1f5e <twi_readFrom+0x6>
    1f66:	31 e0       	ldi	r19, 0x01	; 1
    1f68:	30 93 28 08 	sts	0x0828, r19	; 0x800828 <twi_state>
    1f6c:	20 93 26 08 	sts	0x0826, r18	; 0x800826 <twi_sendStop>
    1f70:	2f ef       	ldi	r18, 0xFF	; 255
    1f72:	20 93 bb 07 	sts	0x07BB, r18	; 0x8007bb <twi_error>
    1f76:	10 92 00 08 	sts	0x0800, r1	; 0x800800 <twi_masterBufferIndex>
    1f7a:	24 0f       	add	r18, r20
    1f7c:	20 93 ff 07 	sts	0x07FF, r18	; 0x8007ff <twi_masterBufferLength>
    1f80:	30 93 27 08 	sts	0x0827, r19	; 0x800827 <twi_slarw>
    1f84:	20 91 27 08 	lds	r18, 0x0827	; 0x800827 <twi_slarw>
    1f88:	88 0f       	add	r24, r24
    1f8a:	82 2b       	or	r24, r18
    1f8c:	80 93 27 08 	sts	0x0827, r24	; 0x800827 <twi_slarw>
    1f90:	80 91 25 08 	lds	r24, 0x0825	; 0x800825 <twi_inRepStart>
    1f94:	81 30       	cpi	r24, 0x01	; 1
    1f96:	81 f4       	brne	.+32     	; 0x1fb8 <twi_readFrom+0x60>
    1f98:	10 92 25 08 	sts	0x0825, r1	; 0x800825 <twi_inRepStart>
    1f9c:	ab eb       	ldi	r26, 0xBB	; 187
    1f9e:	b0 e0       	ldi	r27, 0x00	; 0
    1fa0:	ec eb       	ldi	r30, 0xBC	; 188
    1fa2:	f0 e0       	ldi	r31, 0x00	; 0
    1fa4:	80 91 27 08 	lds	r24, 0x0827	; 0x800827 <twi_slarw>
    1fa8:	8c 93       	st	X, r24
    1faa:	80 81       	ld	r24, Z
    1fac:	83 fd       	sbrc	r24, 3
    1fae:	fa cf       	rjmp	.-12     	; 0x1fa4 <twi_readFrom+0x4c>
    1fb0:	85 ec       	ldi	r24, 0xC5	; 197
    1fb2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1fb6:	03 c0       	rjmp	.+6      	; 0x1fbe <twi_readFrom+0x66>
    1fb8:	85 ee       	ldi	r24, 0xE5	; 229
    1fba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1fbe:	80 91 28 08 	lds	r24, 0x0828	; 0x800828 <twi_state>
    1fc2:	81 30       	cpi	r24, 0x01	; 1
    1fc4:	e1 f3       	breq	.-8      	; 0x1fbe <twi_readFrom+0x66>
    1fc6:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <twi_masterBufferIndex>
    1fca:	84 17       	cp	r24, r20
    1fcc:	10 f4       	brcc	.+4      	; 0x1fd2 <twi_readFrom+0x7a>
    1fce:	40 91 00 08 	lds	r20, 0x0800	; 0x800800 <twi_masterBufferIndex>
    1fd2:	44 23       	and	r20, r20
    1fd4:	89 f0       	breq	.+34     	; 0x1ff8 <twi_readFrom+0xa0>
    1fd6:	e1 e0       	ldi	r30, 0x01	; 1
    1fd8:	f8 e0       	ldi	r31, 0x08	; 8
    1fda:	a6 2f       	mov	r26, r22
    1fdc:	b7 2f       	mov	r27, r23
    1fde:	2f ef       	ldi	r18, 0xFF	; 255
    1fe0:	24 0f       	add	r18, r20
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	2e 5f       	subi	r18, 0xFE	; 254
    1fe6:	37 4f       	sbci	r19, 0xF7	; 247
    1fe8:	81 91       	ld	r24, Z+
    1fea:	8d 93       	st	X+, r24
    1fec:	e2 17       	cp	r30, r18
    1fee:	f3 07       	cpc	r31, r19
    1ff0:	d9 f7       	brne	.-10     	; 0x1fe8 <twi_readFrom+0x90>
    1ff2:	94 2f       	mov	r25, r20
    1ff4:	01 c0       	rjmp	.+2      	; 0x1ff8 <twi_readFrom+0xa0>
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	89 2f       	mov	r24, r25
    1ffa:	08 95       	ret

00001ffc <twi_writeTo>:
    1ffc:	0f 93       	push	r16
    1ffe:	41 32       	cpi	r20, 0x21	; 33
    2000:	08 f0       	brcs	.+2      	; 0x2004 <twi_writeTo+0x8>
    2002:	57 c0       	rjmp	.+174    	; 0x20b2 <twi_writeTo+0xb6>
    2004:	30 91 28 08 	lds	r19, 0x0828	; 0x800828 <twi_state>
    2008:	31 11       	cpse	r19, r1
    200a:	fc cf       	rjmp	.-8      	; 0x2004 <twi_writeTo+0x8>
    200c:	92 e0       	ldi	r25, 0x02	; 2
    200e:	90 93 28 08 	sts	0x0828, r25	; 0x800828 <twi_state>
    2012:	00 93 26 08 	sts	0x0826, r16	; 0x800826 <twi_sendStop>
    2016:	9f ef       	ldi	r25, 0xFF	; 255
    2018:	90 93 bb 07 	sts	0x07BB, r25	; 0x8007bb <twi_error>
    201c:	10 92 00 08 	sts	0x0800, r1	; 0x800800 <twi_masterBufferIndex>
    2020:	40 93 ff 07 	sts	0x07FF, r20	; 0x8007ff <twi_masterBufferLength>
    2024:	44 23       	and	r20, r20
    2026:	71 f0       	breq	.+28     	; 0x2044 <twi_writeTo+0x48>
    2028:	fb 01       	movw	r30, r22
    202a:	a1 e0       	ldi	r26, 0x01	; 1
    202c:	b8 e0       	ldi	r27, 0x08	; 8
    202e:	41 50       	subi	r20, 0x01	; 1
    2030:	50 e0       	ldi	r21, 0x00	; 0
    2032:	4f 5f       	subi	r20, 0xFF	; 255
    2034:	5f 4f       	sbci	r21, 0xFF	; 255
    2036:	64 0f       	add	r22, r20
    2038:	75 1f       	adc	r23, r21
    203a:	91 91       	ld	r25, Z+
    203c:	9d 93       	st	X+, r25
    203e:	e6 17       	cp	r30, r22
    2040:	f7 07       	cpc	r31, r23
    2042:	d9 f7       	brne	.-10     	; 0x203a <twi_writeTo+0x3e>
    2044:	10 92 27 08 	sts	0x0827, r1	; 0x800827 <twi_slarw>
    2048:	90 91 27 08 	lds	r25, 0x0827	; 0x800827 <twi_slarw>
    204c:	88 0f       	add	r24, r24
    204e:	89 2b       	or	r24, r25
    2050:	80 93 27 08 	sts	0x0827, r24	; 0x800827 <twi_slarw>
    2054:	80 91 25 08 	lds	r24, 0x0825	; 0x800825 <twi_inRepStart>
    2058:	81 30       	cpi	r24, 0x01	; 1
    205a:	81 f4       	brne	.+32     	; 0x207c <twi_writeTo+0x80>
    205c:	10 92 25 08 	sts	0x0825, r1	; 0x800825 <twi_inRepStart>
    2060:	ab eb       	ldi	r26, 0xBB	; 187
    2062:	b0 e0       	ldi	r27, 0x00	; 0
    2064:	ec eb       	ldi	r30, 0xBC	; 188
    2066:	f0 e0       	ldi	r31, 0x00	; 0
    2068:	80 91 27 08 	lds	r24, 0x0827	; 0x800827 <twi_slarw>
    206c:	8c 93       	st	X, r24
    206e:	80 81       	ld	r24, Z
    2070:	83 fd       	sbrc	r24, 3
    2072:	fa cf       	rjmp	.-12     	; 0x2068 <twi_writeTo+0x6c>
    2074:	85 ec       	ldi	r24, 0xC5	; 197
    2076:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    207a:	03 c0       	rjmp	.+6      	; 0x2082 <twi_writeTo+0x86>
    207c:	85 ee       	ldi	r24, 0xE5	; 229
    207e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2082:	22 23       	and	r18, r18
    2084:	41 f0       	breq	.+16     	; 0x2096 <twi_writeTo+0x9a>
    2086:	80 91 28 08 	lds	r24, 0x0828	; 0x800828 <twi_state>
    208a:	82 30       	cpi	r24, 0x02	; 2
    208c:	21 f4       	brne	.+8      	; 0x2096 <twi_writeTo+0x9a>
    208e:	80 91 28 08 	lds	r24, 0x0828	; 0x800828 <twi_state>
    2092:	82 30       	cpi	r24, 0x02	; 2
    2094:	e1 f3       	breq	.-8      	; 0x208e <twi_writeTo+0x92>
    2096:	80 91 bb 07 	lds	r24, 0x07BB	; 0x8007bb <twi_error>
    209a:	8f 3f       	cpi	r24, 0xFF	; 255
    209c:	79 f0       	breq	.+30     	; 0x20bc <twi_writeTo+0xc0>
    209e:	80 91 bb 07 	lds	r24, 0x07BB	; 0x8007bb <twi_error>
    20a2:	80 32       	cpi	r24, 0x20	; 32
    20a4:	41 f0       	breq	.+16     	; 0x20b6 <twi_writeTo+0xba>
    20a6:	80 91 bb 07 	lds	r24, 0x07BB	; 0x8007bb <twi_error>
    20aa:	80 33       	cpi	r24, 0x30	; 48
    20ac:	31 f0       	breq	.+12     	; 0x20ba <twi_writeTo+0xbe>
    20ae:	34 e0       	ldi	r19, 0x04	; 4
    20b0:	05 c0       	rjmp	.+10     	; 0x20bc <twi_writeTo+0xc0>
    20b2:	31 e0       	ldi	r19, 0x01	; 1
    20b4:	03 c0       	rjmp	.+6      	; 0x20bc <twi_writeTo+0xc0>
    20b6:	32 e0       	ldi	r19, 0x02	; 2
    20b8:	01 c0       	rjmp	.+2      	; 0x20bc <twi_writeTo+0xc0>
    20ba:	33 e0       	ldi	r19, 0x03	; 3
    20bc:	83 2f       	mov	r24, r19
    20be:	0f 91       	pop	r16
    20c0:	08 95       	ret

000020c2 <twi_transmit>:
    20c2:	40 91 dd 07 	lds	r20, 0x07DD	; 0x8007dd <twi_txBufferLength>
    20c6:	26 2f       	mov	r18, r22
    20c8:	30 e0       	ldi	r19, 0x00	; 0
    20ca:	24 0f       	add	r18, r20
    20cc:	31 1d       	adc	r19, r1
    20ce:	21 32       	cpi	r18, 0x21	; 33
    20d0:	31 05       	cpc	r19, r1
    20d2:	ec f4       	brge	.+58     	; 0x210e <twi_transmit+0x4c>
    20d4:	20 91 28 08 	lds	r18, 0x0828	; 0x800828 <twi_state>
    20d8:	24 30       	cpi	r18, 0x04	; 4
    20da:	d9 f4       	brne	.+54     	; 0x2112 <twi_transmit+0x50>
    20dc:	66 23       	and	r22, r22
    20de:	81 f0       	breq	.+32     	; 0x2100 <twi_transmit+0x3e>
    20e0:	a8 2f       	mov	r26, r24
    20e2:	b9 2f       	mov	r27, r25
    20e4:	80 e0       	ldi	r24, 0x00	; 0
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	30 91 dd 07 	lds	r19, 0x07DD	; 0x8007dd <twi_txBufferLength>
    20ec:	2d 91       	ld	r18, X+
    20ee:	fc 01       	movw	r30, r24
    20f0:	e1 52       	subi	r30, 0x21	; 33
    20f2:	f8 4f       	sbci	r31, 0xF8	; 248
    20f4:	e3 0f       	add	r30, r19
    20f6:	f1 1d       	adc	r31, r1
    20f8:	20 83       	st	Z, r18
    20fa:	01 96       	adiw	r24, 0x01	; 1
    20fc:	86 17       	cp	r24, r22
    20fe:	a0 f3       	brcs	.-24     	; 0x20e8 <twi_transmit+0x26>
    2100:	80 91 dd 07 	lds	r24, 0x07DD	; 0x8007dd <twi_txBufferLength>
    2104:	68 0f       	add	r22, r24
    2106:	60 93 dd 07 	sts	0x07DD, r22	; 0x8007dd <twi_txBufferLength>
    210a:	80 e0       	ldi	r24, 0x00	; 0
    210c:	08 95       	ret
    210e:	81 e0       	ldi	r24, 0x01	; 1
    2110:	08 95       	ret
    2112:	82 e0       	ldi	r24, 0x02	; 2
    2114:	08 95       	ret

00002116 <twi_attachSlaveRxEvent>:
    2116:	90 93 22 08 	sts	0x0822, r25	; 0x800822 <twi_onSlaveReceive+0x1>
    211a:	80 93 21 08 	sts	0x0821, r24	; 0x800821 <twi_onSlaveReceive>
    211e:	08 95       	ret

00002120 <twi_attachSlaveTxEvent>:
    2120:	90 93 24 08 	sts	0x0824, r25	; 0x800824 <twi_onSlaveTransmit+0x1>
    2124:	80 93 23 08 	sts	0x0823, r24	; 0x800823 <twi_onSlaveTransmit>
    2128:	08 95       	ret

0000212a <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    212a:	85 ed       	ldi	r24, 0xD5	; 213
    212c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    2130:	ec eb       	ldi	r30, 0xBC	; 188
    2132:	f0 e0       	ldi	r31, 0x00	; 0
    2134:	80 81       	ld	r24, Z
    2136:	84 fd       	sbrc	r24, 4
    2138:	fd cf       	rjmp	.-6      	; 0x2134 <twi_stop+0xa>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    213a:	10 92 28 08 	sts	0x0828, r1	; 0x800828 <twi_state>
    213e:	08 95       	ret

00002140 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    2140:	85 ec       	ldi	r24, 0xC5	; 197
    2142:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // update twi state
  twi_state = TWI_READY;
    2146:	10 92 28 08 	sts	0x0828, r1	; 0x800828 <twi_state>
    214a:	08 95       	ret

0000214c <__vector_39>:
}

ISR(TWI_vect)
{
    214c:	1f 92       	push	r1
    214e:	0f 92       	push	r0
    2150:	0f b6       	in	r0, 0x3f	; 63
    2152:	0f 92       	push	r0
    2154:	11 24       	eor	r1, r1
    2156:	0b b6       	in	r0, 0x3b	; 59
    2158:	0f 92       	push	r0
    215a:	2f 93       	push	r18
    215c:	3f 93       	push	r19
    215e:	4f 93       	push	r20
    2160:	5f 93       	push	r21
    2162:	6f 93       	push	r22
    2164:	7f 93       	push	r23
    2166:	8f 93       	push	r24
    2168:	9f 93       	push	r25
    216a:	af 93       	push	r26
    216c:	bf 93       	push	r27
    216e:	ef 93       	push	r30
    2170:	ff 93       	push	r31
  switch(TW_STATUS){
    2172:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    2176:	88 7f       	andi	r24, 0xF8	; 248
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	89 3c       	cpi	r24, 0xC9	; 201
    217c:	91 05       	cpc	r25, r1
    217e:	08 f0       	brcs	.+2      	; 0x2182 <__vector_39+0x36>
    2180:	ef c0       	rjmp	.+478    	; 0x2360 <__stack+0x161>
    2182:	fc 01       	movw	r30, r24
    2184:	88 27       	eor	r24, r24
    2186:	ee 58       	subi	r30, 0x8E	; 142
    2188:	ff 4f       	sbci	r31, 0xFF	; 255
    218a:	8f 4f       	sbci	r24, 0xFF	; 255
    218c:	0c 94 2d 27 	jmp	0x4e5a	; 0x4e5a <__tablejump2__>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    2190:	80 91 27 08 	lds	r24, 0x0827	; 0x800827 <twi_slarw>
    2194:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2198:	85 ec       	ldi	r24, 0xC5	; 197
    219a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    219e:	e0 c0       	rjmp	.+448    	; 0x2360 <__stack+0x161>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    21a0:	90 91 00 08 	lds	r25, 0x0800	; 0x800800 <twi_masterBufferIndex>
    21a4:	80 91 ff 07 	lds	r24, 0x07FF	; 0x8007ff <twi_masterBufferLength>
    21a8:	98 17       	cp	r25, r24
    21aa:	80 f4       	brcc	.+32     	; 0x21cc <__vector_39+0x80>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    21ac:	e0 91 00 08 	lds	r30, 0x0800	; 0x800800 <twi_masterBufferIndex>
    21b0:	81 e0       	ldi	r24, 0x01	; 1
    21b2:	8e 0f       	add	r24, r30
    21b4:	80 93 00 08 	sts	0x0800, r24	; 0x800800 <twi_masterBufferIndex>
    21b8:	f0 e0       	ldi	r31, 0x00	; 0
    21ba:	ef 5f       	subi	r30, 0xFF	; 255
    21bc:	f7 4f       	sbci	r31, 0xF7	; 247
    21be:	80 81       	ld	r24, Z
    21c0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    21c4:	85 ec       	ldi	r24, 0xC5	; 197
    21c6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    21ca:	ca c0       	rjmp	.+404    	; 0x2360 <__stack+0x161>
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
        twi_reply(1);
      }else{
	if (twi_sendStop)
    21cc:	80 91 26 08 	lds	r24, 0x0826	; 0x800826 <twi_sendStop>
    21d0:	88 23       	and	r24, r24
    21d2:	11 f0       	breq	.+4      	; 0x21d8 <__vector_39+0x8c>
          twi_stop();
    21d4:	aa df       	rcall	.-172    	; 0x212a <twi_stop>
    21d6:	c4 c0       	rjmp	.+392    	; 0x2360 <__stack+0x161>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    21d8:	81 e0       	ldi	r24, 0x01	; 1
    21da:	80 93 25 08 	sts	0x0825, r24	; 0x800825 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    21de:	84 ea       	ldi	r24, 0xA4	; 164
    21e0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	  twi_state = TWI_READY;
    21e4:	10 92 28 08 	sts	0x0828, r1	; 0x800828 <twi_state>
    21e8:	bb c0       	rjmp	.+374    	; 0x2360 <__stack+0x161>
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    21ea:	80 e2       	ldi	r24, 0x20	; 32
    21ec:	80 93 bb 07 	sts	0x07BB, r24	; 0x8007bb <twi_error>
      twi_stop();
    21f0:	9c df       	rcall	.-200    	; 0x212a <twi_stop>
      break;
    21f2:	b6 c0       	rjmp	.+364    	; 0x2360 <__stack+0x161>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    21f4:	80 e3       	ldi	r24, 0x30	; 48
    21f6:	80 93 bb 07 	sts	0x07BB, r24	; 0x8007bb <twi_error>
      twi_stop();
    21fa:	97 df       	rcall	.-210    	; 0x212a <twi_stop>
      break;
    21fc:	b1 c0       	rjmp	.+354    	; 0x2360 <__stack+0x161>
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    21fe:	88 e3       	ldi	r24, 0x38	; 56
    2200:	80 93 bb 07 	sts	0x07BB, r24	; 0x8007bb <twi_error>
      twi_releaseBus();
    2204:	9d df       	rcall	.-198    	; 0x2140 <twi_releaseBus>
      break;
    2206:	ac c0       	rjmp	.+344    	; 0x2360 <__stack+0x161>

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2208:	e0 91 00 08 	lds	r30, 0x0800	; 0x800800 <twi_masterBufferIndex>
    220c:	81 e0       	ldi	r24, 0x01	; 1
    220e:	8e 0f       	add	r24, r30
    2210:	80 93 00 08 	sts	0x0800, r24	; 0x800800 <twi_masterBufferIndex>
    2214:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2218:	f0 e0       	ldi	r31, 0x00	; 0
    221a:	ef 5f       	subi	r30, 0xFF	; 255
    221c:	f7 4f       	sbci	r31, 0xF7	; 247
    221e:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2220:	90 91 00 08 	lds	r25, 0x0800	; 0x800800 <twi_masterBufferIndex>
    2224:	80 91 ff 07 	lds	r24, 0x07FF	; 0x8007ff <twi_masterBufferLength>
    2228:	98 17       	cp	r25, r24
    222a:	20 f4       	brcc	.+8      	; 0x2234 <__stack+0x35>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    222c:	85 ec       	ldi	r24, 0xC5	; 197
    222e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2232:	96 c0       	rjmp	.+300    	; 0x2360 <__stack+0x161>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2234:	85 e8       	ldi	r24, 0x85	; 133
    2236:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    223a:	92 c0       	rjmp	.+292    	; 0x2360 <__stack+0x161>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    223c:	e0 91 00 08 	lds	r30, 0x0800	; 0x800800 <twi_masterBufferIndex>
    2240:	81 e0       	ldi	r24, 0x01	; 1
    2242:	8e 0f       	add	r24, r30
    2244:	80 93 00 08 	sts	0x0800, r24	; 0x800800 <twi_masterBufferIndex>
    2248:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    224c:	f0 e0       	ldi	r31, 0x00	; 0
    224e:	ef 5f       	subi	r30, 0xFF	; 255
    2250:	f7 4f       	sbci	r31, 0xF7	; 247
    2252:	80 83       	st	Z, r24
	if (twi_sendStop)
    2254:	80 91 26 08 	lds	r24, 0x0826	; 0x800826 <twi_sendStop>
    2258:	88 23       	and	r24, r24
          twi_stop();
    225a:	11 f0       	breq	.+4      	; 0x2260 <__stack+0x61>
    225c:	66 df       	rcall	.-308    	; 0x212a <twi_stop>
    225e:	80 c0       	rjmp	.+256    	; 0x2360 <__stack+0x161>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    2260:	81 e0       	ldi	r24, 0x01	; 1
    2262:	80 93 25 08 	sts	0x0825, r24	; 0x800825 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2266:	84 ea       	ldi	r24, 0xA4	; 164
    2268:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	  twi_state = TWI_READY;
    226c:	10 92 28 08 	sts	0x0828, r1	; 0x800828 <twi_state>
	}    
	break;
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
    2270:	77 c0       	rjmp	.+238    	; 0x2360 <__stack+0x161>
    2272:	5b df       	rcall	.-330    	; 0x212a <twi_stop>
      break;
    2274:	75 c0       	rjmp	.+234    	; 0x2360 <__stack+0x161>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    2276:	83 e0       	ldi	r24, 0x03	; 3
    2278:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    227c:	10 92 bc 07 	sts	0x07BC, r1	; 0x8007bc <twi_rxBufferIndex>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2280:	85 ec       	ldi	r24, 0xC5	; 197
    2282:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2286:	6c c0       	rjmp	.+216    	; 0x2360 <__stack+0x161>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2288:	80 91 bc 07 	lds	r24, 0x07BC	; 0x8007bc <twi_rxBufferIndex>
    228c:	80 32       	cpi	r24, 0x20	; 32
    228e:	80 f4       	brcc	.+32     	; 0x22b0 <__stack+0xb1>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    2290:	e0 91 bc 07 	lds	r30, 0x07BC	; 0x8007bc <twi_rxBufferIndex>
    2294:	81 e0       	ldi	r24, 0x01	; 1
    2296:	8e 0f       	add	r24, r30
    2298:	80 93 bc 07 	sts	0x07BC, r24	; 0x8007bc <twi_rxBufferIndex>
    229c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    22a0:	f0 e0       	ldi	r31, 0x00	; 0
    22a2:	e3 54       	subi	r30, 0x43	; 67
    22a4:	f8 4f       	sbci	r31, 0xF8	; 248
    22a6:	80 83       	st	Z, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    22a8:	85 ec       	ldi	r24, 0xC5	; 197
    22aa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    22ae:	58 c0       	rjmp	.+176    	; 0x2360 <__stack+0x161>
    22b0:	85 e8       	ldi	r24, 0x85	; 133
    22b2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    22b6:	54 c0       	rjmp	.+168    	; 0x2360 <__stack+0x161>
    22b8:	43 df       	rcall	.-378    	; 0x2140 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    22ba:	80 91 bc 07 	lds	r24, 0x07BC	; 0x8007bc <twi_rxBufferIndex>
    22be:	80 32       	cpi	r24, 0x20	; 32
    22c0:	30 f4       	brcc	.+12     	; 0x22ce <__stack+0xcf>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    22c2:	e0 91 bc 07 	lds	r30, 0x07BC	; 0x8007bc <twi_rxBufferIndex>
    22c6:	f0 e0       	ldi	r31, 0x00	; 0
    22c8:	e3 54       	subi	r30, 0x43	; 67
    22ca:	f8 4f       	sbci	r31, 0xF8	; 248
    22cc:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    22ce:	60 91 bc 07 	lds	r22, 0x07BC	; 0x8007bc <twi_rxBufferIndex>
    22d2:	70 e0       	ldi	r23, 0x00	; 0
    22d4:	e0 91 21 08 	lds	r30, 0x0821	; 0x800821 <twi_onSlaveReceive>
    22d8:	f0 91 22 08 	lds	r31, 0x0822	; 0x800822 <twi_onSlaveReceive+0x1>
    22dc:	8d eb       	ldi	r24, 0xBD	; 189
    22de:	97 e0       	ldi	r25, 0x07	; 7
    22e0:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    22e2:	10 92 bc 07 	sts	0x07BC, r1	; 0x8007bc <twi_rxBufferIndex>
      break;
    22e6:	3c c0       	rjmp	.+120    	; 0x2360 <__stack+0x161>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    22e8:	85 e8       	ldi	r24, 0x85	; 133
    22ea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    22ee:	38 c0       	rjmp	.+112    	; 0x2360 <__stack+0x161>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    22f0:	84 e0       	ldi	r24, 0x04	; 4
    22f2:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    22f6:	10 92 de 07 	sts	0x07DE, r1	; 0x8007de <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    22fa:	10 92 dd 07 	sts	0x07DD, r1	; 0x8007dd <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    22fe:	e0 91 23 08 	lds	r30, 0x0823	; 0x800823 <twi_onSlaveTransmit>
    2302:	f0 91 24 08 	lds	r31, 0x0824	; 0x800824 <twi_onSlaveTransmit+0x1>
    2306:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    2308:	80 91 dd 07 	lds	r24, 0x07DD	; 0x8007dd <twi_txBufferLength>
    230c:	81 11       	cpse	r24, r1
    230e:	05 c0       	rjmp	.+10     	; 0x231a <__stack+0x11b>
        twi_txBufferLength = 1;
    2310:	81 e0       	ldi	r24, 0x01	; 1
    2312:	80 93 dd 07 	sts	0x07DD, r24	; 0x8007dd <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    2316:	10 92 df 07 	sts	0x07DF, r1	; 0x8007df <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    231a:	e0 91 de 07 	lds	r30, 0x07DE	; 0x8007de <twi_txBufferIndex>
    231e:	81 e0       	ldi	r24, 0x01	; 1
    2320:	8e 0f       	add	r24, r30
    2322:	80 93 de 07 	sts	0x07DE, r24	; 0x8007de <twi_txBufferIndex>
    2326:	f0 e0       	ldi	r31, 0x00	; 0
    2328:	e1 52       	subi	r30, 0x21	; 33
    232a:	f8 4f       	sbci	r31, 0xF8	; 248
    232c:	80 81       	ld	r24, Z
    232e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2332:	90 91 de 07 	lds	r25, 0x07DE	; 0x8007de <twi_txBufferIndex>
    2336:	80 91 dd 07 	lds	r24, 0x07DD	; 0x8007dd <twi_txBufferLength>
    233a:	98 17       	cp	r25, r24
    233c:	20 f4       	brcc	.+8      	; 0x2346 <__stack+0x147>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    233e:	85 ec       	ldi	r24, 0xC5	; 197
    2340:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2344:	0d c0       	rjmp	.+26     	; 0x2360 <__stack+0x161>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2346:	85 e8       	ldi	r24, 0x85	; 133
    2348:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    234c:	09 c0       	rjmp	.+18     	; 0x2360 <__stack+0x161>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    234e:	85 ec       	ldi	r24, 0xC5	; 197
    2350:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    2354:	10 92 28 08 	sts	0x0828, r1	; 0x800828 <twi_state>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    2358:	03 c0       	rjmp	.+6      	; 0x2360 <__stack+0x161>
    235a:	10 92 bb 07 	sts	0x07BB, r1	; 0x8007bb <twi_error>
      twi_stop();
    235e:	e5 de       	rcall	.-566    	; 0x212a <twi_stop>
      break;
  }
    2360:	ff 91       	pop	r31
    2362:	ef 91       	pop	r30
    2364:	bf 91       	pop	r27
    2366:	af 91       	pop	r26
    2368:	9f 91       	pop	r25
    236a:	8f 91       	pop	r24
    236c:	7f 91       	pop	r23
    236e:	6f 91       	pop	r22
    2370:	5f 91       	pop	r21
    2372:	4f 91       	pop	r20
    2374:	3f 91       	pop	r19
    2376:	2f 91       	pop	r18
    2378:	0f 90       	pop	r0
    237a:	0b be       	out	0x3b, r0	; 59
    237c:	0f 90       	pop	r0
    237e:	0f be       	out	0x3f, r0	; 63
    2380:	0f 90       	pop	r0
    2382:	1f 90       	pop	r1
    2384:	18 95       	reti

00002386 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
	user_onRequest = function;
    2386:	80 91 53 08 	lds	r24, 0x0853	; 0x800853 <_ZN7TwoWire14rxBufferLengthE>
    238a:	90 e0       	ldi	r25, 0x00	; 0
    238c:	20 91 54 08 	lds	r18, 0x0854	; 0x800854 <_ZN7TwoWire13rxBufferIndexE>
    2390:	82 1b       	sub	r24, r18
    2392:	91 09       	sbc	r25, r1
    2394:	08 95       	ret

00002396 <_ZN7TwoWire4readEv>:
    2396:	90 91 54 08 	lds	r25, 0x0854	; 0x800854 <_ZN7TwoWire13rxBufferIndexE>
    239a:	80 91 53 08 	lds	r24, 0x0853	; 0x800853 <_ZN7TwoWire14rxBufferLengthE>
    239e:	98 17       	cp	r25, r24
    23a0:	50 f4       	brcc	.+20     	; 0x23b6 <_ZN7TwoWire4readEv+0x20>
    23a2:	e9 2f       	mov	r30, r25
    23a4:	f0 e0       	ldi	r31, 0x00	; 0
    23a6:	eb 5a       	subi	r30, 0xAB	; 171
    23a8:	f7 4f       	sbci	r31, 0xF7	; 247
    23aa:	20 81       	ld	r18, Z
    23ac:	30 e0       	ldi	r19, 0x00	; 0
    23ae:	9f 5f       	subi	r25, 0xFF	; 255
    23b0:	90 93 54 08 	sts	0x0854, r25	; 0x800854 <_ZN7TwoWire13rxBufferIndexE>
    23b4:	02 c0       	rjmp	.+4      	; 0x23ba <_ZN7TwoWire4readEv+0x24>
    23b6:	2f ef       	ldi	r18, 0xFF	; 255
    23b8:	3f ef       	ldi	r19, 0xFF	; 255
    23ba:	c9 01       	movw	r24, r18
    23bc:	08 95       	ret

000023be <_ZN7TwoWire4peekEv>:
    23be:	e0 91 54 08 	lds	r30, 0x0854	; 0x800854 <_ZN7TwoWire13rxBufferIndexE>
    23c2:	80 91 53 08 	lds	r24, 0x0853	; 0x800853 <_ZN7TwoWire14rxBufferLengthE>
    23c6:	e8 17       	cp	r30, r24
    23c8:	30 f4       	brcc	.+12     	; 0x23d6 <_ZN7TwoWire4peekEv+0x18>
    23ca:	f0 e0       	ldi	r31, 0x00	; 0
    23cc:	eb 5a       	subi	r30, 0xAB	; 171
    23ce:	f7 4f       	sbci	r31, 0xF7	; 247
    23d0:	80 81       	ld	r24, Z
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	08 95       	ret
    23d6:	8f ef       	ldi	r24, 0xFF	; 255
    23d8:	9f ef       	ldi	r25, 0xFF	; 255
    23da:	08 95       	ret

000023dc <_ZN7TwoWire5flushEv>:
    23dc:	08 95       	ret

000023de <_ZN7TwoWire16onReceiveServiceEPhi>:
    23de:	cf 93       	push	r28
    23e0:	df 93       	push	r29
    23e2:	ec 01       	movw	r28, r24
    23e4:	e0 91 2b 08 	lds	r30, 0x082B	; 0x80082b <_ZN7TwoWire14user_onReceiveE>
    23e8:	f0 91 2c 08 	lds	r31, 0x082C	; 0x80082c <_ZN7TwoWire14user_onReceiveE+0x1>
    23ec:	30 97       	sbiw	r30, 0x00	; 0
    23ee:	01 f1       	breq	.+64     	; 0x2430 <_ZN7TwoWire16onReceiveServiceEPhi+0x52>
    23f0:	90 91 54 08 	lds	r25, 0x0854	; 0x800854 <_ZN7TwoWire13rxBufferIndexE>
    23f4:	80 91 53 08 	lds	r24, 0x0853	; 0x800853 <_ZN7TwoWire14rxBufferLengthE>
    23f8:	98 17       	cp	r25, r24
    23fa:	d0 f0       	brcs	.+52     	; 0x2430 <_ZN7TwoWire16onReceiveServiceEPhi+0x52>
    23fc:	16 16       	cp	r1, r22
    23fe:	17 06       	cpc	r1, r23
    2400:	8c f4       	brge	.+34     	; 0x2424 <_ZN7TwoWire16onReceiveServiceEPhi+0x46>
    2402:	20 e0       	ldi	r18, 0x00	; 0
    2404:	30 e0       	ldi	r19, 0x00	; 0
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	de 01       	movw	r26, r28
    240a:	a9 0f       	add	r26, r25
    240c:	b1 1d       	adc	r27, r1
    240e:	4c 91       	ld	r20, X
    2410:	d9 01       	movw	r26, r18
    2412:	ab 5a       	subi	r26, 0xAB	; 171
    2414:	b7 4f       	sbci	r27, 0xF7	; 247
    2416:	4c 93       	st	X, r20
    2418:	9f 5f       	subi	r25, 0xFF	; 255
    241a:	29 2f       	mov	r18, r25
    241c:	30 e0       	ldi	r19, 0x00	; 0
    241e:	26 17       	cp	r18, r22
    2420:	37 07       	cpc	r19, r23
    2422:	94 f3       	brlt	.-28     	; 0x2408 <_ZN7TwoWire16onReceiveServiceEPhi+0x2a>
    2424:	cb 01       	movw	r24, r22
    2426:	10 92 54 08 	sts	0x0854, r1	; 0x800854 <_ZN7TwoWire13rxBufferIndexE>
    242a:	60 93 53 08 	sts	0x0853, r22	; 0x800853 <_ZN7TwoWire14rxBufferLengthE>
    242e:	19 95       	eicall
    2430:	df 91       	pop	r29
    2432:	cf 91       	pop	r28
    2434:	08 95       	ret

00002436 <_ZN7TwoWire16onRequestServiceEv>:
    2436:	e0 91 2d 08 	lds	r30, 0x082D	; 0x80082d <_ZN7TwoWire14user_onRequestE>
    243a:	f0 91 2e 08 	lds	r31, 0x082E	; 0x80082e <_ZN7TwoWire14user_onRequestE+0x1>
    243e:	30 97       	sbiw	r30, 0x00	; 0
    2440:	29 f0       	breq	.+10     	; 0x244c <_ZN7TwoWire16onRequestServiceEv+0x16>
    2442:	10 92 31 08 	sts	0x0831, r1	; 0x800831 <_ZN7TwoWire13txBufferIndexE>
    2446:	10 92 30 08 	sts	0x0830, r1	; 0x800830 <_ZN7TwoWire14txBufferLengthE>
    244a:	19 95       	eicall
    244c:	08 95       	ret

0000244e <_ZN7TwoWire5writeEh>:
    244e:	cf 93       	push	r28
    2450:	df 93       	push	r29
    2452:	1f 92       	push	r1
    2454:	cd b7       	in	r28, 0x3d	; 61
    2456:	de b7       	in	r29, 0x3e	; 62
    2458:	69 83       	std	Y+1, r22	; 0x01
    245a:	80 91 2f 08 	lds	r24, 0x082F	; 0x80082f <_ZN7TwoWire12transmittingE>
    245e:	88 23       	and	r24, r24
    2460:	99 f0       	breq	.+38     	; 0x2488 <_ZN7TwoWire5writeEh+0x3a>
    2462:	80 91 30 08 	lds	r24, 0x0830	; 0x800830 <_ZN7TwoWire14txBufferLengthE>
    2466:	80 32       	cpi	r24, 0x20	; 32
    2468:	b0 f4       	brcc	.+44     	; 0x2496 <_ZN7TwoWire5writeEh+0x48>
    246a:	80 91 31 08 	lds	r24, 0x0831	; 0x800831 <_ZN7TwoWire13txBufferIndexE>
    246e:	e8 2f       	mov	r30, r24
    2470:	f0 e0       	ldi	r31, 0x00	; 0
    2472:	ee 5c       	subi	r30, 0xCE	; 206
    2474:	f7 4f       	sbci	r31, 0xF7	; 247
    2476:	60 83       	st	Z, r22
    2478:	8f 5f       	subi	r24, 0xFF	; 255
    247a:	80 93 31 08 	sts	0x0831, r24	; 0x800831 <_ZN7TwoWire13txBufferIndexE>
    247e:	80 93 30 08 	sts	0x0830, r24	; 0x800830 <_ZN7TwoWire14txBufferLengthE>
    2482:	81 e0       	ldi	r24, 0x01	; 1
    2484:	90 e0       	ldi	r25, 0x00	; 0
    2486:	09 c0       	rjmp	.+18     	; 0x249a <_ZN7TwoWire5writeEh+0x4c>
    2488:	61 e0       	ldi	r22, 0x01	; 1
    248a:	ce 01       	movw	r24, r28
    248c:	01 96       	adiw	r24, 0x01	; 1
    248e:	19 de       	rcall	.-974    	; 0x20c2 <twi_transmit>
    2490:	81 e0       	ldi	r24, 0x01	; 1
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	02 c0       	rjmp	.+4      	; 0x249a <_ZN7TwoWire5writeEh+0x4c>
    2496:	80 e0       	ldi	r24, 0x00	; 0
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	0f 90       	pop	r0
    249c:	df 91       	pop	r29
    249e:	cf 91       	pop	r28
    24a0:	08 95       	ret

000024a2 <_ZN7TwoWire5writeEPKhj>:
    24a2:	cf 92       	push	r12
    24a4:	df 92       	push	r13
    24a6:	ef 92       	push	r14
    24a8:	ff 92       	push	r15
    24aa:	0f 93       	push	r16
    24ac:	1f 93       	push	r17
    24ae:	cf 93       	push	r28
    24b0:	df 93       	push	r29
    24b2:	8c 01       	movw	r16, r24
    24b4:	cb 01       	movw	r24, r22
    24b6:	6a 01       	movw	r12, r20
    24b8:	20 91 2f 08 	lds	r18, 0x082F	; 0x80082f <_ZN7TwoWire12transmittingE>
    24bc:	22 23       	and	r18, r18
    24be:	a1 f0       	breq	.+40     	; 0x24e8 <_ZN7TwoWire5writeEPKhj+0x46>
    24c0:	41 15       	cp	r20, r1
    24c2:	51 05       	cpc	r21, r1
    24c4:	99 f0       	breq	.+38     	; 0x24ec <_ZN7TwoWire5writeEPKhj+0x4a>
    24c6:	eb 01       	movw	r28, r22
    24c8:	7b 01       	movw	r14, r22
    24ca:	e4 0e       	add	r14, r20
    24cc:	f5 1e       	adc	r15, r21
    24ce:	69 91       	ld	r22, Y+
    24d0:	d8 01       	movw	r26, r16
    24d2:	ed 91       	ld	r30, X+
    24d4:	fc 91       	ld	r31, X
    24d6:	01 90       	ld	r0, Z+
    24d8:	f0 81       	ld	r31, Z
    24da:	e0 2d       	mov	r30, r0
    24dc:	c8 01       	movw	r24, r16
    24de:	19 95       	eicall
    24e0:	ce 15       	cp	r28, r14
    24e2:	df 05       	cpc	r29, r15
    24e4:	a1 f7       	brne	.-24     	; 0x24ce <_ZN7TwoWire5writeEPKhj+0x2c>
    24e6:	02 c0       	rjmp	.+4      	; 0x24ec <_ZN7TwoWire5writeEPKhj+0x4a>
    24e8:	64 2f       	mov	r22, r20
    24ea:	eb dd       	rcall	.-1066   	; 0x20c2 <twi_transmit>
    24ec:	c6 01       	movw	r24, r12
    24ee:	df 91       	pop	r29
    24f0:	cf 91       	pop	r28
    24f2:	1f 91       	pop	r17
    24f4:	0f 91       	pop	r16
    24f6:	ff 90       	pop	r15
    24f8:	ef 90       	pop	r14
    24fa:	df 90       	pop	r13
    24fc:	cf 90       	pop	r12
    24fe:	08 95       	ret

00002500 <_ZN7TwoWire5beginEv>:
    2500:	10 92 54 08 	sts	0x0854, r1	; 0x800854 <_ZN7TwoWire13rxBufferIndexE>
    2504:	10 92 53 08 	sts	0x0853, r1	; 0x800853 <_ZN7TwoWire14rxBufferLengthE>
    2508:	10 92 31 08 	sts	0x0831, r1	; 0x800831 <_ZN7TwoWire13txBufferIndexE>
    250c:	10 92 30 08 	sts	0x0830, r1	; 0x800830 <_ZN7TwoWire14txBufferLengthE>
    2510:	0a dd       	rcall	.-1516   	; 0x1f26 <twi_init>
    2512:	8b e1       	ldi	r24, 0x1B	; 27
    2514:	92 e1       	ldi	r25, 0x12	; 18
    2516:	04 de       	rcall	.-1016   	; 0x2120 <twi_attachSlaveTxEvent>
    2518:	8f ee       	ldi	r24, 0xEF	; 239
    251a:	91 e1       	ldi	r25, 0x11	; 17
    251c:	fc cd       	rjmp	.-1032   	; 0x2116 <twi_attachSlaveRxEvent>
    251e:	08 95       	ret

00002520 <_ZN7TwoWire17beginTransmissionEh>:
    2520:	81 e0       	ldi	r24, 0x01	; 1
    2522:	80 93 2f 08 	sts	0x082F, r24	; 0x80082f <_ZN7TwoWire12transmittingE>
    2526:	60 93 52 08 	sts	0x0852, r22	; 0x800852 <_ZN7TwoWire9txAddressE>
    252a:	10 92 31 08 	sts	0x0831, r1	; 0x800831 <_ZN7TwoWire13txBufferIndexE>
    252e:	10 92 30 08 	sts	0x0830, r1	; 0x800830 <_ZN7TwoWire14txBufferLengthE>
    2532:	08 95       	ret

00002534 <_ZN7TwoWire17beginTransmissionEi>:
    2534:	f5 cf       	rjmp	.-22     	; 0x2520 <_ZN7TwoWire17beginTransmissionEh>
    2536:	08 95       	ret

00002538 <_ZN7TwoWire15endTransmissionEh>:
    2538:	0f 93       	push	r16
    253a:	06 2f       	mov	r16, r22
    253c:	21 e0       	ldi	r18, 0x01	; 1
    253e:	40 91 30 08 	lds	r20, 0x0830	; 0x800830 <_ZN7TwoWire14txBufferLengthE>
    2542:	62 e3       	ldi	r22, 0x32	; 50
    2544:	78 e0       	ldi	r23, 0x08	; 8
    2546:	80 91 52 08 	lds	r24, 0x0852	; 0x800852 <_ZN7TwoWire9txAddressE>
    254a:	58 dd       	rcall	.-1360   	; 0x1ffc <twi_writeTo>
    254c:	10 92 31 08 	sts	0x0831, r1	; 0x800831 <_ZN7TwoWire13txBufferIndexE>
    2550:	10 92 30 08 	sts	0x0830, r1	; 0x800830 <_ZN7TwoWire14txBufferLengthE>
    2554:	10 92 2f 08 	sts	0x082F, r1	; 0x80082f <_ZN7TwoWire12transmittingE>
    2558:	0f 91       	pop	r16
    255a:	08 95       	ret

0000255c <_ZN7TwoWire11requestFromEhhmhh>:
    255c:	4f 92       	push	r4
    255e:	5f 92       	push	r5
    2560:	6f 92       	push	r6
    2562:	7f 92       	push	r7
    2564:	af 92       	push	r10
    2566:	bf 92       	push	r11
    2568:	cf 92       	push	r12
    256a:	ef 92       	push	r14
    256c:	ff 92       	push	r15
    256e:	0f 93       	push	r16
    2570:	1f 93       	push	r17
    2572:	cf 93       	push	r28
    2574:	df 93       	push	r29
    2576:	5c 01       	movw	r10, r24
    2578:	f6 2e       	mov	r15, r22
    257a:	d4 2f       	mov	r29, r20
    257c:	28 01       	movw	r4, r16
    257e:	39 01       	movw	r6, r18
    2580:	ee 20       	and	r14, r14
    2582:	39 f1       	breq	.+78     	; 0x25d2 <_ZN7TwoWire11requestFromEhhmhh+0x76>
    2584:	cd df       	rcall	.-102    	; 0x2520 <_ZN7TwoWire17beginTransmissionEh>
    2586:	8e 2d       	mov	r24, r14
    2588:	84 30       	cpi	r24, 0x04	; 4
    258a:	08 f0       	brcs	.+2      	; 0x258e <_ZN7TwoWire11requestFromEhhmhh+0x32>
    258c:	83 e0       	ldi	r24, 0x03	; 3
    258e:	cf ef       	ldi	r28, 0xFF	; 255
    2590:	c8 0f       	add	r28, r24
    2592:	88 23       	and	r24, r24
    2594:	d9 f0       	breq	.+54     	; 0x25cc <_ZN7TwoWire11requestFromEhhmhh+0x70>
    2596:	8c 2f       	mov	r24, r28
    2598:	88 0f       	add	r24, r24
    259a:	88 0f       	add	r24, r24
    259c:	88 0f       	add	r24, r24
    259e:	a3 01       	movw	r20, r6
    25a0:	92 01       	movw	r18, r4
    25a2:	04 c0       	rjmp	.+8      	; 0x25ac <_ZN7TwoWire11requestFromEhhmhh+0x50>
    25a4:	56 95       	lsr	r21
    25a6:	47 95       	ror	r20
    25a8:	37 95       	ror	r19
    25aa:	27 95       	ror	r18
    25ac:	8a 95       	dec	r24
    25ae:	d2 f7       	brpl	.-12     	; 0x25a4 <_ZN7TwoWire11requestFromEhhmhh+0x48>
    25b0:	ca 01       	movw	r24, r20
    25b2:	b9 01       	movw	r22, r18
    25b4:	d5 01       	movw	r26, r10
    25b6:	ed 91       	ld	r30, X+
    25b8:	fc 91       	ld	r31, X
    25ba:	01 90       	ld	r0, Z+
    25bc:	f0 81       	ld	r31, Z
    25be:	e0 2d       	mov	r30, r0
    25c0:	c5 01       	movw	r24, r10
    25c2:	19 95       	eicall
    25c4:	8c 2f       	mov	r24, r28
    25c6:	c1 50       	subi	r28, 0x01	; 1
    25c8:	81 11       	cpse	r24, r1
    25ca:	e5 cf       	rjmp	.-54     	; 0x2596 <_ZN7TwoWire11requestFromEhhmhh+0x3a>
    25cc:	60 e0       	ldi	r22, 0x00	; 0
    25ce:	c5 01       	movw	r24, r10
    25d0:	b3 df       	rcall	.-154    	; 0x2538 <_ZN7TwoWire15endTransmissionEh>
    25d2:	4d 2f       	mov	r20, r29
    25d4:	d1 32       	cpi	r29, 0x21	; 33
    25d6:	08 f0       	brcs	.+2      	; 0x25da <_ZN7TwoWire11requestFromEhhmhh+0x7e>
    25d8:	40 e2       	ldi	r20, 0x20	; 32
    25da:	2c 2d       	mov	r18, r12
    25dc:	65 e5       	ldi	r22, 0x55	; 85
    25de:	78 e0       	ldi	r23, 0x08	; 8
    25e0:	8f 2d       	mov	r24, r15
    25e2:	ba dc       	rcall	.-1676   	; 0x1f58 <twi_readFrom>
    25e4:	10 92 54 08 	sts	0x0854, r1	; 0x800854 <_ZN7TwoWire13rxBufferIndexE>
    25e8:	80 93 53 08 	sts	0x0853, r24	; 0x800853 <_ZN7TwoWire14rxBufferLengthE>
    25ec:	df 91       	pop	r29
    25ee:	cf 91       	pop	r28
    25f0:	1f 91       	pop	r17
    25f2:	0f 91       	pop	r16
    25f4:	ff 90       	pop	r15
    25f6:	ef 90       	pop	r14
    25f8:	cf 90       	pop	r12
    25fa:	bf 90       	pop	r11
    25fc:	af 90       	pop	r10
    25fe:	7f 90       	pop	r7
    2600:	6f 90       	pop	r6
    2602:	5f 90       	pop	r5
    2604:	4f 90       	pop	r4
    2606:	08 95       	ret

00002608 <_ZN7TwoWire11requestFromEhhh>:
    2608:	cf 92       	push	r12
    260a:	ef 92       	push	r14
    260c:	0f 93       	push	r16
    260e:	1f 93       	push	r17
    2610:	c2 2e       	mov	r12, r18
    2612:	e1 2c       	mov	r14, r1
    2614:	00 e0       	ldi	r16, 0x00	; 0
    2616:	10 e0       	ldi	r17, 0x00	; 0
    2618:	98 01       	movw	r18, r16
    261a:	a0 df       	rcall	.-192    	; 0x255c <_ZN7TwoWire11requestFromEhhmhh>
    261c:	1f 91       	pop	r17
    261e:	0f 91       	pop	r16
    2620:	ef 90       	pop	r14
    2622:	cf 90       	pop	r12
    2624:	08 95       	ret

00002626 <_ZN7TwoWire11requestFromEhh>:
    2626:	21 e0       	ldi	r18, 0x01	; 1
    2628:	ef cf       	rjmp	.-34     	; 0x2608 <_ZN7TwoWire11requestFromEhhh>
    262a:	08 95       	ret

0000262c <_ZN7TwoWire11requestFromEii>:
    262c:	21 e0       	ldi	r18, 0x01	; 1
    262e:	ec cf       	rjmp	.-40     	; 0x2608 <_ZN7TwoWire11requestFromEhhh>
    2630:	08 95       	ret

00002632 <_ZN7TwoWire15endTransmissionEv>:
    2632:	61 e0       	ldi	r22, 0x01	; 1
    2634:	81 cf       	rjmp	.-254    	; 0x2538 <_ZN7TwoWire15endTransmissionEh>
    2636:	08 95       	ret

00002638 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    2638:	80 e8       	ldi	r24, 0x80	; 128
    263a:	92 e0       	ldi	r25, 0x02	; 2
    263c:	90 93 2a 08 	sts	0x082A, r25	; 0x80082a <Wire+0x1>
    2640:	80 93 29 08 	sts	0x0829, r24	; 0x800829 <Wire>
    2644:	08 95       	ret

00002646 <_ZN6MS5837C1ER13HardwareTimer>:
const float MS5837::mbar = 1.0f;
*/
const uint8_t MS5837::MS5837_30BA = 0;
const uint8_t MS5837::MS5837_02BA = 1;

MS5837::MS5837(HardwareTimer &timer) : _timer(&timer) {
    2646:	fc 01       	movw	r30, r24
    2648:	73 a3       	std	Z+35, r23	; 0x23
    264a:	62 a3       	std	Z+34, r22	; 0x22
	fluidDensity = 1029;
    264c:	40 e0       	ldi	r20, 0x00	; 0
    264e:	50 ea       	ldi	r21, 0xA0	; 160
    2650:	60 e8       	ldi	r22, 0x80	; 128
    2652:	74 e4       	ldi	r23, 0x44	; 68
    2654:	44 a3       	std	Z+36, r20	; 0x24
    2656:	55 a3       	std	Z+37, r21	; 0x25
    2658:	66 a3       	std	Z+38, r22	; 0x26
    265a:	77 a3       	std	Z+39, r23	; 0x27
    265c:	08 95       	ret

0000265e <_ZN6MS58378setModelEh>:

	return false; // CRC fail
}

void MS5837::setModel(uint8_t model) {
	_model = model;
    265e:	fc 01       	movw	r30, r24
    2660:	60 a3       	std	Z+32, r22	; 0x20
    2662:	08 95       	ret

00002664 <_ZN6MS58379startReadEv>:
	D2 = (D2 << 8) | Wire.read();

	calculate();
}*/

bool MS5837::startRead(){
    2664:	cf 93       	push	r28
    2666:	df 93       	push	r29
	if(_state == STATE_FINISHED){
    2668:	fc 01       	movw	r30, r24
    266a:	21 a1       	ldd	r18, Z+33	; 0x21
    266c:	21 11       	cpse	r18, r1
    266e:	1c c0       	rjmp	.+56     	; 0x26a8 <_ZN6MS58379startReadEv+0x44>
    2670:	ec 01       	movw	r28, r24
		_state = STATE_READ_D1; // Request D1 conversion
    2672:	81 e0       	ldi	r24, 0x01	; 1
    2674:	81 a3       	std	Z+33, r24	; 0x21
		
		Wire.beginTransmission(MS5837_ADDR);
    2676:	66 e7       	ldi	r22, 0x76	; 118
    2678:	70 e0       	ldi	r23, 0x00	; 0
    267a:	89 e2       	ldi	r24, 0x29	; 41
    267c:	98 e0       	ldi	r25, 0x08	; 8
    267e:	5a df       	rcall	.-332    	; 0x2534 <_ZN7TwoWire17beginTransmissionEi>
	void onRequest( void (*)(void) );

	inline size_t write(unsigned long n) { return write((uint8_t)n); }
	inline size_t write(long n) { return write((uint8_t)n); }
	inline size_t write(unsigned int n) { return write((uint8_t)n); }
	inline size_t write(int n) { return write((uint8_t)n); }
    2680:	e0 91 29 08 	lds	r30, 0x0829	; 0x800829 <Wire>
    2684:	f0 91 2a 08 	lds	r31, 0x082A	; 0x80082a <Wire+0x1>
    2688:	01 90       	ld	r0, Z+
    268a:	f0 81       	ld	r31, Z
    268c:	e0 2d       	mov	r30, r0
    268e:	6a e4       	ldi	r22, 0x4A	; 74
    2690:	89 e2       	ldi	r24, 0x29	; 41
    2692:	98 e0       	ldi	r25, 0x08	; 8
    2694:	19 95       	eicall
		Wire.write(MS5837_CONVERT_D1_8192);
		Wire.endTransmission();
    2696:	89 e2       	ldi	r24, 0x29	; 41
    2698:	98 e0       	ldi	r25, 0x08	; 8
    269a:	cb df       	rcall	.-106    	; 0x2632 <_ZN7TwoWire15endTransmissionEv>

		_timer->start(2); // Max conversion time, 20ms per datasheet
    269c:	62 e0       	ldi	r22, 0x02	; 2
    269e:	8a a1       	ldd	r24, Y+34	; 0x22
    26a0:	9b a1       	ldd	r25, Y+35	; 0x23
    26a2:	a1 db       	rcall	.-2238   	; 0x1de6 <_ZN13HardwareTimer5startEh>
		return true;
    26a4:	81 e0       	ldi	r24, 0x01	; 1
    26a6:	01 c0       	rjmp	.+2      	; 0x26aa <_ZN6MS58379startReadEv+0x46>
	}else{
		return false;
    26a8:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    26aa:	df 91       	pop	r29
    26ac:	cf 91       	pop	r28
    26ae:	08 95       	ret

000026b0 <_ZN6MS58378finishedEv>:
		}
	}
}

bool MS5837::finished(){
	return _state == STATE_FINISHED;
    26b0:	21 e0       	ldi	r18, 0x01	; 1
    26b2:	fc 01       	movw	r30, r24
    26b4:	81 a1       	ldd	r24, Z+33	; 0x21
    26b6:	81 11       	cpse	r24, r1
    26b8:	20 e0       	ldi	r18, 0x00	; 0
}
    26ba:	82 2f       	mov	r24, r18
    26bc:	08 95       	ret

000026be <_ZN6MS58379calculateEv>:

void MS5837::calculate() {
    26be:	2f 92       	push	r2
    26c0:	3f 92       	push	r3
    26c2:	4f 92       	push	r4
    26c4:	5f 92       	push	r5
    26c6:	6f 92       	push	r6
    26c8:	7f 92       	push	r7
    26ca:	8f 92       	push	r8
    26cc:	9f 92       	push	r9
    26ce:	af 92       	push	r10
    26d0:	bf 92       	push	r11
    26d2:	cf 92       	push	r12
    26d4:	df 92       	push	r13
    26d6:	ef 92       	push	r14
    26d8:	ff 92       	push	r15
    26da:	0f 93       	push	r16
    26dc:	1f 93       	push	r17
    26de:	cf 93       	push	r28
    26e0:	df 93       	push	r29
    26e2:	cd b7       	in	r28, 0x3d	; 61
    26e4:	de b7       	in	r29, 0x3e	; 62
    26e6:	a5 97       	sbiw	r28, 0x25	; 37
    26e8:	0f b6       	in	r0, 0x3f	; 63
    26ea:	f8 94       	cli
    26ec:	de bf       	out	0x3e, r29	; 62
    26ee:	0f be       	out	0x3f, r0	; 63
    26f0:	cd bf       	out	0x3d, r28	; 61
    26f2:	1c 01       	movw	r2, r24
	int32_t Ti = 0;
	int64_t OFF2 = 0;
	int64_t SENS2 = 0;
	
	// Terms called
	dT = D2-uint32_t(C[5])*256l;
    26f4:	dc 01       	movw	r26, r24
    26f6:	1a 96       	adiw	r26, 0x0a	; 10
    26f8:	8d 91       	ld	r24, X+
    26fa:	9c 91       	ld	r25, X
    26fc:	1b 97       	sbiw	r26, 0x0b	; 11
    26fe:	a0 e0       	ldi	r26, 0x00	; 0
    2700:	b0 e0       	ldi	r27, 0x00	; 0
    2702:	ba 2f       	mov	r27, r26
    2704:	a9 2f       	mov	r26, r25
    2706:	98 2f       	mov	r25, r24
    2708:	88 27       	eor	r24, r24
    270a:	f1 01       	movw	r30, r2
    270c:	44 89       	ldd	r20, Z+20	; 0x14
    270e:	55 89       	ldd	r21, Z+21	; 0x15
    2710:	66 89       	ldd	r22, Z+22	; 0x16
    2712:	77 89       	ldd	r23, Z+23	; 0x17
    2714:	3a 01       	movw	r6, r20
    2716:	4b 01       	movw	r8, r22
    2718:	68 1a       	sub	r6, r24
    271a:	79 0a       	sbc	r7, r25
    271c:	8a 0a       	sbc	r8, r26
    271e:	9b 0a       	sbc	r9, r27
    2720:	69 82       	std	Y+1, r6	; 0x01
    2722:	7a 82       	std	Y+2, r7	; 0x02
    2724:	8b 82       	std	Y+3, r8	; 0x03
    2726:	9c 82       	std	Y+4, r9	; 0x04
	if ( _model == MS5837_02BA ) {
    2728:	80 a1       	ldd	r24, Z+32	; 0x20
    272a:	81 30       	cpi	r24, 0x01	; 1
    272c:	09 f0       	breq	.+2      	; 0x2730 <_ZN6MS58379calculateEv+0x72>
    272e:	58 c1       	rjmp	.+688    	; 0x29e0 <_ZN6MS58379calculateEv+0x322>
		SENS = int64_t(C[1])*65536l+(int64_t(C[3])*dT)/128l;
    2730:	99 0c       	add	r9, r9
    2732:	66 08       	sbc	r6, r6
    2734:	76 2c       	mov	r7, r6
    2736:	43 01       	movw	r8, r6
    2738:	6d 82       	std	Y+5, r6	; 0x05
    273a:	7e 82       	std	Y+6, r7	; 0x06
    273c:	8f 82       	std	Y+7, r8	; 0x07
    273e:	98 86       	std	Y+8, r9	; 0x08
    2740:	86 81       	ldd	r24, Z+6	; 0x06
    2742:	97 81       	ldd	r25, Z+7	; 0x07
    2744:	3c 01       	movw	r6, r24
    2746:	81 2c       	mov	r8, r1
    2748:	91 2c       	mov	r9, r1
    274a:	a1 2c       	mov	r10, r1
    274c:	b1 2c       	mov	r11, r1
    274e:	65 01       	movw	r12, r10
    2750:	8d 8f       	std	Y+29, r24	; 0x1d
    2752:	7e 8e       	std	Y+30, r7	; 0x1e
    2754:	8f 8e       	std	Y+31, r8	; 0x1f
    2756:	98 a2       	std	Y+32, r9	; 0x20
    2758:	a9 a2       	std	Y+33, r10	; 0x21
    275a:	ba a2       	std	Y+34, r11	; 0x22
    275c:	cb a2       	std	Y+35, r12	; 0x23
    275e:	dc a2       	std	Y+36, r13	; 0x24
    2760:	a9 80       	ldd	r10, Y+1	; 0x01
    2762:	ba 80       	ldd	r11, Y+2	; 0x02
    2764:	cb 80       	ldd	r12, Y+3	; 0x03
    2766:	dc 80       	ldd	r13, Y+4	; 0x04
    2768:	ed 80       	ldd	r14, Y+5	; 0x05
    276a:	fe 2c       	mov	r15, r14
    276c:	0e 2d       	mov	r16, r14
    276e:	1e 2d       	mov	r17, r14
    2770:	28 2f       	mov	r18, r24
    2772:	37 2d       	mov	r19, r7
    2774:	40 e0       	ldi	r20, 0x00	; 0
    2776:	50 e0       	ldi	r21, 0x00	; 0
    2778:	60 e0       	ldi	r22, 0x00	; 0
    277a:	70 e0       	ldi	r23, 0x00	; 0
    277c:	80 e0       	ldi	r24, 0x00	; 0
    277e:	90 e0       	ldi	r25, 0x00	; 0
    2780:	0e 94 3f 27 	call	0x4e7e	; 0x4e7e <__muldi3>
    2784:	12 2f       	mov	r17, r18
    2786:	3e 87       	std	Y+14, r19	; 0x0e
    2788:	4d 87       	std	Y+13, r20	; 0x0d
    278a:	b5 2f       	mov	r27, r21
    278c:	f6 2f       	mov	r31, r22
    278e:	e7 2f       	mov	r30, r23
    2790:	78 2e       	mov	r7, r24
    2792:	89 2e       	mov	r8, r25
    2794:	a0 e0       	ldi	r26, 0x00	; 0
    2796:	0e 94 e5 27 	call	0x4fca	; 0x4fca <__cmpdi2_s8>
    279a:	5c f4       	brge	.+22     	; 0x27b2 <_ZN6MS58379calculateEv+0xf4>
    279c:	af e7       	ldi	r26, 0x7F	; 127
    279e:	0e 94 d0 27 	call	0x4fa0	; 0x4fa0 <__adddi3_s8>
    27a2:	12 2f       	mov	r17, r18
    27a4:	3e 87       	std	Y+14, r19	; 0x0e
    27a6:	4d 87       	std	Y+13, r20	; 0x0d
    27a8:	b5 2f       	mov	r27, r21
    27aa:	f6 2f       	mov	r31, r22
    27ac:	e7 2f       	mov	r30, r23
    27ae:	78 2e       	mov	r7, r24
    27b0:	89 2e       	mov	r8, r25
    27b2:	21 2f       	mov	r18, r17
    27b4:	3e 85       	ldd	r19, Y+14	; 0x0e
    27b6:	4d 85       	ldd	r20, Y+13	; 0x0d
    27b8:	5b 2f       	mov	r21, r27
    27ba:	6f 2f       	mov	r22, r31
    27bc:	7e 2f       	mov	r23, r30
    27be:	87 2d       	mov	r24, r7
    27c0:	98 2d       	mov	r25, r8
    27c2:	07 e0       	ldi	r16, 0x07	; 7
    27c4:	0e 94 a9 27 	call	0x4f52	; 0x4f52 <__ashrdi3>
    27c8:	82 2e       	mov	r8, r18
    27ca:	93 2e       	mov	r9, r19
    27cc:	74 2e       	mov	r7, r20
    27ce:	65 2e       	mov	r6, r21
    27d0:	b6 2f       	mov	r27, r22
    27d2:	a7 2f       	mov	r26, r23
    27d4:	58 2e       	mov	r5, r24
    27d6:	49 2e       	mov	r4, r25
    27d8:	f1 01       	movw	r30, r2
    27da:	a2 80       	ldd	r10, Z+2	; 0x02
    27dc:	b3 80       	ldd	r11, Z+3	; 0x03
    27de:	2a 2d       	mov	r18, r10
    27e0:	3b 2d       	mov	r19, r11
    27e2:	40 e0       	ldi	r20, 0x00	; 0
    27e4:	50 e0       	ldi	r21, 0x00	; 0
    27e6:	60 e0       	ldi	r22, 0x00	; 0
    27e8:	70 e0       	ldi	r23, 0x00	; 0
    27ea:	80 e0       	ldi	r24, 0x00	; 0
    27ec:	90 e0       	ldi	r25, 0x00	; 0
    27ee:	00 e1       	ldi	r16, 0x10	; 16
    27f0:	0e 94 90 27 	call	0x4f20	; 0x4f20 <__ashldi3>
    27f4:	a2 2e       	mov	r10, r18
    27f6:	b3 2e       	mov	r11, r19
    27f8:	c4 2e       	mov	r12, r20
    27fa:	d5 2e       	mov	r13, r21
    27fc:	e6 2e       	mov	r14, r22
    27fe:	f7 2e       	mov	r15, r23
    2800:	08 2f       	mov	r16, r24
    2802:	19 2f       	mov	r17, r25
    2804:	28 2d       	mov	r18, r8
    2806:	39 2d       	mov	r19, r9
    2808:	47 2d       	mov	r20, r7
    280a:	56 2d       	mov	r21, r6
    280c:	6b 2f       	mov	r22, r27
    280e:	7a 2f       	mov	r23, r26
    2810:	85 2d       	mov	r24, r5
    2812:	94 2d       	mov	r25, r4
    2814:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <__adddi3>
    2818:	2d 87       	std	Y+13, r18	; 0x0d
    281a:	3e 87       	std	Y+14, r19	; 0x0e
    281c:	4f 87       	std	Y+15, r20	; 0x0f
    281e:	58 8b       	std	Y+16, r21	; 0x10
    2820:	69 8b       	std	Y+17, r22	; 0x11
    2822:	7a 8b       	std	Y+18, r23	; 0x12
    2824:	8b 8b       	std	Y+19, r24	; 0x13
    2826:	9c 8b       	std	Y+20, r25	; 0x14
		OFF = int64_t(C[2])*131072l+(int64_t(C[4])*dT)/64l;
    2828:	80 85       	ldd	r24, Z+8	; 0x08
    282a:	91 85       	ldd	r25, Z+9	; 0x09
    282c:	3c 01       	movw	r6, r24
    282e:	81 2c       	mov	r8, r1
    2830:	91 2c       	mov	r9, r1
    2832:	a1 2c       	mov	r10, r1
    2834:	b1 2c       	mov	r11, r1
    2836:	65 01       	movw	r12, r10
    2838:	8d 8f       	std	Y+29, r24	; 0x1d
    283a:	7e 8e       	std	Y+30, r7	; 0x1e
    283c:	8f 8e       	std	Y+31, r8	; 0x1f
    283e:	98 a2       	std	Y+32, r9	; 0x20
    2840:	a9 a2       	std	Y+33, r10	; 0x21
    2842:	ba a2       	std	Y+34, r11	; 0x22
    2844:	cb a2       	std	Y+35, r12	; 0x23
    2846:	dc a2       	std	Y+36, r13	; 0x24
    2848:	a9 80       	ldd	r10, Y+1	; 0x01
    284a:	ba 80       	ldd	r11, Y+2	; 0x02
    284c:	cb 80       	ldd	r12, Y+3	; 0x03
    284e:	dc 80       	ldd	r13, Y+4	; 0x04
    2850:	ed 80       	ldd	r14, Y+5	; 0x05
    2852:	fe 2c       	mov	r15, r14
    2854:	0e 2d       	mov	r16, r14
    2856:	1e 2d       	mov	r17, r14
    2858:	28 2f       	mov	r18, r24
    285a:	37 2d       	mov	r19, r7
    285c:	40 e0       	ldi	r20, 0x00	; 0
    285e:	50 e0       	ldi	r21, 0x00	; 0
    2860:	60 e0       	ldi	r22, 0x00	; 0
    2862:	70 e0       	ldi	r23, 0x00	; 0
    2864:	80 e0       	ldi	r24, 0x00	; 0
    2866:	90 e0       	ldi	r25, 0x00	; 0
    2868:	0e 94 3f 27 	call	0x4e7e	; 0x4e7e <__muldi3>
    286c:	12 2f       	mov	r17, r18
    286e:	3e 8b       	std	Y+22, r19	; 0x16
    2870:	4d 8b       	std	Y+21, r20	; 0x15
    2872:	b5 2f       	mov	r27, r21
    2874:	f6 2f       	mov	r31, r22
    2876:	e7 2f       	mov	r30, r23
    2878:	78 2e       	mov	r7, r24
    287a:	89 2e       	mov	r8, r25
    287c:	a0 e0       	ldi	r26, 0x00	; 0
    287e:	0e 94 e5 27 	call	0x4fca	; 0x4fca <__cmpdi2_s8>
    2882:	5c f4       	brge	.+22     	; 0x289a <_ZN6MS58379calculateEv+0x1dc>
    2884:	af e3       	ldi	r26, 0x3F	; 63
    2886:	0e 94 d0 27 	call	0x4fa0	; 0x4fa0 <__adddi3_s8>
    288a:	12 2f       	mov	r17, r18
    288c:	3e 8b       	std	Y+22, r19	; 0x16
    288e:	4d 8b       	std	Y+21, r20	; 0x15
    2890:	b5 2f       	mov	r27, r21
    2892:	f6 2f       	mov	r31, r22
    2894:	e7 2f       	mov	r30, r23
    2896:	78 2e       	mov	r7, r24
    2898:	89 2e       	mov	r8, r25
    289a:	21 2f       	mov	r18, r17
    289c:	3e 89       	ldd	r19, Y+22	; 0x16
    289e:	4d 89       	ldd	r20, Y+21	; 0x15
    28a0:	5b 2f       	mov	r21, r27
    28a2:	6f 2f       	mov	r22, r31
    28a4:	7e 2f       	mov	r23, r30
    28a6:	87 2d       	mov	r24, r7
    28a8:	98 2d       	mov	r25, r8
    28aa:	06 e0       	ldi	r16, 0x06	; 6
    28ac:	0e 94 a9 27 	call	0x4f52	; 0x4f52 <__ashrdi3>
    28b0:	82 2e       	mov	r8, r18
    28b2:	93 2e       	mov	r9, r19
    28b4:	74 2e       	mov	r7, r20
    28b6:	65 2e       	mov	r6, r21
    28b8:	b6 2f       	mov	r27, r22
    28ba:	a7 2f       	mov	r26, r23
    28bc:	58 2e       	mov	r5, r24
    28be:	49 2e       	mov	r4, r25
    28c0:	f1 01       	movw	r30, r2
    28c2:	24 81       	ldd	r18, Z+4	; 0x04
    28c4:	35 81       	ldd	r19, Z+5	; 0x05
    28c6:	59 01       	movw	r10, r18
    28c8:	3b 2d       	mov	r19, r11
    28ca:	40 e0       	ldi	r20, 0x00	; 0
    28cc:	50 e0       	ldi	r21, 0x00	; 0
    28ce:	60 e0       	ldi	r22, 0x00	; 0
    28d0:	70 e0       	ldi	r23, 0x00	; 0
    28d2:	80 e0       	ldi	r24, 0x00	; 0
    28d4:	90 e0       	ldi	r25, 0x00	; 0
    28d6:	01 e1       	ldi	r16, 0x11	; 17
    28d8:	0e 94 90 27 	call	0x4f20	; 0x4f20 <__ashldi3>
    28dc:	a2 2e       	mov	r10, r18
    28de:	b3 2e       	mov	r11, r19
    28e0:	c4 2e       	mov	r12, r20
    28e2:	d5 2e       	mov	r13, r21
    28e4:	e6 2e       	mov	r14, r22
    28e6:	f7 2e       	mov	r15, r23
    28e8:	08 2f       	mov	r16, r24
    28ea:	19 2f       	mov	r17, r25
    28ec:	28 2d       	mov	r18, r8
    28ee:	39 2d       	mov	r19, r9
    28f0:	47 2d       	mov	r20, r7
    28f2:	56 2d       	mov	r21, r6
    28f4:	6b 2f       	mov	r22, r27
    28f6:	7a 2f       	mov	r23, r26
    28f8:	85 2d       	mov	r24, r5
    28fa:	94 2d       	mov	r25, r4
    28fc:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <__adddi3>
    2900:	2d 8b       	std	Y+21, r18	; 0x15
    2902:	3e 8b       	std	Y+22, r19	; 0x16
    2904:	4f 8b       	std	Y+23, r20	; 0x17
    2906:	58 8f       	std	Y+24, r21	; 0x18
    2908:	69 8f       	std	Y+25, r22	; 0x19
    290a:	7a 8f       	std	Y+26, r23	; 0x1a
    290c:	8b 8f       	std	Y+27, r24	; 0x1b
    290e:	9c 8f       	std	Y+28, r25	; 0x1c
		OFF = int64_t(C[2])*65536l+(int64_t(C[4])*dT)/128l;
		P = (D1*SENS/(2097152l)-OFF)/(8192l);
	}
	
	// Temp conversion
	TEMP = 2000l+int64_t(dT)*C[6]/8388608LL;
    2910:	84 85       	ldd	r24, Z+12	; 0x0c
    2912:	95 85       	ldd	r25, Z+13	; 0x0d
    2914:	3c 01       	movw	r6, r24
    2916:	81 2c       	mov	r8, r1
    2918:	91 2c       	mov	r9, r1
    291a:	a1 2c       	mov	r10, r1
    291c:	b1 2c       	mov	r11, r1
    291e:	65 01       	movw	r12, r10
    2920:	8d 8f       	std	Y+29, r24	; 0x1d
    2922:	7e 8e       	std	Y+30, r7	; 0x1e
    2924:	8f 8e       	std	Y+31, r8	; 0x1f
    2926:	98 a2       	std	Y+32, r9	; 0x20
    2928:	a9 a2       	std	Y+33, r10	; 0x21
    292a:	ba a2       	std	Y+34, r11	; 0x22
    292c:	cb a2       	std	Y+35, r12	; 0x23
    292e:	dc a2       	std	Y+36, r13	; 0x24
    2930:	a9 80       	ldd	r10, Y+1	; 0x01
    2932:	ba 80       	ldd	r11, Y+2	; 0x02
    2934:	cb 80       	ldd	r12, Y+3	; 0x03
    2936:	dc 80       	ldd	r13, Y+4	; 0x04
    2938:	ed 80       	ldd	r14, Y+5	; 0x05
    293a:	fe 2c       	mov	r15, r14
    293c:	0e 2d       	mov	r16, r14
    293e:	1e 2d       	mov	r17, r14
    2940:	28 2f       	mov	r18, r24
    2942:	37 2d       	mov	r19, r7
    2944:	40 e0       	ldi	r20, 0x00	; 0
    2946:	50 e0       	ldi	r21, 0x00	; 0
    2948:	60 e0       	ldi	r22, 0x00	; 0
    294a:	70 e0       	ldi	r23, 0x00	; 0
    294c:	80 e0       	ldi	r24, 0x00	; 0
    294e:	90 e0       	ldi	r25, 0x00	; 0
    2950:	0e 94 3f 27 	call	0x4e7e	; 0x4e7e <__muldi3>
    2954:	12 2f       	mov	r17, r18
    2956:	3d a3       	std	Y+37, r19	; 0x25
    2958:	4d 8f       	std	Y+29, r20	; 0x1d
    295a:	b5 2f       	mov	r27, r21
    295c:	f6 2f       	mov	r31, r22
    295e:	e7 2f       	mov	r30, r23
    2960:	78 2e       	mov	r7, r24
    2962:	89 2e       	mov	r8, r25
    2964:	a0 e0       	ldi	r26, 0x00	; 0
    2966:	0e 94 e5 27 	call	0x4fca	; 0x4fca <__cmpdi2_s8>
    296a:	84 f4       	brge	.+32     	; 0x298c <_ZN6MS58379calculateEv+0x2ce>
    296c:	21 50       	subi	r18, 0x01	; 1
    296e:	31 09       	sbc	r19, r1
    2970:	40 48       	sbci	r20, 0x80	; 128
    2972:	5f 4f       	sbci	r21, 0xFF	; 255
    2974:	6f 4f       	sbci	r22, 0xFF	; 255
    2976:	7f 4f       	sbci	r23, 0xFF	; 255
    2978:	8f 4f       	sbci	r24, 0xFF	; 255
    297a:	9f 4f       	sbci	r25, 0xFF	; 255
    297c:	12 2f       	mov	r17, r18
    297e:	3d a3       	std	Y+37, r19	; 0x25
    2980:	4d 8f       	std	Y+29, r20	; 0x1d
    2982:	b5 2f       	mov	r27, r21
    2984:	f6 2f       	mov	r31, r22
    2986:	e7 2f       	mov	r30, r23
    2988:	78 2e       	mov	r7, r24
    298a:	89 2e       	mov	r8, r25
    298c:	21 2f       	mov	r18, r17
    298e:	3d a1       	ldd	r19, Y+37	; 0x25
    2990:	4d 8d       	ldd	r20, Y+29	; 0x1d
    2992:	5b 2f       	mov	r21, r27
    2994:	6f 2f       	mov	r22, r31
    2996:	7e 2f       	mov	r23, r30
    2998:	87 2d       	mov	r24, r7
    299a:	98 2d       	mov	r25, r8
    299c:	07 e1       	ldi	r16, 0x17	; 23
    299e:	0e 94 a9 27 	call	0x4f52	; 0x4f52 <__ashrdi3>
    29a2:	82 2e       	mov	r8, r18
    29a4:	93 2e       	mov	r9, r19
    29a6:	a4 2e       	mov	r10, r20
    29a8:	b5 2e       	mov	r11, r21
    29aa:	24 01       	movw	r4, r8
    29ac:	35 01       	movw	r6, r10
    29ae:	00 ed       	ldi	r16, 0xD0	; 208
    29b0:	40 0e       	add	r4, r16
    29b2:	07 e0       	ldi	r16, 0x07	; 7
    29b4:	50 1e       	adc	r5, r16
    29b6:	61 1c       	adc	r6, r1
    29b8:	71 1c       	adc	r7, r1
	
	//Second order compensation
	if ( _model == MS5837_02BA ) {
		if((TEMP/100)<20){         //Low temp
    29ba:	10 ed       	ldi	r17, 0xD0	; 208
    29bc:	41 16       	cp	r4, r17
    29be:	17 e0       	ldi	r17, 0x07	; 7
    29c0:	51 06       	cpc	r5, r17
    29c2:	61 04       	cpc	r6, r1
    29c4:	71 04       	cpc	r7, r1
    29c6:	0c f4       	brge	.+2      	; 0x29ca <_ZN6MS58379calculateEv+0x30c>
    29c8:	62 c1       	rjmp	.+708    	; 0x2c8e <_ZN6MS58379calculateEv+0x5d0>
	int32_t dT = 0;
	int64_t SENS = 0;
	int64_t OFF = 0;
	int32_t SENSi = 0;
	int32_t OFFi = 0;
	int32_t Ti = 0;
    29ca:	81 2c       	mov	r8, r1
    29cc:	91 2c       	mov	r9, r1
    29ce:	54 01       	movw	r10, r8
	
	int32_t dT = 0;
	int64_t SENS = 0;
	int64_t OFF = 0;
	int32_t SENSi = 0;
	int32_t OFFi = 0;
    29d0:	19 82       	std	Y+1, r1	; 0x01
    29d2:	1a 82       	std	Y+2, r1	; 0x02
    29d4:	1b 82       	std	Y+3, r1	; 0x03
    29d6:	1c 82       	std	Y+4, r1	; 0x04
	// Do conversion first and then second order temp compensation
	
	int32_t dT = 0;
	int64_t SENS = 0;
	int64_t OFF = 0;
	int32_t SENSi = 0;
    29d8:	e1 2c       	mov	r14, r1
    29da:	f1 2c       	mov	r15, r1
    29dc:	87 01       	movw	r16, r14
    29de:	4c c3       	rjmp	.+1688   	; 0x3078 <_ZN6MS58379calculateEv+0x9ba>
	if ( _model == MS5837_02BA ) {
		SENS = int64_t(C[1])*65536l+(int64_t(C[3])*dT)/128l;
		OFF = int64_t(C[2])*131072l+(int64_t(C[4])*dT)/64l;
		P = (D1*SENS/(2097152l)-OFF)/(32768l);
	} else {
		SENS = int64_t(C[1])*32768l+(int64_t(C[3])*dT)/256l;
    29e0:	69 80       	ldd	r6, Y+1	; 0x01
    29e2:	7a 80       	ldd	r7, Y+2	; 0x02
    29e4:	8b 80       	ldd	r8, Y+3	; 0x03
    29e6:	9c 80       	ldd	r9, Y+4	; 0x04
    29e8:	99 0c       	add	r9, r9
    29ea:	66 08       	sbc	r6, r6
    29ec:	76 2c       	mov	r7, r6
    29ee:	43 01       	movw	r8, r6
    29f0:	6d 82       	std	Y+5, r6	; 0x05
    29f2:	7e 82       	std	Y+6, r7	; 0x06
    29f4:	8f 82       	std	Y+7, r8	; 0x07
    29f6:	98 86       	std	Y+8, r9	; 0x08
    29f8:	86 81       	ldd	r24, Z+6	; 0x06
    29fa:	97 81       	ldd	r25, Z+7	; 0x07
    29fc:	3c 01       	movw	r6, r24
    29fe:	81 2c       	mov	r8, r1
    2a00:	91 2c       	mov	r9, r1
    2a02:	a1 2c       	mov	r10, r1
    2a04:	b1 2c       	mov	r11, r1
    2a06:	65 01       	movw	r12, r10
    2a08:	8d 8f       	std	Y+29, r24	; 0x1d
    2a0a:	7e 8e       	std	Y+30, r7	; 0x1e
    2a0c:	8f 8e       	std	Y+31, r8	; 0x1f
    2a0e:	98 a2       	std	Y+32, r9	; 0x20
    2a10:	a9 a2       	std	Y+33, r10	; 0x21
    2a12:	ba a2       	std	Y+34, r11	; 0x22
    2a14:	cb a2       	std	Y+35, r12	; 0x23
    2a16:	dc a2       	std	Y+36, r13	; 0x24
    2a18:	a9 80       	ldd	r10, Y+1	; 0x01
    2a1a:	ba 80       	ldd	r11, Y+2	; 0x02
    2a1c:	cb 80       	ldd	r12, Y+3	; 0x03
    2a1e:	dc 80       	ldd	r13, Y+4	; 0x04
    2a20:	ed 80       	ldd	r14, Y+5	; 0x05
    2a22:	fe 2c       	mov	r15, r14
    2a24:	0e 2d       	mov	r16, r14
    2a26:	1e 2d       	mov	r17, r14
    2a28:	28 2f       	mov	r18, r24
    2a2a:	37 2d       	mov	r19, r7
    2a2c:	40 e0       	ldi	r20, 0x00	; 0
    2a2e:	50 e0       	ldi	r21, 0x00	; 0
    2a30:	60 e0       	ldi	r22, 0x00	; 0
    2a32:	70 e0       	ldi	r23, 0x00	; 0
    2a34:	80 e0       	ldi	r24, 0x00	; 0
    2a36:	90 e0       	ldi	r25, 0x00	; 0
    2a38:	0e 94 3f 27 	call	0x4e7e	; 0x4e7e <__muldi3>
    2a3c:	12 2f       	mov	r17, r18
    2a3e:	3e 87       	std	Y+14, r19	; 0x0e
    2a40:	4d 87       	std	Y+13, r20	; 0x0d
    2a42:	b5 2f       	mov	r27, r21
    2a44:	f6 2f       	mov	r31, r22
    2a46:	e7 2f       	mov	r30, r23
    2a48:	78 2e       	mov	r7, r24
    2a4a:	89 2e       	mov	r8, r25
    2a4c:	a0 e0       	ldi	r26, 0x00	; 0
    2a4e:	0e 94 e5 27 	call	0x4fca	; 0x4fca <__cmpdi2_s8>
    2a52:	84 f4       	brge	.+32     	; 0x2a74 <_ZN6MS58379calculateEv+0x3b6>
    2a54:	21 50       	subi	r18, 0x01	; 1
    2a56:	3f 4f       	sbci	r19, 0xFF	; 255
    2a58:	4f 4f       	sbci	r20, 0xFF	; 255
    2a5a:	5f 4f       	sbci	r21, 0xFF	; 255
    2a5c:	6f 4f       	sbci	r22, 0xFF	; 255
    2a5e:	7f 4f       	sbci	r23, 0xFF	; 255
    2a60:	8f 4f       	sbci	r24, 0xFF	; 255
    2a62:	9f 4f       	sbci	r25, 0xFF	; 255
    2a64:	12 2f       	mov	r17, r18
    2a66:	3e 87       	std	Y+14, r19	; 0x0e
    2a68:	4d 87       	std	Y+13, r20	; 0x0d
    2a6a:	b5 2f       	mov	r27, r21
    2a6c:	f6 2f       	mov	r31, r22
    2a6e:	e7 2f       	mov	r30, r23
    2a70:	78 2e       	mov	r7, r24
    2a72:	89 2e       	mov	r8, r25
    2a74:	21 2f       	mov	r18, r17
    2a76:	3e 85       	ldd	r19, Y+14	; 0x0e
    2a78:	4d 85       	ldd	r20, Y+13	; 0x0d
    2a7a:	5b 2f       	mov	r21, r27
    2a7c:	6f 2f       	mov	r22, r31
    2a7e:	7e 2f       	mov	r23, r30
    2a80:	87 2d       	mov	r24, r7
    2a82:	98 2d       	mov	r25, r8
    2a84:	08 e0       	ldi	r16, 0x08	; 8
    2a86:	0e 94 a9 27 	call	0x4f52	; 0x4f52 <__ashrdi3>
    2a8a:	82 2e       	mov	r8, r18
    2a8c:	93 2e       	mov	r9, r19
    2a8e:	74 2e       	mov	r7, r20
    2a90:	65 2e       	mov	r6, r21
    2a92:	b6 2f       	mov	r27, r22
    2a94:	a7 2f       	mov	r26, r23
    2a96:	58 2e       	mov	r5, r24
    2a98:	49 2e       	mov	r4, r25
    2a9a:	f1 01       	movw	r30, r2
    2a9c:	a2 80       	ldd	r10, Z+2	; 0x02
    2a9e:	b3 80       	ldd	r11, Z+3	; 0x03
    2aa0:	2a 2d       	mov	r18, r10
    2aa2:	3b 2d       	mov	r19, r11
    2aa4:	40 e0       	ldi	r20, 0x00	; 0
    2aa6:	50 e0       	ldi	r21, 0x00	; 0
    2aa8:	60 e0       	ldi	r22, 0x00	; 0
    2aaa:	70 e0       	ldi	r23, 0x00	; 0
    2aac:	80 e0       	ldi	r24, 0x00	; 0
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	0f e0       	ldi	r16, 0x0F	; 15
    2ab2:	0e 94 90 27 	call	0x4f20	; 0x4f20 <__ashldi3>
    2ab6:	a2 2e       	mov	r10, r18
    2ab8:	b3 2e       	mov	r11, r19
    2aba:	c4 2e       	mov	r12, r20
    2abc:	d5 2e       	mov	r13, r21
    2abe:	e6 2e       	mov	r14, r22
    2ac0:	f7 2e       	mov	r15, r23
    2ac2:	08 2f       	mov	r16, r24
    2ac4:	19 2f       	mov	r17, r25
    2ac6:	28 2d       	mov	r18, r8
    2ac8:	39 2d       	mov	r19, r9
    2aca:	47 2d       	mov	r20, r7
    2acc:	56 2d       	mov	r21, r6
    2ace:	6b 2f       	mov	r22, r27
    2ad0:	7a 2f       	mov	r23, r26
    2ad2:	85 2d       	mov	r24, r5
    2ad4:	94 2d       	mov	r25, r4
    2ad6:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <__adddi3>
    2ada:	2d 8b       	std	Y+21, r18	; 0x15
    2adc:	3e 8b       	std	Y+22, r19	; 0x16
    2ade:	4f 8b       	std	Y+23, r20	; 0x17
    2ae0:	58 8f       	std	Y+24, r21	; 0x18
    2ae2:	69 8f       	std	Y+25, r22	; 0x19
    2ae4:	7a 8f       	std	Y+26, r23	; 0x1a
    2ae6:	8b 8f       	std	Y+27, r24	; 0x1b
    2ae8:	9c 8f       	std	Y+28, r25	; 0x1c
		OFF = int64_t(C[2])*65536l+(int64_t(C[4])*dT)/128l;
    2aea:	80 85       	ldd	r24, Z+8	; 0x08
    2aec:	91 85       	ldd	r25, Z+9	; 0x09
    2aee:	3c 01       	movw	r6, r24
    2af0:	81 2c       	mov	r8, r1
    2af2:	91 2c       	mov	r9, r1
    2af4:	a1 2c       	mov	r10, r1
    2af6:	b1 2c       	mov	r11, r1
    2af8:	65 01       	movw	r12, r10
    2afa:	8d 8f       	std	Y+29, r24	; 0x1d
    2afc:	7e 8e       	std	Y+30, r7	; 0x1e
    2afe:	8f 8e       	std	Y+31, r8	; 0x1f
    2b00:	98 a2       	std	Y+32, r9	; 0x20
    2b02:	a9 a2       	std	Y+33, r10	; 0x21
    2b04:	ba a2       	std	Y+34, r11	; 0x22
    2b06:	cb a2       	std	Y+35, r12	; 0x23
    2b08:	dc a2       	std	Y+36, r13	; 0x24
    2b0a:	a9 80       	ldd	r10, Y+1	; 0x01
    2b0c:	ba 80       	ldd	r11, Y+2	; 0x02
    2b0e:	cb 80       	ldd	r12, Y+3	; 0x03
    2b10:	dc 80       	ldd	r13, Y+4	; 0x04
    2b12:	ed 80       	ldd	r14, Y+5	; 0x05
    2b14:	fe 2c       	mov	r15, r14
    2b16:	0e 2d       	mov	r16, r14
    2b18:	1e 2d       	mov	r17, r14
    2b1a:	28 2f       	mov	r18, r24
    2b1c:	37 2d       	mov	r19, r7
    2b1e:	40 e0       	ldi	r20, 0x00	; 0
    2b20:	50 e0       	ldi	r21, 0x00	; 0
    2b22:	60 e0       	ldi	r22, 0x00	; 0
    2b24:	70 e0       	ldi	r23, 0x00	; 0
    2b26:	80 e0       	ldi	r24, 0x00	; 0
    2b28:	90 e0       	ldi	r25, 0x00	; 0
    2b2a:	0e 94 3f 27 	call	0x4e7e	; 0x4e7e <__muldi3>
    2b2e:	12 2f       	mov	r17, r18
    2b30:	3e 87       	std	Y+14, r19	; 0x0e
    2b32:	4d 87       	std	Y+13, r20	; 0x0d
    2b34:	b5 2f       	mov	r27, r21
    2b36:	f6 2f       	mov	r31, r22
    2b38:	e7 2f       	mov	r30, r23
    2b3a:	78 2e       	mov	r7, r24
    2b3c:	89 2e       	mov	r8, r25
    2b3e:	a0 e0       	ldi	r26, 0x00	; 0
    2b40:	0e 94 e5 27 	call	0x4fca	; 0x4fca <__cmpdi2_s8>
    2b44:	5c f4       	brge	.+22     	; 0x2b5c <_ZN6MS58379calculateEv+0x49e>
    2b46:	af e7       	ldi	r26, 0x7F	; 127
    2b48:	0e 94 d0 27 	call	0x4fa0	; 0x4fa0 <__adddi3_s8>
    2b4c:	12 2f       	mov	r17, r18
    2b4e:	3e 87       	std	Y+14, r19	; 0x0e
    2b50:	4d 87       	std	Y+13, r20	; 0x0d
    2b52:	b5 2f       	mov	r27, r21
    2b54:	f6 2f       	mov	r31, r22
    2b56:	e7 2f       	mov	r30, r23
    2b58:	78 2e       	mov	r7, r24
    2b5a:	89 2e       	mov	r8, r25
    2b5c:	21 2f       	mov	r18, r17
    2b5e:	3e 85       	ldd	r19, Y+14	; 0x0e
    2b60:	4d 85       	ldd	r20, Y+13	; 0x0d
    2b62:	5b 2f       	mov	r21, r27
    2b64:	6f 2f       	mov	r22, r31
    2b66:	7e 2f       	mov	r23, r30
    2b68:	87 2d       	mov	r24, r7
    2b6a:	98 2d       	mov	r25, r8
    2b6c:	07 e0       	ldi	r16, 0x07	; 7
    2b6e:	0e 94 a9 27 	call	0x4f52	; 0x4f52 <__ashrdi3>
    2b72:	82 2e       	mov	r8, r18
    2b74:	93 2e       	mov	r9, r19
    2b76:	74 2e       	mov	r7, r20
    2b78:	65 2e       	mov	r6, r21
    2b7a:	b6 2f       	mov	r27, r22
    2b7c:	a7 2f       	mov	r26, r23
    2b7e:	58 2e       	mov	r5, r24
    2b80:	49 2e       	mov	r4, r25
    2b82:	f1 01       	movw	r30, r2
    2b84:	24 81       	ldd	r18, Z+4	; 0x04
    2b86:	35 81       	ldd	r19, Z+5	; 0x05
    2b88:	59 01       	movw	r10, r18
    2b8a:	3b 2d       	mov	r19, r11
    2b8c:	40 e0       	ldi	r20, 0x00	; 0
    2b8e:	50 e0       	ldi	r21, 0x00	; 0
    2b90:	60 e0       	ldi	r22, 0x00	; 0
    2b92:	70 e0       	ldi	r23, 0x00	; 0
    2b94:	80 e0       	ldi	r24, 0x00	; 0
    2b96:	90 e0       	ldi	r25, 0x00	; 0
    2b98:	00 e1       	ldi	r16, 0x10	; 16
    2b9a:	0e 94 90 27 	call	0x4f20	; 0x4f20 <__ashldi3>
    2b9e:	a2 2e       	mov	r10, r18
    2ba0:	b3 2e       	mov	r11, r19
    2ba2:	c4 2e       	mov	r12, r20
    2ba4:	d5 2e       	mov	r13, r21
    2ba6:	e6 2e       	mov	r14, r22
    2ba8:	f7 2e       	mov	r15, r23
    2baa:	08 2f       	mov	r16, r24
    2bac:	19 2f       	mov	r17, r25
    2bae:	28 2d       	mov	r18, r8
    2bb0:	39 2d       	mov	r19, r9
    2bb2:	47 2d       	mov	r20, r7
    2bb4:	56 2d       	mov	r21, r6
    2bb6:	6b 2f       	mov	r22, r27
    2bb8:	7a 2f       	mov	r23, r26
    2bba:	85 2d       	mov	r24, r5
    2bbc:	94 2d       	mov	r25, r4
    2bbe:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <__adddi3>
    2bc2:	2d 87       	std	Y+13, r18	; 0x0d
    2bc4:	3e 87       	std	Y+14, r19	; 0x0e
    2bc6:	4f 87       	std	Y+15, r20	; 0x0f
    2bc8:	58 8b       	std	Y+16, r21	; 0x10
    2bca:	69 8b       	std	Y+17, r22	; 0x11
    2bcc:	7a 8b       	std	Y+18, r23	; 0x12
    2bce:	8b 8b       	std	Y+19, r24	; 0x13
    2bd0:	9c 8b       	std	Y+20, r25	; 0x14
		P = (D1*SENS/(2097152l)-OFF)/(8192l);
	}
	
	// Temp conversion
	TEMP = 2000l+int64_t(dT)*C[6]/8388608LL;
    2bd2:	84 85       	ldd	r24, Z+12	; 0x0c
    2bd4:	95 85       	ldd	r25, Z+13	; 0x0d
    2bd6:	3c 01       	movw	r6, r24
    2bd8:	81 2c       	mov	r8, r1
    2bda:	91 2c       	mov	r9, r1
    2bdc:	a1 2c       	mov	r10, r1
    2bde:	b1 2c       	mov	r11, r1
    2be0:	65 01       	movw	r12, r10
    2be2:	8d 8f       	std	Y+29, r24	; 0x1d
    2be4:	7e 8e       	std	Y+30, r7	; 0x1e
    2be6:	8f 8e       	std	Y+31, r8	; 0x1f
    2be8:	98 a2       	std	Y+32, r9	; 0x20
    2bea:	a9 a2       	std	Y+33, r10	; 0x21
    2bec:	ba a2       	std	Y+34, r11	; 0x22
    2bee:	cb a2       	std	Y+35, r12	; 0x23
    2bf0:	dc a2       	std	Y+36, r13	; 0x24
    2bf2:	a9 80       	ldd	r10, Y+1	; 0x01
    2bf4:	ba 80       	ldd	r11, Y+2	; 0x02
    2bf6:	cb 80       	ldd	r12, Y+3	; 0x03
    2bf8:	dc 80       	ldd	r13, Y+4	; 0x04
    2bfa:	ed 80       	ldd	r14, Y+5	; 0x05
    2bfc:	fe 2c       	mov	r15, r14
    2bfe:	0e 2d       	mov	r16, r14
    2c00:	1e 2d       	mov	r17, r14
    2c02:	28 2f       	mov	r18, r24
    2c04:	37 2d       	mov	r19, r7
    2c06:	40 e0       	ldi	r20, 0x00	; 0
    2c08:	50 e0       	ldi	r21, 0x00	; 0
    2c0a:	60 e0       	ldi	r22, 0x00	; 0
    2c0c:	70 e0       	ldi	r23, 0x00	; 0
    2c0e:	80 e0       	ldi	r24, 0x00	; 0
    2c10:	90 e0       	ldi	r25, 0x00	; 0
    2c12:	0e 94 3f 27 	call	0x4e7e	; 0x4e7e <__muldi3>
    2c16:	12 2f       	mov	r17, r18
    2c18:	3d a3       	std	Y+37, r19	; 0x25
    2c1a:	4d 8f       	std	Y+29, r20	; 0x1d
    2c1c:	b5 2f       	mov	r27, r21
    2c1e:	f6 2f       	mov	r31, r22
    2c20:	e7 2f       	mov	r30, r23
    2c22:	78 2e       	mov	r7, r24
    2c24:	89 2e       	mov	r8, r25
    2c26:	a0 e0       	ldi	r26, 0x00	; 0
    2c28:	0e 94 e5 27 	call	0x4fca	; 0x4fca <__cmpdi2_s8>
    2c2c:	84 f4       	brge	.+32     	; 0x2c4e <_ZN6MS58379calculateEv+0x590>
    2c2e:	21 50       	subi	r18, 0x01	; 1
    2c30:	31 09       	sbc	r19, r1
    2c32:	40 48       	sbci	r20, 0x80	; 128
    2c34:	5f 4f       	sbci	r21, 0xFF	; 255
    2c36:	6f 4f       	sbci	r22, 0xFF	; 255
    2c38:	7f 4f       	sbci	r23, 0xFF	; 255
    2c3a:	8f 4f       	sbci	r24, 0xFF	; 255
    2c3c:	9f 4f       	sbci	r25, 0xFF	; 255
    2c3e:	12 2f       	mov	r17, r18
    2c40:	3d a3       	std	Y+37, r19	; 0x25
    2c42:	4d 8f       	std	Y+29, r20	; 0x1d
    2c44:	b5 2f       	mov	r27, r21
    2c46:	f6 2f       	mov	r31, r22
    2c48:	e7 2f       	mov	r30, r23
    2c4a:	78 2e       	mov	r7, r24
    2c4c:	89 2e       	mov	r8, r25
    2c4e:	21 2f       	mov	r18, r17
    2c50:	3d a1       	ldd	r19, Y+37	; 0x25
    2c52:	4d 8d       	ldd	r20, Y+29	; 0x1d
    2c54:	5b 2f       	mov	r21, r27
    2c56:	6f 2f       	mov	r22, r31
    2c58:	7e 2f       	mov	r23, r30
    2c5a:	87 2d       	mov	r24, r7
    2c5c:	98 2d       	mov	r25, r8
    2c5e:	07 e1       	ldi	r16, 0x17	; 23
    2c60:	0e 94 a9 27 	call	0x4f52	; 0x4f52 <__ashrdi3>
    2c64:	82 2e       	mov	r8, r18
    2c66:	93 2e       	mov	r9, r19
    2c68:	a4 2e       	mov	r10, r20
    2c6a:	b5 2e       	mov	r11, r21
    2c6c:	24 01       	movw	r4, r8
    2c6e:	35 01       	movw	r6, r10
    2c70:	00 ed       	ldi	r16, 0xD0	; 208
    2c72:	40 0e       	add	r4, r16
    2c74:	07 e0       	ldi	r16, 0x07	; 7
    2c76:	50 1e       	adc	r5, r16
    2c78:	61 1c       	adc	r6, r1
    2c7a:	71 1c       	adc	r7, r1
			Ti = (11*int64_t(dT)*int64_t(dT))/(34359738368LL);
			OFFi = (31*(TEMP-2000)*(TEMP-2000))/8;
			SENSi = (63*(TEMP-2000)*(TEMP-2000))/32;
		}
		} else {
		if((TEMP/100)<20){         //Low temp
    2c7c:	10 ed       	ldi	r17, 0xD0	; 208
    2c7e:	41 16       	cp	r4, r17
    2c80:	17 e0       	ldi	r17, 0x07	; 7
    2c82:	51 06       	cpc	r5, r17
    2c84:	61 04       	cpc	r6, r1
    2c86:	71 04       	cpc	r7, r1
    2c88:	0c f4       	brge	.+2      	; 0x2c8c <_ZN6MS58379calculateEv+0x5ce>
    2c8a:	af c0       	rjmp	.+350    	; 0x2dea <_ZN6MS58379calculateEv+0x72c>
    2c8c:	8a c1       	rjmp	.+788    	; 0x2fa2 <_ZN6MS58379calculateEv+0x8e4>
	TEMP = 2000l+int64_t(dT)*C[6]/8388608LL;
	
	//Second order compensation
	if ( _model == MS5837_02BA ) {
		if((TEMP/100)<20){         //Low temp
			Ti = (11*int64_t(dT)*int64_t(dT))/(34359738368LL);
    2c8e:	29 81       	ldd	r18, Y+1	; 0x01
    2c90:	3a 81       	ldd	r19, Y+2	; 0x02
    2c92:	4b 81       	ldd	r20, Y+3	; 0x03
    2c94:	5c 81       	ldd	r21, Y+4	; 0x04
    2c96:	6d 81       	ldd	r22, Y+5	; 0x05
    2c98:	76 2f       	mov	r23, r22
    2c9a:	86 2f       	mov	r24, r22
    2c9c:	96 2f       	mov	r25, r22
    2c9e:	02 e0       	ldi	r16, 0x02	; 2
    2ca0:	0e 94 90 27 	call	0x4f20	; 0x4f20 <__ashldi3>
    2ca4:	a2 2e       	mov	r10, r18
    2ca6:	b3 2e       	mov	r11, r19
    2ca8:	c4 2e       	mov	r12, r20
    2caa:	d5 2e       	mov	r13, r21
    2cac:	e6 2e       	mov	r14, r22
    2cae:	f7 2e       	mov	r15, r23
    2cb0:	e8 2f       	mov	r30, r24
    2cb2:	19 2f       	mov	r17, r25
    2cb4:	0e 94 90 27 	call	0x4f20	; 0x4f20 <__ashldi3>
    2cb8:	0e 2f       	mov	r16, r30
    2cba:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <__subdi3>
    2cbe:	a9 80       	ldd	r10, Y+1	; 0x01
    2cc0:	ba 80       	ldd	r11, Y+2	; 0x02
    2cc2:	cb 80       	ldd	r12, Y+3	; 0x03
    2cc4:	dc 80       	ldd	r13, Y+4	; 0x04
    2cc6:	ed 80       	ldd	r14, Y+5	; 0x05
    2cc8:	fe 2c       	mov	r15, r14
    2cca:	0e 2d       	mov	r16, r14
    2ccc:	1e 2d       	mov	r17, r14
    2cce:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <__subdi3>
    2cd2:	e0 2e       	mov	r14, r16
    2cd4:	0f 2d       	mov	r16, r15
    2cd6:	0e 94 3f 27 	call	0x4e7e	; 0x4e7e <__muldi3>
    2cda:	12 2f       	mov	r17, r18
    2cdc:	3d 8f       	std	Y+29, r19	; 0x1d
    2cde:	4d 83       	std	Y+5, r20	; 0x05
    2ce0:	b5 2f       	mov	r27, r21
    2ce2:	f6 2f       	mov	r31, r22
    2ce4:	e7 2f       	mov	r30, r23
    2ce6:	89 83       	std	Y+1, r24	; 0x01
    2ce8:	89 2e       	mov	r8, r25
    2cea:	a0 e0       	ldi	r26, 0x00	; 0
    2cec:	0e 94 e5 27 	call	0x4fca	; 0x4fca <__cmpdi2_s8>
    2cf0:	84 f4       	brge	.+32     	; 0x2d12 <_ZN6MS58379calculateEv+0x654>
    2cf2:	21 50       	subi	r18, 0x01	; 1
    2cf4:	31 09       	sbc	r19, r1
    2cf6:	41 09       	sbc	r20, r1
    2cf8:	51 09       	sbc	r21, r1
    2cfa:	68 4f       	sbci	r22, 0xF8	; 248
    2cfc:	7f 4f       	sbci	r23, 0xFF	; 255
    2cfe:	8f 4f       	sbci	r24, 0xFF	; 255
    2d00:	9f 4f       	sbci	r25, 0xFF	; 255
    2d02:	12 2f       	mov	r17, r18
    2d04:	3d 8f       	std	Y+29, r19	; 0x1d
    2d06:	4d 83       	std	Y+5, r20	; 0x05
    2d08:	b5 2f       	mov	r27, r21
    2d0a:	f6 2f       	mov	r31, r22
    2d0c:	e7 2f       	mov	r30, r23
    2d0e:	89 83       	std	Y+1, r24	; 0x01
    2d10:	89 2e       	mov	r8, r25
    2d12:	21 2f       	mov	r18, r17
    2d14:	3d 8d       	ldd	r19, Y+29	; 0x1d
    2d16:	4d 81       	ldd	r20, Y+5	; 0x05
    2d18:	5b 2f       	mov	r21, r27
    2d1a:	6f 2f       	mov	r22, r31
    2d1c:	7e 2f       	mov	r23, r30
    2d1e:	89 81       	ldd	r24, Y+1	; 0x01
    2d20:	98 2d       	mov	r25, r8
    2d22:	03 e2       	ldi	r16, 0x23	; 35
    2d24:	0e 94 a9 27 	call	0x4f52	; 0x4f52 <__ashrdi3>
    2d28:	82 2e       	mov	r8, r18
    2d2a:	93 2e       	mov	r9, r19
    2d2c:	a4 2e       	mov	r10, r20
    2d2e:	b5 2e       	mov	r11, r21
			OFFi = (31*(TEMP-2000)*(TEMP-2000))/8;
    2d30:	73 01       	movw	r14, r6
    2d32:	62 01       	movw	r12, r4
    2d34:	20 ed       	ldi	r18, 0xD0	; 208
    2d36:	c2 1a       	sub	r12, r18
    2d38:	27 e0       	ldi	r18, 0x07	; 7
    2d3a:	d2 0a       	sbc	r13, r18
    2d3c:	e1 08       	sbc	r14, r1
    2d3e:	f1 08       	sbc	r15, r1
    2d40:	d7 01       	movw	r26, r14
    2d42:	c6 01       	movw	r24, r12
    2d44:	88 0f       	add	r24, r24
    2d46:	99 1f       	adc	r25, r25
    2d48:	aa 1f       	adc	r26, r26
    2d4a:	bb 1f       	adc	r27, r27
    2d4c:	88 0f       	add	r24, r24
    2d4e:	99 1f       	adc	r25, r25
    2d50:	aa 1f       	adc	r26, r26
    2d52:	bb 1f       	adc	r27, r27
    2d54:	88 0f       	add	r24, r24
    2d56:	99 1f       	adc	r25, r25
    2d58:	aa 1f       	adc	r26, r26
    2d5a:	bb 1f       	adc	r27, r27
    2d5c:	88 0f       	add	r24, r24
    2d5e:	99 1f       	adc	r25, r25
    2d60:	aa 1f       	adc	r26, r26
    2d62:	bb 1f       	adc	r27, r27
    2d64:	88 0f       	add	r24, r24
    2d66:	99 1f       	adc	r25, r25
    2d68:	aa 1f       	adc	r26, r26
    2d6a:	bb 1f       	adc	r27, r27
    2d6c:	9c 01       	movw	r18, r24
    2d6e:	ad 01       	movw	r20, r26
    2d70:	2c 19       	sub	r18, r12
    2d72:	3d 09       	sbc	r19, r13
    2d74:	4e 09       	sbc	r20, r14
    2d76:	5f 09       	sbc	r21, r15
    2d78:	c7 01       	movw	r24, r14
    2d7a:	b6 01       	movw	r22, r12
    2d7c:	0e 94 fc 26 	call	0x4df8	; 0x4df8 <__mulsi3>
    2d80:	8b 01       	movw	r16, r22
    2d82:	9c 01       	movw	r18, r24
    2d84:	99 23       	and	r25, r25
    2d86:	24 f4       	brge	.+8      	; 0x2d90 <_ZN6MS58379calculateEv+0x6d2>
    2d88:	09 5f       	subi	r16, 0xF9	; 249
    2d8a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d8c:	2f 4f       	sbci	r18, 0xFF	; 255
    2d8e:	3f 4f       	sbci	r19, 0xFF	; 255
    2d90:	b9 01       	movw	r22, r18
    2d92:	a8 01       	movw	r20, r16
    2d94:	68 94       	set
    2d96:	12 f8       	bld	r1, 2
    2d98:	75 95       	asr	r23
    2d9a:	67 95       	ror	r22
    2d9c:	57 95       	ror	r21
    2d9e:	47 95       	ror	r20
    2da0:	16 94       	lsr	r1
    2da2:	d1 f7       	brne	.-12     	; 0x2d98 <_ZN6MS58379calculateEv+0x6da>
    2da4:	49 83       	std	Y+1, r20	; 0x01
    2da6:	5a 83       	std	Y+2, r21	; 0x02
    2da8:	6b 83       	std	Y+3, r22	; 0x03
    2daa:	7c 83       	std	Y+4, r23	; 0x04
			SENSi = (63*(TEMP-2000)*(TEMP-2000))/32;
    2dac:	af e3       	ldi	r26, 0x3F	; 63
    2dae:	b0 e0       	ldi	r27, 0x00	; 0
    2db0:	a7 01       	movw	r20, r14
    2db2:	96 01       	movw	r18, r12
    2db4:	0e 94 35 27 	call	0x4e6a	; 0x4e6a <__muluhisi3>
    2db8:	9b 01       	movw	r18, r22
    2dba:	ac 01       	movw	r20, r24
    2dbc:	c7 01       	movw	r24, r14
    2dbe:	b6 01       	movw	r22, r12
    2dc0:	0e 94 fc 26 	call	0x4df8	; 0x4df8 <__mulsi3>
    2dc4:	8b 01       	movw	r16, r22
    2dc6:	9c 01       	movw	r18, r24
    2dc8:	99 23       	and	r25, r25
    2dca:	24 f4       	brge	.+8      	; 0x2dd4 <_ZN6MS58379calculateEv+0x716>
    2dcc:	01 5e       	subi	r16, 0xE1	; 225
    2dce:	1f 4f       	sbci	r17, 0xFF	; 255
    2dd0:	2f 4f       	sbci	r18, 0xFF	; 255
    2dd2:	3f 4f       	sbci	r19, 0xFF	; 255
    2dd4:	78 01       	movw	r14, r16
    2dd6:	89 01       	movw	r16, r18
    2dd8:	68 94       	set
    2dda:	14 f8       	bld	r1, 4
    2ddc:	15 95       	asr	r17
    2dde:	07 95       	ror	r16
    2de0:	f7 94       	ror	r15
    2de2:	e7 94       	ror	r14
    2de4:	16 94       	lsr	r1
    2de6:	d1 f7       	brne	.-12     	; 0x2ddc <_ZN6MS58379calculateEv+0x71e>
    2de8:	47 c1       	rjmp	.+654    	; 0x3078 <_ZN6MS58379calculateEv+0x9ba>
		}
		} else {
		if((TEMP/100)<20){         //Low temp
			Ti = (3*int64_t(dT)*int64_t(dT))/(8589934592LL);
    2dea:	29 81       	ldd	r18, Y+1	; 0x01
    2dec:	3a 81       	ldd	r19, Y+2	; 0x02
    2dee:	4b 81       	ldd	r20, Y+3	; 0x03
    2df0:	5c 81       	ldd	r21, Y+4	; 0x04
    2df2:	6d 81       	ldd	r22, Y+5	; 0x05
    2df4:	76 2f       	mov	r23, r22
    2df6:	86 2f       	mov	r24, r22
    2df8:	96 2f       	mov	r25, r22
    2dfa:	01 e0       	ldi	r16, 0x01	; 1
    2dfc:	0e 94 90 27 	call	0x4f20	; 0x4f20 <__ashldi3>
    2e00:	a9 80       	ldd	r10, Y+1	; 0x01
    2e02:	ba 80       	ldd	r11, Y+2	; 0x02
    2e04:	cb 80       	ldd	r12, Y+3	; 0x03
    2e06:	dc 80       	ldd	r13, Y+4	; 0x04
    2e08:	ed 80       	ldd	r14, Y+5	; 0x05
    2e0a:	fe 2c       	mov	r15, r14
    2e0c:	0e 2d       	mov	r16, r14
    2e0e:	1e 2d       	mov	r17, r14
    2e10:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <__adddi3>
    2e14:	e0 2e       	mov	r14, r16
    2e16:	0f 2d       	mov	r16, r15
    2e18:	0e 94 3f 27 	call	0x4e7e	; 0x4e7e <__muldi3>
    2e1c:	12 2f       	mov	r17, r18
    2e1e:	3d 8f       	std	Y+29, r19	; 0x1d
    2e20:	4d 83       	std	Y+5, r20	; 0x05
    2e22:	b5 2f       	mov	r27, r21
    2e24:	f6 2f       	mov	r31, r22
    2e26:	e7 2f       	mov	r30, r23
    2e28:	89 83       	std	Y+1, r24	; 0x01
    2e2a:	89 2e       	mov	r8, r25
    2e2c:	a0 e0       	ldi	r26, 0x00	; 0
    2e2e:	0e 94 e5 27 	call	0x4fca	; 0x4fca <__cmpdi2_s8>
    2e32:	84 f4       	brge	.+32     	; 0x2e54 <_ZN6MS58379calculateEv+0x796>
    2e34:	21 50       	subi	r18, 0x01	; 1
    2e36:	31 09       	sbc	r19, r1
    2e38:	41 09       	sbc	r20, r1
    2e3a:	51 09       	sbc	r21, r1
    2e3c:	6e 4f       	sbci	r22, 0xFE	; 254
    2e3e:	7f 4f       	sbci	r23, 0xFF	; 255
    2e40:	8f 4f       	sbci	r24, 0xFF	; 255
    2e42:	9f 4f       	sbci	r25, 0xFF	; 255
    2e44:	12 2f       	mov	r17, r18
    2e46:	3d 8f       	std	Y+29, r19	; 0x1d
    2e48:	4d 83       	std	Y+5, r20	; 0x05
    2e4a:	b5 2f       	mov	r27, r21
    2e4c:	f6 2f       	mov	r31, r22
    2e4e:	e7 2f       	mov	r30, r23
    2e50:	89 83       	std	Y+1, r24	; 0x01
    2e52:	89 2e       	mov	r8, r25
    2e54:	21 2f       	mov	r18, r17
    2e56:	3d 8d       	ldd	r19, Y+29	; 0x1d
    2e58:	4d 81       	ldd	r20, Y+5	; 0x05
    2e5a:	5b 2f       	mov	r21, r27
    2e5c:	6f 2f       	mov	r22, r31
    2e5e:	7e 2f       	mov	r23, r30
    2e60:	89 81       	ldd	r24, Y+1	; 0x01
    2e62:	98 2d       	mov	r25, r8
    2e64:	01 e2       	ldi	r16, 0x21	; 33
    2e66:	0e 94 a9 27 	call	0x4f52	; 0x4f52 <__ashrdi3>
    2e6a:	2d 83       	std	Y+5, r18	; 0x05
    2e6c:	3e 83       	std	Y+6, r19	; 0x06
    2e6e:	4f 83       	std	Y+7, r20	; 0x07
    2e70:	58 87       	std	Y+8, r21	; 0x08
			OFFi = (3*(TEMP-2000)*(TEMP-2000))/2;
    2e72:	53 01       	movw	r10, r6
    2e74:	42 01       	movw	r8, r4
    2e76:	50 ed       	ldi	r21, 0xD0	; 208
    2e78:	85 1a       	sub	r8, r21
    2e7a:	57 e0       	ldi	r21, 0x07	; 7
    2e7c:	95 0a       	sbc	r9, r21
    2e7e:	a1 08       	sbc	r10, r1
    2e80:	b1 08       	sbc	r11, r1
    2e82:	d5 01       	movw	r26, r10
    2e84:	c4 01       	movw	r24, r8
    2e86:	88 0f       	add	r24, r24
    2e88:	99 1f       	adc	r25, r25
    2e8a:	aa 1f       	adc	r26, r26
    2e8c:	bb 1f       	adc	r27, r27
    2e8e:	9c 01       	movw	r18, r24
    2e90:	ad 01       	movw	r20, r26
    2e92:	28 0d       	add	r18, r8
    2e94:	39 1d       	adc	r19, r9
    2e96:	4a 1d       	adc	r20, r10
    2e98:	5b 1d       	adc	r21, r11
    2e9a:	c5 01       	movw	r24, r10
    2e9c:	b4 01       	movw	r22, r8
    2e9e:	0e 94 fc 26 	call	0x4df8	; 0x4df8 <__mulsi3>
    2ea2:	8b 01       	movw	r16, r22
    2ea4:	9c 01       	movw	r18, r24
    2ea6:	99 23       	and	r25, r25
    2ea8:	24 f4       	brge	.+8      	; 0x2eb2 <_ZN6MS58379calculateEv+0x7f4>
    2eaa:	0f 5f       	subi	r16, 0xFF	; 255
    2eac:	1f 4f       	sbci	r17, 0xFF	; 255
    2eae:	2f 4f       	sbci	r18, 0xFF	; 255
    2eb0:	3f 4f       	sbci	r19, 0xFF	; 255
    2eb2:	c9 01       	movw	r24, r18
    2eb4:	b8 01       	movw	r22, r16
    2eb6:	95 95       	asr	r25
    2eb8:	87 95       	ror	r24
    2eba:	77 95       	ror	r23
    2ebc:	67 95       	ror	r22
    2ebe:	69 83       	std	Y+1, r22	; 0x01
    2ec0:	7a 83       	std	Y+2, r23	; 0x02
    2ec2:	8b 83       	std	Y+3, r24	; 0x03
    2ec4:	9c 83       	std	Y+4, r25	; 0x04
			SENSi = (5*(TEMP-2000)*(TEMP-2000))/8;
    2ec6:	d5 01       	movw	r26, r10
    2ec8:	c4 01       	movw	r24, r8
    2eca:	88 0f       	add	r24, r24
    2ecc:	99 1f       	adc	r25, r25
    2ece:	aa 1f       	adc	r26, r26
    2ed0:	bb 1f       	adc	r27, r27
    2ed2:	88 0f       	add	r24, r24
    2ed4:	99 1f       	adc	r25, r25
    2ed6:	aa 1f       	adc	r26, r26
    2ed8:	bb 1f       	adc	r27, r27
    2eda:	9c 01       	movw	r18, r24
    2edc:	ad 01       	movw	r20, r26
    2ede:	28 0d       	add	r18, r8
    2ee0:	39 1d       	adc	r19, r9
    2ee2:	4a 1d       	adc	r20, r10
    2ee4:	5b 1d       	adc	r21, r11
    2ee6:	c5 01       	movw	r24, r10
    2ee8:	b4 01       	movw	r22, r8
    2eea:	0e 94 fc 26 	call	0x4df8	; 0x4df8 <__mulsi3>
    2eee:	8b 01       	movw	r16, r22
    2ef0:	9c 01       	movw	r18, r24
    2ef2:	99 23       	and	r25, r25
    2ef4:	24 f4       	brge	.+8      	; 0x2efe <_ZN6MS58379calculateEv+0x840>
    2ef6:	09 5f       	subi	r16, 0xF9	; 249
    2ef8:	1f 4f       	sbci	r17, 0xFF	; 255
    2efa:	2f 4f       	sbci	r18, 0xFF	; 255
    2efc:	3f 4f       	sbci	r19, 0xFF	; 255
    2efe:	78 01       	movw	r14, r16
    2f00:	89 01       	movw	r16, r18
    2f02:	68 94       	set
    2f04:	12 f8       	bld	r1, 2
    2f06:	15 95       	asr	r17
    2f08:	07 95       	ror	r16
    2f0a:	f7 94       	ror	r15
    2f0c:	e7 94       	ror	r14
    2f0e:	16 94       	lsr	r1
    2f10:	d1 f7       	brne	.-12     	; 0x2f06 <_ZN6MS58379calculateEv+0x848>
			if((TEMP/100)<-15){    //Very low temp
    2f12:	71 ec       	ldi	r23, 0xC1	; 193
    2f14:	47 16       	cp	r4, r23
    2f16:	79 ef       	ldi	r23, 0xF9	; 249
    2f18:	57 06       	cpc	r5, r23
    2f1a:	7f ef       	ldi	r23, 0xFF	; 255
    2f1c:	67 06       	cpc	r6, r23
    2f1e:	77 06       	cpc	r7, r23
    2f20:	0c f0       	brlt	.+2      	; 0x2f24 <_ZN6MS58379calculateEv+0x866>
    2f22:	7f c1       	rjmp	.+766    	; 0x3222 <_ZN6MS58379calculateEv+0xb64>
				OFFi = OFFi+7*(TEMP+1500l)*(TEMP+1500l);
    2f24:	53 01       	movw	r10, r6
    2f26:	42 01       	movw	r8, r4
    2f28:	8c ed       	ldi	r24, 0xDC	; 220
    2f2a:	88 0e       	add	r8, r24
    2f2c:	85 e0       	ldi	r24, 0x05	; 5
    2f2e:	98 1e       	adc	r9, r24
    2f30:	a1 1c       	adc	r10, r1
    2f32:	b1 1c       	adc	r11, r1
    2f34:	d5 01       	movw	r26, r10
    2f36:	c4 01       	movw	r24, r8
    2f38:	88 0f       	add	r24, r24
    2f3a:	99 1f       	adc	r25, r25
    2f3c:	aa 1f       	adc	r26, r26
    2f3e:	bb 1f       	adc	r27, r27
    2f40:	88 0f       	add	r24, r24
    2f42:	99 1f       	adc	r25, r25
    2f44:	aa 1f       	adc	r26, r26
    2f46:	bb 1f       	adc	r27, r27
    2f48:	88 0f       	add	r24, r24
    2f4a:	99 1f       	adc	r25, r25
    2f4c:	aa 1f       	adc	r26, r26
    2f4e:	bb 1f       	adc	r27, r27
    2f50:	9c 01       	movw	r18, r24
    2f52:	ad 01       	movw	r20, r26
    2f54:	28 19       	sub	r18, r8
    2f56:	39 09       	sbc	r19, r9
    2f58:	4a 09       	sbc	r20, r10
    2f5a:	5b 09       	sbc	r21, r11
    2f5c:	c5 01       	movw	r24, r10
    2f5e:	b4 01       	movw	r22, r8
    2f60:	0e 94 fc 26 	call	0x4df8	; 0x4df8 <__mulsi3>
    2f64:	29 81       	ldd	r18, Y+1	; 0x01
    2f66:	3a 81       	ldd	r19, Y+2	; 0x02
    2f68:	4b 81       	ldd	r20, Y+3	; 0x03
    2f6a:	5c 81       	ldd	r21, Y+4	; 0x04
    2f6c:	26 0f       	add	r18, r22
    2f6e:	37 1f       	adc	r19, r23
    2f70:	48 1f       	adc	r20, r24
    2f72:	59 1f       	adc	r21, r25
    2f74:	29 83       	std	Y+1, r18	; 0x01
    2f76:	3a 83       	std	Y+2, r19	; 0x02
    2f78:	4b 83       	std	Y+3, r20	; 0x03
    2f7a:	5c 83       	std	Y+4, r21	; 0x04
				SENSi = SENSi+4*(TEMP+1500l)*(TEMP+1500l);
    2f7c:	a5 01       	movw	r20, r10
    2f7e:	94 01       	movw	r18, r8
    2f80:	22 0f       	add	r18, r18
    2f82:	33 1f       	adc	r19, r19
    2f84:	44 1f       	adc	r20, r20
    2f86:	55 1f       	adc	r21, r21
    2f88:	22 0f       	add	r18, r18
    2f8a:	33 1f       	adc	r19, r19
    2f8c:	44 1f       	adc	r20, r20
    2f8e:	55 1f       	adc	r21, r21
    2f90:	c5 01       	movw	r24, r10
    2f92:	b4 01       	movw	r22, r8
    2f94:	0e 94 fc 26 	call	0x4df8	; 0x4df8 <__mulsi3>
    2f98:	e6 0e       	add	r14, r22
    2f9a:	f7 1e       	adc	r15, r23
    2f9c:	08 1f       	adc	r16, r24
    2f9e:	19 1f       	adc	r17, r25
    2fa0:	40 c1       	rjmp	.+640    	; 0x3222 <_ZN6MS58379calculateEv+0xb64>
			}
		}
		else if((TEMP/100)>=20){    //High temp
			Ti = 2*(dT*dT)/(137438953472LL);
    2fa2:	29 81       	ldd	r18, Y+1	; 0x01
    2fa4:	3a 81       	ldd	r19, Y+2	; 0x02
    2fa6:	4b 81       	ldd	r20, Y+3	; 0x03
    2fa8:	5c 81       	ldd	r21, Y+4	; 0x04
    2faa:	ca 01       	movw	r24, r20
    2fac:	b9 01       	movw	r22, r18
    2fae:	0e 94 fc 26 	call	0x4df8	; 0x4df8 <__mulsi3>
    2fb2:	4b 01       	movw	r8, r22
    2fb4:	5c 01       	movw	r10, r24
    2fb6:	88 0c       	add	r8, r8
    2fb8:	99 1c       	adc	r9, r9
    2fba:	aa 1c       	adc	r10, r10
    2fbc:	bb 1c       	adc	r11, r11
    2fbe:	75 01       	movw	r14, r10
    2fc0:	64 01       	movw	r12, r8
    2fc2:	ff 0c       	add	r15, r15
    2fc4:	cc 08       	sbc	r12, r12
    2fc6:	dc 2c       	mov	r13, r12
    2fc8:	76 01       	movw	r14, r12
    2fca:	18 2d       	mov	r17, r8
    2fcc:	9d 8e       	std	Y+29, r9	; 0x1d
    2fce:	ad 82       	std	Y+5, r10	; 0x05
    2fd0:	bb 2d       	mov	r27, r11
    2fd2:	fc 2d       	mov	r31, r12
    2fd4:	ec 2d       	mov	r30, r12
    2fd6:	c9 82       	std	Y+1, r12	; 0x01
    2fd8:	0c 2d       	mov	r16, r12
    2fda:	28 2d       	mov	r18, r8
    2fdc:	39 2d       	mov	r19, r9
    2fde:	4a 2d       	mov	r20, r10
    2fe0:	5b 2d       	mov	r21, r11
    2fe2:	6c 2d       	mov	r22, r12
    2fe4:	7c 2d       	mov	r23, r12
    2fe6:	8c 2d       	mov	r24, r12
    2fe8:	9c 2d       	mov	r25, r12
    2fea:	a0 e0       	ldi	r26, 0x00	; 0
    2fec:	0e 94 e5 27 	call	0x4fca	; 0x4fca <__cmpdi2_s8>
    2ff0:	84 f4       	brge	.+32     	; 0x3012 <_ZN6MS58379calculateEv+0x954>
    2ff2:	21 50       	subi	r18, 0x01	; 1
    2ff4:	31 09       	sbc	r19, r1
    2ff6:	41 09       	sbc	r20, r1
    2ff8:	51 09       	sbc	r21, r1
    2ffa:	60 4e       	sbci	r22, 0xE0	; 224
    2ffc:	7f 4f       	sbci	r23, 0xFF	; 255
    2ffe:	8f 4f       	sbci	r24, 0xFF	; 255
    3000:	9f 4f       	sbci	r25, 0xFF	; 255
    3002:	12 2f       	mov	r17, r18
    3004:	3d 8f       	std	Y+29, r19	; 0x1d
    3006:	4d 83       	std	Y+5, r20	; 0x05
    3008:	b5 2f       	mov	r27, r21
    300a:	f6 2f       	mov	r31, r22
    300c:	e7 2f       	mov	r30, r23
    300e:	89 83       	std	Y+1, r24	; 0x01
    3010:	09 2f       	mov	r16, r25
    3012:	21 2f       	mov	r18, r17
    3014:	3d 8d       	ldd	r19, Y+29	; 0x1d
    3016:	4d 81       	ldd	r20, Y+5	; 0x05
    3018:	5b 2f       	mov	r21, r27
    301a:	6f 2f       	mov	r22, r31
    301c:	7e 2f       	mov	r23, r30
    301e:	89 81       	ldd	r24, Y+1	; 0x01
    3020:	90 2f       	mov	r25, r16
    3022:	05 e2       	ldi	r16, 0x25	; 37
    3024:	0e 94 a9 27 	call	0x4f52	; 0x4f52 <__ashrdi3>
    3028:	2d 83       	std	Y+5, r18	; 0x05
    302a:	3e 83       	std	Y+6, r19	; 0x06
    302c:	4f 83       	std	Y+7, r20	; 0x07
    302e:	58 87       	std	Y+8, r21	; 0x08
			OFFi = (1*(TEMP-2000)*(TEMP-2000))/16;
    3030:	c3 01       	movw	r24, r6
    3032:	b2 01       	movw	r22, r4
    3034:	60 5d       	subi	r22, 0xD0	; 208
    3036:	77 40       	sbci	r23, 0x07	; 7
    3038:	81 09       	sbc	r24, r1
    303a:	91 09       	sbc	r25, r1
    303c:	9b 01       	movw	r18, r22
    303e:	ac 01       	movw	r20, r24
    3040:	0e 94 fc 26 	call	0x4df8	; 0x4df8 <__mulsi3>
    3044:	8b 01       	movw	r16, r22
    3046:	9c 01       	movw	r18, r24
    3048:	99 23       	and	r25, r25
    304a:	24 f4       	brge	.+8      	; 0x3054 <_ZN6MS58379calculateEv+0x996>
    304c:	01 5f       	subi	r16, 0xF1	; 241
    304e:	1f 4f       	sbci	r17, 0xFF	; 255
    3050:	2f 4f       	sbci	r18, 0xFF	; 255
    3052:	3f 4f       	sbci	r19, 0xFF	; 255
    3054:	48 01       	movw	r8, r16
    3056:	59 01       	movw	r10, r18
    3058:	68 94       	set
    305a:	13 f8       	bld	r1, 3
    305c:	b5 94       	asr	r11
    305e:	a7 94       	ror	r10
    3060:	97 94       	ror	r9
    3062:	87 94       	ror	r8
    3064:	16 94       	lsr	r1
    3066:	d1 f7       	brne	.-12     	; 0x305c <_ZN6MS58379calculateEv+0x99e>
    3068:	89 82       	std	Y+1, r8	; 0x01
    306a:	9a 82       	std	Y+2, r9	; 0x02
    306c:	ab 82       	std	Y+3, r10	; 0x03
    306e:	bc 82       	std	Y+4, r11	; 0x04
			SENSi = 0;
    3070:	e1 2c       	mov	r14, r1
    3072:	f1 2c       	mov	r15, r1
    3074:	87 01       	movw	r16, r14
    3076:	d5 c0       	rjmp	.+426    	; 0x3222 <_ZN6MS58379calculateEv+0xb64>
	}
	
	OFF2 = OFF-OFFi;           //Calculate pressure and temp second order
	SENS2 = SENS-SENSi;
	
	TEMP = (TEMP-Ti);
    3078:	d3 01       	movw	r26, r6
    307a:	c2 01       	movw	r24, r4
    307c:	88 19       	sub	r24, r8
    307e:	99 09       	sbc	r25, r9
    3080:	aa 09       	sbc	r26, r10
    3082:	bb 09       	sbc	r27, r11
    3084:	f1 01       	movw	r30, r2
    3086:	80 8f       	std	Z+24, r24	; 0x18
    3088:	91 8f       	std	Z+25, r25	; 0x19
    308a:	a2 8f       	std	Z+26, r26	; 0x1a
    308c:	b3 8f       	std	Z+27, r27	; 0x1b
	
	if ( _model == MS5837_02BA ) {
		P = (((D1*SENS2)/2097152l-OFF2)/32768l);
    308e:	80 89       	ldd	r24, Z+16	; 0x10
    3090:	91 89       	ldd	r25, Z+17	; 0x11
    3092:	a2 89       	ldd	r26, Z+18	; 0x12
    3094:	b3 89       	ldd	r27, Z+19	; 0x13
    3096:	3c 01       	movw	r6, r24
    3098:	4d 01       	movw	r8, r26
    309a:	a1 2c       	mov	r10, r1
    309c:	b1 2c       	mov	r11, r1
    309e:	65 01       	movw	r12, r10
    30a0:	8d 83       	std	Y+5, r24	; 0x05
    30a2:	7e 82       	std	Y+6, r7	; 0x06
    30a4:	8f 82       	std	Y+7, r8	; 0x07
    30a6:	98 86       	std	Y+8, r9	; 0x08
    30a8:	a9 86       	std	Y+9, r10	; 0x09
    30aa:	ba 86       	std	Y+10, r11	; 0x0a
    30ac:	cb 86       	std	Y+11, r12	; 0x0b
    30ae:	dc 86       	std	Y+12, r13	; 0x0c
    30b0:	27 01       	movw	r4, r14
    30b2:	38 01       	movw	r6, r16
    30b4:	77 0c       	add	r7, r7
    30b6:	44 08       	sbc	r4, r4
    30b8:	54 2c       	mov	r5, r4
    30ba:	32 01       	movw	r6, r4
    30bc:	2d 85       	ldd	r18, Y+13	; 0x0d
    30be:	3e 85       	ldd	r19, Y+14	; 0x0e
    30c0:	4f 85       	ldd	r20, Y+15	; 0x0f
    30c2:	58 89       	ldd	r21, Y+16	; 0x10
    30c4:	69 89       	ldd	r22, Y+17	; 0x11
    30c6:	7a 89       	ldd	r23, Y+18	; 0x12
    30c8:	8b 89       	ldd	r24, Y+19	; 0x13
    30ca:	9c 89       	ldd	r25, Y+20	; 0x14
    30cc:	ae 2c       	mov	r10, r14
    30ce:	bf 2c       	mov	r11, r15
    30d0:	c0 2e       	mov	r12, r16
    30d2:	d1 2e       	mov	r13, r17
    30d4:	e4 2c       	mov	r14, r4
    30d6:	f4 2c       	mov	r15, r4
    30d8:	04 2d       	mov	r16, r4
    30da:	14 2d       	mov	r17, r4
    30dc:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <__subdi3>
    30e0:	a2 2e       	mov	r10, r18
    30e2:	b3 2e       	mov	r11, r19
    30e4:	c4 2e       	mov	r12, r20
    30e6:	d5 2e       	mov	r13, r21
    30e8:	e6 2e       	mov	r14, r22
    30ea:	f7 2e       	mov	r15, r23
    30ec:	08 2f       	mov	r16, r24
    30ee:	19 2f       	mov	r17, r25
    30f0:	2d 81       	ldd	r18, Y+5	; 0x05
    30f2:	3e 81       	ldd	r19, Y+6	; 0x06
    30f4:	48 2d       	mov	r20, r8
    30f6:	59 2d       	mov	r21, r9
    30f8:	60 e0       	ldi	r22, 0x00	; 0
    30fa:	70 e0       	ldi	r23, 0x00	; 0
    30fc:	80 e0       	ldi	r24, 0x00	; 0
    30fe:	90 e0       	ldi	r25, 0x00	; 0
    3100:	0e 94 3f 27 	call	0x4e7e	; 0x4e7e <__muldi3>
    3104:	12 2f       	mov	r17, r18
    3106:	3d 87       	std	Y+13, r19	; 0x0d
    3108:	4d 83       	std	Y+5, r20	; 0x05
    310a:	b5 2f       	mov	r27, r21
    310c:	f6 2f       	mov	r31, r22
    310e:	e7 2f       	mov	r30, r23
    3110:	78 2e       	mov	r7, r24
    3112:	89 2e       	mov	r8, r25
    3114:	a0 e0       	ldi	r26, 0x00	; 0
    3116:	0e 94 e5 27 	call	0x4fca	; 0x4fca <__cmpdi2_s8>
    311a:	84 f4       	brge	.+32     	; 0x313c <_ZN6MS58379calculateEv+0xa7e>
    311c:	21 50       	subi	r18, 0x01	; 1
    311e:	31 09       	sbc	r19, r1
    3120:	40 4e       	sbci	r20, 0xE0	; 224
    3122:	5f 4f       	sbci	r21, 0xFF	; 255
    3124:	6f 4f       	sbci	r22, 0xFF	; 255
    3126:	7f 4f       	sbci	r23, 0xFF	; 255
    3128:	8f 4f       	sbci	r24, 0xFF	; 255
    312a:	9f 4f       	sbci	r25, 0xFF	; 255
    312c:	12 2f       	mov	r17, r18
    312e:	3d 87       	std	Y+13, r19	; 0x0d
    3130:	4d 83       	std	Y+5, r20	; 0x05
    3132:	b5 2f       	mov	r27, r21
    3134:	f6 2f       	mov	r31, r22
    3136:	e7 2f       	mov	r30, r23
    3138:	78 2e       	mov	r7, r24
    313a:	89 2e       	mov	r8, r25
    313c:	21 2f       	mov	r18, r17
    313e:	3d 85       	ldd	r19, Y+13	; 0x0d
    3140:	4d 81       	ldd	r20, Y+5	; 0x05
    3142:	5b 2f       	mov	r21, r27
    3144:	6f 2f       	mov	r22, r31
    3146:	7e 2f       	mov	r23, r30
    3148:	87 2d       	mov	r24, r7
    314a:	98 2d       	mov	r25, r8
    314c:	05 e1       	ldi	r16, 0x15	; 21
    314e:	0e 94 a9 27 	call	0x4f52	; 0x4f52 <__ashrdi3>
    3152:	82 2e       	mov	r8, r18
    3154:	93 2e       	mov	r9, r19
    3156:	4d 87       	std	Y+13, r20	; 0x0d
    3158:	5d 83       	std	Y+5, r21	; 0x05
    315a:	b6 2f       	mov	r27, r22
    315c:	a7 2f       	mov	r26, r23
    315e:	f8 2f       	mov	r31, r24
    3160:	e9 2f       	mov	r30, r25
    3162:	49 80       	ldd	r4, Y+1	; 0x01
    3164:	5a 80       	ldd	r5, Y+2	; 0x02
    3166:	6b 80       	ldd	r6, Y+3	; 0x03
    3168:	7c 80       	ldd	r7, Y+4	; 0x04
    316a:	77 0c       	add	r7, r7
    316c:	44 08       	sbc	r4, r4
    316e:	54 2c       	mov	r5, r4
    3170:	32 01       	movw	r6, r4
    3172:	2d 89       	ldd	r18, Y+21	; 0x15
    3174:	3e 89       	ldd	r19, Y+22	; 0x16
    3176:	4f 89       	ldd	r20, Y+23	; 0x17
    3178:	58 8d       	ldd	r21, Y+24	; 0x18
    317a:	69 8d       	ldd	r22, Y+25	; 0x19
    317c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    317e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3180:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3182:	a9 80       	ldd	r10, Y+1	; 0x01
    3184:	ba 80       	ldd	r11, Y+2	; 0x02
    3186:	cb 80       	ldd	r12, Y+3	; 0x03
    3188:	dc 80       	ldd	r13, Y+4	; 0x04
    318a:	e4 2c       	mov	r14, r4
    318c:	f4 2c       	mov	r15, r4
    318e:	04 2d       	mov	r16, r4
    3190:	14 2d       	mov	r17, r4
    3192:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <__subdi3>
    3196:	a2 2e       	mov	r10, r18
    3198:	b3 2e       	mov	r11, r19
    319a:	c4 2e       	mov	r12, r20
    319c:	d5 2e       	mov	r13, r21
    319e:	e6 2e       	mov	r14, r22
    31a0:	f7 2e       	mov	r15, r23
    31a2:	08 2f       	mov	r16, r24
    31a4:	19 2f       	mov	r17, r25
    31a6:	28 2d       	mov	r18, r8
    31a8:	39 2d       	mov	r19, r9
    31aa:	4d 85       	ldd	r20, Y+13	; 0x0d
    31ac:	5d 81       	ldd	r21, Y+5	; 0x05
    31ae:	6b 2f       	mov	r22, r27
    31b0:	7a 2f       	mov	r23, r26
    31b2:	8f 2f       	mov	r24, r31
    31b4:	9e 2f       	mov	r25, r30
    31b6:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <__subdi3>
    31ba:	12 2f       	mov	r17, r18
    31bc:	3d 83       	std	Y+5, r19	; 0x05
    31be:	49 83       	std	Y+1, r20	; 0x01
    31c0:	b5 2f       	mov	r27, r21
    31c2:	f6 2f       	mov	r31, r22
    31c4:	e7 2f       	mov	r30, r23
    31c6:	78 2e       	mov	r7, r24
    31c8:	89 2e       	mov	r8, r25
    31ca:	a0 e0       	ldi	r26, 0x00	; 0
    31cc:	0e 94 e5 27 	call	0x4fca	; 0x4fca <__cmpdi2_s8>
    31d0:	84 f4       	brge	.+32     	; 0x31f2 <_ZN6MS58379calculateEv+0xb34>
    31d2:	21 50       	subi	r18, 0x01	; 1
    31d4:	30 48       	sbci	r19, 0x80	; 128
    31d6:	4f 4f       	sbci	r20, 0xFF	; 255
    31d8:	5f 4f       	sbci	r21, 0xFF	; 255
    31da:	6f 4f       	sbci	r22, 0xFF	; 255
    31dc:	7f 4f       	sbci	r23, 0xFF	; 255
    31de:	8f 4f       	sbci	r24, 0xFF	; 255
    31e0:	9f 4f       	sbci	r25, 0xFF	; 255
    31e2:	12 2f       	mov	r17, r18
    31e4:	3d 83       	std	Y+5, r19	; 0x05
    31e6:	49 83       	std	Y+1, r20	; 0x01
    31e8:	b5 2f       	mov	r27, r21
    31ea:	f6 2f       	mov	r31, r22
    31ec:	e7 2f       	mov	r30, r23
    31ee:	78 2e       	mov	r7, r24
    31f0:	89 2e       	mov	r8, r25
    31f2:	21 2f       	mov	r18, r17
    31f4:	3d 81       	ldd	r19, Y+5	; 0x05
    31f6:	49 81       	ldd	r20, Y+1	; 0x01
    31f8:	5b 2f       	mov	r21, r27
    31fa:	6f 2f       	mov	r22, r31
    31fc:	7e 2f       	mov	r23, r30
    31fe:	87 2d       	mov	r24, r7
    3200:	98 2d       	mov	r25, r8
    3202:	0f e0       	ldi	r16, 0x0F	; 15
    3204:	0e 94 a9 27 	call	0x4f52	; 0x4f52 <__ashrdi3>
    3208:	d1 01       	movw	r26, r2
    320a:	5c 96       	adiw	r26, 0x1c	; 28
    320c:	2c 93       	st	X, r18
    320e:	5c 97       	sbiw	r26, 0x1c	; 28
    3210:	5d 96       	adiw	r26, 0x1d	; 29
    3212:	3c 93       	st	X, r19
    3214:	5d 97       	sbiw	r26, 0x1d	; 29
    3216:	5e 96       	adiw	r26, 0x1e	; 30
    3218:	4c 93       	st	X, r20
    321a:	5e 97       	sbiw	r26, 0x1e	; 30
    321c:	5f 96       	adiw	r26, 0x1f	; 31
    321e:	5c 93       	st	X, r21
    3220:	da c0       	rjmp	.+436    	; 0x33d6 <_ZN6MS58379calculateEv+0xd18>
	}
	
	OFF2 = OFF-OFFi;           //Calculate pressure and temp second order
	SENS2 = SENS-SENSi;
	
	TEMP = (TEMP-Ti);
    3222:	8d 80       	ldd	r8, Y+5	; 0x05
    3224:	9e 80       	ldd	r9, Y+6	; 0x06
    3226:	af 80       	ldd	r10, Y+7	; 0x07
    3228:	b8 84       	ldd	r11, Y+8	; 0x08
    322a:	48 18       	sub	r4, r8
    322c:	59 08       	sbc	r5, r9
    322e:	6a 08       	sbc	r6, r10
    3230:	7b 08       	sbc	r7, r11
    3232:	d1 01       	movw	r26, r2
    3234:	58 96       	adiw	r26, 0x18	; 24
    3236:	4d 92       	st	X+, r4
    3238:	5d 92       	st	X+, r5
    323a:	6d 92       	st	X+, r6
    323c:	7c 92       	st	X, r7
    323e:	5b 97       	sbiw	r26, 0x1b	; 27
	
	if ( _model == MS5837_02BA ) {
		P = (((D1*SENS2)/2097152l-OFF2)/32768l);
	} else {
		P = (((D1*SENS2)/2097152l-OFF2)/8192l);
    3240:	50 96       	adiw	r26, 0x10	; 16
    3242:	8d 91       	ld	r24, X+
    3244:	9d 91       	ld	r25, X+
    3246:	0d 90       	ld	r0, X+
    3248:	bc 91       	ld	r27, X
    324a:	a0 2d       	mov	r26, r0
    324c:	3c 01       	movw	r6, r24
    324e:	4d 01       	movw	r8, r26
    3250:	a1 2c       	mov	r10, r1
    3252:	b1 2c       	mov	r11, r1
    3254:	65 01       	movw	r12, r10
    3256:	8d 83       	std	Y+5, r24	; 0x05
    3258:	7e 82       	std	Y+6, r7	; 0x06
    325a:	8f 82       	std	Y+7, r8	; 0x07
    325c:	98 86       	std	Y+8, r9	; 0x08
    325e:	a9 86       	std	Y+9, r10	; 0x09
    3260:	ba 86       	std	Y+10, r11	; 0x0a
    3262:	cb 86       	std	Y+11, r12	; 0x0b
    3264:	dc 86       	std	Y+12, r13	; 0x0c
    3266:	27 01       	movw	r4, r14
    3268:	38 01       	movw	r6, r16
    326a:	77 0c       	add	r7, r7
    326c:	44 08       	sbc	r4, r4
    326e:	54 2c       	mov	r5, r4
    3270:	32 01       	movw	r6, r4
    3272:	2d 89       	ldd	r18, Y+21	; 0x15
    3274:	3e 89       	ldd	r19, Y+22	; 0x16
    3276:	4f 89       	ldd	r20, Y+23	; 0x17
    3278:	58 8d       	ldd	r21, Y+24	; 0x18
    327a:	69 8d       	ldd	r22, Y+25	; 0x19
    327c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    327e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3280:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3282:	ae 2c       	mov	r10, r14
    3284:	bf 2c       	mov	r11, r15
    3286:	c0 2e       	mov	r12, r16
    3288:	d1 2e       	mov	r13, r17
    328a:	e4 2c       	mov	r14, r4
    328c:	f4 2c       	mov	r15, r4
    328e:	04 2d       	mov	r16, r4
    3290:	14 2d       	mov	r17, r4
    3292:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <__subdi3>
    3296:	a2 2e       	mov	r10, r18
    3298:	b3 2e       	mov	r11, r19
    329a:	c4 2e       	mov	r12, r20
    329c:	d5 2e       	mov	r13, r21
    329e:	e6 2e       	mov	r14, r22
    32a0:	f7 2e       	mov	r15, r23
    32a2:	08 2f       	mov	r16, r24
    32a4:	19 2f       	mov	r17, r25
    32a6:	2d 81       	ldd	r18, Y+5	; 0x05
    32a8:	3e 81       	ldd	r19, Y+6	; 0x06
    32aa:	48 2d       	mov	r20, r8
    32ac:	59 2d       	mov	r21, r9
    32ae:	60 e0       	ldi	r22, 0x00	; 0
    32b0:	70 e0       	ldi	r23, 0x00	; 0
    32b2:	80 e0       	ldi	r24, 0x00	; 0
    32b4:	90 e0       	ldi	r25, 0x00	; 0
    32b6:	0e 94 3f 27 	call	0x4e7e	; 0x4e7e <__muldi3>
    32ba:	12 2f       	mov	r17, r18
    32bc:	3d 8b       	std	Y+21, r19	; 0x15
    32be:	4d 83       	std	Y+5, r20	; 0x05
    32c0:	b5 2f       	mov	r27, r21
    32c2:	f6 2f       	mov	r31, r22
    32c4:	e7 2f       	mov	r30, r23
    32c6:	58 2e       	mov	r5, r24
    32c8:	69 2e       	mov	r6, r25
    32ca:	a0 e0       	ldi	r26, 0x00	; 0
    32cc:	0e 94 e5 27 	call	0x4fca	; 0x4fca <__cmpdi2_s8>
    32d0:	84 f4       	brge	.+32     	; 0x32f2 <_ZN6MS58379calculateEv+0xc34>
    32d2:	21 50       	subi	r18, 0x01	; 1
    32d4:	31 09       	sbc	r19, r1
    32d6:	40 4e       	sbci	r20, 0xE0	; 224
    32d8:	5f 4f       	sbci	r21, 0xFF	; 255
    32da:	6f 4f       	sbci	r22, 0xFF	; 255
    32dc:	7f 4f       	sbci	r23, 0xFF	; 255
    32de:	8f 4f       	sbci	r24, 0xFF	; 255
    32e0:	9f 4f       	sbci	r25, 0xFF	; 255
    32e2:	12 2f       	mov	r17, r18
    32e4:	3d 8b       	std	Y+21, r19	; 0x15
    32e6:	4d 83       	std	Y+5, r20	; 0x05
    32e8:	b5 2f       	mov	r27, r21
    32ea:	f6 2f       	mov	r31, r22
    32ec:	e7 2f       	mov	r30, r23
    32ee:	58 2e       	mov	r5, r24
    32f0:	69 2e       	mov	r6, r25
    32f2:	21 2f       	mov	r18, r17
    32f4:	3d 89       	ldd	r19, Y+21	; 0x15
    32f6:	4d 81       	ldd	r20, Y+5	; 0x05
    32f8:	5b 2f       	mov	r21, r27
    32fa:	6f 2f       	mov	r22, r31
    32fc:	7e 2f       	mov	r23, r30
    32fe:	85 2d       	mov	r24, r5
    3300:	96 2d       	mov	r25, r6
    3302:	05 e1       	ldi	r16, 0x15	; 21
    3304:	0e 94 a9 27 	call	0x4f52	; 0x4f52 <__ashrdi3>
    3308:	82 2e       	mov	r8, r18
    330a:	93 2e       	mov	r9, r19
    330c:	4d 8b       	std	Y+21, r20	; 0x15
    330e:	5d 83       	std	Y+5, r21	; 0x05
    3310:	b6 2f       	mov	r27, r22
    3312:	a7 2f       	mov	r26, r23
    3314:	f8 2f       	mov	r31, r24
    3316:	e9 2f       	mov	r30, r25
    3318:	49 80       	ldd	r4, Y+1	; 0x01
    331a:	5a 80       	ldd	r5, Y+2	; 0x02
    331c:	6b 80       	ldd	r6, Y+3	; 0x03
    331e:	7c 80       	ldd	r7, Y+4	; 0x04
    3320:	77 0c       	add	r7, r7
    3322:	44 08       	sbc	r4, r4
    3324:	54 2c       	mov	r5, r4
    3326:	32 01       	movw	r6, r4
    3328:	2d 85       	ldd	r18, Y+13	; 0x0d
    332a:	3e 85       	ldd	r19, Y+14	; 0x0e
    332c:	4f 85       	ldd	r20, Y+15	; 0x0f
    332e:	58 89       	ldd	r21, Y+16	; 0x10
    3330:	69 89       	ldd	r22, Y+17	; 0x11
    3332:	7a 89       	ldd	r23, Y+18	; 0x12
    3334:	8b 89       	ldd	r24, Y+19	; 0x13
    3336:	9c 89       	ldd	r25, Y+20	; 0x14
    3338:	a9 80       	ldd	r10, Y+1	; 0x01
    333a:	ba 80       	ldd	r11, Y+2	; 0x02
    333c:	cb 80       	ldd	r12, Y+3	; 0x03
    333e:	dc 80       	ldd	r13, Y+4	; 0x04
    3340:	e4 2c       	mov	r14, r4
    3342:	f4 2c       	mov	r15, r4
    3344:	04 2d       	mov	r16, r4
    3346:	14 2d       	mov	r17, r4
    3348:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <__subdi3>
    334c:	a2 2e       	mov	r10, r18
    334e:	b3 2e       	mov	r11, r19
    3350:	c4 2e       	mov	r12, r20
    3352:	d5 2e       	mov	r13, r21
    3354:	e6 2e       	mov	r14, r22
    3356:	f7 2e       	mov	r15, r23
    3358:	08 2f       	mov	r16, r24
    335a:	19 2f       	mov	r17, r25
    335c:	28 2d       	mov	r18, r8
    335e:	39 2d       	mov	r19, r9
    3360:	4d 89       	ldd	r20, Y+21	; 0x15
    3362:	5d 81       	ldd	r21, Y+5	; 0x05
    3364:	6b 2f       	mov	r22, r27
    3366:	7a 2f       	mov	r23, r26
    3368:	8f 2f       	mov	r24, r31
    336a:	9e 2f       	mov	r25, r30
    336c:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <__subdi3>
    3370:	92 2e       	mov	r9, r18
    3372:	a3 2e       	mov	r10, r19
    3374:	b4 2e       	mov	r11, r20
    3376:	c5 2e       	mov	r12, r21
    3378:	d6 2e       	mov	r13, r22
    337a:	e7 2e       	mov	r14, r23
    337c:	78 2e       	mov	r7, r24
    337e:	89 2e       	mov	r8, r25
    3380:	a0 e0       	ldi	r26, 0x00	; 0
    3382:	0e 94 e5 27 	call	0x4fca	; 0x4fca <__cmpdi2_s8>
    3386:	84 f4       	brge	.+32     	; 0x33a8 <_ZN6MS58379calculateEv+0xcea>
    3388:	21 50       	subi	r18, 0x01	; 1
    338a:	30 4e       	sbci	r19, 0xE0	; 224
    338c:	4f 4f       	sbci	r20, 0xFF	; 255
    338e:	5f 4f       	sbci	r21, 0xFF	; 255
    3390:	6f 4f       	sbci	r22, 0xFF	; 255
    3392:	7f 4f       	sbci	r23, 0xFF	; 255
    3394:	8f 4f       	sbci	r24, 0xFF	; 255
    3396:	9f 4f       	sbci	r25, 0xFF	; 255
    3398:	92 2e       	mov	r9, r18
    339a:	a3 2e       	mov	r10, r19
    339c:	b4 2e       	mov	r11, r20
    339e:	c5 2e       	mov	r12, r21
    33a0:	d6 2e       	mov	r13, r22
    33a2:	e7 2e       	mov	r14, r23
    33a4:	78 2e       	mov	r7, r24
    33a6:	89 2e       	mov	r8, r25
    33a8:	29 2d       	mov	r18, r9
    33aa:	3a 2d       	mov	r19, r10
    33ac:	4b 2d       	mov	r20, r11
    33ae:	5c 2d       	mov	r21, r12
    33b0:	6d 2d       	mov	r22, r13
    33b2:	7e 2d       	mov	r23, r14
    33b4:	87 2d       	mov	r24, r7
    33b6:	98 2d       	mov	r25, r8
    33b8:	0d e0       	ldi	r16, 0x0D	; 13
    33ba:	0e 94 a9 27 	call	0x4f52	; 0x4f52 <__ashrdi3>
    33be:	d1 01       	movw	r26, r2
    33c0:	5c 96       	adiw	r26, 0x1c	; 28
    33c2:	2c 93       	st	X, r18
    33c4:	5c 97       	sbiw	r26, 0x1c	; 28
    33c6:	5d 96       	adiw	r26, 0x1d	; 29
    33c8:	3c 93       	st	X, r19
    33ca:	5d 97       	sbiw	r26, 0x1d	; 29
    33cc:	5e 96       	adiw	r26, 0x1e	; 30
    33ce:	4c 93       	st	X, r20
    33d0:	5e 97       	sbiw	r26, 0x1e	; 30
    33d2:	5f 96       	adiw	r26, 0x1f	; 31
    33d4:	5c 93       	st	X, r21
	}
}
    33d6:	a5 96       	adiw	r28, 0x25	; 37
    33d8:	0f b6       	in	r0, 0x3f	; 63
    33da:	f8 94       	cli
    33dc:	de bf       	out	0x3e, r29	; 62
    33de:	0f be       	out	0x3f, r0	; 63
    33e0:	cd bf       	out	0x3d, r28	; 61
    33e2:	df 91       	pop	r29
    33e4:	cf 91       	pop	r28
    33e6:	1f 91       	pop	r17
    33e8:	0f 91       	pop	r16
    33ea:	ff 90       	pop	r15
    33ec:	ef 90       	pop	r14
    33ee:	df 90       	pop	r13
    33f0:	cf 90       	pop	r12
    33f2:	bf 90       	pop	r11
    33f4:	af 90       	pop	r10
    33f6:	9f 90       	pop	r9
    33f8:	8f 90       	pop	r8
    33fa:	7f 90       	pop	r7
    33fc:	6f 90       	pop	r6
    33fe:	5f 90       	pop	r5
    3400:	4f 90       	pop	r4
    3402:	3f 90       	pop	r3
    3404:	2f 90       	pop	r2
    3406:	08 95       	ret

00003408 <_ZN6MS58378pressureEf>:

float MS5837::pressure(float conversion) {
    3408:	cf 92       	push	r12
    340a:	df 92       	push	r13
    340c:	ef 92       	push	r14
    340e:	ff 92       	push	r15
    3410:	6a 01       	movw	r12, r20
    3412:	7b 01       	movw	r14, r22
	if ( _model == MS5837_02BA ) {
    3414:	fc 01       	movw	r30, r24
    3416:	20 a1       	ldd	r18, Z+32	; 0x20
    3418:	21 30       	cpi	r18, 0x01	; 1
    341a:	89 f4       	brne	.+34     	; 0x343e <_ZN6MS58378pressureEf+0x36>
		return P*conversion/100.0f;
    341c:	64 8d       	ldd	r22, Z+28	; 0x1c
    341e:	75 8d       	ldd	r23, Z+29	; 0x1d
    3420:	86 8d       	ldd	r24, Z+30	; 0x1e
    3422:	97 8d       	ldd	r25, Z+31	; 0x1f
    3424:	0e 94 e5 25 	call	0x4bca	; 0x4bca <__floatsisf>
    3428:	a7 01       	movw	r20, r14
    342a:	96 01       	movw	r18, r12
    342c:	0e 94 99 26 	call	0x4d32	; 0x4d32 <__mulsf3>
    3430:	20 e0       	ldi	r18, 0x00	; 0
    3432:	30 e0       	ldi	r19, 0x00	; 0
    3434:	48 ec       	ldi	r20, 0xC8	; 200
    3436:	52 e4       	ldi	r21, 0x42	; 66
    3438:	0e 94 4f 25 	call	0x4a9e	; 0x4a9e <__divsf3>
    343c:	11 c0       	rjmp	.+34     	; 0x3460 <_ZN6MS58378pressureEf+0x58>
	}
	else {
		return P*conversion/10.0f;
    343e:	fc 01       	movw	r30, r24
    3440:	64 8d       	ldd	r22, Z+28	; 0x1c
    3442:	75 8d       	ldd	r23, Z+29	; 0x1d
    3444:	86 8d       	ldd	r24, Z+30	; 0x1e
    3446:	97 8d       	ldd	r25, Z+31	; 0x1f
    3448:	0e 94 e5 25 	call	0x4bca	; 0x4bca <__floatsisf>
    344c:	a7 01       	movw	r20, r14
    344e:	96 01       	movw	r18, r12
    3450:	0e 94 99 26 	call	0x4d32	; 0x4d32 <__mulsf3>
    3454:	20 e0       	ldi	r18, 0x00	; 0
    3456:	30 e0       	ldi	r19, 0x00	; 0
    3458:	40 e2       	ldi	r20, 0x20	; 32
    345a:	51 e4       	ldi	r21, 0x41	; 65
    345c:	0e 94 4f 25 	call	0x4a9e	; 0x4a9e <__divsf3>
	}
}
    3460:	ff 90       	pop	r15
    3462:	ef 90       	pop	r14
    3464:	df 90       	pop	r13
    3466:	cf 90       	pop	r12
    3468:	08 95       	ret

0000346a <_ZN6MS583711temperatureEv>:

float MS5837::temperature() {
	return TEMP/100.0f;
    346a:	fc 01       	movw	r30, r24
    346c:	60 8d       	ldd	r22, Z+24	; 0x18
    346e:	71 8d       	ldd	r23, Z+25	; 0x19
    3470:	82 8d       	ldd	r24, Z+26	; 0x1a
    3472:	93 8d       	ldd	r25, Z+27	; 0x1b
    3474:	0e 94 e5 25 	call	0x4bca	; 0x4bca <__floatsisf>
    3478:	20 e0       	ldi	r18, 0x00	; 0
    347a:	30 e0       	ldi	r19, 0x00	; 0
    347c:	48 ec       	ldi	r20, 0xC8	; 200
    347e:	52 e4       	ldi	r21, 0x42	; 66
    3480:	0c 94 4f 25 	jmp	0x4a9e	; 0x4a9e <__divsf3>
}
    3484:	08 95       	ret

00003486 <_ZN6MS58374crc4EPj>:
float MS5837::altitude() {
	return (1-pow((pressure()/1013.25),.190284))*145366.45*.3048;
}*/


uint8_t MS5837::crc4(uint16_t n_prom[]) {
    3486:	cf 93       	push	r28
    3488:	df 93       	push	r29
    348a:	eb 01       	movw	r28, r22
	uint16_t n_rem = 0;

	n_prom[0] = ((n_prom[0]) & 0x0FFF);
    348c:	88 81       	ld	r24, Y
    348e:	99 81       	ldd	r25, Y+1	; 0x01
    3490:	9f 70       	andi	r25, 0x0F	; 15
    3492:	99 83       	std	Y+1, r25	; 0x01
    3494:	88 83       	st	Y, r24
	n_prom[7] = 0;
    3496:	1f 86       	std	Y+15, r1	; 0x0f
    3498:	1e 86       	std	Y+14, r1	; 0x0e
    349a:	40 e0       	ldi	r20, 0x00	; 0
    349c:	50 e0       	ldi	r21, 0x00	; 0
	return (1-pow((pressure()/1013.25),.190284))*145366.45*.3048;
}*/


uint8_t MS5837::crc4(uint16_t n_prom[]) {
	uint16_t n_rem = 0;
    349e:	80 e0       	ldi	r24, 0x00	; 0
    34a0:	90 e0       	ldi	r25, 0x00	; 0

	n_prom[0] = ((n_prom[0]) & 0x0FFF);
	n_prom[7] = 0;

	for ( uint8_t i = 0 ; i < 16; i++ ) {
		if ( i%2 == 1 ) {
    34a2:	40 ff       	sbrs	r20, 0
    34a4:	07 c0       	rjmp	.+14     	; 0x34b4 <_ZN6MS58374crc4EPj+0x2e>
			n_rem ^= (uint16_t)((n_prom[i>>1]) & 0x00FF);
    34a6:	fa 01       	movw	r30, r20
    34a8:	ee 7f       	andi	r30, 0xFE	; 254
    34aa:	ec 0f       	add	r30, r28
    34ac:	fd 1f       	adc	r31, r29
    34ae:	20 81       	ld	r18, Z
    34b0:	82 27       	eor	r24, r18
    34b2:	1d c0       	rjmp	.+58     	; 0x34ee <_ZN6MS58374crc4EPj+0x68>
			} else {
			n_rem ^= (uint16_t)(n_prom[i>>1] >> 8);
    34b4:	fa 01       	movw	r30, r20
    34b6:	ee 7f       	andi	r30, 0xFE	; 254
    34b8:	ec 0f       	add	r30, r28
    34ba:	fd 1f       	adc	r31, r29
    34bc:	a1 81       	ldd	r26, Z+1	; 0x01
    34be:	b0 e0       	ldi	r27, 0x00	; 0
    34c0:	8a 27       	eor	r24, r26
    34c2:	9b 27       	eor	r25, r27
    34c4:	14 c0       	rjmp	.+40     	; 0x34ee <_ZN6MS58374crc4EPj+0x68>
		}
		for ( uint8_t n_bit = 8 ; n_bit > 0 ; n_bit-- ) {
			if ( n_rem & 0x8000 ) {
    34c6:	99 23       	and	r25, r25
    34c8:	2c f4       	brge	.+10     	; 0x34d4 <_ZN6MS58374crc4EPj+0x4e>
				n_rem = (n_rem << 1) ^ 0x3000;
    34ca:	88 0f       	add	r24, r24
    34cc:	99 1f       	adc	r25, r25
    34ce:	30 e3       	ldi	r19, 0x30	; 48
    34d0:	93 27       	eor	r25, r19
    34d2:	02 c0       	rjmp	.+4      	; 0x34d8 <_ZN6MS58374crc4EPj+0x52>
				} else {
				n_rem = (n_rem << 1);
    34d4:	88 0f       	add	r24, r24
    34d6:	99 1f       	adc	r25, r25
    34d8:	21 50       	subi	r18, 0x01	; 1
		if ( i%2 == 1 ) {
			n_rem ^= (uint16_t)((n_prom[i>>1]) & 0x00FF);
			} else {
			n_rem ^= (uint16_t)(n_prom[i>>1] >> 8);
		}
		for ( uint8_t n_bit = 8 ; n_bit > 0 ; n_bit-- ) {
    34da:	a9 f7       	brne	.-22     	; 0x34c6 <_ZN6MS58374crc4EPj+0x40>
    34dc:	4f 5f       	subi	r20, 0xFF	; 255
    34de:	5f 4f       	sbci	r21, 0xFF	; 255
	uint16_t n_rem = 0;

	n_prom[0] = ((n_prom[0]) & 0x0FFF);
	n_prom[7] = 0;

	for ( uint8_t i = 0 ; i < 16; i++ ) {
    34e0:	40 31       	cpi	r20, 0x10	; 16
    34e2:	51 05       	cpc	r21, r1
    34e4:	f1 f6       	brne	.-68     	; 0x34a2 <_ZN6MS58374crc4EPj+0x1c>
		}
	}
	
	n_rem = ((n_rem >> 12) & 0x000F);

	return n_rem ^ 0x00;
    34e6:	89 2f       	mov	r24, r25
    34e8:	82 95       	swap	r24
    34ea:	8f 70       	andi	r24, 0x0F	; 15
    34ec:	02 c0       	rjmp	.+4      	; 0x34f2 <_ZN6MS58374crc4EPj+0x6c>
	return (1-pow((pressure()/1013.25),.190284))*145366.45*.3048;
}*/


uint8_t MS5837::crc4(uint16_t n_prom[]) {
	uint16_t n_rem = 0;
    34ee:	28 e0       	ldi	r18, 0x08	; 8
    34f0:	ea cf       	rjmp	.-44     	; 0x34c6 <_ZN6MS58374crc4EPj+0x40>
	}
	
	n_rem = ((n_rem >> 12) & 0x000F);

	return n_rem ^ 0x00;
    34f2:	df 91       	pop	r29
    34f4:	cf 91       	pop	r28
    34f6:	08 95       	ret

000034f8 <_ZN6MS58375beginEv>:

MS5837::MS5837(HardwareTimer &timer) : _timer(&timer) {
	fluidDensity = 1029;
}

bool MS5837::begin() {
    34f8:	cf 92       	push	r12
    34fa:	df 92       	push	r13
    34fc:	ef 92       	push	r14
    34fe:	ff 92       	push	r15
    3500:	0f 93       	push	r16
    3502:	1f 93       	push	r17
    3504:	cf 93       	push	r28
    3506:	df 93       	push	r29
    3508:	6c 01       	movw	r12, r24
	Wire.begin();
    350a:	89 e2       	ldi	r24, 0x29	; 41
    350c:	98 e0       	ldi	r25, 0x08	; 8
    350e:	0e 94 80 12 	call	0x2500	; 0x2500 <_ZN7TwoWire5beginEv>
	_timer->beginMs(10);
    3512:	40 e0       	ldi	r20, 0x00	; 0
    3514:	50 e0       	ldi	r21, 0x00	; 0
    3516:	60 e2       	ldi	r22, 0x20	; 32
    3518:	71 e4       	ldi	r23, 0x41	; 65
    351a:	f6 01       	movw	r30, r12
    351c:	82 a1       	ldd	r24, Z+34	; 0x22
    351e:	93 a1       	ldd	r25, Z+35	; 0x23
    3520:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <_ZN13HardwareTimer7beginMsEf>
	
	// Reset the MS5837, per datasheet
	Wire.beginTransmission(MS5837_ADDR);
    3524:	66 e7       	ldi	r22, 0x76	; 118
    3526:	70 e0       	ldi	r23, 0x00	; 0
    3528:	89 e2       	ldi	r24, 0x29	; 41
    352a:	98 e0       	ldi	r25, 0x08	; 8
    352c:	03 d8       	rcall	.-4090   	; 0x2534 <_ZN7TwoWire17beginTransmissionEi>
    352e:	e0 91 29 08 	lds	r30, 0x0829	; 0x800829 <Wire>
    3532:	f0 91 2a 08 	lds	r31, 0x082A	; 0x80082a <Wire+0x1>
    3536:	01 90       	ld	r0, Z+
    3538:	f0 81       	ld	r31, Z
    353a:	e0 2d       	mov	r30, r0
    353c:	6e e1       	ldi	r22, 0x1E	; 30
    353e:	89 e2       	ldi	r24, 0x29	; 41
    3540:	98 e0       	ldi	r25, 0x08	; 8
    3542:	19 95       	eicall
	Wire.write(MS5837_RESET);
	Wire.endTransmission();
    3544:	89 e2       	ldi	r24, 0x29	; 41
    3546:	98 e0       	ldi	r25, 0x08	; 8
    3548:	74 d8       	rcall	.-3864   	; 0x2632 <_ZN7TwoWire15endTransmissionEv>

	// Wait for reset to complete
	//_delay_ms(10);
	_timer->start(1);
    354a:	61 e0       	ldi	r22, 0x01	; 1
    354c:	f6 01       	movw	r30, r12
    354e:	82 a1       	ldd	r24, Z+34	; 0x22
    3550:	93 a1       	ldd	r25, Z+35	; 0x23
    3552:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <_ZN13HardwareTimer5startEh>
	_timer->waitForFinish();
    3556:	f6 01       	movw	r30, r12
    3558:	82 a1       	ldd	r24, Z+34	; 0x22
    355a:	93 a1       	ldd	r25, Z+35	; 0x23
    355c:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <_ZN13HardwareTimer13waitForFinishEv>
    3560:	76 01       	movw	r14, r12
    3562:	c0 ea       	ldi	r28, 0xA0	; 160

	// Read calibration values and CRC
	for ( uint8_t i = 0 ; i < 7 ; i++ ) {
		Wire.beginTransmission(MS5837_ADDR);
    3564:	66 e7       	ldi	r22, 0x76	; 118
    3566:	70 e0       	ldi	r23, 0x00	; 0
    3568:	89 e2       	ldi	r24, 0x29	; 41
    356a:	98 e0       	ldi	r25, 0x08	; 8
    356c:	0e 94 9a 12 	call	0x2534	; 0x2534 <_ZN7TwoWire17beginTransmissionEi>
    3570:	e0 91 29 08 	lds	r30, 0x0829	; 0x800829 <Wire>
    3574:	f0 91 2a 08 	lds	r31, 0x082A	; 0x80082a <Wire+0x1>
    3578:	01 90       	ld	r0, Z+
    357a:	f0 81       	ld	r31, Z
    357c:	e0 2d       	mov	r30, r0
    357e:	6c 2f       	mov	r22, r28
    3580:	89 e2       	ldi	r24, 0x29	; 41
    3582:	98 e0       	ldi	r25, 0x08	; 8
    3584:	19 95       	eicall
		Wire.write(MS5837_PROM_READ+i*2);
		Wire.endTransmission();
    3586:	89 e2       	ldi	r24, 0x29	; 41
    3588:	98 e0       	ldi	r25, 0x08	; 8
    358a:	53 d8       	rcall	.-3930   	; 0x2632 <_ZN7TwoWire15endTransmissionEv>

		Wire.requestFrom(MS5837_ADDR,2);
    358c:	42 e0       	ldi	r20, 0x02	; 2
    358e:	50 e0       	ldi	r21, 0x00	; 0
    3590:	66 e7       	ldi	r22, 0x76	; 118
    3592:	70 e0       	ldi	r23, 0x00	; 0
    3594:	89 e2       	ldi	r24, 0x29	; 41
    3596:	98 e0       	ldi	r25, 0x08	; 8
    3598:	49 d8       	rcall	.-3950   	; 0x262c <_ZN7TwoWire11requestFromEii>
		C[i] = (Wire.read() << 8) | Wire.read();
    359a:	89 e2       	ldi	r24, 0x29	; 41
    359c:	98 e0       	ldi	r25, 0x08	; 8
    359e:	0e 94 cb 11 	call	0x2396	; 0x2396 <_ZN7TwoWire4readEv>
    35a2:	d8 2f       	mov	r29, r24
    35a4:	89 e2       	ldi	r24, 0x29	; 41
    35a6:	98 e0       	ldi	r25, 0x08	; 8
    35a8:	0e 94 cb 11 	call	0x2396	; 0x2396 <_ZN7TwoWire4readEv>
    35ac:	1d 2f       	mov	r17, r29
    35ae:	00 e0       	ldi	r16, 0x00	; 0
    35b0:	80 2b       	or	r24, r16
    35b2:	91 2b       	or	r25, r17
    35b4:	f7 01       	movw	r30, r14
    35b6:	81 93       	st	Z+, r24
    35b8:	91 93       	st	Z+, r25
    35ba:	7f 01       	movw	r14, r30
    35bc:	ce 5f       	subi	r28, 0xFE	; 254
	//_delay_ms(10);
	_timer->start(1);
	_timer->waitForFinish();

	// Read calibration values and CRC
	for ( uint8_t i = 0 ; i < 7 ; i++ ) {
    35be:	ce 3a       	cpi	r28, 0xAE	; 174
    35c0:	89 f6       	brne	.-94     	; 0x3564 <_ZN6MS58375beginEv+0x6c>
		Wire.requestFrom(MS5837_ADDR,2);
		C[i] = (Wire.read() << 8) | Wire.read();
	}

	// Verify that data is correct with CRC
	uint8_t crcRead = C[0] >> 12;
    35c2:	f6 01       	movw	r30, r12
    35c4:	c1 81       	ldd	r28, Z+1	; 0x01
    35c6:	c2 95       	swap	r28
    35c8:	cf 70       	andi	r28, 0x0F	; 15
	uint8_t crcCalculated = crc4(C);
    35ca:	b6 01       	movw	r22, r12
    35cc:	c6 01       	movw	r24, r12
    35ce:	5b df       	rcall	.-330    	; 0x3486 <_ZN6MS58374crc4EPj>
    35d0:	91 e0       	ldi	r25, 0x01	; 1
    35d2:	c8 13       	cpse	r28, r24
    35d4:	90 e0       	ldi	r25, 0x00	; 0
	if ( crcCalculated == crcRead ) {
		return true; // Initialization success
	}

	return false; // CRC fail
}
    35d6:	89 2f       	mov	r24, r25
    35d8:	df 91       	pop	r29
    35da:	cf 91       	pop	r28
    35dc:	1f 91       	pop	r17
    35de:	0f 91       	pop	r16
    35e0:	ff 90       	pop	r15
    35e2:	ef 90       	pop	r14
    35e4:	df 90       	pop	r13
    35e6:	cf 90       	pop	r12
    35e8:	08 95       	ret

000035ea <_ZN6MS58376updateEv>:
	}else{
		return false;
	}
}

void MS5837::update(){
    35ea:	8f 92       	push	r8
    35ec:	9f 92       	push	r9
    35ee:	af 92       	push	r10
    35f0:	bf 92       	push	r11
    35f2:	cf 92       	push	r12
    35f4:	df 92       	push	r13
    35f6:	ef 92       	push	r14
    35f8:	ff 92       	push	r15
    35fa:	0f 93       	push	r16
    35fc:	1f 93       	push	r17
    35fe:	cf 93       	push	r28
    3600:	df 93       	push	r29
	if(_state != STATE_FINISHED){
    3602:	dc 01       	movw	r26, r24
    3604:	91 96       	adiw	r26, 0x21	; 33
    3606:	2c 91       	ld	r18, X
    3608:	22 23       	and	r18, r18
    360a:	09 f4       	brne	.+2      	; 0x360e <_ZN6MS58376updateEv+0x24>
    360c:	d1 c0       	rjmp	.+418    	; 0x37b0 <_ZN6MS58376updateEv+0x1c6>
    360e:	ec 01       	movw	r28, r24
		if(_timer->finished()){
    3610:	8a a1       	ldd	r24, Y+34	; 0x22
    3612:	9b a1       	ldd	r25, Y+35	; 0x23
    3614:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <_ZN13HardwareTimer8finishedEv>
    3618:	88 23       	and	r24, r24
    361a:	09 f4       	brne	.+2      	; 0x361e <_ZN6MS58376updateEv+0x34>
    361c:	c9 c0       	rjmp	.+402    	; 0x37b0 <_ZN6MS58376updateEv+0x1c6>
			if(_state == STATE_READ_D1){
    361e:	89 a1       	ldd	r24, Y+33	; 0x21
    3620:	81 30       	cpi	r24, 0x01	; 1
    3622:	09 f0       	breq	.+2      	; 0x3626 <_ZN6MS58376updateEv+0x3c>
    3624:	69 c0       	rjmp	.+210    	; 0x36f8 <_ZN6MS58376updateEv+0x10e>
				//Read D1 conversion and Request D2 conversion
				Wire.beginTransmission(MS5837_ADDR);
    3626:	66 e7       	ldi	r22, 0x76	; 118
    3628:	70 e0       	ldi	r23, 0x00	; 0
    362a:	89 e2       	ldi	r24, 0x29	; 41
    362c:	98 e0       	ldi	r25, 0x08	; 8
    362e:	0e 94 9a 12 	call	0x2534	; 0x2534 <_ZN7TwoWire17beginTransmissionEi>
    3632:	09 e2       	ldi	r16, 0x29	; 41
    3634:	18 e0       	ldi	r17, 0x08	; 8
    3636:	d8 01       	movw	r26, r16
    3638:	ed 91       	ld	r30, X+
    363a:	fc 91       	ld	r31, X
    363c:	01 90       	ld	r0, Z+
    363e:	f0 81       	ld	r31, Z
    3640:	e0 2d       	mov	r30, r0
    3642:	60 e0       	ldi	r22, 0x00	; 0
    3644:	c8 01       	movw	r24, r16
    3646:	19 95       	eicall
				Wire.write(MS5837_ADC_READ);
				Wire.endTransmission();
    3648:	c8 01       	movw	r24, r16
    364a:	0e 94 19 13 	call	0x2632	; 0x2632 <_ZN7TwoWire15endTransmissionEv>

				Wire.requestFrom(MS5837_ADDR,3);
    364e:	43 e0       	ldi	r20, 0x03	; 3
    3650:	50 e0       	ldi	r21, 0x00	; 0
    3652:	66 e7       	ldi	r22, 0x76	; 118
    3654:	70 e0       	ldi	r23, 0x00	; 0
    3656:	c8 01       	movw	r24, r16
    3658:	0e 94 16 13 	call	0x262c	; 0x262c <_ZN7TwoWire11requestFromEii>
				D1 = 0;
    365c:	18 8a       	std	Y+16, r1	; 0x10
    365e:	19 8a       	std	Y+17, r1	; 0x11
    3660:	1a 8a       	std	Y+18, r1	; 0x12
    3662:	1b 8a       	std	Y+19, r1	; 0x13
				D1 = Wire.read();
    3664:	c8 01       	movw	r24, r16
    3666:	0e 94 cb 11 	call	0x2396	; 0x2396 <_ZN7TwoWire4readEv>
    366a:	4c 01       	movw	r8, r24
    366c:	99 0f       	add	r25, r25
    366e:	aa 08       	sbc	r10, r10
    3670:	bb 08       	sbc	r11, r11
    3672:	88 8a       	std	Y+16, r8	; 0x10
    3674:	99 8a       	std	Y+17, r9	; 0x11
    3676:	aa 8a       	std	Y+18, r10	; 0x12
    3678:	bb 8a       	std	Y+19, r11	; 0x13
				D1 = (D1 << 8) | Wire.read();
    367a:	c8 01       	movw	r24, r16
    367c:	0e 94 cb 11 	call	0x2396	; 0x2396 <_ZN7TwoWire4readEv>
    3680:	ba 2c       	mov	r11, r10
    3682:	a9 2c       	mov	r10, r9
    3684:	98 2c       	mov	r9, r8
    3686:	88 24       	eor	r8, r8
    3688:	6c 01       	movw	r12, r24
    368a:	99 0f       	add	r25, r25
    368c:	ee 08       	sbc	r14, r14
    368e:	ff 08       	sbc	r15, r15
    3690:	c8 28       	or	r12, r8
    3692:	d9 28       	or	r13, r9
    3694:	ea 28       	or	r14, r10
    3696:	fb 28       	or	r15, r11
    3698:	c8 8a       	std	Y+16, r12	; 0x10
    369a:	d9 8a       	std	Y+17, r13	; 0x11
    369c:	ea 8a       	std	Y+18, r14	; 0x12
    369e:	fb 8a       	std	Y+19, r15	; 0x13
				D1 = (D1 << 8) | Wire.read();
    36a0:	c8 01       	movw	r24, r16
    36a2:	0e 94 cb 11 	call	0x2396	; 0x2396 <_ZN7TwoWire4readEv>
    36a6:	fe 2c       	mov	r15, r14
    36a8:	ed 2c       	mov	r14, r13
    36aa:	dc 2c       	mov	r13, r12
    36ac:	cc 24       	eor	r12, r12
    36ae:	09 2e       	mov	r0, r25
    36b0:	00 0c       	add	r0, r0
    36b2:	aa 0b       	sbc	r26, r26
    36b4:	bb 0b       	sbc	r27, r27
    36b6:	c8 2a       	or	r12, r24
    36b8:	d9 2a       	or	r13, r25
    36ba:	ea 2a       	or	r14, r26
    36bc:	fb 2a       	or	r15, r27
    36be:	c8 8a       	std	Y+16, r12	; 0x10
    36c0:	d9 8a       	std	Y+17, r13	; 0x11
    36c2:	ea 8a       	std	Y+18, r14	; 0x12
    36c4:	fb 8a       	std	Y+19, r15	; 0x13
		
				// Request D2 conversion
				Wire.beginTransmission(MS5837_ADDR);
    36c6:	66 e7       	ldi	r22, 0x76	; 118
    36c8:	70 e0       	ldi	r23, 0x00	; 0
    36ca:	c8 01       	movw	r24, r16
    36cc:	0e 94 9a 12 	call	0x2534	; 0x2534 <_ZN7TwoWire17beginTransmissionEi>
    36d0:	d8 01       	movw	r26, r16
    36d2:	ed 91       	ld	r30, X+
    36d4:	fc 91       	ld	r31, X
    36d6:	01 90       	ld	r0, Z+
    36d8:	f0 81       	ld	r31, Z
    36da:	e0 2d       	mov	r30, r0
    36dc:	6a e5       	ldi	r22, 0x5A	; 90
    36de:	c8 01       	movw	r24, r16
    36e0:	19 95       	eicall
				Wire.write(MS5837_CONVERT_D2_8192);
				Wire.endTransmission();
    36e2:	c8 01       	movw	r24, r16
    36e4:	0e 94 19 13 	call	0x2632	; 0x2632 <_ZN7TwoWire15endTransmissionEv>

				Timer0.start(2);
    36e8:	62 e0       	ldi	r22, 0x02	; 2
    36ea:	8f ea       	ldi	r24, 0xAF	; 175
    36ec:	97 e0       	ldi	r25, 0x07	; 7
    36ee:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <_ZN13HardwareTimer5startEh>
				_state = STATE_READ_D2;
    36f2:	82 e0       	ldi	r24, 0x02	; 2
    36f4:	89 a3       	std	Y+33, r24	; 0x21
    36f6:	5c c0       	rjmp	.+184    	; 0x37b0 <_ZN6MS58376updateEv+0x1c6>
			}else if(_state == STATE_READ_D2){
    36f8:	82 30       	cpi	r24, 0x02	; 2
    36fa:	09 f0       	breq	.+2      	; 0x36fe <_ZN6MS58376updateEv+0x114>
    36fc:	59 c0       	rjmp	.+178    	; 0x37b0 <_ZN6MS58376updateEv+0x1c6>
				// Read D2 conversion and calculate readings
				Wire.beginTransmission(MS5837_ADDR);
    36fe:	66 e7       	ldi	r22, 0x76	; 118
    3700:	70 e0       	ldi	r23, 0x00	; 0
    3702:	89 e2       	ldi	r24, 0x29	; 41
    3704:	98 e0       	ldi	r25, 0x08	; 8
    3706:	0e 94 9a 12 	call	0x2534	; 0x2534 <_ZN7TwoWire17beginTransmissionEi>
    370a:	e0 91 29 08 	lds	r30, 0x0829	; 0x800829 <Wire>
    370e:	f0 91 2a 08 	lds	r31, 0x082A	; 0x80082a <Wire+0x1>
    3712:	01 90       	ld	r0, Z+
    3714:	f0 81       	ld	r31, Z
    3716:	e0 2d       	mov	r30, r0
    3718:	60 e0       	ldi	r22, 0x00	; 0
    371a:	89 e2       	ldi	r24, 0x29	; 41
    371c:	98 e0       	ldi	r25, 0x08	; 8
    371e:	19 95       	eicall
				Wire.write(MS5837_ADC_READ);
				Wire.endTransmission();
    3720:	89 e2       	ldi	r24, 0x29	; 41
    3722:	98 e0       	ldi	r25, 0x08	; 8
    3724:	0e 94 19 13 	call	0x2632	; 0x2632 <_ZN7TwoWire15endTransmissionEv>

				Wire.requestFrom(MS5837_ADDR,3);
    3728:	43 e0       	ldi	r20, 0x03	; 3
    372a:	50 e0       	ldi	r21, 0x00	; 0
    372c:	66 e7       	ldi	r22, 0x76	; 118
    372e:	70 e0       	ldi	r23, 0x00	; 0
    3730:	89 e2       	ldi	r24, 0x29	; 41
    3732:	98 e0       	ldi	r25, 0x08	; 8
    3734:	0e 94 16 13 	call	0x262c	; 0x262c <_ZN7TwoWire11requestFromEii>
				D2 = 0;
    3738:	1c 8a       	std	Y+20, r1	; 0x14
    373a:	1d 8a       	std	Y+21, r1	; 0x15
    373c:	1e 8a       	std	Y+22, r1	; 0x16
    373e:	1f 8a       	std	Y+23, r1	; 0x17
				D2 = Wire.read();
    3740:	89 e2       	ldi	r24, 0x29	; 41
    3742:	98 e0       	ldi	r25, 0x08	; 8
    3744:	0e 94 cb 11 	call	0x2396	; 0x2396 <_ZN7TwoWire4readEv>
    3748:	4c 01       	movw	r8, r24
    374a:	99 0f       	add	r25, r25
    374c:	aa 08       	sbc	r10, r10
    374e:	bb 08       	sbc	r11, r11
    3750:	8c 8a       	std	Y+20, r8	; 0x14
    3752:	9d 8a       	std	Y+21, r9	; 0x15
    3754:	ae 8a       	std	Y+22, r10	; 0x16
    3756:	bf 8a       	std	Y+23, r11	; 0x17
				D2 = (D2 << 8) | Wire.read();
    3758:	89 e2       	ldi	r24, 0x29	; 41
    375a:	98 e0       	ldi	r25, 0x08	; 8
    375c:	0e 94 cb 11 	call	0x2396	; 0x2396 <_ZN7TwoWire4readEv>
    3760:	ba 2c       	mov	r11, r10
    3762:	a9 2c       	mov	r10, r9
    3764:	98 2c       	mov	r9, r8
    3766:	88 24       	eor	r8, r8
    3768:	6c 01       	movw	r12, r24
    376a:	99 0f       	add	r25, r25
    376c:	ee 08       	sbc	r14, r14
    376e:	ff 08       	sbc	r15, r15
    3770:	c8 28       	or	r12, r8
    3772:	d9 28       	or	r13, r9
    3774:	ea 28       	or	r14, r10
    3776:	fb 28       	or	r15, r11
    3778:	cc 8a       	std	Y+20, r12	; 0x14
    377a:	dd 8a       	std	Y+21, r13	; 0x15
    377c:	ee 8a       	std	Y+22, r14	; 0x16
    377e:	ff 8a       	std	Y+23, r15	; 0x17
				D2 = (D2 << 8) | Wire.read();
    3780:	89 e2       	ldi	r24, 0x29	; 41
    3782:	98 e0       	ldi	r25, 0x08	; 8
    3784:	0e 94 cb 11 	call	0x2396	; 0x2396 <_ZN7TwoWire4readEv>
    3788:	fe 2c       	mov	r15, r14
    378a:	ed 2c       	mov	r14, r13
    378c:	dc 2c       	mov	r13, r12
    378e:	cc 24       	eor	r12, r12
    3790:	09 2e       	mov	r0, r25
    3792:	00 0c       	add	r0, r0
    3794:	aa 0b       	sbc	r26, r26
    3796:	bb 0b       	sbc	r27, r27
    3798:	c8 2a       	or	r12, r24
    379a:	d9 2a       	or	r13, r25
    379c:	ea 2a       	or	r14, r26
    379e:	fb 2a       	or	r15, r27
    37a0:	cc 8a       	std	Y+20, r12	; 0x14
    37a2:	dd 8a       	std	Y+21, r13	; 0x15
    37a4:	ee 8a       	std	Y+22, r14	; 0x16
    37a6:	ff 8a       	std	Y+23, r15	; 0x17

				calculate();
    37a8:	ce 01       	movw	r24, r28
    37aa:	0e 94 5f 13 	call	0x26be	; 0x26be <_ZN6MS58379calculateEv>
				_state = STATE_FINISHED;
    37ae:	19 a2       	std	Y+33, r1	; 0x21
			}
		}
	}
}
    37b0:	df 91       	pop	r29
    37b2:	cf 91       	pop	r28
    37b4:	1f 91       	pop	r17
    37b6:	0f 91       	pop	r16
    37b8:	ff 90       	pop	r15
    37ba:	ef 90       	pop	r14
    37bc:	df 90       	pop	r13
    37be:	cf 90       	pop	r12
    37c0:	bf 90       	pop	r11
    37c2:	af 90       	pop	r10
    37c4:	9f 90       	pop	r9
    37c6:	8f 90       	pop	r8
    37c8:	08 95       	ret

000037ca <_ZN7PCA9685C1Eh>:
//Wakes board from sleep
void PCA9685::wakeup() {
  uint8_t sleep = read8(PCA9685_MODE1);
  uint8_t wakeup = sleep & ~MODE1_SLEEP; // set sleep bit low
  write8(PCA9685_MODE1, wakeup);
}
    37ca:	fc 01       	movw	r30, r24
    37cc:	60 83       	st	Z, r22
    37ce:	08 95       	ret

000037d0 <_ZN7PCA96856setPWMEhjj>:
    37d0:	ef 92       	push	r14
    37d2:	ff 92       	push	r15
    37d4:	0f 93       	push	r16
    37d6:	1f 93       	push	r17
    37d8:	cf 93       	push	r28
    37da:	df 93       	push	r29
    37dc:	c6 2f       	mov	r28, r22
    37de:	e4 2e       	mov	r14, r20
    37e0:	f5 2e       	mov	r15, r21
    37e2:	02 2f       	mov	r16, r18
    37e4:	13 2f       	mov	r17, r19
    37e6:	fc 01       	movw	r30, r24
    37e8:	60 81       	ld	r22, Z
    37ea:	89 e2       	ldi	r24, 0x29	; 41
    37ec:	98 e0       	ldi	r25, 0x08	; 8
    37ee:	0e 94 90 12 	call	0x2520	; 0x2520 <_ZN7TwoWire17beginTransmissionEh>
    37f2:	6c 2f       	mov	r22, r28
    37f4:	70 e0       	ldi	r23, 0x00	; 0
    37f6:	66 0f       	add	r22, r22
    37f8:	77 1f       	adc	r23, r23
    37fa:	66 0f       	add	r22, r22
    37fc:	77 1f       	adc	r23, r23
    37fe:	6a 5f       	subi	r22, 0xFA	; 250
    3800:	7f 4f       	sbci	r23, 0xFF	; 255
    3802:	c9 e2       	ldi	r28, 0x29	; 41
    3804:	d8 e0       	ldi	r29, 0x08	; 8
    3806:	e8 81       	ld	r30, Y
    3808:	f9 81       	ldd	r31, Y+1	; 0x01
    380a:	01 90       	ld	r0, Z+
    380c:	f0 81       	ld	r31, Z
    380e:	e0 2d       	mov	r30, r0
    3810:	ce 01       	movw	r24, r28
    3812:	19 95       	eicall
    3814:	e8 81       	ld	r30, Y
    3816:	f9 81       	ldd	r31, Y+1	; 0x01
    3818:	01 90       	ld	r0, Z+
    381a:	f0 81       	ld	r31, Z
    381c:	e0 2d       	mov	r30, r0
    381e:	6e 2d       	mov	r22, r14
    3820:	ce 01       	movw	r24, r28
    3822:	19 95       	eicall
    3824:	e8 81       	ld	r30, Y
    3826:	f9 81       	ldd	r31, Y+1	; 0x01
    3828:	01 90       	ld	r0, Z+
    382a:	f0 81       	ld	r31, Z
    382c:	e0 2d       	mov	r30, r0
    382e:	6f 2d       	mov	r22, r15
    3830:	ce 01       	movw	r24, r28
    3832:	19 95       	eicall
    3834:	e8 81       	ld	r30, Y
    3836:	f9 81       	ldd	r31, Y+1	; 0x01
    3838:	01 90       	ld	r0, Z+
    383a:	f0 81       	ld	r31, Z
    383c:	e0 2d       	mov	r30, r0
    383e:	60 2f       	mov	r22, r16
    3840:	ce 01       	movw	r24, r28
    3842:	19 95       	eicall
    3844:	e8 81       	ld	r30, Y
    3846:	f9 81       	ldd	r31, Y+1	; 0x01
    3848:	01 90       	ld	r0, Z+
    384a:	f0 81       	ld	r31, Z
    384c:	e0 2d       	mov	r30, r0
    384e:	61 2f       	mov	r22, r17
    3850:	ce 01       	movw	r24, r28
    3852:	19 95       	eicall
    3854:	ce 01       	movw	r24, r28
    3856:	0e 94 19 13 	call	0x2632	; 0x2632 <_ZN7TwoWire15endTransmissionEv>
    385a:	df 91       	pop	r29
    385c:	cf 91       	pop	r28
    385e:	1f 91       	pop	r17
    3860:	0f 91       	pop	r16
    3862:	ff 90       	pop	r15
    3864:	ef 90       	pop	r14
    3866:	08 95       	ret

00003868 <_ZN7PCA968517writeMicrosecondsEhj>:
    3868:	8f 92       	push	r8
    386a:	9f 92       	push	r9
    386c:	af 92       	push	r10
    386e:	bf 92       	push	r11
    3870:	cf 92       	push	r12
    3872:	df 92       	push	r13
    3874:	ef 92       	push	r14
    3876:	ff 92       	push	r15
    3878:	1f 93       	push	r17
    387a:	cf 93       	push	r28
    387c:	df 93       	push	r29
    387e:	ec 01       	movw	r28, r24
    3880:	16 2f       	mov	r17, r22
    3882:	ba 01       	movw	r22, r20
    3884:	80 e0       	ldi	r24, 0x00	; 0
    3886:	90 e0       	ldi	r25, 0x00	; 0
    3888:	0e 94 e3 25 	call	0x4bc6	; 0x4bc6 <__floatunsisf>
    388c:	6b 01       	movw	r12, r22
    388e:	7c 01       	movw	r14, r24
    3890:	6d 81       	ldd	r22, Y+5	; 0x05
    3892:	70 e0       	ldi	r23, 0x00	; 0
    3894:	6f 5f       	subi	r22, 0xFF	; 255
    3896:	7f 4f       	sbci	r23, 0xFF	; 255
    3898:	07 2e       	mov	r0, r23
    389a:	00 0c       	add	r0, r0
    389c:	88 0b       	sbc	r24, r24
    389e:	99 0b       	sbc	r25, r25
    38a0:	0e 94 e5 25 	call	0x4bca	; 0x4bca <__floatsisf>
    38a4:	20 e0       	ldi	r18, 0x00	; 0
    38a6:	34 e2       	ldi	r19, 0x24	; 36
    38a8:	44 e7       	ldi	r20, 0x74	; 116
    38aa:	59 e4       	ldi	r21, 0x49	; 73
    38ac:	0e 94 99 26 	call	0x4d32	; 0x4d32 <__mulsf3>
    38b0:	4b 01       	movw	r8, r22
    38b2:	5c 01       	movw	r10, r24
    38b4:	69 81       	ldd	r22, Y+1	; 0x01
    38b6:	7a 81       	ldd	r23, Y+2	; 0x02
    38b8:	8b 81       	ldd	r24, Y+3	; 0x03
    38ba:	9c 81       	ldd	r25, Y+4	; 0x04
    38bc:	0e 94 e3 25 	call	0x4bc6	; 0x4bc6 <__floatunsisf>
    38c0:	9b 01       	movw	r18, r22
    38c2:	ac 01       	movw	r20, r24
    38c4:	c5 01       	movw	r24, r10
    38c6:	b4 01       	movw	r22, r8
    38c8:	0e 94 4f 25 	call	0x4a9e	; 0x4a9e <__divsf3>
    38cc:	9b 01       	movw	r18, r22
    38ce:	ac 01       	movw	r20, r24
    38d0:	c7 01       	movw	r24, r14
    38d2:	b6 01       	movw	r22, r12
    38d4:	0e 94 4f 25 	call	0x4a9e	; 0x4a9e <__divsf3>
    38d8:	0e 94 b7 25 	call	0x4b6e	; 0x4b6e <__fixunssfsi>
    38dc:	9b 01       	movw	r18, r22
    38de:	40 e0       	ldi	r20, 0x00	; 0
    38e0:	50 e0       	ldi	r21, 0x00	; 0
    38e2:	61 2f       	mov	r22, r17
    38e4:	ce 01       	movw	r24, r28
    38e6:	74 df       	rcall	.-280    	; 0x37d0 <_ZN7PCA96856setPWMEhjj>
    38e8:	df 91       	pop	r29
    38ea:	cf 91       	pop	r28
    38ec:	1f 91       	pop	r17
    38ee:	ff 90       	pop	r15
    38f0:	ef 90       	pop	r14
    38f2:	df 90       	pop	r13
    38f4:	cf 90       	pop	r12
    38f6:	bf 90       	pop	r11
    38f8:	af 90       	pop	r10
    38fa:	9f 90       	pop	r9
    38fc:	8f 90       	pop	r8
    38fe:	08 95       	ret

00003900 <_ZN7PCA968522getOscillatorFrequencyEv>:
    3900:	fc 01       	movw	r30, r24
    3902:	61 81       	ldd	r22, Z+1	; 0x01
    3904:	72 81       	ldd	r23, Z+2	; 0x02
    3906:	83 81       	ldd	r24, Z+3	; 0x03
    3908:	94 81       	ldd	r25, Z+4	; 0x04
    390a:	08 95       	ret

0000390c <_ZN7PCA968522setOscillatorFrequencyEm>:
    390c:	fc 01       	movw	r30, r24
    390e:	41 83       	std	Z+1, r20	; 0x01
    3910:	52 83       	std	Z+2, r21	; 0x02
    3912:	63 83       	std	Z+3, r22	; 0x03
    3914:	74 83       	std	Z+4, r23	; 0x04
    3916:	08 95       	ret

00003918 <_ZN7PCA96855read8Eh>:
    3918:	1f 93       	push	r17
    391a:	cf 93       	push	r28
    391c:	df 93       	push	r29
    391e:	ec 01       	movw	r28, r24
    3920:	16 2f       	mov	r17, r22
    3922:	68 81       	ld	r22, Y
    3924:	89 e2       	ldi	r24, 0x29	; 41
    3926:	98 e0       	ldi	r25, 0x08	; 8
    3928:	0e 94 90 12 	call	0x2520	; 0x2520 <_ZN7TwoWire17beginTransmissionEh>
    392c:	61 2f       	mov	r22, r17
    392e:	89 e2       	ldi	r24, 0x29	; 41
    3930:	98 e0       	ldi	r25, 0x08	; 8
    3932:	0e 94 27 12 	call	0x244e	; 0x244e <_ZN7TwoWire5writeEh>
    3936:	89 e2       	ldi	r24, 0x29	; 41
    3938:	98 e0       	ldi	r25, 0x08	; 8
    393a:	0e 94 19 13 	call	0x2632	; 0x2632 <_ZN7TwoWire15endTransmissionEv>
    393e:	41 e0       	ldi	r20, 0x01	; 1
    3940:	68 81       	ld	r22, Y
    3942:	89 e2       	ldi	r24, 0x29	; 41
    3944:	98 e0       	ldi	r25, 0x08	; 8
    3946:	0e 94 13 13 	call	0x2626	; 0x2626 <_ZN7TwoWire11requestFromEhh>
    394a:	89 e2       	ldi	r24, 0x29	; 41
    394c:	98 e0       	ldi	r25, 0x08	; 8
    394e:	0e 94 cb 11 	call	0x2396	; 0x2396 <_ZN7TwoWire4readEv>
    3952:	df 91       	pop	r29
    3954:	cf 91       	pop	r28
    3956:	1f 91       	pop	r17
    3958:	08 95       	ret

0000395a <_ZN7PCA96856write8Ehh>:
    395a:	cf 93       	push	r28
    395c:	df 93       	push	r29
    395e:	d6 2f       	mov	r29, r22
    3960:	c4 2f       	mov	r28, r20
    3962:	fc 01       	movw	r30, r24
    3964:	60 81       	ld	r22, Z
    3966:	89 e2       	ldi	r24, 0x29	; 41
    3968:	98 e0       	ldi	r25, 0x08	; 8
    396a:	0e 94 90 12 	call	0x2520	; 0x2520 <_ZN7TwoWire17beginTransmissionEh>
    396e:	6d 2f       	mov	r22, r29
    3970:	89 e2       	ldi	r24, 0x29	; 41
    3972:	98 e0       	ldi	r25, 0x08	; 8
    3974:	0e 94 27 12 	call	0x244e	; 0x244e <_ZN7TwoWire5writeEh>
    3978:	6c 2f       	mov	r22, r28
    397a:	89 e2       	ldi	r24, 0x29	; 41
    397c:	98 e0       	ldi	r25, 0x08	; 8
    397e:	0e 94 27 12 	call	0x244e	; 0x244e <_ZN7TwoWire5writeEh>
    3982:	89 e2       	ldi	r24, 0x29	; 41
    3984:	98 e0       	ldi	r25, 0x08	; 8
    3986:	0e 94 19 13 	call	0x2632	; 0x2632 <_ZN7TwoWire15endTransmissionEv>
    398a:	df 91       	pop	r29
    398c:	cf 91       	pop	r28
    398e:	08 95       	ret

00003990 <_ZN7PCA96855resetEv>:
    3990:	40 e8       	ldi	r20, 0x80	; 128
    3992:	60 e0       	ldi	r22, 0x00	; 0
    3994:	e2 df       	rcall	.-60     	; 0x395a <_ZN7PCA96856write8Ehh>
    3996:	8f e3       	ldi	r24, 0x3F	; 63
    3998:	9c e9       	ldi	r25, 0x9C	; 156
    399a:	01 97       	sbiw	r24, 0x01	; 1
    399c:	f1 f7       	brne	.-4      	; 0x399a <_ZN7PCA96855resetEv+0xa>
    399e:	00 c0       	rjmp	.+0      	; 0x39a0 <_ZN7PCA96855resetEv+0x10>
    39a0:	00 00       	nop
    39a2:	08 95       	ret

000039a4 <_ZN7PCA96859setExtClkEh>:

//Sets EXTCLK pin to use the external clock
void PCA9685::setExtClk(uint8_t prescale) {
    39a4:	0f 93       	push	r16
    39a6:	1f 93       	push	r17
    39a8:	cf 93       	push	r28
    39aa:	df 93       	push	r29
    39ac:	8c 01       	movw	r16, r24
    39ae:	d6 2f       	mov	r29, r22
  uint8_t oldmode = read8(PCA9685_MODE1);
    39b0:	60 e0       	ldi	r22, 0x00	; 0
    39b2:	b2 df       	rcall	.-156    	; 0x3918 <_ZN7PCA96855read8Eh>
  uint8_t newmode = (oldmode & ~MODE1_RESTART) | MODE1_SLEEP; // sleep
    39b4:	c8 2f       	mov	r28, r24
    39b6:	cf 76       	andi	r28, 0x6F	; 111
    39b8:	4c 2f       	mov	r20, r28
    39ba:	40 61       	ori	r20, 0x10	; 16
  write8(PCA9685_MODE1, newmode); // go to sleep, turn off internal oscillator
    39bc:	60 e0       	ldi	r22, 0x00	; 0
    39be:	c8 01       	movw	r24, r16
    39c0:	cc df       	rcall	.-104    	; 0x395a <_ZN7PCA96856write8Ehh>

  // This sets both the SLEEP and EXTCLK bits of the MODE1 register to switch to
  // use the external clock.
  write8(PCA9685_MODE1, (newmode |= MODE1_EXTCLK));
    39c2:	c0 65       	ori	r28, 0x50	; 80
    39c4:	4c 2f       	mov	r20, r28
    39c6:	60 e0       	ldi	r22, 0x00	; 0
    39c8:	c8 01       	movw	r24, r16
    39ca:	c7 df       	rcall	.-114    	; 0x395a <_ZN7PCA96856write8Ehh>

  _prescale = prescale;
    39cc:	f8 01       	movw	r30, r16
    39ce:	d5 83       	std	Z+5, r29	; 0x05
  write8(PCA9685_PRESCALE, prescale); // set the prescaler
    39d0:	4d 2f       	mov	r20, r29
    39d2:	6e ef       	ldi	r22, 0xFE	; 254
    39d4:	c8 01       	movw	r24, r16
    39d6:	c1 df       	rcall	.-126    	; 0x395a <_ZN7PCA96856write8Ehh>
    39d8:	8f e1       	ldi	r24, 0x1F	; 31
    39da:	9e e4       	ldi	r25, 0x4E	; 78
    39dc:	01 97       	sbiw	r24, 0x01	; 1
    39de:	f1 f7       	brne	.-4      	; 0x39dc <_ZN7PCA96859setExtClkEh+0x38>
    39e0:	00 c0       	rjmp	.+0      	; 0x39e2 <_ZN7PCA96859setExtClkEh+0x3e>
    39e2:	00 00       	nop

  _delay_ms(5);
  
  write8(PCA9685_MODE1, (newmode & ~MODE1_SLEEP) | MODE1_RESTART | MODE1_AI);// clear the SLEEP bit to start
    39e4:	4c 2f       	mov	r20, r28
    39e6:	4f 74       	andi	r20, 0x4F	; 79
    39e8:	40 6a       	ori	r20, 0xA0	; 160
    39ea:	60 e0       	ldi	r22, 0x00	; 0
    39ec:	c8 01       	movw	r24, r16
    39ee:	b5 df       	rcall	.-150    	; 0x395a <_ZN7PCA96856write8Ehh>
}
    39f0:	df 91       	pop	r29
    39f2:	cf 91       	pop	r28
    39f4:	1f 91       	pop	r17
    39f6:	0f 91       	pop	r16
    39f8:	08 95       	ret

000039fa <_ZN7PCA968510setPWMFreqEf>:

//Sets the PWM frequency for the entire chip, up to ~1.6 KHz
void PCA9685::setPWMFreq(float freq) {
    39fa:	8f 92       	push	r8
    39fc:	9f 92       	push	r9
    39fe:	af 92       	push	r10
    3a00:	bf 92       	push	r11
    3a02:	cf 92       	push	r12
    3a04:	df 92       	push	r13
    3a06:	ef 92       	push	r14
    3a08:	ff 92       	push	r15
    3a0a:	1f 93       	push	r17
    3a0c:	cf 93       	push	r28
    3a0e:	df 93       	push	r29
    3a10:	ec 01       	movw	r28, r24
    3a12:	6a 01       	movw	r12, r20
    3a14:	7b 01       	movw	r14, r22
  // Range output modulation frequency is dependant on oscillator
  if (freq < 1)
    3a16:	20 e0       	ldi	r18, 0x00	; 0
    3a18:	30 e0       	ldi	r19, 0x00	; 0
    3a1a:	40 e8       	ldi	r20, 0x80	; 128
    3a1c:	5f e3       	ldi	r21, 0x3F	; 63
    3a1e:	c7 01       	movw	r24, r14
    3a20:	b6 01       	movw	r22, r12
    3a22:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <__cmpsf2>
    3a26:	88 23       	and	r24, r24
    3a28:	a4 f0       	brlt	.+40     	; 0x3a52 <_ZN7PCA968510setPWMFreqEf+0x58>
    freq = 1;
  if (freq > 3500)
    3a2a:	20 e0       	ldi	r18, 0x00	; 0
    3a2c:	30 ec       	ldi	r19, 0xC0	; 192
    3a2e:	4a e5       	ldi	r20, 0x5A	; 90
    3a30:	55 e4       	ldi	r21, 0x45	; 69
    3a32:	c7 01       	movw	r24, r14
    3a34:	b6 01       	movw	r22, r12
    3a36:	0e 94 95 26 	call	0x4d2a	; 0x4d2a <__gesf2>
    3a3a:	18 16       	cp	r1, r24
    3a3c:	94 f4       	brge	.+36     	; 0x3a62 <_ZN7PCA968510setPWMFreqEf+0x68>
    freq = 3500; // Datasheet limit is 3052=50MHz/(4*4096)
    3a3e:	0f 2e       	mov	r0, r31
    3a40:	c1 2c       	mov	r12, r1
    3a42:	f0 ec       	ldi	r31, 0xC0	; 192
    3a44:	df 2e       	mov	r13, r31
    3a46:	fa e5       	ldi	r31, 0x5A	; 90
    3a48:	ef 2e       	mov	r14, r31
    3a4a:	f5 e4       	ldi	r31, 0x45	; 69
    3a4c:	ff 2e       	mov	r15, r31
    3a4e:	f0 2d       	mov	r31, r0
    3a50:	08 c0       	rjmp	.+16     	; 0x3a62 <_ZN7PCA968510setPWMFreqEf+0x68>

//Sets the PWM frequency for the entire chip, up to ~1.6 KHz
void PCA9685::setPWMFreq(float freq) {
  // Range output modulation frequency is dependant on oscillator
  if (freq < 1)
    freq = 1;
    3a52:	0f 2e       	mov	r0, r31
    3a54:	c1 2c       	mov	r12, r1
    3a56:	d1 2c       	mov	r13, r1
    3a58:	f0 e8       	ldi	r31, 0x80	; 128
    3a5a:	ef 2e       	mov	r14, r31
    3a5c:	ff e3       	ldi	r31, 0x3F	; 63
    3a5e:	ff 2e       	mov	r15, r31
    3a60:	f0 2d       	mov	r31, r0
  if (freq > 3500)
    freq = 3500; // Datasheet limit is 3052=50MHz/(4*4096)

  float prescaleval = ((_oscillator_freq / (freq * 4096.0)) + 0.5) - 1;
    3a62:	69 81       	ldd	r22, Y+1	; 0x01
    3a64:	7a 81       	ldd	r23, Y+2	; 0x02
    3a66:	8b 81       	ldd	r24, Y+3	; 0x03
    3a68:	9c 81       	ldd	r25, Y+4	; 0x04
    3a6a:	0e 94 e3 25 	call	0x4bc6	; 0x4bc6 <__floatunsisf>
    3a6e:	4b 01       	movw	r8, r22
    3a70:	5c 01       	movw	r10, r24
    3a72:	20 e0       	ldi	r18, 0x00	; 0
    3a74:	30 e0       	ldi	r19, 0x00	; 0
    3a76:	40 e8       	ldi	r20, 0x80	; 128
    3a78:	55 e4       	ldi	r21, 0x45	; 69
    3a7a:	c7 01       	movw	r24, r14
    3a7c:	b6 01       	movw	r22, r12
    3a7e:	0e 94 99 26 	call	0x4d32	; 0x4d32 <__mulsf3>
    3a82:	9b 01       	movw	r18, r22
    3a84:	ac 01       	movw	r20, r24
    3a86:	c5 01       	movw	r24, r10
    3a88:	b4 01       	movw	r22, r8
    3a8a:	0e 94 4f 25 	call	0x4a9e	; 0x4a9e <__divsf3>
    3a8e:	20 e0       	ldi	r18, 0x00	; 0
    3a90:	30 e0       	ldi	r19, 0x00	; 0
    3a92:	40 e0       	ldi	r20, 0x00	; 0
    3a94:	5f e3       	ldi	r21, 0x3F	; 63
    3a96:	9b d7       	rcall	.+3894   	; 0x49ce <__addsf3>
    3a98:	20 e0       	ldi	r18, 0x00	; 0
    3a9a:	30 e0       	ldi	r19, 0x00	; 0
    3a9c:	40 e8       	ldi	r20, 0x80	; 128
    3a9e:	5f e3       	ldi	r21, 0x3F	; 63
    3aa0:	95 d7       	rcall	.+3882   	; 0x49cc <__subsf3>
    3aa2:	6b 01       	movw	r12, r22
    3aa4:	7c 01       	movw	r14, r24
  if (prescaleval < PCA9685_PRESCALE_MIN)
    3aa6:	20 e0       	ldi	r18, 0x00	; 0
    3aa8:	30 e0       	ldi	r19, 0x00	; 0
    3aaa:	40 e4       	ldi	r20, 0x40	; 64
    3aac:	50 e4       	ldi	r21, 0x40	; 64
    3aae:	f3 d7       	rcall	.+4070   	; 0x4a96 <__cmpsf2>
    3ab0:	88 23       	and	r24, r24
    3ab2:	9c f0       	brlt	.+38     	; 0x3ada <_ZN7PCA968510setPWMFreqEf+0xe0>
    prescaleval = PCA9685_PRESCALE_MIN;
  if (prescaleval > PCA9685_PRESCALE_MAX)
    3ab4:	20 e0       	ldi	r18, 0x00	; 0
    3ab6:	30 e0       	ldi	r19, 0x00	; 0
    3ab8:	4f e7       	ldi	r20, 0x7F	; 127
    3aba:	53 e4       	ldi	r21, 0x43	; 67
    3abc:	c7 01       	movw	r24, r14
    3abe:	b6 01       	movw	r22, r12
    3ac0:	0e 94 95 26 	call	0x4d2a	; 0x4d2a <__gesf2>
    3ac4:	18 16       	cp	r1, r24
    3ac6:	7c f4       	brge	.+30     	; 0x3ae6 <_ZN7PCA968510setPWMFreqEf+0xec>
    prescaleval = PCA9685_PRESCALE_MAX;
    3ac8:	0f 2e       	mov	r0, r31
    3aca:	c1 2c       	mov	r12, r1
    3acc:	d1 2c       	mov	r13, r1
    3ace:	ff e7       	ldi	r31, 0x7F	; 127
    3ad0:	ef 2e       	mov	r14, r31
    3ad2:	f3 e4       	ldi	r31, 0x43	; 67
    3ad4:	ff 2e       	mov	r15, r31
    3ad6:	f0 2d       	mov	r31, r0
    3ad8:	06 c0       	rjmp	.+12     	; 0x3ae6 <_ZN7PCA968510setPWMFreqEf+0xec>
  if (freq > 3500)
    freq = 3500; // Datasheet limit is 3052=50MHz/(4*4096)

  float prescaleval = ((_oscillator_freq / (freq * 4096.0)) + 0.5) - 1;
  if (prescaleval < PCA9685_PRESCALE_MIN)
    prescaleval = PCA9685_PRESCALE_MIN;
    3ada:	c1 2c       	mov	r12, r1
    3adc:	d1 2c       	mov	r13, r1
    3ade:	68 94       	set
    3ae0:	ee 24       	eor	r14, r14
    3ae2:	e6 f8       	bld	r14, 6
    3ae4:	fe 2c       	mov	r15, r14
  if (prescaleval > PCA9685_PRESCALE_MAX)
    prescaleval = PCA9685_PRESCALE_MAX;
  uint8_t prescale = (uint8_t)prescaleval;
    3ae6:	c7 01       	movw	r24, r14
    3ae8:	b6 01       	movw	r22, r12
    3aea:	0e 94 b7 25 	call	0x4b6e	; 0x4b6e <__fixunssfsi>
    3aee:	f6 2e       	mov	r15, r22

  uint8_t oldmode = read8(PCA9685_MODE1);
    3af0:	60 e0       	ldi	r22, 0x00	; 0
    3af2:	ce 01       	movw	r24, r28
    3af4:	11 df       	rcall	.-478    	; 0x3918 <_ZN7PCA96855read8Eh>
    3af6:	18 2f       	mov	r17, r24
  uint8_t newmode = (oldmode & ~MODE1_RESTART) | MODE1_SLEEP; // sleep
  write8(PCA9685_MODE1, newmode);                             // go to sleep
    3af8:	48 2f       	mov	r20, r24
    3afa:	4f 76       	andi	r20, 0x6F	; 111
    3afc:	40 61       	ori	r20, 0x10	; 16
    3afe:	60 e0       	ldi	r22, 0x00	; 0
    3b00:	ce 01       	movw	r24, r28
    3b02:	2b df       	rcall	.-426    	; 0x395a <_ZN7PCA96856write8Ehh>
  _prescale = prescale;
  write8(PCA9685_PRESCALE, prescale); // set the prescaler
    3b04:	fd 82       	std	Y+5, r15	; 0x05
    3b06:	4f 2d       	mov	r20, r15
    3b08:	6e ef       	ldi	r22, 0xFE	; 254
    3b0a:	ce 01       	movw	r24, r28
  write8(PCA9685_MODE1, oldmode);
    3b0c:	26 df       	rcall	.-436    	; 0x395a <_ZN7PCA96856write8Ehh>
    3b0e:	41 2f       	mov	r20, r17
    3b10:	60 e0       	ldi	r22, 0x00	; 0
    3b12:	ce 01       	movw	r24, r28
    3b14:	22 df       	rcall	.-444    	; 0x395a <_ZN7PCA96856write8Ehh>
    3b16:	8f e1       	ldi	r24, 0x1F	; 31
    3b18:	9e e4       	ldi	r25, 0x4E	; 78
    3b1a:	01 97       	sbiw	r24, 0x01	; 1
    3b1c:	f1 f7       	brne	.-4      	; 0x3b1a <_ZN7PCA968510setPWMFreqEf+0x120>
    3b1e:	00 c0       	rjmp	.+0      	; 0x3b20 <_ZN7PCA968510setPWMFreqEf+0x126>
  _delay_ms(5);
  // This sets the MODE1 register to turn on auto increment.
  write8(PCA9685_MODE1, oldmode | MODE1_RESTART | MODE1_AI);
    3b20:	00 00       	nop
    3b22:	41 2f       	mov	r20, r17
    3b24:	40 6a       	ori	r20, 0xA0	; 160
    3b26:	60 e0       	ldi	r22, 0x00	; 0
    3b28:	ce 01       	movw	r24, r28
    3b2a:	17 df       	rcall	.-466    	; 0x395a <_ZN7PCA96856write8Ehh>
}
    3b2c:	df 91       	pop	r29
    3b2e:	cf 91       	pop	r28
    3b30:	1f 91       	pop	r17
    3b32:	ff 90       	pop	r15
    3b34:	ef 90       	pop	r14
    3b36:	df 90       	pop	r13
    3b38:	cf 90       	pop	r12
    3b3a:	bf 90       	pop	r11
    3b3c:	af 90       	pop	r10
    3b3e:	9f 90       	pop	r9
    3b40:	8f 90       	pop	r8
    3b42:	08 95       	ret

00003b44 <_ZN7PCA96855beginEh>:

PCA9685::PCA9685(const uint8_t addr) : _addr(addr){
	
}

void PCA9685::begin(uint8_t prescale) {
    3b44:	1f 93       	push	r17
    3b46:	cf 93       	push	r28
    3b48:	df 93       	push	r29
    3b4a:	ec 01       	movw	r28, r24
    3b4c:	16 2f       	mov	r17, r22
	Wire.begin();
    3b4e:	89 e2       	ldi	r24, 0x29	; 41
    3b50:	98 e0       	ldi	r25, 0x08	; 8
    3b52:	0e 94 80 12 	call	0x2500	; 0x2500 <_ZN7TwoWire5beginEv>
	reset();
    3b56:	ce 01       	movw	r24, r28
    3b58:	1b df       	rcall	.-458    	; 0x3990 <_ZN7PCA96855resetEv>
	if (prescale) {
    3b5a:	11 23       	and	r17, r17
    3b5c:	21 f0       	breq	.+8      	; 0x3b66 <_ZN7PCA96855beginEh+0x22>
		setExtClk(prescale);
    3b5e:	61 2f       	mov	r22, r17
    3b60:	ce 01       	movw	r24, r28
    3b62:	20 df       	rcall	.-448    	; 0x39a4 <_ZN7PCA96859setExtClkEh>
    3b64:	06 c0       	rjmp	.+12     	; 0x3b72 <_ZN7PCA96855beginEh+0x2e>
	} else {  
		setPWMFreq(1000); // set a default frequency
    3b66:	40 e0       	ldi	r20, 0x00	; 0
    3b68:	50 e0       	ldi	r21, 0x00	; 0
    3b6a:	6a e7       	ldi	r22, 0x7A	; 122
    3b6c:	74 e4       	ldi	r23, 0x44	; 68
    3b6e:	ce 01       	movw	r24, r28
    3b70:	44 df       	rcall	.-376    	; 0x39fa <_ZN7PCA968510setPWMFreqEf>
 *  @brief Setter for the internally tracked oscillator used for freq
 * calculations
 *  @param freq The frequency the PCA9685 should use for frequency calculations
 */
void PCA9685::setOscillatorFrequency(uint32_t freq) {
  _oscillator_freq = freq;
    3b72:	80 e4       	ldi	r24, 0x40	; 64
    3b74:	98 e7       	ldi	r25, 0x78	; 120
    3b76:	ad e7       	ldi	r26, 0x7D	; 125
    3b78:	b1 e0       	ldi	r27, 0x01	; 1
    3b7a:	89 83       	std	Y+1, r24	; 0x01
    3b7c:	9a 83       	std	Y+2, r25	; 0x02
    3b7e:	ab 83       	std	Y+3, r26	; 0x03
    3b80:	bc 83       	std	Y+4, r27	; 0x04
		setExtClk(prescale);
	} else {  
		setPWMFreq(1000); // set a default frequency
	}
	setOscillatorFrequency(FREQUENCY_OSCILLATOR); // set the default internal frequency
}
    3b82:	df 91       	pop	r29
    3b84:	cf 91       	pop	r28
    3b86:	1f 91       	pop	r17
    3b88:	08 95       	ret

00003b8a <_ZN18TwiServoControllerC1Eh>:
 */ 

#include "TwiServoController.h"
#include "../Micro/CpuFreq.h"

TwiServoController::TwiServoController(const uint8_t addr) : controller(addr){
    3b8a:	1f ce       	rjmp	.-962    	; 0x37ca <_ZN7PCA9685C1Eh>
    3b8c:	08 95       	ret

00003b8e <_ZN18TwiServoController5beginEv>:
		
}

bool TwiServoController::begin(){
    3b8e:	cf 93       	push	r28
    3b90:	df 93       	push	r29
    3b92:	ec 01       	movw	r28, r24
	controller.begin();
    3b94:	60 e0       	ldi	r22, 0x00	; 0
    3b96:	d6 df       	rcall	.-84     	; 0x3b44 <_ZN7PCA96855beginEh>
	// In theory the internal oscillator is 25MHz but it really isn't
	// that precise. You can 'calibrate' by tweaking this number till
	// you get the frequency you're expecting!
	controller.setOscillatorFrequency(27000000);  // The int.osc. is closer to 27MHz
    3b98:	40 ec       	ldi	r20, 0xC0	; 192
    3b9a:	5c ef       	ldi	r21, 0xFC	; 252
    3b9c:	6b e9       	ldi	r22, 0x9B	; 155
    3b9e:	71 e0       	ldi	r23, 0x01	; 1
    3ba0:	ce 01       	movw	r24, r28
    3ba2:	b4 de       	rcall	.-664    	; 0x390c <_ZN7PCA968522setOscillatorFrequencyEm>
	controller.setPWMFreq(SERVO_FREQ);  // Analog servos run at ~50 Hz updates
    3ba4:	40 e0       	ldi	r20, 0x00	; 0
    3ba6:	50 e0       	ldi	r21, 0x00	; 0
    3ba8:	68 e4       	ldi	r22, 0x48	; 72
    3baa:	72 e4       	ldi	r23, 0x42	; 66
    3bac:	ce 01       	movw	r24, r28
    3bae:	25 df       	rcall	.-438    	; 0x39fa <_ZN7PCA968510setPWMFreqEf>
    3bb0:	8f e3       	ldi	r24, 0x3F	; 63
    3bb2:	9c e9       	ldi	r25, 0x9C	; 156
    3bb4:	01 97       	sbiw	r24, 0x01	; 1
    3bb6:	f1 f7       	brne	.-4      	; 0x3bb4 <_ZN18TwiServoController5beginEv+0x26>
    3bb8:	00 c0       	rjmp	.+0      	; 0x3bba <_ZN18TwiServoController5beginEv+0x2c>
	_delay_ms(10);
	return controller.getOscillatorFrequency() == 27000000;
    3bba:	00 00       	nop
    3bbc:	ce 01       	movw	r24, r28
    3bbe:	a0 de       	rcall	.-704    	; 0x3900 <_ZN7PCA968522getOscillatorFrequencyEv>
    3bc0:	21 e0       	ldi	r18, 0x01	; 1
    3bc2:	60 3c       	cpi	r22, 0xC0	; 192
    3bc4:	7c 4f       	sbci	r23, 0xFC	; 252
    3bc6:	8b 49       	sbci	r24, 0x9B	; 155
    3bc8:	91 40       	sbci	r25, 0x01	; 1
    3bca:	09 f0       	breq	.+2      	; 0x3bce <_ZN18TwiServoController5beginEv+0x40>
    3bcc:	20 e0       	ldi	r18, 0x00	; 0
}
    3bce:	82 2f       	mov	r24, r18
    3bd0:	df 91       	pop	r29
    3bd2:	cf 91       	pop	r28
    3bd4:	08 95       	ret

00003bd6 <_ZN18TwiServoController8setPulseEhj>:

void TwiServoController::setPulse(uint8_t num, uint16_t us){
	if(num < 16) controller.writeMicroseconds(num, us);
    3bd6:	60 31       	cpi	r22, 0x10	; 16
    3bd8:	08 f4       	brcc	.+2      	; 0x3bdc <_ZN18TwiServoController8setPulseEhj+0x6>
    3bda:	46 ce       	rjmp	.-884    	; 0x3868 <_ZN7PCA968517writeMicrosecondsEhj>
    3bdc:	08 95       	ret

00003bde <_ZN18TwiServoController7releaseEh>:
}

void TwiServoController::release(uint8_t num){
	if(num < 16) controller.setPWM(num, 0, 4096);
    3bde:	60 31       	cpi	r22, 0x10	; 16
    3be0:	28 f4       	brcc	.+10     	; 0x3bec <_ZN18TwiServoController7releaseEh+0xe>
    3be2:	20 e0       	ldi	r18, 0x00	; 0
    3be4:	30 e1       	ldi	r19, 0x10	; 16
    3be6:	40 e0       	ldi	r20, 0x00	; 0
    3be8:	50 e0       	ldi	r21, 0x00	; 0
    3bea:	f2 cd       	rjmp	.-1052   	; 0x37d0 <_ZN7PCA96856setPWMEhjj>
    3bec:	08 95       	ret

00003bee <_ZN16HardwarePcbServo8setPulseEj>:
		default:
			break;
	}
}*/
#include "../Micro/Peripherals/HardwareSerial.h"
void HardwarePcbServo::setPulse(uint16_t us){
    3bee:	0f 93       	push	r16
    3bf0:	1f 93       	push	r17
    3bf2:	cf 93       	push	r28
    3bf4:	df 93       	push	r29
    3bf6:	ec 01       	movw	r28, r24
    3bf8:	8b 01       	movw	r16, r22
	Serial.println(_servo);
    3bfa:	6c 81       	ldd	r22, Y+4	; 0x04
    3bfc:	70 e0       	ldi	r23, 0x00	; 0
    3bfe:	4a e0       	ldi	r20, 0x0A	; 10
    3c00:	50 e0       	ldi	r21, 0x00	; 0
    3c02:	8b e4       	ldi	r24, 0x4B	; 75
    3c04:	97 e0       	ldi	r25, 0x07	; 7
    3c06:	d2 d6       	rcall	.+3492   	; 0x49ac <_ZN5Print7printlnEii>
	switch(_servo){
    3c08:	8c 81       	ldd	r24, Y+4	; 0x04
    3c0a:	81 30       	cpi	r24, 0x01	; 1
    3c0c:	51 f0       	breq	.+20     	; 0x3c22 <_ZN16HardwarePcbServo8setPulseEj+0x34>
    3c0e:	18 f0       	brcs	.+6      	; 0x3c16 <_ZN16HardwarePcbServo8setPulseEj+0x28>
    3c10:	82 30       	cpi	r24, 0x02	; 2
    3c12:	69 f0       	breq	.+26     	; 0x3c2e <_ZN16HardwarePcbServo8setPulseEj+0x40>
    3c14:	11 c0       	rjmp	.+34     	; 0x3c38 <_ZN16HardwarePcbServo8setPulseEj+0x4a>
		case ServoA:
			_controller->setPulseA(us);
    3c16:	b8 01       	movw	r22, r16
    3c18:	8a 81       	ldd	r24, Y+2	; 0x02
    3c1a:	9b 81       	ldd	r25, Y+3	; 0x03
    3c1c:	0e 94 66 0d 	call	0x1acc	; 0x1acc <_ZN13HardwareServo9setPulseAEj>
			break;
    3c20:	0b c0       	rjmp	.+22     	; 0x3c38 <_ZN16HardwarePcbServo8setPulseEj+0x4a>
		case ServoB:
			_controller->setPulseB(us);
    3c22:	b8 01       	movw	r22, r16
    3c24:	8a 81       	ldd	r24, Y+2	; 0x02
    3c26:	9b 81       	ldd	r25, Y+3	; 0x03
    3c28:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <_ZN13HardwareServo9setPulseBEj>
			break;
    3c2c:	05 c0       	rjmp	.+10     	; 0x3c38 <_ZN16HardwarePcbServo8setPulseEj+0x4a>
		case ServoC:
			_controller->setPulseC(us);
    3c2e:	b8 01       	movw	r22, r16
    3c30:	8a 81       	ldd	r24, Y+2	; 0x02
    3c32:	9b 81       	ldd	r25, Y+3	; 0x03
    3c34:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <_ZN13HardwareServo9setPulseCEj>
			break;
		default:
			break;
	}
}
    3c38:	df 91       	pop	r29
    3c3a:	cf 91       	pop	r28
    3c3c:	1f 91       	pop	r17
    3c3e:	0f 91       	pop	r16
    3c40:	08 95       	ret

00003c42 <_ZN16HardwarePcbServo6enableEb>:

void HardwarePcbServo::enable(bool en /* = true */){
    3c42:	fc 01       	movw	r30, r24
	switch(_servo){
    3c44:	94 81       	ldd	r25, Z+4	; 0x04
    3c46:	91 30       	cpi	r25, 0x01	; 1
    3c48:	81 f0       	breq	.+32     	; 0x3c6a <_ZN16HardwarePcbServo6enableEb+0x28>
    3c4a:	18 f0       	brcs	.+6      	; 0x3c52 <_ZN16HardwarePcbServo6enableEb+0x10>
    3c4c:	92 30       	cpi	r25, 0x02	; 2
    3c4e:	c9 f0       	breq	.+50     	; 0x3c82 <_ZN16HardwarePcbServo6enableEb+0x40>
    3c50:	08 95       	ret
		case ServoA:
			if(en) _controller->EnableA(); else _controller->DisableA();
    3c52:	66 23       	and	r22, r22
    3c54:	29 f0       	breq	.+10     	; 0x3c60 <_ZN16HardwarePcbServo6enableEb+0x1e>
    3c56:	82 81       	ldd	r24, Z+2	; 0x02
    3c58:	93 81       	ldd	r25, Z+3	; 0x03
    3c5a:	0c 94 15 0d 	jmp	0x1a2a	; 0x1a2a <_ZN13HardwareServo7EnableAEv>
    3c5e:	08 95       	ret
    3c60:	82 81       	ldd	r24, Z+2	; 0x02
    3c62:	93 81       	ldd	r25, Z+3	; 0x03
    3c64:	0c 94 3c 0d 	jmp	0x1a78	; 0x1a78 <_ZN13HardwareServo8DisableAEv>
    3c68:	08 95       	ret
			break;
		case ServoB:
			if(en) _controller->EnableB(); else _controller->DisableB();
    3c6a:	66 23       	and	r22, r22
    3c6c:	29 f0       	breq	.+10     	; 0x3c78 <_ZN16HardwarePcbServo6enableEb+0x36>
    3c6e:	82 81       	ldd	r24, Z+2	; 0x02
    3c70:	93 81       	ldd	r25, Z+3	; 0x03
    3c72:	0c 94 22 0d 	jmp	0x1a44	; 0x1a44 <_ZN13HardwareServo7EnableBEv>
    3c76:	08 95       	ret
    3c78:	82 81       	ldd	r24, Z+2	; 0x02
    3c7a:	93 81       	ldd	r25, Z+3	; 0x03
    3c7c:	0c 94 4a 0d 	jmp	0x1a94	; 0x1a94 <_ZN13HardwareServo8DisableBEv>
    3c80:	08 95       	ret
			break;
		case ServoC:
			if(en) _controller->EnableC(); else _controller->DisableC();
    3c82:	66 23       	and	r22, r22
    3c84:	29 f0       	breq	.+10     	; 0x3c90 <_ZN16HardwarePcbServo6enableEb+0x4e>
    3c86:	82 81       	ldd	r24, Z+2	; 0x02
    3c88:	93 81       	ldd	r25, Z+3	; 0x03
    3c8a:	0c 94 2f 0d 	jmp	0x1a5e	; 0x1a5e <_ZN13HardwareServo7EnableCEv>
    3c8e:	08 95       	ret
    3c90:	82 81       	ldd	r24, Z+2	; 0x02
    3c92:	93 81       	ldd	r25, Z+3	; 0x03
    3c94:	0c 94 58 0d 	jmp	0x1ab0	; 0x1ab0 <_ZN13HardwareServo8DisableCEv>
    3c98:	08 95       	ret

00003c9a <_ZN16HardwarePcbServoC1ER13HardwareServoNS_9ServoId_tE>:
 *  Author: zcarey
 */ 

#include "HardwarePcbServo.h"

HardwarePcbServo::HardwarePcbServo(HardwareServo &controller, ServoId_t servo) 
    3c9a:	fc 01       	movw	r30, r24
	: PcbServo(), _controller(&controller), _servo(servo) {
    3c9c:	83 e9       	ldi	r24, 0x93	; 147
    3c9e:	92 e0       	ldi	r25, 0x02	; 2
    3ca0:	91 83       	std	Z+1, r25	; 0x01
    3ca2:	80 83       	st	Z, r24
    3ca4:	73 83       	std	Z+3, r23	; 0x03
    3ca6:	62 83       	std	Z+2, r22	; 0x02
    3ca8:	44 83       	std	Z+4, r20	; 0x04
    3caa:	08 95       	ret

00003cac <_GLOBAL__sub_I_ServoA1>:
 *  Author: zcarey
 */ 

#include "PcbPins.h"

HardwarePcbServo ServoA1(Servo5, HardwarePcbServo::ServoC);
    3cac:	42 e0       	ldi	r20, 0x02	; 2
    3cae:	67 e5       	ldi	r22, 0x57	; 87
    3cb0:	77 e0       	ldi	r23, 0x07	; 7
    3cb2:	8d e2       	ldi	r24, 0x2D	; 45
    3cb4:	99 e0       	ldi	r25, 0x09	; 9
    3cb6:	f1 df       	rcall	.-30     	; 0x3c9a <_ZN16HardwarePcbServoC1ER13HardwareServoNS_9ServoId_tE>
HardwarePcbServo ServoA2(Servo3, HardwarePcbServo::ServoB);
    3cb8:	41 e0       	ldi	r20, 0x01	; 1
    3cba:	6d e7       	ldi	r22, 0x7D	; 125
    3cbc:	77 e0       	ldi	r23, 0x07	; 7
    3cbe:	88 e2       	ldi	r24, 0x28	; 40
    3cc0:	99 e0       	ldi	r25, 0x09	; 9
    3cc2:	eb df       	rcall	.-42     	; 0x3c9a <_ZN16HardwarePcbServoC1ER13HardwareServoNS_9ServoId_tE>
HardwarePcbServo ServoA3(Servo3, HardwarePcbServo::ServoA);
    3cc4:	40 e0       	ldi	r20, 0x00	; 0
    3cc6:	6d e7       	ldi	r22, 0x7D	; 125
    3cc8:	77 e0       	ldi	r23, 0x07	; 7
    3cca:	83 e2       	ldi	r24, 0x23	; 35
    3ccc:	99 e0       	ldi	r25, 0x09	; 9
    3cce:	e5 df       	rcall	.-54     	; 0x3c9a <_ZN16HardwarePcbServoC1ER13HardwareServoNS_9ServoId_tE>
HardwarePcbServo ServoA4(Servo4, HardwarePcbServo::ServoB);
    3cd0:	41 e0       	ldi	r20, 0x01	; 1
    3cd2:	6a e6       	ldi	r22, 0x6A	; 106
    3cd4:	77 e0       	ldi	r23, 0x07	; 7
    3cd6:	8e e1       	ldi	r24, 0x1E	; 30
    3cd8:	99 e0       	ldi	r25, 0x09	; 9
    3cda:	df df       	rcall	.-66     	; 0x3c9a <_ZN16HardwarePcbServoC1ER13HardwareServoNS_9ServoId_tE>
HardwarePcbServo ServoA5(Servo4, HardwarePcbServo::ServoC);
    3cdc:	42 e0       	ldi	r20, 0x02	; 2
    3cde:	6a e6       	ldi	r22, 0x6A	; 106
    3ce0:	77 e0       	ldi	r23, 0x07	; 7
    3ce2:	89 e1       	ldi	r24, 0x19	; 25
    3ce4:	99 e0       	ldi	r25, 0x09	; 9
    3ce6:	d9 df       	rcall	.-78     	; 0x3c9a <_ZN16HardwarePcbServoC1ER13HardwareServoNS_9ServoId_tE>

HardwarePcbServo ServoB1(Servo5, HardwarePcbServo::ServoA);
    3ce8:	40 e0       	ldi	r20, 0x00	; 0
    3cea:	67 e5       	ldi	r22, 0x57	; 87
    3cec:	77 e0       	ldi	r23, 0x07	; 7
    3cee:	84 e1       	ldi	r24, 0x14	; 20
    3cf0:	99 e0       	ldi	r25, 0x09	; 9
    3cf2:	d3 df       	rcall	.-90     	; 0x3c9a <_ZN16HardwarePcbServoC1ER13HardwareServoNS_9ServoId_tE>
HardwarePcbServo ServoB2(Servo5, HardwarePcbServo::ServoB);
    3cf4:	41 e0       	ldi	r20, 0x01	; 1
    3cf6:	67 e5       	ldi	r22, 0x57	; 87
    3cf8:	77 e0       	ldi	r23, 0x07	; 7
    3cfa:	8f e0       	ldi	r24, 0x0F	; 15
    3cfc:	99 e0       	ldi	r25, 0x09	; 9
    3cfe:	cd df       	rcall	.-102    	; 0x3c9a <_ZN16HardwarePcbServoC1ER13HardwareServoNS_9ServoId_tE>
HardwarePcbServo ServoB3(Servo3, HardwarePcbServo::ServoC);
    3d00:	42 e0       	ldi	r20, 0x02	; 2
    3d02:	6d e7       	ldi	r22, 0x7D	; 125
    3d04:	77 e0       	ldi	r23, 0x07	; 7
    3d06:	8a e0       	ldi	r24, 0x0A	; 10
    3d08:	99 e0       	ldi	r25, 0x09	; 9
    3d0a:	c7 df       	rcall	.-114    	; 0x3c9a <_ZN16HardwarePcbServoC1ER13HardwareServoNS_9ServoId_tE>
HardwarePcbServo ServoB4(Servo4, HardwarePcbServo::ServoA);
    3d0c:	40 e0       	ldi	r20, 0x00	; 0
    3d0e:	6a e6       	ldi	r22, 0x6A	; 106
    3d10:	77 e0       	ldi	r23, 0x07	; 7
    3d12:	85 e0       	ldi	r24, 0x05	; 5
    3d14:	99 e0       	ldi	r25, 0x09	; 9
    3d16:	c1 df       	rcall	.-126    	; 0x3c9a <_ZN16HardwarePcbServoC1ER13HardwareServoNS_9ServoId_tE>
HardwarePcbServo ServoB5(Servo1, HardwarePcbServo::ServoA);
    3d18:	40 e0       	ldi	r20, 0x00	; 0
    3d1a:	60 e9       	ldi	r22, 0x90	; 144
    3d1c:	77 e0       	ldi	r23, 0x07	; 7
    3d1e:	80 e0       	ldi	r24, 0x00	; 0
    3d20:	99 e0       	ldi	r25, 0x09	; 9
    3d22:	bb df       	rcall	.-138    	; 0x3c9a <_ZN16HardwarePcbServoC1ER13HardwareServoNS_9ServoId_tE>
HardwarePcbServo ServoB6(Servo1, HardwarePcbServo::ServoB);
    3d24:	41 e0       	ldi	r20, 0x01	; 1
    3d26:	60 e9       	ldi	r22, 0x90	; 144
    3d28:	77 e0       	ldi	r23, 0x07	; 7
    3d2a:	8b ef       	ldi	r24, 0xFB	; 251
    3d2c:	98 e0       	ldi	r25, 0x08	; 8
    3d2e:	b5 df       	rcall	.-150    	; 0x3c9a <_ZN16HardwarePcbServoC1ER13HardwareServoNS_9ServoId_tE>

TwiServoController PcaServoController(0x43); //0x70);
    3d30:	63 e4       	ldi	r22, 0x43	; 67
    3d32:	85 ef       	ldi	r24, 0xF5	; 245
    3d34:	98 e0       	ldi	r25, 0x08	; 8
    3d36:	29 df       	rcall	.-430    	; 0x3b8a <_ZN18TwiServoControllerC1Eh>

TwiPcbServo ServoC1(PcaServoController, 0);
    3d38:	40 e0       	ldi	r20, 0x00	; 0
    3d3a:	65 ef       	ldi	r22, 0xF5	; 245
    3d3c:	78 e0       	ldi	r23, 0x08	; 8
    3d3e:	8d ee       	ldi	r24, 0xED	; 237
    3d40:	98 e0       	ldi	r25, 0x08	; 8
    3d42:	77 d0       	rcall	.+238    	; 0x3e32 <_ZN11TwiPcbServoC1ER18TwiServoControllerh>
TwiPcbServo ServoC2(PcaServoController, 2);
    3d44:	42 e0       	ldi	r20, 0x02	; 2
    3d46:	65 ef       	ldi	r22, 0xF5	; 245
    3d48:	78 e0       	ldi	r23, 0x08	; 8
    3d4a:	85 ee       	ldi	r24, 0xE5	; 229
    3d4c:	98 e0       	ldi	r25, 0x08	; 8
    3d4e:	71 d0       	rcall	.+226    	; 0x3e32 <_ZN11TwiPcbServoC1ER18TwiServoControllerh>
TwiPcbServo ServoC3(PcaServoController, 7);
    3d50:	47 e0       	ldi	r20, 0x07	; 7
    3d52:	65 ef       	ldi	r22, 0xF5	; 245
    3d54:	78 e0       	ldi	r23, 0x08	; 8
    3d56:	8d ed       	ldi	r24, 0xDD	; 221
    3d58:	98 e0       	ldi	r25, 0x08	; 8
    3d5a:	6b d0       	rcall	.+214    	; 0x3e32 <_ZN11TwiPcbServoC1ER18TwiServoControllerh>
TwiPcbServo ServoC4(PcaServoController, 5);
    3d5c:	45 e0       	ldi	r20, 0x05	; 5
    3d5e:	65 ef       	ldi	r22, 0xF5	; 245
    3d60:	78 e0       	ldi	r23, 0x08	; 8
    3d62:	85 ed       	ldi	r24, 0xD5	; 213
    3d64:	98 e0       	ldi	r25, 0x08	; 8
    3d66:	65 d0       	rcall	.+202    	; 0x3e32 <_ZN11TwiPcbServoC1ER18TwiServoControllerh>
TwiPcbServo ServoC5(PcaServoController, 8);
    3d68:	48 e0       	ldi	r20, 0x08	; 8
    3d6a:	65 ef       	ldi	r22, 0xF5	; 245
    3d6c:	78 e0       	ldi	r23, 0x08	; 8
    3d6e:	8d ec       	ldi	r24, 0xCD	; 205
    3d70:	98 e0       	ldi	r25, 0x08	; 8
    3d72:	5f d0       	rcall	.+190    	; 0x3e32 <_ZN11TwiPcbServoC1ER18TwiServoControllerh>
TwiPcbServo ServoC6(PcaServoController, 10);
    3d74:	4a e0       	ldi	r20, 0x0A	; 10
    3d76:	65 ef       	ldi	r22, 0xF5	; 245
    3d78:	78 e0       	ldi	r23, 0x08	; 8
    3d7a:	85 ec       	ldi	r24, 0xC5	; 197
    3d7c:	98 e0       	ldi	r25, 0x08	; 8
    3d7e:	59 d0       	rcall	.+178    	; 0x3e32 <_ZN11TwiPcbServoC1ER18TwiServoControllerh>
TwiPcbServo ServoC7(PcaServoController, 12);
    3d80:	4c e0       	ldi	r20, 0x0C	; 12
    3d82:	65 ef       	ldi	r22, 0xF5	; 245
    3d84:	78 e0       	ldi	r23, 0x08	; 8
    3d86:	8d eb       	ldi	r24, 0xBD	; 189
    3d88:	98 e0       	ldi	r25, 0x08	; 8
    3d8a:	53 d0       	rcall	.+166    	; 0x3e32 <_ZN11TwiPcbServoC1ER18TwiServoControllerh>
TwiPcbServo ServoC8(PcaServoController, 14);
    3d8c:	4e e0       	ldi	r20, 0x0E	; 14
    3d8e:	65 ef       	ldi	r22, 0xF5	; 245
    3d90:	78 e0       	ldi	r23, 0x08	; 8
    3d92:	85 eb       	ldi	r24, 0xB5	; 181
    3d94:	98 e0       	ldi	r25, 0x08	; 8
    3d96:	4d d0       	rcall	.+154    	; 0x3e32 <_ZN11TwiPcbServoC1ER18TwiServoControllerh>

TwiPcbServo ServoD1(PcaServoController, 1);
    3d98:	41 e0       	ldi	r20, 0x01	; 1
    3d9a:	65 ef       	ldi	r22, 0xF5	; 245
    3d9c:	78 e0       	ldi	r23, 0x08	; 8
    3d9e:	8d ea       	ldi	r24, 0xAD	; 173
    3da0:	98 e0       	ldi	r25, 0x08	; 8
    3da2:	47 d0       	rcall	.+142    	; 0x3e32 <_ZN11TwiPcbServoC1ER18TwiServoControllerh>
TwiPcbServo ServoD2(PcaServoController, 3);
    3da4:	43 e0       	ldi	r20, 0x03	; 3
    3da6:	65 ef       	ldi	r22, 0xF5	; 245
    3da8:	78 e0       	ldi	r23, 0x08	; 8
    3daa:	85 ea       	ldi	r24, 0xA5	; 165
    3dac:	98 e0       	ldi	r25, 0x08	; 8
    3dae:	41 d0       	rcall	.+130    	; 0x3e32 <_ZN11TwiPcbServoC1ER18TwiServoControllerh>
TwiPcbServo ServoD3(PcaServoController, 6);
    3db0:	46 e0       	ldi	r20, 0x06	; 6
    3db2:	65 ef       	ldi	r22, 0xF5	; 245
    3db4:	78 e0       	ldi	r23, 0x08	; 8
    3db6:	8d e9       	ldi	r24, 0x9D	; 157
    3db8:	98 e0       	ldi	r25, 0x08	; 8
    3dba:	3b d0       	rcall	.+118    	; 0x3e32 <_ZN11TwiPcbServoC1ER18TwiServoControllerh>
TwiPcbServo ServoD4(PcaServoController, 4);
    3dbc:	44 e0       	ldi	r20, 0x04	; 4
    3dbe:	65 ef       	ldi	r22, 0xF5	; 245
    3dc0:	78 e0       	ldi	r23, 0x08	; 8
    3dc2:	85 e9       	ldi	r24, 0x95	; 149
    3dc4:	98 e0       	ldi	r25, 0x08	; 8
    3dc6:	35 d0       	rcall	.+106    	; 0x3e32 <_ZN11TwiPcbServoC1ER18TwiServoControllerh>
TwiPcbServo ServoD5(PcaServoController, 9);
    3dc8:	49 e0       	ldi	r20, 0x09	; 9
    3dca:	65 ef       	ldi	r22, 0xF5	; 245
    3dcc:	78 e0       	ldi	r23, 0x08	; 8
    3dce:	8d e8       	ldi	r24, 0x8D	; 141
    3dd0:	98 e0       	ldi	r25, 0x08	; 8
    3dd2:	2f d0       	rcall	.+94     	; 0x3e32 <_ZN11TwiPcbServoC1ER18TwiServoControllerh>
    3dd4:	4b e0       	ldi	r20, 0x0B	; 11
TwiPcbServo ServoD6(PcaServoController, 11);
    3dd6:	65 ef       	ldi	r22, 0xF5	; 245
    3dd8:	78 e0       	ldi	r23, 0x08	; 8
    3dda:	85 e8       	ldi	r24, 0x85	; 133
    3ddc:	98 e0       	ldi	r25, 0x08	; 8
    3dde:	29 d0       	rcall	.+82     	; 0x3e32 <_ZN11TwiPcbServoC1ER18TwiServoControllerh>
    3de0:	4d e0       	ldi	r20, 0x0D	; 13
    3de2:	65 ef       	ldi	r22, 0xF5	; 245
TwiPcbServo ServoD7(PcaServoController, 13);
    3de4:	78 e0       	ldi	r23, 0x08	; 8
    3de6:	8d e7       	ldi	r24, 0x7D	; 125
    3de8:	98 e0       	ldi	r25, 0x08	; 8
    3dea:	23 d0       	rcall	.+70     	; 0x3e32 <_ZN11TwiPcbServoC1ER18TwiServoControllerh>
    3dec:	4f e0       	ldi	r20, 0x0F	; 15
    3dee:	65 ef       	ldi	r22, 0xF5	; 245
    3df0:	78 e0       	ldi	r23, 0x08	; 8
    3df2:	85 e7       	ldi	r24, 0x75	; 117
    3df4:	98 e0       	ldi	r25, 0x08	; 8
    3df6:	1d c0       	rjmp	.+58     	; 0x3e32 <_ZN11TwiPcbServoC1ER18TwiServoControllerh>
    3df8:	08 95       	ret

00003dfa <_ZN11TwiPcbServo8setPulseEj>:
{
	
}

void TwiPcbServo::setPulse(uint16_t us){
	_lastPulse = us;
    3dfa:	fc 01       	movw	r30, r24
    3dfc:	77 83       	std	Z+7, r23	; 0x07
    3dfe:	66 83       	std	Z+6, r22	; 0x06
	if(_enabled) _controller->setPulse(_servo, us);
    3e00:	25 81       	ldd	r18, Z+5	; 0x05
    3e02:	22 23       	and	r18, r18
    3e04:	29 f0       	breq	.+10     	; 0x3e10 <_ZN11TwiPcbServo8setPulseEj+0x16>
    3e06:	ab 01       	movw	r20, r22
    3e08:	64 81       	ldd	r22, Z+4	; 0x04
    3e0a:	82 81       	ldd	r24, Z+2	; 0x02
    3e0c:	93 81       	ldd	r25, Z+3	; 0x03
    3e0e:	e3 ce       	rjmp	.-570    	; 0x3bd6 <_ZN18TwiServoController8setPulseEhj>
    3e10:	08 95       	ret

00003e12 <_ZN11TwiPcbServo6enableEb>:
}

void TwiPcbServo::enable(bool en /* = true */){
    3e12:	fc 01       	movw	r30, r24
	_enabled = en;
    3e14:	65 83       	std	Z+5, r22	; 0x05
	if(en) _controller->setPulse(_servo, _lastPulse);
    3e16:	66 23       	and	r22, r22
    3e18:	39 f0       	breq	.+14     	; 0x3e28 <_ZN11TwiPcbServo6enableEb+0x16>
    3e1a:	46 81       	ldd	r20, Z+6	; 0x06
    3e1c:	57 81       	ldd	r21, Z+7	; 0x07
    3e1e:	64 81       	ldd	r22, Z+4	; 0x04
    3e20:	82 81       	ldd	r24, Z+2	; 0x02
    3e22:	93 81       	ldd	r25, Z+3	; 0x03
    3e24:	d8 ce       	rjmp	.-592    	; 0x3bd6 <_ZN18TwiServoController8setPulseEhj>
    3e26:	08 95       	ret
	else _controller->release(_servo);
    3e28:	64 81       	ldd	r22, Z+4	; 0x04
    3e2a:	82 81       	ldd	r24, Z+2	; 0x02
    3e2c:	93 81       	ldd	r25, Z+3	; 0x03
    3e2e:	d7 ce       	rjmp	.-594    	; 0x3bde <_ZN18TwiServoController7releaseEh>
    3e30:	08 95       	ret

00003e32 <_ZN11TwiPcbServoC1ER18TwiServoControllerh>:
 *  Author: zcarey
 */ 

#include "TwiPcbServo.h"

TwiPcbServo::TwiPcbServo(TwiServoController &controller, uint8_t servo)
    3e32:	fc 01       	movw	r30, r24
	: PcbServo(), _controller(&controller), _servo(servo), _enabled(false), _lastPulse(1500)
    3e34:	8b e9       	ldi	r24, 0x9B	; 155
    3e36:	92 e0       	ldi	r25, 0x02	; 2
    3e38:	91 83       	std	Z+1, r25	; 0x01
    3e3a:	80 83       	st	Z, r24
    3e3c:	73 83       	std	Z+3, r23	; 0x03
    3e3e:	62 83       	std	Z+2, r22	; 0x02
    3e40:	44 83       	std	Z+4, r20	; 0x04
    3e42:	15 82       	std	Z+5, r1	; 0x05
    3e44:	8c ed       	ldi	r24, 0xDC	; 220
    3e46:	95 e0       	ldi	r25, 0x05	; 5
    3e48:	97 83       	std	Z+7, r25	; 0x07
    3e4a:	86 83       	std	Z+6, r24	; 0x06
    3e4c:	08 95       	ret

00003e4e <_ZN9IReadable15CommandReceivedEhPKhh>:
#include "EtherComm.h"

class IReadable : public IDevice {
public:
	void CommandReceived(uint8_t id, const uint8_t* data, uint8_t len){
		if(len == 0){
    3e4e:	21 11       	cpse	r18, r1
    3e50:	0d c0       	rjmp	.+26     	; 0x3e6c <_ZN9IReadable15CommandReceivedEhPKhh+0x1e>
			ReadRegisterRequested(id, EtherComm::buffer + 3);
    3e52:	40 91 00 02 	lds	r20, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    3e56:	50 91 01 02 	lds	r21, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    3e5a:	4d 5f       	subi	r20, 0xFD	; 253
    3e5c:	5f 4f       	sbci	r21, 0xFF	; 255
    3e5e:	dc 01       	movw	r26, r24
    3e60:	ed 91       	ld	r30, X+
    3e62:	fc 91       	ld	r31, X
    3e64:	06 80       	ldd	r0, Z+6	; 0x06
    3e66:	f7 81       	ldd	r31, Z+7	; 0x07
    3e68:	e0 2d       	mov	r30, r0
    3e6a:	19 95       	eicall
    3e6c:	08 95       	ret

00003e6e <_ZN13DigitalSensor6UpdateEPh>:
	
	bool begin(){ //override
		return rov.RegisterDevice(_id, this);
	}
	
	void Update(uint8_t* buffer) { //override
    3e6e:	08 95       	ret

00003e70 <_ZN9IWritable15CommandReceivedEhPKhh>:
#include "Commands.h"

class IWritable : public IDevice {
	public:
	inline void CommandReceived(uint8_t id, const uint8_t* data, uint8_t len){
		WriteRegisterRequested(id, data, len);
    3e70:	dc 01       	movw	r26, r24
    3e72:	ed 91       	ld	r30, X+
    3e74:	fc 91       	ld	r31, X
    3e76:	06 80       	ldd	r0, Z+6	; 0x06
    3e78:	f7 81       	ldd	r31, Z+7	; 0x07
    3e7a:	e0 2d       	mov	r30, r0
    3e7c:	19 95       	eicall
    3e7e:	08 95       	ret

00003e80 <_ZN15DigitalActuator6UpdateEPh>:
	
	bool begin(){ //override
		return rov.RegisterDevice(_id, this);
	}
	
	void Update(uint8_t* buffer){ //override
    3e80:	08 95       	ret

00003e82 <_ZN13ServoActuator6UpdateEPh>:
		
		_servo->setPulse(1500);
		return true;
	}
	
	void Update(uint8_t* buffer){
    3e82:	08 95       	ret

00003e84 <_ZN13DigitalSensor21ReadRegisterRequestedEhPh>:
	void ReadRegisterRequested(uint8_t id, uint8_t* buffer) { //override
		/*Serial.print("My id: ");
		Serial.print(_id);
		Serial.print("    Reg id: ");
		Serial.println(id);*/
		if(id == _id){
    3e84:	dc 01       	movw	r26, r24
    3e86:	12 96       	adiw	r26, 0x02	; 2
    3e88:	2c 91       	ld	r18, X
    3e8a:	12 97       	sbiw	r26, 0x02	; 2
    3e8c:	26 13       	cpse	r18, r22
    3e8e:	1a c0       	rjmp	.+52     	; 0x3ec4 <_ZN13DigitalSensor21ReadRegisterRequestedEhPh+0x40>
			buffer[0] = ((*_pinPort & _pin) > 0) ^ _inversed;
    3e90:	14 96       	adiw	r26, 0x04	; 4
    3e92:	ed 91       	ld	r30, X+
    3e94:	fc 91       	ld	r31, X
    3e96:	15 97       	sbiw	r26, 0x05	; 5
    3e98:	60 81       	ld	r22, Z
    3e9a:	13 96       	adiw	r26, 0x03	; 3
    3e9c:	3c 91       	ld	r19, X
    3e9e:	36 23       	and	r19, r22
    3ea0:	61 e0       	ldi	r22, 0x01	; 1
    3ea2:	09 f4       	brne	.+2      	; 0x3ea6 <_ZN13DigitalSensor21ReadRegisterRequestedEhPh+0x22>
    3ea4:	60 e0       	ldi	r22, 0x00	; 0
    3ea6:	fa 01       	movw	r30, r20
    3ea8:	dc 01       	movw	r26, r24
    3eaa:	16 96       	adiw	r26, 0x06	; 6
    3eac:	8c 91       	ld	r24, X
    3eae:	86 27       	eor	r24, r22
    3eb0:	80 83       	st	Z, r24
	virtual void CommandReceived(uint8_t id, const uint8_t* data, uint8_t len) = 0;
	virtual void Update(uint8_t* buffer) = 0;
	
protected:
	void inline SendCommand(uint8_t id, uint8_t len){
		EtherComm::buffer[2] = id;
    3eb2:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    3eb6:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    3eba:	22 83       	std	Z+2, r18	; 0x02
		EtherComm::SendCommand(CMD_UpdateDevice, len + 1);	
    3ebc:	62 e0       	ldi	r22, 0x02	; 2
    3ebe:	83 e0       	ldi	r24, 0x03	; 3
    3ec0:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <_ZN9EtherComm11SendCommandEhh>
    3ec4:	08 95       	ret

00003ec6 <_ZN15DigitalActuator22WriteRegisterRequestedEhPKhh>:
		
	}

protected:
	void WriteRegisterRequested(uint8_t id, const uint8_t* data, uint8_t len){ //override
		if((id == _id) && (len == 1)){
    3ec6:	dc 01       	movw	r26, r24
    3ec8:	12 96       	adiw	r26, 0x02	; 2
    3eca:	3c 91       	ld	r19, X
    3ecc:	36 13       	cpse	r19, r22
    3ece:	2b c0       	rjmp	.+86     	; 0x3f26 <_ZN15DigitalActuator22WriteRegisterRequestedEhPKhh+0x60>
    3ed0:	21 30       	cpi	r18, 0x01	; 1
    3ed2:	49 f5       	brne	.+82     	; 0x3f26 <_ZN15DigitalActuator22WriteRegisterRequestedEhPKhh+0x60>
			if((data[0] > 0) ^ _inversed) *_portPort |= _pin;
    3ed4:	fa 01       	movw	r30, r20
    3ed6:	40 81       	ld	r20, Z
    3ed8:	41 11       	cpse	r20, r1
    3eda:	01 c0       	rjmp	.+2      	; 0x3ede <_ZN15DigitalActuator22WriteRegisterRequestedEhPKhh+0x18>
    3edc:	20 e0       	ldi	r18, 0x00	; 0
    3ede:	dc 01       	movw	r26, r24
    3ee0:	16 96       	adiw	r26, 0x06	; 6
    3ee2:	4c 91       	ld	r20, X
    3ee4:	16 97       	sbiw	r26, 0x06	; 6
    3ee6:	24 17       	cp	r18, r20
    3ee8:	51 f0       	breq	.+20     	; 0x3efe <_ZN15DigitalActuator22WriteRegisterRequestedEhPKhh+0x38>
    3eea:	14 96       	adiw	r26, 0x04	; 4
    3eec:	ed 91       	ld	r30, X+
    3eee:	fc 91       	ld	r31, X
    3ef0:	15 97       	sbiw	r26, 0x05	; 5
    3ef2:	20 81       	ld	r18, Z
    3ef4:	13 96       	adiw	r26, 0x03	; 3
    3ef6:	8c 91       	ld	r24, X
    3ef8:	82 2b       	or	r24, r18
    3efa:	80 83       	st	Z, r24
    3efc:	0b c0       	rjmp	.+22     	; 0x3f14 <_ZN15DigitalActuator22WriteRegisterRequestedEhPKhh+0x4e>
			else *_portPort &= ~_pin;
    3efe:	dc 01       	movw	r26, r24
    3f00:	14 96       	adiw	r26, 0x04	; 4
    3f02:	ed 91       	ld	r30, X+
    3f04:	fc 91       	ld	r31, X
    3f06:	15 97       	sbiw	r26, 0x05	; 5
    3f08:	20 81       	ld	r18, Z
    3f0a:	13 96       	adiw	r26, 0x03	; 3
    3f0c:	8c 91       	ld	r24, X
    3f0e:	80 95       	com	r24
    3f10:	82 23       	and	r24, r18
    3f12:	80 83       	st	Z, r24
	}
	
	protected:
	virtual void WriteRegisterRequested(uint8_t id, const uint8_t* data, uint8_t len);
	void SendConfirmation(uint8_t id){
		EtherComm::buffer[2] = id;
    3f14:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    3f18:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    3f1c:	32 83       	std	Z+2, r19	; 0x02
		EtherComm::SendCommand(CMD_UpdateDevice, 1);
    3f1e:	61 e0       	ldi	r22, 0x01	; 1
    3f20:	83 e0       	ldi	r24, 0x03	; 3
    3f22:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <_ZN9EtherComm11SendCommandEhh>
    3f26:	08 95       	ret

00003f28 <_ZN13ServoActuator22WriteRegisterRequestedEhPKhh>:
		
	}
	
protected:
	void WriteRegisterRequested(uint8_t id, const uint8_t* data, uint8_t len){
    3f28:	cf 93       	push	r28
    3f2a:	df 93       	push	r29
    3f2c:	c6 2f       	mov	r28, r22
		if(id == _id){
    3f2e:	dc 01       	movw	r26, r24
    3f30:	12 96       	adiw	r26, 0x02	; 2
    3f32:	dc 91       	ld	r29, X
    3f34:	12 97       	sbiw	r26, 0x02	; 2
    3f36:	d6 13       	cpse	r29, r22
    3f38:	1a c0       	rjmp	.+52     	; 0x3f6e <_ZN13ServoActuator22WriteRegisterRequestedEhPKhh+0x46>
			if(len == 2){
    3f3a:	22 30       	cpi	r18, 0x02	; 2
    3f3c:	b1 f5       	brne	.+108    	; 0x3faa <_ZN13ServoActuator22WriteRegisterRequestedEhPKhh+0x82>
				_servo->setPulse(*((uint16_t*)data));
    3f3e:	14 96       	adiw	r26, 0x04	; 4
    3f40:	8d 91       	ld	r24, X+
    3f42:	9c 91       	ld	r25, X
    3f44:	15 97       	sbiw	r26, 0x05	; 5
    3f46:	fa 01       	movw	r30, r20
    3f48:	60 81       	ld	r22, Z
    3f4a:	71 81       	ldd	r23, Z+1	; 0x01
    3f4c:	dc 01       	movw	r26, r24
    3f4e:	ed 91       	ld	r30, X+
    3f50:	fc 91       	ld	r31, X
    3f52:	01 90       	ld	r0, Z+
    3f54:	f0 81       	ld	r31, Z
    3f56:	e0 2d       	mov	r30, r0
    3f58:	19 95       	eicall
	}
	
	protected:
	virtual void WriteRegisterRequested(uint8_t id, const uint8_t* data, uint8_t len);
	void SendConfirmation(uint8_t id){
		EtherComm::buffer[2] = id;
    3f5a:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    3f5e:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    3f62:	d2 83       	std	Z+2, r29	; 0x02
		EtherComm::SendCommand(CMD_UpdateDevice, 1);
    3f64:	61 e0       	ldi	r22, 0x01	; 1
    3f66:	83 e0       	ldi	r24, 0x03	; 3
    3f68:	0e 94 a0 0b 	call	0x1740	; 0x1740 <_ZN9EtherComm11SendCommandEhh>
    3f6c:	1e c0       	rjmp	.+60     	; 0x3faa <_ZN13ServoActuator22WriteRegisterRequestedEhPKhh+0x82>
				SendConfirmation(id);
			}
		} else if(id == _enId){
    3f6e:	fc 01       	movw	r30, r24
    3f70:	33 81       	ldd	r19, Z+3	; 0x03
    3f72:	63 13       	cpse	r22, r19
    3f74:	1a c0       	rjmp	.+52     	; 0x3faa <_ZN13ServoActuator22WriteRegisterRequestedEhPKhh+0x82>
			if(len == 1){
    3f76:	21 30       	cpi	r18, 0x01	; 1
    3f78:	c1 f4       	brne	.+48     	; 0x3faa <_ZN13ServoActuator22WriteRegisterRequestedEhPKhh+0x82>
				_servo->enable(data[0]);
    3f7a:	84 81       	ldd	r24, Z+4	; 0x04
    3f7c:	95 81       	ldd	r25, Z+5	; 0x05
    3f7e:	61 e0       	ldi	r22, 0x01	; 1
    3f80:	da 01       	movw	r26, r20
    3f82:	2c 91       	ld	r18, X
    3f84:	21 11       	cpse	r18, r1
    3f86:	01 c0       	rjmp	.+2      	; 0x3f8a <_ZN13ServoActuator22WriteRegisterRequestedEhPKhh+0x62>
    3f88:	60 e0       	ldi	r22, 0x00	; 0
    3f8a:	dc 01       	movw	r26, r24
    3f8c:	ed 91       	ld	r30, X+
    3f8e:	fc 91       	ld	r31, X
    3f90:	02 80       	ldd	r0, Z+2	; 0x02
    3f92:	f3 81       	ldd	r31, Z+3	; 0x03
    3f94:	e0 2d       	mov	r30, r0
    3f96:	19 95       	eicall
	}
	
	protected:
	virtual void WriteRegisterRequested(uint8_t id, const uint8_t* data, uint8_t len);
	void SendConfirmation(uint8_t id){
		EtherComm::buffer[2] = id;
    3f98:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    3f9c:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    3fa0:	c2 83       	std	Z+2, r28	; 0x02
		EtherComm::SendCommand(CMD_UpdateDevice, 1);
    3fa2:	61 e0       	ldi	r22, 0x01	; 1
    3fa4:	83 e0       	ldi	r24, 0x03	; 3
    3fa6:	0e 94 a0 0b 	call	0x1740	; 0x1740 <_ZN9EtherComm11SendCommandEhh>
				SendConfirmation(id);
			}
		}
	}
    3faa:	df 91       	pop	r29
    3fac:	cf 91       	pop	r28
    3fae:	08 95       	ret

00003fb0 <_ZN13ServoActuator5beginEv>:
		: _id(id), _enId(enId), _servo(&servo)
	{
			
	}
	
	bool begin(){
    3fb0:	cf 93       	push	r28
	return true;
}


bool Robot::RegisterDevice(uint8_t id, IDevice* device){
	if(registers[id] == NULL){
    3fb2:	dc 01       	movw	r26, r24
    3fb4:	12 96       	adiw	r26, 0x02	; 2
    3fb6:	2c 91       	ld	r18, X
    3fb8:	12 97       	sbiw	r26, 0x02	; 2
    3fba:	30 e0       	ldi	r19, 0x00	; 0
    3fbc:	f9 01       	movw	r30, r18
    3fbe:	ee 0f       	add	r30, r30
    3fc0:	ff 1f       	adc	r31, r31
    3fc2:	e2 57       	subi	r30, 0x72	; 114
    3fc4:	f6 4f       	sbci	r31, 0xF6	; 246
    3fc6:	40 81       	ld	r20, Z
    3fc8:	51 81       	ldd	r21, Z+1	; 0x01
    3fca:	45 2b       	or	r20, r21
    3fcc:	61 f5       	brne	.+88     	; 0x4026 <_ZN13ServoActuator5beginEv+0x76>
		//if(sensor.begin()){
		registers[id] = device; //TODO error handling
    3fce:	22 0f       	add	r18, r18
    3fd0:	33 1f       	adc	r19, r19
    3fd2:	f9 01       	movw	r30, r18
    3fd4:	e2 57       	subi	r30, 0x72	; 114
    3fd6:	f6 4f       	sbci	r31, 0xF6	; 246
    3fd8:	91 83       	std	Z+1, r25	; 0x01
    3fda:	80 83       	st	Z, r24
	return true;
}


bool Robot::RegisterDevice(uint8_t id, IDevice* device){
	if(registers[id] == NULL){
    3fdc:	13 96       	adiw	r26, 0x03	; 3
    3fde:	2c 91       	ld	r18, X
    3fe0:	30 e0       	ldi	r19, 0x00	; 0
    3fe2:	f9 01       	movw	r30, r18
    3fe4:	ee 0f       	add	r30, r30
    3fe6:	ff 1f       	adc	r31, r31
    3fe8:	e2 57       	subi	r30, 0x72	; 114
    3fea:	f6 4f       	sbci	r31, 0xF6	; 246
    3fec:	40 81       	ld	r20, Z
    3fee:	51 81       	ldd	r21, Z+1	; 0x01
    3ff0:	45 2b       	or	r20, r21
    3ff2:	49 f4       	brne	.+18     	; 0x4006 <_ZN13ServoActuator5beginEv+0x56>
		//if(sensor.begin()){
		registers[id] = device; //TODO error handling
    3ff4:	22 0f       	add	r18, r18
    3ff6:	33 1f       	adc	r19, r19
    3ff8:	f9 01       	movw	r30, r18
    3ffa:	e2 57       	subi	r30, 0x72	; 114
    3ffc:	f6 4f       	sbci	r31, 0xF6	; 246
    3ffe:	91 83       	std	Z+1, r25	; 0x01
    4000:	80 83       	st	Z, r24
		//}
		return true;
    4002:	c1 e0       	ldi	r28, 0x01	; 1
    4004:	01 c0       	rjmp	.+2      	; 0x4008 <_ZN13ServoActuator5beginEv+0x58>
	}else{
		//TODO id collisions
		return false;
    4006:	c0 e0       	ldi	r28, 0x00	; 0
		if(!rov.RegisterDevice(_id, this) || !rov.RegisterDevice(_enId, this)) return false;
    4008:	cc 23       	and	r28, r28
    400a:	71 f0       	breq	.+28     	; 0x4028 <_ZN13ServoActuator5beginEv+0x78>
    400c:	fc 01       	movw	r30, r24
		
		_servo->setPulse(1500);
    400e:	84 81       	ldd	r24, Z+4	; 0x04
    4010:	95 81       	ldd	r25, Z+5	; 0x05
    4012:	dc 01       	movw	r26, r24
    4014:	ed 91       	ld	r30, X+
    4016:	fc 91       	ld	r31, X
    4018:	01 90       	ld	r0, Z+
    401a:	f0 81       	ld	r31, Z
    401c:	e0 2d       	mov	r30, r0
    401e:	6c ed       	ldi	r22, 0xDC	; 220
    4020:	75 e0       	ldi	r23, 0x05	; 5
    4022:	19 95       	eicall
		return true;
    4024:	01 c0       	rjmp	.+2      	; 0x4028 <_ZN13ServoActuator5beginEv+0x78>
	{
			
	}
	
	bool begin(){
		if(!rov.RegisterDevice(_id, this) || !rov.RegisterDevice(_enId, this)) return false;
    4026:	c0 e0       	ldi	r28, 0x00	; 0
		
		_servo->setPulse(1500);
		return true;
	}
    4028:	8c 2f       	mov	r24, r28
    402a:	cf 91       	pop	r28
    402c:	08 95       	ret

0000402e <_ZN15DigitalActuator5beginEv>:
	return true;
}


bool Robot::RegisterDevice(uint8_t id, IDevice* device){
	if(registers[id] == NULL){
    402e:	fc 01       	movw	r30, r24
    4030:	22 81       	ldd	r18, Z+2	; 0x02
    4032:	30 e0       	ldi	r19, 0x00	; 0
    4034:	f9 01       	movw	r30, r18
    4036:	ee 0f       	add	r30, r30
    4038:	ff 1f       	adc	r31, r31
    403a:	e2 57       	subi	r30, 0x72	; 114
    403c:	f6 4f       	sbci	r31, 0xF6	; 246
    403e:	40 81       	ld	r20, Z
    4040:	51 81       	ldd	r21, Z+1	; 0x01
    4042:	45 2b       	or	r20, r21
    4044:	49 f4       	brne	.+18     	; 0x4058 <_ZN15DigitalActuator5beginEv+0x2a>
		//if(sensor.begin()){
		registers[id] = device; //TODO error handling
    4046:	22 0f       	add	r18, r18
    4048:	33 1f       	adc	r19, r19
    404a:	f9 01       	movw	r30, r18
    404c:	e2 57       	subi	r30, 0x72	; 114
    404e:	f6 4f       	sbci	r31, 0xF6	; 246
    4050:	91 83       	std	Z+1, r25	; 0x01
    4052:	80 83       	st	Z, r24
		//}
		return true;
    4054:	81 e0       	ldi	r24, 0x01	; 1
    4056:	08 95       	ret
	}else{
		//TODO id collisions
		return false;
    4058:	80 e0       	ldi	r24, 0x00	; 0
		DDRPort |= Pin;
	}
	
	bool begin(){ //override
		return rov.RegisterDevice(_id, this);
	}
    405a:	08 95       	ret

0000405c <_ZN13DigitalSensor5beginEv>:
	return true;
}


bool Robot::RegisterDevice(uint8_t id, IDevice* device){
	if(registers[id] == NULL){
    405c:	fc 01       	movw	r30, r24
    405e:	22 81       	ldd	r18, Z+2	; 0x02
    4060:	30 e0       	ldi	r19, 0x00	; 0
    4062:	f9 01       	movw	r30, r18
    4064:	ee 0f       	add	r30, r30
    4066:	ff 1f       	adc	r31, r31
    4068:	e2 57       	subi	r30, 0x72	; 114
    406a:	f6 4f       	sbci	r31, 0xF6	; 246
    406c:	40 81       	ld	r20, Z
    406e:	51 81       	ldd	r21, Z+1	; 0x01
    4070:	45 2b       	or	r20, r21
    4072:	49 f4       	brne	.+18     	; 0x4086 <_ZN13DigitalSensor5beginEv+0x2a>
		//if(sensor.begin()){
		registers[id] = device; //TODO error handling
    4074:	22 0f       	add	r18, r18
    4076:	33 1f       	adc	r19, r19
    4078:	f9 01       	movw	r30, r18
    407a:	e2 57       	subi	r30, 0x72	; 114
    407c:	f6 4f       	sbci	r31, 0xF6	; 246
    407e:	91 83       	std	Z+1, r25	; 0x01
    4080:	80 83       	st	Z, r24
		//}
		return true;
    4082:	81 e0       	ldi	r24, 0x01	; 1
    4084:	08 95       	ret
	}else{
		//TODO id collisions
		return false;
    4086:	80 e0       	ldi	r24, 0x00	; 0
		PortPort |= Pin; //Enable pullup
	}
	
	bool begin(){ //override
		return rov.RegisterDevice(_id, this);
	}
    4088:	08 95       	ret

0000408a <_ZN5Robot14RegisterDeviceEhP7IDevice>:
	return true;
}


bool Robot::RegisterDevice(uint8_t id, IDevice* device){
	if(registers[id] == NULL){
    408a:	90 e0       	ldi	r25, 0x00	; 0
    408c:	fc 01       	movw	r30, r24
    408e:	ee 0f       	add	r30, r30
    4090:	ff 1f       	adc	r31, r31
    4092:	e2 57       	subi	r30, 0x72	; 114
    4094:	f6 4f       	sbci	r31, 0xF6	; 246
    4096:	20 81       	ld	r18, Z
    4098:	31 81       	ldd	r19, Z+1	; 0x01
    409a:	23 2b       	or	r18, r19
    409c:	49 f4       	brne	.+18     	; 0x40b0 <_ZN5Robot14RegisterDeviceEhP7IDevice+0x26>
		//if(sensor.begin()){
		registers[id] = device; //TODO error handling
    409e:	88 0f       	add	r24, r24
    40a0:	99 1f       	adc	r25, r25
    40a2:	fc 01       	movw	r30, r24
    40a4:	e2 57       	subi	r30, 0x72	; 114
    40a6:	f6 4f       	sbci	r31, 0xF6	; 246
    40a8:	71 83       	std	Z+1, r23	; 0x01
    40aa:	60 83       	st	Z, r22
		//}
		return true;
    40ac:	81 e0       	ldi	r24, 0x01	; 1
    40ae:	08 95       	ret
	}else{
		//TODO id collisions
		return false;
    40b0:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    40b2:	08 95       	ret

000040b4 <_ZN5Robot15CommandReceivedEPKhh>:
	for(uint8_t i = 0; i < len; i++){
		Serial.print(' ');
		Serial.print(data[i], HEX);
	}
	Serial.println();*/
	if(len >= 1){
    40b4:	66 23       	and	r22, r22
    40b6:	d1 f0       	breq	.+52     	; 0x40ec <_ZN5Robot15CommandReceivedEPKhh+0x38>
		if(registers[data[0]] != NULL){
    40b8:	fc 01       	movw	r30, r24
    40ba:	30 81       	ld	r19, Z
    40bc:	e3 2f       	mov	r30, r19
    40be:	f0 e0       	ldi	r31, 0x00	; 0
    40c0:	ee 0f       	add	r30, r30
    40c2:	ff 1f       	adc	r31, r31
    40c4:	e2 57       	subi	r30, 0x72	; 114
    40c6:	f6 4f       	sbci	r31, 0xF6	; 246
    40c8:	a0 81       	ld	r26, Z
    40ca:	b1 81       	ldd	r27, Z+1	; 0x01
    40cc:	10 97       	sbiw	r26, 0x00	; 0
    40ce:	71 f0       	breq	.+28     	; 0x40ec <_ZN5Robot15CommandReceivedEPKhh+0x38>
    40d0:	26 2f       	mov	r18, r22
    40d2:	ac 01       	movw	r20, r24
			registers[data[0]]->CommandReceived(data[0], data + 1, len - 1);
    40d4:	21 50       	subi	r18, 0x01	; 1
    40d6:	4f 5f       	subi	r20, 0xFF	; 255
    40d8:	5f 4f       	sbci	r21, 0xFF	; 255
    40da:	ed 91       	ld	r30, X+
    40dc:	fc 91       	ld	r31, X
    40de:	11 97       	sbiw	r26, 0x01	; 1
    40e0:	02 80       	ldd	r0, Z+2	; 0x02
    40e2:	f3 81       	ldd	r31, Z+3	; 0x03
    40e4:	e0 2d       	mov	r30, r0
    40e6:	63 2f       	mov	r22, r19
    40e8:	cd 01       	movw	r24, r26
    40ea:	19 95       	eicall
    40ec:	08 95       	ret

000040ee <_GLOBAL__sub_I__ZN5Robot9registersE>:
#include "../IReadable.h"

class DigitalSensor : public IReadable {
public:
	DigitalSensor(const uint8_t ID, Register& DDRPort, Register& PortPort, Register& PinPort, uint8_t Pin, bool Inversed = true) 
		: _id(ID), _pin(Pin), _pinPort(&PinPort), _inversed(Inversed)
    40ee:	e7 e8       	ldi	r30, 0x87	; 135
    40f0:	f9 e0       	ldi	r31, 0x09	; 9
    40f2:	45 e7       	ldi	r20, 0x75	; 117
    40f4:	54 e0       	ldi	r21, 0x04	; 4
    40f6:	51 83       	std	Z+1, r21	; 0x01
    40f8:	40 83       	st	Z, r20
    40fa:	12 82       	std	Z+2, r1	; 0x02
    40fc:	81 e0       	ldi	r24, 0x01	; 1
    40fe:	83 83       	std	Z+3, r24	; 0x03
    4100:	2f e2       	ldi	r18, 0x2F	; 47
    4102:	30 e0       	ldi	r19, 0x00	; 0
    4104:	35 83       	std	Z+5, r19	; 0x05
    4106:	24 83       	std	Z+4, r18	; 0x04
    4108:	86 83       	std	Z+6, r24	; 0x06
	{
		DDRPort &= ~Pin; //Enable input
    410a:	80 98       	cbi	0x10, 0	; 16
		PortPort |= Pin; //Enable pullup
    410c:	88 9a       	sbi	0x11, 0	; 17
#include "../IReadable.h"

class DigitalSensor : public IReadable {
public:
	DigitalSensor(const uint8_t ID, Register& DDRPort, Register& PortPort, Register& PinPort, uint8_t Pin, bool Inversed = true) 
		: _id(ID), _pin(Pin), _pinPort(&PinPort), _inversed(Inversed)
    410e:	e0 e8       	ldi	r30, 0x80	; 128
    4110:	f9 e0       	ldi	r31, 0x09	; 9
    4112:	51 83       	std	Z+1, r21	; 0x01
    4114:	40 83       	st	Z, r20
    4116:	99 e0       	ldi	r25, 0x09	; 9
    4118:	92 83       	std	Z+2, r25	; 0x02
    411a:	92 e0       	ldi	r25, 0x02	; 2
    411c:	93 83       	std	Z+3, r25	; 0x03
    411e:	35 83       	std	Z+5, r19	; 0x05
    4120:	24 83       	std	Z+4, r18	; 0x04
    4122:	86 83       	std	Z+6, r24	; 0x06
	{
		DDRPort &= ~Pin; //Enable input
    4124:	81 98       	cbi	0x10, 1	; 16
		PortPort |= Pin; //Enable pullup
    4126:	89 9a       	sbi	0x11, 1	; 17

#include "../IWritable.h"
class DigitalActuator : public IWritable{
public:
	DigitalActuator(const uint8_t ID, Register& DDRPort, Register& PortPort, uint8_t Pin, bool Inversed = false)
		: _id(ID), _pin(Pin), _portPort(&PortPort), _inversed(Inversed)
    4128:	e9 e7       	ldi	r30, 0x79	; 121
    412a:	f9 e0       	ldi	r31, 0x09	; 9
    412c:	81 e8       	ldi	r24, 0x81	; 129
    412e:	94 e0       	ldi	r25, 0x04	; 4
    4130:	91 83       	std	Z+1, r25	; 0x01
    4132:	80 83       	st	Z, r24
    4134:	8a e0       	ldi	r24, 0x0A	; 10
    4136:	82 83       	std	Z+2, r24	; 0x02
    4138:	80 e8       	ldi	r24, 0x80	; 128
    413a:	83 83       	std	Z+3, r24	; 0x03
    413c:	85 e2       	ldi	r24, 0x25	; 37
    413e:	90 e0       	ldi	r25, 0x00	; 0
    4140:	95 83       	std	Z+5, r25	; 0x05
    4142:	84 83       	std	Z+4, r24	; 0x04
    4144:	16 82       	std	Z+6, r1	; 0x06
	{
		DDRPort |= Pin;
    4146:	27 9a       	sbi	0x04, 7	; 4
IDevice* Robot::registers[NUM_DEVICES];

DigitalSensor Button0(0, DDR_BTN0, PORT_BTN0, PIN_BTN0, MASK_BTN0);
DigitalSensor Button1(9, DDR_BTN1, PORT_BTN1, PIN_BTN1, MASK_BTN1);
DigitalActuator LED(10, DDR_LED, PORT_LED, MASK_LED);
ImuSensor Imu(1, 2);
    4148:	42 e0       	ldi	r20, 0x02	; 2
    414a:	61 e0       	ldi	r22, 0x01	; 1
    414c:	8a e6       	ldi	r24, 0x6A	; 106
    414e:	99 e0       	ldi	r25, 0x09	; 9
    4150:	53 d2       	rcall	.+1190   	; 0x45f8 <_ZN9ImuSensorC1Ehh>
PressureSensor Pressure(4, Timer0);
    4152:	4f ea       	ldi	r20, 0xAF	; 175
    4154:	57 e0       	ldi	r21, 0x07	; 7
    4156:	64 e0       	ldi	r22, 0x04	; 4
    4158:	8e e3       	ldi	r24, 0x3E	; 62
    415a:	99 e0       	ldi	r25, 0x09	; 9
    415c:	0a d3       	rcall	.+1556   	; 0x4772 <_ZN14PressureSensorC1EhR13HardwareTimer>
#include "../Micro/CpuFreq.h"

class ServoActuator : public IWritable{
public:
	ServoActuator(const uint8_t id, const uint8_t enId, PcbServo &servo)
		: _id(id), _enId(enId), _servo(&servo)
    415e:	e8 e3       	ldi	r30, 0x38	; 56
    4160:	f9 e0       	ldi	r31, 0x09	; 9
    4162:	8d e8       	ldi	r24, 0x8D	; 141
    4164:	94 e0       	ldi	r25, 0x04	; 4
    4166:	91 83       	std	Z+1, r25	; 0x01
    4168:	80 83       	st	Z, r24
    416a:	25 e0       	ldi	r18, 0x05	; 5
    416c:	22 83       	std	Z+2, r18	; 0x02
    416e:	26 e0       	ldi	r18, 0x06	; 6
    4170:	23 83       	std	Z+3, r18	; 0x03
    4172:	2d e2       	ldi	r18, 0x2D	; 45
    4174:	39 e0       	ldi	r19, 0x09	; 9
    4176:	35 83       	std	Z+5, r19	; 0x05
    4178:	24 83       	std	Z+4, r18	; 0x04
    417a:	e2 e3       	ldi	r30, 0x32	; 50
    417c:	f9 e0       	ldi	r31, 0x09	; 9
    417e:	91 83       	std	Z+1, r25	; 0x01
    4180:	80 83       	st	Z, r24
    4182:	87 e0       	ldi	r24, 0x07	; 7
    4184:	82 83       	std	Z+2, r24	; 0x02
    4186:	88 e0       	ldi	r24, 0x08	; 8
    4188:	83 83       	std	Z+3, r24	; 0x03
    418a:	8d ee       	ldi	r24, 0xED	; 237
    418c:	98 e0       	ldi	r25, 0x08	; 8
    418e:	95 83       	std	Z+5, r25	; 0x05
    4190:	84 83       	std	Z+4, r24	; 0x04
    4192:	08 95       	ret

00004194 <_ZN5Robot5beginEv>:
ServoActuator TestServo(5, 6, ServoA1);
ServoActuator TestServo2(7, 8, ServoC1);

bool Robot::begin(){
    4194:	0f 93       	push	r16
    4196:	cf 93       	push	r28
    4198:	df 93       	push	r29
    419a:	ee e8       	ldi	r30, 0x8E	; 142
    419c:	f9 e0       	ldi	r31, 0x09	; 9
    419e:	8e e8       	ldi	r24, 0x8E	; 142
    41a0:	9b e0       	ldi	r25, 0x0B	; 11
	for(uint16_t i = 0; i < NUM_DEVICES; i++){
		registers[i] = NULL;
    41a2:	11 92       	st	Z+, r1
    41a4:	11 92       	st	Z+, r1
PressureSensor Pressure(4, Timer0);
ServoActuator TestServo(5, 6, ServoA1);
ServoActuator TestServo2(7, 8, ServoC1);

bool Robot::begin(){
	for(uint16_t i = 0; i < NUM_DEVICES; i++){
    41a6:	e8 17       	cp	r30, r24
    41a8:	f9 07       	cpc	r31, r25
    41aa:	d9 f7       	brne	.-10     	; 0x41a2 <_ZN5Robot5beginEv+0xe>
		registers[i] = NULL;
	}
	
	if(!EtherComm::begin(6001, 6002, DDR_ENC, PORT_ENC, MASK_ENC_CS)){
    41ac:	01 e0       	ldi	r16, 0x01	; 1
    41ae:	28 e0       	ldi	r18, 0x08	; 8
    41b0:	31 e0       	ldi	r19, 0x01	; 1
    41b2:	47 e0       	ldi	r20, 0x07	; 7
    41b4:	51 e0       	ldi	r21, 0x01	; 1
    41b6:	62 e7       	ldi	r22, 0x72	; 114
    41b8:	77 e1       	ldi	r23, 0x17	; 23
    41ba:	81 e7       	ldi	r24, 0x71	; 113
    41bc:	97 e1       	ldi	r25, 0x17	; 23
    41be:	0e 94 77 0b 	call	0x16ee	; 0x16ee <_ZN9EtherComm5beginEjjRVhS1_h>
    41c2:	c8 2f       	mov	r28, r24
    41c4:	81 11       	cpse	r24, r1
    41c6:	06 c0       	rjmp	.+12     	; 0x41d4 <_ZN5Robot5beginEv+0x40>
		Serial.println("Failed to access Ethernet controller.");
    41c8:	6f e9       	ldi	r22, 0x9F	; 159
    41ca:	72 e0       	ldi	r23, 0x02	; 2
    41cc:	8b e4       	ldi	r24, 0x4B	; 75
    41ce:	97 e0       	ldi	r25, 0x07	; 7
    41d0:	3c d3       	rcall	.+1656   	; 0x484a <_ZN5Print7printlnEPKc>
		return false;
    41d2:	3e c1       	rjmp	.+636    	; 0x4450 <_ZN5Robot5beginEv+0x2bc>
	}
	Serial.println("Connected to controller.");
    41d4:	65 ec       	ldi	r22, 0xC5	; 197
    41d6:	72 e0       	ldi	r23, 0x02	; 2
    41d8:	8b e4       	ldi	r24, 0x4B	; 75
    41da:	97 e0       	ldi	r25, 0x07	; 7
    41dc:	36 d3       	rcall	.+1644   	; 0x484a <_ZN5Print7printlnEPKc>
	
	Servo1.begin();
    41de:	80 e9       	ldi	r24, 0x90	; 144
    41e0:	97 e0       	ldi	r25, 0x07	; 7
    41e2:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <_ZN13HardwareServo5beginEv>
	Servo3.begin();
    41e6:	8d e7       	ldi	r24, 0x7D	; 125
    41e8:	97 e0       	ldi	r25, 0x07	; 7
    41ea:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <_ZN13HardwareServo5beginEv>
	Servo4.begin();
    41ee:	8a e6       	ldi	r24, 0x6A	; 106
    41f0:	97 e0       	ldi	r25, 0x07	; 7
    41f2:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <_ZN13HardwareServo5beginEv>
	Servo5.begin();
    41f6:	87 e5       	ldi	r24, 0x57	; 87
    41f8:	97 e0       	ldi	r25, 0x07	; 7
    41fa:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <_ZN13HardwareServo5beginEv>
	Serial.println("Servos initialized.");
    41fe:	6e ed       	ldi	r22, 0xDE	; 222
    4200:	72 e0       	ldi	r23, 0x02	; 2
    4202:	8b e4       	ldi	r24, 0x4B	; 75
    4204:	97 e0       	ldi	r25, 0x07	; 7
    4206:	21 d3       	rcall	.+1602   	; 0x484a <_ZN5Print7printlnEPKc>
	
	if(!PcaServoController.begin()){
    4208:	85 ef       	ldi	r24, 0xF5	; 245
    420a:	98 e0       	ldi	r25, 0x08	; 8
    420c:	c0 dc       	rcall	.-1664   	; 0x3b8e <_ZN18TwiServoController5beginEv>
    420e:	c8 2f       	mov	r28, r24
    4210:	81 11       	cpse	r24, r1
    4212:	06 c0       	rjmp	.+12     	; 0x4220 <_ZN5Robot5beginEv+0x8c>
    4214:	62 ef       	ldi	r22, 0xF2	; 242
		Serial.println("Unable to initialize Twi Servo Controller.");
    4216:	72 e0       	ldi	r23, 0x02	; 2
    4218:	8b e4       	ldi	r24, 0x4B	; 75
    421a:	97 e0       	ldi	r25, 0x07	; 7
    421c:	16 d3       	rcall	.+1580   	; 0x484a <_ZN5Print7printlnEPKc>
    421e:	18 c1       	rjmp	.+560    	; 0x4450 <_ZN5Robot5beginEv+0x2bc>
		return false;
	}
	Serial.println("Initialized Twi Servo Controller.");
    4220:	6d e1       	ldi	r22, 0x1D	; 29
    4222:	73 e0       	ldi	r23, 0x03	; 3
    4224:	8b e4       	ldi	r24, 0x4B	; 75
    4226:	97 e0       	ldi	r25, 0x07	; 7
    4228:	10 d3       	rcall	.+1568   	; 0x484a <_ZN5Print7printlnEPKc>
    422a:	80 91 89 09 	lds	r24, 0x0989	; 0x800989 <Button0+0x2>
	return true;
}


bool Robot::RegisterDevice(uint8_t id, IDevice* device){
	if(registers[id] == NULL){
    422e:	90 e0       	ldi	r25, 0x00	; 0
    4230:	fc 01       	movw	r30, r24
    4232:	ee 0f       	add	r30, r30
    4234:	ff 1f       	adc	r31, r31
    4236:	e2 57       	subi	r30, 0x72	; 114
    4238:	f6 4f       	sbci	r31, 0xF6	; 246
    423a:	20 81       	ld	r18, Z
    423c:	31 81       	ldd	r19, Z+1	; 0x01
    423e:	23 2b       	or	r18, r19
    4240:	09 f0       	breq	.+2      	; 0x4244 <_ZN5Robot5beginEv+0xb0>
    4242:	f2 c0       	rjmp	.+484    	; 0x4428 <_ZN5Robot5beginEv+0x294>
    4244:	88 0f       	add	r24, r24
		//if(sensor.begin()){
		registers[id] = device; //TODO error handling
    4246:	99 1f       	adc	r25, r25
    4248:	fc 01       	movw	r30, r24
    424a:	e2 57       	subi	r30, 0x72	; 114
    424c:	f6 4f       	sbci	r31, 0xF6	; 246
    424e:	87 e8       	ldi	r24, 0x87	; 135
    4250:	99 e0       	ldi	r25, 0x09	; 9
    4252:	91 83       	std	Z+1, r25	; 0x01
    4254:	80 83       	st	Z, r24
	//LedDDR |= LedPin;
	if(!Button0.begin()){
		Serial.println("Unable to initialize Button0.");
		return false;
	}
	Serial.println("Initialized Button0.");
    4256:	6f e3       	ldi	r22, 0x3F	; 63
    4258:	73 e0       	ldi	r23, 0x03	; 3
    425a:	8b e4       	ldi	r24, 0x4B	; 75
    425c:	97 e0       	ldi	r25, 0x07	; 7
    425e:	f5 d2       	rcall	.+1514   	; 0x484a <_ZN5Print7printlnEPKc>
    4260:	80 91 82 09 	lds	r24, 0x0982	; 0x800982 <Button1+0x2>
	return true;
}


bool Robot::RegisterDevice(uint8_t id, IDevice* device){
	if(registers[id] == NULL){
    4264:	90 e0       	ldi	r25, 0x00	; 0
    4266:	fc 01       	movw	r30, r24
    4268:	ee 0f       	add	r30, r30
    426a:	ff 1f       	adc	r31, r31
    426c:	e2 57       	subi	r30, 0x72	; 114
    426e:	f6 4f       	sbci	r31, 0xF6	; 246
    4270:	20 81       	ld	r18, Z
    4272:	31 81       	ldd	r19, Z+1	; 0x01
    4274:	23 2b       	or	r18, r19
    4276:	09 f0       	breq	.+2      	; 0x427a <_ZN5Robot5beginEv+0xe6>
    4278:	de c0       	rjmp	.+444    	; 0x4436 <_ZN5Robot5beginEv+0x2a2>
    427a:	88 0f       	add	r24, r24
		//if(sensor.begin()){
		registers[id] = device; //TODO error handling
    427c:	99 1f       	adc	r25, r25
    427e:	fc 01       	movw	r30, r24
    4280:	e2 57       	subi	r30, 0x72	; 114
    4282:	f6 4f       	sbci	r31, 0xF6	; 246
    4284:	80 e8       	ldi	r24, 0x80	; 128
    4286:	99 e0       	ldi	r25, 0x09	; 9
    4288:	91 83       	std	Z+1, r25	; 0x01
    428a:	80 83       	st	Z, r24
	
	if(!Button1.begin()){
		Serial.println("Unable to initialize Button1.");
		return false;
	}
	Serial.println("Initialized Button1.");
    428c:	64 e5       	ldi	r22, 0x54	; 84
    428e:	73 e0       	ldi	r23, 0x03	; 3
    4290:	8b e4       	ldi	r24, 0x4B	; 75
    4292:	97 e0       	ldi	r25, 0x07	; 7
    4294:	da d2       	rcall	.+1460   	; 0x484a <_ZN5Print7printlnEPKc>
    4296:	80 91 7b 09 	lds	r24, 0x097B	; 0x80097b <LED+0x2>
	return true;
}


bool Robot::RegisterDevice(uint8_t id, IDevice* device){
	if(registers[id] == NULL){
    429a:	90 e0       	ldi	r25, 0x00	; 0
    429c:	fc 01       	movw	r30, r24
    429e:	ee 0f       	add	r30, r30
    42a0:	ff 1f       	adc	r31, r31
    42a2:	e2 57       	subi	r30, 0x72	; 114
    42a4:	f6 4f       	sbci	r31, 0xF6	; 246
    42a6:	20 81       	ld	r18, Z
    42a8:	31 81       	ldd	r19, Z+1	; 0x01
    42aa:	23 2b       	or	r18, r19
    42ac:	09 f0       	breq	.+2      	; 0x42b0 <_ZN5Robot5beginEv+0x11c>
    42ae:	ca c0       	rjmp	.+404    	; 0x4444 <_ZN5Robot5beginEv+0x2b0>
    42b0:	88 0f       	add	r24, r24
		//if(sensor.begin()){
		registers[id] = device; //TODO error handling
    42b2:	99 1f       	adc	r25, r25
    42b4:	fc 01       	movw	r30, r24
    42b6:	e2 57       	subi	r30, 0x72	; 114
    42b8:	f6 4f       	sbci	r31, 0xF6	; 246
    42ba:	89 e7       	ldi	r24, 0x79	; 121
    42bc:	99 e0       	ldi	r25, 0x09	; 9
    42be:	91 83       	std	Z+1, r25	; 0x01
    42c0:	80 83       	st	Z, r24
	
	if(!LED.begin()){
		Serial.println("Unable to initialize LED.");
		return false;
	}
	Serial.println("Initialized LED.");
    42c2:	69 e6       	ldi	r22, 0x69	; 105
    42c4:	73 e0       	ldi	r23, 0x03	; 3
    42c6:	8b e4       	ldi	r24, 0x4B	; 75
    42c8:	97 e0       	ldi	r25, 0x07	; 7
    42ca:	bf d2       	rcall	.+1406   	; 0x484a <_ZN5Print7printlnEPKc>
    42cc:	8a e6       	ldi	r24, 0x6A	; 106
	
	if(!Imu.begin()){
    42ce:	99 e0       	ldi	r25, 0x09	; 9
    42d0:	dc d0       	rcall	.+440    	; 0x448a <_ZN9ImuSensor5beginEv>
    42d2:	c8 2f       	mov	r28, r24
    42d4:	81 11       	cpse	r24, r1
    42d6:	06 c0       	rjmp	.+12     	; 0x42e4 <_ZN5Robot5beginEv+0x150>
    42d8:	6a e7       	ldi	r22, 0x7A	; 122
		Serial.println("Unable to initialize IMU.");
    42da:	73 e0       	ldi	r23, 0x03	; 3
    42dc:	8b e4       	ldi	r24, 0x4B	; 75
    42de:	97 e0       	ldi	r25, 0x07	; 7
    42e0:	b4 d2       	rcall	.+1384   	; 0x484a <_ZN5Print7printlnEPKc>
		return false;
    42e2:	b6 c0       	rjmp	.+364    	; 0x4450 <_ZN5Robot5beginEv+0x2bc>
	}
	Serial.println("Initialized IMU");
    42e4:	64 e9       	ldi	r22, 0x94	; 148
    42e6:	73 e0       	ldi	r23, 0x03	; 3
    42e8:	8b e4       	ldi	r24, 0x4B	; 75
    42ea:	97 e0       	ldi	r25, 0x07	; 7
    42ec:	ae d2       	rcall	.+1372   	; 0x484a <_ZN5Print7printlnEPKc>
	
	if(!Pressure.begin()){ 
    42ee:	8e e3       	ldi	r24, 0x3E	; 62
    42f0:	99 e0       	ldi	r25, 0x09	; 9
    42f2:	ab d1       	rcall	.+854    	; 0x464a <_ZN14PressureSensor5beginEv>
    42f4:	c8 2f       	mov	r28, r24
    42f6:	81 11       	cpse	r24, r1
    42f8:	06 c0       	rjmp	.+12     	; 0x4306 <_ZN5Robot5beginEv+0x172>
		Serial.println("Unable to initialize Pressure Sensor.");
    42fa:	64 ea       	ldi	r22, 0xA4	; 164
    42fc:	73 e0       	ldi	r23, 0x03	; 3
    42fe:	8b e4       	ldi	r24, 0x4B	; 75
    4300:	97 e0       	ldi	r25, 0x07	; 7
    4302:	a3 d2       	rcall	.+1350   	; 0x484a <_ZN5Print7printlnEPKc>
    4304:	a5 c0       	rjmp	.+330    	; 0x4450 <_ZN5Robot5beginEv+0x2bc>
		return false;
    4306:	6a ec       	ldi	r22, 0xCA	; 202
	} 
	Serial.println("Initialized pressure sensor.");
    4308:	73 e0       	ldi	r23, 0x03	; 3
    430a:	8b e4       	ldi	r24, 0x4B	; 75
    430c:	97 e0       	ldi	r25, 0x07	; 7
    430e:	9d d2       	rcall	.+1338   	; 0x484a <_ZN5Print7printlnEPKc>
    4310:	80 91 3a 09 	lds	r24, 0x093A	; 0x80093a <TestServo+0x2>
	return true;
}


bool Robot::RegisterDevice(uint8_t id, IDevice* device){
	if(registers[id] == NULL){
    4314:	90 e0       	ldi	r25, 0x00	; 0
    4316:	fc 01       	movw	r30, r24
    4318:	ee 0f       	add	r30, r30
    431a:	ff 1f       	adc	r31, r31
    431c:	e2 57       	subi	r30, 0x72	; 114
    431e:	f6 4f       	sbci	r31, 0xF6	; 246
    4320:	20 81       	ld	r18, Z
    4322:	31 81       	ldd	r19, Z+1	; 0x01
    4324:	23 2b       	or	r18, r19
    4326:	09 f0       	breq	.+2      	; 0x432a <_ZN5Robot5beginEv+0x196>
    4328:	6f c0       	rjmp	.+222    	; 0x4408 <_ZN5Robot5beginEv+0x274>
    432a:	88 0f       	add	r24, r24
    432c:	99 1f       	adc	r25, r25
		//if(sensor.begin()){
		registers[id] = device; //TODO error handling
    432e:	fc 01       	movw	r30, r24
    4330:	e2 57       	subi	r30, 0x72	; 114
    4332:	f6 4f       	sbci	r31, 0xF6	; 246
    4334:	a8 e3       	ldi	r26, 0x38	; 56
    4336:	b9 e0       	ldi	r27, 0x09	; 9
    4338:	b1 83       	std	Z+1, r27	; 0x01
    433a:	a0 83       	st	Z, r26
    433c:	13 96       	adiw	r26, 0x03	; 3
    433e:	8c 91       	ld	r24, X
	return true;
}


bool Robot::RegisterDevice(uint8_t id, IDevice* device){
	if(registers[id] == NULL){
    4340:	13 97       	sbiw	r26, 0x03	; 3
    4342:	90 e0       	ldi	r25, 0x00	; 0
    4344:	fc 01       	movw	r30, r24
    4346:	ee 0f       	add	r30, r30
    4348:	ff 1f       	adc	r31, r31
    434a:	e2 57       	subi	r30, 0x72	; 114
    434c:	f6 4f       	sbci	r31, 0xF6	; 246
    434e:	20 81       	ld	r18, Z
    4350:	31 81       	ldd	r19, Z+1	; 0x01
    4352:	23 2b       	or	r18, r19
    4354:	49 f4       	brne	.+18     	; 0x4368 <_ZN5Robot5beginEv+0x1d4>
    4356:	88 0f       	add	r24, r24
    4358:	99 1f       	adc	r25, r25
		//if(sensor.begin()){
		registers[id] = device; //TODO error handling
    435a:	fc 01       	movw	r30, r24
    435c:	e2 57       	subi	r30, 0x72	; 114
    435e:	f6 4f       	sbci	r31, 0xF6	; 246
    4360:	b1 83       	std	Z+1, r27	; 0x01
    4362:	a0 83       	st	Z, r26
    4364:	dc 2f       	mov	r29, r28
    4366:	01 c0       	rjmp	.+2      	; 0x436a <_ZN5Robot5beginEv+0x1d6>
		//}
		return true;
    4368:	d0 e0       	ldi	r29, 0x00	; 0
    436a:	dd 23       	and	r29, r29
	}else{
		//TODO id collisions
		return false;
    436c:	09 f4       	brne	.+2      	; 0x4370 <_ZN5Robot5beginEv+0x1dc>
	{
			
	}
	
	bool begin(){
		if(!rov.RegisterDevice(_id, this) || !rov.RegisterDevice(_enId, this)) return false;
    436e:	4f c0       	rjmp	.+158    	; 0x440e <_ZN5Robot5beginEv+0x27a>
    4370:	80 91 3c 09 	lds	r24, 0x093C	; 0x80093c <TestServo+0x4>
		
		_servo->setPulse(1500);
    4374:	90 91 3d 09 	lds	r25, 0x093D	; 0x80093d <TestServo+0x5>
    4378:	dc 01       	movw	r26, r24
    437a:	ed 91       	ld	r30, X+
    437c:	fc 91       	ld	r31, X
    437e:	01 90       	ld	r0, Z+
    4380:	f0 81       	ld	r31, Z
    4382:	e0 2d       	mov	r30, r0
    4384:	6c ed       	ldi	r22, 0xDC	; 220
    4386:	75 e0       	ldi	r23, 0x05	; 5
    4388:	19 95       	eicall
    438a:	80 91 34 09 	lds	r24, 0x0934	; 0x800934 <TestServo2+0x2>
	return true;
}


bool Robot::RegisterDevice(uint8_t id, IDevice* device){
	if(registers[id] == NULL){
    438e:	90 e0       	ldi	r25, 0x00	; 0
    4390:	fc 01       	movw	r30, r24
    4392:	ee 0f       	add	r30, r30
    4394:	ff 1f       	adc	r31, r31
    4396:	e2 57       	subi	r30, 0x72	; 114
    4398:	f6 4f       	sbci	r31, 0xF6	; 246
    439a:	20 81       	ld	r18, Z
    439c:	31 81       	ldd	r19, Z+1	; 0x01
    439e:	23 2b       	or	r18, r19
    43a0:	79 f5       	brne	.+94     	; 0x4400 <_ZN5Robot5beginEv+0x26c>
    43a2:	88 0f       	add	r24, r24
    43a4:	99 1f       	adc	r25, r25
		//if(sensor.begin()){
		registers[id] = device; //TODO error handling
    43a6:	fc 01       	movw	r30, r24
    43a8:	e2 57       	subi	r30, 0x72	; 114
    43aa:	f6 4f       	sbci	r31, 0xF6	; 246
    43ac:	a2 e3       	ldi	r26, 0x32	; 50
    43ae:	b9 e0       	ldi	r27, 0x09	; 9
    43b0:	b1 83       	std	Z+1, r27	; 0x01
    43b2:	a0 83       	st	Z, r26
    43b4:	13 96       	adiw	r26, 0x03	; 3
    43b6:	8c 91       	ld	r24, X
	return true;
}


bool Robot::RegisterDevice(uint8_t id, IDevice* device){
	if(registers[id] == NULL){
    43b8:	13 97       	sbiw	r26, 0x03	; 3
    43ba:	90 e0       	ldi	r25, 0x00	; 0
    43bc:	fc 01       	movw	r30, r24
    43be:	ee 0f       	add	r30, r30
    43c0:	ff 1f       	adc	r31, r31
    43c2:	e2 57       	subi	r30, 0x72	; 114
    43c4:	f6 4f       	sbci	r31, 0xF6	; 246
    43c6:	20 81       	ld	r18, Z
    43c8:	31 81       	ldd	r19, Z+1	; 0x01
    43ca:	23 2b       	or	r18, r19
    43cc:	41 f4       	brne	.+16     	; 0x43de <_ZN5Robot5beginEv+0x24a>
    43ce:	88 0f       	add	r24, r24
    43d0:	99 1f       	adc	r25, r25
		//if(sensor.begin()){
		registers[id] = device; //TODO error handling
    43d2:	fc 01       	movw	r30, r24
    43d4:	e2 57       	subi	r30, 0x72	; 114
    43d6:	f6 4f       	sbci	r31, 0xF6	; 246
    43d8:	b1 83       	std	Z+1, r27	; 0x01
    43da:	a0 83       	st	Z, r26
    43dc:	01 c0       	rjmp	.+2      	; 0x43e0 <_ZN5Robot5beginEv+0x24c>
    43de:	d0 e0       	ldi	r29, 0x00	; 0
    43e0:	dd 23       	and	r29, r29
		//}
		return true;
	}else{
		//TODO id collisions
		return false;
    43e2:	79 f0       	breq	.+30     	; 0x4402 <_ZN5Robot5beginEv+0x26e>
	{
			
	}
	
	bool begin(){
		if(!rov.RegisterDevice(_id, this) || !rov.RegisterDevice(_enId, this)) return false;
    43e4:	80 91 36 09 	lds	r24, 0x0936	; 0x800936 <TestServo2+0x4>
		
		_servo->setPulse(1500);
    43e8:	90 91 37 09 	lds	r25, 0x0937	; 0x800937 <TestServo2+0x5>
    43ec:	dc 01       	movw	r26, r24
    43ee:	ed 91       	ld	r30, X+
    43f0:	fc 91       	ld	r31, X
    43f2:	01 90       	ld	r0, Z+
    43f4:	f0 81       	ld	r31, Z
    43f6:	e0 2d       	mov	r30, r0
    43f8:	6c ed       	ldi	r22, 0xDC	; 220
    43fa:	75 e0       	ldi	r23, 0x05	; 5
    43fc:	19 95       	eicall
    43fe:	01 c0       	rjmp	.+2      	; 0x4402 <_ZN5Robot5beginEv+0x26e>
    4400:	d0 e0       	ldi	r29, 0x00	; 0
	{
			
	}
	
	bool begin(){
		if(!rov.RegisterDevice(_id, this) || !rov.RegisterDevice(_enId, this)) return false;
    4402:	81 e0       	ldi	r24, 0x01	; 1
		Serial.println("Unable to initialize Pressure Sensor.");
		return false;
	} 
	Serial.println("Initialized pressure sensor.");
	
	if(!TestServo.begin() || !TestServo2.begin()){
    4404:	d8 27       	eor	r29, r24
    4406:	01 c0       	rjmp	.+2      	; 0x440a <_ZN5Robot5beginEv+0x276>
    4408:	dc 2f       	mov	r29, r28
    440a:	dd 23       	and	r29, r29
    440c:	39 f0       	breq	.+14     	; 0x441c <_ZN5Robot5beginEv+0x288>
		Serial.println("Unable to initialize Servo.");
    440e:	67 ee       	ldi	r22, 0xE7	; 231
    4410:	73 e0       	ldi	r23, 0x03	; 3
    4412:	8b e4       	ldi	r24, 0x4B	; 75
    4414:	97 e0       	ldi	r25, 0x07	; 7
    4416:	19 d2       	rcall	.+1074   	; 0x484a <_ZN5Print7printlnEPKc>
		return false;
    4418:	c0 e0       	ldi	r28, 0x00	; 0
    441a:	1a c0       	rjmp	.+52     	; 0x4450 <_ZN5Robot5beginEv+0x2bc>
	}
	Serial.println("Initialized test servo.");
    441c:	63 e0       	ldi	r22, 0x03	; 3
    441e:	74 e0       	ldi	r23, 0x04	; 4
    4420:	8b e4       	ldi	r24, 0x4B	; 75
    4422:	97 e0       	ldi	r25, 0x07	; 7
    4424:	12 d2       	rcall	.+1060   	; 0x484a <_ZN5Print7printlnEPKc>
	
	return true;
    4426:	14 c0       	rjmp	.+40     	; 0x4450 <_ZN5Robot5beginEv+0x2bc>
		return false;
	}
	*/
	//LedDDR |= LedPin;
	if(!Button0.begin()){
		Serial.println("Unable to initialize Button0.");
    4428:	6b e1       	ldi	r22, 0x1B	; 27
    442a:	74 e0       	ldi	r23, 0x04	; 4
    442c:	8b e4       	ldi	r24, 0x4B	; 75
    442e:	97 e0       	ldi	r25, 0x07	; 7
    4430:	0c d2       	rcall	.+1048   	; 0x484a <_ZN5Print7printlnEPKc>
		return false;
    4432:	c0 e0       	ldi	r28, 0x00	; 0
    4434:	0d c0       	rjmp	.+26     	; 0x4450 <_ZN5Robot5beginEv+0x2bc>
	}
	Serial.println("Initialized Button0.");
	
	if(!Button1.begin()){
		Serial.println("Unable to initialize Button1.");
    4436:	69 e3       	ldi	r22, 0x39	; 57
    4438:	74 e0       	ldi	r23, 0x04	; 4
    443a:	8b e4       	ldi	r24, 0x4B	; 75
    443c:	97 e0       	ldi	r25, 0x07	; 7
    443e:	05 d2       	rcall	.+1034   	; 0x484a <_ZN5Print7printlnEPKc>
    4440:	c0 e0       	ldi	r28, 0x00	; 0
		return false;
    4442:	06 c0       	rjmp	.+12     	; 0x4450 <_ZN5Robot5beginEv+0x2bc>
    4444:	67 e5       	ldi	r22, 0x57	; 87
	}
	Serial.println("Initialized Button1.");
	
	if(!LED.begin()){
		Serial.println("Unable to initialize LED.");
    4446:	74 e0       	ldi	r23, 0x04	; 4
    4448:	8b e4       	ldi	r24, 0x4B	; 75
    444a:	97 e0       	ldi	r25, 0x07	; 7
    444c:	fe d1       	rcall	.+1020   	; 0x484a <_ZN5Print7printlnEPKc>
    444e:	c0 e0       	ldi	r28, 0x00	; 0
    4450:	8c 2f       	mov	r24, r28
		return false;
    4452:	df 91       	pop	r29
		return false;
	}
	Serial.println("Initialized test servo.");
	
	return true;
}
    4454:	cf 91       	pop	r28
    4456:	0f 91       	pop	r16
    4458:	08 95       	ret

0000445a <_ZN5Robot4LoopEv>:
    445a:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <_ZN8ENC28J6013packetReceiveEv>
	static bool begin(uint16_t recvPort, uint16_t destPort, Register& csDDR, Register& csPort, uint8_t csPin);
	
	friend void udpReceive(uint16_t dest_port, uint8_t src_ip[IP_LEN], uint16_t src_port, const char *data, uint16_t len);

	static void Loop(){
		ether.packetLoop(ether.packetReceive());
    445e:	0e 94 68 09 	call	0x12d0	; 0x12d0 <_ZN9EtherCard10packetLoopEj>
	return !((TestBtnPinPort & TestBtnPin) > 0);
}*/

void Robot::Loop(){
	EtherComm::Loop();
	Imu.Update(EtherComm::buffer + 3);
    4462:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    4466:	70 91 01 02 	lds	r23, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    446a:	6d 5f       	subi	r22, 0xFD	; 253
    446c:	7f 4f       	sbci	r23, 0xFF	; 255
    446e:	8a e6       	ldi	r24, 0x6A	; 106
    4470:	99 e0       	ldi	r25, 0x09	; 9
    4472:	0a d0       	rcall	.+20     	; 0x4488 <_ZN9ImuSensor6UpdateEPh>
	Pressure.Update(EtherComm::buffer + 3);
    4474:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    4478:	70 91 01 02 	lds	r23, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    447c:	6d 5f       	subi	r22, 0xFD	; 253
    447e:	7f 4f       	sbci	r23, 0xFF	; 255
    4480:	8e e3       	ldi	r24, 0x3E	; 62
    4482:	99 e0       	ldi	r25, 0x09	; 9
    4484:	0b c1       	rjmp	.+534    	; 0x469c <_ZN14PressureSensor6UpdateEPh>
    4486:	08 95       	ret

00004488 <_ZN9ImuSensor6UpdateEPh>:
		rov.RegisterDevice(tempId, this)
		&& rov.RegisterDevice(accelId, this)
		&& imu.begin();
}

void ImuSensor::Update(uint8_t* buffer){
    4488:	08 95       	ret

0000448a <_ZN9ImuSensor5beginEv>:

ImuSensor::ImuSensor(const uint8_t TempId, const uint8_t AccelId) : imu(55, 0x28), tempId(TempId), accelId(AccelId) {
	
}

bool ImuSensor::begin(){
    448a:	cf 93       	push	r28
    448c:	df 93       	push	r29
    448e:	ec 01       	movw	r28, r24
	return 
		rov.RegisterDevice(tempId, this)
    4490:	bc 01       	movw	r22, r24
    4492:	8d 85       	ldd	r24, Y+13	; 0x0d
    4494:	fa dd       	rcall	.-1036   	; 0x408a <_ZN5Robot14RegisterDeviceEhP7IDevice>
		&& rov.RegisterDevice(accelId, this)
		&& imu.begin();
    4496:	88 23       	and	r24, r24
    4498:	51 f0       	breq	.+20     	; 0x44ae <_ZN9ImuSensor5beginEv+0x24>
}

bool ImuSensor::begin(){
	return 
		rov.RegisterDevice(tempId, this)
		&& rov.RegisterDevice(accelId, this)
    449a:	be 01       	movw	r22, r28
    449c:	8e 85       	ldd	r24, Y+14	; 0x0e
    449e:	f5 dd       	rcall	.-1046   	; 0x408a <_ZN5Robot14RegisterDeviceEhP7IDevice>
    44a0:	88 23       	and	r24, r24
    44a2:	29 f0       	breq	.+10     	; 0x44ae <_ZN9ImuSensor5beginEv+0x24>
		&& imu.begin();
    44a4:	6c e0       	ldi	r22, 0x0C	; 12
    44a6:	ce 01       	movw	r24, r28
    44a8:	02 96       	adiw	r24, 0x02	; 2
    44aa:	0e 94 39 02 	call	0x472	; 0x472 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>
}
    44ae:	df 91       	pop	r29
    44b0:	cf 91       	pop	r28
    44b2:	08 95       	ret

000044b4 <_ZN9ImuSensor21ReadRegisterRequestedEhPh>:
	*buffer++ = *val++;
}

AdafruitImu::Vector<3> vector;

void ImuSensor::ReadRegisterRequested(uint8_t id, uint8_t* buffer){
    44b4:	ef 92       	push	r14
    44b6:	ff 92       	push	r15
    44b8:	0f 93       	push	r16
    44ba:	1f 93       	push	r17
    44bc:	cf 93       	push	r28
    44be:	df 93       	push	r29
    44c0:	cd b7       	in	r28, 0x3d	; 61
    44c2:	de b7       	in	r29, 0x3e	; 62
    44c4:	68 97       	sbiw	r28, 0x18	; 24
    44c6:	0f b6       	in	r0, 0x3f	; 63
    44c8:	f8 94       	cli
    44ca:	de bf       	out	0x3e, r29	; 62
    44cc:	0f be       	out	0x3f, r0	; 63
    44ce:	cd bf       	out	0x3d, r28	; 61
    44d0:	f6 2e       	mov	r15, r22
    44d2:	8a 01       	movw	r16, r20
	if(id == tempId){
    44d4:	dc 01       	movw	r26, r24
    44d6:	1d 96       	adiw	r26, 0x0d	; 13
    44d8:	ec 90       	ld	r14, X
    44da:	e6 12       	cpse	r14, r22
    44dc:	0f c0       	rjmp	.+30     	; 0x44fc <_ZN9ImuSensor21ReadRegisterRequestedEhPh+0x48>
		buffer[0] = imu.getTemp();
    44de:	02 96       	adiw	r24, 0x02	; 2
    44e0:	0e 94 a6 02 	call	0x54c	; 0x54c <_ZN15Adafruit_BNO0557getTempEv>
    44e4:	f8 01       	movw	r30, r16
    44e6:	80 83       	st	Z, r24
	virtual void CommandReceived(uint8_t id, const uint8_t* data, uint8_t len) = 0;
	virtual void Update(uint8_t* buffer) = 0;
	
protected:
	void inline SendCommand(uint8_t id, uint8_t len){
		EtherComm::buffer[2] = id;
    44e8:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    44ec:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    44f0:	e2 82       	std	Z+2, r14	; 0x02
		EtherComm::SendCommand(CMD_UpdateDevice, len + 1);	
    44f2:	62 e0       	ldi	r22, 0x02	; 2
    44f4:	83 e0       	ldi	r24, 0x03	; 3
    44f6:	0e 94 a0 0b 	call	0x1740	; 0x1740 <_ZN9EtherComm11SendCommandEhh>
    44fa:	71 c0       	rjmp	.+226    	; 0x45de <_ZN9ImuSensor21ReadRegisterRequestedEhPh+0x12a>
		SendCommand(id, 1);
	}else if(id == accelId){
    44fc:	dc 01       	movw	r26, r24
    44fe:	1e 96       	adiw	r26, 0x0e	; 14
    4500:	2c 91       	ld	r18, X
    4502:	62 13       	cpse	r22, r18
    4504:	6c c0       	rjmp	.+216    	; 0x45de <_ZN9ImuSensor21ReadRegisterRequestedEhPh+0x12a>
		vector = imu.getVector(Adafruit_BNO055::VECTOR_ACCELEROMETER );
    4506:	bc 01       	movw	r22, r24
    4508:	6e 5f       	subi	r22, 0xFE	; 254
    450a:	7f 4f       	sbci	r23, 0xFF	; 255
    450c:	48 e0       	ldi	r20, 0x08	; 8
    450e:	ce 01       	movw	r24, r28
    4510:	01 96       	adiw	r24, 0x01	; 1
    4512:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
    4516:	fe 01       	movw	r30, r28
    4518:	31 96       	adiw	r30, 0x01	; 1
    451a:	ae e8       	ldi	r26, 0x8E	; 142
    451c:	bb e0       	ldi	r27, 0x0B	; 11
    451e:	ce 01       	movw	r24, r28
    4520:	0d 96       	adiw	r24, 0x0d	; 13
		}

		Vector& operator=(const Vector& v)
		{
			for (int x = 0; x < N; x++ )
			p_vec[x] = v.p_vec[x];
    4522:	41 91       	ld	r20, Z+
    4524:	51 91       	ld	r21, Z+
    4526:	61 91       	ld	r22, Z+
    4528:	71 91       	ld	r23, Z+
    452a:	4d 93       	st	X+, r20
    452c:	5d 93       	st	X+, r21
    452e:	6d 93       	st	X+, r22
    4530:	7d 93       	st	X+, r23
			return ret;
		}

		Vector& operator=(const Vector& v)
		{
			for (int x = 0; x < N; x++ )
    4532:	e8 17       	cp	r30, r24
    4534:	f9 07       	cpc	r31, r25
    4536:	a9 f7       	brne	.-22     	; 0x4522 <_ZN9ImuSensor21ReadRegisterRequestedEhPh+0x6e>
		saveFloat(vector.x(), buffer + 0);
    4538:	ee e8       	ldi	r30, 0x8E	; 142
    453a:	fb e0       	ldi	r31, 0x0B	; 11
    453c:	20 81       	ld	r18, Z
    453e:	51 81       	ldd	r21, Z+1	; 0x01
    4540:	42 81       	ldd	r20, Z+2	; 0x02
    4542:	33 81       	ldd	r19, Z+3	; 0x03
    4544:	82 2f       	mov	r24, r18
    4546:	95 2f       	mov	r25, r21
    4548:	a4 2f       	mov	r26, r20
    454a:	b3 2f       	mov	r27, r19
    454c:	8d 87       	std	Y+13, r24	; 0x0d
    454e:	9e 87       	std	Y+14, r25	; 0x0e
    4550:	af 87       	std	Y+15, r26	; 0x0f
    4552:	b8 8b       	std	Y+16, r27	; 0x10
	
}

static void saveFloat(float f, uint8_t* buffer){ //TODO put in IRegister? Used in PressureSensor too
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    4554:	d8 01       	movw	r26, r16
    4556:	2c 93       	st	X, r18
	*buffer++ = *val++;
    4558:	8e 85       	ldd	r24, Y+14	; 0x0e
    455a:	11 96       	adiw	r26, 0x01	; 1
    455c:	8c 93       	st	X, r24
    455e:	11 97       	sbiw	r26, 0x01	; 1
	*buffer++ = *val++;
    4560:	8f 85       	ldd	r24, Y+15	; 0x0f
    4562:	12 96       	adiw	r26, 0x02	; 2
    4564:	8c 93       	st	X, r24
    4566:	12 97       	sbiw	r26, 0x02	; 2
	*buffer++ = *val++;
    4568:	88 89       	ldd	r24, Y+16	; 0x10
    456a:	13 96       	adiw	r26, 0x03	; 3
    456c:	8c 93       	st	X, r24
    456e:	24 81       	ldd	r18, Z+4	; 0x04
    4570:	55 81       	ldd	r21, Z+5	; 0x05
    4572:	46 81       	ldd	r20, Z+6	; 0x06
    4574:	37 81       	ldd	r19, Z+7	; 0x07
    4576:	82 2f       	mov	r24, r18
    4578:	95 2f       	mov	r25, r21
    457a:	a4 2f       	mov	r26, r20
    457c:	b3 2f       	mov	r27, r19
    457e:	89 8b       	std	Y+17, r24	; 0x11
    4580:	9a 8b       	std	Y+18, r25	; 0x12
    4582:	ab 8b       	std	Y+19, r26	; 0x13
    4584:	bc 8b       	std	Y+20, r27	; 0x14
	
}

static void saveFloat(float f, uint8_t* buffer){ //TODO put in IRegister? Used in PressureSensor too
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    4586:	d8 01       	movw	r26, r16
    4588:	14 96       	adiw	r26, 0x04	; 4
    458a:	2c 93       	st	X, r18
    458c:	14 97       	sbiw	r26, 0x04	; 4
	*buffer++ = *val++;
    458e:	8a 89       	ldd	r24, Y+18	; 0x12
    4590:	15 96       	adiw	r26, 0x05	; 5
    4592:	8c 93       	st	X, r24
    4594:	15 97       	sbiw	r26, 0x05	; 5
	*buffer++ = *val++;
    4596:	8b 89       	ldd	r24, Y+19	; 0x13
    4598:	16 96       	adiw	r26, 0x06	; 6
    459a:	8c 93       	st	X, r24
    459c:	16 97       	sbiw	r26, 0x06	; 6
	*buffer++ = *val++;
    459e:	8c 89       	ldd	r24, Y+20	; 0x14
    45a0:	17 96       	adiw	r26, 0x07	; 7
    45a2:	8c 93       	st	X, r24
    45a4:	20 85       	ldd	r18, Z+8	; 0x08
    45a6:	51 85       	ldd	r21, Z+9	; 0x09
    45a8:	42 85       	ldd	r20, Z+10	; 0x0a
    45aa:	33 85       	ldd	r19, Z+11	; 0x0b
    45ac:	82 2f       	mov	r24, r18
    45ae:	95 2f       	mov	r25, r21
    45b0:	a4 2f       	mov	r26, r20
    45b2:	b3 2f       	mov	r27, r19
    45b4:	8d 8b       	std	Y+21, r24	; 0x15
    45b6:	9e 8b       	std	Y+22, r25	; 0x16
    45b8:	af 8b       	std	Y+23, r26	; 0x17
    45ba:	b8 8f       	std	Y+24, r27	; 0x18
	
}

static void saveFloat(float f, uint8_t* buffer){ //TODO put in IRegister? Used in PressureSensor too
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    45bc:	f8 01       	movw	r30, r16
    45be:	20 87       	std	Z+8, r18	; 0x08
	*buffer++ = *val++;
    45c0:	8e 89       	ldd	r24, Y+22	; 0x16
    45c2:	81 87       	std	Z+9, r24	; 0x09
	*buffer++ = *val++;
    45c4:	8f 89       	ldd	r24, Y+23	; 0x17
    45c6:	82 87       	std	Z+10, r24	; 0x0a
	*buffer++ = *val++;
    45c8:	88 8d       	ldd	r24, Y+24	; 0x18
    45ca:	83 87       	std	Z+11, r24	; 0x0b
	virtual void CommandReceived(uint8_t id, const uint8_t* data, uint8_t len) = 0;
	virtual void Update(uint8_t* buffer) = 0;
	
protected:
	void inline SendCommand(uint8_t id, uint8_t len){
		EtherComm::buffer[2] = id;
    45cc:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    45d0:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    45d4:	f2 82       	std	Z+2, r15	; 0x02
		EtherComm::SendCommand(CMD_UpdateDevice, len + 1);	
    45d6:	6d e0       	ldi	r22, 0x0D	; 13
    45d8:	83 e0       	ldi	r24, 0x03	; 3
    45da:	0e 94 a0 0b 	call	0x1740	; 0x1740 <_ZN9EtherComm11SendCommandEhh>
	saveFloat(vector.x(), buffer + 14);
	saveFloat(vector.y(), buffer + 18);
	saveFloat(vector.z(), buffer + 22);
	
	return 1 + 1 + 6*4;*/
    45de:	68 96       	adiw	r28, 0x18	; 24
    45e0:	0f b6       	in	r0, 0x3f	; 63
    45e2:	f8 94       	cli
    45e4:	de bf       	out	0x3e, r29	; 62
    45e6:	0f be       	out	0x3f, r0	; 63
    45e8:	cd bf       	out	0x3d, r28	; 61
    45ea:	df 91       	pop	r29
    45ec:	cf 91       	pop	r28
    45ee:	1f 91       	pop	r17
    45f0:	0f 91       	pop	r16
    45f2:	ff 90       	pop	r15
    45f4:	ef 90       	pop	r14
    45f6:	08 95       	ret

000045f8 <_ZN9ImuSensorC1Ehh>:
#define ID_TEMP 1
#define ID_ACCEL 2
//#include "../BNO055/utility/vector.h"
//Adafruit_BNO055 ImuSensor::imu;

ImuSensor::ImuSensor(const uint8_t TempId, const uint8_t AccelId) : imu(55, 0x28), tempId(TempId), accelId(AccelId) {
    45f8:	ef 92       	push	r14
    45fa:	ff 92       	push	r15
    45fc:	0f 93       	push	r16
    45fe:	1f 93       	push	r17
    4600:	cf 93       	push	r28
    4602:	df 93       	push	r29
    4604:	ec 01       	movw	r28, r24
    4606:	e6 2e       	mov	r14, r22
    4608:	f4 2e       	mov	r15, r20
    460a:	29 e9       	ldi	r18, 0x99	; 153
    460c:	34 e0       	ldi	r19, 0x04	; 4
    460e:	fc 01       	movw	r30, r24
    4610:	21 93       	st	Z+, r18
    4612:	31 93       	st	Z+, r19
    4614:	cf 01       	movw	r24, r30
    4616:	09 e2       	ldi	r16, 0x29	; 41
    4618:	18 e0       	ldi	r17, 0x08	; 8
    461a:	28 e2       	ldi	r18, 0x28	; 40
    461c:	47 e3       	ldi	r20, 0x37	; 55
    461e:	50 e0       	ldi	r21, 0x00	; 0
    4620:	60 e0       	ldi	r22, 0x00	; 0
    4622:	70 e0       	ldi	r23, 0x00	; 0
    4624:	0e 94 c4 01 	call	0x388	; 0x388 <_ZN15Adafruit_BNO055C1ElhP7TwoWire>
    4628:	ed 86       	std	Y+13, r14	; 0x0d
    462a:	fe 86       	std	Y+14, r15	; 0x0e
	
}
    462c:	df 91       	pop	r29
    462e:	cf 91       	pop	r28
    4630:	1f 91       	pop	r17
    4632:	0f 91       	pop	r16
    4634:	ff 90       	pop	r15
    4636:	ef 90       	pop	r14
    4638:	08 95       	ret

0000463a <_GLOBAL__sub_I__ZN9ImuSensorC2Ehh>:
	template <uint8_t N> class Vector
	{
		public:
		Vector()
		{
			memset(p_vec, 0, sizeof(double)*N);
    463a:	8c e0       	ldi	r24, 0x0C	; 12
    463c:	ee e8       	ldi	r30, 0x8E	; 142
    463e:	fb e0       	ldi	r31, 0x0B	; 11
    4640:	df 01       	movw	r26, r30
    4642:	1d 92       	st	X+, r1
    4644:	8a 95       	dec	r24
    4646:	e9 f7       	brne	.-6      	; 0x4642 <_GLOBAL__sub_I__ZN9ImuSensorC2Ehh+0x8>
    4648:	08 95       	ret

0000464a <_ZN14PressureSensor5beginEv>:

PressureSensor::PressureSensor(const uint8_t id, HardwareTimer &timer) : sensor(timer), _id(id) {
	
}

bool PressureSensor::begin(){
    464a:	1f 93       	push	r17
    464c:	cf 93       	push	r28
    464e:	df 93       	push	r29
    4650:	ec 01       	movw	r28, r24
	if(!rov.RegisterDevice(_id, this)) return false;
    4652:	bc 01       	movw	r22, r24
    4654:	8a a5       	ldd	r24, Y+42	; 0x2a
    4656:	19 dd       	rcall	.-1486   	; 0x408a <_ZN5Robot14RegisterDeviceEhP7IDevice>
    4658:	18 2f       	mov	r17, r24
    465a:	88 23       	and	r24, r24
    465c:	61 f0       	breq	.+24     	; 0x4676 <_ZN14PressureSensor5beginEv+0x2c>
	if(sensor.begin()){
    465e:	22 96       	adiw	r28, 0x02	; 2
    4660:	ce 01       	movw	r24, r28
    4662:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <_ZN6MS58375beginEv>
    4666:	18 2f       	mov	r17, r24
    4668:	88 23       	and	r24, r24
    466a:	29 f0       	breq	.+10     	; 0x4676 <_ZN14PressureSensor5beginEv+0x2c>
		sensor.setModel(MS5837::MS5837_30BA);
    466c:	60 91 8e 02 	lds	r22, 0x028E	; 0x80028e <_ZN6MS583711MS5837_30BAE>
    4670:	ce 01       	movw	r24, r28
    4672:	0e 94 2f 13 	call	0x265e	; 0x265e <_ZN6MS58378setModelEh>
		//sensor.setFluidDensity(997); //Freshwater
		return true;
	}
	
	return false;
}
    4676:	81 2f       	mov	r24, r17
    4678:	df 91       	pop	r29
    467a:	cf 91       	pop	r28
    467c:	1f 91       	pop	r17
    467e:	08 95       	ret

00004680 <_ZN14PressureSensor21ReadRegisterRequestedEhPh>:
			reading = false;
		}
	}
}

void PressureSensor::ReadRegisterRequested(uint8_t id, uint8_t* buffer){
    4680:	cf 93       	push	r28
    4682:	df 93       	push	r29
	if(!reading){
    4684:	fc 01       	movw	r30, r24
    4686:	23 a5       	ldd	r18, Z+43	; 0x2b
    4688:	21 11       	cpse	r18, r1
    468a:	05 c0       	rjmp	.+10     	; 0x4696 <_ZN14PressureSensor21ReadRegisterRequestedEhPh+0x16>
    468c:	ec 01       	movw	r28, r24
		reading = sensor.startRead();
    468e:	02 96       	adiw	r24, 0x02	; 2
    4690:	0e 94 32 13 	call	0x2664	; 0x2664 <_ZN6MS58379startReadEv>
    4694:	8b a7       	std	Y+43, r24	; 0x2b
	}
    4696:	df 91       	pop	r29
    4698:	cf 91       	pop	r28
    469a:	08 95       	ret

0000469c <_ZN14PressureSensor6UpdateEPh>:
	*buffer++ = *val++;
	*buffer++ = *val++;
	*buffer++ = *val++;
}

void PressureSensor::Update(uint8_t* buffer){
    469c:	cf 92       	push	r12
    469e:	df 92       	push	r13
    46a0:	ef 92       	push	r14
    46a2:	ff 92       	push	r15
    46a4:	0f 93       	push	r16
    46a6:	1f 93       	push	r17
    46a8:	cf 93       	push	r28
    46aa:	df 93       	push	r29
    46ac:	cd b7       	in	r28, 0x3d	; 61
    46ae:	de b7       	in	r29, 0x3e	; 62
    46b0:	28 97       	sbiw	r28, 0x08	; 8
    46b2:	0f b6       	in	r0, 0x3f	; 63
    46b4:	f8 94       	cli
    46b6:	de bf       	out	0x3e, r29	; 62
    46b8:	0f be       	out	0x3f, r0	; 63
    46ba:	cd bf       	out	0x3d, r28	; 61
	if(reading){
    46bc:	fc 01       	movw	r30, r24
    46be:	23 a5       	ldd	r18, Z+43	; 0x2b
    46c0:	22 23       	and	r18, r18
    46c2:	09 f4       	brne	.+2      	; 0x46c6 <_ZN14PressureSensor6UpdateEPh+0x2a>
    46c4:	47 c0       	rjmp	.+142    	; 0x4754 <_ZN14PressureSensor6UpdateEPh+0xb8>
    46c6:	7b 01       	movw	r14, r22
    46c8:	8c 01       	movw	r16, r24
		sensor.update();
    46ca:	6c 01       	movw	r12, r24
    46cc:	f2 e0       	ldi	r31, 0x02	; 2
    46ce:	cf 0e       	add	r12, r31
    46d0:	d1 1c       	adc	r13, r1
    46d2:	c6 01       	movw	r24, r12
    46d4:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <_ZN6MS58376updateEv>
		if(sensor.finished()){
    46d8:	c6 01       	movw	r24, r12
    46da:	0e 94 58 13 	call	0x26b0	; 0x26b0 <_ZN6MS58378finishedEv>
    46de:	88 23       	and	r24, r24
    46e0:	c9 f1       	breq	.+114    	; 0x4754 <_ZN14PressureSensor6UpdateEPh+0xb8>
			saveFloat(sensor.pressure(), buffer);
    46e2:	40 e0       	ldi	r20, 0x00	; 0
    46e4:	50 e0       	ldi	r21, 0x00	; 0
    46e6:	60 e8       	ldi	r22, 0x80	; 128
    46e8:	7f e3       	ldi	r23, 0x3F	; 63
    46ea:	c6 01       	movw	r24, r12
    46ec:	0e 94 04 1a 	call	0x3408	; 0x3408 <_ZN6MS58378pressureEf>
    46f0:	26 2f       	mov	r18, r22
    46f2:	46 2f       	mov	r20, r22
    46f4:	57 2f       	mov	r21, r23
    46f6:	68 2f       	mov	r22, r24
    46f8:	79 2f       	mov	r23, r25
    46fa:	49 83       	std	Y+1, r20	; 0x01
    46fc:	5a 83       	std	Y+2, r21	; 0x02
    46fe:	6b 83       	std	Y+3, r22	; 0x03
    4700:	7c 83       	std	Y+4, r23	; 0x04
	return false;
}

static void saveFloat(float f, uint8_t* buffer){ //TODO put in IRegister? Used in IMU too
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    4702:	f7 01       	movw	r30, r14
    4704:	20 83       	st	Z, r18
	*buffer++ = *val++;
    4706:	8a 81       	ldd	r24, Y+2	; 0x02
    4708:	81 83       	std	Z+1, r24	; 0x01
	*buffer++ = *val++;
    470a:	8b 81       	ldd	r24, Y+3	; 0x03
    470c:	82 83       	std	Z+2, r24	; 0x02
	*buffer++ = *val++;
    470e:	8c 81       	ldd	r24, Y+4	; 0x04
    4710:	83 83       	std	Z+3, r24	; 0x03
void PressureSensor::Update(uint8_t* buffer){
	if(reading){
		sensor.update();
		if(sensor.finished()){
			saveFloat(sensor.pressure(), buffer);
			saveFloat(sensor.temperature(), buffer + 4);
    4712:	c6 01       	movw	r24, r12
    4714:	0e 94 35 1a 	call	0x346a	; 0x346a <_ZN6MS583711temperatureEv>
    4718:	26 2f       	mov	r18, r22
    471a:	46 2f       	mov	r20, r22
    471c:	57 2f       	mov	r21, r23
    471e:	68 2f       	mov	r22, r24
    4720:	79 2f       	mov	r23, r25
    4722:	4d 83       	std	Y+5, r20	; 0x05
    4724:	5e 83       	std	Y+6, r21	; 0x06
    4726:	6f 83       	std	Y+7, r22	; 0x07
    4728:	78 87       	std	Y+8, r23	; 0x08
	return false;
}

static void saveFloat(float f, uint8_t* buffer){ //TODO put in IRegister? Used in IMU too
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    472a:	f7 01       	movw	r30, r14
    472c:	24 83       	std	Z+4, r18	; 0x04
	*buffer++ = *val++;
    472e:	8e 81       	ldd	r24, Y+6	; 0x06
    4730:	85 83       	std	Z+5, r24	; 0x05
	*buffer++ = *val++;
    4732:	8f 81       	ldd	r24, Y+7	; 0x07
    4734:	86 83       	std	Z+6, r24	; 0x06
	*buffer++ = *val++;
    4736:	88 85       	ldd	r24, Y+8	; 0x08
    4738:	87 83       	std	Z+7, r24	; 0x07
	if(reading){
		sensor.update();
		if(sensor.finished()){
			saveFloat(sensor.pressure(), buffer);
			saveFloat(sensor.temperature(), buffer + 4);
			SendCommand(_id, 8);
    473a:	f8 01       	movw	r30, r16
    473c:	82 a5       	ldd	r24, Z+42	; 0x2a
	virtual void CommandReceived(uint8_t id, const uint8_t* data, uint8_t len) = 0;
	virtual void Update(uint8_t* buffer) = 0;
	
protected:
	void inline SendCommand(uint8_t id, uint8_t len){
		EtherComm::buffer[2] = id;
    473e:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    4742:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    4746:	82 83       	std	Z+2, r24	; 0x02
		EtherComm::SendCommand(CMD_UpdateDevice, len + 1);	
    4748:	69 e0       	ldi	r22, 0x09	; 9
    474a:	83 e0       	ldi	r24, 0x03	; 3
    474c:	0e 94 a0 0b 	call	0x1740	; 0x1740 <_ZN9EtherComm11SendCommandEhh>
			reading = false;
    4750:	f8 01       	movw	r30, r16
    4752:	13 a6       	std	Z+43, r1	; 0x2b
		}
	}
}
    4754:	28 96       	adiw	r28, 0x08	; 8
    4756:	0f b6       	in	r0, 0x3f	; 63
    4758:	f8 94       	cli
    475a:	de bf       	out	0x3e, r29	; 62
    475c:	0f be       	out	0x3f, r0	; 63
    475e:	cd bf       	out	0x3d, r28	; 61
    4760:	df 91       	pop	r29
    4762:	cf 91       	pop	r28
    4764:	1f 91       	pop	r17
    4766:	0f 91       	pop	r16
    4768:	ff 90       	pop	r15
    476a:	ef 90       	pop	r14
    476c:	df 90       	pop	r13
    476e:	cf 90       	pop	r12
    4770:	08 95       	ret

00004772 <_ZN14PressureSensorC1EhR13HardwareTimer>:
 */ 

#include "PressureSensor.h"
#include "../Robot.h"

PressureSensor::PressureSensor(const uint8_t id, HardwareTimer &timer) : sensor(timer), _id(id) {
    4772:	1f 93       	push	r17
    4774:	cf 93       	push	r28
    4776:	df 93       	push	r29
    4778:	ec 01       	movw	r28, r24
    477a:	16 2f       	mov	r17, r22
    477c:	25 ea       	ldi	r18, 0xA5	; 165
    477e:	34 e0       	ldi	r19, 0x04	; 4
    4780:	fc 01       	movw	r30, r24
    4782:	21 93       	st	Z+, r18
    4784:	31 93       	st	Z+, r19
    4786:	cf 01       	movw	r24, r30
    4788:	ba 01       	movw	r22, r20
    478a:	0e 94 23 13 	call	0x2646	; 0x2646 <_ZN6MS5837C1ER13HardwareTimer>
    478e:	1a a7       	std	Y+42, r17	; 0x2a
	
}
    4790:	df 91       	pop	r29
    4792:	cf 91       	pop	r28
    4794:	1f 91       	pop	r17
    4796:	08 95       	ret

00004798 <_ZN5Print5writeEPKhj>:
uint16_t Print::println(char c)
{
  uint16_t n = print(c);
  n += println();
  return n;
}
    4798:	cf 92       	push	r12
    479a:	df 92       	push	r13
    479c:	ef 92       	push	r14
    479e:	ff 92       	push	r15
    47a0:	0f 93       	push	r16
    47a2:	1f 93       	push	r17
    47a4:	cf 93       	push	r28
    47a6:	df 93       	push	r29
    47a8:	41 15       	cp	r20, r1
    47aa:	51 05       	cpc	r21, r1
    47ac:	c1 f0       	breq	.+48     	; 0x47de <_ZN5Print5writeEPKhj+0x46>
    47ae:	6a 01       	movw	r12, r20
    47b0:	8c 01       	movw	r16, r24
    47b2:	e6 2e       	mov	r14, r22
    47b4:	f7 2e       	mov	r15, r23
    47b6:	c0 e0       	ldi	r28, 0x00	; 0
    47b8:	d0 e0       	ldi	r29, 0x00	; 0
    47ba:	d7 01       	movw	r26, r14
    47bc:	6d 91       	ld	r22, X+
    47be:	7d 01       	movw	r14, r26
    47c0:	d8 01       	movw	r26, r16
    47c2:	ed 91       	ld	r30, X+
    47c4:	fc 91       	ld	r31, X
    47c6:	01 90       	ld	r0, Z+
    47c8:	f0 81       	ld	r31, Z
    47ca:	e0 2d       	mov	r30, r0
    47cc:	c8 01       	movw	r24, r16
    47ce:	19 95       	eicall
    47d0:	89 2b       	or	r24, r25
    47d2:	39 f0       	breq	.+14     	; 0x47e2 <_ZN5Print5writeEPKhj+0x4a>
    47d4:	21 96       	adiw	r28, 0x01	; 1
    47d6:	cc 16       	cp	r12, r28
    47d8:	dd 06       	cpc	r13, r29
    47da:	79 f7       	brne	.-34     	; 0x47ba <_ZN5Print5writeEPKhj+0x22>
    47dc:	02 c0       	rjmp	.+4      	; 0x47e2 <_ZN5Print5writeEPKhj+0x4a>
    47de:	c0 e0       	ldi	r28, 0x00	; 0
    47e0:	d0 e0       	ldi	r29, 0x00	; 0
    47e2:	ce 01       	movw	r24, r28
    47e4:	df 91       	pop	r29
    47e6:	cf 91       	pop	r28
    47e8:	1f 91       	pop	r17
    47ea:	0f 91       	pop	r16
    47ec:	ff 90       	pop	r15
    47ee:	ef 90       	pop	r14
    47f0:	df 90       	pop	r13
    47f2:	cf 90       	pop	r12
    47f4:	08 95       	ret

000047f6 <_ZN5Print5printEPKc>:
    47f6:	61 15       	cp	r22, r1
    47f8:	71 05       	cpc	r23, r1
    47fa:	81 f0       	breq	.+32     	; 0x481c <_ZN5Print5printEPKc+0x26>
    47fc:	fb 01       	movw	r30, r22
    47fe:	01 90       	ld	r0, Z+
    4800:	00 20       	and	r0, r0
    4802:	e9 f7       	brne	.-6      	; 0x47fe <_ZN5Print5printEPKc+0x8>
    4804:	31 97       	sbiw	r30, 0x01	; 1
    4806:	af 01       	movw	r20, r30
    4808:	46 1b       	sub	r20, r22
    480a:	57 0b       	sbc	r21, r23
    480c:	dc 01       	movw	r26, r24
    480e:	ed 91       	ld	r30, X+
    4810:	fc 91       	ld	r31, X
    4812:	02 80       	ldd	r0, Z+2	; 0x02
    4814:	f3 81       	ldd	r31, Z+3	; 0x03
    4816:	e0 2d       	mov	r30, r0
    4818:	19 95       	eicall
    481a:	08 95       	ret
    481c:	80 e0       	ldi	r24, 0x00	; 0
    481e:	90 e0       	ldi	r25, 0x00	; 0
    4820:	08 95       	ret

00004822 <_ZN5Print5printEc>:
    4822:	dc 01       	movw	r26, r24
    4824:	ed 91       	ld	r30, X+
    4826:	fc 91       	ld	r31, X
    4828:	01 90       	ld	r0, Z+
    482a:	f0 81       	ld	r31, Z
    482c:	e0 2d       	mov	r30, r0
    482e:	19 95       	eicall
    4830:	08 95       	ret

00004832 <_ZN5Print7printlnEv>:
    4832:	dc 01       	movw	r26, r24
    4834:	ed 91       	ld	r30, X+
    4836:	fc 91       	ld	r31, X
    4838:	02 80       	ldd	r0, Z+2	; 0x02
    483a:	f3 81       	ldd	r31, Z+3	; 0x03
    483c:	e0 2d       	mov	r30, r0
    483e:	42 e0       	ldi	r20, 0x02	; 2
    4840:	50 e0       	ldi	r21, 0x00	; 0
    4842:	6d ea       	ldi	r22, 0xAD	; 173
    4844:	74 e0       	ldi	r23, 0x04	; 4
    4846:	19 95       	eicall
    4848:	08 95       	ret

0000484a <_ZN5Print7printlnEPKc>:
    484a:	0f 93       	push	r16
    484c:	1f 93       	push	r17
    484e:	cf 93       	push	r28
    4850:	df 93       	push	r29
    4852:	ec 01       	movw	r28, r24
    4854:	d0 df       	rcall	.-96     	; 0x47f6 <_ZN5Print5printEPKc>
    4856:	8c 01       	movw	r16, r24
    4858:	ce 01       	movw	r24, r28
    485a:	eb df       	rcall	.-42     	; 0x4832 <_ZN5Print7printlnEv>
    485c:	80 0f       	add	r24, r16
    485e:	91 1f       	adc	r25, r17
    4860:	df 91       	pop	r29
    4862:	cf 91       	pop	r28
    4864:	1f 91       	pop	r17
    4866:	0f 91       	pop	r16
    4868:	08 95       	ret

0000486a <_ZN5Print11printNumberEmh>:
}
*/
// Private Methods /////////////////////////////////////////////////////////////

uint8_t Print::printNumber(unsigned long n, uint8_t base)
{
    486a:	8f 92       	push	r8
    486c:	9f 92       	push	r9
    486e:	af 92       	push	r10
    4870:	bf 92       	push	r11
    4872:	ef 92       	push	r14
    4874:	ff 92       	push	r15
    4876:	0f 93       	push	r16
    4878:	1f 93       	push	r17
    487a:	cf 93       	push	r28
    487c:	df 93       	push	r29
    487e:	cd b7       	in	r28, 0x3d	; 61
    4880:	de b7       	in	r29, 0x3e	; 62
    4882:	a1 97       	sbiw	r28, 0x21	; 33
    4884:	0f b6       	in	r0, 0x3f	; 63
    4886:	f8 94       	cli
    4888:	de bf       	out	0x3e, r29	; 62
    488a:	0f be       	out	0x3f, r0	; 63
    488c:	cd bf       	out	0x3d, r28	; 61
    488e:	7c 01       	movw	r14, r24
    4890:	cb 01       	movw	r24, r22
    4892:	ba 01       	movw	r22, r20
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    4894:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    4896:	22 30       	cpi	r18, 0x02	; 2
    4898:	08 f4       	brcc	.+2      	; 0x489c <_ZN5Print11printNumberEmh+0x32>
    489a:	2a e0       	ldi	r18, 0x0A	; 10
    489c:	8e 01       	movw	r16, r28
    489e:	0f 5d       	subi	r16, 0xDF	; 223
    48a0:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    char c = n % base;
    48a2:	82 2e       	mov	r8, r18
    48a4:	91 2c       	mov	r9, r1
    48a6:	a1 2c       	mov	r10, r1
    48a8:	b1 2c       	mov	r11, r1
    48aa:	a5 01       	movw	r20, r10
    48ac:	94 01       	movw	r18, r8
    48ae:	b3 d2       	rcall	.+1382   	; 0x4e16 <__udivmodsi4>
    48b0:	e6 2f       	mov	r30, r22
    n /= base;
    48b2:	62 2f       	mov	r22, r18
    48b4:	73 2f       	mov	r23, r19
    48b6:	84 2f       	mov	r24, r20
    48b8:	95 2f       	mov	r25, r21

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    48ba:	01 50       	subi	r16, 0x01	; 1
    48bc:	11 09       	sbc	r17, r1
    48be:	ea 30       	cpi	r30, 0x0A	; 10
    48c0:	10 f4       	brcc	.+4      	; 0x48c6 <_ZN5Print11printNumberEmh+0x5c>
    48c2:	e0 5d       	subi	r30, 0xD0	; 208
    48c4:	01 c0       	rjmp	.+2      	; 0x48c8 <_ZN5Print11printNumberEmh+0x5e>
    48c6:	e9 5c       	subi	r30, 0xC9	; 201
    48c8:	d8 01       	movw	r26, r16
    48ca:	ec 93       	st	X, r30
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    48cc:	61 15       	cp	r22, r1
    48ce:	71 05       	cpc	r23, r1
    48d0:	81 05       	cpc	r24, r1
    48d2:	91 05       	cpc	r25, r1
    48d4:	51 f7       	brne	.-44     	; 0x48aa <_ZN5Print11printNumberEmh+0x40>
  //int getWriteError() { return write_error; }
  //void clearWriteError() { setWriteError(0); }
  
  virtual uint16_t write(uint8_t) = 0;
  uint16_t write(const char *str) {
	  if (str == NULL) return 0;
    48d6:	01 15       	cp	r16, r1
    48d8:	11 05       	cpc	r17, r1
    48da:	91 f0       	breq	.+36     	; 0x4900 <_ZN5Print11printNumberEmh+0x96>
	  return write((const uint8_t *)str, strlen(str));
    48dc:	f8 01       	movw	r30, r16
    48de:	01 90       	ld	r0, Z+
    48e0:	00 20       	and	r0, r0
    48e2:	e9 f7       	brne	.-6      	; 0x48de <_ZN5Print11printNumberEmh+0x74>
    48e4:	31 97       	sbiw	r30, 0x01	; 1
    48e6:	af 01       	movw	r20, r30
    48e8:	40 1b       	sub	r20, r16
    48ea:	51 0b       	sbc	r21, r17
    48ec:	d7 01       	movw	r26, r14
    48ee:	ed 91       	ld	r30, X+
    48f0:	fc 91       	ld	r31, X
    48f2:	02 80       	ldd	r0, Z+2	; 0x02
    48f4:	f3 81       	ldd	r31, Z+3	; 0x03
    48f6:	e0 2d       	mov	r30, r0
    48f8:	b8 01       	movw	r22, r16
    48fa:	c7 01       	movw	r24, r14
    48fc:	19 95       	eicall
    48fe:	01 c0       	rjmp	.+2      	; 0x4902 <_ZN5Print11printNumberEmh+0x98>
  //int getWriteError() { return write_error; }
  //void clearWriteError() { setWriteError(0); }
  
  virtual uint16_t write(uint8_t) = 0;
  uint16_t write(const char *str) {
	  if (str == NULL) return 0;
    4900:	80 e0       	ldi	r24, 0x00	; 0

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
}
    4902:	a1 96       	adiw	r28, 0x21	; 33
    4904:	0f b6       	in	r0, 0x3f	; 63
    4906:	f8 94       	cli
    4908:	de bf       	out	0x3e, r29	; 62
    490a:	0f be       	out	0x3f, r0	; 63
    490c:	cd bf       	out	0x3d, r28	; 61
    490e:	df 91       	pop	r29
    4910:	cf 91       	pop	r28
    4912:	1f 91       	pop	r17
    4914:	0f 91       	pop	r16
    4916:	ff 90       	pop	r15
    4918:	ef 90       	pop	r14
    491a:	bf 90       	pop	r11
    491c:	af 90       	pop	r10
    491e:	9f 90       	pop	r9
    4920:	8f 90       	pop	r8
    4922:	08 95       	ret

00004924 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

uint16_t Print::print(long n, int base)
{
    4924:	cf 92       	push	r12
    4926:	df 92       	push	r13
    4928:	ef 92       	push	r14
    492a:	ff 92       	push	r15
    492c:	0f 93       	push	r16
    492e:	1f 93       	push	r17
    4930:	cf 93       	push	r28
    4932:	df 93       	push	r29
    4934:	8c 01       	movw	r16, r24
    4936:	6a 01       	movw	r12, r20
    4938:	7b 01       	movw	r14, r22
  if (base == 0) {
    493a:	21 15       	cp	r18, r1
    493c:	31 05       	cpc	r19, r1
    493e:	49 f4       	brne	.+18     	; 0x4952 <_ZN5Print5printEli+0x2e>
    return write(n);
    4940:	dc 01       	movw	r26, r24
    4942:	ed 91       	ld	r30, X+
    4944:	fc 91       	ld	r31, X
    4946:	01 90       	ld	r0, Z+
    4948:	f0 81       	ld	r31, Z
    494a:	e0 2d       	mov	r30, r0
    494c:	64 2f       	mov	r22, r20
    494e:	19 95       	eicall
    4950:	1d c0       	rjmp	.+58     	; 0x498c <_ZN5Print5printEli+0x68>
  } else if (base == 10) {
    4952:	2a 30       	cpi	r18, 0x0A	; 10
    4954:	31 05       	cpc	r19, r1
    4956:	c1 f4       	brne	.+48     	; 0x4988 <_ZN5Print5printEli+0x64>
    if (n < 0) {
    4958:	77 23       	and	r23, r23
    495a:	94 f4       	brge	.+36     	; 0x4980 <_ZN5Print5printEli+0x5c>
      int t = print('-');
    495c:	6d e2       	ldi	r22, 0x2D	; 45
    495e:	61 df       	rcall	.-318    	; 0x4822 <_ZN5Print5printEc>
    4960:	ec 01       	movw	r28, r24
      n = -n;
      return printNumber(n, 10) + t;
    4962:	44 27       	eor	r20, r20
    4964:	55 27       	eor	r21, r21
    4966:	ba 01       	movw	r22, r20
    4968:	4c 19       	sub	r20, r12
    496a:	5d 09       	sbc	r21, r13
    496c:	6e 09       	sbc	r22, r14
    496e:	7f 09       	sbc	r23, r15
    4970:	2a e0       	ldi	r18, 0x0A	; 10
    4972:	c8 01       	movw	r24, r16
    4974:	7a df       	rcall	.-268    	; 0x486a <_ZN5Print11printNumberEmh>
    4976:	9e 01       	movw	r18, r28
    4978:	28 0f       	add	r18, r24
    497a:	31 1d       	adc	r19, r1
    497c:	c9 01       	movw	r24, r18
    497e:	06 c0       	rjmp	.+12     	; 0x498c <_ZN5Print5printEli+0x68>
    }
    return printNumber(n, 10);
    4980:	2a e0       	ldi	r18, 0x0A	; 10
    4982:	73 df       	rcall	.-282    	; 0x486a <_ZN5Print11printNumberEmh>
    4984:	90 e0       	ldi	r25, 0x00	; 0
    4986:	02 c0       	rjmp	.+4      	; 0x498c <_ZN5Print5printEli+0x68>
  } else {
    return printNumber(n, base);
    4988:	70 df       	rcall	.-288    	; 0x486a <_ZN5Print11printNumberEmh>
    498a:	90 e0       	ldi	r25, 0x00	; 0
    498c:	df 91       	pop	r29
  }
}
    498e:	cf 91       	pop	r28
    4990:	1f 91       	pop	r17
    4992:	0f 91       	pop	r16
    4994:	ff 90       	pop	r15
    4996:	ef 90       	pop	r14
    4998:	df 90       	pop	r13
    499a:	cf 90       	pop	r12
    499c:	08 95       	ret

0000499e <_ZN5Print5printEii>:
    499e:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
}

uint16_t Print::print(int n, int base)
{
  return print((long) n, base);
    49a0:	ab 01       	movw	r20, r22
    49a2:	77 0f       	add	r23, r23
    49a4:	66 0b       	sbc	r22, r22
    49a6:	77 0b       	sbc	r23, r23
    49a8:	bd cf       	rjmp	.-134    	; 0x4924 <_ZN5Print5printEli>
}
    49aa:	08 95       	ret

000049ac <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

uint16_t Print::println(int num, int base)
{
    49ac:	0f 93       	push	r16
    49ae:	1f 93       	push	r17
    49b0:	cf 93       	push	r28
    49b2:	df 93       	push	r29
    49b4:	ec 01       	movw	r28, r24
  uint16_t n = print(num, base);
    49b6:	f3 df       	rcall	.-26     	; 0x499e <_ZN5Print5printEii>
    49b8:	8c 01       	movw	r16, r24
  n += println();
    49ba:	ce 01       	movw	r24, r28
    49bc:	3a df       	rcall	.-396    	; 0x4832 <_ZN5Print7printlnEv>
  return n;
}
    49be:	80 0f       	add	r24, r16
    49c0:	91 1f       	adc	r25, r17
    49c2:	df 91       	pop	r29
    49c4:	cf 91       	pop	r28
    49c6:	1f 91       	pop	r17
    49c8:	0f 91       	pop	r16
    49ca:	08 95       	ret

000049cc <__subsf3>:
    49cc:	50 58       	subi	r21, 0x80	; 128

000049ce <__addsf3>:
    49ce:	bb 27       	eor	r27, r27
    49d0:	aa 27       	eor	r26, r26
    49d2:	0e d0       	rcall	.+28     	; 0x49f0 <__addsf3x>
    49d4:	70 c1       	rjmp	.+736    	; 0x4cb6 <__fp_round>
    49d6:	61 d1       	rcall	.+706    	; 0x4c9a <__fp_pscA>
    49d8:	30 f0       	brcs	.+12     	; 0x49e6 <__addsf3+0x18>
    49da:	66 d1       	rcall	.+716    	; 0x4ca8 <__fp_pscB>
    49dc:	20 f0       	brcs	.+8      	; 0x49e6 <__addsf3+0x18>
    49de:	31 f4       	brne	.+12     	; 0x49ec <__addsf3+0x1e>
    49e0:	9f 3f       	cpi	r25, 0xFF	; 255
    49e2:	11 f4       	brne	.+4      	; 0x49e8 <__addsf3+0x1a>
    49e4:	1e f4       	brtc	.+6      	; 0x49ec <__addsf3+0x1e>
    49e6:	56 c1       	rjmp	.+684    	; 0x4c94 <__fp_nan>
    49e8:	0e f4       	brtc	.+2      	; 0x49ec <__addsf3+0x1e>
    49ea:	e0 95       	com	r30
    49ec:	e7 fb       	bst	r30, 7
    49ee:	4c c1       	rjmp	.+664    	; 0x4c88 <__fp_inf>

000049f0 <__addsf3x>:
    49f0:	e9 2f       	mov	r30, r25
    49f2:	72 d1       	rcall	.+740    	; 0x4cd8 <__fp_split3>
    49f4:	80 f3       	brcs	.-32     	; 0x49d6 <__addsf3+0x8>
    49f6:	ba 17       	cp	r27, r26
    49f8:	62 07       	cpc	r22, r18
    49fa:	73 07       	cpc	r23, r19
    49fc:	84 07       	cpc	r24, r20
    49fe:	95 07       	cpc	r25, r21
    4a00:	18 f0       	brcs	.+6      	; 0x4a08 <__addsf3x+0x18>
    4a02:	71 f4       	brne	.+28     	; 0x4a20 <__addsf3x+0x30>
    4a04:	9e f5       	brtc	.+102    	; 0x4a6c <__addsf3x+0x7c>
    4a06:	8a c1       	rjmp	.+788    	; 0x4d1c <__fp_zero>
    4a08:	0e f4       	brtc	.+2      	; 0x4a0c <__addsf3x+0x1c>
    4a0a:	e0 95       	com	r30
    4a0c:	0b 2e       	mov	r0, r27
    4a0e:	ba 2f       	mov	r27, r26
    4a10:	a0 2d       	mov	r26, r0
    4a12:	0b 01       	movw	r0, r22
    4a14:	b9 01       	movw	r22, r18
    4a16:	90 01       	movw	r18, r0
    4a18:	0c 01       	movw	r0, r24
    4a1a:	ca 01       	movw	r24, r20
    4a1c:	a0 01       	movw	r20, r0
    4a1e:	11 24       	eor	r1, r1
    4a20:	ff 27       	eor	r31, r31
    4a22:	59 1b       	sub	r21, r25
    4a24:	99 f0       	breq	.+38     	; 0x4a4c <__addsf3x+0x5c>
    4a26:	59 3f       	cpi	r21, 0xF9	; 249
    4a28:	50 f4       	brcc	.+20     	; 0x4a3e <__addsf3x+0x4e>
    4a2a:	50 3e       	cpi	r21, 0xE0	; 224
    4a2c:	68 f1       	brcs	.+90     	; 0x4a88 <__addsf3x+0x98>
    4a2e:	1a 16       	cp	r1, r26
    4a30:	f0 40       	sbci	r31, 0x00	; 0
    4a32:	a2 2f       	mov	r26, r18
    4a34:	23 2f       	mov	r18, r19
    4a36:	34 2f       	mov	r19, r20
    4a38:	44 27       	eor	r20, r20
    4a3a:	58 5f       	subi	r21, 0xF8	; 248
    4a3c:	f3 cf       	rjmp	.-26     	; 0x4a24 <__addsf3x+0x34>
    4a3e:	46 95       	lsr	r20
    4a40:	37 95       	ror	r19
    4a42:	27 95       	ror	r18
    4a44:	a7 95       	ror	r26
    4a46:	f0 40       	sbci	r31, 0x00	; 0
    4a48:	53 95       	inc	r21
    4a4a:	c9 f7       	brne	.-14     	; 0x4a3e <__addsf3x+0x4e>
    4a4c:	7e f4       	brtc	.+30     	; 0x4a6c <__addsf3x+0x7c>
    4a4e:	1f 16       	cp	r1, r31
    4a50:	ba 0b       	sbc	r27, r26
    4a52:	62 0b       	sbc	r22, r18
    4a54:	73 0b       	sbc	r23, r19
    4a56:	84 0b       	sbc	r24, r20
    4a58:	ba f0       	brmi	.+46     	; 0x4a88 <__addsf3x+0x98>
    4a5a:	91 50       	subi	r25, 0x01	; 1
    4a5c:	a1 f0       	breq	.+40     	; 0x4a86 <__addsf3x+0x96>
    4a5e:	ff 0f       	add	r31, r31
    4a60:	bb 1f       	adc	r27, r27
    4a62:	66 1f       	adc	r22, r22
    4a64:	77 1f       	adc	r23, r23
    4a66:	88 1f       	adc	r24, r24
    4a68:	c2 f7       	brpl	.-16     	; 0x4a5a <__addsf3x+0x6a>
    4a6a:	0e c0       	rjmp	.+28     	; 0x4a88 <__addsf3x+0x98>
    4a6c:	ba 0f       	add	r27, r26
    4a6e:	62 1f       	adc	r22, r18
    4a70:	73 1f       	adc	r23, r19
    4a72:	84 1f       	adc	r24, r20
    4a74:	48 f4       	brcc	.+18     	; 0x4a88 <__addsf3x+0x98>
    4a76:	87 95       	ror	r24
    4a78:	77 95       	ror	r23
    4a7a:	67 95       	ror	r22
    4a7c:	b7 95       	ror	r27
    4a7e:	f7 95       	ror	r31
    4a80:	9e 3f       	cpi	r25, 0xFE	; 254
    4a82:	08 f0       	brcs	.+2      	; 0x4a86 <__addsf3x+0x96>
    4a84:	b3 cf       	rjmp	.-154    	; 0x49ec <__addsf3+0x1e>
    4a86:	93 95       	inc	r25
    4a88:	88 0f       	add	r24, r24
    4a8a:	08 f0       	brcs	.+2      	; 0x4a8e <__addsf3x+0x9e>
    4a8c:	99 27       	eor	r25, r25
    4a8e:	ee 0f       	add	r30, r30
    4a90:	97 95       	ror	r25
    4a92:	87 95       	ror	r24
    4a94:	08 95       	ret

00004a96 <__cmpsf2>:
    4a96:	d4 d0       	rcall	.+424    	; 0x4c40 <__fp_cmp>
    4a98:	08 f4       	brcc	.+2      	; 0x4a9c <__cmpsf2+0x6>
    4a9a:	81 e0       	ldi	r24, 0x01	; 1
    4a9c:	08 95       	ret

00004a9e <__divsf3>:
    4a9e:	0c d0       	rcall	.+24     	; 0x4ab8 <__divsf3x>
    4aa0:	0a c1       	rjmp	.+532    	; 0x4cb6 <__fp_round>
    4aa2:	02 d1       	rcall	.+516    	; 0x4ca8 <__fp_pscB>
    4aa4:	40 f0       	brcs	.+16     	; 0x4ab6 <__divsf3+0x18>
    4aa6:	f9 d0       	rcall	.+498    	; 0x4c9a <__fp_pscA>
    4aa8:	30 f0       	brcs	.+12     	; 0x4ab6 <__divsf3+0x18>
    4aaa:	21 f4       	brne	.+8      	; 0x4ab4 <__divsf3+0x16>
    4aac:	5f 3f       	cpi	r21, 0xFF	; 255
    4aae:	19 f0       	breq	.+6      	; 0x4ab6 <__divsf3+0x18>
    4ab0:	eb c0       	rjmp	.+470    	; 0x4c88 <__fp_inf>
    4ab2:	51 11       	cpse	r21, r1
    4ab4:	34 c1       	rjmp	.+616    	; 0x4d1e <__fp_szero>
    4ab6:	ee c0       	rjmp	.+476    	; 0x4c94 <__fp_nan>

00004ab8 <__divsf3x>:
    4ab8:	0f d1       	rcall	.+542    	; 0x4cd8 <__fp_split3>
    4aba:	98 f3       	brcs	.-26     	; 0x4aa2 <__divsf3+0x4>

00004abc <__divsf3_pse>:
    4abc:	99 23       	and	r25, r25
    4abe:	c9 f3       	breq	.-14     	; 0x4ab2 <__divsf3+0x14>
    4ac0:	55 23       	and	r21, r21
    4ac2:	b1 f3       	breq	.-20     	; 0x4ab0 <__divsf3+0x12>
    4ac4:	95 1b       	sub	r25, r21
    4ac6:	55 0b       	sbc	r21, r21
    4ac8:	bb 27       	eor	r27, r27
    4aca:	aa 27       	eor	r26, r26
    4acc:	62 17       	cp	r22, r18
    4ace:	73 07       	cpc	r23, r19
    4ad0:	84 07       	cpc	r24, r20
    4ad2:	38 f0       	brcs	.+14     	; 0x4ae2 <__divsf3_pse+0x26>
    4ad4:	9f 5f       	subi	r25, 0xFF	; 255
    4ad6:	5f 4f       	sbci	r21, 0xFF	; 255
    4ad8:	22 0f       	add	r18, r18
    4ada:	33 1f       	adc	r19, r19
    4adc:	44 1f       	adc	r20, r20
    4ade:	aa 1f       	adc	r26, r26
    4ae0:	a9 f3       	breq	.-22     	; 0x4acc <__divsf3_pse+0x10>
    4ae2:	33 d0       	rcall	.+102    	; 0x4b4a <__divsf3_pse+0x8e>
    4ae4:	0e 2e       	mov	r0, r30
    4ae6:	3a f0       	brmi	.+14     	; 0x4af6 <__divsf3_pse+0x3a>
    4ae8:	e0 e8       	ldi	r30, 0x80	; 128
    4aea:	30 d0       	rcall	.+96     	; 0x4b4c <__divsf3_pse+0x90>
    4aec:	91 50       	subi	r25, 0x01	; 1
    4aee:	50 40       	sbci	r21, 0x00	; 0
    4af0:	e6 95       	lsr	r30
    4af2:	00 1c       	adc	r0, r0
    4af4:	ca f7       	brpl	.-14     	; 0x4ae8 <__divsf3_pse+0x2c>
    4af6:	29 d0       	rcall	.+82     	; 0x4b4a <__divsf3_pse+0x8e>
    4af8:	fe 2f       	mov	r31, r30
    4afa:	27 d0       	rcall	.+78     	; 0x4b4a <__divsf3_pse+0x8e>
    4afc:	66 0f       	add	r22, r22
    4afe:	77 1f       	adc	r23, r23
    4b00:	88 1f       	adc	r24, r24
    4b02:	bb 1f       	adc	r27, r27
    4b04:	26 17       	cp	r18, r22
    4b06:	37 07       	cpc	r19, r23
    4b08:	48 07       	cpc	r20, r24
    4b0a:	ab 07       	cpc	r26, r27
    4b0c:	b0 e8       	ldi	r27, 0x80	; 128
    4b0e:	09 f0       	breq	.+2      	; 0x4b12 <__divsf3_pse+0x56>
    4b10:	bb 0b       	sbc	r27, r27
    4b12:	80 2d       	mov	r24, r0
    4b14:	bf 01       	movw	r22, r30
    4b16:	ff 27       	eor	r31, r31
    4b18:	93 58       	subi	r25, 0x83	; 131
    4b1a:	5f 4f       	sbci	r21, 0xFF	; 255
    4b1c:	2a f0       	brmi	.+10     	; 0x4b28 <__divsf3_pse+0x6c>
    4b1e:	9e 3f       	cpi	r25, 0xFE	; 254
    4b20:	51 05       	cpc	r21, r1
    4b22:	68 f0       	brcs	.+26     	; 0x4b3e <__divsf3_pse+0x82>
    4b24:	b1 c0       	rjmp	.+354    	; 0x4c88 <__fp_inf>
    4b26:	fb c0       	rjmp	.+502    	; 0x4d1e <__fp_szero>
    4b28:	5f 3f       	cpi	r21, 0xFF	; 255
    4b2a:	ec f3       	brlt	.-6      	; 0x4b26 <__divsf3_pse+0x6a>
    4b2c:	98 3e       	cpi	r25, 0xE8	; 232
    4b2e:	dc f3       	brlt	.-10     	; 0x4b26 <__divsf3_pse+0x6a>
    4b30:	86 95       	lsr	r24
    4b32:	77 95       	ror	r23
    4b34:	67 95       	ror	r22
    4b36:	b7 95       	ror	r27
    4b38:	f7 95       	ror	r31
    4b3a:	9f 5f       	subi	r25, 0xFF	; 255
    4b3c:	c9 f7       	brne	.-14     	; 0x4b30 <__divsf3_pse+0x74>
    4b3e:	88 0f       	add	r24, r24
    4b40:	91 1d       	adc	r25, r1
    4b42:	96 95       	lsr	r25
    4b44:	87 95       	ror	r24
    4b46:	97 f9       	bld	r25, 7
    4b48:	08 95       	ret
    4b4a:	e1 e0       	ldi	r30, 0x01	; 1
    4b4c:	66 0f       	add	r22, r22
    4b4e:	77 1f       	adc	r23, r23
    4b50:	88 1f       	adc	r24, r24
    4b52:	bb 1f       	adc	r27, r27
    4b54:	62 17       	cp	r22, r18
    4b56:	73 07       	cpc	r23, r19
    4b58:	84 07       	cpc	r24, r20
    4b5a:	ba 07       	cpc	r27, r26
    4b5c:	20 f0       	brcs	.+8      	; 0x4b66 <__divsf3_pse+0xaa>
    4b5e:	62 1b       	sub	r22, r18
    4b60:	73 0b       	sbc	r23, r19
    4b62:	84 0b       	sbc	r24, r20
    4b64:	ba 0b       	sbc	r27, r26
    4b66:	ee 1f       	adc	r30, r30
    4b68:	88 f7       	brcc	.-30     	; 0x4b4c <__divsf3_pse+0x90>
    4b6a:	e0 95       	com	r30
    4b6c:	08 95       	ret

00004b6e <__fixunssfsi>:
    4b6e:	bc d0       	rcall	.+376    	; 0x4ce8 <__fp_splitA>
    4b70:	88 f0       	brcs	.+34     	; 0x4b94 <__fixunssfsi+0x26>
    4b72:	9f 57       	subi	r25, 0x7F	; 127
    4b74:	90 f0       	brcs	.+36     	; 0x4b9a <__fixunssfsi+0x2c>
    4b76:	b9 2f       	mov	r27, r25
    4b78:	99 27       	eor	r25, r25
    4b7a:	b7 51       	subi	r27, 0x17	; 23
    4b7c:	a0 f0       	brcs	.+40     	; 0x4ba6 <__fixunssfsi+0x38>
    4b7e:	d1 f0       	breq	.+52     	; 0x4bb4 <__fixunssfsi+0x46>
    4b80:	66 0f       	add	r22, r22
    4b82:	77 1f       	adc	r23, r23
    4b84:	88 1f       	adc	r24, r24
    4b86:	99 1f       	adc	r25, r25
    4b88:	1a f0       	brmi	.+6      	; 0x4b90 <__fixunssfsi+0x22>
    4b8a:	ba 95       	dec	r27
    4b8c:	c9 f7       	brne	.-14     	; 0x4b80 <__fixunssfsi+0x12>
    4b8e:	12 c0       	rjmp	.+36     	; 0x4bb4 <__fixunssfsi+0x46>
    4b90:	b1 30       	cpi	r27, 0x01	; 1
    4b92:	81 f0       	breq	.+32     	; 0x4bb4 <__fixunssfsi+0x46>
    4b94:	c3 d0       	rcall	.+390    	; 0x4d1c <__fp_zero>
    4b96:	b1 e0       	ldi	r27, 0x01	; 1
    4b98:	08 95       	ret
    4b9a:	c0 c0       	rjmp	.+384    	; 0x4d1c <__fp_zero>
    4b9c:	67 2f       	mov	r22, r23
    4b9e:	78 2f       	mov	r23, r24
    4ba0:	88 27       	eor	r24, r24
    4ba2:	b8 5f       	subi	r27, 0xF8	; 248
    4ba4:	39 f0       	breq	.+14     	; 0x4bb4 <__fixunssfsi+0x46>
    4ba6:	b9 3f       	cpi	r27, 0xF9	; 249
    4ba8:	cc f3       	brlt	.-14     	; 0x4b9c <__fixunssfsi+0x2e>
    4baa:	86 95       	lsr	r24
    4bac:	77 95       	ror	r23
    4bae:	67 95       	ror	r22
    4bb0:	b3 95       	inc	r27
    4bb2:	d9 f7       	brne	.-10     	; 0x4baa <__fixunssfsi+0x3c>
    4bb4:	3e f4       	brtc	.+14     	; 0x4bc4 <__fixunssfsi+0x56>
    4bb6:	90 95       	com	r25
    4bb8:	80 95       	com	r24
    4bba:	70 95       	com	r23
    4bbc:	61 95       	neg	r22
    4bbe:	7f 4f       	sbci	r23, 0xFF	; 255
    4bc0:	8f 4f       	sbci	r24, 0xFF	; 255
    4bc2:	9f 4f       	sbci	r25, 0xFF	; 255
    4bc4:	08 95       	ret

00004bc6 <__floatunsisf>:
    4bc6:	e8 94       	clt
    4bc8:	09 c0       	rjmp	.+18     	; 0x4bdc <__floatsisf+0x12>

00004bca <__floatsisf>:
    4bca:	97 fb       	bst	r25, 7
    4bcc:	3e f4       	brtc	.+14     	; 0x4bdc <__floatsisf+0x12>
    4bce:	90 95       	com	r25
    4bd0:	80 95       	com	r24
    4bd2:	70 95       	com	r23
    4bd4:	61 95       	neg	r22
    4bd6:	7f 4f       	sbci	r23, 0xFF	; 255
    4bd8:	8f 4f       	sbci	r24, 0xFF	; 255
    4bda:	9f 4f       	sbci	r25, 0xFF	; 255
    4bdc:	99 23       	and	r25, r25
    4bde:	a9 f0       	breq	.+42     	; 0x4c0a <__floatsisf+0x40>
    4be0:	f9 2f       	mov	r31, r25
    4be2:	96 e9       	ldi	r25, 0x96	; 150
    4be4:	bb 27       	eor	r27, r27
    4be6:	93 95       	inc	r25
    4be8:	f6 95       	lsr	r31
    4bea:	87 95       	ror	r24
    4bec:	77 95       	ror	r23
    4bee:	67 95       	ror	r22
    4bf0:	b7 95       	ror	r27
    4bf2:	f1 11       	cpse	r31, r1
    4bf4:	f8 cf       	rjmp	.-16     	; 0x4be6 <__floatsisf+0x1c>
    4bf6:	fa f4       	brpl	.+62     	; 0x4c36 <__floatsisf+0x6c>
    4bf8:	bb 0f       	add	r27, r27
    4bfa:	11 f4       	brne	.+4      	; 0x4c00 <__floatsisf+0x36>
    4bfc:	60 ff       	sbrs	r22, 0
    4bfe:	1b c0       	rjmp	.+54     	; 0x4c36 <__floatsisf+0x6c>
    4c00:	6f 5f       	subi	r22, 0xFF	; 255
    4c02:	7f 4f       	sbci	r23, 0xFF	; 255
    4c04:	8f 4f       	sbci	r24, 0xFF	; 255
    4c06:	9f 4f       	sbci	r25, 0xFF	; 255
    4c08:	16 c0       	rjmp	.+44     	; 0x4c36 <__floatsisf+0x6c>
    4c0a:	88 23       	and	r24, r24
    4c0c:	11 f0       	breq	.+4      	; 0x4c12 <__floatsisf+0x48>
    4c0e:	96 e9       	ldi	r25, 0x96	; 150
    4c10:	11 c0       	rjmp	.+34     	; 0x4c34 <__floatsisf+0x6a>
    4c12:	77 23       	and	r23, r23
    4c14:	21 f0       	breq	.+8      	; 0x4c1e <__floatsisf+0x54>
    4c16:	9e e8       	ldi	r25, 0x8E	; 142
    4c18:	87 2f       	mov	r24, r23
    4c1a:	76 2f       	mov	r23, r22
    4c1c:	05 c0       	rjmp	.+10     	; 0x4c28 <__floatsisf+0x5e>
    4c1e:	66 23       	and	r22, r22
    4c20:	71 f0       	breq	.+28     	; 0x4c3e <__floatsisf+0x74>
    4c22:	96 e8       	ldi	r25, 0x86	; 134
    4c24:	86 2f       	mov	r24, r22
    4c26:	70 e0       	ldi	r23, 0x00	; 0
    4c28:	60 e0       	ldi	r22, 0x00	; 0
    4c2a:	2a f0       	brmi	.+10     	; 0x4c36 <__floatsisf+0x6c>
    4c2c:	9a 95       	dec	r25
    4c2e:	66 0f       	add	r22, r22
    4c30:	77 1f       	adc	r23, r23
    4c32:	88 1f       	adc	r24, r24
    4c34:	da f7       	brpl	.-10     	; 0x4c2c <__floatsisf+0x62>
    4c36:	88 0f       	add	r24, r24
    4c38:	96 95       	lsr	r25
    4c3a:	87 95       	ror	r24
    4c3c:	97 f9       	bld	r25, 7
    4c3e:	08 95       	ret

00004c40 <__fp_cmp>:
    4c40:	99 0f       	add	r25, r25
    4c42:	00 08       	sbc	r0, r0
    4c44:	55 0f       	add	r21, r21
    4c46:	aa 0b       	sbc	r26, r26
    4c48:	e0 e8       	ldi	r30, 0x80	; 128
    4c4a:	fe ef       	ldi	r31, 0xFE	; 254
    4c4c:	16 16       	cp	r1, r22
    4c4e:	17 06       	cpc	r1, r23
    4c50:	e8 07       	cpc	r30, r24
    4c52:	f9 07       	cpc	r31, r25
    4c54:	c0 f0       	brcs	.+48     	; 0x4c86 <__fp_cmp+0x46>
    4c56:	12 16       	cp	r1, r18
    4c58:	13 06       	cpc	r1, r19
    4c5a:	e4 07       	cpc	r30, r20
    4c5c:	f5 07       	cpc	r31, r21
    4c5e:	98 f0       	brcs	.+38     	; 0x4c86 <__fp_cmp+0x46>
    4c60:	62 1b       	sub	r22, r18
    4c62:	73 0b       	sbc	r23, r19
    4c64:	84 0b       	sbc	r24, r20
    4c66:	95 0b       	sbc	r25, r21
    4c68:	39 f4       	brne	.+14     	; 0x4c78 <__fp_cmp+0x38>
    4c6a:	0a 26       	eor	r0, r26
    4c6c:	61 f0       	breq	.+24     	; 0x4c86 <__fp_cmp+0x46>
    4c6e:	23 2b       	or	r18, r19
    4c70:	24 2b       	or	r18, r20
    4c72:	25 2b       	or	r18, r21
    4c74:	21 f4       	brne	.+8      	; 0x4c7e <__fp_cmp+0x3e>
    4c76:	08 95       	ret
    4c78:	0a 26       	eor	r0, r26
    4c7a:	09 f4       	brne	.+2      	; 0x4c7e <__fp_cmp+0x3e>
    4c7c:	a1 40       	sbci	r26, 0x01	; 1
    4c7e:	a6 95       	lsr	r26
    4c80:	8f ef       	ldi	r24, 0xFF	; 255
    4c82:	81 1d       	adc	r24, r1
    4c84:	81 1d       	adc	r24, r1
    4c86:	08 95       	ret

00004c88 <__fp_inf>:
    4c88:	97 f9       	bld	r25, 7
    4c8a:	9f 67       	ori	r25, 0x7F	; 127
    4c8c:	80 e8       	ldi	r24, 0x80	; 128
    4c8e:	70 e0       	ldi	r23, 0x00	; 0
    4c90:	60 e0       	ldi	r22, 0x00	; 0
    4c92:	08 95       	ret

00004c94 <__fp_nan>:
    4c94:	9f ef       	ldi	r25, 0xFF	; 255
    4c96:	80 ec       	ldi	r24, 0xC0	; 192
    4c98:	08 95       	ret

00004c9a <__fp_pscA>:
    4c9a:	00 24       	eor	r0, r0
    4c9c:	0a 94       	dec	r0
    4c9e:	16 16       	cp	r1, r22
    4ca0:	17 06       	cpc	r1, r23
    4ca2:	18 06       	cpc	r1, r24
    4ca4:	09 06       	cpc	r0, r25
    4ca6:	08 95       	ret

00004ca8 <__fp_pscB>:
    4ca8:	00 24       	eor	r0, r0
    4caa:	0a 94       	dec	r0
    4cac:	12 16       	cp	r1, r18
    4cae:	13 06       	cpc	r1, r19
    4cb0:	14 06       	cpc	r1, r20
    4cb2:	05 06       	cpc	r0, r21
    4cb4:	08 95       	ret

00004cb6 <__fp_round>:
    4cb6:	09 2e       	mov	r0, r25
    4cb8:	03 94       	inc	r0
    4cba:	00 0c       	add	r0, r0
    4cbc:	11 f4       	brne	.+4      	; 0x4cc2 <__fp_round+0xc>
    4cbe:	88 23       	and	r24, r24
    4cc0:	52 f0       	brmi	.+20     	; 0x4cd6 <__fp_round+0x20>
    4cc2:	bb 0f       	add	r27, r27
    4cc4:	40 f4       	brcc	.+16     	; 0x4cd6 <__fp_round+0x20>
    4cc6:	bf 2b       	or	r27, r31
    4cc8:	11 f4       	brne	.+4      	; 0x4cce <__fp_round+0x18>
    4cca:	60 ff       	sbrs	r22, 0
    4ccc:	04 c0       	rjmp	.+8      	; 0x4cd6 <__fp_round+0x20>
    4cce:	6f 5f       	subi	r22, 0xFF	; 255
    4cd0:	7f 4f       	sbci	r23, 0xFF	; 255
    4cd2:	8f 4f       	sbci	r24, 0xFF	; 255
    4cd4:	9f 4f       	sbci	r25, 0xFF	; 255
    4cd6:	08 95       	ret

00004cd8 <__fp_split3>:
    4cd8:	57 fd       	sbrc	r21, 7
    4cda:	90 58       	subi	r25, 0x80	; 128
    4cdc:	44 0f       	add	r20, r20
    4cde:	55 1f       	adc	r21, r21
    4ce0:	59 f0       	breq	.+22     	; 0x4cf8 <__fp_splitA+0x10>
    4ce2:	5f 3f       	cpi	r21, 0xFF	; 255
    4ce4:	71 f0       	breq	.+28     	; 0x4d02 <__fp_splitA+0x1a>
    4ce6:	47 95       	ror	r20

00004ce8 <__fp_splitA>:
    4ce8:	88 0f       	add	r24, r24
    4cea:	97 fb       	bst	r25, 7
    4cec:	99 1f       	adc	r25, r25
    4cee:	61 f0       	breq	.+24     	; 0x4d08 <__fp_splitA+0x20>
    4cf0:	9f 3f       	cpi	r25, 0xFF	; 255
    4cf2:	79 f0       	breq	.+30     	; 0x4d12 <__fp_splitA+0x2a>
    4cf4:	87 95       	ror	r24
    4cf6:	08 95       	ret
    4cf8:	12 16       	cp	r1, r18
    4cfa:	13 06       	cpc	r1, r19
    4cfc:	14 06       	cpc	r1, r20
    4cfe:	55 1f       	adc	r21, r21
    4d00:	f2 cf       	rjmp	.-28     	; 0x4ce6 <__fp_split3+0xe>
    4d02:	46 95       	lsr	r20
    4d04:	f1 df       	rcall	.-30     	; 0x4ce8 <__fp_splitA>
    4d06:	08 c0       	rjmp	.+16     	; 0x4d18 <__fp_splitA+0x30>
    4d08:	16 16       	cp	r1, r22
    4d0a:	17 06       	cpc	r1, r23
    4d0c:	18 06       	cpc	r1, r24
    4d0e:	99 1f       	adc	r25, r25
    4d10:	f1 cf       	rjmp	.-30     	; 0x4cf4 <__fp_splitA+0xc>
    4d12:	86 95       	lsr	r24
    4d14:	71 05       	cpc	r23, r1
    4d16:	61 05       	cpc	r22, r1
    4d18:	08 94       	sec
    4d1a:	08 95       	ret

00004d1c <__fp_zero>:
    4d1c:	e8 94       	clt

00004d1e <__fp_szero>:
    4d1e:	bb 27       	eor	r27, r27
    4d20:	66 27       	eor	r22, r22
    4d22:	77 27       	eor	r23, r23
    4d24:	cb 01       	movw	r24, r22
    4d26:	97 f9       	bld	r25, 7
    4d28:	08 95       	ret

00004d2a <__gesf2>:
    4d2a:	8a df       	rcall	.-236    	; 0x4c40 <__fp_cmp>
    4d2c:	08 f4       	brcc	.+2      	; 0x4d30 <__gesf2+0x6>
    4d2e:	8f ef       	ldi	r24, 0xFF	; 255
    4d30:	08 95       	ret

00004d32 <__mulsf3>:
    4d32:	0b d0       	rcall	.+22     	; 0x4d4a <__mulsf3x>
    4d34:	c0 cf       	rjmp	.-128    	; 0x4cb6 <__fp_round>
    4d36:	b1 df       	rcall	.-158    	; 0x4c9a <__fp_pscA>
    4d38:	28 f0       	brcs	.+10     	; 0x4d44 <__mulsf3+0x12>
    4d3a:	b6 df       	rcall	.-148    	; 0x4ca8 <__fp_pscB>
    4d3c:	18 f0       	brcs	.+6      	; 0x4d44 <__mulsf3+0x12>
    4d3e:	95 23       	and	r25, r21
    4d40:	09 f0       	breq	.+2      	; 0x4d44 <__mulsf3+0x12>
    4d42:	a2 cf       	rjmp	.-188    	; 0x4c88 <__fp_inf>
    4d44:	a7 cf       	rjmp	.-178    	; 0x4c94 <__fp_nan>
    4d46:	11 24       	eor	r1, r1
    4d48:	ea cf       	rjmp	.-44     	; 0x4d1e <__fp_szero>

00004d4a <__mulsf3x>:
    4d4a:	c6 df       	rcall	.-116    	; 0x4cd8 <__fp_split3>
    4d4c:	a0 f3       	brcs	.-24     	; 0x4d36 <__mulsf3+0x4>

00004d4e <__mulsf3_pse>:
    4d4e:	95 9f       	mul	r25, r21
    4d50:	d1 f3       	breq	.-12     	; 0x4d46 <__mulsf3+0x14>
    4d52:	95 0f       	add	r25, r21
    4d54:	50 e0       	ldi	r21, 0x00	; 0
    4d56:	55 1f       	adc	r21, r21
    4d58:	62 9f       	mul	r22, r18
    4d5a:	f0 01       	movw	r30, r0
    4d5c:	72 9f       	mul	r23, r18
    4d5e:	bb 27       	eor	r27, r27
    4d60:	f0 0d       	add	r31, r0
    4d62:	b1 1d       	adc	r27, r1
    4d64:	63 9f       	mul	r22, r19
    4d66:	aa 27       	eor	r26, r26
    4d68:	f0 0d       	add	r31, r0
    4d6a:	b1 1d       	adc	r27, r1
    4d6c:	aa 1f       	adc	r26, r26
    4d6e:	64 9f       	mul	r22, r20
    4d70:	66 27       	eor	r22, r22
    4d72:	b0 0d       	add	r27, r0
    4d74:	a1 1d       	adc	r26, r1
    4d76:	66 1f       	adc	r22, r22
    4d78:	82 9f       	mul	r24, r18
    4d7a:	22 27       	eor	r18, r18
    4d7c:	b0 0d       	add	r27, r0
    4d7e:	a1 1d       	adc	r26, r1
    4d80:	62 1f       	adc	r22, r18
    4d82:	73 9f       	mul	r23, r19
    4d84:	b0 0d       	add	r27, r0
    4d86:	a1 1d       	adc	r26, r1
    4d88:	62 1f       	adc	r22, r18
    4d8a:	83 9f       	mul	r24, r19
    4d8c:	a0 0d       	add	r26, r0
    4d8e:	61 1d       	adc	r22, r1
    4d90:	22 1f       	adc	r18, r18
    4d92:	74 9f       	mul	r23, r20
    4d94:	33 27       	eor	r19, r19
    4d96:	a0 0d       	add	r26, r0
    4d98:	61 1d       	adc	r22, r1
    4d9a:	23 1f       	adc	r18, r19
    4d9c:	84 9f       	mul	r24, r20
    4d9e:	60 0d       	add	r22, r0
    4da0:	21 1d       	adc	r18, r1
    4da2:	82 2f       	mov	r24, r18
    4da4:	76 2f       	mov	r23, r22
    4da6:	6a 2f       	mov	r22, r26
    4da8:	11 24       	eor	r1, r1
    4daa:	9f 57       	subi	r25, 0x7F	; 127
    4dac:	50 40       	sbci	r21, 0x00	; 0
    4dae:	8a f0       	brmi	.+34     	; 0x4dd2 <__mulsf3_pse+0x84>
    4db0:	e1 f0       	breq	.+56     	; 0x4dea <__mulsf3_pse+0x9c>
    4db2:	88 23       	and	r24, r24
    4db4:	4a f0       	brmi	.+18     	; 0x4dc8 <__mulsf3_pse+0x7a>
    4db6:	ee 0f       	add	r30, r30
    4db8:	ff 1f       	adc	r31, r31
    4dba:	bb 1f       	adc	r27, r27
    4dbc:	66 1f       	adc	r22, r22
    4dbe:	77 1f       	adc	r23, r23
    4dc0:	88 1f       	adc	r24, r24
    4dc2:	91 50       	subi	r25, 0x01	; 1
    4dc4:	50 40       	sbci	r21, 0x00	; 0
    4dc6:	a9 f7       	brne	.-22     	; 0x4db2 <__mulsf3_pse+0x64>
    4dc8:	9e 3f       	cpi	r25, 0xFE	; 254
    4dca:	51 05       	cpc	r21, r1
    4dcc:	70 f0       	brcs	.+28     	; 0x4dea <__mulsf3_pse+0x9c>
    4dce:	5c cf       	rjmp	.-328    	; 0x4c88 <__fp_inf>
    4dd0:	a6 cf       	rjmp	.-180    	; 0x4d1e <__fp_szero>
    4dd2:	5f 3f       	cpi	r21, 0xFF	; 255
    4dd4:	ec f3       	brlt	.-6      	; 0x4dd0 <__mulsf3_pse+0x82>
    4dd6:	98 3e       	cpi	r25, 0xE8	; 232
    4dd8:	dc f3       	brlt	.-10     	; 0x4dd0 <__mulsf3_pse+0x82>
    4dda:	86 95       	lsr	r24
    4ddc:	77 95       	ror	r23
    4dde:	67 95       	ror	r22
    4de0:	b7 95       	ror	r27
    4de2:	f7 95       	ror	r31
    4de4:	e7 95       	ror	r30
    4de6:	9f 5f       	subi	r25, 0xFF	; 255
    4de8:	c1 f7       	brne	.-16     	; 0x4dda <__mulsf3_pse+0x8c>
    4dea:	fe 2b       	or	r31, r30
    4dec:	88 0f       	add	r24, r24
    4dee:	91 1d       	adc	r25, r1
    4df0:	96 95       	lsr	r25
    4df2:	87 95       	ror	r24
    4df4:	97 f9       	bld	r25, 7
    4df6:	08 95       	ret

00004df8 <__mulsi3>:
    4df8:	db 01       	movw	r26, r22
    4dfa:	8f 93       	push	r24
    4dfc:	9f 93       	push	r25
    4dfe:	35 d0       	rcall	.+106    	; 0x4e6a <__muluhisi3>
    4e00:	bf 91       	pop	r27
    4e02:	af 91       	pop	r26
    4e04:	a2 9f       	mul	r26, r18
    4e06:	80 0d       	add	r24, r0
    4e08:	91 1d       	adc	r25, r1
    4e0a:	a3 9f       	mul	r26, r19
    4e0c:	90 0d       	add	r25, r0
    4e0e:	b2 9f       	mul	r27, r18
    4e10:	90 0d       	add	r25, r0
    4e12:	11 24       	eor	r1, r1
    4e14:	08 95       	ret

00004e16 <__udivmodsi4>:
    4e16:	a1 e2       	ldi	r26, 0x21	; 33
    4e18:	1a 2e       	mov	r1, r26
    4e1a:	aa 1b       	sub	r26, r26
    4e1c:	bb 1b       	sub	r27, r27
    4e1e:	fd 01       	movw	r30, r26
    4e20:	0d c0       	rjmp	.+26     	; 0x4e3c <__udivmodsi4_ep>

00004e22 <__udivmodsi4_loop>:
    4e22:	aa 1f       	adc	r26, r26
    4e24:	bb 1f       	adc	r27, r27
    4e26:	ee 1f       	adc	r30, r30
    4e28:	ff 1f       	adc	r31, r31
    4e2a:	a2 17       	cp	r26, r18
    4e2c:	b3 07       	cpc	r27, r19
    4e2e:	e4 07       	cpc	r30, r20
    4e30:	f5 07       	cpc	r31, r21
    4e32:	20 f0       	brcs	.+8      	; 0x4e3c <__udivmodsi4_ep>
    4e34:	a2 1b       	sub	r26, r18
    4e36:	b3 0b       	sbc	r27, r19
    4e38:	e4 0b       	sbc	r30, r20
    4e3a:	f5 0b       	sbc	r31, r21

00004e3c <__udivmodsi4_ep>:
    4e3c:	66 1f       	adc	r22, r22
    4e3e:	77 1f       	adc	r23, r23
    4e40:	88 1f       	adc	r24, r24
    4e42:	99 1f       	adc	r25, r25
    4e44:	1a 94       	dec	r1
    4e46:	69 f7       	brne	.-38     	; 0x4e22 <__udivmodsi4_loop>
    4e48:	60 95       	com	r22
    4e4a:	70 95       	com	r23
    4e4c:	80 95       	com	r24
    4e4e:	90 95       	com	r25
    4e50:	9b 01       	movw	r18, r22
    4e52:	ac 01       	movw	r20, r24
    4e54:	bd 01       	movw	r22, r26
    4e56:	cf 01       	movw	r24, r30
    4e58:	08 95       	ret

00004e5a <__tablejump2__>:
    4e5a:	ee 0f       	add	r30, r30
    4e5c:	ff 1f       	adc	r31, r31
    4e5e:	88 1f       	adc	r24, r24
    4e60:	8b bf       	out	0x3b, r24	; 59
    4e62:	07 90       	elpm	r0, Z+
    4e64:	f6 91       	elpm	r31, Z
    4e66:	e0 2d       	mov	r30, r0
    4e68:	19 94       	eijmp

00004e6a <__muluhisi3>:
    4e6a:	bb d0       	rcall	.+374    	; 0x4fe2 <__umulhisi3>
    4e6c:	a5 9f       	mul	r26, r21
    4e6e:	90 0d       	add	r25, r0
    4e70:	b4 9f       	mul	r27, r20
    4e72:	90 0d       	add	r25, r0
    4e74:	a4 9f       	mul	r26, r20
    4e76:	80 0d       	add	r24, r0
    4e78:	91 1d       	adc	r25, r1
    4e7a:	11 24       	eor	r1, r1
    4e7c:	08 95       	ret

00004e7e <__muldi3>:
    4e7e:	df 93       	push	r29
    4e80:	cf 93       	push	r28
    4e82:	1f 93       	push	r17
    4e84:	0f 93       	push	r16
    4e86:	9a 9d       	mul	r25, r10
    4e88:	f0 2d       	mov	r31, r0
    4e8a:	21 9f       	mul	r18, r17
    4e8c:	f0 0d       	add	r31, r0
    4e8e:	8b 9d       	mul	r24, r11
    4e90:	f0 0d       	add	r31, r0
    4e92:	8a 9d       	mul	r24, r10
    4e94:	e0 2d       	mov	r30, r0
    4e96:	f1 0d       	add	r31, r1
    4e98:	03 9f       	mul	r16, r19
    4e9a:	f0 0d       	add	r31, r0
    4e9c:	02 9f       	mul	r16, r18
    4e9e:	e0 0d       	add	r30, r0
    4ea0:	f1 1d       	adc	r31, r1
    4ea2:	4e 9d       	mul	r20, r14
    4ea4:	e0 0d       	add	r30, r0
    4ea6:	f1 1d       	adc	r31, r1
    4ea8:	5e 9d       	mul	r21, r14
    4eaa:	f0 0d       	add	r31, r0
    4eac:	4f 9d       	mul	r20, r15
    4eae:	f0 0d       	add	r31, r0
    4eb0:	7f 93       	push	r23
    4eb2:	6f 93       	push	r22
    4eb4:	bf 92       	push	r11
    4eb6:	af 92       	push	r10
    4eb8:	5f 93       	push	r21
    4eba:	4f 93       	push	r20
    4ebc:	d5 01       	movw	r26, r10
    4ebe:	91 d0       	rcall	.+290    	; 0x4fe2 <__umulhisi3>
    4ec0:	8b 01       	movw	r16, r22
    4ec2:	ac 01       	movw	r20, r24
    4ec4:	d7 01       	movw	r26, r14
    4ec6:	8d d0       	rcall	.+282    	; 0x4fe2 <__umulhisi3>
    4ec8:	eb 01       	movw	r28, r22
    4eca:	e8 0f       	add	r30, r24
    4ecc:	f9 1f       	adc	r31, r25
    4ece:	d6 01       	movw	r26, r12
    4ed0:	1f d0       	rcall	.+62     	; 0x4f10 <__muldi3_6>
    4ed2:	2f 91       	pop	r18
    4ed4:	3f 91       	pop	r19
    4ed6:	d6 01       	movw	r26, r12
    4ed8:	84 d0       	rcall	.+264    	; 0x4fe2 <__umulhisi3>
    4eda:	c6 0f       	add	r28, r22
    4edc:	d7 1f       	adc	r29, r23
    4ede:	e8 1f       	adc	r30, r24
    4ee0:	f9 1f       	adc	r31, r25
    4ee2:	af 91       	pop	r26
    4ee4:	bf 91       	pop	r27
    4ee6:	14 d0       	rcall	.+40     	; 0x4f10 <__muldi3_6>
    4ee8:	2f 91       	pop	r18
    4eea:	3f 91       	pop	r19
    4eec:	7a d0       	rcall	.+244    	; 0x4fe2 <__umulhisi3>
    4eee:	c6 0f       	add	r28, r22
    4ef0:	d7 1f       	adc	r29, r23
    4ef2:	e8 1f       	adc	r30, r24
    4ef4:	f9 1f       	adc	r31, r25
    4ef6:	d6 01       	movw	r26, r12
    4ef8:	74 d0       	rcall	.+232    	; 0x4fe2 <__umulhisi3>
    4efa:	e6 0f       	add	r30, r22
    4efc:	f7 1f       	adc	r31, r23
    4efe:	98 01       	movw	r18, r16
    4f00:	be 01       	movw	r22, r28
    4f02:	cf 01       	movw	r24, r30
    4f04:	11 24       	eor	r1, r1
    4f06:	0f 91       	pop	r16
    4f08:	1f 91       	pop	r17
    4f0a:	cf 91       	pop	r28
    4f0c:	df 91       	pop	r29
    4f0e:	08 95       	ret

00004f10 <__muldi3_6>:
    4f10:	68 d0       	rcall	.+208    	; 0x4fe2 <__umulhisi3>
    4f12:	46 0f       	add	r20, r22
    4f14:	57 1f       	adc	r21, r23
    4f16:	c8 1f       	adc	r28, r24
    4f18:	d9 1f       	adc	r29, r25
    4f1a:	08 f4       	brcc	.+2      	; 0x4f1e <__muldi3_6+0xe>
    4f1c:	31 96       	adiw	r30, 0x01	; 1
    4f1e:	08 95       	ret

00004f20 <__ashldi3>:
    4f20:	0f 93       	push	r16
    4f22:	08 30       	cpi	r16, 0x08	; 8
    4f24:	90 f0       	brcs	.+36     	; 0x4f4a <__ashldi3+0x2a>
    4f26:	98 2f       	mov	r25, r24
    4f28:	87 2f       	mov	r24, r23
    4f2a:	76 2f       	mov	r23, r22
    4f2c:	65 2f       	mov	r22, r21
    4f2e:	54 2f       	mov	r21, r20
    4f30:	43 2f       	mov	r20, r19
    4f32:	32 2f       	mov	r19, r18
    4f34:	22 27       	eor	r18, r18
    4f36:	08 50       	subi	r16, 0x08	; 8
    4f38:	f4 cf       	rjmp	.-24     	; 0x4f22 <__ashldi3+0x2>
    4f3a:	22 0f       	add	r18, r18
    4f3c:	33 1f       	adc	r19, r19
    4f3e:	44 1f       	adc	r20, r20
    4f40:	55 1f       	adc	r21, r21
    4f42:	66 1f       	adc	r22, r22
    4f44:	77 1f       	adc	r23, r23
    4f46:	88 1f       	adc	r24, r24
    4f48:	99 1f       	adc	r25, r25
    4f4a:	0a 95       	dec	r16
    4f4c:	b2 f7       	brpl	.-20     	; 0x4f3a <__ashldi3+0x1a>
    4f4e:	0f 91       	pop	r16
    4f50:	08 95       	ret

00004f52 <__ashrdi3>:
    4f52:	97 fb       	bst	r25, 7
    4f54:	10 f8       	bld	r1, 0

00004f56 <__lshrdi3>:
    4f56:	16 94       	lsr	r1
    4f58:	00 08       	sbc	r0, r0
    4f5a:	0f 93       	push	r16
    4f5c:	08 30       	cpi	r16, 0x08	; 8
    4f5e:	98 f0       	brcs	.+38     	; 0x4f86 <__lshrdi3+0x30>
    4f60:	08 50       	subi	r16, 0x08	; 8
    4f62:	23 2f       	mov	r18, r19
    4f64:	34 2f       	mov	r19, r20
    4f66:	45 2f       	mov	r20, r21
    4f68:	56 2f       	mov	r21, r22
    4f6a:	67 2f       	mov	r22, r23
    4f6c:	78 2f       	mov	r23, r24
    4f6e:	89 2f       	mov	r24, r25
    4f70:	90 2d       	mov	r25, r0
    4f72:	f4 cf       	rjmp	.-24     	; 0x4f5c <__lshrdi3+0x6>
    4f74:	05 94       	asr	r0
    4f76:	97 95       	ror	r25
    4f78:	87 95       	ror	r24
    4f7a:	77 95       	ror	r23
    4f7c:	67 95       	ror	r22
    4f7e:	57 95       	ror	r21
    4f80:	47 95       	ror	r20
    4f82:	37 95       	ror	r19
    4f84:	27 95       	ror	r18
    4f86:	0a 95       	dec	r16
    4f88:	aa f7       	brpl	.-22     	; 0x4f74 <__lshrdi3+0x1e>
    4f8a:	0f 91       	pop	r16
    4f8c:	08 95       	ret

00004f8e <__adddi3>:
    4f8e:	2a 0d       	add	r18, r10
    4f90:	3b 1d       	adc	r19, r11
    4f92:	4c 1d       	adc	r20, r12
    4f94:	5d 1d       	adc	r21, r13
    4f96:	6e 1d       	adc	r22, r14
    4f98:	7f 1d       	adc	r23, r15
    4f9a:	80 1f       	adc	r24, r16
    4f9c:	91 1f       	adc	r25, r17
    4f9e:	08 95       	ret

00004fa0 <__adddi3_s8>:
    4fa0:	00 24       	eor	r0, r0
    4fa2:	a7 fd       	sbrc	r26, 7
    4fa4:	00 94       	com	r0
    4fa6:	2a 0f       	add	r18, r26
    4fa8:	30 1d       	adc	r19, r0
    4faa:	40 1d       	adc	r20, r0
    4fac:	50 1d       	adc	r21, r0
    4fae:	60 1d       	adc	r22, r0
    4fb0:	70 1d       	adc	r23, r0
    4fb2:	80 1d       	adc	r24, r0
    4fb4:	90 1d       	adc	r25, r0
    4fb6:	08 95       	ret

00004fb8 <__subdi3>:
    4fb8:	2a 19       	sub	r18, r10
    4fba:	3b 09       	sbc	r19, r11
    4fbc:	4c 09       	sbc	r20, r12
    4fbe:	5d 09       	sbc	r21, r13
    4fc0:	6e 09       	sbc	r22, r14
    4fc2:	7f 09       	sbc	r23, r15
    4fc4:	80 0b       	sbc	r24, r16
    4fc6:	91 0b       	sbc	r25, r17
    4fc8:	08 95       	ret

00004fca <__cmpdi2_s8>:
    4fca:	00 24       	eor	r0, r0
    4fcc:	a7 fd       	sbrc	r26, 7
    4fce:	00 94       	com	r0
    4fd0:	2a 17       	cp	r18, r26
    4fd2:	30 05       	cpc	r19, r0
    4fd4:	40 05       	cpc	r20, r0
    4fd6:	50 05       	cpc	r21, r0
    4fd8:	60 05       	cpc	r22, r0
    4fda:	70 05       	cpc	r23, r0
    4fdc:	80 05       	cpc	r24, r0
    4fde:	90 05       	cpc	r25, r0
    4fe0:	08 95       	ret

00004fe2 <__umulhisi3>:
    4fe2:	a2 9f       	mul	r26, r18
    4fe4:	b0 01       	movw	r22, r0
    4fe6:	b3 9f       	mul	r27, r19
    4fe8:	c0 01       	movw	r24, r0
    4fea:	a3 9f       	mul	r26, r19
    4fec:	70 0d       	add	r23, r0
    4fee:	81 1d       	adc	r24, r1
    4ff0:	11 24       	eor	r1, r1
    4ff2:	91 1d       	adc	r25, r1
    4ff4:	b2 9f       	mul	r27, r18
    4ff6:	70 0d       	add	r23, r0
    4ff8:	81 1d       	adc	r24, r1
    4ffa:	11 24       	eor	r1, r1
    4ffc:	91 1d       	adc	r25, r1
    4ffe:	08 95       	ret

00005000 <memcpy_P>:
    5000:	fb 01       	movw	r30, r22
    5002:	dc 01       	movw	r26, r24
    5004:	02 c0       	rjmp	.+4      	; 0x500a <memcpy_P+0xa>
    5006:	05 90       	lpm	r0, Z+
    5008:	0d 92       	st	X+, r0
    500a:	41 50       	subi	r20, 0x01	; 1
    500c:	50 40       	sbci	r21, 0x00	; 0
    500e:	d8 f7       	brcc	.-10     	; 0x5006 <memcpy_P+0x6>
    5010:	08 95       	ret

00005012 <memcmp>:
    5012:	fb 01       	movw	r30, r22
    5014:	dc 01       	movw	r26, r24
    5016:	04 c0       	rjmp	.+8      	; 0x5020 <memcmp+0xe>
    5018:	8d 91       	ld	r24, X+
    501a:	01 90       	ld	r0, Z+
    501c:	80 19       	sub	r24, r0
    501e:	21 f4       	brne	.+8      	; 0x5028 <memcmp+0x16>
    5020:	41 50       	subi	r20, 0x01	; 1
    5022:	50 40       	sbci	r21, 0x00	; 0
    5024:	c8 f7       	brcc	.-14     	; 0x5018 <memcmp+0x6>
    5026:	88 1b       	sub	r24, r24
    5028:	99 0b       	sbc	r25, r25
    502a:	08 95       	ret

0000502c <strncpy>:
    502c:	fb 01       	movw	r30, r22
    502e:	dc 01       	movw	r26, r24
    5030:	41 50       	subi	r20, 0x01	; 1
    5032:	50 40       	sbci	r21, 0x00	; 0
    5034:	48 f0       	brcs	.+18     	; 0x5048 <strncpy+0x1c>
    5036:	01 90       	ld	r0, Z+
    5038:	0d 92       	st	X+, r0
    503a:	00 20       	and	r0, r0
    503c:	c9 f7       	brne	.-14     	; 0x5030 <strncpy+0x4>
    503e:	01 c0       	rjmp	.+2      	; 0x5042 <strncpy+0x16>
    5040:	1d 92       	st	X+, r1
    5042:	41 50       	subi	r20, 0x01	; 1
    5044:	50 40       	sbci	r21, 0x00	; 0
    5046:	e0 f7       	brcc	.-8      	; 0x5040 <strncpy+0x14>
    5048:	08 95       	ret

0000504a <_exit>:
    504a:	f8 94       	cli

0000504c <__stop_program>:
    504c:	ff cf       	rjmp	.-2      	; 0x504c <__stop_program>
