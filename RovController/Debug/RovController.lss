
RovController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002e8  00800200  00005422  000054b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005422  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000776  008004e8  008004e8  0000579e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000579e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000057d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000a50  00000000  00000000  00005810  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001884c  00000000  00000000  00006260  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005204  00000000  00000000  0001eaac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000062a8  00000000  00000000  00023cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001ed4  00000000  00000000  00029f58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00006ccc  00000000  00000000  0002be2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000bfe5  00000000  00000000  00032af8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000988  00000000  00000000  0003eadd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4a c1       	rjmp	.+660    	; 0x296 <__ctors_end>
       2:	00 00       	nop
       4:	79 c1       	rjmp	.+754    	; 0x2f8 <__bad_interrupt>
       6:	00 00       	nop
       8:	77 c1       	rjmp	.+750    	; 0x2f8 <__bad_interrupt>
       a:	00 00       	nop
       c:	75 c1       	rjmp	.+746    	; 0x2f8 <__bad_interrupt>
       e:	00 00       	nop
      10:	73 c1       	rjmp	.+742    	; 0x2f8 <__bad_interrupt>
      12:	00 00       	nop
      14:	71 c1       	rjmp	.+738    	; 0x2f8 <__bad_interrupt>
      16:	00 00       	nop
      18:	6f c1       	rjmp	.+734    	; 0x2f8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	6d c1       	rjmp	.+730    	; 0x2f8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	6b c1       	rjmp	.+726    	; 0x2f8 <__bad_interrupt>
      22:	00 00       	nop
      24:	69 c1       	rjmp	.+722    	; 0x2f8 <__bad_interrupt>
      26:	00 00       	nop
      28:	67 c1       	rjmp	.+718    	; 0x2f8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	65 c1       	rjmp	.+714    	; 0x2f8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	63 c1       	rjmp	.+710    	; 0x2f8 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 12 0f 	jmp	0x1e24	; 0x1e24 <__vector_13>
      38:	5f c1       	rjmp	.+702    	; 0x2f8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	5d c1       	rjmp	.+698    	; 0x2f8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	5b c1       	rjmp	.+694    	; 0x2f8 <__bad_interrupt>
      42:	00 00       	nop
      44:	59 c1       	rjmp	.+690    	; 0x2f8 <__bad_interrupt>
      46:	00 00       	nop
      48:	57 c1       	rjmp	.+686    	; 0x2f8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	55 c1       	rjmp	.+682    	; 0x2f8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	53 c1       	rjmp	.+678    	; 0x2f8 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 e9 0e 	jmp	0x1dd2	; 0x1dd2 <__vector_21>
      58:	4f c1       	rjmp	.+670    	; 0x2f8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	4d c1       	rjmp	.+666    	; 0x2f8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	4b c1       	rjmp	.+662    	; 0x2f8 <__bad_interrupt>
      62:	00 00       	nop
      64:	49 c1       	rjmp	.+658    	; 0x2f8 <__bad_interrupt>
      66:	00 00       	nop
      68:	47 c1       	rjmp	.+654    	; 0x2f8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	45 c1       	rjmp	.+650    	; 0x2f8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	43 c1       	rjmp	.+646    	; 0x2f8 <__bad_interrupt>
      72:	00 00       	nop
      74:	41 c1       	rjmp	.+642    	; 0x2f8 <__bad_interrupt>
      76:	00 00       	nop
      78:	3f c1       	rjmp	.+638    	; 0x2f8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	3d c1       	rjmp	.+634    	; 0x2f8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	3b c1       	rjmp	.+630    	; 0x2f8 <__bad_interrupt>
      82:	00 00       	nop
      84:	39 c1       	rjmp	.+626    	; 0x2f8 <__bad_interrupt>
      86:	00 00       	nop
      88:	37 c1       	rjmp	.+622    	; 0x2f8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	35 c1       	rjmp	.+618    	; 0x2f8 <__bad_interrupt>
      8e:	00 00       	nop
      90:	33 c1       	rjmp	.+614    	; 0x2f8 <__bad_interrupt>
      92:	00 00       	nop
      94:	31 c1       	rjmp	.+610    	; 0x2f8 <__bad_interrupt>
      96:	00 00       	nop
      98:	2f c1       	rjmp	.+606    	; 0x2f8 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 8f 10 	jmp	0x211e	; 0x211e <__vector_39>
      a0:	2b c1       	rjmp	.+598    	; 0x2f8 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	29 c1       	rjmp	.+594    	; 0x2f8 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	27 c1       	rjmp	.+590    	; 0x2f8 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	25 c1       	rjmp	.+586    	; 0x2f8 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	23 c1       	rjmp	.+582    	; 0x2f8 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	21 c1       	rjmp	.+578    	; 0x2f8 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	1f c1       	rjmp	.+574    	; 0x2f8 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	1d c1       	rjmp	.+570    	; 0x2f8 <__bad_interrupt>
      be:	00 00       	nop
      c0:	1b c1       	rjmp	.+566    	; 0x2f8 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	19 c1       	rjmp	.+562    	; 0x2f8 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	17 c1       	rjmp	.+558    	; 0x2f8 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	15 c1       	rjmp	.+554    	; 0x2f8 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	13 c1       	rjmp	.+550    	; 0x2f8 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	11 c1       	rjmp	.+546    	; 0x2f8 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0f c1       	rjmp	.+542    	; 0x2f8 <__bad_interrupt>
      da:	00 00       	nop
      dc:	0d c1       	rjmp	.+538    	; 0x2f8 <__bad_interrupt>
      de:	00 00       	nop
      e0:	0b c1       	rjmp	.+534    	; 0x2f8 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	96 11       	cpse	r25, r6
      e6:	99 11       	cpse	r25, r9
      e8:	99 11       	cpse	r25, r9
      ea:	99 11       	cpse	r25, r9
      ec:	99 11       	cpse	r25, r9
      ee:	99 11       	cpse	r25, r9
      f0:	99 11       	cpse	r25, r9
      f2:	99 11       	cpse	r25, r9
      f4:	b1 10       	cpse	r11, r1
      f6:	99 11       	cpse	r25, r9
      f8:	99 11       	cpse	r25, r9
      fa:	99 11       	cpse	r25, r9
      fc:	99 11       	cpse	r25, r9
      fe:	99 11       	cpse	r25, r9
     100:	99 11       	cpse	r25, r9
     102:	99 11       	cpse	r25, r9
     104:	b1 10       	cpse	r11, r1
     106:	99 11       	cpse	r25, r9
     108:	99 11       	cpse	r25, r9
     10a:	99 11       	cpse	r25, r9
     10c:	99 11       	cpse	r25, r9
     10e:	99 11       	cpse	r25, r9
     110:	99 11       	cpse	r25, r9
     112:	99 11       	cpse	r25, r9
     114:	b9 10       	cpse	r11, r9
     116:	99 11       	cpse	r25, r9
     118:	99 11       	cpse	r25, r9
     11a:	99 11       	cpse	r25, r9
     11c:	99 11       	cpse	r25, r9
     11e:	99 11       	cpse	r25, r9
     120:	99 11       	cpse	r25, r9
     122:	99 11       	cpse	r25, r9
     124:	de 10       	cpse	r13, r14
     126:	99 11       	cpse	r25, r9
     128:	99 11       	cpse	r25, r9
     12a:	99 11       	cpse	r25, r9
     12c:	99 11       	cpse	r25, r9
     12e:	99 11       	cpse	r25, r9
     130:	99 11       	cpse	r25, r9
     132:	99 11       	cpse	r25, r9
     134:	b9 10       	cpse	r11, r9
     136:	99 11       	cpse	r25, r9
     138:	99 11       	cpse	r25, r9
     13a:	99 11       	cpse	r25, r9
     13c:	99 11       	cpse	r25, r9
     13e:	99 11       	cpse	r25, r9
     140:	99 11       	cpse	r25, r9
     142:	99 11       	cpse	r25, r9
     144:	e3 10       	cpse	r14, r3
     146:	99 11       	cpse	r25, r9
     148:	99 11       	cpse	r25, r9
     14a:	99 11       	cpse	r25, r9
     14c:	99 11       	cpse	r25, r9
     14e:	99 11       	cpse	r25, r9
     150:	99 11       	cpse	r25, r9
     152:	99 11       	cpse	r25, r9
     154:	e8 10       	cpse	r14, r8
     156:	99 11       	cpse	r25, r9
     158:	99 11       	cpse	r25, r9
     15a:	99 11       	cpse	r25, r9
     15c:	99 11       	cpse	r25, r9
     15e:	99 11       	cpse	r25, r9
     160:	99 11       	cpse	r25, r9
     162:	99 11       	cpse	r25, r9
     164:	f9 10       	cpse	r15, r9
     166:	99 11       	cpse	r25, r9
     168:	99 11       	cpse	r25, r9
     16a:	99 11       	cpse	r25, r9
     16c:	99 11       	cpse	r25, r9
     16e:	99 11       	cpse	r25, r9
     170:	99 11       	cpse	r25, r9
     172:	99 11       	cpse	r25, r9
     174:	22 11       	cpse	r18, r2
     176:	99 11       	cpse	r25, r9
     178:	99 11       	cpse	r25, r9
     17a:	99 11       	cpse	r25, r9
     17c:	99 11       	cpse	r25, r9
     17e:	99 11       	cpse	r25, r9
     180:	99 11       	cpse	r25, r9
     182:	99 11       	cpse	r25, r9
     184:	ed 10       	cpse	r14, r13
     186:	99 11       	cpse	r25, r9
     188:	99 11       	cpse	r25, r9
     18a:	99 11       	cpse	r25, r9
     18c:	99 11       	cpse	r25, r9
     18e:	99 11       	cpse	r25, r9
     190:	99 11       	cpse	r25, r9
     192:	99 11       	cpse	r25, r9
     194:	07 11       	cpse	r16, r7
     196:	99 11       	cpse	r25, r9
     198:	99 11       	cpse	r25, r9
     19a:	99 11       	cpse	r25, r9
     19c:	99 11       	cpse	r25, r9
     19e:	99 11       	cpse	r25, r9
     1a0:	99 11       	cpse	r25, r9
     1a2:	99 11       	cpse	r25, r9
     1a4:	24 11       	cpse	r18, r4
     1a6:	99 11       	cpse	r25, r9
     1a8:	99 11       	cpse	r25, r9
     1aa:	99 11       	cpse	r25, r9
     1ac:	99 11       	cpse	r25, r9
     1ae:	99 11       	cpse	r25, r9
     1b0:	99 11       	cpse	r25, r9
     1b2:	99 11       	cpse	r25, r9
     1b4:	24 11       	cpse	r18, r4
     1b6:	99 11       	cpse	r25, r9
     1b8:	99 11       	cpse	r25, r9
     1ba:	99 11       	cpse	r25, r9
     1bc:	99 11       	cpse	r25, r9
     1be:	99 11       	cpse	r25, r9
     1c0:	99 11       	cpse	r25, r9
     1c2:	99 11       	cpse	r25, r9
     1c4:	24 11       	cpse	r18, r4
     1c6:	99 11       	cpse	r25, r9
     1c8:	99 11       	cpse	r25, r9
     1ca:	99 11       	cpse	r25, r9
     1cc:	99 11       	cpse	r25, r9
     1ce:	99 11       	cpse	r25, r9
     1d0:	99 11       	cpse	r25, r9
     1d2:	99 11       	cpse	r25, r9
     1d4:	24 11       	cpse	r18, r4
     1d6:	99 11       	cpse	r25, r9
     1d8:	99 11       	cpse	r25, r9
     1da:	99 11       	cpse	r25, r9
     1dc:	99 11       	cpse	r25, r9
     1de:	99 11       	cpse	r25, r9
     1e0:	99 11       	cpse	r25, r9
     1e2:	99 11       	cpse	r25, r9
     1e4:	2d 11       	cpse	r18, r13
     1e6:	99 11       	cpse	r25, r9
     1e8:	99 11       	cpse	r25, r9
     1ea:	99 11       	cpse	r25, r9
     1ec:	99 11       	cpse	r25, r9
     1ee:	99 11       	cpse	r25, r9
     1f0:	99 11       	cpse	r25, r9
     1f2:	99 11       	cpse	r25, r9
     1f4:	5d 11       	cpse	r21, r13
     1f6:	99 11       	cpse	r25, r9
     1f8:	99 11       	cpse	r25, r9
     1fa:	99 11       	cpse	r25, r9
     1fc:	99 11       	cpse	r25, r9
     1fe:	99 11       	cpse	r25, r9
     200:	99 11       	cpse	r25, r9
     202:	99 11       	cpse	r25, r9
     204:	2d 11       	cpse	r18, r13
     206:	99 11       	cpse	r25, r9
     208:	99 11       	cpse	r25, r9
     20a:	99 11       	cpse	r25, r9
     20c:	99 11       	cpse	r25, r9
     20e:	99 11       	cpse	r25, r9
     210:	99 11       	cpse	r25, r9
     212:	99 11       	cpse	r25, r9
     214:	5d 11       	cpse	r21, r13
     216:	99 11       	cpse	r25, r9
     218:	99 11       	cpse	r25, r9
     21a:	99 11       	cpse	r25, r9
     21c:	99 11       	cpse	r25, r9
     21e:	99 11       	cpse	r25, r9
     220:	99 11       	cpse	r25, r9
     222:	99 11       	cpse	r25, r9
     224:	45 11       	cpse	r20, r5
     226:	99 11       	cpse	r25, r9
     228:	99 11       	cpse	r25, r9
     22a:	99 11       	cpse	r25, r9
     22c:	99 11       	cpse	r25, r9
     22e:	99 11       	cpse	r25, r9
     230:	99 11       	cpse	r25, r9
     232:	99 11       	cpse	r25, r9
     234:	61 11       	cpse	r22, r1
     236:	99 11       	cpse	r25, r9
     238:	99 11       	cpse	r25, r9
     23a:	99 11       	cpse	r25, r9
     23c:	99 11       	cpse	r25, r9
     23e:	99 11       	cpse	r25, r9
     240:	99 11       	cpse	r25, r9
     242:	99 11       	cpse	r25, r9
     244:	61 11       	cpse	r22, r1
     246:	99 11       	cpse	r25, r9
     248:	99 11       	cpse	r25, r9
     24a:	99 11       	cpse	r25, r9
     24c:	99 11       	cpse	r25, r9
     24e:	99 11       	cpse	r25, r9
     250:	99 11       	cpse	r25, r9
     252:	99 11       	cpse	r25, r9
     254:	76 11       	cpse	r23, r6
     256:	99 11       	cpse	r25, r9
     258:	99 11       	cpse	r25, r9
     25a:	99 11       	cpse	r25, r9
     25c:	99 11       	cpse	r25, r9
     25e:	99 11       	cpse	r25, r9
     260:	99 11       	cpse	r25, r9
     262:	99 11       	cpse	r25, r9
     264:	90 11       	cpse	r25, r0
     266:	99 11       	cpse	r25, r9
     268:	99 11       	cpse	r25, r9
     26a:	99 11       	cpse	r25, r9
     26c:	99 11       	cpse	r25, r9
     26e:	99 11       	cpse	r25, r9
     270:	99 11       	cpse	r25, r9
     272:	99 11       	cpse	r25, r9
     274:	90 11       	cpse	r25, r0

00000276 <__trampolines_end>:
     276:	45 00       	.word	0x0045	; ????
     278:	00 82       	st	Z, r0
     27a:	00 00       	nop
     27c:	40 00       	.word	0x0040	; ????
     27e:	20 00       	Address 0x0000027e is out of bounds.
.word	0xffff	; ????

0000027f <_ZL9arpreqhdr>:
     27f:	00 01 08 00 06 04 00 01 00                          .........

00000288 <__ctors_start>:
     288:	f5 04       	cpc	r15, r5
     28a:	76 0c       	add	r7, r6
     28c:	59 0d       	add	r21, r9
     28e:	3b 0f       	add	r19, r27
     290:	0a 13       	cpse	r16, r26
     292:	34 1e       	adc	r3, r20
     294:	14 22       	and	r1, r20

00000296 <__ctors_end>:
     296:	11 24       	eor	r1, r1
     298:	1f be       	out	0x3f, r1	; 63
     29a:	cf ef       	ldi	r28, 0xFF	; 255
     29c:	d1 e2       	ldi	r29, 0x21	; 33
     29e:	de bf       	out	0x3e, r29	; 62
     2a0:	cd bf       	out	0x3d, r28	; 61
     2a2:	00 e0       	ldi	r16, 0x00	; 0
     2a4:	0c bf       	out	0x3c, r16	; 60

000002a6 <__do_copy_data>:
     2a6:	14 e0       	ldi	r17, 0x04	; 4
     2a8:	a0 e0       	ldi	r26, 0x00	; 0
     2aa:	b2 e0       	ldi	r27, 0x02	; 2
     2ac:	e2 e2       	ldi	r30, 0x22	; 34
     2ae:	f4 e5       	ldi	r31, 0x54	; 84
     2b0:	00 e0       	ldi	r16, 0x00	; 0
     2b2:	0b bf       	out	0x3b, r16	; 59
     2b4:	02 c0       	rjmp	.+4      	; 0x2ba <__do_copy_data+0x14>
     2b6:	07 90       	elpm	r0, Z+
     2b8:	0d 92       	st	X+, r0
     2ba:	a8 3e       	cpi	r26, 0xE8	; 232
     2bc:	b1 07       	cpc	r27, r17
     2be:	d9 f7       	brne	.-10     	; 0x2b6 <__do_copy_data+0x10>

000002c0 <__do_clear_bss>:
     2c0:	2c e0       	ldi	r18, 0x0C	; 12
     2c2:	a8 ee       	ldi	r26, 0xE8	; 232
     2c4:	b4 e0       	ldi	r27, 0x04	; 4
     2c6:	01 c0       	rjmp	.+2      	; 0x2ca <.do_clear_bss_start>

000002c8 <.do_clear_bss_loop>:
     2c8:	1d 92       	st	X+, r1

000002ca <.do_clear_bss_start>:
     2ca:	ae 35       	cpi	r26, 0x5E	; 94
     2cc:	b2 07       	cpc	r27, r18
     2ce:	e1 f7       	brne	.-8      	; 0x2c8 <.do_clear_bss_loop>

000002d0 <__do_global_ctors>:
     2d0:	11 e0       	ldi	r17, 0x01	; 1
     2d2:	cb e4       	ldi	r28, 0x4B	; 75
     2d4:	d1 e0       	ldi	r29, 0x01	; 1
     2d6:	00 e0       	ldi	r16, 0x00	; 0
     2d8:	06 c0       	rjmp	.+12     	; 0x2e6 <__do_global_ctors+0x16>
     2da:	21 97       	sbiw	r28, 0x01	; 1
     2dc:	01 09       	sbc	r16, r1
     2de:	80 2f       	mov	r24, r16
     2e0:	fe 01       	movw	r30, r28
     2e2:	0e 94 17 29 	call	0x522e	; 0x522e <__tablejump2__>
     2e6:	c4 34       	cpi	r28, 0x44	; 68
     2e8:	d1 07       	cpc	r29, r17
     2ea:	80 e0       	ldi	r24, 0x00	; 0
     2ec:	08 07       	cpc	r16, r24
     2ee:	a9 f7       	brne	.-22     	; 0x2da <__do_global_ctors+0xa>
     2f0:	0e 94 b6 0b 	call	0x176c	; 0x176c <main>
     2f4:	0c 94 0f 2a 	jmp	0x541e	; 0x541e <_exit>

000002f8 <__bad_interrupt>:
     2f8:	83 ce       	rjmp	.-762    	; 0x0 <__vectors>

000002fa <_ZN15Adafruit_Sensor15enableAutoRangeEb>:

    setMode(lastMode);
    return true;
  }
  return false;
}
     2fa:	08 95       	ret

000002fc <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>:
     2fc:	0f 93       	push	r16
     2fe:	1f 93       	push	r17
     300:	cf 93       	push	r28
     302:	df 93       	push	r29
     304:	8c 01       	movw	r16, r24
     306:	eb 01       	movw	r28, r22
     308:	88 e2       	ldi	r24, 0x28	; 40
     30a:	fb 01       	movw	r30, r22
     30c:	11 92       	st	Z+, r1
     30e:	8a 95       	dec	r24
     310:	e9 f7       	brne	.-6      	; 0x30c <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x10>
     312:	4b e0       	ldi	r20, 0x0B	; 11
     314:	50 e0       	ldi	r21, 0x00	; 0
     316:	64 e1       	ldi	r22, 0x14	; 20
     318:	72 e0       	ldi	r23, 0x02	; 2
     31a:	ce 01       	movw	r24, r28
     31c:	0e 94 00 2a 	call	0x5400	; 0x5400 <strncpy>
     320:	1b 86       	std	Y+11, r1	; 0x0b
     322:	81 e0       	ldi	r24, 0x01	; 1
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	a0 e0       	ldi	r26, 0x00	; 0
     328:	b0 e0       	ldi	r27, 0x00	; 0
     32a:	8c 87       	std	Y+12, r24	; 0x0c
     32c:	9d 87       	std	Y+13, r25	; 0x0d
     32e:	ae 87       	std	Y+14, r26	; 0x0e
     330:	bf 87       	std	Y+15, r27	; 0x0f
     332:	f8 01       	movw	r30, r16
     334:	86 81       	ldd	r24, Z+6	; 0x06
     336:	97 81       	ldd	r25, Z+7	; 0x07
     338:	a0 85       	ldd	r26, Z+8	; 0x08
     33a:	b1 85       	ldd	r27, Z+9	; 0x09
     33c:	88 8b       	std	Y+16, r24	; 0x10
     33e:	99 8b       	std	Y+17, r25	; 0x11
     340:	aa 8b       	std	Y+18, r26	; 0x12
     342:	bb 8b       	std	Y+19, r27	; 0x13
     344:	83 e0       	ldi	r24, 0x03	; 3
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	a0 e0       	ldi	r26, 0x00	; 0
     34a:	b0 e0       	ldi	r27, 0x00	; 0
     34c:	8c 8b       	std	Y+20, r24	; 0x14
     34e:	9d 8b       	std	Y+21, r25	; 0x15
     350:	ae 8b       	std	Y+22, r26	; 0x16
     352:	bf 8b       	std	Y+23, r27	; 0x17
     354:	1c a2       	std	Y+36, r1	; 0x24
     356:	1d a2       	std	Y+37, r1	; 0x25
     358:	1e a2       	std	Y+38, r1	; 0x26
     35a:	1f a2       	std	Y+39, r1	; 0x27
     35c:	18 8e       	std	Y+24, r1	; 0x18
     35e:	19 8e       	std	Y+25, r1	; 0x19
     360:	1a 8e       	std	Y+26, r1	; 0x1a
     362:	1b 8e       	std	Y+27, r1	; 0x1b
     364:	1c 8e       	std	Y+28, r1	; 0x1c
     366:	1d 8e       	std	Y+29, r1	; 0x1d
     368:	1e 8e       	std	Y+30, r1	; 0x1e
     36a:	1f 8e       	std	Y+31, r1	; 0x1f
     36c:	8a e0       	ldi	r24, 0x0A	; 10
     36e:	97 ed       	ldi	r25, 0xD7	; 215
     370:	a3 e2       	ldi	r26, 0x23	; 35
     372:	bc e3       	ldi	r27, 0x3C	; 60
     374:	88 a3       	std	Y+32, r24	; 0x20
     376:	99 a3       	std	Y+33, r25	; 0x21
     378:	aa a3       	std	Y+34, r26	; 0x22
     37a:	bb a3       	std	Y+35, r27	; 0x23
     37c:	df 91       	pop	r29
     37e:	cf 91       	pop	r28
     380:	1f 91       	pop	r17
     382:	0f 91       	pop	r16
     384:	08 95       	ret

00000386 <_ZN15Adafruit_BNO055C1ElhP7TwoWire>:
     386:	0f 93       	push	r16
     388:	1f 93       	push	r17
     38a:	fc 01       	movw	r30, r24
     38c:	8f e1       	ldi	r24, 0x1F	; 31
     38e:	92 e0       	ldi	r25, 0x02	; 2
     390:	91 83       	std	Z+1, r25	; 0x01
     392:	80 83       	st	Z, r24
     394:	46 83       	std	Z+6, r20	; 0x06
     396:	57 83       	std	Z+7, r21	; 0x07
     398:	60 87       	std	Z+8, r22	; 0x08
     39a:	71 87       	std	Z+9, r23	; 0x09
     39c:	23 83       	std	Z+3, r18	; 0x03
     39e:	15 83       	std	Z+5, r17	; 0x05
     3a0:	04 83       	std	Z+4, r16	; 0x04
     3a2:	1f 91       	pop	r17
     3a4:	0f 91       	pop	r16
     3a6:	08 95       	ret

000003a8 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>:
     3a8:	0f 93       	push	r16
     3aa:	1f 93       	push	r17
     3ac:	cf 93       	push	r28
     3ae:	df 93       	push	r29
     3b0:	ec 01       	movw	r28, r24
     3b2:	06 2f       	mov	r16, r22
     3b4:	14 2f       	mov	r17, r20
     3b6:	6b 81       	ldd	r22, Y+3	; 0x03
     3b8:	8c 81       	ldd	r24, Y+4	; 0x04
     3ba:	9d 81       	ldd	r25, Y+5	; 0x05
     3bc:	0e 94 7e 12 	call	0x24fc	; 0x24fc <_ZN7TwoWire17beginTransmissionEh>
     3c0:	8c 81       	ldd	r24, Y+4	; 0x04
     3c2:	9d 81       	ldd	r25, Y+5	; 0x05
     3c4:	dc 01       	movw	r26, r24
     3c6:	ed 91       	ld	r30, X+
     3c8:	fc 91       	ld	r31, X
     3ca:	01 90       	ld	r0, Z+
     3cc:	f0 81       	ld	r31, Z
     3ce:	e0 2d       	mov	r30, r0
     3d0:	60 2f       	mov	r22, r16
     3d2:	19 95       	eicall
     3d4:	8c 81       	ldd	r24, Y+4	; 0x04
     3d6:	9d 81       	ldd	r25, Y+5	; 0x05
     3d8:	dc 01       	movw	r26, r24
     3da:	ed 91       	ld	r30, X+
     3dc:	fc 91       	ld	r31, X
     3de:	01 90       	ld	r0, Z+
     3e0:	f0 81       	ld	r31, Z
     3e2:	e0 2d       	mov	r30, r0
     3e4:	61 2f       	mov	r22, r17
     3e6:	19 95       	eicall
     3e8:	8c 81       	ldd	r24, Y+4	; 0x04
     3ea:	9d 81       	ldd	r25, Y+5	; 0x05
     3ec:	0e 94 07 13 	call	0x260e	; 0x260e <_ZN7TwoWire15endTransmissionEv>
     3f0:	81 e0       	ldi	r24, 0x01	; 1
     3f2:	df 91       	pop	r29
     3f4:	cf 91       	pop	r28
     3f6:	1f 91       	pop	r17
     3f8:	0f 91       	pop	r16
     3fa:	08 95       	ret

000003fc <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>:
     3fc:	46 2f       	mov	r20, r22
     3fe:	fc 01       	movw	r30, r24
     400:	62 87       	std	Z+10, r22	; 0x0a
     402:	6d e3       	ldi	r22, 0x3D	; 61
     404:	d1 df       	rcall	.-94     	; 0x3a8 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     406:	ff ef       	ldi	r31, 0xFF	; 255
     408:	26 e7       	ldi	r18, 0x76	; 118
     40a:	81 e0       	ldi	r24, 0x01	; 1
     40c:	f1 50       	subi	r31, 0x01	; 1
     40e:	20 40       	sbci	r18, 0x00	; 0
     410:	80 40       	sbci	r24, 0x00	; 0
     412:	e1 f7       	brne	.-8      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     414:	00 c0       	rjmp	.+0      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     416:	00 00       	nop
     418:	08 95       	ret

0000041a <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>:
     41a:	1f 93       	push	r17
     41c:	cf 93       	push	r28
     41e:	df 93       	push	r29
     420:	ec 01       	movw	r28, r24
     422:	16 2f       	mov	r17, r22
     424:	6b 81       	ldd	r22, Y+3	; 0x03
     426:	8c 81       	ldd	r24, Y+4	; 0x04
     428:	9d 81       	ldd	r25, Y+5	; 0x05
     42a:	0e 94 7e 12 	call	0x24fc	; 0x24fc <_ZN7TwoWire17beginTransmissionEh>
     42e:	8c 81       	ldd	r24, Y+4	; 0x04
     430:	9d 81       	ldd	r25, Y+5	; 0x05
     432:	dc 01       	movw	r26, r24
     434:	ed 91       	ld	r30, X+
     436:	fc 91       	ld	r31, X
     438:	01 90       	ld	r0, Z+
     43a:	f0 81       	ld	r31, Z
     43c:	e0 2d       	mov	r30, r0
     43e:	61 2f       	mov	r22, r17
     440:	19 95       	eicall
     442:	8c 81       	ldd	r24, Y+4	; 0x04
     444:	9d 81       	ldd	r25, Y+5	; 0x05
     446:	0e 94 07 13 	call	0x260e	; 0x260e <_ZN7TwoWire15endTransmissionEv>
     44a:	41 e0       	ldi	r20, 0x01	; 1
     44c:	6b 81       	ldd	r22, Y+3	; 0x03
     44e:	8c 81       	ldd	r24, Y+4	; 0x04
     450:	9d 81       	ldd	r25, Y+5	; 0x05
     452:	0e 94 01 13 	call	0x2602	; 0x2602 <_ZN7TwoWire11requestFromEhh>
     456:	8c 81       	ldd	r24, Y+4	; 0x04
     458:	9d 81       	ldd	r25, Y+5	; 0x05
     45a:	dc 01       	movw	r26, r24
     45c:	ed 91       	ld	r30, X+
     45e:	fc 91       	ld	r31, X
     460:	02 84       	ldd	r0, Z+10	; 0x0a
     462:	f3 85       	ldd	r31, Z+11	; 0x0b
     464:	e0 2d       	mov	r30, r0
     466:	19 95       	eicall
     468:	df 91       	pop	r29
     46a:	cf 91       	pop	r28
     46c:	1f 91       	pop	r17
     46e:	08 95       	ret

00000470 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>:
     470:	1f 93       	push	r17
     472:	cf 93       	push	r28
     474:	df 93       	push	r29
     476:	ec 01       	movw	r28, r24
     478:	16 2f       	mov	r17, r22
     47a:	8c 81       	ldd	r24, Y+4	; 0x04
     47c:	9d 81       	ldd	r25, Y+5	; 0x05
     47e:	0e 94 69 12 	call	0x24d2	; 0x24d2 <_ZN7TwoWire5beginEv>
     482:	60 e0       	ldi	r22, 0x00	; 0
     484:	ce 01       	movw	r24, r28
     486:	c9 df       	rcall	.-110    	; 0x41a <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
     488:	80 3a       	cpi	r24, 0xA0	; 160
     48a:	79 f0       	breq	.+30     	; 0x4aa <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x3a>
     48c:	2f ef       	ldi	r18, 0xFF	; 255
     48e:	83 ed       	ldi	r24, 0xD3	; 211
     490:	90 e3       	ldi	r25, 0x30	; 48
     492:	21 50       	subi	r18, 0x01	; 1
     494:	80 40       	sbci	r24, 0x00	; 0
     496:	90 40       	sbci	r25, 0x00	; 0
     498:	e1 f7       	brne	.-8      	; 0x492 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x22>
     49a:	00 c0       	rjmp	.+0      	; 0x49c <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x2c>
     49c:	00 00       	nop
     49e:	60 e0       	ldi	r22, 0x00	; 0
     4a0:	ce 01       	movw	r24, r28
     4a2:	bb df       	rcall	.-138    	; 0x41a <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
     4a4:	80 3a       	cpi	r24, 0xA0	; 160
     4a6:	09 f0       	breq	.+2      	; 0x4aa <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x3a>
     4a8:	4b c0       	rjmp	.+150    	; 0x540 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xd0>
     4aa:	60 e0       	ldi	r22, 0x00	; 0
     4ac:	ce 01       	movw	r24, r28
     4ae:	a6 df       	rcall	.-180    	; 0x3fc <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
     4b0:	40 e2       	ldi	r20, 0x20	; 32
     4b2:	6f e3       	ldi	r22, 0x3F	; 63
     4b4:	ce 01       	movw	r24, r28
     4b6:	78 df       	rcall	.-272    	; 0x3a8 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     4b8:	2f ef       	ldi	r18, 0xFF	; 255
     4ba:	86 e7       	ldi	r24, 0x76	; 118
     4bc:	91 e0       	ldi	r25, 0x01	; 1
     4be:	21 50       	subi	r18, 0x01	; 1
     4c0:	80 40       	sbci	r24, 0x00	; 0
     4c2:	90 40       	sbci	r25, 0x00	; 0
     4c4:	e1 f7       	brne	.-8      	; 0x4be <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x4e>
     4c6:	00 c0       	rjmp	.+0      	; 0x4c8 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x58>
     4c8:	00 00       	nop
     4ca:	60 e0       	ldi	r22, 0x00	; 0
     4cc:	ce 01       	movw	r24, r28
     4ce:	a5 df       	rcall	.-182    	; 0x41a <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
     4d0:	80 3a       	cpi	r24, 0xA0	; 160
     4d2:	39 f0       	breq	.+14     	; 0x4e2 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x72>
     4d4:	8f e3       	ldi	r24, 0x3F	; 63
     4d6:	9c e9       	ldi	r25, 0x9C	; 156
     4d8:	01 97       	sbiw	r24, 0x01	; 1
     4da:	f1 f7       	brne	.-4      	; 0x4d8 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x68>
     4dc:	00 c0       	rjmp	.+0      	; 0x4de <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x6e>
     4de:	00 00       	nop
     4e0:	f4 cf       	rjmp	.-24     	; 0x4ca <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x5a>
     4e2:	9f ef       	ldi	r25, 0xFF	; 255
     4e4:	20 e7       	ldi	r18, 0x70	; 112
     4e6:	82 e0       	ldi	r24, 0x02	; 2
     4e8:	91 50       	subi	r25, 0x01	; 1
     4ea:	20 40       	sbci	r18, 0x00	; 0
     4ec:	80 40       	sbci	r24, 0x00	; 0
     4ee:	e1 f7       	brne	.-8      	; 0x4e8 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x78>
     4f0:	00 c0       	rjmp	.+0      	; 0x4f2 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x82>
     4f2:	00 00       	nop
     4f4:	40 e0       	ldi	r20, 0x00	; 0
     4f6:	6e e3       	ldi	r22, 0x3E	; 62
     4f8:	ce 01       	movw	r24, r28
     4fa:	56 df       	rcall	.-340    	; 0x3a8 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     4fc:	8f e3       	ldi	r24, 0x3F	; 63
     4fe:	9c e9       	ldi	r25, 0x9C	; 156
     500:	01 97       	sbiw	r24, 0x01	; 1
     502:	f1 f7       	brne	.-4      	; 0x500 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x90>
     504:	00 c0       	rjmp	.+0      	; 0x506 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x96>
     506:	00 00       	nop
     508:	40 e0       	ldi	r20, 0x00	; 0
     50a:	67 e0       	ldi	r22, 0x07	; 7
     50c:	ce 01       	movw	r24, r28
     50e:	4c df       	rcall	.-360    	; 0x3a8 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     510:	40 e0       	ldi	r20, 0x00	; 0
     512:	6f e3       	ldi	r22, 0x3F	; 63
     514:	ce 01       	movw	r24, r28
     516:	48 df       	rcall	.-368    	; 0x3a8 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     518:	8f e3       	ldi	r24, 0x3F	; 63
     51a:	9c e9       	ldi	r25, 0x9C	; 156
     51c:	01 97       	sbiw	r24, 0x01	; 1
     51e:	f1 f7       	brne	.-4      	; 0x51c <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xac>
     520:	00 c0       	rjmp	.+0      	; 0x522 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xb2>
     522:	00 00       	nop
     524:	61 2f       	mov	r22, r17
     526:	ce 01       	movw	r24, r28
     528:	69 df       	rcall	.-302    	; 0x3fc <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
     52a:	9f ef       	ldi	r25, 0xFF	; 255
     52c:	29 ef       	ldi	r18, 0xF9	; 249
     52e:	80 e0       	ldi	r24, 0x00	; 0
     530:	91 50       	subi	r25, 0x01	; 1
     532:	20 40       	sbci	r18, 0x00	; 0
     534:	80 40       	sbci	r24, 0x00	; 0
     536:	e1 f7       	brne	.-8      	; 0x530 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xc0>
     538:	00 c0       	rjmp	.+0      	; 0x53a <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xca>
     53a:	00 00       	nop
     53c:	81 e0       	ldi	r24, 0x01	; 1
     53e:	01 c0       	rjmp	.+2      	; 0x542 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xd2>
     540:	80 e0       	ldi	r24, 0x00	; 0
     542:	df 91       	pop	r29
     544:	cf 91       	pop	r28
     546:	1f 91       	pop	r17
     548:	08 95       	ret

0000054a <_ZN15Adafruit_BNO0557getTempEv>:
     54a:	64 e3       	ldi	r22, 0x34	; 52
     54c:	66 cf       	rjmp	.-308    	; 0x41a <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
     54e:	08 95       	ret

00000550 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>:
     550:	cf 92       	push	r12
     552:	df 92       	push	r13
     554:	ef 92       	push	r14
     556:	ff 92       	push	r15
     558:	0f 93       	push	r16
     55a:	1f 93       	push	r17
     55c:	cf 93       	push	r28
     55e:	df 93       	push	r29
     560:	7c 01       	movw	r14, r24
     562:	c6 2f       	mov	r28, r22
     564:	6a 01       	movw	r12, r20
     566:	12 2f       	mov	r17, r18
     568:	dc 01       	movw	r26, r24
     56a:	13 96       	adiw	r26, 0x03	; 3
     56c:	6c 91       	ld	r22, X
     56e:	13 97       	sbiw	r26, 0x03	; 3
     570:	14 96       	adiw	r26, 0x04	; 4
     572:	8d 91       	ld	r24, X+
     574:	9c 91       	ld	r25, X
     576:	15 97       	sbiw	r26, 0x05	; 5
     578:	0e 94 7e 12 	call	0x24fc	; 0x24fc <_ZN7TwoWire17beginTransmissionEh>
     57c:	f7 01       	movw	r30, r14
     57e:	84 81       	ldd	r24, Z+4	; 0x04
     580:	95 81       	ldd	r25, Z+5	; 0x05
     582:	dc 01       	movw	r26, r24
     584:	ed 91       	ld	r30, X+
     586:	fc 91       	ld	r31, X
     588:	01 90       	ld	r0, Z+
     58a:	f0 81       	ld	r31, Z
     58c:	e0 2d       	mov	r30, r0
     58e:	6c 2f       	mov	r22, r28
     590:	19 95       	eicall
     592:	f7 01       	movw	r30, r14
     594:	84 81       	ldd	r24, Z+4	; 0x04
     596:	95 81       	ldd	r25, Z+5	; 0x05
     598:	0e 94 07 13 	call	0x260e	; 0x260e <_ZN7TwoWire15endTransmissionEv>
     59c:	41 2f       	mov	r20, r17
     59e:	d7 01       	movw	r26, r14
     5a0:	13 96       	adiw	r26, 0x03	; 3
     5a2:	6c 91       	ld	r22, X
     5a4:	13 97       	sbiw	r26, 0x03	; 3
     5a6:	14 96       	adiw	r26, 0x04	; 4
     5a8:	8d 91       	ld	r24, X+
     5aa:	9c 91       	ld	r25, X
     5ac:	15 97       	sbiw	r26, 0x05	; 5
     5ae:	0e 94 01 13 	call	0x2602	; 0x2602 <_ZN7TwoWire11requestFromEhh>
     5b2:	11 23       	and	r17, r17
     5b4:	b1 f0       	breq	.+44     	; 0x5e2 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh+0x92>
     5b6:	e6 01       	movw	r28, r12
     5b8:	11 50       	subi	r17, 0x01	; 1
     5ba:	01 2f       	mov	r16, r17
     5bc:	10 e0       	ldi	r17, 0x00	; 0
     5be:	0f 5f       	subi	r16, 0xFF	; 255
     5c0:	1f 4f       	sbci	r17, 0xFF	; 255
     5c2:	0c 0d       	add	r16, r12
     5c4:	1d 1d       	adc	r17, r13
     5c6:	f7 01       	movw	r30, r14
     5c8:	84 81       	ldd	r24, Z+4	; 0x04
     5ca:	95 81       	ldd	r25, Z+5	; 0x05
     5cc:	dc 01       	movw	r26, r24
     5ce:	ed 91       	ld	r30, X+
     5d0:	fc 91       	ld	r31, X
     5d2:	02 84       	ldd	r0, Z+10	; 0x0a
     5d4:	f3 85       	ldd	r31, Z+11	; 0x0b
     5d6:	e0 2d       	mov	r30, r0
     5d8:	19 95       	eicall
     5da:	89 93       	st	Y+, r24
     5dc:	c0 17       	cp	r28, r16
     5de:	d1 07       	cpc	r29, r17
     5e0:	91 f7       	brne	.-28     	; 0x5c6 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh+0x76>
     5e2:	81 e0       	ldi	r24, 0x01	; 1
     5e4:	df 91       	pop	r29
     5e6:	cf 91       	pop	r28
     5e8:	1f 91       	pop	r17
     5ea:	0f 91       	pop	r16
     5ec:	ff 90       	pop	r15
     5ee:	ef 90       	pop	r14
     5f0:	df 90       	pop	r13
     5f2:	cf 90       	pop	r12
     5f4:	08 95       	ret

000005f6 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tEPh>:
     5f6:	26 e0       	ldi	r18, 0x06	; 6
     5f8:	ab df       	rcall	.-170    	; 0x550 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>
     5fa:	86 e0       	ldi	r24, 0x06	; 6
     5fc:	08 95       	ret

000005fe <_ZN15Adafruit_BNO0557getQuatEPh>:
     5fe:	ab 01       	movw	r20, r22
     600:	28 e0       	ldi	r18, 0x08	; 8
     602:	60 e2       	ldi	r22, 0x20	; 32
     604:	a5 df       	rcall	.-182    	; 0x550 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>
     606:	88 e0       	ldi	r24, 0x08	; 8
     608:	08 95       	ret

0000060a <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>:
 *            VECTOR_EULER
 *            VECTOR_LINEARACCEL
 *            VECTOR_GRAVITY]
 *  @return  vector from specified source
 */
AdafruitImu::Vector<3> Adafruit_BNO055::getVector(adafruit_vector_type_t vector_type) {
     60a:	af 92       	push	r10
     60c:	bf 92       	push	r11
     60e:	cf 92       	push	r12
     610:	df 92       	push	r13
     612:	ff 92       	push	r15
     614:	0f 93       	push	r16
     616:	1f 93       	push	r17
     618:	cf 93       	push	r28
     61a:	df 93       	push	r29
     61c:	00 d0       	rcall	.+0      	; 0x61e <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x14>
     61e:	00 d0       	rcall	.+0      	; 0x620 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x16>
     620:	cd b7       	in	r28, 0x3d	; 61
     622:	de b7       	in	r29, 0x3e	; 62
     624:	8c 01       	movw	r16, r24
     626:	cb 01       	movw	r24, r22
     628:	f4 2e       	mov	r15, r20
	template <uint8_t N> class Vector
	{
		public:
		Vector()
		{
			memset(p_vec, 0, sizeof(double)*N);
     62a:	2c e0       	ldi	r18, 0x0C	; 12
     62c:	f8 01       	movw	r30, r16
     62e:	11 92       	st	Z+, r1
     630:	2a 95       	dec	r18
     632:	e9 f7       	brne	.-6      	; 0x62e <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x24>
  AdafruitImu::Vector<3> xyz;
  uint8_t buffer[6];
  memset(buffer, 0, 6);
     634:	ae 01       	movw	r20, r28
     636:	4f 5f       	subi	r20, 0xFF	; 255
     638:	5f 4f       	sbci	r21, 0xFF	; 255
     63a:	26 e0       	ldi	r18, 0x06	; 6
     63c:	fa 01       	movw	r30, r20
     63e:	11 92       	st	Z+, r1
     640:	2a 95       	dec	r18
     642:	e9 f7       	brne	.-6      	; 0x63e <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x34>

  int16_t x, y, z;
  x = y = z = 0;

  /* Read vector data (6 bytes) */
  readLen((adafruit_bno055_reg_t)vector_type, buffer, 6);
     644:	26 e0       	ldi	r18, 0x06	; 6
     646:	6f 2d       	mov	r22, r15
     648:	83 df       	rcall	.-250    	; 0x550 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>

  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
     64a:	6a 81       	ldd	r22, Y+2	; 0x02
     64c:	70 e0       	ldi	r23, 0x00	; 0
     64e:	76 2f       	mov	r23, r22
     650:	66 27       	eor	r22, r22
     652:	89 81       	ldd	r24, Y+1	; 0x01
     654:	68 2b       	or	r22, r24
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
     656:	8c 81       	ldd	r24, Y+4	; 0x04
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	98 2f       	mov	r25, r24
     65c:	88 27       	eor	r24, r24
     65e:	2b 81       	ldd	r18, Y+3	; 0x03
     660:	6c 01       	movw	r12, r24
     662:	c2 2a       	or	r12, r18
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
     664:	8e 81       	ldd	r24, Y+6	; 0x06
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	98 2f       	mov	r25, r24
     66a:	88 27       	eor	r24, r24
     66c:	2d 81       	ldd	r18, Y+5	; 0x05
     66e:	5c 01       	movw	r10, r24
     670:	a2 2a       	or	r10, r18

  /*!
   * Convert the value to an appropriate range (section 3.6.4)
   * and assign the value to the Vector type
   */
  switch (vector_type) {
     672:	f4 e1       	ldi	r31, 0x14	; 20
     674:	ff 16       	cp	r15, r31
     676:	09 f4       	brne	.+2      	; 0x67a <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x70>
     678:	4a c0       	rjmp	.+148    	; 0x70e <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x104>
     67a:	ff 15       	cp	r31, r15
     67c:	40 f0       	brcs	.+16     	; 0x68e <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x84>
     67e:	88 e0       	ldi	r24, 0x08	; 8
     680:	f8 16       	cp	r15, r24
     682:	09 f4       	brne	.+2      	; 0x686 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x7c>
     684:	ac c0       	rjmp	.+344    	; 0x7de <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x1d4>
     686:	ee e0       	ldi	r30, 0x0E	; 14
     688:	fe 16       	cp	r15, r30
     68a:	69 f0       	breq	.+26     	; 0x6a6 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x9c>
     68c:	43 c1       	rjmp	.+646    	; 0x914 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
     68e:	f8 e2       	ldi	r31, 0x28	; 40
     690:	ff 16       	cp	r15, r31
     692:	09 f4       	brne	.+2      	; 0x696 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x8c>
     694:	d8 c0       	rjmp	.+432    	; 0x846 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x23c>
     696:	8e e2       	ldi	r24, 0x2E	; 46
     698:	f8 16       	cp	r15, r24
     69a:	09 f4       	brne	.+2      	; 0x69e <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x94>
     69c:	08 c1       	rjmp	.+528    	; 0x8ae <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x2a4>
     69e:	ea e1       	ldi	r30, 0x1A	; 26
     6a0:	fe 12       	cpse	r15, r30
     6a2:	38 c1       	rjmp	.+624    	; 0x914 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
     6a4:	68 c0       	rjmp	.+208    	; 0x776 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x16c>
  case VECTOR_MAGNETOMETER:
    /* 1uT = 16 LSB */
    xyz[0] = ((double)x) / 16.0;
     6a6:	07 2e       	mov	r0, r23
     6a8:	00 0c       	add	r0, r0
     6aa:	88 0b       	sbc	r24, r24
     6ac:	99 0b       	sbc	r25, r25
     6ae:	0e 94 cf 27 	call	0x4f9e	; 0x4f9e <__floatsisf>
     6b2:	20 e0       	ldi	r18, 0x00	; 0
     6b4:	30 e0       	ldi	r19, 0x00	; 0
     6b6:	40 e8       	ldi	r20, 0x80	; 128
     6b8:	5d e3       	ldi	r21, 0x3D	; 61
     6ba:	0e 94 83 28 	call	0x5106	; 0x5106 <__mulsf3>
     6be:	f8 01       	movw	r30, r16
     6c0:	60 83       	st	Z, r22
     6c2:	71 83       	std	Z+1, r23	; 0x01
     6c4:	82 83       	std	Z+2, r24	; 0x02
     6c6:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 16.0;
     6c8:	b6 01       	movw	r22, r12
     6ca:	dd 0c       	add	r13, r13
     6cc:	88 0b       	sbc	r24, r24
     6ce:	99 0b       	sbc	r25, r25
     6d0:	0e 94 cf 27 	call	0x4f9e	; 0x4f9e <__floatsisf>
     6d4:	20 e0       	ldi	r18, 0x00	; 0
     6d6:	30 e0       	ldi	r19, 0x00	; 0
     6d8:	40 e8       	ldi	r20, 0x80	; 128
     6da:	5d e3       	ldi	r21, 0x3D	; 61
     6dc:	0e 94 83 28 	call	0x5106	; 0x5106 <__mulsf3>
     6e0:	f8 01       	movw	r30, r16
     6e2:	64 83       	std	Z+4, r22	; 0x04
     6e4:	75 83       	std	Z+5, r23	; 0x05
     6e6:	86 83       	std	Z+6, r24	; 0x06
     6e8:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 16.0;
     6ea:	b5 01       	movw	r22, r10
     6ec:	bb 0c       	add	r11, r11
     6ee:	88 0b       	sbc	r24, r24
     6f0:	99 0b       	sbc	r25, r25
     6f2:	0e 94 cf 27 	call	0x4f9e	; 0x4f9e <__floatsisf>
     6f6:	20 e0       	ldi	r18, 0x00	; 0
     6f8:	30 e0       	ldi	r19, 0x00	; 0
     6fa:	40 e8       	ldi	r20, 0x80	; 128
     6fc:	5d e3       	ldi	r21, 0x3D	; 61
     6fe:	0e 94 83 28 	call	0x5106	; 0x5106 <__mulsf3>
     702:	f8 01       	movw	r30, r16
     704:	60 87       	std	Z+8, r22	; 0x08
     706:	71 87       	std	Z+9, r23	; 0x09
     708:	82 87       	std	Z+10, r24	; 0x0a
     70a:	93 87       	std	Z+11, r25	; 0x0b
    break;
     70c:	03 c1       	rjmp	.+518    	; 0x914 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_GYROSCOPE:
    /* 1dps = 16 LSB */
    xyz[0] = ((double)x) / 16.0;
     70e:	07 2e       	mov	r0, r23
     710:	00 0c       	add	r0, r0
     712:	88 0b       	sbc	r24, r24
     714:	99 0b       	sbc	r25, r25
     716:	0e 94 cf 27 	call	0x4f9e	; 0x4f9e <__floatsisf>
     71a:	20 e0       	ldi	r18, 0x00	; 0
     71c:	30 e0       	ldi	r19, 0x00	; 0
     71e:	40 e8       	ldi	r20, 0x80	; 128
     720:	5d e3       	ldi	r21, 0x3D	; 61
     722:	0e 94 83 28 	call	0x5106	; 0x5106 <__mulsf3>
     726:	f8 01       	movw	r30, r16
     728:	60 83       	st	Z, r22
     72a:	71 83       	std	Z+1, r23	; 0x01
     72c:	82 83       	std	Z+2, r24	; 0x02
     72e:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 16.0;
     730:	b6 01       	movw	r22, r12
     732:	dd 0c       	add	r13, r13
     734:	88 0b       	sbc	r24, r24
     736:	99 0b       	sbc	r25, r25
     738:	0e 94 cf 27 	call	0x4f9e	; 0x4f9e <__floatsisf>
     73c:	20 e0       	ldi	r18, 0x00	; 0
     73e:	30 e0       	ldi	r19, 0x00	; 0
     740:	40 e8       	ldi	r20, 0x80	; 128
     742:	5d e3       	ldi	r21, 0x3D	; 61
     744:	0e 94 83 28 	call	0x5106	; 0x5106 <__mulsf3>
     748:	f8 01       	movw	r30, r16
     74a:	64 83       	std	Z+4, r22	; 0x04
     74c:	75 83       	std	Z+5, r23	; 0x05
     74e:	86 83       	std	Z+6, r24	; 0x06
     750:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 16.0;
     752:	b5 01       	movw	r22, r10
     754:	bb 0c       	add	r11, r11
     756:	88 0b       	sbc	r24, r24
     758:	99 0b       	sbc	r25, r25
     75a:	0e 94 cf 27 	call	0x4f9e	; 0x4f9e <__floatsisf>
     75e:	20 e0       	ldi	r18, 0x00	; 0
     760:	30 e0       	ldi	r19, 0x00	; 0
     762:	40 e8       	ldi	r20, 0x80	; 128
     764:	5d e3       	ldi	r21, 0x3D	; 61
     766:	0e 94 83 28 	call	0x5106	; 0x5106 <__mulsf3>
     76a:	f8 01       	movw	r30, r16
     76c:	60 87       	std	Z+8, r22	; 0x08
     76e:	71 87       	std	Z+9, r23	; 0x09
     770:	82 87       	std	Z+10, r24	; 0x0a
     772:	93 87       	std	Z+11, r25	; 0x0b
    break;
     774:	cf c0       	rjmp	.+414    	; 0x914 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_EULER:
    /* 1 degree = 16 LSB */
    xyz[0] = ((double)x) / 16.0;
     776:	07 2e       	mov	r0, r23
     778:	00 0c       	add	r0, r0
     77a:	88 0b       	sbc	r24, r24
     77c:	99 0b       	sbc	r25, r25
     77e:	0e 94 cf 27 	call	0x4f9e	; 0x4f9e <__floatsisf>
     782:	20 e0       	ldi	r18, 0x00	; 0
     784:	30 e0       	ldi	r19, 0x00	; 0
     786:	40 e8       	ldi	r20, 0x80	; 128
     788:	5d e3       	ldi	r21, 0x3D	; 61
     78a:	0e 94 83 28 	call	0x5106	; 0x5106 <__mulsf3>
     78e:	f8 01       	movw	r30, r16
     790:	60 83       	st	Z, r22
     792:	71 83       	std	Z+1, r23	; 0x01
     794:	82 83       	std	Z+2, r24	; 0x02
     796:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 16.0;
     798:	b6 01       	movw	r22, r12
     79a:	dd 0c       	add	r13, r13
     79c:	88 0b       	sbc	r24, r24
     79e:	99 0b       	sbc	r25, r25
     7a0:	0e 94 cf 27 	call	0x4f9e	; 0x4f9e <__floatsisf>
     7a4:	20 e0       	ldi	r18, 0x00	; 0
     7a6:	30 e0       	ldi	r19, 0x00	; 0
     7a8:	40 e8       	ldi	r20, 0x80	; 128
     7aa:	5d e3       	ldi	r21, 0x3D	; 61
     7ac:	0e 94 83 28 	call	0x5106	; 0x5106 <__mulsf3>
     7b0:	f8 01       	movw	r30, r16
     7b2:	64 83       	std	Z+4, r22	; 0x04
     7b4:	75 83       	std	Z+5, r23	; 0x05
     7b6:	86 83       	std	Z+6, r24	; 0x06
     7b8:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 16.0;
     7ba:	b5 01       	movw	r22, r10
     7bc:	bb 0c       	add	r11, r11
     7be:	88 0b       	sbc	r24, r24
     7c0:	99 0b       	sbc	r25, r25
     7c2:	0e 94 cf 27 	call	0x4f9e	; 0x4f9e <__floatsisf>
     7c6:	20 e0       	ldi	r18, 0x00	; 0
     7c8:	30 e0       	ldi	r19, 0x00	; 0
     7ca:	40 e8       	ldi	r20, 0x80	; 128
     7cc:	5d e3       	ldi	r21, 0x3D	; 61
     7ce:	0e 94 83 28 	call	0x5106	; 0x5106 <__mulsf3>
     7d2:	f8 01       	movw	r30, r16
     7d4:	60 87       	std	Z+8, r22	; 0x08
     7d6:	71 87       	std	Z+9, r23	; 0x09
     7d8:	82 87       	std	Z+10, r24	; 0x0a
     7da:	93 87       	std	Z+11, r25	; 0x0b
    break;
     7dc:	9b c0       	rjmp	.+310    	; 0x914 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_ACCELEROMETER:
    /* 1m/s^2 = 100 LSB */
    xyz[0] = ((double)x) / 100.0;
     7de:	07 2e       	mov	r0, r23
     7e0:	00 0c       	add	r0, r0
     7e2:	88 0b       	sbc	r24, r24
     7e4:	99 0b       	sbc	r25, r25
     7e6:	0e 94 cf 27 	call	0x4f9e	; 0x4f9e <__floatsisf>
     7ea:	20 e0       	ldi	r18, 0x00	; 0
     7ec:	30 e0       	ldi	r19, 0x00	; 0
     7ee:	48 ec       	ldi	r20, 0xC8	; 200
     7f0:	52 e4       	ldi	r21, 0x42	; 66
     7f2:	0e 94 39 27 	call	0x4e72	; 0x4e72 <__divsf3>
     7f6:	f8 01       	movw	r30, r16
     7f8:	60 83       	st	Z, r22
     7fa:	71 83       	std	Z+1, r23	; 0x01
     7fc:	82 83       	std	Z+2, r24	; 0x02
     7fe:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 100.0;
     800:	b6 01       	movw	r22, r12
     802:	dd 0c       	add	r13, r13
     804:	88 0b       	sbc	r24, r24
     806:	99 0b       	sbc	r25, r25
     808:	0e 94 cf 27 	call	0x4f9e	; 0x4f9e <__floatsisf>
     80c:	20 e0       	ldi	r18, 0x00	; 0
     80e:	30 e0       	ldi	r19, 0x00	; 0
     810:	48 ec       	ldi	r20, 0xC8	; 200
     812:	52 e4       	ldi	r21, 0x42	; 66
     814:	0e 94 39 27 	call	0x4e72	; 0x4e72 <__divsf3>
     818:	f8 01       	movw	r30, r16
     81a:	64 83       	std	Z+4, r22	; 0x04
     81c:	75 83       	std	Z+5, r23	; 0x05
     81e:	86 83       	std	Z+6, r24	; 0x06
     820:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 100.0;
     822:	b5 01       	movw	r22, r10
     824:	bb 0c       	add	r11, r11
     826:	88 0b       	sbc	r24, r24
     828:	99 0b       	sbc	r25, r25
     82a:	0e 94 cf 27 	call	0x4f9e	; 0x4f9e <__floatsisf>
     82e:	20 e0       	ldi	r18, 0x00	; 0
     830:	30 e0       	ldi	r19, 0x00	; 0
     832:	48 ec       	ldi	r20, 0xC8	; 200
     834:	52 e4       	ldi	r21, 0x42	; 66
     836:	0e 94 39 27 	call	0x4e72	; 0x4e72 <__divsf3>
     83a:	f8 01       	movw	r30, r16
     83c:	60 87       	std	Z+8, r22	; 0x08
     83e:	71 87       	std	Z+9, r23	; 0x09
     840:	82 87       	std	Z+10, r24	; 0x0a
     842:	93 87       	std	Z+11, r25	; 0x0b
    break;
     844:	67 c0       	rjmp	.+206    	; 0x914 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_LINEARACCEL:
    /* 1m/s^2 = 100 LSB */
    xyz[0] = ((double)x) / 100.0;
     846:	07 2e       	mov	r0, r23
     848:	00 0c       	add	r0, r0
     84a:	88 0b       	sbc	r24, r24
     84c:	99 0b       	sbc	r25, r25
     84e:	0e 94 cf 27 	call	0x4f9e	; 0x4f9e <__floatsisf>
     852:	20 e0       	ldi	r18, 0x00	; 0
     854:	30 e0       	ldi	r19, 0x00	; 0
     856:	48 ec       	ldi	r20, 0xC8	; 200
     858:	52 e4       	ldi	r21, 0x42	; 66
     85a:	0e 94 39 27 	call	0x4e72	; 0x4e72 <__divsf3>
     85e:	f8 01       	movw	r30, r16
     860:	60 83       	st	Z, r22
     862:	71 83       	std	Z+1, r23	; 0x01
     864:	82 83       	std	Z+2, r24	; 0x02
     866:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 100.0;
     868:	b6 01       	movw	r22, r12
     86a:	dd 0c       	add	r13, r13
     86c:	88 0b       	sbc	r24, r24
     86e:	99 0b       	sbc	r25, r25
     870:	0e 94 cf 27 	call	0x4f9e	; 0x4f9e <__floatsisf>
     874:	20 e0       	ldi	r18, 0x00	; 0
     876:	30 e0       	ldi	r19, 0x00	; 0
     878:	48 ec       	ldi	r20, 0xC8	; 200
     87a:	52 e4       	ldi	r21, 0x42	; 66
     87c:	0e 94 39 27 	call	0x4e72	; 0x4e72 <__divsf3>
     880:	f8 01       	movw	r30, r16
     882:	64 83       	std	Z+4, r22	; 0x04
     884:	75 83       	std	Z+5, r23	; 0x05
     886:	86 83       	std	Z+6, r24	; 0x06
     888:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 100.0;
     88a:	b5 01       	movw	r22, r10
     88c:	bb 0c       	add	r11, r11
     88e:	88 0b       	sbc	r24, r24
     890:	99 0b       	sbc	r25, r25
     892:	0e 94 cf 27 	call	0x4f9e	; 0x4f9e <__floatsisf>
     896:	20 e0       	ldi	r18, 0x00	; 0
     898:	30 e0       	ldi	r19, 0x00	; 0
     89a:	48 ec       	ldi	r20, 0xC8	; 200
     89c:	52 e4       	ldi	r21, 0x42	; 66
     89e:	0e 94 39 27 	call	0x4e72	; 0x4e72 <__divsf3>
     8a2:	f8 01       	movw	r30, r16
     8a4:	60 87       	std	Z+8, r22	; 0x08
     8a6:	71 87       	std	Z+9, r23	; 0x09
     8a8:	82 87       	std	Z+10, r24	; 0x0a
     8aa:	93 87       	std	Z+11, r25	; 0x0b
    break;
     8ac:	33 c0       	rjmp	.+102    	; 0x914 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_GRAVITY:
    /* 1m/s^2 = 100 LSB */
    xyz[0] = ((double)x) / 100.0;
     8ae:	07 2e       	mov	r0, r23
     8b0:	00 0c       	add	r0, r0
     8b2:	88 0b       	sbc	r24, r24
     8b4:	99 0b       	sbc	r25, r25
     8b6:	0e 94 cf 27 	call	0x4f9e	; 0x4f9e <__floatsisf>
     8ba:	20 e0       	ldi	r18, 0x00	; 0
     8bc:	30 e0       	ldi	r19, 0x00	; 0
     8be:	48 ec       	ldi	r20, 0xC8	; 200
     8c0:	52 e4       	ldi	r21, 0x42	; 66
     8c2:	0e 94 39 27 	call	0x4e72	; 0x4e72 <__divsf3>
     8c6:	f8 01       	movw	r30, r16
     8c8:	60 83       	st	Z, r22
     8ca:	71 83       	std	Z+1, r23	; 0x01
     8cc:	82 83       	std	Z+2, r24	; 0x02
     8ce:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 100.0;
     8d0:	b6 01       	movw	r22, r12
     8d2:	dd 0c       	add	r13, r13
     8d4:	88 0b       	sbc	r24, r24
     8d6:	99 0b       	sbc	r25, r25
     8d8:	0e 94 cf 27 	call	0x4f9e	; 0x4f9e <__floatsisf>
     8dc:	20 e0       	ldi	r18, 0x00	; 0
     8de:	30 e0       	ldi	r19, 0x00	; 0
     8e0:	48 ec       	ldi	r20, 0xC8	; 200
     8e2:	52 e4       	ldi	r21, 0x42	; 66
     8e4:	0e 94 39 27 	call	0x4e72	; 0x4e72 <__divsf3>
     8e8:	f8 01       	movw	r30, r16
     8ea:	64 83       	std	Z+4, r22	; 0x04
     8ec:	75 83       	std	Z+5, r23	; 0x05
     8ee:	86 83       	std	Z+6, r24	; 0x06
     8f0:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 100.0;
     8f2:	b5 01       	movw	r22, r10
     8f4:	bb 0c       	add	r11, r11
     8f6:	88 0b       	sbc	r24, r24
     8f8:	99 0b       	sbc	r25, r25
     8fa:	0e 94 cf 27 	call	0x4f9e	; 0x4f9e <__floatsisf>
     8fe:	20 e0       	ldi	r18, 0x00	; 0
     900:	30 e0       	ldi	r19, 0x00	; 0
     902:	48 ec       	ldi	r20, 0xC8	; 200
     904:	52 e4       	ldi	r21, 0x42	; 66
     906:	0e 94 39 27 	call	0x4e72	; 0x4e72 <__divsf3>
     90a:	f8 01       	movw	r30, r16
     90c:	60 87       	std	Z+8, r22	; 0x08
     90e:	71 87       	std	Z+9, r23	; 0x09
     910:	82 87       	std	Z+10, r24	; 0x0a
     912:	93 87       	std	Z+11, r25	; 0x0b
    break;
  }

  return xyz;
}
     914:	c8 01       	movw	r24, r16
     916:	26 96       	adiw	r28, 0x06	; 6
     918:	0f b6       	in	r0, 0x3f	; 63
     91a:	f8 94       	cli
     91c:	de bf       	out	0x3e, r29	; 62
     91e:	0f be       	out	0x3f, r0	; 63
     920:	cd bf       	out	0x3d, r28	; 61
     922:	df 91       	pop	r29
     924:	cf 91       	pop	r28
     926:	1f 91       	pop	r17
     928:	0f 91       	pop	r16
     92a:	ff 90       	pop	r15
     92c:	df 90       	pop	r13
     92e:	cf 90       	pop	r12
     930:	bf 90       	pop	r11
     932:	af 90       	pop	r10
     934:	08 95       	ret

00000936 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>:
/*!
 *  @brief  Reads the sensor and returns the data as a sensors_event_t
 *  @param  event
 *  @return always returns true
 */
bool Adafruit_BNO055::getEvent(sensors_event_t *event) {
     936:	0f 93       	push	r16
     938:	1f 93       	push	r17
     93a:	cf 93       	push	r28
     93c:	df 93       	push	r29
     93e:	cd b7       	in	r28, 0x3d	; 61
     940:	de b7       	in	r29, 0x3e	; 62
     942:	2c 97       	sbiw	r28, 0x0c	; 12
     944:	0f b6       	in	r0, 0x3f	; 63
     946:	f8 94       	cli
     948:	de bf       	out	0x3e, r29	; 62
     94a:	0f be       	out	0x3f, r0	; 63
     94c:	cd bf       	out	0x3d, r28	; 61
     94e:	8b 01       	movw	r16, r22
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	fb 01       	movw	r30, r22
     954:	11 92       	st	Z+, r1
     956:	2a 95       	dec	r18
     958:	e9 f7       	brne	.-6      	; 0x954 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t+0x1e>

  event->version = sizeof(sensors_event_t);
     95a:	40 e2       	ldi	r20, 0x20	; 32
     95c:	50 e0       	ldi	r21, 0x00	; 0
     95e:	60 e0       	ldi	r22, 0x00	; 0
     960:	70 e0       	ldi	r23, 0x00	; 0
     962:	f8 01       	movw	r30, r16
     964:	40 83       	st	Z, r20
     966:	51 83       	std	Z+1, r21	; 0x01
     968:	62 83       	std	Z+2, r22	; 0x02
     96a:	73 83       	std	Z+3, r23	; 0x03
  event->sensor_id = _sensorID;
     96c:	fc 01       	movw	r30, r24
     96e:	46 81       	ldd	r20, Z+6	; 0x06
     970:	57 81       	ldd	r21, Z+7	; 0x07
     972:	60 85       	ldd	r22, Z+8	; 0x08
     974:	71 85       	ldd	r23, Z+9	; 0x09
     976:	f8 01       	movw	r30, r16
     978:	44 83       	std	Z+4, r20	; 0x04
     97a:	55 83       	std	Z+5, r21	; 0x05
     97c:	66 83       	std	Z+6, r22	; 0x06
     97e:	77 83       	std	Z+7, r23	; 0x07
  event->type = SENSOR_TYPE_ORIENTATION;
     980:	43 e0       	ldi	r20, 0x03	; 3
     982:	50 e0       	ldi	r21, 0x00	; 0
     984:	60 e0       	ldi	r22, 0x00	; 0
     986:	70 e0       	ldi	r23, 0x00	; 0
     988:	40 87       	std	Z+8, r20	; 0x08
     98a:	51 87       	std	Z+9, r21	; 0x09
     98c:	62 87       	std	Z+10, r22	; 0x0a
     98e:	73 87       	std	Z+11, r23	; 0x0b
  //event->timestamp = millis();

  /* Get a Euler angle sample for orientation */
  AdafruitImu::Vector<3> euler = getVector(Adafruit_BNO055::VECTOR_EULER);
     990:	4a e1       	ldi	r20, 0x1A	; 26
     992:	bc 01       	movw	r22, r24
     994:	ce 01       	movw	r24, r28
     996:	01 96       	adiw	r24, 0x01	; 1
     998:	38 de       	rcall	.-912    	; 0x60a <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
  event->orientation.x = euler.x();
     99a:	89 81       	ldd	r24, Y+1	; 0x01
     99c:	9a 81       	ldd	r25, Y+2	; 0x02
     99e:	ab 81       	ldd	r26, Y+3	; 0x03
     9a0:	bc 81       	ldd	r27, Y+4	; 0x04
     9a2:	f8 01       	movw	r30, r16
     9a4:	80 8b       	std	Z+16, r24	; 0x10
     9a6:	91 8b       	std	Z+17, r25	; 0x11
     9a8:	a2 8b       	std	Z+18, r26	; 0x12
     9aa:	b3 8b       	std	Z+19, r27	; 0x13
  event->orientation.y = euler.y();
     9ac:	8d 81       	ldd	r24, Y+5	; 0x05
     9ae:	9e 81       	ldd	r25, Y+6	; 0x06
     9b0:	af 81       	ldd	r26, Y+7	; 0x07
     9b2:	b8 85       	ldd	r27, Y+8	; 0x08
     9b4:	84 8b       	std	Z+20, r24	; 0x14
     9b6:	95 8b       	std	Z+21, r25	; 0x15
     9b8:	a6 8b       	std	Z+22, r26	; 0x16
     9ba:	b7 8b       	std	Z+23, r27	; 0x17
  event->orientation.z = euler.z();
     9bc:	89 85       	ldd	r24, Y+9	; 0x09
     9be:	9a 85       	ldd	r25, Y+10	; 0x0a
     9c0:	ab 85       	ldd	r26, Y+11	; 0x0b
     9c2:	bc 85       	ldd	r27, Y+12	; 0x0c
     9c4:	80 8f       	std	Z+24, r24	; 0x18
     9c6:	91 8f       	std	Z+25, r25	; 0x19
     9c8:	a2 8f       	std	Z+26, r26	; 0x1a
     9ca:	b3 8f       	std	Z+27, r27	; 0x1b

  return true;
}
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	2c 96       	adiw	r28, 0x0c	; 12
     9d0:	0f b6       	in	r0, 0x3f	; 63
     9d2:	f8 94       	cli
     9d4:	de bf       	out	0x3e, r29	; 62
     9d6:	0f be       	out	0x3f, r0	; 63
     9d8:	cd bf       	out	0x3d, r28	; 61
     9da:	df 91       	pop	r29
     9dc:	cf 91       	pop	r28
     9de:	1f 91       	pop	r17
     9e0:	0f 91       	pop	r16
     9e2:	08 95       	ret

000009e4 <_ZN9EtherComm15CommandReceivedEhPKhh>:
	//TODO remove useless commands
	//switch(command){
		//case CMD_Ping: RunPingCommand(data, len); break;
		//case CMD_Echo: RunEchoCommand(data, len); break;
		//case CMD_Led: RunLedCommand(data, len); break;
		/*case CMD_UpdateDevice:*/ rov.CommandReceived(id, data, len); //break;
     9e4:	0c 94 ef 21 	jmp	0x43de	; 0x43de <_ZN5Robot15CommandReceivedEhPKhh>
     9e8:	08 95       	ret

000009ea <_GLOBAL__sub_I__Z14RunPingCommandPKhh>:
#include "Commands.h"
#include "EtherComm.h"
#include "Robot.h"
#include <stddef.h>

uint8_t* const SendDataBuffer = (uint8_t*)(&EtherComm::buffer[2]);
     9ea:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
     9ee:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
     9f2:	02 96       	adiw	r24, 0x02	; 2
     9f4:	90 93 e9 04 	sts	0x04E9, r25	; 0x8004e9 <__data_end+0x1>
     9f8:	80 93 e8 04 	sts	0x04E8, r24	; 0x8004e8 <__data_end>
     9fc:	08 95       	ret

000009fe <_ZL10enableChipv>:
static Register* selectPort;
static uint8_t selectPin;

static void enableChip () {
	//cli();
	SetLow(*selectPort, selectPin); //digitalWrite(selectPin, LOW);
     9fe:	e0 91 ee 04 	lds	r30, 0x04EE	; 0x8004ee <_ZL10selectPort>
     a02:	f0 91 ef 04 	lds	r31, 0x04EF	; 0x8004ef <_ZL10selectPort+0x1>
     a06:	90 81       	ld	r25, Z
     a08:	80 91 ed 04 	lds	r24, 0x04ED	; 0x8004ed <_ZL9selectPin>
     a0c:	80 95       	com	r24
     a0e:	89 23       	and	r24, r25
     a10:	80 83       	st	Z, r24
     a12:	08 95       	ret

00000a14 <_ZL11disableChipv>:
}

static void disableChip () {
	SetHigh(*selectPort, selectPin); //digitalWrite(selectPin, HIGH);
     a14:	e0 91 ee 04 	lds	r30, 0x04EE	; 0x8004ee <_ZL10selectPort>
     a18:	f0 91 ef 04 	lds	r31, 0x04EF	; 0x8004ef <_ZL10selectPort+0x1>
     a1c:	90 81       	ld	r25, Z
     a1e:	80 91 ed 04 	lds	r24, 0x04ED	; 0x8004ed <_ZL9selectPin>
     a22:	89 2b       	or	r24, r25
     a24:	80 83       	st	Z, r24
     a26:	08 95       	ret

00000a28 <_ZL6readOphh>:

	SetOutput(csDDR, selectPin);
	disableChip();
}

static uint8_t readOp (uint8_t op, uint8_t address) {
     a28:	cf 93       	push	r28
     a2a:	df 93       	push	r29
     a2c:	d8 2f       	mov	r29, r24
     a2e:	c6 2f       	mov	r28, r22
    enableChip();
     a30:	e6 df       	rcall	.-52     	; 0x9fe <_ZL10enableChipv>
    SPI.write8(op | (address & ADDR_MASK));
     a32:	8c 2f       	mov	r24, r28
     a34:	cf 71       	andi	r28, 0x1F	; 31
     a36:	cd 2b       	or	r28, r29
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     a38:	ce bd       	out	0x2e, r28	; 46
		asm volatile("nop");
     a3a:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     a3c:	0d b4       	in	r0, 0x2d	; 45
     a3e:	07 fe       	sbrs	r0, 7
     a40:	fd cf       	rjmp	.-6      	; 0xa3c <_ZL6readOphh+0x14>
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     a42:	1e bc       	out	0x2e, r1	; 46
		asm volatile("nop");
     a44:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     a46:	0d b4       	in	r0, 0x2d	; 45
     a48:	07 fe       	sbrs	r0, 7
     a4a:	fd cf       	rjmp	.-6      	; 0xa46 <_ZL6readOphh+0x1e>
	}

	//write8, excepts also returns the received byte
	static uint8_t read_write8(uint8_t data){
		write8(data);
		return SPDR;
     a4c:	ce b5       	in	r28, 0x2e	; 46
    uint8_t result = SPI.read_write8(0x00);
    if (address & 0x80)
     a4e:	88 23       	and	r24, r24
     a50:	34 f4       	brge	.+12     	; 0xa5e <_ZL6readOphh+0x36>
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     a52:	1e bc       	out	0x2e, r1	; 46
		asm volatile("nop");
     a54:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     a56:	0d b4       	in	r0, 0x2d	; 45
     a58:	07 fe       	sbrs	r0, 7
     a5a:	fd cf       	rjmp	.-6      	; 0xa56 <_ZL6readOphh+0x2e>
        result = SPI.read_write8(0x00);
    disableChip();
     a5c:	ce b5       	in	r28, 0x2e	; 46
     a5e:	da df       	rcall	.-76     	; 0xa14 <_ZL11disableChipv>
    return result;
}
     a60:	8c 2f       	mov	r24, r28
     a62:	df 91       	pop	r29
     a64:	cf 91       	pop	r28
     a66:	08 95       	ret

00000a68 <_ZL7writeOphhh>:

static void writeOp (uint8_t op, uint8_t address, uint8_t data) {
     a68:	1f 93       	push	r17
     a6a:	cf 93       	push	r28
     a6c:	df 93       	push	r29
     a6e:	c8 2f       	mov	r28, r24
     a70:	d6 2f       	mov	r29, r22
     a72:	14 2f       	mov	r17, r20
    enableChip();
     a74:	c4 df       	rcall	.-120    	; 0x9fe <_ZL10enableChipv>
    SPI.write8(op | (address & ADDR_MASK));
     a76:	df 71       	andi	r29, 0x1F	; 31
     a78:	cd 2b       	or	r28, r29
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     a7a:	ce bd       	out	0x2e, r28	; 46
		asm volatile("nop");
     a7c:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     a7e:	0d b4       	in	r0, 0x2d	; 45
     a80:	07 fe       	sbrs	r0, 7
     a82:	fd cf       	rjmp	.-6      	; 0xa7e <_ZL7writeOphhh+0x16>
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     a84:	1e bd       	out	0x2e, r17	; 46
		asm volatile("nop");
     a86:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     a88:	0d b4       	in	r0, 0x2d	; 45
     a8a:	07 fe       	sbrs	r0, 7
    SPI.write8(data);
    disableChip();
     a8c:	fd cf       	rjmp	.-6      	; 0xa88 <_ZL7writeOphhh+0x20>
     a8e:	c2 df       	rcall	.-124    	; 0xa14 <_ZL11disableChipv>
}
     a90:	df 91       	pop	r29
     a92:	cf 91       	pop	r28
     a94:	1f 91       	pop	r17
     a96:	08 95       	ret

00000a98 <_ZL7readBufjPh>:

static void readBuf(uint16_t len, uint8_t* data) {
     a98:	0f 93       	push	r16
     a9a:	1f 93       	push	r17
     a9c:	cf 93       	push	r28
     a9e:	df 93       	push	r29
     aa0:	ec 01       	movw	r28, r24
     aa2:	8b 01       	movw	r16, r22
    enableChip();
     aa4:	ac df       	rcall	.-168    	; 0x9fe <_ZL10enableChipv>
    if (len != 0) {
     aa6:	20 97       	sbiw	r28, 0x00	; 0
     aa8:	99 f0       	breq	.+38     	; 0xad0 <_ZL7readBufjPh+0x38>
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     aaa:	8a e3       	ldi	r24, 0x3A	; 58
     aac:	8e bd       	out	0x2e, r24	; 46
		asm volatile("nop");
     aae:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     ab0:	0d b4       	in	r0, 0x2d	; 45
     ab2:	07 fe       	sbrs	r0, 7
     ab4:	fd cf       	rjmp	.-6      	; 0xab0 <_ZL7readBufjPh+0x18>
     ab6:	f8 01       	movw	r30, r16
     ab8:	b8 01       	movw	r22, r16
     aba:	6c 0f       	add	r22, r28
     abc:	7d 1f       	adc	r23, r29
	static void read(void *buf, uint16_t nbyte, uint8_t dataSend = 0){
		if(nbyte == 0) return;
		
		uint8_t* buff = (uint8_t*)buf;
		while(nbyte--){
			SPDR = dataSend;
     abe:	1e bc       	out	0x2e, r1	; 46
			//asm volatile("nop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\n");
			while(!(SPSR & _BV(SPIF)));
     ac0:	0d b4       	in	r0, 0x2d	; 45
     ac2:	07 fe       	sbrs	r0, 7
     ac4:	fd cf       	rjmp	.-6      	; 0xac0 <_ZL7readBufjPh+0x28>
			*buff++ = SPDR;
     ac6:	9e b5       	in	r25, 0x2e	; 46
     ac8:	91 93       	st	Z+, r25
		
	static void read(void *buf, uint16_t nbyte, uint8_t dataSend = 0){
		if(nbyte == 0) return;
		
		uint8_t* buff = (uint8_t*)buf;
		while(nbyte--){
     aca:	6e 17       	cp	r22, r30
     acc:	7f 07       	cpc	r23, r31
        SPI.write8(ENC28J60_READ_BUF_MEM);
		SPI.read(data, len);
    }
    disableChip();
     ace:	b9 f7       	brne	.-18     	; 0xabe <_ZL7readBufjPh+0x26>
     ad0:	a1 df       	rcall	.-190    	; 0xa14 <_ZL11disableChipv>
}
     ad2:	df 91       	pop	r29
     ad4:	cf 91       	pop	r28
     ad6:	1f 91       	pop	r17
     ad8:	0f 91       	pop	r16
     ada:	08 95       	ret

00000adc <_ZL7SetBankh>:
        SPI.write(data, len);
    }
    disableChip();
}

static void SetBank (uint8_t address) {
     adc:	1f 93       	push	r17
     ade:	cf 93       	push	r28
     ae0:	df 93       	push	r29
     ae2:	18 2f       	mov	r17, r24
     ae4:	10 76       	andi	r17, 0x60	; 96
    if ((address & BANK_MASK) != Enc28j60Bank) {
     ae6:	c1 2f       	mov	r28, r17
     ae8:	d0 e0       	ldi	r29, 0x00	; 0
     aea:	80 91 f0 04 	lds	r24, 0x04F0	; 0x8004f0 <_ZL12Enc28j60Bank>
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	c8 17       	cp	r28, r24
     af2:	d9 07       	cpc	r29, r25
     af4:	a1 f0       	breq	.+40     	; 0xb1e <_ZL7SetBankh+0x42>
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_BSEL1|ECON1_BSEL0);
     af6:	43 e0       	ldi	r20, 0x03	; 3
     af8:	6f e1       	ldi	r22, 0x1F	; 31
     afa:	80 ea       	ldi	r24, 0xA0	; 160
     afc:	b5 df       	rcall	.-150    	; 0xa68 <_ZL7writeOphhh>
        Enc28j60Bank = address & BANK_MASK;
     afe:	10 93 f0 04 	sts	0x04F0, r17	; 0x8004f0 <_ZL12Enc28j60Bank>
        writeOp(ENC28J60_BIT_FIELD_SET, ECON1, Enc28j60Bank>>5);
     b02:	ae 01       	movw	r20, r28
     b04:	55 95       	asr	r21
     b06:	47 95       	ror	r20
     b08:	55 95       	asr	r21
     b0a:	47 95       	ror	r20
     b0c:	55 95       	asr	r21
     b0e:	47 95       	ror	r20
     b10:	55 95       	asr	r21
     b12:	47 95       	ror	r20
     b14:	55 95       	asr	r21
     b16:	47 95       	ror	r20
     b18:	6f e1       	ldi	r22, 0x1F	; 31
     b1a:	80 e8       	ldi	r24, 0x80	; 128
     b1c:	a5 df       	rcall	.-182    	; 0xa68 <_ZL7writeOphhh>
    }
}
     b1e:	df 91       	pop	r29
     b20:	cf 91       	pop	r28
     b22:	1f 91       	pop	r17
     b24:	08 95       	ret

00000b26 <_ZL11readRegByteh>:

static uint8_t readRegByte (uint8_t address) {
     b26:	cf 93       	push	r28
     b28:	c8 2f       	mov	r28, r24
    SetBank(address);
     b2a:	d8 df       	rcall	.-80     	; 0xadc <_ZL7SetBankh>
    return readOp(ENC28J60_READ_CTRL_REG, address);
     b2c:	6c 2f       	mov	r22, r28
     b2e:	80 e0       	ldi	r24, 0x00	; 0
     b30:	7b df       	rcall	.-266    	; 0xa28 <_ZL6readOphh>
}
     b32:	cf 91       	pop	r28
     b34:	08 95       	ret

00000b36 <_ZL12writeRegBytehh>:

static void writeRegByte (uint8_t address, uint8_t data) {
     b36:	cf 93       	push	r28
     b38:	df 93       	push	r29
     b3a:	c8 2f       	mov	r28, r24
     b3c:	d6 2f       	mov	r29, r22
    SetBank(address);
     b3e:	ce df       	rcall	.-100    	; 0xadc <_ZL7SetBankh>
    writeOp(ENC28J60_WRITE_CTRL_REG, address, data);
     b40:	4d 2f       	mov	r20, r29
     b42:	6c 2f       	mov	r22, r28
     b44:	80 e4       	ldi	r24, 0x40	; 64
     b46:	90 df       	rcall	.-224    	; 0xa68 <_ZL7writeOphhh>
}
     b48:	df 91       	pop	r29
     b4a:	cf 91       	pop	r28
     b4c:	08 95       	ret

00000b4e <_ZL8writeReghj>:

static void writeReg(uint8_t address, uint16_t data) {
     b4e:	cf 93       	push	r28
     b50:	df 93       	push	r29
     b52:	c8 2f       	mov	r28, r24
     b54:	d7 2f       	mov	r29, r23
    writeRegByte(address, data);
     b56:	ef df       	rcall	.-34     	; 0xb36 <_ZL12writeRegBytehh>
    writeRegByte(address + 1, data >> 8);
     b58:	6d 2f       	mov	r22, r29
     b5a:	81 e0       	ldi	r24, 0x01	; 1
     b5c:	8c 0f       	add	r24, r28
     b5e:	eb df       	rcall	.-42     	; 0xb36 <_ZL12writeRegBytehh>
}
     b60:	df 91       	pop	r29
     b62:	cf 91       	pop	r28
     b64:	08 95       	ret

00000b66 <_ZN8ENC28J607initSPIERVh>:
static void disableChip () {
	SetHigh(*selectPort, selectPin); //digitalWrite(selectPin, HIGH);
	//sei();
}

void ENC28J60::initSPI (Register& csDDR) {
     b66:	fc 01       	movw	r30, r24

class SPI{
public:
	static void begin(uint8_t clock = SPI_CLOCK_DIV2){
		//SPI_DIR |= SS;
		DDR_SPI |= MASK_MOSI | MASK_SCK | MASK_SS; //Not sure why, but SS pin requires to be set as output even when not being used.
     b68:	94 b1       	in	r25, 0x04	; 4
     b6a:	97 60       	ori	r25, 0x07	; 7
     b6c:	94 b9       	out	0x04, r25	; 4
		DDR_SPI &= ~(MASK_MISO);
     b6e:	23 98       	cbi	0x04, 3	; 4
		//disableCS();

		SPSR |= (clock >> 2);
     b70:	9d b5       	in	r25, 0x2d	; 45
     b72:	91 60       	ori	r25, 0x01	; 1
     b74:	9d bd       	out	0x2d, r25	; 45
		SPCR |= _BV(MSTR) | _BV(SPE) | (clock & 0x03);
     b76:	9c b5       	in	r25, 0x2c	; 44
     b78:	90 65       	ori	r25, 0x50	; 80
     b7a:	9c bd       	out	0x2c, r25	; 44
	SPI.begin(SPI_CLOCK_DIV2);

	SetOutput(csDDR, selectPin);
     b7c:	80 81       	ld	r24, Z
     b7e:	90 91 ed 04 	lds	r25, 0x04ED	; 0x8004ed <_ZL9selectPin>
     b82:	98 2b       	or	r25, r24
     b84:	90 83       	st	Z, r25
	disableChip();
     b86:	46 cf       	rjmp	.-372    	; 0xa14 <_ZL11disableChipv>
     b88:	08 95       	ret

00000b8a <_ZN8ENC28J6010initializeEjPKhRVhS3_h>:
    writeReg(MIWR, data);
    while (readRegByte(MISTAT) & MISTAT_BUSY)
        ;
}

uint8_t ENC28J60::initialize (uint16_t size, const uint8_t* macaddr, Register& csDDR, Register& csPort, uint8_t csPin) {
     b8a:	0f 93       	push	r16
     b8c:	cf 93       	push	r28
     b8e:	df 93       	push	r29
     b90:	eb 01       	movw	r28, r22
    bufferSize = size;
     b92:	90 93 f2 04 	sts	0x04F2, r25	; 0x8004f2 <_ZN8ENC28J6010bufferSizeE+0x1>
     b96:	80 93 f1 04 	sts	0x04F1, r24	; 0x8004f1 <_ZN8ENC28J6010bufferSizeE>
	selectPin = csPin;
     b9a:	00 93 ed 04 	sts	0x04ED, r16	; 0x8004ed <_ZL9selectPin>
	selectPort = &csPort;
     b9e:	30 93 ef 04 	sts	0x04EF, r19	; 0x8004ef <_ZL10selectPort+0x1>
     ba2:	20 93 ee 04 	sts	0x04EE, r18	; 0x8004ee <_ZL10selectPort>
    initSPI(csDDR);
     ba6:	ca 01       	movw	r24, r20
     ba8:	de df       	rcall	.-68     	; 0xb66 <_ZN8ENC28J607initSPIERVh>

    writeOp(ENC28J60_SOFT_RESET, 0, ENC28J60_SOFT_RESET);
     baa:	4f ef       	ldi	r20, 0xFF	; 255
     bac:	60 e0       	ldi	r22, 0x00	; 0
     bae:	8f ef       	ldi	r24, 0xFF	; 255
     bb0:	5b df       	rcall	.-330    	; 0xa68 <_ZL7writeOphhh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     bb2:	8f e3       	ldi	r24, 0x3F	; 63
     bb4:	9f e1       	ldi	r25, 0x1F	; 31
     bb6:	01 97       	sbiw	r24, 0x01	; 1
     bb8:	f1 f7       	brne	.-4      	; 0xbb6 <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0x2c>
     bba:	00 c0       	rjmp	.+0      	; 0xbbc <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0x32>
     bbc:	00 00       	nop
	_delay_ms(2);
    while (!readOp(ENC28J60_READ_CTRL_REG, ESTAT) & ESTAT_CLKRDY)
     bbe:	6d e1       	ldi	r22, 0x1D	; 29
     bc0:	80 e0       	ldi	r24, 0x00	; 0
     bc2:	32 df       	rcall	.-412    	; 0xa28 <_ZL6readOphh>
     bc4:	88 23       	and	r24, r24
     bc6:	d9 f3       	breq	.-10     	; 0xbbe <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0x34>
        ;

    writeReg(ERXST, RXSTART_INIT);
     bc8:	60 e0       	ldi	r22, 0x00	; 0
     bca:	70 e0       	ldi	r23, 0x00	; 0
     bcc:	88 e0       	ldi	r24, 0x08	; 8
     bce:	bf df       	rcall	.-130    	; 0xb4e <_ZL8writeReghj>
    writeReg(ERXRDPT, RXSTART_INIT);
     bd0:	60 e0       	ldi	r22, 0x00	; 0
     bd2:	70 e0       	ldi	r23, 0x00	; 0
     bd4:	8c e0       	ldi	r24, 0x0C	; 12
     bd6:	bb df       	rcall	.-138    	; 0xb4e <_ZL8writeReghj>
    writeReg(ERXND, RXSTOP_INIT);
     bd8:	6f ef       	ldi	r22, 0xFF	; 255
     bda:	7b e0       	ldi	r23, 0x0B	; 11
     bdc:	8a e0       	ldi	r24, 0x0A	; 10
     bde:	b7 df       	rcall	.-146    	; 0xb4e <_ZL8writeReghj>
    writeReg(ETXST, TXSTART_INIT);
     be0:	60 e0       	ldi	r22, 0x00	; 0
     be2:	7c e0       	ldi	r23, 0x0C	; 12
     be4:	84 e0       	ldi	r24, 0x04	; 4
     be6:	b3 df       	rcall	.-154    	; 0xb4e <_ZL8writeReghj>
    writeReg(ETXND, TXSTOP_INIT);
     be8:	6f ef       	ldi	r22, 0xFF	; 255
     bea:	71 e1       	ldi	r23, 0x11	; 17
     bec:	86 e0       	ldi	r24, 0x06	; 6
     bee:	af df       	rcall	.-162    	; 0xb4e <_ZL8writeReghj>

    writeRegByte(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN|ERXFCON_PMEN|ERXFCON_BCEN);
     bf0:	61 eb       	ldi	r22, 0xB1	; 177
     bf2:	88 e3       	ldi	r24, 0x38	; 56
     bf4:	a0 df       	rcall	.-192    	; 0xb36 <_ZL12writeRegBytehh>
    writeReg(EPMM0, 0x303f);
     bf6:	6f e3       	ldi	r22, 0x3F	; 63
     bf8:	70 e3       	ldi	r23, 0x30	; 48
     bfa:	88 e2       	ldi	r24, 0x28	; 40
     bfc:	a8 df       	rcall	.-176    	; 0xb4e <_ZL8writeReghj>
    writeReg(EPMCS, 0xf7f9);
     bfe:	69 ef       	ldi	r22, 0xF9	; 249
     c00:	77 ef       	ldi	r23, 0xF7	; 247
     c02:	80 e3       	ldi	r24, 0x30	; 48
     c04:	a4 df       	rcall	.-184    	; 0xb4e <_ZL8writeReghj>
    writeRegByte(MACON1, MACON1_MARXEN);
     c06:	61 e0       	ldi	r22, 0x01	; 1
     c08:	80 ec       	ldi	r24, 0xC0	; 192
     c0a:	95 df       	rcall	.-214    	; 0xb36 <_ZL12writeRegBytehh>
    writeOp(ENC28J60_BIT_FIELD_SET, MACON3,
            MACON3_PADCFG0|MACON3_TXCRCEN|MACON3_FRMLNEN);
     c0c:	42 e3       	ldi	r20, 0x32	; 50
     c0e:	62 ec       	ldi	r22, 0xC2	; 194
     c10:	80 e8       	ldi	r24, 0x80	; 128
     c12:	2a df       	rcall	.-428    	; 0xa68 <_ZL7writeOphhh>
    writeReg(MAIPG, 0x0C12);
     c14:	62 e1       	ldi	r22, 0x12	; 18
     c16:	7c e0       	ldi	r23, 0x0C	; 12
     c18:	86 ec       	ldi	r24, 0xC6	; 198
    writeRegByte(MABBIPG, 0x12);
     c1a:	99 df       	rcall	.-206    	; 0xb4e <_ZL8writeReghj>
     c1c:	62 e1       	ldi	r22, 0x12	; 18
     c1e:	84 ec       	ldi	r24, 0xC4	; 196
    writeReg(MAMXFL, MAX_FRAMELEN);
     c20:	8a df       	rcall	.-236    	; 0xb36 <_ZL12writeRegBytehh>
     c22:	6c ed       	ldi	r22, 0xDC	; 220
     c24:	75 e0       	ldi	r23, 0x05	; 5
    writeRegByte(MAADR5, macaddr[0]);
     c26:	8a ec       	ldi	r24, 0xCA	; 202
     c28:	92 df       	rcall	.-220    	; 0xb4e <_ZL8writeReghj>
     c2a:	68 81       	ld	r22, Y
    writeRegByte(MAADR4, macaddr[1]);
     c2c:	84 ee       	ldi	r24, 0xE4	; 228
     c2e:	83 df       	rcall	.-250    	; 0xb36 <_ZL12writeRegBytehh>
     c30:	69 81       	ldd	r22, Y+1	; 0x01
    writeRegByte(MAADR3, macaddr[2]);
     c32:	85 ee       	ldi	r24, 0xE5	; 229
     c34:	80 df       	rcall	.-256    	; 0xb36 <_ZL12writeRegBytehh>
    writeRegByte(MAADR2, macaddr[3]);
     c36:	6a 81       	ldd	r22, Y+2	; 0x02
     c38:	82 ee       	ldi	r24, 0xE2	; 226
     c3a:	7d df       	rcall	.-262    	; 0xb36 <_ZL12writeRegBytehh>
    writeRegByte(MAADR1, macaddr[4]);
     c3c:	6b 81       	ldd	r22, Y+3	; 0x03
     c3e:	83 ee       	ldi	r24, 0xE3	; 227
     c40:	7a df       	rcall	.-268    	; 0xb36 <_ZL12writeRegBytehh>
    writeRegByte(MAADR0, macaddr[5]);
     c42:	6c 81       	ldd	r22, Y+4	; 0x04
     c44:	80 ee       	ldi	r24, 0xE0	; 224
     c46:	77 df       	rcall	.-274    	; 0xb36 <_ZL12writeRegBytehh>
    writeRegByte(MICMD, 0x00);
    return readRegByte(MIRD+1);
}

static void writePhy (uint8_t address, uint16_t data) {
    writeRegByte(MIREGADR, address);
     c48:	6d 81       	ldd	r22, Y+5	; 0x05
     c4a:	81 ee       	ldi	r24, 0xE1	; 225
     c4c:	74 df       	rcall	.-280    	; 0xb36 <_ZL12writeRegBytehh>
    writeReg(MIWR, data);
     c4e:	60 e1       	ldi	r22, 0x10	; 16
     c50:	84 ed       	ldi	r24, 0xD4	; 212
     c52:	71 df       	rcall	.-286    	; 0xb36 <_ZL12writeRegBytehh>
     c54:	60 e0       	ldi	r22, 0x00	; 0
     c56:	71 e0       	ldi	r23, 0x01	; 1
    while (readRegByte(MISTAT) & MISTAT_BUSY)
     c58:	86 ed       	ldi	r24, 0xD6	; 214
     c5a:	79 df       	rcall	.-270    	; 0xb4e <_ZL8writeReghj>
     c5c:	8a ee       	ldi	r24, 0xEA	; 234
     c5e:	63 df       	rcall	.-314    	; 0xb26 <_ZL11readRegByteh>
     c60:	80 fd       	sbrc	r24, 0
    writeRegByte(MAADR3, macaddr[2]);
    writeRegByte(MAADR2, macaddr[3]);
    writeRegByte(MAADR1, macaddr[4]);
    writeRegByte(MAADR0, macaddr[5]);
    writePhy(PHCON2, PHCON2_HDLDIS);
    SetBank(ECON1);
     c62:	fc cf       	rjmp	.-8      	; 0xc5c <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0xd2>
     c64:	8f e1       	ldi	r24, 0x1F	; 31
     c66:	3a df       	rcall	.-396    	; 0xadc <_ZL7SetBankh>
    writeOp(ENC28J60_BIT_FIELD_SET, EIE, EIE_INTIE|EIE_PKTIE);
     c68:	40 ec       	ldi	r20, 0xC0	; 192
     c6a:	6b e1       	ldi	r22, 0x1B	; 27
     c6c:	80 e8       	ldi	r24, 0x80	; 128
     c6e:	fc de       	rcall	.-520    	; 0xa68 <_ZL7writeOphhh>
     c70:	44 e0       	ldi	r20, 0x04	; 4
    writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN);
     c72:	6f e1       	ldi	r22, 0x1F	; 31
     c74:	80 e8       	ldi	r24, 0x80	; 128
     c76:	f8 de       	rcall	.-528    	; 0xa68 <_ZL7writeOphhh>
     c78:	82 e7       	ldi	r24, 0x72	; 114
     c7a:	55 df       	rcall	.-342    	; 0xb26 <_ZL11readRegByteh>

    uint8_t rev = readRegByte(EREVID);
     c7c:	86 30       	cpi	r24, 0x06	; 6
     c7e:	08 f0       	brcs	.+2      	; 0xc82 <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0xf8>
     c80:	8f 5f       	subi	r24, 0xFF	; 255
    // microchip forgot to step the number on the silicon when they
    // released the revision B7. 6 is now rev B7. We still have
    // to see what they do when they release B8. At the moment
    // there is no B8 out yet
    if (rev > 5) ++rev;
     c82:	df 91       	pop	r29
     c84:	cf 91       	pop	r28
     c86:	0f 91       	pop	r16
    return rev;
}
     c88:	08 95       	ret

00000c8a <_ZN8ENC28J608isLinkUpEv>:
     c8a:	61 e1       	ldi	r22, 0x11	; 17
     c8c:	84 ed       	ldi	r24, 0xD4	; 212
     c8e:	53 df       	rcall	.-346    	; 0xb36 <_ZL12writeRegBytehh>
    writeRegByte(address + 1, data >> 8);
}

static uint16_t readPhyByte (uint8_t address) {
    writeRegByte(MIREGADR, address);
    writeRegByte(MICMD, MICMD_MIIRD);
     c90:	61 e0       	ldi	r22, 0x01	; 1
     c92:	82 ed       	ldi	r24, 0xD2	; 210
     c94:	50 df       	rcall	.-352    	; 0xb36 <_ZL12writeRegBytehh>
    while (readRegByte(MISTAT) & MISTAT_BUSY)
     c96:	8a ee       	ldi	r24, 0xEA	; 234
     c98:	46 df       	rcall	.-372    	; 0xb26 <_ZL11readRegByteh>
     c9a:	80 fd       	sbrc	r24, 0
     c9c:	fc cf       	rjmp	.-8      	; 0xc96 <_ZN8ENC28J608isLinkUpEv+0xc>
        ;
    writeRegByte(MICMD, 0x00);
     c9e:	60 e0       	ldi	r22, 0x00	; 0
     ca0:	82 ed       	ldi	r24, 0xD2	; 210
     ca2:	49 df       	rcall	.-366    	; 0xb36 <_ZL12writeRegBytehh>
    return readRegByte(MIRD+1);
     ca4:	89 ed       	ldi	r24, 0xD9	; 217
     ca6:	3f df       	rcall	.-386    	; 0xb26 <_ZL11readRegByteh>
     ca8:	82 fb       	bst	r24, 2
    return rev;
}

bool ENC28J60::isLinkUp() {
    return (readPhyByte(PHSTAT2) >> 2) & 1;
}
     caa:	88 27       	eor	r24, r24
     cac:	80 f9       	bld	r24, 0
     cae:	08 95       	ret

00000cb0 <_ZN8ENC28J6010packetSendEj>:
     cb0:	af 92       	push	r10

struct transmit_status_vector {
    uint8_t bytes[7];
};

void ENC28J60::packetSend(uint16_t len) {
     cb2:	bf 92       	push	r11
     cb4:	cf 92       	push	r12
     cb6:	df 92       	push	r13
     cb8:	ef 92       	push	r14
     cba:	ff 92       	push	r15
     cbc:	0f 93       	push	r16
     cbe:	1f 93       	push	r17
     cc0:	cf 93       	push	r28
     cc2:	df 93       	push	r29
     cc4:	7c 01       	movw	r14, r24
        writeOp(ENC28J60_BIT_FIELD_CLR, EIR, EIR_TXERIF|EIR_TXIF);

        // prepare new transmission
        if (retry == 0) {
            writeReg(EWRPT, TXSTART_INIT);
            writeReg(ETXND, TXSTART_INIT+len);
     cc6:	6c 01       	movw	r12, r24
     cc8:	84 ef       	ldi	r24, 0xF4	; 244
     cca:	d8 1a       	sub	r13, r24

	static void write(const void *buf, uint16_t nbyte){
		if(nbyte == 0) return;
		
		const uint8_t* buff = (const uint8_t*)(buf);
		SPDR = *buff;
     ccc:	0f 2e       	mov	r0, r31
     cce:	f3 ef       	ldi	r31, 0xF3	; 243
     cd0:	af 2e       	mov	r10, r31
     cd2:	f4 e0       	ldi	r31, 0x04	; 4
     cd4:	bf 2e       	mov	r11, r31
     cd6:	f0 2d       	mov	r31, r0
     cd8:	87 01       	movw	r16, r14
     cda:	0d 50       	subi	r16, 0x0D	; 13
     cdc:	1b 4f       	sbci	r17, 0xFB	; 251
        // the Microchip TCP/IP stack implementation used to first check
        // whether TXERIF is set and only then reset the transmit logic
        // but this has been changed in later versions; possibly they
        // have a reason for this; they don't mention this in the errata
        // sheet
        writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRST);
     cde:	40 e8       	ldi	r20, 0x80	; 128
     ce0:	6f e1       	ldi	r22, 0x1F	; 31
     ce2:	80 e8       	ldi	r24, 0x80	; 128
     ce4:	c1 de       	rcall	.-638    	; 0xa68 <_ZL7writeOphhh>
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRST);
     ce6:	40 e8       	ldi	r20, 0x80	; 128
     ce8:	6f e1       	ldi	r22, 0x1F	; 31
     cea:	80 ea       	ldi	r24, 0xA0	; 160
     cec:	bd de       	rcall	.-646    	; 0xa68 <_ZL7writeOphhh>
        writeOp(ENC28J60_BIT_FIELD_CLR, EIR, EIR_TXERIF|EIR_TXIF);
     cee:	4a e0       	ldi	r20, 0x0A	; 10
     cf0:	6c e1       	ldi	r22, 0x1C	; 28
     cf2:	80 ea       	ldi	r24, 0xA0	; 160
     cf4:	b9 de       	rcall	.-654    	; 0xa68 <_ZL7writeOphhh>

        // prepare new transmission
        if (retry == 0) {
            writeReg(EWRPT, TXSTART_INIT);
     cf6:	60 e0       	ldi	r22, 0x00	; 0
     cf8:	7c e0       	ldi	r23, 0x0C	; 12
     cfa:	82 e0       	ldi	r24, 0x02	; 2
            writeReg(ETXND, TXSTART_INIT+len);
     cfc:	28 df       	rcall	.-432    	; 0xb4e <_ZL8writeReghj>
     cfe:	b6 01       	movw	r22, r12
     d00:	86 e0       	ldi	r24, 0x06	; 6
            writeOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
     d02:	25 df       	rcall	.-438    	; 0xb4e <_ZL8writeReghj>
     d04:	40 e0       	ldi	r20, 0x00	; 0
     d06:	60 e0       	ldi	r22, 0x00	; 0
     d08:	8a e7       	ldi	r24, 0x7A	; 122
     d0a:	ae de       	rcall	.-676    	; 0xa68 <_ZL7writeOphhh>
    }
    disableChip();
}

static void writeBuf(uint16_t len, const uint8_t* data) {
    enableChip();
     d0c:	78 de       	rcall	.-784    	; 0x9fe <_ZL10enableChipv>
     d0e:	e1 14       	cp	r14, r1
    if (len != 0) {
     d10:	f1 04       	cpc	r15, r1
     d12:	e1 f0       	breq	.+56     	; 0xd4c <_ZN8ENC28J6010packetSendEj+0x9c>
     d14:	8a e7       	ldi	r24, 0x7A	; 122
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     d16:	8e bd       	out	0x2e, r24	; 46
     d18:	00 00       	nop
		asm volatile("nop");
     d1a:	0d b4       	in	r0, 0x2d	; 45
		while(!(SPSR & _BV(SPIF)));
     d1c:	07 fe       	sbrs	r0, 7
     d1e:	fd cf       	rjmp	.-6      	; 0xd1a <_ZN8ENC28J6010packetSendEj+0x6a>
     d20:	f5 01       	movw	r30, r10

	static void write(const void *buf, uint16_t nbyte){
		if(nbyte == 0) return;
		
		const uint8_t* buff = (const uint8_t*)(buf);
		SPDR = *buff;
     d22:	80 81       	ld	r24, Z
     d24:	8e bd       	out	0x2e, r24	; 46
     d26:	f1 e0       	ldi	r31, 0x01	; 1
		while(--nbyte){
     d28:	ef 16       	cp	r14, r31
     d2a:	f1 04       	cpc	r15, r1
     d2c:	59 f0       	breq	.+22     	; 0xd44 <_ZN8ENC28J6010packetSendEj+0x94>
     d2e:	e4 ef       	ldi	r30, 0xF4	; 244
     d30:	f4 e0       	ldi	r31, 0x04	; 4
     d32:	00 00       	nop
			asm volatile("nop");
     d34:	0d b4       	in	r0, 0x2d	; 45
			while (!(SPSR & _BV(SPIF))) ;
     d36:	07 fe       	sbrs	r0, 7
     d38:	fd cf       	rjmp	.-6      	; 0xd34 <_ZN8ENC28J6010packetSendEj+0x84>
     d3a:	81 91       	ld	r24, Z+
			SPDR = *++buff;
     d3c:	8e bd       	out	0x2e, r24	; 46
     d3e:	e0 17       	cp	r30, r16
	static void write(const void *buf, uint16_t nbyte){
		if(nbyte == 0) return;
		
		const uint8_t* buff = (const uint8_t*)(buf);
		SPDR = *buff;
		while(--nbyte){
     d40:	f1 07       	cpc	r31, r17
     d42:	b9 f7       	brne	.-18     	; 0xd32 <_ZN8ENC28J6010packetSendEj+0x82>
			asm volatile("nop");
			while (!(SPSR & _BV(SPIF))) ;
			SPDR = *++buff;
		}
		asm volatile("nop");
     d44:	00 00       	nop
		while (!(SPSR & _BV(SPIF))) ;
     d46:	0d b4       	in	r0, 0x2d	; 45
     d48:	07 fe       	sbrs	r0, 7
        SPI.write8(ENC28J60_WRITE_BUF_MEM);

        SPI.write(data, len);
    }
    disableChip();
     d4a:	fd cf       	rjmp	.-6      	; 0xd46 <_ZN8ENC28J6010packetSendEj+0x96>
            writeOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
            writeBuf(len, buffer);
        }

        // initiate transmission
        writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
     d4c:	63 de       	rcall	.-826    	; 0xa14 <_ZL11disableChipv>
     d4e:	48 e0       	ldi	r20, 0x08	; 8
     d50:	6f e1       	ldi	r22, 0x1F	; 31
     d52:	80 e8       	ldi	r24, 0x80	; 128
     d54:	89 de       	rcall	.-750    	; 0xa68 <_ZL7writeOphhh>
        // wait until transmission has finished; referring to the data sheet and
        // to the errata (Errata Issue 13; Example 1) you only need to wait until either
        // TXIF or TXERIF gets set; however this leads to hangs; apparently Microchip
        // realized this and in later implementations of their tcp/ip stack they introduced
        // a counter to avoid hangs; of course they didn't update the errata sheet
        uint16_t count = 0;
     d56:	c0 e0       	ldi	r28, 0x00	; 0
     d58:	d0 e0       	ldi	r29, 0x00	; 0
        while ((readRegByte(EIR) & (EIR_TXIF | EIR_TXERIF)) == 0 && ++count < 1000U)
     d5a:	8c e1       	ldi	r24, 0x1C	; 28
     d5c:	e4 de       	rcall	.-568    	; 0xb26 <_ZL11readRegByteh>
     d5e:	8a 70       	andi	r24, 0x0A	; 10
     d60:	31 f4       	brne	.+12     	; 0xd6e <_ZN8ENC28J6010packetSendEj+0xbe>
     d62:	21 96       	adiw	r28, 0x01	; 1
     d64:	c8 3e       	cpi	r28, 0xE8	; 232
     d66:	83 e0       	ldi	r24, 0x03	; 3
     d68:	d8 07       	cpc	r29, r24
     d6a:	b9 f7       	brne	.-18     	; 0xd5a <_ZN8ENC28J6010packetSendEj+0xaa>
     d6c:	0c c0       	rjmp	.+24     	; 0xd86 <_ZN8ENC28J6010packetSendEj+0xd6>
            ;

        if (!(readRegByte(EIR) & EIR_TXERIF) && count < 1000U) {
     d6e:	8c e1       	ldi	r24, 0x1C	; 28
     d70:	da de       	rcall	.-588    	; 0xb26 <_ZL11readRegByteh>
     d72:	81 fd       	sbrc	r24, 1
     d74:	03 c0       	rjmp	.+6      	; 0xd7c <_ZN8ENC28J6010packetSendEj+0xcc>
     d76:	c8 3e       	cpi	r28, 0xE8	; 232
     d78:	d3 40       	sbci	r29, 0x03	; 3
            // no error; start new transmission
            break;
        }

        // cancel previous transmission if stuck
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRTS);
     d7a:	40 f0       	brcs	.+16     	; 0xd8c <_ZN8ENC28J6010packetSendEj+0xdc>
     d7c:	48 e0       	ldi	r20, 0x08	; 8
     d7e:	6f e1       	ldi	r22, 0x1F	; 31
     d80:	80 ea       	ldi	r24, 0xA0	; 160
     d82:	72 de       	rcall	.-796    	; 0xa68 <_ZL7writeOphhh>
};

void ENC28J60::packetSend(uint16_t len) {
    uint8_t retry = 0;

    while (1) {
     d84:	ac cf       	rjmp	.-168    	; 0xcde <_ZN8ENC28J6010packetSendEj+0x2e>
        // a counter to avoid hangs; of course they didn't update the errata sheet
        uint16_t count = 0;
        while ((readRegByte(EIR) & (EIR_TXIF | EIR_TXERIF)) == 0 && ++count < 1000U)
            ;

        if (!(readRegByte(EIR) & EIR_TXERIF) && count < 1000U) {
     d86:	8c e1       	ldi	r24, 0x1C	; 28
     d88:	ce de       	rcall	.-612    	; 0xb26 <_ZL11readRegByteh>
     d8a:	f8 cf       	rjmp	.-16     	; 0xd7c <_ZN8ENC28J6010packetSendEj+0xcc>
     d8c:	df 91       	pop	r29
        }

        // cancel previous transmission if stuck
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRTS);
    }
}
     d8e:	cf 91       	pop	r28
     d90:	1f 91       	pop	r17
     d92:	0f 91       	pop	r16
     d94:	ff 90       	pop	r15
     d96:	ef 90       	pop	r14
     d98:	df 90       	pop	r13
     d9a:	cf 90       	pop	r12
     d9c:	bf 90       	pop	r11
     d9e:	af 90       	pop	r10
     da0:	08 95       	ret

00000da2 <_ZN8ENC28J6013packetReceiveEv>:
     da2:	0f 93       	push	r16


uint16_t ENC28J60::packetReceive() {
     da4:	1f 93       	push	r17
     da6:	cf 93       	push	r28
     da8:	df 93       	push	r29
     daa:	00 d0       	rcall	.+0      	; 0xdac <_ZN8ENC28J6013packetReceiveEv+0xa>
     dac:	00 d0       	rcall	.+0      	; 0xdae <_ZN8ENC28J6013packetReceiveEv+0xc>
     dae:	cd b7       	in	r28, 0x3d	; 61
     db0:	de b7       	in	r29, 0x3e	; 62
    static uint16_t gNextPacketPtr = RXSTART_INIT;
    static bool     unreleasedPacket = false;
    uint16_t len = 0;

    if (unreleasedPacket) {
     db2:	80 91 ec 04 	lds	r24, 0x04EC	; 0x8004ec <_ZZN8ENC28J6013packetReceiveEvE16unreleasedPacket>
     db6:	88 23       	and	r24, r24
     db8:	91 f0       	breq	.+36     	; 0xdde <_ZN8ENC28J6013packetReceiveEv+0x3c>
        if (gNextPacketPtr == 0)
     dba:	60 91 ea 04 	lds	r22, 0x04EA	; 0x8004ea <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr>
     dbe:	70 91 eb 04 	lds	r23, 0x04EB	; 0x8004eb <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr+0x1>
     dc2:	61 15       	cp	r22, r1
     dc4:	71 05       	cpc	r23, r1
     dc6:	29 f4       	brne	.+10     	; 0xdd2 <_ZN8ENC28J6013packetReceiveEv+0x30>
            writeReg(ERXRDPT, RXSTOP_INIT);
     dc8:	6f ef       	ldi	r22, 0xFF	; 255
     dca:	7b e0       	ldi	r23, 0x0B	; 11
     dcc:	8c e0       	ldi	r24, 0x0C	; 12
     dce:	bf de       	rcall	.-642    	; 0xb4e <_ZL8writeReghj>
     dd0:	04 c0       	rjmp	.+8      	; 0xdda <_ZN8ENC28J6013packetReceiveEv+0x38>
        else
            writeReg(ERXRDPT, gNextPacketPtr - 1);
     dd2:	61 50       	subi	r22, 0x01	; 1
     dd4:	71 09       	sbc	r23, r1
     dd6:	8c e0       	ldi	r24, 0x0C	; 12
     dd8:	ba de       	rcall	.-652    	; 0xb4e <_ZL8writeReghj>
        unreleasedPacket = false;
     dda:	10 92 ec 04 	sts	0x04EC, r1	; 0x8004ec <_ZZN8ENC28J6013packetReceiveEvE16unreleasedPacket>
    }

    if (readRegByte(EPKTCNT) > 0) {
     dde:	89 e3       	ldi	r24, 0x39	; 57
     de0:	a2 de       	rcall	.-700    	; 0xb26 <_ZL11readRegByteh>
     de2:	88 23       	and	r24, r24
     de4:	a9 f1       	breq	.+106    	; 0xe50 <_ZN8ENC28J6013packetReceiveEv+0xae>
        writeReg(ERDPT, gNextPacketPtr);
     de6:	60 91 ea 04 	lds	r22, 0x04EA	; 0x8004ea <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr>
     dea:	70 91 eb 04 	lds	r23, 0x04EB	; 0x8004eb <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr+0x1>
     dee:	80 e0       	ldi	r24, 0x00	; 0
     df0:	ae de       	rcall	.-676    	; 0xb4e <_ZL8writeReghj>
            uint16_t nextPacket;
            uint16_t byteCount;
            uint16_t status;
        } header;

        readBuf(sizeof header, (uint8_t*) &header);
     df2:	be 01       	movw	r22, r28
     df4:	6f 5f       	subi	r22, 0xFF	; 255
     df6:	7f 4f       	sbci	r23, 0xFF	; 255
     df8:	86 e0       	ldi	r24, 0x06	; 6
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	4d de       	rcall	.-870    	; 0xa98 <_ZL7readBufjPh>

        gNextPacketPtr  = header.nextPacket;
     dfe:	89 81       	ldd	r24, Y+1	; 0x01
     e00:	9a 81       	ldd	r25, Y+2	; 0x02
     e02:	90 93 eb 04 	sts	0x04EB, r25	; 0x8004eb <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr+0x1>
     e06:	80 93 ea 04 	sts	0x04EA, r24	; 0x8004ea <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr>
        len = header.byteCount - 4; //remove the CRC count
        if (len>bufferSize-1)
            len=bufferSize-1;
        if ((header.status & 0x80)==0)
     e0a:	8d 81       	ldd	r24, Y+5	; 0x05
     e0c:	87 ff       	sbrs	r24, 7
     e0e:	12 c0       	rjmp	.+36     	; 0xe34 <_ZN8ENC28J6013packetReceiveEv+0x92>

        readBuf(sizeof header, (uint8_t*) &header);

        gNextPacketPtr  = header.nextPacket;
        len = header.byteCount - 4; //remove the CRC count
        if (len>bufferSize-1)
     e10:	80 91 f1 04 	lds	r24, 0x04F1	; 0x8004f1 <_ZN8ENC28J6010bufferSizeE>
     e14:	90 91 f2 04 	lds	r25, 0x04F2	; 0x8004f2 <_ZN8ENC28J6010bufferSizeE+0x1>
     e18:	01 97       	sbiw	r24, 0x01	; 1
        } header;

        readBuf(sizeof header, (uint8_t*) &header);

        gNextPacketPtr  = header.nextPacket;
        len = header.byteCount - 4; //remove the CRC count
     e1a:	0b 81       	ldd	r16, Y+3	; 0x03
     e1c:	1c 81       	ldd	r17, Y+4	; 0x04
     e1e:	04 50       	subi	r16, 0x04	; 4
     e20:	11 09       	sbc	r17, r1
     e22:	80 17       	cp	r24, r16
     e24:	91 07       	cpc	r25, r17
     e26:	08 f4       	brcc	.+2      	; 0xe2a <_ZN8ENC28J6013packetReceiveEv+0x88>
        if (len>bufferSize-1)
            len=bufferSize-1;
        if ((header.status & 0x80)==0)
            len = 0;
        else
            readBuf(len, buffer);
     e28:	8c 01       	movw	r16, r24
     e2a:	63 ef       	ldi	r22, 0xF3	; 243
     e2c:	74 e0       	ldi	r23, 0x04	; 4
     e2e:	c8 01       	movw	r24, r16
     e30:	33 de       	rcall	.-922    	; 0xa98 <_ZL7readBufjPh>
     e32:	02 c0       	rjmp	.+4      	; 0xe38 <_ZN8ENC28J6013packetReceiveEv+0x96>
        gNextPacketPtr  = header.nextPacket;
        len = header.byteCount - 4; //remove the CRC count
        if (len>bufferSize-1)
            len=bufferSize-1;
        if ((header.status & 0x80)==0)
            len = 0;
     e34:	00 e0       	ldi	r16, 0x00	; 0
     e36:	10 e0       	ldi	r17, 0x00	; 0
        else
            readBuf(len, buffer);
        buffer[len] = 0;
     e38:	f8 01       	movw	r30, r16
     e3a:	ed 50       	subi	r30, 0x0D	; 13
     e3c:	fb 4f       	sbci	r31, 0xFB	; 251
     e3e:	10 82       	st	Z, r1
        unreleasedPacket = true;
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	80 93 ec 04 	sts	0x04EC, r24	; 0x8004ec <_ZZN8ENC28J6013packetReceiveEvE16unreleasedPacket>

        writeOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
     e46:	40 e4       	ldi	r20, 0x40	; 64
     e48:	6e e1       	ldi	r22, 0x1E	; 30
     e4a:	80 e8       	ldi	r24, 0x80	; 128
     e4c:	0d de       	rcall	.-998    	; 0xa68 <_ZL7writeOphhh>
     e4e:	02 c0       	rjmp	.+4      	; 0xe54 <_ZN8ENC28J6013packetReceiveEv+0xb2>


uint16_t ENC28J60::packetReceive() {
    static uint16_t gNextPacketPtr = RXSTART_INIT;
    static bool     unreleasedPacket = false;
    uint16_t len = 0;
     e50:	00 e0       	ldi	r16, 0x00	; 0
     e52:	10 e0       	ldi	r17, 0x00	; 0
        unreleasedPacket = true;

        writeOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
    }
    return len;
}
     e54:	c8 01       	movw	r24, r16
     e56:	26 96       	adiw	r28, 0x06	; 6
     e58:	0f b6       	in	r0, 0x3f	; 63
     e5a:	f8 94       	cli
     e5c:	de bf       	out	0x3e, r29	; 62
     e5e:	0f be       	out	0x3f, r0	; 63
     e60:	cd bf       	out	0x3d, r28	; 61
     e62:	df 91       	pop	r29
     e64:	cf 91       	pop	r28
     e66:	1f 91       	pop	r17
     e68:	0f 91       	pop	r16
     e6a:	08 95       	ret

00000e6c <_ZN9EtherCard5beginEPKhRVhS3_h>:
uint16_t EtherCard::delaycnt = 0; //request gateway ARP lookup

uint8_t Ethernet::buffer[ETHER_CARD_BUFFER_SIZE]; // tcp/ip send and receive buffer

uint8_t EtherCard::begin (const uint8_t* macaddr,
                          Register& csDDR, Register& csPort, uint8_t csPin) {
     e6c:	ef 92       	push	r14
     e6e:	ff 92       	push	r15
     e70:	0f 93       	push	r16
     e72:	cf 93       	push	r28
     e74:	df 93       	push	r29
     e76:	eb 01       	movw	r28, r22
     e78:	7a 01       	movw	r14, r20
     e7a:	02 2f       	mov	r16, r18

    copyMac(mymac, macaddr);
     e7c:	bc 01       	movw	r22, r24
     e7e:	8d e0       	ldi	r24, 0x0D	; 13
     e80:	97 e0       	ldi	r25, 0x07	; 7
     e82:	c9 d3       	rcall	.+1938   	; 0x1616 <_ZN9EtherCard7copyMacEPhPKh>
    return initialize(ETHER_CARD_BUFFER_SIZE, mymac, csDDR, csPort, csPin);
     e84:	97 01       	movw	r18, r14
     e86:	ae 01       	movw	r20, r28
     e88:	6d e0       	ldi	r22, 0x0D	; 13
     e8a:	77 e0       	ldi	r23, 0x07	; 7
     e8c:	80 e0       	ldi	r24, 0x00	; 0
     e8e:	92 e0       	ldi	r25, 0x02	; 2
     e90:	7c de       	rcall	.-776    	; 0xb8a <_ZN8ENC28J6010initializeEjPKhRVhS3_h>
}
     e92:	df 91       	pop	r29
     e94:	cf 91       	pop	r28
     e96:	0f 91       	pop	r16
     e98:	ff 90       	pop	r15
     e9a:	ef 90       	pop	r14
     e9c:	08 95       	ret

00000e9e <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_>:

bool EtherCard::staticSetup (const uint8_t* my_ip,
                             const uint8_t* gw_ip,
                             const uint8_t* dns_ip,
                             const uint8_t* mask) {
     e9e:	ef 92       	push	r14
     ea0:	ff 92       	push	r15
     ea2:	0f 93       	push	r16
     ea4:	1f 93       	push	r17
     ea6:	cf 93       	push	r28
     ea8:	df 93       	push	r29
     eaa:	7b 01       	movw	r14, r22
     eac:	8a 01       	movw	r16, r20
     eae:	e9 01       	movw	r28, r18

    if (my_ip != 0)
     eb0:	00 97       	sbiw	r24, 0x00	; 0
     eb2:	21 f0       	breq	.+8      	; 0xebc <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x1e>
        copyIp(myip, my_ip);
     eb4:	bc 01       	movw	r22, r24
     eb6:	89 e0       	ldi	r24, 0x09	; 9
     eb8:	97 e0       	ldi	r25, 0x07	; 7
     eba:	a0 d3       	rcall	.+1856   	; 0x15fc <_ZN9EtherCard6copyIpEPhPKh>
    if (gw_ip != 0)
     ebc:	e1 14       	cp	r14, r1
     ebe:	f1 04       	cpc	r15, r1
     ec0:	11 f0       	breq	.+4      	; 0xec6 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x28>
        setGwIp(gw_ip);
     ec2:	c7 01       	movw	r24, r14
     ec4:	bd d1       	rcall	.+890    	; 0x1240 <_ZN9EtherCard7setGwIpEPKh>
    if (dns_ip != 0)
     ec6:	01 15       	cp	r16, r1
     ec8:	11 05       	cpc	r17, r1
     eca:	21 f0       	breq	.+8      	; 0xed4 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x36>
        copyIp(dnsip, dns_ip);
     ecc:	b8 01       	movw	r22, r16
     ece:	89 ef       	ldi	r24, 0xF9	; 249
     ed0:	96 e0       	ldi	r25, 0x06	; 6
     ed2:	94 d3       	rcall	.+1832   	; 0x15fc <_ZN9EtherCard6copyIpEPhPKh>
    if(mask != 0)
     ed4:	20 97       	sbiw	r28, 0x00	; 0
     ed6:	21 f0       	breq	.+8      	; 0xee0 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x42>
        copyIp(netmask, mask);
     ed8:	be 01       	movw	r22, r28
     eda:	85 e0       	ldi	r24, 0x05	; 5
     edc:	97 e0       	ldi	r25, 0x07	; 7
    updateBroadcastAddress();
     ede:	8e d3       	rcall	.+1820   	; 0x15fc <_ZN9EtherCard6copyIpEPhPKh>
     ee0:	bb d1       	rcall	.+886    	; 0x1258 <_ZN9EtherCard22updateBroadcastAddressEv>
    delaycnt = 0; //request gateway ARP lookup
     ee2:	10 92 f4 06 	sts	0x06F4, r1	; 0x8006f4 <_ZN9EtherCard8delaycntE+0x1>
     ee6:	10 92 f3 06 	sts	0x06F3, r1	; 0x8006f3 <_ZN9EtherCard8delaycntE>
    return true;
}
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	df 91       	pop	r29
     eee:	cf 91       	pop	r28
     ef0:	1f 91       	pop	r17
     ef2:	0f 91       	pop	r16
     ef4:	ff 90       	pop	r15
     ef6:	ef 90       	pop	r14
     ef8:	08 95       	ret

00000efa <_ZL13fill_checksumhhjh>:
    for(uint8_t i=0; i<IP_LEN; i++)
        broadcastip[i] = myip[i] | ~netmask[i];
}

void EtherCard::registerPingCallback (void (*callback)(uint8_t *srcip)) {
    icmp_cb = callback;
     efa:	cf 92       	push	r12
     efc:	df 92       	push	r13
     efe:	ef 92       	push	r14
     f00:	ff 92       	push	r15
     f02:	cf 93       	push	r28
     f04:	df 93       	push	r29
     f06:	c6 2f       	mov	r28, r22
     f08:	d0 e0       	ldi	r29, 0x00	; 0
     f0a:	cd 50       	subi	r28, 0x0D	; 13
     f0c:	db 4f       	sbci	r29, 0xFB	; 251
     f0e:	21 30       	cpi	r18, 0x01	; 1
     f10:	81 f4       	brne	.+32     	; 0xf32 <_ZL13fill_checksumhhjh+0x38>
     f12:	6a 01       	movw	r12, r20
     f14:	99 e0       	ldi	r25, 0x09	; 9
     f16:	c9 0e       	add	r12, r25
     f18:	d1 1c       	adc	r13, r1
     f1a:	e1 2c       	mov	r14, r1
     f1c:	f1 2c       	mov	r15, r1
     f1e:	03 c0       	rjmp	.+6      	; 0xf26 <_ZL13fill_checksumhhjh+0x2c>
     f20:	c1 2c       	mov	r12, r1
     f22:	d1 2c       	mov	r13, r1
     f24:	76 01       	movw	r14, r12
     f26:	42 30       	cpi	r20, 0x02	; 2
     f28:	51 05       	cpc	r21, r1
     f2a:	28 f1       	brcs	.+74     	; 0xf76 <_ZL13fill_checksumhhjh+0x7c>
     f2c:	fe 01       	movw	r30, r28
     f2e:	da 01       	movw	r26, r20
     f30:	09 c0       	rjmp	.+18     	; 0xf44 <_ZL13fill_checksumhhjh+0x4a>
     f32:	22 30       	cpi	r18, 0x02	; 2
     f34:	a9 f7       	brne	.-22     	; 0xf20 <_ZL13fill_checksumhhjh+0x26>
     f36:	6a 01       	movw	r12, r20
     f38:	92 e0       	ldi	r25, 0x02	; 2
     f3a:	c9 1a       	sub	r12, r25
     f3c:	d1 08       	sbc	r13, r1
     f3e:	e1 2c       	mov	r14, r1
     f40:	f1 2c       	mov	r15, r1
     f42:	f1 cf       	rjmp	.-30     	; 0xf26 <_ZL13fill_checksumhhjh+0x2c>
     f44:	20 81       	ld	r18, Z
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	32 2f       	mov	r19, r18
     f4a:	22 27       	eor	r18, r18
     f4c:	91 81       	ldd	r25, Z+1	; 0x01
     f4e:	29 2b       	or	r18, r25
     f50:	c2 0e       	add	r12, r18
     f52:	d3 1e       	adc	r13, r19
     f54:	e1 1c       	adc	r14, r1
     f56:	f1 1c       	adc	r15, r1
     f58:	32 96       	adiw	r30, 0x02	; 2
     f5a:	12 97       	sbiw	r26, 0x02	; 2
     f5c:	a2 30       	cpi	r26, 0x02	; 2
     f5e:	b1 05       	cpc	r27, r1
     f60:	88 f7       	brcc	.-30     	; 0xf44 <_ZL13fill_checksumhhjh+0x4a>
     f62:	9a 01       	movw	r18, r20
     f64:	22 50       	subi	r18, 0x02	; 2
     f66:	31 09       	sbc	r19, r1
     f68:	2e 7f       	andi	r18, 0xFE	; 254
     f6a:	2e 5f       	subi	r18, 0xFE	; 254
     f6c:	3f 4f       	sbci	r19, 0xFF	; 255
     f6e:	c2 0f       	add	r28, r18
     f70:	d3 1f       	adc	r29, r19
     f72:	41 70       	andi	r20, 0x01	; 1
     f74:	55 27       	eor	r21, r21
     f76:	45 2b       	or	r20, r21
     f78:	61 f0       	breq	.+24     	; 0xf92 <_ZL13fill_checksumhhjh+0x98>
     f7a:	48 81       	ld	r20, Y
     f7c:	50 e0       	ldi	r21, 0x00	; 0
     f7e:	60 e0       	ldi	r22, 0x00	; 0
     f80:	70 e0       	ldi	r23, 0x00	; 0
     f82:	76 2f       	mov	r23, r22
     f84:	65 2f       	mov	r22, r21
     f86:	54 2f       	mov	r21, r20
     f88:	44 27       	eor	r20, r20
     f8a:	c4 0e       	add	r12, r20
     f8c:	d5 1e       	adc	r13, r21
     f8e:	e6 1e       	adc	r14, r22
     f90:	f7 1e       	adc	r15, r23
     f92:	a7 01       	movw	r20, r14
     f94:	66 27       	eor	r22, r22
     f96:	77 27       	eor	r23, r23
     f98:	41 15       	cp	r20, r1
     f9a:	51 05       	cpc	r21, r1
     f9c:	61 05       	cpc	r22, r1
     f9e:	71 05       	cpc	r23, r1
     fa0:	71 f0       	breq	.+28     	; 0xfbe <_ZL13fill_checksumhhjh+0xc4>
     fa2:	ee 24       	eor	r14, r14
     fa4:	ff 24       	eor	r15, r15
     fa6:	c4 0e       	add	r12, r20
     fa8:	d5 1e       	adc	r13, r21
     faa:	e6 1e       	adc	r14, r22
     fac:	f7 1e       	adc	r15, r23
     fae:	a7 01       	movw	r20, r14
     fb0:	66 27       	eor	r22, r22
     fb2:	77 27       	eor	r23, r23
     fb4:	41 15       	cp	r20, r1
     fb6:	51 05       	cpc	r21, r1
     fb8:	61 05       	cpc	r22, r1
     fba:	71 05       	cpc	r23, r1
     fbc:	91 f7       	brne	.-28     	; 0xfa2 <_ZL13fill_checksumhhjh+0xa8>
     fbe:	c0 94       	com	r12
     fc0:	d0 94       	com	r13
     fc2:	e8 2f       	mov	r30, r24
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	ed 50       	subi	r30, 0x0D	; 13
     fc8:	fb 4f       	sbci	r31, 0xFB	; 251
     fca:	d0 82       	st	Z, r13
     fcc:	c1 82       	std	Z+1, r12	; 0x01
     fce:	df 91       	pop	r29
     fd0:	cf 91       	pop	r28
     fd2:	ff 90       	pop	r15
     fd4:	ef 90       	pop	r14
     fd6:	df 90       	pop	r13
     fd8:	cf 90       	pop	r12
     fda:	08 95       	ret

00000fdc <_ZL6is_lanPKhS0_>:
     fdc:	cf 93       	push	r28
     fde:	df 93       	push	r29
     fe0:	fc 01       	movw	r30, r24
     fe2:	20 81       	ld	r18, Z
     fe4:	22 23       	and	r18, r18
     fe6:	d1 f0       	breq	.+52     	; 0x101c <_ZL6is_lanPKhS0_+0x40>
     fe8:	fb 01       	movw	r30, r22
     fea:	30 81       	ld	r19, Z
     fec:	33 23       	and	r19, r19
     fee:	c1 f0       	breq	.+48     	; 0x1020 <_ZL6is_lanPKhS0_+0x44>
     ff0:	23 27       	eor	r18, r19
     ff2:	30 91 05 07 	lds	r19, 0x0705	; 0x800705 <_ZN9EtherCard7netmaskE>
     ff6:	23 23       	and	r18, r19
     ff8:	a9 f4       	brne	.+42     	; 0x1024 <_ZL6is_lanPKhS0_+0x48>
     ffa:	dc 01       	movw	r26, r24
     ffc:	11 96       	adiw	r26, 0x01	; 1
     ffe:	31 96       	adiw	r30, 0x01	; 1
    1000:	c6 e0       	ldi	r28, 0x06	; 6
    1002:	d7 e0       	ldi	r29, 0x07	; 7
    1004:	04 96       	adiw	r24, 0x04	; 4
    1006:	4d 91       	ld	r20, X+
    1008:	21 91       	ld	r18, Z+
    100a:	39 91       	ld	r19, Y+
    100c:	24 27       	eor	r18, r20
    100e:	23 23       	and	r18, r19
    1010:	59 f4       	brne	.+22     	; 0x1028 <_ZL6is_lanPKhS0_+0x4c>
    1012:	a8 17       	cp	r26, r24
    1014:	b9 07       	cpc	r27, r25
    1016:	b9 f7       	brne	.-18     	; 0x1006 <_ZL6is_lanPKhS0_+0x2a>
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	07 c0       	rjmp	.+14     	; 0x102a <_ZL6is_lanPKhS0_+0x4e>
    101c:	80 e0       	ldi	r24, 0x00	; 0
    101e:	05 c0       	rjmp	.+10     	; 0x102a <_ZL6is_lanPKhS0_+0x4e>
    1020:	80 e0       	ldi	r24, 0x00	; 0
    1022:	03 c0       	rjmp	.+6      	; 0x102a <_ZL6is_lanPKhS0_+0x4e>
    1024:	80 e0       	ldi	r24, 0x00	; 0
    1026:	01 c0       	rjmp	.+2      	; 0x102a <_ZL6is_lanPKhS0_+0x4e>
    1028:	80 e0       	ldi	r24, 0x00	; 0
    102a:	df 91       	pop	r29
    102c:	cf 91       	pop	r28
    102e:	08 95       	ret

00001030 <_ZL20fill_ip_hdr_checksumv>:
    1030:	e3 ef       	ldi	r30, 0xF3	; 243
    1032:	f4 e0       	ldi	r31, 0x04	; 4
    1034:	10 8e       	std	Z+24, r1	; 0x18
    1036:	11 8e       	std	Z+25, r1	; 0x19
    1038:	80 e4       	ldi	r24, 0x40	; 64
    103a:	84 8b       	std	Z+20, r24	; 0x14
    103c:	15 8a       	std	Z+21, r1	; 0x15
    103e:	86 8b       	std	Z+22, r24	; 0x16
    1040:	20 e0       	ldi	r18, 0x00	; 0
    1042:	44 e1       	ldi	r20, 0x14	; 20
    1044:	50 e0       	ldi	r21, 0x00	; 0
    1046:	6e e0       	ldi	r22, 0x0E	; 14
    1048:	88 e1       	ldi	r24, 0x18	; 24
    104a:	57 cf       	rjmp	.-338    	; 0xefa <_ZL13fill_checksumhhjh>
    104c:	08 95       	ret

0000104e <_ZL7setMACsPKh>:
    104e:	bc 01       	movw	r22, r24
    1050:	83 ef       	ldi	r24, 0xF3	; 243
    1052:	94 e0       	ldi	r25, 0x04	; 4
    1054:	e0 d2       	rcall	.+1472   	; 0x1616 <_ZN9EtherCard7copyMacEPhPKh>
    1056:	6d e0       	ldi	r22, 0x0D	; 13
    1058:	77 e0       	ldi	r23, 0x07	; 7
    105a:	89 ef       	ldi	r24, 0xF9	; 249
    105c:	94 e0       	ldi	r25, 0x04	; 4
    105e:	db c2       	rjmp	.+1462   	; 0x1616 <_ZN9EtherCard7copyMacEPhPKh>
    1060:	08 95       	ret

00001062 <_ZL11make_eth_ipv>:
    1062:	89 ef       	ldi	r24, 0xF9	; 249
    1064:	94 e0       	ldi	r25, 0x04	; 4
    1066:	f3 df       	rcall	.-26     	; 0x104e <_ZL7setMACsPKh>
    1068:	6d e0       	ldi	r22, 0x0D	; 13
    106a:	75 e0       	ldi	r23, 0x05	; 5
    106c:	81 e1       	ldi	r24, 0x11	; 17
    106e:	95 e0       	ldi	r25, 0x05	; 5
    1070:	c5 d2       	rcall	.+1418   	; 0x15fc <_ZN9EtherCard6copyIpEPhPKh>
    1072:	69 e0       	ldi	r22, 0x09	; 9
    1074:	77 e0       	ldi	r23, 0x07	; 7
    1076:	8d e0       	ldi	r24, 0x0D	; 13
    1078:	95 e0       	ldi	r25, 0x05	; 5
    107a:	c0 d2       	rcall	.+1408   	; 0x15fc <_ZN9EtherCard6copyIpEPhPKh>
    107c:	d9 cf       	rjmp	.-78     	; 0x1030 <_ZL20fill_ip_hdr_checksumv>
    107e:	08 95       	ret

00001080 <_ZL12setMACandIPsPKhS0_>:
    1080:	cf 93       	push	r28
    1082:	df 93       	push	r29
    1084:	eb 01       	movw	r28, r22
    1086:	e3 df       	rcall	.-58     	; 0x104e <_ZL7setMACsPKh>
    1088:	be 01       	movw	r22, r28
    108a:	81 e1       	ldi	r24, 0x11	; 17
    108c:	95 e0       	ldi	r25, 0x05	; 5
    108e:	b6 d2       	rcall	.+1388   	; 0x15fc <_ZN9EtherCard6copyIpEPhPKh>
    1090:	69 e0       	ldi	r22, 0x09	; 9
    1092:	77 e0       	ldi	r23, 0x07	; 7
    1094:	8d e0       	ldi	r24, 0x0D	; 13
    1096:	95 e0       	ldi	r25, 0x05	; 5
    1098:	b1 d2       	rcall	.+1378   	; 0x15fc <_ZN9EtherCard6copyIpEPhPKh>
    109a:	df 91       	pop	r29
    109c:	cf 91       	pop	r28
    109e:	08 95       	ret

000010a0 <_ZL16client_store_macPhS_>:
    10a0:	cf 93       	push	r28
    10a2:	df 93       	push	r29
    10a4:	eb 01       	movw	r28, r22
    10a6:	44 e0       	ldi	r20, 0x04	; 4
    10a8:	50 e0       	ldi	r21, 0x00	; 0
    10aa:	bc 01       	movw	r22, r24
    10ac:	8f e0       	ldi	r24, 0x0F	; 15
    10ae:	95 e0       	ldi	r25, 0x05	; 5
    10b0:	0e 94 f3 29 	call	0x53e6	; 0x53e6 <memcmp>
    10b4:	89 2b       	or	r24, r25
    10b6:	31 f4       	brne	.+12     	; 0x10c4 <_ZL16client_store_macPhS_+0x24>
    10b8:	69 e0       	ldi	r22, 0x09	; 9
    10ba:	75 e0       	ldi	r23, 0x05	; 5
    10bc:	ce 01       	movw	r24, r28
    10be:	ab d2       	rcall	.+1366   	; 0x1616 <_ZN9EtherCard7copyMacEPhPKh>
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	01 c0       	rjmp	.+2      	; 0x10c6 <_ZL16client_store_macPhS_+0x26>
    10c4:	80 e0       	ldi	r24, 0x00	; 0
    10c6:	df 91       	pop	r29
    10c8:	cf 91       	pop	r28
    10ca:	08 95       	ret

000010cc <_ZL17client_arp_whohasPh>:
    10cc:	0f 93       	push	r16
    10ce:	1f 93       	push	r17
    10d0:	cf 93       	push	r28
    10d2:	8c 01       	movw	r16, r24
    10d4:	85 e2       	ldi	r24, 0x25	; 37
    10d6:	92 e0       	ldi	r25, 0x02	; 2
    10d8:	ba df       	rcall	.-140    	; 0x104e <_ZL7setMACsPKh>
    10da:	e3 ef       	ldi	r30, 0xF3	; 243
    10dc:	f4 e0       	ldi	r31, 0x04	; 4
    10de:	88 e0       	ldi	r24, 0x08	; 8
    10e0:	84 87       	std	Z+12, r24	; 0x0c
    10e2:	c6 e0       	ldi	r28, 0x06	; 6
    10e4:	c5 87       	std	Z+13, r28	; 0x0d
    10e6:	48 e0       	ldi	r20, 0x08	; 8
    10e8:	50 e0       	ldi	r21, 0x00	; 0
    10ea:	6f e7       	ldi	r22, 0x7F	; 127
    10ec:	72 e0       	ldi	r23, 0x02	; 2
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	95 e0       	ldi	r25, 0x05	; 5
    10f2:	0e 94 ea 29 	call	0x53d4	; 0x53d4 <memcpy_P>
    10f6:	e3 e1       	ldi	r30, 0x13	; 19
    10f8:	f5 e0       	ldi	r31, 0x05	; 5
    10fa:	df 01       	movw	r26, r30
    10fc:	1d 92       	st	X+, r1
    10fe:	ca 95       	dec	r28
    1100:	e9 f7       	brne	.-6      	; 0x10fc <_ZL17client_arp_whohasPh+0x30>
    1102:	6d e0       	ldi	r22, 0x0D	; 13
    1104:	77 e0       	ldi	r23, 0x07	; 7
    1106:	89 e0       	ldi	r24, 0x09	; 9
    1108:	95 e0       	ldi	r25, 0x05	; 5
    110a:	85 d2       	rcall	.+1290   	; 0x1616 <_ZN9EtherCard7copyMacEPhPKh>
    110c:	b8 01       	movw	r22, r16
    110e:	89 e1       	ldi	r24, 0x19	; 25
    1110:	95 e0       	ldi	r25, 0x05	; 5
    1112:	74 d2       	rcall	.+1256   	; 0x15fc <_ZN9EtherCard6copyIpEPhPKh>
    1114:	69 e0       	ldi	r22, 0x09	; 9
    1116:	77 e0       	ldi	r23, 0x07	; 7
    1118:	8f e0       	ldi	r24, 0x0F	; 15
    111a:	95 e0       	ldi	r25, 0x05	; 5
    111c:	6f d2       	rcall	.+1246   	; 0x15fc <_ZN9EtherCard6copyIpEPhPKh>
    111e:	8a e2       	ldi	r24, 0x2A	; 42
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	c6 dd       	rcall	.-1140   	; 0xcb0 <_ZN8ENC28J6010packetSendEj>
    1124:	cf 91       	pop	r28
    1126:	1f 91       	pop	r17
    1128:	0f 91       	pop	r16
    112a:	08 95       	ret

0000112c <_ZN9EtherCard10udpPrepareEjPKhj>:
    112c:	ef 92       	push	r14
    112e:	ff 92       	push	r15
    1130:	0f 93       	push	r16
    1132:	1f 93       	push	r17
    1134:	cf 93       	push	r28
    1136:	df 93       	push	r29
    1138:	18 2f       	mov	r17, r24
    113a:	09 2f       	mov	r16, r25
    113c:	eb 01       	movw	r28, r22
    113e:	f4 2e       	mov	r15, r20
    1140:	e5 2e       	mov	r14, r21
    1142:	89 e0       	ldi	r24, 0x09	; 9
    1144:	97 e0       	ldi	r25, 0x07	; 7
    1146:	4a df       	rcall	.-364    	; 0xfdc <_ZL6is_lanPKhS0_>
    1148:	88 23       	and	r24, r24
    114a:	29 f0       	breq	.+10     	; 0x1156 <_ZN9EtherCard10udpPrepareEjPKhj+0x2a>
    114c:	be 01       	movw	r22, r28
    114e:	8e e1       	ldi	r24, 0x1E	; 30
    1150:	97 e0       	ldi	r25, 0x07	; 7
    1152:	96 df       	rcall	.-212    	; 0x1080 <_ZL12setMACandIPsPKhS0_>
    1154:	04 c0       	rjmp	.+8      	; 0x115e <_ZN9EtherCard10udpPrepareEjPKhj+0x32>
    1156:	be 01       	movw	r22, r28
    1158:	84 e1       	ldi	r24, 0x14	; 20
    115a:	97 e0       	ldi	r25, 0x07	; 7
    115c:	91 df       	rcall	.-222    	; 0x1080 <_ZL12setMACandIPsPKhS0_>
    115e:	88 81       	ld	r24, Y
    1160:	80 7f       	andi	r24, 0xF0	; 240
    1162:	80 3e       	cpi	r24, 0xE0	; 224
    1164:	91 f0       	breq	.+36     	; 0x118a <_ZN9EtherCard10udpPrepareEjPKhj+0x5e>
    1166:	88 81       	ld	r24, Y
    1168:	99 81       	ldd	r25, Y+1	; 0x01
    116a:	aa 81       	ldd	r26, Y+2	; 0x02
    116c:	bb 81       	ldd	r27, Y+3	; 0x03
    116e:	8f 3f       	cpi	r24, 0xFF	; 255
    1170:	9f 4f       	sbci	r25, 0xFF	; 255
    1172:	af 4f       	sbci	r26, 0xFF	; 255
    1174:	bf 4f       	sbci	r27, 0xFF	; 255
    1176:	49 f0       	breq	.+18     	; 0x118a <_ZN9EtherCard10udpPrepareEjPKhj+0x5e>
    1178:	44 e0       	ldi	r20, 0x04	; 4
    117a:	50 e0       	ldi	r21, 0x00	; 0
    117c:	be 01       	movw	r22, r28
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	97 e0       	ldi	r25, 0x07	; 7
    1182:	0e 94 f3 29 	call	0x53e6	; 0x53e6 <memcmp>
    1186:	89 2b       	or	r24, r25
    1188:	29 f4       	brne	.+10     	; 0x1194 <_ZN9EtherCard10udpPrepareEjPKhj+0x68>
    118a:	65 e2       	ldi	r22, 0x25	; 37
    118c:	72 e0       	ldi	r23, 0x02	; 2
    118e:	83 ef       	ldi	r24, 0xF3	; 243
    1190:	94 e0       	ldi	r25, 0x04	; 4
    1192:	41 d2       	rcall	.+1154   	; 0x1616 <_ZN9EtherCard7copyMacEPhPKh>
    1194:	c3 ef       	ldi	r28, 0xF3	; 243
    1196:	d4 e0       	ldi	r29, 0x04	; 4
    1198:	88 e0       	ldi	r24, 0x08	; 8
    119a:	8c 87       	std	Y+12, r24	; 0x0c
    119c:	1d 86       	std	Y+13, r1	; 0x0d
    119e:	49 e0       	ldi	r20, 0x09	; 9
    11a0:	50 e0       	ldi	r21, 0x00	; 0
    11a2:	66 e7       	ldi	r22, 0x76	; 118
    11a4:	72 e0       	ldi	r23, 0x02	; 2
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	95 e0       	ldi	r25, 0x05	; 5
    11aa:	0e 94 ea 29 	call	0x53d4	; 0x53d4 <memcpy_P>
    11ae:	18 8a       	std	Y+16, r1	; 0x10
    11b0:	81 e1       	ldi	r24, 0x11	; 17
    11b2:	8f 8b       	std	Y+23, r24	; 0x17
    11b4:	ec a2       	std	Y+36, r14	; 0x24
    11b6:	fd a2       	std	Y+37, r15	; 0x25
    11b8:	0a a3       	std	Y+34, r16	; 0x22
    11ba:	1b a3       	std	Y+35, r17	; 0x23
    11bc:	1e a2       	std	Y+38, r1	; 0x26
    11be:	18 a6       	std	Y+40, r1	; 0x28
    11c0:	19 a6       	std	Y+41, r1	; 0x29
    11c2:	df 91       	pop	r29
    11c4:	cf 91       	pop	r28
    11c6:	1f 91       	pop	r17
    11c8:	0f 91       	pop	r16
    11ca:	ff 90       	pop	r15
    11cc:	ef 90       	pop	r14
    11ce:	08 95       	ret

000011d0 <_ZN9EtherCard11udpTransmitEj>:
    11d0:	0f 93       	push	r16
    11d2:	1f 93       	push	r17
    11d4:	cf 93       	push	r28
    11d6:	df 93       	push	r29
    11d8:	ec 01       	movw	r28, r24
    11da:	03 ef       	ldi	r16, 0xF3	; 243
    11dc:	14 e0       	ldi	r17, 0x04	; 4
    11de:	4c 96       	adiw	r24, 0x1c	; 28
    11e0:	f8 01       	movw	r30, r16
    11e2:	90 8b       	std	Z+16, r25	; 0x10
    11e4:	81 8b       	std	Z+17, r24	; 0x11
    11e6:	24 df       	rcall	.-440    	; 0x1030 <_ZL20fill_ip_hdr_checksumv>
    11e8:	ce 01       	movw	r24, r28
    11ea:	08 96       	adiw	r24, 0x08	; 8
    11ec:	f8 01       	movw	r30, r16
    11ee:	96 a3       	std	Z+38, r25	; 0x26
    11f0:	87 a3       	std	Z+39, r24	; 0x27
    11f2:	ae 01       	movw	r20, r28
    11f4:	40 5f       	subi	r20, 0xF0	; 240
    11f6:	5f 4f       	sbci	r21, 0xFF	; 255
    11f8:	21 e0       	ldi	r18, 0x01	; 1
    11fa:	6a e1       	ldi	r22, 0x1A	; 26
    11fc:	88 e2       	ldi	r24, 0x28	; 40
    11fe:	7d de       	rcall	.-774    	; 0xefa <_ZL13fill_checksumhhjh>
    1200:	ce 01       	movw	r24, r28
    1202:	8a 96       	adiw	r24, 0x2a	; 42
    1204:	55 dd       	rcall	.-1366   	; 0xcb0 <_ZN8ENC28J6010packetSendEj>
    1206:	df 91       	pop	r29
    1208:	cf 91       	pop	r28
    120a:	1f 91       	pop	r17
    120c:	0f 91       	pop	r16
    120e:	08 95       	ret

00001210 <_ZN9EtherCard7sendUdpEPKhjjS1_j>:
    1210:	0f 93       	push	r16
    1212:	1f 93       	push	r17
    1214:	cf 93       	push	r28
    1216:	df 93       	push	r29
    1218:	d6 2f       	mov	r29, r22
    121a:	c7 2f       	mov	r28, r23
    121c:	ca 01       	movw	r24, r20
    121e:	a8 01       	movw	r20, r16
    1220:	b9 01       	movw	r22, r18
    1222:	84 df       	rcall	.-248    	; 0x112c <_ZN9EtherCard10udpPrepareEjPKhj>
    1224:	8d 2f       	mov	r24, r29
    1226:	9c 2f       	mov	r25, r28
    1228:	81 30       	cpi	r24, 0x01	; 1
    122a:	22 e0       	ldi	r18, 0x02	; 2
    122c:	92 07       	cpc	r25, r18
    122e:	10 f0       	brcs	.+4      	; 0x1234 <_ZN9EtherCard7sendUdpEPKhjjS1_j+0x24>
    1230:	80 e0       	ldi	r24, 0x00	; 0
    1232:	92 e0       	ldi	r25, 0x02	; 2
    1234:	cd df       	rcall	.-102    	; 0x11d0 <_ZN9EtherCard11udpTransmitEj>
    1236:	df 91       	pop	r29
    1238:	cf 91       	pop	r28
    123a:	1f 91       	pop	r17
    123c:	0f 91       	pop	r16
    123e:	08 95       	ret

00001240 <_ZN9EtherCard7setGwIpEPKh>:
    1240:	10 92 f4 06 	sts	0x06F4, r1	; 0x8006f4 <_ZN9EtherCard8delaycntE+0x1>
    1244:	10 92 f3 06 	sts	0x06F3, r1	; 0x8006f3 <_ZN9EtherCard8delaycntE>
    1248:	21 e0       	ldi	r18, 0x01	; 1
    124a:	20 93 13 07 	sts	0x0713, r18	; 0x800713 <_ZL9waitgwmac>
    124e:	bc 01       	movw	r22, r24
    1250:	8d ef       	ldi	r24, 0xFD	; 253
    1252:	96 e0       	ldi	r25, 0x06	; 6
    1254:	d3 c1       	rjmp	.+934    	; 0x15fc <_ZN9EtherCard6copyIpEPhPKh>
    1256:	08 95       	ret

00001258 <_ZN9EtherCard22updateBroadcastAddressEv>:
    1258:	cf 93       	push	r28
    125a:	df 93       	push	r29
    125c:	e9 e0       	ldi	r30, 0x09	; 9
    125e:	f7 e0       	ldi	r31, 0x07	; 7
    1260:	c5 e0       	ldi	r28, 0x05	; 5
    1262:	d7 e0       	ldi	r29, 0x07	; 7
    1264:	a1 e0       	ldi	r26, 0x01	; 1
    1266:	b7 e0       	ldi	r27, 0x07	; 7
    1268:	2d e0       	ldi	r18, 0x0D	; 13
    126a:	37 e0       	ldi	r19, 0x07	; 7
    126c:	91 91       	ld	r25, Z+
    126e:	89 91       	ld	r24, Y+
    1270:	80 95       	com	r24
    1272:	89 2b       	or	r24, r25
    1274:	8d 93       	st	X+, r24
    1276:	e2 17       	cp	r30, r18
    1278:	f3 07       	cpc	r31, r19
    127a:	c1 f7       	brne	.-16     	; 0x126c <_ZN9EtherCard22updateBroadcastAddressEv+0x14>
    127c:	df 91       	pop	r29
    127e:	cf 91       	pop	r28
    1280:	08 95       	ret

00001282 <_ZN9EtherCard10packetLoopEj>:
	gPB[ICMP_CHECKSUM_P+1]++;
	gPB[ICMP_CHECKSUM_P] += 0x08;
	EtherCard::packetSend(len);
}

uint16_t EtherCard::packetLoop (uint16_t plen) {
    1282:	cf 93       	push	r28
    1284:	df 93       	push	r29
    1286:	ec 01       	movw	r28, r24
    if (plen==0) {
    1288:	00 97       	sbiw	r24, 0x00	; 0
    128a:	09 f0       	breq	.+2      	; 0x128e <_ZN9EtherCard10packetLoopEj+0xc>
    128c:	3f c0       	rjmp	.+126    	; 0x130c <_ZN9EtherCard10packetLoopEj+0x8a>
        //Check every 65536 (no-packet) cycles whether we need to retry ARP request for gateway
        if ((waitgwmac & WGW_INITIAL_ARP || waitgwmac & WGW_REFRESHING) &&
    128e:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <_ZL9waitgwmac>
    1292:	85 70       	andi	r24, 0x05	; 5
    1294:	89 f0       	breq	.+34     	; 0x12b8 <_ZN9EtherCard10packetLoopEj+0x36>
    1296:	80 91 f3 06 	lds	r24, 0x06F3	; 0x8006f3 <_ZN9EtherCard8delaycntE>
    129a:	90 91 f4 06 	lds	r25, 0x06F4	; 0x8006f4 <_ZN9EtherCard8delaycntE+0x1>
    129e:	89 2b       	or	r24, r25
    12a0:	59 f4       	brne	.+22     	; 0x12b8 <_ZN9EtherCard10packetLoopEj+0x36>
                delaycnt==0 && isLinkUp()) {
    12a2:	f3 dc       	rcall	.-1562   	; 0xc8a <_ZN8ENC28J608isLinkUpEv>
}

uint16_t EtherCard::packetLoop (uint16_t plen) {
    if (plen==0) {
        //Check every 65536 (no-packet) cycles whether we need to retry ARP request for gateway
        if ((waitgwmac & WGW_INITIAL_ARP || waitgwmac & WGW_REFRESHING) &&
    12a4:	88 23       	and	r24, r24
    12a6:	41 f0       	breq	.+16     	; 0x12b8 <_ZN9EtherCard10packetLoopEj+0x36>
                delaycnt==0 && isLinkUp()) {
            client_arp_whohas(gwip);
    12a8:	8d ef       	ldi	r24, 0xFD	; 253
    12aa:	96 e0       	ldi	r25, 0x06	; 6
    12ac:	0f df       	rcall	.-482    	; 0x10cc <_ZL17client_arp_whohasPh>
            waitgwmac |= WGW_ACCEPT_ARP_REPLY;
    12ae:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <_ZL9waitgwmac>
    12b2:	88 60       	ori	r24, 0x08	; 8
    12b4:	80 93 13 07 	sts	0x0713, r24	; 0x800713 <_ZL9waitgwmac>
        }
        delaycnt++;
    12b8:	80 91 f3 06 	lds	r24, 0x06F3	; 0x8006f3 <_ZN9EtherCard8delaycntE>
    12bc:	90 91 f4 06 	lds	r25, 0x06F4	; 0x8006f4 <_ZN9EtherCard8delaycntE+0x1>
    12c0:	01 96       	adiw	r24, 0x01	; 1
    12c2:	90 93 f4 06 	sts	0x06F4, r25	; 0x8006f4 <_ZN9EtherCard8delaycntE+0x1>
    12c6:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <_ZN9EtherCard8delaycntE>

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, dnsip) && !has_dns_mac && !waiting_for_dns_mac) {
    12ca:	69 ef       	ldi	r22, 0xF9	; 249
    12cc:	76 e0       	ldi	r23, 0x06	; 6
    12ce:	89 e0       	ldi	r24, 0x09	; 9
    12d0:	97 e0       	ldi	r25, 0x07	; 7
    12d2:	84 de       	rcall	.-760    	; 0xfdc <_ZL6is_lanPKhS0_>
    12d4:	88 23       	and	r24, r24
    12d6:	49 f0       	breq	.+18     	; 0x12ea <_ZN9EtherCard10packetLoopEj+0x68>
    12d8:	80 91 1c 07 	lds	r24, 0x071C	; 0x80071c <_ZL11has_dns_mac>
    12dc:	81 11       	cpse	r24, r1
    12de:	05 c0       	rjmp	.+10     	; 0x12ea <_ZN9EtherCard10packetLoopEj+0x68>
    12e0:	80 91 1d 07 	lds	r24, 0x071D	; 0x80071d <_ZL19waiting_for_dns_mac>
    12e4:	88 23       	and	r24, r24
    12e6:	09 f4       	brne	.+2      	; 0x12ea <_ZN9EtherCard10packetLoopEj+0x68>
    12e8:	dc c0       	rjmp	.+440    	; 0x14a2 <_ZN9EtherCard10packetLoopEj+0x220>
            client_arp_whohas(dnsip);
            waiting_for_dns_mac = true;
        }

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, hisip) && !has_dest_mac && !waiting_for_dest_mac) {
    12ea:	65 ef       	ldi	r22, 0xF5	; 245
    12ec:	76 e0       	ldi	r23, 0x06	; 6
    12ee:	89 e0       	ldi	r24, 0x09	; 9
    12f0:	97 e0       	ldi	r25, 0x07	; 7
    12f2:	74 de       	rcall	.-792    	; 0xfdc <_ZL6is_lanPKhS0_>
    12f4:	88 23       	and	r24, r24
    12f6:	09 f4       	brne	.+2      	; 0x12fa <_ZN9EtherCard10packetLoopEj+0x78>
    12f8:	f8 c0       	rjmp	.+496    	; 0x14ea <_ZN9EtherCard10packetLoopEj+0x268>
    12fa:	80 91 1a 07 	lds	r24, 0x071A	; 0x80071a <_ZL12has_dest_mac>
    12fe:	81 11       	cpse	r24, r1
    1300:	f4 c0       	rjmp	.+488    	; 0x14ea <_ZN9EtherCard10packetLoopEj+0x268>
    1302:	80 91 1b 07 	lds	r24, 0x071B	; 0x80071b <_ZL20waiting_for_dest_mac>
    1306:	81 11       	cpse	r24, r1
    1308:	f0 c0       	rjmp	.+480    	; 0x14ea <_ZN9EtherCard10packetLoopEj+0x268>
    130a:	d2 c0       	rjmp	.+420    	; 0x14b0 <_ZN9EtherCard10packetLoopEj+0x22e>
    return true;
}

static uint8_t eth_type_is_arp_and_my_ip(uint16_t len) {
    return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
    130c:	89 32       	cpi	r24, 0x29	; 41
    130e:	91 05       	cpc	r25, r1
    1310:	08 f4       	brcc	.+2      	; 0x1314 <_ZN9EtherCard10packetLoopEj+0x92>
    1312:	d5 c0       	rjmp	.+426    	; 0x14be <_ZN9EtherCard10packetLoopEj+0x23c>
        }
    return true;
}

static uint8_t eth_type_is_arp_and_my_ip(uint16_t len) {
    return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
    1314:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <_ZN8ENC28J606bufferE+0xc>
    1318:	88 30       	cpi	r24, 0x08	; 8
    131a:	09 f0       	breq	.+2      	; 0x131e <_ZN9EtherCard10packetLoopEj+0x9c>
    131c:	e6 c0       	rjmp	.+460    	; 0x14ea <_ZN9EtherCard10packetLoopEj+0x268>
    131e:	80 91 00 05 	lds	r24, 0x0500	; 0x800500 <_ZN8ENC28J606bufferE+0xd>
    1322:	86 30       	cpi	r24, 0x06	; 6
    1324:	09 f0       	breq	.+2      	; 0x1328 <_ZN9EtherCard10packetLoopEj+0xa6>
    1326:	dd c0       	rjmp	.+442    	; 0x14e2 <_ZN9EtherCard10packetLoopEj+0x260>
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
           memcmp(gPB + ETH_ARP_DST_IP_P, EtherCard::myip, IP_LEN) == 0;
    1328:	44 e0       	ldi	r20, 0x04	; 4
    132a:	50 e0       	ldi	r21, 0x00	; 0
    132c:	69 e0       	ldi	r22, 0x09	; 9
    132e:	77 e0       	ldi	r23, 0x07	; 7
    1330:	89 e1       	ldi	r24, 0x19	; 25
    1332:	95 e0       	ldi	r25, 0x05	; 5
    1334:	0e 94 f3 29 	call	0x53e6	; 0x53e6 <memcmp>
    return true;
}

static uint8_t eth_type_is_arp_and_my_ip(uint16_t len) {
    return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
    1338:	89 2b       	or	r24, r25
    133a:	09 f0       	breq	.+2      	; 0x133e <_ZN9EtherCard10packetLoopEj+0xbc>
    133c:	d2 c0       	rjmp	.+420    	; 0x14e2 <_ZN9EtherCard10packetLoopEj+0x260>
    EtherCard::copyIp(gPB + IP_SRC_P, EtherCard::myip);
    fill_ip_hdr_checksum();
}

static void make_arp_answer_from_request() {
    setMACs(gPB + ETH_SRC_MAC);
    133e:	c3 c0       	rjmp	.+390    	; 0x14c6 <_ZN9EtherCard10packetLoopEj+0x244>
    1340:	89 ef       	ldi	r24, 0xF9	; 249
    1342:	94 e0       	ldi	r25, 0x04	; 4
    1344:	84 de       	rcall	.-760    	; 0x104e <_ZL7setMACsPKh>
    gPB[ETH_ARP_OPCODE_H_P] = ETH_ARP_OPCODE_REPLY_H_V;
    1346:	e3 ef       	ldi	r30, 0xF3	; 243
    1348:	f4 e0       	ldi	r31, 0x04	; 4
    134a:	14 8a       	std	Z+20, r1	; 0x14
    gPB[ETH_ARP_OPCODE_L_P] = ETH_ARP_OPCODE_REPLY_L_V;
    134c:	82 e0       	ldi	r24, 0x02	; 2
    EtherCard::copyMac(gPB + ETH_ARP_DST_MAC_P, gPB + ETH_ARP_SRC_MAC_P);
    134e:	85 8b       	std	Z+21, r24	; 0x15
    1350:	69 e0       	ldi	r22, 0x09	; 9
    1352:	75 e0       	ldi	r23, 0x05	; 5
    1354:	83 e1       	ldi	r24, 0x13	; 19
    1356:	95 e0       	ldi	r25, 0x05	; 5
    EtherCard::copyMac(gPB + ETH_ARP_SRC_MAC_P, EtherCard::mymac);
    1358:	5e d1       	rcall	.+700    	; 0x1616 <_ZN9EtherCard7copyMacEPhPKh>
    135a:	6d e0       	ldi	r22, 0x0D	; 13
    135c:	77 e0       	ldi	r23, 0x07	; 7
    135e:	89 e0       	ldi	r24, 0x09	; 9
    1360:	95 e0       	ldi	r25, 0x05	; 5
    EtherCard::copyIp(gPB + ETH_ARP_DST_IP_P, gPB + ETH_ARP_SRC_IP_P);
    1362:	59 d1       	rcall	.+690    	; 0x1616 <_ZN9EtherCard7copyMacEPhPKh>
    1364:	6f e0       	ldi	r22, 0x0F	; 15
    1366:	75 e0       	ldi	r23, 0x05	; 5
    1368:	89 e1       	ldi	r24, 0x19	; 25
    136a:	95 e0       	ldi	r25, 0x05	; 5
    EtherCard::copyIp(gPB + ETH_ARP_SRC_IP_P, EtherCard::myip);
    136c:	47 d1       	rcall	.+654    	; 0x15fc <_ZN9EtherCard6copyIpEPhPKh>
    136e:	69 e0       	ldi	r22, 0x09	; 9
    1370:	77 e0       	ldi	r23, 0x07	; 7
    1372:	8f e0       	ldi	r24, 0x0F	; 15
    1374:	95 e0       	ldi	r25, 0x05	; 5
    1376:	42 d1       	rcall	.+644    	; 0x15fc <_ZN9EtherCard6copyIpEPhPKh>
    EtherCard::packetSend(42);
    1378:	8a e2       	ldi	r24, 0x2A	; 42
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	99 dc       	rcall	.-1742   	; 0xcb0 <_ZN8ENC28J6010packetSendEj>
    137e:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <_ZL9waitgwmac>

    if (eth_type_is_arp_and_my_ip(plen))
    {   //Service ARP request
        if (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REQ_L_V)
            make_arp_answer_from_request();
        if (waitgwmac & WGW_ACCEPT_ARP_REPLY && (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REPLY_L_V) && client_store_mac(gwip, gwmacaddr))
    1382:	83 ff       	sbrs	r24, 3
    1384:	0e c0       	rjmp	.+28     	; 0x13a2 <_ZN9EtherCard10packetLoopEj+0x120>
    1386:	80 91 08 05 	lds	r24, 0x0508	; 0x800508 <_ZN8ENC28J606bufferE+0x15>
    138a:	82 30       	cpi	r24, 0x02	; 2
    138c:	51 f4       	brne	.+20     	; 0x13a2 <_ZN9EtherCard10packetLoopEj+0x120>
    138e:	64 e1       	ldi	r22, 0x14	; 20
    1390:	77 e0       	ldi	r23, 0x07	; 7
    1392:	8d ef       	ldi	r24, 0xFD	; 253
    1394:	96 e0       	ldi	r25, 0x06	; 6
    1396:	84 de       	rcall	.-760    	; 0x10a0 <_ZL16client_store_macPhS_>
    1398:	88 23       	and	r24, r24
    139a:	19 f0       	breq	.+6      	; 0x13a2 <_ZN9EtherCard10packetLoopEj+0x120>
    139c:	82 e0       	ldi	r24, 0x02	; 2
            waitgwmac = WGW_HAVE_GW_MAC;
    139e:	80 93 13 07 	sts	0x0713, r24	; 0x800713 <_ZL9waitgwmac>
    13a2:	80 91 1c 07 	lds	r24, 0x071C	; 0x80071c <_ZL11has_dns_mac>
        if (!has_dns_mac && waiting_for_dns_mac && client_store_mac(dnsip, destmacaddr)) {
    13a6:	81 11       	cpse	r24, r1
    13a8:	10 c0       	rjmp	.+32     	; 0x13ca <_ZN9EtherCard10packetLoopEj+0x148>
    13aa:	80 91 1d 07 	lds	r24, 0x071D	; 0x80071d <_ZL19waiting_for_dns_mac>
    13ae:	88 23       	and	r24, r24
    13b0:	61 f0       	breq	.+24     	; 0x13ca <_ZN9EtherCard10packetLoopEj+0x148>
    13b2:	6e e1       	ldi	r22, 0x1E	; 30
    13b4:	77 e0       	ldi	r23, 0x07	; 7
    13b6:	89 ef       	ldi	r24, 0xF9	; 249
    13b8:	96 e0       	ldi	r25, 0x06	; 6
    13ba:	72 de       	rcall	.-796    	; 0x10a0 <_ZL16client_store_macPhS_>
    13bc:	88 23       	and	r24, r24
    13be:	29 f0       	breq	.+10     	; 0x13ca <_ZN9EtherCard10packetLoopEj+0x148>
    13c0:	81 e0       	ldi	r24, 0x01	; 1
            has_dns_mac = true;
    13c2:	80 93 1c 07 	sts	0x071C, r24	; 0x80071c <_ZL11has_dns_mac>
    13c6:	10 92 1d 07 	sts	0x071D, r1	; 0x80071d <_ZL19waiting_for_dns_mac>
            waiting_for_dns_mac = false;
    13ca:	80 91 1a 07 	lds	r24, 0x071A	; 0x80071a <_ZL12has_dest_mac>
        }
        if (!has_dest_mac && waiting_for_dest_mac && client_store_mac(hisip, destmacaddr)) {
    13ce:	81 11       	cpse	r24, r1
    13d0:	8c c0       	rjmp	.+280    	; 0x14ea <_ZN9EtherCard10packetLoopEj+0x268>
    13d2:	80 91 1b 07 	lds	r24, 0x071B	; 0x80071b <_ZL20waiting_for_dest_mac>
    13d6:	88 23       	and	r24, r24
    13d8:	09 f4       	brne	.+2      	; 0x13dc <_ZN9EtherCard10packetLoopEj+0x15a>
    13da:	87 c0       	rjmp	.+270    	; 0x14ea <_ZN9EtherCard10packetLoopEj+0x268>
    13dc:	6e e1       	ldi	r22, 0x1E	; 30
    13de:	77 e0       	ldi	r23, 0x07	; 7
    13e0:	85 ef       	ldi	r24, 0xF5	; 245
    13e2:	96 e0       	ldi	r25, 0x06	; 6
    13e4:	5d de       	rcall	.-838    	; 0x10a0 <_ZL16client_store_macPhS_>
    13e6:	88 23       	and	r24, r24
    13e8:	09 f4       	brne	.+2      	; 0x13ec <_ZN9EtherCard10packetLoopEj+0x16a>
    13ea:	7f c0       	rjmp	.+254    	; 0x14ea <_ZN9EtherCard10packetLoopEj+0x268>
    13ec:	81 e0       	ldi	r24, 0x01	; 1
            has_dest_mac = true;
    13ee:	80 93 1a 07 	sts	0x071A, r24	; 0x80071a <_ZL12has_dest_mac>
    13f2:	10 92 1b 07 	sts	0x071B, r1	; 0x80071b <_ZL20waiting_for_dest_mac>
            waiting_for_dest_mac = false;
    13f6:	79 c0       	rjmp	.+242    	; 0x14ea <_ZN9EtherCard10packetLoopEj+0x268>
    13f8:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <_ZN8ENC28J606bufferE+0xc>
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
           memcmp(gPB + ETH_ARP_DST_IP_P, EtherCard::myip, IP_LEN) == 0;
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
    13fc:	88 30       	cpi	r24, 0x08	; 8
    13fe:	09 f0       	breq	.+2      	; 0x1402 <_ZN9EtherCard10packetLoopEj+0x180>
    1400:	74 c0       	rjmp	.+232    	; 0x14ea <_ZN9EtherCard10packetLoopEj+0x268>
    1402:	80 91 00 05 	lds	r24, 0x0500	; 0x800500 <_ZN8ENC28J606bufferE+0xd>
    1406:	81 11       	cpse	r24, r1
    1408:	70 c0       	rjmp	.+224    	; 0x14ea <_ZN9EtherCard10packetLoopEj+0x268>
    140a:	80 91 01 05 	lds	r24, 0x0501	; 0x800501 <_ZN8ENC28J606bufferE+0xe>
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
    140e:	85 34       	cpi	r24, 0x45	; 69
    1410:	09 f0       	breq	.+2      	; 0x1414 <_ZN9EtherCard10packetLoopEj+0x192>
    1412:	6b c0       	rjmp	.+214    	; 0x14ea <_ZN9EtherCard10packetLoopEj+0x268>
    1414:	44 e0       	ldi	r20, 0x04	; 4
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
           (memcmp(gPB + IP_DST_P, EtherCard::myip, IP_LEN) == 0  //not my IP
    1416:	50 e0       	ldi	r21, 0x00	; 0
    1418:	69 e0       	ldi	r22, 0x09	; 9
    141a:	77 e0       	ldi	r23, 0x07	; 7
    141c:	81 e1       	ldi	r24, 0x11	; 17
    141e:	95 e0       	ldi	r25, 0x05	; 5
    1420:	0e 94 f3 29 	call	0x53e6	; 0x53e6 <memcmp>
    1424:	89 2b       	or	r24, r25
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
    1426:	09 f4       	brne	.+2      	; 0x142a <_ZN9EtherCard10packetLoopEj+0x1a8>
    1428:	54 c0       	rjmp	.+168    	; 0x14d2 <_ZN9EtherCard10packetLoopEj+0x250>
    142a:	44 e0       	ldi	r20, 0x04	; 4
           (memcmp(gPB + IP_DST_P, EtherCard::myip, IP_LEN) == 0  //not my IP
            || (memcmp(gPB + IP_DST_P, EtherCard::broadcastip, IP_LEN) == 0) //not subnet broadcast
    142c:	50 e0       	ldi	r21, 0x00	; 0
    142e:	61 e0       	ldi	r22, 0x01	; 1
    1430:	77 e0       	ldi	r23, 0x07	; 7
    1432:	81 e1       	ldi	r24, 0x11	; 17
    1434:	95 e0       	ldi	r25, 0x05	; 5
    1436:	0e 94 f3 29 	call	0x53e6	; 0x53e6 <memcmp>
    143a:	89 2b       	or	r24, r25
    143c:	09 f4       	brne	.+2      	; 0x1440 <_ZN9EtherCard10packetLoopEj+0x1be>
    143e:	49 c0       	rjmp	.+146    	; 0x14d2 <_ZN9EtherCard10packetLoopEj+0x250>
    1440:	44 e0       	ldi	r20, 0x04	; 4
            || (memcmp(gPB + IP_DST_P, allOnes, IP_LEN) == 0)); //not global broadcasts
    1442:	50 e0       	ldi	r21, 0x00	; 0
    1444:	65 e2       	ldi	r22, 0x25	; 37
    1446:	72 e0       	ldi	r23, 0x02	; 2
    1448:	81 e1       	ldi	r24, 0x11	; 17
    144a:	95 e0       	ldi	r25, 0x05	; 5
    144c:	0e 94 f3 29 	call	0x53e6	; 0x53e6 <memcmp>
    1450:	89 2b       	or	r24, r25
    1452:	09 f0       	breq	.+2      	; 0x1456 <_ZN9EtherCard10packetLoopEj+0x1d4>
    1454:	4a c0       	rjmp	.+148    	; 0x14ea <_ZN9EtherCard10packetLoopEj+0x268>
    1456:	3d c0       	rjmp	.+122    	; 0x14d2 <_ZN9EtherCard10packetLoopEj+0x250>
    1458:	80 91 15 05 	lds	r24, 0x0515	; 0x800515 <_ZN8ENC28J606bufferE+0x22>
        //!@todo Add other protocols (and make each optional at compile time)
        return 0;
    }
	
	//To handle pinging
	if (gPB[IP_PROTO_P]==IP_PROTO_ICMP_V && gPB[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V)
    145c:	88 30       	cpi	r24, 0x08	; 8
    145e:	c9 f4       	brne	.+50     	; 0x1492 <_ZN9EtherCard10packetLoopEj+0x210>
	{   //Service ICMP echo request (ping)
		if (icmp_cb)
    1460:	e0 91 24 07 	lds	r30, 0x0724	; 0x800724 <_ZL7icmp_cb>
    1464:	f0 91 25 07 	lds	r31, 0x0725	; 0x800725 <_ZL7icmp_cb+0x1>
    1468:	30 97       	sbiw	r30, 0x00	; 0
    146a:	19 f0       	breq	.+6      	; 0x1472 <_ZN9EtherCard10packetLoopEj+0x1f0>
		(*icmp_cb)(&(gPB[IP_SRC_P]));
    146c:	8d e0       	ldi	r24, 0x0D	; 13
    146e:	95 e0       	ldi	r25, 0x05	; 5
    1470:	19 95       	eicall
void EtherCard::registerPingCallback (void (*callback)(uint8_t *srcip)) {
    icmp_cb = callback;
}

static void make_echo_reply_from_request(uint16_t len) {
	make_eth_ip();
    1472:	f7 dd       	rcall	.-1042   	; 0x1062 <_ZL11make_eth_ipv>
	gPB[ICMP_TYPE_P] = ICMP_TYPE_ECHOREPLY_V;
    1474:	e3 ef       	ldi	r30, 0xF3	; 243
    1476:	f4 e0       	ldi	r31, 0x04	; 4
	if (gPB[ICMP_CHECKSUM_P] > (0xFF-0x08))
    1478:	12 a2       	std	Z+34, r1	; 0x22
    147a:	84 a1       	ldd	r24, Z+36	; 0x24
    147c:	88 3f       	cpi	r24, 0xF8	; 248
	gPB[ICMP_CHECKSUM_P+1]++;
    147e:	18 f0       	brcs	.+6      	; 0x1486 <_ZN9EtherCard10packetLoopEj+0x204>
    1480:	95 a1       	ldd	r25, Z+37	; 0x25
    1482:	9f 5f       	subi	r25, 0xFF	; 255
	gPB[ICMP_CHECKSUM_P] += 0x08;
    1484:	95 a3       	std	Z+37, r25	; 0x25
    1486:	88 5f       	subi	r24, 0xF8	; 248
	EtherCard::packetSend(len);
    1488:	80 93 17 05 	sts	0x0517, r24	; 0x800517 <_ZN8ENC28J606bufferE+0x24>
    148c:	ce 01       	movw	r24, r28
    148e:	10 dc       	rcall	.-2016   	; 0xcb0 <_ZN8ENC28J6010packetSendEj>
		make_echo_reply_from_request(plen);
		return 0;
	}

#if ETHERCARD_UDPSERVER
    if (ether.udpServerListening() && gPB[IP_PROTO_P]==IP_PROTO_UDP_V)
    1490:	2c c0       	rjmp	.+88     	; 0x14ea <_ZN9EtherCard10packetLoopEj+0x268>
    1492:	4a d0       	rcall	.+148    	; 0x1528 <_ZN9EtherCard18udpServerListeningEv>
    1494:	88 23       	and	r24, r24
    1496:	49 f1       	breq	.+82     	; 0x14ea <_ZN9EtherCard10packetLoopEj+0x268>
    1498:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <_ZN8ENC28J606bufferE+0x17>
    149c:	81 31       	cpi	r24, 0x11	; 17
    149e:	29 f5       	brne	.+74     	; 0x14ea <_ZN9EtherCard10packetLoopEj+0x268>
        }
        delaycnt++;

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, dnsip) && !has_dns_mac && !waiting_for_dns_mac) {
            client_arp_whohas(dnsip);
    14a0:	1d c0       	rjmp	.+58     	; 0x14dc <_ZN9EtherCard10packetLoopEj+0x25a>
    14a2:	89 ef       	ldi	r24, 0xF9	; 249
    14a4:	96 e0       	ldi	r25, 0x06	; 6
    14a6:	12 de       	rcall	.-988    	; 0x10cc <_ZL17client_arp_whohasPh>
            waiting_for_dns_mac = true;
    14a8:	81 e0       	ldi	r24, 0x01	; 1
    14aa:	80 93 1d 07 	sts	0x071D, r24	; 0x80071d <_ZL19waiting_for_dns_mac>
    14ae:	1d cf       	rjmp	.-454    	; 0x12ea <_ZN9EtherCard10packetLoopEj+0x68>
        }

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, hisip) && !has_dest_mac && !waiting_for_dest_mac) {
            client_arp_whohas(hisip);
    14b0:	85 ef       	ldi	r24, 0xF5	; 245
    14b2:	96 e0       	ldi	r25, 0x06	; 6
    14b4:	0b de       	rcall	.-1002   	; 0x10cc <_ZL17client_arp_whohasPh>
    14b6:	81 e0       	ldi	r24, 0x01	; 1
            waiting_for_dest_mac = true;
    14b8:	80 93 1b 07 	sts	0x071B, r24	; 0x80071b <_ZL20waiting_for_dest_mac>
    14bc:	16 c0       	rjmp	.+44     	; 0x14ea <_ZN9EtherCard10packetLoopEj+0x268>
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
    14be:	8a 97       	sbiw	r24, 0x2a	; 42
    14c0:	08 f0       	brcs	.+2      	; 0x14c4 <_ZN9EtherCard10packetLoopEj+0x242>
    14c2:	9a cf       	rjmp	.-204    	; 0x13f8 <_ZN9EtherCard10packetLoopEj+0x176>
    14c4:	12 c0       	rjmp	.+36     	; 0x14ea <_ZN9EtherCard10packetLoopEj+0x268>
        return 0;
    }

    if (eth_type_is_arp_and_my_ip(plen))
    {   //Service ARP request
        if (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REQ_L_V)
    14c6:	80 91 08 05 	lds	r24, 0x0508	; 0x800508 <_ZN8ENC28J606bufferE+0x15>
    14ca:	81 30       	cpi	r24, 0x01	; 1
    14cc:	09 f0       	breq	.+2      	; 0x14d0 <_ZN9EtherCard10packetLoopEj+0x24e>
    14ce:	57 cf       	rjmp	.-338    	; 0x137e <_ZN9EtherCard10packetLoopEj+0xfc>
    14d0:	37 cf       	rjmp	.-402    	; 0x1340 <_ZN9EtherCard10packetLoopEj+0xbe>
        //!@todo Add other protocols (and make each optional at compile time)
        return 0;
    }
	
	//To handle pinging
	if (gPB[IP_PROTO_P]==IP_PROTO_ICMP_V && gPB[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V)
    14d2:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <_ZN8ENC28J606bufferE+0x17>
    14d6:	81 30       	cpi	r24, 0x01	; 1
    14d8:	e1 f6       	brne	.-72     	; 0x1492 <_ZN9EtherCard10packetLoopEj+0x210>
    14da:	be cf       	rjmp	.-132    	; 0x1458 <_ZN9EtherCard10packetLoopEj+0x1d6>
	}

#if ETHERCARD_UDPSERVER
    if (ether.udpServerListening() && gPB[IP_PROTO_P]==IP_PROTO_UDP_V)
    {   //Call UDP server handler (callback) if one is defined for this packet
        if(ether.udpServerHasProcessedPacket(plen))
    14dc:	ce 01       	movw	r24, r28
    14de:	2b d0       	rcall	.+86     	; 0x1536 <_ZN9EtherCard27udpServerHasProcessedPacketEj>
    14e0:	04 c0       	rjmp	.+8      	; 0x14ea <_ZN9EtherCard10packetLoopEj+0x268>
    14e2:	ca 32       	cpi	r28, 0x2A	; 42
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
    14e4:	d1 05       	cpc	r29, r1
    14e6:	08 f0       	brcs	.+2      	; 0x14ea <_ZN9EtherCard10packetLoopEj+0x268>
    14e8:	8c cf       	rjmp	.-232    	; 0x1402 <_ZN9EtherCard10packetLoopEj+0x180>
    14ea:	80 e0       	ldi	r24, 0x00	; 0

    if (plen<54 || gPB[IP_PROTO_P]!=IP_PROTO_TCP_V )
        return 0; //from here on we are only interested in TCP-packets; these are longer than 54 bytes
		
	return 0;
}
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	df 91       	pop	r29
    14f0:	cf 91       	pop	r28
    14f2:	08 95       	ret

000014f4 <_ZN9EtherCard21udpServerListenOnPortEPFvjPhjPKcjEj>:
    14f4:	9c 01       	movw	r18, r24
    {
        if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((uint8_t) listeners[i].port)) {
            listeners[i].listening = true;
        }
    }
}
    14f6:	90 91 26 07 	lds	r25, 0x0726	; 0x800726 <numListeners>
    14fa:	98 30       	cpi	r25, 0x08	; 8
    14fc:	a0 f4       	brcc	.+40     	; 0x1526 <_ZN9EtherCard21udpServerListenOnPortEPFvjPhjPKcjEj+0x32>
    14fe:	e9 2f       	mov	r30, r25
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	af 01       	movw	r20, r30
    1504:	44 0f       	add	r20, r20
    1506:	55 1f       	adc	r21, r21
    1508:	44 0f       	add	r20, r20
    150a:	55 1f       	adc	r21, r21
    150c:	e4 0f       	add	r30, r20
    150e:	f5 1f       	adc	r31, r21
    1510:	e9 5d       	subi	r30, 0xD9	; 217
    1512:	f8 4f       	sbci	r31, 0xF8	; 248
    1514:	31 83       	std	Z+1, r19	; 0x01
    1516:	20 83       	st	Z, r18
    1518:	73 83       	std	Z+3, r23	; 0x03
    151a:	62 83       	std	Z+2, r22	; 0x02
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	84 83       	std	Z+4, r24	; 0x04
    1520:	9f 5f       	subi	r25, 0xFF	; 255
    1522:	90 93 26 07 	sts	0x0726, r25	; 0x800726 <numListeners>
    1526:	08 95       	ret

00001528 <_ZN9EtherCard18udpServerListeningEv>:

bool EtherCard::udpServerListening() {
    return numListeners > 0;
    1528:	81 e0       	ldi	r24, 0x01	; 1
    152a:	90 91 26 07 	lds	r25, 0x0726	; 0x800726 <numListeners>
    152e:	91 11       	cpse	r25, r1
    1530:	01 c0       	rjmp	.+2      	; 0x1534 <_ZN9EtherCard18udpServerListeningEv+0xc>
    1532:	80 e0       	ldi	r24, 0x00	; 0
}
    1534:	08 95       	ret

00001536 <_ZN9EtherCard27udpServerHasProcessedPacketEj>:

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    1536:	8f 92       	push	r8
    1538:	9f 92       	push	r9
    153a:	bf 92       	push	r11
    153c:	cf 92       	push	r12
    153e:	df 92       	push	r13
    1540:	ef 92       	push	r14
    1542:	ff 92       	push	r15
    1544:	0f 93       	push	r16
    1546:	1f 93       	push	r17
    1548:	cf 93       	push	r28
    154a:	df 93       	push	r29
    bool packetProcessed = false;
    for(int i = 0; i < numListeners; i++)
    154c:	80 91 26 07 	lds	r24, 0x0726	; 0x800726 <numListeners>
    1550:	88 23       	and	r24, r24
    1552:	09 f4       	brne	.+2      	; 0x1556 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x20>
    1554:	46 c0       	rjmp	.+140    	; 0x15e2 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0xac>
    1556:	c7 e2       	ldi	r28, 0x27	; 39
    1558:	d7 e0       	ldi	r29, 0x07	; 7
    155a:	e1 2c       	mov	r14, r1
    155c:	f1 2c       	mov	r15, r1
    155e:	80 e0       	ldi	r24, 0x00	; 0
    {
        if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((uint8_t) listeners[i].port) && listeners[i].listening)
    1560:	0f 2e       	mov	r0, r31
    1562:	f3 ef       	ldi	r31, 0xF3	; 243
    1564:	cf 2e       	mov	r12, r31
    1566:	f4 e0       	ldi	r31, 0x04	; 4
    1568:	df 2e       	mov	r13, r31
    156a:	f0 2d       	mov	r31, r0
                listeners[i].port,
                gPB + IP_SRC_P,
                (gPB[UDP_SRC_PORT_H_P] << 8) | gPB[UDP_SRC_PORT_L_P],
                (const char *) (gPB + UDP_DATA_P),
                datalen);
            packetProcessed = true;
    156c:	bb 24       	eor	r11, r11
    156e:	b3 94       	inc	r11

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    bool packetProcessed = false;
    for(int i = 0; i < numListeners; i++)
    {
        if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((uint8_t) listeners[i].port) && listeners[i].listening)
    1570:	aa 81       	ldd	r26, Y+2	; 0x02
    1572:	bb 81       	ldd	r27, Y+3	; 0x03
    1574:	f6 01       	movw	r30, r12
    1576:	24 a1       	ldd	r18, Z+36	; 0x24
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	4b 2f       	mov	r20, r27
    157c:	55 27       	eor	r21, r21
    157e:	24 17       	cp	r18, r20
    1580:	35 07       	cpc	r19, r21
    1582:	21 f5       	brne	.+72     	; 0x15cc <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x96>
    1584:	25 a1       	ldd	r18, Z+37	; 0x25
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	ad 01       	movw	r20, r26
    158a:	55 27       	eor	r21, r21
    158c:	24 17       	cp	r18, r20
    158e:	35 07       	cpc	r19, r21
    1590:	e9 f4       	brne	.+58     	; 0x15cc <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x96>
    1592:	9c 81       	ldd	r25, Y+4	; 0x04
    1594:	99 23       	and	r25, r25
    1596:	d1 f0       	breq	.+52     	; 0x15cc <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x96>
            listeners[i].callback(
                listeners[i].port,
                gPB + IP_SRC_P,
                (gPB[UDP_SRC_PORT_H_P] << 8) | gPB[UDP_SRC_PORT_L_P],
                (const char *) (gPB + UDP_DATA_P),
                datalen);
    1598:	07 a1       	ldd	r16, Z+39	; 0x27
    159a:	10 e0       	ldi	r17, 0x00	; 0
    159c:	08 50       	subi	r16, 0x08	; 8
    159e:	11 09       	sbc	r17, r1
    15a0:	86 a1       	ldd	r24, Z+38	; 0x26
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	98 2f       	mov	r25, r24
    15a6:	88 27       	eor	r24, r24
    15a8:	08 0f       	add	r16, r24
    15aa:	19 1f       	adc	r17, r25
    15ac:	42 a1       	ldd	r20, Z+34	; 0x22
    15ae:	50 e0       	ldi	r21, 0x00	; 0
    15b0:	54 2f       	mov	r21, r20
    15b2:	44 27       	eor	r20, r20
    15b4:	83 a1       	ldd	r24, Z+35	; 0x23
    15b6:	48 2b       	or	r20, r24
    15b8:	88 80       	ld	r8, Y
    15ba:	99 80       	ldd	r9, Y+1	; 0x01
    15bc:	2d e1       	ldi	r18, 0x1D	; 29
    15be:	35 e0       	ldi	r19, 0x05	; 5
    15c0:	6d e0       	ldi	r22, 0x0D	; 13
    15c2:	75 e0       	ldi	r23, 0x05	; 5
    15c4:	cd 01       	movw	r24, r26
    15c6:	f4 01       	movw	r30, r8
    15c8:	19 95       	eicall
            packetProcessed = true;
    15ca:	8b 2d       	mov	r24, r11
    return numListeners > 0;
}

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    bool packetProcessed = false;
    for(int i = 0; i < numListeners; i++)
    15cc:	ff ef       	ldi	r31, 0xFF	; 255
    15ce:	ef 1a       	sub	r14, r31
    15d0:	ff 0a       	sbc	r15, r31
    15d2:	25 96       	adiw	r28, 0x05	; 5
    15d4:	20 91 26 07 	lds	r18, 0x0726	; 0x800726 <numListeners>
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	e2 16       	cp	r14, r18
    15dc:	f3 06       	cpc	r15, r19
    15de:	44 f2       	brlt	.-112    	; 0x1570 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x3a>
    15e0:	01 c0       	rjmp	.+2      	; 0x15e4 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0xae>
bool EtherCard::udpServerListening() {
    return numListeners > 0;
}

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    bool packetProcessed = false;
    15e2:	80 e0       	ldi	r24, 0x00	; 0
                datalen);
            packetProcessed = true;
        }
    }
    return packetProcessed;
}
    15e4:	df 91       	pop	r29
    15e6:	cf 91       	pop	r28
    15e8:	1f 91       	pop	r17
    15ea:	0f 91       	pop	r16
    15ec:	ff 90       	pop	r15
    15ee:	ef 90       	pop	r14
    15f0:	df 90       	pop	r13
    15f2:	cf 90       	pop	r12
    15f4:	bf 90       	pop	r11
    15f6:	9f 90       	pop	r9
    15f8:	8f 90       	pop	r8
    15fa:	08 95       	ret

000015fc <_ZN9EtherCard6copyIpEPhPKh>:
#include <stdlib.h>
#include <ctype.h>
#include <string.h>

void EtherCard::copyIp (uint8_t *dst, const uint8_t *src) {
    memcpy(dst, src, IP_LEN);
    15fc:	fb 01       	movw	r30, r22
    15fe:	20 81       	ld	r18, Z
    1600:	31 81       	ldd	r19, Z+1	; 0x01
    1602:	fc 01       	movw	r30, r24
    1604:	31 83       	std	Z+1, r19	; 0x01
    1606:	20 83       	st	Z, r18
    1608:	fb 01       	movw	r30, r22
    160a:	22 81       	ldd	r18, Z+2	; 0x02
    160c:	33 81       	ldd	r19, Z+3	; 0x03
    160e:	fc 01       	movw	r30, r24
    1610:	33 83       	std	Z+3, r19	; 0x03
    1612:	22 83       	std	Z+2, r18	; 0x02
    1614:	08 95       	ret

00001616 <_ZN9EtherCard7copyMacEPhPKh>:
}

void EtherCard::copyMac (uint8_t *dst, const uint8_t *src) {
    1616:	dc 01       	movw	r26, r24
    memcpy(dst, src, ETH_LEN);
    1618:	96 e0       	ldi	r25, 0x06	; 6
    161a:	fb 01       	movw	r30, r22
    161c:	01 90       	ld	r0, Z+
    161e:	0d 92       	st	X+, r0
    1620:	9a 95       	dec	r25
    1622:	e1 f7       	brne	.-8      	; 0x161c <_ZN9EtherCard7copyMacEPhPKh+0x6>
    1624:	08 95       	ret

00001626 <_ZN9EtherComm13CheckChecksumEPKch>:
			}
		}
	}
}

bool EtherComm::CheckChecksum(const char *data, uint8_t len){
    1626:	cf 93       	push	r28
    1628:	df 93       	push	r29
    162a:	ec 01       	movw	r28, r24
  uint8_t checksum = (uint8_t)(*(data++)); //Start by 'adding' the command to the checksum
    162c:	dc 01       	movw	r26, r24
    162e:	11 96       	adiw	r26, 0x01	; 1
    1630:	98 81       	ld	r25, Y
  while(len-- > 0){
    1632:	2f ef       	ldi	r18, 0xFF	; 255
    1634:	26 0f       	add	r18, r22
    1636:	66 23       	and	r22, r22
    1638:	91 f0       	breq	.+36     	; 0x165e <_ZN9EtherComm13CheckChecksumEPKch+0x38>
    163a:	fd 01       	movw	r30, r26
    163c:	62 2f       	mov	r22, r18
    163e:	70 e0       	ldi	r23, 0x00	; 0
    1640:	9b 01       	movw	r18, r22
    1642:	2e 5f       	subi	r18, 0xFE	; 254
    1644:	3f 4f       	sbci	r19, 0xFF	; 255
    1646:	ae 01       	movw	r20, r28
    1648:	42 0f       	add	r20, r18
    164a:	53 1f       	adc	r21, r19
    checksum += (uint8_t)(*(data++));
    164c:	21 91       	ld	r18, Z+
    164e:	92 0f       	add	r25, r18
	}
}

bool EtherComm::CheckChecksum(const char *data, uint8_t len){
  uint8_t checksum = (uint8_t)(*(data++)); //Start by 'adding' the command to the checksum
  while(len-- > 0){
    1650:	e4 17       	cp	r30, r20
    1652:	f5 07       	cpc	r31, r21
    1654:	d9 f7       	brne	.-10     	; 0x164c <_ZN9EtherComm13CheckChecksumEPKch+0x26>
    1656:	6f 5f       	subi	r22, 0xFF	; 255
    1658:	7f 4f       	sbci	r23, 0xFF	; 255
    165a:	a6 0f       	add	r26, r22
    165c:	b7 1f       	adc	r27, r23
    checksum += (uint8_t)(*(data++));
  }
  return (checksum & CHECKSUM_MASK) == (uint8_t)(*data);
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	2c 91       	ld	r18, X
    1662:	29 13       	cpse	r18, r25
    1664:	80 e0       	ldi	r24, 0x00	; 0
}
    1666:	df 91       	pop	r29
    1668:	cf 91       	pop	r28
    166a:	08 95       	ret

0000166c <_Z10udpReceivejPhjPKcj>:

//char EtherComm::buffer[BUFFER_SIZE];
uint8_t* EtherComm::buffer = ether.buffer + UDP_DATA_P;

//callback that prints received packets to the serial port
void udpReceive(uint16_t dest_port, uint8_t src_ip[IP_LEN], uint16_t src_port, const char *data, uint16_t packetLen){
    166c:	0f 93       	push	r16
    166e:	1f 93       	push	r17
    1670:	cf 93       	push	r28
    1672:	df 93       	push	r29
/*  IPAddress src(src_ip[0],src_ip[1],src_ip[2],src_ip[3]);
  ether.printIp(src_ip);*/
	
	if(packetLen >= 2){ //At minimum, register id, and checksum.
    1674:	c8 01       	movw	r24, r16
    1676:	02 97       	sbiw	r24, 0x02	; 2
    1678:	8f 3f       	cpi	r24, 0xFF	; 255
    167a:	91 05       	cpc	r25, r1
    167c:	09 f0       	breq	.+2      	; 0x1680 <_Z10udpReceivejPhjPKcj+0x14>
    167e:	68 f4       	brcc	.+26     	; 0x169a <_Z10udpReceivejPhjPKcj+0x2e>
    1680:	e9 01       	movw	r28, r18
		if(packetLen <= 257){
			uint8_t dataLen = (uint8_t)(packetLen - 2);
    1682:	02 50       	subi	r16, 0x02	; 2
			if(EtherComm::CheckChecksum(data, dataLen)){
    1684:	60 2f       	mov	r22, r16
    1686:	c9 01       	movw	r24, r18
    1688:	ce df       	rcall	.-100    	; 0x1626 <_ZN9EtherComm13CheckChecksumEPKch>
    168a:	88 23       	and	r24, r24
    168c:	31 f0       	breq	.+12     	; 0x169a <_Z10udpReceivejPhjPKcj+0x2e>
				EtherComm::CommandReceived(data[0], (const uint8_t*)(data + 1), dataLen);
    168e:	be 01       	movw	r22, r28
    1690:	6f 5f       	subi	r22, 0xFF	; 255
    1692:	7f 4f       	sbci	r23, 0xFF	; 255
    1694:	40 2f       	mov	r20, r16
    1696:	88 81       	ld	r24, Y
    1698:	a5 d9       	rcall	.-3254   	; 0x9e4 <_ZN9EtherComm15CommandReceivedEhPKhh>
			}
		}
	}
}
    169a:	df 91       	pop	r29
    169c:	cf 91       	pop	r28
    169e:	1f 91       	pop	r17
    16a0:	0f 91       	pop	r16
    16a2:	08 95       	ret

000016a4 <_ZN9EtherComm5beginEjjRVhS1_h>:
    checksum += (uint8_t)(*(data++));
  }
  return (checksum & CHECKSUM_MASK) == (uint8_t)(*data);
}

bool EtherComm::begin(uint16_t recvPort, uint16_t destPort, Register& csDDR, Register& csPort, uint8_t csPin){
    16a4:	0f 93       	push	r16
    16a6:	cf 93       	push	r28
    16a8:	df 93       	push	r29
    16aa:	ec 01       	movw	r28, r24
    16ac:	ca 01       	movw	r24, r20
    16ae:	a9 01       	movw	r20, r18
    16b0:	20 2f       	mov	r18, r16
  EtherComm::_recvPort = recvPort;
    16b2:	d0 93 52 07 	sts	0x0752, r29	; 0x800752 <_ZN9EtherComm9_recvPortE+0x1>
    16b6:	c0 93 51 07 	sts	0x0751, r28	; 0x800751 <_ZN9EtherComm9_recvPortE>
  EtherComm::_destPort = destPort;
    16ba:	70 93 50 07 	sts	0x0750, r23	; 0x800750 <_ZN9EtherComm9_destPortE+0x1>
    16be:	60 93 4f 07 	sts	0x074F, r22	; 0x80074f <_ZN9EtherComm9_destPortE>
  
  if (ether.begin(EtherComm::_mymac, csDDR, csPort, csPin) == 0) return false;
    16c2:	bc 01       	movw	r22, r24
    16c4:	86 e0       	ldi	r24, 0x06	; 6
    16c6:	92 e0       	ldi	r25, 0x02	; 2
    16c8:	d1 db       	rcall	.-2142   	; 0xe6c <_ZN9EtherCard5beginEPKhRVhS3_h>
    16ca:	88 23       	and	r24, r24
    16cc:	79 f0       	breq	.+30     	; 0x16ec <_ZN9EtherComm5beginEjjRVhS1_h+0x48>
  ether.staticSetup(EtherComm::_myip, EtherComm::_gwip);
    16ce:	20 e0       	ldi	r18, 0x00	; 0
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	40 e0       	ldi	r20, 0x00	; 0
    16d4:	50 e0       	ldi	r21, 0x00	; 0
    16d6:	6c e0       	ldi	r22, 0x0C	; 12
    16d8:	72 e0       	ldi	r23, 0x02	; 2
    16da:	80 e1       	ldi	r24, 0x10	; 16
    16dc:	92 e0       	ldi	r25, 0x02	; 2
    16de:	df db       	rcall	.-2114   	; 0xe9e <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_>
  ether.printIp("GW:  ", ether.gwip);
  ether.printIp("DNS: ", ether.dnsip);
  */
  
  //Register the udpSerialPrint() method to listen to port the receive port.
  ether.udpServerListenOnPort(&udpReceive, recvPort);
    16e0:	be 01       	movw	r22, r28
    16e2:	86 e3       	ldi	r24, 0x36	; 54
    16e4:	9b e0       	ldi	r25, 0x0B	; 11
    16e6:	06 df       	rcall	.-500    	; 0x14f4 <_ZN9EtherCard21udpServerListenOnPortEPFvjPhjPKcjEj>
  
  return true;
    16e8:	81 e0       	ldi	r24, 0x01	; 1
    16ea:	01 c0       	rjmp	.+2      	; 0x16ee <_ZN9EtherComm5beginEjjRVhS1_h+0x4a>

bool EtherComm::begin(uint16_t recvPort, uint16_t destPort, Register& csDDR, Register& csPort, uint8_t csPin){
  EtherComm::_recvPort = recvPort;
  EtherComm::_destPort = destPort;
  
  if (ether.begin(EtherComm::_mymac, csDDR, csPort, csPin) == 0) return false;
    16ec:	80 e0       	ldi	r24, 0x00	; 0
  
  //Register the udpSerialPrint() method to listen to port the receive port.
  ether.udpServerListenOnPort(&udpReceive, recvPort);
  
  return true;
}
    16ee:	df 91       	pop	r29
    16f0:	cf 91       	pop	r28
    16f2:	0f 91       	pop	r16
    16f4:	08 95       	ret

000016f6 <_ZN9EtherComm11SendCommandEhh>:

void EtherComm::SendCommand(uint8_t id, uint8_t len){
    16f6:	0f 93       	push	r16
    16f8:	1f 93       	push	r17
    16fa:	cf 93       	push	r28
    16fc:	df 93       	push	r29
  EtherComm::buffer[0] = id; //START_BYTE;
    16fe:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    1702:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    1706:	80 83       	st	Z, r24
  
  uint8_t checksum = id; 
  uint8_t* index = &EtherComm::buffer[1]; 
    1708:	c0 91 00 02 	lds	r28, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    170c:	d0 91 01 02 	lds	r29, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    1710:	de 01       	movw	r26, r28
    1712:	11 96       	adiw	r26, 0x01	; 1
  uint8_t bytes = len;
  while(bytes-- > 0){
    1714:	4f ef       	ldi	r20, 0xFF	; 255
    1716:	46 0f       	add	r20, r22
    1718:	66 23       	and	r22, r22
    171a:	81 f0       	breq	.+32     	; 0x173c <_ZN9EtherComm11SendCommandEhh+0x46>
    171c:	fd 01       	movw	r30, r26
    171e:	50 e0       	ldi	r21, 0x00	; 0
    1720:	9a 01       	movw	r18, r20
    1722:	2e 5f       	subi	r18, 0xFE	; 254
    1724:	3f 4f       	sbci	r19, 0xFF	; 255
    1726:	2c 0f       	add	r18, r28
    1728:	3d 1f       	adc	r19, r29
    checksum += (uint8_t)(*(index++));  
    172a:	91 91       	ld	r25, Z+
    172c:	89 0f       	add	r24, r25
  EtherComm::buffer[0] = id; //START_BYTE;
  
  uint8_t checksum = id; 
  uint8_t* index = &EtherComm::buffer[1]; 
  uint8_t bytes = len;
  while(bytes-- > 0){
    172e:	e2 17       	cp	r30, r18
    1730:	f3 07       	cpc	r31, r19
    1732:	d9 f7       	brne	.-10     	; 0x172a <_ZN9EtherComm11SendCommandEhh+0x34>
    1734:	4f 5f       	subi	r20, 0xFF	; 255
    1736:	5f 4f       	sbci	r21, 0xFF	; 255
    1738:	a4 0f       	add	r26, r20
    173a:	b5 1f       	adc	r27, r21
    checksum += (uint8_t)(*(index++));  
  }
  (*index) = (uint8_t)(checksum & CHECKSUM_MASK);
    173c:	8c 93       	st	X, r24

  ether.sendUdp(EtherComm::buffer, (uint16_t)len + 2, _recvPort, _destIP, _destPort);
    173e:	00 91 4f 07 	lds	r16, 0x074F	; 0x80074f <_ZN9EtherComm9_destPortE>
    1742:	10 91 50 07 	lds	r17, 0x0750	; 0x800750 <_ZN9EtherComm9_destPortE+0x1>
    1746:	40 91 51 07 	lds	r20, 0x0751	; 0x800751 <_ZN9EtherComm9_recvPortE>
    174a:	50 91 52 07 	lds	r21, 0x0752	; 0x800752 <_ZN9EtherComm9_recvPortE+0x1>
    174e:	70 e0       	ldi	r23, 0x00	; 0
    1750:	6e 5f       	subi	r22, 0xFE	; 254
    1752:	7f 4f       	sbci	r23, 0xFF	; 255
    1754:	22 e0       	ldi	r18, 0x02	; 2
    1756:	32 e0       	ldi	r19, 0x02	; 2
    1758:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    175c:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    1760:	57 dd       	rcall	.-1362   	; 0x1210 <_ZN9EtherCard7sendUdpEPKhjjS1_j>
}
    1762:	df 91       	pop	r29
    1764:	cf 91       	pop	r28
    1766:	1f 91       	pop	r17
    1768:	0f 91       	pop	r16
    176a:	08 95       	ret

0000176c <main>:
#include "Micro/Peripherals/HardwareSerial.h"
#include "Robot.h"

int main(void)
{
	Serial.begin(115200);
    176c:	26 e0       	ldi	r18, 0x06	; 6
    176e:	40 e0       	ldi	r20, 0x00	; 0
    1770:	52 ec       	ldi	r21, 0xC2	; 194
    1772:	61 e0       	ldi	r22, 0x01	; 1
    1774:	70 e0       	ldi	r23, 0x00	; 0
    1776:	87 e7       	ldi	r24, 0x77	; 119
    1778:	97 e0       	ldi	r25, 0x07	; 7
    177a:	66 d0       	rcall	.+204    	; 0x1848 <_ZN14HardwareSerial5beginEmh>
	Serial.println("Initializing...");
    177c:	6b e2       	ldi	r22, 0x2B	; 43
    177e:	72 e0       	ldi	r23, 0x02	; 2
    1780:	87 e7       	ldi	r24, 0x77	; 119
    1782:	97 e0       	ldi	r25, 0x07	; 7
    1784:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <_ZN5Print7printlnEPKc>
	
	if(!rov.begin()){
    1788:	0e 94 b4 23 	call	0x4768	; 0x4768 <_ZN5Robot5beginEv>
    178c:	81 11       	cpse	r24, r1
    178e:	09 c0       	rjmp	.+18     	; 0x17a2 <main+0x36>
		Serial.println("Failed to initialize robot.");
    1790:	6b e3       	ldi	r22, 0x3B	; 59
    1792:	72 e0       	ldi	r23, 0x02	; 2
    1794:	87 e7       	ldi	r24, 0x77	; 119
    1796:	97 e0       	ldi	r25, 0x07	; 7
    1798:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <_ZN5Print7printlnEPKc>
		while(true) rov.CheckErrorsOnly();
    179c:	0e 94 cd 21 	call	0x439a	; 0x439a <_ZN5Robot15CheckErrorsOnlyEv>
    17a0:	fd cf       	rjmp	.-6      	; 0x179c <main+0x30>
	}
	Serial.println("Initialized robot.");
    17a2:	67 e5       	ldi	r22, 0x57	; 87
    17a4:	72 e0       	ldi	r23, 0x02	; 2
    17a6:	87 e7       	ldi	r24, 0x77	; 119
    17a8:	97 e0       	ldi	r25, 0x07	; 7
    17aa:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <_ZN5Print7printlnEPKc>
	
    while (1) {
		rov.Loop();
    17ae:	0e 94 87 24 	call	0x490e	; 0x490e <_ZN5Robot4LoopEv>
    17b2:	fd cf       	rjmp	.-6      	; 0x17ae <main+0x42>

000017b4 <_ZN5Print17availableForWriteEv>:
	//cbi(*_ucsrb, UDRIE0);
}

void HardwareSerial::end(){
	cbi(*_ucsrb, RXEN0);
	cbi(*_ucsrb, TXEN0);
    17b4:	80 e0       	ldi	r24, 0x00	; 0
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	08 95       	ret

000017ba <_ZN14HardwareSerial9availableEv>:
    17ba:	dc 01       	movw	r26, r24
    17bc:	14 96       	adiw	r26, 0x04	; 4
    17be:	ed 91       	ld	r30, X+
    17c0:	fc 91       	ld	r31, X
    17c2:	15 97       	sbiw	r26, 0x05	; 5
    17c4:	80 81       	ld	r24, Z
    17c6:	08 2e       	mov	r0, r24
    17c8:	00 0c       	add	r0, r0
    17ca:	99 0b       	sbc	r25, r25
    17cc:	89 2f       	mov	r24, r25
    17ce:	88 1f       	adc	r24, r24
    17d0:	88 27       	eor	r24, r24
    17d2:	88 1f       	adc	r24, r24
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	08 95       	ret

000017d8 <_ZN14HardwareSerial4peekEv>:
    17d8:	8f ef       	ldi	r24, 0xFF	; 255
    17da:	9f ef       	ldi	r25, 0xFF	; 255
    17dc:	08 95       	ret

000017de <_ZN14HardwareSerial4readEv>:
    17de:	dc 01       	movw	r26, r24
    17e0:	14 96       	adiw	r26, 0x04	; 4
    17e2:	ed 91       	ld	r30, X+
    17e4:	fc 91       	ld	r31, X
    17e6:	15 97       	sbiw	r26, 0x05	; 5
    17e8:	90 81       	ld	r25, Z
    17ea:	99 23       	and	r25, r25
    17ec:	ec f7       	brge	.-6      	; 0x17e8 <_ZN14HardwareSerial4readEv+0xa>
    17ee:	1a 96       	adiw	r26, 0x0a	; 10
    17f0:	ed 91       	ld	r30, X+
    17f2:	fc 91       	ld	r31, X
    17f4:	1b 97       	sbiw	r26, 0x0b	; 11
    17f6:	80 81       	ld	r24, Z
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	08 95       	ret

000017fc <_ZN14HardwareSerial17availableForWriteEv>:
    17fc:	dc 01       	movw	r26, r24
    17fe:	14 96       	adiw	r26, 0x04	; 4
    1800:	ed 91       	ld	r30, X+
    1802:	fc 91       	ld	r31, X
    1804:	15 97       	sbiw	r26, 0x05	; 5
    1806:	20 81       	ld	r18, Z
    1808:	81 e0       	ldi	r24, 0x01	; 1
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	25 fd       	sbrc	r18, 5
    180e:	02 c0       	rjmp	.+4      	; 0x1814 <_ZN14HardwareSerial17availableForWriteEv+0x18>
    1810:	80 e0       	ldi	r24, 0x00	; 0
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	08 95       	ret

00001816 <_ZN14HardwareSerial5flushEv>:
    1816:	dc 01       	movw	r26, r24
    1818:	14 96       	adiw	r26, 0x04	; 4
    181a:	ed 91       	ld	r30, X+
    181c:	fc 91       	ld	r31, X
    181e:	15 97       	sbiw	r26, 0x05	; 5
    1820:	80 81       	ld	r24, Z
    1822:	85 ff       	sbrs	r24, 5
    1824:	fd cf       	rjmp	.-6      	; 0x1820 <_ZN14HardwareSerial5flushEv+0xa>
    1826:	08 95       	ret

00001828 <_ZN14HardwareSerial5writeEh>:
    1828:	dc 01       	movw	r26, r24
    182a:	14 96       	adiw	r26, 0x04	; 4
    182c:	ed 91       	ld	r30, X+
    182e:	fc 91       	ld	r31, X
    1830:	15 97       	sbiw	r26, 0x05	; 5
    1832:	90 81       	ld	r25, Z
    1834:	95 ff       	sbrs	r25, 5
    1836:	fd cf       	rjmp	.-6      	; 0x1832 <_ZN14HardwareSerial5writeEh+0xa>
    1838:	1a 96       	adiw	r26, 0x0a	; 10
    183a:	ed 91       	ld	r30, X+
    183c:	fc 91       	ld	r31, X
    183e:	1b 97       	sbiw	r26, 0x0b	; 11
    1840:	60 83       	st	Z, r22
    1842:	81 e0       	ldi	r24, 0x01	; 1
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	08 95       	ret

00001848 <_ZN14HardwareSerial5beginEmh>:
    1848:	cf 92       	push	r12
    184a:	df 92       	push	r13
    184c:	ef 92       	push	r14
    184e:	ff 92       	push	r15
    1850:	1f 93       	push	r17
    1852:	cf 93       	push	r28
    1854:	df 93       	push	r29
    1856:	ec 01       	movw	r28, r24
    1858:	6a 01       	movw	r12, r20
    185a:	7b 01       	movw	r14, r22
    185c:	12 2f       	mov	r17, r18
    185e:	db 01       	movw	r26, r22
    1860:	ca 01       	movw	r24, r20
    1862:	88 0f       	add	r24, r24
    1864:	99 1f       	adc	r25, r25
    1866:	aa 1f       	adc	r26, r26
    1868:	bb 1f       	adc	r27, r27
    186a:	88 0f       	add	r24, r24
    186c:	99 1f       	adc	r25, r25
    186e:	aa 1f       	adc	r26, r26
    1870:	bb 1f       	adc	r27, r27
    1872:	9c 01       	movw	r18, r24
    1874:	ad 01       	movw	r20, r26
    1876:	22 0f       	add	r18, r18
    1878:	33 1f       	adc	r19, r19
    187a:	44 1f       	adc	r20, r20
    187c:	55 1f       	adc	r21, r21
    187e:	60 e0       	ldi	r22, 0x00	; 0
    1880:	74 e2       	ldi	r23, 0x24	; 36
    1882:	84 ef       	ldi	r24, 0xF4	; 244
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	0e 94 f5 28 	call	0x51ea	; 0x51ea <__udivmodsi4>
    188a:	21 50       	subi	r18, 0x01	; 1
    188c:	31 09       	sbc	r19, r1
    188e:	ec 81       	ldd	r30, Y+4	; 0x04
    1890:	fd 81       	ldd	r31, Y+5	; 0x05
    1892:	82 e0       	ldi	r24, 0x02	; 2
    1894:	80 83       	st	Z, r24
    1896:	21 15       	cp	r18, r1
    1898:	80 e1       	ldi	r24, 0x10	; 16
    189a:	38 07       	cpc	r19, r24
    189c:	70 f0       	brcs	.+28     	; 0x18ba <_ZN14HardwareSerial5beginEmh+0x72>
    189e:	ec 81       	ldd	r30, Y+4	; 0x04
    18a0:	fd 81       	ldd	r31, Y+5	; 0x05
    18a2:	10 82       	st	Z, r1
    18a4:	80 e4       	ldi	r24, 0x40	; 64
    18a6:	92 e4       	ldi	r25, 0x42	; 66
    18a8:	c8 9e       	mul	r12, r24
    18aa:	90 01       	movw	r18, r0
    18ac:	c9 9e       	mul	r12, r25
    18ae:	30 0d       	add	r19, r0
    18b0:	d8 9e       	mul	r13, r24
    18b2:	30 0d       	add	r19, r0
    18b4:	11 24       	eor	r1, r1
    18b6:	21 50       	subi	r18, 0x01	; 1
    18b8:	31 09       	sbc	r19, r1
    18ba:	ea 81       	ldd	r30, Y+2	; 0x02
    18bc:	fb 81       	ldd	r31, Y+3	; 0x03
    18be:	31 83       	std	Z+1, r19	; 0x01
    18c0:	20 83       	st	Z, r18
    18c2:	e8 85       	ldd	r30, Y+8	; 0x08
    18c4:	f9 85       	ldd	r31, Y+9	; 0x09
    18c6:	10 83       	st	Z, r17
    18c8:	ee 81       	ldd	r30, Y+6	; 0x06
    18ca:	ff 81       	ldd	r31, Y+7	; 0x07
    18cc:	80 81       	ld	r24, Z
    18ce:	80 61       	ori	r24, 0x10	; 16
    18d0:	80 83       	st	Z, r24
    18d2:	ee 81       	ldd	r30, Y+6	; 0x06
    18d4:	ff 81       	ldd	r31, Y+7	; 0x07
    18d6:	80 81       	ld	r24, Z
    18d8:	88 60       	ori	r24, 0x08	; 8
    18da:	80 83       	st	Z, r24
    18dc:	df 91       	pop	r29
    18de:	cf 91       	pop	r28
    18e0:	1f 91       	pop	r17
    18e2:	ff 90       	pop	r15
    18e4:	ef 90       	pop	r14
    18e6:	df 90       	pop	r13
    18e8:	cf 90       	pop	r12
    18ea:	08 95       	ret

000018ec <_GLOBAL__sub_I__ZN14HardwareSerialC2ERVjRVhS3_S3_S3_>:

#include "HardwareSerial.h"
#include <avr/io.h>

HardwareSerial::HardwareSerial( Register16 &ubrr, Register &ucsra, Register &ucsrb, Register &ucsrc, Register &udr )
 : _ubrr(&ubrr), _ucsra(&ucsra), _ucsrb(&ucsrb), _ucsrc(&ucsrc), _udr(&udr)
    18ec:	e7 e7       	ldi	r30, 0x77	; 119
    18ee:	f7 e0       	ldi	r31, 0x07	; 7
    18f0:	8e e6       	ldi	r24, 0x6E	; 110
    18f2:	92 e0       	ldi	r25, 0x02	; 2
    18f4:	91 83       	std	Z+1, r25	; 0x01
    18f6:	80 83       	st	Z, r24
    18f8:	24 ec       	ldi	r18, 0xC4	; 196
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	33 83       	std	Z+3, r19	; 0x03
    18fe:	22 83       	std	Z+2, r18	; 0x02
    1900:	20 ec       	ldi	r18, 0xC0	; 192
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	35 83       	std	Z+5, r19	; 0x05
    1906:	24 83       	std	Z+4, r18	; 0x04
    1908:	21 ec       	ldi	r18, 0xC1	; 193
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	37 83       	std	Z+7, r19	; 0x07
    190e:	26 83       	std	Z+6, r18	; 0x06
    1910:	22 ec       	ldi	r18, 0xC2	; 194
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	31 87       	std	Z+9, r19	; 0x09
    1916:	20 87       	std	Z+8, r18	; 0x08
    1918:	26 ec       	ldi	r18, 0xC6	; 198
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	33 87       	std	Z+11, r19	; 0x0b
    191e:	22 87       	std	Z+10, r18	; 0x0a
    1920:	eb e6       	ldi	r30, 0x6B	; 107
    1922:	f7 e0       	ldi	r31, 0x07	; 7
    1924:	91 83       	std	Z+1, r25	; 0x01
    1926:	80 83       	st	Z, r24
    1928:	2c ec       	ldi	r18, 0xCC	; 204
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	33 83       	std	Z+3, r19	; 0x03
    192e:	22 83       	std	Z+2, r18	; 0x02
    1930:	28 ec       	ldi	r18, 0xC8	; 200
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	35 83       	std	Z+5, r19	; 0x05
    1936:	24 83       	std	Z+4, r18	; 0x04
    1938:	29 ec       	ldi	r18, 0xC9	; 201
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	37 83       	std	Z+7, r19	; 0x07
    193e:	26 83       	std	Z+6, r18	; 0x06
    1940:	2a ec       	ldi	r18, 0xCA	; 202
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	31 87       	std	Z+9, r19	; 0x09
    1946:	20 87       	std	Z+8, r18	; 0x08
    1948:	2e ec       	ldi	r18, 0xCE	; 206
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	33 87       	std	Z+11, r19	; 0x0b
    194e:	22 87       	std	Z+10, r18	; 0x0a
    1950:	ef e5       	ldi	r30, 0x5F	; 95
    1952:	f7 e0       	ldi	r31, 0x07	; 7
    1954:	91 83       	std	Z+1, r25	; 0x01
    1956:	80 83       	st	Z, r24
    1958:	24 ed       	ldi	r18, 0xD4	; 212
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	33 83       	std	Z+3, r19	; 0x03
    195e:	22 83       	std	Z+2, r18	; 0x02
    1960:	20 ed       	ldi	r18, 0xD0	; 208
    1962:	30 e0       	ldi	r19, 0x00	; 0
    1964:	35 83       	std	Z+5, r19	; 0x05
    1966:	24 83       	std	Z+4, r18	; 0x04
    1968:	21 ed       	ldi	r18, 0xD1	; 209
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	37 83       	std	Z+7, r19	; 0x07
    196e:	26 83       	std	Z+6, r18	; 0x06
    1970:	22 ed       	ldi	r18, 0xD2	; 210
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	31 87       	std	Z+9, r19	; 0x09
    1976:	20 87       	std	Z+8, r18	; 0x08
    1978:	26 ed       	ldi	r18, 0xD6	; 214
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	33 87       	std	Z+11, r19	; 0x0b
    197e:	22 87       	std	Z+10, r18	; 0x0a
    1980:	e3 e5       	ldi	r30, 0x53	; 83
    1982:	f7 e0       	ldi	r31, 0x07	; 7
    1984:	91 83       	std	Z+1, r25	; 0x01
    1986:	80 83       	st	Z, r24
    1988:	84 e3       	ldi	r24, 0x34	; 52
    198a:	91 e0       	ldi	r25, 0x01	; 1
    198c:	93 83       	std	Z+3, r25	; 0x03
    198e:	82 83       	std	Z+2, r24	; 0x02
    1990:	80 e3       	ldi	r24, 0x30	; 48
    1992:	91 e0       	ldi	r25, 0x01	; 1
    1994:	95 83       	std	Z+5, r25	; 0x05
    1996:	84 83       	std	Z+4, r24	; 0x04
    1998:	81 e3       	ldi	r24, 0x31	; 49
    199a:	91 e0       	ldi	r25, 0x01	; 1
    199c:	97 83       	std	Z+7, r25	; 0x07
    199e:	86 83       	std	Z+6, r24	; 0x06
    19a0:	82 e3       	ldi	r24, 0x32	; 50
    19a2:	91 e0       	ldi	r25, 0x01	; 1
    19a4:	91 87       	std	Z+9, r25	; 0x09
    19a6:	80 87       	std	Z+8, r24	; 0x08
    19a8:	86 e3       	ldi	r24, 0x36	; 54
    19aa:	91 e0       	ldi	r25, 0x01	; 1
    19ac:	93 87       	std	Z+11, r25	; 0x0b
    19ae:	82 87       	std	Z+10, r24	; 0x0a
    19b0:	08 95       	ret

000019b2 <_ZN13HardwareServo5beginEv>:
	*_icr = 40000; //Set period to 20ms
}

void HardwareServo::end(){
	*_tccrA = 0;
	*_tccrB = 0;
    19b2:	fc 01       	movw	r30, r24
    19b4:	a2 81       	ldd	r26, Z+2	; 0x02
    19b6:	b3 81       	ldd	r27, Z+3	; 0x03
    19b8:	82 e0       	ldi	r24, 0x02	; 2
    19ba:	8c 93       	st	X, r24
    19bc:	a4 81       	ldd	r26, Z+4	; 0x04
    19be:	b5 81       	ldd	r27, Z+5	; 0x05
    19c0:	8a e1       	ldi	r24, 0x1A	; 26
    19c2:	8c 93       	st	X, r24
    19c4:	01 90       	ld	r0, Z+
    19c6:	f0 81       	ld	r31, Z
    19c8:	e0 2d       	mov	r30, r0
    19ca:	80 e4       	ldi	r24, 0x40	; 64
    19cc:	9c e9       	ldi	r25, 0x9C	; 156
    19ce:	91 83       	std	Z+1, r25	; 0x01
    19d0:	80 83       	st	Z, r24
    19d2:	08 95       	ret

000019d4 <_ZN13HardwareServo7EnableAEv>:
}

void HardwareServo::EnableA(){
    19d4:	fc 01       	movw	r30, r24
	*_tccrA |= _BV(COM1A1);
    19d6:	a2 81       	ldd	r26, Z+2	; 0x02
    19d8:	b3 81       	ldd	r27, Z+3	; 0x03
    19da:	8c 91       	ld	r24, X
    19dc:	80 68       	ori	r24, 0x80	; 128
    19de:	8c 93       	st	X, r24
	*_DDR |= _PINA;
    19e0:	a4 85       	ldd	r26, Z+12	; 0x0c
    19e2:	b5 85       	ldd	r27, Z+13	; 0x0d
    19e4:	9c 91       	ld	r25, X
    19e6:	80 89       	ldd	r24, Z+16	; 0x10
    19e8:	89 2b       	or	r24, r25
    19ea:	8c 93       	st	X, r24
    19ec:	08 95       	ret

000019ee <_ZN13HardwareServo7EnableBEv>:
}

void HardwareServo::EnableB(){
    19ee:	fc 01       	movw	r30, r24
	*_tccrA |= _BV(COM1B1);
    19f0:	a2 81       	ldd	r26, Z+2	; 0x02
    19f2:	b3 81       	ldd	r27, Z+3	; 0x03
    19f4:	8c 91       	ld	r24, X
    19f6:	80 62       	ori	r24, 0x20	; 32
    19f8:	8c 93       	st	X, r24
	*_DDR |= _PINB;
    19fa:	a4 85       	ldd	r26, Z+12	; 0x0c
    19fc:	b5 85       	ldd	r27, Z+13	; 0x0d
    19fe:	9c 91       	ld	r25, X
    1a00:	81 89       	ldd	r24, Z+17	; 0x11
    1a02:	89 2b       	or	r24, r25
    1a04:	8c 93       	st	X, r24
    1a06:	08 95       	ret

00001a08 <_ZN13HardwareServo7EnableCEv>:
}

void HardwareServo::EnableC(){
    1a08:	fc 01       	movw	r30, r24
	*_tccrA |= _BV(COM1C1);
    1a0a:	a2 81       	ldd	r26, Z+2	; 0x02
    1a0c:	b3 81       	ldd	r27, Z+3	; 0x03
    1a0e:	8c 91       	ld	r24, X
    1a10:	88 60       	ori	r24, 0x08	; 8
    1a12:	8c 93       	st	X, r24
	*_DDR |= _PINC;
    1a14:	a4 85       	ldd	r26, Z+12	; 0x0c
    1a16:	b5 85       	ldd	r27, Z+13	; 0x0d
    1a18:	9c 91       	ld	r25, X
    1a1a:	82 89       	ldd	r24, Z+18	; 0x12
    1a1c:	89 2b       	or	r24, r25
    1a1e:	8c 93       	st	X, r24
    1a20:	08 95       	ret

00001a22 <_ZN13HardwareServo8DisableAEv>:
}

void HardwareServo::DisableA(){
    1a22:	fc 01       	movw	r30, r24
	*_tccrA &= ~_BV(COM1A1);
    1a24:	a2 81       	ldd	r26, Z+2	; 0x02
    1a26:	b3 81       	ldd	r27, Z+3	; 0x03
    1a28:	8c 91       	ld	r24, X
    1a2a:	8f 77       	andi	r24, 0x7F	; 127
    1a2c:	8c 93       	st	X, r24
	*_PORT &= ~_PINA;
    1a2e:	a6 85       	ldd	r26, Z+14	; 0x0e
    1a30:	b7 85       	ldd	r27, Z+15	; 0x0f
    1a32:	9c 91       	ld	r25, X
    1a34:	80 89       	ldd	r24, Z+16	; 0x10
    1a36:	80 95       	com	r24
    1a38:	89 23       	and	r24, r25
    1a3a:	8c 93       	st	X, r24
    1a3c:	08 95       	ret

00001a3e <_ZN13HardwareServo8DisableBEv>:
}

void HardwareServo::DisableB(){
    1a3e:	fc 01       	movw	r30, r24
	*_tccrA &= ~_BV(COM1B1);
    1a40:	a2 81       	ldd	r26, Z+2	; 0x02
    1a42:	b3 81       	ldd	r27, Z+3	; 0x03
    1a44:	8c 91       	ld	r24, X
    1a46:	8f 7d       	andi	r24, 0xDF	; 223
    1a48:	8c 93       	st	X, r24
	*_PORT &= ~_PINB;
    1a4a:	a6 85       	ldd	r26, Z+14	; 0x0e
    1a4c:	b7 85       	ldd	r27, Z+15	; 0x0f
    1a4e:	9c 91       	ld	r25, X
    1a50:	81 89       	ldd	r24, Z+17	; 0x11
    1a52:	80 95       	com	r24
    1a54:	89 23       	and	r24, r25
    1a56:	8c 93       	st	X, r24
    1a58:	08 95       	ret

00001a5a <_ZN13HardwareServo8DisableCEv>:
}

void HardwareServo::DisableC(){
    1a5a:	fc 01       	movw	r30, r24
	*_tccrA &= ~_BV(COM1C1);
    1a5c:	a2 81       	ldd	r26, Z+2	; 0x02
    1a5e:	b3 81       	ldd	r27, Z+3	; 0x03
    1a60:	8c 91       	ld	r24, X
    1a62:	87 7f       	andi	r24, 0xF7	; 247
    1a64:	8c 93       	st	X, r24
	*_PORT &= ~_PINC;	
    1a66:	a6 85       	ldd	r26, Z+14	; 0x0e
    1a68:	b7 85       	ldd	r27, Z+15	; 0x0f
    1a6a:	9c 91       	ld	r25, X
    1a6c:	82 89       	ldd	r24, Z+18	; 0x12
    1a6e:	80 95       	com	r24
    1a70:	89 23       	and	r24, r25
    1a72:	8c 93       	st	X, r24
    1a74:	08 95       	ret

00001a76 <_ZN13HardwareServo9setPulseAEj>:
}

void HardwareServo::setPulseA(uint16_t pulse){
	//*_ocrA = (uint16_t)((((uint32_t)pulse * (_maxA - _minA)) / 255 + _minA) * CPU_CONST);
	*_ocrA = (uint16_t)(pulse * CPU_CONST);
    1a76:	dc 01       	movw	r26, r24
    1a78:	16 96       	adiw	r26, 0x06	; 6
    1a7a:	ed 91       	ld	r30, X+
    1a7c:	fc 91       	ld	r31, X
    1a7e:	17 97       	sbiw	r26, 0x07	; 7
    1a80:	66 0f       	add	r22, r22
    1a82:	77 1f       	adc	r23, r23
    1a84:	71 83       	std	Z+1, r23	; 0x01
    1a86:	60 83       	st	Z, r22
    1a88:	08 95       	ret

00001a8a <_ZN13HardwareServo9setPulseBEj>:
}

void HardwareServo::setPulseB(uint16_t pulse){
	//*_ocrB = (uint16_t)((((uint32_t)pulse * (_maxB - _minB)) / 255 + _minB) * CPU_CONST);	
	*_ocrB = (uint16_t)(pulse * CPU_CONST);	
    1a8a:	dc 01       	movw	r26, r24
    1a8c:	18 96       	adiw	r26, 0x08	; 8
    1a8e:	ed 91       	ld	r30, X+
    1a90:	fc 91       	ld	r31, X
    1a92:	19 97       	sbiw	r26, 0x09	; 9
    1a94:	66 0f       	add	r22, r22
    1a96:	77 1f       	adc	r23, r23
    1a98:	71 83       	std	Z+1, r23	; 0x01
    1a9a:	60 83       	st	Z, r22
    1a9c:	08 95       	ret

00001a9e <_ZN13HardwareServo9setPulseCEj>:
}

void HardwareServo::setPulseC(uint16_t pulse) {
	//*_ocrC = (uint16_t)((((uint32_t)pulse * (_maxC - _minC)) / 255 + _minC) * CPU_CONST);	
	*_ocrC = (uint16_t)(pulse * CPU_CONST);
    1a9e:	dc 01       	movw	r26, r24
    1aa0:	1a 96       	adiw	r26, 0x0a	; 10
    1aa2:	ed 91       	ld	r30, X+
    1aa4:	fc 91       	ld	r31, X
    1aa6:	1b 97       	sbiw	r26, 0x0b	; 11
    1aa8:	66 0f       	add	r22, r22
    1aaa:	77 1f       	adc	r23, r23
    1aac:	71 83       	std	Z+1, r23	; 0x01
    1aae:	60 83       	st	Z, r22
    1ab0:	08 95       	ret

00001ab2 <_GLOBAL__sub_I__ZN13HardwareServoC2ERVjRVhS3_S1_S1_S1_S3_S3_hhh>:
#define CLK_DIV_256 (_BV(CS02))
#define CLK_DIV_1024 (_BV(CS02) | _BV(CS00))

HardwareServo::HardwareServo(Register16 &icr, Register &tccrA, Register &tccrB, Register16 &ocrA, Register16 &ocrB, Register16 &ocrC, Register &ddr, Register &port, const uint8_t pinA, const uint8_t pinB, const uint8_t pinC)
 : _icr(&icr), _tccrA(&tccrA), _tccrB(&tccrB), _ocrA(&ocrA), _ocrB(&ocrB), _ocrC(&ocrC),
  _DDR(&ddr), _PORT(&port), _PINA(pinA), _PINB(pinB), _PINC(pinC)/*,
    1ab2:	ec eb       	ldi	r30, 0xBC	; 188
    1ab4:	f7 e0       	ldi	r31, 0x07	; 7
    1ab6:	86 e8       	ldi	r24, 0x86	; 134
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	91 83       	std	Z+1, r25	; 0x01
    1abc:	80 83       	st	Z, r24
    1abe:	80 e8       	ldi	r24, 0x80	; 128
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	93 83       	std	Z+3, r25	; 0x03
    1ac4:	82 83       	std	Z+2, r24	; 0x02
    1ac6:	81 e8       	ldi	r24, 0x81	; 129
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	95 83       	std	Z+5, r25	; 0x05
    1acc:	84 83       	std	Z+4, r24	; 0x04
    1ace:	88 e8       	ldi	r24, 0x88	; 136
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	97 83       	std	Z+7, r25	; 0x07
    1ad4:	86 83       	std	Z+6, r24	; 0x06
    1ad6:	8a e8       	ldi	r24, 0x8A	; 138
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	91 87       	std	Z+9, r25	; 0x09
    1adc:	80 87       	std	Z+8, r24	; 0x08
    1ade:	8c e8       	ldi	r24, 0x8C	; 140
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	93 87       	std	Z+11, r25	; 0x0b
    1ae4:	82 87       	std	Z+10, r24	; 0x0a
    1ae6:	84 e2       	ldi	r24, 0x24	; 36
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	95 87       	std	Z+13, r25	; 0x0d
    1aec:	84 87       	std	Z+12, r24	; 0x0c
    1aee:	85 e2       	ldi	r24, 0x25	; 37
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	97 87       	std	Z+15, r25	; 0x0f
    1af4:	86 87       	std	Z+14, r24	; 0x0e
    1af6:	80 e2       	ldi	r24, 0x20	; 32
    1af8:	80 8b       	std	Z+16, r24	; 0x10
    1afa:	90 e4       	ldi	r25, 0x40	; 64
    1afc:	91 8b       	std	Z+17, r25	; 0x11
    1afe:	90 e8       	ldi	r25, 0x80	; 128
    1b00:	92 8b       	std	Z+18, r25	; 0x12
    1b02:	e9 ea       	ldi	r30, 0xA9	; 169
    1b04:	f7 e0       	ldi	r31, 0x07	; 7
    1b06:	26 e9       	ldi	r18, 0x96	; 150
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	31 83       	std	Z+1, r19	; 0x01
    1b0c:	20 83       	st	Z, r18
    1b0e:	20 e9       	ldi	r18, 0x90	; 144
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	33 83       	std	Z+3, r19	; 0x03
    1b14:	22 83       	std	Z+2, r18	; 0x02
    1b16:	21 e9       	ldi	r18, 0x91	; 145
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	35 83       	std	Z+5, r19	; 0x05
    1b1c:	24 83       	std	Z+4, r18	; 0x04
    1b1e:	28 e9       	ldi	r18, 0x98	; 152
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	37 83       	std	Z+7, r19	; 0x07
    1b24:	26 83       	std	Z+6, r18	; 0x06
    1b26:	2a e9       	ldi	r18, 0x9A	; 154
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	31 87       	std	Z+9, r19	; 0x09
    1b2c:	20 87       	std	Z+8, r18	; 0x08
    1b2e:	2c e9       	ldi	r18, 0x9C	; 156
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	33 87       	std	Z+11, r19	; 0x0b
    1b34:	22 87       	std	Z+10, r18	; 0x0a
    1b36:	2d e2       	ldi	r18, 0x2D	; 45
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	35 87       	std	Z+13, r19	; 0x0d
    1b3c:	24 87       	std	Z+12, r18	; 0x0c
    1b3e:	2e e2       	ldi	r18, 0x2E	; 46
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	37 87       	std	Z+15, r19	; 0x0f
    1b44:	26 87       	std	Z+14, r18	; 0x0e
    1b46:	28 e0       	ldi	r18, 0x08	; 8
    1b48:	20 8b       	std	Z+16, r18	; 0x10
    1b4a:	90 e1       	ldi	r25, 0x10	; 16
    1b4c:	91 8b       	std	Z+17, r25	; 0x11
    1b4e:	82 8b       	std	Z+18, r24	; 0x12
    1b50:	e6 e9       	ldi	r30, 0x96	; 150
    1b52:	f7 e0       	ldi	r31, 0x07	; 7
    1b54:	46 ea       	ldi	r20, 0xA6	; 166
    1b56:	50 e0       	ldi	r21, 0x00	; 0
    1b58:	51 83       	std	Z+1, r21	; 0x01
    1b5a:	40 83       	st	Z, r20
    1b5c:	40 ea       	ldi	r20, 0xA0	; 160
    1b5e:	50 e0       	ldi	r21, 0x00	; 0
    1b60:	53 83       	std	Z+3, r21	; 0x03
    1b62:	42 83       	std	Z+2, r20	; 0x02
    1b64:	41 ea       	ldi	r20, 0xA1	; 161
    1b66:	50 e0       	ldi	r21, 0x00	; 0
    1b68:	55 83       	std	Z+5, r21	; 0x05
    1b6a:	44 83       	std	Z+4, r20	; 0x04
    1b6c:	48 ea       	ldi	r20, 0xA8	; 168
    1b6e:	50 e0       	ldi	r21, 0x00	; 0
    1b70:	57 83       	std	Z+7, r21	; 0x07
    1b72:	46 83       	std	Z+6, r20	; 0x06
    1b74:	4a ea       	ldi	r20, 0xAA	; 170
    1b76:	50 e0       	ldi	r21, 0x00	; 0
    1b78:	51 87       	std	Z+9, r21	; 0x09
    1b7a:	40 87       	std	Z+8, r20	; 0x08
    1b7c:	4c ea       	ldi	r20, 0xAC	; 172
    1b7e:	50 e0       	ldi	r21, 0x00	; 0
    1b80:	53 87       	std	Z+11, r21	; 0x0b
    1b82:	42 87       	std	Z+10, r20	; 0x0a
    1b84:	41 e0       	ldi	r20, 0x01	; 1
    1b86:	51 e0       	ldi	r21, 0x01	; 1
    1b88:	55 87       	std	Z+13, r21	; 0x0d
    1b8a:	44 87       	std	Z+12, r20	; 0x0c
    1b8c:	42 e0       	ldi	r20, 0x02	; 2
    1b8e:	51 e0       	ldi	r21, 0x01	; 1
    1b90:	57 87       	std	Z+15, r21	; 0x0f
    1b92:	46 87       	std	Z+14, r20	; 0x0e
    1b94:	20 8b       	std	Z+16, r18	; 0x10
    1b96:	91 8b       	std	Z+17, r25	; 0x11
    1b98:	82 8b       	std	Z+18, r24	; 0x12
    1b9a:	e3 e8       	ldi	r30, 0x83	; 131
    1b9c:	f7 e0       	ldi	r31, 0x07	; 7
    1b9e:	46 e2       	ldi	r20, 0x26	; 38
    1ba0:	51 e0       	ldi	r21, 0x01	; 1
    1ba2:	51 83       	std	Z+1, r21	; 0x01
    1ba4:	40 83       	st	Z, r20
    1ba6:	40 e2       	ldi	r20, 0x20	; 32
    1ba8:	51 e0       	ldi	r21, 0x01	; 1
    1baa:	53 83       	std	Z+3, r21	; 0x03
    1bac:	42 83       	std	Z+2, r20	; 0x02
    1bae:	41 e2       	ldi	r20, 0x21	; 33
    1bb0:	51 e0       	ldi	r21, 0x01	; 1
    1bb2:	55 83       	std	Z+5, r21	; 0x05
    1bb4:	44 83       	std	Z+4, r20	; 0x04
    1bb6:	48 e2       	ldi	r20, 0x28	; 40
    1bb8:	51 e0       	ldi	r21, 0x01	; 1
    1bba:	57 83       	std	Z+7, r21	; 0x07
    1bbc:	46 83       	std	Z+6, r20	; 0x06
    1bbe:	4a e2       	ldi	r20, 0x2A	; 42
    1bc0:	51 e0       	ldi	r21, 0x01	; 1
    1bc2:	51 87       	std	Z+9, r21	; 0x09
    1bc4:	40 87       	std	Z+8, r20	; 0x08
    1bc6:	4c e2       	ldi	r20, 0x2C	; 44
    1bc8:	51 e0       	ldi	r21, 0x01	; 1
    1bca:	53 87       	std	Z+11, r21	; 0x0b
    1bcc:	42 87       	std	Z+10, r20	; 0x0a
    1bce:	4a e0       	ldi	r20, 0x0A	; 10
    1bd0:	51 e0       	ldi	r21, 0x01	; 1
    1bd2:	55 87       	std	Z+13, r21	; 0x0d
    1bd4:	44 87       	std	Z+12, r20	; 0x0c
    1bd6:	4b e0       	ldi	r20, 0x0B	; 11
    1bd8:	51 e0       	ldi	r21, 0x01	; 1
    1bda:	57 87       	std	Z+15, r21	; 0x0f
    1bdc:	46 87       	std	Z+14, r20	; 0x0e
    1bde:	20 8b       	std	Z+16, r18	; 0x10
    1be0:	91 8b       	std	Z+17, r25	; 0x11
    1be2:	82 8b       	std	Z+18, r24	; 0x12
    1be4:	08 95       	ret

00001be6 <_ZN13HardwareTimer12findPrescaleEf>:
	beginMs(us / 1000.0);
}

void HardwareTimer::beginNs(float ns){
	beginMs(ns / 1000000.0);
}
    1be6:	cf 92       	push	r12
    1be8:	df 92       	push	r13
    1bea:	ef 92       	push	r14
    1bec:	ff 92       	push	r15
    1bee:	cf 93       	push	r28
    1bf0:	df 93       	push	r29
    1bf2:	ec 01       	movw	r28, r24
    1bf4:	cb 01       	movw	r24, r22
    1bf6:	ba 01       	movw	r22, r20
    1bf8:	20 e0       	ldi	r18, 0x00	; 0
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	4a e7       	ldi	r20, 0x7A	; 122
    1bfe:	56 e4       	ldi	r21, 0x46	; 70
    1c00:	0e 94 83 28 	call	0x5106	; 0x5106 <__mulsf3>
    1c04:	20 e0       	ldi	r18, 0x00	; 0
    1c06:	30 e0       	ldi	r19, 0x00	; 0
    1c08:	40 e8       	ldi	r20, 0x80	; 128
    1c0a:	5b e3       	ldi	r21, 0x3B	; 59
    1c0c:	0e 94 83 28 	call	0x5106	; 0x5106 <__mulsf3>
    1c10:	6b 01       	movw	r12, r22
    1c12:	7c 01       	movw	r14, r24
    1c14:	20 e0       	ldi	r18, 0x00	; 0
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	40 e8       	ldi	r20, 0x80	; 128
    1c1a:	5f e3       	ldi	r21, 0x3F	; 63
    1c1c:	0e 94 35 27 	call	0x4e6a	; 0x4e6a <__cmpsf2>
    1c20:	18 16       	cp	r1, r24
    1c22:	3c f0       	brlt	.+14     	; 0x1c32 <_ZN13HardwareTimer12findPrescaleEf+0x4c>
    1c24:	81 e0       	ldi	r24, 0x01	; 1
    1c26:	8a 87       	std	Y+10, r24	; 0x0a
    1c28:	60 e0       	ldi	r22, 0x00	; 0
    1c2a:	70 e0       	ldi	r23, 0x00	; 0
    1c2c:	80 e8       	ldi	r24, 0x80	; 128
    1c2e:	9f e3       	ldi	r25, 0x3F	; 63
    1c30:	39 c0       	rjmp	.+114    	; 0x1ca4 <_ZN13HardwareTimer12findPrescaleEf+0xbe>
    1c32:	20 e0       	ldi	r18, 0x00	; 0
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	40 e0       	ldi	r20, 0x00	; 0
    1c38:	51 e4       	ldi	r21, 0x41	; 65
    1c3a:	c7 01       	movw	r24, r14
    1c3c:	b6 01       	movw	r22, r12
    1c3e:	0e 94 35 27 	call	0x4e6a	; 0x4e6a <__cmpsf2>
    1c42:	18 16       	cp	r1, r24
    1c44:	3c f0       	brlt	.+14     	; 0x1c54 <_ZN13HardwareTimer12findPrescaleEf+0x6e>
    1c46:	82 e0       	ldi	r24, 0x02	; 2
    1c48:	8a 87       	std	Y+10, r24	; 0x0a
    1c4a:	60 e0       	ldi	r22, 0x00	; 0
    1c4c:	70 e0       	ldi	r23, 0x00	; 0
    1c4e:	80 e0       	ldi	r24, 0x00	; 0
    1c50:	91 e4       	ldi	r25, 0x41	; 65
    1c52:	28 c0       	rjmp	.+80     	; 0x1ca4 <_ZN13HardwareTimer12findPrescaleEf+0xbe>
    1c54:	20 e0       	ldi	r18, 0x00	; 0
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	40 e8       	ldi	r20, 0x80	; 128
    1c5a:	52 e4       	ldi	r21, 0x42	; 66
    1c5c:	c7 01       	movw	r24, r14
    1c5e:	b6 01       	movw	r22, r12
    1c60:	0e 94 35 27 	call	0x4e6a	; 0x4e6a <__cmpsf2>
    1c64:	18 16       	cp	r1, r24
    1c66:	3c f0       	brlt	.+14     	; 0x1c76 <_ZN13HardwareTimer12findPrescaleEf+0x90>
    1c68:	83 e0       	ldi	r24, 0x03	; 3
    1c6a:	8a 87       	std	Y+10, r24	; 0x0a
    1c6c:	60 e0       	ldi	r22, 0x00	; 0
    1c6e:	70 e0       	ldi	r23, 0x00	; 0
    1c70:	80 e8       	ldi	r24, 0x80	; 128
    1c72:	92 e4       	ldi	r25, 0x42	; 66
    1c74:	17 c0       	rjmp	.+46     	; 0x1ca4 <_ZN13HardwareTimer12findPrescaleEf+0xbe>
    1c76:	20 e0       	ldi	r18, 0x00	; 0
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	40 e8       	ldi	r20, 0x80	; 128
    1c7c:	53 e4       	ldi	r21, 0x43	; 67
    1c7e:	c7 01       	movw	r24, r14
    1c80:	b6 01       	movw	r22, r12
    1c82:	0e 94 35 27 	call	0x4e6a	; 0x4e6a <__cmpsf2>
    1c86:	18 16       	cp	r1, r24
    1c88:	3c f0       	brlt	.+14     	; 0x1c98 <_ZN13HardwareTimer12findPrescaleEf+0xb2>
    1c8a:	84 e0       	ldi	r24, 0x04	; 4
    1c8c:	8a 87       	std	Y+10, r24	; 0x0a
    1c8e:	60 e0       	ldi	r22, 0x00	; 0
    1c90:	70 e0       	ldi	r23, 0x00	; 0
    1c92:	80 e8       	ldi	r24, 0x80	; 128
    1c94:	93 e4       	ldi	r25, 0x43	; 67
    1c96:	06 c0       	rjmp	.+12     	; 0x1ca4 <_ZN13HardwareTimer12findPrescaleEf+0xbe>
    1c98:	85 e0       	ldi	r24, 0x05	; 5
    1c9a:	8a 87       	std	Y+10, r24	; 0x0a
    1c9c:	60 e0       	ldi	r22, 0x00	; 0
    1c9e:	70 e0       	ldi	r23, 0x00	; 0
    1ca0:	80 e8       	ldi	r24, 0x80	; 128
    1ca2:	94 e4       	ldi	r25, 0x44	; 68
    1ca4:	df 91       	pop	r29
    1ca6:	cf 91       	pop	r28
    1ca8:	ff 90       	pop	r15
    1caa:	ef 90       	pop	r14
    1cac:	df 90       	pop	r13
    1cae:	cf 90       	pop	r12
    1cb0:	08 95       	ret

00001cb2 <_ZN13HardwareTimer7beginMsEf>:
    1cb2:	8f 92       	push	r8
    1cb4:	9f 92       	push	r9
    1cb6:	af 92       	push	r10
    1cb8:	bf 92       	push	r11
    1cba:	cf 92       	push	r12
    1cbc:	df 92       	push	r13
    1cbe:	ef 92       	push	r14
    1cc0:	ff 92       	push	r15
    1cc2:	cf 93       	push	r28
    1cc4:	df 93       	push	r29
    1cc6:	ec 01       	movw	r28, r24
    1cc8:	6a 01       	movw	r12, r20
    1cca:	7b 01       	movw	r14, r22
    1ccc:	e8 81       	ld	r30, Y
    1cce:	f9 81       	ldd	r31, Y+1	; 0x01
    1cd0:	82 e0       	ldi	r24, 0x02	; 2
    1cd2:	80 83       	st	Z, r24
    1cd4:	ea 81       	ldd	r30, Y+2	; 0x02
    1cd6:	fb 81       	ldd	r31, Y+3	; 0x03
    1cd8:	10 82       	st	Z, r1
    1cda:	ec 81       	ldd	r30, Y+4	; 0x04
    1cdc:	fd 81       	ldd	r31, Y+5	; 0x05
    1cde:	80 83       	st	Z, r24
    1ce0:	78 94       	sei
    1ce2:	ce 01       	movw	r24, r28
    1ce4:	80 df       	rcall	.-256    	; 0x1be6 <_ZN13HardwareTimer12findPrescaleEf>
    1ce6:	4b 01       	movw	r8, r22
    1ce8:	5c 01       	movw	r10, r24
    1cea:	20 e0       	ldi	r18, 0x00	; 0
    1cec:	34 e2       	ldi	r19, 0x24	; 36
    1cee:	44 e7       	ldi	r20, 0x74	; 116
    1cf0:	5b e4       	ldi	r21, 0x4B	; 75
    1cf2:	c7 01       	movw	r24, r14
    1cf4:	b6 01       	movw	r22, r12
    1cf6:	0e 94 83 28 	call	0x5106	; 0x5106 <__mulsf3>
    1cfa:	6b 01       	movw	r12, r22
    1cfc:	7c 01       	movw	r14, r24
    1cfe:	20 e0       	ldi	r18, 0x00	; 0
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	4a e7       	ldi	r20, 0x7A	; 122
    1d04:	54 e4       	ldi	r21, 0x44	; 68
    1d06:	c5 01       	movw	r24, r10
    1d08:	b4 01       	movw	r22, r8
    1d0a:	0e 94 83 28 	call	0x5106	; 0x5106 <__mulsf3>
    1d0e:	9b 01       	movw	r18, r22
    1d10:	ac 01       	movw	r20, r24
    1d12:	c7 01       	movw	r24, r14
    1d14:	b6 01       	movw	r22, r12
    1d16:	0e 94 39 27 	call	0x4e72	; 0x4e72 <__divsf3>
    1d1a:	20 e0       	ldi	r18, 0x00	; 0
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	40 e8       	ldi	r20, 0x80	; 128
    1d20:	5f e3       	ldi	r21, 0x3F	; 63
    1d22:	0e 94 d0 26 	call	0x4da0	; 0x4da0 <__subsf3>
    1d26:	6b 01       	movw	r12, r22
    1d28:	7c 01       	movw	r14, r24
    1d2a:	20 e0       	ldi	r18, 0x00	; 0
    1d2c:	30 e0       	ldi	r19, 0x00	; 0
    1d2e:	4f e7       	ldi	r20, 0x7F	; 127
    1d30:	53 e4       	ldi	r21, 0x43	; 67
    1d32:	0e 94 7f 28 	call	0x50fe	; 0x50fe <__gesf2>
    1d36:	18 16       	cp	r1, r24
    1d38:	2c f4       	brge	.+10     	; 0x1d44 <_ZN13HardwareTimer7beginMsEf+0x92>
    1d3a:	e8 85       	ldd	r30, Y+8	; 0x08
    1d3c:	f9 85       	ldd	r31, Y+9	; 0x09
    1d3e:	8f ef       	ldi	r24, 0xFF	; 255
    1d40:	80 83       	st	Z, r24
    1d42:	1b c0       	rjmp	.+54     	; 0x1d7a <_ZN13HardwareTimer7beginMsEf+0xc8>
    1d44:	20 e0       	ldi	r18, 0x00	; 0
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	a9 01       	movw	r20, r18
    1d4a:	c7 01       	movw	r24, r14
    1d4c:	b6 01       	movw	r22, r12
    1d4e:	0e 94 35 27 	call	0x4e6a	; 0x4e6a <__cmpsf2>
    1d52:	88 23       	and	r24, r24
    1d54:	24 f4       	brge	.+8      	; 0x1d5e <_ZN13HardwareTimer7beginMsEf+0xac>
    1d56:	e8 85       	ldd	r30, Y+8	; 0x08
    1d58:	f9 85       	ldd	r31, Y+9	; 0x09
    1d5a:	10 82       	st	Z, r1
    1d5c:	0e c0       	rjmp	.+28     	; 0x1d7a <_ZN13HardwareTimer7beginMsEf+0xc8>
    1d5e:	08 84       	ldd	r0, Y+8	; 0x08
    1d60:	d9 85       	ldd	r29, Y+9	; 0x09
    1d62:	c0 2d       	mov	r28, r0
    1d64:	20 e0       	ldi	r18, 0x00	; 0
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	40 e0       	ldi	r20, 0x00	; 0
    1d6a:	5f e3       	ldi	r21, 0x3F	; 63
    1d6c:	c7 01       	movw	r24, r14
    1d6e:	b6 01       	movw	r22, r12
    1d70:	0e 94 d1 26 	call	0x4da2	; 0x4da2 <__addsf3>
    1d74:	0e 94 a1 27 	call	0x4f42	; 0x4f42 <__fixunssfsi>
    1d78:	68 83       	st	Y, r22
    1d7a:	df 91       	pop	r29
    1d7c:	cf 91       	pop	r28
    1d7e:	ff 90       	pop	r15
    1d80:	ef 90       	pop	r14
    1d82:	df 90       	pop	r13
    1d84:	cf 90       	pop	r12
    1d86:	bf 90       	pop	r11
    1d88:	af 90       	pop	r10
    1d8a:	9f 90       	pop	r9
    1d8c:	8f 90       	pop	r8
    1d8e:	08 95       	ret

00001d90 <_ZN13HardwareTimer5startEh>:

void HardwareTimer::start(uint8_t ticks/*= 1*/){
    1d90:	fc 01       	movw	r30, r24
	*_tccrB = 0; //Disable timer
    1d92:	a2 81       	ldd	r26, Z+2	; 0x02
    1d94:	b3 81       	ldd	r27, Z+3	; 0x03
    1d96:	1c 92       	st	X, r1
	ovfRemaining = ticks;
    1d98:	63 87       	std	Z+11, r22	; 0x0b
	*_tcnt = 0; //Reset timer
    1d9a:	a6 81       	ldd	r26, Z+6	; 0x06
    1d9c:	b7 81       	ldd	r27, Z+7	; 0x07
    1d9e:	1c 92       	st	X, r1
	*_tccrB = CLK_DIV_1024; 
    1da0:	02 80       	ldd	r0, Z+2	; 0x02
    1da2:	f3 81       	ldd	r31, Z+3	; 0x03
    1da4:	e0 2d       	mov	r30, r0
    1da6:	85 e0       	ldi	r24, 0x05	; 5
    1da8:	80 83       	st	Z, r24
    1daa:	08 95       	ret

00001dac <_ZN13HardwareTimer8finishedEv>:
}

bool HardwareTimer::finished(){
	return ovfRemaining == 0;
    1dac:	fc 01       	movw	r30, r24
    1dae:	93 85       	ldd	r25, Z+11	; 0x0b
    1db0:	81 e0       	ldi	r24, 0x01	; 1
    1db2:	91 11       	cpse	r25, r1
    1db4:	80 e0       	ldi	r24, 0x00	; 0
}
    1db6:	08 95       	ret

00001db8 <_ZN13HardwareTimer13waitForFinishEv>:

void HardwareTimer::waitForFinish(){
    1db8:	fc 01       	movw	r30, r24
	while(ovfRemaining != 0){
    1dba:	93 85       	ldd	r25, Z+11	; 0x0b
    1dbc:	91 11       	cpse	r25, r1
    1dbe:	fd cf       	rjmp	.-6      	; 0x1dba <_ZN13HardwareTimer13waitForFinishEv+0x2>
	}
}
    1dc0:	08 95       	ret

00001dc2 <_ZN13HardwareTimer14isr_timer_compEv>:

void HardwareTimer::isr_timer_comp(){
    1dc2:	fc 01       	movw	r30, r24
	if(ovfRemaining > 0) ovfRemaining--;
    1dc4:	83 85       	ldd	r24, Z+11	; 0x0b
    1dc6:	88 23       	and	r24, r24
    1dc8:	19 f0       	breq	.+6      	; 0x1dd0 <_ZN13HardwareTimer14isr_timer_compEv+0xe>
    1dca:	83 85       	ldd	r24, Z+11	; 0x0b
    1dcc:	81 50       	subi	r24, 0x01	; 1
    1dce:	83 87       	std	Z+11, r24	; 0x0b
    1dd0:	08 95       	ret

00001dd2 <__vector_21>:
}

#ifdef USE_TIMER_0
HardwareTimer Timer0(TCCR0A, TCCR0B, TIMSK0, TCNT0, OCR0A);

ISR(TIMER0_COMPA_vect){
    1dd2:	1f 92       	push	r1
    1dd4:	0f 92       	push	r0
    1dd6:	0f b6       	in	r0, 0x3f	; 63
    1dd8:	0f 92       	push	r0
    1dda:	11 24       	eor	r1, r1
    1ddc:	0b b6       	in	r0, 0x3b	; 59
    1dde:	0f 92       	push	r0
    1de0:	2f 93       	push	r18
    1de2:	3f 93       	push	r19
    1de4:	4f 93       	push	r20
    1de6:	5f 93       	push	r21
    1de8:	6f 93       	push	r22
    1dea:	7f 93       	push	r23
    1dec:	8f 93       	push	r24
    1dee:	9f 93       	push	r25
    1df0:	af 93       	push	r26
    1df2:	bf 93       	push	r27
    1df4:	ef 93       	push	r30
    1df6:	ff 93       	push	r31
	Timer0.isr_timer_comp();
    1df8:	8b ed       	ldi	r24, 0xDB	; 219
    1dfa:	97 e0       	ldi	r25, 0x07	; 7
    1dfc:	e2 df       	rcall	.-60     	; 0x1dc2 <_ZN13HardwareTimer14isr_timer_compEv>
}
    1dfe:	ff 91       	pop	r31
    1e00:	ef 91       	pop	r30
    1e02:	bf 91       	pop	r27
    1e04:	af 91       	pop	r26
    1e06:	9f 91       	pop	r25
    1e08:	8f 91       	pop	r24
    1e0a:	7f 91       	pop	r23
    1e0c:	6f 91       	pop	r22
    1e0e:	5f 91       	pop	r21
    1e10:	4f 91       	pop	r20
    1e12:	3f 91       	pop	r19
    1e14:	2f 91       	pop	r18
    1e16:	0f 90       	pop	r0
    1e18:	0b be       	out	0x3b, r0	; 59
    1e1a:	0f 90       	pop	r0
    1e1c:	0f be       	out	0x3f, r0	; 63
    1e1e:	0f 90       	pop	r0
    1e20:	1f 90       	pop	r1
    1e22:	18 95       	reti

00001e24 <__vector_13>:
#endif

#ifdef USE_TIMER_2
HardwareTimer Timer2(TCCR2A, TCCR2B, TIMSK2, TCNT2, OCR2A);

ISR(TIMER2_COMPA_vect){
    1e24:	1f 92       	push	r1
    1e26:	0f 92       	push	r0
    1e28:	0f b6       	in	r0, 0x3f	; 63
    1e2a:	0f 92       	push	r0
    1e2c:	11 24       	eor	r1, r1
    1e2e:	0b b6       	in	r0, 0x3b	; 59
    1e30:	0f 92       	push	r0
    1e32:	2f 93       	push	r18
    1e34:	3f 93       	push	r19
    1e36:	4f 93       	push	r20
    1e38:	5f 93       	push	r21
    1e3a:	6f 93       	push	r22
    1e3c:	7f 93       	push	r23
    1e3e:	8f 93       	push	r24
    1e40:	9f 93       	push	r25
    1e42:	af 93       	push	r26
    1e44:	bf 93       	push	r27
    1e46:	ef 93       	push	r30
    1e48:	ff 93       	push	r31
	Timer2.isr_timer_comp();
    1e4a:	8f ec       	ldi	r24, 0xCF	; 207
    1e4c:	97 e0       	ldi	r25, 0x07	; 7
    1e4e:	b9 df       	rcall	.-142    	; 0x1dc2 <_ZN13HardwareTimer14isr_timer_compEv>
}
    1e50:	ff 91       	pop	r31
    1e52:	ef 91       	pop	r30
    1e54:	bf 91       	pop	r27
    1e56:	af 91       	pop	r26
    1e58:	9f 91       	pop	r25
    1e5a:	8f 91       	pop	r24
    1e5c:	7f 91       	pop	r23
    1e5e:	6f 91       	pop	r22
    1e60:	5f 91       	pop	r21
    1e62:	4f 91       	pop	r20
    1e64:	3f 91       	pop	r19
    1e66:	2f 91       	pop	r18
    1e68:	0f 90       	pop	r0
    1e6a:	0b be       	out	0x3b, r0	; 59
    1e6c:	0f 90       	pop	r0
    1e6e:	0f be       	out	0x3f, r0	; 63
    1e70:	0f 90       	pop	r0
    1e72:	1f 90       	pop	r1
    1e74:	18 95       	reti

00001e76 <_GLOBAL__sub_I__ZN13HardwareTimerC2ERVhS1_S1_S1_S1_>:
#define CLK_DIV_64 (_BV(CS01) | _BV(CS00))
#define CLK_DIV_256 (_BV(CS02))
#define CLK_DIV_1024 (_BV(CS02) | _BV(CS00))

HardwareTimer::HardwareTimer(Register &tccrA, Register &tccrB, Register &timsk, Register &tcnt, Register &ocra)
: _tccrA(&tccrA), _tccrB(&tccrB), _timsk(&timsk), _tcnt(&tcnt), _ocra(&ocra)
    1e76:	eb ed       	ldi	r30, 0xDB	; 219
    1e78:	f7 e0       	ldi	r31, 0x07	; 7
    1e7a:	84 e4       	ldi	r24, 0x44	; 68
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	91 83       	std	Z+1, r25	; 0x01
    1e80:	80 83       	st	Z, r24
    1e82:	85 e4       	ldi	r24, 0x45	; 69
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	93 83       	std	Z+3, r25	; 0x03
    1e88:	82 83       	std	Z+2, r24	; 0x02
    1e8a:	8e e6       	ldi	r24, 0x6E	; 110
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	95 83       	std	Z+5, r25	; 0x05
    1e90:	84 83       	std	Z+4, r24	; 0x04
    1e92:	86 e4       	ldi	r24, 0x46	; 70
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	97 83       	std	Z+7, r25	; 0x07
    1e98:	86 83       	std	Z+6, r24	; 0x06
    1e9a:	87 e4       	ldi	r24, 0x47	; 71
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	91 87       	std	Z+9, r25	; 0x09
    1ea0:	80 87       	std	Z+8, r24	; 0x08
    1ea2:	ef ec       	ldi	r30, 0xCF	; 207
    1ea4:	f7 e0       	ldi	r31, 0x07	; 7
    1ea6:	80 eb       	ldi	r24, 0xB0	; 176
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	91 83       	std	Z+1, r25	; 0x01
    1eac:	80 83       	st	Z, r24
    1eae:	81 eb       	ldi	r24, 0xB1	; 177
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	93 83       	std	Z+3, r25	; 0x03
    1eb4:	82 83       	std	Z+2, r24	; 0x02
    1eb6:	80 e7       	ldi	r24, 0x70	; 112
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	95 83       	std	Z+5, r25	; 0x05
    1ebc:	84 83       	std	Z+4, r24	; 0x04
    1ebe:	82 eb       	ldi	r24, 0xB2	; 178
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	97 83       	std	Z+7, r25	; 0x07
    1ec4:	86 83       	std	Z+6, r24	; 0x06
    1ec6:	83 eb       	ldi	r24, 0xB3	; 179
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	91 87       	std	Z+9, r25	; 0x09
    1ecc:	80 87       	std	Z+8, r24	; 0x08
    1ece:	08 95       	ret

00001ed0 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1ed0:	10 92 54 08 	sts	0x0854, r1	; 0x800854 <twi_state>
    1ed4:	81 e0       	ldi	r24, 0x01	; 1
    1ed6:	80 93 52 08 	sts	0x0852, r24	; 0x800852 <twi_sendStop>
    1eda:	10 92 51 08 	sts	0x0851, r1	; 0x800851 <twi_inRepStart>
    1ede:	8b b1       	in	r24, 0x0b	; 11
    1ee0:	83 60       	ori	r24, 0x03	; 3
    1ee2:	8b b9       	out	0x0b, r24	; 11
    1ee4:	e9 eb       	ldi	r30, 0xB9	; 185
    1ee6:	f0 e0       	ldi	r31, 0x00	; 0
    1ee8:	80 81       	ld	r24, Z
    1eea:	8e 7f       	andi	r24, 0xFE	; 254
    1eec:	80 83       	st	Z, r24
    1eee:	80 81       	ld	r24, Z
    1ef0:	8d 7f       	andi	r24, 0xFD	; 253
    1ef2:	80 83       	st	Z, r24
    1ef4:	88 e4       	ldi	r24, 0x48	; 72
    1ef6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    1efa:	85 e4       	ldi	r24, 0x45	; 69
    1efc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1f00:	08 95       	ret

00001f02 <twi_setFrequency>:
    1f02:	9b 01       	movw	r18, r22
    1f04:	ac 01       	movw	r20, r24
    1f06:	60 e0       	ldi	r22, 0x00	; 0
    1f08:	74 e2       	ldi	r23, 0x24	; 36
    1f0a:	84 ef       	ldi	r24, 0xF4	; 244
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	0e 94 f5 28 	call	0x51ea	; 0x51ea <__udivmodsi4>
    1f12:	da 01       	movw	r26, r20
    1f14:	c9 01       	movw	r24, r18
    1f16:	40 97       	sbiw	r24, 0x10	; 16
    1f18:	a1 09       	sbc	r26, r1
    1f1a:	b1 09       	sbc	r27, r1
    1f1c:	b6 95       	lsr	r27
    1f1e:	a7 95       	ror	r26
    1f20:	97 95       	ror	r25
    1f22:	87 95       	ror	r24
    1f24:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    1f28:	08 95       	ret

00001f2a <twi_readFrom>:
    1f2a:	41 32       	cpi	r20, 0x21	; 33
    1f2c:	08 f0       	brcs	.+2      	; 0x1f30 <twi_readFrom+0x6>
    1f2e:	4c c0       	rjmp	.+152    	; 0x1fc8 <twi_readFrom+0x9e>
    1f30:	90 91 54 08 	lds	r25, 0x0854	; 0x800854 <twi_state>
    1f34:	91 11       	cpse	r25, r1
    1f36:	fc cf       	rjmp	.-8      	; 0x1f30 <twi_readFrom+0x6>
    1f38:	31 e0       	ldi	r19, 0x01	; 1
    1f3a:	30 93 54 08 	sts	0x0854, r19	; 0x800854 <twi_state>
    1f3e:	20 93 52 08 	sts	0x0852, r18	; 0x800852 <twi_sendStop>
    1f42:	2f ef       	ldi	r18, 0xFF	; 255
    1f44:	20 93 e7 07 	sts	0x07E7, r18	; 0x8007e7 <twi_error>
    1f48:	10 92 2c 08 	sts	0x082C, r1	; 0x80082c <twi_masterBufferIndex>
    1f4c:	24 0f       	add	r18, r20
    1f4e:	20 93 2b 08 	sts	0x082B, r18	; 0x80082b <twi_masterBufferLength>
    1f52:	30 93 53 08 	sts	0x0853, r19	; 0x800853 <twi_slarw>
    1f56:	20 91 53 08 	lds	r18, 0x0853	; 0x800853 <twi_slarw>
    1f5a:	88 0f       	add	r24, r24
    1f5c:	82 2b       	or	r24, r18
    1f5e:	80 93 53 08 	sts	0x0853, r24	; 0x800853 <twi_slarw>
    1f62:	80 91 51 08 	lds	r24, 0x0851	; 0x800851 <twi_inRepStart>
    1f66:	81 30       	cpi	r24, 0x01	; 1
    1f68:	81 f4       	brne	.+32     	; 0x1f8a <twi_readFrom+0x60>
    1f6a:	10 92 51 08 	sts	0x0851, r1	; 0x800851 <twi_inRepStart>
    1f6e:	ab eb       	ldi	r26, 0xBB	; 187
    1f70:	b0 e0       	ldi	r27, 0x00	; 0
    1f72:	ec eb       	ldi	r30, 0xBC	; 188
    1f74:	f0 e0       	ldi	r31, 0x00	; 0
    1f76:	80 91 53 08 	lds	r24, 0x0853	; 0x800853 <twi_slarw>
    1f7a:	8c 93       	st	X, r24
    1f7c:	80 81       	ld	r24, Z
    1f7e:	83 fd       	sbrc	r24, 3
    1f80:	fa cf       	rjmp	.-12     	; 0x1f76 <twi_readFrom+0x4c>
    1f82:	85 ec       	ldi	r24, 0xC5	; 197
    1f84:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1f88:	03 c0       	rjmp	.+6      	; 0x1f90 <twi_readFrom+0x66>
    1f8a:	85 ee       	ldi	r24, 0xE5	; 229
    1f8c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1f90:	80 91 54 08 	lds	r24, 0x0854	; 0x800854 <twi_state>
    1f94:	81 30       	cpi	r24, 0x01	; 1
    1f96:	e1 f3       	breq	.-8      	; 0x1f90 <twi_readFrom+0x66>
    1f98:	80 91 2c 08 	lds	r24, 0x082C	; 0x80082c <twi_masterBufferIndex>
    1f9c:	84 17       	cp	r24, r20
    1f9e:	10 f4       	brcc	.+4      	; 0x1fa4 <twi_readFrom+0x7a>
    1fa0:	40 91 2c 08 	lds	r20, 0x082C	; 0x80082c <twi_masterBufferIndex>
    1fa4:	44 23       	and	r20, r20
    1fa6:	89 f0       	breq	.+34     	; 0x1fca <twi_readFrom+0xa0>
    1fa8:	ed e2       	ldi	r30, 0x2D	; 45
    1faa:	f8 e0       	ldi	r31, 0x08	; 8
    1fac:	a6 2f       	mov	r26, r22
    1fae:	b7 2f       	mov	r27, r23
    1fb0:	2f ef       	ldi	r18, 0xFF	; 255
    1fb2:	24 0f       	add	r18, r20
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	22 5d       	subi	r18, 0xD2	; 210
    1fb8:	37 4f       	sbci	r19, 0xF7	; 247
    1fba:	81 91       	ld	r24, Z+
    1fbc:	8d 93       	st	X+, r24
    1fbe:	e2 17       	cp	r30, r18
    1fc0:	f3 07       	cpc	r31, r19
    1fc2:	d9 f7       	brne	.-10     	; 0x1fba <twi_readFrom+0x90>
    1fc4:	94 2f       	mov	r25, r20
    1fc6:	01 c0       	rjmp	.+2      	; 0x1fca <twi_readFrom+0xa0>
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	89 2f       	mov	r24, r25
    1fcc:	08 95       	ret

00001fce <twi_writeTo>:
    1fce:	0f 93       	push	r16
    1fd0:	41 32       	cpi	r20, 0x21	; 33
    1fd2:	08 f0       	brcs	.+2      	; 0x1fd6 <twi_writeTo+0x8>
    1fd4:	57 c0       	rjmp	.+174    	; 0x2084 <twi_writeTo+0xb6>
    1fd6:	30 91 54 08 	lds	r19, 0x0854	; 0x800854 <twi_state>
    1fda:	31 11       	cpse	r19, r1
    1fdc:	fc cf       	rjmp	.-8      	; 0x1fd6 <twi_writeTo+0x8>
    1fde:	92 e0       	ldi	r25, 0x02	; 2
    1fe0:	90 93 54 08 	sts	0x0854, r25	; 0x800854 <twi_state>
    1fe4:	00 93 52 08 	sts	0x0852, r16	; 0x800852 <twi_sendStop>
    1fe8:	9f ef       	ldi	r25, 0xFF	; 255
    1fea:	90 93 e7 07 	sts	0x07E7, r25	; 0x8007e7 <twi_error>
    1fee:	10 92 2c 08 	sts	0x082C, r1	; 0x80082c <twi_masterBufferIndex>
    1ff2:	40 93 2b 08 	sts	0x082B, r20	; 0x80082b <twi_masterBufferLength>
    1ff6:	44 23       	and	r20, r20
    1ff8:	71 f0       	breq	.+28     	; 0x2016 <twi_writeTo+0x48>
    1ffa:	fb 01       	movw	r30, r22
    1ffc:	ad e2       	ldi	r26, 0x2D	; 45
    1ffe:	b8 e0       	ldi	r27, 0x08	; 8
    2000:	41 50       	subi	r20, 0x01	; 1
    2002:	50 e0       	ldi	r21, 0x00	; 0
    2004:	4f 5f       	subi	r20, 0xFF	; 255
    2006:	5f 4f       	sbci	r21, 0xFF	; 255
    2008:	64 0f       	add	r22, r20
    200a:	75 1f       	adc	r23, r21
    200c:	91 91       	ld	r25, Z+
    200e:	9d 93       	st	X+, r25
    2010:	e6 17       	cp	r30, r22
    2012:	f7 07       	cpc	r31, r23
    2014:	d9 f7       	brne	.-10     	; 0x200c <twi_writeTo+0x3e>
    2016:	10 92 53 08 	sts	0x0853, r1	; 0x800853 <twi_slarw>
    201a:	90 91 53 08 	lds	r25, 0x0853	; 0x800853 <twi_slarw>
    201e:	88 0f       	add	r24, r24
    2020:	89 2b       	or	r24, r25
    2022:	80 93 53 08 	sts	0x0853, r24	; 0x800853 <twi_slarw>
    2026:	80 91 51 08 	lds	r24, 0x0851	; 0x800851 <twi_inRepStart>
    202a:	81 30       	cpi	r24, 0x01	; 1
    202c:	81 f4       	brne	.+32     	; 0x204e <twi_writeTo+0x80>
    202e:	10 92 51 08 	sts	0x0851, r1	; 0x800851 <twi_inRepStart>
    2032:	ab eb       	ldi	r26, 0xBB	; 187
    2034:	b0 e0       	ldi	r27, 0x00	; 0
    2036:	ec eb       	ldi	r30, 0xBC	; 188
    2038:	f0 e0       	ldi	r31, 0x00	; 0
    203a:	80 91 53 08 	lds	r24, 0x0853	; 0x800853 <twi_slarw>
    203e:	8c 93       	st	X, r24
    2040:	80 81       	ld	r24, Z
    2042:	83 fd       	sbrc	r24, 3
    2044:	fa cf       	rjmp	.-12     	; 0x203a <twi_writeTo+0x6c>
    2046:	85 ec       	ldi	r24, 0xC5	; 197
    2048:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    204c:	03 c0       	rjmp	.+6      	; 0x2054 <twi_writeTo+0x86>
    204e:	85 ee       	ldi	r24, 0xE5	; 229
    2050:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2054:	22 23       	and	r18, r18
    2056:	41 f0       	breq	.+16     	; 0x2068 <twi_writeTo+0x9a>
    2058:	80 91 54 08 	lds	r24, 0x0854	; 0x800854 <twi_state>
    205c:	82 30       	cpi	r24, 0x02	; 2
    205e:	21 f4       	brne	.+8      	; 0x2068 <twi_writeTo+0x9a>
    2060:	80 91 54 08 	lds	r24, 0x0854	; 0x800854 <twi_state>
    2064:	82 30       	cpi	r24, 0x02	; 2
    2066:	e1 f3       	breq	.-8      	; 0x2060 <twi_writeTo+0x92>
    2068:	80 91 e7 07 	lds	r24, 0x07E7	; 0x8007e7 <twi_error>
    206c:	8f 3f       	cpi	r24, 0xFF	; 255
    206e:	79 f0       	breq	.+30     	; 0x208e <twi_writeTo+0xc0>
    2070:	80 91 e7 07 	lds	r24, 0x07E7	; 0x8007e7 <twi_error>
    2074:	80 32       	cpi	r24, 0x20	; 32
    2076:	41 f0       	breq	.+16     	; 0x2088 <twi_writeTo+0xba>
    2078:	80 91 e7 07 	lds	r24, 0x07E7	; 0x8007e7 <twi_error>
    207c:	80 33       	cpi	r24, 0x30	; 48
    207e:	31 f0       	breq	.+12     	; 0x208c <twi_writeTo+0xbe>
    2080:	34 e0       	ldi	r19, 0x04	; 4
    2082:	05 c0       	rjmp	.+10     	; 0x208e <twi_writeTo+0xc0>
    2084:	31 e0       	ldi	r19, 0x01	; 1
    2086:	03 c0       	rjmp	.+6      	; 0x208e <twi_writeTo+0xc0>
    2088:	32 e0       	ldi	r19, 0x02	; 2
    208a:	01 c0       	rjmp	.+2      	; 0x208e <twi_writeTo+0xc0>
    208c:	33 e0       	ldi	r19, 0x03	; 3
    208e:	83 2f       	mov	r24, r19
    2090:	0f 91       	pop	r16
    2092:	08 95       	ret

00002094 <twi_transmit>:
    2094:	40 91 09 08 	lds	r20, 0x0809	; 0x800809 <twi_txBufferLength>
    2098:	26 2f       	mov	r18, r22
    209a:	30 e0       	ldi	r19, 0x00	; 0
    209c:	24 0f       	add	r18, r20
    209e:	31 1d       	adc	r19, r1
    20a0:	21 32       	cpi	r18, 0x21	; 33
    20a2:	31 05       	cpc	r19, r1
    20a4:	ec f4       	brge	.+58     	; 0x20e0 <twi_transmit+0x4c>
    20a6:	20 91 54 08 	lds	r18, 0x0854	; 0x800854 <twi_state>
    20aa:	24 30       	cpi	r18, 0x04	; 4
    20ac:	d9 f4       	brne	.+54     	; 0x20e4 <twi_transmit+0x50>
    20ae:	66 23       	and	r22, r22
    20b0:	81 f0       	breq	.+32     	; 0x20d2 <twi_transmit+0x3e>
    20b2:	a8 2f       	mov	r26, r24
    20b4:	b9 2f       	mov	r27, r25
    20b6:	80 e0       	ldi	r24, 0x00	; 0
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	30 91 09 08 	lds	r19, 0x0809	; 0x800809 <twi_txBufferLength>
    20be:	2d 91       	ld	r18, X+
    20c0:	fc 01       	movw	r30, r24
    20c2:	e5 5f       	subi	r30, 0xF5	; 245
    20c4:	f7 4f       	sbci	r31, 0xF7	; 247
    20c6:	e3 0f       	add	r30, r19
    20c8:	f1 1d       	adc	r31, r1
    20ca:	20 83       	st	Z, r18
    20cc:	01 96       	adiw	r24, 0x01	; 1
    20ce:	86 17       	cp	r24, r22
    20d0:	a0 f3       	brcs	.-24     	; 0x20ba <twi_transmit+0x26>
    20d2:	80 91 09 08 	lds	r24, 0x0809	; 0x800809 <twi_txBufferLength>
    20d6:	68 0f       	add	r22, r24
    20d8:	60 93 09 08 	sts	0x0809, r22	; 0x800809 <twi_txBufferLength>
    20dc:	80 e0       	ldi	r24, 0x00	; 0
    20de:	08 95       	ret
    20e0:	81 e0       	ldi	r24, 0x01	; 1
    20e2:	08 95       	ret
    20e4:	82 e0       	ldi	r24, 0x02	; 2
    20e6:	08 95       	ret

000020e8 <twi_attachSlaveRxEvent>:
    20e8:	90 93 4e 08 	sts	0x084E, r25	; 0x80084e <twi_onSlaveReceive+0x1>
    20ec:	80 93 4d 08 	sts	0x084D, r24	; 0x80084d <twi_onSlaveReceive>
    20f0:	08 95       	ret

000020f2 <twi_attachSlaveTxEvent>:
    20f2:	90 93 50 08 	sts	0x0850, r25	; 0x800850 <twi_onSlaveTransmit+0x1>
    20f6:	80 93 4f 08 	sts	0x084F, r24	; 0x80084f <twi_onSlaveTransmit>
    20fa:	08 95       	ret

000020fc <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    20fc:	85 ed       	ldi	r24, 0xD5	; 213
    20fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    2102:	ec eb       	ldi	r30, 0xBC	; 188
    2104:	f0 e0       	ldi	r31, 0x00	; 0
    2106:	80 81       	ld	r24, Z
    2108:	84 fd       	sbrc	r24, 4
    210a:	fd cf       	rjmp	.-6      	; 0x2106 <twi_stop+0xa>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    210c:	10 92 54 08 	sts	0x0854, r1	; 0x800854 <twi_state>
    2110:	08 95       	ret

00002112 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    2112:	85 ec       	ldi	r24, 0xC5	; 197
    2114:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // update twi state
  twi_state = TWI_READY;
    2118:	10 92 54 08 	sts	0x0854, r1	; 0x800854 <twi_state>
    211c:	08 95       	ret

0000211e <__vector_39>:
}

ISR(TWI_vect)
{
    211e:	1f 92       	push	r1
    2120:	0f 92       	push	r0
    2122:	0f b6       	in	r0, 0x3f	; 63
    2124:	0f 92       	push	r0
    2126:	11 24       	eor	r1, r1
    2128:	0b b6       	in	r0, 0x3b	; 59
    212a:	0f 92       	push	r0
    212c:	2f 93       	push	r18
    212e:	3f 93       	push	r19
    2130:	4f 93       	push	r20
    2132:	5f 93       	push	r21
    2134:	6f 93       	push	r22
    2136:	7f 93       	push	r23
    2138:	8f 93       	push	r24
    213a:	9f 93       	push	r25
    213c:	af 93       	push	r26
    213e:	bf 93       	push	r27
    2140:	ef 93       	push	r30
    2142:	ff 93       	push	r31
  switch(TW_STATUS){
    2144:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    2148:	88 7f       	andi	r24, 0xF8	; 248
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	89 3c       	cpi	r24, 0xC9	; 201
    214e:	91 05       	cpc	r25, r1
    2150:	08 f0       	brcs	.+2      	; 0x2154 <__vector_39+0x36>
    2152:	ef c0       	rjmp	.+478    	; 0x2332 <__stack+0x133>
    2154:	fc 01       	movw	r30, r24
    2156:	88 27       	eor	r24, r24
    2158:	ee 58       	subi	r30, 0x8E	; 142
    215a:	ff 4f       	sbci	r31, 0xFF	; 255
    215c:	8f 4f       	sbci	r24, 0xFF	; 255
    215e:	0c 94 17 29 	jmp	0x522e	; 0x522e <__tablejump2__>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    2162:	80 91 53 08 	lds	r24, 0x0853	; 0x800853 <twi_slarw>
    2166:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    216a:	85 ec       	ldi	r24, 0xC5	; 197
    216c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2170:	e0 c0       	rjmp	.+448    	; 0x2332 <__stack+0x133>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2172:	90 91 2c 08 	lds	r25, 0x082C	; 0x80082c <twi_masterBufferIndex>
    2176:	80 91 2b 08 	lds	r24, 0x082B	; 0x80082b <twi_masterBufferLength>
    217a:	98 17       	cp	r25, r24
    217c:	80 f4       	brcc	.+32     	; 0x219e <__vector_39+0x80>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    217e:	e0 91 2c 08 	lds	r30, 0x082C	; 0x80082c <twi_masterBufferIndex>
    2182:	81 e0       	ldi	r24, 0x01	; 1
    2184:	8e 0f       	add	r24, r30
    2186:	80 93 2c 08 	sts	0x082C, r24	; 0x80082c <twi_masterBufferIndex>
    218a:	f0 e0       	ldi	r31, 0x00	; 0
    218c:	e3 5d       	subi	r30, 0xD3	; 211
    218e:	f7 4f       	sbci	r31, 0xF7	; 247
    2190:	80 81       	ld	r24, Z
    2192:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2196:	85 ec       	ldi	r24, 0xC5	; 197
    2198:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    219c:	ca c0       	rjmp	.+404    	; 0x2332 <__stack+0x133>
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
        twi_reply(1);
      }else{
	if (twi_sendStop)
    219e:	80 91 52 08 	lds	r24, 0x0852	; 0x800852 <twi_sendStop>
    21a2:	88 23       	and	r24, r24
    21a4:	11 f0       	breq	.+4      	; 0x21aa <__vector_39+0x8c>
          twi_stop();
    21a6:	aa df       	rcall	.-172    	; 0x20fc <twi_stop>
    21a8:	c4 c0       	rjmp	.+392    	; 0x2332 <__stack+0x133>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    21aa:	81 e0       	ldi	r24, 0x01	; 1
    21ac:	80 93 51 08 	sts	0x0851, r24	; 0x800851 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    21b0:	84 ea       	ldi	r24, 0xA4	; 164
    21b2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	  twi_state = TWI_READY;
    21b6:	10 92 54 08 	sts	0x0854, r1	; 0x800854 <twi_state>
    21ba:	bb c0       	rjmp	.+374    	; 0x2332 <__stack+0x133>
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    21bc:	80 e2       	ldi	r24, 0x20	; 32
    21be:	80 93 e7 07 	sts	0x07E7, r24	; 0x8007e7 <twi_error>
      twi_stop();
    21c2:	9c df       	rcall	.-200    	; 0x20fc <twi_stop>
      break;
    21c4:	b6 c0       	rjmp	.+364    	; 0x2332 <__stack+0x133>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    21c6:	80 e3       	ldi	r24, 0x30	; 48
    21c8:	80 93 e7 07 	sts	0x07E7, r24	; 0x8007e7 <twi_error>
      twi_stop();
    21cc:	97 df       	rcall	.-210    	; 0x20fc <twi_stop>
      break;
    21ce:	b1 c0       	rjmp	.+354    	; 0x2332 <__stack+0x133>
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    21d0:	88 e3       	ldi	r24, 0x38	; 56
    21d2:	80 93 e7 07 	sts	0x07E7, r24	; 0x8007e7 <twi_error>
      twi_releaseBus();
    21d6:	9d df       	rcall	.-198    	; 0x2112 <twi_releaseBus>
      break;
    21d8:	ac c0       	rjmp	.+344    	; 0x2332 <__stack+0x133>

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    21da:	e0 91 2c 08 	lds	r30, 0x082C	; 0x80082c <twi_masterBufferIndex>
    21de:	81 e0       	ldi	r24, 0x01	; 1
    21e0:	8e 0f       	add	r24, r30
    21e2:	80 93 2c 08 	sts	0x082C, r24	; 0x80082c <twi_masterBufferIndex>
    21e6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    21ea:	f0 e0       	ldi	r31, 0x00	; 0
    21ec:	e3 5d       	subi	r30, 0xD3	; 211
    21ee:	f7 4f       	sbci	r31, 0xF7	; 247
    21f0:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    21f2:	90 91 2c 08 	lds	r25, 0x082C	; 0x80082c <twi_masterBufferIndex>
    21f6:	80 91 2b 08 	lds	r24, 0x082B	; 0x80082b <twi_masterBufferLength>
    21fa:	98 17       	cp	r25, r24
    21fc:	20 f4       	brcc	.+8      	; 0x2206 <__stack+0x7>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    21fe:	85 ec       	ldi	r24, 0xC5	; 197
    2200:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2204:	96 c0       	rjmp	.+300    	; 0x2332 <__stack+0x133>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2206:	85 e8       	ldi	r24, 0x85	; 133
    2208:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    220c:	92 c0       	rjmp	.+292    	; 0x2332 <__stack+0x133>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    220e:	e0 91 2c 08 	lds	r30, 0x082C	; 0x80082c <twi_masterBufferIndex>
    2212:	81 e0       	ldi	r24, 0x01	; 1
    2214:	8e 0f       	add	r24, r30
    2216:	80 93 2c 08 	sts	0x082C, r24	; 0x80082c <twi_masterBufferIndex>
    221a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    221e:	f0 e0       	ldi	r31, 0x00	; 0
    2220:	e3 5d       	subi	r30, 0xD3	; 211
    2222:	f7 4f       	sbci	r31, 0xF7	; 247
    2224:	80 83       	st	Z, r24
	if (twi_sendStop)
    2226:	80 91 52 08 	lds	r24, 0x0852	; 0x800852 <twi_sendStop>
    222a:	88 23       	and	r24, r24
          twi_stop();
    222c:	11 f0       	breq	.+4      	; 0x2232 <__stack+0x33>
    222e:	66 df       	rcall	.-308    	; 0x20fc <twi_stop>
    2230:	80 c0       	rjmp	.+256    	; 0x2332 <__stack+0x133>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    2232:	81 e0       	ldi	r24, 0x01	; 1
    2234:	80 93 51 08 	sts	0x0851, r24	; 0x800851 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2238:	84 ea       	ldi	r24, 0xA4	; 164
    223a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	  twi_state = TWI_READY;
    223e:	10 92 54 08 	sts	0x0854, r1	; 0x800854 <twi_state>
	}    
	break;
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
    2242:	77 c0       	rjmp	.+238    	; 0x2332 <__stack+0x133>
    2244:	5b df       	rcall	.-330    	; 0x20fc <twi_stop>
      break;
    2246:	75 c0       	rjmp	.+234    	; 0x2332 <__stack+0x133>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    2248:	83 e0       	ldi	r24, 0x03	; 3
    224a:	80 93 54 08 	sts	0x0854, r24	; 0x800854 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    224e:	10 92 e8 07 	sts	0x07E8, r1	; 0x8007e8 <twi_rxBufferIndex>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2252:	85 ec       	ldi	r24, 0xC5	; 197
    2254:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2258:	6c c0       	rjmp	.+216    	; 0x2332 <__stack+0x133>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    225a:	80 91 e8 07 	lds	r24, 0x07E8	; 0x8007e8 <twi_rxBufferIndex>
    225e:	80 32       	cpi	r24, 0x20	; 32
    2260:	80 f4       	brcc	.+32     	; 0x2282 <__stack+0x83>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    2262:	e0 91 e8 07 	lds	r30, 0x07E8	; 0x8007e8 <twi_rxBufferIndex>
    2266:	81 e0       	ldi	r24, 0x01	; 1
    2268:	8e 0f       	add	r24, r30
    226a:	80 93 e8 07 	sts	0x07E8, r24	; 0x8007e8 <twi_rxBufferIndex>
    226e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2272:	f0 e0       	ldi	r31, 0x00	; 0
    2274:	e7 51       	subi	r30, 0x17	; 23
    2276:	f8 4f       	sbci	r31, 0xF8	; 248
    2278:	80 83       	st	Z, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    227a:	85 ec       	ldi	r24, 0xC5	; 197
    227c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2280:	58 c0       	rjmp	.+176    	; 0x2332 <__stack+0x133>
    2282:	85 e8       	ldi	r24, 0x85	; 133
    2284:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    2288:	54 c0       	rjmp	.+168    	; 0x2332 <__stack+0x133>
    228a:	43 df       	rcall	.-378    	; 0x2112 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    228c:	80 91 e8 07 	lds	r24, 0x07E8	; 0x8007e8 <twi_rxBufferIndex>
    2290:	80 32       	cpi	r24, 0x20	; 32
    2292:	30 f4       	brcc	.+12     	; 0x22a0 <__stack+0xa1>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    2294:	e0 91 e8 07 	lds	r30, 0x07E8	; 0x8007e8 <twi_rxBufferIndex>
    2298:	f0 e0       	ldi	r31, 0x00	; 0
    229a:	e7 51       	subi	r30, 0x17	; 23
    229c:	f8 4f       	sbci	r31, 0xF8	; 248
    229e:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    22a0:	60 91 e8 07 	lds	r22, 0x07E8	; 0x8007e8 <twi_rxBufferIndex>
    22a4:	70 e0       	ldi	r23, 0x00	; 0
    22a6:	e0 91 4d 08 	lds	r30, 0x084D	; 0x80084d <twi_onSlaveReceive>
    22aa:	f0 91 4e 08 	lds	r31, 0x084E	; 0x80084e <twi_onSlaveReceive+0x1>
    22ae:	89 ee       	ldi	r24, 0xE9	; 233
    22b0:	97 e0       	ldi	r25, 0x07	; 7
    22b2:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    22b4:	10 92 e8 07 	sts	0x07E8, r1	; 0x8007e8 <twi_rxBufferIndex>
      break;
    22b8:	3c c0       	rjmp	.+120    	; 0x2332 <__stack+0x133>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    22ba:	85 e8       	ldi	r24, 0x85	; 133
    22bc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    22c0:	38 c0       	rjmp	.+112    	; 0x2332 <__stack+0x133>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    22c2:	84 e0       	ldi	r24, 0x04	; 4
    22c4:	80 93 54 08 	sts	0x0854, r24	; 0x800854 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    22c8:	10 92 0a 08 	sts	0x080A, r1	; 0x80080a <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    22cc:	10 92 09 08 	sts	0x0809, r1	; 0x800809 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    22d0:	e0 91 4f 08 	lds	r30, 0x084F	; 0x80084f <twi_onSlaveTransmit>
    22d4:	f0 91 50 08 	lds	r31, 0x0850	; 0x800850 <twi_onSlaveTransmit+0x1>
    22d8:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    22da:	80 91 09 08 	lds	r24, 0x0809	; 0x800809 <twi_txBufferLength>
    22de:	81 11       	cpse	r24, r1
    22e0:	05 c0       	rjmp	.+10     	; 0x22ec <__stack+0xed>
        twi_txBufferLength = 1;
    22e2:	81 e0       	ldi	r24, 0x01	; 1
    22e4:	80 93 09 08 	sts	0x0809, r24	; 0x800809 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    22e8:	10 92 0b 08 	sts	0x080B, r1	; 0x80080b <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    22ec:	e0 91 0a 08 	lds	r30, 0x080A	; 0x80080a <twi_txBufferIndex>
    22f0:	81 e0       	ldi	r24, 0x01	; 1
    22f2:	8e 0f       	add	r24, r30
    22f4:	80 93 0a 08 	sts	0x080A, r24	; 0x80080a <twi_txBufferIndex>
    22f8:	f0 e0       	ldi	r31, 0x00	; 0
    22fa:	e5 5f       	subi	r30, 0xF5	; 245
    22fc:	f7 4f       	sbci	r31, 0xF7	; 247
    22fe:	80 81       	ld	r24, Z
    2300:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2304:	90 91 0a 08 	lds	r25, 0x080A	; 0x80080a <twi_txBufferIndex>
    2308:	80 91 09 08 	lds	r24, 0x0809	; 0x800809 <twi_txBufferLength>
    230c:	98 17       	cp	r25, r24
    230e:	20 f4       	brcc	.+8      	; 0x2318 <__stack+0x119>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2310:	85 ec       	ldi	r24, 0xC5	; 197
    2312:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2316:	0d c0       	rjmp	.+26     	; 0x2332 <__stack+0x133>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2318:	85 e8       	ldi	r24, 0x85	; 133
    231a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    231e:	09 c0       	rjmp	.+18     	; 0x2332 <__stack+0x133>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2320:	85 ec       	ldi	r24, 0xC5	; 197
    2322:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    2326:	10 92 54 08 	sts	0x0854, r1	; 0x800854 <twi_state>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    232a:	03 c0       	rjmp	.+6      	; 0x2332 <__stack+0x133>
    232c:	10 92 e7 07 	sts	0x07E7, r1	; 0x8007e7 <twi_error>
      twi_stop();
    2330:	e5 de       	rcall	.-566    	; 0x20fc <twi_stop>
      break;
  }
    2332:	ff 91       	pop	r31
    2334:	ef 91       	pop	r30
    2336:	bf 91       	pop	r27
    2338:	af 91       	pop	r26
    233a:	9f 91       	pop	r25
    233c:	8f 91       	pop	r24
    233e:	7f 91       	pop	r23
    2340:	6f 91       	pop	r22
    2342:	5f 91       	pop	r21
    2344:	4f 91       	pop	r20
    2346:	3f 91       	pop	r19
    2348:	2f 91       	pop	r18
    234a:	0f 90       	pop	r0
    234c:	0b be       	out	0x3b, r0	; 59
    234e:	0f 90       	pop	r0
    2350:	0f be       	out	0x3f, r0	; 63
    2352:	0f 90       	pop	r0
    2354:	1f 90       	pop	r1
    2356:	18 95       	reti

00002358 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
	user_onRequest = function;
    2358:	80 91 7f 08 	lds	r24, 0x087F	; 0x80087f <_ZN7TwoWire14rxBufferLengthE>
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	20 91 80 08 	lds	r18, 0x0880	; 0x800880 <_ZN7TwoWire13rxBufferIndexE>
    2362:	82 1b       	sub	r24, r18
    2364:	91 09       	sbc	r25, r1
    2366:	08 95       	ret

00002368 <_ZN7TwoWire4readEv>:
    2368:	90 91 80 08 	lds	r25, 0x0880	; 0x800880 <_ZN7TwoWire13rxBufferIndexE>
    236c:	80 91 7f 08 	lds	r24, 0x087F	; 0x80087f <_ZN7TwoWire14rxBufferLengthE>
    2370:	98 17       	cp	r25, r24
    2372:	50 f4       	brcc	.+20     	; 0x2388 <_ZN7TwoWire4readEv+0x20>
    2374:	e9 2f       	mov	r30, r25
    2376:	f0 e0       	ldi	r31, 0x00	; 0
    2378:	ef 57       	subi	r30, 0x7F	; 127
    237a:	f7 4f       	sbci	r31, 0xF7	; 247
    237c:	20 81       	ld	r18, Z
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	9f 5f       	subi	r25, 0xFF	; 255
    2382:	90 93 80 08 	sts	0x0880, r25	; 0x800880 <_ZN7TwoWire13rxBufferIndexE>
    2386:	02 c0       	rjmp	.+4      	; 0x238c <_ZN7TwoWire4readEv+0x24>
    2388:	2f ef       	ldi	r18, 0xFF	; 255
    238a:	3f ef       	ldi	r19, 0xFF	; 255
    238c:	c9 01       	movw	r24, r18
    238e:	08 95       	ret

00002390 <_ZN7TwoWire4peekEv>:
    2390:	e0 91 80 08 	lds	r30, 0x0880	; 0x800880 <_ZN7TwoWire13rxBufferIndexE>
    2394:	80 91 7f 08 	lds	r24, 0x087F	; 0x80087f <_ZN7TwoWire14rxBufferLengthE>
    2398:	e8 17       	cp	r30, r24
    239a:	30 f4       	brcc	.+12     	; 0x23a8 <_ZN7TwoWire4peekEv+0x18>
    239c:	f0 e0       	ldi	r31, 0x00	; 0
    239e:	ef 57       	subi	r30, 0x7F	; 127
    23a0:	f7 4f       	sbci	r31, 0xF7	; 247
    23a2:	80 81       	ld	r24, Z
    23a4:	90 e0       	ldi	r25, 0x00	; 0
    23a6:	08 95       	ret
    23a8:	8f ef       	ldi	r24, 0xFF	; 255
    23aa:	9f ef       	ldi	r25, 0xFF	; 255
    23ac:	08 95       	ret

000023ae <_ZN7TwoWire5flushEv>:
    23ae:	08 95       	ret

000023b0 <_ZN7TwoWire16onReceiveServiceEPhi>:
    23b0:	cf 93       	push	r28
    23b2:	df 93       	push	r29
    23b4:	ec 01       	movw	r28, r24
    23b6:	e0 91 57 08 	lds	r30, 0x0857	; 0x800857 <_ZN7TwoWire14user_onReceiveE>
    23ba:	f0 91 58 08 	lds	r31, 0x0858	; 0x800858 <_ZN7TwoWire14user_onReceiveE+0x1>
    23be:	30 97       	sbiw	r30, 0x00	; 0
    23c0:	01 f1       	breq	.+64     	; 0x2402 <_ZN7TwoWire16onReceiveServiceEPhi+0x52>
    23c2:	90 91 80 08 	lds	r25, 0x0880	; 0x800880 <_ZN7TwoWire13rxBufferIndexE>
    23c6:	80 91 7f 08 	lds	r24, 0x087F	; 0x80087f <_ZN7TwoWire14rxBufferLengthE>
    23ca:	98 17       	cp	r25, r24
    23cc:	d0 f0       	brcs	.+52     	; 0x2402 <_ZN7TwoWire16onReceiveServiceEPhi+0x52>
    23ce:	16 16       	cp	r1, r22
    23d0:	17 06       	cpc	r1, r23
    23d2:	8c f4       	brge	.+34     	; 0x23f6 <_ZN7TwoWire16onReceiveServiceEPhi+0x46>
    23d4:	20 e0       	ldi	r18, 0x00	; 0
    23d6:	30 e0       	ldi	r19, 0x00	; 0
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	de 01       	movw	r26, r28
    23dc:	a9 0f       	add	r26, r25
    23de:	b1 1d       	adc	r27, r1
    23e0:	4c 91       	ld	r20, X
    23e2:	d9 01       	movw	r26, r18
    23e4:	af 57       	subi	r26, 0x7F	; 127
    23e6:	b7 4f       	sbci	r27, 0xF7	; 247
    23e8:	4c 93       	st	X, r20
    23ea:	9f 5f       	subi	r25, 0xFF	; 255
    23ec:	29 2f       	mov	r18, r25
    23ee:	30 e0       	ldi	r19, 0x00	; 0
    23f0:	26 17       	cp	r18, r22
    23f2:	37 07       	cpc	r19, r23
    23f4:	94 f3       	brlt	.-28     	; 0x23da <_ZN7TwoWire16onReceiveServiceEPhi+0x2a>
    23f6:	cb 01       	movw	r24, r22
    23f8:	10 92 80 08 	sts	0x0880, r1	; 0x800880 <_ZN7TwoWire13rxBufferIndexE>
    23fc:	60 93 7f 08 	sts	0x087F, r22	; 0x80087f <_ZN7TwoWire14rxBufferLengthE>
    2400:	19 95       	eicall
    2402:	df 91       	pop	r29
    2404:	cf 91       	pop	r28
    2406:	08 95       	ret

00002408 <_ZN7TwoWire16onRequestServiceEv>:
    2408:	e0 91 59 08 	lds	r30, 0x0859	; 0x800859 <_ZN7TwoWire14user_onRequestE>
    240c:	f0 91 5a 08 	lds	r31, 0x085A	; 0x80085a <_ZN7TwoWire14user_onRequestE+0x1>
    2410:	30 97       	sbiw	r30, 0x00	; 0
    2412:	29 f0       	breq	.+10     	; 0x241e <_ZN7TwoWire16onRequestServiceEv+0x16>
    2414:	10 92 5d 08 	sts	0x085D, r1	; 0x80085d <_ZN7TwoWire13txBufferIndexE>
    2418:	10 92 5c 08 	sts	0x085C, r1	; 0x80085c <_ZN7TwoWire14txBufferLengthE>
    241c:	19 95       	eicall
    241e:	08 95       	ret

00002420 <_ZN7TwoWire5writeEh>:
    2420:	cf 93       	push	r28
    2422:	df 93       	push	r29
    2424:	1f 92       	push	r1
    2426:	cd b7       	in	r28, 0x3d	; 61
    2428:	de b7       	in	r29, 0x3e	; 62
    242a:	69 83       	std	Y+1, r22	; 0x01
    242c:	80 91 5b 08 	lds	r24, 0x085B	; 0x80085b <_ZN7TwoWire12transmittingE>
    2430:	88 23       	and	r24, r24
    2432:	99 f0       	breq	.+38     	; 0x245a <_ZN7TwoWire5writeEh+0x3a>
    2434:	80 91 5c 08 	lds	r24, 0x085C	; 0x80085c <_ZN7TwoWire14txBufferLengthE>
    2438:	80 32       	cpi	r24, 0x20	; 32
    243a:	b0 f4       	brcc	.+44     	; 0x2468 <_ZN7TwoWire5writeEh+0x48>
    243c:	80 91 5d 08 	lds	r24, 0x085D	; 0x80085d <_ZN7TwoWire13txBufferIndexE>
    2440:	e8 2f       	mov	r30, r24
    2442:	f0 e0       	ldi	r31, 0x00	; 0
    2444:	e2 5a       	subi	r30, 0xA2	; 162
    2446:	f7 4f       	sbci	r31, 0xF7	; 247
    2448:	60 83       	st	Z, r22
    244a:	8f 5f       	subi	r24, 0xFF	; 255
    244c:	80 93 5d 08 	sts	0x085D, r24	; 0x80085d <_ZN7TwoWire13txBufferIndexE>
    2450:	80 93 5c 08 	sts	0x085C, r24	; 0x80085c <_ZN7TwoWire14txBufferLengthE>
    2454:	81 e0       	ldi	r24, 0x01	; 1
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	09 c0       	rjmp	.+18     	; 0x246c <_ZN7TwoWire5writeEh+0x4c>
    245a:	61 e0       	ldi	r22, 0x01	; 1
    245c:	ce 01       	movw	r24, r28
    245e:	01 96       	adiw	r24, 0x01	; 1
    2460:	19 de       	rcall	.-974    	; 0x2094 <twi_transmit>
    2462:	81 e0       	ldi	r24, 0x01	; 1
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	02 c0       	rjmp	.+4      	; 0x246c <_ZN7TwoWire5writeEh+0x4c>
    2468:	80 e0       	ldi	r24, 0x00	; 0
    246a:	90 e0       	ldi	r25, 0x00	; 0
    246c:	0f 90       	pop	r0
    246e:	df 91       	pop	r29
    2470:	cf 91       	pop	r28
    2472:	08 95       	ret

00002474 <_ZN7TwoWire5writeEPKhj>:
    2474:	cf 92       	push	r12
    2476:	df 92       	push	r13
    2478:	ef 92       	push	r14
    247a:	ff 92       	push	r15
    247c:	0f 93       	push	r16
    247e:	1f 93       	push	r17
    2480:	cf 93       	push	r28
    2482:	df 93       	push	r29
    2484:	8c 01       	movw	r16, r24
    2486:	cb 01       	movw	r24, r22
    2488:	6a 01       	movw	r12, r20
    248a:	20 91 5b 08 	lds	r18, 0x085B	; 0x80085b <_ZN7TwoWire12transmittingE>
    248e:	22 23       	and	r18, r18
    2490:	a1 f0       	breq	.+40     	; 0x24ba <_ZN7TwoWire5writeEPKhj+0x46>
    2492:	41 15       	cp	r20, r1
    2494:	51 05       	cpc	r21, r1
    2496:	99 f0       	breq	.+38     	; 0x24be <_ZN7TwoWire5writeEPKhj+0x4a>
    2498:	eb 01       	movw	r28, r22
    249a:	7b 01       	movw	r14, r22
    249c:	e4 0e       	add	r14, r20
    249e:	f5 1e       	adc	r15, r21
    24a0:	69 91       	ld	r22, Y+
    24a2:	d8 01       	movw	r26, r16
    24a4:	ed 91       	ld	r30, X+
    24a6:	fc 91       	ld	r31, X
    24a8:	01 90       	ld	r0, Z+
    24aa:	f0 81       	ld	r31, Z
    24ac:	e0 2d       	mov	r30, r0
    24ae:	c8 01       	movw	r24, r16
    24b0:	19 95       	eicall
    24b2:	ce 15       	cp	r28, r14
    24b4:	df 05       	cpc	r29, r15
    24b6:	a1 f7       	brne	.-24     	; 0x24a0 <_ZN7TwoWire5writeEPKhj+0x2c>
    24b8:	02 c0       	rjmp	.+4      	; 0x24be <_ZN7TwoWire5writeEPKhj+0x4a>
    24ba:	64 2f       	mov	r22, r20
    24bc:	eb dd       	rcall	.-1066   	; 0x2094 <twi_transmit>
    24be:	c6 01       	movw	r24, r12
    24c0:	df 91       	pop	r29
    24c2:	cf 91       	pop	r28
    24c4:	1f 91       	pop	r17
    24c6:	0f 91       	pop	r16
    24c8:	ff 90       	pop	r15
    24ca:	ef 90       	pop	r14
    24cc:	df 90       	pop	r13
    24ce:	cf 90       	pop	r12
    24d0:	08 95       	ret

000024d2 <_ZN7TwoWire5beginEv>:
    24d2:	78 94       	sei
    24d4:	10 92 80 08 	sts	0x0880, r1	; 0x800880 <_ZN7TwoWire13rxBufferIndexE>
    24d8:	10 92 7f 08 	sts	0x087F, r1	; 0x80087f <_ZN7TwoWire14rxBufferLengthE>
    24dc:	10 92 5d 08 	sts	0x085D, r1	; 0x80085d <_ZN7TwoWire13txBufferIndexE>
    24e0:	10 92 5c 08 	sts	0x085C, r1	; 0x80085c <_ZN7TwoWire14txBufferLengthE>
    24e4:	f5 dc       	rcall	.-1558   	; 0x1ed0 <twi_init>
    24e6:	84 e0       	ldi	r24, 0x04	; 4
    24e8:	92 e1       	ldi	r25, 0x12	; 18
    24ea:	03 de       	rcall	.-1018   	; 0x20f2 <twi_attachSlaveTxEvent>
    24ec:	88 ed       	ldi	r24, 0xD8	; 216
    24ee:	91 e1       	ldi	r25, 0x11	; 17
    24f0:	fb cd       	rjmp	.-1034   	; 0x20e8 <twi_attachSlaveRxEvent>
    24f2:	08 95       	ret

000024f4 <_ZN7TwoWire8setClockEm>:
    24f4:	cb 01       	movw	r24, r22
    24f6:	ba 01       	movw	r22, r20
    24f8:	04 cd       	rjmp	.-1528   	; 0x1f02 <twi_setFrequency>
    24fa:	08 95       	ret

000024fc <_ZN7TwoWire17beginTransmissionEh>:
    24fc:	81 e0       	ldi	r24, 0x01	; 1
    24fe:	80 93 5b 08 	sts	0x085B, r24	; 0x80085b <_ZN7TwoWire12transmittingE>
    2502:	60 93 7e 08 	sts	0x087E, r22	; 0x80087e <_ZN7TwoWire9txAddressE>
    2506:	10 92 5d 08 	sts	0x085D, r1	; 0x80085d <_ZN7TwoWire13txBufferIndexE>
    250a:	10 92 5c 08 	sts	0x085C, r1	; 0x80085c <_ZN7TwoWire14txBufferLengthE>
    250e:	08 95       	ret

00002510 <_ZN7TwoWire17beginTransmissionEi>:
    2510:	f5 cf       	rjmp	.-22     	; 0x24fc <_ZN7TwoWire17beginTransmissionEh>
    2512:	08 95       	ret

00002514 <_ZN7TwoWire15endTransmissionEh>:
    2514:	0f 93       	push	r16
    2516:	06 2f       	mov	r16, r22
    2518:	21 e0       	ldi	r18, 0x01	; 1
    251a:	40 91 5c 08 	lds	r20, 0x085C	; 0x80085c <_ZN7TwoWire14txBufferLengthE>
    251e:	6e e5       	ldi	r22, 0x5E	; 94
    2520:	78 e0       	ldi	r23, 0x08	; 8
    2522:	80 91 7e 08 	lds	r24, 0x087E	; 0x80087e <_ZN7TwoWire9txAddressE>
    2526:	53 dd       	rcall	.-1370   	; 0x1fce <twi_writeTo>
    2528:	10 92 5d 08 	sts	0x085D, r1	; 0x80085d <_ZN7TwoWire13txBufferIndexE>
    252c:	10 92 5c 08 	sts	0x085C, r1	; 0x80085c <_ZN7TwoWire14txBufferLengthE>
    2530:	10 92 5b 08 	sts	0x085B, r1	; 0x80085b <_ZN7TwoWire12transmittingE>
    2534:	0f 91       	pop	r16
    2536:	08 95       	ret

00002538 <_ZN7TwoWire11requestFromEhhmhh>:
    2538:	4f 92       	push	r4
    253a:	5f 92       	push	r5
    253c:	6f 92       	push	r6
    253e:	7f 92       	push	r7
    2540:	af 92       	push	r10
    2542:	bf 92       	push	r11
    2544:	cf 92       	push	r12
    2546:	ef 92       	push	r14
    2548:	ff 92       	push	r15
    254a:	0f 93       	push	r16
    254c:	1f 93       	push	r17
    254e:	cf 93       	push	r28
    2550:	df 93       	push	r29
    2552:	5c 01       	movw	r10, r24
    2554:	f6 2e       	mov	r15, r22
    2556:	d4 2f       	mov	r29, r20
    2558:	28 01       	movw	r4, r16
    255a:	39 01       	movw	r6, r18
    255c:	ee 20       	and	r14, r14
    255e:	39 f1       	breq	.+78     	; 0x25ae <_ZN7TwoWire11requestFromEhhmhh+0x76>
    2560:	cd df       	rcall	.-102    	; 0x24fc <_ZN7TwoWire17beginTransmissionEh>
    2562:	8e 2d       	mov	r24, r14
    2564:	84 30       	cpi	r24, 0x04	; 4
    2566:	08 f0       	brcs	.+2      	; 0x256a <_ZN7TwoWire11requestFromEhhmhh+0x32>
    2568:	83 e0       	ldi	r24, 0x03	; 3
    256a:	cf ef       	ldi	r28, 0xFF	; 255
    256c:	c8 0f       	add	r28, r24
    256e:	88 23       	and	r24, r24
    2570:	d9 f0       	breq	.+54     	; 0x25a8 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    2572:	8c 2f       	mov	r24, r28
    2574:	88 0f       	add	r24, r24
    2576:	88 0f       	add	r24, r24
    2578:	88 0f       	add	r24, r24
    257a:	a3 01       	movw	r20, r6
    257c:	92 01       	movw	r18, r4
    257e:	04 c0       	rjmp	.+8      	; 0x2588 <_ZN7TwoWire11requestFromEhhmhh+0x50>
    2580:	56 95       	lsr	r21
    2582:	47 95       	ror	r20
    2584:	37 95       	ror	r19
    2586:	27 95       	ror	r18
    2588:	8a 95       	dec	r24
    258a:	d2 f7       	brpl	.-12     	; 0x2580 <_ZN7TwoWire11requestFromEhhmhh+0x48>
    258c:	ca 01       	movw	r24, r20
    258e:	b9 01       	movw	r22, r18
    2590:	d5 01       	movw	r26, r10
    2592:	ed 91       	ld	r30, X+
    2594:	fc 91       	ld	r31, X
    2596:	01 90       	ld	r0, Z+
    2598:	f0 81       	ld	r31, Z
    259a:	e0 2d       	mov	r30, r0
    259c:	c5 01       	movw	r24, r10
    259e:	19 95       	eicall
    25a0:	8c 2f       	mov	r24, r28
    25a2:	c1 50       	subi	r28, 0x01	; 1
    25a4:	81 11       	cpse	r24, r1
    25a6:	e5 cf       	rjmp	.-54     	; 0x2572 <_ZN7TwoWire11requestFromEhhmhh+0x3a>
    25a8:	60 e0       	ldi	r22, 0x00	; 0
    25aa:	c5 01       	movw	r24, r10
    25ac:	b3 df       	rcall	.-154    	; 0x2514 <_ZN7TwoWire15endTransmissionEh>
    25ae:	4d 2f       	mov	r20, r29
    25b0:	d1 32       	cpi	r29, 0x21	; 33
    25b2:	08 f0       	brcs	.+2      	; 0x25b6 <_ZN7TwoWire11requestFromEhhmhh+0x7e>
    25b4:	40 e2       	ldi	r20, 0x20	; 32
    25b6:	2c 2d       	mov	r18, r12
    25b8:	61 e8       	ldi	r22, 0x81	; 129
    25ba:	78 e0       	ldi	r23, 0x08	; 8
    25bc:	8f 2d       	mov	r24, r15
    25be:	b5 dc       	rcall	.-1686   	; 0x1f2a <twi_readFrom>
    25c0:	10 92 80 08 	sts	0x0880, r1	; 0x800880 <_ZN7TwoWire13rxBufferIndexE>
    25c4:	80 93 7f 08 	sts	0x087F, r24	; 0x80087f <_ZN7TwoWire14rxBufferLengthE>
    25c8:	df 91       	pop	r29
    25ca:	cf 91       	pop	r28
    25cc:	1f 91       	pop	r17
    25ce:	0f 91       	pop	r16
    25d0:	ff 90       	pop	r15
    25d2:	ef 90       	pop	r14
    25d4:	cf 90       	pop	r12
    25d6:	bf 90       	pop	r11
    25d8:	af 90       	pop	r10
    25da:	7f 90       	pop	r7
    25dc:	6f 90       	pop	r6
    25de:	5f 90       	pop	r5
    25e0:	4f 90       	pop	r4
    25e2:	08 95       	ret

000025e4 <_ZN7TwoWire11requestFromEhhh>:
    25e4:	cf 92       	push	r12
    25e6:	ef 92       	push	r14
    25e8:	0f 93       	push	r16
    25ea:	1f 93       	push	r17
    25ec:	c2 2e       	mov	r12, r18
    25ee:	e1 2c       	mov	r14, r1
    25f0:	00 e0       	ldi	r16, 0x00	; 0
    25f2:	10 e0       	ldi	r17, 0x00	; 0
    25f4:	98 01       	movw	r18, r16
    25f6:	a0 df       	rcall	.-192    	; 0x2538 <_ZN7TwoWire11requestFromEhhmhh>
    25f8:	1f 91       	pop	r17
    25fa:	0f 91       	pop	r16
    25fc:	ef 90       	pop	r14
    25fe:	cf 90       	pop	r12
    2600:	08 95       	ret

00002602 <_ZN7TwoWire11requestFromEhh>:
    2602:	21 e0       	ldi	r18, 0x01	; 1
    2604:	ef cf       	rjmp	.-34     	; 0x25e4 <_ZN7TwoWire11requestFromEhhh>
    2606:	08 95       	ret

00002608 <_ZN7TwoWire11requestFromEii>:
    2608:	21 e0       	ldi	r18, 0x01	; 1
    260a:	ec cf       	rjmp	.-40     	; 0x25e4 <_ZN7TwoWire11requestFromEhhh>
    260c:	08 95       	ret

0000260e <_ZN7TwoWire15endTransmissionEv>:
    260e:	61 e0       	ldi	r22, 0x01	; 1
    2610:	81 cf       	rjmp	.-254    	; 0x2514 <_ZN7TwoWire15endTransmissionEh>
    2612:	08 95       	ret

00002614 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    2614:	80 e8       	ldi	r24, 0x80	; 128
    2616:	92 e0       	ldi	r25, 0x02	; 2
    2618:	90 93 56 08 	sts	0x0856, r25	; 0x800856 <Wire+0x1>
    261c:	80 93 55 08 	sts	0x0855, r24	; 0x800855 <Wire>
    2620:	08 95       	ret

00002622 <_ZN6MS5837C1ER13HardwareTimer>:
const float MS5837::mbar = 1.0f;
*/
const uint8_t MS5837::MS5837_30BA = 0;
const uint8_t MS5837::MS5837_02BA = 1;

MS5837::MS5837(HardwareTimer &timer) : _timer(&timer) {
    2622:	fc 01       	movw	r30, r24
    2624:	73 a3       	std	Z+35, r23	; 0x23
    2626:	62 a3       	std	Z+34, r22	; 0x22
	fluidDensity = 1029;
    2628:	40 e0       	ldi	r20, 0x00	; 0
    262a:	50 ea       	ldi	r21, 0xA0	; 160
    262c:	60 e8       	ldi	r22, 0x80	; 128
    262e:	74 e4       	ldi	r23, 0x44	; 68
    2630:	44 a3       	std	Z+36, r20	; 0x24
    2632:	55 a3       	std	Z+37, r21	; 0x25
    2634:	66 a3       	std	Z+38, r22	; 0x26
    2636:	77 a3       	std	Z+39, r23	; 0x27
    2638:	08 95       	ret

0000263a <_ZN6MS58378setModelEh>:

	return false; // CRC fail
}

void MS5837::setModel(uint8_t model) {
	_model = model;
    263a:	fc 01       	movw	r30, r24
    263c:	60 a3       	std	Z+32, r22	; 0x20
    263e:	08 95       	ret

00002640 <_ZN6MS58379startReadEv>:
	D2 = (D2 << 8) | Wire.read();

	calculate();
}*/

bool MS5837::startRead(){
    2640:	cf 93       	push	r28
    2642:	df 93       	push	r29
	if(_state == STATE_FINISHED){
    2644:	fc 01       	movw	r30, r24
    2646:	21 a1       	ldd	r18, Z+33	; 0x21
    2648:	21 11       	cpse	r18, r1
    264a:	1c c0       	rjmp	.+56     	; 0x2684 <_ZN6MS58379startReadEv+0x44>
    264c:	ec 01       	movw	r28, r24
		_state = STATE_READ_D1; // Request D1 conversion
    264e:	81 e0       	ldi	r24, 0x01	; 1
    2650:	81 a3       	std	Z+33, r24	; 0x21
		
		Wire.beginTransmission(MS5837_ADDR);
    2652:	66 e7       	ldi	r22, 0x76	; 118
    2654:	70 e0       	ldi	r23, 0x00	; 0
    2656:	85 e5       	ldi	r24, 0x55	; 85
    2658:	98 e0       	ldi	r25, 0x08	; 8
    265a:	5a df       	rcall	.-332    	; 0x2510 <_ZN7TwoWire17beginTransmissionEi>
	void onRequest( void (*)(void) );

	inline size_t write(unsigned long n) { return write((uint8_t)n); }
	inline size_t write(long n) { return write((uint8_t)n); }
	inline size_t write(unsigned int n) { return write((uint8_t)n); }
	inline size_t write(int n) { return write((uint8_t)n); }
    265c:	e0 91 55 08 	lds	r30, 0x0855	; 0x800855 <Wire>
    2660:	f0 91 56 08 	lds	r31, 0x0856	; 0x800856 <Wire+0x1>
    2664:	01 90       	ld	r0, Z+
    2666:	f0 81       	ld	r31, Z
    2668:	e0 2d       	mov	r30, r0
    266a:	6a e4       	ldi	r22, 0x4A	; 74
    266c:	85 e5       	ldi	r24, 0x55	; 85
    266e:	98 e0       	ldi	r25, 0x08	; 8
    2670:	19 95       	eicall
		Wire.write(MS5837_CONVERT_D1_8192);
		Wire.endTransmission();
    2672:	85 e5       	ldi	r24, 0x55	; 85
    2674:	98 e0       	ldi	r25, 0x08	; 8
    2676:	cb df       	rcall	.-106    	; 0x260e <_ZN7TwoWire15endTransmissionEv>

		_timer->start(2); // Max conversion time, 20ms per datasheet
    2678:	62 e0       	ldi	r22, 0x02	; 2
    267a:	8a a1       	ldd	r24, Y+34	; 0x22
    267c:	9b a1       	ldd	r25, Y+35	; 0x23
    267e:	88 db       	rcall	.-2288   	; 0x1d90 <_ZN13HardwareTimer5startEh>
		return true;
    2680:	81 e0       	ldi	r24, 0x01	; 1
    2682:	01 c0       	rjmp	.+2      	; 0x2686 <_ZN6MS58379startReadEv+0x46>
	}else{
		return false;
    2684:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    2686:	df 91       	pop	r29
    2688:	cf 91       	pop	r28
    268a:	08 95       	ret

0000268c <_ZN6MS58378finishedEv>:
		}
	}
}

bool MS5837::finished(){
	return _state == STATE_FINISHED;
    268c:	21 e0       	ldi	r18, 0x01	; 1
    268e:	fc 01       	movw	r30, r24
    2690:	81 a1       	ldd	r24, Z+33	; 0x21
    2692:	81 11       	cpse	r24, r1
    2694:	20 e0       	ldi	r18, 0x00	; 0
}
    2696:	82 2f       	mov	r24, r18
    2698:	08 95       	ret

0000269a <_ZN6MS58379calculateEv>:

void MS5837::calculate() {
    269a:	2f 92       	push	r2
    269c:	3f 92       	push	r3
    269e:	4f 92       	push	r4
    26a0:	5f 92       	push	r5
    26a2:	6f 92       	push	r6
    26a4:	7f 92       	push	r7
    26a6:	8f 92       	push	r8
    26a8:	9f 92       	push	r9
    26aa:	af 92       	push	r10
    26ac:	bf 92       	push	r11
    26ae:	cf 92       	push	r12
    26b0:	df 92       	push	r13
    26b2:	ef 92       	push	r14
    26b4:	ff 92       	push	r15
    26b6:	0f 93       	push	r16
    26b8:	1f 93       	push	r17
    26ba:	cf 93       	push	r28
    26bc:	df 93       	push	r29
    26be:	cd b7       	in	r28, 0x3d	; 61
    26c0:	de b7       	in	r29, 0x3e	; 62
    26c2:	a5 97       	sbiw	r28, 0x25	; 37
    26c4:	0f b6       	in	r0, 0x3f	; 63
    26c6:	f8 94       	cli
    26c8:	de bf       	out	0x3e, r29	; 62
    26ca:	0f be       	out	0x3f, r0	; 63
    26cc:	cd bf       	out	0x3d, r28	; 61
    26ce:	1c 01       	movw	r2, r24
	int32_t Ti = 0;
	int64_t OFF2 = 0;
	int64_t SENS2 = 0;
	
	// Terms called
	dT = D2-uint32_t(C[5])*256l;
    26d0:	dc 01       	movw	r26, r24
    26d2:	1a 96       	adiw	r26, 0x0a	; 10
    26d4:	8d 91       	ld	r24, X+
    26d6:	9c 91       	ld	r25, X
    26d8:	1b 97       	sbiw	r26, 0x0b	; 11
    26da:	a0 e0       	ldi	r26, 0x00	; 0
    26dc:	b0 e0       	ldi	r27, 0x00	; 0
    26de:	ba 2f       	mov	r27, r26
    26e0:	a9 2f       	mov	r26, r25
    26e2:	98 2f       	mov	r25, r24
    26e4:	88 27       	eor	r24, r24
    26e6:	f1 01       	movw	r30, r2
    26e8:	44 89       	ldd	r20, Z+20	; 0x14
    26ea:	55 89       	ldd	r21, Z+21	; 0x15
    26ec:	66 89       	ldd	r22, Z+22	; 0x16
    26ee:	77 89       	ldd	r23, Z+23	; 0x17
    26f0:	3a 01       	movw	r6, r20
    26f2:	4b 01       	movw	r8, r22
    26f4:	68 1a       	sub	r6, r24
    26f6:	79 0a       	sbc	r7, r25
    26f8:	8a 0a       	sbc	r8, r26
    26fa:	9b 0a       	sbc	r9, r27
    26fc:	69 82       	std	Y+1, r6	; 0x01
    26fe:	7a 82       	std	Y+2, r7	; 0x02
    2700:	8b 82       	std	Y+3, r8	; 0x03
    2702:	9c 82       	std	Y+4, r9	; 0x04
	if ( _model == MS5837_02BA ) {
    2704:	80 a1       	ldd	r24, Z+32	; 0x20
    2706:	81 30       	cpi	r24, 0x01	; 1
    2708:	09 f0       	breq	.+2      	; 0x270c <_ZN6MS58379calculateEv+0x72>
    270a:	58 c1       	rjmp	.+688    	; 0x29bc <_ZN6MS58379calculateEv+0x322>
		SENS = int64_t(C[1])*65536l+(int64_t(C[3])*dT)/128l;
    270c:	99 0c       	add	r9, r9
    270e:	66 08       	sbc	r6, r6
    2710:	76 2c       	mov	r7, r6
    2712:	43 01       	movw	r8, r6
    2714:	6d 82       	std	Y+5, r6	; 0x05
    2716:	7e 82       	std	Y+6, r7	; 0x06
    2718:	8f 82       	std	Y+7, r8	; 0x07
    271a:	98 86       	std	Y+8, r9	; 0x08
    271c:	86 81       	ldd	r24, Z+6	; 0x06
    271e:	97 81       	ldd	r25, Z+7	; 0x07
    2720:	3c 01       	movw	r6, r24
    2722:	81 2c       	mov	r8, r1
    2724:	91 2c       	mov	r9, r1
    2726:	a1 2c       	mov	r10, r1
    2728:	b1 2c       	mov	r11, r1
    272a:	65 01       	movw	r12, r10
    272c:	8d 8f       	std	Y+29, r24	; 0x1d
    272e:	7e 8e       	std	Y+30, r7	; 0x1e
    2730:	8f 8e       	std	Y+31, r8	; 0x1f
    2732:	98 a2       	std	Y+32, r9	; 0x20
    2734:	a9 a2       	std	Y+33, r10	; 0x21
    2736:	ba a2       	std	Y+34, r11	; 0x22
    2738:	cb a2       	std	Y+35, r12	; 0x23
    273a:	dc a2       	std	Y+36, r13	; 0x24
    273c:	a9 80       	ldd	r10, Y+1	; 0x01
    273e:	ba 80       	ldd	r11, Y+2	; 0x02
    2740:	cb 80       	ldd	r12, Y+3	; 0x03
    2742:	dc 80       	ldd	r13, Y+4	; 0x04
    2744:	ed 80       	ldd	r14, Y+5	; 0x05
    2746:	fe 2c       	mov	r15, r14
    2748:	0e 2d       	mov	r16, r14
    274a:	1e 2d       	mov	r17, r14
    274c:	28 2f       	mov	r18, r24
    274e:	37 2d       	mov	r19, r7
    2750:	40 e0       	ldi	r20, 0x00	; 0
    2752:	50 e0       	ldi	r21, 0x00	; 0
    2754:	60 e0       	ldi	r22, 0x00	; 0
    2756:	70 e0       	ldi	r23, 0x00	; 0
    2758:	80 e0       	ldi	r24, 0x00	; 0
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	0e 94 29 29 	call	0x5252	; 0x5252 <__muldi3>
    2760:	12 2f       	mov	r17, r18
    2762:	3e 87       	std	Y+14, r19	; 0x0e
    2764:	4d 87       	std	Y+13, r20	; 0x0d
    2766:	b5 2f       	mov	r27, r21
    2768:	f6 2f       	mov	r31, r22
    276a:	e7 2f       	mov	r30, r23
    276c:	78 2e       	mov	r7, r24
    276e:	89 2e       	mov	r8, r25
    2770:	a0 e0       	ldi	r26, 0x00	; 0
    2772:	0e 94 cf 29 	call	0x539e	; 0x539e <__cmpdi2_s8>
    2776:	5c f4       	brge	.+22     	; 0x278e <_ZN6MS58379calculateEv+0xf4>
    2778:	af e7       	ldi	r26, 0x7F	; 127
    277a:	0e 94 ba 29 	call	0x5374	; 0x5374 <__adddi3_s8>
    277e:	12 2f       	mov	r17, r18
    2780:	3e 87       	std	Y+14, r19	; 0x0e
    2782:	4d 87       	std	Y+13, r20	; 0x0d
    2784:	b5 2f       	mov	r27, r21
    2786:	f6 2f       	mov	r31, r22
    2788:	e7 2f       	mov	r30, r23
    278a:	78 2e       	mov	r7, r24
    278c:	89 2e       	mov	r8, r25
    278e:	21 2f       	mov	r18, r17
    2790:	3e 85       	ldd	r19, Y+14	; 0x0e
    2792:	4d 85       	ldd	r20, Y+13	; 0x0d
    2794:	5b 2f       	mov	r21, r27
    2796:	6f 2f       	mov	r22, r31
    2798:	7e 2f       	mov	r23, r30
    279a:	87 2d       	mov	r24, r7
    279c:	98 2d       	mov	r25, r8
    279e:	07 e0       	ldi	r16, 0x07	; 7
    27a0:	0e 94 93 29 	call	0x5326	; 0x5326 <__ashrdi3>
    27a4:	82 2e       	mov	r8, r18
    27a6:	93 2e       	mov	r9, r19
    27a8:	74 2e       	mov	r7, r20
    27aa:	65 2e       	mov	r6, r21
    27ac:	b6 2f       	mov	r27, r22
    27ae:	a7 2f       	mov	r26, r23
    27b0:	58 2e       	mov	r5, r24
    27b2:	49 2e       	mov	r4, r25
    27b4:	f1 01       	movw	r30, r2
    27b6:	a2 80       	ldd	r10, Z+2	; 0x02
    27b8:	b3 80       	ldd	r11, Z+3	; 0x03
    27ba:	2a 2d       	mov	r18, r10
    27bc:	3b 2d       	mov	r19, r11
    27be:	40 e0       	ldi	r20, 0x00	; 0
    27c0:	50 e0       	ldi	r21, 0x00	; 0
    27c2:	60 e0       	ldi	r22, 0x00	; 0
    27c4:	70 e0       	ldi	r23, 0x00	; 0
    27c6:	80 e0       	ldi	r24, 0x00	; 0
    27c8:	90 e0       	ldi	r25, 0x00	; 0
    27ca:	00 e1       	ldi	r16, 0x10	; 16
    27cc:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <__ashldi3>
    27d0:	a2 2e       	mov	r10, r18
    27d2:	b3 2e       	mov	r11, r19
    27d4:	c4 2e       	mov	r12, r20
    27d6:	d5 2e       	mov	r13, r21
    27d8:	e6 2e       	mov	r14, r22
    27da:	f7 2e       	mov	r15, r23
    27dc:	08 2f       	mov	r16, r24
    27de:	19 2f       	mov	r17, r25
    27e0:	28 2d       	mov	r18, r8
    27e2:	39 2d       	mov	r19, r9
    27e4:	47 2d       	mov	r20, r7
    27e6:	56 2d       	mov	r21, r6
    27e8:	6b 2f       	mov	r22, r27
    27ea:	7a 2f       	mov	r23, r26
    27ec:	85 2d       	mov	r24, r5
    27ee:	94 2d       	mov	r25, r4
    27f0:	0e 94 b1 29 	call	0x5362	; 0x5362 <__adddi3>
    27f4:	2d 87       	std	Y+13, r18	; 0x0d
    27f6:	3e 87       	std	Y+14, r19	; 0x0e
    27f8:	4f 87       	std	Y+15, r20	; 0x0f
    27fa:	58 8b       	std	Y+16, r21	; 0x10
    27fc:	69 8b       	std	Y+17, r22	; 0x11
    27fe:	7a 8b       	std	Y+18, r23	; 0x12
    2800:	8b 8b       	std	Y+19, r24	; 0x13
    2802:	9c 8b       	std	Y+20, r25	; 0x14
		OFF = int64_t(C[2])*131072l+(int64_t(C[4])*dT)/64l;
    2804:	80 85       	ldd	r24, Z+8	; 0x08
    2806:	91 85       	ldd	r25, Z+9	; 0x09
    2808:	3c 01       	movw	r6, r24
    280a:	81 2c       	mov	r8, r1
    280c:	91 2c       	mov	r9, r1
    280e:	a1 2c       	mov	r10, r1
    2810:	b1 2c       	mov	r11, r1
    2812:	65 01       	movw	r12, r10
    2814:	8d 8f       	std	Y+29, r24	; 0x1d
    2816:	7e 8e       	std	Y+30, r7	; 0x1e
    2818:	8f 8e       	std	Y+31, r8	; 0x1f
    281a:	98 a2       	std	Y+32, r9	; 0x20
    281c:	a9 a2       	std	Y+33, r10	; 0x21
    281e:	ba a2       	std	Y+34, r11	; 0x22
    2820:	cb a2       	std	Y+35, r12	; 0x23
    2822:	dc a2       	std	Y+36, r13	; 0x24
    2824:	a9 80       	ldd	r10, Y+1	; 0x01
    2826:	ba 80       	ldd	r11, Y+2	; 0x02
    2828:	cb 80       	ldd	r12, Y+3	; 0x03
    282a:	dc 80       	ldd	r13, Y+4	; 0x04
    282c:	ed 80       	ldd	r14, Y+5	; 0x05
    282e:	fe 2c       	mov	r15, r14
    2830:	0e 2d       	mov	r16, r14
    2832:	1e 2d       	mov	r17, r14
    2834:	28 2f       	mov	r18, r24
    2836:	37 2d       	mov	r19, r7
    2838:	40 e0       	ldi	r20, 0x00	; 0
    283a:	50 e0       	ldi	r21, 0x00	; 0
    283c:	60 e0       	ldi	r22, 0x00	; 0
    283e:	70 e0       	ldi	r23, 0x00	; 0
    2840:	80 e0       	ldi	r24, 0x00	; 0
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	0e 94 29 29 	call	0x5252	; 0x5252 <__muldi3>
    2848:	12 2f       	mov	r17, r18
    284a:	3e 8b       	std	Y+22, r19	; 0x16
    284c:	4d 8b       	std	Y+21, r20	; 0x15
    284e:	b5 2f       	mov	r27, r21
    2850:	f6 2f       	mov	r31, r22
    2852:	e7 2f       	mov	r30, r23
    2854:	78 2e       	mov	r7, r24
    2856:	89 2e       	mov	r8, r25
    2858:	a0 e0       	ldi	r26, 0x00	; 0
    285a:	0e 94 cf 29 	call	0x539e	; 0x539e <__cmpdi2_s8>
    285e:	5c f4       	brge	.+22     	; 0x2876 <_ZN6MS58379calculateEv+0x1dc>
    2860:	af e3       	ldi	r26, 0x3F	; 63
    2862:	0e 94 ba 29 	call	0x5374	; 0x5374 <__adddi3_s8>
    2866:	12 2f       	mov	r17, r18
    2868:	3e 8b       	std	Y+22, r19	; 0x16
    286a:	4d 8b       	std	Y+21, r20	; 0x15
    286c:	b5 2f       	mov	r27, r21
    286e:	f6 2f       	mov	r31, r22
    2870:	e7 2f       	mov	r30, r23
    2872:	78 2e       	mov	r7, r24
    2874:	89 2e       	mov	r8, r25
    2876:	21 2f       	mov	r18, r17
    2878:	3e 89       	ldd	r19, Y+22	; 0x16
    287a:	4d 89       	ldd	r20, Y+21	; 0x15
    287c:	5b 2f       	mov	r21, r27
    287e:	6f 2f       	mov	r22, r31
    2880:	7e 2f       	mov	r23, r30
    2882:	87 2d       	mov	r24, r7
    2884:	98 2d       	mov	r25, r8
    2886:	06 e0       	ldi	r16, 0x06	; 6
    2888:	0e 94 93 29 	call	0x5326	; 0x5326 <__ashrdi3>
    288c:	82 2e       	mov	r8, r18
    288e:	93 2e       	mov	r9, r19
    2890:	74 2e       	mov	r7, r20
    2892:	65 2e       	mov	r6, r21
    2894:	b6 2f       	mov	r27, r22
    2896:	a7 2f       	mov	r26, r23
    2898:	58 2e       	mov	r5, r24
    289a:	49 2e       	mov	r4, r25
    289c:	f1 01       	movw	r30, r2
    289e:	24 81       	ldd	r18, Z+4	; 0x04
    28a0:	35 81       	ldd	r19, Z+5	; 0x05
    28a2:	59 01       	movw	r10, r18
    28a4:	3b 2d       	mov	r19, r11
    28a6:	40 e0       	ldi	r20, 0x00	; 0
    28a8:	50 e0       	ldi	r21, 0x00	; 0
    28aa:	60 e0       	ldi	r22, 0x00	; 0
    28ac:	70 e0       	ldi	r23, 0x00	; 0
    28ae:	80 e0       	ldi	r24, 0x00	; 0
    28b0:	90 e0       	ldi	r25, 0x00	; 0
    28b2:	01 e1       	ldi	r16, 0x11	; 17
    28b4:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <__ashldi3>
    28b8:	a2 2e       	mov	r10, r18
    28ba:	b3 2e       	mov	r11, r19
    28bc:	c4 2e       	mov	r12, r20
    28be:	d5 2e       	mov	r13, r21
    28c0:	e6 2e       	mov	r14, r22
    28c2:	f7 2e       	mov	r15, r23
    28c4:	08 2f       	mov	r16, r24
    28c6:	19 2f       	mov	r17, r25
    28c8:	28 2d       	mov	r18, r8
    28ca:	39 2d       	mov	r19, r9
    28cc:	47 2d       	mov	r20, r7
    28ce:	56 2d       	mov	r21, r6
    28d0:	6b 2f       	mov	r22, r27
    28d2:	7a 2f       	mov	r23, r26
    28d4:	85 2d       	mov	r24, r5
    28d6:	94 2d       	mov	r25, r4
    28d8:	0e 94 b1 29 	call	0x5362	; 0x5362 <__adddi3>
    28dc:	2d 8b       	std	Y+21, r18	; 0x15
    28de:	3e 8b       	std	Y+22, r19	; 0x16
    28e0:	4f 8b       	std	Y+23, r20	; 0x17
    28e2:	58 8f       	std	Y+24, r21	; 0x18
    28e4:	69 8f       	std	Y+25, r22	; 0x19
    28e6:	7a 8f       	std	Y+26, r23	; 0x1a
    28e8:	8b 8f       	std	Y+27, r24	; 0x1b
    28ea:	9c 8f       	std	Y+28, r25	; 0x1c
		OFF = int64_t(C[2])*65536l+(int64_t(C[4])*dT)/128l;
		P = (D1*SENS/(2097152l)-OFF)/(8192l);
	}
	
	// Temp conversion
	TEMP = 2000l+int64_t(dT)*C[6]/8388608LL;
    28ec:	84 85       	ldd	r24, Z+12	; 0x0c
    28ee:	95 85       	ldd	r25, Z+13	; 0x0d
    28f0:	3c 01       	movw	r6, r24
    28f2:	81 2c       	mov	r8, r1
    28f4:	91 2c       	mov	r9, r1
    28f6:	a1 2c       	mov	r10, r1
    28f8:	b1 2c       	mov	r11, r1
    28fa:	65 01       	movw	r12, r10
    28fc:	8d 8f       	std	Y+29, r24	; 0x1d
    28fe:	7e 8e       	std	Y+30, r7	; 0x1e
    2900:	8f 8e       	std	Y+31, r8	; 0x1f
    2902:	98 a2       	std	Y+32, r9	; 0x20
    2904:	a9 a2       	std	Y+33, r10	; 0x21
    2906:	ba a2       	std	Y+34, r11	; 0x22
    2908:	cb a2       	std	Y+35, r12	; 0x23
    290a:	dc a2       	std	Y+36, r13	; 0x24
    290c:	a9 80       	ldd	r10, Y+1	; 0x01
    290e:	ba 80       	ldd	r11, Y+2	; 0x02
    2910:	cb 80       	ldd	r12, Y+3	; 0x03
    2912:	dc 80       	ldd	r13, Y+4	; 0x04
    2914:	ed 80       	ldd	r14, Y+5	; 0x05
    2916:	fe 2c       	mov	r15, r14
    2918:	0e 2d       	mov	r16, r14
    291a:	1e 2d       	mov	r17, r14
    291c:	28 2f       	mov	r18, r24
    291e:	37 2d       	mov	r19, r7
    2920:	40 e0       	ldi	r20, 0x00	; 0
    2922:	50 e0       	ldi	r21, 0x00	; 0
    2924:	60 e0       	ldi	r22, 0x00	; 0
    2926:	70 e0       	ldi	r23, 0x00	; 0
    2928:	80 e0       	ldi	r24, 0x00	; 0
    292a:	90 e0       	ldi	r25, 0x00	; 0
    292c:	0e 94 29 29 	call	0x5252	; 0x5252 <__muldi3>
    2930:	12 2f       	mov	r17, r18
    2932:	3d a3       	std	Y+37, r19	; 0x25
    2934:	4d 8f       	std	Y+29, r20	; 0x1d
    2936:	b5 2f       	mov	r27, r21
    2938:	f6 2f       	mov	r31, r22
    293a:	e7 2f       	mov	r30, r23
    293c:	78 2e       	mov	r7, r24
    293e:	89 2e       	mov	r8, r25
    2940:	a0 e0       	ldi	r26, 0x00	; 0
    2942:	0e 94 cf 29 	call	0x539e	; 0x539e <__cmpdi2_s8>
    2946:	84 f4       	brge	.+32     	; 0x2968 <_ZN6MS58379calculateEv+0x2ce>
    2948:	21 50       	subi	r18, 0x01	; 1
    294a:	31 09       	sbc	r19, r1
    294c:	40 48       	sbci	r20, 0x80	; 128
    294e:	5f 4f       	sbci	r21, 0xFF	; 255
    2950:	6f 4f       	sbci	r22, 0xFF	; 255
    2952:	7f 4f       	sbci	r23, 0xFF	; 255
    2954:	8f 4f       	sbci	r24, 0xFF	; 255
    2956:	9f 4f       	sbci	r25, 0xFF	; 255
    2958:	12 2f       	mov	r17, r18
    295a:	3d a3       	std	Y+37, r19	; 0x25
    295c:	4d 8f       	std	Y+29, r20	; 0x1d
    295e:	b5 2f       	mov	r27, r21
    2960:	f6 2f       	mov	r31, r22
    2962:	e7 2f       	mov	r30, r23
    2964:	78 2e       	mov	r7, r24
    2966:	89 2e       	mov	r8, r25
    2968:	21 2f       	mov	r18, r17
    296a:	3d a1       	ldd	r19, Y+37	; 0x25
    296c:	4d 8d       	ldd	r20, Y+29	; 0x1d
    296e:	5b 2f       	mov	r21, r27
    2970:	6f 2f       	mov	r22, r31
    2972:	7e 2f       	mov	r23, r30
    2974:	87 2d       	mov	r24, r7
    2976:	98 2d       	mov	r25, r8
    2978:	07 e1       	ldi	r16, 0x17	; 23
    297a:	0e 94 93 29 	call	0x5326	; 0x5326 <__ashrdi3>
    297e:	82 2e       	mov	r8, r18
    2980:	93 2e       	mov	r9, r19
    2982:	a4 2e       	mov	r10, r20
    2984:	b5 2e       	mov	r11, r21
    2986:	24 01       	movw	r4, r8
    2988:	35 01       	movw	r6, r10
    298a:	00 ed       	ldi	r16, 0xD0	; 208
    298c:	40 0e       	add	r4, r16
    298e:	07 e0       	ldi	r16, 0x07	; 7
    2990:	50 1e       	adc	r5, r16
    2992:	61 1c       	adc	r6, r1
    2994:	71 1c       	adc	r7, r1
	
	//Second order compensation
	if ( _model == MS5837_02BA ) {
		if((TEMP/100)<20){         //Low temp
    2996:	10 ed       	ldi	r17, 0xD0	; 208
    2998:	41 16       	cp	r4, r17
    299a:	17 e0       	ldi	r17, 0x07	; 7
    299c:	51 06       	cpc	r5, r17
    299e:	61 04       	cpc	r6, r1
    29a0:	71 04       	cpc	r7, r1
    29a2:	0c f4       	brge	.+2      	; 0x29a6 <_ZN6MS58379calculateEv+0x30c>
    29a4:	62 c1       	rjmp	.+708    	; 0x2c6a <_ZN6MS58379calculateEv+0x5d0>
	int32_t dT = 0;
	int64_t SENS = 0;
	int64_t OFF = 0;
	int32_t SENSi = 0;
	int32_t OFFi = 0;
	int32_t Ti = 0;
    29a6:	81 2c       	mov	r8, r1
    29a8:	91 2c       	mov	r9, r1
    29aa:	54 01       	movw	r10, r8
	
	int32_t dT = 0;
	int64_t SENS = 0;
	int64_t OFF = 0;
	int32_t SENSi = 0;
	int32_t OFFi = 0;
    29ac:	19 82       	std	Y+1, r1	; 0x01
    29ae:	1a 82       	std	Y+2, r1	; 0x02
    29b0:	1b 82       	std	Y+3, r1	; 0x03
    29b2:	1c 82       	std	Y+4, r1	; 0x04
	// Do conversion first and then second order temp compensation
	
	int32_t dT = 0;
	int64_t SENS = 0;
	int64_t OFF = 0;
	int32_t SENSi = 0;
    29b4:	e1 2c       	mov	r14, r1
    29b6:	f1 2c       	mov	r15, r1
    29b8:	87 01       	movw	r16, r14
    29ba:	4c c3       	rjmp	.+1688   	; 0x3054 <_ZN6MS58379calculateEv+0x9ba>
	if ( _model == MS5837_02BA ) {
		SENS = int64_t(C[1])*65536l+(int64_t(C[3])*dT)/128l;
		OFF = int64_t(C[2])*131072l+(int64_t(C[4])*dT)/64l;
		P = (D1*SENS/(2097152l)-OFF)/(32768l);
	} else {
		SENS = int64_t(C[1])*32768l+(int64_t(C[3])*dT)/256l;
    29bc:	69 80       	ldd	r6, Y+1	; 0x01
    29be:	7a 80       	ldd	r7, Y+2	; 0x02
    29c0:	8b 80       	ldd	r8, Y+3	; 0x03
    29c2:	9c 80       	ldd	r9, Y+4	; 0x04
    29c4:	99 0c       	add	r9, r9
    29c6:	66 08       	sbc	r6, r6
    29c8:	76 2c       	mov	r7, r6
    29ca:	43 01       	movw	r8, r6
    29cc:	6d 82       	std	Y+5, r6	; 0x05
    29ce:	7e 82       	std	Y+6, r7	; 0x06
    29d0:	8f 82       	std	Y+7, r8	; 0x07
    29d2:	98 86       	std	Y+8, r9	; 0x08
    29d4:	86 81       	ldd	r24, Z+6	; 0x06
    29d6:	97 81       	ldd	r25, Z+7	; 0x07
    29d8:	3c 01       	movw	r6, r24
    29da:	81 2c       	mov	r8, r1
    29dc:	91 2c       	mov	r9, r1
    29de:	a1 2c       	mov	r10, r1
    29e0:	b1 2c       	mov	r11, r1
    29e2:	65 01       	movw	r12, r10
    29e4:	8d 8f       	std	Y+29, r24	; 0x1d
    29e6:	7e 8e       	std	Y+30, r7	; 0x1e
    29e8:	8f 8e       	std	Y+31, r8	; 0x1f
    29ea:	98 a2       	std	Y+32, r9	; 0x20
    29ec:	a9 a2       	std	Y+33, r10	; 0x21
    29ee:	ba a2       	std	Y+34, r11	; 0x22
    29f0:	cb a2       	std	Y+35, r12	; 0x23
    29f2:	dc a2       	std	Y+36, r13	; 0x24
    29f4:	a9 80       	ldd	r10, Y+1	; 0x01
    29f6:	ba 80       	ldd	r11, Y+2	; 0x02
    29f8:	cb 80       	ldd	r12, Y+3	; 0x03
    29fa:	dc 80       	ldd	r13, Y+4	; 0x04
    29fc:	ed 80       	ldd	r14, Y+5	; 0x05
    29fe:	fe 2c       	mov	r15, r14
    2a00:	0e 2d       	mov	r16, r14
    2a02:	1e 2d       	mov	r17, r14
    2a04:	28 2f       	mov	r18, r24
    2a06:	37 2d       	mov	r19, r7
    2a08:	40 e0       	ldi	r20, 0x00	; 0
    2a0a:	50 e0       	ldi	r21, 0x00	; 0
    2a0c:	60 e0       	ldi	r22, 0x00	; 0
    2a0e:	70 e0       	ldi	r23, 0x00	; 0
    2a10:	80 e0       	ldi	r24, 0x00	; 0
    2a12:	90 e0       	ldi	r25, 0x00	; 0
    2a14:	0e 94 29 29 	call	0x5252	; 0x5252 <__muldi3>
    2a18:	12 2f       	mov	r17, r18
    2a1a:	3e 87       	std	Y+14, r19	; 0x0e
    2a1c:	4d 87       	std	Y+13, r20	; 0x0d
    2a1e:	b5 2f       	mov	r27, r21
    2a20:	f6 2f       	mov	r31, r22
    2a22:	e7 2f       	mov	r30, r23
    2a24:	78 2e       	mov	r7, r24
    2a26:	89 2e       	mov	r8, r25
    2a28:	a0 e0       	ldi	r26, 0x00	; 0
    2a2a:	0e 94 cf 29 	call	0x539e	; 0x539e <__cmpdi2_s8>
    2a2e:	84 f4       	brge	.+32     	; 0x2a50 <_ZN6MS58379calculateEv+0x3b6>
    2a30:	21 50       	subi	r18, 0x01	; 1
    2a32:	3f 4f       	sbci	r19, 0xFF	; 255
    2a34:	4f 4f       	sbci	r20, 0xFF	; 255
    2a36:	5f 4f       	sbci	r21, 0xFF	; 255
    2a38:	6f 4f       	sbci	r22, 0xFF	; 255
    2a3a:	7f 4f       	sbci	r23, 0xFF	; 255
    2a3c:	8f 4f       	sbci	r24, 0xFF	; 255
    2a3e:	9f 4f       	sbci	r25, 0xFF	; 255
    2a40:	12 2f       	mov	r17, r18
    2a42:	3e 87       	std	Y+14, r19	; 0x0e
    2a44:	4d 87       	std	Y+13, r20	; 0x0d
    2a46:	b5 2f       	mov	r27, r21
    2a48:	f6 2f       	mov	r31, r22
    2a4a:	e7 2f       	mov	r30, r23
    2a4c:	78 2e       	mov	r7, r24
    2a4e:	89 2e       	mov	r8, r25
    2a50:	21 2f       	mov	r18, r17
    2a52:	3e 85       	ldd	r19, Y+14	; 0x0e
    2a54:	4d 85       	ldd	r20, Y+13	; 0x0d
    2a56:	5b 2f       	mov	r21, r27
    2a58:	6f 2f       	mov	r22, r31
    2a5a:	7e 2f       	mov	r23, r30
    2a5c:	87 2d       	mov	r24, r7
    2a5e:	98 2d       	mov	r25, r8
    2a60:	08 e0       	ldi	r16, 0x08	; 8
    2a62:	0e 94 93 29 	call	0x5326	; 0x5326 <__ashrdi3>
    2a66:	82 2e       	mov	r8, r18
    2a68:	93 2e       	mov	r9, r19
    2a6a:	74 2e       	mov	r7, r20
    2a6c:	65 2e       	mov	r6, r21
    2a6e:	b6 2f       	mov	r27, r22
    2a70:	a7 2f       	mov	r26, r23
    2a72:	58 2e       	mov	r5, r24
    2a74:	49 2e       	mov	r4, r25
    2a76:	f1 01       	movw	r30, r2
    2a78:	a2 80       	ldd	r10, Z+2	; 0x02
    2a7a:	b3 80       	ldd	r11, Z+3	; 0x03
    2a7c:	2a 2d       	mov	r18, r10
    2a7e:	3b 2d       	mov	r19, r11
    2a80:	40 e0       	ldi	r20, 0x00	; 0
    2a82:	50 e0       	ldi	r21, 0x00	; 0
    2a84:	60 e0       	ldi	r22, 0x00	; 0
    2a86:	70 e0       	ldi	r23, 0x00	; 0
    2a88:	80 e0       	ldi	r24, 0x00	; 0
    2a8a:	90 e0       	ldi	r25, 0x00	; 0
    2a8c:	0f e0       	ldi	r16, 0x0F	; 15
    2a8e:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <__ashldi3>
    2a92:	a2 2e       	mov	r10, r18
    2a94:	b3 2e       	mov	r11, r19
    2a96:	c4 2e       	mov	r12, r20
    2a98:	d5 2e       	mov	r13, r21
    2a9a:	e6 2e       	mov	r14, r22
    2a9c:	f7 2e       	mov	r15, r23
    2a9e:	08 2f       	mov	r16, r24
    2aa0:	19 2f       	mov	r17, r25
    2aa2:	28 2d       	mov	r18, r8
    2aa4:	39 2d       	mov	r19, r9
    2aa6:	47 2d       	mov	r20, r7
    2aa8:	56 2d       	mov	r21, r6
    2aaa:	6b 2f       	mov	r22, r27
    2aac:	7a 2f       	mov	r23, r26
    2aae:	85 2d       	mov	r24, r5
    2ab0:	94 2d       	mov	r25, r4
    2ab2:	0e 94 b1 29 	call	0x5362	; 0x5362 <__adddi3>
    2ab6:	2d 8b       	std	Y+21, r18	; 0x15
    2ab8:	3e 8b       	std	Y+22, r19	; 0x16
    2aba:	4f 8b       	std	Y+23, r20	; 0x17
    2abc:	58 8f       	std	Y+24, r21	; 0x18
    2abe:	69 8f       	std	Y+25, r22	; 0x19
    2ac0:	7a 8f       	std	Y+26, r23	; 0x1a
    2ac2:	8b 8f       	std	Y+27, r24	; 0x1b
    2ac4:	9c 8f       	std	Y+28, r25	; 0x1c
		OFF = int64_t(C[2])*65536l+(int64_t(C[4])*dT)/128l;
    2ac6:	80 85       	ldd	r24, Z+8	; 0x08
    2ac8:	91 85       	ldd	r25, Z+9	; 0x09
    2aca:	3c 01       	movw	r6, r24
    2acc:	81 2c       	mov	r8, r1
    2ace:	91 2c       	mov	r9, r1
    2ad0:	a1 2c       	mov	r10, r1
    2ad2:	b1 2c       	mov	r11, r1
    2ad4:	65 01       	movw	r12, r10
    2ad6:	8d 8f       	std	Y+29, r24	; 0x1d
    2ad8:	7e 8e       	std	Y+30, r7	; 0x1e
    2ada:	8f 8e       	std	Y+31, r8	; 0x1f
    2adc:	98 a2       	std	Y+32, r9	; 0x20
    2ade:	a9 a2       	std	Y+33, r10	; 0x21
    2ae0:	ba a2       	std	Y+34, r11	; 0x22
    2ae2:	cb a2       	std	Y+35, r12	; 0x23
    2ae4:	dc a2       	std	Y+36, r13	; 0x24
    2ae6:	a9 80       	ldd	r10, Y+1	; 0x01
    2ae8:	ba 80       	ldd	r11, Y+2	; 0x02
    2aea:	cb 80       	ldd	r12, Y+3	; 0x03
    2aec:	dc 80       	ldd	r13, Y+4	; 0x04
    2aee:	ed 80       	ldd	r14, Y+5	; 0x05
    2af0:	fe 2c       	mov	r15, r14
    2af2:	0e 2d       	mov	r16, r14
    2af4:	1e 2d       	mov	r17, r14
    2af6:	28 2f       	mov	r18, r24
    2af8:	37 2d       	mov	r19, r7
    2afa:	40 e0       	ldi	r20, 0x00	; 0
    2afc:	50 e0       	ldi	r21, 0x00	; 0
    2afe:	60 e0       	ldi	r22, 0x00	; 0
    2b00:	70 e0       	ldi	r23, 0x00	; 0
    2b02:	80 e0       	ldi	r24, 0x00	; 0
    2b04:	90 e0       	ldi	r25, 0x00	; 0
    2b06:	0e 94 29 29 	call	0x5252	; 0x5252 <__muldi3>
    2b0a:	12 2f       	mov	r17, r18
    2b0c:	3e 87       	std	Y+14, r19	; 0x0e
    2b0e:	4d 87       	std	Y+13, r20	; 0x0d
    2b10:	b5 2f       	mov	r27, r21
    2b12:	f6 2f       	mov	r31, r22
    2b14:	e7 2f       	mov	r30, r23
    2b16:	78 2e       	mov	r7, r24
    2b18:	89 2e       	mov	r8, r25
    2b1a:	a0 e0       	ldi	r26, 0x00	; 0
    2b1c:	0e 94 cf 29 	call	0x539e	; 0x539e <__cmpdi2_s8>
    2b20:	5c f4       	brge	.+22     	; 0x2b38 <_ZN6MS58379calculateEv+0x49e>
    2b22:	af e7       	ldi	r26, 0x7F	; 127
    2b24:	0e 94 ba 29 	call	0x5374	; 0x5374 <__adddi3_s8>
    2b28:	12 2f       	mov	r17, r18
    2b2a:	3e 87       	std	Y+14, r19	; 0x0e
    2b2c:	4d 87       	std	Y+13, r20	; 0x0d
    2b2e:	b5 2f       	mov	r27, r21
    2b30:	f6 2f       	mov	r31, r22
    2b32:	e7 2f       	mov	r30, r23
    2b34:	78 2e       	mov	r7, r24
    2b36:	89 2e       	mov	r8, r25
    2b38:	21 2f       	mov	r18, r17
    2b3a:	3e 85       	ldd	r19, Y+14	; 0x0e
    2b3c:	4d 85       	ldd	r20, Y+13	; 0x0d
    2b3e:	5b 2f       	mov	r21, r27
    2b40:	6f 2f       	mov	r22, r31
    2b42:	7e 2f       	mov	r23, r30
    2b44:	87 2d       	mov	r24, r7
    2b46:	98 2d       	mov	r25, r8
    2b48:	07 e0       	ldi	r16, 0x07	; 7
    2b4a:	0e 94 93 29 	call	0x5326	; 0x5326 <__ashrdi3>
    2b4e:	82 2e       	mov	r8, r18
    2b50:	93 2e       	mov	r9, r19
    2b52:	74 2e       	mov	r7, r20
    2b54:	65 2e       	mov	r6, r21
    2b56:	b6 2f       	mov	r27, r22
    2b58:	a7 2f       	mov	r26, r23
    2b5a:	58 2e       	mov	r5, r24
    2b5c:	49 2e       	mov	r4, r25
    2b5e:	f1 01       	movw	r30, r2
    2b60:	24 81       	ldd	r18, Z+4	; 0x04
    2b62:	35 81       	ldd	r19, Z+5	; 0x05
    2b64:	59 01       	movw	r10, r18
    2b66:	3b 2d       	mov	r19, r11
    2b68:	40 e0       	ldi	r20, 0x00	; 0
    2b6a:	50 e0       	ldi	r21, 0x00	; 0
    2b6c:	60 e0       	ldi	r22, 0x00	; 0
    2b6e:	70 e0       	ldi	r23, 0x00	; 0
    2b70:	80 e0       	ldi	r24, 0x00	; 0
    2b72:	90 e0       	ldi	r25, 0x00	; 0
    2b74:	00 e1       	ldi	r16, 0x10	; 16
    2b76:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <__ashldi3>
    2b7a:	a2 2e       	mov	r10, r18
    2b7c:	b3 2e       	mov	r11, r19
    2b7e:	c4 2e       	mov	r12, r20
    2b80:	d5 2e       	mov	r13, r21
    2b82:	e6 2e       	mov	r14, r22
    2b84:	f7 2e       	mov	r15, r23
    2b86:	08 2f       	mov	r16, r24
    2b88:	19 2f       	mov	r17, r25
    2b8a:	28 2d       	mov	r18, r8
    2b8c:	39 2d       	mov	r19, r9
    2b8e:	47 2d       	mov	r20, r7
    2b90:	56 2d       	mov	r21, r6
    2b92:	6b 2f       	mov	r22, r27
    2b94:	7a 2f       	mov	r23, r26
    2b96:	85 2d       	mov	r24, r5
    2b98:	94 2d       	mov	r25, r4
    2b9a:	0e 94 b1 29 	call	0x5362	; 0x5362 <__adddi3>
    2b9e:	2d 87       	std	Y+13, r18	; 0x0d
    2ba0:	3e 87       	std	Y+14, r19	; 0x0e
    2ba2:	4f 87       	std	Y+15, r20	; 0x0f
    2ba4:	58 8b       	std	Y+16, r21	; 0x10
    2ba6:	69 8b       	std	Y+17, r22	; 0x11
    2ba8:	7a 8b       	std	Y+18, r23	; 0x12
    2baa:	8b 8b       	std	Y+19, r24	; 0x13
    2bac:	9c 8b       	std	Y+20, r25	; 0x14
		P = (D1*SENS/(2097152l)-OFF)/(8192l);
	}
	
	// Temp conversion
	TEMP = 2000l+int64_t(dT)*C[6]/8388608LL;
    2bae:	84 85       	ldd	r24, Z+12	; 0x0c
    2bb0:	95 85       	ldd	r25, Z+13	; 0x0d
    2bb2:	3c 01       	movw	r6, r24
    2bb4:	81 2c       	mov	r8, r1
    2bb6:	91 2c       	mov	r9, r1
    2bb8:	a1 2c       	mov	r10, r1
    2bba:	b1 2c       	mov	r11, r1
    2bbc:	65 01       	movw	r12, r10
    2bbe:	8d 8f       	std	Y+29, r24	; 0x1d
    2bc0:	7e 8e       	std	Y+30, r7	; 0x1e
    2bc2:	8f 8e       	std	Y+31, r8	; 0x1f
    2bc4:	98 a2       	std	Y+32, r9	; 0x20
    2bc6:	a9 a2       	std	Y+33, r10	; 0x21
    2bc8:	ba a2       	std	Y+34, r11	; 0x22
    2bca:	cb a2       	std	Y+35, r12	; 0x23
    2bcc:	dc a2       	std	Y+36, r13	; 0x24
    2bce:	a9 80       	ldd	r10, Y+1	; 0x01
    2bd0:	ba 80       	ldd	r11, Y+2	; 0x02
    2bd2:	cb 80       	ldd	r12, Y+3	; 0x03
    2bd4:	dc 80       	ldd	r13, Y+4	; 0x04
    2bd6:	ed 80       	ldd	r14, Y+5	; 0x05
    2bd8:	fe 2c       	mov	r15, r14
    2bda:	0e 2d       	mov	r16, r14
    2bdc:	1e 2d       	mov	r17, r14
    2bde:	28 2f       	mov	r18, r24
    2be0:	37 2d       	mov	r19, r7
    2be2:	40 e0       	ldi	r20, 0x00	; 0
    2be4:	50 e0       	ldi	r21, 0x00	; 0
    2be6:	60 e0       	ldi	r22, 0x00	; 0
    2be8:	70 e0       	ldi	r23, 0x00	; 0
    2bea:	80 e0       	ldi	r24, 0x00	; 0
    2bec:	90 e0       	ldi	r25, 0x00	; 0
    2bee:	0e 94 29 29 	call	0x5252	; 0x5252 <__muldi3>
    2bf2:	12 2f       	mov	r17, r18
    2bf4:	3d a3       	std	Y+37, r19	; 0x25
    2bf6:	4d 8f       	std	Y+29, r20	; 0x1d
    2bf8:	b5 2f       	mov	r27, r21
    2bfa:	f6 2f       	mov	r31, r22
    2bfc:	e7 2f       	mov	r30, r23
    2bfe:	78 2e       	mov	r7, r24
    2c00:	89 2e       	mov	r8, r25
    2c02:	a0 e0       	ldi	r26, 0x00	; 0
    2c04:	0e 94 cf 29 	call	0x539e	; 0x539e <__cmpdi2_s8>
    2c08:	84 f4       	brge	.+32     	; 0x2c2a <_ZN6MS58379calculateEv+0x590>
    2c0a:	21 50       	subi	r18, 0x01	; 1
    2c0c:	31 09       	sbc	r19, r1
    2c0e:	40 48       	sbci	r20, 0x80	; 128
    2c10:	5f 4f       	sbci	r21, 0xFF	; 255
    2c12:	6f 4f       	sbci	r22, 0xFF	; 255
    2c14:	7f 4f       	sbci	r23, 0xFF	; 255
    2c16:	8f 4f       	sbci	r24, 0xFF	; 255
    2c18:	9f 4f       	sbci	r25, 0xFF	; 255
    2c1a:	12 2f       	mov	r17, r18
    2c1c:	3d a3       	std	Y+37, r19	; 0x25
    2c1e:	4d 8f       	std	Y+29, r20	; 0x1d
    2c20:	b5 2f       	mov	r27, r21
    2c22:	f6 2f       	mov	r31, r22
    2c24:	e7 2f       	mov	r30, r23
    2c26:	78 2e       	mov	r7, r24
    2c28:	89 2e       	mov	r8, r25
    2c2a:	21 2f       	mov	r18, r17
    2c2c:	3d a1       	ldd	r19, Y+37	; 0x25
    2c2e:	4d 8d       	ldd	r20, Y+29	; 0x1d
    2c30:	5b 2f       	mov	r21, r27
    2c32:	6f 2f       	mov	r22, r31
    2c34:	7e 2f       	mov	r23, r30
    2c36:	87 2d       	mov	r24, r7
    2c38:	98 2d       	mov	r25, r8
    2c3a:	07 e1       	ldi	r16, 0x17	; 23
    2c3c:	0e 94 93 29 	call	0x5326	; 0x5326 <__ashrdi3>
    2c40:	82 2e       	mov	r8, r18
    2c42:	93 2e       	mov	r9, r19
    2c44:	a4 2e       	mov	r10, r20
    2c46:	b5 2e       	mov	r11, r21
    2c48:	24 01       	movw	r4, r8
    2c4a:	35 01       	movw	r6, r10
    2c4c:	00 ed       	ldi	r16, 0xD0	; 208
    2c4e:	40 0e       	add	r4, r16
    2c50:	07 e0       	ldi	r16, 0x07	; 7
    2c52:	50 1e       	adc	r5, r16
    2c54:	61 1c       	adc	r6, r1
    2c56:	71 1c       	adc	r7, r1
			Ti = (11*int64_t(dT)*int64_t(dT))/(34359738368LL);
			OFFi = (31*(TEMP-2000)*(TEMP-2000))/8;
			SENSi = (63*(TEMP-2000)*(TEMP-2000))/32;
		}
		} else {
		if((TEMP/100)<20){         //Low temp
    2c58:	10 ed       	ldi	r17, 0xD0	; 208
    2c5a:	41 16       	cp	r4, r17
    2c5c:	17 e0       	ldi	r17, 0x07	; 7
    2c5e:	51 06       	cpc	r5, r17
    2c60:	61 04       	cpc	r6, r1
    2c62:	71 04       	cpc	r7, r1
    2c64:	0c f4       	brge	.+2      	; 0x2c68 <_ZN6MS58379calculateEv+0x5ce>
    2c66:	af c0       	rjmp	.+350    	; 0x2dc6 <_ZN6MS58379calculateEv+0x72c>
    2c68:	8a c1       	rjmp	.+788    	; 0x2f7e <_ZN6MS58379calculateEv+0x8e4>
	TEMP = 2000l+int64_t(dT)*C[6]/8388608LL;
	
	//Second order compensation
	if ( _model == MS5837_02BA ) {
		if((TEMP/100)<20){         //Low temp
			Ti = (11*int64_t(dT)*int64_t(dT))/(34359738368LL);
    2c6a:	29 81       	ldd	r18, Y+1	; 0x01
    2c6c:	3a 81       	ldd	r19, Y+2	; 0x02
    2c6e:	4b 81       	ldd	r20, Y+3	; 0x03
    2c70:	5c 81       	ldd	r21, Y+4	; 0x04
    2c72:	6d 81       	ldd	r22, Y+5	; 0x05
    2c74:	76 2f       	mov	r23, r22
    2c76:	86 2f       	mov	r24, r22
    2c78:	96 2f       	mov	r25, r22
    2c7a:	02 e0       	ldi	r16, 0x02	; 2
    2c7c:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <__ashldi3>
    2c80:	a2 2e       	mov	r10, r18
    2c82:	b3 2e       	mov	r11, r19
    2c84:	c4 2e       	mov	r12, r20
    2c86:	d5 2e       	mov	r13, r21
    2c88:	e6 2e       	mov	r14, r22
    2c8a:	f7 2e       	mov	r15, r23
    2c8c:	e8 2f       	mov	r30, r24
    2c8e:	19 2f       	mov	r17, r25
    2c90:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <__ashldi3>
    2c94:	0e 2f       	mov	r16, r30
    2c96:	0e 94 c6 29 	call	0x538c	; 0x538c <__subdi3>
    2c9a:	a9 80       	ldd	r10, Y+1	; 0x01
    2c9c:	ba 80       	ldd	r11, Y+2	; 0x02
    2c9e:	cb 80       	ldd	r12, Y+3	; 0x03
    2ca0:	dc 80       	ldd	r13, Y+4	; 0x04
    2ca2:	ed 80       	ldd	r14, Y+5	; 0x05
    2ca4:	fe 2c       	mov	r15, r14
    2ca6:	0e 2d       	mov	r16, r14
    2ca8:	1e 2d       	mov	r17, r14
    2caa:	0e 94 c6 29 	call	0x538c	; 0x538c <__subdi3>
    2cae:	e0 2e       	mov	r14, r16
    2cb0:	0f 2d       	mov	r16, r15
    2cb2:	0e 94 29 29 	call	0x5252	; 0x5252 <__muldi3>
    2cb6:	12 2f       	mov	r17, r18
    2cb8:	3d 8f       	std	Y+29, r19	; 0x1d
    2cba:	4d 83       	std	Y+5, r20	; 0x05
    2cbc:	b5 2f       	mov	r27, r21
    2cbe:	f6 2f       	mov	r31, r22
    2cc0:	e7 2f       	mov	r30, r23
    2cc2:	89 83       	std	Y+1, r24	; 0x01
    2cc4:	89 2e       	mov	r8, r25
    2cc6:	a0 e0       	ldi	r26, 0x00	; 0
    2cc8:	0e 94 cf 29 	call	0x539e	; 0x539e <__cmpdi2_s8>
    2ccc:	84 f4       	brge	.+32     	; 0x2cee <_ZN6MS58379calculateEv+0x654>
    2cce:	21 50       	subi	r18, 0x01	; 1
    2cd0:	31 09       	sbc	r19, r1
    2cd2:	41 09       	sbc	r20, r1
    2cd4:	51 09       	sbc	r21, r1
    2cd6:	68 4f       	sbci	r22, 0xF8	; 248
    2cd8:	7f 4f       	sbci	r23, 0xFF	; 255
    2cda:	8f 4f       	sbci	r24, 0xFF	; 255
    2cdc:	9f 4f       	sbci	r25, 0xFF	; 255
    2cde:	12 2f       	mov	r17, r18
    2ce0:	3d 8f       	std	Y+29, r19	; 0x1d
    2ce2:	4d 83       	std	Y+5, r20	; 0x05
    2ce4:	b5 2f       	mov	r27, r21
    2ce6:	f6 2f       	mov	r31, r22
    2ce8:	e7 2f       	mov	r30, r23
    2cea:	89 83       	std	Y+1, r24	; 0x01
    2cec:	89 2e       	mov	r8, r25
    2cee:	21 2f       	mov	r18, r17
    2cf0:	3d 8d       	ldd	r19, Y+29	; 0x1d
    2cf2:	4d 81       	ldd	r20, Y+5	; 0x05
    2cf4:	5b 2f       	mov	r21, r27
    2cf6:	6f 2f       	mov	r22, r31
    2cf8:	7e 2f       	mov	r23, r30
    2cfa:	89 81       	ldd	r24, Y+1	; 0x01
    2cfc:	98 2d       	mov	r25, r8
    2cfe:	03 e2       	ldi	r16, 0x23	; 35
    2d00:	0e 94 93 29 	call	0x5326	; 0x5326 <__ashrdi3>
    2d04:	82 2e       	mov	r8, r18
    2d06:	93 2e       	mov	r9, r19
    2d08:	a4 2e       	mov	r10, r20
    2d0a:	b5 2e       	mov	r11, r21
			OFFi = (31*(TEMP-2000)*(TEMP-2000))/8;
    2d0c:	73 01       	movw	r14, r6
    2d0e:	62 01       	movw	r12, r4
    2d10:	20 ed       	ldi	r18, 0xD0	; 208
    2d12:	c2 1a       	sub	r12, r18
    2d14:	27 e0       	ldi	r18, 0x07	; 7
    2d16:	d2 0a       	sbc	r13, r18
    2d18:	e1 08       	sbc	r14, r1
    2d1a:	f1 08       	sbc	r15, r1
    2d1c:	d7 01       	movw	r26, r14
    2d1e:	c6 01       	movw	r24, r12
    2d20:	88 0f       	add	r24, r24
    2d22:	99 1f       	adc	r25, r25
    2d24:	aa 1f       	adc	r26, r26
    2d26:	bb 1f       	adc	r27, r27
    2d28:	88 0f       	add	r24, r24
    2d2a:	99 1f       	adc	r25, r25
    2d2c:	aa 1f       	adc	r26, r26
    2d2e:	bb 1f       	adc	r27, r27
    2d30:	88 0f       	add	r24, r24
    2d32:	99 1f       	adc	r25, r25
    2d34:	aa 1f       	adc	r26, r26
    2d36:	bb 1f       	adc	r27, r27
    2d38:	88 0f       	add	r24, r24
    2d3a:	99 1f       	adc	r25, r25
    2d3c:	aa 1f       	adc	r26, r26
    2d3e:	bb 1f       	adc	r27, r27
    2d40:	88 0f       	add	r24, r24
    2d42:	99 1f       	adc	r25, r25
    2d44:	aa 1f       	adc	r26, r26
    2d46:	bb 1f       	adc	r27, r27
    2d48:	9c 01       	movw	r18, r24
    2d4a:	ad 01       	movw	r20, r26
    2d4c:	2c 19       	sub	r18, r12
    2d4e:	3d 09       	sbc	r19, r13
    2d50:	4e 09       	sbc	r20, r14
    2d52:	5f 09       	sbc	r21, r15
    2d54:	c7 01       	movw	r24, r14
    2d56:	b6 01       	movw	r22, r12
    2d58:	0e 94 e6 28 	call	0x51cc	; 0x51cc <__mulsi3>
    2d5c:	8b 01       	movw	r16, r22
    2d5e:	9c 01       	movw	r18, r24
    2d60:	99 23       	and	r25, r25
    2d62:	24 f4       	brge	.+8      	; 0x2d6c <_ZN6MS58379calculateEv+0x6d2>
    2d64:	09 5f       	subi	r16, 0xF9	; 249
    2d66:	1f 4f       	sbci	r17, 0xFF	; 255
    2d68:	2f 4f       	sbci	r18, 0xFF	; 255
    2d6a:	3f 4f       	sbci	r19, 0xFF	; 255
    2d6c:	b9 01       	movw	r22, r18
    2d6e:	a8 01       	movw	r20, r16
    2d70:	68 94       	set
    2d72:	12 f8       	bld	r1, 2
    2d74:	75 95       	asr	r23
    2d76:	67 95       	ror	r22
    2d78:	57 95       	ror	r21
    2d7a:	47 95       	ror	r20
    2d7c:	16 94       	lsr	r1
    2d7e:	d1 f7       	brne	.-12     	; 0x2d74 <_ZN6MS58379calculateEv+0x6da>
    2d80:	49 83       	std	Y+1, r20	; 0x01
    2d82:	5a 83       	std	Y+2, r21	; 0x02
    2d84:	6b 83       	std	Y+3, r22	; 0x03
    2d86:	7c 83       	std	Y+4, r23	; 0x04
			SENSi = (63*(TEMP-2000)*(TEMP-2000))/32;
    2d88:	af e3       	ldi	r26, 0x3F	; 63
    2d8a:	b0 e0       	ldi	r27, 0x00	; 0
    2d8c:	a7 01       	movw	r20, r14
    2d8e:	96 01       	movw	r18, r12
    2d90:	0e 94 1f 29 	call	0x523e	; 0x523e <__muluhisi3>
    2d94:	9b 01       	movw	r18, r22
    2d96:	ac 01       	movw	r20, r24
    2d98:	c7 01       	movw	r24, r14
    2d9a:	b6 01       	movw	r22, r12
    2d9c:	0e 94 e6 28 	call	0x51cc	; 0x51cc <__mulsi3>
    2da0:	8b 01       	movw	r16, r22
    2da2:	9c 01       	movw	r18, r24
    2da4:	99 23       	and	r25, r25
    2da6:	24 f4       	brge	.+8      	; 0x2db0 <_ZN6MS58379calculateEv+0x716>
    2da8:	01 5e       	subi	r16, 0xE1	; 225
    2daa:	1f 4f       	sbci	r17, 0xFF	; 255
    2dac:	2f 4f       	sbci	r18, 0xFF	; 255
    2dae:	3f 4f       	sbci	r19, 0xFF	; 255
    2db0:	78 01       	movw	r14, r16
    2db2:	89 01       	movw	r16, r18
    2db4:	68 94       	set
    2db6:	14 f8       	bld	r1, 4
    2db8:	15 95       	asr	r17
    2dba:	07 95       	ror	r16
    2dbc:	f7 94       	ror	r15
    2dbe:	e7 94       	ror	r14
    2dc0:	16 94       	lsr	r1
    2dc2:	d1 f7       	brne	.-12     	; 0x2db8 <_ZN6MS58379calculateEv+0x71e>
    2dc4:	47 c1       	rjmp	.+654    	; 0x3054 <_ZN6MS58379calculateEv+0x9ba>
		}
		} else {
		if((TEMP/100)<20){         //Low temp
			Ti = (3*int64_t(dT)*int64_t(dT))/(8589934592LL);
    2dc6:	29 81       	ldd	r18, Y+1	; 0x01
    2dc8:	3a 81       	ldd	r19, Y+2	; 0x02
    2dca:	4b 81       	ldd	r20, Y+3	; 0x03
    2dcc:	5c 81       	ldd	r21, Y+4	; 0x04
    2dce:	6d 81       	ldd	r22, Y+5	; 0x05
    2dd0:	76 2f       	mov	r23, r22
    2dd2:	86 2f       	mov	r24, r22
    2dd4:	96 2f       	mov	r25, r22
    2dd6:	01 e0       	ldi	r16, 0x01	; 1
    2dd8:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <__ashldi3>
    2ddc:	a9 80       	ldd	r10, Y+1	; 0x01
    2dde:	ba 80       	ldd	r11, Y+2	; 0x02
    2de0:	cb 80       	ldd	r12, Y+3	; 0x03
    2de2:	dc 80       	ldd	r13, Y+4	; 0x04
    2de4:	ed 80       	ldd	r14, Y+5	; 0x05
    2de6:	fe 2c       	mov	r15, r14
    2de8:	0e 2d       	mov	r16, r14
    2dea:	1e 2d       	mov	r17, r14
    2dec:	0e 94 b1 29 	call	0x5362	; 0x5362 <__adddi3>
    2df0:	e0 2e       	mov	r14, r16
    2df2:	0f 2d       	mov	r16, r15
    2df4:	0e 94 29 29 	call	0x5252	; 0x5252 <__muldi3>
    2df8:	12 2f       	mov	r17, r18
    2dfa:	3d 8f       	std	Y+29, r19	; 0x1d
    2dfc:	4d 83       	std	Y+5, r20	; 0x05
    2dfe:	b5 2f       	mov	r27, r21
    2e00:	f6 2f       	mov	r31, r22
    2e02:	e7 2f       	mov	r30, r23
    2e04:	89 83       	std	Y+1, r24	; 0x01
    2e06:	89 2e       	mov	r8, r25
    2e08:	a0 e0       	ldi	r26, 0x00	; 0
    2e0a:	0e 94 cf 29 	call	0x539e	; 0x539e <__cmpdi2_s8>
    2e0e:	84 f4       	brge	.+32     	; 0x2e30 <_ZN6MS58379calculateEv+0x796>
    2e10:	21 50       	subi	r18, 0x01	; 1
    2e12:	31 09       	sbc	r19, r1
    2e14:	41 09       	sbc	r20, r1
    2e16:	51 09       	sbc	r21, r1
    2e18:	6e 4f       	sbci	r22, 0xFE	; 254
    2e1a:	7f 4f       	sbci	r23, 0xFF	; 255
    2e1c:	8f 4f       	sbci	r24, 0xFF	; 255
    2e1e:	9f 4f       	sbci	r25, 0xFF	; 255
    2e20:	12 2f       	mov	r17, r18
    2e22:	3d 8f       	std	Y+29, r19	; 0x1d
    2e24:	4d 83       	std	Y+5, r20	; 0x05
    2e26:	b5 2f       	mov	r27, r21
    2e28:	f6 2f       	mov	r31, r22
    2e2a:	e7 2f       	mov	r30, r23
    2e2c:	89 83       	std	Y+1, r24	; 0x01
    2e2e:	89 2e       	mov	r8, r25
    2e30:	21 2f       	mov	r18, r17
    2e32:	3d 8d       	ldd	r19, Y+29	; 0x1d
    2e34:	4d 81       	ldd	r20, Y+5	; 0x05
    2e36:	5b 2f       	mov	r21, r27
    2e38:	6f 2f       	mov	r22, r31
    2e3a:	7e 2f       	mov	r23, r30
    2e3c:	89 81       	ldd	r24, Y+1	; 0x01
    2e3e:	98 2d       	mov	r25, r8
    2e40:	01 e2       	ldi	r16, 0x21	; 33
    2e42:	0e 94 93 29 	call	0x5326	; 0x5326 <__ashrdi3>
    2e46:	2d 83       	std	Y+5, r18	; 0x05
    2e48:	3e 83       	std	Y+6, r19	; 0x06
    2e4a:	4f 83       	std	Y+7, r20	; 0x07
    2e4c:	58 87       	std	Y+8, r21	; 0x08
			OFFi = (3*(TEMP-2000)*(TEMP-2000))/2;
    2e4e:	53 01       	movw	r10, r6
    2e50:	42 01       	movw	r8, r4
    2e52:	50 ed       	ldi	r21, 0xD0	; 208
    2e54:	85 1a       	sub	r8, r21
    2e56:	57 e0       	ldi	r21, 0x07	; 7
    2e58:	95 0a       	sbc	r9, r21
    2e5a:	a1 08       	sbc	r10, r1
    2e5c:	b1 08       	sbc	r11, r1
    2e5e:	d5 01       	movw	r26, r10
    2e60:	c4 01       	movw	r24, r8
    2e62:	88 0f       	add	r24, r24
    2e64:	99 1f       	adc	r25, r25
    2e66:	aa 1f       	adc	r26, r26
    2e68:	bb 1f       	adc	r27, r27
    2e6a:	9c 01       	movw	r18, r24
    2e6c:	ad 01       	movw	r20, r26
    2e6e:	28 0d       	add	r18, r8
    2e70:	39 1d       	adc	r19, r9
    2e72:	4a 1d       	adc	r20, r10
    2e74:	5b 1d       	adc	r21, r11
    2e76:	c5 01       	movw	r24, r10
    2e78:	b4 01       	movw	r22, r8
    2e7a:	0e 94 e6 28 	call	0x51cc	; 0x51cc <__mulsi3>
    2e7e:	8b 01       	movw	r16, r22
    2e80:	9c 01       	movw	r18, r24
    2e82:	99 23       	and	r25, r25
    2e84:	24 f4       	brge	.+8      	; 0x2e8e <_ZN6MS58379calculateEv+0x7f4>
    2e86:	0f 5f       	subi	r16, 0xFF	; 255
    2e88:	1f 4f       	sbci	r17, 0xFF	; 255
    2e8a:	2f 4f       	sbci	r18, 0xFF	; 255
    2e8c:	3f 4f       	sbci	r19, 0xFF	; 255
    2e8e:	c9 01       	movw	r24, r18
    2e90:	b8 01       	movw	r22, r16
    2e92:	95 95       	asr	r25
    2e94:	87 95       	ror	r24
    2e96:	77 95       	ror	r23
    2e98:	67 95       	ror	r22
    2e9a:	69 83       	std	Y+1, r22	; 0x01
    2e9c:	7a 83       	std	Y+2, r23	; 0x02
    2e9e:	8b 83       	std	Y+3, r24	; 0x03
    2ea0:	9c 83       	std	Y+4, r25	; 0x04
			SENSi = (5*(TEMP-2000)*(TEMP-2000))/8;
    2ea2:	d5 01       	movw	r26, r10
    2ea4:	c4 01       	movw	r24, r8
    2ea6:	88 0f       	add	r24, r24
    2ea8:	99 1f       	adc	r25, r25
    2eaa:	aa 1f       	adc	r26, r26
    2eac:	bb 1f       	adc	r27, r27
    2eae:	88 0f       	add	r24, r24
    2eb0:	99 1f       	adc	r25, r25
    2eb2:	aa 1f       	adc	r26, r26
    2eb4:	bb 1f       	adc	r27, r27
    2eb6:	9c 01       	movw	r18, r24
    2eb8:	ad 01       	movw	r20, r26
    2eba:	28 0d       	add	r18, r8
    2ebc:	39 1d       	adc	r19, r9
    2ebe:	4a 1d       	adc	r20, r10
    2ec0:	5b 1d       	adc	r21, r11
    2ec2:	c5 01       	movw	r24, r10
    2ec4:	b4 01       	movw	r22, r8
    2ec6:	0e 94 e6 28 	call	0x51cc	; 0x51cc <__mulsi3>
    2eca:	8b 01       	movw	r16, r22
    2ecc:	9c 01       	movw	r18, r24
    2ece:	99 23       	and	r25, r25
    2ed0:	24 f4       	brge	.+8      	; 0x2eda <_ZN6MS58379calculateEv+0x840>
    2ed2:	09 5f       	subi	r16, 0xF9	; 249
    2ed4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ed6:	2f 4f       	sbci	r18, 0xFF	; 255
    2ed8:	3f 4f       	sbci	r19, 0xFF	; 255
    2eda:	78 01       	movw	r14, r16
    2edc:	89 01       	movw	r16, r18
    2ede:	68 94       	set
    2ee0:	12 f8       	bld	r1, 2
    2ee2:	15 95       	asr	r17
    2ee4:	07 95       	ror	r16
    2ee6:	f7 94       	ror	r15
    2ee8:	e7 94       	ror	r14
    2eea:	16 94       	lsr	r1
    2eec:	d1 f7       	brne	.-12     	; 0x2ee2 <_ZN6MS58379calculateEv+0x848>
			if((TEMP/100)<-15){    //Very low temp
    2eee:	71 ec       	ldi	r23, 0xC1	; 193
    2ef0:	47 16       	cp	r4, r23
    2ef2:	79 ef       	ldi	r23, 0xF9	; 249
    2ef4:	57 06       	cpc	r5, r23
    2ef6:	7f ef       	ldi	r23, 0xFF	; 255
    2ef8:	67 06       	cpc	r6, r23
    2efa:	77 06       	cpc	r7, r23
    2efc:	0c f0       	brlt	.+2      	; 0x2f00 <_ZN6MS58379calculateEv+0x866>
    2efe:	7f c1       	rjmp	.+766    	; 0x31fe <_ZN6MS58379calculateEv+0xb64>
				OFFi = OFFi+7*(TEMP+1500l)*(TEMP+1500l);
    2f00:	53 01       	movw	r10, r6
    2f02:	42 01       	movw	r8, r4
    2f04:	8c ed       	ldi	r24, 0xDC	; 220
    2f06:	88 0e       	add	r8, r24
    2f08:	85 e0       	ldi	r24, 0x05	; 5
    2f0a:	98 1e       	adc	r9, r24
    2f0c:	a1 1c       	adc	r10, r1
    2f0e:	b1 1c       	adc	r11, r1
    2f10:	d5 01       	movw	r26, r10
    2f12:	c4 01       	movw	r24, r8
    2f14:	88 0f       	add	r24, r24
    2f16:	99 1f       	adc	r25, r25
    2f18:	aa 1f       	adc	r26, r26
    2f1a:	bb 1f       	adc	r27, r27
    2f1c:	88 0f       	add	r24, r24
    2f1e:	99 1f       	adc	r25, r25
    2f20:	aa 1f       	adc	r26, r26
    2f22:	bb 1f       	adc	r27, r27
    2f24:	88 0f       	add	r24, r24
    2f26:	99 1f       	adc	r25, r25
    2f28:	aa 1f       	adc	r26, r26
    2f2a:	bb 1f       	adc	r27, r27
    2f2c:	9c 01       	movw	r18, r24
    2f2e:	ad 01       	movw	r20, r26
    2f30:	28 19       	sub	r18, r8
    2f32:	39 09       	sbc	r19, r9
    2f34:	4a 09       	sbc	r20, r10
    2f36:	5b 09       	sbc	r21, r11
    2f38:	c5 01       	movw	r24, r10
    2f3a:	b4 01       	movw	r22, r8
    2f3c:	0e 94 e6 28 	call	0x51cc	; 0x51cc <__mulsi3>
    2f40:	29 81       	ldd	r18, Y+1	; 0x01
    2f42:	3a 81       	ldd	r19, Y+2	; 0x02
    2f44:	4b 81       	ldd	r20, Y+3	; 0x03
    2f46:	5c 81       	ldd	r21, Y+4	; 0x04
    2f48:	26 0f       	add	r18, r22
    2f4a:	37 1f       	adc	r19, r23
    2f4c:	48 1f       	adc	r20, r24
    2f4e:	59 1f       	adc	r21, r25
    2f50:	29 83       	std	Y+1, r18	; 0x01
    2f52:	3a 83       	std	Y+2, r19	; 0x02
    2f54:	4b 83       	std	Y+3, r20	; 0x03
    2f56:	5c 83       	std	Y+4, r21	; 0x04
				SENSi = SENSi+4*(TEMP+1500l)*(TEMP+1500l);
    2f58:	a5 01       	movw	r20, r10
    2f5a:	94 01       	movw	r18, r8
    2f5c:	22 0f       	add	r18, r18
    2f5e:	33 1f       	adc	r19, r19
    2f60:	44 1f       	adc	r20, r20
    2f62:	55 1f       	adc	r21, r21
    2f64:	22 0f       	add	r18, r18
    2f66:	33 1f       	adc	r19, r19
    2f68:	44 1f       	adc	r20, r20
    2f6a:	55 1f       	adc	r21, r21
    2f6c:	c5 01       	movw	r24, r10
    2f6e:	b4 01       	movw	r22, r8
    2f70:	0e 94 e6 28 	call	0x51cc	; 0x51cc <__mulsi3>
    2f74:	e6 0e       	add	r14, r22
    2f76:	f7 1e       	adc	r15, r23
    2f78:	08 1f       	adc	r16, r24
    2f7a:	19 1f       	adc	r17, r25
    2f7c:	40 c1       	rjmp	.+640    	; 0x31fe <_ZN6MS58379calculateEv+0xb64>
			}
		}
		else if((TEMP/100)>=20){    //High temp
			Ti = 2*(dT*dT)/(137438953472LL);
    2f7e:	29 81       	ldd	r18, Y+1	; 0x01
    2f80:	3a 81       	ldd	r19, Y+2	; 0x02
    2f82:	4b 81       	ldd	r20, Y+3	; 0x03
    2f84:	5c 81       	ldd	r21, Y+4	; 0x04
    2f86:	ca 01       	movw	r24, r20
    2f88:	b9 01       	movw	r22, r18
    2f8a:	0e 94 e6 28 	call	0x51cc	; 0x51cc <__mulsi3>
    2f8e:	4b 01       	movw	r8, r22
    2f90:	5c 01       	movw	r10, r24
    2f92:	88 0c       	add	r8, r8
    2f94:	99 1c       	adc	r9, r9
    2f96:	aa 1c       	adc	r10, r10
    2f98:	bb 1c       	adc	r11, r11
    2f9a:	75 01       	movw	r14, r10
    2f9c:	64 01       	movw	r12, r8
    2f9e:	ff 0c       	add	r15, r15
    2fa0:	cc 08       	sbc	r12, r12
    2fa2:	dc 2c       	mov	r13, r12
    2fa4:	76 01       	movw	r14, r12
    2fa6:	18 2d       	mov	r17, r8
    2fa8:	9d 8e       	std	Y+29, r9	; 0x1d
    2faa:	ad 82       	std	Y+5, r10	; 0x05
    2fac:	bb 2d       	mov	r27, r11
    2fae:	fc 2d       	mov	r31, r12
    2fb0:	ec 2d       	mov	r30, r12
    2fb2:	c9 82       	std	Y+1, r12	; 0x01
    2fb4:	0c 2d       	mov	r16, r12
    2fb6:	28 2d       	mov	r18, r8
    2fb8:	39 2d       	mov	r19, r9
    2fba:	4a 2d       	mov	r20, r10
    2fbc:	5b 2d       	mov	r21, r11
    2fbe:	6c 2d       	mov	r22, r12
    2fc0:	7c 2d       	mov	r23, r12
    2fc2:	8c 2d       	mov	r24, r12
    2fc4:	9c 2d       	mov	r25, r12
    2fc6:	a0 e0       	ldi	r26, 0x00	; 0
    2fc8:	0e 94 cf 29 	call	0x539e	; 0x539e <__cmpdi2_s8>
    2fcc:	84 f4       	brge	.+32     	; 0x2fee <_ZN6MS58379calculateEv+0x954>
    2fce:	21 50       	subi	r18, 0x01	; 1
    2fd0:	31 09       	sbc	r19, r1
    2fd2:	41 09       	sbc	r20, r1
    2fd4:	51 09       	sbc	r21, r1
    2fd6:	60 4e       	sbci	r22, 0xE0	; 224
    2fd8:	7f 4f       	sbci	r23, 0xFF	; 255
    2fda:	8f 4f       	sbci	r24, 0xFF	; 255
    2fdc:	9f 4f       	sbci	r25, 0xFF	; 255
    2fde:	12 2f       	mov	r17, r18
    2fe0:	3d 8f       	std	Y+29, r19	; 0x1d
    2fe2:	4d 83       	std	Y+5, r20	; 0x05
    2fe4:	b5 2f       	mov	r27, r21
    2fe6:	f6 2f       	mov	r31, r22
    2fe8:	e7 2f       	mov	r30, r23
    2fea:	89 83       	std	Y+1, r24	; 0x01
    2fec:	09 2f       	mov	r16, r25
    2fee:	21 2f       	mov	r18, r17
    2ff0:	3d 8d       	ldd	r19, Y+29	; 0x1d
    2ff2:	4d 81       	ldd	r20, Y+5	; 0x05
    2ff4:	5b 2f       	mov	r21, r27
    2ff6:	6f 2f       	mov	r22, r31
    2ff8:	7e 2f       	mov	r23, r30
    2ffa:	89 81       	ldd	r24, Y+1	; 0x01
    2ffc:	90 2f       	mov	r25, r16
    2ffe:	05 e2       	ldi	r16, 0x25	; 37
    3000:	0e 94 93 29 	call	0x5326	; 0x5326 <__ashrdi3>
    3004:	2d 83       	std	Y+5, r18	; 0x05
    3006:	3e 83       	std	Y+6, r19	; 0x06
    3008:	4f 83       	std	Y+7, r20	; 0x07
    300a:	58 87       	std	Y+8, r21	; 0x08
			OFFi = (1*(TEMP-2000)*(TEMP-2000))/16;
    300c:	c3 01       	movw	r24, r6
    300e:	b2 01       	movw	r22, r4
    3010:	60 5d       	subi	r22, 0xD0	; 208
    3012:	77 40       	sbci	r23, 0x07	; 7
    3014:	81 09       	sbc	r24, r1
    3016:	91 09       	sbc	r25, r1
    3018:	9b 01       	movw	r18, r22
    301a:	ac 01       	movw	r20, r24
    301c:	0e 94 e6 28 	call	0x51cc	; 0x51cc <__mulsi3>
    3020:	8b 01       	movw	r16, r22
    3022:	9c 01       	movw	r18, r24
    3024:	99 23       	and	r25, r25
    3026:	24 f4       	brge	.+8      	; 0x3030 <_ZN6MS58379calculateEv+0x996>
    3028:	01 5f       	subi	r16, 0xF1	; 241
    302a:	1f 4f       	sbci	r17, 0xFF	; 255
    302c:	2f 4f       	sbci	r18, 0xFF	; 255
    302e:	3f 4f       	sbci	r19, 0xFF	; 255
    3030:	48 01       	movw	r8, r16
    3032:	59 01       	movw	r10, r18
    3034:	68 94       	set
    3036:	13 f8       	bld	r1, 3
    3038:	b5 94       	asr	r11
    303a:	a7 94       	ror	r10
    303c:	97 94       	ror	r9
    303e:	87 94       	ror	r8
    3040:	16 94       	lsr	r1
    3042:	d1 f7       	brne	.-12     	; 0x3038 <_ZN6MS58379calculateEv+0x99e>
    3044:	89 82       	std	Y+1, r8	; 0x01
    3046:	9a 82       	std	Y+2, r9	; 0x02
    3048:	ab 82       	std	Y+3, r10	; 0x03
    304a:	bc 82       	std	Y+4, r11	; 0x04
			SENSi = 0;
    304c:	e1 2c       	mov	r14, r1
    304e:	f1 2c       	mov	r15, r1
    3050:	87 01       	movw	r16, r14
    3052:	d5 c0       	rjmp	.+426    	; 0x31fe <_ZN6MS58379calculateEv+0xb64>
	}
	
	OFF2 = OFF-OFFi;           //Calculate pressure and temp second order
	SENS2 = SENS-SENSi;
	
	TEMP = (TEMP-Ti);
    3054:	d3 01       	movw	r26, r6
    3056:	c2 01       	movw	r24, r4
    3058:	88 19       	sub	r24, r8
    305a:	99 09       	sbc	r25, r9
    305c:	aa 09       	sbc	r26, r10
    305e:	bb 09       	sbc	r27, r11
    3060:	f1 01       	movw	r30, r2
    3062:	80 8f       	std	Z+24, r24	; 0x18
    3064:	91 8f       	std	Z+25, r25	; 0x19
    3066:	a2 8f       	std	Z+26, r26	; 0x1a
    3068:	b3 8f       	std	Z+27, r27	; 0x1b
	
	if ( _model == MS5837_02BA ) {
		P = (((D1*SENS2)/2097152l-OFF2)/32768l);
    306a:	80 89       	ldd	r24, Z+16	; 0x10
    306c:	91 89       	ldd	r25, Z+17	; 0x11
    306e:	a2 89       	ldd	r26, Z+18	; 0x12
    3070:	b3 89       	ldd	r27, Z+19	; 0x13
    3072:	3c 01       	movw	r6, r24
    3074:	4d 01       	movw	r8, r26
    3076:	a1 2c       	mov	r10, r1
    3078:	b1 2c       	mov	r11, r1
    307a:	65 01       	movw	r12, r10
    307c:	8d 83       	std	Y+5, r24	; 0x05
    307e:	7e 82       	std	Y+6, r7	; 0x06
    3080:	8f 82       	std	Y+7, r8	; 0x07
    3082:	98 86       	std	Y+8, r9	; 0x08
    3084:	a9 86       	std	Y+9, r10	; 0x09
    3086:	ba 86       	std	Y+10, r11	; 0x0a
    3088:	cb 86       	std	Y+11, r12	; 0x0b
    308a:	dc 86       	std	Y+12, r13	; 0x0c
    308c:	27 01       	movw	r4, r14
    308e:	38 01       	movw	r6, r16
    3090:	77 0c       	add	r7, r7
    3092:	44 08       	sbc	r4, r4
    3094:	54 2c       	mov	r5, r4
    3096:	32 01       	movw	r6, r4
    3098:	2d 85       	ldd	r18, Y+13	; 0x0d
    309a:	3e 85       	ldd	r19, Y+14	; 0x0e
    309c:	4f 85       	ldd	r20, Y+15	; 0x0f
    309e:	58 89       	ldd	r21, Y+16	; 0x10
    30a0:	69 89       	ldd	r22, Y+17	; 0x11
    30a2:	7a 89       	ldd	r23, Y+18	; 0x12
    30a4:	8b 89       	ldd	r24, Y+19	; 0x13
    30a6:	9c 89       	ldd	r25, Y+20	; 0x14
    30a8:	ae 2c       	mov	r10, r14
    30aa:	bf 2c       	mov	r11, r15
    30ac:	c0 2e       	mov	r12, r16
    30ae:	d1 2e       	mov	r13, r17
    30b0:	e4 2c       	mov	r14, r4
    30b2:	f4 2c       	mov	r15, r4
    30b4:	04 2d       	mov	r16, r4
    30b6:	14 2d       	mov	r17, r4
    30b8:	0e 94 c6 29 	call	0x538c	; 0x538c <__subdi3>
    30bc:	a2 2e       	mov	r10, r18
    30be:	b3 2e       	mov	r11, r19
    30c0:	c4 2e       	mov	r12, r20
    30c2:	d5 2e       	mov	r13, r21
    30c4:	e6 2e       	mov	r14, r22
    30c6:	f7 2e       	mov	r15, r23
    30c8:	08 2f       	mov	r16, r24
    30ca:	19 2f       	mov	r17, r25
    30cc:	2d 81       	ldd	r18, Y+5	; 0x05
    30ce:	3e 81       	ldd	r19, Y+6	; 0x06
    30d0:	48 2d       	mov	r20, r8
    30d2:	59 2d       	mov	r21, r9
    30d4:	60 e0       	ldi	r22, 0x00	; 0
    30d6:	70 e0       	ldi	r23, 0x00	; 0
    30d8:	80 e0       	ldi	r24, 0x00	; 0
    30da:	90 e0       	ldi	r25, 0x00	; 0
    30dc:	0e 94 29 29 	call	0x5252	; 0x5252 <__muldi3>
    30e0:	12 2f       	mov	r17, r18
    30e2:	3d 87       	std	Y+13, r19	; 0x0d
    30e4:	4d 83       	std	Y+5, r20	; 0x05
    30e6:	b5 2f       	mov	r27, r21
    30e8:	f6 2f       	mov	r31, r22
    30ea:	e7 2f       	mov	r30, r23
    30ec:	78 2e       	mov	r7, r24
    30ee:	89 2e       	mov	r8, r25
    30f0:	a0 e0       	ldi	r26, 0x00	; 0
    30f2:	0e 94 cf 29 	call	0x539e	; 0x539e <__cmpdi2_s8>
    30f6:	84 f4       	brge	.+32     	; 0x3118 <_ZN6MS58379calculateEv+0xa7e>
    30f8:	21 50       	subi	r18, 0x01	; 1
    30fa:	31 09       	sbc	r19, r1
    30fc:	40 4e       	sbci	r20, 0xE0	; 224
    30fe:	5f 4f       	sbci	r21, 0xFF	; 255
    3100:	6f 4f       	sbci	r22, 0xFF	; 255
    3102:	7f 4f       	sbci	r23, 0xFF	; 255
    3104:	8f 4f       	sbci	r24, 0xFF	; 255
    3106:	9f 4f       	sbci	r25, 0xFF	; 255
    3108:	12 2f       	mov	r17, r18
    310a:	3d 87       	std	Y+13, r19	; 0x0d
    310c:	4d 83       	std	Y+5, r20	; 0x05
    310e:	b5 2f       	mov	r27, r21
    3110:	f6 2f       	mov	r31, r22
    3112:	e7 2f       	mov	r30, r23
    3114:	78 2e       	mov	r7, r24
    3116:	89 2e       	mov	r8, r25
    3118:	21 2f       	mov	r18, r17
    311a:	3d 85       	ldd	r19, Y+13	; 0x0d
    311c:	4d 81       	ldd	r20, Y+5	; 0x05
    311e:	5b 2f       	mov	r21, r27
    3120:	6f 2f       	mov	r22, r31
    3122:	7e 2f       	mov	r23, r30
    3124:	87 2d       	mov	r24, r7
    3126:	98 2d       	mov	r25, r8
    3128:	05 e1       	ldi	r16, 0x15	; 21
    312a:	0e 94 93 29 	call	0x5326	; 0x5326 <__ashrdi3>
    312e:	82 2e       	mov	r8, r18
    3130:	93 2e       	mov	r9, r19
    3132:	4d 87       	std	Y+13, r20	; 0x0d
    3134:	5d 83       	std	Y+5, r21	; 0x05
    3136:	b6 2f       	mov	r27, r22
    3138:	a7 2f       	mov	r26, r23
    313a:	f8 2f       	mov	r31, r24
    313c:	e9 2f       	mov	r30, r25
    313e:	49 80       	ldd	r4, Y+1	; 0x01
    3140:	5a 80       	ldd	r5, Y+2	; 0x02
    3142:	6b 80       	ldd	r6, Y+3	; 0x03
    3144:	7c 80       	ldd	r7, Y+4	; 0x04
    3146:	77 0c       	add	r7, r7
    3148:	44 08       	sbc	r4, r4
    314a:	54 2c       	mov	r5, r4
    314c:	32 01       	movw	r6, r4
    314e:	2d 89       	ldd	r18, Y+21	; 0x15
    3150:	3e 89       	ldd	r19, Y+22	; 0x16
    3152:	4f 89       	ldd	r20, Y+23	; 0x17
    3154:	58 8d       	ldd	r21, Y+24	; 0x18
    3156:	69 8d       	ldd	r22, Y+25	; 0x19
    3158:	7a 8d       	ldd	r23, Y+26	; 0x1a
    315a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    315c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    315e:	a9 80       	ldd	r10, Y+1	; 0x01
    3160:	ba 80       	ldd	r11, Y+2	; 0x02
    3162:	cb 80       	ldd	r12, Y+3	; 0x03
    3164:	dc 80       	ldd	r13, Y+4	; 0x04
    3166:	e4 2c       	mov	r14, r4
    3168:	f4 2c       	mov	r15, r4
    316a:	04 2d       	mov	r16, r4
    316c:	14 2d       	mov	r17, r4
    316e:	0e 94 c6 29 	call	0x538c	; 0x538c <__subdi3>
    3172:	a2 2e       	mov	r10, r18
    3174:	b3 2e       	mov	r11, r19
    3176:	c4 2e       	mov	r12, r20
    3178:	d5 2e       	mov	r13, r21
    317a:	e6 2e       	mov	r14, r22
    317c:	f7 2e       	mov	r15, r23
    317e:	08 2f       	mov	r16, r24
    3180:	19 2f       	mov	r17, r25
    3182:	28 2d       	mov	r18, r8
    3184:	39 2d       	mov	r19, r9
    3186:	4d 85       	ldd	r20, Y+13	; 0x0d
    3188:	5d 81       	ldd	r21, Y+5	; 0x05
    318a:	6b 2f       	mov	r22, r27
    318c:	7a 2f       	mov	r23, r26
    318e:	8f 2f       	mov	r24, r31
    3190:	9e 2f       	mov	r25, r30
    3192:	0e 94 c6 29 	call	0x538c	; 0x538c <__subdi3>
    3196:	12 2f       	mov	r17, r18
    3198:	3d 83       	std	Y+5, r19	; 0x05
    319a:	49 83       	std	Y+1, r20	; 0x01
    319c:	b5 2f       	mov	r27, r21
    319e:	f6 2f       	mov	r31, r22
    31a0:	e7 2f       	mov	r30, r23
    31a2:	78 2e       	mov	r7, r24
    31a4:	89 2e       	mov	r8, r25
    31a6:	a0 e0       	ldi	r26, 0x00	; 0
    31a8:	0e 94 cf 29 	call	0x539e	; 0x539e <__cmpdi2_s8>
    31ac:	84 f4       	brge	.+32     	; 0x31ce <_ZN6MS58379calculateEv+0xb34>
    31ae:	21 50       	subi	r18, 0x01	; 1
    31b0:	30 48       	sbci	r19, 0x80	; 128
    31b2:	4f 4f       	sbci	r20, 0xFF	; 255
    31b4:	5f 4f       	sbci	r21, 0xFF	; 255
    31b6:	6f 4f       	sbci	r22, 0xFF	; 255
    31b8:	7f 4f       	sbci	r23, 0xFF	; 255
    31ba:	8f 4f       	sbci	r24, 0xFF	; 255
    31bc:	9f 4f       	sbci	r25, 0xFF	; 255
    31be:	12 2f       	mov	r17, r18
    31c0:	3d 83       	std	Y+5, r19	; 0x05
    31c2:	49 83       	std	Y+1, r20	; 0x01
    31c4:	b5 2f       	mov	r27, r21
    31c6:	f6 2f       	mov	r31, r22
    31c8:	e7 2f       	mov	r30, r23
    31ca:	78 2e       	mov	r7, r24
    31cc:	89 2e       	mov	r8, r25
    31ce:	21 2f       	mov	r18, r17
    31d0:	3d 81       	ldd	r19, Y+5	; 0x05
    31d2:	49 81       	ldd	r20, Y+1	; 0x01
    31d4:	5b 2f       	mov	r21, r27
    31d6:	6f 2f       	mov	r22, r31
    31d8:	7e 2f       	mov	r23, r30
    31da:	87 2d       	mov	r24, r7
    31dc:	98 2d       	mov	r25, r8
    31de:	0f e0       	ldi	r16, 0x0F	; 15
    31e0:	0e 94 93 29 	call	0x5326	; 0x5326 <__ashrdi3>
    31e4:	d1 01       	movw	r26, r2
    31e6:	5c 96       	adiw	r26, 0x1c	; 28
    31e8:	2c 93       	st	X, r18
    31ea:	5c 97       	sbiw	r26, 0x1c	; 28
    31ec:	5d 96       	adiw	r26, 0x1d	; 29
    31ee:	3c 93       	st	X, r19
    31f0:	5d 97       	sbiw	r26, 0x1d	; 29
    31f2:	5e 96       	adiw	r26, 0x1e	; 30
    31f4:	4c 93       	st	X, r20
    31f6:	5e 97       	sbiw	r26, 0x1e	; 30
    31f8:	5f 96       	adiw	r26, 0x1f	; 31
    31fa:	5c 93       	st	X, r21
    31fc:	da c0       	rjmp	.+436    	; 0x33b2 <_ZN6MS58379calculateEv+0xd18>
	}
	
	OFF2 = OFF-OFFi;           //Calculate pressure and temp second order
	SENS2 = SENS-SENSi;
	
	TEMP = (TEMP-Ti);
    31fe:	8d 80       	ldd	r8, Y+5	; 0x05
    3200:	9e 80       	ldd	r9, Y+6	; 0x06
    3202:	af 80       	ldd	r10, Y+7	; 0x07
    3204:	b8 84       	ldd	r11, Y+8	; 0x08
    3206:	48 18       	sub	r4, r8
    3208:	59 08       	sbc	r5, r9
    320a:	6a 08       	sbc	r6, r10
    320c:	7b 08       	sbc	r7, r11
    320e:	d1 01       	movw	r26, r2
    3210:	58 96       	adiw	r26, 0x18	; 24
    3212:	4d 92       	st	X+, r4
    3214:	5d 92       	st	X+, r5
    3216:	6d 92       	st	X+, r6
    3218:	7c 92       	st	X, r7
    321a:	5b 97       	sbiw	r26, 0x1b	; 27
	
	if ( _model == MS5837_02BA ) {
		P = (((D1*SENS2)/2097152l-OFF2)/32768l);
	} else {
		P = (((D1*SENS2)/2097152l-OFF2)/8192l);
    321c:	50 96       	adiw	r26, 0x10	; 16
    321e:	8d 91       	ld	r24, X+
    3220:	9d 91       	ld	r25, X+
    3222:	0d 90       	ld	r0, X+
    3224:	bc 91       	ld	r27, X
    3226:	a0 2d       	mov	r26, r0
    3228:	3c 01       	movw	r6, r24
    322a:	4d 01       	movw	r8, r26
    322c:	a1 2c       	mov	r10, r1
    322e:	b1 2c       	mov	r11, r1
    3230:	65 01       	movw	r12, r10
    3232:	8d 83       	std	Y+5, r24	; 0x05
    3234:	7e 82       	std	Y+6, r7	; 0x06
    3236:	8f 82       	std	Y+7, r8	; 0x07
    3238:	98 86       	std	Y+8, r9	; 0x08
    323a:	a9 86       	std	Y+9, r10	; 0x09
    323c:	ba 86       	std	Y+10, r11	; 0x0a
    323e:	cb 86       	std	Y+11, r12	; 0x0b
    3240:	dc 86       	std	Y+12, r13	; 0x0c
    3242:	27 01       	movw	r4, r14
    3244:	38 01       	movw	r6, r16
    3246:	77 0c       	add	r7, r7
    3248:	44 08       	sbc	r4, r4
    324a:	54 2c       	mov	r5, r4
    324c:	32 01       	movw	r6, r4
    324e:	2d 89       	ldd	r18, Y+21	; 0x15
    3250:	3e 89       	ldd	r19, Y+22	; 0x16
    3252:	4f 89       	ldd	r20, Y+23	; 0x17
    3254:	58 8d       	ldd	r21, Y+24	; 0x18
    3256:	69 8d       	ldd	r22, Y+25	; 0x19
    3258:	7a 8d       	ldd	r23, Y+26	; 0x1a
    325a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    325c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    325e:	ae 2c       	mov	r10, r14
    3260:	bf 2c       	mov	r11, r15
    3262:	c0 2e       	mov	r12, r16
    3264:	d1 2e       	mov	r13, r17
    3266:	e4 2c       	mov	r14, r4
    3268:	f4 2c       	mov	r15, r4
    326a:	04 2d       	mov	r16, r4
    326c:	14 2d       	mov	r17, r4
    326e:	0e 94 c6 29 	call	0x538c	; 0x538c <__subdi3>
    3272:	a2 2e       	mov	r10, r18
    3274:	b3 2e       	mov	r11, r19
    3276:	c4 2e       	mov	r12, r20
    3278:	d5 2e       	mov	r13, r21
    327a:	e6 2e       	mov	r14, r22
    327c:	f7 2e       	mov	r15, r23
    327e:	08 2f       	mov	r16, r24
    3280:	19 2f       	mov	r17, r25
    3282:	2d 81       	ldd	r18, Y+5	; 0x05
    3284:	3e 81       	ldd	r19, Y+6	; 0x06
    3286:	48 2d       	mov	r20, r8
    3288:	59 2d       	mov	r21, r9
    328a:	60 e0       	ldi	r22, 0x00	; 0
    328c:	70 e0       	ldi	r23, 0x00	; 0
    328e:	80 e0       	ldi	r24, 0x00	; 0
    3290:	90 e0       	ldi	r25, 0x00	; 0
    3292:	0e 94 29 29 	call	0x5252	; 0x5252 <__muldi3>
    3296:	12 2f       	mov	r17, r18
    3298:	3d 8b       	std	Y+21, r19	; 0x15
    329a:	4d 83       	std	Y+5, r20	; 0x05
    329c:	b5 2f       	mov	r27, r21
    329e:	f6 2f       	mov	r31, r22
    32a0:	e7 2f       	mov	r30, r23
    32a2:	58 2e       	mov	r5, r24
    32a4:	69 2e       	mov	r6, r25
    32a6:	a0 e0       	ldi	r26, 0x00	; 0
    32a8:	0e 94 cf 29 	call	0x539e	; 0x539e <__cmpdi2_s8>
    32ac:	84 f4       	brge	.+32     	; 0x32ce <_ZN6MS58379calculateEv+0xc34>
    32ae:	21 50       	subi	r18, 0x01	; 1
    32b0:	31 09       	sbc	r19, r1
    32b2:	40 4e       	sbci	r20, 0xE0	; 224
    32b4:	5f 4f       	sbci	r21, 0xFF	; 255
    32b6:	6f 4f       	sbci	r22, 0xFF	; 255
    32b8:	7f 4f       	sbci	r23, 0xFF	; 255
    32ba:	8f 4f       	sbci	r24, 0xFF	; 255
    32bc:	9f 4f       	sbci	r25, 0xFF	; 255
    32be:	12 2f       	mov	r17, r18
    32c0:	3d 8b       	std	Y+21, r19	; 0x15
    32c2:	4d 83       	std	Y+5, r20	; 0x05
    32c4:	b5 2f       	mov	r27, r21
    32c6:	f6 2f       	mov	r31, r22
    32c8:	e7 2f       	mov	r30, r23
    32ca:	58 2e       	mov	r5, r24
    32cc:	69 2e       	mov	r6, r25
    32ce:	21 2f       	mov	r18, r17
    32d0:	3d 89       	ldd	r19, Y+21	; 0x15
    32d2:	4d 81       	ldd	r20, Y+5	; 0x05
    32d4:	5b 2f       	mov	r21, r27
    32d6:	6f 2f       	mov	r22, r31
    32d8:	7e 2f       	mov	r23, r30
    32da:	85 2d       	mov	r24, r5
    32dc:	96 2d       	mov	r25, r6
    32de:	05 e1       	ldi	r16, 0x15	; 21
    32e0:	0e 94 93 29 	call	0x5326	; 0x5326 <__ashrdi3>
    32e4:	82 2e       	mov	r8, r18
    32e6:	93 2e       	mov	r9, r19
    32e8:	4d 8b       	std	Y+21, r20	; 0x15
    32ea:	5d 83       	std	Y+5, r21	; 0x05
    32ec:	b6 2f       	mov	r27, r22
    32ee:	a7 2f       	mov	r26, r23
    32f0:	f8 2f       	mov	r31, r24
    32f2:	e9 2f       	mov	r30, r25
    32f4:	49 80       	ldd	r4, Y+1	; 0x01
    32f6:	5a 80       	ldd	r5, Y+2	; 0x02
    32f8:	6b 80       	ldd	r6, Y+3	; 0x03
    32fa:	7c 80       	ldd	r7, Y+4	; 0x04
    32fc:	77 0c       	add	r7, r7
    32fe:	44 08       	sbc	r4, r4
    3300:	54 2c       	mov	r5, r4
    3302:	32 01       	movw	r6, r4
    3304:	2d 85       	ldd	r18, Y+13	; 0x0d
    3306:	3e 85       	ldd	r19, Y+14	; 0x0e
    3308:	4f 85       	ldd	r20, Y+15	; 0x0f
    330a:	58 89       	ldd	r21, Y+16	; 0x10
    330c:	69 89       	ldd	r22, Y+17	; 0x11
    330e:	7a 89       	ldd	r23, Y+18	; 0x12
    3310:	8b 89       	ldd	r24, Y+19	; 0x13
    3312:	9c 89       	ldd	r25, Y+20	; 0x14
    3314:	a9 80       	ldd	r10, Y+1	; 0x01
    3316:	ba 80       	ldd	r11, Y+2	; 0x02
    3318:	cb 80       	ldd	r12, Y+3	; 0x03
    331a:	dc 80       	ldd	r13, Y+4	; 0x04
    331c:	e4 2c       	mov	r14, r4
    331e:	f4 2c       	mov	r15, r4
    3320:	04 2d       	mov	r16, r4
    3322:	14 2d       	mov	r17, r4
    3324:	0e 94 c6 29 	call	0x538c	; 0x538c <__subdi3>
    3328:	a2 2e       	mov	r10, r18
    332a:	b3 2e       	mov	r11, r19
    332c:	c4 2e       	mov	r12, r20
    332e:	d5 2e       	mov	r13, r21
    3330:	e6 2e       	mov	r14, r22
    3332:	f7 2e       	mov	r15, r23
    3334:	08 2f       	mov	r16, r24
    3336:	19 2f       	mov	r17, r25
    3338:	28 2d       	mov	r18, r8
    333a:	39 2d       	mov	r19, r9
    333c:	4d 89       	ldd	r20, Y+21	; 0x15
    333e:	5d 81       	ldd	r21, Y+5	; 0x05
    3340:	6b 2f       	mov	r22, r27
    3342:	7a 2f       	mov	r23, r26
    3344:	8f 2f       	mov	r24, r31
    3346:	9e 2f       	mov	r25, r30
    3348:	0e 94 c6 29 	call	0x538c	; 0x538c <__subdi3>
    334c:	92 2e       	mov	r9, r18
    334e:	a3 2e       	mov	r10, r19
    3350:	b4 2e       	mov	r11, r20
    3352:	c5 2e       	mov	r12, r21
    3354:	d6 2e       	mov	r13, r22
    3356:	e7 2e       	mov	r14, r23
    3358:	78 2e       	mov	r7, r24
    335a:	89 2e       	mov	r8, r25
    335c:	a0 e0       	ldi	r26, 0x00	; 0
    335e:	0e 94 cf 29 	call	0x539e	; 0x539e <__cmpdi2_s8>
    3362:	84 f4       	brge	.+32     	; 0x3384 <_ZN6MS58379calculateEv+0xcea>
    3364:	21 50       	subi	r18, 0x01	; 1
    3366:	30 4e       	sbci	r19, 0xE0	; 224
    3368:	4f 4f       	sbci	r20, 0xFF	; 255
    336a:	5f 4f       	sbci	r21, 0xFF	; 255
    336c:	6f 4f       	sbci	r22, 0xFF	; 255
    336e:	7f 4f       	sbci	r23, 0xFF	; 255
    3370:	8f 4f       	sbci	r24, 0xFF	; 255
    3372:	9f 4f       	sbci	r25, 0xFF	; 255
    3374:	92 2e       	mov	r9, r18
    3376:	a3 2e       	mov	r10, r19
    3378:	b4 2e       	mov	r11, r20
    337a:	c5 2e       	mov	r12, r21
    337c:	d6 2e       	mov	r13, r22
    337e:	e7 2e       	mov	r14, r23
    3380:	78 2e       	mov	r7, r24
    3382:	89 2e       	mov	r8, r25
    3384:	29 2d       	mov	r18, r9
    3386:	3a 2d       	mov	r19, r10
    3388:	4b 2d       	mov	r20, r11
    338a:	5c 2d       	mov	r21, r12
    338c:	6d 2d       	mov	r22, r13
    338e:	7e 2d       	mov	r23, r14
    3390:	87 2d       	mov	r24, r7
    3392:	98 2d       	mov	r25, r8
    3394:	0d e0       	ldi	r16, 0x0D	; 13
    3396:	0e 94 93 29 	call	0x5326	; 0x5326 <__ashrdi3>
    339a:	d1 01       	movw	r26, r2
    339c:	5c 96       	adiw	r26, 0x1c	; 28
    339e:	2c 93       	st	X, r18
    33a0:	5c 97       	sbiw	r26, 0x1c	; 28
    33a2:	5d 96       	adiw	r26, 0x1d	; 29
    33a4:	3c 93       	st	X, r19
    33a6:	5d 97       	sbiw	r26, 0x1d	; 29
    33a8:	5e 96       	adiw	r26, 0x1e	; 30
    33aa:	4c 93       	st	X, r20
    33ac:	5e 97       	sbiw	r26, 0x1e	; 30
    33ae:	5f 96       	adiw	r26, 0x1f	; 31
    33b0:	5c 93       	st	X, r21
	}
}
    33b2:	a5 96       	adiw	r28, 0x25	; 37
    33b4:	0f b6       	in	r0, 0x3f	; 63
    33b6:	f8 94       	cli
    33b8:	de bf       	out	0x3e, r29	; 62
    33ba:	0f be       	out	0x3f, r0	; 63
    33bc:	cd bf       	out	0x3d, r28	; 61
    33be:	df 91       	pop	r29
    33c0:	cf 91       	pop	r28
    33c2:	1f 91       	pop	r17
    33c4:	0f 91       	pop	r16
    33c6:	ff 90       	pop	r15
    33c8:	ef 90       	pop	r14
    33ca:	df 90       	pop	r13
    33cc:	cf 90       	pop	r12
    33ce:	bf 90       	pop	r11
    33d0:	af 90       	pop	r10
    33d2:	9f 90       	pop	r9
    33d4:	8f 90       	pop	r8
    33d6:	7f 90       	pop	r7
    33d8:	6f 90       	pop	r6
    33da:	5f 90       	pop	r5
    33dc:	4f 90       	pop	r4
    33de:	3f 90       	pop	r3
    33e0:	2f 90       	pop	r2
    33e2:	08 95       	ret

000033e4 <_ZN6MS58378pressureEf>:

float MS5837::pressure(float conversion) {
    33e4:	cf 92       	push	r12
    33e6:	df 92       	push	r13
    33e8:	ef 92       	push	r14
    33ea:	ff 92       	push	r15
    33ec:	6a 01       	movw	r12, r20
    33ee:	7b 01       	movw	r14, r22
	if ( _model == MS5837_02BA ) {
    33f0:	fc 01       	movw	r30, r24
    33f2:	20 a1       	ldd	r18, Z+32	; 0x20
    33f4:	21 30       	cpi	r18, 0x01	; 1
    33f6:	89 f4       	brne	.+34     	; 0x341a <_ZN6MS58378pressureEf+0x36>
		return P*conversion/100.0f;
    33f8:	64 8d       	ldd	r22, Z+28	; 0x1c
    33fa:	75 8d       	ldd	r23, Z+29	; 0x1d
    33fc:	86 8d       	ldd	r24, Z+30	; 0x1e
    33fe:	97 8d       	ldd	r25, Z+31	; 0x1f
    3400:	0e 94 cf 27 	call	0x4f9e	; 0x4f9e <__floatsisf>
    3404:	a7 01       	movw	r20, r14
    3406:	96 01       	movw	r18, r12
    3408:	0e 94 83 28 	call	0x5106	; 0x5106 <__mulsf3>
    340c:	20 e0       	ldi	r18, 0x00	; 0
    340e:	30 e0       	ldi	r19, 0x00	; 0
    3410:	48 ec       	ldi	r20, 0xC8	; 200
    3412:	52 e4       	ldi	r21, 0x42	; 66
    3414:	0e 94 39 27 	call	0x4e72	; 0x4e72 <__divsf3>
    3418:	11 c0       	rjmp	.+34     	; 0x343c <_ZN6MS58378pressureEf+0x58>
	}
	else {
		return P*conversion/10.0f;
    341a:	fc 01       	movw	r30, r24
    341c:	64 8d       	ldd	r22, Z+28	; 0x1c
    341e:	75 8d       	ldd	r23, Z+29	; 0x1d
    3420:	86 8d       	ldd	r24, Z+30	; 0x1e
    3422:	97 8d       	ldd	r25, Z+31	; 0x1f
    3424:	0e 94 cf 27 	call	0x4f9e	; 0x4f9e <__floatsisf>
    3428:	a7 01       	movw	r20, r14
    342a:	96 01       	movw	r18, r12
    342c:	0e 94 83 28 	call	0x5106	; 0x5106 <__mulsf3>
    3430:	20 e0       	ldi	r18, 0x00	; 0
    3432:	30 e0       	ldi	r19, 0x00	; 0
    3434:	40 e2       	ldi	r20, 0x20	; 32
    3436:	51 e4       	ldi	r21, 0x41	; 65
    3438:	0e 94 39 27 	call	0x4e72	; 0x4e72 <__divsf3>
	}
}
    343c:	ff 90       	pop	r15
    343e:	ef 90       	pop	r14
    3440:	df 90       	pop	r13
    3442:	cf 90       	pop	r12
    3444:	08 95       	ret

00003446 <_ZN6MS583711temperatureEv>:

float MS5837::temperature() {
	return TEMP/100.0f;
    3446:	fc 01       	movw	r30, r24
    3448:	60 8d       	ldd	r22, Z+24	; 0x18
    344a:	71 8d       	ldd	r23, Z+25	; 0x19
    344c:	82 8d       	ldd	r24, Z+26	; 0x1a
    344e:	93 8d       	ldd	r25, Z+27	; 0x1b
    3450:	0e 94 cf 27 	call	0x4f9e	; 0x4f9e <__floatsisf>
    3454:	20 e0       	ldi	r18, 0x00	; 0
    3456:	30 e0       	ldi	r19, 0x00	; 0
    3458:	48 ec       	ldi	r20, 0xC8	; 200
    345a:	52 e4       	ldi	r21, 0x42	; 66
    345c:	0c 94 39 27 	jmp	0x4e72	; 0x4e72 <__divsf3>
}
    3460:	08 95       	ret

00003462 <_ZN6MS58374crc4EPj>:
float MS5837::altitude() {
	return (1-pow((pressure()/1013.25),.190284))*145366.45*.3048;
}*/


uint8_t MS5837::crc4(uint16_t n_prom[]) {
    3462:	cf 93       	push	r28
    3464:	df 93       	push	r29
    3466:	eb 01       	movw	r28, r22
	uint16_t n_rem = 0;

	n_prom[0] = ((n_prom[0]) & 0x0FFF);
    3468:	88 81       	ld	r24, Y
    346a:	99 81       	ldd	r25, Y+1	; 0x01
    346c:	9f 70       	andi	r25, 0x0F	; 15
    346e:	99 83       	std	Y+1, r25	; 0x01
    3470:	88 83       	st	Y, r24
	n_prom[7] = 0;
    3472:	1f 86       	std	Y+15, r1	; 0x0f
    3474:	1e 86       	std	Y+14, r1	; 0x0e
    3476:	40 e0       	ldi	r20, 0x00	; 0
    3478:	50 e0       	ldi	r21, 0x00	; 0
	return (1-pow((pressure()/1013.25),.190284))*145366.45*.3048;
}*/


uint8_t MS5837::crc4(uint16_t n_prom[]) {
	uint16_t n_rem = 0;
    347a:	80 e0       	ldi	r24, 0x00	; 0
    347c:	90 e0       	ldi	r25, 0x00	; 0

	n_prom[0] = ((n_prom[0]) & 0x0FFF);
	n_prom[7] = 0;

	for ( uint8_t i = 0 ; i < 16; i++ ) {
		if ( i%2 == 1 ) {
    347e:	40 ff       	sbrs	r20, 0
    3480:	07 c0       	rjmp	.+14     	; 0x3490 <_ZN6MS58374crc4EPj+0x2e>
			n_rem ^= (uint16_t)((n_prom[i>>1]) & 0x00FF);
    3482:	fa 01       	movw	r30, r20
    3484:	ee 7f       	andi	r30, 0xFE	; 254
    3486:	ec 0f       	add	r30, r28
    3488:	fd 1f       	adc	r31, r29
    348a:	20 81       	ld	r18, Z
    348c:	82 27       	eor	r24, r18
    348e:	1d c0       	rjmp	.+58     	; 0x34ca <_ZN6MS58374crc4EPj+0x68>
			} else {
			n_rem ^= (uint16_t)(n_prom[i>>1] >> 8);
    3490:	fa 01       	movw	r30, r20
    3492:	ee 7f       	andi	r30, 0xFE	; 254
    3494:	ec 0f       	add	r30, r28
    3496:	fd 1f       	adc	r31, r29
    3498:	a1 81       	ldd	r26, Z+1	; 0x01
    349a:	b0 e0       	ldi	r27, 0x00	; 0
    349c:	8a 27       	eor	r24, r26
    349e:	9b 27       	eor	r25, r27
    34a0:	14 c0       	rjmp	.+40     	; 0x34ca <_ZN6MS58374crc4EPj+0x68>
		}
		for ( uint8_t n_bit = 8 ; n_bit > 0 ; n_bit-- ) {
			if ( n_rem & 0x8000 ) {
    34a2:	99 23       	and	r25, r25
    34a4:	2c f4       	brge	.+10     	; 0x34b0 <_ZN6MS58374crc4EPj+0x4e>
				n_rem = (n_rem << 1) ^ 0x3000;
    34a6:	88 0f       	add	r24, r24
    34a8:	99 1f       	adc	r25, r25
    34aa:	30 e3       	ldi	r19, 0x30	; 48
    34ac:	93 27       	eor	r25, r19
    34ae:	02 c0       	rjmp	.+4      	; 0x34b4 <_ZN6MS58374crc4EPj+0x52>
				} else {
				n_rem = (n_rem << 1);
    34b0:	88 0f       	add	r24, r24
    34b2:	99 1f       	adc	r25, r25
    34b4:	21 50       	subi	r18, 0x01	; 1
		if ( i%2 == 1 ) {
			n_rem ^= (uint16_t)((n_prom[i>>1]) & 0x00FF);
			} else {
			n_rem ^= (uint16_t)(n_prom[i>>1] >> 8);
		}
		for ( uint8_t n_bit = 8 ; n_bit > 0 ; n_bit-- ) {
    34b6:	a9 f7       	brne	.-22     	; 0x34a2 <_ZN6MS58374crc4EPj+0x40>
    34b8:	4f 5f       	subi	r20, 0xFF	; 255
    34ba:	5f 4f       	sbci	r21, 0xFF	; 255
	uint16_t n_rem = 0;

	n_prom[0] = ((n_prom[0]) & 0x0FFF);
	n_prom[7] = 0;

	for ( uint8_t i = 0 ; i < 16; i++ ) {
    34bc:	40 31       	cpi	r20, 0x10	; 16
    34be:	51 05       	cpc	r21, r1
    34c0:	f1 f6       	brne	.-68     	; 0x347e <_ZN6MS58374crc4EPj+0x1c>
		}
	}
	
	n_rem = ((n_rem >> 12) & 0x000F);

	return n_rem ^ 0x00;
    34c2:	89 2f       	mov	r24, r25
    34c4:	82 95       	swap	r24
    34c6:	8f 70       	andi	r24, 0x0F	; 15
    34c8:	02 c0       	rjmp	.+4      	; 0x34ce <_ZN6MS58374crc4EPj+0x6c>
	return (1-pow((pressure()/1013.25),.190284))*145366.45*.3048;
}*/


uint8_t MS5837::crc4(uint16_t n_prom[]) {
	uint16_t n_rem = 0;
    34ca:	28 e0       	ldi	r18, 0x08	; 8
    34cc:	ea cf       	rjmp	.-44     	; 0x34a2 <_ZN6MS58374crc4EPj+0x40>
	}
	
	n_rem = ((n_rem >> 12) & 0x000F);

	return n_rem ^ 0x00;
    34ce:	df 91       	pop	r29
    34d0:	cf 91       	pop	r28
    34d2:	08 95       	ret

000034d4 <_ZN6MS58375beginEv>:

MS5837::MS5837(HardwareTimer &timer) : _timer(&timer) {
	fluidDensity = 1029;
}

bool MS5837::begin() {
    34d4:	cf 92       	push	r12
    34d6:	df 92       	push	r13
    34d8:	ef 92       	push	r14
    34da:	ff 92       	push	r15
    34dc:	0f 93       	push	r16
    34de:	1f 93       	push	r17
    34e0:	cf 93       	push	r28
    34e2:	df 93       	push	r29
    34e4:	6c 01       	movw	r12, r24
	Wire.begin();
    34e6:	85 e5       	ldi	r24, 0x55	; 85
    34e8:	98 e0       	ldi	r25, 0x08	; 8
    34ea:	0e 94 69 12 	call	0x24d2	; 0x24d2 <_ZN7TwoWire5beginEv>
	_timer->beginMs(10);
    34ee:	40 e0       	ldi	r20, 0x00	; 0
    34f0:	50 e0       	ldi	r21, 0x00	; 0
    34f2:	60 e2       	ldi	r22, 0x20	; 32
    34f4:	71 e4       	ldi	r23, 0x41	; 65
    34f6:	f6 01       	movw	r30, r12
    34f8:	82 a1       	ldd	r24, Z+34	; 0x22
    34fa:	93 a1       	ldd	r25, Z+35	; 0x23
    34fc:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <_ZN13HardwareTimer7beginMsEf>
	
	// Reset the MS5837, per datasheet
	Wire.beginTransmission(MS5837_ADDR);
    3500:	66 e7       	ldi	r22, 0x76	; 118
    3502:	70 e0       	ldi	r23, 0x00	; 0
    3504:	85 e5       	ldi	r24, 0x55	; 85
    3506:	98 e0       	ldi	r25, 0x08	; 8
    3508:	03 d8       	rcall	.-4090   	; 0x2510 <_ZN7TwoWire17beginTransmissionEi>
    350a:	e0 91 55 08 	lds	r30, 0x0855	; 0x800855 <Wire>
    350e:	f0 91 56 08 	lds	r31, 0x0856	; 0x800856 <Wire+0x1>
    3512:	01 90       	ld	r0, Z+
    3514:	f0 81       	ld	r31, Z
    3516:	e0 2d       	mov	r30, r0
    3518:	6e e1       	ldi	r22, 0x1E	; 30
    351a:	85 e5       	ldi	r24, 0x55	; 85
    351c:	98 e0       	ldi	r25, 0x08	; 8
    351e:	19 95       	eicall
	Wire.write(MS5837_RESET);
	Wire.endTransmission();
    3520:	85 e5       	ldi	r24, 0x55	; 85
    3522:	98 e0       	ldi	r25, 0x08	; 8
    3524:	74 d8       	rcall	.-3864   	; 0x260e <_ZN7TwoWire15endTransmissionEv>

	// Wait for reset to complete
	//_delay_ms(10);
	_timer->start(1);
    3526:	61 e0       	ldi	r22, 0x01	; 1
    3528:	f6 01       	movw	r30, r12
    352a:	82 a1       	ldd	r24, Z+34	; 0x22
    352c:	93 a1       	ldd	r25, Z+35	; 0x23
    352e:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <_ZN13HardwareTimer5startEh>
	_timer->waitForFinish();
    3532:	f6 01       	movw	r30, r12
    3534:	82 a1       	ldd	r24, Z+34	; 0x22
    3536:	93 a1       	ldd	r25, Z+35	; 0x23
    3538:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <_ZN13HardwareTimer13waitForFinishEv>
    353c:	76 01       	movw	r14, r12
    353e:	c0 ea       	ldi	r28, 0xA0	; 160

	// Read calibration values and CRC
	for ( uint8_t i = 0 ; i < 7 ; i++ ) {
		Wire.beginTransmission(MS5837_ADDR);
    3540:	66 e7       	ldi	r22, 0x76	; 118
    3542:	70 e0       	ldi	r23, 0x00	; 0
    3544:	85 e5       	ldi	r24, 0x55	; 85
    3546:	98 e0       	ldi	r25, 0x08	; 8
    3548:	0e 94 88 12 	call	0x2510	; 0x2510 <_ZN7TwoWire17beginTransmissionEi>
    354c:	e0 91 55 08 	lds	r30, 0x0855	; 0x800855 <Wire>
    3550:	f0 91 56 08 	lds	r31, 0x0856	; 0x800856 <Wire+0x1>
    3554:	01 90       	ld	r0, Z+
    3556:	f0 81       	ld	r31, Z
    3558:	e0 2d       	mov	r30, r0
    355a:	6c 2f       	mov	r22, r28
    355c:	85 e5       	ldi	r24, 0x55	; 85
    355e:	98 e0       	ldi	r25, 0x08	; 8
    3560:	19 95       	eicall
		Wire.write(MS5837_PROM_READ+i*2);
		Wire.endTransmission();
    3562:	85 e5       	ldi	r24, 0x55	; 85
    3564:	98 e0       	ldi	r25, 0x08	; 8
    3566:	53 d8       	rcall	.-3930   	; 0x260e <_ZN7TwoWire15endTransmissionEv>

		Wire.requestFrom(MS5837_ADDR,2);
    3568:	42 e0       	ldi	r20, 0x02	; 2
    356a:	50 e0       	ldi	r21, 0x00	; 0
    356c:	66 e7       	ldi	r22, 0x76	; 118
    356e:	70 e0       	ldi	r23, 0x00	; 0
    3570:	85 e5       	ldi	r24, 0x55	; 85
    3572:	98 e0       	ldi	r25, 0x08	; 8
    3574:	49 d8       	rcall	.-3950   	; 0x2608 <_ZN7TwoWire11requestFromEii>
		C[i] = (Wire.read() << 8) | Wire.read();
    3576:	85 e5       	ldi	r24, 0x55	; 85
    3578:	98 e0       	ldi	r25, 0x08	; 8
    357a:	0e 94 b4 11 	call	0x2368	; 0x2368 <_ZN7TwoWire4readEv>
    357e:	d8 2f       	mov	r29, r24
    3580:	85 e5       	ldi	r24, 0x55	; 85
    3582:	98 e0       	ldi	r25, 0x08	; 8
    3584:	0e 94 b4 11 	call	0x2368	; 0x2368 <_ZN7TwoWire4readEv>
    3588:	1d 2f       	mov	r17, r29
    358a:	00 e0       	ldi	r16, 0x00	; 0
    358c:	80 2b       	or	r24, r16
    358e:	91 2b       	or	r25, r17
    3590:	f7 01       	movw	r30, r14
    3592:	81 93       	st	Z+, r24
    3594:	91 93       	st	Z+, r25
    3596:	7f 01       	movw	r14, r30
    3598:	ce 5f       	subi	r28, 0xFE	; 254
	//_delay_ms(10);
	_timer->start(1);
	_timer->waitForFinish();

	// Read calibration values and CRC
	for ( uint8_t i = 0 ; i < 7 ; i++ ) {
    359a:	ce 3a       	cpi	r28, 0xAE	; 174
    359c:	89 f6       	brne	.-94     	; 0x3540 <_ZN6MS58375beginEv+0x6c>
		Wire.requestFrom(MS5837_ADDR,2);
		C[i] = (Wire.read() << 8) | Wire.read();
	}

	// Verify that data is correct with CRC
	uint8_t crcRead = C[0] >> 12;
    359e:	f6 01       	movw	r30, r12
    35a0:	c1 81       	ldd	r28, Z+1	; 0x01
    35a2:	c2 95       	swap	r28
    35a4:	cf 70       	andi	r28, 0x0F	; 15
	uint8_t crcCalculated = crc4(C);
    35a6:	b6 01       	movw	r22, r12
    35a8:	c6 01       	movw	r24, r12
    35aa:	5b df       	rcall	.-330    	; 0x3462 <_ZN6MS58374crc4EPj>
    35ac:	91 e0       	ldi	r25, 0x01	; 1
    35ae:	c8 13       	cpse	r28, r24
    35b0:	90 e0       	ldi	r25, 0x00	; 0
	if ( crcCalculated == crcRead ) {
		return true; // Initialization success
	}

	return false; // CRC fail
}
    35b2:	89 2f       	mov	r24, r25
    35b4:	df 91       	pop	r29
    35b6:	cf 91       	pop	r28
    35b8:	1f 91       	pop	r17
    35ba:	0f 91       	pop	r16
    35bc:	ff 90       	pop	r15
    35be:	ef 90       	pop	r14
    35c0:	df 90       	pop	r13
    35c2:	cf 90       	pop	r12
    35c4:	08 95       	ret

000035c6 <_ZN6MS58376updateEv>:
	}else{
		return false;
	}
}

void MS5837::update(){
    35c6:	8f 92       	push	r8
    35c8:	9f 92       	push	r9
    35ca:	af 92       	push	r10
    35cc:	bf 92       	push	r11
    35ce:	cf 92       	push	r12
    35d0:	df 92       	push	r13
    35d2:	ef 92       	push	r14
    35d4:	ff 92       	push	r15
    35d6:	0f 93       	push	r16
    35d8:	1f 93       	push	r17
    35da:	cf 93       	push	r28
    35dc:	df 93       	push	r29
	if(_state != STATE_FINISHED){
    35de:	dc 01       	movw	r26, r24
    35e0:	91 96       	adiw	r26, 0x21	; 33
    35e2:	2c 91       	ld	r18, X
    35e4:	22 23       	and	r18, r18
    35e6:	09 f4       	brne	.+2      	; 0x35ea <_ZN6MS58376updateEv+0x24>
    35e8:	d1 c0       	rjmp	.+418    	; 0x378c <_ZN6MS58376updateEv+0x1c6>
    35ea:	ec 01       	movw	r28, r24
		if(_timer->finished()){
    35ec:	8a a1       	ldd	r24, Y+34	; 0x22
    35ee:	9b a1       	ldd	r25, Y+35	; 0x23
    35f0:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <_ZN13HardwareTimer8finishedEv>
    35f4:	88 23       	and	r24, r24
    35f6:	09 f4       	brne	.+2      	; 0x35fa <_ZN6MS58376updateEv+0x34>
    35f8:	c9 c0       	rjmp	.+402    	; 0x378c <_ZN6MS58376updateEv+0x1c6>
			if(_state == STATE_READ_D1){
    35fa:	89 a1       	ldd	r24, Y+33	; 0x21
    35fc:	81 30       	cpi	r24, 0x01	; 1
    35fe:	09 f0       	breq	.+2      	; 0x3602 <_ZN6MS58376updateEv+0x3c>
    3600:	69 c0       	rjmp	.+210    	; 0x36d4 <_ZN6MS58376updateEv+0x10e>
				//Read D1 conversion and Request D2 conversion
				Wire.beginTransmission(MS5837_ADDR);
    3602:	66 e7       	ldi	r22, 0x76	; 118
    3604:	70 e0       	ldi	r23, 0x00	; 0
    3606:	85 e5       	ldi	r24, 0x55	; 85
    3608:	98 e0       	ldi	r25, 0x08	; 8
    360a:	0e 94 88 12 	call	0x2510	; 0x2510 <_ZN7TwoWire17beginTransmissionEi>
    360e:	05 e5       	ldi	r16, 0x55	; 85
    3610:	18 e0       	ldi	r17, 0x08	; 8
    3612:	d8 01       	movw	r26, r16
    3614:	ed 91       	ld	r30, X+
    3616:	fc 91       	ld	r31, X
    3618:	01 90       	ld	r0, Z+
    361a:	f0 81       	ld	r31, Z
    361c:	e0 2d       	mov	r30, r0
    361e:	60 e0       	ldi	r22, 0x00	; 0
    3620:	c8 01       	movw	r24, r16
    3622:	19 95       	eicall
				Wire.write(MS5837_ADC_READ);
				Wire.endTransmission();
    3624:	c8 01       	movw	r24, r16
    3626:	0e 94 07 13 	call	0x260e	; 0x260e <_ZN7TwoWire15endTransmissionEv>

				Wire.requestFrom(MS5837_ADDR,3);
    362a:	43 e0       	ldi	r20, 0x03	; 3
    362c:	50 e0       	ldi	r21, 0x00	; 0
    362e:	66 e7       	ldi	r22, 0x76	; 118
    3630:	70 e0       	ldi	r23, 0x00	; 0
    3632:	c8 01       	movw	r24, r16
    3634:	0e 94 04 13 	call	0x2608	; 0x2608 <_ZN7TwoWire11requestFromEii>
				D1 = 0;
    3638:	18 8a       	std	Y+16, r1	; 0x10
    363a:	19 8a       	std	Y+17, r1	; 0x11
    363c:	1a 8a       	std	Y+18, r1	; 0x12
    363e:	1b 8a       	std	Y+19, r1	; 0x13
				D1 = Wire.read();
    3640:	c8 01       	movw	r24, r16
    3642:	0e 94 b4 11 	call	0x2368	; 0x2368 <_ZN7TwoWire4readEv>
    3646:	4c 01       	movw	r8, r24
    3648:	99 0f       	add	r25, r25
    364a:	aa 08       	sbc	r10, r10
    364c:	bb 08       	sbc	r11, r11
    364e:	88 8a       	std	Y+16, r8	; 0x10
    3650:	99 8a       	std	Y+17, r9	; 0x11
    3652:	aa 8a       	std	Y+18, r10	; 0x12
    3654:	bb 8a       	std	Y+19, r11	; 0x13
				D1 = (D1 << 8) | Wire.read();
    3656:	c8 01       	movw	r24, r16
    3658:	0e 94 b4 11 	call	0x2368	; 0x2368 <_ZN7TwoWire4readEv>
    365c:	ba 2c       	mov	r11, r10
    365e:	a9 2c       	mov	r10, r9
    3660:	98 2c       	mov	r9, r8
    3662:	88 24       	eor	r8, r8
    3664:	6c 01       	movw	r12, r24
    3666:	99 0f       	add	r25, r25
    3668:	ee 08       	sbc	r14, r14
    366a:	ff 08       	sbc	r15, r15
    366c:	c8 28       	or	r12, r8
    366e:	d9 28       	or	r13, r9
    3670:	ea 28       	or	r14, r10
    3672:	fb 28       	or	r15, r11
    3674:	c8 8a       	std	Y+16, r12	; 0x10
    3676:	d9 8a       	std	Y+17, r13	; 0x11
    3678:	ea 8a       	std	Y+18, r14	; 0x12
    367a:	fb 8a       	std	Y+19, r15	; 0x13
				D1 = (D1 << 8) | Wire.read();
    367c:	c8 01       	movw	r24, r16
    367e:	0e 94 b4 11 	call	0x2368	; 0x2368 <_ZN7TwoWire4readEv>
    3682:	fe 2c       	mov	r15, r14
    3684:	ed 2c       	mov	r14, r13
    3686:	dc 2c       	mov	r13, r12
    3688:	cc 24       	eor	r12, r12
    368a:	09 2e       	mov	r0, r25
    368c:	00 0c       	add	r0, r0
    368e:	aa 0b       	sbc	r26, r26
    3690:	bb 0b       	sbc	r27, r27
    3692:	c8 2a       	or	r12, r24
    3694:	d9 2a       	or	r13, r25
    3696:	ea 2a       	or	r14, r26
    3698:	fb 2a       	or	r15, r27
    369a:	c8 8a       	std	Y+16, r12	; 0x10
    369c:	d9 8a       	std	Y+17, r13	; 0x11
    369e:	ea 8a       	std	Y+18, r14	; 0x12
    36a0:	fb 8a       	std	Y+19, r15	; 0x13
		
				// Request D2 conversion
				Wire.beginTransmission(MS5837_ADDR);
    36a2:	66 e7       	ldi	r22, 0x76	; 118
    36a4:	70 e0       	ldi	r23, 0x00	; 0
    36a6:	c8 01       	movw	r24, r16
    36a8:	0e 94 88 12 	call	0x2510	; 0x2510 <_ZN7TwoWire17beginTransmissionEi>
    36ac:	d8 01       	movw	r26, r16
    36ae:	ed 91       	ld	r30, X+
    36b0:	fc 91       	ld	r31, X
    36b2:	01 90       	ld	r0, Z+
    36b4:	f0 81       	ld	r31, Z
    36b6:	e0 2d       	mov	r30, r0
    36b8:	6a e5       	ldi	r22, 0x5A	; 90
    36ba:	c8 01       	movw	r24, r16
    36bc:	19 95       	eicall
				Wire.write(MS5837_CONVERT_D2_8192);
				Wire.endTransmission();
    36be:	c8 01       	movw	r24, r16
    36c0:	0e 94 07 13 	call	0x260e	; 0x260e <_ZN7TwoWire15endTransmissionEv>

				Timer0.start(2);
    36c4:	62 e0       	ldi	r22, 0x02	; 2
    36c6:	8b ed       	ldi	r24, 0xDB	; 219
    36c8:	97 e0       	ldi	r25, 0x07	; 7
    36ca:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <_ZN13HardwareTimer5startEh>
				_state = STATE_READ_D2;
    36ce:	82 e0       	ldi	r24, 0x02	; 2
    36d0:	89 a3       	std	Y+33, r24	; 0x21
    36d2:	5c c0       	rjmp	.+184    	; 0x378c <_ZN6MS58376updateEv+0x1c6>
			}else if(_state == STATE_READ_D2){
    36d4:	82 30       	cpi	r24, 0x02	; 2
    36d6:	09 f0       	breq	.+2      	; 0x36da <_ZN6MS58376updateEv+0x114>
    36d8:	59 c0       	rjmp	.+178    	; 0x378c <_ZN6MS58376updateEv+0x1c6>
				// Read D2 conversion and calculate readings
				Wire.beginTransmission(MS5837_ADDR);
    36da:	66 e7       	ldi	r22, 0x76	; 118
    36dc:	70 e0       	ldi	r23, 0x00	; 0
    36de:	85 e5       	ldi	r24, 0x55	; 85
    36e0:	98 e0       	ldi	r25, 0x08	; 8
    36e2:	0e 94 88 12 	call	0x2510	; 0x2510 <_ZN7TwoWire17beginTransmissionEi>
    36e6:	e0 91 55 08 	lds	r30, 0x0855	; 0x800855 <Wire>
    36ea:	f0 91 56 08 	lds	r31, 0x0856	; 0x800856 <Wire+0x1>
    36ee:	01 90       	ld	r0, Z+
    36f0:	f0 81       	ld	r31, Z
    36f2:	e0 2d       	mov	r30, r0
    36f4:	60 e0       	ldi	r22, 0x00	; 0
    36f6:	85 e5       	ldi	r24, 0x55	; 85
    36f8:	98 e0       	ldi	r25, 0x08	; 8
    36fa:	19 95       	eicall
				Wire.write(MS5837_ADC_READ);
				Wire.endTransmission();
    36fc:	85 e5       	ldi	r24, 0x55	; 85
    36fe:	98 e0       	ldi	r25, 0x08	; 8
    3700:	0e 94 07 13 	call	0x260e	; 0x260e <_ZN7TwoWire15endTransmissionEv>

				Wire.requestFrom(MS5837_ADDR,3);
    3704:	43 e0       	ldi	r20, 0x03	; 3
    3706:	50 e0       	ldi	r21, 0x00	; 0
    3708:	66 e7       	ldi	r22, 0x76	; 118
    370a:	70 e0       	ldi	r23, 0x00	; 0
    370c:	85 e5       	ldi	r24, 0x55	; 85
    370e:	98 e0       	ldi	r25, 0x08	; 8
    3710:	0e 94 04 13 	call	0x2608	; 0x2608 <_ZN7TwoWire11requestFromEii>
				D2 = 0;
    3714:	1c 8a       	std	Y+20, r1	; 0x14
    3716:	1d 8a       	std	Y+21, r1	; 0x15
    3718:	1e 8a       	std	Y+22, r1	; 0x16
    371a:	1f 8a       	std	Y+23, r1	; 0x17
				D2 = Wire.read();
    371c:	85 e5       	ldi	r24, 0x55	; 85
    371e:	98 e0       	ldi	r25, 0x08	; 8
    3720:	0e 94 b4 11 	call	0x2368	; 0x2368 <_ZN7TwoWire4readEv>
    3724:	4c 01       	movw	r8, r24
    3726:	99 0f       	add	r25, r25
    3728:	aa 08       	sbc	r10, r10
    372a:	bb 08       	sbc	r11, r11
    372c:	8c 8a       	std	Y+20, r8	; 0x14
    372e:	9d 8a       	std	Y+21, r9	; 0x15
    3730:	ae 8a       	std	Y+22, r10	; 0x16
    3732:	bf 8a       	std	Y+23, r11	; 0x17
				D2 = (D2 << 8) | Wire.read();
    3734:	85 e5       	ldi	r24, 0x55	; 85
    3736:	98 e0       	ldi	r25, 0x08	; 8
    3738:	0e 94 b4 11 	call	0x2368	; 0x2368 <_ZN7TwoWire4readEv>
    373c:	ba 2c       	mov	r11, r10
    373e:	a9 2c       	mov	r10, r9
    3740:	98 2c       	mov	r9, r8
    3742:	88 24       	eor	r8, r8
    3744:	6c 01       	movw	r12, r24
    3746:	99 0f       	add	r25, r25
    3748:	ee 08       	sbc	r14, r14
    374a:	ff 08       	sbc	r15, r15
    374c:	c8 28       	or	r12, r8
    374e:	d9 28       	or	r13, r9
    3750:	ea 28       	or	r14, r10
    3752:	fb 28       	or	r15, r11
    3754:	cc 8a       	std	Y+20, r12	; 0x14
    3756:	dd 8a       	std	Y+21, r13	; 0x15
    3758:	ee 8a       	std	Y+22, r14	; 0x16
    375a:	ff 8a       	std	Y+23, r15	; 0x17
				D2 = (D2 << 8) | Wire.read();
    375c:	85 e5       	ldi	r24, 0x55	; 85
    375e:	98 e0       	ldi	r25, 0x08	; 8
    3760:	0e 94 b4 11 	call	0x2368	; 0x2368 <_ZN7TwoWire4readEv>
    3764:	fe 2c       	mov	r15, r14
    3766:	ed 2c       	mov	r14, r13
    3768:	dc 2c       	mov	r13, r12
    376a:	cc 24       	eor	r12, r12
    376c:	09 2e       	mov	r0, r25
    376e:	00 0c       	add	r0, r0
    3770:	aa 0b       	sbc	r26, r26
    3772:	bb 0b       	sbc	r27, r27
    3774:	c8 2a       	or	r12, r24
    3776:	d9 2a       	or	r13, r25
    3778:	ea 2a       	or	r14, r26
    377a:	fb 2a       	or	r15, r27
    377c:	cc 8a       	std	Y+20, r12	; 0x14
    377e:	dd 8a       	std	Y+21, r13	; 0x15
    3780:	ee 8a       	std	Y+22, r14	; 0x16
    3782:	ff 8a       	std	Y+23, r15	; 0x17

				calculate();
    3784:	ce 01       	movw	r24, r28
    3786:	0e 94 4d 13 	call	0x269a	; 0x269a <_ZN6MS58379calculateEv>
				_state = STATE_FINISHED;
    378a:	19 a2       	std	Y+33, r1	; 0x21
			}
		}
	}
}
    378c:	df 91       	pop	r29
    378e:	cf 91       	pop	r28
    3790:	1f 91       	pop	r17
    3792:	0f 91       	pop	r16
    3794:	ff 90       	pop	r15
    3796:	ef 90       	pop	r14
    3798:	df 90       	pop	r13
    379a:	cf 90       	pop	r12
    379c:	bf 90       	pop	r11
    379e:	af 90       	pop	r10
    37a0:	9f 90       	pop	r9
    37a2:	8f 90       	pop	r8
    37a4:	08 95       	ret

000037a6 <_ZN7PCA9685C1Eh>:
//Wakes board from sleep
void PCA9685::wakeup() {
  uint8_t sleep = read8(PCA9685_MODE1);
  uint8_t wakeup = sleep & ~MODE1_SLEEP; // set sleep bit low
  write8(PCA9685_MODE1, wakeup);
}
    37a6:	fc 01       	movw	r30, r24
    37a8:	60 83       	st	Z, r22
    37aa:	08 95       	ret

000037ac <_ZN7PCA96856setPWMEhjj>:
    37ac:	ef 92       	push	r14
    37ae:	ff 92       	push	r15
    37b0:	0f 93       	push	r16
    37b2:	1f 93       	push	r17
    37b4:	cf 93       	push	r28
    37b6:	df 93       	push	r29
    37b8:	c6 2f       	mov	r28, r22
    37ba:	e4 2e       	mov	r14, r20
    37bc:	f5 2e       	mov	r15, r21
    37be:	02 2f       	mov	r16, r18
    37c0:	13 2f       	mov	r17, r19
    37c2:	fc 01       	movw	r30, r24
    37c4:	60 81       	ld	r22, Z
    37c6:	85 e5       	ldi	r24, 0x55	; 85
    37c8:	98 e0       	ldi	r25, 0x08	; 8
    37ca:	0e 94 7e 12 	call	0x24fc	; 0x24fc <_ZN7TwoWire17beginTransmissionEh>
    37ce:	6c 2f       	mov	r22, r28
    37d0:	70 e0       	ldi	r23, 0x00	; 0
    37d2:	66 0f       	add	r22, r22
    37d4:	77 1f       	adc	r23, r23
    37d6:	66 0f       	add	r22, r22
    37d8:	77 1f       	adc	r23, r23
    37da:	6a 5f       	subi	r22, 0xFA	; 250
    37dc:	7f 4f       	sbci	r23, 0xFF	; 255
    37de:	c5 e5       	ldi	r28, 0x55	; 85
    37e0:	d8 e0       	ldi	r29, 0x08	; 8
    37e2:	e8 81       	ld	r30, Y
    37e4:	f9 81       	ldd	r31, Y+1	; 0x01
    37e6:	01 90       	ld	r0, Z+
    37e8:	f0 81       	ld	r31, Z
    37ea:	e0 2d       	mov	r30, r0
    37ec:	ce 01       	movw	r24, r28
    37ee:	19 95       	eicall
    37f0:	e8 81       	ld	r30, Y
    37f2:	f9 81       	ldd	r31, Y+1	; 0x01
    37f4:	01 90       	ld	r0, Z+
    37f6:	f0 81       	ld	r31, Z
    37f8:	e0 2d       	mov	r30, r0
    37fa:	6e 2d       	mov	r22, r14
    37fc:	ce 01       	movw	r24, r28
    37fe:	19 95       	eicall
    3800:	e8 81       	ld	r30, Y
    3802:	f9 81       	ldd	r31, Y+1	; 0x01
    3804:	01 90       	ld	r0, Z+
    3806:	f0 81       	ld	r31, Z
    3808:	e0 2d       	mov	r30, r0
    380a:	6f 2d       	mov	r22, r15
    380c:	ce 01       	movw	r24, r28
    380e:	19 95       	eicall
    3810:	e8 81       	ld	r30, Y
    3812:	f9 81       	ldd	r31, Y+1	; 0x01
    3814:	01 90       	ld	r0, Z+
    3816:	f0 81       	ld	r31, Z
    3818:	e0 2d       	mov	r30, r0
    381a:	60 2f       	mov	r22, r16
    381c:	ce 01       	movw	r24, r28
    381e:	19 95       	eicall
    3820:	e8 81       	ld	r30, Y
    3822:	f9 81       	ldd	r31, Y+1	; 0x01
    3824:	01 90       	ld	r0, Z+
    3826:	f0 81       	ld	r31, Z
    3828:	e0 2d       	mov	r30, r0
    382a:	61 2f       	mov	r22, r17
    382c:	ce 01       	movw	r24, r28
    382e:	19 95       	eicall
    3830:	ce 01       	movw	r24, r28
    3832:	0e 94 07 13 	call	0x260e	; 0x260e <_ZN7TwoWire15endTransmissionEv>
    3836:	df 91       	pop	r29
    3838:	cf 91       	pop	r28
    383a:	1f 91       	pop	r17
    383c:	0f 91       	pop	r16
    383e:	ff 90       	pop	r15
    3840:	ef 90       	pop	r14
    3842:	08 95       	ret

00003844 <_ZN7PCA968517writeMicrosecondsEhj>:
    3844:	8f 92       	push	r8
    3846:	9f 92       	push	r9
    3848:	af 92       	push	r10
    384a:	bf 92       	push	r11
    384c:	cf 92       	push	r12
    384e:	df 92       	push	r13
    3850:	ef 92       	push	r14
    3852:	ff 92       	push	r15
    3854:	1f 93       	push	r17
    3856:	cf 93       	push	r28
    3858:	df 93       	push	r29
    385a:	ec 01       	movw	r28, r24
    385c:	16 2f       	mov	r17, r22
    385e:	ba 01       	movw	r22, r20
    3860:	80 e0       	ldi	r24, 0x00	; 0
    3862:	90 e0       	ldi	r25, 0x00	; 0
    3864:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <__floatunsisf>
    3868:	6b 01       	movw	r12, r22
    386a:	7c 01       	movw	r14, r24
    386c:	6d 81       	ldd	r22, Y+5	; 0x05
    386e:	70 e0       	ldi	r23, 0x00	; 0
    3870:	6f 5f       	subi	r22, 0xFF	; 255
    3872:	7f 4f       	sbci	r23, 0xFF	; 255
    3874:	07 2e       	mov	r0, r23
    3876:	00 0c       	add	r0, r0
    3878:	88 0b       	sbc	r24, r24
    387a:	99 0b       	sbc	r25, r25
    387c:	0e 94 cf 27 	call	0x4f9e	; 0x4f9e <__floatsisf>
    3880:	20 e0       	ldi	r18, 0x00	; 0
    3882:	34 e2       	ldi	r19, 0x24	; 36
    3884:	44 e7       	ldi	r20, 0x74	; 116
    3886:	59 e4       	ldi	r21, 0x49	; 73
    3888:	0e 94 83 28 	call	0x5106	; 0x5106 <__mulsf3>
    388c:	4b 01       	movw	r8, r22
    388e:	5c 01       	movw	r10, r24
    3890:	69 81       	ldd	r22, Y+1	; 0x01
    3892:	7a 81       	ldd	r23, Y+2	; 0x02
    3894:	8b 81       	ldd	r24, Y+3	; 0x03
    3896:	9c 81       	ldd	r25, Y+4	; 0x04
    3898:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <__floatunsisf>
    389c:	9b 01       	movw	r18, r22
    389e:	ac 01       	movw	r20, r24
    38a0:	c5 01       	movw	r24, r10
    38a2:	b4 01       	movw	r22, r8
    38a4:	0e 94 39 27 	call	0x4e72	; 0x4e72 <__divsf3>
    38a8:	9b 01       	movw	r18, r22
    38aa:	ac 01       	movw	r20, r24
    38ac:	c7 01       	movw	r24, r14
    38ae:	b6 01       	movw	r22, r12
    38b0:	0e 94 39 27 	call	0x4e72	; 0x4e72 <__divsf3>
    38b4:	0e 94 a1 27 	call	0x4f42	; 0x4f42 <__fixunssfsi>
    38b8:	9b 01       	movw	r18, r22
    38ba:	40 e0       	ldi	r20, 0x00	; 0
    38bc:	50 e0       	ldi	r21, 0x00	; 0
    38be:	61 2f       	mov	r22, r17
    38c0:	ce 01       	movw	r24, r28
    38c2:	74 df       	rcall	.-280    	; 0x37ac <_ZN7PCA96856setPWMEhjj>
    38c4:	df 91       	pop	r29
    38c6:	cf 91       	pop	r28
    38c8:	1f 91       	pop	r17
    38ca:	ff 90       	pop	r15
    38cc:	ef 90       	pop	r14
    38ce:	df 90       	pop	r13
    38d0:	cf 90       	pop	r12
    38d2:	bf 90       	pop	r11
    38d4:	af 90       	pop	r10
    38d6:	9f 90       	pop	r9
    38d8:	8f 90       	pop	r8
    38da:	08 95       	ret

000038dc <_ZN7PCA968522getOscillatorFrequencyEv>:
    38dc:	fc 01       	movw	r30, r24
    38de:	61 81       	ldd	r22, Z+1	; 0x01
    38e0:	72 81       	ldd	r23, Z+2	; 0x02
    38e2:	83 81       	ldd	r24, Z+3	; 0x03
    38e4:	94 81       	ldd	r25, Z+4	; 0x04
    38e6:	08 95       	ret

000038e8 <_ZN7PCA968522setOscillatorFrequencyEm>:
    38e8:	fc 01       	movw	r30, r24
    38ea:	41 83       	std	Z+1, r20	; 0x01
    38ec:	52 83       	std	Z+2, r21	; 0x02
    38ee:	63 83       	std	Z+3, r22	; 0x03
    38f0:	74 83       	std	Z+4, r23	; 0x04
    38f2:	08 95       	ret

000038f4 <_ZN7PCA96855read8Eh>:
    38f4:	1f 93       	push	r17
    38f6:	cf 93       	push	r28
    38f8:	df 93       	push	r29
    38fa:	ec 01       	movw	r28, r24
    38fc:	16 2f       	mov	r17, r22
    38fe:	68 81       	ld	r22, Y
    3900:	85 e5       	ldi	r24, 0x55	; 85
    3902:	98 e0       	ldi	r25, 0x08	; 8
    3904:	0e 94 7e 12 	call	0x24fc	; 0x24fc <_ZN7TwoWire17beginTransmissionEh>
    3908:	61 2f       	mov	r22, r17
    390a:	85 e5       	ldi	r24, 0x55	; 85
    390c:	98 e0       	ldi	r25, 0x08	; 8
    390e:	0e 94 10 12 	call	0x2420	; 0x2420 <_ZN7TwoWire5writeEh>
    3912:	85 e5       	ldi	r24, 0x55	; 85
    3914:	98 e0       	ldi	r25, 0x08	; 8
    3916:	0e 94 07 13 	call	0x260e	; 0x260e <_ZN7TwoWire15endTransmissionEv>
    391a:	41 e0       	ldi	r20, 0x01	; 1
    391c:	68 81       	ld	r22, Y
    391e:	85 e5       	ldi	r24, 0x55	; 85
    3920:	98 e0       	ldi	r25, 0x08	; 8
    3922:	0e 94 01 13 	call	0x2602	; 0x2602 <_ZN7TwoWire11requestFromEhh>
    3926:	85 e5       	ldi	r24, 0x55	; 85
    3928:	98 e0       	ldi	r25, 0x08	; 8
    392a:	0e 94 b4 11 	call	0x2368	; 0x2368 <_ZN7TwoWire4readEv>
    392e:	df 91       	pop	r29
    3930:	cf 91       	pop	r28
    3932:	1f 91       	pop	r17
    3934:	08 95       	ret

00003936 <_ZN7PCA96856write8Ehh>:
    3936:	cf 93       	push	r28
    3938:	df 93       	push	r29
    393a:	d6 2f       	mov	r29, r22
    393c:	c4 2f       	mov	r28, r20
    393e:	fc 01       	movw	r30, r24
    3940:	60 81       	ld	r22, Z
    3942:	85 e5       	ldi	r24, 0x55	; 85
    3944:	98 e0       	ldi	r25, 0x08	; 8
    3946:	0e 94 7e 12 	call	0x24fc	; 0x24fc <_ZN7TwoWire17beginTransmissionEh>
    394a:	6d 2f       	mov	r22, r29
    394c:	85 e5       	ldi	r24, 0x55	; 85
    394e:	98 e0       	ldi	r25, 0x08	; 8
    3950:	0e 94 10 12 	call	0x2420	; 0x2420 <_ZN7TwoWire5writeEh>
    3954:	6c 2f       	mov	r22, r28
    3956:	85 e5       	ldi	r24, 0x55	; 85
    3958:	98 e0       	ldi	r25, 0x08	; 8
    395a:	0e 94 10 12 	call	0x2420	; 0x2420 <_ZN7TwoWire5writeEh>
    395e:	85 e5       	ldi	r24, 0x55	; 85
    3960:	98 e0       	ldi	r25, 0x08	; 8
    3962:	0e 94 07 13 	call	0x260e	; 0x260e <_ZN7TwoWire15endTransmissionEv>
    3966:	df 91       	pop	r29
    3968:	cf 91       	pop	r28
    396a:	08 95       	ret

0000396c <_ZN7PCA96855resetEv>:
    396c:	40 e8       	ldi	r20, 0x80	; 128
    396e:	60 e0       	ldi	r22, 0x00	; 0
    3970:	e2 df       	rcall	.-60     	; 0x3936 <_ZN7PCA96856write8Ehh>
    3972:	8f e3       	ldi	r24, 0x3F	; 63
    3974:	9c e9       	ldi	r25, 0x9C	; 156
    3976:	01 97       	sbiw	r24, 0x01	; 1
    3978:	f1 f7       	brne	.-4      	; 0x3976 <_ZN7PCA96855resetEv+0xa>
    397a:	00 c0       	rjmp	.+0      	; 0x397c <_ZN7PCA96855resetEv+0x10>
    397c:	00 00       	nop
    397e:	08 95       	ret

00003980 <_ZN7PCA96859setExtClkEh>:

//Sets EXTCLK pin to use the external clock
void PCA9685::setExtClk(uint8_t prescale) {
    3980:	0f 93       	push	r16
    3982:	1f 93       	push	r17
    3984:	cf 93       	push	r28
    3986:	df 93       	push	r29
    3988:	8c 01       	movw	r16, r24
    398a:	d6 2f       	mov	r29, r22
  uint8_t oldmode = read8(PCA9685_MODE1);
    398c:	60 e0       	ldi	r22, 0x00	; 0
    398e:	b2 df       	rcall	.-156    	; 0x38f4 <_ZN7PCA96855read8Eh>
  uint8_t newmode = (oldmode & ~MODE1_RESTART) | MODE1_SLEEP; // sleep
    3990:	c8 2f       	mov	r28, r24
    3992:	cf 76       	andi	r28, 0x6F	; 111
    3994:	4c 2f       	mov	r20, r28
    3996:	40 61       	ori	r20, 0x10	; 16
  write8(PCA9685_MODE1, newmode); // go to sleep, turn off internal oscillator
    3998:	60 e0       	ldi	r22, 0x00	; 0
    399a:	c8 01       	movw	r24, r16
    399c:	cc df       	rcall	.-104    	; 0x3936 <_ZN7PCA96856write8Ehh>

  // This sets both the SLEEP and EXTCLK bits of the MODE1 register to switch to
  // use the external clock.
  write8(PCA9685_MODE1, (newmode |= MODE1_EXTCLK));
    399e:	c0 65       	ori	r28, 0x50	; 80
    39a0:	4c 2f       	mov	r20, r28
    39a2:	60 e0       	ldi	r22, 0x00	; 0
    39a4:	c8 01       	movw	r24, r16
    39a6:	c7 df       	rcall	.-114    	; 0x3936 <_ZN7PCA96856write8Ehh>

  _prescale = prescale;
    39a8:	f8 01       	movw	r30, r16
    39aa:	d5 83       	std	Z+5, r29	; 0x05
  write8(PCA9685_PRESCALE, prescale); // set the prescaler
    39ac:	4d 2f       	mov	r20, r29
    39ae:	6e ef       	ldi	r22, 0xFE	; 254
    39b0:	c8 01       	movw	r24, r16
    39b2:	c1 df       	rcall	.-126    	; 0x3936 <_ZN7PCA96856write8Ehh>
    39b4:	8f e1       	ldi	r24, 0x1F	; 31
    39b6:	9e e4       	ldi	r25, 0x4E	; 78
    39b8:	01 97       	sbiw	r24, 0x01	; 1
    39ba:	f1 f7       	brne	.-4      	; 0x39b8 <_ZN7PCA96859setExtClkEh+0x38>
    39bc:	00 c0       	rjmp	.+0      	; 0x39be <_ZN7PCA96859setExtClkEh+0x3e>
    39be:	00 00       	nop

  _delay_ms(5);
  
  write8(PCA9685_MODE1, (newmode & ~MODE1_SLEEP) | MODE1_RESTART | MODE1_AI);// clear the SLEEP bit to start
    39c0:	4c 2f       	mov	r20, r28
    39c2:	4f 74       	andi	r20, 0x4F	; 79
    39c4:	40 6a       	ori	r20, 0xA0	; 160
    39c6:	60 e0       	ldi	r22, 0x00	; 0
    39c8:	c8 01       	movw	r24, r16
    39ca:	b5 df       	rcall	.-150    	; 0x3936 <_ZN7PCA96856write8Ehh>
}
    39cc:	df 91       	pop	r29
    39ce:	cf 91       	pop	r28
    39d0:	1f 91       	pop	r17
    39d2:	0f 91       	pop	r16
    39d4:	08 95       	ret

000039d6 <_ZN7PCA968510setPWMFreqEf>:

//Sets the PWM frequency for the entire chip, up to ~1.6 KHz
void PCA9685::setPWMFreq(float freq) {
    39d6:	8f 92       	push	r8
    39d8:	9f 92       	push	r9
    39da:	af 92       	push	r10
    39dc:	bf 92       	push	r11
    39de:	cf 92       	push	r12
    39e0:	df 92       	push	r13
    39e2:	ef 92       	push	r14
    39e4:	ff 92       	push	r15
    39e6:	1f 93       	push	r17
    39e8:	cf 93       	push	r28
    39ea:	df 93       	push	r29
    39ec:	ec 01       	movw	r28, r24
    39ee:	6a 01       	movw	r12, r20
    39f0:	7b 01       	movw	r14, r22
  // Range output modulation frequency is dependant on oscillator
  if (freq < 1)
    39f2:	20 e0       	ldi	r18, 0x00	; 0
    39f4:	30 e0       	ldi	r19, 0x00	; 0
    39f6:	40 e8       	ldi	r20, 0x80	; 128
    39f8:	5f e3       	ldi	r21, 0x3F	; 63
    39fa:	c7 01       	movw	r24, r14
    39fc:	b6 01       	movw	r22, r12
    39fe:	0e 94 35 27 	call	0x4e6a	; 0x4e6a <__cmpsf2>
    3a02:	88 23       	and	r24, r24
    3a04:	a4 f0       	brlt	.+40     	; 0x3a2e <_ZN7PCA968510setPWMFreqEf+0x58>
    freq = 1;
  if (freq > 3500)
    3a06:	20 e0       	ldi	r18, 0x00	; 0
    3a08:	30 ec       	ldi	r19, 0xC0	; 192
    3a0a:	4a e5       	ldi	r20, 0x5A	; 90
    3a0c:	55 e4       	ldi	r21, 0x45	; 69
    3a0e:	c7 01       	movw	r24, r14
    3a10:	b6 01       	movw	r22, r12
    3a12:	0e 94 7f 28 	call	0x50fe	; 0x50fe <__gesf2>
    3a16:	18 16       	cp	r1, r24
    3a18:	94 f4       	brge	.+36     	; 0x3a3e <_ZN7PCA968510setPWMFreqEf+0x68>
    freq = 3500; // Datasheet limit is 3052=50MHz/(4*4096)
    3a1a:	0f 2e       	mov	r0, r31
    3a1c:	c1 2c       	mov	r12, r1
    3a1e:	f0 ec       	ldi	r31, 0xC0	; 192
    3a20:	df 2e       	mov	r13, r31
    3a22:	fa e5       	ldi	r31, 0x5A	; 90
    3a24:	ef 2e       	mov	r14, r31
    3a26:	f5 e4       	ldi	r31, 0x45	; 69
    3a28:	ff 2e       	mov	r15, r31
    3a2a:	f0 2d       	mov	r31, r0
    3a2c:	08 c0       	rjmp	.+16     	; 0x3a3e <_ZN7PCA968510setPWMFreqEf+0x68>

//Sets the PWM frequency for the entire chip, up to ~1.6 KHz
void PCA9685::setPWMFreq(float freq) {
  // Range output modulation frequency is dependant on oscillator
  if (freq < 1)
    freq = 1;
    3a2e:	0f 2e       	mov	r0, r31
    3a30:	c1 2c       	mov	r12, r1
    3a32:	d1 2c       	mov	r13, r1
    3a34:	f0 e8       	ldi	r31, 0x80	; 128
    3a36:	ef 2e       	mov	r14, r31
    3a38:	ff e3       	ldi	r31, 0x3F	; 63
    3a3a:	ff 2e       	mov	r15, r31
    3a3c:	f0 2d       	mov	r31, r0
  if (freq > 3500)
    freq = 3500; // Datasheet limit is 3052=50MHz/(4*4096)

  float prescaleval = ((_oscillator_freq / (freq * 4096.0)) + 0.5) - 1;
    3a3e:	69 81       	ldd	r22, Y+1	; 0x01
    3a40:	7a 81       	ldd	r23, Y+2	; 0x02
    3a42:	8b 81       	ldd	r24, Y+3	; 0x03
    3a44:	9c 81       	ldd	r25, Y+4	; 0x04
    3a46:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <__floatunsisf>
    3a4a:	4b 01       	movw	r8, r22
    3a4c:	5c 01       	movw	r10, r24
    3a4e:	20 e0       	ldi	r18, 0x00	; 0
    3a50:	30 e0       	ldi	r19, 0x00	; 0
    3a52:	40 e8       	ldi	r20, 0x80	; 128
    3a54:	55 e4       	ldi	r21, 0x45	; 69
    3a56:	c7 01       	movw	r24, r14
    3a58:	b6 01       	movw	r22, r12
    3a5a:	0e 94 83 28 	call	0x5106	; 0x5106 <__mulsf3>
    3a5e:	9b 01       	movw	r18, r22
    3a60:	ac 01       	movw	r20, r24
    3a62:	c5 01       	movw	r24, r10
    3a64:	b4 01       	movw	r22, r8
    3a66:	0e 94 39 27 	call	0x4e72	; 0x4e72 <__divsf3>
    3a6a:	20 e0       	ldi	r18, 0x00	; 0
    3a6c:	30 e0       	ldi	r19, 0x00	; 0
    3a6e:	40 e0       	ldi	r20, 0x00	; 0
    3a70:	5f e3       	ldi	r21, 0x3F	; 63
    3a72:	0e 94 d1 26 	call	0x4da2	; 0x4da2 <__addsf3>
    3a76:	20 e0       	ldi	r18, 0x00	; 0
    3a78:	30 e0       	ldi	r19, 0x00	; 0
    3a7a:	40 e8       	ldi	r20, 0x80	; 128
    3a7c:	5f e3       	ldi	r21, 0x3F	; 63
    3a7e:	0e 94 d0 26 	call	0x4da0	; 0x4da0 <__subsf3>
    3a82:	6b 01       	movw	r12, r22
    3a84:	7c 01       	movw	r14, r24
  if (prescaleval < PCA9685_PRESCALE_MIN)
    3a86:	20 e0       	ldi	r18, 0x00	; 0
    3a88:	30 e0       	ldi	r19, 0x00	; 0
    3a8a:	40 e4       	ldi	r20, 0x40	; 64
    3a8c:	50 e4       	ldi	r21, 0x40	; 64
    3a8e:	0e 94 35 27 	call	0x4e6a	; 0x4e6a <__cmpsf2>
    3a92:	88 23       	and	r24, r24
    3a94:	9c f0       	brlt	.+38     	; 0x3abc <_ZN7PCA968510setPWMFreqEf+0xe6>
    prescaleval = PCA9685_PRESCALE_MIN;
  if (prescaleval > PCA9685_PRESCALE_MAX)
    3a96:	20 e0       	ldi	r18, 0x00	; 0
    3a98:	30 e0       	ldi	r19, 0x00	; 0
    3a9a:	4f e7       	ldi	r20, 0x7F	; 127
    3a9c:	53 e4       	ldi	r21, 0x43	; 67
    3a9e:	c7 01       	movw	r24, r14
    3aa0:	b6 01       	movw	r22, r12
    3aa2:	0e 94 7f 28 	call	0x50fe	; 0x50fe <__gesf2>
    3aa6:	18 16       	cp	r1, r24
    3aa8:	7c f4       	brge	.+30     	; 0x3ac8 <_ZN7PCA968510setPWMFreqEf+0xf2>
    prescaleval = PCA9685_PRESCALE_MAX;
    3aaa:	0f 2e       	mov	r0, r31
    3aac:	c1 2c       	mov	r12, r1
    3aae:	d1 2c       	mov	r13, r1
    3ab0:	ff e7       	ldi	r31, 0x7F	; 127
    3ab2:	ef 2e       	mov	r14, r31
    3ab4:	f3 e4       	ldi	r31, 0x43	; 67
    3ab6:	ff 2e       	mov	r15, r31
    3ab8:	f0 2d       	mov	r31, r0
    3aba:	06 c0       	rjmp	.+12     	; 0x3ac8 <_ZN7PCA968510setPWMFreqEf+0xf2>
  if (freq > 3500)
    freq = 3500; // Datasheet limit is 3052=50MHz/(4*4096)

  float prescaleval = ((_oscillator_freq / (freq * 4096.0)) + 0.5) - 1;
  if (prescaleval < PCA9685_PRESCALE_MIN)
    prescaleval = PCA9685_PRESCALE_MIN;
    3abc:	c1 2c       	mov	r12, r1
    3abe:	d1 2c       	mov	r13, r1
    3ac0:	68 94       	set
    3ac2:	ee 24       	eor	r14, r14
    3ac4:	e6 f8       	bld	r14, 6
    3ac6:	fe 2c       	mov	r15, r14
  if (prescaleval > PCA9685_PRESCALE_MAX)
    prescaleval = PCA9685_PRESCALE_MAX;
  uint8_t prescale = (uint8_t)prescaleval;
    3ac8:	c7 01       	movw	r24, r14
    3aca:	b6 01       	movw	r22, r12
    3acc:	0e 94 a1 27 	call	0x4f42	; 0x4f42 <__fixunssfsi>
    3ad0:	f6 2e       	mov	r15, r22

  uint8_t oldmode = read8(PCA9685_MODE1);
    3ad2:	60 e0       	ldi	r22, 0x00	; 0
    3ad4:	ce 01       	movw	r24, r28
    3ad6:	0e df       	rcall	.-484    	; 0x38f4 <_ZN7PCA96855read8Eh>
    3ad8:	18 2f       	mov	r17, r24
  uint8_t newmode = (oldmode & ~MODE1_RESTART) | MODE1_SLEEP; // sleep
  write8(PCA9685_MODE1, newmode);                             // go to sleep
    3ada:	48 2f       	mov	r20, r24
    3adc:	4f 76       	andi	r20, 0x6F	; 111
    3ade:	40 61       	ori	r20, 0x10	; 16
    3ae0:	60 e0       	ldi	r22, 0x00	; 0
    3ae2:	ce 01       	movw	r24, r28
    3ae4:	28 df       	rcall	.-432    	; 0x3936 <_ZN7PCA96856write8Ehh>
  _prescale = prescale;
    3ae6:	fd 82       	std	Y+5, r15	; 0x05
  write8(PCA9685_PRESCALE, prescale); // set the prescaler
    3ae8:	4f 2d       	mov	r20, r15
    3aea:	6e ef       	ldi	r22, 0xFE	; 254
    3aec:	ce 01       	movw	r24, r28
    3aee:	23 df       	rcall	.-442    	; 0x3936 <_ZN7PCA96856write8Ehh>
  write8(PCA9685_MODE1, oldmode);
    3af0:	41 2f       	mov	r20, r17
    3af2:	60 e0       	ldi	r22, 0x00	; 0
    3af4:	ce 01       	movw	r24, r28
    3af6:	1f df       	rcall	.-450    	; 0x3936 <_ZN7PCA96856write8Ehh>
    3af8:	8f e1       	ldi	r24, 0x1F	; 31
    3afa:	9e e4       	ldi	r25, 0x4E	; 78
    3afc:	01 97       	sbiw	r24, 0x01	; 1
    3afe:	f1 f7       	brne	.-4      	; 0x3afc <_ZN7PCA968510setPWMFreqEf+0x126>
    3b00:	00 c0       	rjmp	.+0      	; 0x3b02 <_ZN7PCA968510setPWMFreqEf+0x12c>
    3b02:	00 00       	nop
  _delay_ms(5);
  // This sets the MODE1 register to turn on auto increment.
  write8(PCA9685_MODE1, oldmode | MODE1_RESTART | MODE1_AI);
    3b04:	41 2f       	mov	r20, r17
    3b06:	40 6a       	ori	r20, 0xA0	; 160
    3b08:	60 e0       	ldi	r22, 0x00	; 0
    3b0a:	ce 01       	movw	r24, r28
    3b0c:	14 df       	rcall	.-472    	; 0x3936 <_ZN7PCA96856write8Ehh>
}
    3b0e:	df 91       	pop	r29
    3b10:	cf 91       	pop	r28
    3b12:	1f 91       	pop	r17
    3b14:	ff 90       	pop	r15
    3b16:	ef 90       	pop	r14
    3b18:	df 90       	pop	r13
    3b1a:	cf 90       	pop	r12
    3b1c:	bf 90       	pop	r11
    3b1e:	af 90       	pop	r10
    3b20:	9f 90       	pop	r9
    3b22:	8f 90       	pop	r8
    3b24:	08 95       	ret

00003b26 <_ZN7PCA96855beginEh>:

PCA9685::PCA9685(const uint8_t addr) : _addr(addr){
	
}

void PCA9685::begin(uint8_t prescale) {
    3b26:	1f 93       	push	r17
    3b28:	cf 93       	push	r28
    3b2a:	df 93       	push	r29
    3b2c:	ec 01       	movw	r28, r24
    3b2e:	16 2f       	mov	r17, r22
	Wire.begin();
    3b30:	85 e5       	ldi	r24, 0x55	; 85
    3b32:	98 e0       	ldi	r25, 0x08	; 8
    3b34:	0e 94 69 12 	call	0x24d2	; 0x24d2 <_ZN7TwoWire5beginEv>
	reset();
    3b38:	ce 01       	movw	r24, r28
    3b3a:	18 df       	rcall	.-464    	; 0x396c <_ZN7PCA96855resetEv>
	if (prescale) {
    3b3c:	11 23       	and	r17, r17
    3b3e:	21 f0       	breq	.+8      	; 0x3b48 <_ZN7PCA96855beginEh+0x22>
		setExtClk(prescale);
    3b40:	61 2f       	mov	r22, r17
    3b42:	ce 01       	movw	r24, r28
    3b44:	1d df       	rcall	.-454    	; 0x3980 <_ZN7PCA96859setExtClkEh>
    3b46:	06 c0       	rjmp	.+12     	; 0x3b54 <_ZN7PCA96855beginEh+0x2e>
	} else {  
		setPWMFreq(1000); // set a default frequency
    3b48:	40 e0       	ldi	r20, 0x00	; 0
    3b4a:	50 e0       	ldi	r21, 0x00	; 0
    3b4c:	6a e7       	ldi	r22, 0x7A	; 122
    3b4e:	74 e4       	ldi	r23, 0x44	; 68
    3b50:	ce 01       	movw	r24, r28
    3b52:	41 df       	rcall	.-382    	; 0x39d6 <_ZN7PCA968510setPWMFreqEf>
 *  @brief Setter for the internally tracked oscillator used for freq
 * calculations
 *  @param freq The frequency the PCA9685 should use for frequency calculations
 */
void PCA9685::setOscillatorFrequency(uint32_t freq) {
  _oscillator_freq = freq;
    3b54:	80 e4       	ldi	r24, 0x40	; 64
    3b56:	98 e7       	ldi	r25, 0x78	; 120
    3b58:	ad e7       	ldi	r26, 0x7D	; 125
    3b5a:	b1 e0       	ldi	r27, 0x01	; 1
    3b5c:	89 83       	std	Y+1, r24	; 0x01
    3b5e:	9a 83       	std	Y+2, r25	; 0x02
    3b60:	ab 83       	std	Y+3, r26	; 0x03
    3b62:	bc 83       	std	Y+4, r27	; 0x04
		setExtClk(prescale);
	} else {  
		setPWMFreq(1000); // set a default frequency
	}
	setOscillatorFrequency(FREQUENCY_OSCILLATOR); // set the default internal frequency
}
    3b64:	df 91       	pop	r29
    3b66:	cf 91       	pop	r28
    3b68:	1f 91       	pop	r17
    3b6a:	08 95       	ret

00003b6c <_ZN18TwiServoControllerC1Eh>:
 */ 

#include "TwiServoController.h"
#include "../Micro/CpuFreq.h"

TwiServoController::TwiServoController(const uint8_t addr) : controller(addr){
    3b6c:	1c ce       	rjmp	.-968    	; 0x37a6 <_ZN7PCA9685C1Eh>
    3b6e:	08 95       	ret

00003b70 <_ZN18TwiServoController5beginEv>:
		
}

bool TwiServoController::begin(){
    3b70:	cf 93       	push	r28
    3b72:	df 93       	push	r29
    3b74:	ec 01       	movw	r28, r24
	controller.begin();
    3b76:	60 e0       	ldi	r22, 0x00	; 0
    3b78:	d6 df       	rcall	.-84     	; 0x3b26 <_ZN7PCA96855beginEh>
	// In theory the internal oscillator is 25MHz but it really isn't
	// that precise. You can 'calibrate' by tweaking this number till
	// you get the frequency you're expecting!
	controller.setOscillatorFrequency(27000000);  // The int.osc. is closer to 27MHz
    3b7a:	40 ec       	ldi	r20, 0xC0	; 192
    3b7c:	5c ef       	ldi	r21, 0xFC	; 252
    3b7e:	6b e9       	ldi	r22, 0x9B	; 155
    3b80:	71 e0       	ldi	r23, 0x01	; 1
    3b82:	ce 01       	movw	r24, r28
    3b84:	b1 de       	rcall	.-670    	; 0x38e8 <_ZN7PCA968522setOscillatorFrequencyEm>
	controller.setPWMFreq(SERVO_FREQ);  // Analog servos run at ~50 Hz updates
    3b86:	40 e0       	ldi	r20, 0x00	; 0
    3b88:	50 e0       	ldi	r21, 0x00	; 0
    3b8a:	68 e4       	ldi	r22, 0x48	; 72
    3b8c:	72 e4       	ldi	r23, 0x42	; 66
    3b8e:	ce 01       	movw	r24, r28
    3b90:	22 df       	rcall	.-444    	; 0x39d6 <_ZN7PCA968510setPWMFreqEf>
    3b92:	8f e3       	ldi	r24, 0x3F	; 63
    3b94:	9c e9       	ldi	r25, 0x9C	; 156
    3b96:	01 97       	sbiw	r24, 0x01	; 1
    3b98:	f1 f7       	brne	.-4      	; 0x3b96 <_ZN18TwiServoController5beginEv+0x26>
    3b9a:	00 c0       	rjmp	.+0      	; 0x3b9c <_ZN18TwiServoController5beginEv+0x2c>
	_delay_ms(10);
	return controller.getOscillatorFrequency() == 27000000;
    3b9c:	00 00       	nop
    3b9e:	ce 01       	movw	r24, r28
    3ba0:	9d de       	rcall	.-710    	; 0x38dc <_ZN7PCA968522getOscillatorFrequencyEv>
    3ba2:	21 e0       	ldi	r18, 0x01	; 1
    3ba4:	60 3c       	cpi	r22, 0xC0	; 192
    3ba6:	7c 4f       	sbci	r23, 0xFC	; 252
    3ba8:	8b 49       	sbci	r24, 0x9B	; 155
    3baa:	91 40       	sbci	r25, 0x01	; 1
    3bac:	09 f0       	breq	.+2      	; 0x3bb0 <_ZN18TwiServoController5beginEv+0x40>
    3bae:	20 e0       	ldi	r18, 0x00	; 0
}
    3bb0:	82 2f       	mov	r24, r18
    3bb2:	df 91       	pop	r29
    3bb4:	cf 91       	pop	r28
    3bb6:	08 95       	ret

00003bb8 <_ZN18TwiServoController8setPulseEhj>:

void TwiServoController::setPulse(uint8_t num, uint16_t us){
	if(num < 16) controller.writeMicroseconds(num, us);
    3bb8:	60 31       	cpi	r22, 0x10	; 16
    3bba:	08 f4       	brcc	.+2      	; 0x3bbe <_ZN18TwiServoController8setPulseEhj+0x6>
    3bbc:	43 ce       	rjmp	.-890    	; 0x3844 <_ZN7PCA968517writeMicrosecondsEhj>
    3bbe:	08 95       	ret

00003bc0 <_ZN18TwiServoController7releaseEh>:
}

void TwiServoController::release(uint8_t num){
	if(num < 16) controller.setPWM(num, 0, 4096);
    3bc0:	60 31       	cpi	r22, 0x10	; 16
    3bc2:	28 f4       	brcc	.+10     	; 0x3bce <_ZN18TwiServoController7releaseEh+0xe>
    3bc4:	20 e0       	ldi	r18, 0x00	; 0
    3bc6:	30 e1       	ldi	r19, 0x10	; 16
    3bc8:	40 e0       	ldi	r20, 0x00	; 0
    3bca:	50 e0       	ldi	r21, 0x00	; 0
    3bcc:	ef cd       	rjmp	.-1058   	; 0x37ac <_ZN7PCA96856setPWMEhjj>
    3bce:	08 95       	ret

00003bd0 <_ZN16HardwarePcbServo8setPulseEj>:
		default:
			break;
	}
}*/
#include "../Micro/Peripherals/HardwareSerial.h"
void HardwarePcbServo::setPulse(uint16_t us){
    3bd0:	fc 01       	movw	r30, r24
	switch(_servo){
    3bd2:	94 81       	ldd	r25, Z+4	; 0x04
    3bd4:	91 30       	cpi	r25, 0x01	; 1
    3bd6:	49 f0       	breq	.+18     	; 0x3bea <_ZN16HardwarePcbServo8setPulseEj+0x1a>
    3bd8:	18 f0       	brcs	.+6      	; 0x3be0 <_ZN16HardwarePcbServo8setPulseEj+0x10>
    3bda:	92 30       	cpi	r25, 0x02	; 2
    3bdc:	59 f0       	breq	.+22     	; 0x3bf4 <_ZN16HardwarePcbServo8setPulseEj+0x24>
    3bde:	08 95       	ret
		case ServoA:
			_controller->setPulseA(us);
    3be0:	82 81       	ldd	r24, Z+2	; 0x02
    3be2:	93 81       	ldd	r25, Z+3	; 0x03
    3be4:	0c 94 3b 0d 	jmp	0x1a76	; 0x1a76 <_ZN13HardwareServo9setPulseAEj>
			break;
    3be8:	08 95       	ret
		case ServoB:
			_controller->setPulseB(us);
    3bea:	82 81       	ldd	r24, Z+2	; 0x02
    3bec:	93 81       	ldd	r25, Z+3	; 0x03
    3bee:	0c 94 45 0d 	jmp	0x1a8a	; 0x1a8a <_ZN13HardwareServo9setPulseBEj>
			break;
    3bf2:	08 95       	ret
		case ServoC:
			_controller->setPulseC(us);
    3bf4:	82 81       	ldd	r24, Z+2	; 0x02
    3bf6:	93 81       	ldd	r25, Z+3	; 0x03
    3bf8:	0c 94 4f 0d 	jmp	0x1a9e	; 0x1a9e <_ZN13HardwareServo9setPulseCEj>
    3bfc:	08 95       	ret

00003bfe <_ZN16HardwarePcbServo6enableEb>:
		default:
			break;
	}
}

void HardwarePcbServo::enable(bool en /* = true */){
    3bfe:	fc 01       	movw	r30, r24
	switch(_servo){
    3c00:	94 81       	ldd	r25, Z+4	; 0x04
    3c02:	91 30       	cpi	r25, 0x01	; 1
    3c04:	81 f0       	breq	.+32     	; 0x3c26 <_ZN16HardwarePcbServo6enableEb+0x28>
    3c06:	18 f0       	brcs	.+6      	; 0x3c0e <_ZN16HardwarePcbServo6enableEb+0x10>
    3c08:	92 30       	cpi	r25, 0x02	; 2
    3c0a:	c9 f0       	breq	.+50     	; 0x3c3e <_ZN16HardwarePcbServo6enableEb+0x40>
    3c0c:	08 95       	ret
		case ServoA:
			if(en) _controller->EnableA(); else _controller->DisableA();
    3c0e:	66 23       	and	r22, r22
    3c10:	29 f0       	breq	.+10     	; 0x3c1c <_ZN16HardwarePcbServo6enableEb+0x1e>
    3c12:	82 81       	ldd	r24, Z+2	; 0x02
    3c14:	93 81       	ldd	r25, Z+3	; 0x03
    3c16:	0c 94 ea 0c 	jmp	0x19d4	; 0x19d4 <_ZN13HardwareServo7EnableAEv>
    3c1a:	08 95       	ret
    3c1c:	82 81       	ldd	r24, Z+2	; 0x02
    3c1e:	93 81       	ldd	r25, Z+3	; 0x03
    3c20:	0c 94 11 0d 	jmp	0x1a22	; 0x1a22 <_ZN13HardwareServo8DisableAEv>
    3c24:	08 95       	ret
			break;
		case ServoB:
			if(en) _controller->EnableB(); else _controller->DisableB();
    3c26:	66 23       	and	r22, r22
    3c28:	29 f0       	breq	.+10     	; 0x3c34 <_ZN16HardwarePcbServo6enableEb+0x36>
    3c2a:	82 81       	ldd	r24, Z+2	; 0x02
    3c2c:	93 81       	ldd	r25, Z+3	; 0x03
    3c2e:	0c 94 f7 0c 	jmp	0x19ee	; 0x19ee <_ZN13HardwareServo7EnableBEv>
    3c32:	08 95       	ret
    3c34:	82 81       	ldd	r24, Z+2	; 0x02
    3c36:	93 81       	ldd	r25, Z+3	; 0x03
    3c38:	0c 94 1f 0d 	jmp	0x1a3e	; 0x1a3e <_ZN13HardwareServo8DisableBEv>
    3c3c:	08 95       	ret
			break;
		case ServoC:
			if(en) _controller->EnableC(); else _controller->DisableC();
    3c3e:	66 23       	and	r22, r22
    3c40:	29 f0       	breq	.+10     	; 0x3c4c <_ZN16HardwarePcbServo6enableEb+0x4e>
    3c42:	82 81       	ldd	r24, Z+2	; 0x02
    3c44:	93 81       	ldd	r25, Z+3	; 0x03
    3c46:	0c 94 04 0d 	jmp	0x1a08	; 0x1a08 <_ZN13HardwareServo7EnableCEv>
    3c4a:	08 95       	ret
    3c4c:	82 81       	ldd	r24, Z+2	; 0x02
    3c4e:	93 81       	ldd	r25, Z+3	; 0x03
    3c50:	0c 94 2d 0d 	jmp	0x1a5a	; 0x1a5a <_ZN13HardwareServo8DisableCEv>
    3c54:	08 95       	ret

00003c56 <_ZN16HardwarePcbServoC1ER13HardwareServoNS_9ServoId_tE>:
 *  Author: zcarey
 */ 

#include "HardwarePcbServo.h"

HardwarePcbServo::HardwarePcbServo(HardwareServo &controller, ServoId_t servo) 
    3c56:	fc 01       	movw	r30, r24
	: PcbServo(), _controller(&controller), _servo(servo) {
    3c58:	83 e9       	ldi	r24, 0x93	; 147
    3c5a:	92 e0       	ldi	r25, 0x02	; 2
    3c5c:	91 83       	std	Z+1, r25	; 0x01
    3c5e:	80 83       	st	Z, r24
    3c60:	73 83       	std	Z+3, r23	; 0x03
    3c62:	62 83       	std	Z+2, r22	; 0x02
    3c64:	44 83       	std	Z+4, r20	; 0x04
    3c66:	08 95       	ret

00003c68 <_GLOBAL__sub_I_PcbServoA1>:
 *  Author: zcarey
 */ 

#include "PcbPins.h"

HardwarePcbServo PcbServoA1(Servo5, HardwarePcbServo::ServoC);
    3c68:	42 e0       	ldi	r20, 0x02	; 2
    3c6a:	63 e8       	ldi	r22, 0x83	; 131
    3c6c:	77 e0       	ldi	r23, 0x07	; 7
    3c6e:	89 e5       	ldi	r24, 0x59	; 89
    3c70:	99 e0       	ldi	r25, 0x09	; 9
    3c72:	f1 df       	rcall	.-30     	; 0x3c56 <_ZN16HardwarePcbServoC1ER13HardwareServoNS_9ServoId_tE>
HardwarePcbServo PcbServoA2(Servo3, HardwarePcbServo::ServoB);
    3c74:	41 e0       	ldi	r20, 0x01	; 1
    3c76:	69 ea       	ldi	r22, 0xA9	; 169
    3c78:	77 e0       	ldi	r23, 0x07	; 7
    3c7a:	84 e5       	ldi	r24, 0x54	; 84
    3c7c:	99 e0       	ldi	r25, 0x09	; 9
    3c7e:	eb df       	rcall	.-42     	; 0x3c56 <_ZN16HardwarePcbServoC1ER13HardwareServoNS_9ServoId_tE>
HardwarePcbServo PcbServoA3(Servo3, HardwarePcbServo::ServoA);
    3c80:	40 e0       	ldi	r20, 0x00	; 0
    3c82:	69 ea       	ldi	r22, 0xA9	; 169
    3c84:	77 e0       	ldi	r23, 0x07	; 7
    3c86:	8f e4       	ldi	r24, 0x4F	; 79
    3c88:	99 e0       	ldi	r25, 0x09	; 9
    3c8a:	e5 df       	rcall	.-54     	; 0x3c56 <_ZN16HardwarePcbServoC1ER13HardwareServoNS_9ServoId_tE>
HardwarePcbServo PcbServoA4(Servo4, HardwarePcbServo::ServoB);
    3c8c:	41 e0       	ldi	r20, 0x01	; 1
    3c8e:	66 e9       	ldi	r22, 0x96	; 150
    3c90:	77 e0       	ldi	r23, 0x07	; 7
    3c92:	8a e4       	ldi	r24, 0x4A	; 74
    3c94:	99 e0       	ldi	r25, 0x09	; 9
    3c96:	df df       	rcall	.-66     	; 0x3c56 <_ZN16HardwarePcbServoC1ER13HardwareServoNS_9ServoId_tE>
HardwarePcbServo PcbServoA5(Servo4, HardwarePcbServo::ServoC);
    3c98:	42 e0       	ldi	r20, 0x02	; 2
    3c9a:	66 e9       	ldi	r22, 0x96	; 150
    3c9c:	77 e0       	ldi	r23, 0x07	; 7
    3c9e:	85 e4       	ldi	r24, 0x45	; 69
    3ca0:	99 e0       	ldi	r25, 0x09	; 9
    3ca2:	d9 df       	rcall	.-78     	; 0x3c56 <_ZN16HardwarePcbServoC1ER13HardwareServoNS_9ServoId_tE>

HardwarePcbServo PcbServoB1(Servo5, HardwarePcbServo::ServoA);
    3ca4:	40 e0       	ldi	r20, 0x00	; 0
    3ca6:	63 e8       	ldi	r22, 0x83	; 131
    3ca8:	77 e0       	ldi	r23, 0x07	; 7
    3caa:	80 e4       	ldi	r24, 0x40	; 64
    3cac:	99 e0       	ldi	r25, 0x09	; 9
    3cae:	d3 df       	rcall	.-90     	; 0x3c56 <_ZN16HardwarePcbServoC1ER13HardwareServoNS_9ServoId_tE>
HardwarePcbServo PcbServoB2(Servo5, HardwarePcbServo::ServoB);
    3cb0:	41 e0       	ldi	r20, 0x01	; 1
    3cb2:	63 e8       	ldi	r22, 0x83	; 131
    3cb4:	77 e0       	ldi	r23, 0x07	; 7
    3cb6:	8b e3       	ldi	r24, 0x3B	; 59
    3cb8:	99 e0       	ldi	r25, 0x09	; 9
    3cba:	cd df       	rcall	.-102    	; 0x3c56 <_ZN16HardwarePcbServoC1ER13HardwareServoNS_9ServoId_tE>
HardwarePcbServo PcbServoB3(Servo3, HardwarePcbServo::ServoC);
    3cbc:	42 e0       	ldi	r20, 0x02	; 2
    3cbe:	69 ea       	ldi	r22, 0xA9	; 169
    3cc0:	77 e0       	ldi	r23, 0x07	; 7
    3cc2:	86 e3       	ldi	r24, 0x36	; 54
    3cc4:	99 e0       	ldi	r25, 0x09	; 9
    3cc6:	c7 df       	rcall	.-114    	; 0x3c56 <_ZN16HardwarePcbServoC1ER13HardwareServoNS_9ServoId_tE>
HardwarePcbServo PcbServoB4(Servo4, HardwarePcbServo::ServoA);
    3cc8:	40 e0       	ldi	r20, 0x00	; 0
    3cca:	66 e9       	ldi	r22, 0x96	; 150
    3ccc:	77 e0       	ldi	r23, 0x07	; 7
    3cce:	81 e3       	ldi	r24, 0x31	; 49
    3cd0:	99 e0       	ldi	r25, 0x09	; 9
    3cd2:	c1 df       	rcall	.-126    	; 0x3c56 <_ZN16HardwarePcbServoC1ER13HardwareServoNS_9ServoId_tE>
HardwarePcbServo PcbServoB5(Servo1, HardwarePcbServo::ServoA);
    3cd4:	40 e0       	ldi	r20, 0x00	; 0
    3cd6:	6c eb       	ldi	r22, 0xBC	; 188
    3cd8:	77 e0       	ldi	r23, 0x07	; 7
    3cda:	8c e2       	ldi	r24, 0x2C	; 44
    3cdc:	99 e0       	ldi	r25, 0x09	; 9
    3cde:	bb df       	rcall	.-138    	; 0x3c56 <_ZN16HardwarePcbServoC1ER13HardwareServoNS_9ServoId_tE>
HardwarePcbServo PcbServoB6(Servo1, HardwarePcbServo::ServoB);
    3ce0:	41 e0       	ldi	r20, 0x01	; 1
    3ce2:	6c eb       	ldi	r22, 0xBC	; 188
    3ce4:	77 e0       	ldi	r23, 0x07	; 7
    3ce6:	87 e2       	ldi	r24, 0x27	; 39
    3ce8:	99 e0       	ldi	r25, 0x09	; 9
    3cea:	b5 df       	rcall	.-150    	; 0x3c56 <_ZN16HardwarePcbServoC1ER13HardwareServoNS_9ServoId_tE>

TwiServoController PcaServoController(0x43); //0x70);
    3cec:	63 e4       	ldi	r22, 0x43	; 67
    3cee:	81 e2       	ldi	r24, 0x21	; 33
    3cf0:	99 e0       	ldi	r25, 0x09	; 9
    3cf2:	3c df       	rcall	.-392    	; 0x3b6c <_ZN18TwiServoControllerC1Eh>

TwiPcbServo PcbServoC1(PcaServoController, 0);
    3cf4:	40 e0       	ldi	r20, 0x00	; 0
    3cf6:	61 e2       	ldi	r22, 0x21	; 33
    3cf8:	79 e0       	ldi	r23, 0x09	; 9
    3cfa:	89 e1       	ldi	r24, 0x19	; 25
    3cfc:	99 e0       	ldi	r25, 0x09	; 9
    3cfe:	77 d0       	rcall	.+238    	; 0x3dee <_ZN11TwiPcbServoC1ER18TwiServoControllerh>
TwiPcbServo PcbServoC2(PcaServoController, 2);
    3d00:	42 e0       	ldi	r20, 0x02	; 2
    3d02:	61 e2       	ldi	r22, 0x21	; 33
    3d04:	79 e0       	ldi	r23, 0x09	; 9
    3d06:	81 e1       	ldi	r24, 0x11	; 17
    3d08:	99 e0       	ldi	r25, 0x09	; 9
    3d0a:	71 d0       	rcall	.+226    	; 0x3dee <_ZN11TwiPcbServoC1ER18TwiServoControllerh>
TwiPcbServo PcbServoC3(PcaServoController, 7);
    3d0c:	47 e0       	ldi	r20, 0x07	; 7
    3d0e:	61 e2       	ldi	r22, 0x21	; 33
    3d10:	79 e0       	ldi	r23, 0x09	; 9
    3d12:	89 e0       	ldi	r24, 0x09	; 9
    3d14:	99 e0       	ldi	r25, 0x09	; 9
    3d16:	6b d0       	rcall	.+214    	; 0x3dee <_ZN11TwiPcbServoC1ER18TwiServoControllerh>
TwiPcbServo PcbServoC4(PcaServoController, 5);
    3d18:	45 e0       	ldi	r20, 0x05	; 5
    3d1a:	61 e2       	ldi	r22, 0x21	; 33
    3d1c:	79 e0       	ldi	r23, 0x09	; 9
    3d1e:	81 e0       	ldi	r24, 0x01	; 1
    3d20:	99 e0       	ldi	r25, 0x09	; 9
    3d22:	65 d0       	rcall	.+202    	; 0x3dee <_ZN11TwiPcbServoC1ER18TwiServoControllerh>
TwiPcbServo PcbServoC5(PcaServoController, 8);
    3d24:	48 e0       	ldi	r20, 0x08	; 8
    3d26:	61 e2       	ldi	r22, 0x21	; 33
    3d28:	79 e0       	ldi	r23, 0x09	; 9
    3d2a:	89 ef       	ldi	r24, 0xF9	; 249
    3d2c:	98 e0       	ldi	r25, 0x08	; 8
    3d2e:	5f d0       	rcall	.+190    	; 0x3dee <_ZN11TwiPcbServoC1ER18TwiServoControllerh>
TwiPcbServo PcbServoC6(PcaServoController, 10);
    3d30:	4a e0       	ldi	r20, 0x0A	; 10
    3d32:	61 e2       	ldi	r22, 0x21	; 33
    3d34:	79 e0       	ldi	r23, 0x09	; 9
    3d36:	81 ef       	ldi	r24, 0xF1	; 241
    3d38:	98 e0       	ldi	r25, 0x08	; 8
    3d3a:	59 d0       	rcall	.+178    	; 0x3dee <_ZN11TwiPcbServoC1ER18TwiServoControllerh>
TwiPcbServo PcbServoC7(PcaServoController, 12);
    3d3c:	4c e0       	ldi	r20, 0x0C	; 12
    3d3e:	61 e2       	ldi	r22, 0x21	; 33
    3d40:	79 e0       	ldi	r23, 0x09	; 9
    3d42:	89 ee       	ldi	r24, 0xE9	; 233
    3d44:	98 e0       	ldi	r25, 0x08	; 8
    3d46:	53 d0       	rcall	.+166    	; 0x3dee <_ZN11TwiPcbServoC1ER18TwiServoControllerh>
TwiPcbServo PcbServoC8(PcaServoController, 14);
    3d48:	4e e0       	ldi	r20, 0x0E	; 14
    3d4a:	61 e2       	ldi	r22, 0x21	; 33
    3d4c:	79 e0       	ldi	r23, 0x09	; 9
    3d4e:	81 ee       	ldi	r24, 0xE1	; 225
    3d50:	98 e0       	ldi	r25, 0x08	; 8
    3d52:	4d d0       	rcall	.+154    	; 0x3dee <_ZN11TwiPcbServoC1ER18TwiServoControllerh>

TwiPcbServo PcbServoD1(PcaServoController, 1);
    3d54:	41 e0       	ldi	r20, 0x01	; 1
    3d56:	61 e2       	ldi	r22, 0x21	; 33
    3d58:	79 e0       	ldi	r23, 0x09	; 9
    3d5a:	89 ed       	ldi	r24, 0xD9	; 217
    3d5c:	98 e0       	ldi	r25, 0x08	; 8
    3d5e:	47 d0       	rcall	.+142    	; 0x3dee <_ZN11TwiPcbServoC1ER18TwiServoControllerh>
TwiPcbServo PcbServoD2(PcaServoController, 3);
    3d60:	43 e0       	ldi	r20, 0x03	; 3
    3d62:	61 e2       	ldi	r22, 0x21	; 33
    3d64:	79 e0       	ldi	r23, 0x09	; 9
    3d66:	81 ed       	ldi	r24, 0xD1	; 209
    3d68:	98 e0       	ldi	r25, 0x08	; 8
    3d6a:	41 d0       	rcall	.+130    	; 0x3dee <_ZN11TwiPcbServoC1ER18TwiServoControllerh>
TwiPcbServo PcbServoD3(PcaServoController, 6);
    3d6c:	46 e0       	ldi	r20, 0x06	; 6
    3d6e:	61 e2       	ldi	r22, 0x21	; 33
    3d70:	79 e0       	ldi	r23, 0x09	; 9
    3d72:	89 ec       	ldi	r24, 0xC9	; 201
    3d74:	98 e0       	ldi	r25, 0x08	; 8
    3d76:	3b d0       	rcall	.+118    	; 0x3dee <_ZN11TwiPcbServoC1ER18TwiServoControllerh>
TwiPcbServo PcbServoD4(PcaServoController, 4);
    3d78:	44 e0       	ldi	r20, 0x04	; 4
    3d7a:	61 e2       	ldi	r22, 0x21	; 33
    3d7c:	79 e0       	ldi	r23, 0x09	; 9
    3d7e:	81 ec       	ldi	r24, 0xC1	; 193
    3d80:	98 e0       	ldi	r25, 0x08	; 8
    3d82:	35 d0       	rcall	.+106    	; 0x3dee <_ZN11TwiPcbServoC1ER18TwiServoControllerh>
TwiPcbServo PcbServoD5(PcaServoController, 9);
    3d84:	49 e0       	ldi	r20, 0x09	; 9
    3d86:	61 e2       	ldi	r22, 0x21	; 33
    3d88:	79 e0       	ldi	r23, 0x09	; 9
    3d8a:	89 eb       	ldi	r24, 0xB9	; 185
    3d8c:	98 e0       	ldi	r25, 0x08	; 8
    3d8e:	2f d0       	rcall	.+94     	; 0x3dee <_ZN11TwiPcbServoC1ER18TwiServoControllerh>
    3d90:	4b e0       	ldi	r20, 0x0B	; 11
TwiPcbServo PcbServoD6(PcaServoController, 11);
    3d92:	61 e2       	ldi	r22, 0x21	; 33
    3d94:	79 e0       	ldi	r23, 0x09	; 9
    3d96:	81 eb       	ldi	r24, 0xB1	; 177
    3d98:	98 e0       	ldi	r25, 0x08	; 8
    3d9a:	29 d0       	rcall	.+82     	; 0x3dee <_ZN11TwiPcbServoC1ER18TwiServoControllerh>
    3d9c:	4d e0       	ldi	r20, 0x0D	; 13
    3d9e:	61 e2       	ldi	r22, 0x21	; 33
TwiPcbServo PcbServoD7(PcaServoController, 13);
    3da0:	79 e0       	ldi	r23, 0x09	; 9
    3da2:	89 ea       	ldi	r24, 0xA9	; 169
    3da4:	98 e0       	ldi	r25, 0x08	; 8
    3da6:	23 d0       	rcall	.+70     	; 0x3dee <_ZN11TwiPcbServoC1ER18TwiServoControllerh>
    3da8:	4f e0       	ldi	r20, 0x0F	; 15
    3daa:	61 e2       	ldi	r22, 0x21	; 33
    3dac:	79 e0       	ldi	r23, 0x09	; 9
    3dae:	81 ea       	ldi	r24, 0xA1	; 161
    3db0:	98 e0       	ldi	r25, 0x08	; 8
    3db2:	1d c0       	rjmp	.+58     	; 0x3dee <_ZN11TwiPcbServoC1ER18TwiServoControllerh>
    3db4:	08 95       	ret

00003db6 <_ZN11TwiPcbServo8setPulseEj>:
{
	
}

void TwiPcbServo::setPulse(uint16_t us){
	_lastPulse = us;
    3db6:	fc 01       	movw	r30, r24
    3db8:	77 83       	std	Z+7, r23	; 0x07
    3dba:	66 83       	std	Z+6, r22	; 0x06
	if(_enabled) _controller->setPulse(_servo, us);
    3dbc:	25 81       	ldd	r18, Z+5	; 0x05
    3dbe:	22 23       	and	r18, r18
    3dc0:	29 f0       	breq	.+10     	; 0x3dcc <_ZN11TwiPcbServo8setPulseEj+0x16>
    3dc2:	ab 01       	movw	r20, r22
    3dc4:	64 81       	ldd	r22, Z+4	; 0x04
    3dc6:	82 81       	ldd	r24, Z+2	; 0x02
    3dc8:	93 81       	ldd	r25, Z+3	; 0x03
    3dca:	f6 ce       	rjmp	.-532    	; 0x3bb8 <_ZN18TwiServoController8setPulseEhj>
    3dcc:	08 95       	ret

00003dce <_ZN11TwiPcbServo6enableEb>:
}

void TwiPcbServo::enable(bool en /* = true */){
    3dce:	fc 01       	movw	r30, r24
	_enabled = en;
    3dd0:	65 83       	std	Z+5, r22	; 0x05
	if(en) _controller->setPulse(_servo, _lastPulse);
    3dd2:	66 23       	and	r22, r22
    3dd4:	39 f0       	breq	.+14     	; 0x3de4 <_ZN11TwiPcbServo6enableEb+0x16>
    3dd6:	46 81       	ldd	r20, Z+6	; 0x06
    3dd8:	57 81       	ldd	r21, Z+7	; 0x07
    3dda:	64 81       	ldd	r22, Z+4	; 0x04
    3ddc:	82 81       	ldd	r24, Z+2	; 0x02
    3dde:	93 81       	ldd	r25, Z+3	; 0x03
    3de0:	eb ce       	rjmp	.-554    	; 0x3bb8 <_ZN18TwiServoController8setPulseEhj>
    3de2:	08 95       	ret
	else _controller->release(_servo);
    3de4:	64 81       	ldd	r22, Z+4	; 0x04
    3de6:	82 81       	ldd	r24, Z+2	; 0x02
    3de8:	93 81       	ldd	r25, Z+3	; 0x03
    3dea:	ea ce       	rjmp	.-556    	; 0x3bc0 <_ZN18TwiServoController7releaseEh>
    3dec:	08 95       	ret

00003dee <_ZN11TwiPcbServoC1ER18TwiServoControllerh>:
 *  Author: zcarey
 */ 

#include "TwiPcbServo.h"

TwiPcbServo::TwiPcbServo(TwiServoController &controller, uint8_t servo)
    3dee:	fc 01       	movw	r30, r24
	: PcbServo(), _controller(&controller), _servo(servo), _enabled(false), _lastPulse(1500)
    3df0:	8b e9       	ldi	r24, 0x9B	; 155
    3df2:	92 e0       	ldi	r25, 0x02	; 2
    3df4:	91 83       	std	Z+1, r25	; 0x01
    3df6:	80 83       	st	Z, r24
    3df8:	73 83       	std	Z+3, r23	; 0x03
    3dfa:	62 83       	std	Z+2, r22	; 0x02
    3dfc:	44 83       	std	Z+4, r20	; 0x04
    3dfe:	15 82       	std	Z+5, r1	; 0x05
    3e00:	8c ed       	ldi	r24, 0xDC	; 220
    3e02:	95 e0       	ldi	r25, 0x05	; 5
    3e04:	97 83       	std	Z+7, r25	; 0x07
    3e06:	86 83       	std	Z+6, r24	; 0x06
    3e08:	08 95       	ret

00003e0a <_ZN9IReadable15CommandReceivedEhPKhh>:
#include "EtherComm.h"

class IReadable : public IRegister {
public:
	void CommandReceived(uint8_t id, const uint8_t* data, uint8_t len){
		if(len == 0){
    3e0a:	21 11       	cpse	r18, r1
    3e0c:	0d c0       	rjmp	.+26     	; 0x3e28 <_ZN9IReadable15CommandReceivedEhPKhh+0x1e>
			ReadRegisterRequested(id, EtherComm::buffer + 1/*+ 3*/);
    3e0e:	40 91 00 02 	lds	r20, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    3e12:	50 91 01 02 	lds	r21, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    3e16:	4f 5f       	subi	r20, 0xFF	; 255
    3e18:	5f 4f       	sbci	r21, 0xFF	; 255
    3e1a:	dc 01       	movw	r26, r24
    3e1c:	ed 91       	ld	r30, X+
    3e1e:	fc 91       	ld	r31, X
    3e20:	06 80       	ldd	r0, Z+6	; 0x06
    3e22:	f7 81       	ldd	r31, Z+7	; 0x07
    3e24:	e0 2d       	mov	r30, r0
    3e26:	19 95       	eicall
    3e28:	08 95       	ret

00003e2a <_ZN13DigitalSensor6UpdateEPh>:
	
	bool begin(){ //override
		return rov.RegisterDevice(_id, this);
	}
	
	void Update(uint8_t* buffer) { //override
    3e2a:	08 95       	ret

00003e2c <_ZN9IWritable15CommandReceivedEhPKhh>:
#include "IRegister.h"
#include "Commands.h"
class IWritable : public IRegister {
public:
	inline void CommandReceived(uint8_t id, const uint8_t* data, uint8_t len){
		WriteRegisterRequested(id, data, len);
    3e2c:	dc 01       	movw	r26, r24
    3e2e:	ed 91       	ld	r30, X+
    3e30:	fc 91       	ld	r31, X
    3e32:	06 80       	ldd	r0, Z+6	; 0x06
    3e34:	f7 81       	ldd	r31, Z+7	; 0x07
    3e36:	e0 2d       	mov	r30, r0
    3e38:	19 95       	eicall
    3e3a:	08 95       	ret

00003e3c <_ZN15DigitalActuator6UpdateEPh>:
	
	bool begin(){ //override
		return rov.RegisterDevice(_id, this);
	}
	
	void Update(uint8_t* buffer){ //override
    3e3c:	08 95       	ret

00003e3e <_ZN13ServoActuator6UpdateEPh>:
		
		_servo->setPulse(1500);
		return true;
	}
	
	void Update(uint8_t* buffer){
    3e3e:	08 95       	ret

00003e40 <_ZN11TwiRegister6UpdateEPh>:
	
	bool begin(){
		return rov.RegisterDevice(_id, this);
	}
	
	void Update(uint8_t* buffer){
    3e40:	08 95       	ret

00003e42 <_ZN13DigitalSensor21ReadRegisterRequestedEhPh>:
	}

protected:

	void ReadRegisterRequested(uint8_t id, uint8_t* buffer) { //override
		if(id == _id){
    3e42:	dc 01       	movw	r26, r24
    3e44:	12 96       	adiw	r26, 0x02	; 2
    3e46:	2c 91       	ld	r18, X
    3e48:	12 97       	sbiw	r26, 0x02	; 2
    3e4a:	26 13       	cpse	r18, r22
    3e4c:	14 c0       	rjmp	.+40     	; 0x3e76 <_ZN13DigitalSensor21ReadRegisterRequestedEhPh+0x34>
			buffer[0] = ((*_pinPort & _pin) > 0) ^ _inversed;
    3e4e:	14 96       	adiw	r26, 0x04	; 4
    3e50:	ed 91       	ld	r30, X+
    3e52:	fc 91       	ld	r31, X
    3e54:	15 97       	sbiw	r26, 0x05	; 5
    3e56:	60 81       	ld	r22, Z
    3e58:	13 96       	adiw	r26, 0x03	; 3
    3e5a:	3c 91       	ld	r19, X
    3e5c:	36 23       	and	r19, r22
    3e5e:	61 e0       	ldi	r22, 0x01	; 1
    3e60:	09 f4       	brne	.+2      	; 0x3e64 <_ZN13DigitalSensor21ReadRegisterRequestedEhPh+0x22>
    3e62:	60 e0       	ldi	r22, 0x00	; 0
    3e64:	da 01       	movw	r26, r20
    3e66:	fc 01       	movw	r30, r24
    3e68:	86 81       	ldd	r24, Z+6	; 0x06
    3e6a:	86 27       	eor	r24, r22
    3e6c:	8c 93       	st	X, r24
	
protected:
	void inline SendCommand(uint8_t id, uint8_t len){
		//EtherComm::buffer[2] = id;
		//EtherComm::SendCommand(CMD_UpdateDevice, len + 1);
		EtherComm::SendCommand(id, len);	
    3e6e:	61 e0       	ldi	r22, 0x01	; 1
    3e70:	82 2f       	mov	r24, r18
    3e72:	0c 94 7b 0b 	jmp	0x16f6	; 0x16f6 <_ZN9EtherComm11SendCommandEhh>
    3e76:	08 95       	ret

00003e78 <_ZN13ServoActuator22WriteRegisterRequestedEhPKhh>:
		
	}
	
protected:
	void WriteRegisterRequested(uint8_t id, const uint8_t* data, uint8_t len){
    3e78:	cf 93       	push	r28
    3e7a:	df 93       	push	r29
    3e7c:	c6 2f       	mov	r28, r22
		if(id == _id){
    3e7e:	dc 01       	movw	r26, r24
    3e80:	12 96       	adiw	r26, 0x02	; 2
    3e82:	dc 91       	ld	r29, X
    3e84:	12 97       	sbiw	r26, 0x02	; 2
    3e86:	d6 13       	cpse	r29, r22
    3e88:	15 c0       	rjmp	.+42     	; 0x3eb4 <_ZN13ServoActuator22WriteRegisterRequestedEhPKhh+0x3c>
			if(len == 2){
    3e8a:	22 30       	cpi	r18, 0x02	; 2
    3e8c:	61 f5       	brne	.+88     	; 0x3ee6 <_ZN13ServoActuator22WriteRegisterRequestedEhPKhh+0x6e>
				_servo->setPulse(*((uint16_t*)data));
    3e8e:	14 96       	adiw	r26, 0x04	; 4
    3e90:	8d 91       	ld	r24, X+
    3e92:	9c 91       	ld	r25, X
    3e94:	15 97       	sbiw	r26, 0x05	; 5
    3e96:	fa 01       	movw	r30, r20
    3e98:	60 81       	ld	r22, Z
    3e9a:	71 81       	ldd	r23, Z+1	; 0x01
    3e9c:	dc 01       	movw	r26, r24
    3e9e:	ed 91       	ld	r30, X+
    3ea0:	fc 91       	ld	r31, X
    3ea2:	01 90       	ld	r0, Z+
    3ea4:	f0 81       	ld	r31, Z
    3ea6:	e0 2d       	mov	r30, r0
    3ea8:	19 95       	eicall
protected:
	virtual void WriteRegisterRequested(uint8_t id, const uint8_t* data, uint8_t len);
	void SendConfirmation(uint8_t id){
		//EtherComm::buffer[2] = id;
		//EtherComm::SendCommand(CMD_UpdateDevice, 1);
		EtherComm::SendCommand(id, 0);
    3eaa:	60 e0       	ldi	r22, 0x00	; 0
    3eac:	8d 2f       	mov	r24, r29
    3eae:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <_ZN9EtherComm11SendCommandEhh>
    3eb2:	19 c0       	rjmp	.+50     	; 0x3ee6 <_ZN13ServoActuator22WriteRegisterRequestedEhPKhh+0x6e>
				SendConfirmation(id);
			}
		} else if(id == _enId){
    3eb4:	fc 01       	movw	r30, r24
    3eb6:	33 81       	ldd	r19, Z+3	; 0x03
    3eb8:	63 13       	cpse	r22, r19
    3eba:	15 c0       	rjmp	.+42     	; 0x3ee6 <_ZN13ServoActuator22WriteRegisterRequestedEhPKhh+0x6e>
			if(len == 1){
    3ebc:	21 30       	cpi	r18, 0x01	; 1
    3ebe:	99 f4       	brne	.+38     	; 0x3ee6 <_ZN13ServoActuator22WriteRegisterRequestedEhPKhh+0x6e>
				_servo->enable(data[0]);
    3ec0:	84 81       	ldd	r24, Z+4	; 0x04
    3ec2:	95 81       	ldd	r25, Z+5	; 0x05
    3ec4:	61 e0       	ldi	r22, 0x01	; 1
    3ec6:	da 01       	movw	r26, r20
    3ec8:	2c 91       	ld	r18, X
    3eca:	21 11       	cpse	r18, r1
    3ecc:	01 c0       	rjmp	.+2      	; 0x3ed0 <_ZN13ServoActuator22WriteRegisterRequestedEhPKhh+0x58>
    3ece:	60 e0       	ldi	r22, 0x00	; 0
    3ed0:	dc 01       	movw	r26, r24
    3ed2:	ed 91       	ld	r30, X+
    3ed4:	fc 91       	ld	r31, X
    3ed6:	02 80       	ldd	r0, Z+2	; 0x02
    3ed8:	f3 81       	ldd	r31, Z+3	; 0x03
    3eda:	e0 2d       	mov	r30, r0
    3edc:	19 95       	eicall
    3ede:	60 e0       	ldi	r22, 0x00	; 0
    3ee0:	8c 2f       	mov	r24, r28
    3ee2:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <_ZN9EtherComm11SendCommandEhh>
				SendConfirmation(id);
			}
		}
	}
    3ee6:	df 91       	pop	r29
    3ee8:	cf 91       	pop	r28
    3eea:	08 95       	ret

00003eec <_ZN15DigitalActuator22WriteRegisterRequestedEhPKhh>:
		
	}

protected:
	void WriteRegisterRequested(uint8_t id, const uint8_t* data, uint8_t len){ //override
		if((id == _id) && (len == 1)){
    3eec:	dc 01       	movw	r26, r24
    3eee:	12 96       	adiw	r26, 0x02	; 2
    3ef0:	3c 91       	ld	r19, X
    3ef2:	36 13       	cpse	r19, r22
    3ef4:	26 c0       	rjmp	.+76     	; 0x3f42 <_ZN15DigitalActuator22WriteRegisterRequestedEhPKhh+0x56>
    3ef6:	21 30       	cpi	r18, 0x01	; 1
    3ef8:	21 f5       	brne	.+72     	; 0x3f42 <_ZN15DigitalActuator22WriteRegisterRequestedEhPKhh+0x56>
			if((data[0] > 0) ^ _inversed) *_portPort |= _pin;
    3efa:	fa 01       	movw	r30, r20
    3efc:	40 81       	ld	r20, Z
    3efe:	41 11       	cpse	r20, r1
    3f00:	01 c0       	rjmp	.+2      	; 0x3f04 <_ZN15DigitalActuator22WriteRegisterRequestedEhPKhh+0x18>
    3f02:	20 e0       	ldi	r18, 0x00	; 0
    3f04:	dc 01       	movw	r26, r24
    3f06:	16 96       	adiw	r26, 0x06	; 6
    3f08:	4c 91       	ld	r20, X
    3f0a:	16 97       	sbiw	r26, 0x06	; 6
    3f0c:	24 17       	cp	r18, r20
    3f0e:	51 f0       	breq	.+20     	; 0x3f24 <_ZN15DigitalActuator22WriteRegisterRequestedEhPKhh+0x38>
    3f10:	14 96       	adiw	r26, 0x04	; 4
    3f12:	ed 91       	ld	r30, X+
    3f14:	fc 91       	ld	r31, X
    3f16:	15 97       	sbiw	r26, 0x05	; 5
    3f18:	20 81       	ld	r18, Z
    3f1a:	13 96       	adiw	r26, 0x03	; 3
    3f1c:	8c 91       	ld	r24, X
    3f1e:	82 2b       	or	r24, r18
    3f20:	80 83       	st	Z, r24
    3f22:	0b c0       	rjmp	.+22     	; 0x3f3a <_ZN15DigitalActuator22WriteRegisterRequestedEhPKhh+0x4e>
			else *_portPort &= ~_pin;
    3f24:	dc 01       	movw	r26, r24
    3f26:	14 96       	adiw	r26, 0x04	; 4
    3f28:	ed 91       	ld	r30, X+
    3f2a:	fc 91       	ld	r31, X
    3f2c:	15 97       	sbiw	r26, 0x05	; 5
    3f2e:	20 81       	ld	r18, Z
    3f30:	13 96       	adiw	r26, 0x03	; 3
    3f32:	8c 91       	ld	r24, X
    3f34:	80 95       	com	r24
    3f36:	82 23       	and	r24, r18
    3f38:	80 83       	st	Z, r24
    3f3a:	60 e0       	ldi	r22, 0x00	; 0
    3f3c:	83 2f       	mov	r24, r19
    3f3e:	0c 94 7b 0b 	jmp	0x16f6	; 0x16f6 <_ZN9EtherComm11SendCommandEhh>
    3f42:	08 95       	ret

00003f44 <_ZN11TwiRegister22WriteRegisterRequestedEhPKhh>:
		
	}
	
protected:
	void WriteRegisterRequested(uint8_t id, const uint8_t* data, uint8_t len){
		if(id == _id){
    3f44:	fc 01       	movw	r30, r24
    3f46:	82 81       	ldd	r24, Z+2	; 0x02
    3f48:	86 13       	cpse	r24, r22
    3f4a:	0b c0       	rjmp	.+22     	; 0x3f62 <_ZN11TwiRegister22WriteRegisterRequestedEhPKhh+0x1e>
			if(len == 4){
    3f4c:	24 30       	cpi	r18, 0x04	; 4
    3f4e:	49 f4       	brne	.+18     	; 0x3f62 <_ZN11TwiRegister22WriteRegisterRequestedEhPKhh+0x1e>
    3f50:	fa 01       	movw	r30, r20
				Wire.setClock(*((uint32_t*)data));
    3f52:	40 81       	ld	r20, Z
    3f54:	51 81       	ldd	r21, Z+1	; 0x01
    3f56:	62 81       	ldd	r22, Z+2	; 0x02
    3f58:	73 81       	ldd	r23, Z+3	; 0x03
    3f5a:	85 e5       	ldi	r24, 0x55	; 85
    3f5c:	98 e0       	ldi	r25, 0x08	; 8
    3f5e:	0c 94 7a 12 	jmp	0x24f4	; 0x24f4 <_ZN7TwoWire8setClockEm>
    3f62:	08 95       	ret

00003f64 <_Z19printServoErrorCodeh>:
#define ERROR_INIT_LED 0x03
#define ERROR_INIT_IMU 0x04
#define ERROR_INIT_PRESSURE 0x05
#define ERROR_INIT_TWI 0x06

void printServoErrorCode(uint8_t code){
    3f64:	cf 93       	push	r28
    3f66:	df 93       	push	r29
	if(code == 0x10){
    3f68:	80 31       	cpi	r24, 0x10	; 16
    3f6a:	31 f4       	brne	.+12     	; 0x3f78 <_Z19printServoErrorCodeh+0x14>
		Serial.println("Unable to initialize Twi Servo Controller.");
    3f6c:	6f e9       	ldi	r22, 0x9F	; 159
    3f6e:	72 e0       	ldi	r23, 0x02	; 2
    3f70:	87 e7       	ldi	r24, 0x77	; 119
    3f72:	97 e0       	ldi	r25, 0x07	; 7
    3f74:	92 d6       	rcall	.+3364   	; 0x4c9a <_ZN5Print7printlnEPKc>
		return;
    3f76:	35 c0       	rjmp	.+106    	; 0x3fe2 <_Z19printServoErrorCodeh+0x7e>
	}
	
	char letter = '?';
	uint8_t num = code & 0x0F;
    3f78:	c8 2f       	mov	r28, r24
    3f7a:	cf 70       	andi	r28, 0x0F	; 15
	
	switch(code >> 4){
    3f7c:	90 e0       	ldi	r25, 0x00	; 0
    3f7e:	95 95       	asr	r25
    3f80:	87 95       	ror	r24
    3f82:	95 95       	asr	r25
    3f84:	87 95       	ror	r24
    3f86:	95 95       	asr	r25
    3f88:	87 95       	ror	r24
    3f8a:	95 95       	asr	r25
    3f8c:	87 95       	ror	r24
    3f8e:	82 30       	cpi	r24, 0x02	; 2
    3f90:	91 05       	cpc	r25, r1
    3f92:	61 f0       	breq	.+24     	; 0x3fac <_Z19printServoErrorCodeh+0x48>
    3f94:	1c f4       	brge	.+6      	; 0x3f9c <_Z19printServoErrorCodeh+0x38>
    3f96:	01 97       	sbiw	r24, 0x01	; 1
    3f98:	39 f0       	breq	.+14     	; 0x3fa8 <_Z19printServoErrorCodeh+0x44>
    3f9a:	0e c0       	rjmp	.+28     	; 0x3fb8 <_Z19printServoErrorCodeh+0x54>
    3f9c:	83 30       	cpi	r24, 0x03	; 3
    3f9e:	91 05       	cpc	r25, r1
    3fa0:	39 f0       	breq	.+14     	; 0x3fb0 <_Z19printServoErrorCodeh+0x4c>
    3fa2:	04 97       	sbiw	r24, 0x04	; 4
    3fa4:	39 f0       	breq	.+14     	; 0x3fb4 <_Z19printServoErrorCodeh+0x50>
    3fa6:	08 c0       	rjmp	.+16     	; 0x3fb8 <_Z19printServoErrorCodeh+0x54>
		case 1: letter = 'A'; break;
    3fa8:	d1 e4       	ldi	r29, 0x41	; 65
    3faa:	07 c0       	rjmp	.+14     	; 0x3fba <_Z19printServoErrorCodeh+0x56>
		case 2: letter = 'B'; break;
    3fac:	d2 e4       	ldi	r29, 0x42	; 66
    3fae:	05 c0       	rjmp	.+10     	; 0x3fba <_Z19printServoErrorCodeh+0x56>
		case 3: letter = 'C'; break;
    3fb0:	d3 e4       	ldi	r29, 0x43	; 67
    3fb2:	03 c0       	rjmp	.+6      	; 0x3fba <_Z19printServoErrorCodeh+0x56>
		case 4: letter = 'D'; break;
    3fb4:	d4 e4       	ldi	r29, 0x44	; 68
    3fb6:	01 c0       	rjmp	.+2      	; 0x3fba <_Z19printServoErrorCodeh+0x56>
	if(code == 0x10){
		Serial.println("Unable to initialize Twi Servo Controller.");
		return;
	}
	
	char letter = '?';
    3fb8:	df e3       	ldi	r29, 0x3F	; 63
		case 2: letter = 'B'; break;
		case 3: letter = 'C'; break;
		case 4: letter = 'D'; break;
	}
	
	Serial.print("Unable to initialize Servo");
    3fba:	6a ec       	ldi	r22, 0xCA	; 202
    3fbc:	72 e0       	ldi	r23, 0x02	; 2
    3fbe:	87 e7       	ldi	r24, 0x77	; 119
    3fc0:	97 e0       	ldi	r25, 0x07	; 7
    3fc2:	41 d6       	rcall	.+3202   	; 0x4c46 <_ZN5Print5printEPKc>
	Serial.print(letter);
    3fc4:	6d 2f       	mov	r22, r29
    3fc6:	87 e7       	ldi	r24, 0x77	; 119
    3fc8:	97 e0       	ldi	r25, 0x07	; 7
    3fca:	53 d6       	rcall	.+3238   	; 0x4c72 <_ZN5Print5printEc>
	Serial.print(num);
    3fcc:	4a e0       	ldi	r20, 0x0A	; 10
    3fce:	50 e0       	ldi	r21, 0x00	; 0
    3fd0:	6c 2f       	mov	r22, r28
    3fd2:	87 e7       	ldi	r24, 0x77	; 119
    3fd4:	97 e0       	ldi	r25, 0x07	; 7
    3fd6:	dd d6       	rcall	.+3514   	; 0x4d92 <_ZN5Print5printEhi>
	Serial.println(".");
    3fd8:	69 e3       	ldi	r22, 0x39	; 57
    3fda:	72 e0       	ldi	r23, 0x02	; 2
    3fdc:	87 e7       	ldi	r24, 0x77	; 119
    3fde:	97 e0       	ldi	r25, 0x07	; 7
    3fe0:	5c d6       	rcall	.+3256   	; 0x4c9a <_ZN5Print7printlnEPKc>
}
    3fe2:	df 91       	pop	r29
    3fe4:	cf 91       	pop	r28
    3fe6:	08 95       	ret

00003fe8 <_ZN5Robot14RegisterDeviceEhP9IRegister>:
	return true;
}


bool Robot::RegisterDevice(uint8_t id, IRegister* device){
	if((id != 0xFF) && (registers[id] == NULL)){
    3fe8:	8f 3f       	cpi	r24, 0xFF	; 255
    3fea:	a1 f0       	breq	.+40     	; 0x4014 <_ZN5Robot14RegisterDeviceEhP9IRegister+0x2c>
    3fec:	28 2f       	mov	r18, r24
    3fee:	30 e0       	ldi	r19, 0x00	; 0
    3ff0:	f9 01       	movw	r30, r18
    3ff2:	ee 0f       	add	r30, r30
    3ff4:	ff 1f       	adc	r31, r31
    3ff6:	e2 5a       	subi	r30, 0xA2	; 162
    3ff8:	f5 4f       	sbci	r31, 0xF5	; 245
    3ffa:	40 81       	ld	r20, Z
    3ffc:	51 81       	ldd	r21, Z+1	; 0x01
    3ffe:	45 2b       	or	r20, r21
    4000:	49 f4       	brne	.+18     	; 0x4014 <_ZN5Robot14RegisterDeviceEhP9IRegister+0x2c>
		registers[id] = device; 
    4002:	22 0f       	add	r18, r18
    4004:	33 1f       	adc	r19, r19
    4006:	f9 01       	movw	r30, r18
    4008:	e2 5a       	subi	r30, 0xA2	; 162
    400a:	f5 4f       	sbci	r31, 0xF5	; 245
    400c:	71 83       	std	Z+1, r23	; 0x01
    400e:	60 83       	st	Z, r22
		return true;
    4010:	81 e0       	ldi	r24, 0x01	; 1
    4012:	08 95       	ret
inline ErrorFlag operator | (ErrorFlag lhs, ErrorFlag rhs) {
	return static_cast<ErrorFlag>(static_cast<int>(lhs) | static_cast<int>(rhs));
}

inline ErrorFlag& operator |= (ErrorFlag& lhs, ErrorFlag rhs) {
	lhs = lhs | rhs;
    4014:	ee e5       	ldi	r30, 0x5E	; 94
    4016:	f9 e0       	ldi	r31, 0x09	; 9
    4018:	90 81       	ld	r25, Z
    401a:	91 60       	ori	r25, 0x01	; 1
    401c:	90 83       	st	Z, r25
	if((id != 0xFF) && (registers[id] == NULL)){
		registers[id] = device; 
		return true;
	}else{
		ErrorCodes.errors |= IdCollision;
		ErrorCodes.id_collision = id;
    401e:	81 83       	std	Z+1, r24	; 0x01
		return false;
    4020:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    4022:	08 95       	ret

00004024 <_ZN13ServoActuator5beginEv>:
		: _id(id), _enId(enId), _servo(&servo)
	{
			
	}
	
	bool begin(){
    4024:	1f 93       	push	r17
    4026:	cf 93       	push	r28
    4028:	df 93       	push	r29
    402a:	ec 01       	movw	r28, r24
		if(!rov.RegisterDevice(_id, this) || !rov.RegisterDevice(_enId, this)) return false;
    402c:	bc 01       	movw	r22, r24
    402e:	8a 81       	ldd	r24, Y+2	; 0x02
    4030:	db df       	rcall	.-74     	; 0x3fe8 <_ZN5Robot14RegisterDeviceEhP9IRegister>
    4032:	18 2f       	mov	r17, r24
    4034:	88 23       	and	r24, r24
    4036:	89 f0       	breq	.+34     	; 0x405a <_ZN13ServoActuator5beginEv+0x36>
    4038:	be 01       	movw	r22, r28
    403a:	8b 81       	ldd	r24, Y+3	; 0x03
    403c:	d5 df       	rcall	.-86     	; 0x3fe8 <_ZN5Robot14RegisterDeviceEhP9IRegister>
    403e:	18 2f       	mov	r17, r24
    4040:	88 23       	and	r24, r24
    4042:	59 f0       	breq	.+22     	; 0x405a <_ZN13ServoActuator5beginEv+0x36>
		
		_servo->setPulse(1500);
    4044:	8c 81       	ldd	r24, Y+4	; 0x04
    4046:	9d 81       	ldd	r25, Y+5	; 0x05
    4048:	dc 01       	movw	r26, r24
    404a:	ed 91       	ld	r30, X+
    404c:	fc 91       	ld	r31, X
    404e:	01 90       	ld	r0, Z+
    4050:	f0 81       	ld	r31, Z
    4052:	e0 2d       	mov	r30, r0
    4054:	6c ed       	ldi	r22, 0xDC	; 220
    4056:	75 e0       	ldi	r23, 0x05	; 5
    4058:	19 95       	eicall
		return true;
	}
    405a:	81 2f       	mov	r24, r17
    405c:	df 91       	pop	r29
    405e:	cf 91       	pop	r28
    4060:	1f 91       	pop	r17
    4062:	08 95       	ret

00004064 <_ZN13DigitalSensor5beginEv>:
		DDRPort &= ~Pin; //Enable input
		PortPort |= Pin; //Enable pullup
	}
	
	bool begin(){ //override
		return rov.RegisterDevice(_id, this);
    4064:	bc 01       	movw	r22, r24
    4066:	fc 01       	movw	r30, r24
    4068:	82 81       	ldd	r24, Z+2	; 0x02
    406a:	be cf       	rjmp	.-132    	; 0x3fe8 <_ZN5Robot14RegisterDeviceEhP9IRegister>
	}
    406c:	08 95       	ret

0000406e <_ZN15DigitalActuator5beginEv>:
	{
		DDRPort |= Pin;
	}
	
	bool begin(){ //override
		return rov.RegisterDevice(_id, this);
    406e:	bc 01       	movw	r22, r24
    4070:	fc 01       	movw	r30, r24
    4072:	82 81       	ldd	r24, Z+2	; 0x02
    4074:	b9 cf       	rjmp	.-142    	; 0x3fe8 <_ZN5Robot14RegisterDeviceEhP9IRegister>
	}
    4076:	08 95       	ret

00004078 <_ZN11TwiRegister5beginEv>:
public:
	TwiRegister(const uint8_t id) : _id(id) {
	}
	
	bool begin(){
		return rov.RegisterDevice(_id, this);
    4078:	bc 01       	movw	r22, r24
    407a:	fc 01       	movw	r30, r24
    407c:	82 81       	ldd	r24, Z+2	; 0x02
    407e:	b4 cf       	rjmp	.-152    	; 0x3fe8 <_ZN5Robot14RegisterDeviceEhP9IRegister>
	}
    4080:	08 95       	ret

00004082 <_Z16initializeServosv>:
	Serial.print(letter);
	Serial.print(num);
	Serial.println(".");
}

bool initializeServos(){
    4082:	1f 93       	push	r17
    4084:	cf 93       	push	r28
    4086:	df 93       	push	r29
	Servo1.begin();
    4088:	8c eb       	ldi	r24, 0xBC	; 188
    408a:	97 e0       	ldi	r25, 0x07	; 7
    408c:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <_ZN13HardwareServo5beginEv>
	Servo3.begin();
    4090:	89 ea       	ldi	r24, 0xA9	; 169
    4092:	97 e0       	ldi	r25, 0x07	; 7
    4094:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <_ZN13HardwareServo5beginEv>
	Servo4.begin();
    4098:	86 e9       	ldi	r24, 0x96	; 150
    409a:	97 e0       	ldi	r25, 0x07	; 7
    409c:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <_ZN13HardwareServo5beginEv>
	Servo5.begin();
    40a0:	83 e8       	ldi	r24, 0x83	; 131
    40a2:	97 e0       	ldi	r25, 0x07	; 7
    40a4:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <_ZN13HardwareServo5beginEv>
	
	if(!PcaServoController.begin()) return 0x10;
    40a8:	81 e2       	ldi	r24, 0x21	; 33
    40aa:	99 e0       	ldi	r25, 0x09	; 9
    40ac:	61 dd       	rcall	.-1342   	; 0x3b70 <_ZN18TwiServoController5beginEv>
    40ae:	c8 2f       	mov	r28, r24
    40b0:	88 23       	and	r24, r24
    40b2:	09 f4       	brne	.+2      	; 0x40b6 <_Z16initializeServosv+0x34>
    40b4:	4c c1       	rjmp	.+664    	; 0x434e <_Z16initializeServosv+0x2cc>
	Serial.println("Initialized Twi Servo Controller.");
    40b6:	65 ee       	ldi	r22, 0xE5	; 229
    40b8:	72 e0       	ldi	r23, 0x02	; 2
    40ba:	87 e7       	ldi	r24, 0x77	; 119
    40bc:	97 e0       	ldi	r25, 0x07	; 7
    40be:	ed d5       	rcall	.+3034   	; 0x4c9a <_ZN5Print7printlnEPKc>
	{
			
	}
	
	bool begin(){
		if(!rov.RegisterDevice(_id, this) || !rov.RegisterDevice(_enId, this)) return false;
    40c0:	68 e5       	ldi	r22, 0x58	; 88
    40c2:	7a e0       	ldi	r23, 0x0A	; 10
    40c4:	80 91 5a 0a 	lds	r24, 0x0A5A	; 0x800a5a <ServoA1+0x2>
    40c8:	8f df       	rcall	.-226    	; 0x3fe8 <_ZN5Robot14RegisterDeviceEhP9IRegister>
    40ca:	d8 2f       	mov	r29, r24
    40cc:	88 23       	and	r24, r24
    40ce:	09 f4       	brne	.+2      	; 0x40d2 <_Z16initializeServosv+0x50>
    40d0:	5f c1       	rjmp	.+702    	; 0x4390 <_Z16initializeServosv+0x30e>
    40d2:	68 e5       	ldi	r22, 0x58	; 88
    40d4:	7a e0       	ldi	r23, 0x0A	; 10
    40d6:	80 91 5b 0a 	lds	r24, 0x0A5B	; 0x800a5b <ServoA1+0x3>
    40da:	86 df       	rcall	.-244    	; 0x3fe8 <_ZN5Robot14RegisterDeviceEhP9IRegister>
    40dc:	c8 2f       	mov	r28, r24
    40de:	88 23       	and	r24, r24
    40e0:	09 f4       	brne	.+2      	; 0x40e4 <_Z16initializeServosv+0x62>
    40e2:	37 c1       	rjmp	.+622    	; 0x4352 <_Z16initializeServosv+0x2d0>
		
		_servo->setPulse(1500);
    40e4:	80 91 5c 0a 	lds	r24, 0x0A5C	; 0x800a5c <ServoA1+0x4>
    40e8:	90 91 5d 0a 	lds	r25, 0x0A5D	; 0x800a5d <ServoA1+0x5>
    40ec:	dc 01       	movw	r26, r24
    40ee:	ed 91       	ld	r30, X+
    40f0:	fc 91       	ld	r31, X
    40f2:	01 90       	ld	r0, Z+
    40f4:	f0 81       	ld	r31, Z
    40f6:	e0 2d       	mov	r30, r0
    40f8:	6c ed       	ldi	r22, 0xDC	; 220
    40fa:	75 e0       	ldi	r23, 0x05	; 5
    40fc:	19 95       	eicall
	{
			
	}
	
	bool begin(){
		if(!rov.RegisterDevice(_id, this) || !rov.RegisterDevice(_enId, this)) return false;
    40fe:	62 e5       	ldi	r22, 0x52	; 82
    4100:	7a e0       	ldi	r23, 0x0A	; 10
    4102:	80 91 54 0a 	lds	r24, 0x0A54	; 0x800a54 <ServoA2+0x2>
    4106:	70 df       	rcall	.-288    	; 0x3fe8 <_ZN5Robot14RegisterDeviceEhP9IRegister>
    4108:	d8 2f       	mov	r29, r24
    410a:	88 23       	and	r24, r24
    410c:	09 f4       	brne	.+2      	; 0x4110 <_Z16initializeServosv+0x8e>
    410e:	40 c1       	rjmp	.+640    	; 0x4390 <_Z16initializeServosv+0x30e>
    4110:	62 e5       	ldi	r22, 0x52	; 82
    4112:	7a e0       	ldi	r23, 0x0A	; 10
    4114:	80 91 55 0a 	lds	r24, 0x0A55	; 0x800a55 <ServoA2+0x3>
    4118:	67 df       	rcall	.-306    	; 0x3fe8 <_ZN5Robot14RegisterDeviceEhP9IRegister>
    411a:	c8 2f       	mov	r28, r24
    411c:	88 23       	and	r24, r24
    411e:	09 f4       	brne	.+2      	; 0x4122 <_Z16initializeServosv+0xa0>
    4120:	1a c1       	rjmp	.+564    	; 0x4356 <_Z16initializeServosv+0x2d4>
		
		_servo->setPulse(1500);
    4122:	80 91 56 0a 	lds	r24, 0x0A56	; 0x800a56 <ServoA2+0x4>
    4126:	90 91 57 0a 	lds	r25, 0x0A57	; 0x800a57 <ServoA2+0x5>
    412a:	dc 01       	movw	r26, r24
    412c:	ed 91       	ld	r30, X+
    412e:	fc 91       	ld	r31, X
    4130:	01 90       	ld	r0, Z+
    4132:	f0 81       	ld	r31, Z
    4134:	e0 2d       	mov	r30, r0
    4136:	6c ed       	ldi	r22, 0xDC	; 220
    4138:	75 e0       	ldi	r23, 0x05	; 5
	{
			
	}
	
	bool begin(){
		if(!rov.RegisterDevice(_id, this) || !rov.RegisterDevice(_enId, this)) return false;
    413a:	19 95       	eicall
    413c:	6c e4       	ldi	r22, 0x4C	; 76
    413e:	7a e0       	ldi	r23, 0x0A	; 10
    4140:	80 91 4e 0a 	lds	r24, 0x0A4E	; 0x800a4e <ServoA3+0x2>
    4144:	51 df       	rcall	.-350    	; 0x3fe8 <_ZN5Robot14RegisterDeviceEhP9IRegister>
    4146:	d8 2f       	mov	r29, r24
    4148:	88 23       	and	r24, r24
    414a:	09 f4       	brne	.+2      	; 0x414e <_Z16initializeServosv+0xcc>
    414c:	21 c1       	rjmp	.+578    	; 0x4390 <_Z16initializeServosv+0x30e>
    414e:	6c e4       	ldi	r22, 0x4C	; 76
    4150:	7a e0       	ldi	r23, 0x0A	; 10
    4152:	80 91 4f 0a 	lds	r24, 0x0A4F	; 0x800a4f <ServoA3+0x3>
    4156:	48 df       	rcall	.-368    	; 0x3fe8 <_ZN5Robot14RegisterDeviceEhP9IRegister>
    4158:	c8 2f       	mov	r28, r24
    415a:	88 23       	and	r24, r24
    415c:	09 f4       	brne	.+2      	; 0x4160 <_Z16initializeServosv+0xde>
    415e:	fd c0       	rjmp	.+506    	; 0x435a <_Z16initializeServosv+0x2d8>
		
		_servo->setPulse(1500);
    4160:	80 91 50 0a 	lds	r24, 0x0A50	; 0x800a50 <ServoA3+0x4>
    4164:	90 91 51 0a 	lds	r25, 0x0A51	; 0x800a51 <ServoA3+0x5>
    4168:	dc 01       	movw	r26, r24
    416a:	ed 91       	ld	r30, X+
    416c:	fc 91       	ld	r31, X
    416e:	01 90       	ld	r0, Z+
    4170:	f0 81       	ld	r31, Z
    4172:	e0 2d       	mov	r30, r0
    4174:	6c ed       	ldi	r22, 0xDC	; 220
    4176:	75 e0       	ldi	r23, 0x05	; 5
	{
			
	}
	
	bool begin(){
		if(!rov.RegisterDevice(_id, this) || !rov.RegisterDevice(_enId, this)) return false;
    4178:	19 95       	eicall
    417a:	66 e4       	ldi	r22, 0x46	; 70
    417c:	7a e0       	ldi	r23, 0x0A	; 10
    417e:	80 91 48 0a 	lds	r24, 0x0A48	; 0x800a48 <ServoA4+0x2>
    4182:	32 df       	rcall	.-412    	; 0x3fe8 <_ZN5Robot14RegisterDeviceEhP9IRegister>
    4184:	d8 2f       	mov	r29, r24
    4186:	88 23       	and	r24, r24
    4188:	09 f4       	brne	.+2      	; 0x418c <_Z16initializeServosv+0x10a>
    418a:	02 c1       	rjmp	.+516    	; 0x4390 <_Z16initializeServosv+0x30e>
    418c:	66 e4       	ldi	r22, 0x46	; 70
    418e:	7a e0       	ldi	r23, 0x0A	; 10
    4190:	80 91 49 0a 	lds	r24, 0x0A49	; 0x800a49 <ServoA4+0x3>
    4194:	29 df       	rcall	.-430    	; 0x3fe8 <_ZN5Robot14RegisterDeviceEhP9IRegister>
    4196:	c8 2f       	mov	r28, r24
    4198:	88 23       	and	r24, r24
    419a:	09 f4       	brne	.+2      	; 0x419e <_Z16initializeServosv+0x11c>
    419c:	e0 c0       	rjmp	.+448    	; 0x435e <_Z16initializeServosv+0x2dc>
		
		_servo->setPulse(1500);
    419e:	80 91 4a 0a 	lds	r24, 0x0A4A	; 0x800a4a <ServoA4+0x4>
    41a2:	90 91 4b 0a 	lds	r25, 0x0A4B	; 0x800a4b <ServoA4+0x5>
    41a6:	dc 01       	movw	r26, r24
    41a8:	ed 91       	ld	r30, X+
    41aa:	fc 91       	ld	r31, X
    41ac:	01 90       	ld	r0, Z+
    41ae:	f0 81       	ld	r31, Z
    41b0:	e0 2d       	mov	r30, r0
    41b2:	6c ed       	ldi	r22, 0xDC	; 220
    41b4:	75 e0       	ldi	r23, 0x05	; 5
	{
			
	}
	
	bool begin(){
		if(!rov.RegisterDevice(_id, this) || !rov.RegisterDevice(_enId, this)) return false;
    41b6:	19 95       	eicall
    41b8:	60 e4       	ldi	r22, 0x40	; 64
    41ba:	7a e0       	ldi	r23, 0x0A	; 10
    41bc:	80 91 42 0a 	lds	r24, 0x0A42	; 0x800a42 <ServoA5+0x2>
    41c0:	13 df       	rcall	.-474    	; 0x3fe8 <_ZN5Robot14RegisterDeviceEhP9IRegister>
    41c2:	d8 2f       	mov	r29, r24
    41c4:	88 23       	and	r24, r24
    41c6:	09 f4       	brne	.+2      	; 0x41ca <_Z16initializeServosv+0x148>
    41c8:	e3 c0       	rjmp	.+454    	; 0x4390 <_Z16initializeServosv+0x30e>
    41ca:	60 e4       	ldi	r22, 0x40	; 64
    41cc:	7a e0       	ldi	r23, 0x0A	; 10
    41ce:	80 91 43 0a 	lds	r24, 0x0A43	; 0x800a43 <ServoA5+0x3>
    41d2:	0a df       	rcall	.-492    	; 0x3fe8 <_ZN5Robot14RegisterDeviceEhP9IRegister>
    41d4:	c8 2f       	mov	r28, r24
    41d6:	88 23       	and	r24, r24
    41d8:	09 f4       	brne	.+2      	; 0x41dc <_Z16initializeServosv+0x15a>
    41da:	c3 c0       	rjmp	.+390    	; 0x4362 <_Z16initializeServosv+0x2e0>
		
		_servo->setPulse(1500);
    41dc:	80 91 44 0a 	lds	r24, 0x0A44	; 0x800a44 <ServoA5+0x4>
    41e0:	90 91 45 0a 	lds	r25, 0x0A45	; 0x800a45 <ServoA5+0x5>
    41e4:	dc 01       	movw	r26, r24
    41e6:	ed 91       	ld	r30, X+
    41e8:	fc 91       	ld	r31, X
    41ea:	01 90       	ld	r0, Z+
    41ec:	f0 81       	ld	r31, Z
    41ee:	e0 2d       	mov	r30, r0
    41f0:	6c ed       	ldi	r22, 0xDC	; 220
    41f2:	75 e0       	ldi	r23, 0x05	; 5
	{
			
	}
	
	bool begin(){
		if(!rov.RegisterDevice(_id, this) || !rov.RegisterDevice(_enId, this)) return false;
    41f4:	19 95       	eicall
    41f6:	6a e3       	ldi	r22, 0x3A	; 58
    41f8:	7a e0       	ldi	r23, 0x0A	; 10
    41fa:	80 91 3c 0a 	lds	r24, 0x0A3C	; 0x800a3c <ServoB1+0x2>
    41fe:	f4 de       	rcall	.-536    	; 0x3fe8 <_ZN5Robot14RegisterDeviceEhP9IRegister>
    4200:	d8 2f       	mov	r29, r24
    4202:	88 23       	and	r24, r24
    4204:	09 f4       	brne	.+2      	; 0x4208 <_Z16initializeServosv+0x186>
    4206:	c4 c0       	rjmp	.+392    	; 0x4390 <_Z16initializeServosv+0x30e>
    4208:	6a e3       	ldi	r22, 0x3A	; 58
    420a:	7a e0       	ldi	r23, 0x0A	; 10
    420c:	80 91 3d 0a 	lds	r24, 0x0A3D	; 0x800a3d <ServoB1+0x3>
    4210:	eb de       	rcall	.-554    	; 0x3fe8 <_ZN5Robot14RegisterDeviceEhP9IRegister>
    4212:	18 2f       	mov	r17, r24
    4214:	88 23       	and	r24, r24
    4216:	09 f4       	brne	.+2      	; 0x421a <_Z16initializeServosv+0x198>
    4218:	a6 c0       	rjmp	.+332    	; 0x4366 <_Z16initializeServosv+0x2e4>
		
		_servo->setPulse(1500);
    421a:	80 91 3e 0a 	lds	r24, 0x0A3E	; 0x800a3e <ServoB1+0x4>
    421e:	90 91 3f 0a 	lds	r25, 0x0A3F	; 0x800a3f <ServoB1+0x5>
    4222:	dc 01       	movw	r26, r24
    4224:	ed 91       	ld	r30, X+
    4226:	fc 91       	ld	r31, X
    4228:	01 90       	ld	r0, Z+
    422a:	f0 81       	ld	r31, Z
    422c:	e0 2d       	mov	r30, r0
    422e:	6c ed       	ldi	r22, 0xDC	; 220
	if(!ServoA3.begin()) return 0x13;
	if(!ServoA4.begin()) return 0x14;
	if(!ServoA5.begin()) return 0x15;
	
	if(!ServoB1.begin()) return 0x21;
	if(!ServoB2.begin()) return 0x22;
    4230:	75 e0       	ldi	r23, 0x05	; 5
    4232:	19 95       	eicall
    4234:	84 e3       	ldi	r24, 0x34	; 52
    4236:	9a e0       	ldi	r25, 0x0A	; 10
    4238:	f5 de       	rcall	.-534    	; 0x4024 <_ZN13ServoActuator5beginEv>
    423a:	c8 2f       	mov	r28, r24
    423c:	88 23       	and	r24, r24
	if(!ServoB3.begin()) return 0x23;
    423e:	09 f4       	brne	.+2      	; 0x4242 <_Z16initializeServosv+0x1c0>
    4240:	94 c0       	rjmp	.+296    	; 0x436a <_Z16initializeServosv+0x2e8>
    4242:	8e e2       	ldi	r24, 0x2E	; 46
    4244:	9a e0       	ldi	r25, 0x0A	; 10
    4246:	ee de       	rcall	.-548    	; 0x4024 <_ZN13ServoActuator5beginEv>
    4248:	d8 2f       	mov	r29, r24
    424a:	88 23       	and	r24, r24
	if(!ServoB4.begin()) return 0x24;
    424c:	09 f4       	brne	.+2      	; 0x4250 <_Z16initializeServosv+0x1ce>
    424e:	a0 c0       	rjmp	.+320    	; 0x4390 <_Z16initializeServosv+0x30e>
    4250:	88 e2       	ldi	r24, 0x28	; 40
    4252:	9a e0       	ldi	r25, 0x0A	; 10
    4254:	e7 de       	rcall	.-562    	; 0x4024 <_ZN13ServoActuator5beginEv>
    4256:	c8 2f       	mov	r28, r24
    4258:	88 23       	and	r24, r24
	if(!ServoB5.begin()) return 0x25;
    425a:	09 f4       	brne	.+2      	; 0x425e <_Z16initializeServosv+0x1dc>
    425c:	88 c0       	rjmp	.+272    	; 0x436e <_Z16initializeServosv+0x2ec>
    425e:	82 e2       	ldi	r24, 0x22	; 34
    4260:	9a e0       	ldi	r25, 0x0A	; 10
    4262:	e0 de       	rcall	.-576    	; 0x4024 <_ZN13ServoActuator5beginEv>
    4264:	d8 2f       	mov	r29, r24
    4266:	88 23       	and	r24, r24
	if(!ServoB6.begin()) return 0x26;
    4268:	09 f4       	brne	.+2      	; 0x426c <_Z16initializeServosv+0x1ea>
    426a:	92 c0       	rjmp	.+292    	; 0x4390 <_Z16initializeServosv+0x30e>
    426c:	8c e1       	ldi	r24, 0x1C	; 28
    426e:	9a e0       	ldi	r25, 0x0A	; 10
    4270:	d9 de       	rcall	.-590    	; 0x4024 <_ZN13ServoActuator5beginEv>
    4272:	c8 2f       	mov	r28, r24
    4274:	88 23       	and	r24, r24
	
	if(!ServoC1.begin()) return 0x31;
    4276:	09 f4       	brne	.+2      	; 0x427a <_Z16initializeServosv+0x1f8>
    4278:	7c c0       	rjmp	.+248    	; 0x4372 <_Z16initializeServosv+0x2f0>
    427a:	86 e1       	ldi	r24, 0x16	; 22
    427c:	9a e0       	ldi	r25, 0x0A	; 10
    427e:	d2 de       	rcall	.-604    	; 0x4024 <_ZN13ServoActuator5beginEv>
    4280:	d8 2f       	mov	r29, r24
    4282:	88 23       	and	r24, r24
	if(!ServoC2.begin()) return 0x32;
    4284:	09 f4       	brne	.+2      	; 0x4288 <_Z16initializeServosv+0x206>
    4286:	84 c0       	rjmp	.+264    	; 0x4390 <_Z16initializeServosv+0x30e>
    4288:	80 e1       	ldi	r24, 0x10	; 16
    428a:	9a e0       	ldi	r25, 0x0A	; 10
    428c:	cb de       	rcall	.-618    	; 0x4024 <_ZN13ServoActuator5beginEv>
    428e:	c8 2f       	mov	r28, r24
    4290:	88 23       	and	r24, r24
	if(!ServoC3.begin()) return 0x33;
    4292:	09 f4       	brne	.+2      	; 0x4296 <_Z16initializeServosv+0x214>
    4294:	70 c0       	rjmp	.+224    	; 0x4376 <_Z16initializeServosv+0x2f4>
    4296:	8a e0       	ldi	r24, 0x0A	; 10
    4298:	9a e0       	ldi	r25, 0x0A	; 10
    429a:	c4 de       	rcall	.-632    	; 0x4024 <_ZN13ServoActuator5beginEv>
    429c:	d8 2f       	mov	r29, r24
    429e:	88 23       	and	r24, r24
	if(!ServoC4.begin()) return 0x34;
    42a0:	09 f4       	brne	.+2      	; 0x42a4 <_Z16initializeServosv+0x222>
    42a2:	76 c0       	rjmp	.+236    	; 0x4390 <_Z16initializeServosv+0x30e>
    42a4:	84 e0       	ldi	r24, 0x04	; 4
    42a6:	9a e0       	ldi	r25, 0x0A	; 10
    42a8:	bd de       	rcall	.-646    	; 0x4024 <_ZN13ServoActuator5beginEv>
    42aa:	c8 2f       	mov	r28, r24
    42ac:	88 23       	and	r24, r24
	if(!ServoC5.begin()) return 0x35;
    42ae:	09 f4       	brne	.+2      	; 0x42b2 <_Z16initializeServosv+0x230>
    42b0:	64 c0       	rjmp	.+200    	; 0x437a <_Z16initializeServosv+0x2f8>
    42b2:	8e ef       	ldi	r24, 0xFE	; 254
    42b4:	99 e0       	ldi	r25, 0x09	; 9
    42b6:	b6 de       	rcall	.-660    	; 0x4024 <_ZN13ServoActuator5beginEv>
    42b8:	d8 2f       	mov	r29, r24
    42ba:	88 23       	and	r24, r24
	if(!ServoC6.begin()) return 0x36;
    42bc:	09 f4       	brne	.+2      	; 0x42c0 <_Z16initializeServosv+0x23e>
    42be:	68 c0       	rjmp	.+208    	; 0x4390 <_Z16initializeServosv+0x30e>
    42c0:	88 ef       	ldi	r24, 0xF8	; 248
    42c2:	99 e0       	ldi	r25, 0x09	; 9
    42c4:	af de       	rcall	.-674    	; 0x4024 <_ZN13ServoActuator5beginEv>
    42c6:	c8 2f       	mov	r28, r24
    42c8:	88 23       	and	r24, r24
	if(!ServoC7.begin()) return 0x37;
    42ca:	09 f4       	brne	.+2      	; 0x42ce <_Z16initializeServosv+0x24c>
    42cc:	58 c0       	rjmp	.+176    	; 0x437e <_Z16initializeServosv+0x2fc>
    42ce:	82 ef       	ldi	r24, 0xF2	; 242
    42d0:	99 e0       	ldi	r25, 0x09	; 9
    42d2:	a8 de       	rcall	.-688    	; 0x4024 <_ZN13ServoActuator5beginEv>
    42d4:	d8 2f       	mov	r29, r24
    42d6:	88 23       	and	r24, r24
	if(!ServoC8.begin()) return 0x38;
    42d8:	09 f4       	brne	.+2      	; 0x42dc <_Z16initializeServosv+0x25a>
    42da:	5a c0       	rjmp	.+180    	; 0x4390 <_Z16initializeServosv+0x30e>
    42dc:	8c ee       	ldi	r24, 0xEC	; 236
    42de:	99 e0       	ldi	r25, 0x09	; 9
    42e0:	a1 de       	rcall	.-702    	; 0x4024 <_ZN13ServoActuator5beginEv>
    42e2:	c8 2f       	mov	r28, r24
    42e4:	88 23       	and	r24, r24
	
	if(!ServoD1.begin()) return 0x41;
    42e6:	09 f4       	brne	.+2      	; 0x42ea <_Z16initializeServosv+0x268>
    42e8:	4c c0       	rjmp	.+152    	; 0x4382 <_Z16initializeServosv+0x300>
    42ea:	86 ee       	ldi	r24, 0xE6	; 230
    42ec:	99 e0       	ldi	r25, 0x09	; 9
    42ee:	9a de       	rcall	.-716    	; 0x4024 <_ZN13ServoActuator5beginEv>
    42f0:	d8 2f       	mov	r29, r24
    42f2:	88 23       	and	r24, r24
	if(!ServoD2.begin()) return 0x42;
    42f4:	09 f4       	brne	.+2      	; 0x42f8 <_Z16initializeServosv+0x276>
    42f6:	4c c0       	rjmp	.+152    	; 0x4390 <_Z16initializeServosv+0x30e>
    42f8:	80 ee       	ldi	r24, 0xE0	; 224
    42fa:	99 e0       	ldi	r25, 0x09	; 9
    42fc:	93 de       	rcall	.-730    	; 0x4024 <_ZN13ServoActuator5beginEv>
    42fe:	c8 2f       	mov	r28, r24
	if(!ServoD3.begin()) return 0x43;
    4300:	88 23       	and	r24, r24
    4302:	09 f4       	brne	.+2      	; 0x4306 <_Z16initializeServosv+0x284>
    4304:	40 c0       	rjmp	.+128    	; 0x4386 <_Z16initializeServosv+0x304>
    4306:	8a ed       	ldi	r24, 0xDA	; 218
    4308:	99 e0       	ldi	r25, 0x09	; 9
    430a:	8c de       	rcall	.-744    	; 0x4024 <_ZN13ServoActuator5beginEv>
    430c:	d8 2f       	mov	r29, r24
	if(!ServoD4.begin()) return 0x44;
    430e:	88 23       	and	r24, r24
    4310:	09 f4       	brne	.+2      	; 0x4314 <_Z16initializeServosv+0x292>
    4312:	3e c0       	rjmp	.+124    	; 0x4390 <_Z16initializeServosv+0x30e>
    4314:	84 ed       	ldi	r24, 0xD4	; 212
    4316:	99 e0       	ldi	r25, 0x09	; 9
    4318:	85 de       	rcall	.-758    	; 0x4024 <_ZN13ServoActuator5beginEv>
    431a:	c8 2f       	mov	r28, r24
	if(!ServoD5.begin()) return 0x45;
    431c:	88 23       	and	r24, r24
    431e:	a9 f1       	breq	.+106    	; 0x438a <_Z16initializeServosv+0x308>
    4320:	8e ec       	ldi	r24, 0xCE	; 206
    4322:	99 e0       	ldi	r25, 0x09	; 9
    4324:	7f de       	rcall	.-770    	; 0x4024 <_ZN13ServoActuator5beginEv>
    4326:	d8 2f       	mov	r29, r24
    4328:	88 23       	and	r24, r24
	if(!ServoD6.begin()) return 0x46;
    432a:	91 f1       	breq	.+100    	; 0x4390 <_Z16initializeServosv+0x30e>
    432c:	88 ec       	ldi	r24, 0xC8	; 200
    432e:	99 e0       	ldi	r25, 0x09	; 9
    4330:	79 de       	rcall	.-782    	; 0x4024 <_ZN13ServoActuator5beginEv>
    4332:	c8 2f       	mov	r28, r24
    4334:	88 23       	and	r24, r24
    4336:	59 f1       	breq	.+86     	; 0x438e <_Z16initializeServosv+0x30c>
	if(!ServoD7.begin()) return 0x47;
    4338:	82 ec       	ldi	r24, 0xC2	; 194
    433a:	99 e0       	ldi	r25, 0x09	; 9
    433c:	73 de       	rcall	.-794    	; 0x4024 <_ZN13ServoActuator5beginEv>
    433e:	88 23       	and	r24, r24
    4340:	39 f1       	breq	.+78     	; 0x4390 <_Z16initializeServosv+0x30e>
    4342:	8c eb       	ldi	r24, 0xBC	; 188
	if(!ServoD8.begin()) return 0x48;
    4344:	99 e0       	ldi	r25, 0x09	; 9
    4346:	6e de       	rcall	.-804    	; 0x4024 <_ZN13ServoActuator5beginEv>
    4348:	c1 e0       	ldi	r28, 0x01	; 1
    434a:	c8 27       	eor	r28, r24
    434c:	21 c0       	rjmp	.+66     	; 0x4390 <_Z16initializeServosv+0x30e>
    434e:	c1 e0       	ldi	r28, 0x01	; 1
    4350:	1f c0       	rjmp	.+62     	; 0x4390 <_Z16initializeServosv+0x30e>
	Servo1.begin();
	Servo3.begin();
	Servo4.begin();
	Servo5.begin();
	
	if(!PcaServoController.begin()) return 0x10;
    4352:	cd 2f       	mov	r28, r29
    4354:	1d c0       	rjmp	.+58     	; 0x4390 <_Z16initializeServosv+0x30e>
	Serial.println("Initialized Twi Servo Controller.");
	
	if(!ServoA1.begin()) return 0x11;
    4356:	cd 2f       	mov	r28, r29
    4358:	1b c0       	rjmp	.+54     	; 0x4390 <_Z16initializeServosv+0x30e>
	if(!ServoA2.begin()) return 0x12;
    435a:	cd 2f       	mov	r28, r29
    435c:	19 c0       	rjmp	.+50     	; 0x4390 <_Z16initializeServosv+0x30e>
	if(!ServoA3.begin()) return 0x13;
    435e:	cd 2f       	mov	r28, r29
    4360:	17 c0       	rjmp	.+46     	; 0x4390 <_Z16initializeServosv+0x30e>
	if(!ServoA4.begin()) return 0x14;
    4362:	cd 2f       	mov	r28, r29
    4364:	15 c0       	rjmp	.+42     	; 0x4390 <_Z16initializeServosv+0x30e>
	if(!ServoA5.begin()) return 0x15;
    4366:	cd 2f       	mov	r28, r29
    4368:	13 c0       	rjmp	.+38     	; 0x4390 <_Z16initializeServosv+0x30e>
	
	if(!ServoB1.begin()) return 0x21;
    436a:	c1 2f       	mov	r28, r17
    436c:	11 c0       	rjmp	.+34     	; 0x4390 <_Z16initializeServosv+0x30e>
	if(!ServoB2.begin()) return 0x22;
    436e:	cd 2f       	mov	r28, r29
    4370:	0f c0       	rjmp	.+30     	; 0x4390 <_Z16initializeServosv+0x30e>
	if(!ServoB3.begin()) return 0x23;
	if(!ServoB4.begin()) return 0x24;
    4372:	cd 2f       	mov	r28, r29
    4374:	0d c0       	rjmp	.+26     	; 0x4390 <_Z16initializeServosv+0x30e>
	if(!ServoB5.begin()) return 0x25;
	if(!ServoB6.begin()) return 0x26;
    4376:	cd 2f       	mov	r28, r29
    4378:	0b c0       	rjmp	.+22     	; 0x4390 <_Z16initializeServosv+0x30e>
	
	if(!ServoC1.begin()) return 0x31;
	if(!ServoC2.begin()) return 0x32;
    437a:	cd 2f       	mov	r28, r29
    437c:	09 c0       	rjmp	.+18     	; 0x4390 <_Z16initializeServosv+0x30e>
	if(!ServoC3.begin()) return 0x33;
	if(!ServoC4.begin()) return 0x34;
    437e:	cd 2f       	mov	r28, r29
    4380:	07 c0       	rjmp	.+14     	; 0x4390 <_Z16initializeServosv+0x30e>
	if(!ServoC5.begin()) return 0x35;
	if(!ServoC6.begin()) return 0x36;
    4382:	cd 2f       	mov	r28, r29
    4384:	05 c0       	rjmp	.+10     	; 0x4390 <_Z16initializeServosv+0x30e>
	if(!ServoC7.begin()) return 0x37;
	if(!ServoC8.begin()) return 0x38;
    4386:	cd 2f       	mov	r28, r29
    4388:	03 c0       	rjmp	.+6      	; 0x4390 <_Z16initializeServosv+0x30e>
	
	if(!ServoD1.begin()) return 0x41;
	if(!ServoD2.begin()) return 0x42;
    438a:	cd 2f       	mov	r28, r29
    438c:	01 c0       	rjmp	.+2      	; 0x4390 <_Z16initializeServosv+0x30e>
	if(!ServoD3.begin()) return 0x43;
	if(!ServoD4.begin()) return 0x44;
    438e:	cd 2f       	mov	r28, r29
    4390:	8c 2f       	mov	r24, r28
	if(!ServoD5.begin()) return 0x45;
	if(!ServoD6.begin()) return 0x46;
    4392:	df 91       	pop	r29
	if(!ServoD7.begin()) return 0x47;
	if(!ServoD8.begin()) return 0x48;
	
	return 0;
}
    4394:	cf 91       	pop	r28
    4396:	1f 91       	pop	r17
    4398:	08 95       	ret

0000439a <_ZN5Robot15CheckErrorsOnlyEv>:
    439a:	0e 94 d1 06 	call	0xda2	; 0xda2 <_ZN8ENC28J6013packetReceiveEv>
	static bool begin(uint16_t recvPort, uint16_t destPort, Register& csDDR, Register& csPort, uint8_t csPin);
	
	friend void udpReceive(uint16_t dest_port, uint8_t src_ip[IP_LEN], uint16_t src_port, const char *data, uint16_t len);

	static void Loop(){
		ether.packetLoop(ether.packetReceive());
    439e:	0c 94 41 09 	jmp	0x1282	; 0x1282 <_ZN9EtherCard10packetLoopEj>
    43a2:	08 95       	ret

000043a4 <_Z15PrintErrorCodesv>:
void Robot::CheckErrorsOnly(){
	EtherComm::Loop();
}

void PrintErrorCodes(){
	EtherComm::buffer[1] = ErrorCodes.errors;
    43a4:	a0 91 00 02 	lds	r26, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    43a8:	b0 91 01 02 	lds	r27, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    43ac:	ee e5       	ldi	r30, 0x5E	; 94
    43ae:	f9 e0       	ldi	r31, 0x09	; 9
    43b0:	80 81       	ld	r24, Z
    43b2:	11 96       	adiw	r26, 0x01	; 1
    43b4:	8c 93       	st	X, r24
	EtherComm::buffer[2] = ErrorCodes.id_collision;
    43b6:	a0 91 00 02 	lds	r26, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    43ba:	b0 91 01 02 	lds	r27, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    43be:	81 81       	ldd	r24, Z+1	; 0x01
    43c0:	12 96       	adiw	r26, 0x02	; 2
    43c2:	8c 93       	st	X, r24
    43c4:	12 97       	sbiw	r26, 0x02	; 2
	EtherComm::buffer[3] = ErrorCodes.init_error;
    43c6:	82 81       	ldd	r24, Z+2	; 0x02
    43c8:	13 96       	adiw	r26, 0x03	; 3
    43ca:	8c 93       	st	X, r24
    43cc:	13 97       	sbiw	r26, 0x03	; 3
	EtherComm::buffer[4] = ErrorCodes.reg_not_found;
    43ce:	83 81       	ldd	r24, Z+3	; 0x03
    43d0:	14 96       	adiw	r26, 0x04	; 4
    43d2:	8c 93       	st	X, r24
	EtherComm::SendCommand(0xFF, 4);
    43d4:	64 e0       	ldi	r22, 0x04	; 4
    43d6:	8f ef       	ldi	r24, 0xFF	; 255
    43d8:	0c 94 7b 0b 	jmp	0x16f6	; 0x16f6 <_ZN9EtherComm11SendCommandEhh>
    43dc:	08 95       	ret

000043de <_ZN5Robot15CommandReceivedEhPKhh>:
}

void Robot::CommandReceived(const uint8_t id, const uint8_t* data, uint8_t len) {
	if(id == 0xFF){
    43de:	8f 3f       	cpi	r24, 0xFF	; 255
    43e0:	11 f4       	brne	.+4      	; 0x43e6 <_ZN5Robot15CommandReceivedEhPKhh+0x8>
		PrintErrorCodes();
    43e2:	e0 cf       	rjmp	.-64     	; 0x43a4 <_Z15PrintErrorCodesv>
    43e4:	08 95       	ret
	}else if(initialized) { 
    43e6:	90 91 62 09 	lds	r25, 0x0962	; 0x800962 <initialized>
    43ea:	99 23       	and	r25, r25
    43ec:	e1 f0       	breq	.+56     	; 0x4426 <_ZN5Robot15CommandReceivedEhPKhh+0x48>
		if(registers[id] != NULL){
    43ee:	e8 2f       	mov	r30, r24
    43f0:	f0 e0       	ldi	r31, 0x00	; 0
    43f2:	ee 0f       	add	r30, r30
    43f4:	ff 1f       	adc	r31, r31
    43f6:	e2 5a       	subi	r30, 0xA2	; 162
    43f8:	f5 4f       	sbci	r31, 0xF5	; 245
    43fa:	a0 81       	ld	r26, Z
    43fc:	b1 81       	ldd	r27, Z+1	; 0x01
    43fe:	10 97       	sbiw	r26, 0x00	; 0
    4400:	61 f0       	breq	.+24     	; 0x441a <_ZN5Robot15CommandReceivedEhPKhh+0x3c>
			registers[id]->CommandReceived(id, data, len);
    4402:	ed 91       	ld	r30, X+
    4404:	fc 91       	ld	r31, X
    4406:	11 97       	sbiw	r26, 0x01	; 1
    4408:	02 80       	ldd	r0, Z+2	; 0x02
    440a:	f3 81       	ldd	r31, Z+3	; 0x03
    440c:	e0 2d       	mov	r30, r0
    440e:	24 2f       	mov	r18, r20
    4410:	ab 01       	movw	r20, r22
    4412:	68 2f       	mov	r22, r24
    4414:	cd 01       	movw	r24, r26
    4416:	19 95       	eicall
    4418:	08 95       	ret
inline ErrorFlag operator | (ErrorFlag lhs, ErrorFlag rhs) {
	return static_cast<ErrorFlag>(static_cast<int>(lhs) | static_cast<int>(rhs));
}

inline ErrorFlag& operator |= (ErrorFlag& lhs, ErrorFlag rhs) {
	lhs = lhs | rhs;
    441a:	ee e5       	ldi	r30, 0x5E	; 94
    441c:	f9 e0       	ldi	r31, 0x09	; 9
    441e:	90 81       	ld	r25, Z
    4420:	94 60       	ori	r25, 0x04	; 4
    4422:	90 83       	st	Z, r25
	}else if(initialized) { 
		if(registers[id] != NULL){
			registers[id]->CommandReceived(id, data, len);
		}else{
			ErrorCodes.errors |= RegisterNotFound;
			ErrorCodes.reg_not_found = id;
    4424:	83 83       	std	Z+3, r24	; 0x03
    4426:	08 95       	ret

00004428 <_GLOBAL__sub_I__ZN5Robot9registersE>:
		}
	}
}
    4428:	8f 92       	push	r8
    442a:	af 92       	push	r10
    442c:	cf 92       	push	r12
    442e:	ef 92       	push	r14
    4430:	0f 93       	push	r16
#include "../Micro/CpuFreq.h"

class ServoActuator : public IWritable{
public:
	ServoActuator(const uint8_t id, const uint8_t enId, PcbServo &servo)
		: _id(id), _enId(enId), _servo(&servo)
    4432:	e8 e5       	ldi	r30, 0x58	; 88
    4434:	fa e0       	ldi	r31, 0x0A	; 10
    4436:	8d ea       	ldi	r24, 0xAD	; 173
    4438:	94 e0       	ldi	r25, 0x04	; 4
    443a:	91 83       	std	Z+1, r25	; 0x01
    443c:	80 83       	st	Z, r24
    443e:	12 82       	std	Z+2, r1	; 0x02
    4440:	21 e0       	ldi	r18, 0x01	; 1
    4442:	23 83       	std	Z+3, r18	; 0x03
    4444:	49 e5       	ldi	r20, 0x59	; 89
    4446:	59 e0       	ldi	r21, 0x09	; 9
    4448:	55 83       	std	Z+5, r21	; 0x05
    444a:	44 83       	std	Z+4, r20	; 0x04
    444c:	e2 e5       	ldi	r30, 0x52	; 82
    444e:	fa e0       	ldi	r31, 0x0A	; 10
    4450:	91 83       	std	Z+1, r25	; 0x01
    4452:	80 83       	st	Z, r24
    4454:	32 e0       	ldi	r19, 0x02	; 2
    4456:	32 83       	std	Z+2, r19	; 0x02
    4458:	43 e0       	ldi	r20, 0x03	; 3
    445a:	43 83       	std	Z+3, r20	; 0x03
    445c:	44 e5       	ldi	r20, 0x54	; 84
    445e:	59 e0       	ldi	r21, 0x09	; 9
    4460:	55 83       	std	Z+5, r21	; 0x05
    4462:	44 83       	std	Z+4, r20	; 0x04
    4464:	ec e4       	ldi	r30, 0x4C	; 76
    4466:	fa e0       	ldi	r31, 0x0A	; 10
    4468:	91 83       	std	Z+1, r25	; 0x01
    446a:	80 83       	st	Z, r24
    446c:	44 e0       	ldi	r20, 0x04	; 4
    446e:	42 83       	std	Z+2, r20	; 0x02
    4470:	45 e0       	ldi	r20, 0x05	; 5
    4472:	43 83       	std	Z+3, r20	; 0x03
    4474:	4f e4       	ldi	r20, 0x4F	; 79
    4476:	59 e0       	ldi	r21, 0x09	; 9
    4478:	55 83       	std	Z+5, r21	; 0x05
    447a:	44 83       	std	Z+4, r20	; 0x04
    447c:	e6 e4       	ldi	r30, 0x46	; 70
    447e:	fa e0       	ldi	r31, 0x0A	; 10
    4480:	91 83       	std	Z+1, r25	; 0x01
    4482:	80 83       	st	Z, r24
    4484:	46 e0       	ldi	r20, 0x06	; 6
    4486:	42 83       	std	Z+2, r20	; 0x02
    4488:	47 e0       	ldi	r20, 0x07	; 7
    448a:	43 83       	std	Z+3, r20	; 0x03
    448c:	4a e4       	ldi	r20, 0x4A	; 74
    448e:	59 e0       	ldi	r21, 0x09	; 9
    4490:	55 83       	std	Z+5, r21	; 0x05
    4492:	44 83       	std	Z+4, r20	; 0x04
    4494:	e0 e4       	ldi	r30, 0x40	; 64
    4496:	fa e0       	ldi	r31, 0x0A	; 10
    4498:	91 83       	std	Z+1, r25	; 0x01
    449a:	80 83       	st	Z, r24
    449c:	48 e0       	ldi	r20, 0x08	; 8
    449e:	42 83       	std	Z+2, r20	; 0x02
    44a0:	49 e0       	ldi	r20, 0x09	; 9
    44a2:	43 83       	std	Z+3, r20	; 0x03
    44a4:	45 e4       	ldi	r20, 0x45	; 69
    44a6:	59 e0       	ldi	r21, 0x09	; 9
    44a8:	55 83       	std	Z+5, r21	; 0x05
    44aa:	44 83       	std	Z+4, r20	; 0x04
    44ac:	ea e3       	ldi	r30, 0x3A	; 58
    44ae:	fa e0       	ldi	r31, 0x0A	; 10
    44b0:	91 83       	std	Z+1, r25	; 0x01
    44b2:	80 83       	st	Z, r24
    44b4:	4a e0       	ldi	r20, 0x0A	; 10
    44b6:	42 83       	std	Z+2, r20	; 0x02
    44b8:	4b e0       	ldi	r20, 0x0B	; 11
    44ba:	43 83       	std	Z+3, r20	; 0x03
    44bc:	40 e4       	ldi	r20, 0x40	; 64
    44be:	59 e0       	ldi	r21, 0x09	; 9
    44c0:	55 83       	std	Z+5, r21	; 0x05
    44c2:	44 83       	std	Z+4, r20	; 0x04
    44c4:	e4 e3       	ldi	r30, 0x34	; 52
    44c6:	fa e0       	ldi	r31, 0x0A	; 10
    44c8:	91 83       	std	Z+1, r25	; 0x01
    44ca:	80 83       	st	Z, r24
    44cc:	4c e0       	ldi	r20, 0x0C	; 12
    44ce:	42 83       	std	Z+2, r20	; 0x02
    44d0:	4d e0       	ldi	r20, 0x0D	; 13
    44d2:	43 83       	std	Z+3, r20	; 0x03
    44d4:	4b e3       	ldi	r20, 0x3B	; 59
    44d6:	59 e0       	ldi	r21, 0x09	; 9
    44d8:	55 83       	std	Z+5, r21	; 0x05
    44da:	44 83       	std	Z+4, r20	; 0x04
    44dc:	ee e2       	ldi	r30, 0x2E	; 46
    44de:	fa e0       	ldi	r31, 0x0A	; 10
    44e0:	91 83       	std	Z+1, r25	; 0x01
    44e2:	80 83       	st	Z, r24
    44e4:	4e e0       	ldi	r20, 0x0E	; 14
    44e6:	42 83       	std	Z+2, r20	; 0x02
    44e8:	4f e0       	ldi	r20, 0x0F	; 15
    44ea:	43 83       	std	Z+3, r20	; 0x03
    44ec:	46 e3       	ldi	r20, 0x36	; 54
    44ee:	59 e0       	ldi	r21, 0x09	; 9
    44f0:	55 83       	std	Z+5, r21	; 0x05
    44f2:	44 83       	std	Z+4, r20	; 0x04
    44f4:	e8 e2       	ldi	r30, 0x28	; 40
    44f6:	fa e0       	ldi	r31, 0x0A	; 10
    44f8:	91 83       	std	Z+1, r25	; 0x01
    44fa:	80 83       	st	Z, r24
    44fc:	40 e1       	ldi	r20, 0x10	; 16
    44fe:	42 83       	std	Z+2, r20	; 0x02
    4500:	41 e1       	ldi	r20, 0x11	; 17
    4502:	43 83       	std	Z+3, r20	; 0x03
    4504:	41 e3       	ldi	r20, 0x31	; 49
    4506:	59 e0       	ldi	r21, 0x09	; 9
    4508:	55 83       	std	Z+5, r21	; 0x05
    450a:	44 83       	std	Z+4, r20	; 0x04
    450c:	e2 e2       	ldi	r30, 0x22	; 34
    450e:	fa e0       	ldi	r31, 0x0A	; 10
    4510:	91 83       	std	Z+1, r25	; 0x01
    4512:	80 83       	st	Z, r24
    4514:	42 e1       	ldi	r20, 0x12	; 18
    4516:	42 83       	std	Z+2, r20	; 0x02
    4518:	43 e1       	ldi	r20, 0x13	; 19
    451a:	43 83       	std	Z+3, r20	; 0x03
    451c:	4c e2       	ldi	r20, 0x2C	; 44
    451e:	59 e0       	ldi	r21, 0x09	; 9
    4520:	55 83       	std	Z+5, r21	; 0x05
    4522:	44 83       	std	Z+4, r20	; 0x04
    4524:	ec e1       	ldi	r30, 0x1C	; 28
    4526:	fa e0       	ldi	r31, 0x0A	; 10
    4528:	91 83       	std	Z+1, r25	; 0x01
    452a:	80 83       	st	Z, r24
    452c:	44 e1       	ldi	r20, 0x14	; 20
    452e:	42 83       	std	Z+2, r20	; 0x02
    4530:	45 e1       	ldi	r20, 0x15	; 21
    4532:	43 83       	std	Z+3, r20	; 0x03
    4534:	47 e2       	ldi	r20, 0x27	; 39
    4536:	59 e0       	ldi	r21, 0x09	; 9
    4538:	55 83       	std	Z+5, r21	; 0x05
    453a:	44 83       	std	Z+4, r20	; 0x04
    453c:	e6 e1       	ldi	r30, 0x16	; 22
    453e:	fa e0       	ldi	r31, 0x0A	; 10
    4540:	91 83       	std	Z+1, r25	; 0x01
    4542:	80 83       	st	Z, r24
    4544:	46 e1       	ldi	r20, 0x16	; 22
    4546:	42 83       	std	Z+2, r20	; 0x02
    4548:	47 e1       	ldi	r20, 0x17	; 23
    454a:	43 83       	std	Z+3, r20	; 0x03
    454c:	49 e1       	ldi	r20, 0x19	; 25
    454e:	59 e0       	ldi	r21, 0x09	; 9
    4550:	55 83       	std	Z+5, r21	; 0x05
    4552:	44 83       	std	Z+4, r20	; 0x04
    4554:	e0 e1       	ldi	r30, 0x10	; 16
    4556:	fa e0       	ldi	r31, 0x0A	; 10
    4558:	91 83       	std	Z+1, r25	; 0x01
    455a:	80 83       	st	Z, r24
    455c:	48 e1       	ldi	r20, 0x18	; 24
    455e:	42 83       	std	Z+2, r20	; 0x02
    4560:	49 e1       	ldi	r20, 0x19	; 25
    4562:	43 83       	std	Z+3, r20	; 0x03
    4564:	41 e1       	ldi	r20, 0x11	; 17
    4566:	59 e0       	ldi	r21, 0x09	; 9
    4568:	55 83       	std	Z+5, r21	; 0x05
    456a:	44 83       	std	Z+4, r20	; 0x04
    456c:	ea e0       	ldi	r30, 0x0A	; 10
    456e:	fa e0       	ldi	r31, 0x0A	; 10
    4570:	91 83       	std	Z+1, r25	; 0x01
    4572:	80 83       	st	Z, r24
    4574:	4a e1       	ldi	r20, 0x1A	; 26
    4576:	42 83       	std	Z+2, r20	; 0x02
    4578:	4b e1       	ldi	r20, 0x1B	; 27
    457a:	43 83       	std	Z+3, r20	; 0x03
    457c:	49 e0       	ldi	r20, 0x09	; 9
    457e:	59 e0       	ldi	r21, 0x09	; 9
    4580:	55 83       	std	Z+5, r21	; 0x05
    4582:	44 83       	std	Z+4, r20	; 0x04
    4584:	e4 e0       	ldi	r30, 0x04	; 4
    4586:	fa e0       	ldi	r31, 0x0A	; 10
    4588:	91 83       	std	Z+1, r25	; 0x01
    458a:	80 83       	st	Z, r24
    458c:	4c e1       	ldi	r20, 0x1C	; 28
    458e:	42 83       	std	Z+2, r20	; 0x02
    4590:	4d e1       	ldi	r20, 0x1D	; 29
    4592:	43 83       	std	Z+3, r20	; 0x03
    4594:	41 e0       	ldi	r20, 0x01	; 1
    4596:	59 e0       	ldi	r21, 0x09	; 9
    4598:	55 83       	std	Z+5, r21	; 0x05
    459a:	44 83       	std	Z+4, r20	; 0x04
    459c:	ee ef       	ldi	r30, 0xFE	; 254
    459e:	f9 e0       	ldi	r31, 0x09	; 9
    45a0:	91 83       	std	Z+1, r25	; 0x01
    45a2:	80 83       	st	Z, r24
    45a4:	4e e1       	ldi	r20, 0x1E	; 30
    45a6:	42 83       	std	Z+2, r20	; 0x02
    45a8:	4f e1       	ldi	r20, 0x1F	; 31
    45aa:	43 83       	std	Z+3, r20	; 0x03
    45ac:	49 ef       	ldi	r20, 0xF9	; 249
    45ae:	58 e0       	ldi	r21, 0x08	; 8
    45b0:	55 83       	std	Z+5, r21	; 0x05
    45b2:	44 83       	std	Z+4, r20	; 0x04
    45b4:	e8 ef       	ldi	r30, 0xF8	; 248
    45b6:	f9 e0       	ldi	r31, 0x09	; 9
    45b8:	91 83       	std	Z+1, r25	; 0x01
    45ba:	80 83       	st	Z, r24
    45bc:	40 e2       	ldi	r20, 0x20	; 32
    45be:	42 83       	std	Z+2, r20	; 0x02
    45c0:	41 e2       	ldi	r20, 0x21	; 33
    45c2:	43 83       	std	Z+3, r20	; 0x03
    45c4:	41 ef       	ldi	r20, 0xF1	; 241
    45c6:	58 e0       	ldi	r21, 0x08	; 8
    45c8:	55 83       	std	Z+5, r21	; 0x05
    45ca:	44 83       	std	Z+4, r20	; 0x04
    45cc:	e2 ef       	ldi	r30, 0xF2	; 242
    45ce:	f9 e0       	ldi	r31, 0x09	; 9
    45d0:	91 83       	std	Z+1, r25	; 0x01
    45d2:	80 83       	st	Z, r24
    45d4:	42 e2       	ldi	r20, 0x22	; 34
    45d6:	42 83       	std	Z+2, r20	; 0x02
    45d8:	43 e2       	ldi	r20, 0x23	; 35
    45da:	43 83       	std	Z+3, r20	; 0x03
    45dc:	49 ee       	ldi	r20, 0xE9	; 233
    45de:	58 e0       	ldi	r21, 0x08	; 8
    45e0:	55 83       	std	Z+5, r21	; 0x05
    45e2:	44 83       	std	Z+4, r20	; 0x04
    45e4:	ec ee       	ldi	r30, 0xEC	; 236
    45e6:	f9 e0       	ldi	r31, 0x09	; 9
    45e8:	91 83       	std	Z+1, r25	; 0x01
    45ea:	80 83       	st	Z, r24
    45ec:	44 e2       	ldi	r20, 0x24	; 36
    45ee:	42 83       	std	Z+2, r20	; 0x02
    45f0:	45 e2       	ldi	r20, 0x25	; 37
    45f2:	43 83       	std	Z+3, r20	; 0x03
    45f4:	41 ee       	ldi	r20, 0xE1	; 225
    45f6:	58 e0       	ldi	r21, 0x08	; 8
    45f8:	55 83       	std	Z+5, r21	; 0x05
    45fa:	44 83       	std	Z+4, r20	; 0x04
    45fc:	e6 ee       	ldi	r30, 0xE6	; 230
    45fe:	f9 e0       	ldi	r31, 0x09	; 9
    4600:	91 83       	std	Z+1, r25	; 0x01
    4602:	80 83       	st	Z, r24
    4604:	46 e2       	ldi	r20, 0x26	; 38
    4606:	42 83       	std	Z+2, r20	; 0x02
    4608:	47 e2       	ldi	r20, 0x27	; 39
    460a:	43 83       	std	Z+3, r20	; 0x03
    460c:	49 ed       	ldi	r20, 0xD9	; 217
    460e:	58 e0       	ldi	r21, 0x08	; 8
    4610:	55 83       	std	Z+5, r21	; 0x05
    4612:	44 83       	std	Z+4, r20	; 0x04
    4614:	e0 ee       	ldi	r30, 0xE0	; 224
    4616:	f9 e0       	ldi	r31, 0x09	; 9
    4618:	91 83       	std	Z+1, r25	; 0x01
    461a:	80 83       	st	Z, r24
    461c:	48 e2       	ldi	r20, 0x28	; 40
    461e:	42 83       	std	Z+2, r20	; 0x02
    4620:	49 e2       	ldi	r20, 0x29	; 41
    4622:	43 83       	std	Z+3, r20	; 0x03
    4624:	41 ed       	ldi	r20, 0xD1	; 209
    4626:	58 e0       	ldi	r21, 0x08	; 8
    4628:	55 83       	std	Z+5, r21	; 0x05
    462a:	44 83       	std	Z+4, r20	; 0x04
    462c:	ea ed       	ldi	r30, 0xDA	; 218
    462e:	f9 e0       	ldi	r31, 0x09	; 9
    4630:	91 83       	std	Z+1, r25	; 0x01
    4632:	80 83       	st	Z, r24
    4634:	4a e2       	ldi	r20, 0x2A	; 42
    4636:	42 83       	std	Z+2, r20	; 0x02
    4638:	4b e2       	ldi	r20, 0x2B	; 43
    463a:	43 83       	std	Z+3, r20	; 0x03
    463c:	49 ec       	ldi	r20, 0xC9	; 201
    463e:	58 e0       	ldi	r21, 0x08	; 8
    4640:	55 83       	std	Z+5, r21	; 0x05
    4642:	44 83       	std	Z+4, r20	; 0x04
    4644:	e4 ed       	ldi	r30, 0xD4	; 212
    4646:	f9 e0       	ldi	r31, 0x09	; 9
    4648:	91 83       	std	Z+1, r25	; 0x01
    464a:	80 83       	st	Z, r24
    464c:	4c e2       	ldi	r20, 0x2C	; 44
    464e:	42 83       	std	Z+2, r20	; 0x02
    4650:	4d e2       	ldi	r20, 0x2D	; 45
    4652:	43 83       	std	Z+3, r20	; 0x03
    4654:	41 ec       	ldi	r20, 0xC1	; 193
    4656:	58 e0       	ldi	r21, 0x08	; 8
    4658:	55 83       	std	Z+5, r21	; 0x05
    465a:	44 83       	std	Z+4, r20	; 0x04
    465c:	ee ec       	ldi	r30, 0xCE	; 206
    465e:	f9 e0       	ldi	r31, 0x09	; 9
    4660:	91 83       	std	Z+1, r25	; 0x01
    4662:	80 83       	st	Z, r24
    4664:	4e e2       	ldi	r20, 0x2E	; 46
    4666:	42 83       	std	Z+2, r20	; 0x02
    4668:	4f e2       	ldi	r20, 0x2F	; 47
    466a:	43 83       	std	Z+3, r20	; 0x03
    466c:	49 eb       	ldi	r20, 0xB9	; 185
    466e:	58 e0       	ldi	r21, 0x08	; 8
    4670:	55 83       	std	Z+5, r21	; 0x05
    4672:	44 83       	std	Z+4, r20	; 0x04
    4674:	e8 ec       	ldi	r30, 0xC8	; 200
    4676:	f9 e0       	ldi	r31, 0x09	; 9
    4678:	91 83       	std	Z+1, r25	; 0x01
    467a:	80 83       	st	Z, r24
    467c:	40 e3       	ldi	r20, 0x30	; 48
    467e:	42 83       	std	Z+2, r20	; 0x02
    4680:	41 e3       	ldi	r20, 0x31	; 49
    4682:	43 83       	std	Z+3, r20	; 0x03
    4684:	41 eb       	ldi	r20, 0xB1	; 177
    4686:	58 e0       	ldi	r21, 0x08	; 8
    4688:	55 83       	std	Z+5, r21	; 0x05
    468a:	44 83       	std	Z+4, r20	; 0x04
    468c:	e2 ec       	ldi	r30, 0xC2	; 194
    468e:	f9 e0       	ldi	r31, 0x09	; 9
    4690:	91 83       	std	Z+1, r25	; 0x01
    4692:	80 83       	st	Z, r24
    4694:	42 e3       	ldi	r20, 0x32	; 50
    4696:	42 83       	std	Z+2, r20	; 0x02
    4698:	43 e3       	ldi	r20, 0x33	; 51
    469a:	43 83       	std	Z+3, r20	; 0x03
    469c:	49 ea       	ldi	r20, 0xA9	; 169
    469e:	58 e0       	ldi	r21, 0x08	; 8
    46a0:	55 83       	std	Z+5, r21	; 0x05
    46a2:	44 83       	std	Z+4, r20	; 0x04
    46a4:	ec eb       	ldi	r30, 0xBC	; 188
    46a6:	f9 e0       	ldi	r31, 0x09	; 9
    46a8:	91 83       	std	Z+1, r25	; 0x01
    46aa:	80 83       	st	Z, r24
    46ac:	84 e3       	ldi	r24, 0x34	; 52
    46ae:	82 83       	std	Z+2, r24	; 0x02
    46b0:	85 e3       	ldi	r24, 0x35	; 53
    46b2:	83 83       	std	Z+3, r24	; 0x03
    46b4:	81 ea       	ldi	r24, 0xA1	; 161
    46b6:	98 e0       	ldi	r25, 0x08	; 8
    46b8:	95 83       	std	Z+5, r25	; 0x05
    46ba:	84 83       	std	Z+4, r24	; 0x04
#include "../IReadable.h"

class DigitalSensor : public IReadable {
public:
	DigitalSensor(const uint8_t ID, Register& DDRPort, Register& PortPort, Register& PinPort, uint8_t Pin, bool Inversed = true) 
		: _id(ID), _pin(Pin), _pinPort(&PinPort), _inversed(Inversed)
    46bc:	e5 eb       	ldi	r30, 0xB5	; 181
    46be:	f9 e0       	ldi	r31, 0x09	; 9
    46c0:	45 e9       	ldi	r20, 0x95	; 149
    46c2:	54 e0       	ldi	r21, 0x04	; 4
    46c4:	51 83       	std	Z+1, r21	; 0x01
    46c6:	40 83       	st	Z, r20
    46c8:	86 e3       	ldi	r24, 0x36	; 54
    46ca:	82 83       	std	Z+2, r24	; 0x02
    46cc:	23 83       	std	Z+3, r18	; 0x03
    46ce:	8f e2       	ldi	r24, 0x2F	; 47
    46d0:	90 e0       	ldi	r25, 0x00	; 0
    46d2:	95 83       	std	Z+5, r25	; 0x05
    46d4:	84 83       	std	Z+4, r24	; 0x04
    46d6:	26 83       	std	Z+6, r18	; 0x06
	{
		DDRPort &= ~Pin; //Enable input
    46d8:	80 98       	cbi	0x10, 0	; 16
		PortPort |= Pin; //Enable pullup
    46da:	88 9a       	sbi	0x11, 0	; 17
#include "../IReadable.h"

class DigitalSensor : public IReadable {
public:
	DigitalSensor(const uint8_t ID, Register& DDRPort, Register& PortPort, Register& PinPort, uint8_t Pin, bool Inversed = true) 
		: _id(ID), _pin(Pin), _pinPort(&PinPort), _inversed(Inversed)
    46dc:	ee ea       	ldi	r30, 0xAE	; 174
    46de:	f9 e0       	ldi	r31, 0x09	; 9
    46e0:	51 83       	std	Z+1, r21	; 0x01
    46e2:	40 83       	st	Z, r20
    46e4:	47 e3       	ldi	r20, 0x37	; 55
    46e6:	42 83       	std	Z+2, r20	; 0x02
    46e8:	33 83       	std	Z+3, r19	; 0x03
    46ea:	95 83       	std	Z+5, r25	; 0x05
    46ec:	84 83       	std	Z+4, r24	; 0x04
    46ee:	26 83       	std	Z+6, r18	; 0x06
	{
		DDRPort &= ~Pin; //Enable input
    46f0:	81 98       	cbi	0x10, 1	; 16
		PortPort |= Pin; //Enable pullup
    46f2:	89 9a       	sbi	0x11, 1	; 17

#include "../IWritable.h"
class DigitalActuator : public IWritable{
public:
	DigitalActuator(const uint8_t ID, Register& DDRPort, Register& PortPort, uint8_t Pin, bool Inversed = false)
		: _id(ID), _pin(Pin), _portPort(&PortPort), _inversed(Inversed)
    46f4:	e7 ea       	ldi	r30, 0xA7	; 167
    46f6:	f9 e0       	ldi	r31, 0x09	; 9
    46f8:	81 ea       	ldi	r24, 0xA1	; 161
    46fa:	94 e0       	ldi	r25, 0x04	; 4
    46fc:	91 83       	std	Z+1, r25	; 0x01
    46fe:	80 83       	st	Z, r24
    4700:	88 e3       	ldi	r24, 0x38	; 56
    4702:	82 83       	std	Z+2, r24	; 0x02
    4704:	80 e8       	ldi	r24, 0x80	; 128
    4706:	83 83       	std	Z+3, r24	; 0x03
    4708:	85 e2       	ldi	r24, 0x25	; 37
    470a:	90 e0       	ldi	r25, 0x00	; 0
    470c:	95 83       	std	Z+5, r25	; 0x05
    470e:	84 83       	std	Z+4, r24	; 0x04
    4710:	16 82       	std	Z+6, r1	; 0x06
	{
		DDRPort |= Pin;
    4712:	27 9a       	sbi	0x04, 7	; 4

DigitalSensor Button0(54, DDR_BTN0, PORT_BTN0, PIN_BTN0, MASK_BTN0);
DigitalSensor Button1(55, DDR_BTN1, PORT_BTN1, PIN_BTN1, MASK_BTN1);
DigitalActuator LED(56, DDR_LED, PORT_LED, MASK_LED);

PressureSensor Pressure(57, Timer0);
    4714:	4b ed       	ldi	r20, 0xDB	; 219
    4716:	57 e0       	ldi	r21, 0x07	; 7
    4718:	69 e3       	ldi	r22, 0x39	; 57
    471a:	8b e7       	ldi	r24, 0x7B	; 123
    471c:	99 e0       	ldi	r25, 0x09	; 9
    471e:	51 d2       	rcall	.+1186   	; 0x4bc2 <_ZN14PressureSensorC1EhR13HardwareTimer>
ImuSensor Imu(
    4720:	0f 2e       	mov	r0, r31
    4722:	f1 e4       	ldi	r31, 0x41	; 65
    4724:	8f 2e       	mov	r8, r31
    4726:	f0 2d       	mov	r31, r0
    4728:	68 94       	set
    472a:	aa 24       	eor	r10, r10
    472c:	a6 f8       	bld	r10, 6
    472e:	0f 2e       	mov	r0, r31
    4730:	ff e3       	ldi	r31, 0x3F	; 63
    4732:	cf 2e       	mov	r12, r31
    4734:	f0 2d       	mov	r31, r0
    4736:	0f 2e       	mov	r0, r31
    4738:	fe e3       	ldi	r31, 0x3E	; 62
    473a:	ef 2e       	mov	r14, r31
    473c:	f0 2d       	mov	r31, r0
    473e:	0d e3       	ldi	r16, 0x3D	; 61
    4740:	2c e3       	ldi	r18, 0x3C	; 60
    4742:	4b e3       	ldi	r20, 0x3B	; 59
    4744:	6a e3       	ldi	r22, 0x3A	; 58
    4746:	86 e6       	ldi	r24, 0x66	; 102
    4748:	99 e0       	ldi	r25, 0x09	; 9
    474a:	9f d1       	rcall	.+830    	; 0x4a8a <_ZN9ImuSensorC1Ehhhhhhhh>

#include "../Micro/Peripherals/Wire.h"

class TwiRegister : public IWritable {
public:
	TwiRegister(const uint8_t id) : _id(id) {
    474c:	e3 e6       	ldi	r30, 0x63	; 99
    474e:	f9 e0       	ldi	r31, 0x09	; 9
    4750:	89 eb       	ldi	r24, 0xB9	; 185
    4752:	94 e0       	ldi	r25, 0x04	; 4
    4754:	91 83       	std	Z+1, r25	; 0x01
    4756:	80 83       	st	Z, r24
    4758:	82 e4       	ldi	r24, 0x42	; 66
    475a:	82 83       	std	Z+2, r24	; 0x02
		}else{
			ErrorCodes.errors |= RegisterNotFound;
			ErrorCodes.reg_not_found = id;
		}
	}
}
    475c:	0f 91       	pop	r16
    475e:	ef 90       	pop	r14
    4760:	cf 90       	pop	r12
    4762:	af 90       	pop	r10
    4764:	8f 90       	pop	r8
    4766:	08 95       	ret

00004768 <_ZN5Robot5beginEv>:
	if(!ServoD8.begin()) return 0x48;
	
	return 0;
}

bool Robot::begin(){
    4768:	0f 93       	push	r16
    476a:	cf 93       	push	r28
    476c:	ee e5       	ldi	r30, 0x5E	; 94
    476e:	fa e0       	ldi	r31, 0x0A	; 10
    4770:	8e e5       	ldi	r24, 0x5E	; 94
    4772:	9c e0       	ldi	r25, 0x0C	; 12
	for(uint16_t i = 0; i < NUM_DEVICES; i++){
		registers[i] = NULL;
    4774:	11 92       	st	Z+, r1
    4776:	11 92       	st	Z+, r1
	
	return 0;
}

bool Robot::begin(){
	for(uint16_t i = 0; i < NUM_DEVICES; i++){
    4778:	e8 17       	cp	r30, r24
    477a:	f9 07       	cpc	r31, r25
    477c:	d9 f7       	brne	.-10     	; 0x4774 <_ZN5Robot5beginEv+0xc>
		registers[i] = NULL;
	}
	
	if(!EtherComm::begin(6001, 6002, DDR_ENC, PORT_ENC, MASK_ENC_CS)){
    477e:	01 e0       	ldi	r16, 0x01	; 1
    4780:	28 e0       	ldi	r18, 0x08	; 8
    4782:	31 e0       	ldi	r19, 0x01	; 1
    4784:	47 e0       	ldi	r20, 0x07	; 7
    4786:	51 e0       	ldi	r21, 0x01	; 1
    4788:	62 e7       	ldi	r22, 0x72	; 114
    478a:	77 e1       	ldi	r23, 0x17	; 23
    478c:	81 e7       	ldi	r24, 0x71	; 113
    478e:	97 e1       	ldi	r25, 0x17	; 23
    4790:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <_ZN9EtherComm5beginEjjRVhS1_h>
    4794:	c8 2f       	mov	r28, r24
    4796:	81 11       	cpse	r24, r1
    4798:	06 c0       	rjmp	.+12     	; 0x47a6 <_ZN5Robot5beginEv+0x3e>
		Serial.println("Failed to access Ethernet controller.");
    479a:	67 e0       	ldi	r22, 0x07	; 7
    479c:	73 e0       	ldi	r23, 0x03	; 3
    479e:	87 e7       	ldi	r24, 0x77	; 119
    47a0:	97 e0       	ldi	r25, 0x07	; 7
    47a2:	7b d2       	rcall	.+1270   	; 0x4c9a <_ZN5Print7printlnEPKc>
		return false;
    47a4:	b0 c0       	rjmp	.+352    	; 0x4906 <_ZN5Robot5beginEv+0x19e>
	}
	Serial.println("Connected to controller.");
    47a6:	6d e2       	ldi	r22, 0x2D	; 45
    47a8:	73 e0       	ldi	r23, 0x03	; 3
    47aa:	87 e7       	ldi	r24, 0x77	; 119
    47ac:	97 e0       	ldi	r25, 0x07	; 7
	
	uint8_t code = initializeServos();
    47ae:	75 d2       	rcall	.+1258   	; 0x4c9a <_ZN5Print7printlnEPKc>
    47b0:	68 dc       	rcall	.-1840   	; 0x4082 <_Z16initializeServosv>
	if(code != 0){
    47b2:	88 23       	and	r24, r24
    47b4:	51 f0       	breq	.+20     	; 0x47ca <_ZN5Robot5beginEv+0x62>
inline ErrorFlag operator | (ErrorFlag lhs, ErrorFlag rhs) {
	return static_cast<ErrorFlag>(static_cast<int>(lhs) | static_cast<int>(rhs));
}

inline ErrorFlag& operator |= (ErrorFlag& lhs, ErrorFlag rhs) {
	lhs = lhs | rhs;
    47b6:	ee e5       	ldi	r30, 0x5E	; 94
    47b8:	f9 e0       	ldi	r31, 0x09	; 9
    47ba:	80 81       	ld	r24, Z
    47bc:	82 60       	ori	r24, 0x02	; 2
	Serial.println("Connected to controller.");
	
	uint8_t code = initializeServos();
	if(code != 0){
		ErrorCodes.errors |= InitializationError;
		ErrorCodes.init_error = code;
    47be:	80 83       	st	Z, r24
    47c0:	81 e0       	ldi	r24, 0x01	; 1
		printServoErrorCode(code);
    47c2:	82 83       	std	Z+2, r24	; 0x02
    47c4:	cf db       	rcall	.-2146   	; 0x3f64 <_Z19printServoErrorCodeh>
		return false;
    47c6:	c0 e0       	ldi	r28, 0x00	; 0
    47c8:	9e c0       	rjmp	.+316    	; 0x4906 <_ZN5Robot5beginEv+0x19e>
	}
	Serial.println("Servos initialized.");
    47ca:	66 e4       	ldi	r22, 0x46	; 70
    47cc:	73 e0       	ldi	r23, 0x03	; 3
    47ce:	87 e7       	ldi	r24, 0x77	; 119
    47d0:	97 e0       	ldi	r25, 0x07	; 7
    47d2:	63 d2       	rcall	.+1222   	; 0x4c9a <_ZN5Print7printlnEPKc>
	}
	
	bool begin(){ //override
		return rov.RegisterDevice(_id, this);
    47d4:	65 eb       	ldi	r22, 0xB5	; 181
    47d6:	79 e0       	ldi	r23, 0x09	; 9
    47d8:	80 91 b7 09 	lds	r24, 0x09B7	; 0x8009b7 <Button0+0x2>
    47dc:	05 dc       	rcall	.-2038   	; 0x3fe8 <_ZN5Robot14RegisterDeviceEhP9IRegister>
    47de:	c8 2f       	mov	r28, r24
    47e0:	81 11       	cpse	r24, r1
	
	if(!Button0.begin()){
    47e2:	0d c0       	rjmp	.+26     	; 0x47fe <_ZN5Robot5beginEv+0x96>
    47e4:	ee e5       	ldi	r30, 0x5E	; 94
inline ErrorFlag operator | (ErrorFlag lhs, ErrorFlag rhs) {
	return static_cast<ErrorFlag>(static_cast<int>(lhs) | static_cast<int>(rhs));
}

inline ErrorFlag& operator |= (ErrorFlag& lhs, ErrorFlag rhs) {
	lhs = lhs | rhs;
    47e6:	f9 e0       	ldi	r31, 0x09	; 9
    47e8:	80 81       	ld	r24, Z
    47ea:	82 60       	ori	r24, 0x02	; 2
    47ec:	80 83       	st	Z, r24
    47ee:	81 e0       	ldi	r24, 0x01	; 1
	}
	Serial.println("Servos initialized.");
	
	if(!Button0.begin()){
		ErrorCodes.errors |= InitializationError;
		ErrorCodes.init_error = ERROR_INIT_BTN0;
    47f0:	82 83       	std	Z+2, r24	; 0x02
		Serial.println("Unable to initialize Button0.");
    47f2:	6a e5       	ldi	r22, 0x5A	; 90
    47f4:	73 e0       	ldi	r23, 0x03	; 3
    47f6:	87 e7       	ldi	r24, 0x77	; 119
    47f8:	97 e0       	ldi	r25, 0x07	; 7
    47fa:	4f d2       	rcall	.+1182   	; 0x4c9a <_ZN5Print7printlnEPKc>
		return false;
    47fc:	84 c0       	rjmp	.+264    	; 0x4906 <_ZN5Robot5beginEv+0x19e>
	}
	Serial.println("Initialized Button0.");
    47fe:	68 e7       	ldi	r22, 0x78	; 120
    4800:	73 e0       	ldi	r23, 0x03	; 3
    4802:	87 e7       	ldi	r24, 0x77	; 119
    4804:	97 e0       	ldi	r25, 0x07	; 7
    4806:	49 d2       	rcall	.+1170   	; 0x4c9a <_ZN5Print7printlnEPKc>
    4808:	6e ea       	ldi	r22, 0xAE	; 174
    480a:	79 e0       	ldi	r23, 0x09	; 9
    480c:	80 91 b0 09 	lds	r24, 0x09B0	; 0x8009b0 <Button1+0x2>
    4810:	eb db       	rcall	.-2090   	; 0x3fe8 <_ZN5Robot14RegisterDeviceEhP9IRegister>
    4812:	c8 2f       	mov	r28, r24
    4814:	81 11       	cpse	r24, r1
	
	if(!Button1.begin()){
    4816:	0d c0       	rjmp	.+26     	; 0x4832 <_ZN5Robot5beginEv+0xca>
    4818:	ee e5       	ldi	r30, 0x5E	; 94
inline ErrorFlag operator | (ErrorFlag lhs, ErrorFlag rhs) {
	return static_cast<ErrorFlag>(static_cast<int>(lhs) | static_cast<int>(rhs));
}

inline ErrorFlag& operator |= (ErrorFlag& lhs, ErrorFlag rhs) {
	lhs = lhs | rhs;
    481a:	f9 e0       	ldi	r31, 0x09	; 9
    481c:	80 81       	ld	r24, Z
    481e:	82 60       	ori	r24, 0x02	; 2
    4820:	80 83       	st	Z, r24
	}
	Serial.println("Initialized Button0.");
	
	if(!Button1.begin()){
		ErrorCodes.errors |= InitializationError;
		ErrorCodes.init_error = ERROR_INIT_BTN1;
    4822:	82 e0       	ldi	r24, 0x02	; 2
    4824:	82 83       	std	Z+2, r24	; 0x02
		Serial.println("Unable to initialize Button1.");
    4826:	6d e8       	ldi	r22, 0x8D	; 141
    4828:	73 e0       	ldi	r23, 0x03	; 3
    482a:	87 e7       	ldi	r24, 0x77	; 119
    482c:	97 e0       	ldi	r25, 0x07	; 7
    482e:	35 d2       	rcall	.+1130   	; 0x4c9a <_ZN5Print7printlnEPKc>
		return false;
	}
	Serial.println("Initialized Button1.");
    4830:	6a c0       	rjmp	.+212    	; 0x4906 <_ZN5Robot5beginEv+0x19e>
    4832:	6b ea       	ldi	r22, 0xAB	; 171
    4834:	73 e0       	ldi	r23, 0x03	; 3
    4836:	87 e7       	ldi	r24, 0x77	; 119
    4838:	97 e0       	ldi	r25, 0x07	; 7
    483a:	2f d2       	rcall	.+1118   	; 0x4c9a <_ZN5Print7printlnEPKc>
	}
	
	bool begin(){ //override
		return rov.RegisterDevice(_id, this);
    483c:	67 ea       	ldi	r22, 0xA7	; 167
    483e:	79 e0       	ldi	r23, 0x09	; 9
    4840:	80 91 a9 09 	lds	r24, 0x09A9	; 0x8009a9 <LED+0x2>
    4844:	d1 db       	rcall	.-2142   	; 0x3fe8 <_ZN5Robot14RegisterDeviceEhP9IRegister>
    4846:	c8 2f       	mov	r28, r24
    4848:	81 11       	cpse	r24, r1
	
	if(!LED.begin()){
    484a:	0d c0       	rjmp	.+26     	; 0x4866 <_ZN5Robot5beginEv+0xfe>
inline ErrorFlag operator | (ErrorFlag lhs, ErrorFlag rhs) {
	return static_cast<ErrorFlag>(static_cast<int>(lhs) | static_cast<int>(rhs));
}

inline ErrorFlag& operator |= (ErrorFlag& lhs, ErrorFlag rhs) {
	lhs = lhs | rhs;
    484c:	ee e5       	ldi	r30, 0x5E	; 94
    484e:	f9 e0       	ldi	r31, 0x09	; 9
    4850:	80 81       	ld	r24, Z
    4852:	82 60       	ori	r24, 0x02	; 2
    4854:	80 83       	st	Z, r24
	}
	Serial.println("Initialized Button1.");
	
	if(!LED.begin()){
		ErrorCodes.errors |= InitializationError;
		ErrorCodes.init_error = ERROR_INIT_LED;
    4856:	83 e0       	ldi	r24, 0x03	; 3
		Serial.println("Unable to initialize LED.");
    4858:	82 83       	std	Z+2, r24	; 0x02
    485a:	60 ec       	ldi	r22, 0xC0	; 192
    485c:	73 e0       	ldi	r23, 0x03	; 3
    485e:	87 e7       	ldi	r24, 0x77	; 119
    4860:	97 e0       	ldi	r25, 0x07	; 7
		return false;
    4862:	1b d2       	rcall	.+1078   	; 0x4c9a <_ZN5Print7printlnEPKc>
	}
	Serial.println("Initialized LED.");
    4864:	50 c0       	rjmp	.+160    	; 0x4906 <_ZN5Robot5beginEv+0x19e>
    4866:	6a ed       	ldi	r22, 0xDA	; 218
    4868:	73 e0       	ldi	r23, 0x03	; 3
    486a:	87 e7       	ldi	r24, 0x77	; 119
    486c:	97 e0       	ldi	r25, 0x07	; 7
    486e:	15 d2       	rcall	.+1066   	; 0x4c9a <_ZN5Print7printlnEPKc>
	
	if(!Imu.begin()){
    4870:	86 e6       	ldi	r24, 0x66	; 102
    4872:	99 e0       	ldi	r25, 0x09	; 9
    4874:	64 d0       	rcall	.+200    	; 0x493e <_ZN9ImuSensor5beginEv>
    4876:	c8 2f       	mov	r28, r24
    4878:	81 11       	cpse	r24, r1
    487a:	0d c0       	rjmp	.+26     	; 0x4896 <_ZN5Robot5beginEv+0x12e>
inline ErrorFlag operator | (ErrorFlag lhs, ErrorFlag rhs) {
	return static_cast<ErrorFlag>(static_cast<int>(lhs) | static_cast<int>(rhs));
}

inline ErrorFlag& operator |= (ErrorFlag& lhs, ErrorFlag rhs) {
	lhs = lhs | rhs;
    487c:	ee e5       	ldi	r30, 0x5E	; 94
    487e:	f9 e0       	ldi	r31, 0x09	; 9
    4880:	80 81       	ld	r24, Z
    4882:	82 60       	ori	r24, 0x02	; 2
	}
	Serial.println("Initialized LED.");
	
	if(!Imu.begin()){
		ErrorCodes.errors |= InitializationError;
		ErrorCodes.init_error = ERROR_INIT_IMU;
    4884:	80 83       	st	Z, r24
		Serial.println("Unable to initialize IMU.");
    4886:	84 e0       	ldi	r24, 0x04	; 4
    4888:	82 83       	std	Z+2, r24	; 0x02
    488a:	6b ee       	ldi	r22, 0xEB	; 235
    488c:	73 e0       	ldi	r23, 0x03	; 3
    488e:	87 e7       	ldi	r24, 0x77	; 119
    4890:	97 e0       	ldi	r25, 0x07	; 7
		return false;
    4892:	03 d2       	rcall	.+1030   	; 0x4c9a <_ZN5Print7printlnEPKc>
	}
	Serial.println("Initialized IMU");
    4894:	38 c0       	rjmp	.+112    	; 0x4906 <_ZN5Robot5beginEv+0x19e>
    4896:	65 e0       	ldi	r22, 0x05	; 5
    4898:	74 e0       	ldi	r23, 0x04	; 4
    489a:	87 e7       	ldi	r24, 0x77	; 119
    489c:	97 e0       	ldi	r25, 0x07	; 7
    489e:	fd d1       	rcall	.+1018   	; 0x4c9a <_ZN5Print7printlnEPKc>
	
	if(!Pressure.begin()){ 
    48a0:	8b e7       	ldi	r24, 0x7B	; 123
    48a2:	99 e0       	ldi	r25, 0x09	; 9
    48a4:	2e d1       	rcall	.+604    	; 0x4b02 <_ZN14PressureSensor5beginEv>
    48a6:	c8 2f       	mov	r28, r24
    48a8:	81 11       	cpse	r24, r1
    48aa:	0d c0       	rjmp	.+26     	; 0x48c6 <_ZN5Robot5beginEv+0x15e>
inline ErrorFlag operator | (ErrorFlag lhs, ErrorFlag rhs) {
	return static_cast<ErrorFlag>(static_cast<int>(lhs) | static_cast<int>(rhs));
}

inline ErrorFlag& operator |= (ErrorFlag& lhs, ErrorFlag rhs) {
	lhs = lhs | rhs;
    48ac:	ee e5       	ldi	r30, 0x5E	; 94
    48ae:	f9 e0       	ldi	r31, 0x09	; 9
    48b0:	80 81       	ld	r24, Z
    48b2:	82 60       	ori	r24, 0x02	; 2
	}
	Serial.println("Initialized IMU");
	
	if(!Pressure.begin()){ 
		ErrorCodes.errors |= InitializationError;
		ErrorCodes.init_error = ERROR_INIT_PRESSURE;
    48b4:	80 83       	st	Z, r24
    48b6:	85 e0       	ldi	r24, 0x05	; 5
		Serial.println("Unable to initialize Pressure Sensor.");
    48b8:	82 83       	std	Z+2, r24	; 0x02
    48ba:	65 e1       	ldi	r22, 0x15	; 21
    48bc:	74 e0       	ldi	r23, 0x04	; 4
    48be:	87 e7       	ldi	r24, 0x77	; 119
    48c0:	97 e0       	ldi	r25, 0x07	; 7
    48c2:	eb d1       	rcall	.+982    	; 0x4c9a <_ZN5Print7printlnEPKc>
		return false;
    48c4:	20 c0       	rjmp	.+64     	; 0x4906 <_ZN5Robot5beginEv+0x19e>
	} 
	Serial.println("Initialized pressure sensor.");
    48c6:	6b e3       	ldi	r22, 0x3B	; 59
    48c8:	74 e0       	ldi	r23, 0x04	; 4
    48ca:	87 e7       	ldi	r24, 0x77	; 119
    48cc:	97 e0       	ldi	r25, 0x07	; 7
    48ce:	e5 d1       	rcall	.+970    	; 0x4c9a <_ZN5Print7printlnEPKc>
	}
	
	bool begin(){
		return rov.RegisterDevice(_id, this);
    48d0:	63 e6       	ldi	r22, 0x63	; 99
    48d2:	79 e0       	ldi	r23, 0x09	; 9
    48d4:	80 91 65 09 	lds	r24, 0x0965	; 0x800965 <TwiSettings+0x2>
    48d8:	87 db       	rcall	.-2290   	; 0x3fe8 <_ZN5Robot14RegisterDeviceEhP9IRegister>
	
	if(!TwiSettings.begin()){
    48da:	81 11       	cpse	r24, r1
    48dc:	0c c0       	rjmp	.+24     	; 0x48f6 <_ZN5Robot5beginEv+0x18e>
inline ErrorFlag operator | (ErrorFlag lhs, ErrorFlag rhs) {
	return static_cast<ErrorFlag>(static_cast<int>(lhs) | static_cast<int>(rhs));
}

inline ErrorFlag& operator |= (ErrorFlag& lhs, ErrorFlag rhs) {
	lhs = lhs | rhs;
    48de:	ee e5       	ldi	r30, 0x5E	; 94
    48e0:	f9 e0       	ldi	r31, 0x09	; 9
    48e2:	80 81       	ld	r24, Z
    48e4:	82 60       	ori	r24, 0x02	; 2
    48e6:	80 83       	st	Z, r24
	} 
	Serial.println("Initialized pressure sensor.");
	
	if(!TwiSettings.begin()){
		ErrorCodes.errors |= InitializationError;
		ErrorCodes.init_error = ERROR_INIT_TWI;
    48e8:	86 e0       	ldi	r24, 0x06	; 6
    48ea:	82 83       	std	Z+2, r24	; 0x02
		Serial.println("Unable to initialize TWI settings.");
    48ec:	68 e5       	ldi	r22, 0x58	; 88
    48ee:	74 e0       	ldi	r23, 0x04	; 4
    48f0:	87 e7       	ldi	r24, 0x77	; 119
    48f2:	97 e0       	ldi	r25, 0x07	; 7
    48f4:	d2 d1       	rcall	.+932    	; 0x4c9a <_ZN5Print7printlnEPKc>
    48f6:	6b e7       	ldi	r22, 0x7B	; 123
	}
	Serial.println("Initialized settings.");
    48f8:	74 e0       	ldi	r23, 0x04	; 4
    48fa:	87 e7       	ldi	r24, 0x77	; 119
    48fc:	97 e0       	ldi	r25, 0x07	; 7
    48fe:	cd d1       	rcall	.+922    	; 0x4c9a <_ZN5Print7printlnEPKc>
    4900:	81 e0       	ldi	r24, 0x01	; 1
    4902:	80 93 62 09 	sts	0x0962, r24	; 0x800962 <initialized>
	
	initialized = true;
    4906:	8c 2f       	mov	r24, r28
    4908:	cf 91       	pop	r28
	return true;
}
    490a:	0f 91       	pop	r16
    490c:	08 95       	ret

0000490e <_ZN5Robot4LoopEv>:
    490e:	0e 94 d1 06 	call	0xda2	; 0xda2 <_ZN8ENC28J6013packetReceiveEv>
    4912:	0e 94 41 09 	call	0x1282	; 0x1282 <_ZN9EtherCard10packetLoopEj>
	}
}

void Robot::Loop(){
	EtherComm::Loop();
	Imu.Update(EtherComm::buffer + 1);
    4916:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    491a:	70 91 01 02 	lds	r23, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    491e:	6f 5f       	subi	r22, 0xFF	; 255
    4920:	7f 4f       	sbci	r23, 0xFF	; 255
    4922:	86 e6       	ldi	r24, 0x66	; 102
    4924:	99 e0       	ldi	r25, 0x09	; 9
    4926:	0a d0       	rcall	.+20     	; 0x493c <_ZN9ImuSensor6UpdateEPh>
	Pressure.Update(EtherComm::buffer + 1);
    4928:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    492c:	70 91 01 02 	lds	r23, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    4930:	6f 5f       	subi	r22, 0xFF	; 255
    4932:	7f 4f       	sbci	r23, 0xFF	; 255
    4934:	8b e7       	ldi	r24, 0x7B	; 123
    4936:	99 e0       	ldi	r25, 0x09	; 9
    4938:	ff c0       	rjmp	.+510    	; 0x4b38 <_ZN14PressureSensor6UpdateEPh>
    493a:	08 95       	ret

0000493c <_ZN9ImuSensor6UpdateEPh>:
		&& rov.RegisterDevice(gravityId, this)
		&& rov.RegisterDevice(quatId, this)
		&& imu.begin();
}

void ImuSensor::Update(uint8_t* buffer){
    493c:	08 95       	ret

0000493e <_ZN9ImuSensor5beginEv>:
	: imu(55, 0x28), tempId(TempId), accelId(AccelId), magId(MagId), gyroId(GyroId), eulerId(EulerId), linearId(LinearId), gravityId(GravityId), quatId(QuatId) 
{
	
}

bool ImuSensor::begin(){
    493e:	cf 93       	push	r28
    4940:	df 93       	push	r29
    4942:	ec 01       	movw	r28, r24
	return 
		rov.RegisterDevice(tempId, this)
    4944:	bc 01       	movw	r22, r24
    4946:	8d 85       	ldd	r24, Y+13	; 0x0d
    4948:	4f db       	rcall	.-2402   	; 0x3fe8 <_ZN5Robot14RegisterDeviceEhP9IRegister>
		&& rov.RegisterDevice(gyroId, this)
		&& rov.RegisterDevice(eulerId, this)
		&& rov.RegisterDevice(linearId, this)
		&& rov.RegisterDevice(gravityId, this)
		&& rov.RegisterDevice(quatId, this)
		&& imu.begin();
    494a:	88 23       	and	r24, r24
    494c:	41 f1       	breq	.+80     	; 0x499e <_ZN9ImuSensor5beginEv+0x60>
}

bool ImuSensor::begin(){
	return 
		rov.RegisterDevice(tempId, this)
		&& rov.RegisterDevice(accelId, this)
    494e:	be 01       	movw	r22, r28
    4950:	8e 85       	ldd	r24, Y+14	; 0x0e
    4952:	4a db       	rcall	.-2412   	; 0x3fe8 <_ZN5Robot14RegisterDeviceEhP9IRegister>
    4954:	88 23       	and	r24, r24
    4956:	19 f1       	breq	.+70     	; 0x499e <_ZN9ImuSensor5beginEv+0x60>
		&& rov.RegisterDevice(magId, this)
    4958:	be 01       	movw	r22, r28
    495a:	8f 85       	ldd	r24, Y+15	; 0x0f
    495c:	45 db       	rcall	.-2422   	; 0x3fe8 <_ZN5Robot14RegisterDeviceEhP9IRegister>
    495e:	88 23       	and	r24, r24
    4960:	f1 f0       	breq	.+60     	; 0x499e <_ZN9ImuSensor5beginEv+0x60>
		&& rov.RegisterDevice(gyroId, this)
    4962:	be 01       	movw	r22, r28
    4964:	88 89       	ldd	r24, Y+16	; 0x10
    4966:	40 db       	rcall	.-2432   	; 0x3fe8 <_ZN5Robot14RegisterDeviceEhP9IRegister>
    4968:	88 23       	and	r24, r24
    496a:	c9 f0       	breq	.+50     	; 0x499e <_ZN9ImuSensor5beginEv+0x60>
		&& rov.RegisterDevice(eulerId, this)
    496c:	be 01       	movw	r22, r28
    496e:	89 89       	ldd	r24, Y+17	; 0x11
    4970:	3b db       	rcall	.-2442   	; 0x3fe8 <_ZN5Robot14RegisterDeviceEhP9IRegister>
    4972:	88 23       	and	r24, r24
    4974:	a1 f0       	breq	.+40     	; 0x499e <_ZN9ImuSensor5beginEv+0x60>
		&& rov.RegisterDevice(linearId, this)
    4976:	be 01       	movw	r22, r28
    4978:	8a 89       	ldd	r24, Y+18	; 0x12
    497a:	36 db       	rcall	.-2452   	; 0x3fe8 <_ZN5Robot14RegisterDeviceEhP9IRegister>
    497c:	88 23       	and	r24, r24
    497e:	79 f0       	breq	.+30     	; 0x499e <_ZN9ImuSensor5beginEv+0x60>
		&& rov.RegisterDevice(gravityId, this)
    4980:	be 01       	movw	r22, r28
    4982:	8b 89       	ldd	r24, Y+19	; 0x13
    4984:	31 db       	rcall	.-2462   	; 0x3fe8 <_ZN5Robot14RegisterDeviceEhP9IRegister>
    4986:	88 23       	and	r24, r24
    4988:	51 f0       	breq	.+20     	; 0x499e <_ZN9ImuSensor5beginEv+0x60>
		&& rov.RegisterDevice(quatId, this)
    498a:	be 01       	movw	r22, r28
    498c:	8c 89       	ldd	r24, Y+20	; 0x14
    498e:	2c db       	rcall	.-2472   	; 0x3fe8 <_ZN5Robot14RegisterDeviceEhP9IRegister>
    4990:	88 23       	and	r24, r24
    4992:	29 f0       	breq	.+10     	; 0x499e <_ZN9ImuSensor5beginEv+0x60>
    4994:	6c e0       	ldi	r22, 0x0C	; 12
		&& imu.begin();
    4996:	ce 01       	movw	r24, r28
    4998:	02 96       	adiw	r24, 0x02	; 2
    499a:	0e 94 38 02 	call	0x470	; 0x470 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>
    499e:	df 91       	pop	r29
}
    49a0:	cf 91       	pop	r28
    49a2:	08 95       	ret

000049a4 <_ZN9ImuSensor21ReadRegisterRequestedEhPh>:
    49a4:	0f 93       	push	r16

void ImuSensor::Update(uint8_t* buffer){
	
}

void ImuSensor::ReadRegisterRequested(uint8_t id, uint8_t* buffer){
    49a6:	1f 93       	push	r17
    49a8:	cf 93       	push	r28
    49aa:	df 93       	push	r29
    49ac:	fc 01       	movw	r30, r24
    49ae:	c6 2f       	mov	r28, r22
    49b0:	8a 01       	movw	r16, r20
	if(id == tempId){
    49b2:	d5 85       	ldd	r29, Z+13	; 0x0d
    49b4:	d6 13       	cpse	r29, r22
    49b6:	0a c0       	rjmp	.+20     	; 0x49cc <_ZN9ImuSensor21ReadRegisterRequestedEhPh+0x28>
		buffer[0] = imu.getTemp();
    49b8:	02 96       	adiw	r24, 0x02	; 2
    49ba:	0e 94 a5 02 	call	0x54a	; 0x54a <_ZN15Adafruit_BNO0557getTempEv>
    49be:	f8 01       	movw	r30, r16
    49c0:	80 83       	st	Z, r24
	
protected:
	void inline SendCommand(uint8_t id, uint8_t len){
		//EtherComm::buffer[2] = id;
		//EtherComm::SendCommand(CMD_UpdateDevice, len + 1);
		EtherComm::SendCommand(id, len);	
    49c2:	61 e0       	ldi	r22, 0x01	; 1
    49c4:	8d 2f       	mov	r24, r29
    49c6:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <_ZN9EtherComm11SendCommandEhh>
    49ca:	5a c0       	rjmp	.+180    	; 0x4a80 <_ZN9ImuSensor21ReadRegisterRequestedEhPh+0xdc>
		SendCommand(id, 1);
	}else if(id == accelId) {
    49cc:	86 85       	ldd	r24, Z+14	; 0x0e
    49ce:	68 13       	cpse	r22, r24
    49d0:	0a c0       	rjmp	.+20     	; 0x49e6 <_ZN9ImuSensor21ReadRegisterRequestedEhPh+0x42>
		SendCommand(id, imu.getVector(Adafruit_BNO055::VECTOR_ACCELEROMETER, buffer));
    49d2:	68 e0       	ldi	r22, 0x08	; 8
    49d4:	cf 01       	movw	r24, r30
    49d6:	02 96       	adiw	r24, 0x02	; 2
    49d8:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tEPh>
    49dc:	68 2f       	mov	r22, r24
    49de:	8c 2f       	mov	r24, r28
    49e0:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <_ZN9EtherComm11SendCommandEhh>
    49e4:	4d c0       	rjmp	.+154    	; 0x4a80 <_ZN9ImuSensor21ReadRegisterRequestedEhPh+0xdc>
	}else if(id == magId){
    49e6:	87 85       	ldd	r24, Z+15	; 0x0f
    49e8:	68 13       	cpse	r22, r24
    49ea:	0a c0       	rjmp	.+20     	; 0x4a00 <_ZN9ImuSensor21ReadRegisterRequestedEhPh+0x5c>
		SendCommand(id, imu.getVector(Adafruit_BNO055::VECTOR_MAGNETOMETER, buffer));
    49ec:	6e e0       	ldi	r22, 0x0E	; 14
    49ee:	cf 01       	movw	r24, r30
    49f0:	02 96       	adiw	r24, 0x02	; 2
    49f2:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tEPh>
    49f6:	68 2f       	mov	r22, r24
    49f8:	8c 2f       	mov	r24, r28
    49fa:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <_ZN9EtherComm11SendCommandEhh>
    49fe:	40 c0       	rjmp	.+128    	; 0x4a80 <_ZN9ImuSensor21ReadRegisterRequestedEhPh+0xdc>
	}else if(id == gyroId){
    4a00:	80 89       	ldd	r24, Z+16	; 0x10
    4a02:	68 13       	cpse	r22, r24
    4a04:	0a c0       	rjmp	.+20     	; 0x4a1a <_ZN9ImuSensor21ReadRegisterRequestedEhPh+0x76>
		SendCommand(id, imu.getVector(Adafruit_BNO055::VECTOR_GYROSCOPE, buffer));
    4a06:	64 e1       	ldi	r22, 0x14	; 20
    4a08:	cf 01       	movw	r24, r30
    4a0a:	02 96       	adiw	r24, 0x02	; 2
    4a0c:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tEPh>
    4a10:	68 2f       	mov	r22, r24
    4a12:	8c 2f       	mov	r24, r28
    4a14:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <_ZN9EtherComm11SendCommandEhh>
    4a18:	33 c0       	rjmp	.+102    	; 0x4a80 <_ZN9ImuSensor21ReadRegisterRequestedEhPh+0xdc>
	}else if(id == eulerId){
    4a1a:	81 89       	ldd	r24, Z+17	; 0x11
    4a1c:	68 13       	cpse	r22, r24
    4a1e:	0a c0       	rjmp	.+20     	; 0x4a34 <_ZN9ImuSensor21ReadRegisterRequestedEhPh+0x90>
		SendCommand(id, imu.getVector(Adafruit_BNO055::VECTOR_EULER, buffer));
    4a20:	6a e1       	ldi	r22, 0x1A	; 26
    4a22:	cf 01       	movw	r24, r30
    4a24:	02 96       	adiw	r24, 0x02	; 2
    4a26:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tEPh>
    4a2a:	68 2f       	mov	r22, r24
    4a2c:	8c 2f       	mov	r24, r28
    4a2e:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <_ZN9EtherComm11SendCommandEhh>
    4a32:	26 c0       	rjmp	.+76     	; 0x4a80 <_ZN9ImuSensor21ReadRegisterRequestedEhPh+0xdc>
	}else if(id == linearId){
    4a34:	82 89       	ldd	r24, Z+18	; 0x12
    4a36:	68 13       	cpse	r22, r24
    4a38:	0a c0       	rjmp	.+20     	; 0x4a4e <_ZN9ImuSensor21ReadRegisterRequestedEhPh+0xaa>
		SendCommand(id, imu.getVector(Adafruit_BNO055::VECTOR_LINEARACCEL, buffer));
    4a3a:	68 e2       	ldi	r22, 0x28	; 40
    4a3c:	cf 01       	movw	r24, r30
    4a3e:	02 96       	adiw	r24, 0x02	; 2
    4a40:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tEPh>
    4a44:	68 2f       	mov	r22, r24
    4a46:	8c 2f       	mov	r24, r28
    4a48:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <_ZN9EtherComm11SendCommandEhh>
    4a4c:	19 c0       	rjmp	.+50     	; 0x4a80 <_ZN9ImuSensor21ReadRegisterRequestedEhPh+0xdc>
	}else if(id == gravityId){
    4a4e:	83 89       	ldd	r24, Z+19	; 0x13
    4a50:	68 13       	cpse	r22, r24
    4a52:	0a c0       	rjmp	.+20     	; 0x4a68 <_ZN9ImuSensor21ReadRegisterRequestedEhPh+0xc4>
		SendCommand(id, imu.getVector(Adafruit_BNO055::VECTOR_GRAVITY, buffer));
    4a54:	6e e2       	ldi	r22, 0x2E	; 46
    4a56:	cf 01       	movw	r24, r30
    4a58:	02 96       	adiw	r24, 0x02	; 2
    4a5a:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tEPh>
    4a5e:	68 2f       	mov	r22, r24
    4a60:	8c 2f       	mov	r24, r28
    4a62:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <_ZN9EtherComm11SendCommandEhh>
    4a66:	0c c0       	rjmp	.+24     	; 0x4a80 <_ZN9ImuSensor21ReadRegisterRequestedEhPh+0xdc>
	}else if(id == quatId){
    4a68:	84 89       	ldd	r24, Z+20	; 0x14
    4a6a:	68 13       	cpse	r22, r24
    4a6c:	09 c0       	rjmp	.+18     	; 0x4a80 <_ZN9ImuSensor21ReadRegisterRequestedEhPh+0xdc>
		SendCommand(id, imu.getQuat(buffer));
    4a6e:	ba 01       	movw	r22, r20
    4a70:	cf 01       	movw	r24, r30
    4a72:	02 96       	adiw	r24, 0x02	; 2
    4a74:	0e 94 ff 02 	call	0x5fe	; 0x5fe <_ZN15Adafruit_BNO0557getQuatEPh>
    4a78:	68 2f       	mov	r22, r24
    4a7a:	8c 2f       	mov	r24, r28
    4a7c:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <_ZN9EtherComm11SendCommandEhh>
	}
    4a80:	df 91       	pop	r29
    4a82:	cf 91       	pop	r28
    4a84:	1f 91       	pop	r17
    4a86:	0f 91       	pop	r16
    4a88:	08 95       	ret

00004a8a <_ZN9ImuSensorC1Ehhhhhhhh>:
 */ 

#include "ImuSensor.h"
#include "../Robot.h"

ImuSensor::ImuSensor(const uint8_t TempId, const uint8_t AccelId, const uint8_t MagId, const uint8_t GyroId, const uint8_t EulerId, const uint8_t LinearId, const uint8_t GravityId, const uint8_t QuatId) 
    4a8a:	6f 92       	push	r6
    4a8c:	7f 92       	push	r7
    4a8e:	8f 92       	push	r8
    4a90:	9f 92       	push	r9
    4a92:	af 92       	push	r10
    4a94:	bf 92       	push	r11
    4a96:	cf 92       	push	r12
    4a98:	df 92       	push	r13
    4a9a:	ef 92       	push	r14
    4a9c:	ff 92       	push	r15
    4a9e:	0f 93       	push	r16
    4aa0:	1f 93       	push	r17
    4aa2:	cf 93       	push	r28
    4aa4:	df 93       	push	r29
    4aa6:	cd b7       	in	r28, 0x3d	; 61
    4aa8:	de b7       	in	r29, 0x3e	; 62
    4aaa:	3c 01       	movw	r6, r24
    4aac:	96 2e       	mov	r9, r22
    4aae:	b4 2e       	mov	r11, r20
    4ab0:	d2 2e       	mov	r13, r18
    4ab2:	f0 2e       	mov	r15, r16
	: imu(55, 0x28), tempId(TempId), accelId(AccelId), magId(MagId), gyroId(GyroId), eulerId(EulerId), linearId(LinearId), gravityId(GravityId), quatId(QuatId) 
    4ab4:	25 ec       	ldi	r18, 0xC5	; 197
    4ab6:	34 e0       	ldi	r19, 0x04	; 4
    4ab8:	fc 01       	movw	r30, r24
    4aba:	21 93       	st	Z+, r18
    4abc:	31 93       	st	Z+, r19
    4abe:	cf 01       	movw	r24, r30
    4ac0:	05 e5       	ldi	r16, 0x55	; 85
    4ac2:	18 e0       	ldi	r17, 0x08	; 8
    4ac4:	28 e2       	ldi	r18, 0x28	; 40
    4ac6:	47 e3       	ldi	r20, 0x37	; 55
    4ac8:	50 e0       	ldi	r21, 0x00	; 0
    4aca:	60 e0       	ldi	r22, 0x00	; 0
    4acc:	70 e0       	ldi	r23, 0x00	; 0
    4ace:	0e 94 c3 01 	call	0x386	; 0x386 <_ZN15Adafruit_BNO055C1ElhP7TwoWire>
    4ad2:	f3 01       	movw	r30, r6
    4ad4:	95 86       	std	Z+13, r9	; 0x0d
    4ad6:	b6 86       	std	Z+14, r11	; 0x0e
    4ad8:	d7 86       	std	Z+15, r13	; 0x0f
    4ada:	f0 8a       	std	Z+16, r15	; 0x10
    4adc:	e1 8a       	std	Z+17, r14	; 0x11
    4ade:	c2 8a       	std	Z+18, r12	; 0x12
    4ae0:	a3 8a       	std	Z+19, r10	; 0x13
    4ae2:	84 8a       	std	Z+20, r8	; 0x14
{
	
}
    4ae4:	df 91       	pop	r29
    4ae6:	cf 91       	pop	r28
    4ae8:	1f 91       	pop	r17
    4aea:	0f 91       	pop	r16
    4aec:	ff 90       	pop	r15
    4aee:	ef 90       	pop	r14
    4af0:	df 90       	pop	r13
    4af2:	cf 90       	pop	r12
    4af4:	bf 90       	pop	r11
    4af6:	af 90       	pop	r10
    4af8:	9f 90       	pop	r9
    4afa:	8f 90       	pop	r8
    4afc:	7f 90       	pop	r7
    4afe:	6f 90       	pop	r6
    4b00:	08 95       	ret

00004b02 <_ZN14PressureSensor5beginEv>:

PressureSensor::PressureSensor(const uint8_t id, HardwareTimer &timer) : sensor(timer), _id(id) {
	
}

bool PressureSensor::begin(){
    4b02:	1f 93       	push	r17
    4b04:	cf 93       	push	r28
    4b06:	df 93       	push	r29
    4b08:	ec 01       	movw	r28, r24
	if(!rov.RegisterDevice(_id, this)) return false;
    4b0a:	bc 01       	movw	r22, r24
    4b0c:	8a a5       	ldd	r24, Y+42	; 0x2a
    4b0e:	6c da       	rcall	.-2856   	; 0x3fe8 <_ZN5Robot14RegisterDeviceEhP9IRegister>
    4b10:	18 2f       	mov	r17, r24
    4b12:	88 23       	and	r24, r24
    4b14:	61 f0       	breq	.+24     	; 0x4b2e <_ZN14PressureSensor5beginEv+0x2c>
	if(sensor.begin()){
    4b16:	22 96       	adiw	r28, 0x02	; 2
    4b18:	ce 01       	movw	r24, r28
    4b1a:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <_ZN6MS58375beginEv>
    4b1e:	18 2f       	mov	r17, r24
    4b20:	88 23       	and	r24, r24
    4b22:	29 f0       	breq	.+10     	; 0x4b2e <_ZN14PressureSensor5beginEv+0x2c>
		sensor.setModel(MS5837::MS5837_30BA);
    4b24:	60 91 8e 02 	lds	r22, 0x028E	; 0x80028e <_ZN6MS583711MS5837_30BAE>
    4b28:	ce 01       	movw	r24, r28
    4b2a:	0e 94 1d 13 	call	0x263a	; 0x263a <_ZN6MS58378setModelEh>
		//sensor.setFluidDensity(997); //Freshwater
		return true;
	}
	
	return false;
}
    4b2e:	81 2f       	mov	r24, r17
    4b30:	df 91       	pop	r29
    4b32:	cf 91       	pop	r28
    4b34:	1f 91       	pop	r17
    4b36:	08 95       	ret

00004b38 <_ZN14PressureSensor6UpdateEPh>:

void PressureSensor::Update(uint8_t* buffer){
    4b38:	ef 92       	push	r14
    4b3a:	ff 92       	push	r15
    4b3c:	0f 93       	push	r16
    4b3e:	1f 93       	push	r17
    4b40:	cf 93       	push	r28
    4b42:	df 93       	push	r29
	if(reading){
    4b44:	fc 01       	movw	r30, r24
    4b46:	23 a5       	ldd	r18, Z+43	; 0x2b
    4b48:	22 23       	and	r18, r18
    4b4a:	31 f1       	breq	.+76     	; 0x4b98 <_ZN14PressureSensor6UpdateEPh+0x60>
    4b4c:	7b 01       	movw	r14, r22
    4b4e:	ec 01       	movw	r28, r24
		sensor.update();
    4b50:	8c 01       	movw	r16, r24
    4b52:	0e 5f       	subi	r16, 0xFE	; 254
    4b54:	1f 4f       	sbci	r17, 0xFF	; 255
    4b56:	c8 01       	movw	r24, r16
    4b58:	0e 94 e3 1a 	call	0x35c6	; 0x35c6 <_ZN6MS58376updateEv>
		if(sensor.finished()){
    4b5c:	c8 01       	movw	r24, r16
    4b5e:	0e 94 46 13 	call	0x268c	; 0x268c <_ZN6MS58378finishedEv>
    4b62:	88 23       	and	r24, r24
    4b64:	c9 f0       	breq	.+50     	; 0x4b98 <_ZN14PressureSensor6UpdateEPh+0x60>
			saveFloat(sensor.pressure(), buffer);
    4b66:	40 e0       	ldi	r20, 0x00	; 0
    4b68:	50 e0       	ldi	r21, 0x00	; 0
    4b6a:	60 e8       	ldi	r22, 0x80	; 128
    4b6c:	7f e3       	ldi	r23, 0x3F	; 63
    4b6e:	c8 01       	movw	r24, r16
    4b70:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <_ZN6MS58378pressureEf>
		/*uint8_t* val = (uint8_t*)(&f);
		*buffer++ = *val++;
		*buffer++ = *val++;
		*buffer++ = *val++;
		*buffer++ = *val++;*/
		*((float*)buffer) = f;
    4b74:	f7 01       	movw	r30, r14
    4b76:	60 83       	st	Z, r22
    4b78:	71 83       	std	Z+1, r23	; 0x01
    4b7a:	82 83       	std	Z+2, r24	; 0x02
    4b7c:	93 83       	std	Z+3, r25	; 0x03
			saveFloat(sensor.temperature(), buffer + 4);
    4b7e:	c8 01       	movw	r24, r16
    4b80:	0e 94 23 1a 	call	0x3446	; 0x3446 <_ZN6MS583711temperatureEv>
    4b84:	f7 01       	movw	r30, r14
    4b86:	64 83       	std	Z+4, r22	; 0x04
    4b88:	75 83       	std	Z+5, r23	; 0x05
    4b8a:	86 83       	std	Z+6, r24	; 0x06
    4b8c:	97 83       	std	Z+7, r25	; 0x07
	
protected:
	void inline SendCommand(uint8_t id, uint8_t len){
		//EtherComm::buffer[2] = id;
		//EtherComm::SendCommand(CMD_UpdateDevice, len + 1);
		EtherComm::SendCommand(id, len);	
    4b8e:	68 e0       	ldi	r22, 0x08	; 8
    4b90:	8a a5       	ldd	r24, Y+42	; 0x2a
    4b92:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <_ZN9EtherComm11SendCommandEhh>
			SendCommand(_id, 8);
			reading = false;
    4b96:	1b a6       	std	Y+43, r1	; 0x2b
		}
	}
}
    4b98:	df 91       	pop	r29
    4b9a:	cf 91       	pop	r28
    4b9c:	1f 91       	pop	r17
    4b9e:	0f 91       	pop	r16
    4ba0:	ff 90       	pop	r15
    4ba2:	ef 90       	pop	r14
    4ba4:	08 95       	ret

00004ba6 <_ZN14PressureSensor21ReadRegisterRequestedEhPh>:

void PressureSensor::ReadRegisterRequested(uint8_t id, uint8_t* buffer){
    4ba6:	cf 93       	push	r28
    4ba8:	df 93       	push	r29
	if(!reading){
    4baa:	fc 01       	movw	r30, r24
    4bac:	23 a5       	ldd	r18, Z+43	; 0x2b
    4bae:	21 11       	cpse	r18, r1
    4bb0:	05 c0       	rjmp	.+10     	; 0x4bbc <_ZN14PressureSensor21ReadRegisterRequestedEhPh+0x16>
    4bb2:	ec 01       	movw	r28, r24
		reading = sensor.startRead();
    4bb4:	02 96       	adiw	r24, 0x02	; 2
    4bb6:	0e 94 20 13 	call	0x2640	; 0x2640 <_ZN6MS58379startReadEv>
    4bba:	8b a7       	std	Y+43, r24	; 0x2b
	}
    4bbc:	df 91       	pop	r29
    4bbe:	cf 91       	pop	r28
    4bc0:	08 95       	ret

00004bc2 <_ZN14PressureSensorC1EhR13HardwareTimer>:
 */ 

#include "PressureSensor.h"
#include "../Robot.h"

PressureSensor::PressureSensor(const uint8_t id, HardwareTimer &timer) : sensor(timer), _id(id) {
    4bc2:	1f 93       	push	r17
    4bc4:	cf 93       	push	r28
    4bc6:	df 93       	push	r29
    4bc8:	ec 01       	movw	r28, r24
    4bca:	16 2f       	mov	r17, r22
    4bcc:	21 ed       	ldi	r18, 0xD1	; 209
    4bce:	34 e0       	ldi	r19, 0x04	; 4
    4bd0:	fc 01       	movw	r30, r24
    4bd2:	21 93       	st	Z+, r18
    4bd4:	31 93       	st	Z+, r19
    4bd6:	cf 01       	movw	r24, r30
    4bd8:	ba 01       	movw	r22, r20
    4bda:	0e 94 11 13 	call	0x2622	; 0x2622 <_ZN6MS5837C1ER13HardwareTimer>
    4bde:	1a a7       	std	Y+42, r17	; 0x2a
	
}
    4be0:	df 91       	pop	r29
    4be2:	cf 91       	pop	r28
    4be4:	1f 91       	pop	r17
    4be6:	08 95       	ret

00004be8 <_ZN5Print5writeEPKhj>:
uint16_t Print::println(long num, int base)
{
  uint16_t n = print(num, base);
  n += println();
  return n;
}
    4be8:	cf 92       	push	r12
    4bea:	df 92       	push	r13
    4bec:	ef 92       	push	r14
    4bee:	ff 92       	push	r15
    4bf0:	0f 93       	push	r16
    4bf2:	1f 93       	push	r17
    4bf4:	cf 93       	push	r28
    4bf6:	df 93       	push	r29
    4bf8:	41 15       	cp	r20, r1
    4bfa:	51 05       	cpc	r21, r1
    4bfc:	c1 f0       	breq	.+48     	; 0x4c2e <_ZN5Print5writeEPKhj+0x46>
    4bfe:	6a 01       	movw	r12, r20
    4c00:	8c 01       	movw	r16, r24
    4c02:	e6 2e       	mov	r14, r22
    4c04:	f7 2e       	mov	r15, r23
    4c06:	c0 e0       	ldi	r28, 0x00	; 0
    4c08:	d0 e0       	ldi	r29, 0x00	; 0
    4c0a:	d7 01       	movw	r26, r14
    4c0c:	6d 91       	ld	r22, X+
    4c0e:	7d 01       	movw	r14, r26
    4c10:	d8 01       	movw	r26, r16
    4c12:	ed 91       	ld	r30, X+
    4c14:	fc 91       	ld	r31, X
    4c16:	01 90       	ld	r0, Z+
    4c18:	f0 81       	ld	r31, Z
    4c1a:	e0 2d       	mov	r30, r0
    4c1c:	c8 01       	movw	r24, r16
    4c1e:	19 95       	eicall
    4c20:	89 2b       	or	r24, r25
    4c22:	39 f0       	breq	.+14     	; 0x4c32 <_ZN5Print5writeEPKhj+0x4a>
    4c24:	21 96       	adiw	r28, 0x01	; 1
    4c26:	cc 16       	cp	r12, r28
    4c28:	dd 06       	cpc	r13, r29
    4c2a:	79 f7       	brne	.-34     	; 0x4c0a <_ZN5Print5writeEPKhj+0x22>
    4c2c:	02 c0       	rjmp	.+4      	; 0x4c32 <_ZN5Print5writeEPKhj+0x4a>
    4c2e:	c0 e0       	ldi	r28, 0x00	; 0
    4c30:	d0 e0       	ldi	r29, 0x00	; 0
    4c32:	ce 01       	movw	r24, r28
    4c34:	df 91       	pop	r29
    4c36:	cf 91       	pop	r28
    4c38:	1f 91       	pop	r17
    4c3a:	0f 91       	pop	r16
    4c3c:	ff 90       	pop	r15
    4c3e:	ef 90       	pop	r14
    4c40:	df 90       	pop	r13
    4c42:	cf 90       	pop	r12
    4c44:	08 95       	ret

00004c46 <_ZN5Print5printEPKc>:
    4c46:	61 15       	cp	r22, r1
    4c48:	71 05       	cpc	r23, r1
    4c4a:	81 f0       	breq	.+32     	; 0x4c6c <_ZN5Print5printEPKc+0x26>
    4c4c:	fb 01       	movw	r30, r22
    4c4e:	01 90       	ld	r0, Z+
    4c50:	00 20       	and	r0, r0
    4c52:	e9 f7       	brne	.-6      	; 0x4c4e <_ZN5Print5printEPKc+0x8>
    4c54:	31 97       	sbiw	r30, 0x01	; 1
    4c56:	af 01       	movw	r20, r30
    4c58:	46 1b       	sub	r20, r22
    4c5a:	57 0b       	sbc	r21, r23
    4c5c:	dc 01       	movw	r26, r24
    4c5e:	ed 91       	ld	r30, X+
    4c60:	fc 91       	ld	r31, X
    4c62:	02 80       	ldd	r0, Z+2	; 0x02
    4c64:	f3 81       	ldd	r31, Z+3	; 0x03
    4c66:	e0 2d       	mov	r30, r0
    4c68:	19 95       	eicall
    4c6a:	08 95       	ret
    4c6c:	80 e0       	ldi	r24, 0x00	; 0
    4c6e:	90 e0       	ldi	r25, 0x00	; 0
    4c70:	08 95       	ret

00004c72 <_ZN5Print5printEc>:
    4c72:	dc 01       	movw	r26, r24
    4c74:	ed 91       	ld	r30, X+
    4c76:	fc 91       	ld	r31, X
    4c78:	01 90       	ld	r0, Z+
    4c7a:	f0 81       	ld	r31, Z
    4c7c:	e0 2d       	mov	r30, r0
    4c7e:	19 95       	eicall
    4c80:	08 95       	ret

00004c82 <_ZN5Print7printlnEv>:
    4c82:	dc 01       	movw	r26, r24
    4c84:	ed 91       	ld	r30, X+
    4c86:	fc 91       	ld	r31, X
    4c88:	02 80       	ldd	r0, Z+2	; 0x02
    4c8a:	f3 81       	ldd	r31, Z+3	; 0x03
    4c8c:	e0 2d       	mov	r30, r0
    4c8e:	42 e0       	ldi	r20, 0x02	; 2
    4c90:	50 e0       	ldi	r21, 0x00	; 0
    4c92:	69 ed       	ldi	r22, 0xD9	; 217
    4c94:	74 e0       	ldi	r23, 0x04	; 4
    4c96:	19 95       	eicall
    4c98:	08 95       	ret

00004c9a <_ZN5Print7printlnEPKc>:
    4c9a:	0f 93       	push	r16
    4c9c:	1f 93       	push	r17
    4c9e:	cf 93       	push	r28
    4ca0:	df 93       	push	r29
    4ca2:	ec 01       	movw	r28, r24
    4ca4:	d0 df       	rcall	.-96     	; 0x4c46 <_ZN5Print5printEPKc>
    4ca6:	8c 01       	movw	r16, r24
    4ca8:	ce 01       	movw	r24, r28
    4caa:	eb df       	rcall	.-42     	; 0x4c82 <_ZN5Print7printlnEv>
    4cac:	80 0f       	add	r24, r16
    4cae:	91 1f       	adc	r25, r17
    4cb0:	df 91       	pop	r29
    4cb2:	cf 91       	pop	r28
    4cb4:	1f 91       	pop	r17
    4cb6:	0f 91       	pop	r16
    4cb8:	08 95       	ret

00004cba <_ZN5Print11printNumberEmh>:
    4cba:	8f 92       	push	r8
    4cbc:	9f 92       	push	r9
    4cbe:	af 92       	push	r10
    4cc0:	bf 92       	push	r11
    4cc2:	ef 92       	push	r14
    4cc4:	ff 92       	push	r15
    4cc6:	0f 93       	push	r16
    4cc8:	1f 93       	push	r17
    4cca:	cf 93       	push	r28
    4ccc:	df 93       	push	r29
    4cce:	cd b7       	in	r28, 0x3d	; 61
    4cd0:	de b7       	in	r29, 0x3e	; 62
    4cd2:	a1 97       	sbiw	r28, 0x21	; 33
    4cd4:	0f b6       	in	r0, 0x3f	; 63
    4cd6:	f8 94       	cli
    4cd8:	de bf       	out	0x3e, r29	; 62
    4cda:	0f be       	out	0x3f, r0	; 63
    4cdc:	cd bf       	out	0x3d, r28	; 61
    4cde:	7c 01       	movw	r14, r24
    4ce0:	cb 01       	movw	r24, r22
    4ce2:	ba 01       	movw	r22, r20
    4ce4:	19 a2       	std	Y+33, r1	; 0x21
    4ce6:	22 30       	cpi	r18, 0x02	; 2
    4ce8:	08 f4       	brcc	.+2      	; 0x4cec <_ZN5Print11printNumberEmh+0x32>
    4cea:	2a e0       	ldi	r18, 0x0A	; 10
    4cec:	8e 01       	movw	r16, r28
    4cee:	0f 5d       	subi	r16, 0xDF	; 223
    4cf0:	1f 4f       	sbci	r17, 0xFF	; 255
    4cf2:	82 2e       	mov	r8, r18
    4cf4:	91 2c       	mov	r9, r1
    4cf6:	a1 2c       	mov	r10, r1
    4cf8:	b1 2c       	mov	r11, r1
    4cfa:	a5 01       	movw	r20, r10
    4cfc:	94 01       	movw	r18, r8
    4cfe:	75 d2       	rcall	.+1258   	; 0x51ea <__udivmodsi4>
    4d00:	e6 2f       	mov	r30, r22
    4d02:	62 2f       	mov	r22, r18
    4d04:	73 2f       	mov	r23, r19
    4d06:	84 2f       	mov	r24, r20
    4d08:	95 2f       	mov	r25, r21
    4d0a:	01 50       	subi	r16, 0x01	; 1
    4d0c:	11 09       	sbc	r17, r1
    4d0e:	ea 30       	cpi	r30, 0x0A	; 10
    4d10:	10 f4       	brcc	.+4      	; 0x4d16 <_ZN5Print11printNumberEmh+0x5c>
    4d12:	e0 5d       	subi	r30, 0xD0	; 208
    4d14:	01 c0       	rjmp	.+2      	; 0x4d18 <_ZN5Print11printNumberEmh+0x5e>
    4d16:	e9 5c       	subi	r30, 0xC9	; 201
    4d18:	d8 01       	movw	r26, r16
    4d1a:	ec 93       	st	X, r30
    4d1c:	61 15       	cp	r22, r1
    4d1e:	71 05       	cpc	r23, r1
    4d20:	81 05       	cpc	r24, r1
    4d22:	91 05       	cpc	r25, r1
    4d24:	51 f7       	brne	.-44     	; 0x4cfa <_ZN5Print11printNumberEmh+0x40>
    4d26:	01 15       	cp	r16, r1
    4d28:	11 05       	cpc	r17, r1
    4d2a:	91 f0       	breq	.+36     	; 0x4d50 <_ZN5Print11printNumberEmh+0x96>
    4d2c:	f8 01       	movw	r30, r16
    4d2e:	01 90       	ld	r0, Z+
    4d30:	00 20       	and	r0, r0
    4d32:	e9 f7       	brne	.-6      	; 0x4d2e <_ZN5Print11printNumberEmh+0x74>
    4d34:	31 97       	sbiw	r30, 0x01	; 1
    4d36:	af 01       	movw	r20, r30
    4d38:	40 1b       	sub	r20, r16
    4d3a:	51 0b       	sbc	r21, r17
    4d3c:	d7 01       	movw	r26, r14
    4d3e:	ed 91       	ld	r30, X+
    4d40:	fc 91       	ld	r31, X
    4d42:	02 80       	ldd	r0, Z+2	; 0x02
    4d44:	f3 81       	ldd	r31, Z+3	; 0x03
    4d46:	e0 2d       	mov	r30, r0
    4d48:	b8 01       	movw	r22, r16
    4d4a:	c7 01       	movw	r24, r14
    4d4c:	19 95       	eicall
    4d4e:	01 c0       	rjmp	.+2      	; 0x4d52 <_ZN5Print11printNumberEmh+0x98>
    4d50:	80 e0       	ldi	r24, 0x00	; 0
    4d52:	a1 96       	adiw	r28, 0x21	; 33
    4d54:	0f b6       	in	r0, 0x3f	; 63
    4d56:	f8 94       	cli
    4d58:	de bf       	out	0x3e, r29	; 62
    4d5a:	0f be       	out	0x3f, r0	; 63
    4d5c:	cd bf       	out	0x3d, r28	; 61
    4d5e:	df 91       	pop	r29
    4d60:	cf 91       	pop	r28
    4d62:	1f 91       	pop	r17
    4d64:	0f 91       	pop	r16
    4d66:	ff 90       	pop	r15
    4d68:	ef 90       	pop	r14
    4d6a:	bf 90       	pop	r11
    4d6c:	af 90       	pop	r10
    4d6e:	9f 90       	pop	r9
    4d70:	8f 90       	pop	r8
    4d72:	08 95       	ret

00004d74 <_ZN5Print5printEmi>:
  }
}

uint16_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
    4d74:	21 15       	cp	r18, r1
    4d76:	31 05       	cpc	r19, r1
    4d78:	49 f4       	brne	.+18     	; 0x4d8c <_ZN5Print5printEmi+0x18>
    4d7a:	dc 01       	movw	r26, r24
    4d7c:	ed 91       	ld	r30, X+
    4d7e:	fc 91       	ld	r31, X
    4d80:	01 90       	ld	r0, Z+
    4d82:	f0 81       	ld	r31, Z
    4d84:	e0 2d       	mov	r30, r0
    4d86:	64 2f       	mov	r22, r20
    4d88:	19 95       	eicall
    4d8a:	08 95       	ret
  else return printNumber(n, base);
    4d8c:	96 df       	rcall	.-212    	; 0x4cba <_ZN5Print11printNumberEmh>
    4d8e:	90 e0       	ldi	r25, 0x00	; 0
}
    4d90:	08 95       	ret

00004d92 <_ZN5Print5printEhi>:
{
  return write(c);
}

uint16_t Print::print(unsigned char b, int base)
{
    4d92:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
    4d94:	46 2f       	mov	r20, r22
    4d96:	50 e0       	ldi	r21, 0x00	; 0
    4d98:	60 e0       	ldi	r22, 0x00	; 0
    4d9a:	70 e0       	ldi	r23, 0x00	; 0
    4d9c:	eb cf       	rjmp	.-42     	; 0x4d74 <_ZN5Print5printEmi>
}
    4d9e:	08 95       	ret

00004da0 <__subsf3>:
    4da0:	50 58       	subi	r21, 0x80	; 128

00004da2 <__addsf3>:
    4da2:	bb 27       	eor	r27, r27
    4da4:	aa 27       	eor	r26, r26
    4da6:	0e d0       	rcall	.+28     	; 0x4dc4 <__addsf3x>
    4da8:	70 c1       	rjmp	.+736    	; 0x508a <__fp_round>
    4daa:	61 d1       	rcall	.+706    	; 0x506e <__fp_pscA>
    4dac:	30 f0       	brcs	.+12     	; 0x4dba <__addsf3+0x18>
    4dae:	66 d1       	rcall	.+716    	; 0x507c <__fp_pscB>
    4db0:	20 f0       	brcs	.+8      	; 0x4dba <__addsf3+0x18>
    4db2:	31 f4       	brne	.+12     	; 0x4dc0 <__addsf3+0x1e>
    4db4:	9f 3f       	cpi	r25, 0xFF	; 255
    4db6:	11 f4       	brne	.+4      	; 0x4dbc <__addsf3+0x1a>
    4db8:	1e f4       	brtc	.+6      	; 0x4dc0 <__addsf3+0x1e>
    4dba:	56 c1       	rjmp	.+684    	; 0x5068 <__fp_nan>
    4dbc:	0e f4       	brtc	.+2      	; 0x4dc0 <__addsf3+0x1e>
    4dbe:	e0 95       	com	r30
    4dc0:	e7 fb       	bst	r30, 7
    4dc2:	4c c1       	rjmp	.+664    	; 0x505c <__fp_inf>

00004dc4 <__addsf3x>:
    4dc4:	e9 2f       	mov	r30, r25
    4dc6:	72 d1       	rcall	.+740    	; 0x50ac <__fp_split3>
    4dc8:	80 f3       	brcs	.-32     	; 0x4daa <__addsf3+0x8>
    4dca:	ba 17       	cp	r27, r26
    4dcc:	62 07       	cpc	r22, r18
    4dce:	73 07       	cpc	r23, r19
    4dd0:	84 07       	cpc	r24, r20
    4dd2:	95 07       	cpc	r25, r21
    4dd4:	18 f0       	brcs	.+6      	; 0x4ddc <__addsf3x+0x18>
    4dd6:	71 f4       	brne	.+28     	; 0x4df4 <__addsf3x+0x30>
    4dd8:	9e f5       	brtc	.+102    	; 0x4e40 <__addsf3x+0x7c>
    4dda:	8a c1       	rjmp	.+788    	; 0x50f0 <__fp_zero>
    4ddc:	0e f4       	brtc	.+2      	; 0x4de0 <__addsf3x+0x1c>
    4dde:	e0 95       	com	r30
    4de0:	0b 2e       	mov	r0, r27
    4de2:	ba 2f       	mov	r27, r26
    4de4:	a0 2d       	mov	r26, r0
    4de6:	0b 01       	movw	r0, r22
    4de8:	b9 01       	movw	r22, r18
    4dea:	90 01       	movw	r18, r0
    4dec:	0c 01       	movw	r0, r24
    4dee:	ca 01       	movw	r24, r20
    4df0:	a0 01       	movw	r20, r0
    4df2:	11 24       	eor	r1, r1
    4df4:	ff 27       	eor	r31, r31
    4df6:	59 1b       	sub	r21, r25
    4df8:	99 f0       	breq	.+38     	; 0x4e20 <__addsf3x+0x5c>
    4dfa:	59 3f       	cpi	r21, 0xF9	; 249
    4dfc:	50 f4       	brcc	.+20     	; 0x4e12 <__addsf3x+0x4e>
    4dfe:	50 3e       	cpi	r21, 0xE0	; 224
    4e00:	68 f1       	brcs	.+90     	; 0x4e5c <__addsf3x+0x98>
    4e02:	1a 16       	cp	r1, r26
    4e04:	f0 40       	sbci	r31, 0x00	; 0
    4e06:	a2 2f       	mov	r26, r18
    4e08:	23 2f       	mov	r18, r19
    4e0a:	34 2f       	mov	r19, r20
    4e0c:	44 27       	eor	r20, r20
    4e0e:	58 5f       	subi	r21, 0xF8	; 248
    4e10:	f3 cf       	rjmp	.-26     	; 0x4df8 <__addsf3x+0x34>
    4e12:	46 95       	lsr	r20
    4e14:	37 95       	ror	r19
    4e16:	27 95       	ror	r18
    4e18:	a7 95       	ror	r26
    4e1a:	f0 40       	sbci	r31, 0x00	; 0
    4e1c:	53 95       	inc	r21
    4e1e:	c9 f7       	brne	.-14     	; 0x4e12 <__addsf3x+0x4e>
    4e20:	7e f4       	brtc	.+30     	; 0x4e40 <__addsf3x+0x7c>
    4e22:	1f 16       	cp	r1, r31
    4e24:	ba 0b       	sbc	r27, r26
    4e26:	62 0b       	sbc	r22, r18
    4e28:	73 0b       	sbc	r23, r19
    4e2a:	84 0b       	sbc	r24, r20
    4e2c:	ba f0       	brmi	.+46     	; 0x4e5c <__addsf3x+0x98>
    4e2e:	91 50       	subi	r25, 0x01	; 1
    4e30:	a1 f0       	breq	.+40     	; 0x4e5a <__addsf3x+0x96>
    4e32:	ff 0f       	add	r31, r31
    4e34:	bb 1f       	adc	r27, r27
    4e36:	66 1f       	adc	r22, r22
    4e38:	77 1f       	adc	r23, r23
    4e3a:	88 1f       	adc	r24, r24
    4e3c:	c2 f7       	brpl	.-16     	; 0x4e2e <__addsf3x+0x6a>
    4e3e:	0e c0       	rjmp	.+28     	; 0x4e5c <__addsf3x+0x98>
    4e40:	ba 0f       	add	r27, r26
    4e42:	62 1f       	adc	r22, r18
    4e44:	73 1f       	adc	r23, r19
    4e46:	84 1f       	adc	r24, r20
    4e48:	48 f4       	brcc	.+18     	; 0x4e5c <__addsf3x+0x98>
    4e4a:	87 95       	ror	r24
    4e4c:	77 95       	ror	r23
    4e4e:	67 95       	ror	r22
    4e50:	b7 95       	ror	r27
    4e52:	f7 95       	ror	r31
    4e54:	9e 3f       	cpi	r25, 0xFE	; 254
    4e56:	08 f0       	brcs	.+2      	; 0x4e5a <__addsf3x+0x96>
    4e58:	b3 cf       	rjmp	.-154    	; 0x4dc0 <__addsf3+0x1e>
    4e5a:	93 95       	inc	r25
    4e5c:	88 0f       	add	r24, r24
    4e5e:	08 f0       	brcs	.+2      	; 0x4e62 <__addsf3x+0x9e>
    4e60:	99 27       	eor	r25, r25
    4e62:	ee 0f       	add	r30, r30
    4e64:	97 95       	ror	r25
    4e66:	87 95       	ror	r24
    4e68:	08 95       	ret

00004e6a <__cmpsf2>:
    4e6a:	d4 d0       	rcall	.+424    	; 0x5014 <__fp_cmp>
    4e6c:	08 f4       	brcc	.+2      	; 0x4e70 <__cmpsf2+0x6>
    4e6e:	81 e0       	ldi	r24, 0x01	; 1
    4e70:	08 95       	ret

00004e72 <__divsf3>:
    4e72:	0c d0       	rcall	.+24     	; 0x4e8c <__divsf3x>
    4e74:	0a c1       	rjmp	.+532    	; 0x508a <__fp_round>
    4e76:	02 d1       	rcall	.+516    	; 0x507c <__fp_pscB>
    4e78:	40 f0       	brcs	.+16     	; 0x4e8a <__divsf3+0x18>
    4e7a:	f9 d0       	rcall	.+498    	; 0x506e <__fp_pscA>
    4e7c:	30 f0       	brcs	.+12     	; 0x4e8a <__divsf3+0x18>
    4e7e:	21 f4       	brne	.+8      	; 0x4e88 <__divsf3+0x16>
    4e80:	5f 3f       	cpi	r21, 0xFF	; 255
    4e82:	19 f0       	breq	.+6      	; 0x4e8a <__divsf3+0x18>
    4e84:	eb c0       	rjmp	.+470    	; 0x505c <__fp_inf>
    4e86:	51 11       	cpse	r21, r1
    4e88:	34 c1       	rjmp	.+616    	; 0x50f2 <__fp_szero>
    4e8a:	ee c0       	rjmp	.+476    	; 0x5068 <__fp_nan>

00004e8c <__divsf3x>:
    4e8c:	0f d1       	rcall	.+542    	; 0x50ac <__fp_split3>
    4e8e:	98 f3       	brcs	.-26     	; 0x4e76 <__divsf3+0x4>

00004e90 <__divsf3_pse>:
    4e90:	99 23       	and	r25, r25
    4e92:	c9 f3       	breq	.-14     	; 0x4e86 <__divsf3+0x14>
    4e94:	55 23       	and	r21, r21
    4e96:	b1 f3       	breq	.-20     	; 0x4e84 <__divsf3+0x12>
    4e98:	95 1b       	sub	r25, r21
    4e9a:	55 0b       	sbc	r21, r21
    4e9c:	bb 27       	eor	r27, r27
    4e9e:	aa 27       	eor	r26, r26
    4ea0:	62 17       	cp	r22, r18
    4ea2:	73 07       	cpc	r23, r19
    4ea4:	84 07       	cpc	r24, r20
    4ea6:	38 f0       	brcs	.+14     	; 0x4eb6 <__divsf3_pse+0x26>
    4ea8:	9f 5f       	subi	r25, 0xFF	; 255
    4eaa:	5f 4f       	sbci	r21, 0xFF	; 255
    4eac:	22 0f       	add	r18, r18
    4eae:	33 1f       	adc	r19, r19
    4eb0:	44 1f       	adc	r20, r20
    4eb2:	aa 1f       	adc	r26, r26
    4eb4:	a9 f3       	breq	.-22     	; 0x4ea0 <__divsf3_pse+0x10>
    4eb6:	33 d0       	rcall	.+102    	; 0x4f1e <__divsf3_pse+0x8e>
    4eb8:	0e 2e       	mov	r0, r30
    4eba:	3a f0       	brmi	.+14     	; 0x4eca <__divsf3_pse+0x3a>
    4ebc:	e0 e8       	ldi	r30, 0x80	; 128
    4ebe:	30 d0       	rcall	.+96     	; 0x4f20 <__divsf3_pse+0x90>
    4ec0:	91 50       	subi	r25, 0x01	; 1
    4ec2:	50 40       	sbci	r21, 0x00	; 0
    4ec4:	e6 95       	lsr	r30
    4ec6:	00 1c       	adc	r0, r0
    4ec8:	ca f7       	brpl	.-14     	; 0x4ebc <__divsf3_pse+0x2c>
    4eca:	29 d0       	rcall	.+82     	; 0x4f1e <__divsf3_pse+0x8e>
    4ecc:	fe 2f       	mov	r31, r30
    4ece:	27 d0       	rcall	.+78     	; 0x4f1e <__divsf3_pse+0x8e>
    4ed0:	66 0f       	add	r22, r22
    4ed2:	77 1f       	adc	r23, r23
    4ed4:	88 1f       	adc	r24, r24
    4ed6:	bb 1f       	adc	r27, r27
    4ed8:	26 17       	cp	r18, r22
    4eda:	37 07       	cpc	r19, r23
    4edc:	48 07       	cpc	r20, r24
    4ede:	ab 07       	cpc	r26, r27
    4ee0:	b0 e8       	ldi	r27, 0x80	; 128
    4ee2:	09 f0       	breq	.+2      	; 0x4ee6 <__divsf3_pse+0x56>
    4ee4:	bb 0b       	sbc	r27, r27
    4ee6:	80 2d       	mov	r24, r0
    4ee8:	bf 01       	movw	r22, r30
    4eea:	ff 27       	eor	r31, r31
    4eec:	93 58       	subi	r25, 0x83	; 131
    4eee:	5f 4f       	sbci	r21, 0xFF	; 255
    4ef0:	2a f0       	brmi	.+10     	; 0x4efc <__divsf3_pse+0x6c>
    4ef2:	9e 3f       	cpi	r25, 0xFE	; 254
    4ef4:	51 05       	cpc	r21, r1
    4ef6:	68 f0       	brcs	.+26     	; 0x4f12 <__divsf3_pse+0x82>
    4ef8:	b1 c0       	rjmp	.+354    	; 0x505c <__fp_inf>
    4efa:	fb c0       	rjmp	.+502    	; 0x50f2 <__fp_szero>
    4efc:	5f 3f       	cpi	r21, 0xFF	; 255
    4efe:	ec f3       	brlt	.-6      	; 0x4efa <__divsf3_pse+0x6a>
    4f00:	98 3e       	cpi	r25, 0xE8	; 232
    4f02:	dc f3       	brlt	.-10     	; 0x4efa <__divsf3_pse+0x6a>
    4f04:	86 95       	lsr	r24
    4f06:	77 95       	ror	r23
    4f08:	67 95       	ror	r22
    4f0a:	b7 95       	ror	r27
    4f0c:	f7 95       	ror	r31
    4f0e:	9f 5f       	subi	r25, 0xFF	; 255
    4f10:	c9 f7       	brne	.-14     	; 0x4f04 <__divsf3_pse+0x74>
    4f12:	88 0f       	add	r24, r24
    4f14:	91 1d       	adc	r25, r1
    4f16:	96 95       	lsr	r25
    4f18:	87 95       	ror	r24
    4f1a:	97 f9       	bld	r25, 7
    4f1c:	08 95       	ret
    4f1e:	e1 e0       	ldi	r30, 0x01	; 1
    4f20:	66 0f       	add	r22, r22
    4f22:	77 1f       	adc	r23, r23
    4f24:	88 1f       	adc	r24, r24
    4f26:	bb 1f       	adc	r27, r27
    4f28:	62 17       	cp	r22, r18
    4f2a:	73 07       	cpc	r23, r19
    4f2c:	84 07       	cpc	r24, r20
    4f2e:	ba 07       	cpc	r27, r26
    4f30:	20 f0       	brcs	.+8      	; 0x4f3a <__divsf3_pse+0xaa>
    4f32:	62 1b       	sub	r22, r18
    4f34:	73 0b       	sbc	r23, r19
    4f36:	84 0b       	sbc	r24, r20
    4f38:	ba 0b       	sbc	r27, r26
    4f3a:	ee 1f       	adc	r30, r30
    4f3c:	88 f7       	brcc	.-30     	; 0x4f20 <__divsf3_pse+0x90>
    4f3e:	e0 95       	com	r30
    4f40:	08 95       	ret

00004f42 <__fixunssfsi>:
    4f42:	bc d0       	rcall	.+376    	; 0x50bc <__fp_splitA>
    4f44:	88 f0       	brcs	.+34     	; 0x4f68 <__fixunssfsi+0x26>
    4f46:	9f 57       	subi	r25, 0x7F	; 127
    4f48:	90 f0       	brcs	.+36     	; 0x4f6e <__fixunssfsi+0x2c>
    4f4a:	b9 2f       	mov	r27, r25
    4f4c:	99 27       	eor	r25, r25
    4f4e:	b7 51       	subi	r27, 0x17	; 23
    4f50:	a0 f0       	brcs	.+40     	; 0x4f7a <__fixunssfsi+0x38>
    4f52:	d1 f0       	breq	.+52     	; 0x4f88 <__fixunssfsi+0x46>
    4f54:	66 0f       	add	r22, r22
    4f56:	77 1f       	adc	r23, r23
    4f58:	88 1f       	adc	r24, r24
    4f5a:	99 1f       	adc	r25, r25
    4f5c:	1a f0       	brmi	.+6      	; 0x4f64 <__fixunssfsi+0x22>
    4f5e:	ba 95       	dec	r27
    4f60:	c9 f7       	brne	.-14     	; 0x4f54 <__fixunssfsi+0x12>
    4f62:	12 c0       	rjmp	.+36     	; 0x4f88 <__fixunssfsi+0x46>
    4f64:	b1 30       	cpi	r27, 0x01	; 1
    4f66:	81 f0       	breq	.+32     	; 0x4f88 <__fixunssfsi+0x46>
    4f68:	c3 d0       	rcall	.+390    	; 0x50f0 <__fp_zero>
    4f6a:	b1 e0       	ldi	r27, 0x01	; 1
    4f6c:	08 95       	ret
    4f6e:	c0 c0       	rjmp	.+384    	; 0x50f0 <__fp_zero>
    4f70:	67 2f       	mov	r22, r23
    4f72:	78 2f       	mov	r23, r24
    4f74:	88 27       	eor	r24, r24
    4f76:	b8 5f       	subi	r27, 0xF8	; 248
    4f78:	39 f0       	breq	.+14     	; 0x4f88 <__fixunssfsi+0x46>
    4f7a:	b9 3f       	cpi	r27, 0xF9	; 249
    4f7c:	cc f3       	brlt	.-14     	; 0x4f70 <__fixunssfsi+0x2e>
    4f7e:	86 95       	lsr	r24
    4f80:	77 95       	ror	r23
    4f82:	67 95       	ror	r22
    4f84:	b3 95       	inc	r27
    4f86:	d9 f7       	brne	.-10     	; 0x4f7e <__fixunssfsi+0x3c>
    4f88:	3e f4       	brtc	.+14     	; 0x4f98 <__fixunssfsi+0x56>
    4f8a:	90 95       	com	r25
    4f8c:	80 95       	com	r24
    4f8e:	70 95       	com	r23
    4f90:	61 95       	neg	r22
    4f92:	7f 4f       	sbci	r23, 0xFF	; 255
    4f94:	8f 4f       	sbci	r24, 0xFF	; 255
    4f96:	9f 4f       	sbci	r25, 0xFF	; 255
    4f98:	08 95       	ret

00004f9a <__floatunsisf>:
    4f9a:	e8 94       	clt
    4f9c:	09 c0       	rjmp	.+18     	; 0x4fb0 <__floatsisf+0x12>

00004f9e <__floatsisf>:
    4f9e:	97 fb       	bst	r25, 7
    4fa0:	3e f4       	brtc	.+14     	; 0x4fb0 <__floatsisf+0x12>
    4fa2:	90 95       	com	r25
    4fa4:	80 95       	com	r24
    4fa6:	70 95       	com	r23
    4fa8:	61 95       	neg	r22
    4faa:	7f 4f       	sbci	r23, 0xFF	; 255
    4fac:	8f 4f       	sbci	r24, 0xFF	; 255
    4fae:	9f 4f       	sbci	r25, 0xFF	; 255
    4fb0:	99 23       	and	r25, r25
    4fb2:	a9 f0       	breq	.+42     	; 0x4fde <__floatsisf+0x40>
    4fb4:	f9 2f       	mov	r31, r25
    4fb6:	96 e9       	ldi	r25, 0x96	; 150
    4fb8:	bb 27       	eor	r27, r27
    4fba:	93 95       	inc	r25
    4fbc:	f6 95       	lsr	r31
    4fbe:	87 95       	ror	r24
    4fc0:	77 95       	ror	r23
    4fc2:	67 95       	ror	r22
    4fc4:	b7 95       	ror	r27
    4fc6:	f1 11       	cpse	r31, r1
    4fc8:	f8 cf       	rjmp	.-16     	; 0x4fba <__floatsisf+0x1c>
    4fca:	fa f4       	brpl	.+62     	; 0x500a <__floatsisf+0x6c>
    4fcc:	bb 0f       	add	r27, r27
    4fce:	11 f4       	brne	.+4      	; 0x4fd4 <__floatsisf+0x36>
    4fd0:	60 ff       	sbrs	r22, 0
    4fd2:	1b c0       	rjmp	.+54     	; 0x500a <__floatsisf+0x6c>
    4fd4:	6f 5f       	subi	r22, 0xFF	; 255
    4fd6:	7f 4f       	sbci	r23, 0xFF	; 255
    4fd8:	8f 4f       	sbci	r24, 0xFF	; 255
    4fda:	9f 4f       	sbci	r25, 0xFF	; 255
    4fdc:	16 c0       	rjmp	.+44     	; 0x500a <__floatsisf+0x6c>
    4fde:	88 23       	and	r24, r24
    4fe0:	11 f0       	breq	.+4      	; 0x4fe6 <__floatsisf+0x48>
    4fe2:	96 e9       	ldi	r25, 0x96	; 150
    4fe4:	11 c0       	rjmp	.+34     	; 0x5008 <__floatsisf+0x6a>
    4fe6:	77 23       	and	r23, r23
    4fe8:	21 f0       	breq	.+8      	; 0x4ff2 <__floatsisf+0x54>
    4fea:	9e e8       	ldi	r25, 0x8E	; 142
    4fec:	87 2f       	mov	r24, r23
    4fee:	76 2f       	mov	r23, r22
    4ff0:	05 c0       	rjmp	.+10     	; 0x4ffc <__floatsisf+0x5e>
    4ff2:	66 23       	and	r22, r22
    4ff4:	71 f0       	breq	.+28     	; 0x5012 <__floatsisf+0x74>
    4ff6:	96 e8       	ldi	r25, 0x86	; 134
    4ff8:	86 2f       	mov	r24, r22
    4ffa:	70 e0       	ldi	r23, 0x00	; 0
    4ffc:	60 e0       	ldi	r22, 0x00	; 0
    4ffe:	2a f0       	brmi	.+10     	; 0x500a <__floatsisf+0x6c>
    5000:	9a 95       	dec	r25
    5002:	66 0f       	add	r22, r22
    5004:	77 1f       	adc	r23, r23
    5006:	88 1f       	adc	r24, r24
    5008:	da f7       	brpl	.-10     	; 0x5000 <__floatsisf+0x62>
    500a:	88 0f       	add	r24, r24
    500c:	96 95       	lsr	r25
    500e:	87 95       	ror	r24
    5010:	97 f9       	bld	r25, 7
    5012:	08 95       	ret

00005014 <__fp_cmp>:
    5014:	99 0f       	add	r25, r25
    5016:	00 08       	sbc	r0, r0
    5018:	55 0f       	add	r21, r21
    501a:	aa 0b       	sbc	r26, r26
    501c:	e0 e8       	ldi	r30, 0x80	; 128
    501e:	fe ef       	ldi	r31, 0xFE	; 254
    5020:	16 16       	cp	r1, r22
    5022:	17 06       	cpc	r1, r23
    5024:	e8 07       	cpc	r30, r24
    5026:	f9 07       	cpc	r31, r25
    5028:	c0 f0       	brcs	.+48     	; 0x505a <__fp_cmp+0x46>
    502a:	12 16       	cp	r1, r18
    502c:	13 06       	cpc	r1, r19
    502e:	e4 07       	cpc	r30, r20
    5030:	f5 07       	cpc	r31, r21
    5032:	98 f0       	brcs	.+38     	; 0x505a <__fp_cmp+0x46>
    5034:	62 1b       	sub	r22, r18
    5036:	73 0b       	sbc	r23, r19
    5038:	84 0b       	sbc	r24, r20
    503a:	95 0b       	sbc	r25, r21
    503c:	39 f4       	brne	.+14     	; 0x504c <__fp_cmp+0x38>
    503e:	0a 26       	eor	r0, r26
    5040:	61 f0       	breq	.+24     	; 0x505a <__fp_cmp+0x46>
    5042:	23 2b       	or	r18, r19
    5044:	24 2b       	or	r18, r20
    5046:	25 2b       	or	r18, r21
    5048:	21 f4       	brne	.+8      	; 0x5052 <__fp_cmp+0x3e>
    504a:	08 95       	ret
    504c:	0a 26       	eor	r0, r26
    504e:	09 f4       	brne	.+2      	; 0x5052 <__fp_cmp+0x3e>
    5050:	a1 40       	sbci	r26, 0x01	; 1
    5052:	a6 95       	lsr	r26
    5054:	8f ef       	ldi	r24, 0xFF	; 255
    5056:	81 1d       	adc	r24, r1
    5058:	81 1d       	adc	r24, r1
    505a:	08 95       	ret

0000505c <__fp_inf>:
    505c:	97 f9       	bld	r25, 7
    505e:	9f 67       	ori	r25, 0x7F	; 127
    5060:	80 e8       	ldi	r24, 0x80	; 128
    5062:	70 e0       	ldi	r23, 0x00	; 0
    5064:	60 e0       	ldi	r22, 0x00	; 0
    5066:	08 95       	ret

00005068 <__fp_nan>:
    5068:	9f ef       	ldi	r25, 0xFF	; 255
    506a:	80 ec       	ldi	r24, 0xC0	; 192
    506c:	08 95       	ret

0000506e <__fp_pscA>:
    506e:	00 24       	eor	r0, r0
    5070:	0a 94       	dec	r0
    5072:	16 16       	cp	r1, r22
    5074:	17 06       	cpc	r1, r23
    5076:	18 06       	cpc	r1, r24
    5078:	09 06       	cpc	r0, r25
    507a:	08 95       	ret

0000507c <__fp_pscB>:
    507c:	00 24       	eor	r0, r0
    507e:	0a 94       	dec	r0
    5080:	12 16       	cp	r1, r18
    5082:	13 06       	cpc	r1, r19
    5084:	14 06       	cpc	r1, r20
    5086:	05 06       	cpc	r0, r21
    5088:	08 95       	ret

0000508a <__fp_round>:
    508a:	09 2e       	mov	r0, r25
    508c:	03 94       	inc	r0
    508e:	00 0c       	add	r0, r0
    5090:	11 f4       	brne	.+4      	; 0x5096 <__fp_round+0xc>
    5092:	88 23       	and	r24, r24
    5094:	52 f0       	brmi	.+20     	; 0x50aa <__fp_round+0x20>
    5096:	bb 0f       	add	r27, r27
    5098:	40 f4       	brcc	.+16     	; 0x50aa <__fp_round+0x20>
    509a:	bf 2b       	or	r27, r31
    509c:	11 f4       	brne	.+4      	; 0x50a2 <__fp_round+0x18>
    509e:	60 ff       	sbrs	r22, 0
    50a0:	04 c0       	rjmp	.+8      	; 0x50aa <__fp_round+0x20>
    50a2:	6f 5f       	subi	r22, 0xFF	; 255
    50a4:	7f 4f       	sbci	r23, 0xFF	; 255
    50a6:	8f 4f       	sbci	r24, 0xFF	; 255
    50a8:	9f 4f       	sbci	r25, 0xFF	; 255
    50aa:	08 95       	ret

000050ac <__fp_split3>:
    50ac:	57 fd       	sbrc	r21, 7
    50ae:	90 58       	subi	r25, 0x80	; 128
    50b0:	44 0f       	add	r20, r20
    50b2:	55 1f       	adc	r21, r21
    50b4:	59 f0       	breq	.+22     	; 0x50cc <__fp_splitA+0x10>
    50b6:	5f 3f       	cpi	r21, 0xFF	; 255
    50b8:	71 f0       	breq	.+28     	; 0x50d6 <__fp_splitA+0x1a>
    50ba:	47 95       	ror	r20

000050bc <__fp_splitA>:
    50bc:	88 0f       	add	r24, r24
    50be:	97 fb       	bst	r25, 7
    50c0:	99 1f       	adc	r25, r25
    50c2:	61 f0       	breq	.+24     	; 0x50dc <__fp_splitA+0x20>
    50c4:	9f 3f       	cpi	r25, 0xFF	; 255
    50c6:	79 f0       	breq	.+30     	; 0x50e6 <__fp_splitA+0x2a>
    50c8:	87 95       	ror	r24
    50ca:	08 95       	ret
    50cc:	12 16       	cp	r1, r18
    50ce:	13 06       	cpc	r1, r19
    50d0:	14 06       	cpc	r1, r20
    50d2:	55 1f       	adc	r21, r21
    50d4:	f2 cf       	rjmp	.-28     	; 0x50ba <__fp_split3+0xe>
    50d6:	46 95       	lsr	r20
    50d8:	f1 df       	rcall	.-30     	; 0x50bc <__fp_splitA>
    50da:	08 c0       	rjmp	.+16     	; 0x50ec <__fp_splitA+0x30>
    50dc:	16 16       	cp	r1, r22
    50de:	17 06       	cpc	r1, r23
    50e0:	18 06       	cpc	r1, r24
    50e2:	99 1f       	adc	r25, r25
    50e4:	f1 cf       	rjmp	.-30     	; 0x50c8 <__fp_splitA+0xc>
    50e6:	86 95       	lsr	r24
    50e8:	71 05       	cpc	r23, r1
    50ea:	61 05       	cpc	r22, r1
    50ec:	08 94       	sec
    50ee:	08 95       	ret

000050f0 <__fp_zero>:
    50f0:	e8 94       	clt

000050f2 <__fp_szero>:
    50f2:	bb 27       	eor	r27, r27
    50f4:	66 27       	eor	r22, r22
    50f6:	77 27       	eor	r23, r23
    50f8:	cb 01       	movw	r24, r22
    50fa:	97 f9       	bld	r25, 7
    50fc:	08 95       	ret

000050fe <__gesf2>:
    50fe:	8a df       	rcall	.-236    	; 0x5014 <__fp_cmp>
    5100:	08 f4       	brcc	.+2      	; 0x5104 <__gesf2+0x6>
    5102:	8f ef       	ldi	r24, 0xFF	; 255
    5104:	08 95       	ret

00005106 <__mulsf3>:
    5106:	0b d0       	rcall	.+22     	; 0x511e <__mulsf3x>
    5108:	c0 cf       	rjmp	.-128    	; 0x508a <__fp_round>
    510a:	b1 df       	rcall	.-158    	; 0x506e <__fp_pscA>
    510c:	28 f0       	brcs	.+10     	; 0x5118 <__mulsf3+0x12>
    510e:	b6 df       	rcall	.-148    	; 0x507c <__fp_pscB>
    5110:	18 f0       	brcs	.+6      	; 0x5118 <__mulsf3+0x12>
    5112:	95 23       	and	r25, r21
    5114:	09 f0       	breq	.+2      	; 0x5118 <__mulsf3+0x12>
    5116:	a2 cf       	rjmp	.-188    	; 0x505c <__fp_inf>
    5118:	a7 cf       	rjmp	.-178    	; 0x5068 <__fp_nan>
    511a:	11 24       	eor	r1, r1
    511c:	ea cf       	rjmp	.-44     	; 0x50f2 <__fp_szero>

0000511e <__mulsf3x>:
    511e:	c6 df       	rcall	.-116    	; 0x50ac <__fp_split3>
    5120:	a0 f3       	brcs	.-24     	; 0x510a <__mulsf3+0x4>

00005122 <__mulsf3_pse>:
    5122:	95 9f       	mul	r25, r21
    5124:	d1 f3       	breq	.-12     	; 0x511a <__mulsf3+0x14>
    5126:	95 0f       	add	r25, r21
    5128:	50 e0       	ldi	r21, 0x00	; 0
    512a:	55 1f       	adc	r21, r21
    512c:	62 9f       	mul	r22, r18
    512e:	f0 01       	movw	r30, r0
    5130:	72 9f       	mul	r23, r18
    5132:	bb 27       	eor	r27, r27
    5134:	f0 0d       	add	r31, r0
    5136:	b1 1d       	adc	r27, r1
    5138:	63 9f       	mul	r22, r19
    513a:	aa 27       	eor	r26, r26
    513c:	f0 0d       	add	r31, r0
    513e:	b1 1d       	adc	r27, r1
    5140:	aa 1f       	adc	r26, r26
    5142:	64 9f       	mul	r22, r20
    5144:	66 27       	eor	r22, r22
    5146:	b0 0d       	add	r27, r0
    5148:	a1 1d       	adc	r26, r1
    514a:	66 1f       	adc	r22, r22
    514c:	82 9f       	mul	r24, r18
    514e:	22 27       	eor	r18, r18
    5150:	b0 0d       	add	r27, r0
    5152:	a1 1d       	adc	r26, r1
    5154:	62 1f       	adc	r22, r18
    5156:	73 9f       	mul	r23, r19
    5158:	b0 0d       	add	r27, r0
    515a:	a1 1d       	adc	r26, r1
    515c:	62 1f       	adc	r22, r18
    515e:	83 9f       	mul	r24, r19
    5160:	a0 0d       	add	r26, r0
    5162:	61 1d       	adc	r22, r1
    5164:	22 1f       	adc	r18, r18
    5166:	74 9f       	mul	r23, r20
    5168:	33 27       	eor	r19, r19
    516a:	a0 0d       	add	r26, r0
    516c:	61 1d       	adc	r22, r1
    516e:	23 1f       	adc	r18, r19
    5170:	84 9f       	mul	r24, r20
    5172:	60 0d       	add	r22, r0
    5174:	21 1d       	adc	r18, r1
    5176:	82 2f       	mov	r24, r18
    5178:	76 2f       	mov	r23, r22
    517a:	6a 2f       	mov	r22, r26
    517c:	11 24       	eor	r1, r1
    517e:	9f 57       	subi	r25, 0x7F	; 127
    5180:	50 40       	sbci	r21, 0x00	; 0
    5182:	8a f0       	brmi	.+34     	; 0x51a6 <__mulsf3_pse+0x84>
    5184:	e1 f0       	breq	.+56     	; 0x51be <__mulsf3_pse+0x9c>
    5186:	88 23       	and	r24, r24
    5188:	4a f0       	brmi	.+18     	; 0x519c <__mulsf3_pse+0x7a>
    518a:	ee 0f       	add	r30, r30
    518c:	ff 1f       	adc	r31, r31
    518e:	bb 1f       	adc	r27, r27
    5190:	66 1f       	adc	r22, r22
    5192:	77 1f       	adc	r23, r23
    5194:	88 1f       	adc	r24, r24
    5196:	91 50       	subi	r25, 0x01	; 1
    5198:	50 40       	sbci	r21, 0x00	; 0
    519a:	a9 f7       	brne	.-22     	; 0x5186 <__mulsf3_pse+0x64>
    519c:	9e 3f       	cpi	r25, 0xFE	; 254
    519e:	51 05       	cpc	r21, r1
    51a0:	70 f0       	brcs	.+28     	; 0x51be <__mulsf3_pse+0x9c>
    51a2:	5c cf       	rjmp	.-328    	; 0x505c <__fp_inf>
    51a4:	a6 cf       	rjmp	.-180    	; 0x50f2 <__fp_szero>
    51a6:	5f 3f       	cpi	r21, 0xFF	; 255
    51a8:	ec f3       	brlt	.-6      	; 0x51a4 <__mulsf3_pse+0x82>
    51aa:	98 3e       	cpi	r25, 0xE8	; 232
    51ac:	dc f3       	brlt	.-10     	; 0x51a4 <__mulsf3_pse+0x82>
    51ae:	86 95       	lsr	r24
    51b0:	77 95       	ror	r23
    51b2:	67 95       	ror	r22
    51b4:	b7 95       	ror	r27
    51b6:	f7 95       	ror	r31
    51b8:	e7 95       	ror	r30
    51ba:	9f 5f       	subi	r25, 0xFF	; 255
    51bc:	c1 f7       	brne	.-16     	; 0x51ae <__mulsf3_pse+0x8c>
    51be:	fe 2b       	or	r31, r30
    51c0:	88 0f       	add	r24, r24
    51c2:	91 1d       	adc	r25, r1
    51c4:	96 95       	lsr	r25
    51c6:	87 95       	ror	r24
    51c8:	97 f9       	bld	r25, 7
    51ca:	08 95       	ret

000051cc <__mulsi3>:
    51cc:	db 01       	movw	r26, r22
    51ce:	8f 93       	push	r24
    51d0:	9f 93       	push	r25
    51d2:	35 d0       	rcall	.+106    	; 0x523e <__muluhisi3>
    51d4:	bf 91       	pop	r27
    51d6:	af 91       	pop	r26
    51d8:	a2 9f       	mul	r26, r18
    51da:	80 0d       	add	r24, r0
    51dc:	91 1d       	adc	r25, r1
    51de:	a3 9f       	mul	r26, r19
    51e0:	90 0d       	add	r25, r0
    51e2:	b2 9f       	mul	r27, r18
    51e4:	90 0d       	add	r25, r0
    51e6:	11 24       	eor	r1, r1
    51e8:	08 95       	ret

000051ea <__udivmodsi4>:
    51ea:	a1 e2       	ldi	r26, 0x21	; 33
    51ec:	1a 2e       	mov	r1, r26
    51ee:	aa 1b       	sub	r26, r26
    51f0:	bb 1b       	sub	r27, r27
    51f2:	fd 01       	movw	r30, r26
    51f4:	0d c0       	rjmp	.+26     	; 0x5210 <__udivmodsi4_ep>

000051f6 <__udivmodsi4_loop>:
    51f6:	aa 1f       	adc	r26, r26
    51f8:	bb 1f       	adc	r27, r27
    51fa:	ee 1f       	adc	r30, r30
    51fc:	ff 1f       	adc	r31, r31
    51fe:	a2 17       	cp	r26, r18
    5200:	b3 07       	cpc	r27, r19
    5202:	e4 07       	cpc	r30, r20
    5204:	f5 07       	cpc	r31, r21
    5206:	20 f0       	brcs	.+8      	; 0x5210 <__udivmodsi4_ep>
    5208:	a2 1b       	sub	r26, r18
    520a:	b3 0b       	sbc	r27, r19
    520c:	e4 0b       	sbc	r30, r20
    520e:	f5 0b       	sbc	r31, r21

00005210 <__udivmodsi4_ep>:
    5210:	66 1f       	adc	r22, r22
    5212:	77 1f       	adc	r23, r23
    5214:	88 1f       	adc	r24, r24
    5216:	99 1f       	adc	r25, r25
    5218:	1a 94       	dec	r1
    521a:	69 f7       	brne	.-38     	; 0x51f6 <__udivmodsi4_loop>
    521c:	60 95       	com	r22
    521e:	70 95       	com	r23
    5220:	80 95       	com	r24
    5222:	90 95       	com	r25
    5224:	9b 01       	movw	r18, r22
    5226:	ac 01       	movw	r20, r24
    5228:	bd 01       	movw	r22, r26
    522a:	cf 01       	movw	r24, r30
    522c:	08 95       	ret

0000522e <__tablejump2__>:
    522e:	ee 0f       	add	r30, r30
    5230:	ff 1f       	adc	r31, r31
    5232:	88 1f       	adc	r24, r24
    5234:	8b bf       	out	0x3b, r24	; 59
    5236:	07 90       	elpm	r0, Z+
    5238:	f6 91       	elpm	r31, Z
    523a:	e0 2d       	mov	r30, r0
    523c:	19 94       	eijmp

0000523e <__muluhisi3>:
    523e:	bb d0       	rcall	.+374    	; 0x53b6 <__umulhisi3>
    5240:	a5 9f       	mul	r26, r21
    5242:	90 0d       	add	r25, r0
    5244:	b4 9f       	mul	r27, r20
    5246:	90 0d       	add	r25, r0
    5248:	a4 9f       	mul	r26, r20
    524a:	80 0d       	add	r24, r0
    524c:	91 1d       	adc	r25, r1
    524e:	11 24       	eor	r1, r1
    5250:	08 95       	ret

00005252 <__muldi3>:
    5252:	df 93       	push	r29
    5254:	cf 93       	push	r28
    5256:	1f 93       	push	r17
    5258:	0f 93       	push	r16
    525a:	9a 9d       	mul	r25, r10
    525c:	f0 2d       	mov	r31, r0
    525e:	21 9f       	mul	r18, r17
    5260:	f0 0d       	add	r31, r0
    5262:	8b 9d       	mul	r24, r11
    5264:	f0 0d       	add	r31, r0
    5266:	8a 9d       	mul	r24, r10
    5268:	e0 2d       	mov	r30, r0
    526a:	f1 0d       	add	r31, r1
    526c:	03 9f       	mul	r16, r19
    526e:	f0 0d       	add	r31, r0
    5270:	02 9f       	mul	r16, r18
    5272:	e0 0d       	add	r30, r0
    5274:	f1 1d       	adc	r31, r1
    5276:	4e 9d       	mul	r20, r14
    5278:	e0 0d       	add	r30, r0
    527a:	f1 1d       	adc	r31, r1
    527c:	5e 9d       	mul	r21, r14
    527e:	f0 0d       	add	r31, r0
    5280:	4f 9d       	mul	r20, r15
    5282:	f0 0d       	add	r31, r0
    5284:	7f 93       	push	r23
    5286:	6f 93       	push	r22
    5288:	bf 92       	push	r11
    528a:	af 92       	push	r10
    528c:	5f 93       	push	r21
    528e:	4f 93       	push	r20
    5290:	d5 01       	movw	r26, r10
    5292:	91 d0       	rcall	.+290    	; 0x53b6 <__umulhisi3>
    5294:	8b 01       	movw	r16, r22
    5296:	ac 01       	movw	r20, r24
    5298:	d7 01       	movw	r26, r14
    529a:	8d d0       	rcall	.+282    	; 0x53b6 <__umulhisi3>
    529c:	eb 01       	movw	r28, r22
    529e:	e8 0f       	add	r30, r24
    52a0:	f9 1f       	adc	r31, r25
    52a2:	d6 01       	movw	r26, r12
    52a4:	1f d0       	rcall	.+62     	; 0x52e4 <__muldi3_6>
    52a6:	2f 91       	pop	r18
    52a8:	3f 91       	pop	r19
    52aa:	d6 01       	movw	r26, r12
    52ac:	84 d0       	rcall	.+264    	; 0x53b6 <__umulhisi3>
    52ae:	c6 0f       	add	r28, r22
    52b0:	d7 1f       	adc	r29, r23
    52b2:	e8 1f       	adc	r30, r24
    52b4:	f9 1f       	adc	r31, r25
    52b6:	af 91       	pop	r26
    52b8:	bf 91       	pop	r27
    52ba:	14 d0       	rcall	.+40     	; 0x52e4 <__muldi3_6>
    52bc:	2f 91       	pop	r18
    52be:	3f 91       	pop	r19
    52c0:	7a d0       	rcall	.+244    	; 0x53b6 <__umulhisi3>
    52c2:	c6 0f       	add	r28, r22
    52c4:	d7 1f       	adc	r29, r23
    52c6:	e8 1f       	adc	r30, r24
    52c8:	f9 1f       	adc	r31, r25
    52ca:	d6 01       	movw	r26, r12
    52cc:	74 d0       	rcall	.+232    	; 0x53b6 <__umulhisi3>
    52ce:	e6 0f       	add	r30, r22
    52d0:	f7 1f       	adc	r31, r23
    52d2:	98 01       	movw	r18, r16
    52d4:	be 01       	movw	r22, r28
    52d6:	cf 01       	movw	r24, r30
    52d8:	11 24       	eor	r1, r1
    52da:	0f 91       	pop	r16
    52dc:	1f 91       	pop	r17
    52de:	cf 91       	pop	r28
    52e0:	df 91       	pop	r29
    52e2:	08 95       	ret

000052e4 <__muldi3_6>:
    52e4:	68 d0       	rcall	.+208    	; 0x53b6 <__umulhisi3>
    52e6:	46 0f       	add	r20, r22
    52e8:	57 1f       	adc	r21, r23
    52ea:	c8 1f       	adc	r28, r24
    52ec:	d9 1f       	adc	r29, r25
    52ee:	08 f4       	brcc	.+2      	; 0x52f2 <__muldi3_6+0xe>
    52f0:	31 96       	adiw	r30, 0x01	; 1
    52f2:	08 95       	ret

000052f4 <__ashldi3>:
    52f4:	0f 93       	push	r16
    52f6:	08 30       	cpi	r16, 0x08	; 8
    52f8:	90 f0       	brcs	.+36     	; 0x531e <__ashldi3+0x2a>
    52fa:	98 2f       	mov	r25, r24
    52fc:	87 2f       	mov	r24, r23
    52fe:	76 2f       	mov	r23, r22
    5300:	65 2f       	mov	r22, r21
    5302:	54 2f       	mov	r21, r20
    5304:	43 2f       	mov	r20, r19
    5306:	32 2f       	mov	r19, r18
    5308:	22 27       	eor	r18, r18
    530a:	08 50       	subi	r16, 0x08	; 8
    530c:	f4 cf       	rjmp	.-24     	; 0x52f6 <__ashldi3+0x2>
    530e:	22 0f       	add	r18, r18
    5310:	33 1f       	adc	r19, r19
    5312:	44 1f       	adc	r20, r20
    5314:	55 1f       	adc	r21, r21
    5316:	66 1f       	adc	r22, r22
    5318:	77 1f       	adc	r23, r23
    531a:	88 1f       	adc	r24, r24
    531c:	99 1f       	adc	r25, r25
    531e:	0a 95       	dec	r16
    5320:	b2 f7       	brpl	.-20     	; 0x530e <__ashldi3+0x1a>
    5322:	0f 91       	pop	r16
    5324:	08 95       	ret

00005326 <__ashrdi3>:
    5326:	97 fb       	bst	r25, 7
    5328:	10 f8       	bld	r1, 0

0000532a <__lshrdi3>:
    532a:	16 94       	lsr	r1
    532c:	00 08       	sbc	r0, r0
    532e:	0f 93       	push	r16
    5330:	08 30       	cpi	r16, 0x08	; 8
    5332:	98 f0       	brcs	.+38     	; 0x535a <__lshrdi3+0x30>
    5334:	08 50       	subi	r16, 0x08	; 8
    5336:	23 2f       	mov	r18, r19
    5338:	34 2f       	mov	r19, r20
    533a:	45 2f       	mov	r20, r21
    533c:	56 2f       	mov	r21, r22
    533e:	67 2f       	mov	r22, r23
    5340:	78 2f       	mov	r23, r24
    5342:	89 2f       	mov	r24, r25
    5344:	90 2d       	mov	r25, r0
    5346:	f4 cf       	rjmp	.-24     	; 0x5330 <__lshrdi3+0x6>
    5348:	05 94       	asr	r0
    534a:	97 95       	ror	r25
    534c:	87 95       	ror	r24
    534e:	77 95       	ror	r23
    5350:	67 95       	ror	r22
    5352:	57 95       	ror	r21
    5354:	47 95       	ror	r20
    5356:	37 95       	ror	r19
    5358:	27 95       	ror	r18
    535a:	0a 95       	dec	r16
    535c:	aa f7       	brpl	.-22     	; 0x5348 <__lshrdi3+0x1e>
    535e:	0f 91       	pop	r16
    5360:	08 95       	ret

00005362 <__adddi3>:
    5362:	2a 0d       	add	r18, r10
    5364:	3b 1d       	adc	r19, r11
    5366:	4c 1d       	adc	r20, r12
    5368:	5d 1d       	adc	r21, r13
    536a:	6e 1d       	adc	r22, r14
    536c:	7f 1d       	adc	r23, r15
    536e:	80 1f       	adc	r24, r16
    5370:	91 1f       	adc	r25, r17
    5372:	08 95       	ret

00005374 <__adddi3_s8>:
    5374:	00 24       	eor	r0, r0
    5376:	a7 fd       	sbrc	r26, 7
    5378:	00 94       	com	r0
    537a:	2a 0f       	add	r18, r26
    537c:	30 1d       	adc	r19, r0
    537e:	40 1d       	adc	r20, r0
    5380:	50 1d       	adc	r21, r0
    5382:	60 1d       	adc	r22, r0
    5384:	70 1d       	adc	r23, r0
    5386:	80 1d       	adc	r24, r0
    5388:	90 1d       	adc	r25, r0
    538a:	08 95       	ret

0000538c <__subdi3>:
    538c:	2a 19       	sub	r18, r10
    538e:	3b 09       	sbc	r19, r11
    5390:	4c 09       	sbc	r20, r12
    5392:	5d 09       	sbc	r21, r13
    5394:	6e 09       	sbc	r22, r14
    5396:	7f 09       	sbc	r23, r15
    5398:	80 0b       	sbc	r24, r16
    539a:	91 0b       	sbc	r25, r17
    539c:	08 95       	ret

0000539e <__cmpdi2_s8>:
    539e:	00 24       	eor	r0, r0
    53a0:	a7 fd       	sbrc	r26, 7
    53a2:	00 94       	com	r0
    53a4:	2a 17       	cp	r18, r26
    53a6:	30 05       	cpc	r19, r0
    53a8:	40 05       	cpc	r20, r0
    53aa:	50 05       	cpc	r21, r0
    53ac:	60 05       	cpc	r22, r0
    53ae:	70 05       	cpc	r23, r0
    53b0:	80 05       	cpc	r24, r0
    53b2:	90 05       	cpc	r25, r0
    53b4:	08 95       	ret

000053b6 <__umulhisi3>:
    53b6:	a2 9f       	mul	r26, r18
    53b8:	b0 01       	movw	r22, r0
    53ba:	b3 9f       	mul	r27, r19
    53bc:	c0 01       	movw	r24, r0
    53be:	a3 9f       	mul	r26, r19
    53c0:	70 0d       	add	r23, r0
    53c2:	81 1d       	adc	r24, r1
    53c4:	11 24       	eor	r1, r1
    53c6:	91 1d       	adc	r25, r1
    53c8:	b2 9f       	mul	r27, r18
    53ca:	70 0d       	add	r23, r0
    53cc:	81 1d       	adc	r24, r1
    53ce:	11 24       	eor	r1, r1
    53d0:	91 1d       	adc	r25, r1
    53d2:	08 95       	ret

000053d4 <memcpy_P>:
    53d4:	fb 01       	movw	r30, r22
    53d6:	dc 01       	movw	r26, r24
    53d8:	02 c0       	rjmp	.+4      	; 0x53de <memcpy_P+0xa>
    53da:	05 90       	lpm	r0, Z+
    53dc:	0d 92       	st	X+, r0
    53de:	41 50       	subi	r20, 0x01	; 1
    53e0:	50 40       	sbci	r21, 0x00	; 0
    53e2:	d8 f7       	brcc	.-10     	; 0x53da <memcpy_P+0x6>
    53e4:	08 95       	ret

000053e6 <memcmp>:
    53e6:	fb 01       	movw	r30, r22
    53e8:	dc 01       	movw	r26, r24
    53ea:	04 c0       	rjmp	.+8      	; 0x53f4 <memcmp+0xe>
    53ec:	8d 91       	ld	r24, X+
    53ee:	01 90       	ld	r0, Z+
    53f0:	80 19       	sub	r24, r0
    53f2:	21 f4       	brne	.+8      	; 0x53fc <memcmp+0x16>
    53f4:	41 50       	subi	r20, 0x01	; 1
    53f6:	50 40       	sbci	r21, 0x00	; 0
    53f8:	c8 f7       	brcc	.-14     	; 0x53ec <memcmp+0x6>
    53fa:	88 1b       	sub	r24, r24
    53fc:	99 0b       	sbc	r25, r25
    53fe:	08 95       	ret

00005400 <strncpy>:
    5400:	fb 01       	movw	r30, r22
    5402:	dc 01       	movw	r26, r24
    5404:	41 50       	subi	r20, 0x01	; 1
    5406:	50 40       	sbci	r21, 0x00	; 0
    5408:	48 f0       	brcs	.+18     	; 0x541c <strncpy+0x1c>
    540a:	01 90       	ld	r0, Z+
    540c:	0d 92       	st	X+, r0
    540e:	00 20       	and	r0, r0
    5410:	c9 f7       	brne	.-14     	; 0x5404 <strncpy+0x4>
    5412:	01 c0       	rjmp	.+2      	; 0x5416 <strncpy+0x16>
    5414:	1d 92       	st	X+, r1
    5416:	41 50       	subi	r20, 0x01	; 1
    5418:	50 40       	sbci	r21, 0x00	; 0
    541a:	e0 f7       	brcc	.-8      	; 0x5414 <strncpy+0x14>
    541c:	08 95       	ret

0000541e <_exit>:
    541e:	f8 94       	cli

00005420 <__stop_program>:
    5420:	ff cf       	rjmp	.-2      	; 0x5420 <__stop_program>
