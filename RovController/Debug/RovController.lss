
RovController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f6  00800200  00003038  000030cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003038  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000006af  008002f6  008002f6  000031c2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000031c2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000031f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000a40  00000000  00000000  00003234  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00016848  00000000  00000000  00003c74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005475  00000000  00000000  0001a4bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005eac  00000000  00000000  0001f931  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001fcc  00000000  00000000  000257e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00006584  00000000  00000000  000277ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000aa6d  00000000  00000000  0002dd30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000990  00000000  00000000  0003879d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4f c1       	rjmp	.+670    	; 0x2a0 <__ctors_end>
       2:	00 00       	nop
       4:	7e c1       	rjmp	.+764    	; 0x302 <__bad_interrupt>
       6:	00 00       	nop
       8:	7c c1       	rjmp	.+760    	; 0x302 <__bad_interrupt>
       a:	00 00       	nop
       c:	7a c1       	rjmp	.+756    	; 0x302 <__bad_interrupt>
       e:	00 00       	nop
      10:	78 c1       	rjmp	.+752    	; 0x302 <__bad_interrupt>
      12:	00 00       	nop
      14:	76 c1       	rjmp	.+748    	; 0x302 <__bad_interrupt>
      16:	00 00       	nop
      18:	74 c1       	rjmp	.+744    	; 0x302 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	72 c1       	rjmp	.+740    	; 0x302 <__bad_interrupt>
      1e:	00 00       	nop
      20:	70 c1       	rjmp	.+736    	; 0x302 <__bad_interrupt>
      22:	00 00       	nop
      24:	6e c1       	rjmp	.+732    	; 0x302 <__bad_interrupt>
      26:	00 00       	nop
      28:	6c c1       	rjmp	.+728    	; 0x302 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	6a c1       	rjmp	.+724    	; 0x302 <__bad_interrupt>
      2e:	00 00       	nop
      30:	68 c1       	rjmp	.+720    	; 0x302 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 99 10 	jmp	0x2132	; 0x2132 <__vector_13>
      38:	64 c1       	rjmp	.+712    	; 0x302 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	62 c1       	rjmp	.+708    	; 0x302 <__bad_interrupt>
      3e:	00 00       	nop
      40:	60 c1       	rjmp	.+704    	; 0x302 <__bad_interrupt>
      42:	00 00       	nop
      44:	5e c1       	rjmp	.+700    	; 0x302 <__bad_interrupt>
      46:	00 00       	nop
      48:	5c c1       	rjmp	.+696    	; 0x302 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	5a c1       	rjmp	.+692    	; 0x302 <__bad_interrupt>
      4e:	00 00       	nop
      50:	58 c1       	rjmp	.+688    	; 0x302 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 70 10 	jmp	0x20e0	; 0x20e0 <__vector_21>
      58:	54 c1       	rjmp	.+680    	; 0x302 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	52 c1       	rjmp	.+676    	; 0x302 <__bad_interrupt>
      5e:	00 00       	nop
      60:	50 c1       	rjmp	.+672    	; 0x302 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 8b 0d 	jmp	0x1b16	; 0x1b16 <__vector_25>
      68:	0c 94 c7 0d 	jmp	0x1b8e	; 0x1b8e <__vector_26>
      6c:	4a c1       	rjmp	.+660    	; 0x302 <__bad_interrupt>
      6e:	00 00       	nop
      70:	48 c1       	rjmp	.+656    	; 0x302 <__bad_interrupt>
      72:	00 00       	nop
      74:	46 c1       	rjmp	.+652    	; 0x302 <__bad_interrupt>
      76:	00 00       	nop
      78:	44 c1       	rjmp	.+648    	; 0x302 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	42 c1       	rjmp	.+644    	; 0x302 <__bad_interrupt>
      7e:	00 00       	nop
      80:	40 c1       	rjmp	.+640    	; 0x302 <__bad_interrupt>
      82:	00 00       	nop
      84:	3e c1       	rjmp	.+636    	; 0x302 <__bad_interrupt>
      86:	00 00       	nop
      88:	3c c1       	rjmp	.+632    	; 0x302 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	3a c1       	rjmp	.+628    	; 0x302 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 13 0e 	jmp	0x1c26	; 0x1c26 <__vector_36>
      94:	0c 94 4f 0e 	jmp	0x1c9e	; 0x1c9e <__vector_37>
      98:	34 c1       	rjmp	.+616    	; 0x302 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 02 12 	jmp	0x2404	; 0x2404 <__vector_39>
      a0:	30 c1       	rjmp	.+608    	; 0x302 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	2e c1       	rjmp	.+604    	; 0x302 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	2c c1       	rjmp	.+600    	; 0x302 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	2a c1       	rjmp	.+596    	; 0x302 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	28 c1       	rjmp	.+592    	; 0x302 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	26 c1       	rjmp	.+588    	; 0x302 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	24 c1       	rjmp	.+584    	; 0x302 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	22 c1       	rjmp	.+580    	; 0x302 <__bad_interrupt>
      be:	00 00       	nop
      c0:	20 c1       	rjmp	.+576    	; 0x302 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	1e c1       	rjmp	.+572    	; 0x302 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	1c c1       	rjmp	.+568    	; 0x302 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 9b 0e 	jmp	0x1d36	; 0x1d36 <__vector_51>
      d0:	0c 94 d7 0e 	jmp	0x1dae	; 0x1dae <__vector_52>
      d4:	16 c1       	rjmp	.+556    	; 0x302 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 23 0f 	jmp	0x1e46	; 0x1e46 <__vector_54>
      dc:	0c 94 5f 0f 	jmp	0x1ebe	; 0x1ebe <__vector_55>
      e0:	10 c1       	rjmp	.+544    	; 0x302 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	08 13       	cpse	r16, r24
      e6:	0b 13       	cpse	r16, r27
      e8:	0b 13       	cpse	r16, r27
      ea:	0b 13       	cpse	r16, r27
      ec:	0b 13       	cpse	r16, r27
      ee:	0b 13       	cpse	r16, r27
      f0:	0b 13       	cpse	r16, r27
      f2:	0b 13       	cpse	r16, r27
      f4:	23 12       	cpse	r2, r19
      f6:	0b 13       	cpse	r16, r27
      f8:	0b 13       	cpse	r16, r27
      fa:	0b 13       	cpse	r16, r27
      fc:	0b 13       	cpse	r16, r27
      fe:	0b 13       	cpse	r16, r27
     100:	0b 13       	cpse	r16, r27
     102:	0b 13       	cpse	r16, r27
     104:	23 12       	cpse	r2, r19
     106:	0b 13       	cpse	r16, r27
     108:	0b 13       	cpse	r16, r27
     10a:	0b 13       	cpse	r16, r27
     10c:	0b 13       	cpse	r16, r27
     10e:	0b 13       	cpse	r16, r27
     110:	0b 13       	cpse	r16, r27
     112:	0b 13       	cpse	r16, r27
     114:	2b 12       	cpse	r2, r27
     116:	0b 13       	cpse	r16, r27
     118:	0b 13       	cpse	r16, r27
     11a:	0b 13       	cpse	r16, r27
     11c:	0b 13       	cpse	r16, r27
     11e:	0b 13       	cpse	r16, r27
     120:	0b 13       	cpse	r16, r27
     122:	0b 13       	cpse	r16, r27
     124:	50 12       	cpse	r5, r16
     126:	0b 13       	cpse	r16, r27
     128:	0b 13       	cpse	r16, r27
     12a:	0b 13       	cpse	r16, r27
     12c:	0b 13       	cpse	r16, r27
     12e:	0b 13       	cpse	r16, r27
     130:	0b 13       	cpse	r16, r27
     132:	0b 13       	cpse	r16, r27
     134:	2b 12       	cpse	r2, r27
     136:	0b 13       	cpse	r16, r27
     138:	0b 13       	cpse	r16, r27
     13a:	0b 13       	cpse	r16, r27
     13c:	0b 13       	cpse	r16, r27
     13e:	0b 13       	cpse	r16, r27
     140:	0b 13       	cpse	r16, r27
     142:	0b 13       	cpse	r16, r27
     144:	55 12       	cpse	r5, r21
     146:	0b 13       	cpse	r16, r27
     148:	0b 13       	cpse	r16, r27
     14a:	0b 13       	cpse	r16, r27
     14c:	0b 13       	cpse	r16, r27
     14e:	0b 13       	cpse	r16, r27
     150:	0b 13       	cpse	r16, r27
     152:	0b 13       	cpse	r16, r27
     154:	5a 12       	cpse	r5, r26
     156:	0b 13       	cpse	r16, r27
     158:	0b 13       	cpse	r16, r27
     15a:	0b 13       	cpse	r16, r27
     15c:	0b 13       	cpse	r16, r27
     15e:	0b 13       	cpse	r16, r27
     160:	0b 13       	cpse	r16, r27
     162:	0b 13       	cpse	r16, r27
     164:	6b 12       	cpse	r6, r27
     166:	0b 13       	cpse	r16, r27
     168:	0b 13       	cpse	r16, r27
     16a:	0b 13       	cpse	r16, r27
     16c:	0b 13       	cpse	r16, r27
     16e:	0b 13       	cpse	r16, r27
     170:	0b 13       	cpse	r16, r27
     172:	0b 13       	cpse	r16, r27
     174:	94 12       	cpse	r9, r20
     176:	0b 13       	cpse	r16, r27
     178:	0b 13       	cpse	r16, r27
     17a:	0b 13       	cpse	r16, r27
     17c:	0b 13       	cpse	r16, r27
     17e:	0b 13       	cpse	r16, r27
     180:	0b 13       	cpse	r16, r27
     182:	0b 13       	cpse	r16, r27
     184:	5f 12       	cpse	r5, r31
     186:	0b 13       	cpse	r16, r27
     188:	0b 13       	cpse	r16, r27
     18a:	0b 13       	cpse	r16, r27
     18c:	0b 13       	cpse	r16, r27
     18e:	0b 13       	cpse	r16, r27
     190:	0b 13       	cpse	r16, r27
     192:	0b 13       	cpse	r16, r27
     194:	79 12       	cpse	r7, r25
     196:	0b 13       	cpse	r16, r27
     198:	0b 13       	cpse	r16, r27
     19a:	0b 13       	cpse	r16, r27
     19c:	0b 13       	cpse	r16, r27
     19e:	0b 13       	cpse	r16, r27
     1a0:	0b 13       	cpse	r16, r27
     1a2:	0b 13       	cpse	r16, r27
     1a4:	96 12       	cpse	r9, r22
     1a6:	0b 13       	cpse	r16, r27
     1a8:	0b 13       	cpse	r16, r27
     1aa:	0b 13       	cpse	r16, r27
     1ac:	0b 13       	cpse	r16, r27
     1ae:	0b 13       	cpse	r16, r27
     1b0:	0b 13       	cpse	r16, r27
     1b2:	0b 13       	cpse	r16, r27
     1b4:	96 12       	cpse	r9, r22
     1b6:	0b 13       	cpse	r16, r27
     1b8:	0b 13       	cpse	r16, r27
     1ba:	0b 13       	cpse	r16, r27
     1bc:	0b 13       	cpse	r16, r27
     1be:	0b 13       	cpse	r16, r27
     1c0:	0b 13       	cpse	r16, r27
     1c2:	0b 13       	cpse	r16, r27
     1c4:	96 12       	cpse	r9, r22
     1c6:	0b 13       	cpse	r16, r27
     1c8:	0b 13       	cpse	r16, r27
     1ca:	0b 13       	cpse	r16, r27
     1cc:	0b 13       	cpse	r16, r27
     1ce:	0b 13       	cpse	r16, r27
     1d0:	0b 13       	cpse	r16, r27
     1d2:	0b 13       	cpse	r16, r27
     1d4:	96 12       	cpse	r9, r22
     1d6:	0b 13       	cpse	r16, r27
     1d8:	0b 13       	cpse	r16, r27
     1da:	0b 13       	cpse	r16, r27
     1dc:	0b 13       	cpse	r16, r27
     1de:	0b 13       	cpse	r16, r27
     1e0:	0b 13       	cpse	r16, r27
     1e2:	0b 13       	cpse	r16, r27
     1e4:	9f 12       	cpse	r9, r31
     1e6:	0b 13       	cpse	r16, r27
     1e8:	0b 13       	cpse	r16, r27
     1ea:	0b 13       	cpse	r16, r27
     1ec:	0b 13       	cpse	r16, r27
     1ee:	0b 13       	cpse	r16, r27
     1f0:	0b 13       	cpse	r16, r27
     1f2:	0b 13       	cpse	r16, r27
     1f4:	cf 12       	cpse	r12, r31
     1f6:	0b 13       	cpse	r16, r27
     1f8:	0b 13       	cpse	r16, r27
     1fa:	0b 13       	cpse	r16, r27
     1fc:	0b 13       	cpse	r16, r27
     1fe:	0b 13       	cpse	r16, r27
     200:	0b 13       	cpse	r16, r27
     202:	0b 13       	cpse	r16, r27
     204:	9f 12       	cpse	r9, r31
     206:	0b 13       	cpse	r16, r27
     208:	0b 13       	cpse	r16, r27
     20a:	0b 13       	cpse	r16, r27
     20c:	0b 13       	cpse	r16, r27
     20e:	0b 13       	cpse	r16, r27
     210:	0b 13       	cpse	r16, r27
     212:	0b 13       	cpse	r16, r27
     214:	cf 12       	cpse	r12, r31
     216:	0b 13       	cpse	r16, r27
     218:	0b 13       	cpse	r16, r27
     21a:	0b 13       	cpse	r16, r27
     21c:	0b 13       	cpse	r16, r27
     21e:	0b 13       	cpse	r16, r27
     220:	0b 13       	cpse	r16, r27
     222:	0b 13       	cpse	r16, r27
     224:	b7 12       	cpse	r11, r23
     226:	0b 13       	cpse	r16, r27
     228:	0b 13       	cpse	r16, r27
     22a:	0b 13       	cpse	r16, r27
     22c:	0b 13       	cpse	r16, r27
     22e:	0b 13       	cpse	r16, r27
     230:	0b 13       	cpse	r16, r27
     232:	0b 13       	cpse	r16, r27
     234:	d3 12       	cpse	r13, r19
     236:	0b 13       	cpse	r16, r27
     238:	0b 13       	cpse	r16, r27
     23a:	0b 13       	cpse	r16, r27
     23c:	0b 13       	cpse	r16, r27
     23e:	0b 13       	cpse	r16, r27
     240:	0b 13       	cpse	r16, r27
     242:	0b 13       	cpse	r16, r27
     244:	d3 12       	cpse	r13, r19
     246:	0b 13       	cpse	r16, r27
     248:	0b 13       	cpse	r16, r27
     24a:	0b 13       	cpse	r16, r27
     24c:	0b 13       	cpse	r16, r27
     24e:	0b 13       	cpse	r16, r27
     250:	0b 13       	cpse	r16, r27
     252:	0b 13       	cpse	r16, r27
     254:	e8 12       	cpse	r14, r24
     256:	0b 13       	cpse	r16, r27
     258:	0b 13       	cpse	r16, r27
     25a:	0b 13       	cpse	r16, r27
     25c:	0b 13       	cpse	r16, r27
     25e:	0b 13       	cpse	r16, r27
     260:	0b 13       	cpse	r16, r27
     262:	0b 13       	cpse	r16, r27
     264:	02 13       	cpse	r16, r18
     266:	0b 13       	cpse	r16, r27
     268:	0b 13       	cpse	r16, r27
     26a:	0b 13       	cpse	r16, r27
     26c:	0b 13       	cpse	r16, r27
     26e:	0b 13       	cpse	r16, r27
     270:	0b 13       	cpse	r16, r27
     272:	0b 13       	cpse	r16, r27
     274:	02 13       	cpse	r16, r18

00000276 <__trampolines_end>:
     276:	45 00       	.word	0x0045	; ????
     278:	00 82       	st	Z, r0
     27a:	00 00       	nop
     27c:	40 00       	.word	0x0040	; ????
     27e:	20 00       	Address 0x0000027e is out of bounds.
.word	0xffff	; ????

0000027f <_ZL9arpreqhdr>:
     27f:	00 01 08 00 06 04 00 01 00                          .........

00000288 <__ctors_start>:
     288:	33 05       	cpc	r19, r3
     28a:	37 0c       	add	r3, r7
     28c:	f0 0d       	add	r31, r0
     28e:	78 0e       	add	r7, r24
     290:	00 0f       	add	r16, r16
     292:	88 0f       	add	r24, r24
     294:	ab 0f       	add	r26, r27
     296:	c2 10       	cpse	r12, r2
     298:	72 14       	cp	r7, r2
     29a:	e8 14       	cp	r14, r8
     29c:	f9 15       	cp	r31, r9
     29e:	01 16       	cp	r0, r17

000002a0 <__ctors_end>:
     2a0:	11 24       	eor	r1, r1
     2a2:	1f be       	out	0x3f, r1	; 63
     2a4:	cf ef       	ldi	r28, 0xFF	; 255
     2a6:	d1 e2       	ldi	r29, 0x21	; 33
     2a8:	de bf       	out	0x3e, r29	; 62
     2aa:	cd bf       	out	0x3d, r28	; 61
     2ac:	00 e0       	ldi	r16, 0x00	; 0
     2ae:	0c bf       	out	0x3c, r16	; 60

000002b0 <__do_copy_data>:
     2b0:	12 e0       	ldi	r17, 0x02	; 2
     2b2:	a0 e0       	ldi	r26, 0x00	; 0
     2b4:	b2 e0       	ldi	r27, 0x02	; 2
     2b6:	e8 e3       	ldi	r30, 0x38	; 56
     2b8:	f0 e3       	ldi	r31, 0x30	; 48
     2ba:	00 e0       	ldi	r16, 0x00	; 0
     2bc:	0b bf       	out	0x3b, r16	; 59
     2be:	02 c0       	rjmp	.+4      	; 0x2c4 <__do_copy_data+0x14>
     2c0:	07 90       	elpm	r0, Z+
     2c2:	0d 92       	st	X+, r0
     2c4:	a6 3f       	cpi	r26, 0xF6	; 246
     2c6:	b1 07       	cpc	r27, r17
     2c8:	d9 f7       	brne	.-10     	; 0x2c0 <__do_copy_data+0x10>

000002ca <__do_clear_bss>:
     2ca:	29 e0       	ldi	r18, 0x09	; 9
     2cc:	a6 ef       	ldi	r26, 0xF6	; 246
     2ce:	b2 e0       	ldi	r27, 0x02	; 2
     2d0:	01 c0       	rjmp	.+2      	; 0x2d4 <.do_clear_bss_start>

000002d2 <.do_clear_bss_loop>:
     2d2:	1d 92       	st	X+, r1

000002d4 <.do_clear_bss_start>:
     2d4:	a5 3a       	cpi	r26, 0xA5	; 165
     2d6:	b2 07       	cpc	r27, r18
     2d8:	e1 f7       	brne	.-8      	; 0x2d2 <.do_clear_bss_loop>

000002da <__do_global_ctors>:
     2da:	11 e0       	ldi	r17, 0x01	; 1
     2dc:	c0 e5       	ldi	r28, 0x50	; 80
     2de:	d1 e0       	ldi	r29, 0x01	; 1
     2e0:	00 e0       	ldi	r16, 0x00	; 0
     2e2:	06 c0       	rjmp	.+12     	; 0x2f0 <__do_global_ctors+0x16>
     2e4:	21 97       	sbiw	r28, 0x01	; 1
     2e6:	01 09       	sbc	r16, r1
     2e8:	80 2f       	mov	r24, r16
     2ea:	fe 01       	movw	r30, r28
     2ec:	0e 94 ed 17 	call	0x2fda	; 0x2fda <__tablejump2__>
     2f0:	c4 34       	cpi	r28, 0x44	; 68
     2f2:	d1 07       	cpc	r29, r17
     2f4:	80 e0       	ldi	r24, 0x00	; 0
     2f6:	08 07       	cpc	r16, r24
     2f8:	a9 f7       	brne	.-22     	; 0x2e4 <__do_global_ctors+0xa>
     2fa:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <main>
     2fe:	0c 94 1a 18 	jmp	0x3034	; 0x3034 <_exit>

00000302 <__bad_interrupt>:
     302:	7e ce       	rjmp	.-772    	; 0x0 <__vectors>

00000304 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:

    setMode(lastMode);
    return true;
  }
  return false;
}
     304:	08 95       	ret

00000306 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>:
     306:	0f 93       	push	r16
     308:	1f 93       	push	r17
     30a:	cf 93       	push	r28
     30c:	df 93       	push	r29
     30e:	8c 01       	movw	r16, r24
     310:	eb 01       	movw	r28, r22
     312:	88 e2       	ldi	r24, 0x28	; 40
     314:	fb 01       	movw	r30, r22
     316:	11 92       	st	Z+, r1
     318:	8a 95       	dec	r24
     31a:	e9 f7       	brne	.-6      	; 0x316 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x10>
     31c:	4b e0       	ldi	r20, 0x0B	; 11
     31e:	50 e0       	ldi	r21, 0x00	; 0
     320:	64 e1       	ldi	r22, 0x14	; 20
     322:	72 e0       	ldi	r23, 0x02	; 2
     324:	ce 01       	movw	r24, r28
     326:	0e 94 0b 18 	call	0x3016	; 0x3016 <strncpy>
     32a:	1b 86       	std	Y+11, r1	; 0x0b
     32c:	81 e0       	ldi	r24, 0x01	; 1
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	a0 e0       	ldi	r26, 0x00	; 0
     332:	b0 e0       	ldi	r27, 0x00	; 0
     334:	8c 87       	std	Y+12, r24	; 0x0c
     336:	9d 87       	std	Y+13, r25	; 0x0d
     338:	ae 87       	std	Y+14, r26	; 0x0e
     33a:	bf 87       	std	Y+15, r27	; 0x0f
     33c:	f8 01       	movw	r30, r16
     33e:	86 81       	ldd	r24, Z+6	; 0x06
     340:	97 81       	ldd	r25, Z+7	; 0x07
     342:	a0 85       	ldd	r26, Z+8	; 0x08
     344:	b1 85       	ldd	r27, Z+9	; 0x09
     346:	88 8b       	std	Y+16, r24	; 0x10
     348:	99 8b       	std	Y+17, r25	; 0x11
     34a:	aa 8b       	std	Y+18, r26	; 0x12
     34c:	bb 8b       	std	Y+19, r27	; 0x13
     34e:	83 e0       	ldi	r24, 0x03	; 3
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	a0 e0       	ldi	r26, 0x00	; 0
     354:	b0 e0       	ldi	r27, 0x00	; 0
     356:	8c 8b       	std	Y+20, r24	; 0x14
     358:	9d 8b       	std	Y+21, r25	; 0x15
     35a:	ae 8b       	std	Y+22, r26	; 0x16
     35c:	bf 8b       	std	Y+23, r27	; 0x17
     35e:	1c a2       	std	Y+36, r1	; 0x24
     360:	1d a2       	std	Y+37, r1	; 0x25
     362:	1e a2       	std	Y+38, r1	; 0x26
     364:	1f a2       	std	Y+39, r1	; 0x27
     366:	18 8e       	std	Y+24, r1	; 0x18
     368:	19 8e       	std	Y+25, r1	; 0x19
     36a:	1a 8e       	std	Y+26, r1	; 0x1a
     36c:	1b 8e       	std	Y+27, r1	; 0x1b
     36e:	1c 8e       	std	Y+28, r1	; 0x1c
     370:	1d 8e       	std	Y+29, r1	; 0x1d
     372:	1e 8e       	std	Y+30, r1	; 0x1e
     374:	1f 8e       	std	Y+31, r1	; 0x1f
     376:	8a e0       	ldi	r24, 0x0A	; 10
     378:	97 ed       	ldi	r25, 0xD7	; 215
     37a:	a3 e2       	ldi	r26, 0x23	; 35
     37c:	bc e3       	ldi	r27, 0x3C	; 60
     37e:	88 a3       	std	Y+32, r24	; 0x20
     380:	99 a3       	std	Y+33, r25	; 0x21
     382:	aa a3       	std	Y+34, r26	; 0x22
     384:	bb a3       	std	Y+35, r27	; 0x23
     386:	df 91       	pop	r29
     388:	cf 91       	pop	r28
     38a:	1f 91       	pop	r17
     38c:	0f 91       	pop	r16
     38e:	08 95       	ret

00000390 <_ZN15Adafruit_BNO055C1ElhP7TwoWire>:
     390:	0f 93       	push	r16
     392:	1f 93       	push	r17
     394:	fc 01       	movw	r30, r24
     396:	8f e1       	ldi	r24, 0x1F	; 31
     398:	92 e0       	ldi	r25, 0x02	; 2
     39a:	91 83       	std	Z+1, r25	; 0x01
     39c:	80 83       	st	Z, r24
     39e:	46 83       	std	Z+6, r20	; 0x06
     3a0:	57 83       	std	Z+7, r21	; 0x07
     3a2:	60 87       	std	Z+8, r22	; 0x08
     3a4:	71 87       	std	Z+9, r23	; 0x09
     3a6:	23 83       	std	Z+3, r18	; 0x03
     3a8:	15 83       	std	Z+5, r17	; 0x05
     3aa:	04 83       	std	Z+4, r16	; 0x04
     3ac:	1f 91       	pop	r17
     3ae:	0f 91       	pop	r16
     3b0:	08 95       	ret

000003b2 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>:
     3b2:	0f 93       	push	r16
     3b4:	1f 93       	push	r17
     3b6:	cf 93       	push	r28
     3b8:	df 93       	push	r29
     3ba:	ec 01       	movw	r28, r24
     3bc:	06 2f       	mov	r16, r22
     3be:	14 2f       	mov	r17, r20
     3c0:	6b 81       	ldd	r22, Y+3	; 0x03
     3c2:	8c 81       	ldd	r24, Y+4	; 0x04
     3c4:	9d 81       	ldd	r25, Y+5	; 0x05
     3c6:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN7TwoWire17beginTransmissionEh>
     3ca:	8c 81       	ldd	r24, Y+4	; 0x04
     3cc:	9d 81       	ldd	r25, Y+5	; 0x05
     3ce:	dc 01       	movw	r26, r24
     3d0:	ed 91       	ld	r30, X+
     3d2:	fc 91       	ld	r31, X
     3d4:	01 90       	ld	r0, Z+
     3d6:	f0 81       	ld	r31, Z
     3d8:	e0 2d       	mov	r30, r0
     3da:	60 2f       	mov	r22, r16
     3dc:	19 95       	eicall
     3de:	8c 81       	ldd	r24, Y+4	; 0x04
     3e0:	9d 81       	ldd	r25, Y+5	; 0x05
     3e2:	dc 01       	movw	r26, r24
     3e4:	ed 91       	ld	r30, X+
     3e6:	fc 91       	ld	r31, X
     3e8:	01 90       	ld	r0, Z+
     3ea:	f0 81       	ld	r31, Z
     3ec:	e0 2d       	mov	r30, r0
     3ee:	61 2f       	mov	r22, r17
     3f0:	19 95       	eicall
     3f2:	8c 81       	ldd	r24, Y+4	; 0x04
     3f4:	9d 81       	ldd	r25, Y+5	; 0x05
     3f6:	0e 94 6f 14 	call	0x28de	; 0x28de <_ZN7TwoWire15endTransmissionEv>
     3fa:	81 e0       	ldi	r24, 0x01	; 1
     3fc:	df 91       	pop	r29
     3fe:	cf 91       	pop	r28
     400:	1f 91       	pop	r17
     402:	0f 91       	pop	r16
     404:	08 95       	ret

00000406 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>:
     406:	46 2f       	mov	r20, r22
     408:	fc 01       	movw	r30, r24
     40a:	62 87       	std	Z+10, r22	; 0x0a
     40c:	6d e3       	ldi	r22, 0x3D	; 61
     40e:	d1 df       	rcall	.-94     	; 0x3b2 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     410:	ff ef       	ldi	r31, 0xFF	; 255
     412:	26 e7       	ldi	r18, 0x76	; 118
     414:	81 e0       	ldi	r24, 0x01	; 1
     416:	f1 50       	subi	r31, 0x01	; 1
     418:	20 40       	sbci	r18, 0x00	; 0
     41a:	80 40       	sbci	r24, 0x00	; 0
     41c:	e1 f7       	brne	.-8      	; 0x416 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE+0x10>
     41e:	00 c0       	rjmp	.+0      	; 0x420 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE+0x1a>
     420:	00 00       	nop
     422:	08 95       	ret

00000424 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>:
     424:	1f 93       	push	r17
     426:	cf 93       	push	r28
     428:	df 93       	push	r29
     42a:	ec 01       	movw	r28, r24
     42c:	16 2f       	mov	r17, r22
     42e:	6b 81       	ldd	r22, Y+3	; 0x03
     430:	8c 81       	ldd	r24, Y+4	; 0x04
     432:	9d 81       	ldd	r25, Y+5	; 0x05
     434:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN7TwoWire17beginTransmissionEh>
     438:	8c 81       	ldd	r24, Y+4	; 0x04
     43a:	9d 81       	ldd	r25, Y+5	; 0x05
     43c:	dc 01       	movw	r26, r24
     43e:	ed 91       	ld	r30, X+
     440:	fc 91       	ld	r31, X
     442:	01 90       	ld	r0, Z+
     444:	f0 81       	ld	r31, Z
     446:	e0 2d       	mov	r30, r0
     448:	61 2f       	mov	r22, r17
     44a:	19 95       	eicall
     44c:	8c 81       	ldd	r24, Y+4	; 0x04
     44e:	9d 81       	ldd	r25, Y+5	; 0x05
     450:	0e 94 6f 14 	call	0x28de	; 0x28de <_ZN7TwoWire15endTransmissionEv>
     454:	41 e0       	ldi	r20, 0x01	; 1
     456:	6b 81       	ldd	r22, Y+3	; 0x03
     458:	8c 81       	ldd	r24, Y+4	; 0x04
     45a:	9d 81       	ldd	r25, Y+5	; 0x05
     45c:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <_ZN7TwoWire11requestFromEhh>
     460:	8c 81       	ldd	r24, Y+4	; 0x04
     462:	9d 81       	ldd	r25, Y+5	; 0x05
     464:	dc 01       	movw	r26, r24
     466:	ed 91       	ld	r30, X+
     468:	fc 91       	ld	r31, X
     46a:	02 84       	ldd	r0, Z+10	; 0x0a
     46c:	f3 85       	ldd	r31, Z+11	; 0x0b
     46e:	e0 2d       	mov	r30, r0
     470:	19 95       	eicall
     472:	df 91       	pop	r29
     474:	cf 91       	pop	r28
     476:	1f 91       	pop	r17
     478:	08 95       	ret

0000047a <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>:
     47a:	1f 93       	push	r17
     47c:	cf 93       	push	r28
     47e:	df 93       	push	r29
     480:	ec 01       	movw	r28, r24
     482:	16 2f       	mov	r17, r22
     484:	8c 81       	ldd	r24, Y+4	; 0x04
     486:	9d 81       	ldd	r25, Y+5	; 0x05
     488:	0e 94 db 13 	call	0x27b6	; 0x27b6 <_ZN7TwoWire5beginEv>
     48c:	60 e0       	ldi	r22, 0x00	; 0
     48e:	ce 01       	movw	r24, r28
     490:	c9 df       	rcall	.-110    	; 0x424 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
     492:	80 3a       	cpi	r24, 0xA0	; 160
     494:	79 f0       	breq	.+30     	; 0x4b4 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x3a>
     496:	2f ef       	ldi	r18, 0xFF	; 255
     498:	83 ed       	ldi	r24, 0xD3	; 211
     49a:	90 e3       	ldi	r25, 0x30	; 48
     49c:	21 50       	subi	r18, 0x01	; 1
     49e:	80 40       	sbci	r24, 0x00	; 0
     4a0:	90 40       	sbci	r25, 0x00	; 0
     4a2:	e1 f7       	brne	.-8      	; 0x49c <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x22>
     4a4:	00 c0       	rjmp	.+0      	; 0x4a6 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x2c>
     4a6:	00 00       	nop
     4a8:	60 e0       	ldi	r22, 0x00	; 0
     4aa:	ce 01       	movw	r24, r28
     4ac:	bb df       	rcall	.-138    	; 0x424 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
     4ae:	80 3a       	cpi	r24, 0xA0	; 160
     4b0:	09 f0       	breq	.+2      	; 0x4b4 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x3a>
     4b2:	4b c0       	rjmp	.+150    	; 0x54a <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xd0>
     4b4:	60 e0       	ldi	r22, 0x00	; 0
     4b6:	ce 01       	movw	r24, r28
     4b8:	a6 df       	rcall	.-180    	; 0x406 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
     4ba:	40 e2       	ldi	r20, 0x20	; 32
     4bc:	6f e3       	ldi	r22, 0x3F	; 63
     4be:	ce 01       	movw	r24, r28
     4c0:	78 df       	rcall	.-272    	; 0x3b2 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     4c2:	2f ef       	ldi	r18, 0xFF	; 255
     4c4:	86 e7       	ldi	r24, 0x76	; 118
     4c6:	91 e0       	ldi	r25, 0x01	; 1
     4c8:	21 50       	subi	r18, 0x01	; 1
     4ca:	80 40       	sbci	r24, 0x00	; 0
     4cc:	90 40       	sbci	r25, 0x00	; 0
     4ce:	e1 f7       	brne	.-8      	; 0x4c8 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x4e>
     4d0:	00 c0       	rjmp	.+0      	; 0x4d2 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x58>
     4d2:	00 00       	nop
     4d4:	60 e0       	ldi	r22, 0x00	; 0
     4d6:	ce 01       	movw	r24, r28
     4d8:	a5 df       	rcall	.-182    	; 0x424 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
     4da:	80 3a       	cpi	r24, 0xA0	; 160
     4dc:	39 f0       	breq	.+14     	; 0x4ec <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x72>
     4de:	8f e3       	ldi	r24, 0x3F	; 63
     4e0:	9c e9       	ldi	r25, 0x9C	; 156
     4e2:	01 97       	sbiw	r24, 0x01	; 1
     4e4:	f1 f7       	brne	.-4      	; 0x4e2 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x68>
     4e6:	00 c0       	rjmp	.+0      	; 0x4e8 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x6e>
     4e8:	00 00       	nop
     4ea:	f4 cf       	rjmp	.-24     	; 0x4d4 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x5a>
     4ec:	9f ef       	ldi	r25, 0xFF	; 255
     4ee:	20 e7       	ldi	r18, 0x70	; 112
     4f0:	82 e0       	ldi	r24, 0x02	; 2
     4f2:	91 50       	subi	r25, 0x01	; 1
     4f4:	20 40       	sbci	r18, 0x00	; 0
     4f6:	80 40       	sbci	r24, 0x00	; 0
     4f8:	e1 f7       	brne	.-8      	; 0x4f2 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x78>
     4fa:	00 c0       	rjmp	.+0      	; 0x4fc <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x82>
     4fc:	00 00       	nop
     4fe:	40 e0       	ldi	r20, 0x00	; 0
     500:	6e e3       	ldi	r22, 0x3E	; 62
     502:	ce 01       	movw	r24, r28
     504:	56 df       	rcall	.-340    	; 0x3b2 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     506:	8f e3       	ldi	r24, 0x3F	; 63
     508:	9c e9       	ldi	r25, 0x9C	; 156
     50a:	01 97       	sbiw	r24, 0x01	; 1
     50c:	f1 f7       	brne	.-4      	; 0x50a <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x90>
     50e:	00 c0       	rjmp	.+0      	; 0x510 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x96>
     510:	00 00       	nop
     512:	40 e0       	ldi	r20, 0x00	; 0
     514:	67 e0       	ldi	r22, 0x07	; 7
     516:	ce 01       	movw	r24, r28
     518:	4c df       	rcall	.-360    	; 0x3b2 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     51a:	40 e0       	ldi	r20, 0x00	; 0
     51c:	6f e3       	ldi	r22, 0x3F	; 63
     51e:	ce 01       	movw	r24, r28
     520:	48 df       	rcall	.-368    	; 0x3b2 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
     522:	8f e3       	ldi	r24, 0x3F	; 63
     524:	9c e9       	ldi	r25, 0x9C	; 156
     526:	01 97       	sbiw	r24, 0x01	; 1
     528:	f1 f7       	brne	.-4      	; 0x526 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xac>
     52a:	00 c0       	rjmp	.+0      	; 0x52c <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xb2>
     52c:	00 00       	nop
     52e:	61 2f       	mov	r22, r17
     530:	ce 01       	movw	r24, r28
     532:	69 df       	rcall	.-302    	; 0x406 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
     534:	9f ef       	ldi	r25, 0xFF	; 255
     536:	29 ef       	ldi	r18, 0xF9	; 249
     538:	80 e0       	ldi	r24, 0x00	; 0
     53a:	91 50       	subi	r25, 0x01	; 1
     53c:	20 40       	sbci	r18, 0x00	; 0
     53e:	80 40       	sbci	r24, 0x00	; 0
     540:	e1 f7       	brne	.-8      	; 0x53a <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xc0>
     542:	00 c0       	rjmp	.+0      	; 0x544 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xca>
     544:	00 00       	nop
     546:	81 e0       	ldi	r24, 0x01	; 1
     548:	01 c0       	rjmp	.+2      	; 0x54c <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xd2>
     54a:	80 e0       	ldi	r24, 0x00	; 0
     54c:	df 91       	pop	r29
     54e:	cf 91       	pop	r28
     550:	1f 91       	pop	r17
     552:	08 95       	ret

00000554 <_ZN15Adafruit_BNO0557getTempEv>:
     554:	64 e3       	ldi	r22, 0x34	; 52
     556:	66 cf       	rjmp	.-308    	; 0x424 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
     558:	08 95       	ret

0000055a <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>:
     55a:	cf 92       	push	r12
     55c:	df 92       	push	r13
     55e:	ef 92       	push	r14
     560:	ff 92       	push	r15
     562:	0f 93       	push	r16
     564:	1f 93       	push	r17
     566:	cf 93       	push	r28
     568:	df 93       	push	r29
     56a:	7c 01       	movw	r14, r24
     56c:	c6 2f       	mov	r28, r22
     56e:	6a 01       	movw	r12, r20
     570:	12 2f       	mov	r17, r18
     572:	dc 01       	movw	r26, r24
     574:	13 96       	adiw	r26, 0x03	; 3
     576:	6c 91       	ld	r22, X
     578:	13 97       	sbiw	r26, 0x03	; 3
     57a:	14 96       	adiw	r26, 0x04	; 4
     57c:	8d 91       	ld	r24, X+
     57e:	9c 91       	ld	r25, X
     580:	15 97       	sbiw	r26, 0x05	; 5
     582:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN7TwoWire17beginTransmissionEh>
     586:	f7 01       	movw	r30, r14
     588:	84 81       	ldd	r24, Z+4	; 0x04
     58a:	95 81       	ldd	r25, Z+5	; 0x05
     58c:	dc 01       	movw	r26, r24
     58e:	ed 91       	ld	r30, X+
     590:	fc 91       	ld	r31, X
     592:	01 90       	ld	r0, Z+
     594:	f0 81       	ld	r31, Z
     596:	e0 2d       	mov	r30, r0
     598:	6c 2f       	mov	r22, r28
     59a:	19 95       	eicall
     59c:	f7 01       	movw	r30, r14
     59e:	84 81       	ldd	r24, Z+4	; 0x04
     5a0:	95 81       	ldd	r25, Z+5	; 0x05
     5a2:	0e 94 6f 14 	call	0x28de	; 0x28de <_ZN7TwoWire15endTransmissionEv>
     5a6:	41 2f       	mov	r20, r17
     5a8:	d7 01       	movw	r26, r14
     5aa:	13 96       	adiw	r26, 0x03	; 3
     5ac:	6c 91       	ld	r22, X
     5ae:	13 97       	sbiw	r26, 0x03	; 3
     5b0:	14 96       	adiw	r26, 0x04	; 4
     5b2:	8d 91       	ld	r24, X+
     5b4:	9c 91       	ld	r25, X
     5b6:	15 97       	sbiw	r26, 0x05	; 5
     5b8:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <_ZN7TwoWire11requestFromEhh>
     5bc:	11 23       	and	r17, r17
     5be:	b1 f0       	breq	.+44     	; 0x5ec <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh+0x92>
     5c0:	e6 01       	movw	r28, r12
     5c2:	11 50       	subi	r17, 0x01	; 1
     5c4:	01 2f       	mov	r16, r17
     5c6:	10 e0       	ldi	r17, 0x00	; 0
     5c8:	0f 5f       	subi	r16, 0xFF	; 255
     5ca:	1f 4f       	sbci	r17, 0xFF	; 255
     5cc:	0c 0d       	add	r16, r12
     5ce:	1d 1d       	adc	r17, r13
     5d0:	f7 01       	movw	r30, r14
     5d2:	84 81       	ldd	r24, Z+4	; 0x04
     5d4:	95 81       	ldd	r25, Z+5	; 0x05
     5d6:	dc 01       	movw	r26, r24
     5d8:	ed 91       	ld	r30, X+
     5da:	fc 91       	ld	r31, X
     5dc:	02 84       	ldd	r0, Z+10	; 0x0a
     5de:	f3 85       	ldd	r31, Z+11	; 0x0b
     5e0:	e0 2d       	mov	r30, r0
     5e2:	19 95       	eicall
     5e4:	89 93       	st	Y+, r24
     5e6:	c0 17       	cp	r28, r16
     5e8:	d1 07       	cpc	r29, r17
     5ea:	91 f7       	brne	.-28     	; 0x5d0 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh+0x76>
     5ec:	81 e0       	ldi	r24, 0x01	; 1
     5ee:	df 91       	pop	r29
     5f0:	cf 91       	pop	r28
     5f2:	1f 91       	pop	r17
     5f4:	0f 91       	pop	r16
     5f6:	ff 90       	pop	r15
     5f8:	ef 90       	pop	r14
     5fa:	df 90       	pop	r13
     5fc:	cf 90       	pop	r12
     5fe:	08 95       	ret

00000600 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>:
 *            VECTOR_EULER
 *            VECTOR_LINEARACCEL
 *            VECTOR_GRAVITY]
 *  @return  vector from specified source
 */
AdafruitImu::Vector<3> Adafruit_BNO055::getVector(adafruit_vector_type_t vector_type) {
     600:	af 92       	push	r10
     602:	bf 92       	push	r11
     604:	cf 92       	push	r12
     606:	df 92       	push	r13
     608:	ff 92       	push	r15
     60a:	0f 93       	push	r16
     60c:	1f 93       	push	r17
     60e:	cf 93       	push	r28
     610:	df 93       	push	r29
     612:	00 d0       	rcall	.+0      	; 0x614 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x14>
     614:	00 d0       	rcall	.+0      	; 0x616 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x16>
     616:	cd b7       	in	r28, 0x3d	; 61
     618:	de b7       	in	r29, 0x3e	; 62
     61a:	8c 01       	movw	r16, r24
     61c:	cb 01       	movw	r24, r22
     61e:	f4 2e       	mov	r15, r20
	template <uint8_t N> class Vector
	{
		public:
		Vector()
		{
			memset(p_vec, 0, sizeof(double)*N);
     620:	2c e0       	ldi	r18, 0x0C	; 12
     622:	f8 01       	movw	r30, r16
     624:	11 92       	st	Z+, r1
     626:	2a 95       	dec	r18
     628:	e9 f7       	brne	.-6      	; 0x624 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x24>
  AdafruitImu::Vector<3> xyz;
  uint8_t buffer[6];
  memset(buffer, 0, 6);
     62a:	ae 01       	movw	r20, r28
     62c:	4f 5f       	subi	r20, 0xFF	; 255
     62e:	5f 4f       	sbci	r21, 0xFF	; 255
     630:	26 e0       	ldi	r18, 0x06	; 6
     632:	fa 01       	movw	r30, r20
     634:	11 92       	st	Z+, r1
     636:	2a 95       	dec	r18
     638:	e9 f7       	brne	.-6      	; 0x634 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x34>

  int16_t x, y, z;
  x = y = z = 0;

  /* Read vector data (6 bytes) */
  readLen((adafruit_bno055_reg_t)vector_type, buffer, 6);
     63a:	26 e0       	ldi	r18, 0x06	; 6
     63c:	6f 2d       	mov	r22, r15
     63e:	8d df       	rcall	.-230    	; 0x55a <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>

  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
     640:	6a 81       	ldd	r22, Y+2	; 0x02
     642:	70 e0       	ldi	r23, 0x00	; 0
     644:	76 2f       	mov	r23, r22
     646:	66 27       	eor	r22, r22
     648:	89 81       	ldd	r24, Y+1	; 0x01
     64a:	68 2b       	or	r22, r24
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
     64c:	8c 81       	ldd	r24, Y+4	; 0x04
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	98 2f       	mov	r25, r24
     652:	88 27       	eor	r24, r24
     654:	2b 81       	ldd	r18, Y+3	; 0x03
     656:	6c 01       	movw	r12, r24
     658:	c2 2a       	or	r12, r18
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
     65a:	8e 81       	ldd	r24, Y+6	; 0x06
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	98 2f       	mov	r25, r24
     660:	88 27       	eor	r24, r24
     662:	2d 81       	ldd	r18, Y+5	; 0x05
     664:	5c 01       	movw	r10, r24
     666:	a2 2a       	or	r10, r18

  /*!
   * Convert the value to an appropriate range (section 3.6.4)
   * and assign the value to the Vector type
   */
  switch (vector_type) {
     668:	f4 e1       	ldi	r31, 0x14	; 20
     66a:	ff 16       	cp	r15, r31
     66c:	09 f4       	brne	.+2      	; 0x670 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x70>
     66e:	4a c0       	rjmp	.+148    	; 0x704 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x104>
     670:	ff 15       	cp	r31, r15
     672:	40 f0       	brcs	.+16     	; 0x684 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x84>
     674:	88 e0       	ldi	r24, 0x08	; 8
     676:	f8 16       	cp	r15, r24
     678:	09 f4       	brne	.+2      	; 0x67c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x7c>
     67a:	ac c0       	rjmp	.+344    	; 0x7d4 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x1d4>
     67c:	ee e0       	ldi	r30, 0x0E	; 14
     67e:	fe 16       	cp	r15, r30
     680:	69 f0       	breq	.+26     	; 0x69c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x9c>
     682:	43 c1       	rjmp	.+646    	; 0x90a <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
     684:	f8 e2       	ldi	r31, 0x28	; 40
     686:	ff 16       	cp	r15, r31
     688:	09 f4       	brne	.+2      	; 0x68c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x8c>
     68a:	d8 c0       	rjmp	.+432    	; 0x83c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x23c>
     68c:	8e e2       	ldi	r24, 0x2E	; 46
     68e:	f8 16       	cp	r15, r24
     690:	09 f4       	brne	.+2      	; 0x694 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x94>
     692:	08 c1       	rjmp	.+528    	; 0x8a4 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x2a4>
     694:	ea e1       	ldi	r30, 0x1A	; 26
     696:	fe 12       	cpse	r15, r30
     698:	38 c1       	rjmp	.+624    	; 0x90a <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
     69a:	68 c0       	rjmp	.+208    	; 0x76c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x16c>
  case VECTOR_MAGNETOMETER:
    /* 1uT = 16 LSB */
    xyz[0] = ((double)x) / 16.0;
     69c:	07 2e       	mov	r0, r23
     69e:	00 0c       	add	r0, r0
     6a0:	88 0b       	sbc	r24, r24
     6a2:	99 0b       	sbc	r25, r25
     6a4:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <__floatsisf>
     6a8:	20 e0       	ldi	r18, 0x00	; 0
     6aa:	30 e0       	ldi	r19, 0x00	; 0
     6ac:	40 e8       	ldi	r20, 0x80	; 128
     6ae:	5d e3       	ldi	r21, 0x3D	; 61
     6b0:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <__mulsf3>
     6b4:	f8 01       	movw	r30, r16
     6b6:	60 83       	st	Z, r22
     6b8:	71 83       	std	Z+1, r23	; 0x01
     6ba:	82 83       	std	Z+2, r24	; 0x02
     6bc:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 16.0;
     6be:	b6 01       	movw	r22, r12
     6c0:	dd 0c       	add	r13, r13
     6c2:	88 0b       	sbc	r24, r24
     6c4:	99 0b       	sbc	r25, r25
     6c6:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <__floatsisf>
     6ca:	20 e0       	ldi	r18, 0x00	; 0
     6cc:	30 e0       	ldi	r19, 0x00	; 0
     6ce:	40 e8       	ldi	r20, 0x80	; 128
     6d0:	5d e3       	ldi	r21, 0x3D	; 61
     6d2:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <__mulsf3>
     6d6:	f8 01       	movw	r30, r16
     6d8:	64 83       	std	Z+4, r22	; 0x04
     6da:	75 83       	std	Z+5, r23	; 0x05
     6dc:	86 83       	std	Z+6, r24	; 0x06
     6de:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 16.0;
     6e0:	b5 01       	movw	r22, r10
     6e2:	bb 0c       	add	r11, r11
     6e4:	88 0b       	sbc	r24, r24
     6e6:	99 0b       	sbc	r25, r25
     6e8:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <__floatsisf>
     6ec:	20 e0       	ldi	r18, 0x00	; 0
     6ee:	30 e0       	ldi	r19, 0x00	; 0
     6f0:	40 e8       	ldi	r20, 0x80	; 128
     6f2:	5d e3       	ldi	r21, 0x3D	; 61
     6f4:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <__mulsf3>
     6f8:	f8 01       	movw	r30, r16
     6fa:	60 87       	std	Z+8, r22	; 0x08
     6fc:	71 87       	std	Z+9, r23	; 0x09
     6fe:	82 87       	std	Z+10, r24	; 0x0a
     700:	93 87       	std	Z+11, r25	; 0x0b
    break;
     702:	03 c1       	rjmp	.+518    	; 0x90a <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_GYROSCOPE:
    /* 1dps = 16 LSB */
    xyz[0] = ((double)x) / 16.0;
     704:	07 2e       	mov	r0, r23
     706:	00 0c       	add	r0, r0
     708:	88 0b       	sbc	r24, r24
     70a:	99 0b       	sbc	r25, r25
     70c:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <__floatsisf>
     710:	20 e0       	ldi	r18, 0x00	; 0
     712:	30 e0       	ldi	r19, 0x00	; 0
     714:	40 e8       	ldi	r20, 0x80	; 128
     716:	5d e3       	ldi	r21, 0x3D	; 61
     718:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <__mulsf3>
     71c:	f8 01       	movw	r30, r16
     71e:	60 83       	st	Z, r22
     720:	71 83       	std	Z+1, r23	; 0x01
     722:	82 83       	std	Z+2, r24	; 0x02
     724:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 16.0;
     726:	b6 01       	movw	r22, r12
     728:	dd 0c       	add	r13, r13
     72a:	88 0b       	sbc	r24, r24
     72c:	99 0b       	sbc	r25, r25
     72e:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <__floatsisf>
     732:	20 e0       	ldi	r18, 0x00	; 0
     734:	30 e0       	ldi	r19, 0x00	; 0
     736:	40 e8       	ldi	r20, 0x80	; 128
     738:	5d e3       	ldi	r21, 0x3D	; 61
     73a:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <__mulsf3>
     73e:	f8 01       	movw	r30, r16
     740:	64 83       	std	Z+4, r22	; 0x04
     742:	75 83       	std	Z+5, r23	; 0x05
     744:	86 83       	std	Z+6, r24	; 0x06
     746:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 16.0;
     748:	b5 01       	movw	r22, r10
     74a:	bb 0c       	add	r11, r11
     74c:	88 0b       	sbc	r24, r24
     74e:	99 0b       	sbc	r25, r25
     750:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <__floatsisf>
     754:	20 e0       	ldi	r18, 0x00	; 0
     756:	30 e0       	ldi	r19, 0x00	; 0
     758:	40 e8       	ldi	r20, 0x80	; 128
     75a:	5d e3       	ldi	r21, 0x3D	; 61
     75c:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <__mulsf3>
     760:	f8 01       	movw	r30, r16
     762:	60 87       	std	Z+8, r22	; 0x08
     764:	71 87       	std	Z+9, r23	; 0x09
     766:	82 87       	std	Z+10, r24	; 0x0a
     768:	93 87       	std	Z+11, r25	; 0x0b
    break;
     76a:	cf c0       	rjmp	.+414    	; 0x90a <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_EULER:
    /* 1 degree = 16 LSB */
    xyz[0] = ((double)x) / 16.0;
     76c:	07 2e       	mov	r0, r23
     76e:	00 0c       	add	r0, r0
     770:	88 0b       	sbc	r24, r24
     772:	99 0b       	sbc	r25, r25
     774:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <__floatsisf>
     778:	20 e0       	ldi	r18, 0x00	; 0
     77a:	30 e0       	ldi	r19, 0x00	; 0
     77c:	40 e8       	ldi	r20, 0x80	; 128
     77e:	5d e3       	ldi	r21, 0x3D	; 61
     780:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <__mulsf3>
     784:	f8 01       	movw	r30, r16
     786:	60 83       	st	Z, r22
     788:	71 83       	std	Z+1, r23	; 0x01
     78a:	82 83       	std	Z+2, r24	; 0x02
     78c:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 16.0;
     78e:	b6 01       	movw	r22, r12
     790:	dd 0c       	add	r13, r13
     792:	88 0b       	sbc	r24, r24
     794:	99 0b       	sbc	r25, r25
     796:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <__floatsisf>
     79a:	20 e0       	ldi	r18, 0x00	; 0
     79c:	30 e0       	ldi	r19, 0x00	; 0
     79e:	40 e8       	ldi	r20, 0x80	; 128
     7a0:	5d e3       	ldi	r21, 0x3D	; 61
     7a2:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <__mulsf3>
     7a6:	f8 01       	movw	r30, r16
     7a8:	64 83       	std	Z+4, r22	; 0x04
     7aa:	75 83       	std	Z+5, r23	; 0x05
     7ac:	86 83       	std	Z+6, r24	; 0x06
     7ae:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 16.0;
     7b0:	b5 01       	movw	r22, r10
     7b2:	bb 0c       	add	r11, r11
     7b4:	88 0b       	sbc	r24, r24
     7b6:	99 0b       	sbc	r25, r25
     7b8:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <__floatsisf>
     7bc:	20 e0       	ldi	r18, 0x00	; 0
     7be:	30 e0       	ldi	r19, 0x00	; 0
     7c0:	40 e8       	ldi	r20, 0x80	; 128
     7c2:	5d e3       	ldi	r21, 0x3D	; 61
     7c4:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <__mulsf3>
     7c8:	f8 01       	movw	r30, r16
     7ca:	60 87       	std	Z+8, r22	; 0x08
     7cc:	71 87       	std	Z+9, r23	; 0x09
     7ce:	82 87       	std	Z+10, r24	; 0x0a
     7d0:	93 87       	std	Z+11, r25	; 0x0b
    break;
     7d2:	9b c0       	rjmp	.+310    	; 0x90a <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_ACCELEROMETER:
    /* 1m/s^2 = 100 LSB */
    xyz[0] = ((double)x) / 100.0;
     7d4:	07 2e       	mov	r0, r23
     7d6:	00 0c       	add	r0, r0
     7d8:	88 0b       	sbc	r24, r24
     7da:	99 0b       	sbc	r25, r25
     7dc:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <__floatsisf>
     7e0:	20 e0       	ldi	r18, 0x00	; 0
     7e2:	30 e0       	ldi	r19, 0x00	; 0
     7e4:	48 ec       	ldi	r20, 0xC8	; 200
     7e6:	52 e4       	ldi	r21, 0x42	; 66
     7e8:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <__divsf3>
     7ec:	f8 01       	movw	r30, r16
     7ee:	60 83       	st	Z, r22
     7f0:	71 83       	std	Z+1, r23	; 0x01
     7f2:	82 83       	std	Z+2, r24	; 0x02
     7f4:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 100.0;
     7f6:	b6 01       	movw	r22, r12
     7f8:	dd 0c       	add	r13, r13
     7fa:	88 0b       	sbc	r24, r24
     7fc:	99 0b       	sbc	r25, r25
     7fe:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <__floatsisf>
     802:	20 e0       	ldi	r18, 0x00	; 0
     804:	30 e0       	ldi	r19, 0x00	; 0
     806:	48 ec       	ldi	r20, 0xC8	; 200
     808:	52 e4       	ldi	r21, 0x42	; 66
     80a:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <__divsf3>
     80e:	f8 01       	movw	r30, r16
     810:	64 83       	std	Z+4, r22	; 0x04
     812:	75 83       	std	Z+5, r23	; 0x05
     814:	86 83       	std	Z+6, r24	; 0x06
     816:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 100.0;
     818:	b5 01       	movw	r22, r10
     81a:	bb 0c       	add	r11, r11
     81c:	88 0b       	sbc	r24, r24
     81e:	99 0b       	sbc	r25, r25
     820:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <__floatsisf>
     824:	20 e0       	ldi	r18, 0x00	; 0
     826:	30 e0       	ldi	r19, 0x00	; 0
     828:	48 ec       	ldi	r20, 0xC8	; 200
     82a:	52 e4       	ldi	r21, 0x42	; 66
     82c:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <__divsf3>
     830:	f8 01       	movw	r30, r16
     832:	60 87       	std	Z+8, r22	; 0x08
     834:	71 87       	std	Z+9, r23	; 0x09
     836:	82 87       	std	Z+10, r24	; 0x0a
     838:	93 87       	std	Z+11, r25	; 0x0b
    break;
     83a:	67 c0       	rjmp	.+206    	; 0x90a <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_LINEARACCEL:
    /* 1m/s^2 = 100 LSB */
    xyz[0] = ((double)x) / 100.0;
     83c:	07 2e       	mov	r0, r23
     83e:	00 0c       	add	r0, r0
     840:	88 0b       	sbc	r24, r24
     842:	99 0b       	sbc	r25, r25
     844:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <__floatsisf>
     848:	20 e0       	ldi	r18, 0x00	; 0
     84a:	30 e0       	ldi	r19, 0x00	; 0
     84c:	48 ec       	ldi	r20, 0xC8	; 200
     84e:	52 e4       	ldi	r21, 0x42	; 66
     850:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <__divsf3>
     854:	f8 01       	movw	r30, r16
     856:	60 83       	st	Z, r22
     858:	71 83       	std	Z+1, r23	; 0x01
     85a:	82 83       	std	Z+2, r24	; 0x02
     85c:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 100.0;
     85e:	b6 01       	movw	r22, r12
     860:	dd 0c       	add	r13, r13
     862:	88 0b       	sbc	r24, r24
     864:	99 0b       	sbc	r25, r25
     866:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <__floatsisf>
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	48 ec       	ldi	r20, 0xC8	; 200
     870:	52 e4       	ldi	r21, 0x42	; 66
     872:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <__divsf3>
     876:	f8 01       	movw	r30, r16
     878:	64 83       	std	Z+4, r22	; 0x04
     87a:	75 83       	std	Z+5, r23	; 0x05
     87c:	86 83       	std	Z+6, r24	; 0x06
     87e:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 100.0;
     880:	b5 01       	movw	r22, r10
     882:	bb 0c       	add	r11, r11
     884:	88 0b       	sbc	r24, r24
     886:	99 0b       	sbc	r25, r25
     888:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <__floatsisf>
     88c:	20 e0       	ldi	r18, 0x00	; 0
     88e:	30 e0       	ldi	r19, 0x00	; 0
     890:	48 ec       	ldi	r20, 0xC8	; 200
     892:	52 e4       	ldi	r21, 0x42	; 66
     894:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <__divsf3>
     898:	f8 01       	movw	r30, r16
     89a:	60 87       	std	Z+8, r22	; 0x08
     89c:	71 87       	std	Z+9, r23	; 0x09
     89e:	82 87       	std	Z+10, r24	; 0x0a
     8a0:	93 87       	std	Z+11, r25	; 0x0b
    break;
     8a2:	33 c0       	rjmp	.+102    	; 0x90a <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x30a>
  case VECTOR_GRAVITY:
    /* 1m/s^2 = 100 LSB */
    xyz[0] = ((double)x) / 100.0;
     8a4:	07 2e       	mov	r0, r23
     8a6:	00 0c       	add	r0, r0
     8a8:	88 0b       	sbc	r24, r24
     8aa:	99 0b       	sbc	r25, r25
     8ac:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <__floatsisf>
     8b0:	20 e0       	ldi	r18, 0x00	; 0
     8b2:	30 e0       	ldi	r19, 0x00	; 0
     8b4:	48 ec       	ldi	r20, 0xC8	; 200
     8b6:	52 e4       	ldi	r21, 0x42	; 66
     8b8:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <__divsf3>
     8bc:	f8 01       	movw	r30, r16
     8be:	60 83       	st	Z, r22
     8c0:	71 83       	std	Z+1, r23	; 0x01
     8c2:	82 83       	std	Z+2, r24	; 0x02
     8c4:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 100.0;
     8c6:	b6 01       	movw	r22, r12
     8c8:	dd 0c       	add	r13, r13
     8ca:	88 0b       	sbc	r24, r24
     8cc:	99 0b       	sbc	r25, r25
     8ce:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <__floatsisf>
     8d2:	20 e0       	ldi	r18, 0x00	; 0
     8d4:	30 e0       	ldi	r19, 0x00	; 0
     8d6:	48 ec       	ldi	r20, 0xC8	; 200
     8d8:	52 e4       	ldi	r21, 0x42	; 66
     8da:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <__divsf3>
     8de:	f8 01       	movw	r30, r16
     8e0:	64 83       	std	Z+4, r22	; 0x04
     8e2:	75 83       	std	Z+5, r23	; 0x05
     8e4:	86 83       	std	Z+6, r24	; 0x06
     8e6:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 100.0;
     8e8:	b5 01       	movw	r22, r10
     8ea:	bb 0c       	add	r11, r11
     8ec:	88 0b       	sbc	r24, r24
     8ee:	99 0b       	sbc	r25, r25
     8f0:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <__floatsisf>
     8f4:	20 e0       	ldi	r18, 0x00	; 0
     8f6:	30 e0       	ldi	r19, 0x00	; 0
     8f8:	48 ec       	ldi	r20, 0xC8	; 200
     8fa:	52 e4       	ldi	r21, 0x42	; 66
     8fc:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <__divsf3>
     900:	f8 01       	movw	r30, r16
     902:	60 87       	std	Z+8, r22	; 0x08
     904:	71 87       	std	Z+9, r23	; 0x09
     906:	82 87       	std	Z+10, r24	; 0x0a
     908:	93 87       	std	Z+11, r25	; 0x0b
    break;
  }

  return xyz;
}
     90a:	c8 01       	movw	r24, r16
     90c:	26 96       	adiw	r28, 0x06	; 6
     90e:	0f b6       	in	r0, 0x3f	; 63
     910:	f8 94       	cli
     912:	de bf       	out	0x3e, r29	; 62
     914:	0f be       	out	0x3f, r0	; 63
     916:	cd bf       	out	0x3d, r28	; 61
     918:	df 91       	pop	r29
     91a:	cf 91       	pop	r28
     91c:	1f 91       	pop	r17
     91e:	0f 91       	pop	r16
     920:	ff 90       	pop	r15
     922:	df 90       	pop	r13
     924:	cf 90       	pop	r12
     926:	bf 90       	pop	r11
     928:	af 90       	pop	r10
     92a:	08 95       	ret

0000092c <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>:
/*!
 *  @brief  Reads the sensor and returns the data as a sensors_event_t
 *  @param  event
 *  @return always returns true
 */
bool Adafruit_BNO055::getEvent(sensors_event_t *event) {
     92c:	0f 93       	push	r16
     92e:	1f 93       	push	r17
     930:	cf 93       	push	r28
     932:	df 93       	push	r29
     934:	cd b7       	in	r28, 0x3d	; 61
     936:	de b7       	in	r29, 0x3e	; 62
     938:	2c 97       	sbiw	r28, 0x0c	; 12
     93a:	0f b6       	in	r0, 0x3f	; 63
     93c:	f8 94       	cli
     93e:	de bf       	out	0x3e, r29	; 62
     940:	0f be       	out	0x3f, r0	; 63
     942:	cd bf       	out	0x3d, r28	; 61
     944:	8b 01       	movw	r16, r22
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
     946:	20 e2       	ldi	r18, 0x20	; 32
     948:	fb 01       	movw	r30, r22
     94a:	11 92       	st	Z+, r1
     94c:	2a 95       	dec	r18
     94e:	e9 f7       	brne	.-6      	; 0x94a <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t+0x1e>

  event->version = sizeof(sensors_event_t);
     950:	40 e2       	ldi	r20, 0x20	; 32
     952:	50 e0       	ldi	r21, 0x00	; 0
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	f8 01       	movw	r30, r16
     95a:	40 83       	st	Z, r20
     95c:	51 83       	std	Z+1, r21	; 0x01
     95e:	62 83       	std	Z+2, r22	; 0x02
     960:	73 83       	std	Z+3, r23	; 0x03
  event->sensor_id = _sensorID;
     962:	fc 01       	movw	r30, r24
     964:	46 81       	ldd	r20, Z+6	; 0x06
     966:	57 81       	ldd	r21, Z+7	; 0x07
     968:	60 85       	ldd	r22, Z+8	; 0x08
     96a:	71 85       	ldd	r23, Z+9	; 0x09
     96c:	f8 01       	movw	r30, r16
     96e:	44 83       	std	Z+4, r20	; 0x04
     970:	55 83       	std	Z+5, r21	; 0x05
     972:	66 83       	std	Z+6, r22	; 0x06
     974:	77 83       	std	Z+7, r23	; 0x07
  event->type = SENSOR_TYPE_ORIENTATION;
     976:	43 e0       	ldi	r20, 0x03	; 3
     978:	50 e0       	ldi	r21, 0x00	; 0
     97a:	60 e0       	ldi	r22, 0x00	; 0
     97c:	70 e0       	ldi	r23, 0x00	; 0
     97e:	40 87       	std	Z+8, r20	; 0x08
     980:	51 87       	std	Z+9, r21	; 0x09
     982:	62 87       	std	Z+10, r22	; 0x0a
     984:	73 87       	std	Z+11, r23	; 0x0b
  //event->timestamp = millis();

  /* Get a Euler angle sample for orientation */
  AdafruitImu::Vector<3> euler = getVector(Adafruit_BNO055::VECTOR_EULER);
     986:	4a e1       	ldi	r20, 0x1A	; 26
     988:	bc 01       	movw	r22, r24
     98a:	ce 01       	movw	r24, r28
     98c:	01 96       	adiw	r24, 0x01	; 1
     98e:	38 de       	rcall	.-912    	; 0x600 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
  event->orientation.x = euler.x();
     990:	89 81       	ldd	r24, Y+1	; 0x01
     992:	9a 81       	ldd	r25, Y+2	; 0x02
     994:	ab 81       	ldd	r26, Y+3	; 0x03
     996:	bc 81       	ldd	r27, Y+4	; 0x04
     998:	f8 01       	movw	r30, r16
     99a:	80 8b       	std	Z+16, r24	; 0x10
     99c:	91 8b       	std	Z+17, r25	; 0x11
     99e:	a2 8b       	std	Z+18, r26	; 0x12
     9a0:	b3 8b       	std	Z+19, r27	; 0x13
  event->orientation.y = euler.y();
     9a2:	8d 81       	ldd	r24, Y+5	; 0x05
     9a4:	9e 81       	ldd	r25, Y+6	; 0x06
     9a6:	af 81       	ldd	r26, Y+7	; 0x07
     9a8:	b8 85       	ldd	r27, Y+8	; 0x08
     9aa:	84 8b       	std	Z+20, r24	; 0x14
     9ac:	95 8b       	std	Z+21, r25	; 0x15
     9ae:	a6 8b       	std	Z+22, r26	; 0x16
     9b0:	b7 8b       	std	Z+23, r27	; 0x17
  event->orientation.z = euler.z();
     9b2:	89 85       	ldd	r24, Y+9	; 0x09
     9b4:	9a 85       	ldd	r25, Y+10	; 0x0a
     9b6:	ab 85       	ldd	r26, Y+11	; 0x0b
     9b8:	bc 85       	ldd	r27, Y+12	; 0x0c
     9ba:	80 8f       	std	Z+24, r24	; 0x18
     9bc:	91 8f       	std	Z+25, r25	; 0x19
     9be:	a2 8f       	std	Z+26, r26	; 0x1a
     9c0:	b3 8f       	std	Z+27, r27	; 0x1b

  return true;
}
     9c2:	81 e0       	ldi	r24, 0x01	; 1
     9c4:	2c 96       	adiw	r28, 0x0c	; 12
     9c6:	0f b6       	in	r0, 0x3f	; 63
     9c8:	f8 94       	cli
     9ca:	de bf       	out	0x3e, r29	; 62
     9cc:	0f be       	out	0x3f, r0	; 63
     9ce:	cd bf       	out	0x3d, r28	; 61
     9d0:	df 91       	pop	r29
     9d2:	cf 91       	pop	r28
     9d4:	1f 91       	pop	r17
     9d6:	0f 91       	pop	r16
     9d8:	08 95       	ret

000009da <_Z14RunPingCommandPKhh>:
#include <stddef.h>

uint8_t* const SendDataBuffer = (uint8_t*)(&EtherComm::buffer[2]);

void RunPingCommand(const uint8_t* data, uint8_t len){
  if(len == 1){
     9da:	61 30       	cpi	r22, 0x01	; 1
     9dc:	49 f4       	brne	.+18     	; 0x9f0 <_Z14RunPingCommandPKhh+0x16>
     9de:	fc 01       	movw	r30, r24
    SendDataBuffer[0] = data[0];
     9e0:	80 81       	ld	r24, Z
     9e2:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <__data_end>
     9e6:	f0 91 f7 02 	lds	r31, 0x02F7	; 0x8002f7 <__data_end+0x1>
     9ea:	80 83       	st	Z, r24
    EtherComm::SendCommand(CMD_Ping, 1);
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	bf c6       	rjmp	.+3454   	; 0x176e <_ZN9EtherComm11SendCommandEhh>
     9f0:	08 95       	ret

000009f2 <_Z14RunEchoCommandPKhh>:
  }
}

void RunEchoCommand(const uint8_t* data, uint8_t len){
  uint8_t* index = SendDataBuffer;
     9f2:	40 91 f6 02 	lds	r20, 0x02F6	; 0x8002f6 <__data_end>
     9f6:	30 91 f7 02 	lds	r19, 0x02F7	; 0x8002f7 <__data_end+0x1>
  uint8_t dataLen = len;
  while(len-- > 0){
     9fa:	2f ef       	ldi	r18, 0xFF	; 255
     9fc:	26 0f       	add	r18, r22
     9fe:	66 23       	and	r22, r22
     a00:	41 f0       	breq	.+16     	; 0xa12 <_Z14RunEchoCommandPKhh+0x20>
     a02:	a8 2f       	mov	r26, r24
     a04:	b9 2f       	mov	r27, r25
     a06:	e4 2f       	mov	r30, r20
     a08:	f3 2f       	mov	r31, r19
    *(index++) = *(data++);
     a0a:	8d 91       	ld	r24, X+
     a0c:	81 93       	st	Z+, r24
}

void RunEchoCommand(const uint8_t* data, uint8_t len){
  uint8_t* index = SendDataBuffer;
  uint8_t dataLen = len;
  while(len-- > 0){
     a0e:	21 50       	subi	r18, 0x01	; 1
     a10:	e0 f7       	brcc	.-8      	; 0xa0a <_Z14RunEchoCommandPKhh+0x18>
    *(index++) = *(data++);
  }
  
  EtherComm::SendCommand(CMD_Echo, dataLen);
     a12:	81 e0       	ldi	r24, 0x01	; 1
     a14:	ac c6       	rjmp	.+3416   	; 0x176e <_ZN9EtherComm11SendCommandEhh>
     a16:	08 95       	ret

00000a18 <_Z13RunLedCommandPKhh>:
}
//TODO remove this command from both devices
void RunLedCommand(const uint8_t* data, uint8_t len){
	if(len == 1){
     a18:	61 30       	cpi	r22, 0x01	; 1
     a1a:	51 f4       	brne	.+20     	; 0xa30 <_Z13RunLedCommandPKhh+0x18>
		uint8_t state = *data;
     a1c:	fc 01       	movw	r30, r24
     a1e:	90 81       	ld	r25, Z
		if(state <= 1){
     a20:	92 30       	cpi	r25, 0x02	; 2
     a22:	30 f4       	brcc	.+12     	; 0xa30 <_Z13RunLedCommandPKhh+0x18>
			rov.SetLed(state > 0);
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	91 11       	cpse	r25, r1
     a28:	01 c0       	rjmp	.+2      	; 0xa2c <_Z13RunLedCommandPKhh+0x14>
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	0c 94 c5 14 	jmp	0x298a	; 0x298a <_ZN5Robot6SetLedEb>
     a30:	08 95       	ret

00000a32 <_ZN9EtherComm15CommandReceivedEhPKhh>:
		}
	}
}

void EtherComm::CommandReceived(uint8_t command, const uint8_t* data, uint8_t len){
     a32:	9b 01       	movw	r18, r22
  switch(command){
     a34:	81 30       	cpi	r24, 0x01	; 1
     a36:	51 f0       	breq	.+20     	; 0xa4c <_ZN9EtherComm15CommandReceivedEhPKhh+0x1a>
     a38:	28 f0       	brcs	.+10     	; 0xa44 <_ZN9EtherComm15CommandReceivedEhPKhh+0x12>
     a3a:	82 30       	cpi	r24, 0x02	; 2
     a3c:	59 f0       	breq	.+22     	; 0xa54 <_ZN9EtherComm15CommandReceivedEhPKhh+0x22>
     a3e:	83 30       	cpi	r24, 0x03	; 3
     a40:	69 f0       	breq	.+26     	; 0xa5c <_ZN9EtherComm15CommandReceivedEhPKhh+0x2a>
     a42:	08 95       	ret
    case CMD_Ping: RunPingCommand(data, len); break;
     a44:	64 2f       	mov	r22, r20
     a46:	c9 01       	movw	r24, r18
     a48:	c8 cf       	rjmp	.-112    	; 0x9da <_Z14RunPingCommandPKhh>
     a4a:	08 95       	ret
    case CMD_Echo: RunEchoCommand(data, len); break;
     a4c:	64 2f       	mov	r22, r20
     a4e:	c9 01       	movw	r24, r18
     a50:	d0 cf       	rjmp	.-96     	; 0x9f2 <_Z14RunEchoCommandPKhh>
     a52:	08 95       	ret
	case CMD_Led: RunLedCommand(data, len); break;
     a54:	64 2f       	mov	r22, r20
     a56:	c9 01       	movw	r24, r18
     a58:	df cf       	rjmp	.-66     	; 0xa18 <_Z13RunLedCommandPKhh>
     a5a:	08 95       	ret
	case CMD_UpdateDevice: rov.CommandReceived(data, len); break;
     a5c:	64 2f       	mov	r22, r20
     a5e:	c9 01       	movw	r24, r18
     a60:	0c 94 cb 14 	jmp	0x2996	; 0x2996 <_ZN5Robot15CommandReceivedEPKhh>
     a64:	08 95       	ret

00000a66 <_GLOBAL__sub_I__Z14RunPingCommandPKhh>:
#include "EtherComm.h"
#include "Robot.h"
#include "Commands.h"
#include <stddef.h>

uint8_t* const SendDataBuffer = (uint8_t*)(&EtherComm::buffer[2]);
     a66:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
     a6a:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
     a6e:	02 96       	adiw	r24, 0x02	; 2
     a70:	90 93 f7 02 	sts	0x02F7, r25	; 0x8002f7 <__data_end+0x1>
     a74:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <__data_end>
     a78:	08 95       	ret

00000a7a <_ZL10enableChipv>:
static Register* selectPort;
static uint8_t selectPin;

static void enableChip () {
	//cli();
	SetLow(*selectPort, selectPin); //digitalWrite(selectPin, LOW);
     a7a:	e0 91 fc 02 	lds	r30, 0x02FC	; 0x8002fc <_ZL10selectPort>
     a7e:	f0 91 fd 02 	lds	r31, 0x02FD	; 0x8002fd <_ZL10selectPort+0x1>
     a82:	90 81       	ld	r25, Z
     a84:	80 91 fb 02 	lds	r24, 0x02FB	; 0x8002fb <_ZL9selectPin>
     a88:	80 95       	com	r24
     a8a:	89 23       	and	r24, r25
     a8c:	80 83       	st	Z, r24
     a8e:	08 95       	ret

00000a90 <_ZL11disableChipv>:
}

static void disableChip () {
	SetHigh(*selectPort, selectPin); //digitalWrite(selectPin, HIGH);
     a90:	e0 91 fc 02 	lds	r30, 0x02FC	; 0x8002fc <_ZL10selectPort>
     a94:	f0 91 fd 02 	lds	r31, 0x02FD	; 0x8002fd <_ZL10selectPort+0x1>
     a98:	90 81       	ld	r25, Z
     a9a:	80 91 fb 02 	lds	r24, 0x02FB	; 0x8002fb <_ZL9selectPin>
     a9e:	89 2b       	or	r24, r25
     aa0:	80 83       	st	Z, r24
     aa2:	08 95       	ret

00000aa4 <_ZL6readOphh>:

	SetOutput(csDDR, selectPin);
	disableChip();
}

static uint8_t readOp (uint8_t op, uint8_t address) {
     aa4:	cf 93       	push	r28
     aa6:	df 93       	push	r29
     aa8:	d8 2f       	mov	r29, r24
     aaa:	c6 2f       	mov	r28, r22
    enableChip();
     aac:	e6 df       	rcall	.-52     	; 0xa7a <_ZL10enableChipv>
    SPI.write8(op | (address & ADDR_MASK));
     aae:	8c 2f       	mov	r24, r28
     ab0:	cf 71       	andi	r28, 0x1F	; 31
     ab2:	cd 2b       	or	r28, r29
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     ab4:	ce bd       	out	0x2e, r28	; 46
		asm volatile("nop");
     ab6:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     ab8:	0d b4       	in	r0, 0x2d	; 45
     aba:	07 fe       	sbrs	r0, 7
     abc:	fd cf       	rjmp	.-6      	; 0xab8 <_ZL6readOphh+0x14>
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     abe:	1e bc       	out	0x2e, r1	; 46
		asm volatile("nop");
     ac0:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     ac2:	0d b4       	in	r0, 0x2d	; 45
     ac4:	07 fe       	sbrs	r0, 7
     ac6:	fd cf       	rjmp	.-6      	; 0xac2 <_ZL6readOphh+0x1e>
	}

	//write8, excepts also returns the received byte
	static uint8_t read_write8(uint8_t data){
		write8(data);
		return SPDR;
     ac8:	ce b5       	in	r28, 0x2e	; 46
    uint8_t result = SPI.read_write8(0x00);
    if (address & 0x80)
     aca:	88 23       	and	r24, r24
     acc:	34 f4       	brge	.+12     	; 0xada <_ZL6readOphh+0x36>
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     ace:	1e bc       	out	0x2e, r1	; 46
		asm volatile("nop");
     ad0:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     ad2:	0d b4       	in	r0, 0x2d	; 45
     ad4:	07 fe       	sbrs	r0, 7
     ad6:	fd cf       	rjmp	.-6      	; 0xad2 <_ZL6readOphh+0x2e>
        result = SPI.read_write8(0x00);
    disableChip();
     ad8:	ce b5       	in	r28, 0x2e	; 46
     ada:	da df       	rcall	.-76     	; 0xa90 <_ZL11disableChipv>
    return result;
}
     adc:	8c 2f       	mov	r24, r28
     ade:	df 91       	pop	r29
     ae0:	cf 91       	pop	r28
     ae2:	08 95       	ret

00000ae4 <_ZL7writeOphhh>:

static void writeOp (uint8_t op, uint8_t address, uint8_t data) {
     ae4:	1f 93       	push	r17
     ae6:	cf 93       	push	r28
     ae8:	df 93       	push	r29
     aea:	c8 2f       	mov	r28, r24
     aec:	d6 2f       	mov	r29, r22
     aee:	14 2f       	mov	r17, r20
    enableChip();
     af0:	c4 df       	rcall	.-120    	; 0xa7a <_ZL10enableChipv>
    SPI.write8(op | (address & ADDR_MASK));
     af2:	df 71       	andi	r29, 0x1F	; 31
     af4:	cd 2b       	or	r28, r29
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     af6:	ce bd       	out	0x2e, r28	; 46
		asm volatile("nop");
     af8:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     afa:	0d b4       	in	r0, 0x2d	; 45
     afc:	07 fe       	sbrs	r0, 7
     afe:	fd cf       	rjmp	.-6      	; 0xafa <_ZL7writeOphhh+0x16>
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     b00:	1e bd       	out	0x2e, r17	; 46
		asm volatile("nop");
     b02:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     b04:	0d b4       	in	r0, 0x2d	; 45
     b06:	07 fe       	sbrs	r0, 7
    SPI.write8(data);
    disableChip();
     b08:	fd cf       	rjmp	.-6      	; 0xb04 <_ZL7writeOphhh+0x20>
     b0a:	c2 df       	rcall	.-124    	; 0xa90 <_ZL11disableChipv>
}
     b0c:	df 91       	pop	r29
     b0e:	cf 91       	pop	r28
     b10:	1f 91       	pop	r17
     b12:	08 95       	ret

00000b14 <_ZL7readBufjPh>:

static void readBuf(uint16_t len, uint8_t* data) {
     b14:	0f 93       	push	r16
     b16:	1f 93       	push	r17
     b18:	cf 93       	push	r28
     b1a:	df 93       	push	r29
     b1c:	ec 01       	movw	r28, r24
     b1e:	8b 01       	movw	r16, r22
    enableChip();
     b20:	ac df       	rcall	.-168    	; 0xa7a <_ZL10enableChipv>
    if (len != 0) {
     b22:	20 97       	sbiw	r28, 0x00	; 0
     b24:	99 f0       	breq	.+38     	; 0xb4c <_ZL7readBufjPh+0x38>
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     b26:	8a e3       	ldi	r24, 0x3A	; 58
     b28:	8e bd       	out	0x2e, r24	; 46
		asm volatile("nop");
     b2a:	00 00       	nop
		while(!(SPSR & _BV(SPIF)));
     b2c:	0d b4       	in	r0, 0x2d	; 45
     b2e:	07 fe       	sbrs	r0, 7
     b30:	fd cf       	rjmp	.-6      	; 0xb2c <_ZL7readBufjPh+0x18>
     b32:	f8 01       	movw	r30, r16
     b34:	b8 01       	movw	r22, r16
     b36:	6c 0f       	add	r22, r28
     b38:	7d 1f       	adc	r23, r29
	static void read(void *buf, uint16_t nbyte, uint8_t dataSend = 0){
		if(nbyte == 0) return;
		
		uint8_t* buff = (uint8_t*)buf;
		while(nbyte--){
			SPDR = dataSend;
     b3a:	1e bc       	out	0x2e, r1	; 46
			//asm volatile("nop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\n");
			while(!(SPSR & _BV(SPIF)));
     b3c:	0d b4       	in	r0, 0x2d	; 45
     b3e:	07 fe       	sbrs	r0, 7
     b40:	fd cf       	rjmp	.-6      	; 0xb3c <_ZL7readBufjPh+0x28>
			*buff++ = SPDR;
     b42:	9e b5       	in	r25, 0x2e	; 46
     b44:	91 93       	st	Z+, r25
		
	static void read(void *buf, uint16_t nbyte, uint8_t dataSend = 0){
		if(nbyte == 0) return;
		
		uint8_t* buff = (uint8_t*)buf;
		while(nbyte--){
     b46:	6e 17       	cp	r22, r30
     b48:	7f 07       	cpc	r23, r31
        SPI.write8(ENC28J60_READ_BUF_MEM);
		SPI.read(data, len);
    }
    disableChip();
     b4a:	b9 f7       	brne	.-18     	; 0xb3a <_ZL7readBufjPh+0x26>
     b4c:	a1 df       	rcall	.-190    	; 0xa90 <_ZL11disableChipv>
}
     b4e:	df 91       	pop	r29
     b50:	cf 91       	pop	r28
     b52:	1f 91       	pop	r17
     b54:	0f 91       	pop	r16
     b56:	08 95       	ret

00000b58 <_ZL7SetBankh>:
        SPI.write(data, len);
    }
    disableChip();
}

static void SetBank (uint8_t address) {
     b58:	1f 93       	push	r17
     b5a:	cf 93       	push	r28
     b5c:	df 93       	push	r29
     b5e:	18 2f       	mov	r17, r24
     b60:	10 76       	andi	r17, 0x60	; 96
    if ((address & BANK_MASK) != Enc28j60Bank) {
     b62:	c1 2f       	mov	r28, r17
     b64:	d0 e0       	ldi	r29, 0x00	; 0
     b66:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <_ZL12Enc28j60Bank>
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	c8 17       	cp	r28, r24
     b6e:	d9 07       	cpc	r29, r25
     b70:	a1 f0       	breq	.+40     	; 0xb9a <_ZL7SetBankh+0x42>
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_BSEL1|ECON1_BSEL0);
     b72:	43 e0       	ldi	r20, 0x03	; 3
     b74:	6f e1       	ldi	r22, 0x1F	; 31
     b76:	80 ea       	ldi	r24, 0xA0	; 160
     b78:	b5 df       	rcall	.-150    	; 0xae4 <_ZL7writeOphhh>
        Enc28j60Bank = address & BANK_MASK;
     b7a:	10 93 fe 02 	sts	0x02FE, r17	; 0x8002fe <_ZL12Enc28j60Bank>
        writeOp(ENC28J60_BIT_FIELD_SET, ECON1, Enc28j60Bank>>5);
     b7e:	ae 01       	movw	r20, r28
     b80:	55 95       	asr	r21
     b82:	47 95       	ror	r20
     b84:	55 95       	asr	r21
     b86:	47 95       	ror	r20
     b88:	55 95       	asr	r21
     b8a:	47 95       	ror	r20
     b8c:	55 95       	asr	r21
     b8e:	47 95       	ror	r20
     b90:	55 95       	asr	r21
     b92:	47 95       	ror	r20
     b94:	6f e1       	ldi	r22, 0x1F	; 31
     b96:	80 e8       	ldi	r24, 0x80	; 128
     b98:	a5 df       	rcall	.-182    	; 0xae4 <_ZL7writeOphhh>
    }
}
     b9a:	df 91       	pop	r29
     b9c:	cf 91       	pop	r28
     b9e:	1f 91       	pop	r17
     ba0:	08 95       	ret

00000ba2 <_ZL11readRegByteh>:

static uint8_t readRegByte (uint8_t address) {
     ba2:	cf 93       	push	r28
     ba4:	c8 2f       	mov	r28, r24
    SetBank(address);
     ba6:	d8 df       	rcall	.-80     	; 0xb58 <_ZL7SetBankh>
    return readOp(ENC28J60_READ_CTRL_REG, address);
     ba8:	6c 2f       	mov	r22, r28
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	7b df       	rcall	.-266    	; 0xaa4 <_ZL6readOphh>
}
     bae:	cf 91       	pop	r28
     bb0:	08 95       	ret

00000bb2 <_ZL12writeRegBytehh>:

static void writeRegByte (uint8_t address, uint8_t data) {
     bb2:	cf 93       	push	r28
     bb4:	df 93       	push	r29
     bb6:	c8 2f       	mov	r28, r24
     bb8:	d6 2f       	mov	r29, r22
    SetBank(address);
     bba:	ce df       	rcall	.-100    	; 0xb58 <_ZL7SetBankh>
    writeOp(ENC28J60_WRITE_CTRL_REG, address, data);
     bbc:	4d 2f       	mov	r20, r29
     bbe:	6c 2f       	mov	r22, r28
     bc0:	80 e4       	ldi	r24, 0x40	; 64
     bc2:	90 df       	rcall	.-224    	; 0xae4 <_ZL7writeOphhh>
}
     bc4:	df 91       	pop	r29
     bc6:	cf 91       	pop	r28
     bc8:	08 95       	ret

00000bca <_ZL8writeReghj>:

static void writeReg(uint8_t address, uint16_t data) {
     bca:	cf 93       	push	r28
     bcc:	df 93       	push	r29
     bce:	c8 2f       	mov	r28, r24
     bd0:	d7 2f       	mov	r29, r23
    writeRegByte(address, data);
     bd2:	ef df       	rcall	.-34     	; 0xbb2 <_ZL12writeRegBytehh>
    writeRegByte(address + 1, data >> 8);
     bd4:	6d 2f       	mov	r22, r29
     bd6:	81 e0       	ldi	r24, 0x01	; 1
     bd8:	8c 0f       	add	r24, r28
     bda:	eb df       	rcall	.-42     	; 0xbb2 <_ZL12writeRegBytehh>
}
     bdc:	df 91       	pop	r29
     bde:	cf 91       	pop	r28
     be0:	08 95       	ret

00000be2 <_ZN8ENC28J607initSPIERVh>:
static void disableChip () {
	SetHigh(*selectPort, selectPin); //digitalWrite(selectPin, HIGH);
	//sei();
}

void ENC28J60::initSPI (Register& csDDR) {
     be2:	fc 01       	movw	r30, r24

class SPI{
public:
	static void begin(uint8_t clock = SPI_CLOCK_DIV2){
		//SPI_DIR |= SS;
		SPI_DIR |= SPI_MOSI | SPI_SCK | SPI_SS; //Not sure why, but SS pin requires to be set as output even when not being used.
     be4:	94 b1       	in	r25, 0x04	; 4
     be6:	97 60       	ori	r25, 0x07	; 7
     be8:	94 b9       	out	0x04, r25	; 4
		SPI_DIR &= ~(SPI_MISO);
     bea:	23 98       	cbi	0x04, 3	; 4
		//disableCS();

		SPSR |= (clock >> 2);
     bec:	9d b5       	in	r25, 0x2d	; 45
     bee:	91 60       	ori	r25, 0x01	; 1
     bf0:	9d bd       	out	0x2d, r25	; 45
		SPCR |= _BV(MSTR) | _BV(SPE) | (clock & 0x03);
     bf2:	9c b5       	in	r25, 0x2c	; 44
     bf4:	90 65       	ori	r25, 0x50	; 80
     bf6:	9c bd       	out	0x2c, r25	; 44
	SPI.begin(SPI_CLOCK_DIV2);

	SetOutput(csDDR, selectPin);
     bf8:	80 81       	ld	r24, Z
     bfa:	90 91 fb 02 	lds	r25, 0x02FB	; 0x8002fb <_ZL9selectPin>
     bfe:	98 2b       	or	r25, r24
     c00:	90 83       	st	Z, r25
	disableChip();
     c02:	46 cf       	rjmp	.-372    	; 0xa90 <_ZL11disableChipv>
     c04:	08 95       	ret

00000c06 <_ZN8ENC28J6010initializeEjPKhRVhS3_h>:
    writeReg(MIWR, data);
    while (readRegByte(MISTAT) & MISTAT_BUSY)
        ;
}

uint8_t ENC28J60::initialize (uint16_t size, const uint8_t* macaddr, Register& csDDR, Register& csPort, uint8_t csPin) {
     c06:	0f 93       	push	r16
     c08:	cf 93       	push	r28
     c0a:	df 93       	push	r29
     c0c:	eb 01       	movw	r28, r22
    bufferSize = size;
     c0e:	90 93 00 03 	sts	0x0300, r25	; 0x800300 <_ZN8ENC28J6010bufferSizeE+0x1>
     c12:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <_ZN8ENC28J6010bufferSizeE>
	selectPin = csPin;
     c16:	00 93 fb 02 	sts	0x02FB, r16	; 0x8002fb <_ZL9selectPin>
	selectPort = &csPort;
     c1a:	30 93 fd 02 	sts	0x02FD, r19	; 0x8002fd <_ZL10selectPort+0x1>
     c1e:	20 93 fc 02 	sts	0x02FC, r18	; 0x8002fc <_ZL10selectPort>
    initSPI(csDDR);
     c22:	ca 01       	movw	r24, r20
     c24:	de df       	rcall	.-68     	; 0xbe2 <_ZN8ENC28J607initSPIERVh>

    writeOp(ENC28J60_SOFT_RESET, 0, ENC28J60_SOFT_RESET);
     c26:	4f ef       	ldi	r20, 0xFF	; 255
     c28:	60 e0       	ldi	r22, 0x00	; 0
     c2a:	8f ef       	ldi	r24, 0xFF	; 255
     c2c:	5b df       	rcall	.-330    	; 0xae4 <_ZL7writeOphhh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c2e:	8f e3       	ldi	r24, 0x3F	; 63
     c30:	9f e1       	ldi	r25, 0x1F	; 31
     c32:	01 97       	sbiw	r24, 0x01	; 1
     c34:	f1 f7       	brne	.-4      	; 0xc32 <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0x2c>
     c36:	00 c0       	rjmp	.+0      	; 0xc38 <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0x32>
     c38:	00 00       	nop
	_delay_ms(2);
    while (!readOp(ENC28J60_READ_CTRL_REG, ESTAT) & ESTAT_CLKRDY)
     c3a:	6d e1       	ldi	r22, 0x1D	; 29
     c3c:	80 e0       	ldi	r24, 0x00	; 0
     c3e:	32 df       	rcall	.-412    	; 0xaa4 <_ZL6readOphh>
     c40:	88 23       	and	r24, r24
     c42:	d9 f3       	breq	.-10     	; 0xc3a <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0x34>
        ;

    writeReg(ERXST, RXSTART_INIT);
     c44:	60 e0       	ldi	r22, 0x00	; 0
     c46:	70 e0       	ldi	r23, 0x00	; 0
     c48:	88 e0       	ldi	r24, 0x08	; 8
     c4a:	bf df       	rcall	.-130    	; 0xbca <_ZL8writeReghj>
    writeReg(ERXRDPT, RXSTART_INIT);
     c4c:	60 e0       	ldi	r22, 0x00	; 0
     c4e:	70 e0       	ldi	r23, 0x00	; 0
     c50:	8c e0       	ldi	r24, 0x0C	; 12
     c52:	bb df       	rcall	.-138    	; 0xbca <_ZL8writeReghj>
    writeReg(ERXND, RXSTOP_INIT);
     c54:	6f ef       	ldi	r22, 0xFF	; 255
     c56:	7b e0       	ldi	r23, 0x0B	; 11
     c58:	8a e0       	ldi	r24, 0x0A	; 10
     c5a:	b7 df       	rcall	.-146    	; 0xbca <_ZL8writeReghj>
    writeReg(ETXST, TXSTART_INIT);
     c5c:	60 e0       	ldi	r22, 0x00	; 0
     c5e:	7c e0       	ldi	r23, 0x0C	; 12
     c60:	84 e0       	ldi	r24, 0x04	; 4
     c62:	b3 df       	rcall	.-154    	; 0xbca <_ZL8writeReghj>
    writeReg(ETXND, TXSTOP_INIT);
     c64:	6f ef       	ldi	r22, 0xFF	; 255
     c66:	71 e1       	ldi	r23, 0x11	; 17
     c68:	86 e0       	ldi	r24, 0x06	; 6
     c6a:	af df       	rcall	.-162    	; 0xbca <_ZL8writeReghj>

    writeRegByte(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN|ERXFCON_PMEN|ERXFCON_BCEN);
     c6c:	61 eb       	ldi	r22, 0xB1	; 177
     c6e:	88 e3       	ldi	r24, 0x38	; 56
     c70:	a0 df       	rcall	.-192    	; 0xbb2 <_ZL12writeRegBytehh>
    writeReg(EPMM0, 0x303f);
     c72:	6f e3       	ldi	r22, 0x3F	; 63
     c74:	70 e3       	ldi	r23, 0x30	; 48
     c76:	88 e2       	ldi	r24, 0x28	; 40
     c78:	a8 df       	rcall	.-176    	; 0xbca <_ZL8writeReghj>
    writeReg(EPMCS, 0xf7f9);
     c7a:	69 ef       	ldi	r22, 0xF9	; 249
     c7c:	77 ef       	ldi	r23, 0xF7	; 247
     c7e:	80 e3       	ldi	r24, 0x30	; 48
     c80:	a4 df       	rcall	.-184    	; 0xbca <_ZL8writeReghj>
    writeRegByte(MACON1, MACON1_MARXEN);
     c82:	61 e0       	ldi	r22, 0x01	; 1
     c84:	80 ec       	ldi	r24, 0xC0	; 192
     c86:	95 df       	rcall	.-214    	; 0xbb2 <_ZL12writeRegBytehh>
    writeOp(ENC28J60_BIT_FIELD_SET, MACON3,
            MACON3_PADCFG0|MACON3_TXCRCEN|MACON3_FRMLNEN);
     c88:	42 e3       	ldi	r20, 0x32	; 50
     c8a:	62 ec       	ldi	r22, 0xC2	; 194
     c8c:	80 e8       	ldi	r24, 0x80	; 128
     c8e:	2a df       	rcall	.-428    	; 0xae4 <_ZL7writeOphhh>
    writeReg(MAIPG, 0x0C12);
     c90:	62 e1       	ldi	r22, 0x12	; 18
     c92:	7c e0       	ldi	r23, 0x0C	; 12
     c94:	86 ec       	ldi	r24, 0xC6	; 198
    writeRegByte(MABBIPG, 0x12);
     c96:	99 df       	rcall	.-206    	; 0xbca <_ZL8writeReghj>
     c98:	62 e1       	ldi	r22, 0x12	; 18
     c9a:	84 ec       	ldi	r24, 0xC4	; 196
    writeReg(MAMXFL, MAX_FRAMELEN);
     c9c:	8a df       	rcall	.-236    	; 0xbb2 <_ZL12writeRegBytehh>
     c9e:	6c ed       	ldi	r22, 0xDC	; 220
     ca0:	75 e0       	ldi	r23, 0x05	; 5
    writeRegByte(MAADR5, macaddr[0]);
     ca2:	8a ec       	ldi	r24, 0xCA	; 202
     ca4:	92 df       	rcall	.-220    	; 0xbca <_ZL8writeReghj>
     ca6:	68 81       	ld	r22, Y
    writeRegByte(MAADR4, macaddr[1]);
     ca8:	84 ee       	ldi	r24, 0xE4	; 228
     caa:	83 df       	rcall	.-250    	; 0xbb2 <_ZL12writeRegBytehh>
     cac:	69 81       	ldd	r22, Y+1	; 0x01
    writeRegByte(MAADR3, macaddr[2]);
     cae:	85 ee       	ldi	r24, 0xE5	; 229
     cb0:	80 df       	rcall	.-256    	; 0xbb2 <_ZL12writeRegBytehh>
    writeRegByte(MAADR2, macaddr[3]);
     cb2:	6a 81       	ldd	r22, Y+2	; 0x02
     cb4:	82 ee       	ldi	r24, 0xE2	; 226
     cb6:	7d df       	rcall	.-262    	; 0xbb2 <_ZL12writeRegBytehh>
    writeRegByte(MAADR1, macaddr[4]);
     cb8:	6b 81       	ldd	r22, Y+3	; 0x03
     cba:	83 ee       	ldi	r24, 0xE3	; 227
     cbc:	7a df       	rcall	.-268    	; 0xbb2 <_ZL12writeRegBytehh>
    writeRegByte(MAADR0, macaddr[5]);
     cbe:	6c 81       	ldd	r22, Y+4	; 0x04
     cc0:	80 ee       	ldi	r24, 0xE0	; 224
     cc2:	77 df       	rcall	.-274    	; 0xbb2 <_ZL12writeRegBytehh>
    writeRegByte(MICMD, 0x00);
    return readRegByte(MIRD+1);
}

static void writePhy (uint8_t address, uint16_t data) {
    writeRegByte(MIREGADR, address);
     cc4:	6d 81       	ldd	r22, Y+5	; 0x05
     cc6:	81 ee       	ldi	r24, 0xE1	; 225
     cc8:	74 df       	rcall	.-280    	; 0xbb2 <_ZL12writeRegBytehh>
    writeReg(MIWR, data);
     cca:	60 e1       	ldi	r22, 0x10	; 16
     ccc:	84 ed       	ldi	r24, 0xD4	; 212
     cce:	71 df       	rcall	.-286    	; 0xbb2 <_ZL12writeRegBytehh>
     cd0:	60 e0       	ldi	r22, 0x00	; 0
     cd2:	71 e0       	ldi	r23, 0x01	; 1
    while (readRegByte(MISTAT) & MISTAT_BUSY)
     cd4:	86 ed       	ldi	r24, 0xD6	; 214
     cd6:	79 df       	rcall	.-270    	; 0xbca <_ZL8writeReghj>
     cd8:	8a ee       	ldi	r24, 0xEA	; 234
     cda:	63 df       	rcall	.-314    	; 0xba2 <_ZL11readRegByteh>
     cdc:	80 fd       	sbrc	r24, 0
    writeRegByte(MAADR3, macaddr[2]);
    writeRegByte(MAADR2, macaddr[3]);
    writeRegByte(MAADR1, macaddr[4]);
    writeRegByte(MAADR0, macaddr[5]);
    writePhy(PHCON2, PHCON2_HDLDIS);
    SetBank(ECON1);
     cde:	fc cf       	rjmp	.-8      	; 0xcd8 <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0xd2>
     ce0:	8f e1       	ldi	r24, 0x1F	; 31
     ce2:	3a df       	rcall	.-396    	; 0xb58 <_ZL7SetBankh>
    writeOp(ENC28J60_BIT_FIELD_SET, EIE, EIE_INTIE|EIE_PKTIE);
     ce4:	40 ec       	ldi	r20, 0xC0	; 192
     ce6:	6b e1       	ldi	r22, 0x1B	; 27
     ce8:	80 e8       	ldi	r24, 0x80	; 128
     cea:	fc de       	rcall	.-520    	; 0xae4 <_ZL7writeOphhh>
     cec:	44 e0       	ldi	r20, 0x04	; 4
    writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN);
     cee:	6f e1       	ldi	r22, 0x1F	; 31
     cf0:	80 e8       	ldi	r24, 0x80	; 128
     cf2:	f8 de       	rcall	.-528    	; 0xae4 <_ZL7writeOphhh>
     cf4:	82 e7       	ldi	r24, 0x72	; 114
     cf6:	55 df       	rcall	.-342    	; 0xba2 <_ZL11readRegByteh>

    uint8_t rev = readRegByte(EREVID);
     cf8:	86 30       	cpi	r24, 0x06	; 6
     cfa:	08 f0       	brcs	.+2      	; 0xcfe <_ZN8ENC28J6010initializeEjPKhRVhS3_h+0xf8>
     cfc:	8f 5f       	subi	r24, 0xFF	; 255
    // microchip forgot to step the number on the silicon when they
    // released the revision B7. 6 is now rev B7. We still have
    // to see what they do when they release B8. At the moment
    // there is no B8 out yet
    if (rev > 5) ++rev;
     cfe:	df 91       	pop	r29
     d00:	cf 91       	pop	r28
     d02:	0f 91       	pop	r16
    return rev;
}
     d04:	08 95       	ret

00000d06 <_ZN8ENC28J608isLinkUpEv>:
     d06:	61 e1       	ldi	r22, 0x11	; 17
     d08:	84 ed       	ldi	r24, 0xD4	; 212
     d0a:	53 df       	rcall	.-346    	; 0xbb2 <_ZL12writeRegBytehh>
    writeRegByte(address + 1, data >> 8);
}

static uint16_t readPhyByte (uint8_t address) {
    writeRegByte(MIREGADR, address);
    writeRegByte(MICMD, MICMD_MIIRD);
     d0c:	61 e0       	ldi	r22, 0x01	; 1
     d0e:	82 ed       	ldi	r24, 0xD2	; 210
     d10:	50 df       	rcall	.-352    	; 0xbb2 <_ZL12writeRegBytehh>
    while (readRegByte(MISTAT) & MISTAT_BUSY)
     d12:	8a ee       	ldi	r24, 0xEA	; 234
     d14:	46 df       	rcall	.-372    	; 0xba2 <_ZL11readRegByteh>
     d16:	80 fd       	sbrc	r24, 0
     d18:	fc cf       	rjmp	.-8      	; 0xd12 <_ZN8ENC28J608isLinkUpEv+0xc>
        ;
    writeRegByte(MICMD, 0x00);
     d1a:	60 e0       	ldi	r22, 0x00	; 0
     d1c:	82 ed       	ldi	r24, 0xD2	; 210
     d1e:	49 df       	rcall	.-366    	; 0xbb2 <_ZL12writeRegBytehh>
    return readRegByte(MIRD+1);
     d20:	89 ed       	ldi	r24, 0xD9	; 217
     d22:	3f df       	rcall	.-386    	; 0xba2 <_ZL11readRegByteh>
     d24:	82 fb       	bst	r24, 2
    return rev;
}

bool ENC28J60::isLinkUp() {
    return (readPhyByte(PHSTAT2) >> 2) & 1;
}
     d26:	88 27       	eor	r24, r24
     d28:	80 f9       	bld	r24, 0
     d2a:	08 95       	ret

00000d2c <_ZN8ENC28J6010packetSendEj>:
     d2c:	af 92       	push	r10

struct transmit_status_vector {
    uint8_t bytes[7];
};

void ENC28J60::packetSend(uint16_t len) {
     d2e:	bf 92       	push	r11
     d30:	cf 92       	push	r12
     d32:	df 92       	push	r13
     d34:	ef 92       	push	r14
     d36:	ff 92       	push	r15
     d38:	0f 93       	push	r16
     d3a:	1f 93       	push	r17
     d3c:	cf 93       	push	r28
     d3e:	df 93       	push	r29
     d40:	7c 01       	movw	r14, r24
        writeOp(ENC28J60_BIT_FIELD_CLR, EIR, EIR_TXERIF|EIR_TXIF);

        // prepare new transmission
        if (retry == 0) {
            writeReg(EWRPT, TXSTART_INIT);
            writeReg(ETXND, TXSTART_INIT+len);
     d42:	6c 01       	movw	r12, r24
     d44:	84 ef       	ldi	r24, 0xF4	; 244
     d46:	d8 1a       	sub	r13, r24

	static void write(const void *buf, uint16_t nbyte){
		if(nbyte == 0) return;
		
		const uint8_t* buff = (const uint8_t*)(buf);
		SPDR = *buff;
     d48:	0f 2e       	mov	r0, r31
     d4a:	f1 e0       	ldi	r31, 0x01	; 1
     d4c:	af 2e       	mov	r10, r31
     d4e:	f3 e0       	ldi	r31, 0x03	; 3
     d50:	bf 2e       	mov	r11, r31
     d52:	f0 2d       	mov	r31, r0
     d54:	87 01       	movw	r16, r14
     d56:	0f 5f       	subi	r16, 0xFF	; 255
     d58:	1c 4f       	sbci	r17, 0xFC	; 252
        // the Microchip TCP/IP stack implementation used to first check
        // whether TXERIF is set and only then reset the transmit logic
        // but this has been changed in later versions; possibly they
        // have a reason for this; they don't mention this in the errata
        // sheet
        writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRST);
     d5a:	40 e8       	ldi	r20, 0x80	; 128
     d5c:	6f e1       	ldi	r22, 0x1F	; 31
     d5e:	80 e8       	ldi	r24, 0x80	; 128
     d60:	c1 de       	rcall	.-638    	; 0xae4 <_ZL7writeOphhh>
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRST);
     d62:	40 e8       	ldi	r20, 0x80	; 128
     d64:	6f e1       	ldi	r22, 0x1F	; 31
     d66:	80 ea       	ldi	r24, 0xA0	; 160
     d68:	bd de       	rcall	.-646    	; 0xae4 <_ZL7writeOphhh>
        writeOp(ENC28J60_BIT_FIELD_CLR, EIR, EIR_TXERIF|EIR_TXIF);
     d6a:	4a e0       	ldi	r20, 0x0A	; 10
     d6c:	6c e1       	ldi	r22, 0x1C	; 28
     d6e:	80 ea       	ldi	r24, 0xA0	; 160
     d70:	b9 de       	rcall	.-654    	; 0xae4 <_ZL7writeOphhh>

        // prepare new transmission
        if (retry == 0) {
            writeReg(EWRPT, TXSTART_INIT);
     d72:	60 e0       	ldi	r22, 0x00	; 0
     d74:	7c e0       	ldi	r23, 0x0C	; 12
     d76:	82 e0       	ldi	r24, 0x02	; 2
            writeReg(ETXND, TXSTART_INIT+len);
     d78:	28 df       	rcall	.-432    	; 0xbca <_ZL8writeReghj>
     d7a:	b6 01       	movw	r22, r12
     d7c:	86 e0       	ldi	r24, 0x06	; 6
            writeOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
     d7e:	25 df       	rcall	.-438    	; 0xbca <_ZL8writeReghj>
     d80:	40 e0       	ldi	r20, 0x00	; 0
     d82:	60 e0       	ldi	r22, 0x00	; 0
     d84:	8a e7       	ldi	r24, 0x7A	; 122
     d86:	ae de       	rcall	.-676    	; 0xae4 <_ZL7writeOphhh>
    }
    disableChip();
}

static void writeBuf(uint16_t len, const uint8_t* data) {
    enableChip();
     d88:	78 de       	rcall	.-784    	; 0xa7a <_ZL10enableChipv>
     d8a:	e1 14       	cp	r14, r1
    if (len != 0) {
     d8c:	f1 04       	cpc	r15, r1
     d8e:	e1 f0       	breq	.+56     	; 0xdc8 <_ZN8ENC28J6010packetSendEj+0x9c>
     d90:	8a e7       	ldi	r24, 0x7A	; 122
	}

	//Write SPI assuming CS is low, meaning the device is selected.
	static void write8(uint8_t data){
		//enableCS();
		SPDR = data;
     d92:	8e bd       	out	0x2e, r24	; 46
     d94:	00 00       	nop
		asm volatile("nop");
     d96:	0d b4       	in	r0, 0x2d	; 45
		while(!(SPSR & _BV(SPIF)));
     d98:	07 fe       	sbrs	r0, 7
     d9a:	fd cf       	rjmp	.-6      	; 0xd96 <_ZN8ENC28J6010packetSendEj+0x6a>
     d9c:	f5 01       	movw	r30, r10

	static void write(const void *buf, uint16_t nbyte){
		if(nbyte == 0) return;
		
		const uint8_t* buff = (const uint8_t*)(buf);
		SPDR = *buff;
     d9e:	80 81       	ld	r24, Z
     da0:	8e bd       	out	0x2e, r24	; 46
     da2:	f1 e0       	ldi	r31, 0x01	; 1
		while(--nbyte){
     da4:	ef 16       	cp	r14, r31
     da6:	f1 04       	cpc	r15, r1
     da8:	59 f0       	breq	.+22     	; 0xdc0 <_ZN8ENC28J6010packetSendEj+0x94>
     daa:	e2 e0       	ldi	r30, 0x02	; 2
     dac:	f3 e0       	ldi	r31, 0x03	; 3
     dae:	00 00       	nop
			asm volatile("nop");
     db0:	0d b4       	in	r0, 0x2d	; 45
			while (!(SPSR & _BV(SPIF))) ;
     db2:	07 fe       	sbrs	r0, 7
     db4:	fd cf       	rjmp	.-6      	; 0xdb0 <_ZN8ENC28J6010packetSendEj+0x84>
     db6:	81 91       	ld	r24, Z+
			SPDR = *++buff;
     db8:	8e bd       	out	0x2e, r24	; 46
     dba:	e0 17       	cp	r30, r16
	static void write(const void *buf, uint16_t nbyte){
		if(nbyte == 0) return;
		
		const uint8_t* buff = (const uint8_t*)(buf);
		SPDR = *buff;
		while(--nbyte){
     dbc:	f1 07       	cpc	r31, r17
     dbe:	b9 f7       	brne	.-18     	; 0xdae <_ZN8ENC28J6010packetSendEj+0x82>
			asm volatile("nop");
			while (!(SPSR & _BV(SPIF))) ;
			SPDR = *++buff;
		}
		asm volatile("nop");
     dc0:	00 00       	nop
		while (!(SPSR & _BV(SPIF))) ;
     dc2:	0d b4       	in	r0, 0x2d	; 45
     dc4:	07 fe       	sbrs	r0, 7
        SPI.write8(ENC28J60_WRITE_BUF_MEM);

        SPI.write(data, len);
    }
    disableChip();
     dc6:	fd cf       	rjmp	.-6      	; 0xdc2 <_ZN8ENC28J6010packetSendEj+0x96>
            writeOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
            writeBuf(len, buffer);
        }

        // initiate transmission
        writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
     dc8:	63 de       	rcall	.-826    	; 0xa90 <_ZL11disableChipv>
     dca:	48 e0       	ldi	r20, 0x08	; 8
     dcc:	6f e1       	ldi	r22, 0x1F	; 31
     dce:	80 e8       	ldi	r24, 0x80	; 128
     dd0:	89 de       	rcall	.-750    	; 0xae4 <_ZL7writeOphhh>
        // wait until transmission has finished; referring to the data sheet and
        // to the errata (Errata Issue 13; Example 1) you only need to wait until either
        // TXIF or TXERIF gets set; however this leads to hangs; apparently Microchip
        // realized this and in later implementations of their tcp/ip stack they introduced
        // a counter to avoid hangs; of course they didn't update the errata sheet
        uint16_t count = 0;
     dd2:	c0 e0       	ldi	r28, 0x00	; 0
     dd4:	d0 e0       	ldi	r29, 0x00	; 0
        while ((readRegByte(EIR) & (EIR_TXIF | EIR_TXERIF)) == 0 && ++count < 1000U)
     dd6:	8c e1       	ldi	r24, 0x1C	; 28
     dd8:	e4 de       	rcall	.-568    	; 0xba2 <_ZL11readRegByteh>
     dda:	8a 70       	andi	r24, 0x0A	; 10
     ddc:	31 f4       	brne	.+12     	; 0xdea <_ZN8ENC28J6010packetSendEj+0xbe>
     dde:	21 96       	adiw	r28, 0x01	; 1
     de0:	c8 3e       	cpi	r28, 0xE8	; 232
     de2:	83 e0       	ldi	r24, 0x03	; 3
     de4:	d8 07       	cpc	r29, r24
     de6:	b9 f7       	brne	.-18     	; 0xdd6 <_ZN8ENC28J6010packetSendEj+0xaa>
     de8:	0c c0       	rjmp	.+24     	; 0xe02 <_ZN8ENC28J6010packetSendEj+0xd6>
            ;

        if (!(readRegByte(EIR) & EIR_TXERIF) && count < 1000U) {
     dea:	8c e1       	ldi	r24, 0x1C	; 28
     dec:	da de       	rcall	.-588    	; 0xba2 <_ZL11readRegByteh>
     dee:	81 fd       	sbrc	r24, 1
     df0:	03 c0       	rjmp	.+6      	; 0xdf8 <_ZN8ENC28J6010packetSendEj+0xcc>
     df2:	c8 3e       	cpi	r28, 0xE8	; 232
     df4:	d3 40       	sbci	r29, 0x03	; 3
            // no error; start new transmission
            break;
        }

        // cancel previous transmission if stuck
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRTS);
     df6:	40 f0       	brcs	.+16     	; 0xe08 <_ZN8ENC28J6010packetSendEj+0xdc>
     df8:	48 e0       	ldi	r20, 0x08	; 8
     dfa:	6f e1       	ldi	r22, 0x1F	; 31
     dfc:	80 ea       	ldi	r24, 0xA0	; 160
     dfe:	72 de       	rcall	.-796    	; 0xae4 <_ZL7writeOphhh>
};

void ENC28J60::packetSend(uint16_t len) {
    uint8_t retry = 0;

    while (1) {
     e00:	ac cf       	rjmp	.-168    	; 0xd5a <_ZN8ENC28J6010packetSendEj+0x2e>
        // a counter to avoid hangs; of course they didn't update the errata sheet
        uint16_t count = 0;
        while ((readRegByte(EIR) & (EIR_TXIF | EIR_TXERIF)) == 0 && ++count < 1000U)
            ;

        if (!(readRegByte(EIR) & EIR_TXERIF) && count < 1000U) {
     e02:	8c e1       	ldi	r24, 0x1C	; 28
     e04:	ce de       	rcall	.-612    	; 0xba2 <_ZL11readRegByteh>
     e06:	f8 cf       	rjmp	.-16     	; 0xdf8 <_ZN8ENC28J6010packetSendEj+0xcc>
     e08:	df 91       	pop	r29
        }

        // cancel previous transmission if stuck
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRTS);
    }
}
     e0a:	cf 91       	pop	r28
     e0c:	1f 91       	pop	r17
     e0e:	0f 91       	pop	r16
     e10:	ff 90       	pop	r15
     e12:	ef 90       	pop	r14
     e14:	df 90       	pop	r13
     e16:	cf 90       	pop	r12
     e18:	bf 90       	pop	r11
     e1a:	af 90       	pop	r10
     e1c:	08 95       	ret

00000e1e <_ZN8ENC28J6013packetReceiveEv>:
     e1e:	0f 93       	push	r16


uint16_t ENC28J60::packetReceive() {
     e20:	1f 93       	push	r17
     e22:	cf 93       	push	r28
     e24:	df 93       	push	r29
     e26:	00 d0       	rcall	.+0      	; 0xe28 <_ZN8ENC28J6013packetReceiveEv+0xa>
     e28:	00 d0       	rcall	.+0      	; 0xe2a <_ZN8ENC28J6013packetReceiveEv+0xc>
     e2a:	cd b7       	in	r28, 0x3d	; 61
     e2c:	de b7       	in	r29, 0x3e	; 62
    static uint16_t gNextPacketPtr = RXSTART_INIT;
    static bool     unreleasedPacket = false;
    uint16_t len = 0;

    if (unreleasedPacket) {
     e2e:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <_ZZN8ENC28J6013packetReceiveEvE16unreleasedPacket>
     e32:	88 23       	and	r24, r24
     e34:	91 f0       	breq	.+36     	; 0xe5a <_ZN8ENC28J6013packetReceiveEv+0x3c>
        if (gNextPacketPtr == 0)
     e36:	60 91 f8 02 	lds	r22, 0x02F8	; 0x8002f8 <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr>
     e3a:	70 91 f9 02 	lds	r23, 0x02F9	; 0x8002f9 <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr+0x1>
     e3e:	61 15       	cp	r22, r1
     e40:	71 05       	cpc	r23, r1
     e42:	29 f4       	brne	.+10     	; 0xe4e <_ZN8ENC28J6013packetReceiveEv+0x30>
            writeReg(ERXRDPT, RXSTOP_INIT);
     e44:	6f ef       	ldi	r22, 0xFF	; 255
     e46:	7b e0       	ldi	r23, 0x0B	; 11
     e48:	8c e0       	ldi	r24, 0x0C	; 12
     e4a:	bf de       	rcall	.-642    	; 0xbca <_ZL8writeReghj>
     e4c:	04 c0       	rjmp	.+8      	; 0xe56 <_ZN8ENC28J6013packetReceiveEv+0x38>
        else
            writeReg(ERXRDPT, gNextPacketPtr - 1);
     e4e:	61 50       	subi	r22, 0x01	; 1
     e50:	71 09       	sbc	r23, r1
     e52:	8c e0       	ldi	r24, 0x0C	; 12
     e54:	ba de       	rcall	.-652    	; 0xbca <_ZL8writeReghj>
        unreleasedPacket = false;
     e56:	10 92 fa 02 	sts	0x02FA, r1	; 0x8002fa <_ZZN8ENC28J6013packetReceiveEvE16unreleasedPacket>
    }

    if (readRegByte(EPKTCNT) > 0) {
     e5a:	89 e3       	ldi	r24, 0x39	; 57
     e5c:	a2 de       	rcall	.-700    	; 0xba2 <_ZL11readRegByteh>
     e5e:	88 23       	and	r24, r24
     e60:	a9 f1       	breq	.+106    	; 0xecc <_ZN8ENC28J6013packetReceiveEv+0xae>
        writeReg(ERDPT, gNextPacketPtr);
     e62:	60 91 f8 02 	lds	r22, 0x02F8	; 0x8002f8 <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr>
     e66:	70 91 f9 02 	lds	r23, 0x02F9	; 0x8002f9 <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr+0x1>
     e6a:	80 e0       	ldi	r24, 0x00	; 0
     e6c:	ae de       	rcall	.-676    	; 0xbca <_ZL8writeReghj>
            uint16_t nextPacket;
            uint16_t byteCount;
            uint16_t status;
        } header;

        readBuf(sizeof header, (uint8_t*) &header);
     e6e:	be 01       	movw	r22, r28
     e70:	6f 5f       	subi	r22, 0xFF	; 255
     e72:	7f 4f       	sbci	r23, 0xFF	; 255
     e74:	86 e0       	ldi	r24, 0x06	; 6
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	4d de       	rcall	.-870    	; 0xb14 <_ZL7readBufjPh>

        gNextPacketPtr  = header.nextPacket;
     e7a:	89 81       	ldd	r24, Y+1	; 0x01
     e7c:	9a 81       	ldd	r25, Y+2	; 0x02
     e7e:	90 93 f9 02 	sts	0x02F9, r25	; 0x8002f9 <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr+0x1>
     e82:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <_ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr>
        len = header.byteCount - 4; //remove the CRC count
        if (len>bufferSize-1)
            len=bufferSize-1;
        if ((header.status & 0x80)==0)
     e86:	8d 81       	ldd	r24, Y+5	; 0x05
     e88:	87 ff       	sbrs	r24, 7
     e8a:	12 c0       	rjmp	.+36     	; 0xeb0 <_ZN8ENC28J6013packetReceiveEv+0x92>

        readBuf(sizeof header, (uint8_t*) &header);

        gNextPacketPtr  = header.nextPacket;
        len = header.byteCount - 4; //remove the CRC count
        if (len>bufferSize-1)
     e8c:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <_ZN8ENC28J6010bufferSizeE>
     e90:	90 91 00 03 	lds	r25, 0x0300	; 0x800300 <_ZN8ENC28J6010bufferSizeE+0x1>
     e94:	01 97       	sbiw	r24, 0x01	; 1
        } header;

        readBuf(sizeof header, (uint8_t*) &header);

        gNextPacketPtr  = header.nextPacket;
        len = header.byteCount - 4; //remove the CRC count
     e96:	0b 81       	ldd	r16, Y+3	; 0x03
     e98:	1c 81       	ldd	r17, Y+4	; 0x04
     e9a:	04 50       	subi	r16, 0x04	; 4
     e9c:	11 09       	sbc	r17, r1
     e9e:	80 17       	cp	r24, r16
     ea0:	91 07       	cpc	r25, r17
     ea2:	08 f4       	brcc	.+2      	; 0xea6 <_ZN8ENC28J6013packetReceiveEv+0x88>
        if (len>bufferSize-1)
            len=bufferSize-1;
        if ((header.status & 0x80)==0)
            len = 0;
        else
            readBuf(len, buffer);
     ea4:	8c 01       	movw	r16, r24
     ea6:	61 e0       	ldi	r22, 0x01	; 1
     ea8:	73 e0       	ldi	r23, 0x03	; 3
     eaa:	c8 01       	movw	r24, r16
     eac:	33 de       	rcall	.-922    	; 0xb14 <_ZL7readBufjPh>
     eae:	02 c0       	rjmp	.+4      	; 0xeb4 <_ZN8ENC28J6013packetReceiveEv+0x96>
        gNextPacketPtr  = header.nextPacket;
        len = header.byteCount - 4; //remove the CRC count
        if (len>bufferSize-1)
            len=bufferSize-1;
        if ((header.status & 0x80)==0)
            len = 0;
     eb0:	00 e0       	ldi	r16, 0x00	; 0
     eb2:	10 e0       	ldi	r17, 0x00	; 0
        else
            readBuf(len, buffer);
        buffer[len] = 0;
     eb4:	f8 01       	movw	r30, r16
     eb6:	ef 5f       	subi	r30, 0xFF	; 255
     eb8:	fc 4f       	sbci	r31, 0xFC	; 252
     eba:	10 82       	st	Z, r1
        unreleasedPacket = true;
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <_ZZN8ENC28J6013packetReceiveEvE16unreleasedPacket>

        writeOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
     ec2:	40 e4       	ldi	r20, 0x40	; 64
     ec4:	6e e1       	ldi	r22, 0x1E	; 30
     ec6:	80 e8       	ldi	r24, 0x80	; 128
     ec8:	0d de       	rcall	.-998    	; 0xae4 <_ZL7writeOphhh>
     eca:	02 c0       	rjmp	.+4      	; 0xed0 <_ZN8ENC28J6013packetReceiveEv+0xb2>


uint16_t ENC28J60::packetReceive() {
    static uint16_t gNextPacketPtr = RXSTART_INIT;
    static bool     unreleasedPacket = false;
    uint16_t len = 0;
     ecc:	00 e0       	ldi	r16, 0x00	; 0
     ece:	10 e0       	ldi	r17, 0x00	; 0
        unreleasedPacket = true;

        writeOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
    }
    return len;
}
     ed0:	c8 01       	movw	r24, r16
     ed2:	26 96       	adiw	r28, 0x06	; 6
     ed4:	0f b6       	in	r0, 0x3f	; 63
     ed6:	f8 94       	cli
     ed8:	de bf       	out	0x3e, r29	; 62
     eda:	0f be       	out	0x3f, r0	; 63
     edc:	cd bf       	out	0x3d, r28	; 61
     ede:	df 91       	pop	r29
     ee0:	cf 91       	pop	r28
     ee2:	1f 91       	pop	r17
     ee4:	0f 91       	pop	r16
     ee6:	08 95       	ret

00000ee8 <_ZN9EtherCard5beginEPKhRVhS3_h>:
uint16_t EtherCard::delaycnt = 0; //request gateway ARP lookup

uint8_t Ethernet::buffer[ETHER_CARD_BUFFER_SIZE]; // tcp/ip send and receive buffer

uint8_t EtherCard::begin (const uint8_t* macaddr,
                          Register& csDDR, Register& csPort, uint8_t csPin) {
     ee8:	ef 92       	push	r14
     eea:	ff 92       	push	r15
     eec:	0f 93       	push	r16
     eee:	cf 93       	push	r28
     ef0:	df 93       	push	r29
     ef2:	eb 01       	movw	r28, r22
     ef4:	7a 01       	movw	r14, r20
     ef6:	02 2f       	mov	r16, r18

    copyMac(mymac, macaddr);
     ef8:	bc 01       	movw	r22, r24
     efa:	8b e1       	ldi	r24, 0x1B	; 27
     efc:	95 e0       	ldi	r25, 0x05	; 5
     efe:	c9 d3       	rcall	.+1938   	; 0x1692 <_ZN9EtherCard7copyMacEPhPKh>
    return initialize(ETHER_CARD_BUFFER_SIZE, mymac, csDDR, csPort, csPin);
     f00:	97 01       	movw	r18, r14
     f02:	ae 01       	movw	r20, r28
     f04:	6b e1       	ldi	r22, 0x1B	; 27
     f06:	75 e0       	ldi	r23, 0x05	; 5
     f08:	80 e0       	ldi	r24, 0x00	; 0
     f0a:	92 e0       	ldi	r25, 0x02	; 2
     f0c:	7c de       	rcall	.-776    	; 0xc06 <_ZN8ENC28J6010initializeEjPKhRVhS3_h>
}
     f0e:	df 91       	pop	r29
     f10:	cf 91       	pop	r28
     f12:	0f 91       	pop	r16
     f14:	ff 90       	pop	r15
     f16:	ef 90       	pop	r14
     f18:	08 95       	ret

00000f1a <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_>:

bool EtherCard::staticSetup (const uint8_t* my_ip,
                             const uint8_t* gw_ip,
                             const uint8_t* dns_ip,
                             const uint8_t* mask) {
     f1a:	ef 92       	push	r14
     f1c:	ff 92       	push	r15
     f1e:	0f 93       	push	r16
     f20:	1f 93       	push	r17
     f22:	cf 93       	push	r28
     f24:	df 93       	push	r29
     f26:	7b 01       	movw	r14, r22
     f28:	8a 01       	movw	r16, r20
     f2a:	e9 01       	movw	r28, r18

    if (my_ip != 0)
     f2c:	00 97       	sbiw	r24, 0x00	; 0
     f2e:	21 f0       	breq	.+8      	; 0xf38 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x1e>
        copyIp(myip, my_ip);
     f30:	bc 01       	movw	r22, r24
     f32:	87 e1       	ldi	r24, 0x17	; 23
     f34:	95 e0       	ldi	r25, 0x05	; 5
     f36:	a0 d3       	rcall	.+1856   	; 0x1678 <_ZN9EtherCard6copyIpEPhPKh>
    if (gw_ip != 0)
     f38:	e1 14       	cp	r14, r1
     f3a:	f1 04       	cpc	r15, r1
     f3c:	11 f0       	breq	.+4      	; 0xf42 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x28>
        setGwIp(gw_ip);
     f3e:	c7 01       	movw	r24, r14
     f40:	bd d1       	rcall	.+890    	; 0x12bc <_ZN9EtherCard7setGwIpEPKh>
    if (dns_ip != 0)
     f42:	01 15       	cp	r16, r1
     f44:	11 05       	cpc	r17, r1
     f46:	21 f0       	breq	.+8      	; 0xf50 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x36>
        copyIp(dnsip, dns_ip);
     f48:	b8 01       	movw	r22, r16
     f4a:	87 e0       	ldi	r24, 0x07	; 7
     f4c:	95 e0       	ldi	r25, 0x05	; 5
     f4e:	94 d3       	rcall	.+1832   	; 0x1678 <_ZN9EtherCard6copyIpEPhPKh>
    if(mask != 0)
     f50:	20 97       	sbiw	r28, 0x00	; 0
     f52:	21 f0       	breq	.+8      	; 0xf5c <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x42>
        copyIp(netmask, mask);
     f54:	be 01       	movw	r22, r28
     f56:	83 e1       	ldi	r24, 0x13	; 19
     f58:	95 e0       	ldi	r25, 0x05	; 5
    updateBroadcastAddress();
     f5a:	8e d3       	rcall	.+1820   	; 0x1678 <_ZN9EtherCard6copyIpEPhPKh>
     f5c:	bb d1       	rcall	.+886    	; 0x12d4 <_ZN9EtherCard22updateBroadcastAddressEv>
    delaycnt = 0; //request gateway ARP lookup
     f5e:	10 92 02 05 	sts	0x0502, r1	; 0x800502 <_ZN9EtherCard8delaycntE+0x1>
     f62:	10 92 01 05 	sts	0x0501, r1	; 0x800501 <_ZN9EtherCard8delaycntE>
    return true;
}
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	df 91       	pop	r29
     f6a:	cf 91       	pop	r28
     f6c:	1f 91       	pop	r17
     f6e:	0f 91       	pop	r16
     f70:	ff 90       	pop	r15
     f72:	ef 90       	pop	r14
     f74:	08 95       	ret

00000f76 <_ZL13fill_checksumhhjh>:
    for(uint8_t i=0; i<IP_LEN; i++)
        broadcastip[i] = myip[i] | ~netmask[i];
}

void EtherCard::registerPingCallback (void (*callback)(uint8_t *srcip)) {
    icmp_cb = callback;
     f76:	cf 92       	push	r12
     f78:	df 92       	push	r13
     f7a:	ef 92       	push	r14
     f7c:	ff 92       	push	r15
     f7e:	cf 93       	push	r28
     f80:	df 93       	push	r29
     f82:	c6 2f       	mov	r28, r22
     f84:	d0 e0       	ldi	r29, 0x00	; 0
     f86:	cf 5f       	subi	r28, 0xFF	; 255
     f88:	dc 4f       	sbci	r29, 0xFC	; 252
     f8a:	21 30       	cpi	r18, 0x01	; 1
     f8c:	81 f4       	brne	.+32     	; 0xfae <_ZL13fill_checksumhhjh+0x38>
     f8e:	6a 01       	movw	r12, r20
     f90:	99 e0       	ldi	r25, 0x09	; 9
     f92:	c9 0e       	add	r12, r25
     f94:	d1 1c       	adc	r13, r1
     f96:	e1 2c       	mov	r14, r1
     f98:	f1 2c       	mov	r15, r1
     f9a:	03 c0       	rjmp	.+6      	; 0xfa2 <_ZL13fill_checksumhhjh+0x2c>
     f9c:	c1 2c       	mov	r12, r1
     f9e:	d1 2c       	mov	r13, r1
     fa0:	76 01       	movw	r14, r12
     fa2:	42 30       	cpi	r20, 0x02	; 2
     fa4:	51 05       	cpc	r21, r1
     fa6:	28 f1       	brcs	.+74     	; 0xff2 <_ZL13fill_checksumhhjh+0x7c>
     fa8:	fe 01       	movw	r30, r28
     faa:	da 01       	movw	r26, r20
     fac:	09 c0       	rjmp	.+18     	; 0xfc0 <_ZL13fill_checksumhhjh+0x4a>
     fae:	22 30       	cpi	r18, 0x02	; 2
     fb0:	a9 f7       	brne	.-22     	; 0xf9c <_ZL13fill_checksumhhjh+0x26>
     fb2:	6a 01       	movw	r12, r20
     fb4:	92 e0       	ldi	r25, 0x02	; 2
     fb6:	c9 1a       	sub	r12, r25
     fb8:	d1 08       	sbc	r13, r1
     fba:	e1 2c       	mov	r14, r1
     fbc:	f1 2c       	mov	r15, r1
     fbe:	f1 cf       	rjmp	.-30     	; 0xfa2 <_ZL13fill_checksumhhjh+0x2c>
     fc0:	20 81       	ld	r18, Z
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	32 2f       	mov	r19, r18
     fc6:	22 27       	eor	r18, r18
     fc8:	91 81       	ldd	r25, Z+1	; 0x01
     fca:	29 2b       	or	r18, r25
     fcc:	c2 0e       	add	r12, r18
     fce:	d3 1e       	adc	r13, r19
     fd0:	e1 1c       	adc	r14, r1
     fd2:	f1 1c       	adc	r15, r1
     fd4:	32 96       	adiw	r30, 0x02	; 2
     fd6:	12 97       	sbiw	r26, 0x02	; 2
     fd8:	a2 30       	cpi	r26, 0x02	; 2
     fda:	b1 05       	cpc	r27, r1
     fdc:	88 f7       	brcc	.-30     	; 0xfc0 <_ZL13fill_checksumhhjh+0x4a>
     fde:	9a 01       	movw	r18, r20
     fe0:	22 50       	subi	r18, 0x02	; 2
     fe2:	31 09       	sbc	r19, r1
     fe4:	2e 7f       	andi	r18, 0xFE	; 254
     fe6:	2e 5f       	subi	r18, 0xFE	; 254
     fe8:	3f 4f       	sbci	r19, 0xFF	; 255
     fea:	c2 0f       	add	r28, r18
     fec:	d3 1f       	adc	r29, r19
     fee:	41 70       	andi	r20, 0x01	; 1
     ff0:	55 27       	eor	r21, r21
     ff2:	45 2b       	or	r20, r21
     ff4:	61 f0       	breq	.+24     	; 0x100e <_ZL13fill_checksumhhjh+0x98>
     ff6:	48 81       	ld	r20, Y
     ff8:	50 e0       	ldi	r21, 0x00	; 0
     ffa:	60 e0       	ldi	r22, 0x00	; 0
     ffc:	70 e0       	ldi	r23, 0x00	; 0
     ffe:	76 2f       	mov	r23, r22
    1000:	65 2f       	mov	r22, r21
    1002:	54 2f       	mov	r21, r20
    1004:	44 27       	eor	r20, r20
    1006:	c4 0e       	add	r12, r20
    1008:	d5 1e       	adc	r13, r21
    100a:	e6 1e       	adc	r14, r22
    100c:	f7 1e       	adc	r15, r23
    100e:	a7 01       	movw	r20, r14
    1010:	66 27       	eor	r22, r22
    1012:	77 27       	eor	r23, r23
    1014:	41 15       	cp	r20, r1
    1016:	51 05       	cpc	r21, r1
    1018:	61 05       	cpc	r22, r1
    101a:	71 05       	cpc	r23, r1
    101c:	71 f0       	breq	.+28     	; 0x103a <_ZL13fill_checksumhhjh+0xc4>
    101e:	ee 24       	eor	r14, r14
    1020:	ff 24       	eor	r15, r15
    1022:	c4 0e       	add	r12, r20
    1024:	d5 1e       	adc	r13, r21
    1026:	e6 1e       	adc	r14, r22
    1028:	f7 1e       	adc	r15, r23
    102a:	a7 01       	movw	r20, r14
    102c:	66 27       	eor	r22, r22
    102e:	77 27       	eor	r23, r23
    1030:	41 15       	cp	r20, r1
    1032:	51 05       	cpc	r21, r1
    1034:	61 05       	cpc	r22, r1
    1036:	71 05       	cpc	r23, r1
    1038:	91 f7       	brne	.-28     	; 0x101e <_ZL13fill_checksumhhjh+0xa8>
    103a:	c0 94       	com	r12
    103c:	d0 94       	com	r13
    103e:	e8 2f       	mov	r30, r24
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	ef 5f       	subi	r30, 0xFF	; 255
    1044:	fc 4f       	sbci	r31, 0xFC	; 252
    1046:	d0 82       	st	Z, r13
    1048:	c1 82       	std	Z+1, r12	; 0x01
    104a:	df 91       	pop	r29
    104c:	cf 91       	pop	r28
    104e:	ff 90       	pop	r15
    1050:	ef 90       	pop	r14
    1052:	df 90       	pop	r13
    1054:	cf 90       	pop	r12
    1056:	08 95       	ret

00001058 <_ZL6is_lanPKhS0_>:
    1058:	cf 93       	push	r28
    105a:	df 93       	push	r29
    105c:	fc 01       	movw	r30, r24
    105e:	20 81       	ld	r18, Z
    1060:	22 23       	and	r18, r18
    1062:	d1 f0       	breq	.+52     	; 0x1098 <_ZL6is_lanPKhS0_+0x40>
    1064:	fb 01       	movw	r30, r22
    1066:	30 81       	ld	r19, Z
    1068:	33 23       	and	r19, r19
    106a:	c1 f0       	breq	.+48     	; 0x109c <_ZL6is_lanPKhS0_+0x44>
    106c:	23 27       	eor	r18, r19
    106e:	30 91 13 05 	lds	r19, 0x0513	; 0x800513 <_ZN9EtherCard7netmaskE>
    1072:	23 23       	and	r18, r19
    1074:	a9 f4       	brne	.+42     	; 0x10a0 <_ZL6is_lanPKhS0_+0x48>
    1076:	dc 01       	movw	r26, r24
    1078:	11 96       	adiw	r26, 0x01	; 1
    107a:	31 96       	adiw	r30, 0x01	; 1
    107c:	c4 e1       	ldi	r28, 0x14	; 20
    107e:	d5 e0       	ldi	r29, 0x05	; 5
    1080:	04 96       	adiw	r24, 0x04	; 4
    1082:	4d 91       	ld	r20, X+
    1084:	21 91       	ld	r18, Z+
    1086:	39 91       	ld	r19, Y+
    1088:	24 27       	eor	r18, r20
    108a:	23 23       	and	r18, r19
    108c:	59 f4       	brne	.+22     	; 0x10a4 <_ZL6is_lanPKhS0_+0x4c>
    108e:	a8 17       	cp	r26, r24
    1090:	b9 07       	cpc	r27, r25
    1092:	b9 f7       	brne	.-18     	; 0x1082 <_ZL6is_lanPKhS0_+0x2a>
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	07 c0       	rjmp	.+14     	; 0x10a6 <_ZL6is_lanPKhS0_+0x4e>
    1098:	80 e0       	ldi	r24, 0x00	; 0
    109a:	05 c0       	rjmp	.+10     	; 0x10a6 <_ZL6is_lanPKhS0_+0x4e>
    109c:	80 e0       	ldi	r24, 0x00	; 0
    109e:	03 c0       	rjmp	.+6      	; 0x10a6 <_ZL6is_lanPKhS0_+0x4e>
    10a0:	80 e0       	ldi	r24, 0x00	; 0
    10a2:	01 c0       	rjmp	.+2      	; 0x10a6 <_ZL6is_lanPKhS0_+0x4e>
    10a4:	80 e0       	ldi	r24, 0x00	; 0
    10a6:	df 91       	pop	r29
    10a8:	cf 91       	pop	r28
    10aa:	08 95       	ret

000010ac <_ZL20fill_ip_hdr_checksumv>:
    10ac:	e1 e0       	ldi	r30, 0x01	; 1
    10ae:	f3 e0       	ldi	r31, 0x03	; 3
    10b0:	10 8e       	std	Z+24, r1	; 0x18
    10b2:	11 8e       	std	Z+25, r1	; 0x19
    10b4:	80 e4       	ldi	r24, 0x40	; 64
    10b6:	84 8b       	std	Z+20, r24	; 0x14
    10b8:	15 8a       	std	Z+21, r1	; 0x15
    10ba:	86 8b       	std	Z+22, r24	; 0x16
    10bc:	20 e0       	ldi	r18, 0x00	; 0
    10be:	44 e1       	ldi	r20, 0x14	; 20
    10c0:	50 e0       	ldi	r21, 0x00	; 0
    10c2:	6e e0       	ldi	r22, 0x0E	; 14
    10c4:	88 e1       	ldi	r24, 0x18	; 24
    10c6:	57 cf       	rjmp	.-338    	; 0xf76 <_ZL13fill_checksumhhjh>
    10c8:	08 95       	ret

000010ca <_ZL7setMACsPKh>:
    10ca:	bc 01       	movw	r22, r24
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	93 e0       	ldi	r25, 0x03	; 3
    10d0:	e0 d2       	rcall	.+1472   	; 0x1692 <_ZN9EtherCard7copyMacEPhPKh>
    10d2:	6b e1       	ldi	r22, 0x1B	; 27
    10d4:	75 e0       	ldi	r23, 0x05	; 5
    10d6:	87 e0       	ldi	r24, 0x07	; 7
    10d8:	93 e0       	ldi	r25, 0x03	; 3
    10da:	db c2       	rjmp	.+1462   	; 0x1692 <_ZN9EtherCard7copyMacEPhPKh>
    10dc:	08 95       	ret

000010de <_ZL11make_eth_ipv>:
    10de:	87 e0       	ldi	r24, 0x07	; 7
    10e0:	93 e0       	ldi	r25, 0x03	; 3
    10e2:	f3 df       	rcall	.-26     	; 0x10ca <_ZL7setMACsPKh>
    10e4:	6b e1       	ldi	r22, 0x1B	; 27
    10e6:	73 e0       	ldi	r23, 0x03	; 3
    10e8:	8f e1       	ldi	r24, 0x1F	; 31
    10ea:	93 e0       	ldi	r25, 0x03	; 3
    10ec:	c5 d2       	rcall	.+1418   	; 0x1678 <_ZN9EtherCard6copyIpEPhPKh>
    10ee:	67 e1       	ldi	r22, 0x17	; 23
    10f0:	75 e0       	ldi	r23, 0x05	; 5
    10f2:	8b e1       	ldi	r24, 0x1B	; 27
    10f4:	93 e0       	ldi	r25, 0x03	; 3
    10f6:	c0 d2       	rcall	.+1408   	; 0x1678 <_ZN9EtherCard6copyIpEPhPKh>
    10f8:	d9 cf       	rjmp	.-78     	; 0x10ac <_ZL20fill_ip_hdr_checksumv>
    10fa:	08 95       	ret

000010fc <_ZL12setMACandIPsPKhS0_>:
    10fc:	cf 93       	push	r28
    10fe:	df 93       	push	r29
    1100:	eb 01       	movw	r28, r22
    1102:	e3 df       	rcall	.-58     	; 0x10ca <_ZL7setMACsPKh>
    1104:	be 01       	movw	r22, r28
    1106:	8f e1       	ldi	r24, 0x1F	; 31
    1108:	93 e0       	ldi	r25, 0x03	; 3
    110a:	b6 d2       	rcall	.+1388   	; 0x1678 <_ZN9EtherCard6copyIpEPhPKh>
    110c:	67 e1       	ldi	r22, 0x17	; 23
    110e:	75 e0       	ldi	r23, 0x05	; 5
    1110:	8b e1       	ldi	r24, 0x1B	; 27
    1112:	93 e0       	ldi	r25, 0x03	; 3
    1114:	b1 d2       	rcall	.+1378   	; 0x1678 <_ZN9EtherCard6copyIpEPhPKh>
    1116:	df 91       	pop	r29
    1118:	cf 91       	pop	r28
    111a:	08 95       	ret

0000111c <_ZL16client_store_macPhS_>:
    111c:	cf 93       	push	r28
    111e:	df 93       	push	r29
    1120:	eb 01       	movw	r28, r22
    1122:	44 e0       	ldi	r20, 0x04	; 4
    1124:	50 e0       	ldi	r21, 0x00	; 0
    1126:	bc 01       	movw	r22, r24
    1128:	8d e1       	ldi	r24, 0x1D	; 29
    112a:	93 e0       	ldi	r25, 0x03	; 3
    112c:	0e 94 fe 17 	call	0x2ffc	; 0x2ffc <memcmp>
    1130:	89 2b       	or	r24, r25
    1132:	31 f4       	brne	.+12     	; 0x1140 <_ZL16client_store_macPhS_+0x24>
    1134:	67 e1       	ldi	r22, 0x17	; 23
    1136:	73 e0       	ldi	r23, 0x03	; 3
    1138:	ce 01       	movw	r24, r28
    113a:	ab d2       	rcall	.+1366   	; 0x1692 <_ZN9EtherCard7copyMacEPhPKh>
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	01 c0       	rjmp	.+2      	; 0x1142 <_ZL16client_store_macPhS_+0x26>
    1140:	80 e0       	ldi	r24, 0x00	; 0
    1142:	df 91       	pop	r29
    1144:	cf 91       	pop	r28
    1146:	08 95       	ret

00001148 <_ZL17client_arp_whohasPh>:
    1148:	0f 93       	push	r16
    114a:	1f 93       	push	r17
    114c:	cf 93       	push	r28
    114e:	8c 01       	movw	r16, r24
    1150:	85 e2       	ldi	r24, 0x25	; 37
    1152:	92 e0       	ldi	r25, 0x02	; 2
    1154:	ba df       	rcall	.-140    	; 0x10ca <_ZL7setMACsPKh>
    1156:	e1 e0       	ldi	r30, 0x01	; 1
    1158:	f3 e0       	ldi	r31, 0x03	; 3
    115a:	88 e0       	ldi	r24, 0x08	; 8
    115c:	84 87       	std	Z+12, r24	; 0x0c
    115e:	c6 e0       	ldi	r28, 0x06	; 6
    1160:	c5 87       	std	Z+13, r28	; 0x0d
    1162:	48 e0       	ldi	r20, 0x08	; 8
    1164:	50 e0       	ldi	r21, 0x00	; 0
    1166:	6f e7       	ldi	r22, 0x7F	; 127
    1168:	72 e0       	ldi	r23, 0x02	; 2
    116a:	8f e0       	ldi	r24, 0x0F	; 15
    116c:	93 e0       	ldi	r25, 0x03	; 3
    116e:	0e 94 f5 17 	call	0x2fea	; 0x2fea <memcpy_P>
    1172:	e1 e2       	ldi	r30, 0x21	; 33
    1174:	f3 e0       	ldi	r31, 0x03	; 3
    1176:	df 01       	movw	r26, r30
    1178:	1d 92       	st	X+, r1
    117a:	ca 95       	dec	r28
    117c:	e9 f7       	brne	.-6      	; 0x1178 <_ZL17client_arp_whohasPh+0x30>
    117e:	6b e1       	ldi	r22, 0x1B	; 27
    1180:	75 e0       	ldi	r23, 0x05	; 5
    1182:	87 e1       	ldi	r24, 0x17	; 23
    1184:	93 e0       	ldi	r25, 0x03	; 3
    1186:	85 d2       	rcall	.+1290   	; 0x1692 <_ZN9EtherCard7copyMacEPhPKh>
    1188:	b8 01       	movw	r22, r16
    118a:	87 e2       	ldi	r24, 0x27	; 39
    118c:	93 e0       	ldi	r25, 0x03	; 3
    118e:	74 d2       	rcall	.+1256   	; 0x1678 <_ZN9EtherCard6copyIpEPhPKh>
    1190:	67 e1       	ldi	r22, 0x17	; 23
    1192:	75 e0       	ldi	r23, 0x05	; 5
    1194:	8d e1       	ldi	r24, 0x1D	; 29
    1196:	93 e0       	ldi	r25, 0x03	; 3
    1198:	6f d2       	rcall	.+1246   	; 0x1678 <_ZN9EtherCard6copyIpEPhPKh>
    119a:	8a e2       	ldi	r24, 0x2A	; 42
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	c6 dd       	rcall	.-1140   	; 0xd2c <_ZN8ENC28J6010packetSendEj>
    11a0:	cf 91       	pop	r28
    11a2:	1f 91       	pop	r17
    11a4:	0f 91       	pop	r16
    11a6:	08 95       	ret

000011a8 <_ZN9EtherCard10udpPrepareEjPKhj>:
    11a8:	ef 92       	push	r14
    11aa:	ff 92       	push	r15
    11ac:	0f 93       	push	r16
    11ae:	1f 93       	push	r17
    11b0:	cf 93       	push	r28
    11b2:	df 93       	push	r29
    11b4:	18 2f       	mov	r17, r24
    11b6:	09 2f       	mov	r16, r25
    11b8:	eb 01       	movw	r28, r22
    11ba:	f4 2e       	mov	r15, r20
    11bc:	e5 2e       	mov	r14, r21
    11be:	87 e1       	ldi	r24, 0x17	; 23
    11c0:	95 e0       	ldi	r25, 0x05	; 5
    11c2:	4a df       	rcall	.-364    	; 0x1058 <_ZL6is_lanPKhS0_>
    11c4:	88 23       	and	r24, r24
    11c6:	29 f0       	breq	.+10     	; 0x11d2 <_ZN9EtherCard10udpPrepareEjPKhj+0x2a>
    11c8:	be 01       	movw	r22, r28
    11ca:	8c e2       	ldi	r24, 0x2C	; 44
    11cc:	95 e0       	ldi	r25, 0x05	; 5
    11ce:	96 df       	rcall	.-212    	; 0x10fc <_ZL12setMACandIPsPKhS0_>
    11d0:	04 c0       	rjmp	.+8      	; 0x11da <_ZN9EtherCard10udpPrepareEjPKhj+0x32>
    11d2:	be 01       	movw	r22, r28
    11d4:	82 e2       	ldi	r24, 0x22	; 34
    11d6:	95 e0       	ldi	r25, 0x05	; 5
    11d8:	91 df       	rcall	.-222    	; 0x10fc <_ZL12setMACandIPsPKhS0_>
    11da:	88 81       	ld	r24, Y
    11dc:	80 7f       	andi	r24, 0xF0	; 240
    11de:	80 3e       	cpi	r24, 0xE0	; 224
    11e0:	91 f0       	breq	.+36     	; 0x1206 <_ZN9EtherCard10udpPrepareEjPKhj+0x5e>
    11e2:	88 81       	ld	r24, Y
    11e4:	99 81       	ldd	r25, Y+1	; 0x01
    11e6:	aa 81       	ldd	r26, Y+2	; 0x02
    11e8:	bb 81       	ldd	r27, Y+3	; 0x03
    11ea:	8f 3f       	cpi	r24, 0xFF	; 255
    11ec:	9f 4f       	sbci	r25, 0xFF	; 255
    11ee:	af 4f       	sbci	r26, 0xFF	; 255
    11f0:	bf 4f       	sbci	r27, 0xFF	; 255
    11f2:	49 f0       	breq	.+18     	; 0x1206 <_ZN9EtherCard10udpPrepareEjPKhj+0x5e>
    11f4:	44 e0       	ldi	r20, 0x04	; 4
    11f6:	50 e0       	ldi	r21, 0x00	; 0
    11f8:	be 01       	movw	r22, r28
    11fa:	8f e0       	ldi	r24, 0x0F	; 15
    11fc:	95 e0       	ldi	r25, 0x05	; 5
    11fe:	0e 94 fe 17 	call	0x2ffc	; 0x2ffc <memcmp>
    1202:	89 2b       	or	r24, r25
    1204:	29 f4       	brne	.+10     	; 0x1210 <_ZN9EtherCard10udpPrepareEjPKhj+0x68>
    1206:	65 e2       	ldi	r22, 0x25	; 37
    1208:	72 e0       	ldi	r23, 0x02	; 2
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	93 e0       	ldi	r25, 0x03	; 3
    120e:	41 d2       	rcall	.+1154   	; 0x1692 <_ZN9EtherCard7copyMacEPhPKh>
    1210:	c1 e0       	ldi	r28, 0x01	; 1
    1212:	d3 e0       	ldi	r29, 0x03	; 3
    1214:	88 e0       	ldi	r24, 0x08	; 8
    1216:	8c 87       	std	Y+12, r24	; 0x0c
    1218:	1d 86       	std	Y+13, r1	; 0x0d
    121a:	49 e0       	ldi	r20, 0x09	; 9
    121c:	50 e0       	ldi	r21, 0x00	; 0
    121e:	66 e7       	ldi	r22, 0x76	; 118
    1220:	72 e0       	ldi	r23, 0x02	; 2
    1222:	8f e0       	ldi	r24, 0x0F	; 15
    1224:	93 e0       	ldi	r25, 0x03	; 3
    1226:	0e 94 f5 17 	call	0x2fea	; 0x2fea <memcpy_P>
    122a:	18 8a       	std	Y+16, r1	; 0x10
    122c:	81 e1       	ldi	r24, 0x11	; 17
    122e:	8f 8b       	std	Y+23, r24	; 0x17
    1230:	ec a2       	std	Y+36, r14	; 0x24
    1232:	fd a2       	std	Y+37, r15	; 0x25
    1234:	0a a3       	std	Y+34, r16	; 0x22
    1236:	1b a3       	std	Y+35, r17	; 0x23
    1238:	1e a2       	std	Y+38, r1	; 0x26
    123a:	18 a6       	std	Y+40, r1	; 0x28
    123c:	19 a6       	std	Y+41, r1	; 0x29
    123e:	df 91       	pop	r29
    1240:	cf 91       	pop	r28
    1242:	1f 91       	pop	r17
    1244:	0f 91       	pop	r16
    1246:	ff 90       	pop	r15
    1248:	ef 90       	pop	r14
    124a:	08 95       	ret

0000124c <_ZN9EtherCard11udpTransmitEj>:
    124c:	0f 93       	push	r16
    124e:	1f 93       	push	r17
    1250:	cf 93       	push	r28
    1252:	df 93       	push	r29
    1254:	ec 01       	movw	r28, r24
    1256:	01 e0       	ldi	r16, 0x01	; 1
    1258:	13 e0       	ldi	r17, 0x03	; 3
    125a:	4c 96       	adiw	r24, 0x1c	; 28
    125c:	f8 01       	movw	r30, r16
    125e:	90 8b       	std	Z+16, r25	; 0x10
    1260:	81 8b       	std	Z+17, r24	; 0x11
    1262:	24 df       	rcall	.-440    	; 0x10ac <_ZL20fill_ip_hdr_checksumv>
    1264:	ce 01       	movw	r24, r28
    1266:	08 96       	adiw	r24, 0x08	; 8
    1268:	f8 01       	movw	r30, r16
    126a:	96 a3       	std	Z+38, r25	; 0x26
    126c:	87 a3       	std	Z+39, r24	; 0x27
    126e:	ae 01       	movw	r20, r28
    1270:	40 5f       	subi	r20, 0xF0	; 240
    1272:	5f 4f       	sbci	r21, 0xFF	; 255
    1274:	21 e0       	ldi	r18, 0x01	; 1
    1276:	6a e1       	ldi	r22, 0x1A	; 26
    1278:	88 e2       	ldi	r24, 0x28	; 40
    127a:	7d de       	rcall	.-774    	; 0xf76 <_ZL13fill_checksumhhjh>
    127c:	ce 01       	movw	r24, r28
    127e:	8a 96       	adiw	r24, 0x2a	; 42
    1280:	55 dd       	rcall	.-1366   	; 0xd2c <_ZN8ENC28J6010packetSendEj>
    1282:	df 91       	pop	r29
    1284:	cf 91       	pop	r28
    1286:	1f 91       	pop	r17
    1288:	0f 91       	pop	r16
    128a:	08 95       	ret

0000128c <_ZN9EtherCard7sendUdpEPKhjjS1_j>:
    128c:	0f 93       	push	r16
    128e:	1f 93       	push	r17
    1290:	cf 93       	push	r28
    1292:	df 93       	push	r29
    1294:	d6 2f       	mov	r29, r22
    1296:	c7 2f       	mov	r28, r23
    1298:	ca 01       	movw	r24, r20
    129a:	a8 01       	movw	r20, r16
    129c:	b9 01       	movw	r22, r18
    129e:	84 df       	rcall	.-248    	; 0x11a8 <_ZN9EtherCard10udpPrepareEjPKhj>
    12a0:	8d 2f       	mov	r24, r29
    12a2:	9c 2f       	mov	r25, r28
    12a4:	81 30       	cpi	r24, 0x01	; 1
    12a6:	22 e0       	ldi	r18, 0x02	; 2
    12a8:	92 07       	cpc	r25, r18
    12aa:	10 f0       	brcs	.+4      	; 0x12b0 <_ZN9EtherCard7sendUdpEPKhjjS1_j+0x24>
    12ac:	80 e0       	ldi	r24, 0x00	; 0
    12ae:	92 e0       	ldi	r25, 0x02	; 2
    12b0:	cd df       	rcall	.-102    	; 0x124c <_ZN9EtherCard11udpTransmitEj>
    12b2:	df 91       	pop	r29
    12b4:	cf 91       	pop	r28
    12b6:	1f 91       	pop	r17
    12b8:	0f 91       	pop	r16
    12ba:	08 95       	ret

000012bc <_ZN9EtherCard7setGwIpEPKh>:
    12bc:	10 92 02 05 	sts	0x0502, r1	; 0x800502 <_ZN9EtherCard8delaycntE+0x1>
    12c0:	10 92 01 05 	sts	0x0501, r1	; 0x800501 <_ZN9EtherCard8delaycntE>
    12c4:	21 e0       	ldi	r18, 0x01	; 1
    12c6:	20 93 21 05 	sts	0x0521, r18	; 0x800521 <_ZL9waitgwmac>
    12ca:	bc 01       	movw	r22, r24
    12cc:	8b e0       	ldi	r24, 0x0B	; 11
    12ce:	95 e0       	ldi	r25, 0x05	; 5
    12d0:	d3 c1       	rjmp	.+934    	; 0x1678 <_ZN9EtherCard6copyIpEPhPKh>
    12d2:	08 95       	ret

000012d4 <_ZN9EtherCard22updateBroadcastAddressEv>:
    12d4:	cf 93       	push	r28
    12d6:	df 93       	push	r29
    12d8:	e7 e1       	ldi	r30, 0x17	; 23
    12da:	f5 e0       	ldi	r31, 0x05	; 5
    12dc:	c3 e1       	ldi	r28, 0x13	; 19
    12de:	d5 e0       	ldi	r29, 0x05	; 5
    12e0:	af e0       	ldi	r26, 0x0F	; 15
    12e2:	b5 e0       	ldi	r27, 0x05	; 5
    12e4:	2b e1       	ldi	r18, 0x1B	; 27
    12e6:	35 e0       	ldi	r19, 0x05	; 5
    12e8:	91 91       	ld	r25, Z+
    12ea:	89 91       	ld	r24, Y+
    12ec:	80 95       	com	r24
    12ee:	89 2b       	or	r24, r25
    12f0:	8d 93       	st	X+, r24
    12f2:	e2 17       	cp	r30, r18
    12f4:	f3 07       	cpc	r31, r19
    12f6:	c1 f7       	brne	.-16     	; 0x12e8 <_ZN9EtherCard22updateBroadcastAddressEv+0x14>
    12f8:	df 91       	pop	r29
    12fa:	cf 91       	pop	r28
    12fc:	08 95       	ret

000012fe <_ZN9EtherCard10packetLoopEj>:
	gPB[ICMP_CHECKSUM_P+1]++;
	gPB[ICMP_CHECKSUM_P] += 0x08;
	EtherCard::packetSend(len);
}

uint16_t EtherCard::packetLoop (uint16_t plen) {
    12fe:	cf 93       	push	r28
    1300:	df 93       	push	r29
    1302:	ec 01       	movw	r28, r24
    if (plen==0) {
    1304:	00 97       	sbiw	r24, 0x00	; 0
    1306:	09 f0       	breq	.+2      	; 0x130a <_ZN9EtherCard10packetLoopEj+0xc>
    1308:	3f c0       	rjmp	.+126    	; 0x1388 <_ZN9EtherCard10packetLoopEj+0x8a>
        //Check every 65536 (no-packet) cycles whether we need to retry ARP request for gateway
        if ((waitgwmac & WGW_INITIAL_ARP || waitgwmac & WGW_REFRESHING) &&
    130a:	80 91 21 05 	lds	r24, 0x0521	; 0x800521 <_ZL9waitgwmac>
    130e:	85 70       	andi	r24, 0x05	; 5
    1310:	89 f0       	breq	.+34     	; 0x1334 <_ZN9EtherCard10packetLoopEj+0x36>
    1312:	80 91 01 05 	lds	r24, 0x0501	; 0x800501 <_ZN9EtherCard8delaycntE>
    1316:	90 91 02 05 	lds	r25, 0x0502	; 0x800502 <_ZN9EtherCard8delaycntE+0x1>
    131a:	89 2b       	or	r24, r25
    131c:	59 f4       	brne	.+22     	; 0x1334 <_ZN9EtherCard10packetLoopEj+0x36>
                delaycnt==0 && isLinkUp()) {
    131e:	f3 dc       	rcall	.-1562   	; 0xd06 <_ZN8ENC28J608isLinkUpEv>
}

uint16_t EtherCard::packetLoop (uint16_t plen) {
    if (plen==0) {
        //Check every 65536 (no-packet) cycles whether we need to retry ARP request for gateway
        if ((waitgwmac & WGW_INITIAL_ARP || waitgwmac & WGW_REFRESHING) &&
    1320:	88 23       	and	r24, r24
    1322:	41 f0       	breq	.+16     	; 0x1334 <_ZN9EtherCard10packetLoopEj+0x36>
                delaycnt==0 && isLinkUp()) {
            client_arp_whohas(gwip);
    1324:	8b e0       	ldi	r24, 0x0B	; 11
    1326:	95 e0       	ldi	r25, 0x05	; 5
    1328:	0f df       	rcall	.-482    	; 0x1148 <_ZL17client_arp_whohasPh>
            waitgwmac |= WGW_ACCEPT_ARP_REPLY;
    132a:	80 91 21 05 	lds	r24, 0x0521	; 0x800521 <_ZL9waitgwmac>
    132e:	88 60       	ori	r24, 0x08	; 8
    1330:	80 93 21 05 	sts	0x0521, r24	; 0x800521 <_ZL9waitgwmac>
        }
        delaycnt++;
    1334:	80 91 01 05 	lds	r24, 0x0501	; 0x800501 <_ZN9EtherCard8delaycntE>
    1338:	90 91 02 05 	lds	r25, 0x0502	; 0x800502 <_ZN9EtherCard8delaycntE+0x1>
    133c:	01 96       	adiw	r24, 0x01	; 1
    133e:	90 93 02 05 	sts	0x0502, r25	; 0x800502 <_ZN9EtherCard8delaycntE+0x1>
    1342:	80 93 01 05 	sts	0x0501, r24	; 0x800501 <_ZN9EtherCard8delaycntE>

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, dnsip) && !has_dns_mac && !waiting_for_dns_mac) {
    1346:	67 e0       	ldi	r22, 0x07	; 7
    1348:	75 e0       	ldi	r23, 0x05	; 5
    134a:	87 e1       	ldi	r24, 0x17	; 23
    134c:	95 e0       	ldi	r25, 0x05	; 5
    134e:	84 de       	rcall	.-760    	; 0x1058 <_ZL6is_lanPKhS0_>
    1350:	88 23       	and	r24, r24
    1352:	49 f0       	breq	.+18     	; 0x1366 <_ZN9EtherCard10packetLoopEj+0x68>
    1354:	80 91 2a 05 	lds	r24, 0x052A	; 0x80052a <_ZL11has_dns_mac>
    1358:	81 11       	cpse	r24, r1
    135a:	05 c0       	rjmp	.+10     	; 0x1366 <_ZN9EtherCard10packetLoopEj+0x68>
    135c:	80 91 2b 05 	lds	r24, 0x052B	; 0x80052b <_ZL19waiting_for_dns_mac>
    1360:	88 23       	and	r24, r24
    1362:	09 f4       	brne	.+2      	; 0x1366 <_ZN9EtherCard10packetLoopEj+0x68>
    1364:	dc c0       	rjmp	.+440    	; 0x151e <_ZN9EtherCard10packetLoopEj+0x220>
            client_arp_whohas(dnsip);
            waiting_for_dns_mac = true;
        }

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, hisip) && !has_dest_mac && !waiting_for_dest_mac) {
    1366:	63 e0       	ldi	r22, 0x03	; 3
    1368:	75 e0       	ldi	r23, 0x05	; 5
    136a:	87 e1       	ldi	r24, 0x17	; 23
    136c:	95 e0       	ldi	r25, 0x05	; 5
    136e:	74 de       	rcall	.-792    	; 0x1058 <_ZL6is_lanPKhS0_>
    1370:	88 23       	and	r24, r24
    1372:	09 f4       	brne	.+2      	; 0x1376 <_ZN9EtherCard10packetLoopEj+0x78>
    1374:	f8 c0       	rjmp	.+496    	; 0x1566 <_ZN9EtherCard10packetLoopEj+0x268>
    1376:	80 91 28 05 	lds	r24, 0x0528	; 0x800528 <_ZL12has_dest_mac>
    137a:	81 11       	cpse	r24, r1
    137c:	f4 c0       	rjmp	.+488    	; 0x1566 <_ZN9EtherCard10packetLoopEj+0x268>
    137e:	80 91 29 05 	lds	r24, 0x0529	; 0x800529 <_ZL20waiting_for_dest_mac>
    1382:	81 11       	cpse	r24, r1
    1384:	f0 c0       	rjmp	.+480    	; 0x1566 <_ZN9EtherCard10packetLoopEj+0x268>
    1386:	d2 c0       	rjmp	.+420    	; 0x152c <_ZN9EtherCard10packetLoopEj+0x22e>
    return true;
}

static uint8_t eth_type_is_arp_and_my_ip(uint16_t len) {
    return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
    1388:	89 32       	cpi	r24, 0x29	; 41
    138a:	91 05       	cpc	r25, r1
    138c:	08 f4       	brcc	.+2      	; 0x1390 <_ZN9EtherCard10packetLoopEj+0x92>
    138e:	d5 c0       	rjmp	.+426    	; 0x153a <_ZN9EtherCard10packetLoopEj+0x23c>
        }
    return true;
}

static uint8_t eth_type_is_arp_and_my_ip(uint16_t len) {
    return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
    1390:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <_ZN8ENC28J606bufferE+0xc>
    1394:	88 30       	cpi	r24, 0x08	; 8
    1396:	09 f0       	breq	.+2      	; 0x139a <_ZN9EtherCard10packetLoopEj+0x9c>
    1398:	e6 c0       	rjmp	.+460    	; 0x1566 <_ZN9EtherCard10packetLoopEj+0x268>
    139a:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <_ZN8ENC28J606bufferE+0xd>
    139e:	86 30       	cpi	r24, 0x06	; 6
    13a0:	09 f0       	breq	.+2      	; 0x13a4 <_ZN9EtherCard10packetLoopEj+0xa6>
    13a2:	dd c0       	rjmp	.+442    	; 0x155e <_ZN9EtherCard10packetLoopEj+0x260>
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
           memcmp(gPB + ETH_ARP_DST_IP_P, EtherCard::myip, IP_LEN) == 0;
    13a4:	44 e0       	ldi	r20, 0x04	; 4
    13a6:	50 e0       	ldi	r21, 0x00	; 0
    13a8:	67 e1       	ldi	r22, 0x17	; 23
    13aa:	75 e0       	ldi	r23, 0x05	; 5
    13ac:	87 e2       	ldi	r24, 0x27	; 39
    13ae:	93 e0       	ldi	r25, 0x03	; 3
    13b0:	0e 94 fe 17 	call	0x2ffc	; 0x2ffc <memcmp>
    return true;
}

static uint8_t eth_type_is_arp_and_my_ip(uint16_t len) {
    return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
    13b4:	89 2b       	or	r24, r25
    13b6:	09 f0       	breq	.+2      	; 0x13ba <_ZN9EtherCard10packetLoopEj+0xbc>
    13b8:	d2 c0       	rjmp	.+420    	; 0x155e <_ZN9EtherCard10packetLoopEj+0x260>
    EtherCard::copyIp(gPB + IP_SRC_P, EtherCard::myip);
    fill_ip_hdr_checksum();
}

static void make_arp_answer_from_request() {
    setMACs(gPB + ETH_SRC_MAC);
    13ba:	c3 c0       	rjmp	.+390    	; 0x1542 <_ZN9EtherCard10packetLoopEj+0x244>
    13bc:	87 e0       	ldi	r24, 0x07	; 7
    13be:	93 e0       	ldi	r25, 0x03	; 3
    13c0:	84 de       	rcall	.-760    	; 0x10ca <_ZL7setMACsPKh>
    gPB[ETH_ARP_OPCODE_H_P] = ETH_ARP_OPCODE_REPLY_H_V;
    13c2:	e1 e0       	ldi	r30, 0x01	; 1
    13c4:	f3 e0       	ldi	r31, 0x03	; 3
    13c6:	14 8a       	std	Z+20, r1	; 0x14
    gPB[ETH_ARP_OPCODE_L_P] = ETH_ARP_OPCODE_REPLY_L_V;
    13c8:	82 e0       	ldi	r24, 0x02	; 2
    EtherCard::copyMac(gPB + ETH_ARP_DST_MAC_P, gPB + ETH_ARP_SRC_MAC_P);
    13ca:	85 8b       	std	Z+21, r24	; 0x15
    13cc:	67 e1       	ldi	r22, 0x17	; 23
    13ce:	73 e0       	ldi	r23, 0x03	; 3
    13d0:	81 e2       	ldi	r24, 0x21	; 33
    13d2:	93 e0       	ldi	r25, 0x03	; 3
    EtherCard::copyMac(gPB + ETH_ARP_SRC_MAC_P, EtherCard::mymac);
    13d4:	5e d1       	rcall	.+700    	; 0x1692 <_ZN9EtherCard7copyMacEPhPKh>
    13d6:	6b e1       	ldi	r22, 0x1B	; 27
    13d8:	75 e0       	ldi	r23, 0x05	; 5
    13da:	87 e1       	ldi	r24, 0x17	; 23
    13dc:	93 e0       	ldi	r25, 0x03	; 3
    EtherCard::copyIp(gPB + ETH_ARP_DST_IP_P, gPB + ETH_ARP_SRC_IP_P);
    13de:	59 d1       	rcall	.+690    	; 0x1692 <_ZN9EtherCard7copyMacEPhPKh>
    13e0:	6d e1       	ldi	r22, 0x1D	; 29
    13e2:	73 e0       	ldi	r23, 0x03	; 3
    13e4:	87 e2       	ldi	r24, 0x27	; 39
    13e6:	93 e0       	ldi	r25, 0x03	; 3
    EtherCard::copyIp(gPB + ETH_ARP_SRC_IP_P, EtherCard::myip);
    13e8:	47 d1       	rcall	.+654    	; 0x1678 <_ZN9EtherCard6copyIpEPhPKh>
    13ea:	67 e1       	ldi	r22, 0x17	; 23
    13ec:	75 e0       	ldi	r23, 0x05	; 5
    13ee:	8d e1       	ldi	r24, 0x1D	; 29
    13f0:	93 e0       	ldi	r25, 0x03	; 3
    13f2:	42 d1       	rcall	.+644    	; 0x1678 <_ZN9EtherCard6copyIpEPhPKh>
    EtherCard::packetSend(42);
    13f4:	8a e2       	ldi	r24, 0x2A	; 42
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	99 dc       	rcall	.-1742   	; 0xd2c <_ZN8ENC28J6010packetSendEj>
    13fa:	80 91 21 05 	lds	r24, 0x0521	; 0x800521 <_ZL9waitgwmac>

    if (eth_type_is_arp_and_my_ip(plen))
    {   //Service ARP request
        if (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REQ_L_V)
            make_arp_answer_from_request();
        if (waitgwmac & WGW_ACCEPT_ARP_REPLY && (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REPLY_L_V) && client_store_mac(gwip, gwmacaddr))
    13fe:	83 ff       	sbrs	r24, 3
    1400:	0e c0       	rjmp	.+28     	; 0x141e <_ZN9EtherCard10packetLoopEj+0x120>
    1402:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <_ZN8ENC28J606bufferE+0x15>
    1406:	82 30       	cpi	r24, 0x02	; 2
    1408:	51 f4       	brne	.+20     	; 0x141e <_ZN9EtherCard10packetLoopEj+0x120>
    140a:	62 e2       	ldi	r22, 0x22	; 34
    140c:	75 e0       	ldi	r23, 0x05	; 5
    140e:	8b e0       	ldi	r24, 0x0B	; 11
    1410:	95 e0       	ldi	r25, 0x05	; 5
    1412:	84 de       	rcall	.-760    	; 0x111c <_ZL16client_store_macPhS_>
    1414:	88 23       	and	r24, r24
    1416:	19 f0       	breq	.+6      	; 0x141e <_ZN9EtherCard10packetLoopEj+0x120>
    1418:	82 e0       	ldi	r24, 0x02	; 2
            waitgwmac = WGW_HAVE_GW_MAC;
    141a:	80 93 21 05 	sts	0x0521, r24	; 0x800521 <_ZL9waitgwmac>
    141e:	80 91 2a 05 	lds	r24, 0x052A	; 0x80052a <_ZL11has_dns_mac>
        if (!has_dns_mac && waiting_for_dns_mac && client_store_mac(dnsip, destmacaddr)) {
    1422:	81 11       	cpse	r24, r1
    1424:	10 c0       	rjmp	.+32     	; 0x1446 <_ZN9EtherCard10packetLoopEj+0x148>
    1426:	80 91 2b 05 	lds	r24, 0x052B	; 0x80052b <_ZL19waiting_for_dns_mac>
    142a:	88 23       	and	r24, r24
    142c:	61 f0       	breq	.+24     	; 0x1446 <_ZN9EtherCard10packetLoopEj+0x148>
    142e:	6c e2       	ldi	r22, 0x2C	; 44
    1430:	75 e0       	ldi	r23, 0x05	; 5
    1432:	87 e0       	ldi	r24, 0x07	; 7
    1434:	95 e0       	ldi	r25, 0x05	; 5
    1436:	72 de       	rcall	.-796    	; 0x111c <_ZL16client_store_macPhS_>
    1438:	88 23       	and	r24, r24
    143a:	29 f0       	breq	.+10     	; 0x1446 <_ZN9EtherCard10packetLoopEj+0x148>
    143c:	81 e0       	ldi	r24, 0x01	; 1
            has_dns_mac = true;
    143e:	80 93 2a 05 	sts	0x052A, r24	; 0x80052a <_ZL11has_dns_mac>
    1442:	10 92 2b 05 	sts	0x052B, r1	; 0x80052b <_ZL19waiting_for_dns_mac>
            waiting_for_dns_mac = false;
    1446:	80 91 28 05 	lds	r24, 0x0528	; 0x800528 <_ZL12has_dest_mac>
        }
        if (!has_dest_mac && waiting_for_dest_mac && client_store_mac(hisip, destmacaddr)) {
    144a:	81 11       	cpse	r24, r1
    144c:	8c c0       	rjmp	.+280    	; 0x1566 <_ZN9EtherCard10packetLoopEj+0x268>
    144e:	80 91 29 05 	lds	r24, 0x0529	; 0x800529 <_ZL20waiting_for_dest_mac>
    1452:	88 23       	and	r24, r24
    1454:	09 f4       	brne	.+2      	; 0x1458 <_ZN9EtherCard10packetLoopEj+0x15a>
    1456:	87 c0       	rjmp	.+270    	; 0x1566 <_ZN9EtherCard10packetLoopEj+0x268>
    1458:	6c e2       	ldi	r22, 0x2C	; 44
    145a:	75 e0       	ldi	r23, 0x05	; 5
    145c:	83 e0       	ldi	r24, 0x03	; 3
    145e:	95 e0       	ldi	r25, 0x05	; 5
    1460:	5d de       	rcall	.-838    	; 0x111c <_ZL16client_store_macPhS_>
    1462:	88 23       	and	r24, r24
    1464:	09 f4       	brne	.+2      	; 0x1468 <_ZN9EtherCard10packetLoopEj+0x16a>
    1466:	7f c0       	rjmp	.+254    	; 0x1566 <_ZN9EtherCard10packetLoopEj+0x268>
    1468:	81 e0       	ldi	r24, 0x01	; 1
            has_dest_mac = true;
    146a:	80 93 28 05 	sts	0x0528, r24	; 0x800528 <_ZL12has_dest_mac>
    146e:	10 92 29 05 	sts	0x0529, r1	; 0x800529 <_ZL20waiting_for_dest_mac>
            waiting_for_dest_mac = false;
    1472:	79 c0       	rjmp	.+242    	; 0x1566 <_ZN9EtherCard10packetLoopEj+0x268>
    1474:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <_ZN8ENC28J606bufferE+0xc>
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
           memcmp(gPB + ETH_ARP_DST_IP_P, EtherCard::myip, IP_LEN) == 0;
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
    1478:	88 30       	cpi	r24, 0x08	; 8
    147a:	09 f0       	breq	.+2      	; 0x147e <_ZN9EtherCard10packetLoopEj+0x180>
    147c:	74 c0       	rjmp	.+232    	; 0x1566 <_ZN9EtherCard10packetLoopEj+0x268>
    147e:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <_ZN8ENC28J606bufferE+0xd>
    1482:	81 11       	cpse	r24, r1
    1484:	70 c0       	rjmp	.+224    	; 0x1566 <_ZN9EtherCard10packetLoopEj+0x268>
    1486:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <_ZN8ENC28J606bufferE+0xe>
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
    148a:	85 34       	cpi	r24, 0x45	; 69
    148c:	09 f0       	breq	.+2      	; 0x1490 <_ZN9EtherCard10packetLoopEj+0x192>
    148e:	6b c0       	rjmp	.+214    	; 0x1566 <_ZN9EtherCard10packetLoopEj+0x268>
    1490:	44 e0       	ldi	r20, 0x04	; 4
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
           (memcmp(gPB + IP_DST_P, EtherCard::myip, IP_LEN) == 0  //not my IP
    1492:	50 e0       	ldi	r21, 0x00	; 0
    1494:	67 e1       	ldi	r22, 0x17	; 23
    1496:	75 e0       	ldi	r23, 0x05	; 5
    1498:	8f e1       	ldi	r24, 0x1F	; 31
    149a:	93 e0       	ldi	r25, 0x03	; 3
    149c:	0e 94 fe 17 	call	0x2ffc	; 0x2ffc <memcmp>
    14a0:	89 2b       	or	r24, r25
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
    14a2:	09 f4       	brne	.+2      	; 0x14a6 <_ZN9EtherCard10packetLoopEj+0x1a8>
    14a4:	54 c0       	rjmp	.+168    	; 0x154e <_ZN9EtherCard10packetLoopEj+0x250>
    14a6:	44 e0       	ldi	r20, 0x04	; 4
           (memcmp(gPB + IP_DST_P, EtherCard::myip, IP_LEN) == 0  //not my IP
            || (memcmp(gPB + IP_DST_P, EtherCard::broadcastip, IP_LEN) == 0) //not subnet broadcast
    14a8:	50 e0       	ldi	r21, 0x00	; 0
    14aa:	6f e0       	ldi	r22, 0x0F	; 15
    14ac:	75 e0       	ldi	r23, 0x05	; 5
    14ae:	8f e1       	ldi	r24, 0x1F	; 31
    14b0:	93 e0       	ldi	r25, 0x03	; 3
    14b2:	0e 94 fe 17 	call	0x2ffc	; 0x2ffc <memcmp>
    14b6:	89 2b       	or	r24, r25
    14b8:	09 f4       	brne	.+2      	; 0x14bc <_ZN9EtherCard10packetLoopEj+0x1be>
    14ba:	49 c0       	rjmp	.+146    	; 0x154e <_ZN9EtherCard10packetLoopEj+0x250>
    14bc:	44 e0       	ldi	r20, 0x04	; 4
            || (memcmp(gPB + IP_DST_P, allOnes, IP_LEN) == 0)); //not global broadcasts
    14be:	50 e0       	ldi	r21, 0x00	; 0
    14c0:	65 e2       	ldi	r22, 0x25	; 37
    14c2:	72 e0       	ldi	r23, 0x02	; 2
    14c4:	8f e1       	ldi	r24, 0x1F	; 31
    14c6:	93 e0       	ldi	r25, 0x03	; 3
    14c8:	0e 94 fe 17 	call	0x2ffc	; 0x2ffc <memcmp>
    14cc:	89 2b       	or	r24, r25
    14ce:	09 f0       	breq	.+2      	; 0x14d2 <_ZN9EtherCard10packetLoopEj+0x1d4>
    14d0:	4a c0       	rjmp	.+148    	; 0x1566 <_ZN9EtherCard10packetLoopEj+0x268>
    14d2:	3d c0       	rjmp	.+122    	; 0x154e <_ZN9EtherCard10packetLoopEj+0x250>
    14d4:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <_ZN8ENC28J606bufferE+0x22>
        //!@todo Add other protocols (and make each optional at compile time)
        return 0;
    }
	
	//To handle pinging
	if (gPB[IP_PROTO_P]==IP_PROTO_ICMP_V && gPB[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V)
    14d8:	88 30       	cpi	r24, 0x08	; 8
    14da:	c9 f4       	brne	.+50     	; 0x150e <_ZN9EtherCard10packetLoopEj+0x210>
	{   //Service ICMP echo request (ping)
		if (icmp_cb)
    14dc:	e0 91 32 05 	lds	r30, 0x0532	; 0x800532 <_ZL7icmp_cb>
    14e0:	f0 91 33 05 	lds	r31, 0x0533	; 0x800533 <_ZL7icmp_cb+0x1>
    14e4:	30 97       	sbiw	r30, 0x00	; 0
    14e6:	19 f0       	breq	.+6      	; 0x14ee <_ZN9EtherCard10packetLoopEj+0x1f0>
		(*icmp_cb)(&(gPB[IP_SRC_P]));
    14e8:	8b e1       	ldi	r24, 0x1B	; 27
    14ea:	93 e0       	ldi	r25, 0x03	; 3
    14ec:	19 95       	eicall
void EtherCard::registerPingCallback (void (*callback)(uint8_t *srcip)) {
    icmp_cb = callback;
}

static void make_echo_reply_from_request(uint16_t len) {
	make_eth_ip();
    14ee:	f7 dd       	rcall	.-1042   	; 0x10de <_ZL11make_eth_ipv>
	gPB[ICMP_TYPE_P] = ICMP_TYPE_ECHOREPLY_V;
    14f0:	e1 e0       	ldi	r30, 0x01	; 1
    14f2:	f3 e0       	ldi	r31, 0x03	; 3
	if (gPB[ICMP_CHECKSUM_P] > (0xFF-0x08))
    14f4:	12 a2       	std	Z+34, r1	; 0x22
    14f6:	84 a1       	ldd	r24, Z+36	; 0x24
    14f8:	88 3f       	cpi	r24, 0xF8	; 248
	gPB[ICMP_CHECKSUM_P+1]++;
    14fa:	18 f0       	brcs	.+6      	; 0x1502 <_ZN9EtherCard10packetLoopEj+0x204>
    14fc:	95 a1       	ldd	r25, Z+37	; 0x25
    14fe:	9f 5f       	subi	r25, 0xFF	; 255
	gPB[ICMP_CHECKSUM_P] += 0x08;
    1500:	95 a3       	std	Z+37, r25	; 0x25
    1502:	88 5f       	subi	r24, 0xF8	; 248
	EtherCard::packetSend(len);
    1504:	80 93 25 03 	sts	0x0325, r24	; 0x800325 <_ZN8ENC28J606bufferE+0x24>
    1508:	ce 01       	movw	r24, r28
    150a:	10 dc       	rcall	.-2016   	; 0xd2c <_ZN8ENC28J6010packetSendEj>
		make_echo_reply_from_request(plen);
		return 0;
	}

#if ETHERCARD_UDPSERVER
    if (ether.udpServerListening() && gPB[IP_PROTO_P]==IP_PROTO_UDP_V)
    150c:	2c c0       	rjmp	.+88     	; 0x1566 <_ZN9EtherCard10packetLoopEj+0x268>
    150e:	4a d0       	rcall	.+148    	; 0x15a4 <_ZN9EtherCard18udpServerListeningEv>
    1510:	88 23       	and	r24, r24
    1512:	49 f1       	breq	.+82     	; 0x1566 <_ZN9EtherCard10packetLoopEj+0x268>
    1514:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <_ZN8ENC28J606bufferE+0x17>
    1518:	81 31       	cpi	r24, 0x11	; 17
    151a:	29 f5       	brne	.+74     	; 0x1566 <_ZN9EtherCard10packetLoopEj+0x268>
        }
        delaycnt++;

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, dnsip) && !has_dns_mac && !waiting_for_dns_mac) {
            client_arp_whohas(dnsip);
    151c:	1d c0       	rjmp	.+58     	; 0x1558 <_ZN9EtherCard10packetLoopEj+0x25a>
    151e:	87 e0       	ldi	r24, 0x07	; 7
    1520:	95 e0       	ldi	r25, 0x05	; 5
    1522:	12 de       	rcall	.-988    	; 0x1148 <_ZL17client_arp_whohasPh>
            waiting_for_dns_mac = true;
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	80 93 2b 05 	sts	0x052B, r24	; 0x80052b <_ZL19waiting_for_dns_mac>
    152a:	1d cf       	rjmp	.-454    	; 0x1366 <_ZN9EtherCard10packetLoopEj+0x68>
        }

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, hisip) && !has_dest_mac && !waiting_for_dest_mac) {
            client_arp_whohas(hisip);
    152c:	83 e0       	ldi	r24, 0x03	; 3
    152e:	95 e0       	ldi	r25, 0x05	; 5
    1530:	0b de       	rcall	.-1002   	; 0x1148 <_ZL17client_arp_whohasPh>
    1532:	81 e0       	ldi	r24, 0x01	; 1
            waiting_for_dest_mac = true;
    1534:	80 93 29 05 	sts	0x0529, r24	; 0x800529 <_ZL20waiting_for_dest_mac>
    1538:	16 c0       	rjmp	.+44     	; 0x1566 <_ZN9EtherCard10packetLoopEj+0x268>
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
    153a:	8a 97       	sbiw	r24, 0x2a	; 42
    153c:	08 f0       	brcs	.+2      	; 0x1540 <_ZN9EtherCard10packetLoopEj+0x242>
    153e:	9a cf       	rjmp	.-204    	; 0x1474 <_ZN9EtherCard10packetLoopEj+0x176>
    1540:	12 c0       	rjmp	.+36     	; 0x1566 <_ZN9EtherCard10packetLoopEj+0x268>
        return 0;
    }

    if (eth_type_is_arp_and_my_ip(plen))
    {   //Service ARP request
        if (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REQ_L_V)
    1542:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <_ZN8ENC28J606bufferE+0x15>
    1546:	81 30       	cpi	r24, 0x01	; 1
    1548:	09 f0       	breq	.+2      	; 0x154c <_ZN9EtherCard10packetLoopEj+0x24e>
    154a:	57 cf       	rjmp	.-338    	; 0x13fa <_ZN9EtherCard10packetLoopEj+0xfc>
    154c:	37 cf       	rjmp	.-402    	; 0x13bc <_ZN9EtherCard10packetLoopEj+0xbe>
        //!@todo Add other protocols (and make each optional at compile time)
        return 0;
    }
	
	//To handle pinging
	if (gPB[IP_PROTO_P]==IP_PROTO_ICMP_V && gPB[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V)
    154e:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <_ZN8ENC28J606bufferE+0x17>
    1552:	81 30       	cpi	r24, 0x01	; 1
    1554:	e1 f6       	brne	.-72     	; 0x150e <_ZN9EtherCard10packetLoopEj+0x210>
    1556:	be cf       	rjmp	.-132    	; 0x14d4 <_ZN9EtherCard10packetLoopEj+0x1d6>
	}

#if ETHERCARD_UDPSERVER
    if (ether.udpServerListening() && gPB[IP_PROTO_P]==IP_PROTO_UDP_V)
    {   //Call UDP server handler (callback) if one is defined for this packet
        if(ether.udpServerHasProcessedPacket(plen))
    1558:	ce 01       	movw	r24, r28
    155a:	2b d0       	rcall	.+86     	; 0x15b2 <_ZN9EtherCard27udpServerHasProcessedPacketEj>
    155c:	04 c0       	rjmp	.+8      	; 0x1566 <_ZN9EtherCard10packetLoopEj+0x268>
    155e:	ca 32       	cpi	r28, 0x2A	; 42
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
    1560:	d1 05       	cpc	r29, r1
    1562:	08 f0       	brcs	.+2      	; 0x1566 <_ZN9EtherCard10packetLoopEj+0x268>
    1564:	8c cf       	rjmp	.-232    	; 0x147e <_ZN9EtherCard10packetLoopEj+0x180>
    1566:	80 e0       	ldi	r24, 0x00	; 0

    if (plen<54 || gPB[IP_PROTO_P]!=IP_PROTO_TCP_V )
        return 0; //from here on we are only interested in TCP-packets; these are longer than 54 bytes
		
	return 0;
}
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	df 91       	pop	r29
    156c:	cf 91       	pop	r28
    156e:	08 95       	ret

00001570 <_ZN9EtherCard21udpServerListenOnPortEPFvjPhjPKcjEj>:
    1570:	9c 01       	movw	r18, r24
    {
        if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((uint8_t) listeners[i].port)) {
            listeners[i].listening = true;
        }
    }
}
    1572:	90 91 34 05 	lds	r25, 0x0534	; 0x800534 <numListeners>
    1576:	98 30       	cpi	r25, 0x08	; 8
    1578:	a0 f4       	brcc	.+40     	; 0x15a2 <_ZN9EtherCard21udpServerListenOnPortEPFvjPhjPKcjEj+0x32>
    157a:	e9 2f       	mov	r30, r25
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	af 01       	movw	r20, r30
    1580:	44 0f       	add	r20, r20
    1582:	55 1f       	adc	r21, r21
    1584:	44 0f       	add	r20, r20
    1586:	55 1f       	adc	r21, r21
    1588:	e4 0f       	add	r30, r20
    158a:	f5 1f       	adc	r31, r21
    158c:	eb 5c       	subi	r30, 0xCB	; 203
    158e:	fa 4f       	sbci	r31, 0xFA	; 250
    1590:	31 83       	std	Z+1, r19	; 0x01
    1592:	20 83       	st	Z, r18
    1594:	73 83       	std	Z+3, r23	; 0x03
    1596:	62 83       	std	Z+2, r22	; 0x02
    1598:	81 e0       	ldi	r24, 0x01	; 1
    159a:	84 83       	std	Z+4, r24	; 0x04
    159c:	9f 5f       	subi	r25, 0xFF	; 255
    159e:	90 93 34 05 	sts	0x0534, r25	; 0x800534 <numListeners>
    15a2:	08 95       	ret

000015a4 <_ZN9EtherCard18udpServerListeningEv>:

bool EtherCard::udpServerListening() {
    return numListeners > 0;
    15a4:	81 e0       	ldi	r24, 0x01	; 1
    15a6:	90 91 34 05 	lds	r25, 0x0534	; 0x800534 <numListeners>
    15aa:	91 11       	cpse	r25, r1
    15ac:	01 c0       	rjmp	.+2      	; 0x15b0 <_ZN9EtherCard18udpServerListeningEv+0xc>
    15ae:	80 e0       	ldi	r24, 0x00	; 0
}
    15b0:	08 95       	ret

000015b2 <_ZN9EtherCard27udpServerHasProcessedPacketEj>:

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    15b2:	8f 92       	push	r8
    15b4:	9f 92       	push	r9
    15b6:	bf 92       	push	r11
    15b8:	cf 92       	push	r12
    15ba:	df 92       	push	r13
    15bc:	ef 92       	push	r14
    15be:	ff 92       	push	r15
    15c0:	0f 93       	push	r16
    15c2:	1f 93       	push	r17
    15c4:	cf 93       	push	r28
    15c6:	df 93       	push	r29
    bool packetProcessed = false;
    for(int i = 0; i < numListeners; i++)
    15c8:	80 91 34 05 	lds	r24, 0x0534	; 0x800534 <numListeners>
    15cc:	88 23       	and	r24, r24
    15ce:	09 f4       	brne	.+2      	; 0x15d2 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x20>
    15d0:	46 c0       	rjmp	.+140    	; 0x165e <_ZN9EtherCard27udpServerHasProcessedPacketEj+0xac>
    15d2:	c5 e3       	ldi	r28, 0x35	; 53
    15d4:	d5 e0       	ldi	r29, 0x05	; 5
    15d6:	e1 2c       	mov	r14, r1
    15d8:	f1 2c       	mov	r15, r1
    15da:	80 e0       	ldi	r24, 0x00	; 0
    {
        if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((uint8_t) listeners[i].port) && listeners[i].listening)
    15dc:	0f 2e       	mov	r0, r31
    15de:	f1 e0       	ldi	r31, 0x01	; 1
    15e0:	cf 2e       	mov	r12, r31
    15e2:	f3 e0       	ldi	r31, 0x03	; 3
    15e4:	df 2e       	mov	r13, r31
    15e6:	f0 2d       	mov	r31, r0
                listeners[i].port,
                gPB + IP_SRC_P,
                (gPB[UDP_SRC_PORT_H_P] << 8) | gPB[UDP_SRC_PORT_L_P],
                (const char *) (gPB + UDP_DATA_P),
                datalen);
            packetProcessed = true;
    15e8:	bb 24       	eor	r11, r11
    15ea:	b3 94       	inc	r11

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    bool packetProcessed = false;
    for(int i = 0; i < numListeners; i++)
    {
        if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((uint8_t) listeners[i].port) && listeners[i].listening)
    15ec:	aa 81       	ldd	r26, Y+2	; 0x02
    15ee:	bb 81       	ldd	r27, Y+3	; 0x03
    15f0:	f6 01       	movw	r30, r12
    15f2:	24 a1       	ldd	r18, Z+36	; 0x24
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	4b 2f       	mov	r20, r27
    15f8:	55 27       	eor	r21, r21
    15fa:	24 17       	cp	r18, r20
    15fc:	35 07       	cpc	r19, r21
    15fe:	21 f5       	brne	.+72     	; 0x1648 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x96>
    1600:	25 a1       	ldd	r18, Z+37	; 0x25
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	ad 01       	movw	r20, r26
    1606:	55 27       	eor	r21, r21
    1608:	24 17       	cp	r18, r20
    160a:	35 07       	cpc	r19, r21
    160c:	e9 f4       	brne	.+58     	; 0x1648 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x96>
    160e:	9c 81       	ldd	r25, Y+4	; 0x04
    1610:	99 23       	and	r25, r25
    1612:	d1 f0       	breq	.+52     	; 0x1648 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x96>
            listeners[i].callback(
                listeners[i].port,
                gPB + IP_SRC_P,
                (gPB[UDP_SRC_PORT_H_P] << 8) | gPB[UDP_SRC_PORT_L_P],
                (const char *) (gPB + UDP_DATA_P),
                datalen);
    1614:	07 a1       	ldd	r16, Z+39	; 0x27
    1616:	10 e0       	ldi	r17, 0x00	; 0
    1618:	08 50       	subi	r16, 0x08	; 8
    161a:	11 09       	sbc	r17, r1
    161c:	86 a1       	ldd	r24, Z+38	; 0x26
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	98 2f       	mov	r25, r24
    1622:	88 27       	eor	r24, r24
    1624:	08 0f       	add	r16, r24
    1626:	19 1f       	adc	r17, r25
    1628:	42 a1       	ldd	r20, Z+34	; 0x22
    162a:	50 e0       	ldi	r21, 0x00	; 0
    162c:	54 2f       	mov	r21, r20
    162e:	44 27       	eor	r20, r20
    1630:	83 a1       	ldd	r24, Z+35	; 0x23
    1632:	48 2b       	or	r20, r24
    1634:	88 80       	ld	r8, Y
    1636:	99 80       	ldd	r9, Y+1	; 0x01
    1638:	2b e2       	ldi	r18, 0x2B	; 43
    163a:	33 e0       	ldi	r19, 0x03	; 3
    163c:	6b e1       	ldi	r22, 0x1B	; 27
    163e:	73 e0       	ldi	r23, 0x03	; 3
    1640:	cd 01       	movw	r24, r26
    1642:	f4 01       	movw	r30, r8
    1644:	19 95       	eicall
            packetProcessed = true;
    1646:	8b 2d       	mov	r24, r11
    return numListeners > 0;
}

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    bool packetProcessed = false;
    for(int i = 0; i < numListeners; i++)
    1648:	ff ef       	ldi	r31, 0xFF	; 255
    164a:	ef 1a       	sub	r14, r31
    164c:	ff 0a       	sbc	r15, r31
    164e:	25 96       	adiw	r28, 0x05	; 5
    1650:	20 91 34 05 	lds	r18, 0x0534	; 0x800534 <numListeners>
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	e2 16       	cp	r14, r18
    1658:	f3 06       	cpc	r15, r19
    165a:	44 f2       	brlt	.-112    	; 0x15ec <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x3a>
    165c:	01 c0       	rjmp	.+2      	; 0x1660 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0xae>
bool EtherCard::udpServerListening() {
    return numListeners > 0;
}

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    bool packetProcessed = false;
    165e:	80 e0       	ldi	r24, 0x00	; 0
                datalen);
            packetProcessed = true;
        }
    }
    return packetProcessed;
}
    1660:	df 91       	pop	r29
    1662:	cf 91       	pop	r28
    1664:	1f 91       	pop	r17
    1666:	0f 91       	pop	r16
    1668:	ff 90       	pop	r15
    166a:	ef 90       	pop	r14
    166c:	df 90       	pop	r13
    166e:	cf 90       	pop	r12
    1670:	bf 90       	pop	r11
    1672:	9f 90       	pop	r9
    1674:	8f 90       	pop	r8
    1676:	08 95       	ret

00001678 <_ZN9EtherCard6copyIpEPhPKh>:
#include "../Peripherals/HardwareSerial.h"
#include <stdlib.h>
#include <ctype.h>

void EtherCard::copyIp (uint8_t *dst, const uint8_t *src) {
    memcpy(dst, src, IP_LEN);
    1678:	fb 01       	movw	r30, r22
    167a:	20 81       	ld	r18, Z
    167c:	31 81       	ldd	r19, Z+1	; 0x01
    167e:	fc 01       	movw	r30, r24
    1680:	31 83       	std	Z+1, r19	; 0x01
    1682:	20 83       	st	Z, r18
    1684:	fb 01       	movw	r30, r22
    1686:	22 81       	ldd	r18, Z+2	; 0x02
    1688:	33 81       	ldd	r19, Z+3	; 0x03
    168a:	fc 01       	movw	r30, r24
    168c:	33 83       	std	Z+3, r19	; 0x03
    168e:	22 83       	std	Z+2, r18	; 0x02
    1690:	08 95       	ret

00001692 <_ZN9EtherCard7copyMacEPhPKh>:
}

void EtherCard::copyMac (uint8_t *dst, const uint8_t *src) {
    1692:	dc 01       	movw	r26, r24
    memcpy(dst, src, ETH_LEN);
    1694:	96 e0       	ldi	r25, 0x06	; 6
    1696:	fb 01       	movw	r30, r22
    1698:	01 90       	ld	r0, Z+
    169a:	0d 92       	st	X+, r0
    169c:	9a 95       	dec	r25
    169e:	e1 f7       	brne	.-8      	; 0x1698 <_ZN9EtherCard7copyMacEPhPKh+0x6>
    16a0:	08 95       	ret

000016a2 <_ZN9EtherComm13CheckChecksumEPKch>:
	}
}

bool EtherComm::CheckChecksum(const char *data, uint8_t len){
  //data++; //Ignore first byte, the start byte.
  uint8_t checksum = (uint8_t)(*(data++)); //Start by 'adding' the command to the checksum
    16a2:	fc 01       	movw	r30, r24
    16a4:	20 81       	ld	r18, Z
  checksum += (uint8_t)(*(data++));
    16a6:	dc 01       	movw	r26, r24
    16a8:	12 96       	adiw	r26, 0x02	; 2
    16aa:	81 81       	ldd	r24, Z+1	; 0x01
    16ac:	92 2f       	mov	r25, r18
    16ae:	98 0f       	add	r25, r24
  while(len-- > 0){
    16b0:	3f ef       	ldi	r19, 0xFF	; 255
    16b2:	36 0f       	add	r19, r22
    16b4:	66 23       	and	r22, r22
    16b6:	61 f0       	breq	.+24     	; 0x16d0 <_ZN9EtherComm13CheckChecksumEPKch+0x2e>
    16b8:	fd 01       	movw	r30, r26
    16ba:	83 2f       	mov	r24, r19
    checksum += (uint8_t)(*(data++));
    16bc:	21 91       	ld	r18, Z+
    16be:	92 0f       	add	r25, r18

bool EtherComm::CheckChecksum(const char *data, uint8_t len){
  //data++; //Ignore first byte, the start byte.
  uint8_t checksum = (uint8_t)(*(data++)); //Start by 'adding' the command to the checksum
  checksum += (uint8_t)(*(data++));
  while(len-- > 0){
    16c0:	81 50       	subi	r24, 0x01	; 1
    16c2:	e0 f7       	brcc	.-8      	; 0x16bc <_ZN9EtherComm13CheckChecksumEPKch+0x1a>
    16c4:	23 2f       	mov	r18, r19
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	2f 5f       	subi	r18, 0xFF	; 255
    16ca:	3f 4f       	sbci	r19, 0xFF	; 255
    16cc:	a2 0f       	add	r26, r18
    16ce:	b3 1f       	adc	r27, r19
    checksum += (uint8_t)(*(data++));
  }
//  Serial.println((uint8_t)(checksum & CHECKSUM_MASK));
  return (checksum & CHECKSUM_MASK) == (uint8_t)(*data);
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	2c 91       	ld	r18, X
    16d4:	29 13       	cpse	r18, r25
    16d6:	80 e0       	ldi	r24, 0x00	; 0
}
    16d8:	08 95       	ret

000016da <_Z10udpReceivejPhjPKcj>:

//char EtherComm::buffer[BUFFER_SIZE];
uint8_t* EtherComm::buffer = ether.buffer + UDP_DATA_P;

//callback that prints received packets to the serial port
void udpReceive(uint16_t dest_port, uint8_t src_ip[IP_LEN], uint16_t src_port, const char *data, uint16_t packetLen){
    16da:	0f 93       	push	r16
    16dc:	1f 93       	push	r17
    16de:	cf 93       	push	r28
    16e0:	df 93       	push	r29
	}
	Serial.println();
	Serial.print("Checksum: ");
	Serial.println((uint8_t)(*index));
*/	
	if(packetLen >= 3){ //At minimum, start byte, command, and checksum.
    16e2:	a8 01       	movw	r20, r16
    16e4:	43 50       	subi	r20, 0x03	; 3
    16e6:	51 09       	sbc	r21, r1
    16e8:	4f 3f       	cpi	r20, 0xFF	; 255
    16ea:	51 05       	cpc	r21, r1
    16ec:	09 f0       	breq	.+2      	; 0x16f0 <_Z10udpReceivejPhjPKcj+0x16>
    16ee:	88 f4       	brcc	.+34     	; 0x1712 <_Z10udpReceivejPhjPKcj+0x38>
		if(packetLen <= 258){
			uint8_t dataLen = (uint8_t)(packetLen - 3);
			if((uint8_t)data[0] == START_BYTE){
    16f0:	f9 01       	movw	r30, r18
    16f2:	80 81       	ld	r24, Z
    16f4:	8f 3f       	cpi	r24, 0xFF	; 255
    16f6:	69 f4       	brne	.+26     	; 0x1712 <_Z10udpReceivejPhjPKcj+0x38>
    16f8:	e9 01       	movw	r28, r18
	Serial.print("Checksum: ");
	Serial.println((uint8_t)(*index));
*/	
	if(packetLen >= 3){ //At minimum, start byte, command, and checksum.
		if(packetLen <= 258){
			uint8_t dataLen = (uint8_t)(packetLen - 3);
    16fa:	03 50       	subi	r16, 0x03	; 3
			if((uint8_t)data[0] == START_BYTE){
			//		Serial.print("Computed Checksum: ");
				if(EtherComm::CheckChecksum(data, dataLen)){
    16fc:	60 2f       	mov	r22, r16
    16fe:	c9 01       	movw	r24, r18
    1700:	d0 df       	rcall	.-96     	; 0x16a2 <_ZN9EtherComm13CheckChecksumEPKch>
    1702:	88 23       	and	r24, r24
    1704:	31 f0       	breq	.+12     	; 0x1712 <_Z10udpReceivejPhjPKcj+0x38>
					EtherComm::CommandReceived((uint8_t)data[1], (const uint8_t*)(data + 2), dataLen);
    1706:	be 01       	movw	r22, r28
    1708:	6e 5f       	subi	r22, 0xFE	; 254
    170a:	7f 4f       	sbci	r23, 0xFF	; 255
    170c:	40 2f       	mov	r20, r16
    170e:	89 81       	ldd	r24, Y+1	; 0x01
    1710:	90 d9       	rcall	.-3296   	; 0xa32 <_ZN9EtherComm15CommandReceivedEhPKhh>
				}
			}
		}
	}
}
    1712:	df 91       	pop	r29
    1714:	cf 91       	pop	r28
    1716:	1f 91       	pop	r17
    1718:	0f 91       	pop	r16
    171a:	08 95       	ret

0000171c <_ZN9EtherComm5beginEjjRVhS1_h>:
  }
//  Serial.println((uint8_t)(checksum & CHECKSUM_MASK));
  return (checksum & CHECKSUM_MASK) == (uint8_t)(*data);
}

bool EtherComm::begin(uint16_t recvPort, uint16_t destPort, Register& csDDR, Register& csPort, uint8_t csPin){
    171c:	0f 93       	push	r16
    171e:	cf 93       	push	r28
    1720:	df 93       	push	r29
    1722:	ec 01       	movw	r28, r24
    1724:	ca 01       	movw	r24, r20
    1726:	a9 01       	movw	r20, r18
    1728:	20 2f       	mov	r18, r16
  EtherComm::_recvPort = recvPort;
    172a:	d0 93 60 05 	sts	0x0560, r29	; 0x800560 <_ZN9EtherComm9_recvPortE+0x1>
    172e:	c0 93 5f 05 	sts	0x055F, r28	; 0x80055f <_ZN9EtherComm9_recvPortE>
  EtherComm::_destPort = destPort;
    1732:	70 93 5e 05 	sts	0x055E, r23	; 0x80055e <_ZN9EtherComm9_destPortE+0x1>
    1736:	60 93 5d 05 	sts	0x055D, r22	; 0x80055d <_ZN9EtherComm9_destPortE>
  
  if (ether.begin(EtherComm::_mymac, csDDR, csPort, csPin) == 0) return false;
    173a:	bc 01       	movw	r22, r24
    173c:	86 e0       	ldi	r24, 0x06	; 6
    173e:	92 e0       	ldi	r25, 0x02	; 2
    1740:	d3 db       	rcall	.-2138   	; 0xee8 <_ZN9EtherCard5beginEPKhRVhS3_h>
    1742:	88 23       	and	r24, r24
    1744:	79 f0       	breq	.+30     	; 0x1764 <_ZN9EtherComm5beginEjjRVhS1_h+0x48>
  ether.staticSetup(EtherComm::_myip, EtherComm::_gwip);
    1746:	20 e0       	ldi	r18, 0x00	; 0
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	40 e0       	ldi	r20, 0x00	; 0
    174c:	50 e0       	ldi	r21, 0x00	; 0
    174e:	6c e0       	ldi	r22, 0x0C	; 12
    1750:	72 e0       	ldi	r23, 0x02	; 2
    1752:	80 e1       	ldi	r24, 0x10	; 16
    1754:	92 e0       	ldi	r25, 0x02	; 2
    1756:	e1 db       	rcall	.-2110   	; 0xf1a <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_>
  ether.printIp("GW:  ", ether.gwip);
  ether.printIp("DNS: ", ether.dnsip);
  */
  
  //Register the udpSerialPrint() method to listen to port the receive port.
  ether.udpServerListenOnPort(&udpReceive, recvPort);
    1758:	be 01       	movw	r22, r28
    175a:	8d e6       	ldi	r24, 0x6D	; 109
    175c:	9b e0       	ldi	r25, 0x0B	; 11
    175e:	08 df       	rcall	.-496    	; 0x1570 <_ZN9EtherCard21udpServerListenOnPortEPFvjPhjPKcjEj>
  
  return true;
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	01 c0       	rjmp	.+2      	; 0x1766 <_ZN9EtherComm5beginEjjRVhS1_h+0x4a>

bool EtherComm::begin(uint16_t recvPort, uint16_t destPort, Register& csDDR, Register& csPort, uint8_t csPin){
  EtherComm::_recvPort = recvPort;
  EtherComm::_destPort = destPort;
  
  if (ether.begin(EtherComm::_mymac, csDDR, csPort, csPin) == 0) return false;
    1764:	80 e0       	ldi	r24, 0x00	; 0
  
  //Register the udpSerialPrint() method to listen to port the receive port.
  ether.udpServerListenOnPort(&udpReceive, recvPort);
  
  return true;
}
    1766:	df 91       	pop	r29
    1768:	cf 91       	pop	r28
    176a:	0f 91       	pop	r16
    176c:	08 95       	ret

0000176e <_ZN9EtherComm11SendCommandEhh>:

void EtherComm::SendCommand(uint8_t cmd, uint8_t len){
    176e:	0f 93       	push	r16
    1770:	1f 93       	push	r17
    1772:	cf 93       	push	r28
    1774:	df 93       	push	r29
  EtherComm::buffer[0] = START_BYTE;
    1776:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    177a:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    177e:	9f ef       	ldi	r25, 0xFF	; 255
    1780:	90 83       	st	Z, r25
  EtherComm::buffer[1] = cmd;
    1782:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    1786:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    178a:	81 83       	std	Z+1, r24	; 0x01
  //EtherComm::buffer[2] = len;
  
  uint8_t checksum = START_BYTE + cmd;
    178c:	81 50       	subi	r24, 0x01	; 1
  uint8_t* index = &EtherComm::buffer[2]; //TODO why is char* being used? convert ot uint8_t*!!
    178e:	c0 91 00 02 	lds	r28, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    1792:	d0 91 01 02 	lds	r29, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    1796:	de 01       	movw	r26, r28
    1798:	12 96       	adiw	r26, 0x02	; 2
  uint8_t bytes = len;
  while(bytes-- > 0){
    179a:	4f ef       	ldi	r20, 0xFF	; 255
    179c:	46 0f       	add	r20, r22
    179e:	66 23       	and	r22, r22
    17a0:	81 f0       	breq	.+32     	; 0x17c2 <_ZN9EtherComm11SendCommandEhh+0x54>
    17a2:	fd 01       	movw	r30, r26
    17a4:	50 e0       	ldi	r21, 0x00	; 0
    17a6:	9a 01       	movw	r18, r20
    17a8:	2d 5f       	subi	r18, 0xFD	; 253
    17aa:	3f 4f       	sbci	r19, 0xFF	; 255
    17ac:	2c 0f       	add	r18, r28
    17ae:	3d 1f       	adc	r19, r29
    checksum += (uint8_t)(*(index++));  
    17b0:	91 91       	ld	r25, Z+
    17b2:	89 0f       	add	r24, r25
  //EtherComm::buffer[2] = len;
  
  uint8_t checksum = START_BYTE + cmd;
  uint8_t* index = &EtherComm::buffer[2]; //TODO why is char* being used? convert ot uint8_t*!!
  uint8_t bytes = len;
  while(bytes-- > 0){
    17b4:	e2 17       	cp	r30, r18
    17b6:	f3 07       	cpc	r31, r19
    17b8:	d9 f7       	brne	.-10     	; 0x17b0 <_ZN9EtherComm11SendCommandEhh+0x42>
    17ba:	4f 5f       	subi	r20, 0xFF	; 255
    17bc:	5f 4f       	sbci	r21, 0xFF	; 255
    17be:	a4 0f       	add	r26, r20
    17c0:	b5 1f       	adc	r27, r21
    checksum += (uint8_t)(*(index++));  
  }
  (*index) = (uint8_t)(checksum & CHECKSUM_MASK);
    17c2:	8c 93       	st	X, r24

  //Serial.print("Send: ");
  //Serial.println(len);
  ether.sendUdp(EtherComm::buffer, (uint16_t)len + (uint16_t)3, _recvPort, _destIP, _destPort);
    17c4:	00 91 5d 05 	lds	r16, 0x055D	; 0x80055d <_ZN9EtherComm9_destPortE>
    17c8:	10 91 5e 05 	lds	r17, 0x055E	; 0x80055e <_ZN9EtherComm9_destPortE+0x1>
    17cc:	40 91 5f 05 	lds	r20, 0x055F	; 0x80055f <_ZN9EtherComm9_recvPortE>
    17d0:	50 91 60 05 	lds	r21, 0x0560	; 0x800560 <_ZN9EtherComm9_recvPortE+0x1>
    17d4:	70 e0       	ldi	r23, 0x00	; 0
    17d6:	6d 5f       	subi	r22, 0xFD	; 253
    17d8:	7f 4f       	sbci	r23, 0xFF	; 255
    17da:	22 e0       	ldi	r18, 0x02	; 2
    17dc:	32 e0       	ldi	r19, 0x02	; 2
    17de:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    17e2:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    17e6:	52 dd       	rcall	.-1372   	; 0x128c <_ZN9EtherCard7sendUdpEPKhjjS1_j>
}
    17e8:	df 91       	pop	r29
    17ea:	cf 91       	pop	r28
    17ec:	1f 91       	pop	r17
    17ee:	0f 91       	pop	r16
    17f0:	08 95       	ret

000017f2 <main>:
#define MIN 550
#define MAX 2400

int main(void){
	//TestIMU();
	sei(); //Enable global interrupts
    17f2:	78 94       	sei
	public:
	inline HardwareSerial(
	volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
	volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
	volatile uint8_t *ucsrc, volatile uint8_t *udr);
	void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    17f4:	26 e0       	ldi	r18, 0x06	; 6
    17f6:	40 e8       	ldi	r20, 0x80	; 128
    17f8:	55 e2       	ldi	r21, 0x25	; 37
    17fa:	60 e0       	ldi	r22, 0x00	; 0
    17fc:	70 e0       	ldi	r23, 0x00	; 0
    17fe:	86 e6       	ldi	r24, 0x66	; 102
    1800:	95 e0       	ldi	r25, 0x05	; 5
    1802:	21 d1       	rcall	.+578    	; 0x1a46 <_ZN14HardwareSerial5beginEmh>
	Serial.begin(9600);
	Serial.println("\nInitializing...");
    1804:	6b e2       	ldi	r22, 0x2B	; 43
    1806:	72 e0       	ldi	r23, 0x02	; 2
    1808:	86 e6       	ldi	r24, 0x66	; 102
    180a:	95 e0       	ldi	r25, 0x05	; 5
    180c:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <_ZN5Print7printlnEPKc>
	
	if(!rov.begin()){
    1810:	0e 94 02 15 	call	0x2a04	; 0x2a04 <_ZN5Robot5beginEv>
    1814:	81 11       	cpse	r24, r1
    1816:	07 c0       	rjmp	.+14     	; 0x1826 <main+0x34>
		Serial.println("Failed to initialize robot.");
    1818:	6c e3       	ldi	r22, 0x3C	; 60
    181a:	72 e0       	ldi	r23, 0x02	; 2
    181c:	86 e6       	ldi	r24, 0x66	; 102
    181e:	95 e0       	ldi	r25, 0x05	; 5
    1820:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <_ZN5Print7printlnEPKc>
    1824:	ff cf       	rjmp	.-2      	; 0x1824 <main+0x32>
		while(1);
	}
	Serial.println("Robot initialized.");
    1826:	68 e5       	ldi	r22, 0x58	; 88
    1828:	72 e0       	ldi	r23, 0x02	; 2
    182a:	86 e6       	ldi	r24, 0x66	; 102
    182c:	95 e0       	ldi	r25, 0x05	; 5
    182e:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <_ZN5Print7printlnEPKc>
	
	if(!EtherComm::begin((uint16_t)6001, (uint16_t)6002, EthernetDDR, EthernetPort, EthernetPin_CS)){
    1832:	01 e0       	ldi	r16, 0x01	; 1
    1834:	25 e2       	ldi	r18, 0x25	; 37
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	44 e2       	ldi	r20, 0x24	; 36
    183a:	50 e0       	ldi	r21, 0x00	; 0
    183c:	62 e7       	ldi	r22, 0x72	; 114
    183e:	77 e1       	ldi	r23, 0x17	; 23
    1840:	81 e7       	ldi	r24, 0x71	; 113
    1842:	97 e1       	ldi	r25, 0x17	; 23
    1844:	6b df       	rcall	.-298    	; 0x171c <_ZN9EtherComm5beginEjjRVhS1_h>
    1846:	81 11       	cpse	r24, r1
    1848:	07 c0       	rjmp	.+14     	; 0x1858 <main+0x66>
		Serial.println("Failed to access Ethernet controller.");
    184a:	6b e6       	ldi	r22, 0x6B	; 107
    184c:	72 e0       	ldi	r23, 0x02	; 2
    184e:	86 e6       	ldi	r24, 0x66	; 102
    1850:	95 e0       	ldi	r25, 0x05	; 5
    1852:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <_ZN5Print7printlnEPKc>
    1856:	ff cf       	rjmp	.-2      	; 0x1856 <main+0x64>
		while(1);
	}
	Serial.println("Connected to controller.");
    1858:	61 e9       	ldi	r22, 0x91	; 145
    185a:	72 e0       	ldi	r23, 0x02	; 2
    185c:	86 e6       	ldi	r24, 0x66	; 102
    185e:	95 e0       	ldi	r25, 0x05	; 5
    1860:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <_ZN5Print7printlnEPKc>
  static bool begin(uint16_t recvPort, uint16_t destPort, Register& csDDR, Register& csPort, uint8_t csPin);

  friend void udpReceive(uint16_t dest_port, uint8_t src_ip[IP_LEN], uint16_t src_port, const char *data, uint16_t len);

  static void Loop(){
    ether.packetLoop(ether.packetReceive());
    1864:	dc da       	rcall	.-2632   	; 0xe1e <_ZN8ENC28J6013packetReceiveEv>
    1866:	4b dd       	rcall	.-1386   	; 0x12fe <_ZN9EtherCard10packetLoopEj>
    1868:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <_ZN5Robot4LoopEv>
	*/
    /* Replace with your application code */
	//TwiServo.begin();
    while (1) {
		EtherComm::Loop();
		rov.Loop();
    186c:	fb cf       	rjmp	.-10     	; 0x1864 <main+0x72>

0000186e <_GLOBAL__sub_I_dir>:
    186e:	60 e4       	ldi	r22, 0x40	; 64
int8_t dir = 1;
uint8_t pos = 128;
#include "Utils/CpuFreq.h"
#include <util/delay.h>

TwiServoController TwiServo(0x40);
    1870:	81 e6       	ldi	r24, 0x61	; 97
    1872:	95 e0       	ldi	r25, 0x05	; 5
    1874:	04 c0       	rjmp	.+8      	; 0x187e <_ZN18TwiServoControllerC1Eh>
    1876:	08 95       	ret

00001878 <_ZN7PCA9685C1Eh>:
#define FREQUENCY_OSCILLATOR 25000000 /**< Int. osc. frequency in datasheet */

#define PCA9685_PRESCALE_MIN 3   /**< minimum prescale value */
#define PCA9685_PRESCALE_MAX 255 /**< maximum prescale value */

PCA9685::PCA9685(const uint8_t addr) : _addr(addr){
    1878:	fc 01       	movw	r30, r24
    187a:	60 83       	st	Z, r22
    187c:	08 95       	ret

0000187e <_ZN18TwiServoControllerC1Eh>:

#include "TwiServoController.h"
#include "../Utils/CpuFreq.h"
#include <util/delay.h>

TwiServoController::TwiServoController(const uint8_t addr) : controller(addr){
    187e:	fc cf       	rjmp	.-8      	; 0x1878 <_ZN7PCA9685C1Eh>
    1880:	08 95       	ret

00001882 <_ZN14HardwareSerial9availableEv>:
	#endif
	#if defined(HAVE_HWSERIAL2)
	if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
	#endif
	#if defined(HAVE_HWSERIAL3)
	if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    1882:	fc 01       	movw	r30, r24
    1884:	97 85       	ldd	r25, Z+15	; 0x0f
    1886:	20 89       	ldd	r18, Z+16	; 0x10
    1888:	89 2f       	mov	r24, r25
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	80 5c       	subi	r24, 0xC0	; 192
    188e:	9f 4f       	sbci	r25, 0xFF	; 255
    1890:	82 1b       	sub	r24, r18
    1892:	91 09       	sbc	r25, r1
    1894:	8f 73       	andi	r24, 0x3F	; 63
    1896:	99 27       	eor	r25, r25
    1898:	08 95       	ret

0000189a <_ZN14HardwareSerial4peekEv>:
    189a:	fc 01       	movw	r30, r24
    189c:	97 85       	ldd	r25, Z+15	; 0x0f
    189e:	80 89       	ldd	r24, Z+16	; 0x10
    18a0:	98 17       	cp	r25, r24
    18a2:	31 f0       	breq	.+12     	; 0x18b0 <_ZN14HardwareSerial4peekEv+0x16>
    18a4:	80 89       	ldd	r24, Z+16	; 0x10
    18a6:	e8 0f       	add	r30, r24
    18a8:	f1 1d       	adc	r31, r1
    18aa:	83 89       	ldd	r24, Z+19	; 0x13
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	08 95       	ret
    18b0:	8f ef       	ldi	r24, 0xFF	; 255
    18b2:	9f ef       	ldi	r25, 0xFF	; 255
    18b4:	08 95       	ret

000018b6 <_ZN14HardwareSerial4readEv>:
    18b6:	fc 01       	movw	r30, r24
    18b8:	97 85       	ldd	r25, Z+15	; 0x0f
    18ba:	80 89       	ldd	r24, Z+16	; 0x10
    18bc:	98 17       	cp	r25, r24
    18be:	61 f0       	breq	.+24     	; 0x18d8 <_ZN14HardwareSerial4readEv+0x22>
    18c0:	80 89       	ldd	r24, Z+16	; 0x10
    18c2:	df 01       	movw	r26, r30
    18c4:	a8 0f       	add	r26, r24
    18c6:	b1 1d       	adc	r27, r1
    18c8:	53 96       	adiw	r26, 0x13	; 19
    18ca:	8c 91       	ld	r24, X
    18cc:	90 89       	ldd	r25, Z+16	; 0x10
    18ce:	9f 5f       	subi	r25, 0xFF	; 255
    18d0:	9f 73       	andi	r25, 0x3F	; 63
    18d2:	90 8b       	std	Z+16, r25	; 0x10
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	08 95       	ret
    18d8:	8f ef       	ldi	r24, 0xFF	; 255
    18da:	9f ef       	ldi	r25, 0xFF	; 255
    18dc:	08 95       	ret

000018de <_ZN14HardwareSerial17availableForWriteEv>:
    18de:	fc 01       	movw	r30, r24
    18e0:	21 89       	ldd	r18, Z+17	; 0x11
    18e2:	32 89       	ldd	r19, Z+18	; 0x12
    18e4:	23 17       	cp	r18, r19
    18e6:	38 f0       	brcs	.+14     	; 0x18f6 <_ZN14HardwareSerial17availableForWriteEv+0x18>
    18e8:	8f e3       	ldi	r24, 0x3F	; 63
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	82 1b       	sub	r24, r18
    18ee:	91 09       	sbc	r25, r1
    18f0:	83 0f       	add	r24, r19
    18f2:	91 1d       	adc	r25, r1
    18f4:	08 95       	ret
    18f6:	83 2f       	mov	r24, r19
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	82 1b       	sub	r24, r18
    18fc:	91 09       	sbc	r25, r1
    18fe:	01 97       	sbiw	r24, 0x01	; 1
    1900:	08 95       	ret

00001902 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1902:	fc 01       	movw	r30, r24
	// If interrupts are enabled, there must be more data in the output
	// buffer. Send the next byte
	unsigned char c = _tx_buffer[_tx_buffer_tail];
    1904:	82 89       	ldd	r24, Z+18	; 0x12
    1906:	df 01       	movw	r26, r30
    1908:	a8 0f       	add	r26, r24
    190a:	b1 1d       	adc	r27, r1
    190c:	ad 5a       	subi	r26, 0xAD	; 173
    190e:	bf 4f       	sbci	r27, 0xFF	; 255
    1910:	8c 91       	ld	r24, X
	_tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1912:	22 89       	ldd	r18, Z+18	; 0x12
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	2f 5f       	subi	r18, 0xFF	; 255
    1918:	3f 4f       	sbci	r19, 0xFF	; 255
    191a:	2f 73       	andi	r18, 0x3F	; 63
    191c:	30 78       	andi	r19, 0x80	; 128
    191e:	33 23       	and	r19, r19
    1920:	34 f4       	brge	.+12     	; 0x192e <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x2c>
    1922:	21 50       	subi	r18, 0x01	; 1
    1924:	31 09       	sbc	r19, r1
    1926:	20 6c       	ori	r18, 0xC0	; 192
    1928:	3f 6f       	ori	r19, 0xFF	; 255
    192a:	2f 5f       	subi	r18, 0xFF	; 255
    192c:	3f 4f       	sbci	r19, 0xFF	; 255
    192e:	22 8b       	std	Z+18, r18	; 0x12

	*_udr = c;
    1930:	a4 85       	ldd	r26, Z+12	; 0x0c
    1932:	b5 85       	ldd	r27, Z+13	; 0x0d
    1934:	8c 93       	st	X, r24
	// location". This makes sure flush() won't return until the bytes
	// actually got written. Other r/w bits are preserved, and zeroes
	// written to the rest.

	#ifdef MPCM0
	*_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1936:	a6 81       	ldd	r26, Z+6	; 0x06
    1938:	b7 81       	ldd	r27, Z+7	; 0x07
    193a:	8c 91       	ld	r24, X
    193c:	83 70       	andi	r24, 0x03	; 3
    193e:	80 64       	ori	r24, 0x40	; 64
    1940:	8c 93       	st	X, r24
	#else
	*_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
	#endif

	if (_tx_buffer_head == _tx_buffer_tail) {
    1942:	91 89       	ldd	r25, Z+17	; 0x11
    1944:	82 89       	ldd	r24, Z+18	; 0x12
    1946:	98 13       	cpse	r25, r24
    1948:	06 c0       	rjmp	.+12     	; 0x1956 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x54>
		// Buffer empty, so disable interrupts
		cbi(*_ucsrb, UDRIE0);
    194a:	00 84       	ldd	r0, Z+8	; 0x08
    194c:	f1 85       	ldd	r31, Z+9	; 0x09
    194e:	e0 2d       	mov	r30, r0
    1950:	80 81       	ld	r24, Z
    1952:	8f 7d       	andi	r24, 0xDF	; 223
    1954:	80 83       	st	Z, r24
    1956:	08 95       	ret

00001958 <_ZN14HardwareSerial5flushEv>:
	if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
	return tail - head - 1;
}

void HardwareSerial::flush()
{
    1958:	cf 93       	push	r28
    195a:	df 93       	push	r29
    195c:	ec 01       	movw	r28, r24
	// If we have never written a byte, no need to flush. This special
	// case is needed since there is no way to force the TXC (transmit
	// complete) bit to 1 during initialization
	if (!_written)
    195e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1960:	88 23       	and	r24, r24
    1962:	d1 f0       	breq	.+52     	; 0x1998 <_ZN14HardwareSerial5flushEv+0x40>
	return;

	while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1964:	e8 85       	ldd	r30, Y+8	; 0x08
    1966:	f9 85       	ldd	r31, Y+9	; 0x09
    1968:	80 81       	ld	r24, Z
    196a:	85 fd       	sbrc	r24, 5
    196c:	05 c0       	rjmp	.+10     	; 0x1978 <_ZN14HardwareSerial5flushEv+0x20>
    196e:	ae 81       	ldd	r26, Y+6	; 0x06
    1970:	bf 81       	ldd	r27, Y+7	; 0x07
    1972:	8c 91       	ld	r24, X
    1974:	86 fd       	sbrc	r24, 6
    1976:	10 c0       	rjmp	.+32     	; 0x1998 <_ZN14HardwareSerial5flushEv+0x40>
		if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1978:	0f b6       	in	r0, 0x3f	; 63
    197a:	07 fc       	sbrc	r0, 7
    197c:	f5 cf       	rjmp	.-22     	; 0x1968 <_ZN14HardwareSerial5flushEv+0x10>
    197e:	80 81       	ld	r24, Z
    1980:	85 ff       	sbrs	r24, 5
    1982:	f2 cf       	rjmp	.-28     	; 0x1968 <_ZN14HardwareSerial5flushEv+0x10>
    1984:	03 c0       	rjmp	.+6      	; 0x198c <_ZN14HardwareSerial5flushEv+0x34>
		// Interrupts are globally disabled, but the DR empty
		// interrupt should be enabled, so poll the DR empty flag to
		// prevent deadlock
		if (bit_is_set(*_ucsra, UDRE0))
		_tx_udr_empty_irq();
    1986:	ce 01       	movw	r24, r28
    1988:	bc df       	rcall	.-136    	; 0x1902 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    198a:	ec cf       	rjmp	.-40     	; 0x1964 <_ZN14HardwareSerial5flushEv+0xc>
	while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
		if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
		// Interrupts are globally disabled, but the DR empty
		// interrupt should be enabled, so poll the DR empty flag to
		// prevent deadlock
		if (bit_is_set(*_ucsra, UDRE0))
    198c:	ae 81       	ldd	r26, Y+6	; 0x06
    198e:	bf 81       	ldd	r27, Y+7	; 0x07
    1990:	8c 91       	ld	r24, X
    1992:	85 ff       	sbrs	r24, 5
    1994:	e9 cf       	rjmp	.-46     	; 0x1968 <_ZN14HardwareSerial5flushEv+0x10>
    1996:	f7 cf       	rjmp	.-18     	; 0x1986 <_ZN14HardwareSerial5flushEv+0x2e>
		_tx_udr_empty_irq();
	}
	// If we get here, nothing is queued anymore (DRIE is disabled) and
	// the hardware finished tranmission (TXC is set).
}
    1998:	df 91       	pop	r29
    199a:	cf 91       	pop	r28
    199c:	08 95       	ret

0000199e <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    199e:	0f 93       	push	r16
    19a0:	1f 93       	push	r17
    19a2:	cf 93       	push	r28
    19a4:	df 93       	push	r29
    19a6:	ec 01       	movw	r28, r24
	_written = true;
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	8e 87       	std	Y+14, r24	; 0x0e
	// If the buffer and the data register is empty, just write the byte
	// to the data register and be done. This shortcut helps
	// significantly improve the effective datarate at high (>
	// 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
	if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    19ac:	99 89       	ldd	r25, Y+17	; 0x11
    19ae:	8a 89       	ldd	r24, Y+18	; 0x12
    19b0:	98 13       	cpse	r25, r24
    19b2:	25 c0       	rjmp	.+74     	; 0x19fe <_ZN14HardwareSerial5writeEh+0x60>
    19b4:	ee 81       	ldd	r30, Y+6	; 0x06
    19b6:	ff 81       	ldd	r31, Y+7	; 0x07
    19b8:	80 81       	ld	r24, Z
    19ba:	85 fd       	sbrc	r24, 5
    19bc:	31 c0       	rjmp	.+98     	; 0x1a20 <_ZN14HardwareSerial5writeEh+0x82>
    19be:	1f c0       	rjmp	.+62     	; 0x19fe <_ZN14HardwareSerial5writeEh+0x60>
	}
	tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
	// If the output buffer is full, there's nothing for it other than to
	// wait for the interrupt handler to empty it a bit
	while (i == _tx_buffer_tail) {
    19c0:	8a 89       	ldd	r24, Y+18	; 0x12
    19c2:	18 13       	cpse	r17, r24
    19c4:	0b c0       	rjmp	.+22     	; 0x19dc <_ZN14HardwareSerial5writeEh+0x3e>
		if (bit_is_clear(SREG, SREG_I)) {
    19c6:	0f b6       	in	r0, 0x3f	; 63
    19c8:	07 fc       	sbrc	r0, 7
    19ca:	fa cf       	rjmp	.-12     	; 0x19c0 <_ZN14HardwareSerial5writeEh+0x22>
			// Interrupts are disabled, so we'll have to poll the data
			// register empty flag ourselves. If it is set, pretend an
			// interrupt has happened and call the handler to free up
			// space for us.
			if(bit_is_set(*_ucsra, UDRE0))
    19cc:	ee 81       	ldd	r30, Y+6	; 0x06
    19ce:	ff 81       	ldd	r31, Y+7	; 0x07
    19d0:	80 81       	ld	r24, Z
    19d2:	85 ff       	sbrs	r24, 5
    19d4:	f5 cf       	rjmp	.-22     	; 0x19c0 <_ZN14HardwareSerial5writeEh+0x22>
			_tx_udr_empty_irq();
    19d6:	ce 01       	movw	r24, r28
    19d8:	94 df       	rcall	.-216    	; 0x1902 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    19da:	f2 cf       	rjmp	.-28     	; 0x19c0 <_ZN14HardwareSerial5writeEh+0x22>
			} else {
			// nop, the interrupt handler will free up space for us
		}
	}

	_tx_buffer[_tx_buffer_head] = c;
    19dc:	89 89       	ldd	r24, Y+17	; 0x11
    19de:	fe 01       	movw	r30, r28
    19e0:	e8 0f       	add	r30, r24
    19e2:	f1 1d       	adc	r31, r1
    19e4:	ed 5a       	subi	r30, 0xAD	; 173
    19e6:	ff 4f       	sbci	r31, 0xFF	; 255
    19e8:	00 83       	st	Z, r16

	// make atomic to prevent execution of ISR between setting the
	// head pointer and setting the interrupt flag resulting in buffer
	// retransmission
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    19ea:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    19ec:	f8 94       	cli
		_tx_buffer_head = i;
    19ee:	19 8b       	std	Y+17, r17	; 0x11
		sbi(*_ucsrb, UDRIE0);
    19f0:	e8 85       	ldd	r30, Y+8	; 0x08
    19f2:	f9 85       	ldd	r31, Y+9	; 0x09
    19f4:	80 81       	ld	r24, Z
    19f6:	80 62       	ori	r24, 0x20	; 32
    19f8:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    19fa:	9f bf       	out	0x3f, r25	; 63
	}
	
	return 1;
    19fc:	1d c0       	rjmp	.+58     	; 0x1a38 <_ZN14HardwareSerial5writeEh+0x9a>
			*_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
			#endif
		}
		return 1;
	}
	tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    19fe:	29 89       	ldd	r18, Y+17	; 0x11
    1a00:	30 e0       	ldi	r19, 0x00	; 0
    1a02:	2f 5f       	subi	r18, 0xFF	; 255
    1a04:	3f 4f       	sbci	r19, 0xFF	; 255
    1a06:	2f 73       	andi	r18, 0x3F	; 63
    1a08:	30 78       	andi	r19, 0x80	; 128
    1a0a:	33 23       	and	r19, r19
    1a0c:	34 f4       	brge	.+12     	; 0x1a1a <_ZN14HardwareSerial5writeEh+0x7c>
    1a0e:	21 50       	subi	r18, 0x01	; 1
    1a10:	31 09       	sbc	r19, r1
    1a12:	20 6c       	ori	r18, 0xC0	; 192
    1a14:	3f 6f       	ori	r19, 0xFF	; 255
    1a16:	2f 5f       	subi	r18, 0xFF	; 255
    1a18:	3f 4f       	sbci	r19, 0xFF	; 255
    1a1a:	06 2f       	mov	r16, r22
    1a1c:	12 2f       	mov	r17, r18
    1a1e:	d0 cf       	rjmp	.-96     	; 0x19c0 <_ZN14HardwareSerial5writeEh+0x22>
		// So writing UDR must happen first.
		// Writing UDR and clearing TC must be done atomically, otherwise
		// interrupts might delay the TXC clear so the byte written to UDR
		// is transmitted (setting TXC) before clearing TXC. Then TXC will
		// be cleared when no bytes are left, causing flush() to hang
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1a20:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1a22:	f8 94       	cli
			*_udr = c;
    1a24:	ec 85       	ldd	r30, Y+12	; 0x0c
    1a26:	fd 85       	ldd	r31, Y+13	; 0x0d
    1a28:	60 83       	st	Z, r22
			#ifdef MPCM0
			*_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1a2a:	ee 81       	ldd	r30, Y+6	; 0x06
    1a2c:	ff 81       	ldd	r31, Y+7	; 0x07
    1a2e:	80 81       	ld	r24, Z
    1a30:	83 70       	andi	r24, 0x03	; 3
    1a32:	80 64       	ori	r24, 0x40	; 64
    1a34:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1a36:	9f bf       	out	0x3f, r25	; 63
		_tx_buffer_head = i;
		sbi(*_ucsrb, UDRIE0);
	}
	
	return 1;
}
    1a38:	81 e0       	ldi	r24, 0x01	; 1
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	df 91       	pop	r29
    1a3e:	cf 91       	pop	r28
    1a40:	1f 91       	pop	r17
    1a42:	0f 91       	pop	r16
    1a44:	08 95       	ret

00001a46 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, uint8_t config)
{
    1a46:	cf 92       	push	r12
    1a48:	df 92       	push	r13
    1a4a:	ef 92       	push	r14
    1a4c:	ff 92       	push	r15
    1a4e:	1f 93       	push	r17
    1a50:	cf 93       	push	r28
    1a52:	df 93       	push	r29
    1a54:	ec 01       	movw	r28, r24
    1a56:	6a 01       	movw	r12, r20
    1a58:	7b 01       	movw	r14, r22
    1a5a:	12 2f       	mov	r17, r18
	// Try u2x mode first
	uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
	*_ucsra = 1 << U2X0;
    1a5c:	ee 81       	ldd	r30, Y+6	; 0x06
    1a5e:	ff 81       	ldd	r31, Y+7	; 0x07
    1a60:	82 e0       	ldi	r24, 0x02	; 2
    1a62:	80 83       	st	Z, r24
	// hardcoded exception for 57600 for compatibility with the bootloader
	// shipped with the Duemilanove and previous boards and the firmware
	// on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
	// be > 4095, so switch back to non-u2x mode if the baud rate is too
	// low.
	if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1a64:	41 15       	cp	r20, r1
    1a66:	51 4e       	sbci	r21, 0xE1	; 225
    1a68:	61 05       	cpc	r22, r1
    1a6a:	71 05       	cpc	r23, r1
    1a6c:	b1 f0       	breq	.+44     	; 0x1a9a <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, uint8_t config)
{
	// Try u2x mode first
	uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1a6e:	60 e0       	ldi	r22, 0x00	; 0
    1a70:	79 e0       	ldi	r23, 0x09	; 9
    1a72:	8d e3       	ldi	r24, 0x3D	; 61
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	a7 01       	movw	r20, r14
    1a78:	96 01       	movw	r18, r12
    1a7a:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <__udivmodsi4>
    1a7e:	da 01       	movw	r26, r20
    1a80:	c9 01       	movw	r24, r18
    1a82:	01 97       	sbiw	r24, 0x01	; 1
    1a84:	a1 09       	sbc	r26, r1
    1a86:	b1 09       	sbc	r27, r1
    1a88:	b6 95       	lsr	r27
    1a8a:	a7 95       	ror	r26
    1a8c:	97 95       	ror	r25
    1a8e:	87 95       	ror	r24
    1a90:	9c 01       	movw	r18, r24
	// hardcoded exception for 57600 for compatibility with the bootloader
	// shipped with the Duemilanove and previous boards and the firmware
	// on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
	// be > 4095, so switch back to non-u2x mode if the baud rate is too
	// low.
	if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1a92:	21 15       	cp	r18, r1
    1a94:	80 e1       	ldi	r24, 0x10	; 16
    1a96:	38 07       	cpc	r19, r24
    1a98:	a8 f0       	brcs	.+42     	; 0x1ac4 <_ZN14HardwareSerial5beginEmh+0x7e>
	{
		*_ucsra = 0;
    1a9a:	ee 81       	ldd	r30, Y+6	; 0x06
    1a9c:	ff 81       	ldd	r31, Y+7	; 0x07
    1a9e:	10 82       	st	Z, r1
		baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1aa0:	60 e8       	ldi	r22, 0x80	; 128
    1aa2:	74 e8       	ldi	r23, 0x84	; 132
    1aa4:	8e e1       	ldi	r24, 0x1E	; 30
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	a7 01       	movw	r20, r14
    1aaa:	96 01       	movw	r18, r12
    1aac:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <__udivmodsi4>
    1ab0:	da 01       	movw	r26, r20
    1ab2:	c9 01       	movw	r24, r18
    1ab4:	01 97       	sbiw	r24, 0x01	; 1
    1ab6:	a1 09       	sbc	r26, r1
    1ab8:	b1 09       	sbc	r27, r1
    1aba:	b6 95       	lsr	r27
    1abc:	a7 95       	ror	r26
    1abe:	97 95       	ror	r25
    1ac0:	87 95       	ror	r24
    1ac2:	9c 01       	movw	r18, r24
	}

	// assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
	*_ubrrh = baud_setting >> 8;
    1ac4:	ea 81       	ldd	r30, Y+2	; 0x02
    1ac6:	fb 81       	ldd	r31, Y+3	; 0x03
    1ac8:	30 83       	st	Z, r19
	*_ubrrl = baud_setting;
    1aca:	ec 81       	ldd	r30, Y+4	; 0x04
    1acc:	fd 81       	ldd	r31, Y+5	; 0x05
    1ace:	20 83       	st	Z, r18

	_written = false;
    1ad0:	1e 86       	std	Y+14, r1	; 0x0e

	//set the data bits, parity, and stop bits
	#if defined(__AVR_ATmega8__)
	config |= 0x80; // select UCSRC register (shared with UBRRH)
	#endif
	*_ucsrc = config;
    1ad2:	ea 85       	ldd	r30, Y+10	; 0x0a
    1ad4:	fb 85       	ldd	r31, Y+11	; 0x0b
    1ad6:	10 83       	st	Z, r17
	
	sbi(*_ucsrb, RXEN0);
    1ad8:	e8 85       	ldd	r30, Y+8	; 0x08
    1ada:	f9 85       	ldd	r31, Y+9	; 0x09
    1adc:	80 81       	ld	r24, Z
    1ade:	80 61       	ori	r24, 0x10	; 16
    1ae0:	80 83       	st	Z, r24
	sbi(*_ucsrb, TXEN0);
    1ae2:	e8 85       	ldd	r30, Y+8	; 0x08
    1ae4:	f9 85       	ldd	r31, Y+9	; 0x09
    1ae6:	80 81       	ld	r24, Z
    1ae8:	88 60       	ori	r24, 0x08	; 8
    1aea:	80 83       	st	Z, r24
	sbi(*_ucsrb, RXCIE0);
    1aec:	e8 85       	ldd	r30, Y+8	; 0x08
    1aee:	f9 85       	ldd	r31, Y+9	; 0x09
    1af0:	80 81       	ld	r24, Z
    1af2:	80 68       	ori	r24, 0x80	; 128
    1af4:	80 83       	st	Z, r24
	cbi(*_ucsrb, UDRIE0);
    1af6:	e8 85       	ldd	r30, Y+8	; 0x08
    1af8:	f9 85       	ldd	r31, Y+9	; 0x09
    1afa:	80 81       	ld	r24, Z
    1afc:	8f 7d       	andi	r24, 0xDF	; 223
    1afe:	80 83       	st	Z, r24
}
    1b00:	df 91       	pop	r29
    1b02:	cf 91       	pop	r28
    1b04:	1f 91       	pop	r17
    1b06:	ff 90       	pop	r15
    1b08:	ef 90       	pop	r14
    1b0a:	df 90       	pop	r13
    1b0c:	cf 90       	pop	r12
    1b0e:	08 95       	ret

00001b10 <_ZN5Print17availableForWriteEv>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
}
    1b10:	80 e0       	ldi	r24, 0x00	; 0
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	08 95       	ret

00001b16 <__vector_25>:
    1b16:	1f 92       	push	r1
    1b18:	0f 92       	push	r0
    1b1a:	0f b6       	in	r0, 0x3f	; 63
    1b1c:	0f 92       	push	r0
    1b1e:	11 24       	eor	r1, r1
    1b20:	0b b6       	in	r0, 0x3b	; 59
    1b22:	0f 92       	push	r0
    1b24:	2f 93       	push	r18
    1b26:	8f 93       	push	r24
    1b28:	9f 93       	push	r25
    1b2a:	af 93       	push	r26
    1b2c:	bf 93       	push	r27
    1b2e:	ef 93       	push	r30
    1b30:	ff 93       	push	r31
    1b32:	e0 91 6c 05 	lds	r30, 0x056C	; 0x80056c <Serial+0x6>
    1b36:	f0 91 6d 05 	lds	r31, 0x056D	; 0x80056d <Serial+0x7>
    1b3a:	80 81       	ld	r24, Z
    1b3c:	82 fd       	sbrc	r24, 2
    1b3e:	14 c0       	rjmp	.+40     	; 0x1b68 <__vector_25+0x52>
    1b40:	e6 e6       	ldi	r30, 0x66	; 102
    1b42:	f5 e0       	ldi	r31, 0x05	; 5
    1b44:	a4 85       	ldd	r26, Z+12	; 0x0c
    1b46:	b5 85       	ldd	r27, Z+13	; 0x0d
    1b48:	2c 91       	ld	r18, X
    1b4a:	87 85       	ldd	r24, Z+15	; 0x0f
    1b4c:	8f 5f       	subi	r24, 0xFF	; 255
    1b4e:	8f 70       	andi	r24, 0x0F	; 15
    1b50:	90 89       	ldd	r25, Z+16	; 0x10
    1b52:	89 17       	cp	r24, r25
    1b54:	71 f0       	breq	.+28     	; 0x1b72 <__vector_25+0x5c>
    1b56:	df 01       	movw	r26, r30
    1b58:	e7 85       	ldd	r30, Z+15	; 0x0f
    1b5a:	f0 e0       	ldi	r31, 0x00	; 0
    1b5c:	ea 59       	subi	r30, 0x9A	; 154
    1b5e:	fa 4f       	sbci	r31, 0xFA	; 250
    1b60:	23 8b       	std	Z+19, r18	; 0x13
    1b62:	1f 96       	adiw	r26, 0x0f	; 15
    1b64:	8c 93       	st	X, r24
    1b66:	05 c0       	rjmp	.+10     	; 0x1b72 <__vector_25+0x5c>
    1b68:	e0 91 72 05 	lds	r30, 0x0572	; 0x800572 <Serial+0xc>
    1b6c:	f0 91 73 05 	lds	r31, 0x0573	; 0x800573 <Serial+0xd>
    1b70:	80 81       	ld	r24, Z
    1b72:	ff 91       	pop	r31
    1b74:	ef 91       	pop	r30
    1b76:	bf 91       	pop	r27
    1b78:	af 91       	pop	r26
    1b7a:	9f 91       	pop	r25
    1b7c:	8f 91       	pop	r24
    1b7e:	2f 91       	pop	r18
    1b80:	0f 90       	pop	r0
    1b82:	0b be       	out	0x3b, r0	; 59
    1b84:	0f 90       	pop	r0
    1b86:	0f be       	out	0x3f, r0	; 63
    1b88:	0f 90       	pop	r0
    1b8a:	1f 90       	pop	r1
    1b8c:	18 95       	reti

00001b8e <__vector_26>:
    1b8e:	1f 92       	push	r1
    1b90:	0f 92       	push	r0
    1b92:	0f b6       	in	r0, 0x3f	; 63
    1b94:	0f 92       	push	r0
    1b96:	11 24       	eor	r1, r1
    1b98:	0b b6       	in	r0, 0x3b	; 59
    1b9a:	0f 92       	push	r0
    1b9c:	2f 93       	push	r18
    1b9e:	3f 93       	push	r19
    1ba0:	4f 93       	push	r20
    1ba2:	5f 93       	push	r21
    1ba4:	6f 93       	push	r22
    1ba6:	7f 93       	push	r23
    1ba8:	8f 93       	push	r24
    1baa:	9f 93       	push	r25
    1bac:	af 93       	push	r26
    1bae:	bf 93       	push	r27
    1bb0:	ef 93       	push	r30
    1bb2:	ff 93       	push	r31
    1bb4:	86 e6       	ldi	r24, 0x66	; 102
    1bb6:	95 e0       	ldi	r25, 0x05	; 5
    1bb8:	a4 de       	rcall	.-696    	; 0x1902 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1bba:	ff 91       	pop	r31
    1bbc:	ef 91       	pop	r30
    1bbe:	bf 91       	pop	r27
    1bc0:	af 91       	pop	r26
    1bc2:	9f 91       	pop	r25
    1bc4:	8f 91       	pop	r24
    1bc6:	7f 91       	pop	r23
    1bc8:	6f 91       	pop	r22
    1bca:	5f 91       	pop	r21
    1bcc:	4f 91       	pop	r20
    1bce:	3f 91       	pop	r19
    1bd0:	2f 91       	pop	r18
    1bd2:	0f 90       	pop	r0
    1bd4:	0b be       	out	0x3b, r0	; 59
    1bd6:	0f 90       	pop	r0
    1bd8:	0f be       	out	0x3f, r0	; 63
    1bda:	0f 90       	pop	r0
    1bdc:	1f 90       	pop	r1
    1bde:	18 95       	reti

00001be0 <_GLOBAL__sub_I___vector_25>:
volatile uint8_t *ucsrc, volatile uint8_t *udr) :
_ubrrh(ubrrh), _ubrrl(ubrrl),
_ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
_udr(udr),
_rx_buffer_head(0), _rx_buffer_tail(0),
_tx_buffer_head(0), _tx_buffer_tail(0)
    1be0:	e6 e6       	ldi	r30, 0x66	; 102
    1be2:	f5 e0       	ldi	r31, 0x05	; 5
    1be4:	8e ea       	ldi	r24, 0xAE	; 174
    1be6:	92 e0       	ldi	r25, 0x02	; 2
    1be8:	91 83       	std	Z+1, r25	; 0x01
    1bea:	80 83       	st	Z, r24
    1bec:	85 ec       	ldi	r24, 0xC5	; 197
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	93 83       	std	Z+3, r25	; 0x03
    1bf2:	82 83       	std	Z+2, r24	; 0x02
    1bf4:	84 ec       	ldi	r24, 0xC4	; 196
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	95 83       	std	Z+5, r25	; 0x05
    1bfa:	84 83       	std	Z+4, r24	; 0x04
    1bfc:	80 ec       	ldi	r24, 0xC0	; 192
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	97 83       	std	Z+7, r25	; 0x07
    1c02:	86 83       	std	Z+6, r24	; 0x06
    1c04:	81 ec       	ldi	r24, 0xC1	; 193
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	91 87       	std	Z+9, r25	; 0x09
    1c0a:	80 87       	std	Z+8, r24	; 0x08
    1c0c:	82 ec       	ldi	r24, 0xC2	; 194
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	93 87       	std	Z+11, r25	; 0x0b
    1c12:	82 87       	std	Z+10, r24	; 0x0a
    1c14:	86 ec       	ldi	r24, 0xC6	; 198
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	95 87       	std	Z+13, r25	; 0x0d
    1c1a:	84 87       	std	Z+12, r24	; 0x0c
    1c1c:	17 86       	std	Z+15, r1	; 0x0f
    1c1e:	10 8a       	std	Z+16, r1	; 0x10
    1c20:	11 8a       	std	Z+17, r1	; 0x11
    1c22:	12 8a       	std	Z+18, r1	; 0x12
    1c24:	08 95       	ret

00001c26 <__vector_36>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
}
    1c26:	1f 92       	push	r1
    1c28:	0f 92       	push	r0
    1c2a:	0f b6       	in	r0, 0x3f	; 63
    1c2c:	0f 92       	push	r0
    1c2e:	11 24       	eor	r1, r1
    1c30:	0b b6       	in	r0, 0x3b	; 59
    1c32:	0f 92       	push	r0
    1c34:	2f 93       	push	r18
    1c36:	8f 93       	push	r24
    1c38:	9f 93       	push	r25
    1c3a:	af 93       	push	r26
    1c3c:	bf 93       	push	r27
    1c3e:	ef 93       	push	r30
    1c40:	ff 93       	push	r31
    1c42:	e0 91 9f 05 	lds	r30, 0x059F	; 0x80059f <Serial1+0x6>
    1c46:	f0 91 a0 05 	lds	r31, 0x05A0	; 0x8005a0 <Serial1+0x7>
    1c4a:	80 81       	ld	r24, Z
    1c4c:	82 fd       	sbrc	r24, 2
    1c4e:	14 c0       	rjmp	.+40     	; 0x1c78 <__vector_36+0x52>
    1c50:	e9 e9       	ldi	r30, 0x99	; 153
    1c52:	f5 e0       	ldi	r31, 0x05	; 5
    1c54:	a4 85       	ldd	r26, Z+12	; 0x0c
    1c56:	b5 85       	ldd	r27, Z+13	; 0x0d
    1c58:	2c 91       	ld	r18, X
    1c5a:	87 85       	ldd	r24, Z+15	; 0x0f
    1c5c:	8f 5f       	subi	r24, 0xFF	; 255
    1c5e:	8f 70       	andi	r24, 0x0F	; 15
    1c60:	90 89       	ldd	r25, Z+16	; 0x10
    1c62:	89 17       	cp	r24, r25
    1c64:	71 f0       	breq	.+28     	; 0x1c82 <__vector_36+0x5c>
    1c66:	df 01       	movw	r26, r30
    1c68:	e7 85       	ldd	r30, Z+15	; 0x0f
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	e7 56       	subi	r30, 0x67	; 103
    1c6e:	fa 4f       	sbci	r31, 0xFA	; 250
    1c70:	23 8b       	std	Z+19, r18	; 0x13
    1c72:	1f 96       	adiw	r26, 0x0f	; 15
    1c74:	8c 93       	st	X, r24
    1c76:	05 c0       	rjmp	.+10     	; 0x1c82 <__vector_36+0x5c>
    1c78:	e0 91 a5 05 	lds	r30, 0x05A5	; 0x8005a5 <Serial1+0xc>
    1c7c:	f0 91 a6 05 	lds	r31, 0x05A6	; 0x8005a6 <Serial1+0xd>
    1c80:	80 81       	ld	r24, Z
    1c82:	ff 91       	pop	r31
    1c84:	ef 91       	pop	r30
    1c86:	bf 91       	pop	r27
    1c88:	af 91       	pop	r26
    1c8a:	9f 91       	pop	r25
    1c8c:	8f 91       	pop	r24
    1c8e:	2f 91       	pop	r18
    1c90:	0f 90       	pop	r0
    1c92:	0b be       	out	0x3b, r0	; 59
    1c94:	0f 90       	pop	r0
    1c96:	0f be       	out	0x3f, r0	; 63
    1c98:	0f 90       	pop	r0
    1c9a:	1f 90       	pop	r1
    1c9c:	18 95       	reti

00001c9e <__vector_37>:
    1c9e:	1f 92       	push	r1
    1ca0:	0f 92       	push	r0
    1ca2:	0f b6       	in	r0, 0x3f	; 63
    1ca4:	0f 92       	push	r0
    1ca6:	11 24       	eor	r1, r1
    1ca8:	0b b6       	in	r0, 0x3b	; 59
    1caa:	0f 92       	push	r0
    1cac:	2f 93       	push	r18
    1cae:	3f 93       	push	r19
    1cb0:	4f 93       	push	r20
    1cb2:	5f 93       	push	r21
    1cb4:	6f 93       	push	r22
    1cb6:	7f 93       	push	r23
    1cb8:	8f 93       	push	r24
    1cba:	9f 93       	push	r25
    1cbc:	af 93       	push	r26
    1cbe:	bf 93       	push	r27
    1cc0:	ef 93       	push	r30
    1cc2:	ff 93       	push	r31
    1cc4:	89 e9       	ldi	r24, 0x99	; 153
    1cc6:	95 e0       	ldi	r25, 0x05	; 5
    1cc8:	1c de       	rcall	.-968    	; 0x1902 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1cca:	ff 91       	pop	r31
    1ccc:	ef 91       	pop	r30
    1cce:	bf 91       	pop	r27
    1cd0:	af 91       	pop	r26
    1cd2:	9f 91       	pop	r25
    1cd4:	8f 91       	pop	r24
    1cd6:	7f 91       	pop	r23
    1cd8:	6f 91       	pop	r22
    1cda:	5f 91       	pop	r21
    1cdc:	4f 91       	pop	r20
    1cde:	3f 91       	pop	r19
    1ce0:	2f 91       	pop	r18
    1ce2:	0f 90       	pop	r0
    1ce4:	0b be       	out	0x3b, r0	; 59
    1ce6:	0f 90       	pop	r0
    1ce8:	0f be       	out	0x3f, r0	; 63
    1cea:	0f 90       	pop	r0
    1cec:	1f 90       	pop	r1
    1cee:	18 95       	reti

00001cf0 <_GLOBAL__sub_I___vector_36>:
    1cf0:	e9 e9       	ldi	r30, 0x99	; 153
    1cf2:	f5 e0       	ldi	r31, 0x05	; 5
    1cf4:	8e ea       	ldi	r24, 0xAE	; 174
    1cf6:	92 e0       	ldi	r25, 0x02	; 2
    1cf8:	91 83       	std	Z+1, r25	; 0x01
    1cfa:	80 83       	st	Z, r24
    1cfc:	8d ec       	ldi	r24, 0xCD	; 205
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	93 83       	std	Z+3, r25	; 0x03
    1d02:	82 83       	std	Z+2, r24	; 0x02
    1d04:	8c ec       	ldi	r24, 0xCC	; 204
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	95 83       	std	Z+5, r25	; 0x05
    1d0a:	84 83       	std	Z+4, r24	; 0x04
    1d0c:	88 ec       	ldi	r24, 0xC8	; 200
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	97 83       	std	Z+7, r25	; 0x07
    1d12:	86 83       	std	Z+6, r24	; 0x06
    1d14:	89 ec       	ldi	r24, 0xC9	; 201
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	91 87       	std	Z+9, r25	; 0x09
    1d1a:	80 87       	std	Z+8, r24	; 0x08
    1d1c:	8a ec       	ldi	r24, 0xCA	; 202
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	93 87       	std	Z+11, r25	; 0x0b
    1d22:	82 87       	std	Z+10, r24	; 0x0a
    1d24:	8e ec       	ldi	r24, 0xCE	; 206
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	95 87       	std	Z+13, r25	; 0x0d
    1d2a:	84 87       	std	Z+12, r24	; 0x0c
    1d2c:	17 86       	std	Z+15, r1	; 0x0f
    1d2e:	10 8a       	std	Z+16, r1	; 0x10
    1d30:	11 8a       	std	Z+17, r1	; 0x11
    1d32:	12 8a       	std	Z+18, r1	; 0x12
    1d34:	08 95       	ret

00001d36 <__vector_51>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial2_available() {
  return Serial2.available();
}
    1d36:	1f 92       	push	r1
    1d38:	0f 92       	push	r0
    1d3a:	0f b6       	in	r0, 0x3f	; 63
    1d3c:	0f 92       	push	r0
    1d3e:	11 24       	eor	r1, r1
    1d40:	0b b6       	in	r0, 0x3b	; 59
    1d42:	0f 92       	push	r0
    1d44:	2f 93       	push	r18
    1d46:	8f 93       	push	r24
    1d48:	9f 93       	push	r25
    1d4a:	af 93       	push	r26
    1d4c:	bf 93       	push	r27
    1d4e:	ef 93       	push	r30
    1d50:	ff 93       	push	r31
    1d52:	e0 91 d2 05 	lds	r30, 0x05D2	; 0x8005d2 <Serial2+0x6>
    1d56:	f0 91 d3 05 	lds	r31, 0x05D3	; 0x8005d3 <Serial2+0x7>
    1d5a:	80 81       	ld	r24, Z
    1d5c:	82 fd       	sbrc	r24, 2
    1d5e:	14 c0       	rjmp	.+40     	; 0x1d88 <__vector_51+0x52>
    1d60:	ec ec       	ldi	r30, 0xCC	; 204
    1d62:	f5 e0       	ldi	r31, 0x05	; 5
    1d64:	a4 85       	ldd	r26, Z+12	; 0x0c
    1d66:	b5 85       	ldd	r27, Z+13	; 0x0d
    1d68:	2c 91       	ld	r18, X
    1d6a:	87 85       	ldd	r24, Z+15	; 0x0f
    1d6c:	8f 5f       	subi	r24, 0xFF	; 255
    1d6e:	8f 70       	andi	r24, 0x0F	; 15
    1d70:	90 89       	ldd	r25, Z+16	; 0x10
    1d72:	89 17       	cp	r24, r25
    1d74:	71 f0       	breq	.+28     	; 0x1d92 <__vector_51+0x5c>
    1d76:	df 01       	movw	r26, r30
    1d78:	e7 85       	ldd	r30, Z+15	; 0x0f
    1d7a:	f0 e0       	ldi	r31, 0x00	; 0
    1d7c:	e4 53       	subi	r30, 0x34	; 52
    1d7e:	fa 4f       	sbci	r31, 0xFA	; 250
    1d80:	23 8b       	std	Z+19, r18	; 0x13
    1d82:	1f 96       	adiw	r26, 0x0f	; 15
    1d84:	8c 93       	st	X, r24
    1d86:	05 c0       	rjmp	.+10     	; 0x1d92 <__vector_51+0x5c>
    1d88:	e0 91 d8 05 	lds	r30, 0x05D8	; 0x8005d8 <Serial2+0xc>
    1d8c:	f0 91 d9 05 	lds	r31, 0x05D9	; 0x8005d9 <Serial2+0xd>
    1d90:	80 81       	ld	r24, Z
    1d92:	ff 91       	pop	r31
    1d94:	ef 91       	pop	r30
    1d96:	bf 91       	pop	r27
    1d98:	af 91       	pop	r26
    1d9a:	9f 91       	pop	r25
    1d9c:	8f 91       	pop	r24
    1d9e:	2f 91       	pop	r18
    1da0:	0f 90       	pop	r0
    1da2:	0b be       	out	0x3b, r0	; 59
    1da4:	0f 90       	pop	r0
    1da6:	0f be       	out	0x3f, r0	; 63
    1da8:	0f 90       	pop	r0
    1daa:	1f 90       	pop	r1
    1dac:	18 95       	reti

00001dae <__vector_52>:
    1dae:	1f 92       	push	r1
    1db0:	0f 92       	push	r0
    1db2:	0f b6       	in	r0, 0x3f	; 63
    1db4:	0f 92       	push	r0
    1db6:	11 24       	eor	r1, r1
    1db8:	0b b6       	in	r0, 0x3b	; 59
    1dba:	0f 92       	push	r0
    1dbc:	2f 93       	push	r18
    1dbe:	3f 93       	push	r19
    1dc0:	4f 93       	push	r20
    1dc2:	5f 93       	push	r21
    1dc4:	6f 93       	push	r22
    1dc6:	7f 93       	push	r23
    1dc8:	8f 93       	push	r24
    1dca:	9f 93       	push	r25
    1dcc:	af 93       	push	r26
    1dce:	bf 93       	push	r27
    1dd0:	ef 93       	push	r30
    1dd2:	ff 93       	push	r31
    1dd4:	8c ec       	ldi	r24, 0xCC	; 204
    1dd6:	95 e0       	ldi	r25, 0x05	; 5
    1dd8:	94 dd       	rcall	.-1240   	; 0x1902 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1dda:	ff 91       	pop	r31
    1ddc:	ef 91       	pop	r30
    1dde:	bf 91       	pop	r27
    1de0:	af 91       	pop	r26
    1de2:	9f 91       	pop	r25
    1de4:	8f 91       	pop	r24
    1de6:	7f 91       	pop	r23
    1de8:	6f 91       	pop	r22
    1dea:	5f 91       	pop	r21
    1dec:	4f 91       	pop	r20
    1dee:	3f 91       	pop	r19
    1df0:	2f 91       	pop	r18
    1df2:	0f 90       	pop	r0
    1df4:	0b be       	out	0x3b, r0	; 59
    1df6:	0f 90       	pop	r0
    1df8:	0f be       	out	0x3f, r0	; 63
    1dfa:	0f 90       	pop	r0
    1dfc:	1f 90       	pop	r1
    1dfe:	18 95       	reti

00001e00 <_GLOBAL__sub_I___vector_51>:
    1e00:	ec ec       	ldi	r30, 0xCC	; 204
    1e02:	f5 e0       	ldi	r31, 0x05	; 5
    1e04:	8e ea       	ldi	r24, 0xAE	; 174
    1e06:	92 e0       	ldi	r25, 0x02	; 2
    1e08:	91 83       	std	Z+1, r25	; 0x01
    1e0a:	80 83       	st	Z, r24
    1e0c:	85 ed       	ldi	r24, 0xD5	; 213
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	93 83       	std	Z+3, r25	; 0x03
    1e12:	82 83       	std	Z+2, r24	; 0x02
    1e14:	84 ed       	ldi	r24, 0xD4	; 212
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	95 83       	std	Z+5, r25	; 0x05
    1e1a:	84 83       	std	Z+4, r24	; 0x04
    1e1c:	80 ed       	ldi	r24, 0xD0	; 208
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	97 83       	std	Z+7, r25	; 0x07
    1e22:	86 83       	std	Z+6, r24	; 0x06
    1e24:	81 ed       	ldi	r24, 0xD1	; 209
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	91 87       	std	Z+9, r25	; 0x09
    1e2a:	80 87       	std	Z+8, r24	; 0x08
    1e2c:	82 ed       	ldi	r24, 0xD2	; 210
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	93 87       	std	Z+11, r25	; 0x0b
    1e32:	82 87       	std	Z+10, r24	; 0x0a
    1e34:	86 ed       	ldi	r24, 0xD6	; 214
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	95 87       	std	Z+13, r25	; 0x0d
    1e3a:	84 87       	std	Z+12, r24	; 0x0c
    1e3c:	17 86       	std	Z+15, r1	; 0x0f
    1e3e:	10 8a       	std	Z+16, r1	; 0x10
    1e40:	11 8a       	std	Z+17, r1	; 0x11
    1e42:	12 8a       	std	Z+18, r1	; 0x12
    1e44:	08 95       	ret

00001e46 <__vector_54>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial3_available() {
  return Serial3.available();
}
    1e46:	1f 92       	push	r1
    1e48:	0f 92       	push	r0
    1e4a:	0f b6       	in	r0, 0x3f	; 63
    1e4c:	0f 92       	push	r0
    1e4e:	11 24       	eor	r1, r1
    1e50:	0b b6       	in	r0, 0x3b	; 59
    1e52:	0f 92       	push	r0
    1e54:	2f 93       	push	r18
    1e56:	8f 93       	push	r24
    1e58:	9f 93       	push	r25
    1e5a:	af 93       	push	r26
    1e5c:	bf 93       	push	r27
    1e5e:	ef 93       	push	r30
    1e60:	ff 93       	push	r31
    1e62:	e0 91 05 06 	lds	r30, 0x0605	; 0x800605 <Serial3+0x6>
    1e66:	f0 91 06 06 	lds	r31, 0x0606	; 0x800606 <Serial3+0x7>
    1e6a:	80 81       	ld	r24, Z
    1e6c:	82 fd       	sbrc	r24, 2
    1e6e:	14 c0       	rjmp	.+40     	; 0x1e98 <__vector_54+0x52>
    1e70:	ef ef       	ldi	r30, 0xFF	; 255
    1e72:	f5 e0       	ldi	r31, 0x05	; 5
    1e74:	a4 85       	ldd	r26, Z+12	; 0x0c
    1e76:	b5 85       	ldd	r27, Z+13	; 0x0d
    1e78:	2c 91       	ld	r18, X
    1e7a:	87 85       	ldd	r24, Z+15	; 0x0f
    1e7c:	8f 5f       	subi	r24, 0xFF	; 255
    1e7e:	8f 70       	andi	r24, 0x0F	; 15
    1e80:	90 89       	ldd	r25, Z+16	; 0x10
    1e82:	89 17       	cp	r24, r25
    1e84:	71 f0       	breq	.+28     	; 0x1ea2 <__vector_54+0x5c>
    1e86:	df 01       	movw	r26, r30
    1e88:	e7 85       	ldd	r30, Z+15	; 0x0f
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	e1 50       	subi	r30, 0x01	; 1
    1e8e:	fa 4f       	sbci	r31, 0xFA	; 250
    1e90:	23 8b       	std	Z+19, r18	; 0x13
    1e92:	1f 96       	adiw	r26, 0x0f	; 15
    1e94:	8c 93       	st	X, r24
    1e96:	05 c0       	rjmp	.+10     	; 0x1ea2 <__vector_54+0x5c>
    1e98:	e0 91 0b 06 	lds	r30, 0x060B	; 0x80060b <Serial3+0xc>
    1e9c:	f0 91 0c 06 	lds	r31, 0x060C	; 0x80060c <Serial3+0xd>
    1ea0:	80 81       	ld	r24, Z
    1ea2:	ff 91       	pop	r31
    1ea4:	ef 91       	pop	r30
    1ea6:	bf 91       	pop	r27
    1ea8:	af 91       	pop	r26
    1eaa:	9f 91       	pop	r25
    1eac:	8f 91       	pop	r24
    1eae:	2f 91       	pop	r18
    1eb0:	0f 90       	pop	r0
    1eb2:	0b be       	out	0x3b, r0	; 59
    1eb4:	0f 90       	pop	r0
    1eb6:	0f be       	out	0x3f, r0	; 63
    1eb8:	0f 90       	pop	r0
    1eba:	1f 90       	pop	r1
    1ebc:	18 95       	reti

00001ebe <__vector_55>:
    1ebe:	1f 92       	push	r1
    1ec0:	0f 92       	push	r0
    1ec2:	0f b6       	in	r0, 0x3f	; 63
    1ec4:	0f 92       	push	r0
    1ec6:	11 24       	eor	r1, r1
    1ec8:	0b b6       	in	r0, 0x3b	; 59
    1eca:	0f 92       	push	r0
    1ecc:	2f 93       	push	r18
    1ece:	3f 93       	push	r19
    1ed0:	4f 93       	push	r20
    1ed2:	5f 93       	push	r21
    1ed4:	6f 93       	push	r22
    1ed6:	7f 93       	push	r23
    1ed8:	8f 93       	push	r24
    1eda:	9f 93       	push	r25
    1edc:	af 93       	push	r26
    1ede:	bf 93       	push	r27
    1ee0:	ef 93       	push	r30
    1ee2:	ff 93       	push	r31
    1ee4:	8f ef       	ldi	r24, 0xFF	; 255
    1ee6:	95 e0       	ldi	r25, 0x05	; 5
    1ee8:	0c dd       	rcall	.-1512   	; 0x1902 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1eea:	ff 91       	pop	r31
    1eec:	ef 91       	pop	r30
    1eee:	bf 91       	pop	r27
    1ef0:	af 91       	pop	r26
    1ef2:	9f 91       	pop	r25
    1ef4:	8f 91       	pop	r24
    1ef6:	7f 91       	pop	r23
    1ef8:	6f 91       	pop	r22
    1efa:	5f 91       	pop	r21
    1efc:	4f 91       	pop	r20
    1efe:	3f 91       	pop	r19
    1f00:	2f 91       	pop	r18
    1f02:	0f 90       	pop	r0
    1f04:	0b be       	out	0x3b, r0	; 59
    1f06:	0f 90       	pop	r0
    1f08:	0f be       	out	0x3f, r0	; 63
    1f0a:	0f 90       	pop	r0
    1f0c:	1f 90       	pop	r1
    1f0e:	18 95       	reti

00001f10 <_GLOBAL__sub_I___vector_54>:
    1f10:	ef ef       	ldi	r30, 0xFF	; 255
    1f12:	f5 e0       	ldi	r31, 0x05	; 5
    1f14:	8e ea       	ldi	r24, 0xAE	; 174
    1f16:	92 e0       	ldi	r25, 0x02	; 2
    1f18:	91 83       	std	Z+1, r25	; 0x01
    1f1a:	80 83       	st	Z, r24
    1f1c:	85 e3       	ldi	r24, 0x35	; 53
    1f1e:	91 e0       	ldi	r25, 0x01	; 1
    1f20:	93 83       	std	Z+3, r25	; 0x03
    1f22:	82 83       	std	Z+2, r24	; 0x02
    1f24:	84 e3       	ldi	r24, 0x34	; 52
    1f26:	91 e0       	ldi	r25, 0x01	; 1
    1f28:	95 83       	std	Z+5, r25	; 0x05
    1f2a:	84 83       	std	Z+4, r24	; 0x04
    1f2c:	80 e3       	ldi	r24, 0x30	; 48
    1f2e:	91 e0       	ldi	r25, 0x01	; 1
    1f30:	97 83       	std	Z+7, r25	; 0x07
    1f32:	86 83       	std	Z+6, r24	; 0x06
    1f34:	81 e3       	ldi	r24, 0x31	; 49
    1f36:	91 e0       	ldi	r25, 0x01	; 1
    1f38:	91 87       	std	Z+9, r25	; 0x09
    1f3a:	80 87       	std	Z+8, r24	; 0x08
    1f3c:	82 e3       	ldi	r24, 0x32	; 50
    1f3e:	91 e0       	ldi	r25, 0x01	; 1
    1f40:	93 87       	std	Z+11, r25	; 0x0b
    1f42:	82 87       	std	Z+10, r24	; 0x0a
    1f44:	86 e3       	ldi	r24, 0x36	; 54
    1f46:	91 e0       	ldi	r25, 0x01	; 1
    1f48:	95 87       	std	Z+13, r25	; 0x0d
    1f4a:	84 87       	std	Z+12, r24	; 0x0c
    1f4c:	17 86       	std	Z+15, r1	; 0x0f
    1f4e:	10 8a       	std	Z+16, r1	; 0x10
    1f50:	11 8a       	std	Z+17, r1	; 0x11
    1f52:	12 8a       	std	Z+18, r1	; 0x12
    1f54:	08 95       	ret

00001f56 <_GLOBAL__sub_I__ZN13HardwareServoC2ERVjRVhS3_S1_S1_S1_S3_hhh>:
#define CLK_DIV_1024 (_B(CS02) | _BV(CS00))

HardwareServo::HardwareServo(Register16 &icr, Register &tccrA, Register &tccrB, Register16 &ocrA, Register16 &ocrB, Register16 &ocrC, Register &ddr, const uint8_t pinA, const uint8_t pinB, const uint8_t pinC)
 : _icr(&icr), _tccrA(&tccrA), _tccrB(&tccrB), _ocrA(&ocrA), _ocrB(&ocrB), _ocrC(&ocrC),
  _DDR(&ddr), _PINA(pinA), _PINB(pinB), _PINC(pinC),
  _minA(1000), _minB(1000), _minC(1000), _maxA(2000), _maxB(2000), _maxC(2000)
    1f56:	e9 e8       	ldi	r30, 0x89	; 137
    1f58:	f6 e0       	ldi	r31, 0x06	; 6
    1f5a:	86 e8       	ldi	r24, 0x86	; 134
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	91 83       	std	Z+1, r25	; 0x01
    1f60:	80 83       	st	Z, r24
    1f62:	80 e8       	ldi	r24, 0x80	; 128
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	93 83       	std	Z+3, r25	; 0x03
    1f68:	82 83       	std	Z+2, r24	; 0x02
    1f6a:	81 e8       	ldi	r24, 0x81	; 129
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	95 83       	std	Z+5, r25	; 0x05
    1f70:	84 83       	std	Z+4, r24	; 0x04
    1f72:	88 e8       	ldi	r24, 0x88	; 136
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	97 83       	std	Z+7, r25	; 0x07
    1f78:	86 83       	std	Z+6, r24	; 0x06
    1f7a:	8a e8       	ldi	r24, 0x8A	; 138
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	91 87       	std	Z+9, r25	; 0x09
    1f80:	80 87       	std	Z+8, r24	; 0x08
    1f82:	8c e8       	ldi	r24, 0x8C	; 140
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	93 87       	std	Z+11, r25	; 0x0b
    1f88:	82 87       	std	Z+10, r24	; 0x0a
    1f8a:	84 e2       	ldi	r24, 0x24	; 36
    1f8c:	90 e0       	ldi	r25, 0x00	; 0
    1f8e:	95 87       	std	Z+13, r25	; 0x0d
    1f90:	84 87       	std	Z+12, r24	; 0x0c
    1f92:	40 e2       	ldi	r20, 0x20	; 32
    1f94:	46 87       	std	Z+14, r20	; 0x0e
    1f96:	80 e4       	ldi	r24, 0x40	; 64
    1f98:	87 87       	std	Z+15, r24	; 0x0f
    1f9a:	80 e8       	ldi	r24, 0x80	; 128
    1f9c:	80 8b       	std	Z+16, r24	; 0x10
    1f9e:	28 ee       	ldi	r18, 0xE8	; 232
    1fa0:	33 e0       	ldi	r19, 0x03	; 3
    1fa2:	32 8b       	std	Z+18, r19	; 0x12
    1fa4:	21 8b       	std	Z+17, r18	; 0x11
    1fa6:	34 8b       	std	Z+20, r19	; 0x14
    1fa8:	23 8b       	std	Z+19, r18	; 0x13
    1faa:	36 8b       	std	Z+22, r19	; 0x16
    1fac:	25 8b       	std	Z+21, r18	; 0x15
    1fae:	80 ed       	ldi	r24, 0xD0	; 208
    1fb0:	97 e0       	ldi	r25, 0x07	; 7
    1fb2:	90 8f       	std	Z+24, r25	; 0x18
    1fb4:	87 8b       	std	Z+23, r24	; 0x17
    1fb6:	92 8f       	std	Z+26, r25	; 0x1a
    1fb8:	81 8f       	std	Z+25, r24	; 0x19
    1fba:	94 8f       	std	Z+28, r25	; 0x1c
    1fbc:	83 8f       	std	Z+27, r24	; 0x1b
    1fbe:	ec e6       	ldi	r30, 0x6C	; 108
    1fc0:	f6 e0       	ldi	r31, 0x06	; 6
    1fc2:	66 e9       	ldi	r22, 0x96	; 150
    1fc4:	70 e0       	ldi	r23, 0x00	; 0
    1fc6:	71 83       	std	Z+1, r23	; 0x01
    1fc8:	60 83       	st	Z, r22
    1fca:	60 e9       	ldi	r22, 0x90	; 144
    1fcc:	70 e0       	ldi	r23, 0x00	; 0
    1fce:	73 83       	std	Z+3, r23	; 0x03
    1fd0:	62 83       	std	Z+2, r22	; 0x02
    1fd2:	61 e9       	ldi	r22, 0x91	; 145
    1fd4:	70 e0       	ldi	r23, 0x00	; 0
    1fd6:	75 83       	std	Z+5, r23	; 0x05
    1fd8:	64 83       	std	Z+4, r22	; 0x04
    1fda:	68 e9       	ldi	r22, 0x98	; 152
    1fdc:	70 e0       	ldi	r23, 0x00	; 0
    1fde:	77 83       	std	Z+7, r23	; 0x07
    1fe0:	66 83       	std	Z+6, r22	; 0x06
    1fe2:	6a e9       	ldi	r22, 0x9A	; 154
    1fe4:	70 e0       	ldi	r23, 0x00	; 0
    1fe6:	71 87       	std	Z+9, r23	; 0x09
    1fe8:	60 87       	std	Z+8, r22	; 0x08
    1fea:	6c e9       	ldi	r22, 0x9C	; 156
    1fec:	70 e0       	ldi	r23, 0x00	; 0
    1fee:	73 87       	std	Z+11, r23	; 0x0b
    1ff0:	62 87       	std	Z+10, r22	; 0x0a
    1ff2:	6d e2       	ldi	r22, 0x2D	; 45
    1ff4:	70 e0       	ldi	r23, 0x00	; 0
    1ff6:	75 87       	std	Z+13, r23	; 0x0d
    1ff8:	64 87       	std	Z+12, r22	; 0x0c
    1ffa:	68 e0       	ldi	r22, 0x08	; 8
    1ffc:	66 87       	std	Z+14, r22	; 0x0e
    1ffe:	50 e1       	ldi	r21, 0x10	; 16
    2000:	57 87       	std	Z+15, r21	; 0x0f
    2002:	40 8b       	std	Z+16, r20	; 0x10
    2004:	32 8b       	std	Z+18, r19	; 0x12
    2006:	21 8b       	std	Z+17, r18	; 0x11
    2008:	34 8b       	std	Z+20, r19	; 0x14
    200a:	23 8b       	std	Z+19, r18	; 0x13
    200c:	36 8b       	std	Z+22, r19	; 0x16
    200e:	25 8b       	std	Z+21, r18	; 0x15
    2010:	90 8f       	std	Z+24, r25	; 0x18
    2012:	87 8b       	std	Z+23, r24	; 0x17
    2014:	92 8f       	std	Z+26, r25	; 0x1a
    2016:	81 8f       	std	Z+25, r24	; 0x19
    2018:	94 8f       	std	Z+28, r25	; 0x1c
    201a:	83 8f       	std	Z+27, r24	; 0x1b
    201c:	ef e4       	ldi	r30, 0x4F	; 79
    201e:	f6 e0       	ldi	r31, 0x06	; 6
    2020:	a6 ea       	ldi	r26, 0xA6	; 166
    2022:	b0 e0       	ldi	r27, 0x00	; 0
    2024:	b1 83       	std	Z+1, r27	; 0x01
    2026:	a0 83       	st	Z, r26
    2028:	a0 ea       	ldi	r26, 0xA0	; 160
    202a:	b0 e0       	ldi	r27, 0x00	; 0
    202c:	b3 83       	std	Z+3, r27	; 0x03
    202e:	a2 83       	std	Z+2, r26	; 0x02
    2030:	a1 ea       	ldi	r26, 0xA1	; 161
    2032:	b0 e0       	ldi	r27, 0x00	; 0
    2034:	b5 83       	std	Z+5, r27	; 0x05
    2036:	a4 83       	std	Z+4, r26	; 0x04
    2038:	a8 ea       	ldi	r26, 0xA8	; 168
    203a:	b0 e0       	ldi	r27, 0x00	; 0
    203c:	b7 83       	std	Z+7, r27	; 0x07
    203e:	a6 83       	std	Z+6, r26	; 0x06
    2040:	aa ea       	ldi	r26, 0xAA	; 170
    2042:	b0 e0       	ldi	r27, 0x00	; 0
    2044:	b1 87       	std	Z+9, r27	; 0x09
    2046:	a0 87       	std	Z+8, r26	; 0x08
    2048:	ac ea       	ldi	r26, 0xAC	; 172
    204a:	b0 e0       	ldi	r27, 0x00	; 0
    204c:	b3 87       	std	Z+11, r27	; 0x0b
    204e:	a2 87       	std	Z+10, r26	; 0x0a
    2050:	a1 e0       	ldi	r26, 0x01	; 1
    2052:	b1 e0       	ldi	r27, 0x01	; 1
    2054:	b5 87       	std	Z+13, r27	; 0x0d
    2056:	a4 87       	std	Z+12, r26	; 0x0c
    2058:	66 87       	std	Z+14, r22	; 0x0e
    205a:	57 87       	std	Z+15, r21	; 0x0f
    205c:	40 8b       	std	Z+16, r20	; 0x10
    205e:	32 8b       	std	Z+18, r19	; 0x12
    2060:	21 8b       	std	Z+17, r18	; 0x11
    2062:	34 8b       	std	Z+20, r19	; 0x14
    2064:	23 8b       	std	Z+19, r18	; 0x13
    2066:	36 8b       	std	Z+22, r19	; 0x16
    2068:	25 8b       	std	Z+21, r18	; 0x15
    206a:	90 8f       	std	Z+24, r25	; 0x18
    206c:	87 8b       	std	Z+23, r24	; 0x17
    206e:	92 8f       	std	Z+26, r25	; 0x1a
    2070:	81 8f       	std	Z+25, r24	; 0x19
    2072:	94 8f       	std	Z+28, r25	; 0x1c
    2074:	83 8f       	std	Z+27, r24	; 0x1b
    2076:	e2 e3       	ldi	r30, 0x32	; 50
    2078:	f6 e0       	ldi	r31, 0x06	; 6
    207a:	a6 e2       	ldi	r26, 0x26	; 38
    207c:	b1 e0       	ldi	r27, 0x01	; 1
    207e:	b1 83       	std	Z+1, r27	; 0x01
    2080:	a0 83       	st	Z, r26
    2082:	a0 e2       	ldi	r26, 0x20	; 32
    2084:	b1 e0       	ldi	r27, 0x01	; 1
    2086:	b3 83       	std	Z+3, r27	; 0x03
    2088:	a2 83       	std	Z+2, r26	; 0x02
    208a:	a1 e2       	ldi	r26, 0x21	; 33
    208c:	b1 e0       	ldi	r27, 0x01	; 1
    208e:	b5 83       	std	Z+5, r27	; 0x05
    2090:	a4 83       	std	Z+4, r26	; 0x04
    2092:	a8 e2       	ldi	r26, 0x28	; 40
    2094:	b1 e0       	ldi	r27, 0x01	; 1
    2096:	b7 83       	std	Z+7, r27	; 0x07
    2098:	a6 83       	std	Z+6, r26	; 0x06
    209a:	aa e2       	ldi	r26, 0x2A	; 42
    209c:	b1 e0       	ldi	r27, 0x01	; 1
    209e:	b1 87       	std	Z+9, r27	; 0x09
    20a0:	a0 87       	std	Z+8, r26	; 0x08
    20a2:	ac e2       	ldi	r26, 0x2C	; 44
    20a4:	b1 e0       	ldi	r27, 0x01	; 1
    20a6:	b3 87       	std	Z+11, r27	; 0x0b
    20a8:	a2 87       	std	Z+10, r26	; 0x0a
    20aa:	aa e0       	ldi	r26, 0x0A	; 10
    20ac:	b1 e0       	ldi	r27, 0x01	; 1
    20ae:	b5 87       	std	Z+13, r27	; 0x0d
    20b0:	a4 87       	std	Z+12, r26	; 0x0c
    20b2:	66 87       	std	Z+14, r22	; 0x0e
    20b4:	57 87       	std	Z+15, r21	; 0x0f
    20b6:	40 8b       	std	Z+16, r20	; 0x10
    20b8:	32 8b       	std	Z+18, r19	; 0x12
    20ba:	21 8b       	std	Z+17, r18	; 0x11
    20bc:	34 8b       	std	Z+20, r19	; 0x14
    20be:	23 8b       	std	Z+19, r18	; 0x13
    20c0:	36 8b       	std	Z+22, r19	; 0x16
    20c2:	25 8b       	std	Z+21, r18	; 0x15
    20c4:	90 8f       	std	Z+24, r25	; 0x18
    20c6:	87 8b       	std	Z+23, r24	; 0x17
    20c8:	92 8f       	std	Z+26, r25	; 0x1a
    20ca:	81 8f       	std	Z+25, r24	; 0x19
    20cc:	94 8f       	std	Z+28, r25	; 0x1c
    20ce:	83 8f       	std	Z+27, r24	; 0x1b
    20d0:	08 95       	ret

000020d2 <_ZN13HardwareTimer14isr_timer_compEv>:
void HardwareTimer::waitForFinish(){
	while(ovfRemaining != 0){
	}
}

void HardwareTimer::isr_timer_comp(){
    20d2:	fc 01       	movw	r30, r24
	if(ovfRemaining > 0) ovfRemaining--;
    20d4:	93 85       	ldd	r25, Z+11	; 0x0b
    20d6:	99 23       	and	r25, r25
    20d8:	11 f0       	breq	.+4      	; 0x20de <_ZN13HardwareTimer14isr_timer_compEv+0xc>
    20da:	91 50       	subi	r25, 0x01	; 1
    20dc:	93 87       	std	Z+11, r25	; 0x0b
    20de:	08 95       	ret

000020e0 <__vector_21>:
}

#ifdef USE_TIMER_0
HardwareTimer Timer0(TCCR0A, TCCR0B, TIMSK0, TCNT0, OCR0A);

ISR(TIMER0_COMPA_vect){
    20e0:	1f 92       	push	r1
    20e2:	0f 92       	push	r0
    20e4:	0f b6       	in	r0, 0x3f	; 63
    20e6:	0f 92       	push	r0
    20e8:	11 24       	eor	r1, r1
    20ea:	0b b6       	in	r0, 0x3b	; 59
    20ec:	0f 92       	push	r0
    20ee:	2f 93       	push	r18
    20f0:	3f 93       	push	r19
    20f2:	4f 93       	push	r20
    20f4:	5f 93       	push	r21
    20f6:	6f 93       	push	r22
    20f8:	7f 93       	push	r23
    20fa:	8f 93       	push	r24
    20fc:	9f 93       	push	r25
    20fe:	af 93       	push	r26
    2100:	bf 93       	push	r27
    2102:	ef 93       	push	r30
    2104:	ff 93       	push	r31
	Timer0.isr_timer_comp();
    2106:	82 eb       	ldi	r24, 0xB2	; 178
    2108:	96 e0       	ldi	r25, 0x06	; 6
    210a:	e3 df       	rcall	.-58     	; 0x20d2 <_ZN13HardwareTimer14isr_timer_compEv>
}
    210c:	ff 91       	pop	r31
    210e:	ef 91       	pop	r30
    2110:	bf 91       	pop	r27
    2112:	af 91       	pop	r26
    2114:	9f 91       	pop	r25
    2116:	8f 91       	pop	r24
    2118:	7f 91       	pop	r23
    211a:	6f 91       	pop	r22
    211c:	5f 91       	pop	r21
    211e:	4f 91       	pop	r20
    2120:	3f 91       	pop	r19
    2122:	2f 91       	pop	r18
    2124:	0f 90       	pop	r0
    2126:	0b be       	out	0x3b, r0	; 59
    2128:	0f 90       	pop	r0
    212a:	0f be       	out	0x3f, r0	; 63
    212c:	0f 90       	pop	r0
    212e:	1f 90       	pop	r1
    2130:	18 95       	reti

00002132 <__vector_13>:
#endif

#ifdef USE_TIMER_2
HardwareTimer Timer2(TCCR2A, TCCR2B, TIMSK2, TCNT2, OCR2A);

ISR(TIMER2_COMPA_vect){
    2132:	1f 92       	push	r1
    2134:	0f 92       	push	r0
    2136:	0f b6       	in	r0, 0x3f	; 63
    2138:	0f 92       	push	r0
    213a:	11 24       	eor	r1, r1
    213c:	0b b6       	in	r0, 0x3b	; 59
    213e:	0f 92       	push	r0
    2140:	2f 93       	push	r18
    2142:	3f 93       	push	r19
    2144:	4f 93       	push	r20
    2146:	5f 93       	push	r21
    2148:	6f 93       	push	r22
    214a:	7f 93       	push	r23
    214c:	8f 93       	push	r24
    214e:	9f 93       	push	r25
    2150:	af 93       	push	r26
    2152:	bf 93       	push	r27
    2154:	ef 93       	push	r30
    2156:	ff 93       	push	r31
	Timer2.isr_timer_comp();
    2158:	86 ea       	ldi	r24, 0xA6	; 166
    215a:	96 e0       	ldi	r25, 0x06	; 6
    215c:	ba df       	rcall	.-140    	; 0x20d2 <_ZN13HardwareTimer14isr_timer_compEv>
}
    215e:	ff 91       	pop	r31
    2160:	ef 91       	pop	r30
    2162:	bf 91       	pop	r27
    2164:	af 91       	pop	r26
    2166:	9f 91       	pop	r25
    2168:	8f 91       	pop	r24
    216a:	7f 91       	pop	r23
    216c:	6f 91       	pop	r22
    216e:	5f 91       	pop	r21
    2170:	4f 91       	pop	r20
    2172:	3f 91       	pop	r19
    2174:	2f 91       	pop	r18
    2176:	0f 90       	pop	r0
    2178:	0b be       	out	0x3b, r0	; 59
    217a:	0f 90       	pop	r0
    217c:	0f be       	out	0x3f, r0	; 63
    217e:	0f 90       	pop	r0
    2180:	1f 90       	pop	r1
    2182:	18 95       	reti

00002184 <_GLOBAL__sub_I__ZN13HardwareTimerC2ERVhS1_S1_S1_S1_>:
#define CLK_DIV_64 (_BV(CS01) | _BV(CS00))
#define CLK_DIV_256 (_BV(CS02))
#define CLK_DIV_1024 (_BV(CS02) | _BV(CS00))

HardwareTimer::HardwareTimer(Register &tccrA, Register &tccrB, Register &timsk, Register &tcnt, Register &ocra)
: _tccrA(&tccrA), _tccrB(&tccrB), _timsk(&timsk), _tcnt(&tcnt), _ocra(&ocra)
    2184:	e2 eb       	ldi	r30, 0xB2	; 178
    2186:	f6 e0       	ldi	r31, 0x06	; 6
    2188:	84 e4       	ldi	r24, 0x44	; 68
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	91 83       	std	Z+1, r25	; 0x01
    218e:	80 83       	st	Z, r24
    2190:	85 e4       	ldi	r24, 0x45	; 69
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	93 83       	std	Z+3, r25	; 0x03
    2196:	82 83       	std	Z+2, r24	; 0x02
    2198:	8e e6       	ldi	r24, 0x6E	; 110
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	95 83       	std	Z+5, r25	; 0x05
    219e:	84 83       	std	Z+4, r24	; 0x04
    21a0:	86 e4       	ldi	r24, 0x46	; 70
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	97 83       	std	Z+7, r25	; 0x07
    21a6:	86 83       	std	Z+6, r24	; 0x06
    21a8:	87 e4       	ldi	r24, 0x47	; 71
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	91 87       	std	Z+9, r25	; 0x09
    21ae:	80 87       	std	Z+8, r24	; 0x08
    21b0:	e6 ea       	ldi	r30, 0xA6	; 166
    21b2:	f6 e0       	ldi	r31, 0x06	; 6
    21b4:	80 eb       	ldi	r24, 0xB0	; 176
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	91 83       	std	Z+1, r25	; 0x01
    21ba:	80 83       	st	Z, r24
    21bc:	81 eb       	ldi	r24, 0xB1	; 177
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	93 83       	std	Z+3, r25	; 0x03
    21c2:	82 83       	std	Z+2, r24	; 0x02
    21c4:	80 e7       	ldi	r24, 0x70	; 112
    21c6:	90 e0       	ldi	r25, 0x00	; 0
    21c8:	95 83       	std	Z+5, r25	; 0x05
    21ca:	84 83       	std	Z+4, r24	; 0x04
    21cc:	82 eb       	ldi	r24, 0xB2	; 178
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	97 83       	std	Z+7, r25	; 0x07
    21d2:	86 83       	std	Z+6, r24	; 0x06
    21d4:	83 eb       	ldi	r24, 0xB3	; 179
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	91 87       	std	Z+9, r25	; 0x09
    21da:	80 87       	std	Z+8, r24	; 0x08
    21dc:	08 95       	ret

000021de <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    21de:	10 92 2b 07 	sts	0x072B, r1	; 0x80072b <twi_state>
    21e2:	81 e0       	ldi	r24, 0x01	; 1
    21e4:	80 93 29 07 	sts	0x0729, r24	; 0x800729 <twi_sendStop>
    21e8:	10 92 28 07 	sts	0x0728, r1	; 0x800728 <twi_inRepStart>
    21ec:	8b b1       	in	r24, 0x0b	; 11
    21ee:	83 60       	ori	r24, 0x03	; 3
    21f0:	8b b9       	out	0x0b, r24	; 11
    21f2:	e9 eb       	ldi	r30, 0xB9	; 185
    21f4:	f0 e0       	ldi	r31, 0x00	; 0
    21f6:	80 81       	ld	r24, Z
    21f8:	8e 7f       	andi	r24, 0xFE	; 254
    21fa:	80 83       	st	Z, r24
    21fc:	80 81       	ld	r24, Z
    21fe:	8d 7f       	andi	r24, 0xFD	; 253
    2200:	80 83       	st	Z, r24
    2202:	88 e4       	ldi	r24, 0x48	; 72
    2204:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    2208:	85 e4       	ldi	r24, 0x45	; 69
    220a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    220e:	08 95       	ret

00002210 <twi_readFrom>:
    2210:	41 32       	cpi	r20, 0x21	; 33
    2212:	08 f0       	brcs	.+2      	; 0x2216 <twi_readFrom+0x6>
    2214:	4c c0       	rjmp	.+152    	; 0x22ae <twi_readFrom+0x9e>
    2216:	90 91 2b 07 	lds	r25, 0x072B	; 0x80072b <twi_state>
    221a:	91 11       	cpse	r25, r1
    221c:	fc cf       	rjmp	.-8      	; 0x2216 <twi_readFrom+0x6>
    221e:	31 e0       	ldi	r19, 0x01	; 1
    2220:	30 93 2b 07 	sts	0x072B, r19	; 0x80072b <twi_state>
    2224:	20 93 29 07 	sts	0x0729, r18	; 0x800729 <twi_sendStop>
    2228:	2f ef       	ldi	r18, 0xFF	; 255
    222a:	20 93 be 06 	sts	0x06BE, r18	; 0x8006be <twi_error>
    222e:	10 92 03 07 	sts	0x0703, r1	; 0x800703 <twi_masterBufferIndex>
    2232:	24 0f       	add	r18, r20
    2234:	20 93 02 07 	sts	0x0702, r18	; 0x800702 <twi_masterBufferLength>
    2238:	30 93 2a 07 	sts	0x072A, r19	; 0x80072a <twi_slarw>
    223c:	20 91 2a 07 	lds	r18, 0x072A	; 0x80072a <twi_slarw>
    2240:	88 0f       	add	r24, r24
    2242:	82 2b       	or	r24, r18
    2244:	80 93 2a 07 	sts	0x072A, r24	; 0x80072a <twi_slarw>
    2248:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <twi_inRepStart>
    224c:	81 30       	cpi	r24, 0x01	; 1
    224e:	81 f4       	brne	.+32     	; 0x2270 <twi_readFrom+0x60>
    2250:	10 92 28 07 	sts	0x0728, r1	; 0x800728 <twi_inRepStart>
    2254:	ab eb       	ldi	r26, 0xBB	; 187
    2256:	b0 e0       	ldi	r27, 0x00	; 0
    2258:	ec eb       	ldi	r30, 0xBC	; 188
    225a:	f0 e0       	ldi	r31, 0x00	; 0
    225c:	80 91 2a 07 	lds	r24, 0x072A	; 0x80072a <twi_slarw>
    2260:	8c 93       	st	X, r24
    2262:	80 81       	ld	r24, Z
    2264:	83 fd       	sbrc	r24, 3
    2266:	fa cf       	rjmp	.-12     	; 0x225c <twi_readFrom+0x4c>
    2268:	85 ec       	ldi	r24, 0xC5	; 197
    226a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    226e:	03 c0       	rjmp	.+6      	; 0x2276 <twi_readFrom+0x66>
    2270:	85 ee       	ldi	r24, 0xE5	; 229
    2272:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2276:	80 91 2b 07 	lds	r24, 0x072B	; 0x80072b <twi_state>
    227a:	81 30       	cpi	r24, 0x01	; 1
    227c:	e1 f3       	breq	.-8      	; 0x2276 <twi_readFrom+0x66>
    227e:	80 91 03 07 	lds	r24, 0x0703	; 0x800703 <twi_masterBufferIndex>
    2282:	84 17       	cp	r24, r20
    2284:	10 f4       	brcc	.+4      	; 0x228a <twi_readFrom+0x7a>
    2286:	40 91 03 07 	lds	r20, 0x0703	; 0x800703 <twi_masterBufferIndex>
    228a:	44 23       	and	r20, r20
    228c:	89 f0       	breq	.+34     	; 0x22b0 <twi_readFrom+0xa0>
    228e:	e4 e0       	ldi	r30, 0x04	; 4
    2290:	f7 e0       	ldi	r31, 0x07	; 7
    2292:	a6 2f       	mov	r26, r22
    2294:	b7 2f       	mov	r27, r23
    2296:	2f ef       	ldi	r18, 0xFF	; 255
    2298:	24 0f       	add	r18, r20
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	2b 5f       	subi	r18, 0xFB	; 251
    229e:	38 4f       	sbci	r19, 0xF8	; 248
    22a0:	81 91       	ld	r24, Z+
    22a2:	8d 93       	st	X+, r24
    22a4:	e2 17       	cp	r30, r18
    22a6:	f3 07       	cpc	r31, r19
    22a8:	d9 f7       	brne	.-10     	; 0x22a0 <twi_readFrom+0x90>
    22aa:	94 2f       	mov	r25, r20
    22ac:	01 c0       	rjmp	.+2      	; 0x22b0 <twi_readFrom+0xa0>
    22ae:	90 e0       	ldi	r25, 0x00	; 0
    22b0:	89 2f       	mov	r24, r25
    22b2:	08 95       	ret

000022b4 <twi_writeTo>:
    22b4:	0f 93       	push	r16
    22b6:	41 32       	cpi	r20, 0x21	; 33
    22b8:	08 f0       	brcs	.+2      	; 0x22bc <twi_writeTo+0x8>
    22ba:	57 c0       	rjmp	.+174    	; 0x236a <twi_writeTo+0xb6>
    22bc:	30 91 2b 07 	lds	r19, 0x072B	; 0x80072b <twi_state>
    22c0:	31 11       	cpse	r19, r1
    22c2:	fc cf       	rjmp	.-8      	; 0x22bc <twi_writeTo+0x8>
    22c4:	92 e0       	ldi	r25, 0x02	; 2
    22c6:	90 93 2b 07 	sts	0x072B, r25	; 0x80072b <twi_state>
    22ca:	00 93 29 07 	sts	0x0729, r16	; 0x800729 <twi_sendStop>
    22ce:	9f ef       	ldi	r25, 0xFF	; 255
    22d0:	90 93 be 06 	sts	0x06BE, r25	; 0x8006be <twi_error>
    22d4:	10 92 03 07 	sts	0x0703, r1	; 0x800703 <twi_masterBufferIndex>
    22d8:	40 93 02 07 	sts	0x0702, r20	; 0x800702 <twi_masterBufferLength>
    22dc:	44 23       	and	r20, r20
    22de:	71 f0       	breq	.+28     	; 0x22fc <twi_writeTo+0x48>
    22e0:	fb 01       	movw	r30, r22
    22e2:	a4 e0       	ldi	r26, 0x04	; 4
    22e4:	b7 e0       	ldi	r27, 0x07	; 7
    22e6:	41 50       	subi	r20, 0x01	; 1
    22e8:	50 e0       	ldi	r21, 0x00	; 0
    22ea:	4f 5f       	subi	r20, 0xFF	; 255
    22ec:	5f 4f       	sbci	r21, 0xFF	; 255
    22ee:	64 0f       	add	r22, r20
    22f0:	75 1f       	adc	r23, r21
    22f2:	91 91       	ld	r25, Z+
    22f4:	9d 93       	st	X+, r25
    22f6:	e6 17       	cp	r30, r22
    22f8:	f7 07       	cpc	r31, r23
    22fa:	d9 f7       	brne	.-10     	; 0x22f2 <twi_writeTo+0x3e>
    22fc:	10 92 2a 07 	sts	0x072A, r1	; 0x80072a <twi_slarw>
    2300:	90 91 2a 07 	lds	r25, 0x072A	; 0x80072a <twi_slarw>
    2304:	88 0f       	add	r24, r24
    2306:	89 2b       	or	r24, r25
    2308:	80 93 2a 07 	sts	0x072A, r24	; 0x80072a <twi_slarw>
    230c:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <twi_inRepStart>
    2310:	81 30       	cpi	r24, 0x01	; 1
    2312:	81 f4       	brne	.+32     	; 0x2334 <twi_writeTo+0x80>
    2314:	10 92 28 07 	sts	0x0728, r1	; 0x800728 <twi_inRepStart>
    2318:	ab eb       	ldi	r26, 0xBB	; 187
    231a:	b0 e0       	ldi	r27, 0x00	; 0
    231c:	ec eb       	ldi	r30, 0xBC	; 188
    231e:	f0 e0       	ldi	r31, 0x00	; 0
    2320:	80 91 2a 07 	lds	r24, 0x072A	; 0x80072a <twi_slarw>
    2324:	8c 93       	st	X, r24
    2326:	80 81       	ld	r24, Z
    2328:	83 fd       	sbrc	r24, 3
    232a:	fa cf       	rjmp	.-12     	; 0x2320 <twi_writeTo+0x6c>
    232c:	85 ec       	ldi	r24, 0xC5	; 197
    232e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2332:	03 c0       	rjmp	.+6      	; 0x233a <twi_writeTo+0x86>
    2334:	85 ee       	ldi	r24, 0xE5	; 229
    2336:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    233a:	22 23       	and	r18, r18
    233c:	41 f0       	breq	.+16     	; 0x234e <twi_writeTo+0x9a>
    233e:	80 91 2b 07 	lds	r24, 0x072B	; 0x80072b <twi_state>
    2342:	82 30       	cpi	r24, 0x02	; 2
    2344:	21 f4       	brne	.+8      	; 0x234e <twi_writeTo+0x9a>
    2346:	80 91 2b 07 	lds	r24, 0x072B	; 0x80072b <twi_state>
    234a:	82 30       	cpi	r24, 0x02	; 2
    234c:	e1 f3       	breq	.-8      	; 0x2346 <twi_writeTo+0x92>
    234e:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <twi_error>
    2352:	8f 3f       	cpi	r24, 0xFF	; 255
    2354:	79 f0       	breq	.+30     	; 0x2374 <twi_writeTo+0xc0>
    2356:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <twi_error>
    235a:	80 32       	cpi	r24, 0x20	; 32
    235c:	41 f0       	breq	.+16     	; 0x236e <twi_writeTo+0xba>
    235e:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <twi_error>
    2362:	80 33       	cpi	r24, 0x30	; 48
    2364:	31 f0       	breq	.+12     	; 0x2372 <twi_writeTo+0xbe>
    2366:	34 e0       	ldi	r19, 0x04	; 4
    2368:	05 c0       	rjmp	.+10     	; 0x2374 <twi_writeTo+0xc0>
    236a:	31 e0       	ldi	r19, 0x01	; 1
    236c:	03 c0       	rjmp	.+6      	; 0x2374 <twi_writeTo+0xc0>
    236e:	32 e0       	ldi	r19, 0x02	; 2
    2370:	01 c0       	rjmp	.+2      	; 0x2374 <twi_writeTo+0xc0>
    2372:	33 e0       	ldi	r19, 0x03	; 3
    2374:	83 2f       	mov	r24, r19
    2376:	0f 91       	pop	r16
    2378:	08 95       	ret

0000237a <twi_transmit>:
    237a:	40 91 e0 06 	lds	r20, 0x06E0	; 0x8006e0 <twi_txBufferLength>
    237e:	26 2f       	mov	r18, r22
    2380:	30 e0       	ldi	r19, 0x00	; 0
    2382:	24 0f       	add	r18, r20
    2384:	31 1d       	adc	r19, r1
    2386:	21 32       	cpi	r18, 0x21	; 33
    2388:	31 05       	cpc	r19, r1
    238a:	ec f4       	brge	.+58     	; 0x23c6 <twi_transmit+0x4c>
    238c:	20 91 2b 07 	lds	r18, 0x072B	; 0x80072b <twi_state>
    2390:	24 30       	cpi	r18, 0x04	; 4
    2392:	d9 f4       	brne	.+54     	; 0x23ca <twi_transmit+0x50>
    2394:	66 23       	and	r22, r22
    2396:	81 f0       	breq	.+32     	; 0x23b8 <twi_transmit+0x3e>
    2398:	a8 2f       	mov	r26, r24
    239a:	b9 2f       	mov	r27, r25
    239c:	80 e0       	ldi	r24, 0x00	; 0
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	30 91 e0 06 	lds	r19, 0x06E0	; 0x8006e0 <twi_txBufferLength>
    23a4:	2d 91       	ld	r18, X+
    23a6:	fc 01       	movw	r30, r24
    23a8:	ee 51       	subi	r30, 0x1E	; 30
    23aa:	f9 4f       	sbci	r31, 0xF9	; 249
    23ac:	e3 0f       	add	r30, r19
    23ae:	f1 1d       	adc	r31, r1
    23b0:	20 83       	st	Z, r18
    23b2:	01 96       	adiw	r24, 0x01	; 1
    23b4:	86 17       	cp	r24, r22
    23b6:	a0 f3       	brcs	.-24     	; 0x23a0 <twi_transmit+0x26>
    23b8:	80 91 e0 06 	lds	r24, 0x06E0	; 0x8006e0 <twi_txBufferLength>
    23bc:	68 0f       	add	r22, r24
    23be:	60 93 e0 06 	sts	0x06E0, r22	; 0x8006e0 <twi_txBufferLength>
    23c2:	80 e0       	ldi	r24, 0x00	; 0
    23c4:	08 95       	ret
    23c6:	81 e0       	ldi	r24, 0x01	; 1
    23c8:	08 95       	ret
    23ca:	82 e0       	ldi	r24, 0x02	; 2
    23cc:	08 95       	ret

000023ce <twi_attachSlaveRxEvent>:
    23ce:	90 93 25 07 	sts	0x0725, r25	; 0x800725 <twi_onSlaveReceive+0x1>
    23d2:	80 93 24 07 	sts	0x0724, r24	; 0x800724 <twi_onSlaveReceive>
    23d6:	08 95       	ret

000023d8 <twi_attachSlaveTxEvent>:
    23d8:	90 93 27 07 	sts	0x0727, r25	; 0x800727 <twi_onSlaveTransmit+0x1>
    23dc:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <twi_onSlaveTransmit>
    23e0:	08 95       	ret

000023e2 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    23e2:	85 ed       	ldi	r24, 0xD5	; 213
    23e4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    23e8:	ec eb       	ldi	r30, 0xBC	; 188
    23ea:	f0 e0       	ldi	r31, 0x00	; 0
    23ec:	80 81       	ld	r24, Z
    23ee:	84 fd       	sbrc	r24, 4
    23f0:	fd cf       	rjmp	.-6      	; 0x23ec <twi_stop+0xa>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    23f2:	10 92 2b 07 	sts	0x072B, r1	; 0x80072b <twi_state>
    23f6:	08 95       	ret

000023f8 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    23f8:	85 ec       	ldi	r24, 0xC5	; 197
    23fa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // update twi state
  twi_state = TWI_READY;
    23fe:	10 92 2b 07 	sts	0x072B, r1	; 0x80072b <twi_state>
    2402:	08 95       	ret

00002404 <__vector_39>:
}

ISR(TWI_vect)
{
    2404:	1f 92       	push	r1
    2406:	0f 92       	push	r0
    2408:	0f b6       	in	r0, 0x3f	; 63
    240a:	0f 92       	push	r0
    240c:	11 24       	eor	r1, r1
    240e:	0b b6       	in	r0, 0x3b	; 59
    2410:	0f 92       	push	r0
    2412:	2f 93       	push	r18
    2414:	3f 93       	push	r19
    2416:	4f 93       	push	r20
    2418:	5f 93       	push	r21
    241a:	6f 93       	push	r22
    241c:	7f 93       	push	r23
    241e:	8f 93       	push	r24
    2420:	9f 93       	push	r25
    2422:	af 93       	push	r26
    2424:	bf 93       	push	r27
    2426:	ef 93       	push	r30
    2428:	ff 93       	push	r31
  switch(TW_STATUS){
    242a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    242e:	88 7f       	andi	r24, 0xF8	; 248
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	89 3c       	cpi	r24, 0xC9	; 201
    2434:	91 05       	cpc	r25, r1
    2436:	08 f0       	brcs	.+2      	; 0x243a <__vector_39+0x36>
    2438:	ee c0       	rjmp	.+476    	; 0x2616 <__vector_39+0x212>
    243a:	fc 01       	movw	r30, r24
    243c:	88 27       	eor	r24, r24
    243e:	ee 58       	subi	r30, 0x8E	; 142
    2440:	ff 4f       	sbci	r31, 0xFF	; 255
    2442:	8f 4f       	sbci	r24, 0xFF	; 255
    2444:	ca c5       	rjmp	.+2964   	; 0x2fda <__tablejump2__>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    2446:	80 91 2a 07 	lds	r24, 0x072A	; 0x80072a <twi_slarw>
    244a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    244e:	85 ec       	ldi	r24, 0xC5	; 197
    2450:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2454:	e0 c0       	rjmp	.+448    	; 0x2616 <__vector_39+0x212>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2456:	90 91 03 07 	lds	r25, 0x0703	; 0x800703 <twi_masterBufferIndex>
    245a:	80 91 02 07 	lds	r24, 0x0702	; 0x800702 <twi_masterBufferLength>
    245e:	98 17       	cp	r25, r24
    2460:	80 f4       	brcc	.+32     	; 0x2482 <__vector_39+0x7e>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2462:	e0 91 03 07 	lds	r30, 0x0703	; 0x800703 <twi_masterBufferIndex>
    2466:	81 e0       	ldi	r24, 0x01	; 1
    2468:	8e 0f       	add	r24, r30
    246a:	80 93 03 07 	sts	0x0703, r24	; 0x800703 <twi_masterBufferIndex>
    246e:	f0 e0       	ldi	r31, 0x00	; 0
    2470:	ec 5f       	subi	r30, 0xFC	; 252
    2472:	f8 4f       	sbci	r31, 0xF8	; 248
    2474:	80 81       	ld	r24, Z
    2476:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    247a:	85 ec       	ldi	r24, 0xC5	; 197
    247c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2480:	ca c0       	rjmp	.+404    	; 0x2616 <__vector_39+0x212>
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
        twi_reply(1);
      }else{
	if (twi_sendStop)
    2482:	80 91 29 07 	lds	r24, 0x0729	; 0x800729 <twi_sendStop>
    2486:	88 23       	and	r24, r24
          twi_stop();
    2488:	11 f0       	breq	.+4      	; 0x248e <__vector_39+0x8a>
    248a:	ab df       	rcall	.-170    	; 0x23e2 <twi_stop>
    248c:	c4 c0       	rjmp	.+392    	; 0x2616 <__vector_39+0x212>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    248e:	81 e0       	ldi	r24, 0x01	; 1
    2490:	80 93 28 07 	sts	0x0728, r24	; 0x800728 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2494:	84 ea       	ldi	r24, 0xA4	; 164
    2496:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	  twi_state = TWI_READY;
    249a:	10 92 2b 07 	sts	0x072B, r1	; 0x80072b <twi_state>
    249e:	bb c0       	rjmp	.+374    	; 0x2616 <__vector_39+0x212>
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    24a0:	80 e2       	ldi	r24, 0x20	; 32
    24a2:	80 93 be 06 	sts	0x06BE, r24	; 0x8006be <twi_error>
      twi_stop();
    24a6:	9d df       	rcall	.-198    	; 0x23e2 <twi_stop>
      break;
    24a8:	b6 c0       	rjmp	.+364    	; 0x2616 <__vector_39+0x212>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    24aa:	80 e3       	ldi	r24, 0x30	; 48
    24ac:	80 93 be 06 	sts	0x06BE, r24	; 0x8006be <twi_error>
      twi_stop();
    24b0:	98 df       	rcall	.-208    	; 0x23e2 <twi_stop>
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    24b2:	b1 c0       	rjmp	.+354    	; 0x2616 <__vector_39+0x212>
    24b4:	88 e3       	ldi	r24, 0x38	; 56
    24b6:	80 93 be 06 	sts	0x06BE, r24	; 0x8006be <twi_error>
      twi_releaseBus();
    24ba:	9e df       	rcall	.-196    	; 0x23f8 <twi_releaseBus>
      break;
    24bc:	ac c0       	rjmp	.+344    	; 0x2616 <__vector_39+0x212>

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    24be:	e0 91 03 07 	lds	r30, 0x0703	; 0x800703 <twi_masterBufferIndex>
    24c2:	81 e0       	ldi	r24, 0x01	; 1
    24c4:	8e 0f       	add	r24, r30
    24c6:	80 93 03 07 	sts	0x0703, r24	; 0x800703 <twi_masterBufferIndex>
    24ca:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    24ce:	f0 e0       	ldi	r31, 0x00	; 0
    24d0:	ec 5f       	subi	r30, 0xFC	; 252
    24d2:	f8 4f       	sbci	r31, 0xF8	; 248
    24d4:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    24d6:	90 91 03 07 	lds	r25, 0x0703	; 0x800703 <twi_masterBufferIndex>
    24da:	80 91 02 07 	lds	r24, 0x0702	; 0x800702 <twi_masterBufferLength>
    24de:	98 17       	cp	r25, r24
    24e0:	20 f4       	brcc	.+8      	; 0x24ea <__vector_39+0xe6>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    24e2:	85 ec       	ldi	r24, 0xC5	; 197
    24e4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    24e8:	96 c0       	rjmp	.+300    	; 0x2616 <__vector_39+0x212>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    24ea:	85 e8       	ldi	r24, 0x85	; 133
    24ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    24f0:	92 c0       	rjmp	.+292    	; 0x2616 <__vector_39+0x212>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    24f2:	e0 91 03 07 	lds	r30, 0x0703	; 0x800703 <twi_masterBufferIndex>
    24f6:	81 e0       	ldi	r24, 0x01	; 1
    24f8:	8e 0f       	add	r24, r30
    24fa:	80 93 03 07 	sts	0x0703, r24	; 0x800703 <twi_masterBufferIndex>
    24fe:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2502:	f0 e0       	ldi	r31, 0x00	; 0
    2504:	ec 5f       	subi	r30, 0xFC	; 252
    2506:	f8 4f       	sbci	r31, 0xF8	; 248
	if (twi_sendStop)
    2508:	80 83       	st	Z, r24
    250a:	80 91 29 07 	lds	r24, 0x0729	; 0x800729 <twi_sendStop>
    250e:	88 23       	and	r24, r24
          twi_stop();
    2510:	11 f0       	breq	.+4      	; 0x2516 <__vector_39+0x112>
    2512:	67 df       	rcall	.-306    	; 0x23e2 <twi_stop>
    2514:	80 c0       	rjmp	.+256    	; 0x2616 <__vector_39+0x212>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    2516:	81 e0       	ldi	r24, 0x01	; 1
    2518:	80 93 28 07 	sts	0x0728, r24	; 0x800728 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    251c:	84 ea       	ldi	r24, 0xA4	; 164
    251e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	  twi_state = TWI_READY;
    2522:	10 92 2b 07 	sts	0x072B, r1	; 0x80072b <twi_state>
	}    
	break;
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
    2526:	77 c0       	rjmp	.+238    	; 0x2616 <__vector_39+0x212>
    2528:	5c df       	rcall	.-328    	; 0x23e2 <twi_stop>
      break;
    252a:	75 c0       	rjmp	.+234    	; 0x2616 <__vector_39+0x212>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    252c:	83 e0       	ldi	r24, 0x03	; 3
    252e:	80 93 2b 07 	sts	0x072B, r24	; 0x80072b <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    2532:	10 92 bf 06 	sts	0x06BF, r1	; 0x8006bf <twi_rxBufferIndex>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2536:	85 ec       	ldi	r24, 0xC5	; 197
    2538:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    253c:	6c c0       	rjmp	.+216    	; 0x2616 <__vector_39+0x212>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    253e:	80 91 bf 06 	lds	r24, 0x06BF	; 0x8006bf <twi_rxBufferIndex>
    2542:	80 32       	cpi	r24, 0x20	; 32
    2544:	80 f4       	brcc	.+32     	; 0x2566 <__vector_39+0x162>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    2546:	e0 91 bf 06 	lds	r30, 0x06BF	; 0x8006bf <twi_rxBufferIndex>
    254a:	81 e0       	ldi	r24, 0x01	; 1
    254c:	8e 0f       	add	r24, r30
    254e:	80 93 bf 06 	sts	0x06BF, r24	; 0x8006bf <twi_rxBufferIndex>
    2552:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2556:	f0 e0       	ldi	r31, 0x00	; 0
    2558:	e0 54       	subi	r30, 0x40	; 64
    255a:	f9 4f       	sbci	r31, 0xF9	; 249
    255c:	80 83       	st	Z, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    255e:	85 ec       	ldi	r24, 0xC5	; 197
    2560:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2564:	58 c0       	rjmp	.+176    	; 0x2616 <__vector_39+0x212>
    2566:	85 e8       	ldi	r24, 0x85	; 133
    2568:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    256c:	54 c0       	rjmp	.+168    	; 0x2616 <__vector_39+0x212>
    256e:	44 df       	rcall	.-376    	; 0x23f8 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2570:	80 91 bf 06 	lds	r24, 0x06BF	; 0x8006bf <twi_rxBufferIndex>
    2574:	80 32       	cpi	r24, 0x20	; 32
    2576:	30 f4       	brcc	.+12     	; 0x2584 <__vector_39+0x180>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    2578:	e0 91 bf 06 	lds	r30, 0x06BF	; 0x8006bf <twi_rxBufferIndex>
    257c:	f0 e0       	ldi	r31, 0x00	; 0
    257e:	e0 54       	subi	r30, 0x40	; 64
    2580:	f9 4f       	sbci	r31, 0xF9	; 249
    2582:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    2584:	60 91 bf 06 	lds	r22, 0x06BF	; 0x8006bf <twi_rxBufferIndex>
    2588:	70 e0       	ldi	r23, 0x00	; 0
    258a:	e0 91 24 07 	lds	r30, 0x0724	; 0x800724 <twi_onSlaveReceive>
    258e:	f0 91 25 07 	lds	r31, 0x0725	; 0x800725 <twi_onSlaveReceive+0x1>
    2592:	80 ec       	ldi	r24, 0xC0	; 192
    2594:	96 e0       	ldi	r25, 0x06	; 6
    2596:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    2598:	10 92 bf 06 	sts	0x06BF, r1	; 0x8006bf <twi_rxBufferIndex>
      break;
    259c:	3c c0       	rjmp	.+120    	; 0x2616 <__vector_39+0x212>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    259e:	85 e8       	ldi	r24, 0x85	; 133
    25a0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    25a4:	38 c0       	rjmp	.+112    	; 0x2616 <__vector_39+0x212>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    25a6:	84 e0       	ldi	r24, 0x04	; 4
    25a8:	80 93 2b 07 	sts	0x072B, r24	; 0x80072b <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    25ac:	10 92 e1 06 	sts	0x06E1, r1	; 0x8006e1 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    25b0:	10 92 e0 06 	sts	0x06E0, r1	; 0x8006e0 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    25b4:	e0 91 26 07 	lds	r30, 0x0726	; 0x800726 <twi_onSlaveTransmit>
    25b8:	f0 91 27 07 	lds	r31, 0x0727	; 0x800727 <twi_onSlaveTransmit+0x1>
    25bc:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    25be:	80 91 e0 06 	lds	r24, 0x06E0	; 0x8006e0 <twi_txBufferLength>
    25c2:	81 11       	cpse	r24, r1
    25c4:	05 c0       	rjmp	.+10     	; 0x25d0 <__vector_39+0x1cc>
        twi_txBufferLength = 1;
    25c6:	81 e0       	ldi	r24, 0x01	; 1
    25c8:	80 93 e0 06 	sts	0x06E0, r24	; 0x8006e0 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    25cc:	10 92 e2 06 	sts	0x06E2, r1	; 0x8006e2 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    25d0:	e0 91 e1 06 	lds	r30, 0x06E1	; 0x8006e1 <twi_txBufferIndex>
    25d4:	81 e0       	ldi	r24, 0x01	; 1
    25d6:	8e 0f       	add	r24, r30
    25d8:	80 93 e1 06 	sts	0x06E1, r24	; 0x8006e1 <twi_txBufferIndex>
    25dc:	f0 e0       	ldi	r31, 0x00	; 0
    25de:	ee 51       	subi	r30, 0x1E	; 30
    25e0:	f9 4f       	sbci	r31, 0xF9	; 249
    25e2:	80 81       	ld	r24, Z
    25e4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    25e8:	90 91 e1 06 	lds	r25, 0x06E1	; 0x8006e1 <twi_txBufferIndex>
    25ec:	80 91 e0 06 	lds	r24, 0x06E0	; 0x8006e0 <twi_txBufferLength>
    25f0:	98 17       	cp	r25, r24
    25f2:	20 f4       	brcc	.+8      	; 0x25fc <__vector_39+0x1f8>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    25f4:	85 ec       	ldi	r24, 0xC5	; 197
    25f6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    25fa:	0d c0       	rjmp	.+26     	; 0x2616 <__vector_39+0x212>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    25fc:	85 e8       	ldi	r24, 0x85	; 133
    25fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2602:	09 c0       	rjmp	.+18     	; 0x2616 <__vector_39+0x212>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2604:	85 ec       	ldi	r24, 0xC5	; 197
    2606:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    260a:	10 92 2b 07 	sts	0x072B, r1	; 0x80072b <twi_state>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    260e:	03 c0       	rjmp	.+6      	; 0x2616 <__vector_39+0x212>
    2610:	10 92 be 06 	sts	0x06BE, r1	; 0x8006be <twi_error>
      twi_stop();
    2614:	e6 de       	rcall	.-564    	; 0x23e2 <twi_stop>
      break;
  }
    2616:	ff 91       	pop	r31
    2618:	ef 91       	pop	r30
    261a:	bf 91       	pop	r27
    261c:	af 91       	pop	r26
    261e:	9f 91       	pop	r25
    2620:	8f 91       	pop	r24
    2622:	7f 91       	pop	r23
    2624:	6f 91       	pop	r22
    2626:	5f 91       	pop	r21
    2628:	4f 91       	pop	r20
    262a:	3f 91       	pop	r19
    262c:	2f 91       	pop	r18
    262e:	0f 90       	pop	r0
    2630:	0b be       	out	0x3b, r0	; 59
    2632:	0f 90       	pop	r0
    2634:	0f be       	out	0x3f, r0	; 63
    2636:	0f 90       	pop	r0
    2638:	1f 90       	pop	r1
    263a:	18 95       	reti

0000263c <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
	user_onRequest = function;
    263c:	80 91 56 07 	lds	r24, 0x0756	; 0x800756 <_ZN7TwoWire14rxBufferLengthE>
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	20 91 57 07 	lds	r18, 0x0757	; 0x800757 <_ZN7TwoWire13rxBufferIndexE>
    2646:	82 1b       	sub	r24, r18
    2648:	91 09       	sbc	r25, r1
    264a:	08 95       	ret

0000264c <_ZN7TwoWire4readEv>:
    264c:	90 91 57 07 	lds	r25, 0x0757	; 0x800757 <_ZN7TwoWire13rxBufferIndexE>
    2650:	80 91 56 07 	lds	r24, 0x0756	; 0x800756 <_ZN7TwoWire14rxBufferLengthE>
    2654:	98 17       	cp	r25, r24
    2656:	50 f4       	brcc	.+20     	; 0x266c <_ZN7TwoWire4readEv+0x20>
    2658:	e9 2f       	mov	r30, r25
    265a:	f0 e0       	ldi	r31, 0x00	; 0
    265c:	e8 5a       	subi	r30, 0xA8	; 168
    265e:	f8 4f       	sbci	r31, 0xF8	; 248
    2660:	20 81       	ld	r18, Z
    2662:	30 e0       	ldi	r19, 0x00	; 0
    2664:	9f 5f       	subi	r25, 0xFF	; 255
    2666:	90 93 57 07 	sts	0x0757, r25	; 0x800757 <_ZN7TwoWire13rxBufferIndexE>
    266a:	02 c0       	rjmp	.+4      	; 0x2670 <_ZN7TwoWire4readEv+0x24>
    266c:	2f ef       	ldi	r18, 0xFF	; 255
    266e:	3f ef       	ldi	r19, 0xFF	; 255
    2670:	c9 01       	movw	r24, r18
    2672:	08 95       	ret

00002674 <_ZN7TwoWire4peekEv>:
    2674:	e0 91 57 07 	lds	r30, 0x0757	; 0x800757 <_ZN7TwoWire13rxBufferIndexE>
    2678:	80 91 56 07 	lds	r24, 0x0756	; 0x800756 <_ZN7TwoWire14rxBufferLengthE>
    267c:	e8 17       	cp	r30, r24
    267e:	30 f4       	brcc	.+12     	; 0x268c <_ZN7TwoWire4peekEv+0x18>
    2680:	f0 e0       	ldi	r31, 0x00	; 0
    2682:	e8 5a       	subi	r30, 0xA8	; 168
    2684:	f8 4f       	sbci	r31, 0xF8	; 248
    2686:	80 81       	ld	r24, Z
    2688:	90 e0       	ldi	r25, 0x00	; 0
    268a:	08 95       	ret
    268c:	8f ef       	ldi	r24, 0xFF	; 255
    268e:	9f ef       	ldi	r25, 0xFF	; 255
    2690:	08 95       	ret

00002692 <_ZN7TwoWire5flushEv>:
    2692:	08 95       	ret

00002694 <_ZN7TwoWire16onReceiveServiceEPhi>:
    2694:	cf 93       	push	r28
    2696:	df 93       	push	r29
    2698:	ec 01       	movw	r28, r24
    269a:	e0 91 2e 07 	lds	r30, 0x072E	; 0x80072e <_ZN7TwoWire14user_onReceiveE>
    269e:	f0 91 2f 07 	lds	r31, 0x072F	; 0x80072f <_ZN7TwoWire14user_onReceiveE+0x1>
    26a2:	30 97       	sbiw	r30, 0x00	; 0
    26a4:	01 f1       	breq	.+64     	; 0x26e6 <_ZN7TwoWire16onReceiveServiceEPhi+0x52>
    26a6:	90 91 57 07 	lds	r25, 0x0757	; 0x800757 <_ZN7TwoWire13rxBufferIndexE>
    26aa:	80 91 56 07 	lds	r24, 0x0756	; 0x800756 <_ZN7TwoWire14rxBufferLengthE>
    26ae:	98 17       	cp	r25, r24
    26b0:	d0 f0       	brcs	.+52     	; 0x26e6 <_ZN7TwoWire16onReceiveServiceEPhi+0x52>
    26b2:	16 16       	cp	r1, r22
    26b4:	17 06       	cpc	r1, r23
    26b6:	8c f4       	brge	.+34     	; 0x26da <_ZN7TwoWire16onReceiveServiceEPhi+0x46>
    26b8:	20 e0       	ldi	r18, 0x00	; 0
    26ba:	30 e0       	ldi	r19, 0x00	; 0
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	de 01       	movw	r26, r28
    26c0:	a9 0f       	add	r26, r25
    26c2:	b1 1d       	adc	r27, r1
    26c4:	4c 91       	ld	r20, X
    26c6:	d9 01       	movw	r26, r18
    26c8:	a8 5a       	subi	r26, 0xA8	; 168
    26ca:	b8 4f       	sbci	r27, 0xF8	; 248
    26cc:	4c 93       	st	X, r20
    26ce:	9f 5f       	subi	r25, 0xFF	; 255
    26d0:	29 2f       	mov	r18, r25
    26d2:	30 e0       	ldi	r19, 0x00	; 0
    26d4:	26 17       	cp	r18, r22
    26d6:	37 07       	cpc	r19, r23
    26d8:	94 f3       	brlt	.-28     	; 0x26be <_ZN7TwoWire16onReceiveServiceEPhi+0x2a>
    26da:	cb 01       	movw	r24, r22
    26dc:	10 92 57 07 	sts	0x0757, r1	; 0x800757 <_ZN7TwoWire13rxBufferIndexE>
    26e0:	60 93 56 07 	sts	0x0756, r22	; 0x800756 <_ZN7TwoWire14rxBufferLengthE>
    26e4:	19 95       	eicall
    26e6:	df 91       	pop	r29
    26e8:	cf 91       	pop	r28
    26ea:	08 95       	ret

000026ec <_ZN7TwoWire16onRequestServiceEv>:
    26ec:	e0 91 30 07 	lds	r30, 0x0730	; 0x800730 <_ZN7TwoWire14user_onRequestE>
    26f0:	f0 91 31 07 	lds	r31, 0x0731	; 0x800731 <_ZN7TwoWire14user_onRequestE+0x1>
    26f4:	30 97       	sbiw	r30, 0x00	; 0
    26f6:	29 f0       	breq	.+10     	; 0x2702 <_ZN7TwoWire16onRequestServiceEv+0x16>
    26f8:	10 92 34 07 	sts	0x0734, r1	; 0x800734 <_ZN7TwoWire13txBufferIndexE>
    26fc:	10 92 33 07 	sts	0x0733, r1	; 0x800733 <_ZN7TwoWire14txBufferLengthE>
    2700:	19 95       	eicall
    2702:	08 95       	ret

00002704 <_ZN7TwoWire5writeEh>:
    2704:	cf 93       	push	r28
    2706:	df 93       	push	r29
    2708:	1f 92       	push	r1
    270a:	cd b7       	in	r28, 0x3d	; 61
    270c:	de b7       	in	r29, 0x3e	; 62
    270e:	69 83       	std	Y+1, r22	; 0x01
    2710:	80 91 32 07 	lds	r24, 0x0732	; 0x800732 <_ZN7TwoWire12transmittingE>
    2714:	88 23       	and	r24, r24
    2716:	99 f0       	breq	.+38     	; 0x273e <_ZN7TwoWire5writeEh+0x3a>
    2718:	80 91 33 07 	lds	r24, 0x0733	; 0x800733 <_ZN7TwoWire14txBufferLengthE>
    271c:	80 32       	cpi	r24, 0x20	; 32
    271e:	b0 f4       	brcc	.+44     	; 0x274c <_ZN7TwoWire5writeEh+0x48>
    2720:	80 91 34 07 	lds	r24, 0x0734	; 0x800734 <_ZN7TwoWire13txBufferIndexE>
    2724:	e8 2f       	mov	r30, r24
    2726:	f0 e0       	ldi	r31, 0x00	; 0
    2728:	eb 5c       	subi	r30, 0xCB	; 203
    272a:	f8 4f       	sbci	r31, 0xF8	; 248
    272c:	60 83       	st	Z, r22
    272e:	8f 5f       	subi	r24, 0xFF	; 255
    2730:	80 93 34 07 	sts	0x0734, r24	; 0x800734 <_ZN7TwoWire13txBufferIndexE>
    2734:	80 93 33 07 	sts	0x0733, r24	; 0x800733 <_ZN7TwoWire14txBufferLengthE>
    2738:	81 e0       	ldi	r24, 0x01	; 1
    273a:	90 e0       	ldi	r25, 0x00	; 0
    273c:	09 c0       	rjmp	.+18     	; 0x2750 <_ZN7TwoWire5writeEh+0x4c>
    273e:	61 e0       	ldi	r22, 0x01	; 1
    2740:	ce 01       	movw	r24, r28
    2742:	01 96       	adiw	r24, 0x01	; 1
    2744:	1a de       	rcall	.-972    	; 0x237a <twi_transmit>
    2746:	81 e0       	ldi	r24, 0x01	; 1
    2748:	90 e0       	ldi	r25, 0x00	; 0
    274a:	02 c0       	rjmp	.+4      	; 0x2750 <_ZN7TwoWire5writeEh+0x4c>
    274c:	80 e0       	ldi	r24, 0x00	; 0
    274e:	90 e0       	ldi	r25, 0x00	; 0
    2750:	0f 90       	pop	r0
    2752:	df 91       	pop	r29
    2754:	cf 91       	pop	r28
    2756:	08 95       	ret

00002758 <_ZN7TwoWire5writeEPKhj>:
    2758:	cf 92       	push	r12
    275a:	df 92       	push	r13
    275c:	ef 92       	push	r14
    275e:	ff 92       	push	r15
    2760:	0f 93       	push	r16
    2762:	1f 93       	push	r17
    2764:	cf 93       	push	r28
    2766:	df 93       	push	r29
    2768:	8c 01       	movw	r16, r24
    276a:	cb 01       	movw	r24, r22
    276c:	6a 01       	movw	r12, r20
    276e:	20 91 32 07 	lds	r18, 0x0732	; 0x800732 <_ZN7TwoWire12transmittingE>
    2772:	22 23       	and	r18, r18
    2774:	a1 f0       	breq	.+40     	; 0x279e <_ZN7TwoWire5writeEPKhj+0x46>
    2776:	41 15       	cp	r20, r1
    2778:	51 05       	cpc	r21, r1
    277a:	99 f0       	breq	.+38     	; 0x27a2 <_ZN7TwoWire5writeEPKhj+0x4a>
    277c:	eb 01       	movw	r28, r22
    277e:	7b 01       	movw	r14, r22
    2780:	e4 0e       	add	r14, r20
    2782:	f5 1e       	adc	r15, r21
    2784:	69 91       	ld	r22, Y+
    2786:	d8 01       	movw	r26, r16
    2788:	ed 91       	ld	r30, X+
    278a:	fc 91       	ld	r31, X
    278c:	01 90       	ld	r0, Z+
    278e:	f0 81       	ld	r31, Z
    2790:	e0 2d       	mov	r30, r0
    2792:	c8 01       	movw	r24, r16
    2794:	19 95       	eicall
    2796:	ce 15       	cp	r28, r14
    2798:	df 05       	cpc	r29, r15
    279a:	a1 f7       	brne	.-24     	; 0x2784 <_ZN7TwoWire5writeEPKhj+0x2c>
    279c:	02 c0       	rjmp	.+4      	; 0x27a2 <_ZN7TwoWire5writeEPKhj+0x4a>
    279e:	64 2f       	mov	r22, r20
    27a0:	ec dd       	rcall	.-1064   	; 0x237a <twi_transmit>
    27a2:	c6 01       	movw	r24, r12
    27a4:	df 91       	pop	r29
    27a6:	cf 91       	pop	r28
    27a8:	1f 91       	pop	r17
    27aa:	0f 91       	pop	r16
    27ac:	ff 90       	pop	r15
    27ae:	ef 90       	pop	r14
    27b0:	df 90       	pop	r13
    27b2:	cf 90       	pop	r12
    27b4:	08 95       	ret

000027b6 <_ZN7TwoWire5beginEv>:
    27b6:	10 92 57 07 	sts	0x0757, r1	; 0x800757 <_ZN7TwoWire13rxBufferIndexE>
    27ba:	10 92 56 07 	sts	0x0756, r1	; 0x800756 <_ZN7TwoWire14rxBufferLengthE>
    27be:	10 92 34 07 	sts	0x0734, r1	; 0x800734 <_ZN7TwoWire13txBufferIndexE>
    27c2:	10 92 33 07 	sts	0x0733, r1	; 0x800733 <_ZN7TwoWire14txBufferLengthE>
    27c6:	0b dd       	rcall	.-1514   	; 0x21de <twi_init>
    27c8:	86 e7       	ldi	r24, 0x76	; 118
    27ca:	93 e1       	ldi	r25, 0x13	; 19
    27cc:	05 de       	rcall	.-1014   	; 0x23d8 <twi_attachSlaveTxEvent>
    27ce:	8a e4       	ldi	r24, 0x4A	; 74
    27d0:	93 e1       	ldi	r25, 0x13	; 19
    27d2:	fd cd       	rjmp	.-1030   	; 0x23ce <twi_attachSlaveRxEvent>
    27d4:	08 95       	ret

000027d6 <_ZN7TwoWire17beginTransmissionEh>:
    27d6:	81 e0       	ldi	r24, 0x01	; 1
    27d8:	80 93 32 07 	sts	0x0732, r24	; 0x800732 <_ZN7TwoWire12transmittingE>
    27dc:	60 93 55 07 	sts	0x0755, r22	; 0x800755 <_ZN7TwoWire9txAddressE>
    27e0:	10 92 34 07 	sts	0x0734, r1	; 0x800734 <_ZN7TwoWire13txBufferIndexE>
    27e4:	10 92 33 07 	sts	0x0733, r1	; 0x800733 <_ZN7TwoWire14txBufferLengthE>
    27e8:	08 95       	ret

000027ea <_ZN7TwoWire15endTransmissionEh>:
    27ea:	0f 93       	push	r16
    27ec:	06 2f       	mov	r16, r22
    27ee:	21 e0       	ldi	r18, 0x01	; 1
    27f0:	40 91 33 07 	lds	r20, 0x0733	; 0x800733 <_ZN7TwoWire14txBufferLengthE>
    27f4:	65 e3       	ldi	r22, 0x35	; 53
    27f6:	77 e0       	ldi	r23, 0x07	; 7
    27f8:	80 91 55 07 	lds	r24, 0x0755	; 0x800755 <_ZN7TwoWire9txAddressE>
    27fc:	5b dd       	rcall	.-1354   	; 0x22b4 <twi_writeTo>
    27fe:	10 92 34 07 	sts	0x0734, r1	; 0x800734 <_ZN7TwoWire13txBufferIndexE>
    2802:	10 92 33 07 	sts	0x0733, r1	; 0x800733 <_ZN7TwoWire14txBufferLengthE>
    2806:	10 92 32 07 	sts	0x0732, r1	; 0x800732 <_ZN7TwoWire12transmittingE>
    280a:	0f 91       	pop	r16
    280c:	08 95       	ret

0000280e <_ZN7TwoWire11requestFromEhhmhh>:
    280e:	4f 92       	push	r4
    2810:	5f 92       	push	r5
    2812:	6f 92       	push	r6
    2814:	7f 92       	push	r7
    2816:	af 92       	push	r10
    2818:	bf 92       	push	r11
    281a:	cf 92       	push	r12
    281c:	ef 92       	push	r14
    281e:	ff 92       	push	r15
    2820:	0f 93       	push	r16
    2822:	1f 93       	push	r17
    2824:	cf 93       	push	r28
    2826:	df 93       	push	r29
    2828:	5c 01       	movw	r10, r24
    282a:	f6 2e       	mov	r15, r22
    282c:	d4 2f       	mov	r29, r20
    282e:	28 01       	movw	r4, r16
    2830:	39 01       	movw	r6, r18
    2832:	ee 20       	and	r14, r14
    2834:	39 f1       	breq	.+78     	; 0x2884 <_ZN7TwoWire11requestFromEhhmhh+0x76>
    2836:	cf df       	rcall	.-98     	; 0x27d6 <_ZN7TwoWire17beginTransmissionEh>
    2838:	8e 2d       	mov	r24, r14
    283a:	84 30       	cpi	r24, 0x04	; 4
    283c:	08 f0       	brcs	.+2      	; 0x2840 <_ZN7TwoWire11requestFromEhhmhh+0x32>
    283e:	83 e0       	ldi	r24, 0x03	; 3
    2840:	cf ef       	ldi	r28, 0xFF	; 255
    2842:	c8 0f       	add	r28, r24
    2844:	88 23       	and	r24, r24
    2846:	d9 f0       	breq	.+54     	; 0x287e <_ZN7TwoWire11requestFromEhhmhh+0x70>
    2848:	8c 2f       	mov	r24, r28
    284a:	88 0f       	add	r24, r24
    284c:	88 0f       	add	r24, r24
    284e:	88 0f       	add	r24, r24
    2850:	a3 01       	movw	r20, r6
    2852:	92 01       	movw	r18, r4
    2854:	04 c0       	rjmp	.+8      	; 0x285e <_ZN7TwoWire11requestFromEhhmhh+0x50>
    2856:	56 95       	lsr	r21
    2858:	47 95       	ror	r20
    285a:	37 95       	ror	r19
    285c:	27 95       	ror	r18
    285e:	8a 95       	dec	r24
    2860:	d2 f7       	brpl	.-12     	; 0x2856 <_ZN7TwoWire11requestFromEhhmhh+0x48>
    2862:	ca 01       	movw	r24, r20
    2864:	b9 01       	movw	r22, r18
    2866:	d5 01       	movw	r26, r10
    2868:	ed 91       	ld	r30, X+
    286a:	fc 91       	ld	r31, X
    286c:	01 90       	ld	r0, Z+
    286e:	f0 81       	ld	r31, Z
    2870:	e0 2d       	mov	r30, r0
    2872:	c5 01       	movw	r24, r10
    2874:	19 95       	eicall
    2876:	8c 2f       	mov	r24, r28
    2878:	c1 50       	subi	r28, 0x01	; 1
    287a:	81 11       	cpse	r24, r1
    287c:	e5 cf       	rjmp	.-54     	; 0x2848 <_ZN7TwoWire11requestFromEhhmhh+0x3a>
    287e:	60 e0       	ldi	r22, 0x00	; 0
    2880:	c5 01       	movw	r24, r10
    2882:	b3 df       	rcall	.-154    	; 0x27ea <_ZN7TwoWire15endTransmissionEh>
    2884:	4d 2f       	mov	r20, r29
    2886:	d1 32       	cpi	r29, 0x21	; 33
    2888:	08 f0       	brcs	.+2      	; 0x288c <_ZN7TwoWire11requestFromEhhmhh+0x7e>
    288a:	40 e2       	ldi	r20, 0x20	; 32
    288c:	2c 2d       	mov	r18, r12
    288e:	68 e5       	ldi	r22, 0x58	; 88
    2890:	77 e0       	ldi	r23, 0x07	; 7
    2892:	8f 2d       	mov	r24, r15
    2894:	bd dc       	rcall	.-1670   	; 0x2210 <twi_readFrom>
    2896:	10 92 57 07 	sts	0x0757, r1	; 0x800757 <_ZN7TwoWire13rxBufferIndexE>
    289a:	80 93 56 07 	sts	0x0756, r24	; 0x800756 <_ZN7TwoWire14rxBufferLengthE>
    289e:	df 91       	pop	r29
    28a0:	cf 91       	pop	r28
    28a2:	1f 91       	pop	r17
    28a4:	0f 91       	pop	r16
    28a6:	ff 90       	pop	r15
    28a8:	ef 90       	pop	r14
    28aa:	cf 90       	pop	r12
    28ac:	bf 90       	pop	r11
    28ae:	af 90       	pop	r10
    28b0:	7f 90       	pop	r7
    28b2:	6f 90       	pop	r6
    28b4:	5f 90       	pop	r5
    28b6:	4f 90       	pop	r4
    28b8:	08 95       	ret

000028ba <_ZN7TwoWire11requestFromEhhh>:
    28ba:	cf 92       	push	r12
    28bc:	ef 92       	push	r14
    28be:	0f 93       	push	r16
    28c0:	1f 93       	push	r17
    28c2:	c2 2e       	mov	r12, r18
    28c4:	e1 2c       	mov	r14, r1
    28c6:	00 e0       	ldi	r16, 0x00	; 0
    28c8:	10 e0       	ldi	r17, 0x00	; 0
    28ca:	98 01       	movw	r18, r16
    28cc:	a0 df       	rcall	.-192    	; 0x280e <_ZN7TwoWire11requestFromEhhmhh>
    28ce:	1f 91       	pop	r17
    28d0:	0f 91       	pop	r16
    28d2:	ef 90       	pop	r14
    28d4:	cf 90       	pop	r12
    28d6:	08 95       	ret

000028d8 <_ZN7TwoWire11requestFromEhh>:
    28d8:	21 e0       	ldi	r18, 0x01	; 1
    28da:	ef cf       	rjmp	.-34     	; 0x28ba <_ZN7TwoWire11requestFromEhhh>
    28dc:	08 95       	ret

000028de <_ZN7TwoWire15endTransmissionEv>:
    28de:	61 e0       	ldi	r22, 0x01	; 1
    28e0:	84 cf       	rjmp	.-248    	; 0x27ea <_ZN7TwoWire15endTransmissionEh>
    28e2:	08 95       	ret

000028e4 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    28e4:	80 ec       	ldi	r24, 0xC0	; 192
    28e6:	92 e0       	ldi	r25, 0x02	; 2
    28e8:	90 93 2d 07 	sts	0x072D, r25	; 0x80072d <Wire+0x1>
    28ec:	80 93 2c 07 	sts	0x072C, r24	; 0x80072c <Wire>
    28f0:	08 95       	ret

000028f2 <_ZN9IReadable15CommandReceivedEhPKhh>:
#include "EtherComm.h"

class IReadable : public IDevice {
public:
	void CommandReceived(uint8_t id, const uint8_t* data, uint8_t len){
		if(len == 0){
    28f2:	21 11       	cpse	r18, r1
    28f4:	0d c0       	rjmp	.+26     	; 0x2910 <_ZN9IReadable15CommandReceivedEhPKhh+0x1e>
			ReadRegisterRequested(id, EtherComm::buffer + 3);
    28f6:	40 91 00 02 	lds	r20, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    28fa:	50 91 01 02 	lds	r21, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    28fe:	4d 5f       	subi	r20, 0xFD	; 253
    2900:	5f 4f       	sbci	r21, 0xFF	; 255
    2902:	dc 01       	movw	r26, r24
    2904:	ed 91       	ld	r30, X+
    2906:	fc 91       	ld	r31, X
    2908:	06 80       	ldd	r0, Z+6	; 0x06
    290a:	f7 81       	ldd	r31, Z+7	; 0x07
    290c:	e0 2d       	mov	r30, r0
    290e:	19 95       	eicall
    2910:	08 95       	ret

00002912 <_ZN13DigitalSensor6UpdateEPh>:
	else LedPort &= ~LedPin;
}

bool Robot::ReadTestBtn(){ //TODO remove
	return !((TestBtnPinPort & TestBtnPin) > 0);
}
    2912:	08 95       	ret

00002914 <_ZN13DigitalSensor21ReadRegisterRequestedEhPh>:
    2914:	dc 01       	movw	r26, r24
    2916:	12 96       	adiw	r26, 0x02	; 2
    2918:	2c 91       	ld	r18, X
    291a:	12 97       	sbiw	r26, 0x02	; 2
    291c:	26 13       	cpse	r18, r22
    291e:	1a c0       	rjmp	.+52     	; 0x2954 <_ZN13DigitalSensor21ReadRegisterRequestedEhPh+0x40>
    2920:	14 96       	adiw	r26, 0x04	; 4
    2922:	ed 91       	ld	r30, X+
    2924:	fc 91       	ld	r31, X
    2926:	15 97       	sbiw	r26, 0x05	; 5
    2928:	60 81       	ld	r22, Z
    292a:	13 96       	adiw	r26, 0x03	; 3
    292c:	3c 91       	ld	r19, X
    292e:	36 23       	and	r19, r22
    2930:	61 e0       	ldi	r22, 0x01	; 1
    2932:	09 f4       	brne	.+2      	; 0x2936 <_ZN13DigitalSensor21ReadRegisterRequestedEhPh+0x22>
    2934:	60 e0       	ldi	r22, 0x00	; 0
    2936:	fa 01       	movw	r30, r20
    2938:	dc 01       	movw	r26, r24
    293a:	16 96       	adiw	r26, 0x06	; 6
    293c:	8c 91       	ld	r24, X
    293e:	86 27       	eor	r24, r22
    2940:	80 83       	st	Z, r24
    2942:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    2946:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    294a:	22 83       	std	Z+2, r18	; 0x02
    294c:	62 e0       	ldi	r22, 0x02	; 2
    294e:	83 e0       	ldi	r24, 0x03	; 3
    2950:	0c 94 b7 0b 	jmp	0x176e	; 0x176e <_ZN9EtherComm11SendCommandEhh>
    2954:	08 95       	ret

00002956 <_ZN5Robot14RegisterDeviceEhP7IDevice>:
    2956:	90 e0       	ldi	r25, 0x00	; 0
    2958:	fc 01       	movw	r30, r24
    295a:	ee 0f       	add	r30, r30
    295c:	ff 1f       	adc	r31, r31
    295e:	e2 57       	subi	r30, 0x72	; 114
    2960:	f8 4f       	sbci	r31, 0xF8	; 248
    2962:	20 81       	ld	r18, Z
    2964:	31 81       	ldd	r19, Z+1	; 0x01
    2966:	23 2b       	or	r18, r19
    2968:	49 f4       	brne	.+18     	; 0x297c <_ZN5Robot14RegisterDeviceEhP7IDevice+0x26>
    296a:	88 0f       	add	r24, r24
    296c:	99 1f       	adc	r25, r25
    296e:	fc 01       	movw	r30, r24
    2970:	e2 57       	subi	r30, 0x72	; 114
    2972:	f8 4f       	sbci	r31, 0xF8	; 248
    2974:	71 83       	std	Z+1, r23	; 0x01
    2976:	60 83       	st	Z, r22
    2978:	81 e0       	ldi	r24, 0x01	; 1
    297a:	08 95       	ret
    297c:	80 e0       	ldi	r24, 0x00	; 0
    297e:	08 95       	ret

00002980 <_ZN13DigitalSensor5beginEv>:
    2980:	bc 01       	movw	r22, r24
    2982:	fc 01       	movw	r30, r24
    2984:	82 81       	ldd	r24, Z+2	; 0x02
    2986:	e7 cf       	rjmp	.-50     	; 0x2956 <_ZN5Robot14RegisterDeviceEhP7IDevice>
    2988:	08 95       	ret

0000298a <_ZN5Robot6SetLedEb>:
    298a:	88 23       	and	r24, r24
    298c:	11 f0       	breq	.+4      	; 0x2992 <_ZN5Robot6SetLedEb+0x8>
    298e:	2f 9a       	sbi	0x05, 7	; 5
    2990:	08 95       	ret
    2992:	2f 98       	cbi	0x05, 7	; 5
    2994:	08 95       	ret

00002996 <_ZN5Robot15CommandReceivedEPKhh>:
	for(uint8_t i = 0; i < len; i++){
		Serial.print(' ');
		Serial.print(data[i], HEX);
	}
	Serial.println();*/
	if(len >= 1){
    2996:	66 23       	and	r22, r22
    2998:	d1 f0       	breq	.+52     	; 0x29ce <_ZN5Robot15CommandReceivedEPKhh+0x38>
		if(registers[data[0]] != NULL){
    299a:	fc 01       	movw	r30, r24
    299c:	30 81       	ld	r19, Z
    299e:	e3 2f       	mov	r30, r19
    29a0:	f0 e0       	ldi	r31, 0x00	; 0
    29a2:	ee 0f       	add	r30, r30
    29a4:	ff 1f       	adc	r31, r31
    29a6:	e2 57       	subi	r30, 0x72	; 114
    29a8:	f8 4f       	sbci	r31, 0xF8	; 248
    29aa:	a0 81       	ld	r26, Z
    29ac:	b1 81       	ldd	r27, Z+1	; 0x01
    29ae:	10 97       	sbiw	r26, 0x00	; 0
    29b0:	71 f0       	breq	.+28     	; 0x29ce <_ZN5Robot15CommandReceivedEPKhh+0x38>
    29b2:	26 2f       	mov	r18, r22
    29b4:	ac 01       	movw	r20, r24
			registers[data[0]]->CommandReceived(data[0], data + 1, len - 1);
    29b6:	21 50       	subi	r18, 0x01	; 1
    29b8:	4f 5f       	subi	r20, 0xFF	; 255
    29ba:	5f 4f       	sbci	r21, 0xFF	; 255
    29bc:	ed 91       	ld	r30, X+
    29be:	fc 91       	ld	r31, X
    29c0:	11 97       	sbiw	r26, 0x01	; 1
    29c2:	02 80       	ldd	r0, Z+2	; 0x02
    29c4:	f3 81       	ldd	r31, Z+3	; 0x03
    29c6:	e0 2d       	mov	r30, r0
    29c8:	63 2f       	mov	r22, r19
    29ca:	cd 01       	movw	r24, r26
    29cc:	19 95       	eicall
    29ce:	08 95       	ret

000029d0 <_GLOBAL__sub_I__ZN5Robot9registersE>:

#include "../IReadable.h"

class DigitalSensor : public IReadable {
public:
	DigitalSensor(const uint8_t ID, Register& DDRPort, Register& PortPort, Register& PinPort, uint8_t Pin, bool Inversed = true) : _id(ID), pin(Pin), pinPort(&PinPort), inversed(Inversed) {
    29d0:	e7 e8       	ldi	r30, 0x87	; 135
    29d2:	f7 e0       	ldi	r31, 0x07	; 7
    29d4:	82 ed       	ldi	r24, 0xD2	; 210
    29d6:	92 e0       	ldi	r25, 0x02	; 2
    29d8:	91 83       	std	Z+1, r25	; 0x01
    29da:	80 83       	st	Z, r24
    29dc:	12 82       	std	Z+2, r1	; 0x02
    29de:	82 e0       	ldi	r24, 0x02	; 2
    29e0:	83 83       	std	Z+3, r24	; 0x03
    29e2:	8f e2       	ldi	r24, 0x2F	; 47
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	95 83       	std	Z+5, r25	; 0x05
    29e8:	84 83       	std	Z+4, r24	; 0x04
    29ea:	81 e0       	ldi	r24, 0x01	; 1
    29ec:	86 83       	std	Z+6, r24	; 0x06
		DDRPort &= ~pin; //Enable input
    29ee:	81 98       	cbi	0x10, 1	; 16
		PortPort |= pin; //Enable pullup
    29f0:	89 9a       	sbi	0x11, 1	; 17
		rov.RegisterDevice(0, this);
    29f2:	bf 01       	movw	r22, r30
    29f4:	80 e0       	ldi	r24, 0x00	; 0
    29f6:	af df       	rcall	.-162    	; 0x2956 <_ZN5Robot14RegisterDeviceEhP7IDevice>
#define ID_TEST_BUTTON 0
#define ID_IMU_TEMPERATURE 1
#define ID_IMU_ACCELEROMETER 2

DigitalSensor BtnTest(0, TestBtnDDR, TestBtnPort, TestBtnPinPort, TestBtnPin);
ImuSensor Imu(1, 2);
    29f8:	42 e0       	ldi	r20, 0x02	; 2
    29fa:	61 e0       	ldi	r22, 0x01	; 1
    29fc:	88 e7       	ldi	r24, 0x78	; 120
    29fe:	97 e0       	ldi	r25, 0x07	; 7
    2a00:	d7 c0       	rjmp	.+430    	; 0x2bb0 <_ZN9ImuSensorC1Ehh>
    2a02:	08 95       	ret

00002a04 <_ZN5Robot5beginEv>:
	RegisterDevice(Imu);
	
	return true;
}*/

bool Robot::begin(){
    2a04:	ee e8       	ldi	r30, 0x8E	; 142
    2a06:	f7 e0       	ldi	r31, 0x07	; 7
    2a08:	8e e8       	ldi	r24, 0x8E	; 142
    2a0a:	99 e0       	ldi	r25, 0x09	; 9
	for(uint16_t i = 0; i < NUM_DEVICES; i++){
		registers[i] = NULL;
    2a0c:	11 92       	st	Z+, r1
    2a0e:	11 92       	st	Z+, r1
	
	return true;
}*/

bool Robot::begin(){
	for(uint16_t i = 0; i < NUM_DEVICES; i++){
    2a10:	e8 17       	cp	r30, r24
    2a12:	f9 07       	cpc	r31, r25
    2a14:	d9 f7       	brne	.-10     	; 0x2a0c <_ZN5Robot5beginEv+0x8>
		registers[i] = NULL;
	}
	
	LedDDR |= LedPin;
    2a16:	27 9a       	sbi	0x04, 7	; 4
		//TODO move to begin?
	}
	
	bool begin(){ //override
		return rov.RegisterDevice(_id, this);
    2a18:	67 e8       	ldi	r22, 0x87	; 135
    2a1a:	77 e0       	ldi	r23, 0x07	; 7
    2a1c:	80 91 89 07 	lds	r24, 0x0789	; 0x800789 <BtnTest+0x2>
    2a20:	9a df       	rcall	.-204    	; 0x2956 <_ZN5Robot14RegisterDeviceEhP7IDevice>
	BtnTest.begin();
	Imu.begin();
    2a22:	88 e7       	ldi	r24, 0x78	; 120
    2a24:	97 e0       	ldi	r25, 0x07	; 7
    2a26:	0d d0       	rcall	.+26     	; 0x2a42 <_ZN9ImuSensor5beginEv>
	return true;
}
    2a28:	81 e0       	ldi	r24, 0x01	; 1
    2a2a:	08 95       	ret

00002a2c <_ZN5Robot4LoopEv>:
bool Robot::ReadTestBtn(){ //TODO remove
	return !((TestBtnPinPort & TestBtnPin) > 0);
}

void Robot::Loop(){
	Imu.Update(EtherComm::buffer + 3);
    2a2c:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    2a30:	70 91 01 02 	lds	r23, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    2a34:	6d 5f       	subi	r22, 0xFD	; 253
    2a36:	7f 4f       	sbci	r23, 0xFF	; 255
    2a38:	88 e7       	ldi	r24, 0x78	; 120
    2a3a:	97 e0       	ldi	r25, 0x07	; 7
    2a3c:	01 c0       	rjmp	.+2      	; 0x2a40 <_ZN9ImuSensor6UpdateEPh>
    2a3e:	08 95       	ret

00002a40 <_ZN9ImuSensor6UpdateEPh>:
		rov.RegisterDevice(tempId, this)
		&& rov.RegisterDevice(accelId, this)
		&& imu.begin();
}

void ImuSensor::Update(uint8_t* buffer){
    2a40:	08 95       	ret

00002a42 <_ZN9ImuSensor5beginEv>:

ImuSensor::ImuSensor(const uint8_t TempId, const uint8_t AccelId) : imu(55, 0x28), tempId(TempId), accelId(AccelId) {
	
}

bool ImuSensor::begin(){
    2a42:	cf 93       	push	r28
    2a44:	df 93       	push	r29
    2a46:	ec 01       	movw	r28, r24
	return 
		rov.RegisterDevice(tempId, this)
    2a48:	bc 01       	movw	r22, r24
    2a4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a4c:	84 df       	rcall	.-248    	; 0x2956 <_ZN5Robot14RegisterDeviceEhP7IDevice>
		&& rov.RegisterDevice(accelId, this)
		&& imu.begin();
    2a4e:	88 23       	and	r24, r24
    2a50:	51 f0       	breq	.+20     	; 0x2a66 <_ZN9ImuSensor5beginEv+0x24>
}

bool ImuSensor::begin(){
	return 
		rov.RegisterDevice(tempId, this)
		&& rov.RegisterDevice(accelId, this)
    2a52:	be 01       	movw	r22, r28
    2a54:	8e 85       	ldd	r24, Y+14	; 0x0e
    2a56:	7f df       	rcall	.-258    	; 0x2956 <_ZN5Robot14RegisterDeviceEhP7IDevice>
    2a58:	88 23       	and	r24, r24
    2a5a:	29 f0       	breq	.+10     	; 0x2a66 <_ZN9ImuSensor5beginEv+0x24>
		&& imu.begin();
    2a5c:	6c e0       	ldi	r22, 0x0C	; 12
    2a5e:	ce 01       	movw	r24, r28
    2a60:	02 96       	adiw	r24, 0x02	; 2
    2a62:	0e 94 3d 02 	call	0x47a	; 0x47a <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>
}
    2a66:	df 91       	pop	r29
    2a68:	cf 91       	pop	r28
    2a6a:	08 95       	ret

00002a6c <_ZN9ImuSensor21ReadRegisterRequestedEhPh>:
	*buffer++ = *val++;
}

AdafruitImu::Vector<3> vector;

void ImuSensor::ReadRegisterRequested(uint8_t id, uint8_t* buffer){
    2a6c:	ef 92       	push	r14
    2a6e:	ff 92       	push	r15
    2a70:	0f 93       	push	r16
    2a72:	1f 93       	push	r17
    2a74:	cf 93       	push	r28
    2a76:	df 93       	push	r29
    2a78:	cd b7       	in	r28, 0x3d	; 61
    2a7a:	de b7       	in	r29, 0x3e	; 62
    2a7c:	68 97       	sbiw	r28, 0x18	; 24
    2a7e:	0f b6       	in	r0, 0x3f	; 63
    2a80:	f8 94       	cli
    2a82:	de bf       	out	0x3e, r29	; 62
    2a84:	0f be       	out	0x3f, r0	; 63
    2a86:	cd bf       	out	0x3d, r28	; 61
    2a88:	f6 2e       	mov	r15, r22
    2a8a:	8a 01       	movw	r16, r20
	if(id == tempId){
    2a8c:	dc 01       	movw	r26, r24
    2a8e:	1d 96       	adiw	r26, 0x0d	; 13
    2a90:	ec 90       	ld	r14, X
    2a92:	e6 12       	cpse	r14, r22
    2a94:	0f c0       	rjmp	.+30     	; 0x2ab4 <_ZN9ImuSensor21ReadRegisterRequestedEhPh+0x48>
		buffer[0] = imu.getTemp();
    2a96:	02 96       	adiw	r24, 0x02	; 2
    2a98:	0e 94 aa 02 	call	0x554	; 0x554 <_ZN15Adafruit_BNO0557getTempEv>
    2a9c:	f8 01       	movw	r30, r16
    2a9e:	80 83       	st	Z, r24
	virtual void CommandReceived(uint8_t id, const uint8_t* data, uint8_t len) = 0;
	virtual void Update(uint8_t* buffer) = 0;
	
protected:
	void inline SendCommand(uint8_t id, uint8_t len){
		EtherComm::buffer[2] = id;
    2aa0:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    2aa4:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    2aa8:	e2 82       	std	Z+2, r14	; 0x02
		EtherComm::SendCommand(CMD_UpdateDevice, len + 1);
    2aaa:	62 e0       	ldi	r22, 0x02	; 2
    2aac:	83 e0       	ldi	r24, 0x03	; 3
    2aae:	0e 94 b7 0b 	call	0x176e	; 0x176e <_ZN9EtherComm11SendCommandEhh>
    2ab2:	71 c0       	rjmp	.+226    	; 0x2b96 <_ZN9ImuSensor21ReadRegisterRequestedEhPh+0x12a>
		SendCommand(id, 1);
	}else if(id == accelId){
    2ab4:	dc 01       	movw	r26, r24
    2ab6:	1e 96       	adiw	r26, 0x0e	; 14
    2ab8:	2c 91       	ld	r18, X
    2aba:	62 13       	cpse	r22, r18
    2abc:	6c c0       	rjmp	.+216    	; 0x2b96 <_ZN9ImuSensor21ReadRegisterRequestedEhPh+0x12a>
		vector = imu.getVector(Adafruit_BNO055::VECTOR_ACCELEROMETER );
    2abe:	bc 01       	movw	r22, r24
    2ac0:	6e 5f       	subi	r22, 0xFE	; 254
    2ac2:	7f 4f       	sbci	r23, 0xFF	; 255
    2ac4:	48 e0       	ldi	r20, 0x08	; 8
    2ac6:	ce 01       	movw	r24, r28
    2ac8:	01 96       	adiw	r24, 0x01	; 1
    2aca:	0e 94 00 03 	call	0x600	; 0x600 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
    2ace:	fe 01       	movw	r30, r28
    2ad0:	31 96       	adiw	r30, 0x01	; 1
    2ad2:	ae e8       	ldi	r26, 0x8E	; 142
    2ad4:	b9 e0       	ldi	r27, 0x09	; 9
    2ad6:	ce 01       	movw	r24, r28
    2ad8:	0d 96       	adiw	r24, 0x0d	; 13
		}

		Vector& operator=(const Vector& v)
		{
			for (int x = 0; x < N; x++ )
			p_vec[x] = v.p_vec[x];
    2ada:	41 91       	ld	r20, Z+
    2adc:	51 91       	ld	r21, Z+
    2ade:	61 91       	ld	r22, Z+
    2ae0:	71 91       	ld	r23, Z+
    2ae2:	4d 93       	st	X+, r20
    2ae4:	5d 93       	st	X+, r21
    2ae6:	6d 93       	st	X+, r22
    2ae8:	7d 93       	st	X+, r23
			return ret;
		}

		Vector& operator=(const Vector& v)
		{
			for (int x = 0; x < N; x++ )
    2aea:	e8 17       	cp	r30, r24
    2aec:	f9 07       	cpc	r31, r25
    2aee:	a9 f7       	brne	.-22     	; 0x2ada <_ZN9ImuSensor21ReadRegisterRequestedEhPh+0x6e>
		saveFloat(vector.x(), buffer + 0);
    2af0:	ee e8       	ldi	r30, 0x8E	; 142
    2af2:	f9 e0       	ldi	r31, 0x09	; 9
    2af4:	20 81       	ld	r18, Z
    2af6:	51 81       	ldd	r21, Z+1	; 0x01
    2af8:	42 81       	ldd	r20, Z+2	; 0x02
    2afa:	33 81       	ldd	r19, Z+3	; 0x03
    2afc:	82 2f       	mov	r24, r18
    2afe:	95 2f       	mov	r25, r21
    2b00:	a4 2f       	mov	r26, r20
    2b02:	b3 2f       	mov	r27, r19
    2b04:	8d 87       	std	Y+13, r24	; 0x0d
    2b06:	9e 87       	std	Y+14, r25	; 0x0e
    2b08:	af 87       	std	Y+15, r26	; 0x0f
    2b0a:	b8 8b       	std	Y+16, r27	; 0x10
	
}

static void saveFloat(float f, uint8_t* buffer){
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    2b0c:	d8 01       	movw	r26, r16
    2b0e:	2c 93       	st	X, r18
	*buffer++ = *val++;
    2b10:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b12:	11 96       	adiw	r26, 0x01	; 1
    2b14:	8c 93       	st	X, r24
    2b16:	11 97       	sbiw	r26, 0x01	; 1
	*buffer++ = *val++;
    2b18:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b1a:	12 96       	adiw	r26, 0x02	; 2
    2b1c:	8c 93       	st	X, r24
    2b1e:	12 97       	sbiw	r26, 0x02	; 2
	*buffer++ = *val++;
    2b20:	88 89       	ldd	r24, Y+16	; 0x10
    2b22:	13 96       	adiw	r26, 0x03	; 3
    2b24:	8c 93       	st	X, r24
    2b26:	24 81       	ldd	r18, Z+4	; 0x04
    2b28:	55 81       	ldd	r21, Z+5	; 0x05
    2b2a:	46 81       	ldd	r20, Z+6	; 0x06
    2b2c:	37 81       	ldd	r19, Z+7	; 0x07
    2b2e:	82 2f       	mov	r24, r18
    2b30:	95 2f       	mov	r25, r21
    2b32:	a4 2f       	mov	r26, r20
    2b34:	b3 2f       	mov	r27, r19
    2b36:	89 8b       	std	Y+17, r24	; 0x11
    2b38:	9a 8b       	std	Y+18, r25	; 0x12
    2b3a:	ab 8b       	std	Y+19, r26	; 0x13
    2b3c:	bc 8b       	std	Y+20, r27	; 0x14
	
}

static void saveFloat(float f, uint8_t* buffer){
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    2b3e:	d8 01       	movw	r26, r16
    2b40:	14 96       	adiw	r26, 0x04	; 4
    2b42:	2c 93       	st	X, r18
    2b44:	14 97       	sbiw	r26, 0x04	; 4
	*buffer++ = *val++;
    2b46:	8a 89       	ldd	r24, Y+18	; 0x12
    2b48:	15 96       	adiw	r26, 0x05	; 5
    2b4a:	8c 93       	st	X, r24
    2b4c:	15 97       	sbiw	r26, 0x05	; 5
	*buffer++ = *val++;
    2b4e:	8b 89       	ldd	r24, Y+19	; 0x13
    2b50:	16 96       	adiw	r26, 0x06	; 6
    2b52:	8c 93       	st	X, r24
    2b54:	16 97       	sbiw	r26, 0x06	; 6
	*buffer++ = *val++;
    2b56:	8c 89       	ldd	r24, Y+20	; 0x14
    2b58:	17 96       	adiw	r26, 0x07	; 7
    2b5a:	8c 93       	st	X, r24
    2b5c:	20 85       	ldd	r18, Z+8	; 0x08
    2b5e:	51 85       	ldd	r21, Z+9	; 0x09
    2b60:	42 85       	ldd	r20, Z+10	; 0x0a
    2b62:	33 85       	ldd	r19, Z+11	; 0x0b
    2b64:	82 2f       	mov	r24, r18
    2b66:	95 2f       	mov	r25, r21
    2b68:	a4 2f       	mov	r26, r20
    2b6a:	b3 2f       	mov	r27, r19
    2b6c:	8d 8b       	std	Y+21, r24	; 0x15
    2b6e:	9e 8b       	std	Y+22, r25	; 0x16
    2b70:	af 8b       	std	Y+23, r26	; 0x17
    2b72:	b8 8f       	std	Y+24, r27	; 0x18
	
}

static void saveFloat(float f, uint8_t* buffer){
	uint8_t* val = (uint8_t*)(&f);
	*buffer++ = *val++;
    2b74:	f8 01       	movw	r30, r16
    2b76:	20 87       	std	Z+8, r18	; 0x08
	*buffer++ = *val++;
    2b78:	8e 89       	ldd	r24, Y+22	; 0x16
    2b7a:	81 87       	std	Z+9, r24	; 0x09
	*buffer++ = *val++;
    2b7c:	8f 89       	ldd	r24, Y+23	; 0x17
    2b7e:	82 87       	std	Z+10, r24	; 0x0a
	*buffer++ = *val++;
    2b80:	88 8d       	ldd	r24, Y+24	; 0x18
    2b82:	83 87       	std	Z+11, r24	; 0x0b
	virtual void CommandReceived(uint8_t id, const uint8_t* data, uint8_t len) = 0;
	virtual void Update(uint8_t* buffer) = 0;
	
protected:
	void inline SendCommand(uint8_t id, uint8_t len){
		EtherComm::buffer[2] = id;
    2b84:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZN9EtherComm6bufferE>
    2b88:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_ZN9EtherComm6bufferE+0x1>
    2b8c:	f2 82       	std	Z+2, r15	; 0x02
		EtherComm::SendCommand(CMD_UpdateDevice, len + 1);
    2b8e:	6d e0       	ldi	r22, 0x0D	; 13
    2b90:	83 e0       	ldi	r24, 0x03	; 3
    2b92:	0e 94 b7 0b 	call	0x176e	; 0x176e <_ZN9EtherComm11SendCommandEhh>
	saveFloat(vector.x(), buffer + 14);
	saveFloat(vector.y(), buffer + 18);
	saveFloat(vector.z(), buffer + 22);
	
	return 1 + 1 + 6*4;*/
    2b96:	68 96       	adiw	r28, 0x18	; 24
    2b98:	0f b6       	in	r0, 0x3f	; 63
    2b9a:	f8 94       	cli
    2b9c:	de bf       	out	0x3e, r29	; 62
    2b9e:	0f be       	out	0x3f, r0	; 63
    2ba0:	cd bf       	out	0x3d, r28	; 61
    2ba2:	df 91       	pop	r29
    2ba4:	cf 91       	pop	r28
    2ba6:	1f 91       	pop	r17
    2ba8:	0f 91       	pop	r16
    2baa:	ff 90       	pop	r15
    2bac:	ef 90       	pop	r14
    2bae:	08 95       	ret

00002bb0 <_ZN9ImuSensorC1Ehh>:
#define ID_TEMP 1
#define ID_ACCEL 2
//#include "../BNO055/utility/vector.h"
//Adafruit_BNO055 ImuSensor::imu;

ImuSensor::ImuSensor(const uint8_t TempId, const uint8_t AccelId) : imu(55, 0x28), tempId(TempId), accelId(AccelId) {
    2bb0:	ef 92       	push	r14
    2bb2:	ff 92       	push	r15
    2bb4:	0f 93       	push	r16
    2bb6:	1f 93       	push	r17
    2bb8:	cf 93       	push	r28
    2bba:	df 93       	push	r29
    2bbc:	ec 01       	movw	r28, r24
    2bbe:	e6 2e       	mov	r14, r22
    2bc0:	f4 2e       	mov	r15, r20
    2bc2:	2e ed       	ldi	r18, 0xDE	; 222
    2bc4:	32 e0       	ldi	r19, 0x02	; 2
    2bc6:	fc 01       	movw	r30, r24
    2bc8:	21 93       	st	Z+, r18
    2bca:	31 93       	st	Z+, r19
    2bcc:	cf 01       	movw	r24, r30
    2bce:	0c e2       	ldi	r16, 0x2C	; 44
    2bd0:	17 e0       	ldi	r17, 0x07	; 7
    2bd2:	28 e2       	ldi	r18, 0x28	; 40
    2bd4:	47 e3       	ldi	r20, 0x37	; 55
    2bd6:	50 e0       	ldi	r21, 0x00	; 0
    2bd8:	60 e0       	ldi	r22, 0x00	; 0
    2bda:	70 e0       	ldi	r23, 0x00	; 0
    2bdc:	0e 94 c8 01 	call	0x390	; 0x390 <_ZN15Adafruit_BNO055C1ElhP7TwoWire>
    2be0:	ed 86       	std	Y+13, r14	; 0x0d
    2be2:	fe 86       	std	Y+14, r15	; 0x0e
	
}
    2be4:	df 91       	pop	r29
    2be6:	cf 91       	pop	r28
    2be8:	1f 91       	pop	r17
    2bea:	0f 91       	pop	r16
    2bec:	ff 90       	pop	r15
    2bee:	ef 90       	pop	r14
    2bf0:	08 95       	ret

00002bf2 <_GLOBAL__sub_I__ZN9ImuSensorC2Ehh>:
	template <uint8_t N> class Vector
	{
		public:
		Vector()
		{
			memset(p_vec, 0, sizeof(double)*N);
    2bf2:	8c e0       	ldi	r24, 0x0C	; 12
    2bf4:	ee e8       	ldi	r30, 0x8E	; 142
    2bf6:	f9 e0       	ldi	r31, 0x09	; 9
    2bf8:	df 01       	movw	r26, r30
    2bfa:	1d 92       	st	X+, r1
    2bfc:	8a 95       	dec	r24
    2bfe:	e9 f7       	brne	.-6      	; 0x2bfa <_GLOBAL__sub_I__ZN9ImuSensorC2Ehh+0x8>
    2c00:	08 95       	ret

00002c02 <_GLOBAL__sub_I_bno>:
	setup();
	
	while(true){
		loop();
	}
    2c02:	0f 93       	push	r16
    2c04:	1f 93       	push	r17
/* Set the delay between fresh samples */
#define BNO055_SAMPLERATE_DELAY_MS 100

// Check I2C device address and correct line below (by default address is 0x29 or 0x28)
//                                   id, address
Adafruit_BNO055 bno = Adafruit_BNO055(55, 0x28);
    2c06:	0c e2       	ldi	r16, 0x2C	; 44
    2c08:	17 e0       	ldi	r17, 0x07	; 7
    2c0a:	28 e2       	ldi	r18, 0x28	; 40
    2c0c:	47 e3       	ldi	r20, 0x37	; 55
    2c0e:	50 e0       	ldi	r21, 0x00	; 0
    2c10:	60 e0       	ldi	r22, 0x00	; 0
    2c12:	70 e0       	ldi	r23, 0x00	; 0
    2c14:	8a e9       	ldi	r24, 0x9A	; 154
    2c16:	99 e0       	ldi	r25, 0x09	; 9
    2c18:	0e 94 c8 01 	call	0x390	; 0x390 <_ZN15Adafruit_BNO055C1ElhP7TwoWire>
	setup();
	
	while(true){
		loop();
	}
    2c1c:	1f 91       	pop	r17
    2c1e:	0f 91       	pop	r16
    2c20:	08 95       	ret

00002c22 <_ZN5Print5writeEPKhj>:
}

uint16_t Print::print(char c)
{
  return write(c);
}
    2c22:	cf 92       	push	r12
    2c24:	df 92       	push	r13
    2c26:	ef 92       	push	r14
    2c28:	ff 92       	push	r15
    2c2a:	0f 93       	push	r16
    2c2c:	1f 93       	push	r17
    2c2e:	cf 93       	push	r28
    2c30:	df 93       	push	r29
    2c32:	41 15       	cp	r20, r1
    2c34:	51 05       	cpc	r21, r1
    2c36:	c1 f0       	breq	.+48     	; 0x2c68 <_ZN5Print5writeEPKhj+0x46>
    2c38:	6a 01       	movw	r12, r20
    2c3a:	8c 01       	movw	r16, r24
    2c3c:	e6 2e       	mov	r14, r22
    2c3e:	f7 2e       	mov	r15, r23
    2c40:	c0 e0       	ldi	r28, 0x00	; 0
    2c42:	d0 e0       	ldi	r29, 0x00	; 0
    2c44:	d7 01       	movw	r26, r14
    2c46:	6d 91       	ld	r22, X+
    2c48:	7d 01       	movw	r14, r26
    2c4a:	d8 01       	movw	r26, r16
    2c4c:	ed 91       	ld	r30, X+
    2c4e:	fc 91       	ld	r31, X
    2c50:	01 90       	ld	r0, Z+
    2c52:	f0 81       	ld	r31, Z
    2c54:	e0 2d       	mov	r30, r0
    2c56:	c8 01       	movw	r24, r16
    2c58:	19 95       	eicall
    2c5a:	89 2b       	or	r24, r25
    2c5c:	39 f0       	breq	.+14     	; 0x2c6c <_ZN5Print5writeEPKhj+0x4a>
    2c5e:	21 96       	adiw	r28, 0x01	; 1
    2c60:	cc 16       	cp	r12, r28
    2c62:	dd 06       	cpc	r13, r29
    2c64:	79 f7       	brne	.-34     	; 0x2c44 <_ZN5Print5writeEPKhj+0x22>
    2c66:	02 c0       	rjmp	.+4      	; 0x2c6c <_ZN5Print5writeEPKhj+0x4a>
    2c68:	c0 e0       	ldi	r28, 0x00	; 0
    2c6a:	d0 e0       	ldi	r29, 0x00	; 0
    2c6c:	ce 01       	movw	r24, r28
    2c6e:	df 91       	pop	r29
    2c70:	cf 91       	pop	r28
    2c72:	1f 91       	pop	r17
    2c74:	0f 91       	pop	r16
    2c76:	ff 90       	pop	r15
    2c78:	ef 90       	pop	r14
    2c7a:	df 90       	pop	r13
    2c7c:	cf 90       	pop	r12
    2c7e:	08 95       	ret

00002c80 <_ZN5Print5printEPKc>:
    2c80:	61 15       	cp	r22, r1
    2c82:	71 05       	cpc	r23, r1
    2c84:	81 f0       	breq	.+32     	; 0x2ca6 <_ZN5Print5printEPKc+0x26>
    2c86:	fb 01       	movw	r30, r22
    2c88:	01 90       	ld	r0, Z+
    2c8a:	00 20       	and	r0, r0
    2c8c:	e9 f7       	brne	.-6      	; 0x2c88 <_ZN5Print5printEPKc+0x8>
    2c8e:	31 97       	sbiw	r30, 0x01	; 1
    2c90:	af 01       	movw	r20, r30
    2c92:	46 1b       	sub	r20, r22
    2c94:	57 0b       	sbc	r21, r23
    2c96:	dc 01       	movw	r26, r24
    2c98:	ed 91       	ld	r30, X+
    2c9a:	fc 91       	ld	r31, X
    2c9c:	02 80       	ldd	r0, Z+2	; 0x02
    2c9e:	f3 81       	ldd	r31, Z+3	; 0x03
    2ca0:	e0 2d       	mov	r30, r0
    2ca2:	19 95       	eicall
    2ca4:	08 95       	ret
    2ca6:	80 e0       	ldi	r24, 0x00	; 0
    2ca8:	90 e0       	ldi	r25, 0x00	; 0
    2caa:	08 95       	ret

00002cac <_ZN5Print7printlnEv>:
  //void clearWriteError() { setWriteError(0); }
  
  virtual uint16_t write(uint8_t) = 0;
  uint16_t write(const char *str) {
	  if (str == NULL) return 0;
	  return write((const uint8_t *)str, strlen(str));
    2cac:	dc 01       	movw	r26, r24
    2cae:	ed 91       	ld	r30, X+
    2cb0:	fc 91       	ld	r31, X
    2cb2:	02 80       	ldd	r0, Z+2	; 0x02
    2cb4:	f3 81       	ldd	r31, Z+3	; 0x03
    2cb6:	e0 2d       	mov	r30, r0
    2cb8:	42 e0       	ldi	r20, 0x02	; 2
    2cba:	50 e0       	ldi	r21, 0x00	; 0
    2cbc:	66 ee       	ldi	r22, 0xE6	; 230
    2cbe:	72 e0       	ldi	r23, 0x02	; 2
    2cc0:	19 95       	eicall
}
*/
uint16_t Print::println(void)
{
  return write("\r\n");
}
    2cc2:	08 95       	ret

00002cc4 <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}
*/
uint16_t Print::println(const char c[])
{
    2cc4:	0f 93       	push	r16
    2cc6:	1f 93       	push	r17
    2cc8:	cf 93       	push	r28
    2cca:	df 93       	push	r29
    2ccc:	ec 01       	movw	r28, r24
  uint16_t n = print(c);
    2cce:	d8 df       	rcall	.-80     	; 0x2c80 <_ZN5Print5printEPKc>
    2cd0:	8c 01       	movw	r16, r24
  n += println();
    2cd2:	ce 01       	movw	r24, r28
    2cd4:	eb df       	rcall	.-42     	; 0x2cac <_ZN5Print7printlnEv>
  return n;
}
    2cd6:	80 0f       	add	r24, r16
    2cd8:	91 1f       	adc	r25, r17
    2cda:	df 91       	pop	r29
    2cdc:	cf 91       	pop	r28
    2cde:	1f 91       	pop	r17
    2ce0:	0f 91       	pop	r16
    2ce2:	08 95       	ret

00002ce4 <__divsf3>:
    2ce4:	0c d0       	rcall	.+24     	; 0x2cfe <__divsf3x>
    2ce6:	ba c0       	rjmp	.+372    	; 0x2e5c <__fp_round>
    2ce8:	b2 d0       	rcall	.+356    	; 0x2e4e <__fp_pscB>
    2cea:	40 f0       	brcs	.+16     	; 0x2cfc <__divsf3+0x18>
    2cec:	a9 d0       	rcall	.+338    	; 0x2e40 <__fp_pscA>
    2cee:	30 f0       	brcs	.+12     	; 0x2cfc <__divsf3+0x18>
    2cf0:	21 f4       	brne	.+8      	; 0x2cfa <__divsf3+0x16>
    2cf2:	5f 3f       	cpi	r21, 0xFF	; 255
    2cf4:	19 f0       	breq	.+6      	; 0x2cfc <__divsf3+0x18>
    2cf6:	9b c0       	rjmp	.+310    	; 0x2e2e <__fp_inf>
    2cf8:	51 11       	cpse	r21, r1
    2cfa:	e4 c0       	rjmp	.+456    	; 0x2ec4 <__fp_szero>
    2cfc:	9e c0       	rjmp	.+316    	; 0x2e3a <__fp_nan>

00002cfe <__divsf3x>:
    2cfe:	bf d0       	rcall	.+382    	; 0x2e7e <__fp_split3>
    2d00:	98 f3       	brcs	.-26     	; 0x2ce8 <__divsf3+0x4>

00002d02 <__divsf3_pse>:
    2d02:	99 23       	and	r25, r25
    2d04:	c9 f3       	breq	.-14     	; 0x2cf8 <__divsf3+0x14>
    2d06:	55 23       	and	r21, r21
    2d08:	b1 f3       	breq	.-20     	; 0x2cf6 <__divsf3+0x12>
    2d0a:	95 1b       	sub	r25, r21
    2d0c:	55 0b       	sbc	r21, r21
    2d0e:	bb 27       	eor	r27, r27
    2d10:	aa 27       	eor	r26, r26
    2d12:	62 17       	cp	r22, r18
    2d14:	73 07       	cpc	r23, r19
    2d16:	84 07       	cpc	r24, r20
    2d18:	38 f0       	brcs	.+14     	; 0x2d28 <__divsf3_pse+0x26>
    2d1a:	9f 5f       	subi	r25, 0xFF	; 255
    2d1c:	5f 4f       	sbci	r21, 0xFF	; 255
    2d1e:	22 0f       	add	r18, r18
    2d20:	33 1f       	adc	r19, r19
    2d22:	44 1f       	adc	r20, r20
    2d24:	aa 1f       	adc	r26, r26
    2d26:	a9 f3       	breq	.-22     	; 0x2d12 <__divsf3_pse+0x10>
    2d28:	33 d0       	rcall	.+102    	; 0x2d90 <__divsf3_pse+0x8e>
    2d2a:	0e 2e       	mov	r0, r30
    2d2c:	3a f0       	brmi	.+14     	; 0x2d3c <__divsf3_pse+0x3a>
    2d2e:	e0 e8       	ldi	r30, 0x80	; 128
    2d30:	30 d0       	rcall	.+96     	; 0x2d92 <__divsf3_pse+0x90>
    2d32:	91 50       	subi	r25, 0x01	; 1
    2d34:	50 40       	sbci	r21, 0x00	; 0
    2d36:	e6 95       	lsr	r30
    2d38:	00 1c       	adc	r0, r0
    2d3a:	ca f7       	brpl	.-14     	; 0x2d2e <__divsf3_pse+0x2c>
    2d3c:	29 d0       	rcall	.+82     	; 0x2d90 <__divsf3_pse+0x8e>
    2d3e:	fe 2f       	mov	r31, r30
    2d40:	27 d0       	rcall	.+78     	; 0x2d90 <__divsf3_pse+0x8e>
    2d42:	66 0f       	add	r22, r22
    2d44:	77 1f       	adc	r23, r23
    2d46:	88 1f       	adc	r24, r24
    2d48:	bb 1f       	adc	r27, r27
    2d4a:	26 17       	cp	r18, r22
    2d4c:	37 07       	cpc	r19, r23
    2d4e:	48 07       	cpc	r20, r24
    2d50:	ab 07       	cpc	r26, r27
    2d52:	b0 e8       	ldi	r27, 0x80	; 128
    2d54:	09 f0       	breq	.+2      	; 0x2d58 <__divsf3_pse+0x56>
    2d56:	bb 0b       	sbc	r27, r27
    2d58:	80 2d       	mov	r24, r0
    2d5a:	bf 01       	movw	r22, r30
    2d5c:	ff 27       	eor	r31, r31
    2d5e:	93 58       	subi	r25, 0x83	; 131
    2d60:	5f 4f       	sbci	r21, 0xFF	; 255
    2d62:	2a f0       	brmi	.+10     	; 0x2d6e <__divsf3_pse+0x6c>
    2d64:	9e 3f       	cpi	r25, 0xFE	; 254
    2d66:	51 05       	cpc	r21, r1
    2d68:	68 f0       	brcs	.+26     	; 0x2d84 <__divsf3_pse+0x82>
    2d6a:	61 c0       	rjmp	.+194    	; 0x2e2e <__fp_inf>
    2d6c:	ab c0       	rjmp	.+342    	; 0x2ec4 <__fp_szero>
    2d6e:	5f 3f       	cpi	r21, 0xFF	; 255
    2d70:	ec f3       	brlt	.-6      	; 0x2d6c <__divsf3_pse+0x6a>
    2d72:	98 3e       	cpi	r25, 0xE8	; 232
    2d74:	dc f3       	brlt	.-10     	; 0x2d6c <__divsf3_pse+0x6a>
    2d76:	86 95       	lsr	r24
    2d78:	77 95       	ror	r23
    2d7a:	67 95       	ror	r22
    2d7c:	b7 95       	ror	r27
    2d7e:	f7 95       	ror	r31
    2d80:	9f 5f       	subi	r25, 0xFF	; 255
    2d82:	c9 f7       	brne	.-14     	; 0x2d76 <__divsf3_pse+0x74>
    2d84:	88 0f       	add	r24, r24
    2d86:	91 1d       	adc	r25, r1
    2d88:	96 95       	lsr	r25
    2d8a:	87 95       	ror	r24
    2d8c:	97 f9       	bld	r25, 7
    2d8e:	08 95       	ret
    2d90:	e1 e0       	ldi	r30, 0x01	; 1
    2d92:	66 0f       	add	r22, r22
    2d94:	77 1f       	adc	r23, r23
    2d96:	88 1f       	adc	r24, r24
    2d98:	bb 1f       	adc	r27, r27
    2d9a:	62 17       	cp	r22, r18
    2d9c:	73 07       	cpc	r23, r19
    2d9e:	84 07       	cpc	r24, r20
    2da0:	ba 07       	cpc	r27, r26
    2da2:	20 f0       	brcs	.+8      	; 0x2dac <__divsf3_pse+0xaa>
    2da4:	62 1b       	sub	r22, r18
    2da6:	73 0b       	sbc	r23, r19
    2da8:	84 0b       	sbc	r24, r20
    2daa:	ba 0b       	sbc	r27, r26
    2dac:	ee 1f       	adc	r30, r30
    2dae:	88 f7       	brcc	.-30     	; 0x2d92 <__divsf3_pse+0x90>
    2db0:	e0 95       	com	r30
    2db2:	08 95       	ret

00002db4 <__floatunsisf>:
    2db4:	e8 94       	clt
    2db6:	09 c0       	rjmp	.+18     	; 0x2dca <__floatsisf+0x12>

00002db8 <__floatsisf>:
    2db8:	97 fb       	bst	r25, 7
    2dba:	3e f4       	brtc	.+14     	; 0x2dca <__floatsisf+0x12>
    2dbc:	90 95       	com	r25
    2dbe:	80 95       	com	r24
    2dc0:	70 95       	com	r23
    2dc2:	61 95       	neg	r22
    2dc4:	7f 4f       	sbci	r23, 0xFF	; 255
    2dc6:	8f 4f       	sbci	r24, 0xFF	; 255
    2dc8:	9f 4f       	sbci	r25, 0xFF	; 255
    2dca:	99 23       	and	r25, r25
    2dcc:	a9 f0       	breq	.+42     	; 0x2df8 <__floatsisf+0x40>
    2dce:	f9 2f       	mov	r31, r25
    2dd0:	96 e9       	ldi	r25, 0x96	; 150
    2dd2:	bb 27       	eor	r27, r27
    2dd4:	93 95       	inc	r25
    2dd6:	f6 95       	lsr	r31
    2dd8:	87 95       	ror	r24
    2dda:	77 95       	ror	r23
    2ddc:	67 95       	ror	r22
    2dde:	b7 95       	ror	r27
    2de0:	f1 11       	cpse	r31, r1
    2de2:	f8 cf       	rjmp	.-16     	; 0x2dd4 <__floatsisf+0x1c>
    2de4:	fa f4       	brpl	.+62     	; 0x2e24 <__floatsisf+0x6c>
    2de6:	bb 0f       	add	r27, r27
    2de8:	11 f4       	brne	.+4      	; 0x2dee <__floatsisf+0x36>
    2dea:	60 ff       	sbrs	r22, 0
    2dec:	1b c0       	rjmp	.+54     	; 0x2e24 <__floatsisf+0x6c>
    2dee:	6f 5f       	subi	r22, 0xFF	; 255
    2df0:	7f 4f       	sbci	r23, 0xFF	; 255
    2df2:	8f 4f       	sbci	r24, 0xFF	; 255
    2df4:	9f 4f       	sbci	r25, 0xFF	; 255
    2df6:	16 c0       	rjmp	.+44     	; 0x2e24 <__floatsisf+0x6c>
    2df8:	88 23       	and	r24, r24
    2dfa:	11 f0       	breq	.+4      	; 0x2e00 <__floatsisf+0x48>
    2dfc:	96 e9       	ldi	r25, 0x96	; 150
    2dfe:	11 c0       	rjmp	.+34     	; 0x2e22 <__floatsisf+0x6a>
    2e00:	77 23       	and	r23, r23
    2e02:	21 f0       	breq	.+8      	; 0x2e0c <__floatsisf+0x54>
    2e04:	9e e8       	ldi	r25, 0x8E	; 142
    2e06:	87 2f       	mov	r24, r23
    2e08:	76 2f       	mov	r23, r22
    2e0a:	05 c0       	rjmp	.+10     	; 0x2e16 <__floatsisf+0x5e>
    2e0c:	66 23       	and	r22, r22
    2e0e:	71 f0       	breq	.+28     	; 0x2e2c <__floatsisf+0x74>
    2e10:	96 e8       	ldi	r25, 0x86	; 134
    2e12:	86 2f       	mov	r24, r22
    2e14:	70 e0       	ldi	r23, 0x00	; 0
    2e16:	60 e0       	ldi	r22, 0x00	; 0
    2e18:	2a f0       	brmi	.+10     	; 0x2e24 <__floatsisf+0x6c>
    2e1a:	9a 95       	dec	r25
    2e1c:	66 0f       	add	r22, r22
    2e1e:	77 1f       	adc	r23, r23
    2e20:	88 1f       	adc	r24, r24
    2e22:	da f7       	brpl	.-10     	; 0x2e1a <__floatsisf+0x62>
    2e24:	88 0f       	add	r24, r24
    2e26:	96 95       	lsr	r25
    2e28:	87 95       	ror	r24
    2e2a:	97 f9       	bld	r25, 7
    2e2c:	08 95       	ret

00002e2e <__fp_inf>:
    2e2e:	97 f9       	bld	r25, 7
    2e30:	9f 67       	ori	r25, 0x7F	; 127
    2e32:	80 e8       	ldi	r24, 0x80	; 128
    2e34:	70 e0       	ldi	r23, 0x00	; 0
    2e36:	60 e0       	ldi	r22, 0x00	; 0
    2e38:	08 95       	ret

00002e3a <__fp_nan>:
    2e3a:	9f ef       	ldi	r25, 0xFF	; 255
    2e3c:	80 ec       	ldi	r24, 0xC0	; 192
    2e3e:	08 95       	ret

00002e40 <__fp_pscA>:
    2e40:	00 24       	eor	r0, r0
    2e42:	0a 94       	dec	r0
    2e44:	16 16       	cp	r1, r22
    2e46:	17 06       	cpc	r1, r23
    2e48:	18 06       	cpc	r1, r24
    2e4a:	09 06       	cpc	r0, r25
    2e4c:	08 95       	ret

00002e4e <__fp_pscB>:
    2e4e:	00 24       	eor	r0, r0
    2e50:	0a 94       	dec	r0
    2e52:	12 16       	cp	r1, r18
    2e54:	13 06       	cpc	r1, r19
    2e56:	14 06       	cpc	r1, r20
    2e58:	05 06       	cpc	r0, r21
    2e5a:	08 95       	ret

00002e5c <__fp_round>:
    2e5c:	09 2e       	mov	r0, r25
    2e5e:	03 94       	inc	r0
    2e60:	00 0c       	add	r0, r0
    2e62:	11 f4       	brne	.+4      	; 0x2e68 <__fp_round+0xc>
    2e64:	88 23       	and	r24, r24
    2e66:	52 f0       	brmi	.+20     	; 0x2e7c <__fp_round+0x20>
    2e68:	bb 0f       	add	r27, r27
    2e6a:	40 f4       	brcc	.+16     	; 0x2e7c <__fp_round+0x20>
    2e6c:	bf 2b       	or	r27, r31
    2e6e:	11 f4       	brne	.+4      	; 0x2e74 <__fp_round+0x18>
    2e70:	60 ff       	sbrs	r22, 0
    2e72:	04 c0       	rjmp	.+8      	; 0x2e7c <__fp_round+0x20>
    2e74:	6f 5f       	subi	r22, 0xFF	; 255
    2e76:	7f 4f       	sbci	r23, 0xFF	; 255
    2e78:	8f 4f       	sbci	r24, 0xFF	; 255
    2e7a:	9f 4f       	sbci	r25, 0xFF	; 255
    2e7c:	08 95       	ret

00002e7e <__fp_split3>:
    2e7e:	57 fd       	sbrc	r21, 7
    2e80:	90 58       	subi	r25, 0x80	; 128
    2e82:	44 0f       	add	r20, r20
    2e84:	55 1f       	adc	r21, r21
    2e86:	59 f0       	breq	.+22     	; 0x2e9e <__fp_splitA+0x10>
    2e88:	5f 3f       	cpi	r21, 0xFF	; 255
    2e8a:	71 f0       	breq	.+28     	; 0x2ea8 <__fp_splitA+0x1a>
    2e8c:	47 95       	ror	r20

00002e8e <__fp_splitA>:
    2e8e:	88 0f       	add	r24, r24
    2e90:	97 fb       	bst	r25, 7
    2e92:	99 1f       	adc	r25, r25
    2e94:	61 f0       	breq	.+24     	; 0x2eae <__fp_splitA+0x20>
    2e96:	9f 3f       	cpi	r25, 0xFF	; 255
    2e98:	79 f0       	breq	.+30     	; 0x2eb8 <__fp_splitA+0x2a>
    2e9a:	87 95       	ror	r24
    2e9c:	08 95       	ret
    2e9e:	12 16       	cp	r1, r18
    2ea0:	13 06       	cpc	r1, r19
    2ea2:	14 06       	cpc	r1, r20
    2ea4:	55 1f       	adc	r21, r21
    2ea6:	f2 cf       	rjmp	.-28     	; 0x2e8c <__fp_split3+0xe>
    2ea8:	46 95       	lsr	r20
    2eaa:	f1 df       	rcall	.-30     	; 0x2e8e <__fp_splitA>
    2eac:	08 c0       	rjmp	.+16     	; 0x2ebe <__fp_splitA+0x30>
    2eae:	16 16       	cp	r1, r22
    2eb0:	17 06       	cpc	r1, r23
    2eb2:	18 06       	cpc	r1, r24
    2eb4:	99 1f       	adc	r25, r25
    2eb6:	f1 cf       	rjmp	.-30     	; 0x2e9a <__fp_splitA+0xc>
    2eb8:	86 95       	lsr	r24
    2eba:	71 05       	cpc	r23, r1
    2ebc:	61 05       	cpc	r22, r1
    2ebe:	08 94       	sec
    2ec0:	08 95       	ret

00002ec2 <__fp_zero>:
    2ec2:	e8 94       	clt

00002ec4 <__fp_szero>:
    2ec4:	bb 27       	eor	r27, r27
    2ec6:	66 27       	eor	r22, r22
    2ec8:	77 27       	eor	r23, r23
    2eca:	cb 01       	movw	r24, r22
    2ecc:	97 f9       	bld	r25, 7
    2ece:	08 95       	ret

00002ed0 <__mulsf3>:
    2ed0:	0b d0       	rcall	.+22     	; 0x2ee8 <__mulsf3x>
    2ed2:	c4 cf       	rjmp	.-120    	; 0x2e5c <__fp_round>
    2ed4:	b5 df       	rcall	.-150    	; 0x2e40 <__fp_pscA>
    2ed6:	28 f0       	brcs	.+10     	; 0x2ee2 <__mulsf3+0x12>
    2ed8:	ba df       	rcall	.-140    	; 0x2e4e <__fp_pscB>
    2eda:	18 f0       	brcs	.+6      	; 0x2ee2 <__mulsf3+0x12>
    2edc:	95 23       	and	r25, r21
    2ede:	09 f0       	breq	.+2      	; 0x2ee2 <__mulsf3+0x12>
    2ee0:	a6 cf       	rjmp	.-180    	; 0x2e2e <__fp_inf>
    2ee2:	ab cf       	rjmp	.-170    	; 0x2e3a <__fp_nan>
    2ee4:	11 24       	eor	r1, r1
    2ee6:	ee cf       	rjmp	.-36     	; 0x2ec4 <__fp_szero>

00002ee8 <__mulsf3x>:
    2ee8:	ca df       	rcall	.-108    	; 0x2e7e <__fp_split3>
    2eea:	a0 f3       	brcs	.-24     	; 0x2ed4 <__mulsf3+0x4>

00002eec <__mulsf3_pse>:
    2eec:	95 9f       	mul	r25, r21
    2eee:	d1 f3       	breq	.-12     	; 0x2ee4 <__mulsf3+0x14>
    2ef0:	95 0f       	add	r25, r21
    2ef2:	50 e0       	ldi	r21, 0x00	; 0
    2ef4:	55 1f       	adc	r21, r21
    2ef6:	62 9f       	mul	r22, r18
    2ef8:	f0 01       	movw	r30, r0
    2efa:	72 9f       	mul	r23, r18
    2efc:	bb 27       	eor	r27, r27
    2efe:	f0 0d       	add	r31, r0
    2f00:	b1 1d       	adc	r27, r1
    2f02:	63 9f       	mul	r22, r19
    2f04:	aa 27       	eor	r26, r26
    2f06:	f0 0d       	add	r31, r0
    2f08:	b1 1d       	adc	r27, r1
    2f0a:	aa 1f       	adc	r26, r26
    2f0c:	64 9f       	mul	r22, r20
    2f0e:	66 27       	eor	r22, r22
    2f10:	b0 0d       	add	r27, r0
    2f12:	a1 1d       	adc	r26, r1
    2f14:	66 1f       	adc	r22, r22
    2f16:	82 9f       	mul	r24, r18
    2f18:	22 27       	eor	r18, r18
    2f1a:	b0 0d       	add	r27, r0
    2f1c:	a1 1d       	adc	r26, r1
    2f1e:	62 1f       	adc	r22, r18
    2f20:	73 9f       	mul	r23, r19
    2f22:	b0 0d       	add	r27, r0
    2f24:	a1 1d       	adc	r26, r1
    2f26:	62 1f       	adc	r22, r18
    2f28:	83 9f       	mul	r24, r19
    2f2a:	a0 0d       	add	r26, r0
    2f2c:	61 1d       	adc	r22, r1
    2f2e:	22 1f       	adc	r18, r18
    2f30:	74 9f       	mul	r23, r20
    2f32:	33 27       	eor	r19, r19
    2f34:	a0 0d       	add	r26, r0
    2f36:	61 1d       	adc	r22, r1
    2f38:	23 1f       	adc	r18, r19
    2f3a:	84 9f       	mul	r24, r20
    2f3c:	60 0d       	add	r22, r0
    2f3e:	21 1d       	adc	r18, r1
    2f40:	82 2f       	mov	r24, r18
    2f42:	76 2f       	mov	r23, r22
    2f44:	6a 2f       	mov	r22, r26
    2f46:	11 24       	eor	r1, r1
    2f48:	9f 57       	subi	r25, 0x7F	; 127
    2f4a:	50 40       	sbci	r21, 0x00	; 0
    2f4c:	8a f0       	brmi	.+34     	; 0x2f70 <__mulsf3_pse+0x84>
    2f4e:	e1 f0       	breq	.+56     	; 0x2f88 <__mulsf3_pse+0x9c>
    2f50:	88 23       	and	r24, r24
    2f52:	4a f0       	brmi	.+18     	; 0x2f66 <__mulsf3_pse+0x7a>
    2f54:	ee 0f       	add	r30, r30
    2f56:	ff 1f       	adc	r31, r31
    2f58:	bb 1f       	adc	r27, r27
    2f5a:	66 1f       	adc	r22, r22
    2f5c:	77 1f       	adc	r23, r23
    2f5e:	88 1f       	adc	r24, r24
    2f60:	91 50       	subi	r25, 0x01	; 1
    2f62:	50 40       	sbci	r21, 0x00	; 0
    2f64:	a9 f7       	brne	.-22     	; 0x2f50 <__mulsf3_pse+0x64>
    2f66:	9e 3f       	cpi	r25, 0xFE	; 254
    2f68:	51 05       	cpc	r21, r1
    2f6a:	70 f0       	brcs	.+28     	; 0x2f88 <__mulsf3_pse+0x9c>
    2f6c:	60 cf       	rjmp	.-320    	; 0x2e2e <__fp_inf>
    2f6e:	aa cf       	rjmp	.-172    	; 0x2ec4 <__fp_szero>
    2f70:	5f 3f       	cpi	r21, 0xFF	; 255
    2f72:	ec f3       	brlt	.-6      	; 0x2f6e <__mulsf3_pse+0x82>
    2f74:	98 3e       	cpi	r25, 0xE8	; 232
    2f76:	dc f3       	brlt	.-10     	; 0x2f6e <__mulsf3_pse+0x82>
    2f78:	86 95       	lsr	r24
    2f7a:	77 95       	ror	r23
    2f7c:	67 95       	ror	r22
    2f7e:	b7 95       	ror	r27
    2f80:	f7 95       	ror	r31
    2f82:	e7 95       	ror	r30
    2f84:	9f 5f       	subi	r25, 0xFF	; 255
    2f86:	c1 f7       	brne	.-16     	; 0x2f78 <__mulsf3_pse+0x8c>
    2f88:	fe 2b       	or	r31, r30
    2f8a:	88 0f       	add	r24, r24
    2f8c:	91 1d       	adc	r25, r1
    2f8e:	96 95       	lsr	r25
    2f90:	87 95       	ror	r24
    2f92:	97 f9       	bld	r25, 7
    2f94:	08 95       	ret

00002f96 <__udivmodsi4>:
    2f96:	a1 e2       	ldi	r26, 0x21	; 33
    2f98:	1a 2e       	mov	r1, r26
    2f9a:	aa 1b       	sub	r26, r26
    2f9c:	bb 1b       	sub	r27, r27
    2f9e:	fd 01       	movw	r30, r26
    2fa0:	0d c0       	rjmp	.+26     	; 0x2fbc <__udivmodsi4_ep>

00002fa2 <__udivmodsi4_loop>:
    2fa2:	aa 1f       	adc	r26, r26
    2fa4:	bb 1f       	adc	r27, r27
    2fa6:	ee 1f       	adc	r30, r30
    2fa8:	ff 1f       	adc	r31, r31
    2faa:	a2 17       	cp	r26, r18
    2fac:	b3 07       	cpc	r27, r19
    2fae:	e4 07       	cpc	r30, r20
    2fb0:	f5 07       	cpc	r31, r21
    2fb2:	20 f0       	brcs	.+8      	; 0x2fbc <__udivmodsi4_ep>
    2fb4:	a2 1b       	sub	r26, r18
    2fb6:	b3 0b       	sbc	r27, r19
    2fb8:	e4 0b       	sbc	r30, r20
    2fba:	f5 0b       	sbc	r31, r21

00002fbc <__udivmodsi4_ep>:
    2fbc:	66 1f       	adc	r22, r22
    2fbe:	77 1f       	adc	r23, r23
    2fc0:	88 1f       	adc	r24, r24
    2fc2:	99 1f       	adc	r25, r25
    2fc4:	1a 94       	dec	r1
    2fc6:	69 f7       	brne	.-38     	; 0x2fa2 <__udivmodsi4_loop>
    2fc8:	60 95       	com	r22
    2fca:	70 95       	com	r23
    2fcc:	80 95       	com	r24
    2fce:	90 95       	com	r25
    2fd0:	9b 01       	movw	r18, r22
    2fd2:	ac 01       	movw	r20, r24
    2fd4:	bd 01       	movw	r22, r26
    2fd6:	cf 01       	movw	r24, r30
    2fd8:	08 95       	ret

00002fda <__tablejump2__>:
    2fda:	ee 0f       	add	r30, r30
    2fdc:	ff 1f       	adc	r31, r31
    2fde:	88 1f       	adc	r24, r24
    2fe0:	8b bf       	out	0x3b, r24	; 59
    2fe2:	07 90       	elpm	r0, Z+
    2fe4:	f6 91       	elpm	r31, Z
    2fe6:	e0 2d       	mov	r30, r0
    2fe8:	19 94       	eijmp

00002fea <memcpy_P>:
    2fea:	fb 01       	movw	r30, r22
    2fec:	dc 01       	movw	r26, r24
    2fee:	02 c0       	rjmp	.+4      	; 0x2ff4 <memcpy_P+0xa>
    2ff0:	05 90       	lpm	r0, Z+
    2ff2:	0d 92       	st	X+, r0
    2ff4:	41 50       	subi	r20, 0x01	; 1
    2ff6:	50 40       	sbci	r21, 0x00	; 0
    2ff8:	d8 f7       	brcc	.-10     	; 0x2ff0 <memcpy_P+0x6>
    2ffa:	08 95       	ret

00002ffc <memcmp>:
    2ffc:	fb 01       	movw	r30, r22
    2ffe:	dc 01       	movw	r26, r24
    3000:	04 c0       	rjmp	.+8      	; 0x300a <memcmp+0xe>
    3002:	8d 91       	ld	r24, X+
    3004:	01 90       	ld	r0, Z+
    3006:	80 19       	sub	r24, r0
    3008:	21 f4       	brne	.+8      	; 0x3012 <memcmp+0x16>
    300a:	41 50       	subi	r20, 0x01	; 1
    300c:	50 40       	sbci	r21, 0x00	; 0
    300e:	c8 f7       	brcc	.-14     	; 0x3002 <memcmp+0x6>
    3010:	88 1b       	sub	r24, r24
    3012:	99 0b       	sbc	r25, r25
    3014:	08 95       	ret

00003016 <strncpy>:
    3016:	fb 01       	movw	r30, r22
    3018:	dc 01       	movw	r26, r24
    301a:	41 50       	subi	r20, 0x01	; 1
    301c:	50 40       	sbci	r21, 0x00	; 0
    301e:	48 f0       	brcs	.+18     	; 0x3032 <strncpy+0x1c>
    3020:	01 90       	ld	r0, Z+
    3022:	0d 92       	st	X+, r0
    3024:	00 20       	and	r0, r0
    3026:	c9 f7       	brne	.-14     	; 0x301a <strncpy+0x4>
    3028:	01 c0       	rjmp	.+2      	; 0x302c <strncpy+0x16>
    302a:	1d 92       	st	X+, r1
    302c:	41 50       	subi	r20, 0x01	; 1
    302e:	50 40       	sbci	r21, 0x00	; 0
    3030:	e0 f7       	brcc	.-8      	; 0x302a <strncpy+0x14>
    3032:	08 95       	ret

00003034 <_exit>:
    3034:	f8 94       	cli

00003036 <__stop_program>:
    3036:	ff cf       	rjmp	.-2      	; 0x3036 <__stop_program>
